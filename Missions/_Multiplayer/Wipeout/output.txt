// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 58 0 0
// InitMultiplayer ;
  20: CALL 117 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// Multiplayer_Start ;
  37: CALL 3215 0 0
// ResetFog ;
  41: CALL_OW 335
// game := true ;
  45: LD_ADDR_EXP 2
  49: PUSH
  50: LD_INT 1
  52: ST_TO_ADDR
// Multiplayer_End ;
  53: CALL 3327 0 0
// end ;
  57: END
// export debug , game , botSides ; function InitVariables ; begin
  58: LD_INT 0
  60: PPUSH
// debug := 1 ;
  61: LD_ADDR_EXP 1
  65: PUSH
  66: LD_INT 1
  68: ST_TO_ADDR
// botSides := [ 1 , 2 ] ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_INT 1
  76: PUSH
  77: LD_INT 2
  79: PUSH
  80: EMPTY
  81: LIST
  82: LIST
  83: ST_TO_ADDR
// end ;
  84: LD_VAR 0 1
  88: RET
// every 0 0$01 trigger game and not debug_strings do
  89: LD_EXP 2
  93: PUSH
  94: LD_OWVAR 48
  98: NOT
  99: AND
 100: IFFALSE 116
 102: GO 104
 104: DISABLE
// begin enable ;
 105: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 106: LD_ADDR_OWVAR 47
 110: PUSH
 111: CALL 3846 0 0
 115: ST_TO_ADDR
// end ; end_of_file
 116: END
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , mulit_extra_oil , multi_support , multi_commanders , multi_loosers , multi_players_amount , multi_reinforcements , multi_support_arrive_time , multi_buildings ; export function InitMultiplayer ; var i , j , x , tmp ; begin
 117: LD_INT 0
 119: PPUSH
 120: PPUSH
 121: PPUSH
 122: PPUSH
 123: PPUSH
// multi_settings_counter := 6 ;
 124: LD_ADDR_EXP 16
 128: PUSH
 129: LD_INT 6
 131: ST_TO_ADDR
// if Multiplayer then
 132: LD_OWVAR 4
 136: IFFALSE 316
// begin your_side := mp_player_side ;
 138: LD_ADDR_OWVAR 2
 142: PUSH
 143: LD_OWVAR 7
 147: ST_TO_ADDR
// multi_gametype := mp_game_type ;
 148: LD_ADDR_EXP 4
 152: PUSH
 153: LD_OWVAR 6
 157: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
 158: LD_ADDR_EXP 5
 162: PUSH
 163: LD_OWVAR 17
 167: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
 168: LD_ADDR_EXP 6
 172: PUSH
 173: LD_OWVAR 15
 177: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
 178: LD_ADDR_EXP 7
 182: PUSH
 183: LD_OWVAR 16
 187: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
 188: LD_ADDR_EXP 8
 192: PUSH
 193: EMPTY
 194: PUSH
 195: EMPTY
 196: LIST
 197: ST_TO_ADDR
// for i in mp_teams do
 198: LD_ADDR_VAR 0 2
 202: PUSH
 203: LD_OWVAR 12
 207: PUSH
 208: FOR_IN
 209: IFFALSE 252
// if i then
 211: LD_VAR 0 2
 215: IFFALSE 250
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
 217: LD_ADDR_EXP 8
 221: PUSH
 222: LD_EXP 8
 226: PPUSH
 227: LD_INT 1
 229: PPUSH
 230: LD_EXP 8
 234: PUSH
 235: LD_INT 1
 237: ARRAY
 238: PUSH
 239: LD_VAR 0 2
 243: UNION
 244: PPUSH
 245: CALL_OW 1
 249: ST_TO_ADDR
 250: GO 208
 252: POP
 253: POP
// for i := 1 to multi_settings_counter do
 254: LD_ADDR_VAR 0 2
 258: PUSH
 259: DOUBLE
 260: LD_INT 1
 262: DEC
 263: ST_TO_ADDR
 264: LD_EXP 16
 268: PUSH
 269: FOR_TO
 270: IFFALSE 312
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
 272: LD_ADDR_EXP 15
 276: PUSH
 277: LD_EXP 15
 281: PPUSH
 282: LD_EXP 15
 286: PUSH
 287: LD_INT 1
 289: PLUS
 290: PPUSH
 291: LD_VAR 0 2
 295: PPUSH
 296: CALL_OW 426
 300: PUSH
 301: LD_INT 1
 303: PLUS
 304: PPUSH
 305: CALL_OW 1
 309: ST_TO_ADDR
 310: GO 269
 312: POP
 313: POP
// end else
 314: GO 502
// begin your_side := 3 ;
 316: LD_ADDR_OWVAR 2
 320: PUSH
 321: LD_INT 3
 323: ST_TO_ADDR
// multi_gametype := 1 ;
 324: LD_ADDR_EXP 4
 328: PUSH
 329: LD_INT 1
 331: ST_TO_ADDR
// multi_sides := [ 0 , 0 , 1 , 2 , 3 , 0 , 0 , 0 ] ;
 332: LD_ADDR_EXP 5
 336: PUSH
 337: LD_INT 0
 339: PUSH
 340: LD_INT 0
 342: PUSH
 343: LD_INT 1
 345: PUSH
 346: LD_INT 2
 348: PUSH
 349: LD_INT 3
 351: PUSH
 352: LD_INT 0
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: LD_INT 0
 360: PUSH
 361: EMPTY
 362: LIST
 363: LIST
 364: LIST
 365: LIST
 366: LIST
 367: LIST
 368: LIST
 369: LIST
 370: ST_TO_ADDR
// multi_side_teams := [ 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 ] ;
 371: LD_ADDR_EXP 6
 375: PUSH
 376: LD_INT 0
 378: PUSH
 379: LD_INT 0
 381: PUSH
 382: LD_INT 1
 384: PUSH
 385: LD_INT 1
 387: PUSH
 388: LD_INT 1
 390: PUSH
 391: LD_INT 0
 393: PUSH
 394: LD_INT 0
 396: PUSH
 397: LD_INT 0
 399: PUSH
 400: EMPTY
 401: LIST
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: LIST
 407: LIST
 408: LIST
 409: ST_TO_ADDR
// multi_nations := [ 0 , 0 , 3 , 3 , 3 , 0 , 0 , 0 ] ;
 410: LD_ADDR_EXP 7
 414: PUSH
 415: LD_INT 0
 417: PUSH
 418: LD_INT 0
 420: PUSH
 421: LD_INT 3
 423: PUSH
 424: LD_INT 3
 426: PUSH
 427: LD_INT 3
 429: PUSH
 430: LD_INT 0
 432: PUSH
 433: LD_INT 0
 435: PUSH
 436: LD_INT 0
 438: PUSH
 439: EMPTY
 440: LIST
 441: LIST
 442: LIST
 443: LIST
 444: LIST
 445: LIST
 446: LIST
 447: LIST
 448: ST_TO_ADDR
// multi_teams := [ [ 3 , 4 , 5 ] ] ;
 449: LD_ADDR_EXP 8
 453: PUSH
 454: LD_INT 3
 456: PUSH
 457: LD_INT 4
 459: PUSH
 460: LD_INT 5
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: LIST
 467: PUSH
 468: EMPTY
 469: LIST
 470: ST_TO_ADDR
// multi_settings := [ 2 , 4 , 1 , 3 , 1 , 3 ] ;
 471: LD_ADDR_EXP 15
 475: PUSH
 476: LD_INT 2
 478: PUSH
 479: LD_INT 4
 481: PUSH
 482: LD_INT 1
 484: PUSH
 485: LD_INT 3
 487: PUSH
 488: LD_INT 1
 490: PUSH
 491: LD_INT 3
 493: PUSH
 494: EMPTY
 495: LIST
 496: LIST
 497: LIST
 498: LIST
 499: LIST
 500: LIST
 501: ST_TO_ADDR
// end ; multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 502: LD_ADDR_EXP 9
 506: PUSH
 507: LD_INT 0
 509: PUSH
 510: LD_INT 0
 512: PUSH
 513: LD_INT 0
 515: PUSH
 516: LD_INT 0
 518: PUSH
 519: LD_INT 0
 521: PUSH
 522: LD_INT 0
 524: PUSH
 525: LD_INT 0
 527: PUSH
 528: LD_INT 0
 530: PUSH
 531: EMPTY
 532: LIST
 533: LIST
 534: LIST
 535: LIST
 536: LIST
 537: LIST
 538: LIST
 539: LIST
 540: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 541: LD_ADDR_EXP 12
 545: PUSH
 546: LD_INT 0
 548: PUSH
 549: LD_INT 0
 551: PUSH
 552: LD_INT 0
 554: PUSH
 555: LD_INT 0
 557: PUSH
 558: LD_INT 0
 560: PUSH
 561: LD_INT 0
 563: PUSH
 564: LD_INT 0
 566: PUSH
 567: LD_INT 0
 569: PUSH
 570: EMPTY
 571: LIST
 572: LIST
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: LIST
 579: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 580: LD_ADDR_EXP 23
 584: PUSH
 585: LD_INT 0
 587: PUSH
 588: LD_INT 0
 590: PUSH
 591: LD_INT 0
 593: PUSH
 594: LD_INT 0
 596: PUSH
 597: LD_INT 0
 599: PUSH
 600: LD_INT 0
 602: PUSH
 603: LD_INT 0
 605: PUSH
 606: LD_INT 0
 608: PUSH
 609: EMPTY
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: ST_TO_ADDR
// multi_teamgame := true ;
 619: LD_ADDR_EXP 13
 623: PUSH
 624: LD_INT 1
 626: ST_TO_ADDR
// multi_allowed_nations := [ 3 ] ;
 627: LD_ADDR_EXP 11
 631: PUSH
 632: LD_INT 3
 634: PUSH
 635: EMPTY
 636: LIST
 637: ST_TO_ADDR
// multi_custom_commanders := true ;
 638: LD_ADDR_EXP 14
 642: PUSH
 643: LD_INT 1
 645: ST_TO_ADDR
// multi_commanders := [ ] ;
 646: LD_ADDR_EXP 22
 650: PUSH
 651: EMPTY
 652: ST_TO_ADDR
// multi_reinforcements := [ ] ;
 653: LD_ADDR_EXP 25
 657: PUSH
 658: EMPTY
 659: ST_TO_ADDR
// multi_players_amount := 0 ;
 660: LD_ADDR_EXP 24
 664: PUSH
 665: LD_INT 0
 667: ST_TO_ADDR
// multi_pos_area := [ [ spawnPlayer1Area , spawnPlayer1VehArea ] , [ spawnPlayer2Area , spawnPlayer2VehArea ] , [ spawnPlayer3Area , spawnPlayer3VehArea ] ] ;
 668: LD_ADDR_EXP 10
 672: PUSH
 673: LD_INT 8
 675: PUSH
 676: LD_INT 9
 678: PUSH
 679: EMPTY
 680: LIST
 681: LIST
 682: PUSH
 683: LD_INT 10
 685: PUSH
 686: LD_INT 11
 688: PUSH
 689: EMPTY
 690: LIST
 691: LIST
 692: PUSH
 693: LD_INT 12
 695: PUSH
 696: LD_INT 13
 698: PUSH
 699: EMPTY
 700: LIST
 701: LIST
 702: PUSH
 703: EMPTY
 704: LIST
 705: LIST
 706: LIST
 707: ST_TO_ADDR
// multi_buildings := [ [ [ b_depot , GetBuildingFromArea ( warehouse1Area , 0 ) , kagan ] ] , [ [ b_depot , GetBuildingFromArea ( warehouse2Area , 0 ) , beria ] ] , [ [ b_depot , GetBuildingFromArea ( warehouse3Area , 3 ) , kirov ] ] ] ;
 708: LD_ADDR_EXP 27
 712: PUSH
 713: LD_INT 0
 715: PUSH
 716: LD_INT 14
 718: PPUSH
 719: LD_INT 0
 721: PPUSH
 722: CALL 68292 0 2
 726: PUSH
 727: LD_STRING kagan
 729: PUSH
 730: EMPTY
 731: LIST
 732: LIST
 733: LIST
 734: PUSH
 735: EMPTY
 736: LIST
 737: PUSH
 738: LD_INT 0
 740: PUSH
 741: LD_INT 15
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: CALL 68292 0 2
 751: PUSH
 752: LD_STRING beria
 754: PUSH
 755: EMPTY
 756: LIST
 757: LIST
 758: LIST
 759: PUSH
 760: EMPTY
 761: LIST
 762: PUSH
 763: LD_INT 0
 765: PUSH
 766: LD_INT 16
 768: PPUSH
 769: LD_INT 3
 771: PPUSH
 772: CALL 68292 0 2
 776: PUSH
 777: LD_STRING kirov
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: LIST
 784: PUSH
 785: EMPTY
 786: LIST
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: LIST
 792: ST_TO_ADDR
// for i := 1 to 8 do
 793: LD_ADDR_VAR 0 2
 797: PUSH
 798: DOUBLE
 799: LD_INT 1
 801: DEC
 802: ST_TO_ADDR
 803: LD_INT 8
 805: PUSH
 806: FOR_TO
 807: IFFALSE 1136
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
 809: LD_VAR 0 2
 813: PPUSH
 814: CALL_OW 530
 818: IFFALSE 976
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
 820: LD_ADDR_EXP 9
 824: PUSH
 825: LD_EXP 9
 829: PPUSH
 830: LD_VAR 0 2
 834: PPUSH
 835: LD_INT 1
 837: PPUSH
 838: CALL_OW 1
 842: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
 843: LD_ADDR_EXP 7
 847: PUSH
 848: LD_EXP 7
 852: PPUSH
 853: LD_VAR 0 2
 857: PPUSH
 858: LD_INT 0
 860: PPUSH
 861: CALL_OW 1
 865: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
 866: LD_ADDR_EXP 5
 870: PUSH
 871: LD_EXP 5
 875: PPUSH
 876: LD_VAR 0 2
 880: PPUSH
 881: LD_INT 0
 883: PPUSH
 884: CALL_OW 1
 888: ST_TO_ADDR
// for j = 1 to multi_teams do
 889: LD_ADDR_VAR 0 3
 893: PUSH
 894: DOUBLE
 895: LD_INT 1
 897: DEC
 898: ST_TO_ADDR
 899: LD_EXP 8
 903: PUSH
 904: FOR_TO
 905: IFFALSE 974
// begin if i in multi_teams [ j ] then
 907: LD_VAR 0 2
 911: PUSH
 912: LD_EXP 8
 916: PUSH
 917: LD_VAR 0 3
 921: ARRAY
 922: IN
 923: IFFALSE 972
// begin tmp := multi_teams [ j ] diff i ;
 925: LD_ADDR_VAR 0 5
 929: PUSH
 930: LD_EXP 8
 934: PUSH
 935: LD_VAR 0 3
 939: ARRAY
 940: PUSH
 941: LD_VAR 0 2
 945: DIFF
 946: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
 947: LD_ADDR_EXP 8
 951: PUSH
 952: LD_EXP 8
 956: PPUSH
 957: LD_VAR 0 3
 961: PPUSH
 962: LD_VAR 0 5
 966: PPUSH
 967: CALL_OW 1
 971: ST_TO_ADDR
// end ; end ;
 972: GO 904
 974: POP
 975: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
 976: LD_EXP 7
 980: PUSH
 981: LD_VAR 0 2
 985: ARRAY
 986: PUSH
 987: LD_EXP 7
 991: PUSH
 992: LD_VAR 0 2
 996: ARRAY
 997: PUSH
 998: LD_EXP 11
1002: IN
1003: NOT
1004: AND
1005: IFFALSE 1046
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
1007: LD_ADDR_EXP 7
1011: PUSH
1012: LD_EXP 7
1016: PPUSH
1017: LD_VAR 0 2
1021: PPUSH
1022: LD_EXP 11
1026: PUSH
1027: LD_INT 1
1029: PPUSH
1030: LD_EXP 11
1034: PPUSH
1035: CALL_OW 12
1039: ARRAY
1040: PPUSH
1041: CALL_OW 1
1045: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
1046: LD_EXP 7
1050: PUSH
1051: LD_VAR 0 2
1055: ARRAY
1056: NOT
1057: PUSH
1058: LD_EXP 5
1062: PUSH
1063: LD_VAR 0 2
1067: ARRAY
1068: NOT
1069: AND
1070: PUSH
1071: LD_EXP 9
1075: PUSH
1076: LD_VAR 0 2
1080: ARRAY
1081: NOT
1082: AND
1083: IFFALSE 1108
// multi_bots := Replace ( multi_bots , i , 1 ) ;
1085: LD_ADDR_EXP 12
1089: PUSH
1090: LD_EXP 12
1094: PPUSH
1095: LD_VAR 0 2
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: CALL_OW 1
1107: ST_TO_ADDR
// if multi_sides [ i ] then
1108: LD_EXP 5
1112: PUSH
1113: LD_VAR 0 2
1117: ARRAY
1118: IFFALSE 1134
// multi_players_amount := multi_players_amount + 1 ;
1120: LD_ADDR_EXP 24
1124: PUSH
1125: LD_EXP 24
1129: PUSH
1130: LD_INT 1
1132: PLUS
1133: ST_TO_ADDR
// end ;
1134: GO 806
1136: POP
1137: POP
// for i in multi_teams do
1138: LD_ADDR_VAR 0 2
1142: PUSH
1143: LD_EXP 8
1147: PUSH
1148: FOR_IN
1149: IFFALSE 1257
// begin for j = 2 to i do
1151: LD_ADDR_VAR 0 3
1155: PUSH
1156: DOUBLE
1157: LD_INT 2
1159: DEC
1160: ST_TO_ADDR
1161: LD_VAR 0 2
1165: PUSH
1166: FOR_TO
1167: IFFALSE 1253
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
1169: LD_VAR 0 2
1173: PUSH
1174: LD_VAR 0 3
1178: ARRAY
1179: PPUSH
1180: LD_VAR 0 2
1184: PUSH
1185: LD_INT 1
1187: ARRAY
1188: PPUSH
1189: CALL_OW 343
// for x = 1 to j - 1 do
1193: LD_ADDR_VAR 0 4
1197: PUSH
1198: DOUBLE
1199: LD_INT 1
1201: DEC
1202: ST_TO_ADDR
1203: LD_VAR 0 3
1207: PUSH
1208: LD_INT 1
1210: MINUS
1211: PUSH
1212: FOR_TO
1213: IFFALSE 1249
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
1215: LD_VAR 0 2
1219: PUSH
1220: LD_VAR 0 3
1224: ARRAY
1225: PPUSH
1226: LD_VAR 0 2
1230: PUSH
1231: LD_VAR 0 4
1235: ARRAY
1236: PPUSH
1237: LD_INT 1
1239: PPUSH
1240: LD_INT 1
1242: PPUSH
1243: CALL_OW 80
1247: GO 1212
1249: POP
1250: POP
// end ;
1251: GO 1166
1253: POP
1254: POP
// end ;
1255: GO 1148
1257: POP
1258: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
1259: LD_ADDR_OWVAR 67
1263: PUSH
1264: LD_INT 1
1266: PUSH
1267: LD_INT 2
1269: PUSH
1270: LD_INT 3
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: LIST
1277: PUSH
1278: LD_EXP 15
1282: PUSH
1283: LD_INT 1
1285: ARRAY
1286: ARRAY
1287: ST_TO_ADDR
// multi_pep_amount := [ 4 , 5 , 6 , 7 ] [ multi_settings [ 2 ] ] ;
1288: LD_ADDR_EXP 17
1292: PUSH
1293: LD_INT 4
1295: PUSH
1296: LD_INT 5
1298: PUSH
1299: LD_INT 6
1301: PUSH
1302: LD_INT 7
1304: PUSH
1305: EMPTY
1306: LIST
1307: LIST
1308: LIST
1309: LIST
1310: PUSH
1311: LD_EXP 15
1315: PUSH
1316: LD_INT 2
1318: ARRAY
1319: ARRAY
1320: ST_TO_ADDR
// multi_skill_level := [ 1 , 2 , 3 , 5 ] [ multi_settings [ 3 ] ] ;
1321: LD_ADDR_EXP 18
1325: PUSH
1326: LD_INT 1
1328: PUSH
1329: LD_INT 2
1331: PUSH
1332: LD_INT 3
1334: PUSH
1335: LD_INT 5
1337: PUSH
1338: EMPTY
1339: LIST
1340: LIST
1341: LIST
1342: LIST
1343: PUSH
1344: LD_EXP 15
1348: PUSH
1349: LD_INT 3
1351: ARRAY
1352: ARRAY
1353: ST_TO_ADDR
// multi_crates_spawn := [ [ 3000 , 0 0$32 ] , [ 5000 , 0 0$22 ] , [ 6000 , 0 0$14 ] , [ 8000 , 0 0$12 ] ] [ multi_settings [ 4 ] ] ;
1354: LD_ADDR_EXP 19
1358: PUSH
1359: LD_INT 3000
1361: PUSH
1362: LD_INT 1120
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 5000
1371: PUSH
1372: LD_INT 770
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 6000
1381: PUSH
1382: LD_INT 490
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: PUSH
1389: LD_INT 8000
1391: PUSH
1392: LD_INT 420
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: PUSH
1399: EMPTY
1400: LIST
1401: LIST
1402: LIST
1403: LIST
1404: PUSH
1405: LD_EXP 15
1409: PUSH
1410: LD_INT 4
1412: ARRAY
1413: ARRAY
1414: ST_TO_ADDR
// mulit_extra_oil := [ 0 , 1 , 2 ] [ multi_settings [ 5 ] ] ;
1415: LD_ADDR_EXP 20
1419: PUSH
1420: LD_INT 0
1422: PUSH
1423: LD_INT 1
1425: PUSH
1426: LD_INT 2
1428: PUSH
1429: EMPTY
1430: LIST
1431: LIST
1432: LIST
1433: PUSH
1434: LD_EXP 15
1438: PUSH
1439: LD_INT 5
1441: ARRAY
1442: ARRAY
1443: ST_TO_ADDR
// multi_support := [ 0 , 1 , 2 ] [ multi_settings [ 6 ] ] ;
1444: LD_ADDR_EXP 21
1448: PUSH
1449: LD_INT 0
1451: PUSH
1452: LD_INT 1
1454: PUSH
1455: LD_INT 2
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: LIST
1462: PUSH
1463: LD_EXP 15
1467: PUSH
1468: LD_INT 6
1470: ARRAY
1471: ARRAY
1472: ST_TO_ADDR
// multi_support_arrive_time := [ 5 5$0 , 15 15$0 , 25 25$0 ] [ Difficulty ] ;
1473: LD_ADDR_EXP 26
1477: PUSH
1478: LD_INT 10500
1480: PUSH
1481: LD_INT 31500
1483: PUSH
1484: LD_INT 52500
1486: PUSH
1487: EMPTY
1488: LIST
1489: LIST
1490: LIST
1491: PUSH
1492: LD_OWVAR 67
1496: ARRAY
1497: ST_TO_ADDR
// end ;
1498: LD_VAR 0 1
1502: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
1503: LD_INT 0
1505: PPUSH
1506: PPUSH
// if not multi_sides [ preferSide ] then
1507: LD_EXP 5
1511: PUSH
1512: LD_VAR 0 1
1516: ARRAY
1517: NOT
1518: IFFALSE 1532
// begin result := preferSide ;
1520: LD_ADDR_VAR 0 2
1524: PUSH
1525: LD_VAR 0 1
1529: ST_TO_ADDR
// exit ;
1530: GO 1579
// end ; for i := 1 to 8 do
1532: LD_ADDR_VAR 0 3
1536: PUSH
1537: DOUBLE
1538: LD_INT 1
1540: DEC
1541: ST_TO_ADDR
1542: LD_INT 8
1544: PUSH
1545: FOR_TO
1546: IFFALSE 1577
// if not multi_sides [ i ] then
1548: LD_EXP 5
1552: PUSH
1553: LD_VAR 0 3
1557: ARRAY
1558: NOT
1559: IFFALSE 1575
// begin result := i ;
1561: LD_ADDR_VAR 0 2
1565: PUSH
1566: LD_VAR 0 3
1570: ST_TO_ADDR
// exit ;
1571: POP
1572: POP
1573: GO 1579
// end ;
1575: GO 1545
1577: POP
1578: POP
// end ;
1579: LD_VAR 0 2
1583: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
1584: LD_INT 0
1586: PPUSH
// uc_side := side ;
1587: LD_ADDR_OWVAR 20
1591: PUSH
1592: LD_VAR 0 1
1596: ST_TO_ADDR
// uc_nation := nation_russian ;
1597: LD_ADDR_OWVAR 21
1601: PUSH
1602: LD_INT 3
1604: ST_TO_ADDR
// hc_importance := 100 ;
1605: LD_ADDR_OWVAR 32
1609: PUSH
1610: LD_INT 100
1612: ST_TO_ADDR
// hc_class := class_soldier ;
1613: LD_ADDR_OWVAR 28
1617: PUSH
1618: LD_INT 1
1620: ST_TO_ADDR
// if num = 1 then
1621: LD_VAR 0 2
1625: PUSH
1626: LD_INT 1
1628: EQUAL
1629: IFFALSE 1711
// begin hc_gallery := ru ;
1631: LD_ADDR_OWVAR 33
1635: PUSH
1636: LD_STRING ru
1638: ST_TO_ADDR
// hc_face_number := 10 ;
1639: LD_ADDR_OWVAR 34
1643: PUSH
1644: LD_INT 10
1646: ST_TO_ADDR
// hc_name := Popov ;
1647: LD_ADDR_OWVAR 26
1651: PUSH
1652: LD_STRING Popov
1654: ST_TO_ADDR
// hc_sex := sex_male ;
1655: LD_ADDR_OWVAR 27
1659: PUSH
1660: LD_INT 1
1662: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 2 ] ;
1663: LD_ADDR_OWVAR 31
1667: PUSH
1668: LD_INT 3
1670: PUSH
1671: LD_INT 1
1673: PUSH
1674: LD_INT 1
1676: PUSH
1677: LD_INT 2
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: LIST
1684: LIST
1685: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
1686: LD_ADDR_OWVAR 29
1690: PUSH
1691: LD_INT 10
1693: PUSH
1694: LD_INT 10
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: ST_TO_ADDR
// result := CreateHuman ;
1701: LD_ADDR_VAR 0 3
1705: PUSH
1706: CALL_OW 44
1710: ST_TO_ADDR
// end ; if num = 2 then
1711: LD_VAR 0 2
1715: PUSH
1716: LD_INT 2
1718: EQUAL
1719: IFFALSE 1809
// begin hc_class := class_mechanic ;
1721: LD_ADDR_OWVAR 28
1725: PUSH
1726: LD_INT 3
1728: ST_TO_ADDR
// hc_gallery := ru ;
1729: LD_ADDR_OWVAR 33
1733: PUSH
1734: LD_STRING ru
1736: ST_TO_ADDR
// hc_face_number := 1 ;
1737: LD_ADDR_OWVAR 34
1741: PUSH
1742: LD_INT 1
1744: ST_TO_ADDR
// hc_name := Burlak ;
1745: LD_ADDR_OWVAR 26
1749: PUSH
1750: LD_STRING Burlak
1752: ST_TO_ADDR
// hc_sex := sex_male ;
1753: LD_ADDR_OWVAR 27
1757: PUSH
1758: LD_INT 1
1760: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 0 ] ;
1761: LD_ADDR_OWVAR 31
1765: PUSH
1766: LD_INT 1
1768: PUSH
1769: LD_INT 2
1771: PUSH
1772: LD_INT 3
1774: PUSH
1775: LD_INT 0
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1784: LD_ADDR_OWVAR 29
1788: PUSH
1789: LD_INT 10
1791: PUSH
1792: LD_INT 11
1794: PUSH
1795: EMPTY
1796: LIST
1797: LIST
1798: ST_TO_ADDR
// result := CreateHuman ;
1799: LD_ADDR_VAR 0 3
1803: PUSH
1804: CALL_OW 44
1808: ST_TO_ADDR
// end ; if num = 3 then
1809: LD_VAR 0 2
1813: PUSH
1814: LD_INT 3
1816: EQUAL
1817: IFFALSE 1899
// begin hc_gallery := ru ;
1819: LD_ADDR_OWVAR 33
1823: PUSH
1824: LD_STRING ru
1826: ST_TO_ADDR
// hc_face_number := 8 ;
1827: LD_ADDR_OWVAR 34
1831: PUSH
1832: LD_INT 8
1834: ST_TO_ADDR
// hc_name := Kurin ;
1835: LD_ADDR_OWVAR 26
1839: PUSH
1840: LD_STRING Kurin
1842: ST_TO_ADDR
// hc_sex := sex_male ;
1843: LD_ADDR_OWVAR 27
1847: PUSH
1848: LD_INT 1
1850: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 0 , 1 ] ;
1851: LD_ADDR_OWVAR 31
1855: PUSH
1856: LD_INT 4
1858: PUSH
1859: LD_INT 1
1861: PUSH
1862: LD_INT 0
1864: PUSH
1865: LD_INT 1
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1874: LD_ADDR_OWVAR 29
1878: PUSH
1879: LD_INT 12
1881: PUSH
1882: LD_INT 11
1884: PUSH
1885: EMPTY
1886: LIST
1887: LIST
1888: ST_TO_ADDR
// result := CreateHuman ;
1889: LD_ADDR_VAR 0 3
1893: PUSH
1894: CALL_OW 44
1898: ST_TO_ADDR
// end ; end ;
1899: LD_VAR 0 3
1903: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , b , cl , un , veh , tmp , copy , people_amount ; begin
1904: LD_INT 0
1906: PPUSH
1907: PPUSH
1908: PPUSH
1909: PPUSH
1910: PPUSH
1911: PPUSH
1912: PPUSH
1913: PPUSH
1914: PPUSH
1915: PPUSH
// for i := 1 to 8 do
1916: LD_ADDR_VAR 0 2
1920: PUSH
1921: DOUBLE
1922: LD_INT 1
1924: DEC
1925: ST_TO_ADDR
1926: LD_INT 8
1928: PUSH
1929: FOR_TO
1930: IFFALSE 2900
// begin if not multi_sides [ i ] then
1932: LD_EXP 5
1936: PUSH
1937: LD_VAR 0 2
1941: ARRAY
1942: NOT
1943: IFFALSE 1947
// continue ;
1945: GO 1929
// if multi_buildings [ multi_sides [ i ] ] then
1947: LD_EXP 27
1951: PUSH
1952: LD_EXP 5
1956: PUSH
1957: LD_VAR 0 2
1961: ARRAY
1962: ARRAY
1963: IFFALSE 2163
// begin uc_side := i ;
1965: LD_ADDR_OWVAR 20
1969: PUSH
1970: LD_VAR 0 2
1974: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
1975: LD_ADDR_OWVAR 21
1979: PUSH
1980: LD_EXP 7
1984: PUSH
1985: LD_VAR 0 2
1989: ARRAY
1990: ST_TO_ADDR
// for j in multi_buildings [ multi_sides [ i ] ] do
1991: LD_ADDR_VAR 0 3
1995: PUSH
1996: LD_EXP 27
2000: PUSH
2001: LD_EXP 5
2005: PUSH
2006: LD_VAR 0 2
2010: ARRAY
2011: ARRAY
2012: PUSH
2013: FOR_IN
2014: IFFALSE 2161
// begin bc_type := j [ 1 ] ;
2016: LD_ADDR_OWVAR 42
2020: PUSH
2021: LD_VAR 0 3
2025: PUSH
2026: LD_INT 1
2028: ARRAY
2029: ST_TO_ADDR
// bc_level := 2 ;
2030: LD_ADDR_OWVAR 43
2034: PUSH
2035: LD_INT 2
2037: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , j [ 2 ] [ 3 ] ) ;
2038: LD_ADDR_VAR 0 4
2042: PUSH
2043: LD_VAR 0 3
2047: PUSH
2048: LD_INT 2
2050: ARRAY
2051: PUSH
2052: LD_INT 1
2054: ARRAY
2055: PPUSH
2056: LD_VAR 0 3
2060: PUSH
2061: LD_INT 2
2063: ARRAY
2064: PUSH
2065: LD_INT 2
2067: ARRAY
2068: PPUSH
2069: LD_VAR 0 3
2073: PUSH
2074: LD_INT 2
2076: ARRAY
2077: PUSH
2078: LD_INT 3
2080: ARRAY
2081: PPUSH
2082: CALL_OW 47
2086: ST_TO_ADDR
// if j [ 1 ] = b_depot then
2087: LD_VAR 0 3
2091: PUSH
2092: LD_INT 1
2094: ARRAY
2095: PUSH
2096: LD_INT 0
2098: EQUAL
2099: IFFALSE 2159
// begin SetBName ( b , j [ 3 ] ) ;
2101: LD_VAR 0 4
2105: PPUSH
2106: LD_VAR 0 3
2110: PUSH
2111: LD_INT 3
2113: ARRAY
2114: PPUSH
2115: CALL_OW 500
// SetResourceType ( GetBase ( b ) , mat_cans , 100 ) ;
2119: LD_VAR 0 4
2123: PPUSH
2124: CALL_OW 274
2128: PPUSH
2129: LD_INT 1
2131: PPUSH
2132: LD_INT 100
2134: PPUSH
2135: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , 60 ) ;
2139: LD_VAR 0 4
2143: PPUSH
2144: CALL_OW 274
2148: PPUSH
2149: LD_INT 2
2151: PPUSH
2152: LD_INT 60
2154: PPUSH
2155: CALL_OW 277
// end ; end ;
2159: GO 2013
2161: POP
2162: POP
// end ; if multi_custom_commanders then
2163: LD_EXP 14
2167: IFFALSE 2259
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
2169: LD_ADDR_VAR 0 6
2173: PUSH
2174: LD_VAR 0 2
2178: PPUSH
2179: LD_EXP 5
2183: PUSH
2184: LD_VAR 0 2
2188: ARRAY
2189: PPUSH
2190: CALL 1584 0 2
2194: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
2195: LD_ADDR_EXP 22
2199: PUSH
2200: LD_EXP 22
2204: PPUSH
2205: LD_EXP 22
2209: PUSH
2210: LD_INT 1
2212: PLUS
2213: PPUSH
2214: LD_VAR 0 6
2218: PPUSH
2219: CALL_OW 2
2223: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2224: LD_VAR 0 6
2228: PPUSH
2229: LD_EXP 10
2233: PUSH
2234: LD_EXP 5
2238: PUSH
2239: LD_VAR 0 2
2243: ARRAY
2244: ARRAY
2245: PUSH
2246: LD_INT 1
2248: ARRAY
2249: PPUSH
2250: LD_INT 0
2252: PPUSH
2253: CALL_OW 49
// end else
2257: GO 2470
// begin uc_side := i ;
2259: LD_ADDR_OWVAR 20
2263: PUSH
2264: LD_VAR 0 2
2268: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2269: LD_ADDR_OWVAR 21
2273: PUSH
2274: LD_EXP 7
2278: PUSH
2279: LD_VAR 0 2
2283: ARRAY
2284: ST_TO_ADDR
// hc_importance := 100 ;
2285: LD_ADDR_OWVAR 32
2289: PUSH
2290: LD_INT 100
2292: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
2293: LD_INT 0
2295: PPUSH
2296: LD_INT 1
2298: PPUSH
2299: LD_EXP 18
2303: PPUSH
2304: CALL_OW 380
// if multiplayer then
2308: LD_OWVAR 4
2312: IFFALSE 2370
// begin hc_name := mp_sides_players_names [ i ] ;
2314: LD_ADDR_OWVAR 26
2318: PUSH
2319: LD_OWVAR 19
2323: PUSH
2324: LD_VAR 0 2
2328: ARRAY
2329: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
2330: LD_ADDR_OWVAR 33
2334: PUSH
2335: LD_STRING MULTIAVATARS
2337: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
2338: LD_ADDR_OWVAR 34
2342: PUSH
2343: LD_VAR 0 2
2347: PPUSH
2348: CALL_OW 525
2352: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
2353: LD_ADDR_OWVAR 27
2357: PUSH
2358: LD_VAR 0 2
2362: PPUSH
2363: CALL_OW 526
2367: ST_TO_ADDR
// end else
2368: GO 2402
// begin hc_gallery :=  ;
2370: LD_ADDR_OWVAR 33
2374: PUSH
2375: LD_STRING 
2377: ST_TO_ADDR
// hc_name :=  ;
2378: LD_ADDR_OWVAR 26
2382: PUSH
2383: LD_STRING 
2385: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
2386: LD_ADDR_OWVAR 27
2390: PUSH
2391: LD_INT 1
2393: PPUSH
2394: LD_INT 2
2396: PPUSH
2397: CALL_OW 12
2401: ST_TO_ADDR
// end ; un := CreateHuman ;
2402: LD_ADDR_VAR 0 6
2406: PUSH
2407: CALL_OW 44
2411: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2412: LD_VAR 0 6
2416: PPUSH
2417: LD_EXP 10
2421: PUSH
2422: LD_EXP 5
2426: PUSH
2427: LD_VAR 0 2
2431: ARRAY
2432: ARRAY
2433: PUSH
2434: LD_INT 1
2436: ARRAY
2437: PPUSH
2438: LD_INT 0
2440: PPUSH
2441: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
2445: LD_ADDR_EXP 22
2449: PUSH
2450: LD_EXP 22
2454: PPUSH
2455: LD_VAR 0 2
2459: PPUSH
2460: LD_VAR 0 6
2464: PPUSH
2465: CALL_OW 1
2469: ST_TO_ADDR
// end ; InitHc ;
2470: CALL_OW 19
// InitUc ;
2474: CALL_OW 18
// uc_side := i ;
2478: LD_ADDR_OWVAR 20
2482: PUSH
2483: LD_VAR 0 2
2487: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2488: LD_ADDR_OWVAR 21
2492: PUSH
2493: LD_EXP 7
2497: PUSH
2498: LD_VAR 0 2
2502: ARRAY
2503: ST_TO_ADDR
// hc_gallery :=  ;
2504: LD_ADDR_OWVAR 33
2508: PUSH
2509: LD_STRING 
2511: ST_TO_ADDR
// hc_name :=  ;
2512: LD_ADDR_OWVAR 26
2516: PUSH
2517: LD_STRING 
2519: ST_TO_ADDR
// hc_importance := 0 ;
2520: LD_ADDR_OWVAR 32
2524: PUSH
2525: LD_INT 0
2527: ST_TO_ADDR
// cl := 1 ;
2528: LD_ADDR_VAR 0 5
2532: PUSH
2533: LD_INT 1
2535: ST_TO_ADDR
// for j := 2 to multi_pep_amount do
2536: LD_ADDR_VAR 0 3
2540: PUSH
2541: DOUBLE
2542: LD_INT 2
2544: DEC
2545: ST_TO_ADDR
2546: LD_EXP 17
2550: PUSH
2551: FOR_TO
2552: IFFALSE 2896
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
2554: LD_VAR 0 3
2558: PUSH
2559: LD_INT 1
2561: MINUS
2562: PUSH
2563: LD_EXP 17
2567: PUSH
2568: LD_INT 1
2570: MINUS
2571: PUSH
2572: LD_INT 4
2574: DIVREAL
2575: MOD
2576: PUSH
2577: LD_INT 0
2579: EQUAL
2580: IFFALSE 2596
// cl := cl + 1 ;
2582: LD_ADDR_VAR 0 5
2586: PUSH
2587: LD_VAR 0 5
2591: PUSH
2592: LD_INT 1
2594: PLUS
2595: ST_TO_ADDR
// if cl > 4 then
2596: LD_VAR 0 5
2600: PUSH
2601: LD_INT 4
2603: GREATER
2604: IFFALSE 2614
// cl := 1 ;
2606: LD_ADDR_VAR 0 5
2610: PUSH
2611: LD_INT 1
2613: ST_TO_ADDR
// PrepareHuman ( false , cl , multi_skill_level ) ;
2614: LD_INT 0
2616: PPUSH
2617: LD_VAR 0 5
2621: PPUSH
2622: LD_EXP 18
2626: PPUSH
2627: CALL_OW 380
// un := CreateHuman ;
2631: LD_ADDR_VAR 0 6
2635: PUSH
2636: CALL_OW 44
2640: ST_TO_ADDR
// if j > copy then
2641: LD_VAR 0 3
2645: PUSH
2646: LD_VAR 0 9
2650: GREATER
2651: IFFALSE 2680
// copy := Replace ( copy , j , un ) else
2653: LD_ADDR_VAR 0 9
2657: PUSH
2658: LD_VAR 0 9
2662: PPUSH
2663: LD_VAR 0 3
2667: PPUSH
2668: LD_VAR 0 6
2672: PPUSH
2673: CALL_OW 1
2677: ST_TO_ADDR
2678: GO 2762
// begin CopySkills ( copy [ j ] , un ) ;
2680: LD_VAR 0 9
2684: PUSH
2685: LD_VAR 0 3
2689: ARRAY
2690: PPUSH
2691: LD_VAR 0 6
2695: PPUSH
2696: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( copy [ j ] , attr_speed ) ) ;
2700: LD_VAR 0 6
2704: PPUSH
2705: LD_INT 2
2707: PPUSH
2708: LD_VAR 0 9
2712: PUSH
2713: LD_VAR 0 3
2717: ARRAY
2718: PPUSH
2719: LD_INT 2
2721: PPUSH
2722: CALL_OW 260
2726: PPUSH
2727: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( copy [ j ] , attr_stamina ) ) ;
2731: LD_VAR 0 6
2735: PPUSH
2736: LD_INT 1
2738: PPUSH
2739: LD_VAR 0 9
2743: PUSH
2744: LD_VAR 0 3
2748: ARRAY
2749: PPUSH
2750: LD_INT 1
2752: PPUSH
2753: CALL_OW 260
2757: PPUSH
2758: CALL_OW 239
// end ; if multi_pos_area then
2762: LD_EXP 10
2766: IFFALSE 2894
// begin if GetClass ( un ) = 3 then
2768: LD_VAR 0 6
2772: PPUSH
2773: CALL_OW 257
2777: PUSH
2778: LD_INT 3
2780: EQUAL
2781: IFFALSE 2861
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 80 ) ;
2783: LD_INT 21
2785: PPUSH
2786: LD_INT 1
2788: PPUSH
2789: LD_INT 1
2791: PPUSH
2792: LD_INT 42
2794: PPUSH
2795: LD_INT 80
2797: PPUSH
2798: CALL 31052 0 5
// veh := CreateVehicle ;
2802: LD_ADDR_VAR 0 7
2806: PUSH
2807: CALL_OW 45
2811: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
2812: LD_VAR 0 7
2816: PPUSH
2817: LD_EXP 10
2821: PUSH
2822: LD_EXP 5
2826: PUSH
2827: LD_VAR 0 2
2831: ARRAY
2832: ARRAY
2833: PUSH
2834: LD_INT 2
2836: ARRAY
2837: PPUSH
2838: LD_INT 0
2840: PPUSH
2841: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
2845: LD_VAR 0 6
2849: PPUSH
2850: LD_VAR 0 7
2854: PPUSH
2855: CALL_OW 52
// continue ;
2859: GO 2551
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2861: LD_VAR 0 6
2865: PPUSH
2866: LD_EXP 10
2870: PUSH
2871: LD_EXP 5
2875: PUSH
2876: LD_VAR 0 2
2880: ARRAY
2881: ARRAY
2882: PUSH
2883: LD_INT 1
2885: ARRAY
2886: PPUSH
2887: LD_INT 0
2889: PPUSH
2890: CALL_OW 49
// end ; end ;
2894: GO 2551
2896: POP
2897: POP
// end ;
2898: GO 1929
2900: POP
2901: POP
// end ;
2902: LD_VAR 0 1
2906: RET
// export function Multiplayer_PrepareReinforcements ( ) ; var i , j , un , tmp ; begin
2907: LD_INT 0
2909: PPUSH
2910: PPUSH
2911: PPUSH
2912: PPUSH
2913: PPUSH
// if not multi_support then
2914: LD_EXP 21
2918: NOT
2919: IFFALSE 2923
// exit ;
2921: GO 3210
// result := [ ] ;
2923: LD_ADDR_VAR 0 1
2927: PUSH
2928: EMPTY
2929: ST_TO_ADDR
// for i := 1 to 8 do
2930: LD_ADDR_VAR 0 2
2934: PUSH
2935: DOUBLE
2936: LD_INT 1
2938: DEC
2939: ST_TO_ADDR
2940: LD_INT 8
2942: PUSH
2943: FOR_TO
2944: IFFALSE 3208
// begin result := Replace ( result , i , [ ] ) ;
2946: LD_ADDR_VAR 0 1
2950: PUSH
2951: LD_VAR 0 1
2955: PPUSH
2956: LD_VAR 0 2
2960: PPUSH
2961: EMPTY
2962: PPUSH
2963: CALL_OW 1
2967: ST_TO_ADDR
// if multi_sides [ i ] then
2968: LD_EXP 5
2972: PUSH
2973: LD_VAR 0 2
2977: ARRAY
2978: IFFALSE 3206
// begin tmp := [ ] ;
2980: LD_ADDR_VAR 0 5
2984: PUSH
2985: EMPTY
2986: ST_TO_ADDR
// if multi_support = 1 then
2987: LD_EXP 21
2991: PUSH
2992: LD_INT 1
2994: EQUAL
2995: IFFALSE 3084
// begin uc_side := i ;
2997: LD_ADDR_OWVAR 20
3001: PUSH
3002: LD_VAR 0 2
3006: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3007: LD_ADDR_OWVAR 21
3011: PUSH
3012: LD_EXP 7
3016: PUSH
3017: LD_VAR 0 2
3021: ARRAY
3022: ST_TO_ADDR
// for j := 1 to 2 do
3023: LD_ADDR_VAR 0 3
3027: PUSH
3028: DOUBLE
3029: LD_INT 1
3031: DEC
3032: ST_TO_ADDR
3033: LD_INT 2
3035: PUSH
3036: FOR_TO
3037: IFFALSE 3082
// begin InitHC_All ( ) ;
3039: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
3043: LD_INT 0
3045: PPUSH
3046: LD_INT 1
3048: PPUSH
3049: LD_INT 4
3051: PPUSH
3052: CALL_OW 12
3056: PPUSH
3057: LD_INT 1
3059: PPUSH
3060: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
3064: LD_ADDR_VAR 0 5
3068: PUSH
3069: LD_VAR 0 5
3073: PUSH
3074: CALL_OW 44
3078: ADD
3079: ST_TO_ADDR
// end ;
3080: GO 3036
3082: POP
3083: POP
// end ; if multi_support = 2 then
3084: LD_EXP 21
3088: PUSH
3089: LD_INT 2
3091: EQUAL
3092: IFFALSE 3181
// begin uc_side := i ;
3094: LD_ADDR_OWVAR 20
3098: PUSH
3099: LD_VAR 0 2
3103: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3104: LD_ADDR_OWVAR 21
3108: PUSH
3109: LD_EXP 7
3113: PUSH
3114: LD_VAR 0 2
3118: ARRAY
3119: ST_TO_ADDR
// for j := 1 to 4 do
3120: LD_ADDR_VAR 0 3
3124: PUSH
3125: DOUBLE
3126: LD_INT 1
3128: DEC
3129: ST_TO_ADDR
3130: LD_INT 4
3132: PUSH
3133: FOR_TO
3134: IFFALSE 3179
// begin InitHC_All ( ) ;
3136: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , 2 ) ;
3140: LD_INT 0
3142: PPUSH
3143: LD_INT 1
3145: PPUSH
3146: LD_INT 4
3148: PPUSH
3149: CALL_OW 12
3153: PPUSH
3154: LD_INT 2
3156: PPUSH
3157: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
3161: LD_ADDR_VAR 0 5
3165: PUSH
3166: LD_VAR 0 5
3170: PUSH
3171: CALL_OW 44
3175: ADD
3176: ST_TO_ADDR
// end ;
3177: GO 3133
3179: POP
3180: POP
// end ; result := Replace ( result , i , tmp ) ;
3181: LD_ADDR_VAR 0 1
3185: PUSH
3186: LD_VAR 0 1
3190: PPUSH
3191: LD_VAR 0 2
3195: PPUSH
3196: LD_VAR 0 5
3200: PPUSH
3201: CALL_OW 1
3205: ST_TO_ADDR
// end ; end ;
3206: GO 2943
3208: POP
3209: POP
// end ;
3210: LD_VAR 0 1
3214: RET
// export function Multiplayer_Start ( ) ; begin
3215: LD_INT 0
3217: PPUSH
// Multiplayer_PreparePlayers ( ) ;
3218: CALL 1904 0 0
// Multiplayer_InitPointSystem ( ) ;
3222: CALL 3935 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
3226: LD_INT 20
3228: PPUSH
3229: CALL 4111 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
3233: LD_INT 150
3235: PPUSH
3236: CALL 4111 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
3240: LD_INT 5
3242: PPUSH
3243: CALL 4111 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
3247: LD_INT 40
3249: NEG
3250: PPUSH
3251: CALL 4111 0 1
// Multiplayer_RegisterCondition ( 200 ) ;
3255: LD_INT 200
3257: PPUSH
3258: CALL 4111 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
3262: LD_INT 2
3264: PPUSH
3265: CALL 4111 0 1
// if multi_support then
3269: LD_EXP 21
3273: IFFALSE 3285
// multi_reinforcements := Multiplayer_PrepareReinforcements ( ) ;
3275: LD_ADDR_EXP 25
3279: PUSH
3280: CALL 2907 0 0
3284: ST_TO_ADDR
// if multi_sides [ your_side ] then
3285: LD_EXP 5
3289: PUSH
3290: LD_OWVAR 2
3294: ARRAY
3295: IFFALSE 3322
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
3297: LD_INT 22
3299: PUSH
3300: LD_OWVAR 2
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: PPUSH
3309: CALL_OW 69
3313: PUSH
3314: LD_INT 1
3316: ARRAY
3317: PPUSH
3318: CALL_OW 87
// end ;
3322: LD_VAR 0 1
3326: RET
// export function Multiplayer_End ( ) ; var i , j ; begin
3327: LD_INT 0
3329: PPUSH
3330: PPUSH
3331: PPUSH
// repeat wait ( 0 0$1 ) ;
3332: LD_INT 35
3334: PPUSH
3335: CALL_OW 67
// if tick > multi_support_arrive_time and multi_support then
3339: LD_OWVAR 1
3343: PUSH
3344: LD_EXP 26
3348: GREATER
3349: PUSH
3350: LD_EXP 21
3354: AND
3355: IFFALSE 3497
// begin if tick mod 1 1$00 = 0 then
3357: LD_OWVAR 1
3361: PUSH
3362: LD_INT 2100
3364: MOD
3365: PUSH
3366: LD_INT 0
3368: EQUAL
3369: IFFALSE 3497
// begin for i := 1 to 8 do
3371: LD_ADDR_VAR 0 2
3375: PUSH
3376: DOUBLE
3377: LD_INT 1
3379: DEC
3380: ST_TO_ADDR
3381: LD_INT 8
3383: PUSH
3384: FOR_TO
3385: IFFALSE 3495
// begin if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] and Prob ( 50 ) then
3387: LD_EXP 5
3391: PUSH
3392: LD_VAR 0 2
3396: ARRAY
3397: PUSH
3398: LD_EXP 23
3402: PUSH
3403: LD_VAR 0 2
3407: ARRAY
3408: NOT
3409: AND
3410: PUSH
3411: LD_EXP 25
3415: PUSH
3416: LD_VAR 0 2
3420: ARRAY
3421: AND
3422: PUSH
3423: LD_INT 50
3425: PPUSH
3426: CALL_OW 13
3430: AND
3431: IFFALSE 3493
// begin PlaceUnitArea ( multi_reinforcements [ i ] [ 1 ] , spawnHumanArea , false ) ;
3433: LD_EXP 25
3437: PUSH
3438: LD_VAR 0 2
3442: ARRAY
3443: PUSH
3444: LD_INT 1
3446: ARRAY
3447: PPUSH
3448: LD_INT 7
3450: PPUSH
3451: LD_INT 0
3453: PPUSH
3454: CALL_OW 49
// multi_reinforcements := Replace ( multi_reinforcements , i , Delete ( multi_reinforcements , 1 ) ) ;
3458: LD_ADDR_EXP 25
3462: PUSH
3463: LD_EXP 25
3467: PPUSH
3468: LD_VAR 0 2
3472: PPUSH
3473: LD_EXP 25
3477: PPUSH
3478: LD_INT 1
3480: PPUSH
3481: CALL_OW 3
3485: PPUSH
3486: CALL_OW 1
3490: ST_TO_ADDR
// break ;
3491: GO 3495
// end ; end ;
3493: GO 3384
3495: POP
3496: POP
// end ; end ; if not multi_custom_commanders then
3497: LD_EXP 14
3501: NOT
3502: IFFALSE 3615
// begin for i := 1 to 8 do
3504: LD_ADDR_VAR 0 2
3508: PUSH
3509: DOUBLE
3510: LD_INT 1
3512: DEC
3513: ST_TO_ADDR
3514: LD_INT 8
3516: PUSH
3517: FOR_TO
3518: IFFALSE 3589
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
3520: LD_INT 22
3522: PUSH
3523: LD_VAR 0 2
3527: PUSH
3528: EMPTY
3529: LIST
3530: LIST
3531: PPUSH
3532: CALL_OW 69
3536: PUSH
3537: LD_INT 0
3539: EQUAL
3540: PUSH
3541: LD_EXP 23
3545: PUSH
3546: LD_VAR 0 2
3550: ARRAY
3551: NOT
3552: AND
3553: IFFALSE 3587
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
3555: LD_ADDR_EXP 23
3559: PUSH
3560: LD_EXP 23
3564: PPUSH
3565: LD_VAR 0 2
3569: PPUSH
3570: LD_INT 1
3572: PPUSH
3573: CALL_OW 1
3577: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
3578: LD_VAR 0 2
3582: PPUSH
3583: CALL 4181 0 1
// end ; end ;
3587: GO 3517
3589: POP
3590: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
3591: LD_EXP 23
3595: PPUSH
3596: CALL 28314 0 1
3600: PUSH
3601: LD_EXP 5
3605: PPUSH
3606: CALL 28314 0 1
3610: EQUAL
3611: IFFALSE 3615
// break ;
3613: GO 3635
// end ; until ( not Multiplayer_EnemyAlive ( ) and game ) or not multi_commanders ;
3615: CALL 3749 0 0
3619: NOT
3620: PUSH
3621: LD_EXP 2
3625: AND
3626: PUSH
3627: LD_EXP 22
3631: NOT
3632: OR
3633: IFFALSE 3332
// game := false ;
3635: LD_ADDR_EXP 2
3639: PUSH
3640: LD_INT 0
3642: ST_TO_ADDR
// for i := 1 to 8 do
3643: LD_ADDR_VAR 0 2
3647: PUSH
3648: DOUBLE
3649: LD_INT 1
3651: DEC
3652: ST_TO_ADDR
3653: LD_INT 8
3655: PUSH
3656: FOR_TO
3657: IFFALSE 3693
// begin if multi_sides [ i ] then
3659: LD_EXP 5
3663: PUSH
3664: LD_VAR 0 2
3668: ARRAY
3669: IFFALSE 3691
// SetMultiScore ( i , multi_points [ i ] ) ;
3671: LD_VAR 0 2
3675: PPUSH
3676: LD_EXP 28
3680: PUSH
3681: LD_VAR 0 2
3685: ARRAY
3686: PPUSH
3687: CALL_OW 506
// end ;
3691: GO 3656
3693: POP
3694: POP
// if multi_loosers [ your_side ] then
3695: LD_EXP 23
3699: PUSH
3700: LD_OWVAR 2
3704: ARRAY
3705: IFFALSE 3728
// begin if Multiplayer then
3707: LD_OWVAR 4
3711: IFFALSE 3719
// YouLostInMultiplayer else
3713: CALL_OW 107
3717: GO 3726
// YouLost (  ) ;
3719: LD_STRING 
3721: PPUSH
3722: CALL_OW 104
// end else
3726: GO 3744
// begin if Multiplayer then
3728: LD_OWVAR 4
3732: IFFALSE 3740
// YouWinInMultiplayer else
3734: CALL_OW 106
3738: GO 3744
// YouWin ;
3740: CALL_OW 103
// end ; end ;
3744: LD_VAR 0 1
3748: RET
// export function Multiplayer_EnemyAlive ( ) ; var side ; begin
3749: LD_INT 0
3751: PPUSH
3752: PPUSH
// result := true ;
3753: LD_ADDR_VAR 0 1
3757: PUSH
3758: LD_INT 1
3760: ST_TO_ADDR
// exit ;
3761: GO 3841
// result := false ;
3763: LD_ADDR_VAR 0 1
3767: PUSH
3768: LD_INT 0
3770: ST_TO_ADDR
// for side in botSides do
3771: LD_ADDR_VAR 0 2
3775: PUSH
3776: LD_EXP 3
3780: PUSH
3781: FOR_IN
3782: IFFALSE 3839
// begin result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
3784: LD_ADDR_VAR 0 1
3788: PUSH
3789: LD_INT 22
3791: PUSH
3792: LD_VAR 0 2
3796: PUSH
3797: EMPTY
3798: LIST
3799: LIST
3800: PUSH
3801: LD_INT 21
3803: PUSH
3804: LD_INT 1
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PUSH
3811: LD_INT 50
3813: PUSH
3814: EMPTY
3815: LIST
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: LIST
3821: PPUSH
3822: CALL_OW 69
3826: ST_TO_ADDR
// if result then
3827: LD_VAR 0 1
3831: IFFALSE 3837
// exit ;
3833: POP
3834: POP
3835: GO 3841
// end ;
3837: GO 3781
3839: POP
3840: POP
// end ;
3841: LD_VAR 0 1
3845: RET
// export function Multiplayer_DisplayStrings ( ) ; var i ; begin
3846: LD_INT 0
3848: PPUSH
3849: PPUSH
// result := [ ] ;
3850: LD_ADDR_VAR 0 1
3854: PUSH
3855: EMPTY
3856: ST_TO_ADDR
// for i := 1 to 8 do
3857: LD_ADDR_VAR 0 2
3861: PUSH
3862: DOUBLE
3863: LD_INT 1
3865: DEC
3866: ST_TO_ADDR
3867: LD_INT 8
3869: PUSH
3870: FOR_TO
3871: IFFALSE 3928
// begin if multi_sides [ i ] then
3873: LD_EXP 5
3877: PUSH
3878: LD_VAR 0 2
3882: ARRAY
3883: IFFALSE 3926
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
3885: LD_ADDR_VAR 0 1
3889: PUSH
3890: LD_VAR 0 1
3894: PUSH
3895: LD_STRING #coop-points
3897: PUSH
3898: LD_VAR 0 2
3902: PUSH
3903: LD_VAR 0 2
3907: PUSH
3908: LD_EXP 28
3912: PUSH
3913: LD_VAR 0 2
3917: ARRAY
3918: PUSH
3919: EMPTY
3920: LIST
3921: LIST
3922: LIST
3923: LIST
3924: ADD
3925: ST_TO_ADDR
// end ; end ;
3926: GO 3870
3928: POP
3929: POP
// end ;
3930: LD_VAR 0 1
3934: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
3935: LD_INT 0
3937: PPUSH
3938: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
3939: LD_ADDR_EXP 28
3943: PUSH
3944: LD_INT 0
3946: PUSH
3947: LD_INT 0
3949: PUSH
3950: LD_INT 0
3952: PUSH
3953: LD_INT 0
3955: PUSH
3956: LD_INT 0
3958: PUSH
3959: LD_INT 0
3961: PUSH
3962: LD_INT 0
3964: PUSH
3965: LD_INT 0
3967: PUSH
3968: EMPTY
3969: LIST
3970: LIST
3971: LIST
3972: LIST
3973: LIST
3974: LIST
3975: LIST
3976: LIST
3977: ST_TO_ADDR
// multi_points_conditions := [ ] ;
3978: LD_ADDR_EXP 29
3982: PUSH
3983: EMPTY
3984: ST_TO_ADDR
// end ;
3985: LD_VAR 0 1
3989: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
3990: LD_INT 0
3992: PPUSH
// if not multi_points or not side or side > 8 then
3993: LD_EXP 28
3997: NOT
3998: PUSH
3999: LD_VAR 0 1
4003: NOT
4004: OR
4005: PUSH
4006: LD_VAR 0 1
4010: PUSH
4011: LD_INT 8
4013: GREATER
4014: OR
4015: IFFALSE 4019
// exit ;
4017: GO 4056
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
4019: LD_ADDR_EXP 28
4023: PUSH
4024: LD_EXP 28
4028: PPUSH
4029: LD_VAR 0 1
4033: PPUSH
4034: LD_EXP 28
4038: PUSH
4039: LD_VAR 0 1
4043: ARRAY
4044: PUSH
4045: LD_VAR 0 2
4049: PLUS
4050: PPUSH
4051: CALL_OW 1
4055: ST_TO_ADDR
// end ;
4056: LD_VAR 0 3
4060: RET
// export function Multiplayer_GetPoints ( side ) ; begin
4061: LD_INT 0
4063: PPUSH
// if not multi_points or not side or side > 8 then
4064: LD_EXP 28
4068: NOT
4069: PUSH
4070: LD_VAR 0 1
4074: NOT
4075: OR
4076: PUSH
4077: LD_VAR 0 1
4081: PUSH
4082: LD_INT 8
4084: GREATER
4085: OR
4086: IFFALSE 4090
// exit ;
4088: GO 4106
// result := multi_points [ side ] ;
4090: LD_ADDR_VAR 0 2
4094: PUSH
4095: LD_EXP 28
4099: PUSH
4100: LD_VAR 0 1
4104: ARRAY
4105: ST_TO_ADDR
// end ;
4106: LD_VAR 0 2
4110: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
4111: LD_INT 0
4113: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
4114: LD_ADDR_EXP 29
4118: PUSH
4119: LD_EXP 29
4123: PPUSH
4124: LD_EXP 29
4128: PUSH
4129: LD_INT 1
4131: PLUS
4132: PPUSH
4133: LD_VAR 0 1
4137: PPUSH
4138: CALL_OW 1
4142: ST_TO_ADDR
// end ;
4143: LD_VAR 0 2
4147: RET
// export function Multiplayer_GetCondition ( id ) ; begin
4148: LD_INT 0
4150: PPUSH
// if not id then
4151: LD_VAR 0 1
4155: NOT
4156: IFFALSE 4160
// exit ;
4158: GO 4176
// result := multi_points_conditions [ id ] ;
4160: LD_ADDR_VAR 0 2
4164: PUSH
4165: LD_EXP 29
4169: PUSH
4170: LD_VAR 0 1
4174: ARRAY
4175: ST_TO_ADDR
// end ;
4176: LD_VAR 0 2
4180: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
4181: LD_INT 0
4183: PPUSH
4184: PPUSH
4185: PPUSH
4186: PPUSH
4187: PPUSH
// players := [ ] ;
4188: LD_ADDR_VAR 0 3
4192: PUSH
4193: EMPTY
4194: ST_TO_ADDR
// for i = 1 to 8 do
4195: LD_ADDR_VAR 0 4
4199: PUSH
4200: DOUBLE
4201: LD_INT 1
4203: DEC
4204: ST_TO_ADDR
4205: LD_INT 8
4207: PUSH
4208: FOR_TO
4209: IFFALSE 4268
// begin if i = side then
4211: LD_VAR 0 4
4215: PUSH
4216: LD_VAR 0 1
4220: EQUAL
4221: IFFALSE 4225
// continue ;
4223: GO 4208
// if multi_sides [ i ] and not multi_loosers [ i ] then
4225: LD_EXP 5
4229: PUSH
4230: LD_VAR 0 4
4234: ARRAY
4235: PUSH
4236: LD_EXP 23
4240: PUSH
4241: LD_VAR 0 4
4245: ARRAY
4246: NOT
4247: AND
4248: IFFALSE 4266
// players := players ^ i ;
4250: LD_ADDR_VAR 0 3
4254: PUSH
4255: LD_VAR 0 3
4259: PUSH
4260: LD_VAR 0 4
4264: ADD
4265: ST_TO_ADDR
// end ;
4266: GO 4208
4268: POP
4269: POP
// if not players then
4270: LD_VAR 0 3
4274: NOT
4275: IFFALSE 4279
// exit ;
4277: GO 4546
// if players = 1 then
4279: LD_VAR 0 3
4283: PUSH
4284: LD_INT 1
4286: EQUAL
4287: IFFALSE 4348
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
4289: LD_ADDR_VAR 0 4
4293: PUSH
4294: LD_INT 22
4296: PUSH
4297: LD_VAR 0 1
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: PUSH
4306: LD_INT 51
4308: PUSH
4309: EMPTY
4310: LIST
4311: PUSH
4312: EMPTY
4313: LIST
4314: LIST
4315: PPUSH
4316: CALL_OW 69
4320: PUSH
4321: FOR_IN
4322: IFFALSE 4344
// SetSide ( i , players [ 1 ] ) ;
4324: LD_VAR 0 4
4328: PPUSH
4329: LD_VAR 0 3
4333: PUSH
4334: LD_INT 1
4336: ARRAY
4337: PPUSH
4338: CALL_OW 235
4342: GO 4321
4344: POP
4345: POP
// end else
4346: GO 4546
// begin j := 1 ;
4348: LD_ADDR_VAR 0 5
4352: PUSH
4353: LD_INT 1
4355: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
4356: LD_ADDR_VAR 0 4
4360: PUSH
4361: LD_INT 22
4363: PUSH
4364: LD_VAR 0 1
4368: PUSH
4369: EMPTY
4370: LIST
4371: LIST
4372: PUSH
4373: LD_INT 2
4375: PUSH
4376: LD_INT 21
4378: PUSH
4379: LD_INT 1
4381: PUSH
4382: EMPTY
4383: LIST
4384: LIST
4385: PUSH
4386: LD_INT 51
4388: PUSH
4389: EMPTY
4390: LIST
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: PUSH
4396: LD_INT 21
4398: PUSH
4399: LD_INT 2
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: PUSH
4406: EMPTY
4407: LIST
4408: LIST
4409: LIST
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PPUSH
4415: CALL_OW 69
4419: PUSH
4420: FOR_IN
4421: IFFALSE 4544
// begin SetSide ( i , players [ j ] ) ;
4423: LD_VAR 0 4
4427: PPUSH
4428: LD_VAR 0 3
4432: PUSH
4433: LD_VAR 0 5
4437: ARRAY
4438: PPUSH
4439: CALL_OW 235
// if IsDrivenBy ( i ) then
4443: LD_VAR 0 4
4447: PPUSH
4448: CALL_OW 311
4452: IFFALSE 4479
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
4454: LD_VAR 0 4
4458: PPUSH
4459: CALL_OW 311
4463: PPUSH
4464: LD_VAR 0 3
4468: PUSH
4469: LD_VAR 0 5
4473: ARRAY
4474: PPUSH
4475: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
4479: LD_VAR 0 4
4483: PPUSH
4484: CALL_OW 310
4488: PPUSH
4489: CALL_OW 247
4493: PUSH
4494: LD_INT 3
4496: EQUAL
4497: IFFALSE 4508
// ComExitBuilding ( i ) ;
4499: LD_VAR 0 4
4503: PPUSH
4504: CALL_OW 122
// j := j + 1 ;
4508: LD_ADDR_VAR 0 5
4512: PUSH
4513: LD_VAR 0 5
4517: PUSH
4518: LD_INT 1
4520: PLUS
4521: ST_TO_ADDR
// if j > players then
4522: LD_VAR 0 5
4526: PUSH
4527: LD_VAR 0 3
4531: GREATER
4532: IFFALSE 4542
// j := 1 ;
4534: LD_ADDR_VAR 0 5
4538: PUSH
4539: LD_INT 1
4541: ST_TO_ADDR
// end ;
4542: GO 4420
4544: POP
4545: POP
// end ; end ;
4546: LD_VAR 0 2
4550: RET
// export function Multiplayer_SpawnArtifact ( ) ; var i , pos ; begin
4551: LD_INT 0
4553: PPUSH
4554: PPUSH
4555: PPUSH
// i := 3 ;
4556: LD_ADDR_VAR 0 2
4560: PUSH
4561: LD_INT 3
4563: ST_TO_ADDR
// pos := [ [ 5 , 10 ] , [ 120 , 2 ] , [ 101 , 8 ] , [ 27 , 4 ] ] ;
4564: LD_ADDR_VAR 0 3
4568: PUSH
4569: LD_INT 5
4571: PUSH
4572: LD_INT 10
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: PUSH
4579: LD_INT 120
4581: PUSH
4582: LD_INT 2
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: PUSH
4589: LD_INT 101
4591: PUSH
4592: LD_INT 8
4594: PUSH
4595: EMPTY
4596: LIST
4597: LIST
4598: PUSH
4599: LD_INT 27
4601: PUSH
4602: LD_INT 4
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: LIST
4613: LIST
4614: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 5 , pos [ i ] [ 1 ] , pos [ i ] [ 2 ] , false ) ;
4615: LD_INT 4
4617: PPUSH
4618: LD_INT 5
4620: PPUSH
4621: LD_VAR 0 3
4625: PUSH
4626: LD_VAR 0 2
4630: ARRAY
4631: PUSH
4632: LD_INT 1
4634: ARRAY
4635: PPUSH
4636: LD_VAR 0 3
4640: PUSH
4641: LD_VAR 0 2
4645: ARRAY
4646: PUSH
4647: LD_INT 2
4649: ARRAY
4650: PPUSH
4651: LD_INT 0
4653: PPUSH
4654: CALL_OW 58
// end ;
4658: LD_VAR 0 1
4662: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
4663: LD_INT 0
4665: PPUSH
// if not side or side > 8 then
4666: LD_VAR 0 1
4670: NOT
4671: PUSH
4672: LD_VAR 0 1
4676: PUSH
4677: LD_INT 8
4679: GREATER
4680: OR
4681: IFFALSE 4685
// exit ;
4683: GO 4702
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
4685: LD_VAR 0 1
4689: PPUSH
4690: LD_INT 6
4692: PPUSH
4693: CALL 4148 0 1
4697: PPUSH
4698: CALL 3990 0 2
// end ;
4702: LD_VAR 0 2
4706: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
4707: LD_INT 0
4709: PPUSH
// if not side or side > 8 then
4710: LD_VAR 0 1
4714: NOT
4715: PUSH
4716: LD_VAR 0 1
4720: PUSH
4721: LD_INT 8
4723: GREATER
4724: OR
4725: IFFALSE 4729
// exit ;
4727: GO 4746
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
4729: LD_VAR 0 1
4733: PPUSH
4734: LD_INT 4
4736: PPUSH
4737: CALL 4148 0 1
4741: PPUSH
4742: CALL 3990 0 2
// end ;
4746: LD_VAR 0 2
4750: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
4751: LD_INT 0
4753: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
4754: LD_VAR 0 1
4758: NOT
4759: PUSH
4760: LD_VAR 0 1
4764: PUSH
4765: LD_INT 8
4767: GREATER
4768: OR
4769: PUSH
4770: LD_VAR 0 2
4774: PUSH
4775: LD_INT 2
4777: PUSH
4778: LD_INT 6
4780: PUSH
4781: LD_INT 36
4783: PUSH
4784: LD_INT 0
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: IN
4793: NOT
4794: OR
4795: IFFALSE 4799
// exit ;
4797: GO 4816
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
4799: LD_VAR 0 1
4803: PPUSH
4804: LD_INT 3
4806: PPUSH
4807: CALL 4148 0 1
4811: PPUSH
4812: CALL 3990 0 2
// end ;
4816: LD_VAR 0 3
4820: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
4821: LD_INT 0
4823: PPUSH
4824: PPUSH
// if not un then
4825: LD_VAR 0 1
4829: NOT
4830: IFFALSE 4834
// exit ;
4832: GO 4880
// if not points then
4834: LD_VAR 0 3
4838: NOT
4839: IFFALSE 4856
// gained_points := Multiplayer_GetCondition ( 1 ) else
4841: LD_ADDR_VAR 0 5
4845: PUSH
4846: LD_INT 1
4848: PPUSH
4849: CALL 4148 0 1
4853: ST_TO_ADDR
4854: GO 4866
// gained_points := points ;
4856: LD_ADDR_VAR 0 5
4860: PUSH
4861: LD_VAR 0 3
4865: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) end ;
4866: LD_VAR 0 2
4870: PPUSH
4871: LD_VAR 0 5
4875: PPUSH
4876: CALL 3990 0 2
4880: LD_VAR 0 4
4884: RET
// export function MultiplayerEvent_ArtifactCaptured ( side ) ; begin
4885: LD_INT 0
4887: PPUSH
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 2 ) ) ;
4888: LD_VAR 0 1
4892: PPUSH
4893: LD_INT 2
4895: PPUSH
4896: CALL 4148 0 1
4900: PPUSH
4901: CALL 3990 0 2
// end ; end_of_file end_of_file end_of_file end_of_file end_of_file
4905: LD_VAR 0 2
4909: RET
// every 0 0$20 trigger game do
4910: LD_EXP 2
4914: IFFALSE 4955
4916: GO 4918
4918: DISABLE
// SpawnCrates ( [ cratesWestArea , cratesEastArea , cratesMiddleArea ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
4919: LD_INT 20
4921: PUSH
4922: LD_INT 22
4924: PUSH
4925: LD_INT 21
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: LIST
4932: PPUSH
4933: LD_EXP 19
4937: PUSH
4938: LD_INT 2
4940: ARRAY
4941: PPUSH
4942: LD_EXP 19
4946: PUSH
4947: LD_INT 1
4949: ARRAY
4950: PPUSH
4951: CALL 4956 0 3
4955: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x , players_areas ; begin
4956: LD_INT 0
4958: PPUSH
4959: PPUSH
4960: PPUSH
4961: PPUSH
// if not areas then
4962: LD_VAR 0 1
4966: NOT
4967: IFFALSE 4971
// exit ;
4969: GO 5348
// players_areas := [ cratesPlayerWestArea , cratesPlayerMiddleArea , cratesPlayerEastArea ] ;
4971: LD_ADDR_VAR 0 7
4975: PUSH
4976: LD_INT 17
4978: PUSH
4979: LD_INT 18
4981: PUSH
4982: LD_INT 19
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: LIST
4989: ST_TO_ADDR
// x := 5 ;
4990: LD_ADDR_VAR 0 6
4994: PUSH
4995: LD_INT 5
4997: ST_TO_ADDR
// repeat wait ( time ) ;
4998: LD_VAR 0 2
5002: PPUSH
5003: CALL_OW 67
// if tick < [ 18 18$00 , 15 15$00 , 12 12$00 ] [ Difficulty ] then
5007: LD_OWVAR 1
5011: PUSH
5012: LD_INT 37800
5014: PUSH
5015: LD_INT 31500
5017: PUSH
5018: LD_INT 25200
5020: PUSH
5021: EMPTY
5022: LIST
5023: LIST
5024: LIST
5025: PUSH
5026: LD_OWVAR 67
5030: ARRAY
5031: LESS
5032: IFFALSE 5171
// begin for i := 1 to multi_sides do
5034: LD_ADDR_VAR 0 5
5038: PUSH
5039: DOUBLE
5040: LD_INT 1
5042: DEC
5043: ST_TO_ADDR
5044: LD_EXP 5
5048: PUSH
5049: FOR_TO
5050: IFFALSE 5162
// if multi_sides [ i ] then
5052: LD_EXP 5
5056: PUSH
5057: LD_VAR 0 5
5061: ARRAY
5062: IFFALSE 5160
// begin if GetResourceArea ( players_areas [ multi_sides [ i ] ] , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
5064: LD_VAR 0 7
5068: PUSH
5069: LD_EXP 5
5073: PUSH
5074: LD_VAR 0 5
5078: ARRAY
5079: ARRAY
5080: PPUSH
5081: LD_INT 1
5083: PPUSH
5084: CALL_OW 287
5088: PUSH
5089: LD_INT 25
5091: PUSH
5092: LD_INT 22
5094: PUSH
5095: LD_INT 20
5097: PUSH
5098: EMPTY
5099: LIST
5100: LIST
5101: LIST
5102: PUSH
5103: LD_OWVAR 67
5107: ARRAY
5108: LESS
5109: IFFALSE 5160
// begin amount := amount - ( x * 10 ) ;
5111: LD_ADDR_VAR 0 3
5115: PUSH
5116: LD_VAR 0 3
5120: PUSH
5121: LD_VAR 0 6
5125: PUSH
5126: LD_INT 10
5128: MUL
5129: MINUS
5130: ST_TO_ADDR
// CreateCratesArea ( x , players_areas [ multi_sides [ i ] ] , true ) ;
5131: LD_VAR 0 6
5135: PPUSH
5136: LD_VAR 0 7
5140: PUSH
5141: LD_EXP 5
5145: PUSH
5146: LD_VAR 0 5
5150: ARRAY
5151: ARRAY
5152: PPUSH
5153: LD_INT 1
5155: PPUSH
5156: CALL_OW 55
// end ; end ;
5160: GO 5049
5162: POP
5163: POP
// wait ( 0 0$2 ) ;
5164: LD_INT 70
5166: PPUSH
5167: CALL_OW 67
// end ; for i in areas do
5171: LD_ADDR_VAR 0 5
5175: PUSH
5176: LD_VAR 0 1
5180: PUSH
5181: FOR_IN
5182: IFFALSE 5265
// begin if GetResourceArea ( i , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
5184: LD_VAR 0 5
5188: PPUSH
5189: LD_INT 1
5191: PPUSH
5192: CALL_OW 287
5196: PUSH
5197: LD_INT 25
5199: PUSH
5200: LD_INT 22
5202: PUSH
5203: LD_INT 20
5205: PUSH
5206: EMPTY
5207: LIST
5208: LIST
5209: LIST
5210: PUSH
5211: LD_OWVAR 67
5215: ARRAY
5216: LESS
5217: IFFALSE 5263
// begin wait ( 0 0$5 ) ;
5219: LD_INT 175
5221: PPUSH
5222: CALL_OW 67
// CreateCratesArea ( x , i , true ) ;
5226: LD_VAR 0 6
5230: PPUSH
5231: LD_VAR 0 5
5235: PPUSH
5236: LD_INT 1
5238: PPUSH
5239: CALL_OW 55
// amount := amount - ( x * 10 ) ;
5243: LD_ADDR_VAR 0 3
5247: PUSH
5248: LD_VAR 0 3
5252: PUSH
5253: LD_VAR 0 6
5257: PUSH
5258: LD_INT 10
5260: MUL
5261: MINUS
5262: ST_TO_ADDR
// end ; end ;
5263: GO 5181
5265: POP
5266: POP
// time := time + 0 0$2 ;
5267: LD_ADDR_VAR 0 2
5271: PUSH
5272: LD_VAR 0 2
5276: PUSH
5277: LD_INT 70
5279: PLUS
5280: ST_TO_ADDR
// x := x - 1 ;
5281: LD_ADDR_VAR 0 6
5285: PUSH
5286: LD_VAR 0 6
5290: PUSH
5291: LD_INT 1
5293: MINUS
5294: ST_TO_ADDR
// if x = 0 then
5295: LD_VAR 0 6
5299: PUSH
5300: LD_INT 0
5302: EQUAL
5303: IFFALSE 5313
// x := 5 ;
5305: LD_ADDR_VAR 0 6
5309: PUSH
5310: LD_INT 5
5312: ST_TO_ADDR
// if time > 2 2$00 then
5313: LD_VAR 0 2
5317: PUSH
5318: LD_INT 4200
5320: GREATER
5321: IFFALSE 5331
// time := 0 0$30 ;
5323: LD_ADDR_VAR 0 2
5327: PUSH
5328: LD_INT 1050
5330: ST_TO_ADDR
// until not game or amount <= 0 ;
5331: LD_EXP 2
5335: NOT
5336: PUSH
5337: LD_VAR 0 3
5341: PUSH
5342: LD_INT 0
5344: LESSEQUAL
5345: OR
5346: IFFALSE 4998
// end ; end_of_file
5348: LD_VAR 0 4
5352: RET
// export globalGameSaveCounter ; every 0 0$1 do
5353: GO 5355
5355: DISABLE
// begin enable ;
5356: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
5357: LD_STRING updateTimer(
5359: PUSH
5360: LD_OWVAR 1
5364: STR
5365: PUSH
5366: LD_STRING );
5368: STR
5369: PPUSH
5370: CALL_OW 559
// end ;
5374: END
// every 0 0$1 do
5375: GO 5377
5377: DISABLE
// begin globalGameSaveCounter := 0 ;
5378: LD_ADDR_EXP 30
5382: PUSH
5383: LD_INT 0
5385: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
5386: LD_STRING setGameSaveCounter(0)
5388: PPUSH
5389: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
5393: LD_STRING initStreamRollete();
5395: PPUSH
5396: CALL_OW 559
// InitStreamMode ;
5400: CALL 6726 0 0
// DefineStreamItems ( false ) ;
5404: LD_INT 0
5406: PPUSH
5407: CALL 7190 0 1
// end ;
5411: END
// export function SOS_MapStart ( ) ; begin
5412: LD_INT 0
5414: PPUSH
// if streamModeActive then
5415: LD_EXP 31
5419: IFFALSE 5428
// DefineStreamItems ( true ) ;
5421: LD_INT 1
5423: PPUSH
5424: CALL 7190 0 1
// UpdateLuaVariables ( ) ;
5428: CALL 5445 0 0
// UpdateFactoryWaypoints ( ) ;
5432: CALL 20059 0 0
// UpdateWarehouseGatheringPoints ( ) ;
5436: CALL 20316 0 0
// end ;
5440: LD_VAR 0 1
5444: RET
// function UpdateLuaVariables ( ) ; begin
5445: LD_INT 0
5447: PPUSH
// if globalGameSaveCounter then
5448: LD_EXP 30
5452: IFFALSE 5486
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
5454: LD_ADDR_EXP 30
5458: PUSH
5459: LD_EXP 30
5463: PPUSH
5464: CALL 65264 0 1
5468: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5469: LD_STRING setGameSaveCounter(
5471: PUSH
5472: LD_EXP 30
5476: STR
5477: PUSH
5478: LD_STRING )
5480: STR
5481: PPUSH
5482: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
5486: LD_STRING setGameDifficulty(
5488: PUSH
5489: LD_OWVAR 67
5493: STR
5494: PUSH
5495: LD_STRING )
5497: STR
5498: PPUSH
5499: CALL_OW 559
// end ;
5503: LD_VAR 0 1
5507: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
5508: LD_INT 0
5510: PPUSH
// if p2 = stream_mode then
5511: LD_VAR 0 2
5515: PUSH
5516: LD_INT 100
5518: EQUAL
5519: IFFALSE 6522
// begin if not StreamModeActive then
5521: LD_EXP 31
5525: NOT
5526: IFFALSE 5536
// StreamModeActive := true ;
5528: LD_ADDR_EXP 31
5532: PUSH
5533: LD_INT 1
5535: ST_TO_ADDR
// if p3 = 0 then
5536: LD_VAR 0 3
5540: PUSH
5541: LD_INT 0
5543: EQUAL
5544: IFFALSE 5550
// InitStreamMode ;
5546: CALL 6726 0 0
// if p3 = 1 then
5550: LD_VAR 0 3
5554: PUSH
5555: LD_INT 1
5557: EQUAL
5558: IFFALSE 5568
// sRocket := true ;
5560: LD_ADDR_EXP 36
5564: PUSH
5565: LD_INT 1
5567: ST_TO_ADDR
// if p3 = 2 then
5568: LD_VAR 0 3
5572: PUSH
5573: LD_INT 2
5575: EQUAL
5576: IFFALSE 5586
// sSpeed := true ;
5578: LD_ADDR_EXP 35
5582: PUSH
5583: LD_INT 1
5585: ST_TO_ADDR
// if p3 = 3 then
5586: LD_VAR 0 3
5590: PUSH
5591: LD_INT 3
5593: EQUAL
5594: IFFALSE 5604
// sEngine := true ;
5596: LD_ADDR_EXP 37
5600: PUSH
5601: LD_INT 1
5603: ST_TO_ADDR
// if p3 = 4 then
5604: LD_VAR 0 3
5608: PUSH
5609: LD_INT 4
5611: EQUAL
5612: IFFALSE 5622
// sSpec := true ;
5614: LD_ADDR_EXP 34
5618: PUSH
5619: LD_INT 1
5621: ST_TO_ADDR
// if p3 = 5 then
5622: LD_VAR 0 3
5626: PUSH
5627: LD_INT 5
5629: EQUAL
5630: IFFALSE 5640
// sLevel := true ;
5632: LD_ADDR_EXP 38
5636: PUSH
5637: LD_INT 1
5639: ST_TO_ADDR
// if p3 = 6 then
5640: LD_VAR 0 3
5644: PUSH
5645: LD_INT 6
5647: EQUAL
5648: IFFALSE 5658
// sArmoury := true ;
5650: LD_ADDR_EXP 39
5654: PUSH
5655: LD_INT 1
5657: ST_TO_ADDR
// if p3 = 7 then
5658: LD_VAR 0 3
5662: PUSH
5663: LD_INT 7
5665: EQUAL
5666: IFFALSE 5676
// sRadar := true ;
5668: LD_ADDR_EXP 40
5672: PUSH
5673: LD_INT 1
5675: ST_TO_ADDR
// if p3 = 8 then
5676: LD_VAR 0 3
5680: PUSH
5681: LD_INT 8
5683: EQUAL
5684: IFFALSE 5694
// sBunker := true ;
5686: LD_ADDR_EXP 41
5690: PUSH
5691: LD_INT 1
5693: ST_TO_ADDR
// if p3 = 9 then
5694: LD_VAR 0 3
5698: PUSH
5699: LD_INT 9
5701: EQUAL
5702: IFFALSE 5712
// sHack := true ;
5704: LD_ADDR_EXP 42
5708: PUSH
5709: LD_INT 1
5711: ST_TO_ADDR
// if p3 = 10 then
5712: LD_VAR 0 3
5716: PUSH
5717: LD_INT 10
5719: EQUAL
5720: IFFALSE 5730
// sFire := true ;
5722: LD_ADDR_EXP 43
5726: PUSH
5727: LD_INT 1
5729: ST_TO_ADDR
// if p3 = 11 then
5730: LD_VAR 0 3
5734: PUSH
5735: LD_INT 11
5737: EQUAL
5738: IFFALSE 5748
// sRefresh := true ;
5740: LD_ADDR_EXP 44
5744: PUSH
5745: LD_INT 1
5747: ST_TO_ADDR
// if p3 = 12 then
5748: LD_VAR 0 3
5752: PUSH
5753: LD_INT 12
5755: EQUAL
5756: IFFALSE 5766
// sExp := true ;
5758: LD_ADDR_EXP 45
5762: PUSH
5763: LD_INT 1
5765: ST_TO_ADDR
// if p3 = 13 then
5766: LD_VAR 0 3
5770: PUSH
5771: LD_INT 13
5773: EQUAL
5774: IFFALSE 5784
// sDepot := true ;
5776: LD_ADDR_EXP 46
5780: PUSH
5781: LD_INT 1
5783: ST_TO_ADDR
// if p3 = 14 then
5784: LD_VAR 0 3
5788: PUSH
5789: LD_INT 14
5791: EQUAL
5792: IFFALSE 5802
// sFlag := true ;
5794: LD_ADDR_EXP 47
5798: PUSH
5799: LD_INT 1
5801: ST_TO_ADDR
// if p3 = 15 then
5802: LD_VAR 0 3
5806: PUSH
5807: LD_INT 15
5809: EQUAL
5810: IFFALSE 5820
// sKamikadze := true ;
5812: LD_ADDR_EXP 55
5816: PUSH
5817: LD_INT 1
5819: ST_TO_ADDR
// if p3 = 16 then
5820: LD_VAR 0 3
5824: PUSH
5825: LD_INT 16
5827: EQUAL
5828: IFFALSE 5838
// sTroll := true ;
5830: LD_ADDR_EXP 56
5834: PUSH
5835: LD_INT 1
5837: ST_TO_ADDR
// if p3 = 17 then
5838: LD_VAR 0 3
5842: PUSH
5843: LD_INT 17
5845: EQUAL
5846: IFFALSE 5856
// sSlow := true ;
5848: LD_ADDR_EXP 57
5852: PUSH
5853: LD_INT 1
5855: ST_TO_ADDR
// if p3 = 18 then
5856: LD_VAR 0 3
5860: PUSH
5861: LD_INT 18
5863: EQUAL
5864: IFFALSE 5874
// sLack := true ;
5866: LD_ADDR_EXP 58
5870: PUSH
5871: LD_INT 1
5873: ST_TO_ADDR
// if p3 = 19 then
5874: LD_VAR 0 3
5878: PUSH
5879: LD_INT 19
5881: EQUAL
5882: IFFALSE 5892
// sTank := true ;
5884: LD_ADDR_EXP 60
5888: PUSH
5889: LD_INT 1
5891: ST_TO_ADDR
// if p3 = 20 then
5892: LD_VAR 0 3
5896: PUSH
5897: LD_INT 20
5899: EQUAL
5900: IFFALSE 5910
// sRemote := true ;
5902: LD_ADDR_EXP 61
5906: PUSH
5907: LD_INT 1
5909: ST_TO_ADDR
// if p3 = 21 then
5910: LD_VAR 0 3
5914: PUSH
5915: LD_INT 21
5917: EQUAL
5918: IFFALSE 5928
// sPowell := true ;
5920: LD_ADDR_EXP 62
5924: PUSH
5925: LD_INT 1
5927: ST_TO_ADDR
// if p3 = 22 then
5928: LD_VAR 0 3
5932: PUSH
5933: LD_INT 22
5935: EQUAL
5936: IFFALSE 5946
// sTeleport := true ;
5938: LD_ADDR_EXP 65
5942: PUSH
5943: LD_INT 1
5945: ST_TO_ADDR
// if p3 = 23 then
5946: LD_VAR 0 3
5950: PUSH
5951: LD_INT 23
5953: EQUAL
5954: IFFALSE 5964
// sOilTower := true ;
5956: LD_ADDR_EXP 67
5960: PUSH
5961: LD_INT 1
5963: ST_TO_ADDR
// if p3 = 24 then
5964: LD_VAR 0 3
5968: PUSH
5969: LD_INT 24
5971: EQUAL
5972: IFFALSE 5982
// sShovel := true ;
5974: LD_ADDR_EXP 68
5978: PUSH
5979: LD_INT 1
5981: ST_TO_ADDR
// if p3 = 25 then
5982: LD_VAR 0 3
5986: PUSH
5987: LD_INT 25
5989: EQUAL
5990: IFFALSE 6000
// sSheik := true ;
5992: LD_ADDR_EXP 69
5996: PUSH
5997: LD_INT 1
5999: ST_TO_ADDR
// if p3 = 26 then
6000: LD_VAR 0 3
6004: PUSH
6005: LD_INT 26
6007: EQUAL
6008: IFFALSE 6018
// sEarthquake := true ;
6010: LD_ADDR_EXP 71
6014: PUSH
6015: LD_INT 1
6017: ST_TO_ADDR
// if p3 = 27 then
6018: LD_VAR 0 3
6022: PUSH
6023: LD_INT 27
6025: EQUAL
6026: IFFALSE 6036
// sAI := true ;
6028: LD_ADDR_EXP 72
6032: PUSH
6033: LD_INT 1
6035: ST_TO_ADDR
// if p3 = 28 then
6036: LD_VAR 0 3
6040: PUSH
6041: LD_INT 28
6043: EQUAL
6044: IFFALSE 6054
// sCargo := true ;
6046: LD_ADDR_EXP 75
6050: PUSH
6051: LD_INT 1
6053: ST_TO_ADDR
// if p3 = 29 then
6054: LD_VAR 0 3
6058: PUSH
6059: LD_INT 29
6061: EQUAL
6062: IFFALSE 6072
// sDLaser := true ;
6064: LD_ADDR_EXP 76
6068: PUSH
6069: LD_INT 1
6071: ST_TO_ADDR
// if p3 = 30 then
6072: LD_VAR 0 3
6076: PUSH
6077: LD_INT 30
6079: EQUAL
6080: IFFALSE 6090
// sExchange := true ;
6082: LD_ADDR_EXP 77
6086: PUSH
6087: LD_INT 1
6089: ST_TO_ADDR
// if p3 = 31 then
6090: LD_VAR 0 3
6094: PUSH
6095: LD_INT 31
6097: EQUAL
6098: IFFALSE 6108
// sFac := true ;
6100: LD_ADDR_EXP 78
6104: PUSH
6105: LD_INT 1
6107: ST_TO_ADDR
// if p3 = 32 then
6108: LD_VAR 0 3
6112: PUSH
6113: LD_INT 32
6115: EQUAL
6116: IFFALSE 6126
// sPower := true ;
6118: LD_ADDR_EXP 79
6122: PUSH
6123: LD_INT 1
6125: ST_TO_ADDR
// if p3 = 33 then
6126: LD_VAR 0 3
6130: PUSH
6131: LD_INT 33
6133: EQUAL
6134: IFFALSE 6144
// sRandom := true ;
6136: LD_ADDR_EXP 80
6140: PUSH
6141: LD_INT 1
6143: ST_TO_ADDR
// if p3 = 34 then
6144: LD_VAR 0 3
6148: PUSH
6149: LD_INT 34
6151: EQUAL
6152: IFFALSE 6162
// sShield := true ;
6154: LD_ADDR_EXP 81
6158: PUSH
6159: LD_INT 1
6161: ST_TO_ADDR
// if p3 = 35 then
6162: LD_VAR 0 3
6166: PUSH
6167: LD_INT 35
6169: EQUAL
6170: IFFALSE 6180
// sTime := true ;
6172: LD_ADDR_EXP 82
6176: PUSH
6177: LD_INT 1
6179: ST_TO_ADDR
// if p3 = 36 then
6180: LD_VAR 0 3
6184: PUSH
6185: LD_INT 36
6187: EQUAL
6188: IFFALSE 6198
// sTools := true ;
6190: LD_ADDR_EXP 83
6194: PUSH
6195: LD_INT 1
6197: ST_TO_ADDR
// if p3 = 101 then
6198: LD_VAR 0 3
6202: PUSH
6203: LD_INT 101
6205: EQUAL
6206: IFFALSE 6216
// sSold := true ;
6208: LD_ADDR_EXP 48
6212: PUSH
6213: LD_INT 1
6215: ST_TO_ADDR
// if p3 = 102 then
6216: LD_VAR 0 3
6220: PUSH
6221: LD_INT 102
6223: EQUAL
6224: IFFALSE 6234
// sDiff := true ;
6226: LD_ADDR_EXP 49
6230: PUSH
6231: LD_INT 1
6233: ST_TO_ADDR
// if p3 = 103 then
6234: LD_VAR 0 3
6238: PUSH
6239: LD_INT 103
6241: EQUAL
6242: IFFALSE 6252
// sFog := true ;
6244: LD_ADDR_EXP 52
6248: PUSH
6249: LD_INT 1
6251: ST_TO_ADDR
// if p3 = 104 then
6252: LD_VAR 0 3
6256: PUSH
6257: LD_INT 104
6259: EQUAL
6260: IFFALSE 6270
// sReset := true ;
6262: LD_ADDR_EXP 53
6266: PUSH
6267: LD_INT 1
6269: ST_TO_ADDR
// if p3 = 105 then
6270: LD_VAR 0 3
6274: PUSH
6275: LD_INT 105
6277: EQUAL
6278: IFFALSE 6288
// sSun := true ;
6280: LD_ADDR_EXP 54
6284: PUSH
6285: LD_INT 1
6287: ST_TO_ADDR
// if p3 = 106 then
6288: LD_VAR 0 3
6292: PUSH
6293: LD_INT 106
6295: EQUAL
6296: IFFALSE 6306
// sTiger := true ;
6298: LD_ADDR_EXP 50
6302: PUSH
6303: LD_INT 1
6305: ST_TO_ADDR
// if p3 = 107 then
6306: LD_VAR 0 3
6310: PUSH
6311: LD_INT 107
6313: EQUAL
6314: IFFALSE 6324
// sBomb := true ;
6316: LD_ADDR_EXP 51
6320: PUSH
6321: LD_INT 1
6323: ST_TO_ADDR
// if p3 = 108 then
6324: LD_VAR 0 3
6328: PUSH
6329: LD_INT 108
6331: EQUAL
6332: IFFALSE 6342
// sWound := true ;
6334: LD_ADDR_EXP 59
6338: PUSH
6339: LD_INT 1
6341: ST_TO_ADDR
// if p3 = 109 then
6342: LD_VAR 0 3
6346: PUSH
6347: LD_INT 109
6349: EQUAL
6350: IFFALSE 6360
// sBetray := true ;
6352: LD_ADDR_EXP 63
6356: PUSH
6357: LD_INT 1
6359: ST_TO_ADDR
// if p3 = 110 then
6360: LD_VAR 0 3
6364: PUSH
6365: LD_INT 110
6367: EQUAL
6368: IFFALSE 6378
// sContamin := true ;
6370: LD_ADDR_EXP 64
6374: PUSH
6375: LD_INT 1
6377: ST_TO_ADDR
// if p3 = 111 then
6378: LD_VAR 0 3
6382: PUSH
6383: LD_INT 111
6385: EQUAL
6386: IFFALSE 6396
// sOil := true ;
6388: LD_ADDR_EXP 66
6392: PUSH
6393: LD_INT 1
6395: ST_TO_ADDR
// if p3 = 112 then
6396: LD_VAR 0 3
6400: PUSH
6401: LD_INT 112
6403: EQUAL
6404: IFFALSE 6414
// sStu := true ;
6406: LD_ADDR_EXP 70
6410: PUSH
6411: LD_INT 1
6413: ST_TO_ADDR
// if p3 = 113 then
6414: LD_VAR 0 3
6418: PUSH
6419: LD_INT 113
6421: EQUAL
6422: IFFALSE 6432
// sBazooka := true ;
6424: LD_ADDR_EXP 73
6428: PUSH
6429: LD_INT 1
6431: ST_TO_ADDR
// if p3 = 114 then
6432: LD_VAR 0 3
6436: PUSH
6437: LD_INT 114
6439: EQUAL
6440: IFFALSE 6450
// sMortar := true ;
6442: LD_ADDR_EXP 74
6446: PUSH
6447: LD_INT 1
6449: ST_TO_ADDR
// if p3 = 115 then
6450: LD_VAR 0 3
6454: PUSH
6455: LD_INT 115
6457: EQUAL
6458: IFFALSE 6468
// sRanger := true ;
6460: LD_ADDR_EXP 84
6464: PUSH
6465: LD_INT 1
6467: ST_TO_ADDR
// if p3 = 116 then
6468: LD_VAR 0 3
6472: PUSH
6473: LD_INT 116
6475: EQUAL
6476: IFFALSE 6486
// sComputer := true ;
6478: LD_ADDR_EXP 85
6482: PUSH
6483: LD_INT 1
6485: ST_TO_ADDR
// if p3 = 117 then
6486: LD_VAR 0 3
6490: PUSH
6491: LD_INT 117
6493: EQUAL
6494: IFFALSE 6504
// s30 := true ;
6496: LD_ADDR_EXP 86
6500: PUSH
6501: LD_INT 1
6503: ST_TO_ADDR
// if p3 = 118 then
6504: LD_VAR 0 3
6508: PUSH
6509: LD_INT 118
6511: EQUAL
6512: IFFALSE 6522
// s60 := true ;
6514: LD_ADDR_EXP 87
6518: PUSH
6519: LD_INT 1
6521: ST_TO_ADDR
// end ; if p2 = hack_mode then
6522: LD_VAR 0 2
6526: PUSH
6527: LD_INT 101
6529: EQUAL
6530: IFFALSE 6658
// begin case p3 of 1 :
6532: LD_VAR 0 3
6536: PUSH
6537: LD_INT 1
6539: DOUBLE
6540: EQUAL
6541: IFTRUE 6545
6543: GO 6552
6545: POP
// hHackUnlimitedResources ; 2 :
6546: CALL 18805 0 0
6550: GO 6658
6552: LD_INT 2
6554: DOUBLE
6555: EQUAL
6556: IFTRUE 6560
6558: GO 6567
6560: POP
// hHackSetLevel10 ; 3 :
6561: CALL 18938 0 0
6565: GO 6658
6567: LD_INT 3
6569: DOUBLE
6570: EQUAL
6571: IFTRUE 6575
6573: GO 6582
6575: POP
// hHackSetLevel10YourUnits ; 4 :
6576: CALL 19023 0 0
6580: GO 6658
6582: LD_INT 4
6584: DOUBLE
6585: EQUAL
6586: IFTRUE 6590
6588: GO 6597
6590: POP
// hHackInvincible ; 5 :
6591: CALL 19471 0 0
6595: GO 6658
6597: LD_INT 5
6599: DOUBLE
6600: EQUAL
6601: IFTRUE 6605
6603: GO 6612
6605: POP
// hHackInvisible ; 6 :
6606: CALL 19582 0 0
6610: GO 6658
6612: LD_INT 6
6614: DOUBLE
6615: EQUAL
6616: IFTRUE 6620
6618: GO 6627
6620: POP
// hHackChangeYourSide ; 7 :
6621: CALL 19639 0 0
6625: GO 6658
6627: LD_INT 7
6629: DOUBLE
6630: EQUAL
6631: IFTRUE 6635
6633: GO 6642
6635: POP
// hHackChangeUnitSide ; 8 :
6636: CALL 19681 0 0
6640: GO 6658
6642: LD_INT 8
6644: DOUBLE
6645: EQUAL
6646: IFTRUE 6650
6648: GO 6657
6650: POP
// hHackFog ; end ;
6651: CALL 19782 0 0
6655: GO 6658
6657: POP
// end ; if p2 = game_save_mode then
6658: LD_VAR 0 2
6662: PUSH
6663: LD_INT 102
6665: EQUAL
6666: IFFALSE 6721
// begin if p3 = 1 then
6668: LD_VAR 0 3
6672: PUSH
6673: LD_INT 1
6675: EQUAL
6676: IFFALSE 6688
// globalGameSaveCounter := p4 ;
6678: LD_ADDR_EXP 30
6682: PUSH
6683: LD_VAR 0 4
6687: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
6688: LD_VAR 0 3
6692: PUSH
6693: LD_INT 2
6695: EQUAL
6696: PUSH
6697: LD_EXP 30
6701: AND
6702: IFFALSE 6721
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
6704: LD_STRING setGameSaveCounter(
6706: PUSH
6707: LD_EXP 30
6711: STR
6712: PUSH
6713: LD_STRING )
6715: STR
6716: PPUSH
6717: CALL_OW 559
// end ; end ;
6721: LD_VAR 0 7
6725: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
6726: LD_INT 0
6728: PPUSH
// streamModeActive := false ;
6729: LD_ADDR_EXP 31
6733: PUSH
6734: LD_INT 0
6736: ST_TO_ADDR
// normalCounter := 36 ;
6737: LD_ADDR_EXP 32
6741: PUSH
6742: LD_INT 36
6744: ST_TO_ADDR
// hardcoreCounter := 18 ;
6745: LD_ADDR_EXP 33
6749: PUSH
6750: LD_INT 18
6752: ST_TO_ADDR
// sRocket := false ;
6753: LD_ADDR_EXP 36
6757: PUSH
6758: LD_INT 0
6760: ST_TO_ADDR
// sSpeed := false ;
6761: LD_ADDR_EXP 35
6765: PUSH
6766: LD_INT 0
6768: ST_TO_ADDR
// sEngine := false ;
6769: LD_ADDR_EXP 37
6773: PUSH
6774: LD_INT 0
6776: ST_TO_ADDR
// sSpec := false ;
6777: LD_ADDR_EXP 34
6781: PUSH
6782: LD_INT 0
6784: ST_TO_ADDR
// sLevel := false ;
6785: LD_ADDR_EXP 38
6789: PUSH
6790: LD_INT 0
6792: ST_TO_ADDR
// sArmoury := false ;
6793: LD_ADDR_EXP 39
6797: PUSH
6798: LD_INT 0
6800: ST_TO_ADDR
// sRadar := false ;
6801: LD_ADDR_EXP 40
6805: PUSH
6806: LD_INT 0
6808: ST_TO_ADDR
// sBunker := false ;
6809: LD_ADDR_EXP 41
6813: PUSH
6814: LD_INT 0
6816: ST_TO_ADDR
// sHack := false ;
6817: LD_ADDR_EXP 42
6821: PUSH
6822: LD_INT 0
6824: ST_TO_ADDR
// sFire := false ;
6825: LD_ADDR_EXP 43
6829: PUSH
6830: LD_INT 0
6832: ST_TO_ADDR
// sRefresh := false ;
6833: LD_ADDR_EXP 44
6837: PUSH
6838: LD_INT 0
6840: ST_TO_ADDR
// sExp := false ;
6841: LD_ADDR_EXP 45
6845: PUSH
6846: LD_INT 0
6848: ST_TO_ADDR
// sDepot := false ;
6849: LD_ADDR_EXP 46
6853: PUSH
6854: LD_INT 0
6856: ST_TO_ADDR
// sFlag := false ;
6857: LD_ADDR_EXP 47
6861: PUSH
6862: LD_INT 0
6864: ST_TO_ADDR
// sKamikadze := false ;
6865: LD_ADDR_EXP 55
6869: PUSH
6870: LD_INT 0
6872: ST_TO_ADDR
// sTroll := false ;
6873: LD_ADDR_EXP 56
6877: PUSH
6878: LD_INT 0
6880: ST_TO_ADDR
// sSlow := false ;
6881: LD_ADDR_EXP 57
6885: PUSH
6886: LD_INT 0
6888: ST_TO_ADDR
// sLack := false ;
6889: LD_ADDR_EXP 58
6893: PUSH
6894: LD_INT 0
6896: ST_TO_ADDR
// sTank := false ;
6897: LD_ADDR_EXP 60
6901: PUSH
6902: LD_INT 0
6904: ST_TO_ADDR
// sRemote := false ;
6905: LD_ADDR_EXP 61
6909: PUSH
6910: LD_INT 0
6912: ST_TO_ADDR
// sPowell := false ;
6913: LD_ADDR_EXP 62
6917: PUSH
6918: LD_INT 0
6920: ST_TO_ADDR
// sTeleport := false ;
6921: LD_ADDR_EXP 65
6925: PUSH
6926: LD_INT 0
6928: ST_TO_ADDR
// sOilTower := false ;
6929: LD_ADDR_EXP 67
6933: PUSH
6934: LD_INT 0
6936: ST_TO_ADDR
// sShovel := false ;
6937: LD_ADDR_EXP 68
6941: PUSH
6942: LD_INT 0
6944: ST_TO_ADDR
// sSheik := false ;
6945: LD_ADDR_EXP 69
6949: PUSH
6950: LD_INT 0
6952: ST_TO_ADDR
// sEarthquake := false ;
6953: LD_ADDR_EXP 71
6957: PUSH
6958: LD_INT 0
6960: ST_TO_ADDR
// sAI := false ;
6961: LD_ADDR_EXP 72
6965: PUSH
6966: LD_INT 0
6968: ST_TO_ADDR
// sCargo := false ;
6969: LD_ADDR_EXP 75
6973: PUSH
6974: LD_INT 0
6976: ST_TO_ADDR
// sDLaser := false ;
6977: LD_ADDR_EXP 76
6981: PUSH
6982: LD_INT 0
6984: ST_TO_ADDR
// sExchange := false ;
6985: LD_ADDR_EXP 77
6989: PUSH
6990: LD_INT 0
6992: ST_TO_ADDR
// sFac := false ;
6993: LD_ADDR_EXP 78
6997: PUSH
6998: LD_INT 0
7000: ST_TO_ADDR
// sPower := false ;
7001: LD_ADDR_EXP 79
7005: PUSH
7006: LD_INT 0
7008: ST_TO_ADDR
// sRandom := false ;
7009: LD_ADDR_EXP 80
7013: PUSH
7014: LD_INT 0
7016: ST_TO_ADDR
// sShield := false ;
7017: LD_ADDR_EXP 81
7021: PUSH
7022: LD_INT 0
7024: ST_TO_ADDR
// sTime := false ;
7025: LD_ADDR_EXP 82
7029: PUSH
7030: LD_INT 0
7032: ST_TO_ADDR
// sTools := false ;
7033: LD_ADDR_EXP 83
7037: PUSH
7038: LD_INT 0
7040: ST_TO_ADDR
// sSold := false ;
7041: LD_ADDR_EXP 48
7045: PUSH
7046: LD_INT 0
7048: ST_TO_ADDR
// sDiff := false ;
7049: LD_ADDR_EXP 49
7053: PUSH
7054: LD_INT 0
7056: ST_TO_ADDR
// sFog := false ;
7057: LD_ADDR_EXP 52
7061: PUSH
7062: LD_INT 0
7064: ST_TO_ADDR
// sReset := false ;
7065: LD_ADDR_EXP 53
7069: PUSH
7070: LD_INT 0
7072: ST_TO_ADDR
// sSun := false ;
7073: LD_ADDR_EXP 54
7077: PUSH
7078: LD_INT 0
7080: ST_TO_ADDR
// sTiger := false ;
7081: LD_ADDR_EXP 50
7085: PUSH
7086: LD_INT 0
7088: ST_TO_ADDR
// sBomb := false ;
7089: LD_ADDR_EXP 51
7093: PUSH
7094: LD_INT 0
7096: ST_TO_ADDR
// sWound := false ;
7097: LD_ADDR_EXP 59
7101: PUSH
7102: LD_INT 0
7104: ST_TO_ADDR
// sBetray := false ;
7105: LD_ADDR_EXP 63
7109: PUSH
7110: LD_INT 0
7112: ST_TO_ADDR
// sContamin := false ;
7113: LD_ADDR_EXP 64
7117: PUSH
7118: LD_INT 0
7120: ST_TO_ADDR
// sOil := false ;
7121: LD_ADDR_EXP 66
7125: PUSH
7126: LD_INT 0
7128: ST_TO_ADDR
// sStu := false ;
7129: LD_ADDR_EXP 70
7133: PUSH
7134: LD_INT 0
7136: ST_TO_ADDR
// sBazooka := false ;
7137: LD_ADDR_EXP 73
7141: PUSH
7142: LD_INT 0
7144: ST_TO_ADDR
// sMortar := false ;
7145: LD_ADDR_EXP 74
7149: PUSH
7150: LD_INT 0
7152: ST_TO_ADDR
// sRanger := false ;
7153: LD_ADDR_EXP 84
7157: PUSH
7158: LD_INT 0
7160: ST_TO_ADDR
// sComputer := false ;
7161: LD_ADDR_EXP 85
7165: PUSH
7166: LD_INT 0
7168: ST_TO_ADDR
// s30 := false ;
7169: LD_ADDR_EXP 86
7173: PUSH
7174: LD_INT 0
7176: ST_TO_ADDR
// s60 := false ;
7177: LD_ADDR_EXP 87
7181: PUSH
7182: LD_INT 0
7184: ST_TO_ADDR
// end ;
7185: LD_VAR 0 1
7189: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
7190: LD_INT 0
7192: PPUSH
7193: PPUSH
7194: PPUSH
7195: PPUSH
7196: PPUSH
7197: PPUSH
7198: PPUSH
// result := [ ] ;
7199: LD_ADDR_VAR 0 2
7203: PUSH
7204: EMPTY
7205: ST_TO_ADDR
// if campaign_id = 1 then
7206: LD_OWVAR 69
7210: PUSH
7211: LD_INT 1
7213: EQUAL
7214: IFFALSE 10380
// begin case mission_number of 1 :
7216: LD_OWVAR 70
7220: PUSH
7221: LD_INT 1
7223: DOUBLE
7224: EQUAL
7225: IFTRUE 7229
7227: GO 7305
7229: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
7230: LD_ADDR_VAR 0 2
7234: PUSH
7235: LD_INT 2
7237: PUSH
7238: LD_INT 4
7240: PUSH
7241: LD_INT 11
7243: PUSH
7244: LD_INT 12
7246: PUSH
7247: LD_INT 15
7249: PUSH
7250: LD_INT 16
7252: PUSH
7253: LD_INT 22
7255: PUSH
7256: LD_INT 23
7258: PUSH
7259: LD_INT 26
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: PUSH
7273: LD_INT 101
7275: PUSH
7276: LD_INT 102
7278: PUSH
7279: LD_INT 106
7281: PUSH
7282: LD_INT 116
7284: PUSH
7285: LD_INT 117
7287: PUSH
7288: LD_INT 118
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: LIST
7295: LIST
7296: LIST
7297: LIST
7298: PUSH
7299: EMPTY
7300: LIST
7301: LIST
7302: ST_TO_ADDR
7303: GO 10378
7305: LD_INT 2
7307: DOUBLE
7308: EQUAL
7309: IFTRUE 7313
7311: GO 7397
7313: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
7314: LD_ADDR_VAR 0 2
7318: PUSH
7319: LD_INT 2
7321: PUSH
7322: LD_INT 4
7324: PUSH
7325: LD_INT 11
7327: PUSH
7328: LD_INT 12
7330: PUSH
7331: LD_INT 15
7333: PUSH
7334: LD_INT 16
7336: PUSH
7337: LD_INT 22
7339: PUSH
7340: LD_INT 23
7342: PUSH
7343: LD_INT 26
7345: PUSH
7346: EMPTY
7347: LIST
7348: LIST
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: LIST
7354: LIST
7355: LIST
7356: PUSH
7357: LD_INT 101
7359: PUSH
7360: LD_INT 102
7362: PUSH
7363: LD_INT 105
7365: PUSH
7366: LD_INT 106
7368: PUSH
7369: LD_INT 108
7371: PUSH
7372: LD_INT 116
7374: PUSH
7375: LD_INT 117
7377: PUSH
7378: LD_INT 118
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: LIST
7389: LIST
7390: PUSH
7391: EMPTY
7392: LIST
7393: LIST
7394: ST_TO_ADDR
7395: GO 10378
7397: LD_INT 3
7399: DOUBLE
7400: EQUAL
7401: IFTRUE 7405
7403: GO 7493
7405: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
7406: LD_ADDR_VAR 0 2
7410: PUSH
7411: LD_INT 2
7413: PUSH
7414: LD_INT 4
7416: PUSH
7417: LD_INT 5
7419: PUSH
7420: LD_INT 11
7422: PUSH
7423: LD_INT 12
7425: PUSH
7426: LD_INT 15
7428: PUSH
7429: LD_INT 16
7431: PUSH
7432: LD_INT 22
7434: PUSH
7435: LD_INT 26
7437: PUSH
7438: LD_INT 36
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: PUSH
7453: LD_INT 101
7455: PUSH
7456: LD_INT 102
7458: PUSH
7459: LD_INT 105
7461: PUSH
7462: LD_INT 106
7464: PUSH
7465: LD_INT 108
7467: PUSH
7468: LD_INT 116
7470: PUSH
7471: LD_INT 117
7473: PUSH
7474: LD_INT 118
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: LIST
7485: LIST
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: ST_TO_ADDR
7491: GO 10378
7493: LD_INT 4
7495: DOUBLE
7496: EQUAL
7497: IFTRUE 7501
7499: GO 7597
7501: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
7502: LD_ADDR_VAR 0 2
7506: PUSH
7507: LD_INT 2
7509: PUSH
7510: LD_INT 4
7512: PUSH
7513: LD_INT 5
7515: PUSH
7516: LD_INT 8
7518: PUSH
7519: LD_INT 11
7521: PUSH
7522: LD_INT 12
7524: PUSH
7525: LD_INT 15
7527: PUSH
7528: LD_INT 16
7530: PUSH
7531: LD_INT 22
7533: PUSH
7534: LD_INT 23
7536: PUSH
7537: LD_INT 26
7539: PUSH
7540: LD_INT 36
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: LIST
7554: LIST
7555: LIST
7556: PUSH
7557: LD_INT 101
7559: PUSH
7560: LD_INT 102
7562: PUSH
7563: LD_INT 105
7565: PUSH
7566: LD_INT 106
7568: PUSH
7569: LD_INT 108
7571: PUSH
7572: LD_INT 116
7574: PUSH
7575: LD_INT 117
7577: PUSH
7578: LD_INT 118
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: PUSH
7591: EMPTY
7592: LIST
7593: LIST
7594: ST_TO_ADDR
7595: GO 10378
7597: LD_INT 5
7599: DOUBLE
7600: EQUAL
7601: IFTRUE 7605
7603: GO 7717
7605: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
7606: LD_ADDR_VAR 0 2
7610: PUSH
7611: LD_INT 2
7613: PUSH
7614: LD_INT 4
7616: PUSH
7617: LD_INT 5
7619: PUSH
7620: LD_INT 6
7622: PUSH
7623: LD_INT 8
7625: PUSH
7626: LD_INT 11
7628: PUSH
7629: LD_INT 12
7631: PUSH
7632: LD_INT 15
7634: PUSH
7635: LD_INT 16
7637: PUSH
7638: LD_INT 22
7640: PUSH
7641: LD_INT 23
7643: PUSH
7644: LD_INT 25
7646: PUSH
7647: LD_INT 26
7649: PUSH
7650: LD_INT 36
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: LIST
7657: LIST
7658: LIST
7659: LIST
7660: LIST
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: PUSH
7669: LD_INT 101
7671: PUSH
7672: LD_INT 102
7674: PUSH
7675: LD_INT 105
7677: PUSH
7678: LD_INT 106
7680: PUSH
7681: LD_INT 108
7683: PUSH
7684: LD_INT 109
7686: PUSH
7687: LD_INT 112
7689: PUSH
7690: LD_INT 116
7692: PUSH
7693: LD_INT 117
7695: PUSH
7696: LD_INT 118
7698: PUSH
7699: EMPTY
7700: LIST
7701: LIST
7702: LIST
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: PUSH
7711: EMPTY
7712: LIST
7713: LIST
7714: ST_TO_ADDR
7715: GO 10378
7717: LD_INT 6
7719: DOUBLE
7720: EQUAL
7721: IFTRUE 7725
7723: GO 7857
7725: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
7726: LD_ADDR_VAR 0 2
7730: PUSH
7731: LD_INT 2
7733: PUSH
7734: LD_INT 4
7736: PUSH
7737: LD_INT 5
7739: PUSH
7740: LD_INT 6
7742: PUSH
7743: LD_INT 8
7745: PUSH
7746: LD_INT 11
7748: PUSH
7749: LD_INT 12
7751: PUSH
7752: LD_INT 15
7754: PUSH
7755: LD_INT 16
7757: PUSH
7758: LD_INT 20
7760: PUSH
7761: LD_INT 21
7763: PUSH
7764: LD_INT 22
7766: PUSH
7767: LD_INT 23
7769: PUSH
7770: LD_INT 25
7772: PUSH
7773: LD_INT 26
7775: PUSH
7776: LD_INT 30
7778: PUSH
7779: LD_INT 31
7781: PUSH
7782: LD_INT 32
7784: PUSH
7785: LD_INT 36
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: PUSH
7809: LD_INT 101
7811: PUSH
7812: LD_INT 102
7814: PUSH
7815: LD_INT 105
7817: PUSH
7818: LD_INT 106
7820: PUSH
7821: LD_INT 108
7823: PUSH
7824: LD_INT 109
7826: PUSH
7827: LD_INT 112
7829: PUSH
7830: LD_INT 116
7832: PUSH
7833: LD_INT 117
7835: PUSH
7836: LD_INT 118
7838: PUSH
7839: EMPTY
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: ST_TO_ADDR
7855: GO 10378
7857: LD_INT 7
7859: DOUBLE
7860: EQUAL
7861: IFTRUE 7865
7863: GO 7977
7865: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7866: LD_ADDR_VAR 0 2
7870: PUSH
7871: LD_INT 2
7873: PUSH
7874: LD_INT 4
7876: PUSH
7877: LD_INT 5
7879: PUSH
7880: LD_INT 7
7882: PUSH
7883: LD_INT 11
7885: PUSH
7886: LD_INT 12
7888: PUSH
7889: LD_INT 15
7891: PUSH
7892: LD_INT 16
7894: PUSH
7895: LD_INT 20
7897: PUSH
7898: LD_INT 21
7900: PUSH
7901: LD_INT 22
7903: PUSH
7904: LD_INT 23
7906: PUSH
7907: LD_INT 25
7909: PUSH
7910: LD_INT 26
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: LIST
7917: LIST
7918: LIST
7919: LIST
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: PUSH
7929: LD_INT 101
7931: PUSH
7932: LD_INT 102
7934: PUSH
7935: LD_INT 103
7937: PUSH
7938: LD_INT 105
7940: PUSH
7941: LD_INT 106
7943: PUSH
7944: LD_INT 108
7946: PUSH
7947: LD_INT 112
7949: PUSH
7950: LD_INT 116
7952: PUSH
7953: LD_INT 117
7955: PUSH
7956: LD_INT 118
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: LIST
7963: LIST
7964: LIST
7965: LIST
7966: LIST
7967: LIST
7968: LIST
7969: LIST
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: ST_TO_ADDR
7975: GO 10378
7977: LD_INT 8
7979: DOUBLE
7980: EQUAL
7981: IFTRUE 7985
7983: GO 8125
7985: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7986: LD_ADDR_VAR 0 2
7990: PUSH
7991: LD_INT 2
7993: PUSH
7994: LD_INT 4
7996: PUSH
7997: LD_INT 5
7999: PUSH
8000: LD_INT 6
8002: PUSH
8003: LD_INT 7
8005: PUSH
8006: LD_INT 8
8008: PUSH
8009: LD_INT 11
8011: PUSH
8012: LD_INT 12
8014: PUSH
8015: LD_INT 15
8017: PUSH
8018: LD_INT 16
8020: PUSH
8021: LD_INT 20
8023: PUSH
8024: LD_INT 21
8026: PUSH
8027: LD_INT 22
8029: PUSH
8030: LD_INT 23
8032: PUSH
8033: LD_INT 25
8035: PUSH
8036: LD_INT 26
8038: PUSH
8039: LD_INT 30
8041: PUSH
8042: LD_INT 31
8044: PUSH
8045: LD_INT 32
8047: PUSH
8048: LD_INT 36
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: PUSH
8073: LD_INT 101
8075: PUSH
8076: LD_INT 102
8078: PUSH
8079: LD_INT 103
8081: PUSH
8082: LD_INT 105
8084: PUSH
8085: LD_INT 106
8087: PUSH
8088: LD_INT 108
8090: PUSH
8091: LD_INT 109
8093: PUSH
8094: LD_INT 112
8096: PUSH
8097: LD_INT 116
8099: PUSH
8100: LD_INT 117
8102: PUSH
8103: LD_INT 118
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: ST_TO_ADDR
8123: GO 10378
8125: LD_INT 9
8127: DOUBLE
8128: EQUAL
8129: IFTRUE 8133
8131: GO 8281
8133: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
8134: LD_ADDR_VAR 0 2
8138: PUSH
8139: LD_INT 2
8141: PUSH
8142: LD_INT 4
8144: PUSH
8145: LD_INT 5
8147: PUSH
8148: LD_INT 6
8150: PUSH
8151: LD_INT 7
8153: PUSH
8154: LD_INT 8
8156: PUSH
8157: LD_INT 11
8159: PUSH
8160: LD_INT 12
8162: PUSH
8163: LD_INT 15
8165: PUSH
8166: LD_INT 16
8168: PUSH
8169: LD_INT 20
8171: PUSH
8172: LD_INT 21
8174: PUSH
8175: LD_INT 22
8177: PUSH
8178: LD_INT 23
8180: PUSH
8181: LD_INT 25
8183: PUSH
8184: LD_INT 26
8186: PUSH
8187: LD_INT 28
8189: PUSH
8190: LD_INT 30
8192: PUSH
8193: LD_INT 31
8195: PUSH
8196: LD_INT 32
8198: PUSH
8199: LD_INT 36
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: PUSH
8225: LD_INT 101
8227: PUSH
8228: LD_INT 102
8230: PUSH
8231: LD_INT 103
8233: PUSH
8234: LD_INT 105
8236: PUSH
8237: LD_INT 106
8239: PUSH
8240: LD_INT 108
8242: PUSH
8243: LD_INT 109
8245: PUSH
8246: LD_INT 112
8248: PUSH
8249: LD_INT 114
8251: PUSH
8252: LD_INT 116
8254: PUSH
8255: LD_INT 117
8257: PUSH
8258: LD_INT 118
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: ST_TO_ADDR
8279: GO 10378
8281: LD_INT 10
8283: DOUBLE
8284: EQUAL
8285: IFTRUE 8289
8287: GO 8485
8289: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
8290: LD_ADDR_VAR 0 2
8294: PUSH
8295: LD_INT 2
8297: PUSH
8298: LD_INT 4
8300: PUSH
8301: LD_INT 5
8303: PUSH
8304: LD_INT 6
8306: PUSH
8307: LD_INT 7
8309: PUSH
8310: LD_INT 8
8312: PUSH
8313: LD_INT 9
8315: PUSH
8316: LD_INT 10
8318: PUSH
8319: LD_INT 11
8321: PUSH
8322: LD_INT 12
8324: PUSH
8325: LD_INT 13
8327: PUSH
8328: LD_INT 14
8330: PUSH
8331: LD_INT 15
8333: PUSH
8334: LD_INT 16
8336: PUSH
8337: LD_INT 17
8339: PUSH
8340: LD_INT 18
8342: PUSH
8343: LD_INT 19
8345: PUSH
8346: LD_INT 20
8348: PUSH
8349: LD_INT 21
8351: PUSH
8352: LD_INT 22
8354: PUSH
8355: LD_INT 23
8357: PUSH
8358: LD_INT 24
8360: PUSH
8361: LD_INT 25
8363: PUSH
8364: LD_INT 26
8366: PUSH
8367: LD_INT 28
8369: PUSH
8370: LD_INT 30
8372: PUSH
8373: LD_INT 31
8375: PUSH
8376: LD_INT 32
8378: PUSH
8379: LD_INT 36
8381: PUSH
8382: EMPTY
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: LIST
8392: LIST
8393: LIST
8394: LIST
8395: LIST
8396: LIST
8397: LIST
8398: LIST
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: LIST
8412: PUSH
8413: LD_INT 101
8415: PUSH
8416: LD_INT 102
8418: PUSH
8419: LD_INT 103
8421: PUSH
8422: LD_INT 104
8424: PUSH
8425: LD_INT 105
8427: PUSH
8428: LD_INT 106
8430: PUSH
8431: LD_INT 107
8433: PUSH
8434: LD_INT 108
8436: PUSH
8437: LD_INT 109
8439: PUSH
8440: LD_INT 110
8442: PUSH
8443: LD_INT 111
8445: PUSH
8446: LD_INT 112
8448: PUSH
8449: LD_INT 114
8451: PUSH
8452: LD_INT 116
8454: PUSH
8455: LD_INT 117
8457: PUSH
8458: LD_INT 118
8460: PUSH
8461: EMPTY
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: PUSH
8479: EMPTY
8480: LIST
8481: LIST
8482: ST_TO_ADDR
8483: GO 10378
8485: LD_INT 11
8487: DOUBLE
8488: EQUAL
8489: IFTRUE 8493
8491: GO 8697
8493: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
8494: LD_ADDR_VAR 0 2
8498: PUSH
8499: LD_INT 2
8501: PUSH
8502: LD_INT 3
8504: PUSH
8505: LD_INT 4
8507: PUSH
8508: LD_INT 5
8510: PUSH
8511: LD_INT 6
8513: PUSH
8514: LD_INT 7
8516: PUSH
8517: LD_INT 8
8519: PUSH
8520: LD_INT 9
8522: PUSH
8523: LD_INT 10
8525: PUSH
8526: LD_INT 11
8528: PUSH
8529: LD_INT 12
8531: PUSH
8532: LD_INT 13
8534: PUSH
8535: LD_INT 14
8537: PUSH
8538: LD_INT 15
8540: PUSH
8541: LD_INT 16
8543: PUSH
8544: LD_INT 17
8546: PUSH
8547: LD_INT 18
8549: PUSH
8550: LD_INT 19
8552: PUSH
8553: LD_INT 20
8555: PUSH
8556: LD_INT 21
8558: PUSH
8559: LD_INT 22
8561: PUSH
8562: LD_INT 23
8564: PUSH
8565: LD_INT 24
8567: PUSH
8568: LD_INT 25
8570: PUSH
8571: LD_INT 26
8573: PUSH
8574: LD_INT 28
8576: PUSH
8577: LD_INT 30
8579: PUSH
8580: LD_INT 31
8582: PUSH
8583: LD_INT 32
8585: PUSH
8586: LD_INT 34
8588: PUSH
8589: LD_INT 36
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: LIST
8596: LIST
8597: LIST
8598: LIST
8599: LIST
8600: LIST
8601: LIST
8602: LIST
8603: LIST
8604: LIST
8605: LIST
8606: LIST
8607: LIST
8608: LIST
8609: LIST
8610: LIST
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: LIST
8618: LIST
8619: LIST
8620: LIST
8621: LIST
8622: LIST
8623: LIST
8624: PUSH
8625: LD_INT 101
8627: PUSH
8628: LD_INT 102
8630: PUSH
8631: LD_INT 103
8633: PUSH
8634: LD_INT 104
8636: PUSH
8637: LD_INT 105
8639: PUSH
8640: LD_INT 106
8642: PUSH
8643: LD_INT 107
8645: PUSH
8646: LD_INT 108
8648: PUSH
8649: LD_INT 109
8651: PUSH
8652: LD_INT 110
8654: PUSH
8655: LD_INT 111
8657: PUSH
8658: LD_INT 112
8660: PUSH
8661: LD_INT 114
8663: PUSH
8664: LD_INT 116
8666: PUSH
8667: LD_INT 117
8669: PUSH
8670: LD_INT 118
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: PUSH
8691: EMPTY
8692: LIST
8693: LIST
8694: ST_TO_ADDR
8695: GO 10378
8697: LD_INT 12
8699: DOUBLE
8700: EQUAL
8701: IFTRUE 8705
8703: GO 8925
8705: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
8706: LD_ADDR_VAR 0 2
8710: PUSH
8711: LD_INT 1
8713: PUSH
8714: LD_INT 2
8716: PUSH
8717: LD_INT 3
8719: PUSH
8720: LD_INT 4
8722: PUSH
8723: LD_INT 5
8725: PUSH
8726: LD_INT 6
8728: PUSH
8729: LD_INT 7
8731: PUSH
8732: LD_INT 8
8734: PUSH
8735: LD_INT 9
8737: PUSH
8738: LD_INT 10
8740: PUSH
8741: LD_INT 11
8743: PUSH
8744: LD_INT 12
8746: PUSH
8747: LD_INT 13
8749: PUSH
8750: LD_INT 14
8752: PUSH
8753: LD_INT 15
8755: PUSH
8756: LD_INT 16
8758: PUSH
8759: LD_INT 17
8761: PUSH
8762: LD_INT 18
8764: PUSH
8765: LD_INT 19
8767: PUSH
8768: LD_INT 20
8770: PUSH
8771: LD_INT 21
8773: PUSH
8774: LD_INT 22
8776: PUSH
8777: LD_INT 23
8779: PUSH
8780: LD_INT 24
8782: PUSH
8783: LD_INT 25
8785: PUSH
8786: LD_INT 26
8788: PUSH
8789: LD_INT 27
8791: PUSH
8792: LD_INT 28
8794: PUSH
8795: LD_INT 30
8797: PUSH
8798: LD_INT 31
8800: PUSH
8801: LD_INT 32
8803: PUSH
8804: LD_INT 33
8806: PUSH
8807: LD_INT 34
8809: PUSH
8810: LD_INT 36
8812: PUSH
8813: EMPTY
8814: LIST
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: PUSH
8849: LD_INT 101
8851: PUSH
8852: LD_INT 102
8854: PUSH
8855: LD_INT 103
8857: PUSH
8858: LD_INT 104
8860: PUSH
8861: LD_INT 105
8863: PUSH
8864: LD_INT 106
8866: PUSH
8867: LD_INT 107
8869: PUSH
8870: LD_INT 108
8872: PUSH
8873: LD_INT 109
8875: PUSH
8876: LD_INT 110
8878: PUSH
8879: LD_INT 111
8881: PUSH
8882: LD_INT 112
8884: PUSH
8885: LD_INT 113
8887: PUSH
8888: LD_INT 114
8890: PUSH
8891: LD_INT 116
8893: PUSH
8894: LD_INT 117
8896: PUSH
8897: LD_INT 118
8899: PUSH
8900: EMPTY
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: ST_TO_ADDR
8923: GO 10378
8925: LD_INT 13
8927: DOUBLE
8928: EQUAL
8929: IFTRUE 8933
8931: GO 9141
8933: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8934: LD_ADDR_VAR 0 2
8938: PUSH
8939: LD_INT 1
8941: PUSH
8942: LD_INT 2
8944: PUSH
8945: LD_INT 3
8947: PUSH
8948: LD_INT 4
8950: PUSH
8951: LD_INT 5
8953: PUSH
8954: LD_INT 8
8956: PUSH
8957: LD_INT 9
8959: PUSH
8960: LD_INT 10
8962: PUSH
8963: LD_INT 11
8965: PUSH
8966: LD_INT 12
8968: PUSH
8969: LD_INT 14
8971: PUSH
8972: LD_INT 15
8974: PUSH
8975: LD_INT 16
8977: PUSH
8978: LD_INT 17
8980: PUSH
8981: LD_INT 18
8983: PUSH
8984: LD_INT 19
8986: PUSH
8987: LD_INT 20
8989: PUSH
8990: LD_INT 21
8992: PUSH
8993: LD_INT 22
8995: PUSH
8996: LD_INT 23
8998: PUSH
8999: LD_INT 24
9001: PUSH
9002: LD_INT 25
9004: PUSH
9005: LD_INT 26
9007: PUSH
9008: LD_INT 27
9010: PUSH
9011: LD_INT 28
9013: PUSH
9014: LD_INT 30
9016: PUSH
9017: LD_INT 31
9019: PUSH
9020: LD_INT 32
9022: PUSH
9023: LD_INT 33
9025: PUSH
9026: LD_INT 34
9028: PUSH
9029: LD_INT 36
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: PUSH
9065: LD_INT 101
9067: PUSH
9068: LD_INT 102
9070: PUSH
9071: LD_INT 103
9073: PUSH
9074: LD_INT 104
9076: PUSH
9077: LD_INT 105
9079: PUSH
9080: LD_INT 106
9082: PUSH
9083: LD_INT 107
9085: PUSH
9086: LD_INT 108
9088: PUSH
9089: LD_INT 109
9091: PUSH
9092: LD_INT 110
9094: PUSH
9095: LD_INT 111
9097: PUSH
9098: LD_INT 112
9100: PUSH
9101: LD_INT 113
9103: PUSH
9104: LD_INT 114
9106: PUSH
9107: LD_INT 116
9109: PUSH
9110: LD_INT 117
9112: PUSH
9113: LD_INT 118
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: PUSH
9135: EMPTY
9136: LIST
9137: LIST
9138: ST_TO_ADDR
9139: GO 10378
9141: LD_INT 14
9143: DOUBLE
9144: EQUAL
9145: IFTRUE 9149
9147: GO 9373
9149: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
9150: LD_ADDR_VAR 0 2
9154: PUSH
9155: LD_INT 1
9157: PUSH
9158: LD_INT 2
9160: PUSH
9161: LD_INT 3
9163: PUSH
9164: LD_INT 4
9166: PUSH
9167: LD_INT 5
9169: PUSH
9170: LD_INT 6
9172: PUSH
9173: LD_INT 7
9175: PUSH
9176: LD_INT 8
9178: PUSH
9179: LD_INT 9
9181: PUSH
9182: LD_INT 10
9184: PUSH
9185: LD_INT 11
9187: PUSH
9188: LD_INT 12
9190: PUSH
9191: LD_INT 13
9193: PUSH
9194: LD_INT 14
9196: PUSH
9197: LD_INT 15
9199: PUSH
9200: LD_INT 16
9202: PUSH
9203: LD_INT 17
9205: PUSH
9206: LD_INT 18
9208: PUSH
9209: LD_INT 19
9211: PUSH
9212: LD_INT 20
9214: PUSH
9215: LD_INT 21
9217: PUSH
9218: LD_INT 22
9220: PUSH
9221: LD_INT 23
9223: PUSH
9224: LD_INT 24
9226: PUSH
9227: LD_INT 25
9229: PUSH
9230: LD_INT 26
9232: PUSH
9233: LD_INT 27
9235: PUSH
9236: LD_INT 28
9238: PUSH
9239: LD_INT 29
9241: PUSH
9242: LD_INT 30
9244: PUSH
9245: LD_INT 31
9247: PUSH
9248: LD_INT 32
9250: PUSH
9251: LD_INT 33
9253: PUSH
9254: LD_INT 34
9256: PUSH
9257: LD_INT 36
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: PUSH
9297: LD_INT 101
9299: PUSH
9300: LD_INT 102
9302: PUSH
9303: LD_INT 103
9305: PUSH
9306: LD_INT 104
9308: PUSH
9309: LD_INT 105
9311: PUSH
9312: LD_INT 106
9314: PUSH
9315: LD_INT 107
9317: PUSH
9318: LD_INT 108
9320: PUSH
9321: LD_INT 109
9323: PUSH
9324: LD_INT 110
9326: PUSH
9327: LD_INT 111
9329: PUSH
9330: LD_INT 112
9332: PUSH
9333: LD_INT 113
9335: PUSH
9336: LD_INT 114
9338: PUSH
9339: LD_INT 116
9341: PUSH
9342: LD_INT 117
9344: PUSH
9345: LD_INT 118
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: ST_TO_ADDR
9371: GO 10378
9373: LD_INT 15
9375: DOUBLE
9376: EQUAL
9377: IFTRUE 9381
9379: GO 9605
9381: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
9382: LD_ADDR_VAR 0 2
9386: PUSH
9387: LD_INT 1
9389: PUSH
9390: LD_INT 2
9392: PUSH
9393: LD_INT 3
9395: PUSH
9396: LD_INT 4
9398: PUSH
9399: LD_INT 5
9401: PUSH
9402: LD_INT 6
9404: PUSH
9405: LD_INT 7
9407: PUSH
9408: LD_INT 8
9410: PUSH
9411: LD_INT 9
9413: PUSH
9414: LD_INT 10
9416: PUSH
9417: LD_INT 11
9419: PUSH
9420: LD_INT 12
9422: PUSH
9423: LD_INT 13
9425: PUSH
9426: LD_INT 14
9428: PUSH
9429: LD_INT 15
9431: PUSH
9432: LD_INT 16
9434: PUSH
9435: LD_INT 17
9437: PUSH
9438: LD_INT 18
9440: PUSH
9441: LD_INT 19
9443: PUSH
9444: LD_INT 20
9446: PUSH
9447: LD_INT 21
9449: PUSH
9450: LD_INT 22
9452: PUSH
9453: LD_INT 23
9455: PUSH
9456: LD_INT 24
9458: PUSH
9459: LD_INT 25
9461: PUSH
9462: LD_INT 26
9464: PUSH
9465: LD_INT 27
9467: PUSH
9468: LD_INT 28
9470: PUSH
9471: LD_INT 29
9473: PUSH
9474: LD_INT 30
9476: PUSH
9477: LD_INT 31
9479: PUSH
9480: LD_INT 32
9482: PUSH
9483: LD_INT 33
9485: PUSH
9486: LD_INT 34
9488: PUSH
9489: LD_INT 36
9491: PUSH
9492: EMPTY
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: PUSH
9529: LD_INT 101
9531: PUSH
9532: LD_INT 102
9534: PUSH
9535: LD_INT 103
9537: PUSH
9538: LD_INT 104
9540: PUSH
9541: LD_INT 105
9543: PUSH
9544: LD_INT 106
9546: PUSH
9547: LD_INT 107
9549: PUSH
9550: LD_INT 108
9552: PUSH
9553: LD_INT 109
9555: PUSH
9556: LD_INT 110
9558: PUSH
9559: LD_INT 111
9561: PUSH
9562: LD_INT 112
9564: PUSH
9565: LD_INT 113
9567: PUSH
9568: LD_INT 114
9570: PUSH
9571: LD_INT 116
9573: PUSH
9574: LD_INT 117
9576: PUSH
9577: LD_INT 118
9579: PUSH
9580: EMPTY
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: PUSH
9599: EMPTY
9600: LIST
9601: LIST
9602: ST_TO_ADDR
9603: GO 10378
9605: LD_INT 16
9607: DOUBLE
9608: EQUAL
9609: IFTRUE 9613
9611: GO 9749
9613: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
9614: LD_ADDR_VAR 0 2
9618: PUSH
9619: LD_INT 2
9621: PUSH
9622: LD_INT 4
9624: PUSH
9625: LD_INT 5
9627: PUSH
9628: LD_INT 7
9630: PUSH
9631: LD_INT 11
9633: PUSH
9634: LD_INT 12
9636: PUSH
9637: LD_INT 15
9639: PUSH
9640: LD_INT 16
9642: PUSH
9643: LD_INT 20
9645: PUSH
9646: LD_INT 21
9648: PUSH
9649: LD_INT 22
9651: PUSH
9652: LD_INT 23
9654: PUSH
9655: LD_INT 25
9657: PUSH
9658: LD_INT 26
9660: PUSH
9661: LD_INT 30
9663: PUSH
9664: LD_INT 31
9666: PUSH
9667: LD_INT 32
9669: PUSH
9670: LD_INT 33
9672: PUSH
9673: LD_INT 34
9675: PUSH
9676: EMPTY
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: PUSH
9697: LD_INT 101
9699: PUSH
9700: LD_INT 102
9702: PUSH
9703: LD_INT 103
9705: PUSH
9706: LD_INT 106
9708: PUSH
9709: LD_INT 108
9711: PUSH
9712: LD_INT 112
9714: PUSH
9715: LD_INT 113
9717: PUSH
9718: LD_INT 114
9720: PUSH
9721: LD_INT 116
9723: PUSH
9724: LD_INT 117
9726: PUSH
9727: LD_INT 118
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: PUSH
9743: EMPTY
9744: LIST
9745: LIST
9746: ST_TO_ADDR
9747: GO 10378
9749: LD_INT 17
9751: DOUBLE
9752: EQUAL
9753: IFTRUE 9757
9755: GO 9981
9757: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9758: LD_ADDR_VAR 0 2
9762: PUSH
9763: LD_INT 1
9765: PUSH
9766: LD_INT 2
9768: PUSH
9769: LD_INT 3
9771: PUSH
9772: LD_INT 4
9774: PUSH
9775: LD_INT 5
9777: PUSH
9778: LD_INT 6
9780: PUSH
9781: LD_INT 7
9783: PUSH
9784: LD_INT 8
9786: PUSH
9787: LD_INT 9
9789: PUSH
9790: LD_INT 10
9792: PUSH
9793: LD_INT 11
9795: PUSH
9796: LD_INT 12
9798: PUSH
9799: LD_INT 13
9801: PUSH
9802: LD_INT 14
9804: PUSH
9805: LD_INT 15
9807: PUSH
9808: LD_INT 16
9810: PUSH
9811: LD_INT 17
9813: PUSH
9814: LD_INT 18
9816: PUSH
9817: LD_INT 19
9819: PUSH
9820: LD_INT 20
9822: PUSH
9823: LD_INT 21
9825: PUSH
9826: LD_INT 22
9828: PUSH
9829: LD_INT 23
9831: PUSH
9832: LD_INT 24
9834: PUSH
9835: LD_INT 25
9837: PUSH
9838: LD_INT 26
9840: PUSH
9841: LD_INT 27
9843: PUSH
9844: LD_INT 28
9846: PUSH
9847: LD_INT 29
9849: PUSH
9850: LD_INT 30
9852: PUSH
9853: LD_INT 31
9855: PUSH
9856: LD_INT 32
9858: PUSH
9859: LD_INT 33
9861: PUSH
9862: LD_INT 34
9864: PUSH
9865: LD_INT 36
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: PUSH
9905: LD_INT 101
9907: PUSH
9908: LD_INT 102
9910: PUSH
9911: LD_INT 103
9913: PUSH
9914: LD_INT 104
9916: PUSH
9917: LD_INT 105
9919: PUSH
9920: LD_INT 106
9922: PUSH
9923: LD_INT 107
9925: PUSH
9926: LD_INT 108
9928: PUSH
9929: LD_INT 109
9931: PUSH
9932: LD_INT 110
9934: PUSH
9935: LD_INT 111
9937: PUSH
9938: LD_INT 112
9940: PUSH
9941: LD_INT 113
9943: PUSH
9944: LD_INT 114
9946: PUSH
9947: LD_INT 116
9949: PUSH
9950: LD_INT 117
9952: PUSH
9953: LD_INT 118
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: PUSH
9975: EMPTY
9976: LIST
9977: LIST
9978: ST_TO_ADDR
9979: GO 10378
9981: LD_INT 18
9983: DOUBLE
9984: EQUAL
9985: IFTRUE 9989
9987: GO 10137
9989: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9990: LD_ADDR_VAR 0 2
9994: PUSH
9995: LD_INT 2
9997: PUSH
9998: LD_INT 4
10000: PUSH
10001: LD_INT 5
10003: PUSH
10004: LD_INT 7
10006: PUSH
10007: LD_INT 11
10009: PUSH
10010: LD_INT 12
10012: PUSH
10013: LD_INT 15
10015: PUSH
10016: LD_INT 16
10018: PUSH
10019: LD_INT 20
10021: PUSH
10022: LD_INT 21
10024: PUSH
10025: LD_INT 22
10027: PUSH
10028: LD_INT 23
10030: PUSH
10031: LD_INT 25
10033: PUSH
10034: LD_INT 26
10036: PUSH
10037: LD_INT 30
10039: PUSH
10040: LD_INT 31
10042: PUSH
10043: LD_INT 32
10045: PUSH
10046: LD_INT 33
10048: PUSH
10049: LD_INT 34
10051: PUSH
10052: LD_INT 35
10054: PUSH
10055: LD_INT 36
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: LIST
10080: PUSH
10081: LD_INT 101
10083: PUSH
10084: LD_INT 102
10086: PUSH
10087: LD_INT 103
10089: PUSH
10090: LD_INT 106
10092: PUSH
10093: LD_INT 108
10095: PUSH
10096: LD_INT 112
10098: PUSH
10099: LD_INT 113
10101: PUSH
10102: LD_INT 114
10104: PUSH
10105: LD_INT 115
10107: PUSH
10108: LD_INT 116
10110: PUSH
10111: LD_INT 117
10113: PUSH
10114: LD_INT 118
10116: PUSH
10117: EMPTY
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: PUSH
10131: EMPTY
10132: LIST
10133: LIST
10134: ST_TO_ADDR
10135: GO 10378
10137: LD_INT 19
10139: DOUBLE
10140: EQUAL
10141: IFTRUE 10145
10143: GO 10377
10145: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
10146: LD_ADDR_VAR 0 2
10150: PUSH
10151: LD_INT 1
10153: PUSH
10154: LD_INT 2
10156: PUSH
10157: LD_INT 3
10159: PUSH
10160: LD_INT 4
10162: PUSH
10163: LD_INT 5
10165: PUSH
10166: LD_INT 6
10168: PUSH
10169: LD_INT 7
10171: PUSH
10172: LD_INT 8
10174: PUSH
10175: LD_INT 9
10177: PUSH
10178: LD_INT 10
10180: PUSH
10181: LD_INT 11
10183: PUSH
10184: LD_INT 12
10186: PUSH
10187: LD_INT 13
10189: PUSH
10190: LD_INT 14
10192: PUSH
10193: LD_INT 15
10195: PUSH
10196: LD_INT 16
10198: PUSH
10199: LD_INT 17
10201: PUSH
10202: LD_INT 18
10204: PUSH
10205: LD_INT 19
10207: PUSH
10208: LD_INT 20
10210: PUSH
10211: LD_INT 21
10213: PUSH
10214: LD_INT 22
10216: PUSH
10217: LD_INT 23
10219: PUSH
10220: LD_INT 24
10222: PUSH
10223: LD_INT 25
10225: PUSH
10226: LD_INT 26
10228: PUSH
10229: LD_INT 27
10231: PUSH
10232: LD_INT 28
10234: PUSH
10235: LD_INT 29
10237: PUSH
10238: LD_INT 30
10240: PUSH
10241: LD_INT 31
10243: PUSH
10244: LD_INT 32
10246: PUSH
10247: LD_INT 33
10249: PUSH
10250: LD_INT 34
10252: PUSH
10253: LD_INT 35
10255: PUSH
10256: LD_INT 36
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: PUSH
10297: LD_INT 101
10299: PUSH
10300: LD_INT 102
10302: PUSH
10303: LD_INT 103
10305: PUSH
10306: LD_INT 104
10308: PUSH
10309: LD_INT 105
10311: PUSH
10312: LD_INT 106
10314: PUSH
10315: LD_INT 107
10317: PUSH
10318: LD_INT 108
10320: PUSH
10321: LD_INT 109
10323: PUSH
10324: LD_INT 110
10326: PUSH
10327: LD_INT 111
10329: PUSH
10330: LD_INT 112
10332: PUSH
10333: LD_INT 113
10335: PUSH
10336: LD_INT 114
10338: PUSH
10339: LD_INT 115
10341: PUSH
10342: LD_INT 116
10344: PUSH
10345: LD_INT 117
10347: PUSH
10348: LD_INT 118
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: ST_TO_ADDR
10375: GO 10378
10377: POP
// end else
10378: GO 10609
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
10380: LD_ADDR_VAR 0 2
10384: PUSH
10385: LD_INT 1
10387: PUSH
10388: LD_INT 2
10390: PUSH
10391: LD_INT 3
10393: PUSH
10394: LD_INT 4
10396: PUSH
10397: LD_INT 5
10399: PUSH
10400: LD_INT 6
10402: PUSH
10403: LD_INT 7
10405: PUSH
10406: LD_INT 8
10408: PUSH
10409: LD_INT 9
10411: PUSH
10412: LD_INT 10
10414: PUSH
10415: LD_INT 11
10417: PUSH
10418: LD_INT 12
10420: PUSH
10421: LD_INT 13
10423: PUSH
10424: LD_INT 14
10426: PUSH
10427: LD_INT 15
10429: PUSH
10430: LD_INT 16
10432: PUSH
10433: LD_INT 17
10435: PUSH
10436: LD_INT 18
10438: PUSH
10439: LD_INT 19
10441: PUSH
10442: LD_INT 20
10444: PUSH
10445: LD_INT 21
10447: PUSH
10448: LD_INT 22
10450: PUSH
10451: LD_INT 23
10453: PUSH
10454: LD_INT 24
10456: PUSH
10457: LD_INT 25
10459: PUSH
10460: LD_INT 26
10462: PUSH
10463: LD_INT 27
10465: PUSH
10466: LD_INT 28
10468: PUSH
10469: LD_INT 29
10471: PUSH
10472: LD_INT 30
10474: PUSH
10475: LD_INT 31
10477: PUSH
10478: LD_INT 32
10480: PUSH
10481: LD_INT 33
10483: PUSH
10484: LD_INT 34
10486: PUSH
10487: LD_INT 35
10489: PUSH
10490: LD_INT 36
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: PUSH
10531: LD_INT 101
10533: PUSH
10534: LD_INT 102
10536: PUSH
10537: LD_INT 103
10539: PUSH
10540: LD_INT 104
10542: PUSH
10543: LD_INT 105
10545: PUSH
10546: LD_INT 106
10548: PUSH
10549: LD_INT 107
10551: PUSH
10552: LD_INT 108
10554: PUSH
10555: LD_INT 109
10557: PUSH
10558: LD_INT 110
10560: PUSH
10561: LD_INT 111
10563: PUSH
10564: LD_INT 112
10566: PUSH
10567: LD_INT 113
10569: PUSH
10570: LD_INT 114
10572: PUSH
10573: LD_INT 115
10575: PUSH
10576: LD_INT 116
10578: PUSH
10579: LD_INT 117
10581: PUSH
10582: LD_INT 118
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: PUSH
10605: EMPTY
10606: LIST
10607: LIST
10608: ST_TO_ADDR
// if result then
10609: LD_VAR 0 2
10613: IFFALSE 11399
// begin normal :=  ;
10615: LD_ADDR_VAR 0 5
10619: PUSH
10620: LD_STRING 
10622: ST_TO_ADDR
// hardcore :=  ;
10623: LD_ADDR_VAR 0 6
10627: PUSH
10628: LD_STRING 
10630: ST_TO_ADDR
// active :=  ;
10631: LD_ADDR_VAR 0 7
10635: PUSH
10636: LD_STRING 
10638: ST_TO_ADDR
// for i = 1 to normalCounter do
10639: LD_ADDR_VAR 0 8
10643: PUSH
10644: DOUBLE
10645: LD_INT 1
10647: DEC
10648: ST_TO_ADDR
10649: LD_EXP 32
10653: PUSH
10654: FOR_TO
10655: IFFALSE 10756
// begin tmp := 0 ;
10657: LD_ADDR_VAR 0 3
10661: PUSH
10662: LD_STRING 0
10664: ST_TO_ADDR
// if result [ 1 ] then
10665: LD_VAR 0 2
10669: PUSH
10670: LD_INT 1
10672: ARRAY
10673: IFFALSE 10738
// if result [ 1 ] [ 1 ] = i then
10675: LD_VAR 0 2
10679: PUSH
10680: LD_INT 1
10682: ARRAY
10683: PUSH
10684: LD_INT 1
10686: ARRAY
10687: PUSH
10688: LD_VAR 0 8
10692: EQUAL
10693: IFFALSE 10738
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
10695: LD_ADDR_VAR 0 2
10699: PUSH
10700: LD_VAR 0 2
10704: PPUSH
10705: LD_INT 1
10707: PPUSH
10708: LD_VAR 0 2
10712: PUSH
10713: LD_INT 1
10715: ARRAY
10716: PPUSH
10717: LD_INT 1
10719: PPUSH
10720: CALL_OW 3
10724: PPUSH
10725: CALL_OW 1
10729: ST_TO_ADDR
// tmp := 1 ;
10730: LD_ADDR_VAR 0 3
10734: PUSH
10735: LD_STRING 1
10737: ST_TO_ADDR
// end ; normal := normal & tmp ;
10738: LD_ADDR_VAR 0 5
10742: PUSH
10743: LD_VAR 0 5
10747: PUSH
10748: LD_VAR 0 3
10752: STR
10753: ST_TO_ADDR
// end ;
10754: GO 10654
10756: POP
10757: POP
// for i = 1 to hardcoreCounter do
10758: LD_ADDR_VAR 0 8
10762: PUSH
10763: DOUBLE
10764: LD_INT 1
10766: DEC
10767: ST_TO_ADDR
10768: LD_EXP 33
10772: PUSH
10773: FOR_TO
10774: IFFALSE 10879
// begin tmp := 0 ;
10776: LD_ADDR_VAR 0 3
10780: PUSH
10781: LD_STRING 0
10783: ST_TO_ADDR
// if result [ 2 ] then
10784: LD_VAR 0 2
10788: PUSH
10789: LD_INT 2
10791: ARRAY
10792: IFFALSE 10861
// if result [ 2 ] [ 1 ] = 100 + i then
10794: LD_VAR 0 2
10798: PUSH
10799: LD_INT 2
10801: ARRAY
10802: PUSH
10803: LD_INT 1
10805: ARRAY
10806: PUSH
10807: LD_INT 100
10809: PUSH
10810: LD_VAR 0 8
10814: PLUS
10815: EQUAL
10816: IFFALSE 10861
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10818: LD_ADDR_VAR 0 2
10822: PUSH
10823: LD_VAR 0 2
10827: PPUSH
10828: LD_INT 2
10830: PPUSH
10831: LD_VAR 0 2
10835: PUSH
10836: LD_INT 2
10838: ARRAY
10839: PPUSH
10840: LD_INT 1
10842: PPUSH
10843: CALL_OW 3
10847: PPUSH
10848: CALL_OW 1
10852: ST_TO_ADDR
// tmp := 1 ;
10853: LD_ADDR_VAR 0 3
10857: PUSH
10858: LD_STRING 1
10860: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10861: LD_ADDR_VAR 0 6
10865: PUSH
10866: LD_VAR 0 6
10870: PUSH
10871: LD_VAR 0 3
10875: STR
10876: ST_TO_ADDR
// end ;
10877: GO 10773
10879: POP
10880: POP
// if isGameLoad then
10881: LD_VAR 0 1
10885: IFFALSE 11360
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10887: LD_ADDR_VAR 0 4
10891: PUSH
10892: LD_EXP 36
10896: PUSH
10897: LD_EXP 35
10901: PUSH
10902: LD_EXP 37
10906: PUSH
10907: LD_EXP 34
10911: PUSH
10912: LD_EXP 38
10916: PUSH
10917: LD_EXP 39
10921: PUSH
10922: LD_EXP 40
10926: PUSH
10927: LD_EXP 41
10931: PUSH
10932: LD_EXP 42
10936: PUSH
10937: LD_EXP 43
10941: PUSH
10942: LD_EXP 44
10946: PUSH
10947: LD_EXP 45
10951: PUSH
10952: LD_EXP 46
10956: PUSH
10957: LD_EXP 47
10961: PUSH
10962: LD_EXP 55
10966: PUSH
10967: LD_EXP 56
10971: PUSH
10972: LD_EXP 57
10976: PUSH
10977: LD_EXP 58
10981: PUSH
10982: LD_EXP 60
10986: PUSH
10987: LD_EXP 61
10991: PUSH
10992: LD_EXP 62
10996: PUSH
10997: LD_EXP 65
11001: PUSH
11002: LD_EXP 67
11006: PUSH
11007: LD_EXP 68
11011: PUSH
11012: LD_EXP 69
11016: PUSH
11017: LD_EXP 71
11021: PUSH
11022: LD_EXP 72
11026: PUSH
11027: LD_EXP 75
11031: PUSH
11032: LD_EXP 76
11036: PUSH
11037: LD_EXP 77
11041: PUSH
11042: LD_EXP 78
11046: PUSH
11047: LD_EXP 79
11051: PUSH
11052: LD_EXP 80
11056: PUSH
11057: LD_EXP 81
11061: PUSH
11062: LD_EXP 82
11066: PUSH
11067: LD_EXP 83
11071: PUSH
11072: LD_EXP 48
11076: PUSH
11077: LD_EXP 49
11081: PUSH
11082: LD_EXP 52
11086: PUSH
11087: LD_EXP 53
11091: PUSH
11092: LD_EXP 54
11096: PUSH
11097: LD_EXP 50
11101: PUSH
11102: LD_EXP 51
11106: PUSH
11107: LD_EXP 59
11111: PUSH
11112: LD_EXP 63
11116: PUSH
11117: LD_EXP 64
11121: PUSH
11122: LD_EXP 66
11126: PUSH
11127: LD_EXP 70
11131: PUSH
11132: LD_EXP 73
11136: PUSH
11137: LD_EXP 74
11141: PUSH
11142: LD_EXP 84
11146: PUSH
11147: LD_EXP 85
11151: PUSH
11152: LD_EXP 86
11156: PUSH
11157: LD_EXP 87
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: ST_TO_ADDR
// tmp :=  ;
11218: LD_ADDR_VAR 0 3
11222: PUSH
11223: LD_STRING 
11225: ST_TO_ADDR
// for i = 1 to normalCounter do
11226: LD_ADDR_VAR 0 8
11230: PUSH
11231: DOUBLE
11232: LD_INT 1
11234: DEC
11235: ST_TO_ADDR
11236: LD_EXP 32
11240: PUSH
11241: FOR_TO
11242: IFFALSE 11278
// begin if flags [ i ] then
11244: LD_VAR 0 4
11248: PUSH
11249: LD_VAR 0 8
11253: ARRAY
11254: IFFALSE 11276
// tmp := tmp & i & ; ;
11256: LD_ADDR_VAR 0 3
11260: PUSH
11261: LD_VAR 0 3
11265: PUSH
11266: LD_VAR 0 8
11270: STR
11271: PUSH
11272: LD_STRING ;
11274: STR
11275: ST_TO_ADDR
// end ;
11276: GO 11241
11278: POP
11279: POP
// for i = 1 to hardcoreCounter do
11280: LD_ADDR_VAR 0 8
11284: PUSH
11285: DOUBLE
11286: LD_INT 1
11288: DEC
11289: ST_TO_ADDR
11290: LD_EXP 33
11294: PUSH
11295: FOR_TO
11296: IFFALSE 11342
// begin if flags [ normalCounter + i ] then
11298: LD_VAR 0 4
11302: PUSH
11303: LD_EXP 32
11307: PUSH
11308: LD_VAR 0 8
11312: PLUS
11313: ARRAY
11314: IFFALSE 11340
// tmp := tmp & ( 100 + i ) & ; ;
11316: LD_ADDR_VAR 0 3
11320: PUSH
11321: LD_VAR 0 3
11325: PUSH
11326: LD_INT 100
11328: PUSH
11329: LD_VAR 0 8
11333: PLUS
11334: STR
11335: PUSH
11336: LD_STRING ;
11338: STR
11339: ST_TO_ADDR
// end ;
11340: GO 11295
11342: POP
11343: POP
// if tmp then
11344: LD_VAR 0 3
11348: IFFALSE 11360
// active := tmp ;
11350: LD_ADDR_VAR 0 7
11354: PUSH
11355: LD_VAR 0 3
11359: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
11360: LD_STRING getStreamItemsFromMission("
11362: PUSH
11363: LD_VAR 0 5
11367: STR
11368: PUSH
11369: LD_STRING ","
11371: STR
11372: PUSH
11373: LD_VAR 0 6
11377: STR
11378: PUSH
11379: LD_STRING ","
11381: STR
11382: PUSH
11383: LD_VAR 0 7
11387: STR
11388: PUSH
11389: LD_STRING ")
11391: STR
11392: PPUSH
11393: CALL_OW 559
// end else
11397: GO 11406
// ToLua ( getStreamItemsFromMission("","","") ) ;
11399: LD_STRING getStreamItemsFromMission("","","")
11401: PPUSH
11402: CALL_OW 559
// end ;
11406: LD_VAR 0 2
11410: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
11411: LD_EXP 31
11415: PUSH
11416: LD_EXP 36
11420: AND
11421: IFFALSE 11545
11423: GO 11425
11425: DISABLE
11426: LD_INT 0
11428: PPUSH
11429: PPUSH
// begin enable ;
11430: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
11431: LD_ADDR_VAR 0 2
11435: PUSH
11436: LD_INT 22
11438: PUSH
11439: LD_OWVAR 2
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PUSH
11448: LD_INT 2
11450: PUSH
11451: LD_INT 34
11453: PUSH
11454: LD_INT 7
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: PUSH
11461: LD_INT 34
11463: PUSH
11464: LD_INT 45
11466: PUSH
11467: EMPTY
11468: LIST
11469: LIST
11470: PUSH
11471: LD_INT 34
11473: PUSH
11474: LD_INT 28
11476: PUSH
11477: EMPTY
11478: LIST
11479: LIST
11480: PUSH
11481: LD_INT 34
11483: PUSH
11484: LD_INT 47
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: PUSH
11491: EMPTY
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: PPUSH
11502: CALL_OW 69
11506: ST_TO_ADDR
// if not tmp then
11507: LD_VAR 0 2
11511: NOT
11512: IFFALSE 11516
// exit ;
11514: GO 11545
// for i in tmp do
11516: LD_ADDR_VAR 0 1
11520: PUSH
11521: LD_VAR 0 2
11525: PUSH
11526: FOR_IN
11527: IFFALSE 11543
// begin SetLives ( i , 0 ) ;
11529: LD_VAR 0 1
11533: PPUSH
11534: LD_INT 0
11536: PPUSH
11537: CALL_OW 234
// end ;
11541: GO 11526
11543: POP
11544: POP
// end ;
11545: PPOPN 2
11547: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
11548: LD_EXP 31
11552: PUSH
11553: LD_EXP 37
11557: AND
11558: IFFALSE 11642
11560: GO 11562
11562: DISABLE
11563: LD_INT 0
11565: PPUSH
11566: PPUSH
// begin enable ;
11567: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
11568: LD_ADDR_VAR 0 2
11572: PUSH
11573: LD_INT 22
11575: PUSH
11576: LD_OWVAR 2
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: PUSH
11585: LD_INT 32
11587: PUSH
11588: LD_INT 3
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: PPUSH
11599: CALL_OW 69
11603: ST_TO_ADDR
// if not tmp then
11604: LD_VAR 0 2
11608: NOT
11609: IFFALSE 11613
// exit ;
11611: GO 11642
// for i in tmp do
11613: LD_ADDR_VAR 0 1
11617: PUSH
11618: LD_VAR 0 2
11622: PUSH
11623: FOR_IN
11624: IFFALSE 11640
// begin SetLives ( i , 0 ) ;
11626: LD_VAR 0 1
11630: PPUSH
11631: LD_INT 0
11633: PPUSH
11634: CALL_OW 234
// end ;
11638: GO 11623
11640: POP
11641: POP
// end ;
11642: PPOPN 2
11644: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
11645: LD_EXP 31
11649: PUSH
11650: LD_EXP 34
11654: AND
11655: IFFALSE 11748
11657: GO 11659
11659: DISABLE
11660: LD_INT 0
11662: PPUSH
// begin enable ;
11663: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
11664: LD_ADDR_VAR 0 1
11668: PUSH
11669: LD_INT 22
11671: PUSH
11672: LD_OWVAR 2
11676: PUSH
11677: EMPTY
11678: LIST
11679: LIST
11680: PUSH
11681: LD_INT 2
11683: PUSH
11684: LD_INT 25
11686: PUSH
11687: LD_INT 5
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: PUSH
11694: LD_INT 25
11696: PUSH
11697: LD_INT 9
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: PUSH
11704: LD_INT 25
11706: PUSH
11707: LD_INT 8
11709: PUSH
11710: EMPTY
11711: LIST
11712: LIST
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: PUSH
11720: EMPTY
11721: LIST
11722: LIST
11723: PPUSH
11724: CALL_OW 69
11728: PUSH
11729: FOR_IN
11730: IFFALSE 11746
// begin SetClass ( i , 1 ) ;
11732: LD_VAR 0 1
11736: PPUSH
11737: LD_INT 1
11739: PPUSH
11740: CALL_OW 336
// end ;
11744: GO 11729
11746: POP
11747: POP
// end ;
11748: PPOPN 1
11750: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11751: LD_EXP 31
11755: PUSH
11756: LD_EXP 35
11760: AND
11761: PUSH
11762: LD_OWVAR 65
11766: PUSH
11767: LD_INT 7
11769: LESS
11770: AND
11771: IFFALSE 11785
11773: GO 11775
11775: DISABLE
// begin enable ;
11776: ENABLE
// game_speed := 7 ;
11777: LD_ADDR_OWVAR 65
11781: PUSH
11782: LD_INT 7
11784: ST_TO_ADDR
// end ;
11785: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11786: LD_EXP 31
11790: PUSH
11791: LD_EXP 38
11795: AND
11796: IFFALSE 11998
11798: GO 11800
11800: DISABLE
11801: LD_INT 0
11803: PPUSH
11804: PPUSH
11805: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11806: LD_ADDR_VAR 0 3
11810: PUSH
11811: LD_INT 81
11813: PUSH
11814: LD_OWVAR 2
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: PUSH
11823: LD_INT 21
11825: PUSH
11826: LD_INT 1
11828: PUSH
11829: EMPTY
11830: LIST
11831: LIST
11832: PUSH
11833: EMPTY
11834: LIST
11835: LIST
11836: PPUSH
11837: CALL_OW 69
11841: ST_TO_ADDR
// if not tmp then
11842: LD_VAR 0 3
11846: NOT
11847: IFFALSE 11851
// exit ;
11849: GO 11998
// if tmp > 5 then
11851: LD_VAR 0 3
11855: PUSH
11856: LD_INT 5
11858: GREATER
11859: IFFALSE 11871
// k := 5 else
11861: LD_ADDR_VAR 0 2
11865: PUSH
11866: LD_INT 5
11868: ST_TO_ADDR
11869: GO 11881
// k := tmp ;
11871: LD_ADDR_VAR 0 2
11875: PUSH
11876: LD_VAR 0 3
11880: ST_TO_ADDR
// for i := 1 to k do
11881: LD_ADDR_VAR 0 1
11885: PUSH
11886: DOUBLE
11887: LD_INT 1
11889: DEC
11890: ST_TO_ADDR
11891: LD_VAR 0 2
11895: PUSH
11896: FOR_TO
11897: IFFALSE 11996
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11899: LD_VAR 0 3
11903: PUSH
11904: LD_VAR 0 1
11908: ARRAY
11909: PPUSH
11910: LD_VAR 0 1
11914: PUSH
11915: LD_INT 4
11917: MOD
11918: PUSH
11919: LD_INT 1
11921: PLUS
11922: PPUSH
11923: CALL_OW 259
11927: PUSH
11928: LD_INT 10
11930: LESS
11931: IFFALSE 11994
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11933: LD_VAR 0 3
11937: PUSH
11938: LD_VAR 0 1
11942: ARRAY
11943: PPUSH
11944: LD_VAR 0 1
11948: PUSH
11949: LD_INT 4
11951: MOD
11952: PUSH
11953: LD_INT 1
11955: PLUS
11956: PPUSH
11957: LD_VAR 0 3
11961: PUSH
11962: LD_VAR 0 1
11966: ARRAY
11967: PPUSH
11968: LD_VAR 0 1
11972: PUSH
11973: LD_INT 4
11975: MOD
11976: PUSH
11977: LD_INT 1
11979: PLUS
11980: PPUSH
11981: CALL_OW 259
11985: PUSH
11986: LD_INT 1
11988: PLUS
11989: PPUSH
11990: CALL_OW 237
11994: GO 11896
11996: POP
11997: POP
// end ;
11998: PPOPN 3
12000: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12001: LD_EXP 31
12005: PUSH
12006: LD_EXP 39
12010: AND
12011: IFFALSE 12031
12013: GO 12015
12015: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12016: LD_INT 4
12018: PPUSH
12019: LD_OWVAR 2
12023: PPUSH
12024: LD_INT 0
12026: PPUSH
12027: CALL_OW 324
12031: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12032: LD_EXP 31
12036: PUSH
12037: LD_EXP 68
12041: AND
12042: IFFALSE 12062
12044: GO 12046
12046: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12047: LD_INT 19
12049: PPUSH
12050: LD_OWVAR 2
12054: PPUSH
12055: LD_INT 0
12057: PPUSH
12058: CALL_OW 324
12062: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
12063: LD_EXP 31
12067: PUSH
12068: LD_EXP 40
12072: AND
12073: IFFALSE 12175
12075: GO 12077
12077: DISABLE
12078: LD_INT 0
12080: PPUSH
12081: PPUSH
// begin enable ;
12082: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
12083: LD_ADDR_VAR 0 2
12087: PUSH
12088: LD_INT 22
12090: PUSH
12091: LD_OWVAR 2
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: PUSH
12100: LD_INT 2
12102: PUSH
12103: LD_INT 34
12105: PUSH
12106: LD_INT 11
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: PUSH
12113: LD_INT 34
12115: PUSH
12116: LD_INT 30
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: LIST
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PPUSH
12132: CALL_OW 69
12136: ST_TO_ADDR
// if not tmp then
12137: LD_VAR 0 2
12141: NOT
12142: IFFALSE 12146
// exit ;
12144: GO 12175
// for i in tmp do
12146: LD_ADDR_VAR 0 1
12150: PUSH
12151: LD_VAR 0 2
12155: PUSH
12156: FOR_IN
12157: IFFALSE 12173
// begin SetLives ( i , 0 ) ;
12159: LD_VAR 0 1
12163: PPUSH
12164: LD_INT 0
12166: PPUSH
12167: CALL_OW 234
// end ;
12171: GO 12156
12173: POP
12174: POP
// end ;
12175: PPOPN 2
12177: END
// every 0 0$1 trigger StreamModeActive and sBunker do
12178: LD_EXP 31
12182: PUSH
12183: LD_EXP 41
12187: AND
12188: IFFALSE 12208
12190: GO 12192
12192: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
12193: LD_INT 32
12195: PPUSH
12196: LD_OWVAR 2
12200: PPUSH
12201: LD_INT 0
12203: PPUSH
12204: CALL_OW 324
12208: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
12209: LD_EXP 31
12213: PUSH
12214: LD_EXP 42
12218: AND
12219: IFFALSE 12400
12221: GO 12223
12223: DISABLE
12224: LD_INT 0
12226: PPUSH
12227: PPUSH
12228: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
12229: LD_ADDR_VAR 0 2
12233: PUSH
12234: LD_INT 22
12236: PUSH
12237: LD_OWVAR 2
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: PUSH
12246: LD_INT 33
12248: PUSH
12249: LD_INT 3
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: PPUSH
12260: CALL_OW 69
12264: ST_TO_ADDR
// if not tmp then
12265: LD_VAR 0 2
12269: NOT
12270: IFFALSE 12274
// exit ;
12272: GO 12400
// side := 0 ;
12274: LD_ADDR_VAR 0 3
12278: PUSH
12279: LD_INT 0
12281: ST_TO_ADDR
// for i := 1 to 8 do
12282: LD_ADDR_VAR 0 1
12286: PUSH
12287: DOUBLE
12288: LD_INT 1
12290: DEC
12291: ST_TO_ADDR
12292: LD_INT 8
12294: PUSH
12295: FOR_TO
12296: IFFALSE 12344
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
12298: LD_OWVAR 2
12302: PUSH
12303: LD_VAR 0 1
12307: NONEQUAL
12308: PUSH
12309: LD_OWVAR 2
12313: PPUSH
12314: LD_VAR 0 1
12318: PPUSH
12319: CALL_OW 81
12323: PUSH
12324: LD_INT 2
12326: EQUAL
12327: AND
12328: IFFALSE 12342
// begin side := i ;
12330: LD_ADDR_VAR 0 3
12334: PUSH
12335: LD_VAR 0 1
12339: ST_TO_ADDR
// break ;
12340: GO 12344
// end ;
12342: GO 12295
12344: POP
12345: POP
// if not side then
12346: LD_VAR 0 3
12350: NOT
12351: IFFALSE 12355
// exit ;
12353: GO 12400
// for i := 1 to tmp do
12355: LD_ADDR_VAR 0 1
12359: PUSH
12360: DOUBLE
12361: LD_INT 1
12363: DEC
12364: ST_TO_ADDR
12365: LD_VAR 0 2
12369: PUSH
12370: FOR_TO
12371: IFFALSE 12398
// if Prob ( 60 ) then
12373: LD_INT 60
12375: PPUSH
12376: CALL_OW 13
12380: IFFALSE 12396
// SetSide ( i , side ) ;
12382: LD_VAR 0 1
12386: PPUSH
12387: LD_VAR 0 3
12391: PPUSH
12392: CALL_OW 235
12396: GO 12370
12398: POP
12399: POP
// end ;
12400: PPOPN 3
12402: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
12403: LD_EXP 31
12407: PUSH
12408: LD_EXP 44
12412: AND
12413: IFFALSE 12532
12415: GO 12417
12417: DISABLE
12418: LD_INT 0
12420: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
12421: LD_ADDR_VAR 0 1
12425: PUSH
12426: LD_INT 22
12428: PUSH
12429: LD_OWVAR 2
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: PUSH
12438: LD_INT 21
12440: PUSH
12441: LD_INT 1
12443: PUSH
12444: EMPTY
12445: LIST
12446: LIST
12447: PUSH
12448: LD_INT 3
12450: PUSH
12451: LD_INT 23
12453: PUSH
12454: LD_INT 0
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: PUSH
12465: EMPTY
12466: LIST
12467: LIST
12468: LIST
12469: PPUSH
12470: CALL_OW 69
12474: PUSH
12475: FOR_IN
12476: IFFALSE 12530
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
12478: LD_VAR 0 1
12482: PPUSH
12483: CALL_OW 257
12487: PUSH
12488: LD_INT 1
12490: PUSH
12491: LD_INT 2
12493: PUSH
12494: LD_INT 3
12496: PUSH
12497: LD_INT 4
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: IN
12506: IFFALSE 12528
// SetClass ( un , rand ( 1 , 4 ) ) ;
12508: LD_VAR 0 1
12512: PPUSH
12513: LD_INT 1
12515: PPUSH
12516: LD_INT 4
12518: PPUSH
12519: CALL_OW 12
12523: PPUSH
12524: CALL_OW 336
12528: GO 12475
12530: POP
12531: POP
// end ;
12532: PPOPN 1
12534: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
12535: LD_EXP 31
12539: PUSH
12540: LD_EXP 43
12544: AND
12545: IFFALSE 12624
12547: GO 12549
12549: DISABLE
12550: LD_INT 0
12552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12553: LD_ADDR_VAR 0 1
12557: PUSH
12558: LD_INT 22
12560: PUSH
12561: LD_OWVAR 2
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: PUSH
12570: LD_INT 21
12572: PUSH
12573: LD_INT 3
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: PPUSH
12584: CALL_OW 69
12588: ST_TO_ADDR
// if not tmp then
12589: LD_VAR 0 1
12593: NOT
12594: IFFALSE 12598
// exit ;
12596: GO 12624
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
12598: LD_VAR 0 1
12602: PUSH
12603: LD_INT 1
12605: PPUSH
12606: LD_VAR 0 1
12610: PPUSH
12611: CALL_OW 12
12615: ARRAY
12616: PPUSH
12617: LD_INT 100
12619: PPUSH
12620: CALL_OW 234
// end ;
12624: PPOPN 1
12626: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
12627: LD_EXP 31
12631: PUSH
12632: LD_EXP 45
12636: AND
12637: IFFALSE 12735
12639: GO 12641
12641: DISABLE
12642: LD_INT 0
12644: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12645: LD_ADDR_VAR 0 1
12649: PUSH
12650: LD_INT 22
12652: PUSH
12653: LD_OWVAR 2
12657: PUSH
12658: EMPTY
12659: LIST
12660: LIST
12661: PUSH
12662: LD_INT 21
12664: PUSH
12665: LD_INT 1
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: PPUSH
12676: CALL_OW 69
12680: ST_TO_ADDR
// if not tmp then
12681: LD_VAR 0 1
12685: NOT
12686: IFFALSE 12690
// exit ;
12688: GO 12735
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
12690: LD_VAR 0 1
12694: PUSH
12695: LD_INT 1
12697: PPUSH
12698: LD_VAR 0 1
12702: PPUSH
12703: CALL_OW 12
12707: ARRAY
12708: PPUSH
12709: LD_INT 1
12711: PPUSH
12712: LD_INT 4
12714: PPUSH
12715: CALL_OW 12
12719: PPUSH
12720: LD_INT 3000
12722: PPUSH
12723: LD_INT 9000
12725: PPUSH
12726: CALL_OW 12
12730: PPUSH
12731: CALL_OW 492
// end ;
12735: PPOPN 1
12737: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12738: LD_EXP 31
12742: PUSH
12743: LD_EXP 46
12747: AND
12748: IFFALSE 12768
12750: GO 12752
12752: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12753: LD_INT 1
12755: PPUSH
12756: LD_OWVAR 2
12760: PPUSH
12761: LD_INT 0
12763: PPUSH
12764: CALL_OW 324
12768: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12769: LD_EXP 31
12773: PUSH
12774: LD_EXP 47
12778: AND
12779: IFFALSE 12862
12781: GO 12783
12783: DISABLE
12784: LD_INT 0
12786: PPUSH
12787: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12788: LD_ADDR_VAR 0 2
12792: PUSH
12793: LD_INT 22
12795: PUSH
12796: LD_OWVAR 2
12800: PUSH
12801: EMPTY
12802: LIST
12803: LIST
12804: PUSH
12805: LD_INT 21
12807: PUSH
12808: LD_INT 3
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: PUSH
12815: EMPTY
12816: LIST
12817: LIST
12818: PPUSH
12819: CALL_OW 69
12823: ST_TO_ADDR
// if not tmp then
12824: LD_VAR 0 2
12828: NOT
12829: IFFALSE 12833
// exit ;
12831: GO 12862
// for i in tmp do
12833: LD_ADDR_VAR 0 1
12837: PUSH
12838: LD_VAR 0 2
12842: PUSH
12843: FOR_IN
12844: IFFALSE 12860
// SetBLevel ( i , 10 ) ;
12846: LD_VAR 0 1
12850: PPUSH
12851: LD_INT 10
12853: PPUSH
12854: CALL_OW 241
12858: GO 12843
12860: POP
12861: POP
// end ;
12862: PPOPN 2
12864: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12865: LD_EXP 31
12869: PUSH
12870: LD_EXP 48
12874: AND
12875: IFFALSE 12986
12877: GO 12879
12879: DISABLE
12880: LD_INT 0
12882: PPUSH
12883: PPUSH
12884: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12885: LD_ADDR_VAR 0 3
12889: PUSH
12890: LD_INT 22
12892: PUSH
12893: LD_OWVAR 2
12897: PUSH
12898: EMPTY
12899: LIST
12900: LIST
12901: PUSH
12902: LD_INT 25
12904: PUSH
12905: LD_INT 1
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: PUSH
12912: EMPTY
12913: LIST
12914: LIST
12915: PPUSH
12916: CALL_OW 69
12920: ST_TO_ADDR
// if not tmp then
12921: LD_VAR 0 3
12925: NOT
12926: IFFALSE 12930
// exit ;
12928: GO 12986
// un := tmp [ rand ( 1 , tmp ) ] ;
12930: LD_ADDR_VAR 0 2
12934: PUSH
12935: LD_VAR 0 3
12939: PUSH
12940: LD_INT 1
12942: PPUSH
12943: LD_VAR 0 3
12947: PPUSH
12948: CALL_OW 12
12952: ARRAY
12953: ST_TO_ADDR
// if Crawls ( un ) then
12954: LD_VAR 0 2
12958: PPUSH
12959: CALL_OW 318
12963: IFFALSE 12974
// ComWalk ( un ) ;
12965: LD_VAR 0 2
12969: PPUSH
12970: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12974: LD_VAR 0 2
12978: PPUSH
12979: LD_INT 5
12981: PPUSH
12982: CALL_OW 336
// end ;
12986: PPOPN 3
12988: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12989: LD_EXP 31
12993: PUSH
12994: LD_EXP 49
12998: AND
12999: PUSH
13000: LD_OWVAR 67
13004: PUSH
13005: LD_INT 4
13007: LESS
13008: AND
13009: IFFALSE 13028
13011: GO 13013
13013: DISABLE
// begin Difficulty := Difficulty + 1 ;
13014: LD_ADDR_OWVAR 67
13018: PUSH
13019: LD_OWVAR 67
13023: PUSH
13024: LD_INT 1
13026: PLUS
13027: ST_TO_ADDR
// end ;
13028: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13029: LD_EXP 31
13033: PUSH
13034: LD_EXP 50
13038: AND
13039: IFFALSE 13142
13041: GO 13043
13043: DISABLE
13044: LD_INT 0
13046: PPUSH
// begin for i := 1 to 5 do
13047: LD_ADDR_VAR 0 1
13051: PUSH
13052: DOUBLE
13053: LD_INT 1
13055: DEC
13056: ST_TO_ADDR
13057: LD_INT 5
13059: PUSH
13060: FOR_TO
13061: IFFALSE 13140
// begin uc_nation := nation_nature ;
13063: LD_ADDR_OWVAR 21
13067: PUSH
13068: LD_INT 0
13070: ST_TO_ADDR
// uc_side := 0 ;
13071: LD_ADDR_OWVAR 20
13075: PUSH
13076: LD_INT 0
13078: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13079: LD_ADDR_OWVAR 29
13083: PUSH
13084: LD_INT 12
13086: PUSH
13087: LD_INT 12
13089: PUSH
13090: EMPTY
13091: LIST
13092: LIST
13093: ST_TO_ADDR
// hc_agressivity := 20 ;
13094: LD_ADDR_OWVAR 35
13098: PUSH
13099: LD_INT 20
13101: ST_TO_ADDR
// hc_class := class_tiger ;
13102: LD_ADDR_OWVAR 28
13106: PUSH
13107: LD_INT 14
13109: ST_TO_ADDR
// hc_gallery :=  ;
13110: LD_ADDR_OWVAR 33
13114: PUSH
13115: LD_STRING 
13117: ST_TO_ADDR
// hc_name :=  ;
13118: LD_ADDR_OWVAR 26
13122: PUSH
13123: LD_STRING 
13125: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
13126: CALL_OW 44
13130: PPUSH
13131: LD_INT 0
13133: PPUSH
13134: CALL_OW 51
// end ;
13138: GO 13060
13140: POP
13141: POP
// end ;
13142: PPOPN 1
13144: END
// every 0 0$1 trigger StreamModeActive and sBomb do
13145: LD_EXP 31
13149: PUSH
13150: LD_EXP 51
13154: AND
13155: IFFALSE 13164
13157: GO 13159
13159: DISABLE
// StreamSibBomb ;
13160: CALL 13165 0 0
13164: END
// export function StreamSibBomb ; var i , x , y ; begin
13165: LD_INT 0
13167: PPUSH
13168: PPUSH
13169: PPUSH
13170: PPUSH
// result := false ;
13171: LD_ADDR_VAR 0 1
13175: PUSH
13176: LD_INT 0
13178: ST_TO_ADDR
// for i := 1 to 16 do
13179: LD_ADDR_VAR 0 2
13183: PUSH
13184: DOUBLE
13185: LD_INT 1
13187: DEC
13188: ST_TO_ADDR
13189: LD_INT 16
13191: PUSH
13192: FOR_TO
13193: IFFALSE 13392
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13195: LD_ADDR_VAR 0 3
13199: PUSH
13200: LD_INT 10
13202: PUSH
13203: LD_INT 20
13205: PUSH
13206: LD_INT 30
13208: PUSH
13209: LD_INT 40
13211: PUSH
13212: LD_INT 50
13214: PUSH
13215: LD_INT 60
13217: PUSH
13218: LD_INT 70
13220: PUSH
13221: LD_INT 80
13223: PUSH
13224: LD_INT 90
13226: PUSH
13227: LD_INT 100
13229: PUSH
13230: LD_INT 110
13232: PUSH
13233: LD_INT 120
13235: PUSH
13236: LD_INT 130
13238: PUSH
13239: LD_INT 140
13241: PUSH
13242: LD_INT 150
13244: PUSH
13245: EMPTY
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: PUSH
13262: LD_INT 1
13264: PPUSH
13265: LD_INT 15
13267: PPUSH
13268: CALL_OW 12
13272: ARRAY
13273: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
13274: LD_ADDR_VAR 0 4
13278: PUSH
13279: LD_INT 10
13281: PUSH
13282: LD_INT 20
13284: PUSH
13285: LD_INT 30
13287: PUSH
13288: LD_INT 40
13290: PUSH
13291: LD_INT 50
13293: PUSH
13294: LD_INT 60
13296: PUSH
13297: LD_INT 70
13299: PUSH
13300: LD_INT 80
13302: PUSH
13303: LD_INT 90
13305: PUSH
13306: LD_INT 100
13308: PUSH
13309: LD_INT 110
13311: PUSH
13312: LD_INT 120
13314: PUSH
13315: LD_INT 130
13317: PUSH
13318: LD_INT 140
13320: PUSH
13321: LD_INT 150
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: PUSH
13341: LD_INT 1
13343: PPUSH
13344: LD_INT 15
13346: PPUSH
13347: CALL_OW 12
13351: ARRAY
13352: ST_TO_ADDR
// if ValidHex ( x , y ) then
13353: LD_VAR 0 3
13357: PPUSH
13358: LD_VAR 0 4
13362: PPUSH
13363: CALL_OW 488
13367: IFFALSE 13390
// begin result := [ x , y ] ;
13369: LD_ADDR_VAR 0 1
13373: PUSH
13374: LD_VAR 0 3
13378: PUSH
13379: LD_VAR 0 4
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: ST_TO_ADDR
// break ;
13388: GO 13392
// end ; end ;
13390: GO 13192
13392: POP
13393: POP
// if result then
13394: LD_VAR 0 1
13398: IFFALSE 13458
// begin ToLua ( playSibBomb() ) ;
13400: LD_STRING playSibBomb()
13402: PPUSH
13403: CALL_OW 559
// wait ( 0 0$14 ) ;
13407: LD_INT 490
13409: PPUSH
13410: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
13414: LD_VAR 0 1
13418: PUSH
13419: LD_INT 1
13421: ARRAY
13422: PPUSH
13423: LD_VAR 0 1
13427: PUSH
13428: LD_INT 2
13430: ARRAY
13431: PPUSH
13432: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
13436: LD_VAR 0 1
13440: PUSH
13441: LD_INT 1
13443: ARRAY
13444: PPUSH
13445: LD_VAR 0 1
13449: PUSH
13450: LD_INT 2
13452: ARRAY
13453: PPUSH
13454: CALL_OW 429
// end ; end ;
13458: LD_VAR 0 1
13462: RET
// every 0 0$1 trigger StreamModeActive and sReset do
13463: LD_EXP 31
13467: PUSH
13468: LD_EXP 53
13472: AND
13473: IFFALSE 13485
13475: GO 13477
13477: DISABLE
// YouLost (  ) ;
13478: LD_STRING 
13480: PPUSH
13481: CALL_OW 104
13485: END
// every 0 0$1 trigger StreamModeActive and sFog do
13486: LD_EXP 31
13490: PUSH
13491: LD_EXP 52
13495: AND
13496: IFFALSE 13510
13498: GO 13500
13500: DISABLE
// FogOff ( your_side ) ;
13501: LD_OWVAR 2
13505: PPUSH
13506: CALL_OW 344
13510: END
// every 0 0$1 trigger StreamModeActive and sSun do
13511: LD_EXP 31
13515: PUSH
13516: LD_EXP 54
13520: AND
13521: IFFALSE 13549
13523: GO 13525
13525: DISABLE
// begin solar_recharge_percent := 0 ;
13526: LD_ADDR_OWVAR 79
13530: PUSH
13531: LD_INT 0
13533: ST_TO_ADDR
// wait ( 5 5$00 ) ;
13534: LD_INT 10500
13536: PPUSH
13537: CALL_OW 67
// solar_recharge_percent := 100 ;
13541: LD_ADDR_OWVAR 79
13545: PUSH
13546: LD_INT 100
13548: ST_TO_ADDR
// end ;
13549: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
13550: LD_EXP 31
13554: PUSH
13555: LD_EXP 55
13559: AND
13560: IFFALSE 13799
13562: GO 13564
13564: DISABLE
13565: LD_INT 0
13567: PPUSH
13568: PPUSH
13569: PPUSH
// begin tmp := [ ] ;
13570: LD_ADDR_VAR 0 3
13574: PUSH
13575: EMPTY
13576: ST_TO_ADDR
// for i := 1 to 6 do
13577: LD_ADDR_VAR 0 1
13581: PUSH
13582: DOUBLE
13583: LD_INT 1
13585: DEC
13586: ST_TO_ADDR
13587: LD_INT 6
13589: PUSH
13590: FOR_TO
13591: IFFALSE 13696
// begin uc_nation := nation_nature ;
13593: LD_ADDR_OWVAR 21
13597: PUSH
13598: LD_INT 0
13600: ST_TO_ADDR
// uc_side := 0 ;
13601: LD_ADDR_OWVAR 20
13605: PUSH
13606: LD_INT 0
13608: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
13609: LD_ADDR_OWVAR 29
13613: PUSH
13614: LD_INT 12
13616: PUSH
13617: LD_INT 12
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: ST_TO_ADDR
// hc_agressivity := 20 ;
13624: LD_ADDR_OWVAR 35
13628: PUSH
13629: LD_INT 20
13631: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
13632: LD_ADDR_OWVAR 28
13636: PUSH
13637: LD_INT 17
13639: ST_TO_ADDR
// hc_gallery :=  ;
13640: LD_ADDR_OWVAR 33
13644: PUSH
13645: LD_STRING 
13647: ST_TO_ADDR
// hc_name :=  ;
13648: LD_ADDR_OWVAR 26
13652: PUSH
13653: LD_STRING 
13655: ST_TO_ADDR
// un := CreateHuman ;
13656: LD_ADDR_VAR 0 2
13660: PUSH
13661: CALL_OW 44
13665: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
13666: LD_VAR 0 2
13670: PPUSH
13671: LD_INT 1
13673: PPUSH
13674: CALL_OW 51
// tmp := tmp ^ un ;
13678: LD_ADDR_VAR 0 3
13682: PUSH
13683: LD_VAR 0 3
13687: PUSH
13688: LD_VAR 0 2
13692: ADD
13693: ST_TO_ADDR
// end ;
13694: GO 13590
13696: POP
13697: POP
// repeat wait ( 0 0$1 ) ;
13698: LD_INT 35
13700: PPUSH
13701: CALL_OW 67
// for un in tmp do
13705: LD_ADDR_VAR 0 2
13709: PUSH
13710: LD_VAR 0 3
13714: PUSH
13715: FOR_IN
13716: IFFALSE 13790
// begin if IsDead ( un ) then
13718: LD_VAR 0 2
13722: PPUSH
13723: CALL_OW 301
13727: IFFALSE 13747
// begin tmp := tmp diff un ;
13729: LD_ADDR_VAR 0 3
13733: PUSH
13734: LD_VAR 0 3
13738: PUSH
13739: LD_VAR 0 2
13743: DIFF
13744: ST_TO_ADDR
// continue ;
13745: GO 13715
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13747: LD_VAR 0 2
13751: PPUSH
13752: LD_INT 3
13754: PUSH
13755: LD_INT 22
13757: PUSH
13758: LD_INT 0
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: PUSH
13765: EMPTY
13766: LIST
13767: LIST
13768: PPUSH
13769: CALL_OW 69
13773: PPUSH
13774: LD_VAR 0 2
13778: PPUSH
13779: CALL_OW 74
13783: PPUSH
13784: CALL_OW 115
// end ;
13788: GO 13715
13790: POP
13791: POP
// until not tmp ;
13792: LD_VAR 0 3
13796: NOT
13797: IFFALSE 13698
// end ;
13799: PPOPN 3
13801: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13802: LD_EXP 31
13806: PUSH
13807: LD_EXP 56
13811: AND
13812: IFFALSE 13866
13814: GO 13816
13816: DISABLE
// begin ToLua ( displayTroll(); ) ;
13817: LD_STRING displayTroll();
13819: PPUSH
13820: CALL_OW 559
// wait ( 3 3$00 ) ;
13824: LD_INT 6300
13826: PPUSH
13827: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13831: LD_STRING hideTroll();
13833: PPUSH
13834: CALL_OW 559
// wait ( 1 1$00 ) ;
13838: LD_INT 2100
13840: PPUSH
13841: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13845: LD_STRING displayTroll();
13847: PPUSH
13848: CALL_OW 559
// wait ( 1 1$00 ) ;
13852: LD_INT 2100
13854: PPUSH
13855: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13859: LD_STRING hideTroll();
13861: PPUSH
13862: CALL_OW 559
// end ;
13866: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13867: LD_EXP 31
13871: PUSH
13872: LD_EXP 57
13876: AND
13877: IFFALSE 13940
13879: GO 13881
13881: DISABLE
13882: LD_INT 0
13884: PPUSH
// begin p := 0 ;
13885: LD_ADDR_VAR 0 1
13889: PUSH
13890: LD_INT 0
13892: ST_TO_ADDR
// repeat game_speed := 1 ;
13893: LD_ADDR_OWVAR 65
13897: PUSH
13898: LD_INT 1
13900: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13901: LD_INT 35
13903: PPUSH
13904: CALL_OW 67
// p := p + 1 ;
13908: LD_ADDR_VAR 0 1
13912: PUSH
13913: LD_VAR 0 1
13917: PUSH
13918: LD_INT 1
13920: PLUS
13921: ST_TO_ADDR
// until p >= 60 ;
13922: LD_VAR 0 1
13926: PUSH
13927: LD_INT 60
13929: GREATEREQUAL
13930: IFFALSE 13893
// game_speed := 4 ;
13932: LD_ADDR_OWVAR 65
13936: PUSH
13937: LD_INT 4
13939: ST_TO_ADDR
// end ;
13940: PPOPN 1
13942: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13943: LD_EXP 31
13947: PUSH
13948: LD_EXP 58
13952: AND
13953: IFFALSE 14099
13955: GO 13957
13957: DISABLE
13958: LD_INT 0
13960: PPUSH
13961: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13962: LD_ADDR_VAR 0 1
13966: PUSH
13967: LD_INT 22
13969: PUSH
13970: LD_OWVAR 2
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: PUSH
13979: LD_INT 2
13981: PUSH
13982: LD_INT 30
13984: PUSH
13985: LD_INT 0
13987: PUSH
13988: EMPTY
13989: LIST
13990: LIST
13991: PUSH
13992: LD_INT 30
13994: PUSH
13995: LD_INT 1
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: PUSH
14002: EMPTY
14003: LIST
14004: LIST
14005: LIST
14006: PUSH
14007: EMPTY
14008: LIST
14009: LIST
14010: PPUSH
14011: CALL_OW 69
14015: ST_TO_ADDR
// if not depot then
14016: LD_VAR 0 1
14020: NOT
14021: IFFALSE 14025
// exit ;
14023: GO 14099
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14025: LD_ADDR_VAR 0 2
14029: PUSH
14030: LD_VAR 0 1
14034: PUSH
14035: LD_INT 1
14037: PPUSH
14038: LD_VAR 0 1
14042: PPUSH
14043: CALL_OW 12
14047: ARRAY
14048: PPUSH
14049: CALL_OW 274
14053: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14054: LD_VAR 0 2
14058: PPUSH
14059: LD_INT 1
14061: PPUSH
14062: LD_INT 0
14064: PPUSH
14065: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
14069: LD_VAR 0 2
14073: PPUSH
14074: LD_INT 2
14076: PPUSH
14077: LD_INT 0
14079: PPUSH
14080: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
14084: LD_VAR 0 2
14088: PPUSH
14089: LD_INT 3
14091: PPUSH
14092: LD_INT 0
14094: PPUSH
14095: CALL_OW 277
// end ;
14099: PPOPN 2
14101: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
14102: LD_EXP 31
14106: PUSH
14107: LD_EXP 59
14111: AND
14112: IFFALSE 14209
14114: GO 14116
14116: DISABLE
14117: LD_INT 0
14119: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14120: LD_ADDR_VAR 0 1
14124: PUSH
14125: LD_INT 22
14127: PUSH
14128: LD_OWVAR 2
14132: PUSH
14133: EMPTY
14134: LIST
14135: LIST
14136: PUSH
14137: LD_INT 21
14139: PUSH
14140: LD_INT 1
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: PUSH
14147: LD_INT 3
14149: PUSH
14150: LD_INT 23
14152: PUSH
14153: LD_INT 0
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: LIST
14168: PPUSH
14169: CALL_OW 69
14173: ST_TO_ADDR
// if not tmp then
14174: LD_VAR 0 1
14178: NOT
14179: IFFALSE 14183
// exit ;
14181: GO 14209
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
14183: LD_VAR 0 1
14187: PUSH
14188: LD_INT 1
14190: PPUSH
14191: LD_VAR 0 1
14195: PPUSH
14196: CALL_OW 12
14200: ARRAY
14201: PPUSH
14202: LD_INT 200
14204: PPUSH
14205: CALL_OW 234
// end ;
14209: PPOPN 1
14211: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
14212: LD_EXP 31
14216: PUSH
14217: LD_EXP 60
14221: AND
14222: IFFALSE 14301
14224: GO 14226
14226: DISABLE
14227: LD_INT 0
14229: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
14230: LD_ADDR_VAR 0 1
14234: PUSH
14235: LD_INT 22
14237: PUSH
14238: LD_OWVAR 2
14242: PUSH
14243: EMPTY
14244: LIST
14245: LIST
14246: PUSH
14247: LD_INT 21
14249: PUSH
14250: LD_INT 2
14252: PUSH
14253: EMPTY
14254: LIST
14255: LIST
14256: PUSH
14257: EMPTY
14258: LIST
14259: LIST
14260: PPUSH
14261: CALL_OW 69
14265: ST_TO_ADDR
// if not tmp then
14266: LD_VAR 0 1
14270: NOT
14271: IFFALSE 14275
// exit ;
14273: GO 14301
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
14275: LD_VAR 0 1
14279: PUSH
14280: LD_INT 1
14282: PPUSH
14283: LD_VAR 0 1
14287: PPUSH
14288: CALL_OW 12
14292: ARRAY
14293: PPUSH
14294: LD_INT 60
14296: PPUSH
14297: CALL_OW 234
// end ;
14301: PPOPN 1
14303: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
14304: LD_EXP 31
14308: PUSH
14309: LD_EXP 61
14313: AND
14314: IFFALSE 14413
14316: GO 14318
14318: DISABLE
14319: LD_INT 0
14321: PPUSH
14322: PPUSH
// begin enable ;
14323: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
14324: LD_ADDR_VAR 0 1
14328: PUSH
14329: LD_INT 22
14331: PUSH
14332: LD_OWVAR 2
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: PUSH
14341: LD_INT 61
14343: PUSH
14344: EMPTY
14345: LIST
14346: PUSH
14347: LD_INT 33
14349: PUSH
14350: LD_INT 2
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: LIST
14361: PPUSH
14362: CALL_OW 69
14366: ST_TO_ADDR
// if not tmp then
14367: LD_VAR 0 1
14371: NOT
14372: IFFALSE 14376
// exit ;
14374: GO 14413
// for i in tmp do
14376: LD_ADDR_VAR 0 2
14380: PUSH
14381: LD_VAR 0 1
14385: PUSH
14386: FOR_IN
14387: IFFALSE 14411
// if IsControledBy ( i ) then
14389: LD_VAR 0 2
14393: PPUSH
14394: CALL_OW 312
14398: IFFALSE 14409
// ComUnlink ( i ) ;
14400: LD_VAR 0 2
14404: PPUSH
14405: CALL_OW 136
14409: GO 14386
14411: POP
14412: POP
// end ;
14413: PPOPN 2
14415: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
14416: LD_EXP 31
14420: PUSH
14421: LD_EXP 62
14425: AND
14426: IFFALSE 14566
14428: GO 14430
14430: DISABLE
14431: LD_INT 0
14433: PPUSH
14434: PPUSH
// begin ToLua ( displayPowell(); ) ;
14435: LD_STRING displayPowell();
14437: PPUSH
14438: CALL_OW 559
// uc_side := 0 ;
14442: LD_ADDR_OWVAR 20
14446: PUSH
14447: LD_INT 0
14449: ST_TO_ADDR
// uc_nation := 2 ;
14450: LD_ADDR_OWVAR 21
14454: PUSH
14455: LD_INT 2
14457: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
14458: LD_ADDR_OWVAR 37
14462: PUSH
14463: LD_INT 14
14465: ST_TO_ADDR
// vc_engine := engine_siberite ;
14466: LD_ADDR_OWVAR 39
14470: PUSH
14471: LD_INT 3
14473: ST_TO_ADDR
// vc_control := control_apeman ;
14474: LD_ADDR_OWVAR 38
14478: PUSH
14479: LD_INT 5
14481: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
14482: LD_ADDR_OWVAR 40
14486: PUSH
14487: LD_INT 29
14489: ST_TO_ADDR
// un := CreateVehicle ;
14490: LD_ADDR_VAR 0 2
14494: PUSH
14495: CALL_OW 45
14499: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14500: LD_VAR 0 2
14504: PPUSH
14505: LD_INT 1
14507: PPUSH
14508: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14512: LD_INT 35
14514: PPUSH
14515: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14519: LD_VAR 0 2
14523: PPUSH
14524: LD_INT 22
14526: PUSH
14527: LD_OWVAR 2
14531: PUSH
14532: EMPTY
14533: LIST
14534: LIST
14535: PPUSH
14536: CALL_OW 69
14540: PPUSH
14541: LD_VAR 0 2
14545: PPUSH
14546: CALL_OW 74
14550: PPUSH
14551: CALL_OW 115
// until IsDead ( un ) ;
14555: LD_VAR 0 2
14559: PPUSH
14560: CALL_OW 301
14564: IFFALSE 14512
// end ;
14566: PPOPN 2
14568: END
// every 0 0$1 trigger StreamModeActive and sStu do
14569: LD_EXP 31
14573: PUSH
14574: LD_EXP 70
14578: AND
14579: IFFALSE 14595
14581: GO 14583
14583: DISABLE
// begin ToLua ( displayStucuk(); ) ;
14584: LD_STRING displayStucuk();
14586: PPUSH
14587: CALL_OW 559
// ResetFog ;
14591: CALL_OW 335
// end ;
14595: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
14596: LD_EXP 31
14600: PUSH
14601: LD_EXP 63
14605: AND
14606: IFFALSE 14747
14608: GO 14610
14610: DISABLE
14611: LD_INT 0
14613: PPUSH
14614: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14615: LD_ADDR_VAR 0 2
14619: PUSH
14620: LD_INT 22
14622: PUSH
14623: LD_OWVAR 2
14627: PUSH
14628: EMPTY
14629: LIST
14630: LIST
14631: PUSH
14632: LD_INT 21
14634: PUSH
14635: LD_INT 1
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: PUSH
14642: EMPTY
14643: LIST
14644: LIST
14645: PPUSH
14646: CALL_OW 69
14650: ST_TO_ADDR
// if not tmp then
14651: LD_VAR 0 2
14655: NOT
14656: IFFALSE 14660
// exit ;
14658: GO 14747
// un := tmp [ rand ( 1 , tmp ) ] ;
14660: LD_ADDR_VAR 0 1
14664: PUSH
14665: LD_VAR 0 2
14669: PUSH
14670: LD_INT 1
14672: PPUSH
14673: LD_VAR 0 2
14677: PPUSH
14678: CALL_OW 12
14682: ARRAY
14683: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14684: LD_VAR 0 1
14688: PPUSH
14689: LD_INT 0
14691: PPUSH
14692: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14696: LD_VAR 0 1
14700: PPUSH
14701: LD_OWVAR 3
14705: PUSH
14706: LD_VAR 0 1
14710: DIFF
14711: PPUSH
14712: LD_VAR 0 1
14716: PPUSH
14717: CALL_OW 74
14721: PPUSH
14722: CALL_OW 115
// wait ( 0 0$20 ) ;
14726: LD_INT 700
14728: PPUSH
14729: CALL_OW 67
// SetSide ( un , your_side ) ;
14733: LD_VAR 0 1
14737: PPUSH
14738: LD_OWVAR 2
14742: PPUSH
14743: CALL_OW 235
// end ;
14747: PPOPN 2
14749: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14750: LD_EXP 31
14754: PUSH
14755: LD_EXP 64
14759: AND
14760: IFFALSE 14866
14762: GO 14764
14764: DISABLE
14765: LD_INT 0
14767: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14768: LD_ADDR_VAR 0 1
14772: PUSH
14773: LD_INT 22
14775: PUSH
14776: LD_OWVAR 2
14780: PUSH
14781: EMPTY
14782: LIST
14783: LIST
14784: PUSH
14785: LD_INT 2
14787: PUSH
14788: LD_INT 30
14790: PUSH
14791: LD_INT 0
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: PUSH
14798: LD_INT 30
14800: PUSH
14801: LD_INT 1
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: PUSH
14808: EMPTY
14809: LIST
14810: LIST
14811: LIST
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: PPUSH
14817: CALL_OW 69
14821: ST_TO_ADDR
// if not depot then
14822: LD_VAR 0 1
14826: NOT
14827: IFFALSE 14831
// exit ;
14829: GO 14866
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14831: LD_VAR 0 1
14835: PUSH
14836: LD_INT 1
14838: ARRAY
14839: PPUSH
14840: CALL_OW 250
14844: PPUSH
14845: LD_VAR 0 1
14849: PUSH
14850: LD_INT 1
14852: ARRAY
14853: PPUSH
14854: CALL_OW 251
14858: PPUSH
14859: LD_INT 70
14861: PPUSH
14862: CALL_OW 495
// end ;
14866: PPOPN 1
14868: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14869: LD_EXP 31
14873: PUSH
14874: LD_EXP 65
14878: AND
14879: IFFALSE 15090
14881: GO 14883
14883: DISABLE
14884: LD_INT 0
14886: PPUSH
14887: PPUSH
14888: PPUSH
14889: PPUSH
14890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14891: LD_ADDR_VAR 0 5
14895: PUSH
14896: LD_INT 22
14898: PUSH
14899: LD_OWVAR 2
14903: PUSH
14904: EMPTY
14905: LIST
14906: LIST
14907: PUSH
14908: LD_INT 21
14910: PUSH
14911: LD_INT 1
14913: PUSH
14914: EMPTY
14915: LIST
14916: LIST
14917: PUSH
14918: EMPTY
14919: LIST
14920: LIST
14921: PPUSH
14922: CALL_OW 69
14926: ST_TO_ADDR
// if not tmp then
14927: LD_VAR 0 5
14931: NOT
14932: IFFALSE 14936
// exit ;
14934: GO 15090
// for i in tmp do
14936: LD_ADDR_VAR 0 1
14940: PUSH
14941: LD_VAR 0 5
14945: PUSH
14946: FOR_IN
14947: IFFALSE 15088
// begin d := rand ( 0 , 5 ) ;
14949: LD_ADDR_VAR 0 4
14953: PUSH
14954: LD_INT 0
14956: PPUSH
14957: LD_INT 5
14959: PPUSH
14960: CALL_OW 12
14964: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14965: LD_ADDR_VAR 0 2
14969: PUSH
14970: LD_VAR 0 1
14974: PPUSH
14975: CALL_OW 250
14979: PPUSH
14980: LD_VAR 0 4
14984: PPUSH
14985: LD_INT 3
14987: PPUSH
14988: LD_INT 12
14990: PPUSH
14991: CALL_OW 12
14995: PPUSH
14996: CALL_OW 272
15000: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15001: LD_ADDR_VAR 0 3
15005: PUSH
15006: LD_VAR 0 1
15010: PPUSH
15011: CALL_OW 251
15015: PPUSH
15016: LD_VAR 0 4
15020: PPUSH
15021: LD_INT 3
15023: PPUSH
15024: LD_INT 12
15026: PPUSH
15027: CALL_OW 12
15031: PPUSH
15032: CALL_OW 273
15036: ST_TO_ADDR
// if ValidHex ( x , y ) then
15037: LD_VAR 0 2
15041: PPUSH
15042: LD_VAR 0 3
15046: PPUSH
15047: CALL_OW 488
15051: IFFALSE 15086
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15053: LD_VAR 0 1
15057: PPUSH
15058: LD_VAR 0 2
15062: PPUSH
15063: LD_VAR 0 3
15067: PPUSH
15068: LD_INT 3
15070: PPUSH
15071: LD_INT 6
15073: PPUSH
15074: CALL_OW 12
15078: PPUSH
15079: LD_INT 1
15081: PPUSH
15082: CALL_OW 483
// end ;
15086: GO 14946
15088: POP
15089: POP
// end ;
15090: PPOPN 5
15092: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
15093: LD_EXP 31
15097: PUSH
15098: LD_EXP 66
15102: AND
15103: IFFALSE 15197
15105: GO 15107
15107: DISABLE
15108: LD_INT 0
15110: PPUSH
15111: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
15112: LD_ADDR_VAR 0 2
15116: PUSH
15117: LD_INT 22
15119: PUSH
15120: LD_OWVAR 2
15124: PUSH
15125: EMPTY
15126: LIST
15127: LIST
15128: PUSH
15129: LD_INT 32
15131: PUSH
15132: LD_INT 1
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: PUSH
15139: LD_INT 21
15141: PUSH
15142: LD_INT 2
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: LIST
15153: PPUSH
15154: CALL_OW 69
15158: ST_TO_ADDR
// if not tmp then
15159: LD_VAR 0 2
15163: NOT
15164: IFFALSE 15168
// exit ;
15166: GO 15197
// for i in tmp do
15168: LD_ADDR_VAR 0 1
15172: PUSH
15173: LD_VAR 0 2
15177: PUSH
15178: FOR_IN
15179: IFFALSE 15195
// SetFuel ( i , 0 ) ;
15181: LD_VAR 0 1
15185: PPUSH
15186: LD_INT 0
15188: PPUSH
15189: CALL_OW 240
15193: GO 15178
15195: POP
15196: POP
// end ;
15197: PPOPN 2
15199: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
15200: LD_EXP 31
15204: PUSH
15205: LD_EXP 67
15209: AND
15210: IFFALSE 15276
15212: GO 15214
15214: DISABLE
15215: LD_INT 0
15217: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15218: LD_ADDR_VAR 0 1
15222: PUSH
15223: LD_INT 22
15225: PUSH
15226: LD_OWVAR 2
15230: PUSH
15231: EMPTY
15232: LIST
15233: LIST
15234: PUSH
15235: LD_INT 30
15237: PUSH
15238: LD_INT 29
15240: PUSH
15241: EMPTY
15242: LIST
15243: LIST
15244: PUSH
15245: EMPTY
15246: LIST
15247: LIST
15248: PPUSH
15249: CALL_OW 69
15253: ST_TO_ADDR
// if not tmp then
15254: LD_VAR 0 1
15258: NOT
15259: IFFALSE 15263
// exit ;
15261: GO 15276
// DestroyUnit ( tmp [ 1 ] ) ;
15263: LD_VAR 0 1
15267: PUSH
15268: LD_INT 1
15270: ARRAY
15271: PPUSH
15272: CALL_OW 65
// end ;
15276: PPOPN 1
15278: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
15279: LD_EXP 31
15283: PUSH
15284: LD_EXP 69
15288: AND
15289: IFFALSE 15418
15291: GO 15293
15293: DISABLE
15294: LD_INT 0
15296: PPUSH
// begin uc_side := 0 ;
15297: LD_ADDR_OWVAR 20
15301: PUSH
15302: LD_INT 0
15304: ST_TO_ADDR
// uc_nation := nation_arabian ;
15305: LD_ADDR_OWVAR 21
15309: PUSH
15310: LD_INT 2
15312: ST_TO_ADDR
// hc_gallery :=  ;
15313: LD_ADDR_OWVAR 33
15317: PUSH
15318: LD_STRING 
15320: ST_TO_ADDR
// hc_name :=  ;
15321: LD_ADDR_OWVAR 26
15325: PUSH
15326: LD_STRING 
15328: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
15329: LD_INT 1
15331: PPUSH
15332: LD_INT 11
15334: PPUSH
15335: LD_INT 10
15337: PPUSH
15338: CALL_OW 380
// un := CreateHuman ;
15342: LD_ADDR_VAR 0 1
15346: PUSH
15347: CALL_OW 44
15351: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15352: LD_VAR 0 1
15356: PPUSH
15357: LD_INT 1
15359: PPUSH
15360: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15364: LD_INT 35
15366: PPUSH
15367: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15371: LD_VAR 0 1
15375: PPUSH
15376: LD_INT 22
15378: PUSH
15379: LD_OWVAR 2
15383: PUSH
15384: EMPTY
15385: LIST
15386: LIST
15387: PPUSH
15388: CALL_OW 69
15392: PPUSH
15393: LD_VAR 0 1
15397: PPUSH
15398: CALL_OW 74
15402: PPUSH
15403: CALL_OW 115
// until IsDead ( un ) ;
15407: LD_VAR 0 1
15411: PPUSH
15412: CALL_OW 301
15416: IFFALSE 15364
// end ;
15418: PPOPN 1
15420: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
15421: LD_EXP 31
15425: PUSH
15426: LD_EXP 71
15430: AND
15431: IFFALSE 15443
15433: GO 15435
15435: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
15436: LD_STRING earthquake(getX(game), 0, 32)
15438: PPUSH
15439: CALL_OW 559
15443: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
15444: LD_EXP 31
15448: PUSH
15449: LD_EXP 72
15453: AND
15454: IFFALSE 15545
15456: GO 15458
15458: DISABLE
15459: LD_INT 0
15461: PPUSH
// begin enable ;
15462: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
15463: LD_ADDR_VAR 0 1
15467: PUSH
15468: LD_INT 22
15470: PUSH
15471: LD_OWVAR 2
15475: PUSH
15476: EMPTY
15477: LIST
15478: LIST
15479: PUSH
15480: LD_INT 21
15482: PUSH
15483: LD_INT 2
15485: PUSH
15486: EMPTY
15487: LIST
15488: LIST
15489: PUSH
15490: LD_INT 33
15492: PUSH
15493: LD_INT 3
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: LIST
15504: PPUSH
15505: CALL_OW 69
15509: ST_TO_ADDR
// if not tmp then
15510: LD_VAR 0 1
15514: NOT
15515: IFFALSE 15519
// exit ;
15517: GO 15545
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15519: LD_VAR 0 1
15523: PUSH
15524: LD_INT 1
15526: PPUSH
15527: LD_VAR 0 1
15531: PPUSH
15532: CALL_OW 12
15536: ARRAY
15537: PPUSH
15538: LD_INT 1
15540: PPUSH
15541: CALL_OW 234
// end ;
15545: PPOPN 1
15547: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
15548: LD_EXP 31
15552: PUSH
15553: LD_EXP 73
15557: AND
15558: IFFALSE 15699
15560: GO 15562
15562: DISABLE
15563: LD_INT 0
15565: PPUSH
15566: PPUSH
15567: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15568: LD_ADDR_VAR 0 3
15572: PUSH
15573: LD_INT 22
15575: PUSH
15576: LD_OWVAR 2
15580: PUSH
15581: EMPTY
15582: LIST
15583: LIST
15584: PUSH
15585: LD_INT 25
15587: PUSH
15588: LD_INT 1
15590: PUSH
15591: EMPTY
15592: LIST
15593: LIST
15594: PUSH
15595: EMPTY
15596: LIST
15597: LIST
15598: PPUSH
15599: CALL_OW 69
15603: ST_TO_ADDR
// if not tmp then
15604: LD_VAR 0 3
15608: NOT
15609: IFFALSE 15613
// exit ;
15611: GO 15699
// un := tmp [ rand ( 1 , tmp ) ] ;
15613: LD_ADDR_VAR 0 2
15617: PUSH
15618: LD_VAR 0 3
15622: PUSH
15623: LD_INT 1
15625: PPUSH
15626: LD_VAR 0 3
15630: PPUSH
15631: CALL_OW 12
15635: ARRAY
15636: ST_TO_ADDR
// if Crawls ( un ) then
15637: LD_VAR 0 2
15641: PPUSH
15642: CALL_OW 318
15646: IFFALSE 15657
// ComWalk ( un ) ;
15648: LD_VAR 0 2
15652: PPUSH
15653: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15657: LD_VAR 0 2
15661: PPUSH
15662: LD_INT 9
15664: PPUSH
15665: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15669: LD_INT 28
15671: PPUSH
15672: LD_OWVAR 2
15676: PPUSH
15677: LD_INT 2
15679: PPUSH
15680: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15684: LD_INT 29
15686: PPUSH
15687: LD_OWVAR 2
15691: PPUSH
15692: LD_INT 2
15694: PPUSH
15695: CALL_OW 322
// end ;
15699: PPOPN 3
15701: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15702: LD_EXP 31
15706: PUSH
15707: LD_EXP 74
15711: AND
15712: IFFALSE 15823
15714: GO 15716
15716: DISABLE
15717: LD_INT 0
15719: PPUSH
15720: PPUSH
15721: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15722: LD_ADDR_VAR 0 3
15726: PUSH
15727: LD_INT 22
15729: PUSH
15730: LD_OWVAR 2
15734: PUSH
15735: EMPTY
15736: LIST
15737: LIST
15738: PUSH
15739: LD_INT 25
15741: PUSH
15742: LD_INT 1
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: PUSH
15749: EMPTY
15750: LIST
15751: LIST
15752: PPUSH
15753: CALL_OW 69
15757: ST_TO_ADDR
// if not tmp then
15758: LD_VAR 0 3
15762: NOT
15763: IFFALSE 15767
// exit ;
15765: GO 15823
// un := tmp [ rand ( 1 , tmp ) ] ;
15767: LD_ADDR_VAR 0 2
15771: PUSH
15772: LD_VAR 0 3
15776: PUSH
15777: LD_INT 1
15779: PPUSH
15780: LD_VAR 0 3
15784: PPUSH
15785: CALL_OW 12
15789: ARRAY
15790: ST_TO_ADDR
// if Crawls ( un ) then
15791: LD_VAR 0 2
15795: PPUSH
15796: CALL_OW 318
15800: IFFALSE 15811
// ComWalk ( un ) ;
15802: LD_VAR 0 2
15806: PPUSH
15807: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15811: LD_VAR 0 2
15815: PPUSH
15816: LD_INT 8
15818: PPUSH
15819: CALL_OW 336
// end ;
15823: PPOPN 3
15825: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15826: LD_EXP 31
15830: PUSH
15831: LD_EXP 75
15835: AND
15836: IFFALSE 15980
15838: GO 15840
15840: DISABLE
15841: LD_INT 0
15843: PPUSH
15844: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15845: LD_ADDR_VAR 0 2
15849: PUSH
15850: LD_INT 22
15852: PUSH
15853: LD_OWVAR 2
15857: PUSH
15858: EMPTY
15859: LIST
15860: LIST
15861: PUSH
15862: LD_INT 21
15864: PUSH
15865: LD_INT 2
15867: PUSH
15868: EMPTY
15869: LIST
15870: LIST
15871: PUSH
15872: LD_INT 2
15874: PUSH
15875: LD_INT 34
15877: PUSH
15878: LD_INT 12
15880: PUSH
15881: EMPTY
15882: LIST
15883: LIST
15884: PUSH
15885: LD_INT 34
15887: PUSH
15888: LD_INT 51
15890: PUSH
15891: EMPTY
15892: LIST
15893: LIST
15894: PUSH
15895: LD_INT 34
15897: PUSH
15898: LD_INT 32
15900: PUSH
15901: EMPTY
15902: LIST
15903: LIST
15904: PUSH
15905: EMPTY
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: LIST
15915: PPUSH
15916: CALL_OW 69
15920: ST_TO_ADDR
// if not tmp then
15921: LD_VAR 0 2
15925: NOT
15926: IFFALSE 15930
// exit ;
15928: GO 15980
// for i in tmp do
15930: LD_ADDR_VAR 0 1
15934: PUSH
15935: LD_VAR 0 2
15939: PUSH
15940: FOR_IN
15941: IFFALSE 15978
// if GetCargo ( i , mat_artifact ) = 0 then
15943: LD_VAR 0 1
15947: PPUSH
15948: LD_INT 4
15950: PPUSH
15951: CALL_OW 289
15955: PUSH
15956: LD_INT 0
15958: EQUAL
15959: IFFALSE 15976
// SetCargo ( i , mat_siberit , 100 ) ;
15961: LD_VAR 0 1
15965: PPUSH
15966: LD_INT 3
15968: PPUSH
15969: LD_INT 100
15971: PPUSH
15972: CALL_OW 290
15976: GO 15940
15978: POP
15979: POP
// end ;
15980: PPOPN 2
15982: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15983: LD_EXP 31
15987: PUSH
15988: LD_EXP 76
15992: AND
15993: IFFALSE 16176
15995: GO 15997
15997: DISABLE
15998: LD_INT 0
16000: PPUSH
16001: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16002: LD_ADDR_VAR 0 2
16006: PUSH
16007: LD_INT 22
16009: PUSH
16010: LD_OWVAR 2
16014: PUSH
16015: EMPTY
16016: LIST
16017: LIST
16018: PPUSH
16019: CALL_OW 69
16023: ST_TO_ADDR
// if not tmp then
16024: LD_VAR 0 2
16028: NOT
16029: IFFALSE 16033
// exit ;
16031: GO 16176
// for i := 1 to 2 do
16033: LD_ADDR_VAR 0 1
16037: PUSH
16038: DOUBLE
16039: LD_INT 1
16041: DEC
16042: ST_TO_ADDR
16043: LD_INT 2
16045: PUSH
16046: FOR_TO
16047: IFFALSE 16174
// begin uc_side := your_side ;
16049: LD_ADDR_OWVAR 20
16053: PUSH
16054: LD_OWVAR 2
16058: ST_TO_ADDR
// uc_nation := nation_american ;
16059: LD_ADDR_OWVAR 21
16063: PUSH
16064: LD_INT 1
16066: ST_TO_ADDR
// vc_chassis := us_morphling ;
16067: LD_ADDR_OWVAR 37
16071: PUSH
16072: LD_INT 5
16074: ST_TO_ADDR
// vc_engine := engine_siberite ;
16075: LD_ADDR_OWVAR 39
16079: PUSH
16080: LD_INT 3
16082: ST_TO_ADDR
// vc_control := control_computer ;
16083: LD_ADDR_OWVAR 38
16087: PUSH
16088: LD_INT 3
16090: ST_TO_ADDR
// vc_weapon := us_double_laser ;
16091: LD_ADDR_OWVAR 40
16095: PUSH
16096: LD_INT 10
16098: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
16099: LD_VAR 0 2
16103: PUSH
16104: LD_INT 1
16106: ARRAY
16107: PPUSH
16108: CALL_OW 310
16112: NOT
16113: IFFALSE 16160
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
16115: CALL_OW 45
16119: PPUSH
16120: LD_VAR 0 2
16124: PUSH
16125: LD_INT 1
16127: ARRAY
16128: PPUSH
16129: CALL_OW 250
16133: PPUSH
16134: LD_VAR 0 2
16138: PUSH
16139: LD_INT 1
16141: ARRAY
16142: PPUSH
16143: CALL_OW 251
16147: PPUSH
16148: LD_INT 12
16150: PPUSH
16151: LD_INT 1
16153: PPUSH
16154: CALL_OW 50
16158: GO 16172
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16160: CALL_OW 45
16164: PPUSH
16165: LD_INT 1
16167: PPUSH
16168: CALL_OW 51
// end ;
16172: GO 16046
16174: POP
16175: POP
// end ;
16176: PPOPN 2
16178: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
16179: LD_EXP 31
16183: PUSH
16184: LD_EXP 77
16188: AND
16189: IFFALSE 16411
16191: GO 16193
16193: DISABLE
16194: LD_INT 0
16196: PPUSH
16197: PPUSH
16198: PPUSH
16199: PPUSH
16200: PPUSH
16201: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16202: LD_ADDR_VAR 0 6
16206: PUSH
16207: LD_INT 22
16209: PUSH
16210: LD_OWVAR 2
16214: PUSH
16215: EMPTY
16216: LIST
16217: LIST
16218: PUSH
16219: LD_INT 21
16221: PUSH
16222: LD_INT 1
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: PUSH
16229: LD_INT 3
16231: PUSH
16232: LD_INT 23
16234: PUSH
16235: LD_INT 0
16237: PUSH
16238: EMPTY
16239: LIST
16240: LIST
16241: PUSH
16242: EMPTY
16243: LIST
16244: LIST
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: LIST
16250: PPUSH
16251: CALL_OW 69
16255: ST_TO_ADDR
// if not tmp then
16256: LD_VAR 0 6
16260: NOT
16261: IFFALSE 16265
// exit ;
16263: GO 16411
// s1 := rand ( 1 , 4 ) ;
16265: LD_ADDR_VAR 0 2
16269: PUSH
16270: LD_INT 1
16272: PPUSH
16273: LD_INT 4
16275: PPUSH
16276: CALL_OW 12
16280: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
16281: LD_ADDR_VAR 0 4
16285: PUSH
16286: LD_VAR 0 6
16290: PUSH
16291: LD_INT 1
16293: ARRAY
16294: PPUSH
16295: LD_VAR 0 2
16299: PPUSH
16300: CALL_OW 259
16304: ST_TO_ADDR
// if s1 = 1 then
16305: LD_VAR 0 2
16309: PUSH
16310: LD_INT 1
16312: EQUAL
16313: IFFALSE 16333
// s2 := rand ( 2 , 4 ) else
16315: LD_ADDR_VAR 0 3
16319: PUSH
16320: LD_INT 2
16322: PPUSH
16323: LD_INT 4
16325: PPUSH
16326: CALL_OW 12
16330: ST_TO_ADDR
16331: GO 16341
// s2 := 1 ;
16333: LD_ADDR_VAR 0 3
16337: PUSH
16338: LD_INT 1
16340: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
16341: LD_ADDR_VAR 0 5
16345: PUSH
16346: LD_VAR 0 6
16350: PUSH
16351: LD_INT 1
16353: ARRAY
16354: PPUSH
16355: LD_VAR 0 3
16359: PPUSH
16360: CALL_OW 259
16364: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
16365: LD_VAR 0 6
16369: PUSH
16370: LD_INT 1
16372: ARRAY
16373: PPUSH
16374: LD_VAR 0 2
16378: PPUSH
16379: LD_VAR 0 5
16383: PPUSH
16384: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
16388: LD_VAR 0 6
16392: PUSH
16393: LD_INT 1
16395: ARRAY
16396: PPUSH
16397: LD_VAR 0 3
16401: PPUSH
16402: LD_VAR 0 4
16406: PPUSH
16407: CALL_OW 237
// end ;
16411: PPOPN 6
16413: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
16414: LD_EXP 31
16418: PUSH
16419: LD_EXP 78
16423: AND
16424: IFFALSE 16503
16426: GO 16428
16428: DISABLE
16429: LD_INT 0
16431: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
16432: LD_ADDR_VAR 0 1
16436: PUSH
16437: LD_INT 22
16439: PUSH
16440: LD_OWVAR 2
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: PUSH
16449: LD_INT 30
16451: PUSH
16452: LD_INT 3
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PUSH
16459: EMPTY
16460: LIST
16461: LIST
16462: PPUSH
16463: CALL_OW 69
16467: ST_TO_ADDR
// if not tmp then
16468: LD_VAR 0 1
16472: NOT
16473: IFFALSE 16477
// exit ;
16475: GO 16503
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16477: LD_VAR 0 1
16481: PUSH
16482: LD_INT 1
16484: PPUSH
16485: LD_VAR 0 1
16489: PPUSH
16490: CALL_OW 12
16494: ARRAY
16495: PPUSH
16496: LD_INT 1
16498: PPUSH
16499: CALL_OW 234
// end ;
16503: PPOPN 1
16505: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
16506: LD_EXP 31
16510: PUSH
16511: LD_EXP 79
16515: AND
16516: IFFALSE 16628
16518: GO 16520
16520: DISABLE
16521: LD_INT 0
16523: PPUSH
16524: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
16525: LD_ADDR_VAR 0 2
16529: PUSH
16530: LD_INT 22
16532: PUSH
16533: LD_OWVAR 2
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: PUSH
16542: LD_INT 2
16544: PUSH
16545: LD_INT 30
16547: PUSH
16548: LD_INT 27
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: PUSH
16555: LD_INT 30
16557: PUSH
16558: LD_INT 26
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: PUSH
16565: LD_INT 30
16567: PUSH
16568: LD_INT 28
16570: PUSH
16571: EMPTY
16572: LIST
16573: LIST
16574: PUSH
16575: EMPTY
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: PPUSH
16585: CALL_OW 69
16589: ST_TO_ADDR
// if not tmp then
16590: LD_VAR 0 2
16594: NOT
16595: IFFALSE 16599
// exit ;
16597: GO 16628
// for i in tmp do
16599: LD_ADDR_VAR 0 1
16603: PUSH
16604: LD_VAR 0 2
16608: PUSH
16609: FOR_IN
16610: IFFALSE 16626
// SetLives ( i , 1 ) ;
16612: LD_VAR 0 1
16616: PPUSH
16617: LD_INT 1
16619: PPUSH
16620: CALL_OW 234
16624: GO 16609
16626: POP
16627: POP
// end ;
16628: PPOPN 2
16630: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
16631: LD_EXP 31
16635: PUSH
16636: LD_EXP 80
16640: AND
16641: IFFALSE 16928
16643: GO 16645
16645: DISABLE
16646: LD_INT 0
16648: PPUSH
16649: PPUSH
16650: PPUSH
// begin i := rand ( 1 , 7 ) ;
16651: LD_ADDR_VAR 0 1
16655: PUSH
16656: LD_INT 1
16658: PPUSH
16659: LD_INT 7
16661: PPUSH
16662: CALL_OW 12
16666: ST_TO_ADDR
// case i of 1 :
16667: LD_VAR 0 1
16671: PUSH
16672: LD_INT 1
16674: DOUBLE
16675: EQUAL
16676: IFTRUE 16680
16678: GO 16690
16680: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16681: LD_STRING earthquake(getX(game), 0, 32)
16683: PPUSH
16684: CALL_OW 559
16688: GO 16928
16690: LD_INT 2
16692: DOUBLE
16693: EQUAL
16694: IFTRUE 16698
16696: GO 16712
16698: POP
// begin ToLua ( displayStucuk(); ) ;
16699: LD_STRING displayStucuk();
16701: PPUSH
16702: CALL_OW 559
// ResetFog ;
16706: CALL_OW 335
// end ; 3 :
16710: GO 16928
16712: LD_INT 3
16714: DOUBLE
16715: EQUAL
16716: IFTRUE 16720
16718: GO 16824
16720: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16721: LD_ADDR_VAR 0 2
16725: PUSH
16726: LD_INT 22
16728: PUSH
16729: LD_OWVAR 2
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: PUSH
16738: LD_INT 25
16740: PUSH
16741: LD_INT 1
16743: PUSH
16744: EMPTY
16745: LIST
16746: LIST
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: PPUSH
16752: CALL_OW 69
16756: ST_TO_ADDR
// if not tmp then
16757: LD_VAR 0 2
16761: NOT
16762: IFFALSE 16766
// exit ;
16764: GO 16928
// un := tmp [ rand ( 1 , tmp ) ] ;
16766: LD_ADDR_VAR 0 3
16770: PUSH
16771: LD_VAR 0 2
16775: PUSH
16776: LD_INT 1
16778: PPUSH
16779: LD_VAR 0 2
16783: PPUSH
16784: CALL_OW 12
16788: ARRAY
16789: ST_TO_ADDR
// if Crawls ( un ) then
16790: LD_VAR 0 3
16794: PPUSH
16795: CALL_OW 318
16799: IFFALSE 16810
// ComWalk ( un ) ;
16801: LD_VAR 0 3
16805: PPUSH
16806: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16810: LD_VAR 0 3
16814: PPUSH
16815: LD_INT 8
16817: PPUSH
16818: CALL_OW 336
// end ; 4 :
16822: GO 16928
16824: LD_INT 4
16826: DOUBLE
16827: EQUAL
16828: IFTRUE 16832
16830: GO 16906
16832: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16833: LD_ADDR_VAR 0 2
16837: PUSH
16838: LD_INT 22
16840: PUSH
16841: LD_OWVAR 2
16845: PUSH
16846: EMPTY
16847: LIST
16848: LIST
16849: PUSH
16850: LD_INT 30
16852: PUSH
16853: LD_INT 29
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: PPUSH
16864: CALL_OW 69
16868: ST_TO_ADDR
// if not tmp then
16869: LD_VAR 0 2
16873: NOT
16874: IFFALSE 16878
// exit ;
16876: GO 16928
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16878: LD_VAR 0 2
16882: PUSH
16883: LD_INT 1
16885: ARRAY
16886: PPUSH
16887: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16891: LD_VAR 0 2
16895: PUSH
16896: LD_INT 1
16898: ARRAY
16899: PPUSH
16900: CALL_OW 65
// end ; 5 .. 7 :
16904: GO 16928
16906: LD_INT 5
16908: DOUBLE
16909: GREATEREQUAL
16910: IFFALSE 16918
16912: LD_INT 7
16914: DOUBLE
16915: LESSEQUAL
16916: IFTRUE 16920
16918: GO 16927
16920: POP
// StreamSibBomb ; end ;
16921: CALL 13165 0 0
16925: GO 16928
16927: POP
// end ;
16928: PPOPN 3
16930: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16931: LD_EXP 31
16935: PUSH
16936: LD_EXP 81
16940: AND
16941: IFFALSE 17097
16943: GO 16945
16945: DISABLE
16946: LD_INT 0
16948: PPUSH
16949: PPUSH
16950: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16951: LD_ADDR_VAR 0 2
16955: PUSH
16956: LD_INT 81
16958: PUSH
16959: LD_OWVAR 2
16963: PUSH
16964: EMPTY
16965: LIST
16966: LIST
16967: PUSH
16968: LD_INT 2
16970: PUSH
16971: LD_INT 21
16973: PUSH
16974: LD_INT 1
16976: PUSH
16977: EMPTY
16978: LIST
16979: LIST
16980: PUSH
16981: LD_INT 21
16983: PUSH
16984: LD_INT 2
16986: PUSH
16987: EMPTY
16988: LIST
16989: LIST
16990: PUSH
16991: EMPTY
16992: LIST
16993: LIST
16994: LIST
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: PPUSH
17000: CALL_OW 69
17004: ST_TO_ADDR
// if not tmp then
17005: LD_VAR 0 2
17009: NOT
17010: IFFALSE 17014
// exit ;
17012: GO 17097
// p := 0 ;
17014: LD_ADDR_VAR 0 3
17018: PUSH
17019: LD_INT 0
17021: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17022: LD_INT 35
17024: PPUSH
17025: CALL_OW 67
// p := p + 1 ;
17029: LD_ADDR_VAR 0 3
17033: PUSH
17034: LD_VAR 0 3
17038: PUSH
17039: LD_INT 1
17041: PLUS
17042: ST_TO_ADDR
// for i in tmp do
17043: LD_ADDR_VAR 0 1
17047: PUSH
17048: LD_VAR 0 2
17052: PUSH
17053: FOR_IN
17054: IFFALSE 17085
// if GetLives ( i ) < 1000 then
17056: LD_VAR 0 1
17060: PPUSH
17061: CALL_OW 256
17065: PUSH
17066: LD_INT 1000
17068: LESS
17069: IFFALSE 17083
// SetLives ( i , 1000 ) ;
17071: LD_VAR 0 1
17075: PPUSH
17076: LD_INT 1000
17078: PPUSH
17079: CALL_OW 234
17083: GO 17053
17085: POP
17086: POP
// until p > 20 ;
17087: LD_VAR 0 3
17091: PUSH
17092: LD_INT 20
17094: GREATER
17095: IFFALSE 17022
// end ;
17097: PPOPN 3
17099: END
// every 0 0$1 trigger StreamModeActive and sTime do
17100: LD_EXP 31
17104: PUSH
17105: LD_EXP 82
17109: AND
17110: IFFALSE 17145
17112: GO 17114
17114: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
17115: LD_INT 28
17117: PPUSH
17118: LD_OWVAR 2
17122: PPUSH
17123: LD_INT 2
17125: PPUSH
17126: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
17130: LD_INT 30
17132: PPUSH
17133: LD_OWVAR 2
17137: PPUSH
17138: LD_INT 2
17140: PPUSH
17141: CALL_OW 322
// end ;
17145: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
17146: LD_EXP 31
17150: PUSH
17151: LD_EXP 83
17155: AND
17156: IFFALSE 17277
17158: GO 17160
17160: DISABLE
17161: LD_INT 0
17163: PPUSH
17164: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17165: LD_ADDR_VAR 0 2
17169: PUSH
17170: LD_INT 22
17172: PUSH
17173: LD_OWVAR 2
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: PUSH
17182: LD_INT 21
17184: PUSH
17185: LD_INT 1
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PUSH
17192: LD_INT 3
17194: PUSH
17195: LD_INT 23
17197: PUSH
17198: LD_INT 0
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: LIST
17213: PPUSH
17214: CALL_OW 69
17218: ST_TO_ADDR
// if not tmp then
17219: LD_VAR 0 2
17223: NOT
17224: IFFALSE 17228
// exit ;
17226: GO 17277
// for i in tmp do
17228: LD_ADDR_VAR 0 1
17232: PUSH
17233: LD_VAR 0 2
17237: PUSH
17238: FOR_IN
17239: IFFALSE 17275
// begin if Crawls ( i ) then
17241: LD_VAR 0 1
17245: PPUSH
17246: CALL_OW 318
17250: IFFALSE 17261
// ComWalk ( i ) ;
17252: LD_VAR 0 1
17256: PPUSH
17257: CALL_OW 138
// SetClass ( i , 2 ) ;
17261: LD_VAR 0 1
17265: PPUSH
17266: LD_INT 2
17268: PPUSH
17269: CALL_OW 336
// end ;
17273: GO 17238
17275: POP
17276: POP
// end ;
17277: PPOPN 2
17279: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
17280: LD_EXP 31
17284: PUSH
17285: LD_EXP 84
17289: AND
17290: IFFALSE 17578
17292: GO 17294
17294: DISABLE
17295: LD_INT 0
17297: PPUSH
17298: PPUSH
17299: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
17300: LD_OWVAR 2
17304: PPUSH
17305: LD_INT 9
17307: PPUSH
17308: LD_INT 1
17310: PPUSH
17311: LD_INT 1
17313: PPUSH
17314: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
17318: LD_INT 9
17320: PPUSH
17321: LD_OWVAR 2
17325: PPUSH
17326: CALL_OW 343
// uc_side := 9 ;
17330: LD_ADDR_OWVAR 20
17334: PUSH
17335: LD_INT 9
17337: ST_TO_ADDR
// uc_nation := 2 ;
17338: LD_ADDR_OWVAR 21
17342: PUSH
17343: LD_INT 2
17345: ST_TO_ADDR
// hc_name := Dark Warrior ;
17346: LD_ADDR_OWVAR 26
17350: PUSH
17351: LD_STRING Dark Warrior
17353: ST_TO_ADDR
// hc_gallery :=  ;
17354: LD_ADDR_OWVAR 33
17358: PUSH
17359: LD_STRING 
17361: ST_TO_ADDR
// hc_noskilllimit := true ;
17362: LD_ADDR_OWVAR 76
17366: PUSH
17367: LD_INT 1
17369: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
17370: LD_ADDR_OWVAR 31
17374: PUSH
17375: LD_INT 30
17377: PUSH
17378: LD_INT 30
17380: PUSH
17381: LD_INT 30
17383: PUSH
17384: LD_INT 30
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: LIST
17391: LIST
17392: ST_TO_ADDR
// un := CreateHuman ;
17393: LD_ADDR_VAR 0 3
17397: PUSH
17398: CALL_OW 44
17402: ST_TO_ADDR
// hc_noskilllimit := false ;
17403: LD_ADDR_OWVAR 76
17407: PUSH
17408: LD_INT 0
17410: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17411: LD_VAR 0 3
17415: PPUSH
17416: LD_INT 1
17418: PPUSH
17419: CALL_OW 51
// ToLua ( playRanger() ) ;
17423: LD_STRING playRanger()
17425: PPUSH
17426: CALL_OW 559
// p := 0 ;
17430: LD_ADDR_VAR 0 2
17434: PUSH
17435: LD_INT 0
17437: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17438: LD_INT 35
17440: PPUSH
17441: CALL_OW 67
// p := p + 1 ;
17445: LD_ADDR_VAR 0 2
17449: PUSH
17450: LD_VAR 0 2
17454: PUSH
17455: LD_INT 1
17457: PLUS
17458: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
17459: LD_VAR 0 3
17463: PPUSH
17464: CALL_OW 256
17468: PUSH
17469: LD_INT 1000
17471: LESS
17472: IFFALSE 17486
// SetLives ( un , 1000 ) ;
17474: LD_VAR 0 3
17478: PPUSH
17479: LD_INT 1000
17481: PPUSH
17482: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
17486: LD_VAR 0 3
17490: PPUSH
17491: LD_INT 81
17493: PUSH
17494: LD_OWVAR 2
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: PUSH
17503: LD_INT 91
17505: PUSH
17506: LD_VAR 0 3
17510: PUSH
17511: LD_INT 30
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: LIST
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: PPUSH
17523: CALL_OW 69
17527: PPUSH
17528: LD_VAR 0 3
17532: PPUSH
17533: CALL_OW 74
17537: PPUSH
17538: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
17542: LD_VAR 0 2
17546: PUSH
17547: LD_INT 80
17549: GREATER
17550: PUSH
17551: LD_VAR 0 3
17555: PPUSH
17556: CALL_OW 301
17560: OR
17561: IFFALSE 17438
// if un then
17563: LD_VAR 0 3
17567: IFFALSE 17578
// RemoveUnit ( un ) ;
17569: LD_VAR 0 3
17573: PPUSH
17574: CALL_OW 64
// end ;
17578: PPOPN 3
17580: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
17581: LD_EXP 85
17585: IFFALSE 17701
17587: GO 17589
17589: DISABLE
17590: LD_INT 0
17592: PPUSH
17593: PPUSH
17594: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17595: LD_ADDR_VAR 0 2
17599: PUSH
17600: LD_INT 81
17602: PUSH
17603: LD_OWVAR 2
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: PUSH
17612: LD_INT 21
17614: PUSH
17615: LD_INT 1
17617: PUSH
17618: EMPTY
17619: LIST
17620: LIST
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: PPUSH
17626: CALL_OW 69
17630: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17631: LD_STRING playComputer()
17633: PPUSH
17634: CALL_OW 559
// if not tmp then
17638: LD_VAR 0 2
17642: NOT
17643: IFFALSE 17647
// exit ;
17645: GO 17701
// for i in tmp do
17647: LD_ADDR_VAR 0 1
17651: PUSH
17652: LD_VAR 0 2
17656: PUSH
17657: FOR_IN
17658: IFFALSE 17699
// for j := 1 to 4 do
17660: LD_ADDR_VAR 0 3
17664: PUSH
17665: DOUBLE
17666: LD_INT 1
17668: DEC
17669: ST_TO_ADDR
17670: LD_INT 4
17672: PUSH
17673: FOR_TO
17674: IFFALSE 17695
// SetSkill ( i , j , 10 ) ;
17676: LD_VAR 0 1
17680: PPUSH
17681: LD_VAR 0 3
17685: PPUSH
17686: LD_INT 10
17688: PPUSH
17689: CALL_OW 237
17693: GO 17673
17695: POP
17696: POP
17697: GO 17657
17699: POP
17700: POP
// end ;
17701: PPOPN 3
17703: END
// every 0 0$1 trigger s30 do var i , tmp ;
17704: LD_EXP 86
17708: IFFALSE 17777
17710: GO 17712
17712: DISABLE
17713: LD_INT 0
17715: PPUSH
17716: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17717: LD_ADDR_VAR 0 2
17721: PUSH
17722: LD_INT 22
17724: PUSH
17725: LD_OWVAR 2
17729: PUSH
17730: EMPTY
17731: LIST
17732: LIST
17733: PPUSH
17734: CALL_OW 69
17738: ST_TO_ADDR
// if not tmp then
17739: LD_VAR 0 2
17743: NOT
17744: IFFALSE 17748
// exit ;
17746: GO 17777
// for i in tmp do
17748: LD_ADDR_VAR 0 1
17752: PUSH
17753: LD_VAR 0 2
17757: PUSH
17758: FOR_IN
17759: IFFALSE 17775
// SetLives ( i , 300 ) ;
17761: LD_VAR 0 1
17765: PPUSH
17766: LD_INT 300
17768: PPUSH
17769: CALL_OW 234
17773: GO 17758
17775: POP
17776: POP
// end ;
17777: PPOPN 2
17779: END
// every 0 0$1 trigger s60 do var i , tmp ;
17780: LD_EXP 87
17784: IFFALSE 17853
17786: GO 17788
17788: DISABLE
17789: LD_INT 0
17791: PPUSH
17792: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17793: LD_ADDR_VAR 0 2
17797: PUSH
17798: LD_INT 22
17800: PUSH
17801: LD_OWVAR 2
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PPUSH
17810: CALL_OW 69
17814: ST_TO_ADDR
// if not tmp then
17815: LD_VAR 0 2
17819: NOT
17820: IFFALSE 17824
// exit ;
17822: GO 17853
// for i in tmp do
17824: LD_ADDR_VAR 0 1
17828: PUSH
17829: LD_VAR 0 2
17833: PUSH
17834: FOR_IN
17835: IFFALSE 17851
// SetLives ( i , 600 ) ;
17837: LD_VAR 0 1
17841: PPUSH
17842: LD_INT 600
17844: PPUSH
17845: CALL_OW 234
17849: GO 17834
17851: POP
17852: POP
// end ;
17853: PPOPN 2
17855: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17856: LD_INT 0
17858: PPUSH
// case cmd of 301 :
17859: LD_VAR 0 1
17863: PUSH
17864: LD_INT 301
17866: DOUBLE
17867: EQUAL
17868: IFTRUE 17872
17870: GO 17904
17872: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17873: LD_VAR 0 6
17877: PPUSH
17878: LD_VAR 0 7
17882: PPUSH
17883: LD_VAR 0 8
17887: PPUSH
17888: LD_VAR 0 4
17892: PPUSH
17893: LD_VAR 0 5
17897: PPUSH
17898: CALL 19113 0 5
17902: GO 18025
17904: LD_INT 302
17906: DOUBLE
17907: EQUAL
17908: IFTRUE 17912
17910: GO 17949
17912: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17913: LD_VAR 0 6
17917: PPUSH
17918: LD_VAR 0 7
17922: PPUSH
17923: LD_VAR 0 8
17927: PPUSH
17928: LD_VAR 0 9
17932: PPUSH
17933: LD_VAR 0 4
17937: PPUSH
17938: LD_VAR 0 5
17942: PPUSH
17943: CALL 19204 0 6
17947: GO 18025
17949: LD_INT 303
17951: DOUBLE
17952: EQUAL
17953: IFTRUE 17957
17955: GO 17994
17957: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17958: LD_VAR 0 6
17962: PPUSH
17963: LD_VAR 0 7
17967: PPUSH
17968: LD_VAR 0 8
17972: PPUSH
17973: LD_VAR 0 9
17977: PPUSH
17978: LD_VAR 0 4
17982: PPUSH
17983: LD_VAR 0 5
17987: PPUSH
17988: CALL 18030 0 6
17992: GO 18025
17994: LD_INT 304
17996: DOUBLE
17997: EQUAL
17998: IFTRUE 18002
18000: GO 18024
18002: POP
// hHackTeleport ( unit , x , y ) ; end ;
18003: LD_VAR 0 2
18007: PPUSH
18008: LD_VAR 0 4
18012: PPUSH
18013: LD_VAR 0 5
18017: PPUSH
18018: CALL 19797 0 3
18022: GO 18025
18024: POP
// end ;
18025: LD_VAR 0 12
18029: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18030: LD_INT 0
18032: PPUSH
18033: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18034: LD_VAR 0 1
18038: PUSH
18039: LD_INT 1
18041: LESS
18042: PUSH
18043: LD_VAR 0 1
18047: PUSH
18048: LD_INT 3
18050: GREATER
18051: OR
18052: PUSH
18053: LD_VAR 0 5
18057: PPUSH
18058: LD_VAR 0 6
18062: PPUSH
18063: CALL_OW 428
18067: OR
18068: IFFALSE 18072
// exit ;
18070: GO 18800
// uc_side := your_side ;
18072: LD_ADDR_OWVAR 20
18076: PUSH
18077: LD_OWVAR 2
18081: ST_TO_ADDR
// uc_nation := nation ;
18082: LD_ADDR_OWVAR 21
18086: PUSH
18087: LD_VAR 0 1
18091: ST_TO_ADDR
// bc_level = 1 ;
18092: LD_ADDR_OWVAR 43
18096: PUSH
18097: LD_INT 1
18099: ST_TO_ADDR
// case btype of 1 :
18100: LD_VAR 0 2
18104: PUSH
18105: LD_INT 1
18107: DOUBLE
18108: EQUAL
18109: IFTRUE 18113
18111: GO 18124
18113: POP
// bc_type := b_depot ; 2 :
18114: LD_ADDR_OWVAR 42
18118: PUSH
18119: LD_INT 0
18121: ST_TO_ADDR
18122: GO 18744
18124: LD_INT 2
18126: DOUBLE
18127: EQUAL
18128: IFTRUE 18132
18130: GO 18143
18132: POP
// bc_type := b_warehouse ; 3 :
18133: LD_ADDR_OWVAR 42
18137: PUSH
18138: LD_INT 1
18140: ST_TO_ADDR
18141: GO 18744
18143: LD_INT 3
18145: DOUBLE
18146: EQUAL
18147: IFTRUE 18151
18149: GO 18162
18151: POP
// bc_type := b_lab ; 4 .. 9 :
18152: LD_ADDR_OWVAR 42
18156: PUSH
18157: LD_INT 6
18159: ST_TO_ADDR
18160: GO 18744
18162: LD_INT 4
18164: DOUBLE
18165: GREATEREQUAL
18166: IFFALSE 18174
18168: LD_INT 9
18170: DOUBLE
18171: LESSEQUAL
18172: IFTRUE 18176
18174: GO 18236
18176: POP
// begin bc_type := b_lab_half ;
18177: LD_ADDR_OWVAR 42
18181: PUSH
18182: LD_INT 7
18184: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18185: LD_ADDR_OWVAR 44
18189: PUSH
18190: LD_INT 10
18192: PUSH
18193: LD_INT 11
18195: PUSH
18196: LD_INT 12
18198: PUSH
18199: LD_INT 15
18201: PUSH
18202: LD_INT 14
18204: PUSH
18205: LD_INT 13
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: PUSH
18216: LD_VAR 0 2
18220: PUSH
18221: LD_INT 3
18223: MINUS
18224: ARRAY
18225: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
18226: LD_ADDR_OWVAR 45
18230: PUSH
18231: LD_INT 9
18233: ST_TO_ADDR
// end ; 10 .. 13 :
18234: GO 18744
18236: LD_INT 10
18238: DOUBLE
18239: GREATEREQUAL
18240: IFFALSE 18248
18242: LD_INT 13
18244: DOUBLE
18245: LESSEQUAL
18246: IFTRUE 18250
18248: GO 18327
18250: POP
// begin bc_type := b_lab_full ;
18251: LD_ADDR_OWVAR 42
18255: PUSH
18256: LD_INT 8
18258: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18259: LD_ADDR_OWVAR 44
18263: PUSH
18264: LD_INT 10
18266: PUSH
18267: LD_INT 12
18269: PUSH
18270: LD_INT 14
18272: PUSH
18273: LD_INT 13
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: PUSH
18282: LD_VAR 0 2
18286: PUSH
18287: LD_INT 9
18289: MINUS
18290: ARRAY
18291: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18292: LD_ADDR_OWVAR 45
18296: PUSH
18297: LD_INT 11
18299: PUSH
18300: LD_INT 15
18302: PUSH
18303: LD_INT 12
18305: PUSH
18306: LD_INT 15
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: PUSH
18315: LD_VAR 0 2
18319: PUSH
18320: LD_INT 9
18322: MINUS
18323: ARRAY
18324: ST_TO_ADDR
// end ; 14 :
18325: GO 18744
18327: LD_INT 14
18329: DOUBLE
18330: EQUAL
18331: IFTRUE 18335
18333: GO 18346
18335: POP
// bc_type := b_workshop ; 15 :
18336: LD_ADDR_OWVAR 42
18340: PUSH
18341: LD_INT 2
18343: ST_TO_ADDR
18344: GO 18744
18346: LD_INT 15
18348: DOUBLE
18349: EQUAL
18350: IFTRUE 18354
18352: GO 18365
18354: POP
// bc_type := b_factory ; 16 :
18355: LD_ADDR_OWVAR 42
18359: PUSH
18360: LD_INT 3
18362: ST_TO_ADDR
18363: GO 18744
18365: LD_INT 16
18367: DOUBLE
18368: EQUAL
18369: IFTRUE 18373
18371: GO 18384
18373: POP
// bc_type := b_ext_gun ; 17 :
18374: LD_ADDR_OWVAR 42
18378: PUSH
18379: LD_INT 17
18381: ST_TO_ADDR
18382: GO 18744
18384: LD_INT 17
18386: DOUBLE
18387: EQUAL
18388: IFTRUE 18392
18390: GO 18420
18392: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
18393: LD_ADDR_OWVAR 42
18397: PUSH
18398: LD_INT 19
18400: PUSH
18401: LD_INT 23
18403: PUSH
18404: LD_INT 19
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: LIST
18411: PUSH
18412: LD_VAR 0 1
18416: ARRAY
18417: ST_TO_ADDR
18418: GO 18744
18420: LD_INT 18
18422: DOUBLE
18423: EQUAL
18424: IFTRUE 18428
18426: GO 18439
18428: POP
// bc_type := b_ext_radar ; 19 :
18429: LD_ADDR_OWVAR 42
18433: PUSH
18434: LD_INT 20
18436: ST_TO_ADDR
18437: GO 18744
18439: LD_INT 19
18441: DOUBLE
18442: EQUAL
18443: IFTRUE 18447
18445: GO 18458
18447: POP
// bc_type := b_ext_radio ; 20 :
18448: LD_ADDR_OWVAR 42
18452: PUSH
18453: LD_INT 22
18455: ST_TO_ADDR
18456: GO 18744
18458: LD_INT 20
18460: DOUBLE
18461: EQUAL
18462: IFTRUE 18466
18464: GO 18477
18466: POP
// bc_type := b_ext_siberium ; 21 :
18467: LD_ADDR_OWVAR 42
18471: PUSH
18472: LD_INT 21
18474: ST_TO_ADDR
18475: GO 18744
18477: LD_INT 21
18479: DOUBLE
18480: EQUAL
18481: IFTRUE 18485
18483: GO 18496
18485: POP
// bc_type := b_ext_computer ; 22 :
18486: LD_ADDR_OWVAR 42
18490: PUSH
18491: LD_INT 24
18493: ST_TO_ADDR
18494: GO 18744
18496: LD_INT 22
18498: DOUBLE
18499: EQUAL
18500: IFTRUE 18504
18502: GO 18515
18504: POP
// bc_type := b_ext_track ; 23 :
18505: LD_ADDR_OWVAR 42
18509: PUSH
18510: LD_INT 16
18512: ST_TO_ADDR
18513: GO 18744
18515: LD_INT 23
18517: DOUBLE
18518: EQUAL
18519: IFTRUE 18523
18521: GO 18534
18523: POP
// bc_type := b_ext_laser ; 24 :
18524: LD_ADDR_OWVAR 42
18528: PUSH
18529: LD_INT 25
18531: ST_TO_ADDR
18532: GO 18744
18534: LD_INT 24
18536: DOUBLE
18537: EQUAL
18538: IFTRUE 18542
18540: GO 18553
18542: POP
// bc_type := b_control_tower ; 25 :
18543: LD_ADDR_OWVAR 42
18547: PUSH
18548: LD_INT 36
18550: ST_TO_ADDR
18551: GO 18744
18553: LD_INT 25
18555: DOUBLE
18556: EQUAL
18557: IFTRUE 18561
18559: GO 18572
18561: POP
// bc_type := b_breastwork ; 26 :
18562: LD_ADDR_OWVAR 42
18566: PUSH
18567: LD_INT 31
18569: ST_TO_ADDR
18570: GO 18744
18572: LD_INT 26
18574: DOUBLE
18575: EQUAL
18576: IFTRUE 18580
18578: GO 18591
18580: POP
// bc_type := b_bunker ; 27 :
18581: LD_ADDR_OWVAR 42
18585: PUSH
18586: LD_INT 32
18588: ST_TO_ADDR
18589: GO 18744
18591: LD_INT 27
18593: DOUBLE
18594: EQUAL
18595: IFTRUE 18599
18597: GO 18610
18599: POP
// bc_type := b_turret ; 28 :
18600: LD_ADDR_OWVAR 42
18604: PUSH
18605: LD_INT 33
18607: ST_TO_ADDR
18608: GO 18744
18610: LD_INT 28
18612: DOUBLE
18613: EQUAL
18614: IFTRUE 18618
18616: GO 18629
18618: POP
// bc_type := b_armoury ; 29 :
18619: LD_ADDR_OWVAR 42
18623: PUSH
18624: LD_INT 4
18626: ST_TO_ADDR
18627: GO 18744
18629: LD_INT 29
18631: DOUBLE
18632: EQUAL
18633: IFTRUE 18637
18635: GO 18648
18637: POP
// bc_type := b_barracks ; 30 :
18638: LD_ADDR_OWVAR 42
18642: PUSH
18643: LD_INT 5
18645: ST_TO_ADDR
18646: GO 18744
18648: LD_INT 30
18650: DOUBLE
18651: EQUAL
18652: IFTRUE 18656
18654: GO 18667
18656: POP
// bc_type := b_solar_power ; 31 :
18657: LD_ADDR_OWVAR 42
18661: PUSH
18662: LD_INT 27
18664: ST_TO_ADDR
18665: GO 18744
18667: LD_INT 31
18669: DOUBLE
18670: EQUAL
18671: IFTRUE 18675
18673: GO 18686
18675: POP
// bc_type := b_oil_power ; 32 :
18676: LD_ADDR_OWVAR 42
18680: PUSH
18681: LD_INT 26
18683: ST_TO_ADDR
18684: GO 18744
18686: LD_INT 32
18688: DOUBLE
18689: EQUAL
18690: IFTRUE 18694
18692: GO 18705
18694: POP
// bc_type := b_siberite_power ; 33 :
18695: LD_ADDR_OWVAR 42
18699: PUSH
18700: LD_INT 28
18702: ST_TO_ADDR
18703: GO 18744
18705: LD_INT 33
18707: DOUBLE
18708: EQUAL
18709: IFTRUE 18713
18711: GO 18724
18713: POP
// bc_type := b_oil_mine ; 34 :
18714: LD_ADDR_OWVAR 42
18718: PUSH
18719: LD_INT 29
18721: ST_TO_ADDR
18722: GO 18744
18724: LD_INT 34
18726: DOUBLE
18727: EQUAL
18728: IFTRUE 18732
18730: GO 18743
18732: POP
// bc_type := b_siberite_mine ; end ;
18733: LD_ADDR_OWVAR 42
18737: PUSH
18738: LD_INT 30
18740: ST_TO_ADDR
18741: GO 18744
18743: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18744: LD_ADDR_VAR 0 8
18748: PUSH
18749: LD_VAR 0 5
18753: PPUSH
18754: LD_VAR 0 6
18758: PPUSH
18759: LD_VAR 0 3
18763: PPUSH
18764: CALL_OW 47
18768: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18769: LD_OWVAR 42
18773: PUSH
18774: LD_INT 32
18776: PUSH
18777: LD_INT 33
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: IN
18784: IFFALSE 18800
// PlaceWeaponTurret ( b , weapon ) ;
18786: LD_VAR 0 8
18790: PPUSH
18791: LD_VAR 0 4
18795: PPUSH
18796: CALL_OW 431
// end ;
18800: LD_VAR 0 7
18804: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18805: LD_INT 0
18807: PPUSH
18808: PPUSH
18809: PPUSH
18810: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18811: LD_ADDR_VAR 0 4
18815: PUSH
18816: LD_INT 22
18818: PUSH
18819: LD_OWVAR 2
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: PUSH
18828: LD_INT 2
18830: PUSH
18831: LD_INT 30
18833: PUSH
18834: LD_INT 0
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: PUSH
18841: LD_INT 30
18843: PUSH
18844: LD_INT 1
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: LIST
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: PPUSH
18860: CALL_OW 69
18864: ST_TO_ADDR
// if not tmp then
18865: LD_VAR 0 4
18869: NOT
18870: IFFALSE 18874
// exit ;
18872: GO 18933
// for i in tmp do
18874: LD_ADDR_VAR 0 2
18878: PUSH
18879: LD_VAR 0 4
18883: PUSH
18884: FOR_IN
18885: IFFALSE 18931
// for j = 1 to 3 do
18887: LD_ADDR_VAR 0 3
18891: PUSH
18892: DOUBLE
18893: LD_INT 1
18895: DEC
18896: ST_TO_ADDR
18897: LD_INT 3
18899: PUSH
18900: FOR_TO
18901: IFFALSE 18927
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18903: LD_VAR 0 2
18907: PPUSH
18908: CALL_OW 274
18912: PPUSH
18913: LD_VAR 0 3
18917: PPUSH
18918: LD_INT 99999
18920: PPUSH
18921: CALL_OW 277
18925: GO 18900
18927: POP
18928: POP
18929: GO 18884
18931: POP
18932: POP
// end ;
18933: LD_VAR 0 1
18937: RET
// export function hHackSetLevel10 ; var i , j ; begin
18938: LD_INT 0
18940: PPUSH
18941: PPUSH
18942: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18943: LD_ADDR_VAR 0 2
18947: PUSH
18948: LD_INT 21
18950: PUSH
18951: LD_INT 1
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: PPUSH
18958: CALL_OW 69
18962: PUSH
18963: FOR_IN
18964: IFFALSE 19016
// if IsSelected ( i ) then
18966: LD_VAR 0 2
18970: PPUSH
18971: CALL_OW 306
18975: IFFALSE 19014
// begin for j := 1 to 4 do
18977: LD_ADDR_VAR 0 3
18981: PUSH
18982: DOUBLE
18983: LD_INT 1
18985: DEC
18986: ST_TO_ADDR
18987: LD_INT 4
18989: PUSH
18990: FOR_TO
18991: IFFALSE 19012
// SetSkill ( i , j , 10 ) ;
18993: LD_VAR 0 2
18997: PPUSH
18998: LD_VAR 0 3
19002: PPUSH
19003: LD_INT 10
19005: PPUSH
19006: CALL_OW 237
19010: GO 18990
19012: POP
19013: POP
// end ;
19014: GO 18963
19016: POP
19017: POP
// end ;
19018: LD_VAR 0 1
19022: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19023: LD_INT 0
19025: PPUSH
19026: PPUSH
19027: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19028: LD_ADDR_VAR 0 2
19032: PUSH
19033: LD_INT 22
19035: PUSH
19036: LD_OWVAR 2
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: PUSH
19045: LD_INT 21
19047: PUSH
19048: LD_INT 1
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: PPUSH
19059: CALL_OW 69
19063: PUSH
19064: FOR_IN
19065: IFFALSE 19106
// begin for j := 1 to 4 do
19067: LD_ADDR_VAR 0 3
19071: PUSH
19072: DOUBLE
19073: LD_INT 1
19075: DEC
19076: ST_TO_ADDR
19077: LD_INT 4
19079: PUSH
19080: FOR_TO
19081: IFFALSE 19102
// SetSkill ( i , j , 10 ) ;
19083: LD_VAR 0 2
19087: PPUSH
19088: LD_VAR 0 3
19092: PPUSH
19093: LD_INT 10
19095: PPUSH
19096: CALL_OW 237
19100: GO 19080
19102: POP
19103: POP
// end ;
19104: GO 19064
19106: POP
19107: POP
// end ;
19108: LD_VAR 0 1
19112: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19113: LD_INT 0
19115: PPUSH
// uc_side := your_side ;
19116: LD_ADDR_OWVAR 20
19120: PUSH
19121: LD_OWVAR 2
19125: ST_TO_ADDR
// uc_nation := nation ;
19126: LD_ADDR_OWVAR 21
19130: PUSH
19131: LD_VAR 0 1
19135: ST_TO_ADDR
// InitHc ;
19136: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19140: LD_INT 0
19142: PPUSH
19143: LD_VAR 0 2
19147: PPUSH
19148: LD_VAR 0 3
19152: PPUSH
19153: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19157: LD_VAR 0 4
19161: PPUSH
19162: LD_VAR 0 5
19166: PPUSH
19167: CALL_OW 428
19171: PUSH
19172: LD_INT 0
19174: EQUAL
19175: IFFALSE 19199
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19177: CALL_OW 44
19181: PPUSH
19182: LD_VAR 0 4
19186: PPUSH
19187: LD_VAR 0 5
19191: PPUSH
19192: LD_INT 1
19194: PPUSH
19195: CALL_OW 48
// end ;
19199: LD_VAR 0 6
19203: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19204: LD_INT 0
19206: PPUSH
19207: PPUSH
// uc_side := your_side ;
19208: LD_ADDR_OWVAR 20
19212: PUSH
19213: LD_OWVAR 2
19217: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19218: LD_VAR 0 1
19222: PUSH
19223: LD_INT 1
19225: PUSH
19226: LD_INT 2
19228: PUSH
19229: LD_INT 3
19231: PUSH
19232: LD_INT 4
19234: PUSH
19235: LD_INT 5
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: IN
19245: IFFALSE 19257
// uc_nation := nation_american else
19247: LD_ADDR_OWVAR 21
19251: PUSH
19252: LD_INT 1
19254: ST_TO_ADDR
19255: GO 19300
// if chassis in [ 11 , 12 , 13 , 14 ] then
19257: LD_VAR 0 1
19261: PUSH
19262: LD_INT 11
19264: PUSH
19265: LD_INT 12
19267: PUSH
19268: LD_INT 13
19270: PUSH
19271: LD_INT 14
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: IN
19280: IFFALSE 19292
// uc_nation := nation_arabian else
19282: LD_ADDR_OWVAR 21
19286: PUSH
19287: LD_INT 2
19289: ST_TO_ADDR
19290: GO 19300
// uc_nation := nation_russian ;
19292: LD_ADDR_OWVAR 21
19296: PUSH
19297: LD_INT 3
19299: ST_TO_ADDR
// vc_chassis := chassis ;
19300: LD_ADDR_OWVAR 37
19304: PUSH
19305: LD_VAR 0 1
19309: ST_TO_ADDR
// vc_engine := engine ;
19310: LD_ADDR_OWVAR 39
19314: PUSH
19315: LD_VAR 0 2
19319: ST_TO_ADDR
// vc_control := control ;
19320: LD_ADDR_OWVAR 38
19324: PUSH
19325: LD_VAR 0 3
19329: ST_TO_ADDR
// vc_weapon := weapon ;
19330: LD_ADDR_OWVAR 40
19334: PUSH
19335: LD_VAR 0 4
19339: ST_TO_ADDR
// un := CreateVehicle ;
19340: LD_ADDR_VAR 0 8
19344: PUSH
19345: CALL_OW 45
19349: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19350: LD_VAR 0 8
19354: PPUSH
19355: LD_INT 0
19357: PPUSH
19358: LD_INT 5
19360: PPUSH
19361: CALL_OW 12
19365: PPUSH
19366: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
19370: LD_VAR 0 8
19374: PPUSH
19375: LD_VAR 0 5
19379: PPUSH
19380: LD_VAR 0 6
19384: PPUSH
19385: LD_INT 1
19387: PPUSH
19388: CALL_OW 48
// end ;
19392: LD_VAR 0 7
19396: RET
// export hInvincible ; every 1 do
19397: GO 19399
19399: DISABLE
// hInvincible := [ ] ;
19400: LD_ADDR_EXP 88
19404: PUSH
19405: EMPTY
19406: ST_TO_ADDR
19407: END
// every 10 do var i ;
19408: GO 19410
19410: DISABLE
19411: LD_INT 0
19413: PPUSH
// begin enable ;
19414: ENABLE
// if not hInvincible then
19415: LD_EXP 88
19419: NOT
19420: IFFALSE 19424
// exit ;
19422: GO 19468
// for i in hInvincible do
19424: LD_ADDR_VAR 0 1
19428: PUSH
19429: LD_EXP 88
19433: PUSH
19434: FOR_IN
19435: IFFALSE 19466
// if GetLives ( i ) < 1000 then
19437: LD_VAR 0 1
19441: PPUSH
19442: CALL_OW 256
19446: PUSH
19447: LD_INT 1000
19449: LESS
19450: IFFALSE 19464
// SetLives ( i , 1000 ) ;
19452: LD_VAR 0 1
19456: PPUSH
19457: LD_INT 1000
19459: PPUSH
19460: CALL_OW 234
19464: GO 19434
19466: POP
19467: POP
// end ;
19468: PPOPN 1
19470: END
// export function hHackInvincible ; var i ; begin
19471: LD_INT 0
19473: PPUSH
19474: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
19475: LD_ADDR_VAR 0 2
19479: PUSH
19480: LD_INT 2
19482: PUSH
19483: LD_INT 21
19485: PUSH
19486: LD_INT 1
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: PUSH
19493: LD_INT 21
19495: PUSH
19496: LD_INT 2
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: LIST
19507: PPUSH
19508: CALL_OW 69
19512: PUSH
19513: FOR_IN
19514: IFFALSE 19575
// if IsSelected ( i ) then
19516: LD_VAR 0 2
19520: PPUSH
19521: CALL_OW 306
19525: IFFALSE 19573
// begin if i in hInvincible then
19527: LD_VAR 0 2
19531: PUSH
19532: LD_EXP 88
19536: IN
19537: IFFALSE 19557
// hInvincible := hInvincible diff i else
19539: LD_ADDR_EXP 88
19543: PUSH
19544: LD_EXP 88
19548: PUSH
19549: LD_VAR 0 2
19553: DIFF
19554: ST_TO_ADDR
19555: GO 19573
// hInvincible := hInvincible union i ;
19557: LD_ADDR_EXP 88
19561: PUSH
19562: LD_EXP 88
19566: PUSH
19567: LD_VAR 0 2
19571: UNION
19572: ST_TO_ADDR
// end ;
19573: GO 19513
19575: POP
19576: POP
// end ;
19577: LD_VAR 0 1
19581: RET
// export function hHackInvisible ; var i , j ; begin
19582: LD_INT 0
19584: PPUSH
19585: PPUSH
19586: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19587: LD_ADDR_VAR 0 2
19591: PUSH
19592: LD_INT 21
19594: PUSH
19595: LD_INT 1
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PPUSH
19602: CALL_OW 69
19606: PUSH
19607: FOR_IN
19608: IFFALSE 19632
// if IsSelected ( i ) then
19610: LD_VAR 0 2
19614: PPUSH
19615: CALL_OW 306
19619: IFFALSE 19630
// ComForceInvisible ( i ) ;
19621: LD_VAR 0 2
19625: PPUSH
19626: CALL_OW 496
19630: GO 19607
19632: POP
19633: POP
// end ;
19634: LD_VAR 0 1
19638: RET
// export function hHackChangeYourSide ; begin
19639: LD_INT 0
19641: PPUSH
// if your_side = 8 then
19642: LD_OWVAR 2
19646: PUSH
19647: LD_INT 8
19649: EQUAL
19650: IFFALSE 19662
// your_side := 0 else
19652: LD_ADDR_OWVAR 2
19656: PUSH
19657: LD_INT 0
19659: ST_TO_ADDR
19660: GO 19676
// your_side := your_side + 1 ;
19662: LD_ADDR_OWVAR 2
19666: PUSH
19667: LD_OWVAR 2
19671: PUSH
19672: LD_INT 1
19674: PLUS
19675: ST_TO_ADDR
// end ;
19676: LD_VAR 0 1
19680: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19681: LD_INT 0
19683: PPUSH
19684: PPUSH
19685: PPUSH
// for i in all_units do
19686: LD_ADDR_VAR 0 2
19690: PUSH
19691: LD_OWVAR 3
19695: PUSH
19696: FOR_IN
19697: IFFALSE 19775
// if IsSelected ( i ) then
19699: LD_VAR 0 2
19703: PPUSH
19704: CALL_OW 306
19708: IFFALSE 19773
// begin j := GetSide ( i ) ;
19710: LD_ADDR_VAR 0 3
19714: PUSH
19715: LD_VAR 0 2
19719: PPUSH
19720: CALL_OW 255
19724: ST_TO_ADDR
// if j = 8 then
19725: LD_VAR 0 3
19729: PUSH
19730: LD_INT 8
19732: EQUAL
19733: IFFALSE 19745
// j := 0 else
19735: LD_ADDR_VAR 0 3
19739: PUSH
19740: LD_INT 0
19742: ST_TO_ADDR
19743: GO 19759
// j := j + 1 ;
19745: LD_ADDR_VAR 0 3
19749: PUSH
19750: LD_VAR 0 3
19754: PUSH
19755: LD_INT 1
19757: PLUS
19758: ST_TO_ADDR
// SetSide ( i , j ) ;
19759: LD_VAR 0 2
19763: PPUSH
19764: LD_VAR 0 3
19768: PPUSH
19769: CALL_OW 235
// end ;
19773: GO 19696
19775: POP
19776: POP
// end ;
19777: LD_VAR 0 1
19781: RET
// export function hHackFog ; begin
19782: LD_INT 0
19784: PPUSH
// FogOff ( true ) ;
19785: LD_INT 1
19787: PPUSH
19788: CALL_OW 344
// end ;
19792: LD_VAR 0 1
19796: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19797: LD_INT 0
19799: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19800: LD_VAR 0 1
19804: PPUSH
19805: LD_VAR 0 2
19809: PPUSH
19810: LD_VAR 0 3
19814: PPUSH
19815: LD_INT 1
19817: PPUSH
19818: LD_INT 1
19820: PPUSH
19821: CALL_OW 483
// CenterOnXY ( x , y ) ;
19825: LD_VAR 0 2
19829: PPUSH
19830: LD_VAR 0 3
19834: PPUSH
19835: CALL_OW 84
// end ;
19839: LD_VAR 0 4
19843: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19844: LD_INT 0
19846: PPUSH
19847: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19848: LD_VAR 0 1
19852: NOT
19853: PUSH
19854: LD_VAR 0 2
19858: PPUSH
19859: LD_VAR 0 3
19863: PPUSH
19864: CALL_OW 488
19868: NOT
19869: OR
19870: PUSH
19871: LD_VAR 0 1
19875: PPUSH
19876: CALL_OW 266
19880: PUSH
19881: LD_INT 3
19883: NONEQUAL
19884: PUSH
19885: LD_VAR 0 1
19889: PPUSH
19890: CALL_OW 247
19894: PUSH
19895: LD_INT 1
19897: EQUAL
19898: NOT
19899: AND
19900: OR
19901: IFFALSE 19905
// exit ;
19903: GO 20054
// if GetType ( factory ) = unit_human then
19905: LD_VAR 0 1
19909: PPUSH
19910: CALL_OW 247
19914: PUSH
19915: LD_INT 1
19917: EQUAL
19918: IFFALSE 19935
// factory := IsInUnit ( factory ) ;
19920: LD_ADDR_VAR 0 1
19924: PUSH
19925: LD_VAR 0 1
19929: PPUSH
19930: CALL_OW 310
19934: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
19935: LD_VAR 0 1
19939: PPUSH
19940: CALL_OW 266
19944: PUSH
19945: LD_INT 3
19947: NONEQUAL
19948: IFFALSE 19952
// exit ;
19950: GO 20054
// if HexInfo ( x , y ) = factory then
19952: LD_VAR 0 2
19956: PPUSH
19957: LD_VAR 0 3
19961: PPUSH
19962: CALL_OW 428
19966: PUSH
19967: LD_VAR 0 1
19971: EQUAL
19972: IFFALSE 19999
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
19974: LD_ADDR_EXP 89
19978: PUSH
19979: LD_EXP 89
19983: PPUSH
19984: LD_VAR 0 1
19988: PPUSH
19989: LD_INT 0
19991: PPUSH
19992: CALL_OW 1
19996: ST_TO_ADDR
19997: GO 20050
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
19999: LD_ADDR_EXP 89
20003: PUSH
20004: LD_EXP 89
20008: PPUSH
20009: LD_VAR 0 1
20013: PPUSH
20014: LD_VAR 0 1
20018: PPUSH
20019: CALL_OW 255
20023: PUSH
20024: LD_VAR 0 1
20028: PUSH
20029: LD_VAR 0 2
20033: PUSH
20034: LD_VAR 0 3
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: PPUSH
20045: CALL_OW 1
20049: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20050: CALL 20059 0 0
// end ;
20054: LD_VAR 0 4
20058: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
20059: LD_INT 0
20061: PPUSH
20062: PPUSH
20063: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
20064: LD_STRING resetFactoryWaypoint();
20066: PPUSH
20067: CALL_OW 559
// if factoryWaypoints then
20071: LD_EXP 89
20075: IFFALSE 20201
// begin list := PrepareArray ( factoryWaypoints ) ;
20077: LD_ADDR_VAR 0 3
20081: PUSH
20082: LD_EXP 89
20086: PPUSH
20087: CALL 67661 0 1
20091: ST_TO_ADDR
// for i := 1 to list do
20092: LD_ADDR_VAR 0 2
20096: PUSH
20097: DOUBLE
20098: LD_INT 1
20100: DEC
20101: ST_TO_ADDR
20102: LD_VAR 0 3
20106: PUSH
20107: FOR_TO
20108: IFFALSE 20199
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20110: LD_STRING setFactoryWaypointXY(
20112: PUSH
20113: LD_VAR 0 3
20117: PUSH
20118: LD_VAR 0 2
20122: ARRAY
20123: PUSH
20124: LD_INT 1
20126: ARRAY
20127: STR
20128: PUSH
20129: LD_STRING ,
20131: STR
20132: PUSH
20133: LD_VAR 0 3
20137: PUSH
20138: LD_VAR 0 2
20142: ARRAY
20143: PUSH
20144: LD_INT 2
20146: ARRAY
20147: STR
20148: PUSH
20149: LD_STRING ,
20151: STR
20152: PUSH
20153: LD_VAR 0 3
20157: PUSH
20158: LD_VAR 0 2
20162: ARRAY
20163: PUSH
20164: LD_INT 3
20166: ARRAY
20167: STR
20168: PUSH
20169: LD_STRING ,
20171: STR
20172: PUSH
20173: LD_VAR 0 3
20177: PUSH
20178: LD_VAR 0 2
20182: ARRAY
20183: PUSH
20184: LD_INT 4
20186: ARRAY
20187: STR
20188: PUSH
20189: LD_STRING )
20191: STR
20192: PPUSH
20193: CALL_OW 559
20197: GO 20107
20199: POP
20200: POP
// end ; end ;
20201: LD_VAR 0 1
20205: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
20206: LD_INT 0
20208: PPUSH
// if HexInfo ( x , y ) = warehouse then
20209: LD_VAR 0 2
20213: PPUSH
20214: LD_VAR 0 3
20218: PPUSH
20219: CALL_OW 428
20223: PUSH
20224: LD_VAR 0 1
20228: EQUAL
20229: IFFALSE 20256
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
20231: LD_ADDR_EXP 90
20235: PUSH
20236: LD_EXP 90
20240: PPUSH
20241: LD_VAR 0 1
20245: PPUSH
20246: LD_INT 0
20248: PPUSH
20249: CALL_OW 1
20253: ST_TO_ADDR
20254: GO 20307
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
20256: LD_ADDR_EXP 90
20260: PUSH
20261: LD_EXP 90
20265: PPUSH
20266: LD_VAR 0 1
20270: PPUSH
20271: LD_VAR 0 1
20275: PPUSH
20276: CALL_OW 255
20280: PUSH
20281: LD_VAR 0 1
20285: PUSH
20286: LD_VAR 0 2
20290: PUSH
20291: LD_VAR 0 3
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: PPUSH
20302: CALL_OW 1
20306: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
20307: CALL 20316 0 0
// end ;
20311: LD_VAR 0 4
20315: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
20316: LD_INT 0
20318: PPUSH
20319: PPUSH
20320: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
20321: LD_STRING resetWarehouseGatheringPoints();
20323: PPUSH
20324: CALL_OW 559
// if warehouseGatheringPoints then
20328: LD_EXP 90
20332: IFFALSE 20458
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
20334: LD_ADDR_VAR 0 3
20338: PUSH
20339: LD_EXP 90
20343: PPUSH
20344: CALL 67661 0 1
20348: ST_TO_ADDR
// for i := 1 to list do
20349: LD_ADDR_VAR 0 2
20353: PUSH
20354: DOUBLE
20355: LD_INT 1
20357: DEC
20358: ST_TO_ADDR
20359: LD_VAR 0 3
20363: PUSH
20364: FOR_TO
20365: IFFALSE 20456
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20367: LD_STRING setWarehouseGatheringPointXY(
20369: PUSH
20370: LD_VAR 0 3
20374: PUSH
20375: LD_VAR 0 2
20379: ARRAY
20380: PUSH
20381: LD_INT 1
20383: ARRAY
20384: STR
20385: PUSH
20386: LD_STRING ,
20388: STR
20389: PUSH
20390: LD_VAR 0 3
20394: PUSH
20395: LD_VAR 0 2
20399: ARRAY
20400: PUSH
20401: LD_INT 2
20403: ARRAY
20404: STR
20405: PUSH
20406: LD_STRING ,
20408: STR
20409: PUSH
20410: LD_VAR 0 3
20414: PUSH
20415: LD_VAR 0 2
20419: ARRAY
20420: PUSH
20421: LD_INT 3
20423: ARRAY
20424: STR
20425: PUSH
20426: LD_STRING ,
20428: STR
20429: PUSH
20430: LD_VAR 0 3
20434: PUSH
20435: LD_VAR 0 2
20439: ARRAY
20440: PUSH
20441: LD_INT 4
20443: ARRAY
20444: STR
20445: PUSH
20446: LD_STRING )
20448: STR
20449: PPUSH
20450: CALL_OW 559
20454: GO 20364
20456: POP
20457: POP
// end ; end ;
20458: LD_VAR 0 1
20462: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
20463: LD_EXP 90
20467: IFFALSE 21152
20469: GO 20471
20471: DISABLE
20472: LD_INT 0
20474: PPUSH
20475: PPUSH
20476: PPUSH
20477: PPUSH
20478: PPUSH
20479: PPUSH
20480: PPUSH
20481: PPUSH
20482: PPUSH
// begin enable ;
20483: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
20484: LD_ADDR_VAR 0 3
20488: PUSH
20489: LD_EXP 90
20493: PPUSH
20494: CALL 67661 0 1
20498: ST_TO_ADDR
// if not list then
20499: LD_VAR 0 3
20503: NOT
20504: IFFALSE 20508
// exit ;
20506: GO 21152
// for i := 1 to list do
20508: LD_ADDR_VAR 0 1
20512: PUSH
20513: DOUBLE
20514: LD_INT 1
20516: DEC
20517: ST_TO_ADDR
20518: LD_VAR 0 3
20522: PUSH
20523: FOR_TO
20524: IFFALSE 21150
// begin depot := list [ i ] [ 2 ] ;
20526: LD_ADDR_VAR 0 8
20530: PUSH
20531: LD_VAR 0 3
20535: PUSH
20536: LD_VAR 0 1
20540: ARRAY
20541: PUSH
20542: LD_INT 2
20544: ARRAY
20545: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
20546: LD_ADDR_VAR 0 5
20550: PUSH
20551: LD_VAR 0 3
20555: PUSH
20556: LD_VAR 0 1
20560: ARRAY
20561: PUSH
20562: LD_INT 1
20564: ARRAY
20565: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
20566: LD_VAR 0 8
20570: PPUSH
20571: CALL_OW 301
20575: PUSH
20576: LD_VAR 0 5
20580: PUSH
20581: LD_VAR 0 8
20585: PPUSH
20586: CALL_OW 255
20590: NONEQUAL
20591: OR
20592: IFFALSE 20621
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
20594: LD_ADDR_EXP 90
20598: PUSH
20599: LD_EXP 90
20603: PPUSH
20604: LD_VAR 0 8
20608: PPUSH
20609: LD_INT 0
20611: PPUSH
20612: CALL_OW 1
20616: ST_TO_ADDR
// exit ;
20617: POP
20618: POP
20619: GO 21152
// end ; x := list [ i ] [ 3 ] ;
20621: LD_ADDR_VAR 0 6
20625: PUSH
20626: LD_VAR 0 3
20630: PUSH
20631: LD_VAR 0 1
20635: ARRAY
20636: PUSH
20637: LD_INT 3
20639: ARRAY
20640: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
20641: LD_ADDR_VAR 0 7
20645: PUSH
20646: LD_VAR 0 3
20650: PUSH
20651: LD_VAR 0 1
20655: ARRAY
20656: PUSH
20657: LD_INT 4
20659: ARRAY
20660: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
20661: LD_ADDR_VAR 0 9
20665: PUSH
20666: LD_VAR 0 6
20670: PPUSH
20671: LD_VAR 0 7
20675: PPUSH
20676: LD_INT 16
20678: PPUSH
20679: CALL 66249 0 3
20683: ST_TO_ADDR
// if not cratesNearbyPoint then
20684: LD_VAR 0 9
20688: NOT
20689: IFFALSE 20695
// exit ;
20691: POP
20692: POP
20693: GO 21152
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
20695: LD_ADDR_VAR 0 4
20699: PUSH
20700: LD_INT 22
20702: PUSH
20703: LD_VAR 0 5
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: PUSH
20712: LD_INT 3
20714: PUSH
20715: LD_INT 60
20717: PUSH
20718: EMPTY
20719: LIST
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: PUSH
20725: LD_INT 91
20727: PUSH
20728: LD_VAR 0 8
20732: PUSH
20733: LD_INT 6
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: LIST
20740: PUSH
20741: LD_INT 2
20743: PUSH
20744: LD_INT 25
20746: PUSH
20747: LD_INT 2
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: PUSH
20754: LD_INT 25
20756: PUSH
20757: LD_INT 16
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: LIST
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: PPUSH
20775: CALL_OW 69
20779: PUSH
20780: LD_VAR 0 8
20784: PPUSH
20785: CALL_OW 313
20789: PPUSH
20790: LD_INT 3
20792: PUSH
20793: LD_INT 60
20795: PUSH
20796: EMPTY
20797: LIST
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: PUSH
20803: LD_INT 2
20805: PUSH
20806: LD_INT 25
20808: PUSH
20809: LD_INT 2
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: PUSH
20816: LD_INT 25
20818: PUSH
20819: LD_INT 16
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: PUSH
20826: EMPTY
20827: LIST
20828: LIST
20829: LIST
20830: PUSH
20831: EMPTY
20832: LIST
20833: LIST
20834: PPUSH
20835: CALL_OW 72
20839: UNION
20840: ST_TO_ADDR
// if tmp then
20841: LD_VAR 0 4
20845: IFFALSE 20925
// begin tmp := ShrinkArray ( tmp , 3 ) ;
20847: LD_ADDR_VAR 0 4
20851: PUSH
20852: LD_VAR 0 4
20856: PPUSH
20857: LD_INT 3
20859: PPUSH
20860: CALL 64218 0 2
20864: ST_TO_ADDR
// for j in tmp do
20865: LD_ADDR_VAR 0 2
20869: PUSH
20870: LD_VAR 0 4
20874: PUSH
20875: FOR_IN
20876: IFFALSE 20919
// begin if IsInUnit ( j ) then
20878: LD_VAR 0 2
20882: PPUSH
20883: CALL_OW 310
20887: IFFALSE 20898
// ComExit ( j ) ;
20889: LD_VAR 0 2
20893: PPUSH
20894: CALL 64301 0 1
// AddComCollect ( j , x , y ) ;
20898: LD_VAR 0 2
20902: PPUSH
20903: LD_VAR 0 6
20907: PPUSH
20908: LD_VAR 0 7
20912: PPUSH
20913: CALL_OW 177
// end ;
20917: GO 20875
20919: POP
20920: POP
// exit ;
20921: POP
20922: POP
20923: GO 21152
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
20925: LD_ADDR_VAR 0 4
20929: PUSH
20930: LD_INT 22
20932: PUSH
20933: LD_VAR 0 5
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: PUSH
20942: LD_INT 91
20944: PUSH
20945: LD_VAR 0 8
20949: PUSH
20950: LD_INT 8
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: LIST
20957: PUSH
20958: LD_INT 2
20960: PUSH
20961: LD_INT 34
20963: PUSH
20964: LD_INT 12
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: PUSH
20971: LD_INT 34
20973: PUSH
20974: LD_INT 51
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 34
20983: PUSH
20984: LD_INT 32
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: PUSH
20991: LD_INT 34
20993: PUSH
20994: LD_INT 89
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: LIST
21012: PPUSH
21013: CALL_OW 69
21017: ST_TO_ADDR
// if tmp then
21018: LD_VAR 0 4
21022: IFFALSE 21148
// begin for j in tmp do
21024: LD_ADDR_VAR 0 2
21028: PUSH
21029: LD_VAR 0 4
21033: PUSH
21034: FOR_IN
21035: IFFALSE 21146
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
21037: LD_VAR 0 2
21041: PPUSH
21042: CALL_OW 262
21046: PUSH
21047: LD_INT 3
21049: EQUAL
21050: PUSH
21051: LD_VAR 0 2
21055: PPUSH
21056: CALL_OW 261
21060: PUSH
21061: LD_INT 20
21063: GREATER
21064: OR
21065: PUSH
21066: LD_VAR 0 2
21070: PPUSH
21071: CALL_OW 314
21075: NOT
21076: AND
21077: PUSH
21078: LD_VAR 0 2
21082: PPUSH
21083: CALL_OW 263
21087: PUSH
21088: LD_INT 1
21090: NONEQUAL
21091: PUSH
21092: LD_VAR 0 2
21096: PPUSH
21097: CALL_OW 311
21101: OR
21102: AND
21103: IFFALSE 21144
// begin ComCollect ( j , x , y ) ;
21105: LD_VAR 0 2
21109: PPUSH
21110: LD_VAR 0 6
21114: PPUSH
21115: LD_VAR 0 7
21119: PPUSH
21120: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
21124: LD_VAR 0 2
21128: PPUSH
21129: LD_VAR 0 8
21133: PPUSH
21134: CALL_OW 172
// exit ;
21138: POP
21139: POP
21140: POP
21141: POP
21142: GO 21152
// end ;
21144: GO 21034
21146: POP
21147: POP
// end ; end ;
21148: GO 20523
21150: POP
21151: POP
// end ; end_of_file
21152: PPOPN 9
21154: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
21155: LD_VAR 0 1
21159: PUSH
21160: LD_INT 200
21162: DOUBLE
21163: GREATEREQUAL
21164: IFFALSE 21172
21166: LD_INT 299
21168: DOUBLE
21169: LESSEQUAL
21170: IFTRUE 21174
21172: GO 21206
21174: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
21175: LD_VAR 0 1
21179: PPUSH
21180: LD_VAR 0 2
21184: PPUSH
21185: LD_VAR 0 3
21189: PPUSH
21190: LD_VAR 0 4
21194: PPUSH
21195: LD_VAR 0 5
21199: PPUSH
21200: CALL 21694 0 5
21204: GO 21283
21206: LD_INT 300
21208: DOUBLE
21209: GREATEREQUAL
21210: IFFALSE 21218
21212: LD_INT 399
21214: DOUBLE
21215: LESSEQUAL
21216: IFTRUE 21220
21218: GO 21282
21220: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
21221: LD_VAR 0 1
21225: PPUSH
21226: LD_VAR 0 2
21230: PPUSH
21231: LD_VAR 0 3
21235: PPUSH
21236: LD_VAR 0 4
21240: PPUSH
21241: LD_VAR 0 5
21245: PPUSH
21246: LD_VAR 0 6
21250: PPUSH
21251: LD_VAR 0 7
21255: PPUSH
21256: LD_VAR 0 8
21260: PPUSH
21261: LD_VAR 0 9
21265: PPUSH
21266: LD_VAR 0 10
21270: PPUSH
21271: LD_VAR 0 11
21275: PPUSH
21276: CALL 17856 0 11
21280: GO 21283
21282: POP
// end ;
21283: PPOPN 11
21285: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
21286: LD_VAR 0 1
21290: PPUSH
21291: LD_VAR 0 2
21295: PPUSH
21296: LD_VAR 0 3
21300: PPUSH
21301: LD_VAR 0 4
21305: PPUSH
21306: LD_VAR 0 5
21310: PPUSH
21311: CALL 21430 0 5
// end ; end_of_file
21315: PPOPN 5
21317: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21318: LD_INT 0
21320: PPUSH
21321: PPUSH
21322: PPUSH
21323: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21324: LD_VAR 0 1
21328: PPUSH
21329: CALL_OW 264
21333: PUSH
21334: LD_INT 91
21336: EQUAL
21337: IFFALSE 21409
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21339: LD_INT 68
21341: PPUSH
21342: LD_VAR 0 1
21346: PPUSH
21347: CALL_OW 255
21351: PPUSH
21352: CALL_OW 321
21356: PUSH
21357: LD_INT 2
21359: EQUAL
21360: IFFALSE 21372
// eff := 70 else
21362: LD_ADDR_VAR 0 4
21366: PUSH
21367: LD_INT 70
21369: ST_TO_ADDR
21370: GO 21380
// eff := 30 ;
21372: LD_ADDR_VAR 0 4
21376: PUSH
21377: LD_INT 30
21379: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21380: LD_VAR 0 1
21384: PPUSH
21385: CALL_OW 250
21389: PPUSH
21390: LD_VAR 0 1
21394: PPUSH
21395: CALL_OW 251
21399: PPUSH
21400: LD_VAR 0 4
21404: PPUSH
21405: CALL_OW 495
// end ; end ;
21409: LD_VAR 0 2
21413: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21414: LD_INT 0
21416: PPUSH
// end ;
21417: LD_VAR 0 4
21421: RET
// export function SOS_Command ( cmd ) ; begin
21422: LD_INT 0
21424: PPUSH
// end ;
21425: LD_VAR 0 2
21429: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21430: LD_INT 0
21432: PPUSH
// end ;
21433: LD_VAR 0 6
21437: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
21438: LD_INT 0
21440: PPUSH
21441: PPUSH
// if not vehicle or not factory then
21442: LD_VAR 0 1
21446: NOT
21447: PUSH
21448: LD_VAR 0 2
21452: NOT
21453: OR
21454: IFFALSE 21458
// exit ;
21456: GO 21689
// if factoryWaypoints >= factory then
21458: LD_EXP 89
21462: PUSH
21463: LD_VAR 0 2
21467: GREATEREQUAL
21468: IFFALSE 21689
// if factoryWaypoints [ factory ] then
21470: LD_EXP 89
21474: PUSH
21475: LD_VAR 0 2
21479: ARRAY
21480: IFFALSE 21689
// begin if GetControl ( vehicle ) = control_manual then
21482: LD_VAR 0 1
21486: PPUSH
21487: CALL_OW 263
21491: PUSH
21492: LD_INT 1
21494: EQUAL
21495: IFFALSE 21576
// begin driver := IsDrivenBy ( vehicle ) ;
21497: LD_ADDR_VAR 0 4
21501: PUSH
21502: LD_VAR 0 1
21506: PPUSH
21507: CALL_OW 311
21511: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21512: LD_VAR 0 4
21516: PPUSH
21517: LD_EXP 89
21521: PUSH
21522: LD_VAR 0 2
21526: ARRAY
21527: PUSH
21528: LD_INT 3
21530: ARRAY
21531: PPUSH
21532: LD_EXP 89
21536: PUSH
21537: LD_VAR 0 2
21541: ARRAY
21542: PUSH
21543: LD_INT 4
21545: ARRAY
21546: PPUSH
21547: CALL_OW 171
// AddComExitVehicle ( driver ) ;
21551: LD_VAR 0 4
21555: PPUSH
21556: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
21560: LD_VAR 0 4
21564: PPUSH
21565: LD_VAR 0 2
21569: PPUSH
21570: CALL_OW 180
// end else
21574: GO 21689
// if GetControl ( vehicle ) = control_remote then
21576: LD_VAR 0 1
21580: PPUSH
21581: CALL_OW 263
21585: PUSH
21586: LD_INT 2
21588: EQUAL
21589: IFFALSE 21650
// begin wait ( 0 0$2 ) ;
21591: LD_INT 70
21593: PPUSH
21594: CALL_OW 67
// if Connect ( vehicle ) then
21598: LD_VAR 0 1
21602: PPUSH
21603: CALL 34520 0 1
21607: IFFALSE 21648
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21609: LD_VAR 0 1
21613: PPUSH
21614: LD_EXP 89
21618: PUSH
21619: LD_VAR 0 2
21623: ARRAY
21624: PUSH
21625: LD_INT 3
21627: ARRAY
21628: PPUSH
21629: LD_EXP 89
21633: PUSH
21634: LD_VAR 0 2
21638: ARRAY
21639: PUSH
21640: LD_INT 4
21642: ARRAY
21643: PPUSH
21644: CALL_OW 171
// end else
21648: GO 21689
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21650: LD_VAR 0 1
21654: PPUSH
21655: LD_EXP 89
21659: PUSH
21660: LD_VAR 0 2
21664: ARRAY
21665: PUSH
21666: LD_INT 3
21668: ARRAY
21669: PPUSH
21670: LD_EXP 89
21674: PUSH
21675: LD_VAR 0 2
21679: ARRAY
21680: PUSH
21681: LD_INT 4
21683: ARRAY
21684: PPUSH
21685: CALL_OW 171
// end ; end ;
21689: LD_VAR 0 3
21693: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21694: LD_INT 0
21696: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21697: LD_VAR 0 1
21701: PUSH
21702: LD_INT 250
21704: EQUAL
21705: PUSH
21706: LD_VAR 0 2
21710: PPUSH
21711: CALL_OW 264
21715: PUSH
21716: LD_INT 81
21718: EQUAL
21719: AND
21720: IFFALSE 21741
// MinerPlaceMine ( unit , x , y ) ;
21722: LD_VAR 0 2
21726: PPUSH
21727: LD_VAR 0 4
21731: PPUSH
21732: LD_VAR 0 5
21736: PPUSH
21737: CALL 24731 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21741: LD_VAR 0 1
21745: PUSH
21746: LD_INT 251
21748: EQUAL
21749: PUSH
21750: LD_VAR 0 2
21754: PPUSH
21755: CALL_OW 264
21759: PUSH
21760: LD_INT 81
21762: EQUAL
21763: AND
21764: IFFALSE 21785
// MinerDetonateMine ( unit , x , y ) ;
21766: LD_VAR 0 2
21770: PPUSH
21771: LD_VAR 0 4
21775: PPUSH
21776: LD_VAR 0 5
21780: PPUSH
21781: CALL 25006 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21785: LD_VAR 0 1
21789: PUSH
21790: LD_INT 252
21792: EQUAL
21793: PUSH
21794: LD_VAR 0 2
21798: PPUSH
21799: CALL_OW 264
21803: PUSH
21804: LD_INT 81
21806: EQUAL
21807: AND
21808: IFFALSE 21829
// MinerCreateMinefield ( unit , x , y ) ;
21810: LD_VAR 0 2
21814: PPUSH
21815: LD_VAR 0 4
21819: PPUSH
21820: LD_VAR 0 5
21824: PPUSH
21825: CALL 25423 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21829: LD_VAR 0 1
21833: PUSH
21834: LD_INT 253
21836: EQUAL
21837: PUSH
21838: LD_VAR 0 2
21842: PPUSH
21843: CALL_OW 257
21847: PUSH
21848: LD_INT 5
21850: EQUAL
21851: AND
21852: IFFALSE 21873
// ComBinocular ( unit , x , y ) ;
21854: LD_VAR 0 2
21858: PPUSH
21859: LD_VAR 0 4
21863: PPUSH
21864: LD_VAR 0 5
21868: PPUSH
21869: CALL 25792 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21873: LD_VAR 0 1
21877: PUSH
21878: LD_INT 254
21880: EQUAL
21881: PUSH
21882: LD_VAR 0 2
21886: PPUSH
21887: CALL_OW 264
21891: PUSH
21892: LD_INT 99
21894: EQUAL
21895: AND
21896: PUSH
21897: LD_VAR 0 3
21901: PPUSH
21902: CALL_OW 263
21906: PUSH
21907: LD_INT 3
21909: EQUAL
21910: AND
21911: IFFALSE 21927
// HackDestroyVehicle ( unit , selectedUnit ) ;
21913: LD_VAR 0 2
21917: PPUSH
21918: LD_VAR 0 3
21922: PPUSH
21923: CALL 24095 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21927: LD_VAR 0 1
21931: PUSH
21932: LD_INT 255
21934: EQUAL
21935: PUSH
21936: LD_VAR 0 2
21940: PPUSH
21941: CALL_OW 264
21945: PUSH
21946: LD_INT 14
21948: PUSH
21949: LD_INT 53
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: IN
21956: AND
21957: PUSH
21958: LD_VAR 0 4
21962: PPUSH
21963: LD_VAR 0 5
21967: PPUSH
21968: CALL_OW 488
21972: AND
21973: IFFALSE 21997
// CutTreeXYR ( unit , x , y , 12 ) ;
21975: LD_VAR 0 2
21979: PPUSH
21980: LD_VAR 0 4
21984: PPUSH
21985: LD_VAR 0 5
21989: PPUSH
21990: LD_INT 12
21992: PPUSH
21993: CALL 22092 0 4
// if cmd = 256 then
21997: LD_VAR 0 1
22001: PUSH
22002: LD_INT 256
22004: EQUAL
22005: IFFALSE 22026
// SetFactoryWaypoint ( unit , x , y ) ;
22007: LD_VAR 0 2
22011: PPUSH
22012: LD_VAR 0 4
22016: PPUSH
22017: LD_VAR 0 5
22021: PPUSH
22022: CALL 19844 0 3
// if cmd = 257 then
22026: LD_VAR 0 1
22030: PUSH
22031: LD_INT 257
22033: EQUAL
22034: IFFALSE 22055
// SetWarehouseGatheringPoint ( unit , x , y ) ;
22036: LD_VAR 0 2
22040: PPUSH
22041: LD_VAR 0 4
22045: PPUSH
22046: LD_VAR 0 5
22050: PPUSH
22051: CALL 20206 0 3
// if cmd = 258 then
22055: LD_VAR 0 1
22059: PUSH
22060: LD_INT 258
22062: EQUAL
22063: IFFALSE 22087
// BurnTreeXYR ( unit , x , y , 8 ) ;
22065: LD_VAR 0 2
22069: PPUSH
22070: LD_VAR 0 4
22074: PPUSH
22075: LD_VAR 0 5
22079: PPUSH
22080: LD_INT 8
22082: PPUSH
22083: CALL 22486 0 4
// end ;
22087: LD_VAR 0 6
22091: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22092: LD_INT 0
22094: PPUSH
22095: PPUSH
22096: PPUSH
22097: PPUSH
22098: PPUSH
22099: PPUSH
22100: PPUSH
22101: PPUSH
22102: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
22103: LD_VAR 0 1
22107: PPUSH
22108: CALL_OW 302
22112: NOT
22113: PUSH
22114: LD_VAR 0 2
22118: PPUSH
22119: LD_VAR 0 3
22123: PPUSH
22124: CALL_OW 488
22128: NOT
22129: OR
22130: PUSH
22131: LD_VAR 0 4
22135: NOT
22136: OR
22137: IFFALSE 22141
// exit ;
22139: GO 22481
// list := [ ] ;
22141: LD_ADDR_VAR 0 13
22145: PUSH
22146: EMPTY
22147: ST_TO_ADDR
// if x - r < 0 then
22148: LD_VAR 0 2
22152: PUSH
22153: LD_VAR 0 4
22157: MINUS
22158: PUSH
22159: LD_INT 0
22161: LESS
22162: IFFALSE 22174
// min_x := 0 else
22164: LD_ADDR_VAR 0 7
22168: PUSH
22169: LD_INT 0
22171: ST_TO_ADDR
22172: GO 22190
// min_x := x - r ;
22174: LD_ADDR_VAR 0 7
22178: PUSH
22179: LD_VAR 0 2
22183: PUSH
22184: LD_VAR 0 4
22188: MINUS
22189: ST_TO_ADDR
// if y - r < 0 then
22190: LD_VAR 0 3
22194: PUSH
22195: LD_VAR 0 4
22199: MINUS
22200: PUSH
22201: LD_INT 0
22203: LESS
22204: IFFALSE 22216
// min_y := 0 else
22206: LD_ADDR_VAR 0 8
22210: PUSH
22211: LD_INT 0
22213: ST_TO_ADDR
22214: GO 22232
// min_y := y - r ;
22216: LD_ADDR_VAR 0 8
22220: PUSH
22221: LD_VAR 0 3
22225: PUSH
22226: LD_VAR 0 4
22230: MINUS
22231: ST_TO_ADDR
// max_x := x + r ;
22232: LD_ADDR_VAR 0 9
22236: PUSH
22237: LD_VAR 0 2
22241: PUSH
22242: LD_VAR 0 4
22246: PLUS
22247: ST_TO_ADDR
// max_y := y + r ;
22248: LD_ADDR_VAR 0 10
22252: PUSH
22253: LD_VAR 0 3
22257: PUSH
22258: LD_VAR 0 4
22262: PLUS
22263: ST_TO_ADDR
// for _x = min_x to max_x do
22264: LD_ADDR_VAR 0 11
22268: PUSH
22269: DOUBLE
22270: LD_VAR 0 7
22274: DEC
22275: ST_TO_ADDR
22276: LD_VAR 0 9
22280: PUSH
22281: FOR_TO
22282: IFFALSE 22399
// for _y = min_y to max_y do
22284: LD_ADDR_VAR 0 12
22288: PUSH
22289: DOUBLE
22290: LD_VAR 0 8
22294: DEC
22295: ST_TO_ADDR
22296: LD_VAR 0 10
22300: PUSH
22301: FOR_TO
22302: IFFALSE 22395
// begin if not ValidHex ( _x , _y ) then
22304: LD_VAR 0 11
22308: PPUSH
22309: LD_VAR 0 12
22313: PPUSH
22314: CALL_OW 488
22318: NOT
22319: IFFALSE 22323
// continue ;
22321: GO 22301
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22323: LD_VAR 0 11
22327: PPUSH
22328: LD_VAR 0 12
22332: PPUSH
22333: CALL_OW 351
22337: PUSH
22338: LD_VAR 0 11
22342: PPUSH
22343: LD_VAR 0 12
22347: PPUSH
22348: CALL_OW 554
22352: AND
22353: IFFALSE 22393
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22355: LD_ADDR_VAR 0 13
22359: PUSH
22360: LD_VAR 0 13
22364: PPUSH
22365: LD_VAR 0 13
22369: PUSH
22370: LD_INT 1
22372: PLUS
22373: PPUSH
22374: LD_VAR 0 11
22378: PUSH
22379: LD_VAR 0 12
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: PPUSH
22388: CALL_OW 2
22392: ST_TO_ADDR
// end ;
22393: GO 22301
22395: POP
22396: POP
22397: GO 22281
22399: POP
22400: POP
// if not list then
22401: LD_VAR 0 13
22405: NOT
22406: IFFALSE 22410
// exit ;
22408: GO 22481
// for i in list do
22410: LD_ADDR_VAR 0 6
22414: PUSH
22415: LD_VAR 0 13
22419: PUSH
22420: FOR_IN
22421: IFFALSE 22479
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22423: LD_VAR 0 1
22427: PPUSH
22428: LD_STRING M
22430: PUSH
22431: LD_VAR 0 6
22435: PUSH
22436: LD_INT 1
22438: ARRAY
22439: PUSH
22440: LD_VAR 0 6
22444: PUSH
22445: LD_INT 2
22447: ARRAY
22448: PUSH
22449: LD_INT 0
22451: PUSH
22452: LD_INT 0
22454: PUSH
22455: LD_INT 0
22457: PUSH
22458: LD_INT 0
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: PUSH
22470: EMPTY
22471: LIST
22472: PPUSH
22473: CALL_OW 447
22477: GO 22420
22479: POP
22480: POP
// end ;
22481: LD_VAR 0 5
22485: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
22486: LD_INT 0
22488: PPUSH
22489: PPUSH
22490: PPUSH
22491: PPUSH
22492: PPUSH
22493: PPUSH
22494: PPUSH
22495: PPUSH
22496: PPUSH
22497: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
22498: LD_VAR 0 1
22502: PPUSH
22503: CALL_OW 302
22507: NOT
22508: PUSH
22509: LD_VAR 0 2
22513: PPUSH
22514: LD_VAR 0 3
22518: PPUSH
22519: CALL_OW 488
22523: NOT
22524: OR
22525: PUSH
22526: LD_VAR 0 4
22530: NOT
22531: OR
22532: IFFALSE 22536
// exit ;
22534: GO 23049
// list := [ ] ;
22536: LD_ADDR_VAR 0 13
22540: PUSH
22541: EMPTY
22542: ST_TO_ADDR
// if x - r < 0 then
22543: LD_VAR 0 2
22547: PUSH
22548: LD_VAR 0 4
22552: MINUS
22553: PUSH
22554: LD_INT 0
22556: LESS
22557: IFFALSE 22569
// min_x := 0 else
22559: LD_ADDR_VAR 0 7
22563: PUSH
22564: LD_INT 0
22566: ST_TO_ADDR
22567: GO 22585
// min_x := x - r ;
22569: LD_ADDR_VAR 0 7
22573: PUSH
22574: LD_VAR 0 2
22578: PUSH
22579: LD_VAR 0 4
22583: MINUS
22584: ST_TO_ADDR
// if y - r < 0 then
22585: LD_VAR 0 3
22589: PUSH
22590: LD_VAR 0 4
22594: MINUS
22595: PUSH
22596: LD_INT 0
22598: LESS
22599: IFFALSE 22611
// min_y := 0 else
22601: LD_ADDR_VAR 0 8
22605: PUSH
22606: LD_INT 0
22608: ST_TO_ADDR
22609: GO 22627
// min_y := y - r ;
22611: LD_ADDR_VAR 0 8
22615: PUSH
22616: LD_VAR 0 3
22620: PUSH
22621: LD_VAR 0 4
22625: MINUS
22626: ST_TO_ADDR
// max_x := x + r ;
22627: LD_ADDR_VAR 0 9
22631: PUSH
22632: LD_VAR 0 2
22636: PUSH
22637: LD_VAR 0 4
22641: PLUS
22642: ST_TO_ADDR
// max_y := y + r ;
22643: LD_ADDR_VAR 0 10
22647: PUSH
22648: LD_VAR 0 3
22652: PUSH
22653: LD_VAR 0 4
22657: PLUS
22658: ST_TO_ADDR
// for _x = min_x to max_x do
22659: LD_ADDR_VAR 0 11
22663: PUSH
22664: DOUBLE
22665: LD_VAR 0 7
22669: DEC
22670: ST_TO_ADDR
22671: LD_VAR 0 9
22675: PUSH
22676: FOR_TO
22677: IFFALSE 22794
// for _y = min_y to max_y do
22679: LD_ADDR_VAR 0 12
22683: PUSH
22684: DOUBLE
22685: LD_VAR 0 8
22689: DEC
22690: ST_TO_ADDR
22691: LD_VAR 0 10
22695: PUSH
22696: FOR_TO
22697: IFFALSE 22790
// begin if not ValidHex ( _x , _y ) then
22699: LD_VAR 0 11
22703: PPUSH
22704: LD_VAR 0 12
22708: PPUSH
22709: CALL_OW 488
22713: NOT
22714: IFFALSE 22718
// continue ;
22716: GO 22696
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22718: LD_VAR 0 11
22722: PPUSH
22723: LD_VAR 0 12
22727: PPUSH
22728: CALL_OW 351
22732: PUSH
22733: LD_VAR 0 11
22737: PPUSH
22738: LD_VAR 0 12
22742: PPUSH
22743: CALL_OW 554
22747: AND
22748: IFFALSE 22788
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22750: LD_ADDR_VAR 0 13
22754: PUSH
22755: LD_VAR 0 13
22759: PPUSH
22760: LD_VAR 0 13
22764: PUSH
22765: LD_INT 1
22767: PLUS
22768: PPUSH
22769: LD_VAR 0 11
22773: PUSH
22774: LD_VAR 0 12
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: PPUSH
22783: CALL_OW 2
22787: ST_TO_ADDR
// end ;
22788: GO 22696
22790: POP
22791: POP
22792: GO 22676
22794: POP
22795: POP
// if not list then
22796: LD_VAR 0 13
22800: NOT
22801: IFFALSE 22805
// exit ;
22803: GO 23049
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
22805: LD_ADDR_VAR 0 13
22809: PUSH
22810: LD_VAR 0 1
22814: PPUSH
22815: LD_VAR 0 13
22819: PPUSH
22820: LD_INT 1
22822: PPUSH
22823: LD_INT 1
22825: PPUSH
22826: CALL 31662 0 4
22830: ST_TO_ADDR
// ComStop ( flame ) ;
22831: LD_VAR 0 1
22835: PPUSH
22836: CALL_OW 141
// for i in list do
22840: LD_ADDR_VAR 0 6
22844: PUSH
22845: LD_VAR 0 13
22849: PUSH
22850: FOR_IN
22851: IFFALSE 22882
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
22853: LD_VAR 0 1
22857: PPUSH
22858: LD_VAR 0 6
22862: PUSH
22863: LD_INT 1
22865: ARRAY
22866: PPUSH
22867: LD_VAR 0 6
22871: PUSH
22872: LD_INT 2
22874: ARRAY
22875: PPUSH
22876: CALL_OW 176
22880: GO 22850
22882: POP
22883: POP
// repeat wait ( 0 0$1 ) ;
22884: LD_INT 35
22886: PPUSH
22887: CALL_OW 67
// task := GetTaskList ( flame ) ;
22891: LD_ADDR_VAR 0 14
22895: PUSH
22896: LD_VAR 0 1
22900: PPUSH
22901: CALL_OW 437
22905: ST_TO_ADDR
// if not task then
22906: LD_VAR 0 14
22910: NOT
22911: IFFALSE 22915
// exit ;
22913: GO 23049
// if task [ 1 ] [ 1 ] <> | then
22915: LD_VAR 0 14
22919: PUSH
22920: LD_INT 1
22922: ARRAY
22923: PUSH
22924: LD_INT 1
22926: ARRAY
22927: PUSH
22928: LD_STRING |
22930: NONEQUAL
22931: IFFALSE 22935
// exit ;
22933: GO 23049
// _x := task [ 1 ] [ 2 ] ;
22935: LD_ADDR_VAR 0 11
22939: PUSH
22940: LD_VAR 0 14
22944: PUSH
22945: LD_INT 1
22947: ARRAY
22948: PUSH
22949: LD_INT 2
22951: ARRAY
22952: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
22953: LD_ADDR_VAR 0 12
22957: PUSH
22958: LD_VAR 0 14
22962: PUSH
22963: LD_INT 1
22965: ARRAY
22966: PUSH
22967: LD_INT 3
22969: ARRAY
22970: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
22971: LD_VAR 0 11
22975: PPUSH
22976: LD_VAR 0 12
22980: PPUSH
22981: CALL_OW 351
22985: NOT
22986: PUSH
22987: LD_VAR 0 11
22991: PPUSH
22992: LD_VAR 0 12
22996: PPUSH
22997: CALL_OW 554
23001: NOT
23002: OR
23003: IFFALSE 23037
// begin task := Delete ( task , 1 ) ;
23005: LD_ADDR_VAR 0 14
23009: PUSH
23010: LD_VAR 0 14
23014: PPUSH
23015: LD_INT 1
23017: PPUSH
23018: CALL_OW 3
23022: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
23023: LD_VAR 0 1
23027: PPUSH
23028: LD_VAR 0 14
23032: PPUSH
23033: CALL_OW 446
// end ; until not HasTask ( flame ) ;
23037: LD_VAR 0 1
23041: PPUSH
23042: CALL_OW 314
23046: NOT
23047: IFFALSE 22884
// end ;
23049: LD_VAR 0 5
23053: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23054: LD_EXP 92
23058: NOT
23059: IFFALSE 23109
23061: GO 23063
23063: DISABLE
// begin initHack := true ;
23064: LD_ADDR_EXP 92
23068: PUSH
23069: LD_INT 1
23071: ST_TO_ADDR
// hackTanks := [ ] ;
23072: LD_ADDR_EXP 93
23076: PUSH
23077: EMPTY
23078: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23079: LD_ADDR_EXP 94
23083: PUSH
23084: EMPTY
23085: ST_TO_ADDR
// hackLimit := 3 ;
23086: LD_ADDR_EXP 95
23090: PUSH
23091: LD_INT 3
23093: ST_TO_ADDR
// hackDist := 12 ;
23094: LD_ADDR_EXP 96
23098: PUSH
23099: LD_INT 12
23101: ST_TO_ADDR
// hackCounter := [ ] ;
23102: LD_ADDR_EXP 97
23106: PUSH
23107: EMPTY
23108: ST_TO_ADDR
// end ;
23109: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23110: LD_EXP 92
23114: PUSH
23115: LD_INT 34
23117: PUSH
23118: LD_INT 99
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: PPUSH
23125: CALL_OW 69
23129: AND
23130: IFFALSE 23383
23132: GO 23134
23134: DISABLE
23135: LD_INT 0
23137: PPUSH
23138: PPUSH
// begin enable ;
23139: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23140: LD_ADDR_VAR 0 1
23144: PUSH
23145: LD_INT 34
23147: PUSH
23148: LD_INT 99
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: PPUSH
23155: CALL_OW 69
23159: PUSH
23160: FOR_IN
23161: IFFALSE 23381
// begin if not i in hackTanks then
23163: LD_VAR 0 1
23167: PUSH
23168: LD_EXP 93
23172: IN
23173: NOT
23174: IFFALSE 23257
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23176: LD_ADDR_EXP 93
23180: PUSH
23181: LD_EXP 93
23185: PPUSH
23186: LD_EXP 93
23190: PUSH
23191: LD_INT 1
23193: PLUS
23194: PPUSH
23195: LD_VAR 0 1
23199: PPUSH
23200: CALL_OW 1
23204: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23205: LD_ADDR_EXP 94
23209: PUSH
23210: LD_EXP 94
23214: PPUSH
23215: LD_EXP 94
23219: PUSH
23220: LD_INT 1
23222: PLUS
23223: PPUSH
23224: EMPTY
23225: PPUSH
23226: CALL_OW 1
23230: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23231: LD_ADDR_EXP 97
23235: PUSH
23236: LD_EXP 97
23240: PPUSH
23241: LD_EXP 97
23245: PUSH
23246: LD_INT 1
23248: PLUS
23249: PPUSH
23250: EMPTY
23251: PPUSH
23252: CALL_OW 1
23256: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23257: LD_VAR 0 1
23261: PPUSH
23262: CALL_OW 302
23266: NOT
23267: IFFALSE 23280
// begin HackUnlinkAll ( i ) ;
23269: LD_VAR 0 1
23273: PPUSH
23274: CALL 23386 0 1
// continue ;
23278: GO 23160
// end ; HackCheckCapturedStatus ( i ) ;
23280: LD_VAR 0 1
23284: PPUSH
23285: CALL 23829 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23289: LD_ADDR_VAR 0 2
23293: PUSH
23294: LD_INT 81
23296: PUSH
23297: LD_VAR 0 1
23301: PPUSH
23302: CALL_OW 255
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: PUSH
23311: LD_INT 33
23313: PUSH
23314: LD_INT 3
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: PUSH
23321: LD_INT 91
23323: PUSH
23324: LD_VAR 0 1
23328: PUSH
23329: LD_EXP 96
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: LIST
23338: PUSH
23339: LD_INT 50
23341: PUSH
23342: EMPTY
23343: LIST
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: PPUSH
23351: CALL_OW 69
23355: ST_TO_ADDR
// if not tmp then
23356: LD_VAR 0 2
23360: NOT
23361: IFFALSE 23365
// continue ;
23363: GO 23160
// HackLink ( i , tmp ) ;
23365: LD_VAR 0 1
23369: PPUSH
23370: LD_VAR 0 2
23374: PPUSH
23375: CALL 23522 0 2
// end ;
23379: GO 23160
23381: POP
23382: POP
// end ;
23383: PPOPN 2
23385: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23386: LD_INT 0
23388: PPUSH
23389: PPUSH
23390: PPUSH
// if not hack in hackTanks then
23391: LD_VAR 0 1
23395: PUSH
23396: LD_EXP 93
23400: IN
23401: NOT
23402: IFFALSE 23406
// exit ;
23404: GO 23517
// index := GetElementIndex ( hackTanks , hack ) ;
23406: LD_ADDR_VAR 0 4
23410: PUSH
23411: LD_EXP 93
23415: PPUSH
23416: LD_VAR 0 1
23420: PPUSH
23421: CALL 30959 0 2
23425: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23426: LD_EXP 94
23430: PUSH
23431: LD_VAR 0 4
23435: ARRAY
23436: IFFALSE 23517
// begin for i in hackTanksCaptured [ index ] do
23438: LD_ADDR_VAR 0 3
23442: PUSH
23443: LD_EXP 94
23447: PUSH
23448: LD_VAR 0 4
23452: ARRAY
23453: PUSH
23454: FOR_IN
23455: IFFALSE 23481
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23457: LD_VAR 0 3
23461: PUSH
23462: LD_INT 1
23464: ARRAY
23465: PPUSH
23466: LD_VAR 0 3
23470: PUSH
23471: LD_INT 2
23473: ARRAY
23474: PPUSH
23475: CALL_OW 235
23479: GO 23454
23481: POP
23482: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23483: LD_ADDR_EXP 94
23487: PUSH
23488: LD_EXP 94
23492: PPUSH
23493: LD_VAR 0 4
23497: PPUSH
23498: EMPTY
23499: PPUSH
23500: CALL_OW 1
23504: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23505: LD_VAR 0 1
23509: PPUSH
23510: LD_INT 0
23512: PPUSH
23513: CALL_OW 505
// end ; end ;
23517: LD_VAR 0 2
23521: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23522: LD_INT 0
23524: PPUSH
23525: PPUSH
23526: PPUSH
// if not hack in hackTanks or not vehicles then
23527: LD_VAR 0 1
23531: PUSH
23532: LD_EXP 93
23536: IN
23537: NOT
23538: PUSH
23539: LD_VAR 0 2
23543: NOT
23544: OR
23545: IFFALSE 23549
// exit ;
23547: GO 23824
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23549: LD_ADDR_VAR 0 2
23553: PUSH
23554: LD_VAR 0 1
23558: PPUSH
23559: LD_VAR 0 2
23563: PPUSH
23564: LD_INT 1
23566: PPUSH
23567: LD_INT 1
23569: PPUSH
23570: CALL 31609 0 4
23574: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23575: LD_ADDR_VAR 0 5
23579: PUSH
23580: LD_EXP 93
23584: PPUSH
23585: LD_VAR 0 1
23589: PPUSH
23590: CALL 30959 0 2
23594: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23595: LD_EXP 94
23599: PUSH
23600: LD_VAR 0 5
23604: ARRAY
23605: PUSH
23606: LD_EXP 95
23610: LESS
23611: IFFALSE 23800
// begin for i := 1 to vehicles do
23613: LD_ADDR_VAR 0 4
23617: PUSH
23618: DOUBLE
23619: LD_INT 1
23621: DEC
23622: ST_TO_ADDR
23623: LD_VAR 0 2
23627: PUSH
23628: FOR_TO
23629: IFFALSE 23798
// begin if hackTanksCaptured [ index ] = hackLimit then
23631: LD_EXP 94
23635: PUSH
23636: LD_VAR 0 5
23640: ARRAY
23641: PUSH
23642: LD_EXP 95
23646: EQUAL
23647: IFFALSE 23651
// break ;
23649: GO 23798
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23651: LD_ADDR_EXP 97
23655: PUSH
23656: LD_EXP 97
23660: PPUSH
23661: LD_VAR 0 5
23665: PPUSH
23666: LD_EXP 97
23670: PUSH
23671: LD_VAR 0 5
23675: ARRAY
23676: PUSH
23677: LD_INT 1
23679: PLUS
23680: PPUSH
23681: CALL_OW 1
23685: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23686: LD_ADDR_EXP 94
23690: PUSH
23691: LD_EXP 94
23695: PPUSH
23696: LD_VAR 0 5
23700: PUSH
23701: LD_EXP 94
23705: PUSH
23706: LD_VAR 0 5
23710: ARRAY
23711: PUSH
23712: LD_INT 1
23714: PLUS
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: PPUSH
23720: LD_VAR 0 2
23724: PUSH
23725: LD_VAR 0 4
23729: ARRAY
23730: PUSH
23731: LD_VAR 0 2
23735: PUSH
23736: LD_VAR 0 4
23740: ARRAY
23741: PPUSH
23742: CALL_OW 255
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: PPUSH
23751: CALL 31174 0 3
23755: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23756: LD_VAR 0 2
23760: PUSH
23761: LD_VAR 0 4
23765: ARRAY
23766: PPUSH
23767: LD_VAR 0 1
23771: PPUSH
23772: CALL_OW 255
23776: PPUSH
23777: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23781: LD_VAR 0 2
23785: PUSH
23786: LD_VAR 0 4
23790: ARRAY
23791: PPUSH
23792: CALL_OW 141
// end ;
23796: GO 23628
23798: POP
23799: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23800: LD_VAR 0 1
23804: PPUSH
23805: LD_EXP 94
23809: PUSH
23810: LD_VAR 0 5
23814: ARRAY
23815: PUSH
23816: LD_INT 0
23818: PLUS
23819: PPUSH
23820: CALL_OW 505
// end ;
23824: LD_VAR 0 3
23828: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23829: LD_INT 0
23831: PPUSH
23832: PPUSH
23833: PPUSH
23834: PPUSH
// if not hack in hackTanks then
23835: LD_VAR 0 1
23839: PUSH
23840: LD_EXP 93
23844: IN
23845: NOT
23846: IFFALSE 23850
// exit ;
23848: GO 24090
// index := GetElementIndex ( hackTanks , hack ) ;
23850: LD_ADDR_VAR 0 4
23854: PUSH
23855: LD_EXP 93
23859: PPUSH
23860: LD_VAR 0 1
23864: PPUSH
23865: CALL 30959 0 2
23869: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23870: LD_ADDR_VAR 0 3
23874: PUSH
23875: DOUBLE
23876: LD_EXP 94
23880: PUSH
23881: LD_VAR 0 4
23885: ARRAY
23886: INC
23887: ST_TO_ADDR
23888: LD_INT 1
23890: PUSH
23891: FOR_DOWNTO
23892: IFFALSE 24064
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23894: LD_ADDR_VAR 0 5
23898: PUSH
23899: LD_EXP 94
23903: PUSH
23904: LD_VAR 0 4
23908: ARRAY
23909: PUSH
23910: LD_VAR 0 3
23914: ARRAY
23915: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23916: LD_VAR 0 5
23920: PUSH
23921: LD_INT 1
23923: ARRAY
23924: PPUSH
23925: CALL_OW 302
23929: NOT
23930: PUSH
23931: LD_VAR 0 5
23935: PUSH
23936: LD_INT 1
23938: ARRAY
23939: PPUSH
23940: CALL_OW 255
23944: PUSH
23945: LD_VAR 0 1
23949: PPUSH
23950: CALL_OW 255
23954: NONEQUAL
23955: OR
23956: IFFALSE 24062
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23958: LD_VAR 0 5
23962: PUSH
23963: LD_INT 1
23965: ARRAY
23966: PPUSH
23967: CALL_OW 305
23971: PUSH
23972: LD_VAR 0 5
23976: PUSH
23977: LD_INT 1
23979: ARRAY
23980: PPUSH
23981: CALL_OW 255
23985: PUSH
23986: LD_VAR 0 1
23990: PPUSH
23991: CALL_OW 255
23995: EQUAL
23996: AND
23997: IFFALSE 24021
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23999: LD_VAR 0 5
24003: PUSH
24004: LD_INT 1
24006: ARRAY
24007: PPUSH
24008: LD_VAR 0 5
24012: PUSH
24013: LD_INT 2
24015: ARRAY
24016: PPUSH
24017: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24021: LD_ADDR_EXP 94
24025: PUSH
24026: LD_EXP 94
24030: PPUSH
24031: LD_VAR 0 4
24035: PPUSH
24036: LD_EXP 94
24040: PUSH
24041: LD_VAR 0 4
24045: ARRAY
24046: PPUSH
24047: LD_VAR 0 3
24051: PPUSH
24052: CALL_OW 3
24056: PPUSH
24057: CALL_OW 1
24061: ST_TO_ADDR
// end ; end ;
24062: GO 23891
24064: POP
24065: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24066: LD_VAR 0 1
24070: PPUSH
24071: LD_EXP 94
24075: PUSH
24076: LD_VAR 0 4
24080: ARRAY
24081: PUSH
24082: LD_INT 0
24084: PLUS
24085: PPUSH
24086: CALL_OW 505
// end ;
24090: LD_VAR 0 2
24094: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24095: LD_INT 0
24097: PPUSH
24098: PPUSH
24099: PPUSH
24100: PPUSH
// if not hack in hackTanks then
24101: LD_VAR 0 1
24105: PUSH
24106: LD_EXP 93
24110: IN
24111: NOT
24112: IFFALSE 24116
// exit ;
24114: GO 24201
// index := GetElementIndex ( hackTanks , hack ) ;
24116: LD_ADDR_VAR 0 5
24120: PUSH
24121: LD_EXP 93
24125: PPUSH
24126: LD_VAR 0 1
24130: PPUSH
24131: CALL 30959 0 2
24135: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24136: LD_ADDR_VAR 0 4
24140: PUSH
24141: DOUBLE
24142: LD_INT 1
24144: DEC
24145: ST_TO_ADDR
24146: LD_EXP 94
24150: PUSH
24151: LD_VAR 0 5
24155: ARRAY
24156: PUSH
24157: FOR_TO
24158: IFFALSE 24199
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24160: LD_EXP 94
24164: PUSH
24165: LD_VAR 0 5
24169: ARRAY
24170: PUSH
24171: LD_VAR 0 4
24175: ARRAY
24176: PUSH
24177: LD_INT 1
24179: ARRAY
24180: PUSH
24181: LD_VAR 0 2
24185: EQUAL
24186: IFFALSE 24197
// KillUnit ( vehicle ) ;
24188: LD_VAR 0 2
24192: PPUSH
24193: CALL_OW 66
24197: GO 24157
24199: POP
24200: POP
// end ;
24201: LD_VAR 0 3
24205: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
24206: LD_EXP 98
24210: NOT
24211: IFFALSE 24246
24213: GO 24215
24215: DISABLE
// begin initMiner := true ;
24216: LD_ADDR_EXP 98
24220: PUSH
24221: LD_INT 1
24223: ST_TO_ADDR
// minersList := [ ] ;
24224: LD_ADDR_EXP 99
24228: PUSH
24229: EMPTY
24230: ST_TO_ADDR
// minerMinesList := [ ] ;
24231: LD_ADDR_EXP 100
24235: PUSH
24236: EMPTY
24237: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
24238: LD_ADDR_EXP 101
24242: PUSH
24243: LD_INT 5
24245: ST_TO_ADDR
// end ;
24246: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
24247: LD_EXP 98
24251: PUSH
24252: LD_INT 34
24254: PUSH
24255: LD_INT 81
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: PPUSH
24262: CALL_OW 69
24266: AND
24267: IFFALSE 24728
24269: GO 24271
24271: DISABLE
24272: LD_INT 0
24274: PPUSH
24275: PPUSH
24276: PPUSH
24277: PPUSH
// begin enable ;
24278: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24279: LD_ADDR_VAR 0 1
24283: PUSH
24284: LD_INT 34
24286: PUSH
24287: LD_INT 81
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PPUSH
24294: CALL_OW 69
24298: PUSH
24299: FOR_IN
24300: IFFALSE 24372
// begin if not i in minersList then
24302: LD_VAR 0 1
24306: PUSH
24307: LD_EXP 99
24311: IN
24312: NOT
24313: IFFALSE 24370
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24315: LD_ADDR_EXP 99
24319: PUSH
24320: LD_EXP 99
24324: PPUSH
24325: LD_EXP 99
24329: PUSH
24330: LD_INT 1
24332: PLUS
24333: PPUSH
24334: LD_VAR 0 1
24338: PPUSH
24339: CALL_OW 1
24343: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24344: LD_ADDR_EXP 100
24348: PUSH
24349: LD_EXP 100
24353: PPUSH
24354: LD_EXP 100
24358: PUSH
24359: LD_INT 1
24361: PLUS
24362: PPUSH
24363: EMPTY
24364: PPUSH
24365: CALL_OW 1
24369: ST_TO_ADDR
// end end ;
24370: GO 24299
24372: POP
24373: POP
// for i := minerMinesList downto 1 do
24374: LD_ADDR_VAR 0 1
24378: PUSH
24379: DOUBLE
24380: LD_EXP 100
24384: INC
24385: ST_TO_ADDR
24386: LD_INT 1
24388: PUSH
24389: FOR_DOWNTO
24390: IFFALSE 24726
// begin if IsLive ( minersList [ i ] ) then
24392: LD_EXP 99
24396: PUSH
24397: LD_VAR 0 1
24401: ARRAY
24402: PPUSH
24403: CALL_OW 300
24407: IFFALSE 24435
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
24409: LD_EXP 99
24413: PUSH
24414: LD_VAR 0 1
24418: ARRAY
24419: PPUSH
24420: LD_EXP 100
24424: PUSH
24425: LD_VAR 0 1
24429: ARRAY
24430: PPUSH
24431: CALL_OW 505
// if not minerMinesList [ i ] then
24435: LD_EXP 100
24439: PUSH
24440: LD_VAR 0 1
24444: ARRAY
24445: NOT
24446: IFFALSE 24450
// continue ;
24448: GO 24389
// for j := minerMinesList [ i ] downto 1 do
24450: LD_ADDR_VAR 0 2
24454: PUSH
24455: DOUBLE
24456: LD_EXP 100
24460: PUSH
24461: LD_VAR 0 1
24465: ARRAY
24466: INC
24467: ST_TO_ADDR
24468: LD_INT 1
24470: PUSH
24471: FOR_DOWNTO
24472: IFFALSE 24722
// begin side := GetSide ( minersList [ i ] ) ;
24474: LD_ADDR_VAR 0 3
24478: PUSH
24479: LD_EXP 99
24483: PUSH
24484: LD_VAR 0 1
24488: ARRAY
24489: PPUSH
24490: CALL_OW 255
24494: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24495: LD_ADDR_VAR 0 4
24499: PUSH
24500: LD_EXP 100
24504: PUSH
24505: LD_VAR 0 1
24509: ARRAY
24510: PUSH
24511: LD_VAR 0 2
24515: ARRAY
24516: PUSH
24517: LD_INT 1
24519: ARRAY
24520: PPUSH
24521: LD_EXP 100
24525: PUSH
24526: LD_VAR 0 1
24530: ARRAY
24531: PUSH
24532: LD_VAR 0 2
24536: ARRAY
24537: PUSH
24538: LD_INT 2
24540: ARRAY
24541: PPUSH
24542: CALL_OW 428
24546: ST_TO_ADDR
// if not tmp then
24547: LD_VAR 0 4
24551: NOT
24552: IFFALSE 24556
// continue ;
24554: GO 24471
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24556: LD_VAR 0 4
24560: PUSH
24561: LD_INT 81
24563: PUSH
24564: LD_VAR 0 3
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: PPUSH
24573: CALL_OW 69
24577: IN
24578: PUSH
24579: LD_EXP 100
24583: PUSH
24584: LD_VAR 0 1
24588: ARRAY
24589: PUSH
24590: LD_VAR 0 2
24594: ARRAY
24595: PUSH
24596: LD_INT 1
24598: ARRAY
24599: PPUSH
24600: LD_EXP 100
24604: PUSH
24605: LD_VAR 0 1
24609: ARRAY
24610: PUSH
24611: LD_VAR 0 2
24615: ARRAY
24616: PUSH
24617: LD_INT 2
24619: ARRAY
24620: PPUSH
24621: CALL_OW 458
24625: AND
24626: IFFALSE 24720
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
24628: LD_EXP 100
24632: PUSH
24633: LD_VAR 0 1
24637: ARRAY
24638: PUSH
24639: LD_VAR 0 2
24643: ARRAY
24644: PUSH
24645: LD_INT 1
24647: ARRAY
24648: PPUSH
24649: LD_EXP 100
24653: PUSH
24654: LD_VAR 0 1
24658: ARRAY
24659: PUSH
24660: LD_VAR 0 2
24664: ARRAY
24665: PUSH
24666: LD_INT 2
24668: ARRAY
24669: PPUSH
24670: LD_VAR 0 3
24674: PPUSH
24675: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24679: LD_ADDR_EXP 100
24683: PUSH
24684: LD_EXP 100
24688: PPUSH
24689: LD_VAR 0 1
24693: PPUSH
24694: LD_EXP 100
24698: PUSH
24699: LD_VAR 0 1
24703: ARRAY
24704: PPUSH
24705: LD_VAR 0 2
24709: PPUSH
24710: CALL_OW 3
24714: PPUSH
24715: CALL_OW 1
24719: ST_TO_ADDR
// end ; end ;
24720: GO 24471
24722: POP
24723: POP
// end ;
24724: GO 24389
24726: POP
24727: POP
// end ;
24728: PPOPN 4
24730: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24731: LD_INT 0
24733: PPUSH
24734: PPUSH
// result := false ;
24735: LD_ADDR_VAR 0 4
24739: PUSH
24740: LD_INT 0
24742: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24743: LD_VAR 0 1
24747: PPUSH
24748: CALL_OW 264
24752: PUSH
24753: LD_INT 81
24755: EQUAL
24756: NOT
24757: IFFALSE 24761
// exit ;
24759: GO 25001
// index := GetElementIndex ( minersList , unit ) ;
24761: LD_ADDR_VAR 0 5
24765: PUSH
24766: LD_EXP 99
24770: PPUSH
24771: LD_VAR 0 1
24775: PPUSH
24776: CALL 30959 0 2
24780: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24781: LD_EXP 100
24785: PUSH
24786: LD_VAR 0 5
24790: ARRAY
24791: PUSH
24792: LD_EXP 101
24796: GREATEREQUAL
24797: IFFALSE 24801
// exit ;
24799: GO 25001
// ComMoveXY ( unit , x , y ) ;
24801: LD_VAR 0 1
24805: PPUSH
24806: LD_VAR 0 2
24810: PPUSH
24811: LD_VAR 0 3
24815: PPUSH
24816: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24820: LD_INT 35
24822: PPUSH
24823: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24827: LD_VAR 0 1
24831: PPUSH
24832: LD_VAR 0 2
24836: PPUSH
24837: LD_VAR 0 3
24841: PPUSH
24842: CALL 62700 0 3
24846: NOT
24847: PUSH
24848: LD_VAR 0 1
24852: PPUSH
24853: CALL_OW 314
24857: AND
24858: IFFALSE 24862
// exit ;
24860: GO 25001
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24862: LD_VAR 0 2
24866: PPUSH
24867: LD_VAR 0 3
24871: PPUSH
24872: CALL_OW 428
24876: PUSH
24877: LD_VAR 0 1
24881: EQUAL
24882: PUSH
24883: LD_VAR 0 1
24887: PPUSH
24888: CALL_OW 314
24892: NOT
24893: AND
24894: IFFALSE 24820
// PlaySoundXY ( x , y , PlantMine ) ;
24896: LD_VAR 0 2
24900: PPUSH
24901: LD_VAR 0 3
24905: PPUSH
24906: LD_STRING PlantMine
24908: PPUSH
24909: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
24913: LD_VAR 0 2
24917: PPUSH
24918: LD_VAR 0 3
24922: PPUSH
24923: LD_VAR 0 1
24927: PPUSH
24928: CALL_OW 255
24932: PPUSH
24933: LD_INT 0
24935: PPUSH
24936: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24940: LD_ADDR_EXP 100
24944: PUSH
24945: LD_EXP 100
24949: PPUSH
24950: LD_VAR 0 5
24954: PUSH
24955: LD_EXP 100
24959: PUSH
24960: LD_VAR 0 5
24964: ARRAY
24965: PUSH
24966: LD_INT 1
24968: PLUS
24969: PUSH
24970: EMPTY
24971: LIST
24972: LIST
24973: PPUSH
24974: LD_VAR 0 2
24978: PUSH
24979: LD_VAR 0 3
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: PPUSH
24988: CALL 31174 0 3
24992: ST_TO_ADDR
// result := true ;
24993: LD_ADDR_VAR 0 4
24997: PUSH
24998: LD_INT 1
25000: ST_TO_ADDR
// end ;
25001: LD_VAR 0 4
25005: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25006: LD_INT 0
25008: PPUSH
25009: PPUSH
25010: PPUSH
// if not unit in minersList then
25011: LD_VAR 0 1
25015: PUSH
25016: LD_EXP 99
25020: IN
25021: NOT
25022: IFFALSE 25026
// exit ;
25024: GO 25418
// index := GetElementIndex ( minersList , unit ) ;
25026: LD_ADDR_VAR 0 6
25030: PUSH
25031: LD_EXP 99
25035: PPUSH
25036: LD_VAR 0 1
25040: PPUSH
25041: CALL 30959 0 2
25045: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25046: LD_ADDR_VAR 0 5
25050: PUSH
25051: DOUBLE
25052: LD_EXP 100
25056: PUSH
25057: LD_VAR 0 6
25061: ARRAY
25062: INC
25063: ST_TO_ADDR
25064: LD_INT 1
25066: PUSH
25067: FOR_DOWNTO
25068: IFFALSE 25229
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25070: LD_EXP 100
25074: PUSH
25075: LD_VAR 0 6
25079: ARRAY
25080: PUSH
25081: LD_VAR 0 5
25085: ARRAY
25086: PUSH
25087: LD_INT 1
25089: ARRAY
25090: PUSH
25091: LD_VAR 0 2
25095: EQUAL
25096: PUSH
25097: LD_EXP 100
25101: PUSH
25102: LD_VAR 0 6
25106: ARRAY
25107: PUSH
25108: LD_VAR 0 5
25112: ARRAY
25113: PUSH
25114: LD_INT 2
25116: ARRAY
25117: PUSH
25118: LD_VAR 0 3
25122: EQUAL
25123: AND
25124: IFFALSE 25227
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25126: LD_EXP 100
25130: PUSH
25131: LD_VAR 0 6
25135: ARRAY
25136: PUSH
25137: LD_VAR 0 5
25141: ARRAY
25142: PUSH
25143: LD_INT 1
25145: ARRAY
25146: PPUSH
25147: LD_EXP 100
25151: PUSH
25152: LD_VAR 0 6
25156: ARRAY
25157: PUSH
25158: LD_VAR 0 5
25162: ARRAY
25163: PUSH
25164: LD_INT 2
25166: ARRAY
25167: PPUSH
25168: LD_VAR 0 1
25172: PPUSH
25173: CALL_OW 255
25177: PPUSH
25178: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25182: LD_ADDR_EXP 100
25186: PUSH
25187: LD_EXP 100
25191: PPUSH
25192: LD_VAR 0 6
25196: PPUSH
25197: LD_EXP 100
25201: PUSH
25202: LD_VAR 0 6
25206: ARRAY
25207: PPUSH
25208: LD_VAR 0 5
25212: PPUSH
25213: CALL_OW 3
25217: PPUSH
25218: CALL_OW 1
25222: ST_TO_ADDR
// exit ;
25223: POP
25224: POP
25225: GO 25418
// end ; end ;
25227: GO 25067
25229: POP
25230: POP
// for i := minerMinesList [ index ] downto 1 do
25231: LD_ADDR_VAR 0 5
25235: PUSH
25236: DOUBLE
25237: LD_EXP 100
25241: PUSH
25242: LD_VAR 0 6
25246: ARRAY
25247: INC
25248: ST_TO_ADDR
25249: LD_INT 1
25251: PUSH
25252: FOR_DOWNTO
25253: IFFALSE 25416
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25255: LD_EXP 100
25259: PUSH
25260: LD_VAR 0 6
25264: ARRAY
25265: PUSH
25266: LD_VAR 0 5
25270: ARRAY
25271: PUSH
25272: LD_INT 1
25274: ARRAY
25275: PPUSH
25276: LD_EXP 100
25280: PUSH
25281: LD_VAR 0 6
25285: ARRAY
25286: PUSH
25287: LD_VAR 0 5
25291: ARRAY
25292: PUSH
25293: LD_INT 2
25295: ARRAY
25296: PPUSH
25297: LD_VAR 0 2
25301: PPUSH
25302: LD_VAR 0 3
25306: PPUSH
25307: CALL_OW 298
25311: PUSH
25312: LD_INT 6
25314: LESS
25315: IFFALSE 25414
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25317: LD_EXP 100
25321: PUSH
25322: LD_VAR 0 6
25326: ARRAY
25327: PUSH
25328: LD_VAR 0 5
25332: ARRAY
25333: PUSH
25334: LD_INT 1
25336: ARRAY
25337: PPUSH
25338: LD_EXP 100
25342: PUSH
25343: LD_VAR 0 6
25347: ARRAY
25348: PUSH
25349: LD_VAR 0 5
25353: ARRAY
25354: PUSH
25355: LD_INT 2
25357: ARRAY
25358: PPUSH
25359: LD_VAR 0 1
25363: PPUSH
25364: CALL_OW 255
25368: PPUSH
25369: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25373: LD_ADDR_EXP 100
25377: PUSH
25378: LD_EXP 100
25382: PPUSH
25383: LD_VAR 0 6
25387: PPUSH
25388: LD_EXP 100
25392: PUSH
25393: LD_VAR 0 6
25397: ARRAY
25398: PPUSH
25399: LD_VAR 0 5
25403: PPUSH
25404: CALL_OW 3
25408: PPUSH
25409: CALL_OW 1
25413: ST_TO_ADDR
// end ; end ;
25414: GO 25252
25416: POP
25417: POP
// end ;
25418: LD_VAR 0 4
25422: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25423: LD_INT 0
25425: PPUSH
25426: PPUSH
25427: PPUSH
25428: PPUSH
25429: PPUSH
25430: PPUSH
25431: PPUSH
25432: PPUSH
25433: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25434: LD_VAR 0 1
25438: PPUSH
25439: CALL_OW 264
25443: PUSH
25444: LD_INT 81
25446: EQUAL
25447: NOT
25448: PUSH
25449: LD_VAR 0 1
25453: PUSH
25454: LD_EXP 99
25458: IN
25459: NOT
25460: OR
25461: IFFALSE 25465
// exit ;
25463: GO 25787
// index := GetElementIndex ( minersList , unit ) ;
25465: LD_ADDR_VAR 0 6
25469: PUSH
25470: LD_EXP 99
25474: PPUSH
25475: LD_VAR 0 1
25479: PPUSH
25480: CALL 30959 0 2
25484: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
25485: LD_ADDR_VAR 0 8
25489: PUSH
25490: LD_EXP 101
25494: PUSH
25495: LD_EXP 100
25499: PUSH
25500: LD_VAR 0 6
25504: ARRAY
25505: MINUS
25506: ST_TO_ADDR
// if not minesFreeAmount then
25507: LD_VAR 0 8
25511: NOT
25512: IFFALSE 25516
// exit ;
25514: GO 25787
// tmp := [ ] ;
25516: LD_ADDR_VAR 0 7
25520: PUSH
25521: EMPTY
25522: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25523: LD_ADDR_VAR 0 5
25527: PUSH
25528: DOUBLE
25529: LD_INT 1
25531: DEC
25532: ST_TO_ADDR
25533: LD_VAR 0 8
25537: PUSH
25538: FOR_TO
25539: IFFALSE 25734
// begin _d := rand ( 0 , 5 ) ;
25541: LD_ADDR_VAR 0 11
25545: PUSH
25546: LD_INT 0
25548: PPUSH
25549: LD_INT 5
25551: PPUSH
25552: CALL_OW 12
25556: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25557: LD_ADDR_VAR 0 12
25561: PUSH
25562: LD_INT 2
25564: PPUSH
25565: LD_INT 6
25567: PPUSH
25568: CALL_OW 12
25572: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25573: LD_ADDR_VAR 0 9
25577: PUSH
25578: LD_VAR 0 2
25582: PPUSH
25583: LD_VAR 0 11
25587: PPUSH
25588: LD_VAR 0 12
25592: PPUSH
25593: CALL_OW 272
25597: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25598: LD_ADDR_VAR 0 10
25602: PUSH
25603: LD_VAR 0 3
25607: PPUSH
25608: LD_VAR 0 11
25612: PPUSH
25613: LD_VAR 0 12
25617: PPUSH
25618: CALL_OW 273
25622: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
25623: LD_VAR 0 9
25627: PPUSH
25628: LD_VAR 0 10
25632: PPUSH
25633: CALL_OW 488
25637: PUSH
25638: LD_VAR 0 9
25642: PUSH
25643: LD_VAR 0 10
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_VAR 0 7
25656: IN
25657: NOT
25658: AND
25659: PUSH
25660: LD_VAR 0 9
25664: PPUSH
25665: LD_VAR 0 10
25669: PPUSH
25670: CALL_OW 458
25674: NOT
25675: AND
25676: IFFALSE 25718
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
25678: LD_ADDR_VAR 0 7
25682: PUSH
25683: LD_VAR 0 7
25687: PPUSH
25688: LD_VAR 0 7
25692: PUSH
25693: LD_INT 1
25695: PLUS
25696: PPUSH
25697: LD_VAR 0 9
25701: PUSH
25702: LD_VAR 0 10
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PPUSH
25711: CALL_OW 1
25715: ST_TO_ADDR
25716: GO 25732
// i := i - 1 ;
25718: LD_ADDR_VAR 0 5
25722: PUSH
25723: LD_VAR 0 5
25727: PUSH
25728: LD_INT 1
25730: MINUS
25731: ST_TO_ADDR
// end ;
25732: GO 25538
25734: POP
25735: POP
// for i in tmp do
25736: LD_ADDR_VAR 0 5
25740: PUSH
25741: LD_VAR 0 7
25745: PUSH
25746: FOR_IN
25747: IFFALSE 25785
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25749: LD_VAR 0 1
25753: PPUSH
25754: LD_VAR 0 5
25758: PUSH
25759: LD_INT 1
25761: ARRAY
25762: PPUSH
25763: LD_VAR 0 5
25767: PUSH
25768: LD_INT 2
25770: ARRAY
25771: PPUSH
25772: CALL 24731 0 3
25776: NOT
25777: IFFALSE 25783
// exit ;
25779: POP
25780: POP
25781: GO 25787
25783: GO 25746
25785: POP
25786: POP
// end ;
25787: LD_VAR 0 4
25791: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
25792: LD_INT 0
25794: PPUSH
25795: PPUSH
25796: PPUSH
25797: PPUSH
25798: PPUSH
25799: PPUSH
25800: PPUSH
// if not GetClass ( unit ) = class_sniper then
25801: LD_VAR 0 1
25805: PPUSH
25806: CALL_OW 257
25810: PUSH
25811: LD_INT 5
25813: EQUAL
25814: NOT
25815: IFFALSE 25819
// exit ;
25817: GO 26207
// dist := 8 ;
25819: LD_ADDR_VAR 0 5
25823: PUSH
25824: LD_INT 8
25826: ST_TO_ADDR
// viewRange := 12 ;
25827: LD_ADDR_VAR 0 7
25831: PUSH
25832: LD_INT 12
25834: ST_TO_ADDR
// side := GetSide ( unit ) ;
25835: LD_ADDR_VAR 0 6
25839: PUSH
25840: LD_VAR 0 1
25844: PPUSH
25845: CALL_OW 255
25849: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25850: LD_INT 61
25852: PPUSH
25853: LD_VAR 0 6
25857: PPUSH
25858: CALL_OW 321
25862: PUSH
25863: LD_INT 2
25865: EQUAL
25866: IFFALSE 25876
// viewRange := 16 ;
25868: LD_ADDR_VAR 0 7
25872: PUSH
25873: LD_INT 16
25875: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25876: LD_VAR 0 1
25880: PPUSH
25881: LD_VAR 0 2
25885: PPUSH
25886: LD_VAR 0 3
25890: PPUSH
25891: CALL_OW 297
25895: PUSH
25896: LD_VAR 0 5
25900: GREATER
25901: IFFALSE 25980
// begin ComMoveXY ( unit , x , y ) ;
25903: LD_VAR 0 1
25907: PPUSH
25908: LD_VAR 0 2
25912: PPUSH
25913: LD_VAR 0 3
25917: PPUSH
25918: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25922: LD_INT 35
25924: PPUSH
25925: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25929: LD_VAR 0 1
25933: PPUSH
25934: LD_VAR 0 2
25938: PPUSH
25939: LD_VAR 0 3
25943: PPUSH
25944: CALL 62700 0 3
25948: NOT
25949: IFFALSE 25953
// exit ;
25951: GO 26207
// until GetDistUnitXY ( unit , x , y ) < dist ;
25953: LD_VAR 0 1
25957: PPUSH
25958: LD_VAR 0 2
25962: PPUSH
25963: LD_VAR 0 3
25967: PPUSH
25968: CALL_OW 297
25972: PUSH
25973: LD_VAR 0 5
25977: LESS
25978: IFFALSE 25922
// end ; ComTurnXY ( unit , x , y ) ;
25980: LD_VAR 0 1
25984: PPUSH
25985: LD_VAR 0 2
25989: PPUSH
25990: LD_VAR 0 3
25994: PPUSH
25995: CALL_OW 118
// wait ( 5 ) ;
25999: LD_INT 5
26001: PPUSH
26002: CALL_OW 67
// _d := GetDir ( unit ) ;
26006: LD_ADDR_VAR 0 10
26010: PUSH
26011: LD_VAR 0 1
26015: PPUSH
26016: CALL_OW 254
26020: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26021: LD_ADDR_VAR 0 8
26025: PUSH
26026: LD_VAR 0 1
26030: PPUSH
26031: CALL_OW 250
26035: PPUSH
26036: LD_VAR 0 10
26040: PPUSH
26041: LD_VAR 0 5
26045: PPUSH
26046: CALL_OW 272
26050: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26051: LD_ADDR_VAR 0 9
26055: PUSH
26056: LD_VAR 0 1
26060: PPUSH
26061: CALL_OW 251
26065: PPUSH
26066: LD_VAR 0 10
26070: PPUSH
26071: LD_VAR 0 5
26075: PPUSH
26076: CALL_OW 273
26080: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26081: LD_VAR 0 8
26085: PPUSH
26086: LD_VAR 0 9
26090: PPUSH
26091: CALL_OW 488
26095: NOT
26096: IFFALSE 26100
// exit ;
26098: GO 26207
// ComAnimCustom ( unit , 1 ) ;
26100: LD_VAR 0 1
26104: PPUSH
26105: LD_INT 1
26107: PPUSH
26108: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26112: LD_VAR 0 8
26116: PPUSH
26117: LD_VAR 0 9
26121: PPUSH
26122: LD_VAR 0 6
26126: PPUSH
26127: LD_VAR 0 7
26131: PPUSH
26132: CALL_OW 330
// repeat wait ( 1 ) ;
26136: LD_INT 1
26138: PPUSH
26139: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
26143: LD_VAR 0 1
26147: PPUSH
26148: CALL_OW 316
26152: PUSH
26153: LD_VAR 0 1
26157: PPUSH
26158: CALL_OW 314
26162: OR
26163: PUSH
26164: LD_VAR 0 1
26168: PPUSH
26169: CALL_OW 302
26173: NOT
26174: OR
26175: PUSH
26176: LD_VAR 0 1
26180: PPUSH
26181: CALL_OW 301
26185: OR
26186: IFFALSE 26136
// RemoveSeeing ( _x , _y , side ) ;
26188: LD_VAR 0 8
26192: PPUSH
26193: LD_VAR 0 9
26197: PPUSH
26198: LD_VAR 0 6
26202: PPUSH
26203: CALL_OW 331
// end ; end_of_file
26207: LD_VAR 0 4
26211: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26212: LD_INT 0
26214: PPUSH
26215: PPUSH
// if exist_mode then
26216: LD_VAR 0 2
26220: IFFALSE 26245
// unit := CreateCharacter ( prefix & ident ) else
26222: LD_ADDR_VAR 0 5
26226: PUSH
26227: LD_VAR 0 3
26231: PUSH
26232: LD_VAR 0 1
26236: STR
26237: PPUSH
26238: CALL_OW 34
26242: ST_TO_ADDR
26243: GO 26260
// unit := NewCharacter ( ident ) ;
26245: LD_ADDR_VAR 0 5
26249: PUSH
26250: LD_VAR 0 1
26254: PPUSH
26255: CALL_OW 25
26259: ST_TO_ADDR
// result := unit ;
26260: LD_ADDR_VAR 0 4
26264: PUSH
26265: LD_VAR 0 5
26269: ST_TO_ADDR
// end ;
26270: LD_VAR 0 4
26274: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26275: LD_INT 0
26277: PPUSH
26278: PPUSH
// if not side or not nation then
26279: LD_VAR 0 1
26283: NOT
26284: PUSH
26285: LD_VAR 0 2
26289: NOT
26290: OR
26291: IFFALSE 26295
// exit ;
26293: GO 27063
// case nation of nation_american :
26295: LD_VAR 0 2
26299: PUSH
26300: LD_INT 1
26302: DOUBLE
26303: EQUAL
26304: IFTRUE 26308
26306: GO 26522
26308: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26309: LD_ADDR_VAR 0 4
26313: PUSH
26314: LD_INT 35
26316: PUSH
26317: LD_INT 45
26319: PUSH
26320: LD_INT 46
26322: PUSH
26323: LD_INT 47
26325: PUSH
26326: LD_INT 82
26328: PUSH
26329: LD_INT 83
26331: PUSH
26332: LD_INT 84
26334: PUSH
26335: LD_INT 85
26337: PUSH
26338: LD_INT 86
26340: PUSH
26341: LD_INT 1
26343: PUSH
26344: LD_INT 2
26346: PUSH
26347: LD_INT 6
26349: PUSH
26350: LD_INT 15
26352: PUSH
26353: LD_INT 16
26355: PUSH
26356: LD_INT 7
26358: PUSH
26359: LD_INT 12
26361: PUSH
26362: LD_INT 13
26364: PUSH
26365: LD_INT 10
26367: PUSH
26368: LD_INT 14
26370: PUSH
26371: LD_INT 20
26373: PUSH
26374: LD_INT 21
26376: PUSH
26377: LD_INT 22
26379: PUSH
26380: LD_INT 25
26382: PUSH
26383: LD_INT 32
26385: PUSH
26386: LD_INT 27
26388: PUSH
26389: LD_INT 36
26391: PUSH
26392: LD_INT 69
26394: PUSH
26395: LD_INT 39
26397: PUSH
26398: LD_INT 34
26400: PUSH
26401: LD_INT 40
26403: PUSH
26404: LD_INT 48
26406: PUSH
26407: LD_INT 49
26409: PUSH
26410: LD_INT 50
26412: PUSH
26413: LD_INT 51
26415: PUSH
26416: LD_INT 52
26418: PUSH
26419: LD_INT 53
26421: PUSH
26422: LD_INT 54
26424: PUSH
26425: LD_INT 55
26427: PUSH
26428: LD_INT 56
26430: PUSH
26431: LD_INT 57
26433: PUSH
26434: LD_INT 58
26436: PUSH
26437: LD_INT 59
26439: PUSH
26440: LD_INT 60
26442: PUSH
26443: LD_INT 61
26445: PUSH
26446: LD_INT 62
26448: PUSH
26449: LD_INT 80
26451: PUSH
26452: LD_INT 82
26454: PUSH
26455: LD_INT 83
26457: PUSH
26458: LD_INT 84
26460: PUSH
26461: LD_INT 85
26463: PUSH
26464: LD_INT 86
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: ST_TO_ADDR
26520: GO 26987
26522: LD_INT 2
26524: DOUBLE
26525: EQUAL
26526: IFTRUE 26530
26528: GO 26756
26530: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26531: LD_ADDR_VAR 0 4
26535: PUSH
26536: LD_INT 35
26538: PUSH
26539: LD_INT 45
26541: PUSH
26542: LD_INT 46
26544: PUSH
26545: LD_INT 47
26547: PUSH
26548: LD_INT 82
26550: PUSH
26551: LD_INT 83
26553: PUSH
26554: LD_INT 84
26556: PUSH
26557: LD_INT 85
26559: PUSH
26560: LD_INT 87
26562: PUSH
26563: LD_INT 70
26565: PUSH
26566: LD_INT 1
26568: PUSH
26569: LD_INT 11
26571: PUSH
26572: LD_INT 3
26574: PUSH
26575: LD_INT 4
26577: PUSH
26578: LD_INT 5
26580: PUSH
26581: LD_INT 6
26583: PUSH
26584: LD_INT 15
26586: PUSH
26587: LD_INT 18
26589: PUSH
26590: LD_INT 7
26592: PUSH
26593: LD_INT 17
26595: PUSH
26596: LD_INT 8
26598: PUSH
26599: LD_INT 20
26601: PUSH
26602: LD_INT 21
26604: PUSH
26605: LD_INT 22
26607: PUSH
26608: LD_INT 72
26610: PUSH
26611: LD_INT 26
26613: PUSH
26614: LD_INT 69
26616: PUSH
26617: LD_INT 39
26619: PUSH
26620: LD_INT 40
26622: PUSH
26623: LD_INT 41
26625: PUSH
26626: LD_INT 42
26628: PUSH
26629: LD_INT 43
26631: PUSH
26632: LD_INT 48
26634: PUSH
26635: LD_INT 49
26637: PUSH
26638: LD_INT 50
26640: PUSH
26641: LD_INT 51
26643: PUSH
26644: LD_INT 52
26646: PUSH
26647: LD_INT 53
26649: PUSH
26650: LD_INT 54
26652: PUSH
26653: LD_INT 55
26655: PUSH
26656: LD_INT 56
26658: PUSH
26659: LD_INT 60
26661: PUSH
26662: LD_INT 61
26664: PUSH
26665: LD_INT 62
26667: PUSH
26668: LD_INT 66
26670: PUSH
26671: LD_INT 67
26673: PUSH
26674: LD_INT 68
26676: PUSH
26677: LD_INT 81
26679: PUSH
26680: LD_INT 82
26682: PUSH
26683: LD_INT 83
26685: PUSH
26686: LD_INT 84
26688: PUSH
26689: LD_INT 85
26691: PUSH
26692: LD_INT 87
26694: PUSH
26695: LD_INT 88
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: ST_TO_ADDR
26754: GO 26987
26756: LD_INT 3
26758: DOUBLE
26759: EQUAL
26760: IFTRUE 26764
26762: GO 26986
26764: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26765: LD_ADDR_VAR 0 4
26769: PUSH
26770: LD_INT 46
26772: PUSH
26773: LD_INT 47
26775: PUSH
26776: LD_INT 1
26778: PUSH
26779: LD_INT 2
26781: PUSH
26782: LD_INT 82
26784: PUSH
26785: LD_INT 83
26787: PUSH
26788: LD_INT 84
26790: PUSH
26791: LD_INT 85
26793: PUSH
26794: LD_INT 86
26796: PUSH
26797: LD_INT 11
26799: PUSH
26800: LD_INT 9
26802: PUSH
26803: LD_INT 20
26805: PUSH
26806: LD_INT 19
26808: PUSH
26809: LD_INT 21
26811: PUSH
26812: LD_INT 24
26814: PUSH
26815: LD_INT 22
26817: PUSH
26818: LD_INT 25
26820: PUSH
26821: LD_INT 28
26823: PUSH
26824: LD_INT 29
26826: PUSH
26827: LD_INT 30
26829: PUSH
26830: LD_INT 31
26832: PUSH
26833: LD_INT 37
26835: PUSH
26836: LD_INT 38
26838: PUSH
26839: LD_INT 32
26841: PUSH
26842: LD_INT 27
26844: PUSH
26845: LD_INT 33
26847: PUSH
26848: LD_INT 69
26850: PUSH
26851: LD_INT 39
26853: PUSH
26854: LD_INT 34
26856: PUSH
26857: LD_INT 40
26859: PUSH
26860: LD_INT 71
26862: PUSH
26863: LD_INT 23
26865: PUSH
26866: LD_INT 44
26868: PUSH
26869: LD_INT 48
26871: PUSH
26872: LD_INT 49
26874: PUSH
26875: LD_INT 50
26877: PUSH
26878: LD_INT 51
26880: PUSH
26881: LD_INT 52
26883: PUSH
26884: LD_INT 53
26886: PUSH
26887: LD_INT 54
26889: PUSH
26890: LD_INT 55
26892: PUSH
26893: LD_INT 56
26895: PUSH
26896: LD_INT 57
26898: PUSH
26899: LD_INT 58
26901: PUSH
26902: LD_INT 59
26904: PUSH
26905: LD_INT 63
26907: PUSH
26908: LD_INT 64
26910: PUSH
26911: LD_INT 65
26913: PUSH
26914: LD_INT 82
26916: PUSH
26917: LD_INT 83
26919: PUSH
26920: LD_INT 84
26922: PUSH
26923: LD_INT 85
26925: PUSH
26926: LD_INT 86
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: LIST
26972: LIST
26973: LIST
26974: LIST
26975: LIST
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: ST_TO_ADDR
26984: GO 26987
26986: POP
// if state > - 1 and state < 3 then
26987: LD_VAR 0 3
26991: PUSH
26992: LD_INT 1
26994: NEG
26995: GREATER
26996: PUSH
26997: LD_VAR 0 3
27001: PUSH
27002: LD_INT 3
27004: LESS
27005: AND
27006: IFFALSE 27063
// for i in result do
27008: LD_ADDR_VAR 0 5
27012: PUSH
27013: LD_VAR 0 4
27017: PUSH
27018: FOR_IN
27019: IFFALSE 27061
// if GetTech ( i , side ) <> state then
27021: LD_VAR 0 5
27025: PPUSH
27026: LD_VAR 0 1
27030: PPUSH
27031: CALL_OW 321
27035: PUSH
27036: LD_VAR 0 3
27040: NONEQUAL
27041: IFFALSE 27059
// result := result diff i ;
27043: LD_ADDR_VAR 0 4
27047: PUSH
27048: LD_VAR 0 4
27052: PUSH
27053: LD_VAR 0 5
27057: DIFF
27058: ST_TO_ADDR
27059: GO 27018
27061: POP
27062: POP
// end ;
27063: LD_VAR 0 4
27067: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27068: LD_INT 0
27070: PPUSH
27071: PPUSH
27072: PPUSH
// result := true ;
27073: LD_ADDR_VAR 0 3
27077: PUSH
27078: LD_INT 1
27080: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27081: LD_ADDR_VAR 0 5
27085: PUSH
27086: LD_VAR 0 2
27090: PPUSH
27091: CALL_OW 480
27095: ST_TO_ADDR
// if not tmp then
27096: LD_VAR 0 5
27100: NOT
27101: IFFALSE 27105
// exit ;
27103: GO 27154
// for i in tmp do
27105: LD_ADDR_VAR 0 4
27109: PUSH
27110: LD_VAR 0 5
27114: PUSH
27115: FOR_IN
27116: IFFALSE 27152
// if GetTech ( i , side ) <> state_researched then
27118: LD_VAR 0 4
27122: PPUSH
27123: LD_VAR 0 1
27127: PPUSH
27128: CALL_OW 321
27132: PUSH
27133: LD_INT 2
27135: NONEQUAL
27136: IFFALSE 27150
// begin result := false ;
27138: LD_ADDR_VAR 0 3
27142: PUSH
27143: LD_INT 0
27145: ST_TO_ADDR
// exit ;
27146: POP
27147: POP
27148: GO 27154
// end ;
27150: GO 27115
27152: POP
27153: POP
// end ;
27154: LD_VAR 0 3
27158: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27159: LD_INT 0
27161: PPUSH
27162: PPUSH
27163: PPUSH
27164: PPUSH
27165: PPUSH
27166: PPUSH
27167: PPUSH
27168: PPUSH
27169: PPUSH
27170: PPUSH
27171: PPUSH
27172: PPUSH
27173: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27174: LD_VAR 0 1
27178: NOT
27179: PUSH
27180: LD_VAR 0 1
27184: PPUSH
27185: CALL_OW 257
27189: PUSH
27190: LD_INT 9
27192: NONEQUAL
27193: OR
27194: IFFALSE 27198
// exit ;
27196: GO 27771
// side := GetSide ( unit ) ;
27198: LD_ADDR_VAR 0 9
27202: PUSH
27203: LD_VAR 0 1
27207: PPUSH
27208: CALL_OW 255
27212: ST_TO_ADDR
// tech_space := tech_spacanom ;
27213: LD_ADDR_VAR 0 12
27217: PUSH
27218: LD_INT 29
27220: ST_TO_ADDR
// tech_time := tech_taurad ;
27221: LD_ADDR_VAR 0 13
27225: PUSH
27226: LD_INT 28
27228: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27229: LD_ADDR_VAR 0 11
27233: PUSH
27234: LD_VAR 0 1
27238: PPUSH
27239: CALL_OW 310
27243: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27244: LD_VAR 0 11
27248: PPUSH
27249: CALL_OW 247
27253: PUSH
27254: LD_INT 2
27256: EQUAL
27257: IFFALSE 27261
// exit ;
27259: GO 27771
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27261: LD_ADDR_VAR 0 8
27265: PUSH
27266: LD_INT 81
27268: PUSH
27269: LD_VAR 0 9
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: LD_INT 3
27280: PUSH
27281: LD_INT 21
27283: PUSH
27284: LD_INT 3
27286: PUSH
27287: EMPTY
27288: LIST
27289: LIST
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PPUSH
27299: CALL_OW 69
27303: ST_TO_ADDR
// if not tmp then
27304: LD_VAR 0 8
27308: NOT
27309: IFFALSE 27313
// exit ;
27311: GO 27771
// if in_unit then
27313: LD_VAR 0 11
27317: IFFALSE 27341
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27319: LD_ADDR_VAR 0 10
27323: PUSH
27324: LD_VAR 0 8
27328: PPUSH
27329: LD_VAR 0 11
27333: PPUSH
27334: CALL_OW 74
27338: ST_TO_ADDR
27339: GO 27361
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27341: LD_ADDR_VAR 0 10
27345: PUSH
27346: LD_VAR 0 8
27350: PPUSH
27351: LD_VAR 0 1
27355: PPUSH
27356: CALL_OW 74
27360: ST_TO_ADDR
// if not enemy then
27361: LD_VAR 0 10
27365: NOT
27366: IFFALSE 27370
// exit ;
27368: GO 27771
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27370: LD_VAR 0 11
27374: PUSH
27375: LD_VAR 0 11
27379: PPUSH
27380: LD_VAR 0 10
27384: PPUSH
27385: CALL_OW 296
27389: PUSH
27390: LD_INT 13
27392: GREATER
27393: AND
27394: PUSH
27395: LD_VAR 0 1
27399: PPUSH
27400: LD_VAR 0 10
27404: PPUSH
27405: CALL_OW 296
27409: PUSH
27410: LD_INT 12
27412: GREATER
27413: OR
27414: IFFALSE 27418
// exit ;
27416: GO 27771
// missile := [ 1 ] ;
27418: LD_ADDR_VAR 0 14
27422: PUSH
27423: LD_INT 1
27425: PUSH
27426: EMPTY
27427: LIST
27428: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27429: LD_VAR 0 9
27433: PPUSH
27434: LD_VAR 0 12
27438: PPUSH
27439: CALL_OW 325
27443: IFFALSE 27472
// missile := Replace ( missile , missile + 1 , 2 ) ;
27445: LD_ADDR_VAR 0 14
27449: PUSH
27450: LD_VAR 0 14
27454: PPUSH
27455: LD_VAR 0 14
27459: PUSH
27460: LD_INT 1
27462: PLUS
27463: PPUSH
27464: LD_INT 2
27466: PPUSH
27467: CALL_OW 1
27471: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27472: LD_VAR 0 9
27476: PPUSH
27477: LD_VAR 0 13
27481: PPUSH
27482: CALL_OW 325
27486: PUSH
27487: LD_VAR 0 10
27491: PPUSH
27492: CALL_OW 255
27496: PPUSH
27497: LD_VAR 0 13
27501: PPUSH
27502: CALL_OW 325
27506: NOT
27507: AND
27508: IFFALSE 27537
// missile := Replace ( missile , missile + 1 , 3 ) ;
27510: LD_ADDR_VAR 0 14
27514: PUSH
27515: LD_VAR 0 14
27519: PPUSH
27520: LD_VAR 0 14
27524: PUSH
27525: LD_INT 1
27527: PLUS
27528: PPUSH
27529: LD_INT 3
27531: PPUSH
27532: CALL_OW 1
27536: ST_TO_ADDR
// if missile < 2 then
27537: LD_VAR 0 14
27541: PUSH
27542: LD_INT 2
27544: LESS
27545: IFFALSE 27549
// exit ;
27547: GO 27771
// x := GetX ( enemy ) ;
27549: LD_ADDR_VAR 0 4
27553: PUSH
27554: LD_VAR 0 10
27558: PPUSH
27559: CALL_OW 250
27563: ST_TO_ADDR
// y := GetY ( enemy ) ;
27564: LD_ADDR_VAR 0 5
27568: PUSH
27569: LD_VAR 0 10
27573: PPUSH
27574: CALL_OW 251
27578: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27579: LD_ADDR_VAR 0 6
27583: PUSH
27584: LD_VAR 0 4
27588: PUSH
27589: LD_INT 1
27591: NEG
27592: PPUSH
27593: LD_INT 1
27595: PPUSH
27596: CALL_OW 12
27600: PLUS
27601: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27602: LD_ADDR_VAR 0 7
27606: PUSH
27607: LD_VAR 0 5
27611: PUSH
27612: LD_INT 1
27614: NEG
27615: PPUSH
27616: LD_INT 1
27618: PPUSH
27619: CALL_OW 12
27623: PLUS
27624: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27625: LD_VAR 0 6
27629: PPUSH
27630: LD_VAR 0 7
27634: PPUSH
27635: CALL_OW 488
27639: NOT
27640: IFFALSE 27662
// begin _x := x ;
27642: LD_ADDR_VAR 0 6
27646: PUSH
27647: LD_VAR 0 4
27651: ST_TO_ADDR
// _y := y ;
27652: LD_ADDR_VAR 0 7
27656: PUSH
27657: LD_VAR 0 5
27661: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27662: LD_ADDR_VAR 0 3
27666: PUSH
27667: LD_INT 1
27669: PPUSH
27670: LD_VAR 0 14
27674: PPUSH
27675: CALL_OW 12
27679: ST_TO_ADDR
// case i of 1 :
27680: LD_VAR 0 3
27684: PUSH
27685: LD_INT 1
27687: DOUBLE
27688: EQUAL
27689: IFTRUE 27693
27691: GO 27710
27693: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27694: LD_VAR 0 1
27698: PPUSH
27699: LD_VAR 0 10
27703: PPUSH
27704: CALL_OW 115
27708: GO 27771
27710: LD_INT 2
27712: DOUBLE
27713: EQUAL
27714: IFTRUE 27718
27716: GO 27740
27718: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27719: LD_VAR 0 1
27723: PPUSH
27724: LD_VAR 0 6
27728: PPUSH
27729: LD_VAR 0 7
27733: PPUSH
27734: CALL_OW 153
27738: GO 27771
27740: LD_INT 3
27742: DOUBLE
27743: EQUAL
27744: IFTRUE 27748
27746: GO 27770
27748: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27749: LD_VAR 0 1
27753: PPUSH
27754: LD_VAR 0 6
27758: PPUSH
27759: LD_VAR 0 7
27763: PPUSH
27764: CALL_OW 154
27768: GO 27771
27770: POP
// end ;
27771: LD_VAR 0 2
27775: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27776: LD_INT 0
27778: PPUSH
27779: PPUSH
27780: PPUSH
27781: PPUSH
27782: PPUSH
27783: PPUSH
// if not unit or not building then
27784: LD_VAR 0 1
27788: NOT
27789: PUSH
27790: LD_VAR 0 2
27794: NOT
27795: OR
27796: IFFALSE 27800
// exit ;
27798: GO 27958
// x := GetX ( building ) ;
27800: LD_ADDR_VAR 0 5
27804: PUSH
27805: LD_VAR 0 2
27809: PPUSH
27810: CALL_OW 250
27814: ST_TO_ADDR
// y := GetY ( building ) ;
27815: LD_ADDR_VAR 0 6
27819: PUSH
27820: LD_VAR 0 2
27824: PPUSH
27825: CALL_OW 251
27829: ST_TO_ADDR
// for i = 0 to 5 do
27830: LD_ADDR_VAR 0 4
27834: PUSH
27835: DOUBLE
27836: LD_INT 0
27838: DEC
27839: ST_TO_ADDR
27840: LD_INT 5
27842: PUSH
27843: FOR_TO
27844: IFFALSE 27956
// begin _x := ShiftX ( x , i , 3 ) ;
27846: LD_ADDR_VAR 0 7
27850: PUSH
27851: LD_VAR 0 5
27855: PPUSH
27856: LD_VAR 0 4
27860: PPUSH
27861: LD_INT 3
27863: PPUSH
27864: CALL_OW 272
27868: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27869: LD_ADDR_VAR 0 8
27873: PUSH
27874: LD_VAR 0 6
27878: PPUSH
27879: LD_VAR 0 4
27883: PPUSH
27884: LD_INT 3
27886: PPUSH
27887: CALL_OW 273
27891: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27892: LD_VAR 0 7
27896: PPUSH
27897: LD_VAR 0 8
27901: PPUSH
27902: CALL_OW 488
27906: NOT
27907: IFFALSE 27911
// continue ;
27909: GO 27843
// if HexInfo ( _x , _y ) = 0 then
27911: LD_VAR 0 7
27915: PPUSH
27916: LD_VAR 0 8
27920: PPUSH
27921: CALL_OW 428
27925: PUSH
27926: LD_INT 0
27928: EQUAL
27929: IFFALSE 27954
// begin ComMoveXY ( unit , _x , _y ) ;
27931: LD_VAR 0 1
27935: PPUSH
27936: LD_VAR 0 7
27940: PPUSH
27941: LD_VAR 0 8
27945: PPUSH
27946: CALL_OW 111
// exit ;
27950: POP
27951: POP
27952: GO 27958
// end ; end ;
27954: GO 27843
27956: POP
27957: POP
// end ;
27958: LD_VAR 0 3
27962: RET
// export function ScanBase ( side , base_area ) ; begin
27963: LD_INT 0
27965: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27966: LD_ADDR_VAR 0 3
27970: PUSH
27971: LD_VAR 0 2
27975: PPUSH
27976: LD_INT 81
27978: PUSH
27979: LD_VAR 0 1
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PPUSH
27988: CALL_OW 70
27992: ST_TO_ADDR
// end ;
27993: LD_VAR 0 3
27997: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27998: LD_INT 0
28000: PPUSH
28001: PPUSH
28002: PPUSH
28003: PPUSH
// result := false ;
28004: LD_ADDR_VAR 0 2
28008: PUSH
28009: LD_INT 0
28011: ST_TO_ADDR
// side := GetSide ( unit ) ;
28012: LD_ADDR_VAR 0 3
28016: PUSH
28017: LD_VAR 0 1
28021: PPUSH
28022: CALL_OW 255
28026: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28027: LD_ADDR_VAR 0 4
28031: PUSH
28032: LD_VAR 0 1
28036: PPUSH
28037: CALL_OW 248
28041: ST_TO_ADDR
// case nat of 1 :
28042: LD_VAR 0 4
28046: PUSH
28047: LD_INT 1
28049: DOUBLE
28050: EQUAL
28051: IFTRUE 28055
28053: GO 28066
28055: POP
// tech := tech_lassight ; 2 :
28056: LD_ADDR_VAR 0 5
28060: PUSH
28061: LD_INT 12
28063: ST_TO_ADDR
28064: GO 28105
28066: LD_INT 2
28068: DOUBLE
28069: EQUAL
28070: IFTRUE 28074
28072: GO 28085
28074: POP
// tech := tech_mortar ; 3 :
28075: LD_ADDR_VAR 0 5
28079: PUSH
28080: LD_INT 41
28082: ST_TO_ADDR
28083: GO 28105
28085: LD_INT 3
28087: DOUBLE
28088: EQUAL
28089: IFTRUE 28093
28091: GO 28104
28093: POP
// tech := tech_bazooka ; end ;
28094: LD_ADDR_VAR 0 5
28098: PUSH
28099: LD_INT 44
28101: ST_TO_ADDR
28102: GO 28105
28104: POP
// if Researched ( side , tech ) then
28105: LD_VAR 0 3
28109: PPUSH
28110: LD_VAR 0 5
28114: PPUSH
28115: CALL_OW 325
28119: IFFALSE 28146
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28121: LD_ADDR_VAR 0 2
28125: PUSH
28126: LD_INT 5
28128: PUSH
28129: LD_INT 8
28131: PUSH
28132: LD_INT 9
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: LIST
28139: PUSH
28140: LD_VAR 0 4
28144: ARRAY
28145: ST_TO_ADDR
// end ;
28146: LD_VAR 0 2
28150: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28151: LD_INT 0
28153: PPUSH
28154: PPUSH
28155: PPUSH
// if not mines then
28156: LD_VAR 0 2
28160: NOT
28161: IFFALSE 28165
// exit ;
28163: GO 28309
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28165: LD_ADDR_VAR 0 5
28169: PUSH
28170: LD_INT 81
28172: PUSH
28173: LD_VAR 0 1
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PUSH
28182: LD_INT 3
28184: PUSH
28185: LD_INT 21
28187: PUSH
28188: LD_INT 3
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: PPUSH
28203: CALL_OW 69
28207: ST_TO_ADDR
// for i in mines do
28208: LD_ADDR_VAR 0 4
28212: PUSH
28213: LD_VAR 0 2
28217: PUSH
28218: FOR_IN
28219: IFFALSE 28307
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28221: LD_VAR 0 4
28225: PUSH
28226: LD_INT 1
28228: ARRAY
28229: PPUSH
28230: LD_VAR 0 4
28234: PUSH
28235: LD_INT 2
28237: ARRAY
28238: PPUSH
28239: CALL_OW 458
28243: NOT
28244: IFFALSE 28248
// continue ;
28246: GO 28218
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28248: LD_VAR 0 4
28252: PUSH
28253: LD_INT 1
28255: ARRAY
28256: PPUSH
28257: LD_VAR 0 4
28261: PUSH
28262: LD_INT 2
28264: ARRAY
28265: PPUSH
28266: CALL_OW 428
28270: PUSH
28271: LD_VAR 0 5
28275: IN
28276: IFFALSE 28305
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28278: LD_VAR 0 4
28282: PUSH
28283: LD_INT 1
28285: ARRAY
28286: PPUSH
28287: LD_VAR 0 4
28291: PUSH
28292: LD_INT 2
28294: ARRAY
28295: PPUSH
28296: LD_VAR 0 1
28300: PPUSH
28301: CALL_OW 456
// end ;
28305: GO 28218
28307: POP
28308: POP
// end ;
28309: LD_VAR 0 3
28313: RET
// export function Count ( array ) ; begin
28314: LD_INT 0
28316: PPUSH
// result := array + 0 ;
28317: LD_ADDR_VAR 0 2
28321: PUSH
28322: LD_VAR 0 1
28326: PUSH
28327: LD_INT 0
28329: PLUS
28330: ST_TO_ADDR
// end ;
28331: LD_VAR 0 2
28335: RET
// export function IsEmpty ( building ) ; begin
28336: LD_INT 0
28338: PPUSH
// if not building then
28339: LD_VAR 0 1
28343: NOT
28344: IFFALSE 28348
// exit ;
28346: GO 28391
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28348: LD_ADDR_VAR 0 2
28352: PUSH
28353: LD_VAR 0 1
28357: PUSH
28358: LD_INT 22
28360: PUSH
28361: LD_VAR 0 1
28365: PPUSH
28366: CALL_OW 255
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: PUSH
28375: LD_INT 58
28377: PUSH
28378: EMPTY
28379: LIST
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PPUSH
28385: CALL_OW 69
28389: IN
28390: ST_TO_ADDR
// end ;
28391: LD_VAR 0 2
28395: RET
// export function IsNotFull ( building ) ; var places ; begin
28396: LD_INT 0
28398: PPUSH
28399: PPUSH
// if not building then
28400: LD_VAR 0 1
28404: NOT
28405: IFFALSE 28409
// exit ;
28407: GO 28437
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
28409: LD_ADDR_VAR 0 2
28413: PUSH
28414: LD_VAR 0 1
28418: PPUSH
28419: LD_INT 3
28421: PUSH
28422: LD_INT 62
28424: PUSH
28425: EMPTY
28426: LIST
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: PPUSH
28432: CALL_OW 72
28436: ST_TO_ADDR
// end ;
28437: LD_VAR 0 2
28441: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28442: LD_INT 0
28444: PPUSH
28445: PPUSH
28446: PPUSH
28447: PPUSH
// tmp := [ ] ;
28448: LD_ADDR_VAR 0 3
28452: PUSH
28453: EMPTY
28454: ST_TO_ADDR
// list := [ ] ;
28455: LD_ADDR_VAR 0 5
28459: PUSH
28460: EMPTY
28461: ST_TO_ADDR
// for i = 16 to 25 do
28462: LD_ADDR_VAR 0 4
28466: PUSH
28467: DOUBLE
28468: LD_INT 16
28470: DEC
28471: ST_TO_ADDR
28472: LD_INT 25
28474: PUSH
28475: FOR_TO
28476: IFFALSE 28549
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28478: LD_ADDR_VAR 0 3
28482: PUSH
28483: LD_VAR 0 3
28487: PUSH
28488: LD_INT 22
28490: PUSH
28491: LD_VAR 0 1
28495: PPUSH
28496: CALL_OW 255
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: PUSH
28505: LD_INT 91
28507: PUSH
28508: LD_VAR 0 1
28512: PUSH
28513: LD_INT 6
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 30
28523: PUSH
28524: LD_VAR 0 4
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: LIST
28537: PUSH
28538: EMPTY
28539: LIST
28540: PPUSH
28541: CALL_OW 69
28545: ADD
28546: ST_TO_ADDR
28547: GO 28475
28549: POP
28550: POP
// for i = 1 to tmp do
28551: LD_ADDR_VAR 0 4
28555: PUSH
28556: DOUBLE
28557: LD_INT 1
28559: DEC
28560: ST_TO_ADDR
28561: LD_VAR 0 3
28565: PUSH
28566: FOR_TO
28567: IFFALSE 28655
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28569: LD_ADDR_VAR 0 5
28573: PUSH
28574: LD_VAR 0 5
28578: PUSH
28579: LD_VAR 0 3
28583: PUSH
28584: LD_VAR 0 4
28588: ARRAY
28589: PPUSH
28590: CALL_OW 266
28594: PUSH
28595: LD_VAR 0 3
28599: PUSH
28600: LD_VAR 0 4
28604: ARRAY
28605: PPUSH
28606: CALL_OW 250
28610: PUSH
28611: LD_VAR 0 3
28615: PUSH
28616: LD_VAR 0 4
28620: ARRAY
28621: PPUSH
28622: CALL_OW 251
28626: PUSH
28627: LD_VAR 0 3
28631: PUSH
28632: LD_VAR 0 4
28636: ARRAY
28637: PPUSH
28638: CALL_OW 254
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: PUSH
28649: EMPTY
28650: LIST
28651: ADD
28652: ST_TO_ADDR
28653: GO 28566
28655: POP
28656: POP
// result := list ;
28657: LD_ADDR_VAR 0 2
28661: PUSH
28662: LD_VAR 0 5
28666: ST_TO_ADDR
// end ;
28667: LD_VAR 0 2
28671: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28672: LD_INT 0
28674: PPUSH
28675: PPUSH
28676: PPUSH
28677: PPUSH
28678: PPUSH
28679: PPUSH
28680: PPUSH
// if not factory then
28681: LD_VAR 0 1
28685: NOT
28686: IFFALSE 28690
// exit ;
28688: GO 29283
// if control = control_apeman then
28690: LD_VAR 0 4
28694: PUSH
28695: LD_INT 5
28697: EQUAL
28698: IFFALSE 28807
// begin tmp := UnitsInside ( factory ) ;
28700: LD_ADDR_VAR 0 8
28704: PUSH
28705: LD_VAR 0 1
28709: PPUSH
28710: CALL_OW 313
28714: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28715: LD_VAR 0 8
28719: PPUSH
28720: LD_INT 25
28722: PUSH
28723: LD_INT 12
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: PPUSH
28730: CALL_OW 72
28734: NOT
28735: IFFALSE 28745
// control := control_manual ;
28737: LD_ADDR_VAR 0 4
28741: PUSH
28742: LD_INT 1
28744: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28745: LD_ADDR_VAR 0 8
28749: PUSH
28750: LD_VAR 0 1
28754: PPUSH
28755: CALL 28442 0 1
28759: ST_TO_ADDR
// if tmp then
28760: LD_VAR 0 8
28764: IFFALSE 28807
// begin for i in tmp do
28766: LD_ADDR_VAR 0 7
28770: PUSH
28771: LD_VAR 0 8
28775: PUSH
28776: FOR_IN
28777: IFFALSE 28805
// if i [ 1 ] = b_ext_radio then
28779: LD_VAR 0 7
28783: PUSH
28784: LD_INT 1
28786: ARRAY
28787: PUSH
28788: LD_INT 22
28790: EQUAL
28791: IFFALSE 28803
// begin control := control_remote ;
28793: LD_ADDR_VAR 0 4
28797: PUSH
28798: LD_INT 2
28800: ST_TO_ADDR
// break ;
28801: GO 28805
// end ;
28803: GO 28776
28805: POP
28806: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28807: LD_VAR 0 1
28811: PPUSH
28812: LD_VAR 0 2
28816: PPUSH
28817: LD_VAR 0 3
28821: PPUSH
28822: LD_VAR 0 4
28826: PPUSH
28827: LD_VAR 0 5
28831: PPUSH
28832: CALL_OW 448
28836: IFFALSE 28871
// begin result := [ chassis , engine , control , weapon ] ;
28838: LD_ADDR_VAR 0 6
28842: PUSH
28843: LD_VAR 0 2
28847: PUSH
28848: LD_VAR 0 3
28852: PUSH
28853: LD_VAR 0 4
28857: PUSH
28858: LD_VAR 0 5
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: ST_TO_ADDR
// exit ;
28869: GO 29283
// end ; _chassis := AvailableChassisList ( factory ) ;
28871: LD_ADDR_VAR 0 9
28875: PUSH
28876: LD_VAR 0 1
28880: PPUSH
28881: CALL_OW 475
28885: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28886: LD_ADDR_VAR 0 11
28890: PUSH
28891: LD_VAR 0 1
28895: PPUSH
28896: CALL_OW 476
28900: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28901: LD_ADDR_VAR 0 12
28905: PUSH
28906: LD_VAR 0 1
28910: PPUSH
28911: CALL_OW 477
28915: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28916: LD_ADDR_VAR 0 10
28920: PUSH
28921: LD_VAR 0 1
28925: PPUSH
28926: CALL_OW 478
28930: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28931: LD_VAR 0 9
28935: NOT
28936: PUSH
28937: LD_VAR 0 11
28941: NOT
28942: OR
28943: PUSH
28944: LD_VAR 0 12
28948: NOT
28949: OR
28950: PUSH
28951: LD_VAR 0 10
28955: NOT
28956: OR
28957: IFFALSE 28992
// begin result := [ chassis , engine , control , weapon ] ;
28959: LD_ADDR_VAR 0 6
28963: PUSH
28964: LD_VAR 0 2
28968: PUSH
28969: LD_VAR 0 3
28973: PUSH
28974: LD_VAR 0 4
28978: PUSH
28979: LD_VAR 0 5
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: ST_TO_ADDR
// exit ;
28990: GO 29283
// end ; if not chassis in _chassis then
28992: LD_VAR 0 2
28996: PUSH
28997: LD_VAR 0 9
29001: IN
29002: NOT
29003: IFFALSE 29029
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29005: LD_ADDR_VAR 0 2
29009: PUSH
29010: LD_VAR 0 9
29014: PUSH
29015: LD_INT 1
29017: PPUSH
29018: LD_VAR 0 9
29022: PPUSH
29023: CALL_OW 12
29027: ARRAY
29028: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29029: LD_VAR 0 2
29033: PPUSH
29034: LD_VAR 0 3
29038: PPUSH
29039: CALL 29288 0 2
29043: NOT
29044: IFFALSE 29103
// repeat engine := _engine [ 1 ] ;
29046: LD_ADDR_VAR 0 3
29050: PUSH
29051: LD_VAR 0 11
29055: PUSH
29056: LD_INT 1
29058: ARRAY
29059: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29060: LD_ADDR_VAR 0 11
29064: PUSH
29065: LD_VAR 0 11
29069: PPUSH
29070: LD_INT 1
29072: PPUSH
29073: CALL_OW 3
29077: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29078: LD_VAR 0 2
29082: PPUSH
29083: LD_VAR 0 3
29087: PPUSH
29088: CALL 29288 0 2
29092: PUSH
29093: LD_VAR 0 11
29097: PUSH
29098: EMPTY
29099: EQUAL
29100: OR
29101: IFFALSE 29046
// if not control in _control then
29103: LD_VAR 0 4
29107: PUSH
29108: LD_VAR 0 12
29112: IN
29113: NOT
29114: IFFALSE 29140
// control := _control [ rand ( 1 , _control ) ] ;
29116: LD_ADDR_VAR 0 4
29120: PUSH
29121: LD_VAR 0 12
29125: PUSH
29126: LD_INT 1
29128: PPUSH
29129: LD_VAR 0 12
29133: PPUSH
29134: CALL_OW 12
29138: ARRAY
29139: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29140: LD_VAR 0 2
29144: PPUSH
29145: LD_VAR 0 5
29149: PPUSH
29150: CALL 29508 0 2
29154: NOT
29155: IFFALSE 29214
// repeat weapon := _weapon [ 1 ] ;
29157: LD_ADDR_VAR 0 5
29161: PUSH
29162: LD_VAR 0 10
29166: PUSH
29167: LD_INT 1
29169: ARRAY
29170: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29171: LD_ADDR_VAR 0 10
29175: PUSH
29176: LD_VAR 0 10
29180: PPUSH
29181: LD_INT 1
29183: PPUSH
29184: CALL_OW 3
29188: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29189: LD_VAR 0 2
29193: PPUSH
29194: LD_VAR 0 5
29198: PPUSH
29199: CALL 29508 0 2
29203: PUSH
29204: LD_VAR 0 10
29208: PUSH
29209: EMPTY
29210: EQUAL
29211: OR
29212: IFFALSE 29157
// result := [ ] ;
29214: LD_ADDR_VAR 0 6
29218: PUSH
29219: EMPTY
29220: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29221: LD_VAR 0 1
29225: PPUSH
29226: LD_VAR 0 2
29230: PPUSH
29231: LD_VAR 0 3
29235: PPUSH
29236: LD_VAR 0 4
29240: PPUSH
29241: LD_VAR 0 5
29245: PPUSH
29246: CALL_OW 448
29250: IFFALSE 29283
// result := [ chassis , engine , control , weapon ] ;
29252: LD_ADDR_VAR 0 6
29256: PUSH
29257: LD_VAR 0 2
29261: PUSH
29262: LD_VAR 0 3
29266: PUSH
29267: LD_VAR 0 4
29271: PUSH
29272: LD_VAR 0 5
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: ST_TO_ADDR
// end ;
29283: LD_VAR 0 6
29287: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29288: LD_INT 0
29290: PPUSH
// if not chassis or not engine then
29291: LD_VAR 0 1
29295: NOT
29296: PUSH
29297: LD_VAR 0 2
29301: NOT
29302: OR
29303: IFFALSE 29307
// exit ;
29305: GO 29503
// case engine of engine_solar :
29307: LD_VAR 0 2
29311: PUSH
29312: LD_INT 2
29314: DOUBLE
29315: EQUAL
29316: IFTRUE 29320
29318: GO 29358
29320: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29321: LD_ADDR_VAR 0 3
29325: PUSH
29326: LD_INT 11
29328: PUSH
29329: LD_INT 12
29331: PUSH
29332: LD_INT 13
29334: PUSH
29335: LD_INT 14
29337: PUSH
29338: LD_INT 1
29340: PUSH
29341: LD_INT 2
29343: PUSH
29344: LD_INT 3
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: LIST
29351: LIST
29352: LIST
29353: LIST
29354: LIST
29355: ST_TO_ADDR
29356: GO 29487
29358: LD_INT 1
29360: DOUBLE
29361: EQUAL
29362: IFTRUE 29366
29364: GO 29428
29366: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29367: LD_ADDR_VAR 0 3
29371: PUSH
29372: LD_INT 11
29374: PUSH
29375: LD_INT 12
29377: PUSH
29378: LD_INT 13
29380: PUSH
29381: LD_INT 14
29383: PUSH
29384: LD_INT 1
29386: PUSH
29387: LD_INT 2
29389: PUSH
29390: LD_INT 3
29392: PUSH
29393: LD_INT 4
29395: PUSH
29396: LD_INT 5
29398: PUSH
29399: LD_INT 21
29401: PUSH
29402: LD_INT 23
29404: PUSH
29405: LD_INT 22
29407: PUSH
29408: LD_INT 24
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: LIST
29415: LIST
29416: LIST
29417: LIST
29418: LIST
29419: LIST
29420: LIST
29421: LIST
29422: LIST
29423: LIST
29424: LIST
29425: ST_TO_ADDR
29426: GO 29487
29428: LD_INT 3
29430: DOUBLE
29431: EQUAL
29432: IFTRUE 29436
29434: GO 29486
29436: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29437: LD_ADDR_VAR 0 3
29441: PUSH
29442: LD_INT 13
29444: PUSH
29445: LD_INT 14
29447: PUSH
29448: LD_INT 2
29450: PUSH
29451: LD_INT 3
29453: PUSH
29454: LD_INT 4
29456: PUSH
29457: LD_INT 5
29459: PUSH
29460: LD_INT 21
29462: PUSH
29463: LD_INT 22
29465: PUSH
29466: LD_INT 23
29468: PUSH
29469: LD_INT 24
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: LIST
29476: LIST
29477: LIST
29478: LIST
29479: LIST
29480: LIST
29481: LIST
29482: LIST
29483: ST_TO_ADDR
29484: GO 29487
29486: POP
// result := ( chassis in result ) ;
29487: LD_ADDR_VAR 0 3
29491: PUSH
29492: LD_VAR 0 1
29496: PUSH
29497: LD_VAR 0 3
29501: IN
29502: ST_TO_ADDR
// end ;
29503: LD_VAR 0 3
29507: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29508: LD_INT 0
29510: PPUSH
// if not chassis or not weapon then
29511: LD_VAR 0 1
29515: NOT
29516: PUSH
29517: LD_VAR 0 2
29521: NOT
29522: OR
29523: IFFALSE 29527
// exit ;
29525: GO 30587
// case weapon of us_machine_gun :
29527: LD_VAR 0 2
29531: PUSH
29532: LD_INT 2
29534: DOUBLE
29535: EQUAL
29536: IFTRUE 29540
29538: GO 29570
29540: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29541: LD_ADDR_VAR 0 3
29545: PUSH
29546: LD_INT 1
29548: PUSH
29549: LD_INT 2
29551: PUSH
29552: LD_INT 3
29554: PUSH
29555: LD_INT 4
29557: PUSH
29558: LD_INT 5
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: ST_TO_ADDR
29568: GO 30571
29570: LD_INT 3
29572: DOUBLE
29573: EQUAL
29574: IFTRUE 29578
29576: GO 29608
29578: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29579: LD_ADDR_VAR 0 3
29583: PUSH
29584: LD_INT 1
29586: PUSH
29587: LD_INT 2
29589: PUSH
29590: LD_INT 3
29592: PUSH
29593: LD_INT 4
29595: PUSH
29596: LD_INT 5
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: LIST
29603: LIST
29604: LIST
29605: ST_TO_ADDR
29606: GO 30571
29608: LD_INT 11
29610: DOUBLE
29611: EQUAL
29612: IFTRUE 29616
29614: GO 29646
29616: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29617: LD_ADDR_VAR 0 3
29621: PUSH
29622: LD_INT 1
29624: PUSH
29625: LD_INT 2
29627: PUSH
29628: LD_INT 3
29630: PUSH
29631: LD_INT 4
29633: PUSH
29634: LD_INT 5
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: ST_TO_ADDR
29644: GO 30571
29646: LD_INT 4
29648: DOUBLE
29649: EQUAL
29650: IFTRUE 29654
29652: GO 29680
29654: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29655: LD_ADDR_VAR 0 3
29659: PUSH
29660: LD_INT 2
29662: PUSH
29663: LD_INT 3
29665: PUSH
29666: LD_INT 4
29668: PUSH
29669: LD_INT 5
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: ST_TO_ADDR
29678: GO 30571
29680: LD_INT 5
29682: DOUBLE
29683: EQUAL
29684: IFTRUE 29688
29686: GO 29714
29688: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29689: LD_ADDR_VAR 0 3
29693: PUSH
29694: LD_INT 2
29696: PUSH
29697: LD_INT 3
29699: PUSH
29700: LD_INT 4
29702: PUSH
29703: LD_INT 5
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: ST_TO_ADDR
29712: GO 30571
29714: LD_INT 9
29716: DOUBLE
29717: EQUAL
29718: IFTRUE 29722
29720: GO 29748
29722: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29723: LD_ADDR_VAR 0 3
29727: PUSH
29728: LD_INT 2
29730: PUSH
29731: LD_INT 3
29733: PUSH
29734: LD_INT 4
29736: PUSH
29737: LD_INT 5
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: LIST
29744: LIST
29745: ST_TO_ADDR
29746: GO 30571
29748: LD_INT 7
29750: DOUBLE
29751: EQUAL
29752: IFTRUE 29756
29754: GO 29782
29756: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29757: LD_ADDR_VAR 0 3
29761: PUSH
29762: LD_INT 2
29764: PUSH
29765: LD_INT 3
29767: PUSH
29768: LD_INT 4
29770: PUSH
29771: LD_INT 5
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: LIST
29778: LIST
29779: ST_TO_ADDR
29780: GO 30571
29782: LD_INT 12
29784: DOUBLE
29785: EQUAL
29786: IFTRUE 29790
29788: GO 29816
29790: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29791: LD_ADDR_VAR 0 3
29795: PUSH
29796: LD_INT 2
29798: PUSH
29799: LD_INT 3
29801: PUSH
29802: LD_INT 4
29804: PUSH
29805: LD_INT 5
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: ST_TO_ADDR
29814: GO 30571
29816: LD_INT 13
29818: DOUBLE
29819: EQUAL
29820: IFTRUE 29824
29822: GO 29850
29824: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29825: LD_ADDR_VAR 0 3
29829: PUSH
29830: LD_INT 2
29832: PUSH
29833: LD_INT 3
29835: PUSH
29836: LD_INT 4
29838: PUSH
29839: LD_INT 5
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: ST_TO_ADDR
29848: GO 30571
29850: LD_INT 14
29852: DOUBLE
29853: EQUAL
29854: IFTRUE 29858
29856: GO 29876
29858: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29859: LD_ADDR_VAR 0 3
29863: PUSH
29864: LD_INT 4
29866: PUSH
29867: LD_INT 5
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: ST_TO_ADDR
29874: GO 30571
29876: LD_INT 6
29878: DOUBLE
29879: EQUAL
29880: IFTRUE 29884
29882: GO 29902
29884: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29885: LD_ADDR_VAR 0 3
29889: PUSH
29890: LD_INT 4
29892: PUSH
29893: LD_INT 5
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: ST_TO_ADDR
29900: GO 30571
29902: LD_INT 10
29904: DOUBLE
29905: EQUAL
29906: IFTRUE 29910
29908: GO 29928
29910: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29911: LD_ADDR_VAR 0 3
29915: PUSH
29916: LD_INT 4
29918: PUSH
29919: LD_INT 5
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: ST_TO_ADDR
29926: GO 30571
29928: LD_INT 22
29930: DOUBLE
29931: EQUAL
29932: IFTRUE 29936
29934: GO 29962
29936: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29937: LD_ADDR_VAR 0 3
29941: PUSH
29942: LD_INT 11
29944: PUSH
29945: LD_INT 12
29947: PUSH
29948: LD_INT 13
29950: PUSH
29951: LD_INT 14
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: ST_TO_ADDR
29960: GO 30571
29962: LD_INT 23
29964: DOUBLE
29965: EQUAL
29966: IFTRUE 29970
29968: GO 29996
29970: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29971: LD_ADDR_VAR 0 3
29975: PUSH
29976: LD_INT 11
29978: PUSH
29979: LD_INT 12
29981: PUSH
29982: LD_INT 13
29984: PUSH
29985: LD_INT 14
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: ST_TO_ADDR
29994: GO 30571
29996: LD_INT 24
29998: DOUBLE
29999: EQUAL
30000: IFTRUE 30004
30002: GO 30030
30004: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30005: LD_ADDR_VAR 0 3
30009: PUSH
30010: LD_INT 11
30012: PUSH
30013: LD_INT 12
30015: PUSH
30016: LD_INT 13
30018: PUSH
30019: LD_INT 14
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: ST_TO_ADDR
30028: GO 30571
30030: LD_INT 30
30032: DOUBLE
30033: EQUAL
30034: IFTRUE 30038
30036: GO 30064
30038: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30039: LD_ADDR_VAR 0 3
30043: PUSH
30044: LD_INT 11
30046: PUSH
30047: LD_INT 12
30049: PUSH
30050: LD_INT 13
30052: PUSH
30053: LD_INT 14
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: ST_TO_ADDR
30062: GO 30571
30064: LD_INT 25
30066: DOUBLE
30067: EQUAL
30068: IFTRUE 30072
30070: GO 30090
30072: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30073: LD_ADDR_VAR 0 3
30077: PUSH
30078: LD_INT 13
30080: PUSH
30081: LD_INT 14
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: ST_TO_ADDR
30088: GO 30571
30090: LD_INT 27
30092: DOUBLE
30093: EQUAL
30094: IFTRUE 30098
30096: GO 30116
30098: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30099: LD_ADDR_VAR 0 3
30103: PUSH
30104: LD_INT 13
30106: PUSH
30107: LD_INT 14
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: ST_TO_ADDR
30114: GO 30571
30116: LD_INT 92
30118: DOUBLE
30119: EQUAL
30120: IFTRUE 30124
30122: GO 30150
30124: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30125: LD_ADDR_VAR 0 3
30129: PUSH
30130: LD_INT 11
30132: PUSH
30133: LD_INT 12
30135: PUSH
30136: LD_INT 13
30138: PUSH
30139: LD_INT 14
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: ST_TO_ADDR
30148: GO 30571
30150: LD_INT 28
30152: DOUBLE
30153: EQUAL
30154: IFTRUE 30158
30156: GO 30176
30158: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30159: LD_ADDR_VAR 0 3
30163: PUSH
30164: LD_INT 13
30166: PUSH
30167: LD_INT 14
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: ST_TO_ADDR
30174: GO 30571
30176: LD_INT 29
30178: DOUBLE
30179: EQUAL
30180: IFTRUE 30184
30182: GO 30202
30184: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30185: LD_ADDR_VAR 0 3
30189: PUSH
30190: LD_INT 13
30192: PUSH
30193: LD_INT 14
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: ST_TO_ADDR
30200: GO 30571
30202: LD_INT 31
30204: DOUBLE
30205: EQUAL
30206: IFTRUE 30210
30208: GO 30228
30210: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30211: LD_ADDR_VAR 0 3
30215: PUSH
30216: LD_INT 13
30218: PUSH
30219: LD_INT 14
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: ST_TO_ADDR
30226: GO 30571
30228: LD_INT 26
30230: DOUBLE
30231: EQUAL
30232: IFTRUE 30236
30234: GO 30254
30236: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30237: LD_ADDR_VAR 0 3
30241: PUSH
30242: LD_INT 13
30244: PUSH
30245: LD_INT 14
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: ST_TO_ADDR
30252: GO 30571
30254: LD_INT 42
30256: DOUBLE
30257: EQUAL
30258: IFTRUE 30262
30260: GO 30288
30262: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30263: LD_ADDR_VAR 0 3
30267: PUSH
30268: LD_INT 21
30270: PUSH
30271: LD_INT 22
30273: PUSH
30274: LD_INT 23
30276: PUSH
30277: LD_INT 24
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: ST_TO_ADDR
30286: GO 30571
30288: LD_INT 43
30290: DOUBLE
30291: EQUAL
30292: IFTRUE 30296
30294: GO 30322
30296: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30297: LD_ADDR_VAR 0 3
30301: PUSH
30302: LD_INT 21
30304: PUSH
30305: LD_INT 22
30307: PUSH
30308: LD_INT 23
30310: PUSH
30311: LD_INT 24
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: ST_TO_ADDR
30320: GO 30571
30322: LD_INT 44
30324: DOUBLE
30325: EQUAL
30326: IFTRUE 30330
30328: GO 30356
30330: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30331: LD_ADDR_VAR 0 3
30335: PUSH
30336: LD_INT 21
30338: PUSH
30339: LD_INT 22
30341: PUSH
30342: LD_INT 23
30344: PUSH
30345: LD_INT 24
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: ST_TO_ADDR
30354: GO 30571
30356: LD_INT 45
30358: DOUBLE
30359: EQUAL
30360: IFTRUE 30364
30362: GO 30390
30364: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30365: LD_ADDR_VAR 0 3
30369: PUSH
30370: LD_INT 21
30372: PUSH
30373: LD_INT 22
30375: PUSH
30376: LD_INT 23
30378: PUSH
30379: LD_INT 24
30381: PUSH
30382: EMPTY
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: ST_TO_ADDR
30388: GO 30571
30390: LD_INT 49
30392: DOUBLE
30393: EQUAL
30394: IFTRUE 30398
30396: GO 30424
30398: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30399: LD_ADDR_VAR 0 3
30403: PUSH
30404: LD_INT 21
30406: PUSH
30407: LD_INT 22
30409: PUSH
30410: LD_INT 23
30412: PUSH
30413: LD_INT 24
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: LIST
30420: LIST
30421: ST_TO_ADDR
30422: GO 30571
30424: LD_INT 51
30426: DOUBLE
30427: EQUAL
30428: IFTRUE 30432
30430: GO 30458
30432: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30433: LD_ADDR_VAR 0 3
30437: PUSH
30438: LD_INT 21
30440: PUSH
30441: LD_INT 22
30443: PUSH
30444: LD_INT 23
30446: PUSH
30447: LD_INT 24
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: ST_TO_ADDR
30456: GO 30571
30458: LD_INT 52
30460: DOUBLE
30461: EQUAL
30462: IFTRUE 30466
30464: GO 30492
30466: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30467: LD_ADDR_VAR 0 3
30471: PUSH
30472: LD_INT 21
30474: PUSH
30475: LD_INT 22
30477: PUSH
30478: LD_INT 23
30480: PUSH
30481: LD_INT 24
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: ST_TO_ADDR
30490: GO 30571
30492: LD_INT 53
30494: DOUBLE
30495: EQUAL
30496: IFTRUE 30500
30498: GO 30518
30500: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30501: LD_ADDR_VAR 0 3
30505: PUSH
30506: LD_INT 23
30508: PUSH
30509: LD_INT 24
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: ST_TO_ADDR
30516: GO 30571
30518: LD_INT 46
30520: DOUBLE
30521: EQUAL
30522: IFTRUE 30526
30524: GO 30544
30526: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30527: LD_ADDR_VAR 0 3
30531: PUSH
30532: LD_INT 23
30534: PUSH
30535: LD_INT 24
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: ST_TO_ADDR
30542: GO 30571
30544: LD_INT 47
30546: DOUBLE
30547: EQUAL
30548: IFTRUE 30552
30550: GO 30570
30552: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30553: LD_ADDR_VAR 0 3
30557: PUSH
30558: LD_INT 23
30560: PUSH
30561: LD_INT 24
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: ST_TO_ADDR
30568: GO 30571
30570: POP
// result := ( chassis in result ) ;
30571: LD_ADDR_VAR 0 3
30575: PUSH
30576: LD_VAR 0 1
30580: PUSH
30581: LD_VAR 0 3
30585: IN
30586: ST_TO_ADDR
// end ;
30587: LD_VAR 0 3
30591: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30592: LD_INT 0
30594: PPUSH
30595: PPUSH
30596: PPUSH
30597: PPUSH
30598: PPUSH
30599: PPUSH
30600: PPUSH
// result := array ;
30601: LD_ADDR_VAR 0 5
30605: PUSH
30606: LD_VAR 0 1
30610: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30611: LD_VAR 0 1
30615: NOT
30616: PUSH
30617: LD_VAR 0 2
30621: NOT
30622: OR
30623: PUSH
30624: LD_VAR 0 3
30628: NOT
30629: OR
30630: PUSH
30631: LD_VAR 0 2
30635: PUSH
30636: LD_VAR 0 1
30640: GREATER
30641: OR
30642: PUSH
30643: LD_VAR 0 3
30647: PUSH
30648: LD_VAR 0 1
30652: GREATER
30653: OR
30654: IFFALSE 30658
// exit ;
30656: GO 30954
// if direction then
30658: LD_VAR 0 4
30662: IFFALSE 30726
// begin d := 1 ;
30664: LD_ADDR_VAR 0 9
30668: PUSH
30669: LD_INT 1
30671: ST_TO_ADDR
// if i_from > i_to then
30672: LD_VAR 0 2
30676: PUSH
30677: LD_VAR 0 3
30681: GREATER
30682: IFFALSE 30708
// length := ( array - i_from ) + i_to else
30684: LD_ADDR_VAR 0 11
30688: PUSH
30689: LD_VAR 0 1
30693: PUSH
30694: LD_VAR 0 2
30698: MINUS
30699: PUSH
30700: LD_VAR 0 3
30704: PLUS
30705: ST_TO_ADDR
30706: GO 30724
// length := i_to - i_from ;
30708: LD_ADDR_VAR 0 11
30712: PUSH
30713: LD_VAR 0 3
30717: PUSH
30718: LD_VAR 0 2
30722: MINUS
30723: ST_TO_ADDR
// end else
30724: GO 30787
// begin d := - 1 ;
30726: LD_ADDR_VAR 0 9
30730: PUSH
30731: LD_INT 1
30733: NEG
30734: ST_TO_ADDR
// if i_from > i_to then
30735: LD_VAR 0 2
30739: PUSH
30740: LD_VAR 0 3
30744: GREATER
30745: IFFALSE 30765
// length := i_from - i_to else
30747: LD_ADDR_VAR 0 11
30751: PUSH
30752: LD_VAR 0 2
30756: PUSH
30757: LD_VAR 0 3
30761: MINUS
30762: ST_TO_ADDR
30763: GO 30787
// length := ( array - i_to ) + i_from ;
30765: LD_ADDR_VAR 0 11
30769: PUSH
30770: LD_VAR 0 1
30774: PUSH
30775: LD_VAR 0 3
30779: MINUS
30780: PUSH
30781: LD_VAR 0 2
30785: PLUS
30786: ST_TO_ADDR
// end ; if not length then
30787: LD_VAR 0 11
30791: NOT
30792: IFFALSE 30796
// exit ;
30794: GO 30954
// tmp := array ;
30796: LD_ADDR_VAR 0 10
30800: PUSH
30801: LD_VAR 0 1
30805: ST_TO_ADDR
// for i = 1 to length do
30806: LD_ADDR_VAR 0 6
30810: PUSH
30811: DOUBLE
30812: LD_INT 1
30814: DEC
30815: ST_TO_ADDR
30816: LD_VAR 0 11
30820: PUSH
30821: FOR_TO
30822: IFFALSE 30942
// begin for j = 1 to array do
30824: LD_ADDR_VAR 0 7
30828: PUSH
30829: DOUBLE
30830: LD_INT 1
30832: DEC
30833: ST_TO_ADDR
30834: LD_VAR 0 1
30838: PUSH
30839: FOR_TO
30840: IFFALSE 30928
// begin k := j + d ;
30842: LD_ADDR_VAR 0 8
30846: PUSH
30847: LD_VAR 0 7
30851: PUSH
30852: LD_VAR 0 9
30856: PLUS
30857: ST_TO_ADDR
// if k > array then
30858: LD_VAR 0 8
30862: PUSH
30863: LD_VAR 0 1
30867: GREATER
30868: IFFALSE 30878
// k := 1 ;
30870: LD_ADDR_VAR 0 8
30874: PUSH
30875: LD_INT 1
30877: ST_TO_ADDR
// if not k then
30878: LD_VAR 0 8
30882: NOT
30883: IFFALSE 30895
// k := array ;
30885: LD_ADDR_VAR 0 8
30889: PUSH
30890: LD_VAR 0 1
30894: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30895: LD_ADDR_VAR 0 10
30899: PUSH
30900: LD_VAR 0 10
30904: PPUSH
30905: LD_VAR 0 8
30909: PPUSH
30910: LD_VAR 0 1
30914: PUSH
30915: LD_VAR 0 7
30919: ARRAY
30920: PPUSH
30921: CALL_OW 1
30925: ST_TO_ADDR
// end ;
30926: GO 30839
30928: POP
30929: POP
// array := tmp ;
30930: LD_ADDR_VAR 0 1
30934: PUSH
30935: LD_VAR 0 10
30939: ST_TO_ADDR
// end ;
30940: GO 30821
30942: POP
30943: POP
// result := array ;
30944: LD_ADDR_VAR 0 5
30948: PUSH
30949: LD_VAR 0 1
30953: ST_TO_ADDR
// end ;
30954: LD_VAR 0 5
30958: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30959: LD_INT 0
30961: PPUSH
30962: PPUSH
// result := 0 ;
30963: LD_ADDR_VAR 0 3
30967: PUSH
30968: LD_INT 0
30970: ST_TO_ADDR
// if not array or not value in array then
30971: LD_VAR 0 1
30975: NOT
30976: PUSH
30977: LD_VAR 0 2
30981: PUSH
30982: LD_VAR 0 1
30986: IN
30987: NOT
30988: OR
30989: IFFALSE 30993
// exit ;
30991: GO 31047
// for i = 1 to array do
30993: LD_ADDR_VAR 0 4
30997: PUSH
30998: DOUBLE
30999: LD_INT 1
31001: DEC
31002: ST_TO_ADDR
31003: LD_VAR 0 1
31007: PUSH
31008: FOR_TO
31009: IFFALSE 31045
// if value = array [ i ] then
31011: LD_VAR 0 2
31015: PUSH
31016: LD_VAR 0 1
31020: PUSH
31021: LD_VAR 0 4
31025: ARRAY
31026: EQUAL
31027: IFFALSE 31043
// begin result := i ;
31029: LD_ADDR_VAR 0 3
31033: PUSH
31034: LD_VAR 0 4
31038: ST_TO_ADDR
// exit ;
31039: POP
31040: POP
31041: GO 31047
// end ;
31043: GO 31008
31045: POP
31046: POP
// end ;
31047: LD_VAR 0 3
31051: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31052: LD_INT 0
31054: PPUSH
// vc_chassis := chassis ;
31055: LD_ADDR_OWVAR 37
31059: PUSH
31060: LD_VAR 0 1
31064: ST_TO_ADDR
// vc_engine := engine ;
31065: LD_ADDR_OWVAR 39
31069: PUSH
31070: LD_VAR 0 2
31074: ST_TO_ADDR
// vc_control := control ;
31075: LD_ADDR_OWVAR 38
31079: PUSH
31080: LD_VAR 0 3
31084: ST_TO_ADDR
// vc_weapon := weapon ;
31085: LD_ADDR_OWVAR 40
31089: PUSH
31090: LD_VAR 0 4
31094: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31095: LD_ADDR_OWVAR 41
31099: PUSH
31100: LD_VAR 0 5
31104: ST_TO_ADDR
// end ;
31105: LD_VAR 0 6
31109: RET
// export function WantPlant ( unit ) ; var task ; begin
31110: LD_INT 0
31112: PPUSH
31113: PPUSH
// result := false ;
31114: LD_ADDR_VAR 0 2
31118: PUSH
31119: LD_INT 0
31121: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31122: LD_ADDR_VAR 0 3
31126: PUSH
31127: LD_VAR 0 1
31131: PPUSH
31132: CALL_OW 437
31136: ST_TO_ADDR
// if task then
31137: LD_VAR 0 3
31141: IFFALSE 31169
// if task [ 1 ] [ 1 ] = p then
31143: LD_VAR 0 3
31147: PUSH
31148: LD_INT 1
31150: ARRAY
31151: PUSH
31152: LD_INT 1
31154: ARRAY
31155: PUSH
31156: LD_STRING p
31158: EQUAL
31159: IFFALSE 31169
// result := true ;
31161: LD_ADDR_VAR 0 2
31165: PUSH
31166: LD_INT 1
31168: ST_TO_ADDR
// end ;
31169: LD_VAR 0 2
31173: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31174: LD_INT 0
31176: PPUSH
31177: PPUSH
31178: PPUSH
31179: PPUSH
// if pos < 1 then
31180: LD_VAR 0 2
31184: PUSH
31185: LD_INT 1
31187: LESS
31188: IFFALSE 31192
// exit ;
31190: GO 31495
// if pos = 1 then
31192: LD_VAR 0 2
31196: PUSH
31197: LD_INT 1
31199: EQUAL
31200: IFFALSE 31233
// result := Replace ( arr , pos [ 1 ] , value ) else
31202: LD_ADDR_VAR 0 4
31206: PUSH
31207: LD_VAR 0 1
31211: PPUSH
31212: LD_VAR 0 2
31216: PUSH
31217: LD_INT 1
31219: ARRAY
31220: PPUSH
31221: LD_VAR 0 3
31225: PPUSH
31226: CALL_OW 1
31230: ST_TO_ADDR
31231: GO 31495
// begin tmp := arr ;
31233: LD_ADDR_VAR 0 6
31237: PUSH
31238: LD_VAR 0 1
31242: ST_TO_ADDR
// s_arr := [ tmp ] ;
31243: LD_ADDR_VAR 0 7
31247: PUSH
31248: LD_VAR 0 6
31252: PUSH
31253: EMPTY
31254: LIST
31255: ST_TO_ADDR
// for i = 1 to pos - 1 do
31256: LD_ADDR_VAR 0 5
31260: PUSH
31261: DOUBLE
31262: LD_INT 1
31264: DEC
31265: ST_TO_ADDR
31266: LD_VAR 0 2
31270: PUSH
31271: LD_INT 1
31273: MINUS
31274: PUSH
31275: FOR_TO
31276: IFFALSE 31321
// begin tmp := tmp [ pos [ i ] ] ;
31278: LD_ADDR_VAR 0 6
31282: PUSH
31283: LD_VAR 0 6
31287: PUSH
31288: LD_VAR 0 2
31292: PUSH
31293: LD_VAR 0 5
31297: ARRAY
31298: ARRAY
31299: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31300: LD_ADDR_VAR 0 7
31304: PUSH
31305: LD_VAR 0 7
31309: PUSH
31310: LD_VAR 0 6
31314: PUSH
31315: EMPTY
31316: LIST
31317: ADD
31318: ST_TO_ADDR
// end ;
31319: GO 31275
31321: POP
31322: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31323: LD_ADDR_VAR 0 6
31327: PUSH
31328: LD_VAR 0 6
31332: PPUSH
31333: LD_VAR 0 2
31337: PUSH
31338: LD_VAR 0 2
31342: ARRAY
31343: PPUSH
31344: LD_VAR 0 3
31348: PPUSH
31349: CALL_OW 1
31353: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31354: LD_ADDR_VAR 0 7
31358: PUSH
31359: LD_VAR 0 7
31363: PPUSH
31364: LD_VAR 0 7
31368: PPUSH
31369: LD_VAR 0 6
31373: PPUSH
31374: CALL_OW 1
31378: ST_TO_ADDR
// for i = s_arr downto 2 do
31379: LD_ADDR_VAR 0 5
31383: PUSH
31384: DOUBLE
31385: LD_VAR 0 7
31389: INC
31390: ST_TO_ADDR
31391: LD_INT 2
31393: PUSH
31394: FOR_DOWNTO
31395: IFFALSE 31479
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31397: LD_ADDR_VAR 0 6
31401: PUSH
31402: LD_VAR 0 7
31406: PUSH
31407: LD_VAR 0 5
31411: PUSH
31412: LD_INT 1
31414: MINUS
31415: ARRAY
31416: PPUSH
31417: LD_VAR 0 2
31421: PUSH
31422: LD_VAR 0 5
31426: PUSH
31427: LD_INT 1
31429: MINUS
31430: ARRAY
31431: PPUSH
31432: LD_VAR 0 7
31436: PUSH
31437: LD_VAR 0 5
31441: ARRAY
31442: PPUSH
31443: CALL_OW 1
31447: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31448: LD_ADDR_VAR 0 7
31452: PUSH
31453: LD_VAR 0 7
31457: PPUSH
31458: LD_VAR 0 5
31462: PUSH
31463: LD_INT 1
31465: MINUS
31466: PPUSH
31467: LD_VAR 0 6
31471: PPUSH
31472: CALL_OW 1
31476: ST_TO_ADDR
// end ;
31477: GO 31394
31479: POP
31480: POP
// result := s_arr [ 1 ] ;
31481: LD_ADDR_VAR 0 4
31485: PUSH
31486: LD_VAR 0 7
31490: PUSH
31491: LD_INT 1
31493: ARRAY
31494: ST_TO_ADDR
// end ; end ;
31495: LD_VAR 0 4
31499: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31500: LD_INT 0
31502: PPUSH
31503: PPUSH
// if not list then
31504: LD_VAR 0 1
31508: NOT
31509: IFFALSE 31513
// exit ;
31511: GO 31604
// i := list [ pos1 ] ;
31513: LD_ADDR_VAR 0 5
31517: PUSH
31518: LD_VAR 0 1
31522: PUSH
31523: LD_VAR 0 2
31527: ARRAY
31528: ST_TO_ADDR
// if not i then
31529: LD_VAR 0 5
31533: NOT
31534: IFFALSE 31538
// exit ;
31536: GO 31604
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31538: LD_ADDR_VAR 0 1
31542: PUSH
31543: LD_VAR 0 1
31547: PPUSH
31548: LD_VAR 0 2
31552: PPUSH
31553: LD_VAR 0 1
31557: PUSH
31558: LD_VAR 0 3
31562: ARRAY
31563: PPUSH
31564: CALL_OW 1
31568: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31569: LD_ADDR_VAR 0 1
31573: PUSH
31574: LD_VAR 0 1
31578: PPUSH
31579: LD_VAR 0 3
31583: PPUSH
31584: LD_VAR 0 5
31588: PPUSH
31589: CALL_OW 1
31593: ST_TO_ADDR
// result := list ;
31594: LD_ADDR_VAR 0 4
31598: PUSH
31599: LD_VAR 0 1
31603: ST_TO_ADDR
// end ;
31604: LD_VAR 0 4
31608: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31609: LD_INT 0
31611: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31612: LD_ADDR_VAR 0 5
31616: PUSH
31617: LD_VAR 0 1
31621: PPUSH
31622: CALL_OW 250
31626: PPUSH
31627: LD_VAR 0 1
31631: PPUSH
31632: CALL_OW 251
31636: PPUSH
31637: LD_VAR 0 2
31641: PPUSH
31642: LD_VAR 0 3
31646: PPUSH
31647: LD_VAR 0 4
31651: PPUSH
31652: CALL 32030 0 5
31656: ST_TO_ADDR
// end ;
31657: LD_VAR 0 5
31661: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
31662: LD_INT 0
31664: PPUSH
31665: PPUSH
31666: PPUSH
31667: PPUSH
// if not list or not unit then
31668: LD_VAR 0 2
31672: NOT
31673: PUSH
31674: LD_VAR 0 1
31678: NOT
31679: OR
31680: IFFALSE 31684
// exit ;
31682: GO 32025
// result := [ ] ;
31684: LD_ADDR_VAR 0 5
31688: PUSH
31689: EMPTY
31690: ST_TO_ADDR
// for i in list do
31691: LD_ADDR_VAR 0 6
31695: PUSH
31696: LD_VAR 0 2
31700: PUSH
31701: FOR_IN
31702: IFFALSE 31920
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
31704: LD_ADDR_VAR 0 8
31708: PUSH
31709: LD_VAR 0 1
31713: PPUSH
31714: LD_VAR 0 6
31718: PUSH
31719: LD_INT 1
31721: ARRAY
31722: PPUSH
31723: LD_VAR 0 6
31727: PUSH
31728: LD_INT 2
31730: ARRAY
31731: PPUSH
31732: CALL_OW 297
31736: ST_TO_ADDR
// if not Count ( result ) then
31737: LD_VAR 0 5
31741: PPUSH
31742: CALL 28314 0 1
31746: NOT
31747: IFFALSE 31780
// begin result := Join ( result , [ i , tmp ] ) ;
31749: LD_ADDR_VAR 0 5
31753: PUSH
31754: LD_VAR 0 5
31758: PPUSH
31759: LD_VAR 0 6
31763: PUSH
31764: LD_VAR 0 8
31768: PUSH
31769: EMPTY
31770: LIST
31771: LIST
31772: PPUSH
31773: CALL 63903 0 2
31777: ST_TO_ADDR
// continue ;
31778: GO 31701
// end ; if result [ result ] [ 2 ] <= tmp then
31780: LD_VAR 0 5
31784: PUSH
31785: LD_VAR 0 5
31789: ARRAY
31790: PUSH
31791: LD_INT 2
31793: ARRAY
31794: PUSH
31795: LD_VAR 0 8
31799: LESSEQUAL
31800: IFFALSE 31833
// result := Join ( result , [ i , tmp ] ) else
31802: LD_ADDR_VAR 0 5
31806: PUSH
31807: LD_VAR 0 5
31811: PPUSH
31812: LD_VAR 0 6
31816: PUSH
31817: LD_VAR 0 8
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PPUSH
31826: CALL 63903 0 2
31830: ST_TO_ADDR
31831: GO 31918
// begin for j := 1 to Count ( result ) do
31833: LD_ADDR_VAR 0 7
31837: PUSH
31838: DOUBLE
31839: LD_INT 1
31841: DEC
31842: ST_TO_ADDR
31843: LD_VAR 0 5
31847: PPUSH
31848: CALL 28314 0 1
31852: PUSH
31853: FOR_TO
31854: IFFALSE 31916
// begin if tmp < result [ j ] [ 2 ] then
31856: LD_VAR 0 8
31860: PUSH
31861: LD_VAR 0 5
31865: PUSH
31866: LD_VAR 0 7
31870: ARRAY
31871: PUSH
31872: LD_INT 2
31874: ARRAY
31875: LESS
31876: IFFALSE 31914
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31878: LD_ADDR_VAR 0 5
31882: PUSH
31883: LD_VAR 0 5
31887: PPUSH
31888: LD_VAR 0 7
31892: PPUSH
31893: LD_VAR 0 6
31897: PUSH
31898: LD_VAR 0 8
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PPUSH
31907: CALL_OW 2
31911: ST_TO_ADDR
// break ;
31912: GO 31916
// end ; end ;
31914: GO 31853
31916: POP
31917: POP
// end ; end ;
31918: GO 31701
31920: POP
31921: POP
// if result and not asc then
31922: LD_VAR 0 5
31926: PUSH
31927: LD_VAR 0 3
31931: NOT
31932: AND
31933: IFFALSE 31950
// result := ReverseArray ( result ) ;
31935: LD_ADDR_VAR 0 5
31939: PUSH
31940: LD_VAR 0 5
31944: PPUSH
31945: CALL 59190 0 1
31949: ST_TO_ADDR
// tmp := [ ] ;
31950: LD_ADDR_VAR 0 8
31954: PUSH
31955: EMPTY
31956: ST_TO_ADDR
// if mode then
31957: LD_VAR 0 4
31961: IFFALSE 32025
// begin for i := 1 to result do
31963: LD_ADDR_VAR 0 6
31967: PUSH
31968: DOUBLE
31969: LD_INT 1
31971: DEC
31972: ST_TO_ADDR
31973: LD_VAR 0 5
31977: PUSH
31978: FOR_TO
31979: IFFALSE 32013
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
31981: LD_ADDR_VAR 0 8
31985: PUSH
31986: LD_VAR 0 8
31990: PPUSH
31991: LD_VAR 0 5
31995: PUSH
31996: LD_VAR 0 6
32000: ARRAY
32001: PUSH
32002: LD_INT 1
32004: ARRAY
32005: PPUSH
32006: CALL 63903 0 2
32010: ST_TO_ADDR
32011: GO 31978
32013: POP
32014: POP
// result := tmp ;
32015: LD_ADDR_VAR 0 5
32019: PUSH
32020: LD_VAR 0 8
32024: ST_TO_ADDR
// end ; end ;
32025: LD_VAR 0 5
32029: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32030: LD_INT 0
32032: PPUSH
32033: PPUSH
32034: PPUSH
32035: PPUSH
// if not list then
32036: LD_VAR 0 3
32040: NOT
32041: IFFALSE 32045
// exit ;
32043: GO 32433
// result := [ ] ;
32045: LD_ADDR_VAR 0 6
32049: PUSH
32050: EMPTY
32051: ST_TO_ADDR
// for i in list do
32052: LD_ADDR_VAR 0 7
32056: PUSH
32057: LD_VAR 0 3
32061: PUSH
32062: FOR_IN
32063: IFFALSE 32265
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32065: LD_ADDR_VAR 0 9
32069: PUSH
32070: LD_VAR 0 7
32074: PPUSH
32075: LD_VAR 0 1
32079: PPUSH
32080: LD_VAR 0 2
32084: PPUSH
32085: CALL_OW 297
32089: ST_TO_ADDR
// if not result then
32090: LD_VAR 0 6
32094: NOT
32095: IFFALSE 32121
// result := [ [ i , tmp ] ] else
32097: LD_ADDR_VAR 0 6
32101: PUSH
32102: LD_VAR 0 7
32106: PUSH
32107: LD_VAR 0 9
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: EMPTY
32117: LIST
32118: ST_TO_ADDR
32119: GO 32263
// begin if result [ result ] [ 2 ] < tmp then
32121: LD_VAR 0 6
32125: PUSH
32126: LD_VAR 0 6
32130: ARRAY
32131: PUSH
32132: LD_INT 2
32134: ARRAY
32135: PUSH
32136: LD_VAR 0 9
32140: LESS
32141: IFFALSE 32183
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32143: LD_ADDR_VAR 0 6
32147: PUSH
32148: LD_VAR 0 6
32152: PPUSH
32153: LD_VAR 0 6
32157: PUSH
32158: LD_INT 1
32160: PLUS
32161: PPUSH
32162: LD_VAR 0 7
32166: PUSH
32167: LD_VAR 0 9
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PPUSH
32176: CALL_OW 2
32180: ST_TO_ADDR
32181: GO 32263
// for j = 1 to result do
32183: LD_ADDR_VAR 0 8
32187: PUSH
32188: DOUBLE
32189: LD_INT 1
32191: DEC
32192: ST_TO_ADDR
32193: LD_VAR 0 6
32197: PUSH
32198: FOR_TO
32199: IFFALSE 32261
// begin if tmp < result [ j ] [ 2 ] then
32201: LD_VAR 0 9
32205: PUSH
32206: LD_VAR 0 6
32210: PUSH
32211: LD_VAR 0 8
32215: ARRAY
32216: PUSH
32217: LD_INT 2
32219: ARRAY
32220: LESS
32221: IFFALSE 32259
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32223: LD_ADDR_VAR 0 6
32227: PUSH
32228: LD_VAR 0 6
32232: PPUSH
32233: LD_VAR 0 8
32237: PPUSH
32238: LD_VAR 0 7
32242: PUSH
32243: LD_VAR 0 9
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PPUSH
32252: CALL_OW 2
32256: ST_TO_ADDR
// break ;
32257: GO 32261
// end ; end ;
32259: GO 32198
32261: POP
32262: POP
// end ; end ;
32263: GO 32062
32265: POP
32266: POP
// if result and not asc then
32267: LD_VAR 0 6
32271: PUSH
32272: LD_VAR 0 4
32276: NOT
32277: AND
32278: IFFALSE 32353
// begin tmp := result ;
32280: LD_ADDR_VAR 0 9
32284: PUSH
32285: LD_VAR 0 6
32289: ST_TO_ADDR
// for i = tmp downto 1 do
32290: LD_ADDR_VAR 0 7
32294: PUSH
32295: DOUBLE
32296: LD_VAR 0 9
32300: INC
32301: ST_TO_ADDR
32302: LD_INT 1
32304: PUSH
32305: FOR_DOWNTO
32306: IFFALSE 32351
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32308: LD_ADDR_VAR 0 6
32312: PUSH
32313: LD_VAR 0 6
32317: PPUSH
32318: LD_VAR 0 9
32322: PUSH
32323: LD_VAR 0 7
32327: MINUS
32328: PUSH
32329: LD_INT 1
32331: PLUS
32332: PPUSH
32333: LD_VAR 0 9
32337: PUSH
32338: LD_VAR 0 7
32342: ARRAY
32343: PPUSH
32344: CALL_OW 1
32348: ST_TO_ADDR
32349: GO 32305
32351: POP
32352: POP
// end ; tmp := [ ] ;
32353: LD_ADDR_VAR 0 9
32357: PUSH
32358: EMPTY
32359: ST_TO_ADDR
// if mode then
32360: LD_VAR 0 5
32364: IFFALSE 32433
// begin for i = 1 to result do
32366: LD_ADDR_VAR 0 7
32370: PUSH
32371: DOUBLE
32372: LD_INT 1
32374: DEC
32375: ST_TO_ADDR
32376: LD_VAR 0 6
32380: PUSH
32381: FOR_TO
32382: IFFALSE 32421
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32384: LD_ADDR_VAR 0 9
32388: PUSH
32389: LD_VAR 0 9
32393: PPUSH
32394: LD_VAR 0 7
32398: PPUSH
32399: LD_VAR 0 6
32403: PUSH
32404: LD_VAR 0 7
32408: ARRAY
32409: PUSH
32410: LD_INT 1
32412: ARRAY
32413: PPUSH
32414: CALL_OW 1
32418: ST_TO_ADDR
32419: GO 32381
32421: POP
32422: POP
// result := tmp ;
32423: LD_ADDR_VAR 0 6
32427: PUSH
32428: LD_VAR 0 9
32432: ST_TO_ADDR
// end ; end ;
32433: LD_VAR 0 6
32437: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32438: LD_INT 0
32440: PPUSH
32441: PPUSH
32442: PPUSH
32443: PPUSH
32444: PPUSH
32445: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32446: LD_ADDR_VAR 0 5
32450: PUSH
32451: LD_INT 0
32453: PUSH
32454: LD_INT 0
32456: PUSH
32457: LD_INT 0
32459: PUSH
32460: EMPTY
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: ST_TO_ADDR
// if not x or not y then
32468: LD_VAR 0 2
32472: NOT
32473: PUSH
32474: LD_VAR 0 3
32478: NOT
32479: OR
32480: IFFALSE 32484
// exit ;
32482: GO 34134
// if not range then
32484: LD_VAR 0 4
32488: NOT
32489: IFFALSE 32499
// range := 10 ;
32491: LD_ADDR_VAR 0 4
32495: PUSH
32496: LD_INT 10
32498: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32499: LD_ADDR_VAR 0 8
32503: PUSH
32504: LD_INT 81
32506: PUSH
32507: LD_VAR 0 1
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 92
32518: PUSH
32519: LD_VAR 0 2
32523: PUSH
32524: LD_VAR 0 3
32528: PUSH
32529: LD_VAR 0 4
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 3
32542: PUSH
32543: LD_INT 21
32545: PUSH
32546: LD_INT 3
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: LIST
32561: PPUSH
32562: CALL_OW 69
32566: ST_TO_ADDR
// if not tmp then
32567: LD_VAR 0 8
32571: NOT
32572: IFFALSE 32576
// exit ;
32574: GO 34134
// for i in tmp do
32576: LD_ADDR_VAR 0 6
32580: PUSH
32581: LD_VAR 0 8
32585: PUSH
32586: FOR_IN
32587: IFFALSE 34109
// begin points := [ 0 , 0 , 0 ] ;
32589: LD_ADDR_VAR 0 9
32593: PUSH
32594: LD_INT 0
32596: PUSH
32597: LD_INT 0
32599: PUSH
32600: LD_INT 0
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: LIST
32607: ST_TO_ADDR
// bpoints := 1 ;
32608: LD_ADDR_VAR 0 10
32612: PUSH
32613: LD_INT 1
32615: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32616: LD_VAR 0 6
32620: PPUSH
32621: CALL_OW 247
32625: PUSH
32626: LD_INT 1
32628: DOUBLE
32629: EQUAL
32630: IFTRUE 32634
32632: GO 33212
32634: POP
// begin if GetClass ( i ) = 1 then
32635: LD_VAR 0 6
32639: PPUSH
32640: CALL_OW 257
32644: PUSH
32645: LD_INT 1
32647: EQUAL
32648: IFFALSE 32669
// points := [ 10 , 5 , 3 ] ;
32650: LD_ADDR_VAR 0 9
32654: PUSH
32655: LD_INT 10
32657: PUSH
32658: LD_INT 5
32660: PUSH
32661: LD_INT 3
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: LIST
32668: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32669: LD_VAR 0 6
32673: PPUSH
32674: CALL_OW 257
32678: PUSH
32679: LD_INT 2
32681: PUSH
32682: LD_INT 3
32684: PUSH
32685: LD_INT 4
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: LIST
32692: IN
32693: IFFALSE 32714
// points := [ 3 , 2 , 1 ] ;
32695: LD_ADDR_VAR 0 9
32699: PUSH
32700: LD_INT 3
32702: PUSH
32703: LD_INT 2
32705: PUSH
32706: LD_INT 1
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: LIST
32713: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32714: LD_VAR 0 6
32718: PPUSH
32719: CALL_OW 257
32723: PUSH
32724: LD_INT 5
32726: EQUAL
32727: IFFALSE 32748
// points := [ 130 , 5 , 2 ] ;
32729: LD_ADDR_VAR 0 9
32733: PUSH
32734: LD_INT 130
32736: PUSH
32737: LD_INT 5
32739: PUSH
32740: LD_INT 2
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: LIST
32747: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32748: LD_VAR 0 6
32752: PPUSH
32753: CALL_OW 257
32757: PUSH
32758: LD_INT 8
32760: EQUAL
32761: IFFALSE 32782
// points := [ 35 , 35 , 30 ] ;
32763: LD_ADDR_VAR 0 9
32767: PUSH
32768: LD_INT 35
32770: PUSH
32771: LD_INT 35
32773: PUSH
32774: LD_INT 30
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: LIST
32781: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32782: LD_VAR 0 6
32786: PPUSH
32787: CALL_OW 257
32791: PUSH
32792: LD_INT 9
32794: EQUAL
32795: IFFALSE 32816
// points := [ 20 , 55 , 40 ] ;
32797: LD_ADDR_VAR 0 9
32801: PUSH
32802: LD_INT 20
32804: PUSH
32805: LD_INT 55
32807: PUSH
32808: LD_INT 40
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: LIST
32815: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32816: LD_VAR 0 6
32820: PPUSH
32821: CALL_OW 257
32825: PUSH
32826: LD_INT 12
32828: PUSH
32829: LD_INT 16
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: IN
32836: IFFALSE 32857
// points := [ 5 , 3 , 2 ] ;
32838: LD_ADDR_VAR 0 9
32842: PUSH
32843: LD_INT 5
32845: PUSH
32846: LD_INT 3
32848: PUSH
32849: LD_INT 2
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: LIST
32856: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32857: LD_VAR 0 6
32861: PPUSH
32862: CALL_OW 257
32866: PUSH
32867: LD_INT 17
32869: EQUAL
32870: IFFALSE 32891
// points := [ 100 , 50 , 75 ] ;
32872: LD_ADDR_VAR 0 9
32876: PUSH
32877: LD_INT 100
32879: PUSH
32880: LD_INT 50
32882: PUSH
32883: LD_INT 75
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: LIST
32890: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32891: LD_VAR 0 6
32895: PPUSH
32896: CALL_OW 257
32900: PUSH
32901: LD_INT 15
32903: EQUAL
32904: IFFALSE 32925
// points := [ 10 , 5 , 3 ] ;
32906: LD_ADDR_VAR 0 9
32910: PUSH
32911: LD_INT 10
32913: PUSH
32914: LD_INT 5
32916: PUSH
32917: LD_INT 3
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: LIST
32924: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32925: LD_VAR 0 6
32929: PPUSH
32930: CALL_OW 257
32934: PUSH
32935: LD_INT 14
32937: EQUAL
32938: IFFALSE 32959
// points := [ 10 , 0 , 0 ] ;
32940: LD_ADDR_VAR 0 9
32944: PUSH
32945: LD_INT 10
32947: PUSH
32948: LD_INT 0
32950: PUSH
32951: LD_INT 0
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: LIST
32958: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32959: LD_VAR 0 6
32963: PPUSH
32964: CALL_OW 257
32968: PUSH
32969: LD_INT 11
32971: EQUAL
32972: IFFALSE 32993
// points := [ 30 , 10 , 5 ] ;
32974: LD_ADDR_VAR 0 9
32978: PUSH
32979: LD_INT 30
32981: PUSH
32982: LD_INT 10
32984: PUSH
32985: LD_INT 5
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: LIST
32992: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32993: LD_VAR 0 1
32997: PPUSH
32998: LD_INT 5
33000: PPUSH
33001: CALL_OW 321
33005: PUSH
33006: LD_INT 2
33008: EQUAL
33009: IFFALSE 33026
// bpoints := bpoints * 1.8 ;
33011: LD_ADDR_VAR 0 10
33015: PUSH
33016: LD_VAR 0 10
33020: PUSH
33021: LD_REAL  1.80000000000000E+0000
33024: MUL
33025: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33026: LD_VAR 0 6
33030: PPUSH
33031: CALL_OW 257
33035: PUSH
33036: LD_INT 1
33038: PUSH
33039: LD_INT 2
33041: PUSH
33042: LD_INT 3
33044: PUSH
33045: LD_INT 4
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: IN
33054: PUSH
33055: LD_VAR 0 1
33059: PPUSH
33060: LD_INT 51
33062: PPUSH
33063: CALL_OW 321
33067: PUSH
33068: LD_INT 2
33070: EQUAL
33071: AND
33072: IFFALSE 33089
// bpoints := bpoints * 1.2 ;
33074: LD_ADDR_VAR 0 10
33078: PUSH
33079: LD_VAR 0 10
33083: PUSH
33084: LD_REAL  1.20000000000000E+0000
33087: MUL
33088: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33089: LD_VAR 0 6
33093: PPUSH
33094: CALL_OW 257
33098: PUSH
33099: LD_INT 5
33101: PUSH
33102: LD_INT 7
33104: PUSH
33105: LD_INT 9
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: LIST
33112: IN
33113: PUSH
33114: LD_VAR 0 1
33118: PPUSH
33119: LD_INT 52
33121: PPUSH
33122: CALL_OW 321
33126: PUSH
33127: LD_INT 2
33129: EQUAL
33130: AND
33131: IFFALSE 33148
// bpoints := bpoints * 1.5 ;
33133: LD_ADDR_VAR 0 10
33137: PUSH
33138: LD_VAR 0 10
33142: PUSH
33143: LD_REAL  1.50000000000000E+0000
33146: MUL
33147: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33148: LD_VAR 0 1
33152: PPUSH
33153: LD_INT 66
33155: PPUSH
33156: CALL_OW 321
33160: PUSH
33161: LD_INT 2
33163: EQUAL
33164: IFFALSE 33181
// bpoints := bpoints * 1.1 ;
33166: LD_ADDR_VAR 0 10
33170: PUSH
33171: LD_VAR 0 10
33175: PUSH
33176: LD_REAL  1.10000000000000E+0000
33179: MUL
33180: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33181: LD_ADDR_VAR 0 10
33185: PUSH
33186: LD_VAR 0 10
33190: PUSH
33191: LD_VAR 0 6
33195: PPUSH
33196: LD_INT 1
33198: PPUSH
33199: CALL_OW 259
33203: PUSH
33204: LD_REAL  1.15000000000000E+0000
33207: MUL
33208: MUL
33209: ST_TO_ADDR
// end ; unit_vehicle :
33210: GO 34038
33212: LD_INT 2
33214: DOUBLE
33215: EQUAL
33216: IFTRUE 33220
33218: GO 34026
33220: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33221: LD_VAR 0 6
33225: PPUSH
33226: CALL_OW 264
33230: PUSH
33231: LD_INT 2
33233: PUSH
33234: LD_INT 42
33236: PUSH
33237: LD_INT 24
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: LIST
33244: IN
33245: IFFALSE 33266
// points := [ 25 , 5 , 3 ] ;
33247: LD_ADDR_VAR 0 9
33251: PUSH
33252: LD_INT 25
33254: PUSH
33255: LD_INT 5
33257: PUSH
33258: LD_INT 3
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: LIST
33265: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33266: LD_VAR 0 6
33270: PPUSH
33271: CALL_OW 264
33275: PUSH
33276: LD_INT 4
33278: PUSH
33279: LD_INT 43
33281: PUSH
33282: LD_INT 25
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: LIST
33289: IN
33290: IFFALSE 33311
// points := [ 40 , 15 , 5 ] ;
33292: LD_ADDR_VAR 0 9
33296: PUSH
33297: LD_INT 40
33299: PUSH
33300: LD_INT 15
33302: PUSH
33303: LD_INT 5
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: LIST
33310: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33311: LD_VAR 0 6
33315: PPUSH
33316: CALL_OW 264
33320: PUSH
33321: LD_INT 3
33323: PUSH
33324: LD_INT 23
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: IN
33331: IFFALSE 33352
// points := [ 7 , 25 , 8 ] ;
33333: LD_ADDR_VAR 0 9
33337: PUSH
33338: LD_INT 7
33340: PUSH
33341: LD_INT 25
33343: PUSH
33344: LD_INT 8
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: LIST
33351: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33352: LD_VAR 0 6
33356: PPUSH
33357: CALL_OW 264
33361: PUSH
33362: LD_INT 5
33364: PUSH
33365: LD_INT 27
33367: PUSH
33368: LD_INT 44
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: LIST
33375: IN
33376: IFFALSE 33397
// points := [ 14 , 50 , 16 ] ;
33378: LD_ADDR_VAR 0 9
33382: PUSH
33383: LD_INT 14
33385: PUSH
33386: LD_INT 50
33388: PUSH
33389: LD_INT 16
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: LIST
33396: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33397: LD_VAR 0 6
33401: PPUSH
33402: CALL_OW 264
33406: PUSH
33407: LD_INT 6
33409: PUSH
33410: LD_INT 46
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: IN
33417: IFFALSE 33438
// points := [ 32 , 120 , 70 ] ;
33419: LD_ADDR_VAR 0 9
33423: PUSH
33424: LD_INT 32
33426: PUSH
33427: LD_INT 120
33429: PUSH
33430: LD_INT 70
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: LIST
33437: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33438: LD_VAR 0 6
33442: PPUSH
33443: CALL_OW 264
33447: PUSH
33448: LD_INT 7
33450: PUSH
33451: LD_INT 28
33453: PUSH
33454: LD_INT 45
33456: PUSH
33457: LD_INT 92
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: IN
33466: IFFALSE 33487
// points := [ 35 , 20 , 45 ] ;
33468: LD_ADDR_VAR 0 9
33472: PUSH
33473: LD_INT 35
33475: PUSH
33476: LD_INT 20
33478: PUSH
33479: LD_INT 45
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: LIST
33486: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33487: LD_VAR 0 6
33491: PPUSH
33492: CALL_OW 264
33496: PUSH
33497: LD_INT 47
33499: PUSH
33500: EMPTY
33501: LIST
33502: IN
33503: IFFALSE 33524
// points := [ 67 , 45 , 75 ] ;
33505: LD_ADDR_VAR 0 9
33509: PUSH
33510: LD_INT 67
33512: PUSH
33513: LD_INT 45
33515: PUSH
33516: LD_INT 75
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: LIST
33523: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33524: LD_VAR 0 6
33528: PPUSH
33529: CALL_OW 264
33533: PUSH
33534: LD_INT 26
33536: PUSH
33537: EMPTY
33538: LIST
33539: IN
33540: IFFALSE 33561
// points := [ 120 , 30 , 80 ] ;
33542: LD_ADDR_VAR 0 9
33546: PUSH
33547: LD_INT 120
33549: PUSH
33550: LD_INT 30
33552: PUSH
33553: LD_INT 80
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: LIST
33560: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33561: LD_VAR 0 6
33565: PPUSH
33566: CALL_OW 264
33570: PUSH
33571: LD_INT 22
33573: PUSH
33574: EMPTY
33575: LIST
33576: IN
33577: IFFALSE 33598
// points := [ 40 , 1 , 1 ] ;
33579: LD_ADDR_VAR 0 9
33583: PUSH
33584: LD_INT 40
33586: PUSH
33587: LD_INT 1
33589: PUSH
33590: LD_INT 1
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: LIST
33597: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33598: LD_VAR 0 6
33602: PPUSH
33603: CALL_OW 264
33607: PUSH
33608: LD_INT 29
33610: PUSH
33611: EMPTY
33612: LIST
33613: IN
33614: IFFALSE 33635
// points := [ 70 , 200 , 400 ] ;
33616: LD_ADDR_VAR 0 9
33620: PUSH
33621: LD_INT 70
33623: PUSH
33624: LD_INT 200
33626: PUSH
33627: LD_INT 400
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: LIST
33634: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33635: LD_VAR 0 6
33639: PPUSH
33640: CALL_OW 264
33644: PUSH
33645: LD_INT 14
33647: PUSH
33648: LD_INT 53
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: IN
33655: IFFALSE 33676
// points := [ 40 , 10 , 20 ] ;
33657: LD_ADDR_VAR 0 9
33661: PUSH
33662: LD_INT 40
33664: PUSH
33665: LD_INT 10
33667: PUSH
33668: LD_INT 20
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: LIST
33675: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33676: LD_VAR 0 6
33680: PPUSH
33681: CALL_OW 264
33685: PUSH
33686: LD_INT 9
33688: PUSH
33689: EMPTY
33690: LIST
33691: IN
33692: IFFALSE 33713
// points := [ 5 , 70 , 20 ] ;
33694: LD_ADDR_VAR 0 9
33698: PUSH
33699: LD_INT 5
33701: PUSH
33702: LD_INT 70
33704: PUSH
33705: LD_INT 20
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: LIST
33712: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33713: LD_VAR 0 6
33717: PPUSH
33718: CALL_OW 264
33722: PUSH
33723: LD_INT 10
33725: PUSH
33726: EMPTY
33727: LIST
33728: IN
33729: IFFALSE 33750
// points := [ 35 , 110 , 70 ] ;
33731: LD_ADDR_VAR 0 9
33735: PUSH
33736: LD_INT 35
33738: PUSH
33739: LD_INT 110
33741: PUSH
33742: LD_INT 70
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: LIST
33749: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33750: LD_VAR 0 6
33754: PPUSH
33755: CALL_OW 265
33759: PUSH
33760: LD_INT 25
33762: EQUAL
33763: IFFALSE 33784
// points := [ 80 , 65 , 100 ] ;
33765: LD_ADDR_VAR 0 9
33769: PUSH
33770: LD_INT 80
33772: PUSH
33773: LD_INT 65
33775: PUSH
33776: LD_INT 100
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: LIST
33783: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33784: LD_VAR 0 6
33788: PPUSH
33789: CALL_OW 263
33793: PUSH
33794: LD_INT 1
33796: EQUAL
33797: IFFALSE 33832
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33799: LD_ADDR_VAR 0 10
33803: PUSH
33804: LD_VAR 0 10
33808: PUSH
33809: LD_VAR 0 6
33813: PPUSH
33814: CALL_OW 311
33818: PPUSH
33819: LD_INT 3
33821: PPUSH
33822: CALL_OW 259
33826: PUSH
33827: LD_INT 4
33829: MUL
33830: MUL
33831: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33832: LD_VAR 0 6
33836: PPUSH
33837: CALL_OW 263
33841: PUSH
33842: LD_INT 2
33844: EQUAL
33845: IFFALSE 33896
// begin j := IsControledBy ( i ) ;
33847: LD_ADDR_VAR 0 7
33851: PUSH
33852: LD_VAR 0 6
33856: PPUSH
33857: CALL_OW 312
33861: ST_TO_ADDR
// if j then
33862: LD_VAR 0 7
33866: IFFALSE 33896
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33868: LD_ADDR_VAR 0 10
33872: PUSH
33873: LD_VAR 0 10
33877: PUSH
33878: LD_VAR 0 7
33882: PPUSH
33883: LD_INT 3
33885: PPUSH
33886: CALL_OW 259
33890: PUSH
33891: LD_INT 3
33893: MUL
33894: MUL
33895: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33896: LD_VAR 0 6
33900: PPUSH
33901: CALL_OW 264
33905: PUSH
33906: LD_INT 5
33908: PUSH
33909: LD_INT 6
33911: PUSH
33912: LD_INT 46
33914: PUSH
33915: LD_INT 44
33917: PUSH
33918: LD_INT 47
33920: PUSH
33921: LD_INT 45
33923: PUSH
33924: LD_INT 28
33926: PUSH
33927: LD_INT 7
33929: PUSH
33930: LD_INT 27
33932: PUSH
33933: LD_INT 29
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: IN
33948: PUSH
33949: LD_VAR 0 1
33953: PPUSH
33954: LD_INT 52
33956: PPUSH
33957: CALL_OW 321
33961: PUSH
33962: LD_INT 2
33964: EQUAL
33965: AND
33966: IFFALSE 33983
// bpoints := bpoints * 1.2 ;
33968: LD_ADDR_VAR 0 10
33972: PUSH
33973: LD_VAR 0 10
33977: PUSH
33978: LD_REAL  1.20000000000000E+0000
33981: MUL
33982: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33983: LD_VAR 0 6
33987: PPUSH
33988: CALL_OW 264
33992: PUSH
33993: LD_INT 6
33995: PUSH
33996: LD_INT 46
33998: PUSH
33999: LD_INT 47
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: LIST
34006: IN
34007: IFFALSE 34024
// bpoints := bpoints * 1.2 ;
34009: LD_ADDR_VAR 0 10
34013: PUSH
34014: LD_VAR 0 10
34018: PUSH
34019: LD_REAL  1.20000000000000E+0000
34022: MUL
34023: ST_TO_ADDR
// end ; unit_building :
34024: GO 34038
34026: LD_INT 3
34028: DOUBLE
34029: EQUAL
34030: IFTRUE 34034
34032: GO 34037
34034: POP
// ; end ;
34035: GO 34038
34037: POP
// for j = 1 to 3 do
34038: LD_ADDR_VAR 0 7
34042: PUSH
34043: DOUBLE
34044: LD_INT 1
34046: DEC
34047: ST_TO_ADDR
34048: LD_INT 3
34050: PUSH
34051: FOR_TO
34052: IFFALSE 34105
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34054: LD_ADDR_VAR 0 5
34058: PUSH
34059: LD_VAR 0 5
34063: PPUSH
34064: LD_VAR 0 7
34068: PPUSH
34069: LD_VAR 0 5
34073: PUSH
34074: LD_VAR 0 7
34078: ARRAY
34079: PUSH
34080: LD_VAR 0 9
34084: PUSH
34085: LD_VAR 0 7
34089: ARRAY
34090: PUSH
34091: LD_VAR 0 10
34095: MUL
34096: PLUS
34097: PPUSH
34098: CALL_OW 1
34102: ST_TO_ADDR
34103: GO 34051
34105: POP
34106: POP
// end ;
34107: GO 32586
34109: POP
34110: POP
// result := Replace ( result , 4 , tmp ) ;
34111: LD_ADDR_VAR 0 5
34115: PUSH
34116: LD_VAR 0 5
34120: PPUSH
34121: LD_INT 4
34123: PPUSH
34124: LD_VAR 0 8
34128: PPUSH
34129: CALL_OW 1
34133: ST_TO_ADDR
// end ;
34134: LD_VAR 0 5
34138: RET
// export function DangerAtRange ( unit , range ) ; begin
34139: LD_INT 0
34141: PPUSH
// if not unit then
34142: LD_VAR 0 1
34146: NOT
34147: IFFALSE 34151
// exit ;
34149: GO 34196
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34151: LD_ADDR_VAR 0 3
34155: PUSH
34156: LD_VAR 0 1
34160: PPUSH
34161: CALL_OW 255
34165: PPUSH
34166: LD_VAR 0 1
34170: PPUSH
34171: CALL_OW 250
34175: PPUSH
34176: LD_VAR 0 1
34180: PPUSH
34181: CALL_OW 251
34185: PPUSH
34186: LD_VAR 0 2
34190: PPUSH
34191: CALL 32438 0 4
34195: ST_TO_ADDR
// end ;
34196: LD_VAR 0 3
34200: RET
// export function DangerInArea ( side , area ) ; begin
34201: LD_INT 0
34203: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34204: LD_ADDR_VAR 0 3
34208: PUSH
34209: LD_VAR 0 2
34213: PPUSH
34214: LD_INT 81
34216: PUSH
34217: LD_VAR 0 1
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: PPUSH
34226: CALL_OW 70
34230: ST_TO_ADDR
// end ;
34231: LD_VAR 0 3
34235: RET
// export function IsExtension ( b ) ; begin
34236: LD_INT 0
34238: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34239: LD_ADDR_VAR 0 2
34243: PUSH
34244: LD_VAR 0 1
34248: PUSH
34249: LD_INT 23
34251: PUSH
34252: LD_INT 20
34254: PUSH
34255: LD_INT 22
34257: PUSH
34258: LD_INT 17
34260: PUSH
34261: LD_INT 24
34263: PUSH
34264: LD_INT 21
34266: PUSH
34267: LD_INT 19
34269: PUSH
34270: LD_INT 16
34272: PUSH
34273: LD_INT 25
34275: PUSH
34276: LD_INT 18
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: IN
34291: ST_TO_ADDR
// end ;
34292: LD_VAR 0 2
34296: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34297: LD_INT 0
34299: PPUSH
34300: PPUSH
34301: PPUSH
// result := [ ] ;
34302: LD_ADDR_VAR 0 4
34306: PUSH
34307: EMPTY
34308: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34309: LD_ADDR_VAR 0 5
34313: PUSH
34314: LD_VAR 0 2
34318: PPUSH
34319: LD_INT 21
34321: PUSH
34322: LD_INT 3
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PPUSH
34329: CALL_OW 70
34333: ST_TO_ADDR
// if not tmp then
34334: LD_VAR 0 5
34338: NOT
34339: IFFALSE 34343
// exit ;
34341: GO 34407
// if checkLink then
34343: LD_VAR 0 3
34347: IFFALSE 34397
// begin for i in tmp do
34349: LD_ADDR_VAR 0 6
34353: PUSH
34354: LD_VAR 0 5
34358: PUSH
34359: FOR_IN
34360: IFFALSE 34395
// if GetBase ( i ) <> base then
34362: LD_VAR 0 6
34366: PPUSH
34367: CALL_OW 274
34371: PUSH
34372: LD_VAR 0 1
34376: NONEQUAL
34377: IFFALSE 34393
// ComLinkToBase ( base , i ) ;
34379: LD_VAR 0 1
34383: PPUSH
34384: LD_VAR 0 6
34388: PPUSH
34389: CALL_OW 169
34393: GO 34359
34395: POP
34396: POP
// end ; result := tmp ;
34397: LD_ADDR_VAR 0 4
34401: PUSH
34402: LD_VAR 0 5
34406: ST_TO_ADDR
// end ;
34407: LD_VAR 0 4
34411: RET
// export function ComComplete ( units , b ) ; var i ; begin
34412: LD_INT 0
34414: PPUSH
34415: PPUSH
// if not units then
34416: LD_VAR 0 1
34420: NOT
34421: IFFALSE 34425
// exit ;
34423: GO 34515
// for i in units do
34425: LD_ADDR_VAR 0 4
34429: PUSH
34430: LD_VAR 0 1
34434: PUSH
34435: FOR_IN
34436: IFFALSE 34513
// if BuildingStatus ( b ) = bs_build then
34438: LD_VAR 0 2
34442: PPUSH
34443: CALL_OW 461
34447: PUSH
34448: LD_INT 1
34450: EQUAL
34451: IFFALSE 34511
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34453: LD_VAR 0 4
34457: PPUSH
34458: LD_STRING h
34460: PUSH
34461: LD_VAR 0 2
34465: PPUSH
34466: CALL_OW 250
34470: PUSH
34471: LD_VAR 0 2
34475: PPUSH
34476: CALL_OW 251
34480: PUSH
34481: LD_VAR 0 2
34485: PUSH
34486: LD_INT 0
34488: PUSH
34489: LD_INT 0
34491: PUSH
34492: LD_INT 0
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: PUSH
34504: EMPTY
34505: LIST
34506: PPUSH
34507: CALL_OW 446
34511: GO 34435
34513: POP
34514: POP
// end ;
34515: LD_VAR 0 3
34519: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34520: LD_INT 0
34522: PPUSH
34523: PPUSH
34524: PPUSH
34525: PPUSH
34526: PPUSH
34527: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
34528: LD_VAR 0 1
34532: NOT
34533: PUSH
34534: LD_VAR 0 1
34538: PPUSH
34539: CALL_OW 263
34543: PUSH
34544: LD_INT 2
34546: NONEQUAL
34547: OR
34548: IFFALSE 34552
// exit ;
34550: GO 34868
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34552: LD_ADDR_VAR 0 6
34556: PUSH
34557: LD_INT 22
34559: PUSH
34560: LD_VAR 0 1
34564: PPUSH
34565: CALL_OW 255
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PUSH
34574: LD_INT 2
34576: PUSH
34577: LD_INT 30
34579: PUSH
34580: LD_INT 36
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 34
34589: PUSH
34590: LD_INT 31
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: LIST
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PPUSH
34606: CALL_OW 69
34610: ST_TO_ADDR
// if not tmp then
34611: LD_VAR 0 6
34615: NOT
34616: IFFALSE 34620
// exit ;
34618: GO 34868
// result := [ ] ;
34620: LD_ADDR_VAR 0 2
34624: PUSH
34625: EMPTY
34626: ST_TO_ADDR
// for i in tmp do
34627: LD_ADDR_VAR 0 3
34631: PUSH
34632: LD_VAR 0 6
34636: PUSH
34637: FOR_IN
34638: IFFALSE 34709
// begin t := UnitsInside ( i ) ;
34640: LD_ADDR_VAR 0 4
34644: PUSH
34645: LD_VAR 0 3
34649: PPUSH
34650: CALL_OW 313
34654: ST_TO_ADDR
// if t then
34655: LD_VAR 0 4
34659: IFFALSE 34707
// for j in t do
34661: LD_ADDR_VAR 0 7
34665: PUSH
34666: LD_VAR 0 4
34670: PUSH
34671: FOR_IN
34672: IFFALSE 34705
// result := Replace ( result , result + 1 , j ) ;
34674: LD_ADDR_VAR 0 2
34678: PUSH
34679: LD_VAR 0 2
34683: PPUSH
34684: LD_VAR 0 2
34688: PUSH
34689: LD_INT 1
34691: PLUS
34692: PPUSH
34693: LD_VAR 0 7
34697: PPUSH
34698: CALL_OW 1
34702: ST_TO_ADDR
34703: GO 34671
34705: POP
34706: POP
// end ;
34707: GO 34637
34709: POP
34710: POP
// if not result then
34711: LD_VAR 0 2
34715: NOT
34716: IFFALSE 34720
// exit ;
34718: GO 34868
// mech := result [ 1 ] ;
34720: LD_ADDR_VAR 0 5
34724: PUSH
34725: LD_VAR 0 2
34729: PUSH
34730: LD_INT 1
34732: ARRAY
34733: ST_TO_ADDR
// if result > 1 then
34734: LD_VAR 0 2
34738: PUSH
34739: LD_INT 1
34741: GREATER
34742: IFFALSE 34854
// begin for i = 2 to result do
34744: LD_ADDR_VAR 0 3
34748: PUSH
34749: DOUBLE
34750: LD_INT 2
34752: DEC
34753: ST_TO_ADDR
34754: LD_VAR 0 2
34758: PUSH
34759: FOR_TO
34760: IFFALSE 34852
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34762: LD_ADDR_VAR 0 4
34766: PUSH
34767: LD_VAR 0 2
34771: PUSH
34772: LD_VAR 0 3
34776: ARRAY
34777: PPUSH
34778: LD_INT 3
34780: PPUSH
34781: CALL_OW 259
34785: PUSH
34786: LD_VAR 0 2
34790: PUSH
34791: LD_VAR 0 3
34795: ARRAY
34796: PPUSH
34797: CALL_OW 432
34801: MINUS
34802: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34803: LD_VAR 0 4
34807: PUSH
34808: LD_VAR 0 5
34812: PPUSH
34813: LD_INT 3
34815: PPUSH
34816: CALL_OW 259
34820: PUSH
34821: LD_VAR 0 5
34825: PPUSH
34826: CALL_OW 432
34830: MINUS
34831: GREATEREQUAL
34832: IFFALSE 34850
// mech := result [ i ] ;
34834: LD_ADDR_VAR 0 5
34838: PUSH
34839: LD_VAR 0 2
34843: PUSH
34844: LD_VAR 0 3
34848: ARRAY
34849: ST_TO_ADDR
// end ;
34850: GO 34759
34852: POP
34853: POP
// end ; ComLinkTo ( vehicle , mech ) ;
34854: LD_VAR 0 1
34858: PPUSH
34859: LD_VAR 0 5
34863: PPUSH
34864: CALL_OW 135
// end ;
34868: LD_VAR 0 2
34872: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34873: LD_INT 0
34875: PPUSH
34876: PPUSH
34877: PPUSH
34878: PPUSH
34879: PPUSH
34880: PPUSH
34881: PPUSH
34882: PPUSH
34883: PPUSH
34884: PPUSH
34885: PPUSH
34886: PPUSH
34887: PPUSH
// result := [ ] ;
34888: LD_ADDR_VAR 0 7
34892: PUSH
34893: EMPTY
34894: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34895: LD_VAR 0 1
34899: PPUSH
34900: CALL_OW 266
34904: PUSH
34905: LD_INT 0
34907: PUSH
34908: LD_INT 1
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: IN
34915: NOT
34916: IFFALSE 34920
// exit ;
34918: GO 36554
// if name then
34920: LD_VAR 0 3
34924: IFFALSE 34940
// SetBName ( base_dep , name ) ;
34926: LD_VAR 0 1
34930: PPUSH
34931: LD_VAR 0 3
34935: PPUSH
34936: CALL_OW 500
// base := GetBase ( base_dep ) ;
34940: LD_ADDR_VAR 0 15
34944: PUSH
34945: LD_VAR 0 1
34949: PPUSH
34950: CALL_OW 274
34954: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34955: LD_ADDR_VAR 0 16
34959: PUSH
34960: LD_VAR 0 1
34964: PPUSH
34965: CALL_OW 255
34969: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34970: LD_ADDR_VAR 0 17
34974: PUSH
34975: LD_VAR 0 1
34979: PPUSH
34980: CALL_OW 248
34984: ST_TO_ADDR
// if sources then
34985: LD_VAR 0 5
34989: IFFALSE 35036
// for i = 1 to 3 do
34991: LD_ADDR_VAR 0 8
34995: PUSH
34996: DOUBLE
34997: LD_INT 1
34999: DEC
35000: ST_TO_ADDR
35001: LD_INT 3
35003: PUSH
35004: FOR_TO
35005: IFFALSE 35034
// AddResourceType ( base , i , sources [ i ] ) ;
35007: LD_VAR 0 15
35011: PPUSH
35012: LD_VAR 0 8
35016: PPUSH
35017: LD_VAR 0 5
35021: PUSH
35022: LD_VAR 0 8
35026: ARRAY
35027: PPUSH
35028: CALL_OW 276
35032: GO 35004
35034: POP
35035: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35036: LD_ADDR_VAR 0 18
35040: PUSH
35041: LD_VAR 0 15
35045: PPUSH
35046: LD_VAR 0 2
35050: PPUSH
35051: LD_INT 1
35053: PPUSH
35054: CALL 34297 0 3
35058: ST_TO_ADDR
// InitHc ;
35059: CALL_OW 19
// InitUc ;
35063: CALL_OW 18
// uc_side := side ;
35067: LD_ADDR_OWVAR 20
35071: PUSH
35072: LD_VAR 0 16
35076: ST_TO_ADDR
// uc_nation := nation ;
35077: LD_ADDR_OWVAR 21
35081: PUSH
35082: LD_VAR 0 17
35086: ST_TO_ADDR
// if buildings then
35087: LD_VAR 0 18
35091: IFFALSE 36413
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35093: LD_ADDR_VAR 0 19
35097: PUSH
35098: LD_VAR 0 18
35102: PPUSH
35103: LD_INT 2
35105: PUSH
35106: LD_INT 30
35108: PUSH
35109: LD_INT 29
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: PUSH
35116: LD_INT 30
35118: PUSH
35119: LD_INT 30
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: LIST
35130: PPUSH
35131: CALL_OW 72
35135: ST_TO_ADDR
// if tmp then
35136: LD_VAR 0 19
35140: IFFALSE 35188
// for i in tmp do
35142: LD_ADDR_VAR 0 8
35146: PUSH
35147: LD_VAR 0 19
35151: PUSH
35152: FOR_IN
35153: IFFALSE 35186
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35155: LD_VAR 0 8
35159: PPUSH
35160: CALL_OW 250
35164: PPUSH
35165: LD_VAR 0 8
35169: PPUSH
35170: CALL_OW 251
35174: PPUSH
35175: LD_VAR 0 16
35179: PPUSH
35180: CALL_OW 441
35184: GO 35152
35186: POP
35187: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35188: LD_VAR 0 18
35192: PPUSH
35193: LD_INT 2
35195: PUSH
35196: LD_INT 30
35198: PUSH
35199: LD_INT 32
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: LD_INT 30
35208: PUSH
35209: LD_INT 33
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: LIST
35220: PPUSH
35221: CALL_OW 72
35225: IFFALSE 35313
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35227: LD_ADDR_VAR 0 8
35231: PUSH
35232: LD_VAR 0 18
35236: PPUSH
35237: LD_INT 2
35239: PUSH
35240: LD_INT 30
35242: PUSH
35243: LD_INT 32
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 30
35252: PUSH
35253: LD_INT 33
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: LIST
35264: PPUSH
35265: CALL_OW 72
35269: PUSH
35270: FOR_IN
35271: IFFALSE 35311
// begin if not GetBWeapon ( i ) then
35273: LD_VAR 0 8
35277: PPUSH
35278: CALL_OW 269
35282: NOT
35283: IFFALSE 35309
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35285: LD_VAR 0 8
35289: PPUSH
35290: LD_VAR 0 8
35294: PPUSH
35295: LD_VAR 0 2
35299: PPUSH
35300: CALL 36559 0 2
35304: PPUSH
35305: CALL_OW 431
// end ;
35309: GO 35270
35311: POP
35312: POP
// end ; for i = 1 to personel do
35313: LD_ADDR_VAR 0 8
35317: PUSH
35318: DOUBLE
35319: LD_INT 1
35321: DEC
35322: ST_TO_ADDR
35323: LD_VAR 0 6
35327: PUSH
35328: FOR_TO
35329: IFFALSE 36393
// begin if i > 4 then
35331: LD_VAR 0 8
35335: PUSH
35336: LD_INT 4
35338: GREATER
35339: IFFALSE 35343
// break ;
35341: GO 36393
// case i of 1 :
35343: LD_VAR 0 8
35347: PUSH
35348: LD_INT 1
35350: DOUBLE
35351: EQUAL
35352: IFTRUE 35356
35354: GO 35436
35356: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35357: LD_ADDR_VAR 0 12
35361: PUSH
35362: LD_VAR 0 18
35366: PPUSH
35367: LD_INT 22
35369: PUSH
35370: LD_VAR 0 16
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: LD_INT 58
35381: PUSH
35382: EMPTY
35383: LIST
35384: PUSH
35385: LD_INT 2
35387: PUSH
35388: LD_INT 30
35390: PUSH
35391: LD_INT 32
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PUSH
35398: LD_INT 30
35400: PUSH
35401: LD_INT 4
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: LD_INT 30
35410: PUSH
35411: LD_INT 5
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: LIST
35428: PPUSH
35429: CALL_OW 72
35433: ST_TO_ADDR
35434: GO 35658
35436: LD_INT 2
35438: DOUBLE
35439: EQUAL
35440: IFTRUE 35444
35442: GO 35506
35444: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35445: LD_ADDR_VAR 0 12
35449: PUSH
35450: LD_VAR 0 18
35454: PPUSH
35455: LD_INT 22
35457: PUSH
35458: LD_VAR 0 16
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PUSH
35467: LD_INT 2
35469: PUSH
35470: LD_INT 30
35472: PUSH
35473: LD_INT 0
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 30
35482: PUSH
35483: LD_INT 1
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: LIST
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PPUSH
35499: CALL_OW 72
35503: ST_TO_ADDR
35504: GO 35658
35506: LD_INT 3
35508: DOUBLE
35509: EQUAL
35510: IFTRUE 35514
35512: GO 35576
35514: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35515: LD_ADDR_VAR 0 12
35519: PUSH
35520: LD_VAR 0 18
35524: PPUSH
35525: LD_INT 22
35527: PUSH
35528: LD_VAR 0 16
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PUSH
35537: LD_INT 2
35539: PUSH
35540: LD_INT 30
35542: PUSH
35543: LD_INT 2
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 30
35552: PUSH
35553: LD_INT 3
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: LIST
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PPUSH
35569: CALL_OW 72
35573: ST_TO_ADDR
35574: GO 35658
35576: LD_INT 4
35578: DOUBLE
35579: EQUAL
35580: IFTRUE 35584
35582: GO 35657
35584: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35585: LD_ADDR_VAR 0 12
35589: PUSH
35590: LD_VAR 0 18
35594: PPUSH
35595: LD_INT 22
35597: PUSH
35598: LD_VAR 0 16
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 2
35609: PUSH
35610: LD_INT 30
35612: PUSH
35613: LD_INT 6
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: PUSH
35620: LD_INT 30
35622: PUSH
35623: LD_INT 7
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: LD_INT 30
35632: PUSH
35633: LD_INT 8
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PPUSH
35650: CALL_OW 72
35654: ST_TO_ADDR
35655: GO 35658
35657: POP
// if i = 1 then
35658: LD_VAR 0 8
35662: PUSH
35663: LD_INT 1
35665: EQUAL
35666: IFFALSE 35777
// begin tmp := [ ] ;
35668: LD_ADDR_VAR 0 19
35672: PUSH
35673: EMPTY
35674: ST_TO_ADDR
// for j in f do
35675: LD_ADDR_VAR 0 9
35679: PUSH
35680: LD_VAR 0 12
35684: PUSH
35685: FOR_IN
35686: IFFALSE 35759
// if GetBType ( j ) = b_bunker then
35688: LD_VAR 0 9
35692: PPUSH
35693: CALL_OW 266
35697: PUSH
35698: LD_INT 32
35700: EQUAL
35701: IFFALSE 35728
// tmp := Insert ( tmp , 1 , j ) else
35703: LD_ADDR_VAR 0 19
35707: PUSH
35708: LD_VAR 0 19
35712: PPUSH
35713: LD_INT 1
35715: PPUSH
35716: LD_VAR 0 9
35720: PPUSH
35721: CALL_OW 2
35725: ST_TO_ADDR
35726: GO 35757
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35728: LD_ADDR_VAR 0 19
35732: PUSH
35733: LD_VAR 0 19
35737: PPUSH
35738: LD_VAR 0 19
35742: PUSH
35743: LD_INT 1
35745: PLUS
35746: PPUSH
35747: LD_VAR 0 9
35751: PPUSH
35752: CALL_OW 2
35756: ST_TO_ADDR
35757: GO 35685
35759: POP
35760: POP
// if tmp then
35761: LD_VAR 0 19
35765: IFFALSE 35777
// f := tmp ;
35767: LD_ADDR_VAR 0 12
35771: PUSH
35772: LD_VAR 0 19
35776: ST_TO_ADDR
// end ; x := personel [ i ] ;
35777: LD_ADDR_VAR 0 13
35781: PUSH
35782: LD_VAR 0 6
35786: PUSH
35787: LD_VAR 0 8
35791: ARRAY
35792: ST_TO_ADDR
// if x = - 1 then
35793: LD_VAR 0 13
35797: PUSH
35798: LD_INT 1
35800: NEG
35801: EQUAL
35802: IFFALSE 36011
// begin for j in f do
35804: LD_ADDR_VAR 0 9
35808: PUSH
35809: LD_VAR 0 12
35813: PUSH
35814: FOR_IN
35815: IFFALSE 36007
// repeat InitHc ;
35817: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35821: LD_VAR 0 9
35825: PPUSH
35826: CALL_OW 266
35830: PUSH
35831: LD_INT 5
35833: EQUAL
35834: IFFALSE 35904
// begin if UnitsInside ( j ) < 3 then
35836: LD_VAR 0 9
35840: PPUSH
35841: CALL_OW 313
35845: PUSH
35846: LD_INT 3
35848: LESS
35849: IFFALSE 35885
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35851: LD_INT 0
35853: PPUSH
35854: LD_INT 5
35856: PUSH
35857: LD_INT 8
35859: PUSH
35860: LD_INT 9
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: LIST
35867: PUSH
35868: LD_VAR 0 17
35872: ARRAY
35873: PPUSH
35874: LD_VAR 0 4
35878: PPUSH
35879: CALL_OW 380
35883: GO 35902
// PrepareHuman ( false , i , skill ) ;
35885: LD_INT 0
35887: PPUSH
35888: LD_VAR 0 8
35892: PPUSH
35893: LD_VAR 0 4
35897: PPUSH
35898: CALL_OW 380
// end else
35902: GO 35921
// PrepareHuman ( false , i , skill ) ;
35904: LD_INT 0
35906: PPUSH
35907: LD_VAR 0 8
35911: PPUSH
35912: LD_VAR 0 4
35916: PPUSH
35917: CALL_OW 380
// un := CreateHuman ;
35921: LD_ADDR_VAR 0 14
35925: PUSH
35926: CALL_OW 44
35930: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35931: LD_ADDR_VAR 0 7
35935: PUSH
35936: LD_VAR 0 7
35940: PPUSH
35941: LD_INT 1
35943: PPUSH
35944: LD_VAR 0 14
35948: PPUSH
35949: CALL_OW 2
35953: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35954: LD_VAR 0 14
35958: PPUSH
35959: LD_VAR 0 9
35963: PPUSH
35964: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35968: LD_VAR 0 9
35972: PPUSH
35973: CALL_OW 313
35977: PUSH
35978: LD_INT 6
35980: EQUAL
35981: PUSH
35982: LD_VAR 0 9
35986: PPUSH
35987: CALL_OW 266
35991: PUSH
35992: LD_INT 32
35994: PUSH
35995: LD_INT 31
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: IN
36002: OR
36003: IFFALSE 35817
36005: GO 35814
36007: POP
36008: POP
// end else
36009: GO 36391
// for j = 1 to x do
36011: LD_ADDR_VAR 0 9
36015: PUSH
36016: DOUBLE
36017: LD_INT 1
36019: DEC
36020: ST_TO_ADDR
36021: LD_VAR 0 13
36025: PUSH
36026: FOR_TO
36027: IFFALSE 36389
// begin InitHc ;
36029: CALL_OW 19
// if not f then
36033: LD_VAR 0 12
36037: NOT
36038: IFFALSE 36127
// begin PrepareHuman ( false , i , skill ) ;
36040: LD_INT 0
36042: PPUSH
36043: LD_VAR 0 8
36047: PPUSH
36048: LD_VAR 0 4
36052: PPUSH
36053: CALL_OW 380
// un := CreateHuman ;
36057: LD_ADDR_VAR 0 14
36061: PUSH
36062: CALL_OW 44
36066: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36067: LD_ADDR_VAR 0 7
36071: PUSH
36072: LD_VAR 0 7
36076: PPUSH
36077: LD_INT 1
36079: PPUSH
36080: LD_VAR 0 14
36084: PPUSH
36085: CALL_OW 2
36089: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36090: LD_VAR 0 14
36094: PPUSH
36095: LD_VAR 0 1
36099: PPUSH
36100: CALL_OW 250
36104: PPUSH
36105: LD_VAR 0 1
36109: PPUSH
36110: CALL_OW 251
36114: PPUSH
36115: LD_INT 10
36117: PPUSH
36118: LD_INT 0
36120: PPUSH
36121: CALL_OW 50
// continue ;
36125: GO 36026
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36127: LD_VAR 0 12
36131: PUSH
36132: LD_INT 1
36134: ARRAY
36135: PPUSH
36136: CALL_OW 313
36140: PUSH
36141: LD_VAR 0 12
36145: PUSH
36146: LD_INT 1
36148: ARRAY
36149: PPUSH
36150: CALL_OW 266
36154: PUSH
36155: LD_INT 32
36157: PUSH
36158: LD_INT 31
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: IN
36165: AND
36166: PUSH
36167: LD_VAR 0 12
36171: PUSH
36172: LD_INT 1
36174: ARRAY
36175: PPUSH
36176: CALL_OW 313
36180: PUSH
36181: LD_INT 6
36183: EQUAL
36184: OR
36185: IFFALSE 36205
// f := Delete ( f , 1 ) ;
36187: LD_ADDR_VAR 0 12
36191: PUSH
36192: LD_VAR 0 12
36196: PPUSH
36197: LD_INT 1
36199: PPUSH
36200: CALL_OW 3
36204: ST_TO_ADDR
// if not f then
36205: LD_VAR 0 12
36209: NOT
36210: IFFALSE 36228
// begin x := x + 2 ;
36212: LD_ADDR_VAR 0 13
36216: PUSH
36217: LD_VAR 0 13
36221: PUSH
36222: LD_INT 2
36224: PLUS
36225: ST_TO_ADDR
// continue ;
36226: GO 36026
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36228: LD_VAR 0 12
36232: PUSH
36233: LD_INT 1
36235: ARRAY
36236: PPUSH
36237: CALL_OW 266
36241: PUSH
36242: LD_INT 5
36244: EQUAL
36245: IFFALSE 36319
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36247: LD_VAR 0 12
36251: PUSH
36252: LD_INT 1
36254: ARRAY
36255: PPUSH
36256: CALL_OW 313
36260: PUSH
36261: LD_INT 3
36263: LESS
36264: IFFALSE 36300
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36266: LD_INT 0
36268: PPUSH
36269: LD_INT 5
36271: PUSH
36272: LD_INT 8
36274: PUSH
36275: LD_INT 9
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: LIST
36282: PUSH
36283: LD_VAR 0 17
36287: ARRAY
36288: PPUSH
36289: LD_VAR 0 4
36293: PPUSH
36294: CALL_OW 380
36298: GO 36317
// PrepareHuman ( false , i , skill ) ;
36300: LD_INT 0
36302: PPUSH
36303: LD_VAR 0 8
36307: PPUSH
36308: LD_VAR 0 4
36312: PPUSH
36313: CALL_OW 380
// end else
36317: GO 36336
// PrepareHuman ( false , i , skill ) ;
36319: LD_INT 0
36321: PPUSH
36322: LD_VAR 0 8
36326: PPUSH
36327: LD_VAR 0 4
36331: PPUSH
36332: CALL_OW 380
// un := CreateHuman ;
36336: LD_ADDR_VAR 0 14
36340: PUSH
36341: CALL_OW 44
36345: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36346: LD_ADDR_VAR 0 7
36350: PUSH
36351: LD_VAR 0 7
36355: PPUSH
36356: LD_INT 1
36358: PPUSH
36359: LD_VAR 0 14
36363: PPUSH
36364: CALL_OW 2
36368: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36369: LD_VAR 0 14
36373: PPUSH
36374: LD_VAR 0 12
36378: PUSH
36379: LD_INT 1
36381: ARRAY
36382: PPUSH
36383: CALL_OW 52
// end ;
36387: GO 36026
36389: POP
36390: POP
// end ;
36391: GO 35328
36393: POP
36394: POP
// result := result ^ buildings ;
36395: LD_ADDR_VAR 0 7
36399: PUSH
36400: LD_VAR 0 7
36404: PUSH
36405: LD_VAR 0 18
36409: ADD
36410: ST_TO_ADDR
// end else
36411: GO 36554
// begin for i = 1 to personel do
36413: LD_ADDR_VAR 0 8
36417: PUSH
36418: DOUBLE
36419: LD_INT 1
36421: DEC
36422: ST_TO_ADDR
36423: LD_VAR 0 6
36427: PUSH
36428: FOR_TO
36429: IFFALSE 36552
// begin if i > 4 then
36431: LD_VAR 0 8
36435: PUSH
36436: LD_INT 4
36438: GREATER
36439: IFFALSE 36443
// break ;
36441: GO 36552
// x := personel [ i ] ;
36443: LD_ADDR_VAR 0 13
36447: PUSH
36448: LD_VAR 0 6
36452: PUSH
36453: LD_VAR 0 8
36457: ARRAY
36458: ST_TO_ADDR
// if x = - 1 then
36459: LD_VAR 0 13
36463: PUSH
36464: LD_INT 1
36466: NEG
36467: EQUAL
36468: IFFALSE 36472
// continue ;
36470: GO 36428
// PrepareHuman ( false , i , skill ) ;
36472: LD_INT 0
36474: PPUSH
36475: LD_VAR 0 8
36479: PPUSH
36480: LD_VAR 0 4
36484: PPUSH
36485: CALL_OW 380
// un := CreateHuman ;
36489: LD_ADDR_VAR 0 14
36493: PUSH
36494: CALL_OW 44
36498: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36499: LD_VAR 0 14
36503: PPUSH
36504: LD_VAR 0 1
36508: PPUSH
36509: CALL_OW 250
36513: PPUSH
36514: LD_VAR 0 1
36518: PPUSH
36519: CALL_OW 251
36523: PPUSH
36524: LD_INT 10
36526: PPUSH
36527: LD_INT 0
36529: PPUSH
36530: CALL_OW 50
// result := result ^ un ;
36534: LD_ADDR_VAR 0 7
36538: PUSH
36539: LD_VAR 0 7
36543: PUSH
36544: LD_VAR 0 14
36548: ADD
36549: ST_TO_ADDR
// end ;
36550: GO 36428
36552: POP
36553: POP
// end ; end ;
36554: LD_VAR 0 7
36558: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36559: LD_INT 0
36561: PPUSH
36562: PPUSH
36563: PPUSH
36564: PPUSH
36565: PPUSH
36566: PPUSH
36567: PPUSH
36568: PPUSH
36569: PPUSH
36570: PPUSH
36571: PPUSH
36572: PPUSH
36573: PPUSH
36574: PPUSH
36575: PPUSH
36576: PPUSH
// result := false ;
36577: LD_ADDR_VAR 0 3
36581: PUSH
36582: LD_INT 0
36584: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36585: LD_VAR 0 1
36589: NOT
36590: PUSH
36591: LD_VAR 0 1
36595: PPUSH
36596: CALL_OW 266
36600: PUSH
36601: LD_INT 32
36603: PUSH
36604: LD_INT 33
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: IN
36611: NOT
36612: OR
36613: IFFALSE 36617
// exit ;
36615: GO 37726
// nat := GetNation ( tower ) ;
36617: LD_ADDR_VAR 0 12
36621: PUSH
36622: LD_VAR 0 1
36626: PPUSH
36627: CALL_OW 248
36631: ST_TO_ADDR
// side := GetSide ( tower ) ;
36632: LD_ADDR_VAR 0 16
36636: PUSH
36637: LD_VAR 0 1
36641: PPUSH
36642: CALL_OW 255
36646: ST_TO_ADDR
// x := GetX ( tower ) ;
36647: LD_ADDR_VAR 0 10
36651: PUSH
36652: LD_VAR 0 1
36656: PPUSH
36657: CALL_OW 250
36661: ST_TO_ADDR
// y := GetY ( tower ) ;
36662: LD_ADDR_VAR 0 11
36666: PUSH
36667: LD_VAR 0 1
36671: PPUSH
36672: CALL_OW 251
36676: ST_TO_ADDR
// if not x or not y then
36677: LD_VAR 0 10
36681: NOT
36682: PUSH
36683: LD_VAR 0 11
36687: NOT
36688: OR
36689: IFFALSE 36693
// exit ;
36691: GO 37726
// weapon := 0 ;
36693: LD_ADDR_VAR 0 18
36697: PUSH
36698: LD_INT 0
36700: ST_TO_ADDR
// fac_list := [ ] ;
36701: LD_ADDR_VAR 0 17
36705: PUSH
36706: EMPTY
36707: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36708: LD_ADDR_VAR 0 6
36712: PUSH
36713: LD_VAR 0 1
36717: PPUSH
36718: CALL_OW 274
36722: PPUSH
36723: LD_VAR 0 2
36727: PPUSH
36728: LD_INT 0
36730: PPUSH
36731: CALL 34297 0 3
36735: PPUSH
36736: LD_INT 30
36738: PUSH
36739: LD_INT 3
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PPUSH
36746: CALL_OW 72
36750: ST_TO_ADDR
// if not factories then
36751: LD_VAR 0 6
36755: NOT
36756: IFFALSE 36760
// exit ;
36758: GO 37726
// for i in factories do
36760: LD_ADDR_VAR 0 8
36764: PUSH
36765: LD_VAR 0 6
36769: PUSH
36770: FOR_IN
36771: IFFALSE 36796
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36773: LD_ADDR_VAR 0 17
36777: PUSH
36778: LD_VAR 0 17
36782: PUSH
36783: LD_VAR 0 8
36787: PPUSH
36788: CALL_OW 478
36792: UNION
36793: ST_TO_ADDR
36794: GO 36770
36796: POP
36797: POP
// if not fac_list then
36798: LD_VAR 0 17
36802: NOT
36803: IFFALSE 36807
// exit ;
36805: GO 37726
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36807: LD_ADDR_VAR 0 5
36811: PUSH
36812: LD_INT 4
36814: PUSH
36815: LD_INT 5
36817: PUSH
36818: LD_INT 9
36820: PUSH
36821: LD_INT 10
36823: PUSH
36824: LD_INT 6
36826: PUSH
36827: LD_INT 7
36829: PUSH
36830: LD_INT 11
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: PUSH
36842: LD_INT 27
36844: PUSH
36845: LD_INT 28
36847: PUSH
36848: LD_INT 26
36850: PUSH
36851: LD_INT 30
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 43
36862: PUSH
36863: LD_INT 44
36865: PUSH
36866: LD_INT 46
36868: PUSH
36869: LD_INT 45
36871: PUSH
36872: LD_INT 47
36874: PUSH
36875: LD_INT 49
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: LIST
36890: PUSH
36891: LD_VAR 0 12
36895: ARRAY
36896: ST_TO_ADDR
// list := list isect fac_list ;
36897: LD_ADDR_VAR 0 5
36901: PUSH
36902: LD_VAR 0 5
36906: PUSH
36907: LD_VAR 0 17
36911: ISECT
36912: ST_TO_ADDR
// if not list then
36913: LD_VAR 0 5
36917: NOT
36918: IFFALSE 36922
// exit ;
36920: GO 37726
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36922: LD_VAR 0 12
36926: PUSH
36927: LD_INT 3
36929: EQUAL
36930: PUSH
36931: LD_INT 49
36933: PUSH
36934: LD_VAR 0 5
36938: IN
36939: AND
36940: PUSH
36941: LD_INT 31
36943: PPUSH
36944: LD_VAR 0 16
36948: PPUSH
36949: CALL_OW 321
36953: PUSH
36954: LD_INT 2
36956: EQUAL
36957: AND
36958: IFFALSE 37018
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36960: LD_INT 22
36962: PUSH
36963: LD_VAR 0 16
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: LD_INT 35
36974: PUSH
36975: LD_INT 49
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: PUSH
36982: LD_INT 91
36984: PUSH
36985: LD_VAR 0 1
36989: PUSH
36990: LD_INT 10
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: LIST
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: LIST
37002: PPUSH
37003: CALL_OW 69
37007: NOT
37008: IFFALSE 37018
// weapon := ru_time_lapser ;
37010: LD_ADDR_VAR 0 18
37014: PUSH
37015: LD_INT 49
37017: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37018: LD_VAR 0 12
37022: PUSH
37023: LD_INT 1
37025: PUSH
37026: LD_INT 2
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: IN
37033: PUSH
37034: LD_INT 11
37036: PUSH
37037: LD_VAR 0 5
37041: IN
37042: PUSH
37043: LD_INT 30
37045: PUSH
37046: LD_VAR 0 5
37050: IN
37051: OR
37052: AND
37053: PUSH
37054: LD_INT 6
37056: PPUSH
37057: LD_VAR 0 16
37061: PPUSH
37062: CALL_OW 321
37066: PUSH
37067: LD_INT 2
37069: EQUAL
37070: AND
37071: IFFALSE 37236
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37073: LD_INT 22
37075: PUSH
37076: LD_VAR 0 16
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: LD_INT 2
37087: PUSH
37088: LD_INT 35
37090: PUSH
37091: LD_INT 11
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 35
37100: PUSH
37101: LD_INT 30
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 91
37115: PUSH
37116: LD_VAR 0 1
37120: PUSH
37121: LD_INT 18
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: LIST
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: LIST
37133: PPUSH
37134: CALL_OW 69
37138: NOT
37139: PUSH
37140: LD_INT 22
37142: PUSH
37143: LD_VAR 0 16
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 2
37154: PUSH
37155: LD_INT 30
37157: PUSH
37158: LD_INT 32
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: PUSH
37165: LD_INT 30
37167: PUSH
37168: LD_INT 33
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: LIST
37179: PUSH
37180: LD_INT 91
37182: PUSH
37183: LD_VAR 0 1
37187: PUSH
37188: LD_INT 12
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: LIST
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: LIST
37200: PUSH
37201: EMPTY
37202: LIST
37203: PPUSH
37204: CALL_OW 69
37208: PUSH
37209: LD_INT 2
37211: GREATER
37212: AND
37213: IFFALSE 37236
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37215: LD_ADDR_VAR 0 18
37219: PUSH
37220: LD_INT 11
37222: PUSH
37223: LD_INT 30
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_VAR 0 12
37234: ARRAY
37235: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37236: LD_VAR 0 18
37240: NOT
37241: PUSH
37242: LD_INT 40
37244: PPUSH
37245: LD_VAR 0 16
37249: PPUSH
37250: CALL_OW 321
37254: PUSH
37255: LD_INT 2
37257: EQUAL
37258: AND
37259: PUSH
37260: LD_INT 7
37262: PUSH
37263: LD_VAR 0 5
37267: IN
37268: PUSH
37269: LD_INT 28
37271: PUSH
37272: LD_VAR 0 5
37276: IN
37277: OR
37278: PUSH
37279: LD_INT 45
37281: PUSH
37282: LD_VAR 0 5
37286: IN
37287: OR
37288: AND
37289: IFFALSE 37543
// begin hex := GetHexInfo ( x , y ) ;
37291: LD_ADDR_VAR 0 4
37295: PUSH
37296: LD_VAR 0 10
37300: PPUSH
37301: LD_VAR 0 11
37305: PPUSH
37306: CALL_OW 546
37310: ST_TO_ADDR
// if hex [ 1 ] then
37311: LD_VAR 0 4
37315: PUSH
37316: LD_INT 1
37318: ARRAY
37319: IFFALSE 37323
// exit ;
37321: GO 37726
// height := hex [ 2 ] ;
37323: LD_ADDR_VAR 0 15
37327: PUSH
37328: LD_VAR 0 4
37332: PUSH
37333: LD_INT 2
37335: ARRAY
37336: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37337: LD_ADDR_VAR 0 14
37341: PUSH
37342: LD_INT 0
37344: PUSH
37345: LD_INT 2
37347: PUSH
37348: LD_INT 3
37350: PUSH
37351: LD_INT 5
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: ST_TO_ADDR
// for i in tmp do
37360: LD_ADDR_VAR 0 8
37364: PUSH
37365: LD_VAR 0 14
37369: PUSH
37370: FOR_IN
37371: IFFALSE 37541
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37373: LD_ADDR_VAR 0 9
37377: PUSH
37378: LD_VAR 0 10
37382: PPUSH
37383: LD_VAR 0 8
37387: PPUSH
37388: LD_INT 5
37390: PPUSH
37391: CALL_OW 272
37395: PUSH
37396: LD_VAR 0 11
37400: PPUSH
37401: LD_VAR 0 8
37405: PPUSH
37406: LD_INT 5
37408: PPUSH
37409: CALL_OW 273
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37418: LD_VAR 0 9
37422: PUSH
37423: LD_INT 1
37425: ARRAY
37426: PPUSH
37427: LD_VAR 0 9
37431: PUSH
37432: LD_INT 2
37434: ARRAY
37435: PPUSH
37436: CALL_OW 488
37440: IFFALSE 37539
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37442: LD_ADDR_VAR 0 4
37446: PUSH
37447: LD_VAR 0 9
37451: PUSH
37452: LD_INT 1
37454: ARRAY
37455: PPUSH
37456: LD_VAR 0 9
37460: PUSH
37461: LD_INT 2
37463: ARRAY
37464: PPUSH
37465: CALL_OW 546
37469: ST_TO_ADDR
// if hex [ 1 ] then
37470: LD_VAR 0 4
37474: PUSH
37475: LD_INT 1
37477: ARRAY
37478: IFFALSE 37482
// continue ;
37480: GO 37370
// h := hex [ 2 ] ;
37482: LD_ADDR_VAR 0 13
37486: PUSH
37487: LD_VAR 0 4
37491: PUSH
37492: LD_INT 2
37494: ARRAY
37495: ST_TO_ADDR
// if h + 7 < height then
37496: LD_VAR 0 13
37500: PUSH
37501: LD_INT 7
37503: PLUS
37504: PUSH
37505: LD_VAR 0 15
37509: LESS
37510: IFFALSE 37539
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37512: LD_ADDR_VAR 0 18
37516: PUSH
37517: LD_INT 7
37519: PUSH
37520: LD_INT 28
37522: PUSH
37523: LD_INT 45
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: LIST
37530: PUSH
37531: LD_VAR 0 12
37535: ARRAY
37536: ST_TO_ADDR
// break ;
37537: GO 37541
// end ; end ; end ;
37539: GO 37370
37541: POP
37542: POP
// end ; if not weapon then
37543: LD_VAR 0 18
37547: NOT
37548: IFFALSE 37608
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37550: LD_ADDR_VAR 0 5
37554: PUSH
37555: LD_VAR 0 5
37559: PUSH
37560: LD_INT 11
37562: PUSH
37563: LD_INT 30
37565: PUSH
37566: LD_INT 49
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: LIST
37573: DIFF
37574: ST_TO_ADDR
// if not list then
37575: LD_VAR 0 5
37579: NOT
37580: IFFALSE 37584
// exit ;
37582: GO 37726
// weapon := list [ rand ( 1 , list ) ] ;
37584: LD_ADDR_VAR 0 18
37588: PUSH
37589: LD_VAR 0 5
37593: PUSH
37594: LD_INT 1
37596: PPUSH
37597: LD_VAR 0 5
37601: PPUSH
37602: CALL_OW 12
37606: ARRAY
37607: ST_TO_ADDR
// end ; if weapon then
37608: LD_VAR 0 18
37612: IFFALSE 37726
// begin tmp := CostOfWeapon ( weapon ) ;
37614: LD_ADDR_VAR 0 14
37618: PUSH
37619: LD_VAR 0 18
37623: PPUSH
37624: CALL_OW 451
37628: ST_TO_ADDR
// j := GetBase ( tower ) ;
37629: LD_ADDR_VAR 0 9
37633: PUSH
37634: LD_VAR 0 1
37638: PPUSH
37639: CALL_OW 274
37643: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37644: LD_VAR 0 9
37648: PPUSH
37649: LD_INT 1
37651: PPUSH
37652: CALL_OW 275
37656: PUSH
37657: LD_VAR 0 14
37661: PUSH
37662: LD_INT 1
37664: ARRAY
37665: GREATEREQUAL
37666: PUSH
37667: LD_VAR 0 9
37671: PPUSH
37672: LD_INT 2
37674: PPUSH
37675: CALL_OW 275
37679: PUSH
37680: LD_VAR 0 14
37684: PUSH
37685: LD_INT 2
37687: ARRAY
37688: GREATEREQUAL
37689: AND
37690: PUSH
37691: LD_VAR 0 9
37695: PPUSH
37696: LD_INT 3
37698: PPUSH
37699: CALL_OW 275
37703: PUSH
37704: LD_VAR 0 14
37708: PUSH
37709: LD_INT 3
37711: ARRAY
37712: GREATEREQUAL
37713: AND
37714: IFFALSE 37726
// result := weapon ;
37716: LD_ADDR_VAR 0 3
37720: PUSH
37721: LD_VAR 0 18
37725: ST_TO_ADDR
// end ; end ;
37726: LD_VAR 0 3
37730: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37731: LD_INT 0
37733: PPUSH
37734: PPUSH
// result := true ;
37735: LD_ADDR_VAR 0 3
37739: PUSH
37740: LD_INT 1
37742: ST_TO_ADDR
// if array1 = array2 then
37743: LD_VAR 0 1
37747: PUSH
37748: LD_VAR 0 2
37752: EQUAL
37753: IFFALSE 37813
// begin for i = 1 to array1 do
37755: LD_ADDR_VAR 0 4
37759: PUSH
37760: DOUBLE
37761: LD_INT 1
37763: DEC
37764: ST_TO_ADDR
37765: LD_VAR 0 1
37769: PUSH
37770: FOR_TO
37771: IFFALSE 37809
// if array1 [ i ] <> array2 [ i ] then
37773: LD_VAR 0 1
37777: PUSH
37778: LD_VAR 0 4
37782: ARRAY
37783: PUSH
37784: LD_VAR 0 2
37788: PUSH
37789: LD_VAR 0 4
37793: ARRAY
37794: NONEQUAL
37795: IFFALSE 37807
// begin result := false ;
37797: LD_ADDR_VAR 0 3
37801: PUSH
37802: LD_INT 0
37804: ST_TO_ADDR
// break ;
37805: GO 37809
// end ;
37807: GO 37770
37809: POP
37810: POP
// end else
37811: GO 37821
// result := false ;
37813: LD_ADDR_VAR 0 3
37817: PUSH
37818: LD_INT 0
37820: ST_TO_ADDR
// end ;
37821: LD_VAR 0 3
37825: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37826: LD_INT 0
37828: PPUSH
37829: PPUSH
// if not array1 or not array2 then
37830: LD_VAR 0 1
37834: NOT
37835: PUSH
37836: LD_VAR 0 2
37840: NOT
37841: OR
37842: IFFALSE 37846
// exit ;
37844: GO 37910
// result := true ;
37846: LD_ADDR_VAR 0 3
37850: PUSH
37851: LD_INT 1
37853: ST_TO_ADDR
// for i = 1 to array1 do
37854: LD_ADDR_VAR 0 4
37858: PUSH
37859: DOUBLE
37860: LD_INT 1
37862: DEC
37863: ST_TO_ADDR
37864: LD_VAR 0 1
37868: PUSH
37869: FOR_TO
37870: IFFALSE 37908
// if array1 [ i ] <> array2 [ i ] then
37872: LD_VAR 0 1
37876: PUSH
37877: LD_VAR 0 4
37881: ARRAY
37882: PUSH
37883: LD_VAR 0 2
37887: PUSH
37888: LD_VAR 0 4
37892: ARRAY
37893: NONEQUAL
37894: IFFALSE 37906
// begin result := false ;
37896: LD_ADDR_VAR 0 3
37900: PUSH
37901: LD_INT 0
37903: ST_TO_ADDR
// break ;
37904: GO 37908
// end ;
37906: GO 37869
37908: POP
37909: POP
// end ;
37910: LD_VAR 0 3
37914: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37915: LD_INT 0
37917: PPUSH
37918: PPUSH
37919: PPUSH
// pom := GetBase ( fac ) ;
37920: LD_ADDR_VAR 0 5
37924: PUSH
37925: LD_VAR 0 1
37929: PPUSH
37930: CALL_OW 274
37934: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37935: LD_ADDR_VAR 0 4
37939: PUSH
37940: LD_VAR 0 2
37944: PUSH
37945: LD_INT 1
37947: ARRAY
37948: PPUSH
37949: LD_VAR 0 2
37953: PUSH
37954: LD_INT 2
37956: ARRAY
37957: PPUSH
37958: LD_VAR 0 2
37962: PUSH
37963: LD_INT 3
37965: ARRAY
37966: PPUSH
37967: LD_VAR 0 2
37971: PUSH
37972: LD_INT 4
37974: ARRAY
37975: PPUSH
37976: CALL_OW 449
37980: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37981: LD_ADDR_VAR 0 3
37985: PUSH
37986: LD_VAR 0 5
37990: PPUSH
37991: LD_INT 1
37993: PPUSH
37994: CALL_OW 275
37998: PUSH
37999: LD_VAR 0 4
38003: PUSH
38004: LD_INT 1
38006: ARRAY
38007: GREATEREQUAL
38008: PUSH
38009: LD_VAR 0 5
38013: PPUSH
38014: LD_INT 2
38016: PPUSH
38017: CALL_OW 275
38021: PUSH
38022: LD_VAR 0 4
38026: PUSH
38027: LD_INT 2
38029: ARRAY
38030: GREATEREQUAL
38031: AND
38032: PUSH
38033: LD_VAR 0 5
38037: PPUSH
38038: LD_INT 3
38040: PPUSH
38041: CALL_OW 275
38045: PUSH
38046: LD_VAR 0 4
38050: PUSH
38051: LD_INT 3
38053: ARRAY
38054: GREATEREQUAL
38055: AND
38056: ST_TO_ADDR
// end ;
38057: LD_VAR 0 3
38061: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38062: LD_INT 0
38064: PPUSH
38065: PPUSH
38066: PPUSH
38067: PPUSH
// pom := GetBase ( building ) ;
38068: LD_ADDR_VAR 0 3
38072: PUSH
38073: LD_VAR 0 1
38077: PPUSH
38078: CALL_OW 274
38082: ST_TO_ADDR
// if not pom then
38083: LD_VAR 0 3
38087: NOT
38088: IFFALSE 38092
// exit ;
38090: GO 38262
// btype := GetBType ( building ) ;
38092: LD_ADDR_VAR 0 5
38096: PUSH
38097: LD_VAR 0 1
38101: PPUSH
38102: CALL_OW 266
38106: ST_TO_ADDR
// if btype = b_armoury then
38107: LD_VAR 0 5
38111: PUSH
38112: LD_INT 4
38114: EQUAL
38115: IFFALSE 38125
// btype := b_barracks ;
38117: LD_ADDR_VAR 0 5
38121: PUSH
38122: LD_INT 5
38124: ST_TO_ADDR
// if btype = b_depot then
38125: LD_VAR 0 5
38129: PUSH
38130: LD_INT 0
38132: EQUAL
38133: IFFALSE 38143
// btype := b_warehouse ;
38135: LD_ADDR_VAR 0 5
38139: PUSH
38140: LD_INT 1
38142: ST_TO_ADDR
// if btype = b_workshop then
38143: LD_VAR 0 5
38147: PUSH
38148: LD_INT 2
38150: EQUAL
38151: IFFALSE 38161
// btype := b_factory ;
38153: LD_ADDR_VAR 0 5
38157: PUSH
38158: LD_INT 3
38160: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38161: LD_ADDR_VAR 0 4
38165: PUSH
38166: LD_VAR 0 5
38170: PPUSH
38171: LD_VAR 0 1
38175: PPUSH
38176: CALL_OW 248
38180: PPUSH
38181: CALL_OW 450
38185: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38186: LD_ADDR_VAR 0 2
38190: PUSH
38191: LD_VAR 0 3
38195: PPUSH
38196: LD_INT 1
38198: PPUSH
38199: CALL_OW 275
38203: PUSH
38204: LD_VAR 0 4
38208: PUSH
38209: LD_INT 1
38211: ARRAY
38212: GREATEREQUAL
38213: PUSH
38214: LD_VAR 0 3
38218: PPUSH
38219: LD_INT 2
38221: PPUSH
38222: CALL_OW 275
38226: PUSH
38227: LD_VAR 0 4
38231: PUSH
38232: LD_INT 2
38234: ARRAY
38235: GREATEREQUAL
38236: AND
38237: PUSH
38238: LD_VAR 0 3
38242: PPUSH
38243: LD_INT 3
38245: PPUSH
38246: CALL_OW 275
38250: PUSH
38251: LD_VAR 0 4
38255: PUSH
38256: LD_INT 3
38258: ARRAY
38259: GREATEREQUAL
38260: AND
38261: ST_TO_ADDR
// end ;
38262: LD_VAR 0 2
38266: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38267: LD_INT 0
38269: PPUSH
38270: PPUSH
38271: PPUSH
// pom := GetBase ( building ) ;
38272: LD_ADDR_VAR 0 4
38276: PUSH
38277: LD_VAR 0 1
38281: PPUSH
38282: CALL_OW 274
38286: ST_TO_ADDR
// if not pom then
38287: LD_VAR 0 4
38291: NOT
38292: IFFALSE 38296
// exit ;
38294: GO 38397
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38296: LD_ADDR_VAR 0 5
38300: PUSH
38301: LD_VAR 0 2
38305: PPUSH
38306: LD_VAR 0 1
38310: PPUSH
38311: CALL_OW 248
38315: PPUSH
38316: CALL_OW 450
38320: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38321: LD_ADDR_VAR 0 3
38325: PUSH
38326: LD_VAR 0 4
38330: PPUSH
38331: LD_INT 1
38333: PPUSH
38334: CALL_OW 275
38338: PUSH
38339: LD_VAR 0 5
38343: PUSH
38344: LD_INT 1
38346: ARRAY
38347: GREATEREQUAL
38348: PUSH
38349: LD_VAR 0 4
38353: PPUSH
38354: LD_INT 2
38356: PPUSH
38357: CALL_OW 275
38361: PUSH
38362: LD_VAR 0 5
38366: PUSH
38367: LD_INT 2
38369: ARRAY
38370: GREATEREQUAL
38371: AND
38372: PUSH
38373: LD_VAR 0 4
38377: PPUSH
38378: LD_INT 3
38380: PPUSH
38381: CALL_OW 275
38385: PUSH
38386: LD_VAR 0 5
38390: PUSH
38391: LD_INT 3
38393: ARRAY
38394: GREATEREQUAL
38395: AND
38396: ST_TO_ADDR
// end ;
38397: LD_VAR 0 3
38401: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38402: LD_INT 0
38404: PPUSH
38405: PPUSH
38406: PPUSH
38407: PPUSH
38408: PPUSH
38409: PPUSH
38410: PPUSH
38411: PPUSH
38412: PPUSH
38413: PPUSH
38414: PPUSH
// result := false ;
38415: LD_ADDR_VAR 0 8
38419: PUSH
38420: LD_INT 0
38422: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38423: LD_VAR 0 5
38427: NOT
38428: PUSH
38429: LD_VAR 0 1
38433: NOT
38434: OR
38435: PUSH
38436: LD_VAR 0 2
38440: NOT
38441: OR
38442: PUSH
38443: LD_VAR 0 3
38447: NOT
38448: OR
38449: IFFALSE 38453
// exit ;
38451: GO 39267
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38453: LD_ADDR_VAR 0 14
38457: PUSH
38458: LD_VAR 0 1
38462: PPUSH
38463: LD_VAR 0 2
38467: PPUSH
38468: LD_VAR 0 3
38472: PPUSH
38473: LD_VAR 0 4
38477: PPUSH
38478: LD_VAR 0 5
38482: PUSH
38483: LD_INT 1
38485: ARRAY
38486: PPUSH
38487: CALL_OW 248
38491: PPUSH
38492: LD_INT 0
38494: PPUSH
38495: CALL 40520 0 6
38499: ST_TO_ADDR
// if not hexes then
38500: LD_VAR 0 14
38504: NOT
38505: IFFALSE 38509
// exit ;
38507: GO 39267
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38509: LD_ADDR_VAR 0 17
38513: PUSH
38514: LD_VAR 0 5
38518: PPUSH
38519: LD_INT 22
38521: PUSH
38522: LD_VAR 0 13
38526: PPUSH
38527: CALL_OW 255
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 2
38538: PUSH
38539: LD_INT 30
38541: PUSH
38542: LD_INT 0
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 30
38551: PUSH
38552: LD_INT 1
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: LIST
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: PPUSH
38568: CALL_OW 72
38572: ST_TO_ADDR
// for i = 1 to hexes do
38573: LD_ADDR_VAR 0 9
38577: PUSH
38578: DOUBLE
38579: LD_INT 1
38581: DEC
38582: ST_TO_ADDR
38583: LD_VAR 0 14
38587: PUSH
38588: FOR_TO
38589: IFFALSE 39265
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38591: LD_ADDR_VAR 0 13
38595: PUSH
38596: LD_VAR 0 14
38600: PUSH
38601: LD_VAR 0 9
38605: ARRAY
38606: PUSH
38607: LD_INT 1
38609: ARRAY
38610: PPUSH
38611: LD_VAR 0 14
38615: PUSH
38616: LD_VAR 0 9
38620: ARRAY
38621: PUSH
38622: LD_INT 2
38624: ARRAY
38625: PPUSH
38626: CALL_OW 428
38630: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38631: LD_VAR 0 14
38635: PUSH
38636: LD_VAR 0 9
38640: ARRAY
38641: PUSH
38642: LD_INT 1
38644: ARRAY
38645: PPUSH
38646: LD_VAR 0 14
38650: PUSH
38651: LD_VAR 0 9
38655: ARRAY
38656: PUSH
38657: LD_INT 2
38659: ARRAY
38660: PPUSH
38661: CALL_OW 351
38665: PUSH
38666: LD_VAR 0 14
38670: PUSH
38671: LD_VAR 0 9
38675: ARRAY
38676: PUSH
38677: LD_INT 1
38679: ARRAY
38680: PPUSH
38681: LD_VAR 0 14
38685: PUSH
38686: LD_VAR 0 9
38690: ARRAY
38691: PUSH
38692: LD_INT 2
38694: ARRAY
38695: PPUSH
38696: CALL_OW 488
38700: NOT
38701: OR
38702: PUSH
38703: LD_VAR 0 13
38707: PPUSH
38708: CALL_OW 247
38712: PUSH
38713: LD_INT 3
38715: EQUAL
38716: OR
38717: IFFALSE 38723
// exit ;
38719: POP
38720: POP
38721: GO 39267
// if not tmp then
38723: LD_VAR 0 13
38727: NOT
38728: IFFALSE 38732
// continue ;
38730: GO 38588
// result := true ;
38732: LD_ADDR_VAR 0 8
38736: PUSH
38737: LD_INT 1
38739: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38740: LD_VAR 0 6
38744: PUSH
38745: LD_VAR 0 13
38749: PPUSH
38750: CALL_OW 247
38754: PUSH
38755: LD_INT 2
38757: EQUAL
38758: AND
38759: PUSH
38760: LD_VAR 0 13
38764: PPUSH
38765: CALL_OW 263
38769: PUSH
38770: LD_INT 1
38772: EQUAL
38773: AND
38774: IFFALSE 38938
// begin if IsDrivenBy ( tmp ) then
38776: LD_VAR 0 13
38780: PPUSH
38781: CALL_OW 311
38785: IFFALSE 38789
// continue ;
38787: GO 38588
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38789: LD_VAR 0 6
38793: PPUSH
38794: LD_INT 3
38796: PUSH
38797: LD_INT 60
38799: PUSH
38800: EMPTY
38801: LIST
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: LD_INT 3
38809: PUSH
38810: LD_INT 55
38812: PUSH
38813: EMPTY
38814: LIST
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PPUSH
38824: CALL_OW 72
38828: IFFALSE 38936
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38830: LD_ADDR_VAR 0 18
38834: PUSH
38835: LD_VAR 0 6
38839: PPUSH
38840: LD_INT 3
38842: PUSH
38843: LD_INT 60
38845: PUSH
38846: EMPTY
38847: LIST
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PUSH
38853: LD_INT 3
38855: PUSH
38856: LD_INT 55
38858: PUSH
38859: EMPTY
38860: LIST
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PPUSH
38870: CALL_OW 72
38874: PUSH
38875: LD_INT 1
38877: ARRAY
38878: ST_TO_ADDR
// if IsInUnit ( driver ) then
38879: LD_VAR 0 18
38883: PPUSH
38884: CALL_OW 310
38888: IFFALSE 38899
// ComExit ( driver ) ;
38890: LD_VAR 0 18
38894: PPUSH
38895: CALL 64301 0 1
// AddComEnterUnit ( driver , tmp ) ;
38899: LD_VAR 0 18
38903: PPUSH
38904: LD_VAR 0 13
38908: PPUSH
38909: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
38913: LD_VAR 0 18
38917: PPUSH
38918: LD_VAR 0 7
38922: PPUSH
38923: CALL_OW 173
// AddComExitVehicle ( driver ) ;
38927: LD_VAR 0 18
38931: PPUSH
38932: CALL_OW 181
// end ; continue ;
38936: GO 38588
// end ; if not cleaners or not tmp in cleaners then
38938: LD_VAR 0 6
38942: NOT
38943: PUSH
38944: LD_VAR 0 13
38948: PUSH
38949: LD_VAR 0 6
38953: IN
38954: NOT
38955: OR
38956: IFFALSE 39263
// begin if dep then
38958: LD_VAR 0 17
38962: IFFALSE 39098
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38964: LD_ADDR_VAR 0 16
38968: PUSH
38969: LD_VAR 0 17
38973: PUSH
38974: LD_INT 1
38976: ARRAY
38977: PPUSH
38978: CALL_OW 250
38982: PPUSH
38983: LD_VAR 0 17
38987: PUSH
38988: LD_INT 1
38990: ARRAY
38991: PPUSH
38992: CALL_OW 254
38996: PPUSH
38997: LD_INT 5
38999: PPUSH
39000: CALL_OW 272
39004: PUSH
39005: LD_VAR 0 17
39009: PUSH
39010: LD_INT 1
39012: ARRAY
39013: PPUSH
39014: CALL_OW 251
39018: PPUSH
39019: LD_VAR 0 17
39023: PUSH
39024: LD_INT 1
39026: ARRAY
39027: PPUSH
39028: CALL_OW 254
39032: PPUSH
39033: LD_INT 5
39035: PPUSH
39036: CALL_OW 273
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39045: LD_VAR 0 16
39049: PUSH
39050: LD_INT 1
39052: ARRAY
39053: PPUSH
39054: LD_VAR 0 16
39058: PUSH
39059: LD_INT 2
39061: ARRAY
39062: PPUSH
39063: CALL_OW 488
39067: IFFALSE 39098
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39069: LD_VAR 0 13
39073: PPUSH
39074: LD_VAR 0 16
39078: PUSH
39079: LD_INT 1
39081: ARRAY
39082: PPUSH
39083: LD_VAR 0 16
39087: PUSH
39088: LD_INT 2
39090: ARRAY
39091: PPUSH
39092: CALL_OW 111
// continue ;
39096: GO 38588
// end ; end ; r := GetDir ( tmp ) ;
39098: LD_ADDR_VAR 0 15
39102: PUSH
39103: LD_VAR 0 13
39107: PPUSH
39108: CALL_OW 254
39112: ST_TO_ADDR
// if r = 5 then
39113: LD_VAR 0 15
39117: PUSH
39118: LD_INT 5
39120: EQUAL
39121: IFFALSE 39131
// r := 0 ;
39123: LD_ADDR_VAR 0 15
39127: PUSH
39128: LD_INT 0
39130: ST_TO_ADDR
// for j = r to 5 do
39131: LD_ADDR_VAR 0 10
39135: PUSH
39136: DOUBLE
39137: LD_VAR 0 15
39141: DEC
39142: ST_TO_ADDR
39143: LD_INT 5
39145: PUSH
39146: FOR_TO
39147: IFFALSE 39261
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39149: LD_ADDR_VAR 0 11
39153: PUSH
39154: LD_VAR 0 13
39158: PPUSH
39159: CALL_OW 250
39163: PPUSH
39164: LD_VAR 0 10
39168: PPUSH
39169: LD_INT 2
39171: PPUSH
39172: CALL_OW 272
39176: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39177: LD_ADDR_VAR 0 12
39181: PUSH
39182: LD_VAR 0 13
39186: PPUSH
39187: CALL_OW 251
39191: PPUSH
39192: LD_VAR 0 10
39196: PPUSH
39197: LD_INT 2
39199: PPUSH
39200: CALL_OW 273
39204: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39205: LD_VAR 0 11
39209: PPUSH
39210: LD_VAR 0 12
39214: PPUSH
39215: CALL_OW 488
39219: PUSH
39220: LD_VAR 0 11
39224: PPUSH
39225: LD_VAR 0 12
39229: PPUSH
39230: CALL_OW 428
39234: NOT
39235: AND
39236: IFFALSE 39259
// begin ComMoveXY ( tmp , _x , _y ) ;
39238: LD_VAR 0 13
39242: PPUSH
39243: LD_VAR 0 11
39247: PPUSH
39248: LD_VAR 0 12
39252: PPUSH
39253: CALL_OW 111
// break ;
39257: GO 39261
// end ; end ;
39259: GO 39146
39261: POP
39262: POP
// end ; end ;
39263: GO 38588
39265: POP
39266: POP
// end ;
39267: LD_VAR 0 8
39271: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39272: LD_INT 0
39274: PPUSH
// result := true ;
39275: LD_ADDR_VAR 0 3
39279: PUSH
39280: LD_INT 1
39282: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39283: LD_VAR 0 2
39287: PUSH
39288: LD_INT 24
39290: DOUBLE
39291: EQUAL
39292: IFTRUE 39302
39294: LD_INT 33
39296: DOUBLE
39297: EQUAL
39298: IFTRUE 39302
39300: GO 39327
39302: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39303: LD_ADDR_VAR 0 3
39307: PUSH
39308: LD_INT 32
39310: PPUSH
39311: LD_VAR 0 1
39315: PPUSH
39316: CALL_OW 321
39320: PUSH
39321: LD_INT 2
39323: EQUAL
39324: ST_TO_ADDR
39325: GO 39643
39327: LD_INT 20
39329: DOUBLE
39330: EQUAL
39331: IFTRUE 39335
39333: GO 39360
39335: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39336: LD_ADDR_VAR 0 3
39340: PUSH
39341: LD_INT 6
39343: PPUSH
39344: LD_VAR 0 1
39348: PPUSH
39349: CALL_OW 321
39353: PUSH
39354: LD_INT 2
39356: EQUAL
39357: ST_TO_ADDR
39358: GO 39643
39360: LD_INT 22
39362: DOUBLE
39363: EQUAL
39364: IFTRUE 39374
39366: LD_INT 36
39368: DOUBLE
39369: EQUAL
39370: IFTRUE 39374
39372: GO 39399
39374: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39375: LD_ADDR_VAR 0 3
39379: PUSH
39380: LD_INT 15
39382: PPUSH
39383: LD_VAR 0 1
39387: PPUSH
39388: CALL_OW 321
39392: PUSH
39393: LD_INT 2
39395: EQUAL
39396: ST_TO_ADDR
39397: GO 39643
39399: LD_INT 30
39401: DOUBLE
39402: EQUAL
39403: IFTRUE 39407
39405: GO 39432
39407: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39408: LD_ADDR_VAR 0 3
39412: PUSH
39413: LD_INT 20
39415: PPUSH
39416: LD_VAR 0 1
39420: PPUSH
39421: CALL_OW 321
39425: PUSH
39426: LD_INT 2
39428: EQUAL
39429: ST_TO_ADDR
39430: GO 39643
39432: LD_INT 28
39434: DOUBLE
39435: EQUAL
39436: IFTRUE 39446
39438: LD_INT 21
39440: DOUBLE
39441: EQUAL
39442: IFTRUE 39446
39444: GO 39471
39446: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
39447: LD_ADDR_VAR 0 3
39451: PUSH
39452: LD_INT 21
39454: PPUSH
39455: LD_VAR 0 1
39459: PPUSH
39460: CALL_OW 321
39464: PUSH
39465: LD_INT 2
39467: EQUAL
39468: ST_TO_ADDR
39469: GO 39643
39471: LD_INT 16
39473: DOUBLE
39474: EQUAL
39475: IFTRUE 39479
39477: GO 39504
39479: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39480: LD_ADDR_VAR 0 3
39484: PUSH
39485: LD_INT 84
39487: PPUSH
39488: LD_VAR 0 1
39492: PPUSH
39493: CALL_OW 321
39497: PUSH
39498: LD_INT 2
39500: EQUAL
39501: ST_TO_ADDR
39502: GO 39643
39504: LD_INT 19
39506: DOUBLE
39507: EQUAL
39508: IFTRUE 39518
39510: LD_INT 23
39512: DOUBLE
39513: EQUAL
39514: IFTRUE 39518
39516: GO 39543
39518: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
39519: LD_ADDR_VAR 0 3
39523: PUSH
39524: LD_INT 83
39526: PPUSH
39527: LD_VAR 0 1
39531: PPUSH
39532: CALL_OW 321
39536: PUSH
39537: LD_INT 2
39539: EQUAL
39540: ST_TO_ADDR
39541: GO 39643
39543: LD_INT 17
39545: DOUBLE
39546: EQUAL
39547: IFTRUE 39551
39549: GO 39576
39551: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
39552: LD_ADDR_VAR 0 3
39556: PUSH
39557: LD_INT 39
39559: PPUSH
39560: LD_VAR 0 1
39564: PPUSH
39565: CALL_OW 321
39569: PUSH
39570: LD_INT 2
39572: EQUAL
39573: ST_TO_ADDR
39574: GO 39643
39576: LD_INT 18
39578: DOUBLE
39579: EQUAL
39580: IFTRUE 39584
39582: GO 39609
39584: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
39585: LD_ADDR_VAR 0 3
39589: PUSH
39590: LD_INT 40
39592: PPUSH
39593: LD_VAR 0 1
39597: PPUSH
39598: CALL_OW 321
39602: PUSH
39603: LD_INT 2
39605: EQUAL
39606: ST_TO_ADDR
39607: GO 39643
39609: LD_INT 27
39611: DOUBLE
39612: EQUAL
39613: IFTRUE 39617
39615: GO 39642
39617: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
39618: LD_ADDR_VAR 0 3
39622: PUSH
39623: LD_INT 35
39625: PPUSH
39626: LD_VAR 0 1
39630: PPUSH
39631: CALL_OW 321
39635: PUSH
39636: LD_INT 2
39638: EQUAL
39639: ST_TO_ADDR
39640: GO 39643
39642: POP
// end ;
39643: LD_VAR 0 3
39647: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39648: LD_INT 0
39650: PPUSH
39651: PPUSH
39652: PPUSH
39653: PPUSH
39654: PPUSH
39655: PPUSH
39656: PPUSH
39657: PPUSH
39658: PPUSH
39659: PPUSH
39660: PPUSH
// result := false ;
39661: LD_ADDR_VAR 0 6
39665: PUSH
39666: LD_INT 0
39668: ST_TO_ADDR
// if btype = b_depot then
39669: LD_VAR 0 2
39673: PUSH
39674: LD_INT 0
39676: EQUAL
39677: IFFALSE 39689
// begin result := true ;
39679: LD_ADDR_VAR 0 6
39683: PUSH
39684: LD_INT 1
39686: ST_TO_ADDR
// exit ;
39687: GO 40515
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39689: LD_VAR 0 1
39693: NOT
39694: PUSH
39695: LD_VAR 0 1
39699: PPUSH
39700: CALL_OW 266
39704: PUSH
39705: LD_INT 0
39707: PUSH
39708: LD_INT 1
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: IN
39715: NOT
39716: OR
39717: PUSH
39718: LD_VAR 0 2
39722: NOT
39723: OR
39724: PUSH
39725: LD_VAR 0 5
39729: PUSH
39730: LD_INT 0
39732: PUSH
39733: LD_INT 1
39735: PUSH
39736: LD_INT 2
39738: PUSH
39739: LD_INT 3
39741: PUSH
39742: LD_INT 4
39744: PUSH
39745: LD_INT 5
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: IN
39756: NOT
39757: OR
39758: PUSH
39759: LD_VAR 0 3
39763: PPUSH
39764: LD_VAR 0 4
39768: PPUSH
39769: CALL_OW 488
39773: NOT
39774: OR
39775: IFFALSE 39779
// exit ;
39777: GO 40515
// side := GetSide ( depot ) ;
39779: LD_ADDR_VAR 0 9
39783: PUSH
39784: LD_VAR 0 1
39788: PPUSH
39789: CALL_OW 255
39793: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39794: LD_VAR 0 9
39798: PPUSH
39799: LD_VAR 0 2
39803: PPUSH
39804: CALL 39272 0 2
39808: NOT
39809: IFFALSE 39813
// exit ;
39811: GO 40515
// pom := GetBase ( depot ) ;
39813: LD_ADDR_VAR 0 10
39817: PUSH
39818: LD_VAR 0 1
39822: PPUSH
39823: CALL_OW 274
39827: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39828: LD_ADDR_VAR 0 11
39832: PUSH
39833: LD_VAR 0 2
39837: PPUSH
39838: LD_VAR 0 1
39842: PPUSH
39843: CALL_OW 248
39847: PPUSH
39848: CALL_OW 450
39852: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39853: LD_VAR 0 10
39857: PPUSH
39858: LD_INT 1
39860: PPUSH
39861: CALL_OW 275
39865: PUSH
39866: LD_VAR 0 11
39870: PUSH
39871: LD_INT 1
39873: ARRAY
39874: GREATEREQUAL
39875: PUSH
39876: LD_VAR 0 10
39880: PPUSH
39881: LD_INT 2
39883: PPUSH
39884: CALL_OW 275
39888: PUSH
39889: LD_VAR 0 11
39893: PUSH
39894: LD_INT 2
39896: ARRAY
39897: GREATEREQUAL
39898: AND
39899: PUSH
39900: LD_VAR 0 10
39904: PPUSH
39905: LD_INT 3
39907: PPUSH
39908: CALL_OW 275
39912: PUSH
39913: LD_VAR 0 11
39917: PUSH
39918: LD_INT 3
39920: ARRAY
39921: GREATEREQUAL
39922: AND
39923: NOT
39924: IFFALSE 39928
// exit ;
39926: GO 40515
// if GetBType ( depot ) = b_depot then
39928: LD_VAR 0 1
39932: PPUSH
39933: CALL_OW 266
39937: PUSH
39938: LD_INT 0
39940: EQUAL
39941: IFFALSE 39953
// dist := 28 else
39943: LD_ADDR_VAR 0 14
39947: PUSH
39948: LD_INT 28
39950: ST_TO_ADDR
39951: GO 39961
// dist := 36 ;
39953: LD_ADDR_VAR 0 14
39957: PUSH
39958: LD_INT 36
39960: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39961: LD_VAR 0 1
39965: PPUSH
39966: LD_VAR 0 3
39970: PPUSH
39971: LD_VAR 0 4
39975: PPUSH
39976: CALL_OW 297
39980: PUSH
39981: LD_VAR 0 14
39985: GREATER
39986: IFFALSE 39990
// exit ;
39988: GO 40515
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39990: LD_ADDR_VAR 0 12
39994: PUSH
39995: LD_VAR 0 2
39999: PPUSH
40000: LD_VAR 0 3
40004: PPUSH
40005: LD_VAR 0 4
40009: PPUSH
40010: LD_VAR 0 5
40014: PPUSH
40015: LD_VAR 0 1
40019: PPUSH
40020: CALL_OW 248
40024: PPUSH
40025: LD_INT 0
40027: PPUSH
40028: CALL 40520 0 6
40032: ST_TO_ADDR
// if not hexes then
40033: LD_VAR 0 12
40037: NOT
40038: IFFALSE 40042
// exit ;
40040: GO 40515
// hex := GetHexInfo ( x , y ) ;
40042: LD_ADDR_VAR 0 15
40046: PUSH
40047: LD_VAR 0 3
40051: PPUSH
40052: LD_VAR 0 4
40056: PPUSH
40057: CALL_OW 546
40061: ST_TO_ADDR
// if hex [ 1 ] then
40062: LD_VAR 0 15
40066: PUSH
40067: LD_INT 1
40069: ARRAY
40070: IFFALSE 40074
// exit ;
40072: GO 40515
// height := hex [ 2 ] ;
40074: LD_ADDR_VAR 0 13
40078: PUSH
40079: LD_VAR 0 15
40083: PUSH
40084: LD_INT 2
40086: ARRAY
40087: ST_TO_ADDR
// for i = 1 to hexes do
40088: LD_ADDR_VAR 0 7
40092: PUSH
40093: DOUBLE
40094: LD_INT 1
40096: DEC
40097: ST_TO_ADDR
40098: LD_VAR 0 12
40102: PUSH
40103: FOR_TO
40104: IFFALSE 40434
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40106: LD_VAR 0 12
40110: PUSH
40111: LD_VAR 0 7
40115: ARRAY
40116: PUSH
40117: LD_INT 1
40119: ARRAY
40120: PPUSH
40121: LD_VAR 0 12
40125: PUSH
40126: LD_VAR 0 7
40130: ARRAY
40131: PUSH
40132: LD_INT 2
40134: ARRAY
40135: PPUSH
40136: CALL_OW 488
40140: NOT
40141: PUSH
40142: LD_VAR 0 12
40146: PUSH
40147: LD_VAR 0 7
40151: ARRAY
40152: PUSH
40153: LD_INT 1
40155: ARRAY
40156: PPUSH
40157: LD_VAR 0 12
40161: PUSH
40162: LD_VAR 0 7
40166: ARRAY
40167: PUSH
40168: LD_INT 2
40170: ARRAY
40171: PPUSH
40172: CALL_OW 428
40176: PUSH
40177: LD_INT 0
40179: GREATER
40180: OR
40181: PUSH
40182: LD_VAR 0 12
40186: PUSH
40187: LD_VAR 0 7
40191: ARRAY
40192: PUSH
40193: LD_INT 1
40195: ARRAY
40196: PPUSH
40197: LD_VAR 0 12
40201: PUSH
40202: LD_VAR 0 7
40206: ARRAY
40207: PUSH
40208: LD_INT 2
40210: ARRAY
40211: PPUSH
40212: CALL_OW 351
40216: OR
40217: IFFALSE 40223
// exit ;
40219: POP
40220: POP
40221: GO 40515
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40223: LD_ADDR_VAR 0 8
40227: PUSH
40228: LD_VAR 0 12
40232: PUSH
40233: LD_VAR 0 7
40237: ARRAY
40238: PUSH
40239: LD_INT 1
40241: ARRAY
40242: PPUSH
40243: LD_VAR 0 12
40247: PUSH
40248: LD_VAR 0 7
40252: ARRAY
40253: PUSH
40254: LD_INT 2
40256: ARRAY
40257: PPUSH
40258: CALL_OW 546
40262: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40263: LD_VAR 0 8
40267: PUSH
40268: LD_INT 1
40270: ARRAY
40271: PUSH
40272: LD_VAR 0 8
40276: PUSH
40277: LD_INT 2
40279: ARRAY
40280: PUSH
40281: LD_VAR 0 13
40285: PUSH
40286: LD_INT 2
40288: PLUS
40289: GREATER
40290: OR
40291: PUSH
40292: LD_VAR 0 8
40296: PUSH
40297: LD_INT 2
40299: ARRAY
40300: PUSH
40301: LD_VAR 0 13
40305: PUSH
40306: LD_INT 2
40308: MINUS
40309: LESS
40310: OR
40311: PUSH
40312: LD_VAR 0 8
40316: PUSH
40317: LD_INT 3
40319: ARRAY
40320: PUSH
40321: LD_INT 0
40323: PUSH
40324: LD_INT 8
40326: PUSH
40327: LD_INT 9
40329: PUSH
40330: LD_INT 10
40332: PUSH
40333: LD_INT 11
40335: PUSH
40336: LD_INT 12
40338: PUSH
40339: LD_INT 13
40341: PUSH
40342: LD_INT 16
40344: PUSH
40345: LD_INT 17
40347: PUSH
40348: LD_INT 18
40350: PUSH
40351: LD_INT 19
40353: PUSH
40354: LD_INT 20
40356: PUSH
40357: LD_INT 21
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: IN
40375: NOT
40376: OR
40377: PUSH
40378: LD_VAR 0 8
40382: PUSH
40383: LD_INT 5
40385: ARRAY
40386: NOT
40387: OR
40388: PUSH
40389: LD_VAR 0 8
40393: PUSH
40394: LD_INT 6
40396: ARRAY
40397: PUSH
40398: LD_INT 1
40400: PUSH
40401: LD_INT 2
40403: PUSH
40404: LD_INT 7
40406: PUSH
40407: LD_INT 9
40409: PUSH
40410: LD_INT 10
40412: PUSH
40413: LD_INT 11
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: IN
40424: NOT
40425: OR
40426: IFFALSE 40432
// exit ;
40428: POP
40429: POP
40430: GO 40515
// end ;
40432: GO 40103
40434: POP
40435: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40436: LD_VAR 0 9
40440: PPUSH
40441: LD_VAR 0 3
40445: PPUSH
40446: LD_VAR 0 4
40450: PPUSH
40451: LD_INT 20
40453: PPUSH
40454: CALL 32438 0 4
40458: PUSH
40459: LD_INT 4
40461: ARRAY
40462: IFFALSE 40466
// exit ;
40464: GO 40515
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40466: LD_VAR 0 2
40470: PUSH
40471: LD_INT 29
40473: PUSH
40474: LD_INT 30
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: IN
40481: PUSH
40482: LD_VAR 0 3
40486: PPUSH
40487: LD_VAR 0 4
40491: PPUSH
40492: LD_VAR 0 9
40496: PPUSH
40497: CALL_OW 440
40501: NOT
40502: AND
40503: IFFALSE 40507
// exit ;
40505: GO 40515
// result := true ;
40507: LD_ADDR_VAR 0 6
40511: PUSH
40512: LD_INT 1
40514: ST_TO_ADDR
// end ;
40515: LD_VAR 0 6
40519: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40520: LD_INT 0
40522: PPUSH
40523: PPUSH
40524: PPUSH
40525: PPUSH
40526: PPUSH
40527: PPUSH
40528: PPUSH
40529: PPUSH
40530: PPUSH
40531: PPUSH
40532: PPUSH
40533: PPUSH
40534: PPUSH
40535: PPUSH
40536: PPUSH
40537: PPUSH
40538: PPUSH
40539: PPUSH
40540: PPUSH
40541: PPUSH
40542: PPUSH
40543: PPUSH
40544: PPUSH
40545: PPUSH
40546: PPUSH
40547: PPUSH
40548: PPUSH
40549: PPUSH
40550: PPUSH
40551: PPUSH
40552: PPUSH
40553: PPUSH
40554: PPUSH
40555: PPUSH
40556: PPUSH
40557: PPUSH
40558: PPUSH
40559: PPUSH
40560: PPUSH
40561: PPUSH
40562: PPUSH
40563: PPUSH
40564: PPUSH
40565: PPUSH
40566: PPUSH
40567: PPUSH
40568: PPUSH
40569: PPUSH
40570: PPUSH
40571: PPUSH
40572: PPUSH
40573: PPUSH
40574: PPUSH
40575: PPUSH
40576: PPUSH
40577: PPUSH
40578: PPUSH
40579: PPUSH
// result = [ ] ;
40580: LD_ADDR_VAR 0 7
40584: PUSH
40585: EMPTY
40586: ST_TO_ADDR
// temp_list = [ ] ;
40587: LD_ADDR_VAR 0 9
40591: PUSH
40592: EMPTY
40593: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40594: LD_VAR 0 4
40598: PUSH
40599: LD_INT 0
40601: PUSH
40602: LD_INT 1
40604: PUSH
40605: LD_INT 2
40607: PUSH
40608: LD_INT 3
40610: PUSH
40611: LD_INT 4
40613: PUSH
40614: LD_INT 5
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: IN
40625: NOT
40626: PUSH
40627: LD_VAR 0 1
40631: PUSH
40632: LD_INT 0
40634: PUSH
40635: LD_INT 1
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: IN
40642: PUSH
40643: LD_VAR 0 5
40647: PUSH
40648: LD_INT 1
40650: PUSH
40651: LD_INT 2
40653: PUSH
40654: LD_INT 3
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: LIST
40661: IN
40662: NOT
40663: AND
40664: OR
40665: IFFALSE 40669
// exit ;
40667: GO 59060
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40669: LD_VAR 0 1
40673: PUSH
40674: LD_INT 6
40676: PUSH
40677: LD_INT 7
40679: PUSH
40680: LD_INT 8
40682: PUSH
40683: LD_INT 13
40685: PUSH
40686: LD_INT 12
40688: PUSH
40689: LD_INT 15
40691: PUSH
40692: LD_INT 11
40694: PUSH
40695: LD_INT 14
40697: PUSH
40698: LD_INT 10
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: IN
40712: IFFALSE 40722
// btype = b_lab ;
40714: LD_ADDR_VAR 0 1
40718: PUSH
40719: LD_INT 6
40721: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40722: LD_VAR 0 6
40726: PUSH
40727: LD_INT 0
40729: PUSH
40730: LD_INT 1
40732: PUSH
40733: LD_INT 2
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: LIST
40740: IN
40741: NOT
40742: PUSH
40743: LD_VAR 0 1
40747: PUSH
40748: LD_INT 0
40750: PUSH
40751: LD_INT 1
40753: PUSH
40754: LD_INT 2
40756: PUSH
40757: LD_INT 3
40759: PUSH
40760: LD_INT 6
40762: PUSH
40763: LD_INT 36
40765: PUSH
40766: LD_INT 4
40768: PUSH
40769: LD_INT 5
40771: PUSH
40772: LD_INT 31
40774: PUSH
40775: LD_INT 32
40777: PUSH
40778: LD_INT 33
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: IN
40794: NOT
40795: PUSH
40796: LD_VAR 0 6
40800: PUSH
40801: LD_INT 1
40803: EQUAL
40804: AND
40805: OR
40806: PUSH
40807: LD_VAR 0 1
40811: PUSH
40812: LD_INT 2
40814: PUSH
40815: LD_INT 3
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: IN
40822: NOT
40823: PUSH
40824: LD_VAR 0 6
40828: PUSH
40829: LD_INT 2
40831: EQUAL
40832: AND
40833: OR
40834: IFFALSE 40844
// mode = 0 ;
40836: LD_ADDR_VAR 0 6
40840: PUSH
40841: LD_INT 0
40843: ST_TO_ADDR
// case mode of 0 :
40844: LD_VAR 0 6
40848: PUSH
40849: LD_INT 0
40851: DOUBLE
40852: EQUAL
40853: IFTRUE 40857
40855: GO 52310
40857: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40858: LD_ADDR_VAR 0 11
40862: PUSH
40863: LD_INT 0
40865: PUSH
40866: LD_INT 0
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 0
40875: PUSH
40876: LD_INT 1
40878: NEG
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 1
40886: PUSH
40887: LD_INT 0
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 1
40896: PUSH
40897: LD_INT 1
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 0
40906: PUSH
40907: LD_INT 1
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 1
40916: NEG
40917: PUSH
40918: LD_INT 0
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 1
40927: NEG
40928: PUSH
40929: LD_INT 1
40931: NEG
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 1
40939: NEG
40940: PUSH
40941: LD_INT 2
40943: NEG
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 0
40951: PUSH
40952: LD_INT 2
40954: NEG
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: LD_INT 1
40962: PUSH
40963: LD_INT 1
40965: NEG
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 1
40973: PUSH
40974: LD_INT 2
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 0
40983: PUSH
40984: LD_INT 2
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 1
40993: NEG
40994: PUSH
40995: LD_INT 1
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 1
41004: PUSH
41005: LD_INT 3
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 0
41014: PUSH
41015: LD_INT 3
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 1
41024: NEG
41025: PUSH
41026: LD_INT 2
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41051: LD_ADDR_VAR 0 12
41055: PUSH
41056: LD_INT 0
41058: PUSH
41059: LD_INT 0
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 0
41068: PUSH
41069: LD_INT 1
41071: NEG
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 1
41079: PUSH
41080: LD_INT 0
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 1
41089: PUSH
41090: LD_INT 1
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 0
41099: PUSH
41100: LD_INT 1
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: LD_INT 1
41109: NEG
41110: PUSH
41111: LD_INT 0
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 1
41120: NEG
41121: PUSH
41122: LD_INT 1
41124: NEG
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 1
41132: PUSH
41133: LD_INT 1
41135: NEG
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 2
41143: PUSH
41144: LD_INT 0
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 2
41153: PUSH
41154: LD_INT 1
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 1
41163: NEG
41164: PUSH
41165: LD_INT 1
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 2
41174: NEG
41175: PUSH
41176: LD_INT 0
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 2
41185: NEG
41186: PUSH
41187: LD_INT 1
41189: NEG
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 2
41197: NEG
41198: PUSH
41199: LD_INT 1
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 3
41208: NEG
41209: PUSH
41210: LD_INT 0
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 3
41219: NEG
41220: PUSH
41221: LD_INT 1
41223: NEG
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41247: LD_ADDR_VAR 0 13
41251: PUSH
41252: LD_INT 0
41254: PUSH
41255: LD_INT 0
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 0
41264: PUSH
41265: LD_INT 1
41267: NEG
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 1
41275: PUSH
41276: LD_INT 0
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 1
41285: PUSH
41286: LD_INT 1
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 0
41295: PUSH
41296: LD_INT 1
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 1
41305: NEG
41306: PUSH
41307: LD_INT 0
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 1
41316: NEG
41317: PUSH
41318: LD_INT 1
41320: NEG
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 1
41328: NEG
41329: PUSH
41330: LD_INT 2
41332: NEG
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 2
41340: PUSH
41341: LD_INT 1
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 2
41350: PUSH
41351: LD_INT 2
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 1
41360: PUSH
41361: LD_INT 2
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 2
41370: NEG
41371: PUSH
41372: LD_INT 1
41374: NEG
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 2
41382: NEG
41383: PUSH
41384: LD_INT 2
41386: NEG
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 2
41394: NEG
41395: PUSH
41396: LD_INT 3
41398: NEG
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 3
41406: NEG
41407: PUSH
41408: LD_INT 2
41410: NEG
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 3
41418: NEG
41419: PUSH
41420: LD_INT 3
41422: NEG
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41446: LD_ADDR_VAR 0 14
41450: PUSH
41451: LD_INT 0
41453: PUSH
41454: LD_INT 0
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 0
41463: PUSH
41464: LD_INT 1
41466: NEG
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 1
41474: PUSH
41475: LD_INT 0
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 1
41484: PUSH
41485: LD_INT 1
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 0
41494: PUSH
41495: LD_INT 1
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PUSH
41502: LD_INT 1
41504: NEG
41505: PUSH
41506: LD_INT 0
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 1
41515: NEG
41516: PUSH
41517: LD_INT 1
41519: NEG
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 1
41527: NEG
41528: PUSH
41529: LD_INT 2
41531: NEG
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 0
41539: PUSH
41540: LD_INT 2
41542: NEG
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 1
41550: PUSH
41551: LD_INT 1
41553: NEG
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 1
41561: PUSH
41562: LD_INT 2
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 0
41571: PUSH
41572: LD_INT 2
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 1
41581: NEG
41582: PUSH
41583: LD_INT 1
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 1
41592: NEG
41593: PUSH
41594: LD_INT 3
41596: NEG
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 0
41604: PUSH
41605: LD_INT 3
41607: NEG
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 1
41615: PUSH
41616: LD_INT 2
41618: NEG
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41642: LD_ADDR_VAR 0 15
41646: PUSH
41647: LD_INT 0
41649: PUSH
41650: LD_INT 0
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 0
41659: PUSH
41660: LD_INT 1
41662: NEG
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 1
41670: PUSH
41671: LD_INT 0
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 1
41680: PUSH
41681: LD_INT 1
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 0
41690: PUSH
41691: LD_INT 1
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 1
41700: NEG
41701: PUSH
41702: LD_INT 0
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 1
41711: NEG
41712: PUSH
41713: LD_INT 1
41715: NEG
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 1
41723: PUSH
41724: LD_INT 1
41726: NEG
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 2
41734: PUSH
41735: LD_INT 0
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 2
41744: PUSH
41745: LD_INT 1
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 1
41754: NEG
41755: PUSH
41756: LD_INT 1
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 2
41765: NEG
41766: PUSH
41767: LD_INT 0
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 2
41776: NEG
41777: PUSH
41778: LD_INT 1
41780: NEG
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 2
41788: PUSH
41789: LD_INT 1
41791: NEG
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 3
41799: PUSH
41800: LD_INT 0
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 3
41809: PUSH
41810: LD_INT 1
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41835: LD_ADDR_VAR 0 16
41839: PUSH
41840: LD_INT 0
41842: PUSH
41843: LD_INT 0
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 0
41852: PUSH
41853: LD_INT 1
41855: NEG
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 1
41863: PUSH
41864: LD_INT 0
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 1
41873: PUSH
41874: LD_INT 1
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 0
41883: PUSH
41884: LD_INT 1
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 1
41893: NEG
41894: PUSH
41895: LD_INT 0
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 1
41904: NEG
41905: PUSH
41906: LD_INT 1
41908: NEG
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 1
41916: NEG
41917: PUSH
41918: LD_INT 2
41920: NEG
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 2
41928: PUSH
41929: LD_INT 1
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: LD_INT 2
41938: PUSH
41939: LD_INT 2
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 1
41948: PUSH
41949: LD_INT 2
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 2
41958: NEG
41959: PUSH
41960: LD_INT 1
41962: NEG
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 2
41970: NEG
41971: PUSH
41972: LD_INT 2
41974: NEG
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 3
41982: PUSH
41983: LD_INT 2
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 3
41992: PUSH
41993: LD_INT 3
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 2
42002: PUSH
42003: LD_INT 3
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42028: LD_ADDR_VAR 0 17
42032: PUSH
42033: LD_INT 0
42035: PUSH
42036: LD_INT 0
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 0
42045: PUSH
42046: LD_INT 1
42048: NEG
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 1
42056: PUSH
42057: LD_INT 0
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 1
42066: PUSH
42067: LD_INT 1
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 0
42076: PUSH
42077: LD_INT 1
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 1
42086: NEG
42087: PUSH
42088: LD_INT 0
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 1
42097: NEG
42098: PUSH
42099: LD_INT 1
42101: NEG
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 1
42109: NEG
42110: PUSH
42111: LD_INT 2
42113: NEG
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 0
42121: PUSH
42122: LD_INT 2
42124: NEG
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 1
42132: PUSH
42133: LD_INT 1
42135: NEG
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: LD_INT 2
42143: PUSH
42144: LD_INT 0
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 2
42153: PUSH
42154: LD_INT 1
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 2
42163: PUSH
42164: LD_INT 2
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 1
42173: PUSH
42174: LD_INT 2
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 0
42183: PUSH
42184: LD_INT 2
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 1
42193: NEG
42194: PUSH
42195: LD_INT 1
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 2
42204: NEG
42205: PUSH
42206: LD_INT 0
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 2
42215: NEG
42216: PUSH
42217: LD_INT 1
42219: NEG
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 2
42227: NEG
42228: PUSH
42229: LD_INT 2
42231: NEG
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42258: LD_ADDR_VAR 0 18
42262: PUSH
42263: LD_INT 0
42265: PUSH
42266: LD_INT 0
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 0
42275: PUSH
42276: LD_INT 1
42278: NEG
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 1
42286: PUSH
42287: LD_INT 0
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 1
42296: PUSH
42297: LD_INT 1
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 0
42306: PUSH
42307: LD_INT 1
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 1
42316: NEG
42317: PUSH
42318: LD_INT 0
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 1
42327: NEG
42328: PUSH
42329: LD_INT 1
42331: NEG
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 1
42339: NEG
42340: PUSH
42341: LD_INT 2
42343: NEG
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 0
42351: PUSH
42352: LD_INT 2
42354: NEG
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 1
42362: PUSH
42363: LD_INT 1
42365: NEG
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 2
42373: PUSH
42374: LD_INT 0
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 2
42383: PUSH
42384: LD_INT 1
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 2
42393: PUSH
42394: LD_INT 2
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 1
42403: PUSH
42404: LD_INT 2
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 0
42413: PUSH
42414: LD_INT 2
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 1
42423: NEG
42424: PUSH
42425: LD_INT 1
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 2
42434: NEG
42435: PUSH
42436: LD_INT 0
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 2
42445: NEG
42446: PUSH
42447: LD_INT 1
42449: NEG
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: LD_INT 2
42457: NEG
42458: PUSH
42459: LD_INT 2
42461: NEG
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42488: LD_ADDR_VAR 0 19
42492: PUSH
42493: LD_INT 0
42495: PUSH
42496: LD_INT 0
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 0
42505: PUSH
42506: LD_INT 1
42508: NEG
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 1
42516: PUSH
42517: LD_INT 0
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 1
42526: PUSH
42527: LD_INT 1
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 0
42536: PUSH
42537: LD_INT 1
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 1
42546: NEG
42547: PUSH
42548: LD_INT 0
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 1
42557: NEG
42558: PUSH
42559: LD_INT 1
42561: NEG
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 1
42569: NEG
42570: PUSH
42571: LD_INT 2
42573: NEG
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 0
42581: PUSH
42582: LD_INT 2
42584: NEG
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 1
42592: PUSH
42593: LD_INT 1
42595: NEG
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 2
42603: PUSH
42604: LD_INT 0
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 2
42613: PUSH
42614: LD_INT 1
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 2
42623: PUSH
42624: LD_INT 2
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 1
42633: PUSH
42634: LD_INT 2
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 0
42643: PUSH
42644: LD_INT 2
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 1
42653: NEG
42654: PUSH
42655: LD_INT 1
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 2
42664: NEG
42665: PUSH
42666: LD_INT 0
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 2
42675: NEG
42676: PUSH
42677: LD_INT 1
42679: NEG
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 2
42687: NEG
42688: PUSH
42689: LD_INT 2
42691: NEG
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42718: LD_ADDR_VAR 0 20
42722: PUSH
42723: LD_INT 0
42725: PUSH
42726: LD_INT 0
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 0
42735: PUSH
42736: LD_INT 1
42738: NEG
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 1
42746: PUSH
42747: LD_INT 0
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 1
42756: PUSH
42757: LD_INT 1
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 0
42766: PUSH
42767: LD_INT 1
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 1
42776: NEG
42777: PUSH
42778: LD_INT 0
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 1
42787: NEG
42788: PUSH
42789: LD_INT 1
42791: NEG
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 1
42799: NEG
42800: PUSH
42801: LD_INT 2
42803: NEG
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 0
42811: PUSH
42812: LD_INT 2
42814: NEG
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 1
42822: PUSH
42823: LD_INT 1
42825: NEG
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 2
42833: PUSH
42834: LD_INT 0
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 2
42843: PUSH
42844: LD_INT 1
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 2
42853: PUSH
42854: LD_INT 2
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 1
42863: PUSH
42864: LD_INT 2
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 0
42873: PUSH
42874: LD_INT 2
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 1
42883: NEG
42884: PUSH
42885: LD_INT 1
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 2
42894: NEG
42895: PUSH
42896: LD_INT 0
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 2
42905: NEG
42906: PUSH
42907: LD_INT 1
42909: NEG
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 2
42917: NEG
42918: PUSH
42919: LD_INT 2
42921: NEG
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42948: LD_ADDR_VAR 0 21
42952: PUSH
42953: LD_INT 0
42955: PUSH
42956: LD_INT 0
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 0
42965: PUSH
42966: LD_INT 1
42968: NEG
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 1
42976: PUSH
42977: LD_INT 0
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 1
42986: PUSH
42987: LD_INT 1
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 0
42996: PUSH
42997: LD_INT 1
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 1
43006: NEG
43007: PUSH
43008: LD_INT 0
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 1
43017: NEG
43018: PUSH
43019: LD_INT 1
43021: NEG
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 1
43029: NEG
43030: PUSH
43031: LD_INT 2
43033: NEG
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 0
43041: PUSH
43042: LD_INT 2
43044: NEG
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 1
43052: PUSH
43053: LD_INT 1
43055: NEG
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 2
43063: PUSH
43064: LD_INT 0
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 2
43073: PUSH
43074: LD_INT 1
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 2
43083: PUSH
43084: LD_INT 2
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 1
43093: PUSH
43094: LD_INT 2
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 0
43103: PUSH
43104: LD_INT 2
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 1
43113: NEG
43114: PUSH
43115: LD_INT 1
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 2
43124: NEG
43125: PUSH
43126: LD_INT 0
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 2
43135: NEG
43136: PUSH
43137: LD_INT 1
43139: NEG
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 2
43147: NEG
43148: PUSH
43149: LD_INT 2
43151: NEG
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43178: LD_ADDR_VAR 0 22
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: LD_INT 0
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 0
43195: PUSH
43196: LD_INT 1
43198: NEG
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 1
43206: PUSH
43207: LD_INT 0
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 1
43216: PUSH
43217: LD_INT 1
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: LD_INT 0
43226: PUSH
43227: LD_INT 1
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 1
43236: NEG
43237: PUSH
43238: LD_INT 0
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 1
43247: NEG
43248: PUSH
43249: LD_INT 1
43251: NEG
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 1
43259: NEG
43260: PUSH
43261: LD_INT 2
43263: NEG
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 0
43271: PUSH
43272: LD_INT 2
43274: NEG
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 1
43282: PUSH
43283: LD_INT 1
43285: NEG
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 2
43293: PUSH
43294: LD_INT 0
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 2
43303: PUSH
43304: LD_INT 1
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 2
43313: PUSH
43314: LD_INT 2
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: LD_INT 1
43323: PUSH
43324: LD_INT 2
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: LD_INT 0
43333: PUSH
43334: LD_INT 2
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 1
43343: NEG
43344: PUSH
43345: LD_INT 1
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 2
43354: NEG
43355: PUSH
43356: LD_INT 0
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 2
43365: NEG
43366: PUSH
43367: LD_INT 1
43369: NEG
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 2
43377: NEG
43378: PUSH
43379: LD_INT 2
43381: NEG
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43408: LD_ADDR_VAR 0 23
43412: PUSH
43413: LD_INT 0
43415: PUSH
43416: LD_INT 0
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 0
43425: PUSH
43426: LD_INT 1
43428: NEG
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 1
43436: PUSH
43437: LD_INT 0
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 1
43446: PUSH
43447: LD_INT 1
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 0
43456: PUSH
43457: LD_INT 1
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 1
43466: NEG
43467: PUSH
43468: LD_INT 0
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 1
43477: NEG
43478: PUSH
43479: LD_INT 1
43481: NEG
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 1
43489: NEG
43490: PUSH
43491: LD_INT 2
43493: NEG
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 0
43501: PUSH
43502: LD_INT 2
43504: NEG
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 1
43512: PUSH
43513: LD_INT 1
43515: NEG
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 2
43523: PUSH
43524: LD_INT 0
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 2
43533: PUSH
43534: LD_INT 1
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 2
43543: PUSH
43544: LD_INT 2
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 1
43553: PUSH
43554: LD_INT 2
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 0
43563: PUSH
43564: LD_INT 2
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 1
43573: NEG
43574: PUSH
43575: LD_INT 1
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 2
43584: NEG
43585: PUSH
43586: LD_INT 0
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 2
43595: NEG
43596: PUSH
43597: LD_INT 1
43599: NEG
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 2
43607: NEG
43608: PUSH
43609: LD_INT 2
43611: NEG
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 2
43619: NEG
43620: PUSH
43621: LD_INT 3
43623: NEG
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 1
43631: NEG
43632: PUSH
43633: LD_INT 3
43635: NEG
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 1
43643: PUSH
43644: LD_INT 2
43646: NEG
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 2
43654: PUSH
43655: LD_INT 1
43657: NEG
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43688: LD_ADDR_VAR 0 24
43692: PUSH
43693: LD_INT 0
43695: PUSH
43696: LD_INT 0
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 0
43705: PUSH
43706: LD_INT 1
43708: NEG
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 1
43716: PUSH
43717: LD_INT 0
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 1
43726: PUSH
43727: LD_INT 1
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 0
43736: PUSH
43737: LD_INT 1
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 1
43746: NEG
43747: PUSH
43748: LD_INT 0
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 1
43757: NEG
43758: PUSH
43759: LD_INT 1
43761: NEG
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 1
43769: NEG
43770: PUSH
43771: LD_INT 2
43773: NEG
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 0
43781: PUSH
43782: LD_INT 2
43784: NEG
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 1
43792: PUSH
43793: LD_INT 1
43795: NEG
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 2
43803: PUSH
43804: LD_INT 0
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 2
43813: PUSH
43814: LD_INT 1
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 2
43823: PUSH
43824: LD_INT 2
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 1
43833: PUSH
43834: LD_INT 2
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 0
43843: PUSH
43844: LD_INT 2
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 1
43853: NEG
43854: PUSH
43855: LD_INT 1
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 2
43864: NEG
43865: PUSH
43866: LD_INT 0
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 2
43875: NEG
43876: PUSH
43877: LD_INT 1
43879: NEG
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 2
43887: NEG
43888: PUSH
43889: LD_INT 2
43891: NEG
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 1
43899: PUSH
43900: LD_INT 2
43902: NEG
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 2
43910: PUSH
43911: LD_INT 1
43913: NEG
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 3
43921: PUSH
43922: LD_INT 1
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 3
43931: PUSH
43932: LD_INT 2
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43964: LD_ADDR_VAR 0 25
43968: PUSH
43969: LD_INT 0
43971: PUSH
43972: LD_INT 0
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: LD_INT 1
43984: NEG
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 1
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 0
44012: PUSH
44013: LD_INT 1
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 1
44022: NEG
44023: PUSH
44024: LD_INT 0
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 1
44033: NEG
44034: PUSH
44035: LD_INT 1
44037: NEG
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 1
44045: NEG
44046: PUSH
44047: LD_INT 2
44049: NEG
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 0
44057: PUSH
44058: LD_INT 2
44060: NEG
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 1
44068: PUSH
44069: LD_INT 1
44071: NEG
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 2
44079: PUSH
44080: LD_INT 0
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 2
44089: PUSH
44090: LD_INT 1
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 2
44099: PUSH
44100: LD_INT 2
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 1
44109: PUSH
44110: LD_INT 2
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 0
44119: PUSH
44120: LD_INT 2
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 1
44129: NEG
44130: PUSH
44131: LD_INT 1
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 2
44140: NEG
44141: PUSH
44142: LD_INT 0
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 2
44151: NEG
44152: PUSH
44153: LD_INT 1
44155: NEG
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 2
44163: NEG
44164: PUSH
44165: LD_INT 2
44167: NEG
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 3
44175: PUSH
44176: LD_INT 1
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 3
44185: PUSH
44186: LD_INT 2
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 2
44195: PUSH
44196: LD_INT 3
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 1
44205: PUSH
44206: LD_INT 3
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44238: LD_ADDR_VAR 0 26
44242: PUSH
44243: LD_INT 0
44245: PUSH
44246: LD_INT 0
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: LD_INT 1
44258: NEG
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 1
44266: PUSH
44267: LD_INT 0
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 1
44276: PUSH
44277: LD_INT 1
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 0
44286: PUSH
44287: LD_INT 1
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 1
44296: NEG
44297: PUSH
44298: LD_INT 0
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 1
44307: NEG
44308: PUSH
44309: LD_INT 1
44311: NEG
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 1
44319: NEG
44320: PUSH
44321: LD_INT 2
44323: NEG
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 0
44331: PUSH
44332: LD_INT 2
44334: NEG
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 1
44342: PUSH
44343: LD_INT 1
44345: NEG
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 2
44353: PUSH
44354: LD_INT 0
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 2
44363: PUSH
44364: LD_INT 1
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 2
44373: PUSH
44374: LD_INT 2
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 1
44383: PUSH
44384: LD_INT 2
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 0
44393: PUSH
44394: LD_INT 2
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 1
44403: NEG
44404: PUSH
44405: LD_INT 1
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 2
44414: NEG
44415: PUSH
44416: LD_INT 0
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 2
44425: NEG
44426: PUSH
44427: LD_INT 1
44429: NEG
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 2
44437: NEG
44438: PUSH
44439: LD_INT 2
44441: NEG
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 2
44449: PUSH
44450: LD_INT 3
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 1
44459: PUSH
44460: LD_INT 3
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 1
44469: NEG
44470: PUSH
44471: LD_INT 2
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 2
44480: NEG
44481: PUSH
44482: LD_INT 1
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44514: LD_ADDR_VAR 0 27
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: LD_INT 0
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 0
44531: PUSH
44532: LD_INT 1
44534: NEG
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 1
44542: PUSH
44543: LD_INT 0
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 1
44552: PUSH
44553: LD_INT 1
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 0
44562: PUSH
44563: LD_INT 1
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 1
44572: NEG
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 1
44583: NEG
44584: PUSH
44585: LD_INT 1
44587: NEG
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 1
44595: NEG
44596: PUSH
44597: LD_INT 2
44599: NEG
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: LD_INT 2
44610: NEG
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 1
44618: PUSH
44619: LD_INT 1
44621: NEG
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 2
44629: PUSH
44630: LD_INT 0
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 2
44639: PUSH
44640: LD_INT 1
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 2
44649: PUSH
44650: LD_INT 2
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 1
44659: PUSH
44660: LD_INT 2
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 0
44669: PUSH
44670: LD_INT 2
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 1
44679: NEG
44680: PUSH
44681: LD_INT 1
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 2
44690: NEG
44691: PUSH
44692: LD_INT 0
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 2
44701: NEG
44702: PUSH
44703: LD_INT 1
44705: NEG
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 2
44713: NEG
44714: PUSH
44715: LD_INT 2
44717: NEG
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 1
44725: NEG
44726: PUSH
44727: LD_INT 2
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 2
44736: NEG
44737: PUSH
44738: LD_INT 1
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 3
44747: NEG
44748: PUSH
44749: LD_INT 1
44751: NEG
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 3
44759: NEG
44760: PUSH
44761: LD_INT 2
44763: NEG
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44794: LD_ADDR_VAR 0 28
44798: PUSH
44799: LD_INT 0
44801: PUSH
44802: LD_INT 0
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 0
44811: PUSH
44812: LD_INT 1
44814: NEG
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 1
44822: PUSH
44823: LD_INT 0
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 1
44832: PUSH
44833: LD_INT 1
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 0
44842: PUSH
44843: LD_INT 1
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 1
44852: NEG
44853: PUSH
44854: LD_INT 0
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 1
44863: NEG
44864: PUSH
44865: LD_INT 1
44867: NEG
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 1
44875: NEG
44876: PUSH
44877: LD_INT 2
44879: NEG
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 0
44887: PUSH
44888: LD_INT 2
44890: NEG
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 1
44898: PUSH
44899: LD_INT 1
44901: NEG
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 2
44909: PUSH
44910: LD_INT 0
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 2
44919: PUSH
44920: LD_INT 1
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 2
44929: PUSH
44930: LD_INT 2
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 1
44939: PUSH
44940: LD_INT 2
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 0
44949: PUSH
44950: LD_INT 2
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 1
44959: NEG
44960: PUSH
44961: LD_INT 1
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 2
44970: NEG
44971: PUSH
44972: LD_INT 0
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 2
44981: NEG
44982: PUSH
44983: LD_INT 1
44985: NEG
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 2
44993: NEG
44994: PUSH
44995: LD_INT 2
44997: NEG
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 2
45005: NEG
45006: PUSH
45007: LD_INT 3
45009: NEG
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 1
45017: NEG
45018: PUSH
45019: LD_INT 3
45021: NEG
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 3
45029: NEG
45030: PUSH
45031: LD_INT 1
45033: NEG
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 3
45041: NEG
45042: PUSH
45043: LD_INT 2
45045: NEG
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45076: LD_ADDR_VAR 0 29
45080: PUSH
45081: LD_INT 0
45083: PUSH
45084: LD_INT 0
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 0
45093: PUSH
45094: LD_INT 1
45096: NEG
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 1
45104: PUSH
45105: LD_INT 0
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 1
45114: PUSH
45115: LD_INT 1
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 0
45124: PUSH
45125: LD_INT 1
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 1
45134: NEG
45135: PUSH
45136: LD_INT 0
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 1
45145: NEG
45146: PUSH
45147: LD_INT 1
45149: NEG
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 1
45157: NEG
45158: PUSH
45159: LD_INT 2
45161: NEG
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 0
45169: PUSH
45170: LD_INT 2
45172: NEG
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 1
45180: PUSH
45181: LD_INT 1
45183: NEG
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 2
45191: PUSH
45192: LD_INT 0
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 2
45201: PUSH
45202: LD_INT 1
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 1
45211: PUSH
45212: LD_INT 2
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 0
45221: PUSH
45222: LD_INT 2
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 1
45231: NEG
45232: PUSH
45233: LD_INT 1
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 2
45242: NEG
45243: PUSH
45244: LD_INT 1
45246: NEG
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 2
45254: NEG
45255: PUSH
45256: LD_INT 2
45258: NEG
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 2
45266: NEG
45267: PUSH
45268: LD_INT 3
45270: NEG
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 2
45278: PUSH
45279: LD_INT 1
45281: NEG
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 3
45289: PUSH
45290: LD_INT 1
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 1
45299: PUSH
45300: LD_INT 3
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 1
45309: NEG
45310: PUSH
45311: LD_INT 2
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 3
45320: NEG
45321: PUSH
45322: LD_INT 2
45324: NEG
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45355: LD_ADDR_VAR 0 30
45359: PUSH
45360: LD_INT 0
45362: PUSH
45363: LD_INT 0
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 0
45372: PUSH
45373: LD_INT 1
45375: NEG
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 1
45383: PUSH
45384: LD_INT 0
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 1
45393: PUSH
45394: LD_INT 1
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 0
45403: PUSH
45404: LD_INT 1
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 1
45413: NEG
45414: PUSH
45415: LD_INT 0
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 1
45424: NEG
45425: PUSH
45426: LD_INT 1
45428: NEG
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 1
45436: NEG
45437: PUSH
45438: LD_INT 2
45440: NEG
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 0
45448: PUSH
45449: LD_INT 2
45451: NEG
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 1
45459: PUSH
45460: LD_INT 1
45462: NEG
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 2
45470: PUSH
45471: LD_INT 0
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 2
45480: PUSH
45481: LD_INT 1
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 2
45490: PUSH
45491: LD_INT 2
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 1
45500: PUSH
45501: LD_INT 2
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 1
45510: NEG
45511: PUSH
45512: LD_INT 1
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 2
45521: NEG
45522: PUSH
45523: LD_INT 0
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 2
45532: NEG
45533: PUSH
45534: LD_INT 1
45536: NEG
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 1
45544: NEG
45545: PUSH
45546: LD_INT 3
45548: NEG
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 1
45556: PUSH
45557: LD_INT 2
45559: NEG
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 3
45567: PUSH
45568: LD_INT 2
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 2
45577: PUSH
45578: LD_INT 3
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 2
45587: NEG
45588: PUSH
45589: LD_INT 1
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 3
45598: NEG
45599: PUSH
45600: LD_INT 1
45602: NEG
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45633: LD_ADDR_VAR 0 31
45637: PUSH
45638: LD_INT 0
45640: PUSH
45641: LD_INT 0
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 0
45650: PUSH
45651: LD_INT 1
45653: NEG
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 1
45661: PUSH
45662: LD_INT 0
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 1
45671: PUSH
45672: LD_INT 1
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 0
45681: PUSH
45682: LD_INT 1
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 1
45691: NEG
45692: PUSH
45693: LD_INT 0
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 1
45702: NEG
45703: PUSH
45704: LD_INT 1
45706: NEG
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 1
45714: NEG
45715: PUSH
45716: LD_INT 2
45718: NEG
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 1
45726: PUSH
45727: LD_INT 1
45729: NEG
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 2
45737: PUSH
45738: LD_INT 0
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 2
45747: PUSH
45748: LD_INT 1
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 2
45757: PUSH
45758: LD_INT 2
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 1
45767: PUSH
45768: LD_INT 2
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 0
45777: PUSH
45778: LD_INT 2
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 1
45787: NEG
45788: PUSH
45789: LD_INT 1
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 2
45798: NEG
45799: PUSH
45800: LD_INT 1
45802: NEG
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 2
45810: NEG
45811: PUSH
45812: LD_INT 2
45814: NEG
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 2
45822: NEG
45823: PUSH
45824: LD_INT 3
45826: NEG
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 2
45834: PUSH
45835: LD_INT 1
45837: NEG
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 3
45845: PUSH
45846: LD_INT 1
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 1
45855: PUSH
45856: LD_INT 3
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 1
45865: NEG
45866: PUSH
45867: LD_INT 2
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 3
45876: NEG
45877: PUSH
45878: LD_INT 2
45880: NEG
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45911: LD_ADDR_VAR 0 32
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 0
45928: PUSH
45929: LD_INT 1
45931: NEG
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 1
45939: PUSH
45940: LD_INT 0
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 1
45949: PUSH
45950: LD_INT 1
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 0
45959: PUSH
45960: LD_INT 1
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 1
45969: NEG
45970: PUSH
45971: LD_INT 0
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 1
45980: NEG
45981: PUSH
45982: LD_INT 1
45984: NEG
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 1
45992: NEG
45993: PUSH
45994: LD_INT 2
45996: NEG
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 0
46004: PUSH
46005: LD_INT 2
46007: NEG
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 1
46015: PUSH
46016: LD_INT 1
46018: NEG
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 2
46026: PUSH
46027: LD_INT 1
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 2
46036: PUSH
46037: LD_INT 2
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 1
46046: PUSH
46047: LD_INT 2
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 0
46056: PUSH
46057: LD_INT 2
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 1
46066: NEG
46067: PUSH
46068: LD_INT 1
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 2
46077: NEG
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 2
46088: NEG
46089: PUSH
46090: LD_INT 1
46092: NEG
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 1
46100: NEG
46101: PUSH
46102: LD_INT 3
46104: NEG
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 1
46112: PUSH
46113: LD_INT 2
46115: NEG
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 3
46123: PUSH
46124: LD_INT 2
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 2
46133: PUSH
46134: LD_INT 3
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 2
46143: NEG
46144: PUSH
46145: LD_INT 1
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 3
46154: NEG
46155: PUSH
46156: LD_INT 1
46158: NEG
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46189: LD_ADDR_VAR 0 33
46193: PUSH
46194: LD_INT 0
46196: PUSH
46197: LD_INT 0
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: LD_INT 1
46209: NEG
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 1
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 1
46227: PUSH
46228: LD_INT 1
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 0
46237: PUSH
46238: LD_INT 1
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 1
46247: NEG
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 1
46258: NEG
46259: PUSH
46260: LD_INT 1
46262: NEG
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 1
46270: NEG
46271: PUSH
46272: LD_INT 2
46274: NEG
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 1
46282: PUSH
46283: LD_INT 1
46285: NEG
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 2
46293: PUSH
46294: LD_INT 0
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 2
46303: PUSH
46304: LD_INT 1
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 1
46313: PUSH
46314: LD_INT 2
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 0
46323: PUSH
46324: LD_INT 2
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 1
46333: NEG
46334: PUSH
46335: LD_INT 1
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 2
46344: NEG
46345: PUSH
46346: LD_INT 0
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 2
46355: NEG
46356: PUSH
46357: LD_INT 1
46359: NEG
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 2
46367: NEG
46368: PUSH
46369: LD_INT 2
46371: NEG
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 2
46379: NEG
46380: PUSH
46381: LD_INT 3
46383: NEG
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 2
46391: PUSH
46392: LD_INT 1
46394: NEG
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 3
46402: PUSH
46403: LD_INT 1
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 1
46412: PUSH
46413: LD_INT 3
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 1
46422: NEG
46423: PUSH
46424: LD_INT 2
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 3
46433: NEG
46434: PUSH
46435: LD_INT 2
46437: NEG
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46468: LD_ADDR_VAR 0 34
46472: PUSH
46473: LD_INT 0
46475: PUSH
46476: LD_INT 0
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 0
46485: PUSH
46486: LD_INT 1
46488: NEG
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 1
46496: PUSH
46497: LD_INT 0
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 1
46506: PUSH
46507: LD_INT 1
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: LD_INT 1
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 1
46526: NEG
46527: PUSH
46528: LD_INT 0
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 1
46537: NEG
46538: PUSH
46539: LD_INT 1
46541: NEG
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 1
46549: NEG
46550: PUSH
46551: LD_INT 2
46553: NEG
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 0
46561: PUSH
46562: LD_INT 2
46564: NEG
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 1
46572: PUSH
46573: LD_INT 1
46575: NEG
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 2
46583: PUSH
46584: LD_INT 1
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 2
46593: PUSH
46594: LD_INT 2
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 1
46603: PUSH
46604: LD_INT 2
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 1
46613: NEG
46614: PUSH
46615: LD_INT 1
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 2
46624: NEG
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 2
46635: NEG
46636: PUSH
46637: LD_INT 1
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 2
46647: NEG
46648: PUSH
46649: LD_INT 2
46651: NEG
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 1
46659: NEG
46660: PUSH
46661: LD_INT 3
46663: NEG
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 1
46671: PUSH
46672: LD_INT 2
46674: NEG
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 3
46682: PUSH
46683: LD_INT 2
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 2
46692: PUSH
46693: LD_INT 3
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 2
46702: NEG
46703: PUSH
46704: LD_INT 1
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 3
46713: NEG
46714: PUSH
46715: LD_INT 1
46717: NEG
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46748: LD_ADDR_VAR 0 35
46752: PUSH
46753: LD_INT 0
46755: PUSH
46756: LD_INT 0
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 0
46765: PUSH
46766: LD_INT 1
46768: NEG
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 1
46776: PUSH
46777: LD_INT 0
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 1
46786: PUSH
46787: LD_INT 1
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 0
46796: PUSH
46797: LD_INT 1
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: LD_INT 1
46806: NEG
46807: PUSH
46808: LD_INT 0
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 1
46817: NEG
46818: PUSH
46819: LD_INT 1
46821: NEG
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 2
46829: PUSH
46830: LD_INT 1
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 2
46839: NEG
46840: PUSH
46841: LD_INT 1
46843: NEG
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46860: LD_ADDR_VAR 0 36
46864: PUSH
46865: LD_INT 0
46867: PUSH
46868: LD_INT 0
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 0
46877: PUSH
46878: LD_INT 1
46880: NEG
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 1
46888: PUSH
46889: LD_INT 0
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 1
46898: PUSH
46899: LD_INT 1
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 0
46908: PUSH
46909: LD_INT 1
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 1
46918: NEG
46919: PUSH
46920: LD_INT 0
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 1
46929: NEG
46930: PUSH
46931: LD_INT 1
46933: NEG
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 1
46941: NEG
46942: PUSH
46943: LD_INT 2
46945: NEG
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 1
46953: PUSH
46954: LD_INT 2
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46972: LD_ADDR_VAR 0 37
46976: PUSH
46977: LD_INT 0
46979: PUSH
46980: LD_INT 0
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 0
46989: PUSH
46990: LD_INT 1
46992: NEG
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 1
47000: PUSH
47001: LD_INT 0
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 1
47010: PUSH
47011: LD_INT 1
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 0
47020: PUSH
47021: LD_INT 1
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 1
47030: NEG
47031: PUSH
47032: LD_INT 0
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 1
47041: NEG
47042: PUSH
47043: LD_INT 1
47045: NEG
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 1
47053: PUSH
47054: LD_INT 1
47056: NEG
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 1
47064: NEG
47065: PUSH
47066: LD_INT 1
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47084: LD_ADDR_VAR 0 38
47088: PUSH
47089: LD_INT 0
47091: PUSH
47092: LD_INT 0
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 0
47101: PUSH
47102: LD_INT 1
47104: NEG
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 1
47112: PUSH
47113: LD_INT 0
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 1
47122: PUSH
47123: LD_INT 1
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 0
47132: PUSH
47133: LD_INT 1
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 1
47142: NEG
47143: PUSH
47144: LD_INT 0
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 1
47153: NEG
47154: PUSH
47155: LD_INT 1
47157: NEG
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 2
47165: PUSH
47166: LD_INT 1
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 2
47175: NEG
47176: PUSH
47177: LD_INT 1
47179: NEG
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47196: LD_ADDR_VAR 0 39
47200: PUSH
47201: LD_INT 0
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 0
47213: PUSH
47214: LD_INT 1
47216: NEG
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 1
47224: PUSH
47225: LD_INT 0
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 1
47234: PUSH
47235: LD_INT 1
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 0
47244: PUSH
47245: LD_INT 1
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 1
47254: NEG
47255: PUSH
47256: LD_INT 0
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 1
47265: NEG
47266: PUSH
47267: LD_INT 1
47269: NEG
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 1
47277: NEG
47278: PUSH
47279: LD_INT 2
47281: NEG
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 1
47289: PUSH
47290: LD_INT 2
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47308: LD_ADDR_VAR 0 40
47312: PUSH
47313: LD_INT 0
47315: PUSH
47316: LD_INT 0
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 0
47325: PUSH
47326: LD_INT 1
47328: NEG
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 1
47336: PUSH
47337: LD_INT 0
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 1
47346: PUSH
47347: LD_INT 1
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 0
47356: PUSH
47357: LD_INT 1
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 1
47366: NEG
47367: PUSH
47368: LD_INT 0
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 1
47377: NEG
47378: PUSH
47379: LD_INT 1
47381: NEG
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 1
47389: PUSH
47390: LD_INT 1
47392: NEG
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 1
47400: NEG
47401: PUSH
47402: LD_INT 1
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47420: LD_ADDR_VAR 0 41
47424: PUSH
47425: LD_INT 0
47427: PUSH
47428: LD_INT 0
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 0
47437: PUSH
47438: LD_INT 1
47440: NEG
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 1
47448: PUSH
47449: LD_INT 0
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 1
47458: PUSH
47459: LD_INT 1
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 0
47468: PUSH
47469: LD_INT 1
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 1
47478: NEG
47479: PUSH
47480: LD_INT 0
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 1
47489: NEG
47490: PUSH
47491: LD_INT 1
47493: NEG
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 1
47501: NEG
47502: PUSH
47503: LD_INT 2
47505: NEG
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 1
47513: PUSH
47514: LD_INT 1
47516: NEG
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 2
47524: PUSH
47525: LD_INT 0
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 2
47534: PUSH
47535: LD_INT 1
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 2
47544: PUSH
47545: LD_INT 2
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 1
47554: PUSH
47555: LD_INT 2
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 1
47564: NEG
47565: PUSH
47566: LD_INT 1
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 2
47575: NEG
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 2
47586: NEG
47587: PUSH
47588: LD_INT 1
47590: NEG
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 2
47598: NEG
47599: PUSH
47600: LD_INT 2
47602: NEG
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 2
47610: NEG
47611: PUSH
47612: LD_INT 3
47614: NEG
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 2
47622: PUSH
47623: LD_INT 1
47625: NEG
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 3
47633: PUSH
47634: LD_INT 0
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 3
47643: PUSH
47644: LD_INT 1
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 3
47653: PUSH
47654: LD_INT 2
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 3
47663: PUSH
47664: LD_INT 3
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 2
47673: PUSH
47674: LD_INT 3
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 2
47683: NEG
47684: PUSH
47685: LD_INT 1
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 3
47694: NEG
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 3
47705: NEG
47706: PUSH
47707: LD_INT 1
47709: NEG
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 3
47717: NEG
47718: PUSH
47719: LD_INT 2
47721: NEG
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 3
47729: NEG
47730: PUSH
47731: LD_INT 3
47733: NEG
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47770: LD_ADDR_VAR 0 42
47774: PUSH
47775: LD_INT 0
47777: PUSH
47778: LD_INT 0
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 0
47787: PUSH
47788: LD_INT 1
47790: NEG
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 1
47798: PUSH
47799: LD_INT 0
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 1
47808: PUSH
47809: LD_INT 1
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 0
47818: PUSH
47819: LD_INT 1
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 1
47828: NEG
47829: PUSH
47830: LD_INT 0
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 1
47839: NEG
47840: PUSH
47841: LD_INT 1
47843: NEG
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 1
47851: NEG
47852: PUSH
47853: LD_INT 2
47855: NEG
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 0
47863: PUSH
47864: LD_INT 2
47866: NEG
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 1
47874: PUSH
47875: LD_INT 1
47877: NEG
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 2
47885: PUSH
47886: LD_INT 1
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 2
47895: PUSH
47896: LD_INT 2
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 1
47905: PUSH
47906: LD_INT 2
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 0
47915: PUSH
47916: LD_INT 2
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 1
47925: NEG
47926: PUSH
47927: LD_INT 1
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 2
47936: NEG
47937: PUSH
47938: LD_INT 1
47940: NEG
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 2
47948: NEG
47949: PUSH
47950: LD_INT 2
47952: NEG
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 2
47960: NEG
47961: PUSH
47962: LD_INT 3
47964: NEG
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 1
47972: NEG
47973: PUSH
47974: LD_INT 3
47976: NEG
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 0
47984: PUSH
47985: LD_INT 3
47987: NEG
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 1
47995: PUSH
47996: LD_INT 2
47998: NEG
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 3
48006: PUSH
48007: LD_INT 2
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 3
48016: PUSH
48017: LD_INT 3
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 2
48026: PUSH
48027: LD_INT 3
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 1
48036: PUSH
48037: LD_INT 3
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 0
48046: PUSH
48047: LD_INT 3
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: PUSH
48058: LD_INT 2
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 3
48067: NEG
48068: PUSH
48069: LD_INT 2
48071: NEG
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 3
48079: NEG
48080: PUSH
48081: LD_INT 3
48083: NEG
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48120: LD_ADDR_VAR 0 43
48124: PUSH
48125: LD_INT 0
48127: PUSH
48128: LD_INT 0
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 0
48137: PUSH
48138: LD_INT 1
48140: NEG
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 1
48148: PUSH
48149: LD_INT 0
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 1
48158: PUSH
48159: LD_INT 1
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 0
48168: PUSH
48169: LD_INT 1
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 1
48178: NEG
48179: PUSH
48180: LD_INT 0
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 1
48189: NEG
48190: PUSH
48191: LD_INT 1
48193: NEG
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 1
48201: NEG
48202: PUSH
48203: LD_INT 2
48205: NEG
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 0
48213: PUSH
48214: LD_INT 2
48216: NEG
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 1
48224: PUSH
48225: LD_INT 1
48227: NEG
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 2
48235: PUSH
48236: LD_INT 0
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 2
48245: PUSH
48246: LD_INT 1
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 1
48255: PUSH
48256: LD_INT 2
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 0
48265: PUSH
48266: LD_INT 2
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 1
48275: NEG
48276: PUSH
48277: LD_INT 1
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 2
48286: NEG
48287: PUSH
48288: LD_INT 0
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 2
48297: NEG
48298: PUSH
48299: LD_INT 1
48301: NEG
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 1
48309: NEG
48310: PUSH
48311: LD_INT 3
48313: NEG
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 0
48321: PUSH
48322: LD_INT 3
48324: NEG
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 1
48332: PUSH
48333: LD_INT 2
48335: NEG
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 2
48343: PUSH
48344: LD_INT 1
48346: NEG
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 3
48354: PUSH
48355: LD_INT 0
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 3
48364: PUSH
48365: LD_INT 1
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 1
48374: PUSH
48375: LD_INT 3
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: LD_INT 3
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 1
48394: NEG
48395: PUSH
48396: LD_INT 2
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 2
48405: NEG
48406: PUSH
48407: LD_INT 1
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 3
48416: NEG
48417: PUSH
48418: LD_INT 0
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 3
48427: NEG
48428: PUSH
48429: LD_INT 1
48431: NEG
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48468: LD_ADDR_VAR 0 44
48472: PUSH
48473: LD_INT 0
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 0
48485: PUSH
48486: LD_INT 1
48488: NEG
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 1
48496: PUSH
48497: LD_INT 0
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 1
48506: PUSH
48507: LD_INT 1
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 0
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 1
48526: NEG
48527: PUSH
48528: LD_INT 0
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 1
48537: NEG
48538: PUSH
48539: LD_INT 1
48541: NEG
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 1
48549: NEG
48550: PUSH
48551: LD_INT 2
48553: NEG
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 1
48561: PUSH
48562: LD_INT 1
48564: NEG
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 2
48572: PUSH
48573: LD_INT 0
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 2
48582: PUSH
48583: LD_INT 1
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 2
48592: PUSH
48593: LD_INT 2
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 1
48602: PUSH
48603: LD_INT 2
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 1
48612: NEG
48613: PUSH
48614: LD_INT 1
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 2
48623: NEG
48624: PUSH
48625: LD_INT 0
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 2
48634: NEG
48635: PUSH
48636: LD_INT 1
48638: NEG
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 2
48646: NEG
48647: PUSH
48648: LD_INT 2
48650: NEG
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: LD_INT 2
48658: NEG
48659: PUSH
48660: LD_INT 3
48662: NEG
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 2
48670: PUSH
48671: LD_INT 1
48673: NEG
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 3
48681: PUSH
48682: LD_INT 0
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 3
48691: PUSH
48692: LD_INT 1
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 3
48701: PUSH
48702: LD_INT 2
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 3
48711: PUSH
48712: LD_INT 3
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 2
48721: PUSH
48722: LD_INT 3
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 2
48731: NEG
48732: PUSH
48733: LD_INT 1
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 3
48742: NEG
48743: PUSH
48744: LD_INT 0
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 3
48753: NEG
48754: PUSH
48755: LD_INT 1
48757: NEG
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 3
48765: NEG
48766: PUSH
48767: LD_INT 2
48769: NEG
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 3
48777: NEG
48778: PUSH
48779: LD_INT 3
48781: NEG
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48818: LD_ADDR_VAR 0 45
48822: PUSH
48823: LD_INT 0
48825: PUSH
48826: LD_INT 0
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 0
48835: PUSH
48836: LD_INT 1
48838: NEG
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 1
48846: PUSH
48847: LD_INT 0
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 1
48856: PUSH
48857: LD_INT 1
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 0
48866: PUSH
48867: LD_INT 1
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 1
48876: NEG
48877: PUSH
48878: LD_INT 0
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 1
48887: NEG
48888: PUSH
48889: LD_INT 1
48891: NEG
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 1
48899: NEG
48900: PUSH
48901: LD_INT 2
48903: NEG
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 0
48911: PUSH
48912: LD_INT 2
48914: NEG
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 1
48922: PUSH
48923: LD_INT 1
48925: NEG
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 2
48933: PUSH
48934: LD_INT 1
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 2
48943: PUSH
48944: LD_INT 2
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 1
48953: PUSH
48954: LD_INT 2
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 0
48963: PUSH
48964: LD_INT 2
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 1
48973: NEG
48974: PUSH
48975: LD_INT 1
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 2
48984: NEG
48985: PUSH
48986: LD_INT 1
48988: NEG
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 2
48996: NEG
48997: PUSH
48998: LD_INT 2
49000: NEG
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 2
49008: NEG
49009: PUSH
49010: LD_INT 3
49012: NEG
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 1
49020: NEG
49021: PUSH
49022: LD_INT 3
49024: NEG
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 0
49032: PUSH
49033: LD_INT 3
49035: NEG
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 1
49043: PUSH
49044: LD_INT 2
49046: NEG
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 3
49054: PUSH
49055: LD_INT 2
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 3
49064: PUSH
49065: LD_INT 3
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 2
49074: PUSH
49075: LD_INT 3
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 1
49084: PUSH
49085: LD_INT 3
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 0
49094: PUSH
49095: LD_INT 3
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 1
49104: NEG
49105: PUSH
49106: LD_INT 2
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 3
49115: NEG
49116: PUSH
49117: LD_INT 2
49119: NEG
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 3
49127: NEG
49128: PUSH
49129: LD_INT 3
49131: NEG
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49168: LD_ADDR_VAR 0 46
49172: PUSH
49173: LD_INT 0
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 0
49185: PUSH
49186: LD_INT 1
49188: NEG
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 1
49196: PUSH
49197: LD_INT 0
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 1
49206: PUSH
49207: LD_INT 1
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 0
49216: PUSH
49217: LD_INT 1
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 1
49226: NEG
49227: PUSH
49228: LD_INT 0
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 1
49237: NEG
49238: PUSH
49239: LD_INT 1
49241: NEG
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 1
49249: NEG
49250: PUSH
49251: LD_INT 2
49253: NEG
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 0
49261: PUSH
49262: LD_INT 2
49264: NEG
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 1
49272: PUSH
49273: LD_INT 1
49275: NEG
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 2
49283: PUSH
49284: LD_INT 0
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 2
49293: PUSH
49294: LD_INT 1
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 1
49303: PUSH
49304: LD_INT 2
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 0
49313: PUSH
49314: LD_INT 2
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 1
49323: NEG
49324: PUSH
49325: LD_INT 1
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 2
49334: NEG
49335: PUSH
49336: LD_INT 0
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 2
49345: NEG
49346: PUSH
49347: LD_INT 1
49349: NEG
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 1
49357: NEG
49358: PUSH
49359: LD_INT 3
49361: NEG
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 0
49369: PUSH
49370: LD_INT 3
49372: NEG
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 1
49380: PUSH
49381: LD_INT 2
49383: NEG
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 2
49391: PUSH
49392: LD_INT 1
49394: NEG
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 3
49402: PUSH
49403: LD_INT 0
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 3
49412: PUSH
49413: LD_INT 1
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 1
49422: PUSH
49423: LD_INT 3
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 0
49432: PUSH
49433: LD_INT 3
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 1
49442: NEG
49443: PUSH
49444: LD_INT 2
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 2
49453: NEG
49454: PUSH
49455: LD_INT 1
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 3
49464: NEG
49465: PUSH
49466: LD_INT 0
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 3
49475: NEG
49476: PUSH
49477: LD_INT 1
49479: NEG
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49516: LD_ADDR_VAR 0 47
49520: PUSH
49521: LD_INT 0
49523: PUSH
49524: LD_INT 0
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 0
49533: PUSH
49534: LD_INT 1
49536: NEG
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 1
49544: PUSH
49545: LD_INT 0
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 1
49554: PUSH
49555: LD_INT 1
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 0
49564: PUSH
49565: LD_INT 1
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 1
49574: NEG
49575: PUSH
49576: LD_INT 0
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 1
49585: NEG
49586: PUSH
49587: LD_INT 1
49589: NEG
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 1
49597: NEG
49598: PUSH
49599: LD_INT 2
49601: NEG
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 0
49609: PUSH
49610: LD_INT 2
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 1
49620: PUSH
49621: LD_INT 1
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 2
49631: NEG
49632: PUSH
49633: LD_INT 1
49635: NEG
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 2
49643: NEG
49644: PUSH
49645: LD_INT 2
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49667: LD_ADDR_VAR 0 48
49671: PUSH
49672: LD_INT 0
49674: PUSH
49675: LD_INT 0
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 0
49684: PUSH
49685: LD_INT 1
49687: NEG
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 1
49695: PUSH
49696: LD_INT 0
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 1
49705: PUSH
49706: LD_INT 1
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 0
49715: PUSH
49716: LD_INT 1
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 1
49725: NEG
49726: PUSH
49727: LD_INT 0
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 1
49736: NEG
49737: PUSH
49738: LD_INT 1
49740: NEG
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 1
49748: NEG
49749: PUSH
49750: LD_INT 2
49752: NEG
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 0
49760: PUSH
49761: LD_INT 2
49763: NEG
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 1
49771: PUSH
49772: LD_INT 1
49774: NEG
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 2
49782: PUSH
49783: LD_INT 0
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 2
49792: PUSH
49793: LD_INT 1
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49814: LD_ADDR_VAR 0 49
49818: PUSH
49819: LD_INT 0
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 0
49831: PUSH
49832: LD_INT 1
49834: NEG
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 1
49842: PUSH
49843: LD_INT 0
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 1
49852: PUSH
49853: LD_INT 1
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 0
49862: PUSH
49863: LD_INT 1
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 1
49872: NEG
49873: PUSH
49874: LD_INT 0
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 1
49883: NEG
49884: PUSH
49885: LD_INT 1
49887: NEG
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 1
49895: PUSH
49896: LD_INT 1
49898: NEG
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 2
49906: PUSH
49907: LD_INT 0
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 2
49916: PUSH
49917: LD_INT 1
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 2
49926: PUSH
49927: LD_INT 2
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 1
49936: PUSH
49937: LD_INT 2
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49958: LD_ADDR_VAR 0 50
49962: PUSH
49963: LD_INT 0
49965: PUSH
49966: LD_INT 0
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 0
49975: PUSH
49976: LD_INT 1
49978: NEG
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 1
49986: PUSH
49987: LD_INT 0
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 1
49996: PUSH
49997: LD_INT 1
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 0
50006: PUSH
50007: LD_INT 1
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 1
50016: NEG
50017: PUSH
50018: LD_INT 0
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 1
50027: NEG
50028: PUSH
50029: LD_INT 1
50031: NEG
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 2
50039: PUSH
50040: LD_INT 1
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 2
50049: PUSH
50050: LD_INT 2
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 1
50059: PUSH
50060: LD_INT 2
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 0
50069: PUSH
50070: LD_INT 2
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 1
50079: NEG
50080: PUSH
50081: LD_INT 1
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50102: LD_ADDR_VAR 0 51
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: LD_INT 0
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 0
50119: PUSH
50120: LD_INT 1
50122: NEG
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 1
50130: PUSH
50131: LD_INT 0
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 1
50140: PUSH
50141: LD_INT 1
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 0
50150: PUSH
50151: LD_INT 1
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 1
50160: NEG
50161: PUSH
50162: LD_INT 0
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 1
50171: NEG
50172: PUSH
50173: LD_INT 1
50175: NEG
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 1
50183: PUSH
50184: LD_INT 2
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 0
50193: PUSH
50194: LD_INT 2
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 1
50203: NEG
50204: PUSH
50205: LD_INT 1
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 2
50214: NEG
50215: PUSH
50216: LD_INT 0
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 2
50225: NEG
50226: PUSH
50227: LD_INT 1
50229: NEG
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50249: LD_ADDR_VAR 0 52
50253: PUSH
50254: LD_INT 0
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 0
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 1
50277: PUSH
50278: LD_INT 0
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 1
50287: PUSH
50288: LD_INT 1
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 0
50297: PUSH
50298: LD_INT 1
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 1
50307: NEG
50308: PUSH
50309: LD_INT 0
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 1
50318: NEG
50319: PUSH
50320: LD_INT 1
50322: NEG
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 1
50330: NEG
50331: PUSH
50332: LD_INT 2
50334: NEG
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 1
50342: NEG
50343: PUSH
50344: LD_INT 1
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 2
50353: NEG
50354: PUSH
50355: LD_INT 0
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 2
50364: NEG
50365: PUSH
50366: LD_INT 1
50368: NEG
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 2
50376: NEG
50377: PUSH
50378: LD_INT 2
50380: NEG
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50400: LD_ADDR_VAR 0 53
50404: PUSH
50405: LD_INT 0
50407: PUSH
50408: LD_INT 0
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 0
50417: PUSH
50418: LD_INT 1
50420: NEG
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 1
50428: PUSH
50429: LD_INT 0
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 1
50438: PUSH
50439: LD_INT 1
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: LD_INT 1
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 1
50458: NEG
50459: PUSH
50460: LD_INT 0
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: PUSH
50471: LD_INT 1
50473: NEG
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 1
50481: NEG
50482: PUSH
50483: LD_INT 2
50485: NEG
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 0
50493: PUSH
50494: LD_INT 2
50496: NEG
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 1
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 2
50515: PUSH
50516: LD_INT 0
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 2
50525: PUSH
50526: LD_INT 1
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 2
50535: PUSH
50536: LD_INT 2
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 1
50545: PUSH
50546: LD_INT 2
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 0
50555: PUSH
50556: LD_INT 2
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 1
50565: NEG
50566: PUSH
50567: LD_INT 1
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 2
50576: NEG
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 2
50587: NEG
50588: PUSH
50589: LD_INT 1
50591: NEG
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 2
50599: NEG
50600: PUSH
50601: LD_INT 2
50603: NEG
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50630: LD_ADDR_VAR 0 54
50634: PUSH
50635: LD_INT 0
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 0
50647: PUSH
50648: LD_INT 1
50650: NEG
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 1
50658: PUSH
50659: LD_INT 0
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 1
50668: PUSH
50669: LD_INT 1
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: LD_INT 1
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 1
50688: NEG
50689: PUSH
50690: LD_INT 0
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 1
50699: NEG
50700: PUSH
50701: LD_INT 1
50703: NEG
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 1
50711: NEG
50712: PUSH
50713: LD_INT 2
50715: NEG
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 0
50723: PUSH
50724: LD_INT 2
50726: NEG
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 1
50734: PUSH
50735: LD_INT 1
50737: NEG
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 2
50745: PUSH
50746: LD_INT 0
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 2
50755: PUSH
50756: LD_INT 1
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 2
50765: PUSH
50766: LD_INT 2
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 1
50775: PUSH
50776: LD_INT 2
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 0
50785: PUSH
50786: LD_INT 2
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 1
50795: NEG
50796: PUSH
50797: LD_INT 1
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 2
50806: NEG
50807: PUSH
50808: LD_INT 0
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 2
50817: NEG
50818: PUSH
50819: LD_INT 1
50821: NEG
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 2
50829: NEG
50830: PUSH
50831: LD_INT 2
50833: NEG
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50860: LD_ADDR_VAR 0 55
50864: PUSH
50865: LD_INT 0
50867: PUSH
50868: LD_INT 0
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 0
50877: PUSH
50878: LD_INT 1
50880: NEG
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 1
50888: PUSH
50889: LD_INT 0
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 1
50898: PUSH
50899: LD_INT 1
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 0
50908: PUSH
50909: LD_INT 1
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 1
50918: NEG
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 1
50929: NEG
50930: PUSH
50931: LD_INT 1
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 1
50941: NEG
50942: PUSH
50943: LD_INT 2
50945: NEG
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 0
50953: PUSH
50954: LD_INT 2
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 1
50964: PUSH
50965: LD_INT 1
50967: NEG
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 2
50975: PUSH
50976: LD_INT 0
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 2
50985: PUSH
50986: LD_INT 1
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 2
50995: PUSH
50996: LD_INT 2
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 1
51005: PUSH
51006: LD_INT 2
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 0
51015: PUSH
51016: LD_INT 2
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 1
51025: NEG
51026: PUSH
51027: LD_INT 1
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 2
51036: NEG
51037: PUSH
51038: LD_INT 0
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 2
51047: NEG
51048: PUSH
51049: LD_INT 1
51051: NEG
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 2
51059: NEG
51060: PUSH
51061: LD_INT 2
51063: NEG
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51090: LD_ADDR_VAR 0 56
51094: PUSH
51095: LD_INT 0
51097: PUSH
51098: LD_INT 0
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: LD_INT 1
51110: NEG
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 1
51118: PUSH
51119: LD_INT 0
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 1
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: LD_INT 1
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 1
51148: NEG
51149: PUSH
51150: LD_INT 0
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 1
51159: NEG
51160: PUSH
51161: LD_INT 1
51163: NEG
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 1
51171: NEG
51172: PUSH
51173: LD_INT 2
51175: NEG
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 0
51183: PUSH
51184: LD_INT 2
51186: NEG
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 1
51194: PUSH
51195: LD_INT 1
51197: NEG
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 2
51205: PUSH
51206: LD_INT 0
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 2
51215: PUSH
51216: LD_INT 1
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 2
51225: PUSH
51226: LD_INT 2
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 1
51235: PUSH
51236: LD_INT 2
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: LD_INT 2
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: LD_INT 1
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 2
51266: NEG
51267: PUSH
51268: LD_INT 0
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 2
51277: NEG
51278: PUSH
51279: LD_INT 1
51281: NEG
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 2
51289: NEG
51290: PUSH
51291: LD_INT 2
51293: NEG
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51320: LD_ADDR_VAR 0 57
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 0
51337: PUSH
51338: LD_INT 1
51340: NEG
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 1
51348: PUSH
51349: LD_INT 0
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: LD_INT 1
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: LD_INT 1
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 1
51378: NEG
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 1
51389: NEG
51390: PUSH
51391: LD_INT 1
51393: NEG
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: LD_INT 2
51405: NEG
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 0
51413: PUSH
51414: LD_INT 2
51416: NEG
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 1
51424: PUSH
51425: LD_INT 1
51427: NEG
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 2
51435: PUSH
51436: LD_INT 0
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 2
51445: PUSH
51446: LD_INT 1
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 2
51455: PUSH
51456: LD_INT 2
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 1
51465: PUSH
51466: LD_INT 2
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 0
51475: PUSH
51476: LD_INT 2
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 1
51485: NEG
51486: PUSH
51487: LD_INT 1
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 2
51496: NEG
51497: PUSH
51498: LD_INT 0
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 2
51507: NEG
51508: PUSH
51509: LD_INT 1
51511: NEG
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 2
51519: NEG
51520: PUSH
51521: LD_INT 2
51523: NEG
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51550: LD_ADDR_VAR 0 58
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: LD_INT 0
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 0
51567: PUSH
51568: LD_INT 1
51570: NEG
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 1
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 1
51588: PUSH
51589: LD_INT 1
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 0
51598: PUSH
51599: LD_INT 1
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 1
51608: NEG
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 1
51619: NEG
51620: PUSH
51621: LD_INT 1
51623: NEG
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 1
51631: NEG
51632: PUSH
51633: LD_INT 2
51635: NEG
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 0
51643: PUSH
51644: LD_INT 2
51646: NEG
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 1
51654: PUSH
51655: LD_INT 1
51657: NEG
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 2
51665: PUSH
51666: LD_INT 0
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 2
51675: PUSH
51676: LD_INT 1
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 2
51685: PUSH
51686: LD_INT 2
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 1
51695: PUSH
51696: LD_INT 2
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 0
51705: PUSH
51706: LD_INT 2
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 1
51715: NEG
51716: PUSH
51717: LD_INT 1
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 2
51726: NEG
51727: PUSH
51728: LD_INT 0
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 2
51737: NEG
51738: PUSH
51739: LD_INT 1
51741: NEG
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 2
51749: NEG
51750: PUSH
51751: LD_INT 2
51753: NEG
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51780: LD_ADDR_VAR 0 59
51784: PUSH
51785: LD_INT 0
51787: PUSH
51788: LD_INT 0
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 0
51797: PUSH
51798: LD_INT 1
51800: NEG
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 1
51808: PUSH
51809: LD_INT 0
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 1
51818: PUSH
51819: LD_INT 1
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 0
51828: PUSH
51829: LD_INT 1
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 1
51838: NEG
51839: PUSH
51840: LD_INT 0
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 1
51849: NEG
51850: PUSH
51851: LD_INT 1
51853: NEG
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51868: LD_ADDR_VAR 0 60
51872: PUSH
51873: LD_INT 0
51875: PUSH
51876: LD_INT 0
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 0
51885: PUSH
51886: LD_INT 1
51888: NEG
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 1
51896: PUSH
51897: LD_INT 0
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 1
51906: PUSH
51907: LD_INT 1
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 0
51916: PUSH
51917: LD_INT 1
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 1
51926: NEG
51927: PUSH
51928: LD_INT 0
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 1
51937: NEG
51938: PUSH
51939: LD_INT 1
51941: NEG
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51956: LD_ADDR_VAR 0 61
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: LD_INT 0
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 0
51973: PUSH
51974: LD_INT 1
51976: NEG
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 1
51984: PUSH
51985: LD_INT 0
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 1
51994: PUSH
51995: LD_INT 1
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 0
52004: PUSH
52005: LD_INT 1
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 1
52014: NEG
52015: PUSH
52016: LD_INT 0
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 1
52025: NEG
52026: PUSH
52027: LD_INT 1
52029: NEG
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52044: LD_ADDR_VAR 0 62
52048: PUSH
52049: LD_INT 0
52051: PUSH
52052: LD_INT 0
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 0
52061: PUSH
52062: LD_INT 1
52064: NEG
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 1
52072: PUSH
52073: LD_INT 0
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 1
52082: PUSH
52083: LD_INT 1
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 0
52092: PUSH
52093: LD_INT 1
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 1
52102: NEG
52103: PUSH
52104: LD_INT 0
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 1
52113: NEG
52114: PUSH
52115: LD_INT 1
52117: NEG
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52132: LD_ADDR_VAR 0 63
52136: PUSH
52137: LD_INT 0
52139: PUSH
52140: LD_INT 0
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 0
52149: PUSH
52150: LD_INT 1
52152: NEG
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 1
52160: PUSH
52161: LD_INT 0
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 1
52170: PUSH
52171: LD_INT 1
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 0
52180: PUSH
52181: LD_INT 1
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 1
52190: NEG
52191: PUSH
52192: LD_INT 0
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 1
52201: NEG
52202: PUSH
52203: LD_INT 1
52205: NEG
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52220: LD_ADDR_VAR 0 64
52224: PUSH
52225: LD_INT 0
52227: PUSH
52228: LD_INT 0
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 0
52237: PUSH
52238: LD_INT 1
52240: NEG
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 1
52248: PUSH
52249: LD_INT 0
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 1
52258: PUSH
52259: LD_INT 1
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 0
52268: PUSH
52269: LD_INT 1
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 1
52278: NEG
52279: PUSH
52280: LD_INT 0
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 1
52289: NEG
52290: PUSH
52291: LD_INT 1
52293: NEG
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: ST_TO_ADDR
// end ; 1 :
52308: GO 58205
52310: LD_INT 1
52312: DOUBLE
52313: EQUAL
52314: IFTRUE 52318
52316: GO 54941
52318: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52319: LD_ADDR_VAR 0 11
52323: PUSH
52324: LD_INT 1
52326: NEG
52327: PUSH
52328: LD_INT 3
52330: NEG
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 0
52338: PUSH
52339: LD_INT 3
52341: NEG
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 1
52349: PUSH
52350: LD_INT 2
52352: NEG
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: LIST
52362: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52363: LD_ADDR_VAR 0 12
52367: PUSH
52368: LD_INT 2
52370: PUSH
52371: LD_INT 1
52373: NEG
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 3
52381: PUSH
52382: LD_INT 0
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 3
52391: PUSH
52392: LD_INT 1
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: LIST
52403: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52404: LD_ADDR_VAR 0 13
52408: PUSH
52409: LD_INT 3
52411: PUSH
52412: LD_INT 2
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 3
52421: PUSH
52422: LD_INT 3
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 2
52431: PUSH
52432: LD_INT 3
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: LIST
52443: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52444: LD_ADDR_VAR 0 14
52448: PUSH
52449: LD_INT 1
52451: PUSH
52452: LD_INT 3
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: LD_INT 3
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 1
52471: NEG
52472: PUSH
52473: LD_INT 2
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: LIST
52484: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52485: LD_ADDR_VAR 0 15
52489: PUSH
52490: LD_INT 2
52492: NEG
52493: PUSH
52494: LD_INT 1
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 3
52503: NEG
52504: PUSH
52505: LD_INT 0
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 3
52514: NEG
52515: PUSH
52516: LD_INT 1
52518: NEG
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: LIST
52528: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52529: LD_ADDR_VAR 0 16
52533: PUSH
52534: LD_INT 2
52536: NEG
52537: PUSH
52538: LD_INT 3
52540: NEG
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 3
52548: NEG
52549: PUSH
52550: LD_INT 2
52552: NEG
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 3
52560: NEG
52561: PUSH
52562: LD_INT 3
52564: NEG
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: LIST
52574: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52575: LD_ADDR_VAR 0 17
52579: PUSH
52580: LD_INT 1
52582: NEG
52583: PUSH
52584: LD_INT 3
52586: NEG
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 0
52594: PUSH
52595: LD_INT 3
52597: NEG
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 1
52605: PUSH
52606: LD_INT 2
52608: NEG
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: LIST
52618: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52619: LD_ADDR_VAR 0 18
52623: PUSH
52624: LD_INT 2
52626: PUSH
52627: LD_INT 1
52629: NEG
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 3
52637: PUSH
52638: LD_INT 0
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 3
52647: PUSH
52648: LD_INT 1
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: LIST
52659: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52660: LD_ADDR_VAR 0 19
52664: PUSH
52665: LD_INT 3
52667: PUSH
52668: LD_INT 2
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 3
52677: PUSH
52678: LD_INT 3
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 2
52687: PUSH
52688: LD_INT 3
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: LIST
52699: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52700: LD_ADDR_VAR 0 20
52704: PUSH
52705: LD_INT 1
52707: PUSH
52708: LD_INT 3
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 0
52717: PUSH
52718: LD_INT 3
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 1
52727: NEG
52728: PUSH
52729: LD_INT 2
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: LIST
52740: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52741: LD_ADDR_VAR 0 21
52745: PUSH
52746: LD_INT 2
52748: NEG
52749: PUSH
52750: LD_INT 1
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 3
52759: NEG
52760: PUSH
52761: LD_INT 0
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 3
52770: NEG
52771: PUSH
52772: LD_INT 1
52774: NEG
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: LIST
52784: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52785: LD_ADDR_VAR 0 22
52789: PUSH
52790: LD_INT 2
52792: NEG
52793: PUSH
52794: LD_INT 3
52796: NEG
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 3
52804: NEG
52805: PUSH
52806: LD_INT 2
52808: NEG
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 3
52816: NEG
52817: PUSH
52818: LD_INT 3
52820: NEG
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: LIST
52830: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52831: LD_ADDR_VAR 0 23
52835: PUSH
52836: LD_INT 0
52838: PUSH
52839: LD_INT 3
52841: NEG
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 1
52849: NEG
52850: PUSH
52851: LD_INT 4
52853: NEG
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 1
52861: PUSH
52862: LD_INT 3
52864: NEG
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: LIST
52874: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52875: LD_ADDR_VAR 0 24
52879: PUSH
52880: LD_INT 3
52882: PUSH
52883: LD_INT 0
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 3
52892: PUSH
52893: LD_INT 1
52895: NEG
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 4
52903: PUSH
52904: LD_INT 1
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: LIST
52915: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52916: LD_ADDR_VAR 0 25
52920: PUSH
52921: LD_INT 3
52923: PUSH
52924: LD_INT 3
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 4
52933: PUSH
52934: LD_INT 3
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 3
52943: PUSH
52944: LD_INT 4
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: LIST
52955: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52956: LD_ADDR_VAR 0 26
52960: PUSH
52961: LD_INT 0
52963: PUSH
52964: LD_INT 3
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 1
52973: PUSH
52974: LD_INT 4
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 1
52983: NEG
52984: PUSH
52985: LD_INT 3
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: LIST
52996: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52997: LD_ADDR_VAR 0 27
53001: PUSH
53002: LD_INT 3
53004: NEG
53005: PUSH
53006: LD_INT 0
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 3
53015: NEG
53016: PUSH
53017: LD_INT 1
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 4
53026: NEG
53027: PUSH
53028: LD_INT 1
53030: NEG
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: LIST
53040: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53041: LD_ADDR_VAR 0 28
53045: PUSH
53046: LD_INT 3
53048: NEG
53049: PUSH
53050: LD_INT 3
53052: NEG
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 3
53060: NEG
53061: PUSH
53062: LD_INT 4
53064: NEG
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 4
53072: NEG
53073: PUSH
53074: LD_INT 3
53076: NEG
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: LIST
53086: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53087: LD_ADDR_VAR 0 29
53091: PUSH
53092: LD_INT 1
53094: NEG
53095: PUSH
53096: LD_INT 3
53098: NEG
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 0
53106: PUSH
53107: LD_INT 3
53109: NEG
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: LD_INT 2
53120: NEG
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 1
53128: NEG
53129: PUSH
53130: LD_INT 4
53132: NEG
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 0
53140: PUSH
53141: LD_INT 4
53143: NEG
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 1
53151: PUSH
53152: LD_INT 3
53154: NEG
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 1
53162: NEG
53163: PUSH
53164: LD_INT 5
53166: NEG
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 0
53174: PUSH
53175: LD_INT 5
53177: NEG
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 1
53185: PUSH
53186: LD_INT 4
53188: NEG
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 1
53196: NEG
53197: PUSH
53198: LD_INT 6
53200: NEG
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 0
53208: PUSH
53209: LD_INT 6
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 1
53219: PUSH
53220: LD_INT 5
53222: NEG
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53242: LD_ADDR_VAR 0 30
53246: PUSH
53247: LD_INT 2
53249: PUSH
53250: LD_INT 1
53252: NEG
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 3
53260: PUSH
53261: LD_INT 0
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 3
53270: PUSH
53271: LD_INT 1
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 3
53280: PUSH
53281: LD_INT 1
53283: NEG
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 4
53291: PUSH
53292: LD_INT 0
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 4
53301: PUSH
53302: LD_INT 1
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 4
53311: PUSH
53312: LD_INT 1
53314: NEG
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 5
53322: PUSH
53323: LD_INT 0
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 5
53332: PUSH
53333: LD_INT 1
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 5
53342: PUSH
53343: LD_INT 1
53345: NEG
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 6
53353: PUSH
53354: LD_INT 0
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 6
53363: PUSH
53364: LD_INT 1
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53385: LD_ADDR_VAR 0 31
53389: PUSH
53390: LD_INT 3
53392: PUSH
53393: LD_INT 2
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 3
53402: PUSH
53403: LD_INT 3
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 2
53412: PUSH
53413: LD_INT 3
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 4
53422: PUSH
53423: LD_INT 3
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 4
53432: PUSH
53433: LD_INT 4
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 3
53442: PUSH
53443: LD_INT 4
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 5
53452: PUSH
53453: LD_INT 4
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 5
53462: PUSH
53463: LD_INT 5
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 4
53472: PUSH
53473: LD_INT 5
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 6
53482: PUSH
53483: LD_INT 5
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 6
53492: PUSH
53493: LD_INT 6
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 5
53502: PUSH
53503: LD_INT 6
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53524: LD_ADDR_VAR 0 32
53528: PUSH
53529: LD_INT 1
53531: PUSH
53532: LD_INT 3
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 0
53541: PUSH
53542: LD_INT 3
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 1
53551: NEG
53552: PUSH
53553: LD_INT 2
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 1
53562: PUSH
53563: LD_INT 4
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 0
53572: PUSH
53573: LD_INT 4
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 1
53582: NEG
53583: PUSH
53584: LD_INT 3
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 1
53593: PUSH
53594: LD_INT 5
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 0
53603: PUSH
53604: LD_INT 5
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 1
53613: NEG
53614: PUSH
53615: LD_INT 4
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 1
53624: PUSH
53625: LD_INT 6
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: LD_INT 6
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 1
53644: NEG
53645: PUSH
53646: LD_INT 5
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53667: LD_ADDR_VAR 0 33
53671: PUSH
53672: LD_INT 2
53674: NEG
53675: PUSH
53676: LD_INT 1
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 3
53685: NEG
53686: PUSH
53687: LD_INT 0
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 3
53696: NEG
53697: PUSH
53698: LD_INT 1
53700: NEG
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 3
53708: NEG
53709: PUSH
53710: LD_INT 1
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 4
53719: NEG
53720: PUSH
53721: LD_INT 0
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 4
53730: NEG
53731: PUSH
53732: LD_INT 1
53734: NEG
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 4
53742: NEG
53743: PUSH
53744: LD_INT 1
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 5
53753: NEG
53754: PUSH
53755: LD_INT 0
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 5
53764: NEG
53765: PUSH
53766: LD_INT 1
53768: NEG
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 5
53776: NEG
53777: PUSH
53778: LD_INT 1
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 6
53787: NEG
53788: PUSH
53789: LD_INT 0
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 6
53798: NEG
53799: PUSH
53800: LD_INT 1
53802: NEG
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53822: LD_ADDR_VAR 0 34
53826: PUSH
53827: LD_INT 2
53829: NEG
53830: PUSH
53831: LD_INT 3
53833: NEG
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 3
53841: NEG
53842: PUSH
53843: LD_INT 2
53845: NEG
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 3
53853: NEG
53854: PUSH
53855: LD_INT 3
53857: NEG
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 3
53865: NEG
53866: PUSH
53867: LD_INT 4
53869: NEG
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 4
53877: NEG
53878: PUSH
53879: LD_INT 3
53881: NEG
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 4
53889: NEG
53890: PUSH
53891: LD_INT 4
53893: NEG
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 4
53901: NEG
53902: PUSH
53903: LD_INT 5
53905: NEG
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 5
53913: NEG
53914: PUSH
53915: LD_INT 4
53917: NEG
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 5
53925: NEG
53926: PUSH
53927: LD_INT 5
53929: NEG
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 5
53937: NEG
53938: PUSH
53939: LD_INT 6
53941: NEG
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 6
53949: NEG
53950: PUSH
53951: LD_INT 5
53953: NEG
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 6
53961: NEG
53962: PUSH
53963: LD_INT 6
53965: NEG
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53985: LD_ADDR_VAR 0 41
53989: PUSH
53990: LD_INT 0
53992: PUSH
53993: LD_INT 2
53995: NEG
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 1
54003: NEG
54004: PUSH
54005: LD_INT 3
54007: NEG
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 1
54015: PUSH
54016: LD_INT 2
54018: NEG
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: LIST
54028: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54029: LD_ADDR_VAR 0 42
54033: PUSH
54034: LD_INT 2
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 2
54046: PUSH
54047: LD_INT 1
54049: NEG
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 3
54057: PUSH
54058: LD_INT 1
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: LIST
54069: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54070: LD_ADDR_VAR 0 43
54074: PUSH
54075: LD_INT 2
54077: PUSH
54078: LD_INT 2
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 3
54087: PUSH
54088: LD_INT 2
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 2
54097: PUSH
54098: LD_INT 3
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: LIST
54109: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54110: LD_ADDR_VAR 0 44
54114: PUSH
54115: LD_INT 0
54117: PUSH
54118: LD_INT 2
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 1
54127: PUSH
54128: LD_INT 3
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 1
54137: NEG
54138: PUSH
54139: LD_INT 2
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: LIST
54150: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54151: LD_ADDR_VAR 0 45
54155: PUSH
54156: LD_INT 2
54158: NEG
54159: PUSH
54160: LD_INT 0
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 2
54169: NEG
54170: PUSH
54171: LD_INT 1
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 3
54180: NEG
54181: PUSH
54182: LD_INT 1
54184: NEG
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: LIST
54194: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54195: LD_ADDR_VAR 0 46
54199: PUSH
54200: LD_INT 2
54202: NEG
54203: PUSH
54204: LD_INT 2
54206: NEG
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 2
54214: NEG
54215: PUSH
54216: LD_INT 3
54218: NEG
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 3
54226: NEG
54227: PUSH
54228: LD_INT 2
54230: NEG
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: LIST
54240: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54241: LD_ADDR_VAR 0 47
54245: PUSH
54246: LD_INT 2
54248: NEG
54249: PUSH
54250: LD_INT 3
54252: NEG
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 1
54260: NEG
54261: PUSH
54262: LD_INT 3
54264: NEG
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54274: LD_ADDR_VAR 0 48
54278: PUSH
54279: LD_INT 1
54281: PUSH
54282: LD_INT 2
54284: NEG
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 2
54292: PUSH
54293: LD_INT 1
54295: NEG
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54305: LD_ADDR_VAR 0 49
54309: PUSH
54310: LD_INT 3
54312: PUSH
54313: LD_INT 1
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 3
54322: PUSH
54323: LD_INT 2
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54334: LD_ADDR_VAR 0 50
54338: PUSH
54339: LD_INT 2
54341: PUSH
54342: LD_INT 3
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 1
54351: PUSH
54352: LD_INT 3
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54363: LD_ADDR_VAR 0 51
54367: PUSH
54368: LD_INT 1
54370: NEG
54371: PUSH
54372: LD_INT 2
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 2
54381: NEG
54382: PUSH
54383: LD_INT 1
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54394: LD_ADDR_VAR 0 52
54398: PUSH
54399: LD_INT 3
54401: NEG
54402: PUSH
54403: LD_INT 1
54405: NEG
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 3
54413: NEG
54414: PUSH
54415: LD_INT 2
54417: NEG
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54427: LD_ADDR_VAR 0 53
54431: PUSH
54432: LD_INT 1
54434: NEG
54435: PUSH
54436: LD_INT 3
54438: NEG
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 0
54446: PUSH
54447: LD_INT 3
54449: NEG
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 1
54457: PUSH
54458: LD_INT 2
54460: NEG
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: LIST
54470: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54471: LD_ADDR_VAR 0 54
54475: PUSH
54476: LD_INT 2
54478: PUSH
54479: LD_INT 1
54481: NEG
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 3
54489: PUSH
54490: LD_INT 0
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 3
54499: PUSH
54500: LD_INT 1
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: LIST
54511: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54512: LD_ADDR_VAR 0 55
54516: PUSH
54517: LD_INT 3
54519: PUSH
54520: LD_INT 2
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 3
54529: PUSH
54530: LD_INT 3
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 2
54539: PUSH
54540: LD_INT 3
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: LIST
54551: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54552: LD_ADDR_VAR 0 56
54556: PUSH
54557: LD_INT 1
54559: PUSH
54560: LD_INT 3
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 0
54569: PUSH
54570: LD_INT 3
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 1
54579: NEG
54580: PUSH
54581: LD_INT 2
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: LIST
54592: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54593: LD_ADDR_VAR 0 57
54597: PUSH
54598: LD_INT 2
54600: NEG
54601: PUSH
54602: LD_INT 1
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 3
54611: NEG
54612: PUSH
54613: LD_INT 0
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 3
54622: NEG
54623: PUSH
54624: LD_INT 1
54626: NEG
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: LIST
54636: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54637: LD_ADDR_VAR 0 58
54641: PUSH
54642: LD_INT 2
54644: NEG
54645: PUSH
54646: LD_INT 3
54648: NEG
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 3
54656: NEG
54657: PUSH
54658: LD_INT 2
54660: NEG
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 3
54668: NEG
54669: PUSH
54670: LD_INT 3
54672: NEG
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: LIST
54682: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54683: LD_ADDR_VAR 0 59
54687: PUSH
54688: LD_INT 1
54690: NEG
54691: PUSH
54692: LD_INT 2
54694: NEG
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 0
54702: PUSH
54703: LD_INT 2
54705: NEG
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 1
54713: PUSH
54714: LD_INT 1
54716: NEG
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: LIST
54726: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54727: LD_ADDR_VAR 0 60
54731: PUSH
54732: LD_INT 1
54734: PUSH
54735: LD_INT 1
54737: NEG
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 2
54745: PUSH
54746: LD_INT 0
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 2
54755: PUSH
54756: LD_INT 1
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: LIST
54767: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54768: LD_ADDR_VAR 0 61
54772: PUSH
54773: LD_INT 2
54775: PUSH
54776: LD_INT 1
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 2
54785: PUSH
54786: LD_INT 2
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 1
54795: PUSH
54796: LD_INT 2
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: LIST
54807: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54808: LD_ADDR_VAR 0 62
54812: PUSH
54813: LD_INT 1
54815: PUSH
54816: LD_INT 2
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: LD_INT 2
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 1
54835: NEG
54836: PUSH
54837: LD_INT 1
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: LIST
54848: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54849: LD_ADDR_VAR 0 63
54853: PUSH
54854: LD_INT 1
54856: NEG
54857: PUSH
54858: LD_INT 1
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 2
54867: NEG
54868: PUSH
54869: LD_INT 0
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 2
54878: NEG
54879: PUSH
54880: LD_INT 1
54882: NEG
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: LIST
54892: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54893: LD_ADDR_VAR 0 64
54897: PUSH
54898: LD_INT 1
54900: NEG
54901: PUSH
54902: LD_INT 2
54904: NEG
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 2
54912: NEG
54913: PUSH
54914: LD_INT 1
54916: NEG
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 2
54924: NEG
54925: PUSH
54926: LD_INT 2
54928: NEG
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: LIST
54938: ST_TO_ADDR
// end ; 2 :
54939: GO 58205
54941: LD_INT 2
54943: DOUBLE
54944: EQUAL
54945: IFTRUE 54949
54947: GO 58204
54949: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54950: LD_ADDR_VAR 0 29
54954: PUSH
54955: LD_INT 4
54957: PUSH
54958: LD_INT 0
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 4
54967: PUSH
54968: LD_INT 1
54970: NEG
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 5
54978: PUSH
54979: LD_INT 0
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 5
54988: PUSH
54989: LD_INT 1
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 4
54998: PUSH
54999: LD_INT 1
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 3
55008: PUSH
55009: LD_INT 0
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 3
55018: PUSH
55019: LD_INT 1
55021: NEG
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 3
55029: PUSH
55030: LD_INT 2
55032: NEG
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 5
55040: PUSH
55041: LD_INT 2
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 3
55050: PUSH
55051: LD_INT 3
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 3
55060: PUSH
55061: LD_INT 2
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 4
55070: PUSH
55071: LD_INT 3
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 4
55080: PUSH
55081: LD_INT 4
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 3
55090: PUSH
55091: LD_INT 4
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 2
55100: PUSH
55101: LD_INT 3
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 2
55110: PUSH
55111: LD_INT 2
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 4
55120: PUSH
55121: LD_INT 2
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 2
55130: PUSH
55131: LD_INT 4
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 0
55140: PUSH
55141: LD_INT 4
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 0
55150: PUSH
55151: LD_INT 3
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 1
55160: PUSH
55161: LD_INT 4
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 1
55170: PUSH
55171: LD_INT 5
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: LD_INT 5
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 1
55190: NEG
55191: PUSH
55192: LD_INT 4
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 1
55201: NEG
55202: PUSH
55203: LD_INT 3
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 2
55212: PUSH
55213: LD_INT 5
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 2
55222: NEG
55223: PUSH
55224: LD_INT 3
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 3
55233: NEG
55234: PUSH
55235: LD_INT 0
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 3
55244: NEG
55245: PUSH
55246: LD_INT 1
55248: NEG
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 2
55256: NEG
55257: PUSH
55258: LD_INT 0
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 2
55267: NEG
55268: PUSH
55269: LD_INT 1
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 3
55278: NEG
55279: PUSH
55280: LD_INT 1
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 4
55289: NEG
55290: PUSH
55291: LD_INT 0
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 4
55300: NEG
55301: PUSH
55302: LD_INT 1
55304: NEG
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 4
55312: NEG
55313: PUSH
55314: LD_INT 2
55316: NEG
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 2
55324: NEG
55325: PUSH
55326: LD_INT 2
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 4
55335: NEG
55336: PUSH
55337: LD_INT 4
55339: NEG
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 4
55347: NEG
55348: PUSH
55349: LD_INT 5
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 3
55359: NEG
55360: PUSH
55361: LD_INT 4
55363: NEG
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 3
55371: NEG
55372: PUSH
55373: LD_INT 3
55375: NEG
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 4
55383: NEG
55384: PUSH
55385: LD_INT 3
55387: NEG
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 5
55395: NEG
55396: PUSH
55397: LD_INT 4
55399: NEG
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 5
55407: NEG
55408: PUSH
55409: LD_INT 5
55411: NEG
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 3
55419: NEG
55420: PUSH
55421: LD_INT 5
55423: NEG
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 5
55431: NEG
55432: PUSH
55433: LD_INT 3
55435: NEG
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55488: LD_ADDR_VAR 0 30
55492: PUSH
55493: LD_INT 4
55495: PUSH
55496: LD_INT 4
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 4
55505: PUSH
55506: LD_INT 3
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 5
55515: PUSH
55516: LD_INT 4
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 5
55525: PUSH
55526: LD_INT 5
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 4
55535: PUSH
55536: LD_INT 5
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 3
55545: PUSH
55546: LD_INT 4
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 3
55555: PUSH
55556: LD_INT 3
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 5
55565: PUSH
55566: LD_INT 3
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 3
55575: PUSH
55576: LD_INT 5
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 0
55585: PUSH
55586: LD_INT 3
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 0
55595: PUSH
55596: LD_INT 2
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 1
55605: PUSH
55606: LD_INT 3
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 1
55615: PUSH
55616: LD_INT 4
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: LD_INT 4
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 1
55635: NEG
55636: PUSH
55637: LD_INT 3
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 1
55646: NEG
55647: PUSH
55648: LD_INT 2
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 2
55657: PUSH
55658: LD_INT 4
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 2
55667: NEG
55668: PUSH
55669: LD_INT 2
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 4
55678: NEG
55679: PUSH
55680: LD_INT 0
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 4
55689: NEG
55690: PUSH
55691: LD_INT 1
55693: NEG
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 3
55701: NEG
55702: PUSH
55703: LD_INT 0
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 3
55712: NEG
55713: PUSH
55714: LD_INT 1
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 4
55723: NEG
55724: PUSH
55725: LD_INT 1
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 5
55734: NEG
55735: PUSH
55736: LD_INT 0
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 5
55745: NEG
55746: PUSH
55747: LD_INT 1
55749: NEG
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 5
55757: NEG
55758: PUSH
55759: LD_INT 2
55761: NEG
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 3
55769: NEG
55770: PUSH
55771: LD_INT 2
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 3
55780: NEG
55781: PUSH
55782: LD_INT 3
55784: NEG
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 3
55792: NEG
55793: PUSH
55794: LD_INT 4
55796: NEG
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 2
55804: NEG
55805: PUSH
55806: LD_INT 3
55808: NEG
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 2
55816: NEG
55817: PUSH
55818: LD_INT 2
55820: NEG
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 3
55828: NEG
55829: PUSH
55830: LD_INT 2
55832: NEG
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 4
55840: NEG
55841: PUSH
55842: LD_INT 3
55844: NEG
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 4
55852: NEG
55853: PUSH
55854: LD_INT 4
55856: NEG
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 2
55864: NEG
55865: PUSH
55866: LD_INT 4
55868: NEG
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 4
55876: NEG
55877: PUSH
55878: LD_INT 2
55880: NEG
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 0
55888: PUSH
55889: LD_INT 4
55891: NEG
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: LD_INT 5
55902: NEG
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 1
55910: PUSH
55911: LD_INT 4
55913: NEG
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 1
55921: PUSH
55922: LD_INT 3
55924: NEG
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 0
55932: PUSH
55933: LD_INT 3
55935: NEG
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 1
55943: NEG
55944: PUSH
55945: LD_INT 4
55947: NEG
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 1
55955: NEG
55956: PUSH
55957: LD_INT 5
55959: NEG
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 2
55967: PUSH
55968: LD_INT 3
55970: NEG
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 2
55978: NEG
55979: PUSH
55980: LD_INT 5
55982: NEG
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56035: LD_ADDR_VAR 0 31
56039: PUSH
56040: LD_INT 0
56042: PUSH
56043: LD_INT 4
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 0
56052: PUSH
56053: LD_INT 3
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 1
56062: PUSH
56063: LD_INT 4
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 1
56072: PUSH
56073: LD_INT 5
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 0
56082: PUSH
56083: LD_INT 5
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 1
56092: NEG
56093: PUSH
56094: LD_INT 4
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 1
56103: NEG
56104: PUSH
56105: LD_INT 3
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 2
56114: PUSH
56115: LD_INT 5
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 2
56124: NEG
56125: PUSH
56126: LD_INT 3
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 3
56135: NEG
56136: PUSH
56137: LD_INT 0
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 3
56146: NEG
56147: PUSH
56148: LD_INT 1
56150: NEG
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 2
56158: NEG
56159: PUSH
56160: LD_INT 0
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 2
56169: NEG
56170: PUSH
56171: LD_INT 1
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 3
56180: NEG
56181: PUSH
56182: LD_INT 1
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 4
56191: NEG
56192: PUSH
56193: LD_INT 0
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 4
56202: NEG
56203: PUSH
56204: LD_INT 1
56206: NEG
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 4
56214: NEG
56215: PUSH
56216: LD_INT 2
56218: NEG
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 2
56226: NEG
56227: PUSH
56228: LD_INT 2
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 4
56237: NEG
56238: PUSH
56239: LD_INT 4
56241: NEG
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 4
56249: NEG
56250: PUSH
56251: LD_INT 5
56253: NEG
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 3
56261: NEG
56262: PUSH
56263: LD_INT 4
56265: NEG
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 3
56273: NEG
56274: PUSH
56275: LD_INT 3
56277: NEG
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 4
56285: NEG
56286: PUSH
56287: LD_INT 3
56289: NEG
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 5
56297: NEG
56298: PUSH
56299: LD_INT 4
56301: NEG
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 5
56309: NEG
56310: PUSH
56311: LD_INT 5
56313: NEG
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 3
56321: NEG
56322: PUSH
56323: LD_INT 5
56325: NEG
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 5
56333: NEG
56334: PUSH
56335: LD_INT 3
56337: NEG
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 0
56345: PUSH
56346: LD_INT 3
56348: NEG
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 0
56356: PUSH
56357: LD_INT 4
56359: NEG
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 1
56367: PUSH
56368: LD_INT 3
56370: NEG
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 1
56378: PUSH
56379: LD_INT 2
56381: NEG
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 0
56389: PUSH
56390: LD_INT 2
56392: NEG
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 1
56400: NEG
56401: PUSH
56402: LD_INT 3
56404: NEG
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 1
56412: NEG
56413: PUSH
56414: LD_INT 4
56416: NEG
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 2
56424: PUSH
56425: LD_INT 2
56427: NEG
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 2
56435: NEG
56436: PUSH
56437: LD_INT 4
56439: NEG
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 4
56447: PUSH
56448: LD_INT 0
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 4
56457: PUSH
56458: LD_INT 1
56460: NEG
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 5
56468: PUSH
56469: LD_INT 0
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 5
56478: PUSH
56479: LD_INT 1
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 4
56488: PUSH
56489: LD_INT 1
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 3
56498: PUSH
56499: LD_INT 0
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 3
56508: PUSH
56509: LD_INT 1
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 3
56519: PUSH
56520: LD_INT 2
56522: NEG
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 5
56530: PUSH
56531: LD_INT 2
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56585: LD_ADDR_VAR 0 32
56589: PUSH
56590: LD_INT 4
56592: NEG
56593: PUSH
56594: LD_INT 0
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 4
56603: NEG
56604: PUSH
56605: LD_INT 1
56607: NEG
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 3
56615: NEG
56616: PUSH
56617: LD_INT 0
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 3
56626: NEG
56627: PUSH
56628: LD_INT 1
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 4
56637: NEG
56638: PUSH
56639: LD_INT 1
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 5
56648: NEG
56649: PUSH
56650: LD_INT 0
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 5
56659: NEG
56660: PUSH
56661: LD_INT 1
56663: NEG
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 5
56671: NEG
56672: PUSH
56673: LD_INT 2
56675: NEG
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 3
56683: NEG
56684: PUSH
56685: LD_INT 2
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 3
56694: NEG
56695: PUSH
56696: LD_INT 3
56698: NEG
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 3
56706: NEG
56707: PUSH
56708: LD_INT 4
56710: NEG
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 2
56718: NEG
56719: PUSH
56720: LD_INT 3
56722: NEG
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 2
56730: NEG
56731: PUSH
56732: LD_INT 2
56734: NEG
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 3
56742: NEG
56743: PUSH
56744: LD_INT 2
56746: NEG
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 4
56754: NEG
56755: PUSH
56756: LD_INT 3
56758: NEG
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 4
56766: NEG
56767: PUSH
56768: LD_INT 4
56770: NEG
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 2
56778: NEG
56779: PUSH
56780: LD_INT 4
56782: NEG
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 4
56790: NEG
56791: PUSH
56792: LD_INT 2
56794: NEG
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 0
56802: PUSH
56803: LD_INT 4
56805: NEG
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 0
56813: PUSH
56814: LD_INT 5
56816: NEG
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 1
56824: PUSH
56825: LD_INT 4
56827: NEG
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 1
56835: PUSH
56836: LD_INT 3
56838: NEG
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 0
56846: PUSH
56847: LD_INT 3
56849: NEG
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 1
56857: NEG
56858: PUSH
56859: LD_INT 4
56861: NEG
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 1
56869: NEG
56870: PUSH
56871: LD_INT 5
56873: NEG
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 2
56881: PUSH
56882: LD_INT 3
56884: NEG
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 2
56892: NEG
56893: PUSH
56894: LD_INT 5
56896: NEG
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 3
56904: PUSH
56905: LD_INT 0
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 3
56914: PUSH
56915: LD_INT 1
56917: NEG
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 4
56925: PUSH
56926: LD_INT 0
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 4
56935: PUSH
56936: LD_INT 1
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 3
56945: PUSH
56946: LD_INT 1
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 2
56955: PUSH
56956: LD_INT 0
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 2
56965: PUSH
56966: LD_INT 1
56968: NEG
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 2
56976: PUSH
56977: LD_INT 2
56979: NEG
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 4
56987: PUSH
56988: LD_INT 2
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 4
56997: PUSH
56998: LD_INT 4
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 4
57007: PUSH
57008: LD_INT 3
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 5
57017: PUSH
57018: LD_INT 4
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 5
57027: PUSH
57028: LD_INT 5
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 4
57037: PUSH
57038: LD_INT 5
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 3
57047: PUSH
57048: LD_INT 4
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 3
57057: PUSH
57058: LD_INT 3
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 5
57067: PUSH
57068: LD_INT 3
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 3
57077: PUSH
57078: LD_INT 5
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57132: LD_ADDR_VAR 0 33
57136: PUSH
57137: LD_INT 4
57139: NEG
57140: PUSH
57141: LD_INT 4
57143: NEG
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 4
57151: NEG
57152: PUSH
57153: LD_INT 5
57155: NEG
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 3
57163: NEG
57164: PUSH
57165: LD_INT 4
57167: NEG
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 3
57175: NEG
57176: PUSH
57177: LD_INT 3
57179: NEG
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 4
57187: NEG
57188: PUSH
57189: LD_INT 3
57191: NEG
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 5
57199: NEG
57200: PUSH
57201: LD_INT 4
57203: NEG
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 5
57211: NEG
57212: PUSH
57213: LD_INT 5
57215: NEG
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 3
57223: NEG
57224: PUSH
57225: LD_INT 5
57227: NEG
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 5
57235: NEG
57236: PUSH
57237: LD_INT 3
57239: NEG
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 0
57247: PUSH
57248: LD_INT 3
57250: NEG
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 0
57258: PUSH
57259: LD_INT 4
57261: NEG
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 1
57269: PUSH
57270: LD_INT 3
57272: NEG
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 1
57280: PUSH
57281: LD_INT 2
57283: NEG
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 0
57291: PUSH
57292: LD_INT 2
57294: NEG
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 1
57302: NEG
57303: PUSH
57304: LD_INT 3
57306: NEG
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 1
57314: NEG
57315: PUSH
57316: LD_INT 4
57318: NEG
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 2
57326: PUSH
57327: LD_INT 2
57329: NEG
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 2
57337: NEG
57338: PUSH
57339: LD_INT 4
57341: NEG
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 4
57349: PUSH
57350: LD_INT 0
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 4
57359: PUSH
57360: LD_INT 1
57362: NEG
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 5
57370: PUSH
57371: LD_INT 0
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 5
57380: PUSH
57381: LD_INT 1
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 4
57390: PUSH
57391: LD_INT 1
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 3
57400: PUSH
57401: LD_INT 0
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 3
57410: PUSH
57411: LD_INT 1
57413: NEG
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 3
57421: PUSH
57422: LD_INT 2
57424: NEG
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 5
57432: PUSH
57433: LD_INT 2
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 3
57442: PUSH
57443: LD_INT 3
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 3
57452: PUSH
57453: LD_INT 2
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 4
57462: PUSH
57463: LD_INT 3
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 4
57472: PUSH
57473: LD_INT 4
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 3
57482: PUSH
57483: LD_INT 4
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 2
57492: PUSH
57493: LD_INT 3
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 2
57502: PUSH
57503: LD_INT 2
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 4
57512: PUSH
57513: LD_INT 2
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 2
57522: PUSH
57523: LD_INT 4
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 0
57532: PUSH
57533: LD_INT 4
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 0
57542: PUSH
57543: LD_INT 3
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 1
57552: PUSH
57553: LD_INT 4
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 1
57562: PUSH
57563: LD_INT 5
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 0
57572: PUSH
57573: LD_INT 5
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 1
57582: NEG
57583: PUSH
57584: LD_INT 4
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 1
57593: NEG
57594: PUSH
57595: LD_INT 3
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 2
57604: PUSH
57605: LD_INT 5
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 2
57614: NEG
57615: PUSH
57616: LD_INT 3
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57670: LD_ADDR_VAR 0 34
57674: PUSH
57675: LD_INT 0
57677: PUSH
57678: LD_INT 4
57680: NEG
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 0
57688: PUSH
57689: LD_INT 5
57691: NEG
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 1
57699: PUSH
57700: LD_INT 4
57702: NEG
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 1
57710: PUSH
57711: LD_INT 3
57713: NEG
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 0
57721: PUSH
57722: LD_INT 3
57724: NEG
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 1
57732: NEG
57733: PUSH
57734: LD_INT 4
57736: NEG
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 1
57744: NEG
57745: PUSH
57746: LD_INT 5
57748: NEG
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 2
57756: PUSH
57757: LD_INT 3
57759: NEG
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 2
57767: NEG
57768: PUSH
57769: LD_INT 5
57771: NEG
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 3
57779: PUSH
57780: LD_INT 0
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 3
57789: PUSH
57790: LD_INT 1
57792: NEG
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 4
57800: PUSH
57801: LD_INT 0
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 4
57810: PUSH
57811: LD_INT 1
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 3
57820: PUSH
57821: LD_INT 1
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 2
57830: PUSH
57831: LD_INT 0
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 2
57840: PUSH
57841: LD_INT 1
57843: NEG
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 2
57851: PUSH
57852: LD_INT 2
57854: NEG
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 4
57862: PUSH
57863: LD_INT 2
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 4
57872: PUSH
57873: LD_INT 4
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 4
57882: PUSH
57883: LD_INT 3
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 5
57892: PUSH
57893: LD_INT 4
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 5
57902: PUSH
57903: LD_INT 5
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 4
57912: PUSH
57913: LD_INT 5
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 3
57922: PUSH
57923: LD_INT 4
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 3
57932: PUSH
57933: LD_INT 3
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 5
57942: PUSH
57943: LD_INT 3
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 3
57952: PUSH
57953: LD_INT 5
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 0
57962: PUSH
57963: LD_INT 3
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 0
57972: PUSH
57973: LD_INT 2
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 1
57982: PUSH
57983: LD_INT 3
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 1
57992: PUSH
57993: LD_INT 4
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 0
58002: PUSH
58003: LD_INT 4
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 1
58012: NEG
58013: PUSH
58014: LD_INT 3
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 1
58023: NEG
58024: PUSH
58025: LD_INT 2
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 2
58034: PUSH
58035: LD_INT 4
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 2
58044: NEG
58045: PUSH
58046: LD_INT 2
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 4
58055: NEG
58056: PUSH
58057: LD_INT 0
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 4
58066: NEG
58067: PUSH
58068: LD_INT 1
58070: NEG
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 3
58078: NEG
58079: PUSH
58080: LD_INT 0
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 3
58089: NEG
58090: PUSH
58091: LD_INT 1
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 4
58100: NEG
58101: PUSH
58102: LD_INT 1
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 5
58111: NEG
58112: PUSH
58113: LD_INT 0
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 5
58122: NEG
58123: PUSH
58124: LD_INT 1
58126: NEG
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 5
58134: NEG
58135: PUSH
58136: LD_INT 2
58138: NEG
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 3
58146: NEG
58147: PUSH
58148: LD_INT 2
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: ST_TO_ADDR
// end ; end ;
58202: GO 58205
58204: POP
// case btype of b_depot , b_warehouse :
58205: LD_VAR 0 1
58209: PUSH
58210: LD_INT 0
58212: DOUBLE
58213: EQUAL
58214: IFTRUE 58224
58216: LD_INT 1
58218: DOUBLE
58219: EQUAL
58220: IFTRUE 58224
58222: GO 58425
58224: POP
// case nation of nation_american :
58225: LD_VAR 0 5
58229: PUSH
58230: LD_INT 1
58232: DOUBLE
58233: EQUAL
58234: IFTRUE 58238
58236: GO 58294
58238: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58239: LD_ADDR_VAR 0 9
58243: PUSH
58244: LD_VAR 0 11
58248: PUSH
58249: LD_VAR 0 12
58253: PUSH
58254: LD_VAR 0 13
58258: PUSH
58259: LD_VAR 0 14
58263: PUSH
58264: LD_VAR 0 15
58268: PUSH
58269: LD_VAR 0 16
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: PUSH
58282: LD_VAR 0 4
58286: PUSH
58287: LD_INT 1
58289: PLUS
58290: ARRAY
58291: ST_TO_ADDR
58292: GO 58423
58294: LD_INT 2
58296: DOUBLE
58297: EQUAL
58298: IFTRUE 58302
58300: GO 58358
58302: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58303: LD_ADDR_VAR 0 9
58307: PUSH
58308: LD_VAR 0 17
58312: PUSH
58313: LD_VAR 0 18
58317: PUSH
58318: LD_VAR 0 19
58322: PUSH
58323: LD_VAR 0 20
58327: PUSH
58328: LD_VAR 0 21
58332: PUSH
58333: LD_VAR 0 22
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: PUSH
58346: LD_VAR 0 4
58350: PUSH
58351: LD_INT 1
58353: PLUS
58354: ARRAY
58355: ST_TO_ADDR
58356: GO 58423
58358: LD_INT 3
58360: DOUBLE
58361: EQUAL
58362: IFTRUE 58366
58364: GO 58422
58366: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58367: LD_ADDR_VAR 0 9
58371: PUSH
58372: LD_VAR 0 23
58376: PUSH
58377: LD_VAR 0 24
58381: PUSH
58382: LD_VAR 0 25
58386: PUSH
58387: LD_VAR 0 26
58391: PUSH
58392: LD_VAR 0 27
58396: PUSH
58397: LD_VAR 0 28
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: PUSH
58410: LD_VAR 0 4
58414: PUSH
58415: LD_INT 1
58417: PLUS
58418: ARRAY
58419: ST_TO_ADDR
58420: GO 58423
58422: POP
58423: GO 58978
58425: LD_INT 2
58427: DOUBLE
58428: EQUAL
58429: IFTRUE 58439
58431: LD_INT 3
58433: DOUBLE
58434: EQUAL
58435: IFTRUE 58439
58437: GO 58495
58439: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58440: LD_ADDR_VAR 0 9
58444: PUSH
58445: LD_VAR 0 29
58449: PUSH
58450: LD_VAR 0 30
58454: PUSH
58455: LD_VAR 0 31
58459: PUSH
58460: LD_VAR 0 32
58464: PUSH
58465: LD_VAR 0 33
58469: PUSH
58470: LD_VAR 0 34
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: PUSH
58483: LD_VAR 0 4
58487: PUSH
58488: LD_INT 1
58490: PLUS
58491: ARRAY
58492: ST_TO_ADDR
58493: GO 58978
58495: LD_INT 16
58497: DOUBLE
58498: EQUAL
58499: IFTRUE 58557
58501: LD_INT 17
58503: DOUBLE
58504: EQUAL
58505: IFTRUE 58557
58507: LD_INT 18
58509: DOUBLE
58510: EQUAL
58511: IFTRUE 58557
58513: LD_INT 19
58515: DOUBLE
58516: EQUAL
58517: IFTRUE 58557
58519: LD_INT 22
58521: DOUBLE
58522: EQUAL
58523: IFTRUE 58557
58525: LD_INT 20
58527: DOUBLE
58528: EQUAL
58529: IFTRUE 58557
58531: LD_INT 21
58533: DOUBLE
58534: EQUAL
58535: IFTRUE 58557
58537: LD_INT 23
58539: DOUBLE
58540: EQUAL
58541: IFTRUE 58557
58543: LD_INT 24
58545: DOUBLE
58546: EQUAL
58547: IFTRUE 58557
58549: LD_INT 25
58551: DOUBLE
58552: EQUAL
58553: IFTRUE 58557
58555: GO 58613
58557: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58558: LD_ADDR_VAR 0 9
58562: PUSH
58563: LD_VAR 0 35
58567: PUSH
58568: LD_VAR 0 36
58572: PUSH
58573: LD_VAR 0 37
58577: PUSH
58578: LD_VAR 0 38
58582: PUSH
58583: LD_VAR 0 39
58587: PUSH
58588: LD_VAR 0 40
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: PUSH
58601: LD_VAR 0 4
58605: PUSH
58606: LD_INT 1
58608: PLUS
58609: ARRAY
58610: ST_TO_ADDR
58611: GO 58978
58613: LD_INT 6
58615: DOUBLE
58616: EQUAL
58617: IFTRUE 58669
58619: LD_INT 7
58621: DOUBLE
58622: EQUAL
58623: IFTRUE 58669
58625: LD_INT 8
58627: DOUBLE
58628: EQUAL
58629: IFTRUE 58669
58631: LD_INT 13
58633: DOUBLE
58634: EQUAL
58635: IFTRUE 58669
58637: LD_INT 12
58639: DOUBLE
58640: EQUAL
58641: IFTRUE 58669
58643: LD_INT 15
58645: DOUBLE
58646: EQUAL
58647: IFTRUE 58669
58649: LD_INT 11
58651: DOUBLE
58652: EQUAL
58653: IFTRUE 58669
58655: LD_INT 14
58657: DOUBLE
58658: EQUAL
58659: IFTRUE 58669
58661: LD_INT 10
58663: DOUBLE
58664: EQUAL
58665: IFTRUE 58669
58667: GO 58725
58669: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58670: LD_ADDR_VAR 0 9
58674: PUSH
58675: LD_VAR 0 41
58679: PUSH
58680: LD_VAR 0 42
58684: PUSH
58685: LD_VAR 0 43
58689: PUSH
58690: LD_VAR 0 44
58694: PUSH
58695: LD_VAR 0 45
58699: PUSH
58700: LD_VAR 0 46
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: PUSH
58713: LD_VAR 0 4
58717: PUSH
58718: LD_INT 1
58720: PLUS
58721: ARRAY
58722: ST_TO_ADDR
58723: GO 58978
58725: LD_INT 36
58727: DOUBLE
58728: EQUAL
58729: IFTRUE 58733
58731: GO 58789
58733: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58734: LD_ADDR_VAR 0 9
58738: PUSH
58739: LD_VAR 0 47
58743: PUSH
58744: LD_VAR 0 48
58748: PUSH
58749: LD_VAR 0 49
58753: PUSH
58754: LD_VAR 0 50
58758: PUSH
58759: LD_VAR 0 51
58763: PUSH
58764: LD_VAR 0 52
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: PUSH
58777: LD_VAR 0 4
58781: PUSH
58782: LD_INT 1
58784: PLUS
58785: ARRAY
58786: ST_TO_ADDR
58787: GO 58978
58789: LD_INT 4
58791: DOUBLE
58792: EQUAL
58793: IFTRUE 58815
58795: LD_INT 5
58797: DOUBLE
58798: EQUAL
58799: IFTRUE 58815
58801: LD_INT 34
58803: DOUBLE
58804: EQUAL
58805: IFTRUE 58815
58807: LD_INT 37
58809: DOUBLE
58810: EQUAL
58811: IFTRUE 58815
58813: GO 58871
58815: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58816: LD_ADDR_VAR 0 9
58820: PUSH
58821: LD_VAR 0 53
58825: PUSH
58826: LD_VAR 0 54
58830: PUSH
58831: LD_VAR 0 55
58835: PUSH
58836: LD_VAR 0 56
58840: PUSH
58841: LD_VAR 0 57
58845: PUSH
58846: LD_VAR 0 58
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: PUSH
58859: LD_VAR 0 4
58863: PUSH
58864: LD_INT 1
58866: PLUS
58867: ARRAY
58868: ST_TO_ADDR
58869: GO 58978
58871: LD_INT 31
58873: DOUBLE
58874: EQUAL
58875: IFTRUE 58921
58877: LD_INT 32
58879: DOUBLE
58880: EQUAL
58881: IFTRUE 58921
58883: LD_INT 33
58885: DOUBLE
58886: EQUAL
58887: IFTRUE 58921
58889: LD_INT 27
58891: DOUBLE
58892: EQUAL
58893: IFTRUE 58921
58895: LD_INT 26
58897: DOUBLE
58898: EQUAL
58899: IFTRUE 58921
58901: LD_INT 28
58903: DOUBLE
58904: EQUAL
58905: IFTRUE 58921
58907: LD_INT 29
58909: DOUBLE
58910: EQUAL
58911: IFTRUE 58921
58913: LD_INT 30
58915: DOUBLE
58916: EQUAL
58917: IFTRUE 58921
58919: GO 58977
58921: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58922: LD_ADDR_VAR 0 9
58926: PUSH
58927: LD_VAR 0 59
58931: PUSH
58932: LD_VAR 0 60
58936: PUSH
58937: LD_VAR 0 61
58941: PUSH
58942: LD_VAR 0 62
58946: PUSH
58947: LD_VAR 0 63
58951: PUSH
58952: LD_VAR 0 64
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: PUSH
58965: LD_VAR 0 4
58969: PUSH
58970: LD_INT 1
58972: PLUS
58973: ARRAY
58974: ST_TO_ADDR
58975: GO 58978
58977: POP
// temp_list2 = [ ] ;
58978: LD_ADDR_VAR 0 10
58982: PUSH
58983: EMPTY
58984: ST_TO_ADDR
// for i in temp_list do
58985: LD_ADDR_VAR 0 8
58989: PUSH
58990: LD_VAR 0 9
58994: PUSH
58995: FOR_IN
58996: IFFALSE 59048
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58998: LD_ADDR_VAR 0 10
59002: PUSH
59003: LD_VAR 0 10
59007: PUSH
59008: LD_VAR 0 8
59012: PUSH
59013: LD_INT 1
59015: ARRAY
59016: PUSH
59017: LD_VAR 0 2
59021: PLUS
59022: PUSH
59023: LD_VAR 0 8
59027: PUSH
59028: LD_INT 2
59030: ARRAY
59031: PUSH
59032: LD_VAR 0 3
59036: PLUS
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: EMPTY
59043: LIST
59044: ADD
59045: ST_TO_ADDR
59046: GO 58995
59048: POP
59049: POP
// result = temp_list2 ;
59050: LD_ADDR_VAR 0 7
59054: PUSH
59055: LD_VAR 0 10
59059: ST_TO_ADDR
// end ;
59060: LD_VAR 0 7
59064: RET
// export function EnemyInRange ( unit , dist ) ; begin
59065: LD_INT 0
59067: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59068: LD_ADDR_VAR 0 3
59072: PUSH
59073: LD_VAR 0 1
59077: PPUSH
59078: CALL_OW 255
59082: PPUSH
59083: LD_VAR 0 1
59087: PPUSH
59088: CALL_OW 250
59092: PPUSH
59093: LD_VAR 0 1
59097: PPUSH
59098: CALL_OW 251
59102: PPUSH
59103: LD_VAR 0 2
59107: PPUSH
59108: CALL 32438 0 4
59112: PUSH
59113: LD_INT 4
59115: ARRAY
59116: ST_TO_ADDR
// end ;
59117: LD_VAR 0 3
59121: RET
// export function PlayerSeeMe ( unit ) ; begin
59122: LD_INT 0
59124: PPUSH
// result := See ( your_side , unit ) ;
59125: LD_ADDR_VAR 0 2
59129: PUSH
59130: LD_OWVAR 2
59134: PPUSH
59135: LD_VAR 0 1
59139: PPUSH
59140: CALL_OW 292
59144: ST_TO_ADDR
// end ;
59145: LD_VAR 0 2
59149: RET
// export function ReverseDir ( unit ) ; begin
59150: LD_INT 0
59152: PPUSH
// if not unit then
59153: LD_VAR 0 1
59157: NOT
59158: IFFALSE 59162
// exit ;
59160: GO 59185
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59162: LD_ADDR_VAR 0 2
59166: PUSH
59167: LD_VAR 0 1
59171: PPUSH
59172: CALL_OW 254
59176: PUSH
59177: LD_INT 3
59179: PLUS
59180: PUSH
59181: LD_INT 6
59183: MOD
59184: ST_TO_ADDR
// end ;
59185: LD_VAR 0 2
59189: RET
// export function ReverseArray ( array ) ; var i ; begin
59190: LD_INT 0
59192: PPUSH
59193: PPUSH
// if not array then
59194: LD_VAR 0 1
59198: NOT
59199: IFFALSE 59203
// exit ;
59201: GO 59258
// result := [ ] ;
59203: LD_ADDR_VAR 0 2
59207: PUSH
59208: EMPTY
59209: ST_TO_ADDR
// for i := array downto 1 do
59210: LD_ADDR_VAR 0 3
59214: PUSH
59215: DOUBLE
59216: LD_VAR 0 1
59220: INC
59221: ST_TO_ADDR
59222: LD_INT 1
59224: PUSH
59225: FOR_DOWNTO
59226: IFFALSE 59256
// result := Join ( result , array [ i ] ) ;
59228: LD_ADDR_VAR 0 2
59232: PUSH
59233: LD_VAR 0 2
59237: PPUSH
59238: LD_VAR 0 1
59242: PUSH
59243: LD_VAR 0 3
59247: ARRAY
59248: PPUSH
59249: CALL 63903 0 2
59253: ST_TO_ADDR
59254: GO 59225
59256: POP
59257: POP
// end ;
59258: LD_VAR 0 2
59262: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
59263: LD_INT 0
59265: PPUSH
59266: PPUSH
59267: PPUSH
59268: PPUSH
59269: PPUSH
59270: PPUSH
// if not unit or not hexes then
59271: LD_VAR 0 1
59275: NOT
59276: PUSH
59277: LD_VAR 0 2
59281: NOT
59282: OR
59283: IFFALSE 59287
// exit ;
59285: GO 59410
// dist := 9999 ;
59287: LD_ADDR_VAR 0 5
59291: PUSH
59292: LD_INT 9999
59294: ST_TO_ADDR
// for i = 1 to hexes do
59295: LD_ADDR_VAR 0 4
59299: PUSH
59300: DOUBLE
59301: LD_INT 1
59303: DEC
59304: ST_TO_ADDR
59305: LD_VAR 0 2
59309: PUSH
59310: FOR_TO
59311: IFFALSE 59398
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59313: LD_ADDR_VAR 0 6
59317: PUSH
59318: LD_VAR 0 1
59322: PPUSH
59323: LD_VAR 0 2
59327: PUSH
59328: LD_VAR 0 4
59332: ARRAY
59333: PUSH
59334: LD_INT 1
59336: ARRAY
59337: PPUSH
59338: LD_VAR 0 2
59342: PUSH
59343: LD_VAR 0 4
59347: ARRAY
59348: PUSH
59349: LD_INT 2
59351: ARRAY
59352: PPUSH
59353: CALL_OW 297
59357: ST_TO_ADDR
// if tdist < dist then
59358: LD_VAR 0 6
59362: PUSH
59363: LD_VAR 0 5
59367: LESS
59368: IFFALSE 59396
// begin hex := hexes [ i ] ;
59370: LD_ADDR_VAR 0 8
59374: PUSH
59375: LD_VAR 0 2
59379: PUSH
59380: LD_VAR 0 4
59384: ARRAY
59385: ST_TO_ADDR
// dist := tdist ;
59386: LD_ADDR_VAR 0 5
59390: PUSH
59391: LD_VAR 0 6
59395: ST_TO_ADDR
// end ; end ;
59396: GO 59310
59398: POP
59399: POP
// result := hex ;
59400: LD_ADDR_VAR 0 3
59404: PUSH
59405: LD_VAR 0 8
59409: ST_TO_ADDR
// end ;
59410: LD_VAR 0 3
59414: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59415: LD_INT 0
59417: PPUSH
59418: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59419: LD_VAR 0 1
59423: NOT
59424: PUSH
59425: LD_VAR 0 1
59429: PUSH
59430: LD_INT 21
59432: PUSH
59433: LD_INT 2
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 23
59442: PUSH
59443: LD_INT 2
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PPUSH
59454: CALL_OW 69
59458: IN
59459: NOT
59460: OR
59461: IFFALSE 59465
// exit ;
59463: GO 59512
// for i = 1 to 3 do
59465: LD_ADDR_VAR 0 3
59469: PUSH
59470: DOUBLE
59471: LD_INT 1
59473: DEC
59474: ST_TO_ADDR
59475: LD_INT 3
59477: PUSH
59478: FOR_TO
59479: IFFALSE 59510
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59481: LD_VAR 0 1
59485: PPUSH
59486: CALL_OW 250
59490: PPUSH
59491: LD_VAR 0 1
59495: PPUSH
59496: CALL_OW 251
59500: PPUSH
59501: LD_INT 1
59503: PPUSH
59504: CALL_OW 453
59508: GO 59478
59510: POP
59511: POP
// end ;
59512: LD_VAR 0 2
59516: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59517: LD_INT 0
59519: PPUSH
59520: PPUSH
59521: PPUSH
59522: PPUSH
59523: PPUSH
59524: PPUSH
// if not unit or not enemy_unit then
59525: LD_VAR 0 1
59529: NOT
59530: PUSH
59531: LD_VAR 0 2
59535: NOT
59536: OR
59537: IFFALSE 59541
// exit ;
59539: GO 60008
// if GetLives ( i ) < 250 then
59541: LD_VAR 0 4
59545: PPUSH
59546: CALL_OW 256
59550: PUSH
59551: LD_INT 250
59553: LESS
59554: IFFALSE 59567
// begin ComAutodestruct ( i ) ;
59556: LD_VAR 0 4
59560: PPUSH
59561: CALL 59415 0 1
// exit ;
59565: GO 60008
// end ; x := GetX ( enemy_unit ) ;
59567: LD_ADDR_VAR 0 7
59571: PUSH
59572: LD_VAR 0 2
59576: PPUSH
59577: CALL_OW 250
59581: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59582: LD_ADDR_VAR 0 8
59586: PUSH
59587: LD_VAR 0 2
59591: PPUSH
59592: CALL_OW 251
59596: ST_TO_ADDR
// if not x or not y then
59597: LD_VAR 0 7
59601: NOT
59602: PUSH
59603: LD_VAR 0 8
59607: NOT
59608: OR
59609: IFFALSE 59613
// exit ;
59611: GO 60008
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59613: LD_ADDR_VAR 0 6
59617: PUSH
59618: LD_VAR 0 7
59622: PPUSH
59623: LD_INT 0
59625: PPUSH
59626: LD_INT 4
59628: PPUSH
59629: CALL_OW 272
59633: PUSH
59634: LD_VAR 0 8
59638: PPUSH
59639: LD_INT 0
59641: PPUSH
59642: LD_INT 4
59644: PPUSH
59645: CALL_OW 273
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_VAR 0 7
59658: PPUSH
59659: LD_INT 1
59661: PPUSH
59662: LD_INT 4
59664: PPUSH
59665: CALL_OW 272
59669: PUSH
59670: LD_VAR 0 8
59674: PPUSH
59675: LD_INT 1
59677: PPUSH
59678: LD_INT 4
59680: PPUSH
59681: CALL_OW 273
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_VAR 0 7
59694: PPUSH
59695: LD_INT 2
59697: PPUSH
59698: LD_INT 4
59700: PPUSH
59701: CALL_OW 272
59705: PUSH
59706: LD_VAR 0 8
59710: PPUSH
59711: LD_INT 2
59713: PPUSH
59714: LD_INT 4
59716: PPUSH
59717: CALL_OW 273
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_VAR 0 7
59730: PPUSH
59731: LD_INT 3
59733: PPUSH
59734: LD_INT 4
59736: PPUSH
59737: CALL_OW 272
59741: PUSH
59742: LD_VAR 0 8
59746: PPUSH
59747: LD_INT 3
59749: PPUSH
59750: LD_INT 4
59752: PPUSH
59753: CALL_OW 273
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_VAR 0 7
59766: PPUSH
59767: LD_INT 4
59769: PPUSH
59770: LD_INT 4
59772: PPUSH
59773: CALL_OW 272
59777: PUSH
59778: LD_VAR 0 8
59782: PPUSH
59783: LD_INT 4
59785: PPUSH
59786: LD_INT 4
59788: PPUSH
59789: CALL_OW 273
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_VAR 0 7
59802: PPUSH
59803: LD_INT 5
59805: PPUSH
59806: LD_INT 4
59808: PPUSH
59809: CALL_OW 272
59813: PUSH
59814: LD_VAR 0 8
59818: PPUSH
59819: LD_INT 5
59821: PPUSH
59822: LD_INT 4
59824: PPUSH
59825: CALL_OW 273
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: ST_TO_ADDR
// for i = tmp downto 1 do
59842: LD_ADDR_VAR 0 4
59846: PUSH
59847: DOUBLE
59848: LD_VAR 0 6
59852: INC
59853: ST_TO_ADDR
59854: LD_INT 1
59856: PUSH
59857: FOR_DOWNTO
59858: IFFALSE 59959
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59860: LD_VAR 0 6
59864: PUSH
59865: LD_VAR 0 4
59869: ARRAY
59870: PUSH
59871: LD_INT 1
59873: ARRAY
59874: PPUSH
59875: LD_VAR 0 6
59879: PUSH
59880: LD_VAR 0 4
59884: ARRAY
59885: PUSH
59886: LD_INT 2
59888: ARRAY
59889: PPUSH
59890: CALL_OW 488
59894: NOT
59895: PUSH
59896: LD_VAR 0 6
59900: PUSH
59901: LD_VAR 0 4
59905: ARRAY
59906: PUSH
59907: LD_INT 1
59909: ARRAY
59910: PPUSH
59911: LD_VAR 0 6
59915: PUSH
59916: LD_VAR 0 4
59920: ARRAY
59921: PUSH
59922: LD_INT 2
59924: ARRAY
59925: PPUSH
59926: CALL_OW 428
59930: PUSH
59931: LD_INT 0
59933: NONEQUAL
59934: OR
59935: IFFALSE 59957
// tmp := Delete ( tmp , i ) ;
59937: LD_ADDR_VAR 0 6
59941: PUSH
59942: LD_VAR 0 6
59946: PPUSH
59947: LD_VAR 0 4
59951: PPUSH
59952: CALL_OW 3
59956: ST_TO_ADDR
59957: GO 59857
59959: POP
59960: POP
// j := GetClosestHex ( unit , tmp ) ;
59961: LD_ADDR_VAR 0 5
59965: PUSH
59966: LD_VAR 0 1
59970: PPUSH
59971: LD_VAR 0 6
59975: PPUSH
59976: CALL 59263 0 2
59980: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59981: LD_VAR 0 1
59985: PPUSH
59986: LD_VAR 0 5
59990: PUSH
59991: LD_INT 1
59993: ARRAY
59994: PPUSH
59995: LD_VAR 0 5
59999: PUSH
60000: LD_INT 2
60002: ARRAY
60003: PPUSH
60004: CALL_OW 111
// end ;
60008: LD_VAR 0 3
60012: RET
// export function PrepareApemanSoldier ( ) ; begin
60013: LD_INT 0
60015: PPUSH
// uc_nation := 0 ;
60016: LD_ADDR_OWVAR 21
60020: PUSH
60021: LD_INT 0
60023: ST_TO_ADDR
// hc_sex := sex_male ;
60024: LD_ADDR_OWVAR 27
60028: PUSH
60029: LD_INT 1
60031: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60032: LD_ADDR_OWVAR 28
60036: PUSH
60037: LD_INT 15
60039: ST_TO_ADDR
// hc_gallery :=  ;
60040: LD_ADDR_OWVAR 33
60044: PUSH
60045: LD_STRING 
60047: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60048: LD_ADDR_OWVAR 31
60052: PUSH
60053: LD_INT 0
60055: PPUSH
60056: LD_INT 3
60058: PPUSH
60059: CALL_OW 12
60063: PUSH
60064: LD_INT 0
60066: PPUSH
60067: LD_INT 3
60069: PPUSH
60070: CALL_OW 12
60074: PUSH
60075: LD_INT 0
60077: PUSH
60078: LD_INT 0
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: ST_TO_ADDR
// end ;
60087: LD_VAR 0 1
60091: RET
// export function PrepareApemanEngineer ( ) ; begin
60092: LD_INT 0
60094: PPUSH
// uc_nation := 0 ;
60095: LD_ADDR_OWVAR 21
60099: PUSH
60100: LD_INT 0
60102: ST_TO_ADDR
// hc_sex := sex_male ;
60103: LD_ADDR_OWVAR 27
60107: PUSH
60108: LD_INT 1
60110: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60111: LD_ADDR_OWVAR 28
60115: PUSH
60116: LD_INT 16
60118: ST_TO_ADDR
// hc_gallery :=  ;
60119: LD_ADDR_OWVAR 33
60123: PUSH
60124: LD_STRING 
60126: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60127: LD_ADDR_OWVAR 31
60131: PUSH
60132: LD_INT 0
60134: PPUSH
60135: LD_INT 3
60137: PPUSH
60138: CALL_OW 12
60142: PUSH
60143: LD_INT 0
60145: PPUSH
60146: LD_INT 3
60148: PPUSH
60149: CALL_OW 12
60153: PUSH
60154: LD_INT 0
60156: PUSH
60157: LD_INT 0
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: ST_TO_ADDR
// end ;
60166: LD_VAR 0 1
60170: RET
// export function PrepareApeman ( agressivity ) ; begin
60171: LD_INT 0
60173: PPUSH
// uc_side := 0 ;
60174: LD_ADDR_OWVAR 20
60178: PUSH
60179: LD_INT 0
60181: ST_TO_ADDR
// uc_nation := 0 ;
60182: LD_ADDR_OWVAR 21
60186: PUSH
60187: LD_INT 0
60189: ST_TO_ADDR
// hc_sex := sex_male ;
60190: LD_ADDR_OWVAR 27
60194: PUSH
60195: LD_INT 1
60197: ST_TO_ADDR
// hc_class := class_apeman ;
60198: LD_ADDR_OWVAR 28
60202: PUSH
60203: LD_INT 12
60205: ST_TO_ADDR
// hc_gallery :=  ;
60206: LD_ADDR_OWVAR 33
60210: PUSH
60211: LD_STRING 
60213: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60214: LD_ADDR_OWVAR 35
60218: PUSH
60219: LD_VAR 0 1
60223: NEG
60224: PPUSH
60225: LD_VAR 0 1
60229: PPUSH
60230: CALL_OW 12
60234: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60235: LD_ADDR_OWVAR 31
60239: PUSH
60240: LD_INT 0
60242: PPUSH
60243: LD_INT 3
60245: PPUSH
60246: CALL_OW 12
60250: PUSH
60251: LD_INT 0
60253: PPUSH
60254: LD_INT 3
60256: PPUSH
60257: CALL_OW 12
60261: PUSH
60262: LD_INT 0
60264: PUSH
60265: LD_INT 0
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: ST_TO_ADDR
// end ;
60274: LD_VAR 0 2
60278: RET
// export function PrepareTiger ( agressivity ) ; begin
60279: LD_INT 0
60281: PPUSH
// uc_side := 0 ;
60282: LD_ADDR_OWVAR 20
60286: PUSH
60287: LD_INT 0
60289: ST_TO_ADDR
// uc_nation := 0 ;
60290: LD_ADDR_OWVAR 21
60294: PUSH
60295: LD_INT 0
60297: ST_TO_ADDR
// hc_class := class_tiger ;
60298: LD_ADDR_OWVAR 28
60302: PUSH
60303: LD_INT 14
60305: ST_TO_ADDR
// hc_gallery :=  ;
60306: LD_ADDR_OWVAR 33
60310: PUSH
60311: LD_STRING 
60313: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60314: LD_ADDR_OWVAR 35
60318: PUSH
60319: LD_VAR 0 1
60323: NEG
60324: PPUSH
60325: LD_VAR 0 1
60329: PPUSH
60330: CALL_OW 12
60334: ST_TO_ADDR
// end ;
60335: LD_VAR 0 2
60339: RET
// export function PrepareEnchidna ( ) ; begin
60340: LD_INT 0
60342: PPUSH
// uc_side := 0 ;
60343: LD_ADDR_OWVAR 20
60347: PUSH
60348: LD_INT 0
60350: ST_TO_ADDR
// uc_nation := 0 ;
60351: LD_ADDR_OWVAR 21
60355: PUSH
60356: LD_INT 0
60358: ST_TO_ADDR
// hc_class := class_baggie ;
60359: LD_ADDR_OWVAR 28
60363: PUSH
60364: LD_INT 13
60366: ST_TO_ADDR
// hc_gallery :=  ;
60367: LD_ADDR_OWVAR 33
60371: PUSH
60372: LD_STRING 
60374: ST_TO_ADDR
// end ;
60375: LD_VAR 0 1
60379: RET
// export function PrepareFrog ( ) ; begin
60380: LD_INT 0
60382: PPUSH
// uc_side := 0 ;
60383: LD_ADDR_OWVAR 20
60387: PUSH
60388: LD_INT 0
60390: ST_TO_ADDR
// uc_nation := 0 ;
60391: LD_ADDR_OWVAR 21
60395: PUSH
60396: LD_INT 0
60398: ST_TO_ADDR
// hc_class := class_frog ;
60399: LD_ADDR_OWVAR 28
60403: PUSH
60404: LD_INT 19
60406: ST_TO_ADDR
// hc_gallery :=  ;
60407: LD_ADDR_OWVAR 33
60411: PUSH
60412: LD_STRING 
60414: ST_TO_ADDR
// end ;
60415: LD_VAR 0 1
60419: RET
// export function PrepareFish ( ) ; begin
60420: LD_INT 0
60422: PPUSH
// uc_side := 0 ;
60423: LD_ADDR_OWVAR 20
60427: PUSH
60428: LD_INT 0
60430: ST_TO_ADDR
// uc_nation := 0 ;
60431: LD_ADDR_OWVAR 21
60435: PUSH
60436: LD_INT 0
60438: ST_TO_ADDR
// hc_class := class_fish ;
60439: LD_ADDR_OWVAR 28
60443: PUSH
60444: LD_INT 20
60446: ST_TO_ADDR
// hc_gallery :=  ;
60447: LD_ADDR_OWVAR 33
60451: PUSH
60452: LD_STRING 
60454: ST_TO_ADDR
// end ;
60455: LD_VAR 0 1
60459: RET
// export function PrepareBird ( ) ; begin
60460: LD_INT 0
60462: PPUSH
// uc_side := 0 ;
60463: LD_ADDR_OWVAR 20
60467: PUSH
60468: LD_INT 0
60470: ST_TO_ADDR
// uc_nation := 0 ;
60471: LD_ADDR_OWVAR 21
60475: PUSH
60476: LD_INT 0
60478: ST_TO_ADDR
// hc_class := class_phororhacos ;
60479: LD_ADDR_OWVAR 28
60483: PUSH
60484: LD_INT 18
60486: ST_TO_ADDR
// hc_gallery :=  ;
60487: LD_ADDR_OWVAR 33
60491: PUSH
60492: LD_STRING 
60494: ST_TO_ADDR
// end ;
60495: LD_VAR 0 1
60499: RET
// export function PrepareHorse ( ) ; begin
60500: LD_INT 0
60502: PPUSH
// uc_side := 0 ;
60503: LD_ADDR_OWVAR 20
60507: PUSH
60508: LD_INT 0
60510: ST_TO_ADDR
// uc_nation := 0 ;
60511: LD_ADDR_OWVAR 21
60515: PUSH
60516: LD_INT 0
60518: ST_TO_ADDR
// hc_class := class_horse ;
60519: LD_ADDR_OWVAR 28
60523: PUSH
60524: LD_INT 21
60526: ST_TO_ADDR
// hc_gallery :=  ;
60527: LD_ADDR_OWVAR 33
60531: PUSH
60532: LD_STRING 
60534: ST_TO_ADDR
// end ;
60535: LD_VAR 0 1
60539: RET
// export function PrepareMastodont ( ) ; begin
60540: LD_INT 0
60542: PPUSH
// uc_side := 0 ;
60543: LD_ADDR_OWVAR 20
60547: PUSH
60548: LD_INT 0
60550: ST_TO_ADDR
// uc_nation := 0 ;
60551: LD_ADDR_OWVAR 21
60555: PUSH
60556: LD_INT 0
60558: ST_TO_ADDR
// vc_chassis := class_mastodont ;
60559: LD_ADDR_OWVAR 37
60563: PUSH
60564: LD_INT 31
60566: ST_TO_ADDR
// vc_control := control_rider ;
60567: LD_ADDR_OWVAR 38
60571: PUSH
60572: LD_INT 4
60574: ST_TO_ADDR
// end ;
60575: LD_VAR 0 1
60579: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60580: LD_INT 0
60582: PPUSH
60583: PPUSH
60584: PPUSH
// uc_side = 0 ;
60585: LD_ADDR_OWVAR 20
60589: PUSH
60590: LD_INT 0
60592: ST_TO_ADDR
// uc_nation = 0 ;
60593: LD_ADDR_OWVAR 21
60597: PUSH
60598: LD_INT 0
60600: ST_TO_ADDR
// InitHc_All ( ) ;
60601: CALL_OW 584
// InitVc ;
60605: CALL_OW 20
// if mastodonts then
60609: LD_VAR 0 6
60613: IFFALSE 60680
// for i = 1 to mastodonts do
60615: LD_ADDR_VAR 0 11
60619: PUSH
60620: DOUBLE
60621: LD_INT 1
60623: DEC
60624: ST_TO_ADDR
60625: LD_VAR 0 6
60629: PUSH
60630: FOR_TO
60631: IFFALSE 60678
// begin vc_chassis := 31 ;
60633: LD_ADDR_OWVAR 37
60637: PUSH
60638: LD_INT 31
60640: ST_TO_ADDR
// vc_control := control_rider ;
60641: LD_ADDR_OWVAR 38
60645: PUSH
60646: LD_INT 4
60648: ST_TO_ADDR
// animal := CreateVehicle ;
60649: LD_ADDR_VAR 0 12
60653: PUSH
60654: CALL_OW 45
60658: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60659: LD_VAR 0 12
60663: PPUSH
60664: LD_VAR 0 8
60668: PPUSH
60669: LD_INT 0
60671: PPUSH
60672: CALL 62808 0 3
// end ;
60676: GO 60630
60678: POP
60679: POP
// if horses then
60680: LD_VAR 0 5
60684: IFFALSE 60751
// for i = 1 to horses do
60686: LD_ADDR_VAR 0 11
60690: PUSH
60691: DOUBLE
60692: LD_INT 1
60694: DEC
60695: ST_TO_ADDR
60696: LD_VAR 0 5
60700: PUSH
60701: FOR_TO
60702: IFFALSE 60749
// begin hc_class := 21 ;
60704: LD_ADDR_OWVAR 28
60708: PUSH
60709: LD_INT 21
60711: ST_TO_ADDR
// hc_gallery :=  ;
60712: LD_ADDR_OWVAR 33
60716: PUSH
60717: LD_STRING 
60719: ST_TO_ADDR
// animal := CreateHuman ;
60720: LD_ADDR_VAR 0 12
60724: PUSH
60725: CALL_OW 44
60729: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60730: LD_VAR 0 12
60734: PPUSH
60735: LD_VAR 0 8
60739: PPUSH
60740: LD_INT 0
60742: PPUSH
60743: CALL 62808 0 3
// end ;
60747: GO 60701
60749: POP
60750: POP
// if birds then
60751: LD_VAR 0 1
60755: IFFALSE 60822
// for i = 1 to birds do
60757: LD_ADDR_VAR 0 11
60761: PUSH
60762: DOUBLE
60763: LD_INT 1
60765: DEC
60766: ST_TO_ADDR
60767: LD_VAR 0 1
60771: PUSH
60772: FOR_TO
60773: IFFALSE 60820
// begin hc_class := 18 ;
60775: LD_ADDR_OWVAR 28
60779: PUSH
60780: LD_INT 18
60782: ST_TO_ADDR
// hc_gallery =  ;
60783: LD_ADDR_OWVAR 33
60787: PUSH
60788: LD_STRING 
60790: ST_TO_ADDR
// animal := CreateHuman ;
60791: LD_ADDR_VAR 0 12
60795: PUSH
60796: CALL_OW 44
60800: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60801: LD_VAR 0 12
60805: PPUSH
60806: LD_VAR 0 8
60810: PPUSH
60811: LD_INT 0
60813: PPUSH
60814: CALL 62808 0 3
// end ;
60818: GO 60772
60820: POP
60821: POP
// if tigers then
60822: LD_VAR 0 2
60826: IFFALSE 60910
// for i = 1 to tigers do
60828: LD_ADDR_VAR 0 11
60832: PUSH
60833: DOUBLE
60834: LD_INT 1
60836: DEC
60837: ST_TO_ADDR
60838: LD_VAR 0 2
60842: PUSH
60843: FOR_TO
60844: IFFALSE 60908
// begin hc_class = class_tiger ;
60846: LD_ADDR_OWVAR 28
60850: PUSH
60851: LD_INT 14
60853: ST_TO_ADDR
// hc_gallery =  ;
60854: LD_ADDR_OWVAR 33
60858: PUSH
60859: LD_STRING 
60861: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60862: LD_ADDR_OWVAR 35
60866: PUSH
60867: LD_INT 7
60869: NEG
60870: PPUSH
60871: LD_INT 7
60873: PPUSH
60874: CALL_OW 12
60878: ST_TO_ADDR
// animal := CreateHuman ;
60879: LD_ADDR_VAR 0 12
60883: PUSH
60884: CALL_OW 44
60888: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60889: LD_VAR 0 12
60893: PPUSH
60894: LD_VAR 0 8
60898: PPUSH
60899: LD_INT 0
60901: PPUSH
60902: CALL 62808 0 3
// end ;
60906: GO 60843
60908: POP
60909: POP
// if apemans then
60910: LD_VAR 0 3
60914: IFFALSE 61037
// for i = 1 to apemans do
60916: LD_ADDR_VAR 0 11
60920: PUSH
60921: DOUBLE
60922: LD_INT 1
60924: DEC
60925: ST_TO_ADDR
60926: LD_VAR 0 3
60930: PUSH
60931: FOR_TO
60932: IFFALSE 61035
// begin hc_class = class_apeman ;
60934: LD_ADDR_OWVAR 28
60938: PUSH
60939: LD_INT 12
60941: ST_TO_ADDR
// hc_gallery =  ;
60942: LD_ADDR_OWVAR 33
60946: PUSH
60947: LD_STRING 
60949: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
60950: LD_ADDR_OWVAR 35
60954: PUSH
60955: LD_INT 2
60957: NEG
60958: PPUSH
60959: LD_INT 2
60961: PPUSH
60962: CALL_OW 12
60966: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60967: LD_ADDR_OWVAR 31
60971: PUSH
60972: LD_INT 1
60974: PPUSH
60975: LD_INT 3
60977: PPUSH
60978: CALL_OW 12
60982: PUSH
60983: LD_INT 1
60985: PPUSH
60986: LD_INT 3
60988: PPUSH
60989: CALL_OW 12
60993: PUSH
60994: LD_INT 0
60996: PUSH
60997: LD_INT 0
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: ST_TO_ADDR
// animal := CreateHuman ;
61006: LD_ADDR_VAR 0 12
61010: PUSH
61011: CALL_OW 44
61015: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61016: LD_VAR 0 12
61020: PPUSH
61021: LD_VAR 0 8
61025: PPUSH
61026: LD_INT 0
61028: PPUSH
61029: CALL 62808 0 3
// end ;
61033: GO 60931
61035: POP
61036: POP
// if enchidnas then
61037: LD_VAR 0 4
61041: IFFALSE 61108
// for i = 1 to enchidnas do
61043: LD_ADDR_VAR 0 11
61047: PUSH
61048: DOUBLE
61049: LD_INT 1
61051: DEC
61052: ST_TO_ADDR
61053: LD_VAR 0 4
61057: PUSH
61058: FOR_TO
61059: IFFALSE 61106
// begin hc_class = 13 ;
61061: LD_ADDR_OWVAR 28
61065: PUSH
61066: LD_INT 13
61068: ST_TO_ADDR
// hc_gallery =  ;
61069: LD_ADDR_OWVAR 33
61073: PUSH
61074: LD_STRING 
61076: ST_TO_ADDR
// animal := CreateHuman ;
61077: LD_ADDR_VAR 0 12
61081: PUSH
61082: CALL_OW 44
61086: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61087: LD_VAR 0 12
61091: PPUSH
61092: LD_VAR 0 8
61096: PPUSH
61097: LD_INT 0
61099: PPUSH
61100: CALL 62808 0 3
// end ;
61104: GO 61058
61106: POP
61107: POP
// if fishes then
61108: LD_VAR 0 7
61112: IFFALSE 61179
// for i = 1 to fishes do
61114: LD_ADDR_VAR 0 11
61118: PUSH
61119: DOUBLE
61120: LD_INT 1
61122: DEC
61123: ST_TO_ADDR
61124: LD_VAR 0 7
61128: PUSH
61129: FOR_TO
61130: IFFALSE 61177
// begin hc_class = 20 ;
61132: LD_ADDR_OWVAR 28
61136: PUSH
61137: LD_INT 20
61139: ST_TO_ADDR
// hc_gallery =  ;
61140: LD_ADDR_OWVAR 33
61144: PUSH
61145: LD_STRING 
61147: ST_TO_ADDR
// animal := CreateHuman ;
61148: LD_ADDR_VAR 0 12
61152: PUSH
61153: CALL_OW 44
61157: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61158: LD_VAR 0 12
61162: PPUSH
61163: LD_VAR 0 9
61167: PPUSH
61168: LD_INT 0
61170: PPUSH
61171: CALL 62808 0 3
// end ;
61175: GO 61129
61177: POP
61178: POP
// end ;
61179: LD_VAR 0 10
61183: RET
// export function WantHeal ( sci , unit ) ; begin
61184: LD_INT 0
61186: PPUSH
// if GetTaskList ( sci ) > 0 then
61187: LD_VAR 0 1
61191: PPUSH
61192: CALL_OW 437
61196: PUSH
61197: LD_INT 0
61199: GREATER
61200: IFFALSE 61270
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61202: LD_VAR 0 1
61206: PPUSH
61207: CALL_OW 437
61211: PUSH
61212: LD_INT 1
61214: ARRAY
61215: PUSH
61216: LD_INT 1
61218: ARRAY
61219: PUSH
61220: LD_STRING l
61222: EQUAL
61223: PUSH
61224: LD_VAR 0 1
61228: PPUSH
61229: CALL_OW 437
61233: PUSH
61234: LD_INT 1
61236: ARRAY
61237: PUSH
61238: LD_INT 4
61240: ARRAY
61241: PUSH
61242: LD_VAR 0 2
61246: EQUAL
61247: AND
61248: IFFALSE 61260
// result := true else
61250: LD_ADDR_VAR 0 3
61254: PUSH
61255: LD_INT 1
61257: ST_TO_ADDR
61258: GO 61268
// result := false ;
61260: LD_ADDR_VAR 0 3
61264: PUSH
61265: LD_INT 0
61267: ST_TO_ADDR
// end else
61268: GO 61278
// result := false ;
61270: LD_ADDR_VAR 0 3
61274: PUSH
61275: LD_INT 0
61277: ST_TO_ADDR
// end ;
61278: LD_VAR 0 3
61282: RET
// export function HealTarget ( sci ) ; begin
61283: LD_INT 0
61285: PPUSH
// if not sci then
61286: LD_VAR 0 1
61290: NOT
61291: IFFALSE 61295
// exit ;
61293: GO 61360
// result := 0 ;
61295: LD_ADDR_VAR 0 2
61299: PUSH
61300: LD_INT 0
61302: ST_TO_ADDR
// if GetTaskList ( sci ) then
61303: LD_VAR 0 1
61307: PPUSH
61308: CALL_OW 437
61312: IFFALSE 61360
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61314: LD_VAR 0 1
61318: PPUSH
61319: CALL_OW 437
61323: PUSH
61324: LD_INT 1
61326: ARRAY
61327: PUSH
61328: LD_INT 1
61330: ARRAY
61331: PUSH
61332: LD_STRING l
61334: EQUAL
61335: IFFALSE 61360
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61337: LD_ADDR_VAR 0 2
61341: PUSH
61342: LD_VAR 0 1
61346: PPUSH
61347: CALL_OW 437
61351: PUSH
61352: LD_INT 1
61354: ARRAY
61355: PUSH
61356: LD_INT 4
61358: ARRAY
61359: ST_TO_ADDR
// end ;
61360: LD_VAR 0 2
61364: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61365: LD_INT 0
61367: PPUSH
61368: PPUSH
61369: PPUSH
61370: PPUSH
// if not base_units then
61371: LD_VAR 0 1
61375: NOT
61376: IFFALSE 61380
// exit ;
61378: GO 61467
// result := false ;
61380: LD_ADDR_VAR 0 2
61384: PUSH
61385: LD_INT 0
61387: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61388: LD_ADDR_VAR 0 5
61392: PUSH
61393: LD_VAR 0 1
61397: PPUSH
61398: LD_INT 21
61400: PUSH
61401: LD_INT 3
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PPUSH
61408: CALL_OW 72
61412: ST_TO_ADDR
// if not tmp then
61413: LD_VAR 0 5
61417: NOT
61418: IFFALSE 61422
// exit ;
61420: GO 61467
// for i in tmp do
61422: LD_ADDR_VAR 0 3
61426: PUSH
61427: LD_VAR 0 5
61431: PUSH
61432: FOR_IN
61433: IFFALSE 61465
// begin result := EnemyInRange ( i , 22 ) ;
61435: LD_ADDR_VAR 0 2
61439: PUSH
61440: LD_VAR 0 3
61444: PPUSH
61445: LD_INT 22
61447: PPUSH
61448: CALL 59065 0 2
61452: ST_TO_ADDR
// if result then
61453: LD_VAR 0 2
61457: IFFALSE 61463
// exit ;
61459: POP
61460: POP
61461: GO 61467
// end ;
61463: GO 61432
61465: POP
61466: POP
// end ;
61467: LD_VAR 0 2
61471: RET
// export function FilterByTag ( units , tag ) ; begin
61472: LD_INT 0
61474: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
61475: LD_ADDR_VAR 0 3
61479: PUSH
61480: LD_VAR 0 1
61484: PPUSH
61485: LD_INT 120
61487: PUSH
61488: LD_VAR 0 2
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PPUSH
61497: CALL_OW 72
61501: ST_TO_ADDR
// end ;
61502: LD_VAR 0 3
61506: RET
// export function IsDriver ( un ) ; begin
61507: LD_INT 0
61509: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61510: LD_ADDR_VAR 0 2
61514: PUSH
61515: LD_VAR 0 1
61519: PUSH
61520: LD_INT 55
61522: PUSH
61523: EMPTY
61524: LIST
61525: PPUSH
61526: CALL_OW 69
61530: IN
61531: ST_TO_ADDR
// end ;
61532: LD_VAR 0 2
61536: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61537: LD_INT 0
61539: PPUSH
61540: PPUSH
// list := [ ] ;
61541: LD_ADDR_VAR 0 5
61545: PUSH
61546: EMPTY
61547: ST_TO_ADDR
// case d of 0 :
61548: LD_VAR 0 3
61552: PUSH
61553: LD_INT 0
61555: DOUBLE
61556: EQUAL
61557: IFTRUE 61561
61559: GO 61694
61561: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61562: LD_ADDR_VAR 0 5
61566: PUSH
61567: LD_VAR 0 1
61571: PUSH
61572: LD_INT 4
61574: MINUS
61575: PUSH
61576: LD_VAR 0 2
61580: PUSH
61581: LD_INT 4
61583: MINUS
61584: PUSH
61585: LD_INT 2
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: LIST
61592: PUSH
61593: LD_VAR 0 1
61597: PUSH
61598: LD_INT 3
61600: MINUS
61601: PUSH
61602: LD_VAR 0 2
61606: PUSH
61607: LD_INT 1
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: LIST
61614: PUSH
61615: LD_VAR 0 1
61619: PUSH
61620: LD_INT 4
61622: PLUS
61623: PUSH
61624: LD_VAR 0 2
61628: PUSH
61629: LD_INT 4
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: LIST
61636: PUSH
61637: LD_VAR 0 1
61641: PUSH
61642: LD_INT 3
61644: PLUS
61645: PUSH
61646: LD_VAR 0 2
61650: PUSH
61651: LD_INT 3
61653: PLUS
61654: PUSH
61655: LD_INT 5
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: LIST
61662: PUSH
61663: LD_VAR 0 1
61667: PUSH
61668: LD_VAR 0 2
61672: PUSH
61673: LD_INT 4
61675: PLUS
61676: PUSH
61677: LD_INT 0
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: LIST
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: ST_TO_ADDR
// end ; 1 :
61692: GO 62392
61694: LD_INT 1
61696: DOUBLE
61697: EQUAL
61698: IFTRUE 61702
61700: GO 61835
61702: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61703: LD_ADDR_VAR 0 5
61707: PUSH
61708: LD_VAR 0 1
61712: PUSH
61713: LD_VAR 0 2
61717: PUSH
61718: LD_INT 4
61720: MINUS
61721: PUSH
61722: LD_INT 3
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: LIST
61729: PUSH
61730: LD_VAR 0 1
61734: PUSH
61735: LD_INT 3
61737: MINUS
61738: PUSH
61739: LD_VAR 0 2
61743: PUSH
61744: LD_INT 3
61746: MINUS
61747: PUSH
61748: LD_INT 2
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: LIST
61755: PUSH
61756: LD_VAR 0 1
61760: PUSH
61761: LD_INT 4
61763: MINUS
61764: PUSH
61765: LD_VAR 0 2
61769: PUSH
61770: LD_INT 1
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: LIST
61777: PUSH
61778: LD_VAR 0 1
61782: PUSH
61783: LD_VAR 0 2
61787: PUSH
61788: LD_INT 3
61790: PLUS
61791: PUSH
61792: LD_INT 0
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: LIST
61799: PUSH
61800: LD_VAR 0 1
61804: PUSH
61805: LD_INT 4
61807: PLUS
61808: PUSH
61809: LD_VAR 0 2
61813: PUSH
61814: LD_INT 4
61816: PLUS
61817: PUSH
61818: LD_INT 5
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: LIST
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: ST_TO_ADDR
// end ; 2 :
61833: GO 62392
61835: LD_INT 2
61837: DOUBLE
61838: EQUAL
61839: IFTRUE 61843
61841: GO 61972
61843: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61844: LD_ADDR_VAR 0 5
61848: PUSH
61849: LD_VAR 0 1
61853: PUSH
61854: LD_VAR 0 2
61858: PUSH
61859: LD_INT 3
61861: MINUS
61862: PUSH
61863: LD_INT 3
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: LIST
61870: PUSH
61871: LD_VAR 0 1
61875: PUSH
61876: LD_INT 4
61878: PLUS
61879: PUSH
61880: LD_VAR 0 2
61884: PUSH
61885: LD_INT 4
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: LIST
61892: PUSH
61893: LD_VAR 0 1
61897: PUSH
61898: LD_VAR 0 2
61902: PUSH
61903: LD_INT 4
61905: PLUS
61906: PUSH
61907: LD_INT 0
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: LIST
61914: PUSH
61915: LD_VAR 0 1
61919: PUSH
61920: LD_INT 3
61922: MINUS
61923: PUSH
61924: LD_VAR 0 2
61928: PUSH
61929: LD_INT 1
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: LIST
61936: PUSH
61937: LD_VAR 0 1
61941: PUSH
61942: LD_INT 4
61944: MINUS
61945: PUSH
61946: LD_VAR 0 2
61950: PUSH
61951: LD_INT 4
61953: MINUS
61954: PUSH
61955: LD_INT 2
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: LIST
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: ST_TO_ADDR
// end ; 3 :
61970: GO 62392
61972: LD_INT 3
61974: DOUBLE
61975: EQUAL
61976: IFTRUE 61980
61978: GO 62113
61980: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61981: LD_ADDR_VAR 0 5
61985: PUSH
61986: LD_VAR 0 1
61990: PUSH
61991: LD_INT 3
61993: PLUS
61994: PUSH
61995: LD_VAR 0 2
61999: PUSH
62000: LD_INT 4
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: LIST
62007: PUSH
62008: LD_VAR 0 1
62012: PUSH
62013: LD_INT 4
62015: PLUS
62016: PUSH
62017: LD_VAR 0 2
62021: PUSH
62022: LD_INT 4
62024: PLUS
62025: PUSH
62026: LD_INT 5
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: LIST
62033: PUSH
62034: LD_VAR 0 1
62038: PUSH
62039: LD_INT 4
62041: MINUS
62042: PUSH
62043: LD_VAR 0 2
62047: PUSH
62048: LD_INT 1
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: LIST
62055: PUSH
62056: LD_VAR 0 1
62060: PUSH
62061: LD_VAR 0 2
62065: PUSH
62066: LD_INT 4
62068: MINUS
62069: PUSH
62070: LD_INT 3
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: LIST
62077: PUSH
62078: LD_VAR 0 1
62082: PUSH
62083: LD_INT 3
62085: MINUS
62086: PUSH
62087: LD_VAR 0 2
62091: PUSH
62092: LD_INT 3
62094: MINUS
62095: PUSH
62096: LD_INT 2
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: LIST
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: ST_TO_ADDR
// end ; 4 :
62111: GO 62392
62113: LD_INT 4
62115: DOUBLE
62116: EQUAL
62117: IFTRUE 62121
62119: GO 62254
62121: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62122: LD_ADDR_VAR 0 5
62126: PUSH
62127: LD_VAR 0 1
62131: PUSH
62132: LD_VAR 0 2
62136: PUSH
62137: LD_INT 4
62139: PLUS
62140: PUSH
62141: LD_INT 0
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: LIST
62148: PUSH
62149: LD_VAR 0 1
62153: PUSH
62154: LD_INT 3
62156: PLUS
62157: PUSH
62158: LD_VAR 0 2
62162: PUSH
62163: LD_INT 3
62165: PLUS
62166: PUSH
62167: LD_INT 5
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: LIST
62174: PUSH
62175: LD_VAR 0 1
62179: PUSH
62180: LD_INT 4
62182: PLUS
62183: PUSH
62184: LD_VAR 0 2
62188: PUSH
62189: LD_INT 4
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: LIST
62196: PUSH
62197: LD_VAR 0 1
62201: PUSH
62202: LD_VAR 0 2
62206: PUSH
62207: LD_INT 3
62209: MINUS
62210: PUSH
62211: LD_INT 3
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: LIST
62218: PUSH
62219: LD_VAR 0 1
62223: PUSH
62224: LD_INT 4
62226: MINUS
62227: PUSH
62228: LD_VAR 0 2
62232: PUSH
62233: LD_INT 4
62235: MINUS
62236: PUSH
62237: LD_INT 2
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: LIST
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: ST_TO_ADDR
// end ; 5 :
62252: GO 62392
62254: LD_INT 5
62256: DOUBLE
62257: EQUAL
62258: IFTRUE 62262
62260: GO 62391
62262: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62263: LD_ADDR_VAR 0 5
62267: PUSH
62268: LD_VAR 0 1
62272: PUSH
62273: LD_INT 4
62275: MINUS
62276: PUSH
62277: LD_VAR 0 2
62281: PUSH
62282: LD_INT 1
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: LIST
62289: PUSH
62290: LD_VAR 0 1
62294: PUSH
62295: LD_VAR 0 2
62299: PUSH
62300: LD_INT 4
62302: MINUS
62303: PUSH
62304: LD_INT 3
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: LIST
62311: PUSH
62312: LD_VAR 0 1
62316: PUSH
62317: LD_INT 4
62319: PLUS
62320: PUSH
62321: LD_VAR 0 2
62325: PUSH
62326: LD_INT 4
62328: PLUS
62329: PUSH
62330: LD_INT 5
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: LIST
62337: PUSH
62338: LD_VAR 0 1
62342: PUSH
62343: LD_INT 3
62345: PLUS
62346: PUSH
62347: LD_VAR 0 2
62351: PUSH
62352: LD_INT 4
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: LIST
62359: PUSH
62360: LD_VAR 0 1
62364: PUSH
62365: LD_VAR 0 2
62369: PUSH
62370: LD_INT 3
62372: PLUS
62373: PUSH
62374: LD_INT 0
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: LIST
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: ST_TO_ADDR
// end ; end ;
62389: GO 62392
62391: POP
// result := list ;
62392: LD_ADDR_VAR 0 4
62396: PUSH
62397: LD_VAR 0 5
62401: ST_TO_ADDR
// end ;
62402: LD_VAR 0 4
62406: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62407: LD_INT 0
62409: PPUSH
62410: PPUSH
62411: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62412: LD_VAR 0 1
62416: NOT
62417: PUSH
62418: LD_VAR 0 2
62422: PUSH
62423: LD_INT 1
62425: PUSH
62426: LD_INT 2
62428: PUSH
62429: LD_INT 3
62431: PUSH
62432: LD_INT 4
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: IN
62441: NOT
62442: OR
62443: IFFALSE 62447
// exit ;
62445: GO 62530
// tmp := [ ] ;
62447: LD_ADDR_VAR 0 5
62451: PUSH
62452: EMPTY
62453: ST_TO_ADDR
// for i in units do
62454: LD_ADDR_VAR 0 4
62458: PUSH
62459: LD_VAR 0 1
62463: PUSH
62464: FOR_IN
62465: IFFALSE 62499
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
62467: LD_ADDR_VAR 0 5
62471: PUSH
62472: LD_VAR 0 5
62476: PPUSH
62477: LD_VAR 0 4
62481: PPUSH
62482: LD_VAR 0 2
62486: PPUSH
62487: CALL_OW 259
62491: PPUSH
62492: CALL 63903 0 2
62496: ST_TO_ADDR
62497: GO 62464
62499: POP
62500: POP
// if not tmp then
62501: LD_VAR 0 5
62505: NOT
62506: IFFALSE 62510
// exit ;
62508: GO 62530
// result := SortListByListDesc ( units , tmp ) ;
62510: LD_ADDR_VAR 0 3
62514: PUSH
62515: LD_VAR 0 1
62519: PPUSH
62520: LD_VAR 0 5
62524: PPUSH
62525: CALL_OW 77
62529: ST_TO_ADDR
// end ;
62530: LD_VAR 0 3
62534: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62535: LD_INT 0
62537: PPUSH
62538: PPUSH
62539: PPUSH
// result := false ;
62540: LD_ADDR_VAR 0 3
62544: PUSH
62545: LD_INT 0
62547: ST_TO_ADDR
// if not building then
62548: LD_VAR 0 2
62552: NOT
62553: IFFALSE 62557
// exit ;
62555: GO 62695
// x := GetX ( building ) ;
62557: LD_ADDR_VAR 0 4
62561: PUSH
62562: LD_VAR 0 2
62566: PPUSH
62567: CALL_OW 250
62571: ST_TO_ADDR
// y := GetY ( building ) ;
62572: LD_ADDR_VAR 0 5
62576: PUSH
62577: LD_VAR 0 2
62581: PPUSH
62582: CALL_OW 251
62586: ST_TO_ADDR
// if not x or not y then
62587: LD_VAR 0 4
62591: NOT
62592: PUSH
62593: LD_VAR 0 5
62597: NOT
62598: OR
62599: IFFALSE 62603
// exit ;
62601: GO 62695
// if GetTaskList ( unit ) then
62603: LD_VAR 0 1
62607: PPUSH
62608: CALL_OW 437
62612: IFFALSE 62695
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62614: LD_STRING e
62616: PUSH
62617: LD_VAR 0 1
62621: PPUSH
62622: CALL_OW 437
62626: PUSH
62627: LD_INT 1
62629: ARRAY
62630: PUSH
62631: LD_INT 1
62633: ARRAY
62634: EQUAL
62635: PUSH
62636: LD_VAR 0 4
62640: PUSH
62641: LD_VAR 0 1
62645: PPUSH
62646: CALL_OW 437
62650: PUSH
62651: LD_INT 1
62653: ARRAY
62654: PUSH
62655: LD_INT 2
62657: ARRAY
62658: EQUAL
62659: AND
62660: PUSH
62661: LD_VAR 0 5
62665: PUSH
62666: LD_VAR 0 1
62670: PPUSH
62671: CALL_OW 437
62675: PUSH
62676: LD_INT 1
62678: ARRAY
62679: PUSH
62680: LD_INT 3
62682: ARRAY
62683: EQUAL
62684: AND
62685: IFFALSE 62695
// result := true end ;
62687: LD_ADDR_VAR 0 3
62691: PUSH
62692: LD_INT 1
62694: ST_TO_ADDR
// end ;
62695: LD_VAR 0 3
62699: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62700: LD_INT 0
62702: PPUSH
// result := false ;
62703: LD_ADDR_VAR 0 4
62707: PUSH
62708: LD_INT 0
62710: ST_TO_ADDR
// if GetTaskList ( unit ) then
62711: LD_VAR 0 1
62715: PPUSH
62716: CALL_OW 437
62720: IFFALSE 62803
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62722: LD_STRING M
62724: PUSH
62725: LD_VAR 0 1
62729: PPUSH
62730: CALL_OW 437
62734: PUSH
62735: LD_INT 1
62737: ARRAY
62738: PUSH
62739: LD_INT 1
62741: ARRAY
62742: EQUAL
62743: PUSH
62744: LD_VAR 0 2
62748: PUSH
62749: LD_VAR 0 1
62753: PPUSH
62754: CALL_OW 437
62758: PUSH
62759: LD_INT 1
62761: ARRAY
62762: PUSH
62763: LD_INT 2
62765: ARRAY
62766: EQUAL
62767: AND
62768: PUSH
62769: LD_VAR 0 3
62773: PUSH
62774: LD_VAR 0 1
62778: PPUSH
62779: CALL_OW 437
62783: PUSH
62784: LD_INT 1
62786: ARRAY
62787: PUSH
62788: LD_INT 3
62790: ARRAY
62791: EQUAL
62792: AND
62793: IFFALSE 62803
// result := true ;
62795: LD_ADDR_VAR 0 4
62799: PUSH
62800: LD_INT 1
62802: ST_TO_ADDR
// end ; end ;
62803: LD_VAR 0 4
62807: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62808: LD_INT 0
62810: PPUSH
62811: PPUSH
62812: PPUSH
62813: PPUSH
// if not unit or not area then
62814: LD_VAR 0 1
62818: NOT
62819: PUSH
62820: LD_VAR 0 2
62824: NOT
62825: OR
62826: IFFALSE 62830
// exit ;
62828: GO 63006
// tmp := AreaToList ( area , i ) ;
62830: LD_ADDR_VAR 0 6
62834: PUSH
62835: LD_VAR 0 2
62839: PPUSH
62840: LD_VAR 0 5
62844: PPUSH
62845: CALL_OW 517
62849: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62850: LD_ADDR_VAR 0 5
62854: PUSH
62855: DOUBLE
62856: LD_INT 1
62858: DEC
62859: ST_TO_ADDR
62860: LD_VAR 0 6
62864: PUSH
62865: LD_INT 1
62867: ARRAY
62868: PUSH
62869: FOR_TO
62870: IFFALSE 63004
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62872: LD_ADDR_VAR 0 7
62876: PUSH
62877: LD_VAR 0 6
62881: PUSH
62882: LD_INT 1
62884: ARRAY
62885: PUSH
62886: LD_VAR 0 5
62890: ARRAY
62891: PUSH
62892: LD_VAR 0 6
62896: PUSH
62897: LD_INT 2
62899: ARRAY
62900: PUSH
62901: LD_VAR 0 5
62905: ARRAY
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
62911: LD_INT 92
62913: PUSH
62914: LD_VAR 0 7
62918: PUSH
62919: LD_INT 1
62921: ARRAY
62922: PUSH
62923: LD_VAR 0 7
62927: PUSH
62928: LD_INT 2
62930: ARRAY
62931: PUSH
62932: LD_INT 2
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: LIST
62939: LIST
62940: PPUSH
62941: CALL_OW 69
62945: PUSH
62946: LD_INT 0
62948: EQUAL
62949: IFFALSE 63002
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62951: LD_VAR 0 1
62955: PPUSH
62956: LD_VAR 0 7
62960: PUSH
62961: LD_INT 1
62963: ARRAY
62964: PPUSH
62965: LD_VAR 0 7
62969: PUSH
62970: LD_INT 2
62972: ARRAY
62973: PPUSH
62974: LD_VAR 0 3
62978: PPUSH
62979: CALL_OW 48
// result := IsPlaced ( unit ) ;
62983: LD_ADDR_VAR 0 4
62987: PUSH
62988: LD_VAR 0 1
62992: PPUSH
62993: CALL_OW 305
62997: ST_TO_ADDR
// exit ;
62998: POP
62999: POP
63000: GO 63006
// end ; end ;
63002: GO 62869
63004: POP
63005: POP
// end ;
63006: LD_VAR 0 4
63010: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63011: LD_INT 0
63013: PPUSH
63014: PPUSH
63015: PPUSH
// if not side or side > 8 then
63016: LD_VAR 0 1
63020: NOT
63021: PUSH
63022: LD_VAR 0 1
63026: PUSH
63027: LD_INT 8
63029: GREATER
63030: OR
63031: IFFALSE 63035
// exit ;
63033: GO 63222
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63035: LD_ADDR_VAR 0 4
63039: PUSH
63040: LD_INT 22
63042: PUSH
63043: LD_VAR 0 1
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: PUSH
63052: LD_INT 21
63054: PUSH
63055: LD_INT 3
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: PPUSH
63066: CALL_OW 69
63070: ST_TO_ADDR
// if not tmp then
63071: LD_VAR 0 4
63075: NOT
63076: IFFALSE 63080
// exit ;
63078: GO 63222
// enable_addtolog := true ;
63080: LD_ADDR_OWVAR 81
63084: PUSH
63085: LD_INT 1
63087: ST_TO_ADDR
// AddToLog ( [ ) ;
63088: LD_STRING [
63090: PPUSH
63091: CALL_OW 561
// for i in tmp do
63095: LD_ADDR_VAR 0 3
63099: PUSH
63100: LD_VAR 0 4
63104: PUSH
63105: FOR_IN
63106: IFFALSE 63213
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63108: LD_STRING [
63110: PUSH
63111: LD_VAR 0 3
63115: PPUSH
63116: CALL_OW 266
63120: STR
63121: PUSH
63122: LD_STRING , 
63124: STR
63125: PUSH
63126: LD_VAR 0 3
63130: PPUSH
63131: CALL_OW 250
63135: STR
63136: PUSH
63137: LD_STRING , 
63139: STR
63140: PUSH
63141: LD_VAR 0 3
63145: PPUSH
63146: CALL_OW 251
63150: STR
63151: PUSH
63152: LD_STRING , 
63154: STR
63155: PUSH
63156: LD_VAR 0 3
63160: PPUSH
63161: CALL_OW 254
63165: STR
63166: PUSH
63167: LD_STRING , 
63169: STR
63170: PUSH
63171: LD_VAR 0 3
63175: PPUSH
63176: LD_INT 1
63178: PPUSH
63179: CALL_OW 268
63183: STR
63184: PUSH
63185: LD_STRING , 
63187: STR
63188: PUSH
63189: LD_VAR 0 3
63193: PPUSH
63194: LD_INT 2
63196: PPUSH
63197: CALL_OW 268
63201: STR
63202: PUSH
63203: LD_STRING ],
63205: STR
63206: PPUSH
63207: CALL_OW 561
// end ;
63211: GO 63105
63213: POP
63214: POP
// AddToLog ( ]; ) ;
63215: LD_STRING ];
63217: PPUSH
63218: CALL_OW 561
// end ;
63222: LD_VAR 0 2
63226: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63227: LD_INT 0
63229: PPUSH
63230: PPUSH
63231: PPUSH
63232: PPUSH
63233: PPUSH
// if not area or not rate or not max then
63234: LD_VAR 0 1
63238: NOT
63239: PUSH
63240: LD_VAR 0 2
63244: NOT
63245: OR
63246: PUSH
63247: LD_VAR 0 4
63251: NOT
63252: OR
63253: IFFALSE 63257
// exit ;
63255: GO 63446
// while 1 do
63257: LD_INT 1
63259: IFFALSE 63446
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63261: LD_ADDR_VAR 0 9
63265: PUSH
63266: LD_VAR 0 1
63270: PPUSH
63271: LD_INT 1
63273: PPUSH
63274: CALL_OW 287
63278: PUSH
63279: LD_INT 10
63281: MUL
63282: ST_TO_ADDR
// r := rate / 10 ;
63283: LD_ADDR_VAR 0 7
63287: PUSH
63288: LD_VAR 0 2
63292: PUSH
63293: LD_INT 10
63295: DIVREAL
63296: ST_TO_ADDR
// time := 1 1$00 ;
63297: LD_ADDR_VAR 0 8
63301: PUSH
63302: LD_INT 2100
63304: ST_TO_ADDR
// if amount < min then
63305: LD_VAR 0 9
63309: PUSH
63310: LD_VAR 0 3
63314: LESS
63315: IFFALSE 63333
// r := r * 2 else
63317: LD_ADDR_VAR 0 7
63321: PUSH
63322: LD_VAR 0 7
63326: PUSH
63327: LD_INT 2
63329: MUL
63330: ST_TO_ADDR
63331: GO 63359
// if amount > max then
63333: LD_VAR 0 9
63337: PUSH
63338: LD_VAR 0 4
63342: GREATER
63343: IFFALSE 63359
// r := r / 2 ;
63345: LD_ADDR_VAR 0 7
63349: PUSH
63350: LD_VAR 0 7
63354: PUSH
63355: LD_INT 2
63357: DIVREAL
63358: ST_TO_ADDR
// time := time / r ;
63359: LD_ADDR_VAR 0 8
63363: PUSH
63364: LD_VAR 0 8
63368: PUSH
63369: LD_VAR 0 7
63373: DIVREAL
63374: ST_TO_ADDR
// if time < 0 then
63375: LD_VAR 0 8
63379: PUSH
63380: LD_INT 0
63382: LESS
63383: IFFALSE 63400
// time := time * - 1 ;
63385: LD_ADDR_VAR 0 8
63389: PUSH
63390: LD_VAR 0 8
63394: PUSH
63395: LD_INT 1
63397: NEG
63398: MUL
63399: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
63400: LD_VAR 0 8
63404: PUSH
63405: LD_INT 35
63407: PPUSH
63408: LD_INT 875
63410: PPUSH
63411: CALL_OW 12
63415: PLUS
63416: PPUSH
63417: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63421: LD_INT 1
63423: PPUSH
63424: LD_INT 5
63426: PPUSH
63427: CALL_OW 12
63431: PPUSH
63432: LD_VAR 0 1
63436: PPUSH
63437: LD_INT 1
63439: PPUSH
63440: CALL_OW 55
// end ;
63444: GO 63257
// end ;
63446: LD_VAR 0 5
63450: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63451: LD_INT 0
63453: PPUSH
63454: PPUSH
63455: PPUSH
63456: PPUSH
63457: PPUSH
63458: PPUSH
63459: PPUSH
63460: PPUSH
// if not turrets or not factories then
63461: LD_VAR 0 1
63465: NOT
63466: PUSH
63467: LD_VAR 0 2
63471: NOT
63472: OR
63473: IFFALSE 63477
// exit ;
63475: GO 63784
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63477: LD_ADDR_VAR 0 10
63481: PUSH
63482: LD_INT 5
63484: PUSH
63485: LD_INT 6
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 2
63494: PUSH
63495: LD_INT 4
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PUSH
63502: LD_INT 3
63504: PUSH
63505: LD_INT 5
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: LIST
63516: PUSH
63517: LD_INT 24
63519: PUSH
63520: LD_INT 25
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: LD_INT 23
63529: PUSH
63530: LD_INT 27
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 42
63543: PUSH
63544: LD_INT 43
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: PUSH
63551: LD_INT 44
63553: PUSH
63554: LD_INT 46
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 45
63563: PUSH
63564: LD_INT 47
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: LIST
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: LIST
63580: ST_TO_ADDR
// result := [ ] ;
63581: LD_ADDR_VAR 0 3
63585: PUSH
63586: EMPTY
63587: ST_TO_ADDR
// for i in turrets do
63588: LD_ADDR_VAR 0 4
63592: PUSH
63593: LD_VAR 0 1
63597: PUSH
63598: FOR_IN
63599: IFFALSE 63782
// begin nat := GetNation ( i ) ;
63601: LD_ADDR_VAR 0 7
63605: PUSH
63606: LD_VAR 0 4
63610: PPUSH
63611: CALL_OW 248
63615: ST_TO_ADDR
// weapon := 0 ;
63616: LD_ADDR_VAR 0 8
63620: PUSH
63621: LD_INT 0
63623: ST_TO_ADDR
// if not nat then
63624: LD_VAR 0 7
63628: NOT
63629: IFFALSE 63633
// continue ;
63631: GO 63598
// for j in list [ nat ] do
63633: LD_ADDR_VAR 0 5
63637: PUSH
63638: LD_VAR 0 10
63642: PUSH
63643: LD_VAR 0 7
63647: ARRAY
63648: PUSH
63649: FOR_IN
63650: IFFALSE 63691
// if GetBWeapon ( i ) = j [ 1 ] then
63652: LD_VAR 0 4
63656: PPUSH
63657: CALL_OW 269
63661: PUSH
63662: LD_VAR 0 5
63666: PUSH
63667: LD_INT 1
63669: ARRAY
63670: EQUAL
63671: IFFALSE 63689
// begin weapon := j [ 2 ] ;
63673: LD_ADDR_VAR 0 8
63677: PUSH
63678: LD_VAR 0 5
63682: PUSH
63683: LD_INT 2
63685: ARRAY
63686: ST_TO_ADDR
// break ;
63687: GO 63691
// end ;
63689: GO 63649
63691: POP
63692: POP
// if not weapon then
63693: LD_VAR 0 8
63697: NOT
63698: IFFALSE 63702
// continue ;
63700: GO 63598
// for k in factories do
63702: LD_ADDR_VAR 0 6
63706: PUSH
63707: LD_VAR 0 2
63711: PUSH
63712: FOR_IN
63713: IFFALSE 63778
// begin weapons := AvailableWeaponList ( k ) ;
63715: LD_ADDR_VAR 0 9
63719: PUSH
63720: LD_VAR 0 6
63724: PPUSH
63725: CALL_OW 478
63729: ST_TO_ADDR
// if not weapons then
63730: LD_VAR 0 9
63734: NOT
63735: IFFALSE 63739
// continue ;
63737: GO 63712
// if weapon in weapons then
63739: LD_VAR 0 8
63743: PUSH
63744: LD_VAR 0 9
63748: IN
63749: IFFALSE 63776
// begin result := [ i , weapon ] ;
63751: LD_ADDR_VAR 0 3
63755: PUSH
63756: LD_VAR 0 4
63760: PUSH
63761: LD_VAR 0 8
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: ST_TO_ADDR
// exit ;
63770: POP
63771: POP
63772: POP
63773: POP
63774: GO 63784
// end ; end ;
63776: GO 63712
63778: POP
63779: POP
// end ;
63780: GO 63598
63782: POP
63783: POP
// end ;
63784: LD_VAR 0 3
63788: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63789: LD_INT 0
63791: PPUSH
// if not side or side > 8 then
63792: LD_VAR 0 3
63796: NOT
63797: PUSH
63798: LD_VAR 0 3
63802: PUSH
63803: LD_INT 8
63805: GREATER
63806: OR
63807: IFFALSE 63811
// exit ;
63809: GO 63870
// if not range then
63811: LD_VAR 0 4
63815: NOT
63816: IFFALSE 63827
// range := - 12 ;
63818: LD_ADDR_VAR 0 4
63822: PUSH
63823: LD_INT 12
63825: NEG
63826: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63827: LD_VAR 0 1
63831: PPUSH
63832: LD_VAR 0 2
63836: PPUSH
63837: LD_VAR 0 3
63841: PPUSH
63842: LD_VAR 0 4
63846: PPUSH
63847: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63851: LD_VAR 0 1
63855: PPUSH
63856: LD_VAR 0 2
63860: PPUSH
63861: LD_VAR 0 3
63865: PPUSH
63866: CALL_OW 331
// end ;
63870: LD_VAR 0 5
63874: RET
// export function Video ( mode ) ; begin
63875: LD_INT 0
63877: PPUSH
// ingame_video = mode ;
63878: LD_ADDR_OWVAR 52
63882: PUSH
63883: LD_VAR 0 1
63887: ST_TO_ADDR
// interface_hidden = mode ;
63888: LD_ADDR_OWVAR 54
63892: PUSH
63893: LD_VAR 0 1
63897: ST_TO_ADDR
// end ;
63898: LD_VAR 0 2
63902: RET
// export function Join ( array , element ) ; begin
63903: LD_INT 0
63905: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63906: LD_ADDR_VAR 0 3
63910: PUSH
63911: LD_VAR 0 1
63915: PPUSH
63916: LD_VAR 0 1
63920: PUSH
63921: LD_INT 1
63923: PLUS
63924: PPUSH
63925: LD_VAR 0 2
63929: PPUSH
63930: CALL_OW 1
63934: ST_TO_ADDR
// end ;
63935: LD_VAR 0 3
63939: RET
// export function JoinUnion ( array , element ) ; begin
63940: LD_INT 0
63942: PPUSH
// result := array union element ;
63943: LD_ADDR_VAR 0 3
63947: PUSH
63948: LD_VAR 0 1
63952: PUSH
63953: LD_VAR 0 2
63957: UNION
63958: ST_TO_ADDR
// end ;
63959: LD_VAR 0 3
63963: RET
// export function GetBehemoths ( side ) ; begin
63964: LD_INT 0
63966: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
63967: LD_ADDR_VAR 0 2
63971: PUSH
63972: LD_INT 22
63974: PUSH
63975: LD_VAR 0 1
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 31
63986: PUSH
63987: LD_INT 25
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PPUSH
63998: CALL_OW 69
64002: ST_TO_ADDR
// end ;
64003: LD_VAR 0 2
64007: RET
// export function Shuffle ( array ) ; var i , index ; begin
64008: LD_INT 0
64010: PPUSH
64011: PPUSH
64012: PPUSH
// result := [ ] ;
64013: LD_ADDR_VAR 0 2
64017: PUSH
64018: EMPTY
64019: ST_TO_ADDR
// if not array then
64020: LD_VAR 0 1
64024: NOT
64025: IFFALSE 64029
// exit ;
64027: GO 64128
// Randomize ;
64029: CALL_OW 10
// for i = array downto 1 do
64033: LD_ADDR_VAR 0 3
64037: PUSH
64038: DOUBLE
64039: LD_VAR 0 1
64043: INC
64044: ST_TO_ADDR
64045: LD_INT 1
64047: PUSH
64048: FOR_DOWNTO
64049: IFFALSE 64126
// begin index := rand ( 1 , array ) ;
64051: LD_ADDR_VAR 0 4
64055: PUSH
64056: LD_INT 1
64058: PPUSH
64059: LD_VAR 0 1
64063: PPUSH
64064: CALL_OW 12
64068: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64069: LD_ADDR_VAR 0 2
64073: PUSH
64074: LD_VAR 0 2
64078: PPUSH
64079: LD_VAR 0 2
64083: PUSH
64084: LD_INT 1
64086: PLUS
64087: PPUSH
64088: LD_VAR 0 1
64092: PUSH
64093: LD_VAR 0 4
64097: ARRAY
64098: PPUSH
64099: CALL_OW 2
64103: ST_TO_ADDR
// array := Delete ( array , index ) ;
64104: LD_ADDR_VAR 0 1
64108: PUSH
64109: LD_VAR 0 1
64113: PPUSH
64114: LD_VAR 0 4
64118: PPUSH
64119: CALL_OW 3
64123: ST_TO_ADDR
// end ;
64124: GO 64048
64126: POP
64127: POP
// end ;
64128: LD_VAR 0 2
64132: RET
// export function GetBaseMaterials ( base ) ; begin
64133: LD_INT 0
64135: PPUSH
// result := [ 0 , 0 , 0 ] ;
64136: LD_ADDR_VAR 0 2
64140: PUSH
64141: LD_INT 0
64143: PUSH
64144: LD_INT 0
64146: PUSH
64147: LD_INT 0
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: LIST
64154: ST_TO_ADDR
// if not base then
64155: LD_VAR 0 1
64159: NOT
64160: IFFALSE 64164
// exit ;
64162: GO 64213
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64164: LD_ADDR_VAR 0 2
64168: PUSH
64169: LD_VAR 0 1
64173: PPUSH
64174: LD_INT 1
64176: PPUSH
64177: CALL_OW 275
64181: PUSH
64182: LD_VAR 0 1
64186: PPUSH
64187: LD_INT 2
64189: PPUSH
64190: CALL_OW 275
64194: PUSH
64195: LD_VAR 0 1
64199: PPUSH
64200: LD_INT 3
64202: PPUSH
64203: CALL_OW 275
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: LIST
64212: ST_TO_ADDR
// end ;
64213: LD_VAR 0 2
64217: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64218: LD_INT 0
64220: PPUSH
64221: PPUSH
// result := array ;
64222: LD_ADDR_VAR 0 3
64226: PUSH
64227: LD_VAR 0 1
64231: ST_TO_ADDR
// if size >= result then
64232: LD_VAR 0 2
64236: PUSH
64237: LD_VAR 0 3
64241: GREATEREQUAL
64242: IFFALSE 64246
// exit ;
64244: GO 64296
// if size then
64246: LD_VAR 0 2
64250: IFFALSE 64296
// for i := array downto size do
64252: LD_ADDR_VAR 0 4
64256: PUSH
64257: DOUBLE
64258: LD_VAR 0 1
64262: INC
64263: ST_TO_ADDR
64264: LD_VAR 0 2
64268: PUSH
64269: FOR_DOWNTO
64270: IFFALSE 64294
// result := Delete ( result , result ) ;
64272: LD_ADDR_VAR 0 3
64276: PUSH
64277: LD_VAR 0 3
64281: PPUSH
64282: LD_VAR 0 3
64286: PPUSH
64287: CALL_OW 3
64291: ST_TO_ADDR
64292: GO 64269
64294: POP
64295: POP
// end ;
64296: LD_VAR 0 3
64300: RET
// export function ComExit ( unit ) ; var tmp ; begin
64301: LD_INT 0
64303: PPUSH
64304: PPUSH
// if not IsInUnit ( unit ) then
64305: LD_VAR 0 1
64309: PPUSH
64310: CALL_OW 310
64314: NOT
64315: IFFALSE 64319
// exit ;
64317: GO 64379
// tmp := IsInUnit ( unit ) ;
64319: LD_ADDR_VAR 0 3
64323: PUSH
64324: LD_VAR 0 1
64328: PPUSH
64329: CALL_OW 310
64333: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64334: LD_VAR 0 3
64338: PPUSH
64339: CALL_OW 247
64343: PUSH
64344: LD_INT 2
64346: EQUAL
64347: IFFALSE 64360
// ComExitVehicle ( unit ) else
64349: LD_VAR 0 1
64353: PPUSH
64354: CALL_OW 121
64358: GO 64369
// ComExitBuilding ( unit ) ;
64360: LD_VAR 0 1
64364: PPUSH
64365: CALL_OW 122
// result := tmp ;
64369: LD_ADDR_VAR 0 2
64373: PUSH
64374: LD_VAR 0 3
64378: ST_TO_ADDR
// end ;
64379: LD_VAR 0 2
64383: RET
// export function ComExitAll ( units ) ; var i ; begin
64384: LD_INT 0
64386: PPUSH
64387: PPUSH
// if not units then
64388: LD_VAR 0 1
64392: NOT
64393: IFFALSE 64397
// exit ;
64395: GO 64423
// for i in units do
64397: LD_ADDR_VAR 0 3
64401: PUSH
64402: LD_VAR 0 1
64406: PUSH
64407: FOR_IN
64408: IFFALSE 64421
// ComExit ( i ) ;
64410: LD_VAR 0 3
64414: PPUSH
64415: CALL 64301 0 1
64419: GO 64407
64421: POP
64422: POP
// end ;
64423: LD_VAR 0 2
64427: RET
// export function ResetHc ; begin
64428: LD_INT 0
64430: PPUSH
// InitHc ;
64431: CALL_OW 19
// hc_importance := 0 ;
64435: LD_ADDR_OWVAR 32
64439: PUSH
64440: LD_INT 0
64442: ST_TO_ADDR
// end ;
64443: LD_VAR 0 1
64447: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64448: LD_INT 0
64450: PPUSH
64451: PPUSH
64452: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64453: LD_ADDR_VAR 0 6
64457: PUSH
64458: LD_VAR 0 1
64462: PUSH
64463: LD_VAR 0 3
64467: PLUS
64468: PUSH
64469: LD_INT 2
64471: DIV
64472: ST_TO_ADDR
// if _x < 0 then
64473: LD_VAR 0 6
64477: PUSH
64478: LD_INT 0
64480: LESS
64481: IFFALSE 64498
// _x := _x * - 1 ;
64483: LD_ADDR_VAR 0 6
64487: PUSH
64488: LD_VAR 0 6
64492: PUSH
64493: LD_INT 1
64495: NEG
64496: MUL
64497: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64498: LD_ADDR_VAR 0 7
64502: PUSH
64503: LD_VAR 0 2
64507: PUSH
64508: LD_VAR 0 4
64512: PLUS
64513: PUSH
64514: LD_INT 2
64516: DIV
64517: ST_TO_ADDR
// if _y < 0 then
64518: LD_VAR 0 7
64522: PUSH
64523: LD_INT 0
64525: LESS
64526: IFFALSE 64543
// _y := _y * - 1 ;
64528: LD_ADDR_VAR 0 7
64532: PUSH
64533: LD_VAR 0 7
64537: PUSH
64538: LD_INT 1
64540: NEG
64541: MUL
64542: ST_TO_ADDR
// result := [ _x , _y ] ;
64543: LD_ADDR_VAR 0 5
64547: PUSH
64548: LD_VAR 0 6
64552: PUSH
64553: LD_VAR 0 7
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: ST_TO_ADDR
// end ;
64562: LD_VAR 0 5
64566: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64567: LD_INT 0
64569: PPUSH
64570: PPUSH
64571: PPUSH
64572: PPUSH
// task := GetTaskList ( unit ) ;
64573: LD_ADDR_VAR 0 7
64577: PUSH
64578: LD_VAR 0 1
64582: PPUSH
64583: CALL_OW 437
64587: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64588: LD_VAR 0 7
64592: NOT
64593: PUSH
64594: LD_VAR 0 1
64598: PPUSH
64599: LD_VAR 0 2
64603: PPUSH
64604: CALL_OW 308
64608: NOT
64609: AND
64610: IFFALSE 64614
// exit ;
64612: GO 64732
// if IsInArea ( unit , area ) then
64614: LD_VAR 0 1
64618: PPUSH
64619: LD_VAR 0 2
64623: PPUSH
64624: CALL_OW 308
64628: IFFALSE 64646
// begin ComMoveToArea ( unit , goAway ) ;
64630: LD_VAR 0 1
64634: PPUSH
64635: LD_VAR 0 3
64639: PPUSH
64640: CALL_OW 113
// exit ;
64644: GO 64732
// end ; if task [ 1 ] [ 1 ] <> M then
64646: LD_VAR 0 7
64650: PUSH
64651: LD_INT 1
64653: ARRAY
64654: PUSH
64655: LD_INT 1
64657: ARRAY
64658: PUSH
64659: LD_STRING M
64661: NONEQUAL
64662: IFFALSE 64666
// exit ;
64664: GO 64732
// x := task [ 1 ] [ 2 ] ;
64666: LD_ADDR_VAR 0 5
64670: PUSH
64671: LD_VAR 0 7
64675: PUSH
64676: LD_INT 1
64678: ARRAY
64679: PUSH
64680: LD_INT 2
64682: ARRAY
64683: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64684: LD_ADDR_VAR 0 6
64688: PUSH
64689: LD_VAR 0 7
64693: PUSH
64694: LD_INT 1
64696: ARRAY
64697: PUSH
64698: LD_INT 3
64700: ARRAY
64701: ST_TO_ADDR
// if InArea ( x , y , area ) then
64702: LD_VAR 0 5
64706: PPUSH
64707: LD_VAR 0 6
64711: PPUSH
64712: LD_VAR 0 2
64716: PPUSH
64717: CALL_OW 309
64721: IFFALSE 64732
// ComStop ( unit ) ;
64723: LD_VAR 0 1
64727: PPUSH
64728: CALL_OW 141
// end ;
64732: LD_VAR 0 4
64736: RET
// export function Abs ( value ) ; begin
64737: LD_INT 0
64739: PPUSH
// result := value ;
64740: LD_ADDR_VAR 0 2
64744: PUSH
64745: LD_VAR 0 1
64749: ST_TO_ADDR
// if value < 0 then
64750: LD_VAR 0 1
64754: PUSH
64755: LD_INT 0
64757: LESS
64758: IFFALSE 64775
// result := value * - 1 ;
64760: LD_ADDR_VAR 0 2
64764: PUSH
64765: LD_VAR 0 1
64769: PUSH
64770: LD_INT 1
64772: NEG
64773: MUL
64774: ST_TO_ADDR
// end ;
64775: LD_VAR 0 2
64779: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64780: LD_INT 0
64782: PPUSH
64783: PPUSH
64784: PPUSH
64785: PPUSH
64786: PPUSH
64787: PPUSH
64788: PPUSH
64789: PPUSH
// if not unit or not building then
64790: LD_VAR 0 1
64794: NOT
64795: PUSH
64796: LD_VAR 0 2
64800: NOT
64801: OR
64802: IFFALSE 64806
// exit ;
64804: GO 65032
// x := GetX ( building ) ;
64806: LD_ADDR_VAR 0 4
64810: PUSH
64811: LD_VAR 0 2
64815: PPUSH
64816: CALL_OW 250
64820: ST_TO_ADDR
// y := GetY ( building ) ;
64821: LD_ADDR_VAR 0 6
64825: PUSH
64826: LD_VAR 0 2
64830: PPUSH
64831: CALL_OW 251
64835: ST_TO_ADDR
// d := GetDir ( building ) ;
64836: LD_ADDR_VAR 0 8
64840: PUSH
64841: LD_VAR 0 2
64845: PPUSH
64846: CALL_OW 254
64850: ST_TO_ADDR
// r := 4 ;
64851: LD_ADDR_VAR 0 9
64855: PUSH
64856: LD_INT 4
64858: ST_TO_ADDR
// for i := 1 to 5 do
64859: LD_ADDR_VAR 0 10
64863: PUSH
64864: DOUBLE
64865: LD_INT 1
64867: DEC
64868: ST_TO_ADDR
64869: LD_INT 5
64871: PUSH
64872: FOR_TO
64873: IFFALSE 65030
// begin _x := ShiftX ( x , d , r + i ) ;
64875: LD_ADDR_VAR 0 5
64879: PUSH
64880: LD_VAR 0 4
64884: PPUSH
64885: LD_VAR 0 8
64889: PPUSH
64890: LD_VAR 0 9
64894: PUSH
64895: LD_VAR 0 10
64899: PLUS
64900: PPUSH
64901: CALL_OW 272
64905: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64906: LD_ADDR_VAR 0 7
64910: PUSH
64911: LD_VAR 0 6
64915: PPUSH
64916: LD_VAR 0 8
64920: PPUSH
64921: LD_VAR 0 9
64925: PUSH
64926: LD_VAR 0 10
64930: PLUS
64931: PPUSH
64932: CALL_OW 273
64936: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64937: LD_VAR 0 5
64941: PPUSH
64942: LD_VAR 0 7
64946: PPUSH
64947: CALL_OW 488
64951: PUSH
64952: LD_VAR 0 5
64956: PPUSH
64957: LD_VAR 0 7
64961: PPUSH
64962: CALL_OW 428
64966: PPUSH
64967: CALL_OW 247
64971: PUSH
64972: LD_INT 3
64974: PUSH
64975: LD_INT 2
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: IN
64982: NOT
64983: AND
64984: IFFALSE 65028
// begin ComMoveXY ( unit , _x , _y ) ;
64986: LD_VAR 0 1
64990: PPUSH
64991: LD_VAR 0 5
64995: PPUSH
64996: LD_VAR 0 7
65000: PPUSH
65001: CALL_OW 111
// result := [ _x , _y ] ;
65005: LD_ADDR_VAR 0 3
65009: PUSH
65010: LD_VAR 0 5
65014: PUSH
65015: LD_VAR 0 7
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: ST_TO_ADDR
// exit ;
65024: POP
65025: POP
65026: GO 65032
// end ; end ;
65028: GO 64872
65030: POP
65031: POP
// end ;
65032: LD_VAR 0 3
65036: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65037: LD_INT 0
65039: PPUSH
65040: PPUSH
65041: PPUSH
// result := 0 ;
65042: LD_ADDR_VAR 0 3
65046: PUSH
65047: LD_INT 0
65049: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65050: LD_VAR 0 1
65054: PUSH
65055: LD_INT 0
65057: LESS
65058: PUSH
65059: LD_VAR 0 1
65063: PUSH
65064: LD_INT 8
65066: GREATER
65067: OR
65068: PUSH
65069: LD_VAR 0 2
65073: PUSH
65074: LD_INT 0
65076: LESS
65077: OR
65078: PUSH
65079: LD_VAR 0 2
65083: PUSH
65084: LD_INT 8
65086: GREATER
65087: OR
65088: IFFALSE 65092
// exit ;
65090: GO 65167
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65092: LD_ADDR_VAR 0 4
65096: PUSH
65097: LD_INT 22
65099: PUSH
65100: LD_VAR 0 2
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PPUSH
65109: CALL_OW 69
65113: PUSH
65114: FOR_IN
65115: IFFALSE 65165
// begin un := UnitShoot ( i ) ;
65117: LD_ADDR_VAR 0 5
65121: PUSH
65122: LD_VAR 0 4
65126: PPUSH
65127: CALL_OW 504
65131: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65132: LD_VAR 0 5
65136: PPUSH
65137: CALL_OW 255
65141: PUSH
65142: LD_VAR 0 1
65146: EQUAL
65147: IFFALSE 65163
// begin result := un ;
65149: LD_ADDR_VAR 0 3
65153: PUSH
65154: LD_VAR 0 5
65158: ST_TO_ADDR
// exit ;
65159: POP
65160: POP
65161: GO 65167
// end ; end ;
65163: GO 65114
65165: POP
65166: POP
// end ;
65167: LD_VAR 0 3
65171: RET
// export function GetCargoBay ( units ) ; begin
65172: LD_INT 0
65174: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65175: LD_ADDR_VAR 0 2
65179: PUSH
65180: LD_VAR 0 1
65184: PPUSH
65185: LD_INT 2
65187: PUSH
65188: LD_INT 34
65190: PUSH
65191: LD_INT 12
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: PUSH
65198: LD_INT 34
65200: PUSH
65201: LD_INT 51
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: LD_INT 34
65210: PUSH
65211: LD_INT 32
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: PUSH
65218: LD_INT 34
65220: PUSH
65221: LD_INT 89
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: LIST
65232: LIST
65233: LIST
65234: PPUSH
65235: CALL_OW 72
65239: ST_TO_ADDR
// end ;
65240: LD_VAR 0 2
65244: RET
// export function Negate ( value ) ; begin
65245: LD_INT 0
65247: PPUSH
// result := not value ;
65248: LD_ADDR_VAR 0 2
65252: PUSH
65253: LD_VAR 0 1
65257: NOT
65258: ST_TO_ADDR
// end ;
65259: LD_VAR 0 2
65263: RET
// export function Inc ( value ) ; begin
65264: LD_INT 0
65266: PPUSH
// result := value + 1 ;
65267: LD_ADDR_VAR 0 2
65271: PUSH
65272: LD_VAR 0 1
65276: PUSH
65277: LD_INT 1
65279: PLUS
65280: ST_TO_ADDR
// end ;
65281: LD_VAR 0 2
65285: RET
// export function Dec ( value ) ; begin
65286: LD_INT 0
65288: PPUSH
// result := value - 1 ;
65289: LD_ADDR_VAR 0 2
65293: PUSH
65294: LD_VAR 0 1
65298: PUSH
65299: LD_INT 1
65301: MINUS
65302: ST_TO_ADDR
// end ;
65303: LD_VAR 0 2
65307: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
65308: LD_INT 0
65310: PPUSH
65311: PPUSH
65312: PPUSH
65313: PPUSH
65314: PPUSH
65315: PPUSH
65316: PPUSH
65317: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
65318: LD_VAR 0 1
65322: PPUSH
65323: LD_VAR 0 2
65327: PPUSH
65328: CALL_OW 488
65332: NOT
65333: PUSH
65334: LD_VAR 0 3
65338: PPUSH
65339: LD_VAR 0 4
65343: PPUSH
65344: CALL_OW 488
65348: NOT
65349: OR
65350: IFFALSE 65363
// begin result := - 1 ;
65352: LD_ADDR_VAR 0 5
65356: PUSH
65357: LD_INT 1
65359: NEG
65360: ST_TO_ADDR
// exit ;
65361: GO 65598
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
65363: LD_ADDR_VAR 0 12
65367: PUSH
65368: LD_VAR 0 1
65372: PPUSH
65373: LD_VAR 0 2
65377: PPUSH
65378: LD_VAR 0 3
65382: PPUSH
65383: LD_VAR 0 4
65387: PPUSH
65388: CALL 64448 0 4
65392: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
65393: LD_ADDR_VAR 0 11
65397: PUSH
65398: LD_VAR 0 1
65402: PPUSH
65403: LD_VAR 0 2
65407: PPUSH
65408: LD_VAR 0 12
65412: PUSH
65413: LD_INT 1
65415: ARRAY
65416: PPUSH
65417: LD_VAR 0 12
65421: PUSH
65422: LD_INT 2
65424: ARRAY
65425: PPUSH
65426: CALL_OW 298
65430: ST_TO_ADDR
// distance := 9999 ;
65431: LD_ADDR_VAR 0 10
65435: PUSH
65436: LD_INT 9999
65438: ST_TO_ADDR
// for i := 0 to 5 do
65439: LD_ADDR_VAR 0 6
65443: PUSH
65444: DOUBLE
65445: LD_INT 0
65447: DEC
65448: ST_TO_ADDR
65449: LD_INT 5
65451: PUSH
65452: FOR_TO
65453: IFFALSE 65596
// begin _x := ShiftX ( x1 , i , centerDist ) ;
65455: LD_ADDR_VAR 0 7
65459: PUSH
65460: LD_VAR 0 1
65464: PPUSH
65465: LD_VAR 0 6
65469: PPUSH
65470: LD_VAR 0 11
65474: PPUSH
65475: CALL_OW 272
65479: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
65480: LD_ADDR_VAR 0 8
65484: PUSH
65485: LD_VAR 0 2
65489: PPUSH
65490: LD_VAR 0 6
65494: PPUSH
65495: LD_VAR 0 11
65499: PPUSH
65500: CALL_OW 273
65504: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65505: LD_VAR 0 7
65509: PPUSH
65510: LD_VAR 0 8
65514: PPUSH
65515: CALL_OW 488
65519: NOT
65520: IFFALSE 65524
// continue ;
65522: GO 65452
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
65524: LD_ADDR_VAR 0 9
65528: PUSH
65529: LD_VAR 0 12
65533: PUSH
65534: LD_INT 1
65536: ARRAY
65537: PPUSH
65538: LD_VAR 0 12
65542: PUSH
65543: LD_INT 2
65545: ARRAY
65546: PPUSH
65547: LD_VAR 0 7
65551: PPUSH
65552: LD_VAR 0 8
65556: PPUSH
65557: CALL_OW 298
65561: ST_TO_ADDR
// if tmp < distance then
65562: LD_VAR 0 9
65566: PUSH
65567: LD_VAR 0 10
65571: LESS
65572: IFFALSE 65594
// begin result := i ;
65574: LD_ADDR_VAR 0 5
65578: PUSH
65579: LD_VAR 0 6
65583: ST_TO_ADDR
// distance := tmp ;
65584: LD_ADDR_VAR 0 10
65588: PUSH
65589: LD_VAR 0 9
65593: ST_TO_ADDR
// end ; end ;
65594: GO 65452
65596: POP
65597: POP
// end ;
65598: LD_VAR 0 5
65602: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65603: LD_INT 0
65605: PPUSH
65606: PPUSH
// if not driver or not IsInUnit ( driver ) then
65607: LD_VAR 0 1
65611: NOT
65612: PUSH
65613: LD_VAR 0 1
65617: PPUSH
65618: CALL_OW 310
65622: NOT
65623: OR
65624: IFFALSE 65628
// exit ;
65626: GO 65718
// vehicle := IsInUnit ( driver ) ;
65628: LD_ADDR_VAR 0 3
65632: PUSH
65633: LD_VAR 0 1
65637: PPUSH
65638: CALL_OW 310
65642: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65643: LD_VAR 0 1
65647: PPUSH
65648: LD_STRING \
65650: PUSH
65651: LD_INT 0
65653: PUSH
65654: LD_INT 0
65656: PUSH
65657: LD_INT 0
65659: PUSH
65660: LD_INT 0
65662: PUSH
65663: LD_INT 0
65665: PUSH
65666: LD_INT 0
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: PUSH
65678: LD_STRING E
65680: PUSH
65681: LD_INT 0
65683: PUSH
65684: LD_INT 0
65686: PUSH
65687: LD_VAR 0 3
65691: PUSH
65692: LD_INT 0
65694: PUSH
65695: LD_INT 0
65697: PUSH
65698: LD_INT 0
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: LIST
65707: LIST
65708: LIST
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PPUSH
65714: CALL_OW 446
// end ;
65718: LD_VAR 0 2
65722: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65723: LD_INT 0
65725: PPUSH
65726: PPUSH
// if not driver or not IsInUnit ( driver ) then
65727: LD_VAR 0 1
65731: NOT
65732: PUSH
65733: LD_VAR 0 1
65737: PPUSH
65738: CALL_OW 310
65742: NOT
65743: OR
65744: IFFALSE 65748
// exit ;
65746: GO 65838
// vehicle := IsInUnit ( driver ) ;
65748: LD_ADDR_VAR 0 3
65752: PUSH
65753: LD_VAR 0 1
65757: PPUSH
65758: CALL_OW 310
65762: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65763: LD_VAR 0 1
65767: PPUSH
65768: LD_STRING \
65770: PUSH
65771: LD_INT 0
65773: PUSH
65774: LD_INT 0
65776: PUSH
65777: LD_INT 0
65779: PUSH
65780: LD_INT 0
65782: PUSH
65783: LD_INT 0
65785: PUSH
65786: LD_INT 0
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: PUSH
65798: LD_STRING E
65800: PUSH
65801: LD_INT 0
65803: PUSH
65804: LD_INT 0
65806: PUSH
65807: LD_VAR 0 3
65811: PUSH
65812: LD_INT 0
65814: PUSH
65815: LD_INT 0
65817: PUSH
65818: LD_INT 0
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: LIST
65825: LIST
65826: LIST
65827: LIST
65828: LIST
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: PPUSH
65834: CALL_OW 447
// end ;
65838: LD_VAR 0 2
65842: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65843: LD_INT 0
65845: PPUSH
65846: PPUSH
65847: PPUSH
// tmp := [ ] ;
65848: LD_ADDR_VAR 0 5
65852: PUSH
65853: EMPTY
65854: ST_TO_ADDR
// for i in units do
65855: LD_ADDR_VAR 0 4
65859: PUSH
65860: LD_VAR 0 1
65864: PUSH
65865: FOR_IN
65866: IFFALSE 65904
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65868: LD_ADDR_VAR 0 5
65872: PUSH
65873: LD_VAR 0 5
65877: PPUSH
65878: LD_VAR 0 5
65882: PUSH
65883: LD_INT 1
65885: PLUS
65886: PPUSH
65887: LD_VAR 0 4
65891: PPUSH
65892: CALL_OW 256
65896: PPUSH
65897: CALL_OW 2
65901: ST_TO_ADDR
65902: GO 65865
65904: POP
65905: POP
// if not tmp then
65906: LD_VAR 0 5
65910: NOT
65911: IFFALSE 65915
// exit ;
65913: GO 65963
// if asc then
65915: LD_VAR 0 2
65919: IFFALSE 65943
// result := SortListByListAsc ( units , tmp ) else
65921: LD_ADDR_VAR 0 3
65925: PUSH
65926: LD_VAR 0 1
65930: PPUSH
65931: LD_VAR 0 5
65935: PPUSH
65936: CALL_OW 76
65940: ST_TO_ADDR
65941: GO 65963
// result := SortListByListDesc ( units , tmp ) ;
65943: LD_ADDR_VAR 0 3
65947: PUSH
65948: LD_VAR 0 1
65952: PPUSH
65953: LD_VAR 0 5
65957: PPUSH
65958: CALL_OW 77
65962: ST_TO_ADDR
// end ;
65963: LD_VAR 0 3
65967: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65968: LD_INT 0
65970: PPUSH
65971: PPUSH
// task := GetTaskList ( mech ) ;
65972: LD_ADDR_VAR 0 4
65976: PUSH
65977: LD_VAR 0 1
65981: PPUSH
65982: CALL_OW 437
65986: ST_TO_ADDR
// if not task then
65987: LD_VAR 0 4
65991: NOT
65992: IFFALSE 65996
// exit ;
65994: GO 66038
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65996: LD_ADDR_VAR 0 3
66000: PUSH
66001: LD_VAR 0 4
66005: PUSH
66006: LD_INT 1
66008: ARRAY
66009: PUSH
66010: LD_INT 1
66012: ARRAY
66013: PUSH
66014: LD_STRING r
66016: EQUAL
66017: PUSH
66018: LD_VAR 0 4
66022: PUSH
66023: LD_INT 1
66025: ARRAY
66026: PUSH
66027: LD_INT 4
66029: ARRAY
66030: PUSH
66031: LD_VAR 0 2
66035: EQUAL
66036: AND
66037: ST_TO_ADDR
// end ;
66038: LD_VAR 0 3
66042: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66043: LD_INT 0
66045: PPUSH
// SetDir ( unit , d ) ;
66046: LD_VAR 0 1
66050: PPUSH
66051: LD_VAR 0 4
66055: PPUSH
66056: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66060: LD_VAR 0 1
66064: PPUSH
66065: LD_VAR 0 2
66069: PPUSH
66070: LD_VAR 0 3
66074: PPUSH
66075: LD_VAR 0 5
66079: PPUSH
66080: CALL_OW 48
// end ;
66084: LD_VAR 0 6
66088: RET
// export function ToNaturalNumber ( number ) ; begin
66089: LD_INT 0
66091: PPUSH
// result := number div 1 ;
66092: LD_ADDR_VAR 0 2
66096: PUSH
66097: LD_VAR 0 1
66101: PUSH
66102: LD_INT 1
66104: DIV
66105: ST_TO_ADDR
// if number < 0 then
66106: LD_VAR 0 1
66110: PUSH
66111: LD_INT 0
66113: LESS
66114: IFFALSE 66124
// result := 0 ;
66116: LD_ADDR_VAR 0 2
66120: PUSH
66121: LD_INT 0
66123: ST_TO_ADDR
// end ;
66124: LD_VAR 0 2
66128: RET
// export function SortByClass ( units , class ) ; var un ; begin
66129: LD_INT 0
66131: PPUSH
66132: PPUSH
// if not units or not class then
66133: LD_VAR 0 1
66137: NOT
66138: PUSH
66139: LD_VAR 0 2
66143: NOT
66144: OR
66145: IFFALSE 66149
// exit ;
66147: GO 66244
// result := [ ] ;
66149: LD_ADDR_VAR 0 3
66153: PUSH
66154: EMPTY
66155: ST_TO_ADDR
// for un in units do
66156: LD_ADDR_VAR 0 4
66160: PUSH
66161: LD_VAR 0 1
66165: PUSH
66166: FOR_IN
66167: IFFALSE 66242
// if GetClass ( un ) = class then
66169: LD_VAR 0 4
66173: PPUSH
66174: CALL_OW 257
66178: PUSH
66179: LD_VAR 0 2
66183: EQUAL
66184: IFFALSE 66211
// result := Insert ( result , 1 , un ) else
66186: LD_ADDR_VAR 0 3
66190: PUSH
66191: LD_VAR 0 3
66195: PPUSH
66196: LD_INT 1
66198: PPUSH
66199: LD_VAR 0 4
66203: PPUSH
66204: CALL_OW 2
66208: ST_TO_ADDR
66209: GO 66240
// result := Replace ( result , result + 1 , un ) ;
66211: LD_ADDR_VAR 0 3
66215: PUSH
66216: LD_VAR 0 3
66220: PPUSH
66221: LD_VAR 0 3
66225: PUSH
66226: LD_INT 1
66228: PLUS
66229: PPUSH
66230: LD_VAR 0 4
66234: PPUSH
66235: CALL_OW 1
66239: ST_TO_ADDR
66240: GO 66166
66242: POP
66243: POP
// end ;
66244: LD_VAR 0 3
66248: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66249: LD_INT 0
66251: PPUSH
66252: PPUSH
66253: PPUSH
66254: PPUSH
66255: PPUSH
66256: PPUSH
66257: PPUSH
// result := [ ] ;
66258: LD_ADDR_VAR 0 4
66262: PUSH
66263: EMPTY
66264: ST_TO_ADDR
// if x - r < 0 then
66265: LD_VAR 0 1
66269: PUSH
66270: LD_VAR 0 3
66274: MINUS
66275: PUSH
66276: LD_INT 0
66278: LESS
66279: IFFALSE 66291
// min_x := 0 else
66281: LD_ADDR_VAR 0 8
66285: PUSH
66286: LD_INT 0
66288: ST_TO_ADDR
66289: GO 66307
// min_x := x - r ;
66291: LD_ADDR_VAR 0 8
66295: PUSH
66296: LD_VAR 0 1
66300: PUSH
66301: LD_VAR 0 3
66305: MINUS
66306: ST_TO_ADDR
// if y - r < 0 then
66307: LD_VAR 0 2
66311: PUSH
66312: LD_VAR 0 3
66316: MINUS
66317: PUSH
66318: LD_INT 0
66320: LESS
66321: IFFALSE 66333
// min_y := 0 else
66323: LD_ADDR_VAR 0 7
66327: PUSH
66328: LD_INT 0
66330: ST_TO_ADDR
66331: GO 66349
// min_y := y - r ;
66333: LD_ADDR_VAR 0 7
66337: PUSH
66338: LD_VAR 0 2
66342: PUSH
66343: LD_VAR 0 3
66347: MINUS
66348: ST_TO_ADDR
// max_x := x + r ;
66349: LD_ADDR_VAR 0 9
66353: PUSH
66354: LD_VAR 0 1
66358: PUSH
66359: LD_VAR 0 3
66363: PLUS
66364: ST_TO_ADDR
// max_y := y + r ;
66365: LD_ADDR_VAR 0 10
66369: PUSH
66370: LD_VAR 0 2
66374: PUSH
66375: LD_VAR 0 3
66379: PLUS
66380: ST_TO_ADDR
// for _x = min_x to max_x do
66381: LD_ADDR_VAR 0 5
66385: PUSH
66386: DOUBLE
66387: LD_VAR 0 8
66391: DEC
66392: ST_TO_ADDR
66393: LD_VAR 0 9
66397: PUSH
66398: FOR_TO
66399: IFFALSE 66500
// for _y = min_y to max_y do
66401: LD_ADDR_VAR 0 6
66405: PUSH
66406: DOUBLE
66407: LD_VAR 0 7
66411: DEC
66412: ST_TO_ADDR
66413: LD_VAR 0 10
66417: PUSH
66418: FOR_TO
66419: IFFALSE 66496
// begin if not ValidHex ( _x , _y ) then
66421: LD_VAR 0 5
66425: PPUSH
66426: LD_VAR 0 6
66430: PPUSH
66431: CALL_OW 488
66435: NOT
66436: IFFALSE 66440
// continue ;
66438: GO 66418
// if GetResourceTypeXY ( _x , _y ) then
66440: LD_VAR 0 5
66444: PPUSH
66445: LD_VAR 0 6
66449: PPUSH
66450: CALL_OW 283
66454: IFFALSE 66494
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
66456: LD_ADDR_VAR 0 4
66460: PUSH
66461: LD_VAR 0 4
66465: PPUSH
66466: LD_VAR 0 4
66470: PUSH
66471: LD_INT 1
66473: PLUS
66474: PPUSH
66475: LD_VAR 0 5
66479: PUSH
66480: LD_VAR 0 6
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PPUSH
66489: CALL_OW 1
66493: ST_TO_ADDR
// end ;
66494: GO 66418
66496: POP
66497: POP
66498: GO 66398
66500: POP
66501: POP
// end ;
66502: LD_VAR 0 4
66506: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
66507: LD_INT 0
66509: PPUSH
66510: PPUSH
66511: PPUSH
66512: PPUSH
66513: PPUSH
66514: PPUSH
66515: PPUSH
66516: PPUSH
// if not units then
66517: LD_VAR 0 1
66521: NOT
66522: IFFALSE 66526
// exit ;
66524: GO 67050
// result := UnitFilter ( units , [ f_ok ] ) ;
66526: LD_ADDR_VAR 0 3
66530: PUSH
66531: LD_VAR 0 1
66535: PPUSH
66536: LD_INT 50
66538: PUSH
66539: EMPTY
66540: LIST
66541: PPUSH
66542: CALL_OW 72
66546: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
66547: LD_ADDR_VAR 0 8
66551: PUSH
66552: LD_VAR 0 1
66556: PUSH
66557: LD_INT 1
66559: ARRAY
66560: PPUSH
66561: CALL_OW 255
66565: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
66566: LD_ADDR_VAR 0 10
66570: PUSH
66571: LD_INT 29
66573: PUSH
66574: LD_INT 91
66576: PUSH
66577: LD_INT 49
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: LIST
66584: ST_TO_ADDR
// if not result then
66585: LD_VAR 0 3
66589: NOT
66590: IFFALSE 66594
// exit ;
66592: GO 67050
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
66594: LD_ADDR_VAR 0 5
66598: PUSH
66599: LD_INT 81
66601: PUSH
66602: LD_VAR 0 8
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PPUSH
66611: CALL_OW 69
66615: ST_TO_ADDR
// for i in result do
66616: LD_ADDR_VAR 0 4
66620: PUSH
66621: LD_VAR 0 3
66625: PUSH
66626: FOR_IN
66627: IFFALSE 67048
// begin tag := GetTag ( i ) + 1 ;
66629: LD_ADDR_VAR 0 9
66633: PUSH
66634: LD_VAR 0 4
66638: PPUSH
66639: CALL_OW 110
66643: PUSH
66644: LD_INT 1
66646: PLUS
66647: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
66648: LD_ADDR_VAR 0 7
66652: PUSH
66653: LD_VAR 0 4
66657: PPUSH
66658: CALL_OW 250
66662: PPUSH
66663: LD_VAR 0 4
66667: PPUSH
66668: CALL_OW 251
66672: PPUSH
66673: LD_INT 6
66675: PPUSH
66676: CALL 66249 0 3
66680: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
66681: LD_VAR 0 4
66685: PPUSH
66686: CALL_OW 247
66690: PUSH
66691: LD_INT 2
66693: EQUAL
66694: PUSH
66695: LD_VAR 0 7
66699: AND
66700: PUSH
66701: LD_VAR 0 4
66705: PPUSH
66706: CALL_OW 264
66710: PUSH
66711: LD_VAR 0 10
66715: IN
66716: NOT
66717: AND
66718: IFFALSE 66757
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
66720: LD_VAR 0 4
66724: PPUSH
66725: LD_VAR 0 7
66729: PUSH
66730: LD_INT 1
66732: ARRAY
66733: PUSH
66734: LD_INT 1
66736: ARRAY
66737: PPUSH
66738: LD_VAR 0 7
66742: PUSH
66743: LD_INT 1
66745: ARRAY
66746: PUSH
66747: LD_INT 2
66749: ARRAY
66750: PPUSH
66751: CALL_OW 116
66755: GO 67046
// if path > tag then
66757: LD_VAR 0 2
66761: PUSH
66762: LD_VAR 0 9
66766: GREATER
66767: IFFALSE 66975
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
66769: LD_ADDR_VAR 0 6
66773: PUSH
66774: LD_VAR 0 5
66778: PPUSH
66779: LD_INT 91
66781: PUSH
66782: LD_VAR 0 4
66786: PUSH
66787: LD_INT 8
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: LIST
66794: PPUSH
66795: CALL_OW 72
66799: ST_TO_ADDR
// if nearEnemy then
66800: LD_VAR 0 6
66804: IFFALSE 66873
// begin if GetWeapon ( i ) = ru_time_lapser then
66806: LD_VAR 0 4
66810: PPUSH
66811: CALL_OW 264
66815: PUSH
66816: LD_INT 49
66818: EQUAL
66819: IFFALSE 66847
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
66821: LD_VAR 0 4
66825: PPUSH
66826: LD_VAR 0 6
66830: PPUSH
66831: LD_VAR 0 4
66835: PPUSH
66836: CALL_OW 74
66840: PPUSH
66841: CALL_OW 112
66845: GO 66871
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
66847: LD_VAR 0 4
66851: PPUSH
66852: LD_VAR 0 6
66856: PPUSH
66857: LD_VAR 0 4
66861: PPUSH
66862: CALL_OW 74
66866: PPUSH
66867: CALL 67975 0 2
// end else
66871: GO 66973
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
66873: LD_VAR 0 4
66877: PPUSH
66878: LD_VAR 0 2
66882: PUSH
66883: LD_VAR 0 9
66887: ARRAY
66888: PUSH
66889: LD_INT 1
66891: ARRAY
66892: PPUSH
66893: LD_VAR 0 2
66897: PUSH
66898: LD_VAR 0 9
66902: ARRAY
66903: PUSH
66904: LD_INT 2
66906: ARRAY
66907: PPUSH
66908: CALL_OW 297
66912: PUSH
66913: LD_INT 6
66915: GREATER
66916: IFFALSE 66959
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
66918: LD_VAR 0 4
66922: PPUSH
66923: LD_VAR 0 2
66927: PUSH
66928: LD_VAR 0 9
66932: ARRAY
66933: PUSH
66934: LD_INT 1
66936: ARRAY
66937: PPUSH
66938: LD_VAR 0 2
66942: PUSH
66943: LD_VAR 0 9
66947: ARRAY
66948: PUSH
66949: LD_INT 2
66951: ARRAY
66952: PPUSH
66953: CALL_OW 114
66957: GO 66973
// SetTag ( i , tag ) ;
66959: LD_VAR 0 4
66963: PPUSH
66964: LD_VAR 0 9
66968: PPUSH
66969: CALL_OW 109
// end else
66973: GO 67046
// if enemy then
66975: LD_VAR 0 5
66979: IFFALSE 67046
// begin if GetWeapon ( i ) = ru_time_lapser then
66981: LD_VAR 0 4
66985: PPUSH
66986: CALL_OW 264
66990: PUSH
66991: LD_INT 49
66993: EQUAL
66994: IFFALSE 67022
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
66996: LD_VAR 0 4
67000: PPUSH
67001: LD_VAR 0 5
67005: PPUSH
67006: LD_VAR 0 4
67010: PPUSH
67011: CALL_OW 74
67015: PPUSH
67016: CALL_OW 112
67020: GO 67046
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67022: LD_VAR 0 4
67026: PPUSH
67027: LD_VAR 0 5
67031: PPUSH
67032: LD_VAR 0 4
67036: PPUSH
67037: CALL_OW 74
67041: PPUSH
67042: CALL 67975 0 2
// end ; end ;
67046: GO 66626
67048: POP
67049: POP
// end ;
67050: LD_VAR 0 3
67054: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67055: LD_INT 0
67057: PPUSH
67058: PPUSH
67059: PPUSH
// if not unit or IsInUnit ( unit ) then
67060: LD_VAR 0 1
67064: NOT
67065: PUSH
67066: LD_VAR 0 1
67070: PPUSH
67071: CALL_OW 310
67075: OR
67076: IFFALSE 67080
// exit ;
67078: GO 67171
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67080: LD_ADDR_VAR 0 4
67084: PUSH
67085: LD_VAR 0 1
67089: PPUSH
67090: CALL_OW 250
67094: PPUSH
67095: LD_VAR 0 2
67099: PPUSH
67100: LD_INT 1
67102: PPUSH
67103: CALL_OW 272
67107: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67108: LD_ADDR_VAR 0 5
67112: PUSH
67113: LD_VAR 0 1
67117: PPUSH
67118: CALL_OW 251
67122: PPUSH
67123: LD_VAR 0 2
67127: PPUSH
67128: LD_INT 1
67130: PPUSH
67131: CALL_OW 273
67135: ST_TO_ADDR
// if ValidHex ( x , y ) then
67136: LD_VAR 0 4
67140: PPUSH
67141: LD_VAR 0 5
67145: PPUSH
67146: CALL_OW 488
67150: IFFALSE 67171
// ComTurnXY ( unit , x , y ) ;
67152: LD_VAR 0 1
67156: PPUSH
67157: LD_VAR 0 4
67161: PPUSH
67162: LD_VAR 0 5
67166: PPUSH
67167: CALL_OW 118
// end ;
67171: LD_VAR 0 3
67175: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67176: LD_INT 0
67178: PPUSH
67179: PPUSH
// result := false ;
67180: LD_ADDR_VAR 0 3
67184: PUSH
67185: LD_INT 0
67187: ST_TO_ADDR
// if not units then
67188: LD_VAR 0 2
67192: NOT
67193: IFFALSE 67197
// exit ;
67195: GO 67242
// for i in units do
67197: LD_ADDR_VAR 0 4
67201: PUSH
67202: LD_VAR 0 2
67206: PUSH
67207: FOR_IN
67208: IFFALSE 67240
// if See ( side , i ) then
67210: LD_VAR 0 1
67214: PPUSH
67215: LD_VAR 0 4
67219: PPUSH
67220: CALL_OW 292
67224: IFFALSE 67238
// begin result := true ;
67226: LD_ADDR_VAR 0 3
67230: PUSH
67231: LD_INT 1
67233: ST_TO_ADDR
// exit ;
67234: POP
67235: POP
67236: GO 67242
// end ;
67238: GO 67207
67240: POP
67241: POP
// end ;
67242: LD_VAR 0 3
67246: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
67247: LD_INT 0
67249: PPUSH
67250: PPUSH
67251: PPUSH
67252: PPUSH
// if not unit or not points then
67253: LD_VAR 0 1
67257: NOT
67258: PUSH
67259: LD_VAR 0 2
67263: NOT
67264: OR
67265: IFFALSE 67269
// exit ;
67267: GO 67359
// dist := 99999 ;
67269: LD_ADDR_VAR 0 5
67273: PUSH
67274: LD_INT 99999
67276: ST_TO_ADDR
// for i in points do
67277: LD_ADDR_VAR 0 4
67281: PUSH
67282: LD_VAR 0 2
67286: PUSH
67287: FOR_IN
67288: IFFALSE 67357
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67290: LD_ADDR_VAR 0 6
67294: PUSH
67295: LD_VAR 0 1
67299: PPUSH
67300: LD_VAR 0 4
67304: PUSH
67305: LD_INT 1
67307: ARRAY
67308: PPUSH
67309: LD_VAR 0 4
67313: PUSH
67314: LD_INT 2
67316: ARRAY
67317: PPUSH
67318: CALL_OW 297
67322: ST_TO_ADDR
// if tmpDist < dist then
67323: LD_VAR 0 6
67327: PUSH
67328: LD_VAR 0 5
67332: LESS
67333: IFFALSE 67355
// begin result := i ;
67335: LD_ADDR_VAR 0 3
67339: PUSH
67340: LD_VAR 0 4
67344: ST_TO_ADDR
// dist := tmpDist ;
67345: LD_ADDR_VAR 0 5
67349: PUSH
67350: LD_VAR 0 6
67354: ST_TO_ADDR
// end ; end ;
67355: GO 67287
67357: POP
67358: POP
// end ;
67359: LD_VAR 0 3
67363: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
67364: LD_INT 0
67366: PPUSH
// uc_side := side ;
67367: LD_ADDR_OWVAR 20
67371: PUSH
67372: LD_VAR 0 1
67376: ST_TO_ADDR
// uc_nation := 3 ;
67377: LD_ADDR_OWVAR 21
67381: PUSH
67382: LD_INT 3
67384: ST_TO_ADDR
// vc_chassis := 25 ;
67385: LD_ADDR_OWVAR 37
67389: PUSH
67390: LD_INT 25
67392: ST_TO_ADDR
// vc_engine := engine_siberite ;
67393: LD_ADDR_OWVAR 39
67397: PUSH
67398: LD_INT 3
67400: ST_TO_ADDR
// vc_control := control_computer ;
67401: LD_ADDR_OWVAR 38
67405: PUSH
67406: LD_INT 3
67408: ST_TO_ADDR
// vc_weapon := 59 ;
67409: LD_ADDR_OWVAR 40
67413: PUSH
67414: LD_INT 59
67416: ST_TO_ADDR
// result := CreateVehicle ;
67417: LD_ADDR_VAR 0 5
67421: PUSH
67422: CALL_OW 45
67426: ST_TO_ADDR
// SetDir ( result , d ) ;
67427: LD_VAR 0 5
67431: PPUSH
67432: LD_VAR 0 4
67436: PPUSH
67437: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
67441: LD_VAR 0 5
67445: PPUSH
67446: LD_VAR 0 2
67450: PPUSH
67451: LD_VAR 0 3
67455: PPUSH
67456: LD_INT 0
67458: PPUSH
67459: CALL_OW 48
// end ;
67463: LD_VAR 0 5
67467: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
67468: LD_INT 0
67470: PPUSH
67471: PPUSH
67472: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
67473: LD_ADDR_VAR 0 2
67477: PUSH
67478: LD_INT 0
67480: PUSH
67481: LD_INT 0
67483: PUSH
67484: LD_INT 0
67486: PUSH
67487: LD_INT 0
67489: PUSH
67490: EMPTY
67491: LIST
67492: LIST
67493: LIST
67494: LIST
67495: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
67496: LD_VAR 0 1
67500: NOT
67501: PUSH
67502: LD_VAR 0 1
67506: PPUSH
67507: CALL_OW 264
67511: PUSH
67512: LD_INT 12
67514: PUSH
67515: LD_INT 51
67517: PUSH
67518: LD_INT 32
67520: PUSH
67521: LD_INT 89
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: LIST
67528: LIST
67529: IN
67530: NOT
67531: OR
67532: IFFALSE 67536
// exit ;
67534: GO 67634
// for i := 1 to 3 do
67536: LD_ADDR_VAR 0 3
67540: PUSH
67541: DOUBLE
67542: LD_INT 1
67544: DEC
67545: ST_TO_ADDR
67546: LD_INT 3
67548: PUSH
67549: FOR_TO
67550: IFFALSE 67632
// begin tmp := GetCargo ( cargo , i ) ;
67552: LD_ADDR_VAR 0 4
67556: PUSH
67557: LD_VAR 0 1
67561: PPUSH
67562: LD_VAR 0 3
67566: PPUSH
67567: CALL_OW 289
67571: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
67572: LD_ADDR_VAR 0 2
67576: PUSH
67577: LD_VAR 0 2
67581: PPUSH
67582: LD_VAR 0 3
67586: PPUSH
67587: LD_VAR 0 4
67591: PPUSH
67592: CALL_OW 1
67596: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
67597: LD_ADDR_VAR 0 2
67601: PUSH
67602: LD_VAR 0 2
67606: PPUSH
67607: LD_INT 4
67609: PPUSH
67610: LD_VAR 0 2
67614: PUSH
67615: LD_INT 4
67617: ARRAY
67618: PUSH
67619: LD_VAR 0 4
67623: PLUS
67624: PPUSH
67625: CALL_OW 1
67629: ST_TO_ADDR
// end ;
67630: GO 67549
67632: POP
67633: POP
// end ;
67634: LD_VAR 0 2
67638: RET
// export function Length ( array ) ; begin
67639: LD_INT 0
67641: PPUSH
// result := array + 0 ;
67642: LD_ADDR_VAR 0 2
67646: PUSH
67647: LD_VAR 0 1
67651: PUSH
67652: LD_INT 0
67654: PLUS
67655: ST_TO_ADDR
// end ;
67656: LD_VAR 0 2
67660: RET
// export function PrepareArray ( array ) ; begin
67661: LD_INT 0
67663: PPUSH
// result := array diff 0 ;
67664: LD_ADDR_VAR 0 2
67668: PUSH
67669: LD_VAR 0 1
67673: PUSH
67674: LD_INT 0
67676: DIFF
67677: ST_TO_ADDR
// if not result [ 1 ] then
67678: LD_VAR 0 2
67682: PUSH
67683: LD_INT 1
67685: ARRAY
67686: NOT
67687: IFFALSE 67707
// result := Delete ( result , 1 ) ;
67689: LD_ADDR_VAR 0 2
67693: PUSH
67694: LD_VAR 0 2
67698: PPUSH
67699: LD_INT 1
67701: PPUSH
67702: CALL_OW 3
67706: ST_TO_ADDR
// end ;
67707: LD_VAR 0 2
67711: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
67712: LD_INT 0
67714: PPUSH
67715: PPUSH
67716: PPUSH
67717: PPUSH
// sibRocketRange := 25 ;
67718: LD_ADDR_VAR 0 6
67722: PUSH
67723: LD_INT 25
67725: ST_TO_ADDR
// result := false ;
67726: LD_ADDR_VAR 0 4
67730: PUSH
67731: LD_INT 0
67733: ST_TO_ADDR
// for i := 0 to 5 do
67734: LD_ADDR_VAR 0 5
67738: PUSH
67739: DOUBLE
67740: LD_INT 0
67742: DEC
67743: ST_TO_ADDR
67744: LD_INT 5
67746: PUSH
67747: FOR_TO
67748: IFFALSE 67815
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
67750: LD_VAR 0 1
67754: PPUSH
67755: LD_VAR 0 5
67759: PPUSH
67760: LD_VAR 0 6
67764: PPUSH
67765: CALL_OW 272
67769: PPUSH
67770: LD_VAR 0 2
67774: PPUSH
67775: LD_VAR 0 5
67779: PPUSH
67780: LD_VAR 0 6
67784: PPUSH
67785: CALL_OW 273
67789: PPUSH
67790: LD_VAR 0 3
67794: PPUSH
67795: CALL_OW 309
67799: IFFALSE 67813
// begin result := true ;
67801: LD_ADDR_VAR 0 4
67805: PUSH
67806: LD_INT 1
67808: ST_TO_ADDR
// exit ;
67809: POP
67810: POP
67811: GO 67817
// end ;
67813: GO 67747
67815: POP
67816: POP
// end ;
67817: LD_VAR 0 4
67821: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
67822: LD_INT 0
67824: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
67825: LD_VAR 0 1
67829: PPUSH
67830: LD_VAR 0 2
67834: PPUSH
67835: LD_INT 0
67837: PPUSH
67838: LD_INT 0
67840: PPUSH
67841: LD_INT 1
67843: PPUSH
67844: LD_INT 0
67846: PPUSH
67847: CALL_OW 587
// end ;
67851: LD_VAR 0 3
67855: RET
// export function CenterOnNow ( unit ) ; begin
67856: LD_INT 0
67858: PPUSH
// result := IsInUnit ( unit ) ;
67859: LD_ADDR_VAR 0 2
67863: PUSH
67864: LD_VAR 0 1
67868: PPUSH
67869: CALL_OW 310
67873: ST_TO_ADDR
// if not result then
67874: LD_VAR 0 2
67878: NOT
67879: IFFALSE 67891
// result := unit ;
67881: LD_ADDR_VAR 0 2
67885: PUSH
67886: LD_VAR 0 1
67890: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
67891: LD_VAR 0 1
67895: PPUSH
67896: CALL_OW 87
// end ;
67900: LD_VAR 0 2
67904: RET
// export function ComMoveHex ( unit , hex ) ; begin
67905: LD_INT 0
67907: PPUSH
// if not hex then
67908: LD_VAR 0 2
67912: NOT
67913: IFFALSE 67917
// exit ;
67915: GO 67970
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
67917: LD_VAR 0 2
67921: PUSH
67922: LD_INT 1
67924: ARRAY
67925: PPUSH
67926: LD_VAR 0 2
67930: PUSH
67931: LD_INT 2
67933: ARRAY
67934: PPUSH
67935: CALL_OW 428
67939: IFFALSE 67943
// exit ;
67941: GO 67970
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
67943: LD_VAR 0 1
67947: PPUSH
67948: LD_VAR 0 2
67952: PUSH
67953: LD_INT 1
67955: ARRAY
67956: PPUSH
67957: LD_VAR 0 2
67961: PUSH
67962: LD_INT 2
67964: ARRAY
67965: PPUSH
67966: CALL_OW 111
// end ;
67970: LD_VAR 0 3
67974: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
67975: LD_INT 0
67977: PPUSH
67978: PPUSH
67979: PPUSH
// if not unit or not enemy then
67980: LD_VAR 0 1
67984: NOT
67985: PUSH
67986: LD_VAR 0 2
67990: NOT
67991: OR
67992: IFFALSE 67996
// exit ;
67994: GO 68120
// x := GetX ( enemy ) ;
67996: LD_ADDR_VAR 0 4
68000: PUSH
68001: LD_VAR 0 2
68005: PPUSH
68006: CALL_OW 250
68010: ST_TO_ADDR
// y := GetY ( enemy ) ;
68011: LD_ADDR_VAR 0 5
68015: PUSH
68016: LD_VAR 0 2
68020: PPUSH
68021: CALL_OW 251
68025: ST_TO_ADDR
// if ValidHex ( x , y ) then
68026: LD_VAR 0 4
68030: PPUSH
68031: LD_VAR 0 5
68035: PPUSH
68036: CALL_OW 488
68040: IFFALSE 68120
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
68042: LD_VAR 0 2
68046: PPUSH
68047: CALL_OW 247
68051: PUSH
68052: LD_INT 3
68054: PUSH
68055: LD_INT 2
68057: PUSH
68058: EMPTY
68059: LIST
68060: LIST
68061: IN
68062: PUSH
68063: LD_VAR 0 1
68067: PPUSH
68068: CALL_OW 255
68072: PPUSH
68073: LD_VAR 0 2
68077: PPUSH
68078: CALL_OW 292
68082: AND
68083: IFFALSE 68101
// ComAttackUnit ( unit , enemy ) else
68085: LD_VAR 0 1
68089: PPUSH
68090: LD_VAR 0 2
68094: PPUSH
68095: CALL_OW 115
68099: GO 68120
// ComAgressiveMove ( unit , x , y ) ;
68101: LD_VAR 0 1
68105: PPUSH
68106: LD_VAR 0 4
68110: PPUSH
68111: LD_VAR 0 5
68115: PPUSH
68116: CALL_OW 114
// end ;
68120: LD_VAR 0 3
68124: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
68125: LD_INT 0
68127: PPUSH
68128: PPUSH
68129: PPUSH
// list := AreaToList ( area , 0 ) ;
68130: LD_ADDR_VAR 0 5
68134: PUSH
68135: LD_VAR 0 1
68139: PPUSH
68140: LD_INT 0
68142: PPUSH
68143: CALL_OW 517
68147: ST_TO_ADDR
// if not list then
68148: LD_VAR 0 5
68152: NOT
68153: IFFALSE 68157
// exit ;
68155: GO 68287
// if all then
68157: LD_VAR 0 2
68161: IFFALSE 68249
// begin for i := 1 to list [ 1 ] do
68163: LD_ADDR_VAR 0 4
68167: PUSH
68168: DOUBLE
68169: LD_INT 1
68171: DEC
68172: ST_TO_ADDR
68173: LD_VAR 0 5
68177: PUSH
68178: LD_INT 1
68180: ARRAY
68181: PUSH
68182: FOR_TO
68183: IFFALSE 68245
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
68185: LD_ADDR_VAR 0 3
68189: PUSH
68190: LD_VAR 0 3
68194: PPUSH
68195: LD_VAR 0 3
68199: PUSH
68200: LD_INT 1
68202: PLUS
68203: PPUSH
68204: LD_VAR 0 5
68208: PUSH
68209: LD_INT 1
68211: ARRAY
68212: PUSH
68213: LD_VAR 0 4
68217: ARRAY
68218: PUSH
68219: LD_VAR 0 5
68223: PUSH
68224: LD_INT 2
68226: ARRAY
68227: PUSH
68228: LD_VAR 0 4
68232: ARRAY
68233: PUSH
68234: EMPTY
68235: LIST
68236: LIST
68237: PPUSH
68238: CALL_OW 1
68242: ST_TO_ADDR
68243: GO 68182
68245: POP
68246: POP
// exit ;
68247: GO 68287
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
68249: LD_ADDR_VAR 0 3
68253: PUSH
68254: LD_VAR 0 5
68258: PUSH
68259: LD_INT 1
68261: ARRAY
68262: PUSH
68263: LD_INT 1
68265: ARRAY
68266: PUSH
68267: LD_VAR 0 5
68271: PUSH
68272: LD_INT 2
68274: ARRAY
68275: PUSH
68276: LD_INT 1
68278: ARRAY
68279: PUSH
68280: EMPTY
68281: LIST
68282: LIST
68283: PUSH
68284: EMPTY
68285: LIST
68286: ST_TO_ADDR
// end ;
68287: LD_VAR 0 3
68291: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
68292: LD_INT 0
68294: PPUSH
68295: PPUSH
// list := AreaToList ( area , 0 ) ;
68296: LD_ADDR_VAR 0 4
68300: PUSH
68301: LD_VAR 0 1
68305: PPUSH
68306: LD_INT 0
68308: PPUSH
68309: CALL_OW 517
68313: ST_TO_ADDR
// if not list then
68314: LD_VAR 0 4
68318: NOT
68319: IFFALSE 68323
// exit ;
68321: GO 68364
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
68323: LD_ADDR_VAR 0 3
68327: PUSH
68328: LD_VAR 0 4
68332: PUSH
68333: LD_INT 1
68335: ARRAY
68336: PUSH
68337: LD_INT 1
68339: ARRAY
68340: PUSH
68341: LD_VAR 0 4
68345: PUSH
68346: LD_INT 2
68348: ARRAY
68349: PUSH
68350: LD_INT 1
68352: ARRAY
68353: PUSH
68354: LD_VAR 0 2
68358: PUSH
68359: EMPTY
68360: LIST
68361: LIST
68362: LIST
68363: ST_TO_ADDR
// end ;
68364: LD_VAR 0 3
68368: RET
// export function First ( array ) ; begin
68369: LD_INT 0
68371: PPUSH
// if not array then
68372: LD_VAR 0 1
68376: NOT
68377: IFFALSE 68381
// exit ;
68379: GO 68395
// result := array [ 1 ] ;
68381: LD_ADDR_VAR 0 2
68385: PUSH
68386: LD_VAR 0 1
68390: PUSH
68391: LD_INT 1
68393: ARRAY
68394: ST_TO_ADDR
// end ;
68395: LD_VAR 0 2
68399: RET
// export function Last ( array ) ; begin
68400: LD_INT 0
68402: PPUSH
// if not array then
68403: LD_VAR 0 1
68407: NOT
68408: IFFALSE 68412
// exit ;
68410: GO 68428
// result := array [ array ] ;
68412: LD_ADDR_VAR 0 2
68416: PUSH
68417: LD_VAR 0 1
68421: PUSH
68422: LD_VAR 0 1
68426: ARRAY
68427: ST_TO_ADDR
// end ;
68428: LD_VAR 0 2
68432: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
68433: LD_INT 0
68435: PPUSH
68436: PPUSH
// result := [ ] ;
68437: LD_ADDR_VAR 0 5
68441: PUSH
68442: EMPTY
68443: ST_TO_ADDR
// if not array then
68444: LD_VAR 0 1
68448: NOT
68449: IFFALSE 68453
// exit ;
68451: GO 68565
// for i := 1 to array do
68453: LD_ADDR_VAR 0 6
68457: PUSH
68458: DOUBLE
68459: LD_INT 1
68461: DEC
68462: ST_TO_ADDR
68463: LD_VAR 0 1
68467: PUSH
68468: FOR_TO
68469: IFFALSE 68563
// if array [ i ] [ index ] = value then
68471: LD_VAR 0 1
68475: PUSH
68476: LD_VAR 0 6
68480: ARRAY
68481: PUSH
68482: LD_VAR 0 2
68486: ARRAY
68487: PUSH
68488: LD_VAR 0 3
68492: EQUAL
68493: IFFALSE 68561
// begin if indexColumn then
68495: LD_VAR 0 4
68499: IFFALSE 68535
// result := Join ( result , array [ i ] [ indexColumn ] ) else
68501: LD_ADDR_VAR 0 5
68505: PUSH
68506: LD_VAR 0 5
68510: PPUSH
68511: LD_VAR 0 1
68515: PUSH
68516: LD_VAR 0 6
68520: ARRAY
68521: PUSH
68522: LD_VAR 0 4
68526: ARRAY
68527: PPUSH
68528: CALL 63903 0 2
68532: ST_TO_ADDR
68533: GO 68561
// result := Join ( result , array [ i ] ) ;
68535: LD_ADDR_VAR 0 5
68539: PUSH
68540: LD_VAR 0 5
68544: PPUSH
68545: LD_VAR 0 1
68549: PUSH
68550: LD_VAR 0 6
68554: ARRAY
68555: PPUSH
68556: CALL 63903 0 2
68560: ST_TO_ADDR
// end ;
68561: GO 68468
68563: POP
68564: POP
// end ;
68565: LD_VAR 0 5
68569: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
68570: LD_INT 0
68572: PPUSH
68573: PPUSH
68574: PPUSH
// if btype = b_depot then
68575: LD_VAR 0 2
68579: PUSH
68580: LD_INT 0
68582: EQUAL
68583: IFFALSE 68595
// begin result := true ;
68585: LD_ADDR_VAR 0 3
68589: PUSH
68590: LD_INT 1
68592: ST_TO_ADDR
// exit ;
68593: GO 68711
// end ; pom := GetBase ( depot ) ;
68595: LD_ADDR_VAR 0 4
68599: PUSH
68600: LD_VAR 0 1
68604: PPUSH
68605: CALL_OW 274
68609: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
68610: LD_ADDR_VAR 0 5
68614: PUSH
68615: LD_VAR 0 2
68619: PPUSH
68620: LD_VAR 0 1
68624: PPUSH
68625: CALL_OW 248
68629: PPUSH
68630: CALL_OW 450
68634: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
68635: LD_ADDR_VAR 0 3
68639: PUSH
68640: LD_VAR 0 4
68644: PPUSH
68645: LD_INT 1
68647: PPUSH
68648: CALL_OW 275
68652: PUSH
68653: LD_VAR 0 5
68657: PUSH
68658: LD_INT 1
68660: ARRAY
68661: GREATEREQUAL
68662: PUSH
68663: LD_VAR 0 4
68667: PPUSH
68668: LD_INT 2
68670: PPUSH
68671: CALL_OW 275
68675: PUSH
68676: LD_VAR 0 5
68680: PUSH
68681: LD_INT 2
68683: ARRAY
68684: GREATEREQUAL
68685: AND
68686: PUSH
68687: LD_VAR 0 4
68691: PPUSH
68692: LD_INT 3
68694: PPUSH
68695: CALL_OW 275
68699: PUSH
68700: LD_VAR 0 5
68704: PUSH
68705: LD_INT 3
68707: ARRAY
68708: GREATEREQUAL
68709: AND
68710: ST_TO_ADDR
// end ;
68711: LD_VAR 0 3
68715: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
68716: LD_INT 0
68718: PPUSH
// if not vehicles or not parkingPoint then
68719: LD_VAR 0 1
68723: NOT
68724: PUSH
68725: LD_VAR 0 2
68729: NOT
68730: OR
68731: IFFALSE 68735
// exit ;
68733: GO 68833
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
68735: LD_ADDR_VAR 0 1
68739: PUSH
68740: LD_VAR 0 1
68744: PPUSH
68745: LD_INT 50
68747: PUSH
68748: EMPTY
68749: LIST
68750: PUSH
68751: LD_INT 3
68753: PUSH
68754: LD_INT 92
68756: PUSH
68757: LD_VAR 0 2
68761: PUSH
68762: LD_INT 1
68764: ARRAY
68765: PUSH
68766: LD_VAR 0 2
68770: PUSH
68771: LD_INT 2
68773: ARRAY
68774: PUSH
68775: LD_INT 8
68777: PUSH
68778: EMPTY
68779: LIST
68780: LIST
68781: LIST
68782: LIST
68783: PUSH
68784: EMPTY
68785: LIST
68786: LIST
68787: PUSH
68788: EMPTY
68789: LIST
68790: LIST
68791: PPUSH
68792: CALL_OW 72
68796: ST_TO_ADDR
// if not vehicles then
68797: LD_VAR 0 1
68801: NOT
68802: IFFALSE 68806
// exit ;
68804: GO 68833
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
68806: LD_VAR 0 1
68810: PPUSH
68811: LD_VAR 0 2
68815: PUSH
68816: LD_INT 1
68818: ARRAY
68819: PPUSH
68820: LD_VAR 0 2
68824: PUSH
68825: LD_INT 2
68827: ARRAY
68828: PPUSH
68829: CALL_OW 111
// end ; end_of_file
68833: LD_VAR 0 3
68837: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68838: LD_VAR 0 1
68842: PPUSH
68843: LD_VAR 0 2
68847: PPUSH
68848: LD_VAR 0 3
68852: PPUSH
68853: LD_VAR 0 4
68857: PPUSH
68858: LD_VAR 0 5
68862: PPUSH
68863: LD_VAR 0 6
68867: PPUSH
68868: CALL 5508 0 6
// end ;
68872: PPOPN 6
68874: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
68875: LD_INT 0
68877: PPUSH
// begin if not units then
68878: LD_VAR 0 1
68882: NOT
68883: IFFALSE 68887
// exit ;
68885: GO 68887
// end ;
68887: PPOPN 7
68889: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
68890: CALL 5412 0 0
// end ;
68894: PPOPN 1
68896: END
