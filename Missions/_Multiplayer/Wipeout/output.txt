// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 82 0 0
// InitMultiplayer ;
  20: CALL 149 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareAmerican ( Multiplayer_SetBotSide ( 1 ) ) ;
  37: LD_INT 1
  39: PPUSH
  40: CALL 1607 0 1
  44: PPUSH
  45: CALL 5082 0 1
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  49: LD_INT 2
  51: PPUSH
  52: CALL 1607 0 1
  56: PPUSH
  57: CALL 9646 0 1
// Multiplayer_Start ;
  61: CALL 3370 0 0
// ResetFog ;
  65: CALL_OW 335
// game := true ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_INT 1
  76: ST_TO_ADDR
// Multiplayer_End ;
  77: CALL 3482 0 0
// end ;
  81: END
// export debug , game , botSides , activeArabAttacks ; function InitVariables ; begin
  82: LD_INT 0
  84: PPUSH
// debug := false ;
  85: LD_ADDR_EXP 1
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// botSides := [ 1 , 2 ] ;
  93: LD_ADDR_EXP 3
  97: PUSH
  98: LD_INT 1
 100: PUSH
 101: LD_INT 2
 103: PUSH
 104: EMPTY
 105: LIST
 106: LIST
 107: ST_TO_ADDR
// activeArabAttacks := false ;
 108: LD_ADDR_EXP 4
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// end ;
 116: LD_VAR 0 1
 120: RET
// every 0 0$01 trigger game and not debug_strings do
 121: LD_EXP 2
 125: PUSH
 126: LD_OWVAR 48
 130: NOT
 131: AND
 132: IFFALSE 148
 134: GO 136
 136: DISABLE
// begin enable ;
 137: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 138: LD_ADDR_OWVAR 47
 142: PUSH
 143: CALL 4018 0 0
 147: ST_TO_ADDR
// end ; end_of_file
 148: END
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , mulit_extra_oil , multi_support , multi_commanders , multi_loosers , multi_players_amount , multi_reinforcements , multi_support_arrive_time , multi_buildings ; export function InitMultiplayer ; var i , j , x , tmp ; begin
 149: LD_INT 0
 151: PPUSH
 152: PPUSH
 153: PPUSH
 154: PPUSH
 155: PPUSH
// multi_settings_counter := 6 ;
 156: LD_ADDR_EXP 17
 160: PUSH
 161: LD_INT 6
 163: ST_TO_ADDR
// multi_settings := [ ] ;
 164: LD_ADDR_EXP 16
 168: PUSH
 169: EMPTY
 170: ST_TO_ADDR
// if Multiplayer then
 171: LD_OWVAR 4
 175: IFFALSE 355
// begin your_side := mp_player_side ;
 177: LD_ADDR_OWVAR 2
 181: PUSH
 182: LD_OWVAR 7
 186: ST_TO_ADDR
// multi_gametype := mp_game_type ;
 187: LD_ADDR_EXP 5
 191: PUSH
 192: LD_OWVAR 6
 196: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
 197: LD_ADDR_EXP 6
 201: PUSH
 202: LD_OWVAR 17
 206: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
 207: LD_ADDR_EXP 7
 211: PUSH
 212: LD_OWVAR 15
 216: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
 217: LD_ADDR_EXP 8
 221: PUSH
 222: LD_OWVAR 16
 226: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
 227: LD_ADDR_EXP 9
 231: PUSH
 232: EMPTY
 233: PUSH
 234: EMPTY
 235: LIST
 236: ST_TO_ADDR
// for i in mp_teams do
 237: LD_ADDR_VAR 0 2
 241: PUSH
 242: LD_OWVAR 12
 246: PUSH
 247: FOR_IN
 248: IFFALSE 291
// if i then
 250: LD_VAR 0 2
 254: IFFALSE 289
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
 256: LD_ADDR_EXP 9
 260: PUSH
 261: LD_EXP 9
 265: PPUSH
 266: LD_INT 1
 268: PPUSH
 269: LD_EXP 9
 273: PUSH
 274: LD_INT 1
 276: ARRAY
 277: PUSH
 278: LD_VAR 0 2
 282: UNION
 283: PPUSH
 284: CALL_OW 1
 288: ST_TO_ADDR
 289: GO 247
 291: POP
 292: POP
// for i := 1 to multi_settings_counter do
 293: LD_ADDR_VAR 0 2
 297: PUSH
 298: DOUBLE
 299: LD_INT 1
 301: DEC
 302: ST_TO_ADDR
 303: LD_EXP 17
 307: PUSH
 308: FOR_TO
 309: IFFALSE 351
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
 311: LD_ADDR_EXP 16
 315: PUSH
 316: LD_EXP 16
 320: PPUSH
 321: LD_EXP 16
 325: PUSH
 326: LD_INT 1
 328: PLUS
 329: PPUSH
 330: LD_VAR 0 2
 334: PPUSH
 335: CALL_OW 426
 339: PUSH
 340: LD_INT 1
 342: PLUS
 343: PPUSH
 344: CALL_OW 1
 348: ST_TO_ADDR
 349: GO 308
 351: POP
 352: POP
// end else
 353: GO 541
// begin your_side := 3 ;
 355: LD_ADDR_OWVAR 2
 359: PUSH
 360: LD_INT 3
 362: ST_TO_ADDR
// multi_gametype := 1 ;
 363: LD_ADDR_EXP 5
 367: PUSH
 368: LD_INT 1
 370: ST_TO_ADDR
// multi_sides := [ 0 , 0 , 1 , 2 , 3 , 0 , 0 , 0 ] ;
 371: LD_ADDR_EXP 6
 375: PUSH
 376: LD_INT 0
 378: PUSH
 379: LD_INT 0
 381: PUSH
 382: LD_INT 1
 384: PUSH
 385: LD_INT 2
 387: PUSH
 388: LD_INT 3
 390: PUSH
 391: LD_INT 0
 393: PUSH
 394: LD_INT 0
 396: PUSH
 397: LD_INT 0
 399: PUSH
 400: EMPTY
 401: LIST
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: LIST
 407: LIST
 408: LIST
 409: ST_TO_ADDR
// multi_side_teams := [ 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 ] ;
 410: LD_ADDR_EXP 7
 414: PUSH
 415: LD_INT 0
 417: PUSH
 418: LD_INT 0
 420: PUSH
 421: LD_INT 1
 423: PUSH
 424: LD_INT 1
 426: PUSH
 427: LD_INT 1
 429: PUSH
 430: LD_INT 0
 432: PUSH
 433: LD_INT 0
 435: PUSH
 436: LD_INT 0
 438: PUSH
 439: EMPTY
 440: LIST
 441: LIST
 442: LIST
 443: LIST
 444: LIST
 445: LIST
 446: LIST
 447: LIST
 448: ST_TO_ADDR
// multi_nations := [ 0 , 0 , 3 , 3 , 3 , 0 , 0 , 0 ] ;
 449: LD_ADDR_EXP 8
 453: PUSH
 454: LD_INT 0
 456: PUSH
 457: LD_INT 0
 459: PUSH
 460: LD_INT 3
 462: PUSH
 463: LD_INT 3
 465: PUSH
 466: LD_INT 3
 468: PUSH
 469: LD_INT 0
 471: PUSH
 472: LD_INT 0
 474: PUSH
 475: LD_INT 0
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: LIST
 482: LIST
 483: LIST
 484: LIST
 485: LIST
 486: LIST
 487: ST_TO_ADDR
// multi_teams := [ [ 3 , 4 , 5 ] ] ;
 488: LD_ADDR_EXP 9
 492: PUSH
 493: LD_INT 3
 495: PUSH
 496: LD_INT 4
 498: PUSH
 499: LD_INT 5
 501: PUSH
 502: EMPTY
 503: LIST
 504: LIST
 505: LIST
 506: PUSH
 507: EMPTY
 508: LIST
 509: ST_TO_ADDR
// multi_settings := [ 2 , 4 , 4 , 3 , 1 , 3 ] ;
 510: LD_ADDR_EXP 16
 514: PUSH
 515: LD_INT 2
 517: PUSH
 518: LD_INT 4
 520: PUSH
 521: LD_INT 4
 523: PUSH
 524: LD_INT 3
 526: PUSH
 527: LD_INT 1
 529: PUSH
 530: LD_INT 3
 532: PUSH
 533: EMPTY
 534: LIST
 535: LIST
 536: LIST
 537: LIST
 538: LIST
 539: LIST
 540: ST_TO_ADDR
// end ; multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 541: LD_ADDR_EXP 10
 545: PUSH
 546: LD_INT 0
 548: PUSH
 549: LD_INT 0
 551: PUSH
 552: LD_INT 0
 554: PUSH
 555: LD_INT 0
 557: PUSH
 558: LD_INT 0
 560: PUSH
 561: LD_INT 0
 563: PUSH
 564: LD_INT 0
 566: PUSH
 567: LD_INT 0
 569: PUSH
 570: EMPTY
 571: LIST
 572: LIST
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: LIST
 578: LIST
 579: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 580: LD_ADDR_EXP 13
 584: PUSH
 585: LD_INT 0
 587: PUSH
 588: LD_INT 0
 590: PUSH
 591: LD_INT 0
 593: PUSH
 594: LD_INT 0
 596: PUSH
 597: LD_INT 0
 599: PUSH
 600: LD_INT 0
 602: PUSH
 603: LD_INT 0
 605: PUSH
 606: LD_INT 0
 608: PUSH
 609: EMPTY
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 619: LD_ADDR_EXP 24
 623: PUSH
 624: LD_INT 0
 626: PUSH
 627: LD_INT 0
 629: PUSH
 630: LD_INT 0
 632: PUSH
 633: LD_INT 0
 635: PUSH
 636: LD_INT 0
 638: PUSH
 639: LD_INT 0
 641: PUSH
 642: LD_INT 0
 644: PUSH
 645: LD_INT 0
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: LIST
 652: LIST
 653: LIST
 654: LIST
 655: LIST
 656: LIST
 657: ST_TO_ADDR
// multi_teamgame := true ;
 658: LD_ADDR_EXP 14
 662: PUSH
 663: LD_INT 1
 665: ST_TO_ADDR
// multi_allowed_nations := [ 3 ] ;
 666: LD_ADDR_EXP 12
 670: PUSH
 671: LD_INT 3
 673: PUSH
 674: EMPTY
 675: LIST
 676: ST_TO_ADDR
// multi_custom_commanders := true ;
 677: LD_ADDR_EXP 15
 681: PUSH
 682: LD_INT 1
 684: ST_TO_ADDR
// multi_commanders := [ ] ;
 685: LD_ADDR_EXP 23
 689: PUSH
 690: EMPTY
 691: ST_TO_ADDR
// multi_reinforcements := [ ] ;
 692: LD_ADDR_EXP 26
 696: PUSH
 697: EMPTY
 698: ST_TO_ADDR
// multi_players_amount := 0 ;
 699: LD_ADDR_EXP 25
 703: PUSH
 704: LD_INT 0
 706: ST_TO_ADDR
// multi_pos_area := [ [ spawnPlayer1Area , spawnPlayer1VehArea ] , [ spawnPlayer2Area , spawnPlayer2VehArea ] , [ spawnPlayer3Area , spawnPlayer3VehArea ] ] ;
 707: LD_ADDR_EXP 11
 711: PUSH
 712: LD_INT 8
 714: PUSH
 715: LD_INT 9
 717: PUSH
 718: EMPTY
 719: LIST
 720: LIST
 721: PUSH
 722: LD_INT 10
 724: PUSH
 725: LD_INT 11
 727: PUSH
 728: EMPTY
 729: LIST
 730: LIST
 731: PUSH
 732: LD_INT 12
 734: PUSH
 735: LD_INT 13
 737: PUSH
 738: EMPTY
 739: LIST
 740: LIST
 741: PUSH
 742: EMPTY
 743: LIST
 744: LIST
 745: LIST
 746: ST_TO_ADDR
// multi_buildings := [ [ [ b_depot , GetBuildingFromArea ( warehouse1Area , 0 ) , kagan ] ] , [ [ b_depot , GetBuildingFromArea ( warehouse2Area , 0 ) , beria ] ] , [ [ b_depot , GetBuildingFromArea ( warehouse3Area , 3 ) , kirov ] ] ] ;
 747: LD_ADDR_EXP 28
 751: PUSH
 752: LD_INT 0
 754: PUSH
 755: LD_INT 14
 757: PPUSH
 758: LD_INT 0
 760: PPUSH
 761: CALL 83953 0 2
 765: PUSH
 766: LD_STRING kagan
 768: PUSH
 769: EMPTY
 770: LIST
 771: LIST
 772: LIST
 773: PUSH
 774: EMPTY
 775: LIST
 776: PUSH
 777: LD_INT 0
 779: PUSH
 780: LD_INT 15
 782: PPUSH
 783: LD_INT 0
 785: PPUSH
 786: CALL 83953 0 2
 790: PUSH
 791: LD_STRING beria
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: LIST
 798: PUSH
 799: EMPTY
 800: LIST
 801: PUSH
 802: LD_INT 0
 804: PUSH
 805: LD_INT 16
 807: PPUSH
 808: LD_INT 3
 810: PPUSH
 811: CALL 83953 0 2
 815: PUSH
 816: LD_STRING kirov
 818: PUSH
 819: EMPTY
 820: LIST
 821: LIST
 822: LIST
 823: PUSH
 824: EMPTY
 825: LIST
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: LIST
 831: ST_TO_ADDR
// for i := 1 to 8 do
 832: LD_ADDR_VAR 0 2
 836: PUSH
 837: DOUBLE
 838: LD_INT 1
 840: DEC
 841: ST_TO_ADDR
 842: LD_INT 8
 844: PUSH
 845: FOR_TO
 846: IFFALSE 1175
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
 848: LD_VAR 0 2
 852: PPUSH
 853: CALL_OW 530
 857: IFFALSE 1015
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
 859: LD_ADDR_EXP 10
 863: PUSH
 864: LD_EXP 10
 868: PPUSH
 869: LD_VAR 0 2
 873: PPUSH
 874: LD_INT 1
 876: PPUSH
 877: CALL_OW 1
 881: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
 882: LD_ADDR_EXP 8
 886: PUSH
 887: LD_EXP 8
 891: PPUSH
 892: LD_VAR 0 2
 896: PPUSH
 897: LD_INT 0
 899: PPUSH
 900: CALL_OW 1
 904: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
 905: LD_ADDR_EXP 6
 909: PUSH
 910: LD_EXP 6
 914: PPUSH
 915: LD_VAR 0 2
 919: PPUSH
 920: LD_INT 0
 922: PPUSH
 923: CALL_OW 1
 927: ST_TO_ADDR
// for j = 1 to multi_teams do
 928: LD_ADDR_VAR 0 3
 932: PUSH
 933: DOUBLE
 934: LD_INT 1
 936: DEC
 937: ST_TO_ADDR
 938: LD_EXP 9
 942: PUSH
 943: FOR_TO
 944: IFFALSE 1013
// begin if i in multi_teams [ j ] then
 946: LD_VAR 0 2
 950: PUSH
 951: LD_EXP 9
 955: PUSH
 956: LD_VAR 0 3
 960: ARRAY
 961: IN
 962: IFFALSE 1011
// begin tmp := multi_teams [ j ] diff i ;
 964: LD_ADDR_VAR 0 5
 968: PUSH
 969: LD_EXP 9
 973: PUSH
 974: LD_VAR 0 3
 978: ARRAY
 979: PUSH
 980: LD_VAR 0 2
 984: DIFF
 985: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
 986: LD_ADDR_EXP 9
 990: PUSH
 991: LD_EXP 9
 995: PPUSH
 996: LD_VAR 0 3
1000: PPUSH
1001: LD_VAR 0 5
1005: PPUSH
1006: CALL_OW 1
1010: ST_TO_ADDR
// end ; end ;
1011: GO 943
1013: POP
1014: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
1015: LD_EXP 8
1019: PUSH
1020: LD_VAR 0 2
1024: ARRAY
1025: PUSH
1026: LD_EXP 8
1030: PUSH
1031: LD_VAR 0 2
1035: ARRAY
1036: PUSH
1037: LD_EXP 12
1041: IN
1042: NOT
1043: AND
1044: IFFALSE 1085
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
1046: LD_ADDR_EXP 8
1050: PUSH
1051: LD_EXP 8
1055: PPUSH
1056: LD_VAR 0 2
1060: PPUSH
1061: LD_EXP 12
1065: PUSH
1066: LD_INT 1
1068: PPUSH
1069: LD_EXP 12
1073: PPUSH
1074: CALL_OW 12
1078: ARRAY
1079: PPUSH
1080: CALL_OW 1
1084: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
1085: LD_EXP 8
1089: PUSH
1090: LD_VAR 0 2
1094: ARRAY
1095: NOT
1096: PUSH
1097: LD_EXP 6
1101: PUSH
1102: LD_VAR 0 2
1106: ARRAY
1107: NOT
1108: AND
1109: PUSH
1110: LD_EXP 10
1114: PUSH
1115: LD_VAR 0 2
1119: ARRAY
1120: NOT
1121: AND
1122: IFFALSE 1147
// multi_bots := Replace ( multi_bots , i , 1 ) ;
1124: LD_ADDR_EXP 13
1128: PUSH
1129: LD_EXP 13
1133: PPUSH
1134: LD_VAR 0 2
1138: PPUSH
1139: LD_INT 1
1141: PPUSH
1142: CALL_OW 1
1146: ST_TO_ADDR
// if multi_sides [ i ] then
1147: LD_EXP 6
1151: PUSH
1152: LD_VAR 0 2
1156: ARRAY
1157: IFFALSE 1173
// multi_players_amount := multi_players_amount + 1 ;
1159: LD_ADDR_EXP 25
1163: PUSH
1164: LD_EXP 25
1168: PUSH
1169: LD_INT 1
1171: PLUS
1172: ST_TO_ADDR
// end ;
1173: GO 845
1175: POP
1176: POP
// for i in multi_teams do
1177: LD_ADDR_VAR 0 2
1181: PUSH
1182: LD_EXP 9
1186: PUSH
1187: FOR_IN
1188: IFFALSE 1296
// begin for j = 2 to i do
1190: LD_ADDR_VAR 0 3
1194: PUSH
1195: DOUBLE
1196: LD_INT 2
1198: DEC
1199: ST_TO_ADDR
1200: LD_VAR 0 2
1204: PUSH
1205: FOR_TO
1206: IFFALSE 1292
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
1208: LD_VAR 0 2
1212: PUSH
1213: LD_VAR 0 3
1217: ARRAY
1218: PPUSH
1219: LD_VAR 0 2
1223: PUSH
1224: LD_INT 1
1226: ARRAY
1227: PPUSH
1228: CALL_OW 343
// for x = 1 to j - 1 do
1232: LD_ADDR_VAR 0 4
1236: PUSH
1237: DOUBLE
1238: LD_INT 1
1240: DEC
1241: ST_TO_ADDR
1242: LD_VAR 0 3
1246: PUSH
1247: LD_INT 1
1249: MINUS
1250: PUSH
1251: FOR_TO
1252: IFFALSE 1288
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
1254: LD_VAR 0 2
1258: PUSH
1259: LD_VAR 0 3
1263: ARRAY
1264: PPUSH
1265: LD_VAR 0 2
1269: PUSH
1270: LD_VAR 0 4
1274: ARRAY
1275: PPUSH
1276: LD_INT 1
1278: PPUSH
1279: LD_INT 1
1281: PPUSH
1282: CALL_OW 80
1286: GO 1251
1288: POP
1289: POP
// end ;
1290: GO 1205
1292: POP
1293: POP
// end ;
1294: GO 1187
1296: POP
1297: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
1298: LD_ADDR_OWVAR 67
1302: PUSH
1303: LD_INT 1
1305: PUSH
1306: LD_INT 2
1308: PUSH
1309: LD_INT 3
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: LIST
1316: PUSH
1317: LD_EXP 16
1321: PUSH
1322: LD_INT 1
1324: ARRAY
1325: ARRAY
1326: ST_TO_ADDR
// multi_pep_amount := [ 6 , 7 , 8 , 9 ] [ multi_settings [ 2 ] ] ;
1327: LD_ADDR_EXP 18
1331: PUSH
1332: LD_INT 6
1334: PUSH
1335: LD_INT 7
1337: PUSH
1338: LD_INT 8
1340: PUSH
1341: LD_INT 9
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: PUSH
1350: LD_EXP 16
1354: PUSH
1355: LD_INT 2
1357: ARRAY
1358: ARRAY
1359: ST_TO_ADDR
// multi_skill_level := [ 1 , 2 , 3 , 5 ] [ multi_settings [ 3 ] ] ;
1360: LD_ADDR_EXP 19
1364: PUSH
1365: LD_INT 1
1367: PUSH
1368: LD_INT 2
1370: PUSH
1371: LD_INT 3
1373: PUSH
1374: LD_INT 5
1376: PUSH
1377: EMPTY
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: PUSH
1383: LD_EXP 16
1387: PUSH
1388: LD_INT 3
1390: ARRAY
1391: ARRAY
1392: ST_TO_ADDR
// multi_crates_spawn := [ [ 3000 , 0 0$32 ] , [ 5000 , 0 0$22 ] , [ 6000 , 0 0$14 ] , [ 8000 , 0 0$12 ] ] [ multi_settings [ 4 ] ] ;
1393: LD_ADDR_EXP 20
1397: PUSH
1398: LD_INT 3000
1400: PUSH
1401: LD_INT 1120
1403: PUSH
1404: EMPTY
1405: LIST
1406: LIST
1407: PUSH
1408: LD_INT 5000
1410: PUSH
1411: LD_INT 770
1413: PUSH
1414: EMPTY
1415: LIST
1416: LIST
1417: PUSH
1418: LD_INT 6000
1420: PUSH
1421: LD_INT 490
1423: PUSH
1424: EMPTY
1425: LIST
1426: LIST
1427: PUSH
1428: LD_INT 8000
1430: PUSH
1431: LD_INT 420
1433: PUSH
1434: EMPTY
1435: LIST
1436: LIST
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: LIST
1442: LIST
1443: PUSH
1444: LD_EXP 16
1448: PUSH
1449: LD_INT 4
1451: ARRAY
1452: ARRAY
1453: ST_TO_ADDR
// mulit_extra_oil := [ 0 , 1 , 2 ] [ multi_settings [ 5 ] ] ;
1454: LD_ADDR_EXP 21
1458: PUSH
1459: LD_INT 0
1461: PUSH
1462: LD_INT 1
1464: PUSH
1465: LD_INT 2
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: LIST
1472: PUSH
1473: LD_EXP 16
1477: PUSH
1478: LD_INT 5
1480: ARRAY
1481: ARRAY
1482: ST_TO_ADDR
// multi_support := [ 0 , 1 , 2 ] [ multi_settings [ 6 ] ] ;
1483: LD_ADDR_EXP 22
1487: PUSH
1488: LD_INT 0
1490: PUSH
1491: LD_INT 1
1493: PUSH
1494: LD_INT 2
1496: PUSH
1497: EMPTY
1498: LIST
1499: LIST
1500: LIST
1501: PUSH
1502: LD_EXP 16
1506: PUSH
1507: LD_INT 6
1509: ARRAY
1510: ARRAY
1511: ST_TO_ADDR
// multi_support_arrive_time := [ 5 5$0 , 15 15$0 , 25 25$0 ] [ Difficulty ] ;
1512: LD_ADDR_EXP 27
1516: PUSH
1517: LD_INT 10500
1519: PUSH
1520: LD_INT 31500
1522: PUSH
1523: LD_INT 52500
1525: PUSH
1526: EMPTY
1527: LIST
1528: LIST
1529: LIST
1530: PUSH
1531: LD_OWVAR 67
1535: ARRAY
1536: ST_TO_ADDR
// if mulit_extra_oil then
1537: LD_EXP 21
1541: IFFALSE 1602
// begin if mulit_extra_oil = 1 then
1543: LD_EXP 21
1547: PUSH
1548: LD_INT 1
1550: EQUAL
1551: IFFALSE 1566
// begin CreateDepositXY ( 109 , 130 , mat_oil ) ;
1553: LD_INT 109
1555: PPUSH
1556: LD_INT 130
1558: PPUSH
1559: LD_INT 2
1561: PPUSH
1562: CALL_OW 62
// end ; if mulit_extra_oil = 2 then
1566: LD_EXP 21
1570: PUSH
1571: LD_INT 2
1573: EQUAL
1574: IFFALSE 1602
// begin CreateDepositXY ( 109 , 130 , mat_oil ) ;
1576: LD_INT 109
1578: PPUSH
1579: LD_INT 130
1581: PPUSH
1582: LD_INT 2
1584: PPUSH
1585: CALL_OW 62
// CreateDepositXY ( 150 , 112 , mat_oil ) ;
1589: LD_INT 150
1591: PPUSH
1592: LD_INT 112
1594: PPUSH
1595: LD_INT 2
1597: PPUSH
1598: CALL_OW 62
// end ; end ; end ;
1602: LD_VAR 0 1
1606: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
1607: LD_INT 0
1609: PPUSH
1610: PPUSH
// if not multi_sides [ preferSide ] then
1611: LD_EXP 6
1615: PUSH
1616: LD_VAR 0 1
1620: ARRAY
1621: NOT
1622: IFFALSE 1636
// begin result := preferSide ;
1624: LD_ADDR_VAR 0 2
1628: PUSH
1629: LD_VAR 0 1
1633: ST_TO_ADDR
// exit ;
1634: GO 1683
// end ; for i := 1 to 8 do
1636: LD_ADDR_VAR 0 3
1640: PUSH
1641: DOUBLE
1642: LD_INT 1
1644: DEC
1645: ST_TO_ADDR
1646: LD_INT 8
1648: PUSH
1649: FOR_TO
1650: IFFALSE 1681
// if not multi_sides [ i ] then
1652: LD_EXP 6
1656: PUSH
1657: LD_VAR 0 3
1661: ARRAY
1662: NOT
1663: IFFALSE 1679
// begin result := i ;
1665: LD_ADDR_VAR 0 2
1669: PUSH
1670: LD_VAR 0 3
1674: ST_TO_ADDR
// exit ;
1675: POP
1676: POP
1677: GO 1683
// end ;
1679: GO 1649
1681: POP
1682: POP
// end ;
1683: LD_VAR 0 2
1687: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
1688: LD_INT 0
1690: PPUSH
// uc_side := side ;
1691: LD_ADDR_OWVAR 20
1695: PUSH
1696: LD_VAR 0 1
1700: ST_TO_ADDR
// uc_nation := nation_russian ;
1701: LD_ADDR_OWVAR 21
1705: PUSH
1706: LD_INT 3
1708: ST_TO_ADDR
// hc_importance := 100 ;
1709: LD_ADDR_OWVAR 32
1713: PUSH
1714: LD_INT 100
1716: ST_TO_ADDR
// hc_class := class_soldier ;
1717: LD_ADDR_OWVAR 28
1721: PUSH
1722: LD_INT 1
1724: ST_TO_ADDR
// if num = 1 then
1725: LD_VAR 0 2
1729: PUSH
1730: LD_INT 1
1732: EQUAL
1733: IFFALSE 1815
// begin hc_gallery := ru ;
1735: LD_ADDR_OWVAR 33
1739: PUSH
1740: LD_STRING ru
1742: ST_TO_ADDR
// hc_face_number := 10 ;
1743: LD_ADDR_OWVAR 34
1747: PUSH
1748: LD_INT 10
1750: ST_TO_ADDR
// hc_name := Popov ;
1751: LD_ADDR_OWVAR 26
1755: PUSH
1756: LD_STRING Popov
1758: ST_TO_ADDR
// hc_sex := sex_male ;
1759: LD_ADDR_OWVAR 27
1763: PUSH
1764: LD_INT 1
1766: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 2 ] ;
1767: LD_ADDR_OWVAR 31
1771: PUSH
1772: LD_INT 3
1774: PUSH
1775: LD_INT 1
1777: PUSH
1778: LD_INT 1
1780: PUSH
1781: LD_INT 2
1783: PUSH
1784: EMPTY
1785: LIST
1786: LIST
1787: LIST
1788: LIST
1789: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
1790: LD_ADDR_OWVAR 29
1794: PUSH
1795: LD_INT 10
1797: PUSH
1798: LD_INT 10
1800: PUSH
1801: EMPTY
1802: LIST
1803: LIST
1804: ST_TO_ADDR
// result := CreateHuman ;
1805: LD_ADDR_VAR 0 3
1809: PUSH
1810: CALL_OW 44
1814: ST_TO_ADDR
// end ; if num = 2 then
1815: LD_VAR 0 2
1819: PUSH
1820: LD_INT 2
1822: EQUAL
1823: IFFALSE 1913
// begin hc_class := class_mechanic ;
1825: LD_ADDR_OWVAR 28
1829: PUSH
1830: LD_INT 3
1832: ST_TO_ADDR
// hc_gallery := ru ;
1833: LD_ADDR_OWVAR 33
1837: PUSH
1838: LD_STRING ru
1840: ST_TO_ADDR
// hc_face_number := 1 ;
1841: LD_ADDR_OWVAR 34
1845: PUSH
1846: LD_INT 1
1848: ST_TO_ADDR
// hc_name := Burlak ;
1849: LD_ADDR_OWVAR 26
1853: PUSH
1854: LD_STRING Burlak
1856: ST_TO_ADDR
// hc_sex := sex_male ;
1857: LD_ADDR_OWVAR 27
1861: PUSH
1862: LD_INT 1
1864: ST_TO_ADDR
// hc_skills := [ 1 , 2 , 3 , 0 ] ;
1865: LD_ADDR_OWVAR 31
1869: PUSH
1870: LD_INT 1
1872: PUSH
1873: LD_INT 2
1875: PUSH
1876: LD_INT 3
1878: PUSH
1879: LD_INT 0
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: LIST
1886: LIST
1887: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1888: LD_ADDR_OWVAR 29
1892: PUSH
1893: LD_INT 10
1895: PUSH
1896: LD_INT 11
1898: PUSH
1899: EMPTY
1900: LIST
1901: LIST
1902: ST_TO_ADDR
// result := CreateHuman ;
1903: LD_ADDR_VAR 0 3
1907: PUSH
1908: CALL_OW 44
1912: ST_TO_ADDR
// end ; if num = 3 then
1913: LD_VAR 0 2
1917: PUSH
1918: LD_INT 3
1920: EQUAL
1921: IFFALSE 2003
// begin hc_gallery := ru ;
1923: LD_ADDR_OWVAR 33
1927: PUSH
1928: LD_STRING ru
1930: ST_TO_ADDR
// hc_face_number := 8 ;
1931: LD_ADDR_OWVAR 34
1935: PUSH
1936: LD_INT 8
1938: ST_TO_ADDR
// hc_name := Kurin ;
1939: LD_ADDR_OWVAR 26
1943: PUSH
1944: LD_STRING Kurin
1946: ST_TO_ADDR
// hc_sex := sex_male ;
1947: LD_ADDR_OWVAR 27
1951: PUSH
1952: LD_INT 1
1954: ST_TO_ADDR
// hc_skills := [ 4 , 1 , 0 , 1 ] ;
1955: LD_ADDR_OWVAR 31
1959: PUSH
1960: LD_INT 4
1962: PUSH
1963: LD_INT 1
1965: PUSH
1966: LD_INT 0
1968: PUSH
1969: LD_INT 1
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1978: LD_ADDR_OWVAR 29
1982: PUSH
1983: LD_INT 12
1985: PUSH
1986: LD_INT 11
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: ST_TO_ADDR
// result := CreateHuman ;
1993: LD_ADDR_VAR 0 3
1997: PUSH
1998: CALL_OW 44
2002: ST_TO_ADDR
// end ; end ;
2003: LD_VAR 0 3
2007: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , b , cl , un , veh , tmp , copy , people_amount ; begin
2008: LD_INT 0
2010: PPUSH
2011: PPUSH
2012: PPUSH
2013: PPUSH
2014: PPUSH
2015: PPUSH
2016: PPUSH
2017: PPUSH
2018: PPUSH
2019: PPUSH
// for i := 1 to 8 do
2020: LD_ADDR_VAR 0 2
2024: PUSH
2025: DOUBLE
2026: LD_INT 1
2028: DEC
2029: ST_TO_ADDR
2030: LD_INT 8
2032: PUSH
2033: FOR_TO
2034: IFFALSE 3055
// begin if not multi_sides [ i ] then
2036: LD_EXP 6
2040: PUSH
2041: LD_VAR 0 2
2045: ARRAY
2046: NOT
2047: IFFALSE 2051
// continue ;
2049: GO 2033
// if multi_buildings [ multi_sides [ i ] ] then
2051: LD_EXP 28
2055: PUSH
2056: LD_EXP 6
2060: PUSH
2061: LD_VAR 0 2
2065: ARRAY
2066: ARRAY
2067: IFFALSE 2301
// begin uc_side := i ;
2069: LD_ADDR_OWVAR 20
2073: PUSH
2074: LD_VAR 0 2
2078: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2079: LD_ADDR_OWVAR 21
2083: PUSH
2084: LD_EXP 8
2088: PUSH
2089: LD_VAR 0 2
2093: ARRAY
2094: ST_TO_ADDR
// for j in multi_buildings [ multi_sides [ i ] ] do
2095: LD_ADDR_VAR 0 3
2099: PUSH
2100: LD_EXP 28
2104: PUSH
2105: LD_EXP 6
2109: PUSH
2110: LD_VAR 0 2
2114: ARRAY
2115: ARRAY
2116: PUSH
2117: FOR_IN
2118: IFFALSE 2299
// begin bc_type := j [ 1 ] ;
2120: LD_ADDR_OWVAR 42
2124: PUSH
2125: LD_VAR 0 3
2129: PUSH
2130: LD_INT 1
2132: ARRAY
2133: ST_TO_ADDR
// bc_level := 2 ;
2134: LD_ADDR_OWVAR 43
2138: PUSH
2139: LD_INT 2
2141: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , j [ 2 ] [ 3 ] ) ;
2142: LD_ADDR_VAR 0 4
2146: PUSH
2147: LD_VAR 0 3
2151: PUSH
2152: LD_INT 2
2154: ARRAY
2155: PUSH
2156: LD_INT 1
2158: ARRAY
2159: PPUSH
2160: LD_VAR 0 3
2164: PUSH
2165: LD_INT 2
2167: ARRAY
2168: PUSH
2169: LD_INT 2
2171: ARRAY
2172: PPUSH
2173: LD_VAR 0 3
2177: PUSH
2178: LD_INT 2
2180: ARRAY
2181: PUSH
2182: LD_INT 3
2184: ARRAY
2185: PPUSH
2186: CALL_OW 47
2190: ST_TO_ADDR
// if j [ 1 ] = b_depot then
2191: LD_VAR 0 3
2195: PUSH
2196: LD_INT 1
2198: ARRAY
2199: PUSH
2200: LD_INT 0
2202: EQUAL
2203: IFFALSE 2297
// begin SetBName ( b , j [ 3 ] ) ;
2205: LD_VAR 0 4
2209: PPUSH
2210: LD_VAR 0 3
2214: PUSH
2215: LD_INT 3
2217: ARRAY
2218: PPUSH
2219: CALL_OW 500
// SetResourceType ( GetBase ( b ) , mat_cans , [ 120 , 100 , 80 ] [ Difficulty ] ) ;
2223: LD_VAR 0 4
2227: PPUSH
2228: CALL_OW 274
2232: PPUSH
2233: LD_INT 1
2235: PPUSH
2236: LD_INT 120
2238: PUSH
2239: LD_INT 100
2241: PUSH
2242: LD_INT 80
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: LIST
2249: PUSH
2250: LD_OWVAR 67
2254: ARRAY
2255: PPUSH
2256: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , [ 90 , 60 , 30 ] [ Difficulty ] ) ;
2260: LD_VAR 0 4
2264: PPUSH
2265: CALL_OW 274
2269: PPUSH
2270: LD_INT 2
2272: PPUSH
2273: LD_INT 90
2275: PUSH
2276: LD_INT 60
2278: PUSH
2279: LD_INT 30
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: LIST
2286: PUSH
2287: LD_OWVAR 67
2291: ARRAY
2292: PPUSH
2293: CALL_OW 277
// end ; end ;
2297: GO 2117
2299: POP
2300: POP
// end ; if multi_custom_commanders then
2301: LD_EXP 15
2305: IFFALSE 2397
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
2307: LD_ADDR_VAR 0 6
2311: PUSH
2312: LD_VAR 0 2
2316: PPUSH
2317: LD_EXP 6
2321: PUSH
2322: LD_VAR 0 2
2326: ARRAY
2327: PPUSH
2328: CALL 1688 0 2
2332: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
2333: LD_ADDR_EXP 23
2337: PUSH
2338: LD_EXP 23
2342: PPUSH
2343: LD_EXP 23
2347: PUSH
2348: LD_INT 1
2350: PLUS
2351: PPUSH
2352: LD_VAR 0 6
2356: PPUSH
2357: CALL_OW 2
2361: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2362: LD_VAR 0 6
2366: PPUSH
2367: LD_EXP 11
2371: PUSH
2372: LD_EXP 6
2376: PUSH
2377: LD_VAR 0 2
2381: ARRAY
2382: ARRAY
2383: PUSH
2384: LD_INT 1
2386: ARRAY
2387: PPUSH
2388: LD_INT 0
2390: PPUSH
2391: CALL_OW 49
// end else
2395: GO 2608
// begin uc_side := i ;
2397: LD_ADDR_OWVAR 20
2401: PUSH
2402: LD_VAR 0 2
2406: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2407: LD_ADDR_OWVAR 21
2411: PUSH
2412: LD_EXP 8
2416: PUSH
2417: LD_VAR 0 2
2421: ARRAY
2422: ST_TO_ADDR
// hc_importance := 100 ;
2423: LD_ADDR_OWVAR 32
2427: PUSH
2428: LD_INT 100
2430: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
2431: LD_INT 0
2433: PPUSH
2434: LD_INT 1
2436: PPUSH
2437: LD_EXP 19
2441: PPUSH
2442: CALL_OW 380
// if multiplayer then
2446: LD_OWVAR 4
2450: IFFALSE 2508
// begin hc_name := mp_sides_players_names [ i ] ;
2452: LD_ADDR_OWVAR 26
2456: PUSH
2457: LD_OWVAR 19
2461: PUSH
2462: LD_VAR 0 2
2466: ARRAY
2467: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
2468: LD_ADDR_OWVAR 33
2472: PUSH
2473: LD_STRING MULTIAVATARS
2475: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
2476: LD_ADDR_OWVAR 34
2480: PUSH
2481: LD_VAR 0 2
2485: PPUSH
2486: CALL_OW 525
2490: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
2491: LD_ADDR_OWVAR 27
2495: PUSH
2496: LD_VAR 0 2
2500: PPUSH
2501: CALL_OW 526
2505: ST_TO_ADDR
// end else
2506: GO 2540
// begin hc_gallery :=  ;
2508: LD_ADDR_OWVAR 33
2512: PUSH
2513: LD_STRING 
2515: ST_TO_ADDR
// hc_name :=  ;
2516: LD_ADDR_OWVAR 26
2520: PUSH
2521: LD_STRING 
2523: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
2524: LD_ADDR_OWVAR 27
2528: PUSH
2529: LD_INT 1
2531: PPUSH
2532: LD_INT 2
2534: PPUSH
2535: CALL_OW 12
2539: ST_TO_ADDR
// end ; un := CreateHuman ;
2540: LD_ADDR_VAR 0 6
2544: PUSH
2545: CALL_OW 44
2549: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2550: LD_VAR 0 6
2554: PPUSH
2555: LD_EXP 11
2559: PUSH
2560: LD_EXP 6
2564: PUSH
2565: LD_VAR 0 2
2569: ARRAY
2570: ARRAY
2571: PUSH
2572: LD_INT 1
2574: ARRAY
2575: PPUSH
2576: LD_INT 0
2578: PPUSH
2579: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
2583: LD_ADDR_EXP 23
2587: PUSH
2588: LD_EXP 23
2592: PPUSH
2593: LD_VAR 0 2
2597: PPUSH
2598: LD_VAR 0 6
2602: PPUSH
2603: CALL_OW 1
2607: ST_TO_ADDR
// end ; InitHc ;
2608: CALL_OW 19
// InitUc ;
2612: CALL_OW 18
// uc_side := i ;
2616: LD_ADDR_OWVAR 20
2620: PUSH
2621: LD_VAR 0 2
2625: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2626: LD_ADDR_OWVAR 21
2630: PUSH
2631: LD_EXP 8
2635: PUSH
2636: LD_VAR 0 2
2640: ARRAY
2641: ST_TO_ADDR
// hc_gallery :=  ;
2642: LD_ADDR_OWVAR 33
2646: PUSH
2647: LD_STRING 
2649: ST_TO_ADDR
// hc_name :=  ;
2650: LD_ADDR_OWVAR 26
2654: PUSH
2655: LD_STRING 
2657: ST_TO_ADDR
// hc_importance := 0 ;
2658: LD_ADDR_OWVAR 32
2662: PUSH
2663: LD_INT 0
2665: ST_TO_ADDR
// cl := 1 ;
2666: LD_ADDR_VAR 0 5
2670: PUSH
2671: LD_INT 1
2673: ST_TO_ADDR
// for j := 2 to multi_pep_amount do
2674: LD_ADDR_VAR 0 3
2678: PUSH
2679: DOUBLE
2680: LD_INT 2
2682: DEC
2683: ST_TO_ADDR
2684: LD_EXP 18
2688: PUSH
2689: FOR_TO
2690: IFFALSE 3051
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
2692: LD_VAR 0 3
2696: PUSH
2697: LD_INT 1
2699: MINUS
2700: PUSH
2701: LD_EXP 18
2705: PUSH
2706: LD_INT 1
2708: MINUS
2709: PUSH
2710: LD_INT 4
2712: DIVREAL
2713: MOD
2714: PUSH
2715: LD_INT 0
2717: EQUAL
2718: IFFALSE 2734
// cl := cl + 1 ;
2720: LD_ADDR_VAR 0 5
2724: PUSH
2725: LD_VAR 0 5
2729: PUSH
2730: LD_INT 1
2732: PLUS
2733: ST_TO_ADDR
// if cl > 4 then
2734: LD_VAR 0 5
2738: PUSH
2739: LD_INT 4
2741: GREATER
2742: IFFALSE 2752
// cl := 1 ;
2744: LD_ADDR_VAR 0 5
2748: PUSH
2749: LD_INT 1
2751: ST_TO_ADDR
// PrepareHuman ( false , cl , multi_skill_level ) ;
2752: LD_INT 0
2754: PPUSH
2755: LD_VAR 0 5
2759: PPUSH
2760: LD_EXP 19
2764: PPUSH
2765: CALL_OW 380
// un := CreateHuman ;
2769: LD_ADDR_VAR 0 6
2773: PUSH
2774: CALL_OW 44
2778: ST_TO_ADDR
// if j > copy then
2779: LD_VAR 0 3
2783: PUSH
2784: LD_VAR 0 9
2788: GREATER
2789: IFFALSE 2818
// copy := Replace ( copy , j , un ) else
2791: LD_ADDR_VAR 0 9
2795: PUSH
2796: LD_VAR 0 9
2800: PPUSH
2801: LD_VAR 0 3
2805: PPUSH
2806: LD_VAR 0 6
2810: PPUSH
2811: CALL_OW 1
2815: ST_TO_ADDR
2816: GO 2900
// begin CopySkills ( copy [ j ] , un ) ;
2818: LD_VAR 0 9
2822: PUSH
2823: LD_VAR 0 3
2827: ARRAY
2828: PPUSH
2829: LD_VAR 0 6
2833: PPUSH
2834: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( copy [ j ] , attr_speed ) ) ;
2838: LD_VAR 0 6
2842: PPUSH
2843: LD_INT 2
2845: PPUSH
2846: LD_VAR 0 9
2850: PUSH
2851: LD_VAR 0 3
2855: ARRAY
2856: PPUSH
2857: LD_INT 2
2859: PPUSH
2860: CALL_OW 260
2864: PPUSH
2865: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( copy [ j ] , attr_stamina ) ) ;
2869: LD_VAR 0 6
2873: PPUSH
2874: LD_INT 1
2876: PPUSH
2877: LD_VAR 0 9
2881: PUSH
2882: LD_VAR 0 3
2886: ARRAY
2887: PPUSH
2888: LD_INT 1
2890: PPUSH
2891: CALL_OW 260
2895: PPUSH
2896: CALL_OW 239
// end ; if multi_pos_area then
2900: LD_EXP 11
2904: IFFALSE 3049
// begin if GetClass ( un ) = 3 then
2906: LD_VAR 0 6
2910: PPUSH
2911: CALL_OW 257
2915: PUSH
2916: LD_INT 3
2918: EQUAL
2919: IFFALSE 3016
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_heavy_machine_gun ] [ Difficulty ] , 80 ) ;
2921: LD_INT 21
2923: PPUSH
2924: LD_INT 1
2926: PPUSH
2927: LD_INT 1
2929: PPUSH
2930: LD_INT 43
2932: PUSH
2933: LD_INT 42
2935: PUSH
2936: LD_INT 42
2938: PUSH
2939: EMPTY
2940: LIST
2941: LIST
2942: LIST
2943: PUSH
2944: LD_OWVAR 67
2948: ARRAY
2949: PPUSH
2950: LD_INT 80
2952: PPUSH
2953: CALL 46567 0 5
// veh := CreateVehicle ;
2957: LD_ADDR_VAR 0 7
2961: PUSH
2962: CALL_OW 45
2966: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
2967: LD_VAR 0 7
2971: PPUSH
2972: LD_EXP 11
2976: PUSH
2977: LD_EXP 6
2981: PUSH
2982: LD_VAR 0 2
2986: ARRAY
2987: ARRAY
2988: PUSH
2989: LD_INT 2
2991: ARRAY
2992: PPUSH
2993: LD_INT 0
2995: PPUSH
2996: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
3000: LD_VAR 0 6
3004: PPUSH
3005: LD_VAR 0 7
3009: PPUSH
3010: CALL_OW 52
// continue ;
3014: GO 2689
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
3016: LD_VAR 0 6
3020: PPUSH
3021: LD_EXP 11
3025: PUSH
3026: LD_EXP 6
3030: PUSH
3031: LD_VAR 0 2
3035: ARRAY
3036: ARRAY
3037: PUSH
3038: LD_INT 1
3040: ARRAY
3041: PPUSH
3042: LD_INT 0
3044: PPUSH
3045: CALL_OW 49
// end ; end ;
3049: GO 2689
3051: POP
3052: POP
// end ;
3053: GO 2033
3055: POP
3056: POP
// end ;
3057: LD_VAR 0 1
3061: RET
// export function Multiplayer_PrepareReinforcements ( ) ; var i , j , un , tmp ; begin
3062: LD_INT 0
3064: PPUSH
3065: PPUSH
3066: PPUSH
3067: PPUSH
3068: PPUSH
// if not multi_support then
3069: LD_EXP 22
3073: NOT
3074: IFFALSE 3078
// exit ;
3076: GO 3365
// result := [ ] ;
3078: LD_ADDR_VAR 0 1
3082: PUSH
3083: EMPTY
3084: ST_TO_ADDR
// for i := 1 to 8 do
3085: LD_ADDR_VAR 0 2
3089: PUSH
3090: DOUBLE
3091: LD_INT 1
3093: DEC
3094: ST_TO_ADDR
3095: LD_INT 8
3097: PUSH
3098: FOR_TO
3099: IFFALSE 3363
// begin result := Replace ( result , i , [ ] ) ;
3101: LD_ADDR_VAR 0 1
3105: PUSH
3106: LD_VAR 0 1
3110: PPUSH
3111: LD_VAR 0 2
3115: PPUSH
3116: EMPTY
3117: PPUSH
3118: CALL_OW 1
3122: ST_TO_ADDR
// if multi_sides [ i ] then
3123: LD_EXP 6
3127: PUSH
3128: LD_VAR 0 2
3132: ARRAY
3133: IFFALSE 3361
// begin tmp := [ ] ;
3135: LD_ADDR_VAR 0 5
3139: PUSH
3140: EMPTY
3141: ST_TO_ADDR
// if multi_support = 1 then
3142: LD_EXP 22
3146: PUSH
3147: LD_INT 1
3149: EQUAL
3150: IFFALSE 3239
// begin uc_side := i ;
3152: LD_ADDR_OWVAR 20
3156: PUSH
3157: LD_VAR 0 2
3161: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3162: LD_ADDR_OWVAR 21
3166: PUSH
3167: LD_EXP 8
3171: PUSH
3172: LD_VAR 0 2
3176: ARRAY
3177: ST_TO_ADDR
// for j := 1 to 2 do
3178: LD_ADDR_VAR 0 3
3182: PUSH
3183: DOUBLE
3184: LD_INT 1
3186: DEC
3187: ST_TO_ADDR
3188: LD_INT 2
3190: PUSH
3191: FOR_TO
3192: IFFALSE 3237
// begin InitHC_All ( ) ;
3194: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , 1 ) ;
3198: LD_INT 0
3200: PPUSH
3201: LD_INT 1
3203: PPUSH
3204: LD_INT 4
3206: PPUSH
3207: CALL_OW 12
3211: PPUSH
3212: LD_INT 1
3214: PPUSH
3215: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
3219: LD_ADDR_VAR 0 5
3223: PUSH
3224: LD_VAR 0 5
3228: PUSH
3229: CALL_OW 44
3233: ADD
3234: ST_TO_ADDR
// end ;
3235: GO 3191
3237: POP
3238: POP
// end ; if multi_support = 2 then
3239: LD_EXP 22
3243: PUSH
3244: LD_INT 2
3246: EQUAL
3247: IFFALSE 3336
// begin uc_side := i ;
3249: LD_ADDR_OWVAR 20
3253: PUSH
3254: LD_VAR 0 2
3258: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3259: LD_ADDR_OWVAR 21
3263: PUSH
3264: LD_EXP 8
3268: PUSH
3269: LD_VAR 0 2
3273: ARRAY
3274: ST_TO_ADDR
// for j := 1 to 4 do
3275: LD_ADDR_VAR 0 3
3279: PUSH
3280: DOUBLE
3281: LD_INT 1
3283: DEC
3284: ST_TO_ADDR
3285: LD_INT 4
3287: PUSH
3288: FOR_TO
3289: IFFALSE 3334
// begin InitHC_All ( ) ;
3291: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , 2 ) ;
3295: LD_INT 0
3297: PPUSH
3298: LD_INT 1
3300: PPUSH
3301: LD_INT 4
3303: PPUSH
3304: CALL_OW 12
3308: PPUSH
3309: LD_INT 2
3311: PPUSH
3312: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
3316: LD_ADDR_VAR 0 5
3320: PUSH
3321: LD_VAR 0 5
3325: PUSH
3326: CALL_OW 44
3330: ADD
3331: ST_TO_ADDR
// end ;
3332: GO 3288
3334: POP
3335: POP
// end ; result := Replace ( result , i , tmp ) ;
3336: LD_ADDR_VAR 0 1
3340: PUSH
3341: LD_VAR 0 1
3345: PPUSH
3346: LD_VAR 0 2
3350: PPUSH
3351: LD_VAR 0 5
3355: PPUSH
3356: CALL_OW 1
3360: ST_TO_ADDR
// end ; end ;
3361: GO 3098
3363: POP
3364: POP
// end ;
3365: LD_VAR 0 1
3369: RET
// export function Multiplayer_Start ( ) ; begin
3370: LD_INT 0
3372: PPUSH
// Multiplayer_PreparePlayers ( ) ;
3373: CALL 2008 0 0
// Multiplayer_InitPointSystem ( ) ;
3377: CALL 4107 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
3381: LD_INT 20
3383: PPUSH
3384: CALL 4283 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
3388: LD_INT 150
3390: PPUSH
3391: CALL 4283 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
3395: LD_INT 5
3397: PPUSH
3398: CALL 4283 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
3402: LD_INT 40
3404: NEG
3405: PPUSH
3406: CALL 4283 0 1
// Multiplayer_RegisterCondition ( 200 ) ;
3410: LD_INT 200
3412: PPUSH
3413: CALL 4283 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
3417: LD_INT 2
3419: PPUSH
3420: CALL 4283 0 1
// if multi_support then
3424: LD_EXP 22
3428: IFFALSE 3440
// multi_reinforcements := Multiplayer_PrepareReinforcements ( ) ;
3430: LD_ADDR_EXP 26
3434: PUSH
3435: CALL 3062 0 0
3439: ST_TO_ADDR
// if multi_sides [ your_side ] then
3440: LD_EXP 6
3444: PUSH
3445: LD_OWVAR 2
3449: ARRAY
3450: IFFALSE 3477
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
3452: LD_INT 22
3454: PUSH
3455: LD_OWVAR 2
3459: PUSH
3460: EMPTY
3461: LIST
3462: LIST
3463: PPUSH
3464: CALL_OW 69
3468: PUSH
3469: LD_INT 1
3471: ARRAY
3472: PPUSH
3473: CALL_OW 87
// end ;
3477: LD_VAR 0 1
3481: RET
// export function Multiplayer_End ( ) ; var i , j ; begin
3482: LD_INT 0
3484: PPUSH
3485: PPUSH
3486: PPUSH
// repeat wait ( 0 0$1 ) ;
3487: LD_INT 35
3489: PPUSH
3490: CALL_OW 67
// if tick > multi_support_arrive_time and multi_support then
3494: LD_OWVAR 1
3498: PUSH
3499: LD_EXP 27
3503: GREATER
3504: PUSH
3505: LD_EXP 22
3509: AND
3510: IFFALSE 3675
// begin if tick mod 1 1$00 = 0 then
3512: LD_OWVAR 1
3516: PUSH
3517: LD_INT 2100
3519: MOD
3520: PUSH
3521: LD_INT 0
3523: EQUAL
3524: IFFALSE 3675
// begin for i := 1 to 8 do
3526: LD_ADDR_VAR 0 2
3530: PUSH
3531: DOUBLE
3532: LD_INT 1
3534: DEC
3535: ST_TO_ADDR
3536: LD_INT 8
3538: PUSH
3539: FOR_TO
3540: IFFALSE 3673
// begin if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] and Prob ( [ 80 , 60 , 40 ] [ Difficulty ] ) then
3542: LD_EXP 6
3546: PUSH
3547: LD_VAR 0 2
3551: ARRAY
3552: PUSH
3553: LD_EXP 24
3557: PUSH
3558: LD_VAR 0 2
3562: ARRAY
3563: NOT
3564: AND
3565: PUSH
3566: LD_EXP 26
3570: PUSH
3571: LD_VAR 0 2
3575: ARRAY
3576: AND
3577: PUSH
3578: LD_INT 80
3580: PUSH
3581: LD_INT 60
3583: PUSH
3584: LD_INT 40
3586: PUSH
3587: EMPTY
3588: LIST
3589: LIST
3590: LIST
3591: PUSH
3592: LD_OWVAR 67
3596: ARRAY
3597: PPUSH
3598: CALL_OW 13
3602: AND
3603: IFFALSE 3671
// begin PlaceUnitArea ( multi_reinforcements [ i ] [ 1 ] , spawnHumanArea , true ) ;
3605: LD_EXP 26
3609: PUSH
3610: LD_VAR 0 2
3614: ARRAY
3615: PUSH
3616: LD_INT 1
3618: ARRAY
3619: PPUSH
3620: LD_INT 7
3622: PPUSH
3623: LD_INT 1
3625: PPUSH
3626: CALL_OW 49
// multi_reinforcements := Replace ( multi_reinforcements , i , Delete ( multi_reinforcements [ i ] , 1 ) ) ;
3630: LD_ADDR_EXP 26
3634: PUSH
3635: LD_EXP 26
3639: PPUSH
3640: LD_VAR 0 2
3644: PPUSH
3645: LD_EXP 26
3649: PUSH
3650: LD_VAR 0 2
3654: ARRAY
3655: PPUSH
3656: LD_INT 1
3658: PPUSH
3659: CALL_OW 3
3663: PPUSH
3664: CALL_OW 1
3668: ST_TO_ADDR
// break ;
3669: GO 3673
// end ; end ;
3671: GO 3539
3673: POP
3674: POP
// end ; end ; if not multi_custom_commanders then
3675: LD_EXP 15
3679: NOT
3680: IFFALSE 3793
// begin for i := 1 to 8 do
3682: LD_ADDR_VAR 0 2
3686: PUSH
3687: DOUBLE
3688: LD_INT 1
3690: DEC
3691: ST_TO_ADDR
3692: LD_INT 8
3694: PUSH
3695: FOR_TO
3696: IFFALSE 3767
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
3698: LD_INT 22
3700: PUSH
3701: LD_VAR 0 2
3705: PUSH
3706: EMPTY
3707: LIST
3708: LIST
3709: PPUSH
3710: CALL_OW 69
3714: PUSH
3715: LD_INT 0
3717: EQUAL
3718: PUSH
3719: LD_EXP 24
3723: PUSH
3724: LD_VAR 0 2
3728: ARRAY
3729: NOT
3730: AND
3731: IFFALSE 3765
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
3733: LD_ADDR_EXP 24
3737: PUSH
3738: LD_EXP 24
3742: PPUSH
3743: LD_VAR 0 2
3747: PPUSH
3748: LD_INT 1
3750: PPUSH
3751: CALL_OW 1
3755: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
3756: LD_VAR 0 2
3760: PPUSH
3761: CALL 4353 0 1
// end ; end ;
3765: GO 3695
3767: POP
3768: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
3769: LD_EXP 24
3773: PPUSH
3774: CALL 43829 0 1
3778: PUSH
3779: LD_EXP 6
3783: PPUSH
3784: CALL 43829 0 1
3788: EQUAL
3789: IFFALSE 3793
// break ;
3791: GO 3813
// end ; until ( not Multiplayer_EnemyAlive ( ) and game ) or not multi_commanders ;
3793: CALL 3927 0 0
3797: NOT
3798: PUSH
3799: LD_EXP 2
3803: AND
3804: PUSH
3805: LD_EXP 23
3809: NOT
3810: OR
3811: IFFALSE 3487
// game := false ;
3813: LD_ADDR_EXP 2
3817: PUSH
3818: LD_INT 0
3820: ST_TO_ADDR
// for i := 1 to 8 do
3821: LD_ADDR_VAR 0 2
3825: PUSH
3826: DOUBLE
3827: LD_INT 1
3829: DEC
3830: ST_TO_ADDR
3831: LD_INT 8
3833: PUSH
3834: FOR_TO
3835: IFFALSE 3871
// begin if multi_sides [ i ] then
3837: LD_EXP 6
3841: PUSH
3842: LD_VAR 0 2
3846: ARRAY
3847: IFFALSE 3869
// SetMultiScore ( i , multi_points [ i ] ) ;
3849: LD_VAR 0 2
3853: PPUSH
3854: LD_EXP 29
3858: PUSH
3859: LD_VAR 0 2
3863: ARRAY
3864: PPUSH
3865: CALL_OW 506
// end ;
3869: GO 3834
3871: POP
3872: POP
// if multi_loosers [ your_side ] then
3873: LD_EXP 24
3877: PUSH
3878: LD_OWVAR 2
3882: ARRAY
3883: IFFALSE 3906
// begin if Multiplayer then
3885: LD_OWVAR 4
3889: IFFALSE 3897
// YouLostInMultiplayer else
3891: CALL_OW 107
3895: GO 3904
// YouLost (  ) ;
3897: LD_STRING 
3899: PPUSH
3900: CALL_OW 104
// end else
3904: GO 3922
// begin if Multiplayer then
3906: LD_OWVAR 4
3910: IFFALSE 3918
// YouWinInMultiplayer else
3912: CALL_OW 106
3916: GO 3922
// YouWin ;
3918: CALL_OW 103
// end ; end ;
3922: LD_VAR 0 1
3926: RET
// export function Multiplayer_EnemyAlive ( ) ; var side ; begin
3927: LD_INT 0
3929: PPUSH
3930: PPUSH
// result := false ;
3931: LD_ADDR_VAR 0 1
3935: PUSH
3936: LD_INT 0
3938: ST_TO_ADDR
// for side in botSides do
3939: LD_ADDR_VAR 0 2
3943: PUSH
3944: LD_EXP 3
3948: PUSH
3949: FOR_IN
3950: IFFALSE 4011
// begin result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 ;
3952: LD_ADDR_VAR 0 1
3956: PUSH
3957: LD_INT 22
3959: PUSH
3960: LD_VAR 0 2
3964: PUSH
3965: EMPTY
3966: LIST
3967: LIST
3968: PUSH
3969: LD_INT 21
3971: PUSH
3972: LD_INT 1
3974: PUSH
3975: EMPTY
3976: LIST
3977: LIST
3978: PUSH
3979: LD_INT 50
3981: PUSH
3982: EMPTY
3983: LIST
3984: PUSH
3985: EMPTY
3986: LIST
3987: LIST
3988: LIST
3989: PPUSH
3990: CALL_OW 69
3994: PUSH
3995: LD_INT 0
3997: GREATER
3998: ST_TO_ADDR
// if result then
3999: LD_VAR 0 1
4003: IFFALSE 4009
// exit ;
4005: POP
4006: POP
4007: GO 4013
// end ;
4009: GO 3949
4011: POP
4012: POP
// end ;
4013: LD_VAR 0 1
4017: RET
// export function Multiplayer_DisplayStrings ( ) ; var i ; begin
4018: LD_INT 0
4020: PPUSH
4021: PPUSH
// result := [ ] ;
4022: LD_ADDR_VAR 0 1
4026: PUSH
4027: EMPTY
4028: ST_TO_ADDR
// for i := 1 to 8 do
4029: LD_ADDR_VAR 0 2
4033: PUSH
4034: DOUBLE
4035: LD_INT 1
4037: DEC
4038: ST_TO_ADDR
4039: LD_INT 8
4041: PUSH
4042: FOR_TO
4043: IFFALSE 4100
// begin if multi_sides [ i ] then
4045: LD_EXP 6
4049: PUSH
4050: LD_VAR 0 2
4054: ARRAY
4055: IFFALSE 4098
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
4057: LD_ADDR_VAR 0 1
4061: PUSH
4062: LD_VAR 0 1
4066: PUSH
4067: LD_STRING #coop-points
4069: PUSH
4070: LD_VAR 0 2
4074: PUSH
4075: LD_VAR 0 2
4079: PUSH
4080: LD_EXP 29
4084: PUSH
4085: LD_VAR 0 2
4089: ARRAY
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: ADD
4097: ST_TO_ADDR
// end ; end ;
4098: GO 4042
4100: POP
4101: POP
// end ;
4102: LD_VAR 0 1
4106: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
4107: LD_INT 0
4109: PPUSH
4110: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4111: LD_ADDR_EXP 29
4115: PUSH
4116: LD_INT 0
4118: PUSH
4119: LD_INT 0
4121: PUSH
4122: LD_INT 0
4124: PUSH
4125: LD_INT 0
4127: PUSH
4128: LD_INT 0
4130: PUSH
4131: LD_INT 0
4133: PUSH
4134: LD_INT 0
4136: PUSH
4137: LD_INT 0
4139: PUSH
4140: EMPTY
4141: LIST
4142: LIST
4143: LIST
4144: LIST
4145: LIST
4146: LIST
4147: LIST
4148: LIST
4149: ST_TO_ADDR
// multi_points_conditions := [ ] ;
4150: LD_ADDR_EXP 30
4154: PUSH
4155: EMPTY
4156: ST_TO_ADDR
// end ;
4157: LD_VAR 0 1
4161: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
4162: LD_INT 0
4164: PPUSH
// if not multi_points or not side or side > 8 then
4165: LD_EXP 29
4169: NOT
4170: PUSH
4171: LD_VAR 0 1
4175: NOT
4176: OR
4177: PUSH
4178: LD_VAR 0 1
4182: PUSH
4183: LD_INT 8
4185: GREATER
4186: OR
4187: IFFALSE 4191
// exit ;
4189: GO 4228
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
4191: LD_ADDR_EXP 29
4195: PUSH
4196: LD_EXP 29
4200: PPUSH
4201: LD_VAR 0 1
4205: PPUSH
4206: LD_EXP 29
4210: PUSH
4211: LD_VAR 0 1
4215: ARRAY
4216: PUSH
4217: LD_VAR 0 2
4221: PLUS
4222: PPUSH
4223: CALL_OW 1
4227: ST_TO_ADDR
// end ;
4228: LD_VAR 0 3
4232: RET
// export function Multiplayer_GetPoints ( side ) ; begin
4233: LD_INT 0
4235: PPUSH
// if not multi_points or not side or side > 8 then
4236: LD_EXP 29
4240: NOT
4241: PUSH
4242: LD_VAR 0 1
4246: NOT
4247: OR
4248: PUSH
4249: LD_VAR 0 1
4253: PUSH
4254: LD_INT 8
4256: GREATER
4257: OR
4258: IFFALSE 4262
// exit ;
4260: GO 4278
// result := multi_points [ side ] ;
4262: LD_ADDR_VAR 0 2
4266: PUSH
4267: LD_EXP 29
4271: PUSH
4272: LD_VAR 0 1
4276: ARRAY
4277: ST_TO_ADDR
// end ;
4278: LD_VAR 0 2
4282: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
4283: LD_INT 0
4285: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
4286: LD_ADDR_EXP 30
4290: PUSH
4291: LD_EXP 30
4295: PPUSH
4296: LD_EXP 30
4300: PUSH
4301: LD_INT 1
4303: PLUS
4304: PPUSH
4305: LD_VAR 0 1
4309: PPUSH
4310: CALL_OW 1
4314: ST_TO_ADDR
// end ;
4315: LD_VAR 0 2
4319: RET
// export function Multiplayer_GetCondition ( id ) ; begin
4320: LD_INT 0
4322: PPUSH
// if not id then
4323: LD_VAR 0 1
4327: NOT
4328: IFFALSE 4332
// exit ;
4330: GO 4348
// result := multi_points_conditions [ id ] ;
4332: LD_ADDR_VAR 0 2
4336: PUSH
4337: LD_EXP 30
4341: PUSH
4342: LD_VAR 0 1
4346: ARRAY
4347: ST_TO_ADDR
// end ;
4348: LD_VAR 0 2
4352: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
4353: LD_INT 0
4355: PPUSH
4356: PPUSH
4357: PPUSH
4358: PPUSH
4359: PPUSH
// players := [ ] ;
4360: LD_ADDR_VAR 0 3
4364: PUSH
4365: EMPTY
4366: ST_TO_ADDR
// for i = 1 to 8 do
4367: LD_ADDR_VAR 0 4
4371: PUSH
4372: DOUBLE
4373: LD_INT 1
4375: DEC
4376: ST_TO_ADDR
4377: LD_INT 8
4379: PUSH
4380: FOR_TO
4381: IFFALSE 4440
// begin if i = side then
4383: LD_VAR 0 4
4387: PUSH
4388: LD_VAR 0 1
4392: EQUAL
4393: IFFALSE 4397
// continue ;
4395: GO 4380
// if multi_sides [ i ] and not multi_loosers [ i ] then
4397: LD_EXP 6
4401: PUSH
4402: LD_VAR 0 4
4406: ARRAY
4407: PUSH
4408: LD_EXP 24
4412: PUSH
4413: LD_VAR 0 4
4417: ARRAY
4418: NOT
4419: AND
4420: IFFALSE 4438
// players := players ^ i ;
4422: LD_ADDR_VAR 0 3
4426: PUSH
4427: LD_VAR 0 3
4431: PUSH
4432: LD_VAR 0 4
4436: ADD
4437: ST_TO_ADDR
// end ;
4438: GO 4380
4440: POP
4441: POP
// if not players then
4442: LD_VAR 0 3
4446: NOT
4447: IFFALSE 4451
// exit ;
4449: GO 4718
// if players = 1 then
4451: LD_VAR 0 3
4455: PUSH
4456: LD_INT 1
4458: EQUAL
4459: IFFALSE 4520
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
4461: LD_ADDR_VAR 0 4
4465: PUSH
4466: LD_INT 22
4468: PUSH
4469: LD_VAR 0 1
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: PUSH
4478: LD_INT 51
4480: PUSH
4481: EMPTY
4482: LIST
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: PPUSH
4488: CALL_OW 69
4492: PUSH
4493: FOR_IN
4494: IFFALSE 4516
// SetSide ( i , players [ 1 ] ) ;
4496: LD_VAR 0 4
4500: PPUSH
4501: LD_VAR 0 3
4505: PUSH
4506: LD_INT 1
4508: ARRAY
4509: PPUSH
4510: CALL_OW 235
4514: GO 4493
4516: POP
4517: POP
// end else
4518: GO 4718
// begin j := 1 ;
4520: LD_ADDR_VAR 0 5
4524: PUSH
4525: LD_INT 1
4527: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
4528: LD_ADDR_VAR 0 4
4532: PUSH
4533: LD_INT 22
4535: PUSH
4536: LD_VAR 0 1
4540: PUSH
4541: EMPTY
4542: LIST
4543: LIST
4544: PUSH
4545: LD_INT 2
4547: PUSH
4548: LD_INT 21
4550: PUSH
4551: LD_INT 1
4553: PUSH
4554: EMPTY
4555: LIST
4556: LIST
4557: PUSH
4558: LD_INT 51
4560: PUSH
4561: EMPTY
4562: LIST
4563: PUSH
4564: EMPTY
4565: LIST
4566: LIST
4567: PUSH
4568: LD_INT 21
4570: PUSH
4571: LD_INT 2
4573: PUSH
4574: EMPTY
4575: LIST
4576: LIST
4577: PUSH
4578: EMPTY
4579: LIST
4580: LIST
4581: LIST
4582: PUSH
4583: EMPTY
4584: LIST
4585: LIST
4586: PPUSH
4587: CALL_OW 69
4591: PUSH
4592: FOR_IN
4593: IFFALSE 4716
// begin SetSide ( i , players [ j ] ) ;
4595: LD_VAR 0 4
4599: PPUSH
4600: LD_VAR 0 3
4604: PUSH
4605: LD_VAR 0 5
4609: ARRAY
4610: PPUSH
4611: CALL_OW 235
// if IsDrivenBy ( i ) then
4615: LD_VAR 0 4
4619: PPUSH
4620: CALL_OW 311
4624: IFFALSE 4651
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
4626: LD_VAR 0 4
4630: PPUSH
4631: CALL_OW 311
4635: PPUSH
4636: LD_VAR 0 3
4640: PUSH
4641: LD_VAR 0 5
4645: ARRAY
4646: PPUSH
4647: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
4651: LD_VAR 0 4
4655: PPUSH
4656: CALL_OW 310
4660: PPUSH
4661: CALL_OW 247
4665: PUSH
4666: LD_INT 3
4668: EQUAL
4669: IFFALSE 4680
// ComExitBuilding ( i ) ;
4671: LD_VAR 0 4
4675: PPUSH
4676: CALL_OW 122
// j := j + 1 ;
4680: LD_ADDR_VAR 0 5
4684: PUSH
4685: LD_VAR 0 5
4689: PUSH
4690: LD_INT 1
4692: PLUS
4693: ST_TO_ADDR
// if j > players then
4694: LD_VAR 0 5
4698: PUSH
4699: LD_VAR 0 3
4703: GREATER
4704: IFFALSE 4714
// j := 1 ;
4706: LD_ADDR_VAR 0 5
4710: PUSH
4711: LD_INT 1
4713: ST_TO_ADDR
// end ;
4714: GO 4592
4716: POP
4717: POP
// end ; end ;
4718: LD_VAR 0 2
4722: RET
// export function Multiplayer_SpawnArtifact ( ) ; var i , pos ; begin
4723: LD_INT 0
4725: PPUSH
4726: PPUSH
4727: PPUSH
// i := 3 ;
4728: LD_ADDR_VAR 0 2
4732: PUSH
4733: LD_INT 3
4735: ST_TO_ADDR
// pos := [ [ 5 , 10 ] , [ 120 , 2 ] , [ 101 , 8 ] , [ 27 , 4 ] ] ;
4736: LD_ADDR_VAR 0 3
4740: PUSH
4741: LD_INT 5
4743: PUSH
4744: LD_INT 10
4746: PUSH
4747: EMPTY
4748: LIST
4749: LIST
4750: PUSH
4751: LD_INT 120
4753: PUSH
4754: LD_INT 2
4756: PUSH
4757: EMPTY
4758: LIST
4759: LIST
4760: PUSH
4761: LD_INT 101
4763: PUSH
4764: LD_INT 8
4766: PUSH
4767: EMPTY
4768: LIST
4769: LIST
4770: PUSH
4771: LD_INT 27
4773: PUSH
4774: LD_INT 4
4776: PUSH
4777: EMPTY
4778: LIST
4779: LIST
4780: PUSH
4781: EMPTY
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 5 , pos [ i ] [ 1 ] , pos [ i ] [ 2 ] , false ) ;
4787: LD_INT 4
4789: PPUSH
4790: LD_INT 5
4792: PPUSH
4793: LD_VAR 0 3
4797: PUSH
4798: LD_VAR 0 2
4802: ARRAY
4803: PUSH
4804: LD_INT 1
4806: ARRAY
4807: PPUSH
4808: LD_VAR 0 3
4812: PUSH
4813: LD_VAR 0 2
4817: ARRAY
4818: PUSH
4819: LD_INT 2
4821: ARRAY
4822: PPUSH
4823: LD_INT 0
4825: PPUSH
4826: CALL_OW 58
// end ;
4830: LD_VAR 0 1
4834: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
4835: LD_INT 0
4837: PPUSH
// if not side or side > 8 then
4838: LD_VAR 0 1
4842: NOT
4843: PUSH
4844: LD_VAR 0 1
4848: PUSH
4849: LD_INT 8
4851: GREATER
4852: OR
4853: IFFALSE 4857
// exit ;
4855: GO 4874
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
4857: LD_VAR 0 1
4861: PPUSH
4862: LD_INT 6
4864: PPUSH
4865: CALL 4320 0 1
4869: PPUSH
4870: CALL 4162 0 2
// end ;
4874: LD_VAR 0 2
4878: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
4879: LD_INT 0
4881: PPUSH
// if not side or side > 8 then
4882: LD_VAR 0 1
4886: NOT
4887: PUSH
4888: LD_VAR 0 1
4892: PUSH
4893: LD_INT 8
4895: GREATER
4896: OR
4897: IFFALSE 4901
// exit ;
4899: GO 4918
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
4901: LD_VAR 0 1
4905: PPUSH
4906: LD_INT 4
4908: PPUSH
4909: CALL 4320 0 1
4913: PPUSH
4914: CALL 4162 0 2
// end ;
4918: LD_VAR 0 2
4922: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
4923: LD_INT 0
4925: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
4926: LD_VAR 0 1
4930: NOT
4931: PUSH
4932: LD_VAR 0 1
4936: PUSH
4937: LD_INT 8
4939: GREATER
4940: OR
4941: PUSH
4942: LD_VAR 0 2
4946: PUSH
4947: LD_INT 2
4949: PUSH
4950: LD_INT 6
4952: PUSH
4953: LD_INT 36
4955: PUSH
4956: LD_INT 0
4958: PUSH
4959: EMPTY
4960: LIST
4961: LIST
4962: LIST
4963: LIST
4964: IN
4965: NOT
4966: OR
4967: IFFALSE 4971
// exit ;
4969: GO 4988
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
4971: LD_VAR 0 1
4975: PPUSH
4976: LD_INT 3
4978: PPUSH
4979: CALL 4320 0 1
4983: PPUSH
4984: CALL 4162 0 2
// end ;
4988: LD_VAR 0 3
4992: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
4993: LD_INT 0
4995: PPUSH
4996: PPUSH
// if not un then
4997: LD_VAR 0 1
5001: NOT
5002: IFFALSE 5006
// exit ;
5004: GO 5052
// if not points then
5006: LD_VAR 0 3
5010: NOT
5011: IFFALSE 5028
// gained_points := Multiplayer_GetCondition ( 1 ) else
5013: LD_ADDR_VAR 0 5
5017: PUSH
5018: LD_INT 1
5020: PPUSH
5021: CALL 4320 0 1
5025: ST_TO_ADDR
5026: GO 5038
// gained_points := points ;
5028: LD_ADDR_VAR 0 5
5032: PUSH
5033: LD_VAR 0 3
5037: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) end ;
5038: LD_VAR 0 2
5042: PPUSH
5043: LD_VAR 0 5
5047: PPUSH
5048: CALL 4162 0 2
5052: LD_VAR 0 4
5056: RET
// export function MultiplayerEvent_ArtifactCaptured ( side ) ; begin
5057: LD_INT 0
5059: PPUSH
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 2 ) ) ;
5060: LD_VAR 0 1
5064: PPUSH
5065: LD_INT 2
5067: PPUSH
5068: CALL 4320 0 1
5072: PPUSH
5073: CALL 4162 0 2
// end ; end_of_file
5077: LD_VAR 0 2
5081: RET
// export Sikorski ; export amTech , amConstructList , amBuildings , amVehicles , amVehiclesAtttackers , amDrivers , amVehiclesCounter , amForce , amForceTmp , amMechSpawnCounter ; export function PrepareAmerican ( side ) ; var i , d , xy , un , un2 , skill , tmp , fac ; begin
5082: LD_INT 0
5084: PPUSH
5085: PPUSH
5086: PPUSH
5087: PPUSH
5088: PPUSH
5089: PPUSH
5090: PPUSH
5091: PPUSH
5092: PPUSH
// amTech := GetTechNation ( side , nation_american , state_enabled ) ;
5093: LD_ADDR_EXP 32
5097: PUSH
5098: LD_VAR 0 1
5102: PPUSH
5103: LD_INT 1
5105: PPUSH
5106: LD_INT 1
5108: PPUSH
5109: CALL 41790 0 3
5113: ST_TO_ADDR
// amConstructList := [ [ us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_light_gun ] ] ;
5114: LD_ADDR_EXP 33
5118: PUSH
5119: LD_INT 4
5121: PUSH
5122: LD_INT 1
5124: PUSH
5125: LD_INT 1
5127: PUSH
5128: LD_INT 6
5130: PUSH
5131: EMPTY
5132: LIST
5133: LIST
5134: LIST
5135: LIST
5136: PUSH
5137: LD_INT 3
5139: PUSH
5140: LD_INT 1
5142: PUSH
5143: LD_INT 1
5145: PUSH
5146: LD_INT 5
5148: PUSH
5149: EMPTY
5150: LIST
5151: LIST
5152: LIST
5153: LIST
5154: PUSH
5155: LD_INT 3
5157: PUSH
5158: LD_INT 1
5160: PUSH
5161: LD_INT 1
5163: PUSH
5164: LD_INT 4
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: LIST
5171: LIST
5172: PUSH
5173: LD_INT 2
5175: PUSH
5176: LD_INT 1
5178: PUSH
5179: LD_INT 1
5181: PUSH
5182: LD_INT 4
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: LIST
5189: LIST
5190: PUSH
5191: LD_INT 2
5193: PUSH
5194: LD_INT 1
5196: PUSH
5197: LD_INT 1
5199: PUSH
5200: LD_INT 3
5202: PUSH
5203: EMPTY
5204: LIST
5205: LIST
5206: LIST
5207: LIST
5208: PUSH
5209: EMPTY
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: LIST
5215: ST_TO_ADDR
// amBuildings := [ ] ;
5216: LD_ADDR_EXP 34
5220: PUSH
5221: EMPTY
5222: ST_TO_ADDR
// amVehicles := [ ] ;
5223: LD_ADDR_EXP 35
5227: PUSH
5228: EMPTY
5229: ST_TO_ADDR
// amVehiclesAtttackers := [ ] ;
5230: LD_ADDR_EXP 36
5234: PUSH
5235: EMPTY
5236: ST_TO_ADDR
// amDrivers := [ ] ;
5237: LD_ADDR_EXP 37
5241: PUSH
5242: EMPTY
5243: ST_TO_ADDR
// amVehiclesCounter := 3 ;
5244: LD_ADDR_EXP 38
5248: PUSH
5249: LD_INT 3
5251: ST_TO_ADDR
// amMechSpawnCounter := [ 6 , 8 , 10 ] [ Difficulty ] ;
5252: LD_ADDR_EXP 41
5256: PUSH
5257: LD_INT 6
5259: PUSH
5260: LD_INT 8
5262: PUSH
5263: LD_INT 10
5265: PUSH
5266: EMPTY
5267: LIST
5268: LIST
5269: LIST
5270: PUSH
5271: LD_OWVAR 67
5275: ARRAY
5276: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
5277: LD_ADDR_VAR 0 8
5281: PUSH
5282: LD_INT 3
5284: PUSH
5285: LD_INT 4
5287: PUSH
5288: LD_INT 5
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: LIST
5295: PUSH
5296: LD_OWVAR 67
5300: ARRAY
5301: ST_TO_ADDR
// uc_side := side ;
5302: LD_ADDR_OWVAR 20
5306: PUSH
5307: LD_VAR 0 1
5311: ST_TO_ADDR
// uc_nation := nation_american ;
5312: LD_ADDR_OWVAR 21
5316: PUSH
5317: LD_INT 1
5319: ST_TO_ADDR
// hc_gallery := us ;
5320: LD_ADDR_OWVAR 33
5324: PUSH
5325: LD_STRING us
5327: ST_TO_ADDR
// hc_face_number := 19 ;
5328: LD_ADDR_OWVAR 34
5332: PUSH
5333: LD_INT 19
5335: ST_TO_ADDR
// hc_importance := 100 ;
5336: LD_ADDR_OWVAR 32
5340: PUSH
5341: LD_INT 100
5343: ST_TO_ADDR
// hc_name := Sikorski ;
5344: LD_ADDR_OWVAR 26
5348: PUSH
5349: LD_STRING Sikorski
5351: ST_TO_ADDR
// hc_sex := sex_male ;
5352: LD_ADDR_OWVAR 27
5356: PUSH
5357: LD_INT 1
5359: ST_TO_ADDR
// hc_skills := [ 5 , 3 , 2 , 1 ] ;
5360: LD_ADDR_OWVAR 31
5364: PUSH
5365: LD_INT 5
5367: PUSH
5368: LD_INT 3
5370: PUSH
5371: LD_INT 2
5373: PUSH
5374: LD_INT 1
5376: PUSH
5377: EMPTY
5378: LIST
5379: LIST
5380: LIST
5381: LIST
5382: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
5383: LD_ADDR_OWVAR 29
5387: PUSH
5388: LD_INT 10
5390: PUSH
5391: LD_INT 11
5393: PUSH
5394: EMPTY
5395: LIST
5396: LIST
5397: ST_TO_ADDR
// Sikorski := CreateHuman ;
5398: LD_ADDR_EXP 31
5402: PUSH
5403: CALL_OW 44
5407: ST_TO_ADDR
// PlaceHumanInUnit ( Sikorski , amDep ) ;
5408: LD_EXP 31
5412: PPUSH
5413: LD_INT 1
5415: PPUSH
5416: CALL_OW 52
// InitHC_All ( ) ;
5420: CALL_OW 584
// amForce := PrepareBase ( amDep , amBaseArea ,  , skill , [ 800 , 120 , 0 ] , [ [ 10 , 11 , 12 ] [ Difficulty ] , 4 , 6 , 3 ] ) ;
5424: LD_ADDR_EXP 39
5428: PUSH
5429: LD_INT 1
5431: PPUSH
5432: LD_INT 3
5434: PPUSH
5435: LD_STRING 
5437: PPUSH
5438: LD_VAR 0 8
5442: PPUSH
5443: LD_INT 800
5445: PUSH
5446: LD_INT 120
5448: PUSH
5449: LD_INT 0
5451: PUSH
5452: EMPTY
5453: LIST
5454: LIST
5455: LIST
5456: PPUSH
5457: LD_INT 10
5459: PUSH
5460: LD_INT 11
5462: PUSH
5463: LD_INT 12
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: LIST
5470: PUSH
5471: LD_OWVAR 67
5475: ARRAY
5476: PUSH
5477: LD_INT 4
5479: PUSH
5480: LD_INT 6
5482: PUSH
5483: LD_INT 3
5485: PUSH
5486: EMPTY
5487: LIST
5488: LIST
5489: LIST
5490: LIST
5491: PPUSH
5492: CALL 50388 0 6
5496: ST_TO_ADDR
// amForceTmp := [ ] ;
5497: LD_ADDR_EXP 40
5501: PUSH
5502: EMPTY
5503: ST_TO_ADDR
// if Difficulty = 3 then
5504: LD_OWVAR 67
5508: PUSH
5509: LD_INT 3
5511: EQUAL
5512: IFFALSE 5543
// begin bc_type := b_breastwork ;
5514: LD_ADDR_OWVAR 42
5518: PUSH
5519: LD_INT 31
5521: ST_TO_ADDR
// bc_level := 7 ;
5522: LD_ADDR_OWVAR 43
5526: PUSH
5527: LD_INT 7
5529: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 79 , 72 , 5 ) ;
5530: LD_INT 79
5532: PPUSH
5533: LD_INT 72
5535: PPUSH
5536: LD_INT 5
5538: PPUSH
5539: CALL_OW 47
// end ; for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_breastwork ] , [ f_not , [ f_inarea , amBaseArea ] ] , [ f_empty ] ] ) do
5543: LD_ADDR_VAR 0 3
5547: PUSH
5548: LD_INT 22
5550: PUSH
5551: LD_VAR 0 1
5555: PUSH
5556: EMPTY
5557: LIST
5558: LIST
5559: PUSH
5560: LD_INT 30
5562: PUSH
5563: LD_INT 31
5565: PUSH
5566: EMPTY
5567: LIST
5568: LIST
5569: PUSH
5570: LD_INT 3
5572: PUSH
5573: LD_INT 95
5575: PUSH
5576: LD_INT 3
5578: PUSH
5579: EMPTY
5580: LIST
5581: LIST
5582: PUSH
5583: EMPTY
5584: LIST
5585: LIST
5586: PUSH
5587: LD_INT 58
5589: PUSH
5590: EMPTY
5591: LIST
5592: PUSH
5593: EMPTY
5594: LIST
5595: LIST
5596: LIST
5597: LIST
5598: PPUSH
5599: CALL_OW 69
5603: PUSH
5604: FOR_IN
5605: IFFALSE 5734
// begin d := GetDir ( i ) ;
5607: LD_ADDR_VAR 0 4
5611: PUSH
5612: LD_VAR 0 3
5616: PPUSH
5617: CALL_OW 254
5621: ST_TO_ADDR
// if d < 3 then
5622: LD_VAR 0 4
5626: PUSH
5627: LD_INT 3
5629: LESS
5630: IFFALSE 5648
// d := d + 3 else
5632: LD_ADDR_VAR 0 4
5636: PUSH
5637: LD_VAR 0 4
5641: PUSH
5642: LD_INT 3
5644: PLUS
5645: ST_TO_ADDR
5646: GO 5662
// d := d - 3 ;
5648: LD_ADDR_VAR 0 4
5652: PUSH
5653: LD_VAR 0 4
5657: PUSH
5658: LD_INT 3
5660: MINUS
5661: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
5662: LD_INT 0
5664: PPUSH
5665: LD_VAR 0 8
5669: PPUSH
5670: CALL_OW 381
// un := CreateHuman ;
5674: LD_ADDR_VAR 0 6
5678: PUSH
5679: CALL_OW 44
5683: ST_TO_ADDR
// amForceTmp := Join ( amForceTmp , un ) ;
5684: LD_ADDR_EXP 40
5688: PUSH
5689: LD_EXP 40
5693: PPUSH
5694: LD_VAR 0 6
5698: PPUSH
5699: CALL 79418 0 2
5703: ST_TO_ADDR
// SetDir ( un , d ) ;
5704: LD_VAR 0 6
5708: PPUSH
5709: LD_VAR 0 4
5713: PPUSH
5714: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
5718: LD_VAR 0 6
5722: PPUSH
5723: LD_VAR 0 3
5727: PPUSH
5728: CALL_OW 52
// end ;
5732: GO 5604
5734: POP
5735: POP
// for i := 1 to 3 do
5736: LD_ADDR_VAR 0 3
5740: PUSH
5741: DOUBLE
5742: LD_INT 1
5744: DEC
5745: ST_TO_ADDR
5746: LD_INT 3
5748: PUSH
5749: FOR_TO
5750: IFFALSE 5811
// begin PrepareEngineer ( false , skill ) ;
5752: LD_INT 0
5754: PPUSH
5755: LD_VAR 0 8
5759: PPUSH
5760: CALL_OW 382
// un := CreateHuman ;
5764: LD_ADDR_VAR 0 6
5768: PUSH
5769: CALL_OW 44
5773: ST_TO_ADDR
// PlaceUnitArea ( un , amEngTmpArea , false ) ;
5774: LD_VAR 0 6
5778: PPUSH
5779: LD_INT 29
5781: PPUSH
5782: LD_INT 0
5784: PPUSH
5785: CALL_OW 49
// amForceTmp := Join ( amForceTmp , un ) ;
5789: LD_ADDR_EXP 40
5793: PUSH
5794: LD_EXP 40
5798: PPUSH
5799: LD_VAR 0 6
5803: PPUSH
5804: CALL 79418 0 2
5808: ST_TO_ADDR
// end ;
5809: GO 5749
5811: POP
5812: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
5813: LD_ADDR_VAR 0 3
5817: PUSH
5818: LD_INT 22
5820: PUSH
5821: LD_VAR 0 1
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: PUSH
5830: LD_INT 21
5832: PUSH
5833: LD_INT 3
5835: PUSH
5836: EMPTY
5837: LIST
5838: LIST
5839: PUSH
5840: EMPTY
5841: LIST
5842: LIST
5843: PPUSH
5844: CALL_OW 69
5848: PUSH
5849: FOR_IN
5850: IFFALSE 5883
// SetBLevel ( i , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
5852: LD_VAR 0 3
5856: PPUSH
5857: LD_INT 3
5859: PUSH
5860: LD_INT 5
5862: PUSH
5863: LD_INT 7
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: LIST
5870: PUSH
5871: LD_OWVAR 67
5875: ARRAY
5876: PPUSH
5877: CALL_OW 241
5881: GO 5849
5883: POP
5884: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
5885: LD_ADDR_VAR 0 3
5889: PUSH
5890: LD_INT 22
5892: PUSH
5893: LD_VAR 0 1
5897: PUSH
5898: EMPTY
5899: LIST
5900: LIST
5901: PUSH
5902: LD_INT 30
5904: PUSH
5905: LD_INT 32
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: PPUSH
5916: CALL_OW 69
5920: PUSH
5921: FOR_IN
5922: IFFALSE 5963
// PlaceWeaponTurret ( i , [ us_double_gun , us_gatling_gun , us_double_gun ] [ i mod 3 + 1 ] ) ;
5924: LD_VAR 0 3
5928: PPUSH
5929: LD_INT 5
5931: PUSH
5932: LD_INT 4
5934: PUSH
5935: LD_INT 5
5937: PUSH
5938: EMPTY
5939: LIST
5940: LIST
5941: LIST
5942: PUSH
5943: LD_VAR 0 3
5947: PUSH
5948: LD_INT 3
5950: MOD
5951: PUSH
5952: LD_INT 1
5954: PLUS
5955: ARRAY
5956: PPUSH
5957: CALL_OW 431
5961: GO 5921
5963: POP
5964: POP
// end ;
5965: LD_VAR 0 2
5969: RET
// function BaseScript ( side , base , area , outerArea , forces , healPoint , parkingPoint ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
5970: LD_INT 0
5972: PPUSH
5973: PPUSH
5974: PPUSH
5975: PPUSH
5976: PPUSH
5977: PPUSH
5978: PPUSH
5979: PPUSH
5980: PPUSH
5981: PPUSH
5982: PPUSH
5983: PPUSH
5984: PPUSH
5985: PPUSH
5986: PPUSH
5987: PPUSH
5988: PPUSH
5989: PPUSH
5990: PPUSH
5991: PPUSH
5992: PPUSH
5993: PPUSH
5994: PPUSH
5995: PPUSH
5996: PPUSH
5997: PPUSH
5998: PPUSH
// enable ;
5999: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
6000: LD_ADDR_VAR 0 10
6004: PUSH
6005: LD_INT 81
6007: PUSH
6008: LD_VAR 0 1
6012: PUSH
6013: EMPTY
6014: LIST
6015: LIST
6016: PPUSH
6017: CALL_OW 69
6021: ST_TO_ADDR
// if tmp then
6022: LD_VAR 0 10
6026: IFFALSE 6047
// enemySide := GetSide ( tmp [ 1 ] ) ;
6028: LD_ADDR_VAR 0 34
6032: PUSH
6033: LD_VAR 0 10
6037: PUSH
6038: LD_INT 1
6040: ARRAY
6041: PPUSH
6042: CALL_OW 255
6046: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
6047: LD_ADDR_VAR 0 22
6051: PUSH
6052: LD_VAR 0 3
6056: PPUSH
6057: LD_INT 81
6059: PUSH
6060: LD_VAR 0 1
6064: PUSH
6065: EMPTY
6066: LIST
6067: LIST
6068: PPUSH
6069: CALL_OW 70
6073: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
6074: LD_ADDR_VAR 0 23
6078: PUSH
6079: LD_VAR 0 4
6083: PPUSH
6084: LD_INT 81
6086: PUSH
6087: LD_VAR 0 1
6091: PUSH
6092: EMPTY
6093: LIST
6094: LIST
6095: PPUSH
6096: CALL_OW 70
6100: ST_TO_ADDR
// vehicles := amVehicles ;
6101: LD_ADDR_VAR 0 26
6105: PUSH
6106: LD_EXP 35
6110: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6111: LD_ADDR_VAR 0 32
6115: PUSH
6116: LD_VAR 0 3
6120: PPUSH
6121: LD_INT 22
6123: PUSH
6124: LD_VAR 0 1
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PUSH
6133: LD_INT 2
6135: PUSH
6136: LD_INT 30
6138: PUSH
6139: LD_INT 0
6141: PUSH
6142: EMPTY
6143: LIST
6144: LIST
6145: PUSH
6146: LD_INT 30
6148: PUSH
6149: LD_INT 1
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: PUSH
6156: EMPTY
6157: LIST
6158: LIST
6159: LIST
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: PPUSH
6165: CALL_OW 70
6169: ST_TO_ADDR
// if depot then
6170: LD_VAR 0 32
6174: IFFALSE 6190
// depot := depot [ 1 ] ;
6176: LD_ADDR_VAR 0 32
6180: PUSH
6181: LD_VAR 0 32
6185: PUSH
6186: LD_INT 1
6188: ARRAY
6189: ST_TO_ADDR
// if amTech then
6190: LD_EXP 32
6194: IFFALSE 6355
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
6196: LD_ADDR_VAR 0 12
6200: PUSH
6201: LD_VAR 0 3
6205: PPUSH
6206: LD_INT 22
6208: PUSH
6209: LD_VAR 0 1
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PUSH
6218: LD_INT 50
6220: PUSH
6221: EMPTY
6222: LIST
6223: PUSH
6224: LD_INT 2
6226: PUSH
6227: LD_INT 30
6229: PUSH
6230: LD_INT 6
6232: PUSH
6233: EMPTY
6234: LIST
6235: LIST
6236: PUSH
6237: LD_INT 30
6239: PUSH
6240: LD_INT 7
6242: PUSH
6243: EMPTY
6244: LIST
6245: LIST
6246: PUSH
6247: LD_INT 30
6249: PUSH
6250: LD_INT 8
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: LIST
6261: LIST
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: LIST
6267: PPUSH
6268: CALL_OW 70
6272: ST_TO_ADDR
// if lab then
6273: LD_VAR 0 12
6277: IFFALSE 6355
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
6279: LD_VAR 0 12
6283: PUSH
6284: LD_INT 1
6286: ARRAY
6287: PPUSH
6288: CALL_OW 461
6292: PUSH
6293: LD_INT 2
6295: EQUAL
6296: IFFALSE 6355
// begin for i in amTech do
6298: LD_ADDR_VAR 0 9
6302: PUSH
6303: LD_EXP 32
6307: PUSH
6308: FOR_IN
6309: IFFALSE 6353
// if CanBeResearched ( lab [ 1 ] , i ) then
6311: LD_VAR 0 12
6315: PUSH
6316: LD_INT 1
6318: ARRAY
6319: PPUSH
6320: LD_VAR 0 9
6324: PPUSH
6325: CALL_OW 430
6329: IFFALSE 6351
// begin ComResearch ( lab [ 1 ] , i ) ;
6331: LD_VAR 0 12
6335: PUSH
6336: LD_INT 1
6338: ARRAY
6339: PPUSH
6340: LD_VAR 0 9
6344: PPUSH
6345: CALL_OW 124
// break ;
6349: GO 6353
// end ;
6351: GO 6308
6353: POP
6354: POP
// end ; end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
6355: LD_ADDR_VAR 0 29
6359: PUSH
6360: LD_VAR 0 3
6364: PPUSH
6365: LD_INT 22
6367: PUSH
6368: LD_VAR 0 1
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: PUSH
6377: LD_INT 30
6379: PUSH
6380: LD_INT 3
6382: PUSH
6383: EMPTY
6384: LIST
6385: LIST
6386: PUSH
6387: LD_INT 50
6389: PUSH
6390: EMPTY
6391: LIST
6392: PUSH
6393: EMPTY
6394: LIST
6395: LIST
6396: LIST
6397: PPUSH
6398: CALL_OW 70
6402: ST_TO_ADDR
// if fac then
6403: LD_VAR 0 29
6407: IFFALSE 6742
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
6409: LD_VAR 0 29
6413: PUSH
6414: LD_INT 1
6416: ARRAY
6417: PPUSH
6418: CALL_OW 461
6422: PUSH
6423: LD_INT 2
6425: EQUAL
6426: IFFALSE 6742
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
6428: LD_ADDR_VAR 0 30
6432: PUSH
6433: LD_VAR 0 3
6437: PPUSH
6438: LD_INT 2
6440: PUSH
6441: LD_INT 30
6443: PUSH
6444: LD_INT 32
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PUSH
6451: LD_INT 30
6453: PUSH
6454: LD_INT 33
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: LIST
6465: PUSH
6466: LD_INT 35
6468: PUSH
6469: LD_INT 0
6471: PUSH
6472: EMPTY
6473: LIST
6474: LIST
6475: PUSH
6476: EMPTY
6477: LIST
6478: LIST
6479: PPUSH
6480: CALL_OW 70
6484: ST_TO_ADDR
// if emptyTowers then
6485: LD_VAR 0 30
6489: IFFALSE 6539
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
6491: LD_ADDR_VAR 0 31
6495: PUSH
6496: LD_VAR 0 30
6500: PUSH
6501: LD_INT 1
6503: ARRAY
6504: PPUSH
6505: LD_VAR 0 3
6509: PPUSH
6510: CALL 52074 0 2
6514: ST_TO_ADDR
// if weapon then
6515: LD_VAR 0 31
6519: IFFALSE 6539
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
6521: LD_VAR 0 30
6525: PUSH
6526: LD_INT 1
6528: ARRAY
6529: PPUSH
6530: LD_VAR 0 31
6534: PPUSH
6535: CALL_OW 148
// end ; if amConstructList then
6539: LD_EXP 33
6543: IFFALSE 6742
// for i := 1 to Count ( amConstructList ) do
6545: LD_ADDR_VAR 0 9
6549: PUSH
6550: DOUBLE
6551: LD_INT 1
6553: DEC
6554: ST_TO_ADDR
6555: LD_EXP 33
6559: PPUSH
6560: CALL 43829 0 1
6564: PUSH
6565: FOR_TO
6566: IFFALSE 6740
// begin if CanBeConstructed ( fac [ 1 ] , amConstructList [ i ] [ 1 ] , amConstructList [ i ] [ 2 ] , amConstructList [ i ] [ 3 ] , amConstructList [ i ] [ 4 ] ) then
6568: LD_VAR 0 29
6572: PUSH
6573: LD_INT 1
6575: ARRAY
6576: PPUSH
6577: LD_EXP 33
6581: PUSH
6582: LD_VAR 0 9
6586: ARRAY
6587: PUSH
6588: LD_INT 1
6590: ARRAY
6591: PPUSH
6592: LD_EXP 33
6596: PUSH
6597: LD_VAR 0 9
6601: ARRAY
6602: PUSH
6603: LD_INT 2
6605: ARRAY
6606: PPUSH
6607: LD_EXP 33
6611: PUSH
6612: LD_VAR 0 9
6616: ARRAY
6617: PUSH
6618: LD_INT 3
6620: ARRAY
6621: PPUSH
6622: LD_EXP 33
6626: PUSH
6627: LD_VAR 0 9
6631: ARRAY
6632: PUSH
6633: LD_INT 4
6635: ARRAY
6636: PPUSH
6637: CALL_OW 448
6641: IFFALSE 6738
// begin ComConstruct ( fac [ 1 ] , amConstructList [ i ] [ 1 ] , amConstructList [ i ] [ 2 ] , amConstructList [ i ] [ 3 ] , amConstructList [ i ] [ 4 ] ) ;
6643: LD_VAR 0 29
6647: PUSH
6648: LD_INT 1
6650: ARRAY
6651: PPUSH
6652: LD_EXP 33
6656: PUSH
6657: LD_VAR 0 9
6661: ARRAY
6662: PUSH
6663: LD_INT 1
6665: ARRAY
6666: PPUSH
6667: LD_EXP 33
6671: PUSH
6672: LD_VAR 0 9
6676: ARRAY
6677: PUSH
6678: LD_INT 2
6680: ARRAY
6681: PPUSH
6682: LD_EXP 33
6686: PUSH
6687: LD_VAR 0 9
6691: ARRAY
6692: PUSH
6693: LD_INT 3
6695: ARRAY
6696: PPUSH
6697: LD_EXP 33
6701: PUSH
6702: LD_VAR 0 9
6706: ARRAY
6707: PUSH
6708: LD_INT 4
6710: ARRAY
6711: PPUSH
6712: CALL_OW 125
// amConstructList := Delete ( amConstructList , i ) ;
6716: LD_ADDR_EXP 33
6720: PUSH
6721: LD_EXP 33
6725: PPUSH
6726: LD_VAR 0 9
6730: PPUSH
6731: CALL_OW 3
6735: ST_TO_ADDR
// break ;
6736: GO 6740
// end ; end ;
6738: GO 6565
6740: POP
6741: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6742: LD_ADDR_VAR 0 10
6746: PUSH
6747: LD_VAR 0 3
6751: PPUSH
6752: LD_INT 21
6754: PUSH
6755: LD_INT 3
6757: PUSH
6758: EMPTY
6759: LIST
6760: LIST
6761: PUSH
6762: LD_INT 3
6764: PUSH
6765: LD_INT 57
6767: PUSH
6768: EMPTY
6769: LIST
6770: PUSH
6771: EMPTY
6772: LIST
6773: LIST
6774: PUSH
6775: LD_INT 3
6777: PUSH
6778: LD_INT 24
6780: PUSH
6781: LD_INT 1000
6783: PUSH
6784: EMPTY
6785: LIST
6786: LIST
6787: PUSH
6788: EMPTY
6789: LIST
6790: LIST
6791: PUSH
6792: EMPTY
6793: LIST
6794: LIST
6795: LIST
6796: PPUSH
6797: CALL_OW 70
6801: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
6802: LD_ADDR_VAR 0 17
6806: PUSH
6807: LD_VAR 0 3
6811: PPUSH
6812: CALL_OW 435
6816: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
6817: LD_ADDR_VAR 0 14
6821: PUSH
6822: LD_VAR 0 5
6826: PPUSH
6827: LD_INT 25
6829: PUSH
6830: LD_INT 3
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: PUSH
6837: LD_INT 50
6839: PUSH
6840: EMPTY
6841: LIST
6842: PUSH
6843: EMPTY
6844: LIST
6845: LIST
6846: PPUSH
6847: CALL_OW 72
6851: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
6852: LD_VAR 0 14
6856: PPUSH
6857: LD_INT 3
6859: PUSH
6860: LD_INT 120
6862: PUSH
6863: LD_INT 7
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PUSH
6874: LD_INT 3
6876: PUSH
6877: LD_INT 54
6879: PUSH
6880: EMPTY
6881: LIST
6882: PUSH
6883: EMPTY
6884: LIST
6885: LIST
6886: PUSH
6887: EMPTY
6888: LIST
6889: LIST
6890: PPUSH
6891: CALL_OW 72
6895: PUSH
6896: LD_VAR 0 29
6900: PUSH
6901: LD_INT 1
6903: ARRAY
6904: PPUSH
6905: CALL_OW 302
6909: AND
6910: IFFALSE 6969
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
6912: LD_VAR 0 14
6916: PPUSH
6917: LD_INT 3
6919: PUSH
6920: LD_INT 120
6922: PUSH
6923: LD_INT 7
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: PUSH
6934: LD_INT 3
6936: PUSH
6937: LD_INT 54
6939: PUSH
6940: EMPTY
6941: LIST
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: PUSH
6947: EMPTY
6948: LIST
6949: LIST
6950: PPUSH
6951: CALL_OW 72
6955: PPUSH
6956: LD_VAR 0 29
6960: PUSH
6961: LD_INT 1
6963: ARRAY
6964: PPUSH
6965: CALL_OW 120
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
6969: LD_ADDR_VAR 0 18
6973: PUSH
6974: LD_VAR 0 5
6978: PPUSH
6979: LD_INT 25
6981: PUSH
6982: LD_INT 4
6984: PUSH
6985: EMPTY
6986: LIST
6987: LIST
6988: PUSH
6989: LD_INT 50
6991: PUSH
6992: EMPTY
6993: LIST
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: PPUSH
6999: CALL_OW 72
7003: ST_TO_ADDR
// lab := FilterUnitsInarea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
7004: LD_ADDR_VAR 0 12
7008: PUSH
7009: LD_VAR 0 3
7013: PPUSH
7014: LD_INT 2
7016: PUSH
7017: LD_INT 30
7019: PUSH
7020: LD_INT 6
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: PUSH
7027: LD_INT 30
7029: PUSH
7030: LD_INT 7
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: PUSH
7037: LD_INT 30
7039: PUSH
7040: LD_INT 8
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PUSH
7047: EMPTY
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: PPUSH
7053: CALL_OW 70
7057: ST_TO_ADDR
// if sci then
7058: LD_VAR 0 18
7062: IFFALSE 7223
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
7064: LD_ADDR_VAR 0 20
7068: PUSH
7069: LD_VAR 0 5
7073: PPUSH
7074: LD_INT 95
7076: PUSH
7077: LD_VAR 0 3
7081: PUSH
7082: EMPTY
7083: LIST
7084: LIST
7085: PUSH
7086: LD_INT 120
7088: PUSH
7089: LD_INT 1
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PPUSH
7100: CALL_OW 72
7104: ST_TO_ADDR
// if hurtUnits then
7105: LD_VAR 0 20
7109: IFFALSE 7170
// begin for i in sci do
7111: LD_ADDR_VAR 0 9
7115: PUSH
7116: LD_VAR 0 18
7120: PUSH
7121: FOR_IN
7122: IFFALSE 7166
// if IsInUnit ( i ) then
7124: LD_VAR 0 9
7128: PPUSH
7129: CALL_OW 310
7133: IFFALSE 7146
// ComExitBuilding ( i ) else
7135: LD_VAR 0 9
7139: PPUSH
7140: CALL_OW 122
7144: GO 7164
// ComHeal ( i , hurtUnits [ 1 ] ) ;
7146: LD_VAR 0 9
7150: PPUSH
7151: LD_VAR 0 20
7155: PUSH
7156: LD_INT 1
7158: ARRAY
7159: PPUSH
7160: CALL_OW 128
7164: GO 7121
7166: POP
7167: POP
// end else
7168: GO 7223
// if lab then
7170: LD_VAR 0 12
7174: IFFALSE 7223
// begin for i in sci do
7176: LD_ADDR_VAR 0 9
7180: PUSH
7181: LD_VAR 0 18
7185: PUSH
7186: FOR_IN
7187: IFFALSE 7221
// if not IsInUnit ( i ) then
7189: LD_VAR 0 9
7193: PPUSH
7194: CALL_OW 310
7198: NOT
7199: IFFALSE 7219
// ComEnterUnit ( i , lab [ 1 ] ) ;
7201: LD_VAR 0 9
7205: PPUSH
7206: LD_VAR 0 12
7210: PUSH
7211: LD_INT 1
7213: ARRAY
7214: PPUSH
7215: CALL_OW 120
7219: GO 7186
7221: POP
7222: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
7223: LD_ADDR_VAR 0 13
7227: PUSH
7228: LD_VAR 0 5
7232: PPUSH
7233: LD_INT 25
7235: PUSH
7236: LD_INT 2
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: PPUSH
7243: CALL_OW 72
7247: ST_TO_ADDR
// buildingsToBuild := amBuildings ;
7248: LD_ADDR_VAR 0 33
7252: PUSH
7253: LD_EXP 34
7257: ST_TO_ADDR
// if eng then
7258: LD_VAR 0 13
7262: IFFALSE 8096
// begin for i in eng do
7264: LD_ADDR_VAR 0 9
7268: PUSH
7269: LD_VAR 0 13
7273: PUSH
7274: FOR_IN
7275: IFFALSE 8094
// begin tag := GetTag ( i ) ;
7277: LD_ADDR_VAR 0 15
7281: PUSH
7282: LD_VAR 0 9
7286: PPUSH
7287: CALL_OW 110
7291: ST_TO_ADDR
// if IsInarea ( i , outerarea ) then
7292: LD_VAR 0 9
7296: PPUSH
7297: LD_VAR 0 4
7301: PPUSH
7302: CALL_OW 308
7306: IFFALSE 7337
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
7308: LD_VAR 0 9
7312: PPUSH
7313: LD_VAR 0 7
7317: PUSH
7318: LD_INT 1
7320: ARRAY
7321: PPUSH
7322: LD_VAR 0 7
7326: PUSH
7327: LD_INT 2
7329: ARRAY
7330: PPUSH
7331: CALL_OW 111
// continue ;
7335: GO 7274
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
7337: LD_VAR 0 9
7341: PPUSH
7342: CALL_OW 256
7346: PUSH
7347: LD_INT 800
7349: LESS
7350: PUSH
7351: LD_VAR 0 15
7355: PUSH
7356: LD_INT 1
7358: NONEQUAL
7359: AND
7360: IFFALSE 7410
// begin SetTag ( i , tHeal ) ;
7362: LD_VAR 0 9
7366: PPUSH
7367: LD_INT 1
7369: PPUSH
7370: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
7374: LD_VAR 0 9
7378: PPUSH
7379: LD_VAR 0 6
7383: PUSH
7384: LD_INT 1
7386: ARRAY
7387: PPUSH
7388: LD_VAR 0 6
7392: PUSH
7393: LD_INT 2
7395: ARRAY
7396: PPUSH
7397: CALL_OW 111
// AddComHold ( i ) ;
7401: LD_VAR 0 9
7405: PPUSH
7406: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
7410: LD_VAR 0 15
7414: PUSH
7415: LD_INT 1
7417: EQUAL
7418: PUSH
7419: LD_VAR 0 9
7423: PPUSH
7424: CALL_OW 256
7428: PUSH
7429: LD_INT 1000
7431: EQUAL
7432: AND
7433: IFFALSE 7447
// SetTag ( i , 0 ) ;
7435: LD_VAR 0 9
7439: PPUSH
7440: LD_INT 0
7442: PPUSH
7443: CALL_OW 109
// if not tag then
7447: LD_VAR 0 15
7451: NOT
7452: IFFALSE 7619
// begin undone := FilterUnitsInarea ( area , [ f_constructed ] ) ;
7454: LD_ADDR_VAR 0 11
7458: PUSH
7459: LD_VAR 0 3
7463: PPUSH
7464: LD_INT 57
7466: PUSH
7467: EMPTY
7468: LIST
7469: PPUSH
7470: CALL_OW 70
7474: ST_TO_ADDR
// if undone then
7475: LD_VAR 0 11
7479: IFFALSE 7501
// begin ComComplete ( i , undone [ 1 ] ) ;
7481: LD_VAR 0 9
7485: PPUSH
7486: LD_VAR 0 11
7490: PUSH
7491: LD_INT 1
7493: ARRAY
7494: PPUSH
7495: CALL 49927 0 2
// continue ;
7499: GO 7274
// end ; if cr or tmp or buildingsToBuild then
7501: LD_VAR 0 17
7505: PUSH
7506: LD_VAR 0 10
7510: OR
7511: PUSH
7512: LD_VAR 0 33
7516: OR
7517: IFFALSE 7593
// begin if IsInUnit ( i ) then
7519: LD_VAR 0 9
7523: PPUSH
7524: CALL_OW 310
7528: IFFALSE 7539
// ComExitBuilding ( i ) ;
7530: LD_VAR 0 9
7534: PPUSH
7535: CALL_OW 122
// if tmp then
7539: LD_VAR 0 10
7543: IFFALSE 7559
// SetTag ( i , tRepair ) else
7545: LD_VAR 0 9
7549: PPUSH
7550: LD_INT 3
7552: PPUSH
7553: CALL_OW 109
7557: GO 7591
// if cr then
7559: LD_VAR 0 17
7563: IFFALSE 7579
// SetTag ( i , tCrates ) else
7565: LD_VAR 0 9
7569: PPUSH
7570: LD_INT 2
7572: PPUSH
7573: CALL_OW 109
7577: GO 7591
// SetTag ( i , tBuild ) ;
7579: LD_VAR 0 9
7583: PPUSH
7584: LD_INT 5
7586: PPUSH
7587: CALL_OW 109
// end else
7591: GO 7619
// if not IsInUnit ( i ) then
7593: LD_VAR 0 9
7597: PPUSH
7598: CALL_OW 310
7602: NOT
7603: IFFALSE 7619
// ComEnterUnit ( i , depot ) ;
7605: LD_VAR 0 9
7609: PPUSH
7610: LD_VAR 0 32
7614: PPUSH
7615: CALL_OW 120
// end ; if tag = tRepair then
7619: LD_VAR 0 15
7623: PUSH
7624: LD_INT 3
7626: EQUAL
7627: IFFALSE 7733
// begin if IsInUnit ( i ) then
7629: LD_VAR 0 9
7633: PPUSH
7634: CALL_OW 310
7638: IFFALSE 7651
// begin ComExitBuilding ( i ) ;
7640: LD_VAR 0 9
7644: PPUSH
7645: CALL_OW 122
// continue ;
7649: GO 7274
// end ; if not tmp then
7651: LD_VAR 0 10
7655: NOT
7656: IFFALSE 7672
// begin SetTag ( i , 0 ) ;
7658: LD_VAR 0 9
7662: PPUSH
7663: LD_INT 0
7665: PPUSH
7666: CALL_OW 109
// continue ;
7670: GO 7274
// end ; if not HasTask ( i ) then
7672: LD_VAR 0 9
7676: PPUSH
7677: CALL_OW 314
7681: NOT
7682: IFFALSE 7702
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
7684: LD_VAR 0 9
7688: PPUSH
7689: LD_VAR 0 10
7693: PUSH
7694: LD_INT 1
7696: ARRAY
7697: PPUSH
7698: CALL_OW 130
// if not IsInarea ( i , area ) then
7702: LD_VAR 0 9
7706: PPUSH
7707: LD_VAR 0 3
7711: PPUSH
7712: CALL_OW 308
7716: NOT
7717: IFFALSE 7733
// ComMoveToarea ( i , area ) ;
7719: LD_VAR 0 9
7723: PPUSH
7724: LD_VAR 0 3
7728: PPUSH
7729: CALL_OW 113
// end ; if tag = tBuild then
7733: LD_VAR 0 15
7737: PUSH
7738: LD_INT 5
7740: EQUAL
7741: IFFALSE 7947
// begin if IsInUnit ( i ) then
7743: LD_VAR 0 9
7747: PPUSH
7748: CALL_OW 310
7752: IFFALSE 7765
// begin ComExitBuilding ( i ) ;
7754: LD_VAR 0 9
7758: PPUSH
7759: CALL_OW 122
// continue ;
7763: GO 7274
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
7765: LD_VAR 0 33
7769: NOT
7770: PUSH
7771: LD_VAR 0 22
7775: OR
7776: PUSH
7777: LD_VAR 0 23
7781: OR
7782: IFFALSE 7800
// begin SetTag ( i , 0 ) ;
7784: LD_VAR 0 9
7788: PPUSH
7789: LD_INT 0
7791: PPUSH
7792: CALL_OW 109
// continue ;
7796: GO 7274
// end else
7798: GO 7839
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
7800: LD_VAR 0 32
7804: PPUSH
7805: LD_VAR 0 33
7809: PUSH
7810: LD_INT 1
7812: ARRAY
7813: PUSH
7814: LD_INT 1
7816: ARRAY
7817: PPUSH
7818: CALL 83337 0 2
7822: NOT
7823: IFFALSE 7839
// begin SetTag ( i , 0 ) ;
7825: LD_VAR 0 9
7829: PPUSH
7830: LD_INT 0
7832: PPUSH
7833: CALL_OW 109
// continue ;
7837: GO 7274
// end ; undone := FilterUnitsInarea ( area , [ f_constructed ] ) ;
7839: LD_ADDR_VAR 0 11
7843: PUSH
7844: LD_VAR 0 3
7848: PPUSH
7849: LD_INT 57
7851: PUSH
7852: EMPTY
7853: LIST
7854: PPUSH
7855: CALL_OW 70
7859: ST_TO_ADDR
// if undone then
7860: LD_VAR 0 11
7864: IFFALSE 7886
// begin ComComplete ( i , undone [ 1 ] ) ;
7866: LD_VAR 0 9
7870: PPUSH
7871: LD_VAR 0 11
7875: PUSH
7876: LD_INT 1
7878: ARRAY
7879: PPUSH
7880: CALL 49927 0 2
// continue ;
7884: GO 7274
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
7886: LD_VAR 0 9
7890: PPUSH
7891: LD_VAR 0 33
7895: PUSH
7896: LD_INT 1
7898: ARRAY
7899: PUSH
7900: LD_INT 1
7902: ARRAY
7903: PPUSH
7904: LD_VAR 0 33
7908: PUSH
7909: LD_INT 1
7911: ARRAY
7912: PUSH
7913: LD_INT 2
7915: ARRAY
7916: PPUSH
7917: LD_VAR 0 33
7921: PUSH
7922: LD_INT 1
7924: ARRAY
7925: PUSH
7926: LD_INT 3
7928: ARRAY
7929: PPUSH
7930: LD_VAR 0 33
7934: PUSH
7935: LD_INT 1
7937: ARRAY
7938: PUSH
7939: LD_INT 4
7941: ARRAY
7942: PPUSH
7943: CALL_OW 145
// end ; if tag = tCrates then
7947: LD_VAR 0 15
7951: PUSH
7952: LD_INT 2
7954: EQUAL
7955: IFFALSE 8092
// begin if IsInUnit ( i ) then
7957: LD_VAR 0 9
7961: PPUSH
7962: CALL_OW 310
7966: IFFALSE 7979
// begin ComExitBuilding ( i ) ;
7968: LD_VAR 0 9
7972: PPUSH
7973: CALL_OW 122
// continue ;
7977: GO 7274
// end ; if not cr then
7979: LD_VAR 0 17
7983: NOT
7984: IFFALSE 8000
// begin SetTag ( i , 0 ) ;
7986: LD_VAR 0 9
7990: PPUSH
7991: LD_INT 0
7993: PPUSH
7994: CALL_OW 109
// continue ;
7998: GO 7274
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
8000: LD_VAR 0 9
8004: PPUSH
8005: CALL_OW 314
8009: NOT
8010: PUSH
8011: LD_INT 81
8013: PUSH
8014: LD_VAR 0 1
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: PUSH
8023: LD_INT 92
8025: PUSH
8026: LD_VAR 0 17
8030: PUSH
8031: LD_INT 1
8033: ARRAY
8034: PUSH
8035: LD_VAR 0 17
8039: PUSH
8040: LD_INT 2
8042: ARRAY
8043: PUSH
8044: LD_INT 12
8046: PUSH
8047: EMPTY
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: PUSH
8053: EMPTY
8054: LIST
8055: LIST
8056: PPUSH
8057: CALL_OW 69
8061: NOT
8062: AND
8063: IFFALSE 8092
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
8065: LD_VAR 0 9
8069: PPUSH
8070: LD_VAR 0 17
8074: PUSH
8075: LD_INT 1
8077: ARRAY
8078: PPUSH
8079: LD_VAR 0 17
8083: PUSH
8084: LD_INT 2
8086: ARRAY
8087: PPUSH
8088: CALL_OW 117
// end ; end ;
8092: GO 7274
8094: POP
8095: POP
// end ; if vehicles then
8096: LD_VAR 0 26
8100: IFFALSE 8900
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , us_cargo_bay ] ] ] , [ f_ok ] ] ) ;
8102: LD_ADDR_VAR 0 26
8106: PUSH
8107: LD_VAR 0 26
8111: PPUSH
8112: LD_INT 3
8114: PUSH
8115: LD_INT 2
8117: PUSH
8118: LD_INT 34
8120: PUSH
8121: LD_INT 13
8123: PUSH
8124: EMPTY
8125: LIST
8126: LIST
8127: PUSH
8128: LD_INT 34
8130: PUSH
8131: LD_INT 12
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: PUSH
8138: EMPTY
8139: LIST
8140: LIST
8141: LIST
8142: PUSH
8143: EMPTY
8144: LIST
8145: LIST
8146: PUSH
8147: LD_INT 50
8149: PUSH
8150: EMPTY
8151: LIST
8152: PUSH
8153: EMPTY
8154: LIST
8155: LIST
8156: PPUSH
8157: CALL_OW 72
8161: ST_TO_ADDR
// if vehicles then
8162: LD_VAR 0 26
8166: IFFALSE 8900
// begin for i in vehicles do
8168: LD_ADDR_VAR 0 9
8172: PUSH
8173: LD_VAR 0 26
8177: PUSH
8178: FOR_IN
8179: IFFALSE 8898
// begin tag := GetTag ( i ) ;
8181: LD_ADDR_VAR 0 15
8185: PUSH
8186: LD_VAR 0 9
8190: PPUSH
8191: CALL_OW 110
8195: ST_TO_ADDR
// if not tag then
8196: LD_VAR 0 15
8200: NOT
8201: IFFALSE 8347
// begin if GetControl ( i ) = control_manual then
8203: LD_VAR 0 9
8207: PPUSH
8208: CALL_OW 263
8212: PUSH
8213: LD_INT 1
8215: EQUAL
8216: IFFALSE 8333
// begin drivers := amDrivers ;
8218: LD_ADDR_VAR 0 24
8222: PUSH
8223: LD_EXP 37
8227: ST_TO_ADDR
// if not drivers then
8228: LD_VAR 0 24
8232: NOT
8233: IFFALSE 8313
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
8235: LD_ADDR_VAR 0 24
8239: PUSH
8240: LD_VAR 0 14
8244: PPUSH
8245: LD_INT 3
8247: PUSH
8248: LD_INT 120
8250: PUSH
8251: LD_INT 7
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: PPUSH
8262: CALL_OW 72
8266: ST_TO_ADDR
// if drivers then
8267: LD_VAR 0 24
8271: IFFALSE 8313
// begin SetTag ( drivers [ 1 ] , tMech ) ;
8273: LD_VAR 0 24
8277: PUSH
8278: LD_INT 1
8280: ARRAY
8281: PPUSH
8282: LD_INT 7
8284: PPUSH
8285: CALL_OW 109
// amDrivers := Join ( amDrivers , drivers [ 1 ] ) ;
8289: LD_ADDR_EXP 37
8293: PUSH
8294: LD_EXP 37
8298: PPUSH
8299: LD_VAR 0 24
8303: PUSH
8304: LD_INT 1
8306: ARRAY
8307: PPUSH
8308: CALL 79418 0 2
8312: ST_TO_ADDR
// end ; end ; if drivers then
8313: LD_VAR 0 24
8317: IFFALSE 8331
// SetTag ( i , tBusy ) ;
8319: LD_VAR 0 9
8323: PPUSH
8324: LD_INT 8
8326: PPUSH
8327: CALL_OW 109
// continue ;
8331: GO 8178
// end ; SetTag ( i , tBusy ) ;
8333: LD_VAR 0 9
8337: PPUSH
8338: LD_INT 8
8340: PPUSH
8341: CALL_OW 109
// end else
8345: GO 8896
// if tag = tBusy then
8347: LD_VAR 0 15
8351: PUSH
8352: LD_INT 8
8354: EQUAL
8355: IFFALSE 8567
// begin if GetLives ( i ) = 1000 then
8357: LD_VAR 0 9
8361: PPUSH
8362: CALL_OW 256
8366: PUSH
8367: LD_INT 1000
8369: EQUAL
8370: IFFALSE 8565
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
8372: LD_VAR 0 9
8376: PPUSH
8377: CALL_OW 263
8381: PUSH
8382: LD_INT 1
8384: EQUAL
8385: PUSH
8386: LD_VAR 0 9
8390: PPUSH
8391: CALL_OW 311
8395: NOT
8396: AND
8397: IFFALSE 8553
// begin drivers := amDrivers ;
8399: LD_ADDR_VAR 0 24
8403: PUSH
8404: LD_EXP 37
8408: ST_TO_ADDR
// if not drivers then
8409: LD_VAR 0 24
8413: NOT
8414: IFFALSE 8430
// begin SetTag ( i , 0 ) ;
8416: LD_VAR 0 9
8420: PPUSH
8421: LD_INT 0
8423: PPUSH
8424: CALL_OW 109
// continue ;
8428: GO 8178
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
8430: LD_VAR 0 24
8434: PUSH
8435: LD_INT 1
8437: ARRAY
8438: PPUSH
8439: CALL_OW 310
8443: PUSH
8444: LD_VAR 0 24
8448: PUSH
8449: LD_INT 1
8451: ARRAY
8452: PPUSH
8453: CALL 77022 0 1
8457: NOT
8458: AND
8459: IFFALSE 8474
// ComExitBuilding ( drivers [ 1 ] ) ;
8461: LD_VAR 0 24
8465: PUSH
8466: LD_INT 1
8468: ARRAY
8469: PPUSH
8470: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
8474: LD_VAR 0 26
8478: PPUSH
8479: LD_INT 120
8481: PUSH
8482: LD_INT 3
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: PPUSH
8489: CALL_OW 72
8493: PUSH
8494: LD_VAR 0 24
8498: PUSH
8499: LD_INT 1
8501: ARRAY
8502: PPUSH
8503: CALL_OW 314
8507: NOT
8508: AND
8509: PUSH
8510: LD_VAR 0 26
8514: PPUSH
8515: LD_INT 120
8517: PUSH
8518: LD_INT 3
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: PPUSH
8525: CALL_OW 72
8529: NOT
8530: OR
8531: IFFALSE 8551
// ComEnterUnit ( drivers [ 1 ] , i ) ;
8533: LD_VAR 0 24
8537: PUSH
8538: LD_INT 1
8540: ARRAY
8541: PPUSH
8542: LD_VAR 0 9
8546: PPUSH
8547: CALL_OW 120
// continue ;
8551: GO 8178
// end ; SetTag ( i , tAttack ) ;
8553: LD_VAR 0 9
8557: PPUSH
8558: LD_INT 13
8560: PPUSH
8561: CALL_OW 109
// end ; end else
8565: GO 8896
// if tag = tAttack then
8567: LD_VAR 0 15
8571: PUSH
8572: LD_INT 13
8574: EQUAL
8575: IFFALSE 8755
// begin enemy := enemyInBase ;
8577: LD_ADDR_VAR 0 21
8581: PUSH
8582: LD_VAR 0 22
8586: ST_TO_ADDR
// if not enemy then
8587: LD_VAR 0 21
8591: NOT
8592: IFFALSE 8604
// enemy := enemyOuterBase ;
8594: LD_ADDR_VAR 0 21
8598: PUSH
8599: LD_VAR 0 23
8603: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
8604: LD_VAR 0 21
8608: NOT
8609: PUSH
8610: LD_VAR 0 9
8614: PPUSH
8615: LD_VAR 0 7
8619: PUSH
8620: LD_INT 1
8622: ARRAY
8623: PPUSH
8624: LD_VAR 0 7
8628: PUSH
8629: LD_INT 2
8631: ARRAY
8632: PPUSH
8633: CALL_OW 297
8637: PUSH
8638: LD_INT 10
8640: GREATER
8641: AND
8642: IFFALSE 8673
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
8644: LD_VAR 0 9
8648: PPUSH
8649: LD_VAR 0 7
8653: PUSH
8654: LD_INT 1
8656: ARRAY
8657: PPUSH
8658: LD_VAR 0 7
8662: PUSH
8663: LD_INT 2
8665: ARRAY
8666: PPUSH
8667: CALL_OW 111
// continue ;
8671: GO 8178
// end ; if GetLives ( i ) < 650 then
8673: LD_VAR 0 9
8677: PPUSH
8678: CALL_OW 256
8682: PUSH
8683: LD_INT 650
8685: LESS
8686: IFFALSE 8729
// begin SetTag ( i , tVehRepair ) ;
8688: LD_VAR 0 9
8692: PPUSH
8693: LD_INT 9
8695: PPUSH
8696: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
8700: LD_VAR 0 9
8704: PPUSH
8705: LD_VAR 0 7
8709: PUSH
8710: LD_INT 1
8712: ARRAY
8713: PPUSH
8714: LD_VAR 0 7
8718: PUSH
8719: LD_INT 2
8721: ARRAY
8722: PPUSH
8723: CALL_OW 111
// continue ;
8727: GO 8178
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
8729: LD_VAR 0 9
8733: PPUSH
8734: LD_VAR 0 21
8738: PPUSH
8739: LD_VAR 0 9
8743: PPUSH
8744: CALL_OW 74
8748: PPUSH
8749: CALL_OW 115
// end else
8753: GO 8896
// if tag = tVehRepair then
8755: LD_VAR 0 15
8759: PUSH
8760: LD_INT 9
8762: EQUAL
8763: IFFALSE 8896
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
8765: LD_VAR 0 9
8769: PPUSH
8770: LD_VAR 0 7
8774: PUSH
8775: LD_INT 1
8777: ARRAY
8778: PPUSH
8779: LD_VAR 0 7
8783: PUSH
8784: LD_INT 2
8786: ARRAY
8787: PPUSH
8788: CALL_OW 297
8792: PUSH
8793: LD_INT 10
8795: GREATER
8796: IFFALSE 8827
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
8798: LD_VAR 0 9
8802: PPUSH
8803: LD_VAR 0 7
8807: PUSH
8808: LD_INT 1
8810: ARRAY
8811: PPUSH
8812: LD_VAR 0 7
8816: PUSH
8817: LD_INT 2
8819: ARRAY
8820: PPUSH
8821: CALL_OW 111
// continue ;
8825: GO 8178
// end ; if GetLives ( i ) = 1000 then
8827: LD_VAR 0 9
8831: PPUSH
8832: CALL_OW 256
8836: PUSH
8837: LD_INT 1000
8839: EQUAL
8840: IFFALSE 8856
// begin SetTag ( i , tBusy ) ;
8842: LD_VAR 0 9
8846: PPUSH
8847: LD_INT 8
8849: PPUSH
8850: CALL_OW 109
// continue ;
8854: GO 8178
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
8856: LD_VAR 0 9
8860: PPUSH
8861: CALL_OW 263
8865: PUSH
8866: LD_INT 1
8868: EQUAL
8869: PUSH
8870: LD_VAR 0 9
8874: PPUSH
8875: CALL_OW 311
8879: AND
8880: IFFALSE 8896
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
8882: LD_VAR 0 9
8886: PPUSH
8887: CALL_OW 311
8891: PPUSH
8892: CALL 81118 0 1
// end ; end ;
8896: GO 8178
8898: POP
8899: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
8900: LD_ADDR_VAR 0 19
8904: PUSH
8905: LD_VAR 0 5
8909: PPUSH
8910: LD_INT 2
8912: PUSH
8913: LD_INT 25
8915: PUSH
8916: LD_INT 1
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PUSH
8923: LD_INT 25
8925: PUSH
8926: LD_INT 8
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: PUSH
8933: LD_INT 25
8935: PUSH
8936: LD_INT 5
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PUSH
8943: LD_INT 25
8945: PUSH
8946: LD_INT 9
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: PUSH
8953: EMPTY
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: PUSH
8960: LD_INT 50
8962: PUSH
8963: EMPTY
8964: LIST
8965: PUSH
8966: EMPTY
8967: LIST
8968: LIST
8969: PPUSH
8970: CALL_OW 72
8974: ST_TO_ADDR
// if sol then
8975: LD_VAR 0 19
8979: IFFALSE 9487
// begin if enemyInBase then
8981: LD_VAR 0 22
8985: IFFALSE 9164
// begin for i in sol do
8987: LD_ADDR_VAR 0 9
8991: PUSH
8992: LD_VAR 0 19
8996: PUSH
8997: FOR_IN
8998: IFFALSE 9160
// begin tw := IsInUnit ( i ) ;
9000: LD_ADDR_VAR 0 16
9004: PUSH
9005: LD_VAR 0 9
9009: PPUSH
9010: CALL_OW 310
9014: ST_TO_ADDR
// if tw then
9015: LD_VAR 0 16
9019: IFFALSE 9102
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
9021: LD_VAR 0 16
9025: PUSH
9026: LD_INT 22
9028: PUSH
9029: LD_VAR 0 1
9033: PUSH
9034: EMPTY
9035: LIST
9036: LIST
9037: PUSH
9038: LD_INT 101
9040: PUSH
9041: LD_VAR 0 34
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: PUSH
9050: LD_INT 2
9052: PUSH
9053: LD_INT 30
9055: PUSH
9056: LD_INT 32
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: PUSH
9063: LD_INT 30
9065: PUSH
9066: LD_INT 31
9068: PUSH
9069: EMPTY
9070: LIST
9071: LIST
9072: PUSH
9073: EMPTY
9074: LIST
9075: LIST
9076: LIST
9077: PUSH
9078: EMPTY
9079: LIST
9080: LIST
9081: LIST
9082: PPUSH
9083: CALL_OW 69
9087: IN
9088: NOT
9089: IFFALSE 9100
// ComExitBuilding ( i ) ;
9091: LD_VAR 0 9
9095: PPUSH
9096: CALL_OW 122
// end else
9100: GO 9158
// if IsInarea ( i , area ) then
9102: LD_VAR 0 9
9106: PPUSH
9107: LD_VAR 0 3
9111: PPUSH
9112: CALL_OW 308
9116: IFFALSE 9144
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
9118: LD_VAR 0 9
9122: PPUSH
9123: LD_VAR 0 22
9127: PPUSH
9128: LD_VAR 0 9
9132: PPUSH
9133: CALL_OW 74
9137: PPUSH
9138: CALL_OW 115
9142: GO 9158
// ComMoveToarea ( i , area ) ;
9144: LD_VAR 0 9
9148: PPUSH
9149: LD_VAR 0 3
9153: PPUSH
9154: CALL_OW 113
// end ;
9158: GO 8997
9160: POP
9161: POP
// end else
9162: GO 9487
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
9164: LD_ADDR_VAR 0 28
9168: PUSH
9169: LD_VAR 0 3
9173: PPUSH
9174: LD_INT 3
9176: PUSH
9177: LD_INT 62
9179: PUSH
9180: EMPTY
9181: LIST
9182: PUSH
9183: EMPTY
9184: LIST
9185: LIST
9186: PUSH
9187: LD_INT 2
9189: PUSH
9190: LD_INT 30
9192: PUSH
9193: LD_INT 32
9195: PUSH
9196: EMPTY
9197: LIST
9198: LIST
9199: PUSH
9200: LD_INT 30
9202: PUSH
9203: LD_INT 4
9205: PUSH
9206: EMPTY
9207: LIST
9208: LIST
9209: PUSH
9210: LD_INT 30
9212: PUSH
9213: LD_INT 5
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: PUSH
9220: LD_INT 30
9222: PUSH
9223: LD_INT 31
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: PUSH
9237: EMPTY
9238: LIST
9239: LIST
9240: PPUSH
9241: CALL_OW 70
9245: ST_TO_ADDR
// if empty then
9246: LD_VAR 0 28
9250: IFFALSE 9267
// empty := ReverseArray ( empty ) ;
9252: LD_ADDR_VAR 0 28
9256: PUSH
9257: LD_VAR 0 28
9261: PPUSH
9262: CALL 74705 0 1
9266: ST_TO_ADDR
// for i in sol do
9267: LD_ADDR_VAR 0 9
9271: PUSH
9272: LD_VAR 0 19
9276: PUSH
9277: FOR_IN
9278: IFFALSE 9485
// begin tag := GetTag ( i ) ;
9280: LD_ADDR_VAR 0 15
9284: PUSH
9285: LD_VAR 0 9
9289: PPUSH
9290: CALL_OW 110
9294: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
9295: LD_VAR 0 9
9299: PPUSH
9300: CALL_OW 256
9304: PUSH
9305: LD_INT 1000
9307: LESS
9308: PUSH
9309: LD_VAR 0 15
9313: PUSH
9314: LD_INT 1
9316: NONEQUAL
9317: AND
9318: IFFALSE 9370
// begin SetTag ( i , tHeal ) ;
9320: LD_VAR 0 9
9324: PPUSH
9325: LD_INT 1
9327: PPUSH
9328: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
9332: LD_VAR 0 9
9336: PPUSH
9337: LD_VAR 0 6
9341: PUSH
9342: LD_INT 1
9344: ARRAY
9345: PPUSH
9346: LD_VAR 0 6
9350: PUSH
9351: LD_INT 2
9353: ARRAY
9354: PPUSH
9355: CALL_OW 111
// AddComHold ( i ) ;
9359: LD_VAR 0 9
9363: PPUSH
9364: CALL_OW 200
// continue ;
9368: GO 9277
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
9370: LD_VAR 0 9
9374: PPUSH
9375: CALL_OW 256
9379: PUSH
9380: LD_INT 1000
9382: EQUAL
9383: PUSH
9384: LD_VAR 0 15
9388: PUSH
9389: LD_INT 1
9391: EQUAL
9392: AND
9393: IFFALSE 9409
// begin SetTag ( i , 0 ) ;
9395: LD_VAR 0 9
9399: PPUSH
9400: LD_INT 0
9402: PPUSH
9403: CALL_OW 109
// continue ;
9407: GO 9277
// end ; if HasTask ( i ) then
9409: LD_VAR 0 9
9413: PPUSH
9414: CALL_OW 314
9418: IFFALSE 9422
// continue ;
9420: GO 9277
// if not IsInUnit ( i ) and not tag and empty then
9422: LD_VAR 0 9
9426: PPUSH
9427: CALL_OW 310
9431: NOT
9432: PUSH
9433: LD_VAR 0 15
9437: NOT
9438: AND
9439: PUSH
9440: LD_VAR 0 28
9444: AND
9445: IFFALSE 9483
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
9447: LD_VAR 0 9
9451: PPUSH
9452: LD_VAR 0 28
9456: PUSH
9457: LD_INT 1
9459: ARRAY
9460: PPUSH
9461: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
9465: LD_ADDR_VAR 0 28
9469: PUSH
9470: LD_VAR 0 28
9474: PPUSH
9475: LD_INT 1
9477: PPUSH
9478: CALL_OW 3
9482: ST_TO_ADDR
// end ; end ;
9483: GO 9277
9485: POP
9486: POP
// end ; end ; end ;
9487: LD_VAR 0 8
9491: RET
// every 0 0$2 trigger UnitFilter ( amForce , [ f_ok ] ) do
9492: LD_EXP 39
9496: PPUSH
9497: LD_INT 50
9499: PUSH
9500: EMPTY
9501: LIST
9502: PPUSH
9503: CALL_OW 72
9507: IFFALSE 9560
9509: GO 9511
9511: DISABLE
// begin enable ;
9512: ENABLE
// BaseScript ( botSides [ 1 ] , 1 , amBaseArea , amBaseOuterArea , amForce , [ 27 , 33 ] , [ 22 , 17 ] ) ;
9513: LD_EXP 3
9517: PUSH
9518: LD_INT 1
9520: ARRAY
9521: PPUSH
9522: LD_INT 1
9524: PPUSH
9525: LD_INT 3
9527: PPUSH
9528: LD_INT 4
9530: PPUSH
9531: LD_EXP 39
9535: PPUSH
9536: LD_INT 27
9538: PUSH
9539: LD_INT 33
9541: PUSH
9542: EMPTY
9543: LIST
9544: LIST
9545: PPUSH
9546: LD_INT 22
9548: PUSH
9549: LD_INT 17
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: PPUSH
9556: CALL 5970 0 7
// end ;
9560: END
// every 3 3$00 trigger IsOk ( amDep ) and not amConstructList do
9561: LD_INT 1
9563: PPUSH
9564: CALL_OW 302
9568: PUSH
9569: LD_EXP 33
9573: NOT
9574: AND
9575: IFFALSE 9645
9577: GO 9579
9579: DISABLE
// begin enable ;
9580: ENABLE
// amConstructList := [ [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ] ] ;
9581: LD_ADDR_EXP 33
9585: PUSH
9586: LD_INT 3
9588: PUSH
9589: LD_INT 1
9591: PUSH
9592: LD_INT 1
9594: PUSH
9595: LD_INT 5
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: PUSH
9604: LD_INT 3
9606: PUSH
9607: LD_INT 1
9609: PUSH
9610: LD_INT 1
9612: PUSH
9613: LD_INT 4
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: PUSH
9622: LD_INT 4
9624: PUSH
9625: LD_INT 1
9627: PUSH
9628: LD_INT 1
9630: PUSH
9631: LD_INT 6
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: LIST
9644: ST_TO_ADDR
// end ; end_of_file
9645: END
// export arTech , arConstructList , arBuildings , arVehicles , arVehiclesAtttackers , arDrivers , arMechSpawnCounter , arVehiclesCounter , arMinesList , arForce , arForceTmp ; export function PrepareArabian ( side ) ; var i , d , xy , un , un2 , skill , tmp , fac ; begin
9646: LD_INT 0
9648: PPUSH
9649: PPUSH
9650: PPUSH
9651: PPUSH
9652: PPUSH
9653: PPUSH
9654: PPUSH
9655: PPUSH
9656: PPUSH
// arTech := GetTechNation ( side , nation_arabian , state_enabled ) ;
9657: LD_ADDR_EXP 42
9661: PUSH
9662: LD_VAR 0 1
9666: PPUSH
9667: LD_INT 2
9669: PPUSH
9670: LD_INT 1
9672: PPUSH
9673: CALL 41790 0 3
9677: ST_TO_ADDR
// arConstructList := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] ] ;
9678: LD_ADDR_EXP 43
9682: PUSH
9683: LD_INT 13
9685: PUSH
9686: LD_INT 1
9688: PUSH
9689: LD_INT 1
9691: PUSH
9692: LD_INT 27
9694: PUSH
9695: EMPTY
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: PUSH
9701: LD_INT 13
9703: PUSH
9704: LD_INT 1
9706: PUSH
9707: LD_INT 1
9709: PUSH
9710: LD_INT 27
9712: PUSH
9713: EMPTY
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: PUSH
9719: LD_INT 13
9721: PUSH
9722: LD_INT 1
9724: PUSH
9725: LD_INT 1
9727: PUSH
9728: LD_INT 26
9730: PUSH
9731: EMPTY
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: PUSH
9737: LD_INT 13
9739: PUSH
9740: LD_INT 1
9742: PUSH
9743: LD_INT 1
9745: PUSH
9746: LD_INT 25
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: PUSH
9755: LD_INT 13
9757: PUSH
9758: LD_INT 1
9760: PUSH
9761: LD_INT 1
9763: PUSH
9764: LD_INT 27
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: PUSH
9773: EMPTY
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: ST_TO_ADDR
// arBuildings := [ ] ;
9780: LD_ADDR_EXP 44
9784: PUSH
9785: EMPTY
9786: ST_TO_ADDR
// arVehicles := [ ] ;
9787: LD_ADDR_EXP 45
9791: PUSH
9792: EMPTY
9793: ST_TO_ADDR
// arVehiclesAtttackers := [ ] ;
9794: LD_ADDR_EXP 46
9798: PUSH
9799: EMPTY
9800: ST_TO_ADDR
// arDrivers := [ ] ;
9801: LD_ADDR_EXP 47
9805: PUSH
9806: EMPTY
9807: ST_TO_ADDR
// arVehiclesCounter := 3 ;
9808: LD_ADDR_EXP 49
9812: PUSH
9813: LD_INT 3
9815: ST_TO_ADDR
// arMinesList := [ ] ;
9816: LD_ADDR_EXP 50
9820: PUSH
9821: EMPTY
9822: ST_TO_ADDR
// arMechSpawnCounter := [ 8 , 11 , 12 ] [ Difficulty ] ;
9823: LD_ADDR_EXP 48
9827: PUSH
9828: LD_INT 8
9830: PUSH
9831: LD_INT 11
9833: PUSH
9834: LD_INT 12
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: LIST
9841: PUSH
9842: LD_OWVAR 67
9846: ARRAY
9847: ST_TO_ADDR
// PlaceHiddenCamerasInArea ( side , hiddenCamArea ) ;
9848: LD_VAR 0 1
9852: PPUSH
9853: LD_INT 24
9855: PPUSH
9856: CALL 84353 0 2
// PlaceMines ( minefieldArea , [ 7 , 9 , 11 ] [ Difficulty ] ) ;
9860: LD_INT 23
9862: PPUSH
9863: LD_INT 7
9865: PUSH
9866: LD_INT 9
9868: PUSH
9869: LD_INT 11
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: LIST
9876: PUSH
9877: LD_OWVAR 67
9881: ARRAY
9882: PPUSH
9883: CALL 10448 0 2
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
9887: LD_ADDR_VAR 0 8
9891: PUSH
9892: LD_INT 3
9894: PUSH
9895: LD_INT 4
9897: PUSH
9898: LD_INT 5
9900: PUSH
9901: EMPTY
9902: LIST
9903: LIST
9904: LIST
9905: PUSH
9906: LD_OWVAR 67
9910: ARRAY
9911: ST_TO_ADDR
// uc_side := side ;
9912: LD_ADDR_OWVAR 20
9916: PUSH
9917: LD_VAR 0 1
9921: ST_TO_ADDR
// uc_nation := 2 ;
9922: LD_ADDR_OWVAR 21
9926: PUSH
9927: LD_INT 2
9929: ST_TO_ADDR
// arForce := PrepareBase ( arDep , arBaseArea ,  , skill , [ 800 , 120 , 0 ] , [ [ 10 , 11 , 12 ] [ Difficulty ] , 4 , 6 , 3 ] ) ;
9930: LD_ADDR_EXP 51
9934: PUSH
9935: LD_INT 32
9937: PPUSH
9938: LD_INT 5
9940: PPUSH
9941: LD_STRING 
9943: PPUSH
9944: LD_VAR 0 8
9948: PPUSH
9949: LD_INT 800
9951: PUSH
9952: LD_INT 120
9954: PUSH
9955: LD_INT 0
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: LIST
9962: PPUSH
9963: LD_INT 10
9965: PUSH
9966: LD_INT 11
9968: PUSH
9969: LD_INT 12
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: LIST
9976: PUSH
9977: LD_OWVAR 67
9981: ARRAY
9982: PUSH
9983: LD_INT 4
9985: PUSH
9986: LD_INT 6
9988: PUSH
9989: LD_INT 3
9991: PUSH
9992: EMPTY
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: PPUSH
9998: CALL 50388 0 6
10002: ST_TO_ADDR
// arForceTmp := [ ] ;
10003: LD_ADDR_EXP 52
10007: PUSH
10008: EMPTY
10009: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_breastwork ] , [ f_not , [ f_inarea , arBaseArea ] ] , [ f_empty ] ] ) do
10010: LD_ADDR_VAR 0 3
10014: PUSH
10015: LD_INT 22
10017: PUSH
10018: LD_VAR 0 1
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: PUSH
10027: LD_INT 30
10029: PUSH
10030: LD_INT 31
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: PUSH
10037: LD_INT 3
10039: PUSH
10040: LD_INT 95
10042: PUSH
10043: LD_INT 5
10045: PUSH
10046: EMPTY
10047: LIST
10048: LIST
10049: PUSH
10050: EMPTY
10051: LIST
10052: LIST
10053: PUSH
10054: LD_INT 58
10056: PUSH
10057: EMPTY
10058: LIST
10059: PUSH
10060: EMPTY
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: PPUSH
10066: CALL_OW 69
10070: PUSH
10071: FOR_IN
10072: IFFALSE 10201
// begin d := GetDir ( i ) ;
10074: LD_ADDR_VAR 0 4
10078: PUSH
10079: LD_VAR 0 3
10083: PPUSH
10084: CALL_OW 254
10088: ST_TO_ADDR
// if d < 3 then
10089: LD_VAR 0 4
10093: PUSH
10094: LD_INT 3
10096: LESS
10097: IFFALSE 10115
// d := d + 3 else
10099: LD_ADDR_VAR 0 4
10103: PUSH
10104: LD_VAR 0 4
10108: PUSH
10109: LD_INT 3
10111: PLUS
10112: ST_TO_ADDR
10113: GO 10129
// d := d - 3 ;
10115: LD_ADDR_VAR 0 4
10119: PUSH
10120: LD_VAR 0 4
10124: PUSH
10125: LD_INT 3
10127: MINUS
10128: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
10129: LD_INT 0
10131: PPUSH
10132: LD_VAR 0 8
10136: PPUSH
10137: CALL_OW 381
// un := CreateHuman ;
10141: LD_ADDR_VAR 0 6
10145: PUSH
10146: CALL_OW 44
10150: ST_TO_ADDR
// arForceTmp := Join ( arForceTmp , un ) ;
10151: LD_ADDR_EXP 52
10155: PUSH
10156: LD_EXP 52
10160: PPUSH
10161: LD_VAR 0 6
10165: PPUSH
10166: CALL 79418 0 2
10170: ST_TO_ADDR
// SetDir ( un , d ) ;
10171: LD_VAR 0 6
10175: PPUSH
10176: LD_VAR 0 4
10180: PPUSH
10181: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
10185: LD_VAR 0 6
10189: PPUSH
10190: LD_VAR 0 3
10194: PPUSH
10195: CALL_OW 52
// end ;
10199: GO 10071
10201: POP
10202: POP
// for i := 1 to Difficulty do
10203: LD_ADDR_VAR 0 3
10207: PUSH
10208: DOUBLE
10209: LD_INT 1
10211: DEC
10212: ST_TO_ADDR
10213: LD_OWVAR 67
10217: PUSH
10218: FOR_TO
10219: IFFALSE 10285
// begin PrepareSoldier ( false , skill ) ;
10221: LD_INT 0
10223: PPUSH
10224: LD_VAR 0 8
10228: PPUSH
10229: CALL_OW 381
// un := CreateHuman ;
10233: LD_ADDR_VAR 0 6
10237: PUSH
10238: CALL_OW 44
10242: ST_TO_ADDR
// arForceTmp := Join ( arForceTmp , un ) ;
10243: LD_ADDR_EXP 52
10247: PUSH
10248: LD_EXP 52
10252: PPUSH
10253: LD_VAR 0 6
10257: PPUSH
10258: CALL 79418 0 2
10262: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 215 , 102 ) ) ;
10263: LD_VAR 0 6
10267: PPUSH
10268: LD_INT 215
10270: PPUSH
10271: LD_INT 102
10273: PPUSH
10274: CALL_OW 428
10278: PPUSH
10279: CALL_OW 52
// end ;
10283: GO 10218
10285: POP
10286: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
10287: LD_ADDR_VAR 0 3
10291: PUSH
10292: LD_INT 22
10294: PUSH
10295: LD_VAR 0 1
10299: PUSH
10300: EMPTY
10301: LIST
10302: LIST
10303: PUSH
10304: LD_INT 21
10306: PUSH
10307: LD_INT 3
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: PPUSH
10318: CALL_OW 69
10322: PUSH
10323: FOR_IN
10324: IFFALSE 10357
// SetBLevel ( i , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
10326: LD_VAR 0 3
10330: PPUSH
10331: LD_INT 3
10333: PUSH
10334: LD_INT 5
10336: PUSH
10337: LD_INT 7
10339: PUSH
10340: EMPTY
10341: LIST
10342: LIST
10343: LIST
10344: PUSH
10345: LD_OWVAR 67
10349: ARRAY
10350: PPUSH
10351: CALL_OW 241
10355: GO 10323
10357: POP
10358: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
10359: LD_ADDR_VAR 0 3
10363: PUSH
10364: LD_INT 22
10366: PUSH
10367: LD_VAR 0 1
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: PUSH
10376: LD_INT 30
10378: PUSH
10379: LD_INT 32
10381: PUSH
10382: EMPTY
10383: LIST
10384: LIST
10385: PUSH
10386: EMPTY
10387: LIST
10388: LIST
10389: PPUSH
10390: CALL_OW 69
10394: PUSH
10395: FOR_IN
10396: IFFALSE 10441
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_double_machine_gun , ar_gun ] [ i mod 4 + 1 ] ) ;
10398: LD_VAR 0 3
10402: PPUSH
10403: LD_INT 27
10405: PUSH
10406: LD_INT 25
10408: PUSH
10409: LD_INT 24
10411: PUSH
10412: LD_INT 27
10414: PUSH
10415: EMPTY
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: PUSH
10421: LD_VAR 0 3
10425: PUSH
10426: LD_INT 4
10428: MOD
10429: PUSH
10430: LD_INT 1
10432: PLUS
10433: ARRAY
10434: PPUSH
10435: CALL_OW 431
10439: GO 10395
10441: POP
10442: POP
// end ;
10443: LD_VAR 0 2
10447: RET
// export function PlaceMines ( area , n ) ; var i , tmp , r ; begin
10448: LD_INT 0
10450: PPUSH
10451: PPUSH
10452: PPUSH
10453: PPUSH
// tmp := AreaToList ( area , 0 ) ;
10454: LD_ADDR_VAR 0 5
10458: PUSH
10459: LD_VAR 0 1
10463: PPUSH
10464: LD_INT 0
10466: PPUSH
10467: CALL_OW 517
10471: ST_TO_ADDR
// if not tmp then
10472: LD_VAR 0 5
10476: NOT
10477: IFFALSE 10481
// exit ;
10479: GO 10723
// for i := 1 to n do
10481: LD_ADDR_VAR 0 4
10485: PUSH
10486: DOUBLE
10487: LD_INT 1
10489: DEC
10490: ST_TO_ADDR
10491: LD_VAR 0 2
10495: PUSH
10496: FOR_TO
10497: IFFALSE 10721
// begin r := rand ( 1 , tmp [ 1 ] ) ;
10499: LD_ADDR_VAR 0 6
10503: PUSH
10504: LD_INT 1
10506: PPUSH
10507: LD_VAR 0 5
10511: PUSH
10512: LD_INT 1
10514: ARRAY
10515: PPUSH
10516: CALL_OW 12
10520: ST_TO_ADDR
// PlaceMine ( tmp [ 1 ] [ r ] , tmp [ 2 ] [ r ] , botSides [ 2 ] , 0 ) ;
10521: LD_VAR 0 5
10525: PUSH
10526: LD_INT 1
10528: ARRAY
10529: PUSH
10530: LD_VAR 0 6
10534: ARRAY
10535: PPUSH
10536: LD_VAR 0 5
10540: PUSH
10541: LD_INT 2
10543: ARRAY
10544: PUSH
10545: LD_VAR 0 6
10549: ARRAY
10550: PPUSH
10551: LD_EXP 3
10555: PUSH
10556: LD_INT 2
10558: ARRAY
10559: PPUSH
10560: LD_INT 0
10562: PPUSH
10563: CALL_OW 454
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 1 ] [ r ] ) ;
10567: LD_ADDR_EXP 50
10571: PUSH
10572: LD_EXP 50
10576: PPUSH
10577: LD_EXP 50
10581: PUSH
10582: LD_INT 1
10584: PLUS
10585: PPUSH
10586: LD_VAR 0 5
10590: PUSH
10591: LD_INT 1
10593: ARRAY
10594: PUSH
10595: LD_VAR 0 6
10599: ARRAY
10600: PPUSH
10601: CALL_OW 2
10605: ST_TO_ADDR
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 2 ] [ r ] ) ;
10606: LD_ADDR_EXP 50
10610: PUSH
10611: LD_EXP 50
10615: PPUSH
10616: LD_EXP 50
10620: PUSH
10621: LD_INT 1
10623: PLUS
10624: PPUSH
10625: LD_VAR 0 5
10629: PUSH
10630: LD_INT 2
10632: ARRAY
10633: PUSH
10634: LD_VAR 0 6
10638: ARRAY
10639: PPUSH
10640: CALL_OW 2
10644: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , Delete ( tmp [ 1 ] , r ) ) ;
10645: LD_ADDR_VAR 0 5
10649: PUSH
10650: LD_VAR 0 5
10654: PPUSH
10655: LD_INT 1
10657: PPUSH
10658: LD_VAR 0 5
10662: PUSH
10663: LD_INT 1
10665: ARRAY
10666: PPUSH
10667: LD_VAR 0 6
10671: PPUSH
10672: CALL_OW 3
10676: PPUSH
10677: CALL_OW 1
10681: ST_TO_ADDR
// tmp := Replace ( tmp , 2 , Delete ( tmp [ 2 ] , r ) ) ;
10682: LD_ADDR_VAR 0 5
10686: PUSH
10687: LD_VAR 0 5
10691: PPUSH
10692: LD_INT 2
10694: PPUSH
10695: LD_VAR 0 5
10699: PUSH
10700: LD_INT 2
10702: ARRAY
10703: PPUSH
10704: LD_VAR 0 6
10708: PPUSH
10709: CALL_OW 3
10713: PPUSH
10714: CALL_OW 1
10718: ST_TO_ADDR
// end ;
10719: GO 10496
10721: POP
10722: POP
// end ;
10723: LD_VAR 0 3
10727: RET
// function BaseScript ( side , base , area , outerArea , forces , healPoint , parkingPoint ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
10728: LD_INT 0
10730: PPUSH
10731: PPUSH
10732: PPUSH
10733: PPUSH
10734: PPUSH
10735: PPUSH
10736: PPUSH
10737: PPUSH
10738: PPUSH
10739: PPUSH
10740: PPUSH
10741: PPUSH
10742: PPUSH
10743: PPUSH
10744: PPUSH
10745: PPUSH
10746: PPUSH
10747: PPUSH
10748: PPUSH
10749: PPUSH
10750: PPUSH
10751: PPUSH
10752: PPUSH
10753: PPUSH
10754: PPUSH
10755: PPUSH
10756: PPUSH
// enable ;
10757: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
10758: LD_ADDR_VAR 0 10
10762: PUSH
10763: LD_INT 81
10765: PUSH
10766: LD_VAR 0 1
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: PPUSH
10775: CALL_OW 69
10779: ST_TO_ADDR
// if tmp then
10780: LD_VAR 0 10
10784: IFFALSE 10805
// enemySide := GetSide ( tmp [ 1 ] ) ;
10786: LD_ADDR_VAR 0 34
10790: PUSH
10791: LD_VAR 0 10
10795: PUSH
10796: LD_INT 1
10798: ARRAY
10799: PPUSH
10800: CALL_OW 255
10804: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10805: LD_ADDR_VAR 0 22
10809: PUSH
10810: LD_VAR 0 3
10814: PPUSH
10815: LD_INT 81
10817: PUSH
10818: LD_VAR 0 1
10822: PUSH
10823: EMPTY
10824: LIST
10825: LIST
10826: PPUSH
10827: CALL_OW 70
10831: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
10832: LD_ADDR_VAR 0 23
10836: PUSH
10837: LD_VAR 0 4
10841: PPUSH
10842: LD_INT 81
10844: PUSH
10845: LD_VAR 0 1
10849: PUSH
10850: EMPTY
10851: LIST
10852: LIST
10853: PPUSH
10854: CALL_OW 70
10858: ST_TO_ADDR
// vehicles := arVehicles ;
10859: LD_ADDR_VAR 0 26
10863: PUSH
10864: LD_EXP 45
10868: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10869: LD_ADDR_VAR 0 32
10873: PUSH
10874: LD_VAR 0 3
10878: PPUSH
10879: LD_INT 22
10881: PUSH
10882: LD_VAR 0 1
10886: PUSH
10887: EMPTY
10888: LIST
10889: LIST
10890: PUSH
10891: LD_INT 2
10893: PUSH
10894: LD_INT 30
10896: PUSH
10897: LD_INT 0
10899: PUSH
10900: EMPTY
10901: LIST
10902: LIST
10903: PUSH
10904: LD_INT 30
10906: PUSH
10907: LD_INT 1
10909: PUSH
10910: EMPTY
10911: LIST
10912: LIST
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: LIST
10918: PUSH
10919: EMPTY
10920: LIST
10921: LIST
10922: PPUSH
10923: CALL_OW 70
10927: ST_TO_ADDR
// if depot then
10928: LD_VAR 0 32
10932: IFFALSE 10948
// depot := depot [ 1 ] ;
10934: LD_ADDR_VAR 0 32
10938: PUSH
10939: LD_VAR 0 32
10943: PUSH
10944: LD_INT 1
10946: ARRAY
10947: ST_TO_ADDR
// if arTech then
10948: LD_EXP 42
10952: IFFALSE 11113
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
10954: LD_ADDR_VAR 0 12
10958: PUSH
10959: LD_VAR 0 3
10963: PPUSH
10964: LD_INT 22
10966: PUSH
10967: LD_VAR 0 1
10971: PUSH
10972: EMPTY
10973: LIST
10974: LIST
10975: PUSH
10976: LD_INT 50
10978: PUSH
10979: EMPTY
10980: LIST
10981: PUSH
10982: LD_INT 2
10984: PUSH
10985: LD_INT 30
10987: PUSH
10988: LD_INT 6
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: PUSH
10995: LD_INT 30
10997: PUSH
10998: LD_INT 7
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: PUSH
11005: LD_INT 30
11007: PUSH
11008: LD_INT 8
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: PUSH
11021: EMPTY
11022: LIST
11023: LIST
11024: LIST
11025: PPUSH
11026: CALL_OW 70
11030: ST_TO_ADDR
// if lab then
11031: LD_VAR 0 12
11035: IFFALSE 11113
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
11037: LD_VAR 0 12
11041: PUSH
11042: LD_INT 1
11044: ARRAY
11045: PPUSH
11046: CALL_OW 461
11050: PUSH
11051: LD_INT 2
11053: EQUAL
11054: IFFALSE 11113
// begin for i in arTech do
11056: LD_ADDR_VAR 0 9
11060: PUSH
11061: LD_EXP 42
11065: PUSH
11066: FOR_IN
11067: IFFALSE 11111
// if CanBeResearched ( lab [ 1 ] , i ) then
11069: LD_VAR 0 12
11073: PUSH
11074: LD_INT 1
11076: ARRAY
11077: PPUSH
11078: LD_VAR 0 9
11082: PPUSH
11083: CALL_OW 430
11087: IFFALSE 11109
// begin ComResearch ( lab [ 1 ] , i ) ;
11089: LD_VAR 0 12
11093: PUSH
11094: LD_INT 1
11096: ARRAY
11097: PPUSH
11098: LD_VAR 0 9
11102: PPUSH
11103: CALL_OW 124
// break ;
11107: GO 11111
// end ;
11109: GO 11066
11111: POP
11112: POP
// end ; end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
11113: LD_ADDR_VAR 0 29
11117: PUSH
11118: LD_VAR 0 3
11122: PPUSH
11123: LD_INT 22
11125: PUSH
11126: LD_VAR 0 1
11130: PUSH
11131: EMPTY
11132: LIST
11133: LIST
11134: PUSH
11135: LD_INT 30
11137: PUSH
11138: LD_INT 3
11140: PUSH
11141: EMPTY
11142: LIST
11143: LIST
11144: PUSH
11145: LD_INT 50
11147: PUSH
11148: EMPTY
11149: LIST
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: LIST
11155: PPUSH
11156: CALL_OW 70
11160: ST_TO_ADDR
// if fac then
11161: LD_VAR 0 29
11165: IFFALSE 11500
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
11167: LD_VAR 0 29
11171: PUSH
11172: LD_INT 1
11174: ARRAY
11175: PPUSH
11176: CALL_OW 461
11180: PUSH
11181: LD_INT 2
11183: EQUAL
11184: IFFALSE 11500
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
11186: LD_ADDR_VAR 0 30
11190: PUSH
11191: LD_VAR 0 3
11195: PPUSH
11196: LD_INT 2
11198: PUSH
11199: LD_INT 30
11201: PUSH
11202: LD_INT 32
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: PUSH
11209: LD_INT 30
11211: PUSH
11212: LD_INT 33
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: LIST
11223: PUSH
11224: LD_INT 35
11226: PUSH
11227: LD_INT 0
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: PPUSH
11238: CALL_OW 70
11242: ST_TO_ADDR
// if emptyTowers then
11243: LD_VAR 0 30
11247: IFFALSE 11297
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
11249: LD_ADDR_VAR 0 31
11253: PUSH
11254: LD_VAR 0 30
11258: PUSH
11259: LD_INT 1
11261: ARRAY
11262: PPUSH
11263: LD_VAR 0 3
11267: PPUSH
11268: CALL 52074 0 2
11272: ST_TO_ADDR
// if weapon then
11273: LD_VAR 0 31
11277: IFFALSE 11297
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
11279: LD_VAR 0 30
11283: PUSH
11284: LD_INT 1
11286: ARRAY
11287: PPUSH
11288: LD_VAR 0 31
11292: PPUSH
11293: CALL_OW 148
// end ; if arConstructList then
11297: LD_EXP 43
11301: IFFALSE 11500
// for i := 1 to Count ( arConstructList ) do
11303: LD_ADDR_VAR 0 9
11307: PUSH
11308: DOUBLE
11309: LD_INT 1
11311: DEC
11312: ST_TO_ADDR
11313: LD_EXP 43
11317: PPUSH
11318: CALL 43829 0 1
11322: PUSH
11323: FOR_TO
11324: IFFALSE 11498
// begin if CanBeConstructed ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) then
11326: LD_VAR 0 29
11330: PUSH
11331: LD_INT 1
11333: ARRAY
11334: PPUSH
11335: LD_EXP 43
11339: PUSH
11340: LD_VAR 0 9
11344: ARRAY
11345: PUSH
11346: LD_INT 1
11348: ARRAY
11349: PPUSH
11350: LD_EXP 43
11354: PUSH
11355: LD_VAR 0 9
11359: ARRAY
11360: PUSH
11361: LD_INT 2
11363: ARRAY
11364: PPUSH
11365: LD_EXP 43
11369: PUSH
11370: LD_VAR 0 9
11374: ARRAY
11375: PUSH
11376: LD_INT 3
11378: ARRAY
11379: PPUSH
11380: LD_EXP 43
11384: PUSH
11385: LD_VAR 0 9
11389: ARRAY
11390: PUSH
11391: LD_INT 4
11393: ARRAY
11394: PPUSH
11395: CALL_OW 448
11399: IFFALSE 11496
// begin ComConstruct ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) ;
11401: LD_VAR 0 29
11405: PUSH
11406: LD_INT 1
11408: ARRAY
11409: PPUSH
11410: LD_EXP 43
11414: PUSH
11415: LD_VAR 0 9
11419: ARRAY
11420: PUSH
11421: LD_INT 1
11423: ARRAY
11424: PPUSH
11425: LD_EXP 43
11429: PUSH
11430: LD_VAR 0 9
11434: ARRAY
11435: PUSH
11436: LD_INT 2
11438: ARRAY
11439: PPUSH
11440: LD_EXP 43
11444: PUSH
11445: LD_VAR 0 9
11449: ARRAY
11450: PUSH
11451: LD_INT 3
11453: ARRAY
11454: PPUSH
11455: LD_EXP 43
11459: PUSH
11460: LD_VAR 0 9
11464: ARRAY
11465: PUSH
11466: LD_INT 4
11468: ARRAY
11469: PPUSH
11470: CALL_OW 125
// arConstructList := Delete ( arConstructList , i ) ;
11474: LD_ADDR_EXP 43
11478: PUSH
11479: LD_EXP 43
11483: PPUSH
11484: LD_VAR 0 9
11488: PPUSH
11489: CALL_OW 3
11493: ST_TO_ADDR
// break ;
11494: GO 11498
// end ; end ;
11496: GO 11323
11498: POP
11499: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11500: LD_ADDR_VAR 0 10
11504: PUSH
11505: LD_VAR 0 3
11509: PPUSH
11510: LD_INT 21
11512: PUSH
11513: LD_INT 3
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: PUSH
11520: LD_INT 3
11522: PUSH
11523: LD_INT 57
11525: PUSH
11526: EMPTY
11527: LIST
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: PUSH
11533: LD_INT 3
11535: PUSH
11536: LD_INT 24
11538: PUSH
11539: LD_INT 1000
11541: PUSH
11542: EMPTY
11543: LIST
11544: LIST
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: PUSH
11550: EMPTY
11551: LIST
11552: LIST
11553: LIST
11554: PPUSH
11555: CALL_OW 70
11559: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
11560: LD_ADDR_VAR 0 17
11564: PUSH
11565: LD_VAR 0 3
11569: PPUSH
11570: CALL_OW 435
11574: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
11575: LD_ADDR_VAR 0 14
11579: PUSH
11580: LD_VAR 0 5
11584: PPUSH
11585: LD_INT 25
11587: PUSH
11588: LD_INT 3
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: PUSH
11595: LD_INT 50
11597: PUSH
11598: EMPTY
11599: LIST
11600: PUSH
11601: EMPTY
11602: LIST
11603: LIST
11604: PPUSH
11605: CALL_OW 72
11609: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
11610: LD_VAR 0 14
11614: PPUSH
11615: LD_INT 3
11617: PUSH
11618: LD_INT 120
11620: PUSH
11621: LD_INT 7
11623: PUSH
11624: EMPTY
11625: LIST
11626: LIST
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: PUSH
11632: LD_INT 3
11634: PUSH
11635: LD_INT 54
11637: PUSH
11638: EMPTY
11639: LIST
11640: PUSH
11641: EMPTY
11642: LIST
11643: LIST
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: PPUSH
11649: CALL_OW 72
11653: PUSH
11654: LD_VAR 0 29
11658: PUSH
11659: LD_INT 1
11661: ARRAY
11662: PPUSH
11663: CALL_OW 302
11667: AND
11668: IFFALSE 11727
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
11670: LD_VAR 0 14
11674: PPUSH
11675: LD_INT 3
11677: PUSH
11678: LD_INT 120
11680: PUSH
11681: LD_INT 7
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: PUSH
11688: EMPTY
11689: LIST
11690: LIST
11691: PUSH
11692: LD_INT 3
11694: PUSH
11695: LD_INT 54
11697: PUSH
11698: EMPTY
11699: LIST
11700: PUSH
11701: EMPTY
11702: LIST
11703: LIST
11704: PUSH
11705: EMPTY
11706: LIST
11707: LIST
11708: PPUSH
11709: CALL_OW 72
11713: PPUSH
11714: LD_VAR 0 29
11718: PUSH
11719: LD_INT 1
11721: ARRAY
11722: PPUSH
11723: CALL_OW 120
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
11727: LD_ADDR_VAR 0 18
11731: PUSH
11732: LD_VAR 0 5
11736: PPUSH
11737: LD_INT 25
11739: PUSH
11740: LD_INT 4
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: PUSH
11747: LD_INT 50
11749: PUSH
11750: EMPTY
11751: LIST
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: PPUSH
11757: CALL_OW 72
11761: ST_TO_ADDR
// lab := FilterUnitsInArea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
11762: LD_ADDR_VAR 0 12
11766: PUSH
11767: LD_VAR 0 3
11771: PPUSH
11772: LD_INT 2
11774: PUSH
11775: LD_INT 30
11777: PUSH
11778: LD_INT 6
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: PUSH
11785: LD_INT 30
11787: PUSH
11788: LD_INT 7
11790: PUSH
11791: EMPTY
11792: LIST
11793: LIST
11794: PUSH
11795: LD_INT 30
11797: PUSH
11798: LD_INT 8
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: PUSH
11805: EMPTY
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: PPUSH
11811: CALL_OW 70
11815: ST_TO_ADDR
// if sci then
11816: LD_VAR 0 18
11820: IFFALSE 11981
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
11822: LD_ADDR_VAR 0 20
11826: PUSH
11827: LD_VAR 0 5
11831: PPUSH
11832: LD_INT 95
11834: PUSH
11835: LD_VAR 0 3
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: PUSH
11844: LD_INT 120
11846: PUSH
11847: LD_INT 1
11849: PUSH
11850: EMPTY
11851: LIST
11852: LIST
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: PPUSH
11858: CALL_OW 72
11862: ST_TO_ADDR
// if hurtUnits then
11863: LD_VAR 0 20
11867: IFFALSE 11928
// begin for i in sci do
11869: LD_ADDR_VAR 0 9
11873: PUSH
11874: LD_VAR 0 18
11878: PUSH
11879: FOR_IN
11880: IFFALSE 11924
// if IsInUnit ( i ) then
11882: LD_VAR 0 9
11886: PPUSH
11887: CALL_OW 310
11891: IFFALSE 11904
// ComExitBuilding ( i ) else
11893: LD_VAR 0 9
11897: PPUSH
11898: CALL_OW 122
11902: GO 11922
// ComHeal ( i , hurtUnits [ 1 ] ) ;
11904: LD_VAR 0 9
11908: PPUSH
11909: LD_VAR 0 20
11913: PUSH
11914: LD_INT 1
11916: ARRAY
11917: PPUSH
11918: CALL_OW 128
11922: GO 11879
11924: POP
11925: POP
// end else
11926: GO 11981
// if lab then
11928: LD_VAR 0 12
11932: IFFALSE 11981
// begin for i in sci do
11934: LD_ADDR_VAR 0 9
11938: PUSH
11939: LD_VAR 0 18
11943: PUSH
11944: FOR_IN
11945: IFFALSE 11979
// if not IsInUnit ( i ) then
11947: LD_VAR 0 9
11951: PPUSH
11952: CALL_OW 310
11956: NOT
11957: IFFALSE 11977
// ComEnterUnit ( i , lab [ 1 ] ) ;
11959: LD_VAR 0 9
11963: PPUSH
11964: LD_VAR 0 12
11968: PUSH
11969: LD_INT 1
11971: ARRAY
11972: PPUSH
11973: CALL_OW 120
11977: GO 11944
11979: POP
11980: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
11981: LD_ADDR_VAR 0 13
11985: PUSH
11986: LD_VAR 0 5
11990: PPUSH
11991: LD_INT 25
11993: PUSH
11994: LD_INT 2
11996: PUSH
11997: EMPTY
11998: LIST
11999: LIST
12000: PPUSH
12001: CALL_OW 72
12005: ST_TO_ADDR
// buildingsToBuild := arBuildings ;
12006: LD_ADDR_VAR 0 33
12010: PUSH
12011: LD_EXP 44
12015: ST_TO_ADDR
// if eng then
12016: LD_VAR 0 13
12020: IFFALSE 12854
// begin for i in eng do
12022: LD_ADDR_VAR 0 9
12026: PUSH
12027: LD_VAR 0 13
12031: PUSH
12032: FOR_IN
12033: IFFALSE 12852
// begin tag := GetTag ( i ) ;
12035: LD_ADDR_VAR 0 15
12039: PUSH
12040: LD_VAR 0 9
12044: PPUSH
12045: CALL_OW 110
12049: ST_TO_ADDR
// if IsInArea ( i , outerArea ) then
12050: LD_VAR 0 9
12054: PPUSH
12055: LD_VAR 0 4
12059: PPUSH
12060: CALL_OW 308
12064: IFFALSE 12095
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
12066: LD_VAR 0 9
12070: PPUSH
12071: LD_VAR 0 7
12075: PUSH
12076: LD_INT 1
12078: ARRAY
12079: PPUSH
12080: LD_VAR 0 7
12084: PUSH
12085: LD_INT 2
12087: ARRAY
12088: PPUSH
12089: CALL_OW 111
// continue ;
12093: GO 12032
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
12095: LD_VAR 0 9
12099: PPUSH
12100: CALL_OW 256
12104: PUSH
12105: LD_INT 800
12107: LESS
12108: PUSH
12109: LD_VAR 0 15
12113: PUSH
12114: LD_INT 1
12116: NONEQUAL
12117: AND
12118: IFFALSE 12168
// begin SetTag ( i , tHeal ) ;
12120: LD_VAR 0 9
12124: PPUSH
12125: LD_INT 1
12127: PPUSH
12128: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
12132: LD_VAR 0 9
12136: PPUSH
12137: LD_VAR 0 6
12141: PUSH
12142: LD_INT 1
12144: ARRAY
12145: PPUSH
12146: LD_VAR 0 6
12150: PUSH
12151: LD_INT 2
12153: ARRAY
12154: PPUSH
12155: CALL_OW 111
// AddComHold ( i ) ;
12159: LD_VAR 0 9
12163: PPUSH
12164: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
12168: LD_VAR 0 15
12172: PUSH
12173: LD_INT 1
12175: EQUAL
12176: PUSH
12177: LD_VAR 0 9
12181: PPUSH
12182: CALL_OW 256
12186: PUSH
12187: LD_INT 1000
12189: EQUAL
12190: AND
12191: IFFALSE 12205
// SetTag ( i , 0 ) ;
12193: LD_VAR 0 9
12197: PPUSH
12198: LD_INT 0
12200: PPUSH
12201: CALL_OW 109
// if not tag then
12205: LD_VAR 0 15
12209: NOT
12210: IFFALSE 12377
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
12212: LD_ADDR_VAR 0 11
12216: PUSH
12217: LD_VAR 0 3
12221: PPUSH
12222: LD_INT 57
12224: PUSH
12225: EMPTY
12226: LIST
12227: PPUSH
12228: CALL_OW 70
12232: ST_TO_ADDR
// if undone then
12233: LD_VAR 0 11
12237: IFFALSE 12259
// begin ComComplete ( i , undone [ 1 ] ) ;
12239: LD_VAR 0 9
12243: PPUSH
12244: LD_VAR 0 11
12248: PUSH
12249: LD_INT 1
12251: ARRAY
12252: PPUSH
12253: CALL 49927 0 2
// continue ;
12257: GO 12032
// end ; if cr or tmp or buildingsToBuild then
12259: LD_VAR 0 17
12263: PUSH
12264: LD_VAR 0 10
12268: OR
12269: PUSH
12270: LD_VAR 0 33
12274: OR
12275: IFFALSE 12351
// begin if IsInUnit ( i ) then
12277: LD_VAR 0 9
12281: PPUSH
12282: CALL_OW 310
12286: IFFALSE 12297
// ComExitBuilding ( i ) ;
12288: LD_VAR 0 9
12292: PPUSH
12293: CALL_OW 122
// if tmp then
12297: LD_VAR 0 10
12301: IFFALSE 12317
// SetTag ( i , tRepair ) else
12303: LD_VAR 0 9
12307: PPUSH
12308: LD_INT 3
12310: PPUSH
12311: CALL_OW 109
12315: GO 12349
// if cr then
12317: LD_VAR 0 17
12321: IFFALSE 12337
// SetTag ( i , tCrates ) else
12323: LD_VAR 0 9
12327: PPUSH
12328: LD_INT 2
12330: PPUSH
12331: CALL_OW 109
12335: GO 12349
// SetTag ( i , tBuild ) ;
12337: LD_VAR 0 9
12341: PPUSH
12342: LD_INT 5
12344: PPUSH
12345: CALL_OW 109
// end else
12349: GO 12377
// if not IsInUnit ( i ) then
12351: LD_VAR 0 9
12355: PPUSH
12356: CALL_OW 310
12360: NOT
12361: IFFALSE 12377
// ComEnterUnit ( i , depot ) ;
12363: LD_VAR 0 9
12367: PPUSH
12368: LD_VAR 0 32
12372: PPUSH
12373: CALL_OW 120
// end ; if tag = tRepair then
12377: LD_VAR 0 15
12381: PUSH
12382: LD_INT 3
12384: EQUAL
12385: IFFALSE 12491
// begin if IsInUnit ( i ) then
12387: LD_VAR 0 9
12391: PPUSH
12392: CALL_OW 310
12396: IFFALSE 12409
// begin ComExitBuilding ( i ) ;
12398: LD_VAR 0 9
12402: PPUSH
12403: CALL_OW 122
// continue ;
12407: GO 12032
// end ; if not tmp then
12409: LD_VAR 0 10
12413: NOT
12414: IFFALSE 12430
// begin SetTag ( i , 0 ) ;
12416: LD_VAR 0 9
12420: PPUSH
12421: LD_INT 0
12423: PPUSH
12424: CALL_OW 109
// continue ;
12428: GO 12032
// end ; if not HasTask ( i ) then
12430: LD_VAR 0 9
12434: PPUSH
12435: CALL_OW 314
12439: NOT
12440: IFFALSE 12460
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
12442: LD_VAR 0 9
12446: PPUSH
12447: LD_VAR 0 10
12451: PUSH
12452: LD_INT 1
12454: ARRAY
12455: PPUSH
12456: CALL_OW 130
// if not IsInArea ( i , area ) then
12460: LD_VAR 0 9
12464: PPUSH
12465: LD_VAR 0 3
12469: PPUSH
12470: CALL_OW 308
12474: NOT
12475: IFFALSE 12491
// ComMoveToArea ( i , area ) ;
12477: LD_VAR 0 9
12481: PPUSH
12482: LD_VAR 0 3
12486: PPUSH
12487: CALL_OW 113
// end ; if tag = tBuild then
12491: LD_VAR 0 15
12495: PUSH
12496: LD_INT 5
12498: EQUAL
12499: IFFALSE 12705
// begin if IsInUnit ( i ) then
12501: LD_VAR 0 9
12505: PPUSH
12506: CALL_OW 310
12510: IFFALSE 12523
// begin ComExitBuilding ( i ) ;
12512: LD_VAR 0 9
12516: PPUSH
12517: CALL_OW 122
// continue ;
12521: GO 12032
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
12523: LD_VAR 0 33
12527: NOT
12528: PUSH
12529: LD_VAR 0 22
12533: OR
12534: PUSH
12535: LD_VAR 0 23
12539: OR
12540: IFFALSE 12558
// begin SetTag ( i , 0 ) ;
12542: LD_VAR 0 9
12546: PPUSH
12547: LD_INT 0
12549: PPUSH
12550: CALL_OW 109
// continue ;
12554: GO 12032
// end else
12556: GO 12597
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
12558: LD_VAR 0 32
12562: PPUSH
12563: LD_VAR 0 33
12567: PUSH
12568: LD_INT 1
12570: ARRAY
12571: PUSH
12572: LD_INT 1
12574: ARRAY
12575: PPUSH
12576: CALL 83337 0 2
12580: NOT
12581: IFFALSE 12597
// begin SetTag ( i , 0 ) ;
12583: LD_VAR 0 9
12587: PPUSH
12588: LD_INT 0
12590: PPUSH
12591: CALL_OW 109
// continue ;
12595: GO 12032
// end ; undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
12597: LD_ADDR_VAR 0 11
12601: PUSH
12602: LD_VAR 0 3
12606: PPUSH
12607: LD_INT 57
12609: PUSH
12610: EMPTY
12611: LIST
12612: PPUSH
12613: CALL_OW 70
12617: ST_TO_ADDR
// if undone then
12618: LD_VAR 0 11
12622: IFFALSE 12644
// begin ComComplete ( i , undone [ 1 ] ) ;
12624: LD_VAR 0 9
12628: PPUSH
12629: LD_VAR 0 11
12633: PUSH
12634: LD_INT 1
12636: ARRAY
12637: PPUSH
12638: CALL 49927 0 2
// continue ;
12642: GO 12032
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
12644: LD_VAR 0 9
12648: PPUSH
12649: LD_VAR 0 33
12653: PUSH
12654: LD_INT 1
12656: ARRAY
12657: PUSH
12658: LD_INT 1
12660: ARRAY
12661: PPUSH
12662: LD_VAR 0 33
12666: PUSH
12667: LD_INT 1
12669: ARRAY
12670: PUSH
12671: LD_INT 2
12673: ARRAY
12674: PPUSH
12675: LD_VAR 0 33
12679: PUSH
12680: LD_INT 1
12682: ARRAY
12683: PUSH
12684: LD_INT 3
12686: ARRAY
12687: PPUSH
12688: LD_VAR 0 33
12692: PUSH
12693: LD_INT 1
12695: ARRAY
12696: PUSH
12697: LD_INT 4
12699: ARRAY
12700: PPUSH
12701: CALL_OW 145
// end ; if tag = tCrates then
12705: LD_VAR 0 15
12709: PUSH
12710: LD_INT 2
12712: EQUAL
12713: IFFALSE 12850
// begin if IsInUnit ( i ) then
12715: LD_VAR 0 9
12719: PPUSH
12720: CALL_OW 310
12724: IFFALSE 12737
// begin ComExitBuilding ( i ) ;
12726: LD_VAR 0 9
12730: PPUSH
12731: CALL_OW 122
// continue ;
12735: GO 12032
// end ; if not cr then
12737: LD_VAR 0 17
12741: NOT
12742: IFFALSE 12758
// begin SetTag ( i , 0 ) ;
12744: LD_VAR 0 9
12748: PPUSH
12749: LD_INT 0
12751: PPUSH
12752: CALL_OW 109
// continue ;
12756: GO 12032
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
12758: LD_VAR 0 9
12762: PPUSH
12763: CALL_OW 314
12767: NOT
12768: PUSH
12769: LD_INT 81
12771: PUSH
12772: LD_VAR 0 1
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: PUSH
12781: LD_INT 92
12783: PUSH
12784: LD_VAR 0 17
12788: PUSH
12789: LD_INT 1
12791: ARRAY
12792: PUSH
12793: LD_VAR 0 17
12797: PUSH
12798: LD_INT 2
12800: ARRAY
12801: PUSH
12802: LD_INT 12
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: PPUSH
12815: CALL_OW 69
12819: NOT
12820: AND
12821: IFFALSE 12850
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
12823: LD_VAR 0 9
12827: PPUSH
12828: LD_VAR 0 17
12832: PUSH
12833: LD_INT 1
12835: ARRAY
12836: PPUSH
12837: LD_VAR 0 17
12841: PUSH
12842: LD_INT 2
12844: ARRAY
12845: PPUSH
12846: CALL_OW 117
// end ; end ;
12850: GO 12032
12852: POP
12853: POP
// end ; if vehicles then
12854: LD_VAR 0 26
12858: IFFALSE 13658
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ] , [ f_ok ] ] ) ;
12860: LD_ADDR_VAR 0 26
12864: PUSH
12865: LD_VAR 0 26
12869: PPUSH
12870: LD_INT 3
12872: PUSH
12873: LD_INT 2
12875: PUSH
12876: LD_INT 34
12878: PUSH
12879: LD_INT 88
12881: PUSH
12882: EMPTY
12883: LIST
12884: LIST
12885: PUSH
12886: LD_INT 34
12888: PUSH
12889: LD_INT 32
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: LIST
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PUSH
12905: LD_INT 50
12907: PUSH
12908: EMPTY
12909: LIST
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: PPUSH
12915: CALL_OW 72
12919: ST_TO_ADDR
// if vehicles then
12920: LD_VAR 0 26
12924: IFFALSE 13658
// begin for i in vehicles do
12926: LD_ADDR_VAR 0 9
12930: PUSH
12931: LD_VAR 0 26
12935: PUSH
12936: FOR_IN
12937: IFFALSE 13656
// begin tag := GetTag ( i ) ;
12939: LD_ADDR_VAR 0 15
12943: PUSH
12944: LD_VAR 0 9
12948: PPUSH
12949: CALL_OW 110
12953: ST_TO_ADDR
// if not tag then
12954: LD_VAR 0 15
12958: NOT
12959: IFFALSE 13105
// begin if GetControl ( i ) = control_manual then
12961: LD_VAR 0 9
12965: PPUSH
12966: CALL_OW 263
12970: PUSH
12971: LD_INT 1
12973: EQUAL
12974: IFFALSE 13091
// begin drivers := arDrivers ;
12976: LD_ADDR_VAR 0 24
12980: PUSH
12981: LD_EXP 47
12985: ST_TO_ADDR
// if not drivers then
12986: LD_VAR 0 24
12990: NOT
12991: IFFALSE 13071
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
12993: LD_ADDR_VAR 0 24
12997: PUSH
12998: LD_VAR 0 14
13002: PPUSH
13003: LD_INT 3
13005: PUSH
13006: LD_INT 120
13008: PUSH
13009: LD_INT 7
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: PPUSH
13020: CALL_OW 72
13024: ST_TO_ADDR
// if drivers then
13025: LD_VAR 0 24
13029: IFFALSE 13071
// begin SetTag ( drivers [ 1 ] , tMech ) ;
13031: LD_VAR 0 24
13035: PUSH
13036: LD_INT 1
13038: ARRAY
13039: PPUSH
13040: LD_INT 7
13042: PPUSH
13043: CALL_OW 109
// arDrivers := Join ( arDrivers , drivers [ 1 ] ) ;
13047: LD_ADDR_EXP 47
13051: PUSH
13052: LD_EXP 47
13056: PPUSH
13057: LD_VAR 0 24
13061: PUSH
13062: LD_INT 1
13064: ARRAY
13065: PPUSH
13066: CALL 79418 0 2
13070: ST_TO_ADDR
// end ; end ; if drivers then
13071: LD_VAR 0 24
13075: IFFALSE 13089
// SetTag ( i , tBusy ) ;
13077: LD_VAR 0 9
13081: PPUSH
13082: LD_INT 8
13084: PPUSH
13085: CALL_OW 109
// continue ;
13089: GO 12936
// end ; SetTag ( i , tBusy ) ;
13091: LD_VAR 0 9
13095: PPUSH
13096: LD_INT 8
13098: PPUSH
13099: CALL_OW 109
// end else
13103: GO 13654
// if tag = tBusy then
13105: LD_VAR 0 15
13109: PUSH
13110: LD_INT 8
13112: EQUAL
13113: IFFALSE 13325
// begin if GetLives ( i ) = 1000 then
13115: LD_VAR 0 9
13119: PPUSH
13120: CALL_OW 256
13124: PUSH
13125: LD_INT 1000
13127: EQUAL
13128: IFFALSE 13323
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
13130: LD_VAR 0 9
13134: PPUSH
13135: CALL_OW 263
13139: PUSH
13140: LD_INT 1
13142: EQUAL
13143: PUSH
13144: LD_VAR 0 9
13148: PPUSH
13149: CALL_OW 311
13153: NOT
13154: AND
13155: IFFALSE 13311
// begin drivers := arDrivers ;
13157: LD_ADDR_VAR 0 24
13161: PUSH
13162: LD_EXP 47
13166: ST_TO_ADDR
// if not drivers then
13167: LD_VAR 0 24
13171: NOT
13172: IFFALSE 13188
// begin SetTag ( i , 0 ) ;
13174: LD_VAR 0 9
13178: PPUSH
13179: LD_INT 0
13181: PPUSH
13182: CALL_OW 109
// continue ;
13186: GO 12936
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
13188: LD_VAR 0 24
13192: PUSH
13193: LD_INT 1
13195: ARRAY
13196: PPUSH
13197: CALL_OW 310
13201: PUSH
13202: LD_VAR 0 24
13206: PUSH
13207: LD_INT 1
13209: ARRAY
13210: PPUSH
13211: CALL 77022 0 1
13215: NOT
13216: AND
13217: IFFALSE 13232
// ComExitBuilding ( drivers [ 1 ] ) ;
13219: LD_VAR 0 24
13223: PUSH
13224: LD_INT 1
13226: ARRAY
13227: PPUSH
13228: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
13232: LD_VAR 0 26
13236: PPUSH
13237: LD_INT 120
13239: PUSH
13240: LD_INT 3
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: PPUSH
13247: CALL_OW 72
13251: PUSH
13252: LD_VAR 0 24
13256: PUSH
13257: LD_INT 1
13259: ARRAY
13260: PPUSH
13261: CALL_OW 314
13265: NOT
13266: AND
13267: PUSH
13268: LD_VAR 0 26
13272: PPUSH
13273: LD_INT 120
13275: PUSH
13276: LD_INT 3
13278: PUSH
13279: EMPTY
13280: LIST
13281: LIST
13282: PPUSH
13283: CALL_OW 72
13287: NOT
13288: OR
13289: IFFALSE 13309
// ComEnterUnit ( drivers [ 1 ] , i ) ;
13291: LD_VAR 0 24
13295: PUSH
13296: LD_INT 1
13298: ARRAY
13299: PPUSH
13300: LD_VAR 0 9
13304: PPUSH
13305: CALL_OW 120
// continue ;
13309: GO 12936
// end ; SetTag ( i , tAttack ) ;
13311: LD_VAR 0 9
13315: PPUSH
13316: LD_INT 13
13318: PPUSH
13319: CALL_OW 109
// end ; end else
13323: GO 13654
// if tag = tAttack then
13325: LD_VAR 0 15
13329: PUSH
13330: LD_INT 13
13332: EQUAL
13333: IFFALSE 13513
// begin enemy := enemyInBase ;
13335: LD_ADDR_VAR 0 21
13339: PUSH
13340: LD_VAR 0 22
13344: ST_TO_ADDR
// if not enemy then
13345: LD_VAR 0 21
13349: NOT
13350: IFFALSE 13362
// enemy := enemyOuterBase ;
13352: LD_ADDR_VAR 0 21
13356: PUSH
13357: LD_VAR 0 23
13361: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
13362: LD_VAR 0 21
13366: NOT
13367: PUSH
13368: LD_VAR 0 9
13372: PPUSH
13373: LD_VAR 0 7
13377: PUSH
13378: LD_INT 1
13380: ARRAY
13381: PPUSH
13382: LD_VAR 0 7
13386: PUSH
13387: LD_INT 2
13389: ARRAY
13390: PPUSH
13391: CALL_OW 297
13395: PUSH
13396: LD_INT 10
13398: GREATER
13399: AND
13400: IFFALSE 13431
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
13402: LD_VAR 0 9
13406: PPUSH
13407: LD_VAR 0 7
13411: PUSH
13412: LD_INT 1
13414: ARRAY
13415: PPUSH
13416: LD_VAR 0 7
13420: PUSH
13421: LD_INT 2
13423: ARRAY
13424: PPUSH
13425: CALL_OW 111
// continue ;
13429: GO 12936
// end ; if GetLives ( i ) < 650 then
13431: LD_VAR 0 9
13435: PPUSH
13436: CALL_OW 256
13440: PUSH
13441: LD_INT 650
13443: LESS
13444: IFFALSE 13487
// begin SetTag ( i , tVehRepair ) ;
13446: LD_VAR 0 9
13450: PPUSH
13451: LD_INT 9
13453: PPUSH
13454: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
13458: LD_VAR 0 9
13462: PPUSH
13463: LD_VAR 0 7
13467: PUSH
13468: LD_INT 1
13470: ARRAY
13471: PPUSH
13472: LD_VAR 0 7
13476: PUSH
13477: LD_INT 2
13479: ARRAY
13480: PPUSH
13481: CALL_OW 111
// continue ;
13485: GO 12936
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13487: LD_VAR 0 9
13491: PPUSH
13492: LD_VAR 0 21
13496: PPUSH
13497: LD_VAR 0 9
13501: PPUSH
13502: CALL_OW 74
13506: PPUSH
13507: CALL_OW 115
// end else
13511: GO 13654
// if tag = tVehRepair then
13513: LD_VAR 0 15
13517: PUSH
13518: LD_INT 9
13520: EQUAL
13521: IFFALSE 13654
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
13523: LD_VAR 0 9
13527: PPUSH
13528: LD_VAR 0 7
13532: PUSH
13533: LD_INT 1
13535: ARRAY
13536: PPUSH
13537: LD_VAR 0 7
13541: PUSH
13542: LD_INT 2
13544: ARRAY
13545: PPUSH
13546: CALL_OW 297
13550: PUSH
13551: LD_INT 10
13553: GREATER
13554: IFFALSE 13585
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
13556: LD_VAR 0 9
13560: PPUSH
13561: LD_VAR 0 7
13565: PUSH
13566: LD_INT 1
13568: ARRAY
13569: PPUSH
13570: LD_VAR 0 7
13574: PUSH
13575: LD_INT 2
13577: ARRAY
13578: PPUSH
13579: CALL_OW 111
// continue ;
13583: GO 12936
// end ; if GetLives ( i ) = 1000 then
13585: LD_VAR 0 9
13589: PPUSH
13590: CALL_OW 256
13594: PUSH
13595: LD_INT 1000
13597: EQUAL
13598: IFFALSE 13614
// begin SetTag ( i , tBusy ) ;
13600: LD_VAR 0 9
13604: PPUSH
13605: LD_INT 8
13607: PPUSH
13608: CALL_OW 109
// continue ;
13612: GO 12936
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
13614: LD_VAR 0 9
13618: PPUSH
13619: CALL_OW 263
13623: PUSH
13624: LD_INT 1
13626: EQUAL
13627: PUSH
13628: LD_VAR 0 9
13632: PPUSH
13633: CALL_OW 311
13637: AND
13638: IFFALSE 13654
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
13640: LD_VAR 0 9
13644: PPUSH
13645: CALL_OW 311
13649: PPUSH
13650: CALL 81118 0 1
// end ; end ;
13654: GO 12936
13656: POP
13657: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
13658: LD_ADDR_VAR 0 19
13662: PUSH
13663: LD_VAR 0 5
13667: PPUSH
13668: LD_INT 2
13670: PUSH
13671: LD_INT 25
13673: PUSH
13674: LD_INT 1
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PUSH
13681: LD_INT 25
13683: PUSH
13684: LD_INT 8
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: PUSH
13691: LD_INT 25
13693: PUSH
13694: LD_INT 5
13696: PUSH
13697: EMPTY
13698: LIST
13699: LIST
13700: PUSH
13701: LD_INT 25
13703: PUSH
13704: LD_INT 9
13706: PUSH
13707: EMPTY
13708: LIST
13709: LIST
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: PUSH
13718: LD_INT 50
13720: PUSH
13721: EMPTY
13722: LIST
13723: PUSH
13724: EMPTY
13725: LIST
13726: LIST
13727: PPUSH
13728: CALL_OW 72
13732: ST_TO_ADDR
// if sol then
13733: LD_VAR 0 19
13737: IFFALSE 14245
// begin if enemyInBase then
13739: LD_VAR 0 22
13743: IFFALSE 13922
// begin for i in sol do
13745: LD_ADDR_VAR 0 9
13749: PUSH
13750: LD_VAR 0 19
13754: PUSH
13755: FOR_IN
13756: IFFALSE 13918
// begin tw := IsInUnit ( i ) ;
13758: LD_ADDR_VAR 0 16
13762: PUSH
13763: LD_VAR 0 9
13767: PPUSH
13768: CALL_OW 310
13772: ST_TO_ADDR
// if tw then
13773: LD_VAR 0 16
13777: IFFALSE 13860
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
13779: LD_VAR 0 16
13783: PUSH
13784: LD_INT 22
13786: PUSH
13787: LD_VAR 0 1
13791: PUSH
13792: EMPTY
13793: LIST
13794: LIST
13795: PUSH
13796: LD_INT 101
13798: PUSH
13799: LD_VAR 0 34
13803: PUSH
13804: EMPTY
13805: LIST
13806: LIST
13807: PUSH
13808: LD_INT 2
13810: PUSH
13811: LD_INT 30
13813: PUSH
13814: LD_INT 32
13816: PUSH
13817: EMPTY
13818: LIST
13819: LIST
13820: PUSH
13821: LD_INT 30
13823: PUSH
13824: LD_INT 31
13826: PUSH
13827: EMPTY
13828: LIST
13829: LIST
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: LIST
13835: PUSH
13836: EMPTY
13837: LIST
13838: LIST
13839: LIST
13840: PPUSH
13841: CALL_OW 69
13845: IN
13846: NOT
13847: IFFALSE 13858
// ComExitBuilding ( i ) ;
13849: LD_VAR 0 9
13853: PPUSH
13854: CALL_OW 122
// end else
13858: GO 13916
// if IsInArea ( i , area ) then
13860: LD_VAR 0 9
13864: PPUSH
13865: LD_VAR 0 3
13869: PPUSH
13870: CALL_OW 308
13874: IFFALSE 13902
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
13876: LD_VAR 0 9
13880: PPUSH
13881: LD_VAR 0 22
13885: PPUSH
13886: LD_VAR 0 9
13890: PPUSH
13891: CALL_OW 74
13895: PPUSH
13896: CALL_OW 115
13900: GO 13916
// ComMoveToArea ( i , area ) ;
13902: LD_VAR 0 9
13906: PPUSH
13907: LD_VAR 0 3
13911: PPUSH
13912: CALL_OW 113
// end ;
13916: GO 13755
13918: POP
13919: POP
// end else
13920: GO 14245
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
13922: LD_ADDR_VAR 0 28
13926: PUSH
13927: LD_VAR 0 3
13931: PPUSH
13932: LD_INT 3
13934: PUSH
13935: LD_INT 62
13937: PUSH
13938: EMPTY
13939: LIST
13940: PUSH
13941: EMPTY
13942: LIST
13943: LIST
13944: PUSH
13945: LD_INT 2
13947: PUSH
13948: LD_INT 30
13950: PUSH
13951: LD_INT 32
13953: PUSH
13954: EMPTY
13955: LIST
13956: LIST
13957: PUSH
13958: LD_INT 30
13960: PUSH
13961: LD_INT 4
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: PUSH
13968: LD_INT 30
13970: PUSH
13971: LD_INT 5
13973: PUSH
13974: EMPTY
13975: LIST
13976: LIST
13977: PUSH
13978: LD_INT 30
13980: PUSH
13981: LD_INT 31
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: PUSH
13988: EMPTY
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: PPUSH
13999: CALL_OW 70
14003: ST_TO_ADDR
// if empty then
14004: LD_VAR 0 28
14008: IFFALSE 14025
// empty := ReverseArray ( empty ) ;
14010: LD_ADDR_VAR 0 28
14014: PUSH
14015: LD_VAR 0 28
14019: PPUSH
14020: CALL 74705 0 1
14024: ST_TO_ADDR
// for i in sol do
14025: LD_ADDR_VAR 0 9
14029: PUSH
14030: LD_VAR 0 19
14034: PUSH
14035: FOR_IN
14036: IFFALSE 14243
// begin tag := GetTag ( i ) ;
14038: LD_ADDR_VAR 0 15
14042: PUSH
14043: LD_VAR 0 9
14047: PPUSH
14048: CALL_OW 110
14052: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
14053: LD_VAR 0 9
14057: PPUSH
14058: CALL_OW 256
14062: PUSH
14063: LD_INT 1000
14065: LESS
14066: PUSH
14067: LD_VAR 0 15
14071: PUSH
14072: LD_INT 1
14074: NONEQUAL
14075: AND
14076: IFFALSE 14128
// begin SetTag ( i , tHeal ) ;
14078: LD_VAR 0 9
14082: PPUSH
14083: LD_INT 1
14085: PPUSH
14086: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
14090: LD_VAR 0 9
14094: PPUSH
14095: LD_VAR 0 6
14099: PUSH
14100: LD_INT 1
14102: ARRAY
14103: PPUSH
14104: LD_VAR 0 6
14108: PUSH
14109: LD_INT 2
14111: ARRAY
14112: PPUSH
14113: CALL_OW 111
// AddComHold ( i ) ;
14117: LD_VAR 0 9
14121: PPUSH
14122: CALL_OW 200
// continue ;
14126: GO 14035
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
14128: LD_VAR 0 9
14132: PPUSH
14133: CALL_OW 256
14137: PUSH
14138: LD_INT 1000
14140: EQUAL
14141: PUSH
14142: LD_VAR 0 15
14146: PUSH
14147: LD_INT 1
14149: EQUAL
14150: AND
14151: IFFALSE 14167
// begin SetTag ( i , 0 ) ;
14153: LD_VAR 0 9
14157: PPUSH
14158: LD_INT 0
14160: PPUSH
14161: CALL_OW 109
// continue ;
14165: GO 14035
// end ; if HasTask ( i ) then
14167: LD_VAR 0 9
14171: PPUSH
14172: CALL_OW 314
14176: IFFALSE 14180
// continue ;
14178: GO 14035
// if not IsInUnit ( i ) and not tag and empty then
14180: LD_VAR 0 9
14184: PPUSH
14185: CALL_OW 310
14189: NOT
14190: PUSH
14191: LD_VAR 0 15
14195: NOT
14196: AND
14197: PUSH
14198: LD_VAR 0 28
14202: AND
14203: IFFALSE 14241
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
14205: LD_VAR 0 9
14209: PPUSH
14210: LD_VAR 0 28
14214: PUSH
14215: LD_INT 1
14217: ARRAY
14218: PPUSH
14219: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
14223: LD_ADDR_VAR 0 28
14227: PUSH
14228: LD_VAR 0 28
14232: PPUSH
14233: LD_INT 1
14235: PPUSH
14236: CALL_OW 3
14240: ST_TO_ADDR
// end ; end ;
14241: GO 14035
14243: POP
14244: POP
// end ; end ; end ;
14245: LD_VAR 0 8
14249: RET
// every 0 0$2 trigger UnitFilter ( arForce , [ f_ok ] ) do
14250: LD_EXP 51
14254: PPUSH
14255: LD_INT 50
14257: PUSH
14258: EMPTY
14259: LIST
14260: PPUSH
14261: CALL_OW 72
14265: IFFALSE 14318
14267: GO 14269
14269: DISABLE
// begin enable ;
14270: ENABLE
// BaseScript ( botSides [ 2 ] , 2 , arBaseArea , arBaseOuterArea , arForce , [ 210 , 43 ] , [ 194 , 28 ] ) ;
14271: LD_EXP 3
14275: PUSH
14276: LD_INT 2
14278: ARRAY
14279: PPUSH
14280: LD_INT 2
14282: PPUSH
14283: LD_INT 5
14285: PPUSH
14286: LD_INT 6
14288: PPUSH
14289: LD_EXP 51
14293: PPUSH
14294: LD_INT 210
14296: PUSH
14297: LD_INT 43
14299: PUSH
14300: EMPTY
14301: LIST
14302: LIST
14303: PPUSH
14304: LD_INT 194
14306: PUSH
14307: LD_INT 28
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: PPUSH
14314: CALL 10728 0 7
// end ;
14318: END
// every 0 0$01 + 0 0$3 trigger arMinesList do var i , p , tmp ;
14319: LD_EXP 50
14323: IFFALSE 14543
14325: GO 14327
14327: DISABLE
14328: LD_INT 0
14330: PPUSH
14331: PPUSH
14332: PPUSH
// begin enable ;
14333: ENABLE
// p := 1 ;
14334: LD_ADDR_VAR 0 2
14338: PUSH
14339: LD_INT 1
14341: ST_TO_ADDR
// for i := 1 to Count ( arMinesList ) div 2 do
14342: LD_ADDR_VAR 0 1
14346: PUSH
14347: DOUBLE
14348: LD_INT 1
14350: DEC
14351: ST_TO_ADDR
14352: LD_EXP 50
14356: PPUSH
14357: CALL 43829 0 1
14361: PUSH
14362: LD_INT 2
14364: DIV
14365: PUSH
14366: FOR_TO
14367: IFFALSE 14541
// begin tmp := HexInfo ( arMinesList [ p ] , arMinesList [ p + 1 ] ) ;
14369: LD_ADDR_VAR 0 3
14373: PUSH
14374: LD_EXP 50
14378: PUSH
14379: LD_VAR 0 2
14383: ARRAY
14384: PPUSH
14385: LD_EXP 50
14389: PUSH
14390: LD_VAR 0 2
14394: PUSH
14395: LD_INT 1
14397: PLUS
14398: ARRAY
14399: PPUSH
14400: CALL_OW 428
14404: ST_TO_ADDR
// if tmp then
14405: LD_VAR 0 3
14409: IFFALSE 14525
// if GetSide ( tmp ) <> botSides [ 2 ] then
14411: LD_VAR 0 3
14415: PPUSH
14416: CALL_OW 255
14420: PUSH
14421: LD_EXP 3
14425: PUSH
14426: LD_INT 2
14428: ARRAY
14429: NONEQUAL
14430: IFFALSE 14525
// begin LaunchMineAtPos ( arMinesList [ p ] , arMinesList [ p + 1 ] , botSides [ 2 ] ) ;
14432: LD_EXP 50
14436: PUSH
14437: LD_VAR 0 2
14441: ARRAY
14442: PPUSH
14443: LD_EXP 50
14447: PUSH
14448: LD_VAR 0 2
14452: PUSH
14453: LD_INT 1
14455: PLUS
14456: ARRAY
14457: PPUSH
14458: LD_EXP 3
14462: PUSH
14463: LD_INT 2
14465: ARRAY
14466: PPUSH
14467: CALL_OW 456
// arMinesList := Delete ( arMinesList , p ) ;
14471: LD_ADDR_EXP 50
14475: PUSH
14476: LD_EXP 50
14480: PPUSH
14481: LD_VAR 0 2
14485: PPUSH
14486: CALL_OW 3
14490: ST_TO_ADDR
// arMinesList := Delete ( arMinesList , p ) ;
14491: LD_ADDR_EXP 50
14495: PUSH
14496: LD_EXP 50
14500: PPUSH
14501: LD_VAR 0 2
14505: PPUSH
14506: CALL_OW 3
14510: ST_TO_ADDR
// p := p - 2 ;
14511: LD_ADDR_VAR 0 2
14515: PUSH
14516: LD_VAR 0 2
14520: PUSH
14521: LD_INT 2
14523: MINUS
14524: ST_TO_ADDR
// end ; p := p + 2 ;
14525: LD_ADDR_VAR 0 2
14529: PUSH
14530: LD_VAR 0 2
14534: PUSH
14535: LD_INT 2
14537: PLUS
14538: ST_TO_ADDR
// end ;
14539: GO 14366
14541: POP
14542: POP
// end ;
14543: PPOPN 3
14545: END
// every 3 3$00 trigger IsOk ( arDep ) and not arConstructList do
14546: LD_INT 32
14548: PPUSH
14549: CALL_OW 302
14553: PUSH
14554: LD_EXP 43
14558: NOT
14559: AND
14560: IFFALSE 14611
14562: GO 14564
14564: DISABLE
// begin enable ;
14565: ENABLE
// arConstructList := [ [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ] ] ;
14566: LD_ADDR_EXP 43
14570: PUSH
14571: LD_INT 14
14573: PUSH
14574: LD_INT 1
14576: PUSH
14577: LD_INT 1
14579: PUSH
14580: LD_INT 27
14582: PUSH
14583: EMPTY
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: PUSH
14589: LD_INT 14
14591: PUSH
14592: LD_INT 1
14594: PUSH
14595: LD_INT 1
14597: PUSH
14598: LD_INT 26
14600: PUSH
14601: EMPTY
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: PUSH
14607: EMPTY
14608: LIST
14609: LIST
14610: ST_TO_ADDR
// end ; end_of_file
14611: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if not GetSide ( un ) in botSides then
14612: LD_VAR 0 1
14616: PPUSH
14617: CALL_OW 255
14621: PUSH
14622: LD_EXP 3
14626: IN
14627: NOT
14628: IFFALSE 14632
// exit ;
14630: GO 14689
// if not un in [ Sikorski ] then
14632: LD_VAR 0 1
14636: PUSH
14637: LD_EXP 31
14641: PUSH
14642: EMPTY
14643: LIST
14644: IN
14645: NOT
14646: IFFALSE 14667
// MultiplayerEvent_UnitKilled ( un , killerSide , false ) else
14648: LD_VAR 0 1
14652: PPUSH
14653: LD_VAR 0 2
14657: PPUSH
14658: LD_INT 0
14660: PPUSH
14661: CALL 4993 0 3
14665: GO 14689
// MultiplayerEvent_UnitKilled ( un , killerSide , Multiplayer_GetCondition ( 5 ) ) ;
14667: LD_VAR 0 1
14671: PPUSH
14672: LD_VAR 0 2
14676: PPUSH
14677: LD_INT 5
14679: PPUSH
14680: CALL 4320 0 1
14684: PPUSH
14685: CALL 4993 0 3
// end ;
14689: PPOPN 3
14691: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
14692: LD_INT 0
14694: PPUSH
14695: PPUSH
14696: PPUSH
14697: PPUSH
14698: PPUSH
14699: PPUSH
14700: PPUSH
14701: PPUSH
14702: PPUSH
14703: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
14704: LD_VAR 0 1
14708: PPUSH
14709: CALL 36833 0 1
// side := GetSide ( un ) ;
14713: LD_ADDR_VAR 0 3
14717: PUSH
14718: LD_VAR 0 1
14722: PPUSH
14723: CALL_OW 255
14727: ST_TO_ADDR
// if multi_sides [ side ] then
14728: LD_EXP 6
14732: PUSH
14733: LD_VAR 0 3
14737: ARRAY
14738: IFFALSE 14764
// if GetType ( un ) = unit_human then
14740: LD_VAR 0 1
14744: PPUSH
14745: CALL_OW 247
14749: PUSH
14750: LD_INT 1
14752: EQUAL
14753: IFFALSE 14764
// MultiplayerEvent_HumanLost ( side ) ;
14755: LD_VAR 0 3
14759: PPUSH
14760: CALL 4879 0 1
// if side in botSides then
14764: LD_VAR 0 3
14768: PUSH
14769: LD_EXP 3
14773: IN
14774: IFFALSE 15789
// begin if side = botSides [ 1 ] then
14776: LD_VAR 0 3
14780: PUSH
14781: LD_EXP 3
14785: PUSH
14786: LD_INT 1
14788: ARRAY
14789: EQUAL
14790: IFFALSE 15275
// begin if un in amForce then
14792: LD_VAR 0 1
14796: PUSH
14797: LD_EXP 39
14801: IN
14802: IFFALSE 14820
// amForce := amForce diff un ;
14804: LD_ADDR_EXP 39
14808: PUSH
14809: LD_EXP 39
14813: PUSH
14814: LD_VAR 0 1
14818: DIFF
14819: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic and amMechSpawnCounter then
14820: LD_VAR 0 1
14824: PPUSH
14825: CALL_OW 257
14829: PUSH
14830: LD_INT 3
14832: EQUAL
14833: PUSH
14834: LD_EXP 41
14838: AND
14839: IFFALSE 14980
// begin if not IsOk ( amDep ) then
14841: LD_INT 1
14843: PPUSH
14844: CALL_OW 302
14848: NOT
14849: IFFALSE 14853
// exit ;
14851: GO 15861
// amMechSpawnCounter := Dec ( amMechSpawnCounter ) ;
14853: LD_ADDR_EXP 41
14857: PUSH
14858: LD_EXP 41
14862: PPUSH
14863: CALL 80801 0 1
14867: ST_TO_ADDR
// uc_side := botSides [ 1 ] ;
14868: LD_ADDR_OWVAR 20
14872: PUSH
14873: LD_EXP 3
14877: PUSH
14878: LD_INT 1
14880: ARRAY
14881: ST_TO_ADDR
// uc_nation := nation_american ;
14882: LD_ADDR_OWVAR 21
14886: PUSH
14887: LD_INT 1
14889: ST_TO_ADDR
// PrepareMechanic ( false , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
14890: LD_INT 0
14892: PPUSH
14893: LD_INT 1
14895: PUSH
14896: LD_INT 2
14898: PUSH
14899: LD_INT 3
14901: PUSH
14902: EMPTY
14903: LIST
14904: LIST
14905: LIST
14906: PUSH
14907: LD_OWVAR 67
14911: ARRAY
14912: PPUSH
14913: CALL_OW 383
// un := CreateHuman ;
14917: LD_ADDR_VAR 0 1
14921: PUSH
14922: CALL_OW 44
14926: ST_TO_ADDR
// PlaceUnitXY ( un , 52 , 2 , false ) ;
14927: LD_VAR 0 1
14931: PPUSH
14932: LD_INT 52
14934: PPUSH
14935: LD_INT 2
14937: PPUSH
14938: LD_INT 0
14940: PPUSH
14941: CALL_OW 48
// ComMoveXY ( un , 23 , 19 ) ;
14945: LD_VAR 0 1
14949: PPUSH
14950: LD_INT 23
14952: PPUSH
14953: LD_INT 19
14955: PPUSH
14956: CALL_OW 111
// amForce := Join ( amForce , un ) ;
14960: LD_ADDR_EXP 39
14964: PUSH
14965: LD_EXP 39
14969: PPUSH
14970: LD_VAR 0 1
14974: PPUSH
14975: CALL 79418 0 2
14979: ST_TO_ADDR
// end ; if GetType ( un ) = unit_building then
14980: LD_VAR 0 1
14984: PPUSH
14985: CALL_OW 247
14989: PUSH
14990: LD_INT 3
14992: EQUAL
14993: IFFALSE 15136
// begin btype := GetBType ( un ) ;
14995: LD_ADDR_VAR 0 11
14999: PUSH
15000: LD_VAR 0 1
15004: PPUSH
15005: CALL_OW 266
15009: ST_TO_ADDR
// if btype = b_barracks then
15010: LD_VAR 0 11
15014: PUSH
15015: LD_INT 5
15017: EQUAL
15018: IFFALSE 15028
// btype := b_armoury ;
15020: LD_ADDR_VAR 0 11
15024: PUSH
15025: LD_INT 4
15027: ST_TO_ADDR
// if btype = b_factory then
15028: LD_VAR 0 11
15032: PUSH
15033: LD_INT 3
15035: EQUAL
15036: IFFALSE 15046
// btype := b_workshop ;
15038: LD_ADDR_VAR 0 11
15042: PUSH
15043: LD_INT 2
15045: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
15046: LD_VAR 0 11
15050: PUSH
15051: LD_INT 8
15053: PUSH
15054: LD_INT 7
15056: PUSH
15057: EMPTY
15058: LIST
15059: LIST
15060: IN
15061: IFFALSE 15071
// btype := b_lab ;
15063: LD_ADDR_VAR 0 11
15067: PUSH
15068: LD_INT 6
15070: ST_TO_ADDR
// amBuildings := Replace ( amBuildings , amBuildings + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
15071: LD_ADDR_EXP 34
15075: PUSH
15076: LD_EXP 34
15080: PPUSH
15081: LD_EXP 34
15085: PUSH
15086: LD_INT 1
15088: PLUS
15089: PPUSH
15090: LD_VAR 0 11
15094: PUSH
15095: LD_VAR 0 1
15099: PPUSH
15100: CALL_OW 250
15104: PUSH
15105: LD_VAR 0 1
15109: PPUSH
15110: CALL_OW 251
15114: PUSH
15115: LD_VAR 0 1
15119: PPUSH
15120: CALL_OW 254
15124: PUSH
15125: EMPTY
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: PPUSH
15131: CALL_OW 1
15135: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
15136: LD_VAR 0 1
15140: PPUSH
15141: CALL_OW 247
15145: PUSH
15146: LD_INT 2
15148: EQUAL
15149: IFFALSE 15275
// begin chassis := GetChassis ( un ) ;
15151: LD_ADDR_VAR 0 5
15155: PUSH
15156: LD_VAR 0 1
15160: PPUSH
15161: CALL_OW 265
15165: ST_TO_ADDR
// engine := GetEngine ( un ) ;
15166: LD_ADDR_VAR 0 6
15170: PUSH
15171: LD_VAR 0 1
15175: PPUSH
15176: CALL_OW 262
15180: ST_TO_ADDR
// control := GetControl ( un ) ;
15181: LD_ADDR_VAR 0 7
15185: PUSH
15186: LD_VAR 0 1
15190: PPUSH
15191: CALL_OW 263
15195: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
15196: LD_ADDR_VAR 0 8
15200: PUSH
15201: LD_VAR 0 1
15205: PPUSH
15206: CALL_OW 264
15210: ST_TO_ADDR
// tmp := Produce ( factory , chassis , engine , control , weapon ) ;
15211: LD_ADDR_VAR 0 9
15215: PUSH
15216: LD_VAR 0 10
15220: PPUSH
15221: LD_VAR 0 5
15225: PPUSH
15226: LD_VAR 0 6
15230: PPUSH
15231: LD_VAR 0 7
15235: PPUSH
15236: LD_VAR 0 8
15240: PPUSH
15241: CALL 44187 0 5
15245: ST_TO_ADDR
// amConstructList := Replace ( amConstructList , amConstructList + 1 , tmp ) ;
15246: LD_ADDR_EXP 33
15250: PUSH
15251: LD_EXP 33
15255: PPUSH
15256: LD_EXP 33
15260: PUSH
15261: LD_INT 1
15263: PLUS
15264: PPUSH
15265: LD_VAR 0 9
15269: PPUSH
15270: CALL_OW 1
15274: ST_TO_ADDR
// end ; end ; if side = botSides [ 2 ] then
15275: LD_VAR 0 3
15279: PUSH
15280: LD_EXP 3
15284: PUSH
15285: LD_INT 2
15287: ARRAY
15288: EQUAL
15289: IFFALSE 15789
// begin if un in arForce then
15291: LD_VAR 0 1
15295: PUSH
15296: LD_EXP 51
15300: IN
15301: IFFALSE 15319
// arForce := arForce diff un ;
15303: LD_ADDR_EXP 51
15307: PUSH
15308: LD_EXP 51
15312: PUSH
15313: LD_VAR 0 1
15317: DIFF
15318: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic and GetTag ( un ) < 999 and arMechSpawnCounter then
15319: LD_VAR 0 1
15323: PPUSH
15324: CALL_OW 257
15328: PUSH
15329: LD_INT 3
15331: EQUAL
15332: PUSH
15333: LD_VAR 0 1
15337: PPUSH
15338: CALL_OW 110
15342: PUSH
15343: LD_INT 999
15345: LESS
15346: AND
15347: PUSH
15348: LD_EXP 48
15352: AND
15353: IFFALSE 15494
// begin if not IsOk ( arDep ) then
15355: LD_INT 32
15357: PPUSH
15358: CALL_OW 302
15362: NOT
15363: IFFALSE 15367
// exit ;
15365: GO 15861
// arMechSpawnCounter := Dec ( arMechSpawnCounter ) ;
15367: LD_ADDR_EXP 48
15371: PUSH
15372: LD_EXP 48
15376: PPUSH
15377: CALL 80801 0 1
15381: ST_TO_ADDR
// uc_side := botSides [ 2 ] ;
15382: LD_ADDR_OWVAR 20
15386: PUSH
15387: LD_EXP 3
15391: PUSH
15392: LD_INT 2
15394: ARRAY
15395: ST_TO_ADDR
// uc_nation := nation_arabian ;
15396: LD_ADDR_OWVAR 21
15400: PUSH
15401: LD_INT 2
15403: ST_TO_ADDR
// PrepareMechanic ( false , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
15404: LD_INT 0
15406: PPUSH
15407: LD_INT 1
15409: PUSH
15410: LD_INT 2
15412: PUSH
15413: LD_INT 3
15415: PUSH
15416: EMPTY
15417: LIST
15418: LIST
15419: LIST
15420: PUSH
15421: LD_OWVAR 67
15425: ARRAY
15426: PPUSH
15427: CALL_OW 383
// un := CreateHuman ;
15431: LD_ADDR_VAR 0 1
15435: PUSH
15436: CALL_OW 44
15440: ST_TO_ADDR
// PlaceUnitXY ( un , 178 , 2 , false ) ;
15441: LD_VAR 0 1
15445: PPUSH
15446: LD_INT 178
15448: PPUSH
15449: LD_INT 2
15451: PPUSH
15452: LD_INT 0
15454: PPUSH
15455: CALL_OW 48
// ComMoveXY ( un , 204 , 35 ) ;
15459: LD_VAR 0 1
15463: PPUSH
15464: LD_INT 204
15466: PPUSH
15467: LD_INT 35
15469: PPUSH
15470: CALL_OW 111
// arForce := Join ( arForce , un ) ;
15474: LD_ADDR_EXP 51
15478: PUSH
15479: LD_EXP 51
15483: PPUSH
15484: LD_VAR 0 1
15488: PPUSH
15489: CALL 79418 0 2
15493: ST_TO_ADDR
// end ; if GetType ( un ) = unit_building then
15494: LD_VAR 0 1
15498: PPUSH
15499: CALL_OW 247
15503: PUSH
15504: LD_INT 3
15506: EQUAL
15507: IFFALSE 15650
// begin btype := GetBType ( un ) ;
15509: LD_ADDR_VAR 0 11
15513: PUSH
15514: LD_VAR 0 1
15518: PPUSH
15519: CALL_OW 266
15523: ST_TO_ADDR
// if btype = b_barracks then
15524: LD_VAR 0 11
15528: PUSH
15529: LD_INT 5
15531: EQUAL
15532: IFFALSE 15542
// btype := b_armoury ;
15534: LD_ADDR_VAR 0 11
15538: PUSH
15539: LD_INT 4
15541: ST_TO_ADDR
// if btype = b_factory then
15542: LD_VAR 0 11
15546: PUSH
15547: LD_INT 3
15549: EQUAL
15550: IFFALSE 15560
// btype := b_workshop ;
15552: LD_ADDR_VAR 0 11
15556: PUSH
15557: LD_INT 2
15559: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
15560: LD_VAR 0 11
15564: PUSH
15565: LD_INT 8
15567: PUSH
15568: LD_INT 7
15570: PUSH
15571: EMPTY
15572: LIST
15573: LIST
15574: IN
15575: IFFALSE 15585
// btype := b_lab ;
15577: LD_ADDR_VAR 0 11
15581: PUSH
15582: LD_INT 6
15584: ST_TO_ADDR
// arBuildings := Replace ( arBuildings , arBuildings + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
15585: LD_ADDR_EXP 44
15589: PUSH
15590: LD_EXP 44
15594: PPUSH
15595: LD_EXP 44
15599: PUSH
15600: LD_INT 1
15602: PLUS
15603: PPUSH
15604: LD_VAR 0 11
15608: PUSH
15609: LD_VAR 0 1
15613: PPUSH
15614: CALL_OW 250
15618: PUSH
15619: LD_VAR 0 1
15623: PPUSH
15624: CALL_OW 251
15628: PUSH
15629: LD_VAR 0 1
15633: PPUSH
15634: CALL_OW 254
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: PPUSH
15645: CALL_OW 1
15649: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
15650: LD_VAR 0 1
15654: PPUSH
15655: CALL_OW 247
15659: PUSH
15660: LD_INT 2
15662: EQUAL
15663: IFFALSE 15789
// begin chassis := GetChassis ( un ) ;
15665: LD_ADDR_VAR 0 5
15669: PUSH
15670: LD_VAR 0 1
15674: PPUSH
15675: CALL_OW 265
15679: ST_TO_ADDR
// engine := GetEngine ( un ) ;
15680: LD_ADDR_VAR 0 6
15684: PUSH
15685: LD_VAR 0 1
15689: PPUSH
15690: CALL_OW 262
15694: ST_TO_ADDR
// control := GetControl ( un ) ;
15695: LD_ADDR_VAR 0 7
15699: PUSH
15700: LD_VAR 0 1
15704: PPUSH
15705: CALL_OW 263
15709: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
15710: LD_ADDR_VAR 0 8
15714: PUSH
15715: LD_VAR 0 1
15719: PPUSH
15720: CALL_OW 264
15724: ST_TO_ADDR
// tmp := Produce ( factory , chassis , engine , control , weapon ) ;
15725: LD_ADDR_VAR 0 9
15729: PUSH
15730: LD_VAR 0 10
15734: PPUSH
15735: LD_VAR 0 5
15739: PPUSH
15740: LD_VAR 0 6
15744: PPUSH
15745: LD_VAR 0 7
15749: PPUSH
15750: LD_VAR 0 8
15754: PPUSH
15755: CALL 44187 0 5
15759: ST_TO_ADDR
// arConstructList := Replace ( arConstructList , arConstructList + 1 , tmp ) ;
15760: LD_ADDR_EXP 43
15764: PUSH
15765: LD_EXP 43
15769: PPUSH
15770: LD_EXP 43
15774: PUSH
15775: LD_INT 1
15777: PLUS
15778: PPUSH
15779: LD_VAR 0 9
15783: PPUSH
15784: CALL_OW 1
15788: ST_TO_ADDR
// end ; end ; end ; if multi_commanders and multi_custom_commanders then
15789: LD_EXP 23
15793: PUSH
15794: LD_EXP 15
15798: AND
15799: IFFALSE 15861
// if un in multi_commanders then
15801: LD_VAR 0 1
15805: PUSH
15806: LD_EXP 23
15810: IN
15811: IFFALSE 15861
// begin multi_loosers := Replace ( multi_loosers , side , 1 ) ;
15813: LD_ADDR_EXP 24
15817: PUSH
15818: LD_EXP 24
15822: PPUSH
15823: LD_VAR 0 3
15827: PPUSH
15828: LD_INT 1
15830: PPUSH
15831: CALL_OW 1
15835: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
15836: LD_ADDR_EXP 23
15840: PUSH
15841: LD_EXP 23
15845: PUSH
15846: LD_VAR 0 1
15850: DIFF
15851: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
15852: LD_VAR 0 3
15856: PPUSH
15857: CALL 4353 0 1
// end ; end ;
15861: PPOPN 11
15863: END
// on BuildingComplete ( building ) do var i , j , side , btype ;
15864: LD_INT 0
15866: PPUSH
15867: PPUSH
15868: PPUSH
15869: PPUSH
// begin side := GetSide ( building ) ;
15870: LD_ADDR_VAR 0 4
15874: PUSH
15875: LD_VAR 0 1
15879: PPUSH
15880: CALL_OW 255
15884: ST_TO_ADDR
// if multi_sides [ side ] then
15885: LD_EXP 6
15889: PUSH
15890: LD_VAR 0 4
15894: ARRAY
15895: IFFALSE 15916
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
15897: LD_VAR 0 4
15901: PPUSH
15902: LD_VAR 0 1
15906: PPUSH
15907: CALL_OW 266
15911: PPUSH
15912: CALL 4923 0 2
// if side = botSides [ 1 ] then
15916: LD_VAR 0 4
15920: PUSH
15921: LD_EXP 3
15925: PUSH
15926: LD_INT 1
15928: ARRAY
15929: EQUAL
15930: IFFALSE 16014
// begin amBuildings := Delete ( amBuildings , 1 ) ;
15932: LD_ADDR_EXP 34
15936: PUSH
15937: LD_EXP 34
15941: PPUSH
15942: LD_INT 1
15944: PPUSH
15945: CALL_OW 3
15949: ST_TO_ADDR
// btype := GetBType ( building ) ;
15950: LD_ADDR_VAR 0 5
15954: PUSH
15955: LD_VAR 0 1
15959: PPUSH
15960: CALL_OW 266
15964: ST_TO_ADDR
// case btype of b_workshop :
15965: LD_VAR 0 5
15969: PUSH
15970: LD_INT 2
15972: DOUBLE
15973: EQUAL
15974: IFTRUE 15978
15976: GO 15990
15978: POP
// ComUpgrade ( building ) ; b_lab :
15979: LD_VAR 0 1
15983: PPUSH
15984: CALL_OW 146
15988: GO 16014
15990: LD_INT 6
15992: DOUBLE
15993: EQUAL
15994: IFTRUE 15998
15996: GO 16013
15998: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
15999: LD_VAR 0 1
16003: PPUSH
16004: LD_INT 10
16006: PPUSH
16007: CALL_OW 207
// end ; end ;
16011: GO 16014
16013: POP
// end ; if side = botSides [ 2 ] then
16014: LD_VAR 0 4
16018: PUSH
16019: LD_EXP 3
16023: PUSH
16024: LD_INT 2
16026: ARRAY
16027: EQUAL
16028: IFFALSE 16124
// begin arBuildings := Delete ( arBuildings , 1 ) ;
16030: LD_ADDR_EXP 44
16034: PUSH
16035: LD_EXP 44
16039: PPUSH
16040: LD_INT 1
16042: PPUSH
16043: CALL_OW 3
16047: ST_TO_ADDR
// btype := GetBType ( building ) ;
16048: LD_ADDR_VAR 0 5
16052: PUSH
16053: LD_VAR 0 1
16057: PPUSH
16058: CALL_OW 266
16062: ST_TO_ADDR
// case btype of b_workshop :
16063: LD_VAR 0 5
16067: PUSH
16068: LD_INT 2
16070: DOUBLE
16071: EQUAL
16072: IFTRUE 16076
16074: GO 16088
16076: POP
// ComUpgrade ( building ) ; b_lab :
16077: LD_VAR 0 1
16081: PPUSH
16082: CALL_OW 146
16086: GO 16124
16088: LD_INT 6
16090: DOUBLE
16091: EQUAL
16092: IFTRUE 16096
16094: GO 16123
16096: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
16097: LD_VAR 0 1
16101: PPUSH
16102: LD_INT 10
16104: PPUSH
16105: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_opto ) ;
16109: LD_VAR 0 1
16113: PPUSH
16114: LD_INT 15
16116: PPUSH
16117: CALL_OW 207
// end ; end ;
16121: GO 16124
16123: POP
// end ; end ;
16124: PPOPN 5
16126: END
// on EvacuateBuilding ( building , unit ) do begin if not GetSide ( unit ) in botSides then
16127: LD_VAR 0 2
16131: PPUSH
16132: CALL_OW 255
16136: PUSH
16137: LD_EXP 3
16141: IN
16142: NOT
16143: IFFALSE 16147
// exit ;
16145: GO 16306
// if unit in arForceTmp and GetBType ( building ) = b_breastwork then
16147: LD_VAR 0 2
16151: PUSH
16152: LD_EXP 52
16156: IN
16157: PUSH
16158: LD_VAR 0 1
16162: PPUSH
16163: CALL_OW 266
16167: PUSH
16168: LD_INT 31
16170: EQUAL
16171: AND
16172: IFFALSE 16194
// ComEnterUnit ( unit , HexInfo ( 215 , 102 ) ) ;
16174: LD_VAR 0 2
16178: PPUSH
16179: LD_INT 215
16181: PPUSH
16182: LD_INT 102
16184: PPUSH
16185: CALL_OW 428
16189: PPUSH
16190: CALL_OW 120
// if HexInfo ( 44 , 78 ) then
16194: LD_INT 44
16196: PPUSH
16197: LD_INT 78
16199: PPUSH
16200: CALL_OW 428
16204: IFFALSE 16241
// begin ComMoveXY ( unit , 26 , 40 ) ;
16206: LD_VAR 0 2
16210: PPUSH
16211: LD_INT 26
16213: PPUSH
16214: LD_INT 40
16216: PPUSH
16217: CALL_OW 111
// amForce := Join ( amForce , unit ) ;
16221: LD_ADDR_EXP 39
16225: PUSH
16226: LD_EXP 39
16230: PPUSH
16231: LD_VAR 0 2
16235: PPUSH
16236: CALL 79418 0 2
16240: ST_TO_ADDR
// end ; if GetX ( building ) > 71 then
16241: LD_VAR 0 1
16245: PPUSH
16246: CALL_OW 250
16250: PUSH
16251: LD_INT 71
16253: GREATER
16254: IFFALSE 16306
// begin ComMoveXY ( unit , 69 , 39 ) ;
16256: LD_VAR 0 2
16260: PPUSH
16261: LD_INT 69
16263: PPUSH
16264: LD_INT 39
16266: PPUSH
16267: CALL_OW 111
// AddComMoveXY ( unit , 26 , 40 ) ;
16271: LD_VAR 0 2
16275: PPUSH
16276: LD_INT 26
16278: PPUSH
16279: LD_INT 40
16281: PPUSH
16282: CALL_OW 171
// amForce := Join ( amForce , unit ) ;
16286: LD_ADDR_EXP 39
16290: PUSH
16291: LD_EXP 39
16295: PPUSH
16296: LD_VAR 0 2
16300: PPUSH
16301: CALL 79418 0 2
16305: ST_TO_ADDR
// end ; end ;
16306: PPOPN 2
16308: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount , driver ;
16309: LD_INT 0
16311: PPUSH
16312: PPUSH
16313: PPUSH
16314: PPUSH
16315: PPUSH
16316: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
16317: LD_VAR 0 1
16321: PPUSH
16322: LD_VAR 0 2
16326: PPUSH
16327: CALL 36953 0 2
// side := GetSide ( vehicle ) ;
16331: LD_ADDR_VAR 0 4
16335: PUSH
16336: LD_VAR 0 1
16340: PPUSH
16341: CALL_OW 255
16345: ST_TO_ADDR
// if multi_sides [ side ] then
16346: LD_EXP 6
16350: PUSH
16351: LD_VAR 0 4
16355: ARRAY
16356: IFFALSE 16367
// MultiplayerEvent_Produced ( side ) ;
16358: LD_VAR 0 4
16362: PPUSH
16363: CALL 4835 0 1
// if side = botSides [ 1 ] then
16367: LD_VAR 0 4
16371: PUSH
16372: LD_EXP 3
16376: PUSH
16377: LD_INT 1
16379: ARRAY
16380: EQUAL
16381: IFFALSE 16517
// begin driver := IsDrivenBy ( vehicle ) ;
16383: LD_ADDR_VAR 0 8
16387: PUSH
16388: LD_VAR 0 1
16392: PPUSH
16393: CALL_OW 311
16397: ST_TO_ADDR
// if driver then
16398: LD_VAR 0 8
16402: IFFALSE 16436
// begin SetTag ( driver , tMech ) ;
16404: LD_VAR 0 8
16408: PPUSH
16409: LD_INT 7
16411: PPUSH
16412: CALL_OW 109
// amDrivers := Join ( amDrivers , driver ) ;
16416: LD_ADDR_EXP 37
16420: PUSH
16421: LD_EXP 37
16425: PPUSH
16426: LD_VAR 0 8
16430: PPUSH
16431: CALL 79418 0 2
16435: ST_TO_ADDR
// end ; if amVehiclesCounter > Count ( amVehicles ) or GetBType ( vehicle ) in [ us_cargo_bay , us_crane ] then
16436: LD_EXP 38
16440: PUSH
16441: LD_EXP 35
16445: PPUSH
16446: CALL 43829 0 1
16450: GREATER
16451: PUSH
16452: LD_VAR 0 1
16456: PPUSH
16457: CALL_OW 266
16461: PUSH
16462: LD_INT 12
16464: PUSH
16465: LD_INT 13
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: IN
16472: OR
16473: IFFALSE 16497
// amVehicles := Join ( amVehicles , vehicle ) else
16475: LD_ADDR_EXP 35
16479: PUSH
16480: LD_EXP 35
16484: PPUSH
16485: LD_VAR 0 1
16489: PPUSH
16490: CALL 79418 0 2
16494: ST_TO_ADDR
16495: GO 16517
// amVehiclesAtttackers := Join ( amVehiclesAtttackers , vehicle ) ;
16497: LD_ADDR_EXP 36
16501: PUSH
16502: LD_EXP 36
16506: PPUSH
16507: LD_VAR 0 1
16511: PPUSH
16512: CALL 79418 0 2
16516: ST_TO_ADDR
// end ; if side = botSides [ 2 ] then
16517: LD_VAR 0 4
16521: PUSH
16522: LD_EXP 3
16526: PUSH
16527: LD_INT 2
16529: ARRAY
16530: EQUAL
16531: IFFALSE 16667
// begin driver := IsDrivenBy ( vehicle ) ;
16533: LD_ADDR_VAR 0 8
16537: PUSH
16538: LD_VAR 0 1
16542: PPUSH
16543: CALL_OW 311
16547: ST_TO_ADDR
// if driver then
16548: LD_VAR 0 8
16552: IFFALSE 16586
// begin SetTag ( driver , tMech ) ;
16554: LD_VAR 0 8
16558: PPUSH
16559: LD_INT 7
16561: PPUSH
16562: CALL_OW 109
// arDrivers := Join ( arDrivers , driver ) ;
16566: LD_ADDR_EXP 47
16570: PUSH
16571: LD_EXP 47
16575: PPUSH
16576: LD_VAR 0 8
16580: PPUSH
16581: CALL 79418 0 2
16585: ST_TO_ADDR
// end ; if arVehiclesCounter > Count ( arVehicles ) or GetBType ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
16586: LD_EXP 49
16590: PUSH
16591: LD_EXP 45
16595: PPUSH
16596: CALL 43829 0 1
16600: GREATER
16601: PUSH
16602: LD_VAR 0 1
16606: PPUSH
16607: CALL_OW 266
16611: PUSH
16612: LD_INT 32
16614: PUSH
16615: LD_INT 88
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: IN
16622: OR
16623: IFFALSE 16647
// arVehicles := Join ( arVehicles , vehicle ) else
16625: LD_ADDR_EXP 45
16629: PUSH
16630: LD_EXP 45
16634: PPUSH
16635: LD_VAR 0 1
16639: PPUSH
16640: CALL 79418 0 2
16644: ST_TO_ADDR
16645: GO 16667
// arVehiclesAtttackers := Join ( arVehiclesAtttackers , vehicle ) ;
16647: LD_ADDR_EXP 46
16651: PUSH
16652: LD_EXP 46
16656: PPUSH
16657: LD_VAR 0 1
16661: PPUSH
16662: CALL 79418 0 2
16666: ST_TO_ADDR
// end ; end ;
16667: PPOPN 8
16669: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
16670: LD_VAR 0 1
16674: PPUSH
16675: CALL_OW 110
16679: PUSH
16680: LD_INT 7
16682: EQUAL
16683: IFFALSE 16697
// SetTag ( driver , 0 ) ;
16685: LD_VAR 0 1
16689: PPUSH
16690: LD_INT 0
16692: PPUSH
16693: CALL_OW 109
// end ;
16697: PPOPN 4
16699: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = botSides [ 1 ] then
16700: LD_VAR 0 2
16704: PPUSH
16705: CALL_OW 255
16709: PUSH
16710: LD_EXP 3
16714: PUSH
16715: LD_INT 1
16717: ARRAY
16718: EQUAL
16719: IFFALSE 16749
// if tech in amTech then
16721: LD_VAR 0 1
16725: PUSH
16726: LD_EXP 32
16730: IN
16731: IFFALSE 16749
// amTech := amTech diff tech ;
16733: LD_ADDR_EXP 32
16737: PUSH
16738: LD_EXP 32
16742: PUSH
16743: LD_VAR 0 1
16747: DIFF
16748: ST_TO_ADDR
// if GetSide ( lab ) = botSides [ 2 ] then
16749: LD_VAR 0 2
16753: PPUSH
16754: CALL_OW 255
16758: PUSH
16759: LD_EXP 3
16763: PUSH
16764: LD_INT 2
16766: ARRAY
16767: EQUAL
16768: IFFALSE 16798
// if tech in arTech then
16770: LD_VAR 0 1
16774: PUSH
16775: LD_EXP 42
16779: IN
16780: IFFALSE 16798
// arTech := arTech diff tech ;
16782: LD_ADDR_EXP 42
16786: PUSH
16787: LD_EXP 42
16791: PUSH
16792: LD_VAR 0 1
16796: DIFF
16797: ST_TO_ADDR
// end ; end_of_file
16798: PPOPN 2
16800: END
// every 25 25$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 2 ] do
16801: LD_INT 32
16803: PPUSH
16804: CALL_OW 302
16808: PUSH
16809: LD_INT 32
16811: PPUSH
16812: CALL_OW 255
16816: PUSH
16817: LD_EXP 3
16821: PUSH
16822: LD_INT 2
16824: ARRAY
16825: EQUAL
16826: AND
16827: IFFALSE 16864
16829: GO 16831
16831: DISABLE
// begin wait ( 5 5$00 - ( 1 1$00 * Difficulty ) ) ;
16832: LD_INT 10500
16834: PUSH
16835: LD_INT 2100
16837: PUSH
16838: LD_OWVAR 67
16842: MUL
16843: MINUS
16844: PPUSH
16845: CALL_OW 67
// activeArabAttacks := true ;
16849: LD_ADDR_EXP 4
16853: PUSH
16854: LD_INT 1
16856: ST_TO_ADDR
// ArabAttack ( 0 ) ;
16857: LD_INT 0
16859: PPUSH
16860: CALL 17003 0 1
// end ;
16864: END
// every 45 45$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 2 ] do
16865: LD_INT 32
16867: PPUSH
16868: CALL_OW 302
16872: PUSH
16873: LD_INT 32
16875: PPUSH
16876: CALL_OW 255
16880: PUSH
16881: LD_EXP 3
16885: PUSH
16886: LD_INT 2
16888: ARRAY
16889: EQUAL
16890: AND
16891: IFFALSE 16905
16893: GO 16895
16895: DISABLE
// ArabAttack ( Difficulty ) ;
16896: LD_OWVAR 67
16900: PPUSH
16901: CALL 17003 0 1
16905: END
// every 15 15$00 trigger IsOk ( amDep ) and GetSide ( amDep ) = botSides [ 1 ] do
16906: LD_INT 1
16908: PPUSH
16909: CALL_OW 302
16913: PUSH
16914: LD_INT 1
16916: PPUSH
16917: CALL_OW 255
16921: PUSH
16922: LD_EXP 3
16926: PUSH
16927: LD_INT 1
16929: ARRAY
16930: EQUAL
16931: AND
16932: IFFALSE 16961
16934: GO 16936
16936: DISABLE
// begin wait ( 5 5$00 - ( 1 1$00 * Difficulty ) ) ;
16937: LD_INT 10500
16939: PUSH
16940: LD_INT 2100
16942: PUSH
16943: LD_OWVAR 67
16947: MUL
16948: MINUS
16949: PPUSH
16950: CALL_OW 67
// AmericanAttack ( 0 ) ;
16954: LD_INT 0
16956: PPUSH
16957: CALL 19180 0 1
// end ;
16961: END
// every 45 45$00 trigger IsOk ( amDep ) and GetSide ( amDep ) = botSides [ 1 ] do
16962: LD_INT 1
16964: PPUSH
16965: CALL_OW 302
16969: PUSH
16970: LD_INT 1
16972: PPUSH
16973: CALL_OW 255
16977: PUSH
16978: LD_EXP 3
16982: PUSH
16983: LD_INT 1
16985: ARRAY
16986: EQUAL
16987: AND
16988: IFFALSE 17002
16990: GO 16992
16992: DISABLE
// AmericanAttack ( Difficulty ) ;
16993: LD_OWVAR 67
16997: PPUSH
16998: CALL 19180 0 1
17002: END
// export arAttackersInf , arAttackersVeh ; export function ArabAttack ( v ) ; var i , skill , un , veh ; begin
17003: LD_INT 0
17005: PPUSH
17006: PPUSH
17007: PPUSH
17008: PPUSH
17009: PPUSH
// uc_side := botSides [ 2 ] ;
17010: LD_ADDR_OWVAR 20
17014: PUSH
17015: LD_EXP 3
17019: PUSH
17020: LD_INT 2
17022: ARRAY
17023: ST_TO_ADDR
// uc_nation := nation_arabian ;
17024: LD_ADDR_OWVAR 21
17028: PUSH
17029: LD_INT 2
17031: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
17032: LD_ADDR_VAR 0 4
17036: PUSH
17037: LD_INT 3
17039: PUSH
17040: LD_INT 4
17042: PUSH
17043: LD_INT 5
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: LIST
17050: PUSH
17051: LD_OWVAR 67
17055: ARRAY
17056: ST_TO_ADDR
// arAttackersInf := [ ] ;
17057: LD_ADDR_EXP 53
17061: PUSH
17062: EMPTY
17063: ST_TO_ADDR
// arAttackersVeh := [ ] ;
17064: LD_ADDR_EXP 54
17068: PUSH
17069: EMPTY
17070: ST_TO_ADDR
// InitHC_All ( ) ;
17071: CALL_OW 584
// for i := 1 to [ 3 , 4 , 6 ] [ Difficulty ] + v do
17075: LD_ADDR_VAR 0 3
17079: PUSH
17080: DOUBLE
17081: LD_INT 1
17083: DEC
17084: ST_TO_ADDR
17085: LD_INT 3
17087: PUSH
17088: LD_INT 4
17090: PUSH
17091: LD_INT 6
17093: PUSH
17094: EMPTY
17095: LIST
17096: LIST
17097: LIST
17098: PUSH
17099: LD_OWVAR 67
17103: ARRAY
17104: PUSH
17105: LD_VAR 0 1
17109: PLUS
17110: PUSH
17111: FOR_TO
17112: IFFALSE 17214
// begin PrepareSoldier ( false , skill ) ;
17114: LD_INT 0
17116: PPUSH
17117: LD_VAR 0 4
17121: PPUSH
17122: CALL_OW 381
// un := CreateHuman ;
17126: LD_ADDR_VAR 0 5
17130: PUSH
17131: CALL_OW 44
17135: ST_TO_ADDR
// if i mod 2 = 0 then
17136: LD_VAR 0 3
17140: PUSH
17141: LD_INT 2
17143: MOD
17144: PUSH
17145: LD_INT 0
17147: EQUAL
17148: IFFALSE 17162
// SetClass ( un , class_mortar ) ;
17150: LD_VAR 0 5
17154: PPUSH
17155: LD_INT 8
17157: PPUSH
17158: CALL_OW 336
// PlaceUnitArea ( un , arAttackSpawn2Area , false ) ;
17162: LD_VAR 0 5
17166: PPUSH
17167: LD_INT 25
17169: PPUSH
17170: LD_INT 0
17172: PPUSH
17173: CALL_OW 49
// arAttackersInf := Join ( arAttackersInf , un ) ;
17177: LD_ADDR_EXP 53
17181: PUSH
17182: LD_EXP 53
17186: PPUSH
17187: LD_VAR 0 5
17191: PPUSH
17192: CALL 79418 0 2
17196: ST_TO_ADDR
// ComAgressiveMove ( un , 230 , 143 ) ;
17197: LD_VAR 0 5
17201: PPUSH
17202: LD_INT 230
17204: PPUSH
17205: LD_INT 143
17207: PPUSH
17208: CALL_OW 114
// end ;
17212: GO 17111
17214: POP
17215: POP
// for i := 1 to 3 + v do
17216: LD_ADDR_VAR 0 3
17220: PUSH
17221: DOUBLE
17222: LD_INT 1
17224: DEC
17225: ST_TO_ADDR
17226: LD_INT 3
17228: PUSH
17229: LD_VAR 0 1
17233: PLUS
17234: PUSH
17235: FOR_TO
17236: IFFALSE 17400
// begin PrepareMechanic ( false , skill ) ;
17238: LD_INT 0
17240: PPUSH
17241: LD_VAR 0 4
17245: PPUSH
17246: CALL_OW 383
// un := CreateHuman ;
17250: LD_ADDR_VAR 0 5
17254: PUSH
17255: CALL_OW 44
17259: ST_TO_ADDR
// SetTag ( un , 999 ) ;
17260: LD_VAR 0 5
17264: PPUSH
17265: LD_INT 999
17267: PPUSH
17268: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 80 ) ;
17272: LD_INT 14
17274: PPUSH
17275: LD_INT 1
17277: PPUSH
17278: LD_INT 1
17280: PPUSH
17281: LD_INT 27
17283: PUSH
17284: LD_INT 25
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: PUSH
17291: LD_VAR 0 3
17295: PUSH
17296: LD_INT 2
17298: MOD
17299: PUSH
17300: LD_INT 1
17302: PLUS
17303: ARRAY
17304: PPUSH
17305: LD_INT 80
17307: PPUSH
17308: CALL 46567 0 5
// veh := CreateVehicle ;
17312: LD_ADDR_VAR 0 6
17316: PUSH
17317: CALL_OW 45
17321: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
17322: LD_VAR 0 6
17326: PPUSH
17327: LD_INT 5
17329: PPUSH
17330: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
17334: LD_VAR 0 6
17338: PPUSH
17339: LD_INT 26
17341: PPUSH
17342: LD_INT 0
17344: PPUSH
17345: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
17349: LD_VAR 0 5
17353: PPUSH
17354: LD_VAR 0 6
17358: PPUSH
17359: CALL_OW 52
// ComMoveXY ( un , 236 , 127 ) ;
17363: LD_VAR 0 5
17367: PPUSH
17368: LD_INT 236
17370: PPUSH
17371: LD_INT 127
17373: PPUSH
17374: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
17378: LD_ADDR_EXP 54
17382: PUSH
17383: LD_EXP 54
17387: PPUSH
17388: LD_VAR 0 6
17392: PPUSH
17393: CALL 79418 0 2
17397: ST_TO_ADDR
// end ;
17398: GO 17235
17400: POP
17401: POP
// wait ( 0 0$2 ) ;
17402: LD_INT 70
17404: PPUSH
17405: CALL_OW 67
// for i := 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
17409: LD_ADDR_VAR 0 3
17413: PUSH
17414: DOUBLE
17415: LD_INT 1
17417: DEC
17418: ST_TO_ADDR
17419: LD_INT 1
17421: PUSH
17422: LD_INT 2
17424: PUSH
17425: LD_INT 3
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: LIST
17432: PUSH
17433: LD_OWVAR 67
17437: ARRAY
17438: PUSH
17439: FOR_TO
17440: IFFALSE 17583
// begin PrepareMechanic ( false , skill ) ;
17442: LD_INT 0
17444: PPUSH
17445: LD_VAR 0 4
17449: PPUSH
17450: CALL_OW 383
// un := CreateHuman ;
17454: LD_ADDR_VAR 0 5
17458: PUSH
17459: CALL_OW 44
17463: ST_TO_ADDR
// SetTag ( un , 999 ) ;
17464: LD_VAR 0 5
17468: PPUSH
17469: LD_INT 999
17471: PPUSH
17472: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 80 ) ;
17476: LD_INT 14
17478: PPUSH
17479: LD_INT 1
17481: PPUSH
17482: LD_INT 1
17484: PPUSH
17485: LD_INT 26
17487: PPUSH
17488: LD_INT 80
17490: PPUSH
17491: CALL 46567 0 5
// veh := CreateVehicle ;
17495: LD_ADDR_VAR 0 6
17499: PUSH
17500: CALL_OW 45
17504: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
17505: LD_VAR 0 6
17509: PPUSH
17510: LD_INT 5
17512: PPUSH
17513: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
17517: LD_VAR 0 6
17521: PPUSH
17522: LD_INT 26
17524: PPUSH
17525: LD_INT 0
17527: PPUSH
17528: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
17532: LD_VAR 0 5
17536: PPUSH
17537: LD_VAR 0 6
17541: PPUSH
17542: CALL_OW 52
// ComMoveXY ( un , 236 , 127 ) ;
17546: LD_VAR 0 5
17550: PPUSH
17551: LD_INT 236
17553: PPUSH
17554: LD_INT 127
17556: PPUSH
17557: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
17561: LD_ADDR_EXP 54
17565: PUSH
17566: LD_EXP 54
17570: PPUSH
17571: LD_VAR 0 6
17575: PPUSH
17576: CALL 79418 0 2
17580: ST_TO_ADDR
// end ;
17581: GO 17439
17583: POP
17584: POP
// wait ( 0 0$2 ) ;
17585: LD_INT 70
17587: PPUSH
17588: CALL_OW 67
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
17592: LD_ADDR_VAR 0 3
17596: PUSH
17597: DOUBLE
17598: LD_INT 1
17600: DEC
17601: ST_TO_ADDR
17602: LD_INT 1
17604: PUSH
17605: LD_INT 2
17607: PUSH
17608: LD_INT 2
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: LIST
17615: PUSH
17616: LD_OWVAR 67
17620: ARRAY
17621: PUSH
17622: FOR_TO
17623: IFFALSE 17797
// begin PrepareMechanic ( false , skill ) ;
17625: LD_INT 0
17627: PPUSH
17628: LD_VAR 0 4
17632: PPUSH
17633: CALL_OW 383
// un := CreateHuman ;
17637: LD_ADDR_VAR 0 5
17641: PUSH
17642: CALL_OW 44
17646: ST_TO_ADDR
// SetTag ( un , 999 ) ;
17647: LD_VAR 0 5
17651: PPUSH
17652: LD_INT 999
17654: PPUSH
17655: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher , 80 ) ;
17659: LD_INT 14
17661: PPUSH
17662: LD_INT 1
17664: PPUSH
17665: LD_INT 1
17667: PPUSH
17668: LD_INT 28
17670: PPUSH
17671: LD_INT 80
17673: PPUSH
17674: CALL 46567 0 5
// veh := CreateVehicle ;
17678: LD_ADDR_VAR 0 6
17682: PUSH
17683: CALL_OW 45
17687: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
17688: LD_VAR 0 6
17692: PPUSH
17693: LD_INT 4
17695: PPUSH
17696: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
17700: LD_VAR 0 6
17704: PPUSH
17705: LD_INT 26
17707: PPUSH
17708: LD_INT 0
17710: PPUSH
17711: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
17715: LD_VAR 0 5
17719: PPUSH
17720: LD_VAR 0 6
17724: PPUSH
17725: CALL_OW 52
// if i mod 2 = 0 then
17729: LD_VAR 0 3
17733: PUSH
17734: LD_INT 2
17736: MOD
17737: PUSH
17738: LD_INT 0
17740: EQUAL
17741: IFFALSE 17760
// ComMoveXY ( un , 136 , 61 ) else
17743: LD_VAR 0 5
17747: PPUSH
17748: LD_INT 136
17750: PPUSH
17751: LD_INT 61
17753: PPUSH
17754: CALL_OW 111
17758: GO 17775
// ComMoveXY ( un , 137 , 41 ) ;
17760: LD_VAR 0 5
17764: PPUSH
17765: LD_INT 137
17767: PPUSH
17768: LD_INT 41
17770: PPUSH
17771: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
17775: LD_ADDR_EXP 54
17779: PUSH
17780: LD_EXP 54
17784: PPUSH
17785: LD_VAR 0 6
17789: PPUSH
17790: CALL 79418 0 2
17794: ST_TO_ADDR
// end ;
17795: GO 17622
17797: POP
17798: POP
// end ;
17799: LD_VAR 0 2
17803: RET
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest , enemy ;
17804: LD_EXP 53
17808: IFFALSE 18335
17810: GO 17812
17812: DISABLE
17813: LD_INT 0
17815: PPUSH
17816: PPUSH
17817: PPUSH
17818: PPUSH
// begin enable ;
17819: ENABLE
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
17820: LD_ADDR_VAR 0 2
17824: PUSH
17825: LD_EXP 53
17829: PPUSH
17830: LD_INT 50
17832: PUSH
17833: EMPTY
17834: LIST
17835: PPUSH
17836: CALL_OW 72
17840: ST_TO_ADDR
// arAttackersInf := [ ] ;
17841: LD_ADDR_EXP 53
17845: PUSH
17846: EMPTY
17847: ST_TO_ADDR
// ComMoveXY ( tmp , 173 , 139 ) ;
17848: LD_VAR 0 2
17852: PPUSH
17853: LD_INT 173
17855: PPUSH
17856: LD_INT 139
17858: PPUSH
17859: CALL_OW 111
// wait ( 0 0$10 ) ;
17863: LD_INT 350
17865: PPUSH
17866: CALL_OW 67
// for i in UnitFilter ( tmp , [ f_class , class_soldier ] ) do
17870: LD_ADDR_VAR 0 1
17874: PUSH
17875: LD_VAR 0 2
17879: PPUSH
17880: LD_INT 25
17882: PUSH
17883: LD_INT 1
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PPUSH
17890: CALL_OW 72
17894: PUSH
17895: FOR_IN
17896: IFFALSE 18027
// begin nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , botSides [ 2 ] ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
17898: LD_ADDR_VAR 0 3
17902: PUSH
17903: LD_INT 81
17905: PUSH
17906: LD_EXP 3
17910: PUSH
17911: LD_INT 2
17913: ARRAY
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: PUSH
17919: LD_INT 3
17921: PUSH
17922: LD_INT 120
17924: PUSH
17925: LD_INT 11
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: PUSH
17936: LD_INT 2
17938: PUSH
17939: LD_INT 21
17941: PUSH
17942: LD_INT 2
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: PUSH
17949: LD_INT 21
17951: PUSH
17952: LD_INT 3
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: LIST
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: LIST
17968: PPUSH
17969: CALL_OW 69
17973: PPUSH
17974: LD_VAR 0 1
17978: PPUSH
17979: CALL_OW 74
17983: ST_TO_ADDR
// if not nearest then
17984: LD_VAR 0 3
17988: NOT
17989: IFFALSE 17993
// break ;
17991: GO 18027
// SetTag ( nearest , tMined ) ;
17993: LD_VAR 0 3
17997: PPUSH
17998: LD_INT 11
18000: PPUSH
18001: CALL_OW 109
// AddComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
18005: LD_VAR 0 1
18009: PPUSH
18010: LD_INT 0
18012: PPUSH
18013: LD_INT 0
18015: PPUSH
18016: LD_VAR 0 3
18020: PPUSH
18021: CALL_OW 192
// end ;
18025: GO 17895
18027: POP
18028: POP
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
18029: LD_ADDR_VAR 0 2
18033: PUSH
18034: LD_VAR 0 2
18038: PPUSH
18039: LD_INT 50
18041: PUSH
18042: EMPTY
18043: LIST
18044: PPUSH
18045: CALL_OW 72
18049: ST_TO_ADDR
// AddComMoveXY ( tmp , 155 , 119 ) ;
18050: LD_VAR 0 2
18054: PPUSH
18055: LD_INT 155
18057: PPUSH
18058: LD_INT 119
18060: PPUSH
18061: CALL_OW 171
// repeat wait ( 0 0$2 ) ;
18065: LD_INT 70
18067: PPUSH
18068: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
18072: LD_ADDR_VAR 0 2
18076: PUSH
18077: LD_VAR 0 2
18081: PPUSH
18082: LD_INT 50
18084: PUSH
18085: EMPTY
18086: LIST
18087: PPUSH
18088: CALL_OW 72
18092: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , botSides [ 2 ] ] ) ;
18093: LD_ADDR_VAR 0 4
18097: PUSH
18098: LD_INT 81
18100: PUSH
18101: LD_EXP 3
18105: PUSH
18106: LD_INT 2
18108: ARRAY
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: PPUSH
18114: CALL_OW 69
18118: ST_TO_ADDR
// for i in tmp do
18119: LD_ADDR_VAR 0 1
18123: PUSH
18124: LD_VAR 0 2
18128: PUSH
18129: FOR_IN
18130: IFFALSE 18326
// if GetClass ( i ) <> 1 then
18132: LD_VAR 0 1
18136: PPUSH
18137: CALL_OW 257
18141: PUSH
18142: LD_INT 1
18144: NONEQUAL
18145: IFFALSE 18173
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
18147: LD_VAR 0 1
18151: PPUSH
18152: LD_VAR 0 4
18156: PPUSH
18157: LD_VAR 0 1
18161: PPUSH
18162: CALL_OW 74
18166: PPUSH
18167: CALL_OW 115
18171: GO 18324
// if not HasTask ( i ) then
18173: LD_VAR 0 1
18177: PPUSH
18178: CALL_OW 314
18182: NOT
18183: IFFALSE 18324
// begin nearest := NearestUnitToUnit ( UnitFilter ( enemy , [ [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
18185: LD_ADDR_VAR 0 3
18189: PUSH
18190: LD_VAR 0 4
18194: PPUSH
18195: LD_INT 3
18197: PUSH
18198: LD_INT 120
18200: PUSH
18201: LD_INT 11
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PUSH
18212: LD_INT 2
18214: PUSH
18215: LD_INT 21
18217: PUSH
18218: LD_INT 2
18220: PUSH
18221: EMPTY
18222: LIST
18223: LIST
18224: PUSH
18225: LD_INT 21
18227: PUSH
18228: LD_INT 3
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: LIST
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: PPUSH
18244: CALL_OW 72
18248: PPUSH
18249: LD_VAR 0 1
18253: PPUSH
18254: CALL_OW 74
18258: ST_TO_ADDR
// if not nearest then
18259: LD_VAR 0 3
18263: NOT
18264: IFFALSE 18292
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
18266: LD_VAR 0 1
18270: PPUSH
18271: LD_VAR 0 4
18275: PPUSH
18276: LD_VAR 0 1
18280: PPUSH
18281: CALL_OW 74
18285: PPUSH
18286: CALL_OW 115
18290: GO 18324
// begin SetTag ( nearest , tMined ) ;
18292: LD_VAR 0 3
18296: PPUSH
18297: LD_INT 11
18299: PPUSH
18300: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
18304: LD_VAR 0 1
18308: PPUSH
18309: LD_INT 0
18311: PPUSH
18312: LD_INT 0
18314: PPUSH
18315: LD_VAR 0 3
18319: PPUSH
18320: CALL_OW 132
// end ; end ;
18324: GO 18129
18326: POP
18327: POP
// until not tmp ;
18328: LD_VAR 0 2
18332: NOT
18333: IFFALSE 18065
// end ;
18335: PPOPN 4
18337: END
// every 0 0$2 trigger arAttackersVeh do var i , tmp ;
18338: LD_EXP 54
18342: IFFALSE 18454
18344: GO 18346
18346: DISABLE
18347: LD_INT 0
18349: PPUSH
18350: PPUSH
// begin enable ;
18351: ENABLE
// tmp := arAttackersVeh ;
18352: LD_ADDR_VAR 0 2
18356: PUSH
18357: LD_EXP 54
18361: ST_TO_ADDR
// arAttackersVeh := [ ] ;
18362: LD_ADDR_EXP 54
18366: PUSH
18367: EMPTY
18368: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
18369: LD_INT 70
18371: PPUSH
18372: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
18376: LD_ADDR_VAR 0 2
18380: PUSH
18381: LD_VAR 0 2
18385: PPUSH
18386: LD_INT 50
18388: PUSH
18389: EMPTY
18390: LIST
18391: PPUSH
18392: CALL_OW 72
18396: ST_TO_ADDR
// for i in tmp do
18397: LD_ADDR_VAR 0 1
18401: PUSH
18402: LD_VAR 0 2
18406: PUSH
18407: FOR_IN
18408: IFFALSE 18445
// AgressiveMove ( i , [ [ 207 , 125 ] , [ 185 , 114 ] ] ) until not tmp ;
18410: LD_VAR 0 1
18414: PPUSH
18415: LD_INT 207
18417: PUSH
18418: LD_INT 125
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: PUSH
18425: LD_INT 185
18427: PUSH
18428: LD_INT 114
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: EMPTY
18436: LIST
18437: LIST
18438: PPUSH
18439: CALL 82022 0 2
18443: GO 18407
18445: POP
18446: POP
18447: LD_VAR 0 2
18451: NOT
18452: IFFALSE 18369
// end ;
18454: PPOPN 2
18456: END
// every 0 0$1 trigger arVehiclesAtttackers and activeArabAttacks do var i , mech , enemy ;
18457: LD_EXP 46
18461: PUSH
18462: LD_EXP 4
18466: AND
18467: IFFALSE 19057
18469: GO 18471
18471: DISABLE
18472: LD_INT 0
18474: PPUSH
18475: PPUSH
18476: PPUSH
// begin enable ;
18477: ENABLE
// if not arVehiclesAtttackers then
18478: LD_EXP 46
18482: NOT
18483: IFFALSE 18487
// exit ;
18485: GO 19057
// for i in arVehiclesAtttackers do
18487: LD_ADDR_VAR 0 1
18491: PUSH
18492: LD_EXP 46
18496: PUSH
18497: FOR_IN
18498: IFFALSE 19055
// begin if not IsOk ( i ) or GetSide ( i ) <> botSides [ 2 ] then
18500: LD_VAR 0 1
18504: PPUSH
18505: CALL_OW 302
18509: NOT
18510: PUSH
18511: LD_VAR 0 1
18515: PPUSH
18516: CALL_OW 255
18520: PUSH
18521: LD_EXP 3
18525: PUSH
18526: LD_INT 2
18528: ARRAY
18529: NONEQUAL
18530: OR
18531: IFFALSE 18551
// begin arVehiclesAtttackers := arVehiclesAtttackers diff i ;
18533: LD_ADDR_EXP 46
18537: PUSH
18538: LD_EXP 46
18542: PUSH
18543: LD_VAR 0 1
18547: DIFF
18548: ST_TO_ADDR
// continue ;
18549: GO 18497
// end ; if GetTag ( i ) = 300 then
18551: LD_VAR 0 1
18555: PPUSH
18556: CALL_OW 110
18560: PUSH
18561: LD_INT 300
18563: EQUAL
18564: IFFALSE 18679
// begin if GetFuel ( i ) < 50 then
18566: LD_VAR 0 1
18570: PPUSH
18571: CALL_OW 261
18575: PUSH
18576: LD_INT 50
18578: LESS
18579: IFFALSE 18638
// begin ComMoveXY ( i , 198 , 28 ) ;
18581: LD_VAR 0 1
18585: PPUSH
18586: LD_INT 198
18588: PPUSH
18589: LD_INT 28
18591: PPUSH
18592: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18596: LD_INT 35
18598: PPUSH
18599: CALL_OW 67
// until GetDistUnitXY ( i , 198 , 28 ) < 4 ;
18603: LD_VAR 0 1
18607: PPUSH
18608: LD_INT 198
18610: PPUSH
18611: LD_INT 28
18613: PPUSH
18614: CALL_OW 297
18618: PUSH
18619: LD_INT 4
18621: LESS
18622: IFFALSE 18596
// SetFuel ( i , 100 ) ;
18624: LD_VAR 0 1
18628: PPUSH
18629: LD_INT 100
18631: PPUSH
18632: CALL_OW 240
// end else
18636: GO 18679
// if not IsInArea ( i , arParkingArea ) then
18638: LD_VAR 0 1
18642: PPUSH
18643: LD_INT 28
18645: PPUSH
18646: CALL_OW 308
18650: NOT
18651: IFFALSE 18667
// ComMoveToArea ( i , arParkingArea ) else
18653: LD_VAR 0 1
18657: PPUSH
18658: LD_INT 28
18660: PPUSH
18661: CALL_OW 113
18665: GO 18679
// SetTag ( i , 301 ) ;
18667: LD_VAR 0 1
18671: PPUSH
18672: LD_INT 301
18674: PPUSH
18675: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
18679: LD_VAR 0 1
18683: PPUSH
18684: CALL_OW 110
18688: PUSH
18689: LD_INT 301
18691: EQUAL
18692: IFFALSE 18834
// begin if GetLives ( i ) < 1000 then
18694: LD_VAR 0 1
18698: PPUSH
18699: CALL_OW 256
18703: PUSH
18704: LD_INT 1000
18706: LESS
18707: IFFALSE 18811
// begin if not IsDrivenBy ( i ) then
18709: LD_VAR 0 1
18713: PPUSH
18714: CALL_OW 311
18718: NOT
18719: IFFALSE 18723
// continue ;
18721: GO 18497
// mech := IsDrivenBy ( i ) ;
18723: LD_ADDR_VAR 0 2
18727: PUSH
18728: LD_VAR 0 1
18732: PPUSH
18733: CALL_OW 311
18737: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
18738: LD_VAR 0 2
18742: PPUSH
18743: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
18747: LD_VAR 0 2
18751: PPUSH
18752: LD_VAR 0 1
18756: PPUSH
18757: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
18761: LD_INT 35
18763: PPUSH
18764: CALL_OW 67
// until GetLives ( i ) = 1000 ;
18768: LD_VAR 0 1
18772: PPUSH
18773: CALL_OW 256
18777: PUSH
18778: LD_INT 1000
18780: EQUAL
18781: IFFALSE 18761
// SetLives ( mech , 1000 ) ;
18783: LD_VAR 0 2
18787: PPUSH
18788: LD_INT 1000
18790: PPUSH
18791: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
18795: LD_VAR 0 2
18799: PPUSH
18800: LD_VAR 0 1
18804: PPUSH
18805: CALL_OW 120
// end else
18809: GO 18834
// if IsDrivenBy ( i ) then
18811: LD_VAR 0 1
18815: PPUSH
18816: CALL_OW 311
18820: IFFALSE 18834
// SetTag ( i , 0 ) ;
18822: LD_VAR 0 1
18826: PPUSH
18827: LD_INT 0
18829: PPUSH
18830: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
18834: LD_VAR 0 1
18838: PPUSH
18839: CALL_OW 110
18843: PUSH
18844: LD_INT 300
18846: LESS
18847: IFFALSE 19053
// begin enemy := FilterUnitsInArea ( arBaseArea , [ f_enemy , botSides [ 2 ] ] ) ;
18849: LD_ADDR_VAR 0 3
18853: PUSH
18854: LD_INT 5
18856: PPUSH
18857: LD_INT 81
18859: PUSH
18860: LD_EXP 3
18864: PUSH
18865: LD_INT 2
18867: ARRAY
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: PPUSH
18873: CALL_OW 70
18877: ST_TO_ADDR
// if GetLives ( i ) < 650 then
18878: LD_VAR 0 1
18882: PPUSH
18883: CALL_OW 256
18887: PUSH
18888: LD_INT 650
18890: LESS
18891: IFFALSE 18916
// begin ComStop ( i ) ;
18893: LD_VAR 0 1
18897: PPUSH
18898: CALL_OW 141
// SetTag ( i , 300 ) ;
18902: LD_VAR 0 1
18906: PPUSH
18907: LD_INT 300
18909: PPUSH
18910: CALL_OW 109
// continue ;
18914: GO 18497
// end ; if enemy then
18916: LD_VAR 0 3
18920: IFFALSE 18960
// begin if not HasTask ( i ) then
18922: LD_VAR 0 1
18926: PPUSH
18927: CALL_OW 314
18931: NOT
18932: IFFALSE 18958
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
18934: LD_VAR 0 1
18938: PPUSH
18939: LD_VAR 0 3
18943: PPUSH
18944: LD_VAR 0 1
18948: PPUSH
18949: CALL_OW 74
18953: PPUSH
18954: CALL_OW 115
// end else
18958: GO 19053
// if arVehiclesAtttackers then
18960: LD_EXP 46
18964: IFFALSE 19053
// begin enemy := FilterAllUnits ( [ f_enemy , botSides [ 2 ] ] ) ;
18966: LD_ADDR_VAR 0 3
18970: PUSH
18971: LD_INT 81
18973: PUSH
18974: LD_EXP 3
18978: PUSH
18979: LD_INT 2
18981: ARRAY
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: PPUSH
18987: CALL_OW 69
18991: ST_TO_ADDR
// if enemy then
18992: LD_VAR 0 3
18996: IFFALSE 19053
// AgressiveMove ( i , [ [ 215 , 88 ] , [ 197 , 90 ] , [ 178 , 90 ] , [ 169 , 104 ] ] ) ;
18998: LD_VAR 0 1
19002: PPUSH
19003: LD_INT 215
19005: PUSH
19006: LD_INT 88
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PUSH
19013: LD_INT 197
19015: PUSH
19016: LD_INT 90
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: PUSH
19023: LD_INT 178
19025: PUSH
19026: LD_INT 90
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PUSH
19033: LD_INT 169
19035: PUSH
19036: LD_INT 104
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: PPUSH
19049: CALL 82022 0 2
// end ; end ; end ;
19053: GO 18497
19055: POP
19056: POP
// end ;
19057: PPOPN 3
19059: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , botSides [ 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
19060: LD_INT 22
19062: PUSH
19063: LD_EXP 3
19067: PUSH
19068: LD_INT 2
19070: ARRAY
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: PUSH
19076: LD_INT 32
19078: PUSH
19079: LD_INT 1
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PPUSH
19090: CALL_OW 69
19094: IFFALSE 19177
19096: GO 19098
19098: DISABLE
19099: LD_INT 0
19101: PPUSH
// begin enable ;
19102: ENABLE
// for i in FilterAllUnits ( [ [ f_side , botSides [ 2 ] ] , [ f_engine , engine_combustion ] ] ) do
19103: LD_ADDR_VAR 0 1
19107: PUSH
19108: LD_INT 22
19110: PUSH
19111: LD_EXP 3
19115: PUSH
19116: LD_INT 2
19118: ARRAY
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 32
19126: PUSH
19127: LD_INT 1
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PPUSH
19138: CALL_OW 69
19142: PUSH
19143: FOR_IN
19144: IFFALSE 19175
// if GetFuel ( i ) < 3 then
19146: LD_VAR 0 1
19150: PPUSH
19151: CALL_OW 261
19155: PUSH
19156: LD_INT 3
19158: LESS
19159: IFFALSE 19173
// SetFuel ( i , 3 ) ;
19161: LD_VAR 0 1
19165: PPUSH
19166: LD_INT 3
19168: PPUSH
19169: CALL_OW 240
19173: GO 19143
19175: POP
19176: POP
// end ;
19177: PPOPN 1
19179: END
// export amAttackersInf , amAttackersVeh ; export function AmericanAttack ( v ) ; var i , skill , un , veh ; begin
19180: LD_INT 0
19182: PPUSH
19183: PPUSH
19184: PPUSH
19185: PPUSH
19186: PPUSH
// uc_side := botSides [ 1 ] ;
19187: LD_ADDR_OWVAR 20
19191: PUSH
19192: LD_EXP 3
19196: PUSH
19197: LD_INT 1
19199: ARRAY
19200: ST_TO_ADDR
// uc_nation := nation_american ;
19201: LD_ADDR_OWVAR 21
19205: PUSH
19206: LD_INT 1
19208: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
19209: LD_ADDR_VAR 0 4
19213: PUSH
19214: LD_INT 3
19216: PUSH
19217: LD_INT 4
19219: PUSH
19220: LD_INT 5
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: LIST
19227: PUSH
19228: LD_OWVAR 67
19232: ARRAY
19233: ST_TO_ADDR
// amAttackersInf := [ ] ;
19234: LD_ADDR_EXP 55
19238: PUSH
19239: EMPTY
19240: ST_TO_ADDR
// amAttackersVeh := [ ] ;
19241: LD_ADDR_EXP 56
19245: PUSH
19246: EMPTY
19247: ST_TO_ADDR
// InitHC_All ( ) ;
19248: CALL_OW 584
// for i := 1 to [ 2 , 4 , 5 ] [ Difficulty ] + v do
19252: LD_ADDR_VAR 0 3
19256: PUSH
19257: DOUBLE
19258: LD_INT 1
19260: DEC
19261: ST_TO_ADDR
19262: LD_INT 2
19264: PUSH
19265: LD_INT 4
19267: PUSH
19268: LD_INT 5
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: LIST
19275: PUSH
19276: LD_OWVAR 67
19280: ARRAY
19281: PUSH
19282: LD_VAR 0 1
19286: PLUS
19287: PUSH
19288: FOR_TO
19289: IFFALSE 19365
// begin PrepareSoldier ( false , skill ) ;
19291: LD_INT 0
19293: PPUSH
19294: LD_VAR 0 4
19298: PPUSH
19299: CALL_OW 381
// un := CreateHuman ;
19303: LD_ADDR_VAR 0 5
19307: PUSH
19308: CALL_OW 44
19312: ST_TO_ADDR
// PlaceUnitArea ( un , amAttackSpawn2Area , false ) ;
19313: LD_VAR 0 5
19317: PPUSH
19318: LD_INT 30
19320: PPUSH
19321: LD_INT 0
19323: PPUSH
19324: CALL_OW 49
// amAttackersInf := Join ( amAttackersInf , un ) ;
19328: LD_ADDR_EXP 55
19332: PUSH
19333: LD_EXP 55
19337: PPUSH
19338: LD_VAR 0 5
19342: PPUSH
19343: CALL 79418 0 2
19347: ST_TO_ADDR
// ComAgressiveMove ( un , 110 , 129 ) ;
19348: LD_VAR 0 5
19352: PPUSH
19353: LD_INT 110
19355: PPUSH
19356: LD_INT 129
19358: PPUSH
19359: CALL_OW 114
// end ;
19363: GO 19288
19365: POP
19366: POP
// for i := 1 to 2 + v do
19367: LD_ADDR_VAR 0 3
19371: PUSH
19372: DOUBLE
19373: LD_INT 1
19375: DEC
19376: ST_TO_ADDR
19377: LD_INT 2
19379: PUSH
19380: LD_VAR 0 1
19384: PLUS
19385: PUSH
19386: FOR_TO
19387: IFFALSE 19555
// begin PrepareMechanic ( false , skill ) ;
19389: LD_INT 0
19391: PPUSH
19392: LD_VAR 0 4
19396: PPUSH
19397: CALL_OW 383
// un := CreateHuman ;
19401: LD_ADDR_VAR 0 5
19405: PUSH
19406: CALL_OW 44
19410: ST_TO_ADDR
// SetTag ( un , 999 ) ;
19411: LD_VAR 0 5
19415: PPUSH
19416: LD_INT 999
19418: PPUSH
19419: CALL_OW 109
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , [ us_light_gun , us_double_gun , us_gatling_gun ] [ i mod 3 + 1 ] , 80 ) ;
19423: LD_INT 3
19425: PPUSH
19426: LD_INT 1
19428: PPUSH
19429: LD_INT 1
19431: PPUSH
19432: LD_INT 3
19434: PUSH
19435: LD_INT 5
19437: PUSH
19438: LD_INT 4
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: LIST
19445: PUSH
19446: LD_VAR 0 3
19450: PUSH
19451: LD_INT 3
19453: MOD
19454: PUSH
19455: LD_INT 1
19457: PLUS
19458: ARRAY
19459: PPUSH
19460: LD_INT 80
19462: PPUSH
19463: CALL 46567 0 5
// veh := CreateVehicle ;
19467: LD_ADDR_VAR 0 6
19471: PUSH
19472: CALL_OW 45
19476: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
19477: LD_VAR 0 6
19481: PPUSH
19482: LD_INT 0
19484: PPUSH
19485: CALL_OW 233
// PlaceUnitArea ( veh , amAttackSpawnArea , false ) ;
19489: LD_VAR 0 6
19493: PPUSH
19494: LD_INT 31
19496: PPUSH
19497: LD_INT 0
19499: PPUSH
19500: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
19504: LD_VAR 0 5
19508: PPUSH
19509: LD_VAR 0 6
19513: PPUSH
19514: CALL_OW 52
// ComMoveXY ( un , 96 , 137 ) ;
19518: LD_VAR 0 5
19522: PPUSH
19523: LD_INT 96
19525: PPUSH
19526: LD_INT 137
19528: PPUSH
19529: CALL_OW 111
// amAttackersVeh := Join ( amAttackersVeh , veh ) ;
19533: LD_ADDR_EXP 56
19537: PUSH
19538: LD_EXP 56
19542: PPUSH
19543: LD_VAR 0 6
19547: PPUSH
19548: CALL 79418 0 2
19552: ST_TO_ADDR
// end ;
19553: GO 19386
19555: POP
19556: POP
// end ;
19557: LD_VAR 0 2
19561: RET
// every 0 0$2 trigger amAttackersVeh do var i , tmp ;
19562: LD_EXP 56
19566: IFFALSE 19691
19568: GO 19570
19570: DISABLE
19571: LD_INT 0
19573: PPUSH
19574: PPUSH
// begin enable ;
19575: ENABLE
// tmp := amAttackersVeh union amAttackersInf ;
19576: LD_ADDR_VAR 0 2
19580: PUSH
19581: LD_EXP 56
19585: PUSH
19586: LD_EXP 55
19590: UNION
19591: ST_TO_ADDR
// arAttackersVeh := [ ] ;
19592: LD_ADDR_EXP 54
19596: PUSH
19597: EMPTY
19598: ST_TO_ADDR
// amAttackersInf := [ ] ;
19599: LD_ADDR_EXP 55
19603: PUSH
19604: EMPTY
19605: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
19606: LD_INT 70
19608: PPUSH
19609: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
19613: LD_ADDR_VAR 0 2
19617: PUSH
19618: LD_VAR 0 2
19622: PPUSH
19623: LD_INT 50
19625: PUSH
19626: EMPTY
19627: LIST
19628: PPUSH
19629: CALL_OW 72
19633: ST_TO_ADDR
// for i in tmp do
19634: LD_ADDR_VAR 0 1
19638: PUSH
19639: LD_VAR 0 2
19643: PUSH
19644: FOR_IN
19645: IFFALSE 19682
// AgressiveMove ( i , [ [ 99 , 136 ] , [ 88 , 110 ] ] ) until not tmp ;
19647: LD_VAR 0 1
19651: PPUSH
19652: LD_INT 99
19654: PUSH
19655: LD_INT 136
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: PUSH
19662: LD_INT 88
19664: PUSH
19665: LD_INT 110
19667: PUSH
19668: EMPTY
19669: LIST
19670: LIST
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PPUSH
19676: CALL 82022 0 2
19680: GO 19644
19682: POP
19683: POP
19684: LD_VAR 0 2
19688: NOT
19689: IFFALSE 19606
// end ;
19691: PPOPN 2
19693: END
// every 0 0$1 trigger amVehiclesAtttackers do var i , mech , enemy ;
19694: LD_EXP 36
19698: IFFALSE 20277
19700: GO 19702
19702: DISABLE
19703: LD_INT 0
19705: PPUSH
19706: PPUSH
19707: PPUSH
// begin enable ;
19708: ENABLE
// if not amVehiclesAtttackers then
19709: LD_EXP 36
19713: NOT
19714: IFFALSE 19718
// exit ;
19716: GO 20277
// for i in amVehiclesAtttackers do
19718: LD_ADDR_VAR 0 1
19722: PUSH
19723: LD_EXP 36
19727: PUSH
19728: FOR_IN
19729: IFFALSE 20275
// begin if not IsOk ( i ) or GetSide ( i ) <> botSides [ 1 ] then
19731: LD_VAR 0 1
19735: PPUSH
19736: CALL_OW 302
19740: NOT
19741: PUSH
19742: LD_VAR 0 1
19746: PPUSH
19747: CALL_OW 255
19751: PUSH
19752: LD_EXP 3
19756: PUSH
19757: LD_INT 1
19759: ARRAY
19760: NONEQUAL
19761: OR
19762: IFFALSE 19782
// begin amVehiclesAtttackers := amVehiclesAtttackers diff i ;
19764: LD_ADDR_EXP 36
19768: PUSH
19769: LD_EXP 36
19773: PUSH
19774: LD_VAR 0 1
19778: DIFF
19779: ST_TO_ADDR
// continue ;
19780: GO 19728
// end ; if GetTag ( i ) = 300 then
19782: LD_VAR 0 1
19786: PPUSH
19787: CALL_OW 110
19791: PUSH
19792: LD_INT 300
19794: EQUAL
19795: IFFALSE 19910
// begin if GetFuel ( i ) < 50 then
19797: LD_VAR 0 1
19801: PPUSH
19802: CALL_OW 261
19806: PUSH
19807: LD_INT 50
19809: LESS
19810: IFFALSE 19869
// begin ComMoveXY ( i , 24 , 36 ) ;
19812: LD_VAR 0 1
19816: PPUSH
19817: LD_INT 24
19819: PPUSH
19820: LD_INT 36
19822: PPUSH
19823: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19827: LD_INT 35
19829: PPUSH
19830: CALL_OW 67
// until GetDistUnitXY ( i , 24 , 36 ) < 4 ;
19834: LD_VAR 0 1
19838: PPUSH
19839: LD_INT 24
19841: PPUSH
19842: LD_INT 36
19844: PPUSH
19845: CALL_OW 297
19849: PUSH
19850: LD_INT 4
19852: LESS
19853: IFFALSE 19827
// SetFuel ( i , 100 ) ;
19855: LD_VAR 0 1
19859: PPUSH
19860: LD_INT 100
19862: PPUSH
19863: CALL_OW 240
// end else
19867: GO 19910
// if not IsInArea ( i , amParkingArea ) then
19869: LD_VAR 0 1
19873: PPUSH
19874: LD_INT 27
19876: PPUSH
19877: CALL_OW 308
19881: NOT
19882: IFFALSE 19898
// ComMoveToArea ( i , amParkingArea ) else
19884: LD_VAR 0 1
19888: PPUSH
19889: LD_INT 27
19891: PPUSH
19892: CALL_OW 113
19896: GO 19910
// SetTag ( i , 301 ) ;
19898: LD_VAR 0 1
19902: PPUSH
19903: LD_INT 301
19905: PPUSH
19906: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
19910: LD_VAR 0 1
19914: PPUSH
19915: CALL_OW 110
19919: PUSH
19920: LD_INT 301
19922: EQUAL
19923: IFFALSE 20065
// begin if GetLives ( i ) < 1000 then
19925: LD_VAR 0 1
19929: PPUSH
19930: CALL_OW 256
19934: PUSH
19935: LD_INT 1000
19937: LESS
19938: IFFALSE 20042
// begin if not IsDrivenBy ( i ) then
19940: LD_VAR 0 1
19944: PPUSH
19945: CALL_OW 311
19949: NOT
19950: IFFALSE 19954
// continue ;
19952: GO 19728
// mech := IsDrivenBy ( i ) ;
19954: LD_ADDR_VAR 0 2
19958: PUSH
19959: LD_VAR 0 1
19963: PPUSH
19964: CALL_OW 311
19968: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
19969: LD_VAR 0 2
19973: PPUSH
19974: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
19978: LD_VAR 0 2
19982: PPUSH
19983: LD_VAR 0 1
19987: PPUSH
19988: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
19992: LD_INT 35
19994: PPUSH
19995: CALL_OW 67
// until GetLives ( i ) = 1000 ;
19999: LD_VAR 0 1
20003: PPUSH
20004: CALL_OW 256
20008: PUSH
20009: LD_INT 1000
20011: EQUAL
20012: IFFALSE 19992
// SetLives ( mech , 1000 ) ;
20014: LD_VAR 0 2
20018: PPUSH
20019: LD_INT 1000
20021: PPUSH
20022: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
20026: LD_VAR 0 2
20030: PPUSH
20031: LD_VAR 0 1
20035: PPUSH
20036: CALL_OW 120
// end else
20040: GO 20065
// if IsDrivenBy ( i ) then
20042: LD_VAR 0 1
20046: PPUSH
20047: CALL_OW 311
20051: IFFALSE 20065
// SetTag ( i , 0 ) ;
20053: LD_VAR 0 1
20057: PPUSH
20058: LD_INT 0
20060: PPUSH
20061: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
20065: LD_VAR 0 1
20069: PPUSH
20070: CALL_OW 110
20074: PUSH
20075: LD_INT 300
20077: LESS
20078: IFFALSE 20273
// begin enemy := FilterUnitsInArea ( amBaseArea , [ f_enemy , botSides [ 1 ] ] ) ;
20080: LD_ADDR_VAR 0 3
20084: PUSH
20085: LD_INT 3
20087: PPUSH
20088: LD_INT 81
20090: PUSH
20091: LD_EXP 3
20095: PUSH
20096: LD_INT 1
20098: ARRAY
20099: PUSH
20100: EMPTY
20101: LIST
20102: LIST
20103: PPUSH
20104: CALL_OW 70
20108: ST_TO_ADDR
// if GetLives ( i ) < 650 then
20109: LD_VAR 0 1
20113: PPUSH
20114: CALL_OW 256
20118: PUSH
20119: LD_INT 650
20121: LESS
20122: IFFALSE 20147
// begin ComStop ( i ) ;
20124: LD_VAR 0 1
20128: PPUSH
20129: CALL_OW 141
// SetTag ( i , 300 ) ;
20133: LD_VAR 0 1
20137: PPUSH
20138: LD_INT 300
20140: PPUSH
20141: CALL_OW 109
// continue ;
20145: GO 19728
// end ; if enemy then
20147: LD_VAR 0 3
20151: IFFALSE 20191
// begin if not HasTask ( i ) then
20153: LD_VAR 0 1
20157: PPUSH
20158: CALL_OW 314
20162: NOT
20163: IFFALSE 20189
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
20165: LD_VAR 0 1
20169: PPUSH
20170: LD_VAR 0 3
20174: PPUSH
20175: LD_VAR 0 1
20179: PPUSH
20180: CALL_OW 74
20184: PPUSH
20185: CALL_OW 115
// end else
20189: GO 20273
// if amVehiclesAtttackers then
20191: LD_EXP 36
20195: IFFALSE 20273
// begin enemy := FilterAllUnits ( [ f_enemy , botSides [ 1 ] ] ) ;
20197: LD_ADDR_VAR 0 3
20201: PUSH
20202: LD_INT 81
20204: PUSH
20205: LD_EXP 3
20209: PUSH
20210: LD_INT 1
20212: ARRAY
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: PPUSH
20218: CALL_OW 69
20222: ST_TO_ADDR
// if enemy then
20223: LD_VAR 0 3
20227: IFFALSE 20273
// AgressiveMove ( i , [ [ 49 , 43 ] , [ 63 , 56 ] , [ 72 , 67 ] ] ) ;
20229: LD_VAR 0 1
20233: PPUSH
20234: LD_INT 49
20236: PUSH
20237: LD_INT 43
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PUSH
20244: LD_INT 63
20246: PUSH
20247: LD_INT 56
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: PUSH
20254: LD_INT 72
20256: PUSH
20257: LD_INT 67
20259: PUSH
20260: EMPTY
20261: LIST
20262: LIST
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: LIST
20268: PPUSH
20269: CALL 82022 0 2
// end ; end ; end ;
20273: GO 19728
20275: POP
20276: POP
// end ;
20277: PPOPN 3
20279: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
20280: LD_INT 22
20282: PUSH
20283: LD_EXP 3
20287: PUSH
20288: LD_INT 1
20290: ARRAY
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 32
20298: PUSH
20299: LD_INT 1
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: PPUSH
20310: CALL_OW 69
20314: IFFALSE 20397
20316: GO 20318
20318: DISABLE
20319: LD_INT 0
20321: PPUSH
// begin enable ;
20322: ENABLE
// for i in FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do
20323: LD_ADDR_VAR 0 1
20327: PUSH
20328: LD_INT 22
20330: PUSH
20331: LD_EXP 3
20335: PUSH
20336: LD_INT 1
20338: ARRAY
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PUSH
20344: LD_INT 32
20346: PUSH
20347: LD_INT 1
20349: PUSH
20350: EMPTY
20351: LIST
20352: LIST
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PPUSH
20358: CALL_OW 69
20362: PUSH
20363: FOR_IN
20364: IFFALSE 20395
// if GetFuel ( i ) < 3 then
20366: LD_VAR 0 1
20370: PPUSH
20371: CALL_OW 261
20375: PUSH
20376: LD_INT 3
20378: LESS
20379: IFFALSE 20393
// SetFuel ( i , 3 ) ;
20381: LD_VAR 0 1
20385: PPUSH
20386: LD_INT 3
20388: PPUSH
20389: CALL_OW 240
20393: GO 20363
20395: POP
20396: POP
// end ; end_of_file
20397: PPOPN 1
20399: END
// every 0 0$20 trigger game do
20400: LD_EXP 2
20404: IFFALSE 20453
20406: GO 20408
20408: DISABLE
// SpawnCrates ( [ cratesWestArea , cratesEastArea , cratesMiddleArea , amBaseArea , arBaseArea ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
20409: LD_INT 20
20411: PUSH
20412: LD_INT 22
20414: PUSH
20415: LD_INT 21
20417: PUSH
20418: LD_INT 3
20420: PUSH
20421: LD_INT 5
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: PPUSH
20431: LD_EXP 20
20435: PUSH
20436: LD_INT 2
20438: ARRAY
20439: PPUSH
20440: LD_EXP 20
20444: PUSH
20445: LD_INT 1
20447: ARRAY
20448: PPUSH
20449: CALL 20454 0 3
20453: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x , playersAreas ; begin
20454: LD_INT 0
20456: PPUSH
20457: PPUSH
20458: PPUSH
20459: PPUSH
// if not areas then
20460: LD_VAR 0 1
20464: NOT
20465: IFFALSE 20469
// exit ;
20467: GO 20846
// playersAreas := [ cratesPlayerWestArea , cratesPlayerMiddleArea , cratesPlayerEastArea ] ;
20469: LD_ADDR_VAR 0 7
20473: PUSH
20474: LD_INT 17
20476: PUSH
20477: LD_INT 18
20479: PUSH
20480: LD_INT 19
20482: PUSH
20483: EMPTY
20484: LIST
20485: LIST
20486: LIST
20487: ST_TO_ADDR
// x := 5 ;
20488: LD_ADDR_VAR 0 6
20492: PUSH
20493: LD_INT 5
20495: ST_TO_ADDR
// repeat wait ( time ) ;
20496: LD_VAR 0 2
20500: PPUSH
20501: CALL_OW 67
// if tick < [ 18 18$00 , 15 15$00 , 12 12$00 ] [ Difficulty ] then
20505: LD_OWVAR 1
20509: PUSH
20510: LD_INT 37800
20512: PUSH
20513: LD_INT 31500
20515: PUSH
20516: LD_INT 25200
20518: PUSH
20519: EMPTY
20520: LIST
20521: LIST
20522: LIST
20523: PUSH
20524: LD_OWVAR 67
20528: ARRAY
20529: LESS
20530: IFFALSE 20669
// begin for i := 1 to multi_sides do
20532: LD_ADDR_VAR 0 5
20536: PUSH
20537: DOUBLE
20538: LD_INT 1
20540: DEC
20541: ST_TO_ADDR
20542: LD_EXP 6
20546: PUSH
20547: FOR_TO
20548: IFFALSE 20660
// if multi_sides [ i ] then
20550: LD_EXP 6
20554: PUSH
20555: LD_VAR 0 5
20559: ARRAY
20560: IFFALSE 20658
// begin if GetResourceArea ( playersAreas [ multi_sides [ i ] ] , mat_cans ) < [ 32 , 25 , 23 ] [ Difficulty ] then
20562: LD_VAR 0 7
20566: PUSH
20567: LD_EXP 6
20571: PUSH
20572: LD_VAR 0 5
20576: ARRAY
20577: ARRAY
20578: PPUSH
20579: LD_INT 1
20581: PPUSH
20582: CALL_OW 287
20586: PUSH
20587: LD_INT 32
20589: PUSH
20590: LD_INT 25
20592: PUSH
20593: LD_INT 23
20595: PUSH
20596: EMPTY
20597: LIST
20598: LIST
20599: LIST
20600: PUSH
20601: LD_OWVAR 67
20605: ARRAY
20606: LESS
20607: IFFALSE 20658
// begin amount := amount - ( x * 10 ) ;
20609: LD_ADDR_VAR 0 3
20613: PUSH
20614: LD_VAR 0 3
20618: PUSH
20619: LD_VAR 0 6
20623: PUSH
20624: LD_INT 10
20626: MUL
20627: MINUS
20628: ST_TO_ADDR
// CreateCratesArea ( x , playersAreas [ multi_sides [ i ] ] , true ) ;
20629: LD_VAR 0 6
20633: PPUSH
20634: LD_VAR 0 7
20638: PUSH
20639: LD_EXP 6
20643: PUSH
20644: LD_VAR 0 5
20648: ARRAY
20649: ARRAY
20650: PPUSH
20651: LD_INT 1
20653: PPUSH
20654: CALL_OW 55
// end ; end ;
20658: GO 20547
20660: POP
20661: POP
// wait ( 0 0$2 ) ;
20662: LD_INT 70
20664: PPUSH
20665: CALL_OW 67
// end ; for i in areas do
20669: LD_ADDR_VAR 0 5
20673: PUSH
20674: LD_VAR 0 1
20678: PUSH
20679: FOR_IN
20680: IFFALSE 20763
// begin if GetResourceArea ( i , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
20682: LD_VAR 0 5
20686: PPUSH
20687: LD_INT 1
20689: PPUSH
20690: CALL_OW 287
20694: PUSH
20695: LD_INT 25
20697: PUSH
20698: LD_INT 22
20700: PUSH
20701: LD_INT 20
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: LIST
20708: PUSH
20709: LD_OWVAR 67
20713: ARRAY
20714: LESS
20715: IFFALSE 20761
// begin wait ( 0 0$5 ) ;
20717: LD_INT 175
20719: PPUSH
20720: CALL_OW 67
// CreateCratesArea ( x , i , true ) ;
20724: LD_VAR 0 6
20728: PPUSH
20729: LD_VAR 0 5
20733: PPUSH
20734: LD_INT 1
20736: PPUSH
20737: CALL_OW 55
// amount := amount - ( x * 10 ) ;
20741: LD_ADDR_VAR 0 3
20745: PUSH
20746: LD_VAR 0 3
20750: PUSH
20751: LD_VAR 0 6
20755: PUSH
20756: LD_INT 10
20758: MUL
20759: MINUS
20760: ST_TO_ADDR
// end ; end ;
20761: GO 20679
20763: POP
20764: POP
// time := time + 0 0$2 ;
20765: LD_ADDR_VAR 0 2
20769: PUSH
20770: LD_VAR 0 2
20774: PUSH
20775: LD_INT 70
20777: PLUS
20778: ST_TO_ADDR
// x := x - 1 ;
20779: LD_ADDR_VAR 0 6
20783: PUSH
20784: LD_VAR 0 6
20788: PUSH
20789: LD_INT 1
20791: MINUS
20792: ST_TO_ADDR
// if x = 0 then
20793: LD_VAR 0 6
20797: PUSH
20798: LD_INT 0
20800: EQUAL
20801: IFFALSE 20811
// x := 5 ;
20803: LD_ADDR_VAR 0 6
20807: PUSH
20808: LD_INT 5
20810: ST_TO_ADDR
// if time > 2 2$00 then
20811: LD_VAR 0 2
20815: PUSH
20816: LD_INT 4200
20818: GREATER
20819: IFFALSE 20829
// time := 0 0$30 ;
20821: LD_ADDR_VAR 0 2
20825: PUSH
20826: LD_INT 1050
20828: ST_TO_ADDR
// until not game or amount <= 0 ;
20829: LD_EXP 2
20833: NOT
20834: PUSH
20835: LD_VAR 0 3
20839: PUSH
20840: LD_INT 0
20842: LESSEQUAL
20843: OR
20844: IFFALSE 20496
// end ; end_of_file
20846: LD_VAR 0 4
20850: RET
// export globalGameSaveCounter ; every 0 0$1 do
20851: GO 20853
20853: DISABLE
// begin enable ;
20854: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
20855: LD_STRING updateTimer(
20857: PUSH
20858: LD_OWVAR 1
20862: STR
20863: PUSH
20864: LD_STRING );
20866: STR
20867: PPUSH
20868: CALL_OW 559
// end ;
20872: END
// every 0 0$1 do
20873: GO 20875
20875: DISABLE
// begin globalGameSaveCounter := 0 ;
20876: LD_ADDR_EXP 57
20880: PUSH
20881: LD_INT 0
20883: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
20884: LD_STRING setGameSaveCounter(0)
20886: PPUSH
20887: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
20891: LD_STRING initStreamRollete();
20893: PPUSH
20894: CALL_OW 559
// InitStreamMode ;
20898: CALL 22241 0 0
// DefineStreamItems ( false ) ;
20902: LD_INT 0
20904: PPUSH
20905: CALL 22705 0 1
// end ;
20909: END
// export function SOS_MapStart ( ) ; begin
20910: LD_INT 0
20912: PPUSH
// if streamModeActive then
20913: LD_EXP 58
20917: IFFALSE 20926
// DefineStreamItems ( true ) ;
20919: LD_INT 1
20921: PPUSH
20922: CALL 22705 0 1
// UpdateLuaVariables ( ) ;
20926: CALL 20943 0 0
// UpdateFactoryWaypoints ( ) ;
20930: CALL 35574 0 0
// UpdateWarehouseGatheringPoints ( ) ;
20934: CALL 35831 0 0
// end ;
20938: LD_VAR 0 1
20942: RET
// function UpdateLuaVariables ( ) ; begin
20943: LD_INT 0
20945: PPUSH
// if globalGameSaveCounter then
20946: LD_EXP 57
20950: IFFALSE 20984
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
20952: LD_ADDR_EXP 57
20956: PUSH
20957: LD_EXP 57
20961: PPUSH
20962: CALL 80779 0 1
20966: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20967: LD_STRING setGameSaveCounter(
20969: PUSH
20970: LD_EXP 57
20974: STR
20975: PUSH
20976: LD_STRING )
20978: STR
20979: PPUSH
20980: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
20984: LD_STRING setGameDifficulty(
20986: PUSH
20987: LD_OWVAR 67
20991: STR
20992: PUSH
20993: LD_STRING )
20995: STR
20996: PPUSH
20997: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
21001: LD_STRING displayDifficulty(
21003: PUSH
21004: LD_OWVAR 67
21008: STR
21009: PUSH
21010: LD_STRING )
21012: STR
21013: PPUSH
21014: CALL_OW 559
// end ;
21018: LD_VAR 0 1
21022: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21023: LD_INT 0
21025: PPUSH
// if p2 = stream_mode then
21026: LD_VAR 0 2
21030: PUSH
21031: LD_INT 100
21033: EQUAL
21034: IFFALSE 22037
// begin if not StreamModeActive then
21036: LD_EXP 58
21040: NOT
21041: IFFALSE 21051
// StreamModeActive := true ;
21043: LD_ADDR_EXP 58
21047: PUSH
21048: LD_INT 1
21050: ST_TO_ADDR
// if p3 = 0 then
21051: LD_VAR 0 3
21055: PUSH
21056: LD_INT 0
21058: EQUAL
21059: IFFALSE 21065
// InitStreamMode ;
21061: CALL 22241 0 0
// if p3 = 1 then
21065: LD_VAR 0 3
21069: PUSH
21070: LD_INT 1
21072: EQUAL
21073: IFFALSE 21083
// sRocket := true ;
21075: LD_ADDR_EXP 63
21079: PUSH
21080: LD_INT 1
21082: ST_TO_ADDR
// if p3 = 2 then
21083: LD_VAR 0 3
21087: PUSH
21088: LD_INT 2
21090: EQUAL
21091: IFFALSE 21101
// sSpeed := true ;
21093: LD_ADDR_EXP 62
21097: PUSH
21098: LD_INT 1
21100: ST_TO_ADDR
// if p3 = 3 then
21101: LD_VAR 0 3
21105: PUSH
21106: LD_INT 3
21108: EQUAL
21109: IFFALSE 21119
// sEngine := true ;
21111: LD_ADDR_EXP 64
21115: PUSH
21116: LD_INT 1
21118: ST_TO_ADDR
// if p3 = 4 then
21119: LD_VAR 0 3
21123: PUSH
21124: LD_INT 4
21126: EQUAL
21127: IFFALSE 21137
// sSpec := true ;
21129: LD_ADDR_EXP 61
21133: PUSH
21134: LD_INT 1
21136: ST_TO_ADDR
// if p3 = 5 then
21137: LD_VAR 0 3
21141: PUSH
21142: LD_INT 5
21144: EQUAL
21145: IFFALSE 21155
// sLevel := true ;
21147: LD_ADDR_EXP 65
21151: PUSH
21152: LD_INT 1
21154: ST_TO_ADDR
// if p3 = 6 then
21155: LD_VAR 0 3
21159: PUSH
21160: LD_INT 6
21162: EQUAL
21163: IFFALSE 21173
// sArmoury := true ;
21165: LD_ADDR_EXP 66
21169: PUSH
21170: LD_INT 1
21172: ST_TO_ADDR
// if p3 = 7 then
21173: LD_VAR 0 3
21177: PUSH
21178: LD_INT 7
21180: EQUAL
21181: IFFALSE 21191
// sRadar := true ;
21183: LD_ADDR_EXP 67
21187: PUSH
21188: LD_INT 1
21190: ST_TO_ADDR
// if p3 = 8 then
21191: LD_VAR 0 3
21195: PUSH
21196: LD_INT 8
21198: EQUAL
21199: IFFALSE 21209
// sBunker := true ;
21201: LD_ADDR_EXP 68
21205: PUSH
21206: LD_INT 1
21208: ST_TO_ADDR
// if p3 = 9 then
21209: LD_VAR 0 3
21213: PUSH
21214: LD_INT 9
21216: EQUAL
21217: IFFALSE 21227
// sHack := true ;
21219: LD_ADDR_EXP 69
21223: PUSH
21224: LD_INT 1
21226: ST_TO_ADDR
// if p3 = 10 then
21227: LD_VAR 0 3
21231: PUSH
21232: LD_INT 10
21234: EQUAL
21235: IFFALSE 21245
// sFire := true ;
21237: LD_ADDR_EXP 70
21241: PUSH
21242: LD_INT 1
21244: ST_TO_ADDR
// if p3 = 11 then
21245: LD_VAR 0 3
21249: PUSH
21250: LD_INT 11
21252: EQUAL
21253: IFFALSE 21263
// sRefresh := true ;
21255: LD_ADDR_EXP 71
21259: PUSH
21260: LD_INT 1
21262: ST_TO_ADDR
// if p3 = 12 then
21263: LD_VAR 0 3
21267: PUSH
21268: LD_INT 12
21270: EQUAL
21271: IFFALSE 21281
// sExp := true ;
21273: LD_ADDR_EXP 72
21277: PUSH
21278: LD_INT 1
21280: ST_TO_ADDR
// if p3 = 13 then
21281: LD_VAR 0 3
21285: PUSH
21286: LD_INT 13
21288: EQUAL
21289: IFFALSE 21299
// sDepot := true ;
21291: LD_ADDR_EXP 73
21295: PUSH
21296: LD_INT 1
21298: ST_TO_ADDR
// if p3 = 14 then
21299: LD_VAR 0 3
21303: PUSH
21304: LD_INT 14
21306: EQUAL
21307: IFFALSE 21317
// sFlag := true ;
21309: LD_ADDR_EXP 74
21313: PUSH
21314: LD_INT 1
21316: ST_TO_ADDR
// if p3 = 15 then
21317: LD_VAR 0 3
21321: PUSH
21322: LD_INT 15
21324: EQUAL
21325: IFFALSE 21335
// sKamikadze := true ;
21327: LD_ADDR_EXP 82
21331: PUSH
21332: LD_INT 1
21334: ST_TO_ADDR
// if p3 = 16 then
21335: LD_VAR 0 3
21339: PUSH
21340: LD_INT 16
21342: EQUAL
21343: IFFALSE 21353
// sTroll := true ;
21345: LD_ADDR_EXP 83
21349: PUSH
21350: LD_INT 1
21352: ST_TO_ADDR
// if p3 = 17 then
21353: LD_VAR 0 3
21357: PUSH
21358: LD_INT 17
21360: EQUAL
21361: IFFALSE 21371
// sSlow := true ;
21363: LD_ADDR_EXP 84
21367: PUSH
21368: LD_INT 1
21370: ST_TO_ADDR
// if p3 = 18 then
21371: LD_VAR 0 3
21375: PUSH
21376: LD_INT 18
21378: EQUAL
21379: IFFALSE 21389
// sLack := true ;
21381: LD_ADDR_EXP 85
21385: PUSH
21386: LD_INT 1
21388: ST_TO_ADDR
// if p3 = 19 then
21389: LD_VAR 0 3
21393: PUSH
21394: LD_INT 19
21396: EQUAL
21397: IFFALSE 21407
// sTank := true ;
21399: LD_ADDR_EXP 87
21403: PUSH
21404: LD_INT 1
21406: ST_TO_ADDR
// if p3 = 20 then
21407: LD_VAR 0 3
21411: PUSH
21412: LD_INT 20
21414: EQUAL
21415: IFFALSE 21425
// sRemote := true ;
21417: LD_ADDR_EXP 88
21421: PUSH
21422: LD_INT 1
21424: ST_TO_ADDR
// if p3 = 21 then
21425: LD_VAR 0 3
21429: PUSH
21430: LD_INT 21
21432: EQUAL
21433: IFFALSE 21443
// sPowell := true ;
21435: LD_ADDR_EXP 89
21439: PUSH
21440: LD_INT 1
21442: ST_TO_ADDR
// if p3 = 22 then
21443: LD_VAR 0 3
21447: PUSH
21448: LD_INT 22
21450: EQUAL
21451: IFFALSE 21461
// sTeleport := true ;
21453: LD_ADDR_EXP 92
21457: PUSH
21458: LD_INT 1
21460: ST_TO_ADDR
// if p3 = 23 then
21461: LD_VAR 0 3
21465: PUSH
21466: LD_INT 23
21468: EQUAL
21469: IFFALSE 21479
// sOilTower := true ;
21471: LD_ADDR_EXP 94
21475: PUSH
21476: LD_INT 1
21478: ST_TO_ADDR
// if p3 = 24 then
21479: LD_VAR 0 3
21483: PUSH
21484: LD_INT 24
21486: EQUAL
21487: IFFALSE 21497
// sShovel := true ;
21489: LD_ADDR_EXP 95
21493: PUSH
21494: LD_INT 1
21496: ST_TO_ADDR
// if p3 = 25 then
21497: LD_VAR 0 3
21501: PUSH
21502: LD_INT 25
21504: EQUAL
21505: IFFALSE 21515
// sSheik := true ;
21507: LD_ADDR_EXP 96
21511: PUSH
21512: LD_INT 1
21514: ST_TO_ADDR
// if p3 = 26 then
21515: LD_VAR 0 3
21519: PUSH
21520: LD_INT 26
21522: EQUAL
21523: IFFALSE 21533
// sEarthquake := true ;
21525: LD_ADDR_EXP 98
21529: PUSH
21530: LD_INT 1
21532: ST_TO_ADDR
// if p3 = 27 then
21533: LD_VAR 0 3
21537: PUSH
21538: LD_INT 27
21540: EQUAL
21541: IFFALSE 21551
// sAI := true ;
21543: LD_ADDR_EXP 99
21547: PUSH
21548: LD_INT 1
21550: ST_TO_ADDR
// if p3 = 28 then
21551: LD_VAR 0 3
21555: PUSH
21556: LD_INT 28
21558: EQUAL
21559: IFFALSE 21569
// sCargo := true ;
21561: LD_ADDR_EXP 102
21565: PUSH
21566: LD_INT 1
21568: ST_TO_ADDR
// if p3 = 29 then
21569: LD_VAR 0 3
21573: PUSH
21574: LD_INT 29
21576: EQUAL
21577: IFFALSE 21587
// sDLaser := true ;
21579: LD_ADDR_EXP 103
21583: PUSH
21584: LD_INT 1
21586: ST_TO_ADDR
// if p3 = 30 then
21587: LD_VAR 0 3
21591: PUSH
21592: LD_INT 30
21594: EQUAL
21595: IFFALSE 21605
// sExchange := true ;
21597: LD_ADDR_EXP 104
21601: PUSH
21602: LD_INT 1
21604: ST_TO_ADDR
// if p3 = 31 then
21605: LD_VAR 0 3
21609: PUSH
21610: LD_INT 31
21612: EQUAL
21613: IFFALSE 21623
// sFac := true ;
21615: LD_ADDR_EXP 105
21619: PUSH
21620: LD_INT 1
21622: ST_TO_ADDR
// if p3 = 32 then
21623: LD_VAR 0 3
21627: PUSH
21628: LD_INT 32
21630: EQUAL
21631: IFFALSE 21641
// sPower := true ;
21633: LD_ADDR_EXP 106
21637: PUSH
21638: LD_INT 1
21640: ST_TO_ADDR
// if p3 = 33 then
21641: LD_VAR 0 3
21645: PUSH
21646: LD_INT 33
21648: EQUAL
21649: IFFALSE 21659
// sRandom := true ;
21651: LD_ADDR_EXP 107
21655: PUSH
21656: LD_INT 1
21658: ST_TO_ADDR
// if p3 = 34 then
21659: LD_VAR 0 3
21663: PUSH
21664: LD_INT 34
21666: EQUAL
21667: IFFALSE 21677
// sShield := true ;
21669: LD_ADDR_EXP 108
21673: PUSH
21674: LD_INT 1
21676: ST_TO_ADDR
// if p3 = 35 then
21677: LD_VAR 0 3
21681: PUSH
21682: LD_INT 35
21684: EQUAL
21685: IFFALSE 21695
// sTime := true ;
21687: LD_ADDR_EXP 109
21691: PUSH
21692: LD_INT 1
21694: ST_TO_ADDR
// if p3 = 36 then
21695: LD_VAR 0 3
21699: PUSH
21700: LD_INT 36
21702: EQUAL
21703: IFFALSE 21713
// sTools := true ;
21705: LD_ADDR_EXP 110
21709: PUSH
21710: LD_INT 1
21712: ST_TO_ADDR
// if p3 = 101 then
21713: LD_VAR 0 3
21717: PUSH
21718: LD_INT 101
21720: EQUAL
21721: IFFALSE 21731
// sSold := true ;
21723: LD_ADDR_EXP 75
21727: PUSH
21728: LD_INT 1
21730: ST_TO_ADDR
// if p3 = 102 then
21731: LD_VAR 0 3
21735: PUSH
21736: LD_INT 102
21738: EQUAL
21739: IFFALSE 21749
// sDiff := true ;
21741: LD_ADDR_EXP 76
21745: PUSH
21746: LD_INT 1
21748: ST_TO_ADDR
// if p3 = 103 then
21749: LD_VAR 0 3
21753: PUSH
21754: LD_INT 103
21756: EQUAL
21757: IFFALSE 21767
// sFog := true ;
21759: LD_ADDR_EXP 79
21763: PUSH
21764: LD_INT 1
21766: ST_TO_ADDR
// if p3 = 104 then
21767: LD_VAR 0 3
21771: PUSH
21772: LD_INT 104
21774: EQUAL
21775: IFFALSE 21785
// sReset := true ;
21777: LD_ADDR_EXP 80
21781: PUSH
21782: LD_INT 1
21784: ST_TO_ADDR
// if p3 = 105 then
21785: LD_VAR 0 3
21789: PUSH
21790: LD_INT 105
21792: EQUAL
21793: IFFALSE 21803
// sSun := true ;
21795: LD_ADDR_EXP 81
21799: PUSH
21800: LD_INT 1
21802: ST_TO_ADDR
// if p3 = 106 then
21803: LD_VAR 0 3
21807: PUSH
21808: LD_INT 106
21810: EQUAL
21811: IFFALSE 21821
// sTiger := true ;
21813: LD_ADDR_EXP 77
21817: PUSH
21818: LD_INT 1
21820: ST_TO_ADDR
// if p3 = 107 then
21821: LD_VAR 0 3
21825: PUSH
21826: LD_INT 107
21828: EQUAL
21829: IFFALSE 21839
// sBomb := true ;
21831: LD_ADDR_EXP 78
21835: PUSH
21836: LD_INT 1
21838: ST_TO_ADDR
// if p3 = 108 then
21839: LD_VAR 0 3
21843: PUSH
21844: LD_INT 108
21846: EQUAL
21847: IFFALSE 21857
// sWound := true ;
21849: LD_ADDR_EXP 86
21853: PUSH
21854: LD_INT 1
21856: ST_TO_ADDR
// if p3 = 109 then
21857: LD_VAR 0 3
21861: PUSH
21862: LD_INT 109
21864: EQUAL
21865: IFFALSE 21875
// sBetray := true ;
21867: LD_ADDR_EXP 90
21871: PUSH
21872: LD_INT 1
21874: ST_TO_ADDR
// if p3 = 110 then
21875: LD_VAR 0 3
21879: PUSH
21880: LD_INT 110
21882: EQUAL
21883: IFFALSE 21893
// sContamin := true ;
21885: LD_ADDR_EXP 91
21889: PUSH
21890: LD_INT 1
21892: ST_TO_ADDR
// if p3 = 111 then
21893: LD_VAR 0 3
21897: PUSH
21898: LD_INT 111
21900: EQUAL
21901: IFFALSE 21911
// sOil := true ;
21903: LD_ADDR_EXP 93
21907: PUSH
21908: LD_INT 1
21910: ST_TO_ADDR
// if p3 = 112 then
21911: LD_VAR 0 3
21915: PUSH
21916: LD_INT 112
21918: EQUAL
21919: IFFALSE 21929
// sStu := true ;
21921: LD_ADDR_EXP 97
21925: PUSH
21926: LD_INT 1
21928: ST_TO_ADDR
// if p3 = 113 then
21929: LD_VAR 0 3
21933: PUSH
21934: LD_INT 113
21936: EQUAL
21937: IFFALSE 21947
// sBazooka := true ;
21939: LD_ADDR_EXP 100
21943: PUSH
21944: LD_INT 1
21946: ST_TO_ADDR
// if p3 = 114 then
21947: LD_VAR 0 3
21951: PUSH
21952: LD_INT 114
21954: EQUAL
21955: IFFALSE 21965
// sMortar := true ;
21957: LD_ADDR_EXP 101
21961: PUSH
21962: LD_INT 1
21964: ST_TO_ADDR
// if p3 = 115 then
21965: LD_VAR 0 3
21969: PUSH
21970: LD_INT 115
21972: EQUAL
21973: IFFALSE 21983
// sRanger := true ;
21975: LD_ADDR_EXP 111
21979: PUSH
21980: LD_INT 1
21982: ST_TO_ADDR
// if p3 = 116 then
21983: LD_VAR 0 3
21987: PUSH
21988: LD_INT 116
21990: EQUAL
21991: IFFALSE 22001
// sComputer := true ;
21993: LD_ADDR_EXP 112
21997: PUSH
21998: LD_INT 1
22000: ST_TO_ADDR
// if p3 = 117 then
22001: LD_VAR 0 3
22005: PUSH
22006: LD_INT 117
22008: EQUAL
22009: IFFALSE 22019
// s30 := true ;
22011: LD_ADDR_EXP 113
22015: PUSH
22016: LD_INT 1
22018: ST_TO_ADDR
// if p3 = 118 then
22019: LD_VAR 0 3
22023: PUSH
22024: LD_INT 118
22026: EQUAL
22027: IFFALSE 22037
// s60 := true ;
22029: LD_ADDR_EXP 114
22033: PUSH
22034: LD_INT 1
22036: ST_TO_ADDR
// end ; if p2 = hack_mode then
22037: LD_VAR 0 2
22041: PUSH
22042: LD_INT 101
22044: EQUAL
22045: IFFALSE 22173
// begin case p3 of 1 :
22047: LD_VAR 0 3
22051: PUSH
22052: LD_INT 1
22054: DOUBLE
22055: EQUAL
22056: IFTRUE 22060
22058: GO 22067
22060: POP
// hHackUnlimitedResources ; 2 :
22061: CALL 34320 0 0
22065: GO 22173
22067: LD_INT 2
22069: DOUBLE
22070: EQUAL
22071: IFTRUE 22075
22073: GO 22082
22075: POP
// hHackSetLevel10 ; 3 :
22076: CALL 34453 0 0
22080: GO 22173
22082: LD_INT 3
22084: DOUBLE
22085: EQUAL
22086: IFTRUE 22090
22088: GO 22097
22090: POP
// hHackSetLevel10YourUnits ; 4 :
22091: CALL 34538 0 0
22095: GO 22173
22097: LD_INT 4
22099: DOUBLE
22100: EQUAL
22101: IFTRUE 22105
22103: GO 22112
22105: POP
// hHackInvincible ; 5 :
22106: CALL 34986 0 0
22110: GO 22173
22112: LD_INT 5
22114: DOUBLE
22115: EQUAL
22116: IFTRUE 22120
22118: GO 22127
22120: POP
// hHackInvisible ; 6 :
22121: CALL 35097 0 0
22125: GO 22173
22127: LD_INT 6
22129: DOUBLE
22130: EQUAL
22131: IFTRUE 22135
22133: GO 22142
22135: POP
// hHackChangeYourSide ; 7 :
22136: CALL 35154 0 0
22140: GO 22173
22142: LD_INT 7
22144: DOUBLE
22145: EQUAL
22146: IFTRUE 22150
22148: GO 22157
22150: POP
// hHackChangeUnitSide ; 8 :
22151: CALL 35196 0 0
22155: GO 22173
22157: LD_INT 8
22159: DOUBLE
22160: EQUAL
22161: IFTRUE 22165
22163: GO 22172
22165: POP
// hHackFog ; end ;
22166: CALL 35297 0 0
22170: GO 22173
22172: POP
// end ; if p2 = game_save_mode then
22173: LD_VAR 0 2
22177: PUSH
22178: LD_INT 102
22180: EQUAL
22181: IFFALSE 22236
// begin if p3 = 1 then
22183: LD_VAR 0 3
22187: PUSH
22188: LD_INT 1
22190: EQUAL
22191: IFFALSE 22203
// globalGameSaveCounter := p4 ;
22193: LD_ADDR_EXP 57
22197: PUSH
22198: LD_VAR 0 4
22202: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
22203: LD_VAR 0 3
22207: PUSH
22208: LD_INT 2
22210: EQUAL
22211: PUSH
22212: LD_EXP 57
22216: AND
22217: IFFALSE 22236
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
22219: LD_STRING setGameSaveCounter(
22221: PUSH
22222: LD_EXP 57
22226: STR
22227: PUSH
22228: LD_STRING )
22230: STR
22231: PPUSH
22232: CALL_OW 559
// end ; end ;
22236: LD_VAR 0 7
22240: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
22241: LD_INT 0
22243: PPUSH
// streamModeActive := false ;
22244: LD_ADDR_EXP 58
22248: PUSH
22249: LD_INT 0
22251: ST_TO_ADDR
// normalCounter := 36 ;
22252: LD_ADDR_EXP 59
22256: PUSH
22257: LD_INT 36
22259: ST_TO_ADDR
// hardcoreCounter := 18 ;
22260: LD_ADDR_EXP 60
22264: PUSH
22265: LD_INT 18
22267: ST_TO_ADDR
// sRocket := false ;
22268: LD_ADDR_EXP 63
22272: PUSH
22273: LD_INT 0
22275: ST_TO_ADDR
// sSpeed := false ;
22276: LD_ADDR_EXP 62
22280: PUSH
22281: LD_INT 0
22283: ST_TO_ADDR
// sEngine := false ;
22284: LD_ADDR_EXP 64
22288: PUSH
22289: LD_INT 0
22291: ST_TO_ADDR
// sSpec := false ;
22292: LD_ADDR_EXP 61
22296: PUSH
22297: LD_INT 0
22299: ST_TO_ADDR
// sLevel := false ;
22300: LD_ADDR_EXP 65
22304: PUSH
22305: LD_INT 0
22307: ST_TO_ADDR
// sArmoury := false ;
22308: LD_ADDR_EXP 66
22312: PUSH
22313: LD_INT 0
22315: ST_TO_ADDR
// sRadar := false ;
22316: LD_ADDR_EXP 67
22320: PUSH
22321: LD_INT 0
22323: ST_TO_ADDR
// sBunker := false ;
22324: LD_ADDR_EXP 68
22328: PUSH
22329: LD_INT 0
22331: ST_TO_ADDR
// sHack := false ;
22332: LD_ADDR_EXP 69
22336: PUSH
22337: LD_INT 0
22339: ST_TO_ADDR
// sFire := false ;
22340: LD_ADDR_EXP 70
22344: PUSH
22345: LD_INT 0
22347: ST_TO_ADDR
// sRefresh := false ;
22348: LD_ADDR_EXP 71
22352: PUSH
22353: LD_INT 0
22355: ST_TO_ADDR
// sExp := false ;
22356: LD_ADDR_EXP 72
22360: PUSH
22361: LD_INT 0
22363: ST_TO_ADDR
// sDepot := false ;
22364: LD_ADDR_EXP 73
22368: PUSH
22369: LD_INT 0
22371: ST_TO_ADDR
// sFlag := false ;
22372: LD_ADDR_EXP 74
22376: PUSH
22377: LD_INT 0
22379: ST_TO_ADDR
// sKamikadze := false ;
22380: LD_ADDR_EXP 82
22384: PUSH
22385: LD_INT 0
22387: ST_TO_ADDR
// sTroll := false ;
22388: LD_ADDR_EXP 83
22392: PUSH
22393: LD_INT 0
22395: ST_TO_ADDR
// sSlow := false ;
22396: LD_ADDR_EXP 84
22400: PUSH
22401: LD_INT 0
22403: ST_TO_ADDR
// sLack := false ;
22404: LD_ADDR_EXP 85
22408: PUSH
22409: LD_INT 0
22411: ST_TO_ADDR
// sTank := false ;
22412: LD_ADDR_EXP 87
22416: PUSH
22417: LD_INT 0
22419: ST_TO_ADDR
// sRemote := false ;
22420: LD_ADDR_EXP 88
22424: PUSH
22425: LD_INT 0
22427: ST_TO_ADDR
// sPowell := false ;
22428: LD_ADDR_EXP 89
22432: PUSH
22433: LD_INT 0
22435: ST_TO_ADDR
// sTeleport := false ;
22436: LD_ADDR_EXP 92
22440: PUSH
22441: LD_INT 0
22443: ST_TO_ADDR
// sOilTower := false ;
22444: LD_ADDR_EXP 94
22448: PUSH
22449: LD_INT 0
22451: ST_TO_ADDR
// sShovel := false ;
22452: LD_ADDR_EXP 95
22456: PUSH
22457: LD_INT 0
22459: ST_TO_ADDR
// sSheik := false ;
22460: LD_ADDR_EXP 96
22464: PUSH
22465: LD_INT 0
22467: ST_TO_ADDR
// sEarthquake := false ;
22468: LD_ADDR_EXP 98
22472: PUSH
22473: LD_INT 0
22475: ST_TO_ADDR
// sAI := false ;
22476: LD_ADDR_EXP 99
22480: PUSH
22481: LD_INT 0
22483: ST_TO_ADDR
// sCargo := false ;
22484: LD_ADDR_EXP 102
22488: PUSH
22489: LD_INT 0
22491: ST_TO_ADDR
// sDLaser := false ;
22492: LD_ADDR_EXP 103
22496: PUSH
22497: LD_INT 0
22499: ST_TO_ADDR
// sExchange := false ;
22500: LD_ADDR_EXP 104
22504: PUSH
22505: LD_INT 0
22507: ST_TO_ADDR
// sFac := false ;
22508: LD_ADDR_EXP 105
22512: PUSH
22513: LD_INT 0
22515: ST_TO_ADDR
// sPower := false ;
22516: LD_ADDR_EXP 106
22520: PUSH
22521: LD_INT 0
22523: ST_TO_ADDR
// sRandom := false ;
22524: LD_ADDR_EXP 107
22528: PUSH
22529: LD_INT 0
22531: ST_TO_ADDR
// sShield := false ;
22532: LD_ADDR_EXP 108
22536: PUSH
22537: LD_INT 0
22539: ST_TO_ADDR
// sTime := false ;
22540: LD_ADDR_EXP 109
22544: PUSH
22545: LD_INT 0
22547: ST_TO_ADDR
// sTools := false ;
22548: LD_ADDR_EXP 110
22552: PUSH
22553: LD_INT 0
22555: ST_TO_ADDR
// sSold := false ;
22556: LD_ADDR_EXP 75
22560: PUSH
22561: LD_INT 0
22563: ST_TO_ADDR
// sDiff := false ;
22564: LD_ADDR_EXP 76
22568: PUSH
22569: LD_INT 0
22571: ST_TO_ADDR
// sFog := false ;
22572: LD_ADDR_EXP 79
22576: PUSH
22577: LD_INT 0
22579: ST_TO_ADDR
// sReset := false ;
22580: LD_ADDR_EXP 80
22584: PUSH
22585: LD_INT 0
22587: ST_TO_ADDR
// sSun := false ;
22588: LD_ADDR_EXP 81
22592: PUSH
22593: LD_INT 0
22595: ST_TO_ADDR
// sTiger := false ;
22596: LD_ADDR_EXP 77
22600: PUSH
22601: LD_INT 0
22603: ST_TO_ADDR
// sBomb := false ;
22604: LD_ADDR_EXP 78
22608: PUSH
22609: LD_INT 0
22611: ST_TO_ADDR
// sWound := false ;
22612: LD_ADDR_EXP 86
22616: PUSH
22617: LD_INT 0
22619: ST_TO_ADDR
// sBetray := false ;
22620: LD_ADDR_EXP 90
22624: PUSH
22625: LD_INT 0
22627: ST_TO_ADDR
// sContamin := false ;
22628: LD_ADDR_EXP 91
22632: PUSH
22633: LD_INT 0
22635: ST_TO_ADDR
// sOil := false ;
22636: LD_ADDR_EXP 93
22640: PUSH
22641: LD_INT 0
22643: ST_TO_ADDR
// sStu := false ;
22644: LD_ADDR_EXP 97
22648: PUSH
22649: LD_INT 0
22651: ST_TO_ADDR
// sBazooka := false ;
22652: LD_ADDR_EXP 100
22656: PUSH
22657: LD_INT 0
22659: ST_TO_ADDR
// sMortar := false ;
22660: LD_ADDR_EXP 101
22664: PUSH
22665: LD_INT 0
22667: ST_TO_ADDR
// sRanger := false ;
22668: LD_ADDR_EXP 111
22672: PUSH
22673: LD_INT 0
22675: ST_TO_ADDR
// sComputer := false ;
22676: LD_ADDR_EXP 112
22680: PUSH
22681: LD_INT 0
22683: ST_TO_ADDR
// s30 := false ;
22684: LD_ADDR_EXP 113
22688: PUSH
22689: LD_INT 0
22691: ST_TO_ADDR
// s60 := false ;
22692: LD_ADDR_EXP 114
22696: PUSH
22697: LD_INT 0
22699: ST_TO_ADDR
// end ;
22700: LD_VAR 0 1
22704: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
22705: LD_INT 0
22707: PPUSH
22708: PPUSH
22709: PPUSH
22710: PPUSH
22711: PPUSH
22712: PPUSH
22713: PPUSH
// result := [ ] ;
22714: LD_ADDR_VAR 0 2
22718: PUSH
22719: EMPTY
22720: ST_TO_ADDR
// if campaign_id = 1 then
22721: LD_OWVAR 69
22725: PUSH
22726: LD_INT 1
22728: EQUAL
22729: IFFALSE 25895
// begin case mission_number of 1 :
22731: LD_OWVAR 70
22735: PUSH
22736: LD_INT 1
22738: DOUBLE
22739: EQUAL
22740: IFTRUE 22744
22742: GO 22820
22744: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
22745: LD_ADDR_VAR 0 2
22749: PUSH
22750: LD_INT 2
22752: PUSH
22753: LD_INT 4
22755: PUSH
22756: LD_INT 11
22758: PUSH
22759: LD_INT 12
22761: PUSH
22762: LD_INT 15
22764: PUSH
22765: LD_INT 16
22767: PUSH
22768: LD_INT 22
22770: PUSH
22771: LD_INT 23
22773: PUSH
22774: LD_INT 26
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: PUSH
22788: LD_INT 101
22790: PUSH
22791: LD_INT 102
22793: PUSH
22794: LD_INT 106
22796: PUSH
22797: LD_INT 116
22799: PUSH
22800: LD_INT 117
22802: PUSH
22803: LD_INT 118
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: ST_TO_ADDR
22818: GO 25893
22820: LD_INT 2
22822: DOUBLE
22823: EQUAL
22824: IFTRUE 22828
22826: GO 22912
22828: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22829: LD_ADDR_VAR 0 2
22833: PUSH
22834: LD_INT 2
22836: PUSH
22837: LD_INT 4
22839: PUSH
22840: LD_INT 11
22842: PUSH
22843: LD_INT 12
22845: PUSH
22846: LD_INT 15
22848: PUSH
22849: LD_INT 16
22851: PUSH
22852: LD_INT 22
22854: PUSH
22855: LD_INT 23
22857: PUSH
22858: LD_INT 26
22860: PUSH
22861: EMPTY
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: PUSH
22872: LD_INT 101
22874: PUSH
22875: LD_INT 102
22877: PUSH
22878: LD_INT 105
22880: PUSH
22881: LD_INT 106
22883: PUSH
22884: LD_INT 108
22886: PUSH
22887: LD_INT 116
22889: PUSH
22890: LD_INT 117
22892: PUSH
22893: LD_INT 118
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: ST_TO_ADDR
22910: GO 25893
22912: LD_INT 3
22914: DOUBLE
22915: EQUAL
22916: IFTRUE 22920
22918: GO 23008
22920: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22921: LD_ADDR_VAR 0 2
22925: PUSH
22926: LD_INT 2
22928: PUSH
22929: LD_INT 4
22931: PUSH
22932: LD_INT 5
22934: PUSH
22935: LD_INT 11
22937: PUSH
22938: LD_INT 12
22940: PUSH
22941: LD_INT 15
22943: PUSH
22944: LD_INT 16
22946: PUSH
22947: LD_INT 22
22949: PUSH
22950: LD_INT 26
22952: PUSH
22953: LD_INT 36
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: PUSH
22968: LD_INT 101
22970: PUSH
22971: LD_INT 102
22973: PUSH
22974: LD_INT 105
22976: PUSH
22977: LD_INT 106
22979: PUSH
22980: LD_INT 108
22982: PUSH
22983: LD_INT 116
22985: PUSH
22986: LD_INT 117
22988: PUSH
22989: LD_INT 118
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: ST_TO_ADDR
23006: GO 25893
23008: LD_INT 4
23010: DOUBLE
23011: EQUAL
23012: IFTRUE 23016
23014: GO 23112
23016: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
23017: LD_ADDR_VAR 0 2
23021: PUSH
23022: LD_INT 2
23024: PUSH
23025: LD_INT 4
23027: PUSH
23028: LD_INT 5
23030: PUSH
23031: LD_INT 8
23033: PUSH
23034: LD_INT 11
23036: PUSH
23037: LD_INT 12
23039: PUSH
23040: LD_INT 15
23042: PUSH
23043: LD_INT 16
23045: PUSH
23046: LD_INT 22
23048: PUSH
23049: LD_INT 23
23051: PUSH
23052: LD_INT 26
23054: PUSH
23055: LD_INT 36
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: PUSH
23072: LD_INT 101
23074: PUSH
23075: LD_INT 102
23077: PUSH
23078: LD_INT 105
23080: PUSH
23081: LD_INT 106
23083: PUSH
23084: LD_INT 108
23086: PUSH
23087: LD_INT 116
23089: PUSH
23090: LD_INT 117
23092: PUSH
23093: LD_INT 118
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: ST_TO_ADDR
23110: GO 25893
23112: LD_INT 5
23114: DOUBLE
23115: EQUAL
23116: IFTRUE 23120
23118: GO 23232
23120: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
23121: LD_ADDR_VAR 0 2
23125: PUSH
23126: LD_INT 2
23128: PUSH
23129: LD_INT 4
23131: PUSH
23132: LD_INT 5
23134: PUSH
23135: LD_INT 6
23137: PUSH
23138: LD_INT 8
23140: PUSH
23141: LD_INT 11
23143: PUSH
23144: LD_INT 12
23146: PUSH
23147: LD_INT 15
23149: PUSH
23150: LD_INT 16
23152: PUSH
23153: LD_INT 22
23155: PUSH
23156: LD_INT 23
23158: PUSH
23159: LD_INT 25
23161: PUSH
23162: LD_INT 26
23164: PUSH
23165: LD_INT 36
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: PUSH
23184: LD_INT 101
23186: PUSH
23187: LD_INT 102
23189: PUSH
23190: LD_INT 105
23192: PUSH
23193: LD_INT 106
23195: PUSH
23196: LD_INT 108
23198: PUSH
23199: LD_INT 109
23201: PUSH
23202: LD_INT 112
23204: PUSH
23205: LD_INT 116
23207: PUSH
23208: LD_INT 117
23210: PUSH
23211: LD_INT 118
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: ST_TO_ADDR
23230: GO 25893
23232: LD_INT 6
23234: DOUBLE
23235: EQUAL
23236: IFTRUE 23240
23238: GO 23372
23240: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
23241: LD_ADDR_VAR 0 2
23245: PUSH
23246: LD_INT 2
23248: PUSH
23249: LD_INT 4
23251: PUSH
23252: LD_INT 5
23254: PUSH
23255: LD_INT 6
23257: PUSH
23258: LD_INT 8
23260: PUSH
23261: LD_INT 11
23263: PUSH
23264: LD_INT 12
23266: PUSH
23267: LD_INT 15
23269: PUSH
23270: LD_INT 16
23272: PUSH
23273: LD_INT 20
23275: PUSH
23276: LD_INT 21
23278: PUSH
23279: LD_INT 22
23281: PUSH
23282: LD_INT 23
23284: PUSH
23285: LD_INT 25
23287: PUSH
23288: LD_INT 26
23290: PUSH
23291: LD_INT 30
23293: PUSH
23294: LD_INT 31
23296: PUSH
23297: LD_INT 32
23299: PUSH
23300: LD_INT 36
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: PUSH
23324: LD_INT 101
23326: PUSH
23327: LD_INT 102
23329: PUSH
23330: LD_INT 105
23332: PUSH
23333: LD_INT 106
23335: PUSH
23336: LD_INT 108
23338: PUSH
23339: LD_INT 109
23341: PUSH
23342: LD_INT 112
23344: PUSH
23345: LD_INT 116
23347: PUSH
23348: LD_INT 117
23350: PUSH
23351: LD_INT 118
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: ST_TO_ADDR
23370: GO 25893
23372: LD_INT 7
23374: DOUBLE
23375: EQUAL
23376: IFTRUE 23380
23378: GO 23492
23380: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
23381: LD_ADDR_VAR 0 2
23385: PUSH
23386: LD_INT 2
23388: PUSH
23389: LD_INT 4
23391: PUSH
23392: LD_INT 5
23394: PUSH
23395: LD_INT 7
23397: PUSH
23398: LD_INT 11
23400: PUSH
23401: LD_INT 12
23403: PUSH
23404: LD_INT 15
23406: PUSH
23407: LD_INT 16
23409: PUSH
23410: LD_INT 20
23412: PUSH
23413: LD_INT 21
23415: PUSH
23416: LD_INT 22
23418: PUSH
23419: LD_INT 23
23421: PUSH
23422: LD_INT 25
23424: PUSH
23425: LD_INT 26
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 101
23446: PUSH
23447: LD_INT 102
23449: PUSH
23450: LD_INT 103
23452: PUSH
23453: LD_INT 105
23455: PUSH
23456: LD_INT 106
23458: PUSH
23459: LD_INT 108
23461: PUSH
23462: LD_INT 112
23464: PUSH
23465: LD_INT 116
23467: PUSH
23468: LD_INT 117
23470: PUSH
23471: LD_INT 118
23473: PUSH
23474: EMPTY
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: ST_TO_ADDR
23490: GO 25893
23492: LD_INT 8
23494: DOUBLE
23495: EQUAL
23496: IFTRUE 23500
23498: GO 23640
23500: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
23501: LD_ADDR_VAR 0 2
23505: PUSH
23506: LD_INT 2
23508: PUSH
23509: LD_INT 4
23511: PUSH
23512: LD_INT 5
23514: PUSH
23515: LD_INT 6
23517: PUSH
23518: LD_INT 7
23520: PUSH
23521: LD_INT 8
23523: PUSH
23524: LD_INT 11
23526: PUSH
23527: LD_INT 12
23529: PUSH
23530: LD_INT 15
23532: PUSH
23533: LD_INT 16
23535: PUSH
23536: LD_INT 20
23538: PUSH
23539: LD_INT 21
23541: PUSH
23542: LD_INT 22
23544: PUSH
23545: LD_INT 23
23547: PUSH
23548: LD_INT 25
23550: PUSH
23551: LD_INT 26
23553: PUSH
23554: LD_INT 30
23556: PUSH
23557: LD_INT 31
23559: PUSH
23560: LD_INT 32
23562: PUSH
23563: LD_INT 36
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: PUSH
23588: LD_INT 101
23590: PUSH
23591: LD_INT 102
23593: PUSH
23594: LD_INT 103
23596: PUSH
23597: LD_INT 105
23599: PUSH
23600: LD_INT 106
23602: PUSH
23603: LD_INT 108
23605: PUSH
23606: LD_INT 109
23608: PUSH
23609: LD_INT 112
23611: PUSH
23612: LD_INT 116
23614: PUSH
23615: LD_INT 117
23617: PUSH
23618: LD_INT 118
23620: PUSH
23621: EMPTY
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: ST_TO_ADDR
23638: GO 25893
23640: LD_INT 9
23642: DOUBLE
23643: EQUAL
23644: IFTRUE 23648
23646: GO 23796
23648: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
23649: LD_ADDR_VAR 0 2
23653: PUSH
23654: LD_INT 2
23656: PUSH
23657: LD_INT 4
23659: PUSH
23660: LD_INT 5
23662: PUSH
23663: LD_INT 6
23665: PUSH
23666: LD_INT 7
23668: PUSH
23669: LD_INT 8
23671: PUSH
23672: LD_INT 11
23674: PUSH
23675: LD_INT 12
23677: PUSH
23678: LD_INT 15
23680: PUSH
23681: LD_INT 16
23683: PUSH
23684: LD_INT 20
23686: PUSH
23687: LD_INT 21
23689: PUSH
23690: LD_INT 22
23692: PUSH
23693: LD_INT 23
23695: PUSH
23696: LD_INT 25
23698: PUSH
23699: LD_INT 26
23701: PUSH
23702: LD_INT 28
23704: PUSH
23705: LD_INT 30
23707: PUSH
23708: LD_INT 31
23710: PUSH
23711: LD_INT 32
23713: PUSH
23714: LD_INT 36
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: PUSH
23740: LD_INT 101
23742: PUSH
23743: LD_INT 102
23745: PUSH
23746: LD_INT 103
23748: PUSH
23749: LD_INT 105
23751: PUSH
23752: LD_INT 106
23754: PUSH
23755: LD_INT 108
23757: PUSH
23758: LD_INT 109
23760: PUSH
23761: LD_INT 112
23763: PUSH
23764: LD_INT 114
23766: PUSH
23767: LD_INT 116
23769: PUSH
23770: LD_INT 117
23772: PUSH
23773: LD_INT 118
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: ST_TO_ADDR
23794: GO 25893
23796: LD_INT 10
23798: DOUBLE
23799: EQUAL
23800: IFTRUE 23804
23802: GO 24000
23804: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23805: LD_ADDR_VAR 0 2
23809: PUSH
23810: LD_INT 2
23812: PUSH
23813: LD_INT 4
23815: PUSH
23816: LD_INT 5
23818: PUSH
23819: LD_INT 6
23821: PUSH
23822: LD_INT 7
23824: PUSH
23825: LD_INT 8
23827: PUSH
23828: LD_INT 9
23830: PUSH
23831: LD_INT 10
23833: PUSH
23834: LD_INT 11
23836: PUSH
23837: LD_INT 12
23839: PUSH
23840: LD_INT 13
23842: PUSH
23843: LD_INT 14
23845: PUSH
23846: LD_INT 15
23848: PUSH
23849: LD_INT 16
23851: PUSH
23852: LD_INT 17
23854: PUSH
23855: LD_INT 18
23857: PUSH
23858: LD_INT 19
23860: PUSH
23861: LD_INT 20
23863: PUSH
23864: LD_INT 21
23866: PUSH
23867: LD_INT 22
23869: PUSH
23870: LD_INT 23
23872: PUSH
23873: LD_INT 24
23875: PUSH
23876: LD_INT 25
23878: PUSH
23879: LD_INT 26
23881: PUSH
23882: LD_INT 28
23884: PUSH
23885: LD_INT 30
23887: PUSH
23888: LD_INT 31
23890: PUSH
23891: LD_INT 32
23893: PUSH
23894: LD_INT 36
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: PUSH
23928: LD_INT 101
23930: PUSH
23931: LD_INT 102
23933: PUSH
23934: LD_INT 103
23936: PUSH
23937: LD_INT 104
23939: PUSH
23940: LD_INT 105
23942: PUSH
23943: LD_INT 106
23945: PUSH
23946: LD_INT 107
23948: PUSH
23949: LD_INT 108
23951: PUSH
23952: LD_INT 109
23954: PUSH
23955: LD_INT 110
23957: PUSH
23958: LD_INT 111
23960: PUSH
23961: LD_INT 112
23963: PUSH
23964: LD_INT 114
23966: PUSH
23967: LD_INT 116
23969: PUSH
23970: LD_INT 117
23972: PUSH
23973: LD_INT 118
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: ST_TO_ADDR
23998: GO 25893
24000: LD_INT 11
24002: DOUBLE
24003: EQUAL
24004: IFTRUE 24008
24006: GO 24212
24008: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
24009: LD_ADDR_VAR 0 2
24013: PUSH
24014: LD_INT 2
24016: PUSH
24017: LD_INT 3
24019: PUSH
24020: LD_INT 4
24022: PUSH
24023: LD_INT 5
24025: PUSH
24026: LD_INT 6
24028: PUSH
24029: LD_INT 7
24031: PUSH
24032: LD_INT 8
24034: PUSH
24035: LD_INT 9
24037: PUSH
24038: LD_INT 10
24040: PUSH
24041: LD_INT 11
24043: PUSH
24044: LD_INT 12
24046: PUSH
24047: LD_INT 13
24049: PUSH
24050: LD_INT 14
24052: PUSH
24053: LD_INT 15
24055: PUSH
24056: LD_INT 16
24058: PUSH
24059: LD_INT 17
24061: PUSH
24062: LD_INT 18
24064: PUSH
24065: LD_INT 19
24067: PUSH
24068: LD_INT 20
24070: PUSH
24071: LD_INT 21
24073: PUSH
24074: LD_INT 22
24076: PUSH
24077: LD_INT 23
24079: PUSH
24080: LD_INT 24
24082: PUSH
24083: LD_INT 25
24085: PUSH
24086: LD_INT 26
24088: PUSH
24089: LD_INT 28
24091: PUSH
24092: LD_INT 30
24094: PUSH
24095: LD_INT 31
24097: PUSH
24098: LD_INT 32
24100: PUSH
24101: LD_INT 34
24103: PUSH
24104: LD_INT 36
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: PUSH
24140: LD_INT 101
24142: PUSH
24143: LD_INT 102
24145: PUSH
24146: LD_INT 103
24148: PUSH
24149: LD_INT 104
24151: PUSH
24152: LD_INT 105
24154: PUSH
24155: LD_INT 106
24157: PUSH
24158: LD_INT 107
24160: PUSH
24161: LD_INT 108
24163: PUSH
24164: LD_INT 109
24166: PUSH
24167: LD_INT 110
24169: PUSH
24170: LD_INT 111
24172: PUSH
24173: LD_INT 112
24175: PUSH
24176: LD_INT 114
24178: PUSH
24179: LD_INT 116
24181: PUSH
24182: LD_INT 117
24184: PUSH
24185: LD_INT 118
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: ST_TO_ADDR
24210: GO 25893
24212: LD_INT 12
24214: DOUBLE
24215: EQUAL
24216: IFTRUE 24220
24218: GO 24440
24220: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
24221: LD_ADDR_VAR 0 2
24225: PUSH
24226: LD_INT 1
24228: PUSH
24229: LD_INT 2
24231: PUSH
24232: LD_INT 3
24234: PUSH
24235: LD_INT 4
24237: PUSH
24238: LD_INT 5
24240: PUSH
24241: LD_INT 6
24243: PUSH
24244: LD_INT 7
24246: PUSH
24247: LD_INT 8
24249: PUSH
24250: LD_INT 9
24252: PUSH
24253: LD_INT 10
24255: PUSH
24256: LD_INT 11
24258: PUSH
24259: LD_INT 12
24261: PUSH
24262: LD_INT 13
24264: PUSH
24265: LD_INT 14
24267: PUSH
24268: LD_INT 15
24270: PUSH
24271: LD_INT 16
24273: PUSH
24274: LD_INT 17
24276: PUSH
24277: LD_INT 18
24279: PUSH
24280: LD_INT 19
24282: PUSH
24283: LD_INT 20
24285: PUSH
24286: LD_INT 21
24288: PUSH
24289: LD_INT 22
24291: PUSH
24292: LD_INT 23
24294: PUSH
24295: LD_INT 24
24297: PUSH
24298: LD_INT 25
24300: PUSH
24301: LD_INT 26
24303: PUSH
24304: LD_INT 27
24306: PUSH
24307: LD_INT 28
24309: PUSH
24310: LD_INT 30
24312: PUSH
24313: LD_INT 31
24315: PUSH
24316: LD_INT 32
24318: PUSH
24319: LD_INT 33
24321: PUSH
24322: LD_INT 34
24324: PUSH
24325: LD_INT 36
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: PUSH
24364: LD_INT 101
24366: PUSH
24367: LD_INT 102
24369: PUSH
24370: LD_INT 103
24372: PUSH
24373: LD_INT 104
24375: PUSH
24376: LD_INT 105
24378: PUSH
24379: LD_INT 106
24381: PUSH
24382: LD_INT 107
24384: PUSH
24385: LD_INT 108
24387: PUSH
24388: LD_INT 109
24390: PUSH
24391: LD_INT 110
24393: PUSH
24394: LD_INT 111
24396: PUSH
24397: LD_INT 112
24399: PUSH
24400: LD_INT 113
24402: PUSH
24403: LD_INT 114
24405: PUSH
24406: LD_INT 116
24408: PUSH
24409: LD_INT 117
24411: PUSH
24412: LD_INT 118
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: ST_TO_ADDR
24438: GO 25893
24440: LD_INT 13
24442: DOUBLE
24443: EQUAL
24444: IFTRUE 24448
24446: GO 24656
24448: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
24449: LD_ADDR_VAR 0 2
24453: PUSH
24454: LD_INT 1
24456: PUSH
24457: LD_INT 2
24459: PUSH
24460: LD_INT 3
24462: PUSH
24463: LD_INT 4
24465: PUSH
24466: LD_INT 5
24468: PUSH
24469: LD_INT 8
24471: PUSH
24472: LD_INT 9
24474: PUSH
24475: LD_INT 10
24477: PUSH
24478: LD_INT 11
24480: PUSH
24481: LD_INT 12
24483: PUSH
24484: LD_INT 14
24486: PUSH
24487: LD_INT 15
24489: PUSH
24490: LD_INT 16
24492: PUSH
24493: LD_INT 17
24495: PUSH
24496: LD_INT 18
24498: PUSH
24499: LD_INT 19
24501: PUSH
24502: LD_INT 20
24504: PUSH
24505: LD_INT 21
24507: PUSH
24508: LD_INT 22
24510: PUSH
24511: LD_INT 23
24513: PUSH
24514: LD_INT 24
24516: PUSH
24517: LD_INT 25
24519: PUSH
24520: LD_INT 26
24522: PUSH
24523: LD_INT 27
24525: PUSH
24526: LD_INT 28
24528: PUSH
24529: LD_INT 30
24531: PUSH
24532: LD_INT 31
24534: PUSH
24535: LD_INT 32
24537: PUSH
24538: LD_INT 33
24540: PUSH
24541: LD_INT 34
24543: PUSH
24544: LD_INT 36
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: PUSH
24580: LD_INT 101
24582: PUSH
24583: LD_INT 102
24585: PUSH
24586: LD_INT 103
24588: PUSH
24589: LD_INT 104
24591: PUSH
24592: LD_INT 105
24594: PUSH
24595: LD_INT 106
24597: PUSH
24598: LD_INT 107
24600: PUSH
24601: LD_INT 108
24603: PUSH
24604: LD_INT 109
24606: PUSH
24607: LD_INT 110
24609: PUSH
24610: LD_INT 111
24612: PUSH
24613: LD_INT 112
24615: PUSH
24616: LD_INT 113
24618: PUSH
24619: LD_INT 114
24621: PUSH
24622: LD_INT 116
24624: PUSH
24625: LD_INT 117
24627: PUSH
24628: LD_INT 118
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: ST_TO_ADDR
24654: GO 25893
24656: LD_INT 14
24658: DOUBLE
24659: EQUAL
24660: IFTRUE 24664
24662: GO 24888
24664: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
24665: LD_ADDR_VAR 0 2
24669: PUSH
24670: LD_INT 1
24672: PUSH
24673: LD_INT 2
24675: PUSH
24676: LD_INT 3
24678: PUSH
24679: LD_INT 4
24681: PUSH
24682: LD_INT 5
24684: PUSH
24685: LD_INT 6
24687: PUSH
24688: LD_INT 7
24690: PUSH
24691: LD_INT 8
24693: PUSH
24694: LD_INT 9
24696: PUSH
24697: LD_INT 10
24699: PUSH
24700: LD_INT 11
24702: PUSH
24703: LD_INT 12
24705: PUSH
24706: LD_INT 13
24708: PUSH
24709: LD_INT 14
24711: PUSH
24712: LD_INT 15
24714: PUSH
24715: LD_INT 16
24717: PUSH
24718: LD_INT 17
24720: PUSH
24721: LD_INT 18
24723: PUSH
24724: LD_INT 19
24726: PUSH
24727: LD_INT 20
24729: PUSH
24730: LD_INT 21
24732: PUSH
24733: LD_INT 22
24735: PUSH
24736: LD_INT 23
24738: PUSH
24739: LD_INT 24
24741: PUSH
24742: LD_INT 25
24744: PUSH
24745: LD_INT 26
24747: PUSH
24748: LD_INT 27
24750: PUSH
24751: LD_INT 28
24753: PUSH
24754: LD_INT 29
24756: PUSH
24757: LD_INT 30
24759: PUSH
24760: LD_INT 31
24762: PUSH
24763: LD_INT 32
24765: PUSH
24766: LD_INT 33
24768: PUSH
24769: LD_INT 34
24771: PUSH
24772: LD_INT 36
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: PUSH
24812: LD_INT 101
24814: PUSH
24815: LD_INT 102
24817: PUSH
24818: LD_INT 103
24820: PUSH
24821: LD_INT 104
24823: PUSH
24824: LD_INT 105
24826: PUSH
24827: LD_INT 106
24829: PUSH
24830: LD_INT 107
24832: PUSH
24833: LD_INT 108
24835: PUSH
24836: LD_INT 109
24838: PUSH
24839: LD_INT 110
24841: PUSH
24842: LD_INT 111
24844: PUSH
24845: LD_INT 112
24847: PUSH
24848: LD_INT 113
24850: PUSH
24851: LD_INT 114
24853: PUSH
24854: LD_INT 116
24856: PUSH
24857: LD_INT 117
24859: PUSH
24860: LD_INT 118
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: ST_TO_ADDR
24886: GO 25893
24888: LD_INT 15
24890: DOUBLE
24891: EQUAL
24892: IFTRUE 24896
24894: GO 25120
24896: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24897: LD_ADDR_VAR 0 2
24901: PUSH
24902: LD_INT 1
24904: PUSH
24905: LD_INT 2
24907: PUSH
24908: LD_INT 3
24910: PUSH
24911: LD_INT 4
24913: PUSH
24914: LD_INT 5
24916: PUSH
24917: LD_INT 6
24919: PUSH
24920: LD_INT 7
24922: PUSH
24923: LD_INT 8
24925: PUSH
24926: LD_INT 9
24928: PUSH
24929: LD_INT 10
24931: PUSH
24932: LD_INT 11
24934: PUSH
24935: LD_INT 12
24937: PUSH
24938: LD_INT 13
24940: PUSH
24941: LD_INT 14
24943: PUSH
24944: LD_INT 15
24946: PUSH
24947: LD_INT 16
24949: PUSH
24950: LD_INT 17
24952: PUSH
24953: LD_INT 18
24955: PUSH
24956: LD_INT 19
24958: PUSH
24959: LD_INT 20
24961: PUSH
24962: LD_INT 21
24964: PUSH
24965: LD_INT 22
24967: PUSH
24968: LD_INT 23
24970: PUSH
24971: LD_INT 24
24973: PUSH
24974: LD_INT 25
24976: PUSH
24977: LD_INT 26
24979: PUSH
24980: LD_INT 27
24982: PUSH
24983: LD_INT 28
24985: PUSH
24986: LD_INT 29
24988: PUSH
24989: LD_INT 30
24991: PUSH
24992: LD_INT 31
24994: PUSH
24995: LD_INT 32
24997: PUSH
24998: LD_INT 33
25000: PUSH
25001: LD_INT 34
25003: PUSH
25004: LD_INT 36
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: PUSH
25044: LD_INT 101
25046: PUSH
25047: LD_INT 102
25049: PUSH
25050: LD_INT 103
25052: PUSH
25053: LD_INT 104
25055: PUSH
25056: LD_INT 105
25058: PUSH
25059: LD_INT 106
25061: PUSH
25062: LD_INT 107
25064: PUSH
25065: LD_INT 108
25067: PUSH
25068: LD_INT 109
25070: PUSH
25071: LD_INT 110
25073: PUSH
25074: LD_INT 111
25076: PUSH
25077: LD_INT 112
25079: PUSH
25080: LD_INT 113
25082: PUSH
25083: LD_INT 114
25085: PUSH
25086: LD_INT 116
25088: PUSH
25089: LD_INT 117
25091: PUSH
25092: LD_INT 118
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: ST_TO_ADDR
25118: GO 25893
25120: LD_INT 16
25122: DOUBLE
25123: EQUAL
25124: IFTRUE 25128
25126: GO 25264
25128: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
25129: LD_ADDR_VAR 0 2
25133: PUSH
25134: LD_INT 2
25136: PUSH
25137: LD_INT 4
25139: PUSH
25140: LD_INT 5
25142: PUSH
25143: LD_INT 7
25145: PUSH
25146: LD_INT 11
25148: PUSH
25149: LD_INT 12
25151: PUSH
25152: LD_INT 15
25154: PUSH
25155: LD_INT 16
25157: PUSH
25158: LD_INT 20
25160: PUSH
25161: LD_INT 21
25163: PUSH
25164: LD_INT 22
25166: PUSH
25167: LD_INT 23
25169: PUSH
25170: LD_INT 25
25172: PUSH
25173: LD_INT 26
25175: PUSH
25176: LD_INT 30
25178: PUSH
25179: LD_INT 31
25181: PUSH
25182: LD_INT 32
25184: PUSH
25185: LD_INT 33
25187: PUSH
25188: LD_INT 34
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: PUSH
25212: LD_INT 101
25214: PUSH
25215: LD_INT 102
25217: PUSH
25218: LD_INT 103
25220: PUSH
25221: LD_INT 106
25223: PUSH
25224: LD_INT 108
25226: PUSH
25227: LD_INT 112
25229: PUSH
25230: LD_INT 113
25232: PUSH
25233: LD_INT 114
25235: PUSH
25236: LD_INT 116
25238: PUSH
25239: LD_INT 117
25241: PUSH
25242: LD_INT 118
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: ST_TO_ADDR
25262: GO 25893
25264: LD_INT 17
25266: DOUBLE
25267: EQUAL
25268: IFTRUE 25272
25270: GO 25496
25272: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
25273: LD_ADDR_VAR 0 2
25277: PUSH
25278: LD_INT 1
25280: PUSH
25281: LD_INT 2
25283: PUSH
25284: LD_INT 3
25286: PUSH
25287: LD_INT 4
25289: PUSH
25290: LD_INT 5
25292: PUSH
25293: LD_INT 6
25295: PUSH
25296: LD_INT 7
25298: PUSH
25299: LD_INT 8
25301: PUSH
25302: LD_INT 9
25304: PUSH
25305: LD_INT 10
25307: PUSH
25308: LD_INT 11
25310: PUSH
25311: LD_INT 12
25313: PUSH
25314: LD_INT 13
25316: PUSH
25317: LD_INT 14
25319: PUSH
25320: LD_INT 15
25322: PUSH
25323: LD_INT 16
25325: PUSH
25326: LD_INT 17
25328: PUSH
25329: LD_INT 18
25331: PUSH
25332: LD_INT 19
25334: PUSH
25335: LD_INT 20
25337: PUSH
25338: LD_INT 21
25340: PUSH
25341: LD_INT 22
25343: PUSH
25344: LD_INT 23
25346: PUSH
25347: LD_INT 24
25349: PUSH
25350: LD_INT 25
25352: PUSH
25353: LD_INT 26
25355: PUSH
25356: LD_INT 27
25358: PUSH
25359: LD_INT 28
25361: PUSH
25362: LD_INT 29
25364: PUSH
25365: LD_INT 30
25367: PUSH
25368: LD_INT 31
25370: PUSH
25371: LD_INT 32
25373: PUSH
25374: LD_INT 33
25376: PUSH
25377: LD_INT 34
25379: PUSH
25380: LD_INT 36
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: PUSH
25420: LD_INT 101
25422: PUSH
25423: LD_INT 102
25425: PUSH
25426: LD_INT 103
25428: PUSH
25429: LD_INT 104
25431: PUSH
25432: LD_INT 105
25434: PUSH
25435: LD_INT 106
25437: PUSH
25438: LD_INT 107
25440: PUSH
25441: LD_INT 108
25443: PUSH
25444: LD_INT 109
25446: PUSH
25447: LD_INT 110
25449: PUSH
25450: LD_INT 111
25452: PUSH
25453: LD_INT 112
25455: PUSH
25456: LD_INT 113
25458: PUSH
25459: LD_INT 114
25461: PUSH
25462: LD_INT 116
25464: PUSH
25465: LD_INT 117
25467: PUSH
25468: LD_INT 118
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: PUSH
25490: EMPTY
25491: LIST
25492: LIST
25493: ST_TO_ADDR
25494: GO 25893
25496: LD_INT 18
25498: DOUBLE
25499: EQUAL
25500: IFTRUE 25504
25502: GO 25652
25504: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
25505: LD_ADDR_VAR 0 2
25509: PUSH
25510: LD_INT 2
25512: PUSH
25513: LD_INT 4
25515: PUSH
25516: LD_INT 5
25518: PUSH
25519: LD_INT 7
25521: PUSH
25522: LD_INT 11
25524: PUSH
25525: LD_INT 12
25527: PUSH
25528: LD_INT 15
25530: PUSH
25531: LD_INT 16
25533: PUSH
25534: LD_INT 20
25536: PUSH
25537: LD_INT 21
25539: PUSH
25540: LD_INT 22
25542: PUSH
25543: LD_INT 23
25545: PUSH
25546: LD_INT 25
25548: PUSH
25549: LD_INT 26
25551: PUSH
25552: LD_INT 30
25554: PUSH
25555: LD_INT 31
25557: PUSH
25558: LD_INT 32
25560: PUSH
25561: LD_INT 33
25563: PUSH
25564: LD_INT 34
25566: PUSH
25567: LD_INT 35
25569: PUSH
25570: LD_INT 36
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: PUSH
25596: LD_INT 101
25598: PUSH
25599: LD_INT 102
25601: PUSH
25602: LD_INT 103
25604: PUSH
25605: LD_INT 106
25607: PUSH
25608: LD_INT 108
25610: PUSH
25611: LD_INT 112
25613: PUSH
25614: LD_INT 113
25616: PUSH
25617: LD_INT 114
25619: PUSH
25620: LD_INT 115
25622: PUSH
25623: LD_INT 116
25625: PUSH
25626: LD_INT 117
25628: PUSH
25629: LD_INT 118
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: ST_TO_ADDR
25650: GO 25893
25652: LD_INT 19
25654: DOUBLE
25655: EQUAL
25656: IFTRUE 25660
25658: GO 25892
25660: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
25661: LD_ADDR_VAR 0 2
25665: PUSH
25666: LD_INT 1
25668: PUSH
25669: LD_INT 2
25671: PUSH
25672: LD_INT 3
25674: PUSH
25675: LD_INT 4
25677: PUSH
25678: LD_INT 5
25680: PUSH
25681: LD_INT 6
25683: PUSH
25684: LD_INT 7
25686: PUSH
25687: LD_INT 8
25689: PUSH
25690: LD_INT 9
25692: PUSH
25693: LD_INT 10
25695: PUSH
25696: LD_INT 11
25698: PUSH
25699: LD_INT 12
25701: PUSH
25702: LD_INT 13
25704: PUSH
25705: LD_INT 14
25707: PUSH
25708: LD_INT 15
25710: PUSH
25711: LD_INT 16
25713: PUSH
25714: LD_INT 17
25716: PUSH
25717: LD_INT 18
25719: PUSH
25720: LD_INT 19
25722: PUSH
25723: LD_INT 20
25725: PUSH
25726: LD_INT 21
25728: PUSH
25729: LD_INT 22
25731: PUSH
25732: LD_INT 23
25734: PUSH
25735: LD_INT 24
25737: PUSH
25738: LD_INT 25
25740: PUSH
25741: LD_INT 26
25743: PUSH
25744: LD_INT 27
25746: PUSH
25747: LD_INT 28
25749: PUSH
25750: LD_INT 29
25752: PUSH
25753: LD_INT 30
25755: PUSH
25756: LD_INT 31
25758: PUSH
25759: LD_INT 32
25761: PUSH
25762: LD_INT 33
25764: PUSH
25765: LD_INT 34
25767: PUSH
25768: LD_INT 35
25770: PUSH
25771: LD_INT 36
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: PUSH
25812: LD_INT 101
25814: PUSH
25815: LD_INT 102
25817: PUSH
25818: LD_INT 103
25820: PUSH
25821: LD_INT 104
25823: PUSH
25824: LD_INT 105
25826: PUSH
25827: LD_INT 106
25829: PUSH
25830: LD_INT 107
25832: PUSH
25833: LD_INT 108
25835: PUSH
25836: LD_INT 109
25838: PUSH
25839: LD_INT 110
25841: PUSH
25842: LD_INT 111
25844: PUSH
25845: LD_INT 112
25847: PUSH
25848: LD_INT 113
25850: PUSH
25851: LD_INT 114
25853: PUSH
25854: LD_INT 115
25856: PUSH
25857: LD_INT 116
25859: PUSH
25860: LD_INT 117
25862: PUSH
25863: LD_INT 118
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: ST_TO_ADDR
25890: GO 25893
25892: POP
// end else
25893: GO 26124
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25895: LD_ADDR_VAR 0 2
25899: PUSH
25900: LD_INT 1
25902: PUSH
25903: LD_INT 2
25905: PUSH
25906: LD_INT 3
25908: PUSH
25909: LD_INT 4
25911: PUSH
25912: LD_INT 5
25914: PUSH
25915: LD_INT 6
25917: PUSH
25918: LD_INT 7
25920: PUSH
25921: LD_INT 8
25923: PUSH
25924: LD_INT 9
25926: PUSH
25927: LD_INT 10
25929: PUSH
25930: LD_INT 11
25932: PUSH
25933: LD_INT 12
25935: PUSH
25936: LD_INT 13
25938: PUSH
25939: LD_INT 14
25941: PUSH
25942: LD_INT 15
25944: PUSH
25945: LD_INT 16
25947: PUSH
25948: LD_INT 17
25950: PUSH
25951: LD_INT 18
25953: PUSH
25954: LD_INT 19
25956: PUSH
25957: LD_INT 20
25959: PUSH
25960: LD_INT 21
25962: PUSH
25963: LD_INT 22
25965: PUSH
25966: LD_INT 23
25968: PUSH
25969: LD_INT 24
25971: PUSH
25972: LD_INT 25
25974: PUSH
25975: LD_INT 26
25977: PUSH
25978: LD_INT 27
25980: PUSH
25981: LD_INT 28
25983: PUSH
25984: LD_INT 29
25986: PUSH
25987: LD_INT 30
25989: PUSH
25990: LD_INT 31
25992: PUSH
25993: LD_INT 32
25995: PUSH
25996: LD_INT 33
25998: PUSH
25999: LD_INT 34
26001: PUSH
26002: LD_INT 35
26004: PUSH
26005: LD_INT 36
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: PUSH
26046: LD_INT 101
26048: PUSH
26049: LD_INT 102
26051: PUSH
26052: LD_INT 103
26054: PUSH
26055: LD_INT 104
26057: PUSH
26058: LD_INT 105
26060: PUSH
26061: LD_INT 106
26063: PUSH
26064: LD_INT 107
26066: PUSH
26067: LD_INT 108
26069: PUSH
26070: LD_INT 109
26072: PUSH
26073: LD_INT 110
26075: PUSH
26076: LD_INT 111
26078: PUSH
26079: LD_INT 112
26081: PUSH
26082: LD_INT 113
26084: PUSH
26085: LD_INT 114
26087: PUSH
26088: LD_INT 115
26090: PUSH
26091: LD_INT 116
26093: PUSH
26094: LD_INT 117
26096: PUSH
26097: LD_INT 118
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: ST_TO_ADDR
// if result then
26124: LD_VAR 0 2
26128: IFFALSE 26914
// begin normal :=  ;
26130: LD_ADDR_VAR 0 5
26134: PUSH
26135: LD_STRING 
26137: ST_TO_ADDR
// hardcore :=  ;
26138: LD_ADDR_VAR 0 6
26142: PUSH
26143: LD_STRING 
26145: ST_TO_ADDR
// active :=  ;
26146: LD_ADDR_VAR 0 7
26150: PUSH
26151: LD_STRING 
26153: ST_TO_ADDR
// for i = 1 to normalCounter do
26154: LD_ADDR_VAR 0 8
26158: PUSH
26159: DOUBLE
26160: LD_INT 1
26162: DEC
26163: ST_TO_ADDR
26164: LD_EXP 59
26168: PUSH
26169: FOR_TO
26170: IFFALSE 26271
// begin tmp := 0 ;
26172: LD_ADDR_VAR 0 3
26176: PUSH
26177: LD_STRING 0
26179: ST_TO_ADDR
// if result [ 1 ] then
26180: LD_VAR 0 2
26184: PUSH
26185: LD_INT 1
26187: ARRAY
26188: IFFALSE 26253
// if result [ 1 ] [ 1 ] = i then
26190: LD_VAR 0 2
26194: PUSH
26195: LD_INT 1
26197: ARRAY
26198: PUSH
26199: LD_INT 1
26201: ARRAY
26202: PUSH
26203: LD_VAR 0 8
26207: EQUAL
26208: IFFALSE 26253
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
26210: LD_ADDR_VAR 0 2
26214: PUSH
26215: LD_VAR 0 2
26219: PPUSH
26220: LD_INT 1
26222: PPUSH
26223: LD_VAR 0 2
26227: PUSH
26228: LD_INT 1
26230: ARRAY
26231: PPUSH
26232: LD_INT 1
26234: PPUSH
26235: CALL_OW 3
26239: PPUSH
26240: CALL_OW 1
26244: ST_TO_ADDR
// tmp := 1 ;
26245: LD_ADDR_VAR 0 3
26249: PUSH
26250: LD_STRING 1
26252: ST_TO_ADDR
// end ; normal := normal & tmp ;
26253: LD_ADDR_VAR 0 5
26257: PUSH
26258: LD_VAR 0 5
26262: PUSH
26263: LD_VAR 0 3
26267: STR
26268: ST_TO_ADDR
// end ;
26269: GO 26169
26271: POP
26272: POP
// for i = 1 to hardcoreCounter do
26273: LD_ADDR_VAR 0 8
26277: PUSH
26278: DOUBLE
26279: LD_INT 1
26281: DEC
26282: ST_TO_ADDR
26283: LD_EXP 60
26287: PUSH
26288: FOR_TO
26289: IFFALSE 26394
// begin tmp := 0 ;
26291: LD_ADDR_VAR 0 3
26295: PUSH
26296: LD_STRING 0
26298: ST_TO_ADDR
// if result [ 2 ] then
26299: LD_VAR 0 2
26303: PUSH
26304: LD_INT 2
26306: ARRAY
26307: IFFALSE 26376
// if result [ 2 ] [ 1 ] = 100 + i then
26309: LD_VAR 0 2
26313: PUSH
26314: LD_INT 2
26316: ARRAY
26317: PUSH
26318: LD_INT 1
26320: ARRAY
26321: PUSH
26322: LD_INT 100
26324: PUSH
26325: LD_VAR 0 8
26329: PLUS
26330: EQUAL
26331: IFFALSE 26376
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
26333: LD_ADDR_VAR 0 2
26337: PUSH
26338: LD_VAR 0 2
26342: PPUSH
26343: LD_INT 2
26345: PPUSH
26346: LD_VAR 0 2
26350: PUSH
26351: LD_INT 2
26353: ARRAY
26354: PPUSH
26355: LD_INT 1
26357: PPUSH
26358: CALL_OW 3
26362: PPUSH
26363: CALL_OW 1
26367: ST_TO_ADDR
// tmp := 1 ;
26368: LD_ADDR_VAR 0 3
26372: PUSH
26373: LD_STRING 1
26375: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
26376: LD_ADDR_VAR 0 6
26380: PUSH
26381: LD_VAR 0 6
26385: PUSH
26386: LD_VAR 0 3
26390: STR
26391: ST_TO_ADDR
// end ;
26392: GO 26288
26394: POP
26395: POP
// if isGameLoad then
26396: LD_VAR 0 1
26400: IFFALSE 26875
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
26402: LD_ADDR_VAR 0 4
26406: PUSH
26407: LD_EXP 63
26411: PUSH
26412: LD_EXP 62
26416: PUSH
26417: LD_EXP 64
26421: PUSH
26422: LD_EXP 61
26426: PUSH
26427: LD_EXP 65
26431: PUSH
26432: LD_EXP 66
26436: PUSH
26437: LD_EXP 67
26441: PUSH
26442: LD_EXP 68
26446: PUSH
26447: LD_EXP 69
26451: PUSH
26452: LD_EXP 70
26456: PUSH
26457: LD_EXP 71
26461: PUSH
26462: LD_EXP 72
26466: PUSH
26467: LD_EXP 73
26471: PUSH
26472: LD_EXP 74
26476: PUSH
26477: LD_EXP 82
26481: PUSH
26482: LD_EXP 83
26486: PUSH
26487: LD_EXP 84
26491: PUSH
26492: LD_EXP 85
26496: PUSH
26497: LD_EXP 87
26501: PUSH
26502: LD_EXP 88
26506: PUSH
26507: LD_EXP 89
26511: PUSH
26512: LD_EXP 92
26516: PUSH
26517: LD_EXP 94
26521: PUSH
26522: LD_EXP 95
26526: PUSH
26527: LD_EXP 96
26531: PUSH
26532: LD_EXP 98
26536: PUSH
26537: LD_EXP 99
26541: PUSH
26542: LD_EXP 102
26546: PUSH
26547: LD_EXP 103
26551: PUSH
26552: LD_EXP 104
26556: PUSH
26557: LD_EXP 105
26561: PUSH
26562: LD_EXP 106
26566: PUSH
26567: LD_EXP 107
26571: PUSH
26572: LD_EXP 108
26576: PUSH
26577: LD_EXP 109
26581: PUSH
26582: LD_EXP 110
26586: PUSH
26587: LD_EXP 75
26591: PUSH
26592: LD_EXP 76
26596: PUSH
26597: LD_EXP 79
26601: PUSH
26602: LD_EXP 80
26606: PUSH
26607: LD_EXP 81
26611: PUSH
26612: LD_EXP 77
26616: PUSH
26617: LD_EXP 78
26621: PUSH
26622: LD_EXP 86
26626: PUSH
26627: LD_EXP 90
26631: PUSH
26632: LD_EXP 91
26636: PUSH
26637: LD_EXP 93
26641: PUSH
26642: LD_EXP 97
26646: PUSH
26647: LD_EXP 100
26651: PUSH
26652: LD_EXP 101
26656: PUSH
26657: LD_EXP 111
26661: PUSH
26662: LD_EXP 112
26666: PUSH
26667: LD_EXP 113
26671: PUSH
26672: LD_EXP 114
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: ST_TO_ADDR
// tmp :=  ;
26733: LD_ADDR_VAR 0 3
26737: PUSH
26738: LD_STRING 
26740: ST_TO_ADDR
// for i = 1 to normalCounter do
26741: LD_ADDR_VAR 0 8
26745: PUSH
26746: DOUBLE
26747: LD_INT 1
26749: DEC
26750: ST_TO_ADDR
26751: LD_EXP 59
26755: PUSH
26756: FOR_TO
26757: IFFALSE 26793
// begin if flags [ i ] then
26759: LD_VAR 0 4
26763: PUSH
26764: LD_VAR 0 8
26768: ARRAY
26769: IFFALSE 26791
// tmp := tmp & i & ; ;
26771: LD_ADDR_VAR 0 3
26775: PUSH
26776: LD_VAR 0 3
26780: PUSH
26781: LD_VAR 0 8
26785: STR
26786: PUSH
26787: LD_STRING ;
26789: STR
26790: ST_TO_ADDR
// end ;
26791: GO 26756
26793: POP
26794: POP
// for i = 1 to hardcoreCounter do
26795: LD_ADDR_VAR 0 8
26799: PUSH
26800: DOUBLE
26801: LD_INT 1
26803: DEC
26804: ST_TO_ADDR
26805: LD_EXP 60
26809: PUSH
26810: FOR_TO
26811: IFFALSE 26857
// begin if flags [ normalCounter + i ] then
26813: LD_VAR 0 4
26817: PUSH
26818: LD_EXP 59
26822: PUSH
26823: LD_VAR 0 8
26827: PLUS
26828: ARRAY
26829: IFFALSE 26855
// tmp := tmp & ( 100 + i ) & ; ;
26831: LD_ADDR_VAR 0 3
26835: PUSH
26836: LD_VAR 0 3
26840: PUSH
26841: LD_INT 100
26843: PUSH
26844: LD_VAR 0 8
26848: PLUS
26849: STR
26850: PUSH
26851: LD_STRING ;
26853: STR
26854: ST_TO_ADDR
// end ;
26855: GO 26810
26857: POP
26858: POP
// if tmp then
26859: LD_VAR 0 3
26863: IFFALSE 26875
// active := tmp ;
26865: LD_ADDR_VAR 0 7
26869: PUSH
26870: LD_VAR 0 3
26874: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
26875: LD_STRING getStreamItemsFromMission("
26877: PUSH
26878: LD_VAR 0 5
26882: STR
26883: PUSH
26884: LD_STRING ","
26886: STR
26887: PUSH
26888: LD_VAR 0 6
26892: STR
26893: PUSH
26894: LD_STRING ","
26896: STR
26897: PUSH
26898: LD_VAR 0 7
26902: STR
26903: PUSH
26904: LD_STRING ")
26906: STR
26907: PPUSH
26908: CALL_OW 559
// end else
26912: GO 26921
// ToLua ( getStreamItemsFromMission("","","") ) ;
26914: LD_STRING getStreamItemsFromMission("","","")
26916: PPUSH
26917: CALL_OW 559
// end ;
26921: LD_VAR 0 2
26925: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26926: LD_EXP 58
26930: PUSH
26931: LD_EXP 63
26935: AND
26936: IFFALSE 27060
26938: GO 26940
26940: DISABLE
26941: LD_INT 0
26943: PPUSH
26944: PPUSH
// begin enable ;
26945: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26946: LD_ADDR_VAR 0 2
26950: PUSH
26951: LD_INT 22
26953: PUSH
26954: LD_OWVAR 2
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 2
26965: PUSH
26966: LD_INT 34
26968: PUSH
26969: LD_INT 7
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PUSH
26976: LD_INT 34
26978: PUSH
26979: LD_INT 45
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PUSH
26986: LD_INT 34
26988: PUSH
26989: LD_INT 28
26991: PUSH
26992: EMPTY
26993: LIST
26994: LIST
26995: PUSH
26996: LD_INT 34
26998: PUSH
26999: LD_INT 47
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PPUSH
27017: CALL_OW 69
27021: ST_TO_ADDR
// if not tmp then
27022: LD_VAR 0 2
27026: NOT
27027: IFFALSE 27031
// exit ;
27029: GO 27060
// for i in tmp do
27031: LD_ADDR_VAR 0 1
27035: PUSH
27036: LD_VAR 0 2
27040: PUSH
27041: FOR_IN
27042: IFFALSE 27058
// begin SetLives ( i , 0 ) ;
27044: LD_VAR 0 1
27048: PPUSH
27049: LD_INT 0
27051: PPUSH
27052: CALL_OW 234
// end ;
27056: GO 27041
27058: POP
27059: POP
// end ;
27060: PPOPN 2
27062: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
27063: LD_EXP 58
27067: PUSH
27068: LD_EXP 64
27072: AND
27073: IFFALSE 27157
27075: GO 27077
27077: DISABLE
27078: LD_INT 0
27080: PPUSH
27081: PPUSH
// begin enable ;
27082: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
27083: LD_ADDR_VAR 0 2
27087: PUSH
27088: LD_INT 22
27090: PUSH
27091: LD_OWVAR 2
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: LD_INT 32
27102: PUSH
27103: LD_INT 3
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: PPUSH
27114: CALL_OW 69
27118: ST_TO_ADDR
// if not tmp then
27119: LD_VAR 0 2
27123: NOT
27124: IFFALSE 27128
// exit ;
27126: GO 27157
// for i in tmp do
27128: LD_ADDR_VAR 0 1
27132: PUSH
27133: LD_VAR 0 2
27137: PUSH
27138: FOR_IN
27139: IFFALSE 27155
// begin SetLives ( i , 0 ) ;
27141: LD_VAR 0 1
27145: PPUSH
27146: LD_INT 0
27148: PPUSH
27149: CALL_OW 234
// end ;
27153: GO 27138
27155: POP
27156: POP
// end ;
27157: PPOPN 2
27159: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
27160: LD_EXP 58
27164: PUSH
27165: LD_EXP 61
27169: AND
27170: IFFALSE 27263
27172: GO 27174
27174: DISABLE
27175: LD_INT 0
27177: PPUSH
// begin enable ;
27178: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
27179: LD_ADDR_VAR 0 1
27183: PUSH
27184: LD_INT 22
27186: PUSH
27187: LD_OWVAR 2
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: PUSH
27196: LD_INT 2
27198: PUSH
27199: LD_INT 25
27201: PUSH
27202: LD_INT 5
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: LD_INT 25
27211: PUSH
27212: LD_INT 9
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: LD_INT 25
27221: PUSH
27222: LD_INT 8
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PPUSH
27239: CALL_OW 69
27243: PUSH
27244: FOR_IN
27245: IFFALSE 27261
// begin SetClass ( i , 1 ) ;
27247: LD_VAR 0 1
27251: PPUSH
27252: LD_INT 1
27254: PPUSH
27255: CALL_OW 336
// end ;
27259: GO 27244
27261: POP
27262: POP
// end ;
27263: PPOPN 1
27265: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
27266: LD_EXP 58
27270: PUSH
27271: LD_EXP 62
27275: AND
27276: PUSH
27277: LD_OWVAR 65
27281: PUSH
27282: LD_INT 7
27284: LESS
27285: AND
27286: IFFALSE 27300
27288: GO 27290
27290: DISABLE
// begin enable ;
27291: ENABLE
// game_speed := 7 ;
27292: LD_ADDR_OWVAR 65
27296: PUSH
27297: LD_INT 7
27299: ST_TO_ADDR
// end ;
27300: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
27301: LD_EXP 58
27305: PUSH
27306: LD_EXP 65
27310: AND
27311: IFFALSE 27513
27313: GO 27315
27315: DISABLE
27316: LD_INT 0
27318: PPUSH
27319: PPUSH
27320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27321: LD_ADDR_VAR 0 3
27325: PUSH
27326: LD_INT 81
27328: PUSH
27329: LD_OWVAR 2
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: PUSH
27338: LD_INT 21
27340: PUSH
27341: LD_INT 1
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PPUSH
27352: CALL_OW 69
27356: ST_TO_ADDR
// if not tmp then
27357: LD_VAR 0 3
27361: NOT
27362: IFFALSE 27366
// exit ;
27364: GO 27513
// if tmp > 5 then
27366: LD_VAR 0 3
27370: PUSH
27371: LD_INT 5
27373: GREATER
27374: IFFALSE 27386
// k := 5 else
27376: LD_ADDR_VAR 0 2
27380: PUSH
27381: LD_INT 5
27383: ST_TO_ADDR
27384: GO 27396
// k := tmp ;
27386: LD_ADDR_VAR 0 2
27390: PUSH
27391: LD_VAR 0 3
27395: ST_TO_ADDR
// for i := 1 to k do
27396: LD_ADDR_VAR 0 1
27400: PUSH
27401: DOUBLE
27402: LD_INT 1
27404: DEC
27405: ST_TO_ADDR
27406: LD_VAR 0 2
27410: PUSH
27411: FOR_TO
27412: IFFALSE 27511
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
27414: LD_VAR 0 3
27418: PUSH
27419: LD_VAR 0 1
27423: ARRAY
27424: PPUSH
27425: LD_VAR 0 1
27429: PUSH
27430: LD_INT 4
27432: MOD
27433: PUSH
27434: LD_INT 1
27436: PLUS
27437: PPUSH
27438: CALL_OW 259
27442: PUSH
27443: LD_INT 10
27445: LESS
27446: IFFALSE 27509
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
27448: LD_VAR 0 3
27452: PUSH
27453: LD_VAR 0 1
27457: ARRAY
27458: PPUSH
27459: LD_VAR 0 1
27463: PUSH
27464: LD_INT 4
27466: MOD
27467: PUSH
27468: LD_INT 1
27470: PLUS
27471: PPUSH
27472: LD_VAR 0 3
27476: PUSH
27477: LD_VAR 0 1
27481: ARRAY
27482: PPUSH
27483: LD_VAR 0 1
27487: PUSH
27488: LD_INT 4
27490: MOD
27491: PUSH
27492: LD_INT 1
27494: PLUS
27495: PPUSH
27496: CALL_OW 259
27500: PUSH
27501: LD_INT 1
27503: PLUS
27504: PPUSH
27505: CALL_OW 237
27509: GO 27411
27511: POP
27512: POP
// end ;
27513: PPOPN 3
27515: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
27516: LD_EXP 58
27520: PUSH
27521: LD_EXP 66
27525: AND
27526: IFFALSE 27546
27528: GO 27530
27530: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
27531: LD_INT 4
27533: PPUSH
27534: LD_OWVAR 2
27538: PPUSH
27539: LD_INT 0
27541: PPUSH
27542: CALL_OW 324
27546: END
// every 0 0$1 trigger StreamModeActive and sShovel do
27547: LD_EXP 58
27551: PUSH
27552: LD_EXP 95
27556: AND
27557: IFFALSE 27577
27559: GO 27561
27561: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
27562: LD_INT 19
27564: PPUSH
27565: LD_OWVAR 2
27569: PPUSH
27570: LD_INT 0
27572: PPUSH
27573: CALL_OW 324
27577: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
27578: LD_EXP 58
27582: PUSH
27583: LD_EXP 67
27587: AND
27588: IFFALSE 27690
27590: GO 27592
27592: DISABLE
27593: LD_INT 0
27595: PPUSH
27596: PPUSH
// begin enable ;
27597: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
27598: LD_ADDR_VAR 0 2
27602: PUSH
27603: LD_INT 22
27605: PUSH
27606: LD_OWVAR 2
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PUSH
27615: LD_INT 2
27617: PUSH
27618: LD_INT 34
27620: PUSH
27621: LD_INT 11
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: PUSH
27628: LD_INT 34
27630: PUSH
27631: LD_INT 30
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: LIST
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: PPUSH
27647: CALL_OW 69
27651: ST_TO_ADDR
// if not tmp then
27652: LD_VAR 0 2
27656: NOT
27657: IFFALSE 27661
// exit ;
27659: GO 27690
// for i in tmp do
27661: LD_ADDR_VAR 0 1
27665: PUSH
27666: LD_VAR 0 2
27670: PUSH
27671: FOR_IN
27672: IFFALSE 27688
// begin SetLives ( i , 0 ) ;
27674: LD_VAR 0 1
27678: PPUSH
27679: LD_INT 0
27681: PPUSH
27682: CALL_OW 234
// end ;
27686: GO 27671
27688: POP
27689: POP
// end ;
27690: PPOPN 2
27692: END
// every 0 0$1 trigger StreamModeActive and sBunker do
27693: LD_EXP 58
27697: PUSH
27698: LD_EXP 68
27702: AND
27703: IFFALSE 27723
27705: GO 27707
27707: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
27708: LD_INT 32
27710: PPUSH
27711: LD_OWVAR 2
27715: PPUSH
27716: LD_INT 0
27718: PPUSH
27719: CALL_OW 324
27723: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
27724: LD_EXP 58
27728: PUSH
27729: LD_EXP 69
27733: AND
27734: IFFALSE 27915
27736: GO 27738
27738: DISABLE
27739: LD_INT 0
27741: PPUSH
27742: PPUSH
27743: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
27744: LD_ADDR_VAR 0 2
27748: PUSH
27749: LD_INT 22
27751: PUSH
27752: LD_OWVAR 2
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: PUSH
27761: LD_INT 33
27763: PUSH
27764: LD_INT 3
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PPUSH
27775: CALL_OW 69
27779: ST_TO_ADDR
// if not tmp then
27780: LD_VAR 0 2
27784: NOT
27785: IFFALSE 27789
// exit ;
27787: GO 27915
// side := 0 ;
27789: LD_ADDR_VAR 0 3
27793: PUSH
27794: LD_INT 0
27796: ST_TO_ADDR
// for i := 1 to 8 do
27797: LD_ADDR_VAR 0 1
27801: PUSH
27802: DOUBLE
27803: LD_INT 1
27805: DEC
27806: ST_TO_ADDR
27807: LD_INT 8
27809: PUSH
27810: FOR_TO
27811: IFFALSE 27859
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27813: LD_OWVAR 2
27817: PUSH
27818: LD_VAR 0 1
27822: NONEQUAL
27823: PUSH
27824: LD_OWVAR 2
27828: PPUSH
27829: LD_VAR 0 1
27833: PPUSH
27834: CALL_OW 81
27838: PUSH
27839: LD_INT 2
27841: EQUAL
27842: AND
27843: IFFALSE 27857
// begin side := i ;
27845: LD_ADDR_VAR 0 3
27849: PUSH
27850: LD_VAR 0 1
27854: ST_TO_ADDR
// break ;
27855: GO 27859
// end ;
27857: GO 27810
27859: POP
27860: POP
// if not side then
27861: LD_VAR 0 3
27865: NOT
27866: IFFALSE 27870
// exit ;
27868: GO 27915
// for i := 1 to tmp do
27870: LD_ADDR_VAR 0 1
27874: PUSH
27875: DOUBLE
27876: LD_INT 1
27878: DEC
27879: ST_TO_ADDR
27880: LD_VAR 0 2
27884: PUSH
27885: FOR_TO
27886: IFFALSE 27913
// if Prob ( 60 ) then
27888: LD_INT 60
27890: PPUSH
27891: CALL_OW 13
27895: IFFALSE 27911
// SetSide ( i , side ) ;
27897: LD_VAR 0 1
27901: PPUSH
27902: LD_VAR 0 3
27906: PPUSH
27907: CALL_OW 235
27911: GO 27885
27913: POP
27914: POP
// end ;
27915: PPOPN 3
27917: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27918: LD_EXP 58
27922: PUSH
27923: LD_EXP 71
27927: AND
27928: IFFALSE 28047
27930: GO 27932
27932: DISABLE
27933: LD_INT 0
27935: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27936: LD_ADDR_VAR 0 1
27940: PUSH
27941: LD_INT 22
27943: PUSH
27944: LD_OWVAR 2
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 21
27955: PUSH
27956: LD_INT 1
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PUSH
27963: LD_INT 3
27965: PUSH
27966: LD_INT 23
27968: PUSH
27969: LD_INT 0
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: LIST
27984: PPUSH
27985: CALL_OW 69
27989: PUSH
27990: FOR_IN
27991: IFFALSE 28045
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27993: LD_VAR 0 1
27997: PPUSH
27998: CALL_OW 257
28002: PUSH
28003: LD_INT 1
28005: PUSH
28006: LD_INT 2
28008: PUSH
28009: LD_INT 3
28011: PUSH
28012: LD_INT 4
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: IN
28021: IFFALSE 28043
// SetClass ( un , rand ( 1 , 4 ) ) ;
28023: LD_VAR 0 1
28027: PPUSH
28028: LD_INT 1
28030: PPUSH
28031: LD_INT 4
28033: PPUSH
28034: CALL_OW 12
28038: PPUSH
28039: CALL_OW 336
28043: GO 27990
28045: POP
28046: POP
// end ;
28047: PPOPN 1
28049: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
28050: LD_EXP 58
28054: PUSH
28055: LD_EXP 70
28059: AND
28060: IFFALSE 28139
28062: GO 28064
28064: DISABLE
28065: LD_INT 0
28067: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28068: LD_ADDR_VAR 0 1
28072: PUSH
28073: LD_INT 22
28075: PUSH
28076: LD_OWVAR 2
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: LD_INT 21
28087: PUSH
28088: LD_INT 3
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PPUSH
28099: CALL_OW 69
28103: ST_TO_ADDR
// if not tmp then
28104: LD_VAR 0 1
28108: NOT
28109: IFFALSE 28113
// exit ;
28111: GO 28139
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
28113: LD_VAR 0 1
28117: PUSH
28118: LD_INT 1
28120: PPUSH
28121: LD_VAR 0 1
28125: PPUSH
28126: CALL_OW 12
28130: ARRAY
28131: PPUSH
28132: LD_INT 100
28134: PPUSH
28135: CALL_OW 234
// end ;
28139: PPOPN 1
28141: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
28142: LD_EXP 58
28146: PUSH
28147: LD_EXP 72
28151: AND
28152: IFFALSE 28250
28154: GO 28156
28156: DISABLE
28157: LD_INT 0
28159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28160: LD_ADDR_VAR 0 1
28164: PUSH
28165: LD_INT 22
28167: PUSH
28168: LD_OWVAR 2
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 21
28179: PUSH
28180: LD_INT 1
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: PPUSH
28191: CALL_OW 69
28195: ST_TO_ADDR
// if not tmp then
28196: LD_VAR 0 1
28200: NOT
28201: IFFALSE 28205
// exit ;
28203: GO 28250
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
28205: LD_VAR 0 1
28209: PUSH
28210: LD_INT 1
28212: PPUSH
28213: LD_VAR 0 1
28217: PPUSH
28218: CALL_OW 12
28222: ARRAY
28223: PPUSH
28224: LD_INT 1
28226: PPUSH
28227: LD_INT 4
28229: PPUSH
28230: CALL_OW 12
28234: PPUSH
28235: LD_INT 3000
28237: PPUSH
28238: LD_INT 9000
28240: PPUSH
28241: CALL_OW 12
28245: PPUSH
28246: CALL_OW 492
// end ;
28250: PPOPN 1
28252: END
// every 0 0$1 trigger StreamModeActive and sDepot do
28253: LD_EXP 58
28257: PUSH
28258: LD_EXP 73
28262: AND
28263: IFFALSE 28283
28265: GO 28267
28267: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
28268: LD_INT 1
28270: PPUSH
28271: LD_OWVAR 2
28275: PPUSH
28276: LD_INT 0
28278: PPUSH
28279: CALL_OW 324
28283: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
28284: LD_EXP 58
28288: PUSH
28289: LD_EXP 74
28293: AND
28294: IFFALSE 28377
28296: GO 28298
28298: DISABLE
28299: LD_INT 0
28301: PPUSH
28302: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28303: LD_ADDR_VAR 0 2
28307: PUSH
28308: LD_INT 22
28310: PUSH
28311: LD_OWVAR 2
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 21
28322: PUSH
28323: LD_INT 3
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PPUSH
28334: CALL_OW 69
28338: ST_TO_ADDR
// if not tmp then
28339: LD_VAR 0 2
28343: NOT
28344: IFFALSE 28348
// exit ;
28346: GO 28377
// for i in tmp do
28348: LD_ADDR_VAR 0 1
28352: PUSH
28353: LD_VAR 0 2
28357: PUSH
28358: FOR_IN
28359: IFFALSE 28375
// SetBLevel ( i , 10 ) ;
28361: LD_VAR 0 1
28365: PPUSH
28366: LD_INT 10
28368: PPUSH
28369: CALL_OW 241
28373: GO 28358
28375: POP
28376: POP
// end ;
28377: PPOPN 2
28379: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
28380: LD_EXP 58
28384: PUSH
28385: LD_EXP 75
28389: AND
28390: IFFALSE 28501
28392: GO 28394
28394: DISABLE
28395: LD_INT 0
28397: PPUSH
28398: PPUSH
28399: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28400: LD_ADDR_VAR 0 3
28404: PUSH
28405: LD_INT 22
28407: PUSH
28408: LD_OWVAR 2
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 25
28419: PUSH
28420: LD_INT 1
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PPUSH
28431: CALL_OW 69
28435: ST_TO_ADDR
// if not tmp then
28436: LD_VAR 0 3
28440: NOT
28441: IFFALSE 28445
// exit ;
28443: GO 28501
// un := tmp [ rand ( 1 , tmp ) ] ;
28445: LD_ADDR_VAR 0 2
28449: PUSH
28450: LD_VAR 0 3
28454: PUSH
28455: LD_INT 1
28457: PPUSH
28458: LD_VAR 0 3
28462: PPUSH
28463: CALL_OW 12
28467: ARRAY
28468: ST_TO_ADDR
// if Crawls ( un ) then
28469: LD_VAR 0 2
28473: PPUSH
28474: CALL_OW 318
28478: IFFALSE 28489
// ComWalk ( un ) ;
28480: LD_VAR 0 2
28484: PPUSH
28485: CALL_OW 138
// SetClass ( un , class_sniper ) ;
28489: LD_VAR 0 2
28493: PPUSH
28494: LD_INT 5
28496: PPUSH
28497: CALL_OW 336
// end ;
28501: PPOPN 3
28503: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
28504: LD_EXP 58
28508: PUSH
28509: LD_EXP 76
28513: AND
28514: PUSH
28515: LD_OWVAR 67
28519: PUSH
28520: LD_INT 4
28522: LESS
28523: AND
28524: IFFALSE 28543
28526: GO 28528
28528: DISABLE
// begin Difficulty := Difficulty + 1 ;
28529: LD_ADDR_OWVAR 67
28533: PUSH
28534: LD_OWVAR 67
28538: PUSH
28539: LD_INT 1
28541: PLUS
28542: ST_TO_ADDR
// end ;
28543: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
28544: LD_EXP 58
28548: PUSH
28549: LD_EXP 77
28553: AND
28554: IFFALSE 28657
28556: GO 28558
28558: DISABLE
28559: LD_INT 0
28561: PPUSH
// begin for i := 1 to 5 do
28562: LD_ADDR_VAR 0 1
28566: PUSH
28567: DOUBLE
28568: LD_INT 1
28570: DEC
28571: ST_TO_ADDR
28572: LD_INT 5
28574: PUSH
28575: FOR_TO
28576: IFFALSE 28655
// begin uc_nation := nation_nature ;
28578: LD_ADDR_OWVAR 21
28582: PUSH
28583: LD_INT 0
28585: ST_TO_ADDR
// uc_side := 0 ;
28586: LD_ADDR_OWVAR 20
28590: PUSH
28591: LD_INT 0
28593: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28594: LD_ADDR_OWVAR 29
28598: PUSH
28599: LD_INT 12
28601: PUSH
28602: LD_INT 12
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: ST_TO_ADDR
// hc_agressivity := 20 ;
28609: LD_ADDR_OWVAR 35
28613: PUSH
28614: LD_INT 20
28616: ST_TO_ADDR
// hc_class := class_tiger ;
28617: LD_ADDR_OWVAR 28
28621: PUSH
28622: LD_INT 14
28624: ST_TO_ADDR
// hc_gallery :=  ;
28625: LD_ADDR_OWVAR 33
28629: PUSH
28630: LD_STRING 
28632: ST_TO_ADDR
// hc_name :=  ;
28633: LD_ADDR_OWVAR 26
28637: PUSH
28638: LD_STRING 
28640: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
28641: CALL_OW 44
28645: PPUSH
28646: LD_INT 0
28648: PPUSH
28649: CALL_OW 51
// end ;
28653: GO 28575
28655: POP
28656: POP
// end ;
28657: PPOPN 1
28659: END
// every 0 0$1 trigger StreamModeActive and sBomb do
28660: LD_EXP 58
28664: PUSH
28665: LD_EXP 78
28669: AND
28670: IFFALSE 28679
28672: GO 28674
28674: DISABLE
// StreamSibBomb ;
28675: CALL 28680 0 0
28679: END
// export function StreamSibBomb ; var i , x , y ; begin
28680: LD_INT 0
28682: PPUSH
28683: PPUSH
28684: PPUSH
28685: PPUSH
// result := false ;
28686: LD_ADDR_VAR 0 1
28690: PUSH
28691: LD_INT 0
28693: ST_TO_ADDR
// for i := 1 to 16 do
28694: LD_ADDR_VAR 0 2
28698: PUSH
28699: DOUBLE
28700: LD_INT 1
28702: DEC
28703: ST_TO_ADDR
28704: LD_INT 16
28706: PUSH
28707: FOR_TO
28708: IFFALSE 28907
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28710: LD_ADDR_VAR 0 3
28714: PUSH
28715: LD_INT 10
28717: PUSH
28718: LD_INT 20
28720: PUSH
28721: LD_INT 30
28723: PUSH
28724: LD_INT 40
28726: PUSH
28727: LD_INT 50
28729: PUSH
28730: LD_INT 60
28732: PUSH
28733: LD_INT 70
28735: PUSH
28736: LD_INT 80
28738: PUSH
28739: LD_INT 90
28741: PUSH
28742: LD_INT 100
28744: PUSH
28745: LD_INT 110
28747: PUSH
28748: LD_INT 120
28750: PUSH
28751: LD_INT 130
28753: PUSH
28754: LD_INT 140
28756: PUSH
28757: LD_INT 150
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: LIST
28769: LIST
28770: LIST
28771: LIST
28772: LIST
28773: LIST
28774: LIST
28775: LIST
28776: PUSH
28777: LD_INT 1
28779: PPUSH
28780: LD_INT 15
28782: PPUSH
28783: CALL_OW 12
28787: ARRAY
28788: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28789: LD_ADDR_VAR 0 4
28793: PUSH
28794: LD_INT 10
28796: PUSH
28797: LD_INT 20
28799: PUSH
28800: LD_INT 30
28802: PUSH
28803: LD_INT 40
28805: PUSH
28806: LD_INT 50
28808: PUSH
28809: LD_INT 60
28811: PUSH
28812: LD_INT 70
28814: PUSH
28815: LD_INT 80
28817: PUSH
28818: LD_INT 90
28820: PUSH
28821: LD_INT 100
28823: PUSH
28824: LD_INT 110
28826: PUSH
28827: LD_INT 120
28829: PUSH
28830: LD_INT 130
28832: PUSH
28833: LD_INT 140
28835: PUSH
28836: LD_INT 150
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: PUSH
28856: LD_INT 1
28858: PPUSH
28859: LD_INT 15
28861: PPUSH
28862: CALL_OW 12
28866: ARRAY
28867: ST_TO_ADDR
// if ValidHex ( x , y ) then
28868: LD_VAR 0 3
28872: PPUSH
28873: LD_VAR 0 4
28877: PPUSH
28878: CALL_OW 488
28882: IFFALSE 28905
// begin result := [ x , y ] ;
28884: LD_ADDR_VAR 0 1
28888: PUSH
28889: LD_VAR 0 3
28893: PUSH
28894: LD_VAR 0 4
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: ST_TO_ADDR
// break ;
28903: GO 28907
// end ; end ;
28905: GO 28707
28907: POP
28908: POP
// if result then
28909: LD_VAR 0 1
28913: IFFALSE 28973
// begin ToLua ( playSibBomb() ) ;
28915: LD_STRING playSibBomb()
28917: PPUSH
28918: CALL_OW 559
// wait ( 0 0$14 ) ;
28922: LD_INT 490
28924: PPUSH
28925: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28929: LD_VAR 0 1
28933: PUSH
28934: LD_INT 1
28936: ARRAY
28937: PPUSH
28938: LD_VAR 0 1
28942: PUSH
28943: LD_INT 2
28945: ARRAY
28946: PPUSH
28947: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28951: LD_VAR 0 1
28955: PUSH
28956: LD_INT 1
28958: ARRAY
28959: PPUSH
28960: LD_VAR 0 1
28964: PUSH
28965: LD_INT 2
28967: ARRAY
28968: PPUSH
28969: CALL_OW 429
// end ; end ;
28973: LD_VAR 0 1
28977: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28978: LD_EXP 58
28982: PUSH
28983: LD_EXP 80
28987: AND
28988: IFFALSE 29000
28990: GO 28992
28992: DISABLE
// YouLost (  ) ;
28993: LD_STRING 
28995: PPUSH
28996: CALL_OW 104
29000: END
// every 0 0$1 trigger StreamModeActive and sFog do
29001: LD_EXP 58
29005: PUSH
29006: LD_EXP 79
29010: AND
29011: IFFALSE 29025
29013: GO 29015
29015: DISABLE
// FogOff ( your_side ) ;
29016: LD_OWVAR 2
29020: PPUSH
29021: CALL_OW 344
29025: END
// every 0 0$1 trigger StreamModeActive and sSun do
29026: LD_EXP 58
29030: PUSH
29031: LD_EXP 81
29035: AND
29036: IFFALSE 29064
29038: GO 29040
29040: DISABLE
// begin solar_recharge_percent := 0 ;
29041: LD_ADDR_OWVAR 79
29045: PUSH
29046: LD_INT 0
29048: ST_TO_ADDR
// wait ( 5 5$00 ) ;
29049: LD_INT 10500
29051: PPUSH
29052: CALL_OW 67
// solar_recharge_percent := 100 ;
29056: LD_ADDR_OWVAR 79
29060: PUSH
29061: LD_INT 100
29063: ST_TO_ADDR
// end ;
29064: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
29065: LD_EXP 58
29069: PUSH
29070: LD_EXP 82
29074: AND
29075: IFFALSE 29314
29077: GO 29079
29079: DISABLE
29080: LD_INT 0
29082: PPUSH
29083: PPUSH
29084: PPUSH
// begin tmp := [ ] ;
29085: LD_ADDR_VAR 0 3
29089: PUSH
29090: EMPTY
29091: ST_TO_ADDR
// for i := 1 to 6 do
29092: LD_ADDR_VAR 0 1
29096: PUSH
29097: DOUBLE
29098: LD_INT 1
29100: DEC
29101: ST_TO_ADDR
29102: LD_INT 6
29104: PUSH
29105: FOR_TO
29106: IFFALSE 29211
// begin uc_nation := nation_nature ;
29108: LD_ADDR_OWVAR 21
29112: PUSH
29113: LD_INT 0
29115: ST_TO_ADDR
// uc_side := 0 ;
29116: LD_ADDR_OWVAR 20
29120: PUSH
29121: LD_INT 0
29123: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29124: LD_ADDR_OWVAR 29
29128: PUSH
29129: LD_INT 12
29131: PUSH
29132: LD_INT 12
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: ST_TO_ADDR
// hc_agressivity := 20 ;
29139: LD_ADDR_OWVAR 35
29143: PUSH
29144: LD_INT 20
29146: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
29147: LD_ADDR_OWVAR 28
29151: PUSH
29152: LD_INT 17
29154: ST_TO_ADDR
// hc_gallery :=  ;
29155: LD_ADDR_OWVAR 33
29159: PUSH
29160: LD_STRING 
29162: ST_TO_ADDR
// hc_name :=  ;
29163: LD_ADDR_OWVAR 26
29167: PUSH
29168: LD_STRING 
29170: ST_TO_ADDR
// un := CreateHuman ;
29171: LD_ADDR_VAR 0 2
29175: PUSH
29176: CALL_OW 44
29180: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
29181: LD_VAR 0 2
29185: PPUSH
29186: LD_INT 1
29188: PPUSH
29189: CALL_OW 51
// tmp := tmp ^ un ;
29193: LD_ADDR_VAR 0 3
29197: PUSH
29198: LD_VAR 0 3
29202: PUSH
29203: LD_VAR 0 2
29207: ADD
29208: ST_TO_ADDR
// end ;
29209: GO 29105
29211: POP
29212: POP
// repeat wait ( 0 0$1 ) ;
29213: LD_INT 35
29215: PPUSH
29216: CALL_OW 67
// for un in tmp do
29220: LD_ADDR_VAR 0 2
29224: PUSH
29225: LD_VAR 0 3
29229: PUSH
29230: FOR_IN
29231: IFFALSE 29305
// begin if IsDead ( un ) then
29233: LD_VAR 0 2
29237: PPUSH
29238: CALL_OW 301
29242: IFFALSE 29262
// begin tmp := tmp diff un ;
29244: LD_ADDR_VAR 0 3
29248: PUSH
29249: LD_VAR 0 3
29253: PUSH
29254: LD_VAR 0 2
29258: DIFF
29259: ST_TO_ADDR
// continue ;
29260: GO 29230
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
29262: LD_VAR 0 2
29266: PPUSH
29267: LD_INT 3
29269: PUSH
29270: LD_INT 22
29272: PUSH
29273: LD_INT 0
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PPUSH
29284: CALL_OW 69
29288: PPUSH
29289: LD_VAR 0 2
29293: PPUSH
29294: CALL_OW 74
29298: PPUSH
29299: CALL_OW 115
// end ;
29303: GO 29230
29305: POP
29306: POP
// until not tmp ;
29307: LD_VAR 0 3
29311: NOT
29312: IFFALSE 29213
// end ;
29314: PPOPN 3
29316: END
// every 0 0$1 trigger StreamModeActive and sTroll do
29317: LD_EXP 58
29321: PUSH
29322: LD_EXP 83
29326: AND
29327: IFFALSE 29381
29329: GO 29331
29331: DISABLE
// begin ToLua ( displayTroll(); ) ;
29332: LD_STRING displayTroll();
29334: PPUSH
29335: CALL_OW 559
// wait ( 3 3$00 ) ;
29339: LD_INT 6300
29341: PPUSH
29342: CALL_OW 67
// ToLua ( hideTroll(); ) ;
29346: LD_STRING hideTroll();
29348: PPUSH
29349: CALL_OW 559
// wait ( 1 1$00 ) ;
29353: LD_INT 2100
29355: PPUSH
29356: CALL_OW 67
// ToLua ( displayTroll(); ) ;
29360: LD_STRING displayTroll();
29362: PPUSH
29363: CALL_OW 559
// wait ( 1 1$00 ) ;
29367: LD_INT 2100
29369: PPUSH
29370: CALL_OW 67
// ToLua ( hideTroll(); ) ;
29374: LD_STRING hideTroll();
29376: PPUSH
29377: CALL_OW 559
// end ;
29381: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
29382: LD_EXP 58
29386: PUSH
29387: LD_EXP 84
29391: AND
29392: IFFALSE 29455
29394: GO 29396
29396: DISABLE
29397: LD_INT 0
29399: PPUSH
// begin p := 0 ;
29400: LD_ADDR_VAR 0 1
29404: PUSH
29405: LD_INT 0
29407: ST_TO_ADDR
// repeat game_speed := 1 ;
29408: LD_ADDR_OWVAR 65
29412: PUSH
29413: LD_INT 1
29415: ST_TO_ADDR
// wait ( 0 0$1 ) ;
29416: LD_INT 35
29418: PPUSH
29419: CALL_OW 67
// p := p + 1 ;
29423: LD_ADDR_VAR 0 1
29427: PUSH
29428: LD_VAR 0 1
29432: PUSH
29433: LD_INT 1
29435: PLUS
29436: ST_TO_ADDR
// until p >= 60 ;
29437: LD_VAR 0 1
29441: PUSH
29442: LD_INT 60
29444: GREATEREQUAL
29445: IFFALSE 29408
// game_speed := 4 ;
29447: LD_ADDR_OWVAR 65
29451: PUSH
29452: LD_INT 4
29454: ST_TO_ADDR
// end ;
29455: PPOPN 1
29457: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
29458: LD_EXP 58
29462: PUSH
29463: LD_EXP 85
29467: AND
29468: IFFALSE 29614
29470: GO 29472
29472: DISABLE
29473: LD_INT 0
29475: PPUSH
29476: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29477: LD_ADDR_VAR 0 1
29481: PUSH
29482: LD_INT 22
29484: PUSH
29485: LD_OWVAR 2
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: LD_INT 2
29496: PUSH
29497: LD_INT 30
29499: PUSH
29500: LD_INT 0
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 30
29509: PUSH
29510: LD_INT 1
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: LIST
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: PPUSH
29526: CALL_OW 69
29530: ST_TO_ADDR
// if not depot then
29531: LD_VAR 0 1
29535: NOT
29536: IFFALSE 29540
// exit ;
29538: GO 29614
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
29540: LD_ADDR_VAR 0 2
29544: PUSH
29545: LD_VAR 0 1
29549: PUSH
29550: LD_INT 1
29552: PPUSH
29553: LD_VAR 0 1
29557: PPUSH
29558: CALL_OW 12
29562: ARRAY
29563: PPUSH
29564: CALL_OW 274
29568: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
29569: LD_VAR 0 2
29573: PPUSH
29574: LD_INT 1
29576: PPUSH
29577: LD_INT 0
29579: PPUSH
29580: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
29584: LD_VAR 0 2
29588: PPUSH
29589: LD_INT 2
29591: PPUSH
29592: LD_INT 0
29594: PPUSH
29595: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
29599: LD_VAR 0 2
29603: PPUSH
29604: LD_INT 3
29606: PPUSH
29607: LD_INT 0
29609: PPUSH
29610: CALL_OW 277
// end ;
29614: PPOPN 2
29616: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
29617: LD_EXP 58
29621: PUSH
29622: LD_EXP 86
29626: AND
29627: IFFALSE 29724
29629: GO 29631
29631: DISABLE
29632: LD_INT 0
29634: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29635: LD_ADDR_VAR 0 1
29639: PUSH
29640: LD_INT 22
29642: PUSH
29643: LD_OWVAR 2
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: PUSH
29652: LD_INT 21
29654: PUSH
29655: LD_INT 1
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: LD_INT 3
29664: PUSH
29665: LD_INT 23
29667: PUSH
29668: LD_INT 0
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: LIST
29683: PPUSH
29684: CALL_OW 69
29688: ST_TO_ADDR
// if not tmp then
29689: LD_VAR 0 1
29693: NOT
29694: IFFALSE 29698
// exit ;
29696: GO 29724
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
29698: LD_VAR 0 1
29702: PUSH
29703: LD_INT 1
29705: PPUSH
29706: LD_VAR 0 1
29710: PPUSH
29711: CALL_OW 12
29715: ARRAY
29716: PPUSH
29717: LD_INT 200
29719: PPUSH
29720: CALL_OW 234
// end ;
29724: PPOPN 1
29726: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
29727: LD_EXP 58
29731: PUSH
29732: LD_EXP 87
29736: AND
29737: IFFALSE 29816
29739: GO 29741
29741: DISABLE
29742: LD_INT 0
29744: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
29745: LD_ADDR_VAR 0 1
29749: PUSH
29750: LD_INT 22
29752: PUSH
29753: LD_OWVAR 2
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: PUSH
29762: LD_INT 21
29764: PUSH
29765: LD_INT 2
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PPUSH
29776: CALL_OW 69
29780: ST_TO_ADDR
// if not tmp then
29781: LD_VAR 0 1
29785: NOT
29786: IFFALSE 29790
// exit ;
29788: GO 29816
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29790: LD_VAR 0 1
29794: PUSH
29795: LD_INT 1
29797: PPUSH
29798: LD_VAR 0 1
29802: PPUSH
29803: CALL_OW 12
29807: ARRAY
29808: PPUSH
29809: LD_INT 60
29811: PPUSH
29812: CALL_OW 234
// end ;
29816: PPOPN 1
29818: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29819: LD_EXP 58
29823: PUSH
29824: LD_EXP 88
29828: AND
29829: IFFALSE 29928
29831: GO 29833
29833: DISABLE
29834: LD_INT 0
29836: PPUSH
29837: PPUSH
// begin enable ;
29838: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29839: LD_ADDR_VAR 0 1
29843: PUSH
29844: LD_INT 22
29846: PUSH
29847: LD_OWVAR 2
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: LD_INT 61
29858: PUSH
29859: EMPTY
29860: LIST
29861: PUSH
29862: LD_INT 33
29864: PUSH
29865: LD_INT 2
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: LIST
29876: PPUSH
29877: CALL_OW 69
29881: ST_TO_ADDR
// if not tmp then
29882: LD_VAR 0 1
29886: NOT
29887: IFFALSE 29891
// exit ;
29889: GO 29928
// for i in tmp do
29891: LD_ADDR_VAR 0 2
29895: PUSH
29896: LD_VAR 0 1
29900: PUSH
29901: FOR_IN
29902: IFFALSE 29926
// if IsControledBy ( i ) then
29904: LD_VAR 0 2
29908: PPUSH
29909: CALL_OW 312
29913: IFFALSE 29924
// ComUnlink ( i ) ;
29915: LD_VAR 0 2
29919: PPUSH
29920: CALL_OW 136
29924: GO 29901
29926: POP
29927: POP
// end ;
29928: PPOPN 2
29930: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29931: LD_EXP 58
29935: PUSH
29936: LD_EXP 89
29940: AND
29941: IFFALSE 30081
29943: GO 29945
29945: DISABLE
29946: LD_INT 0
29948: PPUSH
29949: PPUSH
// begin ToLua ( displayPowell(); ) ;
29950: LD_STRING displayPowell();
29952: PPUSH
29953: CALL_OW 559
// uc_side := 0 ;
29957: LD_ADDR_OWVAR 20
29961: PUSH
29962: LD_INT 0
29964: ST_TO_ADDR
// uc_nation := 2 ;
29965: LD_ADDR_OWVAR 21
29969: PUSH
29970: LD_INT 2
29972: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29973: LD_ADDR_OWVAR 37
29977: PUSH
29978: LD_INT 14
29980: ST_TO_ADDR
// vc_engine := engine_siberite ;
29981: LD_ADDR_OWVAR 39
29985: PUSH
29986: LD_INT 3
29988: ST_TO_ADDR
// vc_control := control_apeman ;
29989: LD_ADDR_OWVAR 38
29993: PUSH
29994: LD_INT 5
29996: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29997: LD_ADDR_OWVAR 40
30001: PUSH
30002: LD_INT 29
30004: ST_TO_ADDR
// un := CreateVehicle ;
30005: LD_ADDR_VAR 0 2
30009: PUSH
30010: CALL_OW 45
30014: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30015: LD_VAR 0 2
30019: PPUSH
30020: LD_INT 1
30022: PPUSH
30023: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30027: LD_INT 35
30029: PPUSH
30030: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30034: LD_VAR 0 2
30038: PPUSH
30039: LD_INT 22
30041: PUSH
30042: LD_OWVAR 2
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: PPUSH
30051: CALL_OW 69
30055: PPUSH
30056: LD_VAR 0 2
30060: PPUSH
30061: CALL_OW 74
30065: PPUSH
30066: CALL_OW 115
// until IsDead ( un ) ;
30070: LD_VAR 0 2
30074: PPUSH
30075: CALL_OW 301
30079: IFFALSE 30027
// end ;
30081: PPOPN 2
30083: END
// every 0 0$1 trigger StreamModeActive and sStu do
30084: LD_EXP 58
30088: PUSH
30089: LD_EXP 97
30093: AND
30094: IFFALSE 30110
30096: GO 30098
30098: DISABLE
// begin ToLua ( displayStucuk(); ) ;
30099: LD_STRING displayStucuk();
30101: PPUSH
30102: CALL_OW 559
// ResetFog ;
30106: CALL_OW 335
// end ;
30110: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
30111: LD_EXP 58
30115: PUSH
30116: LD_EXP 90
30120: AND
30121: IFFALSE 30262
30123: GO 30125
30125: DISABLE
30126: LD_INT 0
30128: PPUSH
30129: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30130: LD_ADDR_VAR 0 2
30134: PUSH
30135: LD_INT 22
30137: PUSH
30138: LD_OWVAR 2
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: LD_INT 21
30149: PUSH
30150: LD_INT 1
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: PPUSH
30161: CALL_OW 69
30165: ST_TO_ADDR
// if not tmp then
30166: LD_VAR 0 2
30170: NOT
30171: IFFALSE 30175
// exit ;
30173: GO 30262
// un := tmp [ rand ( 1 , tmp ) ] ;
30175: LD_ADDR_VAR 0 1
30179: PUSH
30180: LD_VAR 0 2
30184: PUSH
30185: LD_INT 1
30187: PPUSH
30188: LD_VAR 0 2
30192: PPUSH
30193: CALL_OW 12
30197: ARRAY
30198: ST_TO_ADDR
// SetSide ( un , 0 ) ;
30199: LD_VAR 0 1
30203: PPUSH
30204: LD_INT 0
30206: PPUSH
30207: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
30211: LD_VAR 0 1
30215: PPUSH
30216: LD_OWVAR 3
30220: PUSH
30221: LD_VAR 0 1
30225: DIFF
30226: PPUSH
30227: LD_VAR 0 1
30231: PPUSH
30232: CALL_OW 74
30236: PPUSH
30237: CALL_OW 115
// wait ( 0 0$20 ) ;
30241: LD_INT 700
30243: PPUSH
30244: CALL_OW 67
// SetSide ( un , your_side ) ;
30248: LD_VAR 0 1
30252: PPUSH
30253: LD_OWVAR 2
30257: PPUSH
30258: CALL_OW 235
// end ;
30262: PPOPN 2
30264: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
30265: LD_EXP 58
30269: PUSH
30270: LD_EXP 91
30274: AND
30275: IFFALSE 30381
30277: GO 30279
30279: DISABLE
30280: LD_INT 0
30282: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30283: LD_ADDR_VAR 0 1
30287: PUSH
30288: LD_INT 22
30290: PUSH
30291: LD_OWVAR 2
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 2
30302: PUSH
30303: LD_INT 30
30305: PUSH
30306: LD_INT 0
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 30
30315: PUSH
30316: LD_INT 1
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: LIST
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PPUSH
30332: CALL_OW 69
30336: ST_TO_ADDR
// if not depot then
30337: LD_VAR 0 1
30341: NOT
30342: IFFALSE 30346
// exit ;
30344: GO 30381
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
30346: LD_VAR 0 1
30350: PUSH
30351: LD_INT 1
30353: ARRAY
30354: PPUSH
30355: CALL_OW 250
30359: PPUSH
30360: LD_VAR 0 1
30364: PUSH
30365: LD_INT 1
30367: ARRAY
30368: PPUSH
30369: CALL_OW 251
30373: PPUSH
30374: LD_INT 70
30376: PPUSH
30377: CALL_OW 495
// end ;
30381: PPOPN 1
30383: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
30384: LD_EXP 58
30388: PUSH
30389: LD_EXP 92
30393: AND
30394: IFFALSE 30605
30396: GO 30398
30398: DISABLE
30399: LD_INT 0
30401: PPUSH
30402: PPUSH
30403: PPUSH
30404: PPUSH
30405: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30406: LD_ADDR_VAR 0 5
30410: PUSH
30411: LD_INT 22
30413: PUSH
30414: LD_OWVAR 2
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PUSH
30423: LD_INT 21
30425: PUSH
30426: LD_INT 1
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PPUSH
30437: CALL_OW 69
30441: ST_TO_ADDR
// if not tmp then
30442: LD_VAR 0 5
30446: NOT
30447: IFFALSE 30451
// exit ;
30449: GO 30605
// for i in tmp do
30451: LD_ADDR_VAR 0 1
30455: PUSH
30456: LD_VAR 0 5
30460: PUSH
30461: FOR_IN
30462: IFFALSE 30603
// begin d := rand ( 0 , 5 ) ;
30464: LD_ADDR_VAR 0 4
30468: PUSH
30469: LD_INT 0
30471: PPUSH
30472: LD_INT 5
30474: PPUSH
30475: CALL_OW 12
30479: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
30480: LD_ADDR_VAR 0 2
30484: PUSH
30485: LD_VAR 0 1
30489: PPUSH
30490: CALL_OW 250
30494: PPUSH
30495: LD_VAR 0 4
30499: PPUSH
30500: LD_INT 3
30502: PPUSH
30503: LD_INT 12
30505: PPUSH
30506: CALL_OW 12
30510: PPUSH
30511: CALL_OW 272
30515: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
30516: LD_ADDR_VAR 0 3
30520: PUSH
30521: LD_VAR 0 1
30525: PPUSH
30526: CALL_OW 251
30530: PPUSH
30531: LD_VAR 0 4
30535: PPUSH
30536: LD_INT 3
30538: PPUSH
30539: LD_INT 12
30541: PPUSH
30542: CALL_OW 12
30546: PPUSH
30547: CALL_OW 273
30551: ST_TO_ADDR
// if ValidHex ( x , y ) then
30552: LD_VAR 0 2
30556: PPUSH
30557: LD_VAR 0 3
30561: PPUSH
30562: CALL_OW 488
30566: IFFALSE 30601
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
30568: LD_VAR 0 1
30572: PPUSH
30573: LD_VAR 0 2
30577: PPUSH
30578: LD_VAR 0 3
30582: PPUSH
30583: LD_INT 3
30585: PPUSH
30586: LD_INT 6
30588: PPUSH
30589: CALL_OW 12
30593: PPUSH
30594: LD_INT 1
30596: PPUSH
30597: CALL_OW 483
// end ;
30601: GO 30461
30603: POP
30604: POP
// end ;
30605: PPOPN 5
30607: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
30608: LD_EXP 58
30612: PUSH
30613: LD_EXP 93
30617: AND
30618: IFFALSE 30712
30620: GO 30622
30622: DISABLE
30623: LD_INT 0
30625: PPUSH
30626: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
30627: LD_ADDR_VAR 0 2
30631: PUSH
30632: LD_INT 22
30634: PUSH
30635: LD_OWVAR 2
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: LD_INT 32
30646: PUSH
30647: LD_INT 1
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 21
30656: PUSH
30657: LD_INT 2
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: LIST
30668: PPUSH
30669: CALL_OW 69
30673: ST_TO_ADDR
// if not tmp then
30674: LD_VAR 0 2
30678: NOT
30679: IFFALSE 30683
// exit ;
30681: GO 30712
// for i in tmp do
30683: LD_ADDR_VAR 0 1
30687: PUSH
30688: LD_VAR 0 2
30692: PUSH
30693: FOR_IN
30694: IFFALSE 30710
// SetFuel ( i , 0 ) ;
30696: LD_VAR 0 1
30700: PPUSH
30701: LD_INT 0
30703: PPUSH
30704: CALL_OW 240
30708: GO 30693
30710: POP
30711: POP
// end ;
30712: PPOPN 2
30714: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
30715: LD_EXP 58
30719: PUSH
30720: LD_EXP 94
30724: AND
30725: IFFALSE 30791
30727: GO 30729
30729: DISABLE
30730: LD_INT 0
30732: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30733: LD_ADDR_VAR 0 1
30737: PUSH
30738: LD_INT 22
30740: PUSH
30741: LD_OWVAR 2
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: LD_INT 30
30752: PUSH
30753: LD_INT 29
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PPUSH
30764: CALL_OW 69
30768: ST_TO_ADDR
// if not tmp then
30769: LD_VAR 0 1
30773: NOT
30774: IFFALSE 30778
// exit ;
30776: GO 30791
// DestroyUnit ( tmp [ 1 ] ) ;
30778: LD_VAR 0 1
30782: PUSH
30783: LD_INT 1
30785: ARRAY
30786: PPUSH
30787: CALL_OW 65
// end ;
30791: PPOPN 1
30793: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30794: LD_EXP 58
30798: PUSH
30799: LD_EXP 96
30803: AND
30804: IFFALSE 30933
30806: GO 30808
30808: DISABLE
30809: LD_INT 0
30811: PPUSH
// begin uc_side := 0 ;
30812: LD_ADDR_OWVAR 20
30816: PUSH
30817: LD_INT 0
30819: ST_TO_ADDR
// uc_nation := nation_arabian ;
30820: LD_ADDR_OWVAR 21
30824: PUSH
30825: LD_INT 2
30827: ST_TO_ADDR
// hc_gallery :=  ;
30828: LD_ADDR_OWVAR 33
30832: PUSH
30833: LD_STRING 
30835: ST_TO_ADDR
// hc_name :=  ;
30836: LD_ADDR_OWVAR 26
30840: PUSH
30841: LD_STRING 
30843: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30844: LD_INT 1
30846: PPUSH
30847: LD_INT 11
30849: PPUSH
30850: LD_INT 10
30852: PPUSH
30853: CALL_OW 380
// un := CreateHuman ;
30857: LD_ADDR_VAR 0 1
30861: PUSH
30862: CALL_OW 44
30866: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30867: LD_VAR 0 1
30871: PPUSH
30872: LD_INT 1
30874: PPUSH
30875: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30879: LD_INT 35
30881: PPUSH
30882: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30886: LD_VAR 0 1
30890: PPUSH
30891: LD_INT 22
30893: PUSH
30894: LD_OWVAR 2
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PPUSH
30903: CALL_OW 69
30907: PPUSH
30908: LD_VAR 0 1
30912: PPUSH
30913: CALL_OW 74
30917: PPUSH
30918: CALL_OW 115
// until IsDead ( un ) ;
30922: LD_VAR 0 1
30926: PPUSH
30927: CALL_OW 301
30931: IFFALSE 30879
// end ;
30933: PPOPN 1
30935: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30936: LD_EXP 58
30940: PUSH
30941: LD_EXP 98
30945: AND
30946: IFFALSE 30958
30948: GO 30950
30950: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30951: LD_STRING earthquake(getX(game), 0, 32)
30953: PPUSH
30954: CALL_OW 559
30958: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30959: LD_EXP 58
30963: PUSH
30964: LD_EXP 99
30968: AND
30969: IFFALSE 31060
30971: GO 30973
30973: DISABLE
30974: LD_INT 0
30976: PPUSH
// begin enable ;
30977: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30978: LD_ADDR_VAR 0 1
30982: PUSH
30983: LD_INT 22
30985: PUSH
30986: LD_OWVAR 2
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 21
30997: PUSH
30998: LD_INT 2
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 33
31007: PUSH
31008: LD_INT 3
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: LIST
31019: PPUSH
31020: CALL_OW 69
31024: ST_TO_ADDR
// if not tmp then
31025: LD_VAR 0 1
31029: NOT
31030: IFFALSE 31034
// exit ;
31032: GO 31060
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31034: LD_VAR 0 1
31038: PUSH
31039: LD_INT 1
31041: PPUSH
31042: LD_VAR 0 1
31046: PPUSH
31047: CALL_OW 12
31051: ARRAY
31052: PPUSH
31053: LD_INT 1
31055: PPUSH
31056: CALL_OW 234
// end ;
31060: PPOPN 1
31062: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
31063: LD_EXP 58
31067: PUSH
31068: LD_EXP 100
31072: AND
31073: IFFALSE 31214
31075: GO 31077
31077: DISABLE
31078: LD_INT 0
31080: PPUSH
31081: PPUSH
31082: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31083: LD_ADDR_VAR 0 3
31087: PUSH
31088: LD_INT 22
31090: PUSH
31091: LD_OWVAR 2
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: PUSH
31100: LD_INT 25
31102: PUSH
31103: LD_INT 1
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: PPUSH
31114: CALL_OW 69
31118: ST_TO_ADDR
// if not tmp then
31119: LD_VAR 0 3
31123: NOT
31124: IFFALSE 31128
// exit ;
31126: GO 31214
// un := tmp [ rand ( 1 , tmp ) ] ;
31128: LD_ADDR_VAR 0 2
31132: PUSH
31133: LD_VAR 0 3
31137: PUSH
31138: LD_INT 1
31140: PPUSH
31141: LD_VAR 0 3
31145: PPUSH
31146: CALL_OW 12
31150: ARRAY
31151: ST_TO_ADDR
// if Crawls ( un ) then
31152: LD_VAR 0 2
31156: PPUSH
31157: CALL_OW 318
31161: IFFALSE 31172
// ComWalk ( un ) ;
31163: LD_VAR 0 2
31167: PPUSH
31168: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
31172: LD_VAR 0 2
31176: PPUSH
31177: LD_INT 9
31179: PPUSH
31180: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
31184: LD_INT 28
31186: PPUSH
31187: LD_OWVAR 2
31191: PPUSH
31192: LD_INT 2
31194: PPUSH
31195: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
31199: LD_INT 29
31201: PPUSH
31202: LD_OWVAR 2
31206: PPUSH
31207: LD_INT 2
31209: PPUSH
31210: CALL_OW 322
// end ;
31214: PPOPN 3
31216: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
31217: LD_EXP 58
31221: PUSH
31222: LD_EXP 101
31226: AND
31227: IFFALSE 31338
31229: GO 31231
31231: DISABLE
31232: LD_INT 0
31234: PPUSH
31235: PPUSH
31236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31237: LD_ADDR_VAR 0 3
31241: PUSH
31242: LD_INT 22
31244: PUSH
31245: LD_OWVAR 2
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: PUSH
31254: LD_INT 25
31256: PUSH
31257: LD_INT 1
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PPUSH
31268: CALL_OW 69
31272: ST_TO_ADDR
// if not tmp then
31273: LD_VAR 0 3
31277: NOT
31278: IFFALSE 31282
// exit ;
31280: GO 31338
// un := tmp [ rand ( 1 , tmp ) ] ;
31282: LD_ADDR_VAR 0 2
31286: PUSH
31287: LD_VAR 0 3
31291: PUSH
31292: LD_INT 1
31294: PPUSH
31295: LD_VAR 0 3
31299: PPUSH
31300: CALL_OW 12
31304: ARRAY
31305: ST_TO_ADDR
// if Crawls ( un ) then
31306: LD_VAR 0 2
31310: PPUSH
31311: CALL_OW 318
31315: IFFALSE 31326
// ComWalk ( un ) ;
31317: LD_VAR 0 2
31321: PPUSH
31322: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31326: LD_VAR 0 2
31330: PPUSH
31331: LD_INT 8
31333: PPUSH
31334: CALL_OW 336
// end ;
31338: PPOPN 3
31340: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
31341: LD_EXP 58
31345: PUSH
31346: LD_EXP 102
31350: AND
31351: IFFALSE 31495
31353: GO 31355
31355: DISABLE
31356: LD_INT 0
31358: PPUSH
31359: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
31360: LD_ADDR_VAR 0 2
31364: PUSH
31365: LD_INT 22
31367: PUSH
31368: LD_OWVAR 2
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 21
31379: PUSH
31380: LD_INT 2
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: LD_INT 2
31389: PUSH
31390: LD_INT 34
31392: PUSH
31393: LD_INT 12
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: LD_INT 34
31402: PUSH
31403: LD_INT 51
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: LD_INT 34
31412: PUSH
31413: LD_INT 32
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: LIST
31430: PPUSH
31431: CALL_OW 69
31435: ST_TO_ADDR
// if not tmp then
31436: LD_VAR 0 2
31440: NOT
31441: IFFALSE 31445
// exit ;
31443: GO 31495
// for i in tmp do
31445: LD_ADDR_VAR 0 1
31449: PUSH
31450: LD_VAR 0 2
31454: PUSH
31455: FOR_IN
31456: IFFALSE 31493
// if GetCargo ( i , mat_artifact ) = 0 then
31458: LD_VAR 0 1
31462: PPUSH
31463: LD_INT 4
31465: PPUSH
31466: CALL_OW 289
31470: PUSH
31471: LD_INT 0
31473: EQUAL
31474: IFFALSE 31491
// SetCargo ( i , mat_siberit , 100 ) ;
31476: LD_VAR 0 1
31480: PPUSH
31481: LD_INT 3
31483: PPUSH
31484: LD_INT 100
31486: PPUSH
31487: CALL_OW 290
31491: GO 31455
31493: POP
31494: POP
// end ;
31495: PPOPN 2
31497: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
31498: LD_EXP 58
31502: PUSH
31503: LD_EXP 103
31507: AND
31508: IFFALSE 31691
31510: GO 31512
31512: DISABLE
31513: LD_INT 0
31515: PPUSH
31516: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31517: LD_ADDR_VAR 0 2
31521: PUSH
31522: LD_INT 22
31524: PUSH
31525: LD_OWVAR 2
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PPUSH
31534: CALL_OW 69
31538: ST_TO_ADDR
// if not tmp then
31539: LD_VAR 0 2
31543: NOT
31544: IFFALSE 31548
// exit ;
31546: GO 31691
// for i := 1 to 2 do
31548: LD_ADDR_VAR 0 1
31552: PUSH
31553: DOUBLE
31554: LD_INT 1
31556: DEC
31557: ST_TO_ADDR
31558: LD_INT 2
31560: PUSH
31561: FOR_TO
31562: IFFALSE 31689
// begin uc_side := your_side ;
31564: LD_ADDR_OWVAR 20
31568: PUSH
31569: LD_OWVAR 2
31573: ST_TO_ADDR
// uc_nation := nation_american ;
31574: LD_ADDR_OWVAR 21
31578: PUSH
31579: LD_INT 1
31581: ST_TO_ADDR
// vc_chassis := us_morphling ;
31582: LD_ADDR_OWVAR 37
31586: PUSH
31587: LD_INT 5
31589: ST_TO_ADDR
// vc_engine := engine_siberite ;
31590: LD_ADDR_OWVAR 39
31594: PUSH
31595: LD_INT 3
31597: ST_TO_ADDR
// vc_control := control_computer ;
31598: LD_ADDR_OWVAR 38
31602: PUSH
31603: LD_INT 3
31605: ST_TO_ADDR
// vc_weapon := us_double_laser ;
31606: LD_ADDR_OWVAR 40
31610: PUSH
31611: LD_INT 10
31613: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
31614: LD_VAR 0 2
31618: PUSH
31619: LD_INT 1
31621: ARRAY
31622: PPUSH
31623: CALL_OW 310
31627: NOT
31628: IFFALSE 31675
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
31630: CALL_OW 45
31634: PPUSH
31635: LD_VAR 0 2
31639: PUSH
31640: LD_INT 1
31642: ARRAY
31643: PPUSH
31644: CALL_OW 250
31648: PPUSH
31649: LD_VAR 0 2
31653: PUSH
31654: LD_INT 1
31656: ARRAY
31657: PPUSH
31658: CALL_OW 251
31662: PPUSH
31663: LD_INT 12
31665: PPUSH
31666: LD_INT 1
31668: PPUSH
31669: CALL_OW 50
31673: GO 31687
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
31675: CALL_OW 45
31679: PPUSH
31680: LD_INT 1
31682: PPUSH
31683: CALL_OW 51
// end ;
31687: GO 31561
31689: POP
31690: POP
// end ;
31691: PPOPN 2
31693: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
31694: LD_EXP 58
31698: PUSH
31699: LD_EXP 104
31703: AND
31704: IFFALSE 31926
31706: GO 31708
31708: DISABLE
31709: LD_INT 0
31711: PPUSH
31712: PPUSH
31713: PPUSH
31714: PPUSH
31715: PPUSH
31716: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31717: LD_ADDR_VAR 0 6
31721: PUSH
31722: LD_INT 22
31724: PUSH
31725: LD_OWVAR 2
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 21
31736: PUSH
31737: LD_INT 1
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 3
31746: PUSH
31747: LD_INT 23
31749: PUSH
31750: LD_INT 0
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: LIST
31765: PPUSH
31766: CALL_OW 69
31770: ST_TO_ADDR
// if not tmp then
31771: LD_VAR 0 6
31775: NOT
31776: IFFALSE 31780
// exit ;
31778: GO 31926
// s1 := rand ( 1 , 4 ) ;
31780: LD_ADDR_VAR 0 2
31784: PUSH
31785: LD_INT 1
31787: PPUSH
31788: LD_INT 4
31790: PPUSH
31791: CALL_OW 12
31795: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31796: LD_ADDR_VAR 0 4
31800: PUSH
31801: LD_VAR 0 6
31805: PUSH
31806: LD_INT 1
31808: ARRAY
31809: PPUSH
31810: LD_VAR 0 2
31814: PPUSH
31815: CALL_OW 259
31819: ST_TO_ADDR
// if s1 = 1 then
31820: LD_VAR 0 2
31824: PUSH
31825: LD_INT 1
31827: EQUAL
31828: IFFALSE 31848
// s2 := rand ( 2 , 4 ) else
31830: LD_ADDR_VAR 0 3
31834: PUSH
31835: LD_INT 2
31837: PPUSH
31838: LD_INT 4
31840: PPUSH
31841: CALL_OW 12
31845: ST_TO_ADDR
31846: GO 31856
// s2 := 1 ;
31848: LD_ADDR_VAR 0 3
31852: PUSH
31853: LD_INT 1
31855: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31856: LD_ADDR_VAR 0 5
31860: PUSH
31861: LD_VAR 0 6
31865: PUSH
31866: LD_INT 1
31868: ARRAY
31869: PPUSH
31870: LD_VAR 0 3
31874: PPUSH
31875: CALL_OW 259
31879: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31880: LD_VAR 0 6
31884: PUSH
31885: LD_INT 1
31887: ARRAY
31888: PPUSH
31889: LD_VAR 0 2
31893: PPUSH
31894: LD_VAR 0 5
31898: PPUSH
31899: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31903: LD_VAR 0 6
31907: PUSH
31908: LD_INT 1
31910: ARRAY
31911: PPUSH
31912: LD_VAR 0 3
31916: PPUSH
31917: LD_VAR 0 4
31921: PPUSH
31922: CALL_OW 237
// end ;
31926: PPOPN 6
31928: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31929: LD_EXP 58
31933: PUSH
31934: LD_EXP 105
31938: AND
31939: IFFALSE 32018
31941: GO 31943
31943: DISABLE
31944: LD_INT 0
31946: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31947: LD_ADDR_VAR 0 1
31951: PUSH
31952: LD_INT 22
31954: PUSH
31955: LD_OWVAR 2
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 30
31966: PUSH
31967: LD_INT 3
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: PPUSH
31978: CALL_OW 69
31982: ST_TO_ADDR
// if not tmp then
31983: LD_VAR 0 1
31987: NOT
31988: IFFALSE 31992
// exit ;
31990: GO 32018
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31992: LD_VAR 0 1
31996: PUSH
31997: LD_INT 1
31999: PPUSH
32000: LD_VAR 0 1
32004: PPUSH
32005: CALL_OW 12
32009: ARRAY
32010: PPUSH
32011: LD_INT 1
32013: PPUSH
32014: CALL_OW 234
// end ;
32018: PPOPN 1
32020: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
32021: LD_EXP 58
32025: PUSH
32026: LD_EXP 106
32030: AND
32031: IFFALSE 32143
32033: GO 32035
32035: DISABLE
32036: LD_INT 0
32038: PPUSH
32039: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
32040: LD_ADDR_VAR 0 2
32044: PUSH
32045: LD_INT 22
32047: PUSH
32048: LD_OWVAR 2
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 2
32059: PUSH
32060: LD_INT 30
32062: PUSH
32063: LD_INT 27
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 30
32072: PUSH
32073: LD_INT 26
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 30
32082: PUSH
32083: LD_INT 28
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: PPUSH
32100: CALL_OW 69
32104: ST_TO_ADDR
// if not tmp then
32105: LD_VAR 0 2
32109: NOT
32110: IFFALSE 32114
// exit ;
32112: GO 32143
// for i in tmp do
32114: LD_ADDR_VAR 0 1
32118: PUSH
32119: LD_VAR 0 2
32123: PUSH
32124: FOR_IN
32125: IFFALSE 32141
// SetLives ( i , 1 ) ;
32127: LD_VAR 0 1
32131: PPUSH
32132: LD_INT 1
32134: PPUSH
32135: CALL_OW 234
32139: GO 32124
32141: POP
32142: POP
// end ;
32143: PPOPN 2
32145: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
32146: LD_EXP 58
32150: PUSH
32151: LD_EXP 107
32155: AND
32156: IFFALSE 32443
32158: GO 32160
32160: DISABLE
32161: LD_INT 0
32163: PPUSH
32164: PPUSH
32165: PPUSH
// begin i := rand ( 1 , 7 ) ;
32166: LD_ADDR_VAR 0 1
32170: PUSH
32171: LD_INT 1
32173: PPUSH
32174: LD_INT 7
32176: PPUSH
32177: CALL_OW 12
32181: ST_TO_ADDR
// case i of 1 :
32182: LD_VAR 0 1
32186: PUSH
32187: LD_INT 1
32189: DOUBLE
32190: EQUAL
32191: IFTRUE 32195
32193: GO 32205
32195: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
32196: LD_STRING earthquake(getX(game), 0, 32)
32198: PPUSH
32199: CALL_OW 559
32203: GO 32443
32205: LD_INT 2
32207: DOUBLE
32208: EQUAL
32209: IFTRUE 32213
32211: GO 32227
32213: POP
// begin ToLua ( displayStucuk(); ) ;
32214: LD_STRING displayStucuk();
32216: PPUSH
32217: CALL_OW 559
// ResetFog ;
32221: CALL_OW 335
// end ; 3 :
32225: GO 32443
32227: LD_INT 3
32229: DOUBLE
32230: EQUAL
32231: IFTRUE 32235
32233: GO 32339
32235: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32236: LD_ADDR_VAR 0 2
32240: PUSH
32241: LD_INT 22
32243: PUSH
32244: LD_OWVAR 2
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 25
32255: PUSH
32256: LD_INT 1
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PPUSH
32267: CALL_OW 69
32271: ST_TO_ADDR
// if not tmp then
32272: LD_VAR 0 2
32276: NOT
32277: IFFALSE 32281
// exit ;
32279: GO 32443
// un := tmp [ rand ( 1 , tmp ) ] ;
32281: LD_ADDR_VAR 0 3
32285: PUSH
32286: LD_VAR 0 2
32290: PUSH
32291: LD_INT 1
32293: PPUSH
32294: LD_VAR 0 2
32298: PPUSH
32299: CALL_OW 12
32303: ARRAY
32304: ST_TO_ADDR
// if Crawls ( un ) then
32305: LD_VAR 0 3
32309: PPUSH
32310: CALL_OW 318
32314: IFFALSE 32325
// ComWalk ( un ) ;
32316: LD_VAR 0 3
32320: PPUSH
32321: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32325: LD_VAR 0 3
32329: PPUSH
32330: LD_INT 8
32332: PPUSH
32333: CALL_OW 336
// end ; 4 :
32337: GO 32443
32339: LD_INT 4
32341: DOUBLE
32342: EQUAL
32343: IFTRUE 32347
32345: GO 32421
32347: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
32348: LD_ADDR_VAR 0 2
32352: PUSH
32353: LD_INT 22
32355: PUSH
32356: LD_OWVAR 2
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 30
32367: PUSH
32368: LD_INT 29
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PPUSH
32379: CALL_OW 69
32383: ST_TO_ADDR
// if not tmp then
32384: LD_VAR 0 2
32388: NOT
32389: IFFALSE 32393
// exit ;
32391: GO 32443
// CenterNowOnUnits ( tmp [ 1 ] ) ;
32393: LD_VAR 0 2
32397: PUSH
32398: LD_INT 1
32400: ARRAY
32401: PPUSH
32402: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
32406: LD_VAR 0 2
32410: PUSH
32411: LD_INT 1
32413: ARRAY
32414: PPUSH
32415: CALL_OW 65
// end ; 5 .. 7 :
32419: GO 32443
32421: LD_INT 5
32423: DOUBLE
32424: GREATEREQUAL
32425: IFFALSE 32433
32427: LD_INT 7
32429: DOUBLE
32430: LESSEQUAL
32431: IFTRUE 32435
32433: GO 32442
32435: POP
// StreamSibBomb ; end ;
32436: CALL 28680 0 0
32440: GO 32443
32442: POP
// end ;
32443: PPOPN 3
32445: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
32446: LD_EXP 58
32450: PUSH
32451: LD_EXP 108
32455: AND
32456: IFFALSE 32612
32458: GO 32460
32460: DISABLE
32461: LD_INT 0
32463: PPUSH
32464: PPUSH
32465: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
32466: LD_ADDR_VAR 0 2
32470: PUSH
32471: LD_INT 81
32473: PUSH
32474: LD_OWVAR 2
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: LD_INT 2
32485: PUSH
32486: LD_INT 21
32488: PUSH
32489: LD_INT 1
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PUSH
32496: LD_INT 21
32498: PUSH
32499: LD_INT 2
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: LIST
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PPUSH
32515: CALL_OW 69
32519: ST_TO_ADDR
// if not tmp then
32520: LD_VAR 0 2
32524: NOT
32525: IFFALSE 32529
// exit ;
32527: GO 32612
// p := 0 ;
32529: LD_ADDR_VAR 0 3
32533: PUSH
32534: LD_INT 0
32536: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32537: LD_INT 35
32539: PPUSH
32540: CALL_OW 67
// p := p + 1 ;
32544: LD_ADDR_VAR 0 3
32548: PUSH
32549: LD_VAR 0 3
32553: PUSH
32554: LD_INT 1
32556: PLUS
32557: ST_TO_ADDR
// for i in tmp do
32558: LD_ADDR_VAR 0 1
32562: PUSH
32563: LD_VAR 0 2
32567: PUSH
32568: FOR_IN
32569: IFFALSE 32600
// if GetLives ( i ) < 1000 then
32571: LD_VAR 0 1
32575: PPUSH
32576: CALL_OW 256
32580: PUSH
32581: LD_INT 1000
32583: LESS
32584: IFFALSE 32598
// SetLives ( i , 1000 ) ;
32586: LD_VAR 0 1
32590: PPUSH
32591: LD_INT 1000
32593: PPUSH
32594: CALL_OW 234
32598: GO 32568
32600: POP
32601: POP
// until p > 20 ;
32602: LD_VAR 0 3
32606: PUSH
32607: LD_INT 20
32609: GREATER
32610: IFFALSE 32537
// end ;
32612: PPOPN 3
32614: END
// every 0 0$1 trigger StreamModeActive and sTime do
32615: LD_EXP 58
32619: PUSH
32620: LD_EXP 109
32624: AND
32625: IFFALSE 32660
32627: GO 32629
32629: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
32630: LD_INT 28
32632: PPUSH
32633: LD_OWVAR 2
32637: PPUSH
32638: LD_INT 2
32640: PPUSH
32641: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
32645: LD_INT 30
32647: PPUSH
32648: LD_OWVAR 2
32652: PPUSH
32653: LD_INT 2
32655: PPUSH
32656: CALL_OW 322
// end ;
32660: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
32661: LD_EXP 58
32665: PUSH
32666: LD_EXP 110
32670: AND
32671: IFFALSE 32792
32673: GO 32675
32675: DISABLE
32676: LD_INT 0
32678: PPUSH
32679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32680: LD_ADDR_VAR 0 2
32684: PUSH
32685: LD_INT 22
32687: PUSH
32688: LD_OWVAR 2
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: LD_INT 21
32699: PUSH
32700: LD_INT 1
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: LD_INT 3
32709: PUSH
32710: LD_INT 23
32712: PUSH
32713: LD_INT 0
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: LIST
32728: PPUSH
32729: CALL_OW 69
32733: ST_TO_ADDR
// if not tmp then
32734: LD_VAR 0 2
32738: NOT
32739: IFFALSE 32743
// exit ;
32741: GO 32792
// for i in tmp do
32743: LD_ADDR_VAR 0 1
32747: PUSH
32748: LD_VAR 0 2
32752: PUSH
32753: FOR_IN
32754: IFFALSE 32790
// begin if Crawls ( i ) then
32756: LD_VAR 0 1
32760: PPUSH
32761: CALL_OW 318
32765: IFFALSE 32776
// ComWalk ( i ) ;
32767: LD_VAR 0 1
32771: PPUSH
32772: CALL_OW 138
// SetClass ( i , 2 ) ;
32776: LD_VAR 0 1
32780: PPUSH
32781: LD_INT 2
32783: PPUSH
32784: CALL_OW 336
// end ;
32788: GO 32753
32790: POP
32791: POP
// end ;
32792: PPOPN 2
32794: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32795: LD_EXP 58
32799: PUSH
32800: LD_EXP 111
32804: AND
32805: IFFALSE 33093
32807: GO 32809
32809: DISABLE
32810: LD_INT 0
32812: PPUSH
32813: PPUSH
32814: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32815: LD_OWVAR 2
32819: PPUSH
32820: LD_INT 9
32822: PPUSH
32823: LD_INT 1
32825: PPUSH
32826: LD_INT 1
32828: PPUSH
32829: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32833: LD_INT 9
32835: PPUSH
32836: LD_OWVAR 2
32840: PPUSH
32841: CALL_OW 343
// uc_side := 9 ;
32845: LD_ADDR_OWVAR 20
32849: PUSH
32850: LD_INT 9
32852: ST_TO_ADDR
// uc_nation := 2 ;
32853: LD_ADDR_OWVAR 21
32857: PUSH
32858: LD_INT 2
32860: ST_TO_ADDR
// hc_name := Dark Warrior ;
32861: LD_ADDR_OWVAR 26
32865: PUSH
32866: LD_STRING Dark Warrior
32868: ST_TO_ADDR
// hc_gallery :=  ;
32869: LD_ADDR_OWVAR 33
32873: PUSH
32874: LD_STRING 
32876: ST_TO_ADDR
// hc_noskilllimit := true ;
32877: LD_ADDR_OWVAR 76
32881: PUSH
32882: LD_INT 1
32884: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32885: LD_ADDR_OWVAR 31
32889: PUSH
32890: LD_INT 30
32892: PUSH
32893: LD_INT 30
32895: PUSH
32896: LD_INT 30
32898: PUSH
32899: LD_INT 30
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: ST_TO_ADDR
// un := CreateHuman ;
32908: LD_ADDR_VAR 0 3
32912: PUSH
32913: CALL_OW 44
32917: ST_TO_ADDR
// hc_noskilllimit := false ;
32918: LD_ADDR_OWVAR 76
32922: PUSH
32923: LD_INT 0
32925: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32926: LD_VAR 0 3
32930: PPUSH
32931: LD_INT 1
32933: PPUSH
32934: CALL_OW 51
// ToLua ( playRanger() ) ;
32938: LD_STRING playRanger()
32940: PPUSH
32941: CALL_OW 559
// p := 0 ;
32945: LD_ADDR_VAR 0 2
32949: PUSH
32950: LD_INT 0
32952: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32953: LD_INT 35
32955: PPUSH
32956: CALL_OW 67
// p := p + 1 ;
32960: LD_ADDR_VAR 0 2
32964: PUSH
32965: LD_VAR 0 2
32969: PUSH
32970: LD_INT 1
32972: PLUS
32973: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32974: LD_VAR 0 3
32978: PPUSH
32979: CALL_OW 256
32983: PUSH
32984: LD_INT 1000
32986: LESS
32987: IFFALSE 33001
// SetLives ( un , 1000 ) ;
32989: LD_VAR 0 3
32993: PPUSH
32994: LD_INT 1000
32996: PPUSH
32997: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
33001: LD_VAR 0 3
33005: PPUSH
33006: LD_INT 81
33008: PUSH
33009: LD_OWVAR 2
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 91
33020: PUSH
33021: LD_VAR 0 3
33025: PUSH
33026: LD_INT 30
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: LIST
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PPUSH
33038: CALL_OW 69
33042: PPUSH
33043: LD_VAR 0 3
33047: PPUSH
33048: CALL_OW 74
33052: PPUSH
33053: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
33057: LD_VAR 0 2
33061: PUSH
33062: LD_INT 80
33064: GREATER
33065: PUSH
33066: LD_VAR 0 3
33070: PPUSH
33071: CALL_OW 301
33075: OR
33076: IFFALSE 32953
// if un then
33078: LD_VAR 0 3
33082: IFFALSE 33093
// RemoveUnit ( un ) ;
33084: LD_VAR 0 3
33088: PPUSH
33089: CALL_OW 64
// end ;
33093: PPOPN 3
33095: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
33096: LD_EXP 112
33100: IFFALSE 33216
33102: GO 33104
33104: DISABLE
33105: LD_INT 0
33107: PPUSH
33108: PPUSH
33109: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
33110: LD_ADDR_VAR 0 2
33114: PUSH
33115: LD_INT 81
33117: PUSH
33118: LD_OWVAR 2
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 21
33129: PUSH
33130: LD_INT 1
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PPUSH
33141: CALL_OW 69
33145: ST_TO_ADDR
// ToLua ( playComputer() ) ;
33146: LD_STRING playComputer()
33148: PPUSH
33149: CALL_OW 559
// if not tmp then
33153: LD_VAR 0 2
33157: NOT
33158: IFFALSE 33162
// exit ;
33160: GO 33216
// for i in tmp do
33162: LD_ADDR_VAR 0 1
33166: PUSH
33167: LD_VAR 0 2
33171: PUSH
33172: FOR_IN
33173: IFFALSE 33214
// for j := 1 to 4 do
33175: LD_ADDR_VAR 0 3
33179: PUSH
33180: DOUBLE
33181: LD_INT 1
33183: DEC
33184: ST_TO_ADDR
33185: LD_INT 4
33187: PUSH
33188: FOR_TO
33189: IFFALSE 33210
// SetSkill ( i , j , 10 ) ;
33191: LD_VAR 0 1
33195: PPUSH
33196: LD_VAR 0 3
33200: PPUSH
33201: LD_INT 10
33203: PPUSH
33204: CALL_OW 237
33208: GO 33188
33210: POP
33211: POP
33212: GO 33172
33214: POP
33215: POP
// end ;
33216: PPOPN 3
33218: END
// every 0 0$1 trigger s30 do var i , tmp ;
33219: LD_EXP 113
33223: IFFALSE 33292
33225: GO 33227
33227: DISABLE
33228: LD_INT 0
33230: PPUSH
33231: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33232: LD_ADDR_VAR 0 2
33236: PUSH
33237: LD_INT 22
33239: PUSH
33240: LD_OWVAR 2
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PPUSH
33249: CALL_OW 69
33253: ST_TO_ADDR
// if not tmp then
33254: LD_VAR 0 2
33258: NOT
33259: IFFALSE 33263
// exit ;
33261: GO 33292
// for i in tmp do
33263: LD_ADDR_VAR 0 1
33267: PUSH
33268: LD_VAR 0 2
33272: PUSH
33273: FOR_IN
33274: IFFALSE 33290
// SetLives ( i , 300 ) ;
33276: LD_VAR 0 1
33280: PPUSH
33281: LD_INT 300
33283: PPUSH
33284: CALL_OW 234
33288: GO 33273
33290: POP
33291: POP
// end ;
33292: PPOPN 2
33294: END
// every 0 0$1 trigger s60 do var i , tmp ;
33295: LD_EXP 114
33299: IFFALSE 33368
33301: GO 33303
33303: DISABLE
33304: LD_INT 0
33306: PPUSH
33307: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33308: LD_ADDR_VAR 0 2
33312: PUSH
33313: LD_INT 22
33315: PUSH
33316: LD_OWVAR 2
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PPUSH
33325: CALL_OW 69
33329: ST_TO_ADDR
// if not tmp then
33330: LD_VAR 0 2
33334: NOT
33335: IFFALSE 33339
// exit ;
33337: GO 33368
// for i in tmp do
33339: LD_ADDR_VAR 0 1
33343: PUSH
33344: LD_VAR 0 2
33348: PUSH
33349: FOR_IN
33350: IFFALSE 33366
// SetLives ( i , 600 ) ;
33352: LD_VAR 0 1
33356: PPUSH
33357: LD_INT 600
33359: PPUSH
33360: CALL_OW 234
33364: GO 33349
33366: POP
33367: POP
// end ;
33368: PPOPN 2
33370: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
33371: LD_INT 0
33373: PPUSH
// case cmd of 301 :
33374: LD_VAR 0 1
33378: PUSH
33379: LD_INT 301
33381: DOUBLE
33382: EQUAL
33383: IFTRUE 33387
33385: GO 33419
33387: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
33388: LD_VAR 0 6
33392: PPUSH
33393: LD_VAR 0 7
33397: PPUSH
33398: LD_VAR 0 8
33402: PPUSH
33403: LD_VAR 0 4
33407: PPUSH
33408: LD_VAR 0 5
33412: PPUSH
33413: CALL 34628 0 5
33417: GO 33540
33419: LD_INT 302
33421: DOUBLE
33422: EQUAL
33423: IFTRUE 33427
33425: GO 33464
33427: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
33428: LD_VAR 0 6
33432: PPUSH
33433: LD_VAR 0 7
33437: PPUSH
33438: LD_VAR 0 8
33442: PPUSH
33443: LD_VAR 0 9
33447: PPUSH
33448: LD_VAR 0 4
33452: PPUSH
33453: LD_VAR 0 5
33457: PPUSH
33458: CALL 34719 0 6
33462: GO 33540
33464: LD_INT 303
33466: DOUBLE
33467: EQUAL
33468: IFTRUE 33472
33470: GO 33509
33472: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
33473: LD_VAR 0 6
33477: PPUSH
33478: LD_VAR 0 7
33482: PPUSH
33483: LD_VAR 0 8
33487: PPUSH
33488: LD_VAR 0 9
33492: PPUSH
33493: LD_VAR 0 4
33497: PPUSH
33498: LD_VAR 0 5
33502: PPUSH
33503: CALL 33545 0 6
33507: GO 33540
33509: LD_INT 304
33511: DOUBLE
33512: EQUAL
33513: IFTRUE 33517
33515: GO 33539
33517: POP
// hHackTeleport ( unit , x , y ) ; end ;
33518: LD_VAR 0 2
33522: PPUSH
33523: LD_VAR 0 4
33527: PPUSH
33528: LD_VAR 0 5
33532: PPUSH
33533: CALL 35312 0 3
33537: GO 33540
33539: POP
// end ;
33540: LD_VAR 0 12
33544: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
33545: LD_INT 0
33547: PPUSH
33548: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
33549: LD_VAR 0 1
33553: PUSH
33554: LD_INT 1
33556: LESS
33557: PUSH
33558: LD_VAR 0 1
33562: PUSH
33563: LD_INT 3
33565: GREATER
33566: OR
33567: PUSH
33568: LD_VAR 0 5
33572: PPUSH
33573: LD_VAR 0 6
33577: PPUSH
33578: CALL_OW 428
33582: OR
33583: IFFALSE 33587
// exit ;
33585: GO 34315
// uc_side := your_side ;
33587: LD_ADDR_OWVAR 20
33591: PUSH
33592: LD_OWVAR 2
33596: ST_TO_ADDR
// uc_nation := nation ;
33597: LD_ADDR_OWVAR 21
33601: PUSH
33602: LD_VAR 0 1
33606: ST_TO_ADDR
// bc_level = 1 ;
33607: LD_ADDR_OWVAR 43
33611: PUSH
33612: LD_INT 1
33614: ST_TO_ADDR
// case btype of 1 :
33615: LD_VAR 0 2
33619: PUSH
33620: LD_INT 1
33622: DOUBLE
33623: EQUAL
33624: IFTRUE 33628
33626: GO 33639
33628: POP
// bc_type := b_depot ; 2 :
33629: LD_ADDR_OWVAR 42
33633: PUSH
33634: LD_INT 0
33636: ST_TO_ADDR
33637: GO 34259
33639: LD_INT 2
33641: DOUBLE
33642: EQUAL
33643: IFTRUE 33647
33645: GO 33658
33647: POP
// bc_type := b_warehouse ; 3 :
33648: LD_ADDR_OWVAR 42
33652: PUSH
33653: LD_INT 1
33655: ST_TO_ADDR
33656: GO 34259
33658: LD_INT 3
33660: DOUBLE
33661: EQUAL
33662: IFTRUE 33666
33664: GO 33677
33666: POP
// bc_type := b_lab ; 4 .. 9 :
33667: LD_ADDR_OWVAR 42
33671: PUSH
33672: LD_INT 6
33674: ST_TO_ADDR
33675: GO 34259
33677: LD_INT 4
33679: DOUBLE
33680: GREATEREQUAL
33681: IFFALSE 33689
33683: LD_INT 9
33685: DOUBLE
33686: LESSEQUAL
33687: IFTRUE 33691
33689: GO 33751
33691: POP
// begin bc_type := b_lab_half ;
33692: LD_ADDR_OWVAR 42
33696: PUSH
33697: LD_INT 7
33699: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
33700: LD_ADDR_OWVAR 44
33704: PUSH
33705: LD_INT 10
33707: PUSH
33708: LD_INT 11
33710: PUSH
33711: LD_INT 12
33713: PUSH
33714: LD_INT 15
33716: PUSH
33717: LD_INT 14
33719: PUSH
33720: LD_INT 13
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: PUSH
33731: LD_VAR 0 2
33735: PUSH
33736: LD_INT 3
33738: MINUS
33739: ARRAY
33740: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
33741: LD_ADDR_OWVAR 45
33745: PUSH
33746: LD_INT 9
33748: ST_TO_ADDR
// end ; 10 .. 13 :
33749: GO 34259
33751: LD_INT 10
33753: DOUBLE
33754: GREATEREQUAL
33755: IFFALSE 33763
33757: LD_INT 13
33759: DOUBLE
33760: LESSEQUAL
33761: IFTRUE 33765
33763: GO 33842
33765: POP
// begin bc_type := b_lab_full ;
33766: LD_ADDR_OWVAR 42
33770: PUSH
33771: LD_INT 8
33773: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33774: LD_ADDR_OWVAR 44
33778: PUSH
33779: LD_INT 10
33781: PUSH
33782: LD_INT 12
33784: PUSH
33785: LD_INT 14
33787: PUSH
33788: LD_INT 13
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: PUSH
33797: LD_VAR 0 2
33801: PUSH
33802: LD_INT 9
33804: MINUS
33805: ARRAY
33806: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33807: LD_ADDR_OWVAR 45
33811: PUSH
33812: LD_INT 11
33814: PUSH
33815: LD_INT 15
33817: PUSH
33818: LD_INT 12
33820: PUSH
33821: LD_INT 15
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: LIST
33828: LIST
33829: PUSH
33830: LD_VAR 0 2
33834: PUSH
33835: LD_INT 9
33837: MINUS
33838: ARRAY
33839: ST_TO_ADDR
// end ; 14 :
33840: GO 34259
33842: LD_INT 14
33844: DOUBLE
33845: EQUAL
33846: IFTRUE 33850
33848: GO 33861
33850: POP
// bc_type := b_workshop ; 15 :
33851: LD_ADDR_OWVAR 42
33855: PUSH
33856: LD_INT 2
33858: ST_TO_ADDR
33859: GO 34259
33861: LD_INT 15
33863: DOUBLE
33864: EQUAL
33865: IFTRUE 33869
33867: GO 33880
33869: POP
// bc_type := b_factory ; 16 :
33870: LD_ADDR_OWVAR 42
33874: PUSH
33875: LD_INT 3
33877: ST_TO_ADDR
33878: GO 34259
33880: LD_INT 16
33882: DOUBLE
33883: EQUAL
33884: IFTRUE 33888
33886: GO 33899
33888: POP
// bc_type := b_ext_gun ; 17 :
33889: LD_ADDR_OWVAR 42
33893: PUSH
33894: LD_INT 17
33896: ST_TO_ADDR
33897: GO 34259
33899: LD_INT 17
33901: DOUBLE
33902: EQUAL
33903: IFTRUE 33907
33905: GO 33935
33907: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33908: LD_ADDR_OWVAR 42
33912: PUSH
33913: LD_INT 19
33915: PUSH
33916: LD_INT 23
33918: PUSH
33919: LD_INT 19
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: LIST
33926: PUSH
33927: LD_VAR 0 1
33931: ARRAY
33932: ST_TO_ADDR
33933: GO 34259
33935: LD_INT 18
33937: DOUBLE
33938: EQUAL
33939: IFTRUE 33943
33941: GO 33954
33943: POP
// bc_type := b_ext_radar ; 19 :
33944: LD_ADDR_OWVAR 42
33948: PUSH
33949: LD_INT 20
33951: ST_TO_ADDR
33952: GO 34259
33954: LD_INT 19
33956: DOUBLE
33957: EQUAL
33958: IFTRUE 33962
33960: GO 33973
33962: POP
// bc_type := b_ext_radio ; 20 :
33963: LD_ADDR_OWVAR 42
33967: PUSH
33968: LD_INT 22
33970: ST_TO_ADDR
33971: GO 34259
33973: LD_INT 20
33975: DOUBLE
33976: EQUAL
33977: IFTRUE 33981
33979: GO 33992
33981: POP
// bc_type := b_ext_siberium ; 21 :
33982: LD_ADDR_OWVAR 42
33986: PUSH
33987: LD_INT 21
33989: ST_TO_ADDR
33990: GO 34259
33992: LD_INT 21
33994: DOUBLE
33995: EQUAL
33996: IFTRUE 34000
33998: GO 34011
34000: POP
// bc_type := b_ext_computer ; 22 :
34001: LD_ADDR_OWVAR 42
34005: PUSH
34006: LD_INT 24
34008: ST_TO_ADDR
34009: GO 34259
34011: LD_INT 22
34013: DOUBLE
34014: EQUAL
34015: IFTRUE 34019
34017: GO 34030
34019: POP
// bc_type := b_ext_track ; 23 :
34020: LD_ADDR_OWVAR 42
34024: PUSH
34025: LD_INT 16
34027: ST_TO_ADDR
34028: GO 34259
34030: LD_INT 23
34032: DOUBLE
34033: EQUAL
34034: IFTRUE 34038
34036: GO 34049
34038: POP
// bc_type := b_ext_laser ; 24 :
34039: LD_ADDR_OWVAR 42
34043: PUSH
34044: LD_INT 25
34046: ST_TO_ADDR
34047: GO 34259
34049: LD_INT 24
34051: DOUBLE
34052: EQUAL
34053: IFTRUE 34057
34055: GO 34068
34057: POP
// bc_type := b_control_tower ; 25 :
34058: LD_ADDR_OWVAR 42
34062: PUSH
34063: LD_INT 36
34065: ST_TO_ADDR
34066: GO 34259
34068: LD_INT 25
34070: DOUBLE
34071: EQUAL
34072: IFTRUE 34076
34074: GO 34087
34076: POP
// bc_type := b_breastwork ; 26 :
34077: LD_ADDR_OWVAR 42
34081: PUSH
34082: LD_INT 31
34084: ST_TO_ADDR
34085: GO 34259
34087: LD_INT 26
34089: DOUBLE
34090: EQUAL
34091: IFTRUE 34095
34093: GO 34106
34095: POP
// bc_type := b_bunker ; 27 :
34096: LD_ADDR_OWVAR 42
34100: PUSH
34101: LD_INT 32
34103: ST_TO_ADDR
34104: GO 34259
34106: LD_INT 27
34108: DOUBLE
34109: EQUAL
34110: IFTRUE 34114
34112: GO 34125
34114: POP
// bc_type := b_turret ; 28 :
34115: LD_ADDR_OWVAR 42
34119: PUSH
34120: LD_INT 33
34122: ST_TO_ADDR
34123: GO 34259
34125: LD_INT 28
34127: DOUBLE
34128: EQUAL
34129: IFTRUE 34133
34131: GO 34144
34133: POP
// bc_type := b_armoury ; 29 :
34134: LD_ADDR_OWVAR 42
34138: PUSH
34139: LD_INT 4
34141: ST_TO_ADDR
34142: GO 34259
34144: LD_INT 29
34146: DOUBLE
34147: EQUAL
34148: IFTRUE 34152
34150: GO 34163
34152: POP
// bc_type := b_barracks ; 30 :
34153: LD_ADDR_OWVAR 42
34157: PUSH
34158: LD_INT 5
34160: ST_TO_ADDR
34161: GO 34259
34163: LD_INT 30
34165: DOUBLE
34166: EQUAL
34167: IFTRUE 34171
34169: GO 34182
34171: POP
// bc_type := b_solar_power ; 31 :
34172: LD_ADDR_OWVAR 42
34176: PUSH
34177: LD_INT 27
34179: ST_TO_ADDR
34180: GO 34259
34182: LD_INT 31
34184: DOUBLE
34185: EQUAL
34186: IFTRUE 34190
34188: GO 34201
34190: POP
// bc_type := b_oil_power ; 32 :
34191: LD_ADDR_OWVAR 42
34195: PUSH
34196: LD_INT 26
34198: ST_TO_ADDR
34199: GO 34259
34201: LD_INT 32
34203: DOUBLE
34204: EQUAL
34205: IFTRUE 34209
34207: GO 34220
34209: POP
// bc_type := b_siberite_power ; 33 :
34210: LD_ADDR_OWVAR 42
34214: PUSH
34215: LD_INT 28
34217: ST_TO_ADDR
34218: GO 34259
34220: LD_INT 33
34222: DOUBLE
34223: EQUAL
34224: IFTRUE 34228
34226: GO 34239
34228: POP
// bc_type := b_oil_mine ; 34 :
34229: LD_ADDR_OWVAR 42
34233: PUSH
34234: LD_INT 29
34236: ST_TO_ADDR
34237: GO 34259
34239: LD_INT 34
34241: DOUBLE
34242: EQUAL
34243: IFTRUE 34247
34245: GO 34258
34247: POP
// bc_type := b_siberite_mine ; end ;
34248: LD_ADDR_OWVAR 42
34252: PUSH
34253: LD_INT 30
34255: ST_TO_ADDR
34256: GO 34259
34258: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
34259: LD_ADDR_VAR 0 8
34263: PUSH
34264: LD_VAR 0 5
34268: PPUSH
34269: LD_VAR 0 6
34273: PPUSH
34274: LD_VAR 0 3
34278: PPUSH
34279: CALL_OW 47
34283: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
34284: LD_OWVAR 42
34288: PUSH
34289: LD_INT 32
34291: PUSH
34292: LD_INT 33
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: IN
34299: IFFALSE 34315
// PlaceWeaponTurret ( b , weapon ) ;
34301: LD_VAR 0 8
34305: PPUSH
34306: LD_VAR 0 4
34310: PPUSH
34311: CALL_OW 431
// end ;
34315: LD_VAR 0 7
34319: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
34320: LD_INT 0
34322: PPUSH
34323: PPUSH
34324: PPUSH
34325: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34326: LD_ADDR_VAR 0 4
34330: PUSH
34331: LD_INT 22
34333: PUSH
34334: LD_OWVAR 2
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: PUSH
34343: LD_INT 2
34345: PUSH
34346: LD_INT 30
34348: PUSH
34349: LD_INT 0
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 30
34358: PUSH
34359: LD_INT 1
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: LIST
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PPUSH
34375: CALL_OW 69
34379: ST_TO_ADDR
// if not tmp then
34380: LD_VAR 0 4
34384: NOT
34385: IFFALSE 34389
// exit ;
34387: GO 34448
// for i in tmp do
34389: LD_ADDR_VAR 0 2
34393: PUSH
34394: LD_VAR 0 4
34398: PUSH
34399: FOR_IN
34400: IFFALSE 34446
// for j = 1 to 3 do
34402: LD_ADDR_VAR 0 3
34406: PUSH
34407: DOUBLE
34408: LD_INT 1
34410: DEC
34411: ST_TO_ADDR
34412: LD_INT 3
34414: PUSH
34415: FOR_TO
34416: IFFALSE 34442
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
34418: LD_VAR 0 2
34422: PPUSH
34423: CALL_OW 274
34427: PPUSH
34428: LD_VAR 0 3
34432: PPUSH
34433: LD_INT 99999
34435: PPUSH
34436: CALL_OW 277
34440: GO 34415
34442: POP
34443: POP
34444: GO 34399
34446: POP
34447: POP
// end ;
34448: LD_VAR 0 1
34452: RET
// export function hHackSetLevel10 ; var i , j ; begin
34453: LD_INT 0
34455: PPUSH
34456: PPUSH
34457: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34458: LD_ADDR_VAR 0 2
34462: PUSH
34463: LD_INT 21
34465: PUSH
34466: LD_INT 1
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: PPUSH
34473: CALL_OW 69
34477: PUSH
34478: FOR_IN
34479: IFFALSE 34531
// if IsSelected ( i ) then
34481: LD_VAR 0 2
34485: PPUSH
34486: CALL_OW 306
34490: IFFALSE 34529
// begin for j := 1 to 4 do
34492: LD_ADDR_VAR 0 3
34496: PUSH
34497: DOUBLE
34498: LD_INT 1
34500: DEC
34501: ST_TO_ADDR
34502: LD_INT 4
34504: PUSH
34505: FOR_TO
34506: IFFALSE 34527
// SetSkill ( i , j , 10 ) ;
34508: LD_VAR 0 2
34512: PPUSH
34513: LD_VAR 0 3
34517: PPUSH
34518: LD_INT 10
34520: PPUSH
34521: CALL_OW 237
34525: GO 34505
34527: POP
34528: POP
// end ;
34529: GO 34478
34531: POP
34532: POP
// end ;
34533: LD_VAR 0 1
34537: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
34538: LD_INT 0
34540: PPUSH
34541: PPUSH
34542: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
34543: LD_ADDR_VAR 0 2
34547: PUSH
34548: LD_INT 22
34550: PUSH
34551: LD_OWVAR 2
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 21
34562: PUSH
34563: LD_INT 1
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PPUSH
34574: CALL_OW 69
34578: PUSH
34579: FOR_IN
34580: IFFALSE 34621
// begin for j := 1 to 4 do
34582: LD_ADDR_VAR 0 3
34586: PUSH
34587: DOUBLE
34588: LD_INT 1
34590: DEC
34591: ST_TO_ADDR
34592: LD_INT 4
34594: PUSH
34595: FOR_TO
34596: IFFALSE 34617
// SetSkill ( i , j , 10 ) ;
34598: LD_VAR 0 2
34602: PPUSH
34603: LD_VAR 0 3
34607: PPUSH
34608: LD_INT 10
34610: PPUSH
34611: CALL_OW 237
34615: GO 34595
34617: POP
34618: POP
// end ;
34619: GO 34579
34621: POP
34622: POP
// end ;
34623: LD_VAR 0 1
34627: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
34628: LD_INT 0
34630: PPUSH
// uc_side := your_side ;
34631: LD_ADDR_OWVAR 20
34635: PUSH
34636: LD_OWVAR 2
34640: ST_TO_ADDR
// uc_nation := nation ;
34641: LD_ADDR_OWVAR 21
34645: PUSH
34646: LD_VAR 0 1
34650: ST_TO_ADDR
// InitHc ;
34651: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
34655: LD_INT 0
34657: PPUSH
34658: LD_VAR 0 2
34662: PPUSH
34663: LD_VAR 0 3
34667: PPUSH
34668: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
34672: LD_VAR 0 4
34676: PPUSH
34677: LD_VAR 0 5
34681: PPUSH
34682: CALL_OW 428
34686: PUSH
34687: LD_INT 0
34689: EQUAL
34690: IFFALSE 34714
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
34692: CALL_OW 44
34696: PPUSH
34697: LD_VAR 0 4
34701: PPUSH
34702: LD_VAR 0 5
34706: PPUSH
34707: LD_INT 1
34709: PPUSH
34710: CALL_OW 48
// end ;
34714: LD_VAR 0 6
34718: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
34719: LD_INT 0
34721: PPUSH
34722: PPUSH
// uc_side := your_side ;
34723: LD_ADDR_OWVAR 20
34727: PUSH
34728: LD_OWVAR 2
34732: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
34733: LD_VAR 0 1
34737: PUSH
34738: LD_INT 1
34740: PUSH
34741: LD_INT 2
34743: PUSH
34744: LD_INT 3
34746: PUSH
34747: LD_INT 4
34749: PUSH
34750: LD_INT 5
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: IN
34760: IFFALSE 34772
// uc_nation := nation_american else
34762: LD_ADDR_OWVAR 21
34766: PUSH
34767: LD_INT 1
34769: ST_TO_ADDR
34770: GO 34815
// if chassis in [ 11 , 12 , 13 , 14 ] then
34772: LD_VAR 0 1
34776: PUSH
34777: LD_INT 11
34779: PUSH
34780: LD_INT 12
34782: PUSH
34783: LD_INT 13
34785: PUSH
34786: LD_INT 14
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: IN
34795: IFFALSE 34807
// uc_nation := nation_arabian else
34797: LD_ADDR_OWVAR 21
34801: PUSH
34802: LD_INT 2
34804: ST_TO_ADDR
34805: GO 34815
// uc_nation := nation_russian ;
34807: LD_ADDR_OWVAR 21
34811: PUSH
34812: LD_INT 3
34814: ST_TO_ADDR
// vc_chassis := chassis ;
34815: LD_ADDR_OWVAR 37
34819: PUSH
34820: LD_VAR 0 1
34824: ST_TO_ADDR
// vc_engine := engine ;
34825: LD_ADDR_OWVAR 39
34829: PUSH
34830: LD_VAR 0 2
34834: ST_TO_ADDR
// vc_control := control ;
34835: LD_ADDR_OWVAR 38
34839: PUSH
34840: LD_VAR 0 3
34844: ST_TO_ADDR
// vc_weapon := weapon ;
34845: LD_ADDR_OWVAR 40
34849: PUSH
34850: LD_VAR 0 4
34854: ST_TO_ADDR
// un := CreateVehicle ;
34855: LD_ADDR_VAR 0 8
34859: PUSH
34860: CALL_OW 45
34864: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34865: LD_VAR 0 8
34869: PPUSH
34870: LD_INT 0
34872: PPUSH
34873: LD_INT 5
34875: PPUSH
34876: CALL_OW 12
34880: PPUSH
34881: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34885: LD_VAR 0 8
34889: PPUSH
34890: LD_VAR 0 5
34894: PPUSH
34895: LD_VAR 0 6
34899: PPUSH
34900: LD_INT 1
34902: PPUSH
34903: CALL_OW 48
// end ;
34907: LD_VAR 0 7
34911: RET
// export hInvincible ; every 1 do
34912: GO 34914
34914: DISABLE
// hInvincible := [ ] ;
34915: LD_ADDR_EXP 115
34919: PUSH
34920: EMPTY
34921: ST_TO_ADDR
34922: END
// every 10 do var i ;
34923: GO 34925
34925: DISABLE
34926: LD_INT 0
34928: PPUSH
// begin enable ;
34929: ENABLE
// if not hInvincible then
34930: LD_EXP 115
34934: NOT
34935: IFFALSE 34939
// exit ;
34937: GO 34983
// for i in hInvincible do
34939: LD_ADDR_VAR 0 1
34943: PUSH
34944: LD_EXP 115
34948: PUSH
34949: FOR_IN
34950: IFFALSE 34981
// if GetLives ( i ) < 1000 then
34952: LD_VAR 0 1
34956: PPUSH
34957: CALL_OW 256
34961: PUSH
34962: LD_INT 1000
34964: LESS
34965: IFFALSE 34979
// SetLives ( i , 1000 ) ;
34967: LD_VAR 0 1
34971: PPUSH
34972: LD_INT 1000
34974: PPUSH
34975: CALL_OW 234
34979: GO 34949
34981: POP
34982: POP
// end ;
34983: PPOPN 1
34985: END
// export function hHackInvincible ; var i ; begin
34986: LD_INT 0
34988: PPUSH
34989: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34990: LD_ADDR_VAR 0 2
34994: PUSH
34995: LD_INT 2
34997: PUSH
34998: LD_INT 21
35000: PUSH
35001: LD_INT 1
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 21
35010: PUSH
35011: LD_INT 2
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: LIST
35022: PPUSH
35023: CALL_OW 69
35027: PUSH
35028: FOR_IN
35029: IFFALSE 35090
// if IsSelected ( i ) then
35031: LD_VAR 0 2
35035: PPUSH
35036: CALL_OW 306
35040: IFFALSE 35088
// begin if i in hInvincible then
35042: LD_VAR 0 2
35046: PUSH
35047: LD_EXP 115
35051: IN
35052: IFFALSE 35072
// hInvincible := hInvincible diff i else
35054: LD_ADDR_EXP 115
35058: PUSH
35059: LD_EXP 115
35063: PUSH
35064: LD_VAR 0 2
35068: DIFF
35069: ST_TO_ADDR
35070: GO 35088
// hInvincible := hInvincible union i ;
35072: LD_ADDR_EXP 115
35076: PUSH
35077: LD_EXP 115
35081: PUSH
35082: LD_VAR 0 2
35086: UNION
35087: ST_TO_ADDR
// end ;
35088: GO 35028
35090: POP
35091: POP
// end ;
35092: LD_VAR 0 1
35096: RET
// export function hHackInvisible ; var i , j ; begin
35097: LD_INT 0
35099: PPUSH
35100: PPUSH
35101: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35102: LD_ADDR_VAR 0 2
35106: PUSH
35107: LD_INT 21
35109: PUSH
35110: LD_INT 1
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PPUSH
35117: CALL_OW 69
35121: PUSH
35122: FOR_IN
35123: IFFALSE 35147
// if IsSelected ( i ) then
35125: LD_VAR 0 2
35129: PPUSH
35130: CALL_OW 306
35134: IFFALSE 35145
// ComForceInvisible ( i ) ;
35136: LD_VAR 0 2
35140: PPUSH
35141: CALL_OW 496
35145: GO 35122
35147: POP
35148: POP
// end ;
35149: LD_VAR 0 1
35153: RET
// export function hHackChangeYourSide ; begin
35154: LD_INT 0
35156: PPUSH
// if your_side = 8 then
35157: LD_OWVAR 2
35161: PUSH
35162: LD_INT 8
35164: EQUAL
35165: IFFALSE 35177
// your_side := 0 else
35167: LD_ADDR_OWVAR 2
35171: PUSH
35172: LD_INT 0
35174: ST_TO_ADDR
35175: GO 35191
// your_side := your_side + 1 ;
35177: LD_ADDR_OWVAR 2
35181: PUSH
35182: LD_OWVAR 2
35186: PUSH
35187: LD_INT 1
35189: PLUS
35190: ST_TO_ADDR
// end ;
35191: LD_VAR 0 1
35195: RET
// export function hHackChangeUnitSide ; var i , j ; begin
35196: LD_INT 0
35198: PPUSH
35199: PPUSH
35200: PPUSH
// for i in all_units do
35201: LD_ADDR_VAR 0 2
35205: PUSH
35206: LD_OWVAR 3
35210: PUSH
35211: FOR_IN
35212: IFFALSE 35290
// if IsSelected ( i ) then
35214: LD_VAR 0 2
35218: PPUSH
35219: CALL_OW 306
35223: IFFALSE 35288
// begin j := GetSide ( i ) ;
35225: LD_ADDR_VAR 0 3
35229: PUSH
35230: LD_VAR 0 2
35234: PPUSH
35235: CALL_OW 255
35239: ST_TO_ADDR
// if j = 8 then
35240: LD_VAR 0 3
35244: PUSH
35245: LD_INT 8
35247: EQUAL
35248: IFFALSE 35260
// j := 0 else
35250: LD_ADDR_VAR 0 3
35254: PUSH
35255: LD_INT 0
35257: ST_TO_ADDR
35258: GO 35274
// j := j + 1 ;
35260: LD_ADDR_VAR 0 3
35264: PUSH
35265: LD_VAR 0 3
35269: PUSH
35270: LD_INT 1
35272: PLUS
35273: ST_TO_ADDR
// SetSide ( i , j ) ;
35274: LD_VAR 0 2
35278: PPUSH
35279: LD_VAR 0 3
35283: PPUSH
35284: CALL_OW 235
// end ;
35288: GO 35211
35290: POP
35291: POP
// end ;
35292: LD_VAR 0 1
35296: RET
// export function hHackFog ; begin
35297: LD_INT 0
35299: PPUSH
// FogOff ( true ) ;
35300: LD_INT 1
35302: PPUSH
35303: CALL_OW 344
// end ;
35307: LD_VAR 0 1
35311: RET
// export function hHackTeleport ( unit , x , y ) ; begin
35312: LD_INT 0
35314: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
35315: LD_VAR 0 1
35319: PPUSH
35320: LD_VAR 0 2
35324: PPUSH
35325: LD_VAR 0 3
35329: PPUSH
35330: LD_INT 1
35332: PPUSH
35333: LD_INT 1
35335: PPUSH
35336: CALL_OW 483
// CenterOnXY ( x , y ) ;
35340: LD_VAR 0 2
35344: PPUSH
35345: LD_VAR 0 3
35349: PPUSH
35350: CALL_OW 84
// end ;
35354: LD_VAR 0 4
35358: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
35359: LD_INT 0
35361: PPUSH
35362: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
35363: LD_VAR 0 1
35367: NOT
35368: PUSH
35369: LD_VAR 0 2
35373: PPUSH
35374: LD_VAR 0 3
35378: PPUSH
35379: CALL_OW 488
35383: NOT
35384: OR
35385: PUSH
35386: LD_VAR 0 1
35390: PPUSH
35391: CALL_OW 266
35395: PUSH
35396: LD_INT 3
35398: NONEQUAL
35399: PUSH
35400: LD_VAR 0 1
35404: PPUSH
35405: CALL_OW 247
35409: PUSH
35410: LD_INT 1
35412: EQUAL
35413: NOT
35414: AND
35415: OR
35416: IFFALSE 35420
// exit ;
35418: GO 35569
// if GetType ( factory ) = unit_human then
35420: LD_VAR 0 1
35424: PPUSH
35425: CALL_OW 247
35429: PUSH
35430: LD_INT 1
35432: EQUAL
35433: IFFALSE 35450
// factory := IsInUnit ( factory ) ;
35435: LD_ADDR_VAR 0 1
35439: PUSH
35440: LD_VAR 0 1
35444: PPUSH
35445: CALL_OW 310
35449: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
35450: LD_VAR 0 1
35454: PPUSH
35455: CALL_OW 266
35459: PUSH
35460: LD_INT 3
35462: NONEQUAL
35463: IFFALSE 35467
// exit ;
35465: GO 35569
// if HexInfo ( x , y ) = factory then
35467: LD_VAR 0 2
35471: PPUSH
35472: LD_VAR 0 3
35476: PPUSH
35477: CALL_OW 428
35481: PUSH
35482: LD_VAR 0 1
35486: EQUAL
35487: IFFALSE 35514
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
35489: LD_ADDR_EXP 116
35493: PUSH
35494: LD_EXP 116
35498: PPUSH
35499: LD_VAR 0 1
35503: PPUSH
35504: LD_INT 0
35506: PPUSH
35507: CALL_OW 1
35511: ST_TO_ADDR
35512: GO 35565
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
35514: LD_ADDR_EXP 116
35518: PUSH
35519: LD_EXP 116
35523: PPUSH
35524: LD_VAR 0 1
35528: PPUSH
35529: LD_VAR 0 1
35533: PPUSH
35534: CALL_OW 255
35538: PUSH
35539: LD_VAR 0 1
35543: PUSH
35544: LD_VAR 0 2
35548: PUSH
35549: LD_VAR 0 3
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: PPUSH
35560: CALL_OW 1
35564: ST_TO_ADDR
// UpdateFactoryWaypoints ;
35565: CALL 35574 0 0
// end ;
35569: LD_VAR 0 4
35573: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
35574: LD_INT 0
35576: PPUSH
35577: PPUSH
35578: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
35579: LD_STRING resetFactoryWaypoint();
35581: PPUSH
35582: CALL_OW 559
// if factoryWaypoints then
35586: LD_EXP 116
35590: IFFALSE 35716
// begin list := PrepareArray ( factoryWaypoints ) ;
35592: LD_ADDR_VAR 0 3
35596: PUSH
35597: LD_EXP 116
35601: PPUSH
35602: CALL 83176 0 1
35606: ST_TO_ADDR
// for i := 1 to list do
35607: LD_ADDR_VAR 0 2
35611: PUSH
35612: DOUBLE
35613: LD_INT 1
35615: DEC
35616: ST_TO_ADDR
35617: LD_VAR 0 3
35621: PUSH
35622: FOR_TO
35623: IFFALSE 35714
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35625: LD_STRING setFactoryWaypointXY(
35627: PUSH
35628: LD_VAR 0 3
35632: PUSH
35633: LD_VAR 0 2
35637: ARRAY
35638: PUSH
35639: LD_INT 1
35641: ARRAY
35642: STR
35643: PUSH
35644: LD_STRING ,
35646: STR
35647: PUSH
35648: LD_VAR 0 3
35652: PUSH
35653: LD_VAR 0 2
35657: ARRAY
35658: PUSH
35659: LD_INT 2
35661: ARRAY
35662: STR
35663: PUSH
35664: LD_STRING ,
35666: STR
35667: PUSH
35668: LD_VAR 0 3
35672: PUSH
35673: LD_VAR 0 2
35677: ARRAY
35678: PUSH
35679: LD_INT 3
35681: ARRAY
35682: STR
35683: PUSH
35684: LD_STRING ,
35686: STR
35687: PUSH
35688: LD_VAR 0 3
35692: PUSH
35693: LD_VAR 0 2
35697: ARRAY
35698: PUSH
35699: LD_INT 4
35701: ARRAY
35702: STR
35703: PUSH
35704: LD_STRING )
35706: STR
35707: PPUSH
35708: CALL_OW 559
35712: GO 35622
35714: POP
35715: POP
// end ; end ;
35716: LD_VAR 0 1
35720: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
35721: LD_INT 0
35723: PPUSH
// if HexInfo ( x , y ) = warehouse then
35724: LD_VAR 0 2
35728: PPUSH
35729: LD_VAR 0 3
35733: PPUSH
35734: CALL_OW 428
35738: PUSH
35739: LD_VAR 0 1
35743: EQUAL
35744: IFFALSE 35771
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
35746: LD_ADDR_EXP 117
35750: PUSH
35751: LD_EXP 117
35755: PPUSH
35756: LD_VAR 0 1
35760: PPUSH
35761: LD_INT 0
35763: PPUSH
35764: CALL_OW 1
35768: ST_TO_ADDR
35769: GO 35822
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
35771: LD_ADDR_EXP 117
35775: PUSH
35776: LD_EXP 117
35780: PPUSH
35781: LD_VAR 0 1
35785: PPUSH
35786: LD_VAR 0 1
35790: PPUSH
35791: CALL_OW 255
35795: PUSH
35796: LD_VAR 0 1
35800: PUSH
35801: LD_VAR 0 2
35805: PUSH
35806: LD_VAR 0 3
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: PPUSH
35817: CALL_OW 1
35821: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
35822: CALL 35831 0 0
// end ;
35826: LD_VAR 0 4
35830: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
35831: LD_INT 0
35833: PPUSH
35834: PPUSH
35835: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
35836: LD_STRING resetWarehouseGatheringPoints();
35838: PPUSH
35839: CALL_OW 559
// if warehouseGatheringPoints then
35843: LD_EXP 117
35847: IFFALSE 35973
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
35849: LD_ADDR_VAR 0 3
35853: PUSH
35854: LD_EXP 117
35858: PPUSH
35859: CALL 83176 0 1
35863: ST_TO_ADDR
// for i := 1 to list do
35864: LD_ADDR_VAR 0 2
35868: PUSH
35869: DOUBLE
35870: LD_INT 1
35872: DEC
35873: ST_TO_ADDR
35874: LD_VAR 0 3
35878: PUSH
35879: FOR_TO
35880: IFFALSE 35971
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
35882: LD_STRING setWarehouseGatheringPointXY(
35884: PUSH
35885: LD_VAR 0 3
35889: PUSH
35890: LD_VAR 0 2
35894: ARRAY
35895: PUSH
35896: LD_INT 1
35898: ARRAY
35899: STR
35900: PUSH
35901: LD_STRING ,
35903: STR
35904: PUSH
35905: LD_VAR 0 3
35909: PUSH
35910: LD_VAR 0 2
35914: ARRAY
35915: PUSH
35916: LD_INT 2
35918: ARRAY
35919: STR
35920: PUSH
35921: LD_STRING ,
35923: STR
35924: PUSH
35925: LD_VAR 0 3
35929: PUSH
35930: LD_VAR 0 2
35934: ARRAY
35935: PUSH
35936: LD_INT 3
35938: ARRAY
35939: STR
35940: PUSH
35941: LD_STRING ,
35943: STR
35944: PUSH
35945: LD_VAR 0 3
35949: PUSH
35950: LD_VAR 0 2
35954: ARRAY
35955: PUSH
35956: LD_INT 4
35958: ARRAY
35959: STR
35960: PUSH
35961: LD_STRING )
35963: STR
35964: PPUSH
35965: CALL_OW 559
35969: GO 35879
35971: POP
35972: POP
// end ; end ;
35973: LD_VAR 0 1
35977: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
35978: LD_EXP 117
35982: IFFALSE 36667
35984: GO 35986
35986: DISABLE
35987: LD_INT 0
35989: PPUSH
35990: PPUSH
35991: PPUSH
35992: PPUSH
35993: PPUSH
35994: PPUSH
35995: PPUSH
35996: PPUSH
35997: PPUSH
// begin enable ;
35998: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
35999: LD_ADDR_VAR 0 3
36003: PUSH
36004: LD_EXP 117
36008: PPUSH
36009: CALL 83176 0 1
36013: ST_TO_ADDR
// if not list then
36014: LD_VAR 0 3
36018: NOT
36019: IFFALSE 36023
// exit ;
36021: GO 36667
// for i := 1 to list do
36023: LD_ADDR_VAR 0 1
36027: PUSH
36028: DOUBLE
36029: LD_INT 1
36031: DEC
36032: ST_TO_ADDR
36033: LD_VAR 0 3
36037: PUSH
36038: FOR_TO
36039: IFFALSE 36665
// begin depot := list [ i ] [ 2 ] ;
36041: LD_ADDR_VAR 0 8
36045: PUSH
36046: LD_VAR 0 3
36050: PUSH
36051: LD_VAR 0 1
36055: ARRAY
36056: PUSH
36057: LD_INT 2
36059: ARRAY
36060: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
36061: LD_ADDR_VAR 0 5
36065: PUSH
36066: LD_VAR 0 3
36070: PUSH
36071: LD_VAR 0 1
36075: ARRAY
36076: PUSH
36077: LD_INT 1
36079: ARRAY
36080: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
36081: LD_VAR 0 8
36085: PPUSH
36086: CALL_OW 301
36090: PUSH
36091: LD_VAR 0 5
36095: PUSH
36096: LD_VAR 0 8
36100: PPUSH
36101: CALL_OW 255
36105: NONEQUAL
36106: OR
36107: IFFALSE 36136
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
36109: LD_ADDR_EXP 117
36113: PUSH
36114: LD_EXP 117
36118: PPUSH
36119: LD_VAR 0 8
36123: PPUSH
36124: LD_INT 0
36126: PPUSH
36127: CALL_OW 1
36131: ST_TO_ADDR
// exit ;
36132: POP
36133: POP
36134: GO 36667
// end ; x := list [ i ] [ 3 ] ;
36136: LD_ADDR_VAR 0 6
36140: PUSH
36141: LD_VAR 0 3
36145: PUSH
36146: LD_VAR 0 1
36150: ARRAY
36151: PUSH
36152: LD_INT 3
36154: ARRAY
36155: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
36156: LD_ADDR_VAR 0 7
36160: PUSH
36161: LD_VAR 0 3
36165: PUSH
36166: LD_VAR 0 1
36170: ARRAY
36171: PUSH
36172: LD_INT 4
36174: ARRAY
36175: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
36176: LD_ADDR_VAR 0 9
36180: PUSH
36181: LD_VAR 0 6
36185: PPUSH
36186: LD_VAR 0 7
36190: PPUSH
36191: LD_INT 16
36193: PPUSH
36194: CALL 81764 0 3
36198: ST_TO_ADDR
// if not cratesNearbyPoint then
36199: LD_VAR 0 9
36203: NOT
36204: IFFALSE 36210
// exit ;
36206: POP
36207: POP
36208: GO 36667
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
36210: LD_ADDR_VAR 0 4
36214: PUSH
36215: LD_INT 22
36217: PUSH
36218: LD_VAR 0 5
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 3
36229: PUSH
36230: LD_INT 60
36232: PUSH
36233: EMPTY
36234: LIST
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: PUSH
36240: LD_INT 91
36242: PUSH
36243: LD_VAR 0 8
36247: PUSH
36248: LD_INT 6
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 2
36258: PUSH
36259: LD_INT 25
36261: PUSH
36262: LD_INT 2
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PUSH
36269: LD_INT 25
36271: PUSH
36272: LD_INT 16
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: LIST
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: PPUSH
36290: CALL_OW 69
36294: PUSH
36295: LD_VAR 0 8
36299: PPUSH
36300: CALL_OW 313
36304: PPUSH
36305: LD_INT 3
36307: PUSH
36308: LD_INT 60
36310: PUSH
36311: EMPTY
36312: LIST
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: PUSH
36318: LD_INT 2
36320: PUSH
36321: LD_INT 25
36323: PUSH
36324: LD_INT 2
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: PUSH
36331: LD_INT 25
36333: PUSH
36334: LD_INT 16
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: LIST
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PPUSH
36350: CALL_OW 72
36354: UNION
36355: ST_TO_ADDR
// if tmp then
36356: LD_VAR 0 4
36360: IFFALSE 36440
// begin tmp := ShrinkArray ( tmp , 3 ) ;
36362: LD_ADDR_VAR 0 4
36366: PUSH
36367: LD_VAR 0 4
36371: PPUSH
36372: LD_INT 3
36374: PPUSH
36375: CALL 79733 0 2
36379: ST_TO_ADDR
// for j in tmp do
36380: LD_ADDR_VAR 0 2
36384: PUSH
36385: LD_VAR 0 4
36389: PUSH
36390: FOR_IN
36391: IFFALSE 36434
// begin if IsInUnit ( j ) then
36393: LD_VAR 0 2
36397: PPUSH
36398: CALL_OW 310
36402: IFFALSE 36413
// ComExit ( j ) ;
36404: LD_VAR 0 2
36408: PPUSH
36409: CALL 79816 0 1
// AddComCollect ( j , x , y ) ;
36413: LD_VAR 0 2
36417: PPUSH
36418: LD_VAR 0 6
36422: PPUSH
36423: LD_VAR 0 7
36427: PPUSH
36428: CALL_OW 177
// end ;
36432: GO 36390
36434: POP
36435: POP
// exit ;
36436: POP
36437: POP
36438: GO 36667
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
36440: LD_ADDR_VAR 0 4
36444: PUSH
36445: LD_INT 22
36447: PUSH
36448: LD_VAR 0 5
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PUSH
36457: LD_INT 91
36459: PUSH
36460: LD_VAR 0 8
36464: PUSH
36465: LD_INT 8
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: LIST
36472: PUSH
36473: LD_INT 2
36475: PUSH
36476: LD_INT 34
36478: PUSH
36479: LD_INT 12
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 34
36488: PUSH
36489: LD_INT 51
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: LD_INT 34
36498: PUSH
36499: LD_INT 32
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 34
36508: PUSH
36509: LD_INT 89
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: LIST
36527: PPUSH
36528: CALL_OW 69
36532: ST_TO_ADDR
// if tmp then
36533: LD_VAR 0 4
36537: IFFALSE 36663
// begin for j in tmp do
36539: LD_ADDR_VAR 0 2
36543: PUSH
36544: LD_VAR 0 4
36548: PUSH
36549: FOR_IN
36550: IFFALSE 36661
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
36552: LD_VAR 0 2
36556: PPUSH
36557: CALL_OW 262
36561: PUSH
36562: LD_INT 3
36564: EQUAL
36565: PUSH
36566: LD_VAR 0 2
36570: PPUSH
36571: CALL_OW 261
36575: PUSH
36576: LD_INT 20
36578: GREATER
36579: OR
36580: PUSH
36581: LD_VAR 0 2
36585: PPUSH
36586: CALL_OW 314
36590: NOT
36591: AND
36592: PUSH
36593: LD_VAR 0 2
36597: PPUSH
36598: CALL_OW 263
36602: PUSH
36603: LD_INT 1
36605: NONEQUAL
36606: PUSH
36607: LD_VAR 0 2
36611: PPUSH
36612: CALL_OW 311
36616: OR
36617: AND
36618: IFFALSE 36659
// begin ComCollect ( j , x , y ) ;
36620: LD_VAR 0 2
36624: PPUSH
36625: LD_VAR 0 6
36629: PPUSH
36630: LD_VAR 0 7
36634: PPUSH
36635: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
36639: LD_VAR 0 2
36643: PPUSH
36644: LD_VAR 0 8
36648: PPUSH
36649: CALL_OW 172
// exit ;
36653: POP
36654: POP
36655: POP
36656: POP
36657: GO 36667
// end ;
36659: GO 36549
36661: POP
36662: POP
// end ; end ;
36663: GO 36038
36665: POP
36666: POP
// end ; end_of_file
36667: PPOPN 9
36669: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
36670: LD_VAR 0 1
36674: PUSH
36675: LD_INT 200
36677: DOUBLE
36678: GREATEREQUAL
36679: IFFALSE 36687
36681: LD_INT 299
36683: DOUBLE
36684: LESSEQUAL
36685: IFTRUE 36689
36687: GO 36721
36689: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
36690: LD_VAR 0 1
36694: PPUSH
36695: LD_VAR 0 2
36699: PPUSH
36700: LD_VAR 0 3
36704: PPUSH
36705: LD_VAR 0 4
36709: PPUSH
36710: LD_VAR 0 5
36714: PPUSH
36715: CALL 37209 0 5
36719: GO 36798
36721: LD_INT 300
36723: DOUBLE
36724: GREATEREQUAL
36725: IFFALSE 36733
36727: LD_INT 399
36729: DOUBLE
36730: LESSEQUAL
36731: IFTRUE 36735
36733: GO 36797
36735: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
36736: LD_VAR 0 1
36740: PPUSH
36741: LD_VAR 0 2
36745: PPUSH
36746: LD_VAR 0 3
36750: PPUSH
36751: LD_VAR 0 4
36755: PPUSH
36756: LD_VAR 0 5
36760: PPUSH
36761: LD_VAR 0 6
36765: PPUSH
36766: LD_VAR 0 7
36770: PPUSH
36771: LD_VAR 0 8
36775: PPUSH
36776: LD_VAR 0 9
36780: PPUSH
36781: LD_VAR 0 10
36785: PPUSH
36786: LD_VAR 0 11
36790: PPUSH
36791: CALL 33371 0 11
36795: GO 36798
36797: POP
// end ;
36798: PPOPN 11
36800: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
36801: LD_VAR 0 1
36805: PPUSH
36806: LD_VAR 0 2
36810: PPUSH
36811: LD_VAR 0 3
36815: PPUSH
36816: LD_VAR 0 4
36820: PPUSH
36821: LD_VAR 0 5
36825: PPUSH
36826: CALL 36945 0 5
// end ; end_of_file
36830: PPOPN 5
36832: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
36833: LD_INT 0
36835: PPUSH
36836: PPUSH
36837: PPUSH
36838: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
36839: LD_VAR 0 1
36843: PPUSH
36844: CALL_OW 264
36848: PUSH
36849: LD_INT 91
36851: EQUAL
36852: IFFALSE 36924
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
36854: LD_INT 68
36856: PPUSH
36857: LD_VAR 0 1
36861: PPUSH
36862: CALL_OW 255
36866: PPUSH
36867: CALL_OW 321
36871: PUSH
36872: LD_INT 2
36874: EQUAL
36875: IFFALSE 36887
// eff := 70 else
36877: LD_ADDR_VAR 0 4
36881: PUSH
36882: LD_INT 70
36884: ST_TO_ADDR
36885: GO 36895
// eff := 30 ;
36887: LD_ADDR_VAR 0 4
36891: PUSH
36892: LD_INT 30
36894: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
36895: LD_VAR 0 1
36899: PPUSH
36900: CALL_OW 250
36904: PPUSH
36905: LD_VAR 0 1
36909: PPUSH
36910: CALL_OW 251
36914: PPUSH
36915: LD_VAR 0 4
36919: PPUSH
36920: CALL_OW 495
// end ; end ;
36924: LD_VAR 0 2
36928: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
36929: LD_INT 0
36931: PPUSH
// end ;
36932: LD_VAR 0 4
36936: RET
// export function SOS_Command ( cmd ) ; begin
36937: LD_INT 0
36939: PPUSH
// end ;
36940: LD_VAR 0 2
36944: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
36945: LD_INT 0
36947: PPUSH
// end ;
36948: LD_VAR 0 6
36952: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
36953: LD_INT 0
36955: PPUSH
36956: PPUSH
// if not vehicle or not factory then
36957: LD_VAR 0 1
36961: NOT
36962: PUSH
36963: LD_VAR 0 2
36967: NOT
36968: OR
36969: IFFALSE 36973
// exit ;
36971: GO 37204
// if factoryWaypoints >= factory then
36973: LD_EXP 116
36977: PUSH
36978: LD_VAR 0 2
36982: GREATEREQUAL
36983: IFFALSE 37204
// if factoryWaypoints [ factory ] then
36985: LD_EXP 116
36989: PUSH
36990: LD_VAR 0 2
36994: ARRAY
36995: IFFALSE 37204
// begin if GetControl ( vehicle ) = control_manual then
36997: LD_VAR 0 1
37001: PPUSH
37002: CALL_OW 263
37006: PUSH
37007: LD_INT 1
37009: EQUAL
37010: IFFALSE 37091
// begin driver := IsDrivenBy ( vehicle ) ;
37012: LD_ADDR_VAR 0 4
37016: PUSH
37017: LD_VAR 0 1
37021: PPUSH
37022: CALL_OW 311
37026: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37027: LD_VAR 0 4
37031: PPUSH
37032: LD_EXP 116
37036: PUSH
37037: LD_VAR 0 2
37041: ARRAY
37042: PUSH
37043: LD_INT 3
37045: ARRAY
37046: PPUSH
37047: LD_EXP 116
37051: PUSH
37052: LD_VAR 0 2
37056: ARRAY
37057: PUSH
37058: LD_INT 4
37060: ARRAY
37061: PPUSH
37062: CALL_OW 171
// AddComExitVehicle ( driver ) ;
37066: LD_VAR 0 4
37070: PPUSH
37071: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
37075: LD_VAR 0 4
37079: PPUSH
37080: LD_VAR 0 2
37084: PPUSH
37085: CALL_OW 180
// end else
37089: GO 37204
// if GetControl ( vehicle ) = control_remote then
37091: LD_VAR 0 1
37095: PPUSH
37096: CALL_OW 263
37100: PUSH
37101: LD_INT 2
37103: EQUAL
37104: IFFALSE 37165
// begin wait ( 0 0$2 ) ;
37106: LD_INT 70
37108: PPUSH
37109: CALL_OW 67
// if Connect ( vehicle ) then
37113: LD_VAR 0 1
37117: PPUSH
37118: CALL 50035 0 1
37122: IFFALSE 37163
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37124: LD_VAR 0 1
37128: PPUSH
37129: LD_EXP 116
37133: PUSH
37134: LD_VAR 0 2
37138: ARRAY
37139: PUSH
37140: LD_INT 3
37142: ARRAY
37143: PPUSH
37144: LD_EXP 116
37148: PUSH
37149: LD_VAR 0 2
37153: ARRAY
37154: PUSH
37155: LD_INT 4
37157: ARRAY
37158: PPUSH
37159: CALL_OW 171
// end else
37163: GO 37204
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37165: LD_VAR 0 1
37169: PPUSH
37170: LD_EXP 116
37174: PUSH
37175: LD_VAR 0 2
37179: ARRAY
37180: PUSH
37181: LD_INT 3
37183: ARRAY
37184: PPUSH
37185: LD_EXP 116
37189: PUSH
37190: LD_VAR 0 2
37194: ARRAY
37195: PUSH
37196: LD_INT 4
37198: ARRAY
37199: PPUSH
37200: CALL_OW 171
// end ; end ;
37204: LD_VAR 0 3
37208: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
37209: LD_INT 0
37211: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
37212: LD_VAR 0 1
37216: PUSH
37217: LD_INT 250
37219: EQUAL
37220: PUSH
37221: LD_VAR 0 2
37225: PPUSH
37226: CALL_OW 264
37230: PUSH
37231: LD_INT 81
37233: EQUAL
37234: AND
37235: IFFALSE 37256
// MinerPlaceMine ( unit , x , y ) ;
37237: LD_VAR 0 2
37241: PPUSH
37242: LD_VAR 0 4
37246: PPUSH
37247: LD_VAR 0 5
37251: PPUSH
37252: CALL 40246 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
37256: LD_VAR 0 1
37260: PUSH
37261: LD_INT 251
37263: EQUAL
37264: PUSH
37265: LD_VAR 0 2
37269: PPUSH
37270: CALL_OW 264
37274: PUSH
37275: LD_INT 81
37277: EQUAL
37278: AND
37279: IFFALSE 37300
// MinerDetonateMine ( unit , x , y ) ;
37281: LD_VAR 0 2
37285: PPUSH
37286: LD_VAR 0 4
37290: PPUSH
37291: LD_VAR 0 5
37295: PPUSH
37296: CALL 40521 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
37300: LD_VAR 0 1
37304: PUSH
37305: LD_INT 252
37307: EQUAL
37308: PUSH
37309: LD_VAR 0 2
37313: PPUSH
37314: CALL_OW 264
37318: PUSH
37319: LD_INT 81
37321: EQUAL
37322: AND
37323: IFFALSE 37344
// MinerCreateMinefield ( unit , x , y ) ;
37325: LD_VAR 0 2
37329: PPUSH
37330: LD_VAR 0 4
37334: PPUSH
37335: LD_VAR 0 5
37339: PPUSH
37340: CALL 40938 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
37344: LD_VAR 0 1
37348: PUSH
37349: LD_INT 253
37351: EQUAL
37352: PUSH
37353: LD_VAR 0 2
37357: PPUSH
37358: CALL_OW 257
37362: PUSH
37363: LD_INT 5
37365: EQUAL
37366: AND
37367: IFFALSE 37388
// ComBinocular ( unit , x , y ) ;
37369: LD_VAR 0 2
37373: PPUSH
37374: LD_VAR 0 4
37378: PPUSH
37379: LD_VAR 0 5
37383: PPUSH
37384: CALL 41307 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
37388: LD_VAR 0 1
37392: PUSH
37393: LD_INT 254
37395: EQUAL
37396: PUSH
37397: LD_VAR 0 2
37401: PPUSH
37402: CALL_OW 264
37406: PUSH
37407: LD_INT 99
37409: EQUAL
37410: AND
37411: PUSH
37412: LD_VAR 0 3
37416: PPUSH
37417: CALL_OW 263
37421: PUSH
37422: LD_INT 3
37424: EQUAL
37425: AND
37426: IFFALSE 37442
// HackDestroyVehicle ( unit , selectedUnit ) ;
37428: LD_VAR 0 2
37432: PPUSH
37433: LD_VAR 0 3
37437: PPUSH
37438: CALL 39610 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
37442: LD_VAR 0 1
37446: PUSH
37447: LD_INT 255
37449: EQUAL
37450: PUSH
37451: LD_VAR 0 2
37455: PPUSH
37456: CALL_OW 264
37460: PUSH
37461: LD_INT 14
37463: PUSH
37464: LD_INT 53
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: IN
37471: AND
37472: PUSH
37473: LD_VAR 0 4
37477: PPUSH
37478: LD_VAR 0 5
37482: PPUSH
37483: CALL_OW 488
37487: AND
37488: IFFALSE 37512
// CutTreeXYR ( unit , x , y , 12 ) ;
37490: LD_VAR 0 2
37494: PPUSH
37495: LD_VAR 0 4
37499: PPUSH
37500: LD_VAR 0 5
37504: PPUSH
37505: LD_INT 12
37507: PPUSH
37508: CALL 37607 0 4
// if cmd = 256 then
37512: LD_VAR 0 1
37516: PUSH
37517: LD_INT 256
37519: EQUAL
37520: IFFALSE 37541
// SetFactoryWaypoint ( unit , x , y ) ;
37522: LD_VAR 0 2
37526: PPUSH
37527: LD_VAR 0 4
37531: PPUSH
37532: LD_VAR 0 5
37536: PPUSH
37537: CALL 35359 0 3
// if cmd = 257 then
37541: LD_VAR 0 1
37545: PUSH
37546: LD_INT 257
37548: EQUAL
37549: IFFALSE 37570
// SetWarehouseGatheringPoint ( unit , x , y ) ;
37551: LD_VAR 0 2
37555: PPUSH
37556: LD_VAR 0 4
37560: PPUSH
37561: LD_VAR 0 5
37565: PPUSH
37566: CALL 35721 0 3
// if cmd = 258 then
37570: LD_VAR 0 1
37574: PUSH
37575: LD_INT 258
37577: EQUAL
37578: IFFALSE 37602
// BurnTreeXYR ( unit , x , y , 8 ) ;
37580: LD_VAR 0 2
37584: PPUSH
37585: LD_VAR 0 4
37589: PPUSH
37590: LD_VAR 0 5
37594: PPUSH
37595: LD_INT 8
37597: PPUSH
37598: CALL 38001 0 4
// end ;
37602: LD_VAR 0 6
37606: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
37607: LD_INT 0
37609: PPUSH
37610: PPUSH
37611: PPUSH
37612: PPUSH
37613: PPUSH
37614: PPUSH
37615: PPUSH
37616: PPUSH
37617: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
37618: LD_VAR 0 1
37622: PPUSH
37623: CALL_OW 302
37627: NOT
37628: PUSH
37629: LD_VAR 0 2
37633: PPUSH
37634: LD_VAR 0 3
37638: PPUSH
37639: CALL_OW 488
37643: NOT
37644: OR
37645: PUSH
37646: LD_VAR 0 4
37650: NOT
37651: OR
37652: IFFALSE 37656
// exit ;
37654: GO 37996
// list := [ ] ;
37656: LD_ADDR_VAR 0 13
37660: PUSH
37661: EMPTY
37662: ST_TO_ADDR
// if x - r < 0 then
37663: LD_VAR 0 2
37667: PUSH
37668: LD_VAR 0 4
37672: MINUS
37673: PUSH
37674: LD_INT 0
37676: LESS
37677: IFFALSE 37689
// min_x := 0 else
37679: LD_ADDR_VAR 0 7
37683: PUSH
37684: LD_INT 0
37686: ST_TO_ADDR
37687: GO 37705
// min_x := x - r ;
37689: LD_ADDR_VAR 0 7
37693: PUSH
37694: LD_VAR 0 2
37698: PUSH
37699: LD_VAR 0 4
37703: MINUS
37704: ST_TO_ADDR
// if y - r < 0 then
37705: LD_VAR 0 3
37709: PUSH
37710: LD_VAR 0 4
37714: MINUS
37715: PUSH
37716: LD_INT 0
37718: LESS
37719: IFFALSE 37731
// min_y := 0 else
37721: LD_ADDR_VAR 0 8
37725: PUSH
37726: LD_INT 0
37728: ST_TO_ADDR
37729: GO 37747
// min_y := y - r ;
37731: LD_ADDR_VAR 0 8
37735: PUSH
37736: LD_VAR 0 3
37740: PUSH
37741: LD_VAR 0 4
37745: MINUS
37746: ST_TO_ADDR
// max_x := x + r ;
37747: LD_ADDR_VAR 0 9
37751: PUSH
37752: LD_VAR 0 2
37756: PUSH
37757: LD_VAR 0 4
37761: PLUS
37762: ST_TO_ADDR
// max_y := y + r ;
37763: LD_ADDR_VAR 0 10
37767: PUSH
37768: LD_VAR 0 3
37772: PUSH
37773: LD_VAR 0 4
37777: PLUS
37778: ST_TO_ADDR
// for _x = min_x to max_x do
37779: LD_ADDR_VAR 0 11
37783: PUSH
37784: DOUBLE
37785: LD_VAR 0 7
37789: DEC
37790: ST_TO_ADDR
37791: LD_VAR 0 9
37795: PUSH
37796: FOR_TO
37797: IFFALSE 37914
// for _y = min_y to max_y do
37799: LD_ADDR_VAR 0 12
37803: PUSH
37804: DOUBLE
37805: LD_VAR 0 8
37809: DEC
37810: ST_TO_ADDR
37811: LD_VAR 0 10
37815: PUSH
37816: FOR_TO
37817: IFFALSE 37910
// begin if not ValidHex ( _x , _y ) then
37819: LD_VAR 0 11
37823: PPUSH
37824: LD_VAR 0 12
37828: PPUSH
37829: CALL_OW 488
37833: NOT
37834: IFFALSE 37838
// continue ;
37836: GO 37816
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37838: LD_VAR 0 11
37842: PPUSH
37843: LD_VAR 0 12
37847: PPUSH
37848: CALL_OW 351
37852: PUSH
37853: LD_VAR 0 11
37857: PPUSH
37858: LD_VAR 0 12
37862: PPUSH
37863: CALL_OW 554
37867: AND
37868: IFFALSE 37908
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37870: LD_ADDR_VAR 0 13
37874: PUSH
37875: LD_VAR 0 13
37879: PPUSH
37880: LD_VAR 0 13
37884: PUSH
37885: LD_INT 1
37887: PLUS
37888: PPUSH
37889: LD_VAR 0 11
37893: PUSH
37894: LD_VAR 0 12
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PPUSH
37903: CALL_OW 2
37907: ST_TO_ADDR
// end ;
37908: GO 37816
37910: POP
37911: POP
37912: GO 37796
37914: POP
37915: POP
// if not list then
37916: LD_VAR 0 13
37920: NOT
37921: IFFALSE 37925
// exit ;
37923: GO 37996
// for i in list do
37925: LD_ADDR_VAR 0 6
37929: PUSH
37930: LD_VAR 0 13
37934: PUSH
37935: FOR_IN
37936: IFFALSE 37994
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
37938: LD_VAR 0 1
37942: PPUSH
37943: LD_STRING M
37945: PUSH
37946: LD_VAR 0 6
37950: PUSH
37951: LD_INT 1
37953: ARRAY
37954: PUSH
37955: LD_VAR 0 6
37959: PUSH
37960: LD_INT 2
37962: ARRAY
37963: PUSH
37964: LD_INT 0
37966: PUSH
37967: LD_INT 0
37969: PUSH
37970: LD_INT 0
37972: PUSH
37973: LD_INT 0
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: LIST
37980: LIST
37981: LIST
37982: LIST
37983: LIST
37984: PUSH
37985: EMPTY
37986: LIST
37987: PPUSH
37988: CALL_OW 447
37992: GO 37935
37994: POP
37995: POP
// end ;
37996: LD_VAR 0 5
38000: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
38001: LD_INT 0
38003: PPUSH
38004: PPUSH
38005: PPUSH
38006: PPUSH
38007: PPUSH
38008: PPUSH
38009: PPUSH
38010: PPUSH
38011: PPUSH
38012: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
38013: LD_VAR 0 1
38017: PPUSH
38018: CALL_OW 302
38022: NOT
38023: PUSH
38024: LD_VAR 0 2
38028: PPUSH
38029: LD_VAR 0 3
38033: PPUSH
38034: CALL_OW 488
38038: NOT
38039: OR
38040: PUSH
38041: LD_VAR 0 4
38045: NOT
38046: OR
38047: IFFALSE 38051
// exit ;
38049: GO 38564
// list := [ ] ;
38051: LD_ADDR_VAR 0 13
38055: PUSH
38056: EMPTY
38057: ST_TO_ADDR
// if x - r < 0 then
38058: LD_VAR 0 2
38062: PUSH
38063: LD_VAR 0 4
38067: MINUS
38068: PUSH
38069: LD_INT 0
38071: LESS
38072: IFFALSE 38084
// min_x := 0 else
38074: LD_ADDR_VAR 0 7
38078: PUSH
38079: LD_INT 0
38081: ST_TO_ADDR
38082: GO 38100
// min_x := x - r ;
38084: LD_ADDR_VAR 0 7
38088: PUSH
38089: LD_VAR 0 2
38093: PUSH
38094: LD_VAR 0 4
38098: MINUS
38099: ST_TO_ADDR
// if y - r < 0 then
38100: LD_VAR 0 3
38104: PUSH
38105: LD_VAR 0 4
38109: MINUS
38110: PUSH
38111: LD_INT 0
38113: LESS
38114: IFFALSE 38126
// min_y := 0 else
38116: LD_ADDR_VAR 0 8
38120: PUSH
38121: LD_INT 0
38123: ST_TO_ADDR
38124: GO 38142
// min_y := y - r ;
38126: LD_ADDR_VAR 0 8
38130: PUSH
38131: LD_VAR 0 3
38135: PUSH
38136: LD_VAR 0 4
38140: MINUS
38141: ST_TO_ADDR
// max_x := x + r ;
38142: LD_ADDR_VAR 0 9
38146: PUSH
38147: LD_VAR 0 2
38151: PUSH
38152: LD_VAR 0 4
38156: PLUS
38157: ST_TO_ADDR
// max_y := y + r ;
38158: LD_ADDR_VAR 0 10
38162: PUSH
38163: LD_VAR 0 3
38167: PUSH
38168: LD_VAR 0 4
38172: PLUS
38173: ST_TO_ADDR
// for _x = min_x to max_x do
38174: LD_ADDR_VAR 0 11
38178: PUSH
38179: DOUBLE
38180: LD_VAR 0 7
38184: DEC
38185: ST_TO_ADDR
38186: LD_VAR 0 9
38190: PUSH
38191: FOR_TO
38192: IFFALSE 38309
// for _y = min_y to max_y do
38194: LD_ADDR_VAR 0 12
38198: PUSH
38199: DOUBLE
38200: LD_VAR 0 8
38204: DEC
38205: ST_TO_ADDR
38206: LD_VAR 0 10
38210: PUSH
38211: FOR_TO
38212: IFFALSE 38305
// begin if not ValidHex ( _x , _y ) then
38214: LD_VAR 0 11
38218: PPUSH
38219: LD_VAR 0 12
38223: PPUSH
38224: CALL_OW 488
38228: NOT
38229: IFFALSE 38233
// continue ;
38231: GO 38211
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
38233: LD_VAR 0 11
38237: PPUSH
38238: LD_VAR 0 12
38242: PPUSH
38243: CALL_OW 351
38247: PUSH
38248: LD_VAR 0 11
38252: PPUSH
38253: LD_VAR 0 12
38257: PPUSH
38258: CALL_OW 554
38262: AND
38263: IFFALSE 38303
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
38265: LD_ADDR_VAR 0 13
38269: PUSH
38270: LD_VAR 0 13
38274: PPUSH
38275: LD_VAR 0 13
38279: PUSH
38280: LD_INT 1
38282: PLUS
38283: PPUSH
38284: LD_VAR 0 11
38288: PUSH
38289: LD_VAR 0 12
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PPUSH
38298: CALL_OW 2
38302: ST_TO_ADDR
// end ;
38303: GO 38211
38305: POP
38306: POP
38307: GO 38191
38309: POP
38310: POP
// if not list then
38311: LD_VAR 0 13
38315: NOT
38316: IFFALSE 38320
// exit ;
38318: GO 38564
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
38320: LD_ADDR_VAR 0 13
38324: PUSH
38325: LD_VAR 0 1
38329: PPUSH
38330: LD_VAR 0 13
38334: PPUSH
38335: LD_INT 1
38337: PPUSH
38338: LD_INT 1
38340: PPUSH
38341: CALL 47177 0 4
38345: ST_TO_ADDR
// ComStop ( flame ) ;
38346: LD_VAR 0 1
38350: PPUSH
38351: CALL_OW 141
// for i in list do
38355: LD_ADDR_VAR 0 6
38359: PUSH
38360: LD_VAR 0 13
38364: PUSH
38365: FOR_IN
38366: IFFALSE 38397
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
38368: LD_VAR 0 1
38372: PPUSH
38373: LD_VAR 0 6
38377: PUSH
38378: LD_INT 1
38380: ARRAY
38381: PPUSH
38382: LD_VAR 0 6
38386: PUSH
38387: LD_INT 2
38389: ARRAY
38390: PPUSH
38391: CALL_OW 176
38395: GO 38365
38397: POP
38398: POP
// repeat wait ( 0 0$1 ) ;
38399: LD_INT 35
38401: PPUSH
38402: CALL_OW 67
// task := GetTaskList ( flame ) ;
38406: LD_ADDR_VAR 0 14
38410: PUSH
38411: LD_VAR 0 1
38415: PPUSH
38416: CALL_OW 437
38420: ST_TO_ADDR
// if not task then
38421: LD_VAR 0 14
38425: NOT
38426: IFFALSE 38430
// exit ;
38428: GO 38564
// if task [ 1 ] [ 1 ] <> | then
38430: LD_VAR 0 14
38434: PUSH
38435: LD_INT 1
38437: ARRAY
38438: PUSH
38439: LD_INT 1
38441: ARRAY
38442: PUSH
38443: LD_STRING |
38445: NONEQUAL
38446: IFFALSE 38450
// exit ;
38448: GO 38564
// _x := task [ 1 ] [ 2 ] ;
38450: LD_ADDR_VAR 0 11
38454: PUSH
38455: LD_VAR 0 14
38459: PUSH
38460: LD_INT 1
38462: ARRAY
38463: PUSH
38464: LD_INT 2
38466: ARRAY
38467: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
38468: LD_ADDR_VAR 0 12
38472: PUSH
38473: LD_VAR 0 14
38477: PUSH
38478: LD_INT 1
38480: ARRAY
38481: PUSH
38482: LD_INT 3
38484: ARRAY
38485: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
38486: LD_VAR 0 11
38490: PPUSH
38491: LD_VAR 0 12
38495: PPUSH
38496: CALL_OW 351
38500: NOT
38501: PUSH
38502: LD_VAR 0 11
38506: PPUSH
38507: LD_VAR 0 12
38511: PPUSH
38512: CALL_OW 554
38516: NOT
38517: OR
38518: IFFALSE 38552
// begin task := Delete ( task , 1 ) ;
38520: LD_ADDR_VAR 0 14
38524: PUSH
38525: LD_VAR 0 14
38529: PPUSH
38530: LD_INT 1
38532: PPUSH
38533: CALL_OW 3
38537: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
38538: LD_VAR 0 1
38542: PPUSH
38543: LD_VAR 0 14
38547: PPUSH
38548: CALL_OW 446
// end ; until not HasTask ( flame ) ;
38552: LD_VAR 0 1
38556: PPUSH
38557: CALL_OW 314
38561: NOT
38562: IFFALSE 38399
// end ;
38564: LD_VAR 0 5
38568: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
38569: LD_EXP 119
38573: NOT
38574: IFFALSE 38624
38576: GO 38578
38578: DISABLE
// begin initHack := true ;
38579: LD_ADDR_EXP 119
38583: PUSH
38584: LD_INT 1
38586: ST_TO_ADDR
// hackTanks := [ ] ;
38587: LD_ADDR_EXP 120
38591: PUSH
38592: EMPTY
38593: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
38594: LD_ADDR_EXP 121
38598: PUSH
38599: EMPTY
38600: ST_TO_ADDR
// hackLimit := 3 ;
38601: LD_ADDR_EXP 122
38605: PUSH
38606: LD_INT 3
38608: ST_TO_ADDR
// hackDist := 12 ;
38609: LD_ADDR_EXP 123
38613: PUSH
38614: LD_INT 12
38616: ST_TO_ADDR
// hackCounter := [ ] ;
38617: LD_ADDR_EXP 124
38621: PUSH
38622: EMPTY
38623: ST_TO_ADDR
// end ;
38624: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
38625: LD_EXP 119
38629: PUSH
38630: LD_INT 34
38632: PUSH
38633: LD_INT 99
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PPUSH
38640: CALL_OW 69
38644: AND
38645: IFFALSE 38898
38647: GO 38649
38649: DISABLE
38650: LD_INT 0
38652: PPUSH
38653: PPUSH
// begin enable ;
38654: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
38655: LD_ADDR_VAR 0 1
38659: PUSH
38660: LD_INT 34
38662: PUSH
38663: LD_INT 99
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PPUSH
38670: CALL_OW 69
38674: PUSH
38675: FOR_IN
38676: IFFALSE 38896
// begin if not i in hackTanks then
38678: LD_VAR 0 1
38682: PUSH
38683: LD_EXP 120
38687: IN
38688: NOT
38689: IFFALSE 38772
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
38691: LD_ADDR_EXP 120
38695: PUSH
38696: LD_EXP 120
38700: PPUSH
38701: LD_EXP 120
38705: PUSH
38706: LD_INT 1
38708: PLUS
38709: PPUSH
38710: LD_VAR 0 1
38714: PPUSH
38715: CALL_OW 1
38719: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
38720: LD_ADDR_EXP 121
38724: PUSH
38725: LD_EXP 121
38729: PPUSH
38730: LD_EXP 121
38734: PUSH
38735: LD_INT 1
38737: PLUS
38738: PPUSH
38739: EMPTY
38740: PPUSH
38741: CALL_OW 1
38745: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
38746: LD_ADDR_EXP 124
38750: PUSH
38751: LD_EXP 124
38755: PPUSH
38756: LD_EXP 124
38760: PUSH
38761: LD_INT 1
38763: PLUS
38764: PPUSH
38765: EMPTY
38766: PPUSH
38767: CALL_OW 1
38771: ST_TO_ADDR
// end ; if not IsOk ( i ) then
38772: LD_VAR 0 1
38776: PPUSH
38777: CALL_OW 302
38781: NOT
38782: IFFALSE 38795
// begin HackUnlinkAll ( i ) ;
38784: LD_VAR 0 1
38788: PPUSH
38789: CALL 38901 0 1
// continue ;
38793: GO 38675
// end ; HackCheckCapturedStatus ( i ) ;
38795: LD_VAR 0 1
38799: PPUSH
38800: CALL 39344 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
38804: LD_ADDR_VAR 0 2
38808: PUSH
38809: LD_INT 81
38811: PUSH
38812: LD_VAR 0 1
38816: PPUSH
38817: CALL_OW 255
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 33
38828: PUSH
38829: LD_INT 3
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 91
38838: PUSH
38839: LD_VAR 0 1
38843: PUSH
38844: LD_EXP 123
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: LIST
38853: PUSH
38854: LD_INT 50
38856: PUSH
38857: EMPTY
38858: LIST
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: PPUSH
38866: CALL_OW 69
38870: ST_TO_ADDR
// if not tmp then
38871: LD_VAR 0 2
38875: NOT
38876: IFFALSE 38880
// continue ;
38878: GO 38675
// HackLink ( i , tmp ) ;
38880: LD_VAR 0 1
38884: PPUSH
38885: LD_VAR 0 2
38889: PPUSH
38890: CALL 39037 0 2
// end ;
38894: GO 38675
38896: POP
38897: POP
// end ;
38898: PPOPN 2
38900: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
38901: LD_INT 0
38903: PPUSH
38904: PPUSH
38905: PPUSH
// if not hack in hackTanks then
38906: LD_VAR 0 1
38910: PUSH
38911: LD_EXP 120
38915: IN
38916: NOT
38917: IFFALSE 38921
// exit ;
38919: GO 39032
// index := GetElementIndex ( hackTanks , hack ) ;
38921: LD_ADDR_VAR 0 4
38925: PUSH
38926: LD_EXP 120
38930: PPUSH
38931: LD_VAR 0 1
38935: PPUSH
38936: CALL 46474 0 2
38940: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
38941: LD_EXP 121
38945: PUSH
38946: LD_VAR 0 4
38950: ARRAY
38951: IFFALSE 39032
// begin for i in hackTanksCaptured [ index ] do
38953: LD_ADDR_VAR 0 3
38957: PUSH
38958: LD_EXP 121
38962: PUSH
38963: LD_VAR 0 4
38967: ARRAY
38968: PUSH
38969: FOR_IN
38970: IFFALSE 38996
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
38972: LD_VAR 0 3
38976: PUSH
38977: LD_INT 1
38979: ARRAY
38980: PPUSH
38981: LD_VAR 0 3
38985: PUSH
38986: LD_INT 2
38988: ARRAY
38989: PPUSH
38990: CALL_OW 235
38994: GO 38969
38996: POP
38997: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
38998: LD_ADDR_EXP 121
39002: PUSH
39003: LD_EXP 121
39007: PPUSH
39008: LD_VAR 0 4
39012: PPUSH
39013: EMPTY
39014: PPUSH
39015: CALL_OW 1
39019: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
39020: LD_VAR 0 1
39024: PPUSH
39025: LD_INT 0
39027: PPUSH
39028: CALL_OW 505
// end ; end ;
39032: LD_VAR 0 2
39036: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
39037: LD_INT 0
39039: PPUSH
39040: PPUSH
39041: PPUSH
// if not hack in hackTanks or not vehicles then
39042: LD_VAR 0 1
39046: PUSH
39047: LD_EXP 120
39051: IN
39052: NOT
39053: PUSH
39054: LD_VAR 0 2
39058: NOT
39059: OR
39060: IFFALSE 39064
// exit ;
39062: GO 39339
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
39064: LD_ADDR_VAR 0 2
39068: PUSH
39069: LD_VAR 0 1
39073: PPUSH
39074: LD_VAR 0 2
39078: PPUSH
39079: LD_INT 1
39081: PPUSH
39082: LD_INT 1
39084: PPUSH
39085: CALL 47124 0 4
39089: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
39090: LD_ADDR_VAR 0 5
39094: PUSH
39095: LD_EXP 120
39099: PPUSH
39100: LD_VAR 0 1
39104: PPUSH
39105: CALL 46474 0 2
39109: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
39110: LD_EXP 121
39114: PUSH
39115: LD_VAR 0 5
39119: ARRAY
39120: PUSH
39121: LD_EXP 122
39125: LESS
39126: IFFALSE 39315
// begin for i := 1 to vehicles do
39128: LD_ADDR_VAR 0 4
39132: PUSH
39133: DOUBLE
39134: LD_INT 1
39136: DEC
39137: ST_TO_ADDR
39138: LD_VAR 0 2
39142: PUSH
39143: FOR_TO
39144: IFFALSE 39313
// begin if hackTanksCaptured [ index ] = hackLimit then
39146: LD_EXP 121
39150: PUSH
39151: LD_VAR 0 5
39155: ARRAY
39156: PUSH
39157: LD_EXP 122
39161: EQUAL
39162: IFFALSE 39166
// break ;
39164: GO 39313
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
39166: LD_ADDR_EXP 124
39170: PUSH
39171: LD_EXP 124
39175: PPUSH
39176: LD_VAR 0 5
39180: PPUSH
39181: LD_EXP 124
39185: PUSH
39186: LD_VAR 0 5
39190: ARRAY
39191: PUSH
39192: LD_INT 1
39194: PLUS
39195: PPUSH
39196: CALL_OW 1
39200: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
39201: LD_ADDR_EXP 121
39205: PUSH
39206: LD_EXP 121
39210: PPUSH
39211: LD_VAR 0 5
39215: PUSH
39216: LD_EXP 121
39220: PUSH
39221: LD_VAR 0 5
39225: ARRAY
39226: PUSH
39227: LD_INT 1
39229: PLUS
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PPUSH
39235: LD_VAR 0 2
39239: PUSH
39240: LD_VAR 0 4
39244: ARRAY
39245: PUSH
39246: LD_VAR 0 2
39250: PUSH
39251: LD_VAR 0 4
39255: ARRAY
39256: PPUSH
39257: CALL_OW 255
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PPUSH
39266: CALL 46689 0 3
39270: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
39271: LD_VAR 0 2
39275: PUSH
39276: LD_VAR 0 4
39280: ARRAY
39281: PPUSH
39282: LD_VAR 0 1
39286: PPUSH
39287: CALL_OW 255
39291: PPUSH
39292: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
39296: LD_VAR 0 2
39300: PUSH
39301: LD_VAR 0 4
39305: ARRAY
39306: PPUSH
39307: CALL_OW 141
// end ;
39311: GO 39143
39313: POP
39314: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39315: LD_VAR 0 1
39319: PPUSH
39320: LD_EXP 121
39324: PUSH
39325: LD_VAR 0 5
39329: ARRAY
39330: PUSH
39331: LD_INT 0
39333: PLUS
39334: PPUSH
39335: CALL_OW 505
// end ;
39339: LD_VAR 0 3
39343: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
39344: LD_INT 0
39346: PPUSH
39347: PPUSH
39348: PPUSH
39349: PPUSH
// if not hack in hackTanks then
39350: LD_VAR 0 1
39354: PUSH
39355: LD_EXP 120
39359: IN
39360: NOT
39361: IFFALSE 39365
// exit ;
39363: GO 39605
// index := GetElementIndex ( hackTanks , hack ) ;
39365: LD_ADDR_VAR 0 4
39369: PUSH
39370: LD_EXP 120
39374: PPUSH
39375: LD_VAR 0 1
39379: PPUSH
39380: CALL 46474 0 2
39384: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
39385: LD_ADDR_VAR 0 3
39389: PUSH
39390: DOUBLE
39391: LD_EXP 121
39395: PUSH
39396: LD_VAR 0 4
39400: ARRAY
39401: INC
39402: ST_TO_ADDR
39403: LD_INT 1
39405: PUSH
39406: FOR_DOWNTO
39407: IFFALSE 39579
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
39409: LD_ADDR_VAR 0 5
39413: PUSH
39414: LD_EXP 121
39418: PUSH
39419: LD_VAR 0 4
39423: ARRAY
39424: PUSH
39425: LD_VAR 0 3
39429: ARRAY
39430: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
39431: LD_VAR 0 5
39435: PUSH
39436: LD_INT 1
39438: ARRAY
39439: PPUSH
39440: CALL_OW 302
39444: NOT
39445: PUSH
39446: LD_VAR 0 5
39450: PUSH
39451: LD_INT 1
39453: ARRAY
39454: PPUSH
39455: CALL_OW 255
39459: PUSH
39460: LD_VAR 0 1
39464: PPUSH
39465: CALL_OW 255
39469: NONEQUAL
39470: OR
39471: IFFALSE 39577
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
39473: LD_VAR 0 5
39477: PUSH
39478: LD_INT 1
39480: ARRAY
39481: PPUSH
39482: CALL_OW 305
39486: PUSH
39487: LD_VAR 0 5
39491: PUSH
39492: LD_INT 1
39494: ARRAY
39495: PPUSH
39496: CALL_OW 255
39500: PUSH
39501: LD_VAR 0 1
39505: PPUSH
39506: CALL_OW 255
39510: EQUAL
39511: AND
39512: IFFALSE 39536
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
39514: LD_VAR 0 5
39518: PUSH
39519: LD_INT 1
39521: ARRAY
39522: PPUSH
39523: LD_VAR 0 5
39527: PUSH
39528: LD_INT 2
39530: ARRAY
39531: PPUSH
39532: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
39536: LD_ADDR_EXP 121
39540: PUSH
39541: LD_EXP 121
39545: PPUSH
39546: LD_VAR 0 4
39550: PPUSH
39551: LD_EXP 121
39555: PUSH
39556: LD_VAR 0 4
39560: ARRAY
39561: PPUSH
39562: LD_VAR 0 3
39566: PPUSH
39567: CALL_OW 3
39571: PPUSH
39572: CALL_OW 1
39576: ST_TO_ADDR
// end ; end ;
39577: GO 39406
39579: POP
39580: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
39581: LD_VAR 0 1
39585: PPUSH
39586: LD_EXP 121
39590: PUSH
39591: LD_VAR 0 4
39595: ARRAY
39596: PUSH
39597: LD_INT 0
39599: PLUS
39600: PPUSH
39601: CALL_OW 505
// end ;
39605: LD_VAR 0 2
39609: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
39610: LD_INT 0
39612: PPUSH
39613: PPUSH
39614: PPUSH
39615: PPUSH
// if not hack in hackTanks then
39616: LD_VAR 0 1
39620: PUSH
39621: LD_EXP 120
39625: IN
39626: NOT
39627: IFFALSE 39631
// exit ;
39629: GO 39716
// index := GetElementIndex ( hackTanks , hack ) ;
39631: LD_ADDR_VAR 0 5
39635: PUSH
39636: LD_EXP 120
39640: PPUSH
39641: LD_VAR 0 1
39645: PPUSH
39646: CALL 46474 0 2
39650: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
39651: LD_ADDR_VAR 0 4
39655: PUSH
39656: DOUBLE
39657: LD_INT 1
39659: DEC
39660: ST_TO_ADDR
39661: LD_EXP 121
39665: PUSH
39666: LD_VAR 0 5
39670: ARRAY
39671: PUSH
39672: FOR_TO
39673: IFFALSE 39714
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
39675: LD_EXP 121
39679: PUSH
39680: LD_VAR 0 5
39684: ARRAY
39685: PUSH
39686: LD_VAR 0 4
39690: ARRAY
39691: PUSH
39692: LD_INT 1
39694: ARRAY
39695: PUSH
39696: LD_VAR 0 2
39700: EQUAL
39701: IFFALSE 39712
// KillUnit ( vehicle ) ;
39703: LD_VAR 0 2
39707: PPUSH
39708: CALL_OW 66
39712: GO 39672
39714: POP
39715: POP
// end ;
39716: LD_VAR 0 3
39720: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
39721: LD_EXP 125
39725: NOT
39726: IFFALSE 39761
39728: GO 39730
39730: DISABLE
// begin initMiner := true ;
39731: LD_ADDR_EXP 125
39735: PUSH
39736: LD_INT 1
39738: ST_TO_ADDR
// minersList := [ ] ;
39739: LD_ADDR_EXP 126
39743: PUSH
39744: EMPTY
39745: ST_TO_ADDR
// minerMinesList := [ ] ;
39746: LD_ADDR_EXP 127
39750: PUSH
39751: EMPTY
39752: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
39753: LD_ADDR_EXP 128
39757: PUSH
39758: LD_INT 5
39760: ST_TO_ADDR
// end ;
39761: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
39762: LD_EXP 125
39766: PUSH
39767: LD_INT 34
39769: PUSH
39770: LD_INT 81
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PPUSH
39777: CALL_OW 69
39781: AND
39782: IFFALSE 40243
39784: GO 39786
39786: DISABLE
39787: LD_INT 0
39789: PPUSH
39790: PPUSH
39791: PPUSH
39792: PPUSH
// begin enable ;
39793: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
39794: LD_ADDR_VAR 0 1
39798: PUSH
39799: LD_INT 34
39801: PUSH
39802: LD_INT 81
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PPUSH
39809: CALL_OW 69
39813: PUSH
39814: FOR_IN
39815: IFFALSE 39887
// begin if not i in minersList then
39817: LD_VAR 0 1
39821: PUSH
39822: LD_EXP 126
39826: IN
39827: NOT
39828: IFFALSE 39885
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
39830: LD_ADDR_EXP 126
39834: PUSH
39835: LD_EXP 126
39839: PPUSH
39840: LD_EXP 126
39844: PUSH
39845: LD_INT 1
39847: PLUS
39848: PPUSH
39849: LD_VAR 0 1
39853: PPUSH
39854: CALL_OW 1
39858: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
39859: LD_ADDR_EXP 127
39863: PUSH
39864: LD_EXP 127
39868: PPUSH
39869: LD_EXP 127
39873: PUSH
39874: LD_INT 1
39876: PLUS
39877: PPUSH
39878: EMPTY
39879: PPUSH
39880: CALL_OW 1
39884: ST_TO_ADDR
// end end ;
39885: GO 39814
39887: POP
39888: POP
// for i := minerMinesList downto 1 do
39889: LD_ADDR_VAR 0 1
39893: PUSH
39894: DOUBLE
39895: LD_EXP 127
39899: INC
39900: ST_TO_ADDR
39901: LD_INT 1
39903: PUSH
39904: FOR_DOWNTO
39905: IFFALSE 40241
// begin if IsLive ( minersList [ i ] ) then
39907: LD_EXP 126
39911: PUSH
39912: LD_VAR 0 1
39916: ARRAY
39917: PPUSH
39918: CALL_OW 300
39922: IFFALSE 39950
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
39924: LD_EXP 126
39928: PUSH
39929: LD_VAR 0 1
39933: ARRAY
39934: PPUSH
39935: LD_EXP 127
39939: PUSH
39940: LD_VAR 0 1
39944: ARRAY
39945: PPUSH
39946: CALL_OW 505
// if not minerMinesList [ i ] then
39950: LD_EXP 127
39954: PUSH
39955: LD_VAR 0 1
39959: ARRAY
39960: NOT
39961: IFFALSE 39965
// continue ;
39963: GO 39904
// for j := minerMinesList [ i ] downto 1 do
39965: LD_ADDR_VAR 0 2
39969: PUSH
39970: DOUBLE
39971: LD_EXP 127
39975: PUSH
39976: LD_VAR 0 1
39980: ARRAY
39981: INC
39982: ST_TO_ADDR
39983: LD_INT 1
39985: PUSH
39986: FOR_DOWNTO
39987: IFFALSE 40237
// begin side := GetSide ( minersList [ i ] ) ;
39989: LD_ADDR_VAR 0 3
39993: PUSH
39994: LD_EXP 126
39998: PUSH
39999: LD_VAR 0 1
40003: ARRAY
40004: PPUSH
40005: CALL_OW 255
40009: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
40010: LD_ADDR_VAR 0 4
40014: PUSH
40015: LD_EXP 127
40019: PUSH
40020: LD_VAR 0 1
40024: ARRAY
40025: PUSH
40026: LD_VAR 0 2
40030: ARRAY
40031: PUSH
40032: LD_INT 1
40034: ARRAY
40035: PPUSH
40036: LD_EXP 127
40040: PUSH
40041: LD_VAR 0 1
40045: ARRAY
40046: PUSH
40047: LD_VAR 0 2
40051: ARRAY
40052: PUSH
40053: LD_INT 2
40055: ARRAY
40056: PPUSH
40057: CALL_OW 428
40061: ST_TO_ADDR
// if not tmp then
40062: LD_VAR 0 4
40066: NOT
40067: IFFALSE 40071
// continue ;
40069: GO 39986
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
40071: LD_VAR 0 4
40075: PUSH
40076: LD_INT 81
40078: PUSH
40079: LD_VAR 0 3
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PPUSH
40088: CALL_OW 69
40092: IN
40093: PUSH
40094: LD_EXP 127
40098: PUSH
40099: LD_VAR 0 1
40103: ARRAY
40104: PUSH
40105: LD_VAR 0 2
40109: ARRAY
40110: PUSH
40111: LD_INT 1
40113: ARRAY
40114: PPUSH
40115: LD_EXP 127
40119: PUSH
40120: LD_VAR 0 1
40124: ARRAY
40125: PUSH
40126: LD_VAR 0 2
40130: ARRAY
40131: PUSH
40132: LD_INT 2
40134: ARRAY
40135: PPUSH
40136: CALL_OW 458
40140: AND
40141: IFFALSE 40235
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
40143: LD_EXP 127
40147: PUSH
40148: LD_VAR 0 1
40152: ARRAY
40153: PUSH
40154: LD_VAR 0 2
40158: ARRAY
40159: PUSH
40160: LD_INT 1
40162: ARRAY
40163: PPUSH
40164: LD_EXP 127
40168: PUSH
40169: LD_VAR 0 1
40173: ARRAY
40174: PUSH
40175: LD_VAR 0 2
40179: ARRAY
40180: PUSH
40181: LD_INT 2
40183: ARRAY
40184: PPUSH
40185: LD_VAR 0 3
40189: PPUSH
40190: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
40194: LD_ADDR_EXP 127
40198: PUSH
40199: LD_EXP 127
40203: PPUSH
40204: LD_VAR 0 1
40208: PPUSH
40209: LD_EXP 127
40213: PUSH
40214: LD_VAR 0 1
40218: ARRAY
40219: PPUSH
40220: LD_VAR 0 2
40224: PPUSH
40225: CALL_OW 3
40229: PPUSH
40230: CALL_OW 1
40234: ST_TO_ADDR
// end ; end ;
40235: GO 39986
40237: POP
40238: POP
// end ;
40239: GO 39904
40241: POP
40242: POP
// end ;
40243: PPOPN 4
40245: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
40246: LD_INT 0
40248: PPUSH
40249: PPUSH
// result := false ;
40250: LD_ADDR_VAR 0 4
40254: PUSH
40255: LD_INT 0
40257: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
40258: LD_VAR 0 1
40262: PPUSH
40263: CALL_OW 264
40267: PUSH
40268: LD_INT 81
40270: EQUAL
40271: NOT
40272: IFFALSE 40276
// exit ;
40274: GO 40516
// index := GetElementIndex ( minersList , unit ) ;
40276: LD_ADDR_VAR 0 5
40280: PUSH
40281: LD_EXP 126
40285: PPUSH
40286: LD_VAR 0 1
40290: PPUSH
40291: CALL 46474 0 2
40295: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
40296: LD_EXP 127
40300: PUSH
40301: LD_VAR 0 5
40305: ARRAY
40306: PUSH
40307: LD_EXP 128
40311: GREATEREQUAL
40312: IFFALSE 40316
// exit ;
40314: GO 40516
// ComMoveXY ( unit , x , y ) ;
40316: LD_VAR 0 1
40320: PPUSH
40321: LD_VAR 0 2
40325: PPUSH
40326: LD_VAR 0 3
40330: PPUSH
40331: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40335: LD_INT 35
40337: PPUSH
40338: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
40342: LD_VAR 0 1
40346: PPUSH
40347: LD_VAR 0 2
40351: PPUSH
40352: LD_VAR 0 3
40356: PPUSH
40357: CALL 78215 0 3
40361: NOT
40362: PUSH
40363: LD_VAR 0 1
40367: PPUSH
40368: CALL_OW 314
40372: AND
40373: IFFALSE 40377
// exit ;
40375: GO 40516
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
40377: LD_VAR 0 2
40381: PPUSH
40382: LD_VAR 0 3
40386: PPUSH
40387: CALL_OW 428
40391: PUSH
40392: LD_VAR 0 1
40396: EQUAL
40397: PUSH
40398: LD_VAR 0 1
40402: PPUSH
40403: CALL_OW 314
40407: NOT
40408: AND
40409: IFFALSE 40335
// PlaySoundXY ( x , y , PlantMine ) ;
40411: LD_VAR 0 2
40415: PPUSH
40416: LD_VAR 0 3
40420: PPUSH
40421: LD_STRING PlantMine
40423: PPUSH
40424: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
40428: LD_VAR 0 2
40432: PPUSH
40433: LD_VAR 0 3
40437: PPUSH
40438: LD_VAR 0 1
40442: PPUSH
40443: CALL_OW 255
40447: PPUSH
40448: LD_INT 0
40450: PPUSH
40451: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
40455: LD_ADDR_EXP 127
40459: PUSH
40460: LD_EXP 127
40464: PPUSH
40465: LD_VAR 0 5
40469: PUSH
40470: LD_EXP 127
40474: PUSH
40475: LD_VAR 0 5
40479: ARRAY
40480: PUSH
40481: LD_INT 1
40483: PLUS
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PPUSH
40489: LD_VAR 0 2
40493: PUSH
40494: LD_VAR 0 3
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PPUSH
40503: CALL 46689 0 3
40507: ST_TO_ADDR
// result := true ;
40508: LD_ADDR_VAR 0 4
40512: PUSH
40513: LD_INT 1
40515: ST_TO_ADDR
// end ;
40516: LD_VAR 0 4
40520: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
40521: LD_INT 0
40523: PPUSH
40524: PPUSH
40525: PPUSH
// if not unit in minersList then
40526: LD_VAR 0 1
40530: PUSH
40531: LD_EXP 126
40535: IN
40536: NOT
40537: IFFALSE 40541
// exit ;
40539: GO 40933
// index := GetElementIndex ( minersList , unit ) ;
40541: LD_ADDR_VAR 0 6
40545: PUSH
40546: LD_EXP 126
40550: PPUSH
40551: LD_VAR 0 1
40555: PPUSH
40556: CALL 46474 0 2
40560: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
40561: LD_ADDR_VAR 0 5
40565: PUSH
40566: DOUBLE
40567: LD_EXP 127
40571: PUSH
40572: LD_VAR 0 6
40576: ARRAY
40577: INC
40578: ST_TO_ADDR
40579: LD_INT 1
40581: PUSH
40582: FOR_DOWNTO
40583: IFFALSE 40744
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
40585: LD_EXP 127
40589: PUSH
40590: LD_VAR 0 6
40594: ARRAY
40595: PUSH
40596: LD_VAR 0 5
40600: ARRAY
40601: PUSH
40602: LD_INT 1
40604: ARRAY
40605: PUSH
40606: LD_VAR 0 2
40610: EQUAL
40611: PUSH
40612: LD_EXP 127
40616: PUSH
40617: LD_VAR 0 6
40621: ARRAY
40622: PUSH
40623: LD_VAR 0 5
40627: ARRAY
40628: PUSH
40629: LD_INT 2
40631: ARRAY
40632: PUSH
40633: LD_VAR 0 3
40637: EQUAL
40638: AND
40639: IFFALSE 40742
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40641: LD_EXP 127
40645: PUSH
40646: LD_VAR 0 6
40650: ARRAY
40651: PUSH
40652: LD_VAR 0 5
40656: ARRAY
40657: PUSH
40658: LD_INT 1
40660: ARRAY
40661: PPUSH
40662: LD_EXP 127
40666: PUSH
40667: LD_VAR 0 6
40671: ARRAY
40672: PUSH
40673: LD_VAR 0 5
40677: ARRAY
40678: PUSH
40679: LD_INT 2
40681: ARRAY
40682: PPUSH
40683: LD_VAR 0 1
40687: PPUSH
40688: CALL_OW 255
40692: PPUSH
40693: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40697: LD_ADDR_EXP 127
40701: PUSH
40702: LD_EXP 127
40706: PPUSH
40707: LD_VAR 0 6
40711: PPUSH
40712: LD_EXP 127
40716: PUSH
40717: LD_VAR 0 6
40721: ARRAY
40722: PPUSH
40723: LD_VAR 0 5
40727: PPUSH
40728: CALL_OW 3
40732: PPUSH
40733: CALL_OW 1
40737: ST_TO_ADDR
// exit ;
40738: POP
40739: POP
40740: GO 40933
// end ; end ;
40742: GO 40582
40744: POP
40745: POP
// for i := minerMinesList [ index ] downto 1 do
40746: LD_ADDR_VAR 0 5
40750: PUSH
40751: DOUBLE
40752: LD_EXP 127
40756: PUSH
40757: LD_VAR 0 6
40761: ARRAY
40762: INC
40763: ST_TO_ADDR
40764: LD_INT 1
40766: PUSH
40767: FOR_DOWNTO
40768: IFFALSE 40931
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
40770: LD_EXP 127
40774: PUSH
40775: LD_VAR 0 6
40779: ARRAY
40780: PUSH
40781: LD_VAR 0 5
40785: ARRAY
40786: PUSH
40787: LD_INT 1
40789: ARRAY
40790: PPUSH
40791: LD_EXP 127
40795: PUSH
40796: LD_VAR 0 6
40800: ARRAY
40801: PUSH
40802: LD_VAR 0 5
40806: ARRAY
40807: PUSH
40808: LD_INT 2
40810: ARRAY
40811: PPUSH
40812: LD_VAR 0 2
40816: PPUSH
40817: LD_VAR 0 3
40821: PPUSH
40822: CALL_OW 298
40826: PUSH
40827: LD_INT 6
40829: LESS
40830: IFFALSE 40929
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
40832: LD_EXP 127
40836: PUSH
40837: LD_VAR 0 6
40841: ARRAY
40842: PUSH
40843: LD_VAR 0 5
40847: ARRAY
40848: PUSH
40849: LD_INT 1
40851: ARRAY
40852: PPUSH
40853: LD_EXP 127
40857: PUSH
40858: LD_VAR 0 6
40862: ARRAY
40863: PUSH
40864: LD_VAR 0 5
40868: ARRAY
40869: PUSH
40870: LD_INT 2
40872: ARRAY
40873: PPUSH
40874: LD_VAR 0 1
40878: PPUSH
40879: CALL_OW 255
40883: PPUSH
40884: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
40888: LD_ADDR_EXP 127
40892: PUSH
40893: LD_EXP 127
40897: PPUSH
40898: LD_VAR 0 6
40902: PPUSH
40903: LD_EXP 127
40907: PUSH
40908: LD_VAR 0 6
40912: ARRAY
40913: PPUSH
40914: LD_VAR 0 5
40918: PPUSH
40919: CALL_OW 3
40923: PPUSH
40924: CALL_OW 1
40928: ST_TO_ADDR
// end ; end ;
40929: GO 40767
40931: POP
40932: POP
// end ;
40933: LD_VAR 0 4
40937: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
40938: LD_INT 0
40940: PPUSH
40941: PPUSH
40942: PPUSH
40943: PPUSH
40944: PPUSH
40945: PPUSH
40946: PPUSH
40947: PPUSH
40948: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
40949: LD_VAR 0 1
40953: PPUSH
40954: CALL_OW 264
40958: PUSH
40959: LD_INT 81
40961: EQUAL
40962: NOT
40963: PUSH
40964: LD_VAR 0 1
40968: PUSH
40969: LD_EXP 126
40973: IN
40974: NOT
40975: OR
40976: IFFALSE 40980
// exit ;
40978: GO 41302
// index := GetElementIndex ( minersList , unit ) ;
40980: LD_ADDR_VAR 0 6
40984: PUSH
40985: LD_EXP 126
40989: PPUSH
40990: LD_VAR 0 1
40994: PPUSH
40995: CALL 46474 0 2
40999: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
41000: LD_ADDR_VAR 0 8
41004: PUSH
41005: LD_EXP 128
41009: PUSH
41010: LD_EXP 127
41014: PUSH
41015: LD_VAR 0 6
41019: ARRAY
41020: MINUS
41021: ST_TO_ADDR
// if not minesFreeAmount then
41022: LD_VAR 0 8
41026: NOT
41027: IFFALSE 41031
// exit ;
41029: GO 41302
// tmp := [ ] ;
41031: LD_ADDR_VAR 0 7
41035: PUSH
41036: EMPTY
41037: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
41038: LD_ADDR_VAR 0 5
41042: PUSH
41043: DOUBLE
41044: LD_INT 1
41046: DEC
41047: ST_TO_ADDR
41048: LD_VAR 0 8
41052: PUSH
41053: FOR_TO
41054: IFFALSE 41249
// begin _d := rand ( 0 , 5 ) ;
41056: LD_ADDR_VAR 0 11
41060: PUSH
41061: LD_INT 0
41063: PPUSH
41064: LD_INT 5
41066: PPUSH
41067: CALL_OW 12
41071: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
41072: LD_ADDR_VAR 0 12
41076: PUSH
41077: LD_INT 2
41079: PPUSH
41080: LD_INT 6
41082: PPUSH
41083: CALL_OW 12
41087: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
41088: LD_ADDR_VAR 0 9
41092: PUSH
41093: LD_VAR 0 2
41097: PPUSH
41098: LD_VAR 0 11
41102: PPUSH
41103: LD_VAR 0 12
41107: PPUSH
41108: CALL_OW 272
41112: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
41113: LD_ADDR_VAR 0 10
41117: PUSH
41118: LD_VAR 0 3
41122: PPUSH
41123: LD_VAR 0 11
41127: PPUSH
41128: LD_VAR 0 12
41132: PPUSH
41133: CALL_OW 273
41137: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
41138: LD_VAR 0 9
41142: PPUSH
41143: LD_VAR 0 10
41147: PPUSH
41148: CALL_OW 488
41152: PUSH
41153: LD_VAR 0 9
41157: PUSH
41158: LD_VAR 0 10
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_VAR 0 7
41171: IN
41172: NOT
41173: AND
41174: PUSH
41175: LD_VAR 0 9
41179: PPUSH
41180: LD_VAR 0 10
41184: PPUSH
41185: CALL_OW 458
41189: NOT
41190: AND
41191: IFFALSE 41233
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
41193: LD_ADDR_VAR 0 7
41197: PUSH
41198: LD_VAR 0 7
41202: PPUSH
41203: LD_VAR 0 7
41207: PUSH
41208: LD_INT 1
41210: PLUS
41211: PPUSH
41212: LD_VAR 0 9
41216: PUSH
41217: LD_VAR 0 10
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PPUSH
41226: CALL_OW 1
41230: ST_TO_ADDR
41231: GO 41247
// i := i - 1 ;
41233: LD_ADDR_VAR 0 5
41237: PUSH
41238: LD_VAR 0 5
41242: PUSH
41243: LD_INT 1
41245: MINUS
41246: ST_TO_ADDR
// end ;
41247: GO 41053
41249: POP
41250: POP
// for i in tmp do
41251: LD_ADDR_VAR 0 5
41255: PUSH
41256: LD_VAR 0 7
41260: PUSH
41261: FOR_IN
41262: IFFALSE 41300
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
41264: LD_VAR 0 1
41268: PPUSH
41269: LD_VAR 0 5
41273: PUSH
41274: LD_INT 1
41276: ARRAY
41277: PPUSH
41278: LD_VAR 0 5
41282: PUSH
41283: LD_INT 2
41285: ARRAY
41286: PPUSH
41287: CALL 40246 0 3
41291: NOT
41292: IFFALSE 41298
// exit ;
41294: POP
41295: POP
41296: GO 41302
41298: GO 41261
41300: POP
41301: POP
// end ;
41302: LD_VAR 0 4
41306: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
41307: LD_INT 0
41309: PPUSH
41310: PPUSH
41311: PPUSH
41312: PPUSH
41313: PPUSH
41314: PPUSH
41315: PPUSH
// if not GetClass ( unit ) = class_sniper then
41316: LD_VAR 0 1
41320: PPUSH
41321: CALL_OW 257
41325: PUSH
41326: LD_INT 5
41328: EQUAL
41329: NOT
41330: IFFALSE 41334
// exit ;
41332: GO 41722
// dist := 8 ;
41334: LD_ADDR_VAR 0 5
41338: PUSH
41339: LD_INT 8
41341: ST_TO_ADDR
// viewRange := 12 ;
41342: LD_ADDR_VAR 0 7
41346: PUSH
41347: LD_INT 12
41349: ST_TO_ADDR
// side := GetSide ( unit ) ;
41350: LD_ADDR_VAR 0 6
41354: PUSH
41355: LD_VAR 0 1
41359: PPUSH
41360: CALL_OW 255
41364: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
41365: LD_INT 61
41367: PPUSH
41368: LD_VAR 0 6
41372: PPUSH
41373: CALL_OW 321
41377: PUSH
41378: LD_INT 2
41380: EQUAL
41381: IFFALSE 41391
// viewRange := 16 ;
41383: LD_ADDR_VAR 0 7
41387: PUSH
41388: LD_INT 16
41390: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
41391: LD_VAR 0 1
41395: PPUSH
41396: LD_VAR 0 2
41400: PPUSH
41401: LD_VAR 0 3
41405: PPUSH
41406: CALL_OW 297
41410: PUSH
41411: LD_VAR 0 5
41415: GREATER
41416: IFFALSE 41495
// begin ComMoveXY ( unit , x , y ) ;
41418: LD_VAR 0 1
41422: PPUSH
41423: LD_VAR 0 2
41427: PPUSH
41428: LD_VAR 0 3
41432: PPUSH
41433: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
41437: LD_INT 35
41439: PPUSH
41440: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
41444: LD_VAR 0 1
41448: PPUSH
41449: LD_VAR 0 2
41453: PPUSH
41454: LD_VAR 0 3
41458: PPUSH
41459: CALL 78215 0 3
41463: NOT
41464: IFFALSE 41468
// exit ;
41466: GO 41722
// until GetDistUnitXY ( unit , x , y ) < dist ;
41468: LD_VAR 0 1
41472: PPUSH
41473: LD_VAR 0 2
41477: PPUSH
41478: LD_VAR 0 3
41482: PPUSH
41483: CALL_OW 297
41487: PUSH
41488: LD_VAR 0 5
41492: LESS
41493: IFFALSE 41437
// end ; ComTurnXY ( unit , x , y ) ;
41495: LD_VAR 0 1
41499: PPUSH
41500: LD_VAR 0 2
41504: PPUSH
41505: LD_VAR 0 3
41509: PPUSH
41510: CALL_OW 118
// wait ( 5 ) ;
41514: LD_INT 5
41516: PPUSH
41517: CALL_OW 67
// _d := GetDir ( unit ) ;
41521: LD_ADDR_VAR 0 10
41525: PUSH
41526: LD_VAR 0 1
41530: PPUSH
41531: CALL_OW 254
41535: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
41536: LD_ADDR_VAR 0 8
41540: PUSH
41541: LD_VAR 0 1
41545: PPUSH
41546: CALL_OW 250
41550: PPUSH
41551: LD_VAR 0 10
41555: PPUSH
41556: LD_VAR 0 5
41560: PPUSH
41561: CALL_OW 272
41565: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
41566: LD_ADDR_VAR 0 9
41570: PUSH
41571: LD_VAR 0 1
41575: PPUSH
41576: CALL_OW 251
41580: PPUSH
41581: LD_VAR 0 10
41585: PPUSH
41586: LD_VAR 0 5
41590: PPUSH
41591: CALL_OW 273
41595: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41596: LD_VAR 0 8
41600: PPUSH
41601: LD_VAR 0 9
41605: PPUSH
41606: CALL_OW 488
41610: NOT
41611: IFFALSE 41615
// exit ;
41613: GO 41722
// ComAnimCustom ( unit , 1 ) ;
41615: LD_VAR 0 1
41619: PPUSH
41620: LD_INT 1
41622: PPUSH
41623: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
41627: LD_VAR 0 8
41631: PPUSH
41632: LD_VAR 0 9
41636: PPUSH
41637: LD_VAR 0 6
41641: PPUSH
41642: LD_VAR 0 7
41646: PPUSH
41647: CALL_OW 330
// repeat wait ( 1 ) ;
41651: LD_INT 1
41653: PPUSH
41654: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
41658: LD_VAR 0 1
41662: PPUSH
41663: CALL_OW 316
41667: PUSH
41668: LD_VAR 0 1
41672: PPUSH
41673: CALL_OW 314
41677: OR
41678: PUSH
41679: LD_VAR 0 1
41683: PPUSH
41684: CALL_OW 302
41688: NOT
41689: OR
41690: PUSH
41691: LD_VAR 0 1
41695: PPUSH
41696: CALL_OW 301
41700: OR
41701: IFFALSE 41651
// RemoveSeeing ( _x , _y , side ) ;
41703: LD_VAR 0 8
41707: PPUSH
41708: LD_VAR 0 9
41712: PPUSH
41713: LD_VAR 0 6
41717: PPUSH
41718: CALL_OW 331
// end ; end_of_file
41722: LD_VAR 0 4
41726: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41727: LD_INT 0
41729: PPUSH
41730: PPUSH
// if exist_mode then
41731: LD_VAR 0 2
41735: IFFALSE 41760
// unit := CreateCharacter ( prefix & ident ) else
41737: LD_ADDR_VAR 0 5
41741: PUSH
41742: LD_VAR 0 3
41746: PUSH
41747: LD_VAR 0 1
41751: STR
41752: PPUSH
41753: CALL_OW 34
41757: ST_TO_ADDR
41758: GO 41775
// unit := NewCharacter ( ident ) ;
41760: LD_ADDR_VAR 0 5
41764: PUSH
41765: LD_VAR 0 1
41769: PPUSH
41770: CALL_OW 25
41774: ST_TO_ADDR
// result := unit ;
41775: LD_ADDR_VAR 0 4
41779: PUSH
41780: LD_VAR 0 5
41784: ST_TO_ADDR
// end ;
41785: LD_VAR 0 4
41789: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41790: LD_INT 0
41792: PPUSH
41793: PPUSH
// if not side or not nation then
41794: LD_VAR 0 1
41798: NOT
41799: PUSH
41800: LD_VAR 0 2
41804: NOT
41805: OR
41806: IFFALSE 41810
// exit ;
41808: GO 42578
// case nation of nation_american :
41810: LD_VAR 0 2
41814: PUSH
41815: LD_INT 1
41817: DOUBLE
41818: EQUAL
41819: IFTRUE 41823
41821: GO 42037
41823: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41824: LD_ADDR_VAR 0 4
41828: PUSH
41829: LD_INT 35
41831: PUSH
41832: LD_INT 45
41834: PUSH
41835: LD_INT 46
41837: PUSH
41838: LD_INT 47
41840: PUSH
41841: LD_INT 82
41843: PUSH
41844: LD_INT 83
41846: PUSH
41847: LD_INT 84
41849: PUSH
41850: LD_INT 85
41852: PUSH
41853: LD_INT 86
41855: PUSH
41856: LD_INT 1
41858: PUSH
41859: LD_INT 2
41861: PUSH
41862: LD_INT 6
41864: PUSH
41865: LD_INT 15
41867: PUSH
41868: LD_INT 16
41870: PUSH
41871: LD_INT 7
41873: PUSH
41874: LD_INT 12
41876: PUSH
41877: LD_INT 13
41879: PUSH
41880: LD_INT 10
41882: PUSH
41883: LD_INT 14
41885: PUSH
41886: LD_INT 20
41888: PUSH
41889: LD_INT 21
41891: PUSH
41892: LD_INT 22
41894: PUSH
41895: LD_INT 25
41897: PUSH
41898: LD_INT 32
41900: PUSH
41901: LD_INT 27
41903: PUSH
41904: LD_INT 36
41906: PUSH
41907: LD_INT 69
41909: PUSH
41910: LD_INT 39
41912: PUSH
41913: LD_INT 34
41915: PUSH
41916: LD_INT 40
41918: PUSH
41919: LD_INT 48
41921: PUSH
41922: LD_INT 49
41924: PUSH
41925: LD_INT 50
41927: PUSH
41928: LD_INT 51
41930: PUSH
41931: LD_INT 52
41933: PUSH
41934: LD_INT 53
41936: PUSH
41937: LD_INT 54
41939: PUSH
41940: LD_INT 55
41942: PUSH
41943: LD_INT 56
41945: PUSH
41946: LD_INT 57
41948: PUSH
41949: LD_INT 58
41951: PUSH
41952: LD_INT 59
41954: PUSH
41955: LD_INT 60
41957: PUSH
41958: LD_INT 61
41960: PUSH
41961: LD_INT 62
41963: PUSH
41964: LD_INT 80
41966: PUSH
41967: LD_INT 82
41969: PUSH
41970: LD_INT 83
41972: PUSH
41973: LD_INT 84
41975: PUSH
41976: LD_INT 85
41978: PUSH
41979: LD_INT 86
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: ST_TO_ADDR
42035: GO 42502
42037: LD_INT 2
42039: DOUBLE
42040: EQUAL
42041: IFTRUE 42045
42043: GO 42271
42045: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
42046: LD_ADDR_VAR 0 4
42050: PUSH
42051: LD_INT 35
42053: PUSH
42054: LD_INT 45
42056: PUSH
42057: LD_INT 46
42059: PUSH
42060: LD_INT 47
42062: PUSH
42063: LD_INT 82
42065: PUSH
42066: LD_INT 83
42068: PUSH
42069: LD_INT 84
42071: PUSH
42072: LD_INT 85
42074: PUSH
42075: LD_INT 87
42077: PUSH
42078: LD_INT 70
42080: PUSH
42081: LD_INT 1
42083: PUSH
42084: LD_INT 11
42086: PUSH
42087: LD_INT 3
42089: PUSH
42090: LD_INT 4
42092: PUSH
42093: LD_INT 5
42095: PUSH
42096: LD_INT 6
42098: PUSH
42099: LD_INT 15
42101: PUSH
42102: LD_INT 18
42104: PUSH
42105: LD_INT 7
42107: PUSH
42108: LD_INT 17
42110: PUSH
42111: LD_INT 8
42113: PUSH
42114: LD_INT 20
42116: PUSH
42117: LD_INT 21
42119: PUSH
42120: LD_INT 22
42122: PUSH
42123: LD_INT 72
42125: PUSH
42126: LD_INT 26
42128: PUSH
42129: LD_INT 69
42131: PUSH
42132: LD_INT 39
42134: PUSH
42135: LD_INT 40
42137: PUSH
42138: LD_INT 41
42140: PUSH
42141: LD_INT 42
42143: PUSH
42144: LD_INT 43
42146: PUSH
42147: LD_INT 48
42149: PUSH
42150: LD_INT 49
42152: PUSH
42153: LD_INT 50
42155: PUSH
42156: LD_INT 51
42158: PUSH
42159: LD_INT 52
42161: PUSH
42162: LD_INT 53
42164: PUSH
42165: LD_INT 54
42167: PUSH
42168: LD_INT 55
42170: PUSH
42171: LD_INT 56
42173: PUSH
42174: LD_INT 60
42176: PUSH
42177: LD_INT 61
42179: PUSH
42180: LD_INT 62
42182: PUSH
42183: LD_INT 66
42185: PUSH
42186: LD_INT 67
42188: PUSH
42189: LD_INT 68
42191: PUSH
42192: LD_INT 81
42194: PUSH
42195: LD_INT 82
42197: PUSH
42198: LD_INT 83
42200: PUSH
42201: LD_INT 84
42203: PUSH
42204: LD_INT 85
42206: PUSH
42207: LD_INT 87
42209: PUSH
42210: LD_INT 88
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: ST_TO_ADDR
42269: GO 42502
42271: LD_INT 3
42273: DOUBLE
42274: EQUAL
42275: IFTRUE 42279
42277: GO 42501
42279: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
42280: LD_ADDR_VAR 0 4
42284: PUSH
42285: LD_INT 46
42287: PUSH
42288: LD_INT 47
42290: PUSH
42291: LD_INT 1
42293: PUSH
42294: LD_INT 2
42296: PUSH
42297: LD_INT 82
42299: PUSH
42300: LD_INT 83
42302: PUSH
42303: LD_INT 84
42305: PUSH
42306: LD_INT 85
42308: PUSH
42309: LD_INT 86
42311: PUSH
42312: LD_INT 11
42314: PUSH
42315: LD_INT 9
42317: PUSH
42318: LD_INT 20
42320: PUSH
42321: LD_INT 19
42323: PUSH
42324: LD_INT 21
42326: PUSH
42327: LD_INT 24
42329: PUSH
42330: LD_INT 22
42332: PUSH
42333: LD_INT 25
42335: PUSH
42336: LD_INT 28
42338: PUSH
42339: LD_INT 29
42341: PUSH
42342: LD_INT 30
42344: PUSH
42345: LD_INT 31
42347: PUSH
42348: LD_INT 37
42350: PUSH
42351: LD_INT 38
42353: PUSH
42354: LD_INT 32
42356: PUSH
42357: LD_INT 27
42359: PUSH
42360: LD_INT 33
42362: PUSH
42363: LD_INT 69
42365: PUSH
42366: LD_INT 39
42368: PUSH
42369: LD_INT 34
42371: PUSH
42372: LD_INT 40
42374: PUSH
42375: LD_INT 71
42377: PUSH
42378: LD_INT 23
42380: PUSH
42381: LD_INT 44
42383: PUSH
42384: LD_INT 48
42386: PUSH
42387: LD_INT 49
42389: PUSH
42390: LD_INT 50
42392: PUSH
42393: LD_INT 51
42395: PUSH
42396: LD_INT 52
42398: PUSH
42399: LD_INT 53
42401: PUSH
42402: LD_INT 54
42404: PUSH
42405: LD_INT 55
42407: PUSH
42408: LD_INT 56
42410: PUSH
42411: LD_INT 57
42413: PUSH
42414: LD_INT 58
42416: PUSH
42417: LD_INT 59
42419: PUSH
42420: LD_INT 63
42422: PUSH
42423: LD_INT 64
42425: PUSH
42426: LD_INT 65
42428: PUSH
42429: LD_INT 82
42431: PUSH
42432: LD_INT 83
42434: PUSH
42435: LD_INT 84
42437: PUSH
42438: LD_INT 85
42440: PUSH
42441: LD_INT 86
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: ST_TO_ADDR
42499: GO 42502
42501: POP
// if state > - 1 and state < 3 then
42502: LD_VAR 0 3
42506: PUSH
42507: LD_INT 1
42509: NEG
42510: GREATER
42511: PUSH
42512: LD_VAR 0 3
42516: PUSH
42517: LD_INT 3
42519: LESS
42520: AND
42521: IFFALSE 42578
// for i in result do
42523: LD_ADDR_VAR 0 5
42527: PUSH
42528: LD_VAR 0 4
42532: PUSH
42533: FOR_IN
42534: IFFALSE 42576
// if GetTech ( i , side ) <> state then
42536: LD_VAR 0 5
42540: PPUSH
42541: LD_VAR 0 1
42545: PPUSH
42546: CALL_OW 321
42550: PUSH
42551: LD_VAR 0 3
42555: NONEQUAL
42556: IFFALSE 42574
// result := result diff i ;
42558: LD_ADDR_VAR 0 4
42562: PUSH
42563: LD_VAR 0 4
42567: PUSH
42568: LD_VAR 0 5
42572: DIFF
42573: ST_TO_ADDR
42574: GO 42533
42576: POP
42577: POP
// end ;
42578: LD_VAR 0 4
42582: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
42583: LD_INT 0
42585: PPUSH
42586: PPUSH
42587: PPUSH
// result := true ;
42588: LD_ADDR_VAR 0 3
42592: PUSH
42593: LD_INT 1
42595: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42596: LD_ADDR_VAR 0 5
42600: PUSH
42601: LD_VAR 0 2
42605: PPUSH
42606: CALL_OW 480
42610: ST_TO_ADDR
// if not tmp then
42611: LD_VAR 0 5
42615: NOT
42616: IFFALSE 42620
// exit ;
42618: GO 42669
// for i in tmp do
42620: LD_ADDR_VAR 0 4
42624: PUSH
42625: LD_VAR 0 5
42629: PUSH
42630: FOR_IN
42631: IFFALSE 42667
// if GetTech ( i , side ) <> state_researched then
42633: LD_VAR 0 4
42637: PPUSH
42638: LD_VAR 0 1
42642: PPUSH
42643: CALL_OW 321
42647: PUSH
42648: LD_INT 2
42650: NONEQUAL
42651: IFFALSE 42665
// begin result := false ;
42653: LD_ADDR_VAR 0 3
42657: PUSH
42658: LD_INT 0
42660: ST_TO_ADDR
// exit ;
42661: POP
42662: POP
42663: GO 42669
// end ;
42665: GO 42630
42667: POP
42668: POP
// end ;
42669: LD_VAR 0 3
42673: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42674: LD_INT 0
42676: PPUSH
42677: PPUSH
42678: PPUSH
42679: PPUSH
42680: PPUSH
42681: PPUSH
42682: PPUSH
42683: PPUSH
42684: PPUSH
42685: PPUSH
42686: PPUSH
42687: PPUSH
42688: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42689: LD_VAR 0 1
42693: NOT
42694: PUSH
42695: LD_VAR 0 1
42699: PPUSH
42700: CALL_OW 257
42704: PUSH
42705: LD_INT 9
42707: NONEQUAL
42708: OR
42709: IFFALSE 42713
// exit ;
42711: GO 43286
// side := GetSide ( unit ) ;
42713: LD_ADDR_VAR 0 9
42717: PUSH
42718: LD_VAR 0 1
42722: PPUSH
42723: CALL_OW 255
42727: ST_TO_ADDR
// tech_space := tech_spacanom ;
42728: LD_ADDR_VAR 0 12
42732: PUSH
42733: LD_INT 29
42735: ST_TO_ADDR
// tech_time := tech_taurad ;
42736: LD_ADDR_VAR 0 13
42740: PUSH
42741: LD_INT 28
42743: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42744: LD_ADDR_VAR 0 11
42748: PUSH
42749: LD_VAR 0 1
42753: PPUSH
42754: CALL_OW 310
42758: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42759: LD_VAR 0 11
42763: PPUSH
42764: CALL_OW 247
42768: PUSH
42769: LD_INT 2
42771: EQUAL
42772: IFFALSE 42776
// exit ;
42774: GO 43286
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42776: LD_ADDR_VAR 0 8
42780: PUSH
42781: LD_INT 81
42783: PUSH
42784: LD_VAR 0 9
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 3
42795: PUSH
42796: LD_INT 21
42798: PUSH
42799: LD_INT 3
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PPUSH
42814: CALL_OW 69
42818: ST_TO_ADDR
// if not tmp then
42819: LD_VAR 0 8
42823: NOT
42824: IFFALSE 42828
// exit ;
42826: GO 43286
// if in_unit then
42828: LD_VAR 0 11
42832: IFFALSE 42856
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42834: LD_ADDR_VAR 0 10
42838: PUSH
42839: LD_VAR 0 8
42843: PPUSH
42844: LD_VAR 0 11
42848: PPUSH
42849: CALL_OW 74
42853: ST_TO_ADDR
42854: GO 42876
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42856: LD_ADDR_VAR 0 10
42860: PUSH
42861: LD_VAR 0 8
42865: PPUSH
42866: LD_VAR 0 1
42870: PPUSH
42871: CALL_OW 74
42875: ST_TO_ADDR
// if not enemy then
42876: LD_VAR 0 10
42880: NOT
42881: IFFALSE 42885
// exit ;
42883: GO 43286
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42885: LD_VAR 0 11
42889: PUSH
42890: LD_VAR 0 11
42894: PPUSH
42895: LD_VAR 0 10
42899: PPUSH
42900: CALL_OW 296
42904: PUSH
42905: LD_INT 13
42907: GREATER
42908: AND
42909: PUSH
42910: LD_VAR 0 1
42914: PPUSH
42915: LD_VAR 0 10
42919: PPUSH
42920: CALL_OW 296
42924: PUSH
42925: LD_INT 12
42927: GREATER
42928: OR
42929: IFFALSE 42933
// exit ;
42931: GO 43286
// missile := [ 1 ] ;
42933: LD_ADDR_VAR 0 14
42937: PUSH
42938: LD_INT 1
42940: PUSH
42941: EMPTY
42942: LIST
42943: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42944: LD_VAR 0 9
42948: PPUSH
42949: LD_VAR 0 12
42953: PPUSH
42954: CALL_OW 325
42958: IFFALSE 42987
// missile := Replace ( missile , missile + 1 , 2 ) ;
42960: LD_ADDR_VAR 0 14
42964: PUSH
42965: LD_VAR 0 14
42969: PPUSH
42970: LD_VAR 0 14
42974: PUSH
42975: LD_INT 1
42977: PLUS
42978: PPUSH
42979: LD_INT 2
42981: PPUSH
42982: CALL_OW 1
42986: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42987: LD_VAR 0 9
42991: PPUSH
42992: LD_VAR 0 13
42996: PPUSH
42997: CALL_OW 325
43001: PUSH
43002: LD_VAR 0 10
43006: PPUSH
43007: CALL_OW 255
43011: PPUSH
43012: LD_VAR 0 13
43016: PPUSH
43017: CALL_OW 325
43021: NOT
43022: AND
43023: IFFALSE 43052
// missile := Replace ( missile , missile + 1 , 3 ) ;
43025: LD_ADDR_VAR 0 14
43029: PUSH
43030: LD_VAR 0 14
43034: PPUSH
43035: LD_VAR 0 14
43039: PUSH
43040: LD_INT 1
43042: PLUS
43043: PPUSH
43044: LD_INT 3
43046: PPUSH
43047: CALL_OW 1
43051: ST_TO_ADDR
// if missile < 2 then
43052: LD_VAR 0 14
43056: PUSH
43057: LD_INT 2
43059: LESS
43060: IFFALSE 43064
// exit ;
43062: GO 43286
// x := GetX ( enemy ) ;
43064: LD_ADDR_VAR 0 4
43068: PUSH
43069: LD_VAR 0 10
43073: PPUSH
43074: CALL_OW 250
43078: ST_TO_ADDR
// y := GetY ( enemy ) ;
43079: LD_ADDR_VAR 0 5
43083: PUSH
43084: LD_VAR 0 10
43088: PPUSH
43089: CALL_OW 251
43093: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
43094: LD_ADDR_VAR 0 6
43098: PUSH
43099: LD_VAR 0 4
43103: PUSH
43104: LD_INT 1
43106: NEG
43107: PPUSH
43108: LD_INT 1
43110: PPUSH
43111: CALL_OW 12
43115: PLUS
43116: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
43117: LD_ADDR_VAR 0 7
43121: PUSH
43122: LD_VAR 0 5
43126: PUSH
43127: LD_INT 1
43129: NEG
43130: PPUSH
43131: LD_INT 1
43133: PPUSH
43134: CALL_OW 12
43138: PLUS
43139: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43140: LD_VAR 0 6
43144: PPUSH
43145: LD_VAR 0 7
43149: PPUSH
43150: CALL_OW 488
43154: NOT
43155: IFFALSE 43177
// begin _x := x ;
43157: LD_ADDR_VAR 0 6
43161: PUSH
43162: LD_VAR 0 4
43166: ST_TO_ADDR
// _y := y ;
43167: LD_ADDR_VAR 0 7
43171: PUSH
43172: LD_VAR 0 5
43176: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
43177: LD_ADDR_VAR 0 3
43181: PUSH
43182: LD_INT 1
43184: PPUSH
43185: LD_VAR 0 14
43189: PPUSH
43190: CALL_OW 12
43194: ST_TO_ADDR
// case i of 1 :
43195: LD_VAR 0 3
43199: PUSH
43200: LD_INT 1
43202: DOUBLE
43203: EQUAL
43204: IFTRUE 43208
43206: GO 43225
43208: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
43209: LD_VAR 0 1
43213: PPUSH
43214: LD_VAR 0 10
43218: PPUSH
43219: CALL_OW 115
43223: GO 43286
43225: LD_INT 2
43227: DOUBLE
43228: EQUAL
43229: IFTRUE 43233
43231: GO 43255
43233: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
43234: LD_VAR 0 1
43238: PPUSH
43239: LD_VAR 0 6
43243: PPUSH
43244: LD_VAR 0 7
43248: PPUSH
43249: CALL_OW 153
43253: GO 43286
43255: LD_INT 3
43257: DOUBLE
43258: EQUAL
43259: IFTRUE 43263
43261: GO 43285
43263: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
43264: LD_VAR 0 1
43268: PPUSH
43269: LD_VAR 0 6
43273: PPUSH
43274: LD_VAR 0 7
43278: PPUSH
43279: CALL_OW 154
43283: GO 43286
43285: POP
// end ;
43286: LD_VAR 0 2
43290: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
43291: LD_INT 0
43293: PPUSH
43294: PPUSH
43295: PPUSH
43296: PPUSH
43297: PPUSH
43298: PPUSH
// if not unit or not building then
43299: LD_VAR 0 1
43303: NOT
43304: PUSH
43305: LD_VAR 0 2
43309: NOT
43310: OR
43311: IFFALSE 43315
// exit ;
43313: GO 43473
// x := GetX ( building ) ;
43315: LD_ADDR_VAR 0 5
43319: PUSH
43320: LD_VAR 0 2
43324: PPUSH
43325: CALL_OW 250
43329: ST_TO_ADDR
// y := GetY ( building ) ;
43330: LD_ADDR_VAR 0 6
43334: PUSH
43335: LD_VAR 0 2
43339: PPUSH
43340: CALL_OW 251
43344: ST_TO_ADDR
// for i = 0 to 5 do
43345: LD_ADDR_VAR 0 4
43349: PUSH
43350: DOUBLE
43351: LD_INT 0
43353: DEC
43354: ST_TO_ADDR
43355: LD_INT 5
43357: PUSH
43358: FOR_TO
43359: IFFALSE 43471
// begin _x := ShiftX ( x , i , 3 ) ;
43361: LD_ADDR_VAR 0 7
43365: PUSH
43366: LD_VAR 0 5
43370: PPUSH
43371: LD_VAR 0 4
43375: PPUSH
43376: LD_INT 3
43378: PPUSH
43379: CALL_OW 272
43383: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
43384: LD_ADDR_VAR 0 8
43388: PUSH
43389: LD_VAR 0 6
43393: PPUSH
43394: LD_VAR 0 4
43398: PPUSH
43399: LD_INT 3
43401: PPUSH
43402: CALL_OW 273
43406: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43407: LD_VAR 0 7
43411: PPUSH
43412: LD_VAR 0 8
43416: PPUSH
43417: CALL_OW 488
43421: NOT
43422: IFFALSE 43426
// continue ;
43424: GO 43358
// if HexInfo ( _x , _y ) = 0 then
43426: LD_VAR 0 7
43430: PPUSH
43431: LD_VAR 0 8
43435: PPUSH
43436: CALL_OW 428
43440: PUSH
43441: LD_INT 0
43443: EQUAL
43444: IFFALSE 43469
// begin ComMoveXY ( unit , _x , _y ) ;
43446: LD_VAR 0 1
43450: PPUSH
43451: LD_VAR 0 7
43455: PPUSH
43456: LD_VAR 0 8
43460: PPUSH
43461: CALL_OW 111
// exit ;
43465: POP
43466: POP
43467: GO 43473
// end ; end ;
43469: GO 43358
43471: POP
43472: POP
// end ;
43473: LD_VAR 0 3
43477: RET
// export function ScanBase ( side , base_area ) ; begin
43478: LD_INT 0
43480: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
43481: LD_ADDR_VAR 0 3
43485: PUSH
43486: LD_VAR 0 2
43490: PPUSH
43491: LD_INT 81
43493: PUSH
43494: LD_VAR 0 1
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PPUSH
43503: CALL_OW 70
43507: ST_TO_ADDR
// end ;
43508: LD_VAR 0 3
43512: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
43513: LD_INT 0
43515: PPUSH
43516: PPUSH
43517: PPUSH
43518: PPUSH
// result := false ;
43519: LD_ADDR_VAR 0 2
43523: PUSH
43524: LD_INT 0
43526: ST_TO_ADDR
// side := GetSide ( unit ) ;
43527: LD_ADDR_VAR 0 3
43531: PUSH
43532: LD_VAR 0 1
43536: PPUSH
43537: CALL_OW 255
43541: ST_TO_ADDR
// nat := GetNation ( unit ) ;
43542: LD_ADDR_VAR 0 4
43546: PUSH
43547: LD_VAR 0 1
43551: PPUSH
43552: CALL_OW 248
43556: ST_TO_ADDR
// case nat of 1 :
43557: LD_VAR 0 4
43561: PUSH
43562: LD_INT 1
43564: DOUBLE
43565: EQUAL
43566: IFTRUE 43570
43568: GO 43581
43570: POP
// tech := tech_lassight ; 2 :
43571: LD_ADDR_VAR 0 5
43575: PUSH
43576: LD_INT 12
43578: ST_TO_ADDR
43579: GO 43620
43581: LD_INT 2
43583: DOUBLE
43584: EQUAL
43585: IFTRUE 43589
43587: GO 43600
43589: POP
// tech := tech_mortar ; 3 :
43590: LD_ADDR_VAR 0 5
43594: PUSH
43595: LD_INT 41
43597: ST_TO_ADDR
43598: GO 43620
43600: LD_INT 3
43602: DOUBLE
43603: EQUAL
43604: IFTRUE 43608
43606: GO 43619
43608: POP
// tech := tech_bazooka ; end ;
43609: LD_ADDR_VAR 0 5
43613: PUSH
43614: LD_INT 44
43616: ST_TO_ADDR
43617: GO 43620
43619: POP
// if Researched ( side , tech ) then
43620: LD_VAR 0 3
43624: PPUSH
43625: LD_VAR 0 5
43629: PPUSH
43630: CALL_OW 325
43634: IFFALSE 43661
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43636: LD_ADDR_VAR 0 2
43640: PUSH
43641: LD_INT 5
43643: PUSH
43644: LD_INT 8
43646: PUSH
43647: LD_INT 9
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: LIST
43654: PUSH
43655: LD_VAR 0 4
43659: ARRAY
43660: ST_TO_ADDR
// end ;
43661: LD_VAR 0 2
43665: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43666: LD_INT 0
43668: PPUSH
43669: PPUSH
43670: PPUSH
// if not mines then
43671: LD_VAR 0 2
43675: NOT
43676: IFFALSE 43680
// exit ;
43678: GO 43824
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43680: LD_ADDR_VAR 0 5
43684: PUSH
43685: LD_INT 81
43687: PUSH
43688: LD_VAR 0 1
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 3
43699: PUSH
43700: LD_INT 21
43702: PUSH
43703: LD_INT 3
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PPUSH
43718: CALL_OW 69
43722: ST_TO_ADDR
// for i in mines do
43723: LD_ADDR_VAR 0 4
43727: PUSH
43728: LD_VAR 0 2
43732: PUSH
43733: FOR_IN
43734: IFFALSE 43822
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43736: LD_VAR 0 4
43740: PUSH
43741: LD_INT 1
43743: ARRAY
43744: PPUSH
43745: LD_VAR 0 4
43749: PUSH
43750: LD_INT 2
43752: ARRAY
43753: PPUSH
43754: CALL_OW 458
43758: NOT
43759: IFFALSE 43763
// continue ;
43761: GO 43733
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43763: LD_VAR 0 4
43767: PUSH
43768: LD_INT 1
43770: ARRAY
43771: PPUSH
43772: LD_VAR 0 4
43776: PUSH
43777: LD_INT 2
43779: ARRAY
43780: PPUSH
43781: CALL_OW 428
43785: PUSH
43786: LD_VAR 0 5
43790: IN
43791: IFFALSE 43820
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43793: LD_VAR 0 4
43797: PUSH
43798: LD_INT 1
43800: ARRAY
43801: PPUSH
43802: LD_VAR 0 4
43806: PUSH
43807: LD_INT 2
43809: ARRAY
43810: PPUSH
43811: LD_VAR 0 1
43815: PPUSH
43816: CALL_OW 456
// end ;
43820: GO 43733
43822: POP
43823: POP
// end ;
43824: LD_VAR 0 3
43828: RET
// export function Count ( array ) ; begin
43829: LD_INT 0
43831: PPUSH
// result := array + 0 ;
43832: LD_ADDR_VAR 0 2
43836: PUSH
43837: LD_VAR 0 1
43841: PUSH
43842: LD_INT 0
43844: PLUS
43845: ST_TO_ADDR
// end ;
43846: LD_VAR 0 2
43850: RET
// export function IsEmpty ( building ) ; begin
43851: LD_INT 0
43853: PPUSH
// if not building then
43854: LD_VAR 0 1
43858: NOT
43859: IFFALSE 43863
// exit ;
43861: GO 43906
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43863: LD_ADDR_VAR 0 2
43867: PUSH
43868: LD_VAR 0 1
43872: PUSH
43873: LD_INT 22
43875: PUSH
43876: LD_VAR 0 1
43880: PPUSH
43881: CALL_OW 255
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 58
43892: PUSH
43893: EMPTY
43894: LIST
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PPUSH
43900: CALL_OW 69
43904: IN
43905: ST_TO_ADDR
// end ;
43906: LD_VAR 0 2
43910: RET
// export function IsNotFull ( building ) ; var places ; begin
43911: LD_INT 0
43913: PPUSH
43914: PPUSH
// if not building then
43915: LD_VAR 0 1
43919: NOT
43920: IFFALSE 43924
// exit ;
43922: GO 43952
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
43924: LD_ADDR_VAR 0 2
43928: PUSH
43929: LD_VAR 0 1
43933: PPUSH
43934: LD_INT 3
43936: PUSH
43937: LD_INT 62
43939: PUSH
43940: EMPTY
43941: LIST
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PPUSH
43947: CALL_OW 72
43951: ST_TO_ADDR
// end ;
43952: LD_VAR 0 2
43956: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43957: LD_INT 0
43959: PPUSH
43960: PPUSH
43961: PPUSH
43962: PPUSH
// tmp := [ ] ;
43963: LD_ADDR_VAR 0 3
43967: PUSH
43968: EMPTY
43969: ST_TO_ADDR
// list := [ ] ;
43970: LD_ADDR_VAR 0 5
43974: PUSH
43975: EMPTY
43976: ST_TO_ADDR
// for i = 16 to 25 do
43977: LD_ADDR_VAR 0 4
43981: PUSH
43982: DOUBLE
43983: LD_INT 16
43985: DEC
43986: ST_TO_ADDR
43987: LD_INT 25
43989: PUSH
43990: FOR_TO
43991: IFFALSE 44064
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43993: LD_ADDR_VAR 0 3
43997: PUSH
43998: LD_VAR 0 3
44002: PUSH
44003: LD_INT 22
44005: PUSH
44006: LD_VAR 0 1
44010: PPUSH
44011: CALL_OW 255
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 91
44022: PUSH
44023: LD_VAR 0 1
44027: PUSH
44028: LD_INT 6
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 30
44038: PUSH
44039: LD_VAR 0 4
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: LIST
44052: PUSH
44053: EMPTY
44054: LIST
44055: PPUSH
44056: CALL_OW 69
44060: ADD
44061: ST_TO_ADDR
44062: GO 43990
44064: POP
44065: POP
// for i = 1 to tmp do
44066: LD_ADDR_VAR 0 4
44070: PUSH
44071: DOUBLE
44072: LD_INT 1
44074: DEC
44075: ST_TO_ADDR
44076: LD_VAR 0 3
44080: PUSH
44081: FOR_TO
44082: IFFALSE 44170
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
44084: LD_ADDR_VAR 0 5
44088: PUSH
44089: LD_VAR 0 5
44093: PUSH
44094: LD_VAR 0 3
44098: PUSH
44099: LD_VAR 0 4
44103: ARRAY
44104: PPUSH
44105: CALL_OW 266
44109: PUSH
44110: LD_VAR 0 3
44114: PUSH
44115: LD_VAR 0 4
44119: ARRAY
44120: PPUSH
44121: CALL_OW 250
44125: PUSH
44126: LD_VAR 0 3
44130: PUSH
44131: LD_VAR 0 4
44135: ARRAY
44136: PPUSH
44137: CALL_OW 251
44141: PUSH
44142: LD_VAR 0 3
44146: PUSH
44147: LD_VAR 0 4
44151: ARRAY
44152: PPUSH
44153: CALL_OW 254
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: PUSH
44164: EMPTY
44165: LIST
44166: ADD
44167: ST_TO_ADDR
44168: GO 44081
44170: POP
44171: POP
// result := list ;
44172: LD_ADDR_VAR 0 2
44176: PUSH
44177: LD_VAR 0 5
44181: ST_TO_ADDR
// end ;
44182: LD_VAR 0 2
44186: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
44187: LD_INT 0
44189: PPUSH
44190: PPUSH
44191: PPUSH
44192: PPUSH
44193: PPUSH
44194: PPUSH
44195: PPUSH
// if not factory then
44196: LD_VAR 0 1
44200: NOT
44201: IFFALSE 44205
// exit ;
44203: GO 44798
// if control = control_apeman then
44205: LD_VAR 0 4
44209: PUSH
44210: LD_INT 5
44212: EQUAL
44213: IFFALSE 44322
// begin tmp := UnitsInside ( factory ) ;
44215: LD_ADDR_VAR 0 8
44219: PUSH
44220: LD_VAR 0 1
44224: PPUSH
44225: CALL_OW 313
44229: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
44230: LD_VAR 0 8
44234: PPUSH
44235: LD_INT 25
44237: PUSH
44238: LD_INT 12
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PPUSH
44245: CALL_OW 72
44249: NOT
44250: IFFALSE 44260
// control := control_manual ;
44252: LD_ADDR_VAR 0 4
44256: PUSH
44257: LD_INT 1
44259: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
44260: LD_ADDR_VAR 0 8
44264: PUSH
44265: LD_VAR 0 1
44269: PPUSH
44270: CALL 43957 0 1
44274: ST_TO_ADDR
// if tmp then
44275: LD_VAR 0 8
44279: IFFALSE 44322
// begin for i in tmp do
44281: LD_ADDR_VAR 0 7
44285: PUSH
44286: LD_VAR 0 8
44290: PUSH
44291: FOR_IN
44292: IFFALSE 44320
// if i [ 1 ] = b_ext_radio then
44294: LD_VAR 0 7
44298: PUSH
44299: LD_INT 1
44301: ARRAY
44302: PUSH
44303: LD_INT 22
44305: EQUAL
44306: IFFALSE 44318
// begin control := control_remote ;
44308: LD_ADDR_VAR 0 4
44312: PUSH
44313: LD_INT 2
44315: ST_TO_ADDR
// break ;
44316: GO 44320
// end ;
44318: GO 44291
44320: POP
44321: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44322: LD_VAR 0 1
44326: PPUSH
44327: LD_VAR 0 2
44331: PPUSH
44332: LD_VAR 0 3
44336: PPUSH
44337: LD_VAR 0 4
44341: PPUSH
44342: LD_VAR 0 5
44346: PPUSH
44347: CALL_OW 448
44351: IFFALSE 44386
// begin result := [ chassis , engine , control , weapon ] ;
44353: LD_ADDR_VAR 0 6
44357: PUSH
44358: LD_VAR 0 2
44362: PUSH
44363: LD_VAR 0 3
44367: PUSH
44368: LD_VAR 0 4
44372: PUSH
44373: LD_VAR 0 5
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: ST_TO_ADDR
// exit ;
44384: GO 44798
// end ; _chassis := AvailableChassisList ( factory ) ;
44386: LD_ADDR_VAR 0 9
44390: PUSH
44391: LD_VAR 0 1
44395: PPUSH
44396: CALL_OW 475
44400: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
44401: LD_ADDR_VAR 0 11
44405: PUSH
44406: LD_VAR 0 1
44410: PPUSH
44411: CALL_OW 476
44415: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
44416: LD_ADDR_VAR 0 12
44420: PUSH
44421: LD_VAR 0 1
44425: PPUSH
44426: CALL_OW 477
44430: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
44431: LD_ADDR_VAR 0 10
44435: PUSH
44436: LD_VAR 0 1
44440: PPUSH
44441: CALL_OW 478
44445: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
44446: LD_VAR 0 9
44450: NOT
44451: PUSH
44452: LD_VAR 0 11
44456: NOT
44457: OR
44458: PUSH
44459: LD_VAR 0 12
44463: NOT
44464: OR
44465: PUSH
44466: LD_VAR 0 10
44470: NOT
44471: OR
44472: IFFALSE 44507
// begin result := [ chassis , engine , control , weapon ] ;
44474: LD_ADDR_VAR 0 6
44478: PUSH
44479: LD_VAR 0 2
44483: PUSH
44484: LD_VAR 0 3
44488: PUSH
44489: LD_VAR 0 4
44493: PUSH
44494: LD_VAR 0 5
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: ST_TO_ADDR
// exit ;
44505: GO 44798
// end ; if not chassis in _chassis then
44507: LD_VAR 0 2
44511: PUSH
44512: LD_VAR 0 9
44516: IN
44517: NOT
44518: IFFALSE 44544
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
44520: LD_ADDR_VAR 0 2
44524: PUSH
44525: LD_VAR 0 9
44529: PUSH
44530: LD_INT 1
44532: PPUSH
44533: LD_VAR 0 9
44537: PPUSH
44538: CALL_OW 12
44542: ARRAY
44543: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44544: LD_VAR 0 2
44548: PPUSH
44549: LD_VAR 0 3
44553: PPUSH
44554: CALL 44803 0 2
44558: NOT
44559: IFFALSE 44618
// repeat engine := _engine [ 1 ] ;
44561: LD_ADDR_VAR 0 3
44565: PUSH
44566: LD_VAR 0 11
44570: PUSH
44571: LD_INT 1
44573: ARRAY
44574: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44575: LD_ADDR_VAR 0 11
44579: PUSH
44580: LD_VAR 0 11
44584: PPUSH
44585: LD_INT 1
44587: PPUSH
44588: CALL_OW 3
44592: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44593: LD_VAR 0 2
44597: PPUSH
44598: LD_VAR 0 3
44602: PPUSH
44603: CALL 44803 0 2
44607: PUSH
44608: LD_VAR 0 11
44612: PUSH
44613: EMPTY
44614: EQUAL
44615: OR
44616: IFFALSE 44561
// if not control in _control then
44618: LD_VAR 0 4
44622: PUSH
44623: LD_VAR 0 12
44627: IN
44628: NOT
44629: IFFALSE 44655
// control := _control [ rand ( 1 , _control ) ] ;
44631: LD_ADDR_VAR 0 4
44635: PUSH
44636: LD_VAR 0 12
44640: PUSH
44641: LD_INT 1
44643: PPUSH
44644: LD_VAR 0 12
44648: PPUSH
44649: CALL_OW 12
44653: ARRAY
44654: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44655: LD_VAR 0 2
44659: PPUSH
44660: LD_VAR 0 5
44664: PPUSH
44665: CALL 45023 0 2
44669: NOT
44670: IFFALSE 44729
// repeat weapon := _weapon [ 1 ] ;
44672: LD_ADDR_VAR 0 5
44676: PUSH
44677: LD_VAR 0 10
44681: PUSH
44682: LD_INT 1
44684: ARRAY
44685: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44686: LD_ADDR_VAR 0 10
44690: PUSH
44691: LD_VAR 0 10
44695: PPUSH
44696: LD_INT 1
44698: PPUSH
44699: CALL_OW 3
44703: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44704: LD_VAR 0 2
44708: PPUSH
44709: LD_VAR 0 5
44713: PPUSH
44714: CALL 45023 0 2
44718: PUSH
44719: LD_VAR 0 10
44723: PUSH
44724: EMPTY
44725: EQUAL
44726: OR
44727: IFFALSE 44672
// result := [ ] ;
44729: LD_ADDR_VAR 0 6
44733: PUSH
44734: EMPTY
44735: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44736: LD_VAR 0 1
44740: PPUSH
44741: LD_VAR 0 2
44745: PPUSH
44746: LD_VAR 0 3
44750: PPUSH
44751: LD_VAR 0 4
44755: PPUSH
44756: LD_VAR 0 5
44760: PPUSH
44761: CALL_OW 448
44765: IFFALSE 44798
// result := [ chassis , engine , control , weapon ] ;
44767: LD_ADDR_VAR 0 6
44771: PUSH
44772: LD_VAR 0 2
44776: PUSH
44777: LD_VAR 0 3
44781: PUSH
44782: LD_VAR 0 4
44786: PUSH
44787: LD_VAR 0 5
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: ST_TO_ADDR
// end ;
44798: LD_VAR 0 6
44802: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44803: LD_INT 0
44805: PPUSH
// if not chassis or not engine then
44806: LD_VAR 0 1
44810: NOT
44811: PUSH
44812: LD_VAR 0 2
44816: NOT
44817: OR
44818: IFFALSE 44822
// exit ;
44820: GO 45018
// case engine of engine_solar :
44822: LD_VAR 0 2
44826: PUSH
44827: LD_INT 2
44829: DOUBLE
44830: EQUAL
44831: IFTRUE 44835
44833: GO 44873
44835: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44836: LD_ADDR_VAR 0 3
44840: PUSH
44841: LD_INT 11
44843: PUSH
44844: LD_INT 12
44846: PUSH
44847: LD_INT 13
44849: PUSH
44850: LD_INT 14
44852: PUSH
44853: LD_INT 1
44855: PUSH
44856: LD_INT 2
44858: PUSH
44859: LD_INT 3
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: ST_TO_ADDR
44871: GO 45002
44873: LD_INT 1
44875: DOUBLE
44876: EQUAL
44877: IFTRUE 44881
44879: GO 44943
44881: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44882: LD_ADDR_VAR 0 3
44886: PUSH
44887: LD_INT 11
44889: PUSH
44890: LD_INT 12
44892: PUSH
44893: LD_INT 13
44895: PUSH
44896: LD_INT 14
44898: PUSH
44899: LD_INT 1
44901: PUSH
44902: LD_INT 2
44904: PUSH
44905: LD_INT 3
44907: PUSH
44908: LD_INT 4
44910: PUSH
44911: LD_INT 5
44913: PUSH
44914: LD_INT 21
44916: PUSH
44917: LD_INT 23
44919: PUSH
44920: LD_INT 22
44922: PUSH
44923: LD_INT 24
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: ST_TO_ADDR
44941: GO 45002
44943: LD_INT 3
44945: DOUBLE
44946: EQUAL
44947: IFTRUE 44951
44949: GO 45001
44951: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44952: LD_ADDR_VAR 0 3
44956: PUSH
44957: LD_INT 13
44959: PUSH
44960: LD_INT 14
44962: PUSH
44963: LD_INT 2
44965: PUSH
44966: LD_INT 3
44968: PUSH
44969: LD_INT 4
44971: PUSH
44972: LD_INT 5
44974: PUSH
44975: LD_INT 21
44977: PUSH
44978: LD_INT 22
44980: PUSH
44981: LD_INT 23
44983: PUSH
44984: LD_INT 24
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: ST_TO_ADDR
44999: GO 45002
45001: POP
// result := ( chassis in result ) ;
45002: LD_ADDR_VAR 0 3
45006: PUSH
45007: LD_VAR 0 1
45011: PUSH
45012: LD_VAR 0 3
45016: IN
45017: ST_TO_ADDR
// end ;
45018: LD_VAR 0 3
45022: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
45023: LD_INT 0
45025: PPUSH
// if not chassis or not weapon then
45026: LD_VAR 0 1
45030: NOT
45031: PUSH
45032: LD_VAR 0 2
45036: NOT
45037: OR
45038: IFFALSE 45042
// exit ;
45040: GO 46102
// case weapon of us_machine_gun :
45042: LD_VAR 0 2
45046: PUSH
45047: LD_INT 2
45049: DOUBLE
45050: EQUAL
45051: IFTRUE 45055
45053: GO 45085
45055: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
45056: LD_ADDR_VAR 0 3
45060: PUSH
45061: LD_INT 1
45063: PUSH
45064: LD_INT 2
45066: PUSH
45067: LD_INT 3
45069: PUSH
45070: LD_INT 4
45072: PUSH
45073: LD_INT 5
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: ST_TO_ADDR
45083: GO 46086
45085: LD_INT 3
45087: DOUBLE
45088: EQUAL
45089: IFTRUE 45093
45091: GO 45123
45093: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
45094: LD_ADDR_VAR 0 3
45098: PUSH
45099: LD_INT 1
45101: PUSH
45102: LD_INT 2
45104: PUSH
45105: LD_INT 3
45107: PUSH
45108: LD_INT 4
45110: PUSH
45111: LD_INT 5
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: ST_TO_ADDR
45121: GO 46086
45123: LD_INT 11
45125: DOUBLE
45126: EQUAL
45127: IFTRUE 45131
45129: GO 45161
45131: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
45132: LD_ADDR_VAR 0 3
45136: PUSH
45137: LD_INT 1
45139: PUSH
45140: LD_INT 2
45142: PUSH
45143: LD_INT 3
45145: PUSH
45146: LD_INT 4
45148: PUSH
45149: LD_INT 5
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: ST_TO_ADDR
45159: GO 46086
45161: LD_INT 4
45163: DOUBLE
45164: EQUAL
45165: IFTRUE 45169
45167: GO 45195
45169: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
45170: LD_ADDR_VAR 0 3
45174: PUSH
45175: LD_INT 2
45177: PUSH
45178: LD_INT 3
45180: PUSH
45181: LD_INT 4
45183: PUSH
45184: LD_INT 5
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: ST_TO_ADDR
45193: GO 46086
45195: LD_INT 5
45197: DOUBLE
45198: EQUAL
45199: IFTRUE 45203
45201: GO 45229
45203: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
45204: LD_ADDR_VAR 0 3
45208: PUSH
45209: LD_INT 2
45211: PUSH
45212: LD_INT 3
45214: PUSH
45215: LD_INT 4
45217: PUSH
45218: LD_INT 5
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: ST_TO_ADDR
45227: GO 46086
45229: LD_INT 9
45231: DOUBLE
45232: EQUAL
45233: IFTRUE 45237
45235: GO 45263
45237: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
45238: LD_ADDR_VAR 0 3
45242: PUSH
45243: LD_INT 2
45245: PUSH
45246: LD_INT 3
45248: PUSH
45249: LD_INT 4
45251: PUSH
45252: LD_INT 5
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: ST_TO_ADDR
45261: GO 46086
45263: LD_INT 7
45265: DOUBLE
45266: EQUAL
45267: IFTRUE 45271
45269: GO 45297
45271: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
45272: LD_ADDR_VAR 0 3
45276: PUSH
45277: LD_INT 2
45279: PUSH
45280: LD_INT 3
45282: PUSH
45283: LD_INT 4
45285: PUSH
45286: LD_INT 5
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: ST_TO_ADDR
45295: GO 46086
45297: LD_INT 12
45299: DOUBLE
45300: EQUAL
45301: IFTRUE 45305
45303: GO 45331
45305: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
45306: LD_ADDR_VAR 0 3
45310: PUSH
45311: LD_INT 2
45313: PUSH
45314: LD_INT 3
45316: PUSH
45317: LD_INT 4
45319: PUSH
45320: LD_INT 5
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: ST_TO_ADDR
45329: GO 46086
45331: LD_INT 13
45333: DOUBLE
45334: EQUAL
45335: IFTRUE 45339
45337: GO 45365
45339: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
45340: LD_ADDR_VAR 0 3
45344: PUSH
45345: LD_INT 2
45347: PUSH
45348: LD_INT 3
45350: PUSH
45351: LD_INT 4
45353: PUSH
45354: LD_INT 5
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: ST_TO_ADDR
45363: GO 46086
45365: LD_INT 14
45367: DOUBLE
45368: EQUAL
45369: IFTRUE 45373
45371: GO 45391
45373: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
45374: LD_ADDR_VAR 0 3
45378: PUSH
45379: LD_INT 4
45381: PUSH
45382: LD_INT 5
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: ST_TO_ADDR
45389: GO 46086
45391: LD_INT 6
45393: DOUBLE
45394: EQUAL
45395: IFTRUE 45399
45397: GO 45417
45399: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
45400: LD_ADDR_VAR 0 3
45404: PUSH
45405: LD_INT 4
45407: PUSH
45408: LD_INT 5
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: ST_TO_ADDR
45415: GO 46086
45417: LD_INT 10
45419: DOUBLE
45420: EQUAL
45421: IFTRUE 45425
45423: GO 45443
45425: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45426: LD_ADDR_VAR 0 3
45430: PUSH
45431: LD_INT 4
45433: PUSH
45434: LD_INT 5
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: ST_TO_ADDR
45441: GO 46086
45443: LD_INT 22
45445: DOUBLE
45446: EQUAL
45447: IFTRUE 45451
45449: GO 45477
45451: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
45452: LD_ADDR_VAR 0 3
45456: PUSH
45457: LD_INT 11
45459: PUSH
45460: LD_INT 12
45462: PUSH
45463: LD_INT 13
45465: PUSH
45466: LD_INT 14
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: ST_TO_ADDR
45475: GO 46086
45477: LD_INT 23
45479: DOUBLE
45480: EQUAL
45481: IFTRUE 45485
45483: GO 45511
45485: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
45486: LD_ADDR_VAR 0 3
45490: PUSH
45491: LD_INT 11
45493: PUSH
45494: LD_INT 12
45496: PUSH
45497: LD_INT 13
45499: PUSH
45500: LD_INT 14
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: ST_TO_ADDR
45509: GO 46086
45511: LD_INT 24
45513: DOUBLE
45514: EQUAL
45515: IFTRUE 45519
45517: GO 45545
45519: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
45520: LD_ADDR_VAR 0 3
45524: PUSH
45525: LD_INT 11
45527: PUSH
45528: LD_INT 12
45530: PUSH
45531: LD_INT 13
45533: PUSH
45534: LD_INT 14
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: ST_TO_ADDR
45543: GO 46086
45545: LD_INT 30
45547: DOUBLE
45548: EQUAL
45549: IFTRUE 45553
45551: GO 45579
45553: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45554: LD_ADDR_VAR 0 3
45558: PUSH
45559: LD_INT 11
45561: PUSH
45562: LD_INT 12
45564: PUSH
45565: LD_INT 13
45567: PUSH
45568: LD_INT 14
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: ST_TO_ADDR
45577: GO 46086
45579: LD_INT 25
45581: DOUBLE
45582: EQUAL
45583: IFTRUE 45587
45585: GO 45605
45587: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45588: LD_ADDR_VAR 0 3
45592: PUSH
45593: LD_INT 13
45595: PUSH
45596: LD_INT 14
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: ST_TO_ADDR
45603: GO 46086
45605: LD_INT 27
45607: DOUBLE
45608: EQUAL
45609: IFTRUE 45613
45611: GO 45631
45613: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
45614: LD_ADDR_VAR 0 3
45618: PUSH
45619: LD_INT 13
45621: PUSH
45622: LD_INT 14
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: ST_TO_ADDR
45629: GO 46086
45631: LD_INT 92
45633: DOUBLE
45634: EQUAL
45635: IFTRUE 45639
45637: GO 45665
45639: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45640: LD_ADDR_VAR 0 3
45644: PUSH
45645: LD_INT 11
45647: PUSH
45648: LD_INT 12
45650: PUSH
45651: LD_INT 13
45653: PUSH
45654: LD_INT 14
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: ST_TO_ADDR
45663: GO 46086
45665: LD_INT 28
45667: DOUBLE
45668: EQUAL
45669: IFTRUE 45673
45671: GO 45691
45673: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45674: LD_ADDR_VAR 0 3
45678: PUSH
45679: LD_INT 13
45681: PUSH
45682: LD_INT 14
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: ST_TO_ADDR
45689: GO 46086
45691: LD_INT 29
45693: DOUBLE
45694: EQUAL
45695: IFTRUE 45699
45697: GO 45717
45699: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45700: LD_ADDR_VAR 0 3
45704: PUSH
45705: LD_INT 13
45707: PUSH
45708: LD_INT 14
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: ST_TO_ADDR
45715: GO 46086
45717: LD_INT 31
45719: DOUBLE
45720: EQUAL
45721: IFTRUE 45725
45723: GO 45743
45725: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45726: LD_ADDR_VAR 0 3
45730: PUSH
45731: LD_INT 13
45733: PUSH
45734: LD_INT 14
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: ST_TO_ADDR
45741: GO 46086
45743: LD_INT 26
45745: DOUBLE
45746: EQUAL
45747: IFTRUE 45751
45749: GO 45769
45751: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45752: LD_ADDR_VAR 0 3
45756: PUSH
45757: LD_INT 13
45759: PUSH
45760: LD_INT 14
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: ST_TO_ADDR
45767: GO 46086
45769: LD_INT 42
45771: DOUBLE
45772: EQUAL
45773: IFTRUE 45777
45775: GO 45803
45777: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45778: LD_ADDR_VAR 0 3
45782: PUSH
45783: LD_INT 21
45785: PUSH
45786: LD_INT 22
45788: PUSH
45789: LD_INT 23
45791: PUSH
45792: LD_INT 24
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: ST_TO_ADDR
45801: GO 46086
45803: LD_INT 43
45805: DOUBLE
45806: EQUAL
45807: IFTRUE 45811
45809: GO 45837
45811: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45812: LD_ADDR_VAR 0 3
45816: PUSH
45817: LD_INT 21
45819: PUSH
45820: LD_INT 22
45822: PUSH
45823: LD_INT 23
45825: PUSH
45826: LD_INT 24
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: ST_TO_ADDR
45835: GO 46086
45837: LD_INT 44
45839: DOUBLE
45840: EQUAL
45841: IFTRUE 45845
45843: GO 45871
45845: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45846: LD_ADDR_VAR 0 3
45850: PUSH
45851: LD_INT 21
45853: PUSH
45854: LD_INT 22
45856: PUSH
45857: LD_INT 23
45859: PUSH
45860: LD_INT 24
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: ST_TO_ADDR
45869: GO 46086
45871: LD_INT 45
45873: DOUBLE
45874: EQUAL
45875: IFTRUE 45879
45877: GO 45905
45879: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45880: LD_ADDR_VAR 0 3
45884: PUSH
45885: LD_INT 21
45887: PUSH
45888: LD_INT 22
45890: PUSH
45891: LD_INT 23
45893: PUSH
45894: LD_INT 24
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: ST_TO_ADDR
45903: GO 46086
45905: LD_INT 49
45907: DOUBLE
45908: EQUAL
45909: IFTRUE 45913
45911: GO 45939
45913: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45914: LD_ADDR_VAR 0 3
45918: PUSH
45919: LD_INT 21
45921: PUSH
45922: LD_INT 22
45924: PUSH
45925: LD_INT 23
45927: PUSH
45928: LD_INT 24
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: ST_TO_ADDR
45937: GO 46086
45939: LD_INT 51
45941: DOUBLE
45942: EQUAL
45943: IFTRUE 45947
45945: GO 45973
45947: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45948: LD_ADDR_VAR 0 3
45952: PUSH
45953: LD_INT 21
45955: PUSH
45956: LD_INT 22
45958: PUSH
45959: LD_INT 23
45961: PUSH
45962: LD_INT 24
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: ST_TO_ADDR
45971: GO 46086
45973: LD_INT 52
45975: DOUBLE
45976: EQUAL
45977: IFTRUE 45981
45979: GO 46007
45981: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45982: LD_ADDR_VAR 0 3
45986: PUSH
45987: LD_INT 21
45989: PUSH
45990: LD_INT 22
45992: PUSH
45993: LD_INT 23
45995: PUSH
45996: LD_INT 24
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: ST_TO_ADDR
46005: GO 46086
46007: LD_INT 53
46009: DOUBLE
46010: EQUAL
46011: IFTRUE 46015
46013: GO 46033
46015: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
46016: LD_ADDR_VAR 0 3
46020: PUSH
46021: LD_INT 23
46023: PUSH
46024: LD_INT 24
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: ST_TO_ADDR
46031: GO 46086
46033: LD_INT 46
46035: DOUBLE
46036: EQUAL
46037: IFTRUE 46041
46039: GO 46059
46041: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
46042: LD_ADDR_VAR 0 3
46046: PUSH
46047: LD_INT 23
46049: PUSH
46050: LD_INT 24
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: ST_TO_ADDR
46057: GO 46086
46059: LD_INT 47
46061: DOUBLE
46062: EQUAL
46063: IFTRUE 46067
46065: GO 46085
46067: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
46068: LD_ADDR_VAR 0 3
46072: PUSH
46073: LD_INT 23
46075: PUSH
46076: LD_INT 24
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: ST_TO_ADDR
46083: GO 46086
46085: POP
// result := ( chassis in result ) ;
46086: LD_ADDR_VAR 0 3
46090: PUSH
46091: LD_VAR 0 1
46095: PUSH
46096: LD_VAR 0 3
46100: IN
46101: ST_TO_ADDR
// end ;
46102: LD_VAR 0 3
46106: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
46107: LD_INT 0
46109: PPUSH
46110: PPUSH
46111: PPUSH
46112: PPUSH
46113: PPUSH
46114: PPUSH
46115: PPUSH
// result := array ;
46116: LD_ADDR_VAR 0 5
46120: PUSH
46121: LD_VAR 0 1
46125: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
46126: LD_VAR 0 1
46130: NOT
46131: PUSH
46132: LD_VAR 0 2
46136: NOT
46137: OR
46138: PUSH
46139: LD_VAR 0 3
46143: NOT
46144: OR
46145: PUSH
46146: LD_VAR 0 2
46150: PUSH
46151: LD_VAR 0 1
46155: GREATER
46156: OR
46157: PUSH
46158: LD_VAR 0 3
46162: PUSH
46163: LD_VAR 0 1
46167: GREATER
46168: OR
46169: IFFALSE 46173
// exit ;
46171: GO 46469
// if direction then
46173: LD_VAR 0 4
46177: IFFALSE 46241
// begin d := 1 ;
46179: LD_ADDR_VAR 0 9
46183: PUSH
46184: LD_INT 1
46186: ST_TO_ADDR
// if i_from > i_to then
46187: LD_VAR 0 2
46191: PUSH
46192: LD_VAR 0 3
46196: GREATER
46197: IFFALSE 46223
// length := ( array - i_from ) + i_to else
46199: LD_ADDR_VAR 0 11
46203: PUSH
46204: LD_VAR 0 1
46208: PUSH
46209: LD_VAR 0 2
46213: MINUS
46214: PUSH
46215: LD_VAR 0 3
46219: PLUS
46220: ST_TO_ADDR
46221: GO 46239
// length := i_to - i_from ;
46223: LD_ADDR_VAR 0 11
46227: PUSH
46228: LD_VAR 0 3
46232: PUSH
46233: LD_VAR 0 2
46237: MINUS
46238: ST_TO_ADDR
// end else
46239: GO 46302
// begin d := - 1 ;
46241: LD_ADDR_VAR 0 9
46245: PUSH
46246: LD_INT 1
46248: NEG
46249: ST_TO_ADDR
// if i_from > i_to then
46250: LD_VAR 0 2
46254: PUSH
46255: LD_VAR 0 3
46259: GREATER
46260: IFFALSE 46280
// length := i_from - i_to else
46262: LD_ADDR_VAR 0 11
46266: PUSH
46267: LD_VAR 0 2
46271: PUSH
46272: LD_VAR 0 3
46276: MINUS
46277: ST_TO_ADDR
46278: GO 46302
// length := ( array - i_to ) + i_from ;
46280: LD_ADDR_VAR 0 11
46284: PUSH
46285: LD_VAR 0 1
46289: PUSH
46290: LD_VAR 0 3
46294: MINUS
46295: PUSH
46296: LD_VAR 0 2
46300: PLUS
46301: ST_TO_ADDR
// end ; if not length then
46302: LD_VAR 0 11
46306: NOT
46307: IFFALSE 46311
// exit ;
46309: GO 46469
// tmp := array ;
46311: LD_ADDR_VAR 0 10
46315: PUSH
46316: LD_VAR 0 1
46320: ST_TO_ADDR
// for i = 1 to length do
46321: LD_ADDR_VAR 0 6
46325: PUSH
46326: DOUBLE
46327: LD_INT 1
46329: DEC
46330: ST_TO_ADDR
46331: LD_VAR 0 11
46335: PUSH
46336: FOR_TO
46337: IFFALSE 46457
// begin for j = 1 to array do
46339: LD_ADDR_VAR 0 7
46343: PUSH
46344: DOUBLE
46345: LD_INT 1
46347: DEC
46348: ST_TO_ADDR
46349: LD_VAR 0 1
46353: PUSH
46354: FOR_TO
46355: IFFALSE 46443
// begin k := j + d ;
46357: LD_ADDR_VAR 0 8
46361: PUSH
46362: LD_VAR 0 7
46366: PUSH
46367: LD_VAR 0 9
46371: PLUS
46372: ST_TO_ADDR
// if k > array then
46373: LD_VAR 0 8
46377: PUSH
46378: LD_VAR 0 1
46382: GREATER
46383: IFFALSE 46393
// k := 1 ;
46385: LD_ADDR_VAR 0 8
46389: PUSH
46390: LD_INT 1
46392: ST_TO_ADDR
// if not k then
46393: LD_VAR 0 8
46397: NOT
46398: IFFALSE 46410
// k := array ;
46400: LD_ADDR_VAR 0 8
46404: PUSH
46405: LD_VAR 0 1
46409: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
46410: LD_ADDR_VAR 0 10
46414: PUSH
46415: LD_VAR 0 10
46419: PPUSH
46420: LD_VAR 0 8
46424: PPUSH
46425: LD_VAR 0 1
46429: PUSH
46430: LD_VAR 0 7
46434: ARRAY
46435: PPUSH
46436: CALL_OW 1
46440: ST_TO_ADDR
// end ;
46441: GO 46354
46443: POP
46444: POP
// array := tmp ;
46445: LD_ADDR_VAR 0 1
46449: PUSH
46450: LD_VAR 0 10
46454: ST_TO_ADDR
// end ;
46455: GO 46336
46457: POP
46458: POP
// result := array ;
46459: LD_ADDR_VAR 0 5
46463: PUSH
46464: LD_VAR 0 1
46468: ST_TO_ADDR
// end ;
46469: LD_VAR 0 5
46473: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
46474: LD_INT 0
46476: PPUSH
46477: PPUSH
// result := 0 ;
46478: LD_ADDR_VAR 0 3
46482: PUSH
46483: LD_INT 0
46485: ST_TO_ADDR
// if not array or not value in array then
46486: LD_VAR 0 1
46490: NOT
46491: PUSH
46492: LD_VAR 0 2
46496: PUSH
46497: LD_VAR 0 1
46501: IN
46502: NOT
46503: OR
46504: IFFALSE 46508
// exit ;
46506: GO 46562
// for i = 1 to array do
46508: LD_ADDR_VAR 0 4
46512: PUSH
46513: DOUBLE
46514: LD_INT 1
46516: DEC
46517: ST_TO_ADDR
46518: LD_VAR 0 1
46522: PUSH
46523: FOR_TO
46524: IFFALSE 46560
// if value = array [ i ] then
46526: LD_VAR 0 2
46530: PUSH
46531: LD_VAR 0 1
46535: PUSH
46536: LD_VAR 0 4
46540: ARRAY
46541: EQUAL
46542: IFFALSE 46558
// begin result := i ;
46544: LD_ADDR_VAR 0 3
46548: PUSH
46549: LD_VAR 0 4
46553: ST_TO_ADDR
// exit ;
46554: POP
46555: POP
46556: GO 46562
// end ;
46558: GO 46523
46560: POP
46561: POP
// end ;
46562: LD_VAR 0 3
46566: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46567: LD_INT 0
46569: PPUSH
// vc_chassis := chassis ;
46570: LD_ADDR_OWVAR 37
46574: PUSH
46575: LD_VAR 0 1
46579: ST_TO_ADDR
// vc_engine := engine ;
46580: LD_ADDR_OWVAR 39
46584: PUSH
46585: LD_VAR 0 2
46589: ST_TO_ADDR
// vc_control := control ;
46590: LD_ADDR_OWVAR 38
46594: PUSH
46595: LD_VAR 0 3
46599: ST_TO_ADDR
// vc_weapon := weapon ;
46600: LD_ADDR_OWVAR 40
46604: PUSH
46605: LD_VAR 0 4
46609: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46610: LD_ADDR_OWVAR 41
46614: PUSH
46615: LD_VAR 0 5
46619: ST_TO_ADDR
// end ;
46620: LD_VAR 0 6
46624: RET
// export function WantPlant ( unit ) ; var task ; begin
46625: LD_INT 0
46627: PPUSH
46628: PPUSH
// result := false ;
46629: LD_ADDR_VAR 0 2
46633: PUSH
46634: LD_INT 0
46636: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46637: LD_ADDR_VAR 0 3
46641: PUSH
46642: LD_VAR 0 1
46646: PPUSH
46647: CALL_OW 437
46651: ST_TO_ADDR
// if task then
46652: LD_VAR 0 3
46656: IFFALSE 46684
// if task [ 1 ] [ 1 ] = p then
46658: LD_VAR 0 3
46662: PUSH
46663: LD_INT 1
46665: ARRAY
46666: PUSH
46667: LD_INT 1
46669: ARRAY
46670: PUSH
46671: LD_STRING p
46673: EQUAL
46674: IFFALSE 46684
// result := true ;
46676: LD_ADDR_VAR 0 2
46680: PUSH
46681: LD_INT 1
46683: ST_TO_ADDR
// end ;
46684: LD_VAR 0 2
46688: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46689: LD_INT 0
46691: PPUSH
46692: PPUSH
46693: PPUSH
46694: PPUSH
// if pos < 1 then
46695: LD_VAR 0 2
46699: PUSH
46700: LD_INT 1
46702: LESS
46703: IFFALSE 46707
// exit ;
46705: GO 47010
// if pos = 1 then
46707: LD_VAR 0 2
46711: PUSH
46712: LD_INT 1
46714: EQUAL
46715: IFFALSE 46748
// result := Replace ( arr , pos [ 1 ] , value ) else
46717: LD_ADDR_VAR 0 4
46721: PUSH
46722: LD_VAR 0 1
46726: PPUSH
46727: LD_VAR 0 2
46731: PUSH
46732: LD_INT 1
46734: ARRAY
46735: PPUSH
46736: LD_VAR 0 3
46740: PPUSH
46741: CALL_OW 1
46745: ST_TO_ADDR
46746: GO 47010
// begin tmp := arr ;
46748: LD_ADDR_VAR 0 6
46752: PUSH
46753: LD_VAR 0 1
46757: ST_TO_ADDR
// s_arr := [ tmp ] ;
46758: LD_ADDR_VAR 0 7
46762: PUSH
46763: LD_VAR 0 6
46767: PUSH
46768: EMPTY
46769: LIST
46770: ST_TO_ADDR
// for i = 1 to pos - 1 do
46771: LD_ADDR_VAR 0 5
46775: PUSH
46776: DOUBLE
46777: LD_INT 1
46779: DEC
46780: ST_TO_ADDR
46781: LD_VAR 0 2
46785: PUSH
46786: LD_INT 1
46788: MINUS
46789: PUSH
46790: FOR_TO
46791: IFFALSE 46836
// begin tmp := tmp [ pos [ i ] ] ;
46793: LD_ADDR_VAR 0 6
46797: PUSH
46798: LD_VAR 0 6
46802: PUSH
46803: LD_VAR 0 2
46807: PUSH
46808: LD_VAR 0 5
46812: ARRAY
46813: ARRAY
46814: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46815: LD_ADDR_VAR 0 7
46819: PUSH
46820: LD_VAR 0 7
46824: PUSH
46825: LD_VAR 0 6
46829: PUSH
46830: EMPTY
46831: LIST
46832: ADD
46833: ST_TO_ADDR
// end ;
46834: GO 46790
46836: POP
46837: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46838: LD_ADDR_VAR 0 6
46842: PUSH
46843: LD_VAR 0 6
46847: PPUSH
46848: LD_VAR 0 2
46852: PUSH
46853: LD_VAR 0 2
46857: ARRAY
46858: PPUSH
46859: LD_VAR 0 3
46863: PPUSH
46864: CALL_OW 1
46868: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46869: LD_ADDR_VAR 0 7
46873: PUSH
46874: LD_VAR 0 7
46878: PPUSH
46879: LD_VAR 0 7
46883: PPUSH
46884: LD_VAR 0 6
46888: PPUSH
46889: CALL_OW 1
46893: ST_TO_ADDR
// for i = s_arr downto 2 do
46894: LD_ADDR_VAR 0 5
46898: PUSH
46899: DOUBLE
46900: LD_VAR 0 7
46904: INC
46905: ST_TO_ADDR
46906: LD_INT 2
46908: PUSH
46909: FOR_DOWNTO
46910: IFFALSE 46994
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46912: LD_ADDR_VAR 0 6
46916: PUSH
46917: LD_VAR 0 7
46921: PUSH
46922: LD_VAR 0 5
46926: PUSH
46927: LD_INT 1
46929: MINUS
46930: ARRAY
46931: PPUSH
46932: LD_VAR 0 2
46936: PUSH
46937: LD_VAR 0 5
46941: PUSH
46942: LD_INT 1
46944: MINUS
46945: ARRAY
46946: PPUSH
46947: LD_VAR 0 7
46951: PUSH
46952: LD_VAR 0 5
46956: ARRAY
46957: PPUSH
46958: CALL_OW 1
46962: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46963: LD_ADDR_VAR 0 7
46967: PUSH
46968: LD_VAR 0 7
46972: PPUSH
46973: LD_VAR 0 5
46977: PUSH
46978: LD_INT 1
46980: MINUS
46981: PPUSH
46982: LD_VAR 0 6
46986: PPUSH
46987: CALL_OW 1
46991: ST_TO_ADDR
// end ;
46992: GO 46909
46994: POP
46995: POP
// result := s_arr [ 1 ] ;
46996: LD_ADDR_VAR 0 4
47000: PUSH
47001: LD_VAR 0 7
47005: PUSH
47006: LD_INT 1
47008: ARRAY
47009: ST_TO_ADDR
// end ; end ;
47010: LD_VAR 0 4
47014: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
47015: LD_INT 0
47017: PPUSH
47018: PPUSH
// if not list then
47019: LD_VAR 0 1
47023: NOT
47024: IFFALSE 47028
// exit ;
47026: GO 47119
// i := list [ pos1 ] ;
47028: LD_ADDR_VAR 0 5
47032: PUSH
47033: LD_VAR 0 1
47037: PUSH
47038: LD_VAR 0 2
47042: ARRAY
47043: ST_TO_ADDR
// if not i then
47044: LD_VAR 0 5
47048: NOT
47049: IFFALSE 47053
// exit ;
47051: GO 47119
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
47053: LD_ADDR_VAR 0 1
47057: PUSH
47058: LD_VAR 0 1
47062: PPUSH
47063: LD_VAR 0 2
47067: PPUSH
47068: LD_VAR 0 1
47072: PUSH
47073: LD_VAR 0 3
47077: ARRAY
47078: PPUSH
47079: CALL_OW 1
47083: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
47084: LD_ADDR_VAR 0 1
47088: PUSH
47089: LD_VAR 0 1
47093: PPUSH
47094: LD_VAR 0 3
47098: PPUSH
47099: LD_VAR 0 5
47103: PPUSH
47104: CALL_OW 1
47108: ST_TO_ADDR
// result := list ;
47109: LD_ADDR_VAR 0 4
47113: PUSH
47114: LD_VAR 0 1
47118: ST_TO_ADDR
// end ;
47119: LD_VAR 0 4
47123: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
47124: LD_INT 0
47126: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
47127: LD_ADDR_VAR 0 5
47131: PUSH
47132: LD_VAR 0 1
47136: PPUSH
47137: CALL_OW 250
47141: PPUSH
47142: LD_VAR 0 1
47146: PPUSH
47147: CALL_OW 251
47151: PPUSH
47152: LD_VAR 0 2
47156: PPUSH
47157: LD_VAR 0 3
47161: PPUSH
47162: LD_VAR 0 4
47166: PPUSH
47167: CALL 47545 0 5
47171: ST_TO_ADDR
// end ;
47172: LD_VAR 0 5
47176: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
47177: LD_INT 0
47179: PPUSH
47180: PPUSH
47181: PPUSH
47182: PPUSH
// if not list or not unit then
47183: LD_VAR 0 2
47187: NOT
47188: PUSH
47189: LD_VAR 0 1
47193: NOT
47194: OR
47195: IFFALSE 47199
// exit ;
47197: GO 47540
// result := [ ] ;
47199: LD_ADDR_VAR 0 5
47203: PUSH
47204: EMPTY
47205: ST_TO_ADDR
// for i in list do
47206: LD_ADDR_VAR 0 6
47210: PUSH
47211: LD_VAR 0 2
47215: PUSH
47216: FOR_IN
47217: IFFALSE 47435
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
47219: LD_ADDR_VAR 0 8
47223: PUSH
47224: LD_VAR 0 1
47228: PPUSH
47229: LD_VAR 0 6
47233: PUSH
47234: LD_INT 1
47236: ARRAY
47237: PPUSH
47238: LD_VAR 0 6
47242: PUSH
47243: LD_INT 2
47245: ARRAY
47246: PPUSH
47247: CALL_OW 297
47251: ST_TO_ADDR
// if not Count ( result ) then
47252: LD_VAR 0 5
47256: PPUSH
47257: CALL 43829 0 1
47261: NOT
47262: IFFALSE 47295
// begin result := Join ( result , [ i , tmp ] ) ;
47264: LD_ADDR_VAR 0 5
47268: PUSH
47269: LD_VAR 0 5
47273: PPUSH
47274: LD_VAR 0 6
47278: PUSH
47279: LD_VAR 0 8
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PPUSH
47288: CALL 79418 0 2
47292: ST_TO_ADDR
// continue ;
47293: GO 47216
// end ; if result [ result ] [ 2 ] <= tmp then
47295: LD_VAR 0 5
47299: PUSH
47300: LD_VAR 0 5
47304: ARRAY
47305: PUSH
47306: LD_INT 2
47308: ARRAY
47309: PUSH
47310: LD_VAR 0 8
47314: LESSEQUAL
47315: IFFALSE 47348
// result := Join ( result , [ i , tmp ] ) else
47317: LD_ADDR_VAR 0 5
47321: PUSH
47322: LD_VAR 0 5
47326: PPUSH
47327: LD_VAR 0 6
47331: PUSH
47332: LD_VAR 0 8
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PPUSH
47341: CALL 79418 0 2
47345: ST_TO_ADDR
47346: GO 47433
// begin for j := 1 to Count ( result ) do
47348: LD_ADDR_VAR 0 7
47352: PUSH
47353: DOUBLE
47354: LD_INT 1
47356: DEC
47357: ST_TO_ADDR
47358: LD_VAR 0 5
47362: PPUSH
47363: CALL 43829 0 1
47367: PUSH
47368: FOR_TO
47369: IFFALSE 47431
// begin if tmp < result [ j ] [ 2 ] then
47371: LD_VAR 0 8
47375: PUSH
47376: LD_VAR 0 5
47380: PUSH
47381: LD_VAR 0 7
47385: ARRAY
47386: PUSH
47387: LD_INT 2
47389: ARRAY
47390: LESS
47391: IFFALSE 47429
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47393: LD_ADDR_VAR 0 5
47397: PUSH
47398: LD_VAR 0 5
47402: PPUSH
47403: LD_VAR 0 7
47407: PPUSH
47408: LD_VAR 0 6
47412: PUSH
47413: LD_VAR 0 8
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PPUSH
47422: CALL_OW 2
47426: ST_TO_ADDR
// break ;
47427: GO 47431
// end ; end ;
47429: GO 47368
47431: POP
47432: POP
// end ; end ;
47433: GO 47216
47435: POP
47436: POP
// if result and not asc then
47437: LD_VAR 0 5
47441: PUSH
47442: LD_VAR 0 3
47446: NOT
47447: AND
47448: IFFALSE 47465
// result := ReverseArray ( result ) ;
47450: LD_ADDR_VAR 0 5
47454: PUSH
47455: LD_VAR 0 5
47459: PPUSH
47460: CALL 74705 0 1
47464: ST_TO_ADDR
// tmp := [ ] ;
47465: LD_ADDR_VAR 0 8
47469: PUSH
47470: EMPTY
47471: ST_TO_ADDR
// if mode then
47472: LD_VAR 0 4
47476: IFFALSE 47540
// begin for i := 1 to result do
47478: LD_ADDR_VAR 0 6
47482: PUSH
47483: DOUBLE
47484: LD_INT 1
47486: DEC
47487: ST_TO_ADDR
47488: LD_VAR 0 5
47492: PUSH
47493: FOR_TO
47494: IFFALSE 47528
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
47496: LD_ADDR_VAR 0 8
47500: PUSH
47501: LD_VAR 0 8
47505: PPUSH
47506: LD_VAR 0 5
47510: PUSH
47511: LD_VAR 0 6
47515: ARRAY
47516: PUSH
47517: LD_INT 1
47519: ARRAY
47520: PPUSH
47521: CALL 79418 0 2
47525: ST_TO_ADDR
47526: GO 47493
47528: POP
47529: POP
// result := tmp ;
47530: LD_ADDR_VAR 0 5
47534: PUSH
47535: LD_VAR 0 8
47539: ST_TO_ADDR
// end ; end ;
47540: LD_VAR 0 5
47544: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
47545: LD_INT 0
47547: PPUSH
47548: PPUSH
47549: PPUSH
47550: PPUSH
// if not list then
47551: LD_VAR 0 3
47555: NOT
47556: IFFALSE 47560
// exit ;
47558: GO 47948
// result := [ ] ;
47560: LD_ADDR_VAR 0 6
47564: PUSH
47565: EMPTY
47566: ST_TO_ADDR
// for i in list do
47567: LD_ADDR_VAR 0 7
47571: PUSH
47572: LD_VAR 0 3
47576: PUSH
47577: FOR_IN
47578: IFFALSE 47780
// begin tmp := GetDistUnitXY ( i , x , y ) ;
47580: LD_ADDR_VAR 0 9
47584: PUSH
47585: LD_VAR 0 7
47589: PPUSH
47590: LD_VAR 0 1
47594: PPUSH
47595: LD_VAR 0 2
47599: PPUSH
47600: CALL_OW 297
47604: ST_TO_ADDR
// if not result then
47605: LD_VAR 0 6
47609: NOT
47610: IFFALSE 47636
// result := [ [ i , tmp ] ] else
47612: LD_ADDR_VAR 0 6
47616: PUSH
47617: LD_VAR 0 7
47621: PUSH
47622: LD_VAR 0 9
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: EMPTY
47632: LIST
47633: ST_TO_ADDR
47634: GO 47778
// begin if result [ result ] [ 2 ] < tmp then
47636: LD_VAR 0 6
47640: PUSH
47641: LD_VAR 0 6
47645: ARRAY
47646: PUSH
47647: LD_INT 2
47649: ARRAY
47650: PUSH
47651: LD_VAR 0 9
47655: LESS
47656: IFFALSE 47698
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
47658: LD_ADDR_VAR 0 6
47662: PUSH
47663: LD_VAR 0 6
47667: PPUSH
47668: LD_VAR 0 6
47672: PUSH
47673: LD_INT 1
47675: PLUS
47676: PPUSH
47677: LD_VAR 0 7
47681: PUSH
47682: LD_VAR 0 9
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PPUSH
47691: CALL_OW 2
47695: ST_TO_ADDR
47696: GO 47778
// for j = 1 to result do
47698: LD_ADDR_VAR 0 8
47702: PUSH
47703: DOUBLE
47704: LD_INT 1
47706: DEC
47707: ST_TO_ADDR
47708: LD_VAR 0 6
47712: PUSH
47713: FOR_TO
47714: IFFALSE 47776
// begin if tmp < result [ j ] [ 2 ] then
47716: LD_VAR 0 9
47720: PUSH
47721: LD_VAR 0 6
47725: PUSH
47726: LD_VAR 0 8
47730: ARRAY
47731: PUSH
47732: LD_INT 2
47734: ARRAY
47735: LESS
47736: IFFALSE 47774
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47738: LD_ADDR_VAR 0 6
47742: PUSH
47743: LD_VAR 0 6
47747: PPUSH
47748: LD_VAR 0 8
47752: PPUSH
47753: LD_VAR 0 7
47757: PUSH
47758: LD_VAR 0 9
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PPUSH
47767: CALL_OW 2
47771: ST_TO_ADDR
// break ;
47772: GO 47776
// end ; end ;
47774: GO 47713
47776: POP
47777: POP
// end ; end ;
47778: GO 47577
47780: POP
47781: POP
// if result and not asc then
47782: LD_VAR 0 6
47786: PUSH
47787: LD_VAR 0 4
47791: NOT
47792: AND
47793: IFFALSE 47868
// begin tmp := result ;
47795: LD_ADDR_VAR 0 9
47799: PUSH
47800: LD_VAR 0 6
47804: ST_TO_ADDR
// for i = tmp downto 1 do
47805: LD_ADDR_VAR 0 7
47809: PUSH
47810: DOUBLE
47811: LD_VAR 0 9
47815: INC
47816: ST_TO_ADDR
47817: LD_INT 1
47819: PUSH
47820: FOR_DOWNTO
47821: IFFALSE 47866
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47823: LD_ADDR_VAR 0 6
47827: PUSH
47828: LD_VAR 0 6
47832: PPUSH
47833: LD_VAR 0 9
47837: PUSH
47838: LD_VAR 0 7
47842: MINUS
47843: PUSH
47844: LD_INT 1
47846: PLUS
47847: PPUSH
47848: LD_VAR 0 9
47852: PUSH
47853: LD_VAR 0 7
47857: ARRAY
47858: PPUSH
47859: CALL_OW 1
47863: ST_TO_ADDR
47864: GO 47820
47866: POP
47867: POP
// end ; tmp := [ ] ;
47868: LD_ADDR_VAR 0 9
47872: PUSH
47873: EMPTY
47874: ST_TO_ADDR
// if mode then
47875: LD_VAR 0 5
47879: IFFALSE 47948
// begin for i = 1 to result do
47881: LD_ADDR_VAR 0 7
47885: PUSH
47886: DOUBLE
47887: LD_INT 1
47889: DEC
47890: ST_TO_ADDR
47891: LD_VAR 0 6
47895: PUSH
47896: FOR_TO
47897: IFFALSE 47936
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47899: LD_ADDR_VAR 0 9
47903: PUSH
47904: LD_VAR 0 9
47908: PPUSH
47909: LD_VAR 0 7
47913: PPUSH
47914: LD_VAR 0 6
47918: PUSH
47919: LD_VAR 0 7
47923: ARRAY
47924: PUSH
47925: LD_INT 1
47927: ARRAY
47928: PPUSH
47929: CALL_OW 1
47933: ST_TO_ADDR
47934: GO 47896
47936: POP
47937: POP
// result := tmp ;
47938: LD_ADDR_VAR 0 6
47942: PUSH
47943: LD_VAR 0 9
47947: ST_TO_ADDR
// end ; end ;
47948: LD_VAR 0 6
47952: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47953: LD_INT 0
47955: PPUSH
47956: PPUSH
47957: PPUSH
47958: PPUSH
47959: PPUSH
47960: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47961: LD_ADDR_VAR 0 5
47965: PUSH
47966: LD_INT 0
47968: PUSH
47969: LD_INT 0
47971: PUSH
47972: LD_INT 0
47974: PUSH
47975: EMPTY
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: ST_TO_ADDR
// if not x or not y then
47983: LD_VAR 0 2
47987: NOT
47988: PUSH
47989: LD_VAR 0 3
47993: NOT
47994: OR
47995: IFFALSE 47999
// exit ;
47997: GO 49649
// if not range then
47999: LD_VAR 0 4
48003: NOT
48004: IFFALSE 48014
// range := 10 ;
48006: LD_ADDR_VAR 0 4
48010: PUSH
48011: LD_INT 10
48013: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48014: LD_ADDR_VAR 0 8
48018: PUSH
48019: LD_INT 81
48021: PUSH
48022: LD_VAR 0 1
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 92
48033: PUSH
48034: LD_VAR 0 2
48038: PUSH
48039: LD_VAR 0 3
48043: PUSH
48044: LD_VAR 0 4
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 3
48057: PUSH
48058: LD_INT 21
48060: PUSH
48061: LD_INT 3
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: LIST
48076: PPUSH
48077: CALL_OW 69
48081: ST_TO_ADDR
// if not tmp then
48082: LD_VAR 0 8
48086: NOT
48087: IFFALSE 48091
// exit ;
48089: GO 49649
// for i in tmp do
48091: LD_ADDR_VAR 0 6
48095: PUSH
48096: LD_VAR 0 8
48100: PUSH
48101: FOR_IN
48102: IFFALSE 49624
// begin points := [ 0 , 0 , 0 ] ;
48104: LD_ADDR_VAR 0 9
48108: PUSH
48109: LD_INT 0
48111: PUSH
48112: LD_INT 0
48114: PUSH
48115: LD_INT 0
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: LIST
48122: ST_TO_ADDR
// bpoints := 1 ;
48123: LD_ADDR_VAR 0 10
48127: PUSH
48128: LD_INT 1
48130: ST_TO_ADDR
// case GetType ( i ) of unit_human :
48131: LD_VAR 0 6
48135: PPUSH
48136: CALL_OW 247
48140: PUSH
48141: LD_INT 1
48143: DOUBLE
48144: EQUAL
48145: IFTRUE 48149
48147: GO 48727
48149: POP
// begin if GetClass ( i ) = 1 then
48150: LD_VAR 0 6
48154: PPUSH
48155: CALL_OW 257
48159: PUSH
48160: LD_INT 1
48162: EQUAL
48163: IFFALSE 48184
// points := [ 10 , 5 , 3 ] ;
48165: LD_ADDR_VAR 0 9
48169: PUSH
48170: LD_INT 10
48172: PUSH
48173: LD_INT 5
48175: PUSH
48176: LD_INT 3
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: LIST
48183: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
48184: LD_VAR 0 6
48188: PPUSH
48189: CALL_OW 257
48193: PUSH
48194: LD_INT 2
48196: PUSH
48197: LD_INT 3
48199: PUSH
48200: LD_INT 4
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: LIST
48207: IN
48208: IFFALSE 48229
// points := [ 3 , 2 , 1 ] ;
48210: LD_ADDR_VAR 0 9
48214: PUSH
48215: LD_INT 3
48217: PUSH
48218: LD_INT 2
48220: PUSH
48221: LD_INT 1
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: LIST
48228: ST_TO_ADDR
// if GetClass ( i ) = 5 then
48229: LD_VAR 0 6
48233: PPUSH
48234: CALL_OW 257
48238: PUSH
48239: LD_INT 5
48241: EQUAL
48242: IFFALSE 48263
// points := [ 130 , 5 , 2 ] ;
48244: LD_ADDR_VAR 0 9
48248: PUSH
48249: LD_INT 130
48251: PUSH
48252: LD_INT 5
48254: PUSH
48255: LD_INT 2
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: LIST
48262: ST_TO_ADDR
// if GetClass ( i ) = 8 then
48263: LD_VAR 0 6
48267: PPUSH
48268: CALL_OW 257
48272: PUSH
48273: LD_INT 8
48275: EQUAL
48276: IFFALSE 48297
// points := [ 35 , 35 , 30 ] ;
48278: LD_ADDR_VAR 0 9
48282: PUSH
48283: LD_INT 35
48285: PUSH
48286: LD_INT 35
48288: PUSH
48289: LD_INT 30
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: LIST
48296: ST_TO_ADDR
// if GetClass ( i ) = 9 then
48297: LD_VAR 0 6
48301: PPUSH
48302: CALL_OW 257
48306: PUSH
48307: LD_INT 9
48309: EQUAL
48310: IFFALSE 48331
// points := [ 20 , 55 , 40 ] ;
48312: LD_ADDR_VAR 0 9
48316: PUSH
48317: LD_INT 20
48319: PUSH
48320: LD_INT 55
48322: PUSH
48323: LD_INT 40
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: LIST
48330: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
48331: LD_VAR 0 6
48335: PPUSH
48336: CALL_OW 257
48340: PUSH
48341: LD_INT 12
48343: PUSH
48344: LD_INT 16
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: IN
48351: IFFALSE 48372
// points := [ 5 , 3 , 2 ] ;
48353: LD_ADDR_VAR 0 9
48357: PUSH
48358: LD_INT 5
48360: PUSH
48361: LD_INT 3
48363: PUSH
48364: LD_INT 2
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: LIST
48371: ST_TO_ADDR
// if GetClass ( i ) = 17 then
48372: LD_VAR 0 6
48376: PPUSH
48377: CALL_OW 257
48381: PUSH
48382: LD_INT 17
48384: EQUAL
48385: IFFALSE 48406
// points := [ 100 , 50 , 75 ] ;
48387: LD_ADDR_VAR 0 9
48391: PUSH
48392: LD_INT 100
48394: PUSH
48395: LD_INT 50
48397: PUSH
48398: LD_INT 75
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: LIST
48405: ST_TO_ADDR
// if GetClass ( i ) = 15 then
48406: LD_VAR 0 6
48410: PPUSH
48411: CALL_OW 257
48415: PUSH
48416: LD_INT 15
48418: EQUAL
48419: IFFALSE 48440
// points := [ 10 , 5 , 3 ] ;
48421: LD_ADDR_VAR 0 9
48425: PUSH
48426: LD_INT 10
48428: PUSH
48429: LD_INT 5
48431: PUSH
48432: LD_INT 3
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: LIST
48439: ST_TO_ADDR
// if GetClass ( i ) = 14 then
48440: LD_VAR 0 6
48444: PPUSH
48445: CALL_OW 257
48449: PUSH
48450: LD_INT 14
48452: EQUAL
48453: IFFALSE 48474
// points := [ 10 , 0 , 0 ] ;
48455: LD_ADDR_VAR 0 9
48459: PUSH
48460: LD_INT 10
48462: PUSH
48463: LD_INT 0
48465: PUSH
48466: LD_INT 0
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: LIST
48473: ST_TO_ADDR
// if GetClass ( i ) = 11 then
48474: LD_VAR 0 6
48478: PPUSH
48479: CALL_OW 257
48483: PUSH
48484: LD_INT 11
48486: EQUAL
48487: IFFALSE 48508
// points := [ 30 , 10 , 5 ] ;
48489: LD_ADDR_VAR 0 9
48493: PUSH
48494: LD_INT 30
48496: PUSH
48497: LD_INT 10
48499: PUSH
48500: LD_INT 5
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: LIST
48507: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
48508: LD_VAR 0 1
48512: PPUSH
48513: LD_INT 5
48515: PPUSH
48516: CALL_OW 321
48520: PUSH
48521: LD_INT 2
48523: EQUAL
48524: IFFALSE 48541
// bpoints := bpoints * 1.8 ;
48526: LD_ADDR_VAR 0 10
48530: PUSH
48531: LD_VAR 0 10
48535: PUSH
48536: LD_REAL  1.80000000000000E+0000
48539: MUL
48540: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
48541: LD_VAR 0 6
48545: PPUSH
48546: CALL_OW 257
48550: PUSH
48551: LD_INT 1
48553: PUSH
48554: LD_INT 2
48556: PUSH
48557: LD_INT 3
48559: PUSH
48560: LD_INT 4
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: IN
48569: PUSH
48570: LD_VAR 0 1
48574: PPUSH
48575: LD_INT 51
48577: PPUSH
48578: CALL_OW 321
48582: PUSH
48583: LD_INT 2
48585: EQUAL
48586: AND
48587: IFFALSE 48604
// bpoints := bpoints * 1.2 ;
48589: LD_ADDR_VAR 0 10
48593: PUSH
48594: LD_VAR 0 10
48598: PUSH
48599: LD_REAL  1.20000000000000E+0000
48602: MUL
48603: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
48604: LD_VAR 0 6
48608: PPUSH
48609: CALL_OW 257
48613: PUSH
48614: LD_INT 5
48616: PUSH
48617: LD_INT 7
48619: PUSH
48620: LD_INT 9
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: LIST
48627: IN
48628: PUSH
48629: LD_VAR 0 1
48633: PPUSH
48634: LD_INT 52
48636: PPUSH
48637: CALL_OW 321
48641: PUSH
48642: LD_INT 2
48644: EQUAL
48645: AND
48646: IFFALSE 48663
// bpoints := bpoints * 1.5 ;
48648: LD_ADDR_VAR 0 10
48652: PUSH
48653: LD_VAR 0 10
48657: PUSH
48658: LD_REAL  1.50000000000000E+0000
48661: MUL
48662: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
48663: LD_VAR 0 1
48667: PPUSH
48668: LD_INT 66
48670: PPUSH
48671: CALL_OW 321
48675: PUSH
48676: LD_INT 2
48678: EQUAL
48679: IFFALSE 48696
// bpoints := bpoints * 1.1 ;
48681: LD_ADDR_VAR 0 10
48685: PUSH
48686: LD_VAR 0 10
48690: PUSH
48691: LD_REAL  1.10000000000000E+0000
48694: MUL
48695: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
48696: LD_ADDR_VAR 0 10
48700: PUSH
48701: LD_VAR 0 10
48705: PUSH
48706: LD_VAR 0 6
48710: PPUSH
48711: LD_INT 1
48713: PPUSH
48714: CALL_OW 259
48718: PUSH
48719: LD_REAL  1.15000000000000E+0000
48722: MUL
48723: MUL
48724: ST_TO_ADDR
// end ; unit_vehicle :
48725: GO 49553
48727: LD_INT 2
48729: DOUBLE
48730: EQUAL
48731: IFTRUE 48735
48733: GO 49541
48735: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
48736: LD_VAR 0 6
48740: PPUSH
48741: CALL_OW 264
48745: PUSH
48746: LD_INT 2
48748: PUSH
48749: LD_INT 42
48751: PUSH
48752: LD_INT 24
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: LIST
48759: IN
48760: IFFALSE 48781
// points := [ 25 , 5 , 3 ] ;
48762: LD_ADDR_VAR 0 9
48766: PUSH
48767: LD_INT 25
48769: PUSH
48770: LD_INT 5
48772: PUSH
48773: LD_INT 3
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: LIST
48780: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48781: LD_VAR 0 6
48785: PPUSH
48786: CALL_OW 264
48790: PUSH
48791: LD_INT 4
48793: PUSH
48794: LD_INT 43
48796: PUSH
48797: LD_INT 25
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: LIST
48804: IN
48805: IFFALSE 48826
// points := [ 40 , 15 , 5 ] ;
48807: LD_ADDR_VAR 0 9
48811: PUSH
48812: LD_INT 40
48814: PUSH
48815: LD_INT 15
48817: PUSH
48818: LD_INT 5
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: LIST
48825: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48826: LD_VAR 0 6
48830: PPUSH
48831: CALL_OW 264
48835: PUSH
48836: LD_INT 3
48838: PUSH
48839: LD_INT 23
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: IN
48846: IFFALSE 48867
// points := [ 7 , 25 , 8 ] ;
48848: LD_ADDR_VAR 0 9
48852: PUSH
48853: LD_INT 7
48855: PUSH
48856: LD_INT 25
48858: PUSH
48859: LD_INT 8
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: LIST
48866: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48867: LD_VAR 0 6
48871: PPUSH
48872: CALL_OW 264
48876: PUSH
48877: LD_INT 5
48879: PUSH
48880: LD_INT 27
48882: PUSH
48883: LD_INT 44
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: LIST
48890: IN
48891: IFFALSE 48912
// points := [ 14 , 50 , 16 ] ;
48893: LD_ADDR_VAR 0 9
48897: PUSH
48898: LD_INT 14
48900: PUSH
48901: LD_INT 50
48903: PUSH
48904: LD_INT 16
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: LIST
48911: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48912: LD_VAR 0 6
48916: PPUSH
48917: CALL_OW 264
48921: PUSH
48922: LD_INT 6
48924: PUSH
48925: LD_INT 46
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: IN
48932: IFFALSE 48953
// points := [ 32 , 120 , 70 ] ;
48934: LD_ADDR_VAR 0 9
48938: PUSH
48939: LD_INT 32
48941: PUSH
48942: LD_INT 120
48944: PUSH
48945: LD_INT 70
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: LIST
48952: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48953: LD_VAR 0 6
48957: PPUSH
48958: CALL_OW 264
48962: PUSH
48963: LD_INT 7
48965: PUSH
48966: LD_INT 28
48968: PUSH
48969: LD_INT 45
48971: PUSH
48972: LD_INT 92
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: IN
48981: IFFALSE 49002
// points := [ 35 , 20 , 45 ] ;
48983: LD_ADDR_VAR 0 9
48987: PUSH
48988: LD_INT 35
48990: PUSH
48991: LD_INT 20
48993: PUSH
48994: LD_INT 45
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: LIST
49001: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
49002: LD_VAR 0 6
49006: PPUSH
49007: CALL_OW 264
49011: PUSH
49012: LD_INT 47
49014: PUSH
49015: EMPTY
49016: LIST
49017: IN
49018: IFFALSE 49039
// points := [ 67 , 45 , 75 ] ;
49020: LD_ADDR_VAR 0 9
49024: PUSH
49025: LD_INT 67
49027: PUSH
49028: LD_INT 45
49030: PUSH
49031: LD_INT 75
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: LIST
49038: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
49039: LD_VAR 0 6
49043: PPUSH
49044: CALL_OW 264
49048: PUSH
49049: LD_INT 26
49051: PUSH
49052: EMPTY
49053: LIST
49054: IN
49055: IFFALSE 49076
// points := [ 120 , 30 , 80 ] ;
49057: LD_ADDR_VAR 0 9
49061: PUSH
49062: LD_INT 120
49064: PUSH
49065: LD_INT 30
49067: PUSH
49068: LD_INT 80
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: LIST
49075: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
49076: LD_VAR 0 6
49080: PPUSH
49081: CALL_OW 264
49085: PUSH
49086: LD_INT 22
49088: PUSH
49089: EMPTY
49090: LIST
49091: IN
49092: IFFALSE 49113
// points := [ 40 , 1 , 1 ] ;
49094: LD_ADDR_VAR 0 9
49098: PUSH
49099: LD_INT 40
49101: PUSH
49102: LD_INT 1
49104: PUSH
49105: LD_INT 1
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: LIST
49112: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
49113: LD_VAR 0 6
49117: PPUSH
49118: CALL_OW 264
49122: PUSH
49123: LD_INT 29
49125: PUSH
49126: EMPTY
49127: LIST
49128: IN
49129: IFFALSE 49150
// points := [ 70 , 200 , 400 ] ;
49131: LD_ADDR_VAR 0 9
49135: PUSH
49136: LD_INT 70
49138: PUSH
49139: LD_INT 200
49141: PUSH
49142: LD_INT 400
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: LIST
49149: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
49150: LD_VAR 0 6
49154: PPUSH
49155: CALL_OW 264
49159: PUSH
49160: LD_INT 14
49162: PUSH
49163: LD_INT 53
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: IN
49170: IFFALSE 49191
// points := [ 40 , 10 , 20 ] ;
49172: LD_ADDR_VAR 0 9
49176: PUSH
49177: LD_INT 40
49179: PUSH
49180: LD_INT 10
49182: PUSH
49183: LD_INT 20
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: LIST
49190: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
49191: LD_VAR 0 6
49195: PPUSH
49196: CALL_OW 264
49200: PUSH
49201: LD_INT 9
49203: PUSH
49204: EMPTY
49205: LIST
49206: IN
49207: IFFALSE 49228
// points := [ 5 , 70 , 20 ] ;
49209: LD_ADDR_VAR 0 9
49213: PUSH
49214: LD_INT 5
49216: PUSH
49217: LD_INT 70
49219: PUSH
49220: LD_INT 20
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: LIST
49227: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
49228: LD_VAR 0 6
49232: PPUSH
49233: CALL_OW 264
49237: PUSH
49238: LD_INT 10
49240: PUSH
49241: EMPTY
49242: LIST
49243: IN
49244: IFFALSE 49265
// points := [ 35 , 110 , 70 ] ;
49246: LD_ADDR_VAR 0 9
49250: PUSH
49251: LD_INT 35
49253: PUSH
49254: LD_INT 110
49256: PUSH
49257: LD_INT 70
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: LIST
49264: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
49265: LD_VAR 0 6
49269: PPUSH
49270: CALL_OW 265
49274: PUSH
49275: LD_INT 25
49277: EQUAL
49278: IFFALSE 49299
// points := [ 80 , 65 , 100 ] ;
49280: LD_ADDR_VAR 0 9
49284: PUSH
49285: LD_INT 80
49287: PUSH
49288: LD_INT 65
49290: PUSH
49291: LD_INT 100
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: LIST
49298: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
49299: LD_VAR 0 6
49303: PPUSH
49304: CALL_OW 263
49308: PUSH
49309: LD_INT 1
49311: EQUAL
49312: IFFALSE 49347
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
49314: LD_ADDR_VAR 0 10
49318: PUSH
49319: LD_VAR 0 10
49323: PUSH
49324: LD_VAR 0 6
49328: PPUSH
49329: CALL_OW 311
49333: PPUSH
49334: LD_INT 3
49336: PPUSH
49337: CALL_OW 259
49341: PUSH
49342: LD_INT 4
49344: MUL
49345: MUL
49346: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
49347: LD_VAR 0 6
49351: PPUSH
49352: CALL_OW 263
49356: PUSH
49357: LD_INT 2
49359: EQUAL
49360: IFFALSE 49411
// begin j := IsControledBy ( i ) ;
49362: LD_ADDR_VAR 0 7
49366: PUSH
49367: LD_VAR 0 6
49371: PPUSH
49372: CALL_OW 312
49376: ST_TO_ADDR
// if j then
49377: LD_VAR 0 7
49381: IFFALSE 49411
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
49383: LD_ADDR_VAR 0 10
49387: PUSH
49388: LD_VAR 0 10
49392: PUSH
49393: LD_VAR 0 7
49397: PPUSH
49398: LD_INT 3
49400: PPUSH
49401: CALL_OW 259
49405: PUSH
49406: LD_INT 3
49408: MUL
49409: MUL
49410: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
49411: LD_VAR 0 6
49415: PPUSH
49416: CALL_OW 264
49420: PUSH
49421: LD_INT 5
49423: PUSH
49424: LD_INT 6
49426: PUSH
49427: LD_INT 46
49429: PUSH
49430: LD_INT 44
49432: PUSH
49433: LD_INT 47
49435: PUSH
49436: LD_INT 45
49438: PUSH
49439: LD_INT 28
49441: PUSH
49442: LD_INT 7
49444: PUSH
49445: LD_INT 27
49447: PUSH
49448: LD_INT 29
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: IN
49463: PUSH
49464: LD_VAR 0 1
49468: PPUSH
49469: LD_INT 52
49471: PPUSH
49472: CALL_OW 321
49476: PUSH
49477: LD_INT 2
49479: EQUAL
49480: AND
49481: IFFALSE 49498
// bpoints := bpoints * 1.2 ;
49483: LD_ADDR_VAR 0 10
49487: PUSH
49488: LD_VAR 0 10
49492: PUSH
49493: LD_REAL  1.20000000000000E+0000
49496: MUL
49497: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
49498: LD_VAR 0 6
49502: PPUSH
49503: CALL_OW 264
49507: PUSH
49508: LD_INT 6
49510: PUSH
49511: LD_INT 46
49513: PUSH
49514: LD_INT 47
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: LIST
49521: IN
49522: IFFALSE 49539
// bpoints := bpoints * 1.2 ;
49524: LD_ADDR_VAR 0 10
49528: PUSH
49529: LD_VAR 0 10
49533: PUSH
49534: LD_REAL  1.20000000000000E+0000
49537: MUL
49538: ST_TO_ADDR
// end ; unit_building :
49539: GO 49553
49541: LD_INT 3
49543: DOUBLE
49544: EQUAL
49545: IFTRUE 49549
49547: GO 49552
49549: POP
// ; end ;
49550: GO 49553
49552: POP
// for j = 1 to 3 do
49553: LD_ADDR_VAR 0 7
49557: PUSH
49558: DOUBLE
49559: LD_INT 1
49561: DEC
49562: ST_TO_ADDR
49563: LD_INT 3
49565: PUSH
49566: FOR_TO
49567: IFFALSE 49620
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
49569: LD_ADDR_VAR 0 5
49573: PUSH
49574: LD_VAR 0 5
49578: PPUSH
49579: LD_VAR 0 7
49583: PPUSH
49584: LD_VAR 0 5
49588: PUSH
49589: LD_VAR 0 7
49593: ARRAY
49594: PUSH
49595: LD_VAR 0 9
49599: PUSH
49600: LD_VAR 0 7
49604: ARRAY
49605: PUSH
49606: LD_VAR 0 10
49610: MUL
49611: PLUS
49612: PPUSH
49613: CALL_OW 1
49617: ST_TO_ADDR
49618: GO 49566
49620: POP
49621: POP
// end ;
49622: GO 48101
49624: POP
49625: POP
// result := Replace ( result , 4 , tmp ) ;
49626: LD_ADDR_VAR 0 5
49630: PUSH
49631: LD_VAR 0 5
49635: PPUSH
49636: LD_INT 4
49638: PPUSH
49639: LD_VAR 0 8
49643: PPUSH
49644: CALL_OW 1
49648: ST_TO_ADDR
// end ;
49649: LD_VAR 0 5
49653: RET
// export function DangerAtRange ( unit , range ) ; begin
49654: LD_INT 0
49656: PPUSH
// if not unit then
49657: LD_VAR 0 1
49661: NOT
49662: IFFALSE 49666
// exit ;
49664: GO 49711
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
49666: LD_ADDR_VAR 0 3
49670: PUSH
49671: LD_VAR 0 1
49675: PPUSH
49676: CALL_OW 255
49680: PPUSH
49681: LD_VAR 0 1
49685: PPUSH
49686: CALL_OW 250
49690: PPUSH
49691: LD_VAR 0 1
49695: PPUSH
49696: CALL_OW 251
49700: PPUSH
49701: LD_VAR 0 2
49705: PPUSH
49706: CALL 47953 0 4
49710: ST_TO_ADDR
// end ;
49711: LD_VAR 0 3
49715: RET
// export function DangerInArea ( side , area ) ; begin
49716: LD_INT 0
49718: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
49719: LD_ADDR_VAR 0 3
49723: PUSH
49724: LD_VAR 0 2
49728: PPUSH
49729: LD_INT 81
49731: PUSH
49732: LD_VAR 0 1
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PPUSH
49741: CALL_OW 70
49745: ST_TO_ADDR
// end ;
49746: LD_VAR 0 3
49750: RET
// export function IsExtension ( b ) ; begin
49751: LD_INT 0
49753: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49754: LD_ADDR_VAR 0 2
49758: PUSH
49759: LD_VAR 0 1
49763: PUSH
49764: LD_INT 23
49766: PUSH
49767: LD_INT 20
49769: PUSH
49770: LD_INT 22
49772: PUSH
49773: LD_INT 17
49775: PUSH
49776: LD_INT 24
49778: PUSH
49779: LD_INT 21
49781: PUSH
49782: LD_INT 19
49784: PUSH
49785: LD_INT 16
49787: PUSH
49788: LD_INT 25
49790: PUSH
49791: LD_INT 18
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: IN
49806: ST_TO_ADDR
// end ;
49807: LD_VAR 0 2
49811: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49812: LD_INT 0
49814: PPUSH
49815: PPUSH
49816: PPUSH
// result := [ ] ;
49817: LD_ADDR_VAR 0 4
49821: PUSH
49822: EMPTY
49823: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49824: LD_ADDR_VAR 0 5
49828: PUSH
49829: LD_VAR 0 2
49833: PPUSH
49834: LD_INT 21
49836: PUSH
49837: LD_INT 3
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PPUSH
49844: CALL_OW 70
49848: ST_TO_ADDR
// if not tmp then
49849: LD_VAR 0 5
49853: NOT
49854: IFFALSE 49858
// exit ;
49856: GO 49922
// if checkLink then
49858: LD_VAR 0 3
49862: IFFALSE 49912
// begin for i in tmp do
49864: LD_ADDR_VAR 0 6
49868: PUSH
49869: LD_VAR 0 5
49873: PUSH
49874: FOR_IN
49875: IFFALSE 49910
// if GetBase ( i ) <> base then
49877: LD_VAR 0 6
49881: PPUSH
49882: CALL_OW 274
49886: PUSH
49887: LD_VAR 0 1
49891: NONEQUAL
49892: IFFALSE 49908
// ComLinkToBase ( base , i ) ;
49894: LD_VAR 0 1
49898: PPUSH
49899: LD_VAR 0 6
49903: PPUSH
49904: CALL_OW 169
49908: GO 49874
49910: POP
49911: POP
// end ; result := tmp ;
49912: LD_ADDR_VAR 0 4
49916: PUSH
49917: LD_VAR 0 5
49921: ST_TO_ADDR
// end ;
49922: LD_VAR 0 4
49926: RET
// export function ComComplete ( units , b ) ; var i ; begin
49927: LD_INT 0
49929: PPUSH
49930: PPUSH
// if not units then
49931: LD_VAR 0 1
49935: NOT
49936: IFFALSE 49940
// exit ;
49938: GO 50030
// for i in units do
49940: LD_ADDR_VAR 0 4
49944: PUSH
49945: LD_VAR 0 1
49949: PUSH
49950: FOR_IN
49951: IFFALSE 50028
// if BuildingStatus ( b ) = bs_build then
49953: LD_VAR 0 2
49957: PPUSH
49958: CALL_OW 461
49962: PUSH
49963: LD_INT 1
49965: EQUAL
49966: IFFALSE 50026
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49968: LD_VAR 0 4
49972: PPUSH
49973: LD_STRING h
49975: PUSH
49976: LD_VAR 0 2
49980: PPUSH
49981: CALL_OW 250
49985: PUSH
49986: LD_VAR 0 2
49990: PPUSH
49991: CALL_OW 251
49995: PUSH
49996: LD_VAR 0 2
50000: PUSH
50001: LD_INT 0
50003: PUSH
50004: LD_INT 0
50006: PUSH
50007: LD_INT 0
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: PUSH
50019: EMPTY
50020: LIST
50021: PPUSH
50022: CALL_OW 446
50026: GO 49950
50028: POP
50029: POP
// end ;
50030: LD_VAR 0 3
50034: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
50035: LD_INT 0
50037: PPUSH
50038: PPUSH
50039: PPUSH
50040: PPUSH
50041: PPUSH
50042: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
50043: LD_VAR 0 1
50047: NOT
50048: PUSH
50049: LD_VAR 0 1
50053: PPUSH
50054: CALL_OW 263
50058: PUSH
50059: LD_INT 2
50061: NONEQUAL
50062: OR
50063: IFFALSE 50067
// exit ;
50065: GO 50383
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
50067: LD_ADDR_VAR 0 6
50071: PUSH
50072: LD_INT 22
50074: PUSH
50075: LD_VAR 0 1
50079: PPUSH
50080: CALL_OW 255
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 2
50091: PUSH
50092: LD_INT 30
50094: PUSH
50095: LD_INT 36
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 34
50104: PUSH
50105: LD_INT 31
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: LIST
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PPUSH
50121: CALL_OW 69
50125: ST_TO_ADDR
// if not tmp then
50126: LD_VAR 0 6
50130: NOT
50131: IFFALSE 50135
// exit ;
50133: GO 50383
// result := [ ] ;
50135: LD_ADDR_VAR 0 2
50139: PUSH
50140: EMPTY
50141: ST_TO_ADDR
// for i in tmp do
50142: LD_ADDR_VAR 0 3
50146: PUSH
50147: LD_VAR 0 6
50151: PUSH
50152: FOR_IN
50153: IFFALSE 50224
// begin t := UnitsInside ( i ) ;
50155: LD_ADDR_VAR 0 4
50159: PUSH
50160: LD_VAR 0 3
50164: PPUSH
50165: CALL_OW 313
50169: ST_TO_ADDR
// if t then
50170: LD_VAR 0 4
50174: IFFALSE 50222
// for j in t do
50176: LD_ADDR_VAR 0 7
50180: PUSH
50181: LD_VAR 0 4
50185: PUSH
50186: FOR_IN
50187: IFFALSE 50220
// result := Replace ( result , result + 1 , j ) ;
50189: LD_ADDR_VAR 0 2
50193: PUSH
50194: LD_VAR 0 2
50198: PPUSH
50199: LD_VAR 0 2
50203: PUSH
50204: LD_INT 1
50206: PLUS
50207: PPUSH
50208: LD_VAR 0 7
50212: PPUSH
50213: CALL_OW 1
50217: ST_TO_ADDR
50218: GO 50186
50220: POP
50221: POP
// end ;
50222: GO 50152
50224: POP
50225: POP
// if not result then
50226: LD_VAR 0 2
50230: NOT
50231: IFFALSE 50235
// exit ;
50233: GO 50383
// mech := result [ 1 ] ;
50235: LD_ADDR_VAR 0 5
50239: PUSH
50240: LD_VAR 0 2
50244: PUSH
50245: LD_INT 1
50247: ARRAY
50248: ST_TO_ADDR
// if result > 1 then
50249: LD_VAR 0 2
50253: PUSH
50254: LD_INT 1
50256: GREATER
50257: IFFALSE 50369
// begin for i = 2 to result do
50259: LD_ADDR_VAR 0 3
50263: PUSH
50264: DOUBLE
50265: LD_INT 2
50267: DEC
50268: ST_TO_ADDR
50269: LD_VAR 0 2
50273: PUSH
50274: FOR_TO
50275: IFFALSE 50367
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
50277: LD_ADDR_VAR 0 4
50281: PUSH
50282: LD_VAR 0 2
50286: PUSH
50287: LD_VAR 0 3
50291: ARRAY
50292: PPUSH
50293: LD_INT 3
50295: PPUSH
50296: CALL_OW 259
50300: PUSH
50301: LD_VAR 0 2
50305: PUSH
50306: LD_VAR 0 3
50310: ARRAY
50311: PPUSH
50312: CALL_OW 432
50316: MINUS
50317: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
50318: LD_VAR 0 4
50322: PUSH
50323: LD_VAR 0 5
50327: PPUSH
50328: LD_INT 3
50330: PPUSH
50331: CALL_OW 259
50335: PUSH
50336: LD_VAR 0 5
50340: PPUSH
50341: CALL_OW 432
50345: MINUS
50346: GREATEREQUAL
50347: IFFALSE 50365
// mech := result [ i ] ;
50349: LD_ADDR_VAR 0 5
50353: PUSH
50354: LD_VAR 0 2
50358: PUSH
50359: LD_VAR 0 3
50363: ARRAY
50364: ST_TO_ADDR
// end ;
50365: GO 50274
50367: POP
50368: POP
// end ; ComLinkTo ( vehicle , mech ) ;
50369: LD_VAR 0 1
50373: PPUSH
50374: LD_VAR 0 5
50378: PPUSH
50379: CALL_OW 135
// end ;
50383: LD_VAR 0 2
50387: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
50388: LD_INT 0
50390: PPUSH
50391: PPUSH
50392: PPUSH
50393: PPUSH
50394: PPUSH
50395: PPUSH
50396: PPUSH
50397: PPUSH
50398: PPUSH
50399: PPUSH
50400: PPUSH
50401: PPUSH
50402: PPUSH
// result := [ ] ;
50403: LD_ADDR_VAR 0 7
50407: PUSH
50408: EMPTY
50409: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
50410: LD_VAR 0 1
50414: PPUSH
50415: CALL_OW 266
50419: PUSH
50420: LD_INT 0
50422: PUSH
50423: LD_INT 1
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: IN
50430: NOT
50431: IFFALSE 50435
// exit ;
50433: GO 52069
// if name then
50435: LD_VAR 0 3
50439: IFFALSE 50455
// SetBName ( base_dep , name ) ;
50441: LD_VAR 0 1
50445: PPUSH
50446: LD_VAR 0 3
50450: PPUSH
50451: CALL_OW 500
// base := GetBase ( base_dep ) ;
50455: LD_ADDR_VAR 0 15
50459: PUSH
50460: LD_VAR 0 1
50464: PPUSH
50465: CALL_OW 274
50469: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
50470: LD_ADDR_VAR 0 16
50474: PUSH
50475: LD_VAR 0 1
50479: PPUSH
50480: CALL_OW 255
50484: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
50485: LD_ADDR_VAR 0 17
50489: PUSH
50490: LD_VAR 0 1
50494: PPUSH
50495: CALL_OW 248
50499: ST_TO_ADDR
// if sources then
50500: LD_VAR 0 5
50504: IFFALSE 50551
// for i = 1 to 3 do
50506: LD_ADDR_VAR 0 8
50510: PUSH
50511: DOUBLE
50512: LD_INT 1
50514: DEC
50515: ST_TO_ADDR
50516: LD_INT 3
50518: PUSH
50519: FOR_TO
50520: IFFALSE 50549
// AddResourceType ( base , i , sources [ i ] ) ;
50522: LD_VAR 0 15
50526: PPUSH
50527: LD_VAR 0 8
50531: PPUSH
50532: LD_VAR 0 5
50536: PUSH
50537: LD_VAR 0 8
50541: ARRAY
50542: PPUSH
50543: CALL_OW 276
50547: GO 50519
50549: POP
50550: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
50551: LD_ADDR_VAR 0 18
50555: PUSH
50556: LD_VAR 0 15
50560: PPUSH
50561: LD_VAR 0 2
50565: PPUSH
50566: LD_INT 1
50568: PPUSH
50569: CALL 49812 0 3
50573: ST_TO_ADDR
// InitHc ;
50574: CALL_OW 19
// InitUc ;
50578: CALL_OW 18
// uc_side := side ;
50582: LD_ADDR_OWVAR 20
50586: PUSH
50587: LD_VAR 0 16
50591: ST_TO_ADDR
// uc_nation := nation ;
50592: LD_ADDR_OWVAR 21
50596: PUSH
50597: LD_VAR 0 17
50601: ST_TO_ADDR
// if buildings then
50602: LD_VAR 0 18
50606: IFFALSE 51928
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
50608: LD_ADDR_VAR 0 19
50612: PUSH
50613: LD_VAR 0 18
50617: PPUSH
50618: LD_INT 2
50620: PUSH
50621: LD_INT 30
50623: PUSH
50624: LD_INT 29
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 30
50633: PUSH
50634: LD_INT 30
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: LIST
50645: PPUSH
50646: CALL_OW 72
50650: ST_TO_ADDR
// if tmp then
50651: LD_VAR 0 19
50655: IFFALSE 50703
// for i in tmp do
50657: LD_ADDR_VAR 0 8
50661: PUSH
50662: LD_VAR 0 19
50666: PUSH
50667: FOR_IN
50668: IFFALSE 50701
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
50670: LD_VAR 0 8
50674: PPUSH
50675: CALL_OW 250
50679: PPUSH
50680: LD_VAR 0 8
50684: PPUSH
50685: CALL_OW 251
50689: PPUSH
50690: LD_VAR 0 16
50694: PPUSH
50695: CALL_OW 441
50699: GO 50667
50701: POP
50702: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
50703: LD_VAR 0 18
50707: PPUSH
50708: LD_INT 2
50710: PUSH
50711: LD_INT 30
50713: PUSH
50714: LD_INT 32
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 30
50723: PUSH
50724: LD_INT 33
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: LIST
50735: PPUSH
50736: CALL_OW 72
50740: IFFALSE 50828
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
50742: LD_ADDR_VAR 0 8
50746: PUSH
50747: LD_VAR 0 18
50751: PPUSH
50752: LD_INT 2
50754: PUSH
50755: LD_INT 30
50757: PUSH
50758: LD_INT 32
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 30
50767: PUSH
50768: LD_INT 33
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: LIST
50779: PPUSH
50780: CALL_OW 72
50784: PUSH
50785: FOR_IN
50786: IFFALSE 50826
// begin if not GetBWeapon ( i ) then
50788: LD_VAR 0 8
50792: PPUSH
50793: CALL_OW 269
50797: NOT
50798: IFFALSE 50824
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50800: LD_VAR 0 8
50804: PPUSH
50805: LD_VAR 0 8
50809: PPUSH
50810: LD_VAR 0 2
50814: PPUSH
50815: CALL 52074 0 2
50819: PPUSH
50820: CALL_OW 431
// end ;
50824: GO 50785
50826: POP
50827: POP
// end ; for i = 1 to personel do
50828: LD_ADDR_VAR 0 8
50832: PUSH
50833: DOUBLE
50834: LD_INT 1
50836: DEC
50837: ST_TO_ADDR
50838: LD_VAR 0 6
50842: PUSH
50843: FOR_TO
50844: IFFALSE 51908
// begin if i > 4 then
50846: LD_VAR 0 8
50850: PUSH
50851: LD_INT 4
50853: GREATER
50854: IFFALSE 50858
// break ;
50856: GO 51908
// case i of 1 :
50858: LD_VAR 0 8
50862: PUSH
50863: LD_INT 1
50865: DOUBLE
50866: EQUAL
50867: IFTRUE 50871
50869: GO 50951
50871: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50872: LD_ADDR_VAR 0 12
50876: PUSH
50877: LD_VAR 0 18
50881: PPUSH
50882: LD_INT 22
50884: PUSH
50885: LD_VAR 0 16
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 58
50896: PUSH
50897: EMPTY
50898: LIST
50899: PUSH
50900: LD_INT 2
50902: PUSH
50903: LD_INT 30
50905: PUSH
50906: LD_INT 32
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 30
50915: PUSH
50916: LD_INT 4
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 30
50925: PUSH
50926: LD_INT 5
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: LIST
50943: PPUSH
50944: CALL_OW 72
50948: ST_TO_ADDR
50949: GO 51173
50951: LD_INT 2
50953: DOUBLE
50954: EQUAL
50955: IFTRUE 50959
50957: GO 51021
50959: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50960: LD_ADDR_VAR 0 12
50964: PUSH
50965: LD_VAR 0 18
50969: PPUSH
50970: LD_INT 22
50972: PUSH
50973: LD_VAR 0 16
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 2
50984: PUSH
50985: LD_INT 30
50987: PUSH
50988: LD_INT 0
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 30
50997: PUSH
50998: LD_INT 1
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: LIST
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PPUSH
51014: CALL_OW 72
51018: ST_TO_ADDR
51019: GO 51173
51021: LD_INT 3
51023: DOUBLE
51024: EQUAL
51025: IFTRUE 51029
51027: GO 51091
51029: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
51030: LD_ADDR_VAR 0 12
51034: PUSH
51035: LD_VAR 0 18
51039: PPUSH
51040: LD_INT 22
51042: PUSH
51043: LD_VAR 0 16
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 2
51054: PUSH
51055: LD_INT 30
51057: PUSH
51058: LD_INT 2
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 30
51067: PUSH
51068: LD_INT 3
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: LIST
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PPUSH
51084: CALL_OW 72
51088: ST_TO_ADDR
51089: GO 51173
51091: LD_INT 4
51093: DOUBLE
51094: EQUAL
51095: IFTRUE 51099
51097: GO 51172
51099: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
51100: LD_ADDR_VAR 0 12
51104: PUSH
51105: LD_VAR 0 18
51109: PPUSH
51110: LD_INT 22
51112: PUSH
51113: LD_VAR 0 16
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 2
51124: PUSH
51125: LD_INT 30
51127: PUSH
51128: LD_INT 6
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 30
51137: PUSH
51138: LD_INT 7
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 30
51147: PUSH
51148: LD_INT 8
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PPUSH
51165: CALL_OW 72
51169: ST_TO_ADDR
51170: GO 51173
51172: POP
// if i = 1 then
51173: LD_VAR 0 8
51177: PUSH
51178: LD_INT 1
51180: EQUAL
51181: IFFALSE 51292
// begin tmp := [ ] ;
51183: LD_ADDR_VAR 0 19
51187: PUSH
51188: EMPTY
51189: ST_TO_ADDR
// for j in f do
51190: LD_ADDR_VAR 0 9
51194: PUSH
51195: LD_VAR 0 12
51199: PUSH
51200: FOR_IN
51201: IFFALSE 51274
// if GetBType ( j ) = b_bunker then
51203: LD_VAR 0 9
51207: PPUSH
51208: CALL_OW 266
51212: PUSH
51213: LD_INT 32
51215: EQUAL
51216: IFFALSE 51243
// tmp := Insert ( tmp , 1 , j ) else
51218: LD_ADDR_VAR 0 19
51222: PUSH
51223: LD_VAR 0 19
51227: PPUSH
51228: LD_INT 1
51230: PPUSH
51231: LD_VAR 0 9
51235: PPUSH
51236: CALL_OW 2
51240: ST_TO_ADDR
51241: GO 51272
// tmp := Insert ( tmp , tmp + 1 , j ) ;
51243: LD_ADDR_VAR 0 19
51247: PUSH
51248: LD_VAR 0 19
51252: PPUSH
51253: LD_VAR 0 19
51257: PUSH
51258: LD_INT 1
51260: PLUS
51261: PPUSH
51262: LD_VAR 0 9
51266: PPUSH
51267: CALL_OW 2
51271: ST_TO_ADDR
51272: GO 51200
51274: POP
51275: POP
// if tmp then
51276: LD_VAR 0 19
51280: IFFALSE 51292
// f := tmp ;
51282: LD_ADDR_VAR 0 12
51286: PUSH
51287: LD_VAR 0 19
51291: ST_TO_ADDR
// end ; x := personel [ i ] ;
51292: LD_ADDR_VAR 0 13
51296: PUSH
51297: LD_VAR 0 6
51301: PUSH
51302: LD_VAR 0 8
51306: ARRAY
51307: ST_TO_ADDR
// if x = - 1 then
51308: LD_VAR 0 13
51312: PUSH
51313: LD_INT 1
51315: NEG
51316: EQUAL
51317: IFFALSE 51526
// begin for j in f do
51319: LD_ADDR_VAR 0 9
51323: PUSH
51324: LD_VAR 0 12
51328: PUSH
51329: FOR_IN
51330: IFFALSE 51522
// repeat InitHc ;
51332: CALL_OW 19
// if GetBType ( j ) = b_barracks then
51336: LD_VAR 0 9
51340: PPUSH
51341: CALL_OW 266
51345: PUSH
51346: LD_INT 5
51348: EQUAL
51349: IFFALSE 51419
// begin if UnitsInside ( j ) < 3 then
51351: LD_VAR 0 9
51355: PPUSH
51356: CALL_OW 313
51360: PUSH
51361: LD_INT 3
51363: LESS
51364: IFFALSE 51400
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51366: LD_INT 0
51368: PPUSH
51369: LD_INT 5
51371: PUSH
51372: LD_INT 8
51374: PUSH
51375: LD_INT 9
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: LIST
51382: PUSH
51383: LD_VAR 0 17
51387: ARRAY
51388: PPUSH
51389: LD_VAR 0 4
51393: PPUSH
51394: CALL_OW 380
51398: GO 51417
// PrepareHuman ( false , i , skill ) ;
51400: LD_INT 0
51402: PPUSH
51403: LD_VAR 0 8
51407: PPUSH
51408: LD_VAR 0 4
51412: PPUSH
51413: CALL_OW 380
// end else
51417: GO 51436
// PrepareHuman ( false , i , skill ) ;
51419: LD_INT 0
51421: PPUSH
51422: LD_VAR 0 8
51426: PPUSH
51427: LD_VAR 0 4
51431: PPUSH
51432: CALL_OW 380
// un := CreateHuman ;
51436: LD_ADDR_VAR 0 14
51440: PUSH
51441: CALL_OW 44
51445: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51446: LD_ADDR_VAR 0 7
51450: PUSH
51451: LD_VAR 0 7
51455: PPUSH
51456: LD_INT 1
51458: PPUSH
51459: LD_VAR 0 14
51463: PPUSH
51464: CALL_OW 2
51468: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
51469: LD_VAR 0 14
51473: PPUSH
51474: LD_VAR 0 9
51478: PPUSH
51479: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
51483: LD_VAR 0 9
51487: PPUSH
51488: CALL_OW 313
51492: PUSH
51493: LD_INT 6
51495: EQUAL
51496: PUSH
51497: LD_VAR 0 9
51501: PPUSH
51502: CALL_OW 266
51506: PUSH
51507: LD_INT 32
51509: PUSH
51510: LD_INT 31
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: IN
51517: OR
51518: IFFALSE 51332
51520: GO 51329
51522: POP
51523: POP
// end else
51524: GO 51906
// for j = 1 to x do
51526: LD_ADDR_VAR 0 9
51530: PUSH
51531: DOUBLE
51532: LD_INT 1
51534: DEC
51535: ST_TO_ADDR
51536: LD_VAR 0 13
51540: PUSH
51541: FOR_TO
51542: IFFALSE 51904
// begin InitHc ;
51544: CALL_OW 19
// if not f then
51548: LD_VAR 0 12
51552: NOT
51553: IFFALSE 51642
// begin PrepareHuman ( false , i , skill ) ;
51555: LD_INT 0
51557: PPUSH
51558: LD_VAR 0 8
51562: PPUSH
51563: LD_VAR 0 4
51567: PPUSH
51568: CALL_OW 380
// un := CreateHuman ;
51572: LD_ADDR_VAR 0 14
51576: PUSH
51577: CALL_OW 44
51581: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51582: LD_ADDR_VAR 0 7
51586: PUSH
51587: LD_VAR 0 7
51591: PPUSH
51592: LD_INT 1
51594: PPUSH
51595: LD_VAR 0 14
51599: PPUSH
51600: CALL_OW 2
51604: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51605: LD_VAR 0 14
51609: PPUSH
51610: LD_VAR 0 1
51614: PPUSH
51615: CALL_OW 250
51619: PPUSH
51620: LD_VAR 0 1
51624: PPUSH
51625: CALL_OW 251
51629: PPUSH
51630: LD_INT 10
51632: PPUSH
51633: LD_INT 0
51635: PPUSH
51636: CALL_OW 50
// continue ;
51640: GO 51541
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
51642: LD_VAR 0 12
51646: PUSH
51647: LD_INT 1
51649: ARRAY
51650: PPUSH
51651: CALL_OW 313
51655: PUSH
51656: LD_VAR 0 12
51660: PUSH
51661: LD_INT 1
51663: ARRAY
51664: PPUSH
51665: CALL_OW 266
51669: PUSH
51670: LD_INT 32
51672: PUSH
51673: LD_INT 31
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: IN
51680: AND
51681: PUSH
51682: LD_VAR 0 12
51686: PUSH
51687: LD_INT 1
51689: ARRAY
51690: PPUSH
51691: CALL_OW 313
51695: PUSH
51696: LD_INT 6
51698: EQUAL
51699: OR
51700: IFFALSE 51720
// f := Delete ( f , 1 ) ;
51702: LD_ADDR_VAR 0 12
51706: PUSH
51707: LD_VAR 0 12
51711: PPUSH
51712: LD_INT 1
51714: PPUSH
51715: CALL_OW 3
51719: ST_TO_ADDR
// if not f then
51720: LD_VAR 0 12
51724: NOT
51725: IFFALSE 51743
// begin x := x + 2 ;
51727: LD_ADDR_VAR 0 13
51731: PUSH
51732: LD_VAR 0 13
51736: PUSH
51737: LD_INT 2
51739: PLUS
51740: ST_TO_ADDR
// continue ;
51741: GO 51541
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
51743: LD_VAR 0 12
51747: PUSH
51748: LD_INT 1
51750: ARRAY
51751: PPUSH
51752: CALL_OW 266
51756: PUSH
51757: LD_INT 5
51759: EQUAL
51760: IFFALSE 51834
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51762: LD_VAR 0 12
51766: PUSH
51767: LD_INT 1
51769: ARRAY
51770: PPUSH
51771: CALL_OW 313
51775: PUSH
51776: LD_INT 3
51778: LESS
51779: IFFALSE 51815
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51781: LD_INT 0
51783: PPUSH
51784: LD_INT 5
51786: PUSH
51787: LD_INT 8
51789: PUSH
51790: LD_INT 9
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: LIST
51797: PUSH
51798: LD_VAR 0 17
51802: ARRAY
51803: PPUSH
51804: LD_VAR 0 4
51808: PPUSH
51809: CALL_OW 380
51813: GO 51832
// PrepareHuman ( false , i , skill ) ;
51815: LD_INT 0
51817: PPUSH
51818: LD_VAR 0 8
51822: PPUSH
51823: LD_VAR 0 4
51827: PPUSH
51828: CALL_OW 380
// end else
51832: GO 51851
// PrepareHuman ( false , i , skill ) ;
51834: LD_INT 0
51836: PPUSH
51837: LD_VAR 0 8
51841: PPUSH
51842: LD_VAR 0 4
51846: PPUSH
51847: CALL_OW 380
// un := CreateHuman ;
51851: LD_ADDR_VAR 0 14
51855: PUSH
51856: CALL_OW 44
51860: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51861: LD_ADDR_VAR 0 7
51865: PUSH
51866: LD_VAR 0 7
51870: PPUSH
51871: LD_INT 1
51873: PPUSH
51874: LD_VAR 0 14
51878: PPUSH
51879: CALL_OW 2
51883: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51884: LD_VAR 0 14
51888: PPUSH
51889: LD_VAR 0 12
51893: PUSH
51894: LD_INT 1
51896: ARRAY
51897: PPUSH
51898: CALL_OW 52
// end ;
51902: GO 51541
51904: POP
51905: POP
// end ;
51906: GO 50843
51908: POP
51909: POP
// result := result ^ buildings ;
51910: LD_ADDR_VAR 0 7
51914: PUSH
51915: LD_VAR 0 7
51919: PUSH
51920: LD_VAR 0 18
51924: ADD
51925: ST_TO_ADDR
// end else
51926: GO 52069
// begin for i = 1 to personel do
51928: LD_ADDR_VAR 0 8
51932: PUSH
51933: DOUBLE
51934: LD_INT 1
51936: DEC
51937: ST_TO_ADDR
51938: LD_VAR 0 6
51942: PUSH
51943: FOR_TO
51944: IFFALSE 52067
// begin if i > 4 then
51946: LD_VAR 0 8
51950: PUSH
51951: LD_INT 4
51953: GREATER
51954: IFFALSE 51958
// break ;
51956: GO 52067
// x := personel [ i ] ;
51958: LD_ADDR_VAR 0 13
51962: PUSH
51963: LD_VAR 0 6
51967: PUSH
51968: LD_VAR 0 8
51972: ARRAY
51973: ST_TO_ADDR
// if x = - 1 then
51974: LD_VAR 0 13
51978: PUSH
51979: LD_INT 1
51981: NEG
51982: EQUAL
51983: IFFALSE 51987
// continue ;
51985: GO 51943
// PrepareHuman ( false , i , skill ) ;
51987: LD_INT 0
51989: PPUSH
51990: LD_VAR 0 8
51994: PPUSH
51995: LD_VAR 0 4
51999: PPUSH
52000: CALL_OW 380
// un := CreateHuman ;
52004: LD_ADDR_VAR 0 14
52008: PUSH
52009: CALL_OW 44
52013: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
52014: LD_VAR 0 14
52018: PPUSH
52019: LD_VAR 0 1
52023: PPUSH
52024: CALL_OW 250
52028: PPUSH
52029: LD_VAR 0 1
52033: PPUSH
52034: CALL_OW 251
52038: PPUSH
52039: LD_INT 10
52041: PPUSH
52042: LD_INT 0
52044: PPUSH
52045: CALL_OW 50
// result := result ^ un ;
52049: LD_ADDR_VAR 0 7
52053: PUSH
52054: LD_VAR 0 7
52058: PUSH
52059: LD_VAR 0 14
52063: ADD
52064: ST_TO_ADDR
// end ;
52065: GO 51943
52067: POP
52068: POP
// end ; end ;
52069: LD_VAR 0 7
52073: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
52074: LD_INT 0
52076: PPUSH
52077: PPUSH
52078: PPUSH
52079: PPUSH
52080: PPUSH
52081: PPUSH
52082: PPUSH
52083: PPUSH
52084: PPUSH
52085: PPUSH
52086: PPUSH
52087: PPUSH
52088: PPUSH
52089: PPUSH
52090: PPUSH
52091: PPUSH
// result := false ;
52092: LD_ADDR_VAR 0 3
52096: PUSH
52097: LD_INT 0
52099: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
52100: LD_VAR 0 1
52104: NOT
52105: PUSH
52106: LD_VAR 0 1
52110: PPUSH
52111: CALL_OW 266
52115: PUSH
52116: LD_INT 32
52118: PUSH
52119: LD_INT 33
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: IN
52126: NOT
52127: OR
52128: IFFALSE 52132
// exit ;
52130: GO 53241
// nat := GetNation ( tower ) ;
52132: LD_ADDR_VAR 0 12
52136: PUSH
52137: LD_VAR 0 1
52141: PPUSH
52142: CALL_OW 248
52146: ST_TO_ADDR
// side := GetSide ( tower ) ;
52147: LD_ADDR_VAR 0 16
52151: PUSH
52152: LD_VAR 0 1
52156: PPUSH
52157: CALL_OW 255
52161: ST_TO_ADDR
// x := GetX ( tower ) ;
52162: LD_ADDR_VAR 0 10
52166: PUSH
52167: LD_VAR 0 1
52171: PPUSH
52172: CALL_OW 250
52176: ST_TO_ADDR
// y := GetY ( tower ) ;
52177: LD_ADDR_VAR 0 11
52181: PUSH
52182: LD_VAR 0 1
52186: PPUSH
52187: CALL_OW 251
52191: ST_TO_ADDR
// if not x or not y then
52192: LD_VAR 0 10
52196: NOT
52197: PUSH
52198: LD_VAR 0 11
52202: NOT
52203: OR
52204: IFFALSE 52208
// exit ;
52206: GO 53241
// weapon := 0 ;
52208: LD_ADDR_VAR 0 18
52212: PUSH
52213: LD_INT 0
52215: ST_TO_ADDR
// fac_list := [ ] ;
52216: LD_ADDR_VAR 0 17
52220: PUSH
52221: EMPTY
52222: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
52223: LD_ADDR_VAR 0 6
52227: PUSH
52228: LD_VAR 0 1
52232: PPUSH
52233: CALL_OW 274
52237: PPUSH
52238: LD_VAR 0 2
52242: PPUSH
52243: LD_INT 0
52245: PPUSH
52246: CALL 49812 0 3
52250: PPUSH
52251: LD_INT 30
52253: PUSH
52254: LD_INT 3
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PPUSH
52261: CALL_OW 72
52265: ST_TO_ADDR
// if not factories then
52266: LD_VAR 0 6
52270: NOT
52271: IFFALSE 52275
// exit ;
52273: GO 53241
// for i in factories do
52275: LD_ADDR_VAR 0 8
52279: PUSH
52280: LD_VAR 0 6
52284: PUSH
52285: FOR_IN
52286: IFFALSE 52311
// fac_list := fac_list union AvailableWeaponList ( i ) ;
52288: LD_ADDR_VAR 0 17
52292: PUSH
52293: LD_VAR 0 17
52297: PUSH
52298: LD_VAR 0 8
52302: PPUSH
52303: CALL_OW 478
52307: UNION
52308: ST_TO_ADDR
52309: GO 52285
52311: POP
52312: POP
// if not fac_list then
52313: LD_VAR 0 17
52317: NOT
52318: IFFALSE 52322
// exit ;
52320: GO 53241
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
52322: LD_ADDR_VAR 0 5
52326: PUSH
52327: LD_INT 4
52329: PUSH
52330: LD_INT 5
52332: PUSH
52333: LD_INT 9
52335: PUSH
52336: LD_INT 10
52338: PUSH
52339: LD_INT 6
52341: PUSH
52342: LD_INT 7
52344: PUSH
52345: LD_INT 11
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 27
52359: PUSH
52360: LD_INT 28
52362: PUSH
52363: LD_INT 26
52365: PUSH
52366: LD_INT 30
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 43
52377: PUSH
52378: LD_INT 44
52380: PUSH
52381: LD_INT 46
52383: PUSH
52384: LD_INT 45
52386: PUSH
52387: LD_INT 47
52389: PUSH
52390: LD_INT 49
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: LIST
52405: PUSH
52406: LD_VAR 0 12
52410: ARRAY
52411: ST_TO_ADDR
// list := list isect fac_list ;
52412: LD_ADDR_VAR 0 5
52416: PUSH
52417: LD_VAR 0 5
52421: PUSH
52422: LD_VAR 0 17
52426: ISECT
52427: ST_TO_ADDR
// if not list then
52428: LD_VAR 0 5
52432: NOT
52433: IFFALSE 52437
// exit ;
52435: GO 53241
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
52437: LD_VAR 0 12
52441: PUSH
52442: LD_INT 3
52444: EQUAL
52445: PUSH
52446: LD_INT 49
52448: PUSH
52449: LD_VAR 0 5
52453: IN
52454: AND
52455: PUSH
52456: LD_INT 31
52458: PPUSH
52459: LD_VAR 0 16
52463: PPUSH
52464: CALL_OW 321
52468: PUSH
52469: LD_INT 2
52471: EQUAL
52472: AND
52473: IFFALSE 52533
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
52475: LD_INT 22
52477: PUSH
52478: LD_VAR 0 16
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 35
52489: PUSH
52490: LD_INT 49
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 91
52499: PUSH
52500: LD_VAR 0 1
52504: PUSH
52505: LD_INT 10
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: LIST
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: LIST
52517: PPUSH
52518: CALL_OW 69
52522: NOT
52523: IFFALSE 52533
// weapon := ru_time_lapser ;
52525: LD_ADDR_VAR 0 18
52529: PUSH
52530: LD_INT 49
52532: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
52533: LD_VAR 0 12
52537: PUSH
52538: LD_INT 1
52540: PUSH
52541: LD_INT 2
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: IN
52548: PUSH
52549: LD_INT 11
52551: PUSH
52552: LD_VAR 0 5
52556: IN
52557: PUSH
52558: LD_INT 30
52560: PUSH
52561: LD_VAR 0 5
52565: IN
52566: OR
52567: AND
52568: PUSH
52569: LD_INT 6
52571: PPUSH
52572: LD_VAR 0 16
52576: PPUSH
52577: CALL_OW 321
52581: PUSH
52582: LD_INT 2
52584: EQUAL
52585: AND
52586: IFFALSE 52751
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
52588: LD_INT 22
52590: PUSH
52591: LD_VAR 0 16
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 2
52602: PUSH
52603: LD_INT 35
52605: PUSH
52606: LD_INT 11
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 35
52615: PUSH
52616: LD_INT 30
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 91
52630: PUSH
52631: LD_VAR 0 1
52635: PUSH
52636: LD_INT 18
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: LIST
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: LIST
52648: PPUSH
52649: CALL_OW 69
52653: NOT
52654: PUSH
52655: LD_INT 22
52657: PUSH
52658: LD_VAR 0 16
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 2
52669: PUSH
52670: LD_INT 30
52672: PUSH
52673: LD_INT 32
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 30
52682: PUSH
52683: LD_INT 33
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 91
52697: PUSH
52698: LD_VAR 0 1
52702: PUSH
52703: LD_INT 12
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: LIST
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: LIST
52715: PUSH
52716: EMPTY
52717: LIST
52718: PPUSH
52719: CALL_OW 69
52723: PUSH
52724: LD_INT 2
52726: GREATER
52727: AND
52728: IFFALSE 52751
// weapon := [ us_radar , ar_radar ] [ nat ] ;
52730: LD_ADDR_VAR 0 18
52734: PUSH
52735: LD_INT 11
52737: PUSH
52738: LD_INT 30
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_VAR 0 12
52749: ARRAY
52750: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52751: LD_VAR 0 18
52755: NOT
52756: PUSH
52757: LD_INT 40
52759: PPUSH
52760: LD_VAR 0 16
52764: PPUSH
52765: CALL_OW 321
52769: PUSH
52770: LD_INT 2
52772: EQUAL
52773: AND
52774: PUSH
52775: LD_INT 7
52777: PUSH
52778: LD_VAR 0 5
52782: IN
52783: PUSH
52784: LD_INT 28
52786: PUSH
52787: LD_VAR 0 5
52791: IN
52792: OR
52793: PUSH
52794: LD_INT 45
52796: PUSH
52797: LD_VAR 0 5
52801: IN
52802: OR
52803: AND
52804: IFFALSE 53058
// begin hex := GetHexInfo ( x , y ) ;
52806: LD_ADDR_VAR 0 4
52810: PUSH
52811: LD_VAR 0 10
52815: PPUSH
52816: LD_VAR 0 11
52820: PPUSH
52821: CALL_OW 546
52825: ST_TO_ADDR
// if hex [ 1 ] then
52826: LD_VAR 0 4
52830: PUSH
52831: LD_INT 1
52833: ARRAY
52834: IFFALSE 52838
// exit ;
52836: GO 53241
// height := hex [ 2 ] ;
52838: LD_ADDR_VAR 0 15
52842: PUSH
52843: LD_VAR 0 4
52847: PUSH
52848: LD_INT 2
52850: ARRAY
52851: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52852: LD_ADDR_VAR 0 14
52856: PUSH
52857: LD_INT 0
52859: PUSH
52860: LD_INT 2
52862: PUSH
52863: LD_INT 3
52865: PUSH
52866: LD_INT 5
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: ST_TO_ADDR
// for i in tmp do
52875: LD_ADDR_VAR 0 8
52879: PUSH
52880: LD_VAR 0 14
52884: PUSH
52885: FOR_IN
52886: IFFALSE 53056
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52888: LD_ADDR_VAR 0 9
52892: PUSH
52893: LD_VAR 0 10
52897: PPUSH
52898: LD_VAR 0 8
52902: PPUSH
52903: LD_INT 5
52905: PPUSH
52906: CALL_OW 272
52910: PUSH
52911: LD_VAR 0 11
52915: PPUSH
52916: LD_VAR 0 8
52920: PPUSH
52921: LD_INT 5
52923: PPUSH
52924: CALL_OW 273
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52933: LD_VAR 0 9
52937: PUSH
52938: LD_INT 1
52940: ARRAY
52941: PPUSH
52942: LD_VAR 0 9
52946: PUSH
52947: LD_INT 2
52949: ARRAY
52950: PPUSH
52951: CALL_OW 488
52955: IFFALSE 53054
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52957: LD_ADDR_VAR 0 4
52961: PUSH
52962: LD_VAR 0 9
52966: PUSH
52967: LD_INT 1
52969: ARRAY
52970: PPUSH
52971: LD_VAR 0 9
52975: PUSH
52976: LD_INT 2
52978: ARRAY
52979: PPUSH
52980: CALL_OW 546
52984: ST_TO_ADDR
// if hex [ 1 ] then
52985: LD_VAR 0 4
52989: PUSH
52990: LD_INT 1
52992: ARRAY
52993: IFFALSE 52997
// continue ;
52995: GO 52885
// h := hex [ 2 ] ;
52997: LD_ADDR_VAR 0 13
53001: PUSH
53002: LD_VAR 0 4
53006: PUSH
53007: LD_INT 2
53009: ARRAY
53010: ST_TO_ADDR
// if h + 7 < height then
53011: LD_VAR 0 13
53015: PUSH
53016: LD_INT 7
53018: PLUS
53019: PUSH
53020: LD_VAR 0 15
53024: LESS
53025: IFFALSE 53054
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
53027: LD_ADDR_VAR 0 18
53031: PUSH
53032: LD_INT 7
53034: PUSH
53035: LD_INT 28
53037: PUSH
53038: LD_INT 45
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: LIST
53045: PUSH
53046: LD_VAR 0 12
53050: ARRAY
53051: ST_TO_ADDR
// break ;
53052: GO 53056
// end ; end ; end ;
53054: GO 52885
53056: POP
53057: POP
// end ; if not weapon then
53058: LD_VAR 0 18
53062: NOT
53063: IFFALSE 53123
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
53065: LD_ADDR_VAR 0 5
53069: PUSH
53070: LD_VAR 0 5
53074: PUSH
53075: LD_INT 11
53077: PUSH
53078: LD_INT 30
53080: PUSH
53081: LD_INT 49
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: LIST
53088: DIFF
53089: ST_TO_ADDR
// if not list then
53090: LD_VAR 0 5
53094: NOT
53095: IFFALSE 53099
// exit ;
53097: GO 53241
// weapon := list [ rand ( 1 , list ) ] ;
53099: LD_ADDR_VAR 0 18
53103: PUSH
53104: LD_VAR 0 5
53108: PUSH
53109: LD_INT 1
53111: PPUSH
53112: LD_VAR 0 5
53116: PPUSH
53117: CALL_OW 12
53121: ARRAY
53122: ST_TO_ADDR
// end ; if weapon then
53123: LD_VAR 0 18
53127: IFFALSE 53241
// begin tmp := CostOfWeapon ( weapon ) ;
53129: LD_ADDR_VAR 0 14
53133: PUSH
53134: LD_VAR 0 18
53138: PPUSH
53139: CALL_OW 451
53143: ST_TO_ADDR
// j := GetBase ( tower ) ;
53144: LD_ADDR_VAR 0 9
53148: PUSH
53149: LD_VAR 0 1
53153: PPUSH
53154: CALL_OW 274
53158: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
53159: LD_VAR 0 9
53163: PPUSH
53164: LD_INT 1
53166: PPUSH
53167: CALL_OW 275
53171: PUSH
53172: LD_VAR 0 14
53176: PUSH
53177: LD_INT 1
53179: ARRAY
53180: GREATEREQUAL
53181: PUSH
53182: LD_VAR 0 9
53186: PPUSH
53187: LD_INT 2
53189: PPUSH
53190: CALL_OW 275
53194: PUSH
53195: LD_VAR 0 14
53199: PUSH
53200: LD_INT 2
53202: ARRAY
53203: GREATEREQUAL
53204: AND
53205: PUSH
53206: LD_VAR 0 9
53210: PPUSH
53211: LD_INT 3
53213: PPUSH
53214: CALL_OW 275
53218: PUSH
53219: LD_VAR 0 14
53223: PUSH
53224: LD_INT 3
53226: ARRAY
53227: GREATEREQUAL
53228: AND
53229: IFFALSE 53241
// result := weapon ;
53231: LD_ADDR_VAR 0 3
53235: PUSH
53236: LD_VAR 0 18
53240: ST_TO_ADDR
// end ; end ;
53241: LD_VAR 0 3
53245: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
53246: LD_INT 0
53248: PPUSH
53249: PPUSH
// result := true ;
53250: LD_ADDR_VAR 0 3
53254: PUSH
53255: LD_INT 1
53257: ST_TO_ADDR
// if array1 = array2 then
53258: LD_VAR 0 1
53262: PUSH
53263: LD_VAR 0 2
53267: EQUAL
53268: IFFALSE 53328
// begin for i = 1 to array1 do
53270: LD_ADDR_VAR 0 4
53274: PUSH
53275: DOUBLE
53276: LD_INT 1
53278: DEC
53279: ST_TO_ADDR
53280: LD_VAR 0 1
53284: PUSH
53285: FOR_TO
53286: IFFALSE 53324
// if array1 [ i ] <> array2 [ i ] then
53288: LD_VAR 0 1
53292: PUSH
53293: LD_VAR 0 4
53297: ARRAY
53298: PUSH
53299: LD_VAR 0 2
53303: PUSH
53304: LD_VAR 0 4
53308: ARRAY
53309: NONEQUAL
53310: IFFALSE 53322
// begin result := false ;
53312: LD_ADDR_VAR 0 3
53316: PUSH
53317: LD_INT 0
53319: ST_TO_ADDR
// break ;
53320: GO 53324
// end ;
53322: GO 53285
53324: POP
53325: POP
// end else
53326: GO 53336
// result := false ;
53328: LD_ADDR_VAR 0 3
53332: PUSH
53333: LD_INT 0
53335: ST_TO_ADDR
// end ;
53336: LD_VAR 0 3
53340: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
53341: LD_INT 0
53343: PPUSH
53344: PPUSH
// if not array1 or not array2 then
53345: LD_VAR 0 1
53349: NOT
53350: PUSH
53351: LD_VAR 0 2
53355: NOT
53356: OR
53357: IFFALSE 53361
// exit ;
53359: GO 53425
// result := true ;
53361: LD_ADDR_VAR 0 3
53365: PUSH
53366: LD_INT 1
53368: ST_TO_ADDR
// for i = 1 to array1 do
53369: LD_ADDR_VAR 0 4
53373: PUSH
53374: DOUBLE
53375: LD_INT 1
53377: DEC
53378: ST_TO_ADDR
53379: LD_VAR 0 1
53383: PUSH
53384: FOR_TO
53385: IFFALSE 53423
// if array1 [ i ] <> array2 [ i ] then
53387: LD_VAR 0 1
53391: PUSH
53392: LD_VAR 0 4
53396: ARRAY
53397: PUSH
53398: LD_VAR 0 2
53402: PUSH
53403: LD_VAR 0 4
53407: ARRAY
53408: NONEQUAL
53409: IFFALSE 53421
// begin result := false ;
53411: LD_ADDR_VAR 0 3
53415: PUSH
53416: LD_INT 0
53418: ST_TO_ADDR
// break ;
53419: GO 53423
// end ;
53421: GO 53384
53423: POP
53424: POP
// end ;
53425: LD_VAR 0 3
53429: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
53430: LD_INT 0
53432: PPUSH
53433: PPUSH
53434: PPUSH
// pom := GetBase ( fac ) ;
53435: LD_ADDR_VAR 0 5
53439: PUSH
53440: LD_VAR 0 1
53444: PPUSH
53445: CALL_OW 274
53449: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
53450: LD_ADDR_VAR 0 4
53454: PUSH
53455: LD_VAR 0 2
53459: PUSH
53460: LD_INT 1
53462: ARRAY
53463: PPUSH
53464: LD_VAR 0 2
53468: PUSH
53469: LD_INT 2
53471: ARRAY
53472: PPUSH
53473: LD_VAR 0 2
53477: PUSH
53478: LD_INT 3
53480: ARRAY
53481: PPUSH
53482: LD_VAR 0 2
53486: PUSH
53487: LD_INT 4
53489: ARRAY
53490: PPUSH
53491: CALL_OW 449
53495: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53496: LD_ADDR_VAR 0 3
53500: PUSH
53501: LD_VAR 0 5
53505: PPUSH
53506: LD_INT 1
53508: PPUSH
53509: CALL_OW 275
53513: PUSH
53514: LD_VAR 0 4
53518: PUSH
53519: LD_INT 1
53521: ARRAY
53522: GREATEREQUAL
53523: PUSH
53524: LD_VAR 0 5
53528: PPUSH
53529: LD_INT 2
53531: PPUSH
53532: CALL_OW 275
53536: PUSH
53537: LD_VAR 0 4
53541: PUSH
53542: LD_INT 2
53544: ARRAY
53545: GREATEREQUAL
53546: AND
53547: PUSH
53548: LD_VAR 0 5
53552: PPUSH
53553: LD_INT 3
53555: PPUSH
53556: CALL_OW 275
53560: PUSH
53561: LD_VAR 0 4
53565: PUSH
53566: LD_INT 3
53568: ARRAY
53569: GREATEREQUAL
53570: AND
53571: ST_TO_ADDR
// end ;
53572: LD_VAR 0 3
53576: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
53577: LD_INT 0
53579: PPUSH
53580: PPUSH
53581: PPUSH
53582: PPUSH
// pom := GetBase ( building ) ;
53583: LD_ADDR_VAR 0 3
53587: PUSH
53588: LD_VAR 0 1
53592: PPUSH
53593: CALL_OW 274
53597: ST_TO_ADDR
// if not pom then
53598: LD_VAR 0 3
53602: NOT
53603: IFFALSE 53607
// exit ;
53605: GO 53777
// btype := GetBType ( building ) ;
53607: LD_ADDR_VAR 0 5
53611: PUSH
53612: LD_VAR 0 1
53616: PPUSH
53617: CALL_OW 266
53621: ST_TO_ADDR
// if btype = b_armoury then
53622: LD_VAR 0 5
53626: PUSH
53627: LD_INT 4
53629: EQUAL
53630: IFFALSE 53640
// btype := b_barracks ;
53632: LD_ADDR_VAR 0 5
53636: PUSH
53637: LD_INT 5
53639: ST_TO_ADDR
// if btype = b_depot then
53640: LD_VAR 0 5
53644: PUSH
53645: LD_INT 0
53647: EQUAL
53648: IFFALSE 53658
// btype := b_warehouse ;
53650: LD_ADDR_VAR 0 5
53654: PUSH
53655: LD_INT 1
53657: ST_TO_ADDR
// if btype = b_workshop then
53658: LD_VAR 0 5
53662: PUSH
53663: LD_INT 2
53665: EQUAL
53666: IFFALSE 53676
// btype := b_factory ;
53668: LD_ADDR_VAR 0 5
53672: PUSH
53673: LD_INT 3
53675: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53676: LD_ADDR_VAR 0 4
53680: PUSH
53681: LD_VAR 0 5
53685: PPUSH
53686: LD_VAR 0 1
53690: PPUSH
53691: CALL_OW 248
53695: PPUSH
53696: CALL_OW 450
53700: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53701: LD_ADDR_VAR 0 2
53705: PUSH
53706: LD_VAR 0 3
53710: PPUSH
53711: LD_INT 1
53713: PPUSH
53714: CALL_OW 275
53718: PUSH
53719: LD_VAR 0 4
53723: PUSH
53724: LD_INT 1
53726: ARRAY
53727: GREATEREQUAL
53728: PUSH
53729: LD_VAR 0 3
53733: PPUSH
53734: LD_INT 2
53736: PPUSH
53737: CALL_OW 275
53741: PUSH
53742: LD_VAR 0 4
53746: PUSH
53747: LD_INT 2
53749: ARRAY
53750: GREATEREQUAL
53751: AND
53752: PUSH
53753: LD_VAR 0 3
53757: PPUSH
53758: LD_INT 3
53760: PPUSH
53761: CALL_OW 275
53765: PUSH
53766: LD_VAR 0 4
53770: PUSH
53771: LD_INT 3
53773: ARRAY
53774: GREATEREQUAL
53775: AND
53776: ST_TO_ADDR
// end ;
53777: LD_VAR 0 2
53781: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
53782: LD_INT 0
53784: PPUSH
53785: PPUSH
53786: PPUSH
// pom := GetBase ( building ) ;
53787: LD_ADDR_VAR 0 4
53791: PUSH
53792: LD_VAR 0 1
53796: PPUSH
53797: CALL_OW 274
53801: ST_TO_ADDR
// if not pom then
53802: LD_VAR 0 4
53806: NOT
53807: IFFALSE 53811
// exit ;
53809: GO 53912
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53811: LD_ADDR_VAR 0 5
53815: PUSH
53816: LD_VAR 0 2
53820: PPUSH
53821: LD_VAR 0 1
53825: PPUSH
53826: CALL_OW 248
53830: PPUSH
53831: CALL_OW 450
53835: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53836: LD_ADDR_VAR 0 3
53840: PUSH
53841: LD_VAR 0 4
53845: PPUSH
53846: LD_INT 1
53848: PPUSH
53849: CALL_OW 275
53853: PUSH
53854: LD_VAR 0 5
53858: PUSH
53859: LD_INT 1
53861: ARRAY
53862: GREATEREQUAL
53863: PUSH
53864: LD_VAR 0 4
53868: PPUSH
53869: LD_INT 2
53871: PPUSH
53872: CALL_OW 275
53876: PUSH
53877: LD_VAR 0 5
53881: PUSH
53882: LD_INT 2
53884: ARRAY
53885: GREATEREQUAL
53886: AND
53887: PUSH
53888: LD_VAR 0 4
53892: PPUSH
53893: LD_INT 3
53895: PPUSH
53896: CALL_OW 275
53900: PUSH
53901: LD_VAR 0 5
53905: PUSH
53906: LD_INT 3
53908: ARRAY
53909: GREATEREQUAL
53910: AND
53911: ST_TO_ADDR
// end ;
53912: LD_VAR 0 3
53916: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53917: LD_INT 0
53919: PPUSH
53920: PPUSH
53921: PPUSH
53922: PPUSH
53923: PPUSH
53924: PPUSH
53925: PPUSH
53926: PPUSH
53927: PPUSH
53928: PPUSH
53929: PPUSH
// result := false ;
53930: LD_ADDR_VAR 0 8
53934: PUSH
53935: LD_INT 0
53937: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53938: LD_VAR 0 5
53942: NOT
53943: PUSH
53944: LD_VAR 0 1
53948: NOT
53949: OR
53950: PUSH
53951: LD_VAR 0 2
53955: NOT
53956: OR
53957: PUSH
53958: LD_VAR 0 3
53962: NOT
53963: OR
53964: IFFALSE 53968
// exit ;
53966: GO 54782
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53968: LD_ADDR_VAR 0 14
53972: PUSH
53973: LD_VAR 0 1
53977: PPUSH
53978: LD_VAR 0 2
53982: PPUSH
53983: LD_VAR 0 3
53987: PPUSH
53988: LD_VAR 0 4
53992: PPUSH
53993: LD_VAR 0 5
53997: PUSH
53998: LD_INT 1
54000: ARRAY
54001: PPUSH
54002: CALL_OW 248
54006: PPUSH
54007: LD_INT 0
54009: PPUSH
54010: CALL 56035 0 6
54014: ST_TO_ADDR
// if not hexes then
54015: LD_VAR 0 14
54019: NOT
54020: IFFALSE 54024
// exit ;
54022: GO 54782
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54024: LD_ADDR_VAR 0 17
54028: PUSH
54029: LD_VAR 0 5
54033: PPUSH
54034: LD_INT 22
54036: PUSH
54037: LD_VAR 0 13
54041: PPUSH
54042: CALL_OW 255
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 2
54053: PUSH
54054: LD_INT 30
54056: PUSH
54057: LD_INT 0
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 30
54066: PUSH
54067: LD_INT 1
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: LIST
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PPUSH
54083: CALL_OW 72
54087: ST_TO_ADDR
// for i = 1 to hexes do
54088: LD_ADDR_VAR 0 9
54092: PUSH
54093: DOUBLE
54094: LD_INT 1
54096: DEC
54097: ST_TO_ADDR
54098: LD_VAR 0 14
54102: PUSH
54103: FOR_TO
54104: IFFALSE 54780
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54106: LD_ADDR_VAR 0 13
54110: PUSH
54111: LD_VAR 0 14
54115: PUSH
54116: LD_VAR 0 9
54120: ARRAY
54121: PUSH
54122: LD_INT 1
54124: ARRAY
54125: PPUSH
54126: LD_VAR 0 14
54130: PUSH
54131: LD_VAR 0 9
54135: ARRAY
54136: PUSH
54137: LD_INT 2
54139: ARRAY
54140: PPUSH
54141: CALL_OW 428
54145: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
54146: LD_VAR 0 14
54150: PUSH
54151: LD_VAR 0 9
54155: ARRAY
54156: PUSH
54157: LD_INT 1
54159: ARRAY
54160: PPUSH
54161: LD_VAR 0 14
54165: PUSH
54166: LD_VAR 0 9
54170: ARRAY
54171: PUSH
54172: LD_INT 2
54174: ARRAY
54175: PPUSH
54176: CALL_OW 351
54180: PUSH
54181: LD_VAR 0 14
54185: PUSH
54186: LD_VAR 0 9
54190: ARRAY
54191: PUSH
54192: LD_INT 1
54194: ARRAY
54195: PPUSH
54196: LD_VAR 0 14
54200: PUSH
54201: LD_VAR 0 9
54205: ARRAY
54206: PUSH
54207: LD_INT 2
54209: ARRAY
54210: PPUSH
54211: CALL_OW 488
54215: NOT
54216: OR
54217: PUSH
54218: LD_VAR 0 13
54222: PPUSH
54223: CALL_OW 247
54227: PUSH
54228: LD_INT 3
54230: EQUAL
54231: OR
54232: IFFALSE 54238
// exit ;
54234: POP
54235: POP
54236: GO 54782
// if not tmp then
54238: LD_VAR 0 13
54242: NOT
54243: IFFALSE 54247
// continue ;
54245: GO 54103
// result := true ;
54247: LD_ADDR_VAR 0 8
54251: PUSH
54252: LD_INT 1
54254: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
54255: LD_VAR 0 6
54259: PUSH
54260: LD_VAR 0 13
54264: PPUSH
54265: CALL_OW 247
54269: PUSH
54270: LD_INT 2
54272: EQUAL
54273: AND
54274: PUSH
54275: LD_VAR 0 13
54279: PPUSH
54280: CALL_OW 263
54284: PUSH
54285: LD_INT 1
54287: EQUAL
54288: AND
54289: IFFALSE 54453
// begin if IsDrivenBy ( tmp ) then
54291: LD_VAR 0 13
54295: PPUSH
54296: CALL_OW 311
54300: IFFALSE 54304
// continue ;
54302: GO 54103
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
54304: LD_VAR 0 6
54308: PPUSH
54309: LD_INT 3
54311: PUSH
54312: LD_INT 60
54314: PUSH
54315: EMPTY
54316: LIST
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 3
54324: PUSH
54325: LD_INT 55
54327: PUSH
54328: EMPTY
54329: LIST
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PPUSH
54339: CALL_OW 72
54343: IFFALSE 54451
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
54345: LD_ADDR_VAR 0 18
54349: PUSH
54350: LD_VAR 0 6
54354: PPUSH
54355: LD_INT 3
54357: PUSH
54358: LD_INT 60
54360: PUSH
54361: EMPTY
54362: LIST
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 3
54370: PUSH
54371: LD_INT 55
54373: PUSH
54374: EMPTY
54375: LIST
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PPUSH
54385: CALL_OW 72
54389: PUSH
54390: LD_INT 1
54392: ARRAY
54393: ST_TO_ADDR
// if IsInUnit ( driver ) then
54394: LD_VAR 0 18
54398: PPUSH
54399: CALL_OW 310
54403: IFFALSE 54414
// ComExit ( driver ) ;
54405: LD_VAR 0 18
54409: PPUSH
54410: CALL 79816 0 1
// AddComEnterUnit ( driver , tmp ) ;
54414: LD_VAR 0 18
54418: PPUSH
54419: LD_VAR 0 13
54423: PPUSH
54424: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
54428: LD_VAR 0 18
54432: PPUSH
54433: LD_VAR 0 7
54437: PPUSH
54438: CALL_OW 173
// AddComExitVehicle ( driver ) ;
54442: LD_VAR 0 18
54446: PPUSH
54447: CALL_OW 181
// end ; continue ;
54451: GO 54103
// end ; if not cleaners or not tmp in cleaners then
54453: LD_VAR 0 6
54457: NOT
54458: PUSH
54459: LD_VAR 0 13
54463: PUSH
54464: LD_VAR 0 6
54468: IN
54469: NOT
54470: OR
54471: IFFALSE 54778
// begin if dep then
54473: LD_VAR 0 17
54477: IFFALSE 54613
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
54479: LD_ADDR_VAR 0 16
54483: PUSH
54484: LD_VAR 0 17
54488: PUSH
54489: LD_INT 1
54491: ARRAY
54492: PPUSH
54493: CALL_OW 250
54497: PPUSH
54498: LD_VAR 0 17
54502: PUSH
54503: LD_INT 1
54505: ARRAY
54506: PPUSH
54507: CALL_OW 254
54511: PPUSH
54512: LD_INT 5
54514: PPUSH
54515: CALL_OW 272
54519: PUSH
54520: LD_VAR 0 17
54524: PUSH
54525: LD_INT 1
54527: ARRAY
54528: PPUSH
54529: CALL_OW 251
54533: PPUSH
54534: LD_VAR 0 17
54538: PUSH
54539: LD_INT 1
54541: ARRAY
54542: PPUSH
54543: CALL_OW 254
54547: PPUSH
54548: LD_INT 5
54550: PPUSH
54551: CALL_OW 273
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
54560: LD_VAR 0 16
54564: PUSH
54565: LD_INT 1
54567: ARRAY
54568: PPUSH
54569: LD_VAR 0 16
54573: PUSH
54574: LD_INT 2
54576: ARRAY
54577: PPUSH
54578: CALL_OW 488
54582: IFFALSE 54613
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
54584: LD_VAR 0 13
54588: PPUSH
54589: LD_VAR 0 16
54593: PUSH
54594: LD_INT 1
54596: ARRAY
54597: PPUSH
54598: LD_VAR 0 16
54602: PUSH
54603: LD_INT 2
54605: ARRAY
54606: PPUSH
54607: CALL_OW 111
// continue ;
54611: GO 54103
// end ; end ; r := GetDir ( tmp ) ;
54613: LD_ADDR_VAR 0 15
54617: PUSH
54618: LD_VAR 0 13
54622: PPUSH
54623: CALL_OW 254
54627: ST_TO_ADDR
// if r = 5 then
54628: LD_VAR 0 15
54632: PUSH
54633: LD_INT 5
54635: EQUAL
54636: IFFALSE 54646
// r := 0 ;
54638: LD_ADDR_VAR 0 15
54642: PUSH
54643: LD_INT 0
54645: ST_TO_ADDR
// for j = r to 5 do
54646: LD_ADDR_VAR 0 10
54650: PUSH
54651: DOUBLE
54652: LD_VAR 0 15
54656: DEC
54657: ST_TO_ADDR
54658: LD_INT 5
54660: PUSH
54661: FOR_TO
54662: IFFALSE 54776
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
54664: LD_ADDR_VAR 0 11
54668: PUSH
54669: LD_VAR 0 13
54673: PPUSH
54674: CALL_OW 250
54678: PPUSH
54679: LD_VAR 0 10
54683: PPUSH
54684: LD_INT 2
54686: PPUSH
54687: CALL_OW 272
54691: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
54692: LD_ADDR_VAR 0 12
54696: PUSH
54697: LD_VAR 0 13
54701: PPUSH
54702: CALL_OW 251
54706: PPUSH
54707: LD_VAR 0 10
54711: PPUSH
54712: LD_INT 2
54714: PPUSH
54715: CALL_OW 273
54719: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
54720: LD_VAR 0 11
54724: PPUSH
54725: LD_VAR 0 12
54729: PPUSH
54730: CALL_OW 488
54734: PUSH
54735: LD_VAR 0 11
54739: PPUSH
54740: LD_VAR 0 12
54744: PPUSH
54745: CALL_OW 428
54749: NOT
54750: AND
54751: IFFALSE 54774
// begin ComMoveXY ( tmp , _x , _y ) ;
54753: LD_VAR 0 13
54757: PPUSH
54758: LD_VAR 0 11
54762: PPUSH
54763: LD_VAR 0 12
54767: PPUSH
54768: CALL_OW 111
// break ;
54772: GO 54776
// end ; end ;
54774: GO 54661
54776: POP
54777: POP
// end ; end ;
54778: GO 54103
54780: POP
54781: POP
// end ;
54782: LD_VAR 0 8
54786: RET
// export function BuildingTechInvented ( side , btype ) ; begin
54787: LD_INT 0
54789: PPUSH
// result := true ;
54790: LD_ADDR_VAR 0 3
54794: PUSH
54795: LD_INT 1
54797: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
54798: LD_VAR 0 2
54802: PUSH
54803: LD_INT 24
54805: DOUBLE
54806: EQUAL
54807: IFTRUE 54817
54809: LD_INT 33
54811: DOUBLE
54812: EQUAL
54813: IFTRUE 54817
54815: GO 54842
54817: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
54818: LD_ADDR_VAR 0 3
54822: PUSH
54823: LD_INT 32
54825: PPUSH
54826: LD_VAR 0 1
54830: PPUSH
54831: CALL_OW 321
54835: PUSH
54836: LD_INT 2
54838: EQUAL
54839: ST_TO_ADDR
54840: GO 55158
54842: LD_INT 20
54844: DOUBLE
54845: EQUAL
54846: IFTRUE 54850
54848: GO 54875
54850: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
54851: LD_ADDR_VAR 0 3
54855: PUSH
54856: LD_INT 6
54858: PPUSH
54859: LD_VAR 0 1
54863: PPUSH
54864: CALL_OW 321
54868: PUSH
54869: LD_INT 2
54871: EQUAL
54872: ST_TO_ADDR
54873: GO 55158
54875: LD_INT 22
54877: DOUBLE
54878: EQUAL
54879: IFTRUE 54889
54881: LD_INT 36
54883: DOUBLE
54884: EQUAL
54885: IFTRUE 54889
54887: GO 54914
54889: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
54890: LD_ADDR_VAR 0 3
54894: PUSH
54895: LD_INT 15
54897: PPUSH
54898: LD_VAR 0 1
54902: PPUSH
54903: CALL_OW 321
54907: PUSH
54908: LD_INT 2
54910: EQUAL
54911: ST_TO_ADDR
54912: GO 55158
54914: LD_INT 30
54916: DOUBLE
54917: EQUAL
54918: IFTRUE 54922
54920: GO 54947
54922: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54923: LD_ADDR_VAR 0 3
54927: PUSH
54928: LD_INT 20
54930: PPUSH
54931: LD_VAR 0 1
54935: PPUSH
54936: CALL_OW 321
54940: PUSH
54941: LD_INT 2
54943: EQUAL
54944: ST_TO_ADDR
54945: GO 55158
54947: LD_INT 28
54949: DOUBLE
54950: EQUAL
54951: IFTRUE 54961
54953: LD_INT 21
54955: DOUBLE
54956: EQUAL
54957: IFTRUE 54961
54959: GO 54986
54961: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54962: LD_ADDR_VAR 0 3
54966: PUSH
54967: LD_INT 21
54969: PPUSH
54970: LD_VAR 0 1
54974: PPUSH
54975: CALL_OW 321
54979: PUSH
54980: LD_INT 2
54982: EQUAL
54983: ST_TO_ADDR
54984: GO 55158
54986: LD_INT 16
54988: DOUBLE
54989: EQUAL
54990: IFTRUE 54994
54992: GO 55019
54994: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54995: LD_ADDR_VAR 0 3
54999: PUSH
55000: LD_INT 84
55002: PPUSH
55003: LD_VAR 0 1
55007: PPUSH
55008: CALL_OW 321
55012: PUSH
55013: LD_INT 2
55015: EQUAL
55016: ST_TO_ADDR
55017: GO 55158
55019: LD_INT 19
55021: DOUBLE
55022: EQUAL
55023: IFTRUE 55033
55025: LD_INT 23
55027: DOUBLE
55028: EQUAL
55029: IFTRUE 55033
55031: GO 55058
55033: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
55034: LD_ADDR_VAR 0 3
55038: PUSH
55039: LD_INT 83
55041: PPUSH
55042: LD_VAR 0 1
55046: PPUSH
55047: CALL_OW 321
55051: PUSH
55052: LD_INT 2
55054: EQUAL
55055: ST_TO_ADDR
55056: GO 55158
55058: LD_INT 17
55060: DOUBLE
55061: EQUAL
55062: IFTRUE 55066
55064: GO 55091
55066: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
55067: LD_ADDR_VAR 0 3
55071: PUSH
55072: LD_INT 39
55074: PPUSH
55075: LD_VAR 0 1
55079: PPUSH
55080: CALL_OW 321
55084: PUSH
55085: LD_INT 2
55087: EQUAL
55088: ST_TO_ADDR
55089: GO 55158
55091: LD_INT 18
55093: DOUBLE
55094: EQUAL
55095: IFTRUE 55099
55097: GO 55124
55099: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
55100: LD_ADDR_VAR 0 3
55104: PUSH
55105: LD_INT 40
55107: PPUSH
55108: LD_VAR 0 1
55112: PPUSH
55113: CALL_OW 321
55117: PUSH
55118: LD_INT 2
55120: EQUAL
55121: ST_TO_ADDR
55122: GO 55158
55124: LD_INT 27
55126: DOUBLE
55127: EQUAL
55128: IFTRUE 55132
55130: GO 55157
55132: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
55133: LD_ADDR_VAR 0 3
55137: PUSH
55138: LD_INT 35
55140: PPUSH
55141: LD_VAR 0 1
55145: PPUSH
55146: CALL_OW 321
55150: PUSH
55151: LD_INT 2
55153: EQUAL
55154: ST_TO_ADDR
55155: GO 55158
55157: POP
// end ;
55158: LD_VAR 0 3
55162: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
55163: LD_INT 0
55165: PPUSH
55166: PPUSH
55167: PPUSH
55168: PPUSH
55169: PPUSH
55170: PPUSH
55171: PPUSH
55172: PPUSH
55173: PPUSH
55174: PPUSH
55175: PPUSH
// result := false ;
55176: LD_ADDR_VAR 0 6
55180: PUSH
55181: LD_INT 0
55183: ST_TO_ADDR
// if btype = b_depot then
55184: LD_VAR 0 2
55188: PUSH
55189: LD_INT 0
55191: EQUAL
55192: IFFALSE 55204
// begin result := true ;
55194: LD_ADDR_VAR 0 6
55198: PUSH
55199: LD_INT 1
55201: ST_TO_ADDR
// exit ;
55202: GO 56030
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
55204: LD_VAR 0 1
55208: NOT
55209: PUSH
55210: LD_VAR 0 1
55214: PPUSH
55215: CALL_OW 266
55219: PUSH
55220: LD_INT 0
55222: PUSH
55223: LD_INT 1
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: IN
55230: NOT
55231: OR
55232: PUSH
55233: LD_VAR 0 2
55237: NOT
55238: OR
55239: PUSH
55240: LD_VAR 0 5
55244: PUSH
55245: LD_INT 0
55247: PUSH
55248: LD_INT 1
55250: PUSH
55251: LD_INT 2
55253: PUSH
55254: LD_INT 3
55256: PUSH
55257: LD_INT 4
55259: PUSH
55260: LD_INT 5
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: IN
55271: NOT
55272: OR
55273: PUSH
55274: LD_VAR 0 3
55278: PPUSH
55279: LD_VAR 0 4
55283: PPUSH
55284: CALL_OW 488
55288: NOT
55289: OR
55290: IFFALSE 55294
// exit ;
55292: GO 56030
// side := GetSide ( depot ) ;
55294: LD_ADDR_VAR 0 9
55298: PUSH
55299: LD_VAR 0 1
55303: PPUSH
55304: CALL_OW 255
55308: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
55309: LD_VAR 0 9
55313: PPUSH
55314: LD_VAR 0 2
55318: PPUSH
55319: CALL 54787 0 2
55323: NOT
55324: IFFALSE 55328
// exit ;
55326: GO 56030
// pom := GetBase ( depot ) ;
55328: LD_ADDR_VAR 0 10
55332: PUSH
55333: LD_VAR 0 1
55337: PPUSH
55338: CALL_OW 274
55342: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
55343: LD_ADDR_VAR 0 11
55347: PUSH
55348: LD_VAR 0 2
55352: PPUSH
55353: LD_VAR 0 1
55357: PPUSH
55358: CALL_OW 248
55362: PPUSH
55363: CALL_OW 450
55367: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
55368: LD_VAR 0 10
55372: PPUSH
55373: LD_INT 1
55375: PPUSH
55376: CALL_OW 275
55380: PUSH
55381: LD_VAR 0 11
55385: PUSH
55386: LD_INT 1
55388: ARRAY
55389: GREATEREQUAL
55390: PUSH
55391: LD_VAR 0 10
55395: PPUSH
55396: LD_INT 2
55398: PPUSH
55399: CALL_OW 275
55403: PUSH
55404: LD_VAR 0 11
55408: PUSH
55409: LD_INT 2
55411: ARRAY
55412: GREATEREQUAL
55413: AND
55414: PUSH
55415: LD_VAR 0 10
55419: PPUSH
55420: LD_INT 3
55422: PPUSH
55423: CALL_OW 275
55427: PUSH
55428: LD_VAR 0 11
55432: PUSH
55433: LD_INT 3
55435: ARRAY
55436: GREATEREQUAL
55437: AND
55438: NOT
55439: IFFALSE 55443
// exit ;
55441: GO 56030
// if GetBType ( depot ) = b_depot then
55443: LD_VAR 0 1
55447: PPUSH
55448: CALL_OW 266
55452: PUSH
55453: LD_INT 0
55455: EQUAL
55456: IFFALSE 55468
// dist := 28 else
55458: LD_ADDR_VAR 0 14
55462: PUSH
55463: LD_INT 28
55465: ST_TO_ADDR
55466: GO 55476
// dist := 36 ;
55468: LD_ADDR_VAR 0 14
55472: PUSH
55473: LD_INT 36
55475: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
55476: LD_VAR 0 1
55480: PPUSH
55481: LD_VAR 0 3
55485: PPUSH
55486: LD_VAR 0 4
55490: PPUSH
55491: CALL_OW 297
55495: PUSH
55496: LD_VAR 0 14
55500: GREATER
55501: IFFALSE 55505
// exit ;
55503: GO 56030
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
55505: LD_ADDR_VAR 0 12
55509: PUSH
55510: LD_VAR 0 2
55514: PPUSH
55515: LD_VAR 0 3
55519: PPUSH
55520: LD_VAR 0 4
55524: PPUSH
55525: LD_VAR 0 5
55529: PPUSH
55530: LD_VAR 0 1
55534: PPUSH
55535: CALL_OW 248
55539: PPUSH
55540: LD_INT 0
55542: PPUSH
55543: CALL 56035 0 6
55547: ST_TO_ADDR
// if not hexes then
55548: LD_VAR 0 12
55552: NOT
55553: IFFALSE 55557
// exit ;
55555: GO 56030
// hex := GetHexInfo ( x , y ) ;
55557: LD_ADDR_VAR 0 15
55561: PUSH
55562: LD_VAR 0 3
55566: PPUSH
55567: LD_VAR 0 4
55571: PPUSH
55572: CALL_OW 546
55576: ST_TO_ADDR
// if hex [ 1 ] then
55577: LD_VAR 0 15
55581: PUSH
55582: LD_INT 1
55584: ARRAY
55585: IFFALSE 55589
// exit ;
55587: GO 56030
// height := hex [ 2 ] ;
55589: LD_ADDR_VAR 0 13
55593: PUSH
55594: LD_VAR 0 15
55598: PUSH
55599: LD_INT 2
55601: ARRAY
55602: ST_TO_ADDR
// for i = 1 to hexes do
55603: LD_ADDR_VAR 0 7
55607: PUSH
55608: DOUBLE
55609: LD_INT 1
55611: DEC
55612: ST_TO_ADDR
55613: LD_VAR 0 12
55617: PUSH
55618: FOR_TO
55619: IFFALSE 55949
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
55621: LD_VAR 0 12
55625: PUSH
55626: LD_VAR 0 7
55630: ARRAY
55631: PUSH
55632: LD_INT 1
55634: ARRAY
55635: PPUSH
55636: LD_VAR 0 12
55640: PUSH
55641: LD_VAR 0 7
55645: ARRAY
55646: PUSH
55647: LD_INT 2
55649: ARRAY
55650: PPUSH
55651: CALL_OW 488
55655: NOT
55656: PUSH
55657: LD_VAR 0 12
55661: PUSH
55662: LD_VAR 0 7
55666: ARRAY
55667: PUSH
55668: LD_INT 1
55670: ARRAY
55671: PPUSH
55672: LD_VAR 0 12
55676: PUSH
55677: LD_VAR 0 7
55681: ARRAY
55682: PUSH
55683: LD_INT 2
55685: ARRAY
55686: PPUSH
55687: CALL_OW 428
55691: PUSH
55692: LD_INT 0
55694: GREATER
55695: OR
55696: PUSH
55697: LD_VAR 0 12
55701: PUSH
55702: LD_VAR 0 7
55706: ARRAY
55707: PUSH
55708: LD_INT 1
55710: ARRAY
55711: PPUSH
55712: LD_VAR 0 12
55716: PUSH
55717: LD_VAR 0 7
55721: ARRAY
55722: PUSH
55723: LD_INT 2
55725: ARRAY
55726: PPUSH
55727: CALL_OW 351
55731: OR
55732: IFFALSE 55738
// exit ;
55734: POP
55735: POP
55736: GO 56030
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55738: LD_ADDR_VAR 0 8
55742: PUSH
55743: LD_VAR 0 12
55747: PUSH
55748: LD_VAR 0 7
55752: ARRAY
55753: PUSH
55754: LD_INT 1
55756: ARRAY
55757: PPUSH
55758: LD_VAR 0 12
55762: PUSH
55763: LD_VAR 0 7
55767: ARRAY
55768: PUSH
55769: LD_INT 2
55771: ARRAY
55772: PPUSH
55773: CALL_OW 546
55777: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
55778: LD_VAR 0 8
55782: PUSH
55783: LD_INT 1
55785: ARRAY
55786: PUSH
55787: LD_VAR 0 8
55791: PUSH
55792: LD_INT 2
55794: ARRAY
55795: PUSH
55796: LD_VAR 0 13
55800: PUSH
55801: LD_INT 2
55803: PLUS
55804: GREATER
55805: OR
55806: PUSH
55807: LD_VAR 0 8
55811: PUSH
55812: LD_INT 2
55814: ARRAY
55815: PUSH
55816: LD_VAR 0 13
55820: PUSH
55821: LD_INT 2
55823: MINUS
55824: LESS
55825: OR
55826: PUSH
55827: LD_VAR 0 8
55831: PUSH
55832: LD_INT 3
55834: ARRAY
55835: PUSH
55836: LD_INT 0
55838: PUSH
55839: LD_INT 8
55841: PUSH
55842: LD_INT 9
55844: PUSH
55845: LD_INT 10
55847: PUSH
55848: LD_INT 11
55850: PUSH
55851: LD_INT 12
55853: PUSH
55854: LD_INT 13
55856: PUSH
55857: LD_INT 16
55859: PUSH
55860: LD_INT 17
55862: PUSH
55863: LD_INT 18
55865: PUSH
55866: LD_INT 19
55868: PUSH
55869: LD_INT 20
55871: PUSH
55872: LD_INT 21
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: IN
55890: NOT
55891: OR
55892: PUSH
55893: LD_VAR 0 8
55897: PUSH
55898: LD_INT 5
55900: ARRAY
55901: NOT
55902: OR
55903: PUSH
55904: LD_VAR 0 8
55908: PUSH
55909: LD_INT 6
55911: ARRAY
55912: PUSH
55913: LD_INT 1
55915: PUSH
55916: LD_INT 2
55918: PUSH
55919: LD_INT 7
55921: PUSH
55922: LD_INT 9
55924: PUSH
55925: LD_INT 10
55927: PUSH
55928: LD_INT 11
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: IN
55939: NOT
55940: OR
55941: IFFALSE 55947
// exit ;
55943: POP
55944: POP
55945: GO 56030
// end ;
55947: GO 55618
55949: POP
55950: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55951: LD_VAR 0 9
55955: PPUSH
55956: LD_VAR 0 3
55960: PPUSH
55961: LD_VAR 0 4
55965: PPUSH
55966: LD_INT 20
55968: PPUSH
55969: CALL 47953 0 4
55973: PUSH
55974: LD_INT 4
55976: ARRAY
55977: IFFALSE 55981
// exit ;
55979: GO 56030
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55981: LD_VAR 0 2
55985: PUSH
55986: LD_INT 29
55988: PUSH
55989: LD_INT 30
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: IN
55996: PUSH
55997: LD_VAR 0 3
56001: PPUSH
56002: LD_VAR 0 4
56006: PPUSH
56007: LD_VAR 0 9
56011: PPUSH
56012: CALL_OW 440
56016: NOT
56017: AND
56018: IFFALSE 56022
// exit ;
56020: GO 56030
// result := true ;
56022: LD_ADDR_VAR 0 6
56026: PUSH
56027: LD_INT 1
56029: ST_TO_ADDR
// end ;
56030: LD_VAR 0 6
56034: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
56035: LD_INT 0
56037: PPUSH
56038: PPUSH
56039: PPUSH
56040: PPUSH
56041: PPUSH
56042: PPUSH
56043: PPUSH
56044: PPUSH
56045: PPUSH
56046: PPUSH
56047: PPUSH
56048: PPUSH
56049: PPUSH
56050: PPUSH
56051: PPUSH
56052: PPUSH
56053: PPUSH
56054: PPUSH
56055: PPUSH
56056: PPUSH
56057: PPUSH
56058: PPUSH
56059: PPUSH
56060: PPUSH
56061: PPUSH
56062: PPUSH
56063: PPUSH
56064: PPUSH
56065: PPUSH
56066: PPUSH
56067: PPUSH
56068: PPUSH
56069: PPUSH
56070: PPUSH
56071: PPUSH
56072: PPUSH
56073: PPUSH
56074: PPUSH
56075: PPUSH
56076: PPUSH
56077: PPUSH
56078: PPUSH
56079: PPUSH
56080: PPUSH
56081: PPUSH
56082: PPUSH
56083: PPUSH
56084: PPUSH
56085: PPUSH
56086: PPUSH
56087: PPUSH
56088: PPUSH
56089: PPUSH
56090: PPUSH
56091: PPUSH
56092: PPUSH
56093: PPUSH
56094: PPUSH
// result = [ ] ;
56095: LD_ADDR_VAR 0 7
56099: PUSH
56100: EMPTY
56101: ST_TO_ADDR
// temp_list = [ ] ;
56102: LD_ADDR_VAR 0 9
56106: PUSH
56107: EMPTY
56108: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
56109: LD_VAR 0 4
56113: PUSH
56114: LD_INT 0
56116: PUSH
56117: LD_INT 1
56119: PUSH
56120: LD_INT 2
56122: PUSH
56123: LD_INT 3
56125: PUSH
56126: LD_INT 4
56128: PUSH
56129: LD_INT 5
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: IN
56140: NOT
56141: PUSH
56142: LD_VAR 0 1
56146: PUSH
56147: LD_INT 0
56149: PUSH
56150: LD_INT 1
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: IN
56157: PUSH
56158: LD_VAR 0 5
56162: PUSH
56163: LD_INT 1
56165: PUSH
56166: LD_INT 2
56168: PUSH
56169: LD_INT 3
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: LIST
56176: IN
56177: NOT
56178: AND
56179: OR
56180: IFFALSE 56184
// exit ;
56182: GO 74575
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
56184: LD_VAR 0 1
56188: PUSH
56189: LD_INT 6
56191: PUSH
56192: LD_INT 7
56194: PUSH
56195: LD_INT 8
56197: PUSH
56198: LD_INT 13
56200: PUSH
56201: LD_INT 12
56203: PUSH
56204: LD_INT 15
56206: PUSH
56207: LD_INT 11
56209: PUSH
56210: LD_INT 14
56212: PUSH
56213: LD_INT 10
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: IN
56227: IFFALSE 56237
// btype = b_lab ;
56229: LD_ADDR_VAR 0 1
56233: PUSH
56234: LD_INT 6
56236: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
56237: LD_VAR 0 6
56241: PUSH
56242: LD_INT 0
56244: PUSH
56245: LD_INT 1
56247: PUSH
56248: LD_INT 2
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: LIST
56255: IN
56256: NOT
56257: PUSH
56258: LD_VAR 0 1
56262: PUSH
56263: LD_INT 0
56265: PUSH
56266: LD_INT 1
56268: PUSH
56269: LD_INT 2
56271: PUSH
56272: LD_INT 3
56274: PUSH
56275: LD_INT 6
56277: PUSH
56278: LD_INT 36
56280: PUSH
56281: LD_INT 4
56283: PUSH
56284: LD_INT 5
56286: PUSH
56287: LD_INT 31
56289: PUSH
56290: LD_INT 32
56292: PUSH
56293: LD_INT 33
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: IN
56309: NOT
56310: PUSH
56311: LD_VAR 0 6
56315: PUSH
56316: LD_INT 1
56318: EQUAL
56319: AND
56320: OR
56321: PUSH
56322: LD_VAR 0 1
56326: PUSH
56327: LD_INT 2
56329: PUSH
56330: LD_INT 3
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: IN
56337: NOT
56338: PUSH
56339: LD_VAR 0 6
56343: PUSH
56344: LD_INT 2
56346: EQUAL
56347: AND
56348: OR
56349: IFFALSE 56359
// mode = 0 ;
56351: LD_ADDR_VAR 0 6
56355: PUSH
56356: LD_INT 0
56358: ST_TO_ADDR
// case mode of 0 :
56359: LD_VAR 0 6
56363: PUSH
56364: LD_INT 0
56366: DOUBLE
56367: EQUAL
56368: IFTRUE 56372
56370: GO 67825
56372: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56373: LD_ADDR_VAR 0 11
56377: PUSH
56378: LD_INT 0
56380: PUSH
56381: LD_INT 0
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 0
56390: PUSH
56391: LD_INT 1
56393: NEG
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 1
56401: PUSH
56402: LD_INT 0
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 1
56411: PUSH
56412: LD_INT 1
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 0
56421: PUSH
56422: LD_INT 1
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 1
56431: NEG
56432: PUSH
56433: LD_INT 0
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 1
56442: NEG
56443: PUSH
56444: LD_INT 1
56446: NEG
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 1
56454: NEG
56455: PUSH
56456: LD_INT 2
56458: NEG
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 0
56466: PUSH
56467: LD_INT 2
56469: NEG
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 1
56477: PUSH
56478: LD_INT 1
56480: NEG
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 1
56488: PUSH
56489: LD_INT 2
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 0
56498: PUSH
56499: LD_INT 2
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 1
56508: NEG
56509: PUSH
56510: LD_INT 1
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 1
56519: PUSH
56520: LD_INT 3
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 0
56529: PUSH
56530: LD_INT 3
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 1
56539: NEG
56540: PUSH
56541: LD_INT 2
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56566: LD_ADDR_VAR 0 12
56570: PUSH
56571: LD_INT 0
56573: PUSH
56574: LD_INT 0
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 0
56583: PUSH
56584: LD_INT 1
56586: NEG
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 1
56594: PUSH
56595: LD_INT 0
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 1
56604: PUSH
56605: LD_INT 1
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 0
56614: PUSH
56615: LD_INT 1
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 1
56624: NEG
56625: PUSH
56626: LD_INT 0
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 1
56635: NEG
56636: PUSH
56637: LD_INT 1
56639: NEG
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 1
56647: PUSH
56648: LD_INT 1
56650: NEG
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 2
56658: PUSH
56659: LD_INT 0
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 2
56668: PUSH
56669: LD_INT 1
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 1
56678: NEG
56679: PUSH
56680: LD_INT 1
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 2
56689: NEG
56690: PUSH
56691: LD_INT 0
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 2
56700: NEG
56701: PUSH
56702: LD_INT 1
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 2
56712: NEG
56713: PUSH
56714: LD_INT 1
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 3
56723: NEG
56724: PUSH
56725: LD_INT 0
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 3
56734: NEG
56735: PUSH
56736: LD_INT 1
56738: NEG
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56762: LD_ADDR_VAR 0 13
56766: PUSH
56767: LD_INT 0
56769: PUSH
56770: LD_INT 0
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 0
56779: PUSH
56780: LD_INT 1
56782: NEG
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 1
56790: PUSH
56791: LD_INT 0
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 1
56800: PUSH
56801: LD_INT 1
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 0
56810: PUSH
56811: LD_INT 1
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 1
56820: NEG
56821: PUSH
56822: LD_INT 0
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 1
56831: NEG
56832: PUSH
56833: LD_INT 1
56835: NEG
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 1
56843: NEG
56844: PUSH
56845: LD_INT 2
56847: NEG
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 2
56855: PUSH
56856: LD_INT 1
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 2
56865: PUSH
56866: LD_INT 2
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 1
56875: PUSH
56876: LD_INT 2
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 2
56885: NEG
56886: PUSH
56887: LD_INT 1
56889: NEG
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 2
56897: NEG
56898: PUSH
56899: LD_INT 2
56901: NEG
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 2
56909: NEG
56910: PUSH
56911: LD_INT 3
56913: NEG
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 3
56921: NEG
56922: PUSH
56923: LD_INT 2
56925: NEG
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 3
56933: NEG
56934: PUSH
56935: LD_INT 3
56937: NEG
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56961: LD_ADDR_VAR 0 14
56965: PUSH
56966: LD_INT 0
56968: PUSH
56969: LD_INT 0
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 0
56978: PUSH
56979: LD_INT 1
56981: NEG
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 1
56989: PUSH
56990: LD_INT 0
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 1
56999: PUSH
57000: LD_INT 1
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 0
57009: PUSH
57010: LD_INT 1
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 1
57019: NEG
57020: PUSH
57021: LD_INT 0
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 1
57030: NEG
57031: PUSH
57032: LD_INT 1
57034: NEG
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 1
57042: NEG
57043: PUSH
57044: LD_INT 2
57046: NEG
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 0
57054: PUSH
57055: LD_INT 2
57057: NEG
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 1
57065: PUSH
57066: LD_INT 1
57068: NEG
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 1
57076: PUSH
57077: LD_INT 2
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 0
57086: PUSH
57087: LD_INT 2
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 1
57096: NEG
57097: PUSH
57098: LD_INT 1
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 1
57107: NEG
57108: PUSH
57109: LD_INT 3
57111: NEG
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 0
57119: PUSH
57120: LD_INT 3
57122: NEG
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 1
57130: PUSH
57131: LD_INT 2
57133: NEG
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57157: LD_ADDR_VAR 0 15
57161: PUSH
57162: LD_INT 0
57164: PUSH
57165: LD_INT 0
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 0
57174: PUSH
57175: LD_INT 1
57177: NEG
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 1
57185: PUSH
57186: LD_INT 0
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 1
57195: PUSH
57196: LD_INT 1
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: LD_INT 1
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 1
57215: NEG
57216: PUSH
57217: LD_INT 0
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 1
57226: NEG
57227: PUSH
57228: LD_INT 1
57230: NEG
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 1
57238: PUSH
57239: LD_INT 1
57241: NEG
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 2
57249: PUSH
57250: LD_INT 0
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 2
57259: PUSH
57260: LD_INT 1
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 1
57269: NEG
57270: PUSH
57271: LD_INT 1
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 2
57280: NEG
57281: PUSH
57282: LD_INT 0
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 2
57291: NEG
57292: PUSH
57293: LD_INT 1
57295: NEG
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 2
57303: PUSH
57304: LD_INT 1
57306: NEG
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 3
57314: PUSH
57315: LD_INT 0
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 3
57324: PUSH
57325: LD_INT 1
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57350: LD_ADDR_VAR 0 16
57354: PUSH
57355: LD_INT 0
57357: PUSH
57358: LD_INT 0
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 0
57367: PUSH
57368: LD_INT 1
57370: NEG
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 1
57378: PUSH
57379: LD_INT 0
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 1
57388: PUSH
57389: LD_INT 1
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 0
57398: PUSH
57399: LD_INT 1
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 1
57408: NEG
57409: PUSH
57410: LD_INT 0
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 1
57419: NEG
57420: PUSH
57421: LD_INT 1
57423: NEG
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 1
57431: NEG
57432: PUSH
57433: LD_INT 2
57435: NEG
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 2
57443: PUSH
57444: LD_INT 1
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 2
57453: PUSH
57454: LD_INT 2
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 1
57463: PUSH
57464: LD_INT 2
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 2
57473: NEG
57474: PUSH
57475: LD_INT 1
57477: NEG
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 2
57485: NEG
57486: PUSH
57487: LD_INT 2
57489: NEG
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 3
57497: PUSH
57498: LD_INT 2
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 3
57507: PUSH
57508: LD_INT 3
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 2
57517: PUSH
57518: LD_INT 3
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57543: LD_ADDR_VAR 0 17
57547: PUSH
57548: LD_INT 0
57550: PUSH
57551: LD_INT 0
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 0
57560: PUSH
57561: LD_INT 1
57563: NEG
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 1
57571: PUSH
57572: LD_INT 0
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 1
57581: PUSH
57582: LD_INT 1
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 0
57591: PUSH
57592: LD_INT 1
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 1
57601: NEG
57602: PUSH
57603: LD_INT 0
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 1
57612: NEG
57613: PUSH
57614: LD_INT 1
57616: NEG
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 1
57624: NEG
57625: PUSH
57626: LD_INT 2
57628: NEG
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 0
57636: PUSH
57637: LD_INT 2
57639: NEG
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 1
57647: PUSH
57648: LD_INT 1
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 2
57658: PUSH
57659: LD_INT 0
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 2
57668: PUSH
57669: LD_INT 1
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 2
57678: PUSH
57679: LD_INT 2
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 1
57688: PUSH
57689: LD_INT 2
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 0
57698: PUSH
57699: LD_INT 2
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 1
57708: NEG
57709: PUSH
57710: LD_INT 1
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 2
57719: NEG
57720: PUSH
57721: LD_INT 0
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 2
57730: NEG
57731: PUSH
57732: LD_INT 1
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 2
57742: NEG
57743: PUSH
57744: LD_INT 2
57746: NEG
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57773: LD_ADDR_VAR 0 18
57777: PUSH
57778: LD_INT 0
57780: PUSH
57781: LD_INT 0
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 0
57790: PUSH
57791: LD_INT 1
57793: NEG
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 1
57801: PUSH
57802: LD_INT 0
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 1
57811: PUSH
57812: LD_INT 1
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 0
57821: PUSH
57822: LD_INT 1
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 1
57831: NEG
57832: PUSH
57833: LD_INT 0
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 1
57842: NEG
57843: PUSH
57844: LD_INT 1
57846: NEG
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 1
57854: NEG
57855: PUSH
57856: LD_INT 2
57858: NEG
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 0
57866: PUSH
57867: LD_INT 2
57869: NEG
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 1
57877: PUSH
57878: LD_INT 1
57880: NEG
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 2
57888: PUSH
57889: LD_INT 0
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 2
57898: PUSH
57899: LD_INT 1
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 2
57908: PUSH
57909: LD_INT 2
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 1
57918: PUSH
57919: LD_INT 2
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 0
57928: PUSH
57929: LD_INT 2
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 1
57938: NEG
57939: PUSH
57940: LD_INT 1
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 2
57949: NEG
57950: PUSH
57951: LD_INT 0
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 2
57960: NEG
57961: PUSH
57962: LD_INT 1
57964: NEG
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 2
57972: NEG
57973: PUSH
57974: LD_INT 2
57976: NEG
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58003: LD_ADDR_VAR 0 19
58007: PUSH
58008: LD_INT 0
58010: PUSH
58011: LD_INT 0
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 0
58020: PUSH
58021: LD_INT 1
58023: NEG
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 1
58031: PUSH
58032: LD_INT 0
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 1
58041: PUSH
58042: LD_INT 1
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 0
58051: PUSH
58052: LD_INT 1
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 1
58061: NEG
58062: PUSH
58063: LD_INT 0
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 1
58072: NEG
58073: PUSH
58074: LD_INT 1
58076: NEG
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 1
58084: NEG
58085: PUSH
58086: LD_INT 2
58088: NEG
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 0
58096: PUSH
58097: LD_INT 2
58099: NEG
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 1
58107: PUSH
58108: LD_INT 1
58110: NEG
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 2
58118: PUSH
58119: LD_INT 0
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 2
58128: PUSH
58129: LD_INT 1
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 2
58138: PUSH
58139: LD_INT 2
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 1
58148: PUSH
58149: LD_INT 2
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 0
58158: PUSH
58159: LD_INT 2
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 1
58168: NEG
58169: PUSH
58170: LD_INT 1
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 2
58179: NEG
58180: PUSH
58181: LD_INT 0
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 2
58190: NEG
58191: PUSH
58192: LD_INT 1
58194: NEG
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 2
58202: NEG
58203: PUSH
58204: LD_INT 2
58206: NEG
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58233: LD_ADDR_VAR 0 20
58237: PUSH
58238: LD_INT 0
58240: PUSH
58241: LD_INT 0
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 0
58250: PUSH
58251: LD_INT 1
58253: NEG
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 1
58261: PUSH
58262: LD_INT 0
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 1
58271: PUSH
58272: LD_INT 1
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 0
58281: PUSH
58282: LD_INT 1
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 1
58291: NEG
58292: PUSH
58293: LD_INT 0
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 1
58302: NEG
58303: PUSH
58304: LD_INT 1
58306: NEG
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 1
58314: NEG
58315: PUSH
58316: LD_INT 2
58318: NEG
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 0
58326: PUSH
58327: LD_INT 2
58329: NEG
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 1
58337: PUSH
58338: LD_INT 1
58340: NEG
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 2
58348: PUSH
58349: LD_INT 0
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 2
58358: PUSH
58359: LD_INT 1
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 2
58368: PUSH
58369: LD_INT 2
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 1
58378: PUSH
58379: LD_INT 2
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 0
58388: PUSH
58389: LD_INT 2
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 1
58398: NEG
58399: PUSH
58400: LD_INT 1
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 2
58409: NEG
58410: PUSH
58411: LD_INT 0
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 2
58420: NEG
58421: PUSH
58422: LD_INT 1
58424: NEG
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 2
58432: NEG
58433: PUSH
58434: LD_INT 2
58436: NEG
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58463: LD_ADDR_VAR 0 21
58467: PUSH
58468: LD_INT 0
58470: PUSH
58471: LD_INT 0
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 0
58480: PUSH
58481: LD_INT 1
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 1
58491: PUSH
58492: LD_INT 0
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 1
58501: PUSH
58502: LD_INT 1
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 0
58511: PUSH
58512: LD_INT 1
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 1
58521: NEG
58522: PUSH
58523: LD_INT 0
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 1
58532: NEG
58533: PUSH
58534: LD_INT 1
58536: NEG
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 1
58544: NEG
58545: PUSH
58546: LD_INT 2
58548: NEG
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 0
58556: PUSH
58557: LD_INT 2
58559: NEG
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 1
58567: PUSH
58568: LD_INT 1
58570: NEG
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 2
58578: PUSH
58579: LD_INT 0
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 2
58588: PUSH
58589: LD_INT 1
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 2
58598: PUSH
58599: LD_INT 2
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 1
58608: PUSH
58609: LD_INT 2
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 0
58618: PUSH
58619: LD_INT 2
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 1
58628: NEG
58629: PUSH
58630: LD_INT 1
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 2
58639: NEG
58640: PUSH
58641: LD_INT 0
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 2
58650: NEG
58651: PUSH
58652: LD_INT 1
58654: NEG
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 2
58662: NEG
58663: PUSH
58664: LD_INT 2
58666: NEG
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58693: LD_ADDR_VAR 0 22
58697: PUSH
58698: LD_INT 0
58700: PUSH
58701: LD_INT 0
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 0
58710: PUSH
58711: LD_INT 1
58713: NEG
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 1
58721: PUSH
58722: LD_INT 0
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 1
58731: PUSH
58732: LD_INT 1
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 0
58741: PUSH
58742: LD_INT 1
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 1
58751: NEG
58752: PUSH
58753: LD_INT 0
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 1
58762: NEG
58763: PUSH
58764: LD_INT 1
58766: NEG
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 1
58774: NEG
58775: PUSH
58776: LD_INT 2
58778: NEG
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 0
58786: PUSH
58787: LD_INT 2
58789: NEG
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 1
58797: PUSH
58798: LD_INT 1
58800: NEG
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 2
58808: PUSH
58809: LD_INT 0
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 2
58818: PUSH
58819: LD_INT 1
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 2
58828: PUSH
58829: LD_INT 2
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 1
58838: PUSH
58839: LD_INT 2
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 0
58848: PUSH
58849: LD_INT 2
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 1
58858: NEG
58859: PUSH
58860: LD_INT 1
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 2
58869: NEG
58870: PUSH
58871: LD_INT 0
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 2
58880: NEG
58881: PUSH
58882: LD_INT 1
58884: NEG
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 2
58892: NEG
58893: PUSH
58894: LD_INT 2
58896: NEG
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58923: LD_ADDR_VAR 0 23
58927: PUSH
58928: LD_INT 0
58930: PUSH
58931: LD_INT 0
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 0
58940: PUSH
58941: LD_INT 1
58943: NEG
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 1
58951: PUSH
58952: LD_INT 0
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 1
58961: PUSH
58962: LD_INT 1
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 0
58971: PUSH
58972: LD_INT 1
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 1
58981: NEG
58982: PUSH
58983: LD_INT 0
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 1
58992: NEG
58993: PUSH
58994: LD_INT 1
58996: NEG
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 1
59004: NEG
59005: PUSH
59006: LD_INT 2
59008: NEG
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 0
59016: PUSH
59017: LD_INT 2
59019: NEG
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 1
59027: PUSH
59028: LD_INT 1
59030: NEG
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 2
59038: PUSH
59039: LD_INT 0
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 2
59048: PUSH
59049: LD_INT 1
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 2
59058: PUSH
59059: LD_INT 2
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 1
59068: PUSH
59069: LD_INT 2
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 0
59078: PUSH
59079: LD_INT 2
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 1
59088: NEG
59089: PUSH
59090: LD_INT 1
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 2
59099: NEG
59100: PUSH
59101: LD_INT 0
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 2
59110: NEG
59111: PUSH
59112: LD_INT 1
59114: NEG
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 2
59122: NEG
59123: PUSH
59124: LD_INT 2
59126: NEG
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 2
59134: NEG
59135: PUSH
59136: LD_INT 3
59138: NEG
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 1
59146: NEG
59147: PUSH
59148: LD_INT 3
59150: NEG
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 1
59158: PUSH
59159: LD_INT 2
59161: NEG
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 2
59169: PUSH
59170: LD_INT 1
59172: NEG
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
59203: LD_ADDR_VAR 0 24
59207: PUSH
59208: LD_INT 0
59210: PUSH
59211: LD_INT 0
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 0
59220: PUSH
59221: LD_INT 1
59223: NEG
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 1
59231: PUSH
59232: LD_INT 0
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 1
59241: PUSH
59242: LD_INT 1
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 0
59251: PUSH
59252: LD_INT 1
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 1
59261: NEG
59262: PUSH
59263: LD_INT 0
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 1
59272: NEG
59273: PUSH
59274: LD_INT 1
59276: NEG
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 1
59284: NEG
59285: PUSH
59286: LD_INT 2
59288: NEG
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 0
59296: PUSH
59297: LD_INT 2
59299: NEG
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 1
59307: PUSH
59308: LD_INT 1
59310: NEG
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 2
59318: PUSH
59319: LD_INT 0
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 2
59328: PUSH
59329: LD_INT 1
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 2
59338: PUSH
59339: LD_INT 2
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 1
59348: PUSH
59349: LD_INT 2
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 0
59358: PUSH
59359: LD_INT 2
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 1
59368: NEG
59369: PUSH
59370: LD_INT 1
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 2
59379: NEG
59380: PUSH
59381: LD_INT 0
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 2
59390: NEG
59391: PUSH
59392: LD_INT 1
59394: NEG
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 2
59402: NEG
59403: PUSH
59404: LD_INT 2
59406: NEG
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 1
59414: PUSH
59415: LD_INT 2
59417: NEG
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 2
59425: PUSH
59426: LD_INT 1
59428: NEG
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 3
59436: PUSH
59437: LD_INT 1
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 3
59446: PUSH
59447: LD_INT 2
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
59479: LD_ADDR_VAR 0 25
59483: PUSH
59484: LD_INT 0
59486: PUSH
59487: LD_INT 0
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 0
59496: PUSH
59497: LD_INT 1
59499: NEG
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 1
59507: PUSH
59508: LD_INT 0
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 1
59517: PUSH
59518: LD_INT 1
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 0
59527: PUSH
59528: LD_INT 1
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 1
59537: NEG
59538: PUSH
59539: LD_INT 0
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 1
59548: NEG
59549: PUSH
59550: LD_INT 1
59552: NEG
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 1
59560: NEG
59561: PUSH
59562: LD_INT 2
59564: NEG
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 0
59572: PUSH
59573: LD_INT 2
59575: NEG
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 1
59583: PUSH
59584: LD_INT 1
59586: NEG
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 2
59594: PUSH
59595: LD_INT 0
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 2
59604: PUSH
59605: LD_INT 1
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 2
59614: PUSH
59615: LD_INT 2
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 1
59624: PUSH
59625: LD_INT 2
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 0
59634: PUSH
59635: LD_INT 2
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 1
59644: NEG
59645: PUSH
59646: LD_INT 1
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 2
59655: NEG
59656: PUSH
59657: LD_INT 0
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 2
59666: NEG
59667: PUSH
59668: LD_INT 1
59670: NEG
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 2
59678: NEG
59679: PUSH
59680: LD_INT 2
59682: NEG
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 3
59690: PUSH
59691: LD_INT 1
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 3
59700: PUSH
59701: LD_INT 2
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 2
59710: PUSH
59711: LD_INT 3
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 1
59720: PUSH
59721: LD_INT 3
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59753: LD_ADDR_VAR 0 26
59757: PUSH
59758: LD_INT 0
59760: PUSH
59761: LD_INT 0
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 0
59770: PUSH
59771: LD_INT 1
59773: NEG
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: LD_INT 1
59781: PUSH
59782: LD_INT 0
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 1
59791: PUSH
59792: LD_INT 1
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 0
59801: PUSH
59802: LD_INT 1
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 1
59811: NEG
59812: PUSH
59813: LD_INT 0
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 1
59822: NEG
59823: PUSH
59824: LD_INT 1
59826: NEG
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 1
59834: NEG
59835: PUSH
59836: LD_INT 2
59838: NEG
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 0
59846: PUSH
59847: LD_INT 2
59849: NEG
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 1
59857: PUSH
59858: LD_INT 1
59860: NEG
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 2
59868: PUSH
59869: LD_INT 0
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 2
59878: PUSH
59879: LD_INT 1
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 2
59888: PUSH
59889: LD_INT 2
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 1
59898: PUSH
59899: LD_INT 2
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 0
59908: PUSH
59909: LD_INT 2
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 1
59918: NEG
59919: PUSH
59920: LD_INT 1
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 2
59929: NEG
59930: PUSH
59931: LD_INT 0
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 2
59940: NEG
59941: PUSH
59942: LD_INT 1
59944: NEG
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 2
59952: NEG
59953: PUSH
59954: LD_INT 2
59956: NEG
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 2
59964: PUSH
59965: LD_INT 3
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 1
59974: PUSH
59975: LD_INT 3
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 1
59984: NEG
59985: PUSH
59986: LD_INT 2
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 2
59995: NEG
59996: PUSH
59997: LD_INT 1
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60029: LD_ADDR_VAR 0 27
60033: PUSH
60034: LD_INT 0
60036: PUSH
60037: LD_INT 0
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 0
60046: PUSH
60047: LD_INT 1
60049: NEG
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 1
60057: PUSH
60058: LD_INT 0
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 1
60067: PUSH
60068: LD_INT 1
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 0
60077: PUSH
60078: LD_INT 1
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 1
60087: NEG
60088: PUSH
60089: LD_INT 0
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 1
60098: NEG
60099: PUSH
60100: LD_INT 1
60102: NEG
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 1
60110: NEG
60111: PUSH
60112: LD_INT 2
60114: NEG
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 0
60122: PUSH
60123: LD_INT 2
60125: NEG
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 1
60133: PUSH
60134: LD_INT 1
60136: NEG
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 2
60144: PUSH
60145: LD_INT 0
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 2
60154: PUSH
60155: LD_INT 1
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 2
60164: PUSH
60165: LD_INT 2
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 1
60174: PUSH
60175: LD_INT 2
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 0
60184: PUSH
60185: LD_INT 2
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 1
60194: NEG
60195: PUSH
60196: LD_INT 1
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 2
60205: NEG
60206: PUSH
60207: LD_INT 0
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 2
60216: NEG
60217: PUSH
60218: LD_INT 1
60220: NEG
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 2
60228: NEG
60229: PUSH
60230: LD_INT 2
60232: NEG
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 1
60240: NEG
60241: PUSH
60242: LD_INT 2
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 2
60251: NEG
60252: PUSH
60253: LD_INT 1
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 3
60262: NEG
60263: PUSH
60264: LD_INT 1
60266: NEG
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 3
60274: NEG
60275: PUSH
60276: LD_INT 2
60278: NEG
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60309: LD_ADDR_VAR 0 28
60313: PUSH
60314: LD_INT 0
60316: PUSH
60317: LD_INT 0
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 0
60326: PUSH
60327: LD_INT 1
60329: NEG
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 1
60337: PUSH
60338: LD_INT 0
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 1
60347: PUSH
60348: LD_INT 1
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 0
60357: PUSH
60358: LD_INT 1
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 1
60367: NEG
60368: PUSH
60369: LD_INT 0
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 1
60378: NEG
60379: PUSH
60380: LD_INT 1
60382: NEG
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 1
60390: NEG
60391: PUSH
60392: LD_INT 2
60394: NEG
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 0
60402: PUSH
60403: LD_INT 2
60405: NEG
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 1
60413: PUSH
60414: LD_INT 1
60416: NEG
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 2
60424: PUSH
60425: LD_INT 0
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 2
60434: PUSH
60435: LD_INT 1
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 2
60444: PUSH
60445: LD_INT 2
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 1
60454: PUSH
60455: LD_INT 2
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 0
60464: PUSH
60465: LD_INT 2
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 1
60474: NEG
60475: PUSH
60476: LD_INT 1
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 2
60485: NEG
60486: PUSH
60487: LD_INT 0
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 2
60496: NEG
60497: PUSH
60498: LD_INT 1
60500: NEG
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 2
60508: NEG
60509: PUSH
60510: LD_INT 2
60512: NEG
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 2
60520: NEG
60521: PUSH
60522: LD_INT 3
60524: NEG
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 1
60532: NEG
60533: PUSH
60534: LD_INT 3
60536: NEG
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 3
60544: NEG
60545: PUSH
60546: LD_INT 1
60548: NEG
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 3
60556: NEG
60557: PUSH
60558: LD_INT 2
60560: NEG
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60591: LD_ADDR_VAR 0 29
60595: PUSH
60596: LD_INT 0
60598: PUSH
60599: LD_INT 0
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 0
60608: PUSH
60609: LD_INT 1
60611: NEG
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 1
60619: PUSH
60620: LD_INT 0
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 1
60629: PUSH
60630: LD_INT 1
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 0
60639: PUSH
60640: LD_INT 1
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 1
60649: NEG
60650: PUSH
60651: LD_INT 0
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 1
60660: NEG
60661: PUSH
60662: LD_INT 1
60664: NEG
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 1
60672: NEG
60673: PUSH
60674: LD_INT 2
60676: NEG
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 0
60684: PUSH
60685: LD_INT 2
60687: NEG
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 1
60695: PUSH
60696: LD_INT 1
60698: NEG
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 2
60706: PUSH
60707: LD_INT 0
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 2
60716: PUSH
60717: LD_INT 1
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 1
60726: PUSH
60727: LD_INT 2
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 0
60736: PUSH
60737: LD_INT 2
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 1
60746: NEG
60747: PUSH
60748: LD_INT 1
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 2
60757: NEG
60758: PUSH
60759: LD_INT 1
60761: NEG
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 2
60769: NEG
60770: PUSH
60771: LD_INT 2
60773: NEG
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 2
60781: NEG
60782: PUSH
60783: LD_INT 3
60785: NEG
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 2
60793: PUSH
60794: LD_INT 1
60796: NEG
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 3
60804: PUSH
60805: LD_INT 1
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 1
60814: PUSH
60815: LD_INT 3
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 1
60824: NEG
60825: PUSH
60826: LD_INT 2
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 3
60835: NEG
60836: PUSH
60837: LD_INT 2
60839: NEG
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60870: LD_ADDR_VAR 0 30
60874: PUSH
60875: LD_INT 0
60877: PUSH
60878: LD_INT 0
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 0
60887: PUSH
60888: LD_INT 1
60890: NEG
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 1
60898: PUSH
60899: LD_INT 0
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 1
60908: PUSH
60909: LD_INT 1
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 0
60918: PUSH
60919: LD_INT 1
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 1
60928: NEG
60929: PUSH
60930: LD_INT 0
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 1
60939: NEG
60940: PUSH
60941: LD_INT 1
60943: NEG
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 1
60951: NEG
60952: PUSH
60953: LD_INT 2
60955: NEG
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 0
60963: PUSH
60964: LD_INT 2
60966: NEG
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 1
60974: PUSH
60975: LD_INT 1
60977: NEG
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 2
60985: PUSH
60986: LD_INT 0
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 2
60995: PUSH
60996: LD_INT 1
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 2
61005: PUSH
61006: LD_INT 2
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 1
61015: PUSH
61016: LD_INT 2
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 1
61025: NEG
61026: PUSH
61027: LD_INT 1
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 2
61036: NEG
61037: PUSH
61038: LD_INT 0
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 2
61047: NEG
61048: PUSH
61049: LD_INT 1
61051: NEG
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 1
61059: NEG
61060: PUSH
61061: LD_INT 3
61063: NEG
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 1
61071: PUSH
61072: LD_INT 2
61074: NEG
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 3
61082: PUSH
61083: LD_INT 2
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 2
61092: PUSH
61093: LD_INT 3
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 2
61102: NEG
61103: PUSH
61104: LD_INT 1
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 3
61113: NEG
61114: PUSH
61115: LD_INT 1
61117: NEG
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61148: LD_ADDR_VAR 0 31
61152: PUSH
61153: LD_INT 0
61155: PUSH
61156: LD_INT 0
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 0
61165: PUSH
61166: LD_INT 1
61168: NEG
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 1
61176: PUSH
61177: LD_INT 0
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PUSH
61184: LD_INT 1
61186: PUSH
61187: LD_INT 1
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 0
61196: PUSH
61197: LD_INT 1
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 1
61206: NEG
61207: PUSH
61208: LD_INT 0
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 1
61217: NEG
61218: PUSH
61219: LD_INT 1
61221: NEG
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 1
61229: NEG
61230: PUSH
61231: LD_INT 2
61233: NEG
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 1
61241: PUSH
61242: LD_INT 1
61244: NEG
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 2
61252: PUSH
61253: LD_INT 0
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 2
61262: PUSH
61263: LD_INT 1
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 2
61272: PUSH
61273: LD_INT 2
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 1
61282: PUSH
61283: LD_INT 2
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 0
61292: PUSH
61293: LD_INT 2
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 1
61302: NEG
61303: PUSH
61304: LD_INT 1
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 2
61313: NEG
61314: PUSH
61315: LD_INT 1
61317: NEG
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 2
61325: NEG
61326: PUSH
61327: LD_INT 2
61329: NEG
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 2
61337: NEG
61338: PUSH
61339: LD_INT 3
61341: NEG
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 2
61349: PUSH
61350: LD_INT 1
61352: NEG
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 3
61360: PUSH
61361: LD_INT 1
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 1
61370: PUSH
61371: LD_INT 3
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 1
61380: NEG
61381: PUSH
61382: LD_INT 2
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 3
61391: NEG
61392: PUSH
61393: LD_INT 2
61395: NEG
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61426: LD_ADDR_VAR 0 32
61430: PUSH
61431: LD_INT 0
61433: PUSH
61434: LD_INT 0
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 0
61443: PUSH
61444: LD_INT 1
61446: NEG
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 1
61454: PUSH
61455: LD_INT 0
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 1
61464: PUSH
61465: LD_INT 1
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 0
61474: PUSH
61475: LD_INT 1
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 1
61484: NEG
61485: PUSH
61486: LD_INT 0
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 1
61495: NEG
61496: PUSH
61497: LD_INT 1
61499: NEG
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 1
61507: NEG
61508: PUSH
61509: LD_INT 2
61511: NEG
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 0
61519: PUSH
61520: LD_INT 2
61522: NEG
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 1
61530: PUSH
61531: LD_INT 1
61533: NEG
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 2
61541: PUSH
61542: LD_INT 1
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: LD_INT 2
61551: PUSH
61552: LD_INT 2
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 1
61561: PUSH
61562: LD_INT 2
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 0
61571: PUSH
61572: LD_INT 2
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 1
61581: NEG
61582: PUSH
61583: LD_INT 1
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 2
61592: NEG
61593: PUSH
61594: LD_INT 0
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 2
61603: NEG
61604: PUSH
61605: LD_INT 1
61607: NEG
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 1
61615: NEG
61616: PUSH
61617: LD_INT 3
61619: NEG
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 1
61627: PUSH
61628: LD_INT 2
61630: NEG
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 3
61638: PUSH
61639: LD_INT 2
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 2
61648: PUSH
61649: LD_INT 3
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 2
61658: NEG
61659: PUSH
61660: LD_INT 1
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 3
61669: NEG
61670: PUSH
61671: LD_INT 1
61673: NEG
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61704: LD_ADDR_VAR 0 33
61708: PUSH
61709: LD_INT 0
61711: PUSH
61712: LD_INT 0
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 0
61721: PUSH
61722: LD_INT 1
61724: NEG
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: LD_INT 1
61732: PUSH
61733: LD_INT 0
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PUSH
61740: LD_INT 1
61742: PUSH
61743: LD_INT 1
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 0
61752: PUSH
61753: LD_INT 1
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 1
61762: NEG
61763: PUSH
61764: LD_INT 0
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 1
61773: NEG
61774: PUSH
61775: LD_INT 1
61777: NEG
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 1
61785: NEG
61786: PUSH
61787: LD_INT 2
61789: NEG
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 1
61797: PUSH
61798: LD_INT 1
61800: NEG
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: LD_INT 2
61808: PUSH
61809: LD_INT 0
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 2
61818: PUSH
61819: LD_INT 1
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 1
61828: PUSH
61829: LD_INT 2
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 0
61838: PUSH
61839: LD_INT 2
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 1
61848: NEG
61849: PUSH
61850: LD_INT 1
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 2
61859: NEG
61860: PUSH
61861: LD_INT 0
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 2
61870: NEG
61871: PUSH
61872: LD_INT 1
61874: NEG
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 2
61882: NEG
61883: PUSH
61884: LD_INT 2
61886: NEG
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 2
61894: NEG
61895: PUSH
61896: LD_INT 3
61898: NEG
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 2
61906: PUSH
61907: LD_INT 1
61909: NEG
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 3
61917: PUSH
61918: LD_INT 1
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 1
61927: PUSH
61928: LD_INT 3
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 1
61937: NEG
61938: PUSH
61939: LD_INT 2
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: PUSH
61946: LD_INT 3
61948: NEG
61949: PUSH
61950: LD_INT 2
61952: NEG
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: LIST
61979: LIST
61980: LIST
61981: LIST
61982: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61983: LD_ADDR_VAR 0 34
61987: PUSH
61988: LD_INT 0
61990: PUSH
61991: LD_INT 0
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PUSH
61998: LD_INT 0
62000: PUSH
62001: LD_INT 1
62003: NEG
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 1
62011: PUSH
62012: LD_INT 0
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 1
62021: PUSH
62022: LD_INT 1
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 0
62031: PUSH
62032: LD_INT 1
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 1
62041: NEG
62042: PUSH
62043: LD_INT 0
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 1
62052: NEG
62053: PUSH
62054: LD_INT 1
62056: NEG
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 1
62064: NEG
62065: PUSH
62066: LD_INT 2
62068: NEG
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 0
62076: PUSH
62077: LD_INT 2
62079: NEG
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 1
62087: PUSH
62088: LD_INT 1
62090: NEG
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 2
62098: PUSH
62099: LD_INT 1
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 2
62108: PUSH
62109: LD_INT 2
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: LD_INT 1
62118: PUSH
62119: LD_INT 2
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 1
62128: NEG
62129: PUSH
62130: LD_INT 1
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 2
62139: NEG
62140: PUSH
62141: LD_INT 0
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 2
62150: NEG
62151: PUSH
62152: LD_INT 1
62154: NEG
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 2
62162: NEG
62163: PUSH
62164: LD_INT 2
62166: NEG
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 1
62174: NEG
62175: PUSH
62176: LD_INT 3
62178: NEG
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 1
62186: PUSH
62187: LD_INT 2
62189: NEG
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 3
62197: PUSH
62198: LD_INT 2
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 2
62207: PUSH
62208: LD_INT 3
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 2
62217: NEG
62218: PUSH
62219: LD_INT 1
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 3
62228: NEG
62229: PUSH
62230: LD_INT 1
62232: NEG
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62263: LD_ADDR_VAR 0 35
62267: PUSH
62268: LD_INT 0
62270: PUSH
62271: LD_INT 0
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 0
62280: PUSH
62281: LD_INT 1
62283: NEG
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 1
62291: PUSH
62292: LD_INT 0
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 1
62301: PUSH
62302: LD_INT 1
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 0
62311: PUSH
62312: LD_INT 1
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 1
62321: NEG
62322: PUSH
62323: LD_INT 0
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 1
62332: NEG
62333: PUSH
62334: LD_INT 1
62336: NEG
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 2
62344: PUSH
62345: LD_INT 1
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 2
62354: NEG
62355: PUSH
62356: LD_INT 1
62358: NEG
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62375: LD_ADDR_VAR 0 36
62379: PUSH
62380: LD_INT 0
62382: PUSH
62383: LD_INT 0
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 0
62392: PUSH
62393: LD_INT 1
62395: NEG
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PUSH
62401: LD_INT 1
62403: PUSH
62404: LD_INT 0
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: PUSH
62411: LD_INT 1
62413: PUSH
62414: LD_INT 1
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: LD_INT 0
62423: PUSH
62424: LD_INT 1
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 1
62433: NEG
62434: PUSH
62435: LD_INT 0
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 1
62444: NEG
62445: PUSH
62446: LD_INT 1
62448: NEG
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 1
62456: NEG
62457: PUSH
62458: LD_INT 2
62460: NEG
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 1
62468: PUSH
62469: LD_INT 2
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62487: LD_ADDR_VAR 0 37
62491: PUSH
62492: LD_INT 0
62494: PUSH
62495: LD_INT 0
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 0
62504: PUSH
62505: LD_INT 1
62507: NEG
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 1
62515: PUSH
62516: LD_INT 0
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: LD_INT 1
62525: PUSH
62526: LD_INT 1
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 0
62535: PUSH
62536: LD_INT 1
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 1
62545: NEG
62546: PUSH
62547: LD_INT 0
62549: PUSH
62550: EMPTY
62551: LIST
62552: LIST
62553: PUSH
62554: LD_INT 1
62556: NEG
62557: PUSH
62558: LD_INT 1
62560: NEG
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 1
62568: PUSH
62569: LD_INT 1
62571: NEG
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 1
62579: NEG
62580: PUSH
62581: LD_INT 1
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62599: LD_ADDR_VAR 0 38
62603: PUSH
62604: LD_INT 0
62606: PUSH
62607: LD_INT 0
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 0
62616: PUSH
62617: LD_INT 1
62619: NEG
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 1
62627: PUSH
62628: LD_INT 0
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 1
62637: PUSH
62638: LD_INT 1
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: PUSH
62645: LD_INT 0
62647: PUSH
62648: LD_INT 1
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: LD_INT 1
62657: NEG
62658: PUSH
62659: LD_INT 0
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 1
62668: NEG
62669: PUSH
62670: LD_INT 1
62672: NEG
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 2
62680: PUSH
62681: LD_INT 1
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 2
62690: NEG
62691: PUSH
62692: LD_INT 1
62694: NEG
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62711: LD_ADDR_VAR 0 39
62715: PUSH
62716: LD_INT 0
62718: PUSH
62719: LD_INT 0
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 0
62728: PUSH
62729: LD_INT 1
62731: NEG
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 1
62739: PUSH
62740: LD_INT 0
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 1
62749: PUSH
62750: LD_INT 1
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: LD_INT 0
62759: PUSH
62760: LD_INT 1
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: LD_INT 1
62769: NEG
62770: PUSH
62771: LD_INT 0
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: LD_INT 1
62780: NEG
62781: PUSH
62782: LD_INT 1
62784: NEG
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 1
62792: NEG
62793: PUSH
62794: LD_INT 2
62796: NEG
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 1
62804: PUSH
62805: LD_INT 2
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62823: LD_ADDR_VAR 0 40
62827: PUSH
62828: LD_INT 0
62830: PUSH
62831: LD_INT 0
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 0
62840: PUSH
62841: LD_INT 1
62843: NEG
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 1
62851: PUSH
62852: LD_INT 0
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 1
62861: PUSH
62862: LD_INT 1
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 0
62871: PUSH
62872: LD_INT 1
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 1
62881: NEG
62882: PUSH
62883: LD_INT 0
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_INT 1
62892: NEG
62893: PUSH
62894: LD_INT 1
62896: NEG
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 1
62904: PUSH
62905: LD_INT 1
62907: NEG
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: LD_INT 1
62915: NEG
62916: PUSH
62917: LD_INT 1
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62935: LD_ADDR_VAR 0 41
62939: PUSH
62940: LD_INT 0
62942: PUSH
62943: LD_INT 0
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 0
62952: PUSH
62953: LD_INT 1
62955: NEG
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 1
62963: PUSH
62964: LD_INT 0
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 1
62973: PUSH
62974: LD_INT 1
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 0
62983: PUSH
62984: LD_INT 1
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 1
62993: NEG
62994: PUSH
62995: LD_INT 0
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 1
63004: NEG
63005: PUSH
63006: LD_INT 1
63008: NEG
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 1
63016: NEG
63017: PUSH
63018: LD_INT 2
63020: NEG
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 1
63028: PUSH
63029: LD_INT 1
63031: NEG
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 2
63039: PUSH
63040: LD_INT 0
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: LD_INT 2
63049: PUSH
63050: LD_INT 1
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: LD_INT 2
63059: PUSH
63060: LD_INT 2
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: LD_INT 1
63069: PUSH
63070: LD_INT 2
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 1
63079: NEG
63080: PUSH
63081: LD_INT 1
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 2
63090: NEG
63091: PUSH
63092: LD_INT 0
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 2
63101: NEG
63102: PUSH
63103: LD_INT 1
63105: NEG
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: LD_INT 2
63113: NEG
63114: PUSH
63115: LD_INT 2
63117: NEG
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 2
63125: NEG
63126: PUSH
63127: LD_INT 3
63129: NEG
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 2
63137: PUSH
63138: LD_INT 1
63140: NEG
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 3
63148: PUSH
63149: LD_INT 0
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 3
63158: PUSH
63159: LD_INT 1
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PUSH
63166: LD_INT 3
63168: PUSH
63169: LD_INT 2
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: LD_INT 3
63178: PUSH
63179: LD_INT 3
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: PUSH
63186: LD_INT 2
63188: PUSH
63189: LD_INT 3
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 2
63198: NEG
63199: PUSH
63200: LD_INT 1
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: PUSH
63207: LD_INT 3
63209: NEG
63210: PUSH
63211: LD_INT 0
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 3
63220: NEG
63221: PUSH
63222: LD_INT 1
63224: NEG
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: LD_INT 3
63232: NEG
63233: PUSH
63234: LD_INT 2
63236: NEG
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 3
63244: NEG
63245: PUSH
63246: LD_INT 3
63248: NEG
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: LIST
63284: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63285: LD_ADDR_VAR 0 42
63289: PUSH
63290: LD_INT 0
63292: PUSH
63293: LD_INT 0
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_INT 0
63302: PUSH
63303: LD_INT 1
63305: NEG
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_INT 1
63313: PUSH
63314: LD_INT 0
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 1
63323: PUSH
63324: LD_INT 1
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 0
63333: PUSH
63334: LD_INT 1
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 1
63343: NEG
63344: PUSH
63345: LD_INT 0
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: PUSH
63352: LD_INT 1
63354: NEG
63355: PUSH
63356: LD_INT 1
63358: NEG
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 1
63366: NEG
63367: PUSH
63368: LD_INT 2
63370: NEG
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 0
63378: PUSH
63379: LD_INT 2
63381: NEG
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 1
63389: PUSH
63390: LD_INT 1
63392: NEG
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: LD_INT 2
63400: PUSH
63401: LD_INT 1
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: LD_INT 2
63410: PUSH
63411: LD_INT 2
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: PUSH
63418: LD_INT 1
63420: PUSH
63421: LD_INT 2
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 0
63430: PUSH
63431: LD_INT 2
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 1
63440: NEG
63441: PUSH
63442: LD_INT 1
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 2
63451: NEG
63452: PUSH
63453: LD_INT 1
63455: NEG
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 2
63463: NEG
63464: PUSH
63465: LD_INT 2
63467: NEG
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 2
63475: NEG
63476: PUSH
63477: LD_INT 3
63479: NEG
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: LD_INT 1
63487: NEG
63488: PUSH
63489: LD_INT 3
63491: NEG
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: LD_INT 0
63499: PUSH
63500: LD_INT 3
63502: NEG
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: PUSH
63508: LD_INT 1
63510: PUSH
63511: LD_INT 2
63513: NEG
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 3
63521: PUSH
63522: LD_INT 2
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 3
63531: PUSH
63532: LD_INT 3
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 2
63541: PUSH
63542: LD_INT 3
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 1
63551: PUSH
63552: LD_INT 3
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 0
63561: PUSH
63562: LD_INT 3
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 1
63571: NEG
63572: PUSH
63573: LD_INT 2
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 3
63582: NEG
63583: PUSH
63584: LD_INT 2
63586: NEG
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: LD_INT 3
63594: NEG
63595: PUSH
63596: LD_INT 3
63598: NEG
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63635: LD_ADDR_VAR 0 43
63639: PUSH
63640: LD_INT 0
63642: PUSH
63643: LD_INT 0
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 0
63652: PUSH
63653: LD_INT 1
63655: NEG
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 1
63663: PUSH
63664: LD_INT 0
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 1
63673: PUSH
63674: LD_INT 1
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 0
63683: PUSH
63684: LD_INT 1
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 1
63693: NEG
63694: PUSH
63695: LD_INT 0
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 1
63704: NEG
63705: PUSH
63706: LD_INT 1
63708: NEG
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 1
63716: NEG
63717: PUSH
63718: LD_INT 2
63720: NEG
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: LD_INT 0
63728: PUSH
63729: LD_INT 2
63731: NEG
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: LD_INT 1
63739: PUSH
63740: LD_INT 1
63742: NEG
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PUSH
63748: LD_INT 2
63750: PUSH
63751: LD_INT 0
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 2
63760: PUSH
63761: LD_INT 1
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: LD_INT 1
63770: PUSH
63771: LD_INT 2
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: LD_INT 0
63780: PUSH
63781: LD_INT 2
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 1
63790: NEG
63791: PUSH
63792: LD_INT 1
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 2
63801: NEG
63802: PUSH
63803: LD_INT 0
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 2
63812: NEG
63813: PUSH
63814: LD_INT 1
63816: NEG
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 1
63824: NEG
63825: PUSH
63826: LD_INT 3
63828: NEG
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 0
63836: PUSH
63837: LD_INT 3
63839: NEG
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 1
63847: PUSH
63848: LD_INT 2
63850: NEG
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: PUSH
63856: LD_INT 2
63858: PUSH
63859: LD_INT 1
63861: NEG
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: LD_INT 3
63869: PUSH
63870: LD_INT 0
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: LD_INT 3
63879: PUSH
63880: LD_INT 1
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_INT 1
63889: PUSH
63890: LD_INT 3
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 0
63899: PUSH
63900: LD_INT 3
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: PUSH
63907: LD_INT 1
63909: NEG
63910: PUSH
63911: LD_INT 2
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: PUSH
63918: LD_INT 2
63920: NEG
63921: PUSH
63922: LD_INT 1
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 3
63931: NEG
63932: PUSH
63933: LD_INT 0
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 3
63942: NEG
63943: PUSH
63944: LD_INT 1
63946: NEG
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63983: LD_ADDR_VAR 0 44
63987: PUSH
63988: LD_INT 0
63990: PUSH
63991: LD_INT 0
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PUSH
63998: LD_INT 0
64000: PUSH
64001: LD_INT 1
64003: NEG
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 1
64011: PUSH
64012: LD_INT 0
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 1
64021: PUSH
64022: LD_INT 1
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 0
64031: PUSH
64032: LD_INT 1
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: PUSH
64039: LD_INT 1
64041: NEG
64042: PUSH
64043: LD_INT 0
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: LD_INT 1
64052: NEG
64053: PUSH
64054: LD_INT 1
64056: NEG
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 1
64064: NEG
64065: PUSH
64066: LD_INT 2
64068: NEG
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: PUSH
64074: LD_INT 1
64076: PUSH
64077: LD_INT 1
64079: NEG
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 2
64087: PUSH
64088: LD_INT 0
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 2
64097: PUSH
64098: LD_INT 1
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 2
64107: PUSH
64108: LD_INT 2
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: LD_INT 1
64117: PUSH
64118: LD_INT 2
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PUSH
64125: LD_INT 1
64127: NEG
64128: PUSH
64129: LD_INT 1
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 2
64138: NEG
64139: PUSH
64140: LD_INT 0
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: LD_INT 2
64149: NEG
64150: PUSH
64151: LD_INT 1
64153: NEG
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 2
64161: NEG
64162: PUSH
64163: LD_INT 2
64165: NEG
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 2
64173: NEG
64174: PUSH
64175: LD_INT 3
64177: NEG
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: PUSH
64183: LD_INT 2
64185: PUSH
64186: LD_INT 1
64188: NEG
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: LD_INT 3
64196: PUSH
64197: LD_INT 0
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: LD_INT 3
64206: PUSH
64207: LD_INT 1
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PUSH
64214: LD_INT 3
64216: PUSH
64217: LD_INT 2
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: PUSH
64224: LD_INT 3
64226: PUSH
64227: LD_INT 3
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: PUSH
64234: LD_INT 2
64236: PUSH
64237: LD_INT 3
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: PUSH
64244: LD_INT 2
64246: NEG
64247: PUSH
64248: LD_INT 1
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: PUSH
64255: LD_INT 3
64257: NEG
64258: PUSH
64259: LD_INT 0
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: LD_INT 3
64268: NEG
64269: PUSH
64270: LD_INT 1
64272: NEG
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 3
64280: NEG
64281: PUSH
64282: LD_INT 2
64284: NEG
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 3
64292: NEG
64293: PUSH
64294: LD_INT 3
64296: NEG
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: LIST
64306: LIST
64307: LIST
64308: LIST
64309: LIST
64310: LIST
64311: LIST
64312: LIST
64313: LIST
64314: LIST
64315: LIST
64316: LIST
64317: LIST
64318: LIST
64319: LIST
64320: LIST
64321: LIST
64322: LIST
64323: LIST
64324: LIST
64325: LIST
64326: LIST
64327: LIST
64328: LIST
64329: LIST
64330: LIST
64331: LIST
64332: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64333: LD_ADDR_VAR 0 45
64337: PUSH
64338: LD_INT 0
64340: PUSH
64341: LD_INT 0
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: LD_INT 0
64350: PUSH
64351: LD_INT 1
64353: NEG
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: LD_INT 1
64361: PUSH
64362: LD_INT 0
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: LD_INT 1
64371: PUSH
64372: LD_INT 1
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 0
64381: PUSH
64382: LD_INT 1
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: LD_INT 1
64391: NEG
64392: PUSH
64393: LD_INT 0
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 1
64402: NEG
64403: PUSH
64404: LD_INT 1
64406: NEG
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 1
64414: NEG
64415: PUSH
64416: LD_INT 2
64418: NEG
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 0
64426: PUSH
64427: LD_INT 2
64429: NEG
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: LD_INT 1
64437: PUSH
64438: LD_INT 1
64440: NEG
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: LD_INT 2
64448: PUSH
64449: LD_INT 1
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: LD_INT 2
64458: PUSH
64459: LD_INT 2
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: LD_INT 1
64468: PUSH
64469: LD_INT 2
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: LD_INT 0
64478: PUSH
64479: LD_INT 2
64481: PUSH
64482: EMPTY
64483: LIST
64484: LIST
64485: PUSH
64486: LD_INT 1
64488: NEG
64489: PUSH
64490: LD_INT 1
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: PUSH
64497: LD_INT 2
64499: NEG
64500: PUSH
64501: LD_INT 1
64503: NEG
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: PUSH
64509: LD_INT 2
64511: NEG
64512: PUSH
64513: LD_INT 2
64515: NEG
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 2
64523: NEG
64524: PUSH
64525: LD_INT 3
64527: NEG
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 1
64535: NEG
64536: PUSH
64537: LD_INT 3
64539: NEG
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 0
64547: PUSH
64548: LD_INT 3
64550: NEG
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: LD_INT 1
64558: PUSH
64559: LD_INT 2
64561: NEG
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: LD_INT 3
64569: PUSH
64570: LD_INT 2
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 3
64579: PUSH
64580: LD_INT 3
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: LD_INT 2
64589: PUSH
64590: LD_INT 3
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: LD_INT 1
64599: PUSH
64600: LD_INT 3
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: PUSH
64607: LD_INT 0
64609: PUSH
64610: LD_INT 3
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PUSH
64617: LD_INT 1
64619: NEG
64620: PUSH
64621: LD_INT 2
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: PUSH
64628: LD_INT 3
64630: NEG
64631: PUSH
64632: LD_INT 2
64634: NEG
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 3
64642: NEG
64643: PUSH
64644: LD_INT 3
64646: NEG
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: LIST
64672: LIST
64673: LIST
64674: LIST
64675: LIST
64676: LIST
64677: LIST
64678: LIST
64679: LIST
64680: LIST
64681: LIST
64682: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64683: LD_ADDR_VAR 0 46
64687: PUSH
64688: LD_INT 0
64690: PUSH
64691: LD_INT 0
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: LD_INT 0
64700: PUSH
64701: LD_INT 1
64703: NEG
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 1
64711: PUSH
64712: LD_INT 0
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: LD_INT 1
64721: PUSH
64722: LD_INT 1
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 0
64731: PUSH
64732: LD_INT 1
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PUSH
64739: LD_INT 1
64741: NEG
64742: PUSH
64743: LD_INT 0
64745: PUSH
64746: EMPTY
64747: LIST
64748: LIST
64749: PUSH
64750: LD_INT 1
64752: NEG
64753: PUSH
64754: LD_INT 1
64756: NEG
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: PUSH
64762: LD_INT 1
64764: NEG
64765: PUSH
64766: LD_INT 2
64768: NEG
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: PUSH
64774: LD_INT 0
64776: PUSH
64777: LD_INT 2
64779: NEG
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 1
64787: PUSH
64788: LD_INT 1
64790: NEG
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: LD_INT 2
64798: PUSH
64799: LD_INT 0
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: LD_INT 2
64808: PUSH
64809: LD_INT 1
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PUSH
64816: LD_INT 1
64818: PUSH
64819: LD_INT 2
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: LD_INT 0
64828: PUSH
64829: LD_INT 2
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: LD_INT 1
64838: NEG
64839: PUSH
64840: LD_INT 1
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: LD_INT 2
64849: NEG
64850: PUSH
64851: LD_INT 0
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: LD_INT 2
64860: NEG
64861: PUSH
64862: LD_INT 1
64864: NEG
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 1
64872: NEG
64873: PUSH
64874: LD_INT 3
64876: NEG
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: LD_INT 0
64884: PUSH
64885: LD_INT 3
64887: NEG
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: LD_INT 1
64895: PUSH
64896: LD_INT 2
64898: NEG
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 2
64906: PUSH
64907: LD_INT 1
64909: NEG
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 3
64917: PUSH
64918: LD_INT 0
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: LD_INT 3
64927: PUSH
64928: LD_INT 1
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: PUSH
64935: LD_INT 1
64937: PUSH
64938: LD_INT 3
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: LD_INT 0
64947: PUSH
64948: LD_INT 3
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: LD_INT 1
64957: NEG
64958: PUSH
64959: LD_INT 2
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: LD_INT 2
64968: NEG
64969: PUSH
64970: LD_INT 1
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: PUSH
64977: LD_INT 3
64979: NEG
64980: PUSH
64981: LD_INT 0
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: PUSH
64988: LD_INT 3
64990: NEG
64991: PUSH
64992: LD_INT 1
64994: NEG
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: LIST
65016: LIST
65017: LIST
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: LIST
65023: LIST
65024: LIST
65025: LIST
65026: LIST
65027: LIST
65028: LIST
65029: LIST
65030: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65031: LD_ADDR_VAR 0 47
65035: PUSH
65036: LD_INT 0
65038: PUSH
65039: LD_INT 0
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: PUSH
65046: LD_INT 0
65048: PUSH
65049: LD_INT 1
65051: NEG
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PUSH
65057: LD_INT 1
65059: PUSH
65060: LD_INT 0
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: LD_INT 1
65069: PUSH
65070: LD_INT 1
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: PUSH
65077: LD_INT 0
65079: PUSH
65080: LD_INT 1
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: PUSH
65087: LD_INT 1
65089: NEG
65090: PUSH
65091: LD_INT 0
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: PUSH
65098: LD_INT 1
65100: NEG
65101: PUSH
65102: LD_INT 1
65104: NEG
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: PUSH
65110: LD_INT 1
65112: NEG
65113: PUSH
65114: LD_INT 2
65116: NEG
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 0
65124: PUSH
65125: LD_INT 2
65127: NEG
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: LD_INT 1
65135: PUSH
65136: LD_INT 1
65138: NEG
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: LD_INT 2
65146: NEG
65147: PUSH
65148: LD_INT 1
65150: NEG
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: LD_INT 2
65158: NEG
65159: PUSH
65160: LD_INT 2
65162: NEG
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: LIST
65172: LIST
65173: LIST
65174: LIST
65175: LIST
65176: LIST
65177: LIST
65178: LIST
65179: LIST
65180: LIST
65181: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65182: LD_ADDR_VAR 0 48
65186: PUSH
65187: LD_INT 0
65189: PUSH
65190: LD_INT 0
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 0
65199: PUSH
65200: LD_INT 1
65202: NEG
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: LD_INT 1
65210: PUSH
65211: LD_INT 0
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: PUSH
65218: LD_INT 1
65220: PUSH
65221: LD_INT 1
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PUSH
65228: LD_INT 0
65230: PUSH
65231: LD_INT 1
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: LD_INT 1
65240: NEG
65241: PUSH
65242: LD_INT 0
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: LD_INT 1
65251: NEG
65252: PUSH
65253: LD_INT 1
65255: NEG
65256: PUSH
65257: EMPTY
65258: LIST
65259: LIST
65260: PUSH
65261: LD_INT 1
65263: NEG
65264: PUSH
65265: LD_INT 2
65267: NEG
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: LD_INT 0
65275: PUSH
65276: LD_INT 2
65278: NEG
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: PUSH
65284: LD_INT 1
65286: PUSH
65287: LD_INT 1
65289: NEG
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: PUSH
65295: LD_INT 2
65297: PUSH
65298: LD_INT 0
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: PUSH
65305: LD_INT 2
65307: PUSH
65308: LD_INT 1
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: LIST
65326: LIST
65327: LIST
65328: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65329: LD_ADDR_VAR 0 49
65333: PUSH
65334: LD_INT 0
65336: PUSH
65337: LD_INT 0
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: LD_INT 0
65346: PUSH
65347: LD_INT 1
65349: NEG
65350: PUSH
65351: EMPTY
65352: LIST
65353: LIST
65354: PUSH
65355: LD_INT 1
65357: PUSH
65358: LD_INT 0
65360: PUSH
65361: EMPTY
65362: LIST
65363: LIST
65364: PUSH
65365: LD_INT 1
65367: PUSH
65368: LD_INT 1
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: PUSH
65375: LD_INT 0
65377: PUSH
65378: LD_INT 1
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: LD_INT 1
65387: NEG
65388: PUSH
65389: LD_INT 0
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: PUSH
65396: LD_INT 1
65398: NEG
65399: PUSH
65400: LD_INT 1
65402: NEG
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 1
65410: PUSH
65411: LD_INT 1
65413: NEG
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: PUSH
65419: LD_INT 2
65421: PUSH
65422: LD_INT 0
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PUSH
65429: LD_INT 2
65431: PUSH
65432: LD_INT 1
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: LD_INT 2
65441: PUSH
65442: LD_INT 2
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: PUSH
65449: LD_INT 1
65451: PUSH
65452: LD_INT 2
65454: PUSH
65455: EMPTY
65456: LIST
65457: LIST
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: LIST
65463: LIST
65464: LIST
65465: LIST
65466: LIST
65467: LIST
65468: LIST
65469: LIST
65470: LIST
65471: LIST
65472: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65473: LD_ADDR_VAR 0 50
65477: PUSH
65478: LD_INT 0
65480: PUSH
65481: LD_INT 0
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: LD_INT 0
65490: PUSH
65491: LD_INT 1
65493: NEG
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: PUSH
65499: LD_INT 1
65501: PUSH
65502: LD_INT 0
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: LD_INT 1
65511: PUSH
65512: LD_INT 1
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: PUSH
65519: LD_INT 0
65521: PUSH
65522: LD_INT 1
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: LD_INT 1
65531: NEG
65532: PUSH
65533: LD_INT 0
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 1
65542: NEG
65543: PUSH
65544: LD_INT 1
65546: NEG
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: PUSH
65552: LD_INT 2
65554: PUSH
65555: LD_INT 1
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: PUSH
65562: LD_INT 2
65564: PUSH
65565: LD_INT 2
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: LD_INT 1
65574: PUSH
65575: LD_INT 2
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PUSH
65582: LD_INT 0
65584: PUSH
65585: LD_INT 2
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: LD_INT 1
65594: NEG
65595: PUSH
65596: LD_INT 1
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65617: LD_ADDR_VAR 0 51
65621: PUSH
65622: LD_INT 0
65624: PUSH
65625: LD_INT 0
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: LD_INT 0
65634: PUSH
65635: LD_INT 1
65637: NEG
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 1
65645: PUSH
65646: LD_INT 0
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: PUSH
65653: LD_INT 1
65655: PUSH
65656: LD_INT 1
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: PUSH
65663: LD_INT 0
65665: PUSH
65666: LD_INT 1
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: LD_INT 1
65675: NEG
65676: PUSH
65677: LD_INT 0
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: PUSH
65684: LD_INT 1
65686: NEG
65687: PUSH
65688: LD_INT 1
65690: NEG
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: LD_INT 1
65698: PUSH
65699: LD_INT 2
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PUSH
65706: LD_INT 0
65708: PUSH
65709: LD_INT 2
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: PUSH
65716: LD_INT 1
65718: NEG
65719: PUSH
65720: LD_INT 1
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: PUSH
65727: LD_INT 2
65729: NEG
65730: PUSH
65731: LD_INT 0
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: PUSH
65738: LD_INT 2
65740: NEG
65741: PUSH
65742: LD_INT 1
65744: NEG
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: LIST
65754: LIST
65755: LIST
65756: LIST
65757: LIST
65758: LIST
65759: LIST
65760: LIST
65761: LIST
65762: LIST
65763: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65764: LD_ADDR_VAR 0 52
65768: PUSH
65769: LD_INT 0
65771: PUSH
65772: LD_INT 0
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: PUSH
65779: LD_INT 0
65781: PUSH
65782: LD_INT 1
65784: NEG
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: LD_INT 1
65792: PUSH
65793: LD_INT 0
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: PUSH
65800: LD_INT 1
65802: PUSH
65803: LD_INT 1
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: PUSH
65810: LD_INT 0
65812: PUSH
65813: LD_INT 1
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: LD_INT 1
65822: NEG
65823: PUSH
65824: LD_INT 0
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 1
65833: NEG
65834: PUSH
65835: LD_INT 1
65837: NEG
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: PUSH
65843: LD_INT 1
65845: NEG
65846: PUSH
65847: LD_INT 2
65849: NEG
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: PUSH
65855: LD_INT 1
65857: NEG
65858: PUSH
65859: LD_INT 1
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PUSH
65866: LD_INT 2
65868: NEG
65869: PUSH
65870: LD_INT 0
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: PUSH
65877: LD_INT 2
65879: NEG
65880: PUSH
65881: LD_INT 1
65883: NEG
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: PUSH
65889: LD_INT 2
65891: NEG
65892: PUSH
65893: LD_INT 2
65895: NEG
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: PUSH
65901: EMPTY
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: LIST
65908: LIST
65909: LIST
65910: LIST
65911: LIST
65912: LIST
65913: LIST
65914: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65915: LD_ADDR_VAR 0 53
65919: PUSH
65920: LD_INT 0
65922: PUSH
65923: LD_INT 0
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: PUSH
65930: LD_INT 0
65932: PUSH
65933: LD_INT 1
65935: NEG
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: PUSH
65941: LD_INT 1
65943: PUSH
65944: LD_INT 0
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: PUSH
65951: LD_INT 1
65953: PUSH
65954: LD_INT 1
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: PUSH
65961: LD_INT 0
65963: PUSH
65964: LD_INT 1
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: PUSH
65971: LD_INT 1
65973: NEG
65974: PUSH
65975: LD_INT 0
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 1
65984: NEG
65985: PUSH
65986: LD_INT 1
65988: NEG
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 1
65996: NEG
65997: PUSH
65998: LD_INT 2
66000: NEG
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: PUSH
66006: LD_INT 0
66008: PUSH
66009: LD_INT 2
66011: NEG
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: PUSH
66017: LD_INT 1
66019: PUSH
66020: LD_INT 1
66022: NEG
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: PUSH
66028: LD_INT 2
66030: PUSH
66031: LD_INT 0
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: PUSH
66038: LD_INT 2
66040: PUSH
66041: LD_INT 1
66043: PUSH
66044: EMPTY
66045: LIST
66046: LIST
66047: PUSH
66048: LD_INT 2
66050: PUSH
66051: LD_INT 2
66053: PUSH
66054: EMPTY
66055: LIST
66056: LIST
66057: PUSH
66058: LD_INT 1
66060: PUSH
66061: LD_INT 2
66063: PUSH
66064: EMPTY
66065: LIST
66066: LIST
66067: PUSH
66068: LD_INT 0
66070: PUSH
66071: LD_INT 2
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: PUSH
66078: LD_INT 1
66080: NEG
66081: PUSH
66082: LD_INT 1
66084: PUSH
66085: EMPTY
66086: LIST
66087: LIST
66088: PUSH
66089: LD_INT 2
66091: NEG
66092: PUSH
66093: LD_INT 0
66095: PUSH
66096: EMPTY
66097: LIST
66098: LIST
66099: PUSH
66100: LD_INT 2
66102: NEG
66103: PUSH
66104: LD_INT 1
66106: NEG
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: PUSH
66112: LD_INT 2
66114: NEG
66115: PUSH
66116: LD_INT 2
66118: NEG
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66145: LD_ADDR_VAR 0 54
66149: PUSH
66150: LD_INT 0
66152: PUSH
66153: LD_INT 0
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: LD_INT 0
66162: PUSH
66163: LD_INT 1
66165: NEG
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: PUSH
66171: LD_INT 1
66173: PUSH
66174: LD_INT 0
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: LD_INT 1
66183: PUSH
66184: LD_INT 1
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: PUSH
66191: LD_INT 0
66193: PUSH
66194: LD_INT 1
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: PUSH
66201: LD_INT 1
66203: NEG
66204: PUSH
66205: LD_INT 0
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: PUSH
66212: LD_INT 1
66214: NEG
66215: PUSH
66216: LD_INT 1
66218: NEG
66219: PUSH
66220: EMPTY
66221: LIST
66222: LIST
66223: PUSH
66224: LD_INT 1
66226: NEG
66227: PUSH
66228: LD_INT 2
66230: NEG
66231: PUSH
66232: EMPTY
66233: LIST
66234: LIST
66235: PUSH
66236: LD_INT 0
66238: PUSH
66239: LD_INT 2
66241: NEG
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: PUSH
66247: LD_INT 1
66249: PUSH
66250: LD_INT 1
66252: NEG
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: PUSH
66258: LD_INT 2
66260: PUSH
66261: LD_INT 0
66263: PUSH
66264: EMPTY
66265: LIST
66266: LIST
66267: PUSH
66268: LD_INT 2
66270: PUSH
66271: LD_INT 1
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: PUSH
66278: LD_INT 2
66280: PUSH
66281: LD_INT 2
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: PUSH
66288: LD_INT 1
66290: PUSH
66291: LD_INT 2
66293: PUSH
66294: EMPTY
66295: LIST
66296: LIST
66297: PUSH
66298: LD_INT 0
66300: PUSH
66301: LD_INT 2
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: PUSH
66308: LD_INT 1
66310: NEG
66311: PUSH
66312: LD_INT 1
66314: PUSH
66315: EMPTY
66316: LIST
66317: LIST
66318: PUSH
66319: LD_INT 2
66321: NEG
66322: PUSH
66323: LD_INT 0
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PUSH
66330: LD_INT 2
66332: NEG
66333: PUSH
66334: LD_INT 1
66336: NEG
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: PUSH
66342: LD_INT 2
66344: NEG
66345: PUSH
66346: LD_INT 2
66348: NEG
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: LIST
66358: LIST
66359: LIST
66360: LIST
66361: LIST
66362: LIST
66363: LIST
66364: LIST
66365: LIST
66366: LIST
66367: LIST
66368: LIST
66369: LIST
66370: LIST
66371: LIST
66372: LIST
66373: LIST
66374: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66375: LD_ADDR_VAR 0 55
66379: PUSH
66380: LD_INT 0
66382: PUSH
66383: LD_INT 0
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: PUSH
66390: LD_INT 0
66392: PUSH
66393: LD_INT 1
66395: NEG
66396: PUSH
66397: EMPTY
66398: LIST
66399: LIST
66400: PUSH
66401: LD_INT 1
66403: PUSH
66404: LD_INT 0
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: PUSH
66411: LD_INT 1
66413: PUSH
66414: LD_INT 1
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: PUSH
66421: LD_INT 0
66423: PUSH
66424: LD_INT 1
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: PUSH
66431: LD_INT 1
66433: NEG
66434: PUSH
66435: LD_INT 0
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: PUSH
66442: LD_INT 1
66444: NEG
66445: PUSH
66446: LD_INT 1
66448: NEG
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: LD_INT 1
66456: NEG
66457: PUSH
66458: LD_INT 2
66460: NEG
66461: PUSH
66462: EMPTY
66463: LIST
66464: LIST
66465: PUSH
66466: LD_INT 0
66468: PUSH
66469: LD_INT 2
66471: NEG
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: LD_INT 1
66479: PUSH
66480: LD_INT 1
66482: NEG
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: PUSH
66488: LD_INT 2
66490: PUSH
66491: LD_INT 0
66493: PUSH
66494: EMPTY
66495: LIST
66496: LIST
66497: PUSH
66498: LD_INT 2
66500: PUSH
66501: LD_INT 1
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PUSH
66508: LD_INT 2
66510: PUSH
66511: LD_INT 2
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: LD_INT 1
66520: PUSH
66521: LD_INT 2
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: LD_INT 0
66530: PUSH
66531: LD_INT 2
66533: PUSH
66534: EMPTY
66535: LIST
66536: LIST
66537: PUSH
66538: LD_INT 1
66540: NEG
66541: PUSH
66542: LD_INT 1
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: PUSH
66549: LD_INT 2
66551: NEG
66552: PUSH
66553: LD_INT 0
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: PUSH
66560: LD_INT 2
66562: NEG
66563: PUSH
66564: LD_INT 1
66566: NEG
66567: PUSH
66568: EMPTY
66569: LIST
66570: LIST
66571: PUSH
66572: LD_INT 2
66574: NEG
66575: PUSH
66576: LD_INT 2
66578: NEG
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: LIST
66588: LIST
66589: LIST
66590: LIST
66591: LIST
66592: LIST
66593: LIST
66594: LIST
66595: LIST
66596: LIST
66597: LIST
66598: LIST
66599: LIST
66600: LIST
66601: LIST
66602: LIST
66603: LIST
66604: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66605: LD_ADDR_VAR 0 56
66609: PUSH
66610: LD_INT 0
66612: PUSH
66613: LD_INT 0
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: PUSH
66620: LD_INT 0
66622: PUSH
66623: LD_INT 1
66625: NEG
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: PUSH
66631: LD_INT 1
66633: PUSH
66634: LD_INT 0
66636: PUSH
66637: EMPTY
66638: LIST
66639: LIST
66640: PUSH
66641: LD_INT 1
66643: PUSH
66644: LD_INT 1
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: PUSH
66651: LD_INT 0
66653: PUSH
66654: LD_INT 1
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: PUSH
66661: LD_INT 1
66663: NEG
66664: PUSH
66665: LD_INT 0
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: PUSH
66672: LD_INT 1
66674: NEG
66675: PUSH
66676: LD_INT 1
66678: NEG
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 1
66686: NEG
66687: PUSH
66688: LD_INT 2
66690: NEG
66691: PUSH
66692: EMPTY
66693: LIST
66694: LIST
66695: PUSH
66696: LD_INT 0
66698: PUSH
66699: LD_INT 2
66701: NEG
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: PUSH
66707: LD_INT 1
66709: PUSH
66710: LD_INT 1
66712: NEG
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: LD_INT 2
66720: PUSH
66721: LD_INT 0
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: PUSH
66728: LD_INT 2
66730: PUSH
66731: LD_INT 1
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: PUSH
66738: LD_INT 2
66740: PUSH
66741: LD_INT 2
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: PUSH
66748: LD_INT 1
66750: PUSH
66751: LD_INT 2
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: PUSH
66758: LD_INT 0
66760: PUSH
66761: LD_INT 2
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: PUSH
66768: LD_INT 1
66770: NEG
66771: PUSH
66772: LD_INT 1
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PUSH
66779: LD_INT 2
66781: NEG
66782: PUSH
66783: LD_INT 0
66785: PUSH
66786: EMPTY
66787: LIST
66788: LIST
66789: PUSH
66790: LD_INT 2
66792: NEG
66793: PUSH
66794: LD_INT 1
66796: NEG
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: PUSH
66802: LD_INT 2
66804: NEG
66805: PUSH
66806: LD_INT 2
66808: NEG
66809: PUSH
66810: EMPTY
66811: LIST
66812: LIST
66813: PUSH
66814: EMPTY
66815: LIST
66816: LIST
66817: LIST
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: LIST
66823: LIST
66824: LIST
66825: LIST
66826: LIST
66827: LIST
66828: LIST
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66835: LD_ADDR_VAR 0 57
66839: PUSH
66840: LD_INT 0
66842: PUSH
66843: LD_INT 0
66845: PUSH
66846: EMPTY
66847: LIST
66848: LIST
66849: PUSH
66850: LD_INT 0
66852: PUSH
66853: LD_INT 1
66855: NEG
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: PUSH
66861: LD_INT 1
66863: PUSH
66864: LD_INT 0
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: PUSH
66871: LD_INT 1
66873: PUSH
66874: LD_INT 1
66876: PUSH
66877: EMPTY
66878: LIST
66879: LIST
66880: PUSH
66881: LD_INT 0
66883: PUSH
66884: LD_INT 1
66886: PUSH
66887: EMPTY
66888: LIST
66889: LIST
66890: PUSH
66891: LD_INT 1
66893: NEG
66894: PUSH
66895: LD_INT 0
66897: PUSH
66898: EMPTY
66899: LIST
66900: LIST
66901: PUSH
66902: LD_INT 1
66904: NEG
66905: PUSH
66906: LD_INT 1
66908: NEG
66909: PUSH
66910: EMPTY
66911: LIST
66912: LIST
66913: PUSH
66914: LD_INT 1
66916: NEG
66917: PUSH
66918: LD_INT 2
66920: NEG
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: PUSH
66926: LD_INT 0
66928: PUSH
66929: LD_INT 2
66931: NEG
66932: PUSH
66933: EMPTY
66934: LIST
66935: LIST
66936: PUSH
66937: LD_INT 1
66939: PUSH
66940: LD_INT 1
66942: NEG
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: PUSH
66948: LD_INT 2
66950: PUSH
66951: LD_INT 0
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: PUSH
66958: LD_INT 2
66960: PUSH
66961: LD_INT 1
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: PUSH
66968: LD_INT 2
66970: PUSH
66971: LD_INT 2
66973: PUSH
66974: EMPTY
66975: LIST
66976: LIST
66977: PUSH
66978: LD_INT 1
66980: PUSH
66981: LD_INT 2
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: PUSH
66988: LD_INT 0
66990: PUSH
66991: LD_INT 2
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: LD_INT 1
67000: NEG
67001: PUSH
67002: LD_INT 1
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 2
67011: NEG
67012: PUSH
67013: LD_INT 0
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: PUSH
67020: LD_INT 2
67022: NEG
67023: PUSH
67024: LD_INT 1
67026: NEG
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: LD_INT 2
67034: NEG
67035: PUSH
67036: LD_INT 2
67038: NEG
67039: PUSH
67040: EMPTY
67041: LIST
67042: LIST
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: LIST
67048: LIST
67049: LIST
67050: LIST
67051: LIST
67052: LIST
67053: LIST
67054: LIST
67055: LIST
67056: LIST
67057: LIST
67058: LIST
67059: LIST
67060: LIST
67061: LIST
67062: LIST
67063: LIST
67064: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67065: LD_ADDR_VAR 0 58
67069: PUSH
67070: LD_INT 0
67072: PUSH
67073: LD_INT 0
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: PUSH
67080: LD_INT 0
67082: PUSH
67083: LD_INT 1
67085: NEG
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PUSH
67091: LD_INT 1
67093: PUSH
67094: LD_INT 0
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: LD_INT 1
67103: PUSH
67104: LD_INT 1
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: PUSH
67111: LD_INT 0
67113: PUSH
67114: LD_INT 1
67116: PUSH
67117: EMPTY
67118: LIST
67119: LIST
67120: PUSH
67121: LD_INT 1
67123: NEG
67124: PUSH
67125: LD_INT 0
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: LD_INT 1
67134: NEG
67135: PUSH
67136: LD_INT 1
67138: NEG
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: PUSH
67144: LD_INT 1
67146: NEG
67147: PUSH
67148: LD_INT 2
67150: NEG
67151: PUSH
67152: EMPTY
67153: LIST
67154: LIST
67155: PUSH
67156: LD_INT 0
67158: PUSH
67159: LD_INT 2
67161: NEG
67162: PUSH
67163: EMPTY
67164: LIST
67165: LIST
67166: PUSH
67167: LD_INT 1
67169: PUSH
67170: LD_INT 1
67172: NEG
67173: PUSH
67174: EMPTY
67175: LIST
67176: LIST
67177: PUSH
67178: LD_INT 2
67180: PUSH
67181: LD_INT 0
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: PUSH
67188: LD_INT 2
67190: PUSH
67191: LD_INT 1
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: PUSH
67198: LD_INT 2
67200: PUSH
67201: LD_INT 2
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: PUSH
67208: LD_INT 1
67210: PUSH
67211: LD_INT 2
67213: PUSH
67214: EMPTY
67215: LIST
67216: LIST
67217: PUSH
67218: LD_INT 0
67220: PUSH
67221: LD_INT 2
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: PUSH
67228: LD_INT 1
67230: NEG
67231: PUSH
67232: LD_INT 1
67234: PUSH
67235: EMPTY
67236: LIST
67237: LIST
67238: PUSH
67239: LD_INT 2
67241: NEG
67242: PUSH
67243: LD_INT 0
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: PUSH
67250: LD_INT 2
67252: NEG
67253: PUSH
67254: LD_INT 1
67256: NEG
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: PUSH
67262: LD_INT 2
67264: NEG
67265: PUSH
67266: LD_INT 2
67268: NEG
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: LIST
67278: LIST
67279: LIST
67280: LIST
67281: LIST
67282: LIST
67283: LIST
67284: LIST
67285: LIST
67286: LIST
67287: LIST
67288: LIST
67289: LIST
67290: LIST
67291: LIST
67292: LIST
67293: LIST
67294: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67295: LD_ADDR_VAR 0 59
67299: PUSH
67300: LD_INT 0
67302: PUSH
67303: LD_INT 0
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: PUSH
67310: LD_INT 0
67312: PUSH
67313: LD_INT 1
67315: NEG
67316: PUSH
67317: EMPTY
67318: LIST
67319: LIST
67320: PUSH
67321: LD_INT 1
67323: PUSH
67324: LD_INT 0
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: PUSH
67331: LD_INT 1
67333: PUSH
67334: LD_INT 1
67336: PUSH
67337: EMPTY
67338: LIST
67339: LIST
67340: PUSH
67341: LD_INT 0
67343: PUSH
67344: LD_INT 1
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: PUSH
67351: LD_INT 1
67353: NEG
67354: PUSH
67355: LD_INT 0
67357: PUSH
67358: EMPTY
67359: LIST
67360: LIST
67361: PUSH
67362: LD_INT 1
67364: NEG
67365: PUSH
67366: LD_INT 1
67368: NEG
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: LIST
67378: LIST
67379: LIST
67380: LIST
67381: LIST
67382: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67383: LD_ADDR_VAR 0 60
67387: PUSH
67388: LD_INT 0
67390: PUSH
67391: LD_INT 0
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: PUSH
67398: LD_INT 0
67400: PUSH
67401: LD_INT 1
67403: NEG
67404: PUSH
67405: EMPTY
67406: LIST
67407: LIST
67408: PUSH
67409: LD_INT 1
67411: PUSH
67412: LD_INT 0
67414: PUSH
67415: EMPTY
67416: LIST
67417: LIST
67418: PUSH
67419: LD_INT 1
67421: PUSH
67422: LD_INT 1
67424: PUSH
67425: EMPTY
67426: LIST
67427: LIST
67428: PUSH
67429: LD_INT 0
67431: PUSH
67432: LD_INT 1
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: LD_INT 1
67441: NEG
67442: PUSH
67443: LD_INT 0
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: PUSH
67450: LD_INT 1
67452: NEG
67453: PUSH
67454: LD_INT 1
67456: NEG
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: EMPTY
67463: LIST
67464: LIST
67465: LIST
67466: LIST
67467: LIST
67468: LIST
67469: LIST
67470: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67471: LD_ADDR_VAR 0 61
67475: PUSH
67476: LD_INT 0
67478: PUSH
67479: LD_INT 0
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PUSH
67486: LD_INT 0
67488: PUSH
67489: LD_INT 1
67491: NEG
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: PUSH
67497: LD_INT 1
67499: PUSH
67500: LD_INT 0
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PUSH
67507: LD_INT 1
67509: PUSH
67510: LD_INT 1
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: PUSH
67517: LD_INT 0
67519: PUSH
67520: LD_INT 1
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: PUSH
67527: LD_INT 1
67529: NEG
67530: PUSH
67531: LD_INT 0
67533: PUSH
67534: EMPTY
67535: LIST
67536: LIST
67537: PUSH
67538: LD_INT 1
67540: NEG
67541: PUSH
67542: LD_INT 1
67544: NEG
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PUSH
67550: EMPTY
67551: LIST
67552: LIST
67553: LIST
67554: LIST
67555: LIST
67556: LIST
67557: LIST
67558: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67559: LD_ADDR_VAR 0 62
67563: PUSH
67564: LD_INT 0
67566: PUSH
67567: LD_INT 0
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: PUSH
67574: LD_INT 0
67576: PUSH
67577: LD_INT 1
67579: NEG
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PUSH
67585: LD_INT 1
67587: PUSH
67588: LD_INT 0
67590: PUSH
67591: EMPTY
67592: LIST
67593: LIST
67594: PUSH
67595: LD_INT 1
67597: PUSH
67598: LD_INT 1
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: PUSH
67605: LD_INT 0
67607: PUSH
67608: LD_INT 1
67610: PUSH
67611: EMPTY
67612: LIST
67613: LIST
67614: PUSH
67615: LD_INT 1
67617: NEG
67618: PUSH
67619: LD_INT 0
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: PUSH
67626: LD_INT 1
67628: NEG
67629: PUSH
67630: LD_INT 1
67632: NEG
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: PUSH
67638: EMPTY
67639: LIST
67640: LIST
67641: LIST
67642: LIST
67643: LIST
67644: LIST
67645: LIST
67646: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67647: LD_ADDR_VAR 0 63
67651: PUSH
67652: LD_INT 0
67654: PUSH
67655: LD_INT 0
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: PUSH
67662: LD_INT 0
67664: PUSH
67665: LD_INT 1
67667: NEG
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: PUSH
67673: LD_INT 1
67675: PUSH
67676: LD_INT 0
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: PUSH
67683: LD_INT 1
67685: PUSH
67686: LD_INT 1
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: PUSH
67693: LD_INT 0
67695: PUSH
67696: LD_INT 1
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: PUSH
67703: LD_INT 1
67705: NEG
67706: PUSH
67707: LD_INT 0
67709: PUSH
67710: EMPTY
67711: LIST
67712: LIST
67713: PUSH
67714: LD_INT 1
67716: NEG
67717: PUSH
67718: LD_INT 1
67720: NEG
67721: PUSH
67722: EMPTY
67723: LIST
67724: LIST
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67735: LD_ADDR_VAR 0 64
67739: PUSH
67740: LD_INT 0
67742: PUSH
67743: LD_INT 0
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: PUSH
67750: LD_INT 0
67752: PUSH
67753: LD_INT 1
67755: NEG
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 1
67763: PUSH
67764: LD_INT 0
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: LD_INT 1
67773: PUSH
67774: LD_INT 1
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: PUSH
67781: LD_INT 0
67783: PUSH
67784: LD_INT 1
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: PUSH
67791: LD_INT 1
67793: NEG
67794: PUSH
67795: LD_INT 0
67797: PUSH
67798: EMPTY
67799: LIST
67800: LIST
67801: PUSH
67802: LD_INT 1
67804: NEG
67805: PUSH
67806: LD_INT 1
67808: NEG
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PUSH
67814: EMPTY
67815: LIST
67816: LIST
67817: LIST
67818: LIST
67819: LIST
67820: LIST
67821: LIST
67822: ST_TO_ADDR
// end ; 1 :
67823: GO 73720
67825: LD_INT 1
67827: DOUBLE
67828: EQUAL
67829: IFTRUE 67833
67831: GO 70456
67833: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67834: LD_ADDR_VAR 0 11
67838: PUSH
67839: LD_INT 1
67841: NEG
67842: PUSH
67843: LD_INT 3
67845: NEG
67846: PUSH
67847: EMPTY
67848: LIST
67849: LIST
67850: PUSH
67851: LD_INT 0
67853: PUSH
67854: LD_INT 3
67856: NEG
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: PUSH
67862: LD_INT 1
67864: PUSH
67865: LD_INT 2
67867: NEG
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: LIST
67877: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67878: LD_ADDR_VAR 0 12
67882: PUSH
67883: LD_INT 2
67885: PUSH
67886: LD_INT 1
67888: NEG
67889: PUSH
67890: EMPTY
67891: LIST
67892: LIST
67893: PUSH
67894: LD_INT 3
67896: PUSH
67897: LD_INT 0
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: PUSH
67904: LD_INT 3
67906: PUSH
67907: LD_INT 1
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: LIST
67918: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67919: LD_ADDR_VAR 0 13
67923: PUSH
67924: LD_INT 3
67926: PUSH
67927: LD_INT 2
67929: PUSH
67930: EMPTY
67931: LIST
67932: LIST
67933: PUSH
67934: LD_INT 3
67936: PUSH
67937: LD_INT 3
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: PUSH
67944: LD_INT 2
67946: PUSH
67947: LD_INT 3
67949: PUSH
67950: EMPTY
67951: LIST
67952: LIST
67953: PUSH
67954: EMPTY
67955: LIST
67956: LIST
67957: LIST
67958: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67959: LD_ADDR_VAR 0 14
67963: PUSH
67964: LD_INT 1
67966: PUSH
67967: LD_INT 3
67969: PUSH
67970: EMPTY
67971: LIST
67972: LIST
67973: PUSH
67974: LD_INT 0
67976: PUSH
67977: LD_INT 3
67979: PUSH
67980: EMPTY
67981: LIST
67982: LIST
67983: PUSH
67984: LD_INT 1
67986: NEG
67987: PUSH
67988: LD_INT 2
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: LIST
67999: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68000: LD_ADDR_VAR 0 15
68004: PUSH
68005: LD_INT 2
68007: NEG
68008: PUSH
68009: LD_INT 1
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: PUSH
68016: LD_INT 3
68018: NEG
68019: PUSH
68020: LD_INT 0
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: PUSH
68027: LD_INT 3
68029: NEG
68030: PUSH
68031: LD_INT 1
68033: NEG
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: LIST
68043: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68044: LD_ADDR_VAR 0 16
68048: PUSH
68049: LD_INT 2
68051: NEG
68052: PUSH
68053: LD_INT 3
68055: NEG
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: PUSH
68061: LD_INT 3
68063: NEG
68064: PUSH
68065: LD_INT 2
68067: NEG
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: PUSH
68073: LD_INT 3
68075: NEG
68076: PUSH
68077: LD_INT 3
68079: NEG
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: PUSH
68085: EMPTY
68086: LIST
68087: LIST
68088: LIST
68089: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68090: LD_ADDR_VAR 0 17
68094: PUSH
68095: LD_INT 1
68097: NEG
68098: PUSH
68099: LD_INT 3
68101: NEG
68102: PUSH
68103: EMPTY
68104: LIST
68105: LIST
68106: PUSH
68107: LD_INT 0
68109: PUSH
68110: LD_INT 3
68112: NEG
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: PUSH
68118: LD_INT 1
68120: PUSH
68121: LD_INT 2
68123: NEG
68124: PUSH
68125: EMPTY
68126: LIST
68127: LIST
68128: PUSH
68129: EMPTY
68130: LIST
68131: LIST
68132: LIST
68133: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68134: LD_ADDR_VAR 0 18
68138: PUSH
68139: LD_INT 2
68141: PUSH
68142: LD_INT 1
68144: NEG
68145: PUSH
68146: EMPTY
68147: LIST
68148: LIST
68149: PUSH
68150: LD_INT 3
68152: PUSH
68153: LD_INT 0
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: PUSH
68160: LD_INT 3
68162: PUSH
68163: LD_INT 1
68165: PUSH
68166: EMPTY
68167: LIST
68168: LIST
68169: PUSH
68170: EMPTY
68171: LIST
68172: LIST
68173: LIST
68174: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68175: LD_ADDR_VAR 0 19
68179: PUSH
68180: LD_INT 3
68182: PUSH
68183: LD_INT 2
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: PUSH
68190: LD_INT 3
68192: PUSH
68193: LD_INT 3
68195: PUSH
68196: EMPTY
68197: LIST
68198: LIST
68199: PUSH
68200: LD_INT 2
68202: PUSH
68203: LD_INT 3
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: EMPTY
68211: LIST
68212: LIST
68213: LIST
68214: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68215: LD_ADDR_VAR 0 20
68219: PUSH
68220: LD_INT 1
68222: PUSH
68223: LD_INT 3
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 0
68232: PUSH
68233: LD_INT 3
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: LD_INT 1
68242: NEG
68243: PUSH
68244: LD_INT 2
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: LIST
68255: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68256: LD_ADDR_VAR 0 21
68260: PUSH
68261: LD_INT 2
68263: NEG
68264: PUSH
68265: LD_INT 1
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: PUSH
68272: LD_INT 3
68274: NEG
68275: PUSH
68276: LD_INT 0
68278: PUSH
68279: EMPTY
68280: LIST
68281: LIST
68282: PUSH
68283: LD_INT 3
68285: NEG
68286: PUSH
68287: LD_INT 1
68289: NEG
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: EMPTY
68296: LIST
68297: LIST
68298: LIST
68299: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68300: LD_ADDR_VAR 0 22
68304: PUSH
68305: LD_INT 2
68307: NEG
68308: PUSH
68309: LD_INT 3
68311: NEG
68312: PUSH
68313: EMPTY
68314: LIST
68315: LIST
68316: PUSH
68317: LD_INT 3
68319: NEG
68320: PUSH
68321: LD_INT 2
68323: NEG
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: PUSH
68329: LD_INT 3
68331: NEG
68332: PUSH
68333: LD_INT 3
68335: NEG
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: LIST
68345: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
68346: LD_ADDR_VAR 0 23
68350: PUSH
68351: LD_INT 0
68353: PUSH
68354: LD_INT 3
68356: NEG
68357: PUSH
68358: EMPTY
68359: LIST
68360: LIST
68361: PUSH
68362: LD_INT 1
68364: NEG
68365: PUSH
68366: LD_INT 4
68368: NEG
68369: PUSH
68370: EMPTY
68371: LIST
68372: LIST
68373: PUSH
68374: LD_INT 1
68376: PUSH
68377: LD_INT 3
68379: NEG
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: PUSH
68385: EMPTY
68386: LIST
68387: LIST
68388: LIST
68389: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
68390: LD_ADDR_VAR 0 24
68394: PUSH
68395: LD_INT 3
68397: PUSH
68398: LD_INT 0
68400: PUSH
68401: EMPTY
68402: LIST
68403: LIST
68404: PUSH
68405: LD_INT 3
68407: PUSH
68408: LD_INT 1
68410: NEG
68411: PUSH
68412: EMPTY
68413: LIST
68414: LIST
68415: PUSH
68416: LD_INT 4
68418: PUSH
68419: LD_INT 1
68421: PUSH
68422: EMPTY
68423: LIST
68424: LIST
68425: PUSH
68426: EMPTY
68427: LIST
68428: LIST
68429: LIST
68430: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
68431: LD_ADDR_VAR 0 25
68435: PUSH
68436: LD_INT 3
68438: PUSH
68439: LD_INT 3
68441: PUSH
68442: EMPTY
68443: LIST
68444: LIST
68445: PUSH
68446: LD_INT 4
68448: PUSH
68449: LD_INT 3
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: PUSH
68456: LD_INT 3
68458: PUSH
68459: LD_INT 4
68461: PUSH
68462: EMPTY
68463: LIST
68464: LIST
68465: PUSH
68466: EMPTY
68467: LIST
68468: LIST
68469: LIST
68470: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
68471: LD_ADDR_VAR 0 26
68475: PUSH
68476: LD_INT 0
68478: PUSH
68479: LD_INT 3
68481: PUSH
68482: EMPTY
68483: LIST
68484: LIST
68485: PUSH
68486: LD_INT 1
68488: PUSH
68489: LD_INT 4
68491: PUSH
68492: EMPTY
68493: LIST
68494: LIST
68495: PUSH
68496: LD_INT 1
68498: NEG
68499: PUSH
68500: LD_INT 3
68502: PUSH
68503: EMPTY
68504: LIST
68505: LIST
68506: PUSH
68507: EMPTY
68508: LIST
68509: LIST
68510: LIST
68511: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
68512: LD_ADDR_VAR 0 27
68516: PUSH
68517: LD_INT 3
68519: NEG
68520: PUSH
68521: LD_INT 0
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: PUSH
68528: LD_INT 3
68530: NEG
68531: PUSH
68532: LD_INT 1
68534: PUSH
68535: EMPTY
68536: LIST
68537: LIST
68538: PUSH
68539: LD_INT 4
68541: NEG
68542: PUSH
68543: LD_INT 1
68545: NEG
68546: PUSH
68547: EMPTY
68548: LIST
68549: LIST
68550: PUSH
68551: EMPTY
68552: LIST
68553: LIST
68554: LIST
68555: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
68556: LD_ADDR_VAR 0 28
68560: PUSH
68561: LD_INT 3
68563: NEG
68564: PUSH
68565: LD_INT 3
68567: NEG
68568: PUSH
68569: EMPTY
68570: LIST
68571: LIST
68572: PUSH
68573: LD_INT 3
68575: NEG
68576: PUSH
68577: LD_INT 4
68579: NEG
68580: PUSH
68581: EMPTY
68582: LIST
68583: LIST
68584: PUSH
68585: LD_INT 4
68587: NEG
68588: PUSH
68589: LD_INT 3
68591: NEG
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: PUSH
68597: EMPTY
68598: LIST
68599: LIST
68600: LIST
68601: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
68602: LD_ADDR_VAR 0 29
68606: PUSH
68607: LD_INT 1
68609: NEG
68610: PUSH
68611: LD_INT 3
68613: NEG
68614: PUSH
68615: EMPTY
68616: LIST
68617: LIST
68618: PUSH
68619: LD_INT 0
68621: PUSH
68622: LD_INT 3
68624: NEG
68625: PUSH
68626: EMPTY
68627: LIST
68628: LIST
68629: PUSH
68630: LD_INT 1
68632: PUSH
68633: LD_INT 2
68635: NEG
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: PUSH
68641: LD_INT 1
68643: NEG
68644: PUSH
68645: LD_INT 4
68647: NEG
68648: PUSH
68649: EMPTY
68650: LIST
68651: LIST
68652: PUSH
68653: LD_INT 0
68655: PUSH
68656: LD_INT 4
68658: NEG
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: PUSH
68664: LD_INT 1
68666: PUSH
68667: LD_INT 3
68669: NEG
68670: PUSH
68671: EMPTY
68672: LIST
68673: LIST
68674: PUSH
68675: LD_INT 1
68677: NEG
68678: PUSH
68679: LD_INT 5
68681: NEG
68682: PUSH
68683: EMPTY
68684: LIST
68685: LIST
68686: PUSH
68687: LD_INT 0
68689: PUSH
68690: LD_INT 5
68692: NEG
68693: PUSH
68694: EMPTY
68695: LIST
68696: LIST
68697: PUSH
68698: LD_INT 1
68700: PUSH
68701: LD_INT 4
68703: NEG
68704: PUSH
68705: EMPTY
68706: LIST
68707: LIST
68708: PUSH
68709: LD_INT 1
68711: NEG
68712: PUSH
68713: LD_INT 6
68715: NEG
68716: PUSH
68717: EMPTY
68718: LIST
68719: LIST
68720: PUSH
68721: LD_INT 0
68723: PUSH
68724: LD_INT 6
68726: NEG
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: PUSH
68732: LD_INT 1
68734: PUSH
68735: LD_INT 5
68737: NEG
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: PUSH
68743: EMPTY
68744: LIST
68745: LIST
68746: LIST
68747: LIST
68748: LIST
68749: LIST
68750: LIST
68751: LIST
68752: LIST
68753: LIST
68754: LIST
68755: LIST
68756: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
68757: LD_ADDR_VAR 0 30
68761: PUSH
68762: LD_INT 2
68764: PUSH
68765: LD_INT 1
68767: NEG
68768: PUSH
68769: EMPTY
68770: LIST
68771: LIST
68772: PUSH
68773: LD_INT 3
68775: PUSH
68776: LD_INT 0
68778: PUSH
68779: EMPTY
68780: LIST
68781: LIST
68782: PUSH
68783: LD_INT 3
68785: PUSH
68786: LD_INT 1
68788: PUSH
68789: EMPTY
68790: LIST
68791: LIST
68792: PUSH
68793: LD_INT 3
68795: PUSH
68796: LD_INT 1
68798: NEG
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: PUSH
68804: LD_INT 4
68806: PUSH
68807: LD_INT 0
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: PUSH
68814: LD_INT 4
68816: PUSH
68817: LD_INT 1
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: PUSH
68824: LD_INT 4
68826: PUSH
68827: LD_INT 1
68829: NEG
68830: PUSH
68831: EMPTY
68832: LIST
68833: LIST
68834: PUSH
68835: LD_INT 5
68837: PUSH
68838: LD_INT 0
68840: PUSH
68841: EMPTY
68842: LIST
68843: LIST
68844: PUSH
68845: LD_INT 5
68847: PUSH
68848: LD_INT 1
68850: PUSH
68851: EMPTY
68852: LIST
68853: LIST
68854: PUSH
68855: LD_INT 5
68857: PUSH
68858: LD_INT 1
68860: NEG
68861: PUSH
68862: EMPTY
68863: LIST
68864: LIST
68865: PUSH
68866: LD_INT 6
68868: PUSH
68869: LD_INT 0
68871: PUSH
68872: EMPTY
68873: LIST
68874: LIST
68875: PUSH
68876: LD_INT 6
68878: PUSH
68879: LD_INT 1
68881: PUSH
68882: EMPTY
68883: LIST
68884: LIST
68885: PUSH
68886: EMPTY
68887: LIST
68888: LIST
68889: LIST
68890: LIST
68891: LIST
68892: LIST
68893: LIST
68894: LIST
68895: LIST
68896: LIST
68897: LIST
68898: LIST
68899: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
68900: LD_ADDR_VAR 0 31
68904: PUSH
68905: LD_INT 3
68907: PUSH
68908: LD_INT 2
68910: PUSH
68911: EMPTY
68912: LIST
68913: LIST
68914: PUSH
68915: LD_INT 3
68917: PUSH
68918: LD_INT 3
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: PUSH
68925: LD_INT 2
68927: PUSH
68928: LD_INT 3
68930: PUSH
68931: EMPTY
68932: LIST
68933: LIST
68934: PUSH
68935: LD_INT 4
68937: PUSH
68938: LD_INT 3
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: PUSH
68945: LD_INT 4
68947: PUSH
68948: LD_INT 4
68950: PUSH
68951: EMPTY
68952: LIST
68953: LIST
68954: PUSH
68955: LD_INT 3
68957: PUSH
68958: LD_INT 4
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: PUSH
68965: LD_INT 5
68967: PUSH
68968: LD_INT 4
68970: PUSH
68971: EMPTY
68972: LIST
68973: LIST
68974: PUSH
68975: LD_INT 5
68977: PUSH
68978: LD_INT 5
68980: PUSH
68981: EMPTY
68982: LIST
68983: LIST
68984: PUSH
68985: LD_INT 4
68987: PUSH
68988: LD_INT 5
68990: PUSH
68991: EMPTY
68992: LIST
68993: LIST
68994: PUSH
68995: LD_INT 6
68997: PUSH
68998: LD_INT 5
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: PUSH
69005: LD_INT 6
69007: PUSH
69008: LD_INT 6
69010: PUSH
69011: EMPTY
69012: LIST
69013: LIST
69014: PUSH
69015: LD_INT 5
69017: PUSH
69018: LD_INT 6
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: LIST
69029: LIST
69030: LIST
69031: LIST
69032: LIST
69033: LIST
69034: LIST
69035: LIST
69036: LIST
69037: LIST
69038: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
69039: LD_ADDR_VAR 0 32
69043: PUSH
69044: LD_INT 1
69046: PUSH
69047: LD_INT 3
69049: PUSH
69050: EMPTY
69051: LIST
69052: LIST
69053: PUSH
69054: LD_INT 0
69056: PUSH
69057: LD_INT 3
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: PUSH
69064: LD_INT 1
69066: NEG
69067: PUSH
69068: LD_INT 2
69070: PUSH
69071: EMPTY
69072: LIST
69073: LIST
69074: PUSH
69075: LD_INT 1
69077: PUSH
69078: LD_INT 4
69080: PUSH
69081: EMPTY
69082: LIST
69083: LIST
69084: PUSH
69085: LD_INT 0
69087: PUSH
69088: LD_INT 4
69090: PUSH
69091: EMPTY
69092: LIST
69093: LIST
69094: PUSH
69095: LD_INT 1
69097: NEG
69098: PUSH
69099: LD_INT 3
69101: PUSH
69102: EMPTY
69103: LIST
69104: LIST
69105: PUSH
69106: LD_INT 1
69108: PUSH
69109: LD_INT 5
69111: PUSH
69112: EMPTY
69113: LIST
69114: LIST
69115: PUSH
69116: LD_INT 0
69118: PUSH
69119: LD_INT 5
69121: PUSH
69122: EMPTY
69123: LIST
69124: LIST
69125: PUSH
69126: LD_INT 1
69128: NEG
69129: PUSH
69130: LD_INT 4
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: PUSH
69137: LD_INT 1
69139: PUSH
69140: LD_INT 6
69142: PUSH
69143: EMPTY
69144: LIST
69145: LIST
69146: PUSH
69147: LD_INT 0
69149: PUSH
69150: LD_INT 6
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: PUSH
69157: LD_INT 1
69159: NEG
69160: PUSH
69161: LD_INT 5
69163: PUSH
69164: EMPTY
69165: LIST
69166: LIST
69167: PUSH
69168: EMPTY
69169: LIST
69170: LIST
69171: LIST
69172: LIST
69173: LIST
69174: LIST
69175: LIST
69176: LIST
69177: LIST
69178: LIST
69179: LIST
69180: LIST
69181: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
69182: LD_ADDR_VAR 0 33
69186: PUSH
69187: LD_INT 2
69189: NEG
69190: PUSH
69191: LD_INT 1
69193: PUSH
69194: EMPTY
69195: LIST
69196: LIST
69197: PUSH
69198: LD_INT 3
69200: NEG
69201: PUSH
69202: LD_INT 0
69204: PUSH
69205: EMPTY
69206: LIST
69207: LIST
69208: PUSH
69209: LD_INT 3
69211: NEG
69212: PUSH
69213: LD_INT 1
69215: NEG
69216: PUSH
69217: EMPTY
69218: LIST
69219: LIST
69220: PUSH
69221: LD_INT 3
69223: NEG
69224: PUSH
69225: LD_INT 1
69227: PUSH
69228: EMPTY
69229: LIST
69230: LIST
69231: PUSH
69232: LD_INT 4
69234: NEG
69235: PUSH
69236: LD_INT 0
69238: PUSH
69239: EMPTY
69240: LIST
69241: LIST
69242: PUSH
69243: LD_INT 4
69245: NEG
69246: PUSH
69247: LD_INT 1
69249: NEG
69250: PUSH
69251: EMPTY
69252: LIST
69253: LIST
69254: PUSH
69255: LD_INT 4
69257: NEG
69258: PUSH
69259: LD_INT 1
69261: PUSH
69262: EMPTY
69263: LIST
69264: LIST
69265: PUSH
69266: LD_INT 5
69268: NEG
69269: PUSH
69270: LD_INT 0
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: PUSH
69277: LD_INT 5
69279: NEG
69280: PUSH
69281: LD_INT 1
69283: NEG
69284: PUSH
69285: EMPTY
69286: LIST
69287: LIST
69288: PUSH
69289: LD_INT 5
69291: NEG
69292: PUSH
69293: LD_INT 1
69295: PUSH
69296: EMPTY
69297: LIST
69298: LIST
69299: PUSH
69300: LD_INT 6
69302: NEG
69303: PUSH
69304: LD_INT 0
69306: PUSH
69307: EMPTY
69308: LIST
69309: LIST
69310: PUSH
69311: LD_INT 6
69313: NEG
69314: PUSH
69315: LD_INT 1
69317: NEG
69318: PUSH
69319: EMPTY
69320: LIST
69321: LIST
69322: PUSH
69323: EMPTY
69324: LIST
69325: LIST
69326: LIST
69327: LIST
69328: LIST
69329: LIST
69330: LIST
69331: LIST
69332: LIST
69333: LIST
69334: LIST
69335: LIST
69336: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
69337: LD_ADDR_VAR 0 34
69341: PUSH
69342: LD_INT 2
69344: NEG
69345: PUSH
69346: LD_INT 3
69348: NEG
69349: PUSH
69350: EMPTY
69351: LIST
69352: LIST
69353: PUSH
69354: LD_INT 3
69356: NEG
69357: PUSH
69358: LD_INT 2
69360: NEG
69361: PUSH
69362: EMPTY
69363: LIST
69364: LIST
69365: PUSH
69366: LD_INT 3
69368: NEG
69369: PUSH
69370: LD_INT 3
69372: NEG
69373: PUSH
69374: EMPTY
69375: LIST
69376: LIST
69377: PUSH
69378: LD_INT 3
69380: NEG
69381: PUSH
69382: LD_INT 4
69384: NEG
69385: PUSH
69386: EMPTY
69387: LIST
69388: LIST
69389: PUSH
69390: LD_INT 4
69392: NEG
69393: PUSH
69394: LD_INT 3
69396: NEG
69397: PUSH
69398: EMPTY
69399: LIST
69400: LIST
69401: PUSH
69402: LD_INT 4
69404: NEG
69405: PUSH
69406: LD_INT 4
69408: NEG
69409: PUSH
69410: EMPTY
69411: LIST
69412: LIST
69413: PUSH
69414: LD_INT 4
69416: NEG
69417: PUSH
69418: LD_INT 5
69420: NEG
69421: PUSH
69422: EMPTY
69423: LIST
69424: LIST
69425: PUSH
69426: LD_INT 5
69428: NEG
69429: PUSH
69430: LD_INT 4
69432: NEG
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: PUSH
69438: LD_INT 5
69440: NEG
69441: PUSH
69442: LD_INT 5
69444: NEG
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: PUSH
69450: LD_INT 5
69452: NEG
69453: PUSH
69454: LD_INT 6
69456: NEG
69457: PUSH
69458: EMPTY
69459: LIST
69460: LIST
69461: PUSH
69462: LD_INT 6
69464: NEG
69465: PUSH
69466: LD_INT 5
69468: NEG
69469: PUSH
69470: EMPTY
69471: LIST
69472: LIST
69473: PUSH
69474: LD_INT 6
69476: NEG
69477: PUSH
69478: LD_INT 6
69480: NEG
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: PUSH
69486: EMPTY
69487: LIST
69488: LIST
69489: LIST
69490: LIST
69491: LIST
69492: LIST
69493: LIST
69494: LIST
69495: LIST
69496: LIST
69497: LIST
69498: LIST
69499: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
69500: LD_ADDR_VAR 0 41
69504: PUSH
69505: LD_INT 0
69507: PUSH
69508: LD_INT 2
69510: NEG
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: PUSH
69516: LD_INT 1
69518: NEG
69519: PUSH
69520: LD_INT 3
69522: NEG
69523: PUSH
69524: EMPTY
69525: LIST
69526: LIST
69527: PUSH
69528: LD_INT 1
69530: PUSH
69531: LD_INT 2
69533: NEG
69534: PUSH
69535: EMPTY
69536: LIST
69537: LIST
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: LIST
69543: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
69544: LD_ADDR_VAR 0 42
69548: PUSH
69549: LD_INT 2
69551: PUSH
69552: LD_INT 0
69554: PUSH
69555: EMPTY
69556: LIST
69557: LIST
69558: PUSH
69559: LD_INT 2
69561: PUSH
69562: LD_INT 1
69564: NEG
69565: PUSH
69566: EMPTY
69567: LIST
69568: LIST
69569: PUSH
69570: LD_INT 3
69572: PUSH
69573: LD_INT 1
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: LIST
69584: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
69585: LD_ADDR_VAR 0 43
69589: PUSH
69590: LD_INT 2
69592: PUSH
69593: LD_INT 2
69595: PUSH
69596: EMPTY
69597: LIST
69598: LIST
69599: PUSH
69600: LD_INT 3
69602: PUSH
69603: LD_INT 2
69605: PUSH
69606: EMPTY
69607: LIST
69608: LIST
69609: PUSH
69610: LD_INT 2
69612: PUSH
69613: LD_INT 3
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: EMPTY
69621: LIST
69622: LIST
69623: LIST
69624: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
69625: LD_ADDR_VAR 0 44
69629: PUSH
69630: LD_INT 0
69632: PUSH
69633: LD_INT 2
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: PUSH
69640: LD_INT 1
69642: PUSH
69643: LD_INT 3
69645: PUSH
69646: EMPTY
69647: LIST
69648: LIST
69649: PUSH
69650: LD_INT 1
69652: NEG
69653: PUSH
69654: LD_INT 2
69656: PUSH
69657: EMPTY
69658: LIST
69659: LIST
69660: PUSH
69661: EMPTY
69662: LIST
69663: LIST
69664: LIST
69665: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69666: LD_ADDR_VAR 0 45
69670: PUSH
69671: LD_INT 2
69673: NEG
69674: PUSH
69675: LD_INT 0
69677: PUSH
69678: EMPTY
69679: LIST
69680: LIST
69681: PUSH
69682: LD_INT 2
69684: NEG
69685: PUSH
69686: LD_INT 1
69688: PUSH
69689: EMPTY
69690: LIST
69691: LIST
69692: PUSH
69693: LD_INT 3
69695: NEG
69696: PUSH
69697: LD_INT 1
69699: NEG
69700: PUSH
69701: EMPTY
69702: LIST
69703: LIST
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: LIST
69709: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
69710: LD_ADDR_VAR 0 46
69714: PUSH
69715: LD_INT 2
69717: NEG
69718: PUSH
69719: LD_INT 2
69721: NEG
69722: PUSH
69723: EMPTY
69724: LIST
69725: LIST
69726: PUSH
69727: LD_INT 2
69729: NEG
69730: PUSH
69731: LD_INT 3
69733: NEG
69734: PUSH
69735: EMPTY
69736: LIST
69737: LIST
69738: PUSH
69739: LD_INT 3
69741: NEG
69742: PUSH
69743: LD_INT 2
69745: NEG
69746: PUSH
69747: EMPTY
69748: LIST
69749: LIST
69750: PUSH
69751: EMPTY
69752: LIST
69753: LIST
69754: LIST
69755: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
69756: LD_ADDR_VAR 0 47
69760: PUSH
69761: LD_INT 2
69763: NEG
69764: PUSH
69765: LD_INT 3
69767: NEG
69768: PUSH
69769: EMPTY
69770: LIST
69771: LIST
69772: PUSH
69773: LD_INT 1
69775: NEG
69776: PUSH
69777: LD_INT 3
69779: NEG
69780: PUSH
69781: EMPTY
69782: LIST
69783: LIST
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
69789: LD_ADDR_VAR 0 48
69793: PUSH
69794: LD_INT 1
69796: PUSH
69797: LD_INT 2
69799: NEG
69800: PUSH
69801: EMPTY
69802: LIST
69803: LIST
69804: PUSH
69805: LD_INT 2
69807: PUSH
69808: LD_INT 1
69810: NEG
69811: PUSH
69812: EMPTY
69813: LIST
69814: LIST
69815: PUSH
69816: EMPTY
69817: LIST
69818: LIST
69819: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
69820: LD_ADDR_VAR 0 49
69824: PUSH
69825: LD_INT 3
69827: PUSH
69828: LD_INT 1
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: PUSH
69835: LD_INT 3
69837: PUSH
69838: LD_INT 2
69840: PUSH
69841: EMPTY
69842: LIST
69843: LIST
69844: PUSH
69845: EMPTY
69846: LIST
69847: LIST
69848: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
69849: LD_ADDR_VAR 0 50
69853: PUSH
69854: LD_INT 2
69856: PUSH
69857: LD_INT 3
69859: PUSH
69860: EMPTY
69861: LIST
69862: LIST
69863: PUSH
69864: LD_INT 1
69866: PUSH
69867: LD_INT 3
69869: PUSH
69870: EMPTY
69871: LIST
69872: LIST
69873: PUSH
69874: EMPTY
69875: LIST
69876: LIST
69877: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
69878: LD_ADDR_VAR 0 51
69882: PUSH
69883: LD_INT 1
69885: NEG
69886: PUSH
69887: LD_INT 2
69889: PUSH
69890: EMPTY
69891: LIST
69892: LIST
69893: PUSH
69894: LD_INT 2
69896: NEG
69897: PUSH
69898: LD_INT 1
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: PUSH
69905: EMPTY
69906: LIST
69907: LIST
69908: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69909: LD_ADDR_VAR 0 52
69913: PUSH
69914: LD_INT 3
69916: NEG
69917: PUSH
69918: LD_INT 1
69920: NEG
69921: PUSH
69922: EMPTY
69923: LIST
69924: LIST
69925: PUSH
69926: LD_INT 3
69928: NEG
69929: PUSH
69930: LD_INT 2
69932: NEG
69933: PUSH
69934: EMPTY
69935: LIST
69936: LIST
69937: PUSH
69938: EMPTY
69939: LIST
69940: LIST
69941: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69942: LD_ADDR_VAR 0 53
69946: PUSH
69947: LD_INT 1
69949: NEG
69950: PUSH
69951: LD_INT 3
69953: NEG
69954: PUSH
69955: EMPTY
69956: LIST
69957: LIST
69958: PUSH
69959: LD_INT 0
69961: PUSH
69962: LD_INT 3
69964: NEG
69965: PUSH
69966: EMPTY
69967: LIST
69968: LIST
69969: PUSH
69970: LD_INT 1
69972: PUSH
69973: LD_INT 2
69975: NEG
69976: PUSH
69977: EMPTY
69978: LIST
69979: LIST
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: LIST
69985: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69986: LD_ADDR_VAR 0 54
69990: PUSH
69991: LD_INT 2
69993: PUSH
69994: LD_INT 1
69996: NEG
69997: PUSH
69998: EMPTY
69999: LIST
70000: LIST
70001: PUSH
70002: LD_INT 3
70004: PUSH
70005: LD_INT 0
70007: PUSH
70008: EMPTY
70009: LIST
70010: LIST
70011: PUSH
70012: LD_INT 3
70014: PUSH
70015: LD_INT 1
70017: PUSH
70018: EMPTY
70019: LIST
70020: LIST
70021: PUSH
70022: EMPTY
70023: LIST
70024: LIST
70025: LIST
70026: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70027: LD_ADDR_VAR 0 55
70031: PUSH
70032: LD_INT 3
70034: PUSH
70035: LD_INT 2
70037: PUSH
70038: EMPTY
70039: LIST
70040: LIST
70041: PUSH
70042: LD_INT 3
70044: PUSH
70045: LD_INT 3
70047: PUSH
70048: EMPTY
70049: LIST
70050: LIST
70051: PUSH
70052: LD_INT 2
70054: PUSH
70055: LD_INT 3
70057: PUSH
70058: EMPTY
70059: LIST
70060: LIST
70061: PUSH
70062: EMPTY
70063: LIST
70064: LIST
70065: LIST
70066: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70067: LD_ADDR_VAR 0 56
70071: PUSH
70072: LD_INT 1
70074: PUSH
70075: LD_INT 3
70077: PUSH
70078: EMPTY
70079: LIST
70080: LIST
70081: PUSH
70082: LD_INT 0
70084: PUSH
70085: LD_INT 3
70087: PUSH
70088: EMPTY
70089: LIST
70090: LIST
70091: PUSH
70092: LD_INT 1
70094: NEG
70095: PUSH
70096: LD_INT 2
70098: PUSH
70099: EMPTY
70100: LIST
70101: LIST
70102: PUSH
70103: EMPTY
70104: LIST
70105: LIST
70106: LIST
70107: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70108: LD_ADDR_VAR 0 57
70112: PUSH
70113: LD_INT 2
70115: NEG
70116: PUSH
70117: LD_INT 1
70119: PUSH
70120: EMPTY
70121: LIST
70122: LIST
70123: PUSH
70124: LD_INT 3
70126: NEG
70127: PUSH
70128: LD_INT 0
70130: PUSH
70131: EMPTY
70132: LIST
70133: LIST
70134: PUSH
70135: LD_INT 3
70137: NEG
70138: PUSH
70139: LD_INT 1
70141: NEG
70142: PUSH
70143: EMPTY
70144: LIST
70145: LIST
70146: PUSH
70147: EMPTY
70148: LIST
70149: LIST
70150: LIST
70151: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70152: LD_ADDR_VAR 0 58
70156: PUSH
70157: LD_INT 2
70159: NEG
70160: PUSH
70161: LD_INT 3
70163: NEG
70164: PUSH
70165: EMPTY
70166: LIST
70167: LIST
70168: PUSH
70169: LD_INT 3
70171: NEG
70172: PUSH
70173: LD_INT 2
70175: NEG
70176: PUSH
70177: EMPTY
70178: LIST
70179: LIST
70180: PUSH
70181: LD_INT 3
70183: NEG
70184: PUSH
70185: LD_INT 3
70187: NEG
70188: PUSH
70189: EMPTY
70190: LIST
70191: LIST
70192: PUSH
70193: EMPTY
70194: LIST
70195: LIST
70196: LIST
70197: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
70198: LD_ADDR_VAR 0 59
70202: PUSH
70203: LD_INT 1
70205: NEG
70206: PUSH
70207: LD_INT 2
70209: NEG
70210: PUSH
70211: EMPTY
70212: LIST
70213: LIST
70214: PUSH
70215: LD_INT 0
70217: PUSH
70218: LD_INT 2
70220: NEG
70221: PUSH
70222: EMPTY
70223: LIST
70224: LIST
70225: PUSH
70226: LD_INT 1
70228: PUSH
70229: LD_INT 1
70231: NEG
70232: PUSH
70233: EMPTY
70234: LIST
70235: LIST
70236: PUSH
70237: EMPTY
70238: LIST
70239: LIST
70240: LIST
70241: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
70242: LD_ADDR_VAR 0 60
70246: PUSH
70247: LD_INT 1
70249: PUSH
70250: LD_INT 1
70252: NEG
70253: PUSH
70254: EMPTY
70255: LIST
70256: LIST
70257: PUSH
70258: LD_INT 2
70260: PUSH
70261: LD_INT 0
70263: PUSH
70264: EMPTY
70265: LIST
70266: LIST
70267: PUSH
70268: LD_INT 2
70270: PUSH
70271: LD_INT 1
70273: PUSH
70274: EMPTY
70275: LIST
70276: LIST
70277: PUSH
70278: EMPTY
70279: LIST
70280: LIST
70281: LIST
70282: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
70283: LD_ADDR_VAR 0 61
70287: PUSH
70288: LD_INT 2
70290: PUSH
70291: LD_INT 1
70293: PUSH
70294: EMPTY
70295: LIST
70296: LIST
70297: PUSH
70298: LD_INT 2
70300: PUSH
70301: LD_INT 2
70303: PUSH
70304: EMPTY
70305: LIST
70306: LIST
70307: PUSH
70308: LD_INT 1
70310: PUSH
70311: LD_INT 2
70313: PUSH
70314: EMPTY
70315: LIST
70316: LIST
70317: PUSH
70318: EMPTY
70319: LIST
70320: LIST
70321: LIST
70322: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
70323: LD_ADDR_VAR 0 62
70327: PUSH
70328: LD_INT 1
70330: PUSH
70331: LD_INT 2
70333: PUSH
70334: EMPTY
70335: LIST
70336: LIST
70337: PUSH
70338: LD_INT 0
70340: PUSH
70341: LD_INT 2
70343: PUSH
70344: EMPTY
70345: LIST
70346: LIST
70347: PUSH
70348: LD_INT 1
70350: NEG
70351: PUSH
70352: LD_INT 1
70354: PUSH
70355: EMPTY
70356: LIST
70357: LIST
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: LIST
70363: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
70364: LD_ADDR_VAR 0 63
70368: PUSH
70369: LD_INT 1
70371: NEG
70372: PUSH
70373: LD_INT 1
70375: PUSH
70376: EMPTY
70377: LIST
70378: LIST
70379: PUSH
70380: LD_INT 2
70382: NEG
70383: PUSH
70384: LD_INT 0
70386: PUSH
70387: EMPTY
70388: LIST
70389: LIST
70390: PUSH
70391: LD_INT 2
70393: NEG
70394: PUSH
70395: LD_INT 1
70397: NEG
70398: PUSH
70399: EMPTY
70400: LIST
70401: LIST
70402: PUSH
70403: EMPTY
70404: LIST
70405: LIST
70406: LIST
70407: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70408: LD_ADDR_VAR 0 64
70412: PUSH
70413: LD_INT 1
70415: NEG
70416: PUSH
70417: LD_INT 2
70419: NEG
70420: PUSH
70421: EMPTY
70422: LIST
70423: LIST
70424: PUSH
70425: LD_INT 2
70427: NEG
70428: PUSH
70429: LD_INT 1
70431: NEG
70432: PUSH
70433: EMPTY
70434: LIST
70435: LIST
70436: PUSH
70437: LD_INT 2
70439: NEG
70440: PUSH
70441: LD_INT 2
70443: NEG
70444: PUSH
70445: EMPTY
70446: LIST
70447: LIST
70448: PUSH
70449: EMPTY
70450: LIST
70451: LIST
70452: LIST
70453: ST_TO_ADDR
// end ; 2 :
70454: GO 73720
70456: LD_INT 2
70458: DOUBLE
70459: EQUAL
70460: IFTRUE 70464
70462: GO 73719
70464: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
70465: LD_ADDR_VAR 0 29
70469: PUSH
70470: LD_INT 4
70472: PUSH
70473: LD_INT 0
70475: PUSH
70476: EMPTY
70477: LIST
70478: LIST
70479: PUSH
70480: LD_INT 4
70482: PUSH
70483: LD_INT 1
70485: NEG
70486: PUSH
70487: EMPTY
70488: LIST
70489: LIST
70490: PUSH
70491: LD_INT 5
70493: PUSH
70494: LD_INT 0
70496: PUSH
70497: EMPTY
70498: LIST
70499: LIST
70500: PUSH
70501: LD_INT 5
70503: PUSH
70504: LD_INT 1
70506: PUSH
70507: EMPTY
70508: LIST
70509: LIST
70510: PUSH
70511: LD_INT 4
70513: PUSH
70514: LD_INT 1
70516: PUSH
70517: EMPTY
70518: LIST
70519: LIST
70520: PUSH
70521: LD_INT 3
70523: PUSH
70524: LD_INT 0
70526: PUSH
70527: EMPTY
70528: LIST
70529: LIST
70530: PUSH
70531: LD_INT 3
70533: PUSH
70534: LD_INT 1
70536: NEG
70537: PUSH
70538: EMPTY
70539: LIST
70540: LIST
70541: PUSH
70542: LD_INT 3
70544: PUSH
70545: LD_INT 2
70547: NEG
70548: PUSH
70549: EMPTY
70550: LIST
70551: LIST
70552: PUSH
70553: LD_INT 5
70555: PUSH
70556: LD_INT 2
70558: PUSH
70559: EMPTY
70560: LIST
70561: LIST
70562: PUSH
70563: LD_INT 3
70565: PUSH
70566: LD_INT 3
70568: PUSH
70569: EMPTY
70570: LIST
70571: LIST
70572: PUSH
70573: LD_INT 3
70575: PUSH
70576: LD_INT 2
70578: PUSH
70579: EMPTY
70580: LIST
70581: LIST
70582: PUSH
70583: LD_INT 4
70585: PUSH
70586: LD_INT 3
70588: PUSH
70589: EMPTY
70590: LIST
70591: LIST
70592: PUSH
70593: LD_INT 4
70595: PUSH
70596: LD_INT 4
70598: PUSH
70599: EMPTY
70600: LIST
70601: LIST
70602: PUSH
70603: LD_INT 3
70605: PUSH
70606: LD_INT 4
70608: PUSH
70609: EMPTY
70610: LIST
70611: LIST
70612: PUSH
70613: LD_INT 2
70615: PUSH
70616: LD_INT 3
70618: PUSH
70619: EMPTY
70620: LIST
70621: LIST
70622: PUSH
70623: LD_INT 2
70625: PUSH
70626: LD_INT 2
70628: PUSH
70629: EMPTY
70630: LIST
70631: LIST
70632: PUSH
70633: LD_INT 4
70635: PUSH
70636: LD_INT 2
70638: PUSH
70639: EMPTY
70640: LIST
70641: LIST
70642: PUSH
70643: LD_INT 2
70645: PUSH
70646: LD_INT 4
70648: PUSH
70649: EMPTY
70650: LIST
70651: LIST
70652: PUSH
70653: LD_INT 0
70655: PUSH
70656: LD_INT 4
70658: PUSH
70659: EMPTY
70660: LIST
70661: LIST
70662: PUSH
70663: LD_INT 0
70665: PUSH
70666: LD_INT 3
70668: PUSH
70669: EMPTY
70670: LIST
70671: LIST
70672: PUSH
70673: LD_INT 1
70675: PUSH
70676: LD_INT 4
70678: PUSH
70679: EMPTY
70680: LIST
70681: LIST
70682: PUSH
70683: LD_INT 1
70685: PUSH
70686: LD_INT 5
70688: PUSH
70689: EMPTY
70690: LIST
70691: LIST
70692: PUSH
70693: LD_INT 0
70695: PUSH
70696: LD_INT 5
70698: PUSH
70699: EMPTY
70700: LIST
70701: LIST
70702: PUSH
70703: LD_INT 1
70705: NEG
70706: PUSH
70707: LD_INT 4
70709: PUSH
70710: EMPTY
70711: LIST
70712: LIST
70713: PUSH
70714: LD_INT 1
70716: NEG
70717: PUSH
70718: LD_INT 3
70720: PUSH
70721: EMPTY
70722: LIST
70723: LIST
70724: PUSH
70725: LD_INT 2
70727: PUSH
70728: LD_INT 5
70730: PUSH
70731: EMPTY
70732: LIST
70733: LIST
70734: PUSH
70735: LD_INT 2
70737: NEG
70738: PUSH
70739: LD_INT 3
70741: PUSH
70742: EMPTY
70743: LIST
70744: LIST
70745: PUSH
70746: LD_INT 3
70748: NEG
70749: PUSH
70750: LD_INT 0
70752: PUSH
70753: EMPTY
70754: LIST
70755: LIST
70756: PUSH
70757: LD_INT 3
70759: NEG
70760: PUSH
70761: LD_INT 1
70763: NEG
70764: PUSH
70765: EMPTY
70766: LIST
70767: LIST
70768: PUSH
70769: LD_INT 2
70771: NEG
70772: PUSH
70773: LD_INT 0
70775: PUSH
70776: EMPTY
70777: LIST
70778: LIST
70779: PUSH
70780: LD_INT 2
70782: NEG
70783: PUSH
70784: LD_INT 1
70786: PUSH
70787: EMPTY
70788: LIST
70789: LIST
70790: PUSH
70791: LD_INT 3
70793: NEG
70794: PUSH
70795: LD_INT 1
70797: PUSH
70798: EMPTY
70799: LIST
70800: LIST
70801: PUSH
70802: LD_INT 4
70804: NEG
70805: PUSH
70806: LD_INT 0
70808: PUSH
70809: EMPTY
70810: LIST
70811: LIST
70812: PUSH
70813: LD_INT 4
70815: NEG
70816: PUSH
70817: LD_INT 1
70819: NEG
70820: PUSH
70821: EMPTY
70822: LIST
70823: LIST
70824: PUSH
70825: LD_INT 4
70827: NEG
70828: PUSH
70829: LD_INT 2
70831: NEG
70832: PUSH
70833: EMPTY
70834: LIST
70835: LIST
70836: PUSH
70837: LD_INT 2
70839: NEG
70840: PUSH
70841: LD_INT 2
70843: PUSH
70844: EMPTY
70845: LIST
70846: LIST
70847: PUSH
70848: LD_INT 4
70850: NEG
70851: PUSH
70852: LD_INT 4
70854: NEG
70855: PUSH
70856: EMPTY
70857: LIST
70858: LIST
70859: PUSH
70860: LD_INT 4
70862: NEG
70863: PUSH
70864: LD_INT 5
70866: NEG
70867: PUSH
70868: EMPTY
70869: LIST
70870: LIST
70871: PUSH
70872: LD_INT 3
70874: NEG
70875: PUSH
70876: LD_INT 4
70878: NEG
70879: PUSH
70880: EMPTY
70881: LIST
70882: LIST
70883: PUSH
70884: LD_INT 3
70886: NEG
70887: PUSH
70888: LD_INT 3
70890: NEG
70891: PUSH
70892: EMPTY
70893: LIST
70894: LIST
70895: PUSH
70896: LD_INT 4
70898: NEG
70899: PUSH
70900: LD_INT 3
70902: NEG
70903: PUSH
70904: EMPTY
70905: LIST
70906: LIST
70907: PUSH
70908: LD_INT 5
70910: NEG
70911: PUSH
70912: LD_INT 4
70914: NEG
70915: PUSH
70916: EMPTY
70917: LIST
70918: LIST
70919: PUSH
70920: LD_INT 5
70922: NEG
70923: PUSH
70924: LD_INT 5
70926: NEG
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: PUSH
70932: LD_INT 3
70934: NEG
70935: PUSH
70936: LD_INT 5
70938: NEG
70939: PUSH
70940: EMPTY
70941: LIST
70942: LIST
70943: PUSH
70944: LD_INT 5
70946: NEG
70947: PUSH
70948: LD_INT 3
70950: NEG
70951: PUSH
70952: EMPTY
70953: LIST
70954: LIST
70955: PUSH
70956: EMPTY
70957: LIST
70958: LIST
70959: LIST
70960: LIST
70961: LIST
70962: LIST
70963: LIST
70964: LIST
70965: LIST
70966: LIST
70967: LIST
70968: LIST
70969: LIST
70970: LIST
70971: LIST
70972: LIST
70973: LIST
70974: LIST
70975: LIST
70976: LIST
70977: LIST
70978: LIST
70979: LIST
70980: LIST
70981: LIST
70982: LIST
70983: LIST
70984: LIST
70985: LIST
70986: LIST
70987: LIST
70988: LIST
70989: LIST
70990: LIST
70991: LIST
70992: LIST
70993: LIST
70994: LIST
70995: LIST
70996: LIST
70997: LIST
70998: LIST
70999: LIST
71000: LIST
71001: LIST
71002: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
71003: LD_ADDR_VAR 0 30
71007: PUSH
71008: LD_INT 4
71010: PUSH
71011: LD_INT 4
71013: PUSH
71014: EMPTY
71015: LIST
71016: LIST
71017: PUSH
71018: LD_INT 4
71020: PUSH
71021: LD_INT 3
71023: PUSH
71024: EMPTY
71025: LIST
71026: LIST
71027: PUSH
71028: LD_INT 5
71030: PUSH
71031: LD_INT 4
71033: PUSH
71034: EMPTY
71035: LIST
71036: LIST
71037: PUSH
71038: LD_INT 5
71040: PUSH
71041: LD_INT 5
71043: PUSH
71044: EMPTY
71045: LIST
71046: LIST
71047: PUSH
71048: LD_INT 4
71050: PUSH
71051: LD_INT 5
71053: PUSH
71054: EMPTY
71055: LIST
71056: LIST
71057: PUSH
71058: LD_INT 3
71060: PUSH
71061: LD_INT 4
71063: PUSH
71064: EMPTY
71065: LIST
71066: LIST
71067: PUSH
71068: LD_INT 3
71070: PUSH
71071: LD_INT 3
71073: PUSH
71074: EMPTY
71075: LIST
71076: LIST
71077: PUSH
71078: LD_INT 5
71080: PUSH
71081: LD_INT 3
71083: PUSH
71084: EMPTY
71085: LIST
71086: LIST
71087: PUSH
71088: LD_INT 3
71090: PUSH
71091: LD_INT 5
71093: PUSH
71094: EMPTY
71095: LIST
71096: LIST
71097: PUSH
71098: LD_INT 0
71100: PUSH
71101: LD_INT 3
71103: PUSH
71104: EMPTY
71105: LIST
71106: LIST
71107: PUSH
71108: LD_INT 0
71110: PUSH
71111: LD_INT 2
71113: PUSH
71114: EMPTY
71115: LIST
71116: LIST
71117: PUSH
71118: LD_INT 1
71120: PUSH
71121: LD_INT 3
71123: PUSH
71124: EMPTY
71125: LIST
71126: LIST
71127: PUSH
71128: LD_INT 1
71130: PUSH
71131: LD_INT 4
71133: PUSH
71134: EMPTY
71135: LIST
71136: LIST
71137: PUSH
71138: LD_INT 0
71140: PUSH
71141: LD_INT 4
71143: PUSH
71144: EMPTY
71145: LIST
71146: LIST
71147: PUSH
71148: LD_INT 1
71150: NEG
71151: PUSH
71152: LD_INT 3
71154: PUSH
71155: EMPTY
71156: LIST
71157: LIST
71158: PUSH
71159: LD_INT 1
71161: NEG
71162: PUSH
71163: LD_INT 2
71165: PUSH
71166: EMPTY
71167: LIST
71168: LIST
71169: PUSH
71170: LD_INT 2
71172: PUSH
71173: LD_INT 4
71175: PUSH
71176: EMPTY
71177: LIST
71178: LIST
71179: PUSH
71180: LD_INT 2
71182: NEG
71183: PUSH
71184: LD_INT 2
71186: PUSH
71187: EMPTY
71188: LIST
71189: LIST
71190: PUSH
71191: LD_INT 4
71193: NEG
71194: PUSH
71195: LD_INT 0
71197: PUSH
71198: EMPTY
71199: LIST
71200: LIST
71201: PUSH
71202: LD_INT 4
71204: NEG
71205: PUSH
71206: LD_INT 1
71208: NEG
71209: PUSH
71210: EMPTY
71211: LIST
71212: LIST
71213: PUSH
71214: LD_INT 3
71216: NEG
71217: PUSH
71218: LD_INT 0
71220: PUSH
71221: EMPTY
71222: LIST
71223: LIST
71224: PUSH
71225: LD_INT 3
71227: NEG
71228: PUSH
71229: LD_INT 1
71231: PUSH
71232: EMPTY
71233: LIST
71234: LIST
71235: PUSH
71236: LD_INT 4
71238: NEG
71239: PUSH
71240: LD_INT 1
71242: PUSH
71243: EMPTY
71244: LIST
71245: LIST
71246: PUSH
71247: LD_INT 5
71249: NEG
71250: PUSH
71251: LD_INT 0
71253: PUSH
71254: EMPTY
71255: LIST
71256: LIST
71257: PUSH
71258: LD_INT 5
71260: NEG
71261: PUSH
71262: LD_INT 1
71264: NEG
71265: PUSH
71266: EMPTY
71267: LIST
71268: LIST
71269: PUSH
71270: LD_INT 5
71272: NEG
71273: PUSH
71274: LD_INT 2
71276: NEG
71277: PUSH
71278: EMPTY
71279: LIST
71280: LIST
71281: PUSH
71282: LD_INT 3
71284: NEG
71285: PUSH
71286: LD_INT 2
71288: PUSH
71289: EMPTY
71290: LIST
71291: LIST
71292: PUSH
71293: LD_INT 3
71295: NEG
71296: PUSH
71297: LD_INT 3
71299: NEG
71300: PUSH
71301: EMPTY
71302: LIST
71303: LIST
71304: PUSH
71305: LD_INT 3
71307: NEG
71308: PUSH
71309: LD_INT 4
71311: NEG
71312: PUSH
71313: EMPTY
71314: LIST
71315: LIST
71316: PUSH
71317: LD_INT 2
71319: NEG
71320: PUSH
71321: LD_INT 3
71323: NEG
71324: PUSH
71325: EMPTY
71326: LIST
71327: LIST
71328: PUSH
71329: LD_INT 2
71331: NEG
71332: PUSH
71333: LD_INT 2
71335: NEG
71336: PUSH
71337: EMPTY
71338: LIST
71339: LIST
71340: PUSH
71341: LD_INT 3
71343: NEG
71344: PUSH
71345: LD_INT 2
71347: NEG
71348: PUSH
71349: EMPTY
71350: LIST
71351: LIST
71352: PUSH
71353: LD_INT 4
71355: NEG
71356: PUSH
71357: LD_INT 3
71359: NEG
71360: PUSH
71361: EMPTY
71362: LIST
71363: LIST
71364: PUSH
71365: LD_INT 4
71367: NEG
71368: PUSH
71369: LD_INT 4
71371: NEG
71372: PUSH
71373: EMPTY
71374: LIST
71375: LIST
71376: PUSH
71377: LD_INT 2
71379: NEG
71380: PUSH
71381: LD_INT 4
71383: NEG
71384: PUSH
71385: EMPTY
71386: LIST
71387: LIST
71388: PUSH
71389: LD_INT 4
71391: NEG
71392: PUSH
71393: LD_INT 2
71395: NEG
71396: PUSH
71397: EMPTY
71398: LIST
71399: LIST
71400: PUSH
71401: LD_INT 0
71403: PUSH
71404: LD_INT 4
71406: NEG
71407: PUSH
71408: EMPTY
71409: LIST
71410: LIST
71411: PUSH
71412: LD_INT 0
71414: PUSH
71415: LD_INT 5
71417: NEG
71418: PUSH
71419: EMPTY
71420: LIST
71421: LIST
71422: PUSH
71423: LD_INT 1
71425: PUSH
71426: LD_INT 4
71428: NEG
71429: PUSH
71430: EMPTY
71431: LIST
71432: LIST
71433: PUSH
71434: LD_INT 1
71436: PUSH
71437: LD_INT 3
71439: NEG
71440: PUSH
71441: EMPTY
71442: LIST
71443: LIST
71444: PUSH
71445: LD_INT 0
71447: PUSH
71448: LD_INT 3
71450: NEG
71451: PUSH
71452: EMPTY
71453: LIST
71454: LIST
71455: PUSH
71456: LD_INT 1
71458: NEG
71459: PUSH
71460: LD_INT 4
71462: NEG
71463: PUSH
71464: EMPTY
71465: LIST
71466: LIST
71467: PUSH
71468: LD_INT 1
71470: NEG
71471: PUSH
71472: LD_INT 5
71474: NEG
71475: PUSH
71476: EMPTY
71477: LIST
71478: LIST
71479: PUSH
71480: LD_INT 2
71482: PUSH
71483: LD_INT 3
71485: NEG
71486: PUSH
71487: EMPTY
71488: LIST
71489: LIST
71490: PUSH
71491: LD_INT 2
71493: NEG
71494: PUSH
71495: LD_INT 5
71497: NEG
71498: PUSH
71499: EMPTY
71500: LIST
71501: LIST
71502: PUSH
71503: EMPTY
71504: LIST
71505: LIST
71506: LIST
71507: LIST
71508: LIST
71509: LIST
71510: LIST
71511: LIST
71512: LIST
71513: LIST
71514: LIST
71515: LIST
71516: LIST
71517: LIST
71518: LIST
71519: LIST
71520: LIST
71521: LIST
71522: LIST
71523: LIST
71524: LIST
71525: LIST
71526: LIST
71527: LIST
71528: LIST
71529: LIST
71530: LIST
71531: LIST
71532: LIST
71533: LIST
71534: LIST
71535: LIST
71536: LIST
71537: LIST
71538: LIST
71539: LIST
71540: LIST
71541: LIST
71542: LIST
71543: LIST
71544: LIST
71545: LIST
71546: LIST
71547: LIST
71548: LIST
71549: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
71550: LD_ADDR_VAR 0 31
71554: PUSH
71555: LD_INT 0
71557: PUSH
71558: LD_INT 4
71560: PUSH
71561: EMPTY
71562: LIST
71563: LIST
71564: PUSH
71565: LD_INT 0
71567: PUSH
71568: LD_INT 3
71570: PUSH
71571: EMPTY
71572: LIST
71573: LIST
71574: PUSH
71575: LD_INT 1
71577: PUSH
71578: LD_INT 4
71580: PUSH
71581: EMPTY
71582: LIST
71583: LIST
71584: PUSH
71585: LD_INT 1
71587: PUSH
71588: LD_INT 5
71590: PUSH
71591: EMPTY
71592: LIST
71593: LIST
71594: PUSH
71595: LD_INT 0
71597: PUSH
71598: LD_INT 5
71600: PUSH
71601: EMPTY
71602: LIST
71603: LIST
71604: PUSH
71605: LD_INT 1
71607: NEG
71608: PUSH
71609: LD_INT 4
71611: PUSH
71612: EMPTY
71613: LIST
71614: LIST
71615: PUSH
71616: LD_INT 1
71618: NEG
71619: PUSH
71620: LD_INT 3
71622: PUSH
71623: EMPTY
71624: LIST
71625: LIST
71626: PUSH
71627: LD_INT 2
71629: PUSH
71630: LD_INT 5
71632: PUSH
71633: EMPTY
71634: LIST
71635: LIST
71636: PUSH
71637: LD_INT 2
71639: NEG
71640: PUSH
71641: LD_INT 3
71643: PUSH
71644: EMPTY
71645: LIST
71646: LIST
71647: PUSH
71648: LD_INT 3
71650: NEG
71651: PUSH
71652: LD_INT 0
71654: PUSH
71655: EMPTY
71656: LIST
71657: LIST
71658: PUSH
71659: LD_INT 3
71661: NEG
71662: PUSH
71663: LD_INT 1
71665: NEG
71666: PUSH
71667: EMPTY
71668: LIST
71669: LIST
71670: PUSH
71671: LD_INT 2
71673: NEG
71674: PUSH
71675: LD_INT 0
71677: PUSH
71678: EMPTY
71679: LIST
71680: LIST
71681: PUSH
71682: LD_INT 2
71684: NEG
71685: PUSH
71686: LD_INT 1
71688: PUSH
71689: EMPTY
71690: LIST
71691: LIST
71692: PUSH
71693: LD_INT 3
71695: NEG
71696: PUSH
71697: LD_INT 1
71699: PUSH
71700: EMPTY
71701: LIST
71702: LIST
71703: PUSH
71704: LD_INT 4
71706: NEG
71707: PUSH
71708: LD_INT 0
71710: PUSH
71711: EMPTY
71712: LIST
71713: LIST
71714: PUSH
71715: LD_INT 4
71717: NEG
71718: PUSH
71719: LD_INT 1
71721: NEG
71722: PUSH
71723: EMPTY
71724: LIST
71725: LIST
71726: PUSH
71727: LD_INT 4
71729: NEG
71730: PUSH
71731: LD_INT 2
71733: NEG
71734: PUSH
71735: EMPTY
71736: LIST
71737: LIST
71738: PUSH
71739: LD_INT 2
71741: NEG
71742: PUSH
71743: LD_INT 2
71745: PUSH
71746: EMPTY
71747: LIST
71748: LIST
71749: PUSH
71750: LD_INT 4
71752: NEG
71753: PUSH
71754: LD_INT 4
71756: NEG
71757: PUSH
71758: EMPTY
71759: LIST
71760: LIST
71761: PUSH
71762: LD_INT 4
71764: NEG
71765: PUSH
71766: LD_INT 5
71768: NEG
71769: PUSH
71770: EMPTY
71771: LIST
71772: LIST
71773: PUSH
71774: LD_INT 3
71776: NEG
71777: PUSH
71778: LD_INT 4
71780: NEG
71781: PUSH
71782: EMPTY
71783: LIST
71784: LIST
71785: PUSH
71786: LD_INT 3
71788: NEG
71789: PUSH
71790: LD_INT 3
71792: NEG
71793: PUSH
71794: EMPTY
71795: LIST
71796: LIST
71797: PUSH
71798: LD_INT 4
71800: NEG
71801: PUSH
71802: LD_INT 3
71804: NEG
71805: PUSH
71806: EMPTY
71807: LIST
71808: LIST
71809: PUSH
71810: LD_INT 5
71812: NEG
71813: PUSH
71814: LD_INT 4
71816: NEG
71817: PUSH
71818: EMPTY
71819: LIST
71820: LIST
71821: PUSH
71822: LD_INT 5
71824: NEG
71825: PUSH
71826: LD_INT 5
71828: NEG
71829: PUSH
71830: EMPTY
71831: LIST
71832: LIST
71833: PUSH
71834: LD_INT 3
71836: NEG
71837: PUSH
71838: LD_INT 5
71840: NEG
71841: PUSH
71842: EMPTY
71843: LIST
71844: LIST
71845: PUSH
71846: LD_INT 5
71848: NEG
71849: PUSH
71850: LD_INT 3
71852: NEG
71853: PUSH
71854: EMPTY
71855: LIST
71856: LIST
71857: PUSH
71858: LD_INT 0
71860: PUSH
71861: LD_INT 3
71863: NEG
71864: PUSH
71865: EMPTY
71866: LIST
71867: LIST
71868: PUSH
71869: LD_INT 0
71871: PUSH
71872: LD_INT 4
71874: NEG
71875: PUSH
71876: EMPTY
71877: LIST
71878: LIST
71879: PUSH
71880: LD_INT 1
71882: PUSH
71883: LD_INT 3
71885: NEG
71886: PUSH
71887: EMPTY
71888: LIST
71889: LIST
71890: PUSH
71891: LD_INT 1
71893: PUSH
71894: LD_INT 2
71896: NEG
71897: PUSH
71898: EMPTY
71899: LIST
71900: LIST
71901: PUSH
71902: LD_INT 0
71904: PUSH
71905: LD_INT 2
71907: NEG
71908: PUSH
71909: EMPTY
71910: LIST
71911: LIST
71912: PUSH
71913: LD_INT 1
71915: NEG
71916: PUSH
71917: LD_INT 3
71919: NEG
71920: PUSH
71921: EMPTY
71922: LIST
71923: LIST
71924: PUSH
71925: LD_INT 1
71927: NEG
71928: PUSH
71929: LD_INT 4
71931: NEG
71932: PUSH
71933: EMPTY
71934: LIST
71935: LIST
71936: PUSH
71937: LD_INT 2
71939: PUSH
71940: LD_INT 2
71942: NEG
71943: PUSH
71944: EMPTY
71945: LIST
71946: LIST
71947: PUSH
71948: LD_INT 2
71950: NEG
71951: PUSH
71952: LD_INT 4
71954: NEG
71955: PUSH
71956: EMPTY
71957: LIST
71958: LIST
71959: PUSH
71960: LD_INT 4
71962: PUSH
71963: LD_INT 0
71965: PUSH
71966: EMPTY
71967: LIST
71968: LIST
71969: PUSH
71970: LD_INT 4
71972: PUSH
71973: LD_INT 1
71975: NEG
71976: PUSH
71977: EMPTY
71978: LIST
71979: LIST
71980: PUSH
71981: LD_INT 5
71983: PUSH
71984: LD_INT 0
71986: PUSH
71987: EMPTY
71988: LIST
71989: LIST
71990: PUSH
71991: LD_INT 5
71993: PUSH
71994: LD_INT 1
71996: PUSH
71997: EMPTY
71998: LIST
71999: LIST
72000: PUSH
72001: LD_INT 4
72003: PUSH
72004: LD_INT 1
72006: PUSH
72007: EMPTY
72008: LIST
72009: LIST
72010: PUSH
72011: LD_INT 3
72013: PUSH
72014: LD_INT 0
72016: PUSH
72017: EMPTY
72018: LIST
72019: LIST
72020: PUSH
72021: LD_INT 3
72023: PUSH
72024: LD_INT 1
72026: NEG
72027: PUSH
72028: EMPTY
72029: LIST
72030: LIST
72031: PUSH
72032: LD_INT 3
72034: PUSH
72035: LD_INT 2
72037: NEG
72038: PUSH
72039: EMPTY
72040: LIST
72041: LIST
72042: PUSH
72043: LD_INT 5
72045: PUSH
72046: LD_INT 2
72048: PUSH
72049: EMPTY
72050: LIST
72051: LIST
72052: PUSH
72053: EMPTY
72054: LIST
72055: LIST
72056: LIST
72057: LIST
72058: LIST
72059: LIST
72060: LIST
72061: LIST
72062: LIST
72063: LIST
72064: LIST
72065: LIST
72066: LIST
72067: LIST
72068: LIST
72069: LIST
72070: LIST
72071: LIST
72072: LIST
72073: LIST
72074: LIST
72075: LIST
72076: LIST
72077: LIST
72078: LIST
72079: LIST
72080: LIST
72081: LIST
72082: LIST
72083: LIST
72084: LIST
72085: LIST
72086: LIST
72087: LIST
72088: LIST
72089: LIST
72090: LIST
72091: LIST
72092: LIST
72093: LIST
72094: LIST
72095: LIST
72096: LIST
72097: LIST
72098: LIST
72099: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
72100: LD_ADDR_VAR 0 32
72104: PUSH
72105: LD_INT 4
72107: NEG
72108: PUSH
72109: LD_INT 0
72111: PUSH
72112: EMPTY
72113: LIST
72114: LIST
72115: PUSH
72116: LD_INT 4
72118: NEG
72119: PUSH
72120: LD_INT 1
72122: NEG
72123: PUSH
72124: EMPTY
72125: LIST
72126: LIST
72127: PUSH
72128: LD_INT 3
72130: NEG
72131: PUSH
72132: LD_INT 0
72134: PUSH
72135: EMPTY
72136: LIST
72137: LIST
72138: PUSH
72139: LD_INT 3
72141: NEG
72142: PUSH
72143: LD_INT 1
72145: PUSH
72146: EMPTY
72147: LIST
72148: LIST
72149: PUSH
72150: LD_INT 4
72152: NEG
72153: PUSH
72154: LD_INT 1
72156: PUSH
72157: EMPTY
72158: LIST
72159: LIST
72160: PUSH
72161: LD_INT 5
72163: NEG
72164: PUSH
72165: LD_INT 0
72167: PUSH
72168: EMPTY
72169: LIST
72170: LIST
72171: PUSH
72172: LD_INT 5
72174: NEG
72175: PUSH
72176: LD_INT 1
72178: NEG
72179: PUSH
72180: EMPTY
72181: LIST
72182: LIST
72183: PUSH
72184: LD_INT 5
72186: NEG
72187: PUSH
72188: LD_INT 2
72190: NEG
72191: PUSH
72192: EMPTY
72193: LIST
72194: LIST
72195: PUSH
72196: LD_INT 3
72198: NEG
72199: PUSH
72200: LD_INT 2
72202: PUSH
72203: EMPTY
72204: LIST
72205: LIST
72206: PUSH
72207: LD_INT 3
72209: NEG
72210: PUSH
72211: LD_INT 3
72213: NEG
72214: PUSH
72215: EMPTY
72216: LIST
72217: LIST
72218: PUSH
72219: LD_INT 3
72221: NEG
72222: PUSH
72223: LD_INT 4
72225: NEG
72226: PUSH
72227: EMPTY
72228: LIST
72229: LIST
72230: PUSH
72231: LD_INT 2
72233: NEG
72234: PUSH
72235: LD_INT 3
72237: NEG
72238: PUSH
72239: EMPTY
72240: LIST
72241: LIST
72242: PUSH
72243: LD_INT 2
72245: NEG
72246: PUSH
72247: LD_INT 2
72249: NEG
72250: PUSH
72251: EMPTY
72252: LIST
72253: LIST
72254: PUSH
72255: LD_INT 3
72257: NEG
72258: PUSH
72259: LD_INT 2
72261: NEG
72262: PUSH
72263: EMPTY
72264: LIST
72265: LIST
72266: PUSH
72267: LD_INT 4
72269: NEG
72270: PUSH
72271: LD_INT 3
72273: NEG
72274: PUSH
72275: EMPTY
72276: LIST
72277: LIST
72278: PUSH
72279: LD_INT 4
72281: NEG
72282: PUSH
72283: LD_INT 4
72285: NEG
72286: PUSH
72287: EMPTY
72288: LIST
72289: LIST
72290: PUSH
72291: LD_INT 2
72293: NEG
72294: PUSH
72295: LD_INT 4
72297: NEG
72298: PUSH
72299: EMPTY
72300: LIST
72301: LIST
72302: PUSH
72303: LD_INT 4
72305: NEG
72306: PUSH
72307: LD_INT 2
72309: NEG
72310: PUSH
72311: EMPTY
72312: LIST
72313: LIST
72314: PUSH
72315: LD_INT 0
72317: PUSH
72318: LD_INT 4
72320: NEG
72321: PUSH
72322: EMPTY
72323: LIST
72324: LIST
72325: PUSH
72326: LD_INT 0
72328: PUSH
72329: LD_INT 5
72331: NEG
72332: PUSH
72333: EMPTY
72334: LIST
72335: LIST
72336: PUSH
72337: LD_INT 1
72339: PUSH
72340: LD_INT 4
72342: NEG
72343: PUSH
72344: EMPTY
72345: LIST
72346: LIST
72347: PUSH
72348: LD_INT 1
72350: PUSH
72351: LD_INT 3
72353: NEG
72354: PUSH
72355: EMPTY
72356: LIST
72357: LIST
72358: PUSH
72359: LD_INT 0
72361: PUSH
72362: LD_INT 3
72364: NEG
72365: PUSH
72366: EMPTY
72367: LIST
72368: LIST
72369: PUSH
72370: LD_INT 1
72372: NEG
72373: PUSH
72374: LD_INT 4
72376: NEG
72377: PUSH
72378: EMPTY
72379: LIST
72380: LIST
72381: PUSH
72382: LD_INT 1
72384: NEG
72385: PUSH
72386: LD_INT 5
72388: NEG
72389: PUSH
72390: EMPTY
72391: LIST
72392: LIST
72393: PUSH
72394: LD_INT 2
72396: PUSH
72397: LD_INT 3
72399: NEG
72400: PUSH
72401: EMPTY
72402: LIST
72403: LIST
72404: PUSH
72405: LD_INT 2
72407: NEG
72408: PUSH
72409: LD_INT 5
72411: NEG
72412: PUSH
72413: EMPTY
72414: LIST
72415: LIST
72416: PUSH
72417: LD_INT 3
72419: PUSH
72420: LD_INT 0
72422: PUSH
72423: EMPTY
72424: LIST
72425: LIST
72426: PUSH
72427: LD_INT 3
72429: PUSH
72430: LD_INT 1
72432: NEG
72433: PUSH
72434: EMPTY
72435: LIST
72436: LIST
72437: PUSH
72438: LD_INT 4
72440: PUSH
72441: LD_INT 0
72443: PUSH
72444: EMPTY
72445: LIST
72446: LIST
72447: PUSH
72448: LD_INT 4
72450: PUSH
72451: LD_INT 1
72453: PUSH
72454: EMPTY
72455: LIST
72456: LIST
72457: PUSH
72458: LD_INT 3
72460: PUSH
72461: LD_INT 1
72463: PUSH
72464: EMPTY
72465: LIST
72466: LIST
72467: PUSH
72468: LD_INT 2
72470: PUSH
72471: LD_INT 0
72473: PUSH
72474: EMPTY
72475: LIST
72476: LIST
72477: PUSH
72478: LD_INT 2
72480: PUSH
72481: LD_INT 1
72483: NEG
72484: PUSH
72485: EMPTY
72486: LIST
72487: LIST
72488: PUSH
72489: LD_INT 2
72491: PUSH
72492: LD_INT 2
72494: NEG
72495: PUSH
72496: EMPTY
72497: LIST
72498: LIST
72499: PUSH
72500: LD_INT 4
72502: PUSH
72503: LD_INT 2
72505: PUSH
72506: EMPTY
72507: LIST
72508: LIST
72509: PUSH
72510: LD_INT 4
72512: PUSH
72513: LD_INT 4
72515: PUSH
72516: EMPTY
72517: LIST
72518: LIST
72519: PUSH
72520: LD_INT 4
72522: PUSH
72523: LD_INT 3
72525: PUSH
72526: EMPTY
72527: LIST
72528: LIST
72529: PUSH
72530: LD_INT 5
72532: PUSH
72533: LD_INT 4
72535: PUSH
72536: EMPTY
72537: LIST
72538: LIST
72539: PUSH
72540: LD_INT 5
72542: PUSH
72543: LD_INT 5
72545: PUSH
72546: EMPTY
72547: LIST
72548: LIST
72549: PUSH
72550: LD_INT 4
72552: PUSH
72553: LD_INT 5
72555: PUSH
72556: EMPTY
72557: LIST
72558: LIST
72559: PUSH
72560: LD_INT 3
72562: PUSH
72563: LD_INT 4
72565: PUSH
72566: EMPTY
72567: LIST
72568: LIST
72569: PUSH
72570: LD_INT 3
72572: PUSH
72573: LD_INT 3
72575: PUSH
72576: EMPTY
72577: LIST
72578: LIST
72579: PUSH
72580: LD_INT 5
72582: PUSH
72583: LD_INT 3
72585: PUSH
72586: EMPTY
72587: LIST
72588: LIST
72589: PUSH
72590: LD_INT 3
72592: PUSH
72593: LD_INT 5
72595: PUSH
72596: EMPTY
72597: LIST
72598: LIST
72599: PUSH
72600: EMPTY
72601: LIST
72602: LIST
72603: LIST
72604: LIST
72605: LIST
72606: LIST
72607: LIST
72608: LIST
72609: LIST
72610: LIST
72611: LIST
72612: LIST
72613: LIST
72614: LIST
72615: LIST
72616: LIST
72617: LIST
72618: LIST
72619: LIST
72620: LIST
72621: LIST
72622: LIST
72623: LIST
72624: LIST
72625: LIST
72626: LIST
72627: LIST
72628: LIST
72629: LIST
72630: LIST
72631: LIST
72632: LIST
72633: LIST
72634: LIST
72635: LIST
72636: LIST
72637: LIST
72638: LIST
72639: LIST
72640: LIST
72641: LIST
72642: LIST
72643: LIST
72644: LIST
72645: LIST
72646: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
72647: LD_ADDR_VAR 0 33
72651: PUSH
72652: LD_INT 4
72654: NEG
72655: PUSH
72656: LD_INT 4
72658: NEG
72659: PUSH
72660: EMPTY
72661: LIST
72662: LIST
72663: PUSH
72664: LD_INT 4
72666: NEG
72667: PUSH
72668: LD_INT 5
72670: NEG
72671: PUSH
72672: EMPTY
72673: LIST
72674: LIST
72675: PUSH
72676: LD_INT 3
72678: NEG
72679: PUSH
72680: LD_INT 4
72682: NEG
72683: PUSH
72684: EMPTY
72685: LIST
72686: LIST
72687: PUSH
72688: LD_INT 3
72690: NEG
72691: PUSH
72692: LD_INT 3
72694: NEG
72695: PUSH
72696: EMPTY
72697: LIST
72698: LIST
72699: PUSH
72700: LD_INT 4
72702: NEG
72703: PUSH
72704: LD_INT 3
72706: NEG
72707: PUSH
72708: EMPTY
72709: LIST
72710: LIST
72711: PUSH
72712: LD_INT 5
72714: NEG
72715: PUSH
72716: LD_INT 4
72718: NEG
72719: PUSH
72720: EMPTY
72721: LIST
72722: LIST
72723: PUSH
72724: LD_INT 5
72726: NEG
72727: PUSH
72728: LD_INT 5
72730: NEG
72731: PUSH
72732: EMPTY
72733: LIST
72734: LIST
72735: PUSH
72736: LD_INT 3
72738: NEG
72739: PUSH
72740: LD_INT 5
72742: NEG
72743: PUSH
72744: EMPTY
72745: LIST
72746: LIST
72747: PUSH
72748: LD_INT 5
72750: NEG
72751: PUSH
72752: LD_INT 3
72754: NEG
72755: PUSH
72756: EMPTY
72757: LIST
72758: LIST
72759: PUSH
72760: LD_INT 0
72762: PUSH
72763: LD_INT 3
72765: NEG
72766: PUSH
72767: EMPTY
72768: LIST
72769: LIST
72770: PUSH
72771: LD_INT 0
72773: PUSH
72774: LD_INT 4
72776: NEG
72777: PUSH
72778: EMPTY
72779: LIST
72780: LIST
72781: PUSH
72782: LD_INT 1
72784: PUSH
72785: LD_INT 3
72787: NEG
72788: PUSH
72789: EMPTY
72790: LIST
72791: LIST
72792: PUSH
72793: LD_INT 1
72795: PUSH
72796: LD_INT 2
72798: NEG
72799: PUSH
72800: EMPTY
72801: LIST
72802: LIST
72803: PUSH
72804: LD_INT 0
72806: PUSH
72807: LD_INT 2
72809: NEG
72810: PUSH
72811: EMPTY
72812: LIST
72813: LIST
72814: PUSH
72815: LD_INT 1
72817: NEG
72818: PUSH
72819: LD_INT 3
72821: NEG
72822: PUSH
72823: EMPTY
72824: LIST
72825: LIST
72826: PUSH
72827: LD_INT 1
72829: NEG
72830: PUSH
72831: LD_INT 4
72833: NEG
72834: PUSH
72835: EMPTY
72836: LIST
72837: LIST
72838: PUSH
72839: LD_INT 2
72841: PUSH
72842: LD_INT 2
72844: NEG
72845: PUSH
72846: EMPTY
72847: LIST
72848: LIST
72849: PUSH
72850: LD_INT 2
72852: NEG
72853: PUSH
72854: LD_INT 4
72856: NEG
72857: PUSH
72858: EMPTY
72859: LIST
72860: LIST
72861: PUSH
72862: LD_INT 4
72864: PUSH
72865: LD_INT 0
72867: PUSH
72868: EMPTY
72869: LIST
72870: LIST
72871: PUSH
72872: LD_INT 4
72874: PUSH
72875: LD_INT 1
72877: NEG
72878: PUSH
72879: EMPTY
72880: LIST
72881: LIST
72882: PUSH
72883: LD_INT 5
72885: PUSH
72886: LD_INT 0
72888: PUSH
72889: EMPTY
72890: LIST
72891: LIST
72892: PUSH
72893: LD_INT 5
72895: PUSH
72896: LD_INT 1
72898: PUSH
72899: EMPTY
72900: LIST
72901: LIST
72902: PUSH
72903: LD_INT 4
72905: PUSH
72906: LD_INT 1
72908: PUSH
72909: EMPTY
72910: LIST
72911: LIST
72912: PUSH
72913: LD_INT 3
72915: PUSH
72916: LD_INT 0
72918: PUSH
72919: EMPTY
72920: LIST
72921: LIST
72922: PUSH
72923: LD_INT 3
72925: PUSH
72926: LD_INT 1
72928: NEG
72929: PUSH
72930: EMPTY
72931: LIST
72932: LIST
72933: PUSH
72934: LD_INT 3
72936: PUSH
72937: LD_INT 2
72939: NEG
72940: PUSH
72941: EMPTY
72942: LIST
72943: LIST
72944: PUSH
72945: LD_INT 5
72947: PUSH
72948: LD_INT 2
72950: PUSH
72951: EMPTY
72952: LIST
72953: LIST
72954: PUSH
72955: LD_INT 3
72957: PUSH
72958: LD_INT 3
72960: PUSH
72961: EMPTY
72962: LIST
72963: LIST
72964: PUSH
72965: LD_INT 3
72967: PUSH
72968: LD_INT 2
72970: PUSH
72971: EMPTY
72972: LIST
72973: LIST
72974: PUSH
72975: LD_INT 4
72977: PUSH
72978: LD_INT 3
72980: PUSH
72981: EMPTY
72982: LIST
72983: LIST
72984: PUSH
72985: LD_INT 4
72987: PUSH
72988: LD_INT 4
72990: PUSH
72991: EMPTY
72992: LIST
72993: LIST
72994: PUSH
72995: LD_INT 3
72997: PUSH
72998: LD_INT 4
73000: PUSH
73001: EMPTY
73002: LIST
73003: LIST
73004: PUSH
73005: LD_INT 2
73007: PUSH
73008: LD_INT 3
73010: PUSH
73011: EMPTY
73012: LIST
73013: LIST
73014: PUSH
73015: LD_INT 2
73017: PUSH
73018: LD_INT 2
73020: PUSH
73021: EMPTY
73022: LIST
73023: LIST
73024: PUSH
73025: LD_INT 4
73027: PUSH
73028: LD_INT 2
73030: PUSH
73031: EMPTY
73032: LIST
73033: LIST
73034: PUSH
73035: LD_INT 2
73037: PUSH
73038: LD_INT 4
73040: PUSH
73041: EMPTY
73042: LIST
73043: LIST
73044: PUSH
73045: LD_INT 0
73047: PUSH
73048: LD_INT 4
73050: PUSH
73051: EMPTY
73052: LIST
73053: LIST
73054: PUSH
73055: LD_INT 0
73057: PUSH
73058: LD_INT 3
73060: PUSH
73061: EMPTY
73062: LIST
73063: LIST
73064: PUSH
73065: LD_INT 1
73067: PUSH
73068: LD_INT 4
73070: PUSH
73071: EMPTY
73072: LIST
73073: LIST
73074: PUSH
73075: LD_INT 1
73077: PUSH
73078: LD_INT 5
73080: PUSH
73081: EMPTY
73082: LIST
73083: LIST
73084: PUSH
73085: LD_INT 0
73087: PUSH
73088: LD_INT 5
73090: PUSH
73091: EMPTY
73092: LIST
73093: LIST
73094: PUSH
73095: LD_INT 1
73097: NEG
73098: PUSH
73099: LD_INT 4
73101: PUSH
73102: EMPTY
73103: LIST
73104: LIST
73105: PUSH
73106: LD_INT 1
73108: NEG
73109: PUSH
73110: LD_INT 3
73112: PUSH
73113: EMPTY
73114: LIST
73115: LIST
73116: PUSH
73117: LD_INT 2
73119: PUSH
73120: LD_INT 5
73122: PUSH
73123: EMPTY
73124: LIST
73125: LIST
73126: PUSH
73127: LD_INT 2
73129: NEG
73130: PUSH
73131: LD_INT 3
73133: PUSH
73134: EMPTY
73135: LIST
73136: LIST
73137: PUSH
73138: EMPTY
73139: LIST
73140: LIST
73141: LIST
73142: LIST
73143: LIST
73144: LIST
73145: LIST
73146: LIST
73147: LIST
73148: LIST
73149: LIST
73150: LIST
73151: LIST
73152: LIST
73153: LIST
73154: LIST
73155: LIST
73156: LIST
73157: LIST
73158: LIST
73159: LIST
73160: LIST
73161: LIST
73162: LIST
73163: LIST
73164: LIST
73165: LIST
73166: LIST
73167: LIST
73168: LIST
73169: LIST
73170: LIST
73171: LIST
73172: LIST
73173: LIST
73174: LIST
73175: LIST
73176: LIST
73177: LIST
73178: LIST
73179: LIST
73180: LIST
73181: LIST
73182: LIST
73183: LIST
73184: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
73185: LD_ADDR_VAR 0 34
73189: PUSH
73190: LD_INT 0
73192: PUSH
73193: LD_INT 4
73195: NEG
73196: PUSH
73197: EMPTY
73198: LIST
73199: LIST
73200: PUSH
73201: LD_INT 0
73203: PUSH
73204: LD_INT 5
73206: NEG
73207: PUSH
73208: EMPTY
73209: LIST
73210: LIST
73211: PUSH
73212: LD_INT 1
73214: PUSH
73215: LD_INT 4
73217: NEG
73218: PUSH
73219: EMPTY
73220: LIST
73221: LIST
73222: PUSH
73223: LD_INT 1
73225: PUSH
73226: LD_INT 3
73228: NEG
73229: PUSH
73230: EMPTY
73231: LIST
73232: LIST
73233: PUSH
73234: LD_INT 0
73236: PUSH
73237: LD_INT 3
73239: NEG
73240: PUSH
73241: EMPTY
73242: LIST
73243: LIST
73244: PUSH
73245: LD_INT 1
73247: NEG
73248: PUSH
73249: LD_INT 4
73251: NEG
73252: PUSH
73253: EMPTY
73254: LIST
73255: LIST
73256: PUSH
73257: LD_INT 1
73259: NEG
73260: PUSH
73261: LD_INT 5
73263: NEG
73264: PUSH
73265: EMPTY
73266: LIST
73267: LIST
73268: PUSH
73269: LD_INT 2
73271: PUSH
73272: LD_INT 3
73274: NEG
73275: PUSH
73276: EMPTY
73277: LIST
73278: LIST
73279: PUSH
73280: LD_INT 2
73282: NEG
73283: PUSH
73284: LD_INT 5
73286: NEG
73287: PUSH
73288: EMPTY
73289: LIST
73290: LIST
73291: PUSH
73292: LD_INT 3
73294: PUSH
73295: LD_INT 0
73297: PUSH
73298: EMPTY
73299: LIST
73300: LIST
73301: PUSH
73302: LD_INT 3
73304: PUSH
73305: LD_INT 1
73307: NEG
73308: PUSH
73309: EMPTY
73310: LIST
73311: LIST
73312: PUSH
73313: LD_INT 4
73315: PUSH
73316: LD_INT 0
73318: PUSH
73319: EMPTY
73320: LIST
73321: LIST
73322: PUSH
73323: LD_INT 4
73325: PUSH
73326: LD_INT 1
73328: PUSH
73329: EMPTY
73330: LIST
73331: LIST
73332: PUSH
73333: LD_INT 3
73335: PUSH
73336: LD_INT 1
73338: PUSH
73339: EMPTY
73340: LIST
73341: LIST
73342: PUSH
73343: LD_INT 2
73345: PUSH
73346: LD_INT 0
73348: PUSH
73349: EMPTY
73350: LIST
73351: LIST
73352: PUSH
73353: LD_INT 2
73355: PUSH
73356: LD_INT 1
73358: NEG
73359: PUSH
73360: EMPTY
73361: LIST
73362: LIST
73363: PUSH
73364: LD_INT 2
73366: PUSH
73367: LD_INT 2
73369: NEG
73370: PUSH
73371: EMPTY
73372: LIST
73373: LIST
73374: PUSH
73375: LD_INT 4
73377: PUSH
73378: LD_INT 2
73380: PUSH
73381: EMPTY
73382: LIST
73383: LIST
73384: PUSH
73385: LD_INT 4
73387: PUSH
73388: LD_INT 4
73390: PUSH
73391: EMPTY
73392: LIST
73393: LIST
73394: PUSH
73395: LD_INT 4
73397: PUSH
73398: LD_INT 3
73400: PUSH
73401: EMPTY
73402: LIST
73403: LIST
73404: PUSH
73405: LD_INT 5
73407: PUSH
73408: LD_INT 4
73410: PUSH
73411: EMPTY
73412: LIST
73413: LIST
73414: PUSH
73415: LD_INT 5
73417: PUSH
73418: LD_INT 5
73420: PUSH
73421: EMPTY
73422: LIST
73423: LIST
73424: PUSH
73425: LD_INT 4
73427: PUSH
73428: LD_INT 5
73430: PUSH
73431: EMPTY
73432: LIST
73433: LIST
73434: PUSH
73435: LD_INT 3
73437: PUSH
73438: LD_INT 4
73440: PUSH
73441: EMPTY
73442: LIST
73443: LIST
73444: PUSH
73445: LD_INT 3
73447: PUSH
73448: LD_INT 3
73450: PUSH
73451: EMPTY
73452: LIST
73453: LIST
73454: PUSH
73455: LD_INT 5
73457: PUSH
73458: LD_INT 3
73460: PUSH
73461: EMPTY
73462: LIST
73463: LIST
73464: PUSH
73465: LD_INT 3
73467: PUSH
73468: LD_INT 5
73470: PUSH
73471: EMPTY
73472: LIST
73473: LIST
73474: PUSH
73475: LD_INT 0
73477: PUSH
73478: LD_INT 3
73480: PUSH
73481: EMPTY
73482: LIST
73483: LIST
73484: PUSH
73485: LD_INT 0
73487: PUSH
73488: LD_INT 2
73490: PUSH
73491: EMPTY
73492: LIST
73493: LIST
73494: PUSH
73495: LD_INT 1
73497: PUSH
73498: LD_INT 3
73500: PUSH
73501: EMPTY
73502: LIST
73503: LIST
73504: PUSH
73505: LD_INT 1
73507: PUSH
73508: LD_INT 4
73510: PUSH
73511: EMPTY
73512: LIST
73513: LIST
73514: PUSH
73515: LD_INT 0
73517: PUSH
73518: LD_INT 4
73520: PUSH
73521: EMPTY
73522: LIST
73523: LIST
73524: PUSH
73525: LD_INT 1
73527: NEG
73528: PUSH
73529: LD_INT 3
73531: PUSH
73532: EMPTY
73533: LIST
73534: LIST
73535: PUSH
73536: LD_INT 1
73538: NEG
73539: PUSH
73540: LD_INT 2
73542: PUSH
73543: EMPTY
73544: LIST
73545: LIST
73546: PUSH
73547: LD_INT 2
73549: PUSH
73550: LD_INT 4
73552: PUSH
73553: EMPTY
73554: LIST
73555: LIST
73556: PUSH
73557: LD_INT 2
73559: NEG
73560: PUSH
73561: LD_INT 2
73563: PUSH
73564: EMPTY
73565: LIST
73566: LIST
73567: PUSH
73568: LD_INT 4
73570: NEG
73571: PUSH
73572: LD_INT 0
73574: PUSH
73575: EMPTY
73576: LIST
73577: LIST
73578: PUSH
73579: LD_INT 4
73581: NEG
73582: PUSH
73583: LD_INT 1
73585: NEG
73586: PUSH
73587: EMPTY
73588: LIST
73589: LIST
73590: PUSH
73591: LD_INT 3
73593: NEG
73594: PUSH
73595: LD_INT 0
73597: PUSH
73598: EMPTY
73599: LIST
73600: LIST
73601: PUSH
73602: LD_INT 3
73604: NEG
73605: PUSH
73606: LD_INT 1
73608: PUSH
73609: EMPTY
73610: LIST
73611: LIST
73612: PUSH
73613: LD_INT 4
73615: NEG
73616: PUSH
73617: LD_INT 1
73619: PUSH
73620: EMPTY
73621: LIST
73622: LIST
73623: PUSH
73624: LD_INT 5
73626: NEG
73627: PUSH
73628: LD_INT 0
73630: PUSH
73631: EMPTY
73632: LIST
73633: LIST
73634: PUSH
73635: LD_INT 5
73637: NEG
73638: PUSH
73639: LD_INT 1
73641: NEG
73642: PUSH
73643: EMPTY
73644: LIST
73645: LIST
73646: PUSH
73647: LD_INT 5
73649: NEG
73650: PUSH
73651: LD_INT 2
73653: NEG
73654: PUSH
73655: EMPTY
73656: LIST
73657: LIST
73658: PUSH
73659: LD_INT 3
73661: NEG
73662: PUSH
73663: LD_INT 2
73665: PUSH
73666: EMPTY
73667: LIST
73668: LIST
73669: PUSH
73670: EMPTY
73671: LIST
73672: LIST
73673: LIST
73674: LIST
73675: LIST
73676: LIST
73677: LIST
73678: LIST
73679: LIST
73680: LIST
73681: LIST
73682: LIST
73683: LIST
73684: LIST
73685: LIST
73686: LIST
73687: LIST
73688: LIST
73689: LIST
73690: LIST
73691: LIST
73692: LIST
73693: LIST
73694: LIST
73695: LIST
73696: LIST
73697: LIST
73698: LIST
73699: LIST
73700: LIST
73701: LIST
73702: LIST
73703: LIST
73704: LIST
73705: LIST
73706: LIST
73707: LIST
73708: LIST
73709: LIST
73710: LIST
73711: LIST
73712: LIST
73713: LIST
73714: LIST
73715: LIST
73716: ST_TO_ADDR
// end ; end ;
73717: GO 73720
73719: POP
// case btype of b_depot , b_warehouse :
73720: LD_VAR 0 1
73724: PUSH
73725: LD_INT 0
73727: DOUBLE
73728: EQUAL
73729: IFTRUE 73739
73731: LD_INT 1
73733: DOUBLE
73734: EQUAL
73735: IFTRUE 73739
73737: GO 73940
73739: POP
// case nation of nation_american :
73740: LD_VAR 0 5
73744: PUSH
73745: LD_INT 1
73747: DOUBLE
73748: EQUAL
73749: IFTRUE 73753
73751: GO 73809
73753: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
73754: LD_ADDR_VAR 0 9
73758: PUSH
73759: LD_VAR 0 11
73763: PUSH
73764: LD_VAR 0 12
73768: PUSH
73769: LD_VAR 0 13
73773: PUSH
73774: LD_VAR 0 14
73778: PUSH
73779: LD_VAR 0 15
73783: PUSH
73784: LD_VAR 0 16
73788: PUSH
73789: EMPTY
73790: LIST
73791: LIST
73792: LIST
73793: LIST
73794: LIST
73795: LIST
73796: PUSH
73797: LD_VAR 0 4
73801: PUSH
73802: LD_INT 1
73804: PLUS
73805: ARRAY
73806: ST_TO_ADDR
73807: GO 73938
73809: LD_INT 2
73811: DOUBLE
73812: EQUAL
73813: IFTRUE 73817
73815: GO 73873
73817: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
73818: LD_ADDR_VAR 0 9
73822: PUSH
73823: LD_VAR 0 17
73827: PUSH
73828: LD_VAR 0 18
73832: PUSH
73833: LD_VAR 0 19
73837: PUSH
73838: LD_VAR 0 20
73842: PUSH
73843: LD_VAR 0 21
73847: PUSH
73848: LD_VAR 0 22
73852: PUSH
73853: EMPTY
73854: LIST
73855: LIST
73856: LIST
73857: LIST
73858: LIST
73859: LIST
73860: PUSH
73861: LD_VAR 0 4
73865: PUSH
73866: LD_INT 1
73868: PLUS
73869: ARRAY
73870: ST_TO_ADDR
73871: GO 73938
73873: LD_INT 3
73875: DOUBLE
73876: EQUAL
73877: IFTRUE 73881
73879: GO 73937
73881: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
73882: LD_ADDR_VAR 0 9
73886: PUSH
73887: LD_VAR 0 23
73891: PUSH
73892: LD_VAR 0 24
73896: PUSH
73897: LD_VAR 0 25
73901: PUSH
73902: LD_VAR 0 26
73906: PUSH
73907: LD_VAR 0 27
73911: PUSH
73912: LD_VAR 0 28
73916: PUSH
73917: EMPTY
73918: LIST
73919: LIST
73920: LIST
73921: LIST
73922: LIST
73923: LIST
73924: PUSH
73925: LD_VAR 0 4
73929: PUSH
73930: LD_INT 1
73932: PLUS
73933: ARRAY
73934: ST_TO_ADDR
73935: GO 73938
73937: POP
73938: GO 74493
73940: LD_INT 2
73942: DOUBLE
73943: EQUAL
73944: IFTRUE 73954
73946: LD_INT 3
73948: DOUBLE
73949: EQUAL
73950: IFTRUE 73954
73952: GO 74010
73954: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73955: LD_ADDR_VAR 0 9
73959: PUSH
73960: LD_VAR 0 29
73964: PUSH
73965: LD_VAR 0 30
73969: PUSH
73970: LD_VAR 0 31
73974: PUSH
73975: LD_VAR 0 32
73979: PUSH
73980: LD_VAR 0 33
73984: PUSH
73985: LD_VAR 0 34
73989: PUSH
73990: EMPTY
73991: LIST
73992: LIST
73993: LIST
73994: LIST
73995: LIST
73996: LIST
73997: PUSH
73998: LD_VAR 0 4
74002: PUSH
74003: LD_INT 1
74005: PLUS
74006: ARRAY
74007: ST_TO_ADDR
74008: GO 74493
74010: LD_INT 16
74012: DOUBLE
74013: EQUAL
74014: IFTRUE 74072
74016: LD_INT 17
74018: DOUBLE
74019: EQUAL
74020: IFTRUE 74072
74022: LD_INT 18
74024: DOUBLE
74025: EQUAL
74026: IFTRUE 74072
74028: LD_INT 19
74030: DOUBLE
74031: EQUAL
74032: IFTRUE 74072
74034: LD_INT 22
74036: DOUBLE
74037: EQUAL
74038: IFTRUE 74072
74040: LD_INT 20
74042: DOUBLE
74043: EQUAL
74044: IFTRUE 74072
74046: LD_INT 21
74048: DOUBLE
74049: EQUAL
74050: IFTRUE 74072
74052: LD_INT 23
74054: DOUBLE
74055: EQUAL
74056: IFTRUE 74072
74058: LD_INT 24
74060: DOUBLE
74061: EQUAL
74062: IFTRUE 74072
74064: LD_INT 25
74066: DOUBLE
74067: EQUAL
74068: IFTRUE 74072
74070: GO 74128
74072: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
74073: LD_ADDR_VAR 0 9
74077: PUSH
74078: LD_VAR 0 35
74082: PUSH
74083: LD_VAR 0 36
74087: PUSH
74088: LD_VAR 0 37
74092: PUSH
74093: LD_VAR 0 38
74097: PUSH
74098: LD_VAR 0 39
74102: PUSH
74103: LD_VAR 0 40
74107: PUSH
74108: EMPTY
74109: LIST
74110: LIST
74111: LIST
74112: LIST
74113: LIST
74114: LIST
74115: PUSH
74116: LD_VAR 0 4
74120: PUSH
74121: LD_INT 1
74123: PLUS
74124: ARRAY
74125: ST_TO_ADDR
74126: GO 74493
74128: LD_INT 6
74130: DOUBLE
74131: EQUAL
74132: IFTRUE 74184
74134: LD_INT 7
74136: DOUBLE
74137: EQUAL
74138: IFTRUE 74184
74140: LD_INT 8
74142: DOUBLE
74143: EQUAL
74144: IFTRUE 74184
74146: LD_INT 13
74148: DOUBLE
74149: EQUAL
74150: IFTRUE 74184
74152: LD_INT 12
74154: DOUBLE
74155: EQUAL
74156: IFTRUE 74184
74158: LD_INT 15
74160: DOUBLE
74161: EQUAL
74162: IFTRUE 74184
74164: LD_INT 11
74166: DOUBLE
74167: EQUAL
74168: IFTRUE 74184
74170: LD_INT 14
74172: DOUBLE
74173: EQUAL
74174: IFTRUE 74184
74176: LD_INT 10
74178: DOUBLE
74179: EQUAL
74180: IFTRUE 74184
74182: GO 74240
74184: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
74185: LD_ADDR_VAR 0 9
74189: PUSH
74190: LD_VAR 0 41
74194: PUSH
74195: LD_VAR 0 42
74199: PUSH
74200: LD_VAR 0 43
74204: PUSH
74205: LD_VAR 0 44
74209: PUSH
74210: LD_VAR 0 45
74214: PUSH
74215: LD_VAR 0 46
74219: PUSH
74220: EMPTY
74221: LIST
74222: LIST
74223: LIST
74224: LIST
74225: LIST
74226: LIST
74227: PUSH
74228: LD_VAR 0 4
74232: PUSH
74233: LD_INT 1
74235: PLUS
74236: ARRAY
74237: ST_TO_ADDR
74238: GO 74493
74240: LD_INT 36
74242: DOUBLE
74243: EQUAL
74244: IFTRUE 74248
74246: GO 74304
74248: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
74249: LD_ADDR_VAR 0 9
74253: PUSH
74254: LD_VAR 0 47
74258: PUSH
74259: LD_VAR 0 48
74263: PUSH
74264: LD_VAR 0 49
74268: PUSH
74269: LD_VAR 0 50
74273: PUSH
74274: LD_VAR 0 51
74278: PUSH
74279: LD_VAR 0 52
74283: PUSH
74284: EMPTY
74285: LIST
74286: LIST
74287: LIST
74288: LIST
74289: LIST
74290: LIST
74291: PUSH
74292: LD_VAR 0 4
74296: PUSH
74297: LD_INT 1
74299: PLUS
74300: ARRAY
74301: ST_TO_ADDR
74302: GO 74493
74304: LD_INT 4
74306: DOUBLE
74307: EQUAL
74308: IFTRUE 74330
74310: LD_INT 5
74312: DOUBLE
74313: EQUAL
74314: IFTRUE 74330
74316: LD_INT 34
74318: DOUBLE
74319: EQUAL
74320: IFTRUE 74330
74322: LD_INT 37
74324: DOUBLE
74325: EQUAL
74326: IFTRUE 74330
74328: GO 74386
74330: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
74331: LD_ADDR_VAR 0 9
74335: PUSH
74336: LD_VAR 0 53
74340: PUSH
74341: LD_VAR 0 54
74345: PUSH
74346: LD_VAR 0 55
74350: PUSH
74351: LD_VAR 0 56
74355: PUSH
74356: LD_VAR 0 57
74360: PUSH
74361: LD_VAR 0 58
74365: PUSH
74366: EMPTY
74367: LIST
74368: LIST
74369: LIST
74370: LIST
74371: LIST
74372: LIST
74373: PUSH
74374: LD_VAR 0 4
74378: PUSH
74379: LD_INT 1
74381: PLUS
74382: ARRAY
74383: ST_TO_ADDR
74384: GO 74493
74386: LD_INT 31
74388: DOUBLE
74389: EQUAL
74390: IFTRUE 74436
74392: LD_INT 32
74394: DOUBLE
74395: EQUAL
74396: IFTRUE 74436
74398: LD_INT 33
74400: DOUBLE
74401: EQUAL
74402: IFTRUE 74436
74404: LD_INT 27
74406: DOUBLE
74407: EQUAL
74408: IFTRUE 74436
74410: LD_INT 26
74412: DOUBLE
74413: EQUAL
74414: IFTRUE 74436
74416: LD_INT 28
74418: DOUBLE
74419: EQUAL
74420: IFTRUE 74436
74422: LD_INT 29
74424: DOUBLE
74425: EQUAL
74426: IFTRUE 74436
74428: LD_INT 30
74430: DOUBLE
74431: EQUAL
74432: IFTRUE 74436
74434: GO 74492
74436: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
74437: LD_ADDR_VAR 0 9
74441: PUSH
74442: LD_VAR 0 59
74446: PUSH
74447: LD_VAR 0 60
74451: PUSH
74452: LD_VAR 0 61
74456: PUSH
74457: LD_VAR 0 62
74461: PUSH
74462: LD_VAR 0 63
74466: PUSH
74467: LD_VAR 0 64
74471: PUSH
74472: EMPTY
74473: LIST
74474: LIST
74475: LIST
74476: LIST
74477: LIST
74478: LIST
74479: PUSH
74480: LD_VAR 0 4
74484: PUSH
74485: LD_INT 1
74487: PLUS
74488: ARRAY
74489: ST_TO_ADDR
74490: GO 74493
74492: POP
// temp_list2 = [ ] ;
74493: LD_ADDR_VAR 0 10
74497: PUSH
74498: EMPTY
74499: ST_TO_ADDR
// for i in temp_list do
74500: LD_ADDR_VAR 0 8
74504: PUSH
74505: LD_VAR 0 9
74509: PUSH
74510: FOR_IN
74511: IFFALSE 74563
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
74513: LD_ADDR_VAR 0 10
74517: PUSH
74518: LD_VAR 0 10
74522: PUSH
74523: LD_VAR 0 8
74527: PUSH
74528: LD_INT 1
74530: ARRAY
74531: PUSH
74532: LD_VAR 0 2
74536: PLUS
74537: PUSH
74538: LD_VAR 0 8
74542: PUSH
74543: LD_INT 2
74545: ARRAY
74546: PUSH
74547: LD_VAR 0 3
74551: PLUS
74552: PUSH
74553: EMPTY
74554: LIST
74555: LIST
74556: PUSH
74557: EMPTY
74558: LIST
74559: ADD
74560: ST_TO_ADDR
74561: GO 74510
74563: POP
74564: POP
// result = temp_list2 ;
74565: LD_ADDR_VAR 0 7
74569: PUSH
74570: LD_VAR 0 10
74574: ST_TO_ADDR
// end ;
74575: LD_VAR 0 7
74579: RET
// export function EnemyInRange ( unit , dist ) ; begin
74580: LD_INT 0
74582: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
74583: LD_ADDR_VAR 0 3
74587: PUSH
74588: LD_VAR 0 1
74592: PPUSH
74593: CALL_OW 255
74597: PPUSH
74598: LD_VAR 0 1
74602: PPUSH
74603: CALL_OW 250
74607: PPUSH
74608: LD_VAR 0 1
74612: PPUSH
74613: CALL_OW 251
74617: PPUSH
74618: LD_VAR 0 2
74622: PPUSH
74623: CALL 47953 0 4
74627: PUSH
74628: LD_INT 4
74630: ARRAY
74631: ST_TO_ADDR
// end ;
74632: LD_VAR 0 3
74636: RET
// export function PlayerSeeMe ( unit ) ; begin
74637: LD_INT 0
74639: PPUSH
// result := See ( your_side , unit ) ;
74640: LD_ADDR_VAR 0 2
74644: PUSH
74645: LD_OWVAR 2
74649: PPUSH
74650: LD_VAR 0 1
74654: PPUSH
74655: CALL_OW 292
74659: ST_TO_ADDR
// end ;
74660: LD_VAR 0 2
74664: RET
// export function ReverseDir ( unit ) ; begin
74665: LD_INT 0
74667: PPUSH
// if not unit then
74668: LD_VAR 0 1
74672: NOT
74673: IFFALSE 74677
// exit ;
74675: GO 74700
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
74677: LD_ADDR_VAR 0 2
74681: PUSH
74682: LD_VAR 0 1
74686: PPUSH
74687: CALL_OW 254
74691: PUSH
74692: LD_INT 3
74694: PLUS
74695: PUSH
74696: LD_INT 6
74698: MOD
74699: ST_TO_ADDR
// end ;
74700: LD_VAR 0 2
74704: RET
// export function ReverseArray ( array ) ; var i ; begin
74705: LD_INT 0
74707: PPUSH
74708: PPUSH
// if not array then
74709: LD_VAR 0 1
74713: NOT
74714: IFFALSE 74718
// exit ;
74716: GO 74773
// result := [ ] ;
74718: LD_ADDR_VAR 0 2
74722: PUSH
74723: EMPTY
74724: ST_TO_ADDR
// for i := array downto 1 do
74725: LD_ADDR_VAR 0 3
74729: PUSH
74730: DOUBLE
74731: LD_VAR 0 1
74735: INC
74736: ST_TO_ADDR
74737: LD_INT 1
74739: PUSH
74740: FOR_DOWNTO
74741: IFFALSE 74771
// result := Join ( result , array [ i ] ) ;
74743: LD_ADDR_VAR 0 2
74747: PUSH
74748: LD_VAR 0 2
74752: PPUSH
74753: LD_VAR 0 1
74757: PUSH
74758: LD_VAR 0 3
74762: ARRAY
74763: PPUSH
74764: CALL 79418 0 2
74768: ST_TO_ADDR
74769: GO 74740
74771: POP
74772: POP
// end ;
74773: LD_VAR 0 2
74777: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
74778: LD_INT 0
74780: PPUSH
74781: PPUSH
74782: PPUSH
74783: PPUSH
74784: PPUSH
74785: PPUSH
// if not unit or not hexes then
74786: LD_VAR 0 1
74790: NOT
74791: PUSH
74792: LD_VAR 0 2
74796: NOT
74797: OR
74798: IFFALSE 74802
// exit ;
74800: GO 74925
// dist := 9999 ;
74802: LD_ADDR_VAR 0 5
74806: PUSH
74807: LD_INT 9999
74809: ST_TO_ADDR
// for i = 1 to hexes do
74810: LD_ADDR_VAR 0 4
74814: PUSH
74815: DOUBLE
74816: LD_INT 1
74818: DEC
74819: ST_TO_ADDR
74820: LD_VAR 0 2
74824: PUSH
74825: FOR_TO
74826: IFFALSE 74913
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74828: LD_ADDR_VAR 0 6
74832: PUSH
74833: LD_VAR 0 1
74837: PPUSH
74838: LD_VAR 0 2
74842: PUSH
74843: LD_VAR 0 4
74847: ARRAY
74848: PUSH
74849: LD_INT 1
74851: ARRAY
74852: PPUSH
74853: LD_VAR 0 2
74857: PUSH
74858: LD_VAR 0 4
74862: ARRAY
74863: PUSH
74864: LD_INT 2
74866: ARRAY
74867: PPUSH
74868: CALL_OW 297
74872: ST_TO_ADDR
// if tdist < dist then
74873: LD_VAR 0 6
74877: PUSH
74878: LD_VAR 0 5
74882: LESS
74883: IFFALSE 74911
// begin hex := hexes [ i ] ;
74885: LD_ADDR_VAR 0 8
74889: PUSH
74890: LD_VAR 0 2
74894: PUSH
74895: LD_VAR 0 4
74899: ARRAY
74900: ST_TO_ADDR
// dist := tdist ;
74901: LD_ADDR_VAR 0 5
74905: PUSH
74906: LD_VAR 0 6
74910: ST_TO_ADDR
// end ; end ;
74911: GO 74825
74913: POP
74914: POP
// result := hex ;
74915: LD_ADDR_VAR 0 3
74919: PUSH
74920: LD_VAR 0 8
74924: ST_TO_ADDR
// end ;
74925: LD_VAR 0 3
74929: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74930: LD_INT 0
74932: PPUSH
74933: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74934: LD_VAR 0 1
74938: NOT
74939: PUSH
74940: LD_VAR 0 1
74944: PUSH
74945: LD_INT 21
74947: PUSH
74948: LD_INT 2
74950: PUSH
74951: EMPTY
74952: LIST
74953: LIST
74954: PUSH
74955: LD_INT 23
74957: PUSH
74958: LD_INT 2
74960: PUSH
74961: EMPTY
74962: LIST
74963: LIST
74964: PUSH
74965: EMPTY
74966: LIST
74967: LIST
74968: PPUSH
74969: CALL_OW 69
74973: IN
74974: NOT
74975: OR
74976: IFFALSE 74980
// exit ;
74978: GO 75027
// for i = 1 to 3 do
74980: LD_ADDR_VAR 0 3
74984: PUSH
74985: DOUBLE
74986: LD_INT 1
74988: DEC
74989: ST_TO_ADDR
74990: LD_INT 3
74992: PUSH
74993: FOR_TO
74994: IFFALSE 75025
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74996: LD_VAR 0 1
75000: PPUSH
75001: CALL_OW 250
75005: PPUSH
75006: LD_VAR 0 1
75010: PPUSH
75011: CALL_OW 251
75015: PPUSH
75016: LD_INT 1
75018: PPUSH
75019: CALL_OW 453
75023: GO 74993
75025: POP
75026: POP
// end ;
75027: LD_VAR 0 2
75031: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
75032: LD_INT 0
75034: PPUSH
75035: PPUSH
75036: PPUSH
75037: PPUSH
75038: PPUSH
75039: PPUSH
// if not unit or not enemy_unit then
75040: LD_VAR 0 1
75044: NOT
75045: PUSH
75046: LD_VAR 0 2
75050: NOT
75051: OR
75052: IFFALSE 75056
// exit ;
75054: GO 75523
// if GetLives ( i ) < 250 then
75056: LD_VAR 0 4
75060: PPUSH
75061: CALL_OW 256
75065: PUSH
75066: LD_INT 250
75068: LESS
75069: IFFALSE 75082
// begin ComAutodestruct ( i ) ;
75071: LD_VAR 0 4
75075: PPUSH
75076: CALL 74930 0 1
// exit ;
75080: GO 75523
// end ; x := GetX ( enemy_unit ) ;
75082: LD_ADDR_VAR 0 7
75086: PUSH
75087: LD_VAR 0 2
75091: PPUSH
75092: CALL_OW 250
75096: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
75097: LD_ADDR_VAR 0 8
75101: PUSH
75102: LD_VAR 0 2
75106: PPUSH
75107: CALL_OW 251
75111: ST_TO_ADDR
// if not x or not y then
75112: LD_VAR 0 7
75116: NOT
75117: PUSH
75118: LD_VAR 0 8
75122: NOT
75123: OR
75124: IFFALSE 75128
// exit ;
75126: GO 75523
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
75128: LD_ADDR_VAR 0 6
75132: PUSH
75133: LD_VAR 0 7
75137: PPUSH
75138: LD_INT 0
75140: PPUSH
75141: LD_INT 4
75143: PPUSH
75144: CALL_OW 272
75148: PUSH
75149: LD_VAR 0 8
75153: PPUSH
75154: LD_INT 0
75156: PPUSH
75157: LD_INT 4
75159: PPUSH
75160: CALL_OW 273
75164: PUSH
75165: EMPTY
75166: LIST
75167: LIST
75168: PUSH
75169: LD_VAR 0 7
75173: PPUSH
75174: LD_INT 1
75176: PPUSH
75177: LD_INT 4
75179: PPUSH
75180: CALL_OW 272
75184: PUSH
75185: LD_VAR 0 8
75189: PPUSH
75190: LD_INT 1
75192: PPUSH
75193: LD_INT 4
75195: PPUSH
75196: CALL_OW 273
75200: PUSH
75201: EMPTY
75202: LIST
75203: LIST
75204: PUSH
75205: LD_VAR 0 7
75209: PPUSH
75210: LD_INT 2
75212: PPUSH
75213: LD_INT 4
75215: PPUSH
75216: CALL_OW 272
75220: PUSH
75221: LD_VAR 0 8
75225: PPUSH
75226: LD_INT 2
75228: PPUSH
75229: LD_INT 4
75231: PPUSH
75232: CALL_OW 273
75236: PUSH
75237: EMPTY
75238: LIST
75239: LIST
75240: PUSH
75241: LD_VAR 0 7
75245: PPUSH
75246: LD_INT 3
75248: PPUSH
75249: LD_INT 4
75251: PPUSH
75252: CALL_OW 272
75256: PUSH
75257: LD_VAR 0 8
75261: PPUSH
75262: LD_INT 3
75264: PPUSH
75265: LD_INT 4
75267: PPUSH
75268: CALL_OW 273
75272: PUSH
75273: EMPTY
75274: LIST
75275: LIST
75276: PUSH
75277: LD_VAR 0 7
75281: PPUSH
75282: LD_INT 4
75284: PPUSH
75285: LD_INT 4
75287: PPUSH
75288: CALL_OW 272
75292: PUSH
75293: LD_VAR 0 8
75297: PPUSH
75298: LD_INT 4
75300: PPUSH
75301: LD_INT 4
75303: PPUSH
75304: CALL_OW 273
75308: PUSH
75309: EMPTY
75310: LIST
75311: LIST
75312: PUSH
75313: LD_VAR 0 7
75317: PPUSH
75318: LD_INT 5
75320: PPUSH
75321: LD_INT 4
75323: PPUSH
75324: CALL_OW 272
75328: PUSH
75329: LD_VAR 0 8
75333: PPUSH
75334: LD_INT 5
75336: PPUSH
75337: LD_INT 4
75339: PPUSH
75340: CALL_OW 273
75344: PUSH
75345: EMPTY
75346: LIST
75347: LIST
75348: PUSH
75349: EMPTY
75350: LIST
75351: LIST
75352: LIST
75353: LIST
75354: LIST
75355: LIST
75356: ST_TO_ADDR
// for i = tmp downto 1 do
75357: LD_ADDR_VAR 0 4
75361: PUSH
75362: DOUBLE
75363: LD_VAR 0 6
75367: INC
75368: ST_TO_ADDR
75369: LD_INT 1
75371: PUSH
75372: FOR_DOWNTO
75373: IFFALSE 75474
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
75375: LD_VAR 0 6
75379: PUSH
75380: LD_VAR 0 4
75384: ARRAY
75385: PUSH
75386: LD_INT 1
75388: ARRAY
75389: PPUSH
75390: LD_VAR 0 6
75394: PUSH
75395: LD_VAR 0 4
75399: ARRAY
75400: PUSH
75401: LD_INT 2
75403: ARRAY
75404: PPUSH
75405: CALL_OW 488
75409: NOT
75410: PUSH
75411: LD_VAR 0 6
75415: PUSH
75416: LD_VAR 0 4
75420: ARRAY
75421: PUSH
75422: LD_INT 1
75424: ARRAY
75425: PPUSH
75426: LD_VAR 0 6
75430: PUSH
75431: LD_VAR 0 4
75435: ARRAY
75436: PUSH
75437: LD_INT 2
75439: ARRAY
75440: PPUSH
75441: CALL_OW 428
75445: PUSH
75446: LD_INT 0
75448: NONEQUAL
75449: OR
75450: IFFALSE 75472
// tmp := Delete ( tmp , i ) ;
75452: LD_ADDR_VAR 0 6
75456: PUSH
75457: LD_VAR 0 6
75461: PPUSH
75462: LD_VAR 0 4
75466: PPUSH
75467: CALL_OW 3
75471: ST_TO_ADDR
75472: GO 75372
75474: POP
75475: POP
// j := GetClosestHex ( unit , tmp ) ;
75476: LD_ADDR_VAR 0 5
75480: PUSH
75481: LD_VAR 0 1
75485: PPUSH
75486: LD_VAR 0 6
75490: PPUSH
75491: CALL 74778 0 2
75495: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
75496: LD_VAR 0 1
75500: PPUSH
75501: LD_VAR 0 5
75505: PUSH
75506: LD_INT 1
75508: ARRAY
75509: PPUSH
75510: LD_VAR 0 5
75514: PUSH
75515: LD_INT 2
75517: ARRAY
75518: PPUSH
75519: CALL_OW 111
// end ;
75523: LD_VAR 0 3
75527: RET
// export function PrepareApemanSoldier ( ) ; begin
75528: LD_INT 0
75530: PPUSH
// uc_nation := 0 ;
75531: LD_ADDR_OWVAR 21
75535: PUSH
75536: LD_INT 0
75538: ST_TO_ADDR
// hc_sex := sex_male ;
75539: LD_ADDR_OWVAR 27
75543: PUSH
75544: LD_INT 1
75546: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
75547: LD_ADDR_OWVAR 28
75551: PUSH
75552: LD_INT 15
75554: ST_TO_ADDR
// hc_gallery :=  ;
75555: LD_ADDR_OWVAR 33
75559: PUSH
75560: LD_STRING 
75562: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75563: LD_ADDR_OWVAR 31
75567: PUSH
75568: LD_INT 0
75570: PPUSH
75571: LD_INT 3
75573: PPUSH
75574: CALL_OW 12
75578: PUSH
75579: LD_INT 0
75581: PPUSH
75582: LD_INT 3
75584: PPUSH
75585: CALL_OW 12
75589: PUSH
75590: LD_INT 0
75592: PUSH
75593: LD_INT 0
75595: PUSH
75596: EMPTY
75597: LIST
75598: LIST
75599: LIST
75600: LIST
75601: ST_TO_ADDR
// end ;
75602: LD_VAR 0 1
75606: RET
// export function PrepareApemanEngineer ( ) ; begin
75607: LD_INT 0
75609: PPUSH
// uc_nation := 0 ;
75610: LD_ADDR_OWVAR 21
75614: PUSH
75615: LD_INT 0
75617: ST_TO_ADDR
// hc_sex := sex_male ;
75618: LD_ADDR_OWVAR 27
75622: PUSH
75623: LD_INT 1
75625: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
75626: LD_ADDR_OWVAR 28
75630: PUSH
75631: LD_INT 16
75633: ST_TO_ADDR
// hc_gallery :=  ;
75634: LD_ADDR_OWVAR 33
75638: PUSH
75639: LD_STRING 
75641: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75642: LD_ADDR_OWVAR 31
75646: PUSH
75647: LD_INT 0
75649: PPUSH
75650: LD_INT 3
75652: PPUSH
75653: CALL_OW 12
75657: PUSH
75658: LD_INT 0
75660: PPUSH
75661: LD_INT 3
75663: PPUSH
75664: CALL_OW 12
75668: PUSH
75669: LD_INT 0
75671: PUSH
75672: LD_INT 0
75674: PUSH
75675: EMPTY
75676: LIST
75677: LIST
75678: LIST
75679: LIST
75680: ST_TO_ADDR
// end ;
75681: LD_VAR 0 1
75685: RET
// export function PrepareApeman ( agressivity ) ; begin
75686: LD_INT 0
75688: PPUSH
// uc_side := 0 ;
75689: LD_ADDR_OWVAR 20
75693: PUSH
75694: LD_INT 0
75696: ST_TO_ADDR
// uc_nation := 0 ;
75697: LD_ADDR_OWVAR 21
75701: PUSH
75702: LD_INT 0
75704: ST_TO_ADDR
// hc_sex := sex_male ;
75705: LD_ADDR_OWVAR 27
75709: PUSH
75710: LD_INT 1
75712: ST_TO_ADDR
// hc_class := class_apeman ;
75713: LD_ADDR_OWVAR 28
75717: PUSH
75718: LD_INT 12
75720: ST_TO_ADDR
// hc_gallery :=  ;
75721: LD_ADDR_OWVAR 33
75725: PUSH
75726: LD_STRING 
75728: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75729: LD_ADDR_OWVAR 35
75733: PUSH
75734: LD_VAR 0 1
75738: NEG
75739: PPUSH
75740: LD_VAR 0 1
75744: PPUSH
75745: CALL_OW 12
75749: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
75750: LD_ADDR_OWVAR 31
75754: PUSH
75755: LD_INT 0
75757: PPUSH
75758: LD_INT 3
75760: PPUSH
75761: CALL_OW 12
75765: PUSH
75766: LD_INT 0
75768: PPUSH
75769: LD_INT 3
75771: PPUSH
75772: CALL_OW 12
75776: PUSH
75777: LD_INT 0
75779: PUSH
75780: LD_INT 0
75782: PUSH
75783: EMPTY
75784: LIST
75785: LIST
75786: LIST
75787: LIST
75788: ST_TO_ADDR
// end ;
75789: LD_VAR 0 2
75793: RET
// export function PrepareTiger ( agressivity ) ; begin
75794: LD_INT 0
75796: PPUSH
// uc_side := 0 ;
75797: LD_ADDR_OWVAR 20
75801: PUSH
75802: LD_INT 0
75804: ST_TO_ADDR
// uc_nation := 0 ;
75805: LD_ADDR_OWVAR 21
75809: PUSH
75810: LD_INT 0
75812: ST_TO_ADDR
// hc_class := class_tiger ;
75813: LD_ADDR_OWVAR 28
75817: PUSH
75818: LD_INT 14
75820: ST_TO_ADDR
// hc_gallery :=  ;
75821: LD_ADDR_OWVAR 33
75825: PUSH
75826: LD_STRING 
75828: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
75829: LD_ADDR_OWVAR 35
75833: PUSH
75834: LD_VAR 0 1
75838: NEG
75839: PPUSH
75840: LD_VAR 0 1
75844: PPUSH
75845: CALL_OW 12
75849: ST_TO_ADDR
// end ;
75850: LD_VAR 0 2
75854: RET
// export function PrepareEnchidna ( ) ; begin
75855: LD_INT 0
75857: PPUSH
// uc_side := 0 ;
75858: LD_ADDR_OWVAR 20
75862: PUSH
75863: LD_INT 0
75865: ST_TO_ADDR
// uc_nation := 0 ;
75866: LD_ADDR_OWVAR 21
75870: PUSH
75871: LD_INT 0
75873: ST_TO_ADDR
// hc_class := class_baggie ;
75874: LD_ADDR_OWVAR 28
75878: PUSH
75879: LD_INT 13
75881: ST_TO_ADDR
// hc_gallery :=  ;
75882: LD_ADDR_OWVAR 33
75886: PUSH
75887: LD_STRING 
75889: ST_TO_ADDR
// end ;
75890: LD_VAR 0 1
75894: RET
// export function PrepareFrog ( ) ; begin
75895: LD_INT 0
75897: PPUSH
// uc_side := 0 ;
75898: LD_ADDR_OWVAR 20
75902: PUSH
75903: LD_INT 0
75905: ST_TO_ADDR
// uc_nation := 0 ;
75906: LD_ADDR_OWVAR 21
75910: PUSH
75911: LD_INT 0
75913: ST_TO_ADDR
// hc_class := class_frog ;
75914: LD_ADDR_OWVAR 28
75918: PUSH
75919: LD_INT 19
75921: ST_TO_ADDR
// hc_gallery :=  ;
75922: LD_ADDR_OWVAR 33
75926: PUSH
75927: LD_STRING 
75929: ST_TO_ADDR
// end ;
75930: LD_VAR 0 1
75934: RET
// export function PrepareFish ( ) ; begin
75935: LD_INT 0
75937: PPUSH
// uc_side := 0 ;
75938: LD_ADDR_OWVAR 20
75942: PUSH
75943: LD_INT 0
75945: ST_TO_ADDR
// uc_nation := 0 ;
75946: LD_ADDR_OWVAR 21
75950: PUSH
75951: LD_INT 0
75953: ST_TO_ADDR
// hc_class := class_fish ;
75954: LD_ADDR_OWVAR 28
75958: PUSH
75959: LD_INT 20
75961: ST_TO_ADDR
// hc_gallery :=  ;
75962: LD_ADDR_OWVAR 33
75966: PUSH
75967: LD_STRING 
75969: ST_TO_ADDR
// end ;
75970: LD_VAR 0 1
75974: RET
// export function PrepareBird ( ) ; begin
75975: LD_INT 0
75977: PPUSH
// uc_side := 0 ;
75978: LD_ADDR_OWVAR 20
75982: PUSH
75983: LD_INT 0
75985: ST_TO_ADDR
// uc_nation := 0 ;
75986: LD_ADDR_OWVAR 21
75990: PUSH
75991: LD_INT 0
75993: ST_TO_ADDR
// hc_class := class_phororhacos ;
75994: LD_ADDR_OWVAR 28
75998: PUSH
75999: LD_INT 18
76001: ST_TO_ADDR
// hc_gallery :=  ;
76002: LD_ADDR_OWVAR 33
76006: PUSH
76007: LD_STRING 
76009: ST_TO_ADDR
// end ;
76010: LD_VAR 0 1
76014: RET
// export function PrepareHorse ( ) ; begin
76015: LD_INT 0
76017: PPUSH
// uc_side := 0 ;
76018: LD_ADDR_OWVAR 20
76022: PUSH
76023: LD_INT 0
76025: ST_TO_ADDR
// uc_nation := 0 ;
76026: LD_ADDR_OWVAR 21
76030: PUSH
76031: LD_INT 0
76033: ST_TO_ADDR
// hc_class := class_horse ;
76034: LD_ADDR_OWVAR 28
76038: PUSH
76039: LD_INT 21
76041: ST_TO_ADDR
// hc_gallery :=  ;
76042: LD_ADDR_OWVAR 33
76046: PUSH
76047: LD_STRING 
76049: ST_TO_ADDR
// end ;
76050: LD_VAR 0 1
76054: RET
// export function PrepareMastodont ( ) ; begin
76055: LD_INT 0
76057: PPUSH
// uc_side := 0 ;
76058: LD_ADDR_OWVAR 20
76062: PUSH
76063: LD_INT 0
76065: ST_TO_ADDR
// uc_nation := 0 ;
76066: LD_ADDR_OWVAR 21
76070: PUSH
76071: LD_INT 0
76073: ST_TO_ADDR
// vc_chassis := class_mastodont ;
76074: LD_ADDR_OWVAR 37
76078: PUSH
76079: LD_INT 31
76081: ST_TO_ADDR
// vc_control := control_rider ;
76082: LD_ADDR_OWVAR 38
76086: PUSH
76087: LD_INT 4
76089: ST_TO_ADDR
// end ;
76090: LD_VAR 0 1
76094: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
76095: LD_INT 0
76097: PPUSH
76098: PPUSH
76099: PPUSH
// uc_side = 0 ;
76100: LD_ADDR_OWVAR 20
76104: PUSH
76105: LD_INT 0
76107: ST_TO_ADDR
// uc_nation = 0 ;
76108: LD_ADDR_OWVAR 21
76112: PUSH
76113: LD_INT 0
76115: ST_TO_ADDR
// InitHc_All ( ) ;
76116: CALL_OW 584
// InitVc ;
76120: CALL_OW 20
// if mastodonts then
76124: LD_VAR 0 6
76128: IFFALSE 76195
// for i = 1 to mastodonts do
76130: LD_ADDR_VAR 0 11
76134: PUSH
76135: DOUBLE
76136: LD_INT 1
76138: DEC
76139: ST_TO_ADDR
76140: LD_VAR 0 6
76144: PUSH
76145: FOR_TO
76146: IFFALSE 76193
// begin vc_chassis := 31 ;
76148: LD_ADDR_OWVAR 37
76152: PUSH
76153: LD_INT 31
76155: ST_TO_ADDR
// vc_control := control_rider ;
76156: LD_ADDR_OWVAR 38
76160: PUSH
76161: LD_INT 4
76163: ST_TO_ADDR
// animal := CreateVehicle ;
76164: LD_ADDR_VAR 0 12
76168: PUSH
76169: CALL_OW 45
76173: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76174: LD_VAR 0 12
76178: PPUSH
76179: LD_VAR 0 8
76183: PPUSH
76184: LD_INT 0
76186: PPUSH
76187: CALL 78323 0 3
// end ;
76191: GO 76145
76193: POP
76194: POP
// if horses then
76195: LD_VAR 0 5
76199: IFFALSE 76266
// for i = 1 to horses do
76201: LD_ADDR_VAR 0 11
76205: PUSH
76206: DOUBLE
76207: LD_INT 1
76209: DEC
76210: ST_TO_ADDR
76211: LD_VAR 0 5
76215: PUSH
76216: FOR_TO
76217: IFFALSE 76264
// begin hc_class := 21 ;
76219: LD_ADDR_OWVAR 28
76223: PUSH
76224: LD_INT 21
76226: ST_TO_ADDR
// hc_gallery :=  ;
76227: LD_ADDR_OWVAR 33
76231: PUSH
76232: LD_STRING 
76234: ST_TO_ADDR
// animal := CreateHuman ;
76235: LD_ADDR_VAR 0 12
76239: PUSH
76240: CALL_OW 44
76244: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76245: LD_VAR 0 12
76249: PPUSH
76250: LD_VAR 0 8
76254: PPUSH
76255: LD_INT 0
76257: PPUSH
76258: CALL 78323 0 3
// end ;
76262: GO 76216
76264: POP
76265: POP
// if birds then
76266: LD_VAR 0 1
76270: IFFALSE 76337
// for i = 1 to birds do
76272: LD_ADDR_VAR 0 11
76276: PUSH
76277: DOUBLE
76278: LD_INT 1
76280: DEC
76281: ST_TO_ADDR
76282: LD_VAR 0 1
76286: PUSH
76287: FOR_TO
76288: IFFALSE 76335
// begin hc_class := 18 ;
76290: LD_ADDR_OWVAR 28
76294: PUSH
76295: LD_INT 18
76297: ST_TO_ADDR
// hc_gallery =  ;
76298: LD_ADDR_OWVAR 33
76302: PUSH
76303: LD_STRING 
76305: ST_TO_ADDR
// animal := CreateHuman ;
76306: LD_ADDR_VAR 0 12
76310: PUSH
76311: CALL_OW 44
76315: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76316: LD_VAR 0 12
76320: PPUSH
76321: LD_VAR 0 8
76325: PPUSH
76326: LD_INT 0
76328: PPUSH
76329: CALL 78323 0 3
// end ;
76333: GO 76287
76335: POP
76336: POP
// if tigers then
76337: LD_VAR 0 2
76341: IFFALSE 76425
// for i = 1 to tigers do
76343: LD_ADDR_VAR 0 11
76347: PUSH
76348: DOUBLE
76349: LD_INT 1
76351: DEC
76352: ST_TO_ADDR
76353: LD_VAR 0 2
76357: PUSH
76358: FOR_TO
76359: IFFALSE 76423
// begin hc_class = class_tiger ;
76361: LD_ADDR_OWVAR 28
76365: PUSH
76366: LD_INT 14
76368: ST_TO_ADDR
// hc_gallery =  ;
76369: LD_ADDR_OWVAR 33
76373: PUSH
76374: LD_STRING 
76376: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
76377: LD_ADDR_OWVAR 35
76381: PUSH
76382: LD_INT 7
76384: NEG
76385: PPUSH
76386: LD_INT 7
76388: PPUSH
76389: CALL_OW 12
76393: ST_TO_ADDR
// animal := CreateHuman ;
76394: LD_ADDR_VAR 0 12
76398: PUSH
76399: CALL_OW 44
76403: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76404: LD_VAR 0 12
76408: PPUSH
76409: LD_VAR 0 8
76413: PPUSH
76414: LD_INT 0
76416: PPUSH
76417: CALL 78323 0 3
// end ;
76421: GO 76358
76423: POP
76424: POP
// if apemans then
76425: LD_VAR 0 3
76429: IFFALSE 76552
// for i = 1 to apemans do
76431: LD_ADDR_VAR 0 11
76435: PUSH
76436: DOUBLE
76437: LD_INT 1
76439: DEC
76440: ST_TO_ADDR
76441: LD_VAR 0 3
76445: PUSH
76446: FOR_TO
76447: IFFALSE 76550
// begin hc_class = class_apeman ;
76449: LD_ADDR_OWVAR 28
76453: PUSH
76454: LD_INT 12
76456: ST_TO_ADDR
// hc_gallery =  ;
76457: LD_ADDR_OWVAR 33
76461: PUSH
76462: LD_STRING 
76464: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
76465: LD_ADDR_OWVAR 35
76469: PUSH
76470: LD_INT 2
76472: NEG
76473: PPUSH
76474: LD_INT 2
76476: PPUSH
76477: CALL_OW 12
76481: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
76482: LD_ADDR_OWVAR 31
76486: PUSH
76487: LD_INT 1
76489: PPUSH
76490: LD_INT 3
76492: PPUSH
76493: CALL_OW 12
76497: PUSH
76498: LD_INT 1
76500: PPUSH
76501: LD_INT 3
76503: PPUSH
76504: CALL_OW 12
76508: PUSH
76509: LD_INT 0
76511: PUSH
76512: LD_INT 0
76514: PUSH
76515: EMPTY
76516: LIST
76517: LIST
76518: LIST
76519: LIST
76520: ST_TO_ADDR
// animal := CreateHuman ;
76521: LD_ADDR_VAR 0 12
76525: PUSH
76526: CALL_OW 44
76530: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76531: LD_VAR 0 12
76535: PPUSH
76536: LD_VAR 0 8
76540: PPUSH
76541: LD_INT 0
76543: PPUSH
76544: CALL 78323 0 3
// end ;
76548: GO 76446
76550: POP
76551: POP
// if enchidnas then
76552: LD_VAR 0 4
76556: IFFALSE 76623
// for i = 1 to enchidnas do
76558: LD_ADDR_VAR 0 11
76562: PUSH
76563: DOUBLE
76564: LD_INT 1
76566: DEC
76567: ST_TO_ADDR
76568: LD_VAR 0 4
76572: PUSH
76573: FOR_TO
76574: IFFALSE 76621
// begin hc_class = 13 ;
76576: LD_ADDR_OWVAR 28
76580: PUSH
76581: LD_INT 13
76583: ST_TO_ADDR
// hc_gallery =  ;
76584: LD_ADDR_OWVAR 33
76588: PUSH
76589: LD_STRING 
76591: ST_TO_ADDR
// animal := CreateHuman ;
76592: LD_ADDR_VAR 0 12
76596: PUSH
76597: CALL_OW 44
76601: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76602: LD_VAR 0 12
76606: PPUSH
76607: LD_VAR 0 8
76611: PPUSH
76612: LD_INT 0
76614: PPUSH
76615: CALL 78323 0 3
// end ;
76619: GO 76573
76621: POP
76622: POP
// if fishes then
76623: LD_VAR 0 7
76627: IFFALSE 76694
// for i = 1 to fishes do
76629: LD_ADDR_VAR 0 11
76633: PUSH
76634: DOUBLE
76635: LD_INT 1
76637: DEC
76638: ST_TO_ADDR
76639: LD_VAR 0 7
76643: PUSH
76644: FOR_TO
76645: IFFALSE 76692
// begin hc_class = 20 ;
76647: LD_ADDR_OWVAR 28
76651: PUSH
76652: LD_INT 20
76654: ST_TO_ADDR
// hc_gallery =  ;
76655: LD_ADDR_OWVAR 33
76659: PUSH
76660: LD_STRING 
76662: ST_TO_ADDR
// animal := CreateHuman ;
76663: LD_ADDR_VAR 0 12
76667: PUSH
76668: CALL_OW 44
76672: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
76673: LD_VAR 0 12
76677: PPUSH
76678: LD_VAR 0 9
76682: PPUSH
76683: LD_INT 0
76685: PPUSH
76686: CALL 78323 0 3
// end ;
76690: GO 76644
76692: POP
76693: POP
// end ;
76694: LD_VAR 0 10
76698: RET
// export function WantHeal ( sci , unit ) ; begin
76699: LD_INT 0
76701: PPUSH
// if GetTaskList ( sci ) > 0 then
76702: LD_VAR 0 1
76706: PPUSH
76707: CALL_OW 437
76711: PUSH
76712: LD_INT 0
76714: GREATER
76715: IFFALSE 76785
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
76717: LD_VAR 0 1
76721: PPUSH
76722: CALL_OW 437
76726: PUSH
76727: LD_INT 1
76729: ARRAY
76730: PUSH
76731: LD_INT 1
76733: ARRAY
76734: PUSH
76735: LD_STRING l
76737: EQUAL
76738: PUSH
76739: LD_VAR 0 1
76743: PPUSH
76744: CALL_OW 437
76748: PUSH
76749: LD_INT 1
76751: ARRAY
76752: PUSH
76753: LD_INT 4
76755: ARRAY
76756: PUSH
76757: LD_VAR 0 2
76761: EQUAL
76762: AND
76763: IFFALSE 76775
// result := true else
76765: LD_ADDR_VAR 0 3
76769: PUSH
76770: LD_INT 1
76772: ST_TO_ADDR
76773: GO 76783
// result := false ;
76775: LD_ADDR_VAR 0 3
76779: PUSH
76780: LD_INT 0
76782: ST_TO_ADDR
// end else
76783: GO 76793
// result := false ;
76785: LD_ADDR_VAR 0 3
76789: PUSH
76790: LD_INT 0
76792: ST_TO_ADDR
// end ;
76793: LD_VAR 0 3
76797: RET
// export function HealTarget ( sci ) ; begin
76798: LD_INT 0
76800: PPUSH
// if not sci then
76801: LD_VAR 0 1
76805: NOT
76806: IFFALSE 76810
// exit ;
76808: GO 76875
// result := 0 ;
76810: LD_ADDR_VAR 0 2
76814: PUSH
76815: LD_INT 0
76817: ST_TO_ADDR
// if GetTaskList ( sci ) then
76818: LD_VAR 0 1
76822: PPUSH
76823: CALL_OW 437
76827: IFFALSE 76875
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
76829: LD_VAR 0 1
76833: PPUSH
76834: CALL_OW 437
76838: PUSH
76839: LD_INT 1
76841: ARRAY
76842: PUSH
76843: LD_INT 1
76845: ARRAY
76846: PUSH
76847: LD_STRING l
76849: EQUAL
76850: IFFALSE 76875
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
76852: LD_ADDR_VAR 0 2
76856: PUSH
76857: LD_VAR 0 1
76861: PPUSH
76862: CALL_OW 437
76866: PUSH
76867: LD_INT 1
76869: ARRAY
76870: PUSH
76871: LD_INT 4
76873: ARRAY
76874: ST_TO_ADDR
// end ;
76875: LD_VAR 0 2
76879: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
76880: LD_INT 0
76882: PPUSH
76883: PPUSH
76884: PPUSH
76885: PPUSH
// if not base_units then
76886: LD_VAR 0 1
76890: NOT
76891: IFFALSE 76895
// exit ;
76893: GO 76982
// result := false ;
76895: LD_ADDR_VAR 0 2
76899: PUSH
76900: LD_INT 0
76902: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
76903: LD_ADDR_VAR 0 5
76907: PUSH
76908: LD_VAR 0 1
76912: PPUSH
76913: LD_INT 21
76915: PUSH
76916: LD_INT 3
76918: PUSH
76919: EMPTY
76920: LIST
76921: LIST
76922: PPUSH
76923: CALL_OW 72
76927: ST_TO_ADDR
// if not tmp then
76928: LD_VAR 0 5
76932: NOT
76933: IFFALSE 76937
// exit ;
76935: GO 76982
// for i in tmp do
76937: LD_ADDR_VAR 0 3
76941: PUSH
76942: LD_VAR 0 5
76946: PUSH
76947: FOR_IN
76948: IFFALSE 76980
// begin result := EnemyInRange ( i , 22 ) ;
76950: LD_ADDR_VAR 0 2
76954: PUSH
76955: LD_VAR 0 3
76959: PPUSH
76960: LD_INT 22
76962: PPUSH
76963: CALL 74580 0 2
76967: ST_TO_ADDR
// if result then
76968: LD_VAR 0 2
76972: IFFALSE 76978
// exit ;
76974: POP
76975: POP
76976: GO 76982
// end ;
76978: GO 76947
76980: POP
76981: POP
// end ;
76982: LD_VAR 0 2
76986: RET
// export function FilterByTag ( units , tag ) ; begin
76987: LD_INT 0
76989: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
76990: LD_ADDR_VAR 0 3
76994: PUSH
76995: LD_VAR 0 1
76999: PPUSH
77000: LD_INT 120
77002: PUSH
77003: LD_VAR 0 2
77007: PUSH
77008: EMPTY
77009: LIST
77010: LIST
77011: PPUSH
77012: CALL_OW 72
77016: ST_TO_ADDR
// end ;
77017: LD_VAR 0 3
77021: RET
// export function IsDriver ( un ) ; begin
77022: LD_INT 0
77024: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
77025: LD_ADDR_VAR 0 2
77029: PUSH
77030: LD_VAR 0 1
77034: PUSH
77035: LD_INT 55
77037: PUSH
77038: EMPTY
77039: LIST
77040: PPUSH
77041: CALL_OW 69
77045: IN
77046: ST_TO_ADDR
// end ;
77047: LD_VAR 0 2
77051: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
77052: LD_INT 0
77054: PPUSH
77055: PPUSH
// list := [ ] ;
77056: LD_ADDR_VAR 0 5
77060: PUSH
77061: EMPTY
77062: ST_TO_ADDR
// case d of 0 :
77063: LD_VAR 0 3
77067: PUSH
77068: LD_INT 0
77070: DOUBLE
77071: EQUAL
77072: IFTRUE 77076
77074: GO 77209
77076: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
77077: LD_ADDR_VAR 0 5
77081: PUSH
77082: LD_VAR 0 1
77086: PUSH
77087: LD_INT 4
77089: MINUS
77090: PUSH
77091: LD_VAR 0 2
77095: PUSH
77096: LD_INT 4
77098: MINUS
77099: PUSH
77100: LD_INT 2
77102: PUSH
77103: EMPTY
77104: LIST
77105: LIST
77106: LIST
77107: PUSH
77108: LD_VAR 0 1
77112: PUSH
77113: LD_INT 3
77115: MINUS
77116: PUSH
77117: LD_VAR 0 2
77121: PUSH
77122: LD_INT 1
77124: PUSH
77125: EMPTY
77126: LIST
77127: LIST
77128: LIST
77129: PUSH
77130: LD_VAR 0 1
77134: PUSH
77135: LD_INT 4
77137: PLUS
77138: PUSH
77139: LD_VAR 0 2
77143: PUSH
77144: LD_INT 4
77146: PUSH
77147: EMPTY
77148: LIST
77149: LIST
77150: LIST
77151: PUSH
77152: LD_VAR 0 1
77156: PUSH
77157: LD_INT 3
77159: PLUS
77160: PUSH
77161: LD_VAR 0 2
77165: PUSH
77166: LD_INT 3
77168: PLUS
77169: PUSH
77170: LD_INT 5
77172: PUSH
77173: EMPTY
77174: LIST
77175: LIST
77176: LIST
77177: PUSH
77178: LD_VAR 0 1
77182: PUSH
77183: LD_VAR 0 2
77187: PUSH
77188: LD_INT 4
77190: PLUS
77191: PUSH
77192: LD_INT 0
77194: PUSH
77195: EMPTY
77196: LIST
77197: LIST
77198: LIST
77199: PUSH
77200: EMPTY
77201: LIST
77202: LIST
77203: LIST
77204: LIST
77205: LIST
77206: ST_TO_ADDR
// end ; 1 :
77207: GO 77907
77209: LD_INT 1
77211: DOUBLE
77212: EQUAL
77213: IFTRUE 77217
77215: GO 77350
77217: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
77218: LD_ADDR_VAR 0 5
77222: PUSH
77223: LD_VAR 0 1
77227: PUSH
77228: LD_VAR 0 2
77232: PUSH
77233: LD_INT 4
77235: MINUS
77236: PUSH
77237: LD_INT 3
77239: PUSH
77240: EMPTY
77241: LIST
77242: LIST
77243: LIST
77244: PUSH
77245: LD_VAR 0 1
77249: PUSH
77250: LD_INT 3
77252: MINUS
77253: PUSH
77254: LD_VAR 0 2
77258: PUSH
77259: LD_INT 3
77261: MINUS
77262: PUSH
77263: LD_INT 2
77265: PUSH
77266: EMPTY
77267: LIST
77268: LIST
77269: LIST
77270: PUSH
77271: LD_VAR 0 1
77275: PUSH
77276: LD_INT 4
77278: MINUS
77279: PUSH
77280: LD_VAR 0 2
77284: PUSH
77285: LD_INT 1
77287: PUSH
77288: EMPTY
77289: LIST
77290: LIST
77291: LIST
77292: PUSH
77293: LD_VAR 0 1
77297: PUSH
77298: LD_VAR 0 2
77302: PUSH
77303: LD_INT 3
77305: PLUS
77306: PUSH
77307: LD_INT 0
77309: PUSH
77310: EMPTY
77311: LIST
77312: LIST
77313: LIST
77314: PUSH
77315: LD_VAR 0 1
77319: PUSH
77320: LD_INT 4
77322: PLUS
77323: PUSH
77324: LD_VAR 0 2
77328: PUSH
77329: LD_INT 4
77331: PLUS
77332: PUSH
77333: LD_INT 5
77335: PUSH
77336: EMPTY
77337: LIST
77338: LIST
77339: LIST
77340: PUSH
77341: EMPTY
77342: LIST
77343: LIST
77344: LIST
77345: LIST
77346: LIST
77347: ST_TO_ADDR
// end ; 2 :
77348: GO 77907
77350: LD_INT 2
77352: DOUBLE
77353: EQUAL
77354: IFTRUE 77358
77356: GO 77487
77358: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
77359: LD_ADDR_VAR 0 5
77363: PUSH
77364: LD_VAR 0 1
77368: PUSH
77369: LD_VAR 0 2
77373: PUSH
77374: LD_INT 3
77376: MINUS
77377: PUSH
77378: LD_INT 3
77380: PUSH
77381: EMPTY
77382: LIST
77383: LIST
77384: LIST
77385: PUSH
77386: LD_VAR 0 1
77390: PUSH
77391: LD_INT 4
77393: PLUS
77394: PUSH
77395: LD_VAR 0 2
77399: PUSH
77400: LD_INT 4
77402: PUSH
77403: EMPTY
77404: LIST
77405: LIST
77406: LIST
77407: PUSH
77408: LD_VAR 0 1
77412: PUSH
77413: LD_VAR 0 2
77417: PUSH
77418: LD_INT 4
77420: PLUS
77421: PUSH
77422: LD_INT 0
77424: PUSH
77425: EMPTY
77426: LIST
77427: LIST
77428: LIST
77429: PUSH
77430: LD_VAR 0 1
77434: PUSH
77435: LD_INT 3
77437: MINUS
77438: PUSH
77439: LD_VAR 0 2
77443: PUSH
77444: LD_INT 1
77446: PUSH
77447: EMPTY
77448: LIST
77449: LIST
77450: LIST
77451: PUSH
77452: LD_VAR 0 1
77456: PUSH
77457: LD_INT 4
77459: MINUS
77460: PUSH
77461: LD_VAR 0 2
77465: PUSH
77466: LD_INT 4
77468: MINUS
77469: PUSH
77470: LD_INT 2
77472: PUSH
77473: EMPTY
77474: LIST
77475: LIST
77476: LIST
77477: PUSH
77478: EMPTY
77479: LIST
77480: LIST
77481: LIST
77482: LIST
77483: LIST
77484: ST_TO_ADDR
// end ; 3 :
77485: GO 77907
77487: LD_INT 3
77489: DOUBLE
77490: EQUAL
77491: IFTRUE 77495
77493: GO 77628
77495: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
77496: LD_ADDR_VAR 0 5
77500: PUSH
77501: LD_VAR 0 1
77505: PUSH
77506: LD_INT 3
77508: PLUS
77509: PUSH
77510: LD_VAR 0 2
77514: PUSH
77515: LD_INT 4
77517: PUSH
77518: EMPTY
77519: LIST
77520: LIST
77521: LIST
77522: PUSH
77523: LD_VAR 0 1
77527: PUSH
77528: LD_INT 4
77530: PLUS
77531: PUSH
77532: LD_VAR 0 2
77536: PUSH
77537: LD_INT 4
77539: PLUS
77540: PUSH
77541: LD_INT 5
77543: PUSH
77544: EMPTY
77545: LIST
77546: LIST
77547: LIST
77548: PUSH
77549: LD_VAR 0 1
77553: PUSH
77554: LD_INT 4
77556: MINUS
77557: PUSH
77558: LD_VAR 0 2
77562: PUSH
77563: LD_INT 1
77565: PUSH
77566: EMPTY
77567: LIST
77568: LIST
77569: LIST
77570: PUSH
77571: LD_VAR 0 1
77575: PUSH
77576: LD_VAR 0 2
77580: PUSH
77581: LD_INT 4
77583: MINUS
77584: PUSH
77585: LD_INT 3
77587: PUSH
77588: EMPTY
77589: LIST
77590: LIST
77591: LIST
77592: PUSH
77593: LD_VAR 0 1
77597: PUSH
77598: LD_INT 3
77600: MINUS
77601: PUSH
77602: LD_VAR 0 2
77606: PUSH
77607: LD_INT 3
77609: MINUS
77610: PUSH
77611: LD_INT 2
77613: PUSH
77614: EMPTY
77615: LIST
77616: LIST
77617: LIST
77618: PUSH
77619: EMPTY
77620: LIST
77621: LIST
77622: LIST
77623: LIST
77624: LIST
77625: ST_TO_ADDR
// end ; 4 :
77626: GO 77907
77628: LD_INT 4
77630: DOUBLE
77631: EQUAL
77632: IFTRUE 77636
77634: GO 77769
77636: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
77637: LD_ADDR_VAR 0 5
77641: PUSH
77642: LD_VAR 0 1
77646: PUSH
77647: LD_VAR 0 2
77651: PUSH
77652: LD_INT 4
77654: PLUS
77655: PUSH
77656: LD_INT 0
77658: PUSH
77659: EMPTY
77660: LIST
77661: LIST
77662: LIST
77663: PUSH
77664: LD_VAR 0 1
77668: PUSH
77669: LD_INT 3
77671: PLUS
77672: PUSH
77673: LD_VAR 0 2
77677: PUSH
77678: LD_INT 3
77680: PLUS
77681: PUSH
77682: LD_INT 5
77684: PUSH
77685: EMPTY
77686: LIST
77687: LIST
77688: LIST
77689: PUSH
77690: LD_VAR 0 1
77694: PUSH
77695: LD_INT 4
77697: PLUS
77698: PUSH
77699: LD_VAR 0 2
77703: PUSH
77704: LD_INT 4
77706: PUSH
77707: EMPTY
77708: LIST
77709: LIST
77710: LIST
77711: PUSH
77712: LD_VAR 0 1
77716: PUSH
77717: LD_VAR 0 2
77721: PUSH
77722: LD_INT 3
77724: MINUS
77725: PUSH
77726: LD_INT 3
77728: PUSH
77729: EMPTY
77730: LIST
77731: LIST
77732: LIST
77733: PUSH
77734: LD_VAR 0 1
77738: PUSH
77739: LD_INT 4
77741: MINUS
77742: PUSH
77743: LD_VAR 0 2
77747: PUSH
77748: LD_INT 4
77750: MINUS
77751: PUSH
77752: LD_INT 2
77754: PUSH
77755: EMPTY
77756: LIST
77757: LIST
77758: LIST
77759: PUSH
77760: EMPTY
77761: LIST
77762: LIST
77763: LIST
77764: LIST
77765: LIST
77766: ST_TO_ADDR
// end ; 5 :
77767: GO 77907
77769: LD_INT 5
77771: DOUBLE
77772: EQUAL
77773: IFTRUE 77777
77775: GO 77906
77777: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
77778: LD_ADDR_VAR 0 5
77782: PUSH
77783: LD_VAR 0 1
77787: PUSH
77788: LD_INT 4
77790: MINUS
77791: PUSH
77792: LD_VAR 0 2
77796: PUSH
77797: LD_INT 1
77799: PUSH
77800: EMPTY
77801: LIST
77802: LIST
77803: LIST
77804: PUSH
77805: LD_VAR 0 1
77809: PUSH
77810: LD_VAR 0 2
77814: PUSH
77815: LD_INT 4
77817: MINUS
77818: PUSH
77819: LD_INT 3
77821: PUSH
77822: EMPTY
77823: LIST
77824: LIST
77825: LIST
77826: PUSH
77827: LD_VAR 0 1
77831: PUSH
77832: LD_INT 4
77834: PLUS
77835: PUSH
77836: LD_VAR 0 2
77840: PUSH
77841: LD_INT 4
77843: PLUS
77844: PUSH
77845: LD_INT 5
77847: PUSH
77848: EMPTY
77849: LIST
77850: LIST
77851: LIST
77852: PUSH
77853: LD_VAR 0 1
77857: PUSH
77858: LD_INT 3
77860: PLUS
77861: PUSH
77862: LD_VAR 0 2
77866: PUSH
77867: LD_INT 4
77869: PUSH
77870: EMPTY
77871: LIST
77872: LIST
77873: LIST
77874: PUSH
77875: LD_VAR 0 1
77879: PUSH
77880: LD_VAR 0 2
77884: PUSH
77885: LD_INT 3
77887: PLUS
77888: PUSH
77889: LD_INT 0
77891: PUSH
77892: EMPTY
77893: LIST
77894: LIST
77895: LIST
77896: PUSH
77897: EMPTY
77898: LIST
77899: LIST
77900: LIST
77901: LIST
77902: LIST
77903: ST_TO_ADDR
// end ; end ;
77904: GO 77907
77906: POP
// result := list ;
77907: LD_ADDR_VAR 0 4
77911: PUSH
77912: LD_VAR 0 5
77916: ST_TO_ADDR
// end ;
77917: LD_VAR 0 4
77921: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
77922: LD_INT 0
77924: PPUSH
77925: PPUSH
77926: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
77927: LD_VAR 0 1
77931: NOT
77932: PUSH
77933: LD_VAR 0 2
77937: PUSH
77938: LD_INT 1
77940: PUSH
77941: LD_INT 2
77943: PUSH
77944: LD_INT 3
77946: PUSH
77947: LD_INT 4
77949: PUSH
77950: EMPTY
77951: LIST
77952: LIST
77953: LIST
77954: LIST
77955: IN
77956: NOT
77957: OR
77958: IFFALSE 77962
// exit ;
77960: GO 78045
// tmp := [ ] ;
77962: LD_ADDR_VAR 0 5
77966: PUSH
77967: EMPTY
77968: ST_TO_ADDR
// for i in units do
77969: LD_ADDR_VAR 0 4
77973: PUSH
77974: LD_VAR 0 1
77978: PUSH
77979: FOR_IN
77980: IFFALSE 78014
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
77982: LD_ADDR_VAR 0 5
77986: PUSH
77987: LD_VAR 0 5
77991: PPUSH
77992: LD_VAR 0 4
77996: PPUSH
77997: LD_VAR 0 2
78001: PPUSH
78002: CALL_OW 259
78006: PPUSH
78007: CALL 79418 0 2
78011: ST_TO_ADDR
78012: GO 77979
78014: POP
78015: POP
// if not tmp then
78016: LD_VAR 0 5
78020: NOT
78021: IFFALSE 78025
// exit ;
78023: GO 78045
// result := SortListByListDesc ( units , tmp ) ;
78025: LD_ADDR_VAR 0 3
78029: PUSH
78030: LD_VAR 0 1
78034: PPUSH
78035: LD_VAR 0 5
78039: PPUSH
78040: CALL_OW 77
78044: ST_TO_ADDR
// end ;
78045: LD_VAR 0 3
78049: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
78050: LD_INT 0
78052: PPUSH
78053: PPUSH
78054: PPUSH
// result := false ;
78055: LD_ADDR_VAR 0 3
78059: PUSH
78060: LD_INT 0
78062: ST_TO_ADDR
// if not building then
78063: LD_VAR 0 2
78067: NOT
78068: IFFALSE 78072
// exit ;
78070: GO 78210
// x := GetX ( building ) ;
78072: LD_ADDR_VAR 0 4
78076: PUSH
78077: LD_VAR 0 2
78081: PPUSH
78082: CALL_OW 250
78086: ST_TO_ADDR
// y := GetY ( building ) ;
78087: LD_ADDR_VAR 0 5
78091: PUSH
78092: LD_VAR 0 2
78096: PPUSH
78097: CALL_OW 251
78101: ST_TO_ADDR
// if not x or not y then
78102: LD_VAR 0 4
78106: NOT
78107: PUSH
78108: LD_VAR 0 5
78112: NOT
78113: OR
78114: IFFALSE 78118
// exit ;
78116: GO 78210
// if GetTaskList ( unit ) then
78118: LD_VAR 0 1
78122: PPUSH
78123: CALL_OW 437
78127: IFFALSE 78210
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78129: LD_STRING e
78131: PUSH
78132: LD_VAR 0 1
78136: PPUSH
78137: CALL_OW 437
78141: PUSH
78142: LD_INT 1
78144: ARRAY
78145: PUSH
78146: LD_INT 1
78148: ARRAY
78149: EQUAL
78150: PUSH
78151: LD_VAR 0 4
78155: PUSH
78156: LD_VAR 0 1
78160: PPUSH
78161: CALL_OW 437
78165: PUSH
78166: LD_INT 1
78168: ARRAY
78169: PUSH
78170: LD_INT 2
78172: ARRAY
78173: EQUAL
78174: AND
78175: PUSH
78176: LD_VAR 0 5
78180: PUSH
78181: LD_VAR 0 1
78185: PPUSH
78186: CALL_OW 437
78190: PUSH
78191: LD_INT 1
78193: ARRAY
78194: PUSH
78195: LD_INT 3
78197: ARRAY
78198: EQUAL
78199: AND
78200: IFFALSE 78210
// result := true end ;
78202: LD_ADDR_VAR 0 3
78206: PUSH
78207: LD_INT 1
78209: ST_TO_ADDR
// end ;
78210: LD_VAR 0 3
78214: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
78215: LD_INT 0
78217: PPUSH
// result := false ;
78218: LD_ADDR_VAR 0 4
78222: PUSH
78223: LD_INT 0
78225: ST_TO_ADDR
// if GetTaskList ( unit ) then
78226: LD_VAR 0 1
78230: PPUSH
78231: CALL_OW 437
78235: IFFALSE 78318
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78237: LD_STRING M
78239: PUSH
78240: LD_VAR 0 1
78244: PPUSH
78245: CALL_OW 437
78249: PUSH
78250: LD_INT 1
78252: ARRAY
78253: PUSH
78254: LD_INT 1
78256: ARRAY
78257: EQUAL
78258: PUSH
78259: LD_VAR 0 2
78263: PUSH
78264: LD_VAR 0 1
78268: PPUSH
78269: CALL_OW 437
78273: PUSH
78274: LD_INT 1
78276: ARRAY
78277: PUSH
78278: LD_INT 2
78280: ARRAY
78281: EQUAL
78282: AND
78283: PUSH
78284: LD_VAR 0 3
78288: PUSH
78289: LD_VAR 0 1
78293: PPUSH
78294: CALL_OW 437
78298: PUSH
78299: LD_INT 1
78301: ARRAY
78302: PUSH
78303: LD_INT 3
78305: ARRAY
78306: EQUAL
78307: AND
78308: IFFALSE 78318
// result := true ;
78310: LD_ADDR_VAR 0 4
78314: PUSH
78315: LD_INT 1
78317: ST_TO_ADDR
// end ; end ;
78318: LD_VAR 0 4
78322: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
78323: LD_INT 0
78325: PPUSH
78326: PPUSH
78327: PPUSH
78328: PPUSH
// if not unit or not area then
78329: LD_VAR 0 1
78333: NOT
78334: PUSH
78335: LD_VAR 0 2
78339: NOT
78340: OR
78341: IFFALSE 78345
// exit ;
78343: GO 78521
// tmp := AreaToList ( area , i ) ;
78345: LD_ADDR_VAR 0 6
78349: PUSH
78350: LD_VAR 0 2
78354: PPUSH
78355: LD_VAR 0 5
78359: PPUSH
78360: CALL_OW 517
78364: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
78365: LD_ADDR_VAR 0 5
78369: PUSH
78370: DOUBLE
78371: LD_INT 1
78373: DEC
78374: ST_TO_ADDR
78375: LD_VAR 0 6
78379: PUSH
78380: LD_INT 1
78382: ARRAY
78383: PUSH
78384: FOR_TO
78385: IFFALSE 78519
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
78387: LD_ADDR_VAR 0 7
78391: PUSH
78392: LD_VAR 0 6
78396: PUSH
78397: LD_INT 1
78399: ARRAY
78400: PUSH
78401: LD_VAR 0 5
78405: ARRAY
78406: PUSH
78407: LD_VAR 0 6
78411: PUSH
78412: LD_INT 2
78414: ARRAY
78415: PUSH
78416: LD_VAR 0 5
78420: ARRAY
78421: PUSH
78422: EMPTY
78423: LIST
78424: LIST
78425: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
78426: LD_INT 92
78428: PUSH
78429: LD_VAR 0 7
78433: PUSH
78434: LD_INT 1
78436: ARRAY
78437: PUSH
78438: LD_VAR 0 7
78442: PUSH
78443: LD_INT 2
78445: ARRAY
78446: PUSH
78447: LD_INT 2
78449: PUSH
78450: EMPTY
78451: LIST
78452: LIST
78453: LIST
78454: LIST
78455: PPUSH
78456: CALL_OW 69
78460: PUSH
78461: LD_INT 0
78463: EQUAL
78464: IFFALSE 78517
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
78466: LD_VAR 0 1
78470: PPUSH
78471: LD_VAR 0 7
78475: PUSH
78476: LD_INT 1
78478: ARRAY
78479: PPUSH
78480: LD_VAR 0 7
78484: PUSH
78485: LD_INT 2
78487: ARRAY
78488: PPUSH
78489: LD_VAR 0 3
78493: PPUSH
78494: CALL_OW 48
// result := IsPlaced ( unit ) ;
78498: LD_ADDR_VAR 0 4
78502: PUSH
78503: LD_VAR 0 1
78507: PPUSH
78508: CALL_OW 305
78512: ST_TO_ADDR
// exit ;
78513: POP
78514: POP
78515: GO 78521
// end ; end ;
78517: GO 78384
78519: POP
78520: POP
// end ;
78521: LD_VAR 0 4
78525: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
78526: LD_INT 0
78528: PPUSH
78529: PPUSH
78530: PPUSH
// if not side or side > 8 then
78531: LD_VAR 0 1
78535: NOT
78536: PUSH
78537: LD_VAR 0 1
78541: PUSH
78542: LD_INT 8
78544: GREATER
78545: OR
78546: IFFALSE 78550
// exit ;
78548: GO 78737
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
78550: LD_ADDR_VAR 0 4
78554: PUSH
78555: LD_INT 22
78557: PUSH
78558: LD_VAR 0 1
78562: PUSH
78563: EMPTY
78564: LIST
78565: LIST
78566: PUSH
78567: LD_INT 21
78569: PUSH
78570: LD_INT 3
78572: PUSH
78573: EMPTY
78574: LIST
78575: LIST
78576: PUSH
78577: EMPTY
78578: LIST
78579: LIST
78580: PPUSH
78581: CALL_OW 69
78585: ST_TO_ADDR
// if not tmp then
78586: LD_VAR 0 4
78590: NOT
78591: IFFALSE 78595
// exit ;
78593: GO 78737
// enable_addtolog := true ;
78595: LD_ADDR_OWVAR 81
78599: PUSH
78600: LD_INT 1
78602: ST_TO_ADDR
// AddToLog ( [ ) ;
78603: LD_STRING [
78605: PPUSH
78606: CALL_OW 561
// for i in tmp do
78610: LD_ADDR_VAR 0 3
78614: PUSH
78615: LD_VAR 0 4
78619: PUSH
78620: FOR_IN
78621: IFFALSE 78728
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
78623: LD_STRING [
78625: PUSH
78626: LD_VAR 0 3
78630: PPUSH
78631: CALL_OW 266
78635: STR
78636: PUSH
78637: LD_STRING , 
78639: STR
78640: PUSH
78641: LD_VAR 0 3
78645: PPUSH
78646: CALL_OW 250
78650: STR
78651: PUSH
78652: LD_STRING , 
78654: STR
78655: PUSH
78656: LD_VAR 0 3
78660: PPUSH
78661: CALL_OW 251
78665: STR
78666: PUSH
78667: LD_STRING , 
78669: STR
78670: PUSH
78671: LD_VAR 0 3
78675: PPUSH
78676: CALL_OW 254
78680: STR
78681: PUSH
78682: LD_STRING , 
78684: STR
78685: PUSH
78686: LD_VAR 0 3
78690: PPUSH
78691: LD_INT 1
78693: PPUSH
78694: CALL_OW 268
78698: STR
78699: PUSH
78700: LD_STRING , 
78702: STR
78703: PUSH
78704: LD_VAR 0 3
78708: PPUSH
78709: LD_INT 2
78711: PPUSH
78712: CALL_OW 268
78716: STR
78717: PUSH
78718: LD_STRING ],
78720: STR
78721: PPUSH
78722: CALL_OW 561
// end ;
78726: GO 78620
78728: POP
78729: POP
// AddToLog ( ]; ) ;
78730: LD_STRING ];
78732: PPUSH
78733: CALL_OW 561
// end ;
78737: LD_VAR 0 2
78741: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
78742: LD_INT 0
78744: PPUSH
78745: PPUSH
78746: PPUSH
78747: PPUSH
78748: PPUSH
// if not area or not rate or not max then
78749: LD_VAR 0 1
78753: NOT
78754: PUSH
78755: LD_VAR 0 2
78759: NOT
78760: OR
78761: PUSH
78762: LD_VAR 0 4
78766: NOT
78767: OR
78768: IFFALSE 78772
// exit ;
78770: GO 78961
// while 1 do
78772: LD_INT 1
78774: IFFALSE 78961
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
78776: LD_ADDR_VAR 0 9
78780: PUSH
78781: LD_VAR 0 1
78785: PPUSH
78786: LD_INT 1
78788: PPUSH
78789: CALL_OW 287
78793: PUSH
78794: LD_INT 10
78796: MUL
78797: ST_TO_ADDR
// r := rate / 10 ;
78798: LD_ADDR_VAR 0 7
78802: PUSH
78803: LD_VAR 0 2
78807: PUSH
78808: LD_INT 10
78810: DIVREAL
78811: ST_TO_ADDR
// time := 1 1$00 ;
78812: LD_ADDR_VAR 0 8
78816: PUSH
78817: LD_INT 2100
78819: ST_TO_ADDR
// if amount < min then
78820: LD_VAR 0 9
78824: PUSH
78825: LD_VAR 0 3
78829: LESS
78830: IFFALSE 78848
// r := r * 2 else
78832: LD_ADDR_VAR 0 7
78836: PUSH
78837: LD_VAR 0 7
78841: PUSH
78842: LD_INT 2
78844: MUL
78845: ST_TO_ADDR
78846: GO 78874
// if amount > max then
78848: LD_VAR 0 9
78852: PUSH
78853: LD_VAR 0 4
78857: GREATER
78858: IFFALSE 78874
// r := r / 2 ;
78860: LD_ADDR_VAR 0 7
78864: PUSH
78865: LD_VAR 0 7
78869: PUSH
78870: LD_INT 2
78872: DIVREAL
78873: ST_TO_ADDR
// time := time / r ;
78874: LD_ADDR_VAR 0 8
78878: PUSH
78879: LD_VAR 0 8
78883: PUSH
78884: LD_VAR 0 7
78888: DIVREAL
78889: ST_TO_ADDR
// if time < 0 then
78890: LD_VAR 0 8
78894: PUSH
78895: LD_INT 0
78897: LESS
78898: IFFALSE 78915
// time := time * - 1 ;
78900: LD_ADDR_VAR 0 8
78904: PUSH
78905: LD_VAR 0 8
78909: PUSH
78910: LD_INT 1
78912: NEG
78913: MUL
78914: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
78915: LD_VAR 0 8
78919: PUSH
78920: LD_INT 35
78922: PPUSH
78923: LD_INT 875
78925: PPUSH
78926: CALL_OW 12
78930: PLUS
78931: PPUSH
78932: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
78936: LD_INT 1
78938: PPUSH
78939: LD_INT 5
78941: PPUSH
78942: CALL_OW 12
78946: PPUSH
78947: LD_VAR 0 1
78951: PPUSH
78952: LD_INT 1
78954: PPUSH
78955: CALL_OW 55
// end ;
78959: GO 78772
// end ;
78961: LD_VAR 0 5
78965: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
78966: LD_INT 0
78968: PPUSH
78969: PPUSH
78970: PPUSH
78971: PPUSH
78972: PPUSH
78973: PPUSH
78974: PPUSH
78975: PPUSH
// if not turrets or not factories then
78976: LD_VAR 0 1
78980: NOT
78981: PUSH
78982: LD_VAR 0 2
78986: NOT
78987: OR
78988: IFFALSE 78992
// exit ;
78990: GO 79299
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
78992: LD_ADDR_VAR 0 10
78996: PUSH
78997: LD_INT 5
78999: PUSH
79000: LD_INT 6
79002: PUSH
79003: EMPTY
79004: LIST
79005: LIST
79006: PUSH
79007: LD_INT 2
79009: PUSH
79010: LD_INT 4
79012: PUSH
79013: EMPTY
79014: LIST
79015: LIST
79016: PUSH
79017: LD_INT 3
79019: PUSH
79020: LD_INT 5
79022: PUSH
79023: EMPTY
79024: LIST
79025: LIST
79026: PUSH
79027: EMPTY
79028: LIST
79029: LIST
79030: LIST
79031: PUSH
79032: LD_INT 24
79034: PUSH
79035: LD_INT 25
79037: PUSH
79038: EMPTY
79039: LIST
79040: LIST
79041: PUSH
79042: LD_INT 23
79044: PUSH
79045: LD_INT 27
79047: PUSH
79048: EMPTY
79049: LIST
79050: LIST
79051: PUSH
79052: EMPTY
79053: LIST
79054: LIST
79055: PUSH
79056: LD_INT 42
79058: PUSH
79059: LD_INT 43
79061: PUSH
79062: EMPTY
79063: LIST
79064: LIST
79065: PUSH
79066: LD_INT 44
79068: PUSH
79069: LD_INT 46
79071: PUSH
79072: EMPTY
79073: LIST
79074: LIST
79075: PUSH
79076: LD_INT 45
79078: PUSH
79079: LD_INT 47
79081: PUSH
79082: EMPTY
79083: LIST
79084: LIST
79085: PUSH
79086: EMPTY
79087: LIST
79088: LIST
79089: LIST
79090: PUSH
79091: EMPTY
79092: LIST
79093: LIST
79094: LIST
79095: ST_TO_ADDR
// result := [ ] ;
79096: LD_ADDR_VAR 0 3
79100: PUSH
79101: EMPTY
79102: ST_TO_ADDR
// for i in turrets do
79103: LD_ADDR_VAR 0 4
79107: PUSH
79108: LD_VAR 0 1
79112: PUSH
79113: FOR_IN
79114: IFFALSE 79297
// begin nat := GetNation ( i ) ;
79116: LD_ADDR_VAR 0 7
79120: PUSH
79121: LD_VAR 0 4
79125: PPUSH
79126: CALL_OW 248
79130: ST_TO_ADDR
// weapon := 0 ;
79131: LD_ADDR_VAR 0 8
79135: PUSH
79136: LD_INT 0
79138: ST_TO_ADDR
// if not nat then
79139: LD_VAR 0 7
79143: NOT
79144: IFFALSE 79148
// continue ;
79146: GO 79113
// for j in list [ nat ] do
79148: LD_ADDR_VAR 0 5
79152: PUSH
79153: LD_VAR 0 10
79157: PUSH
79158: LD_VAR 0 7
79162: ARRAY
79163: PUSH
79164: FOR_IN
79165: IFFALSE 79206
// if GetBWeapon ( i ) = j [ 1 ] then
79167: LD_VAR 0 4
79171: PPUSH
79172: CALL_OW 269
79176: PUSH
79177: LD_VAR 0 5
79181: PUSH
79182: LD_INT 1
79184: ARRAY
79185: EQUAL
79186: IFFALSE 79204
// begin weapon := j [ 2 ] ;
79188: LD_ADDR_VAR 0 8
79192: PUSH
79193: LD_VAR 0 5
79197: PUSH
79198: LD_INT 2
79200: ARRAY
79201: ST_TO_ADDR
// break ;
79202: GO 79206
// end ;
79204: GO 79164
79206: POP
79207: POP
// if not weapon then
79208: LD_VAR 0 8
79212: NOT
79213: IFFALSE 79217
// continue ;
79215: GO 79113
// for k in factories do
79217: LD_ADDR_VAR 0 6
79221: PUSH
79222: LD_VAR 0 2
79226: PUSH
79227: FOR_IN
79228: IFFALSE 79293
// begin weapons := AvailableWeaponList ( k ) ;
79230: LD_ADDR_VAR 0 9
79234: PUSH
79235: LD_VAR 0 6
79239: PPUSH
79240: CALL_OW 478
79244: ST_TO_ADDR
// if not weapons then
79245: LD_VAR 0 9
79249: NOT
79250: IFFALSE 79254
// continue ;
79252: GO 79227
// if weapon in weapons then
79254: LD_VAR 0 8
79258: PUSH
79259: LD_VAR 0 9
79263: IN
79264: IFFALSE 79291
// begin result := [ i , weapon ] ;
79266: LD_ADDR_VAR 0 3
79270: PUSH
79271: LD_VAR 0 4
79275: PUSH
79276: LD_VAR 0 8
79280: PUSH
79281: EMPTY
79282: LIST
79283: LIST
79284: ST_TO_ADDR
// exit ;
79285: POP
79286: POP
79287: POP
79288: POP
79289: GO 79299
// end ; end ;
79291: GO 79227
79293: POP
79294: POP
// end ;
79295: GO 79113
79297: POP
79298: POP
// end ;
79299: LD_VAR 0 3
79303: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
79304: LD_INT 0
79306: PPUSH
// if not side or side > 8 then
79307: LD_VAR 0 3
79311: NOT
79312: PUSH
79313: LD_VAR 0 3
79317: PUSH
79318: LD_INT 8
79320: GREATER
79321: OR
79322: IFFALSE 79326
// exit ;
79324: GO 79385
// if not range then
79326: LD_VAR 0 4
79330: NOT
79331: IFFALSE 79342
// range := - 12 ;
79333: LD_ADDR_VAR 0 4
79337: PUSH
79338: LD_INT 12
79340: NEG
79341: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
79342: LD_VAR 0 1
79346: PPUSH
79347: LD_VAR 0 2
79351: PPUSH
79352: LD_VAR 0 3
79356: PPUSH
79357: LD_VAR 0 4
79361: PPUSH
79362: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
79366: LD_VAR 0 1
79370: PPUSH
79371: LD_VAR 0 2
79375: PPUSH
79376: LD_VAR 0 3
79380: PPUSH
79381: CALL_OW 331
// end ;
79385: LD_VAR 0 5
79389: RET
// export function Video ( mode ) ; begin
79390: LD_INT 0
79392: PPUSH
// ingame_video = mode ;
79393: LD_ADDR_OWVAR 52
79397: PUSH
79398: LD_VAR 0 1
79402: ST_TO_ADDR
// interface_hidden = mode ;
79403: LD_ADDR_OWVAR 54
79407: PUSH
79408: LD_VAR 0 1
79412: ST_TO_ADDR
// end ;
79413: LD_VAR 0 2
79417: RET
// export function Join ( array , element ) ; begin
79418: LD_INT 0
79420: PPUSH
// result := Replace ( array , array + 1 , element ) ;
79421: LD_ADDR_VAR 0 3
79425: PUSH
79426: LD_VAR 0 1
79430: PPUSH
79431: LD_VAR 0 1
79435: PUSH
79436: LD_INT 1
79438: PLUS
79439: PPUSH
79440: LD_VAR 0 2
79444: PPUSH
79445: CALL_OW 1
79449: ST_TO_ADDR
// end ;
79450: LD_VAR 0 3
79454: RET
// export function JoinUnion ( array , element ) ; begin
79455: LD_INT 0
79457: PPUSH
// result := array union element ;
79458: LD_ADDR_VAR 0 3
79462: PUSH
79463: LD_VAR 0 1
79467: PUSH
79468: LD_VAR 0 2
79472: UNION
79473: ST_TO_ADDR
// end ;
79474: LD_VAR 0 3
79478: RET
// export function GetBehemoths ( side ) ; begin
79479: LD_INT 0
79481: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
79482: LD_ADDR_VAR 0 2
79486: PUSH
79487: LD_INT 22
79489: PUSH
79490: LD_VAR 0 1
79494: PUSH
79495: EMPTY
79496: LIST
79497: LIST
79498: PUSH
79499: LD_INT 31
79501: PUSH
79502: LD_INT 25
79504: PUSH
79505: EMPTY
79506: LIST
79507: LIST
79508: PUSH
79509: EMPTY
79510: LIST
79511: LIST
79512: PPUSH
79513: CALL_OW 69
79517: ST_TO_ADDR
// end ;
79518: LD_VAR 0 2
79522: RET
// export function Shuffle ( array ) ; var i , index ; begin
79523: LD_INT 0
79525: PPUSH
79526: PPUSH
79527: PPUSH
// result := [ ] ;
79528: LD_ADDR_VAR 0 2
79532: PUSH
79533: EMPTY
79534: ST_TO_ADDR
// if not array then
79535: LD_VAR 0 1
79539: NOT
79540: IFFALSE 79544
// exit ;
79542: GO 79643
// Randomize ;
79544: CALL_OW 10
// for i = array downto 1 do
79548: LD_ADDR_VAR 0 3
79552: PUSH
79553: DOUBLE
79554: LD_VAR 0 1
79558: INC
79559: ST_TO_ADDR
79560: LD_INT 1
79562: PUSH
79563: FOR_DOWNTO
79564: IFFALSE 79641
// begin index := rand ( 1 , array ) ;
79566: LD_ADDR_VAR 0 4
79570: PUSH
79571: LD_INT 1
79573: PPUSH
79574: LD_VAR 0 1
79578: PPUSH
79579: CALL_OW 12
79583: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
79584: LD_ADDR_VAR 0 2
79588: PUSH
79589: LD_VAR 0 2
79593: PPUSH
79594: LD_VAR 0 2
79598: PUSH
79599: LD_INT 1
79601: PLUS
79602: PPUSH
79603: LD_VAR 0 1
79607: PUSH
79608: LD_VAR 0 4
79612: ARRAY
79613: PPUSH
79614: CALL_OW 2
79618: ST_TO_ADDR
// array := Delete ( array , index ) ;
79619: LD_ADDR_VAR 0 1
79623: PUSH
79624: LD_VAR 0 1
79628: PPUSH
79629: LD_VAR 0 4
79633: PPUSH
79634: CALL_OW 3
79638: ST_TO_ADDR
// end ;
79639: GO 79563
79641: POP
79642: POP
// end ;
79643: LD_VAR 0 2
79647: RET
// export function GetBaseMaterials ( base ) ; begin
79648: LD_INT 0
79650: PPUSH
// result := [ 0 , 0 , 0 ] ;
79651: LD_ADDR_VAR 0 2
79655: PUSH
79656: LD_INT 0
79658: PUSH
79659: LD_INT 0
79661: PUSH
79662: LD_INT 0
79664: PUSH
79665: EMPTY
79666: LIST
79667: LIST
79668: LIST
79669: ST_TO_ADDR
// if not base then
79670: LD_VAR 0 1
79674: NOT
79675: IFFALSE 79679
// exit ;
79677: GO 79728
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
79679: LD_ADDR_VAR 0 2
79683: PUSH
79684: LD_VAR 0 1
79688: PPUSH
79689: LD_INT 1
79691: PPUSH
79692: CALL_OW 275
79696: PUSH
79697: LD_VAR 0 1
79701: PPUSH
79702: LD_INT 2
79704: PPUSH
79705: CALL_OW 275
79709: PUSH
79710: LD_VAR 0 1
79714: PPUSH
79715: LD_INT 3
79717: PPUSH
79718: CALL_OW 275
79722: PUSH
79723: EMPTY
79724: LIST
79725: LIST
79726: LIST
79727: ST_TO_ADDR
// end ;
79728: LD_VAR 0 2
79732: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
79733: LD_INT 0
79735: PPUSH
79736: PPUSH
// result := array ;
79737: LD_ADDR_VAR 0 3
79741: PUSH
79742: LD_VAR 0 1
79746: ST_TO_ADDR
// if size >= result then
79747: LD_VAR 0 2
79751: PUSH
79752: LD_VAR 0 3
79756: GREATEREQUAL
79757: IFFALSE 79761
// exit ;
79759: GO 79811
// if size then
79761: LD_VAR 0 2
79765: IFFALSE 79811
// for i := array downto size do
79767: LD_ADDR_VAR 0 4
79771: PUSH
79772: DOUBLE
79773: LD_VAR 0 1
79777: INC
79778: ST_TO_ADDR
79779: LD_VAR 0 2
79783: PUSH
79784: FOR_DOWNTO
79785: IFFALSE 79809
// result := Delete ( result , result ) ;
79787: LD_ADDR_VAR 0 3
79791: PUSH
79792: LD_VAR 0 3
79796: PPUSH
79797: LD_VAR 0 3
79801: PPUSH
79802: CALL_OW 3
79806: ST_TO_ADDR
79807: GO 79784
79809: POP
79810: POP
// end ;
79811: LD_VAR 0 3
79815: RET
// export function ComExit ( unit ) ; var tmp ; begin
79816: LD_INT 0
79818: PPUSH
79819: PPUSH
// if not IsInUnit ( unit ) then
79820: LD_VAR 0 1
79824: PPUSH
79825: CALL_OW 310
79829: NOT
79830: IFFALSE 79834
// exit ;
79832: GO 79894
// tmp := IsInUnit ( unit ) ;
79834: LD_ADDR_VAR 0 3
79838: PUSH
79839: LD_VAR 0 1
79843: PPUSH
79844: CALL_OW 310
79848: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
79849: LD_VAR 0 3
79853: PPUSH
79854: CALL_OW 247
79858: PUSH
79859: LD_INT 2
79861: EQUAL
79862: IFFALSE 79875
// ComExitVehicle ( unit ) else
79864: LD_VAR 0 1
79868: PPUSH
79869: CALL_OW 121
79873: GO 79884
// ComExitBuilding ( unit ) ;
79875: LD_VAR 0 1
79879: PPUSH
79880: CALL_OW 122
// result := tmp ;
79884: LD_ADDR_VAR 0 2
79888: PUSH
79889: LD_VAR 0 3
79893: ST_TO_ADDR
// end ;
79894: LD_VAR 0 2
79898: RET
// export function ComExitAll ( units ) ; var i ; begin
79899: LD_INT 0
79901: PPUSH
79902: PPUSH
// if not units then
79903: LD_VAR 0 1
79907: NOT
79908: IFFALSE 79912
// exit ;
79910: GO 79938
// for i in units do
79912: LD_ADDR_VAR 0 3
79916: PUSH
79917: LD_VAR 0 1
79921: PUSH
79922: FOR_IN
79923: IFFALSE 79936
// ComExit ( i ) ;
79925: LD_VAR 0 3
79929: PPUSH
79930: CALL 79816 0 1
79934: GO 79922
79936: POP
79937: POP
// end ;
79938: LD_VAR 0 2
79942: RET
// export function ResetHc ; begin
79943: LD_INT 0
79945: PPUSH
// InitHc ;
79946: CALL_OW 19
// hc_importance := 0 ;
79950: LD_ADDR_OWVAR 32
79954: PUSH
79955: LD_INT 0
79957: ST_TO_ADDR
// end ;
79958: LD_VAR 0 1
79962: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
79963: LD_INT 0
79965: PPUSH
79966: PPUSH
79967: PPUSH
// _x := ( x1 + x2 ) div 2 ;
79968: LD_ADDR_VAR 0 6
79972: PUSH
79973: LD_VAR 0 1
79977: PUSH
79978: LD_VAR 0 3
79982: PLUS
79983: PUSH
79984: LD_INT 2
79986: DIV
79987: ST_TO_ADDR
// if _x < 0 then
79988: LD_VAR 0 6
79992: PUSH
79993: LD_INT 0
79995: LESS
79996: IFFALSE 80013
// _x := _x * - 1 ;
79998: LD_ADDR_VAR 0 6
80002: PUSH
80003: LD_VAR 0 6
80007: PUSH
80008: LD_INT 1
80010: NEG
80011: MUL
80012: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
80013: LD_ADDR_VAR 0 7
80017: PUSH
80018: LD_VAR 0 2
80022: PUSH
80023: LD_VAR 0 4
80027: PLUS
80028: PUSH
80029: LD_INT 2
80031: DIV
80032: ST_TO_ADDR
// if _y < 0 then
80033: LD_VAR 0 7
80037: PUSH
80038: LD_INT 0
80040: LESS
80041: IFFALSE 80058
// _y := _y * - 1 ;
80043: LD_ADDR_VAR 0 7
80047: PUSH
80048: LD_VAR 0 7
80052: PUSH
80053: LD_INT 1
80055: NEG
80056: MUL
80057: ST_TO_ADDR
// result := [ _x , _y ] ;
80058: LD_ADDR_VAR 0 5
80062: PUSH
80063: LD_VAR 0 6
80067: PUSH
80068: LD_VAR 0 7
80072: PUSH
80073: EMPTY
80074: LIST
80075: LIST
80076: ST_TO_ADDR
// end ;
80077: LD_VAR 0 5
80081: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
80082: LD_INT 0
80084: PPUSH
80085: PPUSH
80086: PPUSH
80087: PPUSH
// task := GetTaskList ( unit ) ;
80088: LD_ADDR_VAR 0 7
80092: PUSH
80093: LD_VAR 0 1
80097: PPUSH
80098: CALL_OW 437
80102: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
80103: LD_VAR 0 7
80107: NOT
80108: PUSH
80109: LD_VAR 0 1
80113: PPUSH
80114: LD_VAR 0 2
80118: PPUSH
80119: CALL_OW 308
80123: NOT
80124: AND
80125: IFFALSE 80129
// exit ;
80127: GO 80247
// if IsInArea ( unit , area ) then
80129: LD_VAR 0 1
80133: PPUSH
80134: LD_VAR 0 2
80138: PPUSH
80139: CALL_OW 308
80143: IFFALSE 80161
// begin ComMoveToArea ( unit , goAway ) ;
80145: LD_VAR 0 1
80149: PPUSH
80150: LD_VAR 0 3
80154: PPUSH
80155: CALL_OW 113
// exit ;
80159: GO 80247
// end ; if task [ 1 ] [ 1 ] <> M then
80161: LD_VAR 0 7
80165: PUSH
80166: LD_INT 1
80168: ARRAY
80169: PUSH
80170: LD_INT 1
80172: ARRAY
80173: PUSH
80174: LD_STRING M
80176: NONEQUAL
80177: IFFALSE 80181
// exit ;
80179: GO 80247
// x := task [ 1 ] [ 2 ] ;
80181: LD_ADDR_VAR 0 5
80185: PUSH
80186: LD_VAR 0 7
80190: PUSH
80191: LD_INT 1
80193: ARRAY
80194: PUSH
80195: LD_INT 2
80197: ARRAY
80198: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
80199: LD_ADDR_VAR 0 6
80203: PUSH
80204: LD_VAR 0 7
80208: PUSH
80209: LD_INT 1
80211: ARRAY
80212: PUSH
80213: LD_INT 3
80215: ARRAY
80216: ST_TO_ADDR
// if InArea ( x , y , area ) then
80217: LD_VAR 0 5
80221: PPUSH
80222: LD_VAR 0 6
80226: PPUSH
80227: LD_VAR 0 2
80231: PPUSH
80232: CALL_OW 309
80236: IFFALSE 80247
// ComStop ( unit ) ;
80238: LD_VAR 0 1
80242: PPUSH
80243: CALL_OW 141
// end ;
80247: LD_VAR 0 4
80251: RET
// export function Abs ( value ) ; begin
80252: LD_INT 0
80254: PPUSH
// result := value ;
80255: LD_ADDR_VAR 0 2
80259: PUSH
80260: LD_VAR 0 1
80264: ST_TO_ADDR
// if value < 0 then
80265: LD_VAR 0 1
80269: PUSH
80270: LD_INT 0
80272: LESS
80273: IFFALSE 80290
// result := value * - 1 ;
80275: LD_ADDR_VAR 0 2
80279: PUSH
80280: LD_VAR 0 1
80284: PUSH
80285: LD_INT 1
80287: NEG
80288: MUL
80289: ST_TO_ADDR
// end ;
80290: LD_VAR 0 2
80294: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
80295: LD_INT 0
80297: PPUSH
80298: PPUSH
80299: PPUSH
80300: PPUSH
80301: PPUSH
80302: PPUSH
80303: PPUSH
80304: PPUSH
// if not unit or not building then
80305: LD_VAR 0 1
80309: NOT
80310: PUSH
80311: LD_VAR 0 2
80315: NOT
80316: OR
80317: IFFALSE 80321
// exit ;
80319: GO 80547
// x := GetX ( building ) ;
80321: LD_ADDR_VAR 0 4
80325: PUSH
80326: LD_VAR 0 2
80330: PPUSH
80331: CALL_OW 250
80335: ST_TO_ADDR
// y := GetY ( building ) ;
80336: LD_ADDR_VAR 0 6
80340: PUSH
80341: LD_VAR 0 2
80345: PPUSH
80346: CALL_OW 251
80350: ST_TO_ADDR
// d := GetDir ( building ) ;
80351: LD_ADDR_VAR 0 8
80355: PUSH
80356: LD_VAR 0 2
80360: PPUSH
80361: CALL_OW 254
80365: ST_TO_ADDR
// r := 4 ;
80366: LD_ADDR_VAR 0 9
80370: PUSH
80371: LD_INT 4
80373: ST_TO_ADDR
// for i := 1 to 5 do
80374: LD_ADDR_VAR 0 10
80378: PUSH
80379: DOUBLE
80380: LD_INT 1
80382: DEC
80383: ST_TO_ADDR
80384: LD_INT 5
80386: PUSH
80387: FOR_TO
80388: IFFALSE 80545
// begin _x := ShiftX ( x , d , r + i ) ;
80390: LD_ADDR_VAR 0 5
80394: PUSH
80395: LD_VAR 0 4
80399: PPUSH
80400: LD_VAR 0 8
80404: PPUSH
80405: LD_VAR 0 9
80409: PUSH
80410: LD_VAR 0 10
80414: PLUS
80415: PPUSH
80416: CALL_OW 272
80420: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
80421: LD_ADDR_VAR 0 7
80425: PUSH
80426: LD_VAR 0 6
80430: PPUSH
80431: LD_VAR 0 8
80435: PPUSH
80436: LD_VAR 0 9
80440: PUSH
80441: LD_VAR 0 10
80445: PLUS
80446: PPUSH
80447: CALL_OW 273
80451: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
80452: LD_VAR 0 5
80456: PPUSH
80457: LD_VAR 0 7
80461: PPUSH
80462: CALL_OW 488
80466: PUSH
80467: LD_VAR 0 5
80471: PPUSH
80472: LD_VAR 0 7
80476: PPUSH
80477: CALL_OW 428
80481: PPUSH
80482: CALL_OW 247
80486: PUSH
80487: LD_INT 3
80489: PUSH
80490: LD_INT 2
80492: PUSH
80493: EMPTY
80494: LIST
80495: LIST
80496: IN
80497: NOT
80498: AND
80499: IFFALSE 80543
// begin ComMoveXY ( unit , _x , _y ) ;
80501: LD_VAR 0 1
80505: PPUSH
80506: LD_VAR 0 5
80510: PPUSH
80511: LD_VAR 0 7
80515: PPUSH
80516: CALL_OW 111
// result := [ _x , _y ] ;
80520: LD_ADDR_VAR 0 3
80524: PUSH
80525: LD_VAR 0 5
80529: PUSH
80530: LD_VAR 0 7
80534: PUSH
80535: EMPTY
80536: LIST
80537: LIST
80538: ST_TO_ADDR
// exit ;
80539: POP
80540: POP
80541: GO 80547
// end ; end ;
80543: GO 80387
80545: POP
80546: POP
// end ;
80547: LD_VAR 0 3
80551: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
80552: LD_INT 0
80554: PPUSH
80555: PPUSH
80556: PPUSH
// result := 0 ;
80557: LD_ADDR_VAR 0 3
80561: PUSH
80562: LD_INT 0
80564: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
80565: LD_VAR 0 1
80569: PUSH
80570: LD_INT 0
80572: LESS
80573: PUSH
80574: LD_VAR 0 1
80578: PUSH
80579: LD_INT 8
80581: GREATER
80582: OR
80583: PUSH
80584: LD_VAR 0 2
80588: PUSH
80589: LD_INT 0
80591: LESS
80592: OR
80593: PUSH
80594: LD_VAR 0 2
80598: PUSH
80599: LD_INT 8
80601: GREATER
80602: OR
80603: IFFALSE 80607
// exit ;
80605: GO 80682
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
80607: LD_ADDR_VAR 0 4
80611: PUSH
80612: LD_INT 22
80614: PUSH
80615: LD_VAR 0 2
80619: PUSH
80620: EMPTY
80621: LIST
80622: LIST
80623: PPUSH
80624: CALL_OW 69
80628: PUSH
80629: FOR_IN
80630: IFFALSE 80680
// begin un := UnitShoot ( i ) ;
80632: LD_ADDR_VAR 0 5
80636: PUSH
80637: LD_VAR 0 4
80641: PPUSH
80642: CALL_OW 504
80646: ST_TO_ADDR
// if GetSide ( un ) = side1 then
80647: LD_VAR 0 5
80651: PPUSH
80652: CALL_OW 255
80656: PUSH
80657: LD_VAR 0 1
80661: EQUAL
80662: IFFALSE 80678
// begin result := un ;
80664: LD_ADDR_VAR 0 3
80668: PUSH
80669: LD_VAR 0 5
80673: ST_TO_ADDR
// exit ;
80674: POP
80675: POP
80676: GO 80682
// end ; end ;
80678: GO 80629
80680: POP
80681: POP
// end ;
80682: LD_VAR 0 3
80686: RET
// export function GetCargoBay ( units ) ; begin
80687: LD_INT 0
80689: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
80690: LD_ADDR_VAR 0 2
80694: PUSH
80695: LD_VAR 0 1
80699: PPUSH
80700: LD_INT 2
80702: PUSH
80703: LD_INT 34
80705: PUSH
80706: LD_INT 12
80708: PUSH
80709: EMPTY
80710: LIST
80711: LIST
80712: PUSH
80713: LD_INT 34
80715: PUSH
80716: LD_INT 51
80718: PUSH
80719: EMPTY
80720: LIST
80721: LIST
80722: PUSH
80723: LD_INT 34
80725: PUSH
80726: LD_INT 32
80728: PUSH
80729: EMPTY
80730: LIST
80731: LIST
80732: PUSH
80733: LD_INT 34
80735: PUSH
80736: LD_INT 89
80738: PUSH
80739: EMPTY
80740: LIST
80741: LIST
80742: PUSH
80743: EMPTY
80744: LIST
80745: LIST
80746: LIST
80747: LIST
80748: LIST
80749: PPUSH
80750: CALL_OW 72
80754: ST_TO_ADDR
// end ;
80755: LD_VAR 0 2
80759: RET
// export function Negate ( value ) ; begin
80760: LD_INT 0
80762: PPUSH
// result := not value ;
80763: LD_ADDR_VAR 0 2
80767: PUSH
80768: LD_VAR 0 1
80772: NOT
80773: ST_TO_ADDR
// end ;
80774: LD_VAR 0 2
80778: RET
// export function Inc ( value ) ; begin
80779: LD_INT 0
80781: PPUSH
// result := value + 1 ;
80782: LD_ADDR_VAR 0 2
80786: PUSH
80787: LD_VAR 0 1
80791: PUSH
80792: LD_INT 1
80794: PLUS
80795: ST_TO_ADDR
// end ;
80796: LD_VAR 0 2
80800: RET
// export function Dec ( value ) ; begin
80801: LD_INT 0
80803: PPUSH
// result := value - 1 ;
80804: LD_ADDR_VAR 0 2
80808: PUSH
80809: LD_VAR 0 1
80813: PUSH
80814: LD_INT 1
80816: MINUS
80817: ST_TO_ADDR
// end ;
80818: LD_VAR 0 2
80822: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
80823: LD_INT 0
80825: PPUSH
80826: PPUSH
80827: PPUSH
80828: PPUSH
80829: PPUSH
80830: PPUSH
80831: PPUSH
80832: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
80833: LD_VAR 0 1
80837: PPUSH
80838: LD_VAR 0 2
80842: PPUSH
80843: CALL_OW 488
80847: NOT
80848: PUSH
80849: LD_VAR 0 3
80853: PPUSH
80854: LD_VAR 0 4
80858: PPUSH
80859: CALL_OW 488
80863: NOT
80864: OR
80865: IFFALSE 80878
// begin result := - 1 ;
80867: LD_ADDR_VAR 0 5
80871: PUSH
80872: LD_INT 1
80874: NEG
80875: ST_TO_ADDR
// exit ;
80876: GO 81113
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
80878: LD_ADDR_VAR 0 12
80882: PUSH
80883: LD_VAR 0 1
80887: PPUSH
80888: LD_VAR 0 2
80892: PPUSH
80893: LD_VAR 0 3
80897: PPUSH
80898: LD_VAR 0 4
80902: PPUSH
80903: CALL 79963 0 4
80907: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
80908: LD_ADDR_VAR 0 11
80912: PUSH
80913: LD_VAR 0 1
80917: PPUSH
80918: LD_VAR 0 2
80922: PPUSH
80923: LD_VAR 0 12
80927: PUSH
80928: LD_INT 1
80930: ARRAY
80931: PPUSH
80932: LD_VAR 0 12
80936: PUSH
80937: LD_INT 2
80939: ARRAY
80940: PPUSH
80941: CALL_OW 298
80945: ST_TO_ADDR
// distance := 9999 ;
80946: LD_ADDR_VAR 0 10
80950: PUSH
80951: LD_INT 9999
80953: ST_TO_ADDR
// for i := 0 to 5 do
80954: LD_ADDR_VAR 0 6
80958: PUSH
80959: DOUBLE
80960: LD_INT 0
80962: DEC
80963: ST_TO_ADDR
80964: LD_INT 5
80966: PUSH
80967: FOR_TO
80968: IFFALSE 81111
// begin _x := ShiftX ( x1 , i , centerDist ) ;
80970: LD_ADDR_VAR 0 7
80974: PUSH
80975: LD_VAR 0 1
80979: PPUSH
80980: LD_VAR 0 6
80984: PPUSH
80985: LD_VAR 0 11
80989: PPUSH
80990: CALL_OW 272
80994: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
80995: LD_ADDR_VAR 0 8
80999: PUSH
81000: LD_VAR 0 2
81004: PPUSH
81005: LD_VAR 0 6
81009: PPUSH
81010: LD_VAR 0 11
81014: PPUSH
81015: CALL_OW 273
81019: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
81020: LD_VAR 0 7
81024: PPUSH
81025: LD_VAR 0 8
81029: PPUSH
81030: CALL_OW 488
81034: NOT
81035: IFFALSE 81039
// continue ;
81037: GO 80967
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
81039: LD_ADDR_VAR 0 9
81043: PUSH
81044: LD_VAR 0 12
81048: PUSH
81049: LD_INT 1
81051: ARRAY
81052: PPUSH
81053: LD_VAR 0 12
81057: PUSH
81058: LD_INT 2
81060: ARRAY
81061: PPUSH
81062: LD_VAR 0 7
81066: PPUSH
81067: LD_VAR 0 8
81071: PPUSH
81072: CALL_OW 298
81076: ST_TO_ADDR
// if tmp < distance then
81077: LD_VAR 0 9
81081: PUSH
81082: LD_VAR 0 10
81086: LESS
81087: IFFALSE 81109
// begin result := i ;
81089: LD_ADDR_VAR 0 5
81093: PUSH
81094: LD_VAR 0 6
81098: ST_TO_ADDR
// distance := tmp ;
81099: LD_ADDR_VAR 0 10
81103: PUSH
81104: LD_VAR 0 9
81108: ST_TO_ADDR
// end ; end ;
81109: GO 80967
81111: POP
81112: POP
// end ;
81113: LD_VAR 0 5
81117: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
81118: LD_INT 0
81120: PPUSH
81121: PPUSH
// if not driver or not IsInUnit ( driver ) then
81122: LD_VAR 0 1
81126: NOT
81127: PUSH
81128: LD_VAR 0 1
81132: PPUSH
81133: CALL_OW 310
81137: NOT
81138: OR
81139: IFFALSE 81143
// exit ;
81141: GO 81233
// vehicle := IsInUnit ( driver ) ;
81143: LD_ADDR_VAR 0 3
81147: PUSH
81148: LD_VAR 0 1
81152: PPUSH
81153: CALL_OW 310
81157: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
81158: LD_VAR 0 1
81162: PPUSH
81163: LD_STRING \
81165: PUSH
81166: LD_INT 0
81168: PUSH
81169: LD_INT 0
81171: PUSH
81172: LD_INT 0
81174: PUSH
81175: LD_INT 0
81177: PUSH
81178: LD_INT 0
81180: PUSH
81181: LD_INT 0
81183: PUSH
81184: EMPTY
81185: LIST
81186: LIST
81187: LIST
81188: LIST
81189: LIST
81190: LIST
81191: LIST
81192: PUSH
81193: LD_STRING E
81195: PUSH
81196: LD_INT 0
81198: PUSH
81199: LD_INT 0
81201: PUSH
81202: LD_VAR 0 3
81206: PUSH
81207: LD_INT 0
81209: PUSH
81210: LD_INT 0
81212: PUSH
81213: LD_INT 0
81215: PUSH
81216: EMPTY
81217: LIST
81218: LIST
81219: LIST
81220: LIST
81221: LIST
81222: LIST
81223: LIST
81224: PUSH
81225: EMPTY
81226: LIST
81227: LIST
81228: PPUSH
81229: CALL_OW 446
// end ;
81233: LD_VAR 0 2
81237: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
81238: LD_INT 0
81240: PPUSH
81241: PPUSH
// if not driver or not IsInUnit ( driver ) then
81242: LD_VAR 0 1
81246: NOT
81247: PUSH
81248: LD_VAR 0 1
81252: PPUSH
81253: CALL_OW 310
81257: NOT
81258: OR
81259: IFFALSE 81263
// exit ;
81261: GO 81353
// vehicle := IsInUnit ( driver ) ;
81263: LD_ADDR_VAR 0 3
81267: PUSH
81268: LD_VAR 0 1
81272: PPUSH
81273: CALL_OW 310
81277: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
81278: LD_VAR 0 1
81282: PPUSH
81283: LD_STRING \
81285: PUSH
81286: LD_INT 0
81288: PUSH
81289: LD_INT 0
81291: PUSH
81292: LD_INT 0
81294: PUSH
81295: LD_INT 0
81297: PUSH
81298: LD_INT 0
81300: PUSH
81301: LD_INT 0
81303: PUSH
81304: EMPTY
81305: LIST
81306: LIST
81307: LIST
81308: LIST
81309: LIST
81310: LIST
81311: LIST
81312: PUSH
81313: LD_STRING E
81315: PUSH
81316: LD_INT 0
81318: PUSH
81319: LD_INT 0
81321: PUSH
81322: LD_VAR 0 3
81326: PUSH
81327: LD_INT 0
81329: PUSH
81330: LD_INT 0
81332: PUSH
81333: LD_INT 0
81335: PUSH
81336: EMPTY
81337: LIST
81338: LIST
81339: LIST
81340: LIST
81341: LIST
81342: LIST
81343: LIST
81344: PUSH
81345: EMPTY
81346: LIST
81347: LIST
81348: PPUSH
81349: CALL_OW 447
// end ;
81353: LD_VAR 0 2
81357: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
81358: LD_INT 0
81360: PPUSH
81361: PPUSH
81362: PPUSH
// tmp := [ ] ;
81363: LD_ADDR_VAR 0 5
81367: PUSH
81368: EMPTY
81369: ST_TO_ADDR
// for i in units do
81370: LD_ADDR_VAR 0 4
81374: PUSH
81375: LD_VAR 0 1
81379: PUSH
81380: FOR_IN
81381: IFFALSE 81419
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
81383: LD_ADDR_VAR 0 5
81387: PUSH
81388: LD_VAR 0 5
81392: PPUSH
81393: LD_VAR 0 5
81397: PUSH
81398: LD_INT 1
81400: PLUS
81401: PPUSH
81402: LD_VAR 0 4
81406: PPUSH
81407: CALL_OW 256
81411: PPUSH
81412: CALL_OW 2
81416: ST_TO_ADDR
81417: GO 81380
81419: POP
81420: POP
// if not tmp then
81421: LD_VAR 0 5
81425: NOT
81426: IFFALSE 81430
// exit ;
81428: GO 81478
// if asc then
81430: LD_VAR 0 2
81434: IFFALSE 81458
// result := SortListByListAsc ( units , tmp ) else
81436: LD_ADDR_VAR 0 3
81440: PUSH
81441: LD_VAR 0 1
81445: PPUSH
81446: LD_VAR 0 5
81450: PPUSH
81451: CALL_OW 76
81455: ST_TO_ADDR
81456: GO 81478
// result := SortListByListDesc ( units , tmp ) ;
81458: LD_ADDR_VAR 0 3
81462: PUSH
81463: LD_VAR 0 1
81467: PPUSH
81468: LD_VAR 0 5
81472: PPUSH
81473: CALL_OW 77
81477: ST_TO_ADDR
// end ;
81478: LD_VAR 0 3
81482: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
81483: LD_INT 0
81485: PPUSH
81486: PPUSH
// task := GetTaskList ( mech ) ;
81487: LD_ADDR_VAR 0 4
81491: PUSH
81492: LD_VAR 0 1
81496: PPUSH
81497: CALL_OW 437
81501: ST_TO_ADDR
// if not task then
81502: LD_VAR 0 4
81506: NOT
81507: IFFALSE 81511
// exit ;
81509: GO 81553
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
81511: LD_ADDR_VAR 0 3
81515: PUSH
81516: LD_VAR 0 4
81520: PUSH
81521: LD_INT 1
81523: ARRAY
81524: PUSH
81525: LD_INT 1
81527: ARRAY
81528: PUSH
81529: LD_STRING r
81531: EQUAL
81532: PUSH
81533: LD_VAR 0 4
81537: PUSH
81538: LD_INT 1
81540: ARRAY
81541: PUSH
81542: LD_INT 4
81544: ARRAY
81545: PUSH
81546: LD_VAR 0 2
81550: EQUAL
81551: AND
81552: ST_TO_ADDR
// end ;
81553: LD_VAR 0 3
81557: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
81558: LD_INT 0
81560: PPUSH
// SetDir ( unit , d ) ;
81561: LD_VAR 0 1
81565: PPUSH
81566: LD_VAR 0 4
81570: PPUSH
81571: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
81575: LD_VAR 0 1
81579: PPUSH
81580: LD_VAR 0 2
81584: PPUSH
81585: LD_VAR 0 3
81589: PPUSH
81590: LD_VAR 0 5
81594: PPUSH
81595: CALL_OW 48
// end ;
81599: LD_VAR 0 6
81603: RET
// export function ToNaturalNumber ( number ) ; begin
81604: LD_INT 0
81606: PPUSH
// result := number div 1 ;
81607: LD_ADDR_VAR 0 2
81611: PUSH
81612: LD_VAR 0 1
81616: PUSH
81617: LD_INT 1
81619: DIV
81620: ST_TO_ADDR
// if number < 0 then
81621: LD_VAR 0 1
81625: PUSH
81626: LD_INT 0
81628: LESS
81629: IFFALSE 81639
// result := 0 ;
81631: LD_ADDR_VAR 0 2
81635: PUSH
81636: LD_INT 0
81638: ST_TO_ADDR
// end ;
81639: LD_VAR 0 2
81643: RET
// export function SortByClass ( units , class ) ; var un ; begin
81644: LD_INT 0
81646: PPUSH
81647: PPUSH
// if not units or not class then
81648: LD_VAR 0 1
81652: NOT
81653: PUSH
81654: LD_VAR 0 2
81658: NOT
81659: OR
81660: IFFALSE 81664
// exit ;
81662: GO 81759
// result := [ ] ;
81664: LD_ADDR_VAR 0 3
81668: PUSH
81669: EMPTY
81670: ST_TO_ADDR
// for un in units do
81671: LD_ADDR_VAR 0 4
81675: PUSH
81676: LD_VAR 0 1
81680: PUSH
81681: FOR_IN
81682: IFFALSE 81757
// if GetClass ( un ) = class then
81684: LD_VAR 0 4
81688: PPUSH
81689: CALL_OW 257
81693: PUSH
81694: LD_VAR 0 2
81698: EQUAL
81699: IFFALSE 81726
// result := Insert ( result , 1 , un ) else
81701: LD_ADDR_VAR 0 3
81705: PUSH
81706: LD_VAR 0 3
81710: PPUSH
81711: LD_INT 1
81713: PPUSH
81714: LD_VAR 0 4
81718: PPUSH
81719: CALL_OW 2
81723: ST_TO_ADDR
81724: GO 81755
// result := Replace ( result , result + 1 , un ) ;
81726: LD_ADDR_VAR 0 3
81730: PUSH
81731: LD_VAR 0 3
81735: PPUSH
81736: LD_VAR 0 3
81740: PUSH
81741: LD_INT 1
81743: PLUS
81744: PPUSH
81745: LD_VAR 0 4
81749: PPUSH
81750: CALL_OW 1
81754: ST_TO_ADDR
81755: GO 81681
81757: POP
81758: POP
// end ;
81759: LD_VAR 0 3
81763: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
81764: LD_INT 0
81766: PPUSH
81767: PPUSH
81768: PPUSH
81769: PPUSH
81770: PPUSH
81771: PPUSH
81772: PPUSH
// result := [ ] ;
81773: LD_ADDR_VAR 0 4
81777: PUSH
81778: EMPTY
81779: ST_TO_ADDR
// if x - r < 0 then
81780: LD_VAR 0 1
81784: PUSH
81785: LD_VAR 0 3
81789: MINUS
81790: PUSH
81791: LD_INT 0
81793: LESS
81794: IFFALSE 81806
// min_x := 0 else
81796: LD_ADDR_VAR 0 8
81800: PUSH
81801: LD_INT 0
81803: ST_TO_ADDR
81804: GO 81822
// min_x := x - r ;
81806: LD_ADDR_VAR 0 8
81810: PUSH
81811: LD_VAR 0 1
81815: PUSH
81816: LD_VAR 0 3
81820: MINUS
81821: ST_TO_ADDR
// if y - r < 0 then
81822: LD_VAR 0 2
81826: PUSH
81827: LD_VAR 0 3
81831: MINUS
81832: PUSH
81833: LD_INT 0
81835: LESS
81836: IFFALSE 81848
// min_y := 0 else
81838: LD_ADDR_VAR 0 7
81842: PUSH
81843: LD_INT 0
81845: ST_TO_ADDR
81846: GO 81864
// min_y := y - r ;
81848: LD_ADDR_VAR 0 7
81852: PUSH
81853: LD_VAR 0 2
81857: PUSH
81858: LD_VAR 0 3
81862: MINUS
81863: ST_TO_ADDR
// max_x := x + r ;
81864: LD_ADDR_VAR 0 9
81868: PUSH
81869: LD_VAR 0 1
81873: PUSH
81874: LD_VAR 0 3
81878: PLUS
81879: ST_TO_ADDR
// max_y := y + r ;
81880: LD_ADDR_VAR 0 10
81884: PUSH
81885: LD_VAR 0 2
81889: PUSH
81890: LD_VAR 0 3
81894: PLUS
81895: ST_TO_ADDR
// for _x = min_x to max_x do
81896: LD_ADDR_VAR 0 5
81900: PUSH
81901: DOUBLE
81902: LD_VAR 0 8
81906: DEC
81907: ST_TO_ADDR
81908: LD_VAR 0 9
81912: PUSH
81913: FOR_TO
81914: IFFALSE 82015
// for _y = min_y to max_y do
81916: LD_ADDR_VAR 0 6
81920: PUSH
81921: DOUBLE
81922: LD_VAR 0 7
81926: DEC
81927: ST_TO_ADDR
81928: LD_VAR 0 10
81932: PUSH
81933: FOR_TO
81934: IFFALSE 82011
// begin if not ValidHex ( _x , _y ) then
81936: LD_VAR 0 5
81940: PPUSH
81941: LD_VAR 0 6
81945: PPUSH
81946: CALL_OW 488
81950: NOT
81951: IFFALSE 81955
// continue ;
81953: GO 81933
// if GetResourceTypeXY ( _x , _y ) then
81955: LD_VAR 0 5
81959: PPUSH
81960: LD_VAR 0 6
81964: PPUSH
81965: CALL_OW 283
81969: IFFALSE 82009
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
81971: LD_ADDR_VAR 0 4
81975: PUSH
81976: LD_VAR 0 4
81980: PPUSH
81981: LD_VAR 0 4
81985: PUSH
81986: LD_INT 1
81988: PLUS
81989: PPUSH
81990: LD_VAR 0 5
81994: PUSH
81995: LD_VAR 0 6
81999: PUSH
82000: EMPTY
82001: LIST
82002: LIST
82003: PPUSH
82004: CALL_OW 1
82008: ST_TO_ADDR
// end ;
82009: GO 81933
82011: POP
82012: POP
82013: GO 81913
82015: POP
82016: POP
// end ;
82017: LD_VAR 0 4
82021: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
82022: LD_INT 0
82024: PPUSH
82025: PPUSH
82026: PPUSH
82027: PPUSH
82028: PPUSH
82029: PPUSH
82030: PPUSH
82031: PPUSH
// if not units then
82032: LD_VAR 0 1
82036: NOT
82037: IFFALSE 82041
// exit ;
82039: GO 82565
// result := UnitFilter ( units , [ f_ok ] ) ;
82041: LD_ADDR_VAR 0 3
82045: PUSH
82046: LD_VAR 0 1
82050: PPUSH
82051: LD_INT 50
82053: PUSH
82054: EMPTY
82055: LIST
82056: PPUSH
82057: CALL_OW 72
82061: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
82062: LD_ADDR_VAR 0 8
82066: PUSH
82067: LD_VAR 0 1
82071: PUSH
82072: LD_INT 1
82074: ARRAY
82075: PPUSH
82076: CALL_OW 255
82080: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
82081: LD_ADDR_VAR 0 10
82085: PUSH
82086: LD_INT 29
82088: PUSH
82089: LD_INT 91
82091: PUSH
82092: LD_INT 49
82094: PUSH
82095: EMPTY
82096: LIST
82097: LIST
82098: LIST
82099: ST_TO_ADDR
// if not result then
82100: LD_VAR 0 3
82104: NOT
82105: IFFALSE 82109
// exit ;
82107: GO 82565
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
82109: LD_ADDR_VAR 0 5
82113: PUSH
82114: LD_INT 81
82116: PUSH
82117: LD_VAR 0 8
82121: PUSH
82122: EMPTY
82123: LIST
82124: LIST
82125: PPUSH
82126: CALL_OW 69
82130: ST_TO_ADDR
// for i in result do
82131: LD_ADDR_VAR 0 4
82135: PUSH
82136: LD_VAR 0 3
82140: PUSH
82141: FOR_IN
82142: IFFALSE 82563
// begin tag := GetTag ( i ) + 1 ;
82144: LD_ADDR_VAR 0 9
82148: PUSH
82149: LD_VAR 0 4
82153: PPUSH
82154: CALL_OW 110
82158: PUSH
82159: LD_INT 1
82161: PLUS
82162: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
82163: LD_ADDR_VAR 0 7
82167: PUSH
82168: LD_VAR 0 4
82172: PPUSH
82173: CALL_OW 250
82177: PPUSH
82178: LD_VAR 0 4
82182: PPUSH
82183: CALL_OW 251
82187: PPUSH
82188: LD_INT 6
82190: PPUSH
82191: CALL 81764 0 3
82195: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
82196: LD_VAR 0 4
82200: PPUSH
82201: CALL_OW 247
82205: PUSH
82206: LD_INT 2
82208: EQUAL
82209: PUSH
82210: LD_VAR 0 7
82214: AND
82215: PUSH
82216: LD_VAR 0 4
82220: PPUSH
82221: CALL_OW 264
82225: PUSH
82226: LD_VAR 0 10
82230: IN
82231: NOT
82232: AND
82233: IFFALSE 82272
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
82235: LD_VAR 0 4
82239: PPUSH
82240: LD_VAR 0 7
82244: PUSH
82245: LD_INT 1
82247: ARRAY
82248: PUSH
82249: LD_INT 1
82251: ARRAY
82252: PPUSH
82253: LD_VAR 0 7
82257: PUSH
82258: LD_INT 1
82260: ARRAY
82261: PUSH
82262: LD_INT 2
82264: ARRAY
82265: PPUSH
82266: CALL_OW 116
82270: GO 82561
// if path > tag then
82272: LD_VAR 0 2
82276: PUSH
82277: LD_VAR 0 9
82281: GREATER
82282: IFFALSE 82490
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
82284: LD_ADDR_VAR 0 6
82288: PUSH
82289: LD_VAR 0 5
82293: PPUSH
82294: LD_INT 91
82296: PUSH
82297: LD_VAR 0 4
82301: PUSH
82302: LD_INT 8
82304: PUSH
82305: EMPTY
82306: LIST
82307: LIST
82308: LIST
82309: PPUSH
82310: CALL_OW 72
82314: ST_TO_ADDR
// if nearEnemy then
82315: LD_VAR 0 6
82319: IFFALSE 82388
// begin if GetWeapon ( i ) = ru_time_lapser then
82321: LD_VAR 0 4
82325: PPUSH
82326: CALL_OW 264
82330: PUSH
82331: LD_INT 49
82333: EQUAL
82334: IFFALSE 82362
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
82336: LD_VAR 0 4
82340: PPUSH
82341: LD_VAR 0 6
82345: PPUSH
82346: LD_VAR 0 4
82350: PPUSH
82351: CALL_OW 74
82355: PPUSH
82356: CALL_OW 112
82360: GO 82386
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
82362: LD_VAR 0 4
82366: PPUSH
82367: LD_VAR 0 6
82371: PPUSH
82372: LD_VAR 0 4
82376: PPUSH
82377: CALL_OW 74
82381: PPUSH
82382: CALL 83636 0 2
// end else
82386: GO 82488
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
82388: LD_VAR 0 4
82392: PPUSH
82393: LD_VAR 0 2
82397: PUSH
82398: LD_VAR 0 9
82402: ARRAY
82403: PUSH
82404: LD_INT 1
82406: ARRAY
82407: PPUSH
82408: LD_VAR 0 2
82412: PUSH
82413: LD_VAR 0 9
82417: ARRAY
82418: PUSH
82419: LD_INT 2
82421: ARRAY
82422: PPUSH
82423: CALL_OW 297
82427: PUSH
82428: LD_INT 6
82430: GREATER
82431: IFFALSE 82474
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
82433: LD_VAR 0 4
82437: PPUSH
82438: LD_VAR 0 2
82442: PUSH
82443: LD_VAR 0 9
82447: ARRAY
82448: PUSH
82449: LD_INT 1
82451: ARRAY
82452: PPUSH
82453: LD_VAR 0 2
82457: PUSH
82458: LD_VAR 0 9
82462: ARRAY
82463: PUSH
82464: LD_INT 2
82466: ARRAY
82467: PPUSH
82468: CALL_OW 114
82472: GO 82488
// SetTag ( i , tag ) ;
82474: LD_VAR 0 4
82478: PPUSH
82479: LD_VAR 0 9
82483: PPUSH
82484: CALL_OW 109
// end else
82488: GO 82561
// if enemy then
82490: LD_VAR 0 5
82494: IFFALSE 82561
// begin if GetWeapon ( i ) = ru_time_lapser then
82496: LD_VAR 0 4
82500: PPUSH
82501: CALL_OW 264
82505: PUSH
82506: LD_INT 49
82508: EQUAL
82509: IFFALSE 82537
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
82511: LD_VAR 0 4
82515: PPUSH
82516: LD_VAR 0 5
82520: PPUSH
82521: LD_VAR 0 4
82525: PPUSH
82526: CALL_OW 74
82530: PPUSH
82531: CALL_OW 112
82535: GO 82561
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
82537: LD_VAR 0 4
82541: PPUSH
82542: LD_VAR 0 5
82546: PPUSH
82547: LD_VAR 0 4
82551: PPUSH
82552: CALL_OW 74
82556: PPUSH
82557: CALL 83636 0 2
// end ; end ;
82561: GO 82141
82563: POP
82564: POP
// end ;
82565: LD_VAR 0 3
82569: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
82570: LD_INT 0
82572: PPUSH
82573: PPUSH
82574: PPUSH
// if not unit or IsInUnit ( unit ) then
82575: LD_VAR 0 1
82579: NOT
82580: PUSH
82581: LD_VAR 0 1
82585: PPUSH
82586: CALL_OW 310
82590: OR
82591: IFFALSE 82595
// exit ;
82593: GO 82686
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
82595: LD_ADDR_VAR 0 4
82599: PUSH
82600: LD_VAR 0 1
82604: PPUSH
82605: CALL_OW 250
82609: PPUSH
82610: LD_VAR 0 2
82614: PPUSH
82615: LD_INT 1
82617: PPUSH
82618: CALL_OW 272
82622: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
82623: LD_ADDR_VAR 0 5
82627: PUSH
82628: LD_VAR 0 1
82632: PPUSH
82633: CALL_OW 251
82637: PPUSH
82638: LD_VAR 0 2
82642: PPUSH
82643: LD_INT 1
82645: PPUSH
82646: CALL_OW 273
82650: ST_TO_ADDR
// if ValidHex ( x , y ) then
82651: LD_VAR 0 4
82655: PPUSH
82656: LD_VAR 0 5
82660: PPUSH
82661: CALL_OW 488
82665: IFFALSE 82686
// ComTurnXY ( unit , x , y ) ;
82667: LD_VAR 0 1
82671: PPUSH
82672: LD_VAR 0 4
82676: PPUSH
82677: LD_VAR 0 5
82681: PPUSH
82682: CALL_OW 118
// end ;
82686: LD_VAR 0 3
82690: RET
// export function SeeUnits ( side , units ) ; var i ; begin
82691: LD_INT 0
82693: PPUSH
82694: PPUSH
// result := false ;
82695: LD_ADDR_VAR 0 3
82699: PUSH
82700: LD_INT 0
82702: ST_TO_ADDR
// if not units then
82703: LD_VAR 0 2
82707: NOT
82708: IFFALSE 82712
// exit ;
82710: GO 82757
// for i in units do
82712: LD_ADDR_VAR 0 4
82716: PUSH
82717: LD_VAR 0 2
82721: PUSH
82722: FOR_IN
82723: IFFALSE 82755
// if See ( side , i ) then
82725: LD_VAR 0 1
82729: PPUSH
82730: LD_VAR 0 4
82734: PPUSH
82735: CALL_OW 292
82739: IFFALSE 82753
// begin result := true ;
82741: LD_ADDR_VAR 0 3
82745: PUSH
82746: LD_INT 1
82748: ST_TO_ADDR
// exit ;
82749: POP
82750: POP
82751: GO 82757
// end ;
82753: GO 82722
82755: POP
82756: POP
// end ;
82757: LD_VAR 0 3
82761: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
82762: LD_INT 0
82764: PPUSH
82765: PPUSH
82766: PPUSH
82767: PPUSH
// if not unit or not points then
82768: LD_VAR 0 1
82772: NOT
82773: PUSH
82774: LD_VAR 0 2
82778: NOT
82779: OR
82780: IFFALSE 82784
// exit ;
82782: GO 82874
// dist := 99999 ;
82784: LD_ADDR_VAR 0 5
82788: PUSH
82789: LD_INT 99999
82791: ST_TO_ADDR
// for i in points do
82792: LD_ADDR_VAR 0 4
82796: PUSH
82797: LD_VAR 0 2
82801: PUSH
82802: FOR_IN
82803: IFFALSE 82872
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
82805: LD_ADDR_VAR 0 6
82809: PUSH
82810: LD_VAR 0 1
82814: PPUSH
82815: LD_VAR 0 4
82819: PUSH
82820: LD_INT 1
82822: ARRAY
82823: PPUSH
82824: LD_VAR 0 4
82828: PUSH
82829: LD_INT 2
82831: ARRAY
82832: PPUSH
82833: CALL_OW 297
82837: ST_TO_ADDR
// if tmpDist < dist then
82838: LD_VAR 0 6
82842: PUSH
82843: LD_VAR 0 5
82847: LESS
82848: IFFALSE 82870
// begin result := i ;
82850: LD_ADDR_VAR 0 3
82854: PUSH
82855: LD_VAR 0 4
82859: ST_TO_ADDR
// dist := tmpDist ;
82860: LD_ADDR_VAR 0 5
82864: PUSH
82865: LD_VAR 0 6
82869: ST_TO_ADDR
// end ; end ;
82870: GO 82802
82872: POP
82873: POP
// end ;
82874: LD_VAR 0 3
82878: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
82879: LD_INT 0
82881: PPUSH
// uc_side := side ;
82882: LD_ADDR_OWVAR 20
82886: PUSH
82887: LD_VAR 0 1
82891: ST_TO_ADDR
// uc_nation := 3 ;
82892: LD_ADDR_OWVAR 21
82896: PUSH
82897: LD_INT 3
82899: ST_TO_ADDR
// vc_chassis := 25 ;
82900: LD_ADDR_OWVAR 37
82904: PUSH
82905: LD_INT 25
82907: ST_TO_ADDR
// vc_engine := engine_siberite ;
82908: LD_ADDR_OWVAR 39
82912: PUSH
82913: LD_INT 3
82915: ST_TO_ADDR
// vc_control := control_computer ;
82916: LD_ADDR_OWVAR 38
82920: PUSH
82921: LD_INT 3
82923: ST_TO_ADDR
// vc_weapon := 59 ;
82924: LD_ADDR_OWVAR 40
82928: PUSH
82929: LD_INT 59
82931: ST_TO_ADDR
// result := CreateVehicle ;
82932: LD_ADDR_VAR 0 5
82936: PUSH
82937: CALL_OW 45
82941: ST_TO_ADDR
// SetDir ( result , d ) ;
82942: LD_VAR 0 5
82946: PPUSH
82947: LD_VAR 0 4
82951: PPUSH
82952: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
82956: LD_VAR 0 5
82960: PPUSH
82961: LD_VAR 0 2
82965: PPUSH
82966: LD_VAR 0 3
82970: PPUSH
82971: LD_INT 0
82973: PPUSH
82974: CALL_OW 48
// end ;
82978: LD_VAR 0 5
82982: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
82983: LD_INT 0
82985: PPUSH
82986: PPUSH
82987: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
82988: LD_ADDR_VAR 0 2
82992: PUSH
82993: LD_INT 0
82995: PUSH
82996: LD_INT 0
82998: PUSH
82999: LD_INT 0
83001: PUSH
83002: LD_INT 0
83004: PUSH
83005: EMPTY
83006: LIST
83007: LIST
83008: LIST
83009: LIST
83010: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
83011: LD_VAR 0 1
83015: NOT
83016: PUSH
83017: LD_VAR 0 1
83021: PPUSH
83022: CALL_OW 264
83026: PUSH
83027: LD_INT 12
83029: PUSH
83030: LD_INT 51
83032: PUSH
83033: LD_INT 32
83035: PUSH
83036: LD_INT 89
83038: PUSH
83039: EMPTY
83040: LIST
83041: LIST
83042: LIST
83043: LIST
83044: IN
83045: NOT
83046: OR
83047: IFFALSE 83051
// exit ;
83049: GO 83149
// for i := 1 to 3 do
83051: LD_ADDR_VAR 0 3
83055: PUSH
83056: DOUBLE
83057: LD_INT 1
83059: DEC
83060: ST_TO_ADDR
83061: LD_INT 3
83063: PUSH
83064: FOR_TO
83065: IFFALSE 83147
// begin tmp := GetCargo ( cargo , i ) ;
83067: LD_ADDR_VAR 0 4
83071: PUSH
83072: LD_VAR 0 1
83076: PPUSH
83077: LD_VAR 0 3
83081: PPUSH
83082: CALL_OW 289
83086: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
83087: LD_ADDR_VAR 0 2
83091: PUSH
83092: LD_VAR 0 2
83096: PPUSH
83097: LD_VAR 0 3
83101: PPUSH
83102: LD_VAR 0 4
83106: PPUSH
83107: CALL_OW 1
83111: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
83112: LD_ADDR_VAR 0 2
83116: PUSH
83117: LD_VAR 0 2
83121: PPUSH
83122: LD_INT 4
83124: PPUSH
83125: LD_VAR 0 2
83129: PUSH
83130: LD_INT 4
83132: ARRAY
83133: PUSH
83134: LD_VAR 0 4
83138: PLUS
83139: PPUSH
83140: CALL_OW 1
83144: ST_TO_ADDR
// end ;
83145: GO 83064
83147: POP
83148: POP
// end ;
83149: LD_VAR 0 2
83153: RET
// export function Length ( array ) ; begin
83154: LD_INT 0
83156: PPUSH
// result := array + 0 ;
83157: LD_ADDR_VAR 0 2
83161: PUSH
83162: LD_VAR 0 1
83166: PUSH
83167: LD_INT 0
83169: PLUS
83170: ST_TO_ADDR
// end ;
83171: LD_VAR 0 2
83175: RET
// export function PrepareArray ( array ) ; begin
83176: LD_INT 0
83178: PPUSH
// result := array diff 0 ;
83179: LD_ADDR_VAR 0 2
83183: PUSH
83184: LD_VAR 0 1
83188: PUSH
83189: LD_INT 0
83191: DIFF
83192: ST_TO_ADDR
// if not result [ 1 ] then
83193: LD_VAR 0 2
83197: PUSH
83198: LD_INT 1
83200: ARRAY
83201: NOT
83202: IFFALSE 83222
// result := Delete ( result , 1 ) ;
83204: LD_ADDR_VAR 0 2
83208: PUSH
83209: LD_VAR 0 2
83213: PPUSH
83214: LD_INT 1
83216: PPUSH
83217: CALL_OW 3
83221: ST_TO_ADDR
// end ;
83222: LD_VAR 0 2
83226: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
83227: LD_INT 0
83229: PPUSH
83230: PPUSH
83231: PPUSH
83232: PPUSH
// sibRocketRange := 25 ;
83233: LD_ADDR_VAR 0 6
83237: PUSH
83238: LD_INT 25
83240: ST_TO_ADDR
// result := false ;
83241: LD_ADDR_VAR 0 4
83245: PUSH
83246: LD_INT 0
83248: ST_TO_ADDR
// for i := 0 to 5 do
83249: LD_ADDR_VAR 0 5
83253: PUSH
83254: DOUBLE
83255: LD_INT 0
83257: DEC
83258: ST_TO_ADDR
83259: LD_INT 5
83261: PUSH
83262: FOR_TO
83263: IFFALSE 83330
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
83265: LD_VAR 0 1
83269: PPUSH
83270: LD_VAR 0 5
83274: PPUSH
83275: LD_VAR 0 6
83279: PPUSH
83280: CALL_OW 272
83284: PPUSH
83285: LD_VAR 0 2
83289: PPUSH
83290: LD_VAR 0 5
83294: PPUSH
83295: LD_VAR 0 6
83299: PPUSH
83300: CALL_OW 273
83304: PPUSH
83305: LD_VAR 0 3
83309: PPUSH
83310: CALL_OW 309
83314: IFFALSE 83328
// begin result := true ;
83316: LD_ADDR_VAR 0 4
83320: PUSH
83321: LD_INT 1
83323: ST_TO_ADDR
// exit ;
83324: POP
83325: POP
83326: GO 83332
// end ;
83328: GO 83262
83330: POP
83331: POP
// end ;
83332: LD_VAR 0 4
83336: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
83337: LD_INT 0
83339: PPUSH
83340: PPUSH
83341: PPUSH
// if btype = b_depot then
83342: LD_VAR 0 2
83346: PUSH
83347: LD_INT 0
83349: EQUAL
83350: IFFALSE 83362
// begin result := true ;
83352: LD_ADDR_VAR 0 3
83356: PUSH
83357: LD_INT 1
83359: ST_TO_ADDR
// exit ;
83360: GO 83478
// end ; pom := GetBase ( depot ) ;
83362: LD_ADDR_VAR 0 4
83366: PUSH
83367: LD_VAR 0 1
83371: PPUSH
83372: CALL_OW 274
83376: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
83377: LD_ADDR_VAR 0 5
83381: PUSH
83382: LD_VAR 0 2
83386: PPUSH
83387: LD_VAR 0 1
83391: PPUSH
83392: CALL_OW 248
83396: PPUSH
83397: CALL_OW 450
83401: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
83402: LD_ADDR_VAR 0 3
83406: PUSH
83407: LD_VAR 0 4
83411: PPUSH
83412: LD_INT 1
83414: PPUSH
83415: CALL_OW 275
83419: PUSH
83420: LD_VAR 0 5
83424: PUSH
83425: LD_INT 1
83427: ARRAY
83428: GREATEREQUAL
83429: PUSH
83430: LD_VAR 0 4
83434: PPUSH
83435: LD_INT 2
83437: PPUSH
83438: CALL_OW 275
83442: PUSH
83443: LD_VAR 0 5
83447: PUSH
83448: LD_INT 2
83450: ARRAY
83451: GREATEREQUAL
83452: AND
83453: PUSH
83454: LD_VAR 0 4
83458: PPUSH
83459: LD_INT 3
83461: PPUSH
83462: CALL_OW 275
83466: PUSH
83467: LD_VAR 0 5
83471: PUSH
83472: LD_INT 3
83474: ARRAY
83475: GREATEREQUAL
83476: AND
83477: ST_TO_ADDR
// end ;
83478: LD_VAR 0 3
83482: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
83483: LD_INT 0
83485: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
83486: LD_VAR 0 1
83490: PPUSH
83491: LD_VAR 0 2
83495: PPUSH
83496: LD_INT 0
83498: PPUSH
83499: LD_INT 0
83501: PPUSH
83502: LD_INT 1
83504: PPUSH
83505: LD_INT 0
83507: PPUSH
83508: CALL_OW 587
// end ;
83512: LD_VAR 0 3
83516: RET
// export function CenterOnNow ( unit ) ; begin
83517: LD_INT 0
83519: PPUSH
// result := IsInUnit ( unit ) ;
83520: LD_ADDR_VAR 0 2
83524: PUSH
83525: LD_VAR 0 1
83529: PPUSH
83530: CALL_OW 310
83534: ST_TO_ADDR
// if not result then
83535: LD_VAR 0 2
83539: NOT
83540: IFFALSE 83552
// result := unit ;
83542: LD_ADDR_VAR 0 2
83546: PUSH
83547: LD_VAR 0 1
83551: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
83552: LD_VAR 0 1
83556: PPUSH
83557: CALL_OW 87
// end ;
83561: LD_VAR 0 2
83565: RET
// export function ComMoveHex ( unit , hex ) ; begin
83566: LD_INT 0
83568: PPUSH
// if not hex then
83569: LD_VAR 0 2
83573: NOT
83574: IFFALSE 83578
// exit ;
83576: GO 83631
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
83578: LD_VAR 0 2
83582: PUSH
83583: LD_INT 1
83585: ARRAY
83586: PPUSH
83587: LD_VAR 0 2
83591: PUSH
83592: LD_INT 2
83594: ARRAY
83595: PPUSH
83596: CALL_OW 428
83600: IFFALSE 83604
// exit ;
83602: GO 83631
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
83604: LD_VAR 0 1
83608: PPUSH
83609: LD_VAR 0 2
83613: PUSH
83614: LD_INT 1
83616: ARRAY
83617: PPUSH
83618: LD_VAR 0 2
83622: PUSH
83623: LD_INT 2
83625: ARRAY
83626: PPUSH
83627: CALL_OW 111
// end ;
83631: LD_VAR 0 3
83635: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
83636: LD_INT 0
83638: PPUSH
83639: PPUSH
83640: PPUSH
// if not unit or not enemy then
83641: LD_VAR 0 1
83645: NOT
83646: PUSH
83647: LD_VAR 0 2
83651: NOT
83652: OR
83653: IFFALSE 83657
// exit ;
83655: GO 83781
// x := GetX ( enemy ) ;
83657: LD_ADDR_VAR 0 4
83661: PUSH
83662: LD_VAR 0 2
83666: PPUSH
83667: CALL_OW 250
83671: ST_TO_ADDR
// y := GetY ( enemy ) ;
83672: LD_ADDR_VAR 0 5
83676: PUSH
83677: LD_VAR 0 2
83681: PPUSH
83682: CALL_OW 251
83686: ST_TO_ADDR
// if ValidHex ( x , y ) then
83687: LD_VAR 0 4
83691: PPUSH
83692: LD_VAR 0 5
83696: PPUSH
83697: CALL_OW 488
83701: IFFALSE 83781
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
83703: LD_VAR 0 2
83707: PPUSH
83708: CALL_OW 247
83712: PUSH
83713: LD_INT 3
83715: PUSH
83716: LD_INT 2
83718: PUSH
83719: EMPTY
83720: LIST
83721: LIST
83722: IN
83723: PUSH
83724: LD_VAR 0 1
83728: PPUSH
83729: CALL_OW 255
83733: PPUSH
83734: LD_VAR 0 2
83738: PPUSH
83739: CALL_OW 292
83743: OR
83744: IFFALSE 83762
// ComAttackUnit ( unit , enemy ) else
83746: LD_VAR 0 1
83750: PPUSH
83751: LD_VAR 0 2
83755: PPUSH
83756: CALL_OW 115
83760: GO 83781
// ComAgressiveMove ( unit , x , y ) ;
83762: LD_VAR 0 1
83766: PPUSH
83767: LD_VAR 0 4
83771: PPUSH
83772: LD_VAR 0 5
83776: PPUSH
83777: CALL_OW 114
// end ;
83781: LD_VAR 0 3
83785: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
83786: LD_INT 0
83788: PPUSH
83789: PPUSH
83790: PPUSH
// list := AreaToList ( area , 0 ) ;
83791: LD_ADDR_VAR 0 5
83795: PUSH
83796: LD_VAR 0 1
83800: PPUSH
83801: LD_INT 0
83803: PPUSH
83804: CALL_OW 517
83808: ST_TO_ADDR
// if not list then
83809: LD_VAR 0 5
83813: NOT
83814: IFFALSE 83818
// exit ;
83816: GO 83948
// if all then
83818: LD_VAR 0 2
83822: IFFALSE 83910
// begin for i := 1 to list [ 1 ] do
83824: LD_ADDR_VAR 0 4
83828: PUSH
83829: DOUBLE
83830: LD_INT 1
83832: DEC
83833: ST_TO_ADDR
83834: LD_VAR 0 5
83838: PUSH
83839: LD_INT 1
83841: ARRAY
83842: PUSH
83843: FOR_TO
83844: IFFALSE 83906
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
83846: LD_ADDR_VAR 0 3
83850: PUSH
83851: LD_VAR 0 3
83855: PPUSH
83856: LD_VAR 0 3
83860: PUSH
83861: LD_INT 1
83863: PLUS
83864: PPUSH
83865: LD_VAR 0 5
83869: PUSH
83870: LD_INT 1
83872: ARRAY
83873: PUSH
83874: LD_VAR 0 4
83878: ARRAY
83879: PUSH
83880: LD_VAR 0 5
83884: PUSH
83885: LD_INT 2
83887: ARRAY
83888: PUSH
83889: LD_VAR 0 4
83893: ARRAY
83894: PUSH
83895: EMPTY
83896: LIST
83897: LIST
83898: PPUSH
83899: CALL_OW 1
83903: ST_TO_ADDR
83904: GO 83843
83906: POP
83907: POP
// exit ;
83908: GO 83948
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
83910: LD_ADDR_VAR 0 3
83914: PUSH
83915: LD_VAR 0 5
83919: PUSH
83920: LD_INT 1
83922: ARRAY
83923: PUSH
83924: LD_INT 1
83926: ARRAY
83927: PUSH
83928: LD_VAR 0 5
83932: PUSH
83933: LD_INT 2
83935: ARRAY
83936: PUSH
83937: LD_INT 1
83939: ARRAY
83940: PUSH
83941: EMPTY
83942: LIST
83943: LIST
83944: PUSH
83945: EMPTY
83946: LIST
83947: ST_TO_ADDR
// end ;
83948: LD_VAR 0 3
83952: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
83953: LD_INT 0
83955: PPUSH
83956: PPUSH
// list := AreaToList ( area , 0 ) ;
83957: LD_ADDR_VAR 0 4
83961: PUSH
83962: LD_VAR 0 1
83966: PPUSH
83967: LD_INT 0
83969: PPUSH
83970: CALL_OW 517
83974: ST_TO_ADDR
// if not list then
83975: LD_VAR 0 4
83979: NOT
83980: IFFALSE 83984
// exit ;
83982: GO 84025
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
83984: LD_ADDR_VAR 0 3
83988: PUSH
83989: LD_VAR 0 4
83993: PUSH
83994: LD_INT 1
83996: ARRAY
83997: PUSH
83998: LD_INT 1
84000: ARRAY
84001: PUSH
84002: LD_VAR 0 4
84006: PUSH
84007: LD_INT 2
84009: ARRAY
84010: PUSH
84011: LD_INT 1
84013: ARRAY
84014: PUSH
84015: LD_VAR 0 2
84019: PUSH
84020: EMPTY
84021: LIST
84022: LIST
84023: LIST
84024: ST_TO_ADDR
// end ;
84025: LD_VAR 0 3
84029: RET
// export function First ( array ) ; begin
84030: LD_INT 0
84032: PPUSH
// if not array then
84033: LD_VAR 0 1
84037: NOT
84038: IFFALSE 84042
// exit ;
84040: GO 84056
// result := array [ 1 ] ;
84042: LD_ADDR_VAR 0 2
84046: PUSH
84047: LD_VAR 0 1
84051: PUSH
84052: LD_INT 1
84054: ARRAY
84055: ST_TO_ADDR
// end ;
84056: LD_VAR 0 2
84060: RET
// export function Last ( array ) ; begin
84061: LD_INT 0
84063: PPUSH
// if not array then
84064: LD_VAR 0 1
84068: NOT
84069: IFFALSE 84073
// exit ;
84071: GO 84089
// result := array [ array ] ;
84073: LD_ADDR_VAR 0 2
84077: PUSH
84078: LD_VAR 0 1
84082: PUSH
84083: LD_VAR 0 1
84087: ARRAY
84088: ST_TO_ADDR
// end ;
84089: LD_VAR 0 2
84093: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
84094: LD_INT 0
84096: PPUSH
84097: PPUSH
// result := [ ] ;
84098: LD_ADDR_VAR 0 5
84102: PUSH
84103: EMPTY
84104: ST_TO_ADDR
// if not array then
84105: LD_VAR 0 1
84109: NOT
84110: IFFALSE 84114
// exit ;
84112: GO 84226
// for i := 1 to array do
84114: LD_ADDR_VAR 0 6
84118: PUSH
84119: DOUBLE
84120: LD_INT 1
84122: DEC
84123: ST_TO_ADDR
84124: LD_VAR 0 1
84128: PUSH
84129: FOR_TO
84130: IFFALSE 84224
// if array [ i ] [ index ] = value then
84132: LD_VAR 0 1
84136: PUSH
84137: LD_VAR 0 6
84141: ARRAY
84142: PUSH
84143: LD_VAR 0 2
84147: ARRAY
84148: PUSH
84149: LD_VAR 0 3
84153: EQUAL
84154: IFFALSE 84222
// begin if indexColumn then
84156: LD_VAR 0 4
84160: IFFALSE 84196
// result := Join ( result , array [ i ] [ indexColumn ] ) else
84162: LD_ADDR_VAR 0 5
84166: PUSH
84167: LD_VAR 0 5
84171: PPUSH
84172: LD_VAR 0 1
84176: PUSH
84177: LD_VAR 0 6
84181: ARRAY
84182: PUSH
84183: LD_VAR 0 4
84187: ARRAY
84188: PPUSH
84189: CALL 79418 0 2
84193: ST_TO_ADDR
84194: GO 84222
// result := Join ( result , array [ i ] ) ;
84196: LD_ADDR_VAR 0 5
84200: PUSH
84201: LD_VAR 0 5
84205: PPUSH
84206: LD_VAR 0 1
84210: PUSH
84211: LD_VAR 0 6
84215: ARRAY
84216: PPUSH
84217: CALL 79418 0 2
84221: ST_TO_ADDR
// end ;
84222: GO 84129
84224: POP
84225: POP
// end ;
84226: LD_VAR 0 5
84230: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
84231: LD_INT 0
84233: PPUSH
// if not vehicles or not parkingPoint then
84234: LD_VAR 0 1
84238: NOT
84239: PUSH
84240: LD_VAR 0 2
84244: NOT
84245: OR
84246: IFFALSE 84250
// exit ;
84248: GO 84348
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
84250: LD_ADDR_VAR 0 1
84254: PUSH
84255: LD_VAR 0 1
84259: PPUSH
84260: LD_INT 50
84262: PUSH
84263: EMPTY
84264: LIST
84265: PUSH
84266: LD_INT 3
84268: PUSH
84269: LD_INT 92
84271: PUSH
84272: LD_VAR 0 2
84276: PUSH
84277: LD_INT 1
84279: ARRAY
84280: PUSH
84281: LD_VAR 0 2
84285: PUSH
84286: LD_INT 2
84288: ARRAY
84289: PUSH
84290: LD_INT 8
84292: PUSH
84293: EMPTY
84294: LIST
84295: LIST
84296: LIST
84297: LIST
84298: PUSH
84299: EMPTY
84300: LIST
84301: LIST
84302: PUSH
84303: EMPTY
84304: LIST
84305: LIST
84306: PPUSH
84307: CALL_OW 72
84311: ST_TO_ADDR
// if not vehicles then
84312: LD_VAR 0 1
84316: NOT
84317: IFFALSE 84321
// exit ;
84319: GO 84348
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
84321: LD_VAR 0 1
84325: PPUSH
84326: LD_VAR 0 2
84330: PUSH
84331: LD_INT 1
84333: ARRAY
84334: PPUSH
84335: LD_VAR 0 2
84339: PUSH
84340: LD_INT 2
84342: ARRAY
84343: PPUSH
84344: CALL_OW 111
// end ;
84348: LD_VAR 0 3
84352: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
84353: LD_INT 0
84355: PPUSH
84356: PPUSH
84357: PPUSH
// if not side or not area then
84358: LD_VAR 0 1
84362: NOT
84363: PUSH
84364: LD_VAR 0 2
84368: NOT
84369: OR
84370: IFFALSE 84374
// exit ;
84372: GO 84493
// tmp := AreaToList ( area , 0 ) ;
84374: LD_ADDR_VAR 0 5
84378: PUSH
84379: LD_VAR 0 2
84383: PPUSH
84384: LD_INT 0
84386: PPUSH
84387: CALL_OW 517
84391: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
84392: LD_ADDR_VAR 0 4
84396: PUSH
84397: DOUBLE
84398: LD_INT 1
84400: DEC
84401: ST_TO_ADDR
84402: LD_VAR 0 5
84406: PUSH
84407: LD_INT 1
84409: ARRAY
84410: PUSH
84411: FOR_TO
84412: IFFALSE 84491
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
84414: LD_VAR 0 5
84418: PUSH
84419: LD_INT 1
84421: ARRAY
84422: PUSH
84423: LD_VAR 0 4
84427: ARRAY
84428: PPUSH
84429: LD_VAR 0 5
84433: PUSH
84434: LD_INT 2
84436: ARRAY
84437: PUSH
84438: LD_VAR 0 4
84442: ARRAY
84443: PPUSH
84444: CALL_OW 351
84448: IFFALSE 84489
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
84450: LD_VAR 0 5
84454: PUSH
84455: LD_INT 1
84457: ARRAY
84458: PUSH
84459: LD_VAR 0 4
84463: ARRAY
84464: PPUSH
84465: LD_VAR 0 5
84469: PUSH
84470: LD_INT 2
84472: ARRAY
84473: PUSH
84474: LD_VAR 0 4
84478: ARRAY
84479: PPUSH
84480: LD_VAR 0 1
84484: PPUSH
84485: CALL_OW 244
// end ;
84489: GO 84411
84491: POP
84492: POP
// end ; end_of_file
84493: LD_VAR 0 3
84497: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
84498: LD_VAR 0 1
84502: PPUSH
84503: LD_VAR 0 2
84507: PPUSH
84508: LD_VAR 0 3
84512: PPUSH
84513: LD_VAR 0 4
84517: PPUSH
84518: LD_VAR 0 5
84522: PPUSH
84523: LD_VAR 0 6
84527: PPUSH
84528: CALL 21023 0 6
// end ;
84532: PPOPN 6
84534: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
84535: LD_INT 0
84537: PPUSH
// begin if not units then
84538: LD_VAR 0 1
84542: NOT
84543: IFFALSE 84547
// exit ;
84545: GO 84547
// end ;
84547: PPOPN 7
84549: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
84550: CALL 20910 0 0
// end ;
84554: PPOPN 1
84556: END
