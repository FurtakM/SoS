// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 82 0 0
// InitMultiplayer ;
  20: CALL 157 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareAmerican ( Multiplayer_SetBotSide ( 1 ) ) ;
  37: LD_INT 1
  39: PPUSH
  40: CALL 1835 0 1
  44: PPUSH
  45: CALL 5758 0 1
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  49: LD_INT 2
  51: PPUSH
  52: CALL 1835 0 1
  56: PPUSH
  57: CALL 10320 0 1
// Multiplayer_Start ;
  61: CALL 3865 0 0
// ResetFog ;
  65: CALL_OW 335
// game := true ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_INT 1
  76: ST_TO_ADDR
// Multiplayer_End ;
  77: CALL 3977 0 0
// end ;
  81: END
// export debug , game , botSides , activeArabAttacks , activeAmerAttacks ; function InitVariables ; begin
  82: LD_INT 0
  84: PPUSH
// debug := false ;
  85: LD_ADDR_EXP 1
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// botSides := [ 1 , 2 ] ;
  93: LD_ADDR_EXP 3
  97: PUSH
  98: LD_INT 1
 100: PUSH
 101: LD_INT 2
 103: PUSH
 104: EMPTY
 105: LIST
 106: LIST
 107: ST_TO_ADDR
// activeArabAttacks := false ;
 108: LD_ADDR_EXP 4
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// activeAmerAttacks := false ;
 116: LD_ADDR_EXP 5
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// end ;
 124: LD_VAR 0 1
 128: RET
// every 0 0$01 trigger game and not debug_strings do
 129: LD_EXP 2
 133: PUSH
 134: LD_OWVAR 48
 138: NOT
 139: AND
 140: IFFALSE 156
 142: GO 144
 144: DISABLE
// begin enable ;
 145: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 146: LD_ADDR_OWVAR 47
 150: PUSH
 151: CALL 4694 0 0
 155: ST_TO_ADDR
// end ; end_of_file
 156: END
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_extra_oil , multi_support , multi_commanders , multi_loosers , multi_players_amount , multi_reinforcements , multi_support_arrive_time , multi_buildings ; export function InitMultiplayer ; var i , j , x , tmp ; begin
 157: LD_INT 0
 159: PPUSH
 160: PPUSH
 161: PPUSH
 162: PPUSH
 163: PPUSH
// multi_settings_counter := 6 ;
 164: LD_ADDR_EXP 18
 168: PUSH
 169: LD_INT 6
 171: ST_TO_ADDR
// multi_settings := [ ] ;
 172: LD_ADDR_EXP 17
 176: PUSH
 177: EMPTY
 178: ST_TO_ADDR
// if Multiplayer then
 179: LD_OWVAR 4
 183: IFFALSE 363
// begin your_side := mp_player_side ;
 185: LD_ADDR_OWVAR 2
 189: PUSH
 190: LD_OWVAR 7
 194: ST_TO_ADDR
// multi_gametype := mp_game_type ;
 195: LD_ADDR_EXP 6
 199: PUSH
 200: LD_OWVAR 6
 204: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
 205: LD_ADDR_EXP 7
 209: PUSH
 210: LD_OWVAR 17
 214: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
 215: LD_ADDR_EXP 8
 219: PUSH
 220: LD_OWVAR 15
 224: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
 225: LD_ADDR_EXP 9
 229: PUSH
 230: LD_OWVAR 16
 234: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
 235: LD_ADDR_EXP 10
 239: PUSH
 240: EMPTY
 241: PUSH
 242: EMPTY
 243: LIST
 244: ST_TO_ADDR
// for i in mp_teams do
 245: LD_ADDR_VAR 0 2
 249: PUSH
 250: LD_OWVAR 12
 254: PUSH
 255: FOR_IN
 256: IFFALSE 299
// if i then
 258: LD_VAR 0 2
 262: IFFALSE 297
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
 264: LD_ADDR_EXP 10
 268: PUSH
 269: LD_EXP 10
 273: PPUSH
 274: LD_INT 1
 276: PPUSH
 277: LD_EXP 10
 281: PUSH
 282: LD_INT 1
 284: ARRAY
 285: PUSH
 286: LD_VAR 0 2
 290: UNION
 291: PPUSH
 292: CALL_OW 1
 296: ST_TO_ADDR
 297: GO 255
 299: POP
 300: POP
// for i := 1 to multi_settings_counter do
 301: LD_ADDR_VAR 0 2
 305: PUSH
 306: DOUBLE
 307: LD_INT 1
 309: DEC
 310: ST_TO_ADDR
 311: LD_EXP 18
 315: PUSH
 316: FOR_TO
 317: IFFALSE 359
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
 319: LD_ADDR_EXP 17
 323: PUSH
 324: LD_EXP 17
 328: PPUSH
 329: LD_EXP 17
 333: PUSH
 334: LD_INT 1
 336: PLUS
 337: PPUSH
 338: LD_VAR 0 2
 342: PPUSH
 343: CALL_OW 426
 347: PUSH
 348: LD_INT 1
 350: PLUS
 351: PPUSH
 352: CALL_OW 1
 356: ST_TO_ADDR
 357: GO 316
 359: POP
 360: POP
// end else
 361: GO 549
// begin your_side := 3 ;
 363: LD_ADDR_OWVAR 2
 367: PUSH
 368: LD_INT 3
 370: ST_TO_ADDR
// multi_gametype := 1 ;
 371: LD_ADDR_EXP 6
 375: PUSH
 376: LD_INT 1
 378: ST_TO_ADDR
// multi_sides := [ 0 , 0 , 1 , 2 , 3 , 0 , 0 , 0 ] ;
 379: LD_ADDR_EXP 7
 383: PUSH
 384: LD_INT 0
 386: PUSH
 387: LD_INT 0
 389: PUSH
 390: LD_INT 1
 392: PUSH
 393: LD_INT 2
 395: PUSH
 396: LD_INT 3
 398: PUSH
 399: LD_INT 0
 401: PUSH
 402: LD_INT 0
 404: PUSH
 405: LD_INT 0
 407: PUSH
 408: EMPTY
 409: LIST
 410: LIST
 411: LIST
 412: LIST
 413: LIST
 414: LIST
 415: LIST
 416: LIST
 417: ST_TO_ADDR
// multi_side_teams := [ 0 , 0 , 1 , 1 , 1 , 0 , 0 , 0 ] ;
 418: LD_ADDR_EXP 8
 422: PUSH
 423: LD_INT 0
 425: PUSH
 426: LD_INT 0
 428: PUSH
 429: LD_INT 1
 431: PUSH
 432: LD_INT 1
 434: PUSH
 435: LD_INT 1
 437: PUSH
 438: LD_INT 0
 440: PUSH
 441: LD_INT 0
 443: PUSH
 444: LD_INT 0
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: ST_TO_ADDR
// multi_nations := [ 0 , 0 , 3 , 3 , 3 , 0 , 0 , 0 ] ;
 457: LD_ADDR_EXP 9
 461: PUSH
 462: LD_INT 0
 464: PUSH
 465: LD_INT 0
 467: PUSH
 468: LD_INT 3
 470: PUSH
 471: LD_INT 3
 473: PUSH
 474: LD_INT 3
 476: PUSH
 477: LD_INT 0
 479: PUSH
 480: LD_INT 0
 482: PUSH
 483: LD_INT 0
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: ST_TO_ADDR
// multi_teams := [ [ 3 , 4 , 5 ] ] ;
 496: LD_ADDR_EXP 10
 500: PUSH
 501: LD_INT 3
 503: PUSH
 504: LD_INT 4
 506: PUSH
 507: LD_INT 5
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: LIST
 514: PUSH
 515: EMPTY
 516: LIST
 517: ST_TO_ADDR
// multi_settings := [ 2 , 4 , 4 , 3 , 1 , 3 ] ;
 518: LD_ADDR_EXP 17
 522: PUSH
 523: LD_INT 2
 525: PUSH
 526: LD_INT 4
 528: PUSH
 529: LD_INT 4
 531: PUSH
 532: LD_INT 3
 534: PUSH
 535: LD_INT 1
 537: PUSH
 538: LD_INT 3
 540: PUSH
 541: EMPTY
 542: LIST
 543: LIST
 544: LIST
 545: LIST
 546: LIST
 547: LIST
 548: ST_TO_ADDR
// end ; multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 549: LD_ADDR_EXP 11
 553: PUSH
 554: LD_INT 0
 556: PUSH
 557: LD_INT 0
 559: PUSH
 560: LD_INT 0
 562: PUSH
 563: LD_INT 0
 565: PUSH
 566: LD_INT 0
 568: PUSH
 569: LD_INT 0
 571: PUSH
 572: LD_INT 0
 574: PUSH
 575: LD_INT 0
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: LIST
 582: LIST
 583: LIST
 584: LIST
 585: LIST
 586: LIST
 587: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 588: LD_ADDR_EXP 14
 592: PUSH
 593: LD_INT 0
 595: PUSH
 596: LD_INT 0
 598: PUSH
 599: LD_INT 0
 601: PUSH
 602: LD_INT 0
 604: PUSH
 605: LD_INT 0
 607: PUSH
 608: LD_INT 0
 610: PUSH
 611: LD_INT 0
 613: PUSH
 614: LD_INT 0
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: LIST
 625: LIST
 626: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 627: LD_ADDR_EXP 25
 631: PUSH
 632: LD_INT 0
 634: PUSH
 635: LD_INT 0
 637: PUSH
 638: LD_INT 0
 640: PUSH
 641: LD_INT 0
 643: PUSH
 644: LD_INT 0
 646: PUSH
 647: LD_INT 0
 649: PUSH
 650: LD_INT 0
 652: PUSH
 653: LD_INT 0
 655: PUSH
 656: EMPTY
 657: LIST
 658: LIST
 659: LIST
 660: LIST
 661: LIST
 662: LIST
 663: LIST
 664: LIST
 665: ST_TO_ADDR
// multi_teamgame := true ;
 666: LD_ADDR_EXP 15
 670: PUSH
 671: LD_INT 1
 673: ST_TO_ADDR
// multi_allowed_nations := [ 3 ] ;
 674: LD_ADDR_EXP 13
 678: PUSH
 679: LD_INT 3
 681: PUSH
 682: EMPTY
 683: LIST
 684: ST_TO_ADDR
// multi_custom_commanders := true ;
 685: LD_ADDR_EXP 16
 689: PUSH
 690: LD_INT 1
 692: ST_TO_ADDR
// multi_commanders := [ ] ;
 693: LD_ADDR_EXP 24
 697: PUSH
 698: EMPTY
 699: ST_TO_ADDR
// multi_reinforcements := [ ] ;
 700: LD_ADDR_EXP 27
 704: PUSH
 705: EMPTY
 706: ST_TO_ADDR
// multi_players_amount := 0 ;
 707: LD_ADDR_EXP 26
 711: PUSH
 712: LD_INT 0
 714: ST_TO_ADDR
// multi_pos_area := [ [ spawnPlayer1Area , spawnPlayer1VehArea ] , [ spawnPlayer2Area , spawnPlayer2VehArea ] , [ spawnPlayer3Area , spawnPlayer3VehArea ] ] ;
 715: LD_ADDR_EXP 12
 719: PUSH
 720: LD_INT 8
 722: PUSH
 723: LD_INT 9
 725: PUSH
 726: EMPTY
 727: LIST
 728: LIST
 729: PUSH
 730: LD_INT 10
 732: PUSH
 733: LD_INT 11
 735: PUSH
 736: EMPTY
 737: LIST
 738: LIST
 739: PUSH
 740: LD_INT 12
 742: PUSH
 743: LD_INT 13
 745: PUSH
 746: EMPTY
 747: LIST
 748: LIST
 749: PUSH
 750: EMPTY
 751: LIST
 752: LIST
 753: LIST
 754: ST_TO_ADDR
// multi_buildings := [ [ [ b_depot , GetBuildingFromArea ( warehouse1Area , 0 ) , kagan ] , [ b_breastwork , [ 67 , 102 , 3 ] ] , [ b_breastwork , [ 73 , 103 , 3 ] ] , [ b_oil_mine , [ 78 , 112 , 3 ] ] ] , [ [ b_depot , GetBuildingFromArea ( warehouse2Area , 0 ) , beria ] , [ b_breastwork , [ 102 , 86 , 2 ] ] , [ b_breastwork , [ 98 , 96 , 1 ] ] , [ b_workshop , [ 115 , 104 , 0 ] ] ] , [ [ b_depot , GetBuildingFromArea ( warehouse3Area , 3 ) , kirov ] , [ b_breastwork , [ 169 , 101 , 4 ] ] , [ b_breastwork , [ 175 , 123 , 5 ] ] , [ b_armoury , [ 166 , 115 , 5 ] ] , [ b_lab , [ 152 , 98 , 3 ] ] ] ] ;
 755: LD_ADDR_EXP 29
 759: PUSH
 760: LD_INT 0
 762: PUSH
 763: LD_INT 14
 765: PPUSH
 766: LD_INT 0
 768: PPUSH
 769: CALL 84649 0 2
 773: PUSH
 774: LD_STRING kagan
 776: PUSH
 777: EMPTY
 778: LIST
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 31
 784: PUSH
 785: LD_INT 67
 787: PUSH
 788: LD_INT 102
 790: PUSH
 791: LD_INT 3
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: LIST
 798: PUSH
 799: EMPTY
 800: LIST
 801: LIST
 802: PUSH
 803: LD_INT 31
 805: PUSH
 806: LD_INT 73
 808: PUSH
 809: LD_INT 103
 811: PUSH
 812: LD_INT 3
 814: PUSH
 815: EMPTY
 816: LIST
 817: LIST
 818: LIST
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: LD_INT 29
 826: PUSH
 827: LD_INT 78
 829: PUSH
 830: LD_INT 112
 832: PUSH
 833: LD_INT 3
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: LIST
 840: PUSH
 841: EMPTY
 842: LIST
 843: LIST
 844: PUSH
 845: EMPTY
 846: LIST
 847: LIST
 848: LIST
 849: LIST
 850: PUSH
 851: LD_INT 0
 853: PUSH
 854: LD_INT 15
 856: PPUSH
 857: LD_INT 0
 859: PPUSH
 860: CALL 84649 0 2
 864: PUSH
 865: LD_STRING beria
 867: PUSH
 868: EMPTY
 869: LIST
 870: LIST
 871: LIST
 872: PUSH
 873: LD_INT 31
 875: PUSH
 876: LD_INT 102
 878: PUSH
 879: LD_INT 86
 881: PUSH
 882: LD_INT 2
 884: PUSH
 885: EMPTY
 886: LIST
 887: LIST
 888: LIST
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: PUSH
 894: LD_INT 31
 896: PUSH
 897: LD_INT 98
 899: PUSH
 900: LD_INT 96
 902: PUSH
 903: LD_INT 1
 905: PUSH
 906: EMPTY
 907: LIST
 908: LIST
 909: LIST
 910: PUSH
 911: EMPTY
 912: LIST
 913: LIST
 914: PUSH
 915: LD_INT 2
 917: PUSH
 918: LD_INT 115
 920: PUSH
 921: LD_INT 104
 923: PUSH
 924: LD_INT 0
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: LIST
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: PUSH
 936: EMPTY
 937: LIST
 938: LIST
 939: LIST
 940: LIST
 941: PUSH
 942: LD_INT 0
 944: PUSH
 945: LD_INT 16
 947: PPUSH
 948: LD_INT 3
 950: PPUSH
 951: CALL 84649 0 2
 955: PUSH
 956: LD_STRING kirov
 958: PUSH
 959: EMPTY
 960: LIST
 961: LIST
 962: LIST
 963: PUSH
 964: LD_INT 31
 966: PUSH
 967: LD_INT 169
 969: PUSH
 970: LD_INT 101
 972: PUSH
 973: LD_INT 4
 975: PUSH
 976: EMPTY
 977: LIST
 978: LIST
 979: LIST
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: PUSH
 985: LD_INT 31
 987: PUSH
 988: LD_INT 175
 990: PUSH
 991: LD_INT 123
 993: PUSH
 994: LD_INT 5
 996: PUSH
 997: EMPTY
 998: LIST
 999: LIST
1000: LIST
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: PUSH
1006: LD_INT 4
1008: PUSH
1009: LD_INT 166
1011: PUSH
1012: LD_INT 115
1014: PUSH
1015: LD_INT 5
1017: PUSH
1018: EMPTY
1019: LIST
1020: LIST
1021: LIST
1022: PUSH
1023: EMPTY
1024: LIST
1025: LIST
1026: PUSH
1027: LD_INT 6
1029: PUSH
1030: LD_INT 152
1032: PUSH
1033: LD_INT 98
1035: PUSH
1036: LD_INT 3
1038: PUSH
1039: EMPTY
1040: LIST
1041: LIST
1042: LIST
1043: PUSH
1044: EMPTY
1045: LIST
1046: LIST
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: LIST
1052: LIST
1053: LIST
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: LIST
1059: ST_TO_ADDR
// for i := 1 to 8 do
1060: LD_ADDR_VAR 0 2
1064: PUSH
1065: DOUBLE
1066: LD_INT 1
1068: DEC
1069: ST_TO_ADDR
1070: LD_INT 8
1072: PUSH
1073: FOR_TO
1074: IFFALSE 1403
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
1076: LD_VAR 0 2
1080: PPUSH
1081: CALL_OW 530
1085: IFFALSE 1243
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
1087: LD_ADDR_EXP 11
1091: PUSH
1092: LD_EXP 11
1096: PPUSH
1097: LD_VAR 0 2
1101: PPUSH
1102: LD_INT 1
1104: PPUSH
1105: CALL_OW 1
1109: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
1110: LD_ADDR_EXP 9
1114: PUSH
1115: LD_EXP 9
1119: PPUSH
1120: LD_VAR 0 2
1124: PPUSH
1125: LD_INT 0
1127: PPUSH
1128: CALL_OW 1
1132: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
1133: LD_ADDR_EXP 7
1137: PUSH
1138: LD_EXP 7
1142: PPUSH
1143: LD_VAR 0 2
1147: PPUSH
1148: LD_INT 0
1150: PPUSH
1151: CALL_OW 1
1155: ST_TO_ADDR
// for j = 1 to multi_teams do
1156: LD_ADDR_VAR 0 3
1160: PUSH
1161: DOUBLE
1162: LD_INT 1
1164: DEC
1165: ST_TO_ADDR
1166: LD_EXP 10
1170: PUSH
1171: FOR_TO
1172: IFFALSE 1241
// begin if i in multi_teams [ j ] then
1174: LD_VAR 0 2
1178: PUSH
1179: LD_EXP 10
1183: PUSH
1184: LD_VAR 0 3
1188: ARRAY
1189: IN
1190: IFFALSE 1239
// begin tmp := multi_teams [ j ] diff i ;
1192: LD_ADDR_VAR 0 5
1196: PUSH
1197: LD_EXP 10
1201: PUSH
1202: LD_VAR 0 3
1206: ARRAY
1207: PUSH
1208: LD_VAR 0 2
1212: DIFF
1213: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
1214: LD_ADDR_EXP 10
1218: PUSH
1219: LD_EXP 10
1223: PPUSH
1224: LD_VAR 0 3
1228: PPUSH
1229: LD_VAR 0 5
1233: PPUSH
1234: CALL_OW 1
1238: ST_TO_ADDR
// end ; end ;
1239: GO 1171
1241: POP
1242: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
1243: LD_EXP 9
1247: PUSH
1248: LD_VAR 0 2
1252: ARRAY
1253: PUSH
1254: LD_EXP 9
1258: PUSH
1259: LD_VAR 0 2
1263: ARRAY
1264: PUSH
1265: LD_EXP 13
1269: IN
1270: NOT
1271: AND
1272: IFFALSE 1313
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
1274: LD_ADDR_EXP 9
1278: PUSH
1279: LD_EXP 9
1283: PPUSH
1284: LD_VAR 0 2
1288: PPUSH
1289: LD_EXP 13
1293: PUSH
1294: LD_INT 1
1296: PPUSH
1297: LD_EXP 13
1301: PPUSH
1302: CALL_OW 12
1306: ARRAY
1307: PPUSH
1308: CALL_OW 1
1312: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
1313: LD_EXP 9
1317: PUSH
1318: LD_VAR 0 2
1322: ARRAY
1323: NOT
1324: PUSH
1325: LD_EXP 7
1329: PUSH
1330: LD_VAR 0 2
1334: ARRAY
1335: NOT
1336: AND
1337: PUSH
1338: LD_EXP 11
1342: PUSH
1343: LD_VAR 0 2
1347: ARRAY
1348: NOT
1349: AND
1350: IFFALSE 1375
// multi_bots := Replace ( multi_bots , i , 1 ) ;
1352: LD_ADDR_EXP 14
1356: PUSH
1357: LD_EXP 14
1361: PPUSH
1362: LD_VAR 0 2
1366: PPUSH
1367: LD_INT 1
1369: PPUSH
1370: CALL_OW 1
1374: ST_TO_ADDR
// if multi_sides [ i ] then
1375: LD_EXP 7
1379: PUSH
1380: LD_VAR 0 2
1384: ARRAY
1385: IFFALSE 1401
// multi_players_amount := multi_players_amount + 1 ;
1387: LD_ADDR_EXP 26
1391: PUSH
1392: LD_EXP 26
1396: PUSH
1397: LD_INT 1
1399: PLUS
1400: ST_TO_ADDR
// end ;
1401: GO 1073
1403: POP
1404: POP
// for i in multi_teams do
1405: LD_ADDR_VAR 0 2
1409: PUSH
1410: LD_EXP 10
1414: PUSH
1415: FOR_IN
1416: IFFALSE 1524
// begin for j = 2 to i do
1418: LD_ADDR_VAR 0 3
1422: PUSH
1423: DOUBLE
1424: LD_INT 2
1426: DEC
1427: ST_TO_ADDR
1428: LD_VAR 0 2
1432: PUSH
1433: FOR_TO
1434: IFFALSE 1520
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
1436: LD_VAR 0 2
1440: PUSH
1441: LD_VAR 0 3
1445: ARRAY
1446: PPUSH
1447: LD_VAR 0 2
1451: PUSH
1452: LD_INT 1
1454: ARRAY
1455: PPUSH
1456: CALL_OW 343
// for x = 1 to j - 1 do
1460: LD_ADDR_VAR 0 4
1464: PUSH
1465: DOUBLE
1466: LD_INT 1
1468: DEC
1469: ST_TO_ADDR
1470: LD_VAR 0 3
1474: PUSH
1475: LD_INT 1
1477: MINUS
1478: PUSH
1479: FOR_TO
1480: IFFALSE 1516
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
1482: LD_VAR 0 2
1486: PUSH
1487: LD_VAR 0 3
1491: ARRAY
1492: PPUSH
1493: LD_VAR 0 2
1497: PUSH
1498: LD_VAR 0 4
1502: ARRAY
1503: PPUSH
1504: LD_INT 1
1506: PPUSH
1507: LD_INT 1
1509: PPUSH
1510: CALL_OW 80
1514: GO 1479
1516: POP
1517: POP
// end ;
1518: GO 1433
1520: POP
1521: POP
// end ;
1522: GO 1415
1524: POP
1525: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
1526: LD_ADDR_OWVAR 67
1530: PUSH
1531: LD_INT 1
1533: PUSH
1534: LD_INT 2
1536: PUSH
1537: LD_INT 3
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: LIST
1544: PUSH
1545: LD_EXP 17
1549: PUSH
1550: LD_INT 1
1552: ARRAY
1553: ARRAY
1554: ST_TO_ADDR
// multi_pep_amount := [ 6 , 7 , 8 , 9 ] [ multi_settings [ 2 ] ] ;
1555: LD_ADDR_EXP 19
1559: PUSH
1560: LD_INT 6
1562: PUSH
1563: LD_INT 7
1565: PUSH
1566: LD_INT 8
1568: PUSH
1569: LD_INT 9
1571: PUSH
1572: EMPTY
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: PUSH
1578: LD_EXP 17
1582: PUSH
1583: LD_INT 2
1585: ARRAY
1586: ARRAY
1587: ST_TO_ADDR
// multi_skill_level := [ 2 , 3 , 4 , 5 ] [ multi_settings [ 3 ] ] ;
1588: LD_ADDR_EXP 20
1592: PUSH
1593: LD_INT 2
1595: PUSH
1596: LD_INT 3
1598: PUSH
1599: LD_INT 4
1601: PUSH
1602: LD_INT 5
1604: PUSH
1605: EMPTY
1606: LIST
1607: LIST
1608: LIST
1609: LIST
1610: PUSH
1611: LD_EXP 17
1615: PUSH
1616: LD_INT 3
1618: ARRAY
1619: ARRAY
1620: ST_TO_ADDR
// multi_crates_spawn := [ [ 3000 , 0 0$32 ] , [ 5000 , 0 0$22 ] , [ 6000 , 0 0$14 ] , [ 8000 , 0 0$12 ] ] [ multi_settings [ 4 ] ] ;
1621: LD_ADDR_EXP 21
1625: PUSH
1626: LD_INT 3000
1628: PUSH
1629: LD_INT 1120
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: PUSH
1636: LD_INT 5000
1638: PUSH
1639: LD_INT 770
1641: PUSH
1642: EMPTY
1643: LIST
1644: LIST
1645: PUSH
1646: LD_INT 6000
1648: PUSH
1649: LD_INT 490
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: PUSH
1656: LD_INT 8000
1658: PUSH
1659: LD_INT 420
1661: PUSH
1662: EMPTY
1663: LIST
1664: LIST
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: LIST
1671: PUSH
1672: LD_EXP 17
1676: PUSH
1677: LD_INT 4
1679: ARRAY
1680: ARRAY
1681: ST_TO_ADDR
// multi_extra_oil := [ 0 , 1 , 2 ] [ multi_settings [ 5 ] ] ;
1682: LD_ADDR_EXP 22
1686: PUSH
1687: LD_INT 0
1689: PUSH
1690: LD_INT 1
1692: PUSH
1693: LD_INT 2
1695: PUSH
1696: EMPTY
1697: LIST
1698: LIST
1699: LIST
1700: PUSH
1701: LD_EXP 17
1705: PUSH
1706: LD_INT 5
1708: ARRAY
1709: ARRAY
1710: ST_TO_ADDR
// multi_support := [ 0 , 1 , 2 ] [ multi_settings [ 6 ] ] ;
1711: LD_ADDR_EXP 23
1715: PUSH
1716: LD_INT 0
1718: PUSH
1719: LD_INT 1
1721: PUSH
1722: LD_INT 2
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: LIST
1729: PUSH
1730: LD_EXP 17
1734: PUSH
1735: LD_INT 6
1737: ARRAY
1738: ARRAY
1739: ST_TO_ADDR
// multi_support_arrive_time := [ 5 5$0 , 15 15$0 , 25 25$0 ] [ Difficulty ] ;
1740: LD_ADDR_EXP 28
1744: PUSH
1745: LD_INT 10500
1747: PUSH
1748: LD_INT 31500
1750: PUSH
1751: LD_INT 52500
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: LIST
1758: PUSH
1759: LD_OWVAR 67
1763: ARRAY
1764: ST_TO_ADDR
// if multi_extra_oil then
1765: LD_EXP 22
1769: IFFALSE 1830
// begin if multi_extra_oil = 1 then
1771: LD_EXP 22
1775: PUSH
1776: LD_INT 1
1778: EQUAL
1779: IFFALSE 1794
// begin CreateDepositXY ( 109 , 130 , mat_oil ) ;
1781: LD_INT 109
1783: PPUSH
1784: LD_INT 130
1786: PPUSH
1787: LD_INT 2
1789: PPUSH
1790: CALL_OW 62
// end ; if multi_extra_oil = 2 then
1794: LD_EXP 22
1798: PUSH
1799: LD_INT 2
1801: EQUAL
1802: IFFALSE 1830
// begin CreateDepositXY ( 109 , 130 , mat_oil ) ;
1804: LD_INT 109
1806: PPUSH
1807: LD_INT 130
1809: PPUSH
1810: LD_INT 2
1812: PPUSH
1813: CALL_OW 62
// CreateDepositXY ( 150 , 112 , mat_oil ) ;
1817: LD_INT 150
1819: PPUSH
1820: LD_INT 112
1822: PPUSH
1823: LD_INT 2
1825: PPUSH
1826: CALL_OW 62
// end ; end ; end ;
1830: LD_VAR 0 1
1834: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
1835: LD_INT 0
1837: PPUSH
1838: PPUSH
// if not multi_sides [ preferSide ] then
1839: LD_EXP 7
1843: PUSH
1844: LD_VAR 0 1
1848: ARRAY
1849: NOT
1850: IFFALSE 1864
// begin result := preferSide ;
1852: LD_ADDR_VAR 0 2
1856: PUSH
1857: LD_VAR 0 1
1861: ST_TO_ADDR
// exit ;
1862: GO 1911
// end ; for i := 1 to 8 do
1864: LD_ADDR_VAR 0 3
1868: PUSH
1869: DOUBLE
1870: LD_INT 1
1872: DEC
1873: ST_TO_ADDR
1874: LD_INT 8
1876: PUSH
1877: FOR_TO
1878: IFFALSE 1909
// if not multi_sides [ i ] then
1880: LD_EXP 7
1884: PUSH
1885: LD_VAR 0 3
1889: ARRAY
1890: NOT
1891: IFFALSE 1907
// begin result := i ;
1893: LD_ADDR_VAR 0 2
1897: PUSH
1898: LD_VAR 0 3
1902: ST_TO_ADDR
// exit ;
1903: POP
1904: POP
1905: GO 1911
// end ;
1907: GO 1877
1909: POP
1910: POP
// end ;
1911: LD_VAR 0 2
1915: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
1916: LD_INT 0
1918: PPUSH
// uc_side := side ;
1919: LD_ADDR_OWVAR 20
1923: PUSH
1924: LD_VAR 0 1
1928: ST_TO_ADDR
// uc_nation := nation_russian ;
1929: LD_ADDR_OWVAR 21
1933: PUSH
1934: LD_INT 3
1936: ST_TO_ADDR
// hc_importance := 100 ;
1937: LD_ADDR_OWVAR 32
1941: PUSH
1942: LD_INT 100
1944: ST_TO_ADDR
// hc_class := class_soldier ;
1945: LD_ADDR_OWVAR 28
1949: PUSH
1950: LD_INT 1
1952: ST_TO_ADDR
// if num = 1 then
1953: LD_VAR 0 2
1957: PUSH
1958: LD_INT 1
1960: EQUAL
1961: IFFALSE 2024
// begin PrepareSoldier ( sex_male , multi_skill_level ) ;
1963: LD_INT 1
1965: PPUSH
1966: LD_EXP 20
1970: PPUSH
1971: CALL_OW 381
// hc_gallery := ru ;
1975: LD_ADDR_OWVAR 33
1979: PUSH
1980: LD_STRING ru
1982: ST_TO_ADDR
// hc_face_number := 10 ;
1983: LD_ADDR_OWVAR 34
1987: PUSH
1988: LD_INT 10
1990: ST_TO_ADDR
// hc_name := Popov ;
1991: LD_ADDR_OWVAR 26
1995: PUSH
1996: LD_STRING Popov
1998: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
1999: LD_ADDR_OWVAR 29
2003: PUSH
2004: LD_INT 10
2006: PUSH
2007: LD_INT 10
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: ST_TO_ADDR
// result := CreateHuman ;
2014: LD_ADDR_VAR 0 3
2018: PUSH
2019: CALL_OW 44
2023: ST_TO_ADDR
// end ; if num = 2 then
2024: LD_VAR 0 2
2028: PUSH
2029: LD_INT 2
2031: EQUAL
2032: IFFALSE 2103
// begin PrepareMechanic ( sex_male , multi_skill_level ) ;
2034: LD_INT 1
2036: PPUSH
2037: LD_EXP 20
2041: PPUSH
2042: CALL_OW 383
// hc_class := class_mechanic ;
2046: LD_ADDR_OWVAR 28
2050: PUSH
2051: LD_INT 3
2053: ST_TO_ADDR
// hc_gallery := ru ;
2054: LD_ADDR_OWVAR 33
2058: PUSH
2059: LD_STRING ru
2061: ST_TO_ADDR
// hc_face_number := 1 ;
2062: LD_ADDR_OWVAR 34
2066: PUSH
2067: LD_INT 1
2069: ST_TO_ADDR
// hc_name := Burlak ;
2070: LD_ADDR_OWVAR 26
2074: PUSH
2075: LD_STRING Burlak
2077: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
2078: LD_ADDR_OWVAR 29
2082: PUSH
2083: LD_INT 10
2085: PUSH
2086: LD_INT 11
2088: PUSH
2089: EMPTY
2090: LIST
2091: LIST
2092: ST_TO_ADDR
// result := CreateHuman ;
2093: LD_ADDR_VAR 0 3
2097: PUSH
2098: CALL_OW 44
2102: ST_TO_ADDR
// end ; if num = 3 then
2103: LD_VAR 0 2
2107: PUSH
2108: LD_INT 3
2110: EQUAL
2111: IFFALSE 2174
// begin PrepareSoldier ( sex_male , multi_skill_level ) ;
2113: LD_INT 1
2115: PPUSH
2116: LD_EXP 20
2120: PPUSH
2121: CALL_OW 381
// hc_gallery := ru ;
2125: LD_ADDR_OWVAR 33
2129: PUSH
2130: LD_STRING ru
2132: ST_TO_ADDR
// hc_face_number := 8 ;
2133: LD_ADDR_OWVAR 34
2137: PUSH
2138: LD_INT 8
2140: ST_TO_ADDR
// hc_name := Kurin ;
2141: LD_ADDR_OWVAR 26
2145: PUSH
2146: LD_STRING Kurin
2148: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
2149: LD_ADDR_OWVAR 29
2153: PUSH
2154: LD_INT 12
2156: PUSH
2157: LD_INT 11
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: ST_TO_ADDR
// result := CreateHuman ;
2164: LD_ADDR_VAR 0 3
2168: PUSH
2169: CALL_OW 44
2173: ST_TO_ADDR
// end ; end ;
2174: LD_VAR 0 3
2178: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , b , cl , un , veh , tmp , copy , people_amount ; begin
2179: LD_INT 0
2181: PPUSH
2182: PPUSH
2183: PPUSH
2184: PPUSH
2185: PPUSH
2186: PPUSH
2187: PPUSH
2188: PPUSH
2189: PPUSH
2190: PPUSH
// for i := 1 to 8 do
2191: LD_ADDR_VAR 0 2
2195: PUSH
2196: DOUBLE
2197: LD_INT 1
2199: DEC
2200: ST_TO_ADDR
2201: LD_INT 8
2203: PUSH
2204: FOR_TO
2205: IFFALSE 3534
// begin if not multi_sides [ i ] then
2207: LD_EXP 7
2211: PUSH
2212: LD_VAR 0 2
2216: ARRAY
2217: NOT
2218: IFFALSE 2222
// continue ;
2220: GO 2204
// if multi_buildings [ multi_sides [ i ] ] then
2222: LD_EXP 29
2226: PUSH
2227: LD_EXP 7
2231: PUSH
2232: LD_VAR 0 2
2236: ARRAY
2237: ARRAY
2238: IFFALSE 2551
// begin uc_side := i ;
2240: LD_ADDR_OWVAR 20
2244: PUSH
2245: LD_VAR 0 2
2249: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2250: LD_ADDR_OWVAR 21
2254: PUSH
2255: LD_EXP 9
2259: PUSH
2260: LD_VAR 0 2
2264: ARRAY
2265: ST_TO_ADDR
// for j in multi_buildings [ multi_sides [ i ] ] do
2266: LD_ADDR_VAR 0 3
2270: PUSH
2271: LD_EXP 29
2275: PUSH
2276: LD_EXP 7
2280: PUSH
2281: LD_VAR 0 2
2285: ARRAY
2286: ARRAY
2287: PUSH
2288: FOR_IN
2289: IFFALSE 2549
// begin if j [ 1 ] = b_oil_mine then
2291: LD_VAR 0 3
2295: PUSH
2296: LD_INT 1
2298: ARRAY
2299: PUSH
2300: LD_INT 29
2302: EQUAL
2303: IFFALSE 2340
// SetResourceVisibility ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , i ) ;
2305: LD_VAR 0 3
2309: PUSH
2310: LD_INT 2
2312: ARRAY
2313: PUSH
2314: LD_INT 1
2316: ARRAY
2317: PPUSH
2318: LD_VAR 0 3
2322: PUSH
2323: LD_INT 2
2325: ARRAY
2326: PUSH
2327: LD_INT 2
2329: ARRAY
2330: PPUSH
2331: LD_VAR 0 2
2335: PPUSH
2336: CALL_OW 441
// bc_type := j [ 1 ] ;
2340: LD_ADDR_OWVAR 42
2344: PUSH
2345: LD_VAR 0 3
2349: PUSH
2350: LD_INT 1
2352: ARRAY
2353: ST_TO_ADDR
// bc_level := 2 ;
2354: LD_ADDR_OWVAR 43
2358: PUSH
2359: LD_INT 2
2361: ST_TO_ADDR
// if j [ 1 ] = b_lab then
2362: LD_VAR 0 3
2366: PUSH
2367: LD_INT 1
2369: ARRAY
2370: PUSH
2371: LD_INT 6
2373: EQUAL
2374: IFFALSE 2392
// begin bc_kind1 := b_lab_basic ;
2376: LD_ADDR_OWVAR 44
2380: PUSH
2381: LD_INT 9
2383: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2384: LD_ADDR_OWVAR 45
2388: PUSH
2389: LD_INT 9
2391: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , j [ 2 ] [ 3 ] ) ;
2392: LD_ADDR_VAR 0 4
2396: PUSH
2397: LD_VAR 0 3
2401: PUSH
2402: LD_INT 2
2404: ARRAY
2405: PUSH
2406: LD_INT 1
2408: ARRAY
2409: PPUSH
2410: LD_VAR 0 3
2414: PUSH
2415: LD_INT 2
2417: ARRAY
2418: PUSH
2419: LD_INT 2
2421: ARRAY
2422: PPUSH
2423: LD_VAR 0 3
2427: PUSH
2428: LD_INT 2
2430: ARRAY
2431: PUSH
2432: LD_INT 3
2434: ARRAY
2435: PPUSH
2436: CALL_OW 47
2440: ST_TO_ADDR
// if j [ 1 ] = b_depot then
2441: LD_VAR 0 3
2445: PUSH
2446: LD_INT 1
2448: ARRAY
2449: PUSH
2450: LD_INT 0
2452: EQUAL
2453: IFFALSE 2547
// begin SetBName ( b , j [ 3 ] ) ;
2455: LD_VAR 0 4
2459: PPUSH
2460: LD_VAR 0 3
2464: PUSH
2465: LD_INT 3
2467: ARRAY
2468: PPUSH
2469: CALL_OW 500
// SetResourceType ( GetBase ( b ) , mat_cans , [ 320 , 240 , 150 ] [ Difficulty ] ) ;
2473: LD_VAR 0 4
2477: PPUSH
2478: CALL_OW 274
2482: PPUSH
2483: LD_INT 1
2485: PPUSH
2486: LD_INT 320
2488: PUSH
2489: LD_INT 240
2491: PUSH
2492: LD_INT 150
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: LIST
2499: PUSH
2500: LD_OWVAR 67
2504: ARRAY
2505: PPUSH
2506: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , [ 160 , 130 , 100 ] [ Difficulty ] ) ;
2510: LD_VAR 0 4
2514: PPUSH
2515: CALL_OW 274
2519: PPUSH
2520: LD_INT 2
2522: PPUSH
2523: LD_INT 160
2525: PUSH
2526: LD_INT 130
2528: PUSH
2529: LD_INT 100
2531: PUSH
2532: EMPTY
2533: LIST
2534: LIST
2535: LIST
2536: PUSH
2537: LD_OWVAR 67
2541: ARRAY
2542: PPUSH
2543: CALL_OW 277
// end ; end ;
2547: GO 2288
2549: POP
2550: POP
// end ; if multi_custom_commanders then
2551: LD_EXP 16
2555: IFFALSE 2765
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
2557: LD_ADDR_VAR 0 6
2561: PUSH
2562: LD_VAR 0 2
2566: PPUSH
2567: LD_EXP 7
2571: PUSH
2572: LD_VAR 0 2
2576: ARRAY
2577: PPUSH
2578: CALL 1916 0 2
2582: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
2583: LD_ADDR_EXP 24
2587: PUSH
2588: LD_EXP 24
2592: PPUSH
2593: LD_EXP 24
2597: PUSH
2598: LD_INT 1
2600: PLUS
2601: PPUSH
2602: LD_VAR 0 6
2606: PPUSH
2607: CALL_OW 2
2611: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic then
2612: LD_VAR 0 6
2616: PPUSH
2617: CALL_OW 257
2621: PUSH
2622: LD_INT 3
2624: EQUAL
2625: IFFALSE 2730
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
2627: LD_INT 22
2629: PPUSH
2630: LD_INT 1
2632: PPUSH
2633: LD_INT 1
2635: PPUSH
2636: LD_INT 51
2638: PPUSH
2639: LD_INT 100
2641: PPUSH
2642: CALL 47259 0 5
// veh := CreateVehicle ;
2646: LD_ADDR_VAR 0 7
2650: PUSH
2651: CALL_OW 45
2655: ST_TO_ADDR
// SetCargo ( veh , mat_oil , 100 - ( 20 * Difficulty ) ) ;
2656: LD_VAR 0 7
2660: PPUSH
2661: LD_INT 2
2663: PPUSH
2664: LD_INT 100
2666: PUSH
2667: LD_INT 20
2669: PUSH
2670: LD_OWVAR 67
2674: MUL
2675: MINUS
2676: PPUSH
2677: CALL_OW 290
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
2681: LD_VAR 0 7
2685: PPUSH
2686: LD_EXP 12
2690: PUSH
2691: LD_EXP 7
2695: PUSH
2696: LD_VAR 0 2
2700: ARRAY
2701: ARRAY
2702: PUSH
2703: LD_INT 2
2705: ARRAY
2706: PPUSH
2707: LD_INT 0
2709: PPUSH
2710: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
2714: LD_VAR 0 6
2718: PPUSH
2719: LD_VAR 0 7
2723: PPUSH
2724: CALL_OW 52
// end else
2728: GO 2763
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2730: LD_VAR 0 6
2734: PPUSH
2735: LD_EXP 12
2739: PUSH
2740: LD_EXP 7
2744: PUSH
2745: LD_VAR 0 2
2749: ARRAY
2750: ARRAY
2751: PUSH
2752: LD_INT 1
2754: ARRAY
2755: PPUSH
2756: LD_INT 0
2758: PPUSH
2759: CALL_OW 49
// end else
2763: GO 2976
// begin uc_side := i ;
2765: LD_ADDR_OWVAR 20
2769: PUSH
2770: LD_VAR 0 2
2774: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2775: LD_ADDR_OWVAR 21
2779: PUSH
2780: LD_EXP 9
2784: PUSH
2785: LD_VAR 0 2
2789: ARRAY
2790: ST_TO_ADDR
// hc_importance := 100 ;
2791: LD_ADDR_OWVAR 32
2795: PUSH
2796: LD_INT 100
2798: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
2799: LD_INT 0
2801: PPUSH
2802: LD_INT 1
2804: PPUSH
2805: LD_EXP 20
2809: PPUSH
2810: CALL_OW 380
// if multiplayer then
2814: LD_OWVAR 4
2818: IFFALSE 2876
// begin hc_name := mp_sides_players_names [ i ] ;
2820: LD_ADDR_OWVAR 26
2824: PUSH
2825: LD_OWVAR 19
2829: PUSH
2830: LD_VAR 0 2
2834: ARRAY
2835: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
2836: LD_ADDR_OWVAR 33
2840: PUSH
2841: LD_STRING MULTIAVATARS
2843: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
2844: LD_ADDR_OWVAR 34
2848: PUSH
2849: LD_VAR 0 2
2853: PPUSH
2854: CALL_OW 525
2858: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
2859: LD_ADDR_OWVAR 27
2863: PUSH
2864: LD_VAR 0 2
2868: PPUSH
2869: CALL_OW 526
2873: ST_TO_ADDR
// end else
2874: GO 2908
// begin hc_gallery :=  ;
2876: LD_ADDR_OWVAR 33
2880: PUSH
2881: LD_STRING 
2883: ST_TO_ADDR
// hc_name :=  ;
2884: LD_ADDR_OWVAR 26
2888: PUSH
2889: LD_STRING 
2891: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
2892: LD_ADDR_OWVAR 27
2896: PUSH
2897: LD_INT 1
2899: PPUSH
2900: LD_INT 2
2902: PPUSH
2903: CALL_OW 12
2907: ST_TO_ADDR
// end ; un := CreateHuman ;
2908: LD_ADDR_VAR 0 6
2912: PUSH
2913: CALL_OW 44
2917: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2918: LD_VAR 0 6
2922: PPUSH
2923: LD_EXP 12
2927: PUSH
2928: LD_EXP 7
2932: PUSH
2933: LD_VAR 0 2
2937: ARRAY
2938: ARRAY
2939: PUSH
2940: LD_INT 1
2942: ARRAY
2943: PPUSH
2944: LD_INT 0
2946: PPUSH
2947: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
2951: LD_ADDR_EXP 24
2955: PUSH
2956: LD_EXP 24
2960: PPUSH
2961: LD_VAR 0 2
2965: PPUSH
2966: LD_VAR 0 6
2970: PPUSH
2971: CALL_OW 1
2975: ST_TO_ADDR
// end ; InitHc ;
2976: CALL_OW 19
// InitUc ;
2980: CALL_OW 18
// uc_side := i ;
2984: LD_ADDR_OWVAR 20
2988: PUSH
2989: LD_VAR 0 2
2993: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2994: LD_ADDR_OWVAR 21
2998: PUSH
2999: LD_EXP 9
3003: PUSH
3004: LD_VAR 0 2
3008: ARRAY
3009: ST_TO_ADDR
// hc_gallery :=  ;
3010: LD_ADDR_OWVAR 33
3014: PUSH
3015: LD_STRING 
3017: ST_TO_ADDR
// hc_name :=  ;
3018: LD_ADDR_OWVAR 26
3022: PUSH
3023: LD_STRING 
3025: ST_TO_ADDR
// hc_importance := 0 ;
3026: LD_ADDR_OWVAR 32
3030: PUSH
3031: LD_INT 0
3033: ST_TO_ADDR
// cl := 1 ;
3034: LD_ADDR_VAR 0 5
3038: PUSH
3039: LD_INT 1
3041: ST_TO_ADDR
// for j := 2 to multi_pep_amount do
3042: LD_ADDR_VAR 0 3
3046: PUSH
3047: DOUBLE
3048: LD_INT 2
3050: DEC
3051: ST_TO_ADDR
3052: LD_EXP 19
3056: PUSH
3057: FOR_TO
3058: IFFALSE 3530
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
3060: LD_VAR 0 3
3064: PUSH
3065: LD_INT 1
3067: MINUS
3068: PUSH
3069: LD_EXP 19
3073: PUSH
3074: LD_INT 1
3076: MINUS
3077: PUSH
3078: LD_INT 4
3080: DIVREAL
3081: MOD
3082: PUSH
3083: LD_INT 0
3085: EQUAL
3086: IFFALSE 3102
// cl := cl + 1 ;
3088: LD_ADDR_VAR 0 5
3092: PUSH
3093: LD_VAR 0 5
3097: PUSH
3098: LD_INT 1
3100: PLUS
3101: ST_TO_ADDR
// if cl > 4 then
3102: LD_VAR 0 5
3106: PUSH
3107: LD_INT 4
3109: GREATER
3110: IFFALSE 3120
// cl := 1 ;
3112: LD_ADDR_VAR 0 5
3116: PUSH
3117: LD_INT 1
3119: ST_TO_ADDR
// PrepareHuman ( false , cl , multi_skill_level ) ;
3120: LD_INT 0
3122: PPUSH
3123: LD_VAR 0 5
3127: PPUSH
3128: LD_EXP 20
3132: PPUSH
3133: CALL_OW 380
// un := CreateHuman ;
3137: LD_ADDR_VAR 0 6
3141: PUSH
3142: CALL_OW 44
3146: ST_TO_ADDR
// if j > copy then
3147: LD_VAR 0 3
3151: PUSH
3152: LD_VAR 0 9
3156: GREATER
3157: IFFALSE 3186
// copy := Replace ( copy , j , un ) else
3159: LD_ADDR_VAR 0 9
3163: PUSH
3164: LD_VAR 0 9
3168: PPUSH
3169: LD_VAR 0 3
3173: PPUSH
3174: LD_VAR 0 6
3178: PPUSH
3179: CALL_OW 1
3183: ST_TO_ADDR
3184: GO 3268
// begin CopySkills ( copy [ j ] , un ) ;
3186: LD_VAR 0 9
3190: PUSH
3191: LD_VAR 0 3
3195: ARRAY
3196: PPUSH
3197: LD_VAR 0 6
3201: PPUSH
3202: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( copy [ j ] , attr_speed ) ) ;
3206: LD_VAR 0 6
3210: PPUSH
3211: LD_INT 2
3213: PPUSH
3214: LD_VAR 0 9
3218: PUSH
3219: LD_VAR 0 3
3223: ARRAY
3224: PPUSH
3225: LD_INT 2
3227: PPUSH
3228: CALL_OW 260
3232: PPUSH
3233: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( copy [ j ] , attr_stamina ) ) ;
3237: LD_VAR 0 6
3241: PPUSH
3242: LD_INT 1
3244: PPUSH
3245: LD_VAR 0 9
3249: PUSH
3250: LD_VAR 0 3
3254: ARRAY
3255: PPUSH
3256: LD_INT 1
3258: PPUSH
3259: CALL_OW 260
3263: PPUSH
3264: CALL_OW 239
// end ; if multi_pos_area then
3268: LD_EXP 12
3272: IFFALSE 3528
// begin if GetClass ( un ) = 3 then
3274: LD_VAR 0 6
3278: PPUSH
3279: CALL_OW 257
3283: PUSH
3284: LD_INT 3
3286: EQUAL
3287: IFFALSE 3384
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , [ ru_gatling_gun , ru_heavy_machine_gun , ru_heavy_machine_gun ] [ Difficulty ] , 80 ) ;
3289: LD_INT 21
3291: PPUSH
3292: LD_INT 1
3294: PPUSH
3295: LD_INT 1
3297: PPUSH
3298: LD_INT 43
3300: PUSH
3301: LD_INT 42
3303: PUSH
3304: LD_INT 42
3306: PUSH
3307: EMPTY
3308: LIST
3309: LIST
3310: LIST
3311: PUSH
3312: LD_OWVAR 67
3316: ARRAY
3317: PPUSH
3318: LD_INT 80
3320: PPUSH
3321: CALL 47259 0 5
// veh := CreateVehicle ;
3325: LD_ADDR_VAR 0 7
3329: PUSH
3330: CALL_OW 45
3334: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
3335: LD_VAR 0 7
3339: PPUSH
3340: LD_EXP 12
3344: PUSH
3345: LD_EXP 7
3349: PUSH
3350: LD_VAR 0 2
3354: ARRAY
3355: ARRAY
3356: PUSH
3357: LD_INT 2
3359: ARRAY
3360: PPUSH
3361: LD_INT 0
3363: PPUSH
3364: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
3368: LD_VAR 0 6
3372: PPUSH
3373: LD_VAR 0 7
3377: PPUSH
3378: CALL_OW 52
// continue ;
3382: GO 3057
// end ; tmp := FilterAllUnits ( [ [ f_side , i ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) ;
3384: LD_ADDR_VAR 0 8
3388: PUSH
3389: LD_INT 22
3391: PUSH
3392: LD_VAR 0 2
3396: PUSH
3397: EMPTY
3398: LIST
3399: LIST
3400: PUSH
3401: LD_INT 30
3403: PUSH
3404: LD_INT 31
3406: PUSH
3407: EMPTY
3408: LIST
3409: LIST
3410: PUSH
3411: LD_INT 58
3413: PUSH
3414: EMPTY
3415: LIST
3416: PUSH
3417: EMPTY
3418: LIST
3419: LIST
3420: LIST
3421: PPUSH
3422: CALL_OW 69
3426: ST_TO_ADDR
// if GetClass ( un ) = 1 and tmp then
3427: LD_VAR 0 6
3431: PPUSH
3432: CALL_OW 257
3436: PUSH
3437: LD_INT 1
3439: EQUAL
3440: PUSH
3441: LD_VAR 0 8
3445: AND
3446: IFFALSE 3495
// begin SetDir ( un , GetDir ( tmp [ 1 ] ) - 3 ) ;
3448: LD_VAR 0 6
3452: PPUSH
3453: LD_VAR 0 8
3457: PUSH
3458: LD_INT 1
3460: ARRAY
3461: PPUSH
3462: CALL_OW 254
3466: PUSH
3467: LD_INT 3
3469: MINUS
3470: PPUSH
3471: CALL_OW 233
// PlaceHumanInUnit ( un , tmp [ 1 ] ) ;
3475: LD_VAR 0 6
3479: PPUSH
3480: LD_VAR 0 8
3484: PUSH
3485: LD_INT 1
3487: ARRAY
3488: PPUSH
3489: CALL_OW 52
// continue ;
3493: GO 3057
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
3495: LD_VAR 0 6
3499: PPUSH
3500: LD_EXP 12
3504: PUSH
3505: LD_EXP 7
3509: PUSH
3510: LD_VAR 0 2
3514: ARRAY
3515: ARRAY
3516: PUSH
3517: LD_INT 1
3519: ARRAY
3520: PPUSH
3521: LD_INT 0
3523: PPUSH
3524: CALL_OW 49
// end ; end ;
3528: GO 3057
3530: POP
3531: POP
// end ;
3532: GO 2204
3534: POP
3535: POP
// end ;
3536: LD_VAR 0 1
3540: RET
// export function Multiplayer_PrepareReinforcements ( ) ; var i , j , un , tmp ; begin
3541: LD_INT 0
3543: PPUSH
3544: PPUSH
3545: PPUSH
3546: PPUSH
3547: PPUSH
// if not multi_support then
3548: LD_EXP 23
3552: NOT
3553: IFFALSE 3557
// exit ;
3555: GO 3860
// result := [ ] ;
3557: LD_ADDR_VAR 0 1
3561: PUSH
3562: EMPTY
3563: ST_TO_ADDR
// for i := 1 to 8 do
3564: LD_ADDR_VAR 0 2
3568: PUSH
3569: DOUBLE
3570: LD_INT 1
3572: DEC
3573: ST_TO_ADDR
3574: LD_INT 8
3576: PUSH
3577: FOR_TO
3578: IFFALSE 3858
// begin result := Replace ( result , i , [ ] ) ;
3580: LD_ADDR_VAR 0 1
3584: PUSH
3585: LD_VAR 0 1
3589: PPUSH
3590: LD_VAR 0 2
3594: PPUSH
3595: EMPTY
3596: PPUSH
3597: CALL_OW 1
3601: ST_TO_ADDR
// if multi_sides [ i ] then
3602: LD_EXP 7
3606: PUSH
3607: LD_VAR 0 2
3611: ARRAY
3612: IFFALSE 3856
// begin tmp := [ ] ;
3614: LD_ADDR_VAR 0 5
3618: PUSH
3619: EMPTY
3620: ST_TO_ADDR
// if multi_support = 1 then
3621: LD_EXP 23
3625: PUSH
3626: LD_INT 1
3628: EQUAL
3629: IFFALSE 3726
// begin uc_side := i ;
3631: LD_ADDR_OWVAR 20
3635: PUSH
3636: LD_VAR 0 2
3640: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3641: LD_ADDR_OWVAR 21
3645: PUSH
3646: LD_EXP 9
3650: PUSH
3651: LD_VAR 0 2
3655: ARRAY
3656: ST_TO_ADDR
// for j := 1 to 3 do
3657: LD_ADDR_VAR 0 3
3661: PUSH
3662: DOUBLE
3663: LD_INT 1
3665: DEC
3666: ST_TO_ADDR
3667: LD_INT 3
3669: PUSH
3670: FOR_TO
3671: IFFALSE 3724
// begin InitHC_All ( ) ;
3673: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 1 , 4 ) ) ;
3677: LD_INT 0
3679: PPUSH
3680: LD_INT 1
3682: PPUSH
3683: LD_INT 4
3685: PPUSH
3686: CALL_OW 12
3690: PPUSH
3691: LD_INT 1
3693: PPUSH
3694: LD_INT 4
3696: PPUSH
3697: CALL_OW 12
3701: PPUSH
3702: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
3706: LD_ADDR_VAR 0 5
3710: PUSH
3711: LD_VAR 0 5
3715: PUSH
3716: CALL_OW 44
3720: ADD
3721: ST_TO_ADDR
// end ;
3722: GO 3670
3724: POP
3725: POP
// end ; if multi_support = 2 then
3726: LD_EXP 23
3730: PUSH
3731: LD_INT 2
3733: EQUAL
3734: IFFALSE 3831
// begin uc_side := i ;
3736: LD_ADDR_OWVAR 20
3740: PUSH
3741: LD_VAR 0 2
3745: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3746: LD_ADDR_OWVAR 21
3750: PUSH
3751: LD_EXP 9
3755: PUSH
3756: LD_VAR 0 2
3760: ARRAY
3761: ST_TO_ADDR
// for j := 1 to 5 do
3762: LD_ADDR_VAR 0 3
3766: PUSH
3767: DOUBLE
3768: LD_INT 1
3770: DEC
3771: ST_TO_ADDR
3772: LD_INT 5
3774: PUSH
3775: FOR_TO
3776: IFFALSE 3829
// begin InitHC_All ( ) ;
3778: CALL_OW 584
// PrepareHuman ( false , rand ( 1 , 4 ) , rand ( 2 , 4 ) ) ;
3782: LD_INT 0
3784: PPUSH
3785: LD_INT 1
3787: PPUSH
3788: LD_INT 4
3790: PPUSH
3791: CALL_OW 12
3795: PPUSH
3796: LD_INT 2
3798: PPUSH
3799: LD_INT 4
3801: PPUSH
3802: CALL_OW 12
3806: PPUSH
3807: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
3811: LD_ADDR_VAR 0 5
3815: PUSH
3816: LD_VAR 0 5
3820: PUSH
3821: CALL_OW 44
3825: ADD
3826: ST_TO_ADDR
// end ;
3827: GO 3775
3829: POP
3830: POP
// end ; result := Replace ( result , i , tmp ) ;
3831: LD_ADDR_VAR 0 1
3835: PUSH
3836: LD_VAR 0 1
3840: PPUSH
3841: LD_VAR 0 2
3845: PPUSH
3846: LD_VAR 0 5
3850: PPUSH
3851: CALL_OW 1
3855: ST_TO_ADDR
// end ; end ;
3856: GO 3577
3858: POP
3859: POP
// end ;
3860: LD_VAR 0 1
3864: RET
// export function Multiplayer_Start ( ) ; begin
3865: LD_INT 0
3867: PPUSH
// Multiplayer_PreparePlayers ( ) ;
3868: CALL 2179 0 0
// Multiplayer_InitPointSystem ( ) ;
3872: CALL 4783 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
3876: LD_INT 20
3878: PPUSH
3879: CALL 4959 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
3883: LD_INT 150
3885: PPUSH
3886: CALL 4959 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
3890: LD_INT 5
3892: PPUSH
3893: CALL 4959 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
3897: LD_INT 40
3899: NEG
3900: PPUSH
3901: CALL 4959 0 1
// Multiplayer_RegisterCondition ( 200 ) ;
3905: LD_INT 200
3907: PPUSH
3908: CALL 4959 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
3912: LD_INT 2
3914: PPUSH
3915: CALL 4959 0 1
// if multi_support then
3919: LD_EXP 23
3923: IFFALSE 3935
// multi_reinforcements := Multiplayer_PrepareReinforcements ( ) ;
3925: LD_ADDR_EXP 27
3929: PUSH
3930: CALL 3541 0 0
3934: ST_TO_ADDR
// if multi_sides [ your_side ] then
3935: LD_EXP 7
3939: PUSH
3940: LD_OWVAR 2
3944: ARRAY
3945: IFFALSE 3972
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
3947: LD_INT 22
3949: PUSH
3950: LD_OWVAR 2
3954: PUSH
3955: EMPTY
3956: LIST
3957: LIST
3958: PPUSH
3959: CALL_OW 69
3963: PUSH
3964: LD_INT 1
3966: ARRAY
3967: PPUSH
3968: CALL_OW 87
// end ;
3972: LD_VAR 0 1
3976: RET
// export function Multiplayer_End ( ) ; var i , j , un , veh ; begin
3977: LD_INT 0
3979: PPUSH
3980: PPUSH
3981: PPUSH
3982: PPUSH
3983: PPUSH
// repeat wait ( 0 0$1 ) ;
3984: LD_INT 35
3986: PPUSH
3987: CALL_OW 67
// if tick = 10 10$00 then
3991: LD_OWVAR 1
3995: PUSH
3996: LD_INT 21000
3998: EQUAL
3999: IFFALSE 4170
// begin for i := 1 to 8 do
4001: LD_ADDR_VAR 0 2
4005: PUSH
4006: DOUBLE
4007: LD_INT 1
4009: DEC
4010: ST_TO_ADDR
4011: LD_INT 8
4013: PUSH
4014: FOR_TO
4015: IFFALSE 4168
// begin if multi_sides [ i ] and not multi_loosers [ i ] then
4017: LD_EXP 7
4021: PUSH
4022: LD_VAR 0 2
4026: ARRAY
4027: PUSH
4028: LD_EXP 25
4032: PUSH
4033: LD_VAR 0 2
4037: ARRAY
4038: NOT
4039: AND
4040: IFFALSE 4166
// begin uc_side := i ;
4042: LD_ADDR_OWVAR 20
4046: PUSH
4047: LD_VAR 0 2
4051: ST_TO_ADDR
// uc_nation := nation_russian ;
4052: LD_ADDR_OWVAR 21
4056: PUSH
4057: LD_INT 3
4059: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gun , ru_heavy_machine_gun ] [ Difficulty ] , 30 ) ;
4060: LD_INT 22
4062: PPUSH
4063: LD_INT 1
4065: PPUSH
4066: LD_INT 1
4068: PPUSH
4069: LD_INT 44
4071: PUSH
4072: LD_INT 44
4074: PUSH
4075: LD_INT 42
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: LIST
4082: PUSH
4083: LD_OWVAR 67
4087: ARRAY
4088: PPUSH
4089: LD_INT 30
4091: PPUSH
4092: CALL 47259 0 5
// veh := CreateVehicle ;
4096: LD_ADDR_VAR 0 5
4100: PUSH
4101: CALL_OW 45
4105: ST_TO_ADDR
// PlaceUnitArea ( veh , southSpawnArea , false ) ;
4106: LD_VAR 0 5
4110: PPUSH
4111: LD_INT 32
4113: PPUSH
4114: LD_INT 0
4116: PPUSH
4117: CALL_OW 49
// PrepareMechanic ( false , 5 - Difficulty ) ;
4121: LD_INT 0
4123: PPUSH
4124: LD_INT 5
4126: PUSH
4127: LD_OWVAR 67
4131: MINUS
4132: PPUSH
4133: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
4137: CALL_OW 44
4141: PPUSH
4142: LD_VAR 0 5
4146: PPUSH
4147: CALL_OW 52
// ComMoveXY ( veh , 158 , 106 ) ;
4151: LD_VAR 0 5
4155: PPUSH
4156: LD_INT 158
4158: PPUSH
4159: LD_INT 106
4161: PPUSH
4162: CALL_OW 111
// end ; end ;
4166: GO 4014
4168: POP
4169: POP
// end ; if tick > multi_support_arrive_time and multi_support then
4170: LD_OWVAR 1
4174: PUSH
4175: LD_EXP 28
4179: GREATER
4180: PUSH
4181: LD_EXP 23
4185: AND
4186: IFFALSE 4351
// begin if tick mod 1 1$00 = 0 then
4188: LD_OWVAR 1
4192: PUSH
4193: LD_INT 2100
4195: MOD
4196: PUSH
4197: LD_INT 0
4199: EQUAL
4200: IFFALSE 4351
// begin for i := 1 to 8 do
4202: LD_ADDR_VAR 0 2
4206: PUSH
4207: DOUBLE
4208: LD_INT 1
4210: DEC
4211: ST_TO_ADDR
4212: LD_INT 8
4214: PUSH
4215: FOR_TO
4216: IFFALSE 4349
// begin if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] and Prob ( [ 80 , 60 , 40 ] [ Difficulty ] ) then
4218: LD_EXP 7
4222: PUSH
4223: LD_VAR 0 2
4227: ARRAY
4228: PUSH
4229: LD_EXP 25
4233: PUSH
4234: LD_VAR 0 2
4238: ARRAY
4239: NOT
4240: AND
4241: PUSH
4242: LD_EXP 27
4246: PUSH
4247: LD_VAR 0 2
4251: ARRAY
4252: AND
4253: PUSH
4254: LD_INT 80
4256: PUSH
4257: LD_INT 60
4259: PUSH
4260: LD_INT 40
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: LIST
4267: PUSH
4268: LD_OWVAR 67
4272: ARRAY
4273: PPUSH
4274: CALL_OW 13
4278: AND
4279: IFFALSE 4347
// begin PlaceUnitArea ( multi_reinforcements [ i ] [ 1 ] , spawnHumanArea , true ) ;
4281: LD_EXP 27
4285: PUSH
4286: LD_VAR 0 2
4290: ARRAY
4291: PUSH
4292: LD_INT 1
4294: ARRAY
4295: PPUSH
4296: LD_INT 7
4298: PPUSH
4299: LD_INT 1
4301: PPUSH
4302: CALL_OW 49
// multi_reinforcements := Replace ( multi_reinforcements , i , Delete ( multi_reinforcements [ i ] , 1 ) ) ;
4306: LD_ADDR_EXP 27
4310: PUSH
4311: LD_EXP 27
4315: PPUSH
4316: LD_VAR 0 2
4320: PPUSH
4321: LD_EXP 27
4325: PUSH
4326: LD_VAR 0 2
4330: ARRAY
4331: PPUSH
4332: LD_INT 1
4334: PPUSH
4335: CALL_OW 3
4339: PPUSH
4340: CALL_OW 1
4344: ST_TO_ADDR
// break ;
4345: GO 4349
// end ; end ;
4347: GO 4215
4349: POP
4350: POP
// end ; end ; if not multi_custom_commanders then
4351: LD_EXP 16
4355: NOT
4356: IFFALSE 4469
// begin for i := 1 to 8 do
4358: LD_ADDR_VAR 0 2
4362: PUSH
4363: DOUBLE
4364: LD_INT 1
4366: DEC
4367: ST_TO_ADDR
4368: LD_INT 8
4370: PUSH
4371: FOR_TO
4372: IFFALSE 4443
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
4374: LD_INT 22
4376: PUSH
4377: LD_VAR 0 2
4381: PUSH
4382: EMPTY
4383: LIST
4384: LIST
4385: PPUSH
4386: CALL_OW 69
4390: PUSH
4391: LD_INT 0
4393: EQUAL
4394: PUSH
4395: LD_EXP 25
4399: PUSH
4400: LD_VAR 0 2
4404: ARRAY
4405: NOT
4406: AND
4407: IFFALSE 4441
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
4409: LD_ADDR_EXP 25
4413: PUSH
4414: LD_EXP 25
4418: PPUSH
4419: LD_VAR 0 2
4423: PPUSH
4424: LD_INT 1
4426: PPUSH
4427: CALL_OW 1
4431: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
4432: LD_VAR 0 2
4436: PPUSH
4437: CALL 5029 0 1
// end ; end ;
4441: GO 4371
4443: POP
4444: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
4445: LD_EXP 25
4449: PPUSH
4450: CALL 44521 0 1
4454: PUSH
4455: LD_EXP 7
4459: PPUSH
4460: CALL 44521 0 1
4464: EQUAL
4465: IFFALSE 4469
// break ;
4467: GO 4489
// end ; until ( not Multiplayer_EnemyAlive ( ) and game ) or not multi_commanders ;
4469: CALL 4603 0 0
4473: NOT
4474: PUSH
4475: LD_EXP 2
4479: AND
4480: PUSH
4481: LD_EXP 24
4485: NOT
4486: OR
4487: IFFALSE 3984
// game := false ;
4489: LD_ADDR_EXP 2
4493: PUSH
4494: LD_INT 0
4496: ST_TO_ADDR
// for i := 1 to 8 do
4497: LD_ADDR_VAR 0 2
4501: PUSH
4502: DOUBLE
4503: LD_INT 1
4505: DEC
4506: ST_TO_ADDR
4507: LD_INT 8
4509: PUSH
4510: FOR_TO
4511: IFFALSE 4547
// begin if multi_sides [ i ] then
4513: LD_EXP 7
4517: PUSH
4518: LD_VAR 0 2
4522: ARRAY
4523: IFFALSE 4545
// SetMultiScore ( i , multi_points [ i ] ) ;
4525: LD_VAR 0 2
4529: PPUSH
4530: LD_EXP 30
4534: PUSH
4535: LD_VAR 0 2
4539: ARRAY
4540: PPUSH
4541: CALL_OW 506
// end ;
4545: GO 4510
4547: POP
4548: POP
// if multi_loosers [ your_side ] then
4549: LD_EXP 25
4553: PUSH
4554: LD_OWVAR 2
4558: ARRAY
4559: IFFALSE 4582
// begin if Multiplayer then
4561: LD_OWVAR 4
4565: IFFALSE 4573
// YouLostInMultiplayer else
4567: CALL_OW 107
4571: GO 4580
// YouLost (  ) ;
4573: LD_STRING 
4575: PPUSH
4576: CALL_OW 104
// end else
4580: GO 4598
// begin if Multiplayer then
4582: LD_OWVAR 4
4586: IFFALSE 4594
// YouWinInMultiplayer else
4588: CALL_OW 106
4592: GO 4598
// YouWin ;
4594: CALL_OW 103
// end ; end ;
4598: LD_VAR 0 1
4602: RET
// export function Multiplayer_EnemyAlive ( ) ; var side ; begin
4603: LD_INT 0
4605: PPUSH
4606: PPUSH
// result := false ;
4607: LD_ADDR_VAR 0 1
4611: PUSH
4612: LD_INT 0
4614: ST_TO_ADDR
// for side in botSides do
4615: LD_ADDR_VAR 0 2
4619: PUSH
4620: LD_EXP 3
4624: PUSH
4625: FOR_IN
4626: IFFALSE 4687
// begin result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 ;
4628: LD_ADDR_VAR 0 1
4632: PUSH
4633: LD_INT 22
4635: PUSH
4636: LD_VAR 0 2
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: PUSH
4645: LD_INT 21
4647: PUSH
4648: LD_INT 1
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: PUSH
4655: LD_INT 50
4657: PUSH
4658: EMPTY
4659: LIST
4660: PUSH
4661: EMPTY
4662: LIST
4663: LIST
4664: LIST
4665: PPUSH
4666: CALL_OW 69
4670: PUSH
4671: LD_INT 0
4673: GREATER
4674: ST_TO_ADDR
// if result then
4675: LD_VAR 0 1
4679: IFFALSE 4685
// exit ;
4681: POP
4682: POP
4683: GO 4689
// end ;
4685: GO 4625
4687: POP
4688: POP
// end ;
4689: LD_VAR 0 1
4693: RET
// export function Multiplayer_DisplayStrings ( ) ; var i ; begin
4694: LD_INT 0
4696: PPUSH
4697: PPUSH
// result := [ ] ;
4698: LD_ADDR_VAR 0 1
4702: PUSH
4703: EMPTY
4704: ST_TO_ADDR
// for i := 1 to 8 do
4705: LD_ADDR_VAR 0 2
4709: PUSH
4710: DOUBLE
4711: LD_INT 1
4713: DEC
4714: ST_TO_ADDR
4715: LD_INT 8
4717: PUSH
4718: FOR_TO
4719: IFFALSE 4776
// begin if multi_sides [ i ] then
4721: LD_EXP 7
4725: PUSH
4726: LD_VAR 0 2
4730: ARRAY
4731: IFFALSE 4774
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
4733: LD_ADDR_VAR 0 1
4737: PUSH
4738: LD_VAR 0 1
4742: PUSH
4743: LD_STRING #coop-points
4745: PUSH
4746: LD_VAR 0 2
4750: PUSH
4751: LD_VAR 0 2
4755: PUSH
4756: LD_EXP 30
4760: PUSH
4761: LD_VAR 0 2
4765: ARRAY
4766: PUSH
4767: EMPTY
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: ADD
4773: ST_TO_ADDR
// end ; end ;
4774: GO 4718
4776: POP
4777: POP
// end ;
4778: LD_VAR 0 1
4782: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
4783: LD_INT 0
4785: PPUSH
4786: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4787: LD_ADDR_EXP 30
4791: PUSH
4792: LD_INT 0
4794: PUSH
4795: LD_INT 0
4797: PUSH
4798: LD_INT 0
4800: PUSH
4801: LD_INT 0
4803: PUSH
4804: LD_INT 0
4806: PUSH
4807: LD_INT 0
4809: PUSH
4810: LD_INT 0
4812: PUSH
4813: LD_INT 0
4815: PUSH
4816: EMPTY
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: ST_TO_ADDR
// multi_points_conditions := [ ] ;
4826: LD_ADDR_EXP 31
4830: PUSH
4831: EMPTY
4832: ST_TO_ADDR
// end ;
4833: LD_VAR 0 1
4837: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
4838: LD_INT 0
4840: PPUSH
// if not multi_points or not side or side > 8 then
4841: LD_EXP 30
4845: NOT
4846: PUSH
4847: LD_VAR 0 1
4851: NOT
4852: OR
4853: PUSH
4854: LD_VAR 0 1
4858: PUSH
4859: LD_INT 8
4861: GREATER
4862: OR
4863: IFFALSE 4867
// exit ;
4865: GO 4904
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
4867: LD_ADDR_EXP 30
4871: PUSH
4872: LD_EXP 30
4876: PPUSH
4877: LD_VAR 0 1
4881: PPUSH
4882: LD_EXP 30
4886: PUSH
4887: LD_VAR 0 1
4891: ARRAY
4892: PUSH
4893: LD_VAR 0 2
4897: PLUS
4898: PPUSH
4899: CALL_OW 1
4903: ST_TO_ADDR
// end ;
4904: LD_VAR 0 3
4908: RET
// export function Multiplayer_GetPoints ( side ) ; begin
4909: LD_INT 0
4911: PPUSH
// if not multi_points or not side or side > 8 then
4912: LD_EXP 30
4916: NOT
4917: PUSH
4918: LD_VAR 0 1
4922: NOT
4923: OR
4924: PUSH
4925: LD_VAR 0 1
4929: PUSH
4930: LD_INT 8
4932: GREATER
4933: OR
4934: IFFALSE 4938
// exit ;
4936: GO 4954
// result := multi_points [ side ] ;
4938: LD_ADDR_VAR 0 2
4942: PUSH
4943: LD_EXP 30
4947: PUSH
4948: LD_VAR 0 1
4952: ARRAY
4953: ST_TO_ADDR
// end ;
4954: LD_VAR 0 2
4958: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
4959: LD_INT 0
4961: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
4962: LD_ADDR_EXP 31
4966: PUSH
4967: LD_EXP 31
4971: PPUSH
4972: LD_EXP 31
4976: PUSH
4977: LD_INT 1
4979: PLUS
4980: PPUSH
4981: LD_VAR 0 1
4985: PPUSH
4986: CALL_OW 1
4990: ST_TO_ADDR
// end ;
4991: LD_VAR 0 2
4995: RET
// export function Multiplayer_GetCondition ( id ) ; begin
4996: LD_INT 0
4998: PPUSH
// if not id then
4999: LD_VAR 0 1
5003: NOT
5004: IFFALSE 5008
// exit ;
5006: GO 5024
// result := multi_points_conditions [ id ] ;
5008: LD_ADDR_VAR 0 2
5012: PUSH
5013: LD_EXP 31
5017: PUSH
5018: LD_VAR 0 1
5022: ARRAY
5023: ST_TO_ADDR
// end ;
5024: LD_VAR 0 2
5028: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
5029: LD_INT 0
5031: PPUSH
5032: PPUSH
5033: PPUSH
5034: PPUSH
5035: PPUSH
// players := [ ] ;
5036: LD_ADDR_VAR 0 3
5040: PUSH
5041: EMPTY
5042: ST_TO_ADDR
// for i = 1 to 8 do
5043: LD_ADDR_VAR 0 4
5047: PUSH
5048: DOUBLE
5049: LD_INT 1
5051: DEC
5052: ST_TO_ADDR
5053: LD_INT 8
5055: PUSH
5056: FOR_TO
5057: IFFALSE 5116
// begin if i = side then
5059: LD_VAR 0 4
5063: PUSH
5064: LD_VAR 0 1
5068: EQUAL
5069: IFFALSE 5073
// continue ;
5071: GO 5056
// if multi_sides [ i ] and not multi_loosers [ i ] then
5073: LD_EXP 7
5077: PUSH
5078: LD_VAR 0 4
5082: ARRAY
5083: PUSH
5084: LD_EXP 25
5088: PUSH
5089: LD_VAR 0 4
5093: ARRAY
5094: NOT
5095: AND
5096: IFFALSE 5114
// players := players ^ i ;
5098: LD_ADDR_VAR 0 3
5102: PUSH
5103: LD_VAR 0 3
5107: PUSH
5108: LD_VAR 0 4
5112: ADD
5113: ST_TO_ADDR
// end ;
5114: GO 5056
5116: POP
5117: POP
// if not players then
5118: LD_VAR 0 3
5122: NOT
5123: IFFALSE 5127
// exit ;
5125: GO 5394
// if players = 1 then
5127: LD_VAR 0 3
5131: PUSH
5132: LD_INT 1
5134: EQUAL
5135: IFFALSE 5196
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
5137: LD_ADDR_VAR 0 4
5141: PUSH
5142: LD_INT 22
5144: PUSH
5145: LD_VAR 0 1
5149: PUSH
5150: EMPTY
5151: LIST
5152: LIST
5153: PUSH
5154: LD_INT 51
5156: PUSH
5157: EMPTY
5158: LIST
5159: PUSH
5160: EMPTY
5161: LIST
5162: LIST
5163: PPUSH
5164: CALL_OW 69
5168: PUSH
5169: FOR_IN
5170: IFFALSE 5192
// SetSide ( i , players [ 1 ] ) ;
5172: LD_VAR 0 4
5176: PPUSH
5177: LD_VAR 0 3
5181: PUSH
5182: LD_INT 1
5184: ARRAY
5185: PPUSH
5186: CALL_OW 235
5190: GO 5169
5192: POP
5193: POP
// end else
5194: GO 5394
// begin j := 1 ;
5196: LD_ADDR_VAR 0 5
5200: PUSH
5201: LD_INT 1
5203: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
5204: LD_ADDR_VAR 0 4
5208: PUSH
5209: LD_INT 22
5211: PUSH
5212: LD_VAR 0 1
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: PUSH
5221: LD_INT 2
5223: PUSH
5224: LD_INT 21
5226: PUSH
5227: LD_INT 1
5229: PUSH
5230: EMPTY
5231: LIST
5232: LIST
5233: PUSH
5234: LD_INT 51
5236: PUSH
5237: EMPTY
5238: LIST
5239: PUSH
5240: EMPTY
5241: LIST
5242: LIST
5243: PUSH
5244: LD_INT 21
5246: PUSH
5247: LD_INT 2
5249: PUSH
5250: EMPTY
5251: LIST
5252: LIST
5253: PUSH
5254: EMPTY
5255: LIST
5256: LIST
5257: LIST
5258: PUSH
5259: EMPTY
5260: LIST
5261: LIST
5262: PPUSH
5263: CALL_OW 69
5267: PUSH
5268: FOR_IN
5269: IFFALSE 5392
// begin SetSide ( i , players [ j ] ) ;
5271: LD_VAR 0 4
5275: PPUSH
5276: LD_VAR 0 3
5280: PUSH
5281: LD_VAR 0 5
5285: ARRAY
5286: PPUSH
5287: CALL_OW 235
// if IsDrivenBy ( i ) then
5291: LD_VAR 0 4
5295: PPUSH
5296: CALL_OW 311
5300: IFFALSE 5327
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
5302: LD_VAR 0 4
5306: PPUSH
5307: CALL_OW 311
5311: PPUSH
5312: LD_VAR 0 3
5316: PUSH
5317: LD_VAR 0 5
5321: ARRAY
5322: PPUSH
5323: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
5327: LD_VAR 0 4
5331: PPUSH
5332: CALL_OW 310
5336: PPUSH
5337: CALL_OW 247
5341: PUSH
5342: LD_INT 3
5344: EQUAL
5345: IFFALSE 5356
// ComExitBuilding ( i ) ;
5347: LD_VAR 0 4
5351: PPUSH
5352: CALL_OW 122
// j := j + 1 ;
5356: LD_ADDR_VAR 0 5
5360: PUSH
5361: LD_VAR 0 5
5365: PUSH
5366: LD_INT 1
5368: PLUS
5369: ST_TO_ADDR
// if j > players then
5370: LD_VAR 0 5
5374: PUSH
5375: LD_VAR 0 3
5379: GREATER
5380: IFFALSE 5390
// j := 1 ;
5382: LD_ADDR_VAR 0 5
5386: PUSH
5387: LD_INT 1
5389: ST_TO_ADDR
// end ;
5390: GO 5268
5392: POP
5393: POP
// end ; end ;
5394: LD_VAR 0 2
5398: RET
// export function Multiplayer_SpawnArtifact ( ) ; var i , pos ; begin
5399: LD_INT 0
5401: PPUSH
5402: PPUSH
5403: PPUSH
// i := 3 ;
5404: LD_ADDR_VAR 0 2
5408: PUSH
5409: LD_INT 3
5411: ST_TO_ADDR
// pos := [ [ 5 , 10 ] , [ 120 , 2 ] , [ 101 , 8 ] , [ 27 , 4 ] ] ;
5412: LD_ADDR_VAR 0 3
5416: PUSH
5417: LD_INT 5
5419: PUSH
5420: LD_INT 10
5422: PUSH
5423: EMPTY
5424: LIST
5425: LIST
5426: PUSH
5427: LD_INT 120
5429: PUSH
5430: LD_INT 2
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: PUSH
5437: LD_INT 101
5439: PUSH
5440: LD_INT 8
5442: PUSH
5443: EMPTY
5444: LIST
5445: LIST
5446: PUSH
5447: LD_INT 27
5449: PUSH
5450: LD_INT 4
5452: PUSH
5453: EMPTY
5454: LIST
5455: LIST
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 5 , pos [ i ] [ 1 ] , pos [ i ] [ 2 ] , false ) ;
5463: LD_INT 4
5465: PPUSH
5466: LD_INT 5
5468: PPUSH
5469: LD_VAR 0 3
5473: PUSH
5474: LD_VAR 0 2
5478: ARRAY
5479: PUSH
5480: LD_INT 1
5482: ARRAY
5483: PPUSH
5484: LD_VAR 0 3
5488: PUSH
5489: LD_VAR 0 2
5493: ARRAY
5494: PUSH
5495: LD_INT 2
5497: ARRAY
5498: PPUSH
5499: LD_INT 0
5501: PPUSH
5502: CALL_OW 58
// end ;
5506: LD_VAR 0 1
5510: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
5511: LD_INT 0
5513: PPUSH
// if not side or side > 8 then
5514: LD_VAR 0 1
5518: NOT
5519: PUSH
5520: LD_VAR 0 1
5524: PUSH
5525: LD_INT 8
5527: GREATER
5528: OR
5529: IFFALSE 5533
// exit ;
5531: GO 5550
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
5533: LD_VAR 0 1
5537: PPUSH
5538: LD_INT 6
5540: PPUSH
5541: CALL 4996 0 1
5545: PPUSH
5546: CALL 4838 0 2
// end ;
5550: LD_VAR 0 2
5554: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
5555: LD_INT 0
5557: PPUSH
// if not side or side > 8 then
5558: LD_VAR 0 1
5562: NOT
5563: PUSH
5564: LD_VAR 0 1
5568: PUSH
5569: LD_INT 8
5571: GREATER
5572: OR
5573: IFFALSE 5577
// exit ;
5575: GO 5594
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
5577: LD_VAR 0 1
5581: PPUSH
5582: LD_INT 4
5584: PPUSH
5585: CALL 4996 0 1
5589: PPUSH
5590: CALL 4838 0 2
// end ;
5594: LD_VAR 0 2
5598: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
5599: LD_INT 0
5601: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
5602: LD_VAR 0 1
5606: NOT
5607: PUSH
5608: LD_VAR 0 1
5612: PUSH
5613: LD_INT 8
5615: GREATER
5616: OR
5617: PUSH
5618: LD_VAR 0 2
5622: PUSH
5623: LD_INT 2
5625: PUSH
5626: LD_INT 6
5628: PUSH
5629: LD_INT 36
5631: PUSH
5632: LD_INT 0
5634: PUSH
5635: EMPTY
5636: LIST
5637: LIST
5638: LIST
5639: LIST
5640: IN
5641: NOT
5642: OR
5643: IFFALSE 5647
// exit ;
5645: GO 5664
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
5647: LD_VAR 0 1
5651: PPUSH
5652: LD_INT 3
5654: PPUSH
5655: CALL 4996 0 1
5659: PPUSH
5660: CALL 4838 0 2
// end ;
5664: LD_VAR 0 3
5668: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
5669: LD_INT 0
5671: PPUSH
5672: PPUSH
// if not un then
5673: LD_VAR 0 1
5677: NOT
5678: IFFALSE 5682
// exit ;
5680: GO 5728
// if not points then
5682: LD_VAR 0 3
5686: NOT
5687: IFFALSE 5704
// gained_points := Multiplayer_GetCondition ( 1 ) else
5689: LD_ADDR_VAR 0 5
5693: PUSH
5694: LD_INT 1
5696: PPUSH
5697: CALL 4996 0 1
5701: ST_TO_ADDR
5702: GO 5714
// gained_points := points ;
5704: LD_ADDR_VAR 0 5
5708: PUSH
5709: LD_VAR 0 3
5713: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) end ;
5714: LD_VAR 0 2
5718: PPUSH
5719: LD_VAR 0 5
5723: PPUSH
5724: CALL 4838 0 2
5728: LD_VAR 0 4
5732: RET
// export function MultiplayerEvent_ArtifactCaptured ( side ) ; begin
5733: LD_INT 0
5735: PPUSH
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 2 ) ) ;
5736: LD_VAR 0 1
5740: PPUSH
5741: LD_INT 2
5743: PPUSH
5744: CALL 4996 0 1
5748: PPUSH
5749: CALL 4838 0 2
// end ; end_of_file
5753: LD_VAR 0 2
5757: RET
// export Sikorski ; export amTech , amConstructList , amBuildings , amVehicles , amVehiclesAtttackers , amDrivers , amVehiclesCounter , amForce , amForceTmp , amMechSpawnCounter ; export function PrepareAmerican ( side ) ; var i , d , xy , un , un2 , skill , tmp , fac ; begin
5758: LD_INT 0
5760: PPUSH
5761: PPUSH
5762: PPUSH
5763: PPUSH
5764: PPUSH
5765: PPUSH
5766: PPUSH
5767: PPUSH
5768: PPUSH
// amTech := GetTechNation ( side , nation_american , state_enabled ) ;
5769: LD_ADDR_EXP 33
5773: PUSH
5774: LD_VAR 0 1
5778: PPUSH
5779: LD_INT 1
5781: PPUSH
5782: LD_INT 1
5784: PPUSH
5785: CALL 42482 0 3
5789: ST_TO_ADDR
// amConstructList := [ [ us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_light_gun ] ] ;
5790: LD_ADDR_EXP 34
5794: PUSH
5795: LD_INT 4
5797: PUSH
5798: LD_INT 1
5800: PUSH
5801: LD_INT 1
5803: PUSH
5804: LD_INT 6
5806: PUSH
5807: EMPTY
5808: LIST
5809: LIST
5810: LIST
5811: LIST
5812: PUSH
5813: LD_INT 3
5815: PUSH
5816: LD_INT 1
5818: PUSH
5819: LD_INT 1
5821: PUSH
5822: LD_INT 5
5824: PUSH
5825: EMPTY
5826: LIST
5827: LIST
5828: LIST
5829: LIST
5830: PUSH
5831: LD_INT 3
5833: PUSH
5834: LD_INT 1
5836: PUSH
5837: LD_INT 1
5839: PUSH
5840: LD_INT 4
5842: PUSH
5843: EMPTY
5844: LIST
5845: LIST
5846: LIST
5847: LIST
5848: PUSH
5849: LD_INT 2
5851: PUSH
5852: LD_INT 1
5854: PUSH
5855: LD_INT 1
5857: PUSH
5858: LD_INT 4
5860: PUSH
5861: EMPTY
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: PUSH
5867: LD_INT 2
5869: PUSH
5870: LD_INT 1
5872: PUSH
5873: LD_INT 1
5875: PUSH
5876: LD_INT 3
5878: PUSH
5879: EMPTY
5880: LIST
5881: LIST
5882: LIST
5883: LIST
5884: PUSH
5885: EMPTY
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: ST_TO_ADDR
// amBuildings := [ ] ;
5892: LD_ADDR_EXP 35
5896: PUSH
5897: EMPTY
5898: ST_TO_ADDR
// amVehicles := [ ] ;
5899: LD_ADDR_EXP 36
5903: PUSH
5904: EMPTY
5905: ST_TO_ADDR
// amVehiclesAtttackers := [ ] ;
5906: LD_ADDR_EXP 37
5910: PUSH
5911: EMPTY
5912: ST_TO_ADDR
// amDrivers := [ ] ;
5913: LD_ADDR_EXP 38
5917: PUSH
5918: EMPTY
5919: ST_TO_ADDR
// amVehiclesCounter := 2 ;
5920: LD_ADDR_EXP 39
5924: PUSH
5925: LD_INT 2
5927: ST_TO_ADDR
// amMechSpawnCounter := [ 6 , 8 , 10 ] [ Difficulty ] ;
5928: LD_ADDR_EXP 42
5932: PUSH
5933: LD_INT 6
5935: PUSH
5936: LD_INT 8
5938: PUSH
5939: LD_INT 10
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: LIST
5946: PUSH
5947: LD_OWVAR 67
5951: ARRAY
5952: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
5953: LD_ADDR_VAR 0 8
5957: PUSH
5958: LD_INT 3
5960: PUSH
5961: LD_INT 4
5963: PUSH
5964: LD_INT 5
5966: PUSH
5967: EMPTY
5968: LIST
5969: LIST
5970: LIST
5971: PUSH
5972: LD_OWVAR 67
5976: ARRAY
5977: ST_TO_ADDR
// uc_side := side ;
5978: LD_ADDR_OWVAR 20
5982: PUSH
5983: LD_VAR 0 1
5987: ST_TO_ADDR
// uc_nation := nation_american ;
5988: LD_ADDR_OWVAR 21
5992: PUSH
5993: LD_INT 1
5995: ST_TO_ADDR
// hc_gallery := us ;
5996: LD_ADDR_OWVAR 33
6000: PUSH
6001: LD_STRING us
6003: ST_TO_ADDR
// hc_face_number := 19 ;
6004: LD_ADDR_OWVAR 34
6008: PUSH
6009: LD_INT 19
6011: ST_TO_ADDR
// hc_importance := 100 ;
6012: LD_ADDR_OWVAR 32
6016: PUSH
6017: LD_INT 100
6019: ST_TO_ADDR
// hc_name := Sikorski ;
6020: LD_ADDR_OWVAR 26
6024: PUSH
6025: LD_STRING Sikorski
6027: ST_TO_ADDR
// hc_sex := sex_male ;
6028: LD_ADDR_OWVAR 27
6032: PUSH
6033: LD_INT 1
6035: ST_TO_ADDR
// hc_skills := [ 5 , 3 , 2 , 1 ] ;
6036: LD_ADDR_OWVAR 31
6040: PUSH
6041: LD_INT 5
6043: PUSH
6044: LD_INT 3
6046: PUSH
6047: LD_INT 2
6049: PUSH
6050: LD_INT 1
6052: PUSH
6053: EMPTY
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
6059: LD_ADDR_OWVAR 29
6063: PUSH
6064: LD_INT 10
6066: PUSH
6067: LD_INT 11
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: ST_TO_ADDR
// Sikorski := CreateHuman ;
6074: LD_ADDR_EXP 32
6078: PUSH
6079: CALL_OW 44
6083: ST_TO_ADDR
// PlaceHumanInUnit ( Sikorski , amDep ) ;
6084: LD_EXP 32
6088: PPUSH
6089: LD_INT 1
6091: PPUSH
6092: CALL_OW 52
// InitHC_All ( ) ;
6096: CALL_OW 584
// amForce := PrepareBase ( amDep , amBaseArea ,  , skill , [ 800 , 120 , 0 ] , [ [ 10 , 11 , 12 ] [ Difficulty ] , 4 , 6 , 3 ] ) ;
6100: LD_ADDR_EXP 40
6104: PUSH
6105: LD_INT 1
6107: PPUSH
6108: LD_INT 3
6110: PPUSH
6111: LD_STRING 
6113: PPUSH
6114: LD_VAR 0 8
6118: PPUSH
6119: LD_INT 800
6121: PUSH
6122: LD_INT 120
6124: PUSH
6125: LD_INT 0
6127: PUSH
6128: EMPTY
6129: LIST
6130: LIST
6131: LIST
6132: PPUSH
6133: LD_INT 10
6135: PUSH
6136: LD_INT 11
6138: PUSH
6139: LD_INT 12
6141: PUSH
6142: EMPTY
6143: LIST
6144: LIST
6145: LIST
6146: PUSH
6147: LD_OWVAR 67
6151: ARRAY
6152: PUSH
6153: LD_INT 4
6155: PUSH
6156: LD_INT 6
6158: PUSH
6159: LD_INT 3
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: LIST
6166: LIST
6167: PPUSH
6168: CALL 51080 0 6
6172: ST_TO_ADDR
// amForceTmp := [ ] ;
6173: LD_ADDR_EXP 41
6177: PUSH
6178: EMPTY
6179: ST_TO_ADDR
// if Difficulty = 3 then
6180: LD_OWVAR 67
6184: PUSH
6185: LD_INT 3
6187: EQUAL
6188: IFFALSE 6219
// begin bc_type := b_breastwork ;
6190: LD_ADDR_OWVAR 42
6194: PUSH
6195: LD_INT 31
6197: ST_TO_ADDR
// bc_level := 7 ;
6198: LD_ADDR_OWVAR 43
6202: PUSH
6203: LD_INT 7
6205: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 79 , 72 , 5 ) ;
6206: LD_INT 79
6208: PPUSH
6209: LD_INT 72
6211: PPUSH
6212: LD_INT 5
6214: PPUSH
6215: CALL_OW 47
// end ; for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_breastwork ] , [ f_not , [ f_inarea , amBaseArea ] ] , [ f_empty ] ] ) do
6219: LD_ADDR_VAR 0 3
6223: PUSH
6224: LD_INT 22
6226: PUSH
6227: LD_VAR 0 1
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: PUSH
6236: LD_INT 30
6238: PUSH
6239: LD_INT 31
6241: PUSH
6242: EMPTY
6243: LIST
6244: LIST
6245: PUSH
6246: LD_INT 3
6248: PUSH
6249: LD_INT 95
6251: PUSH
6252: LD_INT 3
6254: PUSH
6255: EMPTY
6256: LIST
6257: LIST
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: PUSH
6263: LD_INT 58
6265: PUSH
6266: EMPTY
6267: LIST
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: LIST
6273: LIST
6274: PPUSH
6275: CALL_OW 69
6279: PUSH
6280: FOR_IN
6281: IFFALSE 6410
// begin d := GetDir ( i ) ;
6283: LD_ADDR_VAR 0 4
6287: PUSH
6288: LD_VAR 0 3
6292: PPUSH
6293: CALL_OW 254
6297: ST_TO_ADDR
// if d < 3 then
6298: LD_VAR 0 4
6302: PUSH
6303: LD_INT 3
6305: LESS
6306: IFFALSE 6324
// d := d + 3 else
6308: LD_ADDR_VAR 0 4
6312: PUSH
6313: LD_VAR 0 4
6317: PUSH
6318: LD_INT 3
6320: PLUS
6321: ST_TO_ADDR
6322: GO 6338
// d := d - 3 ;
6324: LD_ADDR_VAR 0 4
6328: PUSH
6329: LD_VAR 0 4
6333: PUSH
6334: LD_INT 3
6336: MINUS
6337: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
6338: LD_INT 0
6340: PPUSH
6341: LD_VAR 0 8
6345: PPUSH
6346: CALL_OW 381
// un := CreateHuman ;
6350: LD_ADDR_VAR 0 6
6354: PUSH
6355: CALL_OW 44
6359: ST_TO_ADDR
// amForceTmp := Join ( amForceTmp , un ) ;
6360: LD_ADDR_EXP 41
6364: PUSH
6365: LD_EXP 41
6369: PPUSH
6370: LD_VAR 0 6
6374: PPUSH
6375: CALL 80110 0 2
6379: ST_TO_ADDR
// SetDir ( un , d ) ;
6380: LD_VAR 0 6
6384: PPUSH
6385: LD_VAR 0 4
6389: PPUSH
6390: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
6394: LD_VAR 0 6
6398: PPUSH
6399: LD_VAR 0 3
6403: PPUSH
6404: CALL_OW 52
// end ;
6408: GO 6280
6410: POP
6411: POP
// for i := 1 to 3 do
6412: LD_ADDR_VAR 0 3
6416: PUSH
6417: DOUBLE
6418: LD_INT 1
6420: DEC
6421: ST_TO_ADDR
6422: LD_INT 3
6424: PUSH
6425: FOR_TO
6426: IFFALSE 6487
// begin PrepareEngineer ( false , skill ) ;
6428: LD_INT 0
6430: PPUSH
6431: LD_VAR 0 8
6435: PPUSH
6436: CALL_OW 382
// un := CreateHuman ;
6440: LD_ADDR_VAR 0 6
6444: PUSH
6445: CALL_OW 44
6449: ST_TO_ADDR
// PlaceUnitArea ( un , amEngTmpArea , false ) ;
6450: LD_VAR 0 6
6454: PPUSH
6455: LD_INT 29
6457: PPUSH
6458: LD_INT 0
6460: PPUSH
6461: CALL_OW 49
// amForceTmp := Join ( amForceTmp , un ) ;
6465: LD_ADDR_EXP 41
6469: PUSH
6470: LD_EXP 41
6474: PPUSH
6475: LD_VAR 0 6
6479: PPUSH
6480: CALL 80110 0 2
6484: ST_TO_ADDR
// end ;
6485: GO 6425
6487: POP
6488: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
6489: LD_ADDR_VAR 0 3
6493: PUSH
6494: LD_INT 22
6496: PUSH
6497: LD_VAR 0 1
6501: PUSH
6502: EMPTY
6503: LIST
6504: LIST
6505: PUSH
6506: LD_INT 21
6508: PUSH
6509: LD_INT 3
6511: PUSH
6512: EMPTY
6513: LIST
6514: LIST
6515: PUSH
6516: EMPTY
6517: LIST
6518: LIST
6519: PPUSH
6520: CALL_OW 69
6524: PUSH
6525: FOR_IN
6526: IFFALSE 6559
// SetBLevel ( i , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
6528: LD_VAR 0 3
6532: PPUSH
6533: LD_INT 3
6535: PUSH
6536: LD_INT 5
6538: PUSH
6539: LD_INT 7
6541: PUSH
6542: EMPTY
6543: LIST
6544: LIST
6545: LIST
6546: PUSH
6547: LD_OWVAR 67
6551: ARRAY
6552: PPUSH
6553: CALL_OW 241
6557: GO 6525
6559: POP
6560: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
6561: LD_ADDR_VAR 0 3
6565: PUSH
6566: LD_INT 22
6568: PUSH
6569: LD_VAR 0 1
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: PUSH
6578: LD_INT 30
6580: PUSH
6581: LD_INT 32
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: PPUSH
6592: CALL_OW 69
6596: PUSH
6597: FOR_IN
6598: IFFALSE 6639
// PlaceWeaponTurret ( i , [ us_double_gun , us_gatling_gun , us_double_gun ] [ i mod 3 + 1 ] ) ;
6600: LD_VAR 0 3
6604: PPUSH
6605: LD_INT 5
6607: PUSH
6608: LD_INT 4
6610: PUSH
6611: LD_INT 5
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: LIST
6618: PUSH
6619: LD_VAR 0 3
6623: PUSH
6624: LD_INT 3
6626: MOD
6627: PUSH
6628: LD_INT 1
6630: PLUS
6631: ARRAY
6632: PPUSH
6633: CALL_OW 431
6637: GO 6597
6639: POP
6640: POP
// end ;
6641: LD_VAR 0 2
6645: RET
// function BaseScript ( side , base , area , outerArea , forces , healPoint , parkingPoint ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
6646: LD_INT 0
6648: PPUSH
6649: PPUSH
6650: PPUSH
6651: PPUSH
6652: PPUSH
6653: PPUSH
6654: PPUSH
6655: PPUSH
6656: PPUSH
6657: PPUSH
6658: PPUSH
6659: PPUSH
6660: PPUSH
6661: PPUSH
6662: PPUSH
6663: PPUSH
6664: PPUSH
6665: PPUSH
6666: PPUSH
6667: PPUSH
6668: PPUSH
6669: PPUSH
6670: PPUSH
6671: PPUSH
6672: PPUSH
6673: PPUSH
6674: PPUSH
// enable ;
6675: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
6676: LD_ADDR_VAR 0 10
6680: PUSH
6681: LD_INT 81
6683: PUSH
6684: LD_VAR 0 1
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: PPUSH
6693: CALL_OW 69
6697: ST_TO_ADDR
// if tmp then
6698: LD_VAR 0 10
6702: IFFALSE 6723
// enemySide := GetSide ( tmp [ 1 ] ) ;
6704: LD_ADDR_VAR 0 34
6708: PUSH
6709: LD_VAR 0 10
6713: PUSH
6714: LD_INT 1
6716: ARRAY
6717: PPUSH
6718: CALL_OW 255
6722: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
6723: LD_ADDR_VAR 0 22
6727: PUSH
6728: LD_VAR 0 3
6732: PPUSH
6733: LD_INT 81
6735: PUSH
6736: LD_VAR 0 1
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: PPUSH
6745: CALL_OW 70
6749: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
6750: LD_ADDR_VAR 0 23
6754: PUSH
6755: LD_VAR 0 4
6759: PPUSH
6760: LD_INT 81
6762: PUSH
6763: LD_VAR 0 1
6767: PUSH
6768: EMPTY
6769: LIST
6770: LIST
6771: PPUSH
6772: CALL_OW 70
6776: ST_TO_ADDR
// vehicles := amVehicles ;
6777: LD_ADDR_VAR 0 26
6781: PUSH
6782: LD_EXP 36
6786: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6787: LD_ADDR_VAR 0 32
6791: PUSH
6792: LD_VAR 0 3
6796: PPUSH
6797: LD_INT 22
6799: PUSH
6800: LD_VAR 0 1
6804: PUSH
6805: EMPTY
6806: LIST
6807: LIST
6808: PUSH
6809: LD_INT 2
6811: PUSH
6812: LD_INT 30
6814: PUSH
6815: LD_INT 0
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: PUSH
6822: LD_INT 30
6824: PUSH
6825: LD_INT 1
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: LIST
6836: PUSH
6837: EMPTY
6838: LIST
6839: LIST
6840: PPUSH
6841: CALL_OW 70
6845: ST_TO_ADDR
// if depot then
6846: LD_VAR 0 32
6850: IFFALSE 6866
// depot := depot [ 1 ] ;
6852: LD_ADDR_VAR 0 32
6856: PUSH
6857: LD_VAR 0 32
6861: PUSH
6862: LD_INT 1
6864: ARRAY
6865: ST_TO_ADDR
// if amTech then
6866: LD_EXP 33
6870: IFFALSE 7029
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
6872: LD_ADDR_VAR 0 12
6876: PUSH
6877: LD_VAR 0 3
6881: PPUSH
6882: LD_INT 22
6884: PUSH
6885: LD_VAR 0 1
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: PUSH
6894: LD_INT 50
6896: PUSH
6897: EMPTY
6898: LIST
6899: PUSH
6900: LD_INT 2
6902: PUSH
6903: LD_INT 30
6905: PUSH
6906: LD_INT 6
6908: PUSH
6909: EMPTY
6910: LIST
6911: LIST
6912: PUSH
6913: LD_INT 30
6915: PUSH
6916: LD_INT 7
6918: PUSH
6919: EMPTY
6920: LIST
6921: LIST
6922: PUSH
6923: LD_INT 30
6925: PUSH
6926: LD_INT 8
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: LIST
6943: PPUSH
6944: CALL_OW 70
6948: ST_TO_ADDR
// if lab then
6949: LD_VAR 0 12
6953: IFFALSE 7029
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
6955: LD_VAR 0 12
6959: PUSH
6960: LD_INT 1
6962: ARRAY
6963: PPUSH
6964: CALL_OW 461
6968: PUSH
6969: LD_INT 2
6971: EQUAL
6972: IFFALSE 7029
// begin for i in amTech do
6974: LD_ADDR_VAR 0 9
6978: PUSH
6979: LD_EXP 33
6983: PUSH
6984: FOR_IN
6985: IFFALSE 7027
// if CanBeResearched ( lab [ 1 ] , i ) then
6987: LD_VAR 0 12
6991: PUSH
6992: LD_INT 1
6994: ARRAY
6995: PPUSH
6996: LD_VAR 0 9
7000: PPUSH
7001: CALL_OW 430
7005: IFFALSE 7025
// begin AddComResearch ( lab [ 1 ] , i ) ;
7007: LD_VAR 0 12
7011: PUSH
7012: LD_INT 1
7014: ARRAY
7015: PPUSH
7016: LD_VAR 0 9
7020: PPUSH
7021: CALL_OW 184
// end ;
7025: GO 6984
7027: POP
7028: POP
// end ; end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
7029: LD_ADDR_VAR 0 29
7033: PUSH
7034: LD_VAR 0 3
7038: PPUSH
7039: LD_INT 22
7041: PUSH
7042: LD_VAR 0 1
7046: PUSH
7047: EMPTY
7048: LIST
7049: LIST
7050: PUSH
7051: LD_INT 30
7053: PUSH
7054: LD_INT 3
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: PUSH
7061: LD_INT 50
7063: PUSH
7064: EMPTY
7065: LIST
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: LIST
7071: PPUSH
7072: CALL_OW 70
7076: ST_TO_ADDR
// if fac then
7077: LD_VAR 0 29
7081: IFFALSE 7416
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
7083: LD_VAR 0 29
7087: PUSH
7088: LD_INT 1
7090: ARRAY
7091: PPUSH
7092: CALL_OW 461
7096: PUSH
7097: LD_INT 2
7099: EQUAL
7100: IFFALSE 7416
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
7102: LD_ADDR_VAR 0 30
7106: PUSH
7107: LD_VAR 0 3
7111: PPUSH
7112: LD_INT 2
7114: PUSH
7115: LD_INT 30
7117: PUSH
7118: LD_INT 32
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PUSH
7125: LD_INT 30
7127: PUSH
7128: LD_INT 33
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: LIST
7139: PUSH
7140: LD_INT 35
7142: PUSH
7143: LD_INT 0
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: PUSH
7150: EMPTY
7151: LIST
7152: LIST
7153: PPUSH
7154: CALL_OW 70
7158: ST_TO_ADDR
// if emptyTowers then
7159: LD_VAR 0 30
7163: IFFALSE 7213
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
7165: LD_ADDR_VAR 0 31
7169: PUSH
7170: LD_VAR 0 30
7174: PUSH
7175: LD_INT 1
7177: ARRAY
7178: PPUSH
7179: LD_VAR 0 3
7183: PPUSH
7184: CALL 52766 0 2
7188: ST_TO_ADDR
// if weapon then
7189: LD_VAR 0 31
7193: IFFALSE 7213
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
7195: LD_VAR 0 30
7199: PUSH
7200: LD_INT 1
7202: ARRAY
7203: PPUSH
7204: LD_VAR 0 31
7208: PPUSH
7209: CALL_OW 148
// end ; if amConstructList then
7213: LD_EXP 34
7217: IFFALSE 7416
// for i := 1 to Count ( amConstructList ) do
7219: LD_ADDR_VAR 0 9
7223: PUSH
7224: DOUBLE
7225: LD_INT 1
7227: DEC
7228: ST_TO_ADDR
7229: LD_EXP 34
7233: PPUSH
7234: CALL 44521 0 1
7238: PUSH
7239: FOR_TO
7240: IFFALSE 7414
// begin if CanBeConstructed ( fac [ 1 ] , amConstructList [ i ] [ 1 ] , amConstructList [ i ] [ 2 ] , amConstructList [ i ] [ 3 ] , amConstructList [ i ] [ 4 ] ) then
7242: LD_VAR 0 29
7246: PUSH
7247: LD_INT 1
7249: ARRAY
7250: PPUSH
7251: LD_EXP 34
7255: PUSH
7256: LD_VAR 0 9
7260: ARRAY
7261: PUSH
7262: LD_INT 1
7264: ARRAY
7265: PPUSH
7266: LD_EXP 34
7270: PUSH
7271: LD_VAR 0 9
7275: ARRAY
7276: PUSH
7277: LD_INT 2
7279: ARRAY
7280: PPUSH
7281: LD_EXP 34
7285: PUSH
7286: LD_VAR 0 9
7290: ARRAY
7291: PUSH
7292: LD_INT 3
7294: ARRAY
7295: PPUSH
7296: LD_EXP 34
7300: PUSH
7301: LD_VAR 0 9
7305: ARRAY
7306: PUSH
7307: LD_INT 4
7309: ARRAY
7310: PPUSH
7311: CALL_OW 448
7315: IFFALSE 7412
// begin ComConstruct ( fac [ 1 ] , amConstructList [ i ] [ 1 ] , amConstructList [ i ] [ 2 ] , amConstructList [ i ] [ 3 ] , amConstructList [ i ] [ 4 ] ) ;
7317: LD_VAR 0 29
7321: PUSH
7322: LD_INT 1
7324: ARRAY
7325: PPUSH
7326: LD_EXP 34
7330: PUSH
7331: LD_VAR 0 9
7335: ARRAY
7336: PUSH
7337: LD_INT 1
7339: ARRAY
7340: PPUSH
7341: LD_EXP 34
7345: PUSH
7346: LD_VAR 0 9
7350: ARRAY
7351: PUSH
7352: LD_INT 2
7354: ARRAY
7355: PPUSH
7356: LD_EXP 34
7360: PUSH
7361: LD_VAR 0 9
7365: ARRAY
7366: PUSH
7367: LD_INT 3
7369: ARRAY
7370: PPUSH
7371: LD_EXP 34
7375: PUSH
7376: LD_VAR 0 9
7380: ARRAY
7381: PUSH
7382: LD_INT 4
7384: ARRAY
7385: PPUSH
7386: CALL_OW 125
// amConstructList := Delete ( amConstructList , i ) ;
7390: LD_ADDR_EXP 34
7394: PUSH
7395: LD_EXP 34
7399: PPUSH
7400: LD_VAR 0 9
7404: PPUSH
7405: CALL_OW 3
7409: ST_TO_ADDR
// break ;
7410: GO 7414
// end ; end ;
7412: GO 7239
7414: POP
7415: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7416: LD_ADDR_VAR 0 10
7420: PUSH
7421: LD_VAR 0 3
7425: PPUSH
7426: LD_INT 21
7428: PUSH
7429: LD_INT 3
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: PUSH
7436: LD_INT 3
7438: PUSH
7439: LD_INT 57
7441: PUSH
7442: EMPTY
7443: LIST
7444: PUSH
7445: EMPTY
7446: LIST
7447: LIST
7448: PUSH
7449: LD_INT 3
7451: PUSH
7452: LD_INT 24
7454: PUSH
7455: LD_INT 1000
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: PUSH
7466: EMPTY
7467: LIST
7468: LIST
7469: LIST
7470: PPUSH
7471: CALL_OW 70
7475: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
7476: LD_ADDR_VAR 0 17
7480: PUSH
7481: LD_VAR 0 3
7485: PPUSH
7486: CALL_OW 435
7490: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
7491: LD_ADDR_VAR 0 14
7495: PUSH
7496: LD_VAR 0 5
7500: PPUSH
7501: LD_INT 25
7503: PUSH
7504: LD_INT 3
7506: PUSH
7507: EMPTY
7508: LIST
7509: LIST
7510: PUSH
7511: LD_INT 50
7513: PUSH
7514: EMPTY
7515: LIST
7516: PUSH
7517: EMPTY
7518: LIST
7519: LIST
7520: PPUSH
7521: CALL_OW 72
7525: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
7526: LD_VAR 0 14
7530: PPUSH
7531: LD_INT 3
7533: PUSH
7534: LD_INT 120
7536: PUSH
7537: LD_INT 7
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PUSH
7548: LD_INT 3
7550: PUSH
7551: LD_INT 54
7553: PUSH
7554: EMPTY
7555: LIST
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: PUSH
7561: EMPTY
7562: LIST
7563: LIST
7564: PPUSH
7565: CALL_OW 72
7569: PUSH
7570: LD_VAR 0 29
7574: PUSH
7575: LD_INT 1
7577: ARRAY
7578: PPUSH
7579: CALL_OW 302
7583: AND
7584: IFFALSE 7643
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
7586: LD_VAR 0 14
7590: PPUSH
7591: LD_INT 3
7593: PUSH
7594: LD_INT 120
7596: PUSH
7597: LD_INT 7
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: PUSH
7608: LD_INT 3
7610: PUSH
7611: LD_INT 54
7613: PUSH
7614: EMPTY
7615: LIST
7616: PUSH
7617: EMPTY
7618: LIST
7619: LIST
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: PPUSH
7625: CALL_OW 72
7629: PPUSH
7630: LD_VAR 0 29
7634: PUSH
7635: LD_INT 1
7637: ARRAY
7638: PPUSH
7639: CALL_OW 120
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
7643: LD_ADDR_VAR 0 18
7647: PUSH
7648: LD_VAR 0 5
7652: PPUSH
7653: LD_INT 25
7655: PUSH
7656: LD_INT 4
7658: PUSH
7659: EMPTY
7660: LIST
7661: LIST
7662: PUSH
7663: LD_INT 50
7665: PUSH
7666: EMPTY
7667: LIST
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: PPUSH
7673: CALL_OW 72
7677: ST_TO_ADDR
// lab := FilterUnitsInarea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
7678: LD_ADDR_VAR 0 12
7682: PUSH
7683: LD_VAR 0 3
7687: PPUSH
7688: LD_INT 2
7690: PUSH
7691: LD_INT 30
7693: PUSH
7694: LD_INT 6
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: PUSH
7701: LD_INT 30
7703: PUSH
7704: LD_INT 7
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: PUSH
7711: LD_INT 30
7713: PUSH
7714: LD_INT 8
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: PUSH
7721: EMPTY
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: PPUSH
7727: CALL_OW 70
7731: ST_TO_ADDR
// if sci then
7732: LD_VAR 0 18
7736: IFFALSE 7897
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
7738: LD_ADDR_VAR 0 20
7742: PUSH
7743: LD_VAR 0 5
7747: PPUSH
7748: LD_INT 95
7750: PUSH
7751: LD_VAR 0 3
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: PUSH
7760: LD_INT 120
7762: PUSH
7763: LD_INT 1
7765: PUSH
7766: EMPTY
7767: LIST
7768: LIST
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: PPUSH
7774: CALL_OW 72
7778: ST_TO_ADDR
// if hurtUnits then
7779: LD_VAR 0 20
7783: IFFALSE 7844
// begin for i in sci do
7785: LD_ADDR_VAR 0 9
7789: PUSH
7790: LD_VAR 0 18
7794: PUSH
7795: FOR_IN
7796: IFFALSE 7840
// if IsInUnit ( i ) then
7798: LD_VAR 0 9
7802: PPUSH
7803: CALL_OW 310
7807: IFFALSE 7820
// ComExitBuilding ( i ) else
7809: LD_VAR 0 9
7813: PPUSH
7814: CALL_OW 122
7818: GO 7838
// ComHeal ( i , hurtUnits [ 1 ] ) ;
7820: LD_VAR 0 9
7824: PPUSH
7825: LD_VAR 0 20
7829: PUSH
7830: LD_INT 1
7832: ARRAY
7833: PPUSH
7834: CALL_OW 128
7838: GO 7795
7840: POP
7841: POP
// end else
7842: GO 7897
// if lab then
7844: LD_VAR 0 12
7848: IFFALSE 7897
// begin for i in sci do
7850: LD_ADDR_VAR 0 9
7854: PUSH
7855: LD_VAR 0 18
7859: PUSH
7860: FOR_IN
7861: IFFALSE 7895
// if not IsInUnit ( i ) then
7863: LD_VAR 0 9
7867: PPUSH
7868: CALL_OW 310
7872: NOT
7873: IFFALSE 7893
// ComEnterUnit ( i , lab [ 1 ] ) ;
7875: LD_VAR 0 9
7879: PPUSH
7880: LD_VAR 0 12
7884: PUSH
7885: LD_INT 1
7887: ARRAY
7888: PPUSH
7889: CALL_OW 120
7893: GO 7860
7895: POP
7896: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
7897: LD_ADDR_VAR 0 13
7901: PUSH
7902: LD_VAR 0 5
7906: PPUSH
7907: LD_INT 25
7909: PUSH
7910: LD_INT 2
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: PPUSH
7917: CALL_OW 72
7921: ST_TO_ADDR
// buildingsToBuild := amBuildings ;
7922: LD_ADDR_VAR 0 33
7926: PUSH
7927: LD_EXP 35
7931: ST_TO_ADDR
// if eng then
7932: LD_VAR 0 13
7936: IFFALSE 8770
// begin for i in eng do
7938: LD_ADDR_VAR 0 9
7942: PUSH
7943: LD_VAR 0 13
7947: PUSH
7948: FOR_IN
7949: IFFALSE 8768
// begin tag := GetTag ( i ) ;
7951: LD_ADDR_VAR 0 15
7955: PUSH
7956: LD_VAR 0 9
7960: PPUSH
7961: CALL_OW 110
7965: ST_TO_ADDR
// if IsInarea ( i , outerarea ) then
7966: LD_VAR 0 9
7970: PPUSH
7971: LD_VAR 0 4
7975: PPUSH
7976: CALL_OW 308
7980: IFFALSE 8011
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
7982: LD_VAR 0 9
7986: PPUSH
7987: LD_VAR 0 7
7991: PUSH
7992: LD_INT 1
7994: ARRAY
7995: PPUSH
7996: LD_VAR 0 7
8000: PUSH
8001: LD_INT 2
8003: ARRAY
8004: PPUSH
8005: CALL_OW 111
// continue ;
8009: GO 7948
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
8011: LD_VAR 0 9
8015: PPUSH
8016: CALL_OW 256
8020: PUSH
8021: LD_INT 800
8023: LESS
8024: PUSH
8025: LD_VAR 0 15
8029: PUSH
8030: LD_INT 1
8032: NONEQUAL
8033: AND
8034: IFFALSE 8084
// begin SetTag ( i , tHeal ) ;
8036: LD_VAR 0 9
8040: PPUSH
8041: LD_INT 1
8043: PPUSH
8044: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
8048: LD_VAR 0 9
8052: PPUSH
8053: LD_VAR 0 6
8057: PUSH
8058: LD_INT 1
8060: ARRAY
8061: PPUSH
8062: LD_VAR 0 6
8066: PUSH
8067: LD_INT 2
8069: ARRAY
8070: PPUSH
8071: CALL_OW 111
// AddComHold ( i ) ;
8075: LD_VAR 0 9
8079: PPUSH
8080: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
8084: LD_VAR 0 15
8088: PUSH
8089: LD_INT 1
8091: EQUAL
8092: PUSH
8093: LD_VAR 0 9
8097: PPUSH
8098: CALL_OW 256
8102: PUSH
8103: LD_INT 1000
8105: EQUAL
8106: AND
8107: IFFALSE 8121
// SetTag ( i , 0 ) ;
8109: LD_VAR 0 9
8113: PPUSH
8114: LD_INT 0
8116: PPUSH
8117: CALL_OW 109
// if not tag then
8121: LD_VAR 0 15
8125: NOT
8126: IFFALSE 8293
// begin undone := FilterUnitsInarea ( area , [ f_constructed ] ) ;
8128: LD_ADDR_VAR 0 11
8132: PUSH
8133: LD_VAR 0 3
8137: PPUSH
8138: LD_INT 57
8140: PUSH
8141: EMPTY
8142: LIST
8143: PPUSH
8144: CALL_OW 70
8148: ST_TO_ADDR
// if undone then
8149: LD_VAR 0 11
8153: IFFALSE 8175
// begin ComComplete ( i , undone [ 1 ] ) ;
8155: LD_VAR 0 9
8159: PPUSH
8160: LD_VAR 0 11
8164: PUSH
8165: LD_INT 1
8167: ARRAY
8168: PPUSH
8169: CALL 50619 0 2
// continue ;
8173: GO 7948
// end ; if cr or tmp or buildingsToBuild then
8175: LD_VAR 0 17
8179: PUSH
8180: LD_VAR 0 10
8184: OR
8185: PUSH
8186: LD_VAR 0 33
8190: OR
8191: IFFALSE 8267
// begin if IsInUnit ( i ) then
8193: LD_VAR 0 9
8197: PPUSH
8198: CALL_OW 310
8202: IFFALSE 8213
// ComExitBuilding ( i ) ;
8204: LD_VAR 0 9
8208: PPUSH
8209: CALL_OW 122
// if tmp then
8213: LD_VAR 0 10
8217: IFFALSE 8233
// SetTag ( i , tRepair ) else
8219: LD_VAR 0 9
8223: PPUSH
8224: LD_INT 3
8226: PPUSH
8227: CALL_OW 109
8231: GO 8265
// if cr then
8233: LD_VAR 0 17
8237: IFFALSE 8253
// SetTag ( i , tCrates ) else
8239: LD_VAR 0 9
8243: PPUSH
8244: LD_INT 2
8246: PPUSH
8247: CALL_OW 109
8251: GO 8265
// SetTag ( i , tBuild ) ;
8253: LD_VAR 0 9
8257: PPUSH
8258: LD_INT 5
8260: PPUSH
8261: CALL_OW 109
// end else
8265: GO 8293
// if not IsInUnit ( i ) then
8267: LD_VAR 0 9
8271: PPUSH
8272: CALL_OW 310
8276: NOT
8277: IFFALSE 8293
// ComEnterUnit ( i , depot ) ;
8279: LD_VAR 0 9
8283: PPUSH
8284: LD_VAR 0 32
8288: PPUSH
8289: CALL_OW 120
// end ; if tag = tRepair then
8293: LD_VAR 0 15
8297: PUSH
8298: LD_INT 3
8300: EQUAL
8301: IFFALSE 8407
// begin if IsInUnit ( i ) then
8303: LD_VAR 0 9
8307: PPUSH
8308: CALL_OW 310
8312: IFFALSE 8325
// begin ComExitBuilding ( i ) ;
8314: LD_VAR 0 9
8318: PPUSH
8319: CALL_OW 122
// continue ;
8323: GO 7948
// end ; if not tmp then
8325: LD_VAR 0 10
8329: NOT
8330: IFFALSE 8346
// begin SetTag ( i , 0 ) ;
8332: LD_VAR 0 9
8336: PPUSH
8337: LD_INT 0
8339: PPUSH
8340: CALL_OW 109
// continue ;
8344: GO 7948
// end ; if not HasTask ( i ) then
8346: LD_VAR 0 9
8350: PPUSH
8351: CALL_OW 314
8355: NOT
8356: IFFALSE 8376
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
8358: LD_VAR 0 9
8362: PPUSH
8363: LD_VAR 0 10
8367: PUSH
8368: LD_INT 1
8370: ARRAY
8371: PPUSH
8372: CALL_OW 130
// if not IsInarea ( i , area ) then
8376: LD_VAR 0 9
8380: PPUSH
8381: LD_VAR 0 3
8385: PPUSH
8386: CALL_OW 308
8390: NOT
8391: IFFALSE 8407
// ComMoveToarea ( i , area ) ;
8393: LD_VAR 0 9
8397: PPUSH
8398: LD_VAR 0 3
8402: PPUSH
8403: CALL_OW 113
// end ; if tag = tBuild then
8407: LD_VAR 0 15
8411: PUSH
8412: LD_INT 5
8414: EQUAL
8415: IFFALSE 8621
// begin if IsInUnit ( i ) then
8417: LD_VAR 0 9
8421: PPUSH
8422: CALL_OW 310
8426: IFFALSE 8439
// begin ComExitBuilding ( i ) ;
8428: LD_VAR 0 9
8432: PPUSH
8433: CALL_OW 122
// continue ;
8437: GO 7948
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
8439: LD_VAR 0 33
8443: NOT
8444: PUSH
8445: LD_VAR 0 22
8449: OR
8450: PUSH
8451: LD_VAR 0 23
8455: OR
8456: IFFALSE 8474
// begin SetTag ( i , 0 ) ;
8458: LD_VAR 0 9
8462: PPUSH
8463: LD_INT 0
8465: PPUSH
8466: CALL_OW 109
// continue ;
8470: GO 7948
// end else
8472: GO 8513
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
8474: LD_VAR 0 32
8478: PPUSH
8479: LD_VAR 0 33
8483: PUSH
8484: LD_INT 1
8486: ARRAY
8487: PUSH
8488: LD_INT 1
8490: ARRAY
8491: PPUSH
8492: CALL 84033 0 2
8496: NOT
8497: IFFALSE 8513
// begin SetTag ( i , 0 ) ;
8499: LD_VAR 0 9
8503: PPUSH
8504: LD_INT 0
8506: PPUSH
8507: CALL_OW 109
// continue ;
8511: GO 7948
// end ; undone := FilterUnitsInarea ( area , [ f_constructed ] ) ;
8513: LD_ADDR_VAR 0 11
8517: PUSH
8518: LD_VAR 0 3
8522: PPUSH
8523: LD_INT 57
8525: PUSH
8526: EMPTY
8527: LIST
8528: PPUSH
8529: CALL_OW 70
8533: ST_TO_ADDR
// if undone then
8534: LD_VAR 0 11
8538: IFFALSE 8560
// begin ComComplete ( i , undone [ 1 ] ) ;
8540: LD_VAR 0 9
8544: PPUSH
8545: LD_VAR 0 11
8549: PUSH
8550: LD_INT 1
8552: ARRAY
8553: PPUSH
8554: CALL 50619 0 2
// continue ;
8558: GO 7948
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
8560: LD_VAR 0 9
8564: PPUSH
8565: LD_VAR 0 33
8569: PUSH
8570: LD_INT 1
8572: ARRAY
8573: PUSH
8574: LD_INT 1
8576: ARRAY
8577: PPUSH
8578: LD_VAR 0 33
8582: PUSH
8583: LD_INT 1
8585: ARRAY
8586: PUSH
8587: LD_INT 2
8589: ARRAY
8590: PPUSH
8591: LD_VAR 0 33
8595: PUSH
8596: LD_INT 1
8598: ARRAY
8599: PUSH
8600: LD_INT 3
8602: ARRAY
8603: PPUSH
8604: LD_VAR 0 33
8608: PUSH
8609: LD_INT 1
8611: ARRAY
8612: PUSH
8613: LD_INT 4
8615: ARRAY
8616: PPUSH
8617: CALL_OW 145
// end ; if tag = tCrates then
8621: LD_VAR 0 15
8625: PUSH
8626: LD_INT 2
8628: EQUAL
8629: IFFALSE 8766
// begin if IsInUnit ( i ) then
8631: LD_VAR 0 9
8635: PPUSH
8636: CALL_OW 310
8640: IFFALSE 8653
// begin ComExitBuilding ( i ) ;
8642: LD_VAR 0 9
8646: PPUSH
8647: CALL_OW 122
// continue ;
8651: GO 7948
// end ; if not cr then
8653: LD_VAR 0 17
8657: NOT
8658: IFFALSE 8674
// begin SetTag ( i , 0 ) ;
8660: LD_VAR 0 9
8664: PPUSH
8665: LD_INT 0
8667: PPUSH
8668: CALL_OW 109
// continue ;
8672: GO 7948
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
8674: LD_VAR 0 9
8678: PPUSH
8679: CALL_OW 314
8683: NOT
8684: PUSH
8685: LD_INT 81
8687: PUSH
8688: LD_VAR 0 1
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: PUSH
8697: LD_INT 92
8699: PUSH
8700: LD_VAR 0 17
8704: PUSH
8705: LD_INT 1
8707: ARRAY
8708: PUSH
8709: LD_VAR 0 17
8713: PUSH
8714: LD_INT 2
8716: ARRAY
8717: PUSH
8718: LD_INT 12
8720: PUSH
8721: EMPTY
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: PPUSH
8731: CALL_OW 69
8735: NOT
8736: AND
8737: IFFALSE 8766
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
8739: LD_VAR 0 9
8743: PPUSH
8744: LD_VAR 0 17
8748: PUSH
8749: LD_INT 1
8751: ARRAY
8752: PPUSH
8753: LD_VAR 0 17
8757: PUSH
8758: LD_INT 2
8760: ARRAY
8761: PPUSH
8762: CALL_OW 117
// end ; end ;
8766: GO 7948
8768: POP
8769: POP
// end ; if vehicles then
8770: LD_VAR 0 26
8774: IFFALSE 9574
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , us_cargo_bay ] ] ] , [ f_ok ] ] ) ;
8776: LD_ADDR_VAR 0 26
8780: PUSH
8781: LD_VAR 0 26
8785: PPUSH
8786: LD_INT 3
8788: PUSH
8789: LD_INT 2
8791: PUSH
8792: LD_INT 34
8794: PUSH
8795: LD_INT 13
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: PUSH
8802: LD_INT 34
8804: PUSH
8805: LD_INT 12
8807: PUSH
8808: EMPTY
8809: LIST
8810: LIST
8811: PUSH
8812: EMPTY
8813: LIST
8814: LIST
8815: LIST
8816: PUSH
8817: EMPTY
8818: LIST
8819: LIST
8820: PUSH
8821: LD_INT 50
8823: PUSH
8824: EMPTY
8825: LIST
8826: PUSH
8827: EMPTY
8828: LIST
8829: LIST
8830: PPUSH
8831: CALL_OW 72
8835: ST_TO_ADDR
// if vehicles then
8836: LD_VAR 0 26
8840: IFFALSE 9574
// begin for i in vehicles do
8842: LD_ADDR_VAR 0 9
8846: PUSH
8847: LD_VAR 0 26
8851: PUSH
8852: FOR_IN
8853: IFFALSE 9572
// begin tag := GetTag ( i ) ;
8855: LD_ADDR_VAR 0 15
8859: PUSH
8860: LD_VAR 0 9
8864: PPUSH
8865: CALL_OW 110
8869: ST_TO_ADDR
// if not tag then
8870: LD_VAR 0 15
8874: NOT
8875: IFFALSE 9021
// begin if GetControl ( i ) = control_manual then
8877: LD_VAR 0 9
8881: PPUSH
8882: CALL_OW 263
8886: PUSH
8887: LD_INT 1
8889: EQUAL
8890: IFFALSE 9007
// begin drivers := amDrivers ;
8892: LD_ADDR_VAR 0 24
8896: PUSH
8897: LD_EXP 38
8901: ST_TO_ADDR
// if not drivers then
8902: LD_VAR 0 24
8906: NOT
8907: IFFALSE 8987
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
8909: LD_ADDR_VAR 0 24
8913: PUSH
8914: LD_VAR 0 14
8918: PPUSH
8919: LD_INT 3
8921: PUSH
8922: LD_INT 120
8924: PUSH
8925: LD_INT 7
8927: PUSH
8928: EMPTY
8929: LIST
8930: LIST
8931: PUSH
8932: EMPTY
8933: LIST
8934: LIST
8935: PPUSH
8936: CALL_OW 72
8940: ST_TO_ADDR
// if drivers then
8941: LD_VAR 0 24
8945: IFFALSE 8987
// begin SetTag ( drivers [ 1 ] , tMech ) ;
8947: LD_VAR 0 24
8951: PUSH
8952: LD_INT 1
8954: ARRAY
8955: PPUSH
8956: LD_INT 7
8958: PPUSH
8959: CALL_OW 109
// amDrivers := Join ( amDrivers , drivers [ 1 ] ) ;
8963: LD_ADDR_EXP 38
8967: PUSH
8968: LD_EXP 38
8972: PPUSH
8973: LD_VAR 0 24
8977: PUSH
8978: LD_INT 1
8980: ARRAY
8981: PPUSH
8982: CALL 80110 0 2
8986: ST_TO_ADDR
// end ; end ; if drivers then
8987: LD_VAR 0 24
8991: IFFALSE 9005
// SetTag ( i , tBusy ) ;
8993: LD_VAR 0 9
8997: PPUSH
8998: LD_INT 8
9000: PPUSH
9001: CALL_OW 109
// continue ;
9005: GO 8852
// end ; SetTag ( i , tBusy ) ;
9007: LD_VAR 0 9
9011: PPUSH
9012: LD_INT 8
9014: PPUSH
9015: CALL_OW 109
// end else
9019: GO 9570
// if tag = tBusy then
9021: LD_VAR 0 15
9025: PUSH
9026: LD_INT 8
9028: EQUAL
9029: IFFALSE 9241
// begin if GetLives ( i ) = 1000 then
9031: LD_VAR 0 9
9035: PPUSH
9036: CALL_OW 256
9040: PUSH
9041: LD_INT 1000
9043: EQUAL
9044: IFFALSE 9239
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
9046: LD_VAR 0 9
9050: PPUSH
9051: CALL_OW 263
9055: PUSH
9056: LD_INT 1
9058: EQUAL
9059: PUSH
9060: LD_VAR 0 9
9064: PPUSH
9065: CALL_OW 311
9069: NOT
9070: AND
9071: IFFALSE 9227
// begin drivers := amDrivers ;
9073: LD_ADDR_VAR 0 24
9077: PUSH
9078: LD_EXP 38
9082: ST_TO_ADDR
// if not drivers then
9083: LD_VAR 0 24
9087: NOT
9088: IFFALSE 9104
// begin SetTag ( i , 0 ) ;
9090: LD_VAR 0 9
9094: PPUSH
9095: LD_INT 0
9097: PPUSH
9098: CALL_OW 109
// continue ;
9102: GO 8852
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
9104: LD_VAR 0 24
9108: PUSH
9109: LD_INT 1
9111: ARRAY
9112: PPUSH
9113: CALL_OW 310
9117: PUSH
9118: LD_VAR 0 24
9122: PUSH
9123: LD_INT 1
9125: ARRAY
9126: PPUSH
9127: CALL 77714 0 1
9131: NOT
9132: AND
9133: IFFALSE 9148
// ComExitBuilding ( drivers [ 1 ] ) ;
9135: LD_VAR 0 24
9139: PUSH
9140: LD_INT 1
9142: ARRAY
9143: PPUSH
9144: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
9148: LD_VAR 0 26
9152: PPUSH
9153: LD_INT 120
9155: PUSH
9156: LD_INT 3
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: PPUSH
9163: CALL_OW 72
9167: PUSH
9168: LD_VAR 0 24
9172: PUSH
9173: LD_INT 1
9175: ARRAY
9176: PPUSH
9177: CALL_OW 314
9181: NOT
9182: AND
9183: PUSH
9184: LD_VAR 0 26
9188: PPUSH
9189: LD_INT 120
9191: PUSH
9192: LD_INT 3
9194: PUSH
9195: EMPTY
9196: LIST
9197: LIST
9198: PPUSH
9199: CALL_OW 72
9203: NOT
9204: OR
9205: IFFALSE 9225
// ComEnterUnit ( drivers [ 1 ] , i ) ;
9207: LD_VAR 0 24
9211: PUSH
9212: LD_INT 1
9214: ARRAY
9215: PPUSH
9216: LD_VAR 0 9
9220: PPUSH
9221: CALL_OW 120
// continue ;
9225: GO 8852
// end ; SetTag ( i , tAttack ) ;
9227: LD_VAR 0 9
9231: PPUSH
9232: LD_INT 13
9234: PPUSH
9235: CALL_OW 109
// end ; end else
9239: GO 9570
// if tag = tAttack then
9241: LD_VAR 0 15
9245: PUSH
9246: LD_INT 13
9248: EQUAL
9249: IFFALSE 9429
// begin enemy := enemyInBase ;
9251: LD_ADDR_VAR 0 21
9255: PUSH
9256: LD_VAR 0 22
9260: ST_TO_ADDR
// if not enemy then
9261: LD_VAR 0 21
9265: NOT
9266: IFFALSE 9278
// enemy := enemyOuterBase ;
9268: LD_ADDR_VAR 0 21
9272: PUSH
9273: LD_VAR 0 23
9277: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
9278: LD_VAR 0 21
9282: NOT
9283: PUSH
9284: LD_VAR 0 9
9288: PPUSH
9289: LD_VAR 0 7
9293: PUSH
9294: LD_INT 1
9296: ARRAY
9297: PPUSH
9298: LD_VAR 0 7
9302: PUSH
9303: LD_INT 2
9305: ARRAY
9306: PPUSH
9307: CALL_OW 297
9311: PUSH
9312: LD_INT 10
9314: GREATER
9315: AND
9316: IFFALSE 9347
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
9318: LD_VAR 0 9
9322: PPUSH
9323: LD_VAR 0 7
9327: PUSH
9328: LD_INT 1
9330: ARRAY
9331: PPUSH
9332: LD_VAR 0 7
9336: PUSH
9337: LD_INT 2
9339: ARRAY
9340: PPUSH
9341: CALL_OW 111
// continue ;
9345: GO 8852
// end ; if GetLives ( i ) < 650 then
9347: LD_VAR 0 9
9351: PPUSH
9352: CALL_OW 256
9356: PUSH
9357: LD_INT 650
9359: LESS
9360: IFFALSE 9403
// begin SetTag ( i , tVehRepair ) ;
9362: LD_VAR 0 9
9366: PPUSH
9367: LD_INT 9
9369: PPUSH
9370: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
9374: LD_VAR 0 9
9378: PPUSH
9379: LD_VAR 0 7
9383: PUSH
9384: LD_INT 1
9386: ARRAY
9387: PPUSH
9388: LD_VAR 0 7
9392: PUSH
9393: LD_INT 2
9395: ARRAY
9396: PPUSH
9397: CALL_OW 111
// continue ;
9401: GO 8852
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
9403: LD_VAR 0 9
9407: PPUSH
9408: LD_VAR 0 21
9412: PPUSH
9413: LD_VAR 0 9
9417: PPUSH
9418: CALL_OW 74
9422: PPUSH
9423: CALL_OW 115
// end else
9427: GO 9570
// if tag = tVehRepair then
9429: LD_VAR 0 15
9433: PUSH
9434: LD_INT 9
9436: EQUAL
9437: IFFALSE 9570
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
9439: LD_VAR 0 9
9443: PPUSH
9444: LD_VAR 0 7
9448: PUSH
9449: LD_INT 1
9451: ARRAY
9452: PPUSH
9453: LD_VAR 0 7
9457: PUSH
9458: LD_INT 2
9460: ARRAY
9461: PPUSH
9462: CALL_OW 297
9466: PUSH
9467: LD_INT 10
9469: GREATER
9470: IFFALSE 9501
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
9472: LD_VAR 0 9
9476: PPUSH
9477: LD_VAR 0 7
9481: PUSH
9482: LD_INT 1
9484: ARRAY
9485: PPUSH
9486: LD_VAR 0 7
9490: PUSH
9491: LD_INT 2
9493: ARRAY
9494: PPUSH
9495: CALL_OW 111
// continue ;
9499: GO 8852
// end ; if GetLives ( i ) = 1000 then
9501: LD_VAR 0 9
9505: PPUSH
9506: CALL_OW 256
9510: PUSH
9511: LD_INT 1000
9513: EQUAL
9514: IFFALSE 9530
// begin SetTag ( i , tBusy ) ;
9516: LD_VAR 0 9
9520: PPUSH
9521: LD_INT 8
9523: PPUSH
9524: CALL_OW 109
// continue ;
9528: GO 8852
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
9530: LD_VAR 0 9
9534: PPUSH
9535: CALL_OW 263
9539: PUSH
9540: LD_INT 1
9542: EQUAL
9543: PUSH
9544: LD_VAR 0 9
9548: PPUSH
9549: CALL_OW 311
9553: AND
9554: IFFALSE 9570
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
9556: LD_VAR 0 9
9560: PPUSH
9561: CALL_OW 311
9565: PPUSH
9566: CALL 81810 0 1
// end ; end ;
9570: GO 8852
9572: POP
9573: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
9574: LD_ADDR_VAR 0 19
9578: PUSH
9579: LD_VAR 0 5
9583: PPUSH
9584: LD_INT 2
9586: PUSH
9587: LD_INT 25
9589: PUSH
9590: LD_INT 1
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: PUSH
9597: LD_INT 25
9599: PUSH
9600: LD_INT 8
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PUSH
9607: LD_INT 25
9609: PUSH
9610: LD_INT 5
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: PUSH
9617: LD_INT 25
9619: PUSH
9620: LD_INT 9
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: PUSH
9627: EMPTY
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: PUSH
9634: LD_INT 50
9636: PUSH
9637: EMPTY
9638: LIST
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: PPUSH
9644: CALL_OW 72
9648: ST_TO_ADDR
// if sol then
9649: LD_VAR 0 19
9653: IFFALSE 10161
// begin if enemyInBase then
9655: LD_VAR 0 22
9659: IFFALSE 9838
// begin for i in sol do
9661: LD_ADDR_VAR 0 9
9665: PUSH
9666: LD_VAR 0 19
9670: PUSH
9671: FOR_IN
9672: IFFALSE 9834
// begin tw := IsInUnit ( i ) ;
9674: LD_ADDR_VAR 0 16
9678: PUSH
9679: LD_VAR 0 9
9683: PPUSH
9684: CALL_OW 310
9688: ST_TO_ADDR
// if tw then
9689: LD_VAR 0 16
9693: IFFALSE 9776
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
9695: LD_VAR 0 16
9699: PUSH
9700: LD_INT 22
9702: PUSH
9703: LD_VAR 0 1
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: PUSH
9712: LD_INT 101
9714: PUSH
9715: LD_VAR 0 34
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: PUSH
9724: LD_INT 2
9726: PUSH
9727: LD_INT 30
9729: PUSH
9730: LD_INT 32
9732: PUSH
9733: EMPTY
9734: LIST
9735: LIST
9736: PUSH
9737: LD_INT 30
9739: PUSH
9740: LD_INT 31
9742: PUSH
9743: EMPTY
9744: LIST
9745: LIST
9746: PUSH
9747: EMPTY
9748: LIST
9749: LIST
9750: LIST
9751: PUSH
9752: EMPTY
9753: LIST
9754: LIST
9755: LIST
9756: PPUSH
9757: CALL_OW 69
9761: IN
9762: NOT
9763: IFFALSE 9774
// ComExitBuilding ( i ) ;
9765: LD_VAR 0 9
9769: PPUSH
9770: CALL_OW 122
// end else
9774: GO 9832
// if IsInarea ( i , area ) then
9776: LD_VAR 0 9
9780: PPUSH
9781: LD_VAR 0 3
9785: PPUSH
9786: CALL_OW 308
9790: IFFALSE 9818
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
9792: LD_VAR 0 9
9796: PPUSH
9797: LD_VAR 0 22
9801: PPUSH
9802: LD_VAR 0 9
9806: PPUSH
9807: CALL_OW 74
9811: PPUSH
9812: CALL_OW 115
9816: GO 9832
// ComMoveToarea ( i , area ) ;
9818: LD_VAR 0 9
9822: PPUSH
9823: LD_VAR 0 3
9827: PPUSH
9828: CALL_OW 113
// end ;
9832: GO 9671
9834: POP
9835: POP
// end else
9836: GO 10161
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
9838: LD_ADDR_VAR 0 28
9842: PUSH
9843: LD_VAR 0 3
9847: PPUSH
9848: LD_INT 3
9850: PUSH
9851: LD_INT 62
9853: PUSH
9854: EMPTY
9855: LIST
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: PUSH
9861: LD_INT 2
9863: PUSH
9864: LD_INT 30
9866: PUSH
9867: LD_INT 32
9869: PUSH
9870: EMPTY
9871: LIST
9872: LIST
9873: PUSH
9874: LD_INT 30
9876: PUSH
9877: LD_INT 4
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: PUSH
9884: LD_INT 30
9886: PUSH
9887: LD_INT 5
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: PUSH
9894: LD_INT 30
9896: PUSH
9897: LD_INT 31
9899: PUSH
9900: EMPTY
9901: LIST
9902: LIST
9903: PUSH
9904: EMPTY
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: PPUSH
9915: CALL_OW 70
9919: ST_TO_ADDR
// if empty then
9920: LD_VAR 0 28
9924: IFFALSE 9941
// empty := ReverseArray ( empty ) ;
9926: LD_ADDR_VAR 0 28
9930: PUSH
9931: LD_VAR 0 28
9935: PPUSH
9936: CALL 75397 0 1
9940: ST_TO_ADDR
// for i in sol do
9941: LD_ADDR_VAR 0 9
9945: PUSH
9946: LD_VAR 0 19
9950: PUSH
9951: FOR_IN
9952: IFFALSE 10159
// begin tag := GetTag ( i ) ;
9954: LD_ADDR_VAR 0 15
9958: PUSH
9959: LD_VAR 0 9
9963: PPUSH
9964: CALL_OW 110
9968: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
9969: LD_VAR 0 9
9973: PPUSH
9974: CALL_OW 256
9978: PUSH
9979: LD_INT 1000
9981: LESS
9982: PUSH
9983: LD_VAR 0 15
9987: PUSH
9988: LD_INT 1
9990: NONEQUAL
9991: AND
9992: IFFALSE 10044
// begin SetTag ( i , tHeal ) ;
9994: LD_VAR 0 9
9998: PPUSH
9999: LD_INT 1
10001: PPUSH
10002: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
10006: LD_VAR 0 9
10010: PPUSH
10011: LD_VAR 0 6
10015: PUSH
10016: LD_INT 1
10018: ARRAY
10019: PPUSH
10020: LD_VAR 0 6
10024: PUSH
10025: LD_INT 2
10027: ARRAY
10028: PPUSH
10029: CALL_OW 111
// AddComHold ( i ) ;
10033: LD_VAR 0 9
10037: PPUSH
10038: CALL_OW 200
// continue ;
10042: GO 9951
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
10044: LD_VAR 0 9
10048: PPUSH
10049: CALL_OW 256
10053: PUSH
10054: LD_INT 1000
10056: EQUAL
10057: PUSH
10058: LD_VAR 0 15
10062: PUSH
10063: LD_INT 1
10065: EQUAL
10066: AND
10067: IFFALSE 10083
// begin SetTag ( i , 0 ) ;
10069: LD_VAR 0 9
10073: PPUSH
10074: LD_INT 0
10076: PPUSH
10077: CALL_OW 109
// continue ;
10081: GO 9951
// end ; if HasTask ( i ) then
10083: LD_VAR 0 9
10087: PPUSH
10088: CALL_OW 314
10092: IFFALSE 10096
// continue ;
10094: GO 9951
// if not IsInUnit ( i ) and not tag and empty then
10096: LD_VAR 0 9
10100: PPUSH
10101: CALL_OW 310
10105: NOT
10106: PUSH
10107: LD_VAR 0 15
10111: NOT
10112: AND
10113: PUSH
10114: LD_VAR 0 28
10118: AND
10119: IFFALSE 10157
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
10121: LD_VAR 0 9
10125: PPUSH
10126: LD_VAR 0 28
10130: PUSH
10131: LD_INT 1
10133: ARRAY
10134: PPUSH
10135: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
10139: LD_ADDR_VAR 0 28
10143: PUSH
10144: LD_VAR 0 28
10148: PPUSH
10149: LD_INT 1
10151: PPUSH
10152: CALL_OW 3
10156: ST_TO_ADDR
// end ; end ;
10157: GO 9951
10159: POP
10160: POP
// end ; end ; end ;
10161: LD_VAR 0 8
10165: RET
// every 0 0$2 trigger UnitFilter ( amForce , [ f_ok ] ) do
10166: LD_EXP 40
10170: PPUSH
10171: LD_INT 50
10173: PUSH
10174: EMPTY
10175: LIST
10176: PPUSH
10177: CALL_OW 72
10181: IFFALSE 10234
10183: GO 10185
10185: DISABLE
// begin enable ;
10186: ENABLE
// BaseScript ( botSides [ 1 ] , 1 , amBaseArea , amBaseOuterArea , amForce , [ 27 , 33 ] , [ 22 , 17 ] ) ;
10187: LD_EXP 3
10191: PUSH
10192: LD_INT 1
10194: ARRAY
10195: PPUSH
10196: LD_INT 1
10198: PPUSH
10199: LD_INT 3
10201: PPUSH
10202: LD_INT 4
10204: PPUSH
10205: LD_EXP 40
10209: PPUSH
10210: LD_INT 27
10212: PUSH
10213: LD_INT 33
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: PPUSH
10220: LD_INT 22
10222: PUSH
10223: LD_INT 17
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: PPUSH
10230: CALL 6646 0 7
// end ;
10234: END
// every 3 3$00 trigger IsOk ( amDep ) and not amConstructList do
10235: LD_INT 1
10237: PPUSH
10238: CALL_OW 302
10242: PUSH
10243: LD_EXP 34
10247: NOT
10248: AND
10249: IFFALSE 10319
10251: GO 10253
10253: DISABLE
// begin enable ;
10254: ENABLE
// amConstructList := [ [ us_medium_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_heavy_gun ] ] ;
10255: LD_ADDR_EXP 34
10259: PUSH
10260: LD_INT 3
10262: PUSH
10263: LD_INT 1
10265: PUSH
10266: LD_INT 1
10268: PUSH
10269: LD_INT 5
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: PUSH
10278: LD_INT 3
10280: PUSH
10281: LD_INT 1
10283: PUSH
10284: LD_INT 1
10286: PUSH
10287: LD_INT 4
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: PUSH
10296: LD_INT 4
10298: PUSH
10299: LD_INT 1
10301: PUSH
10302: LD_INT 1
10304: PUSH
10305: LD_INT 6
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: LIST
10318: ST_TO_ADDR
// end ; end_of_file
10319: END
// export arTech , arConstructList , arBuildings , arVehicles , arVehiclesAtttackers , arDrivers , arMechSpawnCounter , arVehiclesCounter , arMinesList , arForce , arForceTmp ; export function PrepareArabian ( side ) ; var i , d , xy , un , un2 , skill , tmp , fac ; begin
10320: LD_INT 0
10322: PPUSH
10323: PPUSH
10324: PPUSH
10325: PPUSH
10326: PPUSH
10327: PPUSH
10328: PPUSH
10329: PPUSH
10330: PPUSH
// arTech := GetTechNation ( side , nation_arabian , state_enabled ) ;
10331: LD_ADDR_EXP 43
10335: PUSH
10336: LD_VAR 0 1
10340: PPUSH
10341: LD_INT 2
10343: PPUSH
10344: LD_INT 1
10346: PPUSH
10347: CALL 42482 0 3
10351: ST_TO_ADDR
// arConstructList := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] ] ;
10352: LD_ADDR_EXP 44
10356: PUSH
10357: LD_INT 13
10359: PUSH
10360: LD_INT 1
10362: PUSH
10363: LD_INT 1
10365: PUSH
10366: LD_INT 27
10368: PUSH
10369: EMPTY
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: PUSH
10375: LD_INT 13
10377: PUSH
10378: LD_INT 1
10380: PUSH
10381: LD_INT 1
10383: PUSH
10384: LD_INT 27
10386: PUSH
10387: EMPTY
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: PUSH
10393: LD_INT 13
10395: PUSH
10396: LD_INT 1
10398: PUSH
10399: LD_INT 1
10401: PUSH
10402: LD_INT 26
10404: PUSH
10405: EMPTY
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: PUSH
10411: LD_INT 13
10413: PUSH
10414: LD_INT 1
10416: PUSH
10417: LD_INT 1
10419: PUSH
10420: LD_INT 25
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: PUSH
10429: LD_INT 13
10431: PUSH
10432: LD_INT 1
10434: PUSH
10435: LD_INT 1
10437: PUSH
10438: LD_INT 27
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: ST_TO_ADDR
// arBuildings := [ ] ;
10454: LD_ADDR_EXP 45
10458: PUSH
10459: EMPTY
10460: ST_TO_ADDR
// arVehicles := [ ] ;
10461: LD_ADDR_EXP 46
10465: PUSH
10466: EMPTY
10467: ST_TO_ADDR
// arVehiclesAtttackers := [ ] ;
10468: LD_ADDR_EXP 47
10472: PUSH
10473: EMPTY
10474: ST_TO_ADDR
// arDrivers := [ ] ;
10475: LD_ADDR_EXP 48
10479: PUSH
10480: EMPTY
10481: ST_TO_ADDR
// arVehiclesCounter := 2 ;
10482: LD_ADDR_EXP 50
10486: PUSH
10487: LD_INT 2
10489: ST_TO_ADDR
// arMinesList := [ ] ;
10490: LD_ADDR_EXP 51
10494: PUSH
10495: EMPTY
10496: ST_TO_ADDR
// arMechSpawnCounter := [ 8 , 11 , 12 ] [ Difficulty ] ;
10497: LD_ADDR_EXP 49
10501: PUSH
10502: LD_INT 8
10504: PUSH
10505: LD_INT 11
10507: PUSH
10508: LD_INT 12
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: LIST
10515: PUSH
10516: LD_OWVAR 67
10520: ARRAY
10521: ST_TO_ADDR
// PlaceHiddenCamerasInArea ( side , hiddenCamArea ) ;
10522: LD_VAR 0 1
10526: PPUSH
10527: LD_INT 24
10529: PPUSH
10530: CALL 85049 0 2
// PlaceMines ( minefieldArea , [ 7 , 9 , 11 ] [ Difficulty ] ) ;
10534: LD_INT 23
10536: PPUSH
10537: LD_INT 7
10539: PUSH
10540: LD_INT 9
10542: PUSH
10543: LD_INT 11
10545: PUSH
10546: EMPTY
10547: LIST
10548: LIST
10549: LIST
10550: PUSH
10551: LD_OWVAR 67
10555: ARRAY
10556: PPUSH
10557: CALL 11122 0 2
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
10561: LD_ADDR_VAR 0 8
10565: PUSH
10566: LD_INT 3
10568: PUSH
10569: LD_INT 4
10571: PUSH
10572: LD_INT 5
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: LIST
10579: PUSH
10580: LD_OWVAR 67
10584: ARRAY
10585: ST_TO_ADDR
// uc_side := side ;
10586: LD_ADDR_OWVAR 20
10590: PUSH
10591: LD_VAR 0 1
10595: ST_TO_ADDR
// uc_nation := 2 ;
10596: LD_ADDR_OWVAR 21
10600: PUSH
10601: LD_INT 2
10603: ST_TO_ADDR
// arForce := PrepareBase ( arDep , arBaseArea ,  , skill , [ 800 , 120 , 0 ] , [ [ 10 , 11 , 12 ] [ Difficulty ] , 4 , 6 , 3 ] ) ;
10604: LD_ADDR_EXP 52
10608: PUSH
10609: LD_INT 32
10611: PPUSH
10612: LD_INT 5
10614: PPUSH
10615: LD_STRING 
10617: PPUSH
10618: LD_VAR 0 8
10622: PPUSH
10623: LD_INT 800
10625: PUSH
10626: LD_INT 120
10628: PUSH
10629: LD_INT 0
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: LIST
10636: PPUSH
10637: LD_INT 10
10639: PUSH
10640: LD_INT 11
10642: PUSH
10643: LD_INT 12
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: LIST
10650: PUSH
10651: LD_OWVAR 67
10655: ARRAY
10656: PUSH
10657: LD_INT 4
10659: PUSH
10660: LD_INT 6
10662: PUSH
10663: LD_INT 3
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: PPUSH
10672: CALL 51080 0 6
10676: ST_TO_ADDR
// arForceTmp := [ ] ;
10677: LD_ADDR_EXP 53
10681: PUSH
10682: EMPTY
10683: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_breastwork ] , [ f_not , [ f_inarea , arBaseArea ] ] , [ f_empty ] ] ) do
10684: LD_ADDR_VAR 0 3
10688: PUSH
10689: LD_INT 22
10691: PUSH
10692: LD_VAR 0 1
10696: PUSH
10697: EMPTY
10698: LIST
10699: LIST
10700: PUSH
10701: LD_INT 30
10703: PUSH
10704: LD_INT 31
10706: PUSH
10707: EMPTY
10708: LIST
10709: LIST
10710: PUSH
10711: LD_INT 3
10713: PUSH
10714: LD_INT 95
10716: PUSH
10717: LD_INT 5
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: PUSH
10728: LD_INT 58
10730: PUSH
10731: EMPTY
10732: LIST
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: PPUSH
10740: CALL_OW 69
10744: PUSH
10745: FOR_IN
10746: IFFALSE 10875
// begin d := GetDir ( i ) ;
10748: LD_ADDR_VAR 0 4
10752: PUSH
10753: LD_VAR 0 3
10757: PPUSH
10758: CALL_OW 254
10762: ST_TO_ADDR
// if d < 3 then
10763: LD_VAR 0 4
10767: PUSH
10768: LD_INT 3
10770: LESS
10771: IFFALSE 10789
// d := d + 3 else
10773: LD_ADDR_VAR 0 4
10777: PUSH
10778: LD_VAR 0 4
10782: PUSH
10783: LD_INT 3
10785: PLUS
10786: ST_TO_ADDR
10787: GO 10803
// d := d - 3 ;
10789: LD_ADDR_VAR 0 4
10793: PUSH
10794: LD_VAR 0 4
10798: PUSH
10799: LD_INT 3
10801: MINUS
10802: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
10803: LD_INT 0
10805: PPUSH
10806: LD_VAR 0 8
10810: PPUSH
10811: CALL_OW 381
// un := CreateHuman ;
10815: LD_ADDR_VAR 0 6
10819: PUSH
10820: CALL_OW 44
10824: ST_TO_ADDR
// arForceTmp := Join ( arForceTmp , un ) ;
10825: LD_ADDR_EXP 53
10829: PUSH
10830: LD_EXP 53
10834: PPUSH
10835: LD_VAR 0 6
10839: PPUSH
10840: CALL 80110 0 2
10844: ST_TO_ADDR
// SetDir ( un , d ) ;
10845: LD_VAR 0 6
10849: PPUSH
10850: LD_VAR 0 4
10854: PPUSH
10855: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
10859: LD_VAR 0 6
10863: PPUSH
10864: LD_VAR 0 3
10868: PPUSH
10869: CALL_OW 52
// end ;
10873: GO 10745
10875: POP
10876: POP
// for i := 1 to Difficulty do
10877: LD_ADDR_VAR 0 3
10881: PUSH
10882: DOUBLE
10883: LD_INT 1
10885: DEC
10886: ST_TO_ADDR
10887: LD_OWVAR 67
10891: PUSH
10892: FOR_TO
10893: IFFALSE 10959
// begin PrepareSoldier ( false , skill ) ;
10895: LD_INT 0
10897: PPUSH
10898: LD_VAR 0 8
10902: PPUSH
10903: CALL_OW 381
// un := CreateHuman ;
10907: LD_ADDR_VAR 0 6
10911: PUSH
10912: CALL_OW 44
10916: ST_TO_ADDR
// arForceTmp := Join ( arForceTmp , un ) ;
10917: LD_ADDR_EXP 53
10921: PUSH
10922: LD_EXP 53
10926: PPUSH
10927: LD_VAR 0 6
10931: PPUSH
10932: CALL 80110 0 2
10936: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( 215 , 102 ) ) ;
10937: LD_VAR 0 6
10941: PPUSH
10942: LD_INT 215
10944: PPUSH
10945: LD_INT 102
10947: PPUSH
10948: CALL_OW 428
10952: PPUSH
10953: CALL_OW 52
// end ;
10957: GO 10892
10959: POP
10960: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) do
10961: LD_ADDR_VAR 0 3
10965: PUSH
10966: LD_INT 22
10968: PUSH
10969: LD_VAR 0 1
10973: PUSH
10974: EMPTY
10975: LIST
10976: LIST
10977: PUSH
10978: LD_INT 21
10980: PUSH
10981: LD_INT 3
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: PUSH
10988: EMPTY
10989: LIST
10990: LIST
10991: PPUSH
10992: CALL_OW 69
10996: PUSH
10997: FOR_IN
10998: IFFALSE 11031
// SetBLevel ( i , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
11000: LD_VAR 0 3
11004: PPUSH
11005: LD_INT 3
11007: PUSH
11008: LD_INT 5
11010: PUSH
11011: LD_INT 7
11013: PUSH
11014: EMPTY
11015: LIST
11016: LIST
11017: LIST
11018: PUSH
11019: LD_OWVAR 67
11023: ARRAY
11024: PPUSH
11025: CALL_OW 241
11029: GO 10997
11031: POP
11032: POP
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
11033: LD_ADDR_VAR 0 3
11037: PUSH
11038: LD_INT 22
11040: PUSH
11041: LD_VAR 0 1
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: PUSH
11050: LD_INT 30
11052: PUSH
11053: LD_INT 32
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PPUSH
11064: CALL_OW 69
11068: PUSH
11069: FOR_IN
11070: IFFALSE 11115
// PlaceWeaponTurret ( i , [ ar_gun , ar_gatling_gun , ar_double_machine_gun , ar_gun ] [ i mod 4 + 1 ] ) ;
11072: LD_VAR 0 3
11076: PPUSH
11077: LD_INT 27
11079: PUSH
11080: LD_INT 25
11082: PUSH
11083: LD_INT 24
11085: PUSH
11086: LD_INT 27
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: PUSH
11095: LD_VAR 0 3
11099: PUSH
11100: LD_INT 4
11102: MOD
11103: PUSH
11104: LD_INT 1
11106: PLUS
11107: ARRAY
11108: PPUSH
11109: CALL_OW 431
11113: GO 11069
11115: POP
11116: POP
// end ;
11117: LD_VAR 0 2
11121: RET
// export function PlaceMines ( area , n ) ; var i , tmp , r ; begin
11122: LD_INT 0
11124: PPUSH
11125: PPUSH
11126: PPUSH
11127: PPUSH
// tmp := AreaToList ( area , 0 ) ;
11128: LD_ADDR_VAR 0 5
11132: PUSH
11133: LD_VAR 0 1
11137: PPUSH
11138: LD_INT 0
11140: PPUSH
11141: CALL_OW 517
11145: ST_TO_ADDR
// if not tmp then
11146: LD_VAR 0 5
11150: NOT
11151: IFFALSE 11155
// exit ;
11153: GO 11397
// for i := 1 to n do
11155: LD_ADDR_VAR 0 4
11159: PUSH
11160: DOUBLE
11161: LD_INT 1
11163: DEC
11164: ST_TO_ADDR
11165: LD_VAR 0 2
11169: PUSH
11170: FOR_TO
11171: IFFALSE 11395
// begin r := rand ( 1 , tmp [ 1 ] ) ;
11173: LD_ADDR_VAR 0 6
11177: PUSH
11178: LD_INT 1
11180: PPUSH
11181: LD_VAR 0 5
11185: PUSH
11186: LD_INT 1
11188: ARRAY
11189: PPUSH
11190: CALL_OW 12
11194: ST_TO_ADDR
// PlaceMine ( tmp [ 1 ] [ r ] , tmp [ 2 ] [ r ] , botSides [ 2 ] , 0 ) ;
11195: LD_VAR 0 5
11199: PUSH
11200: LD_INT 1
11202: ARRAY
11203: PUSH
11204: LD_VAR 0 6
11208: ARRAY
11209: PPUSH
11210: LD_VAR 0 5
11214: PUSH
11215: LD_INT 2
11217: ARRAY
11218: PUSH
11219: LD_VAR 0 6
11223: ARRAY
11224: PPUSH
11225: LD_EXP 3
11229: PUSH
11230: LD_INT 2
11232: ARRAY
11233: PPUSH
11234: LD_INT 0
11236: PPUSH
11237: CALL_OW 454
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 1 ] [ r ] ) ;
11241: LD_ADDR_EXP 51
11245: PUSH
11246: LD_EXP 51
11250: PPUSH
11251: LD_EXP 51
11255: PUSH
11256: LD_INT 1
11258: PLUS
11259: PPUSH
11260: LD_VAR 0 5
11264: PUSH
11265: LD_INT 1
11267: ARRAY
11268: PUSH
11269: LD_VAR 0 6
11273: ARRAY
11274: PPUSH
11275: CALL_OW 2
11279: ST_TO_ADDR
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 2 ] [ r ] ) ;
11280: LD_ADDR_EXP 51
11284: PUSH
11285: LD_EXP 51
11289: PPUSH
11290: LD_EXP 51
11294: PUSH
11295: LD_INT 1
11297: PLUS
11298: PPUSH
11299: LD_VAR 0 5
11303: PUSH
11304: LD_INT 2
11306: ARRAY
11307: PUSH
11308: LD_VAR 0 6
11312: ARRAY
11313: PPUSH
11314: CALL_OW 2
11318: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , Delete ( tmp [ 1 ] , r ) ) ;
11319: LD_ADDR_VAR 0 5
11323: PUSH
11324: LD_VAR 0 5
11328: PPUSH
11329: LD_INT 1
11331: PPUSH
11332: LD_VAR 0 5
11336: PUSH
11337: LD_INT 1
11339: ARRAY
11340: PPUSH
11341: LD_VAR 0 6
11345: PPUSH
11346: CALL_OW 3
11350: PPUSH
11351: CALL_OW 1
11355: ST_TO_ADDR
// tmp := Replace ( tmp , 2 , Delete ( tmp [ 2 ] , r ) ) ;
11356: LD_ADDR_VAR 0 5
11360: PUSH
11361: LD_VAR 0 5
11365: PPUSH
11366: LD_INT 2
11368: PPUSH
11369: LD_VAR 0 5
11373: PUSH
11374: LD_INT 2
11376: ARRAY
11377: PPUSH
11378: LD_VAR 0 6
11382: PPUSH
11383: CALL_OW 3
11387: PPUSH
11388: CALL_OW 1
11392: ST_TO_ADDR
// end ;
11393: GO 11170
11395: POP
11396: POP
// end ;
11397: LD_VAR 0 3
11401: RET
// function BaseScript ( side , base , area , outerArea , forces , healPoint , parkingPoint ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
11402: LD_INT 0
11404: PPUSH
11405: PPUSH
11406: PPUSH
11407: PPUSH
11408: PPUSH
11409: PPUSH
11410: PPUSH
11411: PPUSH
11412: PPUSH
11413: PPUSH
11414: PPUSH
11415: PPUSH
11416: PPUSH
11417: PPUSH
11418: PPUSH
11419: PPUSH
11420: PPUSH
11421: PPUSH
11422: PPUSH
11423: PPUSH
11424: PPUSH
11425: PPUSH
11426: PPUSH
11427: PPUSH
11428: PPUSH
11429: PPUSH
11430: PPUSH
// enable ;
11431: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
11432: LD_ADDR_VAR 0 10
11436: PUSH
11437: LD_INT 81
11439: PUSH
11440: LD_VAR 0 1
11444: PUSH
11445: EMPTY
11446: LIST
11447: LIST
11448: PPUSH
11449: CALL_OW 69
11453: ST_TO_ADDR
// if tmp then
11454: LD_VAR 0 10
11458: IFFALSE 11479
// enemySide := GetSide ( tmp [ 1 ] ) ;
11460: LD_ADDR_VAR 0 34
11464: PUSH
11465: LD_VAR 0 10
11469: PUSH
11470: LD_INT 1
11472: ARRAY
11473: PPUSH
11474: CALL_OW 255
11478: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11479: LD_ADDR_VAR 0 22
11483: PUSH
11484: LD_VAR 0 3
11488: PPUSH
11489: LD_INT 81
11491: PUSH
11492: LD_VAR 0 1
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: PPUSH
11501: CALL_OW 70
11505: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
11506: LD_ADDR_VAR 0 23
11510: PUSH
11511: LD_VAR 0 4
11515: PPUSH
11516: LD_INT 81
11518: PUSH
11519: LD_VAR 0 1
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: PPUSH
11528: CALL_OW 70
11532: ST_TO_ADDR
// vehicles := arVehicles ;
11533: LD_ADDR_VAR 0 26
11537: PUSH
11538: LD_EXP 46
11542: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11543: LD_ADDR_VAR 0 32
11547: PUSH
11548: LD_VAR 0 3
11552: PPUSH
11553: LD_INT 22
11555: PUSH
11556: LD_VAR 0 1
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: PUSH
11565: LD_INT 2
11567: PUSH
11568: LD_INT 30
11570: PUSH
11571: LD_INT 0
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: PUSH
11578: LD_INT 30
11580: PUSH
11581: LD_INT 1
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: LIST
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: PPUSH
11597: CALL_OW 70
11601: ST_TO_ADDR
// if depot then
11602: LD_VAR 0 32
11606: IFFALSE 11622
// depot := depot [ 1 ] ;
11608: LD_ADDR_VAR 0 32
11612: PUSH
11613: LD_VAR 0 32
11617: PUSH
11618: LD_INT 1
11620: ARRAY
11621: ST_TO_ADDR
// if arTech then
11622: LD_EXP 43
11626: IFFALSE 11785
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
11628: LD_ADDR_VAR 0 12
11632: PUSH
11633: LD_VAR 0 3
11637: PPUSH
11638: LD_INT 22
11640: PUSH
11641: LD_VAR 0 1
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: PUSH
11650: LD_INT 50
11652: PUSH
11653: EMPTY
11654: LIST
11655: PUSH
11656: LD_INT 2
11658: PUSH
11659: LD_INT 30
11661: PUSH
11662: LD_INT 6
11664: PUSH
11665: EMPTY
11666: LIST
11667: LIST
11668: PUSH
11669: LD_INT 30
11671: PUSH
11672: LD_INT 7
11674: PUSH
11675: EMPTY
11676: LIST
11677: LIST
11678: PUSH
11679: LD_INT 30
11681: PUSH
11682: LD_INT 8
11684: PUSH
11685: EMPTY
11686: LIST
11687: LIST
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: PUSH
11695: EMPTY
11696: LIST
11697: LIST
11698: LIST
11699: PPUSH
11700: CALL_OW 70
11704: ST_TO_ADDR
// if lab then
11705: LD_VAR 0 12
11709: IFFALSE 11785
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
11711: LD_VAR 0 12
11715: PUSH
11716: LD_INT 1
11718: ARRAY
11719: PPUSH
11720: CALL_OW 461
11724: PUSH
11725: LD_INT 2
11727: EQUAL
11728: IFFALSE 11785
// begin for i in arTech do
11730: LD_ADDR_VAR 0 9
11734: PUSH
11735: LD_EXP 43
11739: PUSH
11740: FOR_IN
11741: IFFALSE 11783
// if CanBeResearched ( lab [ 1 ] , i ) then
11743: LD_VAR 0 12
11747: PUSH
11748: LD_INT 1
11750: ARRAY
11751: PPUSH
11752: LD_VAR 0 9
11756: PPUSH
11757: CALL_OW 430
11761: IFFALSE 11781
// begin AddComResearch ( lab [ 1 ] , i ) ;
11763: LD_VAR 0 12
11767: PUSH
11768: LD_INT 1
11770: ARRAY
11771: PPUSH
11772: LD_VAR 0 9
11776: PPUSH
11777: CALL_OW 184
// end ;
11781: GO 11740
11783: POP
11784: POP
// end ; end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
11785: LD_ADDR_VAR 0 29
11789: PUSH
11790: LD_VAR 0 3
11794: PPUSH
11795: LD_INT 22
11797: PUSH
11798: LD_VAR 0 1
11802: PUSH
11803: EMPTY
11804: LIST
11805: LIST
11806: PUSH
11807: LD_INT 30
11809: PUSH
11810: LD_INT 3
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: PUSH
11817: LD_INT 50
11819: PUSH
11820: EMPTY
11821: LIST
11822: PUSH
11823: EMPTY
11824: LIST
11825: LIST
11826: LIST
11827: PPUSH
11828: CALL_OW 70
11832: ST_TO_ADDR
// if fac then
11833: LD_VAR 0 29
11837: IFFALSE 12172
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
11839: LD_VAR 0 29
11843: PUSH
11844: LD_INT 1
11846: ARRAY
11847: PPUSH
11848: CALL_OW 461
11852: PUSH
11853: LD_INT 2
11855: EQUAL
11856: IFFALSE 12172
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
11858: LD_ADDR_VAR 0 30
11862: PUSH
11863: LD_VAR 0 3
11867: PPUSH
11868: LD_INT 2
11870: PUSH
11871: LD_INT 30
11873: PUSH
11874: LD_INT 32
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: PUSH
11881: LD_INT 30
11883: PUSH
11884: LD_INT 33
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: LIST
11895: PUSH
11896: LD_INT 35
11898: PUSH
11899: LD_INT 0
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PUSH
11906: EMPTY
11907: LIST
11908: LIST
11909: PPUSH
11910: CALL_OW 70
11914: ST_TO_ADDR
// if emptyTowers then
11915: LD_VAR 0 30
11919: IFFALSE 11969
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
11921: LD_ADDR_VAR 0 31
11925: PUSH
11926: LD_VAR 0 30
11930: PUSH
11931: LD_INT 1
11933: ARRAY
11934: PPUSH
11935: LD_VAR 0 3
11939: PPUSH
11940: CALL 52766 0 2
11944: ST_TO_ADDR
// if weapon then
11945: LD_VAR 0 31
11949: IFFALSE 11969
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
11951: LD_VAR 0 30
11955: PUSH
11956: LD_INT 1
11958: ARRAY
11959: PPUSH
11960: LD_VAR 0 31
11964: PPUSH
11965: CALL_OW 148
// end ; if arConstructList then
11969: LD_EXP 44
11973: IFFALSE 12172
// for i := 1 to Count ( arConstructList ) do
11975: LD_ADDR_VAR 0 9
11979: PUSH
11980: DOUBLE
11981: LD_INT 1
11983: DEC
11984: ST_TO_ADDR
11985: LD_EXP 44
11989: PPUSH
11990: CALL 44521 0 1
11994: PUSH
11995: FOR_TO
11996: IFFALSE 12170
// begin if CanBeConstructed ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) then
11998: LD_VAR 0 29
12002: PUSH
12003: LD_INT 1
12005: ARRAY
12006: PPUSH
12007: LD_EXP 44
12011: PUSH
12012: LD_VAR 0 9
12016: ARRAY
12017: PUSH
12018: LD_INT 1
12020: ARRAY
12021: PPUSH
12022: LD_EXP 44
12026: PUSH
12027: LD_VAR 0 9
12031: ARRAY
12032: PUSH
12033: LD_INT 2
12035: ARRAY
12036: PPUSH
12037: LD_EXP 44
12041: PUSH
12042: LD_VAR 0 9
12046: ARRAY
12047: PUSH
12048: LD_INT 3
12050: ARRAY
12051: PPUSH
12052: LD_EXP 44
12056: PUSH
12057: LD_VAR 0 9
12061: ARRAY
12062: PUSH
12063: LD_INT 4
12065: ARRAY
12066: PPUSH
12067: CALL_OW 448
12071: IFFALSE 12168
// begin ComConstruct ( fac [ 1 ] , arConstructList [ i ] [ 1 ] , arConstructList [ i ] [ 2 ] , arConstructList [ i ] [ 3 ] , arConstructList [ i ] [ 4 ] ) ;
12073: LD_VAR 0 29
12077: PUSH
12078: LD_INT 1
12080: ARRAY
12081: PPUSH
12082: LD_EXP 44
12086: PUSH
12087: LD_VAR 0 9
12091: ARRAY
12092: PUSH
12093: LD_INT 1
12095: ARRAY
12096: PPUSH
12097: LD_EXP 44
12101: PUSH
12102: LD_VAR 0 9
12106: ARRAY
12107: PUSH
12108: LD_INT 2
12110: ARRAY
12111: PPUSH
12112: LD_EXP 44
12116: PUSH
12117: LD_VAR 0 9
12121: ARRAY
12122: PUSH
12123: LD_INT 3
12125: ARRAY
12126: PPUSH
12127: LD_EXP 44
12131: PUSH
12132: LD_VAR 0 9
12136: ARRAY
12137: PUSH
12138: LD_INT 4
12140: ARRAY
12141: PPUSH
12142: CALL_OW 125
// arConstructList := Delete ( arConstructList , i ) ;
12146: LD_ADDR_EXP 44
12150: PUSH
12151: LD_EXP 44
12155: PPUSH
12156: LD_VAR 0 9
12160: PPUSH
12161: CALL_OW 3
12165: ST_TO_ADDR
// break ;
12166: GO 12170
// end ; end ;
12168: GO 11995
12170: POP
12171: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12172: LD_ADDR_VAR 0 10
12176: PUSH
12177: LD_VAR 0 3
12181: PPUSH
12182: LD_INT 21
12184: PUSH
12185: LD_INT 3
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: PUSH
12192: LD_INT 3
12194: PUSH
12195: LD_INT 57
12197: PUSH
12198: EMPTY
12199: LIST
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: PUSH
12205: LD_INT 3
12207: PUSH
12208: LD_INT 24
12210: PUSH
12211: LD_INT 1000
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: LIST
12226: PPUSH
12227: CALL_OW 70
12231: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
12232: LD_ADDR_VAR 0 17
12236: PUSH
12237: LD_VAR 0 3
12241: PPUSH
12242: CALL_OW 435
12246: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
12247: LD_ADDR_VAR 0 14
12251: PUSH
12252: LD_VAR 0 5
12256: PPUSH
12257: LD_INT 25
12259: PUSH
12260: LD_INT 3
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: PUSH
12267: LD_INT 50
12269: PUSH
12270: EMPTY
12271: LIST
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PPUSH
12277: CALL_OW 72
12281: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( fac [ 1 ] ) then
12282: LD_VAR 0 14
12286: PPUSH
12287: LD_INT 3
12289: PUSH
12290: LD_INT 120
12292: PUSH
12293: LD_INT 7
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: PUSH
12304: LD_INT 3
12306: PUSH
12307: LD_INT 54
12309: PUSH
12310: EMPTY
12311: LIST
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: PPUSH
12321: CALL_OW 72
12325: PUSH
12326: LD_VAR 0 29
12330: PUSH
12331: LD_INT 1
12333: ARRAY
12334: PPUSH
12335: CALL_OW 302
12339: AND
12340: IFFALSE 12399
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , fac [ 1 ] ) ;
12342: LD_VAR 0 14
12346: PPUSH
12347: LD_INT 3
12349: PUSH
12350: LD_INT 120
12352: PUSH
12353: LD_INT 7
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: PUSH
12364: LD_INT 3
12366: PUSH
12367: LD_INT 54
12369: PUSH
12370: EMPTY
12371: LIST
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: PPUSH
12381: CALL_OW 72
12385: PPUSH
12386: LD_VAR 0 29
12390: PUSH
12391: LD_INT 1
12393: ARRAY
12394: PPUSH
12395: CALL_OW 120
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
12399: LD_ADDR_VAR 0 18
12403: PUSH
12404: LD_VAR 0 5
12408: PPUSH
12409: LD_INT 25
12411: PUSH
12412: LD_INT 4
12414: PUSH
12415: EMPTY
12416: LIST
12417: LIST
12418: PUSH
12419: LD_INT 50
12421: PUSH
12422: EMPTY
12423: LIST
12424: PUSH
12425: EMPTY
12426: LIST
12427: LIST
12428: PPUSH
12429: CALL_OW 72
12433: ST_TO_ADDR
// lab := FilterUnitsInArea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
12434: LD_ADDR_VAR 0 12
12438: PUSH
12439: LD_VAR 0 3
12443: PPUSH
12444: LD_INT 2
12446: PUSH
12447: LD_INT 30
12449: PUSH
12450: LD_INT 6
12452: PUSH
12453: EMPTY
12454: LIST
12455: LIST
12456: PUSH
12457: LD_INT 30
12459: PUSH
12460: LD_INT 7
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: PUSH
12467: LD_INT 30
12469: PUSH
12470: LD_INT 8
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: PPUSH
12483: CALL_OW 70
12487: ST_TO_ADDR
// if sci then
12488: LD_VAR 0 18
12492: IFFALSE 12653
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
12494: LD_ADDR_VAR 0 20
12498: PUSH
12499: LD_VAR 0 5
12503: PPUSH
12504: LD_INT 95
12506: PUSH
12507: LD_VAR 0 3
12511: PUSH
12512: EMPTY
12513: LIST
12514: LIST
12515: PUSH
12516: LD_INT 120
12518: PUSH
12519: LD_INT 1
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: PPUSH
12530: CALL_OW 72
12534: ST_TO_ADDR
// if hurtUnits then
12535: LD_VAR 0 20
12539: IFFALSE 12600
// begin for i in sci do
12541: LD_ADDR_VAR 0 9
12545: PUSH
12546: LD_VAR 0 18
12550: PUSH
12551: FOR_IN
12552: IFFALSE 12596
// if IsInUnit ( i ) then
12554: LD_VAR 0 9
12558: PPUSH
12559: CALL_OW 310
12563: IFFALSE 12576
// ComExitBuilding ( i ) else
12565: LD_VAR 0 9
12569: PPUSH
12570: CALL_OW 122
12574: GO 12594
// ComHeal ( i , hurtUnits [ 1 ] ) ;
12576: LD_VAR 0 9
12580: PPUSH
12581: LD_VAR 0 20
12585: PUSH
12586: LD_INT 1
12588: ARRAY
12589: PPUSH
12590: CALL_OW 128
12594: GO 12551
12596: POP
12597: POP
// end else
12598: GO 12653
// if lab then
12600: LD_VAR 0 12
12604: IFFALSE 12653
// begin for i in sci do
12606: LD_ADDR_VAR 0 9
12610: PUSH
12611: LD_VAR 0 18
12615: PUSH
12616: FOR_IN
12617: IFFALSE 12651
// if not IsInUnit ( i ) then
12619: LD_VAR 0 9
12623: PPUSH
12624: CALL_OW 310
12628: NOT
12629: IFFALSE 12649
// ComEnterUnit ( i , lab [ 1 ] ) ;
12631: LD_VAR 0 9
12635: PPUSH
12636: LD_VAR 0 12
12640: PUSH
12641: LD_INT 1
12643: ARRAY
12644: PPUSH
12645: CALL_OW 120
12649: GO 12616
12651: POP
12652: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
12653: LD_ADDR_VAR 0 13
12657: PUSH
12658: LD_VAR 0 5
12662: PPUSH
12663: LD_INT 25
12665: PUSH
12666: LD_INT 2
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: PPUSH
12673: CALL_OW 72
12677: ST_TO_ADDR
// buildingsToBuild := arBuildings ;
12678: LD_ADDR_VAR 0 33
12682: PUSH
12683: LD_EXP 45
12687: ST_TO_ADDR
// if eng then
12688: LD_VAR 0 13
12692: IFFALSE 13526
// begin for i in eng do
12694: LD_ADDR_VAR 0 9
12698: PUSH
12699: LD_VAR 0 13
12703: PUSH
12704: FOR_IN
12705: IFFALSE 13524
// begin tag := GetTag ( i ) ;
12707: LD_ADDR_VAR 0 15
12711: PUSH
12712: LD_VAR 0 9
12716: PPUSH
12717: CALL_OW 110
12721: ST_TO_ADDR
// if IsInArea ( i , outerArea ) then
12722: LD_VAR 0 9
12726: PPUSH
12727: LD_VAR 0 4
12731: PPUSH
12732: CALL_OW 308
12736: IFFALSE 12767
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
12738: LD_VAR 0 9
12742: PPUSH
12743: LD_VAR 0 7
12747: PUSH
12748: LD_INT 1
12750: ARRAY
12751: PPUSH
12752: LD_VAR 0 7
12756: PUSH
12757: LD_INT 2
12759: ARRAY
12760: PPUSH
12761: CALL_OW 111
// continue ;
12765: GO 12704
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
12767: LD_VAR 0 9
12771: PPUSH
12772: CALL_OW 256
12776: PUSH
12777: LD_INT 800
12779: LESS
12780: PUSH
12781: LD_VAR 0 15
12785: PUSH
12786: LD_INT 1
12788: NONEQUAL
12789: AND
12790: IFFALSE 12840
// begin SetTag ( i , tHeal ) ;
12792: LD_VAR 0 9
12796: PPUSH
12797: LD_INT 1
12799: PPUSH
12800: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
12804: LD_VAR 0 9
12808: PPUSH
12809: LD_VAR 0 6
12813: PUSH
12814: LD_INT 1
12816: ARRAY
12817: PPUSH
12818: LD_VAR 0 6
12822: PUSH
12823: LD_INT 2
12825: ARRAY
12826: PPUSH
12827: CALL_OW 111
// AddComHold ( i ) ;
12831: LD_VAR 0 9
12835: PPUSH
12836: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
12840: LD_VAR 0 15
12844: PUSH
12845: LD_INT 1
12847: EQUAL
12848: PUSH
12849: LD_VAR 0 9
12853: PPUSH
12854: CALL_OW 256
12858: PUSH
12859: LD_INT 1000
12861: EQUAL
12862: AND
12863: IFFALSE 12877
// SetTag ( i , 0 ) ;
12865: LD_VAR 0 9
12869: PPUSH
12870: LD_INT 0
12872: PPUSH
12873: CALL_OW 109
// if not tag then
12877: LD_VAR 0 15
12881: NOT
12882: IFFALSE 13049
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
12884: LD_ADDR_VAR 0 11
12888: PUSH
12889: LD_VAR 0 3
12893: PPUSH
12894: LD_INT 57
12896: PUSH
12897: EMPTY
12898: LIST
12899: PPUSH
12900: CALL_OW 70
12904: ST_TO_ADDR
// if undone then
12905: LD_VAR 0 11
12909: IFFALSE 12931
// begin ComComplete ( i , undone [ 1 ] ) ;
12911: LD_VAR 0 9
12915: PPUSH
12916: LD_VAR 0 11
12920: PUSH
12921: LD_INT 1
12923: ARRAY
12924: PPUSH
12925: CALL 50619 0 2
// continue ;
12929: GO 12704
// end ; if cr or tmp or buildingsToBuild then
12931: LD_VAR 0 17
12935: PUSH
12936: LD_VAR 0 10
12940: OR
12941: PUSH
12942: LD_VAR 0 33
12946: OR
12947: IFFALSE 13023
// begin if IsInUnit ( i ) then
12949: LD_VAR 0 9
12953: PPUSH
12954: CALL_OW 310
12958: IFFALSE 12969
// ComExitBuilding ( i ) ;
12960: LD_VAR 0 9
12964: PPUSH
12965: CALL_OW 122
// if tmp then
12969: LD_VAR 0 10
12973: IFFALSE 12989
// SetTag ( i , tRepair ) else
12975: LD_VAR 0 9
12979: PPUSH
12980: LD_INT 3
12982: PPUSH
12983: CALL_OW 109
12987: GO 13021
// if cr then
12989: LD_VAR 0 17
12993: IFFALSE 13009
// SetTag ( i , tCrates ) else
12995: LD_VAR 0 9
12999: PPUSH
13000: LD_INT 2
13002: PPUSH
13003: CALL_OW 109
13007: GO 13021
// SetTag ( i , tBuild ) ;
13009: LD_VAR 0 9
13013: PPUSH
13014: LD_INT 5
13016: PPUSH
13017: CALL_OW 109
// end else
13021: GO 13049
// if not IsInUnit ( i ) then
13023: LD_VAR 0 9
13027: PPUSH
13028: CALL_OW 310
13032: NOT
13033: IFFALSE 13049
// ComEnterUnit ( i , depot ) ;
13035: LD_VAR 0 9
13039: PPUSH
13040: LD_VAR 0 32
13044: PPUSH
13045: CALL_OW 120
// end ; if tag = tRepair then
13049: LD_VAR 0 15
13053: PUSH
13054: LD_INT 3
13056: EQUAL
13057: IFFALSE 13163
// begin if IsInUnit ( i ) then
13059: LD_VAR 0 9
13063: PPUSH
13064: CALL_OW 310
13068: IFFALSE 13081
// begin ComExitBuilding ( i ) ;
13070: LD_VAR 0 9
13074: PPUSH
13075: CALL_OW 122
// continue ;
13079: GO 12704
// end ; if not tmp then
13081: LD_VAR 0 10
13085: NOT
13086: IFFALSE 13102
// begin SetTag ( i , 0 ) ;
13088: LD_VAR 0 9
13092: PPUSH
13093: LD_INT 0
13095: PPUSH
13096: CALL_OW 109
// continue ;
13100: GO 12704
// end ; if not HasTask ( i ) then
13102: LD_VAR 0 9
13106: PPUSH
13107: CALL_OW 314
13111: NOT
13112: IFFALSE 13132
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
13114: LD_VAR 0 9
13118: PPUSH
13119: LD_VAR 0 10
13123: PUSH
13124: LD_INT 1
13126: ARRAY
13127: PPUSH
13128: CALL_OW 130
// if not IsInArea ( i , area ) then
13132: LD_VAR 0 9
13136: PPUSH
13137: LD_VAR 0 3
13141: PPUSH
13142: CALL_OW 308
13146: NOT
13147: IFFALSE 13163
// ComMoveToArea ( i , area ) ;
13149: LD_VAR 0 9
13153: PPUSH
13154: LD_VAR 0 3
13158: PPUSH
13159: CALL_OW 113
// end ; if tag = tBuild then
13163: LD_VAR 0 15
13167: PUSH
13168: LD_INT 5
13170: EQUAL
13171: IFFALSE 13377
// begin if IsInUnit ( i ) then
13173: LD_VAR 0 9
13177: PPUSH
13178: CALL_OW 310
13182: IFFALSE 13195
// begin ComExitBuilding ( i ) ;
13184: LD_VAR 0 9
13188: PPUSH
13189: CALL_OW 122
// continue ;
13193: GO 12704
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
13195: LD_VAR 0 33
13199: NOT
13200: PUSH
13201: LD_VAR 0 22
13205: OR
13206: PUSH
13207: LD_VAR 0 23
13211: OR
13212: IFFALSE 13230
// begin SetTag ( i , 0 ) ;
13214: LD_VAR 0 9
13218: PPUSH
13219: LD_INT 0
13221: PPUSH
13222: CALL_OW 109
// continue ;
13226: GO 12704
// end else
13228: GO 13269
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
13230: LD_VAR 0 32
13234: PPUSH
13235: LD_VAR 0 33
13239: PUSH
13240: LD_INT 1
13242: ARRAY
13243: PUSH
13244: LD_INT 1
13246: ARRAY
13247: PPUSH
13248: CALL 84033 0 2
13252: NOT
13253: IFFALSE 13269
// begin SetTag ( i , 0 ) ;
13255: LD_VAR 0 9
13259: PPUSH
13260: LD_INT 0
13262: PPUSH
13263: CALL_OW 109
// continue ;
13267: GO 12704
// end ; undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
13269: LD_ADDR_VAR 0 11
13273: PUSH
13274: LD_VAR 0 3
13278: PPUSH
13279: LD_INT 57
13281: PUSH
13282: EMPTY
13283: LIST
13284: PPUSH
13285: CALL_OW 70
13289: ST_TO_ADDR
// if undone then
13290: LD_VAR 0 11
13294: IFFALSE 13316
// begin ComComplete ( i , undone [ 1 ] ) ;
13296: LD_VAR 0 9
13300: PPUSH
13301: LD_VAR 0 11
13305: PUSH
13306: LD_INT 1
13308: ARRAY
13309: PPUSH
13310: CALL 50619 0 2
// continue ;
13314: GO 12704
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
13316: LD_VAR 0 9
13320: PPUSH
13321: LD_VAR 0 33
13325: PUSH
13326: LD_INT 1
13328: ARRAY
13329: PUSH
13330: LD_INT 1
13332: ARRAY
13333: PPUSH
13334: LD_VAR 0 33
13338: PUSH
13339: LD_INT 1
13341: ARRAY
13342: PUSH
13343: LD_INT 2
13345: ARRAY
13346: PPUSH
13347: LD_VAR 0 33
13351: PUSH
13352: LD_INT 1
13354: ARRAY
13355: PUSH
13356: LD_INT 3
13358: ARRAY
13359: PPUSH
13360: LD_VAR 0 33
13364: PUSH
13365: LD_INT 1
13367: ARRAY
13368: PUSH
13369: LD_INT 4
13371: ARRAY
13372: PPUSH
13373: CALL_OW 145
// end ; if tag = tCrates then
13377: LD_VAR 0 15
13381: PUSH
13382: LD_INT 2
13384: EQUAL
13385: IFFALSE 13522
// begin if IsInUnit ( i ) then
13387: LD_VAR 0 9
13391: PPUSH
13392: CALL_OW 310
13396: IFFALSE 13409
// begin ComExitBuilding ( i ) ;
13398: LD_VAR 0 9
13402: PPUSH
13403: CALL_OW 122
// continue ;
13407: GO 12704
// end ; if not cr then
13409: LD_VAR 0 17
13413: NOT
13414: IFFALSE 13430
// begin SetTag ( i , 0 ) ;
13416: LD_VAR 0 9
13420: PPUSH
13421: LD_INT 0
13423: PPUSH
13424: CALL_OW 109
// continue ;
13428: GO 12704
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
13430: LD_VAR 0 9
13434: PPUSH
13435: CALL_OW 314
13439: NOT
13440: PUSH
13441: LD_INT 81
13443: PUSH
13444: LD_VAR 0 1
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: PUSH
13453: LD_INT 92
13455: PUSH
13456: LD_VAR 0 17
13460: PUSH
13461: LD_INT 1
13463: ARRAY
13464: PUSH
13465: LD_VAR 0 17
13469: PUSH
13470: LD_INT 2
13472: ARRAY
13473: PUSH
13474: LD_INT 12
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: PPUSH
13487: CALL_OW 69
13491: NOT
13492: AND
13493: IFFALSE 13522
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
13495: LD_VAR 0 9
13499: PPUSH
13500: LD_VAR 0 17
13504: PUSH
13505: LD_INT 1
13507: ARRAY
13508: PPUSH
13509: LD_VAR 0 17
13513: PUSH
13514: LD_INT 2
13516: ARRAY
13517: PPUSH
13518: CALL_OW 117
// end ; end ;
13522: GO 12704
13524: POP
13525: POP
// end ; if vehicles then
13526: LD_VAR 0 26
13530: IFFALSE 14330
// begin vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ] , [ f_ok ] ] ) ;
13532: LD_ADDR_VAR 0 26
13536: PUSH
13537: LD_VAR 0 26
13541: PPUSH
13542: LD_INT 3
13544: PUSH
13545: LD_INT 2
13547: PUSH
13548: LD_INT 34
13550: PUSH
13551: LD_INT 88
13553: PUSH
13554: EMPTY
13555: LIST
13556: LIST
13557: PUSH
13558: LD_INT 34
13560: PUSH
13561: LD_INT 32
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: PUSH
13568: EMPTY
13569: LIST
13570: LIST
13571: LIST
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: PUSH
13577: LD_INT 50
13579: PUSH
13580: EMPTY
13581: LIST
13582: PUSH
13583: EMPTY
13584: LIST
13585: LIST
13586: PPUSH
13587: CALL_OW 72
13591: ST_TO_ADDR
// if vehicles then
13592: LD_VAR 0 26
13596: IFFALSE 14330
// begin for i in vehicles do
13598: LD_ADDR_VAR 0 9
13602: PUSH
13603: LD_VAR 0 26
13607: PUSH
13608: FOR_IN
13609: IFFALSE 14328
// begin tag := GetTag ( i ) ;
13611: LD_ADDR_VAR 0 15
13615: PUSH
13616: LD_VAR 0 9
13620: PPUSH
13621: CALL_OW 110
13625: ST_TO_ADDR
// if not tag then
13626: LD_VAR 0 15
13630: NOT
13631: IFFALSE 13777
// begin if GetControl ( i ) = control_manual then
13633: LD_VAR 0 9
13637: PPUSH
13638: CALL_OW 263
13642: PUSH
13643: LD_INT 1
13645: EQUAL
13646: IFFALSE 13763
// begin drivers := arDrivers ;
13648: LD_ADDR_VAR 0 24
13652: PUSH
13653: LD_EXP 48
13657: ST_TO_ADDR
// if not drivers then
13658: LD_VAR 0 24
13662: NOT
13663: IFFALSE 13743
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
13665: LD_ADDR_VAR 0 24
13669: PUSH
13670: LD_VAR 0 14
13674: PPUSH
13675: LD_INT 3
13677: PUSH
13678: LD_INT 120
13680: PUSH
13681: LD_INT 7
13683: PUSH
13684: EMPTY
13685: LIST
13686: LIST
13687: PUSH
13688: EMPTY
13689: LIST
13690: LIST
13691: PPUSH
13692: CALL_OW 72
13696: ST_TO_ADDR
// if drivers then
13697: LD_VAR 0 24
13701: IFFALSE 13743
// begin SetTag ( drivers [ 1 ] , tMech ) ;
13703: LD_VAR 0 24
13707: PUSH
13708: LD_INT 1
13710: ARRAY
13711: PPUSH
13712: LD_INT 7
13714: PPUSH
13715: CALL_OW 109
// arDrivers := Join ( arDrivers , drivers [ 1 ] ) ;
13719: LD_ADDR_EXP 48
13723: PUSH
13724: LD_EXP 48
13728: PPUSH
13729: LD_VAR 0 24
13733: PUSH
13734: LD_INT 1
13736: ARRAY
13737: PPUSH
13738: CALL 80110 0 2
13742: ST_TO_ADDR
// end ; end ; if drivers then
13743: LD_VAR 0 24
13747: IFFALSE 13761
// SetTag ( i , tBusy ) ;
13749: LD_VAR 0 9
13753: PPUSH
13754: LD_INT 8
13756: PPUSH
13757: CALL_OW 109
// continue ;
13761: GO 13608
// end ; SetTag ( i , tBusy ) ;
13763: LD_VAR 0 9
13767: PPUSH
13768: LD_INT 8
13770: PPUSH
13771: CALL_OW 109
// end else
13775: GO 14326
// if tag = tBusy then
13777: LD_VAR 0 15
13781: PUSH
13782: LD_INT 8
13784: EQUAL
13785: IFFALSE 13997
// begin if GetLives ( i ) = 1000 then
13787: LD_VAR 0 9
13791: PPUSH
13792: CALL_OW 256
13796: PUSH
13797: LD_INT 1000
13799: EQUAL
13800: IFFALSE 13995
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
13802: LD_VAR 0 9
13806: PPUSH
13807: CALL_OW 263
13811: PUSH
13812: LD_INT 1
13814: EQUAL
13815: PUSH
13816: LD_VAR 0 9
13820: PPUSH
13821: CALL_OW 311
13825: NOT
13826: AND
13827: IFFALSE 13983
// begin drivers := arDrivers ;
13829: LD_ADDR_VAR 0 24
13833: PUSH
13834: LD_EXP 48
13838: ST_TO_ADDR
// if not drivers then
13839: LD_VAR 0 24
13843: NOT
13844: IFFALSE 13860
// begin SetTag ( i , 0 ) ;
13846: LD_VAR 0 9
13850: PPUSH
13851: LD_INT 0
13853: PPUSH
13854: CALL_OW 109
// continue ;
13858: GO 13608
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
13860: LD_VAR 0 24
13864: PUSH
13865: LD_INT 1
13867: ARRAY
13868: PPUSH
13869: CALL_OW 310
13873: PUSH
13874: LD_VAR 0 24
13878: PUSH
13879: LD_INT 1
13881: ARRAY
13882: PPUSH
13883: CALL 77714 0 1
13887: NOT
13888: AND
13889: IFFALSE 13904
// ComExitBuilding ( drivers [ 1 ] ) ;
13891: LD_VAR 0 24
13895: PUSH
13896: LD_INT 1
13898: ARRAY
13899: PPUSH
13900: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
13904: LD_VAR 0 26
13908: PPUSH
13909: LD_INT 120
13911: PUSH
13912: LD_INT 3
13914: PUSH
13915: EMPTY
13916: LIST
13917: LIST
13918: PPUSH
13919: CALL_OW 72
13923: PUSH
13924: LD_VAR 0 24
13928: PUSH
13929: LD_INT 1
13931: ARRAY
13932: PPUSH
13933: CALL_OW 314
13937: NOT
13938: AND
13939: PUSH
13940: LD_VAR 0 26
13944: PPUSH
13945: LD_INT 120
13947: PUSH
13948: LD_INT 3
13950: PUSH
13951: EMPTY
13952: LIST
13953: LIST
13954: PPUSH
13955: CALL_OW 72
13959: NOT
13960: OR
13961: IFFALSE 13981
// ComEnterUnit ( drivers [ 1 ] , i ) ;
13963: LD_VAR 0 24
13967: PUSH
13968: LD_INT 1
13970: ARRAY
13971: PPUSH
13972: LD_VAR 0 9
13976: PPUSH
13977: CALL_OW 120
// continue ;
13981: GO 13608
// end ; SetTag ( i , tAttack ) ;
13983: LD_VAR 0 9
13987: PPUSH
13988: LD_INT 13
13990: PPUSH
13991: CALL_OW 109
// end ; end else
13995: GO 14326
// if tag = tAttack then
13997: LD_VAR 0 15
14001: PUSH
14002: LD_INT 13
14004: EQUAL
14005: IFFALSE 14185
// begin enemy := enemyInBase ;
14007: LD_ADDR_VAR 0 21
14011: PUSH
14012: LD_VAR 0 22
14016: ST_TO_ADDR
// if not enemy then
14017: LD_VAR 0 21
14021: NOT
14022: IFFALSE 14034
// enemy := enemyOuterBase ;
14024: LD_ADDR_VAR 0 21
14028: PUSH
14029: LD_VAR 0 23
14033: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
14034: LD_VAR 0 21
14038: NOT
14039: PUSH
14040: LD_VAR 0 9
14044: PPUSH
14045: LD_VAR 0 7
14049: PUSH
14050: LD_INT 1
14052: ARRAY
14053: PPUSH
14054: LD_VAR 0 7
14058: PUSH
14059: LD_INT 2
14061: ARRAY
14062: PPUSH
14063: CALL_OW 297
14067: PUSH
14068: LD_INT 10
14070: GREATER
14071: AND
14072: IFFALSE 14103
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
14074: LD_VAR 0 9
14078: PPUSH
14079: LD_VAR 0 7
14083: PUSH
14084: LD_INT 1
14086: ARRAY
14087: PPUSH
14088: LD_VAR 0 7
14092: PUSH
14093: LD_INT 2
14095: ARRAY
14096: PPUSH
14097: CALL_OW 111
// continue ;
14101: GO 13608
// end ; if GetLives ( i ) < 650 then
14103: LD_VAR 0 9
14107: PPUSH
14108: CALL_OW 256
14112: PUSH
14113: LD_INT 650
14115: LESS
14116: IFFALSE 14159
// begin SetTag ( i , tVehRepair ) ;
14118: LD_VAR 0 9
14122: PPUSH
14123: LD_INT 9
14125: PPUSH
14126: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
14130: LD_VAR 0 9
14134: PPUSH
14135: LD_VAR 0 7
14139: PUSH
14140: LD_INT 1
14142: ARRAY
14143: PPUSH
14144: LD_VAR 0 7
14148: PUSH
14149: LD_INT 2
14151: ARRAY
14152: PPUSH
14153: CALL_OW 111
// continue ;
14157: GO 13608
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
14159: LD_VAR 0 9
14163: PPUSH
14164: LD_VAR 0 21
14168: PPUSH
14169: LD_VAR 0 9
14173: PPUSH
14174: CALL_OW 74
14178: PPUSH
14179: CALL_OW 115
// end else
14183: GO 14326
// if tag = tVehRepair then
14185: LD_VAR 0 15
14189: PUSH
14190: LD_INT 9
14192: EQUAL
14193: IFFALSE 14326
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
14195: LD_VAR 0 9
14199: PPUSH
14200: LD_VAR 0 7
14204: PUSH
14205: LD_INT 1
14207: ARRAY
14208: PPUSH
14209: LD_VAR 0 7
14213: PUSH
14214: LD_INT 2
14216: ARRAY
14217: PPUSH
14218: CALL_OW 297
14222: PUSH
14223: LD_INT 10
14225: GREATER
14226: IFFALSE 14257
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
14228: LD_VAR 0 9
14232: PPUSH
14233: LD_VAR 0 7
14237: PUSH
14238: LD_INT 1
14240: ARRAY
14241: PPUSH
14242: LD_VAR 0 7
14246: PUSH
14247: LD_INT 2
14249: ARRAY
14250: PPUSH
14251: CALL_OW 111
// continue ;
14255: GO 13608
// end ; if GetLives ( i ) = 1000 then
14257: LD_VAR 0 9
14261: PPUSH
14262: CALL_OW 256
14266: PUSH
14267: LD_INT 1000
14269: EQUAL
14270: IFFALSE 14286
// begin SetTag ( i , tBusy ) ;
14272: LD_VAR 0 9
14276: PPUSH
14277: LD_INT 8
14279: PPUSH
14280: CALL_OW 109
// continue ;
14284: GO 13608
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
14286: LD_VAR 0 9
14290: PPUSH
14291: CALL_OW 263
14295: PUSH
14296: LD_INT 1
14298: EQUAL
14299: PUSH
14300: LD_VAR 0 9
14304: PPUSH
14305: CALL_OW 311
14309: AND
14310: IFFALSE 14326
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
14312: LD_VAR 0 9
14316: PPUSH
14317: CALL_OW 311
14321: PPUSH
14322: CALL 81810 0 1
// end ; end ;
14326: GO 13608
14328: POP
14329: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
14330: LD_ADDR_VAR 0 19
14334: PUSH
14335: LD_VAR 0 5
14339: PPUSH
14340: LD_INT 2
14342: PUSH
14343: LD_INT 25
14345: PUSH
14346: LD_INT 1
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: PUSH
14353: LD_INT 25
14355: PUSH
14356: LD_INT 8
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: PUSH
14363: LD_INT 25
14365: PUSH
14366: LD_INT 5
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: PUSH
14373: LD_INT 25
14375: PUSH
14376: LD_INT 9
14378: PUSH
14379: EMPTY
14380: LIST
14381: LIST
14382: PUSH
14383: EMPTY
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: PUSH
14390: LD_INT 50
14392: PUSH
14393: EMPTY
14394: LIST
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: PPUSH
14400: CALL_OW 72
14404: ST_TO_ADDR
// if sol then
14405: LD_VAR 0 19
14409: IFFALSE 14917
// begin if enemyInBase then
14411: LD_VAR 0 22
14415: IFFALSE 14594
// begin for i in sol do
14417: LD_ADDR_VAR 0 9
14421: PUSH
14422: LD_VAR 0 19
14426: PUSH
14427: FOR_IN
14428: IFFALSE 14590
// begin tw := IsInUnit ( i ) ;
14430: LD_ADDR_VAR 0 16
14434: PUSH
14435: LD_VAR 0 9
14439: PPUSH
14440: CALL_OW 310
14444: ST_TO_ADDR
// if tw then
14445: LD_VAR 0 16
14449: IFFALSE 14532
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
14451: LD_VAR 0 16
14455: PUSH
14456: LD_INT 22
14458: PUSH
14459: LD_VAR 0 1
14463: PUSH
14464: EMPTY
14465: LIST
14466: LIST
14467: PUSH
14468: LD_INT 101
14470: PUSH
14471: LD_VAR 0 34
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: PUSH
14480: LD_INT 2
14482: PUSH
14483: LD_INT 30
14485: PUSH
14486: LD_INT 32
14488: PUSH
14489: EMPTY
14490: LIST
14491: LIST
14492: PUSH
14493: LD_INT 30
14495: PUSH
14496: LD_INT 31
14498: PUSH
14499: EMPTY
14500: LIST
14501: LIST
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: LIST
14507: PUSH
14508: EMPTY
14509: LIST
14510: LIST
14511: LIST
14512: PPUSH
14513: CALL_OW 69
14517: IN
14518: NOT
14519: IFFALSE 14530
// ComExitBuilding ( i ) ;
14521: LD_VAR 0 9
14525: PPUSH
14526: CALL_OW 122
// end else
14530: GO 14588
// if IsInArea ( i , area ) then
14532: LD_VAR 0 9
14536: PPUSH
14537: LD_VAR 0 3
14541: PPUSH
14542: CALL_OW 308
14546: IFFALSE 14574
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
14548: LD_VAR 0 9
14552: PPUSH
14553: LD_VAR 0 22
14557: PPUSH
14558: LD_VAR 0 9
14562: PPUSH
14563: CALL_OW 74
14567: PPUSH
14568: CALL_OW 115
14572: GO 14588
// ComMoveToArea ( i , area ) ;
14574: LD_VAR 0 9
14578: PPUSH
14579: LD_VAR 0 3
14583: PPUSH
14584: CALL_OW 113
// end ;
14588: GO 14427
14590: POP
14591: POP
// end else
14592: GO 14917
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
14594: LD_ADDR_VAR 0 28
14598: PUSH
14599: LD_VAR 0 3
14603: PPUSH
14604: LD_INT 3
14606: PUSH
14607: LD_INT 62
14609: PUSH
14610: EMPTY
14611: LIST
14612: PUSH
14613: EMPTY
14614: LIST
14615: LIST
14616: PUSH
14617: LD_INT 2
14619: PUSH
14620: LD_INT 30
14622: PUSH
14623: LD_INT 32
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: PUSH
14630: LD_INT 30
14632: PUSH
14633: LD_INT 4
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: PUSH
14640: LD_INT 30
14642: PUSH
14643: LD_INT 5
14645: PUSH
14646: EMPTY
14647: LIST
14648: LIST
14649: PUSH
14650: LD_INT 30
14652: PUSH
14653: LD_INT 31
14655: PUSH
14656: EMPTY
14657: LIST
14658: LIST
14659: PUSH
14660: EMPTY
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: PUSH
14667: EMPTY
14668: LIST
14669: LIST
14670: PPUSH
14671: CALL_OW 70
14675: ST_TO_ADDR
// if empty then
14676: LD_VAR 0 28
14680: IFFALSE 14697
// empty := ReverseArray ( empty ) ;
14682: LD_ADDR_VAR 0 28
14686: PUSH
14687: LD_VAR 0 28
14691: PPUSH
14692: CALL 75397 0 1
14696: ST_TO_ADDR
// for i in sol do
14697: LD_ADDR_VAR 0 9
14701: PUSH
14702: LD_VAR 0 19
14706: PUSH
14707: FOR_IN
14708: IFFALSE 14915
// begin tag := GetTag ( i ) ;
14710: LD_ADDR_VAR 0 15
14714: PUSH
14715: LD_VAR 0 9
14719: PPUSH
14720: CALL_OW 110
14724: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
14725: LD_VAR 0 9
14729: PPUSH
14730: CALL_OW 256
14734: PUSH
14735: LD_INT 1000
14737: LESS
14738: PUSH
14739: LD_VAR 0 15
14743: PUSH
14744: LD_INT 1
14746: NONEQUAL
14747: AND
14748: IFFALSE 14800
// begin SetTag ( i , tHeal ) ;
14750: LD_VAR 0 9
14754: PPUSH
14755: LD_INT 1
14757: PPUSH
14758: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
14762: LD_VAR 0 9
14766: PPUSH
14767: LD_VAR 0 6
14771: PUSH
14772: LD_INT 1
14774: ARRAY
14775: PPUSH
14776: LD_VAR 0 6
14780: PUSH
14781: LD_INT 2
14783: ARRAY
14784: PPUSH
14785: CALL_OW 111
// AddComHold ( i ) ;
14789: LD_VAR 0 9
14793: PPUSH
14794: CALL_OW 200
// continue ;
14798: GO 14707
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
14800: LD_VAR 0 9
14804: PPUSH
14805: CALL_OW 256
14809: PUSH
14810: LD_INT 1000
14812: EQUAL
14813: PUSH
14814: LD_VAR 0 15
14818: PUSH
14819: LD_INT 1
14821: EQUAL
14822: AND
14823: IFFALSE 14839
// begin SetTag ( i , 0 ) ;
14825: LD_VAR 0 9
14829: PPUSH
14830: LD_INT 0
14832: PPUSH
14833: CALL_OW 109
// continue ;
14837: GO 14707
// end ; if HasTask ( i ) then
14839: LD_VAR 0 9
14843: PPUSH
14844: CALL_OW 314
14848: IFFALSE 14852
// continue ;
14850: GO 14707
// if not IsInUnit ( i ) and not tag and empty then
14852: LD_VAR 0 9
14856: PPUSH
14857: CALL_OW 310
14861: NOT
14862: PUSH
14863: LD_VAR 0 15
14867: NOT
14868: AND
14869: PUSH
14870: LD_VAR 0 28
14874: AND
14875: IFFALSE 14913
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
14877: LD_VAR 0 9
14881: PPUSH
14882: LD_VAR 0 28
14886: PUSH
14887: LD_INT 1
14889: ARRAY
14890: PPUSH
14891: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
14895: LD_ADDR_VAR 0 28
14899: PUSH
14900: LD_VAR 0 28
14904: PPUSH
14905: LD_INT 1
14907: PPUSH
14908: CALL_OW 3
14912: ST_TO_ADDR
// end ; end ;
14913: GO 14707
14915: POP
14916: POP
// end ; end ; end ;
14917: LD_VAR 0 8
14921: RET
// every 0 0$2 trigger UnitFilter ( arForce , [ f_ok ] ) do
14922: LD_EXP 52
14926: PPUSH
14927: LD_INT 50
14929: PUSH
14930: EMPTY
14931: LIST
14932: PPUSH
14933: CALL_OW 72
14937: IFFALSE 14990
14939: GO 14941
14941: DISABLE
// begin enable ;
14942: ENABLE
// BaseScript ( botSides [ 2 ] , 2 , arBaseArea , arBaseOuterArea , arForce , [ 210 , 43 ] , [ 194 , 28 ] ) ;
14943: LD_EXP 3
14947: PUSH
14948: LD_INT 2
14950: ARRAY
14951: PPUSH
14952: LD_INT 2
14954: PPUSH
14955: LD_INT 5
14957: PPUSH
14958: LD_INT 6
14960: PPUSH
14961: LD_EXP 52
14965: PPUSH
14966: LD_INT 210
14968: PUSH
14969: LD_INT 43
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: PPUSH
14976: LD_INT 194
14978: PUSH
14979: LD_INT 28
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: PPUSH
14986: CALL 11402 0 7
// end ;
14990: END
// every 0 0$01 + 0 0$3 trigger arMinesList do var i , p , tmp ;
14991: LD_EXP 51
14995: IFFALSE 15215
14997: GO 14999
14999: DISABLE
15000: LD_INT 0
15002: PPUSH
15003: PPUSH
15004: PPUSH
// begin enable ;
15005: ENABLE
// p := 1 ;
15006: LD_ADDR_VAR 0 2
15010: PUSH
15011: LD_INT 1
15013: ST_TO_ADDR
// for i := 1 to Count ( arMinesList ) div 2 do
15014: LD_ADDR_VAR 0 1
15018: PUSH
15019: DOUBLE
15020: LD_INT 1
15022: DEC
15023: ST_TO_ADDR
15024: LD_EXP 51
15028: PPUSH
15029: CALL 44521 0 1
15033: PUSH
15034: LD_INT 2
15036: DIV
15037: PUSH
15038: FOR_TO
15039: IFFALSE 15213
// begin tmp := HexInfo ( arMinesList [ p ] , arMinesList [ p + 1 ] ) ;
15041: LD_ADDR_VAR 0 3
15045: PUSH
15046: LD_EXP 51
15050: PUSH
15051: LD_VAR 0 2
15055: ARRAY
15056: PPUSH
15057: LD_EXP 51
15061: PUSH
15062: LD_VAR 0 2
15066: PUSH
15067: LD_INT 1
15069: PLUS
15070: ARRAY
15071: PPUSH
15072: CALL_OW 428
15076: ST_TO_ADDR
// if tmp then
15077: LD_VAR 0 3
15081: IFFALSE 15197
// if GetSide ( tmp ) <> botSides [ 2 ] then
15083: LD_VAR 0 3
15087: PPUSH
15088: CALL_OW 255
15092: PUSH
15093: LD_EXP 3
15097: PUSH
15098: LD_INT 2
15100: ARRAY
15101: NONEQUAL
15102: IFFALSE 15197
// begin LaunchMineAtPos ( arMinesList [ p ] , arMinesList [ p + 1 ] , botSides [ 2 ] ) ;
15104: LD_EXP 51
15108: PUSH
15109: LD_VAR 0 2
15113: ARRAY
15114: PPUSH
15115: LD_EXP 51
15119: PUSH
15120: LD_VAR 0 2
15124: PUSH
15125: LD_INT 1
15127: PLUS
15128: ARRAY
15129: PPUSH
15130: LD_EXP 3
15134: PUSH
15135: LD_INT 2
15137: ARRAY
15138: PPUSH
15139: CALL_OW 456
// arMinesList := Delete ( arMinesList , p ) ;
15143: LD_ADDR_EXP 51
15147: PUSH
15148: LD_EXP 51
15152: PPUSH
15153: LD_VAR 0 2
15157: PPUSH
15158: CALL_OW 3
15162: ST_TO_ADDR
// arMinesList := Delete ( arMinesList , p ) ;
15163: LD_ADDR_EXP 51
15167: PUSH
15168: LD_EXP 51
15172: PPUSH
15173: LD_VAR 0 2
15177: PPUSH
15178: CALL_OW 3
15182: ST_TO_ADDR
// p := p - 2 ;
15183: LD_ADDR_VAR 0 2
15187: PUSH
15188: LD_VAR 0 2
15192: PUSH
15193: LD_INT 2
15195: MINUS
15196: ST_TO_ADDR
// end ; p := p + 2 ;
15197: LD_ADDR_VAR 0 2
15201: PUSH
15202: LD_VAR 0 2
15206: PUSH
15207: LD_INT 2
15209: PLUS
15210: ST_TO_ADDR
// end ;
15211: GO 15038
15213: POP
15214: POP
// end ;
15215: PPOPN 3
15217: END
// every 3 3$00 trigger IsOk ( arDep ) and not arConstructList do
15218: LD_INT 32
15220: PPUSH
15221: CALL_OW 302
15225: PUSH
15226: LD_EXP 44
15230: NOT
15231: AND
15232: IFFALSE 15302
15234: GO 15236
15236: DISABLE
// begin enable ;
15237: ENABLE
// arConstructList := [ [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] , [ ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun ] ] ;
15238: LD_ADDR_EXP 44
15242: PUSH
15243: LD_INT 14
15245: PUSH
15246: LD_INT 1
15248: PUSH
15249: LD_INT 1
15251: PUSH
15252: LD_INT 27
15254: PUSH
15255: EMPTY
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: PUSH
15261: LD_INT 14
15263: PUSH
15264: LD_INT 1
15266: PUSH
15267: LD_INT 1
15269: PUSH
15270: LD_INT 26
15272: PUSH
15273: EMPTY
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: PUSH
15279: LD_INT 14
15281: PUSH
15282: LD_INT 1
15284: PUSH
15285: LD_INT 1
15287: PUSH
15288: LD_INT 27
15290: PUSH
15291: EMPTY
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: PUSH
15297: EMPTY
15298: LIST
15299: LIST
15300: LIST
15301: ST_TO_ADDR
// end ; end_of_file
15302: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if not GetSide ( un ) in botSides then
15303: LD_VAR 0 1
15307: PPUSH
15308: CALL_OW 255
15312: PUSH
15313: LD_EXP 3
15317: IN
15318: NOT
15319: IFFALSE 15323
// exit ;
15321: GO 15380
// if not un in [ Sikorski ] then
15323: LD_VAR 0 1
15327: PUSH
15328: LD_EXP 32
15332: PUSH
15333: EMPTY
15334: LIST
15335: IN
15336: NOT
15337: IFFALSE 15358
// MultiplayerEvent_UnitKilled ( un , killerSide , false ) else
15339: LD_VAR 0 1
15343: PPUSH
15344: LD_VAR 0 2
15348: PPUSH
15349: LD_INT 0
15351: PPUSH
15352: CALL 5669 0 3
15356: GO 15380
// MultiplayerEvent_UnitKilled ( un , killerSide , Multiplayer_GetCondition ( 5 ) ) ;
15358: LD_VAR 0 1
15362: PPUSH
15363: LD_VAR 0 2
15367: PPUSH
15368: LD_INT 5
15370: PPUSH
15371: CALL 4996 0 1
15375: PPUSH
15376: CALL 5669 0 3
// end ;
15380: PPOPN 3
15382: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
15383: LD_INT 0
15385: PPUSH
15386: PPUSH
15387: PPUSH
15388: PPUSH
15389: PPUSH
15390: PPUSH
15391: PPUSH
15392: PPUSH
15393: PPUSH
15394: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
15395: LD_VAR 0 1
15399: PPUSH
15400: CALL 37525 0 1
// side := GetSide ( un ) ;
15404: LD_ADDR_VAR 0 3
15408: PUSH
15409: LD_VAR 0 1
15413: PPUSH
15414: CALL_OW 255
15418: ST_TO_ADDR
// if multi_sides [ side ] then
15419: LD_EXP 7
15423: PUSH
15424: LD_VAR 0 3
15428: ARRAY
15429: IFFALSE 15455
// if GetType ( un ) = unit_human then
15431: LD_VAR 0 1
15435: PPUSH
15436: CALL_OW 247
15440: PUSH
15441: LD_INT 1
15443: EQUAL
15444: IFFALSE 15455
// MultiplayerEvent_HumanLost ( side ) ;
15446: LD_VAR 0 3
15450: PPUSH
15451: CALL 5555 0 1
// if side in botSides then
15455: LD_VAR 0 3
15459: PUSH
15460: LD_EXP 3
15464: IN
15465: IFFALSE 16480
// begin if side = botSides [ 1 ] then
15467: LD_VAR 0 3
15471: PUSH
15472: LD_EXP 3
15476: PUSH
15477: LD_INT 1
15479: ARRAY
15480: EQUAL
15481: IFFALSE 15966
// begin if un in amForce then
15483: LD_VAR 0 1
15487: PUSH
15488: LD_EXP 40
15492: IN
15493: IFFALSE 15511
// amForce := amForce diff un ;
15495: LD_ADDR_EXP 40
15499: PUSH
15500: LD_EXP 40
15504: PUSH
15505: LD_VAR 0 1
15509: DIFF
15510: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic and amMechSpawnCounter then
15511: LD_VAR 0 1
15515: PPUSH
15516: CALL_OW 257
15520: PUSH
15521: LD_INT 3
15523: EQUAL
15524: PUSH
15525: LD_EXP 42
15529: AND
15530: IFFALSE 15671
// begin if not IsOk ( amDep ) then
15532: LD_INT 1
15534: PPUSH
15535: CALL_OW 302
15539: NOT
15540: IFFALSE 15544
// exit ;
15542: GO 16552
// amMechSpawnCounter := Dec ( amMechSpawnCounter ) ;
15544: LD_ADDR_EXP 42
15548: PUSH
15549: LD_EXP 42
15553: PPUSH
15554: CALL 81493 0 1
15558: ST_TO_ADDR
// uc_side := botSides [ 1 ] ;
15559: LD_ADDR_OWVAR 20
15563: PUSH
15564: LD_EXP 3
15568: PUSH
15569: LD_INT 1
15571: ARRAY
15572: ST_TO_ADDR
// uc_nation := nation_american ;
15573: LD_ADDR_OWVAR 21
15577: PUSH
15578: LD_INT 1
15580: ST_TO_ADDR
// PrepareMechanic ( false , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
15581: LD_INT 0
15583: PPUSH
15584: LD_INT 1
15586: PUSH
15587: LD_INT 2
15589: PUSH
15590: LD_INT 3
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: LIST
15597: PUSH
15598: LD_OWVAR 67
15602: ARRAY
15603: PPUSH
15604: CALL_OW 383
// un := CreateHuman ;
15608: LD_ADDR_VAR 0 1
15612: PUSH
15613: CALL_OW 44
15617: ST_TO_ADDR
// PlaceUnitXY ( un , 52 , 2 , false ) ;
15618: LD_VAR 0 1
15622: PPUSH
15623: LD_INT 52
15625: PPUSH
15626: LD_INT 2
15628: PPUSH
15629: LD_INT 0
15631: PPUSH
15632: CALL_OW 48
// ComMoveXY ( un , 23 , 19 ) ;
15636: LD_VAR 0 1
15640: PPUSH
15641: LD_INT 23
15643: PPUSH
15644: LD_INT 19
15646: PPUSH
15647: CALL_OW 111
// amForce := Join ( amForce , un ) ;
15651: LD_ADDR_EXP 40
15655: PUSH
15656: LD_EXP 40
15660: PPUSH
15661: LD_VAR 0 1
15665: PPUSH
15666: CALL 80110 0 2
15670: ST_TO_ADDR
// end ; if GetType ( un ) = unit_building then
15671: LD_VAR 0 1
15675: PPUSH
15676: CALL_OW 247
15680: PUSH
15681: LD_INT 3
15683: EQUAL
15684: IFFALSE 15827
// begin btype := GetBType ( un ) ;
15686: LD_ADDR_VAR 0 11
15690: PUSH
15691: LD_VAR 0 1
15695: PPUSH
15696: CALL_OW 266
15700: ST_TO_ADDR
// if btype = b_barracks then
15701: LD_VAR 0 11
15705: PUSH
15706: LD_INT 5
15708: EQUAL
15709: IFFALSE 15719
// btype := b_armoury ;
15711: LD_ADDR_VAR 0 11
15715: PUSH
15716: LD_INT 4
15718: ST_TO_ADDR
// if btype = b_factory then
15719: LD_VAR 0 11
15723: PUSH
15724: LD_INT 3
15726: EQUAL
15727: IFFALSE 15737
// btype := b_workshop ;
15729: LD_ADDR_VAR 0 11
15733: PUSH
15734: LD_INT 2
15736: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
15737: LD_VAR 0 11
15741: PUSH
15742: LD_INT 8
15744: PUSH
15745: LD_INT 7
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: IN
15752: IFFALSE 15762
// btype := b_lab ;
15754: LD_ADDR_VAR 0 11
15758: PUSH
15759: LD_INT 6
15761: ST_TO_ADDR
// amBuildings := Replace ( amBuildings , amBuildings + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
15762: LD_ADDR_EXP 35
15766: PUSH
15767: LD_EXP 35
15771: PPUSH
15772: LD_EXP 35
15776: PUSH
15777: LD_INT 1
15779: PLUS
15780: PPUSH
15781: LD_VAR 0 11
15785: PUSH
15786: LD_VAR 0 1
15790: PPUSH
15791: CALL_OW 250
15795: PUSH
15796: LD_VAR 0 1
15800: PPUSH
15801: CALL_OW 251
15805: PUSH
15806: LD_VAR 0 1
15810: PPUSH
15811: CALL_OW 254
15815: PUSH
15816: EMPTY
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: PPUSH
15822: CALL_OW 1
15826: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
15827: LD_VAR 0 1
15831: PPUSH
15832: CALL_OW 247
15836: PUSH
15837: LD_INT 2
15839: EQUAL
15840: IFFALSE 15966
// begin chassis := GetChassis ( un ) ;
15842: LD_ADDR_VAR 0 5
15846: PUSH
15847: LD_VAR 0 1
15851: PPUSH
15852: CALL_OW 265
15856: ST_TO_ADDR
// engine := GetEngine ( un ) ;
15857: LD_ADDR_VAR 0 6
15861: PUSH
15862: LD_VAR 0 1
15866: PPUSH
15867: CALL_OW 262
15871: ST_TO_ADDR
// control := GetControl ( un ) ;
15872: LD_ADDR_VAR 0 7
15876: PUSH
15877: LD_VAR 0 1
15881: PPUSH
15882: CALL_OW 263
15886: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
15887: LD_ADDR_VAR 0 8
15891: PUSH
15892: LD_VAR 0 1
15896: PPUSH
15897: CALL_OW 264
15901: ST_TO_ADDR
// tmp := Produce ( factory , chassis , engine , control , weapon ) ;
15902: LD_ADDR_VAR 0 9
15906: PUSH
15907: LD_VAR 0 10
15911: PPUSH
15912: LD_VAR 0 5
15916: PPUSH
15917: LD_VAR 0 6
15921: PPUSH
15922: LD_VAR 0 7
15926: PPUSH
15927: LD_VAR 0 8
15931: PPUSH
15932: CALL 44879 0 5
15936: ST_TO_ADDR
// amConstructList := Replace ( amConstructList , amConstructList + 1 , tmp ) ;
15937: LD_ADDR_EXP 34
15941: PUSH
15942: LD_EXP 34
15946: PPUSH
15947: LD_EXP 34
15951: PUSH
15952: LD_INT 1
15954: PLUS
15955: PPUSH
15956: LD_VAR 0 9
15960: PPUSH
15961: CALL_OW 1
15965: ST_TO_ADDR
// end ; end ; if side = botSides [ 2 ] then
15966: LD_VAR 0 3
15970: PUSH
15971: LD_EXP 3
15975: PUSH
15976: LD_INT 2
15978: ARRAY
15979: EQUAL
15980: IFFALSE 16480
// begin if un in arForce then
15982: LD_VAR 0 1
15986: PUSH
15987: LD_EXP 52
15991: IN
15992: IFFALSE 16010
// arForce := arForce diff un ;
15994: LD_ADDR_EXP 52
15998: PUSH
15999: LD_EXP 52
16003: PUSH
16004: LD_VAR 0 1
16008: DIFF
16009: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic and GetTag ( un ) < 999 and arMechSpawnCounter then
16010: LD_VAR 0 1
16014: PPUSH
16015: CALL_OW 257
16019: PUSH
16020: LD_INT 3
16022: EQUAL
16023: PUSH
16024: LD_VAR 0 1
16028: PPUSH
16029: CALL_OW 110
16033: PUSH
16034: LD_INT 999
16036: LESS
16037: AND
16038: PUSH
16039: LD_EXP 49
16043: AND
16044: IFFALSE 16185
// begin if not IsOk ( arDep ) then
16046: LD_INT 32
16048: PPUSH
16049: CALL_OW 302
16053: NOT
16054: IFFALSE 16058
// exit ;
16056: GO 16552
// arMechSpawnCounter := Dec ( arMechSpawnCounter ) ;
16058: LD_ADDR_EXP 49
16062: PUSH
16063: LD_EXP 49
16067: PPUSH
16068: CALL 81493 0 1
16072: ST_TO_ADDR
// uc_side := botSides [ 2 ] ;
16073: LD_ADDR_OWVAR 20
16077: PUSH
16078: LD_EXP 3
16082: PUSH
16083: LD_INT 2
16085: ARRAY
16086: ST_TO_ADDR
// uc_nation := nation_arabian ;
16087: LD_ADDR_OWVAR 21
16091: PUSH
16092: LD_INT 2
16094: ST_TO_ADDR
// PrepareMechanic ( false , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
16095: LD_INT 0
16097: PPUSH
16098: LD_INT 1
16100: PUSH
16101: LD_INT 2
16103: PUSH
16104: LD_INT 3
16106: PUSH
16107: EMPTY
16108: LIST
16109: LIST
16110: LIST
16111: PUSH
16112: LD_OWVAR 67
16116: ARRAY
16117: PPUSH
16118: CALL_OW 383
// un := CreateHuman ;
16122: LD_ADDR_VAR 0 1
16126: PUSH
16127: CALL_OW 44
16131: ST_TO_ADDR
// PlaceUnitXY ( un , 178 , 2 , false ) ;
16132: LD_VAR 0 1
16136: PPUSH
16137: LD_INT 178
16139: PPUSH
16140: LD_INT 2
16142: PPUSH
16143: LD_INT 0
16145: PPUSH
16146: CALL_OW 48
// ComMoveXY ( un , 204 , 35 ) ;
16150: LD_VAR 0 1
16154: PPUSH
16155: LD_INT 204
16157: PPUSH
16158: LD_INT 35
16160: PPUSH
16161: CALL_OW 111
// arForce := Join ( arForce , un ) ;
16165: LD_ADDR_EXP 52
16169: PUSH
16170: LD_EXP 52
16174: PPUSH
16175: LD_VAR 0 1
16179: PPUSH
16180: CALL 80110 0 2
16184: ST_TO_ADDR
// end ; if GetType ( un ) = unit_building then
16185: LD_VAR 0 1
16189: PPUSH
16190: CALL_OW 247
16194: PUSH
16195: LD_INT 3
16197: EQUAL
16198: IFFALSE 16341
// begin btype := GetBType ( un ) ;
16200: LD_ADDR_VAR 0 11
16204: PUSH
16205: LD_VAR 0 1
16209: PPUSH
16210: CALL_OW 266
16214: ST_TO_ADDR
// if btype = b_barracks then
16215: LD_VAR 0 11
16219: PUSH
16220: LD_INT 5
16222: EQUAL
16223: IFFALSE 16233
// btype := b_armoury ;
16225: LD_ADDR_VAR 0 11
16229: PUSH
16230: LD_INT 4
16232: ST_TO_ADDR
// if btype = b_factory then
16233: LD_VAR 0 11
16237: PUSH
16238: LD_INT 3
16240: EQUAL
16241: IFFALSE 16251
// btype := b_workshop ;
16243: LD_ADDR_VAR 0 11
16247: PUSH
16248: LD_INT 2
16250: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
16251: LD_VAR 0 11
16255: PUSH
16256: LD_INT 8
16258: PUSH
16259: LD_INT 7
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: IN
16266: IFFALSE 16276
// btype := b_lab ;
16268: LD_ADDR_VAR 0 11
16272: PUSH
16273: LD_INT 6
16275: ST_TO_ADDR
// arBuildings := Replace ( arBuildings , arBuildings + 1 , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
16276: LD_ADDR_EXP 45
16280: PUSH
16281: LD_EXP 45
16285: PPUSH
16286: LD_EXP 45
16290: PUSH
16291: LD_INT 1
16293: PLUS
16294: PPUSH
16295: LD_VAR 0 11
16299: PUSH
16300: LD_VAR 0 1
16304: PPUSH
16305: CALL_OW 250
16309: PUSH
16310: LD_VAR 0 1
16314: PPUSH
16315: CALL_OW 251
16319: PUSH
16320: LD_VAR 0 1
16324: PPUSH
16325: CALL_OW 254
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: PPUSH
16336: CALL_OW 1
16340: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
16341: LD_VAR 0 1
16345: PPUSH
16346: CALL_OW 247
16350: PUSH
16351: LD_INT 2
16353: EQUAL
16354: IFFALSE 16480
// begin chassis := GetChassis ( un ) ;
16356: LD_ADDR_VAR 0 5
16360: PUSH
16361: LD_VAR 0 1
16365: PPUSH
16366: CALL_OW 265
16370: ST_TO_ADDR
// engine := GetEngine ( un ) ;
16371: LD_ADDR_VAR 0 6
16375: PUSH
16376: LD_VAR 0 1
16380: PPUSH
16381: CALL_OW 262
16385: ST_TO_ADDR
// control := GetControl ( un ) ;
16386: LD_ADDR_VAR 0 7
16390: PUSH
16391: LD_VAR 0 1
16395: PPUSH
16396: CALL_OW 263
16400: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
16401: LD_ADDR_VAR 0 8
16405: PUSH
16406: LD_VAR 0 1
16410: PPUSH
16411: CALL_OW 264
16415: ST_TO_ADDR
// tmp := Produce ( factory , chassis , engine , control , weapon ) ;
16416: LD_ADDR_VAR 0 9
16420: PUSH
16421: LD_VAR 0 10
16425: PPUSH
16426: LD_VAR 0 5
16430: PPUSH
16431: LD_VAR 0 6
16435: PPUSH
16436: LD_VAR 0 7
16440: PPUSH
16441: LD_VAR 0 8
16445: PPUSH
16446: CALL 44879 0 5
16450: ST_TO_ADDR
// arConstructList := Replace ( arConstructList , arConstructList + 1 , tmp ) ;
16451: LD_ADDR_EXP 44
16455: PUSH
16456: LD_EXP 44
16460: PPUSH
16461: LD_EXP 44
16465: PUSH
16466: LD_INT 1
16468: PLUS
16469: PPUSH
16470: LD_VAR 0 9
16474: PPUSH
16475: CALL_OW 1
16479: ST_TO_ADDR
// end ; end ; end ; if multi_commanders and multi_custom_commanders then
16480: LD_EXP 24
16484: PUSH
16485: LD_EXP 16
16489: AND
16490: IFFALSE 16552
// if un in multi_commanders then
16492: LD_VAR 0 1
16496: PUSH
16497: LD_EXP 24
16501: IN
16502: IFFALSE 16552
// begin multi_loosers := Replace ( multi_loosers , side , 1 ) ;
16504: LD_ADDR_EXP 25
16508: PUSH
16509: LD_EXP 25
16513: PPUSH
16514: LD_VAR 0 3
16518: PPUSH
16519: LD_INT 1
16521: PPUSH
16522: CALL_OW 1
16526: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
16527: LD_ADDR_EXP 24
16531: PUSH
16532: LD_EXP 24
16536: PUSH
16537: LD_VAR 0 1
16541: DIFF
16542: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
16543: LD_VAR 0 3
16547: PPUSH
16548: CALL 5029 0 1
// end ; end ;
16552: PPOPN 11
16554: END
// on BuildingComplete ( building ) do var i , j , side , btype ;
16555: LD_INT 0
16557: PPUSH
16558: PPUSH
16559: PPUSH
16560: PPUSH
// begin side := GetSide ( building ) ;
16561: LD_ADDR_VAR 0 4
16565: PUSH
16566: LD_VAR 0 1
16570: PPUSH
16571: CALL_OW 255
16575: ST_TO_ADDR
// if multi_sides [ side ] then
16576: LD_EXP 7
16580: PUSH
16581: LD_VAR 0 4
16585: ARRAY
16586: IFFALSE 16607
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
16588: LD_VAR 0 4
16592: PPUSH
16593: LD_VAR 0 1
16597: PPUSH
16598: CALL_OW 266
16602: PPUSH
16603: CALL 5599 0 2
// if side = botSides [ 1 ] then
16607: LD_VAR 0 4
16611: PUSH
16612: LD_EXP 3
16616: PUSH
16617: LD_INT 1
16619: ARRAY
16620: EQUAL
16621: IFFALSE 16705
// begin amBuildings := Delete ( amBuildings , 1 ) ;
16623: LD_ADDR_EXP 35
16627: PUSH
16628: LD_EXP 35
16632: PPUSH
16633: LD_INT 1
16635: PPUSH
16636: CALL_OW 3
16640: ST_TO_ADDR
// btype := GetBType ( building ) ;
16641: LD_ADDR_VAR 0 5
16645: PUSH
16646: LD_VAR 0 1
16650: PPUSH
16651: CALL_OW 266
16655: ST_TO_ADDR
// case btype of b_workshop :
16656: LD_VAR 0 5
16660: PUSH
16661: LD_INT 2
16663: DOUBLE
16664: EQUAL
16665: IFTRUE 16669
16667: GO 16681
16669: POP
// ComUpgrade ( building ) ; b_lab :
16670: LD_VAR 0 1
16674: PPUSH
16675: CALL_OW 146
16679: GO 16705
16681: LD_INT 6
16683: DOUBLE
16684: EQUAL
16685: IFTRUE 16689
16687: GO 16704
16689: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
16690: LD_VAR 0 1
16694: PPUSH
16695: LD_INT 10
16697: PPUSH
16698: CALL_OW 207
// end ; end ;
16702: GO 16705
16704: POP
// end ; if side = botSides [ 2 ] then
16705: LD_VAR 0 4
16709: PUSH
16710: LD_EXP 3
16714: PUSH
16715: LD_INT 2
16717: ARRAY
16718: EQUAL
16719: IFFALSE 16815
// begin arBuildings := Delete ( arBuildings , 1 ) ;
16721: LD_ADDR_EXP 45
16725: PUSH
16726: LD_EXP 45
16730: PPUSH
16731: LD_INT 1
16733: PPUSH
16734: CALL_OW 3
16738: ST_TO_ADDR
// btype := GetBType ( building ) ;
16739: LD_ADDR_VAR 0 5
16743: PUSH
16744: LD_VAR 0 1
16748: PPUSH
16749: CALL_OW 266
16753: ST_TO_ADDR
// case btype of b_workshop :
16754: LD_VAR 0 5
16758: PUSH
16759: LD_INT 2
16761: DOUBLE
16762: EQUAL
16763: IFTRUE 16767
16765: GO 16779
16767: POP
// ComUpgrade ( building ) ; b_lab :
16768: LD_VAR 0 1
16772: PPUSH
16773: CALL_OW 146
16777: GO 16815
16779: LD_INT 6
16781: DOUBLE
16782: EQUAL
16783: IFTRUE 16787
16785: GO 16814
16787: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
16788: LD_VAR 0 1
16792: PPUSH
16793: LD_INT 10
16795: PPUSH
16796: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_opto ) ;
16800: LD_VAR 0 1
16804: PPUSH
16805: LD_INT 15
16807: PPUSH
16808: CALL_OW 207
// end ; end ;
16812: GO 16815
16814: POP
// end ; end ;
16815: PPOPN 5
16817: END
// on EvacuateBuilding ( building , unit ) do begin if not GetSide ( unit ) in botSides then
16818: LD_VAR 0 2
16822: PPUSH
16823: CALL_OW 255
16827: PUSH
16828: LD_EXP 3
16832: IN
16833: NOT
16834: IFFALSE 16838
// exit ;
16836: GO 17001
// if unit in arForceTmp and GetBType ( building ) = b_breastwork then
16838: LD_VAR 0 2
16842: PUSH
16843: LD_EXP 53
16847: IN
16848: PUSH
16849: LD_VAR 0 1
16853: PPUSH
16854: CALL_OW 266
16858: PUSH
16859: LD_INT 31
16861: EQUAL
16862: AND
16863: IFFALSE 16887
// begin ComEnterUnit ( unit , HexInfo ( 215 , 102 ) ) ;
16865: LD_VAR 0 2
16869: PPUSH
16870: LD_INT 215
16872: PPUSH
16873: LD_INT 102
16875: PPUSH
16876: CALL_OW 428
16880: PPUSH
16881: CALL_OW 120
// exit ;
16885: GO 17001
// end ; if HexInfo ( 44 , 78 ) then
16887: LD_INT 44
16889: PPUSH
16890: LD_INT 78
16892: PPUSH
16893: CALL_OW 428
16897: IFFALSE 16936
// begin ComMoveXY ( unit , 26 , 40 ) ;
16899: LD_VAR 0 2
16903: PPUSH
16904: LD_INT 26
16906: PPUSH
16907: LD_INT 40
16909: PPUSH
16910: CALL_OW 111
// amForce := Join ( amForce , unit ) ;
16914: LD_ADDR_EXP 40
16918: PUSH
16919: LD_EXP 40
16923: PPUSH
16924: LD_VAR 0 2
16928: PPUSH
16929: CALL 80110 0 2
16933: ST_TO_ADDR
// exit ;
16934: GO 17001
// end ; if GetX ( building ) > 71 then
16936: LD_VAR 0 1
16940: PPUSH
16941: CALL_OW 250
16945: PUSH
16946: LD_INT 71
16948: GREATER
16949: IFFALSE 17001
// begin ComMoveXY ( unit , 69 , 39 ) ;
16951: LD_VAR 0 2
16955: PPUSH
16956: LD_INT 69
16958: PPUSH
16959: LD_INT 39
16961: PPUSH
16962: CALL_OW 111
// AddComMoveXY ( unit , 26 , 40 ) ;
16966: LD_VAR 0 2
16970: PPUSH
16971: LD_INT 26
16973: PPUSH
16974: LD_INT 40
16976: PPUSH
16977: CALL_OW 171
// amForce := Join ( amForce , unit ) ;
16981: LD_ADDR_EXP 40
16985: PUSH
16986: LD_EXP 40
16990: PPUSH
16991: LD_VAR 0 2
16995: PPUSH
16996: CALL 80110 0 2
17000: ST_TO_ADDR
// end ; end ;
17001: PPOPN 2
17003: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount , driver ;
17004: LD_INT 0
17006: PPUSH
17007: PPUSH
17008: PPUSH
17009: PPUSH
17010: PPUSH
17011: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
17012: LD_VAR 0 1
17016: PPUSH
17017: LD_VAR 0 2
17021: PPUSH
17022: CALL 37645 0 2
// side := GetSide ( vehicle ) ;
17026: LD_ADDR_VAR 0 4
17030: PUSH
17031: LD_VAR 0 1
17035: PPUSH
17036: CALL_OW 255
17040: ST_TO_ADDR
// if multi_sides [ side ] then
17041: LD_EXP 7
17045: PUSH
17046: LD_VAR 0 4
17050: ARRAY
17051: IFFALSE 17062
// MultiplayerEvent_Produced ( side ) ;
17053: LD_VAR 0 4
17057: PPUSH
17058: CALL 5511 0 1
// if side = botSides [ 1 ] then
17062: LD_VAR 0 4
17066: PUSH
17067: LD_EXP 3
17071: PUSH
17072: LD_INT 1
17074: ARRAY
17075: EQUAL
17076: IFFALSE 17212
// begin driver := IsDrivenBy ( vehicle ) ;
17078: LD_ADDR_VAR 0 8
17082: PUSH
17083: LD_VAR 0 1
17087: PPUSH
17088: CALL_OW 311
17092: ST_TO_ADDR
// if driver then
17093: LD_VAR 0 8
17097: IFFALSE 17131
// begin SetTag ( driver , tMech ) ;
17099: LD_VAR 0 8
17103: PPUSH
17104: LD_INT 7
17106: PPUSH
17107: CALL_OW 109
// amDrivers := Join ( amDrivers , driver ) ;
17111: LD_ADDR_EXP 38
17115: PUSH
17116: LD_EXP 38
17120: PPUSH
17121: LD_VAR 0 8
17125: PPUSH
17126: CALL 80110 0 2
17130: ST_TO_ADDR
// end ; if amVehiclesCounter > Count ( amVehicles ) or GetBType ( vehicle ) in [ us_cargo_bay , us_crane ] then
17131: LD_EXP 39
17135: PUSH
17136: LD_EXP 36
17140: PPUSH
17141: CALL 44521 0 1
17145: GREATER
17146: PUSH
17147: LD_VAR 0 1
17151: PPUSH
17152: CALL_OW 266
17156: PUSH
17157: LD_INT 12
17159: PUSH
17160: LD_INT 13
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: IN
17167: OR
17168: IFFALSE 17192
// amVehicles := Join ( amVehicles , vehicle ) else
17170: LD_ADDR_EXP 36
17174: PUSH
17175: LD_EXP 36
17179: PPUSH
17180: LD_VAR 0 1
17184: PPUSH
17185: CALL 80110 0 2
17189: ST_TO_ADDR
17190: GO 17212
// amVehiclesAtttackers := Join ( amVehiclesAtttackers , vehicle ) ;
17192: LD_ADDR_EXP 37
17196: PUSH
17197: LD_EXP 37
17201: PPUSH
17202: LD_VAR 0 1
17206: PPUSH
17207: CALL 80110 0 2
17211: ST_TO_ADDR
// end ; if side = botSides [ 2 ] then
17212: LD_VAR 0 4
17216: PUSH
17217: LD_EXP 3
17221: PUSH
17222: LD_INT 2
17224: ARRAY
17225: EQUAL
17226: IFFALSE 17362
// begin driver := IsDrivenBy ( vehicle ) ;
17228: LD_ADDR_VAR 0 8
17232: PUSH
17233: LD_VAR 0 1
17237: PPUSH
17238: CALL_OW 311
17242: ST_TO_ADDR
// if driver then
17243: LD_VAR 0 8
17247: IFFALSE 17281
// begin SetTag ( driver , tMech ) ;
17249: LD_VAR 0 8
17253: PPUSH
17254: LD_INT 7
17256: PPUSH
17257: CALL_OW 109
// arDrivers := Join ( arDrivers , driver ) ;
17261: LD_ADDR_EXP 48
17265: PUSH
17266: LD_EXP 48
17270: PPUSH
17271: LD_VAR 0 8
17275: PPUSH
17276: CALL 80110 0 2
17280: ST_TO_ADDR
// end ; if arVehiclesCounter > Count ( arVehicles ) or GetBType ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
17281: LD_EXP 50
17285: PUSH
17286: LD_EXP 46
17290: PPUSH
17291: CALL 44521 0 1
17295: GREATER
17296: PUSH
17297: LD_VAR 0 1
17301: PPUSH
17302: CALL_OW 266
17306: PUSH
17307: LD_INT 32
17309: PUSH
17310: LD_INT 88
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: IN
17317: OR
17318: IFFALSE 17342
// arVehicles := Join ( arVehicles , vehicle ) else
17320: LD_ADDR_EXP 46
17324: PUSH
17325: LD_EXP 46
17329: PPUSH
17330: LD_VAR 0 1
17334: PPUSH
17335: CALL 80110 0 2
17339: ST_TO_ADDR
17340: GO 17362
// arVehiclesAtttackers := Join ( arVehiclesAtttackers , vehicle ) ;
17342: LD_ADDR_EXP 47
17346: PUSH
17347: LD_EXP 47
17351: PPUSH
17352: LD_VAR 0 1
17356: PPUSH
17357: CALL 80110 0 2
17361: ST_TO_ADDR
// end ; end ;
17362: PPOPN 8
17364: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
17365: LD_VAR 0 1
17369: PPUSH
17370: CALL_OW 110
17374: PUSH
17375: LD_INT 7
17377: EQUAL
17378: IFFALSE 17392
// SetTag ( driver , 0 ) ;
17380: LD_VAR 0 1
17384: PPUSH
17385: LD_INT 0
17387: PPUSH
17388: CALL_OW 109
// end ;
17392: PPOPN 4
17394: END
// on ResearchComplete ( tech , lab ) do begin if GetSide ( lab ) = botSides [ 1 ] then
17395: LD_VAR 0 2
17399: PPUSH
17400: CALL_OW 255
17404: PUSH
17405: LD_EXP 3
17409: PUSH
17410: LD_INT 1
17412: ARRAY
17413: EQUAL
17414: IFFALSE 17444
// if tech in amTech then
17416: LD_VAR 0 1
17420: PUSH
17421: LD_EXP 33
17425: IN
17426: IFFALSE 17444
// amTech := amTech diff tech ;
17428: LD_ADDR_EXP 33
17432: PUSH
17433: LD_EXP 33
17437: PUSH
17438: LD_VAR 0 1
17442: DIFF
17443: ST_TO_ADDR
// if GetSide ( lab ) = botSides [ 2 ] then
17444: LD_VAR 0 2
17448: PPUSH
17449: CALL_OW 255
17453: PUSH
17454: LD_EXP 3
17458: PUSH
17459: LD_INT 2
17461: ARRAY
17462: EQUAL
17463: IFFALSE 17493
// if tech in arTech then
17465: LD_VAR 0 1
17469: PUSH
17470: LD_EXP 43
17474: IN
17475: IFFALSE 17493
// arTech := arTech diff tech ;
17477: LD_ADDR_EXP 43
17481: PUSH
17482: LD_EXP 43
17486: PUSH
17487: LD_VAR 0 1
17491: DIFF
17492: ST_TO_ADDR
// end ; end_of_file
17493: PPOPN 2
17495: END
// every 10 10$00 trigger IsOk ( amDep ) do
17496: LD_INT 1
17498: PPUSH
17499: CALL_OW 302
17503: IFFALSE 17516
17505: GO 17507
17507: DISABLE
// activeAmerAttacks := true ;
17508: LD_ADDR_EXP 5
17512: PUSH
17513: LD_INT 1
17515: ST_TO_ADDR
17516: END
// every 13 13$00 trigger IsOk ( arDep ) and GetSide ( arDep ) = botSides [ 2 ] do
17517: LD_INT 32
17519: PPUSH
17520: CALL_OW 302
17524: PUSH
17525: LD_INT 32
17527: PPUSH
17528: CALL_OW 255
17532: PUSH
17533: LD_EXP 3
17537: PUSH
17538: LD_INT 2
17540: ARRAY
17541: EQUAL
17542: AND
17543: IFFALSE 17580
17545: GO 17547
17547: DISABLE
// begin activeArabAttacks := true ;
17548: LD_ADDR_EXP 4
17552: PUSH
17553: LD_INT 1
17555: ST_TO_ADDR
// wait ( 35 35$00 - ( 1 1$00 * Difficulty ) ) ;
17556: LD_INT 73500
17558: PUSH
17559: LD_INT 2100
17561: PUSH
17562: LD_OWVAR 67
17566: MUL
17567: MINUS
17568: PPUSH
17569: CALL_OW 67
// ArabAttack ( 0 ) ;
17573: LD_INT 0
17575: PPUSH
17576: CALL 17678 0 1
// end ;
17580: END
// every 15 15$00 trigger IsOk ( amDep ) and GetSide ( amDep ) = botSides [ 1 ] do
17581: LD_INT 1
17583: PPUSH
17584: CALL_OW 302
17588: PUSH
17589: LD_INT 1
17591: PPUSH
17592: CALL_OW 255
17596: PUSH
17597: LD_EXP 3
17601: PUSH
17602: LD_INT 1
17604: ARRAY
17605: EQUAL
17606: AND
17607: IFFALSE 17636
17609: GO 17611
17611: DISABLE
// begin wait ( 5 5$00 - ( 1 1$00 * Difficulty ) ) ;
17612: LD_INT 10500
17614: PUSH
17615: LD_INT 2100
17617: PUSH
17618: LD_OWVAR 67
17622: MUL
17623: MINUS
17624: PPUSH
17625: CALL_OW 67
// AmericanAttack ( 0 ) ;
17629: LD_INT 0
17631: PPUSH
17632: CALL 19855 0 1
// end ;
17636: END
// every 45 45$00 trigger IsOk ( amDep ) and GetSide ( amDep ) = botSides [ 1 ] do
17637: LD_INT 1
17639: PPUSH
17640: CALL_OW 302
17644: PUSH
17645: LD_INT 1
17647: PPUSH
17648: CALL_OW 255
17652: PUSH
17653: LD_EXP 3
17657: PUSH
17658: LD_INT 1
17660: ARRAY
17661: EQUAL
17662: AND
17663: IFFALSE 17677
17665: GO 17667
17667: DISABLE
// AmericanAttack ( Difficulty ) ;
17668: LD_OWVAR 67
17672: PPUSH
17673: CALL 19855 0 1
17677: END
// export arAttackersInf , arAttackersVeh ; export function ArabAttack ( v ) ; var i , skill , un , veh ; begin
17678: LD_INT 0
17680: PPUSH
17681: PPUSH
17682: PPUSH
17683: PPUSH
17684: PPUSH
// uc_side := botSides [ 2 ] ;
17685: LD_ADDR_OWVAR 20
17689: PUSH
17690: LD_EXP 3
17694: PUSH
17695: LD_INT 2
17697: ARRAY
17698: ST_TO_ADDR
// uc_nation := nation_arabian ;
17699: LD_ADDR_OWVAR 21
17703: PUSH
17704: LD_INT 2
17706: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
17707: LD_ADDR_VAR 0 4
17711: PUSH
17712: LD_INT 3
17714: PUSH
17715: LD_INT 4
17717: PUSH
17718: LD_INT 5
17720: PUSH
17721: EMPTY
17722: LIST
17723: LIST
17724: LIST
17725: PUSH
17726: LD_OWVAR 67
17730: ARRAY
17731: ST_TO_ADDR
// arAttackersInf := [ ] ;
17732: LD_ADDR_EXP 54
17736: PUSH
17737: EMPTY
17738: ST_TO_ADDR
// arAttackersVeh := [ ] ;
17739: LD_ADDR_EXP 55
17743: PUSH
17744: EMPTY
17745: ST_TO_ADDR
// InitHC_All ( ) ;
17746: CALL_OW 584
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] + v do
17750: LD_ADDR_VAR 0 3
17754: PUSH
17755: DOUBLE
17756: LD_INT 1
17758: DEC
17759: ST_TO_ADDR
17760: LD_INT 3
17762: PUSH
17763: LD_INT 4
17765: PUSH
17766: LD_INT 5
17768: PUSH
17769: EMPTY
17770: LIST
17771: LIST
17772: LIST
17773: PUSH
17774: LD_OWVAR 67
17778: ARRAY
17779: PUSH
17780: LD_VAR 0 1
17784: PLUS
17785: PUSH
17786: FOR_TO
17787: IFFALSE 17889
// begin PrepareSoldier ( false , skill ) ;
17789: LD_INT 0
17791: PPUSH
17792: LD_VAR 0 4
17796: PPUSH
17797: CALL_OW 381
// un := CreateHuman ;
17801: LD_ADDR_VAR 0 5
17805: PUSH
17806: CALL_OW 44
17810: ST_TO_ADDR
// if i mod 2 = 0 then
17811: LD_VAR 0 3
17815: PUSH
17816: LD_INT 2
17818: MOD
17819: PUSH
17820: LD_INT 0
17822: EQUAL
17823: IFFALSE 17837
// SetClass ( un , class_mortar ) ;
17825: LD_VAR 0 5
17829: PPUSH
17830: LD_INT 8
17832: PPUSH
17833: CALL_OW 336
// PlaceUnitArea ( un , arAttackSpawn2Area , false ) ;
17837: LD_VAR 0 5
17841: PPUSH
17842: LD_INT 25
17844: PPUSH
17845: LD_INT 0
17847: PPUSH
17848: CALL_OW 49
// arAttackersInf := Join ( arAttackersInf , un ) ;
17852: LD_ADDR_EXP 54
17856: PUSH
17857: LD_EXP 54
17861: PPUSH
17862: LD_VAR 0 5
17866: PPUSH
17867: CALL 80110 0 2
17871: ST_TO_ADDR
// ComAgressiveMove ( un , 230 , 143 ) ;
17872: LD_VAR 0 5
17876: PPUSH
17877: LD_INT 230
17879: PPUSH
17880: LD_INT 143
17882: PPUSH
17883: CALL_OW 114
// end ;
17887: GO 17786
17889: POP
17890: POP
// for i := 1 to 3 + v do
17891: LD_ADDR_VAR 0 3
17895: PUSH
17896: DOUBLE
17897: LD_INT 1
17899: DEC
17900: ST_TO_ADDR
17901: LD_INT 3
17903: PUSH
17904: LD_VAR 0 1
17908: PLUS
17909: PUSH
17910: FOR_TO
17911: IFFALSE 18075
// begin PrepareMechanic ( false , skill ) ;
17913: LD_INT 0
17915: PPUSH
17916: LD_VAR 0 4
17920: PPUSH
17921: CALL_OW 383
// un := CreateHuman ;
17925: LD_ADDR_VAR 0 5
17929: PUSH
17930: CALL_OW 44
17934: ST_TO_ADDR
// SetTag ( un , 999 ) ;
17935: LD_VAR 0 5
17939: PPUSH
17940: LD_INT 999
17942: PPUSH
17943: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 80 ) ;
17947: LD_INT 14
17949: PPUSH
17950: LD_INT 1
17952: PPUSH
17953: LD_INT 1
17955: PPUSH
17956: LD_INT 27
17958: PUSH
17959: LD_INT 25
17961: PUSH
17962: EMPTY
17963: LIST
17964: LIST
17965: PUSH
17966: LD_VAR 0 3
17970: PUSH
17971: LD_INT 2
17973: MOD
17974: PUSH
17975: LD_INT 1
17977: PLUS
17978: ARRAY
17979: PPUSH
17980: LD_INT 80
17982: PPUSH
17983: CALL 47259 0 5
// veh := CreateVehicle ;
17987: LD_ADDR_VAR 0 6
17991: PUSH
17992: CALL_OW 45
17996: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
17997: LD_VAR 0 6
18001: PPUSH
18002: LD_INT 5
18004: PPUSH
18005: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
18009: LD_VAR 0 6
18013: PPUSH
18014: LD_INT 26
18016: PPUSH
18017: LD_INT 0
18019: PPUSH
18020: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
18024: LD_VAR 0 5
18028: PPUSH
18029: LD_VAR 0 6
18033: PPUSH
18034: CALL_OW 52
// ComMoveXY ( un , 236 , 127 ) ;
18038: LD_VAR 0 5
18042: PPUSH
18043: LD_INT 236
18045: PPUSH
18046: LD_INT 127
18048: PPUSH
18049: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
18053: LD_ADDR_EXP 55
18057: PUSH
18058: LD_EXP 55
18062: PPUSH
18063: LD_VAR 0 6
18067: PPUSH
18068: CALL 80110 0 2
18072: ST_TO_ADDR
// end ;
18073: GO 17910
18075: POP
18076: POP
// wait ( 0 0$2 ) ;
18077: LD_INT 70
18079: PPUSH
18080: CALL_OW 67
// for i := 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
18084: LD_ADDR_VAR 0 3
18088: PUSH
18089: DOUBLE
18090: LD_INT 1
18092: DEC
18093: ST_TO_ADDR
18094: LD_INT 1
18096: PUSH
18097: LD_INT 2
18099: PUSH
18100: LD_INT 3
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: LIST
18107: PUSH
18108: LD_OWVAR 67
18112: ARRAY
18113: PUSH
18114: FOR_TO
18115: IFFALSE 18258
// begin PrepareMechanic ( false , skill ) ;
18117: LD_INT 0
18119: PPUSH
18120: LD_VAR 0 4
18124: PPUSH
18125: CALL_OW 383
// un := CreateHuman ;
18129: LD_ADDR_VAR 0 5
18133: PUSH
18134: CALL_OW 44
18138: ST_TO_ADDR
// SetTag ( un , 999 ) ;
18139: LD_VAR 0 5
18143: PPUSH
18144: LD_INT 999
18146: PPUSH
18147: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 80 ) ;
18151: LD_INT 14
18153: PPUSH
18154: LD_INT 1
18156: PPUSH
18157: LD_INT 1
18159: PPUSH
18160: LD_INT 26
18162: PPUSH
18163: LD_INT 80
18165: PPUSH
18166: CALL 47259 0 5
// veh := CreateVehicle ;
18170: LD_ADDR_VAR 0 6
18174: PUSH
18175: CALL_OW 45
18179: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
18180: LD_VAR 0 6
18184: PPUSH
18185: LD_INT 5
18187: PPUSH
18188: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
18192: LD_VAR 0 6
18196: PPUSH
18197: LD_INT 26
18199: PPUSH
18200: LD_INT 0
18202: PPUSH
18203: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
18207: LD_VAR 0 5
18211: PPUSH
18212: LD_VAR 0 6
18216: PPUSH
18217: CALL_OW 52
// ComMoveXY ( un , 236 , 127 ) ;
18221: LD_VAR 0 5
18225: PPUSH
18226: LD_INT 236
18228: PPUSH
18229: LD_INT 127
18231: PPUSH
18232: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
18236: LD_ADDR_EXP 55
18240: PUSH
18241: LD_EXP 55
18245: PPUSH
18246: LD_VAR 0 6
18250: PPUSH
18251: CALL 80110 0 2
18255: ST_TO_ADDR
// end ;
18256: GO 18114
18258: POP
18259: POP
// wait ( 0 0$2 ) ;
18260: LD_INT 70
18262: PPUSH
18263: CALL_OW 67
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
18267: LD_ADDR_VAR 0 3
18271: PUSH
18272: DOUBLE
18273: LD_INT 1
18275: DEC
18276: ST_TO_ADDR
18277: LD_INT 1
18279: PUSH
18280: LD_INT 2
18282: PUSH
18283: LD_INT 2
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: LIST
18290: PUSH
18291: LD_OWVAR 67
18295: ARRAY
18296: PUSH
18297: FOR_TO
18298: IFFALSE 18472
// begin PrepareMechanic ( false , skill ) ;
18300: LD_INT 0
18302: PPUSH
18303: LD_VAR 0 4
18307: PPUSH
18308: CALL_OW 383
// un := CreateHuman ;
18312: LD_ADDR_VAR 0 5
18316: PUSH
18317: CALL_OW 44
18321: ST_TO_ADDR
// SetTag ( un , 999 ) ;
18322: LD_VAR 0 5
18326: PPUSH
18327: LD_INT 999
18329: PPUSH
18330: CALL_OW 109
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher , 80 ) ;
18334: LD_INT 14
18336: PPUSH
18337: LD_INT 1
18339: PPUSH
18340: LD_INT 1
18342: PPUSH
18343: LD_INT 28
18345: PPUSH
18346: LD_INT 80
18348: PPUSH
18349: CALL 47259 0 5
// veh := CreateVehicle ;
18353: LD_ADDR_VAR 0 6
18357: PUSH
18358: CALL_OW 45
18362: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
18363: LD_VAR 0 6
18367: PPUSH
18368: LD_INT 4
18370: PPUSH
18371: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
18375: LD_VAR 0 6
18379: PPUSH
18380: LD_INT 26
18382: PPUSH
18383: LD_INT 0
18385: PPUSH
18386: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
18390: LD_VAR 0 5
18394: PPUSH
18395: LD_VAR 0 6
18399: PPUSH
18400: CALL_OW 52
// if i mod 2 = 0 then
18404: LD_VAR 0 3
18408: PUSH
18409: LD_INT 2
18411: MOD
18412: PUSH
18413: LD_INT 0
18415: EQUAL
18416: IFFALSE 18435
// ComMoveXY ( un , 136 , 61 ) else
18418: LD_VAR 0 5
18422: PPUSH
18423: LD_INT 136
18425: PPUSH
18426: LD_INT 61
18428: PPUSH
18429: CALL_OW 111
18433: GO 18450
// ComMoveXY ( un , 137 , 41 ) ;
18435: LD_VAR 0 5
18439: PPUSH
18440: LD_INT 137
18442: PPUSH
18443: LD_INT 41
18445: PPUSH
18446: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
18450: LD_ADDR_EXP 55
18454: PUSH
18455: LD_EXP 55
18459: PPUSH
18460: LD_VAR 0 6
18464: PPUSH
18465: CALL 80110 0 2
18469: ST_TO_ADDR
// end ;
18470: GO 18297
18472: POP
18473: POP
// end ;
18474: LD_VAR 0 2
18478: RET
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest , enemy ;
18479: LD_EXP 54
18483: IFFALSE 19010
18485: GO 18487
18487: DISABLE
18488: LD_INT 0
18490: PPUSH
18491: PPUSH
18492: PPUSH
18493: PPUSH
// begin enable ;
18494: ENABLE
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
18495: LD_ADDR_VAR 0 2
18499: PUSH
18500: LD_EXP 54
18504: PPUSH
18505: LD_INT 50
18507: PUSH
18508: EMPTY
18509: LIST
18510: PPUSH
18511: CALL_OW 72
18515: ST_TO_ADDR
// arAttackersInf := [ ] ;
18516: LD_ADDR_EXP 54
18520: PUSH
18521: EMPTY
18522: ST_TO_ADDR
// ComMoveXY ( tmp , 173 , 139 ) ;
18523: LD_VAR 0 2
18527: PPUSH
18528: LD_INT 173
18530: PPUSH
18531: LD_INT 139
18533: PPUSH
18534: CALL_OW 111
// wait ( 0 0$10 ) ;
18538: LD_INT 350
18540: PPUSH
18541: CALL_OW 67
// for i in UnitFilter ( tmp , [ f_class , class_soldier ] ) do
18545: LD_ADDR_VAR 0 1
18549: PUSH
18550: LD_VAR 0 2
18554: PPUSH
18555: LD_INT 25
18557: PUSH
18558: LD_INT 1
18560: PUSH
18561: EMPTY
18562: LIST
18563: LIST
18564: PPUSH
18565: CALL_OW 72
18569: PUSH
18570: FOR_IN
18571: IFFALSE 18702
// begin nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , botSides [ 2 ] ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
18573: LD_ADDR_VAR 0 3
18577: PUSH
18578: LD_INT 81
18580: PUSH
18581: LD_EXP 3
18585: PUSH
18586: LD_INT 2
18588: ARRAY
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PUSH
18594: LD_INT 3
18596: PUSH
18597: LD_INT 120
18599: PUSH
18600: LD_INT 11
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: PUSH
18611: LD_INT 2
18613: PUSH
18614: LD_INT 21
18616: PUSH
18617: LD_INT 2
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: PUSH
18624: LD_INT 21
18626: PUSH
18627: LD_INT 3
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: LIST
18638: PUSH
18639: EMPTY
18640: LIST
18641: LIST
18642: LIST
18643: PPUSH
18644: CALL_OW 69
18648: PPUSH
18649: LD_VAR 0 1
18653: PPUSH
18654: CALL_OW 74
18658: ST_TO_ADDR
// if not nearest then
18659: LD_VAR 0 3
18663: NOT
18664: IFFALSE 18668
// break ;
18666: GO 18702
// SetTag ( nearest , tMined ) ;
18668: LD_VAR 0 3
18672: PPUSH
18673: LD_INT 11
18675: PPUSH
18676: CALL_OW 109
// AddComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
18680: LD_VAR 0 1
18684: PPUSH
18685: LD_INT 0
18687: PPUSH
18688: LD_INT 0
18690: PPUSH
18691: LD_VAR 0 3
18695: PPUSH
18696: CALL_OW 192
// end ;
18700: GO 18570
18702: POP
18703: POP
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
18704: LD_ADDR_VAR 0 2
18708: PUSH
18709: LD_VAR 0 2
18713: PPUSH
18714: LD_INT 50
18716: PUSH
18717: EMPTY
18718: LIST
18719: PPUSH
18720: CALL_OW 72
18724: ST_TO_ADDR
// AddComMoveXY ( tmp , 155 , 119 ) ;
18725: LD_VAR 0 2
18729: PPUSH
18730: LD_INT 155
18732: PPUSH
18733: LD_INT 119
18735: PPUSH
18736: CALL_OW 171
// repeat wait ( 0 0$2 ) ;
18740: LD_INT 70
18742: PPUSH
18743: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
18747: LD_ADDR_VAR 0 2
18751: PUSH
18752: LD_VAR 0 2
18756: PPUSH
18757: LD_INT 50
18759: PUSH
18760: EMPTY
18761: LIST
18762: PPUSH
18763: CALL_OW 72
18767: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , botSides [ 2 ] ] ) ;
18768: LD_ADDR_VAR 0 4
18772: PUSH
18773: LD_INT 81
18775: PUSH
18776: LD_EXP 3
18780: PUSH
18781: LD_INT 2
18783: ARRAY
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: PPUSH
18789: CALL_OW 69
18793: ST_TO_ADDR
// for i in tmp do
18794: LD_ADDR_VAR 0 1
18798: PUSH
18799: LD_VAR 0 2
18803: PUSH
18804: FOR_IN
18805: IFFALSE 19001
// if GetClass ( i ) <> 1 then
18807: LD_VAR 0 1
18811: PPUSH
18812: CALL_OW 257
18816: PUSH
18817: LD_INT 1
18819: NONEQUAL
18820: IFFALSE 18848
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
18822: LD_VAR 0 1
18826: PPUSH
18827: LD_VAR 0 4
18831: PPUSH
18832: LD_VAR 0 1
18836: PPUSH
18837: CALL_OW 74
18841: PPUSH
18842: CALL_OW 115
18846: GO 18999
// if not HasTask ( i ) then
18848: LD_VAR 0 1
18852: PPUSH
18853: CALL_OW 314
18857: NOT
18858: IFFALSE 18999
// begin nearest := NearestUnitToUnit ( UnitFilter ( enemy , [ [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
18860: LD_ADDR_VAR 0 3
18864: PUSH
18865: LD_VAR 0 4
18869: PPUSH
18870: LD_INT 3
18872: PUSH
18873: LD_INT 120
18875: PUSH
18876: LD_INT 11
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 2
18889: PUSH
18890: LD_INT 21
18892: PUSH
18893: LD_INT 2
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: PUSH
18900: LD_INT 21
18902: PUSH
18903: LD_INT 3
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: LIST
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PPUSH
18919: CALL_OW 72
18923: PPUSH
18924: LD_VAR 0 1
18928: PPUSH
18929: CALL_OW 74
18933: ST_TO_ADDR
// if not nearest then
18934: LD_VAR 0 3
18938: NOT
18939: IFFALSE 18967
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
18941: LD_VAR 0 1
18945: PPUSH
18946: LD_VAR 0 4
18950: PPUSH
18951: LD_VAR 0 1
18955: PPUSH
18956: CALL_OW 74
18960: PPUSH
18961: CALL_OW 115
18965: GO 18999
// begin SetTag ( nearest , tMined ) ;
18967: LD_VAR 0 3
18971: PPUSH
18972: LD_INT 11
18974: PPUSH
18975: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
18979: LD_VAR 0 1
18983: PPUSH
18984: LD_INT 0
18986: PPUSH
18987: LD_INT 0
18989: PPUSH
18990: LD_VAR 0 3
18994: PPUSH
18995: CALL_OW 132
// end ; end ;
18999: GO 18804
19001: POP
19002: POP
// until not tmp ;
19003: LD_VAR 0 2
19007: NOT
19008: IFFALSE 18740
// end ;
19010: PPOPN 4
19012: END
// every 0 0$2 trigger arAttackersVeh do var i , tmp ;
19013: LD_EXP 55
19017: IFFALSE 19129
19019: GO 19021
19021: DISABLE
19022: LD_INT 0
19024: PPUSH
19025: PPUSH
// begin enable ;
19026: ENABLE
// tmp := arAttackersVeh ;
19027: LD_ADDR_VAR 0 2
19031: PUSH
19032: LD_EXP 55
19036: ST_TO_ADDR
// arAttackersVeh := [ ] ;
19037: LD_ADDR_EXP 55
19041: PUSH
19042: EMPTY
19043: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
19044: LD_INT 70
19046: PPUSH
19047: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
19051: LD_ADDR_VAR 0 2
19055: PUSH
19056: LD_VAR 0 2
19060: PPUSH
19061: LD_INT 50
19063: PUSH
19064: EMPTY
19065: LIST
19066: PPUSH
19067: CALL_OW 72
19071: ST_TO_ADDR
// for i in tmp do
19072: LD_ADDR_VAR 0 1
19076: PUSH
19077: LD_VAR 0 2
19081: PUSH
19082: FOR_IN
19083: IFFALSE 19120
// AgressiveMove ( i , [ [ 207 , 125 ] , [ 185 , 114 ] ] ) until not tmp ;
19085: LD_VAR 0 1
19089: PPUSH
19090: LD_INT 207
19092: PUSH
19093: LD_INT 125
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: LD_INT 185
19102: PUSH
19103: LD_INT 114
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: PPUSH
19114: CALL 82714 0 2
19118: GO 19082
19120: POP
19121: POP
19122: LD_VAR 0 2
19126: NOT
19127: IFFALSE 19044
// end ;
19129: PPOPN 2
19131: END
// every 0 0$1 trigger arVehiclesAtttackers and activeArabAttacks do var i , mech , enemy ;
19132: LD_EXP 47
19136: PUSH
19137: LD_EXP 4
19141: AND
19142: IFFALSE 19732
19144: GO 19146
19146: DISABLE
19147: LD_INT 0
19149: PPUSH
19150: PPUSH
19151: PPUSH
// begin enable ;
19152: ENABLE
// if not arVehiclesAtttackers then
19153: LD_EXP 47
19157: NOT
19158: IFFALSE 19162
// exit ;
19160: GO 19732
// for i in arVehiclesAtttackers do
19162: LD_ADDR_VAR 0 1
19166: PUSH
19167: LD_EXP 47
19171: PUSH
19172: FOR_IN
19173: IFFALSE 19730
// begin if not IsOk ( i ) or GetSide ( i ) <> botSides [ 2 ] then
19175: LD_VAR 0 1
19179: PPUSH
19180: CALL_OW 302
19184: NOT
19185: PUSH
19186: LD_VAR 0 1
19190: PPUSH
19191: CALL_OW 255
19195: PUSH
19196: LD_EXP 3
19200: PUSH
19201: LD_INT 2
19203: ARRAY
19204: NONEQUAL
19205: OR
19206: IFFALSE 19226
// begin arVehiclesAtttackers := arVehiclesAtttackers diff i ;
19208: LD_ADDR_EXP 47
19212: PUSH
19213: LD_EXP 47
19217: PUSH
19218: LD_VAR 0 1
19222: DIFF
19223: ST_TO_ADDR
// continue ;
19224: GO 19172
// end ; if GetTag ( i ) = 300 then
19226: LD_VAR 0 1
19230: PPUSH
19231: CALL_OW 110
19235: PUSH
19236: LD_INT 300
19238: EQUAL
19239: IFFALSE 19354
// begin if GetFuel ( i ) < 50 then
19241: LD_VAR 0 1
19245: PPUSH
19246: CALL_OW 261
19250: PUSH
19251: LD_INT 50
19253: LESS
19254: IFFALSE 19313
// begin ComMoveXY ( i , 198 , 28 ) ;
19256: LD_VAR 0 1
19260: PPUSH
19261: LD_INT 198
19263: PPUSH
19264: LD_INT 28
19266: PPUSH
19267: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19271: LD_INT 35
19273: PPUSH
19274: CALL_OW 67
// until GetDistUnitXY ( i , 198 , 28 ) < 4 ;
19278: LD_VAR 0 1
19282: PPUSH
19283: LD_INT 198
19285: PPUSH
19286: LD_INT 28
19288: PPUSH
19289: CALL_OW 297
19293: PUSH
19294: LD_INT 4
19296: LESS
19297: IFFALSE 19271
// SetFuel ( i , 100 ) ;
19299: LD_VAR 0 1
19303: PPUSH
19304: LD_INT 100
19306: PPUSH
19307: CALL_OW 240
// end else
19311: GO 19354
// if not IsInArea ( i , arParkingArea ) then
19313: LD_VAR 0 1
19317: PPUSH
19318: LD_INT 28
19320: PPUSH
19321: CALL_OW 308
19325: NOT
19326: IFFALSE 19342
// ComMoveToArea ( i , arParkingArea ) else
19328: LD_VAR 0 1
19332: PPUSH
19333: LD_INT 28
19335: PPUSH
19336: CALL_OW 113
19340: GO 19354
// SetTag ( i , 301 ) ;
19342: LD_VAR 0 1
19346: PPUSH
19347: LD_INT 301
19349: PPUSH
19350: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
19354: LD_VAR 0 1
19358: PPUSH
19359: CALL_OW 110
19363: PUSH
19364: LD_INT 301
19366: EQUAL
19367: IFFALSE 19509
// begin if GetLives ( i ) < 1000 then
19369: LD_VAR 0 1
19373: PPUSH
19374: CALL_OW 256
19378: PUSH
19379: LD_INT 1000
19381: LESS
19382: IFFALSE 19486
// begin if not IsDrivenBy ( i ) then
19384: LD_VAR 0 1
19388: PPUSH
19389: CALL_OW 311
19393: NOT
19394: IFFALSE 19398
// continue ;
19396: GO 19172
// mech := IsDrivenBy ( i ) ;
19398: LD_ADDR_VAR 0 2
19402: PUSH
19403: LD_VAR 0 1
19407: PPUSH
19408: CALL_OW 311
19412: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
19413: LD_VAR 0 2
19417: PPUSH
19418: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
19422: LD_VAR 0 2
19426: PPUSH
19427: LD_VAR 0 1
19431: PPUSH
19432: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
19436: LD_INT 35
19438: PPUSH
19439: CALL_OW 67
// until GetLives ( i ) = 1000 ;
19443: LD_VAR 0 1
19447: PPUSH
19448: CALL_OW 256
19452: PUSH
19453: LD_INT 1000
19455: EQUAL
19456: IFFALSE 19436
// SetLives ( mech , 1000 ) ;
19458: LD_VAR 0 2
19462: PPUSH
19463: LD_INT 1000
19465: PPUSH
19466: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
19470: LD_VAR 0 2
19474: PPUSH
19475: LD_VAR 0 1
19479: PPUSH
19480: CALL_OW 120
// end else
19484: GO 19509
// if IsDrivenBy ( i ) then
19486: LD_VAR 0 1
19490: PPUSH
19491: CALL_OW 311
19495: IFFALSE 19509
// SetTag ( i , 0 ) ;
19497: LD_VAR 0 1
19501: PPUSH
19502: LD_INT 0
19504: PPUSH
19505: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
19509: LD_VAR 0 1
19513: PPUSH
19514: CALL_OW 110
19518: PUSH
19519: LD_INT 300
19521: LESS
19522: IFFALSE 19728
// begin enemy := FilterUnitsInArea ( arBaseArea , [ f_enemy , botSides [ 2 ] ] ) ;
19524: LD_ADDR_VAR 0 3
19528: PUSH
19529: LD_INT 5
19531: PPUSH
19532: LD_INT 81
19534: PUSH
19535: LD_EXP 3
19539: PUSH
19540: LD_INT 2
19542: ARRAY
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PPUSH
19548: CALL_OW 70
19552: ST_TO_ADDR
// if GetLives ( i ) < 650 then
19553: LD_VAR 0 1
19557: PPUSH
19558: CALL_OW 256
19562: PUSH
19563: LD_INT 650
19565: LESS
19566: IFFALSE 19591
// begin ComStop ( i ) ;
19568: LD_VAR 0 1
19572: PPUSH
19573: CALL_OW 141
// SetTag ( i , 300 ) ;
19577: LD_VAR 0 1
19581: PPUSH
19582: LD_INT 300
19584: PPUSH
19585: CALL_OW 109
// continue ;
19589: GO 19172
// end ; if enemy then
19591: LD_VAR 0 3
19595: IFFALSE 19635
// begin if not HasTask ( i ) then
19597: LD_VAR 0 1
19601: PPUSH
19602: CALL_OW 314
19606: NOT
19607: IFFALSE 19633
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
19609: LD_VAR 0 1
19613: PPUSH
19614: LD_VAR 0 3
19618: PPUSH
19619: LD_VAR 0 1
19623: PPUSH
19624: CALL_OW 74
19628: PPUSH
19629: CALL_OW 115
// end else
19633: GO 19728
// if arVehiclesAtttackers then
19635: LD_EXP 47
19639: IFFALSE 19728
// begin enemy := FilterAllUnits ( [ f_enemy , botSides [ 2 ] ] ) ;
19641: LD_ADDR_VAR 0 3
19645: PUSH
19646: LD_INT 81
19648: PUSH
19649: LD_EXP 3
19653: PUSH
19654: LD_INT 2
19656: ARRAY
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: PPUSH
19662: CALL_OW 69
19666: ST_TO_ADDR
// if enemy then
19667: LD_VAR 0 3
19671: IFFALSE 19728
// AgressiveMove ( i , [ [ 215 , 88 ] , [ 197 , 90 ] , [ 178 , 90 ] , [ 169 , 104 ] ] ) ;
19673: LD_VAR 0 1
19677: PPUSH
19678: LD_INT 215
19680: PUSH
19681: LD_INT 88
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: PUSH
19688: LD_INT 197
19690: PUSH
19691: LD_INT 90
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PUSH
19698: LD_INT 178
19700: PUSH
19701: LD_INT 90
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PUSH
19708: LD_INT 169
19710: PUSH
19711: LD_INT 104
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: PPUSH
19724: CALL 82714 0 2
// end ; end ; end ;
19728: GO 19172
19730: POP
19731: POP
// end ;
19732: PPOPN 3
19734: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , botSides [ 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
19735: LD_INT 22
19737: PUSH
19738: LD_EXP 3
19742: PUSH
19743: LD_INT 2
19745: ARRAY
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PUSH
19751: LD_INT 32
19753: PUSH
19754: LD_INT 1
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: PPUSH
19765: CALL_OW 69
19769: IFFALSE 19852
19771: GO 19773
19773: DISABLE
19774: LD_INT 0
19776: PPUSH
// begin enable ;
19777: ENABLE
// for i in FilterAllUnits ( [ [ f_side , botSides [ 2 ] ] , [ f_engine , engine_combustion ] ] ) do
19778: LD_ADDR_VAR 0 1
19782: PUSH
19783: LD_INT 22
19785: PUSH
19786: LD_EXP 3
19790: PUSH
19791: LD_INT 2
19793: ARRAY
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: PUSH
19799: LD_INT 32
19801: PUSH
19802: LD_INT 1
19804: PUSH
19805: EMPTY
19806: LIST
19807: LIST
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PPUSH
19813: CALL_OW 69
19817: PUSH
19818: FOR_IN
19819: IFFALSE 19850
// if GetFuel ( i ) < 3 then
19821: LD_VAR 0 1
19825: PPUSH
19826: CALL_OW 261
19830: PUSH
19831: LD_INT 3
19833: LESS
19834: IFFALSE 19848
// SetFuel ( i , 3 ) ;
19836: LD_VAR 0 1
19840: PPUSH
19841: LD_INT 3
19843: PPUSH
19844: CALL_OW 240
19848: GO 19818
19850: POP
19851: POP
// end ;
19852: PPOPN 1
19854: END
// export amAttackersInf , amAttackersVeh ; export function AmericanAttack ( v ) ; var i , skill , un , veh ; begin
19855: LD_INT 0
19857: PPUSH
19858: PPUSH
19859: PPUSH
19860: PPUSH
19861: PPUSH
// uc_side := botSides [ 1 ] ;
19862: LD_ADDR_OWVAR 20
19866: PUSH
19867: LD_EXP 3
19871: PUSH
19872: LD_INT 1
19874: ARRAY
19875: ST_TO_ADDR
// uc_nation := nation_american ;
19876: LD_ADDR_OWVAR 21
19880: PUSH
19881: LD_INT 1
19883: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
19884: LD_ADDR_VAR 0 4
19888: PUSH
19889: LD_INT 3
19891: PUSH
19892: LD_INT 4
19894: PUSH
19895: LD_INT 5
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: LIST
19902: PUSH
19903: LD_OWVAR 67
19907: ARRAY
19908: ST_TO_ADDR
// amAttackersInf := [ ] ;
19909: LD_ADDR_EXP 56
19913: PUSH
19914: EMPTY
19915: ST_TO_ADDR
// amAttackersVeh := [ ] ;
19916: LD_ADDR_EXP 57
19920: PUSH
19921: EMPTY
19922: ST_TO_ADDR
// InitHC_All ( ) ;
19923: CALL_OW 584
// for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] + v do
19927: LD_ADDR_VAR 0 3
19931: PUSH
19932: DOUBLE
19933: LD_INT 1
19935: DEC
19936: ST_TO_ADDR
19937: LD_INT 2
19939: PUSH
19940: LD_INT 3
19942: PUSH
19943: LD_INT 4
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: LIST
19950: PUSH
19951: LD_OWVAR 67
19955: ARRAY
19956: PUSH
19957: LD_VAR 0 1
19961: PLUS
19962: PUSH
19963: FOR_TO
19964: IFFALSE 20040
// begin PrepareSoldier ( false , skill ) ;
19966: LD_INT 0
19968: PPUSH
19969: LD_VAR 0 4
19973: PPUSH
19974: CALL_OW 381
// un := CreateHuman ;
19978: LD_ADDR_VAR 0 5
19982: PUSH
19983: CALL_OW 44
19987: ST_TO_ADDR
// PlaceUnitArea ( un , amAttackSpawn2Area , false ) ;
19988: LD_VAR 0 5
19992: PPUSH
19993: LD_INT 30
19995: PPUSH
19996: LD_INT 0
19998: PPUSH
19999: CALL_OW 49
// amAttackersInf := Join ( amAttackersInf , un ) ;
20003: LD_ADDR_EXP 56
20007: PUSH
20008: LD_EXP 56
20012: PPUSH
20013: LD_VAR 0 5
20017: PPUSH
20018: CALL 80110 0 2
20022: ST_TO_ADDR
// ComAgressiveMove ( un , 110 , 129 ) ;
20023: LD_VAR 0 5
20027: PPUSH
20028: LD_INT 110
20030: PPUSH
20031: LD_INT 129
20033: PPUSH
20034: CALL_OW 114
// end ;
20038: GO 19963
20040: POP
20041: POP
// for i := 1 to 2 + v do
20042: LD_ADDR_VAR 0 3
20046: PUSH
20047: DOUBLE
20048: LD_INT 1
20050: DEC
20051: ST_TO_ADDR
20052: LD_INT 2
20054: PUSH
20055: LD_VAR 0 1
20059: PLUS
20060: PUSH
20061: FOR_TO
20062: IFFALSE 20230
// begin PrepareMechanic ( false , skill ) ;
20064: LD_INT 0
20066: PPUSH
20067: LD_VAR 0 4
20071: PPUSH
20072: CALL_OW 383
// un := CreateHuman ;
20076: LD_ADDR_VAR 0 5
20080: PUSH
20081: CALL_OW 44
20085: ST_TO_ADDR
// SetTag ( un , 999 ) ;
20086: LD_VAR 0 5
20090: PPUSH
20091: LD_INT 999
20093: PPUSH
20094: CALL_OW 109
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , [ us_light_gun , us_double_gun , us_gatling_gun ] [ i mod 3 + 1 ] , 80 ) ;
20098: LD_INT 3
20100: PPUSH
20101: LD_INT 1
20103: PPUSH
20104: LD_INT 1
20106: PPUSH
20107: LD_INT 3
20109: PUSH
20110: LD_INT 5
20112: PUSH
20113: LD_INT 4
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: LIST
20120: PUSH
20121: LD_VAR 0 3
20125: PUSH
20126: LD_INT 3
20128: MOD
20129: PUSH
20130: LD_INT 1
20132: PLUS
20133: ARRAY
20134: PPUSH
20135: LD_INT 80
20137: PPUSH
20138: CALL 47259 0 5
// veh := CreateVehicle ;
20142: LD_ADDR_VAR 0 6
20146: PUSH
20147: CALL_OW 45
20151: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
20152: LD_VAR 0 6
20156: PPUSH
20157: LD_INT 0
20159: PPUSH
20160: CALL_OW 233
// PlaceUnitArea ( veh , amAttackSpawnArea , false ) ;
20164: LD_VAR 0 6
20168: PPUSH
20169: LD_INT 31
20171: PPUSH
20172: LD_INT 0
20174: PPUSH
20175: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
20179: LD_VAR 0 5
20183: PPUSH
20184: LD_VAR 0 6
20188: PPUSH
20189: CALL_OW 52
// ComMoveXY ( un , 96 , 137 ) ;
20193: LD_VAR 0 5
20197: PPUSH
20198: LD_INT 96
20200: PPUSH
20201: LD_INT 137
20203: PPUSH
20204: CALL_OW 111
// amAttackersVeh := Join ( amAttackersVeh , veh ) ;
20208: LD_ADDR_EXP 57
20212: PUSH
20213: LD_EXP 57
20217: PPUSH
20218: LD_VAR 0 6
20222: PPUSH
20223: CALL 80110 0 2
20227: ST_TO_ADDR
// end ;
20228: GO 20061
20230: POP
20231: POP
// end ;
20232: LD_VAR 0 2
20236: RET
// every 0 0$2 trigger amAttackersVeh do var i , tmp ;
20237: LD_EXP 57
20241: IFFALSE 20377
20243: GO 20245
20245: DISABLE
20246: LD_INT 0
20248: PPUSH
20249: PPUSH
// begin enable ;
20250: ENABLE
// tmp := amAttackersVeh union amAttackersInf ;
20251: LD_ADDR_VAR 0 2
20255: PUSH
20256: LD_EXP 57
20260: PUSH
20261: LD_EXP 56
20265: UNION
20266: ST_TO_ADDR
// arAttackersVeh := [ ] ;
20267: LD_ADDR_EXP 55
20271: PUSH
20272: EMPTY
20273: ST_TO_ADDR
// amAttackersInf := [ ] ;
20274: LD_ADDR_EXP 56
20278: PUSH
20279: EMPTY
20280: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
20281: LD_INT 70
20283: PPUSH
20284: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
20288: LD_ADDR_VAR 0 2
20292: PUSH
20293: LD_VAR 0 2
20297: PPUSH
20298: LD_INT 50
20300: PUSH
20301: EMPTY
20302: LIST
20303: PPUSH
20304: CALL_OW 72
20308: ST_TO_ADDR
// for i in tmp do
20309: LD_ADDR_VAR 0 1
20313: PUSH
20314: LD_VAR 0 2
20318: PUSH
20319: FOR_IN
20320: IFFALSE 20368
// AgressiveMove ( i , [ [ 96 , 145 ] , [ 99 , 130 ] , [ 87 , 103 ] ] ) until not tmp ;
20322: LD_VAR 0 1
20326: PPUSH
20327: LD_INT 96
20329: PUSH
20330: LD_INT 145
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: PUSH
20337: LD_INT 99
20339: PUSH
20340: LD_INT 130
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: PUSH
20347: LD_INT 87
20349: PUSH
20350: LD_INT 103
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: LIST
20361: PPUSH
20362: CALL 82714 0 2
20366: GO 20319
20368: POP
20369: POP
20370: LD_VAR 0 2
20374: NOT
20375: IFFALSE 20281
// end ;
20377: PPOPN 2
20379: END
// every 0 0$1 trigger amVehiclesAtttackers and activeAmerAttacks do var i , mech , enemy ;
20380: LD_EXP 37
20384: PUSH
20385: LD_EXP 5
20389: AND
20390: IFFALSE 20969
20392: GO 20394
20394: DISABLE
20395: LD_INT 0
20397: PPUSH
20398: PPUSH
20399: PPUSH
// begin enable ;
20400: ENABLE
// if not amVehiclesAtttackers then
20401: LD_EXP 37
20405: NOT
20406: IFFALSE 20410
// exit ;
20408: GO 20969
// for i in amVehiclesAtttackers do
20410: LD_ADDR_VAR 0 1
20414: PUSH
20415: LD_EXP 37
20419: PUSH
20420: FOR_IN
20421: IFFALSE 20967
// begin if not IsOk ( i ) or GetSide ( i ) <> botSides [ 1 ] then
20423: LD_VAR 0 1
20427: PPUSH
20428: CALL_OW 302
20432: NOT
20433: PUSH
20434: LD_VAR 0 1
20438: PPUSH
20439: CALL_OW 255
20443: PUSH
20444: LD_EXP 3
20448: PUSH
20449: LD_INT 1
20451: ARRAY
20452: NONEQUAL
20453: OR
20454: IFFALSE 20474
// begin amVehiclesAtttackers := amVehiclesAtttackers diff i ;
20456: LD_ADDR_EXP 37
20460: PUSH
20461: LD_EXP 37
20465: PUSH
20466: LD_VAR 0 1
20470: DIFF
20471: ST_TO_ADDR
// continue ;
20472: GO 20420
// end ; if GetTag ( i ) = 300 then
20474: LD_VAR 0 1
20478: PPUSH
20479: CALL_OW 110
20483: PUSH
20484: LD_INT 300
20486: EQUAL
20487: IFFALSE 20602
// begin if GetFuel ( i ) < 50 then
20489: LD_VAR 0 1
20493: PPUSH
20494: CALL_OW 261
20498: PUSH
20499: LD_INT 50
20501: LESS
20502: IFFALSE 20561
// begin ComMoveXY ( i , 24 , 36 ) ;
20504: LD_VAR 0 1
20508: PPUSH
20509: LD_INT 24
20511: PPUSH
20512: LD_INT 36
20514: PPUSH
20515: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20519: LD_INT 35
20521: PPUSH
20522: CALL_OW 67
// until GetDistUnitXY ( i , 24 , 36 ) < 4 ;
20526: LD_VAR 0 1
20530: PPUSH
20531: LD_INT 24
20533: PPUSH
20534: LD_INT 36
20536: PPUSH
20537: CALL_OW 297
20541: PUSH
20542: LD_INT 4
20544: LESS
20545: IFFALSE 20519
// SetFuel ( i , 100 ) ;
20547: LD_VAR 0 1
20551: PPUSH
20552: LD_INT 100
20554: PPUSH
20555: CALL_OW 240
// end else
20559: GO 20602
// if not IsInArea ( i , amParkingArea ) then
20561: LD_VAR 0 1
20565: PPUSH
20566: LD_INT 27
20568: PPUSH
20569: CALL_OW 308
20573: NOT
20574: IFFALSE 20590
// ComMoveToArea ( i , amParkingArea ) else
20576: LD_VAR 0 1
20580: PPUSH
20581: LD_INT 27
20583: PPUSH
20584: CALL_OW 113
20588: GO 20602
// SetTag ( i , 301 ) ;
20590: LD_VAR 0 1
20594: PPUSH
20595: LD_INT 301
20597: PPUSH
20598: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
20602: LD_VAR 0 1
20606: PPUSH
20607: CALL_OW 110
20611: PUSH
20612: LD_INT 301
20614: EQUAL
20615: IFFALSE 20757
// begin if GetLives ( i ) < 1000 then
20617: LD_VAR 0 1
20621: PPUSH
20622: CALL_OW 256
20626: PUSH
20627: LD_INT 1000
20629: LESS
20630: IFFALSE 20734
// begin if not IsDrivenBy ( i ) then
20632: LD_VAR 0 1
20636: PPUSH
20637: CALL_OW 311
20641: NOT
20642: IFFALSE 20646
// continue ;
20644: GO 20420
// mech := IsDrivenBy ( i ) ;
20646: LD_ADDR_VAR 0 2
20650: PUSH
20651: LD_VAR 0 1
20655: PPUSH
20656: CALL_OW 311
20660: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
20661: LD_VAR 0 2
20665: PPUSH
20666: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
20670: LD_VAR 0 2
20674: PPUSH
20675: LD_VAR 0 1
20679: PPUSH
20680: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
20684: LD_INT 35
20686: PPUSH
20687: CALL_OW 67
// until GetLives ( i ) = 1000 ;
20691: LD_VAR 0 1
20695: PPUSH
20696: CALL_OW 256
20700: PUSH
20701: LD_INT 1000
20703: EQUAL
20704: IFFALSE 20684
// SetLives ( mech , 1000 ) ;
20706: LD_VAR 0 2
20710: PPUSH
20711: LD_INT 1000
20713: PPUSH
20714: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
20718: LD_VAR 0 2
20722: PPUSH
20723: LD_VAR 0 1
20727: PPUSH
20728: CALL_OW 120
// end else
20732: GO 20757
// if IsDrivenBy ( i ) then
20734: LD_VAR 0 1
20738: PPUSH
20739: CALL_OW 311
20743: IFFALSE 20757
// SetTag ( i , 0 ) ;
20745: LD_VAR 0 1
20749: PPUSH
20750: LD_INT 0
20752: PPUSH
20753: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
20757: LD_VAR 0 1
20761: PPUSH
20762: CALL_OW 110
20766: PUSH
20767: LD_INT 300
20769: LESS
20770: IFFALSE 20965
// begin enemy := FilterUnitsInArea ( amBaseArea , [ f_enemy , botSides [ 1 ] ] ) ;
20772: LD_ADDR_VAR 0 3
20776: PUSH
20777: LD_INT 3
20779: PPUSH
20780: LD_INT 81
20782: PUSH
20783: LD_EXP 3
20787: PUSH
20788: LD_INT 1
20790: ARRAY
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: PPUSH
20796: CALL_OW 70
20800: ST_TO_ADDR
// if GetLives ( i ) < 650 then
20801: LD_VAR 0 1
20805: PPUSH
20806: CALL_OW 256
20810: PUSH
20811: LD_INT 650
20813: LESS
20814: IFFALSE 20839
// begin ComStop ( i ) ;
20816: LD_VAR 0 1
20820: PPUSH
20821: CALL_OW 141
// SetTag ( i , 300 ) ;
20825: LD_VAR 0 1
20829: PPUSH
20830: LD_INT 300
20832: PPUSH
20833: CALL_OW 109
// continue ;
20837: GO 20420
// end ; if enemy then
20839: LD_VAR 0 3
20843: IFFALSE 20883
// begin if not HasTask ( i ) then
20845: LD_VAR 0 1
20849: PPUSH
20850: CALL_OW 314
20854: NOT
20855: IFFALSE 20881
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
20857: LD_VAR 0 1
20861: PPUSH
20862: LD_VAR 0 3
20866: PPUSH
20867: LD_VAR 0 1
20871: PPUSH
20872: CALL_OW 74
20876: PPUSH
20877: CALL_OW 115
// end else
20881: GO 20965
// if amVehiclesAtttackers then
20883: LD_EXP 37
20887: IFFALSE 20965
// begin enemy := FilterAllUnits ( [ f_enemy , botSides [ 1 ] ] ) ;
20889: LD_ADDR_VAR 0 3
20893: PUSH
20894: LD_INT 81
20896: PUSH
20897: LD_EXP 3
20901: PUSH
20902: LD_INT 1
20904: ARRAY
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: PPUSH
20910: CALL_OW 69
20914: ST_TO_ADDR
// if enemy then
20915: LD_VAR 0 3
20919: IFFALSE 20965
// AgressiveMove ( i , [ [ 49 , 43 ] , [ 63 , 56 ] , [ 72 , 67 ] ] ) ;
20921: LD_VAR 0 1
20925: PPUSH
20926: LD_INT 49
20928: PUSH
20929: LD_INT 43
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: PUSH
20936: LD_INT 63
20938: PUSH
20939: LD_INT 56
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PUSH
20946: LD_INT 72
20948: PUSH
20949: LD_INT 67
20951: PUSH
20952: EMPTY
20953: LIST
20954: LIST
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: LIST
20960: PPUSH
20961: CALL 82714 0 2
// end ; end ; end ;
20965: GO 20420
20967: POP
20968: POP
// end ;
20969: PPOPN 3
20971: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
20972: LD_INT 22
20974: PUSH
20975: LD_EXP 3
20979: PUSH
20980: LD_INT 1
20982: ARRAY
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: PUSH
20988: LD_INT 32
20990: PUSH
20991: LD_INT 1
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: PPUSH
21002: CALL_OW 69
21006: IFFALSE 21089
21008: GO 21010
21010: DISABLE
21011: LD_INT 0
21013: PPUSH
// begin enable ;
21014: ENABLE
// for i in FilterAllUnits ( [ [ f_side , botSides [ 1 ] ] , [ f_engine , engine_combustion ] ] ) do
21015: LD_ADDR_VAR 0 1
21019: PUSH
21020: LD_INT 22
21022: PUSH
21023: LD_EXP 3
21027: PUSH
21028: LD_INT 1
21030: ARRAY
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: PUSH
21036: LD_INT 32
21038: PUSH
21039: LD_INT 1
21041: PUSH
21042: EMPTY
21043: LIST
21044: LIST
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: PPUSH
21050: CALL_OW 69
21054: PUSH
21055: FOR_IN
21056: IFFALSE 21087
// if GetFuel ( i ) < 3 then
21058: LD_VAR 0 1
21062: PPUSH
21063: CALL_OW 261
21067: PUSH
21068: LD_INT 3
21070: LESS
21071: IFFALSE 21085
// SetFuel ( i , 3 ) ;
21073: LD_VAR 0 1
21077: PPUSH
21078: LD_INT 3
21080: PPUSH
21081: CALL_OW 240
21085: GO 21055
21087: POP
21088: POP
// end ; end_of_file
21089: PPOPN 1
21091: END
// every 0 0$20 trigger game do
21092: LD_EXP 2
21096: IFFALSE 21145
21098: GO 21100
21100: DISABLE
// SpawnCrates ( [ cratesWestArea , cratesEastArea , cratesMiddleArea , amBaseArea , arBaseArea ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
21101: LD_INT 20
21103: PUSH
21104: LD_INT 22
21106: PUSH
21107: LD_INT 21
21109: PUSH
21110: LD_INT 3
21112: PUSH
21113: LD_INT 5
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: PPUSH
21123: LD_EXP 21
21127: PUSH
21128: LD_INT 2
21130: ARRAY
21131: PPUSH
21132: LD_EXP 21
21136: PUSH
21137: LD_INT 1
21139: ARRAY
21140: PPUSH
21141: CALL 21146 0 3
21145: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x , playersAreas ; begin
21146: LD_INT 0
21148: PPUSH
21149: PPUSH
21150: PPUSH
21151: PPUSH
// if not areas then
21152: LD_VAR 0 1
21156: NOT
21157: IFFALSE 21161
// exit ;
21159: GO 21538
// playersAreas := [ cratesPlayerWestArea , cratesPlayerMiddleArea , cratesPlayerEastArea ] ;
21161: LD_ADDR_VAR 0 7
21165: PUSH
21166: LD_INT 17
21168: PUSH
21169: LD_INT 18
21171: PUSH
21172: LD_INT 19
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: LIST
21179: ST_TO_ADDR
// x := 5 ;
21180: LD_ADDR_VAR 0 6
21184: PUSH
21185: LD_INT 5
21187: ST_TO_ADDR
// repeat wait ( time ) ;
21188: LD_VAR 0 2
21192: PPUSH
21193: CALL_OW 67
// if tick < [ 18 18$00 , 15 15$00 , 12 12$00 ] [ Difficulty ] then
21197: LD_OWVAR 1
21201: PUSH
21202: LD_INT 37800
21204: PUSH
21205: LD_INT 31500
21207: PUSH
21208: LD_INT 25200
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: LIST
21215: PUSH
21216: LD_OWVAR 67
21220: ARRAY
21221: LESS
21222: IFFALSE 21361
// begin for i := 1 to multi_sides do
21224: LD_ADDR_VAR 0 5
21228: PUSH
21229: DOUBLE
21230: LD_INT 1
21232: DEC
21233: ST_TO_ADDR
21234: LD_EXP 7
21238: PUSH
21239: FOR_TO
21240: IFFALSE 21352
// if multi_sides [ i ] then
21242: LD_EXP 7
21246: PUSH
21247: LD_VAR 0 5
21251: ARRAY
21252: IFFALSE 21350
// begin if GetResourceArea ( playersAreas [ multi_sides [ i ] ] , mat_cans ) < [ 32 , 25 , 23 ] [ Difficulty ] then
21254: LD_VAR 0 7
21258: PUSH
21259: LD_EXP 7
21263: PUSH
21264: LD_VAR 0 5
21268: ARRAY
21269: ARRAY
21270: PPUSH
21271: LD_INT 1
21273: PPUSH
21274: CALL_OW 287
21278: PUSH
21279: LD_INT 32
21281: PUSH
21282: LD_INT 25
21284: PUSH
21285: LD_INT 23
21287: PUSH
21288: EMPTY
21289: LIST
21290: LIST
21291: LIST
21292: PUSH
21293: LD_OWVAR 67
21297: ARRAY
21298: LESS
21299: IFFALSE 21350
// begin amount := amount - ( x * 10 ) ;
21301: LD_ADDR_VAR 0 3
21305: PUSH
21306: LD_VAR 0 3
21310: PUSH
21311: LD_VAR 0 6
21315: PUSH
21316: LD_INT 10
21318: MUL
21319: MINUS
21320: ST_TO_ADDR
// CreateCratesArea ( x , playersAreas [ multi_sides [ i ] ] , true ) ;
21321: LD_VAR 0 6
21325: PPUSH
21326: LD_VAR 0 7
21330: PUSH
21331: LD_EXP 7
21335: PUSH
21336: LD_VAR 0 5
21340: ARRAY
21341: ARRAY
21342: PPUSH
21343: LD_INT 1
21345: PPUSH
21346: CALL_OW 55
// end ; end ;
21350: GO 21239
21352: POP
21353: POP
// wait ( 0 0$2 ) ;
21354: LD_INT 70
21356: PPUSH
21357: CALL_OW 67
// end ; for i in areas do
21361: LD_ADDR_VAR 0 5
21365: PUSH
21366: LD_VAR 0 1
21370: PUSH
21371: FOR_IN
21372: IFFALSE 21455
// begin if GetResourceArea ( i , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
21374: LD_VAR 0 5
21378: PPUSH
21379: LD_INT 1
21381: PPUSH
21382: CALL_OW 287
21386: PUSH
21387: LD_INT 25
21389: PUSH
21390: LD_INT 22
21392: PUSH
21393: LD_INT 20
21395: PUSH
21396: EMPTY
21397: LIST
21398: LIST
21399: LIST
21400: PUSH
21401: LD_OWVAR 67
21405: ARRAY
21406: LESS
21407: IFFALSE 21453
// begin wait ( 0 0$5 ) ;
21409: LD_INT 175
21411: PPUSH
21412: CALL_OW 67
// CreateCratesArea ( x , i , true ) ;
21416: LD_VAR 0 6
21420: PPUSH
21421: LD_VAR 0 5
21425: PPUSH
21426: LD_INT 1
21428: PPUSH
21429: CALL_OW 55
// amount := amount - ( x * 10 ) ;
21433: LD_ADDR_VAR 0 3
21437: PUSH
21438: LD_VAR 0 3
21442: PUSH
21443: LD_VAR 0 6
21447: PUSH
21448: LD_INT 10
21450: MUL
21451: MINUS
21452: ST_TO_ADDR
// end ; end ;
21453: GO 21371
21455: POP
21456: POP
// time := time + 0 0$2 ;
21457: LD_ADDR_VAR 0 2
21461: PUSH
21462: LD_VAR 0 2
21466: PUSH
21467: LD_INT 70
21469: PLUS
21470: ST_TO_ADDR
// x := x - 1 ;
21471: LD_ADDR_VAR 0 6
21475: PUSH
21476: LD_VAR 0 6
21480: PUSH
21481: LD_INT 1
21483: MINUS
21484: ST_TO_ADDR
// if x = 0 then
21485: LD_VAR 0 6
21489: PUSH
21490: LD_INT 0
21492: EQUAL
21493: IFFALSE 21503
// x := 5 ;
21495: LD_ADDR_VAR 0 6
21499: PUSH
21500: LD_INT 5
21502: ST_TO_ADDR
// if time > 2 2$00 then
21503: LD_VAR 0 2
21507: PUSH
21508: LD_INT 4200
21510: GREATER
21511: IFFALSE 21521
// time := 0 0$30 ;
21513: LD_ADDR_VAR 0 2
21517: PUSH
21518: LD_INT 1050
21520: ST_TO_ADDR
// until not game or amount <= 0 ;
21521: LD_EXP 2
21525: NOT
21526: PUSH
21527: LD_VAR 0 3
21531: PUSH
21532: LD_INT 0
21534: LESSEQUAL
21535: OR
21536: IFFALSE 21188
// end ; end_of_file
21538: LD_VAR 0 4
21542: RET
// export globalGameSaveCounter ; every 0 0$1 do
21543: GO 21545
21545: DISABLE
// begin enable ;
21546: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
21547: LD_STRING updateTimer(
21549: PUSH
21550: LD_OWVAR 1
21554: STR
21555: PUSH
21556: LD_STRING );
21558: STR
21559: PPUSH
21560: CALL_OW 559
// end ;
21564: END
// every 0 0$1 do
21565: GO 21567
21567: DISABLE
// begin globalGameSaveCounter := 0 ;
21568: LD_ADDR_EXP 58
21572: PUSH
21573: LD_INT 0
21575: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
21576: LD_STRING setGameSaveCounter(0)
21578: PPUSH
21579: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
21583: LD_STRING initStreamRollete();
21585: PPUSH
21586: CALL_OW 559
// InitStreamMode ;
21590: CALL 22933 0 0
// DefineStreamItems ( false ) ;
21594: LD_INT 0
21596: PPUSH
21597: CALL 23397 0 1
// end ;
21601: END
// export function SOS_MapStart ( ) ; begin
21602: LD_INT 0
21604: PPUSH
// if streamModeActive then
21605: LD_EXP 59
21609: IFFALSE 21618
// DefineStreamItems ( true ) ;
21611: LD_INT 1
21613: PPUSH
21614: CALL 23397 0 1
// UpdateLuaVariables ( ) ;
21618: CALL 21635 0 0
// UpdateFactoryWaypoints ( ) ;
21622: CALL 36266 0 0
// UpdateWarehouseGatheringPoints ( ) ;
21626: CALL 36523 0 0
// end ;
21630: LD_VAR 0 1
21634: RET
// function UpdateLuaVariables ( ) ; begin
21635: LD_INT 0
21637: PPUSH
// if globalGameSaveCounter then
21638: LD_EXP 58
21642: IFFALSE 21676
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
21644: LD_ADDR_EXP 58
21648: PUSH
21649: LD_EXP 58
21653: PPUSH
21654: CALL 81471 0 1
21658: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
21659: LD_STRING setGameSaveCounter(
21661: PUSH
21662: LD_EXP 58
21666: STR
21667: PUSH
21668: LD_STRING )
21670: STR
21671: PPUSH
21672: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
21676: LD_STRING setGameDifficulty(
21678: PUSH
21679: LD_OWVAR 67
21683: STR
21684: PUSH
21685: LD_STRING )
21687: STR
21688: PPUSH
21689: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
21693: LD_STRING displayDifficulty(
21695: PUSH
21696: LD_OWVAR 67
21700: STR
21701: PUSH
21702: LD_STRING )
21704: STR
21705: PPUSH
21706: CALL_OW 559
// end ;
21710: LD_VAR 0 1
21714: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21715: LD_INT 0
21717: PPUSH
// if p2 = stream_mode then
21718: LD_VAR 0 2
21722: PUSH
21723: LD_INT 100
21725: EQUAL
21726: IFFALSE 22729
// begin if not StreamModeActive then
21728: LD_EXP 59
21732: NOT
21733: IFFALSE 21743
// StreamModeActive := true ;
21735: LD_ADDR_EXP 59
21739: PUSH
21740: LD_INT 1
21742: ST_TO_ADDR
// if p3 = 0 then
21743: LD_VAR 0 3
21747: PUSH
21748: LD_INT 0
21750: EQUAL
21751: IFFALSE 21757
// InitStreamMode ;
21753: CALL 22933 0 0
// if p3 = 1 then
21757: LD_VAR 0 3
21761: PUSH
21762: LD_INT 1
21764: EQUAL
21765: IFFALSE 21775
// sRocket := true ;
21767: LD_ADDR_EXP 64
21771: PUSH
21772: LD_INT 1
21774: ST_TO_ADDR
// if p3 = 2 then
21775: LD_VAR 0 3
21779: PUSH
21780: LD_INT 2
21782: EQUAL
21783: IFFALSE 21793
// sSpeed := true ;
21785: LD_ADDR_EXP 63
21789: PUSH
21790: LD_INT 1
21792: ST_TO_ADDR
// if p3 = 3 then
21793: LD_VAR 0 3
21797: PUSH
21798: LD_INT 3
21800: EQUAL
21801: IFFALSE 21811
// sEngine := true ;
21803: LD_ADDR_EXP 65
21807: PUSH
21808: LD_INT 1
21810: ST_TO_ADDR
// if p3 = 4 then
21811: LD_VAR 0 3
21815: PUSH
21816: LD_INT 4
21818: EQUAL
21819: IFFALSE 21829
// sSpec := true ;
21821: LD_ADDR_EXP 62
21825: PUSH
21826: LD_INT 1
21828: ST_TO_ADDR
// if p3 = 5 then
21829: LD_VAR 0 3
21833: PUSH
21834: LD_INT 5
21836: EQUAL
21837: IFFALSE 21847
// sLevel := true ;
21839: LD_ADDR_EXP 66
21843: PUSH
21844: LD_INT 1
21846: ST_TO_ADDR
// if p3 = 6 then
21847: LD_VAR 0 3
21851: PUSH
21852: LD_INT 6
21854: EQUAL
21855: IFFALSE 21865
// sArmoury := true ;
21857: LD_ADDR_EXP 67
21861: PUSH
21862: LD_INT 1
21864: ST_TO_ADDR
// if p3 = 7 then
21865: LD_VAR 0 3
21869: PUSH
21870: LD_INT 7
21872: EQUAL
21873: IFFALSE 21883
// sRadar := true ;
21875: LD_ADDR_EXP 68
21879: PUSH
21880: LD_INT 1
21882: ST_TO_ADDR
// if p3 = 8 then
21883: LD_VAR 0 3
21887: PUSH
21888: LD_INT 8
21890: EQUAL
21891: IFFALSE 21901
// sBunker := true ;
21893: LD_ADDR_EXP 69
21897: PUSH
21898: LD_INT 1
21900: ST_TO_ADDR
// if p3 = 9 then
21901: LD_VAR 0 3
21905: PUSH
21906: LD_INT 9
21908: EQUAL
21909: IFFALSE 21919
// sHack := true ;
21911: LD_ADDR_EXP 70
21915: PUSH
21916: LD_INT 1
21918: ST_TO_ADDR
// if p3 = 10 then
21919: LD_VAR 0 3
21923: PUSH
21924: LD_INT 10
21926: EQUAL
21927: IFFALSE 21937
// sFire := true ;
21929: LD_ADDR_EXP 71
21933: PUSH
21934: LD_INT 1
21936: ST_TO_ADDR
// if p3 = 11 then
21937: LD_VAR 0 3
21941: PUSH
21942: LD_INT 11
21944: EQUAL
21945: IFFALSE 21955
// sRefresh := true ;
21947: LD_ADDR_EXP 72
21951: PUSH
21952: LD_INT 1
21954: ST_TO_ADDR
// if p3 = 12 then
21955: LD_VAR 0 3
21959: PUSH
21960: LD_INT 12
21962: EQUAL
21963: IFFALSE 21973
// sExp := true ;
21965: LD_ADDR_EXP 73
21969: PUSH
21970: LD_INT 1
21972: ST_TO_ADDR
// if p3 = 13 then
21973: LD_VAR 0 3
21977: PUSH
21978: LD_INT 13
21980: EQUAL
21981: IFFALSE 21991
// sDepot := true ;
21983: LD_ADDR_EXP 74
21987: PUSH
21988: LD_INT 1
21990: ST_TO_ADDR
// if p3 = 14 then
21991: LD_VAR 0 3
21995: PUSH
21996: LD_INT 14
21998: EQUAL
21999: IFFALSE 22009
// sFlag := true ;
22001: LD_ADDR_EXP 75
22005: PUSH
22006: LD_INT 1
22008: ST_TO_ADDR
// if p3 = 15 then
22009: LD_VAR 0 3
22013: PUSH
22014: LD_INT 15
22016: EQUAL
22017: IFFALSE 22027
// sKamikadze := true ;
22019: LD_ADDR_EXP 83
22023: PUSH
22024: LD_INT 1
22026: ST_TO_ADDR
// if p3 = 16 then
22027: LD_VAR 0 3
22031: PUSH
22032: LD_INT 16
22034: EQUAL
22035: IFFALSE 22045
// sTroll := true ;
22037: LD_ADDR_EXP 84
22041: PUSH
22042: LD_INT 1
22044: ST_TO_ADDR
// if p3 = 17 then
22045: LD_VAR 0 3
22049: PUSH
22050: LD_INT 17
22052: EQUAL
22053: IFFALSE 22063
// sSlow := true ;
22055: LD_ADDR_EXP 85
22059: PUSH
22060: LD_INT 1
22062: ST_TO_ADDR
// if p3 = 18 then
22063: LD_VAR 0 3
22067: PUSH
22068: LD_INT 18
22070: EQUAL
22071: IFFALSE 22081
// sLack := true ;
22073: LD_ADDR_EXP 86
22077: PUSH
22078: LD_INT 1
22080: ST_TO_ADDR
// if p3 = 19 then
22081: LD_VAR 0 3
22085: PUSH
22086: LD_INT 19
22088: EQUAL
22089: IFFALSE 22099
// sTank := true ;
22091: LD_ADDR_EXP 88
22095: PUSH
22096: LD_INT 1
22098: ST_TO_ADDR
// if p3 = 20 then
22099: LD_VAR 0 3
22103: PUSH
22104: LD_INT 20
22106: EQUAL
22107: IFFALSE 22117
// sRemote := true ;
22109: LD_ADDR_EXP 89
22113: PUSH
22114: LD_INT 1
22116: ST_TO_ADDR
// if p3 = 21 then
22117: LD_VAR 0 3
22121: PUSH
22122: LD_INT 21
22124: EQUAL
22125: IFFALSE 22135
// sPowell := true ;
22127: LD_ADDR_EXP 90
22131: PUSH
22132: LD_INT 1
22134: ST_TO_ADDR
// if p3 = 22 then
22135: LD_VAR 0 3
22139: PUSH
22140: LD_INT 22
22142: EQUAL
22143: IFFALSE 22153
// sTeleport := true ;
22145: LD_ADDR_EXP 93
22149: PUSH
22150: LD_INT 1
22152: ST_TO_ADDR
// if p3 = 23 then
22153: LD_VAR 0 3
22157: PUSH
22158: LD_INT 23
22160: EQUAL
22161: IFFALSE 22171
// sOilTower := true ;
22163: LD_ADDR_EXP 95
22167: PUSH
22168: LD_INT 1
22170: ST_TO_ADDR
// if p3 = 24 then
22171: LD_VAR 0 3
22175: PUSH
22176: LD_INT 24
22178: EQUAL
22179: IFFALSE 22189
// sShovel := true ;
22181: LD_ADDR_EXP 96
22185: PUSH
22186: LD_INT 1
22188: ST_TO_ADDR
// if p3 = 25 then
22189: LD_VAR 0 3
22193: PUSH
22194: LD_INT 25
22196: EQUAL
22197: IFFALSE 22207
// sSheik := true ;
22199: LD_ADDR_EXP 97
22203: PUSH
22204: LD_INT 1
22206: ST_TO_ADDR
// if p3 = 26 then
22207: LD_VAR 0 3
22211: PUSH
22212: LD_INT 26
22214: EQUAL
22215: IFFALSE 22225
// sEarthquake := true ;
22217: LD_ADDR_EXP 99
22221: PUSH
22222: LD_INT 1
22224: ST_TO_ADDR
// if p3 = 27 then
22225: LD_VAR 0 3
22229: PUSH
22230: LD_INT 27
22232: EQUAL
22233: IFFALSE 22243
// sAI := true ;
22235: LD_ADDR_EXP 100
22239: PUSH
22240: LD_INT 1
22242: ST_TO_ADDR
// if p3 = 28 then
22243: LD_VAR 0 3
22247: PUSH
22248: LD_INT 28
22250: EQUAL
22251: IFFALSE 22261
// sCargo := true ;
22253: LD_ADDR_EXP 103
22257: PUSH
22258: LD_INT 1
22260: ST_TO_ADDR
// if p3 = 29 then
22261: LD_VAR 0 3
22265: PUSH
22266: LD_INT 29
22268: EQUAL
22269: IFFALSE 22279
// sDLaser := true ;
22271: LD_ADDR_EXP 104
22275: PUSH
22276: LD_INT 1
22278: ST_TO_ADDR
// if p3 = 30 then
22279: LD_VAR 0 3
22283: PUSH
22284: LD_INT 30
22286: EQUAL
22287: IFFALSE 22297
// sExchange := true ;
22289: LD_ADDR_EXP 105
22293: PUSH
22294: LD_INT 1
22296: ST_TO_ADDR
// if p3 = 31 then
22297: LD_VAR 0 3
22301: PUSH
22302: LD_INT 31
22304: EQUAL
22305: IFFALSE 22315
// sFac := true ;
22307: LD_ADDR_EXP 106
22311: PUSH
22312: LD_INT 1
22314: ST_TO_ADDR
// if p3 = 32 then
22315: LD_VAR 0 3
22319: PUSH
22320: LD_INT 32
22322: EQUAL
22323: IFFALSE 22333
// sPower := true ;
22325: LD_ADDR_EXP 107
22329: PUSH
22330: LD_INT 1
22332: ST_TO_ADDR
// if p3 = 33 then
22333: LD_VAR 0 3
22337: PUSH
22338: LD_INT 33
22340: EQUAL
22341: IFFALSE 22351
// sRandom := true ;
22343: LD_ADDR_EXP 108
22347: PUSH
22348: LD_INT 1
22350: ST_TO_ADDR
// if p3 = 34 then
22351: LD_VAR 0 3
22355: PUSH
22356: LD_INT 34
22358: EQUAL
22359: IFFALSE 22369
// sShield := true ;
22361: LD_ADDR_EXP 109
22365: PUSH
22366: LD_INT 1
22368: ST_TO_ADDR
// if p3 = 35 then
22369: LD_VAR 0 3
22373: PUSH
22374: LD_INT 35
22376: EQUAL
22377: IFFALSE 22387
// sTime := true ;
22379: LD_ADDR_EXP 110
22383: PUSH
22384: LD_INT 1
22386: ST_TO_ADDR
// if p3 = 36 then
22387: LD_VAR 0 3
22391: PUSH
22392: LD_INT 36
22394: EQUAL
22395: IFFALSE 22405
// sTools := true ;
22397: LD_ADDR_EXP 111
22401: PUSH
22402: LD_INT 1
22404: ST_TO_ADDR
// if p3 = 101 then
22405: LD_VAR 0 3
22409: PUSH
22410: LD_INT 101
22412: EQUAL
22413: IFFALSE 22423
// sSold := true ;
22415: LD_ADDR_EXP 76
22419: PUSH
22420: LD_INT 1
22422: ST_TO_ADDR
// if p3 = 102 then
22423: LD_VAR 0 3
22427: PUSH
22428: LD_INT 102
22430: EQUAL
22431: IFFALSE 22441
// sDiff := true ;
22433: LD_ADDR_EXP 77
22437: PUSH
22438: LD_INT 1
22440: ST_TO_ADDR
// if p3 = 103 then
22441: LD_VAR 0 3
22445: PUSH
22446: LD_INT 103
22448: EQUAL
22449: IFFALSE 22459
// sFog := true ;
22451: LD_ADDR_EXP 80
22455: PUSH
22456: LD_INT 1
22458: ST_TO_ADDR
// if p3 = 104 then
22459: LD_VAR 0 3
22463: PUSH
22464: LD_INT 104
22466: EQUAL
22467: IFFALSE 22477
// sReset := true ;
22469: LD_ADDR_EXP 81
22473: PUSH
22474: LD_INT 1
22476: ST_TO_ADDR
// if p3 = 105 then
22477: LD_VAR 0 3
22481: PUSH
22482: LD_INT 105
22484: EQUAL
22485: IFFALSE 22495
// sSun := true ;
22487: LD_ADDR_EXP 82
22491: PUSH
22492: LD_INT 1
22494: ST_TO_ADDR
// if p3 = 106 then
22495: LD_VAR 0 3
22499: PUSH
22500: LD_INT 106
22502: EQUAL
22503: IFFALSE 22513
// sTiger := true ;
22505: LD_ADDR_EXP 78
22509: PUSH
22510: LD_INT 1
22512: ST_TO_ADDR
// if p3 = 107 then
22513: LD_VAR 0 3
22517: PUSH
22518: LD_INT 107
22520: EQUAL
22521: IFFALSE 22531
// sBomb := true ;
22523: LD_ADDR_EXP 79
22527: PUSH
22528: LD_INT 1
22530: ST_TO_ADDR
// if p3 = 108 then
22531: LD_VAR 0 3
22535: PUSH
22536: LD_INT 108
22538: EQUAL
22539: IFFALSE 22549
// sWound := true ;
22541: LD_ADDR_EXP 87
22545: PUSH
22546: LD_INT 1
22548: ST_TO_ADDR
// if p3 = 109 then
22549: LD_VAR 0 3
22553: PUSH
22554: LD_INT 109
22556: EQUAL
22557: IFFALSE 22567
// sBetray := true ;
22559: LD_ADDR_EXP 91
22563: PUSH
22564: LD_INT 1
22566: ST_TO_ADDR
// if p3 = 110 then
22567: LD_VAR 0 3
22571: PUSH
22572: LD_INT 110
22574: EQUAL
22575: IFFALSE 22585
// sContamin := true ;
22577: LD_ADDR_EXP 92
22581: PUSH
22582: LD_INT 1
22584: ST_TO_ADDR
// if p3 = 111 then
22585: LD_VAR 0 3
22589: PUSH
22590: LD_INT 111
22592: EQUAL
22593: IFFALSE 22603
// sOil := true ;
22595: LD_ADDR_EXP 94
22599: PUSH
22600: LD_INT 1
22602: ST_TO_ADDR
// if p3 = 112 then
22603: LD_VAR 0 3
22607: PUSH
22608: LD_INT 112
22610: EQUAL
22611: IFFALSE 22621
// sStu := true ;
22613: LD_ADDR_EXP 98
22617: PUSH
22618: LD_INT 1
22620: ST_TO_ADDR
// if p3 = 113 then
22621: LD_VAR 0 3
22625: PUSH
22626: LD_INT 113
22628: EQUAL
22629: IFFALSE 22639
// sBazooka := true ;
22631: LD_ADDR_EXP 101
22635: PUSH
22636: LD_INT 1
22638: ST_TO_ADDR
// if p3 = 114 then
22639: LD_VAR 0 3
22643: PUSH
22644: LD_INT 114
22646: EQUAL
22647: IFFALSE 22657
// sMortar := true ;
22649: LD_ADDR_EXP 102
22653: PUSH
22654: LD_INT 1
22656: ST_TO_ADDR
// if p3 = 115 then
22657: LD_VAR 0 3
22661: PUSH
22662: LD_INT 115
22664: EQUAL
22665: IFFALSE 22675
// sRanger := true ;
22667: LD_ADDR_EXP 112
22671: PUSH
22672: LD_INT 1
22674: ST_TO_ADDR
// if p3 = 116 then
22675: LD_VAR 0 3
22679: PUSH
22680: LD_INT 116
22682: EQUAL
22683: IFFALSE 22693
// sComputer := true ;
22685: LD_ADDR_EXP 113
22689: PUSH
22690: LD_INT 1
22692: ST_TO_ADDR
// if p3 = 117 then
22693: LD_VAR 0 3
22697: PUSH
22698: LD_INT 117
22700: EQUAL
22701: IFFALSE 22711
// s30 := true ;
22703: LD_ADDR_EXP 114
22707: PUSH
22708: LD_INT 1
22710: ST_TO_ADDR
// if p3 = 118 then
22711: LD_VAR 0 3
22715: PUSH
22716: LD_INT 118
22718: EQUAL
22719: IFFALSE 22729
// s60 := true ;
22721: LD_ADDR_EXP 115
22725: PUSH
22726: LD_INT 1
22728: ST_TO_ADDR
// end ; if p2 = hack_mode then
22729: LD_VAR 0 2
22733: PUSH
22734: LD_INT 101
22736: EQUAL
22737: IFFALSE 22865
// begin case p3 of 1 :
22739: LD_VAR 0 3
22743: PUSH
22744: LD_INT 1
22746: DOUBLE
22747: EQUAL
22748: IFTRUE 22752
22750: GO 22759
22752: POP
// hHackUnlimitedResources ; 2 :
22753: CALL 35012 0 0
22757: GO 22865
22759: LD_INT 2
22761: DOUBLE
22762: EQUAL
22763: IFTRUE 22767
22765: GO 22774
22767: POP
// hHackSetLevel10 ; 3 :
22768: CALL 35145 0 0
22772: GO 22865
22774: LD_INT 3
22776: DOUBLE
22777: EQUAL
22778: IFTRUE 22782
22780: GO 22789
22782: POP
// hHackSetLevel10YourUnits ; 4 :
22783: CALL 35230 0 0
22787: GO 22865
22789: LD_INT 4
22791: DOUBLE
22792: EQUAL
22793: IFTRUE 22797
22795: GO 22804
22797: POP
// hHackInvincible ; 5 :
22798: CALL 35678 0 0
22802: GO 22865
22804: LD_INT 5
22806: DOUBLE
22807: EQUAL
22808: IFTRUE 22812
22810: GO 22819
22812: POP
// hHackInvisible ; 6 :
22813: CALL 35789 0 0
22817: GO 22865
22819: LD_INT 6
22821: DOUBLE
22822: EQUAL
22823: IFTRUE 22827
22825: GO 22834
22827: POP
// hHackChangeYourSide ; 7 :
22828: CALL 35846 0 0
22832: GO 22865
22834: LD_INT 7
22836: DOUBLE
22837: EQUAL
22838: IFTRUE 22842
22840: GO 22849
22842: POP
// hHackChangeUnitSide ; 8 :
22843: CALL 35888 0 0
22847: GO 22865
22849: LD_INT 8
22851: DOUBLE
22852: EQUAL
22853: IFTRUE 22857
22855: GO 22864
22857: POP
// hHackFog ; end ;
22858: CALL 35989 0 0
22862: GO 22865
22864: POP
// end ; if p2 = game_save_mode then
22865: LD_VAR 0 2
22869: PUSH
22870: LD_INT 102
22872: EQUAL
22873: IFFALSE 22928
// begin if p3 = 1 then
22875: LD_VAR 0 3
22879: PUSH
22880: LD_INT 1
22882: EQUAL
22883: IFFALSE 22895
// globalGameSaveCounter := p4 ;
22885: LD_ADDR_EXP 58
22889: PUSH
22890: LD_VAR 0 4
22894: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
22895: LD_VAR 0 3
22899: PUSH
22900: LD_INT 2
22902: EQUAL
22903: PUSH
22904: LD_EXP 58
22908: AND
22909: IFFALSE 22928
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
22911: LD_STRING setGameSaveCounter(
22913: PUSH
22914: LD_EXP 58
22918: STR
22919: PUSH
22920: LD_STRING )
22922: STR
22923: PPUSH
22924: CALL_OW 559
// end ; end ;
22928: LD_VAR 0 7
22932: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
22933: LD_INT 0
22935: PPUSH
// streamModeActive := false ;
22936: LD_ADDR_EXP 59
22940: PUSH
22941: LD_INT 0
22943: ST_TO_ADDR
// normalCounter := 36 ;
22944: LD_ADDR_EXP 60
22948: PUSH
22949: LD_INT 36
22951: ST_TO_ADDR
// hardcoreCounter := 18 ;
22952: LD_ADDR_EXP 61
22956: PUSH
22957: LD_INT 18
22959: ST_TO_ADDR
// sRocket := false ;
22960: LD_ADDR_EXP 64
22964: PUSH
22965: LD_INT 0
22967: ST_TO_ADDR
// sSpeed := false ;
22968: LD_ADDR_EXP 63
22972: PUSH
22973: LD_INT 0
22975: ST_TO_ADDR
// sEngine := false ;
22976: LD_ADDR_EXP 65
22980: PUSH
22981: LD_INT 0
22983: ST_TO_ADDR
// sSpec := false ;
22984: LD_ADDR_EXP 62
22988: PUSH
22989: LD_INT 0
22991: ST_TO_ADDR
// sLevel := false ;
22992: LD_ADDR_EXP 66
22996: PUSH
22997: LD_INT 0
22999: ST_TO_ADDR
// sArmoury := false ;
23000: LD_ADDR_EXP 67
23004: PUSH
23005: LD_INT 0
23007: ST_TO_ADDR
// sRadar := false ;
23008: LD_ADDR_EXP 68
23012: PUSH
23013: LD_INT 0
23015: ST_TO_ADDR
// sBunker := false ;
23016: LD_ADDR_EXP 69
23020: PUSH
23021: LD_INT 0
23023: ST_TO_ADDR
// sHack := false ;
23024: LD_ADDR_EXP 70
23028: PUSH
23029: LD_INT 0
23031: ST_TO_ADDR
// sFire := false ;
23032: LD_ADDR_EXP 71
23036: PUSH
23037: LD_INT 0
23039: ST_TO_ADDR
// sRefresh := false ;
23040: LD_ADDR_EXP 72
23044: PUSH
23045: LD_INT 0
23047: ST_TO_ADDR
// sExp := false ;
23048: LD_ADDR_EXP 73
23052: PUSH
23053: LD_INT 0
23055: ST_TO_ADDR
// sDepot := false ;
23056: LD_ADDR_EXP 74
23060: PUSH
23061: LD_INT 0
23063: ST_TO_ADDR
// sFlag := false ;
23064: LD_ADDR_EXP 75
23068: PUSH
23069: LD_INT 0
23071: ST_TO_ADDR
// sKamikadze := false ;
23072: LD_ADDR_EXP 83
23076: PUSH
23077: LD_INT 0
23079: ST_TO_ADDR
// sTroll := false ;
23080: LD_ADDR_EXP 84
23084: PUSH
23085: LD_INT 0
23087: ST_TO_ADDR
// sSlow := false ;
23088: LD_ADDR_EXP 85
23092: PUSH
23093: LD_INT 0
23095: ST_TO_ADDR
// sLack := false ;
23096: LD_ADDR_EXP 86
23100: PUSH
23101: LD_INT 0
23103: ST_TO_ADDR
// sTank := false ;
23104: LD_ADDR_EXP 88
23108: PUSH
23109: LD_INT 0
23111: ST_TO_ADDR
// sRemote := false ;
23112: LD_ADDR_EXP 89
23116: PUSH
23117: LD_INT 0
23119: ST_TO_ADDR
// sPowell := false ;
23120: LD_ADDR_EXP 90
23124: PUSH
23125: LD_INT 0
23127: ST_TO_ADDR
// sTeleport := false ;
23128: LD_ADDR_EXP 93
23132: PUSH
23133: LD_INT 0
23135: ST_TO_ADDR
// sOilTower := false ;
23136: LD_ADDR_EXP 95
23140: PUSH
23141: LD_INT 0
23143: ST_TO_ADDR
// sShovel := false ;
23144: LD_ADDR_EXP 96
23148: PUSH
23149: LD_INT 0
23151: ST_TO_ADDR
// sSheik := false ;
23152: LD_ADDR_EXP 97
23156: PUSH
23157: LD_INT 0
23159: ST_TO_ADDR
// sEarthquake := false ;
23160: LD_ADDR_EXP 99
23164: PUSH
23165: LD_INT 0
23167: ST_TO_ADDR
// sAI := false ;
23168: LD_ADDR_EXP 100
23172: PUSH
23173: LD_INT 0
23175: ST_TO_ADDR
// sCargo := false ;
23176: LD_ADDR_EXP 103
23180: PUSH
23181: LD_INT 0
23183: ST_TO_ADDR
// sDLaser := false ;
23184: LD_ADDR_EXP 104
23188: PUSH
23189: LD_INT 0
23191: ST_TO_ADDR
// sExchange := false ;
23192: LD_ADDR_EXP 105
23196: PUSH
23197: LD_INT 0
23199: ST_TO_ADDR
// sFac := false ;
23200: LD_ADDR_EXP 106
23204: PUSH
23205: LD_INT 0
23207: ST_TO_ADDR
// sPower := false ;
23208: LD_ADDR_EXP 107
23212: PUSH
23213: LD_INT 0
23215: ST_TO_ADDR
// sRandom := false ;
23216: LD_ADDR_EXP 108
23220: PUSH
23221: LD_INT 0
23223: ST_TO_ADDR
// sShield := false ;
23224: LD_ADDR_EXP 109
23228: PUSH
23229: LD_INT 0
23231: ST_TO_ADDR
// sTime := false ;
23232: LD_ADDR_EXP 110
23236: PUSH
23237: LD_INT 0
23239: ST_TO_ADDR
// sTools := false ;
23240: LD_ADDR_EXP 111
23244: PUSH
23245: LD_INT 0
23247: ST_TO_ADDR
// sSold := false ;
23248: LD_ADDR_EXP 76
23252: PUSH
23253: LD_INT 0
23255: ST_TO_ADDR
// sDiff := false ;
23256: LD_ADDR_EXP 77
23260: PUSH
23261: LD_INT 0
23263: ST_TO_ADDR
// sFog := false ;
23264: LD_ADDR_EXP 80
23268: PUSH
23269: LD_INT 0
23271: ST_TO_ADDR
// sReset := false ;
23272: LD_ADDR_EXP 81
23276: PUSH
23277: LD_INT 0
23279: ST_TO_ADDR
// sSun := false ;
23280: LD_ADDR_EXP 82
23284: PUSH
23285: LD_INT 0
23287: ST_TO_ADDR
// sTiger := false ;
23288: LD_ADDR_EXP 78
23292: PUSH
23293: LD_INT 0
23295: ST_TO_ADDR
// sBomb := false ;
23296: LD_ADDR_EXP 79
23300: PUSH
23301: LD_INT 0
23303: ST_TO_ADDR
// sWound := false ;
23304: LD_ADDR_EXP 87
23308: PUSH
23309: LD_INT 0
23311: ST_TO_ADDR
// sBetray := false ;
23312: LD_ADDR_EXP 91
23316: PUSH
23317: LD_INT 0
23319: ST_TO_ADDR
// sContamin := false ;
23320: LD_ADDR_EXP 92
23324: PUSH
23325: LD_INT 0
23327: ST_TO_ADDR
// sOil := false ;
23328: LD_ADDR_EXP 94
23332: PUSH
23333: LD_INT 0
23335: ST_TO_ADDR
// sStu := false ;
23336: LD_ADDR_EXP 98
23340: PUSH
23341: LD_INT 0
23343: ST_TO_ADDR
// sBazooka := false ;
23344: LD_ADDR_EXP 101
23348: PUSH
23349: LD_INT 0
23351: ST_TO_ADDR
// sMortar := false ;
23352: LD_ADDR_EXP 102
23356: PUSH
23357: LD_INT 0
23359: ST_TO_ADDR
// sRanger := false ;
23360: LD_ADDR_EXP 112
23364: PUSH
23365: LD_INT 0
23367: ST_TO_ADDR
// sComputer := false ;
23368: LD_ADDR_EXP 113
23372: PUSH
23373: LD_INT 0
23375: ST_TO_ADDR
// s30 := false ;
23376: LD_ADDR_EXP 114
23380: PUSH
23381: LD_INT 0
23383: ST_TO_ADDR
// s60 := false ;
23384: LD_ADDR_EXP 115
23388: PUSH
23389: LD_INT 0
23391: ST_TO_ADDR
// end ;
23392: LD_VAR 0 1
23396: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
23397: LD_INT 0
23399: PPUSH
23400: PPUSH
23401: PPUSH
23402: PPUSH
23403: PPUSH
23404: PPUSH
23405: PPUSH
// result := [ ] ;
23406: LD_ADDR_VAR 0 2
23410: PUSH
23411: EMPTY
23412: ST_TO_ADDR
// if campaign_id = 1 then
23413: LD_OWVAR 69
23417: PUSH
23418: LD_INT 1
23420: EQUAL
23421: IFFALSE 26587
// begin case mission_number of 1 :
23423: LD_OWVAR 70
23427: PUSH
23428: LD_INT 1
23430: DOUBLE
23431: EQUAL
23432: IFTRUE 23436
23434: GO 23512
23436: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
23437: LD_ADDR_VAR 0 2
23441: PUSH
23442: LD_INT 2
23444: PUSH
23445: LD_INT 4
23447: PUSH
23448: LD_INT 11
23450: PUSH
23451: LD_INT 12
23453: PUSH
23454: LD_INT 15
23456: PUSH
23457: LD_INT 16
23459: PUSH
23460: LD_INT 22
23462: PUSH
23463: LD_INT 23
23465: PUSH
23466: LD_INT 26
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: PUSH
23480: LD_INT 101
23482: PUSH
23483: LD_INT 102
23485: PUSH
23486: LD_INT 106
23488: PUSH
23489: LD_INT 116
23491: PUSH
23492: LD_INT 117
23494: PUSH
23495: LD_INT 118
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: PUSH
23506: EMPTY
23507: LIST
23508: LIST
23509: ST_TO_ADDR
23510: GO 26585
23512: LD_INT 2
23514: DOUBLE
23515: EQUAL
23516: IFTRUE 23520
23518: GO 23604
23520: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
23521: LD_ADDR_VAR 0 2
23525: PUSH
23526: LD_INT 2
23528: PUSH
23529: LD_INT 4
23531: PUSH
23532: LD_INT 11
23534: PUSH
23535: LD_INT 12
23537: PUSH
23538: LD_INT 15
23540: PUSH
23541: LD_INT 16
23543: PUSH
23544: LD_INT 22
23546: PUSH
23547: LD_INT 23
23549: PUSH
23550: LD_INT 26
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: PUSH
23564: LD_INT 101
23566: PUSH
23567: LD_INT 102
23569: PUSH
23570: LD_INT 105
23572: PUSH
23573: LD_INT 106
23575: PUSH
23576: LD_INT 108
23578: PUSH
23579: LD_INT 116
23581: PUSH
23582: LD_INT 117
23584: PUSH
23585: LD_INT 118
23587: PUSH
23588: EMPTY
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: ST_TO_ADDR
23602: GO 26585
23604: LD_INT 3
23606: DOUBLE
23607: EQUAL
23608: IFTRUE 23612
23610: GO 23700
23612: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
23613: LD_ADDR_VAR 0 2
23617: PUSH
23618: LD_INT 2
23620: PUSH
23621: LD_INT 4
23623: PUSH
23624: LD_INT 5
23626: PUSH
23627: LD_INT 11
23629: PUSH
23630: LD_INT 12
23632: PUSH
23633: LD_INT 15
23635: PUSH
23636: LD_INT 16
23638: PUSH
23639: LD_INT 22
23641: PUSH
23642: LD_INT 26
23644: PUSH
23645: LD_INT 36
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: PUSH
23660: LD_INT 101
23662: PUSH
23663: LD_INT 102
23665: PUSH
23666: LD_INT 105
23668: PUSH
23669: LD_INT 106
23671: PUSH
23672: LD_INT 108
23674: PUSH
23675: LD_INT 116
23677: PUSH
23678: LD_INT 117
23680: PUSH
23681: LD_INT 118
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: ST_TO_ADDR
23698: GO 26585
23700: LD_INT 4
23702: DOUBLE
23703: EQUAL
23704: IFTRUE 23708
23706: GO 23804
23708: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
23709: LD_ADDR_VAR 0 2
23713: PUSH
23714: LD_INT 2
23716: PUSH
23717: LD_INT 4
23719: PUSH
23720: LD_INT 5
23722: PUSH
23723: LD_INT 8
23725: PUSH
23726: LD_INT 11
23728: PUSH
23729: LD_INT 12
23731: PUSH
23732: LD_INT 15
23734: PUSH
23735: LD_INT 16
23737: PUSH
23738: LD_INT 22
23740: PUSH
23741: LD_INT 23
23743: PUSH
23744: LD_INT 26
23746: PUSH
23747: LD_INT 36
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: PUSH
23764: LD_INT 101
23766: PUSH
23767: LD_INT 102
23769: PUSH
23770: LD_INT 105
23772: PUSH
23773: LD_INT 106
23775: PUSH
23776: LD_INT 108
23778: PUSH
23779: LD_INT 116
23781: PUSH
23782: LD_INT 117
23784: PUSH
23785: LD_INT 118
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: ST_TO_ADDR
23802: GO 26585
23804: LD_INT 5
23806: DOUBLE
23807: EQUAL
23808: IFTRUE 23812
23810: GO 23924
23812: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
23813: LD_ADDR_VAR 0 2
23817: PUSH
23818: LD_INT 2
23820: PUSH
23821: LD_INT 4
23823: PUSH
23824: LD_INT 5
23826: PUSH
23827: LD_INT 6
23829: PUSH
23830: LD_INT 8
23832: PUSH
23833: LD_INT 11
23835: PUSH
23836: LD_INT 12
23838: PUSH
23839: LD_INT 15
23841: PUSH
23842: LD_INT 16
23844: PUSH
23845: LD_INT 22
23847: PUSH
23848: LD_INT 23
23850: PUSH
23851: LD_INT 25
23853: PUSH
23854: LD_INT 26
23856: PUSH
23857: LD_INT 36
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: PUSH
23876: LD_INT 101
23878: PUSH
23879: LD_INT 102
23881: PUSH
23882: LD_INT 105
23884: PUSH
23885: LD_INT 106
23887: PUSH
23888: LD_INT 108
23890: PUSH
23891: LD_INT 109
23893: PUSH
23894: LD_INT 112
23896: PUSH
23897: LD_INT 116
23899: PUSH
23900: LD_INT 117
23902: PUSH
23903: LD_INT 118
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: ST_TO_ADDR
23922: GO 26585
23924: LD_INT 6
23926: DOUBLE
23927: EQUAL
23928: IFTRUE 23932
23930: GO 24064
23932: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
23933: LD_ADDR_VAR 0 2
23937: PUSH
23938: LD_INT 2
23940: PUSH
23941: LD_INT 4
23943: PUSH
23944: LD_INT 5
23946: PUSH
23947: LD_INT 6
23949: PUSH
23950: LD_INT 8
23952: PUSH
23953: LD_INT 11
23955: PUSH
23956: LD_INT 12
23958: PUSH
23959: LD_INT 15
23961: PUSH
23962: LD_INT 16
23964: PUSH
23965: LD_INT 20
23967: PUSH
23968: LD_INT 21
23970: PUSH
23971: LD_INT 22
23973: PUSH
23974: LD_INT 23
23976: PUSH
23977: LD_INT 25
23979: PUSH
23980: LD_INT 26
23982: PUSH
23983: LD_INT 30
23985: PUSH
23986: LD_INT 31
23988: PUSH
23989: LD_INT 32
23991: PUSH
23992: LD_INT 36
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: PUSH
24016: LD_INT 101
24018: PUSH
24019: LD_INT 102
24021: PUSH
24022: LD_INT 105
24024: PUSH
24025: LD_INT 106
24027: PUSH
24028: LD_INT 108
24030: PUSH
24031: LD_INT 109
24033: PUSH
24034: LD_INT 112
24036: PUSH
24037: LD_INT 116
24039: PUSH
24040: LD_INT 117
24042: PUSH
24043: LD_INT 118
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: ST_TO_ADDR
24062: GO 26585
24064: LD_INT 7
24066: DOUBLE
24067: EQUAL
24068: IFTRUE 24072
24070: GO 24184
24072: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
24073: LD_ADDR_VAR 0 2
24077: PUSH
24078: LD_INT 2
24080: PUSH
24081: LD_INT 4
24083: PUSH
24084: LD_INT 5
24086: PUSH
24087: LD_INT 7
24089: PUSH
24090: LD_INT 11
24092: PUSH
24093: LD_INT 12
24095: PUSH
24096: LD_INT 15
24098: PUSH
24099: LD_INT 16
24101: PUSH
24102: LD_INT 20
24104: PUSH
24105: LD_INT 21
24107: PUSH
24108: LD_INT 22
24110: PUSH
24111: LD_INT 23
24113: PUSH
24114: LD_INT 25
24116: PUSH
24117: LD_INT 26
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: PUSH
24136: LD_INT 101
24138: PUSH
24139: LD_INT 102
24141: PUSH
24142: LD_INT 103
24144: PUSH
24145: LD_INT 105
24147: PUSH
24148: LD_INT 106
24150: PUSH
24151: LD_INT 108
24153: PUSH
24154: LD_INT 112
24156: PUSH
24157: LD_INT 116
24159: PUSH
24160: LD_INT 117
24162: PUSH
24163: LD_INT 118
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: ST_TO_ADDR
24182: GO 26585
24184: LD_INT 8
24186: DOUBLE
24187: EQUAL
24188: IFTRUE 24192
24190: GO 24332
24192: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
24193: LD_ADDR_VAR 0 2
24197: PUSH
24198: LD_INT 2
24200: PUSH
24201: LD_INT 4
24203: PUSH
24204: LD_INT 5
24206: PUSH
24207: LD_INT 6
24209: PUSH
24210: LD_INT 7
24212: PUSH
24213: LD_INT 8
24215: PUSH
24216: LD_INT 11
24218: PUSH
24219: LD_INT 12
24221: PUSH
24222: LD_INT 15
24224: PUSH
24225: LD_INT 16
24227: PUSH
24228: LD_INT 20
24230: PUSH
24231: LD_INT 21
24233: PUSH
24234: LD_INT 22
24236: PUSH
24237: LD_INT 23
24239: PUSH
24240: LD_INT 25
24242: PUSH
24243: LD_INT 26
24245: PUSH
24246: LD_INT 30
24248: PUSH
24249: LD_INT 31
24251: PUSH
24252: LD_INT 32
24254: PUSH
24255: LD_INT 36
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: PUSH
24280: LD_INT 101
24282: PUSH
24283: LD_INT 102
24285: PUSH
24286: LD_INT 103
24288: PUSH
24289: LD_INT 105
24291: PUSH
24292: LD_INT 106
24294: PUSH
24295: LD_INT 108
24297: PUSH
24298: LD_INT 109
24300: PUSH
24301: LD_INT 112
24303: PUSH
24304: LD_INT 116
24306: PUSH
24307: LD_INT 117
24309: PUSH
24310: LD_INT 118
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: ST_TO_ADDR
24330: GO 26585
24332: LD_INT 9
24334: DOUBLE
24335: EQUAL
24336: IFTRUE 24340
24338: GO 24488
24340: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
24341: LD_ADDR_VAR 0 2
24345: PUSH
24346: LD_INT 2
24348: PUSH
24349: LD_INT 4
24351: PUSH
24352: LD_INT 5
24354: PUSH
24355: LD_INT 6
24357: PUSH
24358: LD_INT 7
24360: PUSH
24361: LD_INT 8
24363: PUSH
24364: LD_INT 11
24366: PUSH
24367: LD_INT 12
24369: PUSH
24370: LD_INT 15
24372: PUSH
24373: LD_INT 16
24375: PUSH
24376: LD_INT 20
24378: PUSH
24379: LD_INT 21
24381: PUSH
24382: LD_INT 22
24384: PUSH
24385: LD_INT 23
24387: PUSH
24388: LD_INT 25
24390: PUSH
24391: LD_INT 26
24393: PUSH
24394: LD_INT 28
24396: PUSH
24397: LD_INT 30
24399: PUSH
24400: LD_INT 31
24402: PUSH
24403: LD_INT 32
24405: PUSH
24406: LD_INT 36
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: PUSH
24432: LD_INT 101
24434: PUSH
24435: LD_INT 102
24437: PUSH
24438: LD_INT 103
24440: PUSH
24441: LD_INT 105
24443: PUSH
24444: LD_INT 106
24446: PUSH
24447: LD_INT 108
24449: PUSH
24450: LD_INT 109
24452: PUSH
24453: LD_INT 112
24455: PUSH
24456: LD_INT 114
24458: PUSH
24459: LD_INT 116
24461: PUSH
24462: LD_INT 117
24464: PUSH
24465: LD_INT 118
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: ST_TO_ADDR
24486: GO 26585
24488: LD_INT 10
24490: DOUBLE
24491: EQUAL
24492: IFTRUE 24496
24494: GO 24692
24496: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
24497: LD_ADDR_VAR 0 2
24501: PUSH
24502: LD_INT 2
24504: PUSH
24505: LD_INT 4
24507: PUSH
24508: LD_INT 5
24510: PUSH
24511: LD_INT 6
24513: PUSH
24514: LD_INT 7
24516: PUSH
24517: LD_INT 8
24519: PUSH
24520: LD_INT 9
24522: PUSH
24523: LD_INT 10
24525: PUSH
24526: LD_INT 11
24528: PUSH
24529: LD_INT 12
24531: PUSH
24532: LD_INT 13
24534: PUSH
24535: LD_INT 14
24537: PUSH
24538: LD_INT 15
24540: PUSH
24541: LD_INT 16
24543: PUSH
24544: LD_INT 17
24546: PUSH
24547: LD_INT 18
24549: PUSH
24550: LD_INT 19
24552: PUSH
24553: LD_INT 20
24555: PUSH
24556: LD_INT 21
24558: PUSH
24559: LD_INT 22
24561: PUSH
24562: LD_INT 23
24564: PUSH
24565: LD_INT 24
24567: PUSH
24568: LD_INT 25
24570: PUSH
24571: LD_INT 26
24573: PUSH
24574: LD_INT 28
24576: PUSH
24577: LD_INT 30
24579: PUSH
24580: LD_INT 31
24582: PUSH
24583: LD_INT 32
24585: PUSH
24586: LD_INT 36
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 101
24622: PUSH
24623: LD_INT 102
24625: PUSH
24626: LD_INT 103
24628: PUSH
24629: LD_INT 104
24631: PUSH
24632: LD_INT 105
24634: PUSH
24635: LD_INT 106
24637: PUSH
24638: LD_INT 107
24640: PUSH
24641: LD_INT 108
24643: PUSH
24644: LD_INT 109
24646: PUSH
24647: LD_INT 110
24649: PUSH
24650: LD_INT 111
24652: PUSH
24653: LD_INT 112
24655: PUSH
24656: LD_INT 114
24658: PUSH
24659: LD_INT 116
24661: PUSH
24662: LD_INT 117
24664: PUSH
24665: LD_INT 118
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: ST_TO_ADDR
24690: GO 26585
24692: LD_INT 11
24694: DOUBLE
24695: EQUAL
24696: IFTRUE 24700
24698: GO 24904
24700: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
24701: LD_ADDR_VAR 0 2
24705: PUSH
24706: LD_INT 2
24708: PUSH
24709: LD_INT 3
24711: PUSH
24712: LD_INT 4
24714: PUSH
24715: LD_INT 5
24717: PUSH
24718: LD_INT 6
24720: PUSH
24721: LD_INT 7
24723: PUSH
24724: LD_INT 8
24726: PUSH
24727: LD_INT 9
24729: PUSH
24730: LD_INT 10
24732: PUSH
24733: LD_INT 11
24735: PUSH
24736: LD_INT 12
24738: PUSH
24739: LD_INT 13
24741: PUSH
24742: LD_INT 14
24744: PUSH
24745: LD_INT 15
24747: PUSH
24748: LD_INT 16
24750: PUSH
24751: LD_INT 17
24753: PUSH
24754: LD_INT 18
24756: PUSH
24757: LD_INT 19
24759: PUSH
24760: LD_INT 20
24762: PUSH
24763: LD_INT 21
24765: PUSH
24766: LD_INT 22
24768: PUSH
24769: LD_INT 23
24771: PUSH
24772: LD_INT 24
24774: PUSH
24775: LD_INT 25
24777: PUSH
24778: LD_INT 26
24780: PUSH
24781: LD_INT 28
24783: PUSH
24784: LD_INT 30
24786: PUSH
24787: LD_INT 31
24789: PUSH
24790: LD_INT 32
24792: PUSH
24793: LD_INT 34
24795: PUSH
24796: LD_INT 36
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: PUSH
24832: LD_INT 101
24834: PUSH
24835: LD_INT 102
24837: PUSH
24838: LD_INT 103
24840: PUSH
24841: LD_INT 104
24843: PUSH
24844: LD_INT 105
24846: PUSH
24847: LD_INT 106
24849: PUSH
24850: LD_INT 107
24852: PUSH
24853: LD_INT 108
24855: PUSH
24856: LD_INT 109
24858: PUSH
24859: LD_INT 110
24861: PUSH
24862: LD_INT 111
24864: PUSH
24865: LD_INT 112
24867: PUSH
24868: LD_INT 114
24870: PUSH
24871: LD_INT 116
24873: PUSH
24874: LD_INT 117
24876: PUSH
24877: LD_INT 118
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: ST_TO_ADDR
24902: GO 26585
24904: LD_INT 12
24906: DOUBLE
24907: EQUAL
24908: IFTRUE 24912
24910: GO 25132
24912: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
24913: LD_ADDR_VAR 0 2
24917: PUSH
24918: LD_INT 1
24920: PUSH
24921: LD_INT 2
24923: PUSH
24924: LD_INT 3
24926: PUSH
24927: LD_INT 4
24929: PUSH
24930: LD_INT 5
24932: PUSH
24933: LD_INT 6
24935: PUSH
24936: LD_INT 7
24938: PUSH
24939: LD_INT 8
24941: PUSH
24942: LD_INT 9
24944: PUSH
24945: LD_INT 10
24947: PUSH
24948: LD_INT 11
24950: PUSH
24951: LD_INT 12
24953: PUSH
24954: LD_INT 13
24956: PUSH
24957: LD_INT 14
24959: PUSH
24960: LD_INT 15
24962: PUSH
24963: LD_INT 16
24965: PUSH
24966: LD_INT 17
24968: PUSH
24969: LD_INT 18
24971: PUSH
24972: LD_INT 19
24974: PUSH
24975: LD_INT 20
24977: PUSH
24978: LD_INT 21
24980: PUSH
24981: LD_INT 22
24983: PUSH
24984: LD_INT 23
24986: PUSH
24987: LD_INT 24
24989: PUSH
24990: LD_INT 25
24992: PUSH
24993: LD_INT 26
24995: PUSH
24996: LD_INT 27
24998: PUSH
24999: LD_INT 28
25001: PUSH
25002: LD_INT 30
25004: PUSH
25005: LD_INT 31
25007: PUSH
25008: LD_INT 32
25010: PUSH
25011: LD_INT 33
25013: PUSH
25014: LD_INT 34
25016: PUSH
25017: LD_INT 36
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: PUSH
25056: LD_INT 101
25058: PUSH
25059: LD_INT 102
25061: PUSH
25062: LD_INT 103
25064: PUSH
25065: LD_INT 104
25067: PUSH
25068: LD_INT 105
25070: PUSH
25071: LD_INT 106
25073: PUSH
25074: LD_INT 107
25076: PUSH
25077: LD_INT 108
25079: PUSH
25080: LD_INT 109
25082: PUSH
25083: LD_INT 110
25085: PUSH
25086: LD_INT 111
25088: PUSH
25089: LD_INT 112
25091: PUSH
25092: LD_INT 113
25094: PUSH
25095: LD_INT 114
25097: PUSH
25098: LD_INT 116
25100: PUSH
25101: LD_INT 117
25103: PUSH
25104: LD_INT 118
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: ST_TO_ADDR
25130: GO 26585
25132: LD_INT 13
25134: DOUBLE
25135: EQUAL
25136: IFTRUE 25140
25138: GO 25348
25140: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
25141: LD_ADDR_VAR 0 2
25145: PUSH
25146: LD_INT 1
25148: PUSH
25149: LD_INT 2
25151: PUSH
25152: LD_INT 3
25154: PUSH
25155: LD_INT 4
25157: PUSH
25158: LD_INT 5
25160: PUSH
25161: LD_INT 8
25163: PUSH
25164: LD_INT 9
25166: PUSH
25167: LD_INT 10
25169: PUSH
25170: LD_INT 11
25172: PUSH
25173: LD_INT 12
25175: PUSH
25176: LD_INT 14
25178: PUSH
25179: LD_INT 15
25181: PUSH
25182: LD_INT 16
25184: PUSH
25185: LD_INT 17
25187: PUSH
25188: LD_INT 18
25190: PUSH
25191: LD_INT 19
25193: PUSH
25194: LD_INT 20
25196: PUSH
25197: LD_INT 21
25199: PUSH
25200: LD_INT 22
25202: PUSH
25203: LD_INT 23
25205: PUSH
25206: LD_INT 24
25208: PUSH
25209: LD_INT 25
25211: PUSH
25212: LD_INT 26
25214: PUSH
25215: LD_INT 27
25217: PUSH
25218: LD_INT 28
25220: PUSH
25221: LD_INT 30
25223: PUSH
25224: LD_INT 31
25226: PUSH
25227: LD_INT 32
25229: PUSH
25230: LD_INT 33
25232: PUSH
25233: LD_INT 34
25235: PUSH
25236: LD_INT 36
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: PUSH
25272: LD_INT 101
25274: PUSH
25275: LD_INT 102
25277: PUSH
25278: LD_INT 103
25280: PUSH
25281: LD_INT 104
25283: PUSH
25284: LD_INT 105
25286: PUSH
25287: LD_INT 106
25289: PUSH
25290: LD_INT 107
25292: PUSH
25293: LD_INT 108
25295: PUSH
25296: LD_INT 109
25298: PUSH
25299: LD_INT 110
25301: PUSH
25302: LD_INT 111
25304: PUSH
25305: LD_INT 112
25307: PUSH
25308: LD_INT 113
25310: PUSH
25311: LD_INT 114
25313: PUSH
25314: LD_INT 116
25316: PUSH
25317: LD_INT 117
25319: PUSH
25320: LD_INT 118
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: ST_TO_ADDR
25346: GO 26585
25348: LD_INT 14
25350: DOUBLE
25351: EQUAL
25352: IFTRUE 25356
25354: GO 25580
25356: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
25357: LD_ADDR_VAR 0 2
25361: PUSH
25362: LD_INT 1
25364: PUSH
25365: LD_INT 2
25367: PUSH
25368: LD_INT 3
25370: PUSH
25371: LD_INT 4
25373: PUSH
25374: LD_INT 5
25376: PUSH
25377: LD_INT 6
25379: PUSH
25380: LD_INT 7
25382: PUSH
25383: LD_INT 8
25385: PUSH
25386: LD_INT 9
25388: PUSH
25389: LD_INT 10
25391: PUSH
25392: LD_INT 11
25394: PUSH
25395: LD_INT 12
25397: PUSH
25398: LD_INT 13
25400: PUSH
25401: LD_INT 14
25403: PUSH
25404: LD_INT 15
25406: PUSH
25407: LD_INT 16
25409: PUSH
25410: LD_INT 17
25412: PUSH
25413: LD_INT 18
25415: PUSH
25416: LD_INT 19
25418: PUSH
25419: LD_INT 20
25421: PUSH
25422: LD_INT 21
25424: PUSH
25425: LD_INT 22
25427: PUSH
25428: LD_INT 23
25430: PUSH
25431: LD_INT 24
25433: PUSH
25434: LD_INT 25
25436: PUSH
25437: LD_INT 26
25439: PUSH
25440: LD_INT 27
25442: PUSH
25443: LD_INT 28
25445: PUSH
25446: LD_INT 29
25448: PUSH
25449: LD_INT 30
25451: PUSH
25452: LD_INT 31
25454: PUSH
25455: LD_INT 32
25457: PUSH
25458: LD_INT 33
25460: PUSH
25461: LD_INT 34
25463: PUSH
25464: LD_INT 36
25466: PUSH
25467: EMPTY
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: PUSH
25504: LD_INT 101
25506: PUSH
25507: LD_INT 102
25509: PUSH
25510: LD_INT 103
25512: PUSH
25513: LD_INT 104
25515: PUSH
25516: LD_INT 105
25518: PUSH
25519: LD_INT 106
25521: PUSH
25522: LD_INT 107
25524: PUSH
25525: LD_INT 108
25527: PUSH
25528: LD_INT 109
25530: PUSH
25531: LD_INT 110
25533: PUSH
25534: LD_INT 111
25536: PUSH
25537: LD_INT 112
25539: PUSH
25540: LD_INT 113
25542: PUSH
25543: LD_INT 114
25545: PUSH
25546: LD_INT 116
25548: PUSH
25549: LD_INT 117
25551: PUSH
25552: LD_INT 118
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: ST_TO_ADDR
25578: GO 26585
25580: LD_INT 15
25582: DOUBLE
25583: EQUAL
25584: IFTRUE 25588
25586: GO 25812
25588: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
25589: LD_ADDR_VAR 0 2
25593: PUSH
25594: LD_INT 1
25596: PUSH
25597: LD_INT 2
25599: PUSH
25600: LD_INT 3
25602: PUSH
25603: LD_INT 4
25605: PUSH
25606: LD_INT 5
25608: PUSH
25609: LD_INT 6
25611: PUSH
25612: LD_INT 7
25614: PUSH
25615: LD_INT 8
25617: PUSH
25618: LD_INT 9
25620: PUSH
25621: LD_INT 10
25623: PUSH
25624: LD_INT 11
25626: PUSH
25627: LD_INT 12
25629: PUSH
25630: LD_INT 13
25632: PUSH
25633: LD_INT 14
25635: PUSH
25636: LD_INT 15
25638: PUSH
25639: LD_INT 16
25641: PUSH
25642: LD_INT 17
25644: PUSH
25645: LD_INT 18
25647: PUSH
25648: LD_INT 19
25650: PUSH
25651: LD_INT 20
25653: PUSH
25654: LD_INT 21
25656: PUSH
25657: LD_INT 22
25659: PUSH
25660: LD_INT 23
25662: PUSH
25663: LD_INT 24
25665: PUSH
25666: LD_INT 25
25668: PUSH
25669: LD_INT 26
25671: PUSH
25672: LD_INT 27
25674: PUSH
25675: LD_INT 28
25677: PUSH
25678: LD_INT 29
25680: PUSH
25681: LD_INT 30
25683: PUSH
25684: LD_INT 31
25686: PUSH
25687: LD_INT 32
25689: PUSH
25690: LD_INT 33
25692: PUSH
25693: LD_INT 34
25695: PUSH
25696: LD_INT 36
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: PUSH
25736: LD_INT 101
25738: PUSH
25739: LD_INT 102
25741: PUSH
25742: LD_INT 103
25744: PUSH
25745: LD_INT 104
25747: PUSH
25748: LD_INT 105
25750: PUSH
25751: LD_INT 106
25753: PUSH
25754: LD_INT 107
25756: PUSH
25757: LD_INT 108
25759: PUSH
25760: LD_INT 109
25762: PUSH
25763: LD_INT 110
25765: PUSH
25766: LD_INT 111
25768: PUSH
25769: LD_INT 112
25771: PUSH
25772: LD_INT 113
25774: PUSH
25775: LD_INT 114
25777: PUSH
25778: LD_INT 116
25780: PUSH
25781: LD_INT 117
25783: PUSH
25784: LD_INT 118
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: ST_TO_ADDR
25810: GO 26585
25812: LD_INT 16
25814: DOUBLE
25815: EQUAL
25816: IFTRUE 25820
25818: GO 25956
25820: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
25821: LD_ADDR_VAR 0 2
25825: PUSH
25826: LD_INT 2
25828: PUSH
25829: LD_INT 4
25831: PUSH
25832: LD_INT 5
25834: PUSH
25835: LD_INT 7
25837: PUSH
25838: LD_INT 11
25840: PUSH
25841: LD_INT 12
25843: PUSH
25844: LD_INT 15
25846: PUSH
25847: LD_INT 16
25849: PUSH
25850: LD_INT 20
25852: PUSH
25853: LD_INT 21
25855: PUSH
25856: LD_INT 22
25858: PUSH
25859: LD_INT 23
25861: PUSH
25862: LD_INT 25
25864: PUSH
25865: LD_INT 26
25867: PUSH
25868: LD_INT 30
25870: PUSH
25871: LD_INT 31
25873: PUSH
25874: LD_INT 32
25876: PUSH
25877: LD_INT 33
25879: PUSH
25880: LD_INT 34
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: PUSH
25904: LD_INT 101
25906: PUSH
25907: LD_INT 102
25909: PUSH
25910: LD_INT 103
25912: PUSH
25913: LD_INT 106
25915: PUSH
25916: LD_INT 108
25918: PUSH
25919: LD_INT 112
25921: PUSH
25922: LD_INT 113
25924: PUSH
25925: LD_INT 114
25927: PUSH
25928: LD_INT 116
25930: PUSH
25931: LD_INT 117
25933: PUSH
25934: LD_INT 118
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: ST_TO_ADDR
25954: GO 26585
25956: LD_INT 17
25958: DOUBLE
25959: EQUAL
25960: IFTRUE 25964
25962: GO 26188
25964: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
25965: LD_ADDR_VAR 0 2
25969: PUSH
25970: LD_INT 1
25972: PUSH
25973: LD_INT 2
25975: PUSH
25976: LD_INT 3
25978: PUSH
25979: LD_INT 4
25981: PUSH
25982: LD_INT 5
25984: PUSH
25985: LD_INT 6
25987: PUSH
25988: LD_INT 7
25990: PUSH
25991: LD_INT 8
25993: PUSH
25994: LD_INT 9
25996: PUSH
25997: LD_INT 10
25999: PUSH
26000: LD_INT 11
26002: PUSH
26003: LD_INT 12
26005: PUSH
26006: LD_INT 13
26008: PUSH
26009: LD_INT 14
26011: PUSH
26012: LD_INT 15
26014: PUSH
26015: LD_INT 16
26017: PUSH
26018: LD_INT 17
26020: PUSH
26021: LD_INT 18
26023: PUSH
26024: LD_INT 19
26026: PUSH
26027: LD_INT 20
26029: PUSH
26030: LD_INT 21
26032: PUSH
26033: LD_INT 22
26035: PUSH
26036: LD_INT 23
26038: PUSH
26039: LD_INT 24
26041: PUSH
26042: LD_INT 25
26044: PUSH
26045: LD_INT 26
26047: PUSH
26048: LD_INT 27
26050: PUSH
26051: LD_INT 28
26053: PUSH
26054: LD_INT 29
26056: PUSH
26057: LD_INT 30
26059: PUSH
26060: LD_INT 31
26062: PUSH
26063: LD_INT 32
26065: PUSH
26066: LD_INT 33
26068: PUSH
26069: LD_INT 34
26071: PUSH
26072: LD_INT 36
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: PUSH
26112: LD_INT 101
26114: PUSH
26115: LD_INT 102
26117: PUSH
26118: LD_INT 103
26120: PUSH
26121: LD_INT 104
26123: PUSH
26124: LD_INT 105
26126: PUSH
26127: LD_INT 106
26129: PUSH
26130: LD_INT 107
26132: PUSH
26133: LD_INT 108
26135: PUSH
26136: LD_INT 109
26138: PUSH
26139: LD_INT 110
26141: PUSH
26142: LD_INT 111
26144: PUSH
26145: LD_INT 112
26147: PUSH
26148: LD_INT 113
26150: PUSH
26151: LD_INT 114
26153: PUSH
26154: LD_INT 116
26156: PUSH
26157: LD_INT 117
26159: PUSH
26160: LD_INT 118
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: ST_TO_ADDR
26186: GO 26585
26188: LD_INT 18
26190: DOUBLE
26191: EQUAL
26192: IFTRUE 26196
26194: GO 26344
26196: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
26197: LD_ADDR_VAR 0 2
26201: PUSH
26202: LD_INT 2
26204: PUSH
26205: LD_INT 4
26207: PUSH
26208: LD_INT 5
26210: PUSH
26211: LD_INT 7
26213: PUSH
26214: LD_INT 11
26216: PUSH
26217: LD_INT 12
26219: PUSH
26220: LD_INT 15
26222: PUSH
26223: LD_INT 16
26225: PUSH
26226: LD_INT 20
26228: PUSH
26229: LD_INT 21
26231: PUSH
26232: LD_INT 22
26234: PUSH
26235: LD_INT 23
26237: PUSH
26238: LD_INT 25
26240: PUSH
26241: LD_INT 26
26243: PUSH
26244: LD_INT 30
26246: PUSH
26247: LD_INT 31
26249: PUSH
26250: LD_INT 32
26252: PUSH
26253: LD_INT 33
26255: PUSH
26256: LD_INT 34
26258: PUSH
26259: LD_INT 35
26261: PUSH
26262: LD_INT 36
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: LIST
26287: PUSH
26288: LD_INT 101
26290: PUSH
26291: LD_INT 102
26293: PUSH
26294: LD_INT 103
26296: PUSH
26297: LD_INT 106
26299: PUSH
26300: LD_INT 108
26302: PUSH
26303: LD_INT 112
26305: PUSH
26306: LD_INT 113
26308: PUSH
26309: LD_INT 114
26311: PUSH
26312: LD_INT 115
26314: PUSH
26315: LD_INT 116
26317: PUSH
26318: LD_INT 117
26320: PUSH
26321: LD_INT 118
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: ST_TO_ADDR
26342: GO 26585
26344: LD_INT 19
26346: DOUBLE
26347: EQUAL
26348: IFTRUE 26352
26350: GO 26584
26352: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
26353: LD_ADDR_VAR 0 2
26357: PUSH
26358: LD_INT 1
26360: PUSH
26361: LD_INT 2
26363: PUSH
26364: LD_INT 3
26366: PUSH
26367: LD_INT 4
26369: PUSH
26370: LD_INT 5
26372: PUSH
26373: LD_INT 6
26375: PUSH
26376: LD_INT 7
26378: PUSH
26379: LD_INT 8
26381: PUSH
26382: LD_INT 9
26384: PUSH
26385: LD_INT 10
26387: PUSH
26388: LD_INT 11
26390: PUSH
26391: LD_INT 12
26393: PUSH
26394: LD_INT 13
26396: PUSH
26397: LD_INT 14
26399: PUSH
26400: LD_INT 15
26402: PUSH
26403: LD_INT 16
26405: PUSH
26406: LD_INT 17
26408: PUSH
26409: LD_INT 18
26411: PUSH
26412: LD_INT 19
26414: PUSH
26415: LD_INT 20
26417: PUSH
26418: LD_INT 21
26420: PUSH
26421: LD_INT 22
26423: PUSH
26424: LD_INT 23
26426: PUSH
26427: LD_INT 24
26429: PUSH
26430: LD_INT 25
26432: PUSH
26433: LD_INT 26
26435: PUSH
26436: LD_INT 27
26438: PUSH
26439: LD_INT 28
26441: PUSH
26442: LD_INT 29
26444: PUSH
26445: LD_INT 30
26447: PUSH
26448: LD_INT 31
26450: PUSH
26451: LD_INT 32
26453: PUSH
26454: LD_INT 33
26456: PUSH
26457: LD_INT 34
26459: PUSH
26460: LD_INT 35
26462: PUSH
26463: LD_INT 36
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: PUSH
26504: LD_INT 101
26506: PUSH
26507: LD_INT 102
26509: PUSH
26510: LD_INT 103
26512: PUSH
26513: LD_INT 104
26515: PUSH
26516: LD_INT 105
26518: PUSH
26519: LD_INT 106
26521: PUSH
26522: LD_INT 107
26524: PUSH
26525: LD_INT 108
26527: PUSH
26528: LD_INT 109
26530: PUSH
26531: LD_INT 110
26533: PUSH
26534: LD_INT 111
26536: PUSH
26537: LD_INT 112
26539: PUSH
26540: LD_INT 113
26542: PUSH
26543: LD_INT 114
26545: PUSH
26546: LD_INT 115
26548: PUSH
26549: LD_INT 116
26551: PUSH
26552: LD_INT 117
26554: PUSH
26555: LD_INT 118
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: ST_TO_ADDR
26582: GO 26585
26584: POP
// end else
26585: GO 26816
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
26587: LD_ADDR_VAR 0 2
26591: PUSH
26592: LD_INT 1
26594: PUSH
26595: LD_INT 2
26597: PUSH
26598: LD_INT 3
26600: PUSH
26601: LD_INT 4
26603: PUSH
26604: LD_INT 5
26606: PUSH
26607: LD_INT 6
26609: PUSH
26610: LD_INT 7
26612: PUSH
26613: LD_INT 8
26615: PUSH
26616: LD_INT 9
26618: PUSH
26619: LD_INT 10
26621: PUSH
26622: LD_INT 11
26624: PUSH
26625: LD_INT 12
26627: PUSH
26628: LD_INT 13
26630: PUSH
26631: LD_INT 14
26633: PUSH
26634: LD_INT 15
26636: PUSH
26637: LD_INT 16
26639: PUSH
26640: LD_INT 17
26642: PUSH
26643: LD_INT 18
26645: PUSH
26646: LD_INT 19
26648: PUSH
26649: LD_INT 20
26651: PUSH
26652: LD_INT 21
26654: PUSH
26655: LD_INT 22
26657: PUSH
26658: LD_INT 23
26660: PUSH
26661: LD_INT 24
26663: PUSH
26664: LD_INT 25
26666: PUSH
26667: LD_INT 26
26669: PUSH
26670: LD_INT 27
26672: PUSH
26673: LD_INT 28
26675: PUSH
26676: LD_INT 29
26678: PUSH
26679: LD_INT 30
26681: PUSH
26682: LD_INT 31
26684: PUSH
26685: LD_INT 32
26687: PUSH
26688: LD_INT 33
26690: PUSH
26691: LD_INT 34
26693: PUSH
26694: LD_INT 35
26696: PUSH
26697: LD_INT 36
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: PUSH
26738: LD_INT 101
26740: PUSH
26741: LD_INT 102
26743: PUSH
26744: LD_INT 103
26746: PUSH
26747: LD_INT 104
26749: PUSH
26750: LD_INT 105
26752: PUSH
26753: LD_INT 106
26755: PUSH
26756: LD_INT 107
26758: PUSH
26759: LD_INT 108
26761: PUSH
26762: LD_INT 109
26764: PUSH
26765: LD_INT 110
26767: PUSH
26768: LD_INT 111
26770: PUSH
26771: LD_INT 112
26773: PUSH
26774: LD_INT 113
26776: PUSH
26777: LD_INT 114
26779: PUSH
26780: LD_INT 115
26782: PUSH
26783: LD_INT 116
26785: PUSH
26786: LD_INT 117
26788: PUSH
26789: LD_INT 118
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: ST_TO_ADDR
// if result then
26816: LD_VAR 0 2
26820: IFFALSE 27606
// begin normal :=  ;
26822: LD_ADDR_VAR 0 5
26826: PUSH
26827: LD_STRING 
26829: ST_TO_ADDR
// hardcore :=  ;
26830: LD_ADDR_VAR 0 6
26834: PUSH
26835: LD_STRING 
26837: ST_TO_ADDR
// active :=  ;
26838: LD_ADDR_VAR 0 7
26842: PUSH
26843: LD_STRING 
26845: ST_TO_ADDR
// for i = 1 to normalCounter do
26846: LD_ADDR_VAR 0 8
26850: PUSH
26851: DOUBLE
26852: LD_INT 1
26854: DEC
26855: ST_TO_ADDR
26856: LD_EXP 60
26860: PUSH
26861: FOR_TO
26862: IFFALSE 26963
// begin tmp := 0 ;
26864: LD_ADDR_VAR 0 3
26868: PUSH
26869: LD_STRING 0
26871: ST_TO_ADDR
// if result [ 1 ] then
26872: LD_VAR 0 2
26876: PUSH
26877: LD_INT 1
26879: ARRAY
26880: IFFALSE 26945
// if result [ 1 ] [ 1 ] = i then
26882: LD_VAR 0 2
26886: PUSH
26887: LD_INT 1
26889: ARRAY
26890: PUSH
26891: LD_INT 1
26893: ARRAY
26894: PUSH
26895: LD_VAR 0 8
26899: EQUAL
26900: IFFALSE 26945
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
26902: LD_ADDR_VAR 0 2
26906: PUSH
26907: LD_VAR 0 2
26911: PPUSH
26912: LD_INT 1
26914: PPUSH
26915: LD_VAR 0 2
26919: PUSH
26920: LD_INT 1
26922: ARRAY
26923: PPUSH
26924: LD_INT 1
26926: PPUSH
26927: CALL_OW 3
26931: PPUSH
26932: CALL_OW 1
26936: ST_TO_ADDR
// tmp := 1 ;
26937: LD_ADDR_VAR 0 3
26941: PUSH
26942: LD_STRING 1
26944: ST_TO_ADDR
// end ; normal := normal & tmp ;
26945: LD_ADDR_VAR 0 5
26949: PUSH
26950: LD_VAR 0 5
26954: PUSH
26955: LD_VAR 0 3
26959: STR
26960: ST_TO_ADDR
// end ;
26961: GO 26861
26963: POP
26964: POP
// for i = 1 to hardcoreCounter do
26965: LD_ADDR_VAR 0 8
26969: PUSH
26970: DOUBLE
26971: LD_INT 1
26973: DEC
26974: ST_TO_ADDR
26975: LD_EXP 61
26979: PUSH
26980: FOR_TO
26981: IFFALSE 27086
// begin tmp := 0 ;
26983: LD_ADDR_VAR 0 3
26987: PUSH
26988: LD_STRING 0
26990: ST_TO_ADDR
// if result [ 2 ] then
26991: LD_VAR 0 2
26995: PUSH
26996: LD_INT 2
26998: ARRAY
26999: IFFALSE 27068
// if result [ 2 ] [ 1 ] = 100 + i then
27001: LD_VAR 0 2
27005: PUSH
27006: LD_INT 2
27008: ARRAY
27009: PUSH
27010: LD_INT 1
27012: ARRAY
27013: PUSH
27014: LD_INT 100
27016: PUSH
27017: LD_VAR 0 8
27021: PLUS
27022: EQUAL
27023: IFFALSE 27068
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
27025: LD_ADDR_VAR 0 2
27029: PUSH
27030: LD_VAR 0 2
27034: PPUSH
27035: LD_INT 2
27037: PPUSH
27038: LD_VAR 0 2
27042: PUSH
27043: LD_INT 2
27045: ARRAY
27046: PPUSH
27047: LD_INT 1
27049: PPUSH
27050: CALL_OW 3
27054: PPUSH
27055: CALL_OW 1
27059: ST_TO_ADDR
// tmp := 1 ;
27060: LD_ADDR_VAR 0 3
27064: PUSH
27065: LD_STRING 1
27067: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
27068: LD_ADDR_VAR 0 6
27072: PUSH
27073: LD_VAR 0 6
27077: PUSH
27078: LD_VAR 0 3
27082: STR
27083: ST_TO_ADDR
// end ;
27084: GO 26980
27086: POP
27087: POP
// if isGameLoad then
27088: LD_VAR 0 1
27092: IFFALSE 27567
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
27094: LD_ADDR_VAR 0 4
27098: PUSH
27099: LD_EXP 64
27103: PUSH
27104: LD_EXP 63
27108: PUSH
27109: LD_EXP 65
27113: PUSH
27114: LD_EXP 62
27118: PUSH
27119: LD_EXP 66
27123: PUSH
27124: LD_EXP 67
27128: PUSH
27129: LD_EXP 68
27133: PUSH
27134: LD_EXP 69
27138: PUSH
27139: LD_EXP 70
27143: PUSH
27144: LD_EXP 71
27148: PUSH
27149: LD_EXP 72
27153: PUSH
27154: LD_EXP 73
27158: PUSH
27159: LD_EXP 74
27163: PUSH
27164: LD_EXP 75
27168: PUSH
27169: LD_EXP 83
27173: PUSH
27174: LD_EXP 84
27178: PUSH
27179: LD_EXP 85
27183: PUSH
27184: LD_EXP 86
27188: PUSH
27189: LD_EXP 88
27193: PUSH
27194: LD_EXP 89
27198: PUSH
27199: LD_EXP 90
27203: PUSH
27204: LD_EXP 93
27208: PUSH
27209: LD_EXP 95
27213: PUSH
27214: LD_EXP 96
27218: PUSH
27219: LD_EXP 97
27223: PUSH
27224: LD_EXP 99
27228: PUSH
27229: LD_EXP 100
27233: PUSH
27234: LD_EXP 103
27238: PUSH
27239: LD_EXP 104
27243: PUSH
27244: LD_EXP 105
27248: PUSH
27249: LD_EXP 106
27253: PUSH
27254: LD_EXP 107
27258: PUSH
27259: LD_EXP 108
27263: PUSH
27264: LD_EXP 109
27268: PUSH
27269: LD_EXP 110
27273: PUSH
27274: LD_EXP 111
27278: PUSH
27279: LD_EXP 76
27283: PUSH
27284: LD_EXP 77
27288: PUSH
27289: LD_EXP 80
27293: PUSH
27294: LD_EXP 81
27298: PUSH
27299: LD_EXP 82
27303: PUSH
27304: LD_EXP 78
27308: PUSH
27309: LD_EXP 79
27313: PUSH
27314: LD_EXP 87
27318: PUSH
27319: LD_EXP 91
27323: PUSH
27324: LD_EXP 92
27328: PUSH
27329: LD_EXP 94
27333: PUSH
27334: LD_EXP 98
27338: PUSH
27339: LD_EXP 101
27343: PUSH
27344: LD_EXP 102
27348: PUSH
27349: LD_EXP 112
27353: PUSH
27354: LD_EXP 113
27358: PUSH
27359: LD_EXP 114
27363: PUSH
27364: LD_EXP 115
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: ST_TO_ADDR
// tmp :=  ;
27425: LD_ADDR_VAR 0 3
27429: PUSH
27430: LD_STRING 
27432: ST_TO_ADDR
// for i = 1 to normalCounter do
27433: LD_ADDR_VAR 0 8
27437: PUSH
27438: DOUBLE
27439: LD_INT 1
27441: DEC
27442: ST_TO_ADDR
27443: LD_EXP 60
27447: PUSH
27448: FOR_TO
27449: IFFALSE 27485
// begin if flags [ i ] then
27451: LD_VAR 0 4
27455: PUSH
27456: LD_VAR 0 8
27460: ARRAY
27461: IFFALSE 27483
// tmp := tmp & i & ; ;
27463: LD_ADDR_VAR 0 3
27467: PUSH
27468: LD_VAR 0 3
27472: PUSH
27473: LD_VAR 0 8
27477: STR
27478: PUSH
27479: LD_STRING ;
27481: STR
27482: ST_TO_ADDR
// end ;
27483: GO 27448
27485: POP
27486: POP
// for i = 1 to hardcoreCounter do
27487: LD_ADDR_VAR 0 8
27491: PUSH
27492: DOUBLE
27493: LD_INT 1
27495: DEC
27496: ST_TO_ADDR
27497: LD_EXP 61
27501: PUSH
27502: FOR_TO
27503: IFFALSE 27549
// begin if flags [ normalCounter + i ] then
27505: LD_VAR 0 4
27509: PUSH
27510: LD_EXP 60
27514: PUSH
27515: LD_VAR 0 8
27519: PLUS
27520: ARRAY
27521: IFFALSE 27547
// tmp := tmp & ( 100 + i ) & ; ;
27523: LD_ADDR_VAR 0 3
27527: PUSH
27528: LD_VAR 0 3
27532: PUSH
27533: LD_INT 100
27535: PUSH
27536: LD_VAR 0 8
27540: PLUS
27541: STR
27542: PUSH
27543: LD_STRING ;
27545: STR
27546: ST_TO_ADDR
// end ;
27547: GO 27502
27549: POP
27550: POP
// if tmp then
27551: LD_VAR 0 3
27555: IFFALSE 27567
// active := tmp ;
27557: LD_ADDR_VAR 0 7
27561: PUSH
27562: LD_VAR 0 3
27566: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
27567: LD_STRING getStreamItemsFromMission("
27569: PUSH
27570: LD_VAR 0 5
27574: STR
27575: PUSH
27576: LD_STRING ","
27578: STR
27579: PUSH
27580: LD_VAR 0 6
27584: STR
27585: PUSH
27586: LD_STRING ","
27588: STR
27589: PUSH
27590: LD_VAR 0 7
27594: STR
27595: PUSH
27596: LD_STRING ")
27598: STR
27599: PPUSH
27600: CALL_OW 559
// end else
27604: GO 27613
// ToLua ( getStreamItemsFromMission("","","") ) ;
27606: LD_STRING getStreamItemsFromMission("","","")
27608: PPUSH
27609: CALL_OW 559
// end ;
27613: LD_VAR 0 2
27617: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
27618: LD_EXP 59
27622: PUSH
27623: LD_EXP 64
27627: AND
27628: IFFALSE 27752
27630: GO 27632
27632: DISABLE
27633: LD_INT 0
27635: PPUSH
27636: PPUSH
// begin enable ;
27637: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
27638: LD_ADDR_VAR 0 2
27642: PUSH
27643: LD_INT 22
27645: PUSH
27646: LD_OWVAR 2
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 2
27657: PUSH
27658: LD_INT 34
27660: PUSH
27661: LD_INT 7
27663: PUSH
27664: EMPTY
27665: LIST
27666: LIST
27667: PUSH
27668: LD_INT 34
27670: PUSH
27671: LD_INT 45
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: PUSH
27678: LD_INT 34
27680: PUSH
27681: LD_INT 28
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: PUSH
27688: LD_INT 34
27690: PUSH
27691: LD_INT 47
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PPUSH
27709: CALL_OW 69
27713: ST_TO_ADDR
// if not tmp then
27714: LD_VAR 0 2
27718: NOT
27719: IFFALSE 27723
// exit ;
27721: GO 27752
// for i in tmp do
27723: LD_ADDR_VAR 0 1
27727: PUSH
27728: LD_VAR 0 2
27732: PUSH
27733: FOR_IN
27734: IFFALSE 27750
// begin SetLives ( i , 0 ) ;
27736: LD_VAR 0 1
27740: PPUSH
27741: LD_INT 0
27743: PPUSH
27744: CALL_OW 234
// end ;
27748: GO 27733
27750: POP
27751: POP
// end ;
27752: PPOPN 2
27754: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
27755: LD_EXP 59
27759: PUSH
27760: LD_EXP 65
27764: AND
27765: IFFALSE 27849
27767: GO 27769
27769: DISABLE
27770: LD_INT 0
27772: PPUSH
27773: PPUSH
// begin enable ;
27774: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
27775: LD_ADDR_VAR 0 2
27779: PUSH
27780: LD_INT 22
27782: PUSH
27783: LD_OWVAR 2
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: PUSH
27792: LD_INT 32
27794: PUSH
27795: LD_INT 3
27797: PUSH
27798: EMPTY
27799: LIST
27800: LIST
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: PPUSH
27806: CALL_OW 69
27810: ST_TO_ADDR
// if not tmp then
27811: LD_VAR 0 2
27815: NOT
27816: IFFALSE 27820
// exit ;
27818: GO 27849
// for i in tmp do
27820: LD_ADDR_VAR 0 1
27824: PUSH
27825: LD_VAR 0 2
27829: PUSH
27830: FOR_IN
27831: IFFALSE 27847
// begin SetLives ( i , 0 ) ;
27833: LD_VAR 0 1
27837: PPUSH
27838: LD_INT 0
27840: PPUSH
27841: CALL_OW 234
// end ;
27845: GO 27830
27847: POP
27848: POP
// end ;
27849: PPOPN 2
27851: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
27852: LD_EXP 59
27856: PUSH
27857: LD_EXP 62
27861: AND
27862: IFFALSE 27955
27864: GO 27866
27866: DISABLE
27867: LD_INT 0
27869: PPUSH
// begin enable ;
27870: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
27871: LD_ADDR_VAR 0 1
27875: PUSH
27876: LD_INT 22
27878: PUSH
27879: LD_OWVAR 2
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: PUSH
27888: LD_INT 2
27890: PUSH
27891: LD_INT 25
27893: PUSH
27894: LD_INT 5
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: LD_INT 25
27903: PUSH
27904: LD_INT 9
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: LD_INT 25
27913: PUSH
27914: LD_INT 8
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PPUSH
27931: CALL_OW 69
27935: PUSH
27936: FOR_IN
27937: IFFALSE 27953
// begin SetClass ( i , 1 ) ;
27939: LD_VAR 0 1
27943: PPUSH
27944: LD_INT 1
27946: PPUSH
27947: CALL_OW 336
// end ;
27951: GO 27936
27953: POP
27954: POP
// end ;
27955: PPOPN 1
27957: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
27958: LD_EXP 59
27962: PUSH
27963: LD_EXP 63
27967: AND
27968: PUSH
27969: LD_OWVAR 65
27973: PUSH
27974: LD_INT 7
27976: LESS
27977: AND
27978: IFFALSE 27992
27980: GO 27982
27982: DISABLE
// begin enable ;
27983: ENABLE
// game_speed := 7 ;
27984: LD_ADDR_OWVAR 65
27988: PUSH
27989: LD_INT 7
27991: ST_TO_ADDR
// end ;
27992: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
27993: LD_EXP 59
27997: PUSH
27998: LD_EXP 66
28002: AND
28003: IFFALSE 28205
28005: GO 28007
28007: DISABLE
28008: LD_INT 0
28010: PPUSH
28011: PPUSH
28012: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28013: LD_ADDR_VAR 0 3
28017: PUSH
28018: LD_INT 81
28020: PUSH
28021: LD_OWVAR 2
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PUSH
28030: LD_INT 21
28032: PUSH
28033: LD_INT 1
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PPUSH
28044: CALL_OW 69
28048: ST_TO_ADDR
// if not tmp then
28049: LD_VAR 0 3
28053: NOT
28054: IFFALSE 28058
// exit ;
28056: GO 28205
// if tmp > 5 then
28058: LD_VAR 0 3
28062: PUSH
28063: LD_INT 5
28065: GREATER
28066: IFFALSE 28078
// k := 5 else
28068: LD_ADDR_VAR 0 2
28072: PUSH
28073: LD_INT 5
28075: ST_TO_ADDR
28076: GO 28088
// k := tmp ;
28078: LD_ADDR_VAR 0 2
28082: PUSH
28083: LD_VAR 0 3
28087: ST_TO_ADDR
// for i := 1 to k do
28088: LD_ADDR_VAR 0 1
28092: PUSH
28093: DOUBLE
28094: LD_INT 1
28096: DEC
28097: ST_TO_ADDR
28098: LD_VAR 0 2
28102: PUSH
28103: FOR_TO
28104: IFFALSE 28203
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
28106: LD_VAR 0 3
28110: PUSH
28111: LD_VAR 0 1
28115: ARRAY
28116: PPUSH
28117: LD_VAR 0 1
28121: PUSH
28122: LD_INT 4
28124: MOD
28125: PUSH
28126: LD_INT 1
28128: PLUS
28129: PPUSH
28130: CALL_OW 259
28134: PUSH
28135: LD_INT 10
28137: LESS
28138: IFFALSE 28201
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
28140: LD_VAR 0 3
28144: PUSH
28145: LD_VAR 0 1
28149: ARRAY
28150: PPUSH
28151: LD_VAR 0 1
28155: PUSH
28156: LD_INT 4
28158: MOD
28159: PUSH
28160: LD_INT 1
28162: PLUS
28163: PPUSH
28164: LD_VAR 0 3
28168: PUSH
28169: LD_VAR 0 1
28173: ARRAY
28174: PPUSH
28175: LD_VAR 0 1
28179: PUSH
28180: LD_INT 4
28182: MOD
28183: PUSH
28184: LD_INT 1
28186: PLUS
28187: PPUSH
28188: CALL_OW 259
28192: PUSH
28193: LD_INT 1
28195: PLUS
28196: PPUSH
28197: CALL_OW 237
28201: GO 28103
28203: POP
28204: POP
// end ;
28205: PPOPN 3
28207: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
28208: LD_EXP 59
28212: PUSH
28213: LD_EXP 67
28217: AND
28218: IFFALSE 28238
28220: GO 28222
28222: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
28223: LD_INT 4
28225: PPUSH
28226: LD_OWVAR 2
28230: PPUSH
28231: LD_INT 0
28233: PPUSH
28234: CALL_OW 324
28238: END
// every 0 0$1 trigger StreamModeActive and sShovel do
28239: LD_EXP 59
28243: PUSH
28244: LD_EXP 96
28248: AND
28249: IFFALSE 28269
28251: GO 28253
28253: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
28254: LD_INT 19
28256: PPUSH
28257: LD_OWVAR 2
28261: PPUSH
28262: LD_INT 0
28264: PPUSH
28265: CALL_OW 324
28269: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
28270: LD_EXP 59
28274: PUSH
28275: LD_EXP 68
28279: AND
28280: IFFALSE 28382
28282: GO 28284
28284: DISABLE
28285: LD_INT 0
28287: PPUSH
28288: PPUSH
// begin enable ;
28289: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
28290: LD_ADDR_VAR 0 2
28294: PUSH
28295: LD_INT 22
28297: PUSH
28298: LD_OWVAR 2
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: LD_INT 2
28309: PUSH
28310: LD_INT 34
28312: PUSH
28313: LD_INT 11
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 34
28322: PUSH
28323: LD_INT 30
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: LIST
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: PPUSH
28339: CALL_OW 69
28343: ST_TO_ADDR
// if not tmp then
28344: LD_VAR 0 2
28348: NOT
28349: IFFALSE 28353
// exit ;
28351: GO 28382
// for i in tmp do
28353: LD_ADDR_VAR 0 1
28357: PUSH
28358: LD_VAR 0 2
28362: PUSH
28363: FOR_IN
28364: IFFALSE 28380
// begin SetLives ( i , 0 ) ;
28366: LD_VAR 0 1
28370: PPUSH
28371: LD_INT 0
28373: PPUSH
28374: CALL_OW 234
// end ;
28378: GO 28363
28380: POP
28381: POP
// end ;
28382: PPOPN 2
28384: END
// every 0 0$1 trigger StreamModeActive and sBunker do
28385: LD_EXP 59
28389: PUSH
28390: LD_EXP 69
28394: AND
28395: IFFALSE 28415
28397: GO 28399
28399: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
28400: LD_INT 32
28402: PPUSH
28403: LD_OWVAR 2
28407: PPUSH
28408: LD_INT 0
28410: PPUSH
28411: CALL_OW 324
28415: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
28416: LD_EXP 59
28420: PUSH
28421: LD_EXP 70
28425: AND
28426: IFFALSE 28607
28428: GO 28430
28430: DISABLE
28431: LD_INT 0
28433: PPUSH
28434: PPUSH
28435: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
28436: LD_ADDR_VAR 0 2
28440: PUSH
28441: LD_INT 22
28443: PUSH
28444: LD_OWVAR 2
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: LD_INT 33
28455: PUSH
28456: LD_INT 3
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PPUSH
28467: CALL_OW 69
28471: ST_TO_ADDR
// if not tmp then
28472: LD_VAR 0 2
28476: NOT
28477: IFFALSE 28481
// exit ;
28479: GO 28607
// side := 0 ;
28481: LD_ADDR_VAR 0 3
28485: PUSH
28486: LD_INT 0
28488: ST_TO_ADDR
// for i := 1 to 8 do
28489: LD_ADDR_VAR 0 1
28493: PUSH
28494: DOUBLE
28495: LD_INT 1
28497: DEC
28498: ST_TO_ADDR
28499: LD_INT 8
28501: PUSH
28502: FOR_TO
28503: IFFALSE 28551
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
28505: LD_OWVAR 2
28509: PUSH
28510: LD_VAR 0 1
28514: NONEQUAL
28515: PUSH
28516: LD_OWVAR 2
28520: PPUSH
28521: LD_VAR 0 1
28525: PPUSH
28526: CALL_OW 81
28530: PUSH
28531: LD_INT 2
28533: EQUAL
28534: AND
28535: IFFALSE 28549
// begin side := i ;
28537: LD_ADDR_VAR 0 3
28541: PUSH
28542: LD_VAR 0 1
28546: ST_TO_ADDR
// break ;
28547: GO 28551
// end ;
28549: GO 28502
28551: POP
28552: POP
// if not side then
28553: LD_VAR 0 3
28557: NOT
28558: IFFALSE 28562
// exit ;
28560: GO 28607
// for i := 1 to tmp do
28562: LD_ADDR_VAR 0 1
28566: PUSH
28567: DOUBLE
28568: LD_INT 1
28570: DEC
28571: ST_TO_ADDR
28572: LD_VAR 0 2
28576: PUSH
28577: FOR_TO
28578: IFFALSE 28605
// if Prob ( 60 ) then
28580: LD_INT 60
28582: PPUSH
28583: CALL_OW 13
28587: IFFALSE 28603
// SetSide ( i , side ) ;
28589: LD_VAR 0 1
28593: PPUSH
28594: LD_VAR 0 3
28598: PPUSH
28599: CALL_OW 235
28603: GO 28577
28605: POP
28606: POP
// end ;
28607: PPOPN 3
28609: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
28610: LD_EXP 59
28614: PUSH
28615: LD_EXP 72
28619: AND
28620: IFFALSE 28739
28622: GO 28624
28624: DISABLE
28625: LD_INT 0
28627: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
28628: LD_ADDR_VAR 0 1
28632: PUSH
28633: LD_INT 22
28635: PUSH
28636: LD_OWVAR 2
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 21
28647: PUSH
28648: LD_INT 1
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: LD_INT 3
28657: PUSH
28658: LD_INT 23
28660: PUSH
28661: LD_INT 0
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: LIST
28676: PPUSH
28677: CALL_OW 69
28681: PUSH
28682: FOR_IN
28683: IFFALSE 28737
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
28685: LD_VAR 0 1
28689: PPUSH
28690: CALL_OW 257
28694: PUSH
28695: LD_INT 1
28697: PUSH
28698: LD_INT 2
28700: PUSH
28701: LD_INT 3
28703: PUSH
28704: LD_INT 4
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: LIST
28711: LIST
28712: IN
28713: IFFALSE 28735
// SetClass ( un , rand ( 1 , 4 ) ) ;
28715: LD_VAR 0 1
28719: PPUSH
28720: LD_INT 1
28722: PPUSH
28723: LD_INT 4
28725: PPUSH
28726: CALL_OW 12
28730: PPUSH
28731: CALL_OW 336
28735: GO 28682
28737: POP
28738: POP
// end ;
28739: PPOPN 1
28741: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
28742: LD_EXP 59
28746: PUSH
28747: LD_EXP 71
28751: AND
28752: IFFALSE 28831
28754: GO 28756
28756: DISABLE
28757: LD_INT 0
28759: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28760: LD_ADDR_VAR 0 1
28764: PUSH
28765: LD_INT 22
28767: PUSH
28768: LD_OWVAR 2
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: PUSH
28777: LD_INT 21
28779: PUSH
28780: LD_INT 3
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PPUSH
28791: CALL_OW 69
28795: ST_TO_ADDR
// if not tmp then
28796: LD_VAR 0 1
28800: NOT
28801: IFFALSE 28805
// exit ;
28803: GO 28831
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
28805: LD_VAR 0 1
28809: PUSH
28810: LD_INT 1
28812: PPUSH
28813: LD_VAR 0 1
28817: PPUSH
28818: CALL_OW 12
28822: ARRAY
28823: PPUSH
28824: LD_INT 100
28826: PPUSH
28827: CALL_OW 234
// end ;
28831: PPOPN 1
28833: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
28834: LD_EXP 59
28838: PUSH
28839: LD_EXP 73
28843: AND
28844: IFFALSE 28942
28846: GO 28848
28848: DISABLE
28849: LD_INT 0
28851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28852: LD_ADDR_VAR 0 1
28856: PUSH
28857: LD_INT 22
28859: PUSH
28860: LD_OWVAR 2
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PUSH
28869: LD_INT 21
28871: PUSH
28872: LD_INT 1
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PPUSH
28883: CALL_OW 69
28887: ST_TO_ADDR
// if not tmp then
28888: LD_VAR 0 1
28892: NOT
28893: IFFALSE 28897
// exit ;
28895: GO 28942
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
28897: LD_VAR 0 1
28901: PUSH
28902: LD_INT 1
28904: PPUSH
28905: LD_VAR 0 1
28909: PPUSH
28910: CALL_OW 12
28914: ARRAY
28915: PPUSH
28916: LD_INT 1
28918: PPUSH
28919: LD_INT 4
28921: PPUSH
28922: CALL_OW 12
28926: PPUSH
28927: LD_INT 3000
28929: PPUSH
28930: LD_INT 9000
28932: PPUSH
28933: CALL_OW 12
28937: PPUSH
28938: CALL_OW 492
// end ;
28942: PPOPN 1
28944: END
// every 0 0$1 trigger StreamModeActive and sDepot do
28945: LD_EXP 59
28949: PUSH
28950: LD_EXP 74
28954: AND
28955: IFFALSE 28975
28957: GO 28959
28959: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
28960: LD_INT 1
28962: PPUSH
28963: LD_OWVAR 2
28967: PPUSH
28968: LD_INT 0
28970: PPUSH
28971: CALL_OW 324
28975: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
28976: LD_EXP 59
28980: PUSH
28981: LD_EXP 75
28985: AND
28986: IFFALSE 29069
28988: GO 28990
28990: DISABLE
28991: LD_INT 0
28993: PPUSH
28994: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
28995: LD_ADDR_VAR 0 2
28999: PUSH
29000: LD_INT 22
29002: PUSH
29003: LD_OWVAR 2
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 21
29014: PUSH
29015: LD_INT 3
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PPUSH
29026: CALL_OW 69
29030: ST_TO_ADDR
// if not tmp then
29031: LD_VAR 0 2
29035: NOT
29036: IFFALSE 29040
// exit ;
29038: GO 29069
// for i in tmp do
29040: LD_ADDR_VAR 0 1
29044: PUSH
29045: LD_VAR 0 2
29049: PUSH
29050: FOR_IN
29051: IFFALSE 29067
// SetBLevel ( i , 10 ) ;
29053: LD_VAR 0 1
29057: PPUSH
29058: LD_INT 10
29060: PPUSH
29061: CALL_OW 241
29065: GO 29050
29067: POP
29068: POP
// end ;
29069: PPOPN 2
29071: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
29072: LD_EXP 59
29076: PUSH
29077: LD_EXP 76
29081: AND
29082: IFFALSE 29193
29084: GO 29086
29086: DISABLE
29087: LD_INT 0
29089: PPUSH
29090: PPUSH
29091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29092: LD_ADDR_VAR 0 3
29096: PUSH
29097: LD_INT 22
29099: PUSH
29100: LD_OWVAR 2
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: PUSH
29109: LD_INT 25
29111: PUSH
29112: LD_INT 1
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: PPUSH
29123: CALL_OW 69
29127: ST_TO_ADDR
// if not tmp then
29128: LD_VAR 0 3
29132: NOT
29133: IFFALSE 29137
// exit ;
29135: GO 29193
// un := tmp [ rand ( 1 , tmp ) ] ;
29137: LD_ADDR_VAR 0 2
29141: PUSH
29142: LD_VAR 0 3
29146: PUSH
29147: LD_INT 1
29149: PPUSH
29150: LD_VAR 0 3
29154: PPUSH
29155: CALL_OW 12
29159: ARRAY
29160: ST_TO_ADDR
// if Crawls ( un ) then
29161: LD_VAR 0 2
29165: PPUSH
29166: CALL_OW 318
29170: IFFALSE 29181
// ComWalk ( un ) ;
29172: LD_VAR 0 2
29176: PPUSH
29177: CALL_OW 138
// SetClass ( un , class_sniper ) ;
29181: LD_VAR 0 2
29185: PPUSH
29186: LD_INT 5
29188: PPUSH
29189: CALL_OW 336
// end ;
29193: PPOPN 3
29195: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
29196: LD_EXP 59
29200: PUSH
29201: LD_EXP 77
29205: AND
29206: PUSH
29207: LD_OWVAR 67
29211: PUSH
29212: LD_INT 4
29214: LESS
29215: AND
29216: IFFALSE 29235
29218: GO 29220
29220: DISABLE
// begin Difficulty := Difficulty + 1 ;
29221: LD_ADDR_OWVAR 67
29225: PUSH
29226: LD_OWVAR 67
29230: PUSH
29231: LD_INT 1
29233: PLUS
29234: ST_TO_ADDR
// end ;
29235: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
29236: LD_EXP 59
29240: PUSH
29241: LD_EXP 78
29245: AND
29246: IFFALSE 29349
29248: GO 29250
29250: DISABLE
29251: LD_INT 0
29253: PPUSH
// begin for i := 1 to 5 do
29254: LD_ADDR_VAR 0 1
29258: PUSH
29259: DOUBLE
29260: LD_INT 1
29262: DEC
29263: ST_TO_ADDR
29264: LD_INT 5
29266: PUSH
29267: FOR_TO
29268: IFFALSE 29347
// begin uc_nation := nation_nature ;
29270: LD_ADDR_OWVAR 21
29274: PUSH
29275: LD_INT 0
29277: ST_TO_ADDR
// uc_side := 0 ;
29278: LD_ADDR_OWVAR 20
29282: PUSH
29283: LD_INT 0
29285: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29286: LD_ADDR_OWVAR 29
29290: PUSH
29291: LD_INT 12
29293: PUSH
29294: LD_INT 12
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: ST_TO_ADDR
// hc_agressivity := 20 ;
29301: LD_ADDR_OWVAR 35
29305: PUSH
29306: LD_INT 20
29308: ST_TO_ADDR
// hc_class := class_tiger ;
29309: LD_ADDR_OWVAR 28
29313: PUSH
29314: LD_INT 14
29316: ST_TO_ADDR
// hc_gallery :=  ;
29317: LD_ADDR_OWVAR 33
29321: PUSH
29322: LD_STRING 
29324: ST_TO_ADDR
// hc_name :=  ;
29325: LD_ADDR_OWVAR 26
29329: PUSH
29330: LD_STRING 
29332: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
29333: CALL_OW 44
29337: PPUSH
29338: LD_INT 0
29340: PPUSH
29341: CALL_OW 51
// end ;
29345: GO 29267
29347: POP
29348: POP
// end ;
29349: PPOPN 1
29351: END
// every 0 0$1 trigger StreamModeActive and sBomb do
29352: LD_EXP 59
29356: PUSH
29357: LD_EXP 79
29361: AND
29362: IFFALSE 29371
29364: GO 29366
29366: DISABLE
// StreamSibBomb ;
29367: CALL 29372 0 0
29371: END
// export function StreamSibBomb ; var i , x , y ; begin
29372: LD_INT 0
29374: PPUSH
29375: PPUSH
29376: PPUSH
29377: PPUSH
// result := false ;
29378: LD_ADDR_VAR 0 1
29382: PUSH
29383: LD_INT 0
29385: ST_TO_ADDR
// for i := 1 to 16 do
29386: LD_ADDR_VAR 0 2
29390: PUSH
29391: DOUBLE
29392: LD_INT 1
29394: DEC
29395: ST_TO_ADDR
29396: LD_INT 16
29398: PUSH
29399: FOR_TO
29400: IFFALSE 29599
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29402: LD_ADDR_VAR 0 3
29406: PUSH
29407: LD_INT 10
29409: PUSH
29410: LD_INT 20
29412: PUSH
29413: LD_INT 30
29415: PUSH
29416: LD_INT 40
29418: PUSH
29419: LD_INT 50
29421: PUSH
29422: LD_INT 60
29424: PUSH
29425: LD_INT 70
29427: PUSH
29428: LD_INT 80
29430: PUSH
29431: LD_INT 90
29433: PUSH
29434: LD_INT 100
29436: PUSH
29437: LD_INT 110
29439: PUSH
29440: LD_INT 120
29442: PUSH
29443: LD_INT 130
29445: PUSH
29446: LD_INT 140
29448: PUSH
29449: LD_INT 150
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: LIST
29465: LIST
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 1
29471: PPUSH
29472: LD_INT 15
29474: PPUSH
29475: CALL_OW 12
29479: ARRAY
29480: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
29481: LD_ADDR_VAR 0 4
29485: PUSH
29486: LD_INT 10
29488: PUSH
29489: LD_INT 20
29491: PUSH
29492: LD_INT 30
29494: PUSH
29495: LD_INT 40
29497: PUSH
29498: LD_INT 50
29500: PUSH
29501: LD_INT 60
29503: PUSH
29504: LD_INT 70
29506: PUSH
29507: LD_INT 80
29509: PUSH
29510: LD_INT 90
29512: PUSH
29513: LD_INT 100
29515: PUSH
29516: LD_INT 110
29518: PUSH
29519: LD_INT 120
29521: PUSH
29522: LD_INT 130
29524: PUSH
29525: LD_INT 140
29527: PUSH
29528: LD_INT 150
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 1
29550: PPUSH
29551: LD_INT 15
29553: PPUSH
29554: CALL_OW 12
29558: ARRAY
29559: ST_TO_ADDR
// if ValidHex ( x , y ) then
29560: LD_VAR 0 3
29564: PPUSH
29565: LD_VAR 0 4
29569: PPUSH
29570: CALL_OW 488
29574: IFFALSE 29597
// begin result := [ x , y ] ;
29576: LD_ADDR_VAR 0 1
29580: PUSH
29581: LD_VAR 0 3
29585: PUSH
29586: LD_VAR 0 4
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: ST_TO_ADDR
// break ;
29595: GO 29599
// end ; end ;
29597: GO 29399
29599: POP
29600: POP
// if result then
29601: LD_VAR 0 1
29605: IFFALSE 29665
// begin ToLua ( playSibBomb() ) ;
29607: LD_STRING playSibBomb()
29609: PPUSH
29610: CALL_OW 559
// wait ( 0 0$14 ) ;
29614: LD_INT 490
29616: PPUSH
29617: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
29621: LD_VAR 0 1
29625: PUSH
29626: LD_INT 1
29628: ARRAY
29629: PPUSH
29630: LD_VAR 0 1
29634: PUSH
29635: LD_INT 2
29637: ARRAY
29638: PPUSH
29639: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
29643: LD_VAR 0 1
29647: PUSH
29648: LD_INT 1
29650: ARRAY
29651: PPUSH
29652: LD_VAR 0 1
29656: PUSH
29657: LD_INT 2
29659: ARRAY
29660: PPUSH
29661: CALL_OW 429
// end ; end ;
29665: LD_VAR 0 1
29669: RET
// every 0 0$1 trigger StreamModeActive and sReset do
29670: LD_EXP 59
29674: PUSH
29675: LD_EXP 81
29679: AND
29680: IFFALSE 29692
29682: GO 29684
29684: DISABLE
// YouLost (  ) ;
29685: LD_STRING 
29687: PPUSH
29688: CALL_OW 104
29692: END
// every 0 0$1 trigger StreamModeActive and sFog do
29693: LD_EXP 59
29697: PUSH
29698: LD_EXP 80
29702: AND
29703: IFFALSE 29717
29705: GO 29707
29707: DISABLE
// FogOff ( your_side ) ;
29708: LD_OWVAR 2
29712: PPUSH
29713: CALL_OW 344
29717: END
// every 0 0$1 trigger StreamModeActive and sSun do
29718: LD_EXP 59
29722: PUSH
29723: LD_EXP 82
29727: AND
29728: IFFALSE 29756
29730: GO 29732
29732: DISABLE
// begin solar_recharge_percent := 0 ;
29733: LD_ADDR_OWVAR 79
29737: PUSH
29738: LD_INT 0
29740: ST_TO_ADDR
// wait ( 5 5$00 ) ;
29741: LD_INT 10500
29743: PPUSH
29744: CALL_OW 67
// solar_recharge_percent := 100 ;
29748: LD_ADDR_OWVAR 79
29752: PUSH
29753: LD_INT 100
29755: ST_TO_ADDR
// end ;
29756: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
29757: LD_EXP 59
29761: PUSH
29762: LD_EXP 83
29766: AND
29767: IFFALSE 30006
29769: GO 29771
29771: DISABLE
29772: LD_INT 0
29774: PPUSH
29775: PPUSH
29776: PPUSH
// begin tmp := [ ] ;
29777: LD_ADDR_VAR 0 3
29781: PUSH
29782: EMPTY
29783: ST_TO_ADDR
// for i := 1 to 6 do
29784: LD_ADDR_VAR 0 1
29788: PUSH
29789: DOUBLE
29790: LD_INT 1
29792: DEC
29793: ST_TO_ADDR
29794: LD_INT 6
29796: PUSH
29797: FOR_TO
29798: IFFALSE 29903
// begin uc_nation := nation_nature ;
29800: LD_ADDR_OWVAR 21
29804: PUSH
29805: LD_INT 0
29807: ST_TO_ADDR
// uc_side := 0 ;
29808: LD_ADDR_OWVAR 20
29812: PUSH
29813: LD_INT 0
29815: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
29816: LD_ADDR_OWVAR 29
29820: PUSH
29821: LD_INT 12
29823: PUSH
29824: LD_INT 12
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: ST_TO_ADDR
// hc_agressivity := 20 ;
29831: LD_ADDR_OWVAR 35
29835: PUSH
29836: LD_INT 20
29838: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
29839: LD_ADDR_OWVAR 28
29843: PUSH
29844: LD_INT 17
29846: ST_TO_ADDR
// hc_gallery :=  ;
29847: LD_ADDR_OWVAR 33
29851: PUSH
29852: LD_STRING 
29854: ST_TO_ADDR
// hc_name :=  ;
29855: LD_ADDR_OWVAR 26
29859: PUSH
29860: LD_STRING 
29862: ST_TO_ADDR
// un := CreateHuman ;
29863: LD_ADDR_VAR 0 2
29867: PUSH
29868: CALL_OW 44
29872: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
29873: LD_VAR 0 2
29877: PPUSH
29878: LD_INT 1
29880: PPUSH
29881: CALL_OW 51
// tmp := tmp ^ un ;
29885: LD_ADDR_VAR 0 3
29889: PUSH
29890: LD_VAR 0 3
29894: PUSH
29895: LD_VAR 0 2
29899: ADD
29900: ST_TO_ADDR
// end ;
29901: GO 29797
29903: POP
29904: POP
// repeat wait ( 0 0$1 ) ;
29905: LD_INT 35
29907: PPUSH
29908: CALL_OW 67
// for un in tmp do
29912: LD_ADDR_VAR 0 2
29916: PUSH
29917: LD_VAR 0 3
29921: PUSH
29922: FOR_IN
29923: IFFALSE 29997
// begin if IsDead ( un ) then
29925: LD_VAR 0 2
29929: PPUSH
29930: CALL_OW 301
29934: IFFALSE 29954
// begin tmp := tmp diff un ;
29936: LD_ADDR_VAR 0 3
29940: PUSH
29941: LD_VAR 0 3
29945: PUSH
29946: LD_VAR 0 2
29950: DIFF
29951: ST_TO_ADDR
// continue ;
29952: GO 29922
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
29954: LD_VAR 0 2
29958: PPUSH
29959: LD_INT 3
29961: PUSH
29962: LD_INT 22
29964: PUSH
29965: LD_INT 0
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PPUSH
29976: CALL_OW 69
29980: PPUSH
29981: LD_VAR 0 2
29985: PPUSH
29986: CALL_OW 74
29990: PPUSH
29991: CALL_OW 115
// end ;
29995: GO 29922
29997: POP
29998: POP
// until not tmp ;
29999: LD_VAR 0 3
30003: NOT
30004: IFFALSE 29905
// end ;
30006: PPOPN 3
30008: END
// every 0 0$1 trigger StreamModeActive and sTroll do
30009: LD_EXP 59
30013: PUSH
30014: LD_EXP 84
30018: AND
30019: IFFALSE 30073
30021: GO 30023
30023: DISABLE
// begin ToLua ( displayTroll(); ) ;
30024: LD_STRING displayTroll();
30026: PPUSH
30027: CALL_OW 559
// wait ( 3 3$00 ) ;
30031: LD_INT 6300
30033: PPUSH
30034: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30038: LD_STRING hideTroll();
30040: PPUSH
30041: CALL_OW 559
// wait ( 1 1$00 ) ;
30045: LD_INT 2100
30047: PPUSH
30048: CALL_OW 67
// ToLua ( displayTroll(); ) ;
30052: LD_STRING displayTroll();
30054: PPUSH
30055: CALL_OW 559
// wait ( 1 1$00 ) ;
30059: LD_INT 2100
30061: PPUSH
30062: CALL_OW 67
// ToLua ( hideTroll(); ) ;
30066: LD_STRING hideTroll();
30068: PPUSH
30069: CALL_OW 559
// end ;
30073: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
30074: LD_EXP 59
30078: PUSH
30079: LD_EXP 85
30083: AND
30084: IFFALSE 30147
30086: GO 30088
30088: DISABLE
30089: LD_INT 0
30091: PPUSH
// begin p := 0 ;
30092: LD_ADDR_VAR 0 1
30096: PUSH
30097: LD_INT 0
30099: ST_TO_ADDR
// repeat game_speed := 1 ;
30100: LD_ADDR_OWVAR 65
30104: PUSH
30105: LD_INT 1
30107: ST_TO_ADDR
// wait ( 0 0$1 ) ;
30108: LD_INT 35
30110: PPUSH
30111: CALL_OW 67
// p := p + 1 ;
30115: LD_ADDR_VAR 0 1
30119: PUSH
30120: LD_VAR 0 1
30124: PUSH
30125: LD_INT 1
30127: PLUS
30128: ST_TO_ADDR
// until p >= 60 ;
30129: LD_VAR 0 1
30133: PUSH
30134: LD_INT 60
30136: GREATEREQUAL
30137: IFFALSE 30100
// game_speed := 4 ;
30139: LD_ADDR_OWVAR 65
30143: PUSH
30144: LD_INT 4
30146: ST_TO_ADDR
// end ;
30147: PPOPN 1
30149: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
30150: LD_EXP 59
30154: PUSH
30155: LD_EXP 86
30159: AND
30160: IFFALSE 30306
30162: GO 30164
30164: DISABLE
30165: LD_INT 0
30167: PPUSH
30168: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30169: LD_ADDR_VAR 0 1
30173: PUSH
30174: LD_INT 22
30176: PUSH
30177: LD_OWVAR 2
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 2
30188: PUSH
30189: LD_INT 30
30191: PUSH
30192: LD_INT 0
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 30
30201: PUSH
30202: LD_INT 1
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: LIST
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PPUSH
30218: CALL_OW 69
30222: ST_TO_ADDR
// if not depot then
30223: LD_VAR 0 1
30227: NOT
30228: IFFALSE 30232
// exit ;
30230: GO 30306
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
30232: LD_ADDR_VAR 0 2
30236: PUSH
30237: LD_VAR 0 1
30241: PUSH
30242: LD_INT 1
30244: PPUSH
30245: LD_VAR 0 1
30249: PPUSH
30250: CALL_OW 12
30254: ARRAY
30255: PPUSH
30256: CALL_OW 274
30260: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
30261: LD_VAR 0 2
30265: PPUSH
30266: LD_INT 1
30268: PPUSH
30269: LD_INT 0
30271: PPUSH
30272: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
30276: LD_VAR 0 2
30280: PPUSH
30281: LD_INT 2
30283: PPUSH
30284: LD_INT 0
30286: PPUSH
30287: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
30291: LD_VAR 0 2
30295: PPUSH
30296: LD_INT 3
30298: PPUSH
30299: LD_INT 0
30301: PPUSH
30302: CALL_OW 277
// end ;
30306: PPOPN 2
30308: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
30309: LD_EXP 59
30313: PUSH
30314: LD_EXP 87
30318: AND
30319: IFFALSE 30416
30321: GO 30323
30323: DISABLE
30324: LD_INT 0
30326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30327: LD_ADDR_VAR 0 1
30331: PUSH
30332: LD_INT 22
30334: PUSH
30335: LD_OWVAR 2
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 21
30346: PUSH
30347: LD_INT 1
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: LD_INT 3
30356: PUSH
30357: LD_INT 23
30359: PUSH
30360: LD_INT 0
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: LIST
30375: PPUSH
30376: CALL_OW 69
30380: ST_TO_ADDR
// if not tmp then
30381: LD_VAR 0 1
30385: NOT
30386: IFFALSE 30390
// exit ;
30388: GO 30416
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
30390: LD_VAR 0 1
30394: PUSH
30395: LD_INT 1
30397: PPUSH
30398: LD_VAR 0 1
30402: PPUSH
30403: CALL_OW 12
30407: ARRAY
30408: PPUSH
30409: LD_INT 200
30411: PPUSH
30412: CALL_OW 234
// end ;
30416: PPOPN 1
30418: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
30419: LD_EXP 59
30423: PUSH
30424: LD_EXP 88
30428: AND
30429: IFFALSE 30508
30431: GO 30433
30433: DISABLE
30434: LD_INT 0
30436: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
30437: LD_ADDR_VAR 0 1
30441: PUSH
30442: LD_INT 22
30444: PUSH
30445: LD_OWVAR 2
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PUSH
30454: LD_INT 21
30456: PUSH
30457: LD_INT 2
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PPUSH
30468: CALL_OW 69
30472: ST_TO_ADDR
// if not tmp then
30473: LD_VAR 0 1
30477: NOT
30478: IFFALSE 30482
// exit ;
30480: GO 30508
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
30482: LD_VAR 0 1
30486: PUSH
30487: LD_INT 1
30489: PPUSH
30490: LD_VAR 0 1
30494: PPUSH
30495: CALL_OW 12
30499: ARRAY
30500: PPUSH
30501: LD_INT 60
30503: PPUSH
30504: CALL_OW 234
// end ;
30508: PPOPN 1
30510: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
30511: LD_EXP 59
30515: PUSH
30516: LD_EXP 89
30520: AND
30521: IFFALSE 30620
30523: GO 30525
30525: DISABLE
30526: LD_INT 0
30528: PPUSH
30529: PPUSH
// begin enable ;
30530: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
30531: LD_ADDR_VAR 0 1
30535: PUSH
30536: LD_INT 22
30538: PUSH
30539: LD_OWVAR 2
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 61
30550: PUSH
30551: EMPTY
30552: LIST
30553: PUSH
30554: LD_INT 33
30556: PUSH
30557: LD_INT 2
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: LIST
30568: PPUSH
30569: CALL_OW 69
30573: ST_TO_ADDR
// if not tmp then
30574: LD_VAR 0 1
30578: NOT
30579: IFFALSE 30583
// exit ;
30581: GO 30620
// for i in tmp do
30583: LD_ADDR_VAR 0 2
30587: PUSH
30588: LD_VAR 0 1
30592: PUSH
30593: FOR_IN
30594: IFFALSE 30618
// if IsControledBy ( i ) then
30596: LD_VAR 0 2
30600: PPUSH
30601: CALL_OW 312
30605: IFFALSE 30616
// ComUnlink ( i ) ;
30607: LD_VAR 0 2
30611: PPUSH
30612: CALL_OW 136
30616: GO 30593
30618: POP
30619: POP
// end ;
30620: PPOPN 2
30622: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
30623: LD_EXP 59
30627: PUSH
30628: LD_EXP 90
30632: AND
30633: IFFALSE 30773
30635: GO 30637
30637: DISABLE
30638: LD_INT 0
30640: PPUSH
30641: PPUSH
// begin ToLua ( displayPowell(); ) ;
30642: LD_STRING displayPowell();
30644: PPUSH
30645: CALL_OW 559
// uc_side := 0 ;
30649: LD_ADDR_OWVAR 20
30653: PUSH
30654: LD_INT 0
30656: ST_TO_ADDR
// uc_nation := 2 ;
30657: LD_ADDR_OWVAR 21
30661: PUSH
30662: LD_INT 2
30664: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
30665: LD_ADDR_OWVAR 37
30669: PUSH
30670: LD_INT 14
30672: ST_TO_ADDR
// vc_engine := engine_siberite ;
30673: LD_ADDR_OWVAR 39
30677: PUSH
30678: LD_INT 3
30680: ST_TO_ADDR
// vc_control := control_apeman ;
30681: LD_ADDR_OWVAR 38
30685: PUSH
30686: LD_INT 5
30688: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
30689: LD_ADDR_OWVAR 40
30693: PUSH
30694: LD_INT 29
30696: ST_TO_ADDR
// un := CreateVehicle ;
30697: LD_ADDR_VAR 0 2
30701: PUSH
30702: CALL_OW 45
30706: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30707: LD_VAR 0 2
30711: PPUSH
30712: LD_INT 1
30714: PPUSH
30715: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30719: LD_INT 35
30721: PPUSH
30722: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30726: LD_VAR 0 2
30730: PPUSH
30731: LD_INT 22
30733: PUSH
30734: LD_OWVAR 2
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PPUSH
30743: CALL_OW 69
30747: PPUSH
30748: LD_VAR 0 2
30752: PPUSH
30753: CALL_OW 74
30757: PPUSH
30758: CALL_OW 115
// until IsDead ( un ) ;
30762: LD_VAR 0 2
30766: PPUSH
30767: CALL_OW 301
30771: IFFALSE 30719
// end ;
30773: PPOPN 2
30775: END
// every 0 0$1 trigger StreamModeActive and sStu do
30776: LD_EXP 59
30780: PUSH
30781: LD_EXP 98
30785: AND
30786: IFFALSE 30802
30788: GO 30790
30790: DISABLE
// begin ToLua ( displayStucuk(); ) ;
30791: LD_STRING displayStucuk();
30793: PPUSH
30794: CALL_OW 559
// ResetFog ;
30798: CALL_OW 335
// end ;
30802: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
30803: LD_EXP 59
30807: PUSH
30808: LD_EXP 91
30812: AND
30813: IFFALSE 30954
30815: GO 30817
30817: DISABLE
30818: LD_INT 0
30820: PPUSH
30821: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
30822: LD_ADDR_VAR 0 2
30826: PUSH
30827: LD_INT 22
30829: PUSH
30830: LD_OWVAR 2
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: LD_INT 21
30841: PUSH
30842: LD_INT 1
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PPUSH
30853: CALL_OW 69
30857: ST_TO_ADDR
// if not tmp then
30858: LD_VAR 0 2
30862: NOT
30863: IFFALSE 30867
// exit ;
30865: GO 30954
// un := tmp [ rand ( 1 , tmp ) ] ;
30867: LD_ADDR_VAR 0 1
30871: PUSH
30872: LD_VAR 0 2
30876: PUSH
30877: LD_INT 1
30879: PPUSH
30880: LD_VAR 0 2
30884: PPUSH
30885: CALL_OW 12
30889: ARRAY
30890: ST_TO_ADDR
// SetSide ( un , 0 ) ;
30891: LD_VAR 0 1
30895: PPUSH
30896: LD_INT 0
30898: PPUSH
30899: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
30903: LD_VAR 0 1
30907: PPUSH
30908: LD_OWVAR 3
30912: PUSH
30913: LD_VAR 0 1
30917: DIFF
30918: PPUSH
30919: LD_VAR 0 1
30923: PPUSH
30924: CALL_OW 74
30928: PPUSH
30929: CALL_OW 115
// wait ( 0 0$20 ) ;
30933: LD_INT 700
30935: PPUSH
30936: CALL_OW 67
// SetSide ( un , your_side ) ;
30940: LD_VAR 0 1
30944: PPUSH
30945: LD_OWVAR 2
30949: PPUSH
30950: CALL_OW 235
// end ;
30954: PPOPN 2
30956: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
30957: LD_EXP 59
30961: PUSH
30962: LD_EXP 92
30966: AND
30967: IFFALSE 31073
30969: GO 30971
30971: DISABLE
30972: LD_INT 0
30974: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30975: LD_ADDR_VAR 0 1
30979: PUSH
30980: LD_INT 22
30982: PUSH
30983: LD_OWVAR 2
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: LD_INT 2
30994: PUSH
30995: LD_INT 30
30997: PUSH
30998: LD_INT 0
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 30
31007: PUSH
31008: LD_INT 1
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: LIST
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: PPUSH
31024: CALL_OW 69
31028: ST_TO_ADDR
// if not depot then
31029: LD_VAR 0 1
31033: NOT
31034: IFFALSE 31038
// exit ;
31036: GO 31073
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
31038: LD_VAR 0 1
31042: PUSH
31043: LD_INT 1
31045: ARRAY
31046: PPUSH
31047: CALL_OW 250
31051: PPUSH
31052: LD_VAR 0 1
31056: PUSH
31057: LD_INT 1
31059: ARRAY
31060: PPUSH
31061: CALL_OW 251
31065: PPUSH
31066: LD_INT 70
31068: PPUSH
31069: CALL_OW 495
// end ;
31073: PPOPN 1
31075: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
31076: LD_EXP 59
31080: PUSH
31081: LD_EXP 93
31085: AND
31086: IFFALSE 31297
31088: GO 31090
31090: DISABLE
31091: LD_INT 0
31093: PPUSH
31094: PPUSH
31095: PPUSH
31096: PPUSH
31097: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31098: LD_ADDR_VAR 0 5
31102: PUSH
31103: LD_INT 22
31105: PUSH
31106: LD_OWVAR 2
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: LD_INT 21
31117: PUSH
31118: LD_INT 1
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PPUSH
31129: CALL_OW 69
31133: ST_TO_ADDR
// if not tmp then
31134: LD_VAR 0 5
31138: NOT
31139: IFFALSE 31143
// exit ;
31141: GO 31297
// for i in tmp do
31143: LD_ADDR_VAR 0 1
31147: PUSH
31148: LD_VAR 0 5
31152: PUSH
31153: FOR_IN
31154: IFFALSE 31295
// begin d := rand ( 0 , 5 ) ;
31156: LD_ADDR_VAR 0 4
31160: PUSH
31161: LD_INT 0
31163: PPUSH
31164: LD_INT 5
31166: PPUSH
31167: CALL_OW 12
31171: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
31172: LD_ADDR_VAR 0 2
31176: PUSH
31177: LD_VAR 0 1
31181: PPUSH
31182: CALL_OW 250
31186: PPUSH
31187: LD_VAR 0 4
31191: PPUSH
31192: LD_INT 3
31194: PPUSH
31195: LD_INT 12
31197: PPUSH
31198: CALL_OW 12
31202: PPUSH
31203: CALL_OW 272
31207: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
31208: LD_ADDR_VAR 0 3
31212: PUSH
31213: LD_VAR 0 1
31217: PPUSH
31218: CALL_OW 251
31222: PPUSH
31223: LD_VAR 0 4
31227: PPUSH
31228: LD_INT 3
31230: PPUSH
31231: LD_INT 12
31233: PPUSH
31234: CALL_OW 12
31238: PPUSH
31239: CALL_OW 273
31243: ST_TO_ADDR
// if ValidHex ( x , y ) then
31244: LD_VAR 0 2
31248: PPUSH
31249: LD_VAR 0 3
31253: PPUSH
31254: CALL_OW 488
31258: IFFALSE 31293
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
31260: LD_VAR 0 1
31264: PPUSH
31265: LD_VAR 0 2
31269: PPUSH
31270: LD_VAR 0 3
31274: PPUSH
31275: LD_INT 3
31277: PPUSH
31278: LD_INT 6
31280: PPUSH
31281: CALL_OW 12
31285: PPUSH
31286: LD_INT 1
31288: PPUSH
31289: CALL_OW 483
// end ;
31293: GO 31153
31295: POP
31296: POP
// end ;
31297: PPOPN 5
31299: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
31300: LD_EXP 59
31304: PUSH
31305: LD_EXP 94
31309: AND
31310: IFFALSE 31404
31312: GO 31314
31314: DISABLE
31315: LD_INT 0
31317: PPUSH
31318: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
31319: LD_ADDR_VAR 0 2
31323: PUSH
31324: LD_INT 22
31326: PUSH
31327: LD_OWVAR 2
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 32
31338: PUSH
31339: LD_INT 1
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: LD_INT 21
31348: PUSH
31349: LD_INT 2
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: LIST
31360: PPUSH
31361: CALL_OW 69
31365: ST_TO_ADDR
// if not tmp then
31366: LD_VAR 0 2
31370: NOT
31371: IFFALSE 31375
// exit ;
31373: GO 31404
// for i in tmp do
31375: LD_ADDR_VAR 0 1
31379: PUSH
31380: LD_VAR 0 2
31384: PUSH
31385: FOR_IN
31386: IFFALSE 31402
// SetFuel ( i , 0 ) ;
31388: LD_VAR 0 1
31392: PPUSH
31393: LD_INT 0
31395: PPUSH
31396: CALL_OW 240
31400: GO 31385
31402: POP
31403: POP
// end ;
31404: PPOPN 2
31406: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
31407: LD_EXP 59
31411: PUSH
31412: LD_EXP 95
31416: AND
31417: IFFALSE 31483
31419: GO 31421
31421: DISABLE
31422: LD_INT 0
31424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31425: LD_ADDR_VAR 0 1
31429: PUSH
31430: LD_INT 22
31432: PUSH
31433: LD_OWVAR 2
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 30
31444: PUSH
31445: LD_INT 29
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PPUSH
31456: CALL_OW 69
31460: ST_TO_ADDR
// if not tmp then
31461: LD_VAR 0 1
31465: NOT
31466: IFFALSE 31470
// exit ;
31468: GO 31483
// DestroyUnit ( tmp [ 1 ] ) ;
31470: LD_VAR 0 1
31474: PUSH
31475: LD_INT 1
31477: ARRAY
31478: PPUSH
31479: CALL_OW 65
// end ;
31483: PPOPN 1
31485: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
31486: LD_EXP 59
31490: PUSH
31491: LD_EXP 97
31495: AND
31496: IFFALSE 31625
31498: GO 31500
31500: DISABLE
31501: LD_INT 0
31503: PPUSH
// begin uc_side := 0 ;
31504: LD_ADDR_OWVAR 20
31508: PUSH
31509: LD_INT 0
31511: ST_TO_ADDR
// uc_nation := nation_arabian ;
31512: LD_ADDR_OWVAR 21
31516: PUSH
31517: LD_INT 2
31519: ST_TO_ADDR
// hc_gallery :=  ;
31520: LD_ADDR_OWVAR 33
31524: PUSH
31525: LD_STRING 
31527: ST_TO_ADDR
// hc_name :=  ;
31528: LD_ADDR_OWVAR 26
31532: PUSH
31533: LD_STRING 
31535: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
31536: LD_INT 1
31538: PPUSH
31539: LD_INT 11
31541: PPUSH
31542: LD_INT 10
31544: PPUSH
31545: CALL_OW 380
// un := CreateHuman ;
31549: LD_ADDR_VAR 0 1
31553: PUSH
31554: CALL_OW 44
31558: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31559: LD_VAR 0 1
31563: PPUSH
31564: LD_INT 1
31566: PPUSH
31567: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
31571: LD_INT 35
31573: PPUSH
31574: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
31578: LD_VAR 0 1
31582: PPUSH
31583: LD_INT 22
31585: PUSH
31586: LD_OWVAR 2
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PPUSH
31595: CALL_OW 69
31599: PPUSH
31600: LD_VAR 0 1
31604: PPUSH
31605: CALL_OW 74
31609: PPUSH
31610: CALL_OW 115
// until IsDead ( un ) ;
31614: LD_VAR 0 1
31618: PPUSH
31619: CALL_OW 301
31623: IFFALSE 31571
// end ;
31625: PPOPN 1
31627: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
31628: LD_EXP 59
31632: PUSH
31633: LD_EXP 99
31637: AND
31638: IFFALSE 31650
31640: GO 31642
31642: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
31643: LD_STRING earthquake(getX(game), 0, 32)
31645: PPUSH
31646: CALL_OW 559
31650: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
31651: LD_EXP 59
31655: PUSH
31656: LD_EXP 100
31660: AND
31661: IFFALSE 31752
31663: GO 31665
31665: DISABLE
31666: LD_INT 0
31668: PPUSH
// begin enable ;
31669: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
31670: LD_ADDR_VAR 0 1
31674: PUSH
31675: LD_INT 22
31677: PUSH
31678: LD_OWVAR 2
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 21
31689: PUSH
31690: LD_INT 2
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 33
31699: PUSH
31700: LD_INT 3
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: LIST
31711: PPUSH
31712: CALL_OW 69
31716: ST_TO_ADDR
// if not tmp then
31717: LD_VAR 0 1
31721: NOT
31722: IFFALSE 31726
// exit ;
31724: GO 31752
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31726: LD_VAR 0 1
31730: PUSH
31731: LD_INT 1
31733: PPUSH
31734: LD_VAR 0 1
31738: PPUSH
31739: CALL_OW 12
31743: ARRAY
31744: PPUSH
31745: LD_INT 1
31747: PPUSH
31748: CALL_OW 234
// end ;
31752: PPOPN 1
31754: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
31755: LD_EXP 59
31759: PUSH
31760: LD_EXP 101
31764: AND
31765: IFFALSE 31906
31767: GO 31769
31769: DISABLE
31770: LD_INT 0
31772: PPUSH
31773: PPUSH
31774: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31775: LD_ADDR_VAR 0 3
31779: PUSH
31780: LD_INT 22
31782: PUSH
31783: LD_OWVAR 2
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: LD_INT 25
31794: PUSH
31795: LD_INT 1
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PPUSH
31806: CALL_OW 69
31810: ST_TO_ADDR
// if not tmp then
31811: LD_VAR 0 3
31815: NOT
31816: IFFALSE 31820
// exit ;
31818: GO 31906
// un := tmp [ rand ( 1 , tmp ) ] ;
31820: LD_ADDR_VAR 0 2
31824: PUSH
31825: LD_VAR 0 3
31829: PUSH
31830: LD_INT 1
31832: PPUSH
31833: LD_VAR 0 3
31837: PPUSH
31838: CALL_OW 12
31842: ARRAY
31843: ST_TO_ADDR
// if Crawls ( un ) then
31844: LD_VAR 0 2
31848: PPUSH
31849: CALL_OW 318
31853: IFFALSE 31864
// ComWalk ( un ) ;
31855: LD_VAR 0 2
31859: PPUSH
31860: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
31864: LD_VAR 0 2
31868: PPUSH
31869: LD_INT 9
31871: PPUSH
31872: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
31876: LD_INT 28
31878: PPUSH
31879: LD_OWVAR 2
31883: PPUSH
31884: LD_INT 2
31886: PPUSH
31887: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
31891: LD_INT 29
31893: PPUSH
31894: LD_OWVAR 2
31898: PPUSH
31899: LD_INT 2
31901: PPUSH
31902: CALL_OW 322
// end ;
31906: PPOPN 3
31908: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
31909: LD_EXP 59
31913: PUSH
31914: LD_EXP 102
31918: AND
31919: IFFALSE 32030
31921: GO 31923
31923: DISABLE
31924: LD_INT 0
31926: PPUSH
31927: PPUSH
31928: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31929: LD_ADDR_VAR 0 3
31933: PUSH
31934: LD_INT 22
31936: PUSH
31937: LD_OWVAR 2
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 25
31948: PUSH
31949: LD_INT 1
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PPUSH
31960: CALL_OW 69
31964: ST_TO_ADDR
// if not tmp then
31965: LD_VAR 0 3
31969: NOT
31970: IFFALSE 31974
// exit ;
31972: GO 32030
// un := tmp [ rand ( 1 , tmp ) ] ;
31974: LD_ADDR_VAR 0 2
31978: PUSH
31979: LD_VAR 0 3
31983: PUSH
31984: LD_INT 1
31986: PPUSH
31987: LD_VAR 0 3
31991: PPUSH
31992: CALL_OW 12
31996: ARRAY
31997: ST_TO_ADDR
// if Crawls ( un ) then
31998: LD_VAR 0 2
32002: PPUSH
32003: CALL_OW 318
32007: IFFALSE 32018
// ComWalk ( un ) ;
32009: LD_VAR 0 2
32013: PPUSH
32014: CALL_OW 138
// SetClass ( un , class_mortar ) ;
32018: LD_VAR 0 2
32022: PPUSH
32023: LD_INT 8
32025: PPUSH
32026: CALL_OW 336
// end ;
32030: PPOPN 3
32032: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
32033: LD_EXP 59
32037: PUSH
32038: LD_EXP 103
32042: AND
32043: IFFALSE 32187
32045: GO 32047
32047: DISABLE
32048: LD_INT 0
32050: PPUSH
32051: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
32052: LD_ADDR_VAR 0 2
32056: PUSH
32057: LD_INT 22
32059: PUSH
32060: LD_OWVAR 2
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 21
32071: PUSH
32072: LD_INT 2
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: LD_INT 2
32081: PUSH
32082: LD_INT 34
32084: PUSH
32085: LD_INT 12
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: LD_INT 34
32094: PUSH
32095: LD_INT 51
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 34
32104: PUSH
32105: LD_INT 32
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: LIST
32122: PPUSH
32123: CALL_OW 69
32127: ST_TO_ADDR
// if not tmp then
32128: LD_VAR 0 2
32132: NOT
32133: IFFALSE 32137
// exit ;
32135: GO 32187
// for i in tmp do
32137: LD_ADDR_VAR 0 1
32141: PUSH
32142: LD_VAR 0 2
32146: PUSH
32147: FOR_IN
32148: IFFALSE 32185
// if GetCargo ( i , mat_artifact ) = 0 then
32150: LD_VAR 0 1
32154: PPUSH
32155: LD_INT 4
32157: PPUSH
32158: CALL_OW 289
32162: PUSH
32163: LD_INT 0
32165: EQUAL
32166: IFFALSE 32183
// SetCargo ( i , mat_siberit , 100 ) ;
32168: LD_VAR 0 1
32172: PPUSH
32173: LD_INT 3
32175: PPUSH
32176: LD_INT 100
32178: PPUSH
32179: CALL_OW 290
32183: GO 32147
32185: POP
32186: POP
// end ;
32187: PPOPN 2
32189: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
32190: LD_EXP 59
32194: PUSH
32195: LD_EXP 104
32199: AND
32200: IFFALSE 32383
32202: GO 32204
32204: DISABLE
32205: LD_INT 0
32207: PPUSH
32208: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32209: LD_ADDR_VAR 0 2
32213: PUSH
32214: LD_INT 22
32216: PUSH
32217: LD_OWVAR 2
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PPUSH
32226: CALL_OW 69
32230: ST_TO_ADDR
// if not tmp then
32231: LD_VAR 0 2
32235: NOT
32236: IFFALSE 32240
// exit ;
32238: GO 32383
// for i := 1 to 2 do
32240: LD_ADDR_VAR 0 1
32244: PUSH
32245: DOUBLE
32246: LD_INT 1
32248: DEC
32249: ST_TO_ADDR
32250: LD_INT 2
32252: PUSH
32253: FOR_TO
32254: IFFALSE 32381
// begin uc_side := your_side ;
32256: LD_ADDR_OWVAR 20
32260: PUSH
32261: LD_OWVAR 2
32265: ST_TO_ADDR
// uc_nation := nation_american ;
32266: LD_ADDR_OWVAR 21
32270: PUSH
32271: LD_INT 1
32273: ST_TO_ADDR
// vc_chassis := us_morphling ;
32274: LD_ADDR_OWVAR 37
32278: PUSH
32279: LD_INT 5
32281: ST_TO_ADDR
// vc_engine := engine_siberite ;
32282: LD_ADDR_OWVAR 39
32286: PUSH
32287: LD_INT 3
32289: ST_TO_ADDR
// vc_control := control_computer ;
32290: LD_ADDR_OWVAR 38
32294: PUSH
32295: LD_INT 3
32297: ST_TO_ADDR
// vc_weapon := us_double_laser ;
32298: LD_ADDR_OWVAR 40
32302: PUSH
32303: LD_INT 10
32305: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
32306: LD_VAR 0 2
32310: PUSH
32311: LD_INT 1
32313: ARRAY
32314: PPUSH
32315: CALL_OW 310
32319: NOT
32320: IFFALSE 32367
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
32322: CALL_OW 45
32326: PPUSH
32327: LD_VAR 0 2
32331: PUSH
32332: LD_INT 1
32334: ARRAY
32335: PPUSH
32336: CALL_OW 250
32340: PPUSH
32341: LD_VAR 0 2
32345: PUSH
32346: LD_INT 1
32348: ARRAY
32349: PPUSH
32350: CALL_OW 251
32354: PPUSH
32355: LD_INT 12
32357: PPUSH
32358: LD_INT 1
32360: PPUSH
32361: CALL_OW 50
32365: GO 32379
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
32367: CALL_OW 45
32371: PPUSH
32372: LD_INT 1
32374: PPUSH
32375: CALL_OW 51
// end ;
32379: GO 32253
32381: POP
32382: POP
// end ;
32383: PPOPN 2
32385: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
32386: LD_EXP 59
32390: PUSH
32391: LD_EXP 105
32395: AND
32396: IFFALSE 32618
32398: GO 32400
32400: DISABLE
32401: LD_INT 0
32403: PPUSH
32404: PPUSH
32405: PPUSH
32406: PPUSH
32407: PPUSH
32408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32409: LD_ADDR_VAR 0 6
32413: PUSH
32414: LD_INT 22
32416: PUSH
32417: LD_OWVAR 2
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 21
32428: PUSH
32429: LD_INT 1
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 3
32438: PUSH
32439: LD_INT 23
32441: PUSH
32442: LD_INT 0
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: LIST
32457: PPUSH
32458: CALL_OW 69
32462: ST_TO_ADDR
// if not tmp then
32463: LD_VAR 0 6
32467: NOT
32468: IFFALSE 32472
// exit ;
32470: GO 32618
// s1 := rand ( 1 , 4 ) ;
32472: LD_ADDR_VAR 0 2
32476: PUSH
32477: LD_INT 1
32479: PPUSH
32480: LD_INT 4
32482: PPUSH
32483: CALL_OW 12
32487: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
32488: LD_ADDR_VAR 0 4
32492: PUSH
32493: LD_VAR 0 6
32497: PUSH
32498: LD_INT 1
32500: ARRAY
32501: PPUSH
32502: LD_VAR 0 2
32506: PPUSH
32507: CALL_OW 259
32511: ST_TO_ADDR
// if s1 = 1 then
32512: LD_VAR 0 2
32516: PUSH
32517: LD_INT 1
32519: EQUAL
32520: IFFALSE 32540
// s2 := rand ( 2 , 4 ) else
32522: LD_ADDR_VAR 0 3
32526: PUSH
32527: LD_INT 2
32529: PPUSH
32530: LD_INT 4
32532: PPUSH
32533: CALL_OW 12
32537: ST_TO_ADDR
32538: GO 32548
// s2 := 1 ;
32540: LD_ADDR_VAR 0 3
32544: PUSH
32545: LD_INT 1
32547: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
32548: LD_ADDR_VAR 0 5
32552: PUSH
32553: LD_VAR 0 6
32557: PUSH
32558: LD_INT 1
32560: ARRAY
32561: PPUSH
32562: LD_VAR 0 3
32566: PPUSH
32567: CALL_OW 259
32571: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
32572: LD_VAR 0 6
32576: PUSH
32577: LD_INT 1
32579: ARRAY
32580: PPUSH
32581: LD_VAR 0 2
32585: PPUSH
32586: LD_VAR 0 5
32590: PPUSH
32591: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
32595: LD_VAR 0 6
32599: PUSH
32600: LD_INT 1
32602: ARRAY
32603: PPUSH
32604: LD_VAR 0 3
32608: PPUSH
32609: LD_VAR 0 4
32613: PPUSH
32614: CALL_OW 237
// end ;
32618: PPOPN 6
32620: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
32621: LD_EXP 59
32625: PUSH
32626: LD_EXP 106
32630: AND
32631: IFFALSE 32710
32633: GO 32635
32635: DISABLE
32636: LD_INT 0
32638: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
32639: LD_ADDR_VAR 0 1
32643: PUSH
32644: LD_INT 22
32646: PUSH
32647: LD_OWVAR 2
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 30
32658: PUSH
32659: LD_INT 3
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PPUSH
32670: CALL_OW 69
32674: ST_TO_ADDR
// if not tmp then
32675: LD_VAR 0 1
32679: NOT
32680: IFFALSE 32684
// exit ;
32682: GO 32710
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
32684: LD_VAR 0 1
32688: PUSH
32689: LD_INT 1
32691: PPUSH
32692: LD_VAR 0 1
32696: PPUSH
32697: CALL_OW 12
32701: ARRAY
32702: PPUSH
32703: LD_INT 1
32705: PPUSH
32706: CALL_OW 234
// end ;
32710: PPOPN 1
32712: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
32713: LD_EXP 59
32717: PUSH
32718: LD_EXP 107
32722: AND
32723: IFFALSE 32835
32725: GO 32727
32727: DISABLE
32728: LD_INT 0
32730: PPUSH
32731: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
32732: LD_ADDR_VAR 0 2
32736: PUSH
32737: LD_INT 22
32739: PUSH
32740: LD_OWVAR 2
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 2
32751: PUSH
32752: LD_INT 30
32754: PUSH
32755: LD_INT 27
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: PUSH
32762: LD_INT 30
32764: PUSH
32765: LD_INT 26
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: LD_INT 30
32774: PUSH
32775: LD_INT 28
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: LIST
32786: LIST
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PPUSH
32792: CALL_OW 69
32796: ST_TO_ADDR
// if not tmp then
32797: LD_VAR 0 2
32801: NOT
32802: IFFALSE 32806
// exit ;
32804: GO 32835
// for i in tmp do
32806: LD_ADDR_VAR 0 1
32810: PUSH
32811: LD_VAR 0 2
32815: PUSH
32816: FOR_IN
32817: IFFALSE 32833
// SetLives ( i , 1 ) ;
32819: LD_VAR 0 1
32823: PPUSH
32824: LD_INT 1
32826: PPUSH
32827: CALL_OW 234
32831: GO 32816
32833: POP
32834: POP
// end ;
32835: PPOPN 2
32837: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
32838: LD_EXP 59
32842: PUSH
32843: LD_EXP 108
32847: AND
32848: IFFALSE 33135
32850: GO 32852
32852: DISABLE
32853: LD_INT 0
32855: PPUSH
32856: PPUSH
32857: PPUSH
// begin i := rand ( 1 , 7 ) ;
32858: LD_ADDR_VAR 0 1
32862: PUSH
32863: LD_INT 1
32865: PPUSH
32866: LD_INT 7
32868: PPUSH
32869: CALL_OW 12
32873: ST_TO_ADDR
// case i of 1 :
32874: LD_VAR 0 1
32878: PUSH
32879: LD_INT 1
32881: DOUBLE
32882: EQUAL
32883: IFTRUE 32887
32885: GO 32897
32887: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
32888: LD_STRING earthquake(getX(game), 0, 32)
32890: PPUSH
32891: CALL_OW 559
32895: GO 33135
32897: LD_INT 2
32899: DOUBLE
32900: EQUAL
32901: IFTRUE 32905
32903: GO 32919
32905: POP
// begin ToLua ( displayStucuk(); ) ;
32906: LD_STRING displayStucuk();
32908: PPUSH
32909: CALL_OW 559
// ResetFog ;
32913: CALL_OW 335
// end ; 3 :
32917: GO 33135
32919: LD_INT 3
32921: DOUBLE
32922: EQUAL
32923: IFTRUE 32927
32925: GO 33031
32927: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
32928: LD_ADDR_VAR 0 2
32932: PUSH
32933: LD_INT 22
32935: PUSH
32936: LD_OWVAR 2
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PUSH
32945: LD_INT 25
32947: PUSH
32948: LD_INT 1
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PPUSH
32959: CALL_OW 69
32963: ST_TO_ADDR
// if not tmp then
32964: LD_VAR 0 2
32968: NOT
32969: IFFALSE 32973
// exit ;
32971: GO 33135
// un := tmp [ rand ( 1 , tmp ) ] ;
32973: LD_ADDR_VAR 0 3
32977: PUSH
32978: LD_VAR 0 2
32982: PUSH
32983: LD_INT 1
32985: PPUSH
32986: LD_VAR 0 2
32990: PPUSH
32991: CALL_OW 12
32995: ARRAY
32996: ST_TO_ADDR
// if Crawls ( un ) then
32997: LD_VAR 0 3
33001: PPUSH
33002: CALL_OW 318
33006: IFFALSE 33017
// ComWalk ( un ) ;
33008: LD_VAR 0 3
33012: PPUSH
33013: CALL_OW 138
// SetClass ( un , class_mortar ) ;
33017: LD_VAR 0 3
33021: PPUSH
33022: LD_INT 8
33024: PPUSH
33025: CALL_OW 336
// end ; 4 :
33029: GO 33135
33031: LD_INT 4
33033: DOUBLE
33034: EQUAL
33035: IFTRUE 33039
33037: GO 33113
33039: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33040: LD_ADDR_VAR 0 2
33044: PUSH
33045: LD_INT 22
33047: PUSH
33048: LD_OWVAR 2
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: LD_INT 30
33059: PUSH
33060: LD_INT 29
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: PPUSH
33071: CALL_OW 69
33075: ST_TO_ADDR
// if not tmp then
33076: LD_VAR 0 2
33080: NOT
33081: IFFALSE 33085
// exit ;
33083: GO 33135
// CenterNowOnUnits ( tmp [ 1 ] ) ;
33085: LD_VAR 0 2
33089: PUSH
33090: LD_INT 1
33092: ARRAY
33093: PPUSH
33094: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
33098: LD_VAR 0 2
33102: PUSH
33103: LD_INT 1
33105: ARRAY
33106: PPUSH
33107: CALL_OW 65
// end ; 5 .. 7 :
33111: GO 33135
33113: LD_INT 5
33115: DOUBLE
33116: GREATEREQUAL
33117: IFFALSE 33125
33119: LD_INT 7
33121: DOUBLE
33122: LESSEQUAL
33123: IFTRUE 33127
33125: GO 33134
33127: POP
// StreamSibBomb ; end ;
33128: CALL 29372 0 0
33132: GO 33135
33134: POP
// end ;
33135: PPOPN 3
33137: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
33138: LD_EXP 59
33142: PUSH
33143: LD_EXP 109
33147: AND
33148: IFFALSE 33304
33150: GO 33152
33152: DISABLE
33153: LD_INT 0
33155: PPUSH
33156: PPUSH
33157: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
33158: LD_ADDR_VAR 0 2
33162: PUSH
33163: LD_INT 81
33165: PUSH
33166: LD_OWVAR 2
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 2
33177: PUSH
33178: LD_INT 21
33180: PUSH
33181: LD_INT 1
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 21
33190: PUSH
33191: LD_INT 2
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: LIST
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: PPUSH
33207: CALL_OW 69
33211: ST_TO_ADDR
// if not tmp then
33212: LD_VAR 0 2
33216: NOT
33217: IFFALSE 33221
// exit ;
33219: GO 33304
// p := 0 ;
33221: LD_ADDR_VAR 0 3
33225: PUSH
33226: LD_INT 0
33228: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33229: LD_INT 35
33231: PPUSH
33232: CALL_OW 67
// p := p + 1 ;
33236: LD_ADDR_VAR 0 3
33240: PUSH
33241: LD_VAR 0 3
33245: PUSH
33246: LD_INT 1
33248: PLUS
33249: ST_TO_ADDR
// for i in tmp do
33250: LD_ADDR_VAR 0 1
33254: PUSH
33255: LD_VAR 0 2
33259: PUSH
33260: FOR_IN
33261: IFFALSE 33292
// if GetLives ( i ) < 1000 then
33263: LD_VAR 0 1
33267: PPUSH
33268: CALL_OW 256
33272: PUSH
33273: LD_INT 1000
33275: LESS
33276: IFFALSE 33290
// SetLives ( i , 1000 ) ;
33278: LD_VAR 0 1
33282: PPUSH
33283: LD_INT 1000
33285: PPUSH
33286: CALL_OW 234
33290: GO 33260
33292: POP
33293: POP
// until p > 20 ;
33294: LD_VAR 0 3
33298: PUSH
33299: LD_INT 20
33301: GREATER
33302: IFFALSE 33229
// end ;
33304: PPOPN 3
33306: END
// every 0 0$1 trigger StreamModeActive and sTime do
33307: LD_EXP 59
33311: PUSH
33312: LD_EXP 110
33316: AND
33317: IFFALSE 33352
33319: GO 33321
33321: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
33322: LD_INT 28
33324: PPUSH
33325: LD_OWVAR 2
33329: PPUSH
33330: LD_INT 2
33332: PPUSH
33333: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
33337: LD_INT 30
33339: PPUSH
33340: LD_OWVAR 2
33344: PPUSH
33345: LD_INT 2
33347: PPUSH
33348: CALL_OW 322
// end ;
33352: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
33353: LD_EXP 59
33357: PUSH
33358: LD_EXP 111
33362: AND
33363: IFFALSE 33484
33365: GO 33367
33367: DISABLE
33368: LD_INT 0
33370: PPUSH
33371: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
33372: LD_ADDR_VAR 0 2
33376: PUSH
33377: LD_INT 22
33379: PUSH
33380: LD_OWVAR 2
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 21
33391: PUSH
33392: LD_INT 1
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: LD_INT 3
33401: PUSH
33402: LD_INT 23
33404: PUSH
33405: LD_INT 0
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: LIST
33420: PPUSH
33421: CALL_OW 69
33425: ST_TO_ADDR
// if not tmp then
33426: LD_VAR 0 2
33430: NOT
33431: IFFALSE 33435
// exit ;
33433: GO 33484
// for i in tmp do
33435: LD_ADDR_VAR 0 1
33439: PUSH
33440: LD_VAR 0 2
33444: PUSH
33445: FOR_IN
33446: IFFALSE 33482
// begin if Crawls ( i ) then
33448: LD_VAR 0 1
33452: PPUSH
33453: CALL_OW 318
33457: IFFALSE 33468
// ComWalk ( i ) ;
33459: LD_VAR 0 1
33463: PPUSH
33464: CALL_OW 138
// SetClass ( i , 2 ) ;
33468: LD_VAR 0 1
33472: PPUSH
33473: LD_INT 2
33475: PPUSH
33476: CALL_OW 336
// end ;
33480: GO 33445
33482: POP
33483: POP
// end ;
33484: PPOPN 2
33486: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
33487: LD_EXP 59
33491: PUSH
33492: LD_EXP 112
33496: AND
33497: IFFALSE 33785
33499: GO 33501
33501: DISABLE
33502: LD_INT 0
33504: PPUSH
33505: PPUSH
33506: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
33507: LD_OWVAR 2
33511: PPUSH
33512: LD_INT 9
33514: PPUSH
33515: LD_INT 1
33517: PPUSH
33518: LD_INT 1
33520: PPUSH
33521: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
33525: LD_INT 9
33527: PPUSH
33528: LD_OWVAR 2
33532: PPUSH
33533: CALL_OW 343
// uc_side := 9 ;
33537: LD_ADDR_OWVAR 20
33541: PUSH
33542: LD_INT 9
33544: ST_TO_ADDR
// uc_nation := 2 ;
33545: LD_ADDR_OWVAR 21
33549: PUSH
33550: LD_INT 2
33552: ST_TO_ADDR
// hc_name := Dark Warrior ;
33553: LD_ADDR_OWVAR 26
33557: PUSH
33558: LD_STRING Dark Warrior
33560: ST_TO_ADDR
// hc_gallery :=  ;
33561: LD_ADDR_OWVAR 33
33565: PUSH
33566: LD_STRING 
33568: ST_TO_ADDR
// hc_noskilllimit := true ;
33569: LD_ADDR_OWVAR 76
33573: PUSH
33574: LD_INT 1
33576: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
33577: LD_ADDR_OWVAR 31
33581: PUSH
33582: LD_INT 30
33584: PUSH
33585: LD_INT 30
33587: PUSH
33588: LD_INT 30
33590: PUSH
33591: LD_INT 30
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: ST_TO_ADDR
// un := CreateHuman ;
33600: LD_ADDR_VAR 0 3
33604: PUSH
33605: CALL_OW 44
33609: ST_TO_ADDR
// hc_noskilllimit := false ;
33610: LD_ADDR_OWVAR 76
33614: PUSH
33615: LD_INT 0
33617: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
33618: LD_VAR 0 3
33622: PPUSH
33623: LD_INT 1
33625: PPUSH
33626: CALL_OW 51
// ToLua ( playRanger() ) ;
33630: LD_STRING playRanger()
33632: PPUSH
33633: CALL_OW 559
// p := 0 ;
33637: LD_ADDR_VAR 0 2
33641: PUSH
33642: LD_INT 0
33644: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
33645: LD_INT 35
33647: PPUSH
33648: CALL_OW 67
// p := p + 1 ;
33652: LD_ADDR_VAR 0 2
33656: PUSH
33657: LD_VAR 0 2
33661: PUSH
33662: LD_INT 1
33664: PLUS
33665: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
33666: LD_VAR 0 3
33670: PPUSH
33671: CALL_OW 256
33675: PUSH
33676: LD_INT 1000
33678: LESS
33679: IFFALSE 33693
// SetLives ( un , 1000 ) ;
33681: LD_VAR 0 3
33685: PPUSH
33686: LD_INT 1000
33688: PPUSH
33689: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
33693: LD_VAR 0 3
33697: PPUSH
33698: LD_INT 81
33700: PUSH
33701: LD_OWVAR 2
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 91
33712: PUSH
33713: LD_VAR 0 3
33717: PUSH
33718: LD_INT 30
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: LIST
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PPUSH
33730: CALL_OW 69
33734: PPUSH
33735: LD_VAR 0 3
33739: PPUSH
33740: CALL_OW 74
33744: PPUSH
33745: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
33749: LD_VAR 0 2
33753: PUSH
33754: LD_INT 80
33756: GREATER
33757: PUSH
33758: LD_VAR 0 3
33762: PPUSH
33763: CALL_OW 301
33767: OR
33768: IFFALSE 33645
// if un then
33770: LD_VAR 0 3
33774: IFFALSE 33785
// RemoveUnit ( un ) ;
33776: LD_VAR 0 3
33780: PPUSH
33781: CALL_OW 64
// end ;
33785: PPOPN 3
33787: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
33788: LD_EXP 113
33792: IFFALSE 33908
33794: GO 33796
33796: DISABLE
33797: LD_INT 0
33799: PPUSH
33800: PPUSH
33801: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
33802: LD_ADDR_VAR 0 2
33806: PUSH
33807: LD_INT 81
33809: PUSH
33810: LD_OWVAR 2
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 21
33821: PUSH
33822: LD_INT 1
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: PPUSH
33833: CALL_OW 69
33837: ST_TO_ADDR
// ToLua ( playComputer() ) ;
33838: LD_STRING playComputer()
33840: PPUSH
33841: CALL_OW 559
// if not tmp then
33845: LD_VAR 0 2
33849: NOT
33850: IFFALSE 33854
// exit ;
33852: GO 33908
// for i in tmp do
33854: LD_ADDR_VAR 0 1
33858: PUSH
33859: LD_VAR 0 2
33863: PUSH
33864: FOR_IN
33865: IFFALSE 33906
// for j := 1 to 4 do
33867: LD_ADDR_VAR 0 3
33871: PUSH
33872: DOUBLE
33873: LD_INT 1
33875: DEC
33876: ST_TO_ADDR
33877: LD_INT 4
33879: PUSH
33880: FOR_TO
33881: IFFALSE 33902
// SetSkill ( i , j , 10 ) ;
33883: LD_VAR 0 1
33887: PPUSH
33888: LD_VAR 0 3
33892: PPUSH
33893: LD_INT 10
33895: PPUSH
33896: CALL_OW 237
33900: GO 33880
33902: POP
33903: POP
33904: GO 33864
33906: POP
33907: POP
// end ;
33908: PPOPN 3
33910: END
// every 0 0$1 trigger s30 do var i , tmp ;
33911: LD_EXP 114
33915: IFFALSE 33984
33917: GO 33919
33919: DISABLE
33920: LD_INT 0
33922: PPUSH
33923: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
33924: LD_ADDR_VAR 0 2
33928: PUSH
33929: LD_INT 22
33931: PUSH
33932: LD_OWVAR 2
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PPUSH
33941: CALL_OW 69
33945: ST_TO_ADDR
// if not tmp then
33946: LD_VAR 0 2
33950: NOT
33951: IFFALSE 33955
// exit ;
33953: GO 33984
// for i in tmp do
33955: LD_ADDR_VAR 0 1
33959: PUSH
33960: LD_VAR 0 2
33964: PUSH
33965: FOR_IN
33966: IFFALSE 33982
// SetLives ( i , 300 ) ;
33968: LD_VAR 0 1
33972: PPUSH
33973: LD_INT 300
33975: PPUSH
33976: CALL_OW 234
33980: GO 33965
33982: POP
33983: POP
// end ;
33984: PPOPN 2
33986: END
// every 0 0$1 trigger s60 do var i , tmp ;
33987: LD_EXP 115
33991: IFFALSE 34060
33993: GO 33995
33995: DISABLE
33996: LD_INT 0
33998: PPUSH
33999: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
34000: LD_ADDR_VAR 0 2
34004: PUSH
34005: LD_INT 22
34007: PUSH
34008: LD_OWVAR 2
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PPUSH
34017: CALL_OW 69
34021: ST_TO_ADDR
// if not tmp then
34022: LD_VAR 0 2
34026: NOT
34027: IFFALSE 34031
// exit ;
34029: GO 34060
// for i in tmp do
34031: LD_ADDR_VAR 0 1
34035: PUSH
34036: LD_VAR 0 2
34040: PUSH
34041: FOR_IN
34042: IFFALSE 34058
// SetLives ( i , 600 ) ;
34044: LD_VAR 0 1
34048: PPUSH
34049: LD_INT 600
34051: PPUSH
34052: CALL_OW 234
34056: GO 34041
34058: POP
34059: POP
// end ;
34060: PPOPN 2
34062: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
34063: LD_INT 0
34065: PPUSH
// case cmd of 301 :
34066: LD_VAR 0 1
34070: PUSH
34071: LD_INT 301
34073: DOUBLE
34074: EQUAL
34075: IFTRUE 34079
34077: GO 34111
34079: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
34080: LD_VAR 0 6
34084: PPUSH
34085: LD_VAR 0 7
34089: PPUSH
34090: LD_VAR 0 8
34094: PPUSH
34095: LD_VAR 0 4
34099: PPUSH
34100: LD_VAR 0 5
34104: PPUSH
34105: CALL 35320 0 5
34109: GO 34232
34111: LD_INT 302
34113: DOUBLE
34114: EQUAL
34115: IFTRUE 34119
34117: GO 34156
34119: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
34120: LD_VAR 0 6
34124: PPUSH
34125: LD_VAR 0 7
34129: PPUSH
34130: LD_VAR 0 8
34134: PPUSH
34135: LD_VAR 0 9
34139: PPUSH
34140: LD_VAR 0 4
34144: PPUSH
34145: LD_VAR 0 5
34149: PPUSH
34150: CALL 35411 0 6
34154: GO 34232
34156: LD_INT 303
34158: DOUBLE
34159: EQUAL
34160: IFTRUE 34164
34162: GO 34201
34164: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
34165: LD_VAR 0 6
34169: PPUSH
34170: LD_VAR 0 7
34174: PPUSH
34175: LD_VAR 0 8
34179: PPUSH
34180: LD_VAR 0 9
34184: PPUSH
34185: LD_VAR 0 4
34189: PPUSH
34190: LD_VAR 0 5
34194: PPUSH
34195: CALL 34237 0 6
34199: GO 34232
34201: LD_INT 304
34203: DOUBLE
34204: EQUAL
34205: IFTRUE 34209
34207: GO 34231
34209: POP
// hHackTeleport ( unit , x , y ) ; end ;
34210: LD_VAR 0 2
34214: PPUSH
34215: LD_VAR 0 4
34219: PPUSH
34220: LD_VAR 0 5
34224: PPUSH
34225: CALL 36004 0 3
34229: GO 34232
34231: POP
// end ;
34232: LD_VAR 0 12
34236: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
34237: LD_INT 0
34239: PPUSH
34240: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
34241: LD_VAR 0 1
34245: PUSH
34246: LD_INT 1
34248: LESS
34249: PUSH
34250: LD_VAR 0 1
34254: PUSH
34255: LD_INT 3
34257: GREATER
34258: OR
34259: PUSH
34260: LD_VAR 0 5
34264: PPUSH
34265: LD_VAR 0 6
34269: PPUSH
34270: CALL_OW 428
34274: OR
34275: IFFALSE 34279
// exit ;
34277: GO 35007
// uc_side := your_side ;
34279: LD_ADDR_OWVAR 20
34283: PUSH
34284: LD_OWVAR 2
34288: ST_TO_ADDR
// uc_nation := nation ;
34289: LD_ADDR_OWVAR 21
34293: PUSH
34294: LD_VAR 0 1
34298: ST_TO_ADDR
// bc_level = 1 ;
34299: LD_ADDR_OWVAR 43
34303: PUSH
34304: LD_INT 1
34306: ST_TO_ADDR
// case btype of 1 :
34307: LD_VAR 0 2
34311: PUSH
34312: LD_INT 1
34314: DOUBLE
34315: EQUAL
34316: IFTRUE 34320
34318: GO 34331
34320: POP
// bc_type := b_depot ; 2 :
34321: LD_ADDR_OWVAR 42
34325: PUSH
34326: LD_INT 0
34328: ST_TO_ADDR
34329: GO 34951
34331: LD_INT 2
34333: DOUBLE
34334: EQUAL
34335: IFTRUE 34339
34337: GO 34350
34339: POP
// bc_type := b_warehouse ; 3 :
34340: LD_ADDR_OWVAR 42
34344: PUSH
34345: LD_INT 1
34347: ST_TO_ADDR
34348: GO 34951
34350: LD_INT 3
34352: DOUBLE
34353: EQUAL
34354: IFTRUE 34358
34356: GO 34369
34358: POP
// bc_type := b_lab ; 4 .. 9 :
34359: LD_ADDR_OWVAR 42
34363: PUSH
34364: LD_INT 6
34366: ST_TO_ADDR
34367: GO 34951
34369: LD_INT 4
34371: DOUBLE
34372: GREATEREQUAL
34373: IFFALSE 34381
34375: LD_INT 9
34377: DOUBLE
34378: LESSEQUAL
34379: IFTRUE 34383
34381: GO 34443
34383: POP
// begin bc_type := b_lab_half ;
34384: LD_ADDR_OWVAR 42
34388: PUSH
34389: LD_INT 7
34391: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
34392: LD_ADDR_OWVAR 44
34396: PUSH
34397: LD_INT 10
34399: PUSH
34400: LD_INT 11
34402: PUSH
34403: LD_INT 12
34405: PUSH
34406: LD_INT 15
34408: PUSH
34409: LD_INT 14
34411: PUSH
34412: LD_INT 13
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: PUSH
34423: LD_VAR 0 2
34427: PUSH
34428: LD_INT 3
34430: MINUS
34431: ARRAY
34432: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
34433: LD_ADDR_OWVAR 45
34437: PUSH
34438: LD_INT 9
34440: ST_TO_ADDR
// end ; 10 .. 13 :
34441: GO 34951
34443: LD_INT 10
34445: DOUBLE
34446: GREATEREQUAL
34447: IFFALSE 34455
34449: LD_INT 13
34451: DOUBLE
34452: LESSEQUAL
34453: IFTRUE 34457
34455: GO 34534
34457: POP
// begin bc_type := b_lab_full ;
34458: LD_ADDR_OWVAR 42
34462: PUSH
34463: LD_INT 8
34465: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
34466: LD_ADDR_OWVAR 44
34470: PUSH
34471: LD_INT 10
34473: PUSH
34474: LD_INT 12
34476: PUSH
34477: LD_INT 14
34479: PUSH
34480: LD_INT 13
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: PUSH
34489: LD_VAR 0 2
34493: PUSH
34494: LD_INT 9
34496: MINUS
34497: ARRAY
34498: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
34499: LD_ADDR_OWVAR 45
34503: PUSH
34504: LD_INT 11
34506: PUSH
34507: LD_INT 15
34509: PUSH
34510: LD_INT 12
34512: PUSH
34513: LD_INT 15
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: PUSH
34522: LD_VAR 0 2
34526: PUSH
34527: LD_INT 9
34529: MINUS
34530: ARRAY
34531: ST_TO_ADDR
// end ; 14 :
34532: GO 34951
34534: LD_INT 14
34536: DOUBLE
34537: EQUAL
34538: IFTRUE 34542
34540: GO 34553
34542: POP
// bc_type := b_workshop ; 15 :
34543: LD_ADDR_OWVAR 42
34547: PUSH
34548: LD_INT 2
34550: ST_TO_ADDR
34551: GO 34951
34553: LD_INT 15
34555: DOUBLE
34556: EQUAL
34557: IFTRUE 34561
34559: GO 34572
34561: POP
// bc_type := b_factory ; 16 :
34562: LD_ADDR_OWVAR 42
34566: PUSH
34567: LD_INT 3
34569: ST_TO_ADDR
34570: GO 34951
34572: LD_INT 16
34574: DOUBLE
34575: EQUAL
34576: IFTRUE 34580
34578: GO 34591
34580: POP
// bc_type := b_ext_gun ; 17 :
34581: LD_ADDR_OWVAR 42
34585: PUSH
34586: LD_INT 17
34588: ST_TO_ADDR
34589: GO 34951
34591: LD_INT 17
34593: DOUBLE
34594: EQUAL
34595: IFTRUE 34599
34597: GO 34627
34599: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
34600: LD_ADDR_OWVAR 42
34604: PUSH
34605: LD_INT 19
34607: PUSH
34608: LD_INT 23
34610: PUSH
34611: LD_INT 19
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: LIST
34618: PUSH
34619: LD_VAR 0 1
34623: ARRAY
34624: ST_TO_ADDR
34625: GO 34951
34627: LD_INT 18
34629: DOUBLE
34630: EQUAL
34631: IFTRUE 34635
34633: GO 34646
34635: POP
// bc_type := b_ext_radar ; 19 :
34636: LD_ADDR_OWVAR 42
34640: PUSH
34641: LD_INT 20
34643: ST_TO_ADDR
34644: GO 34951
34646: LD_INT 19
34648: DOUBLE
34649: EQUAL
34650: IFTRUE 34654
34652: GO 34665
34654: POP
// bc_type := b_ext_radio ; 20 :
34655: LD_ADDR_OWVAR 42
34659: PUSH
34660: LD_INT 22
34662: ST_TO_ADDR
34663: GO 34951
34665: LD_INT 20
34667: DOUBLE
34668: EQUAL
34669: IFTRUE 34673
34671: GO 34684
34673: POP
// bc_type := b_ext_siberium ; 21 :
34674: LD_ADDR_OWVAR 42
34678: PUSH
34679: LD_INT 21
34681: ST_TO_ADDR
34682: GO 34951
34684: LD_INT 21
34686: DOUBLE
34687: EQUAL
34688: IFTRUE 34692
34690: GO 34703
34692: POP
// bc_type := b_ext_computer ; 22 :
34693: LD_ADDR_OWVAR 42
34697: PUSH
34698: LD_INT 24
34700: ST_TO_ADDR
34701: GO 34951
34703: LD_INT 22
34705: DOUBLE
34706: EQUAL
34707: IFTRUE 34711
34709: GO 34722
34711: POP
// bc_type := b_ext_track ; 23 :
34712: LD_ADDR_OWVAR 42
34716: PUSH
34717: LD_INT 16
34719: ST_TO_ADDR
34720: GO 34951
34722: LD_INT 23
34724: DOUBLE
34725: EQUAL
34726: IFTRUE 34730
34728: GO 34741
34730: POP
// bc_type := b_ext_laser ; 24 :
34731: LD_ADDR_OWVAR 42
34735: PUSH
34736: LD_INT 25
34738: ST_TO_ADDR
34739: GO 34951
34741: LD_INT 24
34743: DOUBLE
34744: EQUAL
34745: IFTRUE 34749
34747: GO 34760
34749: POP
// bc_type := b_control_tower ; 25 :
34750: LD_ADDR_OWVAR 42
34754: PUSH
34755: LD_INT 36
34757: ST_TO_ADDR
34758: GO 34951
34760: LD_INT 25
34762: DOUBLE
34763: EQUAL
34764: IFTRUE 34768
34766: GO 34779
34768: POP
// bc_type := b_breastwork ; 26 :
34769: LD_ADDR_OWVAR 42
34773: PUSH
34774: LD_INT 31
34776: ST_TO_ADDR
34777: GO 34951
34779: LD_INT 26
34781: DOUBLE
34782: EQUAL
34783: IFTRUE 34787
34785: GO 34798
34787: POP
// bc_type := b_bunker ; 27 :
34788: LD_ADDR_OWVAR 42
34792: PUSH
34793: LD_INT 32
34795: ST_TO_ADDR
34796: GO 34951
34798: LD_INT 27
34800: DOUBLE
34801: EQUAL
34802: IFTRUE 34806
34804: GO 34817
34806: POP
// bc_type := b_turret ; 28 :
34807: LD_ADDR_OWVAR 42
34811: PUSH
34812: LD_INT 33
34814: ST_TO_ADDR
34815: GO 34951
34817: LD_INT 28
34819: DOUBLE
34820: EQUAL
34821: IFTRUE 34825
34823: GO 34836
34825: POP
// bc_type := b_armoury ; 29 :
34826: LD_ADDR_OWVAR 42
34830: PUSH
34831: LD_INT 4
34833: ST_TO_ADDR
34834: GO 34951
34836: LD_INT 29
34838: DOUBLE
34839: EQUAL
34840: IFTRUE 34844
34842: GO 34855
34844: POP
// bc_type := b_barracks ; 30 :
34845: LD_ADDR_OWVAR 42
34849: PUSH
34850: LD_INT 5
34852: ST_TO_ADDR
34853: GO 34951
34855: LD_INT 30
34857: DOUBLE
34858: EQUAL
34859: IFTRUE 34863
34861: GO 34874
34863: POP
// bc_type := b_solar_power ; 31 :
34864: LD_ADDR_OWVAR 42
34868: PUSH
34869: LD_INT 27
34871: ST_TO_ADDR
34872: GO 34951
34874: LD_INT 31
34876: DOUBLE
34877: EQUAL
34878: IFTRUE 34882
34880: GO 34893
34882: POP
// bc_type := b_oil_power ; 32 :
34883: LD_ADDR_OWVAR 42
34887: PUSH
34888: LD_INT 26
34890: ST_TO_ADDR
34891: GO 34951
34893: LD_INT 32
34895: DOUBLE
34896: EQUAL
34897: IFTRUE 34901
34899: GO 34912
34901: POP
// bc_type := b_siberite_power ; 33 :
34902: LD_ADDR_OWVAR 42
34906: PUSH
34907: LD_INT 28
34909: ST_TO_ADDR
34910: GO 34951
34912: LD_INT 33
34914: DOUBLE
34915: EQUAL
34916: IFTRUE 34920
34918: GO 34931
34920: POP
// bc_type := b_oil_mine ; 34 :
34921: LD_ADDR_OWVAR 42
34925: PUSH
34926: LD_INT 29
34928: ST_TO_ADDR
34929: GO 34951
34931: LD_INT 34
34933: DOUBLE
34934: EQUAL
34935: IFTRUE 34939
34937: GO 34950
34939: POP
// bc_type := b_siberite_mine ; end ;
34940: LD_ADDR_OWVAR 42
34944: PUSH
34945: LD_INT 30
34947: ST_TO_ADDR
34948: GO 34951
34950: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
34951: LD_ADDR_VAR 0 8
34955: PUSH
34956: LD_VAR 0 5
34960: PPUSH
34961: LD_VAR 0 6
34965: PPUSH
34966: LD_VAR 0 3
34970: PPUSH
34971: CALL_OW 47
34975: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
34976: LD_OWVAR 42
34980: PUSH
34981: LD_INT 32
34983: PUSH
34984: LD_INT 33
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: IN
34991: IFFALSE 35007
// PlaceWeaponTurret ( b , weapon ) ;
34993: LD_VAR 0 8
34997: PPUSH
34998: LD_VAR 0 4
35002: PPUSH
35003: CALL_OW 431
// end ;
35007: LD_VAR 0 7
35011: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
35012: LD_INT 0
35014: PPUSH
35015: PPUSH
35016: PPUSH
35017: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35018: LD_ADDR_VAR 0 4
35022: PUSH
35023: LD_INT 22
35025: PUSH
35026: LD_OWVAR 2
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 2
35037: PUSH
35038: LD_INT 30
35040: PUSH
35041: LD_INT 0
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 30
35050: PUSH
35051: LD_INT 1
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: LIST
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PPUSH
35067: CALL_OW 69
35071: ST_TO_ADDR
// if not tmp then
35072: LD_VAR 0 4
35076: NOT
35077: IFFALSE 35081
// exit ;
35079: GO 35140
// for i in tmp do
35081: LD_ADDR_VAR 0 2
35085: PUSH
35086: LD_VAR 0 4
35090: PUSH
35091: FOR_IN
35092: IFFALSE 35138
// for j = 1 to 3 do
35094: LD_ADDR_VAR 0 3
35098: PUSH
35099: DOUBLE
35100: LD_INT 1
35102: DEC
35103: ST_TO_ADDR
35104: LD_INT 3
35106: PUSH
35107: FOR_TO
35108: IFFALSE 35134
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
35110: LD_VAR 0 2
35114: PPUSH
35115: CALL_OW 274
35119: PPUSH
35120: LD_VAR 0 3
35124: PPUSH
35125: LD_INT 99999
35127: PPUSH
35128: CALL_OW 277
35132: GO 35107
35134: POP
35135: POP
35136: GO 35091
35138: POP
35139: POP
// end ;
35140: LD_VAR 0 1
35144: RET
// export function hHackSetLevel10 ; var i , j ; begin
35145: LD_INT 0
35147: PPUSH
35148: PPUSH
35149: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35150: LD_ADDR_VAR 0 2
35154: PUSH
35155: LD_INT 21
35157: PUSH
35158: LD_INT 1
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: PPUSH
35165: CALL_OW 69
35169: PUSH
35170: FOR_IN
35171: IFFALSE 35223
// if IsSelected ( i ) then
35173: LD_VAR 0 2
35177: PPUSH
35178: CALL_OW 306
35182: IFFALSE 35221
// begin for j := 1 to 4 do
35184: LD_ADDR_VAR 0 3
35188: PUSH
35189: DOUBLE
35190: LD_INT 1
35192: DEC
35193: ST_TO_ADDR
35194: LD_INT 4
35196: PUSH
35197: FOR_TO
35198: IFFALSE 35219
// SetSkill ( i , j , 10 ) ;
35200: LD_VAR 0 2
35204: PPUSH
35205: LD_VAR 0 3
35209: PPUSH
35210: LD_INT 10
35212: PPUSH
35213: CALL_OW 237
35217: GO 35197
35219: POP
35220: POP
// end ;
35221: GO 35170
35223: POP
35224: POP
// end ;
35225: LD_VAR 0 1
35229: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
35230: LD_INT 0
35232: PPUSH
35233: PPUSH
35234: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
35235: LD_ADDR_VAR 0 2
35239: PUSH
35240: LD_INT 22
35242: PUSH
35243: LD_OWVAR 2
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 21
35254: PUSH
35255: LD_INT 1
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PPUSH
35266: CALL_OW 69
35270: PUSH
35271: FOR_IN
35272: IFFALSE 35313
// begin for j := 1 to 4 do
35274: LD_ADDR_VAR 0 3
35278: PUSH
35279: DOUBLE
35280: LD_INT 1
35282: DEC
35283: ST_TO_ADDR
35284: LD_INT 4
35286: PUSH
35287: FOR_TO
35288: IFFALSE 35309
// SetSkill ( i , j , 10 ) ;
35290: LD_VAR 0 2
35294: PPUSH
35295: LD_VAR 0 3
35299: PPUSH
35300: LD_INT 10
35302: PPUSH
35303: CALL_OW 237
35307: GO 35287
35309: POP
35310: POP
// end ;
35311: GO 35271
35313: POP
35314: POP
// end ;
35315: LD_VAR 0 1
35319: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
35320: LD_INT 0
35322: PPUSH
// uc_side := your_side ;
35323: LD_ADDR_OWVAR 20
35327: PUSH
35328: LD_OWVAR 2
35332: ST_TO_ADDR
// uc_nation := nation ;
35333: LD_ADDR_OWVAR 21
35337: PUSH
35338: LD_VAR 0 1
35342: ST_TO_ADDR
// InitHc ;
35343: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
35347: LD_INT 0
35349: PPUSH
35350: LD_VAR 0 2
35354: PPUSH
35355: LD_VAR 0 3
35359: PPUSH
35360: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
35364: LD_VAR 0 4
35368: PPUSH
35369: LD_VAR 0 5
35373: PPUSH
35374: CALL_OW 428
35378: PUSH
35379: LD_INT 0
35381: EQUAL
35382: IFFALSE 35406
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
35384: CALL_OW 44
35388: PPUSH
35389: LD_VAR 0 4
35393: PPUSH
35394: LD_VAR 0 5
35398: PPUSH
35399: LD_INT 1
35401: PPUSH
35402: CALL_OW 48
// end ;
35406: LD_VAR 0 6
35410: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
35411: LD_INT 0
35413: PPUSH
35414: PPUSH
// uc_side := your_side ;
35415: LD_ADDR_OWVAR 20
35419: PUSH
35420: LD_OWVAR 2
35424: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
35425: LD_VAR 0 1
35429: PUSH
35430: LD_INT 1
35432: PUSH
35433: LD_INT 2
35435: PUSH
35436: LD_INT 3
35438: PUSH
35439: LD_INT 4
35441: PUSH
35442: LD_INT 5
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: LIST
35449: LIST
35450: LIST
35451: IN
35452: IFFALSE 35464
// uc_nation := nation_american else
35454: LD_ADDR_OWVAR 21
35458: PUSH
35459: LD_INT 1
35461: ST_TO_ADDR
35462: GO 35507
// if chassis in [ 11 , 12 , 13 , 14 ] then
35464: LD_VAR 0 1
35468: PUSH
35469: LD_INT 11
35471: PUSH
35472: LD_INT 12
35474: PUSH
35475: LD_INT 13
35477: PUSH
35478: LD_INT 14
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: LIST
35485: LIST
35486: IN
35487: IFFALSE 35499
// uc_nation := nation_arabian else
35489: LD_ADDR_OWVAR 21
35493: PUSH
35494: LD_INT 2
35496: ST_TO_ADDR
35497: GO 35507
// uc_nation := nation_russian ;
35499: LD_ADDR_OWVAR 21
35503: PUSH
35504: LD_INT 3
35506: ST_TO_ADDR
// vc_chassis := chassis ;
35507: LD_ADDR_OWVAR 37
35511: PUSH
35512: LD_VAR 0 1
35516: ST_TO_ADDR
// vc_engine := engine ;
35517: LD_ADDR_OWVAR 39
35521: PUSH
35522: LD_VAR 0 2
35526: ST_TO_ADDR
// vc_control := control ;
35527: LD_ADDR_OWVAR 38
35531: PUSH
35532: LD_VAR 0 3
35536: ST_TO_ADDR
// vc_weapon := weapon ;
35537: LD_ADDR_OWVAR 40
35541: PUSH
35542: LD_VAR 0 4
35546: ST_TO_ADDR
// un := CreateVehicle ;
35547: LD_ADDR_VAR 0 8
35551: PUSH
35552: CALL_OW 45
35556: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
35557: LD_VAR 0 8
35561: PPUSH
35562: LD_INT 0
35564: PPUSH
35565: LD_INT 5
35567: PPUSH
35568: CALL_OW 12
35572: PPUSH
35573: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
35577: LD_VAR 0 8
35581: PPUSH
35582: LD_VAR 0 5
35586: PPUSH
35587: LD_VAR 0 6
35591: PPUSH
35592: LD_INT 1
35594: PPUSH
35595: CALL_OW 48
// end ;
35599: LD_VAR 0 7
35603: RET
// export hInvincible ; every 1 do
35604: GO 35606
35606: DISABLE
// hInvincible := [ ] ;
35607: LD_ADDR_EXP 116
35611: PUSH
35612: EMPTY
35613: ST_TO_ADDR
35614: END
// every 10 do var i ;
35615: GO 35617
35617: DISABLE
35618: LD_INT 0
35620: PPUSH
// begin enable ;
35621: ENABLE
// if not hInvincible then
35622: LD_EXP 116
35626: NOT
35627: IFFALSE 35631
// exit ;
35629: GO 35675
// for i in hInvincible do
35631: LD_ADDR_VAR 0 1
35635: PUSH
35636: LD_EXP 116
35640: PUSH
35641: FOR_IN
35642: IFFALSE 35673
// if GetLives ( i ) < 1000 then
35644: LD_VAR 0 1
35648: PPUSH
35649: CALL_OW 256
35653: PUSH
35654: LD_INT 1000
35656: LESS
35657: IFFALSE 35671
// SetLives ( i , 1000 ) ;
35659: LD_VAR 0 1
35663: PPUSH
35664: LD_INT 1000
35666: PPUSH
35667: CALL_OW 234
35671: GO 35641
35673: POP
35674: POP
// end ;
35675: PPOPN 1
35677: END
// export function hHackInvincible ; var i ; begin
35678: LD_INT 0
35680: PPUSH
35681: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
35682: LD_ADDR_VAR 0 2
35686: PUSH
35687: LD_INT 2
35689: PUSH
35690: LD_INT 21
35692: PUSH
35693: LD_INT 1
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: LD_INT 21
35702: PUSH
35703: LD_INT 2
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: LIST
35714: PPUSH
35715: CALL_OW 69
35719: PUSH
35720: FOR_IN
35721: IFFALSE 35782
// if IsSelected ( i ) then
35723: LD_VAR 0 2
35727: PPUSH
35728: CALL_OW 306
35732: IFFALSE 35780
// begin if i in hInvincible then
35734: LD_VAR 0 2
35738: PUSH
35739: LD_EXP 116
35743: IN
35744: IFFALSE 35764
// hInvincible := hInvincible diff i else
35746: LD_ADDR_EXP 116
35750: PUSH
35751: LD_EXP 116
35755: PUSH
35756: LD_VAR 0 2
35760: DIFF
35761: ST_TO_ADDR
35762: GO 35780
// hInvincible := hInvincible union i ;
35764: LD_ADDR_EXP 116
35768: PUSH
35769: LD_EXP 116
35773: PUSH
35774: LD_VAR 0 2
35778: UNION
35779: ST_TO_ADDR
// end ;
35780: GO 35720
35782: POP
35783: POP
// end ;
35784: LD_VAR 0 1
35788: RET
// export function hHackInvisible ; var i , j ; begin
35789: LD_INT 0
35791: PPUSH
35792: PPUSH
35793: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
35794: LD_ADDR_VAR 0 2
35798: PUSH
35799: LD_INT 21
35801: PUSH
35802: LD_INT 1
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PPUSH
35809: CALL_OW 69
35813: PUSH
35814: FOR_IN
35815: IFFALSE 35839
// if IsSelected ( i ) then
35817: LD_VAR 0 2
35821: PPUSH
35822: CALL_OW 306
35826: IFFALSE 35837
// ComForceInvisible ( i ) ;
35828: LD_VAR 0 2
35832: PPUSH
35833: CALL_OW 496
35837: GO 35814
35839: POP
35840: POP
// end ;
35841: LD_VAR 0 1
35845: RET
// export function hHackChangeYourSide ; begin
35846: LD_INT 0
35848: PPUSH
// if your_side = 8 then
35849: LD_OWVAR 2
35853: PUSH
35854: LD_INT 8
35856: EQUAL
35857: IFFALSE 35869
// your_side := 0 else
35859: LD_ADDR_OWVAR 2
35863: PUSH
35864: LD_INT 0
35866: ST_TO_ADDR
35867: GO 35883
// your_side := your_side + 1 ;
35869: LD_ADDR_OWVAR 2
35873: PUSH
35874: LD_OWVAR 2
35878: PUSH
35879: LD_INT 1
35881: PLUS
35882: ST_TO_ADDR
// end ;
35883: LD_VAR 0 1
35887: RET
// export function hHackChangeUnitSide ; var i , j ; begin
35888: LD_INT 0
35890: PPUSH
35891: PPUSH
35892: PPUSH
// for i in all_units do
35893: LD_ADDR_VAR 0 2
35897: PUSH
35898: LD_OWVAR 3
35902: PUSH
35903: FOR_IN
35904: IFFALSE 35982
// if IsSelected ( i ) then
35906: LD_VAR 0 2
35910: PPUSH
35911: CALL_OW 306
35915: IFFALSE 35980
// begin j := GetSide ( i ) ;
35917: LD_ADDR_VAR 0 3
35921: PUSH
35922: LD_VAR 0 2
35926: PPUSH
35927: CALL_OW 255
35931: ST_TO_ADDR
// if j = 8 then
35932: LD_VAR 0 3
35936: PUSH
35937: LD_INT 8
35939: EQUAL
35940: IFFALSE 35952
// j := 0 else
35942: LD_ADDR_VAR 0 3
35946: PUSH
35947: LD_INT 0
35949: ST_TO_ADDR
35950: GO 35966
// j := j + 1 ;
35952: LD_ADDR_VAR 0 3
35956: PUSH
35957: LD_VAR 0 3
35961: PUSH
35962: LD_INT 1
35964: PLUS
35965: ST_TO_ADDR
// SetSide ( i , j ) ;
35966: LD_VAR 0 2
35970: PPUSH
35971: LD_VAR 0 3
35975: PPUSH
35976: CALL_OW 235
// end ;
35980: GO 35903
35982: POP
35983: POP
// end ;
35984: LD_VAR 0 1
35988: RET
// export function hHackFog ; begin
35989: LD_INT 0
35991: PPUSH
// FogOff ( true ) ;
35992: LD_INT 1
35994: PPUSH
35995: CALL_OW 344
// end ;
35999: LD_VAR 0 1
36003: RET
// export function hHackTeleport ( unit , x , y ) ; begin
36004: LD_INT 0
36006: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
36007: LD_VAR 0 1
36011: PPUSH
36012: LD_VAR 0 2
36016: PPUSH
36017: LD_VAR 0 3
36021: PPUSH
36022: LD_INT 1
36024: PPUSH
36025: LD_INT 1
36027: PPUSH
36028: CALL_OW 483
// CenterOnXY ( x , y ) ;
36032: LD_VAR 0 2
36036: PPUSH
36037: LD_VAR 0 3
36041: PPUSH
36042: CALL_OW 84
// end ;
36046: LD_VAR 0 4
36050: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
36051: LD_INT 0
36053: PPUSH
36054: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
36055: LD_VAR 0 1
36059: NOT
36060: PUSH
36061: LD_VAR 0 2
36065: PPUSH
36066: LD_VAR 0 3
36070: PPUSH
36071: CALL_OW 488
36075: NOT
36076: OR
36077: PUSH
36078: LD_VAR 0 1
36082: PPUSH
36083: CALL_OW 266
36087: PUSH
36088: LD_INT 3
36090: NONEQUAL
36091: PUSH
36092: LD_VAR 0 1
36096: PPUSH
36097: CALL_OW 247
36101: PUSH
36102: LD_INT 1
36104: EQUAL
36105: NOT
36106: AND
36107: OR
36108: IFFALSE 36112
// exit ;
36110: GO 36261
// if GetType ( factory ) = unit_human then
36112: LD_VAR 0 1
36116: PPUSH
36117: CALL_OW 247
36121: PUSH
36122: LD_INT 1
36124: EQUAL
36125: IFFALSE 36142
// factory := IsInUnit ( factory ) ;
36127: LD_ADDR_VAR 0 1
36131: PUSH
36132: LD_VAR 0 1
36136: PPUSH
36137: CALL_OW 310
36141: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
36142: LD_VAR 0 1
36146: PPUSH
36147: CALL_OW 266
36151: PUSH
36152: LD_INT 3
36154: NONEQUAL
36155: IFFALSE 36159
// exit ;
36157: GO 36261
// if HexInfo ( x , y ) = factory then
36159: LD_VAR 0 2
36163: PPUSH
36164: LD_VAR 0 3
36168: PPUSH
36169: CALL_OW 428
36173: PUSH
36174: LD_VAR 0 1
36178: EQUAL
36179: IFFALSE 36206
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
36181: LD_ADDR_EXP 117
36185: PUSH
36186: LD_EXP 117
36190: PPUSH
36191: LD_VAR 0 1
36195: PPUSH
36196: LD_INT 0
36198: PPUSH
36199: CALL_OW 1
36203: ST_TO_ADDR
36204: GO 36257
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
36206: LD_ADDR_EXP 117
36210: PUSH
36211: LD_EXP 117
36215: PPUSH
36216: LD_VAR 0 1
36220: PPUSH
36221: LD_VAR 0 1
36225: PPUSH
36226: CALL_OW 255
36230: PUSH
36231: LD_VAR 0 1
36235: PUSH
36236: LD_VAR 0 2
36240: PUSH
36241: LD_VAR 0 3
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: PPUSH
36252: CALL_OW 1
36256: ST_TO_ADDR
// UpdateFactoryWaypoints ;
36257: CALL 36266 0 0
// end ;
36261: LD_VAR 0 4
36265: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
36266: LD_INT 0
36268: PPUSH
36269: PPUSH
36270: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
36271: LD_STRING resetFactoryWaypoint();
36273: PPUSH
36274: CALL_OW 559
// if factoryWaypoints then
36278: LD_EXP 117
36282: IFFALSE 36408
// begin list := PrepareArray ( factoryWaypoints ) ;
36284: LD_ADDR_VAR 0 3
36288: PUSH
36289: LD_EXP 117
36293: PPUSH
36294: CALL 83872 0 1
36298: ST_TO_ADDR
// for i := 1 to list do
36299: LD_ADDR_VAR 0 2
36303: PUSH
36304: DOUBLE
36305: LD_INT 1
36307: DEC
36308: ST_TO_ADDR
36309: LD_VAR 0 3
36313: PUSH
36314: FOR_TO
36315: IFFALSE 36406
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
36317: LD_STRING setFactoryWaypointXY(
36319: PUSH
36320: LD_VAR 0 3
36324: PUSH
36325: LD_VAR 0 2
36329: ARRAY
36330: PUSH
36331: LD_INT 1
36333: ARRAY
36334: STR
36335: PUSH
36336: LD_STRING ,
36338: STR
36339: PUSH
36340: LD_VAR 0 3
36344: PUSH
36345: LD_VAR 0 2
36349: ARRAY
36350: PUSH
36351: LD_INT 2
36353: ARRAY
36354: STR
36355: PUSH
36356: LD_STRING ,
36358: STR
36359: PUSH
36360: LD_VAR 0 3
36364: PUSH
36365: LD_VAR 0 2
36369: ARRAY
36370: PUSH
36371: LD_INT 3
36373: ARRAY
36374: STR
36375: PUSH
36376: LD_STRING ,
36378: STR
36379: PUSH
36380: LD_VAR 0 3
36384: PUSH
36385: LD_VAR 0 2
36389: ARRAY
36390: PUSH
36391: LD_INT 4
36393: ARRAY
36394: STR
36395: PUSH
36396: LD_STRING )
36398: STR
36399: PPUSH
36400: CALL_OW 559
36404: GO 36314
36406: POP
36407: POP
// end ; end ;
36408: LD_VAR 0 1
36412: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
36413: LD_INT 0
36415: PPUSH
// if HexInfo ( x , y ) = warehouse then
36416: LD_VAR 0 2
36420: PPUSH
36421: LD_VAR 0 3
36425: PPUSH
36426: CALL_OW 428
36430: PUSH
36431: LD_VAR 0 1
36435: EQUAL
36436: IFFALSE 36463
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
36438: LD_ADDR_EXP 118
36442: PUSH
36443: LD_EXP 118
36447: PPUSH
36448: LD_VAR 0 1
36452: PPUSH
36453: LD_INT 0
36455: PPUSH
36456: CALL_OW 1
36460: ST_TO_ADDR
36461: GO 36514
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
36463: LD_ADDR_EXP 118
36467: PUSH
36468: LD_EXP 118
36472: PPUSH
36473: LD_VAR 0 1
36477: PPUSH
36478: LD_VAR 0 1
36482: PPUSH
36483: CALL_OW 255
36487: PUSH
36488: LD_VAR 0 1
36492: PUSH
36493: LD_VAR 0 2
36497: PUSH
36498: LD_VAR 0 3
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: PPUSH
36509: CALL_OW 1
36513: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
36514: CALL 36523 0 0
// end ;
36518: LD_VAR 0 4
36522: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
36523: LD_INT 0
36525: PPUSH
36526: PPUSH
36527: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
36528: LD_STRING resetWarehouseGatheringPoints();
36530: PPUSH
36531: CALL_OW 559
// if warehouseGatheringPoints then
36535: LD_EXP 118
36539: IFFALSE 36665
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
36541: LD_ADDR_VAR 0 3
36545: PUSH
36546: LD_EXP 118
36550: PPUSH
36551: CALL 83872 0 1
36555: ST_TO_ADDR
// for i := 1 to list do
36556: LD_ADDR_VAR 0 2
36560: PUSH
36561: DOUBLE
36562: LD_INT 1
36564: DEC
36565: ST_TO_ADDR
36566: LD_VAR 0 3
36570: PUSH
36571: FOR_TO
36572: IFFALSE 36663
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
36574: LD_STRING setWarehouseGatheringPointXY(
36576: PUSH
36577: LD_VAR 0 3
36581: PUSH
36582: LD_VAR 0 2
36586: ARRAY
36587: PUSH
36588: LD_INT 1
36590: ARRAY
36591: STR
36592: PUSH
36593: LD_STRING ,
36595: STR
36596: PUSH
36597: LD_VAR 0 3
36601: PUSH
36602: LD_VAR 0 2
36606: ARRAY
36607: PUSH
36608: LD_INT 2
36610: ARRAY
36611: STR
36612: PUSH
36613: LD_STRING ,
36615: STR
36616: PUSH
36617: LD_VAR 0 3
36621: PUSH
36622: LD_VAR 0 2
36626: ARRAY
36627: PUSH
36628: LD_INT 3
36630: ARRAY
36631: STR
36632: PUSH
36633: LD_STRING ,
36635: STR
36636: PUSH
36637: LD_VAR 0 3
36641: PUSH
36642: LD_VAR 0 2
36646: ARRAY
36647: PUSH
36648: LD_INT 4
36650: ARRAY
36651: STR
36652: PUSH
36653: LD_STRING )
36655: STR
36656: PPUSH
36657: CALL_OW 559
36661: GO 36571
36663: POP
36664: POP
// end ; end ;
36665: LD_VAR 0 1
36669: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
36670: LD_EXP 118
36674: IFFALSE 37359
36676: GO 36678
36678: DISABLE
36679: LD_INT 0
36681: PPUSH
36682: PPUSH
36683: PPUSH
36684: PPUSH
36685: PPUSH
36686: PPUSH
36687: PPUSH
36688: PPUSH
36689: PPUSH
// begin enable ;
36690: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
36691: LD_ADDR_VAR 0 3
36695: PUSH
36696: LD_EXP 118
36700: PPUSH
36701: CALL 83872 0 1
36705: ST_TO_ADDR
// if not list then
36706: LD_VAR 0 3
36710: NOT
36711: IFFALSE 36715
// exit ;
36713: GO 37359
// for i := 1 to list do
36715: LD_ADDR_VAR 0 1
36719: PUSH
36720: DOUBLE
36721: LD_INT 1
36723: DEC
36724: ST_TO_ADDR
36725: LD_VAR 0 3
36729: PUSH
36730: FOR_TO
36731: IFFALSE 37357
// begin depot := list [ i ] [ 2 ] ;
36733: LD_ADDR_VAR 0 8
36737: PUSH
36738: LD_VAR 0 3
36742: PUSH
36743: LD_VAR 0 1
36747: ARRAY
36748: PUSH
36749: LD_INT 2
36751: ARRAY
36752: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
36753: LD_ADDR_VAR 0 5
36757: PUSH
36758: LD_VAR 0 3
36762: PUSH
36763: LD_VAR 0 1
36767: ARRAY
36768: PUSH
36769: LD_INT 1
36771: ARRAY
36772: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
36773: LD_VAR 0 8
36777: PPUSH
36778: CALL_OW 301
36782: PUSH
36783: LD_VAR 0 5
36787: PUSH
36788: LD_VAR 0 8
36792: PPUSH
36793: CALL_OW 255
36797: NONEQUAL
36798: OR
36799: IFFALSE 36828
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
36801: LD_ADDR_EXP 118
36805: PUSH
36806: LD_EXP 118
36810: PPUSH
36811: LD_VAR 0 8
36815: PPUSH
36816: LD_INT 0
36818: PPUSH
36819: CALL_OW 1
36823: ST_TO_ADDR
// exit ;
36824: POP
36825: POP
36826: GO 37359
// end ; x := list [ i ] [ 3 ] ;
36828: LD_ADDR_VAR 0 6
36832: PUSH
36833: LD_VAR 0 3
36837: PUSH
36838: LD_VAR 0 1
36842: ARRAY
36843: PUSH
36844: LD_INT 3
36846: ARRAY
36847: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
36848: LD_ADDR_VAR 0 7
36852: PUSH
36853: LD_VAR 0 3
36857: PUSH
36858: LD_VAR 0 1
36862: ARRAY
36863: PUSH
36864: LD_INT 4
36866: ARRAY
36867: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
36868: LD_ADDR_VAR 0 9
36872: PUSH
36873: LD_VAR 0 6
36877: PPUSH
36878: LD_VAR 0 7
36882: PPUSH
36883: LD_INT 16
36885: PPUSH
36886: CALL 82456 0 3
36890: ST_TO_ADDR
// if not cratesNearbyPoint then
36891: LD_VAR 0 9
36895: NOT
36896: IFFALSE 36902
// exit ;
36898: POP
36899: POP
36900: GO 37359
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
36902: LD_ADDR_VAR 0 4
36906: PUSH
36907: LD_INT 22
36909: PUSH
36910: LD_VAR 0 5
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: PUSH
36919: LD_INT 3
36921: PUSH
36922: LD_INT 60
36924: PUSH
36925: EMPTY
36926: LIST
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: PUSH
36932: LD_INT 91
36934: PUSH
36935: LD_VAR 0 8
36939: PUSH
36940: LD_INT 6
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 2
36950: PUSH
36951: LD_INT 25
36953: PUSH
36954: LD_INT 2
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 25
36963: PUSH
36964: LD_INT 16
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: LIST
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: PPUSH
36982: CALL_OW 69
36986: PUSH
36987: LD_VAR 0 8
36991: PPUSH
36992: CALL_OW 313
36996: PPUSH
36997: LD_INT 3
36999: PUSH
37000: LD_INT 60
37002: PUSH
37003: EMPTY
37004: LIST
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 2
37012: PUSH
37013: LD_INT 25
37015: PUSH
37016: LD_INT 2
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: LD_INT 25
37025: PUSH
37026: LD_INT 16
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: LIST
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PPUSH
37042: CALL_OW 72
37046: UNION
37047: ST_TO_ADDR
// if tmp then
37048: LD_VAR 0 4
37052: IFFALSE 37132
// begin tmp := ShrinkArray ( tmp , 3 ) ;
37054: LD_ADDR_VAR 0 4
37058: PUSH
37059: LD_VAR 0 4
37063: PPUSH
37064: LD_INT 3
37066: PPUSH
37067: CALL 80425 0 2
37071: ST_TO_ADDR
// for j in tmp do
37072: LD_ADDR_VAR 0 2
37076: PUSH
37077: LD_VAR 0 4
37081: PUSH
37082: FOR_IN
37083: IFFALSE 37126
// begin if IsInUnit ( j ) then
37085: LD_VAR 0 2
37089: PPUSH
37090: CALL_OW 310
37094: IFFALSE 37105
// ComExit ( j ) ;
37096: LD_VAR 0 2
37100: PPUSH
37101: CALL 80508 0 1
// AddComCollect ( j , x , y ) ;
37105: LD_VAR 0 2
37109: PPUSH
37110: LD_VAR 0 6
37114: PPUSH
37115: LD_VAR 0 7
37119: PPUSH
37120: CALL_OW 177
// end ;
37124: GO 37082
37126: POP
37127: POP
// exit ;
37128: POP
37129: POP
37130: GO 37359
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
37132: LD_ADDR_VAR 0 4
37136: PUSH
37137: LD_INT 22
37139: PUSH
37140: LD_VAR 0 5
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 91
37151: PUSH
37152: LD_VAR 0 8
37156: PUSH
37157: LD_INT 8
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: LIST
37164: PUSH
37165: LD_INT 2
37167: PUSH
37168: LD_INT 34
37170: PUSH
37171: LD_INT 12
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: PUSH
37178: LD_INT 34
37180: PUSH
37181: LD_INT 51
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 34
37190: PUSH
37191: LD_INT 32
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: LD_INT 34
37200: PUSH
37201: LD_INT 89
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: LIST
37212: LIST
37213: LIST
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: LIST
37219: PPUSH
37220: CALL_OW 69
37224: ST_TO_ADDR
// if tmp then
37225: LD_VAR 0 4
37229: IFFALSE 37355
// begin for j in tmp do
37231: LD_ADDR_VAR 0 2
37235: PUSH
37236: LD_VAR 0 4
37240: PUSH
37241: FOR_IN
37242: IFFALSE 37353
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
37244: LD_VAR 0 2
37248: PPUSH
37249: CALL_OW 262
37253: PUSH
37254: LD_INT 3
37256: EQUAL
37257: PUSH
37258: LD_VAR 0 2
37262: PPUSH
37263: CALL_OW 261
37267: PUSH
37268: LD_INT 20
37270: GREATER
37271: OR
37272: PUSH
37273: LD_VAR 0 2
37277: PPUSH
37278: CALL_OW 314
37282: NOT
37283: AND
37284: PUSH
37285: LD_VAR 0 2
37289: PPUSH
37290: CALL_OW 263
37294: PUSH
37295: LD_INT 1
37297: NONEQUAL
37298: PUSH
37299: LD_VAR 0 2
37303: PPUSH
37304: CALL_OW 311
37308: OR
37309: AND
37310: IFFALSE 37351
// begin ComCollect ( j , x , y ) ;
37312: LD_VAR 0 2
37316: PPUSH
37317: LD_VAR 0 6
37321: PPUSH
37322: LD_VAR 0 7
37326: PPUSH
37327: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
37331: LD_VAR 0 2
37335: PPUSH
37336: LD_VAR 0 8
37340: PPUSH
37341: CALL_OW 172
// exit ;
37345: POP
37346: POP
37347: POP
37348: POP
37349: GO 37359
// end ;
37351: GO 37241
37353: POP
37354: POP
// end ; end ;
37355: GO 36730
37357: POP
37358: POP
// end ; end_of_file
37359: PPOPN 9
37361: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
37362: LD_VAR 0 1
37366: PUSH
37367: LD_INT 200
37369: DOUBLE
37370: GREATEREQUAL
37371: IFFALSE 37379
37373: LD_INT 299
37375: DOUBLE
37376: LESSEQUAL
37377: IFTRUE 37381
37379: GO 37413
37381: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
37382: LD_VAR 0 1
37386: PPUSH
37387: LD_VAR 0 2
37391: PPUSH
37392: LD_VAR 0 3
37396: PPUSH
37397: LD_VAR 0 4
37401: PPUSH
37402: LD_VAR 0 5
37406: PPUSH
37407: CALL 37901 0 5
37411: GO 37490
37413: LD_INT 300
37415: DOUBLE
37416: GREATEREQUAL
37417: IFFALSE 37425
37419: LD_INT 399
37421: DOUBLE
37422: LESSEQUAL
37423: IFTRUE 37427
37425: GO 37489
37427: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
37428: LD_VAR 0 1
37432: PPUSH
37433: LD_VAR 0 2
37437: PPUSH
37438: LD_VAR 0 3
37442: PPUSH
37443: LD_VAR 0 4
37447: PPUSH
37448: LD_VAR 0 5
37452: PPUSH
37453: LD_VAR 0 6
37457: PPUSH
37458: LD_VAR 0 7
37462: PPUSH
37463: LD_VAR 0 8
37467: PPUSH
37468: LD_VAR 0 9
37472: PPUSH
37473: LD_VAR 0 10
37477: PPUSH
37478: LD_VAR 0 11
37482: PPUSH
37483: CALL 34063 0 11
37487: GO 37490
37489: POP
// end ;
37490: PPOPN 11
37492: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
37493: LD_VAR 0 1
37497: PPUSH
37498: LD_VAR 0 2
37502: PPUSH
37503: LD_VAR 0 3
37507: PPUSH
37508: LD_VAR 0 4
37512: PPUSH
37513: LD_VAR 0 5
37517: PPUSH
37518: CALL 37637 0 5
// end ; end_of_file
37522: PPOPN 5
37524: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
37525: LD_INT 0
37527: PPUSH
37528: PPUSH
37529: PPUSH
37530: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
37531: LD_VAR 0 1
37535: PPUSH
37536: CALL_OW 264
37540: PUSH
37541: LD_INT 91
37543: EQUAL
37544: IFFALSE 37616
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
37546: LD_INT 68
37548: PPUSH
37549: LD_VAR 0 1
37553: PPUSH
37554: CALL_OW 255
37558: PPUSH
37559: CALL_OW 321
37563: PUSH
37564: LD_INT 2
37566: EQUAL
37567: IFFALSE 37579
// eff := 70 else
37569: LD_ADDR_VAR 0 4
37573: PUSH
37574: LD_INT 70
37576: ST_TO_ADDR
37577: GO 37587
// eff := 30 ;
37579: LD_ADDR_VAR 0 4
37583: PUSH
37584: LD_INT 30
37586: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
37587: LD_VAR 0 1
37591: PPUSH
37592: CALL_OW 250
37596: PPUSH
37597: LD_VAR 0 1
37601: PPUSH
37602: CALL_OW 251
37606: PPUSH
37607: LD_VAR 0 4
37611: PPUSH
37612: CALL_OW 495
// end ; end ;
37616: LD_VAR 0 2
37620: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
37621: LD_INT 0
37623: PPUSH
// end ;
37624: LD_VAR 0 4
37628: RET
// export function SOS_Command ( cmd ) ; begin
37629: LD_INT 0
37631: PPUSH
// end ;
37632: LD_VAR 0 2
37636: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
37637: LD_INT 0
37639: PPUSH
// end ;
37640: LD_VAR 0 6
37644: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
37645: LD_INT 0
37647: PPUSH
37648: PPUSH
// if not vehicle or not factory then
37649: LD_VAR 0 1
37653: NOT
37654: PUSH
37655: LD_VAR 0 2
37659: NOT
37660: OR
37661: IFFALSE 37665
// exit ;
37663: GO 37896
// if factoryWaypoints >= factory then
37665: LD_EXP 117
37669: PUSH
37670: LD_VAR 0 2
37674: GREATEREQUAL
37675: IFFALSE 37896
// if factoryWaypoints [ factory ] then
37677: LD_EXP 117
37681: PUSH
37682: LD_VAR 0 2
37686: ARRAY
37687: IFFALSE 37896
// begin if GetControl ( vehicle ) = control_manual then
37689: LD_VAR 0 1
37693: PPUSH
37694: CALL_OW 263
37698: PUSH
37699: LD_INT 1
37701: EQUAL
37702: IFFALSE 37783
// begin driver := IsDrivenBy ( vehicle ) ;
37704: LD_ADDR_VAR 0 4
37708: PUSH
37709: LD_VAR 0 1
37713: PPUSH
37714: CALL_OW 311
37718: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37719: LD_VAR 0 4
37723: PPUSH
37724: LD_EXP 117
37728: PUSH
37729: LD_VAR 0 2
37733: ARRAY
37734: PUSH
37735: LD_INT 3
37737: ARRAY
37738: PPUSH
37739: LD_EXP 117
37743: PUSH
37744: LD_VAR 0 2
37748: ARRAY
37749: PUSH
37750: LD_INT 4
37752: ARRAY
37753: PPUSH
37754: CALL_OW 171
// AddComExitVehicle ( driver ) ;
37758: LD_VAR 0 4
37762: PPUSH
37763: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
37767: LD_VAR 0 4
37771: PPUSH
37772: LD_VAR 0 2
37776: PPUSH
37777: CALL_OW 180
// end else
37781: GO 37896
// if GetControl ( vehicle ) = control_remote then
37783: LD_VAR 0 1
37787: PPUSH
37788: CALL_OW 263
37792: PUSH
37793: LD_INT 2
37795: EQUAL
37796: IFFALSE 37857
// begin wait ( 0 0$2 ) ;
37798: LD_INT 70
37800: PPUSH
37801: CALL_OW 67
// if Connect ( vehicle ) then
37805: LD_VAR 0 1
37809: PPUSH
37810: CALL 50727 0 1
37814: IFFALSE 37855
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37816: LD_VAR 0 1
37820: PPUSH
37821: LD_EXP 117
37825: PUSH
37826: LD_VAR 0 2
37830: ARRAY
37831: PUSH
37832: LD_INT 3
37834: ARRAY
37835: PPUSH
37836: LD_EXP 117
37840: PUSH
37841: LD_VAR 0 2
37845: ARRAY
37846: PUSH
37847: LD_INT 4
37849: ARRAY
37850: PPUSH
37851: CALL_OW 171
// end else
37855: GO 37896
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
37857: LD_VAR 0 1
37861: PPUSH
37862: LD_EXP 117
37866: PUSH
37867: LD_VAR 0 2
37871: ARRAY
37872: PUSH
37873: LD_INT 3
37875: ARRAY
37876: PPUSH
37877: LD_EXP 117
37881: PUSH
37882: LD_VAR 0 2
37886: ARRAY
37887: PUSH
37888: LD_INT 4
37890: ARRAY
37891: PPUSH
37892: CALL_OW 171
// end ; end ;
37896: LD_VAR 0 3
37900: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
37901: LD_INT 0
37903: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
37904: LD_VAR 0 1
37908: PUSH
37909: LD_INT 250
37911: EQUAL
37912: PUSH
37913: LD_VAR 0 2
37917: PPUSH
37918: CALL_OW 264
37922: PUSH
37923: LD_INT 81
37925: EQUAL
37926: AND
37927: IFFALSE 37948
// MinerPlaceMine ( unit , x , y ) ;
37929: LD_VAR 0 2
37933: PPUSH
37934: LD_VAR 0 4
37938: PPUSH
37939: LD_VAR 0 5
37943: PPUSH
37944: CALL 40938 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
37948: LD_VAR 0 1
37952: PUSH
37953: LD_INT 251
37955: EQUAL
37956: PUSH
37957: LD_VAR 0 2
37961: PPUSH
37962: CALL_OW 264
37966: PUSH
37967: LD_INT 81
37969: EQUAL
37970: AND
37971: IFFALSE 37992
// MinerDetonateMine ( unit , x , y ) ;
37973: LD_VAR 0 2
37977: PPUSH
37978: LD_VAR 0 4
37982: PPUSH
37983: LD_VAR 0 5
37987: PPUSH
37988: CALL 41213 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
37992: LD_VAR 0 1
37996: PUSH
37997: LD_INT 252
37999: EQUAL
38000: PUSH
38001: LD_VAR 0 2
38005: PPUSH
38006: CALL_OW 264
38010: PUSH
38011: LD_INT 81
38013: EQUAL
38014: AND
38015: IFFALSE 38036
// MinerCreateMinefield ( unit , x , y ) ;
38017: LD_VAR 0 2
38021: PPUSH
38022: LD_VAR 0 4
38026: PPUSH
38027: LD_VAR 0 5
38031: PPUSH
38032: CALL 41630 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
38036: LD_VAR 0 1
38040: PUSH
38041: LD_INT 253
38043: EQUAL
38044: PUSH
38045: LD_VAR 0 2
38049: PPUSH
38050: CALL_OW 257
38054: PUSH
38055: LD_INT 5
38057: EQUAL
38058: AND
38059: IFFALSE 38080
// ComBinocular ( unit , x , y ) ;
38061: LD_VAR 0 2
38065: PPUSH
38066: LD_VAR 0 4
38070: PPUSH
38071: LD_VAR 0 5
38075: PPUSH
38076: CALL 41999 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
38080: LD_VAR 0 1
38084: PUSH
38085: LD_INT 254
38087: EQUAL
38088: PUSH
38089: LD_VAR 0 2
38093: PPUSH
38094: CALL_OW 264
38098: PUSH
38099: LD_INT 99
38101: EQUAL
38102: AND
38103: PUSH
38104: LD_VAR 0 3
38108: PPUSH
38109: CALL_OW 263
38113: PUSH
38114: LD_INT 3
38116: EQUAL
38117: AND
38118: IFFALSE 38134
// HackDestroyVehicle ( unit , selectedUnit ) ;
38120: LD_VAR 0 2
38124: PPUSH
38125: LD_VAR 0 3
38129: PPUSH
38130: CALL 40302 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
38134: LD_VAR 0 1
38138: PUSH
38139: LD_INT 255
38141: EQUAL
38142: PUSH
38143: LD_VAR 0 2
38147: PPUSH
38148: CALL_OW 264
38152: PUSH
38153: LD_INT 14
38155: PUSH
38156: LD_INT 53
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: IN
38163: AND
38164: PUSH
38165: LD_VAR 0 4
38169: PPUSH
38170: LD_VAR 0 5
38174: PPUSH
38175: CALL_OW 488
38179: AND
38180: IFFALSE 38204
// CutTreeXYR ( unit , x , y , 12 ) ;
38182: LD_VAR 0 2
38186: PPUSH
38187: LD_VAR 0 4
38191: PPUSH
38192: LD_VAR 0 5
38196: PPUSH
38197: LD_INT 12
38199: PPUSH
38200: CALL 38299 0 4
// if cmd = 256 then
38204: LD_VAR 0 1
38208: PUSH
38209: LD_INT 256
38211: EQUAL
38212: IFFALSE 38233
// SetFactoryWaypoint ( unit , x , y ) ;
38214: LD_VAR 0 2
38218: PPUSH
38219: LD_VAR 0 4
38223: PPUSH
38224: LD_VAR 0 5
38228: PPUSH
38229: CALL 36051 0 3
// if cmd = 257 then
38233: LD_VAR 0 1
38237: PUSH
38238: LD_INT 257
38240: EQUAL
38241: IFFALSE 38262
// SetWarehouseGatheringPoint ( unit , x , y ) ;
38243: LD_VAR 0 2
38247: PPUSH
38248: LD_VAR 0 4
38252: PPUSH
38253: LD_VAR 0 5
38257: PPUSH
38258: CALL 36413 0 3
// if cmd = 258 then
38262: LD_VAR 0 1
38266: PUSH
38267: LD_INT 258
38269: EQUAL
38270: IFFALSE 38294
// BurnTreeXYR ( unit , x , y , 8 ) ;
38272: LD_VAR 0 2
38276: PPUSH
38277: LD_VAR 0 4
38281: PPUSH
38282: LD_VAR 0 5
38286: PPUSH
38287: LD_INT 8
38289: PPUSH
38290: CALL 38693 0 4
// end ;
38294: LD_VAR 0 6
38298: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
38299: LD_INT 0
38301: PPUSH
38302: PPUSH
38303: PPUSH
38304: PPUSH
38305: PPUSH
38306: PPUSH
38307: PPUSH
38308: PPUSH
38309: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
38310: LD_VAR 0 1
38314: PPUSH
38315: CALL_OW 302
38319: NOT
38320: PUSH
38321: LD_VAR 0 2
38325: PPUSH
38326: LD_VAR 0 3
38330: PPUSH
38331: CALL_OW 488
38335: NOT
38336: OR
38337: PUSH
38338: LD_VAR 0 4
38342: NOT
38343: OR
38344: IFFALSE 38348
// exit ;
38346: GO 38688
// list := [ ] ;
38348: LD_ADDR_VAR 0 13
38352: PUSH
38353: EMPTY
38354: ST_TO_ADDR
// if x - r < 0 then
38355: LD_VAR 0 2
38359: PUSH
38360: LD_VAR 0 4
38364: MINUS
38365: PUSH
38366: LD_INT 0
38368: LESS
38369: IFFALSE 38381
// min_x := 0 else
38371: LD_ADDR_VAR 0 7
38375: PUSH
38376: LD_INT 0
38378: ST_TO_ADDR
38379: GO 38397
// min_x := x - r ;
38381: LD_ADDR_VAR 0 7
38385: PUSH
38386: LD_VAR 0 2
38390: PUSH
38391: LD_VAR 0 4
38395: MINUS
38396: ST_TO_ADDR
// if y - r < 0 then
38397: LD_VAR 0 3
38401: PUSH
38402: LD_VAR 0 4
38406: MINUS
38407: PUSH
38408: LD_INT 0
38410: LESS
38411: IFFALSE 38423
// min_y := 0 else
38413: LD_ADDR_VAR 0 8
38417: PUSH
38418: LD_INT 0
38420: ST_TO_ADDR
38421: GO 38439
// min_y := y - r ;
38423: LD_ADDR_VAR 0 8
38427: PUSH
38428: LD_VAR 0 3
38432: PUSH
38433: LD_VAR 0 4
38437: MINUS
38438: ST_TO_ADDR
// max_x := x + r ;
38439: LD_ADDR_VAR 0 9
38443: PUSH
38444: LD_VAR 0 2
38448: PUSH
38449: LD_VAR 0 4
38453: PLUS
38454: ST_TO_ADDR
// max_y := y + r ;
38455: LD_ADDR_VAR 0 10
38459: PUSH
38460: LD_VAR 0 3
38464: PUSH
38465: LD_VAR 0 4
38469: PLUS
38470: ST_TO_ADDR
// for _x = min_x to max_x do
38471: LD_ADDR_VAR 0 11
38475: PUSH
38476: DOUBLE
38477: LD_VAR 0 7
38481: DEC
38482: ST_TO_ADDR
38483: LD_VAR 0 9
38487: PUSH
38488: FOR_TO
38489: IFFALSE 38606
// for _y = min_y to max_y do
38491: LD_ADDR_VAR 0 12
38495: PUSH
38496: DOUBLE
38497: LD_VAR 0 8
38501: DEC
38502: ST_TO_ADDR
38503: LD_VAR 0 10
38507: PUSH
38508: FOR_TO
38509: IFFALSE 38602
// begin if not ValidHex ( _x , _y ) then
38511: LD_VAR 0 11
38515: PPUSH
38516: LD_VAR 0 12
38520: PPUSH
38521: CALL_OW 488
38525: NOT
38526: IFFALSE 38530
// continue ;
38528: GO 38508
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
38530: LD_VAR 0 11
38534: PPUSH
38535: LD_VAR 0 12
38539: PPUSH
38540: CALL_OW 351
38544: PUSH
38545: LD_VAR 0 11
38549: PPUSH
38550: LD_VAR 0 12
38554: PPUSH
38555: CALL_OW 554
38559: AND
38560: IFFALSE 38600
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
38562: LD_ADDR_VAR 0 13
38566: PUSH
38567: LD_VAR 0 13
38571: PPUSH
38572: LD_VAR 0 13
38576: PUSH
38577: LD_INT 1
38579: PLUS
38580: PPUSH
38581: LD_VAR 0 11
38585: PUSH
38586: LD_VAR 0 12
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PPUSH
38595: CALL_OW 2
38599: ST_TO_ADDR
// end ;
38600: GO 38508
38602: POP
38603: POP
38604: GO 38488
38606: POP
38607: POP
// if not list then
38608: LD_VAR 0 13
38612: NOT
38613: IFFALSE 38617
// exit ;
38615: GO 38688
// for i in list do
38617: LD_ADDR_VAR 0 6
38621: PUSH
38622: LD_VAR 0 13
38626: PUSH
38627: FOR_IN
38628: IFFALSE 38686
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
38630: LD_VAR 0 1
38634: PPUSH
38635: LD_STRING M
38637: PUSH
38638: LD_VAR 0 6
38642: PUSH
38643: LD_INT 1
38645: ARRAY
38646: PUSH
38647: LD_VAR 0 6
38651: PUSH
38652: LD_INT 2
38654: ARRAY
38655: PUSH
38656: LD_INT 0
38658: PUSH
38659: LD_INT 0
38661: PUSH
38662: LD_INT 0
38664: PUSH
38665: LD_INT 0
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: PUSH
38677: EMPTY
38678: LIST
38679: PPUSH
38680: CALL_OW 447
38684: GO 38627
38686: POP
38687: POP
// end ;
38688: LD_VAR 0 5
38692: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
38693: LD_INT 0
38695: PPUSH
38696: PPUSH
38697: PPUSH
38698: PPUSH
38699: PPUSH
38700: PPUSH
38701: PPUSH
38702: PPUSH
38703: PPUSH
38704: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
38705: LD_VAR 0 1
38709: PPUSH
38710: CALL_OW 302
38714: NOT
38715: PUSH
38716: LD_VAR 0 2
38720: PPUSH
38721: LD_VAR 0 3
38725: PPUSH
38726: CALL_OW 488
38730: NOT
38731: OR
38732: PUSH
38733: LD_VAR 0 4
38737: NOT
38738: OR
38739: IFFALSE 38743
// exit ;
38741: GO 39256
// list := [ ] ;
38743: LD_ADDR_VAR 0 13
38747: PUSH
38748: EMPTY
38749: ST_TO_ADDR
// if x - r < 0 then
38750: LD_VAR 0 2
38754: PUSH
38755: LD_VAR 0 4
38759: MINUS
38760: PUSH
38761: LD_INT 0
38763: LESS
38764: IFFALSE 38776
// min_x := 0 else
38766: LD_ADDR_VAR 0 7
38770: PUSH
38771: LD_INT 0
38773: ST_TO_ADDR
38774: GO 38792
// min_x := x - r ;
38776: LD_ADDR_VAR 0 7
38780: PUSH
38781: LD_VAR 0 2
38785: PUSH
38786: LD_VAR 0 4
38790: MINUS
38791: ST_TO_ADDR
// if y - r < 0 then
38792: LD_VAR 0 3
38796: PUSH
38797: LD_VAR 0 4
38801: MINUS
38802: PUSH
38803: LD_INT 0
38805: LESS
38806: IFFALSE 38818
// min_y := 0 else
38808: LD_ADDR_VAR 0 8
38812: PUSH
38813: LD_INT 0
38815: ST_TO_ADDR
38816: GO 38834
// min_y := y - r ;
38818: LD_ADDR_VAR 0 8
38822: PUSH
38823: LD_VAR 0 3
38827: PUSH
38828: LD_VAR 0 4
38832: MINUS
38833: ST_TO_ADDR
// max_x := x + r ;
38834: LD_ADDR_VAR 0 9
38838: PUSH
38839: LD_VAR 0 2
38843: PUSH
38844: LD_VAR 0 4
38848: PLUS
38849: ST_TO_ADDR
// max_y := y + r ;
38850: LD_ADDR_VAR 0 10
38854: PUSH
38855: LD_VAR 0 3
38859: PUSH
38860: LD_VAR 0 4
38864: PLUS
38865: ST_TO_ADDR
// for _x = min_x to max_x do
38866: LD_ADDR_VAR 0 11
38870: PUSH
38871: DOUBLE
38872: LD_VAR 0 7
38876: DEC
38877: ST_TO_ADDR
38878: LD_VAR 0 9
38882: PUSH
38883: FOR_TO
38884: IFFALSE 39001
// for _y = min_y to max_y do
38886: LD_ADDR_VAR 0 12
38890: PUSH
38891: DOUBLE
38892: LD_VAR 0 8
38896: DEC
38897: ST_TO_ADDR
38898: LD_VAR 0 10
38902: PUSH
38903: FOR_TO
38904: IFFALSE 38997
// begin if not ValidHex ( _x , _y ) then
38906: LD_VAR 0 11
38910: PPUSH
38911: LD_VAR 0 12
38915: PPUSH
38916: CALL_OW 488
38920: NOT
38921: IFFALSE 38925
// continue ;
38923: GO 38903
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
38925: LD_VAR 0 11
38929: PPUSH
38930: LD_VAR 0 12
38934: PPUSH
38935: CALL_OW 351
38939: PUSH
38940: LD_VAR 0 11
38944: PPUSH
38945: LD_VAR 0 12
38949: PPUSH
38950: CALL_OW 554
38954: AND
38955: IFFALSE 38995
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
38957: LD_ADDR_VAR 0 13
38961: PUSH
38962: LD_VAR 0 13
38966: PPUSH
38967: LD_VAR 0 13
38971: PUSH
38972: LD_INT 1
38974: PLUS
38975: PPUSH
38976: LD_VAR 0 11
38980: PUSH
38981: LD_VAR 0 12
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PPUSH
38990: CALL_OW 2
38994: ST_TO_ADDR
// end ;
38995: GO 38903
38997: POP
38998: POP
38999: GO 38883
39001: POP
39002: POP
// if not list then
39003: LD_VAR 0 13
39007: NOT
39008: IFFALSE 39012
// exit ;
39010: GO 39256
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
39012: LD_ADDR_VAR 0 13
39016: PUSH
39017: LD_VAR 0 1
39021: PPUSH
39022: LD_VAR 0 13
39026: PPUSH
39027: LD_INT 1
39029: PPUSH
39030: LD_INT 1
39032: PPUSH
39033: CALL 47869 0 4
39037: ST_TO_ADDR
// ComStop ( flame ) ;
39038: LD_VAR 0 1
39042: PPUSH
39043: CALL_OW 141
// for i in list do
39047: LD_ADDR_VAR 0 6
39051: PUSH
39052: LD_VAR 0 13
39056: PUSH
39057: FOR_IN
39058: IFFALSE 39089
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
39060: LD_VAR 0 1
39064: PPUSH
39065: LD_VAR 0 6
39069: PUSH
39070: LD_INT 1
39072: ARRAY
39073: PPUSH
39074: LD_VAR 0 6
39078: PUSH
39079: LD_INT 2
39081: ARRAY
39082: PPUSH
39083: CALL_OW 176
39087: GO 39057
39089: POP
39090: POP
// repeat wait ( 0 0$1 ) ;
39091: LD_INT 35
39093: PPUSH
39094: CALL_OW 67
// task := GetTaskList ( flame ) ;
39098: LD_ADDR_VAR 0 14
39102: PUSH
39103: LD_VAR 0 1
39107: PPUSH
39108: CALL_OW 437
39112: ST_TO_ADDR
// if not task then
39113: LD_VAR 0 14
39117: NOT
39118: IFFALSE 39122
// exit ;
39120: GO 39256
// if task [ 1 ] [ 1 ] <> | then
39122: LD_VAR 0 14
39126: PUSH
39127: LD_INT 1
39129: ARRAY
39130: PUSH
39131: LD_INT 1
39133: ARRAY
39134: PUSH
39135: LD_STRING |
39137: NONEQUAL
39138: IFFALSE 39142
// exit ;
39140: GO 39256
// _x := task [ 1 ] [ 2 ] ;
39142: LD_ADDR_VAR 0 11
39146: PUSH
39147: LD_VAR 0 14
39151: PUSH
39152: LD_INT 1
39154: ARRAY
39155: PUSH
39156: LD_INT 2
39158: ARRAY
39159: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
39160: LD_ADDR_VAR 0 12
39164: PUSH
39165: LD_VAR 0 14
39169: PUSH
39170: LD_INT 1
39172: ARRAY
39173: PUSH
39174: LD_INT 3
39176: ARRAY
39177: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
39178: LD_VAR 0 11
39182: PPUSH
39183: LD_VAR 0 12
39187: PPUSH
39188: CALL_OW 351
39192: NOT
39193: PUSH
39194: LD_VAR 0 11
39198: PPUSH
39199: LD_VAR 0 12
39203: PPUSH
39204: CALL_OW 554
39208: NOT
39209: OR
39210: IFFALSE 39244
// begin task := Delete ( task , 1 ) ;
39212: LD_ADDR_VAR 0 14
39216: PUSH
39217: LD_VAR 0 14
39221: PPUSH
39222: LD_INT 1
39224: PPUSH
39225: CALL_OW 3
39229: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
39230: LD_VAR 0 1
39234: PPUSH
39235: LD_VAR 0 14
39239: PPUSH
39240: CALL_OW 446
// end ; until not HasTask ( flame ) ;
39244: LD_VAR 0 1
39248: PPUSH
39249: CALL_OW 314
39253: NOT
39254: IFFALSE 39091
// end ;
39256: LD_VAR 0 5
39260: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
39261: LD_EXP 120
39265: NOT
39266: IFFALSE 39316
39268: GO 39270
39270: DISABLE
// begin initHack := true ;
39271: LD_ADDR_EXP 120
39275: PUSH
39276: LD_INT 1
39278: ST_TO_ADDR
// hackTanks := [ ] ;
39279: LD_ADDR_EXP 121
39283: PUSH
39284: EMPTY
39285: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
39286: LD_ADDR_EXP 122
39290: PUSH
39291: EMPTY
39292: ST_TO_ADDR
// hackLimit := 3 ;
39293: LD_ADDR_EXP 123
39297: PUSH
39298: LD_INT 3
39300: ST_TO_ADDR
// hackDist := 12 ;
39301: LD_ADDR_EXP 124
39305: PUSH
39306: LD_INT 12
39308: ST_TO_ADDR
// hackCounter := [ ] ;
39309: LD_ADDR_EXP 125
39313: PUSH
39314: EMPTY
39315: ST_TO_ADDR
// end ;
39316: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
39317: LD_EXP 120
39321: PUSH
39322: LD_INT 34
39324: PUSH
39325: LD_INT 99
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PPUSH
39332: CALL_OW 69
39336: AND
39337: IFFALSE 39590
39339: GO 39341
39341: DISABLE
39342: LD_INT 0
39344: PPUSH
39345: PPUSH
// begin enable ;
39346: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
39347: LD_ADDR_VAR 0 1
39351: PUSH
39352: LD_INT 34
39354: PUSH
39355: LD_INT 99
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PPUSH
39362: CALL_OW 69
39366: PUSH
39367: FOR_IN
39368: IFFALSE 39588
// begin if not i in hackTanks then
39370: LD_VAR 0 1
39374: PUSH
39375: LD_EXP 121
39379: IN
39380: NOT
39381: IFFALSE 39464
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
39383: LD_ADDR_EXP 121
39387: PUSH
39388: LD_EXP 121
39392: PPUSH
39393: LD_EXP 121
39397: PUSH
39398: LD_INT 1
39400: PLUS
39401: PPUSH
39402: LD_VAR 0 1
39406: PPUSH
39407: CALL_OW 1
39411: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
39412: LD_ADDR_EXP 122
39416: PUSH
39417: LD_EXP 122
39421: PPUSH
39422: LD_EXP 122
39426: PUSH
39427: LD_INT 1
39429: PLUS
39430: PPUSH
39431: EMPTY
39432: PPUSH
39433: CALL_OW 1
39437: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
39438: LD_ADDR_EXP 125
39442: PUSH
39443: LD_EXP 125
39447: PPUSH
39448: LD_EXP 125
39452: PUSH
39453: LD_INT 1
39455: PLUS
39456: PPUSH
39457: EMPTY
39458: PPUSH
39459: CALL_OW 1
39463: ST_TO_ADDR
// end ; if not IsOk ( i ) then
39464: LD_VAR 0 1
39468: PPUSH
39469: CALL_OW 302
39473: NOT
39474: IFFALSE 39487
// begin HackUnlinkAll ( i ) ;
39476: LD_VAR 0 1
39480: PPUSH
39481: CALL 39593 0 1
// continue ;
39485: GO 39367
// end ; HackCheckCapturedStatus ( i ) ;
39487: LD_VAR 0 1
39491: PPUSH
39492: CALL 40036 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
39496: LD_ADDR_VAR 0 2
39500: PUSH
39501: LD_INT 81
39503: PUSH
39504: LD_VAR 0 1
39508: PPUSH
39509: CALL_OW 255
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 33
39520: PUSH
39521: LD_INT 3
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 91
39530: PUSH
39531: LD_VAR 0 1
39535: PUSH
39536: LD_EXP 124
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 50
39548: PUSH
39549: EMPTY
39550: LIST
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: PPUSH
39558: CALL_OW 69
39562: ST_TO_ADDR
// if not tmp then
39563: LD_VAR 0 2
39567: NOT
39568: IFFALSE 39572
// continue ;
39570: GO 39367
// HackLink ( i , tmp ) ;
39572: LD_VAR 0 1
39576: PPUSH
39577: LD_VAR 0 2
39581: PPUSH
39582: CALL 39729 0 2
// end ;
39586: GO 39367
39588: POP
39589: POP
// end ;
39590: PPOPN 2
39592: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
39593: LD_INT 0
39595: PPUSH
39596: PPUSH
39597: PPUSH
// if not hack in hackTanks then
39598: LD_VAR 0 1
39602: PUSH
39603: LD_EXP 121
39607: IN
39608: NOT
39609: IFFALSE 39613
// exit ;
39611: GO 39724
// index := GetElementIndex ( hackTanks , hack ) ;
39613: LD_ADDR_VAR 0 4
39617: PUSH
39618: LD_EXP 121
39622: PPUSH
39623: LD_VAR 0 1
39627: PPUSH
39628: CALL 47166 0 2
39632: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
39633: LD_EXP 122
39637: PUSH
39638: LD_VAR 0 4
39642: ARRAY
39643: IFFALSE 39724
// begin for i in hackTanksCaptured [ index ] do
39645: LD_ADDR_VAR 0 3
39649: PUSH
39650: LD_EXP 122
39654: PUSH
39655: LD_VAR 0 4
39659: ARRAY
39660: PUSH
39661: FOR_IN
39662: IFFALSE 39688
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
39664: LD_VAR 0 3
39668: PUSH
39669: LD_INT 1
39671: ARRAY
39672: PPUSH
39673: LD_VAR 0 3
39677: PUSH
39678: LD_INT 2
39680: ARRAY
39681: PPUSH
39682: CALL_OW 235
39686: GO 39661
39688: POP
39689: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
39690: LD_ADDR_EXP 122
39694: PUSH
39695: LD_EXP 122
39699: PPUSH
39700: LD_VAR 0 4
39704: PPUSH
39705: EMPTY
39706: PPUSH
39707: CALL_OW 1
39711: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
39712: LD_VAR 0 1
39716: PPUSH
39717: LD_INT 0
39719: PPUSH
39720: CALL_OW 505
// end ; end ;
39724: LD_VAR 0 2
39728: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
39729: LD_INT 0
39731: PPUSH
39732: PPUSH
39733: PPUSH
// if not hack in hackTanks or not vehicles then
39734: LD_VAR 0 1
39738: PUSH
39739: LD_EXP 121
39743: IN
39744: NOT
39745: PUSH
39746: LD_VAR 0 2
39750: NOT
39751: OR
39752: IFFALSE 39756
// exit ;
39754: GO 40031
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
39756: LD_ADDR_VAR 0 2
39760: PUSH
39761: LD_VAR 0 1
39765: PPUSH
39766: LD_VAR 0 2
39770: PPUSH
39771: LD_INT 1
39773: PPUSH
39774: LD_INT 1
39776: PPUSH
39777: CALL 47816 0 4
39781: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
39782: LD_ADDR_VAR 0 5
39786: PUSH
39787: LD_EXP 121
39791: PPUSH
39792: LD_VAR 0 1
39796: PPUSH
39797: CALL 47166 0 2
39801: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
39802: LD_EXP 122
39806: PUSH
39807: LD_VAR 0 5
39811: ARRAY
39812: PUSH
39813: LD_EXP 123
39817: LESS
39818: IFFALSE 40007
// begin for i := 1 to vehicles do
39820: LD_ADDR_VAR 0 4
39824: PUSH
39825: DOUBLE
39826: LD_INT 1
39828: DEC
39829: ST_TO_ADDR
39830: LD_VAR 0 2
39834: PUSH
39835: FOR_TO
39836: IFFALSE 40005
// begin if hackTanksCaptured [ index ] = hackLimit then
39838: LD_EXP 122
39842: PUSH
39843: LD_VAR 0 5
39847: ARRAY
39848: PUSH
39849: LD_EXP 123
39853: EQUAL
39854: IFFALSE 39858
// break ;
39856: GO 40005
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
39858: LD_ADDR_EXP 125
39862: PUSH
39863: LD_EXP 125
39867: PPUSH
39868: LD_VAR 0 5
39872: PPUSH
39873: LD_EXP 125
39877: PUSH
39878: LD_VAR 0 5
39882: ARRAY
39883: PUSH
39884: LD_INT 1
39886: PLUS
39887: PPUSH
39888: CALL_OW 1
39892: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
39893: LD_ADDR_EXP 122
39897: PUSH
39898: LD_EXP 122
39902: PPUSH
39903: LD_VAR 0 5
39907: PUSH
39908: LD_EXP 122
39912: PUSH
39913: LD_VAR 0 5
39917: ARRAY
39918: PUSH
39919: LD_INT 1
39921: PLUS
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PPUSH
39927: LD_VAR 0 2
39931: PUSH
39932: LD_VAR 0 4
39936: ARRAY
39937: PUSH
39938: LD_VAR 0 2
39942: PUSH
39943: LD_VAR 0 4
39947: ARRAY
39948: PPUSH
39949: CALL_OW 255
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PPUSH
39958: CALL 47381 0 3
39962: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
39963: LD_VAR 0 2
39967: PUSH
39968: LD_VAR 0 4
39972: ARRAY
39973: PPUSH
39974: LD_VAR 0 1
39978: PPUSH
39979: CALL_OW 255
39983: PPUSH
39984: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
39988: LD_VAR 0 2
39992: PUSH
39993: LD_VAR 0 4
39997: ARRAY
39998: PPUSH
39999: CALL_OW 141
// end ;
40003: GO 39835
40005: POP
40006: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
40007: LD_VAR 0 1
40011: PPUSH
40012: LD_EXP 122
40016: PUSH
40017: LD_VAR 0 5
40021: ARRAY
40022: PUSH
40023: LD_INT 0
40025: PLUS
40026: PPUSH
40027: CALL_OW 505
// end ;
40031: LD_VAR 0 3
40035: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
40036: LD_INT 0
40038: PPUSH
40039: PPUSH
40040: PPUSH
40041: PPUSH
// if not hack in hackTanks then
40042: LD_VAR 0 1
40046: PUSH
40047: LD_EXP 121
40051: IN
40052: NOT
40053: IFFALSE 40057
// exit ;
40055: GO 40297
// index := GetElementIndex ( hackTanks , hack ) ;
40057: LD_ADDR_VAR 0 4
40061: PUSH
40062: LD_EXP 121
40066: PPUSH
40067: LD_VAR 0 1
40071: PPUSH
40072: CALL 47166 0 2
40076: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
40077: LD_ADDR_VAR 0 3
40081: PUSH
40082: DOUBLE
40083: LD_EXP 122
40087: PUSH
40088: LD_VAR 0 4
40092: ARRAY
40093: INC
40094: ST_TO_ADDR
40095: LD_INT 1
40097: PUSH
40098: FOR_DOWNTO
40099: IFFALSE 40271
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
40101: LD_ADDR_VAR 0 5
40105: PUSH
40106: LD_EXP 122
40110: PUSH
40111: LD_VAR 0 4
40115: ARRAY
40116: PUSH
40117: LD_VAR 0 3
40121: ARRAY
40122: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
40123: LD_VAR 0 5
40127: PUSH
40128: LD_INT 1
40130: ARRAY
40131: PPUSH
40132: CALL_OW 302
40136: NOT
40137: PUSH
40138: LD_VAR 0 5
40142: PUSH
40143: LD_INT 1
40145: ARRAY
40146: PPUSH
40147: CALL_OW 255
40151: PUSH
40152: LD_VAR 0 1
40156: PPUSH
40157: CALL_OW 255
40161: NONEQUAL
40162: OR
40163: IFFALSE 40269
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
40165: LD_VAR 0 5
40169: PUSH
40170: LD_INT 1
40172: ARRAY
40173: PPUSH
40174: CALL_OW 305
40178: PUSH
40179: LD_VAR 0 5
40183: PUSH
40184: LD_INT 1
40186: ARRAY
40187: PPUSH
40188: CALL_OW 255
40192: PUSH
40193: LD_VAR 0 1
40197: PPUSH
40198: CALL_OW 255
40202: EQUAL
40203: AND
40204: IFFALSE 40228
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
40206: LD_VAR 0 5
40210: PUSH
40211: LD_INT 1
40213: ARRAY
40214: PPUSH
40215: LD_VAR 0 5
40219: PUSH
40220: LD_INT 2
40222: ARRAY
40223: PPUSH
40224: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
40228: LD_ADDR_EXP 122
40232: PUSH
40233: LD_EXP 122
40237: PPUSH
40238: LD_VAR 0 4
40242: PPUSH
40243: LD_EXP 122
40247: PUSH
40248: LD_VAR 0 4
40252: ARRAY
40253: PPUSH
40254: LD_VAR 0 3
40258: PPUSH
40259: CALL_OW 3
40263: PPUSH
40264: CALL_OW 1
40268: ST_TO_ADDR
// end ; end ;
40269: GO 40098
40271: POP
40272: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
40273: LD_VAR 0 1
40277: PPUSH
40278: LD_EXP 122
40282: PUSH
40283: LD_VAR 0 4
40287: ARRAY
40288: PUSH
40289: LD_INT 0
40291: PLUS
40292: PPUSH
40293: CALL_OW 505
// end ;
40297: LD_VAR 0 2
40301: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
40302: LD_INT 0
40304: PPUSH
40305: PPUSH
40306: PPUSH
40307: PPUSH
// if not hack in hackTanks then
40308: LD_VAR 0 1
40312: PUSH
40313: LD_EXP 121
40317: IN
40318: NOT
40319: IFFALSE 40323
// exit ;
40321: GO 40408
// index := GetElementIndex ( hackTanks , hack ) ;
40323: LD_ADDR_VAR 0 5
40327: PUSH
40328: LD_EXP 121
40332: PPUSH
40333: LD_VAR 0 1
40337: PPUSH
40338: CALL 47166 0 2
40342: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
40343: LD_ADDR_VAR 0 4
40347: PUSH
40348: DOUBLE
40349: LD_INT 1
40351: DEC
40352: ST_TO_ADDR
40353: LD_EXP 122
40357: PUSH
40358: LD_VAR 0 5
40362: ARRAY
40363: PUSH
40364: FOR_TO
40365: IFFALSE 40406
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
40367: LD_EXP 122
40371: PUSH
40372: LD_VAR 0 5
40376: ARRAY
40377: PUSH
40378: LD_VAR 0 4
40382: ARRAY
40383: PUSH
40384: LD_INT 1
40386: ARRAY
40387: PUSH
40388: LD_VAR 0 2
40392: EQUAL
40393: IFFALSE 40404
// KillUnit ( vehicle ) ;
40395: LD_VAR 0 2
40399: PPUSH
40400: CALL_OW 66
40404: GO 40364
40406: POP
40407: POP
// end ;
40408: LD_VAR 0 3
40412: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
40413: LD_EXP 126
40417: NOT
40418: IFFALSE 40453
40420: GO 40422
40422: DISABLE
// begin initMiner := true ;
40423: LD_ADDR_EXP 126
40427: PUSH
40428: LD_INT 1
40430: ST_TO_ADDR
// minersList := [ ] ;
40431: LD_ADDR_EXP 127
40435: PUSH
40436: EMPTY
40437: ST_TO_ADDR
// minerMinesList := [ ] ;
40438: LD_ADDR_EXP 128
40442: PUSH
40443: EMPTY
40444: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
40445: LD_ADDR_EXP 129
40449: PUSH
40450: LD_INT 5
40452: ST_TO_ADDR
// end ;
40453: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
40454: LD_EXP 126
40458: PUSH
40459: LD_INT 34
40461: PUSH
40462: LD_INT 81
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PPUSH
40469: CALL_OW 69
40473: AND
40474: IFFALSE 40935
40476: GO 40478
40478: DISABLE
40479: LD_INT 0
40481: PPUSH
40482: PPUSH
40483: PPUSH
40484: PPUSH
// begin enable ;
40485: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
40486: LD_ADDR_VAR 0 1
40490: PUSH
40491: LD_INT 34
40493: PUSH
40494: LD_INT 81
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PPUSH
40501: CALL_OW 69
40505: PUSH
40506: FOR_IN
40507: IFFALSE 40579
// begin if not i in minersList then
40509: LD_VAR 0 1
40513: PUSH
40514: LD_EXP 127
40518: IN
40519: NOT
40520: IFFALSE 40577
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
40522: LD_ADDR_EXP 127
40526: PUSH
40527: LD_EXP 127
40531: PPUSH
40532: LD_EXP 127
40536: PUSH
40537: LD_INT 1
40539: PLUS
40540: PPUSH
40541: LD_VAR 0 1
40545: PPUSH
40546: CALL_OW 1
40550: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
40551: LD_ADDR_EXP 128
40555: PUSH
40556: LD_EXP 128
40560: PPUSH
40561: LD_EXP 128
40565: PUSH
40566: LD_INT 1
40568: PLUS
40569: PPUSH
40570: EMPTY
40571: PPUSH
40572: CALL_OW 1
40576: ST_TO_ADDR
// end end ;
40577: GO 40506
40579: POP
40580: POP
// for i := minerMinesList downto 1 do
40581: LD_ADDR_VAR 0 1
40585: PUSH
40586: DOUBLE
40587: LD_EXP 128
40591: INC
40592: ST_TO_ADDR
40593: LD_INT 1
40595: PUSH
40596: FOR_DOWNTO
40597: IFFALSE 40933
// begin if IsLive ( minersList [ i ] ) then
40599: LD_EXP 127
40603: PUSH
40604: LD_VAR 0 1
40608: ARRAY
40609: PPUSH
40610: CALL_OW 300
40614: IFFALSE 40642
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
40616: LD_EXP 127
40620: PUSH
40621: LD_VAR 0 1
40625: ARRAY
40626: PPUSH
40627: LD_EXP 128
40631: PUSH
40632: LD_VAR 0 1
40636: ARRAY
40637: PPUSH
40638: CALL_OW 505
// if not minerMinesList [ i ] then
40642: LD_EXP 128
40646: PUSH
40647: LD_VAR 0 1
40651: ARRAY
40652: NOT
40653: IFFALSE 40657
// continue ;
40655: GO 40596
// for j := minerMinesList [ i ] downto 1 do
40657: LD_ADDR_VAR 0 2
40661: PUSH
40662: DOUBLE
40663: LD_EXP 128
40667: PUSH
40668: LD_VAR 0 1
40672: ARRAY
40673: INC
40674: ST_TO_ADDR
40675: LD_INT 1
40677: PUSH
40678: FOR_DOWNTO
40679: IFFALSE 40929
// begin side := GetSide ( minersList [ i ] ) ;
40681: LD_ADDR_VAR 0 3
40685: PUSH
40686: LD_EXP 127
40690: PUSH
40691: LD_VAR 0 1
40695: ARRAY
40696: PPUSH
40697: CALL_OW 255
40701: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
40702: LD_ADDR_VAR 0 4
40706: PUSH
40707: LD_EXP 128
40711: PUSH
40712: LD_VAR 0 1
40716: ARRAY
40717: PUSH
40718: LD_VAR 0 2
40722: ARRAY
40723: PUSH
40724: LD_INT 1
40726: ARRAY
40727: PPUSH
40728: LD_EXP 128
40732: PUSH
40733: LD_VAR 0 1
40737: ARRAY
40738: PUSH
40739: LD_VAR 0 2
40743: ARRAY
40744: PUSH
40745: LD_INT 2
40747: ARRAY
40748: PPUSH
40749: CALL_OW 428
40753: ST_TO_ADDR
// if not tmp then
40754: LD_VAR 0 4
40758: NOT
40759: IFFALSE 40763
// continue ;
40761: GO 40678
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
40763: LD_VAR 0 4
40767: PUSH
40768: LD_INT 81
40770: PUSH
40771: LD_VAR 0 3
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PPUSH
40780: CALL_OW 69
40784: IN
40785: PUSH
40786: LD_EXP 128
40790: PUSH
40791: LD_VAR 0 1
40795: ARRAY
40796: PUSH
40797: LD_VAR 0 2
40801: ARRAY
40802: PUSH
40803: LD_INT 1
40805: ARRAY
40806: PPUSH
40807: LD_EXP 128
40811: PUSH
40812: LD_VAR 0 1
40816: ARRAY
40817: PUSH
40818: LD_VAR 0 2
40822: ARRAY
40823: PUSH
40824: LD_INT 2
40826: ARRAY
40827: PPUSH
40828: CALL_OW 458
40832: AND
40833: IFFALSE 40927
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
40835: LD_EXP 128
40839: PUSH
40840: LD_VAR 0 1
40844: ARRAY
40845: PUSH
40846: LD_VAR 0 2
40850: ARRAY
40851: PUSH
40852: LD_INT 1
40854: ARRAY
40855: PPUSH
40856: LD_EXP 128
40860: PUSH
40861: LD_VAR 0 1
40865: ARRAY
40866: PUSH
40867: LD_VAR 0 2
40871: ARRAY
40872: PUSH
40873: LD_INT 2
40875: ARRAY
40876: PPUSH
40877: LD_VAR 0 3
40881: PPUSH
40882: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
40886: LD_ADDR_EXP 128
40890: PUSH
40891: LD_EXP 128
40895: PPUSH
40896: LD_VAR 0 1
40900: PPUSH
40901: LD_EXP 128
40905: PUSH
40906: LD_VAR 0 1
40910: ARRAY
40911: PPUSH
40912: LD_VAR 0 2
40916: PPUSH
40917: CALL_OW 3
40921: PPUSH
40922: CALL_OW 1
40926: ST_TO_ADDR
// end ; end ;
40927: GO 40678
40929: POP
40930: POP
// end ;
40931: GO 40596
40933: POP
40934: POP
// end ;
40935: PPOPN 4
40937: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
40938: LD_INT 0
40940: PPUSH
40941: PPUSH
// result := false ;
40942: LD_ADDR_VAR 0 4
40946: PUSH
40947: LD_INT 0
40949: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
40950: LD_VAR 0 1
40954: PPUSH
40955: CALL_OW 264
40959: PUSH
40960: LD_INT 81
40962: EQUAL
40963: NOT
40964: IFFALSE 40968
// exit ;
40966: GO 41208
// index := GetElementIndex ( minersList , unit ) ;
40968: LD_ADDR_VAR 0 5
40972: PUSH
40973: LD_EXP 127
40977: PPUSH
40978: LD_VAR 0 1
40982: PPUSH
40983: CALL 47166 0 2
40987: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
40988: LD_EXP 128
40992: PUSH
40993: LD_VAR 0 5
40997: ARRAY
40998: PUSH
40999: LD_EXP 129
41003: GREATEREQUAL
41004: IFFALSE 41008
// exit ;
41006: GO 41208
// ComMoveXY ( unit , x , y ) ;
41008: LD_VAR 0 1
41012: PPUSH
41013: LD_VAR 0 2
41017: PPUSH
41018: LD_VAR 0 3
41022: PPUSH
41023: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
41027: LD_INT 35
41029: PPUSH
41030: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
41034: LD_VAR 0 1
41038: PPUSH
41039: LD_VAR 0 2
41043: PPUSH
41044: LD_VAR 0 3
41048: PPUSH
41049: CALL 78907 0 3
41053: NOT
41054: PUSH
41055: LD_VAR 0 1
41059: PPUSH
41060: CALL_OW 314
41064: AND
41065: IFFALSE 41069
// exit ;
41067: GO 41208
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
41069: LD_VAR 0 2
41073: PPUSH
41074: LD_VAR 0 3
41078: PPUSH
41079: CALL_OW 428
41083: PUSH
41084: LD_VAR 0 1
41088: EQUAL
41089: PUSH
41090: LD_VAR 0 1
41094: PPUSH
41095: CALL_OW 314
41099: NOT
41100: AND
41101: IFFALSE 41027
// PlaySoundXY ( x , y , PlantMine ) ;
41103: LD_VAR 0 2
41107: PPUSH
41108: LD_VAR 0 3
41112: PPUSH
41113: LD_STRING PlantMine
41115: PPUSH
41116: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
41120: LD_VAR 0 2
41124: PPUSH
41125: LD_VAR 0 3
41129: PPUSH
41130: LD_VAR 0 1
41134: PPUSH
41135: CALL_OW 255
41139: PPUSH
41140: LD_INT 0
41142: PPUSH
41143: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
41147: LD_ADDR_EXP 128
41151: PUSH
41152: LD_EXP 128
41156: PPUSH
41157: LD_VAR 0 5
41161: PUSH
41162: LD_EXP 128
41166: PUSH
41167: LD_VAR 0 5
41171: ARRAY
41172: PUSH
41173: LD_INT 1
41175: PLUS
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PPUSH
41181: LD_VAR 0 2
41185: PUSH
41186: LD_VAR 0 3
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PPUSH
41195: CALL 47381 0 3
41199: ST_TO_ADDR
// result := true ;
41200: LD_ADDR_VAR 0 4
41204: PUSH
41205: LD_INT 1
41207: ST_TO_ADDR
// end ;
41208: LD_VAR 0 4
41212: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
41213: LD_INT 0
41215: PPUSH
41216: PPUSH
41217: PPUSH
// if not unit in minersList then
41218: LD_VAR 0 1
41222: PUSH
41223: LD_EXP 127
41227: IN
41228: NOT
41229: IFFALSE 41233
// exit ;
41231: GO 41625
// index := GetElementIndex ( minersList , unit ) ;
41233: LD_ADDR_VAR 0 6
41237: PUSH
41238: LD_EXP 127
41242: PPUSH
41243: LD_VAR 0 1
41247: PPUSH
41248: CALL 47166 0 2
41252: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
41253: LD_ADDR_VAR 0 5
41257: PUSH
41258: DOUBLE
41259: LD_EXP 128
41263: PUSH
41264: LD_VAR 0 6
41268: ARRAY
41269: INC
41270: ST_TO_ADDR
41271: LD_INT 1
41273: PUSH
41274: FOR_DOWNTO
41275: IFFALSE 41436
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
41277: LD_EXP 128
41281: PUSH
41282: LD_VAR 0 6
41286: ARRAY
41287: PUSH
41288: LD_VAR 0 5
41292: ARRAY
41293: PUSH
41294: LD_INT 1
41296: ARRAY
41297: PUSH
41298: LD_VAR 0 2
41302: EQUAL
41303: PUSH
41304: LD_EXP 128
41308: PUSH
41309: LD_VAR 0 6
41313: ARRAY
41314: PUSH
41315: LD_VAR 0 5
41319: ARRAY
41320: PUSH
41321: LD_INT 2
41323: ARRAY
41324: PUSH
41325: LD_VAR 0 3
41329: EQUAL
41330: AND
41331: IFFALSE 41434
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
41333: LD_EXP 128
41337: PUSH
41338: LD_VAR 0 6
41342: ARRAY
41343: PUSH
41344: LD_VAR 0 5
41348: ARRAY
41349: PUSH
41350: LD_INT 1
41352: ARRAY
41353: PPUSH
41354: LD_EXP 128
41358: PUSH
41359: LD_VAR 0 6
41363: ARRAY
41364: PUSH
41365: LD_VAR 0 5
41369: ARRAY
41370: PUSH
41371: LD_INT 2
41373: ARRAY
41374: PPUSH
41375: LD_VAR 0 1
41379: PPUSH
41380: CALL_OW 255
41384: PPUSH
41385: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
41389: LD_ADDR_EXP 128
41393: PUSH
41394: LD_EXP 128
41398: PPUSH
41399: LD_VAR 0 6
41403: PPUSH
41404: LD_EXP 128
41408: PUSH
41409: LD_VAR 0 6
41413: ARRAY
41414: PPUSH
41415: LD_VAR 0 5
41419: PPUSH
41420: CALL_OW 3
41424: PPUSH
41425: CALL_OW 1
41429: ST_TO_ADDR
// exit ;
41430: POP
41431: POP
41432: GO 41625
// end ; end ;
41434: GO 41274
41436: POP
41437: POP
// for i := minerMinesList [ index ] downto 1 do
41438: LD_ADDR_VAR 0 5
41442: PUSH
41443: DOUBLE
41444: LD_EXP 128
41448: PUSH
41449: LD_VAR 0 6
41453: ARRAY
41454: INC
41455: ST_TO_ADDR
41456: LD_INT 1
41458: PUSH
41459: FOR_DOWNTO
41460: IFFALSE 41623
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
41462: LD_EXP 128
41466: PUSH
41467: LD_VAR 0 6
41471: ARRAY
41472: PUSH
41473: LD_VAR 0 5
41477: ARRAY
41478: PUSH
41479: LD_INT 1
41481: ARRAY
41482: PPUSH
41483: LD_EXP 128
41487: PUSH
41488: LD_VAR 0 6
41492: ARRAY
41493: PUSH
41494: LD_VAR 0 5
41498: ARRAY
41499: PUSH
41500: LD_INT 2
41502: ARRAY
41503: PPUSH
41504: LD_VAR 0 2
41508: PPUSH
41509: LD_VAR 0 3
41513: PPUSH
41514: CALL_OW 298
41518: PUSH
41519: LD_INT 6
41521: LESS
41522: IFFALSE 41621
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
41524: LD_EXP 128
41528: PUSH
41529: LD_VAR 0 6
41533: ARRAY
41534: PUSH
41535: LD_VAR 0 5
41539: ARRAY
41540: PUSH
41541: LD_INT 1
41543: ARRAY
41544: PPUSH
41545: LD_EXP 128
41549: PUSH
41550: LD_VAR 0 6
41554: ARRAY
41555: PUSH
41556: LD_VAR 0 5
41560: ARRAY
41561: PUSH
41562: LD_INT 2
41564: ARRAY
41565: PPUSH
41566: LD_VAR 0 1
41570: PPUSH
41571: CALL_OW 255
41575: PPUSH
41576: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
41580: LD_ADDR_EXP 128
41584: PUSH
41585: LD_EXP 128
41589: PPUSH
41590: LD_VAR 0 6
41594: PPUSH
41595: LD_EXP 128
41599: PUSH
41600: LD_VAR 0 6
41604: ARRAY
41605: PPUSH
41606: LD_VAR 0 5
41610: PPUSH
41611: CALL_OW 3
41615: PPUSH
41616: CALL_OW 1
41620: ST_TO_ADDR
// end ; end ;
41621: GO 41459
41623: POP
41624: POP
// end ;
41625: LD_VAR 0 4
41629: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
41630: LD_INT 0
41632: PPUSH
41633: PPUSH
41634: PPUSH
41635: PPUSH
41636: PPUSH
41637: PPUSH
41638: PPUSH
41639: PPUSH
41640: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
41641: LD_VAR 0 1
41645: PPUSH
41646: CALL_OW 264
41650: PUSH
41651: LD_INT 81
41653: EQUAL
41654: NOT
41655: PUSH
41656: LD_VAR 0 1
41660: PUSH
41661: LD_EXP 127
41665: IN
41666: NOT
41667: OR
41668: IFFALSE 41672
// exit ;
41670: GO 41994
// index := GetElementIndex ( minersList , unit ) ;
41672: LD_ADDR_VAR 0 6
41676: PUSH
41677: LD_EXP 127
41681: PPUSH
41682: LD_VAR 0 1
41686: PPUSH
41687: CALL 47166 0 2
41691: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
41692: LD_ADDR_VAR 0 8
41696: PUSH
41697: LD_EXP 129
41701: PUSH
41702: LD_EXP 128
41706: PUSH
41707: LD_VAR 0 6
41711: ARRAY
41712: MINUS
41713: ST_TO_ADDR
// if not minesFreeAmount then
41714: LD_VAR 0 8
41718: NOT
41719: IFFALSE 41723
// exit ;
41721: GO 41994
// tmp := [ ] ;
41723: LD_ADDR_VAR 0 7
41727: PUSH
41728: EMPTY
41729: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
41730: LD_ADDR_VAR 0 5
41734: PUSH
41735: DOUBLE
41736: LD_INT 1
41738: DEC
41739: ST_TO_ADDR
41740: LD_VAR 0 8
41744: PUSH
41745: FOR_TO
41746: IFFALSE 41941
// begin _d := rand ( 0 , 5 ) ;
41748: LD_ADDR_VAR 0 11
41752: PUSH
41753: LD_INT 0
41755: PPUSH
41756: LD_INT 5
41758: PPUSH
41759: CALL_OW 12
41763: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
41764: LD_ADDR_VAR 0 12
41768: PUSH
41769: LD_INT 2
41771: PPUSH
41772: LD_INT 6
41774: PPUSH
41775: CALL_OW 12
41779: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
41780: LD_ADDR_VAR 0 9
41784: PUSH
41785: LD_VAR 0 2
41789: PPUSH
41790: LD_VAR 0 11
41794: PPUSH
41795: LD_VAR 0 12
41799: PPUSH
41800: CALL_OW 272
41804: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
41805: LD_ADDR_VAR 0 10
41809: PUSH
41810: LD_VAR 0 3
41814: PPUSH
41815: LD_VAR 0 11
41819: PPUSH
41820: LD_VAR 0 12
41824: PPUSH
41825: CALL_OW 273
41829: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
41830: LD_VAR 0 9
41834: PPUSH
41835: LD_VAR 0 10
41839: PPUSH
41840: CALL_OW 488
41844: PUSH
41845: LD_VAR 0 9
41849: PUSH
41850: LD_VAR 0 10
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_VAR 0 7
41863: IN
41864: NOT
41865: AND
41866: PUSH
41867: LD_VAR 0 9
41871: PPUSH
41872: LD_VAR 0 10
41876: PPUSH
41877: CALL_OW 458
41881: NOT
41882: AND
41883: IFFALSE 41925
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
41885: LD_ADDR_VAR 0 7
41889: PUSH
41890: LD_VAR 0 7
41894: PPUSH
41895: LD_VAR 0 7
41899: PUSH
41900: LD_INT 1
41902: PLUS
41903: PPUSH
41904: LD_VAR 0 9
41908: PUSH
41909: LD_VAR 0 10
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PPUSH
41918: CALL_OW 1
41922: ST_TO_ADDR
41923: GO 41939
// i := i - 1 ;
41925: LD_ADDR_VAR 0 5
41929: PUSH
41930: LD_VAR 0 5
41934: PUSH
41935: LD_INT 1
41937: MINUS
41938: ST_TO_ADDR
// end ;
41939: GO 41745
41941: POP
41942: POP
// for i in tmp do
41943: LD_ADDR_VAR 0 5
41947: PUSH
41948: LD_VAR 0 7
41952: PUSH
41953: FOR_IN
41954: IFFALSE 41992
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
41956: LD_VAR 0 1
41960: PPUSH
41961: LD_VAR 0 5
41965: PUSH
41966: LD_INT 1
41968: ARRAY
41969: PPUSH
41970: LD_VAR 0 5
41974: PUSH
41975: LD_INT 2
41977: ARRAY
41978: PPUSH
41979: CALL 40938 0 3
41983: NOT
41984: IFFALSE 41990
// exit ;
41986: POP
41987: POP
41988: GO 41994
41990: GO 41953
41992: POP
41993: POP
// end ;
41994: LD_VAR 0 4
41998: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
41999: LD_INT 0
42001: PPUSH
42002: PPUSH
42003: PPUSH
42004: PPUSH
42005: PPUSH
42006: PPUSH
42007: PPUSH
// if not GetClass ( unit ) = class_sniper then
42008: LD_VAR 0 1
42012: PPUSH
42013: CALL_OW 257
42017: PUSH
42018: LD_INT 5
42020: EQUAL
42021: NOT
42022: IFFALSE 42026
// exit ;
42024: GO 42414
// dist := 8 ;
42026: LD_ADDR_VAR 0 5
42030: PUSH
42031: LD_INT 8
42033: ST_TO_ADDR
// viewRange := 12 ;
42034: LD_ADDR_VAR 0 7
42038: PUSH
42039: LD_INT 12
42041: ST_TO_ADDR
// side := GetSide ( unit ) ;
42042: LD_ADDR_VAR 0 6
42046: PUSH
42047: LD_VAR 0 1
42051: PPUSH
42052: CALL_OW 255
42056: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
42057: LD_INT 61
42059: PPUSH
42060: LD_VAR 0 6
42064: PPUSH
42065: CALL_OW 321
42069: PUSH
42070: LD_INT 2
42072: EQUAL
42073: IFFALSE 42083
// viewRange := 16 ;
42075: LD_ADDR_VAR 0 7
42079: PUSH
42080: LD_INT 16
42082: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
42083: LD_VAR 0 1
42087: PPUSH
42088: LD_VAR 0 2
42092: PPUSH
42093: LD_VAR 0 3
42097: PPUSH
42098: CALL_OW 297
42102: PUSH
42103: LD_VAR 0 5
42107: GREATER
42108: IFFALSE 42187
// begin ComMoveXY ( unit , x , y ) ;
42110: LD_VAR 0 1
42114: PPUSH
42115: LD_VAR 0 2
42119: PPUSH
42120: LD_VAR 0 3
42124: PPUSH
42125: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
42129: LD_INT 35
42131: PPUSH
42132: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
42136: LD_VAR 0 1
42140: PPUSH
42141: LD_VAR 0 2
42145: PPUSH
42146: LD_VAR 0 3
42150: PPUSH
42151: CALL 78907 0 3
42155: NOT
42156: IFFALSE 42160
// exit ;
42158: GO 42414
// until GetDistUnitXY ( unit , x , y ) < dist ;
42160: LD_VAR 0 1
42164: PPUSH
42165: LD_VAR 0 2
42169: PPUSH
42170: LD_VAR 0 3
42174: PPUSH
42175: CALL_OW 297
42179: PUSH
42180: LD_VAR 0 5
42184: LESS
42185: IFFALSE 42129
// end ; ComTurnXY ( unit , x , y ) ;
42187: LD_VAR 0 1
42191: PPUSH
42192: LD_VAR 0 2
42196: PPUSH
42197: LD_VAR 0 3
42201: PPUSH
42202: CALL_OW 118
// wait ( 5 ) ;
42206: LD_INT 5
42208: PPUSH
42209: CALL_OW 67
// _d := GetDir ( unit ) ;
42213: LD_ADDR_VAR 0 10
42217: PUSH
42218: LD_VAR 0 1
42222: PPUSH
42223: CALL_OW 254
42227: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
42228: LD_ADDR_VAR 0 8
42232: PUSH
42233: LD_VAR 0 1
42237: PPUSH
42238: CALL_OW 250
42242: PPUSH
42243: LD_VAR 0 10
42247: PPUSH
42248: LD_VAR 0 5
42252: PPUSH
42253: CALL_OW 272
42257: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
42258: LD_ADDR_VAR 0 9
42262: PUSH
42263: LD_VAR 0 1
42267: PPUSH
42268: CALL_OW 251
42272: PPUSH
42273: LD_VAR 0 10
42277: PPUSH
42278: LD_VAR 0 5
42282: PPUSH
42283: CALL_OW 273
42287: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42288: LD_VAR 0 8
42292: PPUSH
42293: LD_VAR 0 9
42297: PPUSH
42298: CALL_OW 488
42302: NOT
42303: IFFALSE 42307
// exit ;
42305: GO 42414
// ComAnimCustom ( unit , 1 ) ;
42307: LD_VAR 0 1
42311: PPUSH
42312: LD_INT 1
42314: PPUSH
42315: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
42319: LD_VAR 0 8
42323: PPUSH
42324: LD_VAR 0 9
42328: PPUSH
42329: LD_VAR 0 6
42333: PPUSH
42334: LD_VAR 0 7
42338: PPUSH
42339: CALL_OW 330
// repeat wait ( 1 ) ;
42343: LD_INT 1
42345: PPUSH
42346: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
42350: LD_VAR 0 1
42354: PPUSH
42355: CALL_OW 316
42359: PUSH
42360: LD_VAR 0 1
42364: PPUSH
42365: CALL_OW 314
42369: OR
42370: PUSH
42371: LD_VAR 0 1
42375: PPUSH
42376: CALL_OW 302
42380: NOT
42381: OR
42382: PUSH
42383: LD_VAR 0 1
42387: PPUSH
42388: CALL_OW 301
42392: OR
42393: IFFALSE 42343
// RemoveSeeing ( _x , _y , side ) ;
42395: LD_VAR 0 8
42399: PPUSH
42400: LD_VAR 0 9
42404: PPUSH
42405: LD_VAR 0 6
42409: PPUSH
42410: CALL_OW 331
// end ; end_of_file
42414: LD_VAR 0 4
42418: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
42419: LD_INT 0
42421: PPUSH
42422: PPUSH
// if exist_mode then
42423: LD_VAR 0 2
42427: IFFALSE 42452
// unit := CreateCharacter ( prefix & ident ) else
42429: LD_ADDR_VAR 0 5
42433: PUSH
42434: LD_VAR 0 3
42438: PUSH
42439: LD_VAR 0 1
42443: STR
42444: PPUSH
42445: CALL_OW 34
42449: ST_TO_ADDR
42450: GO 42467
// unit := NewCharacter ( ident ) ;
42452: LD_ADDR_VAR 0 5
42456: PUSH
42457: LD_VAR 0 1
42461: PPUSH
42462: CALL_OW 25
42466: ST_TO_ADDR
// result := unit ;
42467: LD_ADDR_VAR 0 4
42471: PUSH
42472: LD_VAR 0 5
42476: ST_TO_ADDR
// end ;
42477: LD_VAR 0 4
42481: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
42482: LD_INT 0
42484: PPUSH
42485: PPUSH
// if not side or not nation then
42486: LD_VAR 0 1
42490: NOT
42491: PUSH
42492: LD_VAR 0 2
42496: NOT
42497: OR
42498: IFFALSE 42502
// exit ;
42500: GO 43270
// case nation of nation_american :
42502: LD_VAR 0 2
42506: PUSH
42507: LD_INT 1
42509: DOUBLE
42510: EQUAL
42511: IFTRUE 42515
42513: GO 42729
42515: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
42516: LD_ADDR_VAR 0 4
42520: PUSH
42521: LD_INT 35
42523: PUSH
42524: LD_INT 45
42526: PUSH
42527: LD_INT 46
42529: PUSH
42530: LD_INT 47
42532: PUSH
42533: LD_INT 82
42535: PUSH
42536: LD_INT 83
42538: PUSH
42539: LD_INT 84
42541: PUSH
42542: LD_INT 85
42544: PUSH
42545: LD_INT 86
42547: PUSH
42548: LD_INT 1
42550: PUSH
42551: LD_INT 2
42553: PUSH
42554: LD_INT 6
42556: PUSH
42557: LD_INT 15
42559: PUSH
42560: LD_INT 16
42562: PUSH
42563: LD_INT 7
42565: PUSH
42566: LD_INT 12
42568: PUSH
42569: LD_INT 13
42571: PUSH
42572: LD_INT 10
42574: PUSH
42575: LD_INT 14
42577: PUSH
42578: LD_INT 20
42580: PUSH
42581: LD_INT 21
42583: PUSH
42584: LD_INT 22
42586: PUSH
42587: LD_INT 25
42589: PUSH
42590: LD_INT 32
42592: PUSH
42593: LD_INT 27
42595: PUSH
42596: LD_INT 36
42598: PUSH
42599: LD_INT 69
42601: PUSH
42602: LD_INT 39
42604: PUSH
42605: LD_INT 34
42607: PUSH
42608: LD_INT 40
42610: PUSH
42611: LD_INT 48
42613: PUSH
42614: LD_INT 49
42616: PUSH
42617: LD_INT 50
42619: PUSH
42620: LD_INT 51
42622: PUSH
42623: LD_INT 52
42625: PUSH
42626: LD_INT 53
42628: PUSH
42629: LD_INT 54
42631: PUSH
42632: LD_INT 55
42634: PUSH
42635: LD_INT 56
42637: PUSH
42638: LD_INT 57
42640: PUSH
42641: LD_INT 58
42643: PUSH
42644: LD_INT 59
42646: PUSH
42647: LD_INT 60
42649: PUSH
42650: LD_INT 61
42652: PUSH
42653: LD_INT 62
42655: PUSH
42656: LD_INT 80
42658: PUSH
42659: LD_INT 82
42661: PUSH
42662: LD_INT 83
42664: PUSH
42665: LD_INT 84
42667: PUSH
42668: LD_INT 85
42670: PUSH
42671: LD_INT 86
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: ST_TO_ADDR
42727: GO 43194
42729: LD_INT 2
42731: DOUBLE
42732: EQUAL
42733: IFTRUE 42737
42735: GO 42963
42737: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
42738: LD_ADDR_VAR 0 4
42742: PUSH
42743: LD_INT 35
42745: PUSH
42746: LD_INT 45
42748: PUSH
42749: LD_INT 46
42751: PUSH
42752: LD_INT 47
42754: PUSH
42755: LD_INT 82
42757: PUSH
42758: LD_INT 83
42760: PUSH
42761: LD_INT 84
42763: PUSH
42764: LD_INT 85
42766: PUSH
42767: LD_INT 87
42769: PUSH
42770: LD_INT 70
42772: PUSH
42773: LD_INT 1
42775: PUSH
42776: LD_INT 11
42778: PUSH
42779: LD_INT 3
42781: PUSH
42782: LD_INT 4
42784: PUSH
42785: LD_INT 5
42787: PUSH
42788: LD_INT 6
42790: PUSH
42791: LD_INT 15
42793: PUSH
42794: LD_INT 18
42796: PUSH
42797: LD_INT 7
42799: PUSH
42800: LD_INT 17
42802: PUSH
42803: LD_INT 8
42805: PUSH
42806: LD_INT 20
42808: PUSH
42809: LD_INT 21
42811: PUSH
42812: LD_INT 22
42814: PUSH
42815: LD_INT 72
42817: PUSH
42818: LD_INT 26
42820: PUSH
42821: LD_INT 69
42823: PUSH
42824: LD_INT 39
42826: PUSH
42827: LD_INT 40
42829: PUSH
42830: LD_INT 41
42832: PUSH
42833: LD_INT 42
42835: PUSH
42836: LD_INT 43
42838: PUSH
42839: LD_INT 48
42841: PUSH
42842: LD_INT 49
42844: PUSH
42845: LD_INT 50
42847: PUSH
42848: LD_INT 51
42850: PUSH
42851: LD_INT 52
42853: PUSH
42854: LD_INT 53
42856: PUSH
42857: LD_INT 54
42859: PUSH
42860: LD_INT 55
42862: PUSH
42863: LD_INT 56
42865: PUSH
42866: LD_INT 60
42868: PUSH
42869: LD_INT 61
42871: PUSH
42872: LD_INT 62
42874: PUSH
42875: LD_INT 66
42877: PUSH
42878: LD_INT 67
42880: PUSH
42881: LD_INT 68
42883: PUSH
42884: LD_INT 81
42886: PUSH
42887: LD_INT 82
42889: PUSH
42890: LD_INT 83
42892: PUSH
42893: LD_INT 84
42895: PUSH
42896: LD_INT 85
42898: PUSH
42899: LD_INT 87
42901: PUSH
42902: LD_INT 88
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: ST_TO_ADDR
42961: GO 43194
42963: LD_INT 3
42965: DOUBLE
42966: EQUAL
42967: IFTRUE 42971
42969: GO 43193
42971: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
42972: LD_ADDR_VAR 0 4
42976: PUSH
42977: LD_INT 46
42979: PUSH
42980: LD_INT 47
42982: PUSH
42983: LD_INT 1
42985: PUSH
42986: LD_INT 2
42988: PUSH
42989: LD_INT 82
42991: PUSH
42992: LD_INT 83
42994: PUSH
42995: LD_INT 84
42997: PUSH
42998: LD_INT 85
43000: PUSH
43001: LD_INT 86
43003: PUSH
43004: LD_INT 11
43006: PUSH
43007: LD_INT 9
43009: PUSH
43010: LD_INT 20
43012: PUSH
43013: LD_INT 19
43015: PUSH
43016: LD_INT 21
43018: PUSH
43019: LD_INT 24
43021: PUSH
43022: LD_INT 22
43024: PUSH
43025: LD_INT 25
43027: PUSH
43028: LD_INT 28
43030: PUSH
43031: LD_INT 29
43033: PUSH
43034: LD_INT 30
43036: PUSH
43037: LD_INT 31
43039: PUSH
43040: LD_INT 37
43042: PUSH
43043: LD_INT 38
43045: PUSH
43046: LD_INT 32
43048: PUSH
43049: LD_INT 27
43051: PUSH
43052: LD_INT 33
43054: PUSH
43055: LD_INT 69
43057: PUSH
43058: LD_INT 39
43060: PUSH
43061: LD_INT 34
43063: PUSH
43064: LD_INT 40
43066: PUSH
43067: LD_INT 71
43069: PUSH
43070: LD_INT 23
43072: PUSH
43073: LD_INT 44
43075: PUSH
43076: LD_INT 48
43078: PUSH
43079: LD_INT 49
43081: PUSH
43082: LD_INT 50
43084: PUSH
43085: LD_INT 51
43087: PUSH
43088: LD_INT 52
43090: PUSH
43091: LD_INT 53
43093: PUSH
43094: LD_INT 54
43096: PUSH
43097: LD_INT 55
43099: PUSH
43100: LD_INT 56
43102: PUSH
43103: LD_INT 57
43105: PUSH
43106: LD_INT 58
43108: PUSH
43109: LD_INT 59
43111: PUSH
43112: LD_INT 63
43114: PUSH
43115: LD_INT 64
43117: PUSH
43118: LD_INT 65
43120: PUSH
43121: LD_INT 82
43123: PUSH
43124: LD_INT 83
43126: PUSH
43127: LD_INT 84
43129: PUSH
43130: LD_INT 85
43132: PUSH
43133: LD_INT 86
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: ST_TO_ADDR
43191: GO 43194
43193: POP
// if state > - 1 and state < 3 then
43194: LD_VAR 0 3
43198: PUSH
43199: LD_INT 1
43201: NEG
43202: GREATER
43203: PUSH
43204: LD_VAR 0 3
43208: PUSH
43209: LD_INT 3
43211: LESS
43212: AND
43213: IFFALSE 43270
// for i in result do
43215: LD_ADDR_VAR 0 5
43219: PUSH
43220: LD_VAR 0 4
43224: PUSH
43225: FOR_IN
43226: IFFALSE 43268
// if GetTech ( i , side ) <> state then
43228: LD_VAR 0 5
43232: PPUSH
43233: LD_VAR 0 1
43237: PPUSH
43238: CALL_OW 321
43242: PUSH
43243: LD_VAR 0 3
43247: NONEQUAL
43248: IFFALSE 43266
// result := result diff i ;
43250: LD_ADDR_VAR 0 4
43254: PUSH
43255: LD_VAR 0 4
43259: PUSH
43260: LD_VAR 0 5
43264: DIFF
43265: ST_TO_ADDR
43266: GO 43225
43268: POP
43269: POP
// end ;
43270: LD_VAR 0 4
43274: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
43275: LD_INT 0
43277: PPUSH
43278: PPUSH
43279: PPUSH
// result := true ;
43280: LD_ADDR_VAR 0 3
43284: PUSH
43285: LD_INT 1
43287: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
43288: LD_ADDR_VAR 0 5
43292: PUSH
43293: LD_VAR 0 2
43297: PPUSH
43298: CALL_OW 480
43302: ST_TO_ADDR
// if not tmp then
43303: LD_VAR 0 5
43307: NOT
43308: IFFALSE 43312
// exit ;
43310: GO 43361
// for i in tmp do
43312: LD_ADDR_VAR 0 4
43316: PUSH
43317: LD_VAR 0 5
43321: PUSH
43322: FOR_IN
43323: IFFALSE 43359
// if GetTech ( i , side ) <> state_researched then
43325: LD_VAR 0 4
43329: PPUSH
43330: LD_VAR 0 1
43334: PPUSH
43335: CALL_OW 321
43339: PUSH
43340: LD_INT 2
43342: NONEQUAL
43343: IFFALSE 43357
// begin result := false ;
43345: LD_ADDR_VAR 0 3
43349: PUSH
43350: LD_INT 0
43352: ST_TO_ADDR
// exit ;
43353: POP
43354: POP
43355: GO 43361
// end ;
43357: GO 43322
43359: POP
43360: POP
// end ;
43361: LD_VAR 0 3
43365: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
43366: LD_INT 0
43368: PPUSH
43369: PPUSH
43370: PPUSH
43371: PPUSH
43372: PPUSH
43373: PPUSH
43374: PPUSH
43375: PPUSH
43376: PPUSH
43377: PPUSH
43378: PPUSH
43379: PPUSH
43380: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
43381: LD_VAR 0 1
43385: NOT
43386: PUSH
43387: LD_VAR 0 1
43391: PPUSH
43392: CALL_OW 257
43396: PUSH
43397: LD_INT 9
43399: NONEQUAL
43400: OR
43401: IFFALSE 43405
// exit ;
43403: GO 43978
// side := GetSide ( unit ) ;
43405: LD_ADDR_VAR 0 9
43409: PUSH
43410: LD_VAR 0 1
43414: PPUSH
43415: CALL_OW 255
43419: ST_TO_ADDR
// tech_space := tech_spacanom ;
43420: LD_ADDR_VAR 0 12
43424: PUSH
43425: LD_INT 29
43427: ST_TO_ADDR
// tech_time := tech_taurad ;
43428: LD_ADDR_VAR 0 13
43432: PUSH
43433: LD_INT 28
43435: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
43436: LD_ADDR_VAR 0 11
43440: PUSH
43441: LD_VAR 0 1
43445: PPUSH
43446: CALL_OW 310
43450: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
43451: LD_VAR 0 11
43455: PPUSH
43456: CALL_OW 247
43460: PUSH
43461: LD_INT 2
43463: EQUAL
43464: IFFALSE 43468
// exit ;
43466: GO 43978
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43468: LD_ADDR_VAR 0 8
43472: PUSH
43473: LD_INT 81
43475: PUSH
43476: LD_VAR 0 9
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 3
43487: PUSH
43488: LD_INT 21
43490: PUSH
43491: LD_INT 3
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PPUSH
43506: CALL_OW 69
43510: ST_TO_ADDR
// if not tmp then
43511: LD_VAR 0 8
43515: NOT
43516: IFFALSE 43520
// exit ;
43518: GO 43978
// if in_unit then
43520: LD_VAR 0 11
43524: IFFALSE 43548
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
43526: LD_ADDR_VAR 0 10
43530: PUSH
43531: LD_VAR 0 8
43535: PPUSH
43536: LD_VAR 0 11
43540: PPUSH
43541: CALL_OW 74
43545: ST_TO_ADDR
43546: GO 43568
// enemy := NearestUnitToUnit ( tmp , unit ) ;
43548: LD_ADDR_VAR 0 10
43552: PUSH
43553: LD_VAR 0 8
43557: PPUSH
43558: LD_VAR 0 1
43562: PPUSH
43563: CALL_OW 74
43567: ST_TO_ADDR
// if not enemy then
43568: LD_VAR 0 10
43572: NOT
43573: IFFALSE 43577
// exit ;
43575: GO 43978
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
43577: LD_VAR 0 11
43581: PUSH
43582: LD_VAR 0 11
43586: PPUSH
43587: LD_VAR 0 10
43591: PPUSH
43592: CALL_OW 296
43596: PUSH
43597: LD_INT 13
43599: GREATER
43600: AND
43601: PUSH
43602: LD_VAR 0 1
43606: PPUSH
43607: LD_VAR 0 10
43611: PPUSH
43612: CALL_OW 296
43616: PUSH
43617: LD_INT 12
43619: GREATER
43620: OR
43621: IFFALSE 43625
// exit ;
43623: GO 43978
// missile := [ 1 ] ;
43625: LD_ADDR_VAR 0 14
43629: PUSH
43630: LD_INT 1
43632: PUSH
43633: EMPTY
43634: LIST
43635: ST_TO_ADDR
// if Researched ( side , tech_space ) then
43636: LD_VAR 0 9
43640: PPUSH
43641: LD_VAR 0 12
43645: PPUSH
43646: CALL_OW 325
43650: IFFALSE 43679
// missile := Replace ( missile , missile + 1 , 2 ) ;
43652: LD_ADDR_VAR 0 14
43656: PUSH
43657: LD_VAR 0 14
43661: PPUSH
43662: LD_VAR 0 14
43666: PUSH
43667: LD_INT 1
43669: PLUS
43670: PPUSH
43671: LD_INT 2
43673: PPUSH
43674: CALL_OW 1
43678: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
43679: LD_VAR 0 9
43683: PPUSH
43684: LD_VAR 0 13
43688: PPUSH
43689: CALL_OW 325
43693: PUSH
43694: LD_VAR 0 10
43698: PPUSH
43699: CALL_OW 255
43703: PPUSH
43704: LD_VAR 0 13
43708: PPUSH
43709: CALL_OW 325
43713: NOT
43714: AND
43715: IFFALSE 43744
// missile := Replace ( missile , missile + 1 , 3 ) ;
43717: LD_ADDR_VAR 0 14
43721: PUSH
43722: LD_VAR 0 14
43726: PPUSH
43727: LD_VAR 0 14
43731: PUSH
43732: LD_INT 1
43734: PLUS
43735: PPUSH
43736: LD_INT 3
43738: PPUSH
43739: CALL_OW 1
43743: ST_TO_ADDR
// if missile < 2 then
43744: LD_VAR 0 14
43748: PUSH
43749: LD_INT 2
43751: LESS
43752: IFFALSE 43756
// exit ;
43754: GO 43978
// x := GetX ( enemy ) ;
43756: LD_ADDR_VAR 0 4
43760: PUSH
43761: LD_VAR 0 10
43765: PPUSH
43766: CALL_OW 250
43770: ST_TO_ADDR
// y := GetY ( enemy ) ;
43771: LD_ADDR_VAR 0 5
43775: PUSH
43776: LD_VAR 0 10
43780: PPUSH
43781: CALL_OW 251
43785: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
43786: LD_ADDR_VAR 0 6
43790: PUSH
43791: LD_VAR 0 4
43795: PUSH
43796: LD_INT 1
43798: NEG
43799: PPUSH
43800: LD_INT 1
43802: PPUSH
43803: CALL_OW 12
43807: PLUS
43808: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
43809: LD_ADDR_VAR 0 7
43813: PUSH
43814: LD_VAR 0 5
43818: PUSH
43819: LD_INT 1
43821: NEG
43822: PPUSH
43823: LD_INT 1
43825: PPUSH
43826: CALL_OW 12
43830: PLUS
43831: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43832: LD_VAR 0 6
43836: PPUSH
43837: LD_VAR 0 7
43841: PPUSH
43842: CALL_OW 488
43846: NOT
43847: IFFALSE 43869
// begin _x := x ;
43849: LD_ADDR_VAR 0 6
43853: PUSH
43854: LD_VAR 0 4
43858: ST_TO_ADDR
// _y := y ;
43859: LD_ADDR_VAR 0 7
43863: PUSH
43864: LD_VAR 0 5
43868: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
43869: LD_ADDR_VAR 0 3
43873: PUSH
43874: LD_INT 1
43876: PPUSH
43877: LD_VAR 0 14
43881: PPUSH
43882: CALL_OW 12
43886: ST_TO_ADDR
// case i of 1 :
43887: LD_VAR 0 3
43891: PUSH
43892: LD_INT 1
43894: DOUBLE
43895: EQUAL
43896: IFTRUE 43900
43898: GO 43917
43900: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
43901: LD_VAR 0 1
43905: PPUSH
43906: LD_VAR 0 10
43910: PPUSH
43911: CALL_OW 115
43915: GO 43978
43917: LD_INT 2
43919: DOUBLE
43920: EQUAL
43921: IFTRUE 43925
43923: GO 43947
43925: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
43926: LD_VAR 0 1
43930: PPUSH
43931: LD_VAR 0 6
43935: PPUSH
43936: LD_VAR 0 7
43940: PPUSH
43941: CALL_OW 153
43945: GO 43978
43947: LD_INT 3
43949: DOUBLE
43950: EQUAL
43951: IFTRUE 43955
43953: GO 43977
43955: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
43956: LD_VAR 0 1
43960: PPUSH
43961: LD_VAR 0 6
43965: PPUSH
43966: LD_VAR 0 7
43970: PPUSH
43971: CALL_OW 154
43975: GO 43978
43977: POP
// end ;
43978: LD_VAR 0 2
43982: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
43983: LD_INT 0
43985: PPUSH
43986: PPUSH
43987: PPUSH
43988: PPUSH
43989: PPUSH
43990: PPUSH
// if not unit or not building then
43991: LD_VAR 0 1
43995: NOT
43996: PUSH
43997: LD_VAR 0 2
44001: NOT
44002: OR
44003: IFFALSE 44007
// exit ;
44005: GO 44165
// x := GetX ( building ) ;
44007: LD_ADDR_VAR 0 5
44011: PUSH
44012: LD_VAR 0 2
44016: PPUSH
44017: CALL_OW 250
44021: ST_TO_ADDR
// y := GetY ( building ) ;
44022: LD_ADDR_VAR 0 6
44026: PUSH
44027: LD_VAR 0 2
44031: PPUSH
44032: CALL_OW 251
44036: ST_TO_ADDR
// for i = 0 to 5 do
44037: LD_ADDR_VAR 0 4
44041: PUSH
44042: DOUBLE
44043: LD_INT 0
44045: DEC
44046: ST_TO_ADDR
44047: LD_INT 5
44049: PUSH
44050: FOR_TO
44051: IFFALSE 44163
// begin _x := ShiftX ( x , i , 3 ) ;
44053: LD_ADDR_VAR 0 7
44057: PUSH
44058: LD_VAR 0 5
44062: PPUSH
44063: LD_VAR 0 4
44067: PPUSH
44068: LD_INT 3
44070: PPUSH
44071: CALL_OW 272
44075: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
44076: LD_ADDR_VAR 0 8
44080: PUSH
44081: LD_VAR 0 6
44085: PPUSH
44086: LD_VAR 0 4
44090: PPUSH
44091: LD_INT 3
44093: PPUSH
44094: CALL_OW 273
44098: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
44099: LD_VAR 0 7
44103: PPUSH
44104: LD_VAR 0 8
44108: PPUSH
44109: CALL_OW 488
44113: NOT
44114: IFFALSE 44118
// continue ;
44116: GO 44050
// if HexInfo ( _x , _y ) = 0 then
44118: LD_VAR 0 7
44122: PPUSH
44123: LD_VAR 0 8
44127: PPUSH
44128: CALL_OW 428
44132: PUSH
44133: LD_INT 0
44135: EQUAL
44136: IFFALSE 44161
// begin ComMoveXY ( unit , _x , _y ) ;
44138: LD_VAR 0 1
44142: PPUSH
44143: LD_VAR 0 7
44147: PPUSH
44148: LD_VAR 0 8
44152: PPUSH
44153: CALL_OW 111
// exit ;
44157: POP
44158: POP
44159: GO 44165
// end ; end ;
44161: GO 44050
44163: POP
44164: POP
// end ;
44165: LD_VAR 0 3
44169: RET
// export function ScanBase ( side , base_area ) ; begin
44170: LD_INT 0
44172: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
44173: LD_ADDR_VAR 0 3
44177: PUSH
44178: LD_VAR 0 2
44182: PPUSH
44183: LD_INT 81
44185: PUSH
44186: LD_VAR 0 1
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PPUSH
44195: CALL_OW 70
44199: ST_TO_ADDR
// end ;
44200: LD_VAR 0 3
44204: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
44205: LD_INT 0
44207: PPUSH
44208: PPUSH
44209: PPUSH
44210: PPUSH
// result := false ;
44211: LD_ADDR_VAR 0 2
44215: PUSH
44216: LD_INT 0
44218: ST_TO_ADDR
// side := GetSide ( unit ) ;
44219: LD_ADDR_VAR 0 3
44223: PUSH
44224: LD_VAR 0 1
44228: PPUSH
44229: CALL_OW 255
44233: ST_TO_ADDR
// nat := GetNation ( unit ) ;
44234: LD_ADDR_VAR 0 4
44238: PUSH
44239: LD_VAR 0 1
44243: PPUSH
44244: CALL_OW 248
44248: ST_TO_ADDR
// case nat of 1 :
44249: LD_VAR 0 4
44253: PUSH
44254: LD_INT 1
44256: DOUBLE
44257: EQUAL
44258: IFTRUE 44262
44260: GO 44273
44262: POP
// tech := tech_lassight ; 2 :
44263: LD_ADDR_VAR 0 5
44267: PUSH
44268: LD_INT 12
44270: ST_TO_ADDR
44271: GO 44312
44273: LD_INT 2
44275: DOUBLE
44276: EQUAL
44277: IFTRUE 44281
44279: GO 44292
44281: POP
// tech := tech_mortar ; 3 :
44282: LD_ADDR_VAR 0 5
44286: PUSH
44287: LD_INT 41
44289: ST_TO_ADDR
44290: GO 44312
44292: LD_INT 3
44294: DOUBLE
44295: EQUAL
44296: IFTRUE 44300
44298: GO 44311
44300: POP
// tech := tech_bazooka ; end ;
44301: LD_ADDR_VAR 0 5
44305: PUSH
44306: LD_INT 44
44308: ST_TO_ADDR
44309: GO 44312
44311: POP
// if Researched ( side , tech ) then
44312: LD_VAR 0 3
44316: PPUSH
44317: LD_VAR 0 5
44321: PPUSH
44322: CALL_OW 325
44326: IFFALSE 44353
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
44328: LD_ADDR_VAR 0 2
44332: PUSH
44333: LD_INT 5
44335: PUSH
44336: LD_INT 8
44338: PUSH
44339: LD_INT 9
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: LIST
44346: PUSH
44347: LD_VAR 0 4
44351: ARRAY
44352: ST_TO_ADDR
// end ;
44353: LD_VAR 0 2
44357: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
44358: LD_INT 0
44360: PPUSH
44361: PPUSH
44362: PPUSH
// if not mines then
44363: LD_VAR 0 2
44367: NOT
44368: IFFALSE 44372
// exit ;
44370: GO 44516
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44372: LD_ADDR_VAR 0 5
44376: PUSH
44377: LD_INT 81
44379: PUSH
44380: LD_VAR 0 1
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 3
44391: PUSH
44392: LD_INT 21
44394: PUSH
44395: LD_INT 3
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PPUSH
44410: CALL_OW 69
44414: ST_TO_ADDR
// for i in mines do
44415: LD_ADDR_VAR 0 4
44419: PUSH
44420: LD_VAR 0 2
44424: PUSH
44425: FOR_IN
44426: IFFALSE 44514
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
44428: LD_VAR 0 4
44432: PUSH
44433: LD_INT 1
44435: ARRAY
44436: PPUSH
44437: LD_VAR 0 4
44441: PUSH
44442: LD_INT 2
44444: ARRAY
44445: PPUSH
44446: CALL_OW 458
44450: NOT
44451: IFFALSE 44455
// continue ;
44453: GO 44425
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
44455: LD_VAR 0 4
44459: PUSH
44460: LD_INT 1
44462: ARRAY
44463: PPUSH
44464: LD_VAR 0 4
44468: PUSH
44469: LD_INT 2
44471: ARRAY
44472: PPUSH
44473: CALL_OW 428
44477: PUSH
44478: LD_VAR 0 5
44482: IN
44483: IFFALSE 44512
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
44485: LD_VAR 0 4
44489: PUSH
44490: LD_INT 1
44492: ARRAY
44493: PPUSH
44494: LD_VAR 0 4
44498: PUSH
44499: LD_INT 2
44501: ARRAY
44502: PPUSH
44503: LD_VAR 0 1
44507: PPUSH
44508: CALL_OW 456
// end ;
44512: GO 44425
44514: POP
44515: POP
// end ;
44516: LD_VAR 0 3
44520: RET
// export function Count ( array ) ; begin
44521: LD_INT 0
44523: PPUSH
// result := array + 0 ;
44524: LD_ADDR_VAR 0 2
44528: PUSH
44529: LD_VAR 0 1
44533: PUSH
44534: LD_INT 0
44536: PLUS
44537: ST_TO_ADDR
// end ;
44538: LD_VAR 0 2
44542: RET
// export function IsEmpty ( building ) ; begin
44543: LD_INT 0
44545: PPUSH
// if not building then
44546: LD_VAR 0 1
44550: NOT
44551: IFFALSE 44555
// exit ;
44553: GO 44598
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
44555: LD_ADDR_VAR 0 2
44559: PUSH
44560: LD_VAR 0 1
44564: PUSH
44565: LD_INT 22
44567: PUSH
44568: LD_VAR 0 1
44572: PPUSH
44573: CALL_OW 255
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 58
44584: PUSH
44585: EMPTY
44586: LIST
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PPUSH
44592: CALL_OW 69
44596: IN
44597: ST_TO_ADDR
// end ;
44598: LD_VAR 0 2
44602: RET
// export function IsNotFull ( building ) ; var places ; begin
44603: LD_INT 0
44605: PPUSH
44606: PPUSH
// if not building then
44607: LD_VAR 0 1
44611: NOT
44612: IFFALSE 44616
// exit ;
44614: GO 44644
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
44616: LD_ADDR_VAR 0 2
44620: PUSH
44621: LD_VAR 0 1
44625: PPUSH
44626: LD_INT 3
44628: PUSH
44629: LD_INT 62
44631: PUSH
44632: EMPTY
44633: LIST
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PPUSH
44639: CALL_OW 72
44643: ST_TO_ADDR
// end ;
44644: LD_VAR 0 2
44648: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
44649: LD_INT 0
44651: PPUSH
44652: PPUSH
44653: PPUSH
44654: PPUSH
// tmp := [ ] ;
44655: LD_ADDR_VAR 0 3
44659: PUSH
44660: EMPTY
44661: ST_TO_ADDR
// list := [ ] ;
44662: LD_ADDR_VAR 0 5
44666: PUSH
44667: EMPTY
44668: ST_TO_ADDR
// for i = 16 to 25 do
44669: LD_ADDR_VAR 0 4
44673: PUSH
44674: DOUBLE
44675: LD_INT 16
44677: DEC
44678: ST_TO_ADDR
44679: LD_INT 25
44681: PUSH
44682: FOR_TO
44683: IFFALSE 44756
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
44685: LD_ADDR_VAR 0 3
44689: PUSH
44690: LD_VAR 0 3
44694: PUSH
44695: LD_INT 22
44697: PUSH
44698: LD_VAR 0 1
44702: PPUSH
44703: CALL_OW 255
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 91
44714: PUSH
44715: LD_VAR 0 1
44719: PUSH
44720: LD_INT 6
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 30
44730: PUSH
44731: LD_VAR 0 4
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: LIST
44744: PUSH
44745: EMPTY
44746: LIST
44747: PPUSH
44748: CALL_OW 69
44752: ADD
44753: ST_TO_ADDR
44754: GO 44682
44756: POP
44757: POP
// for i = 1 to tmp do
44758: LD_ADDR_VAR 0 4
44762: PUSH
44763: DOUBLE
44764: LD_INT 1
44766: DEC
44767: ST_TO_ADDR
44768: LD_VAR 0 3
44772: PUSH
44773: FOR_TO
44774: IFFALSE 44862
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
44776: LD_ADDR_VAR 0 5
44780: PUSH
44781: LD_VAR 0 5
44785: PUSH
44786: LD_VAR 0 3
44790: PUSH
44791: LD_VAR 0 4
44795: ARRAY
44796: PPUSH
44797: CALL_OW 266
44801: PUSH
44802: LD_VAR 0 3
44806: PUSH
44807: LD_VAR 0 4
44811: ARRAY
44812: PPUSH
44813: CALL_OW 250
44817: PUSH
44818: LD_VAR 0 3
44822: PUSH
44823: LD_VAR 0 4
44827: ARRAY
44828: PPUSH
44829: CALL_OW 251
44833: PUSH
44834: LD_VAR 0 3
44838: PUSH
44839: LD_VAR 0 4
44843: ARRAY
44844: PPUSH
44845: CALL_OW 254
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: PUSH
44856: EMPTY
44857: LIST
44858: ADD
44859: ST_TO_ADDR
44860: GO 44773
44862: POP
44863: POP
// result := list ;
44864: LD_ADDR_VAR 0 2
44868: PUSH
44869: LD_VAR 0 5
44873: ST_TO_ADDR
// end ;
44874: LD_VAR 0 2
44878: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
44879: LD_INT 0
44881: PPUSH
44882: PPUSH
44883: PPUSH
44884: PPUSH
44885: PPUSH
44886: PPUSH
44887: PPUSH
// if not factory then
44888: LD_VAR 0 1
44892: NOT
44893: IFFALSE 44897
// exit ;
44895: GO 45490
// if control = control_apeman then
44897: LD_VAR 0 4
44901: PUSH
44902: LD_INT 5
44904: EQUAL
44905: IFFALSE 45014
// begin tmp := UnitsInside ( factory ) ;
44907: LD_ADDR_VAR 0 8
44911: PUSH
44912: LD_VAR 0 1
44916: PPUSH
44917: CALL_OW 313
44921: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
44922: LD_VAR 0 8
44926: PPUSH
44927: LD_INT 25
44929: PUSH
44930: LD_INT 12
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PPUSH
44937: CALL_OW 72
44941: NOT
44942: IFFALSE 44952
// control := control_manual ;
44944: LD_ADDR_VAR 0 4
44948: PUSH
44949: LD_INT 1
44951: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
44952: LD_ADDR_VAR 0 8
44956: PUSH
44957: LD_VAR 0 1
44961: PPUSH
44962: CALL 44649 0 1
44966: ST_TO_ADDR
// if tmp then
44967: LD_VAR 0 8
44971: IFFALSE 45014
// begin for i in tmp do
44973: LD_ADDR_VAR 0 7
44977: PUSH
44978: LD_VAR 0 8
44982: PUSH
44983: FOR_IN
44984: IFFALSE 45012
// if i [ 1 ] = b_ext_radio then
44986: LD_VAR 0 7
44990: PUSH
44991: LD_INT 1
44993: ARRAY
44994: PUSH
44995: LD_INT 22
44997: EQUAL
44998: IFFALSE 45010
// begin control := control_remote ;
45000: LD_ADDR_VAR 0 4
45004: PUSH
45005: LD_INT 2
45007: ST_TO_ADDR
// break ;
45008: GO 45012
// end ;
45010: GO 44983
45012: POP
45013: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
45014: LD_VAR 0 1
45018: PPUSH
45019: LD_VAR 0 2
45023: PPUSH
45024: LD_VAR 0 3
45028: PPUSH
45029: LD_VAR 0 4
45033: PPUSH
45034: LD_VAR 0 5
45038: PPUSH
45039: CALL_OW 448
45043: IFFALSE 45078
// begin result := [ chassis , engine , control , weapon ] ;
45045: LD_ADDR_VAR 0 6
45049: PUSH
45050: LD_VAR 0 2
45054: PUSH
45055: LD_VAR 0 3
45059: PUSH
45060: LD_VAR 0 4
45064: PUSH
45065: LD_VAR 0 5
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: ST_TO_ADDR
// exit ;
45076: GO 45490
// end ; _chassis := AvailableChassisList ( factory ) ;
45078: LD_ADDR_VAR 0 9
45082: PUSH
45083: LD_VAR 0 1
45087: PPUSH
45088: CALL_OW 475
45092: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
45093: LD_ADDR_VAR 0 11
45097: PUSH
45098: LD_VAR 0 1
45102: PPUSH
45103: CALL_OW 476
45107: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
45108: LD_ADDR_VAR 0 12
45112: PUSH
45113: LD_VAR 0 1
45117: PPUSH
45118: CALL_OW 477
45122: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
45123: LD_ADDR_VAR 0 10
45127: PUSH
45128: LD_VAR 0 1
45132: PPUSH
45133: CALL_OW 478
45137: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
45138: LD_VAR 0 9
45142: NOT
45143: PUSH
45144: LD_VAR 0 11
45148: NOT
45149: OR
45150: PUSH
45151: LD_VAR 0 12
45155: NOT
45156: OR
45157: PUSH
45158: LD_VAR 0 10
45162: NOT
45163: OR
45164: IFFALSE 45199
// begin result := [ chassis , engine , control , weapon ] ;
45166: LD_ADDR_VAR 0 6
45170: PUSH
45171: LD_VAR 0 2
45175: PUSH
45176: LD_VAR 0 3
45180: PUSH
45181: LD_VAR 0 4
45185: PUSH
45186: LD_VAR 0 5
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: ST_TO_ADDR
// exit ;
45197: GO 45490
// end ; if not chassis in _chassis then
45199: LD_VAR 0 2
45203: PUSH
45204: LD_VAR 0 9
45208: IN
45209: NOT
45210: IFFALSE 45236
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
45212: LD_ADDR_VAR 0 2
45216: PUSH
45217: LD_VAR 0 9
45221: PUSH
45222: LD_INT 1
45224: PPUSH
45225: LD_VAR 0 9
45229: PPUSH
45230: CALL_OW 12
45234: ARRAY
45235: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
45236: LD_VAR 0 2
45240: PPUSH
45241: LD_VAR 0 3
45245: PPUSH
45246: CALL 45495 0 2
45250: NOT
45251: IFFALSE 45310
// repeat engine := _engine [ 1 ] ;
45253: LD_ADDR_VAR 0 3
45257: PUSH
45258: LD_VAR 0 11
45262: PUSH
45263: LD_INT 1
45265: ARRAY
45266: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
45267: LD_ADDR_VAR 0 11
45271: PUSH
45272: LD_VAR 0 11
45276: PPUSH
45277: LD_INT 1
45279: PPUSH
45280: CALL_OW 3
45284: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
45285: LD_VAR 0 2
45289: PPUSH
45290: LD_VAR 0 3
45294: PPUSH
45295: CALL 45495 0 2
45299: PUSH
45300: LD_VAR 0 11
45304: PUSH
45305: EMPTY
45306: EQUAL
45307: OR
45308: IFFALSE 45253
// if not control in _control then
45310: LD_VAR 0 4
45314: PUSH
45315: LD_VAR 0 12
45319: IN
45320: NOT
45321: IFFALSE 45347
// control := _control [ rand ( 1 , _control ) ] ;
45323: LD_ADDR_VAR 0 4
45327: PUSH
45328: LD_VAR 0 12
45332: PUSH
45333: LD_INT 1
45335: PPUSH
45336: LD_VAR 0 12
45340: PPUSH
45341: CALL_OW 12
45345: ARRAY
45346: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
45347: LD_VAR 0 2
45351: PPUSH
45352: LD_VAR 0 5
45356: PPUSH
45357: CALL 45715 0 2
45361: NOT
45362: IFFALSE 45421
// repeat weapon := _weapon [ 1 ] ;
45364: LD_ADDR_VAR 0 5
45368: PUSH
45369: LD_VAR 0 10
45373: PUSH
45374: LD_INT 1
45376: ARRAY
45377: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
45378: LD_ADDR_VAR 0 10
45382: PUSH
45383: LD_VAR 0 10
45387: PPUSH
45388: LD_INT 1
45390: PPUSH
45391: CALL_OW 3
45395: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
45396: LD_VAR 0 2
45400: PPUSH
45401: LD_VAR 0 5
45405: PPUSH
45406: CALL 45715 0 2
45410: PUSH
45411: LD_VAR 0 10
45415: PUSH
45416: EMPTY
45417: EQUAL
45418: OR
45419: IFFALSE 45364
// result := [ ] ;
45421: LD_ADDR_VAR 0 6
45425: PUSH
45426: EMPTY
45427: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
45428: LD_VAR 0 1
45432: PPUSH
45433: LD_VAR 0 2
45437: PPUSH
45438: LD_VAR 0 3
45442: PPUSH
45443: LD_VAR 0 4
45447: PPUSH
45448: LD_VAR 0 5
45452: PPUSH
45453: CALL_OW 448
45457: IFFALSE 45490
// result := [ chassis , engine , control , weapon ] ;
45459: LD_ADDR_VAR 0 6
45463: PUSH
45464: LD_VAR 0 2
45468: PUSH
45469: LD_VAR 0 3
45473: PUSH
45474: LD_VAR 0 4
45478: PUSH
45479: LD_VAR 0 5
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: ST_TO_ADDR
// end ;
45490: LD_VAR 0 6
45494: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
45495: LD_INT 0
45497: PPUSH
// if not chassis or not engine then
45498: LD_VAR 0 1
45502: NOT
45503: PUSH
45504: LD_VAR 0 2
45508: NOT
45509: OR
45510: IFFALSE 45514
// exit ;
45512: GO 45710
// case engine of engine_solar :
45514: LD_VAR 0 2
45518: PUSH
45519: LD_INT 2
45521: DOUBLE
45522: EQUAL
45523: IFTRUE 45527
45525: GO 45565
45527: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
45528: LD_ADDR_VAR 0 3
45532: PUSH
45533: LD_INT 11
45535: PUSH
45536: LD_INT 12
45538: PUSH
45539: LD_INT 13
45541: PUSH
45542: LD_INT 14
45544: PUSH
45545: LD_INT 1
45547: PUSH
45548: LD_INT 2
45550: PUSH
45551: LD_INT 3
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: ST_TO_ADDR
45563: GO 45694
45565: LD_INT 1
45567: DOUBLE
45568: EQUAL
45569: IFTRUE 45573
45571: GO 45635
45573: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
45574: LD_ADDR_VAR 0 3
45578: PUSH
45579: LD_INT 11
45581: PUSH
45582: LD_INT 12
45584: PUSH
45585: LD_INT 13
45587: PUSH
45588: LD_INT 14
45590: PUSH
45591: LD_INT 1
45593: PUSH
45594: LD_INT 2
45596: PUSH
45597: LD_INT 3
45599: PUSH
45600: LD_INT 4
45602: PUSH
45603: LD_INT 5
45605: PUSH
45606: LD_INT 21
45608: PUSH
45609: LD_INT 23
45611: PUSH
45612: LD_INT 22
45614: PUSH
45615: LD_INT 24
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: ST_TO_ADDR
45633: GO 45694
45635: LD_INT 3
45637: DOUBLE
45638: EQUAL
45639: IFTRUE 45643
45641: GO 45693
45643: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45644: LD_ADDR_VAR 0 3
45648: PUSH
45649: LD_INT 13
45651: PUSH
45652: LD_INT 14
45654: PUSH
45655: LD_INT 2
45657: PUSH
45658: LD_INT 3
45660: PUSH
45661: LD_INT 4
45663: PUSH
45664: LD_INT 5
45666: PUSH
45667: LD_INT 21
45669: PUSH
45670: LD_INT 22
45672: PUSH
45673: LD_INT 23
45675: PUSH
45676: LD_INT 24
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: ST_TO_ADDR
45691: GO 45694
45693: POP
// result := ( chassis in result ) ;
45694: LD_ADDR_VAR 0 3
45698: PUSH
45699: LD_VAR 0 1
45703: PUSH
45704: LD_VAR 0 3
45708: IN
45709: ST_TO_ADDR
// end ;
45710: LD_VAR 0 3
45714: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
45715: LD_INT 0
45717: PPUSH
// if not chassis or not weapon then
45718: LD_VAR 0 1
45722: NOT
45723: PUSH
45724: LD_VAR 0 2
45728: NOT
45729: OR
45730: IFFALSE 45734
// exit ;
45732: GO 46794
// case weapon of us_machine_gun :
45734: LD_VAR 0 2
45738: PUSH
45739: LD_INT 2
45741: DOUBLE
45742: EQUAL
45743: IFTRUE 45747
45745: GO 45777
45747: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
45748: LD_ADDR_VAR 0 3
45752: PUSH
45753: LD_INT 1
45755: PUSH
45756: LD_INT 2
45758: PUSH
45759: LD_INT 3
45761: PUSH
45762: LD_INT 4
45764: PUSH
45765: LD_INT 5
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: ST_TO_ADDR
45775: GO 46778
45777: LD_INT 3
45779: DOUBLE
45780: EQUAL
45781: IFTRUE 45785
45783: GO 45815
45785: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
45786: LD_ADDR_VAR 0 3
45790: PUSH
45791: LD_INT 1
45793: PUSH
45794: LD_INT 2
45796: PUSH
45797: LD_INT 3
45799: PUSH
45800: LD_INT 4
45802: PUSH
45803: LD_INT 5
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: ST_TO_ADDR
45813: GO 46778
45815: LD_INT 11
45817: DOUBLE
45818: EQUAL
45819: IFTRUE 45823
45821: GO 45853
45823: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
45824: LD_ADDR_VAR 0 3
45828: PUSH
45829: LD_INT 1
45831: PUSH
45832: LD_INT 2
45834: PUSH
45835: LD_INT 3
45837: PUSH
45838: LD_INT 4
45840: PUSH
45841: LD_INT 5
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: ST_TO_ADDR
45851: GO 46778
45853: LD_INT 4
45855: DOUBLE
45856: EQUAL
45857: IFTRUE 45861
45859: GO 45887
45861: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
45862: LD_ADDR_VAR 0 3
45866: PUSH
45867: LD_INT 2
45869: PUSH
45870: LD_INT 3
45872: PUSH
45873: LD_INT 4
45875: PUSH
45876: LD_INT 5
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: ST_TO_ADDR
45885: GO 46778
45887: LD_INT 5
45889: DOUBLE
45890: EQUAL
45891: IFTRUE 45895
45893: GO 45921
45895: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
45896: LD_ADDR_VAR 0 3
45900: PUSH
45901: LD_INT 2
45903: PUSH
45904: LD_INT 3
45906: PUSH
45907: LD_INT 4
45909: PUSH
45910: LD_INT 5
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: ST_TO_ADDR
45919: GO 46778
45921: LD_INT 9
45923: DOUBLE
45924: EQUAL
45925: IFTRUE 45929
45927: GO 45955
45929: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
45930: LD_ADDR_VAR 0 3
45934: PUSH
45935: LD_INT 2
45937: PUSH
45938: LD_INT 3
45940: PUSH
45941: LD_INT 4
45943: PUSH
45944: LD_INT 5
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: ST_TO_ADDR
45953: GO 46778
45955: LD_INT 7
45957: DOUBLE
45958: EQUAL
45959: IFTRUE 45963
45961: GO 45989
45963: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
45964: LD_ADDR_VAR 0 3
45968: PUSH
45969: LD_INT 2
45971: PUSH
45972: LD_INT 3
45974: PUSH
45975: LD_INT 4
45977: PUSH
45978: LD_INT 5
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: ST_TO_ADDR
45987: GO 46778
45989: LD_INT 12
45991: DOUBLE
45992: EQUAL
45993: IFTRUE 45997
45995: GO 46023
45997: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
45998: LD_ADDR_VAR 0 3
46002: PUSH
46003: LD_INT 2
46005: PUSH
46006: LD_INT 3
46008: PUSH
46009: LD_INT 4
46011: PUSH
46012: LD_INT 5
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: ST_TO_ADDR
46021: GO 46778
46023: LD_INT 13
46025: DOUBLE
46026: EQUAL
46027: IFTRUE 46031
46029: GO 46057
46031: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
46032: LD_ADDR_VAR 0 3
46036: PUSH
46037: LD_INT 2
46039: PUSH
46040: LD_INT 3
46042: PUSH
46043: LD_INT 4
46045: PUSH
46046: LD_INT 5
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: ST_TO_ADDR
46055: GO 46778
46057: LD_INT 14
46059: DOUBLE
46060: EQUAL
46061: IFTRUE 46065
46063: GO 46083
46065: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
46066: LD_ADDR_VAR 0 3
46070: PUSH
46071: LD_INT 4
46073: PUSH
46074: LD_INT 5
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: ST_TO_ADDR
46081: GO 46778
46083: LD_INT 6
46085: DOUBLE
46086: EQUAL
46087: IFTRUE 46091
46089: GO 46109
46091: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
46092: LD_ADDR_VAR 0 3
46096: PUSH
46097: LD_INT 4
46099: PUSH
46100: LD_INT 5
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: ST_TO_ADDR
46107: GO 46778
46109: LD_INT 10
46111: DOUBLE
46112: EQUAL
46113: IFTRUE 46117
46115: GO 46135
46117: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
46118: LD_ADDR_VAR 0 3
46122: PUSH
46123: LD_INT 4
46125: PUSH
46126: LD_INT 5
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: ST_TO_ADDR
46133: GO 46778
46135: LD_INT 22
46137: DOUBLE
46138: EQUAL
46139: IFTRUE 46143
46141: GO 46169
46143: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
46144: LD_ADDR_VAR 0 3
46148: PUSH
46149: LD_INT 11
46151: PUSH
46152: LD_INT 12
46154: PUSH
46155: LD_INT 13
46157: PUSH
46158: LD_INT 14
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: ST_TO_ADDR
46167: GO 46778
46169: LD_INT 23
46171: DOUBLE
46172: EQUAL
46173: IFTRUE 46177
46175: GO 46203
46177: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
46178: LD_ADDR_VAR 0 3
46182: PUSH
46183: LD_INT 11
46185: PUSH
46186: LD_INT 12
46188: PUSH
46189: LD_INT 13
46191: PUSH
46192: LD_INT 14
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: ST_TO_ADDR
46201: GO 46778
46203: LD_INT 24
46205: DOUBLE
46206: EQUAL
46207: IFTRUE 46211
46209: GO 46237
46211: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
46212: LD_ADDR_VAR 0 3
46216: PUSH
46217: LD_INT 11
46219: PUSH
46220: LD_INT 12
46222: PUSH
46223: LD_INT 13
46225: PUSH
46226: LD_INT 14
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: ST_TO_ADDR
46235: GO 46778
46237: LD_INT 30
46239: DOUBLE
46240: EQUAL
46241: IFTRUE 46245
46243: GO 46271
46245: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
46246: LD_ADDR_VAR 0 3
46250: PUSH
46251: LD_INT 11
46253: PUSH
46254: LD_INT 12
46256: PUSH
46257: LD_INT 13
46259: PUSH
46260: LD_INT 14
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: ST_TO_ADDR
46269: GO 46778
46271: LD_INT 25
46273: DOUBLE
46274: EQUAL
46275: IFTRUE 46279
46277: GO 46297
46279: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
46280: LD_ADDR_VAR 0 3
46284: PUSH
46285: LD_INT 13
46287: PUSH
46288: LD_INT 14
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: ST_TO_ADDR
46295: GO 46778
46297: LD_INT 27
46299: DOUBLE
46300: EQUAL
46301: IFTRUE 46305
46303: GO 46323
46305: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
46306: LD_ADDR_VAR 0 3
46310: PUSH
46311: LD_INT 13
46313: PUSH
46314: LD_INT 14
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: ST_TO_ADDR
46321: GO 46778
46323: LD_INT 92
46325: DOUBLE
46326: EQUAL
46327: IFTRUE 46331
46329: GO 46357
46331: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
46332: LD_ADDR_VAR 0 3
46336: PUSH
46337: LD_INT 11
46339: PUSH
46340: LD_INT 12
46342: PUSH
46343: LD_INT 13
46345: PUSH
46346: LD_INT 14
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: ST_TO_ADDR
46355: GO 46778
46357: LD_INT 28
46359: DOUBLE
46360: EQUAL
46361: IFTRUE 46365
46363: GO 46383
46365: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
46366: LD_ADDR_VAR 0 3
46370: PUSH
46371: LD_INT 13
46373: PUSH
46374: LD_INT 14
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: ST_TO_ADDR
46381: GO 46778
46383: LD_INT 29
46385: DOUBLE
46386: EQUAL
46387: IFTRUE 46391
46389: GO 46409
46391: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
46392: LD_ADDR_VAR 0 3
46396: PUSH
46397: LD_INT 13
46399: PUSH
46400: LD_INT 14
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: ST_TO_ADDR
46407: GO 46778
46409: LD_INT 31
46411: DOUBLE
46412: EQUAL
46413: IFTRUE 46417
46415: GO 46435
46417: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
46418: LD_ADDR_VAR 0 3
46422: PUSH
46423: LD_INT 13
46425: PUSH
46426: LD_INT 14
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: ST_TO_ADDR
46433: GO 46778
46435: LD_INT 26
46437: DOUBLE
46438: EQUAL
46439: IFTRUE 46443
46441: GO 46461
46443: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
46444: LD_ADDR_VAR 0 3
46448: PUSH
46449: LD_INT 13
46451: PUSH
46452: LD_INT 14
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: ST_TO_ADDR
46459: GO 46778
46461: LD_INT 42
46463: DOUBLE
46464: EQUAL
46465: IFTRUE 46469
46467: GO 46495
46469: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
46470: LD_ADDR_VAR 0 3
46474: PUSH
46475: LD_INT 21
46477: PUSH
46478: LD_INT 22
46480: PUSH
46481: LD_INT 23
46483: PUSH
46484: LD_INT 24
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: ST_TO_ADDR
46493: GO 46778
46495: LD_INT 43
46497: DOUBLE
46498: EQUAL
46499: IFTRUE 46503
46501: GO 46529
46503: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
46504: LD_ADDR_VAR 0 3
46508: PUSH
46509: LD_INT 21
46511: PUSH
46512: LD_INT 22
46514: PUSH
46515: LD_INT 23
46517: PUSH
46518: LD_INT 24
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: ST_TO_ADDR
46527: GO 46778
46529: LD_INT 44
46531: DOUBLE
46532: EQUAL
46533: IFTRUE 46537
46535: GO 46563
46537: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
46538: LD_ADDR_VAR 0 3
46542: PUSH
46543: LD_INT 21
46545: PUSH
46546: LD_INT 22
46548: PUSH
46549: LD_INT 23
46551: PUSH
46552: LD_INT 24
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: ST_TO_ADDR
46561: GO 46778
46563: LD_INT 45
46565: DOUBLE
46566: EQUAL
46567: IFTRUE 46571
46569: GO 46597
46571: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
46572: LD_ADDR_VAR 0 3
46576: PUSH
46577: LD_INT 21
46579: PUSH
46580: LD_INT 22
46582: PUSH
46583: LD_INT 23
46585: PUSH
46586: LD_INT 24
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: ST_TO_ADDR
46595: GO 46778
46597: LD_INT 49
46599: DOUBLE
46600: EQUAL
46601: IFTRUE 46605
46603: GO 46631
46605: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
46606: LD_ADDR_VAR 0 3
46610: PUSH
46611: LD_INT 21
46613: PUSH
46614: LD_INT 22
46616: PUSH
46617: LD_INT 23
46619: PUSH
46620: LD_INT 24
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: ST_TO_ADDR
46629: GO 46778
46631: LD_INT 51
46633: DOUBLE
46634: EQUAL
46635: IFTRUE 46639
46637: GO 46665
46639: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
46640: LD_ADDR_VAR 0 3
46644: PUSH
46645: LD_INT 21
46647: PUSH
46648: LD_INT 22
46650: PUSH
46651: LD_INT 23
46653: PUSH
46654: LD_INT 24
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: ST_TO_ADDR
46663: GO 46778
46665: LD_INT 52
46667: DOUBLE
46668: EQUAL
46669: IFTRUE 46673
46671: GO 46699
46673: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
46674: LD_ADDR_VAR 0 3
46678: PUSH
46679: LD_INT 21
46681: PUSH
46682: LD_INT 22
46684: PUSH
46685: LD_INT 23
46687: PUSH
46688: LD_INT 24
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: ST_TO_ADDR
46697: GO 46778
46699: LD_INT 53
46701: DOUBLE
46702: EQUAL
46703: IFTRUE 46707
46705: GO 46725
46707: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
46708: LD_ADDR_VAR 0 3
46712: PUSH
46713: LD_INT 23
46715: PUSH
46716: LD_INT 24
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: ST_TO_ADDR
46723: GO 46778
46725: LD_INT 46
46727: DOUBLE
46728: EQUAL
46729: IFTRUE 46733
46731: GO 46751
46733: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
46734: LD_ADDR_VAR 0 3
46738: PUSH
46739: LD_INT 23
46741: PUSH
46742: LD_INT 24
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: ST_TO_ADDR
46749: GO 46778
46751: LD_INT 47
46753: DOUBLE
46754: EQUAL
46755: IFTRUE 46759
46757: GO 46777
46759: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
46760: LD_ADDR_VAR 0 3
46764: PUSH
46765: LD_INT 23
46767: PUSH
46768: LD_INT 24
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: ST_TO_ADDR
46775: GO 46778
46777: POP
// result := ( chassis in result ) ;
46778: LD_ADDR_VAR 0 3
46782: PUSH
46783: LD_VAR 0 1
46787: PUSH
46788: LD_VAR 0 3
46792: IN
46793: ST_TO_ADDR
// end ;
46794: LD_VAR 0 3
46798: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
46799: LD_INT 0
46801: PPUSH
46802: PPUSH
46803: PPUSH
46804: PPUSH
46805: PPUSH
46806: PPUSH
46807: PPUSH
// result := array ;
46808: LD_ADDR_VAR 0 5
46812: PUSH
46813: LD_VAR 0 1
46817: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
46818: LD_VAR 0 1
46822: NOT
46823: PUSH
46824: LD_VAR 0 2
46828: NOT
46829: OR
46830: PUSH
46831: LD_VAR 0 3
46835: NOT
46836: OR
46837: PUSH
46838: LD_VAR 0 2
46842: PUSH
46843: LD_VAR 0 1
46847: GREATER
46848: OR
46849: PUSH
46850: LD_VAR 0 3
46854: PUSH
46855: LD_VAR 0 1
46859: GREATER
46860: OR
46861: IFFALSE 46865
// exit ;
46863: GO 47161
// if direction then
46865: LD_VAR 0 4
46869: IFFALSE 46933
// begin d := 1 ;
46871: LD_ADDR_VAR 0 9
46875: PUSH
46876: LD_INT 1
46878: ST_TO_ADDR
// if i_from > i_to then
46879: LD_VAR 0 2
46883: PUSH
46884: LD_VAR 0 3
46888: GREATER
46889: IFFALSE 46915
// length := ( array - i_from ) + i_to else
46891: LD_ADDR_VAR 0 11
46895: PUSH
46896: LD_VAR 0 1
46900: PUSH
46901: LD_VAR 0 2
46905: MINUS
46906: PUSH
46907: LD_VAR 0 3
46911: PLUS
46912: ST_TO_ADDR
46913: GO 46931
// length := i_to - i_from ;
46915: LD_ADDR_VAR 0 11
46919: PUSH
46920: LD_VAR 0 3
46924: PUSH
46925: LD_VAR 0 2
46929: MINUS
46930: ST_TO_ADDR
// end else
46931: GO 46994
// begin d := - 1 ;
46933: LD_ADDR_VAR 0 9
46937: PUSH
46938: LD_INT 1
46940: NEG
46941: ST_TO_ADDR
// if i_from > i_to then
46942: LD_VAR 0 2
46946: PUSH
46947: LD_VAR 0 3
46951: GREATER
46952: IFFALSE 46972
// length := i_from - i_to else
46954: LD_ADDR_VAR 0 11
46958: PUSH
46959: LD_VAR 0 2
46963: PUSH
46964: LD_VAR 0 3
46968: MINUS
46969: ST_TO_ADDR
46970: GO 46994
// length := ( array - i_to ) + i_from ;
46972: LD_ADDR_VAR 0 11
46976: PUSH
46977: LD_VAR 0 1
46981: PUSH
46982: LD_VAR 0 3
46986: MINUS
46987: PUSH
46988: LD_VAR 0 2
46992: PLUS
46993: ST_TO_ADDR
// end ; if not length then
46994: LD_VAR 0 11
46998: NOT
46999: IFFALSE 47003
// exit ;
47001: GO 47161
// tmp := array ;
47003: LD_ADDR_VAR 0 10
47007: PUSH
47008: LD_VAR 0 1
47012: ST_TO_ADDR
// for i = 1 to length do
47013: LD_ADDR_VAR 0 6
47017: PUSH
47018: DOUBLE
47019: LD_INT 1
47021: DEC
47022: ST_TO_ADDR
47023: LD_VAR 0 11
47027: PUSH
47028: FOR_TO
47029: IFFALSE 47149
// begin for j = 1 to array do
47031: LD_ADDR_VAR 0 7
47035: PUSH
47036: DOUBLE
47037: LD_INT 1
47039: DEC
47040: ST_TO_ADDR
47041: LD_VAR 0 1
47045: PUSH
47046: FOR_TO
47047: IFFALSE 47135
// begin k := j + d ;
47049: LD_ADDR_VAR 0 8
47053: PUSH
47054: LD_VAR 0 7
47058: PUSH
47059: LD_VAR 0 9
47063: PLUS
47064: ST_TO_ADDR
// if k > array then
47065: LD_VAR 0 8
47069: PUSH
47070: LD_VAR 0 1
47074: GREATER
47075: IFFALSE 47085
// k := 1 ;
47077: LD_ADDR_VAR 0 8
47081: PUSH
47082: LD_INT 1
47084: ST_TO_ADDR
// if not k then
47085: LD_VAR 0 8
47089: NOT
47090: IFFALSE 47102
// k := array ;
47092: LD_ADDR_VAR 0 8
47096: PUSH
47097: LD_VAR 0 1
47101: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
47102: LD_ADDR_VAR 0 10
47106: PUSH
47107: LD_VAR 0 10
47111: PPUSH
47112: LD_VAR 0 8
47116: PPUSH
47117: LD_VAR 0 1
47121: PUSH
47122: LD_VAR 0 7
47126: ARRAY
47127: PPUSH
47128: CALL_OW 1
47132: ST_TO_ADDR
// end ;
47133: GO 47046
47135: POP
47136: POP
// array := tmp ;
47137: LD_ADDR_VAR 0 1
47141: PUSH
47142: LD_VAR 0 10
47146: ST_TO_ADDR
// end ;
47147: GO 47028
47149: POP
47150: POP
// result := array ;
47151: LD_ADDR_VAR 0 5
47155: PUSH
47156: LD_VAR 0 1
47160: ST_TO_ADDR
// end ;
47161: LD_VAR 0 5
47165: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
47166: LD_INT 0
47168: PPUSH
47169: PPUSH
// result := 0 ;
47170: LD_ADDR_VAR 0 3
47174: PUSH
47175: LD_INT 0
47177: ST_TO_ADDR
// if not array or not value in array then
47178: LD_VAR 0 1
47182: NOT
47183: PUSH
47184: LD_VAR 0 2
47188: PUSH
47189: LD_VAR 0 1
47193: IN
47194: NOT
47195: OR
47196: IFFALSE 47200
// exit ;
47198: GO 47254
// for i = 1 to array do
47200: LD_ADDR_VAR 0 4
47204: PUSH
47205: DOUBLE
47206: LD_INT 1
47208: DEC
47209: ST_TO_ADDR
47210: LD_VAR 0 1
47214: PUSH
47215: FOR_TO
47216: IFFALSE 47252
// if value = array [ i ] then
47218: LD_VAR 0 2
47222: PUSH
47223: LD_VAR 0 1
47227: PUSH
47228: LD_VAR 0 4
47232: ARRAY
47233: EQUAL
47234: IFFALSE 47250
// begin result := i ;
47236: LD_ADDR_VAR 0 3
47240: PUSH
47241: LD_VAR 0 4
47245: ST_TO_ADDR
// exit ;
47246: POP
47247: POP
47248: GO 47254
// end ;
47250: GO 47215
47252: POP
47253: POP
// end ;
47254: LD_VAR 0 3
47258: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
47259: LD_INT 0
47261: PPUSH
// vc_chassis := chassis ;
47262: LD_ADDR_OWVAR 37
47266: PUSH
47267: LD_VAR 0 1
47271: ST_TO_ADDR
// vc_engine := engine ;
47272: LD_ADDR_OWVAR 39
47276: PUSH
47277: LD_VAR 0 2
47281: ST_TO_ADDR
// vc_control := control ;
47282: LD_ADDR_OWVAR 38
47286: PUSH
47287: LD_VAR 0 3
47291: ST_TO_ADDR
// vc_weapon := weapon ;
47292: LD_ADDR_OWVAR 40
47296: PUSH
47297: LD_VAR 0 4
47301: ST_TO_ADDR
// vc_fuel_battery := fuel ;
47302: LD_ADDR_OWVAR 41
47306: PUSH
47307: LD_VAR 0 5
47311: ST_TO_ADDR
// end ;
47312: LD_VAR 0 6
47316: RET
// export function WantPlant ( unit ) ; var task ; begin
47317: LD_INT 0
47319: PPUSH
47320: PPUSH
// result := false ;
47321: LD_ADDR_VAR 0 2
47325: PUSH
47326: LD_INT 0
47328: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
47329: LD_ADDR_VAR 0 3
47333: PUSH
47334: LD_VAR 0 1
47338: PPUSH
47339: CALL_OW 437
47343: ST_TO_ADDR
// if task then
47344: LD_VAR 0 3
47348: IFFALSE 47376
// if task [ 1 ] [ 1 ] = p then
47350: LD_VAR 0 3
47354: PUSH
47355: LD_INT 1
47357: ARRAY
47358: PUSH
47359: LD_INT 1
47361: ARRAY
47362: PUSH
47363: LD_STRING p
47365: EQUAL
47366: IFFALSE 47376
// result := true ;
47368: LD_ADDR_VAR 0 2
47372: PUSH
47373: LD_INT 1
47375: ST_TO_ADDR
// end ;
47376: LD_VAR 0 2
47380: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
47381: LD_INT 0
47383: PPUSH
47384: PPUSH
47385: PPUSH
47386: PPUSH
// if pos < 1 then
47387: LD_VAR 0 2
47391: PUSH
47392: LD_INT 1
47394: LESS
47395: IFFALSE 47399
// exit ;
47397: GO 47702
// if pos = 1 then
47399: LD_VAR 0 2
47403: PUSH
47404: LD_INT 1
47406: EQUAL
47407: IFFALSE 47440
// result := Replace ( arr , pos [ 1 ] , value ) else
47409: LD_ADDR_VAR 0 4
47413: PUSH
47414: LD_VAR 0 1
47418: PPUSH
47419: LD_VAR 0 2
47423: PUSH
47424: LD_INT 1
47426: ARRAY
47427: PPUSH
47428: LD_VAR 0 3
47432: PPUSH
47433: CALL_OW 1
47437: ST_TO_ADDR
47438: GO 47702
// begin tmp := arr ;
47440: LD_ADDR_VAR 0 6
47444: PUSH
47445: LD_VAR 0 1
47449: ST_TO_ADDR
// s_arr := [ tmp ] ;
47450: LD_ADDR_VAR 0 7
47454: PUSH
47455: LD_VAR 0 6
47459: PUSH
47460: EMPTY
47461: LIST
47462: ST_TO_ADDR
// for i = 1 to pos - 1 do
47463: LD_ADDR_VAR 0 5
47467: PUSH
47468: DOUBLE
47469: LD_INT 1
47471: DEC
47472: ST_TO_ADDR
47473: LD_VAR 0 2
47477: PUSH
47478: LD_INT 1
47480: MINUS
47481: PUSH
47482: FOR_TO
47483: IFFALSE 47528
// begin tmp := tmp [ pos [ i ] ] ;
47485: LD_ADDR_VAR 0 6
47489: PUSH
47490: LD_VAR 0 6
47494: PUSH
47495: LD_VAR 0 2
47499: PUSH
47500: LD_VAR 0 5
47504: ARRAY
47505: ARRAY
47506: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
47507: LD_ADDR_VAR 0 7
47511: PUSH
47512: LD_VAR 0 7
47516: PUSH
47517: LD_VAR 0 6
47521: PUSH
47522: EMPTY
47523: LIST
47524: ADD
47525: ST_TO_ADDR
// end ;
47526: GO 47482
47528: POP
47529: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
47530: LD_ADDR_VAR 0 6
47534: PUSH
47535: LD_VAR 0 6
47539: PPUSH
47540: LD_VAR 0 2
47544: PUSH
47545: LD_VAR 0 2
47549: ARRAY
47550: PPUSH
47551: LD_VAR 0 3
47555: PPUSH
47556: CALL_OW 1
47560: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
47561: LD_ADDR_VAR 0 7
47565: PUSH
47566: LD_VAR 0 7
47570: PPUSH
47571: LD_VAR 0 7
47575: PPUSH
47576: LD_VAR 0 6
47580: PPUSH
47581: CALL_OW 1
47585: ST_TO_ADDR
// for i = s_arr downto 2 do
47586: LD_ADDR_VAR 0 5
47590: PUSH
47591: DOUBLE
47592: LD_VAR 0 7
47596: INC
47597: ST_TO_ADDR
47598: LD_INT 2
47600: PUSH
47601: FOR_DOWNTO
47602: IFFALSE 47686
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
47604: LD_ADDR_VAR 0 6
47608: PUSH
47609: LD_VAR 0 7
47613: PUSH
47614: LD_VAR 0 5
47618: PUSH
47619: LD_INT 1
47621: MINUS
47622: ARRAY
47623: PPUSH
47624: LD_VAR 0 2
47628: PUSH
47629: LD_VAR 0 5
47633: PUSH
47634: LD_INT 1
47636: MINUS
47637: ARRAY
47638: PPUSH
47639: LD_VAR 0 7
47643: PUSH
47644: LD_VAR 0 5
47648: ARRAY
47649: PPUSH
47650: CALL_OW 1
47654: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
47655: LD_ADDR_VAR 0 7
47659: PUSH
47660: LD_VAR 0 7
47664: PPUSH
47665: LD_VAR 0 5
47669: PUSH
47670: LD_INT 1
47672: MINUS
47673: PPUSH
47674: LD_VAR 0 6
47678: PPUSH
47679: CALL_OW 1
47683: ST_TO_ADDR
// end ;
47684: GO 47601
47686: POP
47687: POP
// result := s_arr [ 1 ] ;
47688: LD_ADDR_VAR 0 4
47692: PUSH
47693: LD_VAR 0 7
47697: PUSH
47698: LD_INT 1
47700: ARRAY
47701: ST_TO_ADDR
// end ; end ;
47702: LD_VAR 0 4
47706: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
47707: LD_INT 0
47709: PPUSH
47710: PPUSH
// if not list then
47711: LD_VAR 0 1
47715: NOT
47716: IFFALSE 47720
// exit ;
47718: GO 47811
// i := list [ pos1 ] ;
47720: LD_ADDR_VAR 0 5
47724: PUSH
47725: LD_VAR 0 1
47729: PUSH
47730: LD_VAR 0 2
47734: ARRAY
47735: ST_TO_ADDR
// if not i then
47736: LD_VAR 0 5
47740: NOT
47741: IFFALSE 47745
// exit ;
47743: GO 47811
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
47745: LD_ADDR_VAR 0 1
47749: PUSH
47750: LD_VAR 0 1
47754: PPUSH
47755: LD_VAR 0 2
47759: PPUSH
47760: LD_VAR 0 1
47764: PUSH
47765: LD_VAR 0 3
47769: ARRAY
47770: PPUSH
47771: CALL_OW 1
47775: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
47776: LD_ADDR_VAR 0 1
47780: PUSH
47781: LD_VAR 0 1
47785: PPUSH
47786: LD_VAR 0 3
47790: PPUSH
47791: LD_VAR 0 5
47795: PPUSH
47796: CALL_OW 1
47800: ST_TO_ADDR
// result := list ;
47801: LD_ADDR_VAR 0 4
47805: PUSH
47806: LD_VAR 0 1
47810: ST_TO_ADDR
// end ;
47811: LD_VAR 0 4
47815: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
47816: LD_INT 0
47818: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
47819: LD_ADDR_VAR 0 5
47823: PUSH
47824: LD_VAR 0 1
47828: PPUSH
47829: CALL_OW 250
47833: PPUSH
47834: LD_VAR 0 1
47838: PPUSH
47839: CALL_OW 251
47843: PPUSH
47844: LD_VAR 0 2
47848: PPUSH
47849: LD_VAR 0 3
47853: PPUSH
47854: LD_VAR 0 4
47858: PPUSH
47859: CALL 48237 0 5
47863: ST_TO_ADDR
// end ;
47864: LD_VAR 0 5
47868: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
47869: LD_INT 0
47871: PPUSH
47872: PPUSH
47873: PPUSH
47874: PPUSH
// if not list or not unit then
47875: LD_VAR 0 2
47879: NOT
47880: PUSH
47881: LD_VAR 0 1
47885: NOT
47886: OR
47887: IFFALSE 47891
// exit ;
47889: GO 48232
// result := [ ] ;
47891: LD_ADDR_VAR 0 5
47895: PUSH
47896: EMPTY
47897: ST_TO_ADDR
// for i in list do
47898: LD_ADDR_VAR 0 6
47902: PUSH
47903: LD_VAR 0 2
47907: PUSH
47908: FOR_IN
47909: IFFALSE 48127
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
47911: LD_ADDR_VAR 0 8
47915: PUSH
47916: LD_VAR 0 1
47920: PPUSH
47921: LD_VAR 0 6
47925: PUSH
47926: LD_INT 1
47928: ARRAY
47929: PPUSH
47930: LD_VAR 0 6
47934: PUSH
47935: LD_INT 2
47937: ARRAY
47938: PPUSH
47939: CALL_OW 297
47943: ST_TO_ADDR
// if not Count ( result ) then
47944: LD_VAR 0 5
47948: PPUSH
47949: CALL 44521 0 1
47953: NOT
47954: IFFALSE 47987
// begin result := Join ( result , [ i , tmp ] ) ;
47956: LD_ADDR_VAR 0 5
47960: PUSH
47961: LD_VAR 0 5
47965: PPUSH
47966: LD_VAR 0 6
47970: PUSH
47971: LD_VAR 0 8
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PPUSH
47980: CALL 80110 0 2
47984: ST_TO_ADDR
// continue ;
47985: GO 47908
// end ; if result [ result ] [ 2 ] <= tmp then
47987: LD_VAR 0 5
47991: PUSH
47992: LD_VAR 0 5
47996: ARRAY
47997: PUSH
47998: LD_INT 2
48000: ARRAY
48001: PUSH
48002: LD_VAR 0 8
48006: LESSEQUAL
48007: IFFALSE 48040
// result := Join ( result , [ i , tmp ] ) else
48009: LD_ADDR_VAR 0 5
48013: PUSH
48014: LD_VAR 0 5
48018: PPUSH
48019: LD_VAR 0 6
48023: PUSH
48024: LD_VAR 0 8
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PPUSH
48033: CALL 80110 0 2
48037: ST_TO_ADDR
48038: GO 48125
// begin for j := 1 to Count ( result ) do
48040: LD_ADDR_VAR 0 7
48044: PUSH
48045: DOUBLE
48046: LD_INT 1
48048: DEC
48049: ST_TO_ADDR
48050: LD_VAR 0 5
48054: PPUSH
48055: CALL 44521 0 1
48059: PUSH
48060: FOR_TO
48061: IFFALSE 48123
// begin if tmp < result [ j ] [ 2 ] then
48063: LD_VAR 0 8
48067: PUSH
48068: LD_VAR 0 5
48072: PUSH
48073: LD_VAR 0 7
48077: ARRAY
48078: PUSH
48079: LD_INT 2
48081: ARRAY
48082: LESS
48083: IFFALSE 48121
// begin result := Insert ( result , j , [ i , tmp ] ) ;
48085: LD_ADDR_VAR 0 5
48089: PUSH
48090: LD_VAR 0 5
48094: PPUSH
48095: LD_VAR 0 7
48099: PPUSH
48100: LD_VAR 0 6
48104: PUSH
48105: LD_VAR 0 8
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PPUSH
48114: CALL_OW 2
48118: ST_TO_ADDR
// break ;
48119: GO 48123
// end ; end ;
48121: GO 48060
48123: POP
48124: POP
// end ; end ;
48125: GO 47908
48127: POP
48128: POP
// if result and not asc then
48129: LD_VAR 0 5
48133: PUSH
48134: LD_VAR 0 3
48138: NOT
48139: AND
48140: IFFALSE 48157
// result := ReverseArray ( result ) ;
48142: LD_ADDR_VAR 0 5
48146: PUSH
48147: LD_VAR 0 5
48151: PPUSH
48152: CALL 75397 0 1
48156: ST_TO_ADDR
// tmp := [ ] ;
48157: LD_ADDR_VAR 0 8
48161: PUSH
48162: EMPTY
48163: ST_TO_ADDR
// if mode then
48164: LD_VAR 0 4
48168: IFFALSE 48232
// begin for i := 1 to result do
48170: LD_ADDR_VAR 0 6
48174: PUSH
48175: DOUBLE
48176: LD_INT 1
48178: DEC
48179: ST_TO_ADDR
48180: LD_VAR 0 5
48184: PUSH
48185: FOR_TO
48186: IFFALSE 48220
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
48188: LD_ADDR_VAR 0 8
48192: PUSH
48193: LD_VAR 0 8
48197: PPUSH
48198: LD_VAR 0 5
48202: PUSH
48203: LD_VAR 0 6
48207: ARRAY
48208: PUSH
48209: LD_INT 1
48211: ARRAY
48212: PPUSH
48213: CALL 80110 0 2
48217: ST_TO_ADDR
48218: GO 48185
48220: POP
48221: POP
// result := tmp ;
48222: LD_ADDR_VAR 0 5
48226: PUSH
48227: LD_VAR 0 8
48231: ST_TO_ADDR
// end ; end ;
48232: LD_VAR 0 5
48236: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
48237: LD_INT 0
48239: PPUSH
48240: PPUSH
48241: PPUSH
48242: PPUSH
// if not list then
48243: LD_VAR 0 3
48247: NOT
48248: IFFALSE 48252
// exit ;
48250: GO 48640
// result := [ ] ;
48252: LD_ADDR_VAR 0 6
48256: PUSH
48257: EMPTY
48258: ST_TO_ADDR
// for i in list do
48259: LD_ADDR_VAR 0 7
48263: PUSH
48264: LD_VAR 0 3
48268: PUSH
48269: FOR_IN
48270: IFFALSE 48472
// begin tmp := GetDistUnitXY ( i , x , y ) ;
48272: LD_ADDR_VAR 0 9
48276: PUSH
48277: LD_VAR 0 7
48281: PPUSH
48282: LD_VAR 0 1
48286: PPUSH
48287: LD_VAR 0 2
48291: PPUSH
48292: CALL_OW 297
48296: ST_TO_ADDR
// if not result then
48297: LD_VAR 0 6
48301: NOT
48302: IFFALSE 48328
// result := [ [ i , tmp ] ] else
48304: LD_ADDR_VAR 0 6
48308: PUSH
48309: LD_VAR 0 7
48313: PUSH
48314: LD_VAR 0 9
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: EMPTY
48324: LIST
48325: ST_TO_ADDR
48326: GO 48470
// begin if result [ result ] [ 2 ] < tmp then
48328: LD_VAR 0 6
48332: PUSH
48333: LD_VAR 0 6
48337: ARRAY
48338: PUSH
48339: LD_INT 2
48341: ARRAY
48342: PUSH
48343: LD_VAR 0 9
48347: LESS
48348: IFFALSE 48390
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
48350: LD_ADDR_VAR 0 6
48354: PUSH
48355: LD_VAR 0 6
48359: PPUSH
48360: LD_VAR 0 6
48364: PUSH
48365: LD_INT 1
48367: PLUS
48368: PPUSH
48369: LD_VAR 0 7
48373: PUSH
48374: LD_VAR 0 9
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PPUSH
48383: CALL_OW 2
48387: ST_TO_ADDR
48388: GO 48470
// for j = 1 to result do
48390: LD_ADDR_VAR 0 8
48394: PUSH
48395: DOUBLE
48396: LD_INT 1
48398: DEC
48399: ST_TO_ADDR
48400: LD_VAR 0 6
48404: PUSH
48405: FOR_TO
48406: IFFALSE 48468
// begin if tmp < result [ j ] [ 2 ] then
48408: LD_VAR 0 9
48412: PUSH
48413: LD_VAR 0 6
48417: PUSH
48418: LD_VAR 0 8
48422: ARRAY
48423: PUSH
48424: LD_INT 2
48426: ARRAY
48427: LESS
48428: IFFALSE 48466
// begin result := Insert ( result , j , [ i , tmp ] ) ;
48430: LD_ADDR_VAR 0 6
48434: PUSH
48435: LD_VAR 0 6
48439: PPUSH
48440: LD_VAR 0 8
48444: PPUSH
48445: LD_VAR 0 7
48449: PUSH
48450: LD_VAR 0 9
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PPUSH
48459: CALL_OW 2
48463: ST_TO_ADDR
// break ;
48464: GO 48468
// end ; end ;
48466: GO 48405
48468: POP
48469: POP
// end ; end ;
48470: GO 48269
48472: POP
48473: POP
// if result and not asc then
48474: LD_VAR 0 6
48478: PUSH
48479: LD_VAR 0 4
48483: NOT
48484: AND
48485: IFFALSE 48560
// begin tmp := result ;
48487: LD_ADDR_VAR 0 9
48491: PUSH
48492: LD_VAR 0 6
48496: ST_TO_ADDR
// for i = tmp downto 1 do
48497: LD_ADDR_VAR 0 7
48501: PUSH
48502: DOUBLE
48503: LD_VAR 0 9
48507: INC
48508: ST_TO_ADDR
48509: LD_INT 1
48511: PUSH
48512: FOR_DOWNTO
48513: IFFALSE 48558
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
48515: LD_ADDR_VAR 0 6
48519: PUSH
48520: LD_VAR 0 6
48524: PPUSH
48525: LD_VAR 0 9
48529: PUSH
48530: LD_VAR 0 7
48534: MINUS
48535: PUSH
48536: LD_INT 1
48538: PLUS
48539: PPUSH
48540: LD_VAR 0 9
48544: PUSH
48545: LD_VAR 0 7
48549: ARRAY
48550: PPUSH
48551: CALL_OW 1
48555: ST_TO_ADDR
48556: GO 48512
48558: POP
48559: POP
// end ; tmp := [ ] ;
48560: LD_ADDR_VAR 0 9
48564: PUSH
48565: EMPTY
48566: ST_TO_ADDR
// if mode then
48567: LD_VAR 0 5
48571: IFFALSE 48640
// begin for i = 1 to result do
48573: LD_ADDR_VAR 0 7
48577: PUSH
48578: DOUBLE
48579: LD_INT 1
48581: DEC
48582: ST_TO_ADDR
48583: LD_VAR 0 6
48587: PUSH
48588: FOR_TO
48589: IFFALSE 48628
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
48591: LD_ADDR_VAR 0 9
48595: PUSH
48596: LD_VAR 0 9
48600: PPUSH
48601: LD_VAR 0 7
48605: PPUSH
48606: LD_VAR 0 6
48610: PUSH
48611: LD_VAR 0 7
48615: ARRAY
48616: PUSH
48617: LD_INT 1
48619: ARRAY
48620: PPUSH
48621: CALL_OW 1
48625: ST_TO_ADDR
48626: GO 48588
48628: POP
48629: POP
// result := tmp ;
48630: LD_ADDR_VAR 0 6
48634: PUSH
48635: LD_VAR 0 9
48639: ST_TO_ADDR
// end ; end ;
48640: LD_VAR 0 6
48644: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
48645: LD_INT 0
48647: PPUSH
48648: PPUSH
48649: PPUSH
48650: PPUSH
48651: PPUSH
48652: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
48653: LD_ADDR_VAR 0 5
48657: PUSH
48658: LD_INT 0
48660: PUSH
48661: LD_INT 0
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: EMPTY
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: ST_TO_ADDR
// if not x or not y then
48675: LD_VAR 0 2
48679: NOT
48680: PUSH
48681: LD_VAR 0 3
48685: NOT
48686: OR
48687: IFFALSE 48691
// exit ;
48689: GO 50341
// if not range then
48691: LD_VAR 0 4
48695: NOT
48696: IFFALSE 48706
// range := 10 ;
48698: LD_ADDR_VAR 0 4
48702: PUSH
48703: LD_INT 10
48705: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48706: LD_ADDR_VAR 0 8
48710: PUSH
48711: LD_INT 81
48713: PUSH
48714: LD_VAR 0 1
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 92
48725: PUSH
48726: LD_VAR 0 2
48730: PUSH
48731: LD_VAR 0 3
48735: PUSH
48736: LD_VAR 0 4
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 3
48749: PUSH
48750: LD_INT 21
48752: PUSH
48753: LD_INT 3
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: LIST
48768: PPUSH
48769: CALL_OW 69
48773: ST_TO_ADDR
// if not tmp then
48774: LD_VAR 0 8
48778: NOT
48779: IFFALSE 48783
// exit ;
48781: GO 50341
// for i in tmp do
48783: LD_ADDR_VAR 0 6
48787: PUSH
48788: LD_VAR 0 8
48792: PUSH
48793: FOR_IN
48794: IFFALSE 50316
// begin points := [ 0 , 0 , 0 ] ;
48796: LD_ADDR_VAR 0 9
48800: PUSH
48801: LD_INT 0
48803: PUSH
48804: LD_INT 0
48806: PUSH
48807: LD_INT 0
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: LIST
48814: ST_TO_ADDR
// bpoints := 1 ;
48815: LD_ADDR_VAR 0 10
48819: PUSH
48820: LD_INT 1
48822: ST_TO_ADDR
// case GetType ( i ) of unit_human :
48823: LD_VAR 0 6
48827: PPUSH
48828: CALL_OW 247
48832: PUSH
48833: LD_INT 1
48835: DOUBLE
48836: EQUAL
48837: IFTRUE 48841
48839: GO 49419
48841: POP
// begin if GetClass ( i ) = 1 then
48842: LD_VAR 0 6
48846: PPUSH
48847: CALL_OW 257
48851: PUSH
48852: LD_INT 1
48854: EQUAL
48855: IFFALSE 48876
// points := [ 10 , 5 , 3 ] ;
48857: LD_ADDR_VAR 0 9
48861: PUSH
48862: LD_INT 10
48864: PUSH
48865: LD_INT 5
48867: PUSH
48868: LD_INT 3
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: LIST
48875: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
48876: LD_VAR 0 6
48880: PPUSH
48881: CALL_OW 257
48885: PUSH
48886: LD_INT 2
48888: PUSH
48889: LD_INT 3
48891: PUSH
48892: LD_INT 4
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: LIST
48899: IN
48900: IFFALSE 48921
// points := [ 3 , 2 , 1 ] ;
48902: LD_ADDR_VAR 0 9
48906: PUSH
48907: LD_INT 3
48909: PUSH
48910: LD_INT 2
48912: PUSH
48913: LD_INT 1
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: LIST
48920: ST_TO_ADDR
// if GetClass ( i ) = 5 then
48921: LD_VAR 0 6
48925: PPUSH
48926: CALL_OW 257
48930: PUSH
48931: LD_INT 5
48933: EQUAL
48934: IFFALSE 48955
// points := [ 130 , 5 , 2 ] ;
48936: LD_ADDR_VAR 0 9
48940: PUSH
48941: LD_INT 130
48943: PUSH
48944: LD_INT 5
48946: PUSH
48947: LD_INT 2
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: LIST
48954: ST_TO_ADDR
// if GetClass ( i ) = 8 then
48955: LD_VAR 0 6
48959: PPUSH
48960: CALL_OW 257
48964: PUSH
48965: LD_INT 8
48967: EQUAL
48968: IFFALSE 48989
// points := [ 35 , 35 , 30 ] ;
48970: LD_ADDR_VAR 0 9
48974: PUSH
48975: LD_INT 35
48977: PUSH
48978: LD_INT 35
48980: PUSH
48981: LD_INT 30
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: LIST
48988: ST_TO_ADDR
// if GetClass ( i ) = 9 then
48989: LD_VAR 0 6
48993: PPUSH
48994: CALL_OW 257
48998: PUSH
48999: LD_INT 9
49001: EQUAL
49002: IFFALSE 49023
// points := [ 20 , 55 , 40 ] ;
49004: LD_ADDR_VAR 0 9
49008: PUSH
49009: LD_INT 20
49011: PUSH
49012: LD_INT 55
49014: PUSH
49015: LD_INT 40
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: LIST
49022: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
49023: LD_VAR 0 6
49027: PPUSH
49028: CALL_OW 257
49032: PUSH
49033: LD_INT 12
49035: PUSH
49036: LD_INT 16
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: IN
49043: IFFALSE 49064
// points := [ 5 , 3 , 2 ] ;
49045: LD_ADDR_VAR 0 9
49049: PUSH
49050: LD_INT 5
49052: PUSH
49053: LD_INT 3
49055: PUSH
49056: LD_INT 2
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: LIST
49063: ST_TO_ADDR
// if GetClass ( i ) = 17 then
49064: LD_VAR 0 6
49068: PPUSH
49069: CALL_OW 257
49073: PUSH
49074: LD_INT 17
49076: EQUAL
49077: IFFALSE 49098
// points := [ 100 , 50 , 75 ] ;
49079: LD_ADDR_VAR 0 9
49083: PUSH
49084: LD_INT 100
49086: PUSH
49087: LD_INT 50
49089: PUSH
49090: LD_INT 75
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: LIST
49097: ST_TO_ADDR
// if GetClass ( i ) = 15 then
49098: LD_VAR 0 6
49102: PPUSH
49103: CALL_OW 257
49107: PUSH
49108: LD_INT 15
49110: EQUAL
49111: IFFALSE 49132
// points := [ 10 , 5 , 3 ] ;
49113: LD_ADDR_VAR 0 9
49117: PUSH
49118: LD_INT 10
49120: PUSH
49121: LD_INT 5
49123: PUSH
49124: LD_INT 3
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: LIST
49131: ST_TO_ADDR
// if GetClass ( i ) = 14 then
49132: LD_VAR 0 6
49136: PPUSH
49137: CALL_OW 257
49141: PUSH
49142: LD_INT 14
49144: EQUAL
49145: IFFALSE 49166
// points := [ 10 , 0 , 0 ] ;
49147: LD_ADDR_VAR 0 9
49151: PUSH
49152: LD_INT 10
49154: PUSH
49155: LD_INT 0
49157: PUSH
49158: LD_INT 0
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: LIST
49165: ST_TO_ADDR
// if GetClass ( i ) = 11 then
49166: LD_VAR 0 6
49170: PPUSH
49171: CALL_OW 257
49175: PUSH
49176: LD_INT 11
49178: EQUAL
49179: IFFALSE 49200
// points := [ 30 , 10 , 5 ] ;
49181: LD_ADDR_VAR 0 9
49185: PUSH
49186: LD_INT 30
49188: PUSH
49189: LD_INT 10
49191: PUSH
49192: LD_INT 5
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: LIST
49199: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
49200: LD_VAR 0 1
49204: PPUSH
49205: LD_INT 5
49207: PPUSH
49208: CALL_OW 321
49212: PUSH
49213: LD_INT 2
49215: EQUAL
49216: IFFALSE 49233
// bpoints := bpoints * 1.8 ;
49218: LD_ADDR_VAR 0 10
49222: PUSH
49223: LD_VAR 0 10
49227: PUSH
49228: LD_REAL  1.80000000000000E+0000
49231: MUL
49232: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
49233: LD_VAR 0 6
49237: PPUSH
49238: CALL_OW 257
49242: PUSH
49243: LD_INT 1
49245: PUSH
49246: LD_INT 2
49248: PUSH
49249: LD_INT 3
49251: PUSH
49252: LD_INT 4
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: IN
49261: PUSH
49262: LD_VAR 0 1
49266: PPUSH
49267: LD_INT 51
49269: PPUSH
49270: CALL_OW 321
49274: PUSH
49275: LD_INT 2
49277: EQUAL
49278: AND
49279: IFFALSE 49296
// bpoints := bpoints * 1.2 ;
49281: LD_ADDR_VAR 0 10
49285: PUSH
49286: LD_VAR 0 10
49290: PUSH
49291: LD_REAL  1.20000000000000E+0000
49294: MUL
49295: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
49296: LD_VAR 0 6
49300: PPUSH
49301: CALL_OW 257
49305: PUSH
49306: LD_INT 5
49308: PUSH
49309: LD_INT 7
49311: PUSH
49312: LD_INT 9
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: LIST
49319: IN
49320: PUSH
49321: LD_VAR 0 1
49325: PPUSH
49326: LD_INT 52
49328: PPUSH
49329: CALL_OW 321
49333: PUSH
49334: LD_INT 2
49336: EQUAL
49337: AND
49338: IFFALSE 49355
// bpoints := bpoints * 1.5 ;
49340: LD_ADDR_VAR 0 10
49344: PUSH
49345: LD_VAR 0 10
49349: PUSH
49350: LD_REAL  1.50000000000000E+0000
49353: MUL
49354: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
49355: LD_VAR 0 1
49359: PPUSH
49360: LD_INT 66
49362: PPUSH
49363: CALL_OW 321
49367: PUSH
49368: LD_INT 2
49370: EQUAL
49371: IFFALSE 49388
// bpoints := bpoints * 1.1 ;
49373: LD_ADDR_VAR 0 10
49377: PUSH
49378: LD_VAR 0 10
49382: PUSH
49383: LD_REAL  1.10000000000000E+0000
49386: MUL
49387: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
49388: LD_ADDR_VAR 0 10
49392: PUSH
49393: LD_VAR 0 10
49397: PUSH
49398: LD_VAR 0 6
49402: PPUSH
49403: LD_INT 1
49405: PPUSH
49406: CALL_OW 259
49410: PUSH
49411: LD_REAL  1.15000000000000E+0000
49414: MUL
49415: MUL
49416: ST_TO_ADDR
// end ; unit_vehicle :
49417: GO 50245
49419: LD_INT 2
49421: DOUBLE
49422: EQUAL
49423: IFTRUE 49427
49425: GO 50233
49427: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
49428: LD_VAR 0 6
49432: PPUSH
49433: CALL_OW 264
49437: PUSH
49438: LD_INT 2
49440: PUSH
49441: LD_INT 42
49443: PUSH
49444: LD_INT 24
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: LIST
49451: IN
49452: IFFALSE 49473
// points := [ 25 , 5 , 3 ] ;
49454: LD_ADDR_VAR 0 9
49458: PUSH
49459: LD_INT 25
49461: PUSH
49462: LD_INT 5
49464: PUSH
49465: LD_INT 3
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: LIST
49472: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
49473: LD_VAR 0 6
49477: PPUSH
49478: CALL_OW 264
49482: PUSH
49483: LD_INT 4
49485: PUSH
49486: LD_INT 43
49488: PUSH
49489: LD_INT 25
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: LIST
49496: IN
49497: IFFALSE 49518
// points := [ 40 , 15 , 5 ] ;
49499: LD_ADDR_VAR 0 9
49503: PUSH
49504: LD_INT 40
49506: PUSH
49507: LD_INT 15
49509: PUSH
49510: LD_INT 5
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: LIST
49517: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
49518: LD_VAR 0 6
49522: PPUSH
49523: CALL_OW 264
49527: PUSH
49528: LD_INT 3
49530: PUSH
49531: LD_INT 23
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: IN
49538: IFFALSE 49559
// points := [ 7 , 25 , 8 ] ;
49540: LD_ADDR_VAR 0 9
49544: PUSH
49545: LD_INT 7
49547: PUSH
49548: LD_INT 25
49550: PUSH
49551: LD_INT 8
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: LIST
49558: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
49559: LD_VAR 0 6
49563: PPUSH
49564: CALL_OW 264
49568: PUSH
49569: LD_INT 5
49571: PUSH
49572: LD_INT 27
49574: PUSH
49575: LD_INT 44
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: LIST
49582: IN
49583: IFFALSE 49604
// points := [ 14 , 50 , 16 ] ;
49585: LD_ADDR_VAR 0 9
49589: PUSH
49590: LD_INT 14
49592: PUSH
49593: LD_INT 50
49595: PUSH
49596: LD_INT 16
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: LIST
49603: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
49604: LD_VAR 0 6
49608: PPUSH
49609: CALL_OW 264
49613: PUSH
49614: LD_INT 6
49616: PUSH
49617: LD_INT 46
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: IN
49624: IFFALSE 49645
// points := [ 32 , 120 , 70 ] ;
49626: LD_ADDR_VAR 0 9
49630: PUSH
49631: LD_INT 32
49633: PUSH
49634: LD_INT 120
49636: PUSH
49637: LD_INT 70
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: LIST
49644: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
49645: LD_VAR 0 6
49649: PPUSH
49650: CALL_OW 264
49654: PUSH
49655: LD_INT 7
49657: PUSH
49658: LD_INT 28
49660: PUSH
49661: LD_INT 45
49663: PUSH
49664: LD_INT 92
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: IN
49673: IFFALSE 49694
// points := [ 35 , 20 , 45 ] ;
49675: LD_ADDR_VAR 0 9
49679: PUSH
49680: LD_INT 35
49682: PUSH
49683: LD_INT 20
49685: PUSH
49686: LD_INT 45
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: LIST
49693: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
49694: LD_VAR 0 6
49698: PPUSH
49699: CALL_OW 264
49703: PUSH
49704: LD_INT 47
49706: PUSH
49707: EMPTY
49708: LIST
49709: IN
49710: IFFALSE 49731
// points := [ 67 , 45 , 75 ] ;
49712: LD_ADDR_VAR 0 9
49716: PUSH
49717: LD_INT 67
49719: PUSH
49720: LD_INT 45
49722: PUSH
49723: LD_INT 75
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: LIST
49730: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
49731: LD_VAR 0 6
49735: PPUSH
49736: CALL_OW 264
49740: PUSH
49741: LD_INT 26
49743: PUSH
49744: EMPTY
49745: LIST
49746: IN
49747: IFFALSE 49768
// points := [ 120 , 30 , 80 ] ;
49749: LD_ADDR_VAR 0 9
49753: PUSH
49754: LD_INT 120
49756: PUSH
49757: LD_INT 30
49759: PUSH
49760: LD_INT 80
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: LIST
49767: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
49768: LD_VAR 0 6
49772: PPUSH
49773: CALL_OW 264
49777: PUSH
49778: LD_INT 22
49780: PUSH
49781: EMPTY
49782: LIST
49783: IN
49784: IFFALSE 49805
// points := [ 40 , 1 , 1 ] ;
49786: LD_ADDR_VAR 0 9
49790: PUSH
49791: LD_INT 40
49793: PUSH
49794: LD_INT 1
49796: PUSH
49797: LD_INT 1
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: LIST
49804: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
49805: LD_VAR 0 6
49809: PPUSH
49810: CALL_OW 264
49814: PUSH
49815: LD_INT 29
49817: PUSH
49818: EMPTY
49819: LIST
49820: IN
49821: IFFALSE 49842
// points := [ 70 , 200 , 400 ] ;
49823: LD_ADDR_VAR 0 9
49827: PUSH
49828: LD_INT 70
49830: PUSH
49831: LD_INT 200
49833: PUSH
49834: LD_INT 400
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: LIST
49841: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
49842: LD_VAR 0 6
49846: PPUSH
49847: CALL_OW 264
49851: PUSH
49852: LD_INT 14
49854: PUSH
49855: LD_INT 53
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: IN
49862: IFFALSE 49883
// points := [ 40 , 10 , 20 ] ;
49864: LD_ADDR_VAR 0 9
49868: PUSH
49869: LD_INT 40
49871: PUSH
49872: LD_INT 10
49874: PUSH
49875: LD_INT 20
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: LIST
49882: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
49883: LD_VAR 0 6
49887: PPUSH
49888: CALL_OW 264
49892: PUSH
49893: LD_INT 9
49895: PUSH
49896: EMPTY
49897: LIST
49898: IN
49899: IFFALSE 49920
// points := [ 5 , 70 , 20 ] ;
49901: LD_ADDR_VAR 0 9
49905: PUSH
49906: LD_INT 5
49908: PUSH
49909: LD_INT 70
49911: PUSH
49912: LD_INT 20
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: LIST
49919: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
49920: LD_VAR 0 6
49924: PPUSH
49925: CALL_OW 264
49929: PUSH
49930: LD_INT 10
49932: PUSH
49933: EMPTY
49934: LIST
49935: IN
49936: IFFALSE 49957
// points := [ 35 , 110 , 70 ] ;
49938: LD_ADDR_VAR 0 9
49942: PUSH
49943: LD_INT 35
49945: PUSH
49946: LD_INT 110
49948: PUSH
49949: LD_INT 70
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: LIST
49956: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
49957: LD_VAR 0 6
49961: PPUSH
49962: CALL_OW 265
49966: PUSH
49967: LD_INT 25
49969: EQUAL
49970: IFFALSE 49991
// points := [ 80 , 65 , 100 ] ;
49972: LD_ADDR_VAR 0 9
49976: PUSH
49977: LD_INT 80
49979: PUSH
49980: LD_INT 65
49982: PUSH
49983: LD_INT 100
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: LIST
49990: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
49991: LD_VAR 0 6
49995: PPUSH
49996: CALL_OW 263
50000: PUSH
50001: LD_INT 1
50003: EQUAL
50004: IFFALSE 50039
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
50006: LD_ADDR_VAR 0 10
50010: PUSH
50011: LD_VAR 0 10
50015: PUSH
50016: LD_VAR 0 6
50020: PPUSH
50021: CALL_OW 311
50025: PPUSH
50026: LD_INT 3
50028: PPUSH
50029: CALL_OW 259
50033: PUSH
50034: LD_INT 4
50036: MUL
50037: MUL
50038: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
50039: LD_VAR 0 6
50043: PPUSH
50044: CALL_OW 263
50048: PUSH
50049: LD_INT 2
50051: EQUAL
50052: IFFALSE 50103
// begin j := IsControledBy ( i ) ;
50054: LD_ADDR_VAR 0 7
50058: PUSH
50059: LD_VAR 0 6
50063: PPUSH
50064: CALL_OW 312
50068: ST_TO_ADDR
// if j then
50069: LD_VAR 0 7
50073: IFFALSE 50103
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
50075: LD_ADDR_VAR 0 10
50079: PUSH
50080: LD_VAR 0 10
50084: PUSH
50085: LD_VAR 0 7
50089: PPUSH
50090: LD_INT 3
50092: PPUSH
50093: CALL_OW 259
50097: PUSH
50098: LD_INT 3
50100: MUL
50101: MUL
50102: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
50103: LD_VAR 0 6
50107: PPUSH
50108: CALL_OW 264
50112: PUSH
50113: LD_INT 5
50115: PUSH
50116: LD_INT 6
50118: PUSH
50119: LD_INT 46
50121: PUSH
50122: LD_INT 44
50124: PUSH
50125: LD_INT 47
50127: PUSH
50128: LD_INT 45
50130: PUSH
50131: LD_INT 28
50133: PUSH
50134: LD_INT 7
50136: PUSH
50137: LD_INT 27
50139: PUSH
50140: LD_INT 29
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: IN
50155: PUSH
50156: LD_VAR 0 1
50160: PPUSH
50161: LD_INT 52
50163: PPUSH
50164: CALL_OW 321
50168: PUSH
50169: LD_INT 2
50171: EQUAL
50172: AND
50173: IFFALSE 50190
// bpoints := bpoints * 1.2 ;
50175: LD_ADDR_VAR 0 10
50179: PUSH
50180: LD_VAR 0 10
50184: PUSH
50185: LD_REAL  1.20000000000000E+0000
50188: MUL
50189: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
50190: LD_VAR 0 6
50194: PPUSH
50195: CALL_OW 264
50199: PUSH
50200: LD_INT 6
50202: PUSH
50203: LD_INT 46
50205: PUSH
50206: LD_INT 47
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: LIST
50213: IN
50214: IFFALSE 50231
// bpoints := bpoints * 1.2 ;
50216: LD_ADDR_VAR 0 10
50220: PUSH
50221: LD_VAR 0 10
50225: PUSH
50226: LD_REAL  1.20000000000000E+0000
50229: MUL
50230: ST_TO_ADDR
// end ; unit_building :
50231: GO 50245
50233: LD_INT 3
50235: DOUBLE
50236: EQUAL
50237: IFTRUE 50241
50239: GO 50244
50241: POP
// ; end ;
50242: GO 50245
50244: POP
// for j = 1 to 3 do
50245: LD_ADDR_VAR 0 7
50249: PUSH
50250: DOUBLE
50251: LD_INT 1
50253: DEC
50254: ST_TO_ADDR
50255: LD_INT 3
50257: PUSH
50258: FOR_TO
50259: IFFALSE 50312
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
50261: LD_ADDR_VAR 0 5
50265: PUSH
50266: LD_VAR 0 5
50270: PPUSH
50271: LD_VAR 0 7
50275: PPUSH
50276: LD_VAR 0 5
50280: PUSH
50281: LD_VAR 0 7
50285: ARRAY
50286: PUSH
50287: LD_VAR 0 9
50291: PUSH
50292: LD_VAR 0 7
50296: ARRAY
50297: PUSH
50298: LD_VAR 0 10
50302: MUL
50303: PLUS
50304: PPUSH
50305: CALL_OW 1
50309: ST_TO_ADDR
50310: GO 50258
50312: POP
50313: POP
// end ;
50314: GO 48793
50316: POP
50317: POP
// result := Replace ( result , 4 , tmp ) ;
50318: LD_ADDR_VAR 0 5
50322: PUSH
50323: LD_VAR 0 5
50327: PPUSH
50328: LD_INT 4
50330: PPUSH
50331: LD_VAR 0 8
50335: PPUSH
50336: CALL_OW 1
50340: ST_TO_ADDR
// end ;
50341: LD_VAR 0 5
50345: RET
// export function DangerAtRange ( unit , range ) ; begin
50346: LD_INT 0
50348: PPUSH
// if not unit then
50349: LD_VAR 0 1
50353: NOT
50354: IFFALSE 50358
// exit ;
50356: GO 50403
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
50358: LD_ADDR_VAR 0 3
50362: PUSH
50363: LD_VAR 0 1
50367: PPUSH
50368: CALL_OW 255
50372: PPUSH
50373: LD_VAR 0 1
50377: PPUSH
50378: CALL_OW 250
50382: PPUSH
50383: LD_VAR 0 1
50387: PPUSH
50388: CALL_OW 251
50392: PPUSH
50393: LD_VAR 0 2
50397: PPUSH
50398: CALL 48645 0 4
50402: ST_TO_ADDR
// end ;
50403: LD_VAR 0 3
50407: RET
// export function DangerInArea ( side , area ) ; begin
50408: LD_INT 0
50410: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
50411: LD_ADDR_VAR 0 3
50415: PUSH
50416: LD_VAR 0 2
50420: PPUSH
50421: LD_INT 81
50423: PUSH
50424: LD_VAR 0 1
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PPUSH
50433: CALL_OW 70
50437: ST_TO_ADDR
// end ;
50438: LD_VAR 0 3
50442: RET
// export function IsExtension ( b ) ; begin
50443: LD_INT 0
50445: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
50446: LD_ADDR_VAR 0 2
50450: PUSH
50451: LD_VAR 0 1
50455: PUSH
50456: LD_INT 23
50458: PUSH
50459: LD_INT 20
50461: PUSH
50462: LD_INT 22
50464: PUSH
50465: LD_INT 17
50467: PUSH
50468: LD_INT 24
50470: PUSH
50471: LD_INT 21
50473: PUSH
50474: LD_INT 19
50476: PUSH
50477: LD_INT 16
50479: PUSH
50480: LD_INT 25
50482: PUSH
50483: LD_INT 18
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: IN
50498: ST_TO_ADDR
// end ;
50499: LD_VAR 0 2
50503: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
50504: LD_INT 0
50506: PPUSH
50507: PPUSH
50508: PPUSH
// result := [ ] ;
50509: LD_ADDR_VAR 0 4
50513: PUSH
50514: EMPTY
50515: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
50516: LD_ADDR_VAR 0 5
50520: PUSH
50521: LD_VAR 0 2
50525: PPUSH
50526: LD_INT 21
50528: PUSH
50529: LD_INT 3
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PPUSH
50536: CALL_OW 70
50540: ST_TO_ADDR
// if not tmp then
50541: LD_VAR 0 5
50545: NOT
50546: IFFALSE 50550
// exit ;
50548: GO 50614
// if checkLink then
50550: LD_VAR 0 3
50554: IFFALSE 50604
// begin for i in tmp do
50556: LD_ADDR_VAR 0 6
50560: PUSH
50561: LD_VAR 0 5
50565: PUSH
50566: FOR_IN
50567: IFFALSE 50602
// if GetBase ( i ) <> base then
50569: LD_VAR 0 6
50573: PPUSH
50574: CALL_OW 274
50578: PUSH
50579: LD_VAR 0 1
50583: NONEQUAL
50584: IFFALSE 50600
// ComLinkToBase ( base , i ) ;
50586: LD_VAR 0 1
50590: PPUSH
50591: LD_VAR 0 6
50595: PPUSH
50596: CALL_OW 169
50600: GO 50566
50602: POP
50603: POP
// end ; result := tmp ;
50604: LD_ADDR_VAR 0 4
50608: PUSH
50609: LD_VAR 0 5
50613: ST_TO_ADDR
// end ;
50614: LD_VAR 0 4
50618: RET
// export function ComComplete ( units , b ) ; var i ; begin
50619: LD_INT 0
50621: PPUSH
50622: PPUSH
// if not units then
50623: LD_VAR 0 1
50627: NOT
50628: IFFALSE 50632
// exit ;
50630: GO 50722
// for i in units do
50632: LD_ADDR_VAR 0 4
50636: PUSH
50637: LD_VAR 0 1
50641: PUSH
50642: FOR_IN
50643: IFFALSE 50720
// if BuildingStatus ( b ) = bs_build then
50645: LD_VAR 0 2
50649: PPUSH
50650: CALL_OW 461
50654: PUSH
50655: LD_INT 1
50657: EQUAL
50658: IFFALSE 50718
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
50660: LD_VAR 0 4
50664: PPUSH
50665: LD_STRING h
50667: PUSH
50668: LD_VAR 0 2
50672: PPUSH
50673: CALL_OW 250
50677: PUSH
50678: LD_VAR 0 2
50682: PPUSH
50683: CALL_OW 251
50687: PUSH
50688: LD_VAR 0 2
50692: PUSH
50693: LD_INT 0
50695: PUSH
50696: LD_INT 0
50698: PUSH
50699: LD_INT 0
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: PUSH
50711: EMPTY
50712: LIST
50713: PPUSH
50714: CALL_OW 446
50718: GO 50642
50720: POP
50721: POP
// end ;
50722: LD_VAR 0 3
50726: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
50727: LD_INT 0
50729: PPUSH
50730: PPUSH
50731: PPUSH
50732: PPUSH
50733: PPUSH
50734: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
50735: LD_VAR 0 1
50739: NOT
50740: PUSH
50741: LD_VAR 0 1
50745: PPUSH
50746: CALL_OW 263
50750: PUSH
50751: LD_INT 2
50753: NONEQUAL
50754: OR
50755: IFFALSE 50759
// exit ;
50757: GO 51075
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
50759: LD_ADDR_VAR 0 6
50763: PUSH
50764: LD_INT 22
50766: PUSH
50767: LD_VAR 0 1
50771: PPUSH
50772: CALL_OW 255
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 2
50783: PUSH
50784: LD_INT 30
50786: PUSH
50787: LD_INT 36
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 34
50796: PUSH
50797: LD_INT 31
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: LIST
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PPUSH
50813: CALL_OW 69
50817: ST_TO_ADDR
// if not tmp then
50818: LD_VAR 0 6
50822: NOT
50823: IFFALSE 50827
// exit ;
50825: GO 51075
// result := [ ] ;
50827: LD_ADDR_VAR 0 2
50831: PUSH
50832: EMPTY
50833: ST_TO_ADDR
// for i in tmp do
50834: LD_ADDR_VAR 0 3
50838: PUSH
50839: LD_VAR 0 6
50843: PUSH
50844: FOR_IN
50845: IFFALSE 50916
// begin t := UnitsInside ( i ) ;
50847: LD_ADDR_VAR 0 4
50851: PUSH
50852: LD_VAR 0 3
50856: PPUSH
50857: CALL_OW 313
50861: ST_TO_ADDR
// if t then
50862: LD_VAR 0 4
50866: IFFALSE 50914
// for j in t do
50868: LD_ADDR_VAR 0 7
50872: PUSH
50873: LD_VAR 0 4
50877: PUSH
50878: FOR_IN
50879: IFFALSE 50912
// result := Replace ( result , result + 1 , j ) ;
50881: LD_ADDR_VAR 0 2
50885: PUSH
50886: LD_VAR 0 2
50890: PPUSH
50891: LD_VAR 0 2
50895: PUSH
50896: LD_INT 1
50898: PLUS
50899: PPUSH
50900: LD_VAR 0 7
50904: PPUSH
50905: CALL_OW 1
50909: ST_TO_ADDR
50910: GO 50878
50912: POP
50913: POP
// end ;
50914: GO 50844
50916: POP
50917: POP
// if not result then
50918: LD_VAR 0 2
50922: NOT
50923: IFFALSE 50927
// exit ;
50925: GO 51075
// mech := result [ 1 ] ;
50927: LD_ADDR_VAR 0 5
50931: PUSH
50932: LD_VAR 0 2
50936: PUSH
50937: LD_INT 1
50939: ARRAY
50940: ST_TO_ADDR
// if result > 1 then
50941: LD_VAR 0 2
50945: PUSH
50946: LD_INT 1
50948: GREATER
50949: IFFALSE 51061
// begin for i = 2 to result do
50951: LD_ADDR_VAR 0 3
50955: PUSH
50956: DOUBLE
50957: LD_INT 2
50959: DEC
50960: ST_TO_ADDR
50961: LD_VAR 0 2
50965: PUSH
50966: FOR_TO
50967: IFFALSE 51059
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
50969: LD_ADDR_VAR 0 4
50973: PUSH
50974: LD_VAR 0 2
50978: PUSH
50979: LD_VAR 0 3
50983: ARRAY
50984: PPUSH
50985: LD_INT 3
50987: PPUSH
50988: CALL_OW 259
50992: PUSH
50993: LD_VAR 0 2
50997: PUSH
50998: LD_VAR 0 3
51002: ARRAY
51003: PPUSH
51004: CALL_OW 432
51008: MINUS
51009: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
51010: LD_VAR 0 4
51014: PUSH
51015: LD_VAR 0 5
51019: PPUSH
51020: LD_INT 3
51022: PPUSH
51023: CALL_OW 259
51027: PUSH
51028: LD_VAR 0 5
51032: PPUSH
51033: CALL_OW 432
51037: MINUS
51038: GREATEREQUAL
51039: IFFALSE 51057
// mech := result [ i ] ;
51041: LD_ADDR_VAR 0 5
51045: PUSH
51046: LD_VAR 0 2
51050: PUSH
51051: LD_VAR 0 3
51055: ARRAY
51056: ST_TO_ADDR
// end ;
51057: GO 50966
51059: POP
51060: POP
// end ; ComLinkTo ( vehicle , mech ) ;
51061: LD_VAR 0 1
51065: PPUSH
51066: LD_VAR 0 5
51070: PPUSH
51071: CALL_OW 135
// end ;
51075: LD_VAR 0 2
51079: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
51080: LD_INT 0
51082: PPUSH
51083: PPUSH
51084: PPUSH
51085: PPUSH
51086: PPUSH
51087: PPUSH
51088: PPUSH
51089: PPUSH
51090: PPUSH
51091: PPUSH
51092: PPUSH
51093: PPUSH
51094: PPUSH
// result := [ ] ;
51095: LD_ADDR_VAR 0 7
51099: PUSH
51100: EMPTY
51101: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
51102: LD_VAR 0 1
51106: PPUSH
51107: CALL_OW 266
51111: PUSH
51112: LD_INT 0
51114: PUSH
51115: LD_INT 1
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: IN
51122: NOT
51123: IFFALSE 51127
// exit ;
51125: GO 52761
// if name then
51127: LD_VAR 0 3
51131: IFFALSE 51147
// SetBName ( base_dep , name ) ;
51133: LD_VAR 0 1
51137: PPUSH
51138: LD_VAR 0 3
51142: PPUSH
51143: CALL_OW 500
// base := GetBase ( base_dep ) ;
51147: LD_ADDR_VAR 0 15
51151: PUSH
51152: LD_VAR 0 1
51156: PPUSH
51157: CALL_OW 274
51161: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
51162: LD_ADDR_VAR 0 16
51166: PUSH
51167: LD_VAR 0 1
51171: PPUSH
51172: CALL_OW 255
51176: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
51177: LD_ADDR_VAR 0 17
51181: PUSH
51182: LD_VAR 0 1
51186: PPUSH
51187: CALL_OW 248
51191: ST_TO_ADDR
// if sources then
51192: LD_VAR 0 5
51196: IFFALSE 51243
// for i = 1 to 3 do
51198: LD_ADDR_VAR 0 8
51202: PUSH
51203: DOUBLE
51204: LD_INT 1
51206: DEC
51207: ST_TO_ADDR
51208: LD_INT 3
51210: PUSH
51211: FOR_TO
51212: IFFALSE 51241
// AddResourceType ( base , i , sources [ i ] ) ;
51214: LD_VAR 0 15
51218: PPUSH
51219: LD_VAR 0 8
51223: PPUSH
51224: LD_VAR 0 5
51228: PUSH
51229: LD_VAR 0 8
51233: ARRAY
51234: PPUSH
51235: CALL_OW 276
51239: GO 51211
51241: POP
51242: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
51243: LD_ADDR_VAR 0 18
51247: PUSH
51248: LD_VAR 0 15
51252: PPUSH
51253: LD_VAR 0 2
51257: PPUSH
51258: LD_INT 1
51260: PPUSH
51261: CALL 50504 0 3
51265: ST_TO_ADDR
// InitHc ;
51266: CALL_OW 19
// InitUc ;
51270: CALL_OW 18
// uc_side := side ;
51274: LD_ADDR_OWVAR 20
51278: PUSH
51279: LD_VAR 0 16
51283: ST_TO_ADDR
// uc_nation := nation ;
51284: LD_ADDR_OWVAR 21
51288: PUSH
51289: LD_VAR 0 17
51293: ST_TO_ADDR
// if buildings then
51294: LD_VAR 0 18
51298: IFFALSE 52620
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
51300: LD_ADDR_VAR 0 19
51304: PUSH
51305: LD_VAR 0 18
51309: PPUSH
51310: LD_INT 2
51312: PUSH
51313: LD_INT 30
51315: PUSH
51316: LD_INT 29
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 30
51325: PUSH
51326: LD_INT 30
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: LIST
51337: PPUSH
51338: CALL_OW 72
51342: ST_TO_ADDR
// if tmp then
51343: LD_VAR 0 19
51347: IFFALSE 51395
// for i in tmp do
51349: LD_ADDR_VAR 0 8
51353: PUSH
51354: LD_VAR 0 19
51358: PUSH
51359: FOR_IN
51360: IFFALSE 51393
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
51362: LD_VAR 0 8
51366: PPUSH
51367: CALL_OW 250
51371: PPUSH
51372: LD_VAR 0 8
51376: PPUSH
51377: CALL_OW 251
51381: PPUSH
51382: LD_VAR 0 16
51386: PPUSH
51387: CALL_OW 441
51391: GO 51359
51393: POP
51394: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
51395: LD_VAR 0 18
51399: PPUSH
51400: LD_INT 2
51402: PUSH
51403: LD_INT 30
51405: PUSH
51406: LD_INT 32
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 30
51415: PUSH
51416: LD_INT 33
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: LIST
51427: PPUSH
51428: CALL_OW 72
51432: IFFALSE 51520
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
51434: LD_ADDR_VAR 0 8
51438: PUSH
51439: LD_VAR 0 18
51443: PPUSH
51444: LD_INT 2
51446: PUSH
51447: LD_INT 30
51449: PUSH
51450: LD_INT 32
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 30
51459: PUSH
51460: LD_INT 33
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: LIST
51471: PPUSH
51472: CALL_OW 72
51476: PUSH
51477: FOR_IN
51478: IFFALSE 51518
// begin if not GetBWeapon ( i ) then
51480: LD_VAR 0 8
51484: PPUSH
51485: CALL_OW 269
51489: NOT
51490: IFFALSE 51516
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
51492: LD_VAR 0 8
51496: PPUSH
51497: LD_VAR 0 8
51501: PPUSH
51502: LD_VAR 0 2
51506: PPUSH
51507: CALL 52766 0 2
51511: PPUSH
51512: CALL_OW 431
// end ;
51516: GO 51477
51518: POP
51519: POP
// end ; for i = 1 to personel do
51520: LD_ADDR_VAR 0 8
51524: PUSH
51525: DOUBLE
51526: LD_INT 1
51528: DEC
51529: ST_TO_ADDR
51530: LD_VAR 0 6
51534: PUSH
51535: FOR_TO
51536: IFFALSE 52600
// begin if i > 4 then
51538: LD_VAR 0 8
51542: PUSH
51543: LD_INT 4
51545: GREATER
51546: IFFALSE 51550
// break ;
51548: GO 52600
// case i of 1 :
51550: LD_VAR 0 8
51554: PUSH
51555: LD_INT 1
51557: DOUBLE
51558: EQUAL
51559: IFTRUE 51563
51561: GO 51643
51563: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
51564: LD_ADDR_VAR 0 12
51568: PUSH
51569: LD_VAR 0 18
51573: PPUSH
51574: LD_INT 22
51576: PUSH
51577: LD_VAR 0 16
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 58
51588: PUSH
51589: EMPTY
51590: LIST
51591: PUSH
51592: LD_INT 2
51594: PUSH
51595: LD_INT 30
51597: PUSH
51598: LD_INT 32
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 30
51607: PUSH
51608: LD_INT 4
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 30
51617: PUSH
51618: LD_INT 5
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: LIST
51635: PPUSH
51636: CALL_OW 72
51640: ST_TO_ADDR
51641: GO 51865
51643: LD_INT 2
51645: DOUBLE
51646: EQUAL
51647: IFTRUE 51651
51649: GO 51713
51651: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
51652: LD_ADDR_VAR 0 12
51656: PUSH
51657: LD_VAR 0 18
51661: PPUSH
51662: LD_INT 22
51664: PUSH
51665: LD_VAR 0 16
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 2
51676: PUSH
51677: LD_INT 30
51679: PUSH
51680: LD_INT 0
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 30
51689: PUSH
51690: LD_INT 1
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: LIST
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PPUSH
51706: CALL_OW 72
51710: ST_TO_ADDR
51711: GO 51865
51713: LD_INT 3
51715: DOUBLE
51716: EQUAL
51717: IFTRUE 51721
51719: GO 51783
51721: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
51722: LD_ADDR_VAR 0 12
51726: PUSH
51727: LD_VAR 0 18
51731: PPUSH
51732: LD_INT 22
51734: PUSH
51735: LD_VAR 0 16
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 2
51746: PUSH
51747: LD_INT 30
51749: PUSH
51750: LD_INT 2
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 30
51759: PUSH
51760: LD_INT 3
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: LIST
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PPUSH
51776: CALL_OW 72
51780: ST_TO_ADDR
51781: GO 51865
51783: LD_INT 4
51785: DOUBLE
51786: EQUAL
51787: IFTRUE 51791
51789: GO 51864
51791: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
51792: LD_ADDR_VAR 0 12
51796: PUSH
51797: LD_VAR 0 18
51801: PPUSH
51802: LD_INT 22
51804: PUSH
51805: LD_VAR 0 16
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 2
51816: PUSH
51817: LD_INT 30
51819: PUSH
51820: LD_INT 6
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 30
51829: PUSH
51830: LD_INT 7
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 30
51839: PUSH
51840: LD_INT 8
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PPUSH
51857: CALL_OW 72
51861: ST_TO_ADDR
51862: GO 51865
51864: POP
// if i = 1 then
51865: LD_VAR 0 8
51869: PUSH
51870: LD_INT 1
51872: EQUAL
51873: IFFALSE 51984
// begin tmp := [ ] ;
51875: LD_ADDR_VAR 0 19
51879: PUSH
51880: EMPTY
51881: ST_TO_ADDR
// for j in f do
51882: LD_ADDR_VAR 0 9
51886: PUSH
51887: LD_VAR 0 12
51891: PUSH
51892: FOR_IN
51893: IFFALSE 51966
// if GetBType ( j ) = b_bunker then
51895: LD_VAR 0 9
51899: PPUSH
51900: CALL_OW 266
51904: PUSH
51905: LD_INT 32
51907: EQUAL
51908: IFFALSE 51935
// tmp := Insert ( tmp , 1 , j ) else
51910: LD_ADDR_VAR 0 19
51914: PUSH
51915: LD_VAR 0 19
51919: PPUSH
51920: LD_INT 1
51922: PPUSH
51923: LD_VAR 0 9
51927: PPUSH
51928: CALL_OW 2
51932: ST_TO_ADDR
51933: GO 51964
// tmp := Insert ( tmp , tmp + 1 , j ) ;
51935: LD_ADDR_VAR 0 19
51939: PUSH
51940: LD_VAR 0 19
51944: PPUSH
51945: LD_VAR 0 19
51949: PUSH
51950: LD_INT 1
51952: PLUS
51953: PPUSH
51954: LD_VAR 0 9
51958: PPUSH
51959: CALL_OW 2
51963: ST_TO_ADDR
51964: GO 51892
51966: POP
51967: POP
// if tmp then
51968: LD_VAR 0 19
51972: IFFALSE 51984
// f := tmp ;
51974: LD_ADDR_VAR 0 12
51978: PUSH
51979: LD_VAR 0 19
51983: ST_TO_ADDR
// end ; x := personel [ i ] ;
51984: LD_ADDR_VAR 0 13
51988: PUSH
51989: LD_VAR 0 6
51993: PUSH
51994: LD_VAR 0 8
51998: ARRAY
51999: ST_TO_ADDR
// if x = - 1 then
52000: LD_VAR 0 13
52004: PUSH
52005: LD_INT 1
52007: NEG
52008: EQUAL
52009: IFFALSE 52218
// begin for j in f do
52011: LD_ADDR_VAR 0 9
52015: PUSH
52016: LD_VAR 0 12
52020: PUSH
52021: FOR_IN
52022: IFFALSE 52214
// repeat InitHc ;
52024: CALL_OW 19
// if GetBType ( j ) = b_barracks then
52028: LD_VAR 0 9
52032: PPUSH
52033: CALL_OW 266
52037: PUSH
52038: LD_INT 5
52040: EQUAL
52041: IFFALSE 52111
// begin if UnitsInside ( j ) < 3 then
52043: LD_VAR 0 9
52047: PPUSH
52048: CALL_OW 313
52052: PUSH
52053: LD_INT 3
52055: LESS
52056: IFFALSE 52092
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
52058: LD_INT 0
52060: PPUSH
52061: LD_INT 5
52063: PUSH
52064: LD_INT 8
52066: PUSH
52067: LD_INT 9
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: LIST
52074: PUSH
52075: LD_VAR 0 17
52079: ARRAY
52080: PPUSH
52081: LD_VAR 0 4
52085: PPUSH
52086: CALL_OW 380
52090: GO 52109
// PrepareHuman ( false , i , skill ) ;
52092: LD_INT 0
52094: PPUSH
52095: LD_VAR 0 8
52099: PPUSH
52100: LD_VAR 0 4
52104: PPUSH
52105: CALL_OW 380
// end else
52109: GO 52128
// PrepareHuman ( false , i , skill ) ;
52111: LD_INT 0
52113: PPUSH
52114: LD_VAR 0 8
52118: PPUSH
52119: LD_VAR 0 4
52123: PPUSH
52124: CALL_OW 380
// un := CreateHuman ;
52128: LD_ADDR_VAR 0 14
52132: PUSH
52133: CALL_OW 44
52137: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52138: LD_ADDR_VAR 0 7
52142: PUSH
52143: LD_VAR 0 7
52147: PPUSH
52148: LD_INT 1
52150: PPUSH
52151: LD_VAR 0 14
52155: PPUSH
52156: CALL_OW 2
52160: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
52161: LD_VAR 0 14
52165: PPUSH
52166: LD_VAR 0 9
52170: PPUSH
52171: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
52175: LD_VAR 0 9
52179: PPUSH
52180: CALL_OW 313
52184: PUSH
52185: LD_INT 6
52187: EQUAL
52188: PUSH
52189: LD_VAR 0 9
52193: PPUSH
52194: CALL_OW 266
52198: PUSH
52199: LD_INT 32
52201: PUSH
52202: LD_INT 31
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: IN
52209: OR
52210: IFFALSE 52024
52212: GO 52021
52214: POP
52215: POP
// end else
52216: GO 52598
// for j = 1 to x do
52218: LD_ADDR_VAR 0 9
52222: PUSH
52223: DOUBLE
52224: LD_INT 1
52226: DEC
52227: ST_TO_ADDR
52228: LD_VAR 0 13
52232: PUSH
52233: FOR_TO
52234: IFFALSE 52596
// begin InitHc ;
52236: CALL_OW 19
// if not f then
52240: LD_VAR 0 12
52244: NOT
52245: IFFALSE 52334
// begin PrepareHuman ( false , i , skill ) ;
52247: LD_INT 0
52249: PPUSH
52250: LD_VAR 0 8
52254: PPUSH
52255: LD_VAR 0 4
52259: PPUSH
52260: CALL_OW 380
// un := CreateHuman ;
52264: LD_ADDR_VAR 0 14
52268: PUSH
52269: CALL_OW 44
52273: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52274: LD_ADDR_VAR 0 7
52278: PUSH
52279: LD_VAR 0 7
52283: PPUSH
52284: LD_INT 1
52286: PPUSH
52287: LD_VAR 0 14
52291: PPUSH
52292: CALL_OW 2
52296: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
52297: LD_VAR 0 14
52301: PPUSH
52302: LD_VAR 0 1
52306: PPUSH
52307: CALL_OW 250
52311: PPUSH
52312: LD_VAR 0 1
52316: PPUSH
52317: CALL_OW 251
52321: PPUSH
52322: LD_INT 10
52324: PPUSH
52325: LD_INT 0
52327: PPUSH
52328: CALL_OW 50
// continue ;
52332: GO 52233
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
52334: LD_VAR 0 12
52338: PUSH
52339: LD_INT 1
52341: ARRAY
52342: PPUSH
52343: CALL_OW 313
52347: PUSH
52348: LD_VAR 0 12
52352: PUSH
52353: LD_INT 1
52355: ARRAY
52356: PPUSH
52357: CALL_OW 266
52361: PUSH
52362: LD_INT 32
52364: PUSH
52365: LD_INT 31
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: IN
52372: AND
52373: PUSH
52374: LD_VAR 0 12
52378: PUSH
52379: LD_INT 1
52381: ARRAY
52382: PPUSH
52383: CALL_OW 313
52387: PUSH
52388: LD_INT 6
52390: EQUAL
52391: OR
52392: IFFALSE 52412
// f := Delete ( f , 1 ) ;
52394: LD_ADDR_VAR 0 12
52398: PUSH
52399: LD_VAR 0 12
52403: PPUSH
52404: LD_INT 1
52406: PPUSH
52407: CALL_OW 3
52411: ST_TO_ADDR
// if not f then
52412: LD_VAR 0 12
52416: NOT
52417: IFFALSE 52435
// begin x := x + 2 ;
52419: LD_ADDR_VAR 0 13
52423: PUSH
52424: LD_VAR 0 13
52428: PUSH
52429: LD_INT 2
52431: PLUS
52432: ST_TO_ADDR
// continue ;
52433: GO 52233
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
52435: LD_VAR 0 12
52439: PUSH
52440: LD_INT 1
52442: ARRAY
52443: PPUSH
52444: CALL_OW 266
52448: PUSH
52449: LD_INT 5
52451: EQUAL
52452: IFFALSE 52526
// begin if UnitsInside ( f [ 1 ] ) < 3 then
52454: LD_VAR 0 12
52458: PUSH
52459: LD_INT 1
52461: ARRAY
52462: PPUSH
52463: CALL_OW 313
52467: PUSH
52468: LD_INT 3
52470: LESS
52471: IFFALSE 52507
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
52473: LD_INT 0
52475: PPUSH
52476: LD_INT 5
52478: PUSH
52479: LD_INT 8
52481: PUSH
52482: LD_INT 9
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: LIST
52489: PUSH
52490: LD_VAR 0 17
52494: ARRAY
52495: PPUSH
52496: LD_VAR 0 4
52500: PPUSH
52501: CALL_OW 380
52505: GO 52524
// PrepareHuman ( false , i , skill ) ;
52507: LD_INT 0
52509: PPUSH
52510: LD_VAR 0 8
52514: PPUSH
52515: LD_VAR 0 4
52519: PPUSH
52520: CALL_OW 380
// end else
52524: GO 52543
// PrepareHuman ( false , i , skill ) ;
52526: LD_INT 0
52528: PPUSH
52529: LD_VAR 0 8
52533: PPUSH
52534: LD_VAR 0 4
52538: PPUSH
52539: CALL_OW 380
// un := CreateHuman ;
52543: LD_ADDR_VAR 0 14
52547: PUSH
52548: CALL_OW 44
52552: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52553: LD_ADDR_VAR 0 7
52557: PUSH
52558: LD_VAR 0 7
52562: PPUSH
52563: LD_INT 1
52565: PPUSH
52566: LD_VAR 0 14
52570: PPUSH
52571: CALL_OW 2
52575: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
52576: LD_VAR 0 14
52580: PPUSH
52581: LD_VAR 0 12
52585: PUSH
52586: LD_INT 1
52588: ARRAY
52589: PPUSH
52590: CALL_OW 52
// end ;
52594: GO 52233
52596: POP
52597: POP
// end ;
52598: GO 51535
52600: POP
52601: POP
// result := result ^ buildings ;
52602: LD_ADDR_VAR 0 7
52606: PUSH
52607: LD_VAR 0 7
52611: PUSH
52612: LD_VAR 0 18
52616: ADD
52617: ST_TO_ADDR
// end else
52618: GO 52761
// begin for i = 1 to personel do
52620: LD_ADDR_VAR 0 8
52624: PUSH
52625: DOUBLE
52626: LD_INT 1
52628: DEC
52629: ST_TO_ADDR
52630: LD_VAR 0 6
52634: PUSH
52635: FOR_TO
52636: IFFALSE 52759
// begin if i > 4 then
52638: LD_VAR 0 8
52642: PUSH
52643: LD_INT 4
52645: GREATER
52646: IFFALSE 52650
// break ;
52648: GO 52759
// x := personel [ i ] ;
52650: LD_ADDR_VAR 0 13
52654: PUSH
52655: LD_VAR 0 6
52659: PUSH
52660: LD_VAR 0 8
52664: ARRAY
52665: ST_TO_ADDR
// if x = - 1 then
52666: LD_VAR 0 13
52670: PUSH
52671: LD_INT 1
52673: NEG
52674: EQUAL
52675: IFFALSE 52679
// continue ;
52677: GO 52635
// PrepareHuman ( false , i , skill ) ;
52679: LD_INT 0
52681: PPUSH
52682: LD_VAR 0 8
52686: PPUSH
52687: LD_VAR 0 4
52691: PPUSH
52692: CALL_OW 380
// un := CreateHuman ;
52696: LD_ADDR_VAR 0 14
52700: PUSH
52701: CALL_OW 44
52705: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
52706: LD_VAR 0 14
52710: PPUSH
52711: LD_VAR 0 1
52715: PPUSH
52716: CALL_OW 250
52720: PPUSH
52721: LD_VAR 0 1
52725: PPUSH
52726: CALL_OW 251
52730: PPUSH
52731: LD_INT 10
52733: PPUSH
52734: LD_INT 0
52736: PPUSH
52737: CALL_OW 50
// result := result ^ un ;
52741: LD_ADDR_VAR 0 7
52745: PUSH
52746: LD_VAR 0 7
52750: PUSH
52751: LD_VAR 0 14
52755: ADD
52756: ST_TO_ADDR
// end ;
52757: GO 52635
52759: POP
52760: POP
// end ; end ;
52761: LD_VAR 0 7
52765: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
52766: LD_INT 0
52768: PPUSH
52769: PPUSH
52770: PPUSH
52771: PPUSH
52772: PPUSH
52773: PPUSH
52774: PPUSH
52775: PPUSH
52776: PPUSH
52777: PPUSH
52778: PPUSH
52779: PPUSH
52780: PPUSH
52781: PPUSH
52782: PPUSH
52783: PPUSH
// result := false ;
52784: LD_ADDR_VAR 0 3
52788: PUSH
52789: LD_INT 0
52791: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
52792: LD_VAR 0 1
52796: NOT
52797: PUSH
52798: LD_VAR 0 1
52802: PPUSH
52803: CALL_OW 266
52807: PUSH
52808: LD_INT 32
52810: PUSH
52811: LD_INT 33
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: IN
52818: NOT
52819: OR
52820: IFFALSE 52824
// exit ;
52822: GO 53933
// nat := GetNation ( tower ) ;
52824: LD_ADDR_VAR 0 12
52828: PUSH
52829: LD_VAR 0 1
52833: PPUSH
52834: CALL_OW 248
52838: ST_TO_ADDR
// side := GetSide ( tower ) ;
52839: LD_ADDR_VAR 0 16
52843: PUSH
52844: LD_VAR 0 1
52848: PPUSH
52849: CALL_OW 255
52853: ST_TO_ADDR
// x := GetX ( tower ) ;
52854: LD_ADDR_VAR 0 10
52858: PUSH
52859: LD_VAR 0 1
52863: PPUSH
52864: CALL_OW 250
52868: ST_TO_ADDR
// y := GetY ( tower ) ;
52869: LD_ADDR_VAR 0 11
52873: PUSH
52874: LD_VAR 0 1
52878: PPUSH
52879: CALL_OW 251
52883: ST_TO_ADDR
// if not x or not y then
52884: LD_VAR 0 10
52888: NOT
52889: PUSH
52890: LD_VAR 0 11
52894: NOT
52895: OR
52896: IFFALSE 52900
// exit ;
52898: GO 53933
// weapon := 0 ;
52900: LD_ADDR_VAR 0 18
52904: PUSH
52905: LD_INT 0
52907: ST_TO_ADDR
// fac_list := [ ] ;
52908: LD_ADDR_VAR 0 17
52912: PUSH
52913: EMPTY
52914: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
52915: LD_ADDR_VAR 0 6
52919: PUSH
52920: LD_VAR 0 1
52924: PPUSH
52925: CALL_OW 274
52929: PPUSH
52930: LD_VAR 0 2
52934: PPUSH
52935: LD_INT 0
52937: PPUSH
52938: CALL 50504 0 3
52942: PPUSH
52943: LD_INT 30
52945: PUSH
52946: LD_INT 3
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PPUSH
52953: CALL_OW 72
52957: ST_TO_ADDR
// if not factories then
52958: LD_VAR 0 6
52962: NOT
52963: IFFALSE 52967
// exit ;
52965: GO 53933
// for i in factories do
52967: LD_ADDR_VAR 0 8
52971: PUSH
52972: LD_VAR 0 6
52976: PUSH
52977: FOR_IN
52978: IFFALSE 53003
// fac_list := fac_list union AvailableWeaponList ( i ) ;
52980: LD_ADDR_VAR 0 17
52984: PUSH
52985: LD_VAR 0 17
52989: PUSH
52990: LD_VAR 0 8
52994: PPUSH
52995: CALL_OW 478
52999: UNION
53000: ST_TO_ADDR
53001: GO 52977
53003: POP
53004: POP
// if not fac_list then
53005: LD_VAR 0 17
53009: NOT
53010: IFFALSE 53014
// exit ;
53012: GO 53933
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
53014: LD_ADDR_VAR 0 5
53018: PUSH
53019: LD_INT 4
53021: PUSH
53022: LD_INT 5
53024: PUSH
53025: LD_INT 9
53027: PUSH
53028: LD_INT 10
53030: PUSH
53031: LD_INT 6
53033: PUSH
53034: LD_INT 7
53036: PUSH
53037: LD_INT 11
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 27
53051: PUSH
53052: LD_INT 28
53054: PUSH
53055: LD_INT 26
53057: PUSH
53058: LD_INT 30
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 43
53069: PUSH
53070: LD_INT 44
53072: PUSH
53073: LD_INT 46
53075: PUSH
53076: LD_INT 45
53078: PUSH
53079: LD_INT 47
53081: PUSH
53082: LD_INT 49
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: LIST
53097: PUSH
53098: LD_VAR 0 12
53102: ARRAY
53103: ST_TO_ADDR
// list := list isect fac_list ;
53104: LD_ADDR_VAR 0 5
53108: PUSH
53109: LD_VAR 0 5
53113: PUSH
53114: LD_VAR 0 17
53118: ISECT
53119: ST_TO_ADDR
// if not list then
53120: LD_VAR 0 5
53124: NOT
53125: IFFALSE 53129
// exit ;
53127: GO 53933
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
53129: LD_VAR 0 12
53133: PUSH
53134: LD_INT 3
53136: EQUAL
53137: PUSH
53138: LD_INT 49
53140: PUSH
53141: LD_VAR 0 5
53145: IN
53146: AND
53147: PUSH
53148: LD_INT 31
53150: PPUSH
53151: LD_VAR 0 16
53155: PPUSH
53156: CALL_OW 321
53160: PUSH
53161: LD_INT 2
53163: EQUAL
53164: AND
53165: IFFALSE 53225
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
53167: LD_INT 22
53169: PUSH
53170: LD_VAR 0 16
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 35
53181: PUSH
53182: LD_INT 49
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 91
53191: PUSH
53192: LD_VAR 0 1
53196: PUSH
53197: LD_INT 10
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: LIST
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: LIST
53209: PPUSH
53210: CALL_OW 69
53214: NOT
53215: IFFALSE 53225
// weapon := ru_time_lapser ;
53217: LD_ADDR_VAR 0 18
53221: PUSH
53222: LD_INT 49
53224: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
53225: LD_VAR 0 12
53229: PUSH
53230: LD_INT 1
53232: PUSH
53233: LD_INT 2
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: IN
53240: PUSH
53241: LD_INT 11
53243: PUSH
53244: LD_VAR 0 5
53248: IN
53249: PUSH
53250: LD_INT 30
53252: PUSH
53253: LD_VAR 0 5
53257: IN
53258: OR
53259: AND
53260: PUSH
53261: LD_INT 6
53263: PPUSH
53264: LD_VAR 0 16
53268: PPUSH
53269: CALL_OW 321
53273: PUSH
53274: LD_INT 2
53276: EQUAL
53277: AND
53278: IFFALSE 53443
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
53280: LD_INT 22
53282: PUSH
53283: LD_VAR 0 16
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 2
53294: PUSH
53295: LD_INT 35
53297: PUSH
53298: LD_INT 11
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 35
53307: PUSH
53308: LD_INT 30
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 91
53322: PUSH
53323: LD_VAR 0 1
53327: PUSH
53328: LD_INT 18
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: LIST
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: LIST
53340: PPUSH
53341: CALL_OW 69
53345: NOT
53346: PUSH
53347: LD_INT 22
53349: PUSH
53350: LD_VAR 0 16
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 2
53361: PUSH
53362: LD_INT 30
53364: PUSH
53365: LD_INT 32
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 30
53374: PUSH
53375: LD_INT 33
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 91
53389: PUSH
53390: LD_VAR 0 1
53394: PUSH
53395: LD_INT 12
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: LIST
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: LIST
53407: PUSH
53408: EMPTY
53409: LIST
53410: PPUSH
53411: CALL_OW 69
53415: PUSH
53416: LD_INT 2
53418: GREATER
53419: AND
53420: IFFALSE 53443
// weapon := [ us_radar , ar_radar ] [ nat ] ;
53422: LD_ADDR_VAR 0 18
53426: PUSH
53427: LD_INT 11
53429: PUSH
53430: LD_INT 30
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_VAR 0 12
53441: ARRAY
53442: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
53443: LD_VAR 0 18
53447: NOT
53448: PUSH
53449: LD_INT 40
53451: PPUSH
53452: LD_VAR 0 16
53456: PPUSH
53457: CALL_OW 321
53461: PUSH
53462: LD_INT 2
53464: EQUAL
53465: AND
53466: PUSH
53467: LD_INT 7
53469: PUSH
53470: LD_VAR 0 5
53474: IN
53475: PUSH
53476: LD_INT 28
53478: PUSH
53479: LD_VAR 0 5
53483: IN
53484: OR
53485: PUSH
53486: LD_INT 45
53488: PUSH
53489: LD_VAR 0 5
53493: IN
53494: OR
53495: AND
53496: IFFALSE 53750
// begin hex := GetHexInfo ( x , y ) ;
53498: LD_ADDR_VAR 0 4
53502: PUSH
53503: LD_VAR 0 10
53507: PPUSH
53508: LD_VAR 0 11
53512: PPUSH
53513: CALL_OW 546
53517: ST_TO_ADDR
// if hex [ 1 ] then
53518: LD_VAR 0 4
53522: PUSH
53523: LD_INT 1
53525: ARRAY
53526: IFFALSE 53530
// exit ;
53528: GO 53933
// height := hex [ 2 ] ;
53530: LD_ADDR_VAR 0 15
53534: PUSH
53535: LD_VAR 0 4
53539: PUSH
53540: LD_INT 2
53542: ARRAY
53543: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
53544: LD_ADDR_VAR 0 14
53548: PUSH
53549: LD_INT 0
53551: PUSH
53552: LD_INT 2
53554: PUSH
53555: LD_INT 3
53557: PUSH
53558: LD_INT 5
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: ST_TO_ADDR
// for i in tmp do
53567: LD_ADDR_VAR 0 8
53571: PUSH
53572: LD_VAR 0 14
53576: PUSH
53577: FOR_IN
53578: IFFALSE 53748
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
53580: LD_ADDR_VAR 0 9
53584: PUSH
53585: LD_VAR 0 10
53589: PPUSH
53590: LD_VAR 0 8
53594: PPUSH
53595: LD_INT 5
53597: PPUSH
53598: CALL_OW 272
53602: PUSH
53603: LD_VAR 0 11
53607: PPUSH
53608: LD_VAR 0 8
53612: PPUSH
53613: LD_INT 5
53615: PPUSH
53616: CALL_OW 273
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
53625: LD_VAR 0 9
53629: PUSH
53630: LD_INT 1
53632: ARRAY
53633: PPUSH
53634: LD_VAR 0 9
53638: PUSH
53639: LD_INT 2
53641: ARRAY
53642: PPUSH
53643: CALL_OW 488
53647: IFFALSE 53746
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
53649: LD_ADDR_VAR 0 4
53653: PUSH
53654: LD_VAR 0 9
53658: PUSH
53659: LD_INT 1
53661: ARRAY
53662: PPUSH
53663: LD_VAR 0 9
53667: PUSH
53668: LD_INT 2
53670: ARRAY
53671: PPUSH
53672: CALL_OW 546
53676: ST_TO_ADDR
// if hex [ 1 ] then
53677: LD_VAR 0 4
53681: PUSH
53682: LD_INT 1
53684: ARRAY
53685: IFFALSE 53689
// continue ;
53687: GO 53577
// h := hex [ 2 ] ;
53689: LD_ADDR_VAR 0 13
53693: PUSH
53694: LD_VAR 0 4
53698: PUSH
53699: LD_INT 2
53701: ARRAY
53702: ST_TO_ADDR
// if h + 7 < height then
53703: LD_VAR 0 13
53707: PUSH
53708: LD_INT 7
53710: PLUS
53711: PUSH
53712: LD_VAR 0 15
53716: LESS
53717: IFFALSE 53746
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
53719: LD_ADDR_VAR 0 18
53723: PUSH
53724: LD_INT 7
53726: PUSH
53727: LD_INT 28
53729: PUSH
53730: LD_INT 45
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: LIST
53737: PUSH
53738: LD_VAR 0 12
53742: ARRAY
53743: ST_TO_ADDR
// break ;
53744: GO 53748
// end ; end ; end ;
53746: GO 53577
53748: POP
53749: POP
// end ; if not weapon then
53750: LD_VAR 0 18
53754: NOT
53755: IFFALSE 53815
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
53757: LD_ADDR_VAR 0 5
53761: PUSH
53762: LD_VAR 0 5
53766: PUSH
53767: LD_INT 11
53769: PUSH
53770: LD_INT 30
53772: PUSH
53773: LD_INT 49
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: LIST
53780: DIFF
53781: ST_TO_ADDR
// if not list then
53782: LD_VAR 0 5
53786: NOT
53787: IFFALSE 53791
// exit ;
53789: GO 53933
// weapon := list [ rand ( 1 , list ) ] ;
53791: LD_ADDR_VAR 0 18
53795: PUSH
53796: LD_VAR 0 5
53800: PUSH
53801: LD_INT 1
53803: PPUSH
53804: LD_VAR 0 5
53808: PPUSH
53809: CALL_OW 12
53813: ARRAY
53814: ST_TO_ADDR
// end ; if weapon then
53815: LD_VAR 0 18
53819: IFFALSE 53933
// begin tmp := CostOfWeapon ( weapon ) ;
53821: LD_ADDR_VAR 0 14
53825: PUSH
53826: LD_VAR 0 18
53830: PPUSH
53831: CALL_OW 451
53835: ST_TO_ADDR
// j := GetBase ( tower ) ;
53836: LD_ADDR_VAR 0 9
53840: PUSH
53841: LD_VAR 0 1
53845: PPUSH
53846: CALL_OW 274
53850: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
53851: LD_VAR 0 9
53855: PPUSH
53856: LD_INT 1
53858: PPUSH
53859: CALL_OW 275
53863: PUSH
53864: LD_VAR 0 14
53868: PUSH
53869: LD_INT 1
53871: ARRAY
53872: GREATEREQUAL
53873: PUSH
53874: LD_VAR 0 9
53878: PPUSH
53879: LD_INT 2
53881: PPUSH
53882: CALL_OW 275
53886: PUSH
53887: LD_VAR 0 14
53891: PUSH
53892: LD_INT 2
53894: ARRAY
53895: GREATEREQUAL
53896: AND
53897: PUSH
53898: LD_VAR 0 9
53902: PPUSH
53903: LD_INT 3
53905: PPUSH
53906: CALL_OW 275
53910: PUSH
53911: LD_VAR 0 14
53915: PUSH
53916: LD_INT 3
53918: ARRAY
53919: GREATEREQUAL
53920: AND
53921: IFFALSE 53933
// result := weapon ;
53923: LD_ADDR_VAR 0 3
53927: PUSH
53928: LD_VAR 0 18
53932: ST_TO_ADDR
// end ; end ;
53933: LD_VAR 0 3
53937: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
53938: LD_INT 0
53940: PPUSH
53941: PPUSH
// result := true ;
53942: LD_ADDR_VAR 0 3
53946: PUSH
53947: LD_INT 1
53949: ST_TO_ADDR
// if array1 = array2 then
53950: LD_VAR 0 1
53954: PUSH
53955: LD_VAR 0 2
53959: EQUAL
53960: IFFALSE 54020
// begin for i = 1 to array1 do
53962: LD_ADDR_VAR 0 4
53966: PUSH
53967: DOUBLE
53968: LD_INT 1
53970: DEC
53971: ST_TO_ADDR
53972: LD_VAR 0 1
53976: PUSH
53977: FOR_TO
53978: IFFALSE 54016
// if array1 [ i ] <> array2 [ i ] then
53980: LD_VAR 0 1
53984: PUSH
53985: LD_VAR 0 4
53989: ARRAY
53990: PUSH
53991: LD_VAR 0 2
53995: PUSH
53996: LD_VAR 0 4
54000: ARRAY
54001: NONEQUAL
54002: IFFALSE 54014
// begin result := false ;
54004: LD_ADDR_VAR 0 3
54008: PUSH
54009: LD_INT 0
54011: ST_TO_ADDR
// break ;
54012: GO 54016
// end ;
54014: GO 53977
54016: POP
54017: POP
// end else
54018: GO 54028
// result := false ;
54020: LD_ADDR_VAR 0 3
54024: PUSH
54025: LD_INT 0
54027: ST_TO_ADDR
// end ;
54028: LD_VAR 0 3
54032: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
54033: LD_INT 0
54035: PPUSH
54036: PPUSH
// if not array1 or not array2 then
54037: LD_VAR 0 1
54041: NOT
54042: PUSH
54043: LD_VAR 0 2
54047: NOT
54048: OR
54049: IFFALSE 54053
// exit ;
54051: GO 54117
// result := true ;
54053: LD_ADDR_VAR 0 3
54057: PUSH
54058: LD_INT 1
54060: ST_TO_ADDR
// for i = 1 to array1 do
54061: LD_ADDR_VAR 0 4
54065: PUSH
54066: DOUBLE
54067: LD_INT 1
54069: DEC
54070: ST_TO_ADDR
54071: LD_VAR 0 1
54075: PUSH
54076: FOR_TO
54077: IFFALSE 54115
// if array1 [ i ] <> array2 [ i ] then
54079: LD_VAR 0 1
54083: PUSH
54084: LD_VAR 0 4
54088: ARRAY
54089: PUSH
54090: LD_VAR 0 2
54094: PUSH
54095: LD_VAR 0 4
54099: ARRAY
54100: NONEQUAL
54101: IFFALSE 54113
// begin result := false ;
54103: LD_ADDR_VAR 0 3
54107: PUSH
54108: LD_INT 0
54110: ST_TO_ADDR
// break ;
54111: GO 54115
// end ;
54113: GO 54076
54115: POP
54116: POP
// end ;
54117: LD_VAR 0 3
54121: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
54122: LD_INT 0
54124: PPUSH
54125: PPUSH
54126: PPUSH
// pom := GetBase ( fac ) ;
54127: LD_ADDR_VAR 0 5
54131: PUSH
54132: LD_VAR 0 1
54136: PPUSH
54137: CALL_OW 274
54141: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
54142: LD_ADDR_VAR 0 4
54146: PUSH
54147: LD_VAR 0 2
54151: PUSH
54152: LD_INT 1
54154: ARRAY
54155: PPUSH
54156: LD_VAR 0 2
54160: PUSH
54161: LD_INT 2
54163: ARRAY
54164: PPUSH
54165: LD_VAR 0 2
54169: PUSH
54170: LD_INT 3
54172: ARRAY
54173: PPUSH
54174: LD_VAR 0 2
54178: PUSH
54179: LD_INT 4
54181: ARRAY
54182: PPUSH
54183: CALL_OW 449
54187: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54188: LD_ADDR_VAR 0 3
54192: PUSH
54193: LD_VAR 0 5
54197: PPUSH
54198: LD_INT 1
54200: PPUSH
54201: CALL_OW 275
54205: PUSH
54206: LD_VAR 0 4
54210: PUSH
54211: LD_INT 1
54213: ARRAY
54214: GREATEREQUAL
54215: PUSH
54216: LD_VAR 0 5
54220: PPUSH
54221: LD_INT 2
54223: PPUSH
54224: CALL_OW 275
54228: PUSH
54229: LD_VAR 0 4
54233: PUSH
54234: LD_INT 2
54236: ARRAY
54237: GREATEREQUAL
54238: AND
54239: PUSH
54240: LD_VAR 0 5
54244: PPUSH
54245: LD_INT 3
54247: PPUSH
54248: CALL_OW 275
54252: PUSH
54253: LD_VAR 0 4
54257: PUSH
54258: LD_INT 3
54260: ARRAY
54261: GREATEREQUAL
54262: AND
54263: ST_TO_ADDR
// end ;
54264: LD_VAR 0 3
54268: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
54269: LD_INT 0
54271: PPUSH
54272: PPUSH
54273: PPUSH
54274: PPUSH
// pom := GetBase ( building ) ;
54275: LD_ADDR_VAR 0 3
54279: PUSH
54280: LD_VAR 0 1
54284: PPUSH
54285: CALL_OW 274
54289: ST_TO_ADDR
// if not pom then
54290: LD_VAR 0 3
54294: NOT
54295: IFFALSE 54299
// exit ;
54297: GO 54469
// btype := GetBType ( building ) ;
54299: LD_ADDR_VAR 0 5
54303: PUSH
54304: LD_VAR 0 1
54308: PPUSH
54309: CALL_OW 266
54313: ST_TO_ADDR
// if btype = b_armoury then
54314: LD_VAR 0 5
54318: PUSH
54319: LD_INT 4
54321: EQUAL
54322: IFFALSE 54332
// btype := b_barracks ;
54324: LD_ADDR_VAR 0 5
54328: PUSH
54329: LD_INT 5
54331: ST_TO_ADDR
// if btype = b_depot then
54332: LD_VAR 0 5
54336: PUSH
54337: LD_INT 0
54339: EQUAL
54340: IFFALSE 54350
// btype := b_warehouse ;
54342: LD_ADDR_VAR 0 5
54346: PUSH
54347: LD_INT 1
54349: ST_TO_ADDR
// if btype = b_workshop then
54350: LD_VAR 0 5
54354: PUSH
54355: LD_INT 2
54357: EQUAL
54358: IFFALSE 54368
// btype := b_factory ;
54360: LD_ADDR_VAR 0 5
54364: PUSH
54365: LD_INT 3
54367: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
54368: LD_ADDR_VAR 0 4
54372: PUSH
54373: LD_VAR 0 5
54377: PPUSH
54378: LD_VAR 0 1
54382: PPUSH
54383: CALL_OW 248
54387: PPUSH
54388: CALL_OW 450
54392: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54393: LD_ADDR_VAR 0 2
54397: PUSH
54398: LD_VAR 0 3
54402: PPUSH
54403: LD_INT 1
54405: PPUSH
54406: CALL_OW 275
54410: PUSH
54411: LD_VAR 0 4
54415: PUSH
54416: LD_INT 1
54418: ARRAY
54419: GREATEREQUAL
54420: PUSH
54421: LD_VAR 0 3
54425: PPUSH
54426: LD_INT 2
54428: PPUSH
54429: CALL_OW 275
54433: PUSH
54434: LD_VAR 0 4
54438: PUSH
54439: LD_INT 2
54441: ARRAY
54442: GREATEREQUAL
54443: AND
54444: PUSH
54445: LD_VAR 0 3
54449: PPUSH
54450: LD_INT 3
54452: PPUSH
54453: CALL_OW 275
54457: PUSH
54458: LD_VAR 0 4
54462: PUSH
54463: LD_INT 3
54465: ARRAY
54466: GREATEREQUAL
54467: AND
54468: ST_TO_ADDR
// end ;
54469: LD_VAR 0 2
54473: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
54474: LD_INT 0
54476: PPUSH
54477: PPUSH
54478: PPUSH
// pom := GetBase ( building ) ;
54479: LD_ADDR_VAR 0 4
54483: PUSH
54484: LD_VAR 0 1
54488: PPUSH
54489: CALL_OW 274
54493: ST_TO_ADDR
// if not pom then
54494: LD_VAR 0 4
54498: NOT
54499: IFFALSE 54503
// exit ;
54501: GO 54604
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
54503: LD_ADDR_VAR 0 5
54507: PUSH
54508: LD_VAR 0 2
54512: PPUSH
54513: LD_VAR 0 1
54517: PPUSH
54518: CALL_OW 248
54522: PPUSH
54523: CALL_OW 450
54527: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54528: LD_ADDR_VAR 0 3
54532: PUSH
54533: LD_VAR 0 4
54537: PPUSH
54538: LD_INT 1
54540: PPUSH
54541: CALL_OW 275
54545: PUSH
54546: LD_VAR 0 5
54550: PUSH
54551: LD_INT 1
54553: ARRAY
54554: GREATEREQUAL
54555: PUSH
54556: LD_VAR 0 4
54560: PPUSH
54561: LD_INT 2
54563: PPUSH
54564: CALL_OW 275
54568: PUSH
54569: LD_VAR 0 5
54573: PUSH
54574: LD_INT 2
54576: ARRAY
54577: GREATEREQUAL
54578: AND
54579: PUSH
54580: LD_VAR 0 4
54584: PPUSH
54585: LD_INT 3
54587: PPUSH
54588: CALL_OW 275
54592: PUSH
54593: LD_VAR 0 5
54597: PUSH
54598: LD_INT 3
54600: ARRAY
54601: GREATEREQUAL
54602: AND
54603: ST_TO_ADDR
// end ;
54604: LD_VAR 0 3
54608: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
54609: LD_INT 0
54611: PPUSH
54612: PPUSH
54613: PPUSH
54614: PPUSH
54615: PPUSH
54616: PPUSH
54617: PPUSH
54618: PPUSH
54619: PPUSH
54620: PPUSH
54621: PPUSH
// result := false ;
54622: LD_ADDR_VAR 0 8
54626: PUSH
54627: LD_INT 0
54629: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
54630: LD_VAR 0 5
54634: NOT
54635: PUSH
54636: LD_VAR 0 1
54640: NOT
54641: OR
54642: PUSH
54643: LD_VAR 0 2
54647: NOT
54648: OR
54649: PUSH
54650: LD_VAR 0 3
54654: NOT
54655: OR
54656: IFFALSE 54660
// exit ;
54658: GO 55474
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
54660: LD_ADDR_VAR 0 14
54664: PUSH
54665: LD_VAR 0 1
54669: PPUSH
54670: LD_VAR 0 2
54674: PPUSH
54675: LD_VAR 0 3
54679: PPUSH
54680: LD_VAR 0 4
54684: PPUSH
54685: LD_VAR 0 5
54689: PUSH
54690: LD_INT 1
54692: ARRAY
54693: PPUSH
54694: CALL_OW 248
54698: PPUSH
54699: LD_INT 0
54701: PPUSH
54702: CALL 56727 0 6
54706: ST_TO_ADDR
// if not hexes then
54707: LD_VAR 0 14
54711: NOT
54712: IFFALSE 54716
// exit ;
54714: GO 55474
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54716: LD_ADDR_VAR 0 17
54720: PUSH
54721: LD_VAR 0 5
54725: PPUSH
54726: LD_INT 22
54728: PUSH
54729: LD_VAR 0 13
54733: PPUSH
54734: CALL_OW 255
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 2
54745: PUSH
54746: LD_INT 30
54748: PUSH
54749: LD_INT 0
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 30
54758: PUSH
54759: LD_INT 1
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: LIST
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PPUSH
54775: CALL_OW 72
54779: ST_TO_ADDR
// for i = 1 to hexes do
54780: LD_ADDR_VAR 0 9
54784: PUSH
54785: DOUBLE
54786: LD_INT 1
54788: DEC
54789: ST_TO_ADDR
54790: LD_VAR 0 14
54794: PUSH
54795: FOR_TO
54796: IFFALSE 55472
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54798: LD_ADDR_VAR 0 13
54802: PUSH
54803: LD_VAR 0 14
54807: PUSH
54808: LD_VAR 0 9
54812: ARRAY
54813: PUSH
54814: LD_INT 1
54816: ARRAY
54817: PPUSH
54818: LD_VAR 0 14
54822: PUSH
54823: LD_VAR 0 9
54827: ARRAY
54828: PUSH
54829: LD_INT 2
54831: ARRAY
54832: PPUSH
54833: CALL_OW 428
54837: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
54838: LD_VAR 0 14
54842: PUSH
54843: LD_VAR 0 9
54847: ARRAY
54848: PUSH
54849: LD_INT 1
54851: ARRAY
54852: PPUSH
54853: LD_VAR 0 14
54857: PUSH
54858: LD_VAR 0 9
54862: ARRAY
54863: PUSH
54864: LD_INT 2
54866: ARRAY
54867: PPUSH
54868: CALL_OW 351
54872: PUSH
54873: LD_VAR 0 14
54877: PUSH
54878: LD_VAR 0 9
54882: ARRAY
54883: PUSH
54884: LD_INT 1
54886: ARRAY
54887: PPUSH
54888: LD_VAR 0 14
54892: PUSH
54893: LD_VAR 0 9
54897: ARRAY
54898: PUSH
54899: LD_INT 2
54901: ARRAY
54902: PPUSH
54903: CALL_OW 488
54907: NOT
54908: OR
54909: PUSH
54910: LD_VAR 0 13
54914: PPUSH
54915: CALL_OW 247
54919: PUSH
54920: LD_INT 3
54922: EQUAL
54923: OR
54924: IFFALSE 54930
// exit ;
54926: POP
54927: POP
54928: GO 55474
// if not tmp then
54930: LD_VAR 0 13
54934: NOT
54935: IFFALSE 54939
// continue ;
54937: GO 54795
// result := true ;
54939: LD_ADDR_VAR 0 8
54943: PUSH
54944: LD_INT 1
54946: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
54947: LD_VAR 0 6
54951: PUSH
54952: LD_VAR 0 13
54956: PPUSH
54957: CALL_OW 247
54961: PUSH
54962: LD_INT 2
54964: EQUAL
54965: AND
54966: PUSH
54967: LD_VAR 0 13
54971: PPUSH
54972: CALL_OW 263
54976: PUSH
54977: LD_INT 1
54979: EQUAL
54980: AND
54981: IFFALSE 55145
// begin if IsDrivenBy ( tmp ) then
54983: LD_VAR 0 13
54987: PPUSH
54988: CALL_OW 311
54992: IFFALSE 54996
// continue ;
54994: GO 54795
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
54996: LD_VAR 0 6
55000: PPUSH
55001: LD_INT 3
55003: PUSH
55004: LD_INT 60
55006: PUSH
55007: EMPTY
55008: LIST
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 3
55016: PUSH
55017: LD_INT 55
55019: PUSH
55020: EMPTY
55021: LIST
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PPUSH
55031: CALL_OW 72
55035: IFFALSE 55143
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
55037: LD_ADDR_VAR 0 18
55041: PUSH
55042: LD_VAR 0 6
55046: PPUSH
55047: LD_INT 3
55049: PUSH
55050: LD_INT 60
55052: PUSH
55053: EMPTY
55054: LIST
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 3
55062: PUSH
55063: LD_INT 55
55065: PUSH
55066: EMPTY
55067: LIST
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PPUSH
55077: CALL_OW 72
55081: PUSH
55082: LD_INT 1
55084: ARRAY
55085: ST_TO_ADDR
// if IsInUnit ( driver ) then
55086: LD_VAR 0 18
55090: PPUSH
55091: CALL_OW 310
55095: IFFALSE 55106
// ComExit ( driver ) ;
55097: LD_VAR 0 18
55101: PPUSH
55102: CALL 80508 0 1
// AddComEnterUnit ( driver , tmp ) ;
55106: LD_VAR 0 18
55110: PPUSH
55111: LD_VAR 0 13
55115: PPUSH
55116: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
55120: LD_VAR 0 18
55124: PPUSH
55125: LD_VAR 0 7
55129: PPUSH
55130: CALL_OW 173
// AddComExitVehicle ( driver ) ;
55134: LD_VAR 0 18
55138: PPUSH
55139: CALL_OW 181
// end ; continue ;
55143: GO 54795
// end ; if not cleaners or not tmp in cleaners then
55145: LD_VAR 0 6
55149: NOT
55150: PUSH
55151: LD_VAR 0 13
55155: PUSH
55156: LD_VAR 0 6
55160: IN
55161: NOT
55162: OR
55163: IFFALSE 55470
// begin if dep then
55165: LD_VAR 0 17
55169: IFFALSE 55305
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
55171: LD_ADDR_VAR 0 16
55175: PUSH
55176: LD_VAR 0 17
55180: PUSH
55181: LD_INT 1
55183: ARRAY
55184: PPUSH
55185: CALL_OW 250
55189: PPUSH
55190: LD_VAR 0 17
55194: PUSH
55195: LD_INT 1
55197: ARRAY
55198: PPUSH
55199: CALL_OW 254
55203: PPUSH
55204: LD_INT 5
55206: PPUSH
55207: CALL_OW 272
55211: PUSH
55212: LD_VAR 0 17
55216: PUSH
55217: LD_INT 1
55219: ARRAY
55220: PPUSH
55221: CALL_OW 251
55225: PPUSH
55226: LD_VAR 0 17
55230: PUSH
55231: LD_INT 1
55233: ARRAY
55234: PPUSH
55235: CALL_OW 254
55239: PPUSH
55240: LD_INT 5
55242: PPUSH
55243: CALL_OW 273
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
55252: LD_VAR 0 16
55256: PUSH
55257: LD_INT 1
55259: ARRAY
55260: PPUSH
55261: LD_VAR 0 16
55265: PUSH
55266: LD_INT 2
55268: ARRAY
55269: PPUSH
55270: CALL_OW 488
55274: IFFALSE 55305
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
55276: LD_VAR 0 13
55280: PPUSH
55281: LD_VAR 0 16
55285: PUSH
55286: LD_INT 1
55288: ARRAY
55289: PPUSH
55290: LD_VAR 0 16
55294: PUSH
55295: LD_INT 2
55297: ARRAY
55298: PPUSH
55299: CALL_OW 111
// continue ;
55303: GO 54795
// end ; end ; r := GetDir ( tmp ) ;
55305: LD_ADDR_VAR 0 15
55309: PUSH
55310: LD_VAR 0 13
55314: PPUSH
55315: CALL_OW 254
55319: ST_TO_ADDR
// if r = 5 then
55320: LD_VAR 0 15
55324: PUSH
55325: LD_INT 5
55327: EQUAL
55328: IFFALSE 55338
// r := 0 ;
55330: LD_ADDR_VAR 0 15
55334: PUSH
55335: LD_INT 0
55337: ST_TO_ADDR
// for j = r to 5 do
55338: LD_ADDR_VAR 0 10
55342: PUSH
55343: DOUBLE
55344: LD_VAR 0 15
55348: DEC
55349: ST_TO_ADDR
55350: LD_INT 5
55352: PUSH
55353: FOR_TO
55354: IFFALSE 55468
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
55356: LD_ADDR_VAR 0 11
55360: PUSH
55361: LD_VAR 0 13
55365: PPUSH
55366: CALL_OW 250
55370: PPUSH
55371: LD_VAR 0 10
55375: PPUSH
55376: LD_INT 2
55378: PPUSH
55379: CALL_OW 272
55383: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
55384: LD_ADDR_VAR 0 12
55388: PUSH
55389: LD_VAR 0 13
55393: PPUSH
55394: CALL_OW 251
55398: PPUSH
55399: LD_VAR 0 10
55403: PPUSH
55404: LD_INT 2
55406: PPUSH
55407: CALL_OW 273
55411: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
55412: LD_VAR 0 11
55416: PPUSH
55417: LD_VAR 0 12
55421: PPUSH
55422: CALL_OW 488
55426: PUSH
55427: LD_VAR 0 11
55431: PPUSH
55432: LD_VAR 0 12
55436: PPUSH
55437: CALL_OW 428
55441: NOT
55442: AND
55443: IFFALSE 55466
// begin ComMoveXY ( tmp , _x , _y ) ;
55445: LD_VAR 0 13
55449: PPUSH
55450: LD_VAR 0 11
55454: PPUSH
55455: LD_VAR 0 12
55459: PPUSH
55460: CALL_OW 111
// break ;
55464: GO 55468
// end ; end ;
55466: GO 55353
55468: POP
55469: POP
// end ; end ;
55470: GO 54795
55472: POP
55473: POP
// end ;
55474: LD_VAR 0 8
55478: RET
// export function BuildingTechInvented ( side , btype ) ; begin
55479: LD_INT 0
55481: PPUSH
// result := true ;
55482: LD_ADDR_VAR 0 3
55486: PUSH
55487: LD_INT 1
55489: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
55490: LD_VAR 0 2
55494: PUSH
55495: LD_INT 24
55497: DOUBLE
55498: EQUAL
55499: IFTRUE 55509
55501: LD_INT 33
55503: DOUBLE
55504: EQUAL
55505: IFTRUE 55509
55507: GO 55534
55509: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
55510: LD_ADDR_VAR 0 3
55514: PUSH
55515: LD_INT 32
55517: PPUSH
55518: LD_VAR 0 1
55522: PPUSH
55523: CALL_OW 321
55527: PUSH
55528: LD_INT 2
55530: EQUAL
55531: ST_TO_ADDR
55532: GO 55850
55534: LD_INT 20
55536: DOUBLE
55537: EQUAL
55538: IFTRUE 55542
55540: GO 55567
55542: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
55543: LD_ADDR_VAR 0 3
55547: PUSH
55548: LD_INT 6
55550: PPUSH
55551: LD_VAR 0 1
55555: PPUSH
55556: CALL_OW 321
55560: PUSH
55561: LD_INT 2
55563: EQUAL
55564: ST_TO_ADDR
55565: GO 55850
55567: LD_INT 22
55569: DOUBLE
55570: EQUAL
55571: IFTRUE 55581
55573: LD_INT 36
55575: DOUBLE
55576: EQUAL
55577: IFTRUE 55581
55579: GO 55606
55581: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
55582: LD_ADDR_VAR 0 3
55586: PUSH
55587: LD_INT 15
55589: PPUSH
55590: LD_VAR 0 1
55594: PPUSH
55595: CALL_OW 321
55599: PUSH
55600: LD_INT 2
55602: EQUAL
55603: ST_TO_ADDR
55604: GO 55850
55606: LD_INT 30
55608: DOUBLE
55609: EQUAL
55610: IFTRUE 55614
55612: GO 55639
55614: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
55615: LD_ADDR_VAR 0 3
55619: PUSH
55620: LD_INT 20
55622: PPUSH
55623: LD_VAR 0 1
55627: PPUSH
55628: CALL_OW 321
55632: PUSH
55633: LD_INT 2
55635: EQUAL
55636: ST_TO_ADDR
55637: GO 55850
55639: LD_INT 28
55641: DOUBLE
55642: EQUAL
55643: IFTRUE 55653
55645: LD_INT 21
55647: DOUBLE
55648: EQUAL
55649: IFTRUE 55653
55651: GO 55678
55653: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
55654: LD_ADDR_VAR 0 3
55658: PUSH
55659: LD_INT 21
55661: PPUSH
55662: LD_VAR 0 1
55666: PPUSH
55667: CALL_OW 321
55671: PUSH
55672: LD_INT 2
55674: EQUAL
55675: ST_TO_ADDR
55676: GO 55850
55678: LD_INT 16
55680: DOUBLE
55681: EQUAL
55682: IFTRUE 55686
55684: GO 55711
55686: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
55687: LD_ADDR_VAR 0 3
55691: PUSH
55692: LD_INT 84
55694: PPUSH
55695: LD_VAR 0 1
55699: PPUSH
55700: CALL_OW 321
55704: PUSH
55705: LD_INT 2
55707: EQUAL
55708: ST_TO_ADDR
55709: GO 55850
55711: LD_INT 19
55713: DOUBLE
55714: EQUAL
55715: IFTRUE 55725
55717: LD_INT 23
55719: DOUBLE
55720: EQUAL
55721: IFTRUE 55725
55723: GO 55750
55725: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
55726: LD_ADDR_VAR 0 3
55730: PUSH
55731: LD_INT 83
55733: PPUSH
55734: LD_VAR 0 1
55738: PPUSH
55739: CALL_OW 321
55743: PUSH
55744: LD_INT 2
55746: EQUAL
55747: ST_TO_ADDR
55748: GO 55850
55750: LD_INT 17
55752: DOUBLE
55753: EQUAL
55754: IFTRUE 55758
55756: GO 55783
55758: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
55759: LD_ADDR_VAR 0 3
55763: PUSH
55764: LD_INT 39
55766: PPUSH
55767: LD_VAR 0 1
55771: PPUSH
55772: CALL_OW 321
55776: PUSH
55777: LD_INT 2
55779: EQUAL
55780: ST_TO_ADDR
55781: GO 55850
55783: LD_INT 18
55785: DOUBLE
55786: EQUAL
55787: IFTRUE 55791
55789: GO 55816
55791: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
55792: LD_ADDR_VAR 0 3
55796: PUSH
55797: LD_INT 40
55799: PPUSH
55800: LD_VAR 0 1
55804: PPUSH
55805: CALL_OW 321
55809: PUSH
55810: LD_INT 2
55812: EQUAL
55813: ST_TO_ADDR
55814: GO 55850
55816: LD_INT 27
55818: DOUBLE
55819: EQUAL
55820: IFTRUE 55824
55822: GO 55849
55824: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
55825: LD_ADDR_VAR 0 3
55829: PUSH
55830: LD_INT 35
55832: PPUSH
55833: LD_VAR 0 1
55837: PPUSH
55838: CALL_OW 321
55842: PUSH
55843: LD_INT 2
55845: EQUAL
55846: ST_TO_ADDR
55847: GO 55850
55849: POP
// end ;
55850: LD_VAR 0 3
55854: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
55855: LD_INT 0
55857: PPUSH
55858: PPUSH
55859: PPUSH
55860: PPUSH
55861: PPUSH
55862: PPUSH
55863: PPUSH
55864: PPUSH
55865: PPUSH
55866: PPUSH
55867: PPUSH
// result := false ;
55868: LD_ADDR_VAR 0 6
55872: PUSH
55873: LD_INT 0
55875: ST_TO_ADDR
// if btype = b_depot then
55876: LD_VAR 0 2
55880: PUSH
55881: LD_INT 0
55883: EQUAL
55884: IFFALSE 55896
// begin result := true ;
55886: LD_ADDR_VAR 0 6
55890: PUSH
55891: LD_INT 1
55893: ST_TO_ADDR
// exit ;
55894: GO 56722
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
55896: LD_VAR 0 1
55900: NOT
55901: PUSH
55902: LD_VAR 0 1
55906: PPUSH
55907: CALL_OW 266
55911: PUSH
55912: LD_INT 0
55914: PUSH
55915: LD_INT 1
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: IN
55922: NOT
55923: OR
55924: PUSH
55925: LD_VAR 0 2
55929: NOT
55930: OR
55931: PUSH
55932: LD_VAR 0 5
55936: PUSH
55937: LD_INT 0
55939: PUSH
55940: LD_INT 1
55942: PUSH
55943: LD_INT 2
55945: PUSH
55946: LD_INT 3
55948: PUSH
55949: LD_INT 4
55951: PUSH
55952: LD_INT 5
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: IN
55963: NOT
55964: OR
55965: PUSH
55966: LD_VAR 0 3
55970: PPUSH
55971: LD_VAR 0 4
55975: PPUSH
55976: CALL_OW 488
55980: NOT
55981: OR
55982: IFFALSE 55986
// exit ;
55984: GO 56722
// side := GetSide ( depot ) ;
55986: LD_ADDR_VAR 0 9
55990: PUSH
55991: LD_VAR 0 1
55995: PPUSH
55996: CALL_OW 255
56000: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
56001: LD_VAR 0 9
56005: PPUSH
56006: LD_VAR 0 2
56010: PPUSH
56011: CALL 55479 0 2
56015: NOT
56016: IFFALSE 56020
// exit ;
56018: GO 56722
// pom := GetBase ( depot ) ;
56020: LD_ADDR_VAR 0 10
56024: PUSH
56025: LD_VAR 0 1
56029: PPUSH
56030: CALL_OW 274
56034: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
56035: LD_ADDR_VAR 0 11
56039: PUSH
56040: LD_VAR 0 2
56044: PPUSH
56045: LD_VAR 0 1
56049: PPUSH
56050: CALL_OW 248
56054: PPUSH
56055: CALL_OW 450
56059: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
56060: LD_VAR 0 10
56064: PPUSH
56065: LD_INT 1
56067: PPUSH
56068: CALL_OW 275
56072: PUSH
56073: LD_VAR 0 11
56077: PUSH
56078: LD_INT 1
56080: ARRAY
56081: GREATEREQUAL
56082: PUSH
56083: LD_VAR 0 10
56087: PPUSH
56088: LD_INT 2
56090: PPUSH
56091: CALL_OW 275
56095: PUSH
56096: LD_VAR 0 11
56100: PUSH
56101: LD_INT 2
56103: ARRAY
56104: GREATEREQUAL
56105: AND
56106: PUSH
56107: LD_VAR 0 10
56111: PPUSH
56112: LD_INT 3
56114: PPUSH
56115: CALL_OW 275
56119: PUSH
56120: LD_VAR 0 11
56124: PUSH
56125: LD_INT 3
56127: ARRAY
56128: GREATEREQUAL
56129: AND
56130: NOT
56131: IFFALSE 56135
// exit ;
56133: GO 56722
// if GetBType ( depot ) = b_depot then
56135: LD_VAR 0 1
56139: PPUSH
56140: CALL_OW 266
56144: PUSH
56145: LD_INT 0
56147: EQUAL
56148: IFFALSE 56160
// dist := 28 else
56150: LD_ADDR_VAR 0 14
56154: PUSH
56155: LD_INT 28
56157: ST_TO_ADDR
56158: GO 56168
// dist := 36 ;
56160: LD_ADDR_VAR 0 14
56164: PUSH
56165: LD_INT 36
56167: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
56168: LD_VAR 0 1
56172: PPUSH
56173: LD_VAR 0 3
56177: PPUSH
56178: LD_VAR 0 4
56182: PPUSH
56183: CALL_OW 297
56187: PUSH
56188: LD_VAR 0 14
56192: GREATER
56193: IFFALSE 56197
// exit ;
56195: GO 56722
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
56197: LD_ADDR_VAR 0 12
56201: PUSH
56202: LD_VAR 0 2
56206: PPUSH
56207: LD_VAR 0 3
56211: PPUSH
56212: LD_VAR 0 4
56216: PPUSH
56217: LD_VAR 0 5
56221: PPUSH
56222: LD_VAR 0 1
56226: PPUSH
56227: CALL_OW 248
56231: PPUSH
56232: LD_INT 0
56234: PPUSH
56235: CALL 56727 0 6
56239: ST_TO_ADDR
// if not hexes then
56240: LD_VAR 0 12
56244: NOT
56245: IFFALSE 56249
// exit ;
56247: GO 56722
// hex := GetHexInfo ( x , y ) ;
56249: LD_ADDR_VAR 0 15
56253: PUSH
56254: LD_VAR 0 3
56258: PPUSH
56259: LD_VAR 0 4
56263: PPUSH
56264: CALL_OW 546
56268: ST_TO_ADDR
// if hex [ 1 ] then
56269: LD_VAR 0 15
56273: PUSH
56274: LD_INT 1
56276: ARRAY
56277: IFFALSE 56281
// exit ;
56279: GO 56722
// height := hex [ 2 ] ;
56281: LD_ADDR_VAR 0 13
56285: PUSH
56286: LD_VAR 0 15
56290: PUSH
56291: LD_INT 2
56293: ARRAY
56294: ST_TO_ADDR
// for i = 1 to hexes do
56295: LD_ADDR_VAR 0 7
56299: PUSH
56300: DOUBLE
56301: LD_INT 1
56303: DEC
56304: ST_TO_ADDR
56305: LD_VAR 0 12
56309: PUSH
56310: FOR_TO
56311: IFFALSE 56641
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
56313: LD_VAR 0 12
56317: PUSH
56318: LD_VAR 0 7
56322: ARRAY
56323: PUSH
56324: LD_INT 1
56326: ARRAY
56327: PPUSH
56328: LD_VAR 0 12
56332: PUSH
56333: LD_VAR 0 7
56337: ARRAY
56338: PUSH
56339: LD_INT 2
56341: ARRAY
56342: PPUSH
56343: CALL_OW 488
56347: NOT
56348: PUSH
56349: LD_VAR 0 12
56353: PUSH
56354: LD_VAR 0 7
56358: ARRAY
56359: PUSH
56360: LD_INT 1
56362: ARRAY
56363: PPUSH
56364: LD_VAR 0 12
56368: PUSH
56369: LD_VAR 0 7
56373: ARRAY
56374: PUSH
56375: LD_INT 2
56377: ARRAY
56378: PPUSH
56379: CALL_OW 428
56383: PUSH
56384: LD_INT 0
56386: GREATER
56387: OR
56388: PUSH
56389: LD_VAR 0 12
56393: PUSH
56394: LD_VAR 0 7
56398: ARRAY
56399: PUSH
56400: LD_INT 1
56402: ARRAY
56403: PPUSH
56404: LD_VAR 0 12
56408: PUSH
56409: LD_VAR 0 7
56413: ARRAY
56414: PUSH
56415: LD_INT 2
56417: ARRAY
56418: PPUSH
56419: CALL_OW 351
56423: OR
56424: IFFALSE 56430
// exit ;
56426: POP
56427: POP
56428: GO 56722
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56430: LD_ADDR_VAR 0 8
56434: PUSH
56435: LD_VAR 0 12
56439: PUSH
56440: LD_VAR 0 7
56444: ARRAY
56445: PUSH
56446: LD_INT 1
56448: ARRAY
56449: PPUSH
56450: LD_VAR 0 12
56454: PUSH
56455: LD_VAR 0 7
56459: ARRAY
56460: PUSH
56461: LD_INT 2
56463: ARRAY
56464: PPUSH
56465: CALL_OW 546
56469: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
56470: LD_VAR 0 8
56474: PUSH
56475: LD_INT 1
56477: ARRAY
56478: PUSH
56479: LD_VAR 0 8
56483: PUSH
56484: LD_INT 2
56486: ARRAY
56487: PUSH
56488: LD_VAR 0 13
56492: PUSH
56493: LD_INT 2
56495: PLUS
56496: GREATER
56497: OR
56498: PUSH
56499: LD_VAR 0 8
56503: PUSH
56504: LD_INT 2
56506: ARRAY
56507: PUSH
56508: LD_VAR 0 13
56512: PUSH
56513: LD_INT 2
56515: MINUS
56516: LESS
56517: OR
56518: PUSH
56519: LD_VAR 0 8
56523: PUSH
56524: LD_INT 3
56526: ARRAY
56527: PUSH
56528: LD_INT 0
56530: PUSH
56531: LD_INT 8
56533: PUSH
56534: LD_INT 9
56536: PUSH
56537: LD_INT 10
56539: PUSH
56540: LD_INT 11
56542: PUSH
56543: LD_INT 12
56545: PUSH
56546: LD_INT 13
56548: PUSH
56549: LD_INT 16
56551: PUSH
56552: LD_INT 17
56554: PUSH
56555: LD_INT 18
56557: PUSH
56558: LD_INT 19
56560: PUSH
56561: LD_INT 20
56563: PUSH
56564: LD_INT 21
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: IN
56582: NOT
56583: OR
56584: PUSH
56585: LD_VAR 0 8
56589: PUSH
56590: LD_INT 5
56592: ARRAY
56593: NOT
56594: OR
56595: PUSH
56596: LD_VAR 0 8
56600: PUSH
56601: LD_INT 6
56603: ARRAY
56604: PUSH
56605: LD_INT 1
56607: PUSH
56608: LD_INT 2
56610: PUSH
56611: LD_INT 7
56613: PUSH
56614: LD_INT 9
56616: PUSH
56617: LD_INT 10
56619: PUSH
56620: LD_INT 11
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: IN
56631: NOT
56632: OR
56633: IFFALSE 56639
// exit ;
56635: POP
56636: POP
56637: GO 56722
// end ;
56639: GO 56310
56641: POP
56642: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
56643: LD_VAR 0 9
56647: PPUSH
56648: LD_VAR 0 3
56652: PPUSH
56653: LD_VAR 0 4
56657: PPUSH
56658: LD_INT 20
56660: PPUSH
56661: CALL 48645 0 4
56665: PUSH
56666: LD_INT 4
56668: ARRAY
56669: IFFALSE 56673
// exit ;
56671: GO 56722
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
56673: LD_VAR 0 2
56677: PUSH
56678: LD_INT 29
56680: PUSH
56681: LD_INT 30
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: IN
56688: PUSH
56689: LD_VAR 0 3
56693: PPUSH
56694: LD_VAR 0 4
56698: PPUSH
56699: LD_VAR 0 9
56703: PPUSH
56704: CALL_OW 440
56708: NOT
56709: AND
56710: IFFALSE 56714
// exit ;
56712: GO 56722
// result := true ;
56714: LD_ADDR_VAR 0 6
56718: PUSH
56719: LD_INT 1
56721: ST_TO_ADDR
// end ;
56722: LD_VAR 0 6
56726: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
56727: LD_INT 0
56729: PPUSH
56730: PPUSH
56731: PPUSH
56732: PPUSH
56733: PPUSH
56734: PPUSH
56735: PPUSH
56736: PPUSH
56737: PPUSH
56738: PPUSH
56739: PPUSH
56740: PPUSH
56741: PPUSH
56742: PPUSH
56743: PPUSH
56744: PPUSH
56745: PPUSH
56746: PPUSH
56747: PPUSH
56748: PPUSH
56749: PPUSH
56750: PPUSH
56751: PPUSH
56752: PPUSH
56753: PPUSH
56754: PPUSH
56755: PPUSH
56756: PPUSH
56757: PPUSH
56758: PPUSH
56759: PPUSH
56760: PPUSH
56761: PPUSH
56762: PPUSH
56763: PPUSH
56764: PPUSH
56765: PPUSH
56766: PPUSH
56767: PPUSH
56768: PPUSH
56769: PPUSH
56770: PPUSH
56771: PPUSH
56772: PPUSH
56773: PPUSH
56774: PPUSH
56775: PPUSH
56776: PPUSH
56777: PPUSH
56778: PPUSH
56779: PPUSH
56780: PPUSH
56781: PPUSH
56782: PPUSH
56783: PPUSH
56784: PPUSH
56785: PPUSH
56786: PPUSH
// result = [ ] ;
56787: LD_ADDR_VAR 0 7
56791: PUSH
56792: EMPTY
56793: ST_TO_ADDR
// temp_list = [ ] ;
56794: LD_ADDR_VAR 0 9
56798: PUSH
56799: EMPTY
56800: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
56801: LD_VAR 0 4
56805: PUSH
56806: LD_INT 0
56808: PUSH
56809: LD_INT 1
56811: PUSH
56812: LD_INT 2
56814: PUSH
56815: LD_INT 3
56817: PUSH
56818: LD_INT 4
56820: PUSH
56821: LD_INT 5
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: IN
56832: NOT
56833: PUSH
56834: LD_VAR 0 1
56838: PUSH
56839: LD_INT 0
56841: PUSH
56842: LD_INT 1
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: IN
56849: PUSH
56850: LD_VAR 0 5
56854: PUSH
56855: LD_INT 1
56857: PUSH
56858: LD_INT 2
56860: PUSH
56861: LD_INT 3
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: LIST
56868: IN
56869: NOT
56870: AND
56871: OR
56872: IFFALSE 56876
// exit ;
56874: GO 75267
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
56876: LD_VAR 0 1
56880: PUSH
56881: LD_INT 6
56883: PUSH
56884: LD_INT 7
56886: PUSH
56887: LD_INT 8
56889: PUSH
56890: LD_INT 13
56892: PUSH
56893: LD_INT 12
56895: PUSH
56896: LD_INT 15
56898: PUSH
56899: LD_INT 11
56901: PUSH
56902: LD_INT 14
56904: PUSH
56905: LD_INT 10
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: IN
56919: IFFALSE 56929
// btype = b_lab ;
56921: LD_ADDR_VAR 0 1
56925: PUSH
56926: LD_INT 6
56928: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
56929: LD_VAR 0 6
56933: PUSH
56934: LD_INT 0
56936: PUSH
56937: LD_INT 1
56939: PUSH
56940: LD_INT 2
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: LIST
56947: IN
56948: NOT
56949: PUSH
56950: LD_VAR 0 1
56954: PUSH
56955: LD_INT 0
56957: PUSH
56958: LD_INT 1
56960: PUSH
56961: LD_INT 2
56963: PUSH
56964: LD_INT 3
56966: PUSH
56967: LD_INT 6
56969: PUSH
56970: LD_INT 36
56972: PUSH
56973: LD_INT 4
56975: PUSH
56976: LD_INT 5
56978: PUSH
56979: LD_INT 31
56981: PUSH
56982: LD_INT 32
56984: PUSH
56985: LD_INT 33
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: IN
57001: NOT
57002: PUSH
57003: LD_VAR 0 6
57007: PUSH
57008: LD_INT 1
57010: EQUAL
57011: AND
57012: OR
57013: PUSH
57014: LD_VAR 0 1
57018: PUSH
57019: LD_INT 2
57021: PUSH
57022: LD_INT 3
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: IN
57029: NOT
57030: PUSH
57031: LD_VAR 0 6
57035: PUSH
57036: LD_INT 2
57038: EQUAL
57039: AND
57040: OR
57041: IFFALSE 57051
// mode = 0 ;
57043: LD_ADDR_VAR 0 6
57047: PUSH
57048: LD_INT 0
57050: ST_TO_ADDR
// case mode of 0 :
57051: LD_VAR 0 6
57055: PUSH
57056: LD_INT 0
57058: DOUBLE
57059: EQUAL
57060: IFTRUE 57064
57062: GO 68517
57064: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57065: LD_ADDR_VAR 0 11
57069: PUSH
57070: LD_INT 0
57072: PUSH
57073: LD_INT 0
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 0
57082: PUSH
57083: LD_INT 1
57085: NEG
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 1
57093: PUSH
57094: LD_INT 0
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 1
57103: PUSH
57104: LD_INT 1
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 0
57113: PUSH
57114: LD_INT 1
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 1
57123: NEG
57124: PUSH
57125: LD_INT 0
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 1
57134: NEG
57135: PUSH
57136: LD_INT 1
57138: NEG
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 1
57146: NEG
57147: PUSH
57148: LD_INT 2
57150: NEG
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 0
57158: PUSH
57159: LD_INT 2
57161: NEG
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 1
57169: PUSH
57170: LD_INT 1
57172: NEG
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 1
57180: PUSH
57181: LD_INT 2
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 0
57190: PUSH
57191: LD_INT 2
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 1
57200: NEG
57201: PUSH
57202: LD_INT 1
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 1
57211: PUSH
57212: LD_INT 3
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 0
57221: PUSH
57222: LD_INT 3
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 1
57231: NEG
57232: PUSH
57233: LD_INT 2
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57258: LD_ADDR_VAR 0 12
57262: PUSH
57263: LD_INT 0
57265: PUSH
57266: LD_INT 0
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 0
57275: PUSH
57276: LD_INT 1
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 1
57286: PUSH
57287: LD_INT 0
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 1
57296: PUSH
57297: LD_INT 1
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 0
57306: PUSH
57307: LD_INT 1
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 1
57316: NEG
57317: PUSH
57318: LD_INT 0
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 1
57327: NEG
57328: PUSH
57329: LD_INT 1
57331: NEG
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 1
57339: PUSH
57340: LD_INT 1
57342: NEG
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 2
57350: PUSH
57351: LD_INT 0
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 2
57360: PUSH
57361: LD_INT 1
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 1
57370: NEG
57371: PUSH
57372: LD_INT 1
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 2
57381: NEG
57382: PUSH
57383: LD_INT 0
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 2
57392: NEG
57393: PUSH
57394: LD_INT 1
57396: NEG
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 2
57404: NEG
57405: PUSH
57406: LD_INT 1
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 3
57415: NEG
57416: PUSH
57417: LD_INT 0
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 3
57426: NEG
57427: PUSH
57428: LD_INT 1
57430: NEG
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57454: LD_ADDR_VAR 0 13
57458: PUSH
57459: LD_INT 0
57461: PUSH
57462: LD_INT 0
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 0
57471: PUSH
57472: LD_INT 1
57474: NEG
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 1
57482: PUSH
57483: LD_INT 0
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 1
57492: PUSH
57493: LD_INT 1
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 0
57502: PUSH
57503: LD_INT 1
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 1
57512: NEG
57513: PUSH
57514: LD_INT 0
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 1
57523: NEG
57524: PUSH
57525: LD_INT 1
57527: NEG
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 1
57535: NEG
57536: PUSH
57537: LD_INT 2
57539: NEG
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 2
57547: PUSH
57548: LD_INT 1
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 2
57557: PUSH
57558: LD_INT 2
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 1
57567: PUSH
57568: LD_INT 2
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 2
57577: NEG
57578: PUSH
57579: LD_INT 1
57581: NEG
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 2
57589: NEG
57590: PUSH
57591: LD_INT 2
57593: NEG
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 2
57601: NEG
57602: PUSH
57603: LD_INT 3
57605: NEG
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 3
57613: NEG
57614: PUSH
57615: LD_INT 2
57617: NEG
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 3
57625: NEG
57626: PUSH
57627: LD_INT 3
57629: NEG
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57653: LD_ADDR_VAR 0 14
57657: PUSH
57658: LD_INT 0
57660: PUSH
57661: LD_INT 0
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 0
57670: PUSH
57671: LD_INT 1
57673: NEG
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 1
57681: PUSH
57682: LD_INT 0
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 1
57691: PUSH
57692: LD_INT 1
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 0
57701: PUSH
57702: LD_INT 1
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 1
57711: NEG
57712: PUSH
57713: LD_INT 0
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 1
57722: NEG
57723: PUSH
57724: LD_INT 1
57726: NEG
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 1
57734: NEG
57735: PUSH
57736: LD_INT 2
57738: NEG
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 0
57746: PUSH
57747: LD_INT 2
57749: NEG
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 1
57757: PUSH
57758: LD_INT 1
57760: NEG
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 1
57768: PUSH
57769: LD_INT 2
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 0
57778: PUSH
57779: LD_INT 2
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 1
57788: NEG
57789: PUSH
57790: LD_INT 1
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 1
57799: NEG
57800: PUSH
57801: LD_INT 3
57803: NEG
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 0
57811: PUSH
57812: LD_INT 3
57814: NEG
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 1
57822: PUSH
57823: LD_INT 2
57825: NEG
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57849: LD_ADDR_VAR 0 15
57853: PUSH
57854: LD_INT 0
57856: PUSH
57857: LD_INT 0
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 0
57866: PUSH
57867: LD_INT 1
57869: NEG
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 1
57877: PUSH
57878: LD_INT 0
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 1
57887: PUSH
57888: LD_INT 1
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 0
57897: PUSH
57898: LD_INT 1
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 1
57907: NEG
57908: PUSH
57909: LD_INT 0
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 1
57918: NEG
57919: PUSH
57920: LD_INT 1
57922: NEG
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 1
57930: PUSH
57931: LD_INT 1
57933: NEG
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 2
57941: PUSH
57942: LD_INT 0
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 2
57951: PUSH
57952: LD_INT 1
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 1
57961: NEG
57962: PUSH
57963: LD_INT 1
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 2
57972: NEG
57973: PUSH
57974: LD_INT 0
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 2
57983: NEG
57984: PUSH
57985: LD_INT 1
57987: NEG
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 2
57995: PUSH
57996: LD_INT 1
57998: NEG
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 3
58006: PUSH
58007: LD_INT 0
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 3
58016: PUSH
58017: LD_INT 1
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58042: LD_ADDR_VAR 0 16
58046: PUSH
58047: LD_INT 0
58049: PUSH
58050: LD_INT 0
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 0
58059: PUSH
58060: LD_INT 1
58062: NEG
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 1
58070: PUSH
58071: LD_INT 0
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 1
58080: PUSH
58081: LD_INT 1
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 0
58090: PUSH
58091: LD_INT 1
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 1
58100: NEG
58101: PUSH
58102: LD_INT 0
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 1
58111: NEG
58112: PUSH
58113: LD_INT 1
58115: NEG
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 1
58123: NEG
58124: PUSH
58125: LD_INT 2
58127: NEG
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 2
58135: PUSH
58136: LD_INT 1
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 2
58145: PUSH
58146: LD_INT 2
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 1
58155: PUSH
58156: LD_INT 2
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 2
58165: NEG
58166: PUSH
58167: LD_INT 1
58169: NEG
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 2
58177: NEG
58178: PUSH
58179: LD_INT 2
58181: NEG
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 3
58189: PUSH
58190: LD_INT 2
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 3
58199: PUSH
58200: LD_INT 3
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 2
58209: PUSH
58210: LD_INT 3
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58235: LD_ADDR_VAR 0 17
58239: PUSH
58240: LD_INT 0
58242: PUSH
58243: LD_INT 0
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 0
58252: PUSH
58253: LD_INT 1
58255: NEG
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 1
58263: PUSH
58264: LD_INT 0
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 1
58273: PUSH
58274: LD_INT 1
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 0
58283: PUSH
58284: LD_INT 1
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 1
58293: NEG
58294: PUSH
58295: LD_INT 0
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 1
58304: NEG
58305: PUSH
58306: LD_INT 1
58308: NEG
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 1
58316: NEG
58317: PUSH
58318: LD_INT 2
58320: NEG
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 0
58328: PUSH
58329: LD_INT 2
58331: NEG
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 1
58339: PUSH
58340: LD_INT 1
58342: NEG
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 2
58350: PUSH
58351: LD_INT 0
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 2
58360: PUSH
58361: LD_INT 1
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 2
58370: PUSH
58371: LD_INT 2
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 1
58380: PUSH
58381: LD_INT 2
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 0
58390: PUSH
58391: LD_INT 2
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 1
58400: NEG
58401: PUSH
58402: LD_INT 1
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 2
58411: NEG
58412: PUSH
58413: LD_INT 0
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 2
58422: NEG
58423: PUSH
58424: LD_INT 1
58426: NEG
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 2
58434: NEG
58435: PUSH
58436: LD_INT 2
58438: NEG
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58465: LD_ADDR_VAR 0 18
58469: PUSH
58470: LD_INT 0
58472: PUSH
58473: LD_INT 0
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 0
58482: PUSH
58483: LD_INT 1
58485: NEG
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 1
58493: PUSH
58494: LD_INT 0
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 1
58503: PUSH
58504: LD_INT 1
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 0
58513: PUSH
58514: LD_INT 1
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 1
58523: NEG
58524: PUSH
58525: LD_INT 0
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 1
58534: NEG
58535: PUSH
58536: LD_INT 1
58538: NEG
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 1
58546: NEG
58547: PUSH
58548: LD_INT 2
58550: NEG
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 0
58558: PUSH
58559: LD_INT 2
58561: NEG
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 1
58569: PUSH
58570: LD_INT 1
58572: NEG
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 2
58580: PUSH
58581: LD_INT 0
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 2
58590: PUSH
58591: LD_INT 1
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 2
58600: PUSH
58601: LD_INT 2
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 1
58610: PUSH
58611: LD_INT 2
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 0
58620: PUSH
58621: LD_INT 2
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 1
58630: NEG
58631: PUSH
58632: LD_INT 1
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 2
58641: NEG
58642: PUSH
58643: LD_INT 0
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 2
58652: NEG
58653: PUSH
58654: LD_INT 1
58656: NEG
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 2
58664: NEG
58665: PUSH
58666: LD_INT 2
58668: NEG
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58695: LD_ADDR_VAR 0 19
58699: PUSH
58700: LD_INT 0
58702: PUSH
58703: LD_INT 0
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 0
58712: PUSH
58713: LD_INT 1
58715: NEG
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 1
58723: PUSH
58724: LD_INT 0
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 1
58733: PUSH
58734: LD_INT 1
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 0
58743: PUSH
58744: LD_INT 1
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 1
58753: NEG
58754: PUSH
58755: LD_INT 0
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 1
58764: NEG
58765: PUSH
58766: LD_INT 1
58768: NEG
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 1
58776: NEG
58777: PUSH
58778: LD_INT 2
58780: NEG
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 0
58788: PUSH
58789: LD_INT 2
58791: NEG
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 1
58799: PUSH
58800: LD_INT 1
58802: NEG
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 2
58810: PUSH
58811: LD_INT 0
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 2
58820: PUSH
58821: LD_INT 1
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 2
58830: PUSH
58831: LD_INT 2
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 1
58840: PUSH
58841: LD_INT 2
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 0
58850: PUSH
58851: LD_INT 2
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 1
58860: NEG
58861: PUSH
58862: LD_INT 1
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 2
58871: NEG
58872: PUSH
58873: LD_INT 0
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 2
58882: NEG
58883: PUSH
58884: LD_INT 1
58886: NEG
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 2
58894: NEG
58895: PUSH
58896: LD_INT 2
58898: NEG
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58925: LD_ADDR_VAR 0 20
58929: PUSH
58930: LD_INT 0
58932: PUSH
58933: LD_INT 0
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 0
58942: PUSH
58943: LD_INT 1
58945: NEG
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 1
58953: PUSH
58954: LD_INT 0
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 1
58963: PUSH
58964: LD_INT 1
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 0
58973: PUSH
58974: LD_INT 1
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 1
58983: NEG
58984: PUSH
58985: LD_INT 0
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 1
58994: NEG
58995: PUSH
58996: LD_INT 1
58998: NEG
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 1
59006: NEG
59007: PUSH
59008: LD_INT 2
59010: NEG
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 0
59018: PUSH
59019: LD_INT 2
59021: NEG
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 1
59029: PUSH
59030: LD_INT 1
59032: NEG
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 2
59040: PUSH
59041: LD_INT 0
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 2
59050: PUSH
59051: LD_INT 1
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 2
59060: PUSH
59061: LD_INT 2
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 1
59070: PUSH
59071: LD_INT 2
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 0
59080: PUSH
59081: LD_INT 2
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 1
59090: NEG
59091: PUSH
59092: LD_INT 1
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 2
59101: NEG
59102: PUSH
59103: LD_INT 0
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 2
59112: NEG
59113: PUSH
59114: LD_INT 1
59116: NEG
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 2
59124: NEG
59125: PUSH
59126: LD_INT 2
59128: NEG
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59155: LD_ADDR_VAR 0 21
59159: PUSH
59160: LD_INT 0
59162: PUSH
59163: LD_INT 0
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 0
59172: PUSH
59173: LD_INT 1
59175: NEG
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 1
59183: PUSH
59184: LD_INT 0
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 1
59193: PUSH
59194: LD_INT 1
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 0
59203: PUSH
59204: LD_INT 1
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 1
59213: NEG
59214: PUSH
59215: LD_INT 0
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 1
59224: NEG
59225: PUSH
59226: LD_INT 1
59228: NEG
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 1
59236: NEG
59237: PUSH
59238: LD_INT 2
59240: NEG
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 0
59248: PUSH
59249: LD_INT 2
59251: NEG
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 1
59259: PUSH
59260: LD_INT 1
59262: NEG
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 2
59270: PUSH
59271: LD_INT 0
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 2
59280: PUSH
59281: LD_INT 1
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 2
59290: PUSH
59291: LD_INT 2
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 1
59300: PUSH
59301: LD_INT 2
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 0
59310: PUSH
59311: LD_INT 2
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 1
59320: NEG
59321: PUSH
59322: LD_INT 1
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 2
59331: NEG
59332: PUSH
59333: LD_INT 0
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 2
59342: NEG
59343: PUSH
59344: LD_INT 1
59346: NEG
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 2
59354: NEG
59355: PUSH
59356: LD_INT 2
59358: NEG
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59385: LD_ADDR_VAR 0 22
59389: PUSH
59390: LD_INT 0
59392: PUSH
59393: LD_INT 0
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 0
59402: PUSH
59403: LD_INT 1
59405: NEG
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 1
59413: PUSH
59414: LD_INT 0
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 1
59423: PUSH
59424: LD_INT 1
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 0
59433: PUSH
59434: LD_INT 1
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 1
59443: NEG
59444: PUSH
59445: LD_INT 0
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 1
59454: NEG
59455: PUSH
59456: LD_INT 1
59458: NEG
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 1
59466: NEG
59467: PUSH
59468: LD_INT 2
59470: NEG
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 0
59478: PUSH
59479: LD_INT 2
59481: NEG
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 1
59489: PUSH
59490: LD_INT 1
59492: NEG
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 2
59500: PUSH
59501: LD_INT 0
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 2
59510: PUSH
59511: LD_INT 1
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 2
59520: PUSH
59521: LD_INT 2
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 1
59530: PUSH
59531: LD_INT 2
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 0
59540: PUSH
59541: LD_INT 2
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 1
59550: NEG
59551: PUSH
59552: LD_INT 1
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 2
59561: NEG
59562: PUSH
59563: LD_INT 0
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 2
59572: NEG
59573: PUSH
59574: LD_INT 1
59576: NEG
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 2
59584: NEG
59585: PUSH
59586: LD_INT 2
59588: NEG
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59615: LD_ADDR_VAR 0 23
59619: PUSH
59620: LD_INT 0
59622: PUSH
59623: LD_INT 0
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 0
59632: PUSH
59633: LD_INT 1
59635: NEG
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 1
59643: PUSH
59644: LD_INT 0
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 1
59653: PUSH
59654: LD_INT 1
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 0
59663: PUSH
59664: LD_INT 1
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 1
59673: NEG
59674: PUSH
59675: LD_INT 0
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 1
59684: NEG
59685: PUSH
59686: LD_INT 1
59688: NEG
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 1
59696: NEG
59697: PUSH
59698: LD_INT 2
59700: NEG
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 0
59708: PUSH
59709: LD_INT 2
59711: NEG
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 1
59719: PUSH
59720: LD_INT 1
59722: NEG
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 2
59730: PUSH
59731: LD_INT 0
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 2
59740: PUSH
59741: LD_INT 1
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 2
59750: PUSH
59751: LD_INT 2
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 1
59760: PUSH
59761: LD_INT 2
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 0
59770: PUSH
59771: LD_INT 2
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 1
59780: NEG
59781: PUSH
59782: LD_INT 1
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 2
59791: NEG
59792: PUSH
59793: LD_INT 0
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 2
59802: NEG
59803: PUSH
59804: LD_INT 1
59806: NEG
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 2
59814: NEG
59815: PUSH
59816: LD_INT 2
59818: NEG
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 2
59826: NEG
59827: PUSH
59828: LD_INT 3
59830: NEG
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 1
59838: NEG
59839: PUSH
59840: LD_INT 3
59842: NEG
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 1
59850: PUSH
59851: LD_INT 2
59853: NEG
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 2
59861: PUSH
59862: LD_INT 1
59864: NEG
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
59895: LD_ADDR_VAR 0 24
59899: PUSH
59900: LD_INT 0
59902: PUSH
59903: LD_INT 0
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 0
59912: PUSH
59913: LD_INT 1
59915: NEG
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 1
59923: PUSH
59924: LD_INT 0
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 1
59933: PUSH
59934: LD_INT 1
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 0
59943: PUSH
59944: LD_INT 1
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 1
59953: NEG
59954: PUSH
59955: LD_INT 0
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 1
59964: NEG
59965: PUSH
59966: LD_INT 1
59968: NEG
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 1
59976: NEG
59977: PUSH
59978: LD_INT 2
59980: NEG
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 0
59988: PUSH
59989: LD_INT 2
59991: NEG
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 1
59999: PUSH
60000: LD_INT 1
60002: NEG
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 2
60010: PUSH
60011: LD_INT 0
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 2
60020: PUSH
60021: LD_INT 1
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 2
60030: PUSH
60031: LD_INT 2
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 1
60040: PUSH
60041: LD_INT 2
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 0
60050: PUSH
60051: LD_INT 2
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 1
60060: NEG
60061: PUSH
60062: LD_INT 1
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 2
60071: NEG
60072: PUSH
60073: LD_INT 0
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 2
60082: NEG
60083: PUSH
60084: LD_INT 1
60086: NEG
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 2
60094: NEG
60095: PUSH
60096: LD_INT 2
60098: NEG
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 1
60106: PUSH
60107: LD_INT 2
60109: NEG
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 2
60117: PUSH
60118: LD_INT 1
60120: NEG
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 3
60128: PUSH
60129: LD_INT 1
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 3
60138: PUSH
60139: LD_INT 2
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
60171: LD_ADDR_VAR 0 25
60175: PUSH
60176: LD_INT 0
60178: PUSH
60179: LD_INT 0
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 0
60188: PUSH
60189: LD_INT 1
60191: NEG
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 1
60199: PUSH
60200: LD_INT 0
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 1
60209: PUSH
60210: LD_INT 1
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 0
60219: PUSH
60220: LD_INT 1
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 1
60229: NEG
60230: PUSH
60231: LD_INT 0
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 1
60240: NEG
60241: PUSH
60242: LD_INT 1
60244: NEG
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 1
60252: NEG
60253: PUSH
60254: LD_INT 2
60256: NEG
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 0
60264: PUSH
60265: LD_INT 2
60267: NEG
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 1
60275: PUSH
60276: LD_INT 1
60278: NEG
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 2
60286: PUSH
60287: LD_INT 0
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 2
60296: PUSH
60297: LD_INT 1
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 2
60306: PUSH
60307: LD_INT 2
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 1
60316: PUSH
60317: LD_INT 2
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 0
60326: PUSH
60327: LD_INT 2
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 1
60336: NEG
60337: PUSH
60338: LD_INT 1
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 2
60347: NEG
60348: PUSH
60349: LD_INT 0
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 2
60358: NEG
60359: PUSH
60360: LD_INT 1
60362: NEG
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 2
60370: NEG
60371: PUSH
60372: LD_INT 2
60374: NEG
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 3
60382: PUSH
60383: LD_INT 1
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: LD_INT 3
60392: PUSH
60393: LD_INT 2
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 2
60402: PUSH
60403: LD_INT 3
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 1
60412: PUSH
60413: LD_INT 3
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60445: LD_ADDR_VAR 0 26
60449: PUSH
60450: LD_INT 0
60452: PUSH
60453: LD_INT 0
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 0
60462: PUSH
60463: LD_INT 1
60465: NEG
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 1
60473: PUSH
60474: LD_INT 0
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 1
60483: PUSH
60484: LD_INT 1
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 0
60493: PUSH
60494: LD_INT 1
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 1
60503: NEG
60504: PUSH
60505: LD_INT 0
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 1
60514: NEG
60515: PUSH
60516: LD_INT 1
60518: NEG
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 1
60526: NEG
60527: PUSH
60528: LD_INT 2
60530: NEG
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 0
60538: PUSH
60539: LD_INT 2
60541: NEG
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 1
60549: PUSH
60550: LD_INT 1
60552: NEG
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 2
60560: PUSH
60561: LD_INT 0
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 2
60570: PUSH
60571: LD_INT 1
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 2
60580: PUSH
60581: LD_INT 2
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 1
60590: PUSH
60591: LD_INT 2
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 0
60600: PUSH
60601: LD_INT 2
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 1
60610: NEG
60611: PUSH
60612: LD_INT 1
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 2
60621: NEG
60622: PUSH
60623: LD_INT 0
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 2
60632: NEG
60633: PUSH
60634: LD_INT 1
60636: NEG
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 2
60644: NEG
60645: PUSH
60646: LD_INT 2
60648: NEG
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 2
60656: PUSH
60657: LD_INT 3
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 1
60666: PUSH
60667: LD_INT 3
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 1
60676: NEG
60677: PUSH
60678: LD_INT 2
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 2
60687: NEG
60688: PUSH
60689: LD_INT 1
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60721: LD_ADDR_VAR 0 27
60725: PUSH
60726: LD_INT 0
60728: PUSH
60729: LD_INT 0
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 0
60738: PUSH
60739: LD_INT 1
60741: NEG
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 1
60749: PUSH
60750: LD_INT 0
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 1
60759: PUSH
60760: LD_INT 1
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 0
60769: PUSH
60770: LD_INT 1
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 1
60779: NEG
60780: PUSH
60781: LD_INT 0
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 1
60790: NEG
60791: PUSH
60792: LD_INT 1
60794: NEG
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 1
60802: NEG
60803: PUSH
60804: LD_INT 2
60806: NEG
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 0
60814: PUSH
60815: LD_INT 2
60817: NEG
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 1
60825: PUSH
60826: LD_INT 1
60828: NEG
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 2
60836: PUSH
60837: LD_INT 0
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 2
60846: PUSH
60847: LD_INT 1
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 2
60856: PUSH
60857: LD_INT 2
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 1
60866: PUSH
60867: LD_INT 2
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 0
60876: PUSH
60877: LD_INT 2
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 1
60886: NEG
60887: PUSH
60888: LD_INT 1
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 2
60897: NEG
60898: PUSH
60899: LD_INT 0
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 2
60908: NEG
60909: PUSH
60910: LD_INT 1
60912: NEG
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 2
60920: NEG
60921: PUSH
60922: LD_INT 2
60924: NEG
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 1
60932: NEG
60933: PUSH
60934: LD_INT 2
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 2
60943: NEG
60944: PUSH
60945: LD_INT 1
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 3
60954: NEG
60955: PUSH
60956: LD_INT 1
60958: NEG
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 3
60966: NEG
60967: PUSH
60968: LD_INT 2
60970: NEG
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61001: LD_ADDR_VAR 0 28
61005: PUSH
61006: LD_INT 0
61008: PUSH
61009: LD_INT 0
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 0
61018: PUSH
61019: LD_INT 1
61021: NEG
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 1
61029: PUSH
61030: LD_INT 0
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 1
61039: PUSH
61040: LD_INT 1
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 0
61049: PUSH
61050: LD_INT 1
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 1
61059: NEG
61060: PUSH
61061: LD_INT 0
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 1
61070: NEG
61071: PUSH
61072: LD_INT 1
61074: NEG
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 1
61082: NEG
61083: PUSH
61084: LD_INT 2
61086: NEG
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 0
61094: PUSH
61095: LD_INT 2
61097: NEG
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 1
61105: PUSH
61106: LD_INT 1
61108: NEG
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 2
61116: PUSH
61117: LD_INT 0
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 2
61126: PUSH
61127: LD_INT 1
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 2
61136: PUSH
61137: LD_INT 2
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 1
61146: PUSH
61147: LD_INT 2
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: LD_INT 0
61156: PUSH
61157: LD_INT 2
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: PUSH
61164: LD_INT 1
61166: NEG
61167: PUSH
61168: LD_INT 1
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 2
61177: NEG
61178: PUSH
61179: LD_INT 0
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 2
61188: NEG
61189: PUSH
61190: LD_INT 1
61192: NEG
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 2
61200: NEG
61201: PUSH
61202: LD_INT 2
61204: NEG
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 2
61212: NEG
61213: PUSH
61214: LD_INT 3
61216: NEG
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 1
61224: NEG
61225: PUSH
61226: LD_INT 3
61228: NEG
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: LD_INT 3
61236: NEG
61237: PUSH
61238: LD_INT 1
61240: NEG
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 3
61248: NEG
61249: PUSH
61250: LD_INT 2
61252: NEG
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61283: LD_ADDR_VAR 0 29
61287: PUSH
61288: LD_INT 0
61290: PUSH
61291: LD_INT 0
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 0
61300: PUSH
61301: LD_INT 1
61303: NEG
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 1
61311: PUSH
61312: LD_INT 0
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 1
61321: PUSH
61322: LD_INT 1
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 0
61331: PUSH
61332: LD_INT 1
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 1
61341: NEG
61342: PUSH
61343: LD_INT 0
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 1
61352: NEG
61353: PUSH
61354: LD_INT 1
61356: NEG
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 1
61364: NEG
61365: PUSH
61366: LD_INT 2
61368: NEG
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 0
61376: PUSH
61377: LD_INT 2
61379: NEG
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 1
61387: PUSH
61388: LD_INT 1
61390: NEG
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 2
61398: PUSH
61399: LD_INT 0
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 2
61408: PUSH
61409: LD_INT 1
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 1
61418: PUSH
61419: LD_INT 2
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 0
61428: PUSH
61429: LD_INT 2
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 1
61438: NEG
61439: PUSH
61440: LD_INT 1
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 2
61449: NEG
61450: PUSH
61451: LD_INT 1
61453: NEG
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 2
61461: NEG
61462: PUSH
61463: LD_INT 2
61465: NEG
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 2
61473: NEG
61474: PUSH
61475: LD_INT 3
61477: NEG
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 2
61485: PUSH
61486: LD_INT 1
61488: NEG
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 3
61496: PUSH
61497: LD_INT 1
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 1
61506: PUSH
61507: LD_INT 3
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 1
61516: NEG
61517: PUSH
61518: LD_INT 2
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 3
61527: NEG
61528: PUSH
61529: LD_INT 2
61531: NEG
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61562: LD_ADDR_VAR 0 30
61566: PUSH
61567: LD_INT 0
61569: PUSH
61570: LD_INT 0
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 0
61579: PUSH
61580: LD_INT 1
61582: NEG
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 1
61590: PUSH
61591: LD_INT 0
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 1
61600: PUSH
61601: LD_INT 1
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 0
61610: PUSH
61611: LD_INT 1
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 1
61620: NEG
61621: PUSH
61622: LD_INT 0
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 1
61631: NEG
61632: PUSH
61633: LD_INT 1
61635: NEG
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 1
61643: NEG
61644: PUSH
61645: LD_INT 2
61647: NEG
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: LD_INT 0
61655: PUSH
61656: LD_INT 2
61658: NEG
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 1
61666: PUSH
61667: LD_INT 1
61669: NEG
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 2
61677: PUSH
61678: LD_INT 0
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 2
61687: PUSH
61688: LD_INT 1
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 2
61697: PUSH
61698: LD_INT 2
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: LD_INT 1
61707: PUSH
61708: LD_INT 2
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 1
61717: NEG
61718: PUSH
61719: LD_INT 1
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: LD_INT 2
61728: NEG
61729: PUSH
61730: LD_INT 0
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 2
61739: NEG
61740: PUSH
61741: LD_INT 1
61743: NEG
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 1
61751: NEG
61752: PUSH
61753: LD_INT 3
61755: NEG
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 1
61763: PUSH
61764: LD_INT 2
61766: NEG
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 3
61774: PUSH
61775: LD_INT 2
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 2
61784: PUSH
61785: LD_INT 3
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 2
61794: NEG
61795: PUSH
61796: LD_INT 1
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 3
61805: NEG
61806: PUSH
61807: LD_INT 1
61809: NEG
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61840: LD_ADDR_VAR 0 31
61844: PUSH
61845: LD_INT 0
61847: PUSH
61848: LD_INT 0
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 0
61857: PUSH
61858: LD_INT 1
61860: NEG
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 1
61868: PUSH
61869: LD_INT 0
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 1
61878: PUSH
61879: LD_INT 1
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 0
61888: PUSH
61889: LD_INT 1
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 1
61898: NEG
61899: PUSH
61900: LD_INT 0
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 1
61909: NEG
61910: PUSH
61911: LD_INT 1
61913: NEG
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 1
61921: NEG
61922: PUSH
61923: LD_INT 2
61925: NEG
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 1
61933: PUSH
61934: LD_INT 1
61936: NEG
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 2
61944: PUSH
61945: LD_INT 0
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 2
61954: PUSH
61955: LD_INT 1
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 2
61964: PUSH
61965: LD_INT 2
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 1
61974: PUSH
61975: LD_INT 2
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 0
61984: PUSH
61985: LD_INT 2
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 1
61994: NEG
61995: PUSH
61996: LD_INT 1
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 2
62005: NEG
62006: PUSH
62007: LD_INT 1
62009: NEG
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 2
62017: NEG
62018: PUSH
62019: LD_INT 2
62021: NEG
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 2
62029: NEG
62030: PUSH
62031: LD_INT 3
62033: NEG
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 2
62041: PUSH
62042: LD_INT 1
62044: NEG
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 3
62052: PUSH
62053: LD_INT 1
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 1
62062: PUSH
62063: LD_INT 3
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 1
62072: NEG
62073: PUSH
62074: LD_INT 2
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 3
62083: NEG
62084: PUSH
62085: LD_INT 2
62087: NEG
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62118: LD_ADDR_VAR 0 32
62122: PUSH
62123: LD_INT 0
62125: PUSH
62126: LD_INT 0
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 0
62135: PUSH
62136: LD_INT 1
62138: NEG
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 1
62146: PUSH
62147: LD_INT 0
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_INT 1
62156: PUSH
62157: LD_INT 1
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 0
62166: PUSH
62167: LD_INT 1
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: PUSH
62174: LD_INT 1
62176: NEG
62177: PUSH
62178: LD_INT 0
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 1
62187: NEG
62188: PUSH
62189: LD_INT 1
62191: NEG
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 1
62199: NEG
62200: PUSH
62201: LD_INT 2
62203: NEG
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 0
62211: PUSH
62212: LD_INT 2
62214: NEG
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 1
62222: PUSH
62223: LD_INT 1
62225: NEG
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 2
62233: PUSH
62234: LD_INT 1
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 2
62243: PUSH
62244: LD_INT 2
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 1
62253: PUSH
62254: LD_INT 2
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 0
62263: PUSH
62264: LD_INT 2
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 1
62273: NEG
62274: PUSH
62275: LD_INT 1
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 2
62284: NEG
62285: PUSH
62286: LD_INT 0
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 2
62295: NEG
62296: PUSH
62297: LD_INT 1
62299: NEG
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 1
62307: NEG
62308: PUSH
62309: LD_INT 3
62311: NEG
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 1
62319: PUSH
62320: LD_INT 2
62322: NEG
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: PUSH
62328: LD_INT 3
62330: PUSH
62331: LD_INT 2
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 2
62340: PUSH
62341: LD_INT 3
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 2
62350: NEG
62351: PUSH
62352: LD_INT 1
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 3
62361: NEG
62362: PUSH
62363: LD_INT 1
62365: NEG
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62396: LD_ADDR_VAR 0 33
62400: PUSH
62401: LD_INT 0
62403: PUSH
62404: LD_INT 0
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: PUSH
62411: LD_INT 0
62413: PUSH
62414: LD_INT 1
62416: NEG
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 1
62424: PUSH
62425: LD_INT 0
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 1
62434: PUSH
62435: LD_INT 1
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 0
62444: PUSH
62445: LD_INT 1
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 1
62454: NEG
62455: PUSH
62456: LD_INT 0
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: LD_INT 1
62465: NEG
62466: PUSH
62467: LD_INT 1
62469: NEG
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: PUSH
62475: LD_INT 1
62477: NEG
62478: PUSH
62479: LD_INT 2
62481: NEG
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 1
62489: PUSH
62490: LD_INT 1
62492: NEG
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 2
62500: PUSH
62501: LD_INT 0
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 2
62510: PUSH
62511: LD_INT 1
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: PUSH
62518: LD_INT 1
62520: PUSH
62521: LD_INT 2
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 0
62530: PUSH
62531: LD_INT 2
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 1
62540: NEG
62541: PUSH
62542: LD_INT 1
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 2
62551: NEG
62552: PUSH
62553: LD_INT 0
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 2
62562: NEG
62563: PUSH
62564: LD_INT 1
62566: NEG
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 2
62574: NEG
62575: PUSH
62576: LD_INT 2
62578: NEG
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 2
62586: NEG
62587: PUSH
62588: LD_INT 3
62590: NEG
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 2
62598: PUSH
62599: LD_INT 1
62601: NEG
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 3
62609: PUSH
62610: LD_INT 1
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 1
62619: PUSH
62620: LD_INT 3
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 1
62629: NEG
62630: PUSH
62631: LD_INT 2
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: LD_INT 3
62640: NEG
62641: PUSH
62642: LD_INT 2
62644: NEG
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: LIST
62672: LIST
62673: LIST
62674: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62675: LD_ADDR_VAR 0 34
62679: PUSH
62680: LD_INT 0
62682: PUSH
62683: LD_INT 0
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: LD_INT 0
62692: PUSH
62693: LD_INT 1
62695: NEG
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: LD_INT 1
62703: PUSH
62704: LD_INT 0
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 1
62713: PUSH
62714: LD_INT 1
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 0
62723: PUSH
62724: LD_INT 1
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: PUSH
62731: LD_INT 1
62733: NEG
62734: PUSH
62735: LD_INT 0
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: LD_INT 1
62744: NEG
62745: PUSH
62746: LD_INT 1
62748: NEG
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PUSH
62754: LD_INT 1
62756: NEG
62757: PUSH
62758: LD_INT 2
62760: NEG
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 0
62768: PUSH
62769: LD_INT 2
62771: NEG
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: LD_INT 1
62779: PUSH
62780: LD_INT 1
62782: NEG
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: LD_INT 2
62790: PUSH
62791: LD_INT 1
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 2
62800: PUSH
62801: LD_INT 2
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: LD_INT 1
62810: PUSH
62811: LD_INT 2
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: LD_INT 1
62820: NEG
62821: PUSH
62822: LD_INT 1
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: LD_INT 2
62831: NEG
62832: PUSH
62833: LD_INT 0
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 2
62842: NEG
62843: PUSH
62844: LD_INT 1
62846: NEG
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 2
62854: NEG
62855: PUSH
62856: LD_INT 2
62858: NEG
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 1
62866: NEG
62867: PUSH
62868: LD_INT 3
62870: NEG
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: LD_INT 1
62878: PUSH
62879: LD_INT 2
62881: NEG
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: LD_INT 3
62889: PUSH
62890: LD_INT 2
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 2
62899: PUSH
62900: LD_INT 3
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 2
62909: NEG
62910: PUSH
62911: LD_INT 1
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 3
62920: NEG
62921: PUSH
62922: LD_INT 1
62924: NEG
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: LIST
62939: LIST
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62955: LD_ADDR_VAR 0 35
62959: PUSH
62960: LD_INT 0
62962: PUSH
62963: LD_INT 0
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: LD_INT 0
62972: PUSH
62973: LD_INT 1
62975: NEG
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 1
62983: PUSH
62984: LD_INT 0
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 1
62993: PUSH
62994: LD_INT 1
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 0
63003: PUSH
63004: LD_INT 1
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_INT 1
63013: NEG
63014: PUSH
63015: LD_INT 0
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 1
63024: NEG
63025: PUSH
63026: LD_INT 1
63028: NEG
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: LD_INT 2
63036: PUSH
63037: LD_INT 1
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 2
63046: NEG
63047: PUSH
63048: LD_INT 1
63050: NEG
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: LIST
63065: LIST
63066: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
63067: LD_ADDR_VAR 0 36
63071: PUSH
63072: LD_INT 0
63074: PUSH
63075: LD_INT 0
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: LD_INT 0
63084: PUSH
63085: LD_INT 1
63087: NEG
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 1
63095: PUSH
63096: LD_INT 0
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 1
63105: PUSH
63106: LD_INT 1
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 0
63115: PUSH
63116: LD_INT 1
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 1
63125: NEG
63126: PUSH
63127: LD_INT 0
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 1
63136: NEG
63137: PUSH
63138: LD_INT 1
63140: NEG
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 1
63148: NEG
63149: PUSH
63150: LD_INT 2
63152: NEG
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: LD_INT 1
63160: PUSH
63161: LD_INT 2
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
63179: LD_ADDR_VAR 0 37
63183: PUSH
63184: LD_INT 0
63186: PUSH
63187: LD_INT 0
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: LD_INT 0
63196: PUSH
63197: LD_INT 1
63199: NEG
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: LD_INT 1
63207: PUSH
63208: LD_INT 0
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 1
63217: PUSH
63218: LD_INT 1
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 0
63227: PUSH
63228: LD_INT 1
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 1
63237: NEG
63238: PUSH
63239: LD_INT 0
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: LD_INT 1
63248: NEG
63249: PUSH
63250: LD_INT 1
63252: NEG
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 1
63260: PUSH
63261: LD_INT 1
63263: NEG
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 1
63271: NEG
63272: PUSH
63273: LD_INT 1
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: LIST
63287: LIST
63288: LIST
63289: LIST
63290: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63291: LD_ADDR_VAR 0 38
63295: PUSH
63296: LD_INT 0
63298: PUSH
63299: LD_INT 0
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 0
63308: PUSH
63309: LD_INT 1
63311: NEG
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: LD_INT 1
63319: PUSH
63320: LD_INT 0
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 1
63329: PUSH
63330: LD_INT 1
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 0
63339: PUSH
63340: LD_INT 1
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: LD_INT 1
63349: NEG
63350: PUSH
63351: LD_INT 0
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 1
63360: NEG
63361: PUSH
63362: LD_INT 1
63364: NEG
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: PUSH
63370: LD_INT 2
63372: PUSH
63373: LD_INT 1
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: PUSH
63380: LD_INT 2
63382: NEG
63383: PUSH
63384: LD_INT 1
63386: NEG
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
63403: LD_ADDR_VAR 0 39
63407: PUSH
63408: LD_INT 0
63410: PUSH
63411: LD_INT 0
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: PUSH
63418: LD_INT 0
63420: PUSH
63421: LD_INT 1
63423: NEG
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: PUSH
63429: LD_INT 1
63431: PUSH
63432: LD_INT 0
63434: PUSH
63435: EMPTY
63436: LIST
63437: LIST
63438: PUSH
63439: LD_INT 1
63441: PUSH
63442: LD_INT 1
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 0
63451: PUSH
63452: LD_INT 1
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 1
63461: NEG
63462: PUSH
63463: LD_INT 0
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PUSH
63470: LD_INT 1
63472: NEG
63473: PUSH
63474: LD_INT 1
63476: NEG
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 1
63484: NEG
63485: PUSH
63486: LD_INT 2
63488: NEG
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 1
63496: PUSH
63497: LD_INT 2
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
63515: LD_ADDR_VAR 0 40
63519: PUSH
63520: LD_INT 0
63522: PUSH
63523: LD_INT 0
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 0
63532: PUSH
63533: LD_INT 1
63535: NEG
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 1
63543: PUSH
63544: LD_INT 0
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: PUSH
63551: LD_INT 1
63553: PUSH
63554: LD_INT 1
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 0
63563: PUSH
63564: LD_INT 1
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 1
63573: NEG
63574: PUSH
63575: LD_INT 0
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 1
63584: NEG
63585: PUSH
63586: LD_INT 1
63588: NEG
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 1
63596: PUSH
63597: LD_INT 1
63599: NEG
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 1
63607: NEG
63608: PUSH
63609: LD_INT 1
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63627: LD_ADDR_VAR 0 41
63631: PUSH
63632: LD_INT 0
63634: PUSH
63635: LD_INT 0
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 0
63644: PUSH
63645: LD_INT 1
63647: NEG
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 1
63655: PUSH
63656: LD_INT 0
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: PUSH
63663: LD_INT 1
63665: PUSH
63666: LD_INT 1
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 0
63675: PUSH
63676: LD_INT 1
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 1
63685: NEG
63686: PUSH
63687: LD_INT 0
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: PUSH
63694: LD_INT 1
63696: NEG
63697: PUSH
63698: LD_INT 1
63700: NEG
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: PUSH
63706: LD_INT 1
63708: NEG
63709: PUSH
63710: LD_INT 2
63712: NEG
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 1
63720: PUSH
63721: LD_INT 1
63723: NEG
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PUSH
63729: LD_INT 2
63731: PUSH
63732: LD_INT 0
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: LD_INT 2
63741: PUSH
63742: LD_INT 1
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PUSH
63749: LD_INT 2
63751: PUSH
63752: LD_INT 2
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: LD_INT 1
63761: PUSH
63762: LD_INT 2
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 1
63771: NEG
63772: PUSH
63773: LD_INT 1
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 2
63782: NEG
63783: PUSH
63784: LD_INT 0
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 2
63793: NEG
63794: PUSH
63795: LD_INT 1
63797: NEG
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 2
63805: NEG
63806: PUSH
63807: LD_INT 2
63809: NEG
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 2
63817: NEG
63818: PUSH
63819: LD_INT 3
63821: NEG
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: LD_INT 2
63829: PUSH
63830: LD_INT 1
63832: NEG
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PUSH
63838: LD_INT 3
63840: PUSH
63841: LD_INT 0
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: PUSH
63848: LD_INT 3
63850: PUSH
63851: LD_INT 1
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 3
63860: PUSH
63861: LD_INT 2
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: LD_INT 3
63870: PUSH
63871: LD_INT 3
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 2
63880: PUSH
63881: LD_INT 3
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: LD_INT 2
63890: NEG
63891: PUSH
63892: LD_INT 1
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: LD_INT 3
63901: NEG
63902: PUSH
63903: LD_INT 0
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 3
63912: NEG
63913: PUSH
63914: LD_INT 1
63916: NEG
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 3
63924: NEG
63925: PUSH
63926: LD_INT 2
63928: NEG
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: LD_INT 3
63936: NEG
63937: PUSH
63938: LD_INT 3
63940: NEG
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63977: LD_ADDR_VAR 0 42
63981: PUSH
63982: LD_INT 0
63984: PUSH
63985: LD_INT 0
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 0
63994: PUSH
63995: LD_INT 1
63997: NEG
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: PUSH
64003: LD_INT 1
64005: PUSH
64006: LD_INT 0
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: PUSH
64013: LD_INT 1
64015: PUSH
64016: LD_INT 1
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: PUSH
64023: LD_INT 0
64025: PUSH
64026: LD_INT 1
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: LD_INT 1
64035: NEG
64036: PUSH
64037: LD_INT 0
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: LD_INT 1
64046: NEG
64047: PUSH
64048: LD_INT 1
64050: NEG
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: LD_INT 1
64058: NEG
64059: PUSH
64060: LD_INT 2
64062: NEG
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: LD_INT 0
64070: PUSH
64071: LD_INT 2
64073: NEG
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: LD_INT 1
64081: PUSH
64082: LD_INT 1
64084: NEG
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_INT 2
64092: PUSH
64093: LD_INT 1
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: LD_INT 2
64102: PUSH
64103: LD_INT 2
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: LD_INT 1
64112: PUSH
64113: LD_INT 2
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 0
64122: PUSH
64123: LD_INT 2
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 1
64132: NEG
64133: PUSH
64134: LD_INT 1
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 2
64143: NEG
64144: PUSH
64145: LD_INT 1
64147: NEG
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: LD_INT 2
64155: NEG
64156: PUSH
64157: LD_INT 2
64159: NEG
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: LD_INT 2
64167: NEG
64168: PUSH
64169: LD_INT 3
64171: NEG
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 1
64179: NEG
64180: PUSH
64181: LD_INT 3
64183: NEG
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 0
64191: PUSH
64192: LD_INT 3
64194: NEG
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 1
64202: PUSH
64203: LD_INT 2
64205: NEG
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 3
64213: PUSH
64214: LD_INT 2
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: LD_INT 3
64223: PUSH
64224: LD_INT 3
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: LD_INT 2
64233: PUSH
64234: LD_INT 3
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: LD_INT 1
64243: PUSH
64244: LD_INT 3
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: PUSH
64251: LD_INT 0
64253: PUSH
64254: LD_INT 3
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PUSH
64261: LD_INT 1
64263: NEG
64264: PUSH
64265: LD_INT 2
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PUSH
64272: LD_INT 3
64274: NEG
64275: PUSH
64276: LD_INT 2
64278: NEG
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PUSH
64284: LD_INT 3
64286: NEG
64287: PUSH
64288: LD_INT 3
64290: NEG
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: LIST
64300: LIST
64301: LIST
64302: LIST
64303: LIST
64304: LIST
64305: LIST
64306: LIST
64307: LIST
64308: LIST
64309: LIST
64310: LIST
64311: LIST
64312: LIST
64313: LIST
64314: LIST
64315: LIST
64316: LIST
64317: LIST
64318: LIST
64319: LIST
64320: LIST
64321: LIST
64322: LIST
64323: LIST
64324: LIST
64325: LIST
64326: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64327: LD_ADDR_VAR 0 43
64331: PUSH
64332: LD_INT 0
64334: PUSH
64335: LD_INT 0
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: LD_INT 0
64344: PUSH
64345: LD_INT 1
64347: NEG
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 1
64355: PUSH
64356: LD_INT 0
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: LD_INT 1
64365: PUSH
64366: LD_INT 1
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: LD_INT 0
64375: PUSH
64376: LD_INT 1
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 1
64385: NEG
64386: PUSH
64387: LD_INT 0
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 1
64396: NEG
64397: PUSH
64398: LD_INT 1
64400: NEG
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PUSH
64406: LD_INT 1
64408: NEG
64409: PUSH
64410: LD_INT 2
64412: NEG
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: LD_INT 0
64420: PUSH
64421: LD_INT 2
64423: NEG
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PUSH
64429: LD_INT 1
64431: PUSH
64432: LD_INT 1
64434: NEG
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: PUSH
64440: LD_INT 2
64442: PUSH
64443: LD_INT 0
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: PUSH
64450: LD_INT 2
64452: PUSH
64453: LD_INT 1
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: LD_INT 1
64462: PUSH
64463: LD_INT 2
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: LD_INT 0
64472: PUSH
64473: LD_INT 2
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: LD_INT 1
64482: NEG
64483: PUSH
64484: LD_INT 1
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: LD_INT 2
64493: NEG
64494: PUSH
64495: LD_INT 0
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 2
64504: NEG
64505: PUSH
64506: LD_INT 1
64508: NEG
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: LD_INT 1
64516: NEG
64517: PUSH
64518: LD_INT 3
64520: NEG
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: LD_INT 0
64528: PUSH
64529: LD_INT 3
64531: NEG
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PUSH
64537: LD_INT 1
64539: PUSH
64540: LD_INT 2
64542: NEG
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: LD_INT 2
64550: PUSH
64551: LD_INT 1
64553: NEG
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: PUSH
64559: LD_INT 3
64561: PUSH
64562: LD_INT 0
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: LD_INT 3
64571: PUSH
64572: LD_INT 1
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: PUSH
64579: LD_INT 1
64581: PUSH
64582: LD_INT 3
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: LD_INT 0
64591: PUSH
64592: LD_INT 3
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: PUSH
64599: LD_INT 1
64601: NEG
64602: PUSH
64603: LD_INT 2
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 2
64612: NEG
64613: PUSH
64614: LD_INT 1
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: PUSH
64621: LD_INT 3
64623: NEG
64624: PUSH
64625: LD_INT 0
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: PUSH
64632: LD_INT 3
64634: NEG
64635: PUSH
64636: LD_INT 1
64638: NEG
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: LIST
64648: LIST
64649: LIST
64650: LIST
64651: LIST
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: LIST
64672: LIST
64673: LIST
64674: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64675: LD_ADDR_VAR 0 44
64679: PUSH
64680: LD_INT 0
64682: PUSH
64683: LD_INT 0
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: PUSH
64690: LD_INT 0
64692: PUSH
64693: LD_INT 1
64695: NEG
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: PUSH
64701: LD_INT 1
64703: PUSH
64704: LD_INT 0
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: PUSH
64711: LD_INT 1
64713: PUSH
64714: LD_INT 1
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_INT 0
64723: PUSH
64724: LD_INT 1
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PUSH
64731: LD_INT 1
64733: NEG
64734: PUSH
64735: LD_INT 0
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: LD_INT 1
64744: NEG
64745: PUSH
64746: LD_INT 1
64748: NEG
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: LD_INT 1
64756: NEG
64757: PUSH
64758: LD_INT 2
64760: NEG
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: LD_INT 1
64768: PUSH
64769: LD_INT 1
64771: NEG
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PUSH
64777: LD_INT 2
64779: PUSH
64780: LD_INT 0
64782: PUSH
64783: EMPTY
64784: LIST
64785: LIST
64786: PUSH
64787: LD_INT 2
64789: PUSH
64790: LD_INT 1
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: PUSH
64797: LD_INT 2
64799: PUSH
64800: LD_INT 2
64802: PUSH
64803: EMPTY
64804: LIST
64805: LIST
64806: PUSH
64807: LD_INT 1
64809: PUSH
64810: LD_INT 2
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: PUSH
64817: LD_INT 1
64819: NEG
64820: PUSH
64821: LD_INT 1
64823: PUSH
64824: EMPTY
64825: LIST
64826: LIST
64827: PUSH
64828: LD_INT 2
64830: NEG
64831: PUSH
64832: LD_INT 0
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 2
64841: NEG
64842: PUSH
64843: LD_INT 1
64845: NEG
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: PUSH
64851: LD_INT 2
64853: NEG
64854: PUSH
64855: LD_INT 2
64857: NEG
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PUSH
64863: LD_INT 2
64865: NEG
64866: PUSH
64867: LD_INT 3
64869: NEG
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: LD_INT 2
64877: PUSH
64878: LD_INT 1
64880: NEG
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 3
64888: PUSH
64889: LD_INT 0
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 3
64898: PUSH
64899: LD_INT 1
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 3
64908: PUSH
64909: LD_INT 2
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: LD_INT 3
64918: PUSH
64919: LD_INT 3
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: LD_INT 2
64928: PUSH
64929: LD_INT 3
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: LD_INT 2
64938: NEG
64939: PUSH
64940: LD_INT 1
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: LD_INT 3
64949: NEG
64950: PUSH
64951: LD_INT 0
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: PUSH
64958: LD_INT 3
64960: NEG
64961: PUSH
64962: LD_INT 1
64964: NEG
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: PUSH
64970: LD_INT 3
64972: NEG
64973: PUSH
64974: LD_INT 2
64976: NEG
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: LD_INT 3
64984: NEG
64985: PUSH
64986: LD_INT 3
64988: NEG
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: EMPTY
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: LIST
65016: LIST
65017: LIST
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: LIST
65023: LIST
65024: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65025: LD_ADDR_VAR 0 45
65029: PUSH
65030: LD_INT 0
65032: PUSH
65033: LD_INT 0
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 0
65042: PUSH
65043: LD_INT 1
65045: NEG
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: LD_INT 1
65053: PUSH
65054: LD_INT 0
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PUSH
65061: LD_INT 1
65063: PUSH
65064: LD_INT 1
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 0
65073: PUSH
65074: LD_INT 1
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: LD_INT 1
65083: NEG
65084: PUSH
65085: LD_INT 0
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PUSH
65092: LD_INT 1
65094: NEG
65095: PUSH
65096: LD_INT 1
65098: NEG
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: LD_INT 1
65106: NEG
65107: PUSH
65108: LD_INT 2
65110: NEG
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: PUSH
65116: LD_INT 0
65118: PUSH
65119: LD_INT 2
65121: NEG
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 1
65129: PUSH
65130: LD_INT 1
65132: NEG
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 2
65140: PUSH
65141: LD_INT 1
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: LD_INT 2
65150: PUSH
65151: LD_INT 2
65153: PUSH
65154: EMPTY
65155: LIST
65156: LIST
65157: PUSH
65158: LD_INT 1
65160: PUSH
65161: LD_INT 2
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: LD_INT 0
65170: PUSH
65171: LD_INT 2
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_INT 1
65180: NEG
65181: PUSH
65182: LD_INT 1
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: PUSH
65189: LD_INT 2
65191: NEG
65192: PUSH
65193: LD_INT 1
65195: NEG
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: LD_INT 2
65203: NEG
65204: PUSH
65205: LD_INT 2
65207: NEG
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PUSH
65213: LD_INT 2
65215: NEG
65216: PUSH
65217: LD_INT 3
65219: NEG
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PUSH
65225: LD_INT 1
65227: NEG
65228: PUSH
65229: LD_INT 3
65231: NEG
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: LD_INT 0
65239: PUSH
65240: LD_INT 3
65242: NEG
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: LD_INT 1
65250: PUSH
65251: LD_INT 2
65253: NEG
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 3
65261: PUSH
65262: LD_INT 2
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 3
65271: PUSH
65272: LD_INT 3
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: LD_INT 2
65281: PUSH
65282: LD_INT 3
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PUSH
65289: LD_INT 1
65291: PUSH
65292: LD_INT 3
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: PUSH
65299: LD_INT 0
65301: PUSH
65302: LD_INT 3
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 1
65311: NEG
65312: PUSH
65313: LD_INT 2
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: PUSH
65320: LD_INT 3
65322: NEG
65323: PUSH
65324: LD_INT 2
65326: NEG
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: PUSH
65332: LD_INT 3
65334: NEG
65335: PUSH
65336: LD_INT 3
65338: NEG
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: LIST
65354: LIST
65355: LIST
65356: LIST
65357: LIST
65358: LIST
65359: LIST
65360: LIST
65361: LIST
65362: LIST
65363: LIST
65364: LIST
65365: LIST
65366: LIST
65367: LIST
65368: LIST
65369: LIST
65370: LIST
65371: LIST
65372: LIST
65373: LIST
65374: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65375: LD_ADDR_VAR 0 46
65379: PUSH
65380: LD_INT 0
65382: PUSH
65383: LD_INT 0
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: LD_INT 0
65392: PUSH
65393: LD_INT 1
65395: NEG
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: PUSH
65401: LD_INT 1
65403: PUSH
65404: LD_INT 0
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: PUSH
65411: LD_INT 1
65413: PUSH
65414: LD_INT 1
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PUSH
65421: LD_INT 0
65423: PUSH
65424: LD_INT 1
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: PUSH
65431: LD_INT 1
65433: NEG
65434: PUSH
65435: LD_INT 0
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: PUSH
65442: LD_INT 1
65444: NEG
65445: PUSH
65446: LD_INT 1
65448: NEG
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: LD_INT 1
65456: NEG
65457: PUSH
65458: LD_INT 2
65460: NEG
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PUSH
65466: LD_INT 0
65468: PUSH
65469: LD_INT 2
65471: NEG
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_INT 1
65479: PUSH
65480: LD_INT 1
65482: NEG
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: LD_INT 2
65490: PUSH
65491: LD_INT 0
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PUSH
65498: LD_INT 2
65500: PUSH
65501: LD_INT 1
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: PUSH
65508: LD_INT 1
65510: PUSH
65511: LD_INT 2
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PUSH
65518: LD_INT 0
65520: PUSH
65521: LD_INT 2
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: LD_INT 1
65530: NEG
65531: PUSH
65532: LD_INT 1
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: LD_INT 2
65541: NEG
65542: PUSH
65543: LD_INT 0
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PUSH
65550: LD_INT 2
65552: NEG
65553: PUSH
65554: LD_INT 1
65556: NEG
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: PUSH
65562: LD_INT 1
65564: NEG
65565: PUSH
65566: LD_INT 3
65568: NEG
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: LD_INT 0
65576: PUSH
65577: LD_INT 3
65579: NEG
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: PUSH
65585: LD_INT 1
65587: PUSH
65588: LD_INT 2
65590: NEG
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: PUSH
65596: LD_INT 2
65598: PUSH
65599: LD_INT 1
65601: NEG
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: LD_INT 3
65609: PUSH
65610: LD_INT 0
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 3
65619: PUSH
65620: LD_INT 1
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: LD_INT 1
65629: PUSH
65630: LD_INT 3
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: PUSH
65637: LD_INT 0
65639: PUSH
65640: LD_INT 3
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: PUSH
65647: LD_INT 1
65649: NEG
65650: PUSH
65651: LD_INT 2
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 2
65660: NEG
65661: PUSH
65662: LD_INT 1
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: LD_INT 3
65671: NEG
65672: PUSH
65673: LD_INT 0
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: LD_INT 3
65682: NEG
65683: PUSH
65684: LD_INT 1
65686: NEG
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: LIST
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: LIST
65707: LIST
65708: LIST
65709: LIST
65710: LIST
65711: LIST
65712: LIST
65713: LIST
65714: LIST
65715: LIST
65716: LIST
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: LIST
65722: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65723: LD_ADDR_VAR 0 47
65727: PUSH
65728: LD_INT 0
65730: PUSH
65731: LD_INT 0
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: PUSH
65738: LD_INT 0
65740: PUSH
65741: LD_INT 1
65743: NEG
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: PUSH
65749: LD_INT 1
65751: PUSH
65752: LD_INT 0
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: PUSH
65759: LD_INT 1
65761: PUSH
65762: LD_INT 1
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: PUSH
65769: LD_INT 0
65771: PUSH
65772: LD_INT 1
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: PUSH
65779: LD_INT 1
65781: NEG
65782: PUSH
65783: LD_INT 0
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: LD_INT 1
65792: NEG
65793: PUSH
65794: LD_INT 1
65796: NEG
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 1
65804: NEG
65805: PUSH
65806: LD_INT 2
65808: NEG
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: PUSH
65814: LD_INT 0
65816: PUSH
65817: LD_INT 2
65819: NEG
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 1
65827: PUSH
65828: LD_INT 1
65830: NEG
65831: PUSH
65832: EMPTY
65833: LIST
65834: LIST
65835: PUSH
65836: LD_INT 2
65838: NEG
65839: PUSH
65840: LD_INT 1
65842: NEG
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: PUSH
65848: LD_INT 2
65850: NEG
65851: PUSH
65852: LD_INT 2
65854: NEG
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: LIST
65864: LIST
65865: LIST
65866: LIST
65867: LIST
65868: LIST
65869: LIST
65870: LIST
65871: LIST
65872: LIST
65873: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65874: LD_ADDR_VAR 0 48
65878: PUSH
65879: LD_INT 0
65881: PUSH
65882: LD_INT 0
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: PUSH
65889: LD_INT 0
65891: PUSH
65892: LD_INT 1
65894: NEG
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: PUSH
65900: LD_INT 1
65902: PUSH
65903: LD_INT 0
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: LD_INT 1
65912: PUSH
65913: LD_INT 1
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: PUSH
65920: LD_INT 0
65922: PUSH
65923: LD_INT 1
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: PUSH
65930: LD_INT 1
65932: NEG
65933: PUSH
65934: LD_INT 0
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: PUSH
65941: LD_INT 1
65943: NEG
65944: PUSH
65945: LD_INT 1
65947: NEG
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: PUSH
65953: LD_INT 1
65955: NEG
65956: PUSH
65957: LD_INT 2
65959: NEG
65960: PUSH
65961: EMPTY
65962: LIST
65963: LIST
65964: PUSH
65965: LD_INT 0
65967: PUSH
65968: LD_INT 2
65970: NEG
65971: PUSH
65972: EMPTY
65973: LIST
65974: LIST
65975: PUSH
65976: LD_INT 1
65978: PUSH
65979: LD_INT 1
65981: NEG
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: PUSH
65987: LD_INT 2
65989: PUSH
65990: LD_INT 0
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: PUSH
65997: LD_INT 2
65999: PUSH
66000: LD_INT 1
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: LIST
66015: LIST
66016: LIST
66017: LIST
66018: LIST
66019: LIST
66020: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66021: LD_ADDR_VAR 0 49
66025: PUSH
66026: LD_INT 0
66028: PUSH
66029: LD_INT 0
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: PUSH
66036: LD_INT 0
66038: PUSH
66039: LD_INT 1
66041: NEG
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: LD_INT 1
66049: PUSH
66050: LD_INT 0
66052: PUSH
66053: EMPTY
66054: LIST
66055: LIST
66056: PUSH
66057: LD_INT 1
66059: PUSH
66060: LD_INT 1
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 0
66069: PUSH
66070: LD_INT 1
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: PUSH
66077: LD_INT 1
66079: NEG
66080: PUSH
66081: LD_INT 0
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: PUSH
66088: LD_INT 1
66090: NEG
66091: PUSH
66092: LD_INT 1
66094: NEG
66095: PUSH
66096: EMPTY
66097: LIST
66098: LIST
66099: PUSH
66100: LD_INT 1
66102: PUSH
66103: LD_INT 1
66105: NEG
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: PUSH
66111: LD_INT 2
66113: PUSH
66114: LD_INT 0
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: PUSH
66121: LD_INT 2
66123: PUSH
66124: LD_INT 1
66126: PUSH
66127: EMPTY
66128: LIST
66129: LIST
66130: PUSH
66131: LD_INT 2
66133: PUSH
66134: LD_INT 2
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: PUSH
66141: LD_INT 1
66143: PUSH
66144: LD_INT 2
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66165: LD_ADDR_VAR 0 50
66169: PUSH
66170: LD_INT 0
66172: PUSH
66173: LD_INT 0
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: PUSH
66180: LD_INT 0
66182: PUSH
66183: LD_INT 1
66185: NEG
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: PUSH
66191: LD_INT 1
66193: PUSH
66194: LD_INT 0
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: PUSH
66201: LD_INT 1
66203: PUSH
66204: LD_INT 1
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: PUSH
66211: LD_INT 0
66213: PUSH
66214: LD_INT 1
66216: PUSH
66217: EMPTY
66218: LIST
66219: LIST
66220: PUSH
66221: LD_INT 1
66223: NEG
66224: PUSH
66225: LD_INT 0
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: PUSH
66232: LD_INT 1
66234: NEG
66235: PUSH
66236: LD_INT 1
66238: NEG
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: PUSH
66244: LD_INT 2
66246: PUSH
66247: LD_INT 1
66249: PUSH
66250: EMPTY
66251: LIST
66252: LIST
66253: PUSH
66254: LD_INT 2
66256: PUSH
66257: LD_INT 2
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: PUSH
66264: LD_INT 1
66266: PUSH
66267: LD_INT 2
66269: PUSH
66270: EMPTY
66271: LIST
66272: LIST
66273: PUSH
66274: LD_INT 0
66276: PUSH
66277: LD_INT 2
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: PUSH
66284: LD_INT 1
66286: NEG
66287: PUSH
66288: LD_INT 1
66290: PUSH
66291: EMPTY
66292: LIST
66293: LIST
66294: PUSH
66295: EMPTY
66296: LIST
66297: LIST
66298: LIST
66299: LIST
66300: LIST
66301: LIST
66302: LIST
66303: LIST
66304: LIST
66305: LIST
66306: LIST
66307: LIST
66308: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66309: LD_ADDR_VAR 0 51
66313: PUSH
66314: LD_INT 0
66316: PUSH
66317: LD_INT 0
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: LD_INT 0
66326: PUSH
66327: LD_INT 1
66329: NEG
66330: PUSH
66331: EMPTY
66332: LIST
66333: LIST
66334: PUSH
66335: LD_INT 1
66337: PUSH
66338: LD_INT 0
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: PUSH
66345: LD_INT 1
66347: PUSH
66348: LD_INT 1
66350: PUSH
66351: EMPTY
66352: LIST
66353: LIST
66354: PUSH
66355: LD_INT 0
66357: PUSH
66358: LD_INT 1
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: PUSH
66365: LD_INT 1
66367: NEG
66368: PUSH
66369: LD_INT 0
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: PUSH
66376: LD_INT 1
66378: NEG
66379: PUSH
66380: LD_INT 1
66382: NEG
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: PUSH
66388: LD_INT 1
66390: PUSH
66391: LD_INT 2
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: PUSH
66398: LD_INT 0
66400: PUSH
66401: LD_INT 2
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: PUSH
66408: LD_INT 1
66410: NEG
66411: PUSH
66412: LD_INT 1
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: LD_INT 2
66421: NEG
66422: PUSH
66423: LD_INT 0
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: PUSH
66430: LD_INT 2
66432: NEG
66433: PUSH
66434: LD_INT 1
66436: NEG
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: PUSH
66442: EMPTY
66443: LIST
66444: LIST
66445: LIST
66446: LIST
66447: LIST
66448: LIST
66449: LIST
66450: LIST
66451: LIST
66452: LIST
66453: LIST
66454: LIST
66455: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66456: LD_ADDR_VAR 0 52
66460: PUSH
66461: LD_INT 0
66463: PUSH
66464: LD_INT 0
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: PUSH
66471: LD_INT 0
66473: PUSH
66474: LD_INT 1
66476: NEG
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: LD_INT 1
66484: PUSH
66485: LD_INT 0
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: PUSH
66492: LD_INT 1
66494: PUSH
66495: LD_INT 1
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: PUSH
66502: LD_INT 0
66504: PUSH
66505: LD_INT 1
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: LD_INT 1
66514: NEG
66515: PUSH
66516: LD_INT 0
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 1
66525: NEG
66526: PUSH
66527: LD_INT 1
66529: NEG
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: LD_INT 1
66537: NEG
66538: PUSH
66539: LD_INT 2
66541: NEG
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: LD_INT 1
66549: NEG
66550: PUSH
66551: LD_INT 1
66553: PUSH
66554: EMPTY
66555: LIST
66556: LIST
66557: PUSH
66558: LD_INT 2
66560: NEG
66561: PUSH
66562: LD_INT 0
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: PUSH
66569: LD_INT 2
66571: NEG
66572: PUSH
66573: LD_INT 1
66575: NEG
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 2
66583: NEG
66584: PUSH
66585: LD_INT 2
66587: NEG
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: LIST
66597: LIST
66598: LIST
66599: LIST
66600: LIST
66601: LIST
66602: LIST
66603: LIST
66604: LIST
66605: LIST
66606: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66607: LD_ADDR_VAR 0 53
66611: PUSH
66612: LD_INT 0
66614: PUSH
66615: LD_INT 0
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: PUSH
66622: LD_INT 0
66624: PUSH
66625: LD_INT 1
66627: NEG
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: PUSH
66633: LD_INT 1
66635: PUSH
66636: LD_INT 0
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: PUSH
66643: LD_INT 1
66645: PUSH
66646: LD_INT 1
66648: PUSH
66649: EMPTY
66650: LIST
66651: LIST
66652: PUSH
66653: LD_INT 0
66655: PUSH
66656: LD_INT 1
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: PUSH
66663: LD_INT 1
66665: NEG
66666: PUSH
66667: LD_INT 0
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: PUSH
66674: LD_INT 1
66676: NEG
66677: PUSH
66678: LD_INT 1
66680: NEG
66681: PUSH
66682: EMPTY
66683: LIST
66684: LIST
66685: PUSH
66686: LD_INT 1
66688: NEG
66689: PUSH
66690: LD_INT 2
66692: NEG
66693: PUSH
66694: EMPTY
66695: LIST
66696: LIST
66697: PUSH
66698: LD_INT 0
66700: PUSH
66701: LD_INT 2
66703: NEG
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: PUSH
66709: LD_INT 1
66711: PUSH
66712: LD_INT 1
66714: NEG
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: PUSH
66720: LD_INT 2
66722: PUSH
66723: LD_INT 0
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: PUSH
66730: LD_INT 2
66732: PUSH
66733: LD_INT 1
66735: PUSH
66736: EMPTY
66737: LIST
66738: LIST
66739: PUSH
66740: LD_INT 2
66742: PUSH
66743: LD_INT 2
66745: PUSH
66746: EMPTY
66747: LIST
66748: LIST
66749: PUSH
66750: LD_INT 1
66752: PUSH
66753: LD_INT 2
66755: PUSH
66756: EMPTY
66757: LIST
66758: LIST
66759: PUSH
66760: LD_INT 0
66762: PUSH
66763: LD_INT 2
66765: PUSH
66766: EMPTY
66767: LIST
66768: LIST
66769: PUSH
66770: LD_INT 1
66772: NEG
66773: PUSH
66774: LD_INT 1
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: PUSH
66781: LD_INT 2
66783: NEG
66784: PUSH
66785: LD_INT 0
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PUSH
66792: LD_INT 2
66794: NEG
66795: PUSH
66796: LD_INT 1
66798: NEG
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: PUSH
66804: LD_INT 2
66806: NEG
66807: PUSH
66808: LD_INT 2
66810: NEG
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: LIST
66823: LIST
66824: LIST
66825: LIST
66826: LIST
66827: LIST
66828: LIST
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: LIST
66835: LIST
66836: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66837: LD_ADDR_VAR 0 54
66841: PUSH
66842: LD_INT 0
66844: PUSH
66845: LD_INT 0
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: PUSH
66852: LD_INT 0
66854: PUSH
66855: LD_INT 1
66857: NEG
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: LD_INT 1
66865: PUSH
66866: LD_INT 0
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: LD_INT 1
66875: PUSH
66876: LD_INT 1
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: LD_INT 0
66885: PUSH
66886: LD_INT 1
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_INT 1
66895: NEG
66896: PUSH
66897: LD_INT 0
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: PUSH
66904: LD_INT 1
66906: NEG
66907: PUSH
66908: LD_INT 1
66910: NEG
66911: PUSH
66912: EMPTY
66913: LIST
66914: LIST
66915: PUSH
66916: LD_INT 1
66918: NEG
66919: PUSH
66920: LD_INT 2
66922: NEG
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: PUSH
66928: LD_INT 0
66930: PUSH
66931: LD_INT 2
66933: NEG
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: LD_INT 1
66941: PUSH
66942: LD_INT 1
66944: NEG
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 2
66952: PUSH
66953: LD_INT 0
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: LD_INT 2
66962: PUSH
66963: LD_INT 1
66965: PUSH
66966: EMPTY
66967: LIST
66968: LIST
66969: PUSH
66970: LD_INT 2
66972: PUSH
66973: LD_INT 2
66975: PUSH
66976: EMPTY
66977: LIST
66978: LIST
66979: PUSH
66980: LD_INT 1
66982: PUSH
66983: LD_INT 2
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: PUSH
66990: LD_INT 0
66992: PUSH
66993: LD_INT 2
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: PUSH
67000: LD_INT 1
67002: NEG
67003: PUSH
67004: LD_INT 1
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: PUSH
67011: LD_INT 2
67013: NEG
67014: PUSH
67015: LD_INT 0
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: PUSH
67022: LD_INT 2
67024: NEG
67025: PUSH
67026: LD_INT 1
67028: NEG
67029: PUSH
67030: EMPTY
67031: LIST
67032: LIST
67033: PUSH
67034: LD_INT 2
67036: NEG
67037: PUSH
67038: LD_INT 2
67040: NEG
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: LIST
67050: LIST
67051: LIST
67052: LIST
67053: LIST
67054: LIST
67055: LIST
67056: LIST
67057: LIST
67058: LIST
67059: LIST
67060: LIST
67061: LIST
67062: LIST
67063: LIST
67064: LIST
67065: LIST
67066: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67067: LD_ADDR_VAR 0 55
67071: PUSH
67072: LD_INT 0
67074: PUSH
67075: LD_INT 0
67077: PUSH
67078: EMPTY
67079: LIST
67080: LIST
67081: PUSH
67082: LD_INT 0
67084: PUSH
67085: LD_INT 1
67087: NEG
67088: PUSH
67089: EMPTY
67090: LIST
67091: LIST
67092: PUSH
67093: LD_INT 1
67095: PUSH
67096: LD_INT 0
67098: PUSH
67099: EMPTY
67100: LIST
67101: LIST
67102: PUSH
67103: LD_INT 1
67105: PUSH
67106: LD_INT 1
67108: PUSH
67109: EMPTY
67110: LIST
67111: LIST
67112: PUSH
67113: LD_INT 0
67115: PUSH
67116: LD_INT 1
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: PUSH
67123: LD_INT 1
67125: NEG
67126: PUSH
67127: LD_INT 0
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: PUSH
67134: LD_INT 1
67136: NEG
67137: PUSH
67138: LD_INT 1
67140: NEG
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: LD_INT 1
67148: NEG
67149: PUSH
67150: LD_INT 2
67152: NEG
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: PUSH
67158: LD_INT 0
67160: PUSH
67161: LD_INT 2
67163: NEG
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PUSH
67169: LD_INT 1
67171: PUSH
67172: LD_INT 1
67174: NEG
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 2
67182: PUSH
67183: LD_INT 0
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: LD_INT 2
67192: PUSH
67193: LD_INT 1
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: PUSH
67200: LD_INT 2
67202: PUSH
67203: LD_INT 2
67205: PUSH
67206: EMPTY
67207: LIST
67208: LIST
67209: PUSH
67210: LD_INT 1
67212: PUSH
67213: LD_INT 2
67215: PUSH
67216: EMPTY
67217: LIST
67218: LIST
67219: PUSH
67220: LD_INT 0
67222: PUSH
67223: LD_INT 2
67225: PUSH
67226: EMPTY
67227: LIST
67228: LIST
67229: PUSH
67230: LD_INT 1
67232: NEG
67233: PUSH
67234: LD_INT 1
67236: PUSH
67237: EMPTY
67238: LIST
67239: LIST
67240: PUSH
67241: LD_INT 2
67243: NEG
67244: PUSH
67245: LD_INT 0
67247: PUSH
67248: EMPTY
67249: LIST
67250: LIST
67251: PUSH
67252: LD_INT 2
67254: NEG
67255: PUSH
67256: LD_INT 1
67258: NEG
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: PUSH
67264: LD_INT 2
67266: NEG
67267: PUSH
67268: LD_INT 2
67270: NEG
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PUSH
67276: EMPTY
67277: LIST
67278: LIST
67279: LIST
67280: LIST
67281: LIST
67282: LIST
67283: LIST
67284: LIST
67285: LIST
67286: LIST
67287: LIST
67288: LIST
67289: LIST
67290: LIST
67291: LIST
67292: LIST
67293: LIST
67294: LIST
67295: LIST
67296: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67297: LD_ADDR_VAR 0 56
67301: PUSH
67302: LD_INT 0
67304: PUSH
67305: LD_INT 0
67307: PUSH
67308: EMPTY
67309: LIST
67310: LIST
67311: PUSH
67312: LD_INT 0
67314: PUSH
67315: LD_INT 1
67317: NEG
67318: PUSH
67319: EMPTY
67320: LIST
67321: LIST
67322: PUSH
67323: LD_INT 1
67325: PUSH
67326: LD_INT 0
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: LD_INT 1
67335: PUSH
67336: LD_INT 1
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: PUSH
67343: LD_INT 0
67345: PUSH
67346: LD_INT 1
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: PUSH
67353: LD_INT 1
67355: NEG
67356: PUSH
67357: LD_INT 0
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: PUSH
67364: LD_INT 1
67366: NEG
67367: PUSH
67368: LD_INT 1
67370: NEG
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: PUSH
67376: LD_INT 1
67378: NEG
67379: PUSH
67380: LD_INT 2
67382: NEG
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: LD_INT 0
67390: PUSH
67391: LD_INT 2
67393: NEG
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: PUSH
67399: LD_INT 1
67401: PUSH
67402: LD_INT 1
67404: NEG
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: LD_INT 2
67412: PUSH
67413: LD_INT 0
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 2
67422: PUSH
67423: LD_INT 1
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: PUSH
67430: LD_INT 2
67432: PUSH
67433: LD_INT 2
67435: PUSH
67436: EMPTY
67437: LIST
67438: LIST
67439: PUSH
67440: LD_INT 1
67442: PUSH
67443: LD_INT 2
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: PUSH
67450: LD_INT 0
67452: PUSH
67453: LD_INT 2
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: PUSH
67460: LD_INT 1
67462: NEG
67463: PUSH
67464: LD_INT 1
67466: PUSH
67467: EMPTY
67468: LIST
67469: LIST
67470: PUSH
67471: LD_INT 2
67473: NEG
67474: PUSH
67475: LD_INT 0
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: PUSH
67482: LD_INT 2
67484: NEG
67485: PUSH
67486: LD_INT 1
67488: NEG
67489: PUSH
67490: EMPTY
67491: LIST
67492: LIST
67493: PUSH
67494: LD_INT 2
67496: NEG
67497: PUSH
67498: LD_INT 2
67500: NEG
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: LIST
67510: LIST
67511: LIST
67512: LIST
67513: LIST
67514: LIST
67515: LIST
67516: LIST
67517: LIST
67518: LIST
67519: LIST
67520: LIST
67521: LIST
67522: LIST
67523: LIST
67524: LIST
67525: LIST
67526: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67527: LD_ADDR_VAR 0 57
67531: PUSH
67532: LD_INT 0
67534: PUSH
67535: LD_INT 0
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: LD_INT 0
67544: PUSH
67545: LD_INT 1
67547: NEG
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: PUSH
67553: LD_INT 1
67555: PUSH
67556: LD_INT 0
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: PUSH
67563: LD_INT 1
67565: PUSH
67566: LD_INT 1
67568: PUSH
67569: EMPTY
67570: LIST
67571: LIST
67572: PUSH
67573: LD_INT 0
67575: PUSH
67576: LD_INT 1
67578: PUSH
67579: EMPTY
67580: LIST
67581: LIST
67582: PUSH
67583: LD_INT 1
67585: NEG
67586: PUSH
67587: LD_INT 0
67589: PUSH
67590: EMPTY
67591: LIST
67592: LIST
67593: PUSH
67594: LD_INT 1
67596: NEG
67597: PUSH
67598: LD_INT 1
67600: NEG
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: LD_INT 1
67608: NEG
67609: PUSH
67610: LD_INT 2
67612: NEG
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: PUSH
67618: LD_INT 0
67620: PUSH
67621: LD_INT 2
67623: NEG
67624: PUSH
67625: EMPTY
67626: LIST
67627: LIST
67628: PUSH
67629: LD_INT 1
67631: PUSH
67632: LD_INT 1
67634: NEG
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: PUSH
67640: LD_INT 2
67642: PUSH
67643: LD_INT 0
67645: PUSH
67646: EMPTY
67647: LIST
67648: LIST
67649: PUSH
67650: LD_INT 2
67652: PUSH
67653: LD_INT 1
67655: PUSH
67656: EMPTY
67657: LIST
67658: LIST
67659: PUSH
67660: LD_INT 2
67662: PUSH
67663: LD_INT 2
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: PUSH
67670: LD_INT 1
67672: PUSH
67673: LD_INT 2
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: PUSH
67680: LD_INT 0
67682: PUSH
67683: LD_INT 2
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: PUSH
67690: LD_INT 1
67692: NEG
67693: PUSH
67694: LD_INT 1
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: PUSH
67701: LD_INT 2
67703: NEG
67704: PUSH
67705: LD_INT 0
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: PUSH
67712: LD_INT 2
67714: NEG
67715: PUSH
67716: LD_INT 1
67718: NEG
67719: PUSH
67720: EMPTY
67721: LIST
67722: LIST
67723: PUSH
67724: LD_INT 2
67726: NEG
67727: PUSH
67728: LD_INT 2
67730: NEG
67731: PUSH
67732: EMPTY
67733: LIST
67734: LIST
67735: PUSH
67736: EMPTY
67737: LIST
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: LIST
67743: LIST
67744: LIST
67745: LIST
67746: LIST
67747: LIST
67748: LIST
67749: LIST
67750: LIST
67751: LIST
67752: LIST
67753: LIST
67754: LIST
67755: LIST
67756: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67757: LD_ADDR_VAR 0 58
67761: PUSH
67762: LD_INT 0
67764: PUSH
67765: LD_INT 0
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PUSH
67772: LD_INT 0
67774: PUSH
67775: LD_INT 1
67777: NEG
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: PUSH
67783: LD_INT 1
67785: PUSH
67786: LD_INT 0
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: PUSH
67793: LD_INT 1
67795: PUSH
67796: LD_INT 1
67798: PUSH
67799: EMPTY
67800: LIST
67801: LIST
67802: PUSH
67803: LD_INT 0
67805: PUSH
67806: LD_INT 1
67808: PUSH
67809: EMPTY
67810: LIST
67811: LIST
67812: PUSH
67813: LD_INT 1
67815: NEG
67816: PUSH
67817: LD_INT 0
67819: PUSH
67820: EMPTY
67821: LIST
67822: LIST
67823: PUSH
67824: LD_INT 1
67826: NEG
67827: PUSH
67828: LD_INT 1
67830: NEG
67831: PUSH
67832: EMPTY
67833: LIST
67834: LIST
67835: PUSH
67836: LD_INT 1
67838: NEG
67839: PUSH
67840: LD_INT 2
67842: NEG
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: PUSH
67848: LD_INT 0
67850: PUSH
67851: LD_INT 2
67853: NEG
67854: PUSH
67855: EMPTY
67856: LIST
67857: LIST
67858: PUSH
67859: LD_INT 1
67861: PUSH
67862: LD_INT 1
67864: NEG
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: PUSH
67870: LD_INT 2
67872: PUSH
67873: LD_INT 0
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: PUSH
67880: LD_INT 2
67882: PUSH
67883: LD_INT 1
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: PUSH
67890: LD_INT 2
67892: PUSH
67893: LD_INT 2
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: PUSH
67900: LD_INT 1
67902: PUSH
67903: LD_INT 2
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: PUSH
67910: LD_INT 0
67912: PUSH
67913: LD_INT 2
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: PUSH
67920: LD_INT 1
67922: NEG
67923: PUSH
67924: LD_INT 1
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: PUSH
67931: LD_INT 2
67933: NEG
67934: PUSH
67935: LD_INT 0
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: PUSH
67942: LD_INT 2
67944: NEG
67945: PUSH
67946: LD_INT 1
67948: NEG
67949: PUSH
67950: EMPTY
67951: LIST
67952: LIST
67953: PUSH
67954: LD_INT 2
67956: NEG
67957: PUSH
67958: LD_INT 2
67960: NEG
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: EMPTY
67967: LIST
67968: LIST
67969: LIST
67970: LIST
67971: LIST
67972: LIST
67973: LIST
67974: LIST
67975: LIST
67976: LIST
67977: LIST
67978: LIST
67979: LIST
67980: LIST
67981: LIST
67982: LIST
67983: LIST
67984: LIST
67985: LIST
67986: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67987: LD_ADDR_VAR 0 59
67991: PUSH
67992: LD_INT 0
67994: PUSH
67995: LD_INT 0
67997: PUSH
67998: EMPTY
67999: LIST
68000: LIST
68001: PUSH
68002: LD_INT 0
68004: PUSH
68005: LD_INT 1
68007: NEG
68008: PUSH
68009: EMPTY
68010: LIST
68011: LIST
68012: PUSH
68013: LD_INT 1
68015: PUSH
68016: LD_INT 0
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: LD_INT 1
68025: PUSH
68026: LD_INT 1
68028: PUSH
68029: EMPTY
68030: LIST
68031: LIST
68032: PUSH
68033: LD_INT 0
68035: PUSH
68036: LD_INT 1
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: PUSH
68043: LD_INT 1
68045: NEG
68046: PUSH
68047: LD_INT 0
68049: PUSH
68050: EMPTY
68051: LIST
68052: LIST
68053: PUSH
68054: LD_INT 1
68056: NEG
68057: PUSH
68058: LD_INT 1
68060: NEG
68061: PUSH
68062: EMPTY
68063: LIST
68064: LIST
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: LIST
68070: LIST
68071: LIST
68072: LIST
68073: LIST
68074: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68075: LD_ADDR_VAR 0 60
68079: PUSH
68080: LD_INT 0
68082: PUSH
68083: LD_INT 0
68085: PUSH
68086: EMPTY
68087: LIST
68088: LIST
68089: PUSH
68090: LD_INT 0
68092: PUSH
68093: LD_INT 1
68095: NEG
68096: PUSH
68097: EMPTY
68098: LIST
68099: LIST
68100: PUSH
68101: LD_INT 1
68103: PUSH
68104: LD_INT 0
68106: PUSH
68107: EMPTY
68108: LIST
68109: LIST
68110: PUSH
68111: LD_INT 1
68113: PUSH
68114: LD_INT 1
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: PUSH
68121: LD_INT 0
68123: PUSH
68124: LD_INT 1
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: PUSH
68131: LD_INT 1
68133: NEG
68134: PUSH
68135: LD_INT 0
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: PUSH
68142: LD_INT 1
68144: NEG
68145: PUSH
68146: LD_INT 1
68148: NEG
68149: PUSH
68150: EMPTY
68151: LIST
68152: LIST
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: LIST
68160: LIST
68161: LIST
68162: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68163: LD_ADDR_VAR 0 61
68167: PUSH
68168: LD_INT 0
68170: PUSH
68171: LD_INT 0
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: PUSH
68178: LD_INT 0
68180: PUSH
68181: LD_INT 1
68183: NEG
68184: PUSH
68185: EMPTY
68186: LIST
68187: LIST
68188: PUSH
68189: LD_INT 1
68191: PUSH
68192: LD_INT 0
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: PUSH
68199: LD_INT 1
68201: PUSH
68202: LD_INT 1
68204: PUSH
68205: EMPTY
68206: LIST
68207: LIST
68208: PUSH
68209: LD_INT 0
68211: PUSH
68212: LD_INT 1
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: PUSH
68219: LD_INT 1
68221: NEG
68222: PUSH
68223: LD_INT 0
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 1
68232: NEG
68233: PUSH
68234: LD_INT 1
68236: NEG
68237: PUSH
68238: EMPTY
68239: LIST
68240: LIST
68241: PUSH
68242: EMPTY
68243: LIST
68244: LIST
68245: LIST
68246: LIST
68247: LIST
68248: LIST
68249: LIST
68250: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68251: LD_ADDR_VAR 0 62
68255: PUSH
68256: LD_INT 0
68258: PUSH
68259: LD_INT 0
68261: PUSH
68262: EMPTY
68263: LIST
68264: LIST
68265: PUSH
68266: LD_INT 0
68268: PUSH
68269: LD_INT 1
68271: NEG
68272: PUSH
68273: EMPTY
68274: LIST
68275: LIST
68276: PUSH
68277: LD_INT 1
68279: PUSH
68280: LD_INT 0
68282: PUSH
68283: EMPTY
68284: LIST
68285: LIST
68286: PUSH
68287: LD_INT 1
68289: PUSH
68290: LD_INT 1
68292: PUSH
68293: EMPTY
68294: LIST
68295: LIST
68296: PUSH
68297: LD_INT 0
68299: PUSH
68300: LD_INT 1
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: PUSH
68307: LD_INT 1
68309: NEG
68310: PUSH
68311: LD_INT 0
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: PUSH
68318: LD_INT 1
68320: NEG
68321: PUSH
68322: LD_INT 1
68324: NEG
68325: PUSH
68326: EMPTY
68327: LIST
68328: LIST
68329: PUSH
68330: EMPTY
68331: LIST
68332: LIST
68333: LIST
68334: LIST
68335: LIST
68336: LIST
68337: LIST
68338: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68339: LD_ADDR_VAR 0 63
68343: PUSH
68344: LD_INT 0
68346: PUSH
68347: LD_INT 0
68349: PUSH
68350: EMPTY
68351: LIST
68352: LIST
68353: PUSH
68354: LD_INT 0
68356: PUSH
68357: LD_INT 1
68359: NEG
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: PUSH
68365: LD_INT 1
68367: PUSH
68368: LD_INT 0
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: PUSH
68375: LD_INT 1
68377: PUSH
68378: LD_INT 1
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: PUSH
68385: LD_INT 0
68387: PUSH
68388: LD_INT 1
68390: PUSH
68391: EMPTY
68392: LIST
68393: LIST
68394: PUSH
68395: LD_INT 1
68397: NEG
68398: PUSH
68399: LD_INT 0
68401: PUSH
68402: EMPTY
68403: LIST
68404: LIST
68405: PUSH
68406: LD_INT 1
68408: NEG
68409: PUSH
68410: LD_INT 1
68412: NEG
68413: PUSH
68414: EMPTY
68415: LIST
68416: LIST
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: LIST
68422: LIST
68423: LIST
68424: LIST
68425: LIST
68426: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68427: LD_ADDR_VAR 0 64
68431: PUSH
68432: LD_INT 0
68434: PUSH
68435: LD_INT 0
68437: PUSH
68438: EMPTY
68439: LIST
68440: LIST
68441: PUSH
68442: LD_INT 0
68444: PUSH
68445: LD_INT 1
68447: NEG
68448: PUSH
68449: EMPTY
68450: LIST
68451: LIST
68452: PUSH
68453: LD_INT 1
68455: PUSH
68456: LD_INT 0
68458: PUSH
68459: EMPTY
68460: LIST
68461: LIST
68462: PUSH
68463: LD_INT 1
68465: PUSH
68466: LD_INT 1
68468: PUSH
68469: EMPTY
68470: LIST
68471: LIST
68472: PUSH
68473: LD_INT 0
68475: PUSH
68476: LD_INT 1
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: PUSH
68483: LD_INT 1
68485: NEG
68486: PUSH
68487: LD_INT 0
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: PUSH
68494: LD_INT 1
68496: NEG
68497: PUSH
68498: LD_INT 1
68500: NEG
68501: PUSH
68502: EMPTY
68503: LIST
68504: LIST
68505: PUSH
68506: EMPTY
68507: LIST
68508: LIST
68509: LIST
68510: LIST
68511: LIST
68512: LIST
68513: LIST
68514: ST_TO_ADDR
// end ; 1 :
68515: GO 74412
68517: LD_INT 1
68519: DOUBLE
68520: EQUAL
68521: IFTRUE 68525
68523: GO 71148
68525: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68526: LD_ADDR_VAR 0 11
68530: PUSH
68531: LD_INT 1
68533: NEG
68534: PUSH
68535: LD_INT 3
68537: NEG
68538: PUSH
68539: EMPTY
68540: LIST
68541: LIST
68542: PUSH
68543: LD_INT 0
68545: PUSH
68546: LD_INT 3
68548: NEG
68549: PUSH
68550: EMPTY
68551: LIST
68552: LIST
68553: PUSH
68554: LD_INT 1
68556: PUSH
68557: LD_INT 2
68559: NEG
68560: PUSH
68561: EMPTY
68562: LIST
68563: LIST
68564: PUSH
68565: EMPTY
68566: LIST
68567: LIST
68568: LIST
68569: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68570: LD_ADDR_VAR 0 12
68574: PUSH
68575: LD_INT 2
68577: PUSH
68578: LD_INT 1
68580: NEG
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: PUSH
68586: LD_INT 3
68588: PUSH
68589: LD_INT 0
68591: PUSH
68592: EMPTY
68593: LIST
68594: LIST
68595: PUSH
68596: LD_INT 3
68598: PUSH
68599: LD_INT 1
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PUSH
68606: EMPTY
68607: LIST
68608: LIST
68609: LIST
68610: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68611: LD_ADDR_VAR 0 13
68615: PUSH
68616: LD_INT 3
68618: PUSH
68619: LD_INT 2
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: PUSH
68626: LD_INT 3
68628: PUSH
68629: LD_INT 3
68631: PUSH
68632: EMPTY
68633: LIST
68634: LIST
68635: PUSH
68636: LD_INT 2
68638: PUSH
68639: LD_INT 3
68641: PUSH
68642: EMPTY
68643: LIST
68644: LIST
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: LIST
68650: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68651: LD_ADDR_VAR 0 14
68655: PUSH
68656: LD_INT 1
68658: PUSH
68659: LD_INT 3
68661: PUSH
68662: EMPTY
68663: LIST
68664: LIST
68665: PUSH
68666: LD_INT 0
68668: PUSH
68669: LD_INT 3
68671: PUSH
68672: EMPTY
68673: LIST
68674: LIST
68675: PUSH
68676: LD_INT 1
68678: NEG
68679: PUSH
68680: LD_INT 2
68682: PUSH
68683: EMPTY
68684: LIST
68685: LIST
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: LIST
68691: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68692: LD_ADDR_VAR 0 15
68696: PUSH
68697: LD_INT 2
68699: NEG
68700: PUSH
68701: LD_INT 1
68703: PUSH
68704: EMPTY
68705: LIST
68706: LIST
68707: PUSH
68708: LD_INT 3
68710: NEG
68711: PUSH
68712: LD_INT 0
68714: PUSH
68715: EMPTY
68716: LIST
68717: LIST
68718: PUSH
68719: LD_INT 3
68721: NEG
68722: PUSH
68723: LD_INT 1
68725: NEG
68726: PUSH
68727: EMPTY
68728: LIST
68729: LIST
68730: PUSH
68731: EMPTY
68732: LIST
68733: LIST
68734: LIST
68735: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68736: LD_ADDR_VAR 0 16
68740: PUSH
68741: LD_INT 2
68743: NEG
68744: PUSH
68745: LD_INT 3
68747: NEG
68748: PUSH
68749: EMPTY
68750: LIST
68751: LIST
68752: PUSH
68753: LD_INT 3
68755: NEG
68756: PUSH
68757: LD_INT 2
68759: NEG
68760: PUSH
68761: EMPTY
68762: LIST
68763: LIST
68764: PUSH
68765: LD_INT 3
68767: NEG
68768: PUSH
68769: LD_INT 3
68771: NEG
68772: PUSH
68773: EMPTY
68774: LIST
68775: LIST
68776: PUSH
68777: EMPTY
68778: LIST
68779: LIST
68780: LIST
68781: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68782: LD_ADDR_VAR 0 17
68786: PUSH
68787: LD_INT 1
68789: NEG
68790: PUSH
68791: LD_INT 3
68793: NEG
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: PUSH
68799: LD_INT 0
68801: PUSH
68802: LD_INT 3
68804: NEG
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: LD_INT 1
68812: PUSH
68813: LD_INT 2
68815: NEG
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: PUSH
68821: EMPTY
68822: LIST
68823: LIST
68824: LIST
68825: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68826: LD_ADDR_VAR 0 18
68830: PUSH
68831: LD_INT 2
68833: PUSH
68834: LD_INT 1
68836: NEG
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: LD_INT 3
68844: PUSH
68845: LD_INT 0
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: PUSH
68852: LD_INT 3
68854: PUSH
68855: LD_INT 1
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: PUSH
68862: EMPTY
68863: LIST
68864: LIST
68865: LIST
68866: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68867: LD_ADDR_VAR 0 19
68871: PUSH
68872: LD_INT 3
68874: PUSH
68875: LD_INT 2
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: PUSH
68882: LD_INT 3
68884: PUSH
68885: LD_INT 3
68887: PUSH
68888: EMPTY
68889: LIST
68890: LIST
68891: PUSH
68892: LD_INT 2
68894: PUSH
68895: LD_INT 3
68897: PUSH
68898: EMPTY
68899: LIST
68900: LIST
68901: PUSH
68902: EMPTY
68903: LIST
68904: LIST
68905: LIST
68906: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68907: LD_ADDR_VAR 0 20
68911: PUSH
68912: LD_INT 1
68914: PUSH
68915: LD_INT 3
68917: PUSH
68918: EMPTY
68919: LIST
68920: LIST
68921: PUSH
68922: LD_INT 0
68924: PUSH
68925: LD_INT 3
68927: PUSH
68928: EMPTY
68929: LIST
68930: LIST
68931: PUSH
68932: LD_INT 1
68934: NEG
68935: PUSH
68936: LD_INT 2
68938: PUSH
68939: EMPTY
68940: LIST
68941: LIST
68942: PUSH
68943: EMPTY
68944: LIST
68945: LIST
68946: LIST
68947: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68948: LD_ADDR_VAR 0 21
68952: PUSH
68953: LD_INT 2
68955: NEG
68956: PUSH
68957: LD_INT 1
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: PUSH
68964: LD_INT 3
68966: NEG
68967: PUSH
68968: LD_INT 0
68970: PUSH
68971: EMPTY
68972: LIST
68973: LIST
68974: PUSH
68975: LD_INT 3
68977: NEG
68978: PUSH
68979: LD_INT 1
68981: NEG
68982: PUSH
68983: EMPTY
68984: LIST
68985: LIST
68986: PUSH
68987: EMPTY
68988: LIST
68989: LIST
68990: LIST
68991: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68992: LD_ADDR_VAR 0 22
68996: PUSH
68997: LD_INT 2
68999: NEG
69000: PUSH
69001: LD_INT 3
69003: NEG
69004: PUSH
69005: EMPTY
69006: LIST
69007: LIST
69008: PUSH
69009: LD_INT 3
69011: NEG
69012: PUSH
69013: LD_INT 2
69015: NEG
69016: PUSH
69017: EMPTY
69018: LIST
69019: LIST
69020: PUSH
69021: LD_INT 3
69023: NEG
69024: PUSH
69025: LD_INT 3
69027: NEG
69028: PUSH
69029: EMPTY
69030: LIST
69031: LIST
69032: PUSH
69033: EMPTY
69034: LIST
69035: LIST
69036: LIST
69037: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
69038: LD_ADDR_VAR 0 23
69042: PUSH
69043: LD_INT 0
69045: PUSH
69046: LD_INT 3
69048: NEG
69049: PUSH
69050: EMPTY
69051: LIST
69052: LIST
69053: PUSH
69054: LD_INT 1
69056: NEG
69057: PUSH
69058: LD_INT 4
69060: NEG
69061: PUSH
69062: EMPTY
69063: LIST
69064: LIST
69065: PUSH
69066: LD_INT 1
69068: PUSH
69069: LD_INT 3
69071: NEG
69072: PUSH
69073: EMPTY
69074: LIST
69075: LIST
69076: PUSH
69077: EMPTY
69078: LIST
69079: LIST
69080: LIST
69081: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
69082: LD_ADDR_VAR 0 24
69086: PUSH
69087: LD_INT 3
69089: PUSH
69090: LD_INT 0
69092: PUSH
69093: EMPTY
69094: LIST
69095: LIST
69096: PUSH
69097: LD_INT 3
69099: PUSH
69100: LD_INT 1
69102: NEG
69103: PUSH
69104: EMPTY
69105: LIST
69106: LIST
69107: PUSH
69108: LD_INT 4
69110: PUSH
69111: LD_INT 1
69113: PUSH
69114: EMPTY
69115: LIST
69116: LIST
69117: PUSH
69118: EMPTY
69119: LIST
69120: LIST
69121: LIST
69122: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
69123: LD_ADDR_VAR 0 25
69127: PUSH
69128: LD_INT 3
69130: PUSH
69131: LD_INT 3
69133: PUSH
69134: EMPTY
69135: LIST
69136: LIST
69137: PUSH
69138: LD_INT 4
69140: PUSH
69141: LD_INT 3
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: PUSH
69148: LD_INT 3
69150: PUSH
69151: LD_INT 4
69153: PUSH
69154: EMPTY
69155: LIST
69156: LIST
69157: PUSH
69158: EMPTY
69159: LIST
69160: LIST
69161: LIST
69162: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
69163: LD_ADDR_VAR 0 26
69167: PUSH
69168: LD_INT 0
69170: PUSH
69171: LD_INT 3
69173: PUSH
69174: EMPTY
69175: LIST
69176: LIST
69177: PUSH
69178: LD_INT 1
69180: PUSH
69181: LD_INT 4
69183: PUSH
69184: EMPTY
69185: LIST
69186: LIST
69187: PUSH
69188: LD_INT 1
69190: NEG
69191: PUSH
69192: LD_INT 3
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: PUSH
69199: EMPTY
69200: LIST
69201: LIST
69202: LIST
69203: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
69204: LD_ADDR_VAR 0 27
69208: PUSH
69209: LD_INT 3
69211: NEG
69212: PUSH
69213: LD_INT 0
69215: PUSH
69216: EMPTY
69217: LIST
69218: LIST
69219: PUSH
69220: LD_INT 3
69222: NEG
69223: PUSH
69224: LD_INT 1
69226: PUSH
69227: EMPTY
69228: LIST
69229: LIST
69230: PUSH
69231: LD_INT 4
69233: NEG
69234: PUSH
69235: LD_INT 1
69237: NEG
69238: PUSH
69239: EMPTY
69240: LIST
69241: LIST
69242: PUSH
69243: EMPTY
69244: LIST
69245: LIST
69246: LIST
69247: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
69248: LD_ADDR_VAR 0 28
69252: PUSH
69253: LD_INT 3
69255: NEG
69256: PUSH
69257: LD_INT 3
69259: NEG
69260: PUSH
69261: EMPTY
69262: LIST
69263: LIST
69264: PUSH
69265: LD_INT 3
69267: NEG
69268: PUSH
69269: LD_INT 4
69271: NEG
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: PUSH
69277: LD_INT 4
69279: NEG
69280: PUSH
69281: LD_INT 3
69283: NEG
69284: PUSH
69285: EMPTY
69286: LIST
69287: LIST
69288: PUSH
69289: EMPTY
69290: LIST
69291: LIST
69292: LIST
69293: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
69294: LD_ADDR_VAR 0 29
69298: PUSH
69299: LD_INT 1
69301: NEG
69302: PUSH
69303: LD_INT 3
69305: NEG
69306: PUSH
69307: EMPTY
69308: LIST
69309: LIST
69310: PUSH
69311: LD_INT 0
69313: PUSH
69314: LD_INT 3
69316: NEG
69317: PUSH
69318: EMPTY
69319: LIST
69320: LIST
69321: PUSH
69322: LD_INT 1
69324: PUSH
69325: LD_INT 2
69327: NEG
69328: PUSH
69329: EMPTY
69330: LIST
69331: LIST
69332: PUSH
69333: LD_INT 1
69335: NEG
69336: PUSH
69337: LD_INT 4
69339: NEG
69340: PUSH
69341: EMPTY
69342: LIST
69343: LIST
69344: PUSH
69345: LD_INT 0
69347: PUSH
69348: LD_INT 4
69350: NEG
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: PUSH
69356: LD_INT 1
69358: PUSH
69359: LD_INT 3
69361: NEG
69362: PUSH
69363: EMPTY
69364: LIST
69365: LIST
69366: PUSH
69367: LD_INT 1
69369: NEG
69370: PUSH
69371: LD_INT 5
69373: NEG
69374: PUSH
69375: EMPTY
69376: LIST
69377: LIST
69378: PUSH
69379: LD_INT 0
69381: PUSH
69382: LD_INT 5
69384: NEG
69385: PUSH
69386: EMPTY
69387: LIST
69388: LIST
69389: PUSH
69390: LD_INT 1
69392: PUSH
69393: LD_INT 4
69395: NEG
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: PUSH
69401: LD_INT 1
69403: NEG
69404: PUSH
69405: LD_INT 6
69407: NEG
69408: PUSH
69409: EMPTY
69410: LIST
69411: LIST
69412: PUSH
69413: LD_INT 0
69415: PUSH
69416: LD_INT 6
69418: NEG
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: PUSH
69424: LD_INT 1
69426: PUSH
69427: LD_INT 5
69429: NEG
69430: PUSH
69431: EMPTY
69432: LIST
69433: LIST
69434: PUSH
69435: EMPTY
69436: LIST
69437: LIST
69438: LIST
69439: LIST
69440: LIST
69441: LIST
69442: LIST
69443: LIST
69444: LIST
69445: LIST
69446: LIST
69447: LIST
69448: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
69449: LD_ADDR_VAR 0 30
69453: PUSH
69454: LD_INT 2
69456: PUSH
69457: LD_INT 1
69459: NEG
69460: PUSH
69461: EMPTY
69462: LIST
69463: LIST
69464: PUSH
69465: LD_INT 3
69467: PUSH
69468: LD_INT 0
69470: PUSH
69471: EMPTY
69472: LIST
69473: LIST
69474: PUSH
69475: LD_INT 3
69477: PUSH
69478: LD_INT 1
69480: PUSH
69481: EMPTY
69482: LIST
69483: LIST
69484: PUSH
69485: LD_INT 3
69487: PUSH
69488: LD_INT 1
69490: NEG
69491: PUSH
69492: EMPTY
69493: LIST
69494: LIST
69495: PUSH
69496: LD_INT 4
69498: PUSH
69499: LD_INT 0
69501: PUSH
69502: EMPTY
69503: LIST
69504: LIST
69505: PUSH
69506: LD_INT 4
69508: PUSH
69509: LD_INT 1
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: PUSH
69516: LD_INT 4
69518: PUSH
69519: LD_INT 1
69521: NEG
69522: PUSH
69523: EMPTY
69524: LIST
69525: LIST
69526: PUSH
69527: LD_INT 5
69529: PUSH
69530: LD_INT 0
69532: PUSH
69533: EMPTY
69534: LIST
69535: LIST
69536: PUSH
69537: LD_INT 5
69539: PUSH
69540: LD_INT 1
69542: PUSH
69543: EMPTY
69544: LIST
69545: LIST
69546: PUSH
69547: LD_INT 5
69549: PUSH
69550: LD_INT 1
69552: NEG
69553: PUSH
69554: EMPTY
69555: LIST
69556: LIST
69557: PUSH
69558: LD_INT 6
69560: PUSH
69561: LD_INT 0
69563: PUSH
69564: EMPTY
69565: LIST
69566: LIST
69567: PUSH
69568: LD_INT 6
69570: PUSH
69571: LD_INT 1
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: PUSH
69578: EMPTY
69579: LIST
69580: LIST
69581: LIST
69582: LIST
69583: LIST
69584: LIST
69585: LIST
69586: LIST
69587: LIST
69588: LIST
69589: LIST
69590: LIST
69591: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
69592: LD_ADDR_VAR 0 31
69596: PUSH
69597: LD_INT 3
69599: PUSH
69600: LD_INT 2
69602: PUSH
69603: EMPTY
69604: LIST
69605: LIST
69606: PUSH
69607: LD_INT 3
69609: PUSH
69610: LD_INT 3
69612: PUSH
69613: EMPTY
69614: LIST
69615: LIST
69616: PUSH
69617: LD_INT 2
69619: PUSH
69620: LD_INT 3
69622: PUSH
69623: EMPTY
69624: LIST
69625: LIST
69626: PUSH
69627: LD_INT 4
69629: PUSH
69630: LD_INT 3
69632: PUSH
69633: EMPTY
69634: LIST
69635: LIST
69636: PUSH
69637: LD_INT 4
69639: PUSH
69640: LD_INT 4
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: PUSH
69647: LD_INT 3
69649: PUSH
69650: LD_INT 4
69652: PUSH
69653: EMPTY
69654: LIST
69655: LIST
69656: PUSH
69657: LD_INT 5
69659: PUSH
69660: LD_INT 4
69662: PUSH
69663: EMPTY
69664: LIST
69665: LIST
69666: PUSH
69667: LD_INT 5
69669: PUSH
69670: LD_INT 5
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: PUSH
69677: LD_INT 4
69679: PUSH
69680: LD_INT 5
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: PUSH
69687: LD_INT 6
69689: PUSH
69690: LD_INT 5
69692: PUSH
69693: EMPTY
69694: LIST
69695: LIST
69696: PUSH
69697: LD_INT 6
69699: PUSH
69700: LD_INT 6
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: PUSH
69707: LD_INT 5
69709: PUSH
69710: LD_INT 6
69712: PUSH
69713: EMPTY
69714: LIST
69715: LIST
69716: PUSH
69717: EMPTY
69718: LIST
69719: LIST
69720: LIST
69721: LIST
69722: LIST
69723: LIST
69724: LIST
69725: LIST
69726: LIST
69727: LIST
69728: LIST
69729: LIST
69730: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
69731: LD_ADDR_VAR 0 32
69735: PUSH
69736: LD_INT 1
69738: PUSH
69739: LD_INT 3
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: PUSH
69746: LD_INT 0
69748: PUSH
69749: LD_INT 3
69751: PUSH
69752: EMPTY
69753: LIST
69754: LIST
69755: PUSH
69756: LD_INT 1
69758: NEG
69759: PUSH
69760: LD_INT 2
69762: PUSH
69763: EMPTY
69764: LIST
69765: LIST
69766: PUSH
69767: LD_INT 1
69769: PUSH
69770: LD_INT 4
69772: PUSH
69773: EMPTY
69774: LIST
69775: LIST
69776: PUSH
69777: LD_INT 0
69779: PUSH
69780: LD_INT 4
69782: PUSH
69783: EMPTY
69784: LIST
69785: LIST
69786: PUSH
69787: LD_INT 1
69789: NEG
69790: PUSH
69791: LD_INT 3
69793: PUSH
69794: EMPTY
69795: LIST
69796: LIST
69797: PUSH
69798: LD_INT 1
69800: PUSH
69801: LD_INT 5
69803: PUSH
69804: EMPTY
69805: LIST
69806: LIST
69807: PUSH
69808: LD_INT 0
69810: PUSH
69811: LD_INT 5
69813: PUSH
69814: EMPTY
69815: LIST
69816: LIST
69817: PUSH
69818: LD_INT 1
69820: NEG
69821: PUSH
69822: LD_INT 4
69824: PUSH
69825: EMPTY
69826: LIST
69827: LIST
69828: PUSH
69829: LD_INT 1
69831: PUSH
69832: LD_INT 6
69834: PUSH
69835: EMPTY
69836: LIST
69837: LIST
69838: PUSH
69839: LD_INT 0
69841: PUSH
69842: LD_INT 6
69844: PUSH
69845: EMPTY
69846: LIST
69847: LIST
69848: PUSH
69849: LD_INT 1
69851: NEG
69852: PUSH
69853: LD_INT 5
69855: PUSH
69856: EMPTY
69857: LIST
69858: LIST
69859: PUSH
69860: EMPTY
69861: LIST
69862: LIST
69863: LIST
69864: LIST
69865: LIST
69866: LIST
69867: LIST
69868: LIST
69869: LIST
69870: LIST
69871: LIST
69872: LIST
69873: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
69874: LD_ADDR_VAR 0 33
69878: PUSH
69879: LD_INT 2
69881: NEG
69882: PUSH
69883: LD_INT 1
69885: PUSH
69886: EMPTY
69887: LIST
69888: LIST
69889: PUSH
69890: LD_INT 3
69892: NEG
69893: PUSH
69894: LD_INT 0
69896: PUSH
69897: EMPTY
69898: LIST
69899: LIST
69900: PUSH
69901: LD_INT 3
69903: NEG
69904: PUSH
69905: LD_INT 1
69907: NEG
69908: PUSH
69909: EMPTY
69910: LIST
69911: LIST
69912: PUSH
69913: LD_INT 3
69915: NEG
69916: PUSH
69917: LD_INT 1
69919: PUSH
69920: EMPTY
69921: LIST
69922: LIST
69923: PUSH
69924: LD_INT 4
69926: NEG
69927: PUSH
69928: LD_INT 0
69930: PUSH
69931: EMPTY
69932: LIST
69933: LIST
69934: PUSH
69935: LD_INT 4
69937: NEG
69938: PUSH
69939: LD_INT 1
69941: NEG
69942: PUSH
69943: EMPTY
69944: LIST
69945: LIST
69946: PUSH
69947: LD_INT 4
69949: NEG
69950: PUSH
69951: LD_INT 1
69953: PUSH
69954: EMPTY
69955: LIST
69956: LIST
69957: PUSH
69958: LD_INT 5
69960: NEG
69961: PUSH
69962: LD_INT 0
69964: PUSH
69965: EMPTY
69966: LIST
69967: LIST
69968: PUSH
69969: LD_INT 5
69971: NEG
69972: PUSH
69973: LD_INT 1
69975: NEG
69976: PUSH
69977: EMPTY
69978: LIST
69979: LIST
69980: PUSH
69981: LD_INT 5
69983: NEG
69984: PUSH
69985: LD_INT 1
69987: PUSH
69988: EMPTY
69989: LIST
69990: LIST
69991: PUSH
69992: LD_INT 6
69994: NEG
69995: PUSH
69996: LD_INT 0
69998: PUSH
69999: EMPTY
70000: LIST
70001: LIST
70002: PUSH
70003: LD_INT 6
70005: NEG
70006: PUSH
70007: LD_INT 1
70009: NEG
70010: PUSH
70011: EMPTY
70012: LIST
70013: LIST
70014: PUSH
70015: EMPTY
70016: LIST
70017: LIST
70018: LIST
70019: LIST
70020: LIST
70021: LIST
70022: LIST
70023: LIST
70024: LIST
70025: LIST
70026: LIST
70027: LIST
70028: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
70029: LD_ADDR_VAR 0 34
70033: PUSH
70034: LD_INT 2
70036: NEG
70037: PUSH
70038: LD_INT 3
70040: NEG
70041: PUSH
70042: EMPTY
70043: LIST
70044: LIST
70045: PUSH
70046: LD_INT 3
70048: NEG
70049: PUSH
70050: LD_INT 2
70052: NEG
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: PUSH
70058: LD_INT 3
70060: NEG
70061: PUSH
70062: LD_INT 3
70064: NEG
70065: PUSH
70066: EMPTY
70067: LIST
70068: LIST
70069: PUSH
70070: LD_INT 3
70072: NEG
70073: PUSH
70074: LD_INT 4
70076: NEG
70077: PUSH
70078: EMPTY
70079: LIST
70080: LIST
70081: PUSH
70082: LD_INT 4
70084: NEG
70085: PUSH
70086: LD_INT 3
70088: NEG
70089: PUSH
70090: EMPTY
70091: LIST
70092: LIST
70093: PUSH
70094: LD_INT 4
70096: NEG
70097: PUSH
70098: LD_INT 4
70100: NEG
70101: PUSH
70102: EMPTY
70103: LIST
70104: LIST
70105: PUSH
70106: LD_INT 4
70108: NEG
70109: PUSH
70110: LD_INT 5
70112: NEG
70113: PUSH
70114: EMPTY
70115: LIST
70116: LIST
70117: PUSH
70118: LD_INT 5
70120: NEG
70121: PUSH
70122: LD_INT 4
70124: NEG
70125: PUSH
70126: EMPTY
70127: LIST
70128: LIST
70129: PUSH
70130: LD_INT 5
70132: NEG
70133: PUSH
70134: LD_INT 5
70136: NEG
70137: PUSH
70138: EMPTY
70139: LIST
70140: LIST
70141: PUSH
70142: LD_INT 5
70144: NEG
70145: PUSH
70146: LD_INT 6
70148: NEG
70149: PUSH
70150: EMPTY
70151: LIST
70152: LIST
70153: PUSH
70154: LD_INT 6
70156: NEG
70157: PUSH
70158: LD_INT 5
70160: NEG
70161: PUSH
70162: EMPTY
70163: LIST
70164: LIST
70165: PUSH
70166: LD_INT 6
70168: NEG
70169: PUSH
70170: LD_INT 6
70172: NEG
70173: PUSH
70174: EMPTY
70175: LIST
70176: LIST
70177: PUSH
70178: EMPTY
70179: LIST
70180: LIST
70181: LIST
70182: LIST
70183: LIST
70184: LIST
70185: LIST
70186: LIST
70187: LIST
70188: LIST
70189: LIST
70190: LIST
70191: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
70192: LD_ADDR_VAR 0 41
70196: PUSH
70197: LD_INT 0
70199: PUSH
70200: LD_INT 2
70202: NEG
70203: PUSH
70204: EMPTY
70205: LIST
70206: LIST
70207: PUSH
70208: LD_INT 1
70210: NEG
70211: PUSH
70212: LD_INT 3
70214: NEG
70215: PUSH
70216: EMPTY
70217: LIST
70218: LIST
70219: PUSH
70220: LD_INT 1
70222: PUSH
70223: LD_INT 2
70225: NEG
70226: PUSH
70227: EMPTY
70228: LIST
70229: LIST
70230: PUSH
70231: EMPTY
70232: LIST
70233: LIST
70234: LIST
70235: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
70236: LD_ADDR_VAR 0 42
70240: PUSH
70241: LD_INT 2
70243: PUSH
70244: LD_INT 0
70246: PUSH
70247: EMPTY
70248: LIST
70249: LIST
70250: PUSH
70251: LD_INT 2
70253: PUSH
70254: LD_INT 1
70256: NEG
70257: PUSH
70258: EMPTY
70259: LIST
70260: LIST
70261: PUSH
70262: LD_INT 3
70264: PUSH
70265: LD_INT 1
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: PUSH
70272: EMPTY
70273: LIST
70274: LIST
70275: LIST
70276: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
70277: LD_ADDR_VAR 0 43
70281: PUSH
70282: LD_INT 2
70284: PUSH
70285: LD_INT 2
70287: PUSH
70288: EMPTY
70289: LIST
70290: LIST
70291: PUSH
70292: LD_INT 3
70294: PUSH
70295: LD_INT 2
70297: PUSH
70298: EMPTY
70299: LIST
70300: LIST
70301: PUSH
70302: LD_INT 2
70304: PUSH
70305: LD_INT 3
70307: PUSH
70308: EMPTY
70309: LIST
70310: LIST
70311: PUSH
70312: EMPTY
70313: LIST
70314: LIST
70315: LIST
70316: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
70317: LD_ADDR_VAR 0 44
70321: PUSH
70322: LD_INT 0
70324: PUSH
70325: LD_INT 2
70327: PUSH
70328: EMPTY
70329: LIST
70330: LIST
70331: PUSH
70332: LD_INT 1
70334: PUSH
70335: LD_INT 3
70337: PUSH
70338: EMPTY
70339: LIST
70340: LIST
70341: PUSH
70342: LD_INT 1
70344: NEG
70345: PUSH
70346: LD_INT 2
70348: PUSH
70349: EMPTY
70350: LIST
70351: LIST
70352: PUSH
70353: EMPTY
70354: LIST
70355: LIST
70356: LIST
70357: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
70358: LD_ADDR_VAR 0 45
70362: PUSH
70363: LD_INT 2
70365: NEG
70366: PUSH
70367: LD_INT 0
70369: PUSH
70370: EMPTY
70371: LIST
70372: LIST
70373: PUSH
70374: LD_INT 2
70376: NEG
70377: PUSH
70378: LD_INT 1
70380: PUSH
70381: EMPTY
70382: LIST
70383: LIST
70384: PUSH
70385: LD_INT 3
70387: NEG
70388: PUSH
70389: LD_INT 1
70391: NEG
70392: PUSH
70393: EMPTY
70394: LIST
70395: LIST
70396: PUSH
70397: EMPTY
70398: LIST
70399: LIST
70400: LIST
70401: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
70402: LD_ADDR_VAR 0 46
70406: PUSH
70407: LD_INT 2
70409: NEG
70410: PUSH
70411: LD_INT 2
70413: NEG
70414: PUSH
70415: EMPTY
70416: LIST
70417: LIST
70418: PUSH
70419: LD_INT 2
70421: NEG
70422: PUSH
70423: LD_INT 3
70425: NEG
70426: PUSH
70427: EMPTY
70428: LIST
70429: LIST
70430: PUSH
70431: LD_INT 3
70433: NEG
70434: PUSH
70435: LD_INT 2
70437: NEG
70438: PUSH
70439: EMPTY
70440: LIST
70441: LIST
70442: PUSH
70443: EMPTY
70444: LIST
70445: LIST
70446: LIST
70447: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
70448: LD_ADDR_VAR 0 47
70452: PUSH
70453: LD_INT 2
70455: NEG
70456: PUSH
70457: LD_INT 3
70459: NEG
70460: PUSH
70461: EMPTY
70462: LIST
70463: LIST
70464: PUSH
70465: LD_INT 1
70467: NEG
70468: PUSH
70469: LD_INT 3
70471: NEG
70472: PUSH
70473: EMPTY
70474: LIST
70475: LIST
70476: PUSH
70477: EMPTY
70478: LIST
70479: LIST
70480: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
70481: LD_ADDR_VAR 0 48
70485: PUSH
70486: LD_INT 1
70488: PUSH
70489: LD_INT 2
70491: NEG
70492: PUSH
70493: EMPTY
70494: LIST
70495: LIST
70496: PUSH
70497: LD_INT 2
70499: PUSH
70500: LD_INT 1
70502: NEG
70503: PUSH
70504: EMPTY
70505: LIST
70506: LIST
70507: PUSH
70508: EMPTY
70509: LIST
70510: LIST
70511: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
70512: LD_ADDR_VAR 0 49
70516: PUSH
70517: LD_INT 3
70519: PUSH
70520: LD_INT 1
70522: PUSH
70523: EMPTY
70524: LIST
70525: LIST
70526: PUSH
70527: LD_INT 3
70529: PUSH
70530: LD_INT 2
70532: PUSH
70533: EMPTY
70534: LIST
70535: LIST
70536: PUSH
70537: EMPTY
70538: LIST
70539: LIST
70540: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
70541: LD_ADDR_VAR 0 50
70545: PUSH
70546: LD_INT 2
70548: PUSH
70549: LD_INT 3
70551: PUSH
70552: EMPTY
70553: LIST
70554: LIST
70555: PUSH
70556: LD_INT 1
70558: PUSH
70559: LD_INT 3
70561: PUSH
70562: EMPTY
70563: LIST
70564: LIST
70565: PUSH
70566: EMPTY
70567: LIST
70568: LIST
70569: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
70570: LD_ADDR_VAR 0 51
70574: PUSH
70575: LD_INT 1
70577: NEG
70578: PUSH
70579: LD_INT 2
70581: PUSH
70582: EMPTY
70583: LIST
70584: LIST
70585: PUSH
70586: LD_INT 2
70588: NEG
70589: PUSH
70590: LD_INT 1
70592: PUSH
70593: EMPTY
70594: LIST
70595: LIST
70596: PUSH
70597: EMPTY
70598: LIST
70599: LIST
70600: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
70601: LD_ADDR_VAR 0 52
70605: PUSH
70606: LD_INT 3
70608: NEG
70609: PUSH
70610: LD_INT 1
70612: NEG
70613: PUSH
70614: EMPTY
70615: LIST
70616: LIST
70617: PUSH
70618: LD_INT 3
70620: NEG
70621: PUSH
70622: LD_INT 2
70624: NEG
70625: PUSH
70626: EMPTY
70627: LIST
70628: LIST
70629: PUSH
70630: EMPTY
70631: LIST
70632: LIST
70633: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70634: LD_ADDR_VAR 0 53
70638: PUSH
70639: LD_INT 1
70641: NEG
70642: PUSH
70643: LD_INT 3
70645: NEG
70646: PUSH
70647: EMPTY
70648: LIST
70649: LIST
70650: PUSH
70651: LD_INT 0
70653: PUSH
70654: LD_INT 3
70656: NEG
70657: PUSH
70658: EMPTY
70659: LIST
70660: LIST
70661: PUSH
70662: LD_INT 1
70664: PUSH
70665: LD_INT 2
70667: NEG
70668: PUSH
70669: EMPTY
70670: LIST
70671: LIST
70672: PUSH
70673: EMPTY
70674: LIST
70675: LIST
70676: LIST
70677: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70678: LD_ADDR_VAR 0 54
70682: PUSH
70683: LD_INT 2
70685: PUSH
70686: LD_INT 1
70688: NEG
70689: PUSH
70690: EMPTY
70691: LIST
70692: LIST
70693: PUSH
70694: LD_INT 3
70696: PUSH
70697: LD_INT 0
70699: PUSH
70700: EMPTY
70701: LIST
70702: LIST
70703: PUSH
70704: LD_INT 3
70706: PUSH
70707: LD_INT 1
70709: PUSH
70710: EMPTY
70711: LIST
70712: LIST
70713: PUSH
70714: EMPTY
70715: LIST
70716: LIST
70717: LIST
70718: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70719: LD_ADDR_VAR 0 55
70723: PUSH
70724: LD_INT 3
70726: PUSH
70727: LD_INT 2
70729: PUSH
70730: EMPTY
70731: LIST
70732: LIST
70733: PUSH
70734: LD_INT 3
70736: PUSH
70737: LD_INT 3
70739: PUSH
70740: EMPTY
70741: LIST
70742: LIST
70743: PUSH
70744: LD_INT 2
70746: PUSH
70747: LD_INT 3
70749: PUSH
70750: EMPTY
70751: LIST
70752: LIST
70753: PUSH
70754: EMPTY
70755: LIST
70756: LIST
70757: LIST
70758: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70759: LD_ADDR_VAR 0 56
70763: PUSH
70764: LD_INT 1
70766: PUSH
70767: LD_INT 3
70769: PUSH
70770: EMPTY
70771: LIST
70772: LIST
70773: PUSH
70774: LD_INT 0
70776: PUSH
70777: LD_INT 3
70779: PUSH
70780: EMPTY
70781: LIST
70782: LIST
70783: PUSH
70784: LD_INT 1
70786: NEG
70787: PUSH
70788: LD_INT 2
70790: PUSH
70791: EMPTY
70792: LIST
70793: LIST
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: LIST
70799: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70800: LD_ADDR_VAR 0 57
70804: PUSH
70805: LD_INT 2
70807: NEG
70808: PUSH
70809: LD_INT 1
70811: PUSH
70812: EMPTY
70813: LIST
70814: LIST
70815: PUSH
70816: LD_INT 3
70818: NEG
70819: PUSH
70820: LD_INT 0
70822: PUSH
70823: EMPTY
70824: LIST
70825: LIST
70826: PUSH
70827: LD_INT 3
70829: NEG
70830: PUSH
70831: LD_INT 1
70833: NEG
70834: PUSH
70835: EMPTY
70836: LIST
70837: LIST
70838: PUSH
70839: EMPTY
70840: LIST
70841: LIST
70842: LIST
70843: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70844: LD_ADDR_VAR 0 58
70848: PUSH
70849: LD_INT 2
70851: NEG
70852: PUSH
70853: LD_INT 3
70855: NEG
70856: PUSH
70857: EMPTY
70858: LIST
70859: LIST
70860: PUSH
70861: LD_INT 3
70863: NEG
70864: PUSH
70865: LD_INT 2
70867: NEG
70868: PUSH
70869: EMPTY
70870: LIST
70871: LIST
70872: PUSH
70873: LD_INT 3
70875: NEG
70876: PUSH
70877: LD_INT 3
70879: NEG
70880: PUSH
70881: EMPTY
70882: LIST
70883: LIST
70884: PUSH
70885: EMPTY
70886: LIST
70887: LIST
70888: LIST
70889: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
70890: LD_ADDR_VAR 0 59
70894: PUSH
70895: LD_INT 1
70897: NEG
70898: PUSH
70899: LD_INT 2
70901: NEG
70902: PUSH
70903: EMPTY
70904: LIST
70905: LIST
70906: PUSH
70907: LD_INT 0
70909: PUSH
70910: LD_INT 2
70912: NEG
70913: PUSH
70914: EMPTY
70915: LIST
70916: LIST
70917: PUSH
70918: LD_INT 1
70920: PUSH
70921: LD_INT 1
70923: NEG
70924: PUSH
70925: EMPTY
70926: LIST
70927: LIST
70928: PUSH
70929: EMPTY
70930: LIST
70931: LIST
70932: LIST
70933: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
70934: LD_ADDR_VAR 0 60
70938: PUSH
70939: LD_INT 1
70941: PUSH
70942: LD_INT 1
70944: NEG
70945: PUSH
70946: EMPTY
70947: LIST
70948: LIST
70949: PUSH
70950: LD_INT 2
70952: PUSH
70953: LD_INT 0
70955: PUSH
70956: EMPTY
70957: LIST
70958: LIST
70959: PUSH
70960: LD_INT 2
70962: PUSH
70963: LD_INT 1
70965: PUSH
70966: EMPTY
70967: LIST
70968: LIST
70969: PUSH
70970: EMPTY
70971: LIST
70972: LIST
70973: LIST
70974: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
70975: LD_ADDR_VAR 0 61
70979: PUSH
70980: LD_INT 2
70982: PUSH
70983: LD_INT 1
70985: PUSH
70986: EMPTY
70987: LIST
70988: LIST
70989: PUSH
70990: LD_INT 2
70992: PUSH
70993: LD_INT 2
70995: PUSH
70996: EMPTY
70997: LIST
70998: LIST
70999: PUSH
71000: LD_INT 1
71002: PUSH
71003: LD_INT 2
71005: PUSH
71006: EMPTY
71007: LIST
71008: LIST
71009: PUSH
71010: EMPTY
71011: LIST
71012: LIST
71013: LIST
71014: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
71015: LD_ADDR_VAR 0 62
71019: PUSH
71020: LD_INT 1
71022: PUSH
71023: LD_INT 2
71025: PUSH
71026: EMPTY
71027: LIST
71028: LIST
71029: PUSH
71030: LD_INT 0
71032: PUSH
71033: LD_INT 2
71035: PUSH
71036: EMPTY
71037: LIST
71038: LIST
71039: PUSH
71040: LD_INT 1
71042: NEG
71043: PUSH
71044: LD_INT 1
71046: PUSH
71047: EMPTY
71048: LIST
71049: LIST
71050: PUSH
71051: EMPTY
71052: LIST
71053: LIST
71054: LIST
71055: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
71056: LD_ADDR_VAR 0 63
71060: PUSH
71061: LD_INT 1
71063: NEG
71064: PUSH
71065: LD_INT 1
71067: PUSH
71068: EMPTY
71069: LIST
71070: LIST
71071: PUSH
71072: LD_INT 2
71074: NEG
71075: PUSH
71076: LD_INT 0
71078: PUSH
71079: EMPTY
71080: LIST
71081: LIST
71082: PUSH
71083: LD_INT 2
71085: NEG
71086: PUSH
71087: LD_INT 1
71089: NEG
71090: PUSH
71091: EMPTY
71092: LIST
71093: LIST
71094: PUSH
71095: EMPTY
71096: LIST
71097: LIST
71098: LIST
71099: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71100: LD_ADDR_VAR 0 64
71104: PUSH
71105: LD_INT 1
71107: NEG
71108: PUSH
71109: LD_INT 2
71111: NEG
71112: PUSH
71113: EMPTY
71114: LIST
71115: LIST
71116: PUSH
71117: LD_INT 2
71119: NEG
71120: PUSH
71121: LD_INT 1
71123: NEG
71124: PUSH
71125: EMPTY
71126: LIST
71127: LIST
71128: PUSH
71129: LD_INT 2
71131: NEG
71132: PUSH
71133: LD_INT 2
71135: NEG
71136: PUSH
71137: EMPTY
71138: LIST
71139: LIST
71140: PUSH
71141: EMPTY
71142: LIST
71143: LIST
71144: LIST
71145: ST_TO_ADDR
// end ; 2 :
71146: GO 74412
71148: LD_INT 2
71150: DOUBLE
71151: EQUAL
71152: IFTRUE 71156
71154: GO 74411
71156: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
71157: LD_ADDR_VAR 0 29
71161: PUSH
71162: LD_INT 4
71164: PUSH
71165: LD_INT 0
71167: PUSH
71168: EMPTY
71169: LIST
71170: LIST
71171: PUSH
71172: LD_INT 4
71174: PUSH
71175: LD_INT 1
71177: NEG
71178: PUSH
71179: EMPTY
71180: LIST
71181: LIST
71182: PUSH
71183: LD_INT 5
71185: PUSH
71186: LD_INT 0
71188: PUSH
71189: EMPTY
71190: LIST
71191: LIST
71192: PUSH
71193: LD_INT 5
71195: PUSH
71196: LD_INT 1
71198: PUSH
71199: EMPTY
71200: LIST
71201: LIST
71202: PUSH
71203: LD_INT 4
71205: PUSH
71206: LD_INT 1
71208: PUSH
71209: EMPTY
71210: LIST
71211: LIST
71212: PUSH
71213: LD_INT 3
71215: PUSH
71216: LD_INT 0
71218: PUSH
71219: EMPTY
71220: LIST
71221: LIST
71222: PUSH
71223: LD_INT 3
71225: PUSH
71226: LD_INT 1
71228: NEG
71229: PUSH
71230: EMPTY
71231: LIST
71232: LIST
71233: PUSH
71234: LD_INT 3
71236: PUSH
71237: LD_INT 2
71239: NEG
71240: PUSH
71241: EMPTY
71242: LIST
71243: LIST
71244: PUSH
71245: LD_INT 5
71247: PUSH
71248: LD_INT 2
71250: PUSH
71251: EMPTY
71252: LIST
71253: LIST
71254: PUSH
71255: LD_INT 3
71257: PUSH
71258: LD_INT 3
71260: PUSH
71261: EMPTY
71262: LIST
71263: LIST
71264: PUSH
71265: LD_INT 3
71267: PUSH
71268: LD_INT 2
71270: PUSH
71271: EMPTY
71272: LIST
71273: LIST
71274: PUSH
71275: LD_INT 4
71277: PUSH
71278: LD_INT 3
71280: PUSH
71281: EMPTY
71282: LIST
71283: LIST
71284: PUSH
71285: LD_INT 4
71287: PUSH
71288: LD_INT 4
71290: PUSH
71291: EMPTY
71292: LIST
71293: LIST
71294: PUSH
71295: LD_INT 3
71297: PUSH
71298: LD_INT 4
71300: PUSH
71301: EMPTY
71302: LIST
71303: LIST
71304: PUSH
71305: LD_INT 2
71307: PUSH
71308: LD_INT 3
71310: PUSH
71311: EMPTY
71312: LIST
71313: LIST
71314: PUSH
71315: LD_INT 2
71317: PUSH
71318: LD_INT 2
71320: PUSH
71321: EMPTY
71322: LIST
71323: LIST
71324: PUSH
71325: LD_INT 4
71327: PUSH
71328: LD_INT 2
71330: PUSH
71331: EMPTY
71332: LIST
71333: LIST
71334: PUSH
71335: LD_INT 2
71337: PUSH
71338: LD_INT 4
71340: PUSH
71341: EMPTY
71342: LIST
71343: LIST
71344: PUSH
71345: LD_INT 0
71347: PUSH
71348: LD_INT 4
71350: PUSH
71351: EMPTY
71352: LIST
71353: LIST
71354: PUSH
71355: LD_INT 0
71357: PUSH
71358: LD_INT 3
71360: PUSH
71361: EMPTY
71362: LIST
71363: LIST
71364: PUSH
71365: LD_INT 1
71367: PUSH
71368: LD_INT 4
71370: PUSH
71371: EMPTY
71372: LIST
71373: LIST
71374: PUSH
71375: LD_INT 1
71377: PUSH
71378: LD_INT 5
71380: PUSH
71381: EMPTY
71382: LIST
71383: LIST
71384: PUSH
71385: LD_INT 0
71387: PUSH
71388: LD_INT 5
71390: PUSH
71391: EMPTY
71392: LIST
71393: LIST
71394: PUSH
71395: LD_INT 1
71397: NEG
71398: PUSH
71399: LD_INT 4
71401: PUSH
71402: EMPTY
71403: LIST
71404: LIST
71405: PUSH
71406: LD_INT 1
71408: NEG
71409: PUSH
71410: LD_INT 3
71412: PUSH
71413: EMPTY
71414: LIST
71415: LIST
71416: PUSH
71417: LD_INT 2
71419: PUSH
71420: LD_INT 5
71422: PUSH
71423: EMPTY
71424: LIST
71425: LIST
71426: PUSH
71427: LD_INT 2
71429: NEG
71430: PUSH
71431: LD_INT 3
71433: PUSH
71434: EMPTY
71435: LIST
71436: LIST
71437: PUSH
71438: LD_INT 3
71440: NEG
71441: PUSH
71442: LD_INT 0
71444: PUSH
71445: EMPTY
71446: LIST
71447: LIST
71448: PUSH
71449: LD_INT 3
71451: NEG
71452: PUSH
71453: LD_INT 1
71455: NEG
71456: PUSH
71457: EMPTY
71458: LIST
71459: LIST
71460: PUSH
71461: LD_INT 2
71463: NEG
71464: PUSH
71465: LD_INT 0
71467: PUSH
71468: EMPTY
71469: LIST
71470: LIST
71471: PUSH
71472: LD_INT 2
71474: NEG
71475: PUSH
71476: LD_INT 1
71478: PUSH
71479: EMPTY
71480: LIST
71481: LIST
71482: PUSH
71483: LD_INT 3
71485: NEG
71486: PUSH
71487: LD_INT 1
71489: PUSH
71490: EMPTY
71491: LIST
71492: LIST
71493: PUSH
71494: LD_INT 4
71496: NEG
71497: PUSH
71498: LD_INT 0
71500: PUSH
71501: EMPTY
71502: LIST
71503: LIST
71504: PUSH
71505: LD_INT 4
71507: NEG
71508: PUSH
71509: LD_INT 1
71511: NEG
71512: PUSH
71513: EMPTY
71514: LIST
71515: LIST
71516: PUSH
71517: LD_INT 4
71519: NEG
71520: PUSH
71521: LD_INT 2
71523: NEG
71524: PUSH
71525: EMPTY
71526: LIST
71527: LIST
71528: PUSH
71529: LD_INT 2
71531: NEG
71532: PUSH
71533: LD_INT 2
71535: PUSH
71536: EMPTY
71537: LIST
71538: LIST
71539: PUSH
71540: LD_INT 4
71542: NEG
71543: PUSH
71544: LD_INT 4
71546: NEG
71547: PUSH
71548: EMPTY
71549: LIST
71550: LIST
71551: PUSH
71552: LD_INT 4
71554: NEG
71555: PUSH
71556: LD_INT 5
71558: NEG
71559: PUSH
71560: EMPTY
71561: LIST
71562: LIST
71563: PUSH
71564: LD_INT 3
71566: NEG
71567: PUSH
71568: LD_INT 4
71570: NEG
71571: PUSH
71572: EMPTY
71573: LIST
71574: LIST
71575: PUSH
71576: LD_INT 3
71578: NEG
71579: PUSH
71580: LD_INT 3
71582: NEG
71583: PUSH
71584: EMPTY
71585: LIST
71586: LIST
71587: PUSH
71588: LD_INT 4
71590: NEG
71591: PUSH
71592: LD_INT 3
71594: NEG
71595: PUSH
71596: EMPTY
71597: LIST
71598: LIST
71599: PUSH
71600: LD_INT 5
71602: NEG
71603: PUSH
71604: LD_INT 4
71606: NEG
71607: PUSH
71608: EMPTY
71609: LIST
71610: LIST
71611: PUSH
71612: LD_INT 5
71614: NEG
71615: PUSH
71616: LD_INT 5
71618: NEG
71619: PUSH
71620: EMPTY
71621: LIST
71622: LIST
71623: PUSH
71624: LD_INT 3
71626: NEG
71627: PUSH
71628: LD_INT 5
71630: NEG
71631: PUSH
71632: EMPTY
71633: LIST
71634: LIST
71635: PUSH
71636: LD_INT 5
71638: NEG
71639: PUSH
71640: LD_INT 3
71642: NEG
71643: PUSH
71644: EMPTY
71645: LIST
71646: LIST
71647: PUSH
71648: EMPTY
71649: LIST
71650: LIST
71651: LIST
71652: LIST
71653: LIST
71654: LIST
71655: LIST
71656: LIST
71657: LIST
71658: LIST
71659: LIST
71660: LIST
71661: LIST
71662: LIST
71663: LIST
71664: LIST
71665: LIST
71666: LIST
71667: LIST
71668: LIST
71669: LIST
71670: LIST
71671: LIST
71672: LIST
71673: LIST
71674: LIST
71675: LIST
71676: LIST
71677: LIST
71678: LIST
71679: LIST
71680: LIST
71681: LIST
71682: LIST
71683: LIST
71684: LIST
71685: LIST
71686: LIST
71687: LIST
71688: LIST
71689: LIST
71690: LIST
71691: LIST
71692: LIST
71693: LIST
71694: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
71695: LD_ADDR_VAR 0 30
71699: PUSH
71700: LD_INT 4
71702: PUSH
71703: LD_INT 4
71705: PUSH
71706: EMPTY
71707: LIST
71708: LIST
71709: PUSH
71710: LD_INT 4
71712: PUSH
71713: LD_INT 3
71715: PUSH
71716: EMPTY
71717: LIST
71718: LIST
71719: PUSH
71720: LD_INT 5
71722: PUSH
71723: LD_INT 4
71725: PUSH
71726: EMPTY
71727: LIST
71728: LIST
71729: PUSH
71730: LD_INT 5
71732: PUSH
71733: LD_INT 5
71735: PUSH
71736: EMPTY
71737: LIST
71738: LIST
71739: PUSH
71740: LD_INT 4
71742: PUSH
71743: LD_INT 5
71745: PUSH
71746: EMPTY
71747: LIST
71748: LIST
71749: PUSH
71750: LD_INT 3
71752: PUSH
71753: LD_INT 4
71755: PUSH
71756: EMPTY
71757: LIST
71758: LIST
71759: PUSH
71760: LD_INT 3
71762: PUSH
71763: LD_INT 3
71765: PUSH
71766: EMPTY
71767: LIST
71768: LIST
71769: PUSH
71770: LD_INT 5
71772: PUSH
71773: LD_INT 3
71775: PUSH
71776: EMPTY
71777: LIST
71778: LIST
71779: PUSH
71780: LD_INT 3
71782: PUSH
71783: LD_INT 5
71785: PUSH
71786: EMPTY
71787: LIST
71788: LIST
71789: PUSH
71790: LD_INT 0
71792: PUSH
71793: LD_INT 3
71795: PUSH
71796: EMPTY
71797: LIST
71798: LIST
71799: PUSH
71800: LD_INT 0
71802: PUSH
71803: LD_INT 2
71805: PUSH
71806: EMPTY
71807: LIST
71808: LIST
71809: PUSH
71810: LD_INT 1
71812: PUSH
71813: LD_INT 3
71815: PUSH
71816: EMPTY
71817: LIST
71818: LIST
71819: PUSH
71820: LD_INT 1
71822: PUSH
71823: LD_INT 4
71825: PUSH
71826: EMPTY
71827: LIST
71828: LIST
71829: PUSH
71830: LD_INT 0
71832: PUSH
71833: LD_INT 4
71835: PUSH
71836: EMPTY
71837: LIST
71838: LIST
71839: PUSH
71840: LD_INT 1
71842: NEG
71843: PUSH
71844: LD_INT 3
71846: PUSH
71847: EMPTY
71848: LIST
71849: LIST
71850: PUSH
71851: LD_INT 1
71853: NEG
71854: PUSH
71855: LD_INT 2
71857: PUSH
71858: EMPTY
71859: LIST
71860: LIST
71861: PUSH
71862: LD_INT 2
71864: PUSH
71865: LD_INT 4
71867: PUSH
71868: EMPTY
71869: LIST
71870: LIST
71871: PUSH
71872: LD_INT 2
71874: NEG
71875: PUSH
71876: LD_INT 2
71878: PUSH
71879: EMPTY
71880: LIST
71881: LIST
71882: PUSH
71883: LD_INT 4
71885: NEG
71886: PUSH
71887: LD_INT 0
71889: PUSH
71890: EMPTY
71891: LIST
71892: LIST
71893: PUSH
71894: LD_INT 4
71896: NEG
71897: PUSH
71898: LD_INT 1
71900: NEG
71901: PUSH
71902: EMPTY
71903: LIST
71904: LIST
71905: PUSH
71906: LD_INT 3
71908: NEG
71909: PUSH
71910: LD_INT 0
71912: PUSH
71913: EMPTY
71914: LIST
71915: LIST
71916: PUSH
71917: LD_INT 3
71919: NEG
71920: PUSH
71921: LD_INT 1
71923: PUSH
71924: EMPTY
71925: LIST
71926: LIST
71927: PUSH
71928: LD_INT 4
71930: NEG
71931: PUSH
71932: LD_INT 1
71934: PUSH
71935: EMPTY
71936: LIST
71937: LIST
71938: PUSH
71939: LD_INT 5
71941: NEG
71942: PUSH
71943: LD_INT 0
71945: PUSH
71946: EMPTY
71947: LIST
71948: LIST
71949: PUSH
71950: LD_INT 5
71952: NEG
71953: PUSH
71954: LD_INT 1
71956: NEG
71957: PUSH
71958: EMPTY
71959: LIST
71960: LIST
71961: PUSH
71962: LD_INT 5
71964: NEG
71965: PUSH
71966: LD_INT 2
71968: NEG
71969: PUSH
71970: EMPTY
71971: LIST
71972: LIST
71973: PUSH
71974: LD_INT 3
71976: NEG
71977: PUSH
71978: LD_INT 2
71980: PUSH
71981: EMPTY
71982: LIST
71983: LIST
71984: PUSH
71985: LD_INT 3
71987: NEG
71988: PUSH
71989: LD_INT 3
71991: NEG
71992: PUSH
71993: EMPTY
71994: LIST
71995: LIST
71996: PUSH
71997: LD_INT 3
71999: NEG
72000: PUSH
72001: LD_INT 4
72003: NEG
72004: PUSH
72005: EMPTY
72006: LIST
72007: LIST
72008: PUSH
72009: LD_INT 2
72011: NEG
72012: PUSH
72013: LD_INT 3
72015: NEG
72016: PUSH
72017: EMPTY
72018: LIST
72019: LIST
72020: PUSH
72021: LD_INT 2
72023: NEG
72024: PUSH
72025: LD_INT 2
72027: NEG
72028: PUSH
72029: EMPTY
72030: LIST
72031: LIST
72032: PUSH
72033: LD_INT 3
72035: NEG
72036: PUSH
72037: LD_INT 2
72039: NEG
72040: PUSH
72041: EMPTY
72042: LIST
72043: LIST
72044: PUSH
72045: LD_INT 4
72047: NEG
72048: PUSH
72049: LD_INT 3
72051: NEG
72052: PUSH
72053: EMPTY
72054: LIST
72055: LIST
72056: PUSH
72057: LD_INT 4
72059: NEG
72060: PUSH
72061: LD_INT 4
72063: NEG
72064: PUSH
72065: EMPTY
72066: LIST
72067: LIST
72068: PUSH
72069: LD_INT 2
72071: NEG
72072: PUSH
72073: LD_INT 4
72075: NEG
72076: PUSH
72077: EMPTY
72078: LIST
72079: LIST
72080: PUSH
72081: LD_INT 4
72083: NEG
72084: PUSH
72085: LD_INT 2
72087: NEG
72088: PUSH
72089: EMPTY
72090: LIST
72091: LIST
72092: PUSH
72093: LD_INT 0
72095: PUSH
72096: LD_INT 4
72098: NEG
72099: PUSH
72100: EMPTY
72101: LIST
72102: LIST
72103: PUSH
72104: LD_INT 0
72106: PUSH
72107: LD_INT 5
72109: NEG
72110: PUSH
72111: EMPTY
72112: LIST
72113: LIST
72114: PUSH
72115: LD_INT 1
72117: PUSH
72118: LD_INT 4
72120: NEG
72121: PUSH
72122: EMPTY
72123: LIST
72124: LIST
72125: PUSH
72126: LD_INT 1
72128: PUSH
72129: LD_INT 3
72131: NEG
72132: PUSH
72133: EMPTY
72134: LIST
72135: LIST
72136: PUSH
72137: LD_INT 0
72139: PUSH
72140: LD_INT 3
72142: NEG
72143: PUSH
72144: EMPTY
72145: LIST
72146: LIST
72147: PUSH
72148: LD_INT 1
72150: NEG
72151: PUSH
72152: LD_INT 4
72154: NEG
72155: PUSH
72156: EMPTY
72157: LIST
72158: LIST
72159: PUSH
72160: LD_INT 1
72162: NEG
72163: PUSH
72164: LD_INT 5
72166: NEG
72167: PUSH
72168: EMPTY
72169: LIST
72170: LIST
72171: PUSH
72172: LD_INT 2
72174: PUSH
72175: LD_INT 3
72177: NEG
72178: PUSH
72179: EMPTY
72180: LIST
72181: LIST
72182: PUSH
72183: LD_INT 2
72185: NEG
72186: PUSH
72187: LD_INT 5
72189: NEG
72190: PUSH
72191: EMPTY
72192: LIST
72193: LIST
72194: PUSH
72195: EMPTY
72196: LIST
72197: LIST
72198: LIST
72199: LIST
72200: LIST
72201: LIST
72202: LIST
72203: LIST
72204: LIST
72205: LIST
72206: LIST
72207: LIST
72208: LIST
72209: LIST
72210: LIST
72211: LIST
72212: LIST
72213: LIST
72214: LIST
72215: LIST
72216: LIST
72217: LIST
72218: LIST
72219: LIST
72220: LIST
72221: LIST
72222: LIST
72223: LIST
72224: LIST
72225: LIST
72226: LIST
72227: LIST
72228: LIST
72229: LIST
72230: LIST
72231: LIST
72232: LIST
72233: LIST
72234: LIST
72235: LIST
72236: LIST
72237: LIST
72238: LIST
72239: LIST
72240: LIST
72241: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
72242: LD_ADDR_VAR 0 31
72246: PUSH
72247: LD_INT 0
72249: PUSH
72250: LD_INT 4
72252: PUSH
72253: EMPTY
72254: LIST
72255: LIST
72256: PUSH
72257: LD_INT 0
72259: PUSH
72260: LD_INT 3
72262: PUSH
72263: EMPTY
72264: LIST
72265: LIST
72266: PUSH
72267: LD_INT 1
72269: PUSH
72270: LD_INT 4
72272: PUSH
72273: EMPTY
72274: LIST
72275: LIST
72276: PUSH
72277: LD_INT 1
72279: PUSH
72280: LD_INT 5
72282: PUSH
72283: EMPTY
72284: LIST
72285: LIST
72286: PUSH
72287: LD_INT 0
72289: PUSH
72290: LD_INT 5
72292: PUSH
72293: EMPTY
72294: LIST
72295: LIST
72296: PUSH
72297: LD_INT 1
72299: NEG
72300: PUSH
72301: LD_INT 4
72303: PUSH
72304: EMPTY
72305: LIST
72306: LIST
72307: PUSH
72308: LD_INT 1
72310: NEG
72311: PUSH
72312: LD_INT 3
72314: PUSH
72315: EMPTY
72316: LIST
72317: LIST
72318: PUSH
72319: LD_INT 2
72321: PUSH
72322: LD_INT 5
72324: PUSH
72325: EMPTY
72326: LIST
72327: LIST
72328: PUSH
72329: LD_INT 2
72331: NEG
72332: PUSH
72333: LD_INT 3
72335: PUSH
72336: EMPTY
72337: LIST
72338: LIST
72339: PUSH
72340: LD_INT 3
72342: NEG
72343: PUSH
72344: LD_INT 0
72346: PUSH
72347: EMPTY
72348: LIST
72349: LIST
72350: PUSH
72351: LD_INT 3
72353: NEG
72354: PUSH
72355: LD_INT 1
72357: NEG
72358: PUSH
72359: EMPTY
72360: LIST
72361: LIST
72362: PUSH
72363: LD_INT 2
72365: NEG
72366: PUSH
72367: LD_INT 0
72369: PUSH
72370: EMPTY
72371: LIST
72372: LIST
72373: PUSH
72374: LD_INT 2
72376: NEG
72377: PUSH
72378: LD_INT 1
72380: PUSH
72381: EMPTY
72382: LIST
72383: LIST
72384: PUSH
72385: LD_INT 3
72387: NEG
72388: PUSH
72389: LD_INT 1
72391: PUSH
72392: EMPTY
72393: LIST
72394: LIST
72395: PUSH
72396: LD_INT 4
72398: NEG
72399: PUSH
72400: LD_INT 0
72402: PUSH
72403: EMPTY
72404: LIST
72405: LIST
72406: PUSH
72407: LD_INT 4
72409: NEG
72410: PUSH
72411: LD_INT 1
72413: NEG
72414: PUSH
72415: EMPTY
72416: LIST
72417: LIST
72418: PUSH
72419: LD_INT 4
72421: NEG
72422: PUSH
72423: LD_INT 2
72425: NEG
72426: PUSH
72427: EMPTY
72428: LIST
72429: LIST
72430: PUSH
72431: LD_INT 2
72433: NEG
72434: PUSH
72435: LD_INT 2
72437: PUSH
72438: EMPTY
72439: LIST
72440: LIST
72441: PUSH
72442: LD_INT 4
72444: NEG
72445: PUSH
72446: LD_INT 4
72448: NEG
72449: PUSH
72450: EMPTY
72451: LIST
72452: LIST
72453: PUSH
72454: LD_INT 4
72456: NEG
72457: PUSH
72458: LD_INT 5
72460: NEG
72461: PUSH
72462: EMPTY
72463: LIST
72464: LIST
72465: PUSH
72466: LD_INT 3
72468: NEG
72469: PUSH
72470: LD_INT 4
72472: NEG
72473: PUSH
72474: EMPTY
72475: LIST
72476: LIST
72477: PUSH
72478: LD_INT 3
72480: NEG
72481: PUSH
72482: LD_INT 3
72484: NEG
72485: PUSH
72486: EMPTY
72487: LIST
72488: LIST
72489: PUSH
72490: LD_INT 4
72492: NEG
72493: PUSH
72494: LD_INT 3
72496: NEG
72497: PUSH
72498: EMPTY
72499: LIST
72500: LIST
72501: PUSH
72502: LD_INT 5
72504: NEG
72505: PUSH
72506: LD_INT 4
72508: NEG
72509: PUSH
72510: EMPTY
72511: LIST
72512: LIST
72513: PUSH
72514: LD_INT 5
72516: NEG
72517: PUSH
72518: LD_INT 5
72520: NEG
72521: PUSH
72522: EMPTY
72523: LIST
72524: LIST
72525: PUSH
72526: LD_INT 3
72528: NEG
72529: PUSH
72530: LD_INT 5
72532: NEG
72533: PUSH
72534: EMPTY
72535: LIST
72536: LIST
72537: PUSH
72538: LD_INT 5
72540: NEG
72541: PUSH
72542: LD_INT 3
72544: NEG
72545: PUSH
72546: EMPTY
72547: LIST
72548: LIST
72549: PUSH
72550: LD_INT 0
72552: PUSH
72553: LD_INT 3
72555: NEG
72556: PUSH
72557: EMPTY
72558: LIST
72559: LIST
72560: PUSH
72561: LD_INT 0
72563: PUSH
72564: LD_INT 4
72566: NEG
72567: PUSH
72568: EMPTY
72569: LIST
72570: LIST
72571: PUSH
72572: LD_INT 1
72574: PUSH
72575: LD_INT 3
72577: NEG
72578: PUSH
72579: EMPTY
72580: LIST
72581: LIST
72582: PUSH
72583: LD_INT 1
72585: PUSH
72586: LD_INT 2
72588: NEG
72589: PUSH
72590: EMPTY
72591: LIST
72592: LIST
72593: PUSH
72594: LD_INT 0
72596: PUSH
72597: LD_INT 2
72599: NEG
72600: PUSH
72601: EMPTY
72602: LIST
72603: LIST
72604: PUSH
72605: LD_INT 1
72607: NEG
72608: PUSH
72609: LD_INT 3
72611: NEG
72612: PUSH
72613: EMPTY
72614: LIST
72615: LIST
72616: PUSH
72617: LD_INT 1
72619: NEG
72620: PUSH
72621: LD_INT 4
72623: NEG
72624: PUSH
72625: EMPTY
72626: LIST
72627: LIST
72628: PUSH
72629: LD_INT 2
72631: PUSH
72632: LD_INT 2
72634: NEG
72635: PUSH
72636: EMPTY
72637: LIST
72638: LIST
72639: PUSH
72640: LD_INT 2
72642: NEG
72643: PUSH
72644: LD_INT 4
72646: NEG
72647: PUSH
72648: EMPTY
72649: LIST
72650: LIST
72651: PUSH
72652: LD_INT 4
72654: PUSH
72655: LD_INT 0
72657: PUSH
72658: EMPTY
72659: LIST
72660: LIST
72661: PUSH
72662: LD_INT 4
72664: PUSH
72665: LD_INT 1
72667: NEG
72668: PUSH
72669: EMPTY
72670: LIST
72671: LIST
72672: PUSH
72673: LD_INT 5
72675: PUSH
72676: LD_INT 0
72678: PUSH
72679: EMPTY
72680: LIST
72681: LIST
72682: PUSH
72683: LD_INT 5
72685: PUSH
72686: LD_INT 1
72688: PUSH
72689: EMPTY
72690: LIST
72691: LIST
72692: PUSH
72693: LD_INT 4
72695: PUSH
72696: LD_INT 1
72698: PUSH
72699: EMPTY
72700: LIST
72701: LIST
72702: PUSH
72703: LD_INT 3
72705: PUSH
72706: LD_INT 0
72708: PUSH
72709: EMPTY
72710: LIST
72711: LIST
72712: PUSH
72713: LD_INT 3
72715: PUSH
72716: LD_INT 1
72718: NEG
72719: PUSH
72720: EMPTY
72721: LIST
72722: LIST
72723: PUSH
72724: LD_INT 3
72726: PUSH
72727: LD_INT 2
72729: NEG
72730: PUSH
72731: EMPTY
72732: LIST
72733: LIST
72734: PUSH
72735: LD_INT 5
72737: PUSH
72738: LD_INT 2
72740: PUSH
72741: EMPTY
72742: LIST
72743: LIST
72744: PUSH
72745: EMPTY
72746: LIST
72747: LIST
72748: LIST
72749: LIST
72750: LIST
72751: LIST
72752: LIST
72753: LIST
72754: LIST
72755: LIST
72756: LIST
72757: LIST
72758: LIST
72759: LIST
72760: LIST
72761: LIST
72762: LIST
72763: LIST
72764: LIST
72765: LIST
72766: LIST
72767: LIST
72768: LIST
72769: LIST
72770: LIST
72771: LIST
72772: LIST
72773: LIST
72774: LIST
72775: LIST
72776: LIST
72777: LIST
72778: LIST
72779: LIST
72780: LIST
72781: LIST
72782: LIST
72783: LIST
72784: LIST
72785: LIST
72786: LIST
72787: LIST
72788: LIST
72789: LIST
72790: LIST
72791: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
72792: LD_ADDR_VAR 0 32
72796: PUSH
72797: LD_INT 4
72799: NEG
72800: PUSH
72801: LD_INT 0
72803: PUSH
72804: EMPTY
72805: LIST
72806: LIST
72807: PUSH
72808: LD_INT 4
72810: NEG
72811: PUSH
72812: LD_INT 1
72814: NEG
72815: PUSH
72816: EMPTY
72817: LIST
72818: LIST
72819: PUSH
72820: LD_INT 3
72822: NEG
72823: PUSH
72824: LD_INT 0
72826: PUSH
72827: EMPTY
72828: LIST
72829: LIST
72830: PUSH
72831: LD_INT 3
72833: NEG
72834: PUSH
72835: LD_INT 1
72837: PUSH
72838: EMPTY
72839: LIST
72840: LIST
72841: PUSH
72842: LD_INT 4
72844: NEG
72845: PUSH
72846: LD_INT 1
72848: PUSH
72849: EMPTY
72850: LIST
72851: LIST
72852: PUSH
72853: LD_INT 5
72855: NEG
72856: PUSH
72857: LD_INT 0
72859: PUSH
72860: EMPTY
72861: LIST
72862: LIST
72863: PUSH
72864: LD_INT 5
72866: NEG
72867: PUSH
72868: LD_INT 1
72870: NEG
72871: PUSH
72872: EMPTY
72873: LIST
72874: LIST
72875: PUSH
72876: LD_INT 5
72878: NEG
72879: PUSH
72880: LD_INT 2
72882: NEG
72883: PUSH
72884: EMPTY
72885: LIST
72886: LIST
72887: PUSH
72888: LD_INT 3
72890: NEG
72891: PUSH
72892: LD_INT 2
72894: PUSH
72895: EMPTY
72896: LIST
72897: LIST
72898: PUSH
72899: LD_INT 3
72901: NEG
72902: PUSH
72903: LD_INT 3
72905: NEG
72906: PUSH
72907: EMPTY
72908: LIST
72909: LIST
72910: PUSH
72911: LD_INT 3
72913: NEG
72914: PUSH
72915: LD_INT 4
72917: NEG
72918: PUSH
72919: EMPTY
72920: LIST
72921: LIST
72922: PUSH
72923: LD_INT 2
72925: NEG
72926: PUSH
72927: LD_INT 3
72929: NEG
72930: PUSH
72931: EMPTY
72932: LIST
72933: LIST
72934: PUSH
72935: LD_INT 2
72937: NEG
72938: PUSH
72939: LD_INT 2
72941: NEG
72942: PUSH
72943: EMPTY
72944: LIST
72945: LIST
72946: PUSH
72947: LD_INT 3
72949: NEG
72950: PUSH
72951: LD_INT 2
72953: NEG
72954: PUSH
72955: EMPTY
72956: LIST
72957: LIST
72958: PUSH
72959: LD_INT 4
72961: NEG
72962: PUSH
72963: LD_INT 3
72965: NEG
72966: PUSH
72967: EMPTY
72968: LIST
72969: LIST
72970: PUSH
72971: LD_INT 4
72973: NEG
72974: PUSH
72975: LD_INT 4
72977: NEG
72978: PUSH
72979: EMPTY
72980: LIST
72981: LIST
72982: PUSH
72983: LD_INT 2
72985: NEG
72986: PUSH
72987: LD_INT 4
72989: NEG
72990: PUSH
72991: EMPTY
72992: LIST
72993: LIST
72994: PUSH
72995: LD_INT 4
72997: NEG
72998: PUSH
72999: LD_INT 2
73001: NEG
73002: PUSH
73003: EMPTY
73004: LIST
73005: LIST
73006: PUSH
73007: LD_INT 0
73009: PUSH
73010: LD_INT 4
73012: NEG
73013: PUSH
73014: EMPTY
73015: LIST
73016: LIST
73017: PUSH
73018: LD_INT 0
73020: PUSH
73021: LD_INT 5
73023: NEG
73024: PUSH
73025: EMPTY
73026: LIST
73027: LIST
73028: PUSH
73029: LD_INT 1
73031: PUSH
73032: LD_INT 4
73034: NEG
73035: PUSH
73036: EMPTY
73037: LIST
73038: LIST
73039: PUSH
73040: LD_INT 1
73042: PUSH
73043: LD_INT 3
73045: NEG
73046: PUSH
73047: EMPTY
73048: LIST
73049: LIST
73050: PUSH
73051: LD_INT 0
73053: PUSH
73054: LD_INT 3
73056: NEG
73057: PUSH
73058: EMPTY
73059: LIST
73060: LIST
73061: PUSH
73062: LD_INT 1
73064: NEG
73065: PUSH
73066: LD_INT 4
73068: NEG
73069: PUSH
73070: EMPTY
73071: LIST
73072: LIST
73073: PUSH
73074: LD_INT 1
73076: NEG
73077: PUSH
73078: LD_INT 5
73080: NEG
73081: PUSH
73082: EMPTY
73083: LIST
73084: LIST
73085: PUSH
73086: LD_INT 2
73088: PUSH
73089: LD_INT 3
73091: NEG
73092: PUSH
73093: EMPTY
73094: LIST
73095: LIST
73096: PUSH
73097: LD_INT 2
73099: NEG
73100: PUSH
73101: LD_INT 5
73103: NEG
73104: PUSH
73105: EMPTY
73106: LIST
73107: LIST
73108: PUSH
73109: LD_INT 3
73111: PUSH
73112: LD_INT 0
73114: PUSH
73115: EMPTY
73116: LIST
73117: LIST
73118: PUSH
73119: LD_INT 3
73121: PUSH
73122: LD_INT 1
73124: NEG
73125: PUSH
73126: EMPTY
73127: LIST
73128: LIST
73129: PUSH
73130: LD_INT 4
73132: PUSH
73133: LD_INT 0
73135: PUSH
73136: EMPTY
73137: LIST
73138: LIST
73139: PUSH
73140: LD_INT 4
73142: PUSH
73143: LD_INT 1
73145: PUSH
73146: EMPTY
73147: LIST
73148: LIST
73149: PUSH
73150: LD_INT 3
73152: PUSH
73153: LD_INT 1
73155: PUSH
73156: EMPTY
73157: LIST
73158: LIST
73159: PUSH
73160: LD_INT 2
73162: PUSH
73163: LD_INT 0
73165: PUSH
73166: EMPTY
73167: LIST
73168: LIST
73169: PUSH
73170: LD_INT 2
73172: PUSH
73173: LD_INT 1
73175: NEG
73176: PUSH
73177: EMPTY
73178: LIST
73179: LIST
73180: PUSH
73181: LD_INT 2
73183: PUSH
73184: LD_INT 2
73186: NEG
73187: PUSH
73188: EMPTY
73189: LIST
73190: LIST
73191: PUSH
73192: LD_INT 4
73194: PUSH
73195: LD_INT 2
73197: PUSH
73198: EMPTY
73199: LIST
73200: LIST
73201: PUSH
73202: LD_INT 4
73204: PUSH
73205: LD_INT 4
73207: PUSH
73208: EMPTY
73209: LIST
73210: LIST
73211: PUSH
73212: LD_INT 4
73214: PUSH
73215: LD_INT 3
73217: PUSH
73218: EMPTY
73219: LIST
73220: LIST
73221: PUSH
73222: LD_INT 5
73224: PUSH
73225: LD_INT 4
73227: PUSH
73228: EMPTY
73229: LIST
73230: LIST
73231: PUSH
73232: LD_INT 5
73234: PUSH
73235: LD_INT 5
73237: PUSH
73238: EMPTY
73239: LIST
73240: LIST
73241: PUSH
73242: LD_INT 4
73244: PUSH
73245: LD_INT 5
73247: PUSH
73248: EMPTY
73249: LIST
73250: LIST
73251: PUSH
73252: LD_INT 3
73254: PUSH
73255: LD_INT 4
73257: PUSH
73258: EMPTY
73259: LIST
73260: LIST
73261: PUSH
73262: LD_INT 3
73264: PUSH
73265: LD_INT 3
73267: PUSH
73268: EMPTY
73269: LIST
73270: LIST
73271: PUSH
73272: LD_INT 5
73274: PUSH
73275: LD_INT 3
73277: PUSH
73278: EMPTY
73279: LIST
73280: LIST
73281: PUSH
73282: LD_INT 3
73284: PUSH
73285: LD_INT 5
73287: PUSH
73288: EMPTY
73289: LIST
73290: LIST
73291: PUSH
73292: EMPTY
73293: LIST
73294: LIST
73295: LIST
73296: LIST
73297: LIST
73298: LIST
73299: LIST
73300: LIST
73301: LIST
73302: LIST
73303: LIST
73304: LIST
73305: LIST
73306: LIST
73307: LIST
73308: LIST
73309: LIST
73310: LIST
73311: LIST
73312: LIST
73313: LIST
73314: LIST
73315: LIST
73316: LIST
73317: LIST
73318: LIST
73319: LIST
73320: LIST
73321: LIST
73322: LIST
73323: LIST
73324: LIST
73325: LIST
73326: LIST
73327: LIST
73328: LIST
73329: LIST
73330: LIST
73331: LIST
73332: LIST
73333: LIST
73334: LIST
73335: LIST
73336: LIST
73337: LIST
73338: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
73339: LD_ADDR_VAR 0 33
73343: PUSH
73344: LD_INT 4
73346: NEG
73347: PUSH
73348: LD_INT 4
73350: NEG
73351: PUSH
73352: EMPTY
73353: LIST
73354: LIST
73355: PUSH
73356: LD_INT 4
73358: NEG
73359: PUSH
73360: LD_INT 5
73362: NEG
73363: PUSH
73364: EMPTY
73365: LIST
73366: LIST
73367: PUSH
73368: LD_INT 3
73370: NEG
73371: PUSH
73372: LD_INT 4
73374: NEG
73375: PUSH
73376: EMPTY
73377: LIST
73378: LIST
73379: PUSH
73380: LD_INT 3
73382: NEG
73383: PUSH
73384: LD_INT 3
73386: NEG
73387: PUSH
73388: EMPTY
73389: LIST
73390: LIST
73391: PUSH
73392: LD_INT 4
73394: NEG
73395: PUSH
73396: LD_INT 3
73398: NEG
73399: PUSH
73400: EMPTY
73401: LIST
73402: LIST
73403: PUSH
73404: LD_INT 5
73406: NEG
73407: PUSH
73408: LD_INT 4
73410: NEG
73411: PUSH
73412: EMPTY
73413: LIST
73414: LIST
73415: PUSH
73416: LD_INT 5
73418: NEG
73419: PUSH
73420: LD_INT 5
73422: NEG
73423: PUSH
73424: EMPTY
73425: LIST
73426: LIST
73427: PUSH
73428: LD_INT 3
73430: NEG
73431: PUSH
73432: LD_INT 5
73434: NEG
73435: PUSH
73436: EMPTY
73437: LIST
73438: LIST
73439: PUSH
73440: LD_INT 5
73442: NEG
73443: PUSH
73444: LD_INT 3
73446: NEG
73447: PUSH
73448: EMPTY
73449: LIST
73450: LIST
73451: PUSH
73452: LD_INT 0
73454: PUSH
73455: LD_INT 3
73457: NEG
73458: PUSH
73459: EMPTY
73460: LIST
73461: LIST
73462: PUSH
73463: LD_INT 0
73465: PUSH
73466: LD_INT 4
73468: NEG
73469: PUSH
73470: EMPTY
73471: LIST
73472: LIST
73473: PUSH
73474: LD_INT 1
73476: PUSH
73477: LD_INT 3
73479: NEG
73480: PUSH
73481: EMPTY
73482: LIST
73483: LIST
73484: PUSH
73485: LD_INT 1
73487: PUSH
73488: LD_INT 2
73490: NEG
73491: PUSH
73492: EMPTY
73493: LIST
73494: LIST
73495: PUSH
73496: LD_INT 0
73498: PUSH
73499: LD_INT 2
73501: NEG
73502: PUSH
73503: EMPTY
73504: LIST
73505: LIST
73506: PUSH
73507: LD_INT 1
73509: NEG
73510: PUSH
73511: LD_INT 3
73513: NEG
73514: PUSH
73515: EMPTY
73516: LIST
73517: LIST
73518: PUSH
73519: LD_INT 1
73521: NEG
73522: PUSH
73523: LD_INT 4
73525: NEG
73526: PUSH
73527: EMPTY
73528: LIST
73529: LIST
73530: PUSH
73531: LD_INT 2
73533: PUSH
73534: LD_INT 2
73536: NEG
73537: PUSH
73538: EMPTY
73539: LIST
73540: LIST
73541: PUSH
73542: LD_INT 2
73544: NEG
73545: PUSH
73546: LD_INT 4
73548: NEG
73549: PUSH
73550: EMPTY
73551: LIST
73552: LIST
73553: PUSH
73554: LD_INT 4
73556: PUSH
73557: LD_INT 0
73559: PUSH
73560: EMPTY
73561: LIST
73562: LIST
73563: PUSH
73564: LD_INT 4
73566: PUSH
73567: LD_INT 1
73569: NEG
73570: PUSH
73571: EMPTY
73572: LIST
73573: LIST
73574: PUSH
73575: LD_INT 5
73577: PUSH
73578: LD_INT 0
73580: PUSH
73581: EMPTY
73582: LIST
73583: LIST
73584: PUSH
73585: LD_INT 5
73587: PUSH
73588: LD_INT 1
73590: PUSH
73591: EMPTY
73592: LIST
73593: LIST
73594: PUSH
73595: LD_INT 4
73597: PUSH
73598: LD_INT 1
73600: PUSH
73601: EMPTY
73602: LIST
73603: LIST
73604: PUSH
73605: LD_INT 3
73607: PUSH
73608: LD_INT 0
73610: PUSH
73611: EMPTY
73612: LIST
73613: LIST
73614: PUSH
73615: LD_INT 3
73617: PUSH
73618: LD_INT 1
73620: NEG
73621: PUSH
73622: EMPTY
73623: LIST
73624: LIST
73625: PUSH
73626: LD_INT 3
73628: PUSH
73629: LD_INT 2
73631: NEG
73632: PUSH
73633: EMPTY
73634: LIST
73635: LIST
73636: PUSH
73637: LD_INT 5
73639: PUSH
73640: LD_INT 2
73642: PUSH
73643: EMPTY
73644: LIST
73645: LIST
73646: PUSH
73647: LD_INT 3
73649: PUSH
73650: LD_INT 3
73652: PUSH
73653: EMPTY
73654: LIST
73655: LIST
73656: PUSH
73657: LD_INT 3
73659: PUSH
73660: LD_INT 2
73662: PUSH
73663: EMPTY
73664: LIST
73665: LIST
73666: PUSH
73667: LD_INT 4
73669: PUSH
73670: LD_INT 3
73672: PUSH
73673: EMPTY
73674: LIST
73675: LIST
73676: PUSH
73677: LD_INT 4
73679: PUSH
73680: LD_INT 4
73682: PUSH
73683: EMPTY
73684: LIST
73685: LIST
73686: PUSH
73687: LD_INT 3
73689: PUSH
73690: LD_INT 4
73692: PUSH
73693: EMPTY
73694: LIST
73695: LIST
73696: PUSH
73697: LD_INT 2
73699: PUSH
73700: LD_INT 3
73702: PUSH
73703: EMPTY
73704: LIST
73705: LIST
73706: PUSH
73707: LD_INT 2
73709: PUSH
73710: LD_INT 2
73712: PUSH
73713: EMPTY
73714: LIST
73715: LIST
73716: PUSH
73717: LD_INT 4
73719: PUSH
73720: LD_INT 2
73722: PUSH
73723: EMPTY
73724: LIST
73725: LIST
73726: PUSH
73727: LD_INT 2
73729: PUSH
73730: LD_INT 4
73732: PUSH
73733: EMPTY
73734: LIST
73735: LIST
73736: PUSH
73737: LD_INT 0
73739: PUSH
73740: LD_INT 4
73742: PUSH
73743: EMPTY
73744: LIST
73745: LIST
73746: PUSH
73747: LD_INT 0
73749: PUSH
73750: LD_INT 3
73752: PUSH
73753: EMPTY
73754: LIST
73755: LIST
73756: PUSH
73757: LD_INT 1
73759: PUSH
73760: LD_INT 4
73762: PUSH
73763: EMPTY
73764: LIST
73765: LIST
73766: PUSH
73767: LD_INT 1
73769: PUSH
73770: LD_INT 5
73772: PUSH
73773: EMPTY
73774: LIST
73775: LIST
73776: PUSH
73777: LD_INT 0
73779: PUSH
73780: LD_INT 5
73782: PUSH
73783: EMPTY
73784: LIST
73785: LIST
73786: PUSH
73787: LD_INT 1
73789: NEG
73790: PUSH
73791: LD_INT 4
73793: PUSH
73794: EMPTY
73795: LIST
73796: LIST
73797: PUSH
73798: LD_INT 1
73800: NEG
73801: PUSH
73802: LD_INT 3
73804: PUSH
73805: EMPTY
73806: LIST
73807: LIST
73808: PUSH
73809: LD_INT 2
73811: PUSH
73812: LD_INT 5
73814: PUSH
73815: EMPTY
73816: LIST
73817: LIST
73818: PUSH
73819: LD_INT 2
73821: NEG
73822: PUSH
73823: LD_INT 3
73825: PUSH
73826: EMPTY
73827: LIST
73828: LIST
73829: PUSH
73830: EMPTY
73831: LIST
73832: LIST
73833: LIST
73834: LIST
73835: LIST
73836: LIST
73837: LIST
73838: LIST
73839: LIST
73840: LIST
73841: LIST
73842: LIST
73843: LIST
73844: LIST
73845: LIST
73846: LIST
73847: LIST
73848: LIST
73849: LIST
73850: LIST
73851: LIST
73852: LIST
73853: LIST
73854: LIST
73855: LIST
73856: LIST
73857: LIST
73858: LIST
73859: LIST
73860: LIST
73861: LIST
73862: LIST
73863: LIST
73864: LIST
73865: LIST
73866: LIST
73867: LIST
73868: LIST
73869: LIST
73870: LIST
73871: LIST
73872: LIST
73873: LIST
73874: LIST
73875: LIST
73876: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
73877: LD_ADDR_VAR 0 34
73881: PUSH
73882: LD_INT 0
73884: PUSH
73885: LD_INT 4
73887: NEG
73888: PUSH
73889: EMPTY
73890: LIST
73891: LIST
73892: PUSH
73893: LD_INT 0
73895: PUSH
73896: LD_INT 5
73898: NEG
73899: PUSH
73900: EMPTY
73901: LIST
73902: LIST
73903: PUSH
73904: LD_INT 1
73906: PUSH
73907: LD_INT 4
73909: NEG
73910: PUSH
73911: EMPTY
73912: LIST
73913: LIST
73914: PUSH
73915: LD_INT 1
73917: PUSH
73918: LD_INT 3
73920: NEG
73921: PUSH
73922: EMPTY
73923: LIST
73924: LIST
73925: PUSH
73926: LD_INT 0
73928: PUSH
73929: LD_INT 3
73931: NEG
73932: PUSH
73933: EMPTY
73934: LIST
73935: LIST
73936: PUSH
73937: LD_INT 1
73939: NEG
73940: PUSH
73941: LD_INT 4
73943: NEG
73944: PUSH
73945: EMPTY
73946: LIST
73947: LIST
73948: PUSH
73949: LD_INT 1
73951: NEG
73952: PUSH
73953: LD_INT 5
73955: NEG
73956: PUSH
73957: EMPTY
73958: LIST
73959: LIST
73960: PUSH
73961: LD_INT 2
73963: PUSH
73964: LD_INT 3
73966: NEG
73967: PUSH
73968: EMPTY
73969: LIST
73970: LIST
73971: PUSH
73972: LD_INT 2
73974: NEG
73975: PUSH
73976: LD_INT 5
73978: NEG
73979: PUSH
73980: EMPTY
73981: LIST
73982: LIST
73983: PUSH
73984: LD_INT 3
73986: PUSH
73987: LD_INT 0
73989: PUSH
73990: EMPTY
73991: LIST
73992: LIST
73993: PUSH
73994: LD_INT 3
73996: PUSH
73997: LD_INT 1
73999: NEG
74000: PUSH
74001: EMPTY
74002: LIST
74003: LIST
74004: PUSH
74005: LD_INT 4
74007: PUSH
74008: LD_INT 0
74010: PUSH
74011: EMPTY
74012: LIST
74013: LIST
74014: PUSH
74015: LD_INT 4
74017: PUSH
74018: LD_INT 1
74020: PUSH
74021: EMPTY
74022: LIST
74023: LIST
74024: PUSH
74025: LD_INT 3
74027: PUSH
74028: LD_INT 1
74030: PUSH
74031: EMPTY
74032: LIST
74033: LIST
74034: PUSH
74035: LD_INT 2
74037: PUSH
74038: LD_INT 0
74040: PUSH
74041: EMPTY
74042: LIST
74043: LIST
74044: PUSH
74045: LD_INT 2
74047: PUSH
74048: LD_INT 1
74050: NEG
74051: PUSH
74052: EMPTY
74053: LIST
74054: LIST
74055: PUSH
74056: LD_INT 2
74058: PUSH
74059: LD_INT 2
74061: NEG
74062: PUSH
74063: EMPTY
74064: LIST
74065: LIST
74066: PUSH
74067: LD_INT 4
74069: PUSH
74070: LD_INT 2
74072: PUSH
74073: EMPTY
74074: LIST
74075: LIST
74076: PUSH
74077: LD_INT 4
74079: PUSH
74080: LD_INT 4
74082: PUSH
74083: EMPTY
74084: LIST
74085: LIST
74086: PUSH
74087: LD_INT 4
74089: PUSH
74090: LD_INT 3
74092: PUSH
74093: EMPTY
74094: LIST
74095: LIST
74096: PUSH
74097: LD_INT 5
74099: PUSH
74100: LD_INT 4
74102: PUSH
74103: EMPTY
74104: LIST
74105: LIST
74106: PUSH
74107: LD_INT 5
74109: PUSH
74110: LD_INT 5
74112: PUSH
74113: EMPTY
74114: LIST
74115: LIST
74116: PUSH
74117: LD_INT 4
74119: PUSH
74120: LD_INT 5
74122: PUSH
74123: EMPTY
74124: LIST
74125: LIST
74126: PUSH
74127: LD_INT 3
74129: PUSH
74130: LD_INT 4
74132: PUSH
74133: EMPTY
74134: LIST
74135: LIST
74136: PUSH
74137: LD_INT 3
74139: PUSH
74140: LD_INT 3
74142: PUSH
74143: EMPTY
74144: LIST
74145: LIST
74146: PUSH
74147: LD_INT 5
74149: PUSH
74150: LD_INT 3
74152: PUSH
74153: EMPTY
74154: LIST
74155: LIST
74156: PUSH
74157: LD_INT 3
74159: PUSH
74160: LD_INT 5
74162: PUSH
74163: EMPTY
74164: LIST
74165: LIST
74166: PUSH
74167: LD_INT 0
74169: PUSH
74170: LD_INT 3
74172: PUSH
74173: EMPTY
74174: LIST
74175: LIST
74176: PUSH
74177: LD_INT 0
74179: PUSH
74180: LD_INT 2
74182: PUSH
74183: EMPTY
74184: LIST
74185: LIST
74186: PUSH
74187: LD_INT 1
74189: PUSH
74190: LD_INT 3
74192: PUSH
74193: EMPTY
74194: LIST
74195: LIST
74196: PUSH
74197: LD_INT 1
74199: PUSH
74200: LD_INT 4
74202: PUSH
74203: EMPTY
74204: LIST
74205: LIST
74206: PUSH
74207: LD_INT 0
74209: PUSH
74210: LD_INT 4
74212: PUSH
74213: EMPTY
74214: LIST
74215: LIST
74216: PUSH
74217: LD_INT 1
74219: NEG
74220: PUSH
74221: LD_INT 3
74223: PUSH
74224: EMPTY
74225: LIST
74226: LIST
74227: PUSH
74228: LD_INT 1
74230: NEG
74231: PUSH
74232: LD_INT 2
74234: PUSH
74235: EMPTY
74236: LIST
74237: LIST
74238: PUSH
74239: LD_INT 2
74241: PUSH
74242: LD_INT 4
74244: PUSH
74245: EMPTY
74246: LIST
74247: LIST
74248: PUSH
74249: LD_INT 2
74251: NEG
74252: PUSH
74253: LD_INT 2
74255: PUSH
74256: EMPTY
74257: LIST
74258: LIST
74259: PUSH
74260: LD_INT 4
74262: NEG
74263: PUSH
74264: LD_INT 0
74266: PUSH
74267: EMPTY
74268: LIST
74269: LIST
74270: PUSH
74271: LD_INT 4
74273: NEG
74274: PUSH
74275: LD_INT 1
74277: NEG
74278: PUSH
74279: EMPTY
74280: LIST
74281: LIST
74282: PUSH
74283: LD_INT 3
74285: NEG
74286: PUSH
74287: LD_INT 0
74289: PUSH
74290: EMPTY
74291: LIST
74292: LIST
74293: PUSH
74294: LD_INT 3
74296: NEG
74297: PUSH
74298: LD_INT 1
74300: PUSH
74301: EMPTY
74302: LIST
74303: LIST
74304: PUSH
74305: LD_INT 4
74307: NEG
74308: PUSH
74309: LD_INT 1
74311: PUSH
74312: EMPTY
74313: LIST
74314: LIST
74315: PUSH
74316: LD_INT 5
74318: NEG
74319: PUSH
74320: LD_INT 0
74322: PUSH
74323: EMPTY
74324: LIST
74325: LIST
74326: PUSH
74327: LD_INT 5
74329: NEG
74330: PUSH
74331: LD_INT 1
74333: NEG
74334: PUSH
74335: EMPTY
74336: LIST
74337: LIST
74338: PUSH
74339: LD_INT 5
74341: NEG
74342: PUSH
74343: LD_INT 2
74345: NEG
74346: PUSH
74347: EMPTY
74348: LIST
74349: LIST
74350: PUSH
74351: LD_INT 3
74353: NEG
74354: PUSH
74355: LD_INT 2
74357: PUSH
74358: EMPTY
74359: LIST
74360: LIST
74361: PUSH
74362: EMPTY
74363: LIST
74364: LIST
74365: LIST
74366: LIST
74367: LIST
74368: LIST
74369: LIST
74370: LIST
74371: LIST
74372: LIST
74373: LIST
74374: LIST
74375: LIST
74376: LIST
74377: LIST
74378: LIST
74379: LIST
74380: LIST
74381: LIST
74382: LIST
74383: LIST
74384: LIST
74385: LIST
74386: LIST
74387: LIST
74388: LIST
74389: LIST
74390: LIST
74391: LIST
74392: LIST
74393: LIST
74394: LIST
74395: LIST
74396: LIST
74397: LIST
74398: LIST
74399: LIST
74400: LIST
74401: LIST
74402: LIST
74403: LIST
74404: LIST
74405: LIST
74406: LIST
74407: LIST
74408: ST_TO_ADDR
// end ; end ;
74409: GO 74412
74411: POP
// case btype of b_depot , b_warehouse :
74412: LD_VAR 0 1
74416: PUSH
74417: LD_INT 0
74419: DOUBLE
74420: EQUAL
74421: IFTRUE 74431
74423: LD_INT 1
74425: DOUBLE
74426: EQUAL
74427: IFTRUE 74431
74429: GO 74632
74431: POP
// case nation of nation_american :
74432: LD_VAR 0 5
74436: PUSH
74437: LD_INT 1
74439: DOUBLE
74440: EQUAL
74441: IFTRUE 74445
74443: GO 74501
74445: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
74446: LD_ADDR_VAR 0 9
74450: PUSH
74451: LD_VAR 0 11
74455: PUSH
74456: LD_VAR 0 12
74460: PUSH
74461: LD_VAR 0 13
74465: PUSH
74466: LD_VAR 0 14
74470: PUSH
74471: LD_VAR 0 15
74475: PUSH
74476: LD_VAR 0 16
74480: PUSH
74481: EMPTY
74482: LIST
74483: LIST
74484: LIST
74485: LIST
74486: LIST
74487: LIST
74488: PUSH
74489: LD_VAR 0 4
74493: PUSH
74494: LD_INT 1
74496: PLUS
74497: ARRAY
74498: ST_TO_ADDR
74499: GO 74630
74501: LD_INT 2
74503: DOUBLE
74504: EQUAL
74505: IFTRUE 74509
74507: GO 74565
74509: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
74510: LD_ADDR_VAR 0 9
74514: PUSH
74515: LD_VAR 0 17
74519: PUSH
74520: LD_VAR 0 18
74524: PUSH
74525: LD_VAR 0 19
74529: PUSH
74530: LD_VAR 0 20
74534: PUSH
74535: LD_VAR 0 21
74539: PUSH
74540: LD_VAR 0 22
74544: PUSH
74545: EMPTY
74546: LIST
74547: LIST
74548: LIST
74549: LIST
74550: LIST
74551: LIST
74552: PUSH
74553: LD_VAR 0 4
74557: PUSH
74558: LD_INT 1
74560: PLUS
74561: ARRAY
74562: ST_TO_ADDR
74563: GO 74630
74565: LD_INT 3
74567: DOUBLE
74568: EQUAL
74569: IFTRUE 74573
74571: GO 74629
74573: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
74574: LD_ADDR_VAR 0 9
74578: PUSH
74579: LD_VAR 0 23
74583: PUSH
74584: LD_VAR 0 24
74588: PUSH
74589: LD_VAR 0 25
74593: PUSH
74594: LD_VAR 0 26
74598: PUSH
74599: LD_VAR 0 27
74603: PUSH
74604: LD_VAR 0 28
74608: PUSH
74609: EMPTY
74610: LIST
74611: LIST
74612: LIST
74613: LIST
74614: LIST
74615: LIST
74616: PUSH
74617: LD_VAR 0 4
74621: PUSH
74622: LD_INT 1
74624: PLUS
74625: ARRAY
74626: ST_TO_ADDR
74627: GO 74630
74629: POP
74630: GO 75185
74632: LD_INT 2
74634: DOUBLE
74635: EQUAL
74636: IFTRUE 74646
74638: LD_INT 3
74640: DOUBLE
74641: EQUAL
74642: IFTRUE 74646
74644: GO 74702
74646: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
74647: LD_ADDR_VAR 0 9
74651: PUSH
74652: LD_VAR 0 29
74656: PUSH
74657: LD_VAR 0 30
74661: PUSH
74662: LD_VAR 0 31
74666: PUSH
74667: LD_VAR 0 32
74671: PUSH
74672: LD_VAR 0 33
74676: PUSH
74677: LD_VAR 0 34
74681: PUSH
74682: EMPTY
74683: LIST
74684: LIST
74685: LIST
74686: LIST
74687: LIST
74688: LIST
74689: PUSH
74690: LD_VAR 0 4
74694: PUSH
74695: LD_INT 1
74697: PLUS
74698: ARRAY
74699: ST_TO_ADDR
74700: GO 75185
74702: LD_INT 16
74704: DOUBLE
74705: EQUAL
74706: IFTRUE 74764
74708: LD_INT 17
74710: DOUBLE
74711: EQUAL
74712: IFTRUE 74764
74714: LD_INT 18
74716: DOUBLE
74717: EQUAL
74718: IFTRUE 74764
74720: LD_INT 19
74722: DOUBLE
74723: EQUAL
74724: IFTRUE 74764
74726: LD_INT 22
74728: DOUBLE
74729: EQUAL
74730: IFTRUE 74764
74732: LD_INT 20
74734: DOUBLE
74735: EQUAL
74736: IFTRUE 74764
74738: LD_INT 21
74740: DOUBLE
74741: EQUAL
74742: IFTRUE 74764
74744: LD_INT 23
74746: DOUBLE
74747: EQUAL
74748: IFTRUE 74764
74750: LD_INT 24
74752: DOUBLE
74753: EQUAL
74754: IFTRUE 74764
74756: LD_INT 25
74758: DOUBLE
74759: EQUAL
74760: IFTRUE 74764
74762: GO 74820
74764: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
74765: LD_ADDR_VAR 0 9
74769: PUSH
74770: LD_VAR 0 35
74774: PUSH
74775: LD_VAR 0 36
74779: PUSH
74780: LD_VAR 0 37
74784: PUSH
74785: LD_VAR 0 38
74789: PUSH
74790: LD_VAR 0 39
74794: PUSH
74795: LD_VAR 0 40
74799: PUSH
74800: EMPTY
74801: LIST
74802: LIST
74803: LIST
74804: LIST
74805: LIST
74806: LIST
74807: PUSH
74808: LD_VAR 0 4
74812: PUSH
74813: LD_INT 1
74815: PLUS
74816: ARRAY
74817: ST_TO_ADDR
74818: GO 75185
74820: LD_INT 6
74822: DOUBLE
74823: EQUAL
74824: IFTRUE 74876
74826: LD_INT 7
74828: DOUBLE
74829: EQUAL
74830: IFTRUE 74876
74832: LD_INT 8
74834: DOUBLE
74835: EQUAL
74836: IFTRUE 74876
74838: LD_INT 13
74840: DOUBLE
74841: EQUAL
74842: IFTRUE 74876
74844: LD_INT 12
74846: DOUBLE
74847: EQUAL
74848: IFTRUE 74876
74850: LD_INT 15
74852: DOUBLE
74853: EQUAL
74854: IFTRUE 74876
74856: LD_INT 11
74858: DOUBLE
74859: EQUAL
74860: IFTRUE 74876
74862: LD_INT 14
74864: DOUBLE
74865: EQUAL
74866: IFTRUE 74876
74868: LD_INT 10
74870: DOUBLE
74871: EQUAL
74872: IFTRUE 74876
74874: GO 74932
74876: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
74877: LD_ADDR_VAR 0 9
74881: PUSH
74882: LD_VAR 0 41
74886: PUSH
74887: LD_VAR 0 42
74891: PUSH
74892: LD_VAR 0 43
74896: PUSH
74897: LD_VAR 0 44
74901: PUSH
74902: LD_VAR 0 45
74906: PUSH
74907: LD_VAR 0 46
74911: PUSH
74912: EMPTY
74913: LIST
74914: LIST
74915: LIST
74916: LIST
74917: LIST
74918: LIST
74919: PUSH
74920: LD_VAR 0 4
74924: PUSH
74925: LD_INT 1
74927: PLUS
74928: ARRAY
74929: ST_TO_ADDR
74930: GO 75185
74932: LD_INT 36
74934: DOUBLE
74935: EQUAL
74936: IFTRUE 74940
74938: GO 74996
74940: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
74941: LD_ADDR_VAR 0 9
74945: PUSH
74946: LD_VAR 0 47
74950: PUSH
74951: LD_VAR 0 48
74955: PUSH
74956: LD_VAR 0 49
74960: PUSH
74961: LD_VAR 0 50
74965: PUSH
74966: LD_VAR 0 51
74970: PUSH
74971: LD_VAR 0 52
74975: PUSH
74976: EMPTY
74977: LIST
74978: LIST
74979: LIST
74980: LIST
74981: LIST
74982: LIST
74983: PUSH
74984: LD_VAR 0 4
74988: PUSH
74989: LD_INT 1
74991: PLUS
74992: ARRAY
74993: ST_TO_ADDR
74994: GO 75185
74996: LD_INT 4
74998: DOUBLE
74999: EQUAL
75000: IFTRUE 75022
75002: LD_INT 5
75004: DOUBLE
75005: EQUAL
75006: IFTRUE 75022
75008: LD_INT 34
75010: DOUBLE
75011: EQUAL
75012: IFTRUE 75022
75014: LD_INT 37
75016: DOUBLE
75017: EQUAL
75018: IFTRUE 75022
75020: GO 75078
75022: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
75023: LD_ADDR_VAR 0 9
75027: PUSH
75028: LD_VAR 0 53
75032: PUSH
75033: LD_VAR 0 54
75037: PUSH
75038: LD_VAR 0 55
75042: PUSH
75043: LD_VAR 0 56
75047: PUSH
75048: LD_VAR 0 57
75052: PUSH
75053: LD_VAR 0 58
75057: PUSH
75058: EMPTY
75059: LIST
75060: LIST
75061: LIST
75062: LIST
75063: LIST
75064: LIST
75065: PUSH
75066: LD_VAR 0 4
75070: PUSH
75071: LD_INT 1
75073: PLUS
75074: ARRAY
75075: ST_TO_ADDR
75076: GO 75185
75078: LD_INT 31
75080: DOUBLE
75081: EQUAL
75082: IFTRUE 75128
75084: LD_INT 32
75086: DOUBLE
75087: EQUAL
75088: IFTRUE 75128
75090: LD_INT 33
75092: DOUBLE
75093: EQUAL
75094: IFTRUE 75128
75096: LD_INT 27
75098: DOUBLE
75099: EQUAL
75100: IFTRUE 75128
75102: LD_INT 26
75104: DOUBLE
75105: EQUAL
75106: IFTRUE 75128
75108: LD_INT 28
75110: DOUBLE
75111: EQUAL
75112: IFTRUE 75128
75114: LD_INT 29
75116: DOUBLE
75117: EQUAL
75118: IFTRUE 75128
75120: LD_INT 30
75122: DOUBLE
75123: EQUAL
75124: IFTRUE 75128
75126: GO 75184
75128: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
75129: LD_ADDR_VAR 0 9
75133: PUSH
75134: LD_VAR 0 59
75138: PUSH
75139: LD_VAR 0 60
75143: PUSH
75144: LD_VAR 0 61
75148: PUSH
75149: LD_VAR 0 62
75153: PUSH
75154: LD_VAR 0 63
75158: PUSH
75159: LD_VAR 0 64
75163: PUSH
75164: EMPTY
75165: LIST
75166: LIST
75167: LIST
75168: LIST
75169: LIST
75170: LIST
75171: PUSH
75172: LD_VAR 0 4
75176: PUSH
75177: LD_INT 1
75179: PLUS
75180: ARRAY
75181: ST_TO_ADDR
75182: GO 75185
75184: POP
// temp_list2 = [ ] ;
75185: LD_ADDR_VAR 0 10
75189: PUSH
75190: EMPTY
75191: ST_TO_ADDR
// for i in temp_list do
75192: LD_ADDR_VAR 0 8
75196: PUSH
75197: LD_VAR 0 9
75201: PUSH
75202: FOR_IN
75203: IFFALSE 75255
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
75205: LD_ADDR_VAR 0 10
75209: PUSH
75210: LD_VAR 0 10
75214: PUSH
75215: LD_VAR 0 8
75219: PUSH
75220: LD_INT 1
75222: ARRAY
75223: PUSH
75224: LD_VAR 0 2
75228: PLUS
75229: PUSH
75230: LD_VAR 0 8
75234: PUSH
75235: LD_INT 2
75237: ARRAY
75238: PUSH
75239: LD_VAR 0 3
75243: PLUS
75244: PUSH
75245: EMPTY
75246: LIST
75247: LIST
75248: PUSH
75249: EMPTY
75250: LIST
75251: ADD
75252: ST_TO_ADDR
75253: GO 75202
75255: POP
75256: POP
// result = temp_list2 ;
75257: LD_ADDR_VAR 0 7
75261: PUSH
75262: LD_VAR 0 10
75266: ST_TO_ADDR
// end ;
75267: LD_VAR 0 7
75271: RET
// export function EnemyInRange ( unit , dist ) ; begin
75272: LD_INT 0
75274: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
75275: LD_ADDR_VAR 0 3
75279: PUSH
75280: LD_VAR 0 1
75284: PPUSH
75285: CALL_OW 255
75289: PPUSH
75290: LD_VAR 0 1
75294: PPUSH
75295: CALL_OW 250
75299: PPUSH
75300: LD_VAR 0 1
75304: PPUSH
75305: CALL_OW 251
75309: PPUSH
75310: LD_VAR 0 2
75314: PPUSH
75315: CALL 48645 0 4
75319: PUSH
75320: LD_INT 4
75322: ARRAY
75323: ST_TO_ADDR
// end ;
75324: LD_VAR 0 3
75328: RET
// export function PlayerSeeMe ( unit ) ; begin
75329: LD_INT 0
75331: PPUSH
// result := See ( your_side , unit ) ;
75332: LD_ADDR_VAR 0 2
75336: PUSH
75337: LD_OWVAR 2
75341: PPUSH
75342: LD_VAR 0 1
75346: PPUSH
75347: CALL_OW 292
75351: ST_TO_ADDR
// end ;
75352: LD_VAR 0 2
75356: RET
// export function ReverseDir ( unit ) ; begin
75357: LD_INT 0
75359: PPUSH
// if not unit then
75360: LD_VAR 0 1
75364: NOT
75365: IFFALSE 75369
// exit ;
75367: GO 75392
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
75369: LD_ADDR_VAR 0 2
75373: PUSH
75374: LD_VAR 0 1
75378: PPUSH
75379: CALL_OW 254
75383: PUSH
75384: LD_INT 3
75386: PLUS
75387: PUSH
75388: LD_INT 6
75390: MOD
75391: ST_TO_ADDR
// end ;
75392: LD_VAR 0 2
75396: RET
// export function ReverseArray ( array ) ; var i ; begin
75397: LD_INT 0
75399: PPUSH
75400: PPUSH
// if not array then
75401: LD_VAR 0 1
75405: NOT
75406: IFFALSE 75410
// exit ;
75408: GO 75465
// result := [ ] ;
75410: LD_ADDR_VAR 0 2
75414: PUSH
75415: EMPTY
75416: ST_TO_ADDR
// for i := array downto 1 do
75417: LD_ADDR_VAR 0 3
75421: PUSH
75422: DOUBLE
75423: LD_VAR 0 1
75427: INC
75428: ST_TO_ADDR
75429: LD_INT 1
75431: PUSH
75432: FOR_DOWNTO
75433: IFFALSE 75463
// result := Join ( result , array [ i ] ) ;
75435: LD_ADDR_VAR 0 2
75439: PUSH
75440: LD_VAR 0 2
75444: PPUSH
75445: LD_VAR 0 1
75449: PUSH
75450: LD_VAR 0 3
75454: ARRAY
75455: PPUSH
75456: CALL 80110 0 2
75460: ST_TO_ADDR
75461: GO 75432
75463: POP
75464: POP
// end ;
75465: LD_VAR 0 2
75469: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
75470: LD_INT 0
75472: PPUSH
75473: PPUSH
75474: PPUSH
75475: PPUSH
75476: PPUSH
75477: PPUSH
// if not unit or not hexes then
75478: LD_VAR 0 1
75482: NOT
75483: PUSH
75484: LD_VAR 0 2
75488: NOT
75489: OR
75490: IFFALSE 75494
// exit ;
75492: GO 75617
// dist := 9999 ;
75494: LD_ADDR_VAR 0 5
75498: PUSH
75499: LD_INT 9999
75501: ST_TO_ADDR
// for i = 1 to hexes do
75502: LD_ADDR_VAR 0 4
75506: PUSH
75507: DOUBLE
75508: LD_INT 1
75510: DEC
75511: ST_TO_ADDR
75512: LD_VAR 0 2
75516: PUSH
75517: FOR_TO
75518: IFFALSE 75605
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
75520: LD_ADDR_VAR 0 6
75524: PUSH
75525: LD_VAR 0 1
75529: PPUSH
75530: LD_VAR 0 2
75534: PUSH
75535: LD_VAR 0 4
75539: ARRAY
75540: PUSH
75541: LD_INT 1
75543: ARRAY
75544: PPUSH
75545: LD_VAR 0 2
75549: PUSH
75550: LD_VAR 0 4
75554: ARRAY
75555: PUSH
75556: LD_INT 2
75558: ARRAY
75559: PPUSH
75560: CALL_OW 297
75564: ST_TO_ADDR
// if tdist < dist then
75565: LD_VAR 0 6
75569: PUSH
75570: LD_VAR 0 5
75574: LESS
75575: IFFALSE 75603
// begin hex := hexes [ i ] ;
75577: LD_ADDR_VAR 0 8
75581: PUSH
75582: LD_VAR 0 2
75586: PUSH
75587: LD_VAR 0 4
75591: ARRAY
75592: ST_TO_ADDR
// dist := tdist ;
75593: LD_ADDR_VAR 0 5
75597: PUSH
75598: LD_VAR 0 6
75602: ST_TO_ADDR
// end ; end ;
75603: GO 75517
75605: POP
75606: POP
// result := hex ;
75607: LD_ADDR_VAR 0 3
75611: PUSH
75612: LD_VAR 0 8
75616: ST_TO_ADDR
// end ;
75617: LD_VAR 0 3
75621: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
75622: LD_INT 0
75624: PPUSH
75625: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
75626: LD_VAR 0 1
75630: NOT
75631: PUSH
75632: LD_VAR 0 1
75636: PUSH
75637: LD_INT 21
75639: PUSH
75640: LD_INT 2
75642: PUSH
75643: EMPTY
75644: LIST
75645: LIST
75646: PUSH
75647: LD_INT 23
75649: PUSH
75650: LD_INT 2
75652: PUSH
75653: EMPTY
75654: LIST
75655: LIST
75656: PUSH
75657: EMPTY
75658: LIST
75659: LIST
75660: PPUSH
75661: CALL_OW 69
75665: IN
75666: NOT
75667: OR
75668: IFFALSE 75672
// exit ;
75670: GO 75719
// for i = 1 to 3 do
75672: LD_ADDR_VAR 0 3
75676: PUSH
75677: DOUBLE
75678: LD_INT 1
75680: DEC
75681: ST_TO_ADDR
75682: LD_INT 3
75684: PUSH
75685: FOR_TO
75686: IFFALSE 75717
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
75688: LD_VAR 0 1
75692: PPUSH
75693: CALL_OW 250
75697: PPUSH
75698: LD_VAR 0 1
75702: PPUSH
75703: CALL_OW 251
75707: PPUSH
75708: LD_INT 1
75710: PPUSH
75711: CALL_OW 453
75715: GO 75685
75717: POP
75718: POP
// end ;
75719: LD_VAR 0 2
75723: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
75724: LD_INT 0
75726: PPUSH
75727: PPUSH
75728: PPUSH
75729: PPUSH
75730: PPUSH
75731: PPUSH
// if not unit or not enemy_unit then
75732: LD_VAR 0 1
75736: NOT
75737: PUSH
75738: LD_VAR 0 2
75742: NOT
75743: OR
75744: IFFALSE 75748
// exit ;
75746: GO 76215
// if GetLives ( i ) < 250 then
75748: LD_VAR 0 4
75752: PPUSH
75753: CALL_OW 256
75757: PUSH
75758: LD_INT 250
75760: LESS
75761: IFFALSE 75774
// begin ComAutodestruct ( i ) ;
75763: LD_VAR 0 4
75767: PPUSH
75768: CALL 75622 0 1
// exit ;
75772: GO 76215
// end ; x := GetX ( enemy_unit ) ;
75774: LD_ADDR_VAR 0 7
75778: PUSH
75779: LD_VAR 0 2
75783: PPUSH
75784: CALL_OW 250
75788: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
75789: LD_ADDR_VAR 0 8
75793: PUSH
75794: LD_VAR 0 2
75798: PPUSH
75799: CALL_OW 251
75803: ST_TO_ADDR
// if not x or not y then
75804: LD_VAR 0 7
75808: NOT
75809: PUSH
75810: LD_VAR 0 8
75814: NOT
75815: OR
75816: IFFALSE 75820
// exit ;
75818: GO 76215
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
75820: LD_ADDR_VAR 0 6
75824: PUSH
75825: LD_VAR 0 7
75829: PPUSH
75830: LD_INT 0
75832: PPUSH
75833: LD_INT 4
75835: PPUSH
75836: CALL_OW 272
75840: PUSH
75841: LD_VAR 0 8
75845: PPUSH
75846: LD_INT 0
75848: PPUSH
75849: LD_INT 4
75851: PPUSH
75852: CALL_OW 273
75856: PUSH
75857: EMPTY
75858: LIST
75859: LIST
75860: PUSH
75861: LD_VAR 0 7
75865: PPUSH
75866: LD_INT 1
75868: PPUSH
75869: LD_INT 4
75871: PPUSH
75872: CALL_OW 272
75876: PUSH
75877: LD_VAR 0 8
75881: PPUSH
75882: LD_INT 1
75884: PPUSH
75885: LD_INT 4
75887: PPUSH
75888: CALL_OW 273
75892: PUSH
75893: EMPTY
75894: LIST
75895: LIST
75896: PUSH
75897: LD_VAR 0 7
75901: PPUSH
75902: LD_INT 2
75904: PPUSH
75905: LD_INT 4
75907: PPUSH
75908: CALL_OW 272
75912: PUSH
75913: LD_VAR 0 8
75917: PPUSH
75918: LD_INT 2
75920: PPUSH
75921: LD_INT 4
75923: PPUSH
75924: CALL_OW 273
75928: PUSH
75929: EMPTY
75930: LIST
75931: LIST
75932: PUSH
75933: LD_VAR 0 7
75937: PPUSH
75938: LD_INT 3
75940: PPUSH
75941: LD_INT 4
75943: PPUSH
75944: CALL_OW 272
75948: PUSH
75949: LD_VAR 0 8
75953: PPUSH
75954: LD_INT 3
75956: PPUSH
75957: LD_INT 4
75959: PPUSH
75960: CALL_OW 273
75964: PUSH
75965: EMPTY
75966: LIST
75967: LIST
75968: PUSH
75969: LD_VAR 0 7
75973: PPUSH
75974: LD_INT 4
75976: PPUSH
75977: LD_INT 4
75979: PPUSH
75980: CALL_OW 272
75984: PUSH
75985: LD_VAR 0 8
75989: PPUSH
75990: LD_INT 4
75992: PPUSH
75993: LD_INT 4
75995: PPUSH
75996: CALL_OW 273
76000: PUSH
76001: EMPTY
76002: LIST
76003: LIST
76004: PUSH
76005: LD_VAR 0 7
76009: PPUSH
76010: LD_INT 5
76012: PPUSH
76013: LD_INT 4
76015: PPUSH
76016: CALL_OW 272
76020: PUSH
76021: LD_VAR 0 8
76025: PPUSH
76026: LD_INT 5
76028: PPUSH
76029: LD_INT 4
76031: PPUSH
76032: CALL_OW 273
76036: PUSH
76037: EMPTY
76038: LIST
76039: LIST
76040: PUSH
76041: EMPTY
76042: LIST
76043: LIST
76044: LIST
76045: LIST
76046: LIST
76047: LIST
76048: ST_TO_ADDR
// for i = tmp downto 1 do
76049: LD_ADDR_VAR 0 4
76053: PUSH
76054: DOUBLE
76055: LD_VAR 0 6
76059: INC
76060: ST_TO_ADDR
76061: LD_INT 1
76063: PUSH
76064: FOR_DOWNTO
76065: IFFALSE 76166
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
76067: LD_VAR 0 6
76071: PUSH
76072: LD_VAR 0 4
76076: ARRAY
76077: PUSH
76078: LD_INT 1
76080: ARRAY
76081: PPUSH
76082: LD_VAR 0 6
76086: PUSH
76087: LD_VAR 0 4
76091: ARRAY
76092: PUSH
76093: LD_INT 2
76095: ARRAY
76096: PPUSH
76097: CALL_OW 488
76101: NOT
76102: PUSH
76103: LD_VAR 0 6
76107: PUSH
76108: LD_VAR 0 4
76112: ARRAY
76113: PUSH
76114: LD_INT 1
76116: ARRAY
76117: PPUSH
76118: LD_VAR 0 6
76122: PUSH
76123: LD_VAR 0 4
76127: ARRAY
76128: PUSH
76129: LD_INT 2
76131: ARRAY
76132: PPUSH
76133: CALL_OW 428
76137: PUSH
76138: LD_INT 0
76140: NONEQUAL
76141: OR
76142: IFFALSE 76164
// tmp := Delete ( tmp , i ) ;
76144: LD_ADDR_VAR 0 6
76148: PUSH
76149: LD_VAR 0 6
76153: PPUSH
76154: LD_VAR 0 4
76158: PPUSH
76159: CALL_OW 3
76163: ST_TO_ADDR
76164: GO 76064
76166: POP
76167: POP
// j := GetClosestHex ( unit , tmp ) ;
76168: LD_ADDR_VAR 0 5
76172: PUSH
76173: LD_VAR 0 1
76177: PPUSH
76178: LD_VAR 0 6
76182: PPUSH
76183: CALL 75470 0 2
76187: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
76188: LD_VAR 0 1
76192: PPUSH
76193: LD_VAR 0 5
76197: PUSH
76198: LD_INT 1
76200: ARRAY
76201: PPUSH
76202: LD_VAR 0 5
76206: PUSH
76207: LD_INT 2
76209: ARRAY
76210: PPUSH
76211: CALL_OW 111
// end ;
76215: LD_VAR 0 3
76219: RET
// export function PrepareApemanSoldier ( ) ; begin
76220: LD_INT 0
76222: PPUSH
// uc_nation := 0 ;
76223: LD_ADDR_OWVAR 21
76227: PUSH
76228: LD_INT 0
76230: ST_TO_ADDR
// hc_sex := sex_male ;
76231: LD_ADDR_OWVAR 27
76235: PUSH
76236: LD_INT 1
76238: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
76239: LD_ADDR_OWVAR 28
76243: PUSH
76244: LD_INT 15
76246: ST_TO_ADDR
// hc_gallery :=  ;
76247: LD_ADDR_OWVAR 33
76251: PUSH
76252: LD_STRING 
76254: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76255: LD_ADDR_OWVAR 31
76259: PUSH
76260: LD_INT 0
76262: PPUSH
76263: LD_INT 3
76265: PPUSH
76266: CALL_OW 12
76270: PUSH
76271: LD_INT 0
76273: PPUSH
76274: LD_INT 3
76276: PPUSH
76277: CALL_OW 12
76281: PUSH
76282: LD_INT 0
76284: PUSH
76285: LD_INT 0
76287: PUSH
76288: EMPTY
76289: LIST
76290: LIST
76291: LIST
76292: LIST
76293: ST_TO_ADDR
// end ;
76294: LD_VAR 0 1
76298: RET
// export function PrepareApemanEngineer ( ) ; begin
76299: LD_INT 0
76301: PPUSH
// uc_nation := 0 ;
76302: LD_ADDR_OWVAR 21
76306: PUSH
76307: LD_INT 0
76309: ST_TO_ADDR
// hc_sex := sex_male ;
76310: LD_ADDR_OWVAR 27
76314: PUSH
76315: LD_INT 1
76317: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
76318: LD_ADDR_OWVAR 28
76322: PUSH
76323: LD_INT 16
76325: ST_TO_ADDR
// hc_gallery :=  ;
76326: LD_ADDR_OWVAR 33
76330: PUSH
76331: LD_STRING 
76333: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76334: LD_ADDR_OWVAR 31
76338: PUSH
76339: LD_INT 0
76341: PPUSH
76342: LD_INT 3
76344: PPUSH
76345: CALL_OW 12
76349: PUSH
76350: LD_INT 0
76352: PPUSH
76353: LD_INT 3
76355: PPUSH
76356: CALL_OW 12
76360: PUSH
76361: LD_INT 0
76363: PUSH
76364: LD_INT 0
76366: PUSH
76367: EMPTY
76368: LIST
76369: LIST
76370: LIST
76371: LIST
76372: ST_TO_ADDR
// end ;
76373: LD_VAR 0 1
76377: RET
// export function PrepareApeman ( agressivity ) ; begin
76378: LD_INT 0
76380: PPUSH
// uc_side := 0 ;
76381: LD_ADDR_OWVAR 20
76385: PUSH
76386: LD_INT 0
76388: ST_TO_ADDR
// uc_nation := 0 ;
76389: LD_ADDR_OWVAR 21
76393: PUSH
76394: LD_INT 0
76396: ST_TO_ADDR
// hc_sex := sex_male ;
76397: LD_ADDR_OWVAR 27
76401: PUSH
76402: LD_INT 1
76404: ST_TO_ADDR
// hc_class := class_apeman ;
76405: LD_ADDR_OWVAR 28
76409: PUSH
76410: LD_INT 12
76412: ST_TO_ADDR
// hc_gallery :=  ;
76413: LD_ADDR_OWVAR 33
76417: PUSH
76418: LD_STRING 
76420: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
76421: LD_ADDR_OWVAR 35
76425: PUSH
76426: LD_VAR 0 1
76430: NEG
76431: PPUSH
76432: LD_VAR 0 1
76436: PPUSH
76437: CALL_OW 12
76441: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
76442: LD_ADDR_OWVAR 31
76446: PUSH
76447: LD_INT 0
76449: PPUSH
76450: LD_INT 3
76452: PPUSH
76453: CALL_OW 12
76457: PUSH
76458: LD_INT 0
76460: PPUSH
76461: LD_INT 3
76463: PPUSH
76464: CALL_OW 12
76468: PUSH
76469: LD_INT 0
76471: PUSH
76472: LD_INT 0
76474: PUSH
76475: EMPTY
76476: LIST
76477: LIST
76478: LIST
76479: LIST
76480: ST_TO_ADDR
// end ;
76481: LD_VAR 0 2
76485: RET
// export function PrepareTiger ( agressivity ) ; begin
76486: LD_INT 0
76488: PPUSH
// uc_side := 0 ;
76489: LD_ADDR_OWVAR 20
76493: PUSH
76494: LD_INT 0
76496: ST_TO_ADDR
// uc_nation := 0 ;
76497: LD_ADDR_OWVAR 21
76501: PUSH
76502: LD_INT 0
76504: ST_TO_ADDR
// hc_class := class_tiger ;
76505: LD_ADDR_OWVAR 28
76509: PUSH
76510: LD_INT 14
76512: ST_TO_ADDR
// hc_gallery :=  ;
76513: LD_ADDR_OWVAR 33
76517: PUSH
76518: LD_STRING 
76520: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
76521: LD_ADDR_OWVAR 35
76525: PUSH
76526: LD_VAR 0 1
76530: NEG
76531: PPUSH
76532: LD_VAR 0 1
76536: PPUSH
76537: CALL_OW 12
76541: ST_TO_ADDR
// end ;
76542: LD_VAR 0 2
76546: RET
// export function PrepareEnchidna ( ) ; begin
76547: LD_INT 0
76549: PPUSH
// uc_side := 0 ;
76550: LD_ADDR_OWVAR 20
76554: PUSH
76555: LD_INT 0
76557: ST_TO_ADDR
// uc_nation := 0 ;
76558: LD_ADDR_OWVAR 21
76562: PUSH
76563: LD_INT 0
76565: ST_TO_ADDR
// hc_class := class_baggie ;
76566: LD_ADDR_OWVAR 28
76570: PUSH
76571: LD_INT 13
76573: ST_TO_ADDR
// hc_gallery :=  ;
76574: LD_ADDR_OWVAR 33
76578: PUSH
76579: LD_STRING 
76581: ST_TO_ADDR
// end ;
76582: LD_VAR 0 1
76586: RET
// export function PrepareFrog ( ) ; begin
76587: LD_INT 0
76589: PPUSH
// uc_side := 0 ;
76590: LD_ADDR_OWVAR 20
76594: PUSH
76595: LD_INT 0
76597: ST_TO_ADDR
// uc_nation := 0 ;
76598: LD_ADDR_OWVAR 21
76602: PUSH
76603: LD_INT 0
76605: ST_TO_ADDR
// hc_class := class_frog ;
76606: LD_ADDR_OWVAR 28
76610: PUSH
76611: LD_INT 19
76613: ST_TO_ADDR
// hc_gallery :=  ;
76614: LD_ADDR_OWVAR 33
76618: PUSH
76619: LD_STRING 
76621: ST_TO_ADDR
// end ;
76622: LD_VAR 0 1
76626: RET
// export function PrepareFish ( ) ; begin
76627: LD_INT 0
76629: PPUSH
// uc_side := 0 ;
76630: LD_ADDR_OWVAR 20
76634: PUSH
76635: LD_INT 0
76637: ST_TO_ADDR
// uc_nation := 0 ;
76638: LD_ADDR_OWVAR 21
76642: PUSH
76643: LD_INT 0
76645: ST_TO_ADDR
// hc_class := class_fish ;
76646: LD_ADDR_OWVAR 28
76650: PUSH
76651: LD_INT 20
76653: ST_TO_ADDR
// hc_gallery :=  ;
76654: LD_ADDR_OWVAR 33
76658: PUSH
76659: LD_STRING 
76661: ST_TO_ADDR
// end ;
76662: LD_VAR 0 1
76666: RET
// export function PrepareBird ( ) ; begin
76667: LD_INT 0
76669: PPUSH
// uc_side := 0 ;
76670: LD_ADDR_OWVAR 20
76674: PUSH
76675: LD_INT 0
76677: ST_TO_ADDR
// uc_nation := 0 ;
76678: LD_ADDR_OWVAR 21
76682: PUSH
76683: LD_INT 0
76685: ST_TO_ADDR
// hc_class := class_phororhacos ;
76686: LD_ADDR_OWVAR 28
76690: PUSH
76691: LD_INT 18
76693: ST_TO_ADDR
// hc_gallery :=  ;
76694: LD_ADDR_OWVAR 33
76698: PUSH
76699: LD_STRING 
76701: ST_TO_ADDR
// end ;
76702: LD_VAR 0 1
76706: RET
// export function PrepareHorse ( ) ; begin
76707: LD_INT 0
76709: PPUSH
// uc_side := 0 ;
76710: LD_ADDR_OWVAR 20
76714: PUSH
76715: LD_INT 0
76717: ST_TO_ADDR
// uc_nation := 0 ;
76718: LD_ADDR_OWVAR 21
76722: PUSH
76723: LD_INT 0
76725: ST_TO_ADDR
// hc_class := class_horse ;
76726: LD_ADDR_OWVAR 28
76730: PUSH
76731: LD_INT 21
76733: ST_TO_ADDR
// hc_gallery :=  ;
76734: LD_ADDR_OWVAR 33
76738: PUSH
76739: LD_STRING 
76741: ST_TO_ADDR
// end ;
76742: LD_VAR 0 1
76746: RET
// export function PrepareMastodont ( ) ; begin
76747: LD_INT 0
76749: PPUSH
// uc_side := 0 ;
76750: LD_ADDR_OWVAR 20
76754: PUSH
76755: LD_INT 0
76757: ST_TO_ADDR
// uc_nation := 0 ;
76758: LD_ADDR_OWVAR 21
76762: PUSH
76763: LD_INT 0
76765: ST_TO_ADDR
// vc_chassis := class_mastodont ;
76766: LD_ADDR_OWVAR 37
76770: PUSH
76771: LD_INT 31
76773: ST_TO_ADDR
// vc_control := control_rider ;
76774: LD_ADDR_OWVAR 38
76778: PUSH
76779: LD_INT 4
76781: ST_TO_ADDR
// end ;
76782: LD_VAR 0 1
76786: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
76787: LD_INT 0
76789: PPUSH
76790: PPUSH
76791: PPUSH
// uc_side = 0 ;
76792: LD_ADDR_OWVAR 20
76796: PUSH
76797: LD_INT 0
76799: ST_TO_ADDR
// uc_nation = 0 ;
76800: LD_ADDR_OWVAR 21
76804: PUSH
76805: LD_INT 0
76807: ST_TO_ADDR
// InitHc_All ( ) ;
76808: CALL_OW 584
// InitVc ;
76812: CALL_OW 20
// if mastodonts then
76816: LD_VAR 0 6
76820: IFFALSE 76887
// for i = 1 to mastodonts do
76822: LD_ADDR_VAR 0 11
76826: PUSH
76827: DOUBLE
76828: LD_INT 1
76830: DEC
76831: ST_TO_ADDR
76832: LD_VAR 0 6
76836: PUSH
76837: FOR_TO
76838: IFFALSE 76885
// begin vc_chassis := 31 ;
76840: LD_ADDR_OWVAR 37
76844: PUSH
76845: LD_INT 31
76847: ST_TO_ADDR
// vc_control := control_rider ;
76848: LD_ADDR_OWVAR 38
76852: PUSH
76853: LD_INT 4
76855: ST_TO_ADDR
// animal := CreateVehicle ;
76856: LD_ADDR_VAR 0 12
76860: PUSH
76861: CALL_OW 45
76865: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76866: LD_VAR 0 12
76870: PPUSH
76871: LD_VAR 0 8
76875: PPUSH
76876: LD_INT 0
76878: PPUSH
76879: CALL 79015 0 3
// end ;
76883: GO 76837
76885: POP
76886: POP
// if horses then
76887: LD_VAR 0 5
76891: IFFALSE 76958
// for i = 1 to horses do
76893: LD_ADDR_VAR 0 11
76897: PUSH
76898: DOUBLE
76899: LD_INT 1
76901: DEC
76902: ST_TO_ADDR
76903: LD_VAR 0 5
76907: PUSH
76908: FOR_TO
76909: IFFALSE 76956
// begin hc_class := 21 ;
76911: LD_ADDR_OWVAR 28
76915: PUSH
76916: LD_INT 21
76918: ST_TO_ADDR
// hc_gallery :=  ;
76919: LD_ADDR_OWVAR 33
76923: PUSH
76924: LD_STRING 
76926: ST_TO_ADDR
// animal := CreateHuman ;
76927: LD_ADDR_VAR 0 12
76931: PUSH
76932: CALL_OW 44
76936: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
76937: LD_VAR 0 12
76941: PPUSH
76942: LD_VAR 0 8
76946: PPUSH
76947: LD_INT 0
76949: PPUSH
76950: CALL 79015 0 3
// end ;
76954: GO 76908
76956: POP
76957: POP
// if birds then
76958: LD_VAR 0 1
76962: IFFALSE 77029
// for i = 1 to birds do
76964: LD_ADDR_VAR 0 11
76968: PUSH
76969: DOUBLE
76970: LD_INT 1
76972: DEC
76973: ST_TO_ADDR
76974: LD_VAR 0 1
76978: PUSH
76979: FOR_TO
76980: IFFALSE 77027
// begin hc_class := 18 ;
76982: LD_ADDR_OWVAR 28
76986: PUSH
76987: LD_INT 18
76989: ST_TO_ADDR
// hc_gallery =  ;
76990: LD_ADDR_OWVAR 33
76994: PUSH
76995: LD_STRING 
76997: ST_TO_ADDR
// animal := CreateHuman ;
76998: LD_ADDR_VAR 0 12
77002: PUSH
77003: CALL_OW 44
77007: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77008: LD_VAR 0 12
77012: PPUSH
77013: LD_VAR 0 8
77017: PPUSH
77018: LD_INT 0
77020: PPUSH
77021: CALL 79015 0 3
// end ;
77025: GO 76979
77027: POP
77028: POP
// if tigers then
77029: LD_VAR 0 2
77033: IFFALSE 77117
// for i = 1 to tigers do
77035: LD_ADDR_VAR 0 11
77039: PUSH
77040: DOUBLE
77041: LD_INT 1
77043: DEC
77044: ST_TO_ADDR
77045: LD_VAR 0 2
77049: PUSH
77050: FOR_TO
77051: IFFALSE 77115
// begin hc_class = class_tiger ;
77053: LD_ADDR_OWVAR 28
77057: PUSH
77058: LD_INT 14
77060: ST_TO_ADDR
// hc_gallery =  ;
77061: LD_ADDR_OWVAR 33
77065: PUSH
77066: LD_STRING 
77068: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
77069: LD_ADDR_OWVAR 35
77073: PUSH
77074: LD_INT 7
77076: NEG
77077: PPUSH
77078: LD_INT 7
77080: PPUSH
77081: CALL_OW 12
77085: ST_TO_ADDR
// animal := CreateHuman ;
77086: LD_ADDR_VAR 0 12
77090: PUSH
77091: CALL_OW 44
77095: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77096: LD_VAR 0 12
77100: PPUSH
77101: LD_VAR 0 8
77105: PPUSH
77106: LD_INT 0
77108: PPUSH
77109: CALL 79015 0 3
// end ;
77113: GO 77050
77115: POP
77116: POP
// if apemans then
77117: LD_VAR 0 3
77121: IFFALSE 77244
// for i = 1 to apemans do
77123: LD_ADDR_VAR 0 11
77127: PUSH
77128: DOUBLE
77129: LD_INT 1
77131: DEC
77132: ST_TO_ADDR
77133: LD_VAR 0 3
77137: PUSH
77138: FOR_TO
77139: IFFALSE 77242
// begin hc_class = class_apeman ;
77141: LD_ADDR_OWVAR 28
77145: PUSH
77146: LD_INT 12
77148: ST_TO_ADDR
// hc_gallery =  ;
77149: LD_ADDR_OWVAR 33
77153: PUSH
77154: LD_STRING 
77156: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
77157: LD_ADDR_OWVAR 35
77161: PUSH
77162: LD_INT 2
77164: NEG
77165: PPUSH
77166: LD_INT 2
77168: PPUSH
77169: CALL_OW 12
77173: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
77174: LD_ADDR_OWVAR 31
77178: PUSH
77179: LD_INT 1
77181: PPUSH
77182: LD_INT 3
77184: PPUSH
77185: CALL_OW 12
77189: PUSH
77190: LD_INT 1
77192: PPUSH
77193: LD_INT 3
77195: PPUSH
77196: CALL_OW 12
77200: PUSH
77201: LD_INT 0
77203: PUSH
77204: LD_INT 0
77206: PUSH
77207: EMPTY
77208: LIST
77209: LIST
77210: LIST
77211: LIST
77212: ST_TO_ADDR
// animal := CreateHuman ;
77213: LD_ADDR_VAR 0 12
77217: PUSH
77218: CALL_OW 44
77222: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77223: LD_VAR 0 12
77227: PPUSH
77228: LD_VAR 0 8
77232: PPUSH
77233: LD_INT 0
77235: PPUSH
77236: CALL 79015 0 3
// end ;
77240: GO 77138
77242: POP
77243: POP
// if enchidnas then
77244: LD_VAR 0 4
77248: IFFALSE 77315
// for i = 1 to enchidnas do
77250: LD_ADDR_VAR 0 11
77254: PUSH
77255: DOUBLE
77256: LD_INT 1
77258: DEC
77259: ST_TO_ADDR
77260: LD_VAR 0 4
77264: PUSH
77265: FOR_TO
77266: IFFALSE 77313
// begin hc_class = 13 ;
77268: LD_ADDR_OWVAR 28
77272: PUSH
77273: LD_INT 13
77275: ST_TO_ADDR
// hc_gallery =  ;
77276: LD_ADDR_OWVAR 33
77280: PUSH
77281: LD_STRING 
77283: ST_TO_ADDR
// animal := CreateHuman ;
77284: LD_ADDR_VAR 0 12
77288: PUSH
77289: CALL_OW 44
77293: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77294: LD_VAR 0 12
77298: PPUSH
77299: LD_VAR 0 8
77303: PPUSH
77304: LD_INT 0
77306: PPUSH
77307: CALL 79015 0 3
// end ;
77311: GO 77265
77313: POP
77314: POP
// if fishes then
77315: LD_VAR 0 7
77319: IFFALSE 77386
// for i = 1 to fishes do
77321: LD_ADDR_VAR 0 11
77325: PUSH
77326: DOUBLE
77327: LD_INT 1
77329: DEC
77330: ST_TO_ADDR
77331: LD_VAR 0 7
77335: PUSH
77336: FOR_TO
77337: IFFALSE 77384
// begin hc_class = 20 ;
77339: LD_ADDR_OWVAR 28
77343: PUSH
77344: LD_INT 20
77346: ST_TO_ADDR
// hc_gallery =  ;
77347: LD_ADDR_OWVAR 33
77351: PUSH
77352: LD_STRING 
77354: ST_TO_ADDR
// animal := CreateHuman ;
77355: LD_ADDR_VAR 0 12
77359: PUSH
77360: CALL_OW 44
77364: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
77365: LD_VAR 0 12
77369: PPUSH
77370: LD_VAR 0 9
77374: PPUSH
77375: LD_INT 0
77377: PPUSH
77378: CALL 79015 0 3
// end ;
77382: GO 77336
77384: POP
77385: POP
// end ;
77386: LD_VAR 0 10
77390: RET
// export function WantHeal ( sci , unit ) ; begin
77391: LD_INT 0
77393: PPUSH
// if GetTaskList ( sci ) > 0 then
77394: LD_VAR 0 1
77398: PPUSH
77399: CALL_OW 437
77403: PUSH
77404: LD_INT 0
77406: GREATER
77407: IFFALSE 77477
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
77409: LD_VAR 0 1
77413: PPUSH
77414: CALL_OW 437
77418: PUSH
77419: LD_INT 1
77421: ARRAY
77422: PUSH
77423: LD_INT 1
77425: ARRAY
77426: PUSH
77427: LD_STRING l
77429: EQUAL
77430: PUSH
77431: LD_VAR 0 1
77435: PPUSH
77436: CALL_OW 437
77440: PUSH
77441: LD_INT 1
77443: ARRAY
77444: PUSH
77445: LD_INT 4
77447: ARRAY
77448: PUSH
77449: LD_VAR 0 2
77453: EQUAL
77454: AND
77455: IFFALSE 77467
// result := true else
77457: LD_ADDR_VAR 0 3
77461: PUSH
77462: LD_INT 1
77464: ST_TO_ADDR
77465: GO 77475
// result := false ;
77467: LD_ADDR_VAR 0 3
77471: PUSH
77472: LD_INT 0
77474: ST_TO_ADDR
// end else
77475: GO 77485
// result := false ;
77477: LD_ADDR_VAR 0 3
77481: PUSH
77482: LD_INT 0
77484: ST_TO_ADDR
// end ;
77485: LD_VAR 0 3
77489: RET
// export function HealTarget ( sci ) ; begin
77490: LD_INT 0
77492: PPUSH
// if not sci then
77493: LD_VAR 0 1
77497: NOT
77498: IFFALSE 77502
// exit ;
77500: GO 77567
// result := 0 ;
77502: LD_ADDR_VAR 0 2
77506: PUSH
77507: LD_INT 0
77509: ST_TO_ADDR
// if GetTaskList ( sci ) then
77510: LD_VAR 0 1
77514: PPUSH
77515: CALL_OW 437
77519: IFFALSE 77567
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
77521: LD_VAR 0 1
77525: PPUSH
77526: CALL_OW 437
77530: PUSH
77531: LD_INT 1
77533: ARRAY
77534: PUSH
77535: LD_INT 1
77537: ARRAY
77538: PUSH
77539: LD_STRING l
77541: EQUAL
77542: IFFALSE 77567
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
77544: LD_ADDR_VAR 0 2
77548: PUSH
77549: LD_VAR 0 1
77553: PPUSH
77554: CALL_OW 437
77558: PUSH
77559: LD_INT 1
77561: ARRAY
77562: PUSH
77563: LD_INT 4
77565: ARRAY
77566: ST_TO_ADDR
// end ;
77567: LD_VAR 0 2
77571: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
77572: LD_INT 0
77574: PPUSH
77575: PPUSH
77576: PPUSH
77577: PPUSH
// if not base_units then
77578: LD_VAR 0 1
77582: NOT
77583: IFFALSE 77587
// exit ;
77585: GO 77674
// result := false ;
77587: LD_ADDR_VAR 0 2
77591: PUSH
77592: LD_INT 0
77594: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
77595: LD_ADDR_VAR 0 5
77599: PUSH
77600: LD_VAR 0 1
77604: PPUSH
77605: LD_INT 21
77607: PUSH
77608: LD_INT 3
77610: PUSH
77611: EMPTY
77612: LIST
77613: LIST
77614: PPUSH
77615: CALL_OW 72
77619: ST_TO_ADDR
// if not tmp then
77620: LD_VAR 0 5
77624: NOT
77625: IFFALSE 77629
// exit ;
77627: GO 77674
// for i in tmp do
77629: LD_ADDR_VAR 0 3
77633: PUSH
77634: LD_VAR 0 5
77638: PUSH
77639: FOR_IN
77640: IFFALSE 77672
// begin result := EnemyInRange ( i , 22 ) ;
77642: LD_ADDR_VAR 0 2
77646: PUSH
77647: LD_VAR 0 3
77651: PPUSH
77652: LD_INT 22
77654: PPUSH
77655: CALL 75272 0 2
77659: ST_TO_ADDR
// if result then
77660: LD_VAR 0 2
77664: IFFALSE 77670
// exit ;
77666: POP
77667: POP
77668: GO 77674
// end ;
77670: GO 77639
77672: POP
77673: POP
// end ;
77674: LD_VAR 0 2
77678: RET
// export function FilterByTag ( units , tag ) ; begin
77679: LD_INT 0
77681: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
77682: LD_ADDR_VAR 0 3
77686: PUSH
77687: LD_VAR 0 1
77691: PPUSH
77692: LD_INT 120
77694: PUSH
77695: LD_VAR 0 2
77699: PUSH
77700: EMPTY
77701: LIST
77702: LIST
77703: PPUSH
77704: CALL_OW 72
77708: ST_TO_ADDR
// end ;
77709: LD_VAR 0 3
77713: RET
// export function IsDriver ( un ) ; begin
77714: LD_INT 0
77716: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
77717: LD_ADDR_VAR 0 2
77721: PUSH
77722: LD_VAR 0 1
77726: PUSH
77727: LD_INT 55
77729: PUSH
77730: EMPTY
77731: LIST
77732: PPUSH
77733: CALL_OW 69
77737: IN
77738: ST_TO_ADDR
// end ;
77739: LD_VAR 0 2
77743: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
77744: LD_INT 0
77746: PPUSH
77747: PPUSH
// list := [ ] ;
77748: LD_ADDR_VAR 0 5
77752: PUSH
77753: EMPTY
77754: ST_TO_ADDR
// case d of 0 :
77755: LD_VAR 0 3
77759: PUSH
77760: LD_INT 0
77762: DOUBLE
77763: EQUAL
77764: IFTRUE 77768
77766: GO 77901
77768: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
77769: LD_ADDR_VAR 0 5
77773: PUSH
77774: LD_VAR 0 1
77778: PUSH
77779: LD_INT 4
77781: MINUS
77782: PUSH
77783: LD_VAR 0 2
77787: PUSH
77788: LD_INT 4
77790: MINUS
77791: PUSH
77792: LD_INT 2
77794: PUSH
77795: EMPTY
77796: LIST
77797: LIST
77798: LIST
77799: PUSH
77800: LD_VAR 0 1
77804: PUSH
77805: LD_INT 3
77807: MINUS
77808: PUSH
77809: LD_VAR 0 2
77813: PUSH
77814: LD_INT 1
77816: PUSH
77817: EMPTY
77818: LIST
77819: LIST
77820: LIST
77821: PUSH
77822: LD_VAR 0 1
77826: PUSH
77827: LD_INT 4
77829: PLUS
77830: PUSH
77831: LD_VAR 0 2
77835: PUSH
77836: LD_INT 4
77838: PUSH
77839: EMPTY
77840: LIST
77841: LIST
77842: LIST
77843: PUSH
77844: LD_VAR 0 1
77848: PUSH
77849: LD_INT 3
77851: PLUS
77852: PUSH
77853: LD_VAR 0 2
77857: PUSH
77858: LD_INT 3
77860: PLUS
77861: PUSH
77862: LD_INT 5
77864: PUSH
77865: EMPTY
77866: LIST
77867: LIST
77868: LIST
77869: PUSH
77870: LD_VAR 0 1
77874: PUSH
77875: LD_VAR 0 2
77879: PUSH
77880: LD_INT 4
77882: PLUS
77883: PUSH
77884: LD_INT 0
77886: PUSH
77887: EMPTY
77888: LIST
77889: LIST
77890: LIST
77891: PUSH
77892: EMPTY
77893: LIST
77894: LIST
77895: LIST
77896: LIST
77897: LIST
77898: ST_TO_ADDR
// end ; 1 :
77899: GO 78599
77901: LD_INT 1
77903: DOUBLE
77904: EQUAL
77905: IFTRUE 77909
77907: GO 78042
77909: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
77910: LD_ADDR_VAR 0 5
77914: PUSH
77915: LD_VAR 0 1
77919: PUSH
77920: LD_VAR 0 2
77924: PUSH
77925: LD_INT 4
77927: MINUS
77928: PUSH
77929: LD_INT 3
77931: PUSH
77932: EMPTY
77933: LIST
77934: LIST
77935: LIST
77936: PUSH
77937: LD_VAR 0 1
77941: PUSH
77942: LD_INT 3
77944: MINUS
77945: PUSH
77946: LD_VAR 0 2
77950: PUSH
77951: LD_INT 3
77953: MINUS
77954: PUSH
77955: LD_INT 2
77957: PUSH
77958: EMPTY
77959: LIST
77960: LIST
77961: LIST
77962: PUSH
77963: LD_VAR 0 1
77967: PUSH
77968: LD_INT 4
77970: MINUS
77971: PUSH
77972: LD_VAR 0 2
77976: PUSH
77977: LD_INT 1
77979: PUSH
77980: EMPTY
77981: LIST
77982: LIST
77983: LIST
77984: PUSH
77985: LD_VAR 0 1
77989: PUSH
77990: LD_VAR 0 2
77994: PUSH
77995: LD_INT 3
77997: PLUS
77998: PUSH
77999: LD_INT 0
78001: PUSH
78002: EMPTY
78003: LIST
78004: LIST
78005: LIST
78006: PUSH
78007: LD_VAR 0 1
78011: PUSH
78012: LD_INT 4
78014: PLUS
78015: PUSH
78016: LD_VAR 0 2
78020: PUSH
78021: LD_INT 4
78023: PLUS
78024: PUSH
78025: LD_INT 5
78027: PUSH
78028: EMPTY
78029: LIST
78030: LIST
78031: LIST
78032: PUSH
78033: EMPTY
78034: LIST
78035: LIST
78036: LIST
78037: LIST
78038: LIST
78039: ST_TO_ADDR
// end ; 2 :
78040: GO 78599
78042: LD_INT 2
78044: DOUBLE
78045: EQUAL
78046: IFTRUE 78050
78048: GO 78179
78050: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
78051: LD_ADDR_VAR 0 5
78055: PUSH
78056: LD_VAR 0 1
78060: PUSH
78061: LD_VAR 0 2
78065: PUSH
78066: LD_INT 3
78068: MINUS
78069: PUSH
78070: LD_INT 3
78072: PUSH
78073: EMPTY
78074: LIST
78075: LIST
78076: LIST
78077: PUSH
78078: LD_VAR 0 1
78082: PUSH
78083: LD_INT 4
78085: PLUS
78086: PUSH
78087: LD_VAR 0 2
78091: PUSH
78092: LD_INT 4
78094: PUSH
78095: EMPTY
78096: LIST
78097: LIST
78098: LIST
78099: PUSH
78100: LD_VAR 0 1
78104: PUSH
78105: LD_VAR 0 2
78109: PUSH
78110: LD_INT 4
78112: PLUS
78113: PUSH
78114: LD_INT 0
78116: PUSH
78117: EMPTY
78118: LIST
78119: LIST
78120: LIST
78121: PUSH
78122: LD_VAR 0 1
78126: PUSH
78127: LD_INT 3
78129: MINUS
78130: PUSH
78131: LD_VAR 0 2
78135: PUSH
78136: LD_INT 1
78138: PUSH
78139: EMPTY
78140: LIST
78141: LIST
78142: LIST
78143: PUSH
78144: LD_VAR 0 1
78148: PUSH
78149: LD_INT 4
78151: MINUS
78152: PUSH
78153: LD_VAR 0 2
78157: PUSH
78158: LD_INT 4
78160: MINUS
78161: PUSH
78162: LD_INT 2
78164: PUSH
78165: EMPTY
78166: LIST
78167: LIST
78168: LIST
78169: PUSH
78170: EMPTY
78171: LIST
78172: LIST
78173: LIST
78174: LIST
78175: LIST
78176: ST_TO_ADDR
// end ; 3 :
78177: GO 78599
78179: LD_INT 3
78181: DOUBLE
78182: EQUAL
78183: IFTRUE 78187
78185: GO 78320
78187: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
78188: LD_ADDR_VAR 0 5
78192: PUSH
78193: LD_VAR 0 1
78197: PUSH
78198: LD_INT 3
78200: PLUS
78201: PUSH
78202: LD_VAR 0 2
78206: PUSH
78207: LD_INT 4
78209: PUSH
78210: EMPTY
78211: LIST
78212: LIST
78213: LIST
78214: PUSH
78215: LD_VAR 0 1
78219: PUSH
78220: LD_INT 4
78222: PLUS
78223: PUSH
78224: LD_VAR 0 2
78228: PUSH
78229: LD_INT 4
78231: PLUS
78232: PUSH
78233: LD_INT 5
78235: PUSH
78236: EMPTY
78237: LIST
78238: LIST
78239: LIST
78240: PUSH
78241: LD_VAR 0 1
78245: PUSH
78246: LD_INT 4
78248: MINUS
78249: PUSH
78250: LD_VAR 0 2
78254: PUSH
78255: LD_INT 1
78257: PUSH
78258: EMPTY
78259: LIST
78260: LIST
78261: LIST
78262: PUSH
78263: LD_VAR 0 1
78267: PUSH
78268: LD_VAR 0 2
78272: PUSH
78273: LD_INT 4
78275: MINUS
78276: PUSH
78277: LD_INT 3
78279: PUSH
78280: EMPTY
78281: LIST
78282: LIST
78283: LIST
78284: PUSH
78285: LD_VAR 0 1
78289: PUSH
78290: LD_INT 3
78292: MINUS
78293: PUSH
78294: LD_VAR 0 2
78298: PUSH
78299: LD_INT 3
78301: MINUS
78302: PUSH
78303: LD_INT 2
78305: PUSH
78306: EMPTY
78307: LIST
78308: LIST
78309: LIST
78310: PUSH
78311: EMPTY
78312: LIST
78313: LIST
78314: LIST
78315: LIST
78316: LIST
78317: ST_TO_ADDR
// end ; 4 :
78318: GO 78599
78320: LD_INT 4
78322: DOUBLE
78323: EQUAL
78324: IFTRUE 78328
78326: GO 78461
78328: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
78329: LD_ADDR_VAR 0 5
78333: PUSH
78334: LD_VAR 0 1
78338: PUSH
78339: LD_VAR 0 2
78343: PUSH
78344: LD_INT 4
78346: PLUS
78347: PUSH
78348: LD_INT 0
78350: PUSH
78351: EMPTY
78352: LIST
78353: LIST
78354: LIST
78355: PUSH
78356: LD_VAR 0 1
78360: PUSH
78361: LD_INT 3
78363: PLUS
78364: PUSH
78365: LD_VAR 0 2
78369: PUSH
78370: LD_INT 3
78372: PLUS
78373: PUSH
78374: LD_INT 5
78376: PUSH
78377: EMPTY
78378: LIST
78379: LIST
78380: LIST
78381: PUSH
78382: LD_VAR 0 1
78386: PUSH
78387: LD_INT 4
78389: PLUS
78390: PUSH
78391: LD_VAR 0 2
78395: PUSH
78396: LD_INT 4
78398: PUSH
78399: EMPTY
78400: LIST
78401: LIST
78402: LIST
78403: PUSH
78404: LD_VAR 0 1
78408: PUSH
78409: LD_VAR 0 2
78413: PUSH
78414: LD_INT 3
78416: MINUS
78417: PUSH
78418: LD_INT 3
78420: PUSH
78421: EMPTY
78422: LIST
78423: LIST
78424: LIST
78425: PUSH
78426: LD_VAR 0 1
78430: PUSH
78431: LD_INT 4
78433: MINUS
78434: PUSH
78435: LD_VAR 0 2
78439: PUSH
78440: LD_INT 4
78442: MINUS
78443: PUSH
78444: LD_INT 2
78446: PUSH
78447: EMPTY
78448: LIST
78449: LIST
78450: LIST
78451: PUSH
78452: EMPTY
78453: LIST
78454: LIST
78455: LIST
78456: LIST
78457: LIST
78458: ST_TO_ADDR
// end ; 5 :
78459: GO 78599
78461: LD_INT 5
78463: DOUBLE
78464: EQUAL
78465: IFTRUE 78469
78467: GO 78598
78469: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
78470: LD_ADDR_VAR 0 5
78474: PUSH
78475: LD_VAR 0 1
78479: PUSH
78480: LD_INT 4
78482: MINUS
78483: PUSH
78484: LD_VAR 0 2
78488: PUSH
78489: LD_INT 1
78491: PUSH
78492: EMPTY
78493: LIST
78494: LIST
78495: LIST
78496: PUSH
78497: LD_VAR 0 1
78501: PUSH
78502: LD_VAR 0 2
78506: PUSH
78507: LD_INT 4
78509: MINUS
78510: PUSH
78511: LD_INT 3
78513: PUSH
78514: EMPTY
78515: LIST
78516: LIST
78517: LIST
78518: PUSH
78519: LD_VAR 0 1
78523: PUSH
78524: LD_INT 4
78526: PLUS
78527: PUSH
78528: LD_VAR 0 2
78532: PUSH
78533: LD_INT 4
78535: PLUS
78536: PUSH
78537: LD_INT 5
78539: PUSH
78540: EMPTY
78541: LIST
78542: LIST
78543: LIST
78544: PUSH
78545: LD_VAR 0 1
78549: PUSH
78550: LD_INT 3
78552: PLUS
78553: PUSH
78554: LD_VAR 0 2
78558: PUSH
78559: LD_INT 4
78561: PUSH
78562: EMPTY
78563: LIST
78564: LIST
78565: LIST
78566: PUSH
78567: LD_VAR 0 1
78571: PUSH
78572: LD_VAR 0 2
78576: PUSH
78577: LD_INT 3
78579: PLUS
78580: PUSH
78581: LD_INT 0
78583: PUSH
78584: EMPTY
78585: LIST
78586: LIST
78587: LIST
78588: PUSH
78589: EMPTY
78590: LIST
78591: LIST
78592: LIST
78593: LIST
78594: LIST
78595: ST_TO_ADDR
// end ; end ;
78596: GO 78599
78598: POP
// result := list ;
78599: LD_ADDR_VAR 0 4
78603: PUSH
78604: LD_VAR 0 5
78608: ST_TO_ADDR
// end ;
78609: LD_VAR 0 4
78613: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
78614: LD_INT 0
78616: PPUSH
78617: PPUSH
78618: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
78619: LD_VAR 0 1
78623: NOT
78624: PUSH
78625: LD_VAR 0 2
78629: PUSH
78630: LD_INT 1
78632: PUSH
78633: LD_INT 2
78635: PUSH
78636: LD_INT 3
78638: PUSH
78639: LD_INT 4
78641: PUSH
78642: EMPTY
78643: LIST
78644: LIST
78645: LIST
78646: LIST
78647: IN
78648: NOT
78649: OR
78650: IFFALSE 78654
// exit ;
78652: GO 78737
// tmp := [ ] ;
78654: LD_ADDR_VAR 0 5
78658: PUSH
78659: EMPTY
78660: ST_TO_ADDR
// for i in units do
78661: LD_ADDR_VAR 0 4
78665: PUSH
78666: LD_VAR 0 1
78670: PUSH
78671: FOR_IN
78672: IFFALSE 78706
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
78674: LD_ADDR_VAR 0 5
78678: PUSH
78679: LD_VAR 0 5
78683: PPUSH
78684: LD_VAR 0 4
78688: PPUSH
78689: LD_VAR 0 2
78693: PPUSH
78694: CALL_OW 259
78698: PPUSH
78699: CALL 80110 0 2
78703: ST_TO_ADDR
78704: GO 78671
78706: POP
78707: POP
// if not tmp then
78708: LD_VAR 0 5
78712: NOT
78713: IFFALSE 78717
// exit ;
78715: GO 78737
// result := SortListByListDesc ( units , tmp ) ;
78717: LD_ADDR_VAR 0 3
78721: PUSH
78722: LD_VAR 0 1
78726: PPUSH
78727: LD_VAR 0 5
78731: PPUSH
78732: CALL_OW 77
78736: ST_TO_ADDR
// end ;
78737: LD_VAR 0 3
78741: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
78742: LD_INT 0
78744: PPUSH
78745: PPUSH
78746: PPUSH
// result := false ;
78747: LD_ADDR_VAR 0 3
78751: PUSH
78752: LD_INT 0
78754: ST_TO_ADDR
// if not building then
78755: LD_VAR 0 2
78759: NOT
78760: IFFALSE 78764
// exit ;
78762: GO 78902
// x := GetX ( building ) ;
78764: LD_ADDR_VAR 0 4
78768: PUSH
78769: LD_VAR 0 2
78773: PPUSH
78774: CALL_OW 250
78778: ST_TO_ADDR
// y := GetY ( building ) ;
78779: LD_ADDR_VAR 0 5
78783: PUSH
78784: LD_VAR 0 2
78788: PPUSH
78789: CALL_OW 251
78793: ST_TO_ADDR
// if not x or not y then
78794: LD_VAR 0 4
78798: NOT
78799: PUSH
78800: LD_VAR 0 5
78804: NOT
78805: OR
78806: IFFALSE 78810
// exit ;
78808: GO 78902
// if GetTaskList ( unit ) then
78810: LD_VAR 0 1
78814: PPUSH
78815: CALL_OW 437
78819: IFFALSE 78902
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78821: LD_STRING e
78823: PUSH
78824: LD_VAR 0 1
78828: PPUSH
78829: CALL_OW 437
78833: PUSH
78834: LD_INT 1
78836: ARRAY
78837: PUSH
78838: LD_INT 1
78840: ARRAY
78841: EQUAL
78842: PUSH
78843: LD_VAR 0 4
78847: PUSH
78848: LD_VAR 0 1
78852: PPUSH
78853: CALL_OW 437
78857: PUSH
78858: LD_INT 1
78860: ARRAY
78861: PUSH
78862: LD_INT 2
78864: ARRAY
78865: EQUAL
78866: AND
78867: PUSH
78868: LD_VAR 0 5
78872: PUSH
78873: LD_VAR 0 1
78877: PPUSH
78878: CALL_OW 437
78882: PUSH
78883: LD_INT 1
78885: ARRAY
78886: PUSH
78887: LD_INT 3
78889: ARRAY
78890: EQUAL
78891: AND
78892: IFFALSE 78902
// result := true end ;
78894: LD_ADDR_VAR 0 3
78898: PUSH
78899: LD_INT 1
78901: ST_TO_ADDR
// end ;
78902: LD_VAR 0 3
78906: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
78907: LD_INT 0
78909: PPUSH
// result := false ;
78910: LD_ADDR_VAR 0 4
78914: PUSH
78915: LD_INT 0
78917: ST_TO_ADDR
// if GetTaskList ( unit ) then
78918: LD_VAR 0 1
78922: PPUSH
78923: CALL_OW 437
78927: IFFALSE 79010
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
78929: LD_STRING M
78931: PUSH
78932: LD_VAR 0 1
78936: PPUSH
78937: CALL_OW 437
78941: PUSH
78942: LD_INT 1
78944: ARRAY
78945: PUSH
78946: LD_INT 1
78948: ARRAY
78949: EQUAL
78950: PUSH
78951: LD_VAR 0 2
78955: PUSH
78956: LD_VAR 0 1
78960: PPUSH
78961: CALL_OW 437
78965: PUSH
78966: LD_INT 1
78968: ARRAY
78969: PUSH
78970: LD_INT 2
78972: ARRAY
78973: EQUAL
78974: AND
78975: PUSH
78976: LD_VAR 0 3
78980: PUSH
78981: LD_VAR 0 1
78985: PPUSH
78986: CALL_OW 437
78990: PUSH
78991: LD_INT 1
78993: ARRAY
78994: PUSH
78995: LD_INT 3
78997: ARRAY
78998: EQUAL
78999: AND
79000: IFFALSE 79010
// result := true ;
79002: LD_ADDR_VAR 0 4
79006: PUSH
79007: LD_INT 1
79009: ST_TO_ADDR
// end ; end ;
79010: LD_VAR 0 4
79014: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
79015: LD_INT 0
79017: PPUSH
79018: PPUSH
79019: PPUSH
79020: PPUSH
// if not unit or not area then
79021: LD_VAR 0 1
79025: NOT
79026: PUSH
79027: LD_VAR 0 2
79031: NOT
79032: OR
79033: IFFALSE 79037
// exit ;
79035: GO 79213
// tmp := AreaToList ( area , i ) ;
79037: LD_ADDR_VAR 0 6
79041: PUSH
79042: LD_VAR 0 2
79046: PPUSH
79047: LD_VAR 0 5
79051: PPUSH
79052: CALL_OW 517
79056: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
79057: LD_ADDR_VAR 0 5
79061: PUSH
79062: DOUBLE
79063: LD_INT 1
79065: DEC
79066: ST_TO_ADDR
79067: LD_VAR 0 6
79071: PUSH
79072: LD_INT 1
79074: ARRAY
79075: PUSH
79076: FOR_TO
79077: IFFALSE 79211
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
79079: LD_ADDR_VAR 0 7
79083: PUSH
79084: LD_VAR 0 6
79088: PUSH
79089: LD_INT 1
79091: ARRAY
79092: PUSH
79093: LD_VAR 0 5
79097: ARRAY
79098: PUSH
79099: LD_VAR 0 6
79103: PUSH
79104: LD_INT 2
79106: ARRAY
79107: PUSH
79108: LD_VAR 0 5
79112: ARRAY
79113: PUSH
79114: EMPTY
79115: LIST
79116: LIST
79117: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
79118: LD_INT 92
79120: PUSH
79121: LD_VAR 0 7
79125: PUSH
79126: LD_INT 1
79128: ARRAY
79129: PUSH
79130: LD_VAR 0 7
79134: PUSH
79135: LD_INT 2
79137: ARRAY
79138: PUSH
79139: LD_INT 2
79141: PUSH
79142: EMPTY
79143: LIST
79144: LIST
79145: LIST
79146: LIST
79147: PPUSH
79148: CALL_OW 69
79152: PUSH
79153: LD_INT 0
79155: EQUAL
79156: IFFALSE 79209
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
79158: LD_VAR 0 1
79162: PPUSH
79163: LD_VAR 0 7
79167: PUSH
79168: LD_INT 1
79170: ARRAY
79171: PPUSH
79172: LD_VAR 0 7
79176: PUSH
79177: LD_INT 2
79179: ARRAY
79180: PPUSH
79181: LD_VAR 0 3
79185: PPUSH
79186: CALL_OW 48
// result := IsPlaced ( unit ) ;
79190: LD_ADDR_VAR 0 4
79194: PUSH
79195: LD_VAR 0 1
79199: PPUSH
79200: CALL_OW 305
79204: ST_TO_ADDR
// exit ;
79205: POP
79206: POP
79207: GO 79213
// end ; end ;
79209: GO 79076
79211: POP
79212: POP
// end ;
79213: LD_VAR 0 4
79217: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
79218: LD_INT 0
79220: PPUSH
79221: PPUSH
79222: PPUSH
// if not side or side > 8 then
79223: LD_VAR 0 1
79227: NOT
79228: PUSH
79229: LD_VAR 0 1
79233: PUSH
79234: LD_INT 8
79236: GREATER
79237: OR
79238: IFFALSE 79242
// exit ;
79240: GO 79429
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
79242: LD_ADDR_VAR 0 4
79246: PUSH
79247: LD_INT 22
79249: PUSH
79250: LD_VAR 0 1
79254: PUSH
79255: EMPTY
79256: LIST
79257: LIST
79258: PUSH
79259: LD_INT 21
79261: PUSH
79262: LD_INT 3
79264: PUSH
79265: EMPTY
79266: LIST
79267: LIST
79268: PUSH
79269: EMPTY
79270: LIST
79271: LIST
79272: PPUSH
79273: CALL_OW 69
79277: ST_TO_ADDR
// if not tmp then
79278: LD_VAR 0 4
79282: NOT
79283: IFFALSE 79287
// exit ;
79285: GO 79429
// enable_addtolog := true ;
79287: LD_ADDR_OWVAR 81
79291: PUSH
79292: LD_INT 1
79294: ST_TO_ADDR
// AddToLog ( [ ) ;
79295: LD_STRING [
79297: PPUSH
79298: CALL_OW 561
// for i in tmp do
79302: LD_ADDR_VAR 0 3
79306: PUSH
79307: LD_VAR 0 4
79311: PUSH
79312: FOR_IN
79313: IFFALSE 79420
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
79315: LD_STRING [
79317: PUSH
79318: LD_VAR 0 3
79322: PPUSH
79323: CALL_OW 266
79327: STR
79328: PUSH
79329: LD_STRING , 
79331: STR
79332: PUSH
79333: LD_VAR 0 3
79337: PPUSH
79338: CALL_OW 250
79342: STR
79343: PUSH
79344: LD_STRING , 
79346: STR
79347: PUSH
79348: LD_VAR 0 3
79352: PPUSH
79353: CALL_OW 251
79357: STR
79358: PUSH
79359: LD_STRING , 
79361: STR
79362: PUSH
79363: LD_VAR 0 3
79367: PPUSH
79368: CALL_OW 254
79372: STR
79373: PUSH
79374: LD_STRING , 
79376: STR
79377: PUSH
79378: LD_VAR 0 3
79382: PPUSH
79383: LD_INT 1
79385: PPUSH
79386: CALL_OW 268
79390: STR
79391: PUSH
79392: LD_STRING , 
79394: STR
79395: PUSH
79396: LD_VAR 0 3
79400: PPUSH
79401: LD_INT 2
79403: PPUSH
79404: CALL_OW 268
79408: STR
79409: PUSH
79410: LD_STRING ],
79412: STR
79413: PPUSH
79414: CALL_OW 561
// end ;
79418: GO 79312
79420: POP
79421: POP
// AddToLog ( ]; ) ;
79422: LD_STRING ];
79424: PPUSH
79425: CALL_OW 561
// end ;
79429: LD_VAR 0 2
79433: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
79434: LD_INT 0
79436: PPUSH
79437: PPUSH
79438: PPUSH
79439: PPUSH
79440: PPUSH
// if not area or not rate or not max then
79441: LD_VAR 0 1
79445: NOT
79446: PUSH
79447: LD_VAR 0 2
79451: NOT
79452: OR
79453: PUSH
79454: LD_VAR 0 4
79458: NOT
79459: OR
79460: IFFALSE 79464
// exit ;
79462: GO 79653
// while 1 do
79464: LD_INT 1
79466: IFFALSE 79653
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
79468: LD_ADDR_VAR 0 9
79472: PUSH
79473: LD_VAR 0 1
79477: PPUSH
79478: LD_INT 1
79480: PPUSH
79481: CALL_OW 287
79485: PUSH
79486: LD_INT 10
79488: MUL
79489: ST_TO_ADDR
// r := rate / 10 ;
79490: LD_ADDR_VAR 0 7
79494: PUSH
79495: LD_VAR 0 2
79499: PUSH
79500: LD_INT 10
79502: DIVREAL
79503: ST_TO_ADDR
// time := 1 1$00 ;
79504: LD_ADDR_VAR 0 8
79508: PUSH
79509: LD_INT 2100
79511: ST_TO_ADDR
// if amount < min then
79512: LD_VAR 0 9
79516: PUSH
79517: LD_VAR 0 3
79521: LESS
79522: IFFALSE 79540
// r := r * 2 else
79524: LD_ADDR_VAR 0 7
79528: PUSH
79529: LD_VAR 0 7
79533: PUSH
79534: LD_INT 2
79536: MUL
79537: ST_TO_ADDR
79538: GO 79566
// if amount > max then
79540: LD_VAR 0 9
79544: PUSH
79545: LD_VAR 0 4
79549: GREATER
79550: IFFALSE 79566
// r := r / 2 ;
79552: LD_ADDR_VAR 0 7
79556: PUSH
79557: LD_VAR 0 7
79561: PUSH
79562: LD_INT 2
79564: DIVREAL
79565: ST_TO_ADDR
// time := time / r ;
79566: LD_ADDR_VAR 0 8
79570: PUSH
79571: LD_VAR 0 8
79575: PUSH
79576: LD_VAR 0 7
79580: DIVREAL
79581: ST_TO_ADDR
// if time < 0 then
79582: LD_VAR 0 8
79586: PUSH
79587: LD_INT 0
79589: LESS
79590: IFFALSE 79607
// time := time * - 1 ;
79592: LD_ADDR_VAR 0 8
79596: PUSH
79597: LD_VAR 0 8
79601: PUSH
79602: LD_INT 1
79604: NEG
79605: MUL
79606: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
79607: LD_VAR 0 8
79611: PUSH
79612: LD_INT 35
79614: PPUSH
79615: LD_INT 875
79617: PPUSH
79618: CALL_OW 12
79622: PLUS
79623: PPUSH
79624: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
79628: LD_INT 1
79630: PPUSH
79631: LD_INT 5
79633: PPUSH
79634: CALL_OW 12
79638: PPUSH
79639: LD_VAR 0 1
79643: PPUSH
79644: LD_INT 1
79646: PPUSH
79647: CALL_OW 55
// end ;
79651: GO 79464
// end ;
79653: LD_VAR 0 5
79657: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
79658: LD_INT 0
79660: PPUSH
79661: PPUSH
79662: PPUSH
79663: PPUSH
79664: PPUSH
79665: PPUSH
79666: PPUSH
79667: PPUSH
// if not turrets or not factories then
79668: LD_VAR 0 1
79672: NOT
79673: PUSH
79674: LD_VAR 0 2
79678: NOT
79679: OR
79680: IFFALSE 79684
// exit ;
79682: GO 79991
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
79684: LD_ADDR_VAR 0 10
79688: PUSH
79689: LD_INT 5
79691: PUSH
79692: LD_INT 6
79694: PUSH
79695: EMPTY
79696: LIST
79697: LIST
79698: PUSH
79699: LD_INT 2
79701: PUSH
79702: LD_INT 4
79704: PUSH
79705: EMPTY
79706: LIST
79707: LIST
79708: PUSH
79709: LD_INT 3
79711: PUSH
79712: LD_INT 5
79714: PUSH
79715: EMPTY
79716: LIST
79717: LIST
79718: PUSH
79719: EMPTY
79720: LIST
79721: LIST
79722: LIST
79723: PUSH
79724: LD_INT 24
79726: PUSH
79727: LD_INT 25
79729: PUSH
79730: EMPTY
79731: LIST
79732: LIST
79733: PUSH
79734: LD_INT 23
79736: PUSH
79737: LD_INT 27
79739: PUSH
79740: EMPTY
79741: LIST
79742: LIST
79743: PUSH
79744: EMPTY
79745: LIST
79746: LIST
79747: PUSH
79748: LD_INT 42
79750: PUSH
79751: LD_INT 43
79753: PUSH
79754: EMPTY
79755: LIST
79756: LIST
79757: PUSH
79758: LD_INT 44
79760: PUSH
79761: LD_INT 46
79763: PUSH
79764: EMPTY
79765: LIST
79766: LIST
79767: PUSH
79768: LD_INT 45
79770: PUSH
79771: LD_INT 47
79773: PUSH
79774: EMPTY
79775: LIST
79776: LIST
79777: PUSH
79778: EMPTY
79779: LIST
79780: LIST
79781: LIST
79782: PUSH
79783: EMPTY
79784: LIST
79785: LIST
79786: LIST
79787: ST_TO_ADDR
// result := [ ] ;
79788: LD_ADDR_VAR 0 3
79792: PUSH
79793: EMPTY
79794: ST_TO_ADDR
// for i in turrets do
79795: LD_ADDR_VAR 0 4
79799: PUSH
79800: LD_VAR 0 1
79804: PUSH
79805: FOR_IN
79806: IFFALSE 79989
// begin nat := GetNation ( i ) ;
79808: LD_ADDR_VAR 0 7
79812: PUSH
79813: LD_VAR 0 4
79817: PPUSH
79818: CALL_OW 248
79822: ST_TO_ADDR
// weapon := 0 ;
79823: LD_ADDR_VAR 0 8
79827: PUSH
79828: LD_INT 0
79830: ST_TO_ADDR
// if not nat then
79831: LD_VAR 0 7
79835: NOT
79836: IFFALSE 79840
// continue ;
79838: GO 79805
// for j in list [ nat ] do
79840: LD_ADDR_VAR 0 5
79844: PUSH
79845: LD_VAR 0 10
79849: PUSH
79850: LD_VAR 0 7
79854: ARRAY
79855: PUSH
79856: FOR_IN
79857: IFFALSE 79898
// if GetBWeapon ( i ) = j [ 1 ] then
79859: LD_VAR 0 4
79863: PPUSH
79864: CALL_OW 269
79868: PUSH
79869: LD_VAR 0 5
79873: PUSH
79874: LD_INT 1
79876: ARRAY
79877: EQUAL
79878: IFFALSE 79896
// begin weapon := j [ 2 ] ;
79880: LD_ADDR_VAR 0 8
79884: PUSH
79885: LD_VAR 0 5
79889: PUSH
79890: LD_INT 2
79892: ARRAY
79893: ST_TO_ADDR
// break ;
79894: GO 79898
// end ;
79896: GO 79856
79898: POP
79899: POP
// if not weapon then
79900: LD_VAR 0 8
79904: NOT
79905: IFFALSE 79909
// continue ;
79907: GO 79805
// for k in factories do
79909: LD_ADDR_VAR 0 6
79913: PUSH
79914: LD_VAR 0 2
79918: PUSH
79919: FOR_IN
79920: IFFALSE 79985
// begin weapons := AvailableWeaponList ( k ) ;
79922: LD_ADDR_VAR 0 9
79926: PUSH
79927: LD_VAR 0 6
79931: PPUSH
79932: CALL_OW 478
79936: ST_TO_ADDR
// if not weapons then
79937: LD_VAR 0 9
79941: NOT
79942: IFFALSE 79946
// continue ;
79944: GO 79919
// if weapon in weapons then
79946: LD_VAR 0 8
79950: PUSH
79951: LD_VAR 0 9
79955: IN
79956: IFFALSE 79983
// begin result := [ i , weapon ] ;
79958: LD_ADDR_VAR 0 3
79962: PUSH
79963: LD_VAR 0 4
79967: PUSH
79968: LD_VAR 0 8
79972: PUSH
79973: EMPTY
79974: LIST
79975: LIST
79976: ST_TO_ADDR
// exit ;
79977: POP
79978: POP
79979: POP
79980: POP
79981: GO 79991
// end ; end ;
79983: GO 79919
79985: POP
79986: POP
// end ;
79987: GO 79805
79989: POP
79990: POP
// end ;
79991: LD_VAR 0 3
79995: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
79996: LD_INT 0
79998: PPUSH
// if not side or side > 8 then
79999: LD_VAR 0 3
80003: NOT
80004: PUSH
80005: LD_VAR 0 3
80009: PUSH
80010: LD_INT 8
80012: GREATER
80013: OR
80014: IFFALSE 80018
// exit ;
80016: GO 80077
// if not range then
80018: LD_VAR 0 4
80022: NOT
80023: IFFALSE 80034
// range := - 12 ;
80025: LD_ADDR_VAR 0 4
80029: PUSH
80030: LD_INT 12
80032: NEG
80033: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
80034: LD_VAR 0 1
80038: PPUSH
80039: LD_VAR 0 2
80043: PPUSH
80044: LD_VAR 0 3
80048: PPUSH
80049: LD_VAR 0 4
80053: PPUSH
80054: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
80058: LD_VAR 0 1
80062: PPUSH
80063: LD_VAR 0 2
80067: PPUSH
80068: LD_VAR 0 3
80072: PPUSH
80073: CALL_OW 331
// end ;
80077: LD_VAR 0 5
80081: RET
// export function Video ( mode ) ; begin
80082: LD_INT 0
80084: PPUSH
// ingame_video = mode ;
80085: LD_ADDR_OWVAR 52
80089: PUSH
80090: LD_VAR 0 1
80094: ST_TO_ADDR
// interface_hidden = mode ;
80095: LD_ADDR_OWVAR 54
80099: PUSH
80100: LD_VAR 0 1
80104: ST_TO_ADDR
// end ;
80105: LD_VAR 0 2
80109: RET
// export function Join ( array , element ) ; begin
80110: LD_INT 0
80112: PPUSH
// result := Replace ( array , array + 1 , element ) ;
80113: LD_ADDR_VAR 0 3
80117: PUSH
80118: LD_VAR 0 1
80122: PPUSH
80123: LD_VAR 0 1
80127: PUSH
80128: LD_INT 1
80130: PLUS
80131: PPUSH
80132: LD_VAR 0 2
80136: PPUSH
80137: CALL_OW 1
80141: ST_TO_ADDR
// end ;
80142: LD_VAR 0 3
80146: RET
// export function JoinUnion ( array , element ) ; begin
80147: LD_INT 0
80149: PPUSH
// result := array union element ;
80150: LD_ADDR_VAR 0 3
80154: PUSH
80155: LD_VAR 0 1
80159: PUSH
80160: LD_VAR 0 2
80164: UNION
80165: ST_TO_ADDR
// end ;
80166: LD_VAR 0 3
80170: RET
// export function GetBehemoths ( side ) ; begin
80171: LD_INT 0
80173: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
80174: LD_ADDR_VAR 0 2
80178: PUSH
80179: LD_INT 22
80181: PUSH
80182: LD_VAR 0 1
80186: PUSH
80187: EMPTY
80188: LIST
80189: LIST
80190: PUSH
80191: LD_INT 31
80193: PUSH
80194: LD_INT 25
80196: PUSH
80197: EMPTY
80198: LIST
80199: LIST
80200: PUSH
80201: EMPTY
80202: LIST
80203: LIST
80204: PPUSH
80205: CALL_OW 69
80209: ST_TO_ADDR
// end ;
80210: LD_VAR 0 2
80214: RET
// export function Shuffle ( array ) ; var i , index ; begin
80215: LD_INT 0
80217: PPUSH
80218: PPUSH
80219: PPUSH
// result := [ ] ;
80220: LD_ADDR_VAR 0 2
80224: PUSH
80225: EMPTY
80226: ST_TO_ADDR
// if not array then
80227: LD_VAR 0 1
80231: NOT
80232: IFFALSE 80236
// exit ;
80234: GO 80335
// Randomize ;
80236: CALL_OW 10
// for i = array downto 1 do
80240: LD_ADDR_VAR 0 3
80244: PUSH
80245: DOUBLE
80246: LD_VAR 0 1
80250: INC
80251: ST_TO_ADDR
80252: LD_INT 1
80254: PUSH
80255: FOR_DOWNTO
80256: IFFALSE 80333
// begin index := rand ( 1 , array ) ;
80258: LD_ADDR_VAR 0 4
80262: PUSH
80263: LD_INT 1
80265: PPUSH
80266: LD_VAR 0 1
80270: PPUSH
80271: CALL_OW 12
80275: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
80276: LD_ADDR_VAR 0 2
80280: PUSH
80281: LD_VAR 0 2
80285: PPUSH
80286: LD_VAR 0 2
80290: PUSH
80291: LD_INT 1
80293: PLUS
80294: PPUSH
80295: LD_VAR 0 1
80299: PUSH
80300: LD_VAR 0 4
80304: ARRAY
80305: PPUSH
80306: CALL_OW 2
80310: ST_TO_ADDR
// array := Delete ( array , index ) ;
80311: LD_ADDR_VAR 0 1
80315: PUSH
80316: LD_VAR 0 1
80320: PPUSH
80321: LD_VAR 0 4
80325: PPUSH
80326: CALL_OW 3
80330: ST_TO_ADDR
// end ;
80331: GO 80255
80333: POP
80334: POP
// end ;
80335: LD_VAR 0 2
80339: RET
// export function GetBaseMaterials ( base ) ; begin
80340: LD_INT 0
80342: PPUSH
// result := [ 0 , 0 , 0 ] ;
80343: LD_ADDR_VAR 0 2
80347: PUSH
80348: LD_INT 0
80350: PUSH
80351: LD_INT 0
80353: PUSH
80354: LD_INT 0
80356: PUSH
80357: EMPTY
80358: LIST
80359: LIST
80360: LIST
80361: ST_TO_ADDR
// if not base then
80362: LD_VAR 0 1
80366: NOT
80367: IFFALSE 80371
// exit ;
80369: GO 80420
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
80371: LD_ADDR_VAR 0 2
80375: PUSH
80376: LD_VAR 0 1
80380: PPUSH
80381: LD_INT 1
80383: PPUSH
80384: CALL_OW 275
80388: PUSH
80389: LD_VAR 0 1
80393: PPUSH
80394: LD_INT 2
80396: PPUSH
80397: CALL_OW 275
80401: PUSH
80402: LD_VAR 0 1
80406: PPUSH
80407: LD_INT 3
80409: PPUSH
80410: CALL_OW 275
80414: PUSH
80415: EMPTY
80416: LIST
80417: LIST
80418: LIST
80419: ST_TO_ADDR
// end ;
80420: LD_VAR 0 2
80424: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
80425: LD_INT 0
80427: PPUSH
80428: PPUSH
// result := array ;
80429: LD_ADDR_VAR 0 3
80433: PUSH
80434: LD_VAR 0 1
80438: ST_TO_ADDR
// if size >= result then
80439: LD_VAR 0 2
80443: PUSH
80444: LD_VAR 0 3
80448: GREATEREQUAL
80449: IFFALSE 80453
// exit ;
80451: GO 80503
// if size then
80453: LD_VAR 0 2
80457: IFFALSE 80503
// for i := array downto size do
80459: LD_ADDR_VAR 0 4
80463: PUSH
80464: DOUBLE
80465: LD_VAR 0 1
80469: INC
80470: ST_TO_ADDR
80471: LD_VAR 0 2
80475: PUSH
80476: FOR_DOWNTO
80477: IFFALSE 80501
// result := Delete ( result , result ) ;
80479: LD_ADDR_VAR 0 3
80483: PUSH
80484: LD_VAR 0 3
80488: PPUSH
80489: LD_VAR 0 3
80493: PPUSH
80494: CALL_OW 3
80498: ST_TO_ADDR
80499: GO 80476
80501: POP
80502: POP
// end ;
80503: LD_VAR 0 3
80507: RET
// export function ComExit ( unit ) ; var tmp ; begin
80508: LD_INT 0
80510: PPUSH
80511: PPUSH
// if not IsInUnit ( unit ) then
80512: LD_VAR 0 1
80516: PPUSH
80517: CALL_OW 310
80521: NOT
80522: IFFALSE 80526
// exit ;
80524: GO 80586
// tmp := IsInUnit ( unit ) ;
80526: LD_ADDR_VAR 0 3
80530: PUSH
80531: LD_VAR 0 1
80535: PPUSH
80536: CALL_OW 310
80540: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
80541: LD_VAR 0 3
80545: PPUSH
80546: CALL_OW 247
80550: PUSH
80551: LD_INT 2
80553: EQUAL
80554: IFFALSE 80567
// ComExitVehicle ( unit ) else
80556: LD_VAR 0 1
80560: PPUSH
80561: CALL_OW 121
80565: GO 80576
// ComExitBuilding ( unit ) ;
80567: LD_VAR 0 1
80571: PPUSH
80572: CALL_OW 122
// result := tmp ;
80576: LD_ADDR_VAR 0 2
80580: PUSH
80581: LD_VAR 0 3
80585: ST_TO_ADDR
// end ;
80586: LD_VAR 0 2
80590: RET
// export function ComExitAll ( units ) ; var i ; begin
80591: LD_INT 0
80593: PPUSH
80594: PPUSH
// if not units then
80595: LD_VAR 0 1
80599: NOT
80600: IFFALSE 80604
// exit ;
80602: GO 80630
// for i in units do
80604: LD_ADDR_VAR 0 3
80608: PUSH
80609: LD_VAR 0 1
80613: PUSH
80614: FOR_IN
80615: IFFALSE 80628
// ComExit ( i ) ;
80617: LD_VAR 0 3
80621: PPUSH
80622: CALL 80508 0 1
80626: GO 80614
80628: POP
80629: POP
// end ;
80630: LD_VAR 0 2
80634: RET
// export function ResetHc ; begin
80635: LD_INT 0
80637: PPUSH
// InitHc ;
80638: CALL_OW 19
// hc_importance := 0 ;
80642: LD_ADDR_OWVAR 32
80646: PUSH
80647: LD_INT 0
80649: ST_TO_ADDR
// end ;
80650: LD_VAR 0 1
80654: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
80655: LD_INT 0
80657: PPUSH
80658: PPUSH
80659: PPUSH
// _x := ( x1 + x2 ) div 2 ;
80660: LD_ADDR_VAR 0 6
80664: PUSH
80665: LD_VAR 0 1
80669: PUSH
80670: LD_VAR 0 3
80674: PLUS
80675: PUSH
80676: LD_INT 2
80678: DIV
80679: ST_TO_ADDR
// if _x < 0 then
80680: LD_VAR 0 6
80684: PUSH
80685: LD_INT 0
80687: LESS
80688: IFFALSE 80705
// _x := _x * - 1 ;
80690: LD_ADDR_VAR 0 6
80694: PUSH
80695: LD_VAR 0 6
80699: PUSH
80700: LD_INT 1
80702: NEG
80703: MUL
80704: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
80705: LD_ADDR_VAR 0 7
80709: PUSH
80710: LD_VAR 0 2
80714: PUSH
80715: LD_VAR 0 4
80719: PLUS
80720: PUSH
80721: LD_INT 2
80723: DIV
80724: ST_TO_ADDR
// if _y < 0 then
80725: LD_VAR 0 7
80729: PUSH
80730: LD_INT 0
80732: LESS
80733: IFFALSE 80750
// _y := _y * - 1 ;
80735: LD_ADDR_VAR 0 7
80739: PUSH
80740: LD_VAR 0 7
80744: PUSH
80745: LD_INT 1
80747: NEG
80748: MUL
80749: ST_TO_ADDR
// result := [ _x , _y ] ;
80750: LD_ADDR_VAR 0 5
80754: PUSH
80755: LD_VAR 0 6
80759: PUSH
80760: LD_VAR 0 7
80764: PUSH
80765: EMPTY
80766: LIST
80767: LIST
80768: ST_TO_ADDR
// end ;
80769: LD_VAR 0 5
80773: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
80774: LD_INT 0
80776: PPUSH
80777: PPUSH
80778: PPUSH
80779: PPUSH
// task := GetTaskList ( unit ) ;
80780: LD_ADDR_VAR 0 7
80784: PUSH
80785: LD_VAR 0 1
80789: PPUSH
80790: CALL_OW 437
80794: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
80795: LD_VAR 0 7
80799: NOT
80800: PUSH
80801: LD_VAR 0 1
80805: PPUSH
80806: LD_VAR 0 2
80810: PPUSH
80811: CALL_OW 308
80815: NOT
80816: AND
80817: IFFALSE 80821
// exit ;
80819: GO 80939
// if IsInArea ( unit , area ) then
80821: LD_VAR 0 1
80825: PPUSH
80826: LD_VAR 0 2
80830: PPUSH
80831: CALL_OW 308
80835: IFFALSE 80853
// begin ComMoveToArea ( unit , goAway ) ;
80837: LD_VAR 0 1
80841: PPUSH
80842: LD_VAR 0 3
80846: PPUSH
80847: CALL_OW 113
// exit ;
80851: GO 80939
// end ; if task [ 1 ] [ 1 ] <> M then
80853: LD_VAR 0 7
80857: PUSH
80858: LD_INT 1
80860: ARRAY
80861: PUSH
80862: LD_INT 1
80864: ARRAY
80865: PUSH
80866: LD_STRING M
80868: NONEQUAL
80869: IFFALSE 80873
// exit ;
80871: GO 80939
// x := task [ 1 ] [ 2 ] ;
80873: LD_ADDR_VAR 0 5
80877: PUSH
80878: LD_VAR 0 7
80882: PUSH
80883: LD_INT 1
80885: ARRAY
80886: PUSH
80887: LD_INT 2
80889: ARRAY
80890: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
80891: LD_ADDR_VAR 0 6
80895: PUSH
80896: LD_VAR 0 7
80900: PUSH
80901: LD_INT 1
80903: ARRAY
80904: PUSH
80905: LD_INT 3
80907: ARRAY
80908: ST_TO_ADDR
// if InArea ( x , y , area ) then
80909: LD_VAR 0 5
80913: PPUSH
80914: LD_VAR 0 6
80918: PPUSH
80919: LD_VAR 0 2
80923: PPUSH
80924: CALL_OW 309
80928: IFFALSE 80939
// ComStop ( unit ) ;
80930: LD_VAR 0 1
80934: PPUSH
80935: CALL_OW 141
// end ;
80939: LD_VAR 0 4
80943: RET
// export function Abs ( value ) ; begin
80944: LD_INT 0
80946: PPUSH
// result := value ;
80947: LD_ADDR_VAR 0 2
80951: PUSH
80952: LD_VAR 0 1
80956: ST_TO_ADDR
// if value < 0 then
80957: LD_VAR 0 1
80961: PUSH
80962: LD_INT 0
80964: LESS
80965: IFFALSE 80982
// result := value * - 1 ;
80967: LD_ADDR_VAR 0 2
80971: PUSH
80972: LD_VAR 0 1
80976: PUSH
80977: LD_INT 1
80979: NEG
80980: MUL
80981: ST_TO_ADDR
// end ;
80982: LD_VAR 0 2
80986: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
80987: LD_INT 0
80989: PPUSH
80990: PPUSH
80991: PPUSH
80992: PPUSH
80993: PPUSH
80994: PPUSH
80995: PPUSH
80996: PPUSH
// if not unit or not building then
80997: LD_VAR 0 1
81001: NOT
81002: PUSH
81003: LD_VAR 0 2
81007: NOT
81008: OR
81009: IFFALSE 81013
// exit ;
81011: GO 81239
// x := GetX ( building ) ;
81013: LD_ADDR_VAR 0 4
81017: PUSH
81018: LD_VAR 0 2
81022: PPUSH
81023: CALL_OW 250
81027: ST_TO_ADDR
// y := GetY ( building ) ;
81028: LD_ADDR_VAR 0 6
81032: PUSH
81033: LD_VAR 0 2
81037: PPUSH
81038: CALL_OW 251
81042: ST_TO_ADDR
// d := GetDir ( building ) ;
81043: LD_ADDR_VAR 0 8
81047: PUSH
81048: LD_VAR 0 2
81052: PPUSH
81053: CALL_OW 254
81057: ST_TO_ADDR
// r := 4 ;
81058: LD_ADDR_VAR 0 9
81062: PUSH
81063: LD_INT 4
81065: ST_TO_ADDR
// for i := 1 to 5 do
81066: LD_ADDR_VAR 0 10
81070: PUSH
81071: DOUBLE
81072: LD_INT 1
81074: DEC
81075: ST_TO_ADDR
81076: LD_INT 5
81078: PUSH
81079: FOR_TO
81080: IFFALSE 81237
// begin _x := ShiftX ( x , d , r + i ) ;
81082: LD_ADDR_VAR 0 5
81086: PUSH
81087: LD_VAR 0 4
81091: PPUSH
81092: LD_VAR 0 8
81096: PPUSH
81097: LD_VAR 0 9
81101: PUSH
81102: LD_VAR 0 10
81106: PLUS
81107: PPUSH
81108: CALL_OW 272
81112: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
81113: LD_ADDR_VAR 0 7
81117: PUSH
81118: LD_VAR 0 6
81122: PPUSH
81123: LD_VAR 0 8
81127: PPUSH
81128: LD_VAR 0 9
81132: PUSH
81133: LD_VAR 0 10
81137: PLUS
81138: PPUSH
81139: CALL_OW 273
81143: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
81144: LD_VAR 0 5
81148: PPUSH
81149: LD_VAR 0 7
81153: PPUSH
81154: CALL_OW 488
81158: PUSH
81159: LD_VAR 0 5
81163: PPUSH
81164: LD_VAR 0 7
81168: PPUSH
81169: CALL_OW 428
81173: PPUSH
81174: CALL_OW 247
81178: PUSH
81179: LD_INT 3
81181: PUSH
81182: LD_INT 2
81184: PUSH
81185: EMPTY
81186: LIST
81187: LIST
81188: IN
81189: NOT
81190: AND
81191: IFFALSE 81235
// begin ComMoveXY ( unit , _x , _y ) ;
81193: LD_VAR 0 1
81197: PPUSH
81198: LD_VAR 0 5
81202: PPUSH
81203: LD_VAR 0 7
81207: PPUSH
81208: CALL_OW 111
// result := [ _x , _y ] ;
81212: LD_ADDR_VAR 0 3
81216: PUSH
81217: LD_VAR 0 5
81221: PUSH
81222: LD_VAR 0 7
81226: PUSH
81227: EMPTY
81228: LIST
81229: LIST
81230: ST_TO_ADDR
// exit ;
81231: POP
81232: POP
81233: GO 81239
// end ; end ;
81235: GO 81079
81237: POP
81238: POP
// end ;
81239: LD_VAR 0 3
81243: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
81244: LD_INT 0
81246: PPUSH
81247: PPUSH
81248: PPUSH
// result := 0 ;
81249: LD_ADDR_VAR 0 3
81253: PUSH
81254: LD_INT 0
81256: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
81257: LD_VAR 0 1
81261: PUSH
81262: LD_INT 0
81264: LESS
81265: PUSH
81266: LD_VAR 0 1
81270: PUSH
81271: LD_INT 8
81273: GREATER
81274: OR
81275: PUSH
81276: LD_VAR 0 2
81280: PUSH
81281: LD_INT 0
81283: LESS
81284: OR
81285: PUSH
81286: LD_VAR 0 2
81290: PUSH
81291: LD_INT 8
81293: GREATER
81294: OR
81295: IFFALSE 81299
// exit ;
81297: GO 81374
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
81299: LD_ADDR_VAR 0 4
81303: PUSH
81304: LD_INT 22
81306: PUSH
81307: LD_VAR 0 2
81311: PUSH
81312: EMPTY
81313: LIST
81314: LIST
81315: PPUSH
81316: CALL_OW 69
81320: PUSH
81321: FOR_IN
81322: IFFALSE 81372
// begin un := UnitShoot ( i ) ;
81324: LD_ADDR_VAR 0 5
81328: PUSH
81329: LD_VAR 0 4
81333: PPUSH
81334: CALL_OW 504
81338: ST_TO_ADDR
// if GetSide ( un ) = side1 then
81339: LD_VAR 0 5
81343: PPUSH
81344: CALL_OW 255
81348: PUSH
81349: LD_VAR 0 1
81353: EQUAL
81354: IFFALSE 81370
// begin result := un ;
81356: LD_ADDR_VAR 0 3
81360: PUSH
81361: LD_VAR 0 5
81365: ST_TO_ADDR
// exit ;
81366: POP
81367: POP
81368: GO 81374
// end ; end ;
81370: GO 81321
81372: POP
81373: POP
// end ;
81374: LD_VAR 0 3
81378: RET
// export function GetCargoBay ( units ) ; begin
81379: LD_INT 0
81381: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
81382: LD_ADDR_VAR 0 2
81386: PUSH
81387: LD_VAR 0 1
81391: PPUSH
81392: LD_INT 2
81394: PUSH
81395: LD_INT 34
81397: PUSH
81398: LD_INT 12
81400: PUSH
81401: EMPTY
81402: LIST
81403: LIST
81404: PUSH
81405: LD_INT 34
81407: PUSH
81408: LD_INT 51
81410: PUSH
81411: EMPTY
81412: LIST
81413: LIST
81414: PUSH
81415: LD_INT 34
81417: PUSH
81418: LD_INT 32
81420: PUSH
81421: EMPTY
81422: LIST
81423: LIST
81424: PUSH
81425: LD_INT 34
81427: PUSH
81428: LD_INT 89
81430: PUSH
81431: EMPTY
81432: LIST
81433: LIST
81434: PUSH
81435: EMPTY
81436: LIST
81437: LIST
81438: LIST
81439: LIST
81440: LIST
81441: PPUSH
81442: CALL_OW 72
81446: ST_TO_ADDR
// end ;
81447: LD_VAR 0 2
81451: RET
// export function Negate ( value ) ; begin
81452: LD_INT 0
81454: PPUSH
// result := not value ;
81455: LD_ADDR_VAR 0 2
81459: PUSH
81460: LD_VAR 0 1
81464: NOT
81465: ST_TO_ADDR
// end ;
81466: LD_VAR 0 2
81470: RET
// export function Inc ( value ) ; begin
81471: LD_INT 0
81473: PPUSH
// result := value + 1 ;
81474: LD_ADDR_VAR 0 2
81478: PUSH
81479: LD_VAR 0 1
81483: PUSH
81484: LD_INT 1
81486: PLUS
81487: ST_TO_ADDR
// end ;
81488: LD_VAR 0 2
81492: RET
// export function Dec ( value ) ; begin
81493: LD_INT 0
81495: PPUSH
// result := value - 1 ;
81496: LD_ADDR_VAR 0 2
81500: PUSH
81501: LD_VAR 0 1
81505: PUSH
81506: LD_INT 1
81508: MINUS
81509: ST_TO_ADDR
// end ;
81510: LD_VAR 0 2
81514: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
81515: LD_INT 0
81517: PPUSH
81518: PPUSH
81519: PPUSH
81520: PPUSH
81521: PPUSH
81522: PPUSH
81523: PPUSH
81524: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
81525: LD_VAR 0 1
81529: PPUSH
81530: LD_VAR 0 2
81534: PPUSH
81535: CALL_OW 488
81539: NOT
81540: PUSH
81541: LD_VAR 0 3
81545: PPUSH
81546: LD_VAR 0 4
81550: PPUSH
81551: CALL_OW 488
81555: NOT
81556: OR
81557: IFFALSE 81570
// begin result := - 1 ;
81559: LD_ADDR_VAR 0 5
81563: PUSH
81564: LD_INT 1
81566: NEG
81567: ST_TO_ADDR
// exit ;
81568: GO 81805
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
81570: LD_ADDR_VAR 0 12
81574: PUSH
81575: LD_VAR 0 1
81579: PPUSH
81580: LD_VAR 0 2
81584: PPUSH
81585: LD_VAR 0 3
81589: PPUSH
81590: LD_VAR 0 4
81594: PPUSH
81595: CALL 80655 0 4
81599: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
81600: LD_ADDR_VAR 0 11
81604: PUSH
81605: LD_VAR 0 1
81609: PPUSH
81610: LD_VAR 0 2
81614: PPUSH
81615: LD_VAR 0 12
81619: PUSH
81620: LD_INT 1
81622: ARRAY
81623: PPUSH
81624: LD_VAR 0 12
81628: PUSH
81629: LD_INT 2
81631: ARRAY
81632: PPUSH
81633: CALL_OW 298
81637: ST_TO_ADDR
// distance := 9999 ;
81638: LD_ADDR_VAR 0 10
81642: PUSH
81643: LD_INT 9999
81645: ST_TO_ADDR
// for i := 0 to 5 do
81646: LD_ADDR_VAR 0 6
81650: PUSH
81651: DOUBLE
81652: LD_INT 0
81654: DEC
81655: ST_TO_ADDR
81656: LD_INT 5
81658: PUSH
81659: FOR_TO
81660: IFFALSE 81803
// begin _x := ShiftX ( x1 , i , centerDist ) ;
81662: LD_ADDR_VAR 0 7
81666: PUSH
81667: LD_VAR 0 1
81671: PPUSH
81672: LD_VAR 0 6
81676: PPUSH
81677: LD_VAR 0 11
81681: PPUSH
81682: CALL_OW 272
81686: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
81687: LD_ADDR_VAR 0 8
81691: PUSH
81692: LD_VAR 0 2
81696: PPUSH
81697: LD_VAR 0 6
81701: PPUSH
81702: LD_VAR 0 11
81706: PPUSH
81707: CALL_OW 273
81711: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
81712: LD_VAR 0 7
81716: PPUSH
81717: LD_VAR 0 8
81721: PPUSH
81722: CALL_OW 488
81726: NOT
81727: IFFALSE 81731
// continue ;
81729: GO 81659
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
81731: LD_ADDR_VAR 0 9
81735: PUSH
81736: LD_VAR 0 12
81740: PUSH
81741: LD_INT 1
81743: ARRAY
81744: PPUSH
81745: LD_VAR 0 12
81749: PUSH
81750: LD_INT 2
81752: ARRAY
81753: PPUSH
81754: LD_VAR 0 7
81758: PPUSH
81759: LD_VAR 0 8
81763: PPUSH
81764: CALL_OW 298
81768: ST_TO_ADDR
// if tmp < distance then
81769: LD_VAR 0 9
81773: PUSH
81774: LD_VAR 0 10
81778: LESS
81779: IFFALSE 81801
// begin result := i ;
81781: LD_ADDR_VAR 0 5
81785: PUSH
81786: LD_VAR 0 6
81790: ST_TO_ADDR
// distance := tmp ;
81791: LD_ADDR_VAR 0 10
81795: PUSH
81796: LD_VAR 0 9
81800: ST_TO_ADDR
// end ; end ;
81801: GO 81659
81803: POP
81804: POP
// end ;
81805: LD_VAR 0 5
81809: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
81810: LD_INT 0
81812: PPUSH
81813: PPUSH
// if not driver or not IsInUnit ( driver ) then
81814: LD_VAR 0 1
81818: NOT
81819: PUSH
81820: LD_VAR 0 1
81824: PPUSH
81825: CALL_OW 310
81829: NOT
81830: OR
81831: IFFALSE 81835
// exit ;
81833: GO 81925
// vehicle := IsInUnit ( driver ) ;
81835: LD_ADDR_VAR 0 3
81839: PUSH
81840: LD_VAR 0 1
81844: PPUSH
81845: CALL_OW 310
81849: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
81850: LD_VAR 0 1
81854: PPUSH
81855: LD_STRING \
81857: PUSH
81858: LD_INT 0
81860: PUSH
81861: LD_INT 0
81863: PUSH
81864: LD_INT 0
81866: PUSH
81867: LD_INT 0
81869: PUSH
81870: LD_INT 0
81872: PUSH
81873: LD_INT 0
81875: PUSH
81876: EMPTY
81877: LIST
81878: LIST
81879: LIST
81880: LIST
81881: LIST
81882: LIST
81883: LIST
81884: PUSH
81885: LD_STRING E
81887: PUSH
81888: LD_INT 0
81890: PUSH
81891: LD_INT 0
81893: PUSH
81894: LD_VAR 0 3
81898: PUSH
81899: LD_INT 0
81901: PUSH
81902: LD_INT 0
81904: PUSH
81905: LD_INT 0
81907: PUSH
81908: EMPTY
81909: LIST
81910: LIST
81911: LIST
81912: LIST
81913: LIST
81914: LIST
81915: LIST
81916: PUSH
81917: EMPTY
81918: LIST
81919: LIST
81920: PPUSH
81921: CALL_OW 446
// end ;
81925: LD_VAR 0 2
81929: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
81930: LD_INT 0
81932: PPUSH
81933: PPUSH
// if not driver or not IsInUnit ( driver ) then
81934: LD_VAR 0 1
81938: NOT
81939: PUSH
81940: LD_VAR 0 1
81944: PPUSH
81945: CALL_OW 310
81949: NOT
81950: OR
81951: IFFALSE 81955
// exit ;
81953: GO 82045
// vehicle := IsInUnit ( driver ) ;
81955: LD_ADDR_VAR 0 3
81959: PUSH
81960: LD_VAR 0 1
81964: PPUSH
81965: CALL_OW 310
81969: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
81970: LD_VAR 0 1
81974: PPUSH
81975: LD_STRING \
81977: PUSH
81978: LD_INT 0
81980: PUSH
81981: LD_INT 0
81983: PUSH
81984: LD_INT 0
81986: PUSH
81987: LD_INT 0
81989: PUSH
81990: LD_INT 0
81992: PUSH
81993: LD_INT 0
81995: PUSH
81996: EMPTY
81997: LIST
81998: LIST
81999: LIST
82000: LIST
82001: LIST
82002: LIST
82003: LIST
82004: PUSH
82005: LD_STRING E
82007: PUSH
82008: LD_INT 0
82010: PUSH
82011: LD_INT 0
82013: PUSH
82014: LD_VAR 0 3
82018: PUSH
82019: LD_INT 0
82021: PUSH
82022: LD_INT 0
82024: PUSH
82025: LD_INT 0
82027: PUSH
82028: EMPTY
82029: LIST
82030: LIST
82031: LIST
82032: LIST
82033: LIST
82034: LIST
82035: LIST
82036: PUSH
82037: EMPTY
82038: LIST
82039: LIST
82040: PPUSH
82041: CALL_OW 447
// end ;
82045: LD_VAR 0 2
82049: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
82050: LD_INT 0
82052: PPUSH
82053: PPUSH
82054: PPUSH
// tmp := [ ] ;
82055: LD_ADDR_VAR 0 5
82059: PUSH
82060: EMPTY
82061: ST_TO_ADDR
// for i in units do
82062: LD_ADDR_VAR 0 4
82066: PUSH
82067: LD_VAR 0 1
82071: PUSH
82072: FOR_IN
82073: IFFALSE 82111
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
82075: LD_ADDR_VAR 0 5
82079: PUSH
82080: LD_VAR 0 5
82084: PPUSH
82085: LD_VAR 0 5
82089: PUSH
82090: LD_INT 1
82092: PLUS
82093: PPUSH
82094: LD_VAR 0 4
82098: PPUSH
82099: CALL_OW 256
82103: PPUSH
82104: CALL_OW 2
82108: ST_TO_ADDR
82109: GO 82072
82111: POP
82112: POP
// if not tmp then
82113: LD_VAR 0 5
82117: NOT
82118: IFFALSE 82122
// exit ;
82120: GO 82170
// if asc then
82122: LD_VAR 0 2
82126: IFFALSE 82150
// result := SortListByListAsc ( units , tmp ) else
82128: LD_ADDR_VAR 0 3
82132: PUSH
82133: LD_VAR 0 1
82137: PPUSH
82138: LD_VAR 0 5
82142: PPUSH
82143: CALL_OW 76
82147: ST_TO_ADDR
82148: GO 82170
// result := SortListByListDesc ( units , tmp ) ;
82150: LD_ADDR_VAR 0 3
82154: PUSH
82155: LD_VAR 0 1
82159: PPUSH
82160: LD_VAR 0 5
82164: PPUSH
82165: CALL_OW 77
82169: ST_TO_ADDR
// end ;
82170: LD_VAR 0 3
82174: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
82175: LD_INT 0
82177: PPUSH
82178: PPUSH
// task := GetTaskList ( mech ) ;
82179: LD_ADDR_VAR 0 4
82183: PUSH
82184: LD_VAR 0 1
82188: PPUSH
82189: CALL_OW 437
82193: ST_TO_ADDR
// if not task then
82194: LD_VAR 0 4
82198: NOT
82199: IFFALSE 82203
// exit ;
82201: GO 82245
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
82203: LD_ADDR_VAR 0 3
82207: PUSH
82208: LD_VAR 0 4
82212: PUSH
82213: LD_INT 1
82215: ARRAY
82216: PUSH
82217: LD_INT 1
82219: ARRAY
82220: PUSH
82221: LD_STRING r
82223: EQUAL
82224: PUSH
82225: LD_VAR 0 4
82229: PUSH
82230: LD_INT 1
82232: ARRAY
82233: PUSH
82234: LD_INT 4
82236: ARRAY
82237: PUSH
82238: LD_VAR 0 2
82242: EQUAL
82243: AND
82244: ST_TO_ADDR
// end ;
82245: LD_VAR 0 3
82249: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
82250: LD_INT 0
82252: PPUSH
// SetDir ( unit , d ) ;
82253: LD_VAR 0 1
82257: PPUSH
82258: LD_VAR 0 4
82262: PPUSH
82263: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
82267: LD_VAR 0 1
82271: PPUSH
82272: LD_VAR 0 2
82276: PPUSH
82277: LD_VAR 0 3
82281: PPUSH
82282: LD_VAR 0 5
82286: PPUSH
82287: CALL_OW 48
// end ;
82291: LD_VAR 0 6
82295: RET
// export function ToNaturalNumber ( number ) ; begin
82296: LD_INT 0
82298: PPUSH
// result := number div 1 ;
82299: LD_ADDR_VAR 0 2
82303: PUSH
82304: LD_VAR 0 1
82308: PUSH
82309: LD_INT 1
82311: DIV
82312: ST_TO_ADDR
// if number < 0 then
82313: LD_VAR 0 1
82317: PUSH
82318: LD_INT 0
82320: LESS
82321: IFFALSE 82331
// result := 0 ;
82323: LD_ADDR_VAR 0 2
82327: PUSH
82328: LD_INT 0
82330: ST_TO_ADDR
// end ;
82331: LD_VAR 0 2
82335: RET
// export function SortByClass ( units , class ) ; var un ; begin
82336: LD_INT 0
82338: PPUSH
82339: PPUSH
// if not units or not class then
82340: LD_VAR 0 1
82344: NOT
82345: PUSH
82346: LD_VAR 0 2
82350: NOT
82351: OR
82352: IFFALSE 82356
// exit ;
82354: GO 82451
// result := [ ] ;
82356: LD_ADDR_VAR 0 3
82360: PUSH
82361: EMPTY
82362: ST_TO_ADDR
// for un in units do
82363: LD_ADDR_VAR 0 4
82367: PUSH
82368: LD_VAR 0 1
82372: PUSH
82373: FOR_IN
82374: IFFALSE 82449
// if GetClass ( un ) = class then
82376: LD_VAR 0 4
82380: PPUSH
82381: CALL_OW 257
82385: PUSH
82386: LD_VAR 0 2
82390: EQUAL
82391: IFFALSE 82418
// result := Insert ( result , 1 , un ) else
82393: LD_ADDR_VAR 0 3
82397: PUSH
82398: LD_VAR 0 3
82402: PPUSH
82403: LD_INT 1
82405: PPUSH
82406: LD_VAR 0 4
82410: PPUSH
82411: CALL_OW 2
82415: ST_TO_ADDR
82416: GO 82447
// result := Replace ( result , result + 1 , un ) ;
82418: LD_ADDR_VAR 0 3
82422: PUSH
82423: LD_VAR 0 3
82427: PPUSH
82428: LD_VAR 0 3
82432: PUSH
82433: LD_INT 1
82435: PLUS
82436: PPUSH
82437: LD_VAR 0 4
82441: PPUSH
82442: CALL_OW 1
82446: ST_TO_ADDR
82447: GO 82373
82449: POP
82450: POP
// end ;
82451: LD_VAR 0 3
82455: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
82456: LD_INT 0
82458: PPUSH
82459: PPUSH
82460: PPUSH
82461: PPUSH
82462: PPUSH
82463: PPUSH
82464: PPUSH
// result := [ ] ;
82465: LD_ADDR_VAR 0 4
82469: PUSH
82470: EMPTY
82471: ST_TO_ADDR
// if x - r < 0 then
82472: LD_VAR 0 1
82476: PUSH
82477: LD_VAR 0 3
82481: MINUS
82482: PUSH
82483: LD_INT 0
82485: LESS
82486: IFFALSE 82498
// min_x := 0 else
82488: LD_ADDR_VAR 0 8
82492: PUSH
82493: LD_INT 0
82495: ST_TO_ADDR
82496: GO 82514
// min_x := x - r ;
82498: LD_ADDR_VAR 0 8
82502: PUSH
82503: LD_VAR 0 1
82507: PUSH
82508: LD_VAR 0 3
82512: MINUS
82513: ST_TO_ADDR
// if y - r < 0 then
82514: LD_VAR 0 2
82518: PUSH
82519: LD_VAR 0 3
82523: MINUS
82524: PUSH
82525: LD_INT 0
82527: LESS
82528: IFFALSE 82540
// min_y := 0 else
82530: LD_ADDR_VAR 0 7
82534: PUSH
82535: LD_INT 0
82537: ST_TO_ADDR
82538: GO 82556
// min_y := y - r ;
82540: LD_ADDR_VAR 0 7
82544: PUSH
82545: LD_VAR 0 2
82549: PUSH
82550: LD_VAR 0 3
82554: MINUS
82555: ST_TO_ADDR
// max_x := x + r ;
82556: LD_ADDR_VAR 0 9
82560: PUSH
82561: LD_VAR 0 1
82565: PUSH
82566: LD_VAR 0 3
82570: PLUS
82571: ST_TO_ADDR
// max_y := y + r ;
82572: LD_ADDR_VAR 0 10
82576: PUSH
82577: LD_VAR 0 2
82581: PUSH
82582: LD_VAR 0 3
82586: PLUS
82587: ST_TO_ADDR
// for _x = min_x to max_x do
82588: LD_ADDR_VAR 0 5
82592: PUSH
82593: DOUBLE
82594: LD_VAR 0 8
82598: DEC
82599: ST_TO_ADDR
82600: LD_VAR 0 9
82604: PUSH
82605: FOR_TO
82606: IFFALSE 82707
// for _y = min_y to max_y do
82608: LD_ADDR_VAR 0 6
82612: PUSH
82613: DOUBLE
82614: LD_VAR 0 7
82618: DEC
82619: ST_TO_ADDR
82620: LD_VAR 0 10
82624: PUSH
82625: FOR_TO
82626: IFFALSE 82703
// begin if not ValidHex ( _x , _y ) then
82628: LD_VAR 0 5
82632: PPUSH
82633: LD_VAR 0 6
82637: PPUSH
82638: CALL_OW 488
82642: NOT
82643: IFFALSE 82647
// continue ;
82645: GO 82625
// if GetResourceTypeXY ( _x , _y ) then
82647: LD_VAR 0 5
82651: PPUSH
82652: LD_VAR 0 6
82656: PPUSH
82657: CALL_OW 283
82661: IFFALSE 82701
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
82663: LD_ADDR_VAR 0 4
82667: PUSH
82668: LD_VAR 0 4
82672: PPUSH
82673: LD_VAR 0 4
82677: PUSH
82678: LD_INT 1
82680: PLUS
82681: PPUSH
82682: LD_VAR 0 5
82686: PUSH
82687: LD_VAR 0 6
82691: PUSH
82692: EMPTY
82693: LIST
82694: LIST
82695: PPUSH
82696: CALL_OW 1
82700: ST_TO_ADDR
// end ;
82701: GO 82625
82703: POP
82704: POP
82705: GO 82605
82707: POP
82708: POP
// end ;
82709: LD_VAR 0 4
82713: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
82714: LD_INT 0
82716: PPUSH
82717: PPUSH
82718: PPUSH
82719: PPUSH
82720: PPUSH
82721: PPUSH
82722: PPUSH
82723: PPUSH
// if not units then
82724: LD_VAR 0 1
82728: NOT
82729: IFFALSE 82733
// exit ;
82731: GO 83261
// result := UnitFilter ( units , [ f_ok ] ) ;
82733: LD_ADDR_VAR 0 3
82737: PUSH
82738: LD_VAR 0 1
82742: PPUSH
82743: LD_INT 50
82745: PUSH
82746: EMPTY
82747: LIST
82748: PPUSH
82749: CALL_OW 72
82753: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
82754: LD_ADDR_VAR 0 8
82758: PUSH
82759: LD_VAR 0 1
82763: PUSH
82764: LD_INT 1
82766: ARRAY
82767: PPUSH
82768: CALL_OW 255
82772: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
82773: LD_ADDR_VAR 0 10
82777: PUSH
82778: LD_INT 29
82780: PUSH
82781: LD_INT 91
82783: PUSH
82784: LD_INT 49
82786: PUSH
82787: EMPTY
82788: LIST
82789: LIST
82790: LIST
82791: ST_TO_ADDR
// if not result then
82792: LD_VAR 0 3
82796: NOT
82797: IFFALSE 82801
// exit ;
82799: GO 83261
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
82801: LD_ADDR_VAR 0 5
82805: PUSH
82806: LD_INT 81
82808: PUSH
82809: LD_VAR 0 8
82813: PUSH
82814: EMPTY
82815: LIST
82816: LIST
82817: PPUSH
82818: CALL_OW 69
82822: ST_TO_ADDR
// for i in result do
82823: LD_ADDR_VAR 0 4
82827: PUSH
82828: LD_VAR 0 3
82832: PUSH
82833: FOR_IN
82834: IFFALSE 83259
// begin tag := GetTag ( i ) + 1 ;
82836: LD_ADDR_VAR 0 9
82840: PUSH
82841: LD_VAR 0 4
82845: PPUSH
82846: CALL_OW 110
82850: PUSH
82851: LD_INT 1
82853: PLUS
82854: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
82855: LD_ADDR_VAR 0 7
82859: PUSH
82860: LD_VAR 0 4
82864: PPUSH
82865: CALL_OW 250
82869: PPUSH
82870: LD_VAR 0 4
82874: PPUSH
82875: CALL_OW 251
82879: PPUSH
82880: LD_INT 4
82882: PPUSH
82883: CALL 82456 0 3
82887: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
82888: LD_VAR 0 4
82892: PPUSH
82893: CALL_OW 247
82897: PUSH
82898: LD_INT 2
82900: EQUAL
82901: PUSH
82902: LD_VAR 0 7
82906: PUSH
82907: LD_INT 2
82909: GREATER
82910: AND
82911: PUSH
82912: LD_VAR 0 4
82916: PPUSH
82917: CALL_OW 264
82921: PUSH
82922: LD_VAR 0 10
82926: IN
82927: NOT
82928: AND
82929: IFFALSE 82968
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
82931: LD_VAR 0 4
82935: PPUSH
82936: LD_VAR 0 7
82940: PUSH
82941: LD_INT 1
82943: ARRAY
82944: PUSH
82945: LD_INT 1
82947: ARRAY
82948: PPUSH
82949: LD_VAR 0 7
82953: PUSH
82954: LD_INT 1
82956: ARRAY
82957: PUSH
82958: LD_INT 2
82960: ARRAY
82961: PPUSH
82962: CALL_OW 116
82966: GO 83257
// if path > tag then
82968: LD_VAR 0 2
82972: PUSH
82973: LD_VAR 0 9
82977: GREATER
82978: IFFALSE 83186
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
82980: LD_ADDR_VAR 0 6
82984: PUSH
82985: LD_VAR 0 5
82989: PPUSH
82990: LD_INT 91
82992: PUSH
82993: LD_VAR 0 4
82997: PUSH
82998: LD_INT 8
83000: PUSH
83001: EMPTY
83002: LIST
83003: LIST
83004: LIST
83005: PPUSH
83006: CALL_OW 72
83010: ST_TO_ADDR
// if nearEnemy then
83011: LD_VAR 0 6
83015: IFFALSE 83084
// begin if GetWeapon ( i ) = ru_time_lapser then
83017: LD_VAR 0 4
83021: PPUSH
83022: CALL_OW 264
83026: PUSH
83027: LD_INT 49
83029: EQUAL
83030: IFFALSE 83058
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
83032: LD_VAR 0 4
83036: PPUSH
83037: LD_VAR 0 6
83041: PPUSH
83042: LD_VAR 0 4
83046: PPUSH
83047: CALL_OW 74
83051: PPUSH
83052: CALL_OW 112
83056: GO 83082
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
83058: LD_VAR 0 4
83062: PPUSH
83063: LD_VAR 0 6
83067: PPUSH
83068: LD_VAR 0 4
83072: PPUSH
83073: CALL_OW 74
83077: PPUSH
83078: CALL 84332 0 2
// end else
83082: GO 83184
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
83084: LD_VAR 0 4
83088: PPUSH
83089: LD_VAR 0 2
83093: PUSH
83094: LD_VAR 0 9
83098: ARRAY
83099: PUSH
83100: LD_INT 1
83102: ARRAY
83103: PPUSH
83104: LD_VAR 0 2
83108: PUSH
83109: LD_VAR 0 9
83113: ARRAY
83114: PUSH
83115: LD_INT 2
83117: ARRAY
83118: PPUSH
83119: CALL_OW 297
83123: PUSH
83124: LD_INT 6
83126: GREATER
83127: IFFALSE 83170
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
83129: LD_VAR 0 4
83133: PPUSH
83134: LD_VAR 0 2
83138: PUSH
83139: LD_VAR 0 9
83143: ARRAY
83144: PUSH
83145: LD_INT 1
83147: ARRAY
83148: PPUSH
83149: LD_VAR 0 2
83153: PUSH
83154: LD_VAR 0 9
83158: ARRAY
83159: PUSH
83160: LD_INT 2
83162: ARRAY
83163: PPUSH
83164: CALL_OW 114
83168: GO 83184
// SetTag ( i , tag ) ;
83170: LD_VAR 0 4
83174: PPUSH
83175: LD_VAR 0 9
83179: PPUSH
83180: CALL_OW 109
// end else
83184: GO 83257
// if enemy then
83186: LD_VAR 0 5
83190: IFFALSE 83257
// begin if GetWeapon ( i ) = ru_time_lapser then
83192: LD_VAR 0 4
83196: PPUSH
83197: CALL_OW 264
83201: PUSH
83202: LD_INT 49
83204: EQUAL
83205: IFFALSE 83233
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
83207: LD_VAR 0 4
83211: PPUSH
83212: LD_VAR 0 5
83216: PPUSH
83217: LD_VAR 0 4
83221: PPUSH
83222: CALL_OW 74
83226: PPUSH
83227: CALL_OW 112
83231: GO 83257
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
83233: LD_VAR 0 4
83237: PPUSH
83238: LD_VAR 0 5
83242: PPUSH
83243: LD_VAR 0 4
83247: PPUSH
83248: CALL_OW 74
83252: PPUSH
83253: CALL 84332 0 2
// end ; end ;
83257: GO 82833
83259: POP
83260: POP
// end ;
83261: LD_VAR 0 3
83265: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
83266: LD_INT 0
83268: PPUSH
83269: PPUSH
83270: PPUSH
// if not unit or IsInUnit ( unit ) then
83271: LD_VAR 0 1
83275: NOT
83276: PUSH
83277: LD_VAR 0 1
83281: PPUSH
83282: CALL_OW 310
83286: OR
83287: IFFALSE 83291
// exit ;
83289: GO 83382
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
83291: LD_ADDR_VAR 0 4
83295: PUSH
83296: LD_VAR 0 1
83300: PPUSH
83301: CALL_OW 250
83305: PPUSH
83306: LD_VAR 0 2
83310: PPUSH
83311: LD_INT 1
83313: PPUSH
83314: CALL_OW 272
83318: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
83319: LD_ADDR_VAR 0 5
83323: PUSH
83324: LD_VAR 0 1
83328: PPUSH
83329: CALL_OW 251
83333: PPUSH
83334: LD_VAR 0 2
83338: PPUSH
83339: LD_INT 1
83341: PPUSH
83342: CALL_OW 273
83346: ST_TO_ADDR
// if ValidHex ( x , y ) then
83347: LD_VAR 0 4
83351: PPUSH
83352: LD_VAR 0 5
83356: PPUSH
83357: CALL_OW 488
83361: IFFALSE 83382
// ComTurnXY ( unit , x , y ) ;
83363: LD_VAR 0 1
83367: PPUSH
83368: LD_VAR 0 4
83372: PPUSH
83373: LD_VAR 0 5
83377: PPUSH
83378: CALL_OW 118
// end ;
83382: LD_VAR 0 3
83386: RET
// export function SeeUnits ( side , units ) ; var i ; begin
83387: LD_INT 0
83389: PPUSH
83390: PPUSH
// result := false ;
83391: LD_ADDR_VAR 0 3
83395: PUSH
83396: LD_INT 0
83398: ST_TO_ADDR
// if not units then
83399: LD_VAR 0 2
83403: NOT
83404: IFFALSE 83408
// exit ;
83406: GO 83453
// for i in units do
83408: LD_ADDR_VAR 0 4
83412: PUSH
83413: LD_VAR 0 2
83417: PUSH
83418: FOR_IN
83419: IFFALSE 83451
// if See ( side , i ) then
83421: LD_VAR 0 1
83425: PPUSH
83426: LD_VAR 0 4
83430: PPUSH
83431: CALL_OW 292
83435: IFFALSE 83449
// begin result := true ;
83437: LD_ADDR_VAR 0 3
83441: PUSH
83442: LD_INT 1
83444: ST_TO_ADDR
// exit ;
83445: POP
83446: POP
83447: GO 83453
// end ;
83449: GO 83418
83451: POP
83452: POP
// end ;
83453: LD_VAR 0 3
83457: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
83458: LD_INT 0
83460: PPUSH
83461: PPUSH
83462: PPUSH
83463: PPUSH
// if not unit or not points then
83464: LD_VAR 0 1
83468: NOT
83469: PUSH
83470: LD_VAR 0 2
83474: NOT
83475: OR
83476: IFFALSE 83480
// exit ;
83478: GO 83570
// dist := 99999 ;
83480: LD_ADDR_VAR 0 5
83484: PUSH
83485: LD_INT 99999
83487: ST_TO_ADDR
// for i in points do
83488: LD_ADDR_VAR 0 4
83492: PUSH
83493: LD_VAR 0 2
83497: PUSH
83498: FOR_IN
83499: IFFALSE 83568
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
83501: LD_ADDR_VAR 0 6
83505: PUSH
83506: LD_VAR 0 1
83510: PPUSH
83511: LD_VAR 0 4
83515: PUSH
83516: LD_INT 1
83518: ARRAY
83519: PPUSH
83520: LD_VAR 0 4
83524: PUSH
83525: LD_INT 2
83527: ARRAY
83528: PPUSH
83529: CALL_OW 297
83533: ST_TO_ADDR
// if tmpDist < dist then
83534: LD_VAR 0 6
83538: PUSH
83539: LD_VAR 0 5
83543: LESS
83544: IFFALSE 83566
// begin result := i ;
83546: LD_ADDR_VAR 0 3
83550: PUSH
83551: LD_VAR 0 4
83555: ST_TO_ADDR
// dist := tmpDist ;
83556: LD_ADDR_VAR 0 5
83560: PUSH
83561: LD_VAR 0 6
83565: ST_TO_ADDR
// end ; end ;
83566: GO 83498
83568: POP
83569: POP
// end ;
83570: LD_VAR 0 3
83574: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
83575: LD_INT 0
83577: PPUSH
// uc_side := side ;
83578: LD_ADDR_OWVAR 20
83582: PUSH
83583: LD_VAR 0 1
83587: ST_TO_ADDR
// uc_nation := 3 ;
83588: LD_ADDR_OWVAR 21
83592: PUSH
83593: LD_INT 3
83595: ST_TO_ADDR
// vc_chassis := 25 ;
83596: LD_ADDR_OWVAR 37
83600: PUSH
83601: LD_INT 25
83603: ST_TO_ADDR
// vc_engine := engine_siberite ;
83604: LD_ADDR_OWVAR 39
83608: PUSH
83609: LD_INT 3
83611: ST_TO_ADDR
// vc_control := control_computer ;
83612: LD_ADDR_OWVAR 38
83616: PUSH
83617: LD_INT 3
83619: ST_TO_ADDR
// vc_weapon := 59 ;
83620: LD_ADDR_OWVAR 40
83624: PUSH
83625: LD_INT 59
83627: ST_TO_ADDR
// result := CreateVehicle ;
83628: LD_ADDR_VAR 0 5
83632: PUSH
83633: CALL_OW 45
83637: ST_TO_ADDR
// SetDir ( result , d ) ;
83638: LD_VAR 0 5
83642: PPUSH
83643: LD_VAR 0 4
83647: PPUSH
83648: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
83652: LD_VAR 0 5
83656: PPUSH
83657: LD_VAR 0 2
83661: PPUSH
83662: LD_VAR 0 3
83666: PPUSH
83667: LD_INT 0
83669: PPUSH
83670: CALL_OW 48
// end ;
83674: LD_VAR 0 5
83678: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
83679: LD_INT 0
83681: PPUSH
83682: PPUSH
83683: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
83684: LD_ADDR_VAR 0 2
83688: PUSH
83689: LD_INT 0
83691: PUSH
83692: LD_INT 0
83694: PUSH
83695: LD_INT 0
83697: PUSH
83698: LD_INT 0
83700: PUSH
83701: EMPTY
83702: LIST
83703: LIST
83704: LIST
83705: LIST
83706: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
83707: LD_VAR 0 1
83711: NOT
83712: PUSH
83713: LD_VAR 0 1
83717: PPUSH
83718: CALL_OW 264
83722: PUSH
83723: LD_INT 12
83725: PUSH
83726: LD_INT 51
83728: PUSH
83729: LD_INT 32
83731: PUSH
83732: LD_INT 89
83734: PUSH
83735: EMPTY
83736: LIST
83737: LIST
83738: LIST
83739: LIST
83740: IN
83741: NOT
83742: OR
83743: IFFALSE 83747
// exit ;
83745: GO 83845
// for i := 1 to 3 do
83747: LD_ADDR_VAR 0 3
83751: PUSH
83752: DOUBLE
83753: LD_INT 1
83755: DEC
83756: ST_TO_ADDR
83757: LD_INT 3
83759: PUSH
83760: FOR_TO
83761: IFFALSE 83843
// begin tmp := GetCargo ( cargo , i ) ;
83763: LD_ADDR_VAR 0 4
83767: PUSH
83768: LD_VAR 0 1
83772: PPUSH
83773: LD_VAR 0 3
83777: PPUSH
83778: CALL_OW 289
83782: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
83783: LD_ADDR_VAR 0 2
83787: PUSH
83788: LD_VAR 0 2
83792: PPUSH
83793: LD_VAR 0 3
83797: PPUSH
83798: LD_VAR 0 4
83802: PPUSH
83803: CALL_OW 1
83807: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
83808: LD_ADDR_VAR 0 2
83812: PUSH
83813: LD_VAR 0 2
83817: PPUSH
83818: LD_INT 4
83820: PPUSH
83821: LD_VAR 0 2
83825: PUSH
83826: LD_INT 4
83828: ARRAY
83829: PUSH
83830: LD_VAR 0 4
83834: PLUS
83835: PPUSH
83836: CALL_OW 1
83840: ST_TO_ADDR
// end ;
83841: GO 83760
83843: POP
83844: POP
// end ;
83845: LD_VAR 0 2
83849: RET
// export function Length ( array ) ; begin
83850: LD_INT 0
83852: PPUSH
// result := array + 0 ;
83853: LD_ADDR_VAR 0 2
83857: PUSH
83858: LD_VAR 0 1
83862: PUSH
83863: LD_INT 0
83865: PLUS
83866: ST_TO_ADDR
// end ;
83867: LD_VAR 0 2
83871: RET
// export function PrepareArray ( array ) ; begin
83872: LD_INT 0
83874: PPUSH
// result := array diff 0 ;
83875: LD_ADDR_VAR 0 2
83879: PUSH
83880: LD_VAR 0 1
83884: PUSH
83885: LD_INT 0
83887: DIFF
83888: ST_TO_ADDR
// if not result [ 1 ] then
83889: LD_VAR 0 2
83893: PUSH
83894: LD_INT 1
83896: ARRAY
83897: NOT
83898: IFFALSE 83918
// result := Delete ( result , 1 ) ;
83900: LD_ADDR_VAR 0 2
83904: PUSH
83905: LD_VAR 0 2
83909: PPUSH
83910: LD_INT 1
83912: PPUSH
83913: CALL_OW 3
83917: ST_TO_ADDR
// end ;
83918: LD_VAR 0 2
83922: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
83923: LD_INT 0
83925: PPUSH
83926: PPUSH
83927: PPUSH
83928: PPUSH
// sibRocketRange := 25 ;
83929: LD_ADDR_VAR 0 6
83933: PUSH
83934: LD_INT 25
83936: ST_TO_ADDR
// result := false ;
83937: LD_ADDR_VAR 0 4
83941: PUSH
83942: LD_INT 0
83944: ST_TO_ADDR
// for i := 0 to 5 do
83945: LD_ADDR_VAR 0 5
83949: PUSH
83950: DOUBLE
83951: LD_INT 0
83953: DEC
83954: ST_TO_ADDR
83955: LD_INT 5
83957: PUSH
83958: FOR_TO
83959: IFFALSE 84026
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
83961: LD_VAR 0 1
83965: PPUSH
83966: LD_VAR 0 5
83970: PPUSH
83971: LD_VAR 0 6
83975: PPUSH
83976: CALL_OW 272
83980: PPUSH
83981: LD_VAR 0 2
83985: PPUSH
83986: LD_VAR 0 5
83990: PPUSH
83991: LD_VAR 0 6
83995: PPUSH
83996: CALL_OW 273
84000: PPUSH
84001: LD_VAR 0 3
84005: PPUSH
84006: CALL_OW 309
84010: IFFALSE 84024
// begin result := true ;
84012: LD_ADDR_VAR 0 4
84016: PUSH
84017: LD_INT 1
84019: ST_TO_ADDR
// exit ;
84020: POP
84021: POP
84022: GO 84028
// end ;
84024: GO 83958
84026: POP
84027: POP
// end ;
84028: LD_VAR 0 4
84032: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
84033: LD_INT 0
84035: PPUSH
84036: PPUSH
84037: PPUSH
// if btype = b_depot then
84038: LD_VAR 0 2
84042: PUSH
84043: LD_INT 0
84045: EQUAL
84046: IFFALSE 84058
// begin result := true ;
84048: LD_ADDR_VAR 0 3
84052: PUSH
84053: LD_INT 1
84055: ST_TO_ADDR
// exit ;
84056: GO 84174
// end ; pom := GetBase ( depot ) ;
84058: LD_ADDR_VAR 0 4
84062: PUSH
84063: LD_VAR 0 1
84067: PPUSH
84068: CALL_OW 274
84072: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
84073: LD_ADDR_VAR 0 5
84077: PUSH
84078: LD_VAR 0 2
84082: PPUSH
84083: LD_VAR 0 1
84087: PPUSH
84088: CALL_OW 248
84092: PPUSH
84093: CALL_OW 450
84097: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
84098: LD_ADDR_VAR 0 3
84102: PUSH
84103: LD_VAR 0 4
84107: PPUSH
84108: LD_INT 1
84110: PPUSH
84111: CALL_OW 275
84115: PUSH
84116: LD_VAR 0 5
84120: PUSH
84121: LD_INT 1
84123: ARRAY
84124: GREATEREQUAL
84125: PUSH
84126: LD_VAR 0 4
84130: PPUSH
84131: LD_INT 2
84133: PPUSH
84134: CALL_OW 275
84138: PUSH
84139: LD_VAR 0 5
84143: PUSH
84144: LD_INT 2
84146: ARRAY
84147: GREATEREQUAL
84148: AND
84149: PUSH
84150: LD_VAR 0 4
84154: PPUSH
84155: LD_INT 3
84157: PPUSH
84158: CALL_OW 275
84162: PUSH
84163: LD_VAR 0 5
84167: PUSH
84168: LD_INT 3
84170: ARRAY
84171: GREATEREQUAL
84172: AND
84173: ST_TO_ADDR
// end ;
84174: LD_VAR 0 3
84178: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
84179: LD_INT 0
84181: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
84182: LD_VAR 0 1
84186: PPUSH
84187: LD_VAR 0 2
84191: PPUSH
84192: LD_INT 0
84194: PPUSH
84195: LD_INT 0
84197: PPUSH
84198: LD_INT 1
84200: PPUSH
84201: LD_INT 0
84203: PPUSH
84204: CALL_OW 587
// end ;
84208: LD_VAR 0 3
84212: RET
// export function CenterOnNow ( unit ) ; begin
84213: LD_INT 0
84215: PPUSH
// result := IsInUnit ( unit ) ;
84216: LD_ADDR_VAR 0 2
84220: PUSH
84221: LD_VAR 0 1
84225: PPUSH
84226: CALL_OW 310
84230: ST_TO_ADDR
// if not result then
84231: LD_VAR 0 2
84235: NOT
84236: IFFALSE 84248
// result := unit ;
84238: LD_ADDR_VAR 0 2
84242: PUSH
84243: LD_VAR 0 1
84247: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
84248: LD_VAR 0 1
84252: PPUSH
84253: CALL_OW 87
// end ;
84257: LD_VAR 0 2
84261: RET
// export function ComMoveHex ( unit , hex ) ; begin
84262: LD_INT 0
84264: PPUSH
// if not hex then
84265: LD_VAR 0 2
84269: NOT
84270: IFFALSE 84274
// exit ;
84272: GO 84327
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
84274: LD_VAR 0 2
84278: PUSH
84279: LD_INT 1
84281: ARRAY
84282: PPUSH
84283: LD_VAR 0 2
84287: PUSH
84288: LD_INT 2
84290: ARRAY
84291: PPUSH
84292: CALL_OW 428
84296: IFFALSE 84300
// exit ;
84298: GO 84327
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
84300: LD_VAR 0 1
84304: PPUSH
84305: LD_VAR 0 2
84309: PUSH
84310: LD_INT 1
84312: ARRAY
84313: PPUSH
84314: LD_VAR 0 2
84318: PUSH
84319: LD_INT 2
84321: ARRAY
84322: PPUSH
84323: CALL_OW 111
// end ;
84327: LD_VAR 0 3
84331: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
84332: LD_INT 0
84334: PPUSH
84335: PPUSH
84336: PPUSH
// if not unit or not enemy then
84337: LD_VAR 0 1
84341: NOT
84342: PUSH
84343: LD_VAR 0 2
84347: NOT
84348: OR
84349: IFFALSE 84353
// exit ;
84351: GO 84477
// x := GetX ( enemy ) ;
84353: LD_ADDR_VAR 0 4
84357: PUSH
84358: LD_VAR 0 2
84362: PPUSH
84363: CALL_OW 250
84367: ST_TO_ADDR
// y := GetY ( enemy ) ;
84368: LD_ADDR_VAR 0 5
84372: PUSH
84373: LD_VAR 0 2
84377: PPUSH
84378: CALL_OW 251
84382: ST_TO_ADDR
// if ValidHex ( x , y ) then
84383: LD_VAR 0 4
84387: PPUSH
84388: LD_VAR 0 5
84392: PPUSH
84393: CALL_OW 488
84397: IFFALSE 84477
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
84399: LD_VAR 0 2
84403: PPUSH
84404: CALL_OW 247
84408: PUSH
84409: LD_INT 3
84411: PUSH
84412: LD_INT 2
84414: PUSH
84415: EMPTY
84416: LIST
84417: LIST
84418: IN
84419: PUSH
84420: LD_VAR 0 1
84424: PPUSH
84425: CALL_OW 255
84429: PPUSH
84430: LD_VAR 0 2
84434: PPUSH
84435: CALL_OW 292
84439: OR
84440: IFFALSE 84458
// ComAttackUnit ( unit , enemy ) else
84442: LD_VAR 0 1
84446: PPUSH
84447: LD_VAR 0 2
84451: PPUSH
84452: CALL_OW 115
84456: GO 84477
// ComAgressiveMove ( unit , x , y ) ;
84458: LD_VAR 0 1
84462: PPUSH
84463: LD_VAR 0 4
84467: PPUSH
84468: LD_VAR 0 5
84472: PPUSH
84473: CALL_OW 114
// end ;
84477: LD_VAR 0 3
84481: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
84482: LD_INT 0
84484: PPUSH
84485: PPUSH
84486: PPUSH
// list := AreaToList ( area , 0 ) ;
84487: LD_ADDR_VAR 0 5
84491: PUSH
84492: LD_VAR 0 1
84496: PPUSH
84497: LD_INT 0
84499: PPUSH
84500: CALL_OW 517
84504: ST_TO_ADDR
// if not list then
84505: LD_VAR 0 5
84509: NOT
84510: IFFALSE 84514
// exit ;
84512: GO 84644
// if all then
84514: LD_VAR 0 2
84518: IFFALSE 84606
// begin for i := 1 to list [ 1 ] do
84520: LD_ADDR_VAR 0 4
84524: PUSH
84525: DOUBLE
84526: LD_INT 1
84528: DEC
84529: ST_TO_ADDR
84530: LD_VAR 0 5
84534: PUSH
84535: LD_INT 1
84537: ARRAY
84538: PUSH
84539: FOR_TO
84540: IFFALSE 84602
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
84542: LD_ADDR_VAR 0 3
84546: PUSH
84547: LD_VAR 0 3
84551: PPUSH
84552: LD_VAR 0 3
84556: PUSH
84557: LD_INT 1
84559: PLUS
84560: PPUSH
84561: LD_VAR 0 5
84565: PUSH
84566: LD_INT 1
84568: ARRAY
84569: PUSH
84570: LD_VAR 0 4
84574: ARRAY
84575: PUSH
84576: LD_VAR 0 5
84580: PUSH
84581: LD_INT 2
84583: ARRAY
84584: PUSH
84585: LD_VAR 0 4
84589: ARRAY
84590: PUSH
84591: EMPTY
84592: LIST
84593: LIST
84594: PPUSH
84595: CALL_OW 1
84599: ST_TO_ADDR
84600: GO 84539
84602: POP
84603: POP
// exit ;
84604: GO 84644
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
84606: LD_ADDR_VAR 0 3
84610: PUSH
84611: LD_VAR 0 5
84615: PUSH
84616: LD_INT 1
84618: ARRAY
84619: PUSH
84620: LD_INT 1
84622: ARRAY
84623: PUSH
84624: LD_VAR 0 5
84628: PUSH
84629: LD_INT 2
84631: ARRAY
84632: PUSH
84633: LD_INT 1
84635: ARRAY
84636: PUSH
84637: EMPTY
84638: LIST
84639: LIST
84640: PUSH
84641: EMPTY
84642: LIST
84643: ST_TO_ADDR
// end ;
84644: LD_VAR 0 3
84648: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
84649: LD_INT 0
84651: PPUSH
84652: PPUSH
// list := AreaToList ( area , 0 ) ;
84653: LD_ADDR_VAR 0 4
84657: PUSH
84658: LD_VAR 0 1
84662: PPUSH
84663: LD_INT 0
84665: PPUSH
84666: CALL_OW 517
84670: ST_TO_ADDR
// if not list then
84671: LD_VAR 0 4
84675: NOT
84676: IFFALSE 84680
// exit ;
84678: GO 84721
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
84680: LD_ADDR_VAR 0 3
84684: PUSH
84685: LD_VAR 0 4
84689: PUSH
84690: LD_INT 1
84692: ARRAY
84693: PUSH
84694: LD_INT 1
84696: ARRAY
84697: PUSH
84698: LD_VAR 0 4
84702: PUSH
84703: LD_INT 2
84705: ARRAY
84706: PUSH
84707: LD_INT 1
84709: ARRAY
84710: PUSH
84711: LD_VAR 0 2
84715: PUSH
84716: EMPTY
84717: LIST
84718: LIST
84719: LIST
84720: ST_TO_ADDR
// end ;
84721: LD_VAR 0 3
84725: RET
// export function First ( array ) ; begin
84726: LD_INT 0
84728: PPUSH
// if not array then
84729: LD_VAR 0 1
84733: NOT
84734: IFFALSE 84738
// exit ;
84736: GO 84752
// result := array [ 1 ] ;
84738: LD_ADDR_VAR 0 2
84742: PUSH
84743: LD_VAR 0 1
84747: PUSH
84748: LD_INT 1
84750: ARRAY
84751: ST_TO_ADDR
// end ;
84752: LD_VAR 0 2
84756: RET
// export function Last ( array ) ; begin
84757: LD_INT 0
84759: PPUSH
// if not array then
84760: LD_VAR 0 1
84764: NOT
84765: IFFALSE 84769
// exit ;
84767: GO 84785
// result := array [ array ] ;
84769: LD_ADDR_VAR 0 2
84773: PUSH
84774: LD_VAR 0 1
84778: PUSH
84779: LD_VAR 0 1
84783: ARRAY
84784: ST_TO_ADDR
// end ;
84785: LD_VAR 0 2
84789: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
84790: LD_INT 0
84792: PPUSH
84793: PPUSH
// result := [ ] ;
84794: LD_ADDR_VAR 0 5
84798: PUSH
84799: EMPTY
84800: ST_TO_ADDR
// if not array then
84801: LD_VAR 0 1
84805: NOT
84806: IFFALSE 84810
// exit ;
84808: GO 84922
// for i := 1 to array do
84810: LD_ADDR_VAR 0 6
84814: PUSH
84815: DOUBLE
84816: LD_INT 1
84818: DEC
84819: ST_TO_ADDR
84820: LD_VAR 0 1
84824: PUSH
84825: FOR_TO
84826: IFFALSE 84920
// if array [ i ] [ index ] = value then
84828: LD_VAR 0 1
84832: PUSH
84833: LD_VAR 0 6
84837: ARRAY
84838: PUSH
84839: LD_VAR 0 2
84843: ARRAY
84844: PUSH
84845: LD_VAR 0 3
84849: EQUAL
84850: IFFALSE 84918
// begin if indexColumn then
84852: LD_VAR 0 4
84856: IFFALSE 84892
// result := Join ( result , array [ i ] [ indexColumn ] ) else
84858: LD_ADDR_VAR 0 5
84862: PUSH
84863: LD_VAR 0 5
84867: PPUSH
84868: LD_VAR 0 1
84872: PUSH
84873: LD_VAR 0 6
84877: ARRAY
84878: PUSH
84879: LD_VAR 0 4
84883: ARRAY
84884: PPUSH
84885: CALL 80110 0 2
84889: ST_TO_ADDR
84890: GO 84918
// result := Join ( result , array [ i ] ) ;
84892: LD_ADDR_VAR 0 5
84896: PUSH
84897: LD_VAR 0 5
84901: PPUSH
84902: LD_VAR 0 1
84906: PUSH
84907: LD_VAR 0 6
84911: ARRAY
84912: PPUSH
84913: CALL 80110 0 2
84917: ST_TO_ADDR
// end ;
84918: GO 84825
84920: POP
84921: POP
// end ;
84922: LD_VAR 0 5
84926: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
84927: LD_INT 0
84929: PPUSH
// if not vehicles or not parkingPoint then
84930: LD_VAR 0 1
84934: NOT
84935: PUSH
84936: LD_VAR 0 2
84940: NOT
84941: OR
84942: IFFALSE 84946
// exit ;
84944: GO 85044
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
84946: LD_ADDR_VAR 0 1
84950: PUSH
84951: LD_VAR 0 1
84955: PPUSH
84956: LD_INT 50
84958: PUSH
84959: EMPTY
84960: LIST
84961: PUSH
84962: LD_INT 3
84964: PUSH
84965: LD_INT 92
84967: PUSH
84968: LD_VAR 0 2
84972: PUSH
84973: LD_INT 1
84975: ARRAY
84976: PUSH
84977: LD_VAR 0 2
84981: PUSH
84982: LD_INT 2
84984: ARRAY
84985: PUSH
84986: LD_INT 8
84988: PUSH
84989: EMPTY
84990: LIST
84991: LIST
84992: LIST
84993: LIST
84994: PUSH
84995: EMPTY
84996: LIST
84997: LIST
84998: PUSH
84999: EMPTY
85000: LIST
85001: LIST
85002: PPUSH
85003: CALL_OW 72
85007: ST_TO_ADDR
// if not vehicles then
85008: LD_VAR 0 1
85012: NOT
85013: IFFALSE 85017
// exit ;
85015: GO 85044
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
85017: LD_VAR 0 1
85021: PPUSH
85022: LD_VAR 0 2
85026: PUSH
85027: LD_INT 1
85029: ARRAY
85030: PPUSH
85031: LD_VAR 0 2
85035: PUSH
85036: LD_INT 2
85038: ARRAY
85039: PPUSH
85040: CALL_OW 111
// end ;
85044: LD_VAR 0 3
85048: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
85049: LD_INT 0
85051: PPUSH
85052: PPUSH
85053: PPUSH
// if not side or not area then
85054: LD_VAR 0 1
85058: NOT
85059: PUSH
85060: LD_VAR 0 2
85064: NOT
85065: OR
85066: IFFALSE 85070
// exit ;
85068: GO 85189
// tmp := AreaToList ( area , 0 ) ;
85070: LD_ADDR_VAR 0 5
85074: PUSH
85075: LD_VAR 0 2
85079: PPUSH
85080: LD_INT 0
85082: PPUSH
85083: CALL_OW 517
85087: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
85088: LD_ADDR_VAR 0 4
85092: PUSH
85093: DOUBLE
85094: LD_INT 1
85096: DEC
85097: ST_TO_ADDR
85098: LD_VAR 0 5
85102: PUSH
85103: LD_INT 1
85105: ARRAY
85106: PUSH
85107: FOR_TO
85108: IFFALSE 85187
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
85110: LD_VAR 0 5
85114: PUSH
85115: LD_INT 1
85117: ARRAY
85118: PUSH
85119: LD_VAR 0 4
85123: ARRAY
85124: PPUSH
85125: LD_VAR 0 5
85129: PUSH
85130: LD_INT 2
85132: ARRAY
85133: PUSH
85134: LD_VAR 0 4
85138: ARRAY
85139: PPUSH
85140: CALL_OW 351
85144: IFFALSE 85185
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
85146: LD_VAR 0 5
85150: PUSH
85151: LD_INT 1
85153: ARRAY
85154: PUSH
85155: LD_VAR 0 4
85159: ARRAY
85160: PPUSH
85161: LD_VAR 0 5
85165: PUSH
85166: LD_INT 2
85168: ARRAY
85169: PUSH
85170: LD_VAR 0 4
85174: ARRAY
85175: PPUSH
85176: LD_VAR 0 1
85180: PPUSH
85181: CALL_OW 244
// end ;
85185: GO 85107
85187: POP
85188: POP
// end ; end_of_file
85189: LD_VAR 0 3
85193: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
85194: LD_VAR 0 1
85198: PPUSH
85199: LD_VAR 0 2
85203: PPUSH
85204: LD_VAR 0 3
85208: PPUSH
85209: LD_VAR 0 4
85213: PPUSH
85214: LD_VAR 0 5
85218: PPUSH
85219: LD_VAR 0 6
85223: PPUSH
85224: CALL 21715 0 6
// end ;
85228: PPOPN 6
85230: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
85231: LD_INT 0
85233: PPUSH
// begin if not units then
85234: LD_VAR 0 1
85238: NOT
85239: IFFALSE 85243
// exit ;
85241: GO 85243
// end ;
85243: PPOPN 7
85245: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
85246: CALL 21602 0 0
// end ;
85250: PPOPN 1
85252: END
