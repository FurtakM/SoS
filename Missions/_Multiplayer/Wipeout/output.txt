// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 50 0 0
// CreateNature ;
   8: CALL 857 0 0
// PrepareArabian ;
  12: CALL 1231 0 0
// PrepareAmerican ;
  16: CALL 6760 0 0
// PrepareRussian ;
  20: CALL 2219 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 45
// begin omarCountdown := 9 9$00 ;
  30: LD_ADDR_EXP 22
  34: PUSH
  35: LD_INT 18900
  37: ST_TO_ADDR
// FogOff ( 2 ) ;
  38: LD_INT 2
  40: PPUSH
  41: CALL_OW 344
// end ; Action ;
  45: CALL 8320 0 0
// end ;
  49: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown , kaiaKilledByRussian , kaganCaptured , cargoRecycled ; function Init ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// prefix := 03_ ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_STRING 03_
  68: ST_TO_ADDR
// baseConstructed := false ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// labConstructed := false ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// russianAlert := false ;
  93: LD_ADDR_EXP 9
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// activeGrishkoAI := true ;
 101: LD_ADDR_EXP 10
 105: PUSH
 106: LD_INT 1
 108: ST_TO_ADDR
// allowHeikeAttack := false ;
 109: LD_ADDR_EXP 11
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// allowToPatrol := false ;
 117: LD_ADDR_EXP 12
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// omicronFall := false ;
 125: LD_ADDR_EXP 13
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// startAttackOnOmicron := false ;
 133: LD_ADDR_EXP 6
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// kirovDestroyed := false ;
 141: LD_ADDR_EXP 16
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// beriaDestroyed := false ;
 149: LD_ADDR_EXP 17
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// kaganDestroyed := false ;
 157: LD_ADDR_EXP 18
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// retreatFromOmicron := false ;
 165: LD_ADDR_EXP 20
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// spottedByPatrol := false ;
 173: LD_ADDR_EXP 7
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// omarCountdown := [ 30 30$00 , 27 27$00 , 25 25$00 , 23 23$00 ] [ Difficulty ] ;
 181: LD_ADDR_EXP 22
 185: PUSH
 186: LD_INT 63000
 188: PUSH
 189: LD_INT 56700
 191: PUSH
 192: LD_INT 52500
 194: PUSH
 195: LD_INT 48300
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: LIST
 202: LIST
 203: PUSH
 204: LD_OWVAR 67
 208: ARRAY
 209: ST_TO_ADDR
// escapeCounter := 0 ;
 210: LD_ADDR_EXP 19
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// loseCounter := 0 ;
 218: LD_ADDR_EXP 14
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// labCaptured := false ;
 226: LD_ADDR_EXP 21
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// hillBase := false ;
 234: LD_ADDR_EXP 15
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 242: LD_ADDR_EXP 8
 246: PUSH
 247: LD_INT 3
 249: PUSH
 250: LD_INT 4
 252: PUSH
 253: LD_INT 5
 255: PUSH
 256: LD_INT 6
 258: PUSH
 259: LD_INT 7
 261: PUSH
 262: LD_INT 8
 264: PUSH
 265: EMPTY
 266: LIST
 267: LIST
 268: LIST
 269: LIST
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 273: LD_ADDR_EXP 23
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// kaganCaptured := false ;
 281: LD_ADDR_EXP 24
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// cargoRecycled := LoadVariable ( 03_CargoRecycled , false ) ;
 289: LD_ADDR_EXP 25
 293: PUSH
 294: LD_STRING 03_CargoRecycled
 296: PPUSH
 297: LD_INT 0
 299: PPUSH
 300: CALL_OW 30
 304: ST_TO_ADDR
// end ;
 305: LD_VAR 0 1
 309: RET
// every 0 0$1 trigger debug do var i ;
 310: LD_EXP 1
 314: IFFALSE 383
 316: GO 318
 318: DISABLE
 319: LD_INT 0
 321: PPUSH
// begin enable ;
 322: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 323: LD_ADDR_VAR 0 1
 327: PUSH
 328: LD_INT 22
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 3
 340: PUSH
 341: LD_INT 21
 343: PUSH
 344: LD_INT 3
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: PPUSH
 359: CALL_OW 69
 363: PUSH
 364: FOR_IN
 365: IFFALSE 381
// SetLives ( i , 1000 ) ;
 367: LD_VAR 0 1
 371: PPUSH
 372: LD_INT 1000
 374: PPUSH
 375: CALL_OW 234
 379: GO 364
 381: POP
 382: POP
// end ; end_of_file
 383: PPOPN 1
 385: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 386: LD_INT 0
 388: PPUSH
// uc_side := side ;
 389: LD_ADDR_OWVAR 20
 393: PUSH
 394: LD_VAR 0 1
 398: ST_TO_ADDR
// uc_nation := nation ;
 399: LD_ADDR_OWVAR 21
 403: PUSH
 404: LD_VAR 0 2
 408: ST_TO_ADDR
// vc_chassis := chassis ;
 409: LD_ADDR_OWVAR 37
 413: PUSH
 414: LD_VAR 0 3
 418: ST_TO_ADDR
// vc_engine := engine ;
 419: LD_ADDR_OWVAR 39
 423: PUSH
 424: LD_VAR 0 4
 428: ST_TO_ADDR
// vc_control := control ;
 429: LD_ADDR_OWVAR 38
 433: PUSH
 434: LD_VAR 0 5
 438: ST_TO_ADDR
// vc_weapon := weapon ;
 439: LD_ADDR_OWVAR 40
 443: PUSH
 444: LD_VAR 0 6
 448: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 449: LD_ADDR_OWVAR 41
 453: PUSH
 454: LD_VAR 0 7
 458: ST_TO_ADDR
// result := CreateVehicle ;
 459: LD_ADDR_VAR 0 8
 463: PUSH
 464: CALL_OW 45
 468: ST_TO_ADDR
// end ;
 469: LD_VAR 0 8
 473: RET
// export function SayX ( units , ident ) ; var i ; begin
 474: LD_INT 0
 476: PPUSH
 477: PPUSH
// result := false ;
 478: LD_ADDR_VAR 0 3
 482: PUSH
 483: LD_INT 0
 485: ST_TO_ADDR
// if not units then
 486: LD_VAR 0 1
 490: NOT
 491: IFFALSE 495
// exit ;
 493: GO 549
// for i in units do
 495: LD_ADDR_VAR 0 4
 499: PUSH
 500: LD_VAR 0 1
 504: PUSH
 505: FOR_IN
 506: IFFALSE 547
// if IsOk ( i ) then
 508: LD_VAR 0 4
 512: PPUSH
 513: CALL_OW 302
 517: IFFALSE 545
// begin Say ( i , ident ) ;
 519: LD_VAR 0 4
 523: PPUSH
 524: LD_VAR 0 2
 528: PPUSH
 529: CALL_OW 88
// result := i ;
 533: LD_ADDR_VAR 0 3
 537: PUSH
 538: LD_VAR 0 4
 542: ST_TO_ADDR
// break ;
 543: GO 547
// end ;
 545: GO 505
 547: POP
 548: POP
// end ;
 549: LD_VAR 0 3
 553: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 554: LD_INT 0
 556: PPUSH
 557: PPUSH
 558: PPUSH
// if not observer or not unit then
 559: LD_VAR 0 1
 563: NOT
 564: PUSH
 565: LD_VAR 0 2
 569: NOT
 570: OR
 571: IFFALSE 575
// exit ;
 573: GO 623
// if not See ( GetSide ( observer ) , unit ) then
 575: LD_VAR 0 1
 579: PPUSH
 580: CALL_OW 255
 584: PPUSH
 585: LD_VAR 0 2
 589: PPUSH
 590: CALL_OW 292
 594: NOT
 595: IFFALSE 599
// exit ;
 597: GO 623
// result := GetDistUnits ( observer , unit ) < 12 ;
 599: LD_ADDR_VAR 0 3
 603: PUSH
 604: LD_VAR 0 1
 608: PPUSH
 609: LD_VAR 0 2
 613: PPUSH
 614: CALL_OW 296
 618: PUSH
 619: LD_INT 12
 621: LESS
 622: ST_TO_ADDR
// end ;
 623: LD_VAR 0 3
 627: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 628: LD_INT 0
 630: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 631: LD_VAR 0 2
 635: PUSH
 636: LD_INT 1
 638: ARRAY
 639: PPUSH
 640: LD_VAR 0 2
 644: PUSH
 645: LD_INT 2
 647: ARRAY
 648: PPUSH
 649: CALL_OW 488
 653: PUSH
 654: LD_VAR 0 2
 658: PUSH
 659: LD_INT 1
 661: ARRAY
 662: PPUSH
 663: LD_VAR 0 2
 667: PUSH
 668: LD_INT 2
 670: ARRAY
 671: PPUSH
 672: CALL_OW 428
 676: PUSH
 677: LD_INT 0
 679: EQUAL
 680: AND
 681: IFFALSE 715
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 683: LD_VAR 0 1
 687: PPUSH
 688: LD_VAR 0 2
 692: PUSH
 693: LD_INT 1
 695: ARRAY
 696: PPUSH
 697: LD_VAR 0 2
 701: PUSH
 702: LD_INT 2
 704: ARRAY
 705: PPUSH
 706: LD_VAR 0 3
 710: PPUSH
 711: CALL_OW 48
// end ;
 715: LD_VAR 0 4
 719: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 720: LD_INT 0
 722: PPUSH
 723: PPUSH
// InitUc ;
 724: CALL_OW 18
// InitHc ;
 728: CALL_OW 19
// uc_side := 0 ;
 732: LD_ADDR_OWVAR 20
 736: PUSH
 737: LD_INT 0
 739: ST_TO_ADDR
// uc_nation := 0 ;
 740: LD_ADDR_OWVAR 21
 744: PUSH
 745: LD_INT 0
 747: ST_TO_ADDR
// for i = 1 to amount do
 748: LD_ADDR_VAR 0 4
 752: PUSH
 753: DOUBLE
 754: LD_INT 1
 756: DEC
 757: ST_TO_ADDR
 758: LD_VAR 0 2
 762: PUSH
 763: FOR_TO
 764: IFFALSE 846
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 766: LD_ADDR_OWVAR 29
 770: PUSH
 771: LD_INT 9
 773: PPUSH
 774: LD_INT 12
 776: PPUSH
 777: CALL_OW 12
 781: PUSH
 782: LD_INT 9
 784: PPUSH
 785: LD_INT 12
 787: PPUSH
 788: CALL_OW 12
 792: PUSH
 793: EMPTY
 794: LIST
 795: LIST
 796: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 797: LD_ADDR_OWVAR 35
 801: PUSH
 802: LD_INT 1
 804: NEG
 805: PPUSH
 806: LD_INT 1
 808: PPUSH
 809: CALL_OW 12
 813: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 814: LD_INT 0
 816: PPUSH
 817: LD_INT 12
 819: PPUSH
 820: LD_INT 1
 822: PPUSH
 823: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 827: CALL_OW 44
 831: PPUSH
 832: LD_VAR 0 1
 836: PPUSH
 837: LD_INT 0
 839: PPUSH
 840: CALL_OW 49
// end ;
 844: GO 763
 846: POP
 847: POP
// InitHc ;
 848: CALL_OW 19
// end ;
 852: LD_VAR 0 3
 856: RET
// export function CreateNature ; var i ; begin
 857: LD_INT 0
 859: PPUSH
 860: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 , 2 ] [ Difficulty ] ) ;
 861: LD_INT 18
 863: PPUSH
 864: LD_INT 5
 866: PUSH
 867: LD_INT 4
 869: PUSH
 870: LD_INT 3
 872: PUSH
 873: LD_INT 2
 875: PUSH
 876: EMPTY
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: PUSH
 882: LD_OWVAR 67
 886: ARRAY
 887: PPUSH
 888: CALL 720 0 2
// for i := 1 to 3 do
 892: LD_ADDR_VAR 0 2
 896: PUSH
 897: DOUBLE
 898: LD_INT 1
 900: DEC
 901: ST_TO_ADDR
 902: LD_INT 3
 904: PUSH
 905: FOR_TO
 906: IFFALSE 941
// begin hc_class := 21 ;
 908: LD_ADDR_OWVAR 28
 912: PUSH
 913: LD_INT 21
 915: ST_TO_ADDR
// hc_gallery :=  ;
 916: LD_ADDR_OWVAR 33
 920: PUSH
 921: LD_STRING 
 923: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 924: CALL_OW 44
 928: PPUSH
 929: LD_INT 18
 931: PPUSH
 932: LD_INT 0
 934: PPUSH
 935: CALL_OW 49
// end ;
 939: GO 905
 941: POP
 942: POP
// for i := 1 to 2 do
 943: LD_ADDR_VAR 0 2
 947: PUSH
 948: DOUBLE
 949: LD_INT 1
 951: DEC
 952: ST_TO_ADDR
 953: LD_INT 2
 955: PUSH
 956: FOR_TO
 957: IFFALSE 992
// begin hc_class := 18 ;
 959: LD_ADDR_OWVAR 28
 963: PUSH
 964: LD_INT 18
 966: ST_TO_ADDR
// hc_gallery :=  ;
 967: LD_ADDR_OWVAR 33
 971: PUSH
 972: LD_STRING 
 974: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
 975: CALL_OW 44
 979: PPUSH
 980: LD_INT 18
 982: PPUSH
 983: LD_INT 0
 985: PPUSH
 986: CALL_OW 49
// end ;
 990: GO 956
 992: POP
 993: POP
// for i := 1 to 2 do
 994: LD_ADDR_VAR 0 2
 998: PUSH
 999: DOUBLE
1000: LD_INT 1
1002: DEC
1003: ST_TO_ADDR
1004: LD_INT 2
1006: PUSH
1007: FOR_TO
1008: IFFALSE 1043
// begin hc_class := 13 ;
1010: LD_ADDR_OWVAR 28
1014: PUSH
1015: LD_INT 13
1017: ST_TO_ADDR
// hc_gallery :=  ;
1018: LD_ADDR_OWVAR 33
1022: PUSH
1023: LD_STRING 
1025: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1026: CALL_OW 44
1030: PPUSH
1031: LD_INT 18
1033: PPUSH
1034: LD_INT 0
1036: PPUSH
1037: CALL_OW 49
// end ;
1041: GO 1007
1043: POP
1044: POP
// end ;
1045: LD_VAR 0 1
1049: RET
// export function SeeEnemy ( sideList , enemySide , exceptUnits ) ; var i , s , tmp , tmp2 ; begin
1050: LD_INT 0
1052: PPUSH
1053: PPUSH
1054: PPUSH
1055: PPUSH
1056: PPUSH
// result := false ;
1057: LD_ADDR_VAR 0 4
1061: PUSH
1062: LD_INT 0
1064: ST_TO_ADDR
// if not sideList or not enemySide then
1065: LD_VAR 0 1
1069: NOT
1070: PUSH
1071: LD_VAR 0 2
1075: NOT
1076: OR
1077: IFFALSE 1081
// exit ;
1079: GO 1226
// tmp := FilterAllUnits ( [ f_side , enemySide ] ) ;
1081: LD_ADDR_VAR 0 7
1085: PUSH
1086: LD_INT 22
1088: PUSH
1089: LD_VAR 0 2
1093: PUSH
1094: EMPTY
1095: LIST
1096: LIST
1097: PPUSH
1098: CALL_OW 69
1102: ST_TO_ADDR
// if not tmp then
1103: LD_VAR 0 7
1107: NOT
1108: IFFALSE 1112
// exit ;
1110: GO 1226
// for s in sideList do
1112: LD_ADDR_VAR 0 6
1116: PUSH
1117: LD_VAR 0 1
1121: PUSH
1122: FOR_IN
1123: IFFALSE 1224
// for i in tmp do
1125: LD_ADDR_VAR 0 5
1129: PUSH
1130: LD_VAR 0 7
1134: PUSH
1135: FOR_IN
1136: IFFALSE 1220
// if See ( s , i ) then
1138: LD_VAR 0 6
1142: PPUSH
1143: LD_VAR 0 5
1147: PPUSH
1148: CALL_OW 292
1152: IFFALSE 1218
// begin tmp2 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , s ] ) , i ) ;
1154: LD_ADDR_VAR 0 8
1158: PUSH
1159: LD_INT 22
1161: PUSH
1162: LD_VAR 0 6
1166: PUSH
1167: EMPTY
1168: LIST
1169: LIST
1170: PPUSH
1171: CALL_OW 69
1175: PPUSH
1176: LD_VAR 0 5
1180: PPUSH
1181: CALL_OW 74
1185: ST_TO_ADDR
// if tmp2 in exceptUnits then
1186: LD_VAR 0 8
1190: PUSH
1191: LD_VAR 0 3
1195: IN
1196: IFFALSE 1202
// continue else
1198: GO 1135
1200: GO 1218
// begin result := tmp2 ;
1202: LD_ADDR_VAR 0 4
1206: PUSH
1207: LD_VAR 0 8
1211: ST_TO_ADDR
// exit ;
1212: POP
1213: POP
1214: POP
1215: POP
1216: GO 1226
// end ; end ;
1218: GO 1135
1220: POP
1221: POP
1222: GO 1122
1224: POP
1225: POP
// end ; end_of_file
1226: LD_VAR 0 4
1230: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , Shariff , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
1231: LD_INT 0
1233: PPUSH
1234: PPUSH
// if cargoRecycled then
1235: LD_EXP 25
1239: IFFALSE 1267
// begin SetTech ( tech_BasicTools , 2 , state_researched ) ;
1241: LD_INT 82
1243: PPUSH
1244: LD_INT 2
1246: PPUSH
1247: LD_INT 2
1249: PPUSH
1250: CALL_OW 322
// SetTech ( tech_Cargo , 2 , state_researched ) ;
1254: LD_INT 83
1256: PPUSH
1257: LD_INT 2
1259: PPUSH
1260: LD_INT 2
1262: PPUSH
1263: CALL_OW 322
// end ; uc_side := 5 ;
1267: LD_ADDR_OWVAR 20
1271: PUSH
1272: LD_INT 5
1274: ST_TO_ADDR
// uc_nation := 2 ;
1275: LD_ADDR_OWVAR 21
1279: PUSH
1280: LD_INT 2
1282: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1283: LD_ADDR_EXP 37
1287: PUSH
1288: LD_STRING Abdul
1290: PPUSH
1291: LD_INT 0
1293: PPUSH
1294: LD_STRING 
1296: PPUSH
1297: CALL 38657 0 3
1301: ST_TO_ADDR
// uc_side := 2 ;
1302: LD_ADDR_OWVAR 20
1306: PUSH
1307: LD_INT 2
1309: ST_TO_ADDR
// uc_nation := 2 ;
1310: LD_ADDR_OWVAR 21
1314: PUSH
1315: LD_INT 2
1317: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1318: LD_ADDR_EXP 26
1322: PUSH
1323: LD_STRING Heike
1325: PPUSH
1326: LD_EXP 1
1330: NOT
1331: PPUSH
1332: LD_EXP 2
1336: PPUSH
1337: CALL 38657 0 3
1341: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1342: LD_ADDR_EXP 29
1346: PUSH
1347: LD_STRING Ibrahim
1349: PPUSH
1350: LD_EXP 1
1354: NOT
1355: PPUSH
1356: LD_EXP 2
1360: PPUSH
1361: CALL 38657 0 3
1365: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1366: LD_ADDR_EXP 27
1370: PUSH
1371: LD_STRING Givi
1373: PPUSH
1374: LD_EXP 1
1378: NOT
1379: PPUSH
1380: LD_EXP 2
1384: PPUSH
1385: CALL 38657 0 3
1389: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1390: LD_ADDR_EXP 30
1394: PUSH
1395: LD_STRING Kamil
1397: PPUSH
1398: LD_EXP 1
1402: NOT
1403: PPUSH
1404: LD_EXP 2
1408: PPUSH
1409: CALL 38657 0 3
1413: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1414: LD_ADDR_EXP 31
1418: PUSH
1419: LD_STRING Kaia
1421: PPUSH
1422: LD_EXP 1
1426: NOT
1427: PPUSH
1428: LD_EXP 2
1432: PPUSH
1433: CALL 38657 0 3
1437: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1438: LD_ADDR_EXP 32
1442: PUSH
1443: LD_STRING Sophia
1445: PPUSH
1446: LD_EXP 1
1450: NOT
1451: PPUSH
1452: LD_EXP 2
1456: PPUSH
1457: CALL 38657 0 3
1461: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1462: LD_ADDR_EXP 33
1466: PUSH
1467: LD_STRING Markov
1469: PPUSH
1470: LD_EXP 1
1474: NOT
1475: PPUSH
1476: LD_EXP 2
1480: PPUSH
1481: CALL 38657 0 3
1485: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1486: LD_ADDR_EXP 36
1490: PUSH
1491: LD_STRING Aviradze
1493: PPUSH
1494: LD_EXP 1
1498: NOT
1499: PPUSH
1500: LD_EXP 2
1504: PPUSH
1505: CALL 38657 0 3
1509: ST_TO_ADDR
// aviradzeSquad := [ ] ;
1510: LD_ADDR_EXP 40
1514: PUSH
1515: EMPTY
1516: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
1517: LD_ADDR_EXP 38
1521: PUSH
1522: LD_STRING 03_others
1524: PPUSH
1525: CALL_OW 31
1529: ST_TO_ADDR
// uc_side := 5 ;
1530: LD_ADDR_OWVAR 20
1534: PUSH
1535: LD_INT 5
1537: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
1538: LD_ADDR_EXP 35
1542: PUSH
1543: LD_STRING Kurt
1545: PPUSH
1546: LD_INT 0
1548: PPUSH
1549: LD_STRING 
1551: PPUSH
1552: CALL 38657 0 3
1556: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1557: LD_ADDR_EXP 28
1561: PUSH
1562: LD_STRING Mike
1564: PPUSH
1565: LD_EXP 1
1569: NOT
1570: PPUSH
1571: LD_EXP 2
1575: PPUSH
1576: CALL 38657 0 3
1580: ST_TO_ADDR
// if Mike then
1581: LD_EXP 28
1585: IFFALSE 1608
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
1587: LD_EXP 28
1591: PPUSH
1592: LD_INT 142
1594: PPUSH
1595: LD_INT 63
1597: PPUSH
1598: LD_INT 2
1600: PPUSH
1601: LD_INT 0
1603: PPUSH
1604: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
1608: LD_EXP 35
1612: PPUSH
1613: LD_INT 142
1615: PPUSH
1616: LD_INT 63
1618: PPUSH
1619: LD_INT 3
1621: PPUSH
1622: LD_INT 0
1624: PPUSH
1625: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
1629: LD_EXP 35
1633: PUSH
1634: LD_EXP 28
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: PPUSH
1643: CALL_OW 140
// end ;
1647: LD_VAR 0 1
1651: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
1652: LD_INT 0
1654: PPUSH
1655: PPUSH
1656: PPUSH
1657: PPUSH
// uc_side := 5 ;
1658: LD_ADDR_OWVAR 20
1662: PUSH
1663: LD_INT 5
1665: ST_TO_ADDR
// uc_nation := 2 ;
1666: LD_ADDR_OWVAR 21
1670: PUSH
1671: LD_INT 2
1673: ST_TO_ADDR
// InitHc ;
1674: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
1678: LD_ADDR_EXP 34
1682: PUSH
1683: LD_STRING Omar
1685: PPUSH
1686: LD_INT 0
1688: PPUSH
1689: LD_STRING 
1691: PPUSH
1692: CALL 38657 0 3
1696: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
1697: LD_EXP 34
1701: PPUSH
1702: LD_INT 284
1704: PPUSH
1705: LD_INT 163
1707: PPUSH
1708: LD_INT 0
1710: PPUSH
1711: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
1715: LD_EXP 34
1719: PPUSH
1720: LD_INT 256
1722: PPUSH
1723: LD_INT 129
1725: PPUSH
1726: CALL_OW 111
// wait ( 0 0$2 ) ;
1730: LD_INT 70
1732: PPUSH
1733: CALL_OW 67
// omarSquad := [ ] ;
1737: LD_ADDR_EXP 39
1741: PUSH
1742: EMPTY
1743: ST_TO_ADDR
// for i := 1 to 5 do
1744: LD_ADDR_VAR 0 2
1748: PUSH
1749: DOUBLE
1750: LD_INT 1
1752: DEC
1753: ST_TO_ADDR
1754: LD_INT 5
1756: PUSH
1757: FOR_TO
1758: IFFALSE 1964
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
1760: LD_INT 5
1762: PPUSH
1763: LD_INT 2
1765: PPUSH
1766: LD_INT 13
1768: PUSH
1769: LD_INT 14
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: PUSH
1776: LD_VAR 0 2
1780: PUSH
1781: LD_INT 2
1783: MOD
1784: PUSH
1785: LD_INT 1
1787: PLUS
1788: ARRAY
1789: PPUSH
1790: LD_INT 1
1792: PPUSH
1793: LD_INT 1
1795: PPUSH
1796: LD_INT 25
1798: PUSH
1799: LD_INT 27
1801: PUSH
1802: LD_INT 26
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: LIST
1809: PUSH
1810: LD_VAR 0 2
1814: PUSH
1815: LD_INT 3
1817: MOD
1818: PUSH
1819: LD_INT 1
1821: PLUS
1822: ARRAY
1823: PPUSH
1824: LD_INT 100
1826: PPUSH
1827: CALL 386 0 7
// veh := CreateVehicle ;
1831: LD_ADDR_VAR 0 4
1835: PUSH
1836: CALL_OW 45
1840: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
1841: LD_VAR 0 4
1845: PPUSH
1846: LD_INT 5
1848: PPUSH
1849: CALL_OW 233
// omarSquad := omarSquad union veh ;
1853: LD_ADDR_EXP 39
1857: PUSH
1858: LD_EXP 39
1862: PUSH
1863: LD_VAR 0 4
1867: UNION
1868: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
1869: LD_VAR 0 4
1873: PPUSH
1874: LD_INT 284
1876: PPUSH
1877: LD_INT 163
1879: PPUSH
1880: LD_INT 0
1882: PPUSH
1883: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
1887: LD_INT 0
1889: PPUSH
1890: LD_INT 3
1892: PPUSH
1893: LD_INT 2
1895: PPUSH
1896: CALL_OW 380
// un := CreateHuman ;
1900: LD_ADDR_VAR 0 3
1904: PUSH
1905: CALL_OW 44
1909: ST_TO_ADDR
// omarSquad := omarSquad union un ;
1910: LD_ADDR_EXP 39
1914: PUSH
1915: LD_EXP 39
1919: PUSH
1920: LD_VAR 0 3
1924: UNION
1925: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1926: LD_VAR 0 3
1930: PPUSH
1931: LD_VAR 0 4
1935: PPUSH
1936: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
1940: LD_VAR 0 3
1944: PPUSH
1945: LD_INT 271
1947: PPUSH
1948: LD_INT 144
1950: PPUSH
1951: CALL_OW 111
// wait ( 0 0$2 ) ;
1955: LD_INT 70
1957: PPUSH
1958: CALL_OW 67
// end ;
1962: GO 1757
1964: POP
1965: POP
// for i := 1 to 3 do
1966: LD_ADDR_VAR 0 2
1970: PUSH
1971: DOUBLE
1972: LD_INT 1
1974: DEC
1975: ST_TO_ADDR
1976: LD_INT 3
1978: PUSH
1979: FOR_TO
1980: IFFALSE 2063
// begin PrepareHuman ( false , 1 , 2 ) ;
1982: LD_INT 0
1984: PPUSH
1985: LD_INT 1
1987: PPUSH
1988: LD_INT 2
1990: PPUSH
1991: CALL_OW 380
// un := CreateHuman ;
1995: LD_ADDR_VAR 0 3
1999: PUSH
2000: CALL_OW 44
2004: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2005: LD_ADDR_EXP 39
2009: PUSH
2010: LD_EXP 39
2014: PUSH
2015: LD_VAR 0 3
2019: UNION
2020: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
2021: LD_VAR 0 3
2025: PPUSH
2026: LD_INT 284
2028: PPUSH
2029: LD_INT 163
2031: PPUSH
2032: LD_INT 0
2034: PPUSH
2035: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
2039: LD_VAR 0 3
2043: PPUSH
2044: LD_INT 257
2046: PPUSH
2047: LD_INT 138
2049: PPUSH
2050: CALL_OW 111
// wait ( 0 0$1 ) ;
2054: LD_INT 35
2056: PPUSH
2057: CALL_OW 67
// end ;
2061: GO 1979
2063: POP
2064: POP
// for i := 1 to 6 do
2065: LD_ADDR_VAR 0 2
2069: PUSH
2070: DOUBLE
2071: LD_INT 1
2073: DEC
2074: ST_TO_ADDR
2075: LD_INT 6
2077: PUSH
2078: FOR_TO
2079: IFFALSE 2212
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2081: LD_INT 0
2083: PPUSH
2084: LD_INT 1
2086: PUSH
2087: LD_INT 1
2089: PUSH
2090: LD_INT 4
2092: PUSH
2093: EMPTY
2094: LIST
2095: LIST
2096: LIST
2097: PUSH
2098: LD_VAR 0 2
2102: PUSH
2103: LD_INT 3
2105: MOD
2106: PUSH
2107: LD_INT 1
2109: PLUS
2110: ARRAY
2111: PPUSH
2112: LD_INT 3
2114: PPUSH
2115: CALL_OW 380
// un := CreateHuman ;
2119: LD_ADDR_VAR 0 3
2123: PUSH
2124: CALL_OW 44
2128: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2129: LD_ADDR_EXP 39
2133: PUSH
2134: LD_EXP 39
2138: PUSH
2139: LD_VAR 0 3
2143: UNION
2144: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
2145: LD_VAR 0 3
2149: PPUSH
2150: LD_INT 225
2152: PPUSH
2153: LD_INT 163
2155: PPUSH
2156: LD_INT 0
2158: PPUSH
2159: CALL_OW 48
// if i = 1 then
2163: LD_VAR 0 2
2167: PUSH
2168: LD_INT 1
2170: EQUAL
2171: IFFALSE 2188
// SetAttr ( un , attr_speed , 12 ) ;
2173: LD_VAR 0 3
2177: PPUSH
2178: LD_INT 2
2180: PPUSH
2181: LD_INT 12
2183: PPUSH
2184: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
2188: LD_VAR 0 3
2192: PPUSH
2193: LD_INT 222
2195: PPUSH
2196: LD_INT 157
2198: PPUSH
2199: CALL_OW 111
// wait ( 0 0$1 ) ;
2203: LD_INT 35
2205: PPUSH
2206: CALL_OW 67
// end ;
2210: GO 2078
2212: POP
2213: POP
// end ; end_of_file
2214: LD_VAR 0 1
2218: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
2219: LD_INT 0
2221: PPUSH
2222: PPUSH
2223: PPUSH
2224: PPUSH
2225: PPUSH
2226: PPUSH
// DoNotAttack ( 3 , HexInfo ( 149 , 67 ) ) ;
2227: LD_INT 3
2229: PPUSH
2230: LD_INT 149
2232: PPUSH
2233: LD_INT 67
2235: PPUSH
2236: CALL_OW 428
2240: PPUSH
2241: CALL_OW 471
// ruLab := HexInfo ( 111 , 89 ) ;
2245: LD_ADDR_EXP 51
2249: PUSH
2250: LD_INT 111
2252: PPUSH
2253: LD_INT 89
2255: PPUSH
2256: CALL_OW 428
2260: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
2261: LD_ADDR_VAR 0 2
2265: PUSH
2266: LD_INT 21
2268: PUSH
2269: LD_INT 3
2271: PUSH
2272: EMPTY
2273: LIST
2274: LIST
2275: PUSH
2276: LD_INT 23
2278: PUSH
2279: LD_INT 3
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PPUSH
2290: CALL_OW 69
2294: PUSH
2295: FOR_IN
2296: IFFALSE 2312
// SetBLevel ( i , 5 ) ;
2298: LD_VAR 0 2
2302: PPUSH
2303: LD_INT 5
2305: PPUSH
2306: CALL_OW 241
2310: GO 2295
2312: POP
2313: POP
// SetBName ( kirov , kirov ) ;
2314: LD_INT 71
2316: PPUSH
2317: LD_STRING kirov
2319: PPUSH
2320: CALL_OW 500
// SetBName ( beria , beria ) ;
2324: LD_INT 106
2326: PPUSH
2327: LD_STRING beria
2329: PPUSH
2330: CALL_OW 500
// SetBName ( kagan , kagan ) ;
2334: LD_INT 112
2336: PPUSH
2337: LD_STRING kagan
2339: PPUSH
2340: CALL_OW 500
// uc_side := 6 ;
2344: LD_ADDR_OWVAR 20
2348: PUSH
2349: LD_INT 6
2351: ST_TO_ADDR
// uc_nation := 3 ;
2352: LD_ADDR_OWVAR 21
2356: PUSH
2357: LD_INT 3
2359: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
2360: LD_ADDR_VAR 0 5
2364: PUSH
2365: LD_INT 22
2367: PUSH
2368: LD_INT 6
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: PUSH
2375: LD_INT 30
2377: PUSH
2378: LD_INT 5
2380: PUSH
2381: EMPTY
2382: LIST
2383: LIST
2384: PUSH
2385: EMPTY
2386: LIST
2387: LIST
2388: PPUSH
2389: CALL_OW 69
2393: PUSH
2394: LD_INT 1
2396: ARRAY
2397: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
2398: LD_ADDR_VAR 0 4
2402: PUSH
2403: LD_INT 22
2405: PUSH
2406: LD_INT 6
2408: PUSH
2409: EMPTY
2410: LIST
2411: LIST
2412: PUSH
2413: LD_INT 30
2415: PUSH
2416: LD_INT 4
2418: PUSH
2419: EMPTY
2420: LIST
2421: LIST
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: PPUSH
2427: CALL_OW 69
2431: PUSH
2432: LD_INT 1
2434: ARRAY
2435: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
2436: LD_ADDR_EXP 45
2440: PUSH
2441: EMPTY
2442: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
2443: LD_ADDR_EXP 46
2447: PUSH
2448: EMPTY
2449: ST_TO_ADDR
// russianPatrol := [ ] ;
2450: LD_ADDR_EXP 48
2454: PUSH
2455: EMPTY
2456: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
2457: LD_ADDR_EXP 41
2461: PUSH
2462: LD_STRING Kurin
2464: PPUSH
2465: LD_INT 0
2467: PPUSH
2468: LD_STRING 
2470: PPUSH
2471: CALL 38657 0 3
2475: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
2476: LD_EXP 41
2480: PPUSH
2481: LD_INT 71
2483: PPUSH
2484: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
2488: LD_ADDR_EXP 43
2492: PUSH
2493: LD_STRING Popov
2495: PPUSH
2496: LD_INT 0
2498: PPUSH
2499: LD_STRING 
2501: PPUSH
2502: CALL 38657 0 3
2506: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
2507: LD_EXP 43
2511: PPUSH
2512: LD_INT 71
2514: PPUSH
2515: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
2519: LD_ADDR_EXP 42
2523: PUSH
2524: LD_STRING Grishko
2526: PPUSH
2527: LD_INT 0
2529: PPUSH
2530: LD_STRING 
2532: PPUSH
2533: CALL 38657 0 3
2537: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
2538: LD_EXP 42
2542: PPUSH
2543: LD_INT 207
2545: PPUSH
2546: LD_INT 106
2548: PPUSH
2549: LD_INT 0
2551: PPUSH
2552: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
2556: LD_EXP 42
2560: PPUSH
2561: LD_INT 209
2563: PPUSH
2564: LD_INT 106
2566: PPUSH
2567: CALL_OW 118
// for i := 1 to 2 do
2571: LD_ADDR_VAR 0 2
2575: PUSH
2576: DOUBLE
2577: LD_INT 1
2579: DEC
2580: ST_TO_ADDR
2581: LD_INT 2
2583: PUSH
2584: FOR_TO
2585: IFFALSE 2640
// begin PrepareHuman ( false , 2 , 2 ) ;
2587: LD_INT 0
2589: PPUSH
2590: LD_INT 2
2592: PPUSH
2593: LD_INT 2
2595: PPUSH
2596: CALL_OW 380
// un := CreateHuman ;
2600: LD_ADDR_VAR 0 3
2604: PUSH
2605: CALL_OW 44
2609: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2610: LD_VAR 0 3
2614: PPUSH
2615: LD_INT 71
2617: PPUSH
2618: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2622: LD_ADDR_EXP 45
2626: PUSH
2627: LD_EXP 45
2631: PUSH
2632: LD_VAR 0 3
2636: UNION
2637: ST_TO_ADDR
// end ;
2638: GO 2584
2640: POP
2641: POP
// for i := 1 to [ 5 , 6 , 6 , 6 ] [ Difficulty ] do
2642: LD_ADDR_VAR 0 2
2646: PUSH
2647: DOUBLE
2648: LD_INT 1
2650: DEC
2651: ST_TO_ADDR
2652: LD_INT 5
2654: PUSH
2655: LD_INT 6
2657: PUSH
2658: LD_INT 6
2660: PUSH
2661: LD_INT 6
2663: PUSH
2664: EMPTY
2665: LIST
2666: LIST
2667: LIST
2668: LIST
2669: PUSH
2670: LD_OWVAR 67
2674: ARRAY
2675: PUSH
2676: FOR_TO
2677: IFFALSE 2755
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
2679: LD_INT 0
2681: PPUSH
2682: LD_INT 1
2684: PPUSH
2685: LD_INT 2
2687: PUSH
2688: LD_INT 3
2690: PUSH
2691: LD_INT 4
2693: PUSH
2694: LD_INT 4
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: LIST
2701: LIST
2702: PUSH
2703: LD_OWVAR 67
2707: ARRAY
2708: PPUSH
2709: CALL_OW 380
// un := CreateHuman ;
2713: LD_ADDR_VAR 0 3
2717: PUSH
2718: CALL_OW 44
2722: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
2723: LD_VAR 0 3
2727: PPUSH
2728: LD_VAR 0 5
2732: PPUSH
2733: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2737: LD_ADDR_EXP 45
2741: PUSH
2742: LD_EXP 45
2746: PUSH
2747: LD_VAR 0 3
2751: UNION
2752: ST_TO_ADDR
// end ;
2753: GO 2676
2755: POP
2756: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) do
2757: LD_ADDR_VAR 0 2
2761: PUSH
2762: LD_INT 22
2764: PUSH
2765: LD_INT 6
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: PUSH
2772: LD_INT 30
2774: PUSH
2775: LD_INT 32
2777: PUSH
2778: EMPTY
2779: LIST
2780: LIST
2781: PUSH
2782: EMPTY
2783: LIST
2784: LIST
2785: PPUSH
2786: CALL_OW 69
2790: PUSH
2791: FOR_IN
2792: IFFALSE 2870
// begin PrepareHuman ( false , 1 , [ 3 , 4 , 4 , 5 ] [ Difficulty ] ) ;
2794: LD_INT 0
2796: PPUSH
2797: LD_INT 1
2799: PPUSH
2800: LD_INT 3
2802: PUSH
2803: LD_INT 4
2805: PUSH
2806: LD_INT 4
2808: PUSH
2809: LD_INT 5
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: LIST
2816: LIST
2817: PUSH
2818: LD_OWVAR 67
2822: ARRAY
2823: PPUSH
2824: CALL_OW 380
// un := CreateHuman ;
2828: LD_ADDR_VAR 0 3
2832: PUSH
2833: CALL_OW 44
2837: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
2838: LD_VAR 0 3
2842: PPUSH
2843: LD_VAR 0 2
2847: PPUSH
2848: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2852: LD_ADDR_EXP 45
2856: PUSH
2857: LD_EXP 45
2861: PUSH
2862: LD_VAR 0 3
2866: UNION
2867: ST_TO_ADDR
// end ;
2868: GO 2791
2870: POP
2871: POP
// for i := 1 to 3 do
2872: LD_ADDR_VAR 0 2
2876: PUSH
2877: DOUBLE
2878: LD_INT 1
2880: DEC
2881: ST_TO_ADDR
2882: LD_INT 3
2884: PUSH
2885: FOR_TO
2886: IFFALSE 2941
// begin PrepareHuman ( false , 3 , 3 ) ;
2888: LD_INT 0
2890: PPUSH
2891: LD_INT 3
2893: PPUSH
2894: LD_INT 3
2896: PPUSH
2897: CALL_OW 380
// un := CreateHuman ;
2901: LD_ADDR_VAR 0 3
2905: PUSH
2906: CALL_OW 44
2910: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
2911: LD_VAR 0 3
2915: PPUSH
2916: LD_INT 92
2918: PPUSH
2919: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2923: LD_ADDR_EXP 45
2927: PUSH
2928: LD_EXP 45
2932: PUSH
2933: LD_VAR 0 3
2937: UNION
2938: ST_TO_ADDR
// end ;
2939: GO 2885
2941: POP
2942: POP
// for i := 1 to 2 do
2943: LD_ADDR_VAR 0 2
2947: PUSH
2948: DOUBLE
2949: LD_INT 1
2951: DEC
2952: ST_TO_ADDR
2953: LD_INT 2
2955: PUSH
2956: FOR_TO
2957: IFFALSE 3012
// begin PrepareHuman ( false , 4 , 3 ) ;
2959: LD_INT 0
2961: PPUSH
2962: LD_INT 4
2964: PPUSH
2965: LD_INT 3
2967: PPUSH
2968: CALL_OW 380
// un := CreateHuman ;
2972: LD_ADDR_VAR 0 3
2976: PUSH
2977: CALL_OW 44
2981: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2982: LD_VAR 0 3
2986: PPUSH
2987: LD_INT 83
2989: PPUSH
2990: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
2994: LD_ADDR_EXP 45
2998: PUSH
2999: LD_EXP 45
3003: PUSH
3004: LD_VAR 0 3
3008: UNION
3009: ST_TO_ADDR
// end ;
3010: GO 2956
3012: POP
3013: POP
// for i := 1 to 5 do
3014: LD_ADDR_VAR 0 2
3018: PUSH
3019: DOUBLE
3020: LD_INT 1
3022: DEC
3023: ST_TO_ADDR
3024: LD_INT 5
3026: PUSH
3027: FOR_TO
3028: IFFALSE 3085
// begin PrepareHuman ( false , 1 , 3 ) ;
3030: LD_INT 0
3032: PPUSH
3033: LD_INT 1
3035: PPUSH
3036: LD_INT 3
3038: PPUSH
3039: CALL_OW 380
// un := CreateHuman ;
3043: LD_ADDR_VAR 0 3
3047: PUSH
3048: CALL_OW 44
3052: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
3053: LD_VAR 0 3
3057: PPUSH
3058: LD_VAR 0 4
3062: PPUSH
3063: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
3067: LD_ADDR_EXP 47
3071: PUSH
3072: LD_EXP 47
3076: PUSH
3077: LD_VAR 0 3
3081: UNION
3082: ST_TO_ADDR
// end ;
3083: GO 3027
3085: POP
3086: POP
// russianCargo := [ ] ;
3087: LD_ADDR_EXP 50
3091: PUSH
3092: EMPTY
3093: ST_TO_ADDR
// for i := 1 to 2 do
3094: LD_ADDR_VAR 0 2
3098: PUSH
3099: DOUBLE
3100: LD_INT 1
3102: DEC
3103: ST_TO_ADDR
3104: LD_INT 2
3106: PUSH
3107: FOR_TO
3108: IFFALSE 3240
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3110: LD_INT 6
3112: PPUSH
3113: LD_INT 3
3115: PPUSH
3116: LD_INT 21
3118: PPUSH
3119: LD_INT 1
3121: PPUSH
3122: LD_INT 1
3124: PPUSH
3125: LD_INT 51
3127: PPUSH
3128: LD_INT 100
3130: PPUSH
3131: CALL 386 0 7
// un := CreateVehicle ;
3135: LD_ADDR_VAR 0 3
3139: PUSH
3140: CALL_OW 45
3144: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3145: LD_ADDR_EXP 50
3149: PUSH
3150: LD_EXP 50
3154: PUSH
3155: LD_VAR 0 3
3159: UNION
3160: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3161: LD_VAR 0 3
3165: PPUSH
3166: LD_INT 2
3168: PPUSH
3169: LD_INT 100
3171: PPUSH
3172: CALL_OW 290
// SetDir ( un , 4 ) ;
3176: LD_VAR 0 3
3180: PPUSH
3181: LD_INT 4
3183: PPUSH
3184: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3188: LD_VAR 0 3
3192: PPUSH
3193: LD_INT 147
3195: PPUSH
3196: LD_INT 103
3198: PPUSH
3199: LD_INT 4
3201: PPUSH
3202: LD_INT 0
3204: PPUSH
3205: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3209: LD_INT 0
3211: PPUSH
3212: LD_INT 1
3214: PPUSH
3215: LD_OWVAR 67
3219: PPUSH
3220: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3224: CALL_OW 44
3228: PPUSH
3229: LD_VAR 0 3
3233: PPUSH
3234: CALL_OW 52
// end ;
3238: GO 3107
3240: POP
3241: POP
// uc_side := 3 ;
3242: LD_ADDR_OWVAR 20
3246: PUSH
3247: LD_INT 3
3249: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
3250: LD_ADDR_EXP 44
3254: PUSH
3255: LD_STRING Burlak
3257: PPUSH
3258: LD_INT 0
3260: PPUSH
3261: LD_STRING 
3263: PPUSH
3264: CALL 38657 0 3
3268: ST_TO_ADDR
// for i := 1 to 5 do
3269: LD_ADDR_VAR 0 2
3273: PUSH
3274: DOUBLE
3275: LD_INT 1
3277: DEC
3278: ST_TO_ADDR
3279: LD_INT 5
3281: PUSH
3282: FOR_TO
3283: IFFALSE 3376
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3285: LD_INT 0
3287: PPUSH
3288: LD_INT 1
3290: PPUSH
3291: LD_OWVAR 67
3295: PUSH
3296: LD_INT 1
3298: PLUS
3299: PPUSH
3300: CALL_OW 380
// un := CreateHuman ;
3304: LD_ADDR_VAR 0 3
3308: PUSH
3309: CALL_OW 44
3313: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
3314: LD_VAR 0 3
3318: PPUSH
3319: LD_INT 22
3321: PUSH
3322: LD_INT 3
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: PUSH
3329: LD_INT 30
3331: PUSH
3332: LD_INT 32
3334: PUSH
3335: EMPTY
3336: LIST
3337: LIST
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PPUSH
3343: CALL_OW 69
3347: PUSH
3348: LD_VAR 0 2
3352: ARRAY
3353: PPUSH
3354: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3358: LD_ADDR_EXP 46
3362: PUSH
3363: LD_EXP 46
3367: PUSH
3368: LD_VAR 0 3
3372: UNION
3373: ST_TO_ADDR
// end ;
3374: GO 3282
3376: POP
3377: POP
// for i := 1 to 2 do
3378: LD_ADDR_VAR 0 2
3382: PUSH
3383: DOUBLE
3384: LD_INT 1
3386: DEC
3387: ST_TO_ADDR
3388: LD_INT 2
3390: PUSH
3391: FOR_TO
3392: IFFALSE 3483
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
3394: LD_INT 0
3396: PPUSH
3397: LD_INT 1
3399: PPUSH
3400: LD_OWVAR 67
3404: PUSH
3405: LD_INT 1
3407: PLUS
3408: PPUSH
3409: CALL_OW 380
// un := CreateHuman ;
3413: LD_ADDR_VAR 0 3
3417: PUSH
3418: CALL_OW 44
3422: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
3423: LD_VAR 0 3
3427: PPUSH
3428: LD_INT 22
3430: PUSH
3431: LD_INT 3
3433: PUSH
3434: EMPTY
3435: LIST
3436: LIST
3437: PUSH
3438: LD_INT 30
3440: PUSH
3441: LD_INT 5
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: PUSH
3448: EMPTY
3449: LIST
3450: LIST
3451: PPUSH
3452: CALL_OW 69
3456: PUSH
3457: LD_INT 1
3459: ARRAY
3460: PPUSH
3461: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3465: LD_ADDR_EXP 46
3469: PUSH
3470: LD_EXP 46
3474: PUSH
3475: LD_VAR 0 3
3479: UNION
3480: ST_TO_ADDR
// end ;
3481: GO 3391
3483: POP
3484: POP
// for i := 1 to 2 do
3485: LD_ADDR_VAR 0 2
3489: PUSH
3490: DOUBLE
3491: LD_INT 1
3493: DEC
3494: ST_TO_ADDR
3495: LD_INT 2
3497: PUSH
3498: FOR_TO
3499: IFFALSE 3586
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3501: LD_INT 0
3503: PPUSH
3504: LD_INT 4
3506: PPUSH
3507: LD_OWVAR 67
3511: PPUSH
3512: CALL_OW 380
// un := CreateHuman ;
3516: LD_ADDR_VAR 0 3
3520: PUSH
3521: CALL_OW 44
3525: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
3526: LD_VAR 0 3
3530: PPUSH
3531: LD_INT 22
3533: PUSH
3534: LD_INT 3
3536: PUSH
3537: EMPTY
3538: LIST
3539: LIST
3540: PUSH
3541: LD_INT 30
3543: PUSH
3544: LD_INT 7
3546: PUSH
3547: EMPTY
3548: LIST
3549: LIST
3550: PUSH
3551: EMPTY
3552: LIST
3553: LIST
3554: PPUSH
3555: CALL_OW 69
3559: PUSH
3560: LD_INT 1
3562: ARRAY
3563: PPUSH
3564: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3568: LD_ADDR_EXP 46
3572: PUSH
3573: LD_EXP 46
3577: PUSH
3578: LD_VAR 0 3
3582: UNION
3583: ST_TO_ADDR
// end ;
3584: GO 3498
3586: POP
3587: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
3588: LD_INT 0
3590: PPUSH
3591: LD_INT 2
3593: PPUSH
3594: LD_OWVAR 67
3598: PPUSH
3599: CALL_OW 380
// un := CreateHuman ;
3603: LD_ADDR_VAR 0 3
3607: PUSH
3608: CALL_OW 44
3612: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
3613: LD_VAR 0 3
3617: PPUSH
3618: LD_INT 106
3620: PPUSH
3621: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3625: LD_ADDR_EXP 46
3629: PUSH
3630: LD_EXP 46
3634: PUSH
3635: LD_VAR 0 3
3639: UNION
3640: ST_TO_ADDR
// for i := 1 to 3 do
3641: LD_ADDR_VAR 0 2
3645: PUSH
3646: DOUBLE
3647: LD_INT 1
3649: DEC
3650: ST_TO_ADDR
3651: LD_INT 3
3653: PUSH
3654: FOR_TO
3655: IFFALSE 3777
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
3657: LD_ADDR_VAR 0 6
3661: PUSH
3662: LD_INT 22
3664: PUSH
3665: LD_INT 3
3667: PUSH
3668: EMPTY
3669: LIST
3670: LIST
3671: PUSH
3672: LD_INT 30
3674: PUSH
3675: LD_INT 31
3677: PUSH
3678: EMPTY
3679: LIST
3680: LIST
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: PPUSH
3686: CALL_OW 69
3690: PUSH
3691: LD_VAR 0 2
3695: ARRAY
3696: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
3697: LD_INT 0
3699: PPUSH
3700: LD_INT 1
3702: PPUSH
3703: LD_OWVAR 67
3707: PPUSH
3708: CALL_OW 380
// un := CreateHuman ;
3712: LD_ADDR_VAR 0 3
3716: PUSH
3717: CALL_OW 44
3721: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
3722: LD_VAR 0 3
3726: PPUSH
3727: LD_VAR 0 6
3731: PPUSH
3732: CALL_OW 254
3736: PUSH
3737: LD_INT 3
3739: PLUS
3740: PPUSH
3741: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
3745: LD_VAR 0 3
3749: PPUSH
3750: LD_VAR 0 6
3754: PPUSH
3755: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
3759: LD_ADDR_EXP 46
3763: PUSH
3764: LD_EXP 46
3768: PUSH
3769: LD_VAR 0 3
3773: UNION
3774: ST_TO_ADDR
// end ;
3775: GO 3654
3777: POP
3778: POP
// if Difficulty > 1 then
3779: LD_OWVAR 67
3783: PUSH
3784: LD_INT 1
3786: GREATER
3787: IFFALSE 3862
// begin un := PrepareTank ( 3 , 3 , ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 100 ) ;
3789: LD_ADDR_VAR 0 3
3793: PUSH
3794: LD_INT 3
3796: PPUSH
3797: LD_INT 3
3799: PPUSH
3800: LD_INT 23
3802: PPUSH
3803: LD_INT 1
3805: PPUSH
3806: LD_INT 1
3808: PPUSH
3809: LD_INT 44
3811: PPUSH
3812: LD_INT 100
3814: PPUSH
3815: CALL 386 0 7
3819: ST_TO_ADDR
// PlaceUnitXY ( un , 73 , 110 , false ) ;
3820: LD_VAR 0 3
3824: PPUSH
3825: LD_INT 73
3827: PPUSH
3828: LD_INT 110
3830: PPUSH
3831: LD_INT 0
3833: PPUSH
3834: CALL_OW 48
// PrepareMechanic ( false , 3 ) ;
3838: LD_INT 0
3840: PPUSH
3841: LD_INT 3
3843: PPUSH
3844: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , un ) ;
3848: CALL_OW 44
3852: PPUSH
3853: LD_VAR 0 3
3857: PPUSH
3858: CALL_OW 52
// end ; russianOmicronAttackers := [ ] ;
3862: LD_ADDR_EXP 49
3866: PUSH
3867: EMPTY
3868: ST_TO_ADDR
// for i := 1 to [ 6 , 7 , 8 , 8 ] [ Difficulty ] do
3869: LD_ADDR_VAR 0 2
3873: PUSH
3874: DOUBLE
3875: LD_INT 1
3877: DEC
3878: ST_TO_ADDR
3879: LD_INT 6
3881: PUSH
3882: LD_INT 7
3884: PUSH
3885: LD_INT 8
3887: PUSH
3888: LD_INT 8
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: LIST
3895: LIST
3896: PUSH
3897: LD_OWVAR 67
3901: ARRAY
3902: PUSH
3903: FOR_TO
3904: IFFALSE 4128
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
3906: LD_INT 3
3908: PPUSH
3909: LD_INT 3
3911: PPUSH
3912: LD_INT 21
3914: PUSH
3915: LD_INT 23
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: PUSH
3922: LD_VAR 0 2
3926: PUSH
3927: LD_INT 2
3929: MOD
3930: PUSH
3931: LD_INT 1
3933: PLUS
3934: ARRAY
3935: PPUSH
3936: LD_INT 1
3938: PPUSH
3939: LD_INT 1
3941: PPUSH
3942: LD_INT 43
3944: PUSH
3945: LD_INT 44
3947: PUSH
3948: LD_INT 42
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: LIST
3955: PUSH
3956: LD_VAR 0 2
3960: PUSH
3961: LD_INT 3
3963: MOD
3964: PUSH
3965: LD_INT 1
3967: PLUS
3968: ARRAY
3969: PPUSH
3970: LD_INT 100
3972: PPUSH
3973: CALL 386 0 7
// un := CreateVehicle ;
3977: LD_ADDR_VAR 0 3
3981: PUSH
3982: CALL_OW 45
3986: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
3987: LD_VAR 0 3
3991: PPUSH
3992: LD_INT 0
3994: PUSH
3995: LD_INT 5
3997: PUSH
3998: EMPTY
3999: LIST
4000: LIST
4001: PUSH
4002: LD_INT 1
4004: PPUSH
4005: LD_INT 2
4007: PPUSH
4008: CALL_OW 12
4012: ARRAY
4013: PPUSH
4014: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
4018: LD_ADDR_EXP 49
4022: PUSH
4023: LD_EXP 49
4027: PUSH
4028: LD_VAR 0 3
4032: UNION
4033: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
4034: LD_VAR 0 3
4038: PPUSH
4039: LD_INT 127
4041: PPUSH
4042: LD_INT 89
4044: PPUSH
4045: LD_INT 7
4047: PPUSH
4048: LD_INT 0
4050: PPUSH
4051: CALL_OW 50
// uc_side := 3 ;
4055: LD_ADDR_OWVAR 20
4059: PUSH
4060: LD_INT 3
4062: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
4063: LD_INT 0
4065: PPUSH
4066: LD_INT 3
4068: PPUSH
4069: LD_INT 3
4071: PPUSH
4072: CALL_OW 380
// un := CreateHuman ;
4076: LD_ADDR_VAR 0 3
4080: PUSH
4081: CALL_OW 44
4085: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4086: LD_ADDR_EXP 49
4090: PUSH
4091: LD_EXP 49
4095: PUSH
4096: LD_VAR 0 3
4100: UNION
4101: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4102: LD_VAR 0 3
4106: PPUSH
4107: LD_EXP 49
4111: PUSH
4112: LD_EXP 49
4116: PUSH
4117: LD_INT 1
4119: MINUS
4120: ARRAY
4121: PPUSH
4122: CALL_OW 52
// end ;
4126: GO 3903
4128: POP
4129: POP
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
4130: LD_ADDR_VAR 0 2
4134: PUSH
4135: DOUBLE
4136: LD_INT 1
4138: DEC
4139: ST_TO_ADDR
4140: LD_INT 3
4142: PUSH
4143: LD_INT 4
4145: PUSH
4146: LD_INT 5
4148: PUSH
4149: LD_INT 6
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: PUSH
4158: LD_OWVAR 67
4162: ARRAY
4163: PUSH
4164: FOR_TO
4165: IFFALSE 4231
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4167: LD_INT 0
4169: PPUSH
4170: LD_INT 1
4172: PPUSH
4173: LD_OWVAR 67
4177: PPUSH
4178: CALL_OW 380
// un := CreateHuman ;
4182: LD_ADDR_VAR 0 3
4186: PUSH
4187: CALL_OW 44
4191: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4192: LD_ADDR_EXP 49
4196: PUSH
4197: LD_EXP 49
4201: PUSH
4202: LD_VAR 0 3
4206: UNION
4207: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4208: LD_VAR 0 3
4212: PPUSH
4213: LD_INT 91
4215: PPUSH
4216: LD_INT 60
4218: PPUSH
4219: LD_INT 3
4221: PPUSH
4222: LD_INT 0
4224: PPUSH
4225: CALL_OW 50
// end ;
4229: GO 4164
4231: POP
4232: POP
// end ;
4233: LD_VAR 0 1
4237: RET
// every 0 0$3 do var i ;
4238: GO 4240
4240: DISABLE
4241: LD_INT 0
4243: PPUSH
// begin for i := 1 to 4 do
4244: LD_ADDR_VAR 0 1
4248: PUSH
4249: DOUBLE
4250: LD_INT 1
4252: DEC
4253: ST_TO_ADDR
4254: LD_INT 4
4256: PUSH
4257: FOR_TO
4258: IFFALSE 4277
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4260: LD_EXP 47
4264: PUSH
4265: LD_VAR 0 1
4269: ARRAY
4270: PPUSH
4271: CALL_OW 122
4275: GO 4257
4277: POP
4278: POP
// wait ( 3 ) ;
4279: LD_INT 3
4281: PPUSH
4282: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4286: LD_EXP 47
4290: PUSH
4291: LD_INT 1
4293: ARRAY
4294: PPUSH
4295: LD_INT 22
4297: PUSH
4298: LD_INT 6
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: PUSH
4305: LD_INT 30
4307: PUSH
4308: LD_INT 31
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: PUSH
4315: EMPTY
4316: LIST
4317: LIST
4318: PPUSH
4319: CALL_OW 69
4323: PPUSH
4324: LD_EXP 47
4328: PUSH
4329: LD_INT 1
4331: ARRAY
4332: PPUSH
4333: CALL_OW 74
4337: PPUSH
4338: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4342: LD_EXP 47
4346: PUSH
4347: LD_INT 2
4349: ARRAY
4350: PPUSH
4351: LD_INT 211
4353: PPUSH
4354: LD_INT 107
4356: PPUSH
4357: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4361: LD_EXP 47
4365: PUSH
4366: LD_INT 2
4368: ARRAY
4369: PPUSH
4370: LD_INT 209
4372: PPUSH
4373: LD_INT 106
4375: PPUSH
4376: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
4380: LD_EXP 47
4384: PUSH
4385: LD_INT 3
4387: ARRAY
4388: PPUSH
4389: LD_INT 209
4391: PPUSH
4392: LD_INT 103
4394: PPUSH
4395: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
4399: LD_EXP 47
4403: PUSH
4404: LD_INT 3
4406: ARRAY
4407: PPUSH
4408: LD_INT 209
4410: PPUSH
4411: LD_INT 106
4413: PPUSH
4414: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
4418: LD_EXP 47
4422: PUSH
4423: LD_INT 4
4425: ARRAY
4426: PPUSH
4427: LD_INT 227
4429: PPUSH
4430: LD_INT 117
4432: PPUSH
4433: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
4437: LD_EXP 47
4441: PUSH
4442: LD_INT 4
4444: ARRAY
4445: PPUSH
4446: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
4450: LD_INT 700
4452: PPUSH
4453: CALL_OW 67
// for i := 3 downto 2 do
4457: LD_ADDR_VAR 0 1
4461: PUSH
4462: DOUBLE
4463: LD_INT 3
4465: INC
4466: ST_TO_ADDR
4467: LD_INT 2
4469: PUSH
4470: FOR_DOWNTO
4471: IFFALSE 4638
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
4473: LD_EXP 47
4477: PUSH
4478: LD_VAR 0 1
4482: ARRAY
4483: PPUSH
4484: LD_INT 200
4486: PPUSH
4487: LD_INT 91
4489: PPUSH
4490: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4494: LD_EXP 47
4498: PUSH
4499: LD_VAR 0 1
4503: ARRAY
4504: PPUSH
4505: LD_INT 210
4507: PPUSH
4508: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
4512: LD_EXP 47
4516: PUSH
4517: LD_VAR 0 1
4521: ARRAY
4522: PPUSH
4523: LD_INT 224
4525: PPUSH
4526: LD_INT 93
4528: PPUSH
4529: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4533: LD_EXP 47
4537: PUSH
4538: LD_VAR 0 1
4542: ARRAY
4543: PPUSH
4544: LD_INT 210
4546: PPUSH
4547: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
4551: LD_EXP 47
4555: PUSH
4556: LD_VAR 0 1
4560: ARRAY
4561: PPUSH
4562: LD_INT 239
4564: PPUSH
4565: LD_INT 123
4567: PPUSH
4568: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
4572: LD_EXP 47
4576: PUSH
4577: LD_VAR 0 1
4581: ARRAY
4582: PPUSH
4583: LD_INT 210
4585: PPUSH
4586: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
4590: LD_EXP 47
4594: PUSH
4595: LD_VAR 0 1
4599: ARRAY
4600: PPUSH
4601: LD_INT 212
4603: PPUSH
4604: LD_INT 105
4606: PPUSH
4607: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
4611: LD_EXP 47
4615: PUSH
4616: LD_VAR 0 1
4620: ARRAY
4621: PPUSH
4622: LD_INT 700
4624: PPUSH
4625: CALL_OW 202
// wait ( 0 0$30 ) ;
4629: LD_INT 1050
4631: PPUSH
4632: CALL_OW 67
// end ;
4636: GO 4470
4638: POP
4639: POP
// until not activeGrishkoAI ;
4640: LD_EXP 10
4644: NOT
4645: IFFALSE 4450
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
4647: LD_EXP 47
4651: PPUSH
4652: LD_INT 221
4654: PPUSH
4655: LD_INT 110
4657: PPUSH
4658: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
4662: LD_EXP 47
4666: PPUSH
4667: LD_INT 228
4669: PPUSH
4670: LD_INT 115
4672: PPUSH
4673: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
4677: LD_EXP 47
4681: PPUSH
4682: CALL_OW 200
// end ;
4686: PPOPN 1
4688: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
4689: LD_EXP 12
4693: IFFALSE 5439
4695: GO 4697
4697: DISABLE
4698: LD_INT 0
4700: PPUSH
4701: PPUSH
4702: PPUSH
4703: PPUSH
// begin uc_side := 6 ;
4704: LD_ADDR_OWVAR 20
4708: PUSH
4709: LD_INT 6
4711: ST_TO_ADDR
// uc_nation := 3 ;
4712: LD_ADDR_OWVAR 21
4716: PUSH
4717: LD_INT 3
4719: ST_TO_ADDR
// for i := 1 to 3 do
4720: LD_ADDR_VAR 0 2
4724: PUSH
4725: DOUBLE
4726: LD_INT 1
4728: DEC
4729: ST_TO_ADDR
4730: LD_INT 3
4732: PUSH
4733: FOR_TO
4734: IFFALSE 4847
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 , 4 ] [ Difficulty ] ) ;
4736: LD_INT 0
4738: PPUSH
4739: LD_INT 1
4741: PPUSH
4742: LD_INT 2
4744: PUSH
4745: LD_INT 3
4747: PUSH
4748: LD_INT 4
4750: PUSH
4751: LD_INT 4
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: PUSH
4760: LD_OWVAR 67
4764: ARRAY
4765: PPUSH
4766: CALL_OW 380
// un := CreateHuman ;
4770: LD_ADDR_VAR 0 1
4774: PUSH
4775: CALL_OW 44
4779: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
4780: LD_ADDR_EXP 48
4784: PUSH
4785: LD_EXP 48
4789: PUSH
4790: LD_VAR 0 1
4794: UNION
4795: ST_TO_ADDR
// SetTag ( un , 1 ) ;
4796: LD_VAR 0 1
4800: PPUSH
4801: LD_INT 1
4803: PPUSH
4804: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
4808: LD_VAR 0 1
4812: PPUSH
4813: LD_INT 11
4815: PPUSH
4816: LD_INT 0
4818: PPUSH
4819: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
4823: LD_VAR 0 1
4827: PPUSH
4828: LD_INT 210
4830: PPUSH
4831: LD_INT 159
4833: PPUSH
4834: CALL_OW 111
// wait ( 0 0$2 ) ;
4838: LD_INT 70
4840: PPUSH
4841: CALL_OW 67
// end ;
4845: GO 4733
4847: POP
4848: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
4849: LD_ADDR_VAR 0 4
4853: PUSH
4854: LD_INT 172
4856: PUSH
4857: LD_INT 76
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: PUSH
4864: LD_INT 150
4866: PUSH
4867: LD_INT 38
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: PUSH
4874: LD_INT 148
4876: PUSH
4877: LD_INT 9
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PUSH
4884: LD_INT 165
4886: PUSH
4887: LD_INT 38
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: PUSH
4900: LD_INT 191
4902: PUSH
4903: LD_INT 77
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: PUSH
4910: LD_INT 168
4912: PUSH
4913: LD_INT 42
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: PUSH
4920: LD_INT 166
4922: PUSH
4923: LD_INT 11
4925: PUSH
4926: EMPTY
4927: LIST
4928: LIST
4929: PUSH
4930: LD_INT 151
4932: PUSH
4933: LD_INT 12
4935: PUSH
4936: EMPTY
4937: LIST
4938: LIST
4939: PUSH
4940: EMPTY
4941: LIST
4942: LIST
4943: LIST
4944: LIST
4945: PUSH
4946: LD_INT 221
4948: PUSH
4949: LD_INT 88
4951: PUSH
4952: EMPTY
4953: LIST
4954: LIST
4955: PUSH
4956: LD_INT 217
4958: PUSH
4959: LD_INT 64
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: PUSH
4966: LD_INT 232
4968: PUSH
4969: LD_INT 66
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: PUSH
4976: LD_INT 200
4978: PUSH
4979: LD_INT 56
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: PUSH
4992: EMPTY
4993: LIST
4994: LIST
4995: LIST
4996: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4997: LD_INT 35
4999: PPUSH
5000: CALL_OW 67
// for i := russianPatrol downto 1 do
5004: LD_ADDR_VAR 0 2
5008: PUSH
5009: DOUBLE
5010: LD_EXP 48
5014: INC
5015: ST_TO_ADDR
5016: LD_INT 1
5018: PUSH
5019: FOR_DOWNTO
5020: IFFALSE 5403
// begin if IsDead ( russianPatrol [ i ] ) then
5022: LD_EXP 48
5026: PUSH
5027: LD_VAR 0 2
5031: ARRAY
5032: PPUSH
5033: CALL_OW 301
5037: IFFALSE 5041
// continue ;
5039: GO 5019
// if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
5041: LD_EXP 48
5045: PUSH
5046: LD_VAR 0 2
5050: ARRAY
5051: PPUSH
5052: CALL_OW 256
5056: PUSH
5057: LD_INT 990
5059: LESS
5060: PUSH
5061: LD_EXP 48
5065: PUSH
5066: LD_VAR 0 2
5070: ARRAY
5071: PPUSH
5072: CALL_OW 110
5076: PUSH
5077: LD_INT 1
5079: EQUAL
5080: AND
5081: IFFALSE 5101
// SetTag ( russianPatrol [ i ] , 2 ) ;
5083: LD_EXP 48
5087: PUSH
5088: LD_VAR 0 2
5092: ARRAY
5093: PPUSH
5094: LD_INT 2
5096: PPUSH
5097: CALL_OW 109
// if GetTag ( russianPatrol [ i ] ) = 2 then
5101: LD_EXP 48
5105: PUSH
5106: LD_VAR 0 2
5110: ARRAY
5111: PPUSH
5112: CALL_OW 110
5116: PUSH
5117: LD_INT 2
5119: EQUAL
5120: IFFALSE 5187
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5122: LD_EXP 48
5126: PUSH
5127: LD_VAR 0 2
5131: ARRAY
5132: PPUSH
5133: LD_INT 166
5135: PPUSH
5136: LD_INT 101
5138: PPUSH
5139: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5143: LD_EXP 48
5147: PUSH
5148: LD_VAR 0 2
5152: ARRAY
5153: PPUSH
5154: LD_INT 71
5156: PPUSH
5157: CALL_OW 296
5161: PUSH
5162: LD_INT 10
5164: LESS
5165: IFFALSE 5185
// SetTag ( russianPatrol [ i ] , 3 ) ;
5167: LD_EXP 48
5171: PUSH
5172: LD_VAR 0 2
5176: ARRAY
5177: PPUSH
5178: LD_INT 3
5180: PPUSH
5181: CALL_OW 109
// continue ;
5185: GO 5019
// end ; if GetTag ( russianPatrol [ i ] ) = 3 then
5187: LD_EXP 48
5191: PUSH
5192: LD_VAR 0 2
5196: ARRAY
5197: PPUSH
5198: CALL_OW 110
5202: PUSH
5203: LD_INT 3
5205: EQUAL
5206: IFFALSE 5301
// begin spottedByPatrol := true ;
5208: LD_ADDR_EXP 7
5212: PUSH
5213: LD_INT 1
5215: ST_TO_ADDR
// PlaceSeeing ( GetX ( russianPatrol [ i ] ) , GetY ( russianPatrol [ i ] ) , 2 , - 6 ) ;
5216: LD_EXP 48
5220: PUSH
5221: LD_VAR 0 2
5225: ARRAY
5226: PPUSH
5227: CALL_OW 250
5231: PPUSH
5232: LD_EXP 48
5236: PUSH
5237: LD_VAR 0 2
5241: ARRAY
5242: PPUSH
5243: CALL_OW 251
5247: PPUSH
5248: LD_INT 2
5250: PPUSH
5251: LD_INT 6
5253: NEG
5254: PPUSH
5255: CALL_OW 330
// CenterNowOnUnits ( russianPatrol [ i ] ) ;
5259: LD_EXP 48
5263: PUSH
5264: LD_VAR 0 2
5268: ARRAY
5269: PPUSH
5270: CALL_OW 87
// DialogueOn ;
5274: CALL_OW 6
// Say ( Heike , DH-Spot-f-3 ) ;
5278: LD_EXP 26
5282: PPUSH
5283: LD_STRING DH-Spot-f-3
5285: PPUSH
5286: CALL_OW 88
// DialogueOff ;
5290: CALL_OW 7
// YouLost ( Spotted ) ;
5294: LD_STRING Spotted
5296: PPUSH
5297: CALL_OW 104
// end ; if not HasTask ( russianPatrol [ i ] ) then
5301: LD_EXP 48
5305: PUSH
5306: LD_VAR 0 2
5310: ARRAY
5311: PPUSH
5312: CALL_OW 314
5316: NOT
5317: IFFALSE 5401
// for j in patrol [ i ] do
5319: LD_ADDR_VAR 0 3
5323: PUSH
5324: LD_VAR 0 4
5328: PUSH
5329: LD_VAR 0 2
5333: ARRAY
5334: PUSH
5335: FOR_IN
5336: IFFALSE 5399
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5338: LD_EXP 48
5342: PUSH
5343: LD_VAR 0 2
5347: ARRAY
5348: PPUSH
5349: LD_INT 35
5351: PPUSH
5352: LD_INT 175
5354: PPUSH
5355: CALL_OW 12
5359: PPUSH
5360: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5364: LD_EXP 48
5368: PUSH
5369: LD_VAR 0 2
5373: ARRAY
5374: PPUSH
5375: LD_VAR 0 3
5379: PUSH
5380: LD_INT 1
5382: ARRAY
5383: PPUSH
5384: LD_VAR 0 3
5388: PUSH
5389: LD_INT 2
5391: ARRAY
5392: PPUSH
5393: CALL_OW 174
// end ;
5397: GO 5335
5399: POP
5400: POP
// end ;
5401: GO 5019
5403: POP
5404: POP
// until not russianPatrol or russianAlert ;
5405: LD_EXP 48
5409: NOT
5410: PUSH
5411: LD_EXP 9
5415: OR
5416: IFFALSE 4997
// if russianPatrol then
5418: LD_EXP 48
5422: IFFALSE 5439
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
5424: LD_EXP 48
5428: PPUSH
5429: LD_INT 161
5431: PPUSH
5432: LD_INT 107
5434: PPUSH
5435: CALL_OW 114
// end ;
5439: PPOPN 4
5441: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
5442: LD_EXP 6
5446: PUSH
5447: LD_EXP 13
5451: NOT
5452: AND
5453: IFFALSE 5939
5455: GO 5457
5457: DISABLE
5458: LD_INT 0
5460: PPUSH
5461: PPUSH
5462: PPUSH
5463: PPUSH
5464: PPUSH
// begin enable ;
5465: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
5466: LD_ADDR_VAR 0 2
5470: PUSH
5471: LD_EXP 49
5475: PPUSH
5476: LD_INT 21
5478: PUSH
5479: LD_INT 2
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PPUSH
5486: CALL_OW 72
5490: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
5491: LD_ADDR_VAR 0 4
5495: PUSH
5496: LD_INT 22
5498: PUSH
5499: LD_INT 4
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: PPUSH
5506: CALL_OW 69
5510: ST_TO_ADDR
// for i in filter do
5511: LD_ADDR_VAR 0 1
5515: PUSH
5516: LD_VAR 0 2
5520: PUSH
5521: FOR_IN
5522: IFFALSE 5937
// begin tmp := IsDrivenBy ( i ) ;
5524: LD_ADDR_VAR 0 3
5528: PUSH
5529: LD_VAR 0 1
5533: PPUSH
5534: CALL_OW 311
5538: ST_TO_ADDR
// if not tmp then
5539: LD_VAR 0 3
5543: NOT
5544: IFFALSE 5548
// continue ;
5546: GO 5521
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
5548: LD_VAR 0 1
5552: PPUSH
5553: CALL_OW 261
5557: PUSH
5558: LD_INT 90
5560: GREATER
5561: PUSH
5562: LD_VAR 0 1
5566: PPUSH
5567: CALL_OW 110
5571: PUSH
5572: LD_INT 2
5574: EQUAL
5575: AND
5576: IFFALSE 5592
// SetTag ( i , 0 ) else
5578: LD_VAR 0 1
5582: PPUSH
5583: LD_INT 0
5585: PPUSH
5586: CALL_OW 109
5590: GO 5688
// if GetTag ( i ) = 2 then
5592: LD_VAR 0 1
5596: PPUSH
5597: CALL_OW 110
5601: PUSH
5602: LD_INT 2
5604: EQUAL
5605: IFFALSE 5688
// begin x := rand ( 1 , 2 ) ;
5607: LD_ADDR_VAR 0 5
5611: PUSH
5612: LD_INT 1
5614: PPUSH
5615: LD_INT 2
5617: PPUSH
5618: CALL_OW 12
5622: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
5623: LD_VAR 0 1
5627: PPUSH
5628: LD_EXP 50
5632: PUSH
5633: LD_VAR 0 5
5637: ARRAY
5638: PPUSH
5639: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
5643: LD_EXP 50
5647: PUSH
5648: LD_VAR 0 5
5652: ARRAY
5653: PPUSH
5654: LD_INT 2
5656: PPUSH
5657: CALL_OW 289
5661: PUSH
5662: LD_INT 20
5664: LESS
5665: IFFALSE 5688
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
5667: LD_EXP 50
5671: PUSH
5672: LD_VAR 0 5
5676: ARRAY
5677: PPUSH
5678: LD_INT 2
5680: PPUSH
5681: LD_INT 100
5683: PPUSH
5684: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
5688: LD_VAR 0 1
5692: PPUSH
5693: CALL_OW 256
5697: PUSH
5698: LD_INT 600
5700: GREATEREQUAL
5701: PUSH
5702: LD_VAR 0 1
5706: PPUSH
5707: CALL_OW 110
5711: NOT
5712: AND
5713: IFFALSE 5739
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
5715: LD_VAR 0 1
5719: PPUSH
5720: LD_VAR 0 4
5724: PPUSH
5725: LD_VAR 0 1
5729: PPUSH
5730: CALL_OW 74
5734: PPUSH
5735: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
5739: LD_VAR 0 1
5743: PPUSH
5744: CALL_OW 256
5748: PUSH
5749: LD_INT 600
5751: LESS
5752: PUSH
5753: LD_VAR 0 1
5757: PPUSH
5758: CALL_OW 110
5762: NOT
5763: AND
5764: IFFALSE 5793
// begin SetTag ( i , 1 ) ;
5766: LD_VAR 0 1
5770: PPUSH
5771: LD_INT 1
5773: PPUSH
5774: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
5778: LD_VAR 0 1
5782: PPUSH
5783: LD_INT 62
5785: PPUSH
5786: LD_INT 22
5788: PPUSH
5789: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
5793: LD_VAR 0 1
5797: PPUSH
5798: CALL_OW 110
5802: PUSH
5803: LD_INT 1
5805: EQUAL
5806: PUSH
5807: LD_VAR 0 1
5811: PPUSH
5812: LD_INT 62
5814: PPUSH
5815: LD_INT 22
5817: PPUSH
5818: CALL_OW 297
5822: PUSH
5823: LD_INT 6
5825: LESS
5826: AND
5827: PUSH
5828: LD_VAR 0 3
5832: AND
5833: IFFALSE 5935
// begin ComExitVehicle ( tmp ) ;
5835: LD_VAR 0 3
5839: PPUSH
5840: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
5844: LD_VAR 0 3
5848: PPUSH
5849: LD_VAR 0 1
5853: PPUSH
5854: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
5858: LD_INT 35
5860: PPUSH
5861: CALL_OW 67
// until GetLives ( i ) = 1000 ;
5865: LD_VAR 0 1
5869: PPUSH
5870: CALL_OW 256
5874: PUSH
5875: LD_INT 1000
5877: EQUAL
5878: IFFALSE 5858
// ComEnterUnit ( tmp , i ) ;
5880: LD_VAR 0 3
5884: PPUSH
5885: LD_VAR 0 1
5889: PPUSH
5890: CALL_OW 120
// if GetFuel ( i ) <= 90 then
5894: LD_VAR 0 1
5898: PPUSH
5899: CALL_OW 261
5903: PUSH
5904: LD_INT 90
5906: LESSEQUAL
5907: IFFALSE 5923
// SetTag ( i , 2 ) else
5909: LD_VAR 0 1
5913: PPUSH
5914: LD_INT 2
5916: PPUSH
5917: CALL_OW 109
5921: GO 5935
// SetTag ( i , 0 ) ;
5923: LD_VAR 0 1
5927: PPUSH
5928: LD_INT 0
5930: PPUSH
5931: CALL_OW 109
// end ; end ;
5935: GO 5521
5937: POP
5938: POP
// end ;
5939: PPOPN 5
5941: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
5942: LD_EXP 20
5946: IFFALSE 6169
5948: GO 5950
5950: DISABLE
5951: LD_INT 0
5953: PPUSH
5954: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
5955: LD_EXP 50
5959: PPUSH
5960: LD_INT 79
5962: PPUSH
5963: LD_INT 155
5965: PPUSH
5966: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
5970: LD_EXP 50
5974: PPUSH
5975: LD_INT 16
5977: PPUSH
5978: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
5982: LD_ADDR_VAR 0 2
5986: PUSH
5987: LD_EXP 49
5991: PPUSH
5992: LD_INT 50
5994: PUSH
5995: EMPTY
5996: LIST
5997: PPUSH
5998: CALL_OW 72
6002: ST_TO_ADDR
// for i in tmp do
6003: LD_ADDR_VAR 0 1
6007: PUSH
6008: LD_VAR 0 2
6012: PUSH
6013: FOR_IN
6014: IFFALSE 6048
// begin ComAgressiveMove ( i , 123 , 60 ) ;
6016: LD_VAR 0 1
6020: PPUSH
6021: LD_INT 123
6023: PPUSH
6024: LD_INT 60
6026: PPUSH
6027: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
6031: LD_VAR 0 1
6035: PPUSH
6036: LD_INT 153
6038: PPUSH
6039: LD_INT 103
6041: PPUSH
6042: CALL_OW 174
// end ;
6046: GO 6013
6048: POP
6049: POP
// repeat wait ( 0 0$1 ) ;
6050: LD_INT 35
6052: PPUSH
6053: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6057: LD_ADDR_VAR 0 2
6061: PUSH
6062: LD_EXP 49
6066: PPUSH
6067: LD_INT 50
6069: PUSH
6070: EMPTY
6071: LIST
6072: PPUSH
6073: CALL_OW 72
6077: ST_TO_ADDR
// for i in tmp do
6078: LD_ADDR_VAR 0 1
6082: PUSH
6083: LD_VAR 0 2
6087: PUSH
6088: FOR_IN
6089: IFFALSE 6160
// if not HasTask ( i ) then
6091: LD_VAR 0 1
6095: PPUSH
6096: CALL_OW 314
6100: NOT
6101: IFFALSE 6158
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) , i ) ) until not tmp ;
6103: LD_VAR 0 1
6107: PPUSH
6108: LD_INT 81
6110: PUSH
6111: LD_INT 3
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: PUSH
6118: LD_INT 3
6120: PUSH
6121: LD_INT 21
6123: PUSH
6124: LD_INT 3
6126: PUSH
6127: EMPTY
6128: LIST
6129: LIST
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: PPUSH
6139: CALL_OW 69
6143: PPUSH
6144: LD_VAR 0 1
6148: PPUSH
6149: CALL_OW 74
6153: PPUSH
6154: CALL_OW 115
6158: GO 6088
6160: POP
6161: POP
6162: LD_VAR 0 2
6166: NOT
6167: IFFALSE 6050
// end ;
6169: PPOPN 2
6171: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6172: LD_INT 22
6174: PUSH
6175: LD_INT 3
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: LD_INT 32
6184: PUSH
6185: LD_INT 1
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PPUSH
6196: CALL_OW 69
6200: IFFALSE 6279
6202: GO 6204
6204: DISABLE
6205: LD_INT 0
6207: PPUSH
// begin enable ;
6208: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6209: LD_ADDR_VAR 0 1
6213: PUSH
6214: LD_INT 22
6216: PUSH
6217: LD_INT 3
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: LD_INT 32
6226: PUSH
6227: LD_INT 1
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: PPUSH
6238: CALL_OW 69
6242: PUSH
6243: FOR_IN
6244: IFFALSE 6277
// if GetFuel ( i ) < 1 then
6246: LD_VAR 0 1
6250: PPUSH
6251: CALL_OW 261
6255: PUSH
6256: LD_INT 1
6258: LESS
6259: IFFALSE 6275
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
6261: LD_VAR 0 1
6265: PPUSH
6266: CALL_OW 311
6270: PPUSH
6271: CALL_OW 121
6275: GO 6243
6277: POP
6278: POP
// end ;
6279: PPOPN 1
6281: END
// every 0 0$2 trigger IsDying ( Kurin ) or IsDead ( Kurin ) or IsDying ( Kirov ) or IsDead ( Kirov ) do var i , tmp , enemy , barracks ;
6282: LD_EXP 41
6286: PPUSH
6287: CALL_OW 303
6291: PUSH
6292: LD_EXP 41
6296: PPUSH
6297: CALL_OW 301
6301: OR
6302: PUSH
6303: LD_INT 71
6305: PPUSH
6306: CALL_OW 303
6310: OR
6311: PUSH
6312: LD_INT 71
6314: PPUSH
6315: CALL_OW 301
6319: OR
6320: IFFALSE 6643
6322: GO 6324
6324: DISABLE
6325: LD_INT 0
6327: PPUSH
6328: PPUSH
6329: PPUSH
6330: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ f_class , 1 ] ) ;
6331: LD_ADDR_VAR 0 2
6335: PUSH
6336: LD_EXP 45
6340: PPUSH
6341: LD_INT 25
6343: PUSH
6344: LD_INT 1
6346: PUSH
6347: EMPTY
6348: LIST
6349: LIST
6350: PPUSH
6351: CALL_OW 72
6355: ST_TO_ADDR
// if not tmp then
6356: LD_VAR 0 2
6360: NOT
6361: IFFALSE 6365
// exit ;
6363: GO 6643
// barracks := HexInfo ( 166 , 116 ) ;
6365: LD_ADDR_VAR 0 4
6369: PUSH
6370: LD_INT 166
6372: PPUSH
6373: LD_INT 116
6375: PPUSH
6376: CALL_OW 428
6380: ST_TO_ADDR
// for i in tmp do
6381: LD_ADDR_VAR 0 1
6385: PUSH
6386: LD_VAR 0 2
6390: PUSH
6391: FOR_IN
6392: IFFALSE 6405
// ComExitBuilding ( i ) ;
6394: LD_VAR 0 1
6398: PPUSH
6399: CALL_OW 122
6403: GO 6391
6405: POP
6406: POP
// repeat wait ( 0 0$1 ) ;
6407: LD_INT 35
6409: PPUSH
6410: CALL_OW 67
// tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
6414: LD_ADDR_VAR 0 2
6418: PUSH
6419: LD_EXP 45
6423: PPUSH
6424: LD_INT 25
6426: PUSH
6427: LD_INT 1
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PUSH
6434: LD_INT 50
6436: PUSH
6437: EMPTY
6438: LIST
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: PPUSH
6444: CALL_OW 72
6448: ST_TO_ADDR
// enemy := FilterUnitsInArea ( kirovBaseArea , [ f_enemy , 6 ] ) ;
6449: LD_ADDR_VAR 0 3
6453: PUSH
6454: LD_INT 21
6456: PPUSH
6457: LD_INT 81
6459: PUSH
6460: LD_INT 6
6462: PUSH
6463: EMPTY
6464: LIST
6465: LIST
6466: PPUSH
6467: CALL_OW 70
6471: ST_TO_ADDR
// if enemy then
6472: LD_VAR 0 3
6476: IFFALSE 6521
// begin for i in tmp do
6478: LD_ADDR_VAR 0 1
6482: PUSH
6483: LD_VAR 0 2
6487: PUSH
6488: FOR_IN
6489: IFFALSE 6517
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6491: LD_VAR 0 1
6495: PPUSH
6496: LD_VAR 0 3
6500: PPUSH
6501: LD_VAR 0 1
6505: PPUSH
6506: CALL_OW 74
6510: PPUSH
6511: CALL_OW 115
6515: GO 6488
6517: POP
6518: POP
// end else
6519: GO 6636
// begin for i in tmp do
6521: LD_ADDR_VAR 0 1
6525: PUSH
6526: LD_VAR 0 2
6530: PUSH
6531: FOR_IN
6532: IFFALSE 6634
// if HasTask ( i ) or not IsInArea ( i , kirovBaseArea ) then
6534: LD_VAR 0 1
6538: PPUSH
6539: CALL_OW 314
6543: PUSH
6544: LD_VAR 0 1
6548: PPUSH
6549: LD_INT 21
6551: PPUSH
6552: CALL_OW 308
6556: NOT
6557: OR
6558: IFFALSE 6632
// if GetLives ( i ) < 600 and IsOk ( barracks ) and UnitsInside ( barracks ) < 6 then
6560: LD_VAR 0 1
6564: PPUSH
6565: CALL_OW 256
6569: PUSH
6570: LD_INT 600
6572: LESS
6573: PUSH
6574: LD_VAR 0 4
6578: PPUSH
6579: CALL_OW 302
6583: AND
6584: PUSH
6585: LD_VAR 0 4
6589: PPUSH
6590: CALL_OW 313
6594: PUSH
6595: LD_INT 6
6597: LESS
6598: AND
6599: IFFALSE 6617
// ComEnterUnit ( i , barracks ) else
6601: LD_VAR 0 1
6605: PPUSH
6606: LD_VAR 0 4
6610: PPUSH
6611: CALL_OW 120
6615: GO 6632
// ComMoveXY ( i , 162 , 109 ) ;
6617: LD_VAR 0 1
6621: PPUSH
6622: LD_INT 162
6624: PPUSH
6625: LD_INT 109
6627: PPUSH
6628: CALL_OW 111
6632: GO 6531
6634: POP
6635: POP
// end ; until not tmp ;
6636: LD_VAR 0 2
6640: NOT
6641: IFFALSE 6407
// end ;
6643: PPOPN 4
6645: END
// every 0 0$2 trigger IsDying ( Beria ) or IsDead ( Beria ) do var i , tmp ;
6646: LD_INT 106
6648: PPUSH
6649: CALL_OW 303
6653: PUSH
6654: LD_INT 106
6656: PPUSH
6657: CALL_OW 301
6661: OR
6662: IFFALSE 6757
6664: GO 6666
6666: DISABLE
6667: LD_INT 0
6669: PPUSH
6670: PPUSH
// begin tmp := UnitFilter ( beriaBaseSquad , [ f_class , 1 ] ) ;
6671: LD_ADDR_VAR 0 2
6675: PUSH
6676: LD_EXP 46
6680: PPUSH
6681: LD_INT 25
6683: PUSH
6684: LD_INT 1
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: PPUSH
6691: CALL_OW 72
6695: ST_TO_ADDR
// if not tmp then
6696: LD_VAR 0 2
6700: NOT
6701: IFFALSE 6705
// exit ;
6703: GO 6757
// for i in tmp do
6705: LD_ADDR_VAR 0 1
6709: PUSH
6710: LD_VAR 0 2
6714: PUSH
6715: FOR_IN
6716: IFFALSE 6755
// begin if IsInUnit ( i ) then
6718: LD_VAR 0 1
6722: PPUSH
6723: CALL_OW 310
6727: IFFALSE 6738
// ComExitBuilding ( i ) ;
6729: LD_VAR 0 1
6733: PPUSH
6734: CALL_OW 122
// AddComMoveXY ( i , 66 , 128 ) ;
6738: LD_VAR 0 1
6742: PPUSH
6743: LD_INT 66
6745: PPUSH
6746: LD_INT 128
6748: PPUSH
6749: CALL_OW 171
// end ;
6753: GO 6715
6755: POP
6756: POP
// end ; end_of_file
6757: PPOPN 2
6759: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6760: LD_INT 0
6762: PPUSH
6763: PPUSH
6764: PPUSH
// SetBName ( omikron , omikron ) ;
6765: LD_INT 64
6767: PPUSH
6768: LD_STRING omikron
6770: PPUSH
6771: CALL_OW 500
// uc_side := 4 ;
6775: LD_ADDR_OWVAR 20
6779: PUSH
6780: LD_INT 4
6782: ST_TO_ADDR
// uc_nation := 1 ;
6783: LD_ADDR_OWVAR 21
6787: PUSH
6788: LD_INT 1
6790: ST_TO_ADDR
// omicronSquad := [ ] ;
6791: LD_ADDR_EXP 52
6795: PUSH
6796: EMPTY
6797: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6798: LD_ADDR_VAR 0 2
6802: PUSH
6803: LD_INT 22
6805: PUSH
6806: LD_INT 4
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: PUSH
6813: LD_INT 2
6815: PUSH
6816: LD_INT 30
6818: PUSH
6819: LD_INT 32
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PUSH
6826: LD_INT 30
6828: PUSH
6829: LD_INT 31
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: PUSH
6836: EMPTY
6837: LIST
6838: LIST
6839: LIST
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: PPUSH
6845: CALL_OW 69
6849: PUSH
6850: FOR_IN
6851: IFFALSE 6908
// begin PrepareHuman ( false , 1 , 1 ) ;
6853: LD_INT 0
6855: PPUSH
6856: LD_INT 1
6858: PPUSH
6859: LD_INT 1
6861: PPUSH
6862: CALL_OW 380
// un := CreateHuman ;
6866: LD_ADDR_VAR 0 3
6870: PUSH
6871: CALL_OW 44
6875: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6876: LD_ADDR_EXP 52
6880: PUSH
6881: LD_EXP 52
6885: PUSH
6886: LD_VAR 0 3
6890: UNION
6891: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6892: LD_VAR 0 3
6896: PPUSH
6897: LD_VAR 0 2
6901: PPUSH
6902: CALL_OW 52
// end ;
6906: GO 6850
6908: POP
6909: POP
// for i := 1 to 3 do
6910: LD_ADDR_VAR 0 2
6914: PUSH
6915: DOUBLE
6916: LD_INT 1
6918: DEC
6919: ST_TO_ADDR
6920: LD_INT 3
6922: PUSH
6923: FOR_TO
6924: IFFALSE 6979
// begin PrepareHuman ( false , 2 , 2 ) ;
6926: LD_INT 0
6928: PPUSH
6929: LD_INT 2
6931: PPUSH
6932: LD_INT 2
6934: PPUSH
6935: CALL_OW 380
// un := CreateHuman ;
6939: LD_ADDR_VAR 0 3
6943: PUSH
6944: CALL_OW 44
6948: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6949: LD_ADDR_EXP 52
6953: PUSH
6954: LD_EXP 52
6958: PUSH
6959: LD_VAR 0 3
6963: UNION
6964: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
6965: LD_VAR 0 3
6969: PPUSH
6970: LD_INT 64
6972: PPUSH
6973: CALL_OW 52
// end ;
6977: GO 6923
6979: POP
6980: POP
// for i := 1 to 2 do
6981: LD_ADDR_VAR 0 2
6985: PUSH
6986: DOUBLE
6987: LD_INT 1
6989: DEC
6990: ST_TO_ADDR
6991: LD_INT 2
6993: PUSH
6994: FOR_TO
6995: IFFALSE 7134
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
6997: LD_INT 4
6999: PPUSH
7000: LD_INT 1
7002: PPUSH
7003: LD_INT 2
7005: PPUSH
7006: LD_INT 2
7008: PPUSH
7009: LD_INT 1
7011: PPUSH
7012: LD_INT 3
7014: PPUSH
7015: LD_INT 100
7017: PPUSH
7018: CALL 386 0 7
// un := CreateVehicle ;
7022: LD_ADDR_VAR 0 3
7026: PUSH
7027: CALL_OW 45
7031: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7032: LD_ADDR_EXP 52
7036: PUSH
7037: LD_EXP 52
7041: PUSH
7042: LD_VAR 0 3
7046: UNION
7047: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
7048: LD_VAR 0 3
7052: PPUSH
7053: LD_INT 28
7055: PPUSH
7056: LD_INT 37
7058: PPUSH
7059: LD_INT 6
7061: PPUSH
7062: LD_INT 0
7064: PPUSH
7065: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
7069: LD_INT 0
7071: PPUSH
7072: LD_INT 3
7074: PPUSH
7075: LD_INT 2
7077: PPUSH
7078: CALL_OW 380
// un := CreateHuman ;
7082: LD_ADDR_VAR 0 3
7086: PUSH
7087: CALL_OW 44
7091: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7092: LD_ADDR_EXP 52
7096: PUSH
7097: LD_EXP 52
7101: PUSH
7102: LD_VAR 0 3
7106: UNION
7107: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
7108: LD_VAR 0 3
7112: PPUSH
7113: LD_EXP 52
7117: PUSH
7118: LD_EXP 52
7122: PUSH
7123: LD_INT 1
7125: MINUS
7126: ARRAY
7127: PPUSH
7128: CALL_OW 52
// end ;
7132: GO 6994
7134: POP
7135: POP
// end ;
7136: LD_VAR 0 1
7140: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
7141: LD_INT 0
7143: PPUSH
7144: PPUSH
7145: PPUSH
7146: PPUSH
// uc_side := 4 ;
7147: LD_ADDR_OWVAR 20
7151: PUSH
7152: LD_INT 4
7154: ST_TO_ADDR
// uc_nation := 1 ;
7155: LD_ADDR_OWVAR 21
7159: PUSH
7160: LD_INT 1
7162: ST_TO_ADDR
// tmp := [ ] ;
7163: LD_ADDR_VAR 0 4
7167: PUSH
7168: EMPTY
7169: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7170: LD_INT 4
7172: PPUSH
7173: LD_INT 1
7175: PPUSH
7176: LD_INT 2
7178: PPUSH
7179: LD_INT 1
7181: PPUSH
7182: LD_INT 1
7184: PPUSH
7185: LD_INT 4
7187: PPUSH
7188: LD_INT 77
7190: PPUSH
7191: CALL 386 0 7
// un := CreateVehicle ;
7195: LD_ADDR_VAR 0 3
7199: PUSH
7200: CALL_OW 45
7204: ST_TO_ADDR
// tmp := tmp union un ;
7205: LD_ADDR_VAR 0 4
7209: PUSH
7210: LD_VAR 0 4
7214: PUSH
7215: LD_VAR 0 3
7219: UNION
7220: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7221: LD_VAR 0 3
7225: PPUSH
7226: LD_INT 2
7228: PPUSH
7229: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
7233: LD_VAR 0 3
7237: PPUSH
7238: LD_INT 106
7240: PPUSH
7241: LD_INT 3
7243: PPUSH
7244: LD_INT 0
7246: PPUSH
7247: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
7251: LD_INT 0
7253: PPUSH
7254: LD_INT 3
7256: PPUSH
7257: LD_INT 2
7259: PPUSH
7260: CALL_OW 380
// un := CreateHuman ;
7264: LD_ADDR_VAR 0 3
7268: PUSH
7269: CALL_OW 44
7273: ST_TO_ADDR
// tmp := tmp union un ;
7274: LD_ADDR_VAR 0 4
7278: PUSH
7279: LD_VAR 0 4
7283: PUSH
7284: LD_VAR 0 3
7288: UNION
7289: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
7290: LD_VAR 0 3
7294: PPUSH
7295: LD_VAR 0 4
7299: PUSH
7300: LD_VAR 0 4
7304: PUSH
7305: LD_INT 1
7307: MINUS
7308: ARRAY
7309: PPUSH
7310: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
7314: LD_VAR 0 3
7318: PPUSH
7319: LD_INT 109
7321: PPUSH
7322: LD_INT 9
7324: PPUSH
7325: CALL_OW 111
// wait ( 0 0$1 ) ;
7329: LD_INT 35
7331: PPUSH
7332: CALL_OW 67
// for i := 1 to 2 do
7336: LD_ADDR_VAR 0 2
7340: PUSH
7341: DOUBLE
7342: LD_INT 1
7344: DEC
7345: ST_TO_ADDR
7346: LD_INT 2
7348: PUSH
7349: FOR_TO
7350: IFFALSE 7414
// begin PrepareHuman ( false , 1 , 2 ) ;
7352: LD_INT 0
7354: PPUSH
7355: LD_INT 1
7357: PPUSH
7358: LD_INT 2
7360: PPUSH
7361: CALL_OW 380
// un := CreateHuman ;
7365: LD_ADDR_VAR 0 3
7369: PUSH
7370: CALL_OW 44
7374: ST_TO_ADDR
// tmp := tmp union un ;
7375: LD_ADDR_VAR 0 4
7379: PUSH
7380: LD_VAR 0 4
7384: PUSH
7385: LD_VAR 0 3
7389: UNION
7390: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
7391: LD_VAR 0 3
7395: PPUSH
7396: LD_INT 105
7398: PPUSH
7399: LD_INT 2
7401: PPUSH
7402: LD_INT 2
7404: PPUSH
7405: LD_INT 0
7407: PPUSH
7408: CALL_OW 50
// end ;
7412: GO 7349
7414: POP
7415: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
7416: LD_VAR 0 4
7420: PPUSH
7421: LD_INT 26
7423: PPUSH
7424: LD_INT 35
7426: PPUSH
7427: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
7431: LD_INT 35
7433: PPUSH
7434: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
7438: LD_VAR 0 4
7442: PPUSH
7443: LD_INT 50
7445: PUSH
7446: EMPTY
7447: LIST
7448: PPUSH
7449: CALL_OW 72
7453: NOT
7454: IFFALSE 7458
// exit ;
7456: GO 7585
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
7458: LD_VAR 0 4
7462: PPUSH
7463: LD_INT 91
7465: PUSH
7466: LD_INT 64
7468: PUSH
7469: LD_INT 12
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: LIST
7476: PPUSH
7477: CALL_OW 72
7481: PUSH
7482: LD_VAR 0 4
7486: EQUAL
7487: IFFALSE 7431
// omicronSquad := omicronSquad union tmp ;
7489: LD_ADDR_EXP 52
7493: PUSH
7494: LD_EXP 52
7498: PUSH
7499: LD_VAR 0 4
7503: UNION
7504: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
7505: LD_ADDR_VAR 0 2
7509: PUSH
7510: LD_VAR 0 4
7514: PPUSH
7515: LD_INT 25
7517: PUSH
7518: LD_INT 1
7520: PUSH
7521: EMPTY
7522: LIST
7523: LIST
7524: PPUSH
7525: CALL_OW 72
7529: PUSH
7530: FOR_IN
7531: IFFALSE 7583
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7533: LD_VAR 0 2
7537: PPUSH
7538: LD_INT 22
7540: PUSH
7541: LD_INT 4
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PUSH
7548: LD_INT 30
7550: PUSH
7551: LD_INT 4
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: PPUSH
7562: CALL_OW 69
7566: PPUSH
7567: LD_VAR 0 2
7571: PPUSH
7572: CALL_OW 74
7576: PPUSH
7577: CALL_OW 120
7581: GO 7530
7583: POP
7584: POP
// end ;
7585: LD_VAR 0 1
7589: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7590: LD_EXP 13
7594: NOT
7595: IFFALSE 8166
7597: GO 7599
7599: DISABLE
7600: LD_INT 0
7602: PPUSH
7603: PPUSH
7604: PPUSH
7605: PPUSH
// begin enable ;
7606: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7607: LD_ADDR_VAR 0 2
7611: PUSH
7612: LD_INT 22
7614: PUSH
7615: LD_INT 4
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PUSH
7622: LD_INT 21
7624: PUSH
7625: LD_INT 3
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: LD_INT 3
7634: PUSH
7635: LD_INT 24
7637: PUSH
7638: LD_INT 1000
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: PUSH
7645: EMPTY
7646: LIST
7647: LIST
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: LIST
7653: PPUSH
7654: CALL_OW 69
7658: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7659: LD_ADDR_VAR 0 3
7663: PUSH
7664: LD_EXP 52
7668: PPUSH
7669: LD_INT 25
7671: PUSH
7672: LD_INT 2
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: PPUSH
7679: CALL_OW 72
7683: ST_TO_ADDR
// if filter and tmp then
7684: LD_VAR 0 2
7688: PUSH
7689: LD_VAR 0 3
7693: AND
7694: IFFALSE 7767
// begin for i in tmp do
7696: LD_ADDR_VAR 0 1
7700: PUSH
7701: LD_VAR 0 3
7705: PUSH
7706: FOR_IN
7707: IFFALSE 7763
// if IsInUnit ( i ) then
7709: LD_VAR 0 1
7713: PPUSH
7714: CALL_OW 310
7718: IFFALSE 7731
// ComExitBuilding ( i ) else
7720: LD_VAR 0 1
7724: PPUSH
7725: CALL_OW 122
7729: GO 7761
// if not HasTask ( i ) then
7731: LD_VAR 0 1
7735: PPUSH
7736: CALL_OW 314
7740: NOT
7741: IFFALSE 7761
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7743: LD_VAR 0 1
7747: PPUSH
7748: LD_VAR 0 2
7752: PUSH
7753: LD_INT 1
7755: ARRAY
7756: PPUSH
7757: CALL_OW 130
7761: GO 7706
7763: POP
7764: POP
// end else
7765: GO 7838
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7767: LD_VAR 0 3
7771: PPUSH
7772: LD_INT 3
7774: PUSH
7775: LD_INT 54
7777: PUSH
7778: EMPTY
7779: LIST
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: PPUSH
7785: CALL_OW 72
7789: IFFALSE 7838
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7791: LD_ADDR_VAR 0 1
7795: PUSH
7796: LD_VAR 0 3
7800: PPUSH
7801: LD_INT 3
7803: PUSH
7804: LD_INT 54
7806: PUSH
7807: EMPTY
7808: LIST
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: PPUSH
7814: CALL_OW 72
7818: PUSH
7819: FOR_IN
7820: IFFALSE 7836
// ComEnterUnit ( i , omikron ) ;
7822: LD_VAR 0 1
7826: PPUSH
7827: LD_INT 64
7829: PPUSH
7830: CALL_OW 120
7834: GO 7819
7836: POP
7837: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7838: LD_ADDR_VAR 0 2
7842: PUSH
7843: LD_EXP 52
7847: PPUSH
7848: LD_INT 21
7850: PUSH
7851: LD_INT 2
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PPUSH
7858: CALL_OW 72
7862: ST_TO_ADDR
// if not filter then
7863: LD_VAR 0 2
7867: NOT
7868: IFFALSE 7872
// exit ;
7870: GO 8166
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7872: LD_ADDR_VAR 0 4
7876: PUSH
7877: LD_INT 13
7879: PPUSH
7880: LD_INT 81
7882: PUSH
7883: LD_INT 4
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PPUSH
7890: CALL_OW 70
7894: ST_TO_ADDR
// if enemy then
7895: LD_VAR 0 4
7899: IFFALSE 8166
// begin for i in filter do
7901: LD_ADDR_VAR 0 1
7905: PUSH
7906: LD_VAR 0 2
7910: PUSH
7911: FOR_IN
7912: IFFALSE 8164
// begin tmp := IsDrivenBy ( i ) ;
7914: LD_ADDR_VAR 0 3
7918: PUSH
7919: LD_VAR 0 1
7923: PPUSH
7924: CALL_OW 311
7928: ST_TO_ADDR
// if not tmp then
7929: LD_VAR 0 3
7933: NOT
7934: IFFALSE 7938
// continue ;
7936: GO 7911
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
7938: LD_VAR 0 1
7942: PPUSH
7943: CALL_OW 256
7947: PUSH
7948: LD_INT 600
7950: GREATEREQUAL
7951: PUSH
7952: LD_VAR 0 1
7956: PPUSH
7957: CALL_OW 110
7961: PUSH
7962: LD_INT 1
7964: NONEQUAL
7965: AND
7966: IFFALSE 7992
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7968: LD_VAR 0 1
7972: PPUSH
7973: LD_VAR 0 4
7977: PPUSH
7978: LD_VAR 0 1
7982: PPUSH
7983: CALL_OW 74
7987: PPUSH
7988: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
7992: LD_VAR 0 1
7996: PPUSH
7997: CALL_OW 256
8001: PUSH
8002: LD_INT 600
8004: LESS
8005: PUSH
8006: LD_VAR 0 1
8010: PPUSH
8011: CALL_OW 110
8015: PUSH
8016: LD_INT 1
8018: NONEQUAL
8019: AND
8020: IFFALSE 8049
// begin SetTag ( i , 1 ) ;
8022: LD_VAR 0 1
8026: PPUSH
8027: LD_INT 1
8029: PPUSH
8030: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
8034: LD_VAR 0 1
8038: PPUSH
8039: LD_INT 27
8041: PPUSH
8042: LD_INT 35
8044: PPUSH
8045: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
8049: LD_VAR 0 1
8053: PPUSH
8054: CALL_OW 110
8058: PUSH
8059: LD_INT 1
8061: EQUAL
8062: PUSH
8063: LD_VAR 0 1
8067: PPUSH
8068: LD_INT 27
8070: PPUSH
8071: LD_INT 35
8073: PPUSH
8074: CALL_OW 297
8078: PUSH
8079: LD_INT 6
8081: LESS
8082: AND
8083: PUSH
8084: LD_VAR 0 3
8088: AND
8089: IFFALSE 8162
// begin ComExitVehicle ( tmp ) ;
8091: LD_VAR 0 3
8095: PPUSH
8096: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8100: LD_VAR 0 3
8104: PPUSH
8105: LD_VAR 0 1
8109: PPUSH
8110: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8114: LD_INT 35
8116: PPUSH
8117: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8121: LD_VAR 0 1
8125: PPUSH
8126: CALL_OW 256
8130: PUSH
8131: LD_INT 1000
8133: EQUAL
8134: IFFALSE 8114
// ComEnterUnit ( tmp , i ) ;
8136: LD_VAR 0 3
8140: PPUSH
8141: LD_VAR 0 1
8145: PPUSH
8146: CALL_OW 120
// SetTag ( i , 0 ) ;
8150: LD_VAR 0 1
8154: PPUSH
8155: LD_INT 0
8157: PPUSH
8158: CALL_OW 109
// end ; end ;
8162: GO 7911
8164: POP
8165: POP
// end ; end ;
8166: PPOPN 4
8168: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
8169: LD_EXP 13
8173: IFFALSE 8317
8175: GO 8177
8177: DISABLE
8178: LD_INT 0
8180: PPUSH
8181: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
8182: LD_ADDR_VAR 0 2
8186: PUSH
8187: LD_EXP 52
8191: PPUSH
8192: LD_INT 21
8194: PUSH
8195: LD_INT 1
8197: PUSH
8198: EMPTY
8199: LIST
8200: LIST
8201: PUSH
8202: LD_INT 50
8204: PUSH
8205: EMPTY
8206: LIST
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: PPUSH
8212: CALL_OW 72
8216: ST_TO_ADDR
// if not tmp then
8217: LD_VAR 0 2
8221: NOT
8222: IFFALSE 8226
// exit ;
8224: GO 8317
// repeat wait ( 0 0$1 ) ;
8226: LD_INT 35
8228: PPUSH
8229: CALL_OW 67
// for i in tmp do
8233: LD_ADDR_VAR 0 1
8237: PUSH
8238: LD_VAR 0 2
8242: PUSH
8243: FOR_IN
8244: IFFALSE 8308
// begin ComExit ( i ) ;
8246: LD_VAR 0 1
8250: PPUSH
8251: CALL 76746 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
8255: LD_VAR 0 1
8259: PPUSH
8260: LD_INT 14
8262: PPUSH
8263: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
8267: LD_VAR 0 1
8271: PPUSH
8272: LD_INT 14
8274: PPUSH
8275: CALL_OW 308
8279: IFFALSE 8306
// begin tmp := tmp diff i ;
8281: LD_ADDR_VAR 0 2
8285: PUSH
8286: LD_VAR 0 2
8290: PUSH
8291: LD_VAR 0 1
8295: DIFF
8296: ST_TO_ADDR
// RemoveUnit ( i ) ;
8297: LD_VAR 0 1
8301: PPUSH
8302: CALL_OW 64
// end ; end ;
8306: GO 8243
8308: POP
8309: POP
// until not tmp ;
8310: LD_VAR 0 2
8314: NOT
8315: IFFALSE 8226
// end ; end_of_file
8317: PPOPN 2
8319: END
// export function Action ; var i , un , veh , tmp ; begin
8320: LD_INT 0
8322: PPUSH
8323: PPUSH
8324: PPUSH
8325: PPUSH
8326: PPUSH
// InGameOn ;
8327: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
8331: LD_INT 179
8333: PPUSH
8334: LD_INT 5
8336: PPUSH
8337: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
8341: LD_ADDR_VAR 0 4
8345: PUSH
8346: LD_INT 2
8348: PPUSH
8349: LD_INT 2
8351: PPUSH
8352: LD_INT 12
8354: PPUSH
8355: LD_INT 1
8357: PPUSH
8358: LD_INT 1
8360: PPUSH
8361: LD_INT 24
8363: PPUSH
8364: LD_INT 33
8366: PPUSH
8367: CALL 386 0 7
8371: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8372: LD_VAR 0 4
8376: PPUSH
8377: LD_INT 2
8379: PPUSH
8380: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
8384: LD_VAR 0 4
8388: PPUSH
8389: LD_INT 178
8391: PPUSH
8392: LD_INT 2
8394: PPUSH
8395: LD_INT 0
8397: PPUSH
8398: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
8402: LD_EXP 26
8406: PPUSH
8407: LD_VAR 0 4
8411: PPUSH
8412: CALL_OW 52
// if Kamil then
8416: LD_EXP 30
8420: IFFALSE 8455
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
8422: LD_EXP 30
8426: PPUSH
8427: LD_INT 207
8429: PPUSH
8430: LD_INT 37
8432: PPUSH
8433: LD_INT 0
8435: PPUSH
8436: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
8440: LD_EXP 30
8444: PPUSH
8445: LD_INT 211
8447: PPUSH
8448: LD_INT 38
8450: PPUSH
8451: CALL_OW 118
// end ; if Sophia then
8455: LD_EXP 32
8459: IFFALSE 8494
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
8461: LD_EXP 32
8465: PPUSH
8466: LD_INT 209
8468: PPUSH
8469: LD_INT 40
8471: PPUSH
8472: LD_INT 0
8474: PPUSH
8475: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
8479: LD_EXP 32
8483: PPUSH
8484: LD_INT 211
8486: PPUSH
8487: LD_INT 38
8489: PPUSH
8490: CALL_OW 118
// end ; if Givi then
8494: LD_EXP 27
8498: IFFALSE 8533
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
8500: LD_EXP 27
8504: PPUSH
8505: LD_INT 201
8507: PPUSH
8508: LD_INT 34
8510: PPUSH
8511: LD_INT 0
8513: PPUSH
8514: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
8518: LD_EXP 27
8522: PPUSH
8523: LD_INT 206
8525: PPUSH
8526: LD_INT 36
8528: PPUSH
8529: CALL_OW 118
// end ; if Ibrahim then
8533: LD_EXP 29
8537: IFFALSE 8572
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
8539: LD_EXP 29
8543: PPUSH
8544: LD_INT 202
8546: PPUSH
8547: LD_INT 39
8549: PPUSH
8550: LD_INT 0
8552: PPUSH
8553: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
8557: LD_EXP 29
8561: PPUSH
8562: LD_INT 206
8564: PPUSH
8565: LD_INT 36
8567: PPUSH
8568: CALL_OW 118
// end ; if Markov then
8572: LD_EXP 33
8576: IFFALSE 8663
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8578: LD_ADDR_VAR 0 4
8582: PUSH
8583: LD_INT 2
8585: PPUSH
8586: LD_INT 2
8588: PPUSH
8589: LD_INT 13
8591: PPUSH
8592: LD_INT 1
8594: PPUSH
8595: LD_INT 1
8597: PPUSH
8598: LD_INT 25
8600: PPUSH
8601: LD_INT 80
8603: PUSH
8604: LD_INT 20
8606: PUSH
8607: LD_OWVAR 67
8611: MUL
8612: MINUS
8613: PPUSH
8614: CALL 386 0 7
8618: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8619: LD_VAR 0 4
8623: PPUSH
8624: LD_INT 2
8626: PPUSH
8627: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8631: LD_VAR 0 4
8635: PPUSH
8636: LD_INT 197
8638: PPUSH
8639: LD_INT 35
8641: PPUSH
8642: LD_INT 0
8644: PPUSH
8645: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8649: LD_EXP 33
8653: PPUSH
8654: LD_VAR 0 4
8658: PPUSH
8659: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8663: LD_ADDR_VAR 0 5
8667: PUSH
8668: LD_EXP 31
8672: PUSH
8673: LD_EXP 38
8677: UNION
8678: ST_TO_ADDR
// for i in tmp do
8679: LD_ADDR_VAR 0 2
8683: PUSH
8684: LD_VAR 0 5
8688: PUSH
8689: FOR_IN
8690: IFFALSE 8724
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8692: LD_VAR 0 2
8696: PPUSH
8697: LD_INT 203
8699: PPUSH
8700: LD_INT 41
8702: PPUSH
8703: LD_INT 6
8705: PPUSH
8706: LD_INT 0
8708: PPUSH
8709: CALL_OW 50
// ComHold ( i ) ;
8713: LD_VAR 0 2
8717: PPUSH
8718: CALL_OW 140
// end ;
8722: GO 8689
8724: POP
8725: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8726: LD_INT 22
8728: PUSH
8729: LD_INT 2
8731: PUSH
8732: EMPTY
8733: LIST
8734: LIST
8735: PUSH
8736: LD_INT 25
8738: PUSH
8739: LD_INT 2
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: PUSH
8746: EMPTY
8747: LIST
8748: LIST
8749: PPUSH
8750: CALL_OW 69
8754: NOT
8755: IFFALSE 8769
// SetClass ( Heike , 2 ) ;
8757: LD_EXP 26
8761: PPUSH
8762: LD_INT 2
8764: PPUSH
8765: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8769: LD_EXP 26
8773: PPUSH
8774: LD_INT 183
8776: PPUSH
8777: LD_INT 12
8779: PPUSH
8780: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8784: LD_EXP 26
8788: PPUSH
8789: LD_INT 188
8791: PPUSH
8792: LD_INT 20
8794: PPUSH
8795: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8799: LD_EXP 26
8803: PPUSH
8804: LD_INT 191
8806: PPUSH
8807: LD_INT 25
8809: PPUSH
8810: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8814: LD_EXP 26
8818: PPUSH
8819: LD_INT 203
8821: PPUSH
8822: LD_INT 29
8824: PPUSH
8825: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8829: LD_EXP 26
8833: PPUSH
8834: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8838: LD_INT 35
8840: PPUSH
8841: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8845: LD_EXP 26
8849: PPUSH
8850: CALL_OW 310
8854: NOT
8855: IFFALSE 8838
// CenterOnUnits ( Heike ) ;
8857: LD_EXP 26
8861: PPUSH
8862: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8866: LD_ADDR_VAR 0 5
8870: PUSH
8871: LD_INT 22
8873: PUSH
8874: LD_INT 2
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: PUSH
8881: LD_INT 21
8883: PUSH
8884: LD_INT 1
8886: PUSH
8887: EMPTY
8888: LIST
8889: LIST
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: PPUSH
8895: CALL_OW 69
8899: PUSH
8900: LD_EXP 26
8904: PUSH
8905: LD_EXP 33
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: DIFF
8914: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
8915: LD_VAR 0 5
8919: PPUSH
8920: LD_EXP 26
8924: PPUSH
8925: CALL_OW 119
// if Givi then
8929: LD_EXP 27
8933: IFFALSE 8951
// ComTurnUnit ( Heike , Givi ) else
8935: LD_EXP 26
8939: PPUSH
8940: LD_EXP 27
8944: PPUSH
8945: CALL_OW 119
8949: GO 8969
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
8951: LD_EXP 26
8955: PPUSH
8956: LD_VAR 0 5
8960: PUSH
8961: LD_INT 1
8963: ARRAY
8964: PPUSH
8965: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
8969: LD_EXP 26
8973: PPUSH
8974: LD_STRING DH-Start-1
8976: PPUSH
8977: CALL_OW 88
// if Givi then
8981: LD_EXP 27
8985: IFFALSE 9032
// begin Say ( Givi , DG-Start-2 ) ;
8987: LD_EXP 27
8991: PPUSH
8992: LD_STRING DG-Start-2
8994: PPUSH
8995: CALL_OW 88
// if not Mike then
8999: LD_EXP 28
9003: NOT
9004: IFFALSE 9030
// begin Say ( Givi , DG-Start-b-3 ) ;
9006: LD_EXP 27
9010: PPUSH
9011: LD_STRING DG-Start-b-3
9013: PPUSH
9014: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
9018: LD_EXP 26
9022: PPUSH
9023: LD_STRING DH-Start-b-4
9025: PPUSH
9026: CALL_OW 88
// end ; end else
9030: GO 9097
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
9032: LD_EXP 38
9036: PPUSH
9037: LD_INT 26
9039: PUSH
9040: LD_INT 1
9042: PUSH
9043: EMPTY
9044: LIST
9045: LIST
9046: PPUSH
9047: CALL_OW 72
9051: PUSH
9052: LD_INT 1
9054: ARRAY
9055: PPUSH
9056: LD_STRING DArm-Start-a-2
9058: PPUSH
9059: CALL_OW 88
9063: NOT
9064: IFFALSE 9097
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
9066: LD_EXP 38
9070: PPUSH
9071: LD_INT 26
9073: PUSH
9074: LD_INT 2
9076: PUSH
9077: EMPTY
9078: LIST
9079: LIST
9080: PPUSH
9081: CALL_OW 72
9085: PUSH
9086: LD_INT 1
9088: ARRAY
9089: PPUSH
9090: LD_STRING DArf-Start-a-2
9092: PPUSH
9093: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
9097: LD_EXP 26
9101: PPUSH
9102: LD_INT 211
9104: PPUSH
9105: LD_INT 38
9107: PPUSH
9108: CALL_OW 118
// wait ( 0 0$1 ) ;
9112: LD_INT 35
9114: PPUSH
9115: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
9119: LD_EXP 26
9123: PPUSH
9124: LD_STRING DH-Start-3
9126: PPUSH
9127: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9131: LD_EXP 26
9135: PPUSH
9136: LD_STRING DH-Start-4
9138: PPUSH
9139: CALL_OW 88
// InGameOff ;
9143: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
9147: LD_STRING Prepare
9149: PPUSH
9150: CALL_OW 337
// SaveForQuickRestart ;
9154: CALL_OW 22
// wait ( 0 0$10 ) ;
9158: LD_INT 350
9160: PPUSH
9161: CALL_OW 67
// if not Aviradze then
9165: LD_EXP 36
9169: NOT
9170: IFFALSE 9174
// exit ;
9172: GO 9414
// SetDir ( Aviradze , 4 ) ;
9174: LD_EXP 36
9178: PPUSH
9179: LD_INT 4
9181: PPUSH
9182: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
9186: LD_EXP 36
9190: PPUSH
9191: LD_INT 225
9193: PPUSH
9194: LD_INT 33
9196: PPUSH
9197: LD_INT 0
9199: PPUSH
9200: CALL_OW 48
// for i := 1 to 2 do
9204: LD_ADDR_VAR 0 2
9208: PUSH
9209: DOUBLE
9210: LD_INT 1
9212: DEC
9213: ST_TO_ADDR
9214: LD_INT 2
9216: PUSH
9217: FOR_TO
9218: IFFALSE 9349
// begin uc_side := 2 ;
9220: LD_ADDR_OWVAR 20
9224: PUSH
9225: LD_INT 2
9227: ST_TO_ADDR
// uc_nation := 0 ;
9228: LD_ADDR_OWVAR 21
9232: PUSH
9233: LD_INT 0
9235: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9236: LD_INT 0
9238: PPUSH
9239: LD_INT 12
9241: PPUSH
9242: LD_INT 1
9244: PPUSH
9245: CALL_OW 380
// hc_gallery :=  ;
9249: LD_ADDR_OWVAR 33
9253: PUSH
9254: LD_STRING 
9256: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
9257: LD_ADDR_OWVAR 26
9261: PUSH
9262: LD_STRING Artudito
9264: PUSH
9265: LD_STRING Textur
9267: PUSH
9268: EMPTY
9269: LIST
9270: LIST
9271: PUSH
9272: LD_VAR 0 2
9276: ARRAY
9277: ST_TO_ADDR
// un := CreateHuman ;
9278: LD_ADDR_VAR 0 3
9282: PUSH
9283: CALL_OW 44
9287: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
9288: LD_VAR 0 3
9292: PPUSH
9293: LD_INT 224
9295: PUSH
9296: LD_INT 226
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: PUSH
9303: LD_VAR 0 2
9307: ARRAY
9308: PPUSH
9309: LD_INT 31
9311: PUSH
9312: LD_INT 35
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: PUSH
9319: LD_VAR 0 2
9323: ARRAY
9324: PPUSH
9325: LD_INT 0
9327: PPUSH
9328: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
9332: LD_VAR 0 3
9336: PPUSH
9337: LD_INT 215
9339: PPUSH
9340: LD_INT 36
9342: PPUSH
9343: CALL_OW 111
// end ;
9347: GO 9217
9349: POP
9350: POP
// hc_name :=  ;
9351: LD_ADDR_OWVAR 26
9355: PUSH
9356: LD_STRING 
9358: ST_TO_ADDR
// InitHc ;
9359: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
9363: LD_EXP 36
9367: PPUSH
9368: LD_INT 215
9370: PPUSH
9371: LD_INT 36
9373: PPUSH
9374: CALL_OW 111
// Say ( Aviradze , DA-Arrive-1 ) ;
9378: LD_EXP 36
9382: PPUSH
9383: LD_STRING DA-Arrive-1
9385: PPUSH
9386: CALL_OW 88
// Say ( Heike , DH-Arrive-2 ) ;
9390: LD_EXP 26
9394: PPUSH
9395: LD_STRING DH-Arrive-2
9397: PPUSH
9398: CALL_OW 88
// Say ( Aviradze , DA-Arrive-3 ) ;
9402: LD_EXP 36
9406: PPUSH
9407: LD_STRING DA-Arrive-3
9409: PPUSH
9410: CALL_OW 88
// end ;
9414: LD_VAR 0 1
9418: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh , p , sex ;
9419: LD_EXP 3
9423: IFFALSE 10937
9425: GO 9427
9427: DISABLE
9428: LD_INT 0
9430: PPUSH
9431: PPUSH
9432: PPUSH
9433: PPUSH
9434: PPUSH
// begin DialogueOn ;
9435: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
9439: LD_EXP 26
9443: PPUSH
9444: LD_STRING DH-base-1
9446: PPUSH
9447: CALL_OW 88
// if Markov then
9451: LD_EXP 33
9455: IFFALSE 9507
// begin Say ( Markov , DMar-base-2 ) ;
9457: LD_EXP 33
9461: PPUSH
9462: LD_STRING DMar-base-2
9464: PPUSH
9465: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
9469: LD_EXP 33
9473: PPUSH
9474: LD_STRING DMar-base-3
9476: PPUSH
9477: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
9481: LD_EXP 26
9485: PPUSH
9486: LD_STRING DH-base-4
9488: PPUSH
9489: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
9493: LD_EXP 33
9497: PPUSH
9498: LD_STRING DMar-base-5
9500: PPUSH
9501: CALL_OW 88
// end else
9505: GO 9584
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
9507: LD_EXP 38
9511: PPUSH
9512: LD_INT 26
9514: PUSH
9515: LD_INT 1
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: PPUSH
9522: CALL_OW 72
9526: PUSH
9527: LD_INT 1
9529: ARRAY
9530: PPUSH
9531: LD_STRING DArm-base-a-2
9533: PPUSH
9534: CALL_OW 88
9538: NOT
9539: IFFALSE 9572
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
9541: LD_EXP 38
9545: PPUSH
9546: LD_INT 26
9548: PUSH
9549: LD_INT 2
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: PPUSH
9556: CALL_OW 72
9560: PUSH
9561: LD_INT 1
9563: ARRAY
9564: PPUSH
9565: LD_STRING DArf-base-a-2
9567: PPUSH
9568: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9572: LD_EXP 26
9576: PPUSH
9577: LD_STRING DH-base-a-3
9579: PPUSH
9580: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9584: LD_EXP 36
9588: PPUSH
9589: LD_STRING DA-base-6
9591: PPUSH
9592: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9596: LD_EXP 36
9600: PPUSH
9601: LD_STRING DA-base-7
9603: PPUSH
9604: CALL_OW 88
// DialogueOff ;
9608: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9612: LD_STRING Flamethrower
9614: PPUSH
9615: CALL_OW 337
// wait ( 2 2$00 ) ;
9619: LD_INT 4200
9621: PPUSH
9622: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9626: LD_EXP 35
9630: PUSH
9631: LD_EXP 28
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: PPUSH
9640: LD_INT 203
9642: PPUSH
9643: LD_INT 37
9645: PPUSH
9646: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9650: LD_INT 22
9652: PUSH
9653: LD_INT 2
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: PUSH
9660: LD_INT 92
9662: PUSH
9663: LD_INT 203
9665: PUSH
9666: LD_INT 37
9668: PUSH
9669: LD_INT 10
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: PUSH
9678: EMPTY
9679: LIST
9680: LIST
9681: PPUSH
9682: CALL_OW 69
9686: NOT
9687: IFFALSE 9727
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9689: LD_EXP 35
9693: PUSH
9694: LD_EXP 28
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: PPUSH
9703: LD_EXP 26
9707: PPUSH
9708: CALL_OW 250
9712: PPUSH
9713: LD_EXP 26
9717: PPUSH
9718: CALL_OW 251
9722: PPUSH
9723: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9727: LD_INT 35
9729: PPUSH
9730: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
9734: LD_INT 2
9736: PPUSH
9737: LD_EXP 35
9741: PPUSH
9742: CALL_OW 292
9746: PUSH
9747: LD_EXP 35
9751: PPUSH
9752: LD_EXP 26
9756: PPUSH
9757: CALL_OW 296
9761: PUSH
9762: LD_INT 8
9764: LESS
9765: PUSH
9766: LD_EXP 35
9770: PPUSH
9771: LD_INT 22
9773: PUSH
9774: LD_INT 2
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: PUSH
9781: LD_INT 21
9783: PUSH
9784: LD_INT 3
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: PPUSH
9795: CALL_OW 69
9799: PPUSH
9800: LD_EXP 35
9804: PPUSH
9805: CALL_OW 74
9809: PPUSH
9810: CALL_OW 296
9814: PUSH
9815: LD_INT 7
9817: LESS
9818: OR
9819: AND
9820: PUSH
9821: LD_EXP 35
9825: PPUSH
9826: LD_INT 10
9828: PPUSH
9829: CALL_OW 308
9833: NOT
9834: AND
9835: IFFALSE 9727
// InGameOn ;
9837: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9841: LD_EXP 35
9845: PPUSH
9846: CALL_OW 87
// if IsInUnit ( Heike ) then
9850: LD_EXP 26
9854: PPUSH
9855: CALL_OW 310
9859: IFFALSE 9870
// ComExitBuilding ( Heike ) ;
9861: LD_EXP 26
9865: PPUSH
9866: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9870: LD_EXP 35
9874: PUSH
9875: LD_EXP 28
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: PPUSH
9884: LD_EXP 26
9888: PPUSH
9889: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9893: LD_EXP 26
9897: PPUSH
9898: LD_EXP 35
9902: PPUSH
9903: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
9907: LD_INT 22
9909: PUSH
9910: LD_INT 2
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: PUSH
9917: LD_INT 91
9919: PUSH
9920: LD_EXP 35
9924: PUSH
9925: LD_INT 10
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: LIST
9932: PUSH
9933: LD_INT 21
9935: PUSH
9936: LD_INT 3
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: LIST
9947: PPUSH
9948: CALL_OW 69
9952: IFFALSE 9978
// begin Say ( Kurt , DKs-scout-1 ) ;
9954: LD_EXP 35
9958: PPUSH
9959: LD_STRING DKs-scout-1
9961: PPUSH
9962: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
9966: LD_EXP 26
9970: PPUSH
9971: LD_STRING DH-scout-2
9973: PPUSH
9974: CALL_OW 88
// end ; CenterOnUnits ( Heike ) ;
9978: LD_EXP 26
9982: PPUSH
9983: CALL_OW 85
// if IsInUnit ( Heike ) then
9987: LD_EXP 26
9991: PPUSH
9992: CALL_OW 310
9996: IFFALSE 10007
// ComExit ( Heike ) ;
9998: LD_EXP 26
10002: PPUSH
10003: CALL 76746 0 1
// repeat wait ( 0 0$1 ) ;
10007: LD_INT 35
10009: PPUSH
10010: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
10014: LD_EXP 26
10018: PPUSH
10019: LD_EXP 35
10023: PPUSH
10024: CALL_OW 112
// until GetDistUnits ( Heike , Kurt ) < 6 ;
10028: LD_EXP 26
10032: PPUSH
10033: LD_EXP 35
10037: PPUSH
10038: CALL_OW 296
10042: PUSH
10043: LD_INT 6
10045: LESS
10046: IFFALSE 10007
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
10048: LD_EXP 35
10052: PUSH
10053: LD_EXP 28
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: PPUSH
10062: LD_EXP 26
10066: PPUSH
10067: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
10071: LD_EXP 35
10075: PPUSH
10076: LD_STRING DKs-scout-3
10078: PPUSH
10079: CALL_OW 88
// if Kaia and GetDistUnits ( Kaia , Kurt ) < 15 then
10083: LD_EXP 31
10087: PUSH
10088: LD_EXP 31
10092: PPUSH
10093: LD_EXP 35
10097: PPUSH
10098: CALL_OW 296
10102: PUSH
10103: LD_INT 15
10105: LESS
10106: AND
10107: IFFALSE 10330
// begin p := 1 ;
10109: LD_ADDR_VAR 0 4
10113: PUSH
10114: LD_INT 1
10116: ST_TO_ADDR
// if IsInUnit ( Kaia ) then
10117: LD_EXP 31
10121: PPUSH
10122: CALL_OW 310
10126: IFFALSE 10137
// ComExit ( Kaia ) ;
10128: LD_EXP 31
10132: PPUSH
10133: CALL 76746 0 1
// wait ( 0 0$1 ) ;
10137: LD_INT 35
10139: PPUSH
10140: CALL_OW 67
// ComMoveUnit ( Kaia , Kurt ) ;
10144: LD_EXP 31
10148: PPUSH
10149: LD_EXP 35
10153: PPUSH
10154: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
10158: LD_INT 35
10160: PPUSH
10161: CALL_OW 67
// p := Inc ( p ) ;
10165: LD_ADDR_VAR 0 4
10169: PUSH
10170: LD_VAR 0 4
10174: PPUSH
10175: CALL 77709 0 1
10179: ST_TO_ADDR
// until GetDistUnits ( Kaia , Kurt ) < 6 or p > 12 ;
10180: LD_EXP 31
10184: PPUSH
10185: LD_EXP 35
10189: PPUSH
10190: CALL_OW 296
10194: PUSH
10195: LD_INT 6
10197: LESS
10198: PUSH
10199: LD_VAR 0 4
10203: PUSH
10204: LD_INT 12
10206: GREATER
10207: OR
10208: IFFALSE 10158
// ComTurnUnit ( Kaia , Kurt ) ;
10210: LD_EXP 31
10214: PPUSH
10215: LD_EXP 35
10219: PPUSH
10220: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
10224: LD_EXP 31
10228: PPUSH
10229: LD_STRING DK-scout-4
10231: PPUSH
10232: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
10236: LD_EXP 35
10240: PPUSH
10241: LD_EXP 31
10245: PPUSH
10246: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
10250: LD_EXP 35
10254: PPUSH
10255: LD_STRING DKs-scout-5
10257: PPUSH
10258: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
10262: LD_EXP 31
10266: PPUSH
10267: LD_STRING DK-scout-6
10269: PPUSH
10270: CALL_OW 88
// if Mike then
10274: LD_EXP 28
10278: IFFALSE 10330
// begin Say ( Mike , DM-scout-7 ) ;
10280: LD_EXP 28
10284: PPUSH
10285: LD_STRING DM-scout-7
10287: PPUSH
10288: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
10292: LD_EXP 31
10296: PPUSH
10297: LD_EXP 28
10301: PPUSH
10302: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
10306: LD_EXP 31
10310: PPUSH
10311: LD_STRING DK-scout-8
10313: PPUSH
10314: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
10318: LD_EXP 28
10322: PPUSH
10323: LD_STRING DM-scout-9
10325: PPUSH
10326: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
10330: LD_INT 184
10332: PPUSH
10333: LD_INT 100
10335: PPUSH
10336: LD_INT 2
10338: PPUSH
10339: LD_INT 12
10341: NEG
10342: PPUSH
10343: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
10347: LD_INT 184
10349: PPUSH
10350: LD_INT 100
10352: PPUSH
10353: LD_INT 2
10355: PPUSH
10356: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
10360: LD_INT 184
10362: PPUSH
10363: LD_INT 100
10365: PPUSH
10366: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
10370: LD_EXP 35
10374: PPUSH
10375: LD_STRING DKs-scout-10
10377: PPUSH
10378: CALL_OW 88
// wait ( 0 0$1 ) ;
10382: LD_INT 35
10384: PPUSH
10385: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
10389: LD_INT 144
10391: PPUSH
10392: LD_INT 65
10394: PPUSH
10395: LD_INT 2
10397: PPUSH
10398: LD_INT 12
10400: NEG
10401: PPUSH
10402: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
10406: LD_INT 144
10408: PPUSH
10409: LD_INT 65
10411: PPUSH
10412: LD_INT 2
10414: PPUSH
10415: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
10419: LD_INT 144
10421: PPUSH
10422: LD_INT 65
10424: PPUSH
10425: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
10429: LD_EXP 35
10433: PPUSH
10434: LD_STRING DKs-scout-11
10436: PPUSH
10437: CALL_OW 88
// wait ( 0 0$1 ) ;
10441: LD_INT 35
10443: PPUSH
10444: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
10448: LD_EXP 35
10452: PPUSH
10453: CALL_OW 87
// if Mike and not Givi then
10457: LD_EXP 28
10461: PUSH
10462: LD_EXP 27
10466: NOT
10467: AND
10468: IFFALSE 10494
// begin Say ( Mike , DM-scout-a-1 ) ;
10470: LD_EXP 28
10474: PPUSH
10475: LD_STRING DM-scout-a-1
10477: PPUSH
10478: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
10482: LD_EXP 26
10486: PPUSH
10487: LD_STRING DH-scout-a-2
10489: PPUSH
10490: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
10494: LD_EXP 35
10498: PUSH
10499: LD_EXP 28
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: PPUSH
10508: LD_INT 2
10510: PPUSH
10511: CALL_OW 235
// InGameOff ;
10515: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
10519: LD_STRING Hill
10521: PPUSH
10522: CALL_OW 337
// Hint ( BunkerHill ) ;
10526: LD_STRING BunkerHill
10528: PPUSH
10529: CALL_OW 339
// SetAreaMapShow ( bunkerHillArea , 1 ) ;
10533: LD_INT 22
10535: PPUSH
10536: LD_INT 1
10538: PPUSH
10539: CALL_OW 424
// SetAreaMapShow ( dontGoArea , 1 ) ;
10543: LD_INT 20
10545: PPUSH
10546: LD_INT 1
10548: PPUSH
10549: CALL_OW 424
// allowToPatrol := true ;
10553: LD_ADDR_EXP 12
10557: PUSH
10558: LD_INT 1
10560: ST_TO_ADDR
// wait ( 1 1$30 ) ;
10561: LD_INT 3150
10563: PPUSH
10564: CALL_OW 67
// InitHc ;
10568: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
10572: LD_ADDR_VAR 0 1
10576: PUSH
10577: DOUBLE
10578: LD_INT 1
10580: DEC
10581: ST_TO_ADDR
10582: LD_INT 3
10584: PUSH
10585: LD_INT 3
10587: PUSH
10588: LD_INT 2
10590: PUSH
10591: LD_INT 2
10593: PUSH
10594: EMPTY
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: PUSH
10600: LD_OWVAR 67
10604: ARRAY
10605: PUSH
10606: FOR_TO
10607: IFFALSE 10935
// begin uc_side := 2 ;
10609: LD_ADDR_OWVAR 20
10613: PUSH
10614: LD_INT 2
10616: ST_TO_ADDR
// uc_nation := 2 ;
10617: LD_ADDR_OWVAR 21
10621: PUSH
10622: LD_INT 2
10624: ST_TO_ADDR
// if i = 1 then
10625: LD_VAR 0 1
10629: PUSH
10630: LD_INT 1
10632: EQUAL
10633: IFFALSE 10645
// sex := sex_male else
10635: LD_ADDR_VAR 0 5
10639: PUSH
10640: LD_INT 1
10642: ST_TO_ADDR
10643: GO 10653
// sex := false ;
10645: LD_ADDR_VAR 0 5
10649: PUSH
10650: LD_INT 0
10652: ST_TO_ADDR
// PrepareHuman ( sex , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 , 2 ] [ Difficulty ] ) ;
10653: LD_VAR 0 5
10657: PPUSH
10658: LD_INT 1
10660: PUSH
10661: LD_INT 3
10663: PUSH
10664: LD_INT 1
10666: PUSH
10667: EMPTY
10668: LIST
10669: LIST
10670: LIST
10671: PUSH
10672: LD_VAR 0 1
10676: PUSH
10677: LD_INT 3
10679: MOD
10680: PUSH
10681: LD_INT 1
10683: PLUS
10684: ARRAY
10685: PPUSH
10686: LD_INT 3
10688: PUSH
10689: LD_INT 2
10691: PUSH
10692: LD_INT 2
10694: PUSH
10695: LD_INT 2
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: PUSH
10704: LD_OWVAR 67
10708: ARRAY
10709: PPUSH
10710: CALL_OW 380
// un := CreateHuman ;
10714: LD_ADDR_VAR 0 2
10718: PUSH
10719: CALL_OW 44
10723: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
10724: LD_ADDR_EXP 38
10728: PUSH
10729: LD_EXP 38
10733: PUSH
10734: LD_VAR 0 2
10738: UNION
10739: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
10740: LD_INT 2
10742: PPUSH
10743: LD_INT 2
10745: PPUSH
10746: LD_INT 13
10748: PPUSH
10749: LD_INT 2
10751: PUSH
10752: LD_INT 1
10754: PUSH
10755: EMPTY
10756: LIST
10757: LIST
10758: PUSH
10759: LD_VAR 0 1
10763: PUSH
10764: LD_INT 2
10766: MOD
10767: PUSH
10768: LD_INT 1
10770: PLUS
10771: ARRAY
10772: PPUSH
10773: LD_INT 1
10775: PPUSH
10776: LD_INT 27
10778: PUSH
10779: LD_INT 25
10781: PUSH
10782: LD_INT 27
10784: PUSH
10785: LD_INT 23
10787: PUSH
10788: LD_INT 23
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: PUSH
10798: LD_OWVAR 67
10802: PUSH
10803: LD_INT 0
10805: PPUSH
10806: LD_INT 1
10808: PPUSH
10809: CALL_OW 12
10813: PLUS
10814: ARRAY
10815: PPUSH
10816: LD_INT 77
10818: PPUSH
10819: CALL 386 0 7
// veh := CreateVehicle ;
10823: LD_ADDR_VAR 0 3
10827: PUSH
10828: CALL_OW 45
10832: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10833: LD_VAR 0 3
10837: PPUSH
10838: LD_INT 2
10840: PPUSH
10841: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10845: LD_VAR 0 3
10849: PPUSH
10850: LD_INT 178
10852: PPUSH
10853: LD_INT 2
10855: PPUSH
10856: LD_INT 2
10858: PPUSH
10859: LD_INT 0
10861: PPUSH
10862: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10866: LD_VAR 0 2
10870: PPUSH
10871: LD_VAR 0 3
10875: PPUSH
10876: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
10880: LD_VAR 0 2
10884: PPUSH
10885: LD_INT 183
10887: PPUSH
10888: LD_INT 11
10890: PPUSH
10891: CALL_OW 111
// if i = 1 then
10895: LD_VAR 0 1
10899: PUSH
10900: LD_INT 1
10902: EQUAL
10903: IFFALSE 10926
// begin CenterOnUnits ( un ) ;
10905: LD_VAR 0 2
10909: PPUSH
10910: CALL_OW 85
// Say ( un , DArSol-Arrival-1 ) ;
10914: LD_VAR 0 2
10918: PPUSH
10919: LD_STRING DArSol-Arrival-1
10921: PPUSH
10922: CALL_OW 88
// end ; wait ( 0 0$2 ) ;
10926: LD_INT 70
10928: PPUSH
10929: CALL_OW 67
// end ;
10933: GO 10606
10935: POP
10936: POP
// end ;
10937: PPOPN 5
10939: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
10940: LD_EXP 4
10944: PUSH
10945: LD_EXP 36
10949: PPUSH
10950: CALL_OW 302
10954: AND
10955: IFFALSE 11004
10957: GO 10959
10959: DISABLE
// begin DialogueOn ;
10960: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
10964: LD_EXP 36
10968: PPUSH
10969: LD_STRING DA-lab-1
10971: PPUSH
10972: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
10976: LD_EXP 36
10980: PPUSH
10981: LD_STRING DA-lab-2
10983: PPUSH
10984: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
10988: LD_EXP 26
10992: PPUSH
10993: LD_STRING DH-lab-3
10995: PPUSH
10996: CALL_OW 88
// DialogueOff ;
11000: CALL_OW 7
// end ;
11004: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
11005: LD_INT 17
11007: PPUSH
11008: LD_INT 2
11010: PPUSH
11011: CALL_OW 321
11015: PUSH
11016: LD_INT 2
11018: EQUAL
11019: IFFALSE 11151
11021: GO 11023
11023: DISABLE
11024: LD_INT 0
11026: PPUSH
// begin DialogueOn ;
11027: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
11031: LD_EXP 36
11035: PPUSH
11036: LD_STRING DA-Cam-1
11038: PPUSH
11039: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
11043: LD_EXP 36
11047: PPUSH
11048: LD_STRING DA-Cam-2
11050: PPUSH
11051: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
11055: LD_EXP 36
11059: PPUSH
11060: LD_STRING DA-Cam-3
11062: PPUSH
11063: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
11067: LD_EXP 26
11071: PPUSH
11072: LD_STRING DH-Cam-4
11074: PPUSH
11075: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
11079: LD_EXP 31
11083: PPUSH
11084: LD_STRING DK-Cam-5
11086: PPUSH
11087: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
11091: LD_EXP 31
11095: PPUSH
11096: LD_STRING DK-Cam-6
11098: PPUSH
11099: CALL_OW 88
// DialogueOff ;
11103: CALL_OW 7
// Query ( Camera ) ;
11107: LD_STRING Camera
11109: PPUSH
11110: CALL_OW 97
// hiddenCameraAllowed := true ;
11114: LD_ADDR_EXP 5
11118: PUSH
11119: LD_INT 1
11121: ST_TO_ADDR
// for i in camAreas do
11122: LD_ADDR_VAR 0 1
11126: PUSH
11127: LD_EXP 8
11131: PUSH
11132: FOR_IN
11133: IFFALSE 11149
// SetAreaMapShow ( i , 1 ) ;
11135: LD_VAR 0 1
11139: PPUSH
11140: LD_INT 1
11142: PPUSH
11143: CALL_OW 424
11147: GO 11132
11149: POP
11150: POP
// end ;
11151: PPOPN 1
11153: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
11154: LD_EXP 8
11158: NOT
11159: PUSH
11160: LD_EXP 5
11164: AND
11165: IFFALSE 11263
11167: GO 11169
11169: DISABLE
11170: LD_INT 0
11172: PPUSH
// begin stop_talking := true ;
11173: LD_ADDR_OWVAR 56
11177: PUSH
11178: LD_INT 1
11180: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
11181: LD_ADDR_VAR 0 1
11185: PUSH
11186: LD_INT 22
11188: PUSH
11189: LD_INT 2
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: PUSH
11196: LD_INT 21
11198: PUSH
11199: LD_INT 1
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: PUSH
11206: LD_INT 23
11208: PUSH
11209: LD_INT 2
11211: PUSH
11212: EMPTY
11213: LIST
11214: LIST
11215: PUSH
11216: EMPTY
11217: LIST
11218: LIST
11219: LIST
11220: PPUSH
11221: CALL_OW 69
11225: PUSH
11226: FOR_IN
11227: IFFALSE 11246
// AddExperience ( i , 2 , 450 ) ;
11229: LD_VAR 0 1
11233: PPUSH
11234: LD_INT 2
11236: PPUSH
11237: LD_INT 450
11239: PPUSH
11240: CALL_OW 492
11244: GO 11226
11246: POP
11247: POP
// stop_talking := false ;
11248: LD_ADDR_OWVAR 56
11252: PUSH
11253: LD_INT 0
11255: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
11256: LD_STRING ACH_CAMERA
11258: PPUSH
11259: CALL_OW 543
// end ;
11263: PPOPN 1
11265: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
11266: LD_EXP 9
11270: PUSH
11271: LD_EXP 11
11275: NOT
11276: AND
11277: IFFALSE 11336
11279: GO 11281
11281: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert ) , GetY ( russianAlert ) , 2 , - 6 ) ;
11282: LD_EXP 9
11286: PPUSH
11287: CALL_OW 250
11291: PPUSH
11292: LD_EXP 9
11296: PPUSH
11297: CALL_OW 251
11301: PPUSH
11302: LD_INT 2
11304: PPUSH
11305: LD_INT 6
11307: NEG
11308: PPUSH
11309: CALL_OW 330
// CenterNowOnUnits ( russianAlert ) ;
11313: LD_EXP 9
11317: PPUSH
11318: CALL_OW 87
// wait ( 0 0$1 ) ;
11322: LD_INT 35
11324: PPUSH
11325: CALL_OW 67
// YouLost ( Spotted ) ;
11329: LD_STRING Spotted
11331: PPUSH
11332: CALL_OW 104
// end ;
11336: END
// every 0 0$5 trigger SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) do
11337: LD_INT 3
11339: PUSH
11340: LD_INT 6
11342: PUSH
11343: EMPTY
11344: LIST
11345: LIST
11346: PPUSH
11347: LD_INT 2
11349: PPUSH
11350: LD_EXP 48
11354: PPUSH
11355: CALL 1050 0 3
11359: IFFALSE 11392
11361: GO 11363
11363: DISABLE
// russianAlert := SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) ;
11364: LD_ADDR_EXP 9
11368: PUSH
11369: LD_INT 3
11371: PUSH
11372: LD_INT 6
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: PPUSH
11379: LD_INT 2
11381: PPUSH
11382: LD_EXP 48
11386: PPUSH
11387: CALL 1050 0 3
11391: ST_TO_ADDR
11392: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
11393: LD_INT 22
11395: PUSH
11396: LD_INT 6
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: PUSH
11403: LD_INT 30
11405: PUSH
11406: LD_INT 32
11408: PUSH
11409: EMPTY
11410: LIST
11411: LIST
11412: PUSH
11413: LD_INT 3
11415: PUSH
11416: LD_INT 24
11418: PUSH
11419: LD_INT 1000
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: LIST
11434: PPUSH
11435: CALL_OW 69
11439: IFFALSE 11500
11441: GO 11443
11443: DISABLE
// russianAlert := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] , [ f_not , [ f_lives , 1000 ] ] ] ) [ 1 ] ;
11444: LD_ADDR_EXP 9
11448: PUSH
11449: LD_INT 22
11451: PUSH
11452: LD_INT 6
11454: PUSH
11455: EMPTY
11456: LIST
11457: LIST
11458: PUSH
11459: LD_INT 30
11461: PUSH
11462: LD_INT 32
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: PUSH
11469: LD_INT 3
11471: PUSH
11472: LD_INT 24
11474: PUSH
11475: LD_INT 1000
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: PUSH
11482: EMPTY
11483: LIST
11484: LIST
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: LIST
11490: PPUSH
11491: CALL_OW 69
11495: PUSH
11496: LD_INT 1
11498: ARRAY
11499: ST_TO_ADDR
11500: END
// every 0 0$1 trigger russianAlert and FilterUnitsInArea ( kirovBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , towers , noncombat ;
11501: LD_EXP 9
11505: PUSH
11506: LD_INT 21
11508: PPUSH
11509: LD_INT 21
11511: PUSH
11512: LD_INT 3
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: PUSH
11519: LD_INT 3
11521: PUSH
11522: LD_INT 24
11524: PUSH
11525: LD_INT 1000
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: PUSH
11536: EMPTY
11537: LIST
11538: LIST
11539: PPUSH
11540: CALL_OW 70
11544: AND
11545: IFFALSE 11784
11547: GO 11549
11549: DISABLE
11550: LD_INT 0
11552: PPUSH
11553: PPUSH
11554: PPUSH
11555: PPUSH
// begin noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
11556: LD_ADDR_VAR 0 4
11560: PUSH
11561: LD_EXP 43
11565: PUSH
11566: LD_EXP 45
11570: PUSH
11571: LD_EXP 46
11575: UNION
11576: PPUSH
11577: LD_INT 3
11579: PUSH
11580: LD_INT 25
11582: PUSH
11583: LD_INT 1
11585: PUSH
11586: EMPTY
11587: LIST
11588: LIST
11589: PUSH
11590: EMPTY
11591: LIST
11592: LIST
11593: PPUSH
11594: CALL_OW 72
11598: UNION
11599: ST_TO_ADDR
// for i in noncombat do
11600: LD_ADDR_VAR 0 1
11604: PUSH
11605: LD_VAR 0 4
11609: PUSH
11610: FOR_IN
11611: IFFALSE 11707
// begin if IsInUnit ( i ) then
11613: LD_VAR 0 1
11617: PPUSH
11618: CALL_OW 310
11622: IFFALSE 11633
// ComExitBuilding ( i ) ;
11624: LD_VAR 0 1
11628: PPUSH
11629: CALL_OW 122
// AddComMoveXY ( i , 114 , 97 ) ;
11633: LD_VAR 0 1
11637: PPUSH
11638: LD_INT 114
11640: PPUSH
11641: LD_INT 97
11643: PPUSH
11644: CALL_OW 171
// AddComMoveXY ( i , 99 , 128 ) ;
11648: LD_VAR 0 1
11652: PPUSH
11653: LD_INT 99
11655: PPUSH
11656: LD_INT 128
11658: PPUSH
11659: CALL_OW 171
// AddComMoveXY ( i , 91 , 145 ) ;
11663: LD_VAR 0 1
11667: PPUSH
11668: LD_INT 91
11670: PPUSH
11671: LD_INT 145
11673: PPUSH
11674: CALL_OW 171
// AddComMoveXY ( i , 82 , 153 ) ;
11678: LD_VAR 0 1
11682: PPUSH
11683: LD_INT 82
11685: PPUSH
11686: LD_INT 153
11688: PPUSH
11689: CALL_OW 171
// AddComMoveToArea ( i , westEscapeArea ) ;
11693: LD_VAR 0 1
11697: PPUSH
11698: LD_INT 16
11700: PPUSH
11701: CALL_OW 173
// end ;
11705: GO 11610
11707: POP
11708: POP
// if not allowHeikeAttack then
11709: LD_EXP 11
11713: NOT
11714: IFFALSE 11718
// exit ;
11716: GO 11784
// wait ( 0 0$05 ) ;
11718: LD_INT 175
11720: PPUSH
11721: CALL_OW 67
// SayRadio ( Kurin , D9a-Kur-1 ) ;
11725: LD_EXP 41
11729: PPUSH
11730: LD_STRING D9a-Kur-1
11732: PPUSH
11733: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11737: LD_EXP 44
11741: PPUSH
11742: LD_STRING D9a-Bur-1
11744: PPUSH
11745: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11749: LD_EXP 41
11753: PPUSH
11754: LD_STRING D9a-Kur-2
11756: PPUSH
11757: CALL_OW 94
// omicronFall := true ;
11761: LD_ADDR_EXP 13
11765: PUSH
11766: LD_INT 1
11768: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11769: LD_INT 105
11771: PPUSH
11772: CALL_OW 67
// retreatFromOmicron := true ;
11776: LD_ADDR_EXP 20
11780: PUSH
11781: LD_INT 1
11783: ST_TO_ADDR
// end ;
11784: PPOPN 4
11786: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
11787: LD_INT 16
11789: PPUSH
11790: LD_INT 3
11792: PUSH
11793: LD_INT 22
11795: PUSH
11796: LD_INT 2
11798: PUSH
11799: EMPTY
11800: LIST
11801: LIST
11802: PUSH
11803: EMPTY
11804: LIST
11805: LIST
11806: PUSH
11807: LD_INT 23
11809: PUSH
11810: LD_INT 3
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PPUSH
11821: CALL_OW 70
11825: IFFALSE 11908
11827: GO 11829
11829: DISABLE
11830: LD_INT 0
11832: PPUSH
// begin enable ;
11833: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
11834: LD_ADDR_VAR 0 1
11838: PUSH
11839: LD_INT 16
11841: PPUSH
11842: LD_INT 3
11844: PUSH
11845: LD_INT 22
11847: PUSH
11848: LD_INT 2
11850: PUSH
11851: EMPTY
11852: LIST
11853: LIST
11854: PUSH
11855: EMPTY
11856: LIST
11857: LIST
11858: PUSH
11859: LD_INT 23
11861: PUSH
11862: LD_INT 3
11864: PUSH
11865: EMPTY
11866: LIST
11867: LIST
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: PPUSH
11873: CALL_OW 70
11877: PUSH
11878: FOR_IN
11879: IFFALSE 11906
// begin escapeCounter := escapeCounter + 1 ;
11881: LD_ADDR_EXP 19
11885: PUSH
11886: LD_EXP 19
11890: PUSH
11891: LD_INT 1
11893: PLUS
11894: ST_TO_ADDR
// RemoveUnit ( i ) ;
11895: LD_VAR 0 1
11899: PPUSH
11900: CALL_OW 64
// end ;
11904: GO 11878
11906: POP
11907: POP
// end ;
11908: PPOPN 1
11910: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
11911: LD_OWVAR 1
11915: PUSH
11916: LD_INT 13650
11918: PUSH
11919: LD_INT 0
11921: PPUSH
11922: LD_INT 3150
11924: PPUSH
11925: CALL_OW 12
11929: PLUS
11930: GREATEREQUAL
11931: IFFALSE 11940
11933: GO 11935
11935: DISABLE
// SmallAmericanReinforcements ;
11936: CALL 7141 0 0
11940: END
// every 0 0$1 trigger tick >= [ 15 15$00 , 14 14$00 , 13 13$00 , 12 12$00 ] [ Difficulty ] do
11941: LD_OWVAR 1
11945: PUSH
11946: LD_INT 31500
11948: PUSH
11949: LD_INT 29400
11951: PUSH
11952: LD_INT 27300
11954: PUSH
11955: LD_INT 25200
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: PUSH
11964: LD_OWVAR 67
11968: ARRAY
11969: GREATEREQUAL
11970: IFFALSE 12035
11972: GO 11974
11974: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
11975: LD_EXP 49
11979: PPUSH
11980: LD_INT 21
11982: PUSH
11983: LD_INT 2
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: PPUSH
11990: CALL_OW 72
11994: PPUSH
11995: LD_INT 62
11997: PPUSH
11998: LD_INT 22
12000: PPUSH
12001: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
12005: LD_EXP 50
12009: PPUSH
12010: LD_INT 69
12012: PPUSH
12013: LD_INT 27
12015: PPUSH
12016: CALL_OW 111
// wait ( 1 1$00 ) ;
12020: LD_INT 2100
12022: PPUSH
12023: CALL_OW 67
// startAttackOnOmicron := true ;
12027: LD_ADDR_EXP 6
12031: PUSH
12032: LD_INT 1
12034: ST_TO_ADDR
// end ;
12035: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
12036: LD_EXP 22
12040: PUSH
12041: LD_INT 0
12043: EQUAL
12044: IFFALSE 14094
12046: GO 12048
12048: DISABLE
12049: LD_INT 0
12051: PPUSH
12052: PPUSH
12053: PPUSH
12054: PPUSH
12055: PPUSH
12056: PPUSH
12057: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
12058: LD_INT 5
12060: PPUSH
12061: LD_INT 2
12063: PPUSH
12064: CALL_OW 343
// PrepareOmarForces ;
12068: CALL 1652 0 0
// wait ( 0 0$03 ) ;
12072: LD_INT 105
12074: PPUSH
12075: CALL_OW 67
// allowHeikeAttack := true ;
12079: LD_ADDR_EXP 11
12083: PUSH
12084: LD_INT 1
12086: ST_TO_ADDR
// activeGrishkoAI := false ;
12087: LD_ADDR_EXP 10
12091: PUSH
12092: LD_INT 0
12094: ST_TO_ADDR
// SetAreaMapShow ( dontGoArea , 0 ) ;
12095: LD_INT 20
12097: PPUSH
12098: LD_INT 0
12100: PPUSH
12101: CALL_OW 424
// if not hillBase then
12105: LD_EXP 15
12109: NOT
12110: IFFALSE 12119
// ChangeMissionObjectives ( HillDone ) ;
12112: LD_STRING HillDone
12114: PPUSH
12115: CALL_OW 337
// CenterOnUnits ( Omar ) ;
12119: LD_EXP 34
12123: PPUSH
12124: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
12128: LD_ADDR_VAR 0 1
12132: PUSH
12133: LD_INT 22
12135: PUSH
12136: LD_INT 2
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PUSH
12143: LD_INT 21
12145: PUSH
12146: LD_INT 1
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: PUSH
12153: EMPTY
12154: LIST
12155: LIST
12156: PPUSH
12157: CALL_OW 69
12161: PUSH
12162: FOR_IN
12163: IFFALSE 12187
// if HasTask ( i ) then
12165: LD_VAR 0 1
12169: PPUSH
12170: CALL_OW 314
12174: IFFALSE 12185
// ComHold ( i ) ;
12176: LD_VAR 0 1
12180: PPUSH
12181: CALL_OW 140
12185: GO 12162
12187: POP
12188: POP
// DialogueOn ;
12189: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
12193: LD_EXP 34
12197: PPUSH
12198: LD_STRING DO-assault-1
12200: PPUSH
12201: CALL_OW 94
// DialogueOff ;
12205: CALL_OW 7
// game_speed := 4 ;
12209: LD_ADDR_OWVAR 65
12213: PUSH
12214: LD_INT 4
12216: ST_TO_ADDR
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
12217: LD_ADDR_VAR 0 1
12221: PUSH
12222: LD_EXP 47
12226: PPUSH
12227: LD_INT 3
12229: PUSH
12230: LD_INT 54
12232: PUSH
12233: EMPTY
12234: LIST
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: PPUSH
12240: CALL_OW 72
12244: PUSH
12245: FOR_IN
12246: IFFALSE 12265
// ComMoveXY ( i , 226 , 114 ) ;
12248: LD_VAR 0 1
12252: PPUSH
12253: LD_INT 226
12255: PPUSH
12256: LD_INT 114
12258: PPUSH
12259: CALL_OW 111
12263: GO 12245
12265: POP
12266: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
12267: LD_EXP 42
12271: PPUSH
12272: LD_INT 22
12274: PUSH
12275: LD_INT 6
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: PUSH
12282: LD_INT 30
12284: PUSH
12285: LD_INT 4
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: PUSH
12292: EMPTY
12293: LIST
12294: LIST
12295: PPUSH
12296: CALL_OW 69
12300: PPUSH
12301: LD_EXP 42
12305: PPUSH
12306: CALL_OW 74
12310: PPUSH
12311: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
12315: LD_STRING Attack
12317: PPUSH
12318: CALL_OW 337
// music_class := music_combat ;
12322: LD_ADDR_OWVAR 72
12326: PUSH
12327: LD_INT 1
12329: ST_TO_ADDR
// music_nat := 4 ;
12330: LD_ADDR_OWVAR 71
12334: PUSH
12335: LD_INT 4
12337: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
12338: LD_INT 5
12340: PPUSH
12341: LD_EXP 42
12345: PPUSH
12346: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12350: LD_INT 6
12352: PPUSH
12353: LD_EXP 39
12357: PPUSH
12358: LD_INT 25
12360: PUSH
12361: LD_INT 1
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: PPUSH
12368: CALL_OW 72
12372: PUSH
12373: LD_INT 4
12375: ARRAY
12376: PPUSH
12377: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
12381: LD_ADDR_VAR 0 1
12385: PUSH
12386: LD_EXP 39
12390: PPUSH
12391: LD_INT 3
12393: PUSH
12394: LD_INT 25
12396: PUSH
12397: LD_INT 4
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: PUSH
12404: EMPTY
12405: LIST
12406: LIST
12407: PPUSH
12408: CALL_OW 72
12412: PUSH
12413: FOR_IN
12414: IFFALSE 12433
// ComAgressiveMove ( i , 221 , 110 ) ;
12416: LD_VAR 0 1
12420: PPUSH
12421: LD_INT 221
12423: PPUSH
12424: LD_INT 110
12426: PPUSH
12427: CALL_OW 114
12431: GO 12413
12433: POP
12434: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
12435: LD_EXP 39
12439: PPUSH
12440: LD_INT 25
12442: PUSH
12443: LD_INT 4
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: PPUSH
12450: CALL_OW 72
12454: PPUSH
12455: LD_INT 214
12457: PPUSH
12458: LD_INT 124
12460: PPUSH
12461: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
12465: LD_EXP 39
12469: PPUSH
12470: LD_INT 25
12472: PUSH
12473: LD_INT 1
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PPUSH
12480: CALL_OW 72
12484: PUSH
12485: LD_INT 4
12487: ARRAY
12488: PPUSH
12489: LD_INT 214
12491: PPUSH
12492: LD_INT 114
12494: PPUSH
12495: LD_INT 0
12497: PPUSH
12498: CALL_OW 132
// if IsOk ( Grishko ) then
12502: LD_EXP 42
12506: PPUSH
12507: CALL_OW 302
12511: IFFALSE 12537
// begin SayRadio ( Grishko , D9-Gri-1 ) ;
12513: LD_EXP 42
12517: PPUSH
12518: LD_STRING D9-Gri-1
12520: PPUSH
12521: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
12525: LD_EXP 41
12529: PPUSH
12530: LD_STRING D9-Kur-1
12532: PPUSH
12533: CALL_OW 94
// end ; wait ( 0 0$1 ) ;
12537: LD_INT 35
12539: PPUSH
12540: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
12544: LD_EXP 34
12548: PPUSH
12549: LD_INT 233
12551: PPUSH
12552: LD_INT 130
12554: PPUSH
12555: CALL_OW 114
// if IsOk ( Grishko ) then
12559: LD_EXP 42
12563: PPUSH
12564: CALL_OW 302
12568: IFFALSE 12594
// begin SayRadio ( Grishko , D9-Gri-2 ) ;
12570: LD_EXP 42
12574: PPUSH
12575: LD_STRING D9-Gri-2
12577: PPUSH
12578: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
12582: LD_EXP 41
12586: PPUSH
12587: LD_STRING D9-Kur-2
12589: PPUSH
12590: CALL_OW 94
// end ; ComExitBuilding ( Grishko ) ;
12594: LD_EXP 42
12598: PPUSH
12599: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
12603: LD_EXP 42
12607: PPUSH
12608: LD_INT 211
12610: PPUSH
12611: LD_INT 104
12613: PPUSH
12614: CALL_OW 171
// AddComHold ( Grishko ) ;
12618: LD_EXP 42
12622: PPUSH
12623: CALL_OW 200
// repeat wait ( 3 ) ;
12627: LD_INT 3
12629: PPUSH
12630: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
12634: LD_EXP 42
12638: PPUSH
12639: CALL_OW 310
12643: NOT
12644: IFFALSE 12627
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
12646: LD_EXP 39
12650: PPUSH
12651: LD_INT 34
12653: PUSH
12654: LD_INT 26
12656: PUSH
12657: EMPTY
12658: LIST
12659: LIST
12660: PPUSH
12661: CALL_OW 72
12665: PPUSH
12666: LD_EXP 42
12670: PPUSH
12671: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
12675: LD_EXP 39
12679: PPUSH
12680: LD_INT 34
12682: PUSH
12683: LD_INT 26
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: PPUSH
12690: CALL_OW 72
12694: PPUSH
12695: LD_INT 215
12697: PPUSH
12698: LD_INT 106
12700: PPUSH
12701: CALL_OW 174
// repeat wait ( 3 ) ;
12705: LD_INT 3
12707: PPUSH
12708: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
12712: LD_EXP 42
12716: PPUSH
12717: CALL_OW 256
12721: PUSH
12722: LD_INT 1000
12724: LESS
12725: IFFALSE 12705
// NormalAttack ( 5 , Grishko ) ;
12727: LD_INT 5
12729: PPUSH
12730: LD_EXP 42
12734: PPUSH
12735: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12739: LD_INT 6
12741: PPUSH
12742: LD_EXP 39
12746: PPUSH
12747: LD_INT 25
12749: PUSH
12750: LD_INT 1
12752: PUSH
12753: EMPTY
12754: LIST
12755: LIST
12756: PPUSH
12757: CALL_OW 72
12761: PUSH
12762: LD_INT 4
12764: ARRAY
12765: PPUSH
12766: CALL_OW 472
// if IsOk ( Grishko ) then
12770: LD_EXP 42
12774: PPUSH
12775: CALL_OW 302
12779: IFFALSE 12805
// begin SayRadio ( Grishko , D9-Gri-3 ) ;
12781: LD_EXP 42
12785: PPUSH
12786: LD_STRING D9-Gri-3
12788: PPUSH
12789: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12793: LD_EXP 41
12797: PPUSH
12798: LD_STRING D9-Kur-3
12800: PPUSH
12801: CALL_OW 94
// end ; music_class := music_auto ;
12805: LD_ADDR_OWVAR 72
12809: PUSH
12810: LD_INT 0
12812: ST_TO_ADDR
// music_nat := music_auto ;
12813: LD_ADDR_OWVAR 71
12817: PUSH
12818: LD_INT 0
12820: ST_TO_ADDR
// for i in omarSquad do
12821: LD_ADDR_VAR 0 1
12825: PUSH
12826: LD_EXP 39
12830: PUSH
12831: FOR_IN
12832: IFFALSE 12974
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
12834: LD_VAR 0 1
12838: PPUSH
12839: CALL_OW 247
12843: PUSH
12844: LD_INT 2
12846: EQUAL
12847: PUSH
12848: LD_VAR 0 1
12852: PPUSH
12853: CALL_OW 256
12857: PUSH
12858: LD_INT 1000
12860: LESS
12861: AND
12862: IFFALSE 12928
// begin driver := IsDrivenBy ( i ) ;
12864: LD_ADDR_VAR 0 2
12868: PUSH
12869: LD_VAR 0 1
12873: PPUSH
12874: CALL_OW 311
12878: ST_TO_ADDR
// veh := i ;
12879: LD_ADDR_VAR 0 3
12883: PUSH
12884: LD_VAR 0 1
12888: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
12889: LD_VAR 0 2
12893: PPUSH
12894: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
12898: LD_VAR 0 2
12902: PPUSH
12903: LD_VAR 0 3
12907: PPUSH
12908: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
12912: LD_VAR 0 2
12916: PPUSH
12917: LD_VAR 0 3
12921: PPUSH
12922: CALL_OW 180
// end else
12926: GO 12972
// if GetLives ( i ) < 500 then
12928: LD_VAR 0 1
12932: PPUSH
12933: CALL_OW 256
12937: PUSH
12938: LD_INT 500
12940: LESS
12941: IFFALSE 12972
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
12943: LD_EXP 39
12947: PPUSH
12948: LD_INT 25
12950: PUSH
12951: LD_INT 4
12953: PUSH
12954: EMPTY
12955: LIST
12956: LIST
12957: PPUSH
12958: CALL_OW 72
12962: PPUSH
12963: LD_VAR 0 1
12967: PPUSH
12968: CALL_OW 188
// end ; end ;
12972: GO 12831
12974: POP
12975: POP
// repeat wait ( 0 0$1 ) ;
12976: LD_INT 35
12978: PPUSH
12979: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
12983: LD_EXP 39
12987: PPUSH
12988: LD_INT 3
12990: PUSH
12991: LD_INT 24
12993: PUSH
12994: LD_INT 1000
12996: PUSH
12997: EMPTY
12998: LIST
12999: LIST
13000: PUSH
13001: EMPTY
13002: LIST
13003: LIST
13004: PUSH
13005: LD_INT 21
13007: PUSH
13008: LD_INT 2
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: PUSH
13015: EMPTY
13016: LIST
13017: LIST
13018: PPUSH
13019: CALL_OW 72
13023: NOT
13024: PUSH
13025: LD_EXP 39
13029: PPUSH
13030: LD_INT 3
13032: PUSH
13033: LD_INT 24
13035: PUSH
13036: LD_INT 250
13038: PUSH
13039: EMPTY
13040: LIST
13041: LIST
13042: PUSH
13043: EMPTY
13044: LIST
13045: LIST
13046: PPUSH
13047: CALL_OW 72
13051: NOT
13052: AND
13053: IFFALSE 12976
// wait ( 0 0$2 ) ;
13055: LD_INT 70
13057: PPUSH
13058: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
13062: LD_ADDR_VAR 0 5
13066: PUSH
13067: LD_EXP 39
13071: PPUSH
13072: LD_INT 58
13074: PUSH
13075: EMPTY
13076: LIST
13077: PUSH
13078: LD_INT 21
13080: PUSH
13081: LD_INT 2
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: PPUSH
13092: CALL_OW 72
13096: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
13097: LD_ADDR_VAR 0 6
13101: PUSH
13102: LD_EXP 39
13106: PPUSH
13107: LD_INT 25
13109: PUSH
13110: LD_INT 3
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: PUSH
13117: LD_INT 3
13119: PUSH
13120: LD_INT 55
13122: PUSH
13123: EMPTY
13124: LIST
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: PUSH
13130: EMPTY
13131: LIST
13132: LIST
13133: PPUSH
13134: CALL_OW 72
13138: ST_TO_ADDR
// for i := 1 to tmp do
13139: LD_ADDR_VAR 0 1
13143: PUSH
13144: DOUBLE
13145: LD_INT 1
13147: DEC
13148: ST_TO_ADDR
13149: LD_VAR 0 5
13153: PUSH
13154: FOR_TO
13155: IFFALSE 13185
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
13157: LD_VAR 0 6
13161: PUSH
13162: LD_VAR 0 1
13166: ARRAY
13167: PPUSH
13168: LD_VAR 0 5
13172: PUSH
13173: LD_VAR 0 1
13177: ARRAY
13178: PPUSH
13179: CALL_OW 120
13183: GO 13154
13185: POP
13186: POP
// wait ( 0 0$5 ) ;
13187: LD_INT 175
13189: PPUSH
13190: CALL_OW 67
// ComAgressiveMove ( omarSquad , 199 , 141 ) ;
13194: LD_EXP 39
13198: PPUSH
13199: LD_INT 199
13201: PPUSH
13202: LD_INT 141
13204: PPUSH
13205: CALL_OW 114
// ComAgressiveMove ( Omar , 190 , 143 ) ;
13209: LD_EXP 34
13213: PPUSH
13214: LD_INT 190
13216: PPUSH
13217: LD_INT 143
13219: PPUSH
13220: CALL_OW 114
// AddComHold ( Omar ) ;
13224: LD_EXP 34
13228: PPUSH
13229: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
13233: LD_EXP 39
13237: PPUSH
13238: LD_INT 2
13240: PUSH
13241: LD_INT 25
13243: PUSH
13244: LD_INT 1
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: PUSH
13251: LD_INT 25
13253: PUSH
13254: LD_INT 4
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: LIST
13265: PPUSH
13266: CALL_OW 72
13270: PPUSH
13271: LD_INT 161
13273: PPUSH
13274: LD_INT 130
13276: PPUSH
13277: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
13281: LD_EXP 39
13285: PPUSH
13286: LD_INT 25
13288: PUSH
13289: LD_INT 1
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: PPUSH
13296: CALL_OW 72
13300: PPUSH
13301: LD_INT 163
13303: PPUSH
13304: LD_INT 122
13306: PPUSH
13307: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
13311: LD_EXP 39
13315: PPUSH
13316: LD_INT 25
13318: PUSH
13319: LD_INT 1
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: PPUSH
13326: CALL_OW 72
13330: PUSH
13331: LD_INT 4
13333: ARRAY
13334: PPUSH
13335: LD_INT 165
13337: PPUSH
13338: LD_INT 118
13340: PPUSH
13341: LD_INT 0
13343: PPUSH
13344: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
13348: LD_EXP 39
13352: PPUSH
13353: LD_INT 25
13355: PUSH
13356: LD_INT 1
13358: PUSH
13359: EMPTY
13360: LIST
13361: LIST
13362: PPUSH
13363: CALL_OW 72
13367: PUSH
13368: LD_INT 4
13370: ARRAY
13371: PPUSH
13372: LD_INT 159
13374: PPUSH
13375: LD_INT 116
13377: PPUSH
13378: LD_INT 0
13380: PPUSH
13381: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
13385: LD_EXP 39
13389: PPUSH
13390: LD_INT 21
13392: PUSH
13393: LD_INT 2
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: PPUSH
13400: CALL_OW 72
13404: PPUSH
13405: LD_INT 169
13407: PPUSH
13408: LD_INT 114
13410: PPUSH
13411: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
13415: LD_INT 35
13417: PPUSH
13418: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
13422: LD_ADDR_VAR 0 5
13426: PUSH
13427: LD_EXP 39
13431: PPUSH
13432: LD_INT 25
13434: PUSH
13435: LD_INT 1
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: PPUSH
13442: CALL_OW 72
13446: ST_TO_ADDR
// for i in tmp do
13447: LD_ADDR_VAR 0 1
13451: PUSH
13452: LD_VAR 0 5
13456: PUSH
13457: FOR_IN
13458: IFFALSE 13555
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
13460: LD_VAR 0 1
13464: PPUSH
13465: CALL_OW 256
13469: PUSH
13470: LD_INT 600
13472: LESS
13473: PUSH
13474: LD_VAR 0 1
13478: PPUSH
13479: LD_INT 161
13481: PPUSH
13482: LD_INT 130
13484: PPUSH
13485: CALL_OW 297
13489: PUSH
13490: LD_INT 6
13492: GREATER
13493: AND
13494: IFFALSE 13511
// ComMoveXY ( i , 161 , 130 ) ;
13496: LD_VAR 0 1
13500: PPUSH
13501: LD_INT 161
13503: PPUSH
13504: LD_INT 130
13506: PPUSH
13507: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
13511: LD_VAR 0 1
13515: PPUSH
13516: CALL_OW 256
13520: PUSH
13521: LD_INT 1000
13523: EQUAL
13524: PUSH
13525: LD_VAR 0 1
13529: PPUSH
13530: CALL_OW 314
13534: NOT
13535: AND
13536: IFFALSE 13553
// ComAgressiveMove ( i , 160 , 109 ) ;
13538: LD_VAR 0 1
13542: PPUSH
13543: LD_INT 160
13545: PPUSH
13546: LD_INT 109
13548: PPUSH
13549: CALL_OW 114
// end ;
13553: GO 13457
13555: POP
13556: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
13557: LD_ADDR_VAR 0 5
13561: PUSH
13562: LD_EXP 39
13566: PPUSH
13567: LD_INT 21
13569: PUSH
13570: LD_INT 2
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: PPUSH
13577: CALL_OW 72
13581: ST_TO_ADDR
// for i in tmp do
13582: LD_ADDR_VAR 0 1
13586: PUSH
13587: LD_VAR 0 5
13591: PUSH
13592: FOR_IN
13593: IFFALSE 13859
// begin tmp2 := IsDrivenBy ( i ) ;
13595: LD_ADDR_VAR 0 6
13599: PUSH
13600: LD_VAR 0 1
13604: PPUSH
13605: CALL_OW 311
13609: ST_TO_ADDR
// if not tmp2 then
13610: LD_VAR 0 6
13614: NOT
13615: IFFALSE 13619
// continue ;
13617: GO 13592
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
13619: LD_VAR 0 1
13623: PPUSH
13624: CALL_OW 256
13628: PUSH
13629: LD_INT 600
13631: GREATEREQUAL
13632: PUSH
13633: LD_VAR 0 1
13637: PPUSH
13638: CALL_OW 110
13642: PUSH
13643: LD_INT 1
13645: EQUAL
13646: AND
13647: IFFALSE 13661
// SetTag ( i , 0 ) ;
13649: LD_VAR 0 1
13653: PPUSH
13654: LD_INT 0
13656: PPUSH
13657: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
13661: LD_VAR 0 1
13665: PPUSH
13666: CALL_OW 256
13670: PUSH
13671: LD_INT 600
13673: GREATEREQUAL
13674: PUSH
13675: LD_VAR 0 1
13679: PPUSH
13680: CALL_OW 110
13684: NOT
13685: AND
13686: IFFALSE 13712
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13688: LD_VAR 0 1
13692: PPUSH
13693: LD_VAR 0 7
13697: PPUSH
13698: LD_VAR 0 1
13702: PPUSH
13703: CALL_OW 74
13707: PPUSH
13708: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
13712: LD_VAR 0 1
13716: PPUSH
13717: CALL_OW 256
13721: PUSH
13722: LD_INT 600
13724: LESS
13725: PUSH
13726: LD_VAR 0 1
13730: PPUSH
13731: CALL_OW 110
13735: NOT
13736: AND
13737: IFFALSE 13766
// begin SetTag ( i , 1 ) ;
13739: LD_VAR 0 1
13743: PPUSH
13744: LD_INT 1
13746: PPUSH
13747: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
13751: LD_VAR 0 1
13755: PPUSH
13756: LD_INT 202
13758: PPUSH
13759: LD_INT 150
13761: PPUSH
13762: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
13766: LD_VAR 0 1
13770: PPUSH
13771: CALL_OW 110
13775: PUSH
13776: LD_INT 1
13778: EQUAL
13779: PUSH
13780: LD_VAR 0 1
13784: PPUSH
13785: LD_INT 202
13787: PPUSH
13788: LD_INT 150
13790: PPUSH
13791: CALL_OW 297
13795: PUSH
13796: LD_INT 6
13798: LESS
13799: AND
13800: PUSH
13801: LD_VAR 0 6
13805: AND
13806: IFFALSE 13857
// begin ComExitVehicle ( tmp2 ) ;
13808: LD_VAR 0 6
13812: PPUSH
13813: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
13817: LD_VAR 0 6
13821: PPUSH
13822: LD_VAR 0 1
13826: PPUSH
13827: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
13831: LD_VAR 0 6
13835: PPUSH
13836: LD_INT 700
13838: PPUSH
13839: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
13843: LD_VAR 0 6
13847: PPUSH
13848: LD_VAR 0 1
13852: PPUSH
13853: CALL_OW 180
// end ; end ;
13857: GO 13592
13859: POP
13860: POP
// until kirovDestroyed ;
13861: LD_EXP 16
13865: IFFALSE 13415
// repeat wait ( 0 0$1 ) ;
13867: LD_INT 35
13869: PPUSH
13870: CALL_OW 67
// for i in omarSquad union Omar do
13874: LD_ADDR_VAR 0 1
13878: PUSH
13879: LD_EXP 39
13883: PUSH
13884: LD_EXP 34
13888: UNION
13889: PUSH
13890: FOR_IN
13891: IFFALSE 14061
// if IsInArea ( i , southRoadArea ) then
13893: LD_VAR 0 1
13897: PPUSH
13898: LD_INT 15
13900: PPUSH
13901: CALL_OW 308
13905: IFFALSE 13918
// RemoveUnit ( i ) else
13907: LD_VAR 0 1
13911: PPUSH
13912: CALL_OW 64
13916: GO 14059
// begin if GetClass ( i ) = 3 and not IsInUnit ( i ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_lives , 251 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
13918: LD_VAR 0 1
13922: PPUSH
13923: CALL_OW 257
13927: PUSH
13928: LD_INT 3
13930: EQUAL
13931: PUSH
13932: LD_VAR 0 1
13936: PPUSH
13937: CALL_OW 310
13941: NOT
13942: AND
13943: PUSH
13944: LD_INT 22
13946: PUSH
13947: LD_INT 5
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: PUSH
13954: LD_INT 24
13956: PUSH
13957: LD_INT 251
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PUSH
13964: LD_INT 21
13966: PUSH
13967: LD_INT 2
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: PUSH
13974: LD_INT 58
13976: PUSH
13977: EMPTY
13978: LIST
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: PPUSH
13986: CALL_OW 69
13990: AND
13991: IFFALSE 14044
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) else
13993: LD_VAR 0 1
13997: PPUSH
13998: LD_INT 22
14000: PUSH
14001: LD_INT 5
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: PUSH
14008: LD_INT 21
14010: PUSH
14011: LD_INT 2
14013: PUSH
14014: EMPTY
14015: LIST
14016: LIST
14017: PUSH
14018: LD_INT 58
14020: PUSH
14021: EMPTY
14022: LIST
14023: PUSH
14024: EMPTY
14025: LIST
14026: LIST
14027: LIST
14028: PPUSH
14029: CALL_OW 69
14033: PUSH
14034: LD_INT 1
14036: ARRAY
14037: PPUSH
14038: CALL_OW 120
14042: GO 14059
// ComMoveXY ( i , 208 , 162 ) ;
14044: LD_VAR 0 1
14048: PPUSH
14049: LD_INT 208
14051: PPUSH
14052: LD_INT 162
14054: PPUSH
14055: CALL_OW 111
// end ;
14059: GO 13890
14061: POP
14062: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
14063: LD_INT 22
14065: PUSH
14066: LD_INT 5
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: PUSH
14073: LD_INT 21
14075: PUSH
14076: LD_INT 1
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: PUSH
14083: EMPTY
14084: LIST
14085: LIST
14086: PPUSH
14087: CALL_OW 69
14091: NOT
14092: IFFALSE 13867
// end ;
14094: PPOPN 7
14096: END
// every 0 0$1 trigger IsDead ( kirov ) do
14097: LD_INT 71
14099: PPUSH
14100: CALL_OW 301
14104: IFFALSE 14121
14106: GO 14108
14108: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
14109: LD_EXP 26
14113: PPUSH
14114: LD_STRING DH-1-Kirov
14116: PPUSH
14117: CALL_OW 88
14121: END
// every 0 0$1 trigger See ( 2 , beria ) do
14122: LD_INT 2
14124: PPUSH
14125: LD_INT 106
14127: PPUSH
14128: CALL_OW 292
14132: IFFALSE 14149
14134: GO 14136
14136: DISABLE
// Say ( Heike , DH-1-Beria ) ;
14137: LD_EXP 26
14141: PPUSH
14142: LD_STRING DH-1-Beria
14144: PPUSH
14145: CALL_OW 88
14149: END
// every 0 0$1 trigger See ( 2 , kagan ) do
14150: LD_INT 2
14152: PPUSH
14153: LD_INT 112
14155: PPUSH
14156: CALL_OW 292
14160: IFFALSE 14427
14162: GO 14164
14164: DISABLE
// begin DialogueOn ;
14165: CALL_OW 6
// CenterNowOnUnits ( kagan ) ;
14169: LD_INT 112
14171: PPUSH
14172: CALL_OW 87
// Say ( Heike , DH-1-Kagan ) ;
14176: LD_EXP 26
14180: PPUSH
14181: LD_STRING DH-1-Kagan
14183: PPUSH
14184: CALL_OW 88
// if Kamil then
14188: LD_EXP 30
14192: IFFALSE 14230
// begin Say ( Kamil , DKam-Kagan-2 ) ;
14194: LD_EXP 30
14198: PPUSH
14199: LD_STRING DKam-Kagan-2
14201: PPUSH
14202: CALL_OW 88
// Say ( Givi , DG-Kagan-3 ) ;
14206: LD_EXP 27
14210: PPUSH
14211: LD_STRING DG-Kagan-3
14213: PPUSH
14214: CALL_OW 88
// Say ( Givi , DG-Kagan-4 ) ;
14218: LD_EXP 27
14222: PPUSH
14223: LD_STRING DG-Kagan-4
14225: PPUSH
14226: CALL_OW 88
// end ; case Query ( KaganBase ) of 1 :
14230: LD_STRING KaganBase
14232: PPUSH
14233: CALL_OW 97
14237: PUSH
14238: LD_INT 1
14240: DOUBLE
14241: EQUAL
14242: IFTRUE 14246
14244: GO 14341
14246: POP
// begin Say ( Heike , DH-Kagan-5 ) ;
14247: LD_EXP 26
14251: PPUSH
14252: LD_STRING DH-Kagan-5
14254: PPUSH
14255: CALL_OW 88
// Say ( Heike , DH-Kagan-6 ) ;
14259: LD_EXP 26
14263: PPUSH
14264: LD_STRING DH-Kagan-6
14266: PPUSH
14267: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-7 ) ;
14271: LD_EXP 37
14275: PPUSH
14276: LD_STRING DShar-Kagan-7
14278: PPUSH
14279: CALL_OW 94
// Say ( Heike , DH-Kagan-8 ) ;
14283: LD_EXP 26
14287: PPUSH
14288: LD_STRING DH-Kagan-8
14290: PPUSH
14291: CALL_OW 88
// Say ( Heike , DH-Kagan-9 ) ;
14295: LD_EXP 26
14299: PPUSH
14300: LD_STRING DH-Kagan-9
14302: PPUSH
14303: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-10 ) ;
14307: LD_EXP 37
14311: PPUSH
14312: LD_STRING DShar-Kagan-10
14314: PPUSH
14315: CALL_OW 94
// Say ( Heike , DH-Kagan-11 ) ;
14319: LD_EXP 26
14323: PPUSH
14324: LD_STRING DH-Kagan-11
14326: PPUSH
14327: CALL_OW 88
// kaganCaptured := true ;
14331: LD_ADDR_EXP 24
14335: PUSH
14336: LD_INT 1
14338: ST_TO_ADDR
// end ; 2 :
14339: GO 14423
14341: LD_INT 2
14343: DOUBLE
14344: EQUAL
14345: IFTRUE 14349
14347: GO 14422
14349: POP
// begin if FilterAllUnits ( [ f_side , 8 ] ) and Aviradze then
14350: LD_INT 22
14352: PUSH
14353: LD_INT 8
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: PPUSH
14360: CALL_OW 69
14364: PUSH
14365: LD_EXP 36
14369: AND
14370: IFFALSE 14384
// Say ( Heike , DH-Kagan-a-5 ) ;
14372: LD_EXP 26
14376: PPUSH
14377: LD_STRING DH-Kagan-a-5
14379: PPUSH
14380: CALL_OW 88
// Say ( Heike , DH-Kagan-a-6 ) ;
14384: LD_EXP 26
14388: PPUSH
14389: LD_STRING DH-Kagan-a-6
14391: PPUSH
14392: CALL_OW 88
// Say ( Heike , DH-Kagan-a-7 ) ;
14396: LD_EXP 26
14400: PPUSH
14401: LD_STRING DH-Kagan-a-7
14403: PPUSH
14404: CALL_OW 88
// Say ( Givi , DG-Kagan-a-8 ) ;
14408: LD_EXP 27
14412: PPUSH
14413: LD_STRING DG-Kagan-a-8
14415: PPUSH
14416: CALL_OW 88
// end ; end ;
14420: GO 14423
14422: POP
// DialogueOff ;
14423: CALL_OW 7
// end ;
14427: END
// every 0 0$1 trigger kaganDestroyed or GetSide ( kagan ) = 2 do
14428: LD_EXP 18
14432: PUSH
14433: LD_INT 112
14435: PPUSH
14436: CALL_OW 255
14440: PUSH
14441: LD_INT 2
14443: EQUAL
14444: OR
14445: IFFALSE 14457
14447: GO 14449
14449: DISABLE
// ChangeMissionObjectives ( KaganDone ) ;
14450: LD_STRING KaganDone
14452: PPUSH
14453: CALL_OW 337
14457: END
// every 0 0$1 trigger startAttackOnOmicron and UnitFilter ( russianOmicronAttackers , [ f_inarea , russianOmParkingArea ] ) do
14458: LD_EXP 6
14462: PUSH
14463: LD_EXP 49
14467: PPUSH
14468: LD_INT 95
14470: PUSH
14471: LD_INT 19
14473: PUSH
14474: EMPTY
14475: LIST
14476: LIST
14477: PPUSH
14478: CALL_OW 72
14482: AND
14483: IFFALSE 14560
14485: GO 14487
14487: DISABLE
// begin DialogueOn ;
14488: CALL_OW 6
// CenterNowOnXY ( 63 , 32 ) ;
14492: LD_INT 63
14494: PPUSH
14495: LD_INT 32
14497: PPUSH
14498: CALL_OW 86
// PlaceSeeing ( 63 , 32 , 2 , - 12 ) ;
14502: LD_INT 63
14504: PPUSH
14505: LD_INT 32
14507: PPUSH
14508: LD_INT 2
14510: PPUSH
14511: LD_INT 12
14513: NEG
14514: PPUSH
14515: CALL_OW 330
// Say ( Heike , DH-Omicron-1 ) ;
14519: LD_EXP 26
14523: PPUSH
14524: LD_STRING DH-Omicron-1
14526: PPUSH
14527: CALL_OW 88
// Say ( Mike , DM-Omicron-2 ) ;
14531: LD_EXP 28
14535: PPUSH
14536: LD_STRING DM-Omicron-2
14538: PPUSH
14539: CALL_OW 88
// RemoveSeeing ( 63 , 32 , 2 ) ;
14543: LD_INT 63
14545: PPUSH
14546: LD_INT 32
14548: PPUSH
14549: LD_INT 2
14551: PPUSH
14552: CALL_OW 331
// DialogueOff ;
14556: CALL_OW 7
// end ;
14560: END
// every 0 0$3 trigger ( See ( 2 , ruLab ) or GetSide ( ruLab ) = 2 or GetSide ( beria ) = 2 ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) do var i , tmp , tmp2 , q , settings ;
14561: LD_INT 2
14563: PPUSH
14564: LD_EXP 51
14568: PPUSH
14569: CALL_OW 292
14573: PUSH
14574: LD_EXP 51
14578: PPUSH
14579: CALL_OW 255
14583: PUSH
14584: LD_INT 2
14586: EQUAL
14587: OR
14588: PUSH
14589: LD_INT 106
14591: PPUSH
14592: CALL_OW 255
14596: PUSH
14597: LD_INT 2
14599: EQUAL
14600: OR
14601: PUSH
14602: LD_EXP 51
14606: PPUSH
14607: CALL_OW 302
14611: AND
14612: PUSH
14613: LD_EXP 26
14617: PPUSH
14618: CALL_OW 302
14622: AND
14623: PUSH
14624: LD_EXP 36
14628: PPUSH
14629: CALL_OW 302
14633: AND
14634: IFFALSE 15373
14636: GO 14638
14638: DISABLE
14639: LD_INT 0
14641: PPUSH
14642: PPUSH
14643: PPUSH
14644: PPUSH
14645: PPUSH
// begin DialogueOn ;
14646: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
14650: LD_INT 111
14652: PPUSH
14653: LD_INT 90
14655: PPUSH
14656: LD_INT 2
14658: PPUSH
14659: LD_INT 6
14661: NEG
14662: PPUSH
14663: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
14667: LD_INT 111
14669: PPUSH
14670: LD_INT 90
14672: PPUSH
14673: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
14677: LD_EXP 36
14681: PPUSH
14682: LD_STRING DA-Cap-1
14684: PPUSH
14685: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
14689: LD_EXP 26
14693: PPUSH
14694: LD_STRING DH-Cap-2
14696: PPUSH
14697: CALL_OW 88
// RemoveSeeing ( 111 , 90 , 2 ) ;
14701: LD_INT 111
14703: PPUSH
14704: LD_INT 90
14706: PPUSH
14707: LD_INT 2
14709: PPUSH
14710: CALL_OW 331
// DialogueOff ;
14714: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
14718: LD_INT 35
14720: PPUSH
14721: CALL_OW 67
// until ( beriaDestroyed or GetSide ( beria ) = 2 or GetSide ( ruLab ) = 2 ) and IsOk ( ruLab ) and IsOk ( Aviradze ) and not InBattle ( 2 ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 110 , 95 , 12 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] , [ f_distxy , 110 , 95 , 12 ] ] ) ;
14725: LD_EXP 17
14729: PUSH
14730: LD_INT 106
14732: PPUSH
14733: CALL_OW 255
14737: PUSH
14738: LD_INT 2
14740: EQUAL
14741: OR
14742: PUSH
14743: LD_EXP 51
14747: PPUSH
14748: CALL_OW 255
14752: PUSH
14753: LD_INT 2
14755: EQUAL
14756: OR
14757: PUSH
14758: LD_EXP 51
14762: PPUSH
14763: CALL_OW 302
14767: AND
14768: PUSH
14769: LD_EXP 36
14773: PPUSH
14774: CALL_OW 302
14778: AND
14779: PUSH
14780: LD_INT 2
14782: PPUSH
14783: CALL_OW 463
14787: NOT
14788: AND
14789: PUSH
14790: LD_INT 22
14792: PUSH
14793: LD_INT 3
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PUSH
14800: LD_INT 21
14802: PUSH
14803: LD_INT 1
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: PUSH
14810: LD_INT 92
14812: PUSH
14813: LD_INT 110
14815: PUSH
14816: LD_INT 95
14818: PUSH
14819: LD_INT 12
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: LIST
14832: PPUSH
14833: CALL_OW 69
14837: NOT
14838: AND
14839: PUSH
14840: LD_INT 22
14842: PUSH
14843: LD_INT 3
14845: PUSH
14846: EMPTY
14847: LIST
14848: LIST
14849: PUSH
14850: LD_INT 30
14852: PUSH
14853: LD_INT 5
14855: PUSH
14856: EMPTY
14857: LIST
14858: LIST
14859: PUSH
14860: LD_INT 92
14862: PUSH
14863: LD_INT 110
14865: PUSH
14866: LD_INT 95
14868: PUSH
14869: LD_INT 12
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: LIST
14882: PPUSH
14883: CALL_OW 69
14887: NOT
14888: AND
14889: IFFALSE 14718
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
14891: LD_ADDR_VAR 0 2
14895: PUSH
14896: LD_EXP 38
14900: PUSH
14901: LD_EXP 29
14905: PUSH
14906: LD_EXP 30
14910: PUSH
14911: LD_EXP 32
14915: PUSH
14916: LD_EXP 31
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: UNION
14927: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14928: LD_ADDR_VAR 0 2
14932: PUSH
14933: LD_VAR 0 2
14937: PPUSH
14938: LD_INT 50
14940: PUSH
14941: EMPTY
14942: LIST
14943: PPUSH
14944: CALL_OW 72
14948: ST_TO_ADDR
// if tmp < 2 then
14949: LD_VAR 0 2
14953: PUSH
14954: LD_INT 2
14956: LESS
14957: IFFALSE 14969
// q := 2 else
14959: LD_ADDR_VAR 0 4
14963: PUSH
14964: LD_INT 2
14966: ST_TO_ADDR
14967: GO 14982
// q := Query ( LabCap ) ;
14969: LD_ADDR_VAR 0 4
14973: PUSH
14974: LD_STRING LabCap
14976: PPUSH
14977: CALL_OW 97
14981: ST_TO_ADDR
// case q of 1 :
14982: LD_VAR 0 4
14986: PUSH
14987: LD_INT 1
14989: DOUBLE
14990: EQUAL
14991: IFTRUE 14995
14993: GO 15337
14995: POP
// begin DoNotAttack ( 2 , ruLab ) ;
14996: LD_INT 2
14998: PPUSH
14999: LD_EXP 51
15003: PPUSH
15004: CALL_OW 471
// labCaptured := true ;
15008: LD_ADDR_EXP 21
15012: PUSH
15013: LD_INT 1
15015: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
15016: LD_EXP 26
15020: PPUSH
15021: LD_STRING DH-Cap-a-1
15023: PPUSH
15024: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
15028: LD_EXP 36
15032: PPUSH
15033: LD_STRING DA-Cap-a-2
15035: PPUSH
15036: CALL_OW 88
// settings := [ Aviradze , sel_changeable ] ^ [ sel_not_hired , sel_not_changeable , Heike , Givi , Kurt , Markov ] ^ [ sel_changeable ] ^ tmp ;
15040: LD_ADDR_VAR 0 5
15044: PUSH
15045: LD_EXP 36
15049: PUSH
15050: LD_INT -3
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: PUSH
15057: LD_INT -2
15059: PUSH
15060: LD_INT -4
15062: PUSH
15063: LD_EXP 26
15067: PUSH
15068: LD_EXP 27
15072: PUSH
15073: LD_EXP 35
15077: PUSH
15078: LD_EXP 33
15082: PUSH
15083: EMPTY
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: ADD
15091: PUSH
15092: LD_INT -3
15094: PUSH
15095: EMPTY
15096: LIST
15097: ADD
15098: PUSH
15099: LD_VAR 0 2
15103: ADD
15104: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
15105: LD_ADDR_VAR 0 3
15109: PUSH
15110: LD_STRING Select two characters to go with Aviradze
15112: PPUSH
15113: LD_INT 2
15115: PPUSH
15116: LD_INT 2
15118: PPUSH
15119: LD_VAR 0 5
15123: PPUSH
15124: EMPTY
15125: PPUSH
15126: CALL_OW 42
15130: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
15131: LD_EXP 51
15135: PPUSH
15136: LD_INT 8
15138: PPUSH
15139: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
15143: LD_EXP 36
15147: PPUSH
15148: LD_INT 8
15150: PPUSH
15151: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
15155: LD_ADDR_EXP 40
15159: PUSH
15160: LD_EXP 36
15164: PUSH
15165: EMPTY
15166: LIST
15167: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
15168: LD_EXP 36
15172: PPUSH
15173: CALL_OW 310
15177: IFFALSE 15188
// ComExit ( Aviradze ) ;
15179: LD_EXP 36
15183: PPUSH
15184: CALL 76746 0 1
// wait ( 3 ) ;
15188: LD_INT 3
15190: PPUSH
15191: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
15195: LD_EXP 36
15199: PPUSH
15200: LD_EXP 51
15204: PPUSH
15205: CALL_OW 120
// for i := 1 to 2 do
15209: LD_ADDR_VAR 0 1
15213: PUSH
15214: DOUBLE
15215: LD_INT 1
15217: DEC
15218: ST_TO_ADDR
15219: LD_INT 2
15221: PUSH
15222: FOR_TO
15223: IFFALSE 15326
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
15225: LD_ADDR_EXP 40
15229: PUSH
15230: LD_EXP 40
15234: PUSH
15235: LD_VAR 0 3
15239: PUSH
15240: LD_VAR 0 1
15244: ARRAY
15245: UNION
15246: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
15247: LD_VAR 0 3
15251: PUSH
15252: LD_VAR 0 1
15256: ARRAY
15257: PPUSH
15258: LD_INT 8
15260: PPUSH
15261: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
15265: LD_VAR 0 3
15269: PUSH
15270: LD_VAR 0 1
15274: ARRAY
15275: PPUSH
15276: CALL_OW 310
15280: IFFALSE 15297
// ComExit ( tmp2 [ i ] ) ;
15282: LD_VAR 0 3
15286: PUSH
15287: LD_VAR 0 1
15291: ARRAY
15292: PPUSH
15293: CALL 76746 0 1
// wait ( 3 ) ;
15297: LD_INT 3
15299: PPUSH
15300: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
15304: LD_VAR 0 3
15308: PUSH
15309: LD_VAR 0 1
15313: ARRAY
15314: PPUSH
15315: LD_EXP 51
15319: PPUSH
15320: CALL_OW 120
// end ;
15324: GO 15222
15326: POP
15327: POP
// SetAchievement ( ACH_LAB ) ;
15328: LD_STRING ACH_LAB
15330: PPUSH
15331: CALL_OW 543
// end ; 2 :
15335: GO 15373
15337: LD_INT 2
15339: DOUBLE
15340: EQUAL
15341: IFTRUE 15345
15343: GO 15372
15345: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
15346: LD_EXP 26
15350: PPUSH
15351: LD_STRING DH-Cap-b-1
15353: PPUSH
15354: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
15358: LD_EXP 36
15362: PPUSH
15363: LD_STRING DA-Cap-b-2
15365: PPUSH
15366: CALL_OW 88
// end ; end ;
15370: GO 15373
15372: POP
// end ;
15373: PPOPN 5
15375: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
15376: LD_INT 10
15378: PPUSH
15379: LD_INT 22
15381: PUSH
15382: LD_INT 2
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: PUSH
15389: LD_INT 30
15391: PUSH
15392: LD_INT 31
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: PPUSH
15403: CALL_OW 70
15407: PUSH
15408: LD_INT 2
15410: GREATEREQUAL
15411: IFFALSE 15423
15413: GO 15415
15415: DISABLE
// SetAchievement ( ACH_KING ) ;
15416: LD_STRING ACH_KING
15418: PPUSH
15419: CALL_OW 543
15423: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
15424: LD_EXP 11
15428: NOT
15429: PUSH
15430: LD_INT 10
15432: PPUSH
15433: LD_INT 22
15435: PUSH
15436: LD_INT 2
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: LD_INT 2
15445: PUSH
15446: LD_INT 30
15448: PUSH
15449: LD_INT 31
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: PUSH
15456: LD_INT 30
15458: PUSH
15459: LD_INT 4
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: PUSH
15466: EMPTY
15467: LIST
15468: LIST
15469: LIST
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: PPUSH
15475: CALL_OW 70
15479: AND
15480: IFFALSE 15510
15482: GO 15484
15484: DISABLE
// begin hillBase := true ;
15485: LD_ADDR_EXP 15
15489: PUSH
15490: LD_INT 1
15492: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
15493: LD_STRING HillDone
15495: PPUSH
15496: CALL_OW 337
// SetAreaMapShow ( bunkerHillArea , 0 ) ;
15500: LD_INT 22
15502: PPUSH
15503: LD_INT 0
15505: PPUSH
15506: CALL_OW 424
// end ;
15510: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
15511: LD_EXP 31
15515: PUSH
15516: LD_EXP 31
15520: PPUSH
15521: CALL_OW 256
15525: PUSH
15526: LD_INT 3
15528: LESS
15529: AND
15530: IFFALSE 15576
15532: GO 15534
15534: DISABLE
// begin DialogueOn ;
15535: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
15539: LD_EXP 31
15543: PPUSH
15544: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
15548: LD_EXP 31
15552: PPUSH
15553: LD_STRING DK-Kkilled-1
15555: PPUSH
15556: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
15560: LD_EXP 26
15564: PPUSH
15565: LD_STRING DH-Kkilled-2
15567: PPUSH
15568: CALL_OW 88
// DialogueOff ;
15572: CALL_OW 7
// end ;
15576: END
// every 0 0$1 trigger kaiaKilledByRussian do
15577: LD_EXP 23
15581: IFFALSE 15598
15583: GO 15585
15585: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
15586: LD_EXP 26
15590: PPUSH
15591: LD_STRING DH-Kkilled-3
15593: PPUSH
15594: CALL_OW 88
15598: END
// every 0 0$1 trigger ( kirovDestroyed and ( GetSide ( beria ) = 2 or beriaDestroyed ) and ( kaganDestroyed or ( kaganCaptured and GetSide ( kagan ) = 2 ) ) ) do var i , tmp , tmp2 , cargo , driver ;
15599: LD_EXP 16
15603: PUSH
15604: LD_INT 106
15606: PPUSH
15607: CALL_OW 255
15611: PUSH
15612: LD_INT 2
15614: EQUAL
15615: PUSH
15616: LD_EXP 17
15620: OR
15621: AND
15622: PUSH
15623: LD_EXP 18
15627: PUSH
15628: LD_EXP 24
15632: PUSH
15633: LD_INT 112
15635: PPUSH
15636: CALL_OW 255
15640: PUSH
15641: LD_INT 2
15643: EQUAL
15644: AND
15645: OR
15646: AND
15647: IFFALSE 16887
15649: GO 15651
15651: DISABLE
15652: LD_INT 0
15654: PPUSH
15655: PPUSH
15656: PPUSH
15657: PPUSH
15658: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
15659: LD_STRING GoToWest
15661: PPUSH
15662: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
15666: LD_INT 17
15668: PPUSH
15669: LD_INT 1
15671: PPUSH
15672: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
15676: LD_INT 35
15678: PPUSH
15679: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15683: LD_ADDR_VAR 0 2
15687: PUSH
15688: LD_INT 17
15690: PPUSH
15691: LD_INT 22
15693: PUSH
15694: LD_INT 2
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: PUSH
15701: LD_INT 2
15703: PUSH
15704: LD_INT 21
15706: PUSH
15707: LD_INT 1
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PUSH
15714: LD_INT 21
15716: PUSH
15717: LD_INT 2
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: PUSH
15724: LD_INT 3
15726: PUSH
15727: LD_INT 58
15729: PUSH
15730: EMPTY
15731: LIST
15732: PUSH
15733: EMPTY
15734: LIST
15735: LIST
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: LIST
15745: PUSH
15746: EMPTY
15747: LIST
15748: LIST
15749: PPUSH
15750: CALL_OW 70
15754: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
15755: LD_ADDR_VAR 0 3
15759: PUSH
15760: LD_INT 22
15762: PUSH
15763: LD_INT 2
15765: PUSH
15766: EMPTY
15767: LIST
15768: LIST
15769: PUSH
15770: LD_INT 3
15772: PUSH
15773: LD_INT 55
15775: PUSH
15776: EMPTY
15777: LIST
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: PUSH
15783: LD_INT 2
15785: PUSH
15786: LD_INT 21
15788: PUSH
15789: LD_INT 1
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: PUSH
15796: LD_INT 21
15798: PUSH
15799: LD_INT 2
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PUSH
15806: LD_INT 3
15808: PUSH
15809: LD_INT 58
15811: PUSH
15812: EMPTY
15813: LIST
15814: PUSH
15815: EMPTY
15816: LIST
15817: LIST
15818: PUSH
15819: EMPTY
15820: LIST
15821: LIST
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: LIST
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: LIST
15832: PPUSH
15833: CALL_OW 69
15837: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
15838: LD_VAR 0 2
15842: PUSH
15843: LD_INT 0
15845: PLUS
15846: PUSH
15847: LD_VAR 0 3
15851: PUSH
15852: LD_INT 0
15854: PLUS
15855: EQUAL
15856: IFFALSE 15676
// SaveCharacters ( Heike , 04_1_Heike ) ;
15858: LD_EXP 26
15862: PPUSH
15863: LD_STRING 04_1_Heike
15865: PPUSH
15866: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
15870: LD_EXP 36
15874: PUSH
15875: LD_EXP 36
15879: PUSH
15880: LD_EXP 40
15884: IN
15885: NOT
15886: AND
15887: IFFALSE 15903
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
15889: LD_EXP 36
15893: PPUSH
15894: LD_STRING 04_1_Aviradze
15896: PPUSH
15897: CALL_OW 38
15901: GO 15921
// if Aviradze then
15903: LD_EXP 36
15907: IFFALSE 15921
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
15909: LD_EXP 36
15913: PPUSH
15914: LD_STRING 04_1_Aviradze_L
15916: PPUSH
15917: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
15921: LD_EXP 29
15925: PUSH
15926: LD_EXP 29
15930: PUSH
15931: LD_EXP 40
15935: IN
15936: NOT
15937: AND
15938: IFFALSE 15954
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
15940: LD_EXP 29
15944: PPUSH
15945: LD_STRING 04_1_Ibrahim
15947: PPUSH
15948: CALL_OW 38
15952: GO 15972
// if Ibrahim then
15954: LD_EXP 29
15958: IFFALSE 15972
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
15960: LD_EXP 29
15964: PPUSH
15965: LD_STRING 04_1_Ibrahim_L
15967: PPUSH
15968: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
15972: LD_EXP 30
15976: PUSH
15977: LD_EXP 30
15981: PUSH
15982: LD_EXP 40
15986: IN
15987: NOT
15988: AND
15989: IFFALSE 16005
// SaveCharacters ( Kamil , 04_1_Kamil ) else
15991: LD_EXP 30
15995: PPUSH
15996: LD_STRING 04_1_Kamil
15998: PPUSH
15999: CALL_OW 38
16003: GO 16023
// if Kamil then
16005: LD_EXP 30
16009: IFFALSE 16023
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
16011: LD_EXP 30
16015: PPUSH
16016: LD_STRING 04_1_Kamil_L
16018: PPUSH
16019: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
16023: LD_EXP 32
16027: PUSH
16028: LD_EXP 32
16032: PUSH
16033: LD_EXP 40
16037: IN
16038: NOT
16039: AND
16040: IFFALSE 16056
// SaveCharacters ( Sophia , 04_1_Sophia ) else
16042: LD_EXP 32
16046: PPUSH
16047: LD_STRING 04_1_Sophia
16049: PPUSH
16050: CALL_OW 38
16054: GO 16074
// if Sophia then
16056: LD_EXP 32
16060: IFFALSE 16074
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
16062: LD_EXP 32
16066: PPUSH
16067: LD_STRING 04_1_Sophia_L
16069: PPUSH
16070: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
16074: LD_EXP 31
16078: PUSH
16079: LD_EXP 31
16083: PUSH
16084: LD_EXP 40
16088: IN
16089: NOT
16090: AND
16091: IFFALSE 16107
// SaveCharacters ( Kaia , 04_1_Kaia ) else
16093: LD_EXP 31
16097: PPUSH
16098: LD_STRING 04_1_Kaia
16100: PPUSH
16101: CALL_OW 38
16105: GO 16125
// if Kaia then
16107: LD_EXP 31
16111: IFFALSE 16125
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
16113: LD_EXP 31
16117: PPUSH
16118: LD_STRING 04_1_Kaia_L
16120: PPUSH
16121: CALL_OW 38
// if Givi then
16125: LD_EXP 27
16129: IFFALSE 16143
// SaveCharacters ( Givi , 04_1_Givi ) ;
16131: LD_EXP 27
16135: PPUSH
16136: LD_STRING 04_1_Givi
16138: PPUSH
16139: CALL_OW 38
// if Mike then
16143: LD_EXP 28
16147: IFFALSE 16161
// SaveCharacters ( Mike , 04_1_Mike ) ;
16149: LD_EXP 28
16153: PPUSH
16154: LD_STRING 04_1_Mike
16156: PPUSH
16157: CALL_OW 38
// if Markov then
16161: LD_EXP 33
16165: IFFALSE 16179
// SaveCharacters ( Markov , 04_1_Markov ) ;
16167: LD_EXP 33
16171: PPUSH
16172: LD_STRING 04_1_Markov
16174: PPUSH
16175: CALL_OW 38
// if Kurt then
16179: LD_EXP 35
16183: IFFALSE 16204
// begin SaveCharacters ( Kurt , 04_1_Kurt ) ;
16185: LD_EXP 35
16189: PPUSH
16190: LD_STRING 04_1_Kurt
16192: PPUSH
16193: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KURT) ) ;
16197: LD_STRING enableBioCharacter(BIO_KURT)
16199: PPUSH
16200: CALL_OW 559
// end ; if heikeSecondSquad diff aviradzeSquad then
16204: LD_EXP 38
16208: PUSH
16209: LD_EXP 40
16213: DIFF
16214: IFFALSE 16234
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
16216: LD_EXP 38
16220: PUSH
16221: LD_EXP 40
16225: DIFF
16226: PPUSH
16227: LD_STRING 04_1_others
16229: PPUSH
16230: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
16234: LD_EXP 40
16238: PUSH
16239: LD_EXP 38
16243: AND
16244: IFFALSE 16329
// begin tmp := [ ] ;
16246: LD_ADDR_VAR 0 2
16250: PUSH
16251: EMPTY
16252: ST_TO_ADDR
// for i in heikeSecondSquad do
16253: LD_ADDR_VAR 0 1
16257: PUSH
16258: LD_EXP 38
16262: PUSH
16263: FOR_IN
16264: IFFALSE 16309
// if i in aviradzeSquad then
16266: LD_VAR 0 1
16270: PUSH
16271: LD_EXP 40
16275: IN
16276: IFFALSE 16307
// tmp := Replace ( tmp , tmp + 1 , i ) ;
16278: LD_ADDR_VAR 0 2
16282: PUSH
16283: LD_VAR 0 2
16287: PPUSH
16288: LD_VAR 0 2
16292: PUSH
16293: LD_INT 1
16295: PLUS
16296: PPUSH
16297: LD_VAR 0 1
16301: PPUSH
16302: CALL_OW 1
16306: ST_TO_ADDR
16307: GO 16263
16309: POP
16310: POP
// if tmp then
16311: LD_VAR 0 2
16315: IFFALSE 16329
// SaveCharacters ( tmp , 04_1_others_L ) ;
16317: LD_VAR 0 2
16321: PPUSH
16322: LD_STRING 04_1_others_L
16324: PPUSH
16325: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
16329: LD_ADDR_VAR 0 2
16333: PUSH
16334: LD_INT 22
16336: PUSH
16337: LD_INT 2
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: PUSH
16344: LD_INT 23
16346: PUSH
16347: LD_INT 0
16349: PUSH
16350: EMPTY
16351: LIST
16352: LIST
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: PPUSH
16358: CALL_OW 69
16362: ST_TO_ADDR
// if tmp then
16363: LD_VAR 0 2
16367: IFFALSE 16381
// SaveCharacters ( tmp , 04_1_apes ) ;
16369: LD_VAR 0 2
16373: PPUSH
16374: LD_STRING 04_1_apes
16376: PPUSH
16377: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
16381: LD_ADDR_VAR 0 2
16385: PUSH
16386: LD_INT 17
16388: PPUSH
16389: LD_INT 21
16391: PUSH
16392: LD_INT 2
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: PPUSH
16399: CALL_OW 70
16403: ST_TO_ADDR
// if tmp then
16404: LD_VAR 0 2
16408: IFFALSE 16752
// begin tmp2 := [ ] ;
16410: LD_ADDR_VAR 0 3
16414: PUSH
16415: EMPTY
16416: ST_TO_ADDR
// for i in tmp do
16417: LD_ADDR_VAR 0 1
16421: PUSH
16422: LD_VAR 0 2
16426: PUSH
16427: FOR_IN
16428: IFFALSE 16738
// begin driver := IsDrivenBy ( i ) ;
16430: LD_ADDR_VAR 0 5
16434: PUSH
16435: LD_VAR 0 1
16439: PPUSH
16440: CALL_OW 311
16444: ST_TO_ADDR
// if not driver then
16445: LD_VAR 0 5
16449: NOT
16450: IFFALSE 16454
// continue ;
16452: GO 16427
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay ] then
16454: LD_VAR 0 1
16458: PPUSH
16459: CALL_OW 264
16463: PUSH
16464: LD_INT 32
16466: PUSH
16467: LD_INT 12
16469: PUSH
16470: LD_INT 51
16472: PUSH
16473: LD_INT 89
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: IN
16482: IFFALSE 16630
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
16484: LD_ADDR_VAR 0 4
16488: PUSH
16489: LD_VAR 0 1
16493: PPUSH
16494: LD_INT 1
16496: PPUSH
16497: CALL_OW 289
16501: PUSH
16502: LD_VAR 0 1
16506: PPUSH
16507: LD_INT 2
16509: PPUSH
16510: CALL_OW 289
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo , GetClass ( driver ) ] ) ;
16519: LD_ADDR_VAR 0 3
16523: PUSH
16524: LD_VAR 0 3
16528: PPUSH
16529: LD_VAR 0 3
16533: PUSH
16534: LD_INT 1
16536: PLUS
16537: PPUSH
16538: LD_VAR 0 1
16542: PPUSH
16543: CALL_OW 265
16547: PUSH
16548: LD_VAR 0 1
16552: PPUSH
16553: CALL_OW 262
16557: PUSH
16558: LD_VAR 0 1
16562: PPUSH
16563: CALL_OW 263
16567: PUSH
16568: LD_VAR 0 1
16572: PPUSH
16573: CALL_OW 264
16577: PUSH
16578: LD_VAR 0 1
16582: PPUSH
16583: CALL_OW 248
16587: PUSH
16588: LD_VAR 0 1
16592: PPUSH
16593: CALL_OW 256
16597: PUSH
16598: LD_VAR 0 4
16602: PUSH
16603: LD_VAR 0 5
16607: PPUSH
16608: CALL_OW 257
16612: PUSH
16613: EMPTY
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: PPUSH
16623: CALL_OW 1
16627: ST_TO_ADDR
// end else
16628: GO 16736
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] , GetClass ( driver ) ] ) ;
16630: LD_ADDR_VAR 0 3
16634: PUSH
16635: LD_VAR 0 3
16639: PPUSH
16640: LD_VAR 0 3
16644: PUSH
16645: LD_INT 1
16647: PLUS
16648: PPUSH
16649: LD_VAR 0 1
16653: PPUSH
16654: CALL_OW 265
16658: PUSH
16659: LD_VAR 0 1
16663: PPUSH
16664: CALL_OW 262
16668: PUSH
16669: LD_VAR 0 1
16673: PPUSH
16674: CALL_OW 263
16678: PUSH
16679: LD_VAR 0 1
16683: PPUSH
16684: CALL_OW 264
16688: PUSH
16689: LD_VAR 0 1
16693: PPUSH
16694: CALL_OW 248
16698: PUSH
16699: LD_VAR 0 1
16703: PPUSH
16704: CALL_OW 256
16708: PUSH
16709: EMPTY
16710: PUSH
16711: LD_VAR 0 5
16715: PPUSH
16716: CALL_OW 257
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: PPUSH
16731: CALL_OW 1
16735: ST_TO_ADDR
// end ;
16736: GO 16427
16738: POP
16739: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
16740: LD_VAR 0 3
16744: PPUSH
16745: LD_STRING 04_1_Vehicles
16747: PPUSH
16748: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
16752: LD_EXP 21
16756: PPUSH
16757: LD_STRING 04_1_RuLabCaptured
16759: PPUSH
16760: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
16764: LD_EXP 19
16768: PPUSH
16769: LD_STRING 04_1_EscapeCounter
16771: PPUSH
16772: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
16776: LD_EXP 15
16780: PPUSH
16781: LD_STRING 04_1_BaseHill
16783: PPUSH
16784: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
16788: LD_OWVAR 1
16792: PPUSH
16793: LD_STRING 04_1_Time
16795: PPUSH
16796: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
16800: LD_EXP 14
16804: PPUSH
16805: LD_STRING 04_1_DeadCounter
16807: PPUSH
16808: CALL_OW 39
// SaveVariable ( kaganCaptured * GetSide ( kagan ) = 2 , 04_1_KaganCaptured ) ;
16812: LD_EXP 24
16816: PUSH
16817: LD_INT 112
16819: PPUSH
16820: CALL_OW 255
16824: MUL
16825: PUSH
16826: LD_INT 2
16828: EQUAL
16829: PPUSH
16830: LD_STRING 04_1_KaganCaptured
16832: PPUSH
16833: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
16837: LD_INT 22
16839: PUSH
16840: LD_INT 2
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: PUSH
16847: LD_INT 34
16849: PUSH
16850: LD_INT 26
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: PPUSH
16861: CALL_OW 69
16865: PUSH
16866: LD_INT 0
16868: PLUS
16869: PPUSH
16870: LD_STRING 04_1_Flamethrower
16872: PPUSH
16873: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
16877: LD_INT 1
16879: PPUSH
16880: LD_STRING __x1\04_cont2
16882: PPUSH
16883: CALL_OW 340
// end ; end_of_file
16887: PPOPN 5
16889: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
16890: LD_VAR 0 1
16894: PPUSH
16895: CALL_OW 266
16899: PUSH
16900: LD_INT 0
16902: EQUAL
16903: PUSH
16904: LD_VAR 0 1
16908: PPUSH
16909: CALL_OW 255
16913: PUSH
16914: LD_INT 2
16916: EQUAL
16917: AND
16918: IFFALSE 16928
// baseConstructed := true ;
16920: LD_ADDR_EXP 3
16924: PUSH
16925: LD_INT 1
16927: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
16928: LD_VAR 0 1
16932: PPUSH
16933: CALL_OW 266
16937: PUSH
16938: LD_INT 6
16940: EQUAL
16941: PUSH
16942: LD_VAR 0 1
16946: PPUSH
16947: CALL_OW 255
16951: PUSH
16952: LD_INT 2
16954: EQUAL
16955: AND
16956: IFFALSE 16966
// labConstructed := true ;
16958: LD_ADDR_EXP 4
16962: PUSH
16963: LD_INT 1
16965: ST_TO_ADDR
// end ;
16966: PPOPN 1
16968: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
16969: LD_VAR 0 1
16973: PPUSH
16974: CALL 33763 0 1
// if un = Heike then
16978: LD_VAR 0 1
16982: PUSH
16983: LD_EXP 26
16987: EQUAL
16988: IFFALSE 16997
// YouLost ( Heike ) ;
16990: LD_STRING Heike
16992: PPUSH
16993: CALL_OW 104
// if un = Omar then
16997: LD_VAR 0 1
17001: PUSH
17002: LD_EXP 34
17006: EQUAL
17007: IFFALSE 17016
// YouLost ( Omar ) ;
17009: LD_STRING Omar
17011: PPUSH
17012: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
17016: LD_VAR 0 1
17020: PUSH
17021: LD_INT 22
17023: PUSH
17024: LD_INT 2
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: PUSH
17031: LD_INT 23
17033: PUSH
17034: LD_INT 2
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PUSH
17041: LD_INT 21
17043: PUSH
17044: LD_INT 1
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: PUSH
17051: EMPTY
17052: LIST
17053: LIST
17054: LIST
17055: PPUSH
17056: CALL_OW 69
17060: IN
17061: IFFALSE 17077
// loseCounter := loseCounter + 1 ;
17063: LD_ADDR_EXP 14
17067: PUSH
17068: LD_EXP 14
17072: PUSH
17073: LD_INT 1
17075: PLUS
17076: ST_TO_ADDR
// if un = omikron then
17077: LD_VAR 0 1
17081: PUSH
17082: LD_INT 64
17084: EQUAL
17085: IFFALSE 17095
// omicronFall := true ;
17087: LD_ADDR_EXP 13
17091: PUSH
17092: LD_INT 1
17094: ST_TO_ADDR
// if un = kirov then
17095: LD_VAR 0 1
17099: PUSH
17100: LD_INT 71
17102: EQUAL
17103: IFFALSE 17120
// begin ChangeMissionObjectives ( KirovDone ) ;
17105: LD_STRING KirovDone
17107: PPUSH
17108: CALL_OW 337
// kirovDestroyed := true ;
17112: LD_ADDR_EXP 16
17116: PUSH
17117: LD_INT 1
17119: ST_TO_ADDR
// end ; if un = beria then
17120: LD_VAR 0 1
17124: PUSH
17125: LD_INT 106
17127: EQUAL
17128: IFFALSE 17145
// begin ChangeMissionObjectives ( BeriaDone ) ;
17130: LD_STRING BeriaDone
17132: PPUSH
17133: CALL_OW 337
// beriaDestroyed := true ;
17137: LD_ADDR_EXP 17
17141: PUSH
17142: LD_INT 1
17144: ST_TO_ADDR
// end ; if un = kagan then
17145: LD_VAR 0 1
17149: PUSH
17150: LD_INT 112
17152: EQUAL
17153: IFFALSE 17163
// kaganDestroyed := true ;
17155: LD_ADDR_EXP 18
17159: PUSH
17160: LD_INT 1
17162: ST_TO_ADDR
// if un in russianPatrol then
17163: LD_VAR 0 1
17167: PUSH
17168: LD_EXP 48
17172: IN
17173: IFFALSE 17191
// russianPatrol := russianPatrol diff un ;
17175: LD_ADDR_EXP 48
17179: PUSH
17180: LD_EXP 48
17184: PUSH
17185: LD_VAR 0 1
17189: DIFF
17190: ST_TO_ADDR
// if un in russianOmicronAttackers then
17191: LD_VAR 0 1
17195: PUSH
17196: LD_EXP 49
17200: IN
17201: IFFALSE 17219
// russianOmicronAttackers := russianOmicronAttackers diff un ;
17203: LD_ADDR_EXP 49
17207: PUSH
17208: LD_EXP 49
17212: PUSH
17213: LD_VAR 0 1
17217: DIFF
17218: ST_TO_ADDR
// end ;
17219: PPOPN 1
17221: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
17222: LD_INT 0
17224: PPUSH
17225: PPUSH
17226: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
17227: LD_VAR 0 1
17231: PUSH
17232: LD_INT 2
17234: PUSH
17235: LD_INT 22
17237: PUSH
17238: LD_INT 3
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: PUSH
17245: LD_INT 22
17247: PUSH
17248: LD_INT 4
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: PUSH
17255: LD_INT 22
17257: PUSH
17258: LD_INT 6
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: PUSH
17271: LD_INT 30
17273: PUSH
17274: LD_INT 32
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: PPUSH
17285: CALL_OW 69
17289: IN
17290: IFFALSE 17463
// begin sol := UnitsInside ( un ) ;
17292: LD_ADDR_VAR 0 3
17296: PUSH
17297: LD_VAR 0 1
17301: PPUSH
17302: CALL_OW 313
17306: ST_TO_ADDR
// if not sol then
17307: LD_VAR 0 3
17311: NOT
17312: IFFALSE 17316
// exit ;
17314: GO 17463
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
17316: LD_ADDR_VAR 0 4
17320: PUSH
17321: LD_INT 22
17323: PUSH
17324: LD_VAR 0 1
17328: PPUSH
17329: CALL_OW 255
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: PUSH
17338: LD_INT 2
17340: PUSH
17341: LD_INT 30
17343: PUSH
17344: LD_INT 4
17346: PUSH
17347: EMPTY
17348: LIST
17349: LIST
17350: PUSH
17351: LD_INT 30
17353: PUSH
17354: LD_INT 5
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: LIST
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: PPUSH
17370: CALL_OW 69
17374: ST_TO_ADDR
// if not nearestBarracks then
17375: LD_VAR 0 4
17379: NOT
17380: IFFALSE 17384
// exit ;
17382: GO 17463
// for i in nearestBarracks do
17384: LD_ADDR_VAR 0 2
17388: PUSH
17389: LD_VAR 0 4
17393: PUSH
17394: FOR_IN
17395: IFFALSE 17430
// if UnitsInside ( i ) = 6 then
17397: LD_VAR 0 2
17401: PPUSH
17402: CALL_OW 313
17406: PUSH
17407: LD_INT 6
17409: EQUAL
17410: IFFALSE 17428
// nearestBarracks := nearestBarracks diff i ;
17412: LD_ADDR_VAR 0 4
17416: PUSH
17417: LD_VAR 0 4
17421: PUSH
17422: LD_VAR 0 2
17426: DIFF
17427: ST_TO_ADDR
17428: GO 17394
17430: POP
17431: POP
// if not nearestBarracks then
17432: LD_VAR 0 4
17436: NOT
17437: IFFALSE 17441
// exit ;
17439: GO 17463
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
17441: LD_VAR 0 3
17445: PUSH
17446: LD_INT 1
17448: ARRAY
17449: PPUSH
17450: LD_VAR 0 4
17454: PUSH
17455: LD_INT 1
17457: ARRAY
17458: PPUSH
17459: CALL_OW 120
// end ; end ;
17463: PPOPN 4
17465: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
17466: LD_INT 0
17468: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
17469: LD_EXP 8
17473: NOT
17474: PUSH
17475: LD_EXP 5
17479: NOT
17480: OR
17481: IFFALSE 17485
// exit ;
17483: GO 17553
// for i in camAreas do
17485: LD_ADDR_VAR 0 5
17489: PUSH
17490: LD_EXP 8
17494: PUSH
17495: FOR_IN
17496: IFFALSE 17551
// if InArea ( x , y , i ) then
17498: LD_VAR 0 3
17502: PPUSH
17503: LD_VAR 0 4
17507: PPUSH
17508: LD_VAR 0 5
17512: PPUSH
17513: CALL_OW 309
17517: IFFALSE 17549
// begin SetAreaMapShow ( i , 0 ) ;
17519: LD_VAR 0 5
17523: PPUSH
17524: LD_INT 0
17526: PPUSH
17527: CALL_OW 424
// camAreas := camAreas diff i ;
17531: LD_ADDR_EXP 8
17535: PUSH
17536: LD_EXP 8
17540: PUSH
17541: LD_VAR 0 5
17545: DIFF
17546: ST_TO_ADDR
// break ;
17547: GO 17551
// end ;
17549: GO 17495
17551: POP
17552: POP
// end ;
17553: PPOPN 5
17555: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
17556: LD_VAR 0 1
17560: PUSH
17561: LD_INT 2
17563: EQUAL
17564: PUSH
17565: LD_VAR 0 2
17569: PUSH
17570: LD_INT 5
17572: PUSH
17573: LD_INT 8
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: IN
17580: AND
17581: IFFALSE 17590
// YouLost ( Ally ) ;
17583: LD_STRING Ally
17585: PPUSH
17586: CALL_OW 104
// end ;
17590: PPOPN 2
17592: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
17593: LD_VAR 0 1
17597: PUSH
17598: LD_EXP 31
17602: EQUAL
17603: PUSH
17604: LD_VAR 0 2
17608: PUSH
17609: LD_INT 3
17611: PUSH
17612: LD_INT 6
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: IN
17619: AND
17620: IFFALSE 17651
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
17622: LD_ADDR_EXP 23
17626: PUSH
17627: LD_VAR 0 1
17631: PPUSH
17632: CALL_OW 250
17636: PUSH
17637: LD_VAR 0 1
17641: PPUSH
17642: CALL_OW 251
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: ST_TO_ADDR
// end ;
17651: PPOPN 3
17653: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
17654: LD_VAR 0 1
17658: PPUSH
17659: LD_VAR 0 2
17663: PPUSH
17664: CALL 33883 0 2
// end ; end_of_file
17668: PPOPN 2
17670: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 20 , 16 , 12 , 10 ] [ Difficulty ] do
17671: LD_EXP 11
17675: NOT
17676: PUSH
17677: LD_INT 12
17679: PPUSH
17680: LD_INT 1
17682: PPUSH
17683: CALL_OW 287
17687: PUSH
17688: LD_INT 20
17690: PUSH
17691: LD_INT 16
17693: PUSH
17694: LD_INT 12
17696: PUSH
17697: LD_INT 10
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: PUSH
17706: LD_OWVAR 67
17710: ARRAY
17711: LESS
17712: AND
17713: IFFALSE 17740
17715: GO 17717
17717: DISABLE
// begin enable ;
17718: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
17719: LD_INT 1
17721: PPUSH
17722: LD_INT 5
17724: PPUSH
17725: CALL_OW 12
17729: PPUSH
17730: LD_INT 12
17732: PPUSH
17733: LD_INT 1
17735: PPUSH
17736: CALL_OW 55
// end ; end_of_file
17740: END
// every 0 0$1 trigger omarCountdown do
17741: LD_EXP 22
17745: IFFALSE 17797
17747: GO 17749
17749: DISABLE
// begin enable ;
17750: ENABLE
// display_strings := [ #X104-1 , omarCountdown ] ;
17751: LD_ADDR_OWVAR 47
17755: PUSH
17756: LD_STRING #X104-1
17758: PUSH
17759: LD_EXP 22
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: ST_TO_ADDR
// omarCountdown := omarCountdown - 0 0$1 ;
17768: LD_ADDR_EXP 22
17772: PUSH
17773: LD_EXP 22
17777: PUSH
17778: LD_INT 35
17780: MINUS
17781: ST_TO_ADDR
// if not omarCountdown then
17782: LD_EXP 22
17786: NOT
17787: IFFALSE 17797
// display_strings :=  ;
17789: LD_ADDR_OWVAR 47
17793: PUSH
17794: LD_STRING 
17796: ST_TO_ADDR
// end ; end_of_file
17797: END
// export globalGameSaveCounter ; every 0 0$1 do
17798: GO 17800
17800: DISABLE
// begin enable ;
17801: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
17802: LD_STRING updateTimer(
17804: PUSH
17805: LD_OWVAR 1
17809: STR
17810: PUSH
17811: LD_STRING );
17813: STR
17814: PPUSH
17815: CALL_OW 559
// end ;
17819: END
// every 0 0$1 do
17820: GO 17822
17822: DISABLE
// begin globalGameSaveCounter := 0 ;
17823: LD_ADDR_EXP 53
17827: PUSH
17828: LD_INT 0
17830: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
17831: LD_STRING setGameSaveCounter(0)
17833: PPUSH
17834: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
17838: LD_STRING initStreamRollete();
17840: PPUSH
17841: CALL_OW 559
// InitStreamMode ;
17845: CALL 19171 0 0
// DefineStreamItems ( false ) ;
17849: LD_INT 0
17851: PPUSH
17852: CALL 19635 0 1
// end ;
17856: END
// export function SOS_MapStart ( ) ; begin
17857: LD_INT 0
17859: PPUSH
// if streamModeActive then
17860: LD_EXP 54
17864: IFFALSE 17873
// DefineStreamItems ( true ) ;
17866: LD_INT 1
17868: PPUSH
17869: CALL 19635 0 1
// UpdateLuaVariables ( ) ;
17873: CALL 17890 0 0
// UpdateFactoryWaypoints ( ) ;
17877: CALL 32504 0 0
// UpdateWarehouseGatheringPoints ( ) ;
17881: CALL 32761 0 0
// end ;
17885: LD_VAR 0 1
17889: RET
// function UpdateLuaVariables ( ) ; begin
17890: LD_INT 0
17892: PPUSH
// if globalGameSaveCounter then
17893: LD_EXP 53
17897: IFFALSE 17931
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
17899: LD_ADDR_EXP 53
17903: PUSH
17904: LD_EXP 53
17908: PPUSH
17909: CALL 77709 0 1
17913: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
17914: LD_STRING setGameSaveCounter(
17916: PUSH
17917: LD_EXP 53
17921: STR
17922: PUSH
17923: LD_STRING )
17925: STR
17926: PPUSH
17927: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
17931: LD_STRING setGameDifficulty(
17933: PUSH
17934: LD_OWVAR 67
17938: STR
17939: PUSH
17940: LD_STRING )
17942: STR
17943: PPUSH
17944: CALL_OW 559
// end ;
17948: LD_VAR 0 1
17952: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17953: LD_INT 0
17955: PPUSH
// if p2 = stream_mode then
17956: LD_VAR 0 2
17960: PUSH
17961: LD_INT 100
17963: EQUAL
17964: IFFALSE 18967
// begin if not StreamModeActive then
17966: LD_EXP 54
17970: NOT
17971: IFFALSE 17981
// StreamModeActive := true ;
17973: LD_ADDR_EXP 54
17977: PUSH
17978: LD_INT 1
17980: ST_TO_ADDR
// if p3 = 0 then
17981: LD_VAR 0 3
17985: PUSH
17986: LD_INT 0
17988: EQUAL
17989: IFFALSE 17995
// InitStreamMode ;
17991: CALL 19171 0 0
// if p3 = 1 then
17995: LD_VAR 0 3
17999: PUSH
18000: LD_INT 1
18002: EQUAL
18003: IFFALSE 18013
// sRocket := true ;
18005: LD_ADDR_EXP 59
18009: PUSH
18010: LD_INT 1
18012: ST_TO_ADDR
// if p3 = 2 then
18013: LD_VAR 0 3
18017: PUSH
18018: LD_INT 2
18020: EQUAL
18021: IFFALSE 18031
// sSpeed := true ;
18023: LD_ADDR_EXP 58
18027: PUSH
18028: LD_INT 1
18030: ST_TO_ADDR
// if p3 = 3 then
18031: LD_VAR 0 3
18035: PUSH
18036: LD_INT 3
18038: EQUAL
18039: IFFALSE 18049
// sEngine := true ;
18041: LD_ADDR_EXP 60
18045: PUSH
18046: LD_INT 1
18048: ST_TO_ADDR
// if p3 = 4 then
18049: LD_VAR 0 3
18053: PUSH
18054: LD_INT 4
18056: EQUAL
18057: IFFALSE 18067
// sSpec := true ;
18059: LD_ADDR_EXP 57
18063: PUSH
18064: LD_INT 1
18066: ST_TO_ADDR
// if p3 = 5 then
18067: LD_VAR 0 3
18071: PUSH
18072: LD_INT 5
18074: EQUAL
18075: IFFALSE 18085
// sLevel := true ;
18077: LD_ADDR_EXP 61
18081: PUSH
18082: LD_INT 1
18084: ST_TO_ADDR
// if p3 = 6 then
18085: LD_VAR 0 3
18089: PUSH
18090: LD_INT 6
18092: EQUAL
18093: IFFALSE 18103
// sArmoury := true ;
18095: LD_ADDR_EXP 62
18099: PUSH
18100: LD_INT 1
18102: ST_TO_ADDR
// if p3 = 7 then
18103: LD_VAR 0 3
18107: PUSH
18108: LD_INT 7
18110: EQUAL
18111: IFFALSE 18121
// sRadar := true ;
18113: LD_ADDR_EXP 63
18117: PUSH
18118: LD_INT 1
18120: ST_TO_ADDR
// if p3 = 8 then
18121: LD_VAR 0 3
18125: PUSH
18126: LD_INT 8
18128: EQUAL
18129: IFFALSE 18139
// sBunker := true ;
18131: LD_ADDR_EXP 64
18135: PUSH
18136: LD_INT 1
18138: ST_TO_ADDR
// if p3 = 9 then
18139: LD_VAR 0 3
18143: PUSH
18144: LD_INT 9
18146: EQUAL
18147: IFFALSE 18157
// sHack := true ;
18149: LD_ADDR_EXP 65
18153: PUSH
18154: LD_INT 1
18156: ST_TO_ADDR
// if p3 = 10 then
18157: LD_VAR 0 3
18161: PUSH
18162: LD_INT 10
18164: EQUAL
18165: IFFALSE 18175
// sFire := true ;
18167: LD_ADDR_EXP 66
18171: PUSH
18172: LD_INT 1
18174: ST_TO_ADDR
// if p3 = 11 then
18175: LD_VAR 0 3
18179: PUSH
18180: LD_INT 11
18182: EQUAL
18183: IFFALSE 18193
// sRefresh := true ;
18185: LD_ADDR_EXP 67
18189: PUSH
18190: LD_INT 1
18192: ST_TO_ADDR
// if p3 = 12 then
18193: LD_VAR 0 3
18197: PUSH
18198: LD_INT 12
18200: EQUAL
18201: IFFALSE 18211
// sExp := true ;
18203: LD_ADDR_EXP 68
18207: PUSH
18208: LD_INT 1
18210: ST_TO_ADDR
// if p3 = 13 then
18211: LD_VAR 0 3
18215: PUSH
18216: LD_INT 13
18218: EQUAL
18219: IFFALSE 18229
// sDepot := true ;
18221: LD_ADDR_EXP 69
18225: PUSH
18226: LD_INT 1
18228: ST_TO_ADDR
// if p3 = 14 then
18229: LD_VAR 0 3
18233: PUSH
18234: LD_INT 14
18236: EQUAL
18237: IFFALSE 18247
// sFlag := true ;
18239: LD_ADDR_EXP 70
18243: PUSH
18244: LD_INT 1
18246: ST_TO_ADDR
// if p3 = 15 then
18247: LD_VAR 0 3
18251: PUSH
18252: LD_INT 15
18254: EQUAL
18255: IFFALSE 18265
// sKamikadze := true ;
18257: LD_ADDR_EXP 78
18261: PUSH
18262: LD_INT 1
18264: ST_TO_ADDR
// if p3 = 16 then
18265: LD_VAR 0 3
18269: PUSH
18270: LD_INT 16
18272: EQUAL
18273: IFFALSE 18283
// sTroll := true ;
18275: LD_ADDR_EXP 79
18279: PUSH
18280: LD_INT 1
18282: ST_TO_ADDR
// if p3 = 17 then
18283: LD_VAR 0 3
18287: PUSH
18288: LD_INT 17
18290: EQUAL
18291: IFFALSE 18301
// sSlow := true ;
18293: LD_ADDR_EXP 80
18297: PUSH
18298: LD_INT 1
18300: ST_TO_ADDR
// if p3 = 18 then
18301: LD_VAR 0 3
18305: PUSH
18306: LD_INT 18
18308: EQUAL
18309: IFFALSE 18319
// sLack := true ;
18311: LD_ADDR_EXP 81
18315: PUSH
18316: LD_INT 1
18318: ST_TO_ADDR
// if p3 = 19 then
18319: LD_VAR 0 3
18323: PUSH
18324: LD_INT 19
18326: EQUAL
18327: IFFALSE 18337
// sTank := true ;
18329: LD_ADDR_EXP 83
18333: PUSH
18334: LD_INT 1
18336: ST_TO_ADDR
// if p3 = 20 then
18337: LD_VAR 0 3
18341: PUSH
18342: LD_INT 20
18344: EQUAL
18345: IFFALSE 18355
// sRemote := true ;
18347: LD_ADDR_EXP 84
18351: PUSH
18352: LD_INT 1
18354: ST_TO_ADDR
// if p3 = 21 then
18355: LD_VAR 0 3
18359: PUSH
18360: LD_INT 21
18362: EQUAL
18363: IFFALSE 18373
// sPowell := true ;
18365: LD_ADDR_EXP 85
18369: PUSH
18370: LD_INT 1
18372: ST_TO_ADDR
// if p3 = 22 then
18373: LD_VAR 0 3
18377: PUSH
18378: LD_INT 22
18380: EQUAL
18381: IFFALSE 18391
// sTeleport := true ;
18383: LD_ADDR_EXP 88
18387: PUSH
18388: LD_INT 1
18390: ST_TO_ADDR
// if p3 = 23 then
18391: LD_VAR 0 3
18395: PUSH
18396: LD_INT 23
18398: EQUAL
18399: IFFALSE 18409
// sOilTower := true ;
18401: LD_ADDR_EXP 90
18405: PUSH
18406: LD_INT 1
18408: ST_TO_ADDR
// if p3 = 24 then
18409: LD_VAR 0 3
18413: PUSH
18414: LD_INT 24
18416: EQUAL
18417: IFFALSE 18427
// sShovel := true ;
18419: LD_ADDR_EXP 91
18423: PUSH
18424: LD_INT 1
18426: ST_TO_ADDR
// if p3 = 25 then
18427: LD_VAR 0 3
18431: PUSH
18432: LD_INT 25
18434: EQUAL
18435: IFFALSE 18445
// sSheik := true ;
18437: LD_ADDR_EXP 92
18441: PUSH
18442: LD_INT 1
18444: ST_TO_ADDR
// if p3 = 26 then
18445: LD_VAR 0 3
18449: PUSH
18450: LD_INT 26
18452: EQUAL
18453: IFFALSE 18463
// sEarthquake := true ;
18455: LD_ADDR_EXP 94
18459: PUSH
18460: LD_INT 1
18462: ST_TO_ADDR
// if p3 = 27 then
18463: LD_VAR 0 3
18467: PUSH
18468: LD_INT 27
18470: EQUAL
18471: IFFALSE 18481
// sAI := true ;
18473: LD_ADDR_EXP 95
18477: PUSH
18478: LD_INT 1
18480: ST_TO_ADDR
// if p3 = 28 then
18481: LD_VAR 0 3
18485: PUSH
18486: LD_INT 28
18488: EQUAL
18489: IFFALSE 18499
// sCargo := true ;
18491: LD_ADDR_EXP 98
18495: PUSH
18496: LD_INT 1
18498: ST_TO_ADDR
// if p3 = 29 then
18499: LD_VAR 0 3
18503: PUSH
18504: LD_INT 29
18506: EQUAL
18507: IFFALSE 18517
// sDLaser := true ;
18509: LD_ADDR_EXP 99
18513: PUSH
18514: LD_INT 1
18516: ST_TO_ADDR
// if p3 = 30 then
18517: LD_VAR 0 3
18521: PUSH
18522: LD_INT 30
18524: EQUAL
18525: IFFALSE 18535
// sExchange := true ;
18527: LD_ADDR_EXP 100
18531: PUSH
18532: LD_INT 1
18534: ST_TO_ADDR
// if p3 = 31 then
18535: LD_VAR 0 3
18539: PUSH
18540: LD_INT 31
18542: EQUAL
18543: IFFALSE 18553
// sFac := true ;
18545: LD_ADDR_EXP 101
18549: PUSH
18550: LD_INT 1
18552: ST_TO_ADDR
// if p3 = 32 then
18553: LD_VAR 0 3
18557: PUSH
18558: LD_INT 32
18560: EQUAL
18561: IFFALSE 18571
// sPower := true ;
18563: LD_ADDR_EXP 102
18567: PUSH
18568: LD_INT 1
18570: ST_TO_ADDR
// if p3 = 33 then
18571: LD_VAR 0 3
18575: PUSH
18576: LD_INT 33
18578: EQUAL
18579: IFFALSE 18589
// sRandom := true ;
18581: LD_ADDR_EXP 103
18585: PUSH
18586: LD_INT 1
18588: ST_TO_ADDR
// if p3 = 34 then
18589: LD_VAR 0 3
18593: PUSH
18594: LD_INT 34
18596: EQUAL
18597: IFFALSE 18607
// sShield := true ;
18599: LD_ADDR_EXP 104
18603: PUSH
18604: LD_INT 1
18606: ST_TO_ADDR
// if p3 = 35 then
18607: LD_VAR 0 3
18611: PUSH
18612: LD_INT 35
18614: EQUAL
18615: IFFALSE 18625
// sTime := true ;
18617: LD_ADDR_EXP 105
18621: PUSH
18622: LD_INT 1
18624: ST_TO_ADDR
// if p3 = 36 then
18625: LD_VAR 0 3
18629: PUSH
18630: LD_INT 36
18632: EQUAL
18633: IFFALSE 18643
// sTools := true ;
18635: LD_ADDR_EXP 106
18639: PUSH
18640: LD_INT 1
18642: ST_TO_ADDR
// if p3 = 101 then
18643: LD_VAR 0 3
18647: PUSH
18648: LD_INT 101
18650: EQUAL
18651: IFFALSE 18661
// sSold := true ;
18653: LD_ADDR_EXP 71
18657: PUSH
18658: LD_INT 1
18660: ST_TO_ADDR
// if p3 = 102 then
18661: LD_VAR 0 3
18665: PUSH
18666: LD_INT 102
18668: EQUAL
18669: IFFALSE 18679
// sDiff := true ;
18671: LD_ADDR_EXP 72
18675: PUSH
18676: LD_INT 1
18678: ST_TO_ADDR
// if p3 = 103 then
18679: LD_VAR 0 3
18683: PUSH
18684: LD_INT 103
18686: EQUAL
18687: IFFALSE 18697
// sFog := true ;
18689: LD_ADDR_EXP 75
18693: PUSH
18694: LD_INT 1
18696: ST_TO_ADDR
// if p3 = 104 then
18697: LD_VAR 0 3
18701: PUSH
18702: LD_INT 104
18704: EQUAL
18705: IFFALSE 18715
// sReset := true ;
18707: LD_ADDR_EXP 76
18711: PUSH
18712: LD_INT 1
18714: ST_TO_ADDR
// if p3 = 105 then
18715: LD_VAR 0 3
18719: PUSH
18720: LD_INT 105
18722: EQUAL
18723: IFFALSE 18733
// sSun := true ;
18725: LD_ADDR_EXP 77
18729: PUSH
18730: LD_INT 1
18732: ST_TO_ADDR
// if p3 = 106 then
18733: LD_VAR 0 3
18737: PUSH
18738: LD_INT 106
18740: EQUAL
18741: IFFALSE 18751
// sTiger := true ;
18743: LD_ADDR_EXP 73
18747: PUSH
18748: LD_INT 1
18750: ST_TO_ADDR
// if p3 = 107 then
18751: LD_VAR 0 3
18755: PUSH
18756: LD_INT 107
18758: EQUAL
18759: IFFALSE 18769
// sBomb := true ;
18761: LD_ADDR_EXP 74
18765: PUSH
18766: LD_INT 1
18768: ST_TO_ADDR
// if p3 = 108 then
18769: LD_VAR 0 3
18773: PUSH
18774: LD_INT 108
18776: EQUAL
18777: IFFALSE 18787
// sWound := true ;
18779: LD_ADDR_EXP 82
18783: PUSH
18784: LD_INT 1
18786: ST_TO_ADDR
// if p3 = 109 then
18787: LD_VAR 0 3
18791: PUSH
18792: LD_INT 109
18794: EQUAL
18795: IFFALSE 18805
// sBetray := true ;
18797: LD_ADDR_EXP 86
18801: PUSH
18802: LD_INT 1
18804: ST_TO_ADDR
// if p3 = 110 then
18805: LD_VAR 0 3
18809: PUSH
18810: LD_INT 110
18812: EQUAL
18813: IFFALSE 18823
// sContamin := true ;
18815: LD_ADDR_EXP 87
18819: PUSH
18820: LD_INT 1
18822: ST_TO_ADDR
// if p3 = 111 then
18823: LD_VAR 0 3
18827: PUSH
18828: LD_INT 111
18830: EQUAL
18831: IFFALSE 18841
// sOil := true ;
18833: LD_ADDR_EXP 89
18837: PUSH
18838: LD_INT 1
18840: ST_TO_ADDR
// if p3 = 112 then
18841: LD_VAR 0 3
18845: PUSH
18846: LD_INT 112
18848: EQUAL
18849: IFFALSE 18859
// sStu := true ;
18851: LD_ADDR_EXP 93
18855: PUSH
18856: LD_INT 1
18858: ST_TO_ADDR
// if p3 = 113 then
18859: LD_VAR 0 3
18863: PUSH
18864: LD_INT 113
18866: EQUAL
18867: IFFALSE 18877
// sBazooka := true ;
18869: LD_ADDR_EXP 96
18873: PUSH
18874: LD_INT 1
18876: ST_TO_ADDR
// if p3 = 114 then
18877: LD_VAR 0 3
18881: PUSH
18882: LD_INT 114
18884: EQUAL
18885: IFFALSE 18895
// sMortar := true ;
18887: LD_ADDR_EXP 97
18891: PUSH
18892: LD_INT 1
18894: ST_TO_ADDR
// if p3 = 115 then
18895: LD_VAR 0 3
18899: PUSH
18900: LD_INT 115
18902: EQUAL
18903: IFFALSE 18913
// sRanger := true ;
18905: LD_ADDR_EXP 107
18909: PUSH
18910: LD_INT 1
18912: ST_TO_ADDR
// if p3 = 116 then
18913: LD_VAR 0 3
18917: PUSH
18918: LD_INT 116
18920: EQUAL
18921: IFFALSE 18931
// sComputer := true ;
18923: LD_ADDR_EXP 108
18927: PUSH
18928: LD_INT 1
18930: ST_TO_ADDR
// if p3 = 117 then
18931: LD_VAR 0 3
18935: PUSH
18936: LD_INT 117
18938: EQUAL
18939: IFFALSE 18949
// s30 := true ;
18941: LD_ADDR_EXP 109
18945: PUSH
18946: LD_INT 1
18948: ST_TO_ADDR
// if p3 = 118 then
18949: LD_VAR 0 3
18953: PUSH
18954: LD_INT 118
18956: EQUAL
18957: IFFALSE 18967
// s60 := true ;
18959: LD_ADDR_EXP 110
18963: PUSH
18964: LD_INT 1
18966: ST_TO_ADDR
// end ; if p2 = hack_mode then
18967: LD_VAR 0 2
18971: PUSH
18972: LD_INT 101
18974: EQUAL
18975: IFFALSE 19103
// begin case p3 of 1 :
18977: LD_VAR 0 3
18981: PUSH
18982: LD_INT 1
18984: DOUBLE
18985: EQUAL
18986: IFTRUE 18990
18988: GO 18997
18990: POP
// hHackUnlimitedResources ; 2 :
18991: CALL 31250 0 0
18995: GO 19103
18997: LD_INT 2
18999: DOUBLE
19000: EQUAL
19001: IFTRUE 19005
19003: GO 19012
19005: POP
// hHackSetLevel10 ; 3 :
19006: CALL 31383 0 0
19010: GO 19103
19012: LD_INT 3
19014: DOUBLE
19015: EQUAL
19016: IFTRUE 19020
19018: GO 19027
19020: POP
// hHackSetLevel10YourUnits ; 4 :
19021: CALL 31468 0 0
19025: GO 19103
19027: LD_INT 4
19029: DOUBLE
19030: EQUAL
19031: IFTRUE 19035
19033: GO 19042
19035: POP
// hHackInvincible ; 5 :
19036: CALL 31916 0 0
19040: GO 19103
19042: LD_INT 5
19044: DOUBLE
19045: EQUAL
19046: IFTRUE 19050
19048: GO 19057
19050: POP
// hHackInvisible ; 6 :
19051: CALL 32027 0 0
19055: GO 19103
19057: LD_INT 6
19059: DOUBLE
19060: EQUAL
19061: IFTRUE 19065
19063: GO 19072
19065: POP
// hHackChangeYourSide ; 7 :
19066: CALL 32084 0 0
19070: GO 19103
19072: LD_INT 7
19074: DOUBLE
19075: EQUAL
19076: IFTRUE 19080
19078: GO 19087
19080: POP
// hHackChangeUnitSide ; 8 :
19081: CALL 32126 0 0
19085: GO 19103
19087: LD_INT 8
19089: DOUBLE
19090: EQUAL
19091: IFTRUE 19095
19093: GO 19102
19095: POP
// hHackFog ; end ;
19096: CALL 32227 0 0
19100: GO 19103
19102: POP
// end ; if p2 = game_save_mode then
19103: LD_VAR 0 2
19107: PUSH
19108: LD_INT 102
19110: EQUAL
19111: IFFALSE 19166
// begin if p3 = 1 then
19113: LD_VAR 0 3
19117: PUSH
19118: LD_INT 1
19120: EQUAL
19121: IFFALSE 19133
// globalGameSaveCounter := p4 ;
19123: LD_ADDR_EXP 53
19127: PUSH
19128: LD_VAR 0 4
19132: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
19133: LD_VAR 0 3
19137: PUSH
19138: LD_INT 2
19140: EQUAL
19141: PUSH
19142: LD_EXP 53
19146: AND
19147: IFFALSE 19166
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19149: LD_STRING setGameSaveCounter(
19151: PUSH
19152: LD_EXP 53
19156: STR
19157: PUSH
19158: LD_STRING )
19160: STR
19161: PPUSH
19162: CALL_OW 559
// end ; end ;
19166: LD_VAR 0 7
19170: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
19171: LD_INT 0
19173: PPUSH
// streamModeActive := false ;
19174: LD_ADDR_EXP 54
19178: PUSH
19179: LD_INT 0
19181: ST_TO_ADDR
// normalCounter := 36 ;
19182: LD_ADDR_EXP 55
19186: PUSH
19187: LD_INT 36
19189: ST_TO_ADDR
// hardcoreCounter := 18 ;
19190: LD_ADDR_EXP 56
19194: PUSH
19195: LD_INT 18
19197: ST_TO_ADDR
// sRocket := false ;
19198: LD_ADDR_EXP 59
19202: PUSH
19203: LD_INT 0
19205: ST_TO_ADDR
// sSpeed := false ;
19206: LD_ADDR_EXP 58
19210: PUSH
19211: LD_INT 0
19213: ST_TO_ADDR
// sEngine := false ;
19214: LD_ADDR_EXP 60
19218: PUSH
19219: LD_INT 0
19221: ST_TO_ADDR
// sSpec := false ;
19222: LD_ADDR_EXP 57
19226: PUSH
19227: LD_INT 0
19229: ST_TO_ADDR
// sLevel := false ;
19230: LD_ADDR_EXP 61
19234: PUSH
19235: LD_INT 0
19237: ST_TO_ADDR
// sArmoury := false ;
19238: LD_ADDR_EXP 62
19242: PUSH
19243: LD_INT 0
19245: ST_TO_ADDR
// sRadar := false ;
19246: LD_ADDR_EXP 63
19250: PUSH
19251: LD_INT 0
19253: ST_TO_ADDR
// sBunker := false ;
19254: LD_ADDR_EXP 64
19258: PUSH
19259: LD_INT 0
19261: ST_TO_ADDR
// sHack := false ;
19262: LD_ADDR_EXP 65
19266: PUSH
19267: LD_INT 0
19269: ST_TO_ADDR
// sFire := false ;
19270: LD_ADDR_EXP 66
19274: PUSH
19275: LD_INT 0
19277: ST_TO_ADDR
// sRefresh := false ;
19278: LD_ADDR_EXP 67
19282: PUSH
19283: LD_INT 0
19285: ST_TO_ADDR
// sExp := false ;
19286: LD_ADDR_EXP 68
19290: PUSH
19291: LD_INT 0
19293: ST_TO_ADDR
// sDepot := false ;
19294: LD_ADDR_EXP 69
19298: PUSH
19299: LD_INT 0
19301: ST_TO_ADDR
// sFlag := false ;
19302: LD_ADDR_EXP 70
19306: PUSH
19307: LD_INT 0
19309: ST_TO_ADDR
// sKamikadze := false ;
19310: LD_ADDR_EXP 78
19314: PUSH
19315: LD_INT 0
19317: ST_TO_ADDR
// sTroll := false ;
19318: LD_ADDR_EXP 79
19322: PUSH
19323: LD_INT 0
19325: ST_TO_ADDR
// sSlow := false ;
19326: LD_ADDR_EXP 80
19330: PUSH
19331: LD_INT 0
19333: ST_TO_ADDR
// sLack := false ;
19334: LD_ADDR_EXP 81
19338: PUSH
19339: LD_INT 0
19341: ST_TO_ADDR
// sTank := false ;
19342: LD_ADDR_EXP 83
19346: PUSH
19347: LD_INT 0
19349: ST_TO_ADDR
// sRemote := false ;
19350: LD_ADDR_EXP 84
19354: PUSH
19355: LD_INT 0
19357: ST_TO_ADDR
// sPowell := false ;
19358: LD_ADDR_EXP 85
19362: PUSH
19363: LD_INT 0
19365: ST_TO_ADDR
// sTeleport := false ;
19366: LD_ADDR_EXP 88
19370: PUSH
19371: LD_INT 0
19373: ST_TO_ADDR
// sOilTower := false ;
19374: LD_ADDR_EXP 90
19378: PUSH
19379: LD_INT 0
19381: ST_TO_ADDR
// sShovel := false ;
19382: LD_ADDR_EXP 91
19386: PUSH
19387: LD_INT 0
19389: ST_TO_ADDR
// sSheik := false ;
19390: LD_ADDR_EXP 92
19394: PUSH
19395: LD_INT 0
19397: ST_TO_ADDR
// sEarthquake := false ;
19398: LD_ADDR_EXP 94
19402: PUSH
19403: LD_INT 0
19405: ST_TO_ADDR
// sAI := false ;
19406: LD_ADDR_EXP 95
19410: PUSH
19411: LD_INT 0
19413: ST_TO_ADDR
// sCargo := false ;
19414: LD_ADDR_EXP 98
19418: PUSH
19419: LD_INT 0
19421: ST_TO_ADDR
// sDLaser := false ;
19422: LD_ADDR_EXP 99
19426: PUSH
19427: LD_INT 0
19429: ST_TO_ADDR
// sExchange := false ;
19430: LD_ADDR_EXP 100
19434: PUSH
19435: LD_INT 0
19437: ST_TO_ADDR
// sFac := false ;
19438: LD_ADDR_EXP 101
19442: PUSH
19443: LD_INT 0
19445: ST_TO_ADDR
// sPower := false ;
19446: LD_ADDR_EXP 102
19450: PUSH
19451: LD_INT 0
19453: ST_TO_ADDR
// sRandom := false ;
19454: LD_ADDR_EXP 103
19458: PUSH
19459: LD_INT 0
19461: ST_TO_ADDR
// sShield := false ;
19462: LD_ADDR_EXP 104
19466: PUSH
19467: LD_INT 0
19469: ST_TO_ADDR
// sTime := false ;
19470: LD_ADDR_EXP 105
19474: PUSH
19475: LD_INT 0
19477: ST_TO_ADDR
// sTools := false ;
19478: LD_ADDR_EXP 106
19482: PUSH
19483: LD_INT 0
19485: ST_TO_ADDR
// sSold := false ;
19486: LD_ADDR_EXP 71
19490: PUSH
19491: LD_INT 0
19493: ST_TO_ADDR
// sDiff := false ;
19494: LD_ADDR_EXP 72
19498: PUSH
19499: LD_INT 0
19501: ST_TO_ADDR
// sFog := false ;
19502: LD_ADDR_EXP 75
19506: PUSH
19507: LD_INT 0
19509: ST_TO_ADDR
// sReset := false ;
19510: LD_ADDR_EXP 76
19514: PUSH
19515: LD_INT 0
19517: ST_TO_ADDR
// sSun := false ;
19518: LD_ADDR_EXP 77
19522: PUSH
19523: LD_INT 0
19525: ST_TO_ADDR
// sTiger := false ;
19526: LD_ADDR_EXP 73
19530: PUSH
19531: LD_INT 0
19533: ST_TO_ADDR
// sBomb := false ;
19534: LD_ADDR_EXP 74
19538: PUSH
19539: LD_INT 0
19541: ST_TO_ADDR
// sWound := false ;
19542: LD_ADDR_EXP 82
19546: PUSH
19547: LD_INT 0
19549: ST_TO_ADDR
// sBetray := false ;
19550: LD_ADDR_EXP 86
19554: PUSH
19555: LD_INT 0
19557: ST_TO_ADDR
// sContamin := false ;
19558: LD_ADDR_EXP 87
19562: PUSH
19563: LD_INT 0
19565: ST_TO_ADDR
// sOil := false ;
19566: LD_ADDR_EXP 89
19570: PUSH
19571: LD_INT 0
19573: ST_TO_ADDR
// sStu := false ;
19574: LD_ADDR_EXP 93
19578: PUSH
19579: LD_INT 0
19581: ST_TO_ADDR
// sBazooka := false ;
19582: LD_ADDR_EXP 96
19586: PUSH
19587: LD_INT 0
19589: ST_TO_ADDR
// sMortar := false ;
19590: LD_ADDR_EXP 97
19594: PUSH
19595: LD_INT 0
19597: ST_TO_ADDR
// sRanger := false ;
19598: LD_ADDR_EXP 107
19602: PUSH
19603: LD_INT 0
19605: ST_TO_ADDR
// sComputer := false ;
19606: LD_ADDR_EXP 108
19610: PUSH
19611: LD_INT 0
19613: ST_TO_ADDR
// s30 := false ;
19614: LD_ADDR_EXP 109
19618: PUSH
19619: LD_INT 0
19621: ST_TO_ADDR
// s60 := false ;
19622: LD_ADDR_EXP 110
19626: PUSH
19627: LD_INT 0
19629: ST_TO_ADDR
// end ;
19630: LD_VAR 0 1
19634: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
19635: LD_INT 0
19637: PPUSH
19638: PPUSH
19639: PPUSH
19640: PPUSH
19641: PPUSH
19642: PPUSH
19643: PPUSH
// result := [ ] ;
19644: LD_ADDR_VAR 0 2
19648: PUSH
19649: EMPTY
19650: ST_TO_ADDR
// if campaign_id = 1 then
19651: LD_OWVAR 69
19655: PUSH
19656: LD_INT 1
19658: EQUAL
19659: IFFALSE 22825
// begin case mission_number of 1 :
19661: LD_OWVAR 70
19665: PUSH
19666: LD_INT 1
19668: DOUBLE
19669: EQUAL
19670: IFTRUE 19674
19672: GO 19750
19674: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
19675: LD_ADDR_VAR 0 2
19679: PUSH
19680: LD_INT 2
19682: PUSH
19683: LD_INT 4
19685: PUSH
19686: LD_INT 11
19688: PUSH
19689: LD_INT 12
19691: PUSH
19692: LD_INT 15
19694: PUSH
19695: LD_INT 16
19697: PUSH
19698: LD_INT 22
19700: PUSH
19701: LD_INT 23
19703: PUSH
19704: LD_INT 26
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 101
19720: PUSH
19721: LD_INT 102
19723: PUSH
19724: LD_INT 106
19726: PUSH
19727: LD_INT 116
19729: PUSH
19730: LD_INT 117
19732: PUSH
19733: LD_INT 118
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: ST_TO_ADDR
19748: GO 22823
19750: LD_INT 2
19752: DOUBLE
19753: EQUAL
19754: IFTRUE 19758
19756: GO 19842
19758: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
19759: LD_ADDR_VAR 0 2
19763: PUSH
19764: LD_INT 2
19766: PUSH
19767: LD_INT 4
19769: PUSH
19770: LD_INT 11
19772: PUSH
19773: LD_INT 12
19775: PUSH
19776: LD_INT 15
19778: PUSH
19779: LD_INT 16
19781: PUSH
19782: LD_INT 22
19784: PUSH
19785: LD_INT 23
19787: PUSH
19788: LD_INT 26
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: PUSH
19802: LD_INT 101
19804: PUSH
19805: LD_INT 102
19807: PUSH
19808: LD_INT 105
19810: PUSH
19811: LD_INT 106
19813: PUSH
19814: LD_INT 108
19816: PUSH
19817: LD_INT 116
19819: PUSH
19820: LD_INT 117
19822: PUSH
19823: LD_INT 118
19825: PUSH
19826: EMPTY
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: PUSH
19836: EMPTY
19837: LIST
19838: LIST
19839: ST_TO_ADDR
19840: GO 22823
19842: LD_INT 3
19844: DOUBLE
19845: EQUAL
19846: IFTRUE 19850
19848: GO 19938
19850: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
19851: LD_ADDR_VAR 0 2
19855: PUSH
19856: LD_INT 2
19858: PUSH
19859: LD_INT 4
19861: PUSH
19862: LD_INT 5
19864: PUSH
19865: LD_INT 11
19867: PUSH
19868: LD_INT 12
19870: PUSH
19871: LD_INT 15
19873: PUSH
19874: LD_INT 16
19876: PUSH
19877: LD_INT 22
19879: PUSH
19880: LD_INT 26
19882: PUSH
19883: LD_INT 36
19885: PUSH
19886: EMPTY
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: PUSH
19898: LD_INT 101
19900: PUSH
19901: LD_INT 102
19903: PUSH
19904: LD_INT 105
19906: PUSH
19907: LD_INT 106
19909: PUSH
19910: LD_INT 108
19912: PUSH
19913: LD_INT 116
19915: PUSH
19916: LD_INT 117
19918: PUSH
19919: LD_INT 118
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: ST_TO_ADDR
19936: GO 22823
19938: LD_INT 4
19940: DOUBLE
19941: EQUAL
19942: IFTRUE 19946
19944: GO 20042
19946: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
19947: LD_ADDR_VAR 0 2
19951: PUSH
19952: LD_INT 2
19954: PUSH
19955: LD_INT 4
19957: PUSH
19958: LD_INT 5
19960: PUSH
19961: LD_INT 8
19963: PUSH
19964: LD_INT 11
19966: PUSH
19967: LD_INT 12
19969: PUSH
19970: LD_INT 15
19972: PUSH
19973: LD_INT 16
19975: PUSH
19976: LD_INT 22
19978: PUSH
19979: LD_INT 23
19981: PUSH
19982: LD_INT 26
19984: PUSH
19985: LD_INT 36
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: PUSH
20002: LD_INT 101
20004: PUSH
20005: LD_INT 102
20007: PUSH
20008: LD_INT 105
20010: PUSH
20011: LD_INT 106
20013: PUSH
20014: LD_INT 108
20016: PUSH
20017: LD_INT 116
20019: PUSH
20020: LD_INT 117
20022: PUSH
20023: LD_INT 118
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: ST_TO_ADDR
20040: GO 22823
20042: LD_INT 5
20044: DOUBLE
20045: EQUAL
20046: IFTRUE 20050
20048: GO 20162
20050: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
20051: LD_ADDR_VAR 0 2
20055: PUSH
20056: LD_INT 2
20058: PUSH
20059: LD_INT 4
20061: PUSH
20062: LD_INT 5
20064: PUSH
20065: LD_INT 6
20067: PUSH
20068: LD_INT 8
20070: PUSH
20071: LD_INT 11
20073: PUSH
20074: LD_INT 12
20076: PUSH
20077: LD_INT 15
20079: PUSH
20080: LD_INT 16
20082: PUSH
20083: LD_INT 22
20085: PUSH
20086: LD_INT 23
20088: PUSH
20089: LD_INT 25
20091: PUSH
20092: LD_INT 26
20094: PUSH
20095: LD_INT 36
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: PUSH
20114: LD_INT 101
20116: PUSH
20117: LD_INT 102
20119: PUSH
20120: LD_INT 105
20122: PUSH
20123: LD_INT 106
20125: PUSH
20126: LD_INT 108
20128: PUSH
20129: LD_INT 109
20131: PUSH
20132: LD_INT 112
20134: PUSH
20135: LD_INT 116
20137: PUSH
20138: LD_INT 117
20140: PUSH
20141: LD_INT 118
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: ST_TO_ADDR
20160: GO 22823
20162: LD_INT 6
20164: DOUBLE
20165: EQUAL
20166: IFTRUE 20170
20168: GO 20302
20170: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
20171: LD_ADDR_VAR 0 2
20175: PUSH
20176: LD_INT 2
20178: PUSH
20179: LD_INT 4
20181: PUSH
20182: LD_INT 5
20184: PUSH
20185: LD_INT 6
20187: PUSH
20188: LD_INT 8
20190: PUSH
20191: LD_INT 11
20193: PUSH
20194: LD_INT 12
20196: PUSH
20197: LD_INT 15
20199: PUSH
20200: LD_INT 16
20202: PUSH
20203: LD_INT 20
20205: PUSH
20206: LD_INT 21
20208: PUSH
20209: LD_INT 22
20211: PUSH
20212: LD_INT 23
20214: PUSH
20215: LD_INT 25
20217: PUSH
20218: LD_INT 26
20220: PUSH
20221: LD_INT 30
20223: PUSH
20224: LD_INT 31
20226: PUSH
20227: LD_INT 32
20229: PUSH
20230: LD_INT 36
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: PUSH
20254: LD_INT 101
20256: PUSH
20257: LD_INT 102
20259: PUSH
20260: LD_INT 105
20262: PUSH
20263: LD_INT 106
20265: PUSH
20266: LD_INT 108
20268: PUSH
20269: LD_INT 109
20271: PUSH
20272: LD_INT 112
20274: PUSH
20275: LD_INT 116
20277: PUSH
20278: LD_INT 117
20280: PUSH
20281: LD_INT 118
20283: PUSH
20284: EMPTY
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: ST_TO_ADDR
20300: GO 22823
20302: LD_INT 7
20304: DOUBLE
20305: EQUAL
20306: IFTRUE 20310
20308: GO 20422
20310: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
20311: LD_ADDR_VAR 0 2
20315: PUSH
20316: LD_INT 2
20318: PUSH
20319: LD_INT 4
20321: PUSH
20322: LD_INT 5
20324: PUSH
20325: LD_INT 7
20327: PUSH
20328: LD_INT 11
20330: PUSH
20331: LD_INT 12
20333: PUSH
20334: LD_INT 15
20336: PUSH
20337: LD_INT 16
20339: PUSH
20340: LD_INT 20
20342: PUSH
20343: LD_INT 21
20345: PUSH
20346: LD_INT 22
20348: PUSH
20349: LD_INT 23
20351: PUSH
20352: LD_INT 25
20354: PUSH
20355: LD_INT 26
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: PUSH
20374: LD_INT 101
20376: PUSH
20377: LD_INT 102
20379: PUSH
20380: LD_INT 103
20382: PUSH
20383: LD_INT 105
20385: PUSH
20386: LD_INT 106
20388: PUSH
20389: LD_INT 108
20391: PUSH
20392: LD_INT 112
20394: PUSH
20395: LD_INT 116
20397: PUSH
20398: LD_INT 117
20400: PUSH
20401: LD_INT 118
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: ST_TO_ADDR
20420: GO 22823
20422: LD_INT 8
20424: DOUBLE
20425: EQUAL
20426: IFTRUE 20430
20428: GO 20570
20430: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
20431: LD_ADDR_VAR 0 2
20435: PUSH
20436: LD_INT 2
20438: PUSH
20439: LD_INT 4
20441: PUSH
20442: LD_INT 5
20444: PUSH
20445: LD_INT 6
20447: PUSH
20448: LD_INT 7
20450: PUSH
20451: LD_INT 8
20453: PUSH
20454: LD_INT 11
20456: PUSH
20457: LD_INT 12
20459: PUSH
20460: LD_INT 15
20462: PUSH
20463: LD_INT 16
20465: PUSH
20466: LD_INT 20
20468: PUSH
20469: LD_INT 21
20471: PUSH
20472: LD_INT 22
20474: PUSH
20475: LD_INT 23
20477: PUSH
20478: LD_INT 25
20480: PUSH
20481: LD_INT 26
20483: PUSH
20484: LD_INT 30
20486: PUSH
20487: LD_INT 31
20489: PUSH
20490: LD_INT 32
20492: PUSH
20493: LD_INT 36
20495: PUSH
20496: EMPTY
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: PUSH
20518: LD_INT 101
20520: PUSH
20521: LD_INT 102
20523: PUSH
20524: LD_INT 103
20526: PUSH
20527: LD_INT 105
20529: PUSH
20530: LD_INT 106
20532: PUSH
20533: LD_INT 108
20535: PUSH
20536: LD_INT 109
20538: PUSH
20539: LD_INT 112
20541: PUSH
20542: LD_INT 116
20544: PUSH
20545: LD_INT 117
20547: PUSH
20548: LD_INT 118
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: ST_TO_ADDR
20568: GO 22823
20570: LD_INT 9
20572: DOUBLE
20573: EQUAL
20574: IFTRUE 20578
20576: GO 20726
20578: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
20579: LD_ADDR_VAR 0 2
20583: PUSH
20584: LD_INT 2
20586: PUSH
20587: LD_INT 4
20589: PUSH
20590: LD_INT 5
20592: PUSH
20593: LD_INT 6
20595: PUSH
20596: LD_INT 7
20598: PUSH
20599: LD_INT 8
20601: PUSH
20602: LD_INT 11
20604: PUSH
20605: LD_INT 12
20607: PUSH
20608: LD_INT 15
20610: PUSH
20611: LD_INT 16
20613: PUSH
20614: LD_INT 20
20616: PUSH
20617: LD_INT 21
20619: PUSH
20620: LD_INT 22
20622: PUSH
20623: LD_INT 23
20625: PUSH
20626: LD_INT 25
20628: PUSH
20629: LD_INT 26
20631: PUSH
20632: LD_INT 28
20634: PUSH
20635: LD_INT 30
20637: PUSH
20638: LD_INT 31
20640: PUSH
20641: LD_INT 32
20643: PUSH
20644: LD_INT 36
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: PUSH
20670: LD_INT 101
20672: PUSH
20673: LD_INT 102
20675: PUSH
20676: LD_INT 103
20678: PUSH
20679: LD_INT 105
20681: PUSH
20682: LD_INT 106
20684: PUSH
20685: LD_INT 108
20687: PUSH
20688: LD_INT 109
20690: PUSH
20691: LD_INT 112
20693: PUSH
20694: LD_INT 114
20696: PUSH
20697: LD_INT 116
20699: PUSH
20700: LD_INT 117
20702: PUSH
20703: LD_INT 118
20705: PUSH
20706: EMPTY
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: ST_TO_ADDR
20724: GO 22823
20726: LD_INT 10
20728: DOUBLE
20729: EQUAL
20730: IFTRUE 20734
20732: GO 20930
20734: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
20735: LD_ADDR_VAR 0 2
20739: PUSH
20740: LD_INT 2
20742: PUSH
20743: LD_INT 4
20745: PUSH
20746: LD_INT 5
20748: PUSH
20749: LD_INT 6
20751: PUSH
20752: LD_INT 7
20754: PUSH
20755: LD_INT 8
20757: PUSH
20758: LD_INT 9
20760: PUSH
20761: LD_INT 10
20763: PUSH
20764: LD_INT 11
20766: PUSH
20767: LD_INT 12
20769: PUSH
20770: LD_INT 13
20772: PUSH
20773: LD_INT 14
20775: PUSH
20776: LD_INT 15
20778: PUSH
20779: LD_INT 16
20781: PUSH
20782: LD_INT 17
20784: PUSH
20785: LD_INT 18
20787: PUSH
20788: LD_INT 19
20790: PUSH
20791: LD_INT 20
20793: PUSH
20794: LD_INT 21
20796: PUSH
20797: LD_INT 22
20799: PUSH
20800: LD_INT 23
20802: PUSH
20803: LD_INT 24
20805: PUSH
20806: LD_INT 25
20808: PUSH
20809: LD_INT 26
20811: PUSH
20812: LD_INT 28
20814: PUSH
20815: LD_INT 30
20817: PUSH
20818: LD_INT 31
20820: PUSH
20821: LD_INT 32
20823: PUSH
20824: LD_INT 36
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: PUSH
20858: LD_INT 101
20860: PUSH
20861: LD_INT 102
20863: PUSH
20864: LD_INT 103
20866: PUSH
20867: LD_INT 104
20869: PUSH
20870: LD_INT 105
20872: PUSH
20873: LD_INT 106
20875: PUSH
20876: LD_INT 107
20878: PUSH
20879: LD_INT 108
20881: PUSH
20882: LD_INT 109
20884: PUSH
20885: LD_INT 110
20887: PUSH
20888: LD_INT 111
20890: PUSH
20891: LD_INT 112
20893: PUSH
20894: LD_INT 114
20896: PUSH
20897: LD_INT 116
20899: PUSH
20900: LD_INT 117
20902: PUSH
20903: LD_INT 118
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: ST_TO_ADDR
20928: GO 22823
20930: LD_INT 11
20932: DOUBLE
20933: EQUAL
20934: IFTRUE 20938
20936: GO 21142
20938: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
20939: LD_ADDR_VAR 0 2
20943: PUSH
20944: LD_INT 2
20946: PUSH
20947: LD_INT 3
20949: PUSH
20950: LD_INT 4
20952: PUSH
20953: LD_INT 5
20955: PUSH
20956: LD_INT 6
20958: PUSH
20959: LD_INT 7
20961: PUSH
20962: LD_INT 8
20964: PUSH
20965: LD_INT 9
20967: PUSH
20968: LD_INT 10
20970: PUSH
20971: LD_INT 11
20973: PUSH
20974: LD_INT 12
20976: PUSH
20977: LD_INT 13
20979: PUSH
20980: LD_INT 14
20982: PUSH
20983: LD_INT 15
20985: PUSH
20986: LD_INT 16
20988: PUSH
20989: LD_INT 17
20991: PUSH
20992: LD_INT 18
20994: PUSH
20995: LD_INT 19
20997: PUSH
20998: LD_INT 20
21000: PUSH
21001: LD_INT 21
21003: PUSH
21004: LD_INT 22
21006: PUSH
21007: LD_INT 23
21009: PUSH
21010: LD_INT 24
21012: PUSH
21013: LD_INT 25
21015: PUSH
21016: LD_INT 26
21018: PUSH
21019: LD_INT 28
21021: PUSH
21022: LD_INT 30
21024: PUSH
21025: LD_INT 31
21027: PUSH
21028: LD_INT 32
21030: PUSH
21031: LD_INT 34
21033: PUSH
21034: LD_INT 36
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: LIST
21066: LIST
21067: LIST
21068: LIST
21069: PUSH
21070: LD_INT 101
21072: PUSH
21073: LD_INT 102
21075: PUSH
21076: LD_INT 103
21078: PUSH
21079: LD_INT 104
21081: PUSH
21082: LD_INT 105
21084: PUSH
21085: LD_INT 106
21087: PUSH
21088: LD_INT 107
21090: PUSH
21091: LD_INT 108
21093: PUSH
21094: LD_INT 109
21096: PUSH
21097: LD_INT 110
21099: PUSH
21100: LD_INT 111
21102: PUSH
21103: LD_INT 112
21105: PUSH
21106: LD_INT 114
21108: PUSH
21109: LD_INT 116
21111: PUSH
21112: LD_INT 117
21114: PUSH
21115: LD_INT 118
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: ST_TO_ADDR
21140: GO 22823
21142: LD_INT 12
21144: DOUBLE
21145: EQUAL
21146: IFTRUE 21150
21148: GO 21370
21150: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
21151: LD_ADDR_VAR 0 2
21155: PUSH
21156: LD_INT 1
21158: PUSH
21159: LD_INT 2
21161: PUSH
21162: LD_INT 3
21164: PUSH
21165: LD_INT 4
21167: PUSH
21168: LD_INT 5
21170: PUSH
21171: LD_INT 6
21173: PUSH
21174: LD_INT 7
21176: PUSH
21177: LD_INT 8
21179: PUSH
21180: LD_INT 9
21182: PUSH
21183: LD_INT 10
21185: PUSH
21186: LD_INT 11
21188: PUSH
21189: LD_INT 12
21191: PUSH
21192: LD_INT 13
21194: PUSH
21195: LD_INT 14
21197: PUSH
21198: LD_INT 15
21200: PUSH
21201: LD_INT 16
21203: PUSH
21204: LD_INT 17
21206: PUSH
21207: LD_INT 18
21209: PUSH
21210: LD_INT 19
21212: PUSH
21213: LD_INT 20
21215: PUSH
21216: LD_INT 21
21218: PUSH
21219: LD_INT 22
21221: PUSH
21222: LD_INT 23
21224: PUSH
21225: LD_INT 24
21227: PUSH
21228: LD_INT 25
21230: PUSH
21231: LD_INT 26
21233: PUSH
21234: LD_INT 27
21236: PUSH
21237: LD_INT 28
21239: PUSH
21240: LD_INT 30
21242: PUSH
21243: LD_INT 31
21245: PUSH
21246: LD_INT 32
21248: PUSH
21249: LD_INT 33
21251: PUSH
21252: LD_INT 34
21254: PUSH
21255: LD_INT 36
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: PUSH
21294: LD_INT 101
21296: PUSH
21297: LD_INT 102
21299: PUSH
21300: LD_INT 103
21302: PUSH
21303: LD_INT 104
21305: PUSH
21306: LD_INT 105
21308: PUSH
21309: LD_INT 106
21311: PUSH
21312: LD_INT 107
21314: PUSH
21315: LD_INT 108
21317: PUSH
21318: LD_INT 109
21320: PUSH
21321: LD_INT 110
21323: PUSH
21324: LD_INT 111
21326: PUSH
21327: LD_INT 112
21329: PUSH
21330: LD_INT 113
21332: PUSH
21333: LD_INT 114
21335: PUSH
21336: LD_INT 116
21338: PUSH
21339: LD_INT 117
21341: PUSH
21342: LD_INT 118
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: ST_TO_ADDR
21368: GO 22823
21370: LD_INT 13
21372: DOUBLE
21373: EQUAL
21374: IFTRUE 21378
21376: GO 21586
21378: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
21379: LD_ADDR_VAR 0 2
21383: PUSH
21384: LD_INT 1
21386: PUSH
21387: LD_INT 2
21389: PUSH
21390: LD_INT 3
21392: PUSH
21393: LD_INT 4
21395: PUSH
21396: LD_INT 5
21398: PUSH
21399: LD_INT 8
21401: PUSH
21402: LD_INT 9
21404: PUSH
21405: LD_INT 10
21407: PUSH
21408: LD_INT 11
21410: PUSH
21411: LD_INT 12
21413: PUSH
21414: LD_INT 14
21416: PUSH
21417: LD_INT 15
21419: PUSH
21420: LD_INT 16
21422: PUSH
21423: LD_INT 17
21425: PUSH
21426: LD_INT 18
21428: PUSH
21429: LD_INT 19
21431: PUSH
21432: LD_INT 20
21434: PUSH
21435: LD_INT 21
21437: PUSH
21438: LD_INT 22
21440: PUSH
21441: LD_INT 23
21443: PUSH
21444: LD_INT 24
21446: PUSH
21447: LD_INT 25
21449: PUSH
21450: LD_INT 26
21452: PUSH
21453: LD_INT 27
21455: PUSH
21456: LD_INT 28
21458: PUSH
21459: LD_INT 30
21461: PUSH
21462: LD_INT 31
21464: PUSH
21465: LD_INT 32
21467: PUSH
21468: LD_INT 33
21470: PUSH
21471: LD_INT 34
21473: PUSH
21474: LD_INT 36
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: PUSH
21510: LD_INT 101
21512: PUSH
21513: LD_INT 102
21515: PUSH
21516: LD_INT 103
21518: PUSH
21519: LD_INT 104
21521: PUSH
21522: LD_INT 105
21524: PUSH
21525: LD_INT 106
21527: PUSH
21528: LD_INT 107
21530: PUSH
21531: LD_INT 108
21533: PUSH
21534: LD_INT 109
21536: PUSH
21537: LD_INT 110
21539: PUSH
21540: LD_INT 111
21542: PUSH
21543: LD_INT 112
21545: PUSH
21546: LD_INT 113
21548: PUSH
21549: LD_INT 114
21551: PUSH
21552: LD_INT 116
21554: PUSH
21555: LD_INT 117
21557: PUSH
21558: LD_INT 118
21560: PUSH
21561: EMPTY
21562: LIST
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: ST_TO_ADDR
21584: GO 22823
21586: LD_INT 14
21588: DOUBLE
21589: EQUAL
21590: IFTRUE 21594
21592: GO 21818
21594: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
21595: LD_ADDR_VAR 0 2
21599: PUSH
21600: LD_INT 1
21602: PUSH
21603: LD_INT 2
21605: PUSH
21606: LD_INT 3
21608: PUSH
21609: LD_INT 4
21611: PUSH
21612: LD_INT 5
21614: PUSH
21615: LD_INT 6
21617: PUSH
21618: LD_INT 7
21620: PUSH
21621: LD_INT 8
21623: PUSH
21624: LD_INT 9
21626: PUSH
21627: LD_INT 10
21629: PUSH
21630: LD_INT 11
21632: PUSH
21633: LD_INT 12
21635: PUSH
21636: LD_INT 13
21638: PUSH
21639: LD_INT 14
21641: PUSH
21642: LD_INT 15
21644: PUSH
21645: LD_INT 16
21647: PUSH
21648: LD_INT 17
21650: PUSH
21651: LD_INT 18
21653: PUSH
21654: LD_INT 19
21656: PUSH
21657: LD_INT 20
21659: PUSH
21660: LD_INT 21
21662: PUSH
21663: LD_INT 22
21665: PUSH
21666: LD_INT 23
21668: PUSH
21669: LD_INT 24
21671: PUSH
21672: LD_INT 25
21674: PUSH
21675: LD_INT 26
21677: PUSH
21678: LD_INT 27
21680: PUSH
21681: LD_INT 28
21683: PUSH
21684: LD_INT 29
21686: PUSH
21687: LD_INT 30
21689: PUSH
21690: LD_INT 31
21692: PUSH
21693: LD_INT 32
21695: PUSH
21696: LD_INT 33
21698: PUSH
21699: LD_INT 34
21701: PUSH
21702: LD_INT 36
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: PUSH
21742: LD_INT 101
21744: PUSH
21745: LD_INT 102
21747: PUSH
21748: LD_INT 103
21750: PUSH
21751: LD_INT 104
21753: PUSH
21754: LD_INT 105
21756: PUSH
21757: LD_INT 106
21759: PUSH
21760: LD_INT 107
21762: PUSH
21763: LD_INT 108
21765: PUSH
21766: LD_INT 109
21768: PUSH
21769: LD_INT 110
21771: PUSH
21772: LD_INT 111
21774: PUSH
21775: LD_INT 112
21777: PUSH
21778: LD_INT 113
21780: PUSH
21781: LD_INT 114
21783: PUSH
21784: LD_INT 116
21786: PUSH
21787: LD_INT 117
21789: PUSH
21790: LD_INT 118
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: ST_TO_ADDR
21816: GO 22823
21818: LD_INT 15
21820: DOUBLE
21821: EQUAL
21822: IFTRUE 21826
21824: GO 22050
21826: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
21827: LD_ADDR_VAR 0 2
21831: PUSH
21832: LD_INT 1
21834: PUSH
21835: LD_INT 2
21837: PUSH
21838: LD_INT 3
21840: PUSH
21841: LD_INT 4
21843: PUSH
21844: LD_INT 5
21846: PUSH
21847: LD_INT 6
21849: PUSH
21850: LD_INT 7
21852: PUSH
21853: LD_INT 8
21855: PUSH
21856: LD_INT 9
21858: PUSH
21859: LD_INT 10
21861: PUSH
21862: LD_INT 11
21864: PUSH
21865: LD_INT 12
21867: PUSH
21868: LD_INT 13
21870: PUSH
21871: LD_INT 14
21873: PUSH
21874: LD_INT 15
21876: PUSH
21877: LD_INT 16
21879: PUSH
21880: LD_INT 17
21882: PUSH
21883: LD_INT 18
21885: PUSH
21886: LD_INT 19
21888: PUSH
21889: LD_INT 20
21891: PUSH
21892: LD_INT 21
21894: PUSH
21895: LD_INT 22
21897: PUSH
21898: LD_INT 23
21900: PUSH
21901: LD_INT 24
21903: PUSH
21904: LD_INT 25
21906: PUSH
21907: LD_INT 26
21909: PUSH
21910: LD_INT 27
21912: PUSH
21913: LD_INT 28
21915: PUSH
21916: LD_INT 29
21918: PUSH
21919: LD_INT 30
21921: PUSH
21922: LD_INT 31
21924: PUSH
21925: LD_INT 32
21927: PUSH
21928: LD_INT 33
21930: PUSH
21931: LD_INT 34
21933: PUSH
21934: LD_INT 36
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: PUSH
21974: LD_INT 101
21976: PUSH
21977: LD_INT 102
21979: PUSH
21980: LD_INT 103
21982: PUSH
21983: LD_INT 104
21985: PUSH
21986: LD_INT 105
21988: PUSH
21989: LD_INT 106
21991: PUSH
21992: LD_INT 107
21994: PUSH
21995: LD_INT 108
21997: PUSH
21998: LD_INT 109
22000: PUSH
22001: LD_INT 110
22003: PUSH
22004: LD_INT 111
22006: PUSH
22007: LD_INT 112
22009: PUSH
22010: LD_INT 113
22012: PUSH
22013: LD_INT 114
22015: PUSH
22016: LD_INT 116
22018: PUSH
22019: LD_INT 117
22021: PUSH
22022: LD_INT 118
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: ST_TO_ADDR
22048: GO 22823
22050: LD_INT 16
22052: DOUBLE
22053: EQUAL
22054: IFTRUE 22058
22056: GO 22194
22058: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
22059: LD_ADDR_VAR 0 2
22063: PUSH
22064: LD_INT 2
22066: PUSH
22067: LD_INT 4
22069: PUSH
22070: LD_INT 5
22072: PUSH
22073: LD_INT 7
22075: PUSH
22076: LD_INT 11
22078: PUSH
22079: LD_INT 12
22081: PUSH
22082: LD_INT 15
22084: PUSH
22085: LD_INT 16
22087: PUSH
22088: LD_INT 20
22090: PUSH
22091: LD_INT 21
22093: PUSH
22094: LD_INT 22
22096: PUSH
22097: LD_INT 23
22099: PUSH
22100: LD_INT 25
22102: PUSH
22103: LD_INT 26
22105: PUSH
22106: LD_INT 30
22108: PUSH
22109: LD_INT 31
22111: PUSH
22112: LD_INT 32
22114: PUSH
22115: LD_INT 33
22117: PUSH
22118: LD_INT 34
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: PUSH
22142: LD_INT 101
22144: PUSH
22145: LD_INT 102
22147: PUSH
22148: LD_INT 103
22150: PUSH
22151: LD_INT 106
22153: PUSH
22154: LD_INT 108
22156: PUSH
22157: LD_INT 112
22159: PUSH
22160: LD_INT 113
22162: PUSH
22163: LD_INT 114
22165: PUSH
22166: LD_INT 116
22168: PUSH
22169: LD_INT 117
22171: PUSH
22172: LD_INT 118
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: ST_TO_ADDR
22192: GO 22823
22194: LD_INT 17
22196: DOUBLE
22197: EQUAL
22198: IFTRUE 22202
22200: GO 22426
22202: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
22203: LD_ADDR_VAR 0 2
22207: PUSH
22208: LD_INT 1
22210: PUSH
22211: LD_INT 2
22213: PUSH
22214: LD_INT 3
22216: PUSH
22217: LD_INT 4
22219: PUSH
22220: LD_INT 5
22222: PUSH
22223: LD_INT 6
22225: PUSH
22226: LD_INT 7
22228: PUSH
22229: LD_INT 8
22231: PUSH
22232: LD_INT 9
22234: PUSH
22235: LD_INT 10
22237: PUSH
22238: LD_INT 11
22240: PUSH
22241: LD_INT 12
22243: PUSH
22244: LD_INT 13
22246: PUSH
22247: LD_INT 14
22249: PUSH
22250: LD_INT 15
22252: PUSH
22253: LD_INT 16
22255: PUSH
22256: LD_INT 17
22258: PUSH
22259: LD_INT 18
22261: PUSH
22262: LD_INT 19
22264: PUSH
22265: LD_INT 20
22267: PUSH
22268: LD_INT 21
22270: PUSH
22271: LD_INT 22
22273: PUSH
22274: LD_INT 23
22276: PUSH
22277: LD_INT 24
22279: PUSH
22280: LD_INT 25
22282: PUSH
22283: LD_INT 26
22285: PUSH
22286: LD_INT 27
22288: PUSH
22289: LD_INT 28
22291: PUSH
22292: LD_INT 29
22294: PUSH
22295: LD_INT 30
22297: PUSH
22298: LD_INT 31
22300: PUSH
22301: LD_INT 32
22303: PUSH
22304: LD_INT 33
22306: PUSH
22307: LD_INT 34
22309: PUSH
22310: LD_INT 36
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: PUSH
22350: LD_INT 101
22352: PUSH
22353: LD_INT 102
22355: PUSH
22356: LD_INT 103
22358: PUSH
22359: LD_INT 104
22361: PUSH
22362: LD_INT 105
22364: PUSH
22365: LD_INT 106
22367: PUSH
22368: LD_INT 107
22370: PUSH
22371: LD_INT 108
22373: PUSH
22374: LD_INT 109
22376: PUSH
22377: LD_INT 110
22379: PUSH
22380: LD_INT 111
22382: PUSH
22383: LD_INT 112
22385: PUSH
22386: LD_INT 113
22388: PUSH
22389: LD_INT 114
22391: PUSH
22392: LD_INT 116
22394: PUSH
22395: LD_INT 117
22397: PUSH
22398: LD_INT 118
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: PUSH
22420: EMPTY
22421: LIST
22422: LIST
22423: ST_TO_ADDR
22424: GO 22823
22426: LD_INT 18
22428: DOUBLE
22429: EQUAL
22430: IFTRUE 22434
22432: GO 22582
22434: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
22435: LD_ADDR_VAR 0 2
22439: PUSH
22440: LD_INT 2
22442: PUSH
22443: LD_INT 4
22445: PUSH
22446: LD_INT 5
22448: PUSH
22449: LD_INT 7
22451: PUSH
22452: LD_INT 11
22454: PUSH
22455: LD_INT 12
22457: PUSH
22458: LD_INT 15
22460: PUSH
22461: LD_INT 16
22463: PUSH
22464: LD_INT 20
22466: PUSH
22467: LD_INT 21
22469: PUSH
22470: LD_INT 22
22472: PUSH
22473: LD_INT 23
22475: PUSH
22476: LD_INT 25
22478: PUSH
22479: LD_INT 26
22481: PUSH
22482: LD_INT 30
22484: PUSH
22485: LD_INT 31
22487: PUSH
22488: LD_INT 32
22490: PUSH
22491: LD_INT 33
22493: PUSH
22494: LD_INT 34
22496: PUSH
22497: LD_INT 35
22499: PUSH
22500: LD_INT 36
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: PUSH
22526: LD_INT 101
22528: PUSH
22529: LD_INT 102
22531: PUSH
22532: LD_INT 103
22534: PUSH
22535: LD_INT 106
22537: PUSH
22538: LD_INT 108
22540: PUSH
22541: LD_INT 112
22543: PUSH
22544: LD_INT 113
22546: PUSH
22547: LD_INT 114
22549: PUSH
22550: LD_INT 115
22552: PUSH
22553: LD_INT 116
22555: PUSH
22556: LD_INT 117
22558: PUSH
22559: LD_INT 118
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: ST_TO_ADDR
22580: GO 22823
22582: LD_INT 19
22584: DOUBLE
22585: EQUAL
22586: IFTRUE 22590
22588: GO 22822
22590: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
22591: LD_ADDR_VAR 0 2
22595: PUSH
22596: LD_INT 1
22598: PUSH
22599: LD_INT 2
22601: PUSH
22602: LD_INT 3
22604: PUSH
22605: LD_INT 4
22607: PUSH
22608: LD_INT 5
22610: PUSH
22611: LD_INT 6
22613: PUSH
22614: LD_INT 7
22616: PUSH
22617: LD_INT 8
22619: PUSH
22620: LD_INT 9
22622: PUSH
22623: LD_INT 10
22625: PUSH
22626: LD_INT 11
22628: PUSH
22629: LD_INT 12
22631: PUSH
22632: LD_INT 13
22634: PUSH
22635: LD_INT 14
22637: PUSH
22638: LD_INT 15
22640: PUSH
22641: LD_INT 16
22643: PUSH
22644: LD_INT 17
22646: PUSH
22647: LD_INT 18
22649: PUSH
22650: LD_INT 19
22652: PUSH
22653: LD_INT 20
22655: PUSH
22656: LD_INT 21
22658: PUSH
22659: LD_INT 22
22661: PUSH
22662: LD_INT 23
22664: PUSH
22665: LD_INT 24
22667: PUSH
22668: LD_INT 25
22670: PUSH
22671: LD_INT 26
22673: PUSH
22674: LD_INT 27
22676: PUSH
22677: LD_INT 28
22679: PUSH
22680: LD_INT 29
22682: PUSH
22683: LD_INT 30
22685: PUSH
22686: LD_INT 31
22688: PUSH
22689: LD_INT 32
22691: PUSH
22692: LD_INT 33
22694: PUSH
22695: LD_INT 34
22697: PUSH
22698: LD_INT 35
22700: PUSH
22701: LD_INT 36
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: PUSH
22742: LD_INT 101
22744: PUSH
22745: LD_INT 102
22747: PUSH
22748: LD_INT 103
22750: PUSH
22751: LD_INT 104
22753: PUSH
22754: LD_INT 105
22756: PUSH
22757: LD_INT 106
22759: PUSH
22760: LD_INT 107
22762: PUSH
22763: LD_INT 108
22765: PUSH
22766: LD_INT 109
22768: PUSH
22769: LD_INT 110
22771: PUSH
22772: LD_INT 111
22774: PUSH
22775: LD_INT 112
22777: PUSH
22778: LD_INT 113
22780: PUSH
22781: LD_INT 114
22783: PUSH
22784: LD_INT 115
22786: PUSH
22787: LD_INT 116
22789: PUSH
22790: LD_INT 117
22792: PUSH
22793: LD_INT 118
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: ST_TO_ADDR
22820: GO 22823
22822: POP
// end else
22823: GO 23054
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
22825: LD_ADDR_VAR 0 2
22829: PUSH
22830: LD_INT 1
22832: PUSH
22833: LD_INT 2
22835: PUSH
22836: LD_INT 3
22838: PUSH
22839: LD_INT 4
22841: PUSH
22842: LD_INT 5
22844: PUSH
22845: LD_INT 6
22847: PUSH
22848: LD_INT 7
22850: PUSH
22851: LD_INT 8
22853: PUSH
22854: LD_INT 9
22856: PUSH
22857: LD_INT 10
22859: PUSH
22860: LD_INT 11
22862: PUSH
22863: LD_INT 12
22865: PUSH
22866: LD_INT 13
22868: PUSH
22869: LD_INT 14
22871: PUSH
22872: LD_INT 15
22874: PUSH
22875: LD_INT 16
22877: PUSH
22878: LD_INT 17
22880: PUSH
22881: LD_INT 18
22883: PUSH
22884: LD_INT 19
22886: PUSH
22887: LD_INT 20
22889: PUSH
22890: LD_INT 21
22892: PUSH
22893: LD_INT 22
22895: PUSH
22896: LD_INT 23
22898: PUSH
22899: LD_INT 24
22901: PUSH
22902: LD_INT 25
22904: PUSH
22905: LD_INT 26
22907: PUSH
22908: LD_INT 27
22910: PUSH
22911: LD_INT 28
22913: PUSH
22914: LD_INT 29
22916: PUSH
22917: LD_INT 30
22919: PUSH
22920: LD_INT 31
22922: PUSH
22923: LD_INT 32
22925: PUSH
22926: LD_INT 33
22928: PUSH
22929: LD_INT 34
22931: PUSH
22932: LD_INT 35
22934: PUSH
22935: LD_INT 36
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: PUSH
22976: LD_INT 101
22978: PUSH
22979: LD_INT 102
22981: PUSH
22982: LD_INT 103
22984: PUSH
22985: LD_INT 104
22987: PUSH
22988: LD_INT 105
22990: PUSH
22991: LD_INT 106
22993: PUSH
22994: LD_INT 107
22996: PUSH
22997: LD_INT 108
22999: PUSH
23000: LD_INT 109
23002: PUSH
23003: LD_INT 110
23005: PUSH
23006: LD_INT 111
23008: PUSH
23009: LD_INT 112
23011: PUSH
23012: LD_INT 113
23014: PUSH
23015: LD_INT 114
23017: PUSH
23018: LD_INT 115
23020: PUSH
23021: LD_INT 116
23023: PUSH
23024: LD_INT 117
23026: PUSH
23027: LD_INT 118
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: ST_TO_ADDR
// if result then
23054: LD_VAR 0 2
23058: IFFALSE 23844
// begin normal :=  ;
23060: LD_ADDR_VAR 0 5
23064: PUSH
23065: LD_STRING 
23067: ST_TO_ADDR
// hardcore :=  ;
23068: LD_ADDR_VAR 0 6
23072: PUSH
23073: LD_STRING 
23075: ST_TO_ADDR
// active :=  ;
23076: LD_ADDR_VAR 0 7
23080: PUSH
23081: LD_STRING 
23083: ST_TO_ADDR
// for i = 1 to normalCounter do
23084: LD_ADDR_VAR 0 8
23088: PUSH
23089: DOUBLE
23090: LD_INT 1
23092: DEC
23093: ST_TO_ADDR
23094: LD_EXP 55
23098: PUSH
23099: FOR_TO
23100: IFFALSE 23201
// begin tmp := 0 ;
23102: LD_ADDR_VAR 0 3
23106: PUSH
23107: LD_STRING 0
23109: ST_TO_ADDR
// if result [ 1 ] then
23110: LD_VAR 0 2
23114: PUSH
23115: LD_INT 1
23117: ARRAY
23118: IFFALSE 23183
// if result [ 1 ] [ 1 ] = i then
23120: LD_VAR 0 2
23124: PUSH
23125: LD_INT 1
23127: ARRAY
23128: PUSH
23129: LD_INT 1
23131: ARRAY
23132: PUSH
23133: LD_VAR 0 8
23137: EQUAL
23138: IFFALSE 23183
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23140: LD_ADDR_VAR 0 2
23144: PUSH
23145: LD_VAR 0 2
23149: PPUSH
23150: LD_INT 1
23152: PPUSH
23153: LD_VAR 0 2
23157: PUSH
23158: LD_INT 1
23160: ARRAY
23161: PPUSH
23162: LD_INT 1
23164: PPUSH
23165: CALL_OW 3
23169: PPUSH
23170: CALL_OW 1
23174: ST_TO_ADDR
// tmp := 1 ;
23175: LD_ADDR_VAR 0 3
23179: PUSH
23180: LD_STRING 1
23182: ST_TO_ADDR
// end ; normal := normal & tmp ;
23183: LD_ADDR_VAR 0 5
23187: PUSH
23188: LD_VAR 0 5
23192: PUSH
23193: LD_VAR 0 3
23197: STR
23198: ST_TO_ADDR
// end ;
23199: GO 23099
23201: POP
23202: POP
// for i = 1 to hardcoreCounter do
23203: LD_ADDR_VAR 0 8
23207: PUSH
23208: DOUBLE
23209: LD_INT 1
23211: DEC
23212: ST_TO_ADDR
23213: LD_EXP 56
23217: PUSH
23218: FOR_TO
23219: IFFALSE 23324
// begin tmp := 0 ;
23221: LD_ADDR_VAR 0 3
23225: PUSH
23226: LD_STRING 0
23228: ST_TO_ADDR
// if result [ 2 ] then
23229: LD_VAR 0 2
23233: PUSH
23234: LD_INT 2
23236: ARRAY
23237: IFFALSE 23306
// if result [ 2 ] [ 1 ] = 100 + i then
23239: LD_VAR 0 2
23243: PUSH
23244: LD_INT 2
23246: ARRAY
23247: PUSH
23248: LD_INT 1
23250: ARRAY
23251: PUSH
23252: LD_INT 100
23254: PUSH
23255: LD_VAR 0 8
23259: PLUS
23260: EQUAL
23261: IFFALSE 23306
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23263: LD_ADDR_VAR 0 2
23267: PUSH
23268: LD_VAR 0 2
23272: PPUSH
23273: LD_INT 2
23275: PPUSH
23276: LD_VAR 0 2
23280: PUSH
23281: LD_INT 2
23283: ARRAY
23284: PPUSH
23285: LD_INT 1
23287: PPUSH
23288: CALL_OW 3
23292: PPUSH
23293: CALL_OW 1
23297: ST_TO_ADDR
// tmp := 1 ;
23298: LD_ADDR_VAR 0 3
23302: PUSH
23303: LD_STRING 1
23305: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23306: LD_ADDR_VAR 0 6
23310: PUSH
23311: LD_VAR 0 6
23315: PUSH
23316: LD_VAR 0 3
23320: STR
23321: ST_TO_ADDR
// end ;
23322: GO 23218
23324: POP
23325: POP
// if isGameLoad then
23326: LD_VAR 0 1
23330: IFFALSE 23805
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
23332: LD_ADDR_VAR 0 4
23336: PUSH
23337: LD_EXP 59
23341: PUSH
23342: LD_EXP 58
23346: PUSH
23347: LD_EXP 60
23351: PUSH
23352: LD_EXP 57
23356: PUSH
23357: LD_EXP 61
23361: PUSH
23362: LD_EXP 62
23366: PUSH
23367: LD_EXP 63
23371: PUSH
23372: LD_EXP 64
23376: PUSH
23377: LD_EXP 65
23381: PUSH
23382: LD_EXP 66
23386: PUSH
23387: LD_EXP 67
23391: PUSH
23392: LD_EXP 68
23396: PUSH
23397: LD_EXP 69
23401: PUSH
23402: LD_EXP 70
23406: PUSH
23407: LD_EXP 78
23411: PUSH
23412: LD_EXP 79
23416: PUSH
23417: LD_EXP 80
23421: PUSH
23422: LD_EXP 81
23426: PUSH
23427: LD_EXP 83
23431: PUSH
23432: LD_EXP 84
23436: PUSH
23437: LD_EXP 85
23441: PUSH
23442: LD_EXP 88
23446: PUSH
23447: LD_EXP 90
23451: PUSH
23452: LD_EXP 91
23456: PUSH
23457: LD_EXP 92
23461: PUSH
23462: LD_EXP 94
23466: PUSH
23467: LD_EXP 95
23471: PUSH
23472: LD_EXP 98
23476: PUSH
23477: LD_EXP 99
23481: PUSH
23482: LD_EXP 100
23486: PUSH
23487: LD_EXP 101
23491: PUSH
23492: LD_EXP 102
23496: PUSH
23497: LD_EXP 103
23501: PUSH
23502: LD_EXP 104
23506: PUSH
23507: LD_EXP 105
23511: PUSH
23512: LD_EXP 106
23516: PUSH
23517: LD_EXP 71
23521: PUSH
23522: LD_EXP 72
23526: PUSH
23527: LD_EXP 75
23531: PUSH
23532: LD_EXP 76
23536: PUSH
23537: LD_EXP 77
23541: PUSH
23542: LD_EXP 73
23546: PUSH
23547: LD_EXP 74
23551: PUSH
23552: LD_EXP 82
23556: PUSH
23557: LD_EXP 86
23561: PUSH
23562: LD_EXP 87
23566: PUSH
23567: LD_EXP 89
23571: PUSH
23572: LD_EXP 93
23576: PUSH
23577: LD_EXP 96
23581: PUSH
23582: LD_EXP 97
23586: PUSH
23587: LD_EXP 107
23591: PUSH
23592: LD_EXP 108
23596: PUSH
23597: LD_EXP 109
23601: PUSH
23602: LD_EXP 110
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: ST_TO_ADDR
// tmp :=  ;
23663: LD_ADDR_VAR 0 3
23667: PUSH
23668: LD_STRING 
23670: ST_TO_ADDR
// for i = 1 to normalCounter do
23671: LD_ADDR_VAR 0 8
23675: PUSH
23676: DOUBLE
23677: LD_INT 1
23679: DEC
23680: ST_TO_ADDR
23681: LD_EXP 55
23685: PUSH
23686: FOR_TO
23687: IFFALSE 23723
// begin if flags [ i ] then
23689: LD_VAR 0 4
23693: PUSH
23694: LD_VAR 0 8
23698: ARRAY
23699: IFFALSE 23721
// tmp := tmp & i & ; ;
23701: LD_ADDR_VAR 0 3
23705: PUSH
23706: LD_VAR 0 3
23710: PUSH
23711: LD_VAR 0 8
23715: STR
23716: PUSH
23717: LD_STRING ;
23719: STR
23720: ST_TO_ADDR
// end ;
23721: GO 23686
23723: POP
23724: POP
// for i = 1 to hardcoreCounter do
23725: LD_ADDR_VAR 0 8
23729: PUSH
23730: DOUBLE
23731: LD_INT 1
23733: DEC
23734: ST_TO_ADDR
23735: LD_EXP 56
23739: PUSH
23740: FOR_TO
23741: IFFALSE 23787
// begin if flags [ normalCounter + i ] then
23743: LD_VAR 0 4
23747: PUSH
23748: LD_EXP 55
23752: PUSH
23753: LD_VAR 0 8
23757: PLUS
23758: ARRAY
23759: IFFALSE 23785
// tmp := tmp & ( 100 + i ) & ; ;
23761: LD_ADDR_VAR 0 3
23765: PUSH
23766: LD_VAR 0 3
23770: PUSH
23771: LD_INT 100
23773: PUSH
23774: LD_VAR 0 8
23778: PLUS
23779: STR
23780: PUSH
23781: LD_STRING ;
23783: STR
23784: ST_TO_ADDR
// end ;
23785: GO 23740
23787: POP
23788: POP
// if tmp then
23789: LD_VAR 0 3
23793: IFFALSE 23805
// active := tmp ;
23795: LD_ADDR_VAR 0 7
23799: PUSH
23800: LD_VAR 0 3
23804: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
23805: LD_STRING getStreamItemsFromMission("
23807: PUSH
23808: LD_VAR 0 5
23812: STR
23813: PUSH
23814: LD_STRING ","
23816: STR
23817: PUSH
23818: LD_VAR 0 6
23822: STR
23823: PUSH
23824: LD_STRING ","
23826: STR
23827: PUSH
23828: LD_VAR 0 7
23832: STR
23833: PUSH
23834: LD_STRING ")
23836: STR
23837: PPUSH
23838: CALL_OW 559
// end else
23842: GO 23851
// ToLua ( getStreamItemsFromMission("","","") ) ;
23844: LD_STRING getStreamItemsFromMission("","","")
23846: PPUSH
23847: CALL_OW 559
// end ;
23851: LD_VAR 0 2
23855: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23856: LD_EXP 54
23860: PUSH
23861: LD_EXP 59
23865: AND
23866: IFFALSE 23990
23868: GO 23870
23870: DISABLE
23871: LD_INT 0
23873: PPUSH
23874: PPUSH
// begin enable ;
23875: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23876: LD_ADDR_VAR 0 2
23880: PUSH
23881: LD_INT 22
23883: PUSH
23884: LD_OWVAR 2
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: PUSH
23893: LD_INT 2
23895: PUSH
23896: LD_INT 34
23898: PUSH
23899: LD_INT 7
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: PUSH
23906: LD_INT 34
23908: PUSH
23909: LD_INT 45
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: PUSH
23916: LD_INT 34
23918: PUSH
23919: LD_INT 28
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: PUSH
23926: LD_INT 34
23928: PUSH
23929: LD_INT 47
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PPUSH
23947: CALL_OW 69
23951: ST_TO_ADDR
// if not tmp then
23952: LD_VAR 0 2
23956: NOT
23957: IFFALSE 23961
// exit ;
23959: GO 23990
// for i in tmp do
23961: LD_ADDR_VAR 0 1
23965: PUSH
23966: LD_VAR 0 2
23970: PUSH
23971: FOR_IN
23972: IFFALSE 23988
// begin SetLives ( i , 0 ) ;
23974: LD_VAR 0 1
23978: PPUSH
23979: LD_INT 0
23981: PPUSH
23982: CALL_OW 234
// end ;
23986: GO 23971
23988: POP
23989: POP
// end ;
23990: PPOPN 2
23992: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23993: LD_EXP 54
23997: PUSH
23998: LD_EXP 60
24002: AND
24003: IFFALSE 24087
24005: GO 24007
24007: DISABLE
24008: LD_INT 0
24010: PPUSH
24011: PPUSH
// begin enable ;
24012: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24013: LD_ADDR_VAR 0 2
24017: PUSH
24018: LD_INT 22
24020: PUSH
24021: LD_OWVAR 2
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PUSH
24030: LD_INT 32
24032: PUSH
24033: LD_INT 3
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PPUSH
24044: CALL_OW 69
24048: ST_TO_ADDR
// if not tmp then
24049: LD_VAR 0 2
24053: NOT
24054: IFFALSE 24058
// exit ;
24056: GO 24087
// for i in tmp do
24058: LD_ADDR_VAR 0 1
24062: PUSH
24063: LD_VAR 0 2
24067: PUSH
24068: FOR_IN
24069: IFFALSE 24085
// begin SetLives ( i , 0 ) ;
24071: LD_VAR 0 1
24075: PPUSH
24076: LD_INT 0
24078: PPUSH
24079: CALL_OW 234
// end ;
24083: GO 24068
24085: POP
24086: POP
// end ;
24087: PPOPN 2
24089: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24090: LD_EXP 54
24094: PUSH
24095: LD_EXP 57
24099: AND
24100: IFFALSE 24193
24102: GO 24104
24104: DISABLE
24105: LD_INT 0
24107: PPUSH
// begin enable ;
24108: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24109: LD_ADDR_VAR 0 1
24113: PUSH
24114: LD_INT 22
24116: PUSH
24117: LD_OWVAR 2
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: LD_INT 2
24128: PUSH
24129: LD_INT 25
24131: PUSH
24132: LD_INT 5
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: PUSH
24139: LD_INT 25
24141: PUSH
24142: LD_INT 9
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PUSH
24149: LD_INT 25
24151: PUSH
24152: LD_INT 8
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PPUSH
24169: CALL_OW 69
24173: PUSH
24174: FOR_IN
24175: IFFALSE 24191
// begin SetClass ( i , 1 ) ;
24177: LD_VAR 0 1
24181: PPUSH
24182: LD_INT 1
24184: PPUSH
24185: CALL_OW 336
// end ;
24189: GO 24174
24191: POP
24192: POP
// end ;
24193: PPOPN 1
24195: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24196: LD_EXP 54
24200: PUSH
24201: LD_EXP 58
24205: AND
24206: PUSH
24207: LD_OWVAR 65
24211: PUSH
24212: LD_INT 7
24214: LESS
24215: AND
24216: IFFALSE 24230
24218: GO 24220
24220: DISABLE
// begin enable ;
24221: ENABLE
// game_speed := 7 ;
24222: LD_ADDR_OWVAR 65
24226: PUSH
24227: LD_INT 7
24229: ST_TO_ADDR
// end ;
24230: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24231: LD_EXP 54
24235: PUSH
24236: LD_EXP 61
24240: AND
24241: IFFALSE 24443
24243: GO 24245
24245: DISABLE
24246: LD_INT 0
24248: PPUSH
24249: PPUSH
24250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24251: LD_ADDR_VAR 0 3
24255: PUSH
24256: LD_INT 81
24258: PUSH
24259: LD_OWVAR 2
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 21
24270: PUSH
24271: LD_INT 1
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: PPUSH
24282: CALL_OW 69
24286: ST_TO_ADDR
// if not tmp then
24287: LD_VAR 0 3
24291: NOT
24292: IFFALSE 24296
// exit ;
24294: GO 24443
// if tmp > 5 then
24296: LD_VAR 0 3
24300: PUSH
24301: LD_INT 5
24303: GREATER
24304: IFFALSE 24316
// k := 5 else
24306: LD_ADDR_VAR 0 2
24310: PUSH
24311: LD_INT 5
24313: ST_TO_ADDR
24314: GO 24326
// k := tmp ;
24316: LD_ADDR_VAR 0 2
24320: PUSH
24321: LD_VAR 0 3
24325: ST_TO_ADDR
// for i := 1 to k do
24326: LD_ADDR_VAR 0 1
24330: PUSH
24331: DOUBLE
24332: LD_INT 1
24334: DEC
24335: ST_TO_ADDR
24336: LD_VAR 0 2
24340: PUSH
24341: FOR_TO
24342: IFFALSE 24441
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
24344: LD_VAR 0 3
24348: PUSH
24349: LD_VAR 0 1
24353: ARRAY
24354: PPUSH
24355: LD_VAR 0 1
24359: PUSH
24360: LD_INT 4
24362: MOD
24363: PUSH
24364: LD_INT 1
24366: PLUS
24367: PPUSH
24368: CALL_OW 259
24372: PUSH
24373: LD_INT 10
24375: LESS
24376: IFFALSE 24439
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
24378: LD_VAR 0 3
24382: PUSH
24383: LD_VAR 0 1
24387: ARRAY
24388: PPUSH
24389: LD_VAR 0 1
24393: PUSH
24394: LD_INT 4
24396: MOD
24397: PUSH
24398: LD_INT 1
24400: PLUS
24401: PPUSH
24402: LD_VAR 0 3
24406: PUSH
24407: LD_VAR 0 1
24411: ARRAY
24412: PPUSH
24413: LD_VAR 0 1
24417: PUSH
24418: LD_INT 4
24420: MOD
24421: PUSH
24422: LD_INT 1
24424: PLUS
24425: PPUSH
24426: CALL_OW 259
24430: PUSH
24431: LD_INT 1
24433: PLUS
24434: PPUSH
24435: CALL_OW 237
24439: GO 24341
24441: POP
24442: POP
// end ;
24443: PPOPN 3
24445: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
24446: LD_EXP 54
24450: PUSH
24451: LD_EXP 62
24455: AND
24456: IFFALSE 24476
24458: GO 24460
24460: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
24461: LD_INT 4
24463: PPUSH
24464: LD_OWVAR 2
24468: PPUSH
24469: LD_INT 0
24471: PPUSH
24472: CALL_OW 324
24476: END
// every 0 0$1 trigger StreamModeActive and sShovel do
24477: LD_EXP 54
24481: PUSH
24482: LD_EXP 91
24486: AND
24487: IFFALSE 24507
24489: GO 24491
24491: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
24492: LD_INT 19
24494: PPUSH
24495: LD_OWVAR 2
24499: PPUSH
24500: LD_INT 0
24502: PPUSH
24503: CALL_OW 324
24507: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
24508: LD_EXP 54
24512: PUSH
24513: LD_EXP 63
24517: AND
24518: IFFALSE 24620
24520: GO 24522
24522: DISABLE
24523: LD_INT 0
24525: PPUSH
24526: PPUSH
// begin enable ;
24527: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
24528: LD_ADDR_VAR 0 2
24532: PUSH
24533: LD_INT 22
24535: PUSH
24536: LD_OWVAR 2
24540: PUSH
24541: EMPTY
24542: LIST
24543: LIST
24544: PUSH
24545: LD_INT 2
24547: PUSH
24548: LD_INT 34
24550: PUSH
24551: LD_INT 11
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 34
24560: PUSH
24561: LD_INT 30
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: EMPTY
24569: LIST
24570: LIST
24571: LIST
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: PPUSH
24577: CALL_OW 69
24581: ST_TO_ADDR
// if not tmp then
24582: LD_VAR 0 2
24586: NOT
24587: IFFALSE 24591
// exit ;
24589: GO 24620
// for i in tmp do
24591: LD_ADDR_VAR 0 1
24595: PUSH
24596: LD_VAR 0 2
24600: PUSH
24601: FOR_IN
24602: IFFALSE 24618
// begin SetLives ( i , 0 ) ;
24604: LD_VAR 0 1
24608: PPUSH
24609: LD_INT 0
24611: PPUSH
24612: CALL_OW 234
// end ;
24616: GO 24601
24618: POP
24619: POP
// end ;
24620: PPOPN 2
24622: END
// every 0 0$1 trigger StreamModeActive and sBunker do
24623: LD_EXP 54
24627: PUSH
24628: LD_EXP 64
24632: AND
24633: IFFALSE 24653
24635: GO 24637
24637: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
24638: LD_INT 32
24640: PPUSH
24641: LD_OWVAR 2
24645: PPUSH
24646: LD_INT 0
24648: PPUSH
24649: CALL_OW 324
24653: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
24654: LD_EXP 54
24658: PUSH
24659: LD_EXP 65
24663: AND
24664: IFFALSE 24845
24666: GO 24668
24668: DISABLE
24669: LD_INT 0
24671: PPUSH
24672: PPUSH
24673: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
24674: LD_ADDR_VAR 0 2
24678: PUSH
24679: LD_INT 22
24681: PUSH
24682: LD_OWVAR 2
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: PUSH
24691: LD_INT 33
24693: PUSH
24694: LD_INT 3
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PPUSH
24705: CALL_OW 69
24709: ST_TO_ADDR
// if not tmp then
24710: LD_VAR 0 2
24714: NOT
24715: IFFALSE 24719
// exit ;
24717: GO 24845
// side := 0 ;
24719: LD_ADDR_VAR 0 3
24723: PUSH
24724: LD_INT 0
24726: ST_TO_ADDR
// for i := 1 to 8 do
24727: LD_ADDR_VAR 0 1
24731: PUSH
24732: DOUBLE
24733: LD_INT 1
24735: DEC
24736: ST_TO_ADDR
24737: LD_INT 8
24739: PUSH
24740: FOR_TO
24741: IFFALSE 24789
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
24743: LD_OWVAR 2
24747: PUSH
24748: LD_VAR 0 1
24752: NONEQUAL
24753: PUSH
24754: LD_OWVAR 2
24758: PPUSH
24759: LD_VAR 0 1
24763: PPUSH
24764: CALL_OW 81
24768: PUSH
24769: LD_INT 2
24771: EQUAL
24772: AND
24773: IFFALSE 24787
// begin side := i ;
24775: LD_ADDR_VAR 0 3
24779: PUSH
24780: LD_VAR 0 1
24784: ST_TO_ADDR
// break ;
24785: GO 24789
// end ;
24787: GO 24740
24789: POP
24790: POP
// if not side then
24791: LD_VAR 0 3
24795: NOT
24796: IFFALSE 24800
// exit ;
24798: GO 24845
// for i := 1 to tmp do
24800: LD_ADDR_VAR 0 1
24804: PUSH
24805: DOUBLE
24806: LD_INT 1
24808: DEC
24809: ST_TO_ADDR
24810: LD_VAR 0 2
24814: PUSH
24815: FOR_TO
24816: IFFALSE 24843
// if Prob ( 60 ) then
24818: LD_INT 60
24820: PPUSH
24821: CALL_OW 13
24825: IFFALSE 24841
// SetSide ( i , side ) ;
24827: LD_VAR 0 1
24831: PPUSH
24832: LD_VAR 0 3
24836: PPUSH
24837: CALL_OW 235
24841: GO 24815
24843: POP
24844: POP
// end ;
24845: PPOPN 3
24847: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24848: LD_EXP 54
24852: PUSH
24853: LD_EXP 67
24857: AND
24858: IFFALSE 24977
24860: GO 24862
24862: DISABLE
24863: LD_INT 0
24865: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24866: LD_ADDR_VAR 0 1
24870: PUSH
24871: LD_INT 22
24873: PUSH
24874: LD_OWVAR 2
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: PUSH
24883: LD_INT 21
24885: PUSH
24886: LD_INT 1
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: PUSH
24893: LD_INT 3
24895: PUSH
24896: LD_INT 23
24898: PUSH
24899: LD_INT 0
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: LIST
24914: PPUSH
24915: CALL_OW 69
24919: PUSH
24920: FOR_IN
24921: IFFALSE 24975
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24923: LD_VAR 0 1
24927: PPUSH
24928: CALL_OW 257
24932: PUSH
24933: LD_INT 1
24935: PUSH
24936: LD_INT 2
24938: PUSH
24939: LD_INT 3
24941: PUSH
24942: LD_INT 4
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: IN
24951: IFFALSE 24973
// SetClass ( un , rand ( 1 , 4 ) ) ;
24953: LD_VAR 0 1
24957: PPUSH
24958: LD_INT 1
24960: PPUSH
24961: LD_INT 4
24963: PPUSH
24964: CALL_OW 12
24968: PPUSH
24969: CALL_OW 336
24973: GO 24920
24975: POP
24976: POP
// end ;
24977: PPOPN 1
24979: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24980: LD_EXP 54
24984: PUSH
24985: LD_EXP 66
24989: AND
24990: IFFALSE 25069
24992: GO 24994
24994: DISABLE
24995: LD_INT 0
24997: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24998: LD_ADDR_VAR 0 1
25002: PUSH
25003: LD_INT 22
25005: PUSH
25006: LD_OWVAR 2
25010: PUSH
25011: EMPTY
25012: LIST
25013: LIST
25014: PUSH
25015: LD_INT 21
25017: PUSH
25018: LD_INT 3
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PPUSH
25029: CALL_OW 69
25033: ST_TO_ADDR
// if not tmp then
25034: LD_VAR 0 1
25038: NOT
25039: IFFALSE 25043
// exit ;
25041: GO 25069
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25043: LD_VAR 0 1
25047: PUSH
25048: LD_INT 1
25050: PPUSH
25051: LD_VAR 0 1
25055: PPUSH
25056: CALL_OW 12
25060: ARRAY
25061: PPUSH
25062: LD_INT 100
25064: PPUSH
25065: CALL_OW 234
// end ;
25069: PPOPN 1
25071: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25072: LD_EXP 54
25076: PUSH
25077: LD_EXP 68
25081: AND
25082: IFFALSE 25180
25084: GO 25086
25086: DISABLE
25087: LD_INT 0
25089: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25090: LD_ADDR_VAR 0 1
25094: PUSH
25095: LD_INT 22
25097: PUSH
25098: LD_OWVAR 2
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: PUSH
25107: LD_INT 21
25109: PUSH
25110: LD_INT 1
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PPUSH
25121: CALL_OW 69
25125: ST_TO_ADDR
// if not tmp then
25126: LD_VAR 0 1
25130: NOT
25131: IFFALSE 25135
// exit ;
25133: GO 25180
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25135: LD_VAR 0 1
25139: PUSH
25140: LD_INT 1
25142: PPUSH
25143: LD_VAR 0 1
25147: PPUSH
25148: CALL_OW 12
25152: ARRAY
25153: PPUSH
25154: LD_INT 1
25156: PPUSH
25157: LD_INT 4
25159: PPUSH
25160: CALL_OW 12
25164: PPUSH
25165: LD_INT 3000
25167: PPUSH
25168: LD_INT 9000
25170: PPUSH
25171: CALL_OW 12
25175: PPUSH
25176: CALL_OW 492
// end ;
25180: PPOPN 1
25182: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25183: LD_EXP 54
25187: PUSH
25188: LD_EXP 69
25192: AND
25193: IFFALSE 25213
25195: GO 25197
25197: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25198: LD_INT 1
25200: PPUSH
25201: LD_OWVAR 2
25205: PPUSH
25206: LD_INT 0
25208: PPUSH
25209: CALL_OW 324
25213: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25214: LD_EXP 54
25218: PUSH
25219: LD_EXP 70
25223: AND
25224: IFFALSE 25307
25226: GO 25228
25228: DISABLE
25229: LD_INT 0
25231: PPUSH
25232: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25233: LD_ADDR_VAR 0 2
25237: PUSH
25238: LD_INT 22
25240: PUSH
25241: LD_OWVAR 2
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: LD_INT 21
25252: PUSH
25253: LD_INT 3
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: PPUSH
25264: CALL_OW 69
25268: ST_TO_ADDR
// if not tmp then
25269: LD_VAR 0 2
25273: NOT
25274: IFFALSE 25278
// exit ;
25276: GO 25307
// for i in tmp do
25278: LD_ADDR_VAR 0 1
25282: PUSH
25283: LD_VAR 0 2
25287: PUSH
25288: FOR_IN
25289: IFFALSE 25305
// SetBLevel ( i , 10 ) ;
25291: LD_VAR 0 1
25295: PPUSH
25296: LD_INT 10
25298: PPUSH
25299: CALL_OW 241
25303: GO 25288
25305: POP
25306: POP
// end ;
25307: PPOPN 2
25309: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
25310: LD_EXP 54
25314: PUSH
25315: LD_EXP 71
25319: AND
25320: IFFALSE 25431
25322: GO 25324
25324: DISABLE
25325: LD_INT 0
25327: PPUSH
25328: PPUSH
25329: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25330: LD_ADDR_VAR 0 3
25334: PUSH
25335: LD_INT 22
25337: PUSH
25338: LD_OWVAR 2
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: LD_INT 25
25349: PUSH
25350: LD_INT 1
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PPUSH
25361: CALL_OW 69
25365: ST_TO_ADDR
// if not tmp then
25366: LD_VAR 0 3
25370: NOT
25371: IFFALSE 25375
// exit ;
25373: GO 25431
// un := tmp [ rand ( 1 , tmp ) ] ;
25375: LD_ADDR_VAR 0 2
25379: PUSH
25380: LD_VAR 0 3
25384: PUSH
25385: LD_INT 1
25387: PPUSH
25388: LD_VAR 0 3
25392: PPUSH
25393: CALL_OW 12
25397: ARRAY
25398: ST_TO_ADDR
// if Crawls ( un ) then
25399: LD_VAR 0 2
25403: PPUSH
25404: CALL_OW 318
25408: IFFALSE 25419
// ComWalk ( un ) ;
25410: LD_VAR 0 2
25414: PPUSH
25415: CALL_OW 138
// SetClass ( un , class_sniper ) ;
25419: LD_VAR 0 2
25423: PPUSH
25424: LD_INT 5
25426: PPUSH
25427: CALL_OW 336
// end ;
25431: PPOPN 3
25433: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
25434: LD_EXP 54
25438: PUSH
25439: LD_EXP 72
25443: AND
25444: PUSH
25445: LD_OWVAR 67
25449: PUSH
25450: LD_INT 4
25452: LESS
25453: AND
25454: IFFALSE 25473
25456: GO 25458
25458: DISABLE
// begin Difficulty := Difficulty + 1 ;
25459: LD_ADDR_OWVAR 67
25463: PUSH
25464: LD_OWVAR 67
25468: PUSH
25469: LD_INT 1
25471: PLUS
25472: ST_TO_ADDR
// end ;
25473: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
25474: LD_EXP 54
25478: PUSH
25479: LD_EXP 73
25483: AND
25484: IFFALSE 25587
25486: GO 25488
25488: DISABLE
25489: LD_INT 0
25491: PPUSH
// begin for i := 1 to 5 do
25492: LD_ADDR_VAR 0 1
25496: PUSH
25497: DOUBLE
25498: LD_INT 1
25500: DEC
25501: ST_TO_ADDR
25502: LD_INT 5
25504: PUSH
25505: FOR_TO
25506: IFFALSE 25585
// begin uc_nation := nation_nature ;
25508: LD_ADDR_OWVAR 21
25512: PUSH
25513: LD_INT 0
25515: ST_TO_ADDR
// uc_side := 0 ;
25516: LD_ADDR_OWVAR 20
25520: PUSH
25521: LD_INT 0
25523: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25524: LD_ADDR_OWVAR 29
25528: PUSH
25529: LD_INT 12
25531: PUSH
25532: LD_INT 12
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: ST_TO_ADDR
// hc_agressivity := 20 ;
25539: LD_ADDR_OWVAR 35
25543: PUSH
25544: LD_INT 20
25546: ST_TO_ADDR
// hc_class := class_tiger ;
25547: LD_ADDR_OWVAR 28
25551: PUSH
25552: LD_INT 14
25554: ST_TO_ADDR
// hc_gallery :=  ;
25555: LD_ADDR_OWVAR 33
25559: PUSH
25560: LD_STRING 
25562: ST_TO_ADDR
// hc_name :=  ;
25563: LD_ADDR_OWVAR 26
25567: PUSH
25568: LD_STRING 
25570: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
25571: CALL_OW 44
25575: PPUSH
25576: LD_INT 0
25578: PPUSH
25579: CALL_OW 51
// end ;
25583: GO 25505
25585: POP
25586: POP
// end ;
25587: PPOPN 1
25589: END
// every 0 0$1 trigger StreamModeActive and sBomb do
25590: LD_EXP 54
25594: PUSH
25595: LD_EXP 74
25599: AND
25600: IFFALSE 25609
25602: GO 25604
25604: DISABLE
// StreamSibBomb ;
25605: CALL 25610 0 0
25609: END
// export function StreamSibBomb ; var i , x , y ; begin
25610: LD_INT 0
25612: PPUSH
25613: PPUSH
25614: PPUSH
25615: PPUSH
// result := false ;
25616: LD_ADDR_VAR 0 1
25620: PUSH
25621: LD_INT 0
25623: ST_TO_ADDR
// for i := 1 to 16 do
25624: LD_ADDR_VAR 0 2
25628: PUSH
25629: DOUBLE
25630: LD_INT 1
25632: DEC
25633: ST_TO_ADDR
25634: LD_INT 16
25636: PUSH
25637: FOR_TO
25638: IFFALSE 25837
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25640: LD_ADDR_VAR 0 3
25644: PUSH
25645: LD_INT 10
25647: PUSH
25648: LD_INT 20
25650: PUSH
25651: LD_INT 30
25653: PUSH
25654: LD_INT 40
25656: PUSH
25657: LD_INT 50
25659: PUSH
25660: LD_INT 60
25662: PUSH
25663: LD_INT 70
25665: PUSH
25666: LD_INT 80
25668: PUSH
25669: LD_INT 90
25671: PUSH
25672: LD_INT 100
25674: PUSH
25675: LD_INT 110
25677: PUSH
25678: LD_INT 120
25680: PUSH
25681: LD_INT 130
25683: PUSH
25684: LD_INT 140
25686: PUSH
25687: LD_INT 150
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: PUSH
25707: LD_INT 1
25709: PPUSH
25710: LD_INT 15
25712: PPUSH
25713: CALL_OW 12
25717: ARRAY
25718: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
25719: LD_ADDR_VAR 0 4
25723: PUSH
25724: LD_INT 10
25726: PUSH
25727: LD_INT 20
25729: PUSH
25730: LD_INT 30
25732: PUSH
25733: LD_INT 40
25735: PUSH
25736: LD_INT 50
25738: PUSH
25739: LD_INT 60
25741: PUSH
25742: LD_INT 70
25744: PUSH
25745: LD_INT 80
25747: PUSH
25748: LD_INT 90
25750: PUSH
25751: LD_INT 100
25753: PUSH
25754: LD_INT 110
25756: PUSH
25757: LD_INT 120
25759: PUSH
25760: LD_INT 130
25762: PUSH
25763: LD_INT 140
25765: PUSH
25766: LD_INT 150
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: PUSH
25786: LD_INT 1
25788: PPUSH
25789: LD_INT 15
25791: PPUSH
25792: CALL_OW 12
25796: ARRAY
25797: ST_TO_ADDR
// if ValidHex ( x , y ) then
25798: LD_VAR 0 3
25802: PPUSH
25803: LD_VAR 0 4
25807: PPUSH
25808: CALL_OW 488
25812: IFFALSE 25835
// begin result := [ x , y ] ;
25814: LD_ADDR_VAR 0 1
25818: PUSH
25819: LD_VAR 0 3
25823: PUSH
25824: LD_VAR 0 4
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: ST_TO_ADDR
// break ;
25833: GO 25837
// end ; end ;
25835: GO 25637
25837: POP
25838: POP
// if result then
25839: LD_VAR 0 1
25843: IFFALSE 25903
// begin ToLua ( playSibBomb() ) ;
25845: LD_STRING playSibBomb()
25847: PPUSH
25848: CALL_OW 559
// wait ( 0 0$14 ) ;
25852: LD_INT 490
25854: PPUSH
25855: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25859: LD_VAR 0 1
25863: PUSH
25864: LD_INT 1
25866: ARRAY
25867: PPUSH
25868: LD_VAR 0 1
25872: PUSH
25873: LD_INT 2
25875: ARRAY
25876: PPUSH
25877: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25881: LD_VAR 0 1
25885: PUSH
25886: LD_INT 1
25888: ARRAY
25889: PPUSH
25890: LD_VAR 0 1
25894: PUSH
25895: LD_INT 2
25897: ARRAY
25898: PPUSH
25899: CALL_OW 429
// end ; end ;
25903: LD_VAR 0 1
25907: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25908: LD_EXP 54
25912: PUSH
25913: LD_EXP 76
25917: AND
25918: IFFALSE 25930
25920: GO 25922
25922: DISABLE
// YouLost (  ) ;
25923: LD_STRING 
25925: PPUSH
25926: CALL_OW 104
25930: END
// every 0 0$1 trigger StreamModeActive and sFog do
25931: LD_EXP 54
25935: PUSH
25936: LD_EXP 75
25940: AND
25941: IFFALSE 25955
25943: GO 25945
25945: DISABLE
// FogOff ( your_side ) ;
25946: LD_OWVAR 2
25950: PPUSH
25951: CALL_OW 344
25955: END
// every 0 0$1 trigger StreamModeActive and sSun do
25956: LD_EXP 54
25960: PUSH
25961: LD_EXP 77
25965: AND
25966: IFFALSE 25994
25968: GO 25970
25970: DISABLE
// begin solar_recharge_percent := 0 ;
25971: LD_ADDR_OWVAR 79
25975: PUSH
25976: LD_INT 0
25978: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25979: LD_INT 10500
25981: PPUSH
25982: CALL_OW 67
// solar_recharge_percent := 100 ;
25986: LD_ADDR_OWVAR 79
25990: PUSH
25991: LD_INT 100
25993: ST_TO_ADDR
// end ;
25994: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25995: LD_EXP 54
25999: PUSH
26000: LD_EXP 78
26004: AND
26005: IFFALSE 26244
26007: GO 26009
26009: DISABLE
26010: LD_INT 0
26012: PPUSH
26013: PPUSH
26014: PPUSH
// begin tmp := [ ] ;
26015: LD_ADDR_VAR 0 3
26019: PUSH
26020: EMPTY
26021: ST_TO_ADDR
// for i := 1 to 6 do
26022: LD_ADDR_VAR 0 1
26026: PUSH
26027: DOUBLE
26028: LD_INT 1
26030: DEC
26031: ST_TO_ADDR
26032: LD_INT 6
26034: PUSH
26035: FOR_TO
26036: IFFALSE 26141
// begin uc_nation := nation_nature ;
26038: LD_ADDR_OWVAR 21
26042: PUSH
26043: LD_INT 0
26045: ST_TO_ADDR
// uc_side := 0 ;
26046: LD_ADDR_OWVAR 20
26050: PUSH
26051: LD_INT 0
26053: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26054: LD_ADDR_OWVAR 29
26058: PUSH
26059: LD_INT 12
26061: PUSH
26062: LD_INT 12
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: ST_TO_ADDR
// hc_agressivity := 20 ;
26069: LD_ADDR_OWVAR 35
26073: PUSH
26074: LD_INT 20
26076: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26077: LD_ADDR_OWVAR 28
26081: PUSH
26082: LD_INT 17
26084: ST_TO_ADDR
// hc_gallery :=  ;
26085: LD_ADDR_OWVAR 33
26089: PUSH
26090: LD_STRING 
26092: ST_TO_ADDR
// hc_name :=  ;
26093: LD_ADDR_OWVAR 26
26097: PUSH
26098: LD_STRING 
26100: ST_TO_ADDR
// un := CreateHuman ;
26101: LD_ADDR_VAR 0 2
26105: PUSH
26106: CALL_OW 44
26110: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26111: LD_VAR 0 2
26115: PPUSH
26116: LD_INT 1
26118: PPUSH
26119: CALL_OW 51
// tmp := tmp ^ un ;
26123: LD_ADDR_VAR 0 3
26127: PUSH
26128: LD_VAR 0 3
26132: PUSH
26133: LD_VAR 0 2
26137: ADD
26138: ST_TO_ADDR
// end ;
26139: GO 26035
26141: POP
26142: POP
// repeat wait ( 0 0$1 ) ;
26143: LD_INT 35
26145: PPUSH
26146: CALL_OW 67
// for un in tmp do
26150: LD_ADDR_VAR 0 2
26154: PUSH
26155: LD_VAR 0 3
26159: PUSH
26160: FOR_IN
26161: IFFALSE 26235
// begin if IsDead ( un ) then
26163: LD_VAR 0 2
26167: PPUSH
26168: CALL_OW 301
26172: IFFALSE 26192
// begin tmp := tmp diff un ;
26174: LD_ADDR_VAR 0 3
26178: PUSH
26179: LD_VAR 0 3
26183: PUSH
26184: LD_VAR 0 2
26188: DIFF
26189: ST_TO_ADDR
// continue ;
26190: GO 26160
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26192: LD_VAR 0 2
26196: PPUSH
26197: LD_INT 3
26199: PUSH
26200: LD_INT 22
26202: PUSH
26203: LD_INT 0
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: PPUSH
26214: CALL_OW 69
26218: PPUSH
26219: LD_VAR 0 2
26223: PPUSH
26224: CALL_OW 74
26228: PPUSH
26229: CALL_OW 115
// end ;
26233: GO 26160
26235: POP
26236: POP
// until not tmp ;
26237: LD_VAR 0 3
26241: NOT
26242: IFFALSE 26143
// end ;
26244: PPOPN 3
26246: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26247: LD_EXP 54
26251: PUSH
26252: LD_EXP 79
26256: AND
26257: IFFALSE 26311
26259: GO 26261
26261: DISABLE
// begin ToLua ( displayTroll(); ) ;
26262: LD_STRING displayTroll();
26264: PPUSH
26265: CALL_OW 559
// wait ( 3 3$00 ) ;
26269: LD_INT 6300
26271: PPUSH
26272: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26276: LD_STRING hideTroll();
26278: PPUSH
26279: CALL_OW 559
// wait ( 1 1$00 ) ;
26283: LD_INT 2100
26285: PPUSH
26286: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26290: LD_STRING displayTroll();
26292: PPUSH
26293: CALL_OW 559
// wait ( 1 1$00 ) ;
26297: LD_INT 2100
26299: PPUSH
26300: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26304: LD_STRING hideTroll();
26306: PPUSH
26307: CALL_OW 559
// end ;
26311: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
26312: LD_EXP 54
26316: PUSH
26317: LD_EXP 80
26321: AND
26322: IFFALSE 26385
26324: GO 26326
26326: DISABLE
26327: LD_INT 0
26329: PPUSH
// begin p := 0 ;
26330: LD_ADDR_VAR 0 1
26334: PUSH
26335: LD_INT 0
26337: ST_TO_ADDR
// repeat game_speed := 1 ;
26338: LD_ADDR_OWVAR 65
26342: PUSH
26343: LD_INT 1
26345: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26346: LD_INT 35
26348: PPUSH
26349: CALL_OW 67
// p := p + 1 ;
26353: LD_ADDR_VAR 0 1
26357: PUSH
26358: LD_VAR 0 1
26362: PUSH
26363: LD_INT 1
26365: PLUS
26366: ST_TO_ADDR
// until p >= 60 ;
26367: LD_VAR 0 1
26371: PUSH
26372: LD_INT 60
26374: GREATEREQUAL
26375: IFFALSE 26338
// game_speed := 4 ;
26377: LD_ADDR_OWVAR 65
26381: PUSH
26382: LD_INT 4
26384: ST_TO_ADDR
// end ;
26385: PPOPN 1
26387: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
26388: LD_EXP 54
26392: PUSH
26393: LD_EXP 81
26397: AND
26398: IFFALSE 26544
26400: GO 26402
26402: DISABLE
26403: LD_INT 0
26405: PPUSH
26406: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26407: LD_ADDR_VAR 0 1
26411: PUSH
26412: LD_INT 22
26414: PUSH
26415: LD_OWVAR 2
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: PUSH
26424: LD_INT 2
26426: PUSH
26427: LD_INT 30
26429: PUSH
26430: LD_INT 0
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: LD_INT 30
26439: PUSH
26440: LD_INT 1
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: LIST
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PPUSH
26456: CALL_OW 69
26460: ST_TO_ADDR
// if not depot then
26461: LD_VAR 0 1
26465: NOT
26466: IFFALSE 26470
// exit ;
26468: GO 26544
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
26470: LD_ADDR_VAR 0 2
26474: PUSH
26475: LD_VAR 0 1
26479: PUSH
26480: LD_INT 1
26482: PPUSH
26483: LD_VAR 0 1
26487: PPUSH
26488: CALL_OW 12
26492: ARRAY
26493: PPUSH
26494: CALL_OW 274
26498: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
26499: LD_VAR 0 2
26503: PPUSH
26504: LD_INT 1
26506: PPUSH
26507: LD_INT 0
26509: PPUSH
26510: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
26514: LD_VAR 0 2
26518: PPUSH
26519: LD_INT 2
26521: PPUSH
26522: LD_INT 0
26524: PPUSH
26525: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
26529: LD_VAR 0 2
26533: PPUSH
26534: LD_INT 3
26536: PPUSH
26537: LD_INT 0
26539: PPUSH
26540: CALL_OW 277
// end ;
26544: PPOPN 2
26546: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
26547: LD_EXP 54
26551: PUSH
26552: LD_EXP 82
26556: AND
26557: IFFALSE 26654
26559: GO 26561
26561: DISABLE
26562: LD_INT 0
26564: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26565: LD_ADDR_VAR 0 1
26569: PUSH
26570: LD_INT 22
26572: PUSH
26573: LD_OWVAR 2
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PUSH
26582: LD_INT 21
26584: PUSH
26585: LD_INT 1
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: PUSH
26592: LD_INT 3
26594: PUSH
26595: LD_INT 23
26597: PUSH
26598: LD_INT 0
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: LIST
26613: PPUSH
26614: CALL_OW 69
26618: ST_TO_ADDR
// if not tmp then
26619: LD_VAR 0 1
26623: NOT
26624: IFFALSE 26628
// exit ;
26626: GO 26654
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
26628: LD_VAR 0 1
26632: PUSH
26633: LD_INT 1
26635: PPUSH
26636: LD_VAR 0 1
26640: PPUSH
26641: CALL_OW 12
26645: ARRAY
26646: PPUSH
26647: LD_INT 200
26649: PPUSH
26650: CALL_OW 234
// end ;
26654: PPOPN 1
26656: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
26657: LD_EXP 54
26661: PUSH
26662: LD_EXP 83
26666: AND
26667: IFFALSE 26746
26669: GO 26671
26671: DISABLE
26672: LD_INT 0
26674: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
26675: LD_ADDR_VAR 0 1
26679: PUSH
26680: LD_INT 22
26682: PUSH
26683: LD_OWVAR 2
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: LD_INT 21
26694: PUSH
26695: LD_INT 2
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PPUSH
26706: CALL_OW 69
26710: ST_TO_ADDR
// if not tmp then
26711: LD_VAR 0 1
26715: NOT
26716: IFFALSE 26720
// exit ;
26718: GO 26746
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
26720: LD_VAR 0 1
26724: PUSH
26725: LD_INT 1
26727: PPUSH
26728: LD_VAR 0 1
26732: PPUSH
26733: CALL_OW 12
26737: ARRAY
26738: PPUSH
26739: LD_INT 60
26741: PPUSH
26742: CALL_OW 234
// end ;
26746: PPOPN 1
26748: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26749: LD_EXP 54
26753: PUSH
26754: LD_EXP 84
26758: AND
26759: IFFALSE 26858
26761: GO 26763
26763: DISABLE
26764: LD_INT 0
26766: PPUSH
26767: PPUSH
// begin enable ;
26768: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26769: LD_ADDR_VAR 0 1
26773: PUSH
26774: LD_INT 22
26776: PUSH
26777: LD_OWVAR 2
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: LD_INT 61
26788: PUSH
26789: EMPTY
26790: LIST
26791: PUSH
26792: LD_INT 33
26794: PUSH
26795: LD_INT 2
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: LIST
26806: PPUSH
26807: CALL_OW 69
26811: ST_TO_ADDR
// if not tmp then
26812: LD_VAR 0 1
26816: NOT
26817: IFFALSE 26821
// exit ;
26819: GO 26858
// for i in tmp do
26821: LD_ADDR_VAR 0 2
26825: PUSH
26826: LD_VAR 0 1
26830: PUSH
26831: FOR_IN
26832: IFFALSE 26856
// if IsControledBy ( i ) then
26834: LD_VAR 0 2
26838: PPUSH
26839: CALL_OW 312
26843: IFFALSE 26854
// ComUnlink ( i ) ;
26845: LD_VAR 0 2
26849: PPUSH
26850: CALL_OW 136
26854: GO 26831
26856: POP
26857: POP
// end ;
26858: PPOPN 2
26860: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26861: LD_EXP 54
26865: PUSH
26866: LD_EXP 85
26870: AND
26871: IFFALSE 27011
26873: GO 26875
26875: DISABLE
26876: LD_INT 0
26878: PPUSH
26879: PPUSH
// begin ToLua ( displayPowell(); ) ;
26880: LD_STRING displayPowell();
26882: PPUSH
26883: CALL_OW 559
// uc_side := 0 ;
26887: LD_ADDR_OWVAR 20
26891: PUSH
26892: LD_INT 0
26894: ST_TO_ADDR
// uc_nation := 2 ;
26895: LD_ADDR_OWVAR 21
26899: PUSH
26900: LD_INT 2
26902: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26903: LD_ADDR_OWVAR 37
26907: PUSH
26908: LD_INT 14
26910: ST_TO_ADDR
// vc_engine := engine_siberite ;
26911: LD_ADDR_OWVAR 39
26915: PUSH
26916: LD_INT 3
26918: ST_TO_ADDR
// vc_control := control_apeman ;
26919: LD_ADDR_OWVAR 38
26923: PUSH
26924: LD_INT 5
26926: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26927: LD_ADDR_OWVAR 40
26931: PUSH
26932: LD_INT 29
26934: ST_TO_ADDR
// un := CreateVehicle ;
26935: LD_ADDR_VAR 0 2
26939: PUSH
26940: CALL_OW 45
26944: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26945: LD_VAR 0 2
26949: PPUSH
26950: LD_INT 1
26952: PPUSH
26953: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26957: LD_INT 35
26959: PPUSH
26960: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26964: LD_VAR 0 2
26968: PPUSH
26969: LD_INT 22
26971: PUSH
26972: LD_OWVAR 2
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PPUSH
26981: CALL_OW 69
26985: PPUSH
26986: LD_VAR 0 2
26990: PPUSH
26991: CALL_OW 74
26995: PPUSH
26996: CALL_OW 115
// until IsDead ( un ) ;
27000: LD_VAR 0 2
27004: PPUSH
27005: CALL_OW 301
27009: IFFALSE 26957
// end ;
27011: PPOPN 2
27013: END
// every 0 0$1 trigger StreamModeActive and sStu do
27014: LD_EXP 54
27018: PUSH
27019: LD_EXP 93
27023: AND
27024: IFFALSE 27040
27026: GO 27028
27028: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27029: LD_STRING displayStucuk();
27031: PPUSH
27032: CALL_OW 559
// ResetFog ;
27036: CALL_OW 335
// end ;
27040: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27041: LD_EXP 54
27045: PUSH
27046: LD_EXP 86
27050: AND
27051: IFFALSE 27192
27053: GO 27055
27055: DISABLE
27056: LD_INT 0
27058: PPUSH
27059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27060: LD_ADDR_VAR 0 2
27064: PUSH
27065: LD_INT 22
27067: PUSH
27068: LD_OWVAR 2
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: PUSH
27077: LD_INT 21
27079: PUSH
27080: LD_INT 1
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PPUSH
27091: CALL_OW 69
27095: ST_TO_ADDR
// if not tmp then
27096: LD_VAR 0 2
27100: NOT
27101: IFFALSE 27105
// exit ;
27103: GO 27192
// un := tmp [ rand ( 1 , tmp ) ] ;
27105: LD_ADDR_VAR 0 1
27109: PUSH
27110: LD_VAR 0 2
27114: PUSH
27115: LD_INT 1
27117: PPUSH
27118: LD_VAR 0 2
27122: PPUSH
27123: CALL_OW 12
27127: ARRAY
27128: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27129: LD_VAR 0 1
27133: PPUSH
27134: LD_INT 0
27136: PPUSH
27137: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27141: LD_VAR 0 1
27145: PPUSH
27146: LD_OWVAR 3
27150: PUSH
27151: LD_VAR 0 1
27155: DIFF
27156: PPUSH
27157: LD_VAR 0 1
27161: PPUSH
27162: CALL_OW 74
27166: PPUSH
27167: CALL_OW 115
// wait ( 0 0$20 ) ;
27171: LD_INT 700
27173: PPUSH
27174: CALL_OW 67
// SetSide ( un , your_side ) ;
27178: LD_VAR 0 1
27182: PPUSH
27183: LD_OWVAR 2
27187: PPUSH
27188: CALL_OW 235
// end ;
27192: PPOPN 2
27194: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27195: LD_EXP 54
27199: PUSH
27200: LD_EXP 87
27204: AND
27205: IFFALSE 27311
27207: GO 27209
27209: DISABLE
27210: LD_INT 0
27212: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27213: LD_ADDR_VAR 0 1
27217: PUSH
27218: LD_INT 22
27220: PUSH
27221: LD_OWVAR 2
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: LD_INT 2
27232: PUSH
27233: LD_INT 30
27235: PUSH
27236: LD_INT 0
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: PUSH
27243: LD_INT 30
27245: PUSH
27246: LD_INT 1
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: LIST
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PPUSH
27262: CALL_OW 69
27266: ST_TO_ADDR
// if not depot then
27267: LD_VAR 0 1
27271: NOT
27272: IFFALSE 27276
// exit ;
27274: GO 27311
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27276: LD_VAR 0 1
27280: PUSH
27281: LD_INT 1
27283: ARRAY
27284: PPUSH
27285: CALL_OW 250
27289: PPUSH
27290: LD_VAR 0 1
27294: PUSH
27295: LD_INT 1
27297: ARRAY
27298: PPUSH
27299: CALL_OW 251
27303: PPUSH
27304: LD_INT 70
27306: PPUSH
27307: CALL_OW 495
// end ;
27311: PPOPN 1
27313: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
27314: LD_EXP 54
27318: PUSH
27319: LD_EXP 88
27323: AND
27324: IFFALSE 27535
27326: GO 27328
27328: DISABLE
27329: LD_INT 0
27331: PPUSH
27332: PPUSH
27333: PPUSH
27334: PPUSH
27335: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27336: LD_ADDR_VAR 0 5
27340: PUSH
27341: LD_INT 22
27343: PUSH
27344: LD_OWVAR 2
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PUSH
27353: LD_INT 21
27355: PUSH
27356: LD_INT 1
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PPUSH
27367: CALL_OW 69
27371: ST_TO_ADDR
// if not tmp then
27372: LD_VAR 0 5
27376: NOT
27377: IFFALSE 27381
// exit ;
27379: GO 27535
// for i in tmp do
27381: LD_ADDR_VAR 0 1
27385: PUSH
27386: LD_VAR 0 5
27390: PUSH
27391: FOR_IN
27392: IFFALSE 27533
// begin d := rand ( 0 , 5 ) ;
27394: LD_ADDR_VAR 0 4
27398: PUSH
27399: LD_INT 0
27401: PPUSH
27402: LD_INT 5
27404: PPUSH
27405: CALL_OW 12
27409: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
27410: LD_ADDR_VAR 0 2
27414: PUSH
27415: LD_VAR 0 1
27419: PPUSH
27420: CALL_OW 250
27424: PPUSH
27425: LD_VAR 0 4
27429: PPUSH
27430: LD_INT 3
27432: PPUSH
27433: LD_INT 12
27435: PPUSH
27436: CALL_OW 12
27440: PPUSH
27441: CALL_OW 272
27445: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
27446: LD_ADDR_VAR 0 3
27450: PUSH
27451: LD_VAR 0 1
27455: PPUSH
27456: CALL_OW 251
27460: PPUSH
27461: LD_VAR 0 4
27465: PPUSH
27466: LD_INT 3
27468: PPUSH
27469: LD_INT 12
27471: PPUSH
27472: CALL_OW 12
27476: PPUSH
27477: CALL_OW 273
27481: ST_TO_ADDR
// if ValidHex ( x , y ) then
27482: LD_VAR 0 2
27486: PPUSH
27487: LD_VAR 0 3
27491: PPUSH
27492: CALL_OW 488
27496: IFFALSE 27531
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
27498: LD_VAR 0 1
27502: PPUSH
27503: LD_VAR 0 2
27507: PPUSH
27508: LD_VAR 0 3
27512: PPUSH
27513: LD_INT 3
27515: PPUSH
27516: LD_INT 6
27518: PPUSH
27519: CALL_OW 12
27523: PPUSH
27524: LD_INT 1
27526: PPUSH
27527: CALL_OW 483
// end ;
27531: GO 27391
27533: POP
27534: POP
// end ;
27535: PPOPN 5
27537: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
27538: LD_EXP 54
27542: PUSH
27543: LD_EXP 89
27547: AND
27548: IFFALSE 27642
27550: GO 27552
27552: DISABLE
27553: LD_INT 0
27555: PPUSH
27556: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
27557: LD_ADDR_VAR 0 2
27561: PUSH
27562: LD_INT 22
27564: PUSH
27565: LD_OWVAR 2
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: LD_INT 32
27576: PUSH
27577: LD_INT 1
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PUSH
27584: LD_INT 21
27586: PUSH
27587: LD_INT 2
27589: PUSH
27590: EMPTY
27591: LIST
27592: LIST
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: LIST
27598: PPUSH
27599: CALL_OW 69
27603: ST_TO_ADDR
// if not tmp then
27604: LD_VAR 0 2
27608: NOT
27609: IFFALSE 27613
// exit ;
27611: GO 27642
// for i in tmp do
27613: LD_ADDR_VAR 0 1
27617: PUSH
27618: LD_VAR 0 2
27622: PUSH
27623: FOR_IN
27624: IFFALSE 27640
// SetFuel ( i , 0 ) ;
27626: LD_VAR 0 1
27630: PPUSH
27631: LD_INT 0
27633: PPUSH
27634: CALL_OW 240
27638: GO 27623
27640: POP
27641: POP
// end ;
27642: PPOPN 2
27644: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
27645: LD_EXP 54
27649: PUSH
27650: LD_EXP 90
27654: AND
27655: IFFALSE 27721
27657: GO 27659
27659: DISABLE
27660: LD_INT 0
27662: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27663: LD_ADDR_VAR 0 1
27667: PUSH
27668: LD_INT 22
27670: PUSH
27671: LD_OWVAR 2
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: PUSH
27680: LD_INT 30
27682: PUSH
27683: LD_INT 29
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: PPUSH
27694: CALL_OW 69
27698: ST_TO_ADDR
// if not tmp then
27699: LD_VAR 0 1
27703: NOT
27704: IFFALSE 27708
// exit ;
27706: GO 27721
// DestroyUnit ( tmp [ 1 ] ) ;
27708: LD_VAR 0 1
27712: PUSH
27713: LD_INT 1
27715: ARRAY
27716: PPUSH
27717: CALL_OW 65
// end ;
27721: PPOPN 1
27723: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27724: LD_EXP 54
27728: PUSH
27729: LD_EXP 92
27733: AND
27734: IFFALSE 27863
27736: GO 27738
27738: DISABLE
27739: LD_INT 0
27741: PPUSH
// begin uc_side := 0 ;
27742: LD_ADDR_OWVAR 20
27746: PUSH
27747: LD_INT 0
27749: ST_TO_ADDR
// uc_nation := nation_arabian ;
27750: LD_ADDR_OWVAR 21
27754: PUSH
27755: LD_INT 2
27757: ST_TO_ADDR
// hc_gallery :=  ;
27758: LD_ADDR_OWVAR 33
27762: PUSH
27763: LD_STRING 
27765: ST_TO_ADDR
// hc_name :=  ;
27766: LD_ADDR_OWVAR 26
27770: PUSH
27771: LD_STRING 
27773: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27774: LD_INT 1
27776: PPUSH
27777: LD_INT 11
27779: PPUSH
27780: LD_INT 10
27782: PPUSH
27783: CALL_OW 380
// un := CreateHuman ;
27787: LD_ADDR_VAR 0 1
27791: PUSH
27792: CALL_OW 44
27796: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27797: LD_VAR 0 1
27801: PPUSH
27802: LD_INT 1
27804: PPUSH
27805: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27809: LD_INT 35
27811: PPUSH
27812: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27816: LD_VAR 0 1
27820: PPUSH
27821: LD_INT 22
27823: PUSH
27824: LD_OWVAR 2
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PPUSH
27833: CALL_OW 69
27837: PPUSH
27838: LD_VAR 0 1
27842: PPUSH
27843: CALL_OW 74
27847: PPUSH
27848: CALL_OW 115
// until IsDead ( un ) ;
27852: LD_VAR 0 1
27856: PPUSH
27857: CALL_OW 301
27861: IFFALSE 27809
// end ;
27863: PPOPN 1
27865: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27866: LD_EXP 54
27870: PUSH
27871: LD_EXP 94
27875: AND
27876: IFFALSE 27888
27878: GO 27880
27880: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27881: LD_STRING earthquake(getX(game), 0, 32)
27883: PPUSH
27884: CALL_OW 559
27888: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27889: LD_EXP 54
27893: PUSH
27894: LD_EXP 95
27898: AND
27899: IFFALSE 27990
27901: GO 27903
27903: DISABLE
27904: LD_INT 0
27906: PPUSH
// begin enable ;
27907: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27908: LD_ADDR_VAR 0 1
27912: PUSH
27913: LD_INT 22
27915: PUSH
27916: LD_OWVAR 2
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 21
27927: PUSH
27928: LD_INT 2
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PUSH
27935: LD_INT 33
27937: PUSH
27938: LD_INT 3
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: LIST
27949: PPUSH
27950: CALL_OW 69
27954: ST_TO_ADDR
// if not tmp then
27955: LD_VAR 0 1
27959: NOT
27960: IFFALSE 27964
// exit ;
27962: GO 27990
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27964: LD_VAR 0 1
27968: PUSH
27969: LD_INT 1
27971: PPUSH
27972: LD_VAR 0 1
27976: PPUSH
27977: CALL_OW 12
27981: ARRAY
27982: PPUSH
27983: LD_INT 1
27985: PPUSH
27986: CALL_OW 234
// end ;
27990: PPOPN 1
27992: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27993: LD_EXP 54
27997: PUSH
27998: LD_EXP 96
28002: AND
28003: IFFALSE 28144
28005: GO 28007
28007: DISABLE
28008: LD_INT 0
28010: PPUSH
28011: PPUSH
28012: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28013: LD_ADDR_VAR 0 3
28017: PUSH
28018: LD_INT 22
28020: PUSH
28021: LD_OWVAR 2
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PUSH
28030: LD_INT 25
28032: PUSH
28033: LD_INT 1
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PPUSH
28044: CALL_OW 69
28048: ST_TO_ADDR
// if not tmp then
28049: LD_VAR 0 3
28053: NOT
28054: IFFALSE 28058
// exit ;
28056: GO 28144
// un := tmp [ rand ( 1 , tmp ) ] ;
28058: LD_ADDR_VAR 0 2
28062: PUSH
28063: LD_VAR 0 3
28067: PUSH
28068: LD_INT 1
28070: PPUSH
28071: LD_VAR 0 3
28075: PPUSH
28076: CALL_OW 12
28080: ARRAY
28081: ST_TO_ADDR
// if Crawls ( un ) then
28082: LD_VAR 0 2
28086: PPUSH
28087: CALL_OW 318
28091: IFFALSE 28102
// ComWalk ( un ) ;
28093: LD_VAR 0 2
28097: PPUSH
28098: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28102: LD_VAR 0 2
28106: PPUSH
28107: LD_INT 9
28109: PPUSH
28110: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28114: LD_INT 28
28116: PPUSH
28117: LD_OWVAR 2
28121: PPUSH
28122: LD_INT 2
28124: PPUSH
28125: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28129: LD_INT 29
28131: PPUSH
28132: LD_OWVAR 2
28136: PPUSH
28137: LD_INT 2
28139: PPUSH
28140: CALL_OW 322
// end ;
28144: PPOPN 3
28146: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28147: LD_EXP 54
28151: PUSH
28152: LD_EXP 97
28156: AND
28157: IFFALSE 28268
28159: GO 28161
28161: DISABLE
28162: LD_INT 0
28164: PPUSH
28165: PPUSH
28166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28167: LD_ADDR_VAR 0 3
28171: PUSH
28172: LD_INT 22
28174: PUSH
28175: LD_OWVAR 2
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: LD_INT 25
28186: PUSH
28187: LD_INT 1
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PPUSH
28198: CALL_OW 69
28202: ST_TO_ADDR
// if not tmp then
28203: LD_VAR 0 3
28207: NOT
28208: IFFALSE 28212
// exit ;
28210: GO 28268
// un := tmp [ rand ( 1 , tmp ) ] ;
28212: LD_ADDR_VAR 0 2
28216: PUSH
28217: LD_VAR 0 3
28221: PUSH
28222: LD_INT 1
28224: PPUSH
28225: LD_VAR 0 3
28229: PPUSH
28230: CALL_OW 12
28234: ARRAY
28235: ST_TO_ADDR
// if Crawls ( un ) then
28236: LD_VAR 0 2
28240: PPUSH
28241: CALL_OW 318
28245: IFFALSE 28256
// ComWalk ( un ) ;
28247: LD_VAR 0 2
28251: PPUSH
28252: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28256: LD_VAR 0 2
28260: PPUSH
28261: LD_INT 8
28263: PPUSH
28264: CALL_OW 336
// end ;
28268: PPOPN 3
28270: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28271: LD_EXP 54
28275: PUSH
28276: LD_EXP 98
28280: AND
28281: IFFALSE 28425
28283: GO 28285
28285: DISABLE
28286: LD_INT 0
28288: PPUSH
28289: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28290: LD_ADDR_VAR 0 2
28294: PUSH
28295: LD_INT 22
28297: PUSH
28298: LD_OWVAR 2
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: LD_INT 21
28309: PUSH
28310: LD_INT 2
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_INT 2
28319: PUSH
28320: LD_INT 34
28322: PUSH
28323: LD_INT 12
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: LD_INT 34
28332: PUSH
28333: LD_INT 51
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: PUSH
28340: LD_INT 34
28342: PUSH
28343: LD_INT 32
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: LIST
28360: PPUSH
28361: CALL_OW 69
28365: ST_TO_ADDR
// if not tmp then
28366: LD_VAR 0 2
28370: NOT
28371: IFFALSE 28375
// exit ;
28373: GO 28425
// for i in tmp do
28375: LD_ADDR_VAR 0 1
28379: PUSH
28380: LD_VAR 0 2
28384: PUSH
28385: FOR_IN
28386: IFFALSE 28423
// if GetCargo ( i , mat_artifact ) = 0 then
28388: LD_VAR 0 1
28392: PPUSH
28393: LD_INT 4
28395: PPUSH
28396: CALL_OW 289
28400: PUSH
28401: LD_INT 0
28403: EQUAL
28404: IFFALSE 28421
// SetCargo ( i , mat_siberit , 100 ) ;
28406: LD_VAR 0 1
28410: PPUSH
28411: LD_INT 3
28413: PPUSH
28414: LD_INT 100
28416: PPUSH
28417: CALL_OW 290
28421: GO 28385
28423: POP
28424: POP
// end ;
28425: PPOPN 2
28427: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
28428: LD_EXP 54
28432: PUSH
28433: LD_EXP 99
28437: AND
28438: IFFALSE 28621
28440: GO 28442
28442: DISABLE
28443: LD_INT 0
28445: PPUSH
28446: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28447: LD_ADDR_VAR 0 2
28451: PUSH
28452: LD_INT 22
28454: PUSH
28455: LD_OWVAR 2
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: PPUSH
28464: CALL_OW 69
28468: ST_TO_ADDR
// if not tmp then
28469: LD_VAR 0 2
28473: NOT
28474: IFFALSE 28478
// exit ;
28476: GO 28621
// for i := 1 to 2 do
28478: LD_ADDR_VAR 0 1
28482: PUSH
28483: DOUBLE
28484: LD_INT 1
28486: DEC
28487: ST_TO_ADDR
28488: LD_INT 2
28490: PUSH
28491: FOR_TO
28492: IFFALSE 28619
// begin uc_side := your_side ;
28494: LD_ADDR_OWVAR 20
28498: PUSH
28499: LD_OWVAR 2
28503: ST_TO_ADDR
// uc_nation := nation_american ;
28504: LD_ADDR_OWVAR 21
28508: PUSH
28509: LD_INT 1
28511: ST_TO_ADDR
// vc_chassis := us_morphling ;
28512: LD_ADDR_OWVAR 37
28516: PUSH
28517: LD_INT 5
28519: ST_TO_ADDR
// vc_engine := engine_siberite ;
28520: LD_ADDR_OWVAR 39
28524: PUSH
28525: LD_INT 3
28527: ST_TO_ADDR
// vc_control := control_computer ;
28528: LD_ADDR_OWVAR 38
28532: PUSH
28533: LD_INT 3
28535: ST_TO_ADDR
// vc_weapon := us_double_laser ;
28536: LD_ADDR_OWVAR 40
28540: PUSH
28541: LD_INT 10
28543: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
28544: LD_VAR 0 2
28548: PUSH
28549: LD_INT 1
28551: ARRAY
28552: PPUSH
28553: CALL_OW 310
28557: NOT
28558: IFFALSE 28605
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
28560: CALL_OW 45
28564: PPUSH
28565: LD_VAR 0 2
28569: PUSH
28570: LD_INT 1
28572: ARRAY
28573: PPUSH
28574: CALL_OW 250
28578: PPUSH
28579: LD_VAR 0 2
28583: PUSH
28584: LD_INT 1
28586: ARRAY
28587: PPUSH
28588: CALL_OW 251
28592: PPUSH
28593: LD_INT 12
28595: PPUSH
28596: LD_INT 1
28598: PPUSH
28599: CALL_OW 50
28603: GO 28617
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
28605: CALL_OW 45
28609: PPUSH
28610: LD_INT 1
28612: PPUSH
28613: CALL_OW 51
// end ;
28617: GO 28491
28619: POP
28620: POP
// end ;
28621: PPOPN 2
28623: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
28624: LD_EXP 54
28628: PUSH
28629: LD_EXP 100
28633: AND
28634: IFFALSE 28856
28636: GO 28638
28638: DISABLE
28639: LD_INT 0
28641: PPUSH
28642: PPUSH
28643: PPUSH
28644: PPUSH
28645: PPUSH
28646: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28647: LD_ADDR_VAR 0 6
28651: PUSH
28652: LD_INT 22
28654: PUSH
28655: LD_OWVAR 2
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: PUSH
28664: LD_INT 21
28666: PUSH
28667: LD_INT 1
28669: PUSH
28670: EMPTY
28671: LIST
28672: LIST
28673: PUSH
28674: LD_INT 3
28676: PUSH
28677: LD_INT 23
28679: PUSH
28680: LD_INT 0
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: LIST
28695: PPUSH
28696: CALL_OW 69
28700: ST_TO_ADDR
// if not tmp then
28701: LD_VAR 0 6
28705: NOT
28706: IFFALSE 28710
// exit ;
28708: GO 28856
// s1 := rand ( 1 , 4 ) ;
28710: LD_ADDR_VAR 0 2
28714: PUSH
28715: LD_INT 1
28717: PPUSH
28718: LD_INT 4
28720: PPUSH
28721: CALL_OW 12
28725: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28726: LD_ADDR_VAR 0 4
28730: PUSH
28731: LD_VAR 0 6
28735: PUSH
28736: LD_INT 1
28738: ARRAY
28739: PPUSH
28740: LD_VAR 0 2
28744: PPUSH
28745: CALL_OW 259
28749: ST_TO_ADDR
// if s1 = 1 then
28750: LD_VAR 0 2
28754: PUSH
28755: LD_INT 1
28757: EQUAL
28758: IFFALSE 28778
// s2 := rand ( 2 , 4 ) else
28760: LD_ADDR_VAR 0 3
28764: PUSH
28765: LD_INT 2
28767: PPUSH
28768: LD_INT 4
28770: PPUSH
28771: CALL_OW 12
28775: ST_TO_ADDR
28776: GO 28786
// s2 := 1 ;
28778: LD_ADDR_VAR 0 3
28782: PUSH
28783: LD_INT 1
28785: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28786: LD_ADDR_VAR 0 5
28790: PUSH
28791: LD_VAR 0 6
28795: PUSH
28796: LD_INT 1
28798: ARRAY
28799: PPUSH
28800: LD_VAR 0 3
28804: PPUSH
28805: CALL_OW 259
28809: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28810: LD_VAR 0 6
28814: PUSH
28815: LD_INT 1
28817: ARRAY
28818: PPUSH
28819: LD_VAR 0 2
28823: PPUSH
28824: LD_VAR 0 5
28828: PPUSH
28829: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28833: LD_VAR 0 6
28837: PUSH
28838: LD_INT 1
28840: ARRAY
28841: PPUSH
28842: LD_VAR 0 3
28846: PPUSH
28847: LD_VAR 0 4
28851: PPUSH
28852: CALL_OW 237
// end ;
28856: PPOPN 6
28858: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28859: LD_EXP 54
28863: PUSH
28864: LD_EXP 101
28868: AND
28869: IFFALSE 28948
28871: GO 28873
28873: DISABLE
28874: LD_INT 0
28876: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28877: LD_ADDR_VAR 0 1
28881: PUSH
28882: LD_INT 22
28884: PUSH
28885: LD_OWVAR 2
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PUSH
28894: LD_INT 30
28896: PUSH
28897: LD_INT 3
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PPUSH
28908: CALL_OW 69
28912: ST_TO_ADDR
// if not tmp then
28913: LD_VAR 0 1
28917: NOT
28918: IFFALSE 28922
// exit ;
28920: GO 28948
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28922: LD_VAR 0 1
28926: PUSH
28927: LD_INT 1
28929: PPUSH
28930: LD_VAR 0 1
28934: PPUSH
28935: CALL_OW 12
28939: ARRAY
28940: PPUSH
28941: LD_INT 1
28943: PPUSH
28944: CALL_OW 234
// end ;
28948: PPOPN 1
28950: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28951: LD_EXP 54
28955: PUSH
28956: LD_EXP 102
28960: AND
28961: IFFALSE 29073
28963: GO 28965
28965: DISABLE
28966: LD_INT 0
28968: PPUSH
28969: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28970: LD_ADDR_VAR 0 2
28974: PUSH
28975: LD_INT 22
28977: PUSH
28978: LD_OWVAR 2
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 2
28989: PUSH
28990: LD_INT 30
28992: PUSH
28993: LD_INT 27
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_INT 30
29002: PUSH
29003: LD_INT 26
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 30
29012: PUSH
29013: LD_INT 28
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: PPUSH
29030: CALL_OW 69
29034: ST_TO_ADDR
// if not tmp then
29035: LD_VAR 0 2
29039: NOT
29040: IFFALSE 29044
// exit ;
29042: GO 29073
// for i in tmp do
29044: LD_ADDR_VAR 0 1
29048: PUSH
29049: LD_VAR 0 2
29053: PUSH
29054: FOR_IN
29055: IFFALSE 29071
// SetLives ( i , 1 ) ;
29057: LD_VAR 0 1
29061: PPUSH
29062: LD_INT 1
29064: PPUSH
29065: CALL_OW 234
29069: GO 29054
29071: POP
29072: POP
// end ;
29073: PPOPN 2
29075: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29076: LD_EXP 54
29080: PUSH
29081: LD_EXP 103
29085: AND
29086: IFFALSE 29373
29088: GO 29090
29090: DISABLE
29091: LD_INT 0
29093: PPUSH
29094: PPUSH
29095: PPUSH
// begin i := rand ( 1 , 7 ) ;
29096: LD_ADDR_VAR 0 1
29100: PUSH
29101: LD_INT 1
29103: PPUSH
29104: LD_INT 7
29106: PPUSH
29107: CALL_OW 12
29111: ST_TO_ADDR
// case i of 1 :
29112: LD_VAR 0 1
29116: PUSH
29117: LD_INT 1
29119: DOUBLE
29120: EQUAL
29121: IFTRUE 29125
29123: GO 29135
29125: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29126: LD_STRING earthquake(getX(game), 0, 32)
29128: PPUSH
29129: CALL_OW 559
29133: GO 29373
29135: LD_INT 2
29137: DOUBLE
29138: EQUAL
29139: IFTRUE 29143
29141: GO 29157
29143: POP
// begin ToLua ( displayStucuk(); ) ;
29144: LD_STRING displayStucuk();
29146: PPUSH
29147: CALL_OW 559
// ResetFog ;
29151: CALL_OW 335
// end ; 3 :
29155: GO 29373
29157: LD_INT 3
29159: DOUBLE
29160: EQUAL
29161: IFTRUE 29165
29163: GO 29269
29165: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29166: LD_ADDR_VAR 0 2
29170: PUSH
29171: LD_INT 22
29173: PUSH
29174: LD_OWVAR 2
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 25
29185: PUSH
29186: LD_INT 1
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PPUSH
29197: CALL_OW 69
29201: ST_TO_ADDR
// if not tmp then
29202: LD_VAR 0 2
29206: NOT
29207: IFFALSE 29211
// exit ;
29209: GO 29373
// un := tmp [ rand ( 1 , tmp ) ] ;
29211: LD_ADDR_VAR 0 3
29215: PUSH
29216: LD_VAR 0 2
29220: PUSH
29221: LD_INT 1
29223: PPUSH
29224: LD_VAR 0 2
29228: PPUSH
29229: CALL_OW 12
29233: ARRAY
29234: ST_TO_ADDR
// if Crawls ( un ) then
29235: LD_VAR 0 3
29239: PPUSH
29240: CALL_OW 318
29244: IFFALSE 29255
// ComWalk ( un ) ;
29246: LD_VAR 0 3
29250: PPUSH
29251: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29255: LD_VAR 0 3
29259: PPUSH
29260: LD_INT 8
29262: PPUSH
29263: CALL_OW 336
// end ; 4 :
29267: GO 29373
29269: LD_INT 4
29271: DOUBLE
29272: EQUAL
29273: IFTRUE 29277
29275: GO 29351
29277: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29278: LD_ADDR_VAR 0 2
29282: PUSH
29283: LD_INT 22
29285: PUSH
29286: LD_OWVAR 2
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: PUSH
29295: LD_INT 30
29297: PUSH
29298: LD_INT 29
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PPUSH
29309: CALL_OW 69
29313: ST_TO_ADDR
// if not tmp then
29314: LD_VAR 0 2
29318: NOT
29319: IFFALSE 29323
// exit ;
29321: GO 29373
// CenterNowOnUnits ( tmp [ 1 ] ) ;
29323: LD_VAR 0 2
29327: PUSH
29328: LD_INT 1
29330: ARRAY
29331: PPUSH
29332: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
29336: LD_VAR 0 2
29340: PUSH
29341: LD_INT 1
29343: ARRAY
29344: PPUSH
29345: CALL_OW 65
// end ; 5 .. 7 :
29349: GO 29373
29351: LD_INT 5
29353: DOUBLE
29354: GREATEREQUAL
29355: IFFALSE 29363
29357: LD_INT 7
29359: DOUBLE
29360: LESSEQUAL
29361: IFTRUE 29365
29363: GO 29372
29365: POP
// StreamSibBomb ; end ;
29366: CALL 25610 0 0
29370: GO 29373
29372: POP
// end ;
29373: PPOPN 3
29375: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
29376: LD_EXP 54
29380: PUSH
29381: LD_EXP 104
29385: AND
29386: IFFALSE 29542
29388: GO 29390
29390: DISABLE
29391: LD_INT 0
29393: PPUSH
29394: PPUSH
29395: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
29396: LD_ADDR_VAR 0 2
29400: PUSH
29401: LD_INT 81
29403: PUSH
29404: LD_OWVAR 2
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 2
29415: PUSH
29416: LD_INT 21
29418: PUSH
29419: LD_INT 1
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PUSH
29426: LD_INT 21
29428: PUSH
29429: LD_INT 2
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: LIST
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PPUSH
29445: CALL_OW 69
29449: ST_TO_ADDR
// if not tmp then
29450: LD_VAR 0 2
29454: NOT
29455: IFFALSE 29459
// exit ;
29457: GO 29542
// p := 0 ;
29459: LD_ADDR_VAR 0 3
29463: PUSH
29464: LD_INT 0
29466: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29467: LD_INT 35
29469: PPUSH
29470: CALL_OW 67
// p := p + 1 ;
29474: LD_ADDR_VAR 0 3
29478: PUSH
29479: LD_VAR 0 3
29483: PUSH
29484: LD_INT 1
29486: PLUS
29487: ST_TO_ADDR
// for i in tmp do
29488: LD_ADDR_VAR 0 1
29492: PUSH
29493: LD_VAR 0 2
29497: PUSH
29498: FOR_IN
29499: IFFALSE 29530
// if GetLives ( i ) < 1000 then
29501: LD_VAR 0 1
29505: PPUSH
29506: CALL_OW 256
29510: PUSH
29511: LD_INT 1000
29513: LESS
29514: IFFALSE 29528
// SetLives ( i , 1000 ) ;
29516: LD_VAR 0 1
29520: PPUSH
29521: LD_INT 1000
29523: PPUSH
29524: CALL_OW 234
29528: GO 29498
29530: POP
29531: POP
// until p > 20 ;
29532: LD_VAR 0 3
29536: PUSH
29537: LD_INT 20
29539: GREATER
29540: IFFALSE 29467
// end ;
29542: PPOPN 3
29544: END
// every 0 0$1 trigger StreamModeActive and sTime do
29545: LD_EXP 54
29549: PUSH
29550: LD_EXP 105
29554: AND
29555: IFFALSE 29590
29557: GO 29559
29559: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
29560: LD_INT 28
29562: PPUSH
29563: LD_OWVAR 2
29567: PPUSH
29568: LD_INT 2
29570: PPUSH
29571: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
29575: LD_INT 30
29577: PPUSH
29578: LD_OWVAR 2
29582: PPUSH
29583: LD_INT 2
29585: PPUSH
29586: CALL_OW 322
// end ;
29590: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
29591: LD_EXP 54
29595: PUSH
29596: LD_EXP 106
29600: AND
29601: IFFALSE 29722
29603: GO 29605
29605: DISABLE
29606: LD_INT 0
29608: PPUSH
29609: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29610: LD_ADDR_VAR 0 2
29614: PUSH
29615: LD_INT 22
29617: PUSH
29618: LD_OWVAR 2
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: PUSH
29627: LD_INT 21
29629: PUSH
29630: LD_INT 1
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: PUSH
29637: LD_INT 3
29639: PUSH
29640: LD_INT 23
29642: PUSH
29643: LD_INT 0
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: LIST
29658: PPUSH
29659: CALL_OW 69
29663: ST_TO_ADDR
// if not tmp then
29664: LD_VAR 0 2
29668: NOT
29669: IFFALSE 29673
// exit ;
29671: GO 29722
// for i in tmp do
29673: LD_ADDR_VAR 0 1
29677: PUSH
29678: LD_VAR 0 2
29682: PUSH
29683: FOR_IN
29684: IFFALSE 29720
// begin if Crawls ( i ) then
29686: LD_VAR 0 1
29690: PPUSH
29691: CALL_OW 318
29695: IFFALSE 29706
// ComWalk ( i ) ;
29697: LD_VAR 0 1
29701: PPUSH
29702: CALL_OW 138
// SetClass ( i , 2 ) ;
29706: LD_VAR 0 1
29710: PPUSH
29711: LD_INT 2
29713: PPUSH
29714: CALL_OW 336
// end ;
29718: GO 29683
29720: POP
29721: POP
// end ;
29722: PPOPN 2
29724: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29725: LD_EXP 54
29729: PUSH
29730: LD_EXP 107
29734: AND
29735: IFFALSE 30023
29737: GO 29739
29739: DISABLE
29740: LD_INT 0
29742: PPUSH
29743: PPUSH
29744: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29745: LD_OWVAR 2
29749: PPUSH
29750: LD_INT 9
29752: PPUSH
29753: LD_INT 1
29755: PPUSH
29756: LD_INT 1
29758: PPUSH
29759: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29763: LD_INT 9
29765: PPUSH
29766: LD_OWVAR 2
29770: PPUSH
29771: CALL_OW 343
// uc_side := 9 ;
29775: LD_ADDR_OWVAR 20
29779: PUSH
29780: LD_INT 9
29782: ST_TO_ADDR
// uc_nation := 2 ;
29783: LD_ADDR_OWVAR 21
29787: PUSH
29788: LD_INT 2
29790: ST_TO_ADDR
// hc_name := Dark Warrior ;
29791: LD_ADDR_OWVAR 26
29795: PUSH
29796: LD_STRING Dark Warrior
29798: ST_TO_ADDR
// hc_gallery :=  ;
29799: LD_ADDR_OWVAR 33
29803: PUSH
29804: LD_STRING 
29806: ST_TO_ADDR
// hc_noskilllimit := true ;
29807: LD_ADDR_OWVAR 76
29811: PUSH
29812: LD_INT 1
29814: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29815: LD_ADDR_OWVAR 31
29819: PUSH
29820: LD_INT 30
29822: PUSH
29823: LD_INT 30
29825: PUSH
29826: LD_INT 30
29828: PUSH
29829: LD_INT 30
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: ST_TO_ADDR
// un := CreateHuman ;
29838: LD_ADDR_VAR 0 3
29842: PUSH
29843: CALL_OW 44
29847: ST_TO_ADDR
// hc_noskilllimit := false ;
29848: LD_ADDR_OWVAR 76
29852: PUSH
29853: LD_INT 0
29855: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29856: LD_VAR 0 3
29860: PPUSH
29861: LD_INT 1
29863: PPUSH
29864: CALL_OW 51
// ToLua ( playRanger() ) ;
29868: LD_STRING playRanger()
29870: PPUSH
29871: CALL_OW 559
// p := 0 ;
29875: LD_ADDR_VAR 0 2
29879: PUSH
29880: LD_INT 0
29882: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29883: LD_INT 35
29885: PPUSH
29886: CALL_OW 67
// p := p + 1 ;
29890: LD_ADDR_VAR 0 2
29894: PUSH
29895: LD_VAR 0 2
29899: PUSH
29900: LD_INT 1
29902: PLUS
29903: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29904: LD_VAR 0 3
29908: PPUSH
29909: CALL_OW 256
29913: PUSH
29914: LD_INT 1000
29916: LESS
29917: IFFALSE 29931
// SetLives ( un , 1000 ) ;
29919: LD_VAR 0 3
29923: PPUSH
29924: LD_INT 1000
29926: PPUSH
29927: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29931: LD_VAR 0 3
29935: PPUSH
29936: LD_INT 81
29938: PUSH
29939: LD_OWVAR 2
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: LD_INT 91
29950: PUSH
29951: LD_VAR 0 3
29955: PUSH
29956: LD_INT 30
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: LIST
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PPUSH
29968: CALL_OW 69
29972: PPUSH
29973: LD_VAR 0 3
29977: PPUSH
29978: CALL_OW 74
29982: PPUSH
29983: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
29987: LD_VAR 0 2
29991: PUSH
29992: LD_INT 80
29994: GREATER
29995: PUSH
29996: LD_VAR 0 3
30000: PPUSH
30001: CALL_OW 301
30005: OR
30006: IFFALSE 29883
// if un then
30008: LD_VAR 0 3
30012: IFFALSE 30023
// RemoveUnit ( un ) ;
30014: LD_VAR 0 3
30018: PPUSH
30019: CALL_OW 64
// end ;
30023: PPOPN 3
30025: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
30026: LD_EXP 108
30030: IFFALSE 30146
30032: GO 30034
30034: DISABLE
30035: LD_INT 0
30037: PPUSH
30038: PPUSH
30039: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30040: LD_ADDR_VAR 0 2
30044: PUSH
30045: LD_INT 81
30047: PUSH
30048: LD_OWVAR 2
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: LD_INT 21
30059: PUSH
30060: LD_INT 1
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PPUSH
30071: CALL_OW 69
30075: ST_TO_ADDR
// ToLua ( playComputer() ) ;
30076: LD_STRING playComputer()
30078: PPUSH
30079: CALL_OW 559
// if not tmp then
30083: LD_VAR 0 2
30087: NOT
30088: IFFALSE 30092
// exit ;
30090: GO 30146
// for i in tmp do
30092: LD_ADDR_VAR 0 1
30096: PUSH
30097: LD_VAR 0 2
30101: PUSH
30102: FOR_IN
30103: IFFALSE 30144
// for j := 1 to 4 do
30105: LD_ADDR_VAR 0 3
30109: PUSH
30110: DOUBLE
30111: LD_INT 1
30113: DEC
30114: ST_TO_ADDR
30115: LD_INT 4
30117: PUSH
30118: FOR_TO
30119: IFFALSE 30140
// SetSkill ( i , j , 10 ) ;
30121: LD_VAR 0 1
30125: PPUSH
30126: LD_VAR 0 3
30130: PPUSH
30131: LD_INT 10
30133: PPUSH
30134: CALL_OW 237
30138: GO 30118
30140: POP
30141: POP
30142: GO 30102
30144: POP
30145: POP
// end ;
30146: PPOPN 3
30148: END
// every 0 0$1 trigger s30 do var i , tmp ;
30149: LD_EXP 109
30153: IFFALSE 30222
30155: GO 30157
30157: DISABLE
30158: LD_INT 0
30160: PPUSH
30161: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30162: LD_ADDR_VAR 0 2
30166: PUSH
30167: LD_INT 22
30169: PUSH
30170: LD_OWVAR 2
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PPUSH
30179: CALL_OW 69
30183: ST_TO_ADDR
// if not tmp then
30184: LD_VAR 0 2
30188: NOT
30189: IFFALSE 30193
// exit ;
30191: GO 30222
// for i in tmp do
30193: LD_ADDR_VAR 0 1
30197: PUSH
30198: LD_VAR 0 2
30202: PUSH
30203: FOR_IN
30204: IFFALSE 30220
// SetLives ( i , 300 ) ;
30206: LD_VAR 0 1
30210: PPUSH
30211: LD_INT 300
30213: PPUSH
30214: CALL_OW 234
30218: GO 30203
30220: POP
30221: POP
// end ;
30222: PPOPN 2
30224: END
// every 0 0$1 trigger s60 do var i , tmp ;
30225: LD_EXP 110
30229: IFFALSE 30298
30231: GO 30233
30233: DISABLE
30234: LD_INT 0
30236: PPUSH
30237: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30238: LD_ADDR_VAR 0 2
30242: PUSH
30243: LD_INT 22
30245: PUSH
30246: LD_OWVAR 2
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PPUSH
30255: CALL_OW 69
30259: ST_TO_ADDR
// if not tmp then
30260: LD_VAR 0 2
30264: NOT
30265: IFFALSE 30269
// exit ;
30267: GO 30298
// for i in tmp do
30269: LD_ADDR_VAR 0 1
30273: PUSH
30274: LD_VAR 0 2
30278: PUSH
30279: FOR_IN
30280: IFFALSE 30296
// SetLives ( i , 600 ) ;
30282: LD_VAR 0 1
30286: PPUSH
30287: LD_INT 600
30289: PPUSH
30290: CALL_OW 234
30294: GO 30279
30296: POP
30297: POP
// end ;
30298: PPOPN 2
30300: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30301: LD_INT 0
30303: PPUSH
// case cmd of 301 :
30304: LD_VAR 0 1
30308: PUSH
30309: LD_INT 301
30311: DOUBLE
30312: EQUAL
30313: IFTRUE 30317
30315: GO 30349
30317: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30318: LD_VAR 0 6
30322: PPUSH
30323: LD_VAR 0 7
30327: PPUSH
30328: LD_VAR 0 8
30332: PPUSH
30333: LD_VAR 0 4
30337: PPUSH
30338: LD_VAR 0 5
30342: PPUSH
30343: CALL 31558 0 5
30347: GO 30470
30349: LD_INT 302
30351: DOUBLE
30352: EQUAL
30353: IFTRUE 30357
30355: GO 30394
30357: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30358: LD_VAR 0 6
30362: PPUSH
30363: LD_VAR 0 7
30367: PPUSH
30368: LD_VAR 0 8
30372: PPUSH
30373: LD_VAR 0 9
30377: PPUSH
30378: LD_VAR 0 4
30382: PPUSH
30383: LD_VAR 0 5
30387: PPUSH
30388: CALL 31649 0 6
30392: GO 30470
30394: LD_INT 303
30396: DOUBLE
30397: EQUAL
30398: IFTRUE 30402
30400: GO 30439
30402: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30403: LD_VAR 0 6
30407: PPUSH
30408: LD_VAR 0 7
30412: PPUSH
30413: LD_VAR 0 8
30417: PPUSH
30418: LD_VAR 0 9
30422: PPUSH
30423: LD_VAR 0 4
30427: PPUSH
30428: LD_VAR 0 5
30432: PPUSH
30433: CALL 30475 0 6
30437: GO 30470
30439: LD_INT 304
30441: DOUBLE
30442: EQUAL
30443: IFTRUE 30447
30445: GO 30469
30447: POP
// hHackTeleport ( unit , x , y ) ; end ;
30448: LD_VAR 0 2
30452: PPUSH
30453: LD_VAR 0 4
30457: PPUSH
30458: LD_VAR 0 5
30462: PPUSH
30463: CALL 32242 0 3
30467: GO 30470
30469: POP
// end ;
30470: LD_VAR 0 12
30474: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
30475: LD_INT 0
30477: PPUSH
30478: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
30479: LD_VAR 0 1
30483: PUSH
30484: LD_INT 1
30486: LESS
30487: PUSH
30488: LD_VAR 0 1
30492: PUSH
30493: LD_INT 3
30495: GREATER
30496: OR
30497: PUSH
30498: LD_VAR 0 5
30502: PPUSH
30503: LD_VAR 0 6
30507: PPUSH
30508: CALL_OW 428
30512: OR
30513: IFFALSE 30517
// exit ;
30515: GO 31245
// uc_side := your_side ;
30517: LD_ADDR_OWVAR 20
30521: PUSH
30522: LD_OWVAR 2
30526: ST_TO_ADDR
// uc_nation := nation ;
30527: LD_ADDR_OWVAR 21
30531: PUSH
30532: LD_VAR 0 1
30536: ST_TO_ADDR
// bc_level = 1 ;
30537: LD_ADDR_OWVAR 43
30541: PUSH
30542: LD_INT 1
30544: ST_TO_ADDR
// case btype of 1 :
30545: LD_VAR 0 2
30549: PUSH
30550: LD_INT 1
30552: DOUBLE
30553: EQUAL
30554: IFTRUE 30558
30556: GO 30569
30558: POP
// bc_type := b_depot ; 2 :
30559: LD_ADDR_OWVAR 42
30563: PUSH
30564: LD_INT 0
30566: ST_TO_ADDR
30567: GO 31189
30569: LD_INT 2
30571: DOUBLE
30572: EQUAL
30573: IFTRUE 30577
30575: GO 30588
30577: POP
// bc_type := b_warehouse ; 3 :
30578: LD_ADDR_OWVAR 42
30582: PUSH
30583: LD_INT 1
30585: ST_TO_ADDR
30586: GO 31189
30588: LD_INT 3
30590: DOUBLE
30591: EQUAL
30592: IFTRUE 30596
30594: GO 30607
30596: POP
// bc_type := b_lab ; 4 .. 9 :
30597: LD_ADDR_OWVAR 42
30601: PUSH
30602: LD_INT 6
30604: ST_TO_ADDR
30605: GO 31189
30607: LD_INT 4
30609: DOUBLE
30610: GREATEREQUAL
30611: IFFALSE 30619
30613: LD_INT 9
30615: DOUBLE
30616: LESSEQUAL
30617: IFTRUE 30621
30619: GO 30681
30621: POP
// begin bc_type := b_lab_half ;
30622: LD_ADDR_OWVAR 42
30626: PUSH
30627: LD_INT 7
30629: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
30630: LD_ADDR_OWVAR 44
30634: PUSH
30635: LD_INT 10
30637: PUSH
30638: LD_INT 11
30640: PUSH
30641: LD_INT 12
30643: PUSH
30644: LD_INT 15
30646: PUSH
30647: LD_INT 14
30649: PUSH
30650: LD_INT 13
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: PUSH
30661: LD_VAR 0 2
30665: PUSH
30666: LD_INT 3
30668: MINUS
30669: ARRAY
30670: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
30671: LD_ADDR_OWVAR 45
30675: PUSH
30676: LD_INT 9
30678: ST_TO_ADDR
// end ; 10 .. 13 :
30679: GO 31189
30681: LD_INT 10
30683: DOUBLE
30684: GREATEREQUAL
30685: IFFALSE 30693
30687: LD_INT 13
30689: DOUBLE
30690: LESSEQUAL
30691: IFTRUE 30695
30693: GO 30772
30695: POP
// begin bc_type := b_lab_full ;
30696: LD_ADDR_OWVAR 42
30700: PUSH
30701: LD_INT 8
30703: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30704: LD_ADDR_OWVAR 44
30708: PUSH
30709: LD_INT 10
30711: PUSH
30712: LD_INT 12
30714: PUSH
30715: LD_INT 14
30717: PUSH
30718: LD_INT 13
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: PUSH
30727: LD_VAR 0 2
30731: PUSH
30732: LD_INT 9
30734: MINUS
30735: ARRAY
30736: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30737: LD_ADDR_OWVAR 45
30741: PUSH
30742: LD_INT 11
30744: PUSH
30745: LD_INT 15
30747: PUSH
30748: LD_INT 12
30750: PUSH
30751: LD_INT 15
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: PUSH
30760: LD_VAR 0 2
30764: PUSH
30765: LD_INT 9
30767: MINUS
30768: ARRAY
30769: ST_TO_ADDR
// end ; 14 :
30770: GO 31189
30772: LD_INT 14
30774: DOUBLE
30775: EQUAL
30776: IFTRUE 30780
30778: GO 30791
30780: POP
// bc_type := b_workshop ; 15 :
30781: LD_ADDR_OWVAR 42
30785: PUSH
30786: LD_INT 2
30788: ST_TO_ADDR
30789: GO 31189
30791: LD_INT 15
30793: DOUBLE
30794: EQUAL
30795: IFTRUE 30799
30797: GO 30810
30799: POP
// bc_type := b_factory ; 16 :
30800: LD_ADDR_OWVAR 42
30804: PUSH
30805: LD_INT 3
30807: ST_TO_ADDR
30808: GO 31189
30810: LD_INT 16
30812: DOUBLE
30813: EQUAL
30814: IFTRUE 30818
30816: GO 30829
30818: POP
// bc_type := b_ext_gun ; 17 :
30819: LD_ADDR_OWVAR 42
30823: PUSH
30824: LD_INT 17
30826: ST_TO_ADDR
30827: GO 31189
30829: LD_INT 17
30831: DOUBLE
30832: EQUAL
30833: IFTRUE 30837
30835: GO 30865
30837: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30838: LD_ADDR_OWVAR 42
30842: PUSH
30843: LD_INT 19
30845: PUSH
30846: LD_INT 23
30848: PUSH
30849: LD_INT 19
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: LIST
30856: PUSH
30857: LD_VAR 0 1
30861: ARRAY
30862: ST_TO_ADDR
30863: GO 31189
30865: LD_INT 18
30867: DOUBLE
30868: EQUAL
30869: IFTRUE 30873
30871: GO 30884
30873: POP
// bc_type := b_ext_radar ; 19 :
30874: LD_ADDR_OWVAR 42
30878: PUSH
30879: LD_INT 20
30881: ST_TO_ADDR
30882: GO 31189
30884: LD_INT 19
30886: DOUBLE
30887: EQUAL
30888: IFTRUE 30892
30890: GO 30903
30892: POP
// bc_type := b_ext_radio ; 20 :
30893: LD_ADDR_OWVAR 42
30897: PUSH
30898: LD_INT 22
30900: ST_TO_ADDR
30901: GO 31189
30903: LD_INT 20
30905: DOUBLE
30906: EQUAL
30907: IFTRUE 30911
30909: GO 30922
30911: POP
// bc_type := b_ext_siberium ; 21 :
30912: LD_ADDR_OWVAR 42
30916: PUSH
30917: LD_INT 21
30919: ST_TO_ADDR
30920: GO 31189
30922: LD_INT 21
30924: DOUBLE
30925: EQUAL
30926: IFTRUE 30930
30928: GO 30941
30930: POP
// bc_type := b_ext_computer ; 22 :
30931: LD_ADDR_OWVAR 42
30935: PUSH
30936: LD_INT 24
30938: ST_TO_ADDR
30939: GO 31189
30941: LD_INT 22
30943: DOUBLE
30944: EQUAL
30945: IFTRUE 30949
30947: GO 30960
30949: POP
// bc_type := b_ext_track ; 23 :
30950: LD_ADDR_OWVAR 42
30954: PUSH
30955: LD_INT 16
30957: ST_TO_ADDR
30958: GO 31189
30960: LD_INT 23
30962: DOUBLE
30963: EQUAL
30964: IFTRUE 30968
30966: GO 30979
30968: POP
// bc_type := b_ext_laser ; 24 :
30969: LD_ADDR_OWVAR 42
30973: PUSH
30974: LD_INT 25
30976: ST_TO_ADDR
30977: GO 31189
30979: LD_INT 24
30981: DOUBLE
30982: EQUAL
30983: IFTRUE 30987
30985: GO 30998
30987: POP
// bc_type := b_control_tower ; 25 :
30988: LD_ADDR_OWVAR 42
30992: PUSH
30993: LD_INT 36
30995: ST_TO_ADDR
30996: GO 31189
30998: LD_INT 25
31000: DOUBLE
31001: EQUAL
31002: IFTRUE 31006
31004: GO 31017
31006: POP
// bc_type := b_breastwork ; 26 :
31007: LD_ADDR_OWVAR 42
31011: PUSH
31012: LD_INT 31
31014: ST_TO_ADDR
31015: GO 31189
31017: LD_INT 26
31019: DOUBLE
31020: EQUAL
31021: IFTRUE 31025
31023: GO 31036
31025: POP
// bc_type := b_bunker ; 27 :
31026: LD_ADDR_OWVAR 42
31030: PUSH
31031: LD_INT 32
31033: ST_TO_ADDR
31034: GO 31189
31036: LD_INT 27
31038: DOUBLE
31039: EQUAL
31040: IFTRUE 31044
31042: GO 31055
31044: POP
// bc_type := b_turret ; 28 :
31045: LD_ADDR_OWVAR 42
31049: PUSH
31050: LD_INT 33
31052: ST_TO_ADDR
31053: GO 31189
31055: LD_INT 28
31057: DOUBLE
31058: EQUAL
31059: IFTRUE 31063
31061: GO 31074
31063: POP
// bc_type := b_armoury ; 29 :
31064: LD_ADDR_OWVAR 42
31068: PUSH
31069: LD_INT 4
31071: ST_TO_ADDR
31072: GO 31189
31074: LD_INT 29
31076: DOUBLE
31077: EQUAL
31078: IFTRUE 31082
31080: GO 31093
31082: POP
// bc_type := b_barracks ; 30 :
31083: LD_ADDR_OWVAR 42
31087: PUSH
31088: LD_INT 5
31090: ST_TO_ADDR
31091: GO 31189
31093: LD_INT 30
31095: DOUBLE
31096: EQUAL
31097: IFTRUE 31101
31099: GO 31112
31101: POP
// bc_type := b_solar_power ; 31 :
31102: LD_ADDR_OWVAR 42
31106: PUSH
31107: LD_INT 27
31109: ST_TO_ADDR
31110: GO 31189
31112: LD_INT 31
31114: DOUBLE
31115: EQUAL
31116: IFTRUE 31120
31118: GO 31131
31120: POP
// bc_type := b_oil_power ; 32 :
31121: LD_ADDR_OWVAR 42
31125: PUSH
31126: LD_INT 26
31128: ST_TO_ADDR
31129: GO 31189
31131: LD_INT 32
31133: DOUBLE
31134: EQUAL
31135: IFTRUE 31139
31137: GO 31150
31139: POP
// bc_type := b_siberite_power ; 33 :
31140: LD_ADDR_OWVAR 42
31144: PUSH
31145: LD_INT 28
31147: ST_TO_ADDR
31148: GO 31189
31150: LD_INT 33
31152: DOUBLE
31153: EQUAL
31154: IFTRUE 31158
31156: GO 31169
31158: POP
// bc_type := b_oil_mine ; 34 :
31159: LD_ADDR_OWVAR 42
31163: PUSH
31164: LD_INT 29
31166: ST_TO_ADDR
31167: GO 31189
31169: LD_INT 34
31171: DOUBLE
31172: EQUAL
31173: IFTRUE 31177
31175: GO 31188
31177: POP
// bc_type := b_siberite_mine ; end ;
31178: LD_ADDR_OWVAR 42
31182: PUSH
31183: LD_INT 30
31185: ST_TO_ADDR
31186: GO 31189
31188: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31189: LD_ADDR_VAR 0 8
31193: PUSH
31194: LD_VAR 0 5
31198: PPUSH
31199: LD_VAR 0 6
31203: PPUSH
31204: LD_VAR 0 3
31208: PPUSH
31209: CALL_OW 47
31213: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31214: LD_OWVAR 42
31218: PUSH
31219: LD_INT 32
31221: PUSH
31222: LD_INT 33
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: IN
31229: IFFALSE 31245
// PlaceWeaponTurret ( b , weapon ) ;
31231: LD_VAR 0 8
31235: PPUSH
31236: LD_VAR 0 4
31240: PPUSH
31241: CALL_OW 431
// end ;
31245: LD_VAR 0 7
31249: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31250: LD_INT 0
31252: PPUSH
31253: PPUSH
31254: PPUSH
31255: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31256: LD_ADDR_VAR 0 4
31260: PUSH
31261: LD_INT 22
31263: PUSH
31264: LD_OWVAR 2
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 2
31275: PUSH
31276: LD_INT 30
31278: PUSH
31279: LD_INT 0
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 30
31288: PUSH
31289: LD_INT 1
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: LIST
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PPUSH
31305: CALL_OW 69
31309: ST_TO_ADDR
// if not tmp then
31310: LD_VAR 0 4
31314: NOT
31315: IFFALSE 31319
// exit ;
31317: GO 31378
// for i in tmp do
31319: LD_ADDR_VAR 0 2
31323: PUSH
31324: LD_VAR 0 4
31328: PUSH
31329: FOR_IN
31330: IFFALSE 31376
// for j = 1 to 3 do
31332: LD_ADDR_VAR 0 3
31336: PUSH
31337: DOUBLE
31338: LD_INT 1
31340: DEC
31341: ST_TO_ADDR
31342: LD_INT 3
31344: PUSH
31345: FOR_TO
31346: IFFALSE 31372
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31348: LD_VAR 0 2
31352: PPUSH
31353: CALL_OW 274
31357: PPUSH
31358: LD_VAR 0 3
31362: PPUSH
31363: LD_INT 99999
31365: PPUSH
31366: CALL_OW 277
31370: GO 31345
31372: POP
31373: POP
31374: GO 31329
31376: POP
31377: POP
// end ;
31378: LD_VAR 0 1
31382: RET
// export function hHackSetLevel10 ; var i , j ; begin
31383: LD_INT 0
31385: PPUSH
31386: PPUSH
31387: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31388: LD_ADDR_VAR 0 2
31392: PUSH
31393: LD_INT 21
31395: PUSH
31396: LD_INT 1
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PPUSH
31403: CALL_OW 69
31407: PUSH
31408: FOR_IN
31409: IFFALSE 31461
// if IsSelected ( i ) then
31411: LD_VAR 0 2
31415: PPUSH
31416: CALL_OW 306
31420: IFFALSE 31459
// begin for j := 1 to 4 do
31422: LD_ADDR_VAR 0 3
31426: PUSH
31427: DOUBLE
31428: LD_INT 1
31430: DEC
31431: ST_TO_ADDR
31432: LD_INT 4
31434: PUSH
31435: FOR_TO
31436: IFFALSE 31457
// SetSkill ( i , j , 10 ) ;
31438: LD_VAR 0 2
31442: PPUSH
31443: LD_VAR 0 3
31447: PPUSH
31448: LD_INT 10
31450: PPUSH
31451: CALL_OW 237
31455: GO 31435
31457: POP
31458: POP
// end ;
31459: GO 31408
31461: POP
31462: POP
// end ;
31463: LD_VAR 0 1
31467: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
31468: LD_INT 0
31470: PPUSH
31471: PPUSH
31472: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
31473: LD_ADDR_VAR 0 2
31477: PUSH
31478: LD_INT 22
31480: PUSH
31481: LD_OWVAR 2
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: PUSH
31490: LD_INT 21
31492: PUSH
31493: LD_INT 1
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PPUSH
31504: CALL_OW 69
31508: PUSH
31509: FOR_IN
31510: IFFALSE 31551
// begin for j := 1 to 4 do
31512: LD_ADDR_VAR 0 3
31516: PUSH
31517: DOUBLE
31518: LD_INT 1
31520: DEC
31521: ST_TO_ADDR
31522: LD_INT 4
31524: PUSH
31525: FOR_TO
31526: IFFALSE 31547
// SetSkill ( i , j , 10 ) ;
31528: LD_VAR 0 2
31532: PPUSH
31533: LD_VAR 0 3
31537: PPUSH
31538: LD_INT 10
31540: PPUSH
31541: CALL_OW 237
31545: GO 31525
31547: POP
31548: POP
// end ;
31549: GO 31509
31551: POP
31552: POP
// end ;
31553: LD_VAR 0 1
31557: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
31558: LD_INT 0
31560: PPUSH
// uc_side := your_side ;
31561: LD_ADDR_OWVAR 20
31565: PUSH
31566: LD_OWVAR 2
31570: ST_TO_ADDR
// uc_nation := nation ;
31571: LD_ADDR_OWVAR 21
31575: PUSH
31576: LD_VAR 0 1
31580: ST_TO_ADDR
// InitHc ;
31581: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
31585: LD_INT 0
31587: PPUSH
31588: LD_VAR 0 2
31592: PPUSH
31593: LD_VAR 0 3
31597: PPUSH
31598: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
31602: LD_VAR 0 4
31606: PPUSH
31607: LD_VAR 0 5
31611: PPUSH
31612: CALL_OW 428
31616: PUSH
31617: LD_INT 0
31619: EQUAL
31620: IFFALSE 31644
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
31622: CALL_OW 44
31626: PPUSH
31627: LD_VAR 0 4
31631: PPUSH
31632: LD_VAR 0 5
31636: PPUSH
31637: LD_INT 1
31639: PPUSH
31640: CALL_OW 48
// end ;
31644: LD_VAR 0 6
31648: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
31649: LD_INT 0
31651: PPUSH
31652: PPUSH
// uc_side := your_side ;
31653: LD_ADDR_OWVAR 20
31657: PUSH
31658: LD_OWVAR 2
31662: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
31663: LD_VAR 0 1
31667: PUSH
31668: LD_INT 1
31670: PUSH
31671: LD_INT 2
31673: PUSH
31674: LD_INT 3
31676: PUSH
31677: LD_INT 4
31679: PUSH
31680: LD_INT 5
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: IN
31690: IFFALSE 31702
// uc_nation := nation_american else
31692: LD_ADDR_OWVAR 21
31696: PUSH
31697: LD_INT 1
31699: ST_TO_ADDR
31700: GO 31745
// if chassis in [ 11 , 12 , 13 , 14 ] then
31702: LD_VAR 0 1
31706: PUSH
31707: LD_INT 11
31709: PUSH
31710: LD_INT 12
31712: PUSH
31713: LD_INT 13
31715: PUSH
31716: LD_INT 14
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: IN
31725: IFFALSE 31737
// uc_nation := nation_arabian else
31727: LD_ADDR_OWVAR 21
31731: PUSH
31732: LD_INT 2
31734: ST_TO_ADDR
31735: GO 31745
// uc_nation := nation_russian ;
31737: LD_ADDR_OWVAR 21
31741: PUSH
31742: LD_INT 3
31744: ST_TO_ADDR
// vc_chassis := chassis ;
31745: LD_ADDR_OWVAR 37
31749: PUSH
31750: LD_VAR 0 1
31754: ST_TO_ADDR
// vc_engine := engine ;
31755: LD_ADDR_OWVAR 39
31759: PUSH
31760: LD_VAR 0 2
31764: ST_TO_ADDR
// vc_control := control ;
31765: LD_ADDR_OWVAR 38
31769: PUSH
31770: LD_VAR 0 3
31774: ST_TO_ADDR
// vc_weapon := weapon ;
31775: LD_ADDR_OWVAR 40
31779: PUSH
31780: LD_VAR 0 4
31784: ST_TO_ADDR
// un := CreateVehicle ;
31785: LD_ADDR_VAR 0 8
31789: PUSH
31790: CALL_OW 45
31794: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31795: LD_VAR 0 8
31799: PPUSH
31800: LD_INT 0
31802: PPUSH
31803: LD_INT 5
31805: PPUSH
31806: CALL_OW 12
31810: PPUSH
31811: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31815: LD_VAR 0 8
31819: PPUSH
31820: LD_VAR 0 5
31824: PPUSH
31825: LD_VAR 0 6
31829: PPUSH
31830: LD_INT 1
31832: PPUSH
31833: CALL_OW 48
// end ;
31837: LD_VAR 0 7
31841: RET
// export hInvincible ; every 1 do
31842: GO 31844
31844: DISABLE
// hInvincible := [ ] ;
31845: LD_ADDR_EXP 111
31849: PUSH
31850: EMPTY
31851: ST_TO_ADDR
31852: END
// every 10 do var i ;
31853: GO 31855
31855: DISABLE
31856: LD_INT 0
31858: PPUSH
// begin enable ;
31859: ENABLE
// if not hInvincible then
31860: LD_EXP 111
31864: NOT
31865: IFFALSE 31869
// exit ;
31867: GO 31913
// for i in hInvincible do
31869: LD_ADDR_VAR 0 1
31873: PUSH
31874: LD_EXP 111
31878: PUSH
31879: FOR_IN
31880: IFFALSE 31911
// if GetLives ( i ) < 1000 then
31882: LD_VAR 0 1
31886: PPUSH
31887: CALL_OW 256
31891: PUSH
31892: LD_INT 1000
31894: LESS
31895: IFFALSE 31909
// SetLives ( i , 1000 ) ;
31897: LD_VAR 0 1
31901: PPUSH
31902: LD_INT 1000
31904: PPUSH
31905: CALL_OW 234
31909: GO 31879
31911: POP
31912: POP
// end ;
31913: PPOPN 1
31915: END
// export function hHackInvincible ; var i ; begin
31916: LD_INT 0
31918: PPUSH
31919: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31920: LD_ADDR_VAR 0 2
31924: PUSH
31925: LD_INT 2
31927: PUSH
31928: LD_INT 21
31930: PUSH
31931: LD_INT 1
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PUSH
31938: LD_INT 21
31940: PUSH
31941: LD_INT 2
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: LIST
31952: PPUSH
31953: CALL_OW 69
31957: PUSH
31958: FOR_IN
31959: IFFALSE 32020
// if IsSelected ( i ) then
31961: LD_VAR 0 2
31965: PPUSH
31966: CALL_OW 306
31970: IFFALSE 32018
// begin if i in hInvincible then
31972: LD_VAR 0 2
31976: PUSH
31977: LD_EXP 111
31981: IN
31982: IFFALSE 32002
// hInvincible := hInvincible diff i else
31984: LD_ADDR_EXP 111
31988: PUSH
31989: LD_EXP 111
31993: PUSH
31994: LD_VAR 0 2
31998: DIFF
31999: ST_TO_ADDR
32000: GO 32018
// hInvincible := hInvincible union i ;
32002: LD_ADDR_EXP 111
32006: PUSH
32007: LD_EXP 111
32011: PUSH
32012: LD_VAR 0 2
32016: UNION
32017: ST_TO_ADDR
// end ;
32018: GO 31958
32020: POP
32021: POP
// end ;
32022: LD_VAR 0 1
32026: RET
// export function hHackInvisible ; var i , j ; begin
32027: LD_INT 0
32029: PPUSH
32030: PPUSH
32031: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32032: LD_ADDR_VAR 0 2
32036: PUSH
32037: LD_INT 21
32039: PUSH
32040: LD_INT 1
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PPUSH
32047: CALL_OW 69
32051: PUSH
32052: FOR_IN
32053: IFFALSE 32077
// if IsSelected ( i ) then
32055: LD_VAR 0 2
32059: PPUSH
32060: CALL_OW 306
32064: IFFALSE 32075
// ComForceInvisible ( i ) ;
32066: LD_VAR 0 2
32070: PPUSH
32071: CALL_OW 496
32075: GO 32052
32077: POP
32078: POP
// end ;
32079: LD_VAR 0 1
32083: RET
// export function hHackChangeYourSide ; begin
32084: LD_INT 0
32086: PPUSH
// if your_side = 8 then
32087: LD_OWVAR 2
32091: PUSH
32092: LD_INT 8
32094: EQUAL
32095: IFFALSE 32107
// your_side := 0 else
32097: LD_ADDR_OWVAR 2
32101: PUSH
32102: LD_INT 0
32104: ST_TO_ADDR
32105: GO 32121
// your_side := your_side + 1 ;
32107: LD_ADDR_OWVAR 2
32111: PUSH
32112: LD_OWVAR 2
32116: PUSH
32117: LD_INT 1
32119: PLUS
32120: ST_TO_ADDR
// end ;
32121: LD_VAR 0 1
32125: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32126: LD_INT 0
32128: PPUSH
32129: PPUSH
32130: PPUSH
// for i in all_units do
32131: LD_ADDR_VAR 0 2
32135: PUSH
32136: LD_OWVAR 3
32140: PUSH
32141: FOR_IN
32142: IFFALSE 32220
// if IsSelected ( i ) then
32144: LD_VAR 0 2
32148: PPUSH
32149: CALL_OW 306
32153: IFFALSE 32218
// begin j := GetSide ( i ) ;
32155: LD_ADDR_VAR 0 3
32159: PUSH
32160: LD_VAR 0 2
32164: PPUSH
32165: CALL_OW 255
32169: ST_TO_ADDR
// if j = 8 then
32170: LD_VAR 0 3
32174: PUSH
32175: LD_INT 8
32177: EQUAL
32178: IFFALSE 32190
// j := 0 else
32180: LD_ADDR_VAR 0 3
32184: PUSH
32185: LD_INT 0
32187: ST_TO_ADDR
32188: GO 32204
// j := j + 1 ;
32190: LD_ADDR_VAR 0 3
32194: PUSH
32195: LD_VAR 0 3
32199: PUSH
32200: LD_INT 1
32202: PLUS
32203: ST_TO_ADDR
// SetSide ( i , j ) ;
32204: LD_VAR 0 2
32208: PPUSH
32209: LD_VAR 0 3
32213: PPUSH
32214: CALL_OW 235
// end ;
32218: GO 32141
32220: POP
32221: POP
// end ;
32222: LD_VAR 0 1
32226: RET
// export function hHackFog ; begin
32227: LD_INT 0
32229: PPUSH
// FogOff ( true ) ;
32230: LD_INT 1
32232: PPUSH
32233: CALL_OW 344
// end ;
32237: LD_VAR 0 1
32241: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32242: LD_INT 0
32244: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32245: LD_VAR 0 1
32249: PPUSH
32250: LD_VAR 0 2
32254: PPUSH
32255: LD_VAR 0 3
32259: PPUSH
32260: LD_INT 1
32262: PPUSH
32263: LD_INT 1
32265: PPUSH
32266: CALL_OW 483
// CenterOnXY ( x , y ) ;
32270: LD_VAR 0 2
32274: PPUSH
32275: LD_VAR 0 3
32279: PPUSH
32280: CALL_OW 84
// end ;
32284: LD_VAR 0 4
32288: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
32289: LD_INT 0
32291: PPUSH
32292: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
32293: LD_VAR 0 1
32297: NOT
32298: PUSH
32299: LD_VAR 0 2
32303: PPUSH
32304: LD_VAR 0 3
32308: PPUSH
32309: CALL_OW 488
32313: NOT
32314: OR
32315: PUSH
32316: LD_VAR 0 1
32320: PPUSH
32321: CALL_OW 266
32325: PUSH
32326: LD_INT 3
32328: NONEQUAL
32329: PUSH
32330: LD_VAR 0 1
32334: PPUSH
32335: CALL_OW 247
32339: PUSH
32340: LD_INT 1
32342: EQUAL
32343: NOT
32344: AND
32345: OR
32346: IFFALSE 32350
// exit ;
32348: GO 32499
// if GetType ( factory ) = unit_human then
32350: LD_VAR 0 1
32354: PPUSH
32355: CALL_OW 247
32359: PUSH
32360: LD_INT 1
32362: EQUAL
32363: IFFALSE 32380
// factory := IsInUnit ( factory ) ;
32365: LD_ADDR_VAR 0 1
32369: PUSH
32370: LD_VAR 0 1
32374: PPUSH
32375: CALL_OW 310
32379: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
32380: LD_VAR 0 1
32384: PPUSH
32385: CALL_OW 266
32389: PUSH
32390: LD_INT 3
32392: NONEQUAL
32393: IFFALSE 32397
// exit ;
32395: GO 32499
// if HexInfo ( x , y ) = factory then
32397: LD_VAR 0 2
32401: PPUSH
32402: LD_VAR 0 3
32406: PPUSH
32407: CALL_OW 428
32411: PUSH
32412: LD_VAR 0 1
32416: EQUAL
32417: IFFALSE 32444
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
32419: LD_ADDR_EXP 112
32423: PUSH
32424: LD_EXP 112
32428: PPUSH
32429: LD_VAR 0 1
32433: PPUSH
32434: LD_INT 0
32436: PPUSH
32437: CALL_OW 1
32441: ST_TO_ADDR
32442: GO 32495
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
32444: LD_ADDR_EXP 112
32448: PUSH
32449: LD_EXP 112
32453: PPUSH
32454: LD_VAR 0 1
32458: PPUSH
32459: LD_VAR 0 1
32463: PPUSH
32464: CALL_OW 255
32468: PUSH
32469: LD_VAR 0 1
32473: PUSH
32474: LD_VAR 0 2
32478: PUSH
32479: LD_VAR 0 3
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: PPUSH
32490: CALL_OW 1
32494: ST_TO_ADDR
// UpdateFactoryWaypoints ;
32495: CALL 32504 0 0
// end ;
32499: LD_VAR 0 4
32503: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
32504: LD_INT 0
32506: PPUSH
32507: PPUSH
32508: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
32509: LD_STRING resetFactoryWaypoint();
32511: PPUSH
32512: CALL_OW 559
// if factoryWaypoints then
32516: LD_EXP 112
32520: IFFALSE 32646
// begin list := PrepareArray ( factoryWaypoints ) ;
32522: LD_ADDR_VAR 0 3
32526: PUSH
32527: LD_EXP 112
32531: PPUSH
32532: CALL 80106 0 1
32536: ST_TO_ADDR
// for i := 1 to list do
32537: LD_ADDR_VAR 0 2
32541: PUSH
32542: DOUBLE
32543: LD_INT 1
32545: DEC
32546: ST_TO_ADDR
32547: LD_VAR 0 3
32551: PUSH
32552: FOR_TO
32553: IFFALSE 32644
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
32555: LD_STRING setFactoryWaypointXY(
32557: PUSH
32558: LD_VAR 0 3
32562: PUSH
32563: LD_VAR 0 2
32567: ARRAY
32568: PUSH
32569: LD_INT 1
32571: ARRAY
32572: STR
32573: PUSH
32574: LD_STRING ,
32576: STR
32577: PUSH
32578: LD_VAR 0 3
32582: PUSH
32583: LD_VAR 0 2
32587: ARRAY
32588: PUSH
32589: LD_INT 2
32591: ARRAY
32592: STR
32593: PUSH
32594: LD_STRING ,
32596: STR
32597: PUSH
32598: LD_VAR 0 3
32602: PUSH
32603: LD_VAR 0 2
32607: ARRAY
32608: PUSH
32609: LD_INT 3
32611: ARRAY
32612: STR
32613: PUSH
32614: LD_STRING ,
32616: STR
32617: PUSH
32618: LD_VAR 0 3
32622: PUSH
32623: LD_VAR 0 2
32627: ARRAY
32628: PUSH
32629: LD_INT 4
32631: ARRAY
32632: STR
32633: PUSH
32634: LD_STRING )
32636: STR
32637: PPUSH
32638: CALL_OW 559
32642: GO 32552
32644: POP
32645: POP
// end ; end ;
32646: LD_VAR 0 1
32650: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
32651: LD_INT 0
32653: PPUSH
// if HexInfo ( x , y ) = warehouse then
32654: LD_VAR 0 2
32658: PPUSH
32659: LD_VAR 0 3
32663: PPUSH
32664: CALL_OW 428
32668: PUSH
32669: LD_VAR 0 1
32673: EQUAL
32674: IFFALSE 32701
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
32676: LD_ADDR_EXP 113
32680: PUSH
32681: LD_EXP 113
32685: PPUSH
32686: LD_VAR 0 1
32690: PPUSH
32691: LD_INT 0
32693: PPUSH
32694: CALL_OW 1
32698: ST_TO_ADDR
32699: GO 32752
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
32701: LD_ADDR_EXP 113
32705: PUSH
32706: LD_EXP 113
32710: PPUSH
32711: LD_VAR 0 1
32715: PPUSH
32716: LD_VAR 0 1
32720: PPUSH
32721: CALL_OW 255
32725: PUSH
32726: LD_VAR 0 1
32730: PUSH
32731: LD_VAR 0 2
32735: PUSH
32736: LD_VAR 0 3
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: PPUSH
32747: CALL_OW 1
32751: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
32752: CALL 32761 0 0
// end ;
32756: LD_VAR 0 4
32760: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
32761: LD_INT 0
32763: PPUSH
32764: PPUSH
32765: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
32766: LD_STRING resetWarehouseGatheringPoints();
32768: PPUSH
32769: CALL_OW 559
// if warehouseGatheringPoints then
32773: LD_EXP 113
32777: IFFALSE 32903
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
32779: LD_ADDR_VAR 0 3
32783: PUSH
32784: LD_EXP 113
32788: PPUSH
32789: CALL 80106 0 1
32793: ST_TO_ADDR
// for i := 1 to list do
32794: LD_ADDR_VAR 0 2
32798: PUSH
32799: DOUBLE
32800: LD_INT 1
32802: DEC
32803: ST_TO_ADDR
32804: LD_VAR 0 3
32808: PUSH
32809: FOR_TO
32810: IFFALSE 32901
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
32812: LD_STRING setWarehouseGatheringPointXY(
32814: PUSH
32815: LD_VAR 0 3
32819: PUSH
32820: LD_VAR 0 2
32824: ARRAY
32825: PUSH
32826: LD_INT 1
32828: ARRAY
32829: STR
32830: PUSH
32831: LD_STRING ,
32833: STR
32834: PUSH
32835: LD_VAR 0 3
32839: PUSH
32840: LD_VAR 0 2
32844: ARRAY
32845: PUSH
32846: LD_INT 2
32848: ARRAY
32849: STR
32850: PUSH
32851: LD_STRING ,
32853: STR
32854: PUSH
32855: LD_VAR 0 3
32859: PUSH
32860: LD_VAR 0 2
32864: ARRAY
32865: PUSH
32866: LD_INT 3
32868: ARRAY
32869: STR
32870: PUSH
32871: LD_STRING ,
32873: STR
32874: PUSH
32875: LD_VAR 0 3
32879: PUSH
32880: LD_VAR 0 2
32884: ARRAY
32885: PUSH
32886: LD_INT 4
32888: ARRAY
32889: STR
32890: PUSH
32891: LD_STRING )
32893: STR
32894: PPUSH
32895: CALL_OW 559
32899: GO 32809
32901: POP
32902: POP
// end ; end ;
32903: LD_VAR 0 1
32907: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
32908: LD_EXP 113
32912: IFFALSE 33597
32914: GO 32916
32916: DISABLE
32917: LD_INT 0
32919: PPUSH
32920: PPUSH
32921: PPUSH
32922: PPUSH
32923: PPUSH
32924: PPUSH
32925: PPUSH
32926: PPUSH
32927: PPUSH
// begin enable ;
32928: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
32929: LD_ADDR_VAR 0 3
32933: PUSH
32934: LD_EXP 113
32938: PPUSH
32939: CALL 80106 0 1
32943: ST_TO_ADDR
// if not list then
32944: LD_VAR 0 3
32948: NOT
32949: IFFALSE 32953
// exit ;
32951: GO 33597
// for i := 1 to list do
32953: LD_ADDR_VAR 0 1
32957: PUSH
32958: DOUBLE
32959: LD_INT 1
32961: DEC
32962: ST_TO_ADDR
32963: LD_VAR 0 3
32967: PUSH
32968: FOR_TO
32969: IFFALSE 33595
// begin depot := list [ i ] [ 2 ] ;
32971: LD_ADDR_VAR 0 8
32975: PUSH
32976: LD_VAR 0 3
32980: PUSH
32981: LD_VAR 0 1
32985: ARRAY
32986: PUSH
32987: LD_INT 2
32989: ARRAY
32990: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
32991: LD_ADDR_VAR 0 5
32995: PUSH
32996: LD_VAR 0 3
33000: PUSH
33001: LD_VAR 0 1
33005: ARRAY
33006: PUSH
33007: LD_INT 1
33009: ARRAY
33010: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
33011: LD_VAR 0 8
33015: PPUSH
33016: CALL_OW 301
33020: PUSH
33021: LD_VAR 0 5
33025: PUSH
33026: LD_VAR 0 8
33030: PPUSH
33031: CALL_OW 255
33035: NONEQUAL
33036: OR
33037: IFFALSE 33066
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
33039: LD_ADDR_EXP 113
33043: PUSH
33044: LD_EXP 113
33048: PPUSH
33049: LD_VAR 0 8
33053: PPUSH
33054: LD_INT 0
33056: PPUSH
33057: CALL_OW 1
33061: ST_TO_ADDR
// exit ;
33062: POP
33063: POP
33064: GO 33597
// end ; x := list [ i ] [ 3 ] ;
33066: LD_ADDR_VAR 0 6
33070: PUSH
33071: LD_VAR 0 3
33075: PUSH
33076: LD_VAR 0 1
33080: ARRAY
33081: PUSH
33082: LD_INT 3
33084: ARRAY
33085: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
33086: LD_ADDR_VAR 0 7
33090: PUSH
33091: LD_VAR 0 3
33095: PUSH
33096: LD_VAR 0 1
33100: ARRAY
33101: PUSH
33102: LD_INT 4
33104: ARRAY
33105: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
33106: LD_ADDR_VAR 0 9
33110: PUSH
33111: LD_VAR 0 6
33115: PPUSH
33116: LD_VAR 0 7
33120: PPUSH
33121: LD_INT 16
33123: PPUSH
33124: CALL 78694 0 3
33128: ST_TO_ADDR
// if not cratesNearbyPoint then
33129: LD_VAR 0 9
33133: NOT
33134: IFFALSE 33140
// exit ;
33136: POP
33137: POP
33138: GO 33597
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
33140: LD_ADDR_VAR 0 4
33144: PUSH
33145: LD_INT 22
33147: PUSH
33148: LD_VAR 0 5
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 3
33159: PUSH
33160: LD_INT 60
33162: PUSH
33163: EMPTY
33164: LIST
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 91
33172: PUSH
33173: LD_VAR 0 8
33177: PUSH
33178: LD_INT 6
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 2
33188: PUSH
33189: LD_INT 25
33191: PUSH
33192: LD_INT 2
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: PUSH
33199: LD_INT 25
33201: PUSH
33202: LD_INT 16
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: LIST
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: PPUSH
33220: CALL_OW 69
33224: PUSH
33225: LD_VAR 0 8
33229: PPUSH
33230: CALL_OW 313
33234: PPUSH
33235: LD_INT 3
33237: PUSH
33238: LD_INT 60
33240: PUSH
33241: EMPTY
33242: LIST
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 2
33250: PUSH
33251: LD_INT 25
33253: PUSH
33254: LD_INT 2
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 25
33263: PUSH
33264: LD_INT 16
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: LIST
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PPUSH
33280: CALL_OW 72
33284: UNION
33285: ST_TO_ADDR
// if tmp then
33286: LD_VAR 0 4
33290: IFFALSE 33370
// begin tmp := ShrinkArray ( tmp , 3 ) ;
33292: LD_ADDR_VAR 0 4
33296: PUSH
33297: LD_VAR 0 4
33301: PPUSH
33302: LD_INT 3
33304: PPUSH
33305: CALL 76663 0 2
33309: ST_TO_ADDR
// for j in tmp do
33310: LD_ADDR_VAR 0 2
33314: PUSH
33315: LD_VAR 0 4
33319: PUSH
33320: FOR_IN
33321: IFFALSE 33364
// begin if IsInUnit ( j ) then
33323: LD_VAR 0 2
33327: PPUSH
33328: CALL_OW 310
33332: IFFALSE 33343
// ComExit ( j ) ;
33334: LD_VAR 0 2
33338: PPUSH
33339: CALL 76746 0 1
// AddComCollect ( j , x , y ) ;
33343: LD_VAR 0 2
33347: PPUSH
33348: LD_VAR 0 6
33352: PPUSH
33353: LD_VAR 0 7
33357: PPUSH
33358: CALL_OW 177
// end ;
33362: GO 33320
33364: POP
33365: POP
// exit ;
33366: POP
33367: POP
33368: GO 33597
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
33370: LD_ADDR_VAR 0 4
33374: PUSH
33375: LD_INT 22
33377: PUSH
33378: LD_VAR 0 5
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 91
33389: PUSH
33390: LD_VAR 0 8
33394: PUSH
33395: LD_INT 8
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: LIST
33402: PUSH
33403: LD_INT 2
33405: PUSH
33406: LD_INT 34
33408: PUSH
33409: LD_INT 12
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: LD_INT 34
33418: PUSH
33419: LD_INT 51
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: PUSH
33426: LD_INT 34
33428: PUSH
33429: LD_INT 32
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: PUSH
33436: LD_INT 34
33438: PUSH
33439: LD_INT 89
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: LIST
33457: PPUSH
33458: CALL_OW 69
33462: ST_TO_ADDR
// if tmp then
33463: LD_VAR 0 4
33467: IFFALSE 33593
// begin for j in tmp do
33469: LD_ADDR_VAR 0 2
33473: PUSH
33474: LD_VAR 0 4
33478: PUSH
33479: FOR_IN
33480: IFFALSE 33591
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
33482: LD_VAR 0 2
33486: PPUSH
33487: CALL_OW 262
33491: PUSH
33492: LD_INT 3
33494: EQUAL
33495: PUSH
33496: LD_VAR 0 2
33500: PPUSH
33501: CALL_OW 261
33505: PUSH
33506: LD_INT 20
33508: GREATER
33509: OR
33510: PUSH
33511: LD_VAR 0 2
33515: PPUSH
33516: CALL_OW 314
33520: NOT
33521: AND
33522: PUSH
33523: LD_VAR 0 2
33527: PPUSH
33528: CALL_OW 263
33532: PUSH
33533: LD_INT 1
33535: NONEQUAL
33536: PUSH
33537: LD_VAR 0 2
33541: PPUSH
33542: CALL_OW 311
33546: OR
33547: AND
33548: IFFALSE 33589
// begin ComCollect ( j , x , y ) ;
33550: LD_VAR 0 2
33554: PPUSH
33555: LD_VAR 0 6
33559: PPUSH
33560: LD_VAR 0 7
33564: PPUSH
33565: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
33569: LD_VAR 0 2
33573: PPUSH
33574: LD_VAR 0 8
33578: PPUSH
33579: CALL_OW 172
// exit ;
33583: POP
33584: POP
33585: POP
33586: POP
33587: GO 33597
// end ;
33589: GO 33479
33591: POP
33592: POP
// end ; end ;
33593: GO 32968
33595: POP
33596: POP
// end ; end_of_file
33597: PPOPN 9
33599: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
33600: LD_VAR 0 1
33604: PUSH
33605: LD_INT 200
33607: DOUBLE
33608: GREATEREQUAL
33609: IFFALSE 33617
33611: LD_INT 299
33613: DOUBLE
33614: LESSEQUAL
33615: IFTRUE 33619
33617: GO 33651
33619: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
33620: LD_VAR 0 1
33624: PPUSH
33625: LD_VAR 0 2
33629: PPUSH
33630: LD_VAR 0 3
33634: PPUSH
33635: LD_VAR 0 4
33639: PPUSH
33640: LD_VAR 0 5
33644: PPUSH
33645: CALL 34139 0 5
33649: GO 33728
33651: LD_INT 300
33653: DOUBLE
33654: GREATEREQUAL
33655: IFFALSE 33663
33657: LD_INT 399
33659: DOUBLE
33660: LESSEQUAL
33661: IFTRUE 33665
33663: GO 33727
33665: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
33666: LD_VAR 0 1
33670: PPUSH
33671: LD_VAR 0 2
33675: PPUSH
33676: LD_VAR 0 3
33680: PPUSH
33681: LD_VAR 0 4
33685: PPUSH
33686: LD_VAR 0 5
33690: PPUSH
33691: LD_VAR 0 6
33695: PPUSH
33696: LD_VAR 0 7
33700: PPUSH
33701: LD_VAR 0 8
33705: PPUSH
33706: LD_VAR 0 9
33710: PPUSH
33711: LD_VAR 0 10
33715: PPUSH
33716: LD_VAR 0 11
33720: PPUSH
33721: CALL 30301 0 11
33725: GO 33728
33727: POP
// end ;
33728: PPOPN 11
33730: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
33731: LD_VAR 0 1
33735: PPUSH
33736: LD_VAR 0 2
33740: PPUSH
33741: LD_VAR 0 3
33745: PPUSH
33746: LD_VAR 0 4
33750: PPUSH
33751: LD_VAR 0 5
33755: PPUSH
33756: CALL 33875 0 5
// end ; end_of_file
33760: PPOPN 5
33762: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33763: LD_INT 0
33765: PPUSH
33766: PPUSH
33767: PPUSH
33768: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33769: LD_VAR 0 1
33773: PPUSH
33774: CALL_OW 264
33778: PUSH
33779: LD_INT 91
33781: EQUAL
33782: IFFALSE 33854
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33784: LD_INT 68
33786: PPUSH
33787: LD_VAR 0 1
33791: PPUSH
33792: CALL_OW 255
33796: PPUSH
33797: CALL_OW 321
33801: PUSH
33802: LD_INT 2
33804: EQUAL
33805: IFFALSE 33817
// eff := 70 else
33807: LD_ADDR_VAR 0 4
33811: PUSH
33812: LD_INT 70
33814: ST_TO_ADDR
33815: GO 33825
// eff := 30 ;
33817: LD_ADDR_VAR 0 4
33821: PUSH
33822: LD_INT 30
33824: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33825: LD_VAR 0 1
33829: PPUSH
33830: CALL_OW 250
33834: PPUSH
33835: LD_VAR 0 1
33839: PPUSH
33840: CALL_OW 251
33844: PPUSH
33845: LD_VAR 0 4
33849: PPUSH
33850: CALL_OW 495
// end ; end ;
33854: LD_VAR 0 2
33858: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33859: LD_INT 0
33861: PPUSH
// end ;
33862: LD_VAR 0 4
33866: RET
// export function SOS_Command ( cmd ) ; begin
33867: LD_INT 0
33869: PPUSH
// end ;
33870: LD_VAR 0 2
33874: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
33875: LD_INT 0
33877: PPUSH
// end ;
33878: LD_VAR 0 6
33882: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
33883: LD_INT 0
33885: PPUSH
33886: PPUSH
// if not vehicle or not factory then
33887: LD_VAR 0 1
33891: NOT
33892: PUSH
33893: LD_VAR 0 2
33897: NOT
33898: OR
33899: IFFALSE 33903
// exit ;
33901: GO 34134
// if factoryWaypoints >= factory then
33903: LD_EXP 112
33907: PUSH
33908: LD_VAR 0 2
33912: GREATEREQUAL
33913: IFFALSE 34134
// if factoryWaypoints [ factory ] then
33915: LD_EXP 112
33919: PUSH
33920: LD_VAR 0 2
33924: ARRAY
33925: IFFALSE 34134
// begin if GetControl ( vehicle ) = control_manual then
33927: LD_VAR 0 1
33931: PPUSH
33932: CALL_OW 263
33936: PUSH
33937: LD_INT 1
33939: EQUAL
33940: IFFALSE 34021
// begin driver := IsDrivenBy ( vehicle ) ;
33942: LD_ADDR_VAR 0 4
33946: PUSH
33947: LD_VAR 0 1
33951: PPUSH
33952: CALL_OW 311
33956: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33957: LD_VAR 0 4
33961: PPUSH
33962: LD_EXP 112
33966: PUSH
33967: LD_VAR 0 2
33971: ARRAY
33972: PUSH
33973: LD_INT 3
33975: ARRAY
33976: PPUSH
33977: LD_EXP 112
33981: PUSH
33982: LD_VAR 0 2
33986: ARRAY
33987: PUSH
33988: LD_INT 4
33990: ARRAY
33991: PPUSH
33992: CALL_OW 171
// AddComExitVehicle ( driver ) ;
33996: LD_VAR 0 4
34000: PPUSH
34001: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
34005: LD_VAR 0 4
34009: PPUSH
34010: LD_VAR 0 2
34014: PPUSH
34015: CALL_OW 180
// end else
34019: GO 34134
// if GetControl ( vehicle ) = control_remote then
34021: LD_VAR 0 1
34025: PPUSH
34026: CALL_OW 263
34030: PUSH
34031: LD_INT 2
34033: EQUAL
34034: IFFALSE 34095
// begin wait ( 0 0$2 ) ;
34036: LD_INT 70
34038: PPUSH
34039: CALL_OW 67
// if Connect ( vehicle ) then
34043: LD_VAR 0 1
34047: PPUSH
34048: CALL 46965 0 1
34052: IFFALSE 34093
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34054: LD_VAR 0 1
34058: PPUSH
34059: LD_EXP 112
34063: PUSH
34064: LD_VAR 0 2
34068: ARRAY
34069: PUSH
34070: LD_INT 3
34072: ARRAY
34073: PPUSH
34074: LD_EXP 112
34078: PUSH
34079: LD_VAR 0 2
34083: ARRAY
34084: PUSH
34085: LD_INT 4
34087: ARRAY
34088: PPUSH
34089: CALL_OW 171
// end else
34093: GO 34134
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34095: LD_VAR 0 1
34099: PPUSH
34100: LD_EXP 112
34104: PUSH
34105: LD_VAR 0 2
34109: ARRAY
34110: PUSH
34111: LD_INT 3
34113: ARRAY
34114: PPUSH
34115: LD_EXP 112
34119: PUSH
34120: LD_VAR 0 2
34124: ARRAY
34125: PUSH
34126: LD_INT 4
34128: ARRAY
34129: PPUSH
34130: CALL_OW 171
// end ; end ;
34134: LD_VAR 0 3
34138: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34139: LD_INT 0
34141: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34142: LD_VAR 0 1
34146: PUSH
34147: LD_INT 250
34149: EQUAL
34150: PUSH
34151: LD_VAR 0 2
34155: PPUSH
34156: CALL_OW 264
34160: PUSH
34161: LD_INT 81
34163: EQUAL
34164: AND
34165: IFFALSE 34186
// MinerPlaceMine ( unit , x , y ) ;
34167: LD_VAR 0 2
34171: PPUSH
34172: LD_VAR 0 4
34176: PPUSH
34177: LD_VAR 0 5
34181: PPUSH
34182: CALL 37176 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34186: LD_VAR 0 1
34190: PUSH
34191: LD_INT 251
34193: EQUAL
34194: PUSH
34195: LD_VAR 0 2
34199: PPUSH
34200: CALL_OW 264
34204: PUSH
34205: LD_INT 81
34207: EQUAL
34208: AND
34209: IFFALSE 34230
// MinerDetonateMine ( unit , x , y ) ;
34211: LD_VAR 0 2
34215: PPUSH
34216: LD_VAR 0 4
34220: PPUSH
34221: LD_VAR 0 5
34225: PPUSH
34226: CALL 37451 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34230: LD_VAR 0 1
34234: PUSH
34235: LD_INT 252
34237: EQUAL
34238: PUSH
34239: LD_VAR 0 2
34243: PPUSH
34244: CALL_OW 264
34248: PUSH
34249: LD_INT 81
34251: EQUAL
34252: AND
34253: IFFALSE 34274
// MinerCreateMinefield ( unit , x , y ) ;
34255: LD_VAR 0 2
34259: PPUSH
34260: LD_VAR 0 4
34264: PPUSH
34265: LD_VAR 0 5
34269: PPUSH
34270: CALL 37868 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34274: LD_VAR 0 1
34278: PUSH
34279: LD_INT 253
34281: EQUAL
34282: PUSH
34283: LD_VAR 0 2
34287: PPUSH
34288: CALL_OW 257
34292: PUSH
34293: LD_INT 5
34295: EQUAL
34296: AND
34297: IFFALSE 34318
// ComBinocular ( unit , x , y ) ;
34299: LD_VAR 0 2
34303: PPUSH
34304: LD_VAR 0 4
34308: PPUSH
34309: LD_VAR 0 5
34313: PPUSH
34314: CALL 38237 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34318: LD_VAR 0 1
34322: PUSH
34323: LD_INT 254
34325: EQUAL
34326: PUSH
34327: LD_VAR 0 2
34331: PPUSH
34332: CALL_OW 264
34336: PUSH
34337: LD_INT 99
34339: EQUAL
34340: AND
34341: PUSH
34342: LD_VAR 0 3
34346: PPUSH
34347: CALL_OW 263
34351: PUSH
34352: LD_INT 3
34354: EQUAL
34355: AND
34356: IFFALSE 34372
// HackDestroyVehicle ( unit , selectedUnit ) ;
34358: LD_VAR 0 2
34362: PPUSH
34363: LD_VAR 0 3
34367: PPUSH
34368: CALL 36540 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34372: LD_VAR 0 1
34376: PUSH
34377: LD_INT 255
34379: EQUAL
34380: PUSH
34381: LD_VAR 0 2
34385: PPUSH
34386: CALL_OW 264
34390: PUSH
34391: LD_INT 14
34393: PUSH
34394: LD_INT 53
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: IN
34401: AND
34402: PUSH
34403: LD_VAR 0 4
34407: PPUSH
34408: LD_VAR 0 5
34412: PPUSH
34413: CALL_OW 488
34417: AND
34418: IFFALSE 34442
// CutTreeXYR ( unit , x , y , 12 ) ;
34420: LD_VAR 0 2
34424: PPUSH
34425: LD_VAR 0 4
34429: PPUSH
34430: LD_VAR 0 5
34434: PPUSH
34435: LD_INT 12
34437: PPUSH
34438: CALL 34537 0 4
// if cmd = 256 then
34442: LD_VAR 0 1
34446: PUSH
34447: LD_INT 256
34449: EQUAL
34450: IFFALSE 34471
// SetFactoryWaypoint ( unit , x , y ) ;
34452: LD_VAR 0 2
34456: PPUSH
34457: LD_VAR 0 4
34461: PPUSH
34462: LD_VAR 0 5
34466: PPUSH
34467: CALL 32289 0 3
// if cmd = 257 then
34471: LD_VAR 0 1
34475: PUSH
34476: LD_INT 257
34478: EQUAL
34479: IFFALSE 34500
// SetWarehouseGatheringPoint ( unit , x , y ) ;
34481: LD_VAR 0 2
34485: PPUSH
34486: LD_VAR 0 4
34490: PPUSH
34491: LD_VAR 0 5
34495: PPUSH
34496: CALL 32651 0 3
// if cmd = 258 then
34500: LD_VAR 0 1
34504: PUSH
34505: LD_INT 258
34507: EQUAL
34508: IFFALSE 34532
// BurnTreeXYR ( unit , x , y , 8 ) ;
34510: LD_VAR 0 2
34514: PPUSH
34515: LD_VAR 0 4
34519: PPUSH
34520: LD_VAR 0 5
34524: PPUSH
34525: LD_INT 8
34527: PPUSH
34528: CALL 34931 0 4
// end ;
34532: LD_VAR 0 6
34536: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34537: LD_INT 0
34539: PPUSH
34540: PPUSH
34541: PPUSH
34542: PPUSH
34543: PPUSH
34544: PPUSH
34545: PPUSH
34546: PPUSH
34547: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
34548: LD_VAR 0 1
34552: PPUSH
34553: CALL_OW 302
34557: NOT
34558: PUSH
34559: LD_VAR 0 2
34563: PPUSH
34564: LD_VAR 0 3
34568: PPUSH
34569: CALL_OW 488
34573: NOT
34574: OR
34575: PUSH
34576: LD_VAR 0 4
34580: NOT
34581: OR
34582: IFFALSE 34586
// exit ;
34584: GO 34926
// list := [ ] ;
34586: LD_ADDR_VAR 0 13
34590: PUSH
34591: EMPTY
34592: ST_TO_ADDR
// if x - r < 0 then
34593: LD_VAR 0 2
34597: PUSH
34598: LD_VAR 0 4
34602: MINUS
34603: PUSH
34604: LD_INT 0
34606: LESS
34607: IFFALSE 34619
// min_x := 0 else
34609: LD_ADDR_VAR 0 7
34613: PUSH
34614: LD_INT 0
34616: ST_TO_ADDR
34617: GO 34635
// min_x := x - r ;
34619: LD_ADDR_VAR 0 7
34623: PUSH
34624: LD_VAR 0 2
34628: PUSH
34629: LD_VAR 0 4
34633: MINUS
34634: ST_TO_ADDR
// if y - r < 0 then
34635: LD_VAR 0 3
34639: PUSH
34640: LD_VAR 0 4
34644: MINUS
34645: PUSH
34646: LD_INT 0
34648: LESS
34649: IFFALSE 34661
// min_y := 0 else
34651: LD_ADDR_VAR 0 8
34655: PUSH
34656: LD_INT 0
34658: ST_TO_ADDR
34659: GO 34677
// min_y := y - r ;
34661: LD_ADDR_VAR 0 8
34665: PUSH
34666: LD_VAR 0 3
34670: PUSH
34671: LD_VAR 0 4
34675: MINUS
34676: ST_TO_ADDR
// max_x := x + r ;
34677: LD_ADDR_VAR 0 9
34681: PUSH
34682: LD_VAR 0 2
34686: PUSH
34687: LD_VAR 0 4
34691: PLUS
34692: ST_TO_ADDR
// max_y := y + r ;
34693: LD_ADDR_VAR 0 10
34697: PUSH
34698: LD_VAR 0 3
34702: PUSH
34703: LD_VAR 0 4
34707: PLUS
34708: ST_TO_ADDR
// for _x = min_x to max_x do
34709: LD_ADDR_VAR 0 11
34713: PUSH
34714: DOUBLE
34715: LD_VAR 0 7
34719: DEC
34720: ST_TO_ADDR
34721: LD_VAR 0 9
34725: PUSH
34726: FOR_TO
34727: IFFALSE 34844
// for _y = min_y to max_y do
34729: LD_ADDR_VAR 0 12
34733: PUSH
34734: DOUBLE
34735: LD_VAR 0 8
34739: DEC
34740: ST_TO_ADDR
34741: LD_VAR 0 10
34745: PUSH
34746: FOR_TO
34747: IFFALSE 34840
// begin if not ValidHex ( _x , _y ) then
34749: LD_VAR 0 11
34753: PPUSH
34754: LD_VAR 0 12
34758: PPUSH
34759: CALL_OW 488
34763: NOT
34764: IFFALSE 34768
// continue ;
34766: GO 34746
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34768: LD_VAR 0 11
34772: PPUSH
34773: LD_VAR 0 12
34777: PPUSH
34778: CALL_OW 351
34782: PUSH
34783: LD_VAR 0 11
34787: PPUSH
34788: LD_VAR 0 12
34792: PPUSH
34793: CALL_OW 554
34797: AND
34798: IFFALSE 34838
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34800: LD_ADDR_VAR 0 13
34804: PUSH
34805: LD_VAR 0 13
34809: PPUSH
34810: LD_VAR 0 13
34814: PUSH
34815: LD_INT 1
34817: PLUS
34818: PPUSH
34819: LD_VAR 0 11
34823: PUSH
34824: LD_VAR 0 12
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PPUSH
34833: CALL_OW 2
34837: ST_TO_ADDR
// end ;
34838: GO 34746
34840: POP
34841: POP
34842: GO 34726
34844: POP
34845: POP
// if not list then
34846: LD_VAR 0 13
34850: NOT
34851: IFFALSE 34855
// exit ;
34853: GO 34926
// for i in list do
34855: LD_ADDR_VAR 0 6
34859: PUSH
34860: LD_VAR 0 13
34864: PUSH
34865: FOR_IN
34866: IFFALSE 34924
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34868: LD_VAR 0 1
34872: PPUSH
34873: LD_STRING M
34875: PUSH
34876: LD_VAR 0 6
34880: PUSH
34881: LD_INT 1
34883: ARRAY
34884: PUSH
34885: LD_VAR 0 6
34889: PUSH
34890: LD_INT 2
34892: ARRAY
34893: PUSH
34894: LD_INT 0
34896: PUSH
34897: LD_INT 0
34899: PUSH
34900: LD_INT 0
34902: PUSH
34903: LD_INT 0
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: PUSH
34915: EMPTY
34916: LIST
34917: PPUSH
34918: CALL_OW 447
34922: GO 34865
34924: POP
34925: POP
// end ;
34926: LD_VAR 0 5
34930: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
34931: LD_INT 0
34933: PPUSH
34934: PPUSH
34935: PPUSH
34936: PPUSH
34937: PPUSH
34938: PPUSH
34939: PPUSH
34940: PPUSH
34941: PPUSH
34942: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
34943: LD_VAR 0 1
34947: PPUSH
34948: CALL_OW 302
34952: NOT
34953: PUSH
34954: LD_VAR 0 2
34958: PPUSH
34959: LD_VAR 0 3
34963: PPUSH
34964: CALL_OW 488
34968: NOT
34969: OR
34970: PUSH
34971: LD_VAR 0 4
34975: NOT
34976: OR
34977: IFFALSE 34981
// exit ;
34979: GO 35494
// list := [ ] ;
34981: LD_ADDR_VAR 0 13
34985: PUSH
34986: EMPTY
34987: ST_TO_ADDR
// if x - r < 0 then
34988: LD_VAR 0 2
34992: PUSH
34993: LD_VAR 0 4
34997: MINUS
34998: PUSH
34999: LD_INT 0
35001: LESS
35002: IFFALSE 35014
// min_x := 0 else
35004: LD_ADDR_VAR 0 7
35008: PUSH
35009: LD_INT 0
35011: ST_TO_ADDR
35012: GO 35030
// min_x := x - r ;
35014: LD_ADDR_VAR 0 7
35018: PUSH
35019: LD_VAR 0 2
35023: PUSH
35024: LD_VAR 0 4
35028: MINUS
35029: ST_TO_ADDR
// if y - r < 0 then
35030: LD_VAR 0 3
35034: PUSH
35035: LD_VAR 0 4
35039: MINUS
35040: PUSH
35041: LD_INT 0
35043: LESS
35044: IFFALSE 35056
// min_y := 0 else
35046: LD_ADDR_VAR 0 8
35050: PUSH
35051: LD_INT 0
35053: ST_TO_ADDR
35054: GO 35072
// min_y := y - r ;
35056: LD_ADDR_VAR 0 8
35060: PUSH
35061: LD_VAR 0 3
35065: PUSH
35066: LD_VAR 0 4
35070: MINUS
35071: ST_TO_ADDR
// max_x := x + r ;
35072: LD_ADDR_VAR 0 9
35076: PUSH
35077: LD_VAR 0 2
35081: PUSH
35082: LD_VAR 0 4
35086: PLUS
35087: ST_TO_ADDR
// max_y := y + r ;
35088: LD_ADDR_VAR 0 10
35092: PUSH
35093: LD_VAR 0 3
35097: PUSH
35098: LD_VAR 0 4
35102: PLUS
35103: ST_TO_ADDR
// for _x = min_x to max_x do
35104: LD_ADDR_VAR 0 11
35108: PUSH
35109: DOUBLE
35110: LD_VAR 0 7
35114: DEC
35115: ST_TO_ADDR
35116: LD_VAR 0 9
35120: PUSH
35121: FOR_TO
35122: IFFALSE 35239
// for _y = min_y to max_y do
35124: LD_ADDR_VAR 0 12
35128: PUSH
35129: DOUBLE
35130: LD_VAR 0 8
35134: DEC
35135: ST_TO_ADDR
35136: LD_VAR 0 10
35140: PUSH
35141: FOR_TO
35142: IFFALSE 35235
// begin if not ValidHex ( _x , _y ) then
35144: LD_VAR 0 11
35148: PPUSH
35149: LD_VAR 0 12
35153: PPUSH
35154: CALL_OW 488
35158: NOT
35159: IFFALSE 35163
// continue ;
35161: GO 35141
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35163: LD_VAR 0 11
35167: PPUSH
35168: LD_VAR 0 12
35172: PPUSH
35173: CALL_OW 351
35177: PUSH
35178: LD_VAR 0 11
35182: PPUSH
35183: LD_VAR 0 12
35187: PPUSH
35188: CALL_OW 554
35192: AND
35193: IFFALSE 35233
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35195: LD_ADDR_VAR 0 13
35199: PUSH
35200: LD_VAR 0 13
35204: PPUSH
35205: LD_VAR 0 13
35209: PUSH
35210: LD_INT 1
35212: PLUS
35213: PPUSH
35214: LD_VAR 0 11
35218: PUSH
35219: LD_VAR 0 12
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PPUSH
35228: CALL_OW 2
35232: ST_TO_ADDR
// end ;
35233: GO 35141
35235: POP
35236: POP
35237: GO 35121
35239: POP
35240: POP
// if not list then
35241: LD_VAR 0 13
35245: NOT
35246: IFFALSE 35250
// exit ;
35248: GO 35494
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
35250: LD_ADDR_VAR 0 13
35254: PUSH
35255: LD_VAR 0 1
35259: PPUSH
35260: LD_VAR 0 13
35264: PPUSH
35265: LD_INT 1
35267: PPUSH
35268: LD_INT 1
35270: PPUSH
35271: CALL 44107 0 4
35275: ST_TO_ADDR
// ComStop ( flame ) ;
35276: LD_VAR 0 1
35280: PPUSH
35281: CALL_OW 141
// for i in list do
35285: LD_ADDR_VAR 0 6
35289: PUSH
35290: LD_VAR 0 13
35294: PUSH
35295: FOR_IN
35296: IFFALSE 35327
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
35298: LD_VAR 0 1
35302: PPUSH
35303: LD_VAR 0 6
35307: PUSH
35308: LD_INT 1
35310: ARRAY
35311: PPUSH
35312: LD_VAR 0 6
35316: PUSH
35317: LD_INT 2
35319: ARRAY
35320: PPUSH
35321: CALL_OW 176
35325: GO 35295
35327: POP
35328: POP
// repeat wait ( 0 0$1 ) ;
35329: LD_INT 35
35331: PPUSH
35332: CALL_OW 67
// task := GetTaskList ( flame ) ;
35336: LD_ADDR_VAR 0 14
35340: PUSH
35341: LD_VAR 0 1
35345: PPUSH
35346: CALL_OW 437
35350: ST_TO_ADDR
// if not task then
35351: LD_VAR 0 14
35355: NOT
35356: IFFALSE 35360
// exit ;
35358: GO 35494
// if task [ 1 ] [ 1 ] <> | then
35360: LD_VAR 0 14
35364: PUSH
35365: LD_INT 1
35367: ARRAY
35368: PUSH
35369: LD_INT 1
35371: ARRAY
35372: PUSH
35373: LD_STRING |
35375: NONEQUAL
35376: IFFALSE 35380
// exit ;
35378: GO 35494
// _x := task [ 1 ] [ 2 ] ;
35380: LD_ADDR_VAR 0 11
35384: PUSH
35385: LD_VAR 0 14
35389: PUSH
35390: LD_INT 1
35392: ARRAY
35393: PUSH
35394: LD_INT 2
35396: ARRAY
35397: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
35398: LD_ADDR_VAR 0 12
35402: PUSH
35403: LD_VAR 0 14
35407: PUSH
35408: LD_INT 1
35410: ARRAY
35411: PUSH
35412: LD_INT 3
35414: ARRAY
35415: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
35416: LD_VAR 0 11
35420: PPUSH
35421: LD_VAR 0 12
35425: PPUSH
35426: CALL_OW 351
35430: NOT
35431: PUSH
35432: LD_VAR 0 11
35436: PPUSH
35437: LD_VAR 0 12
35441: PPUSH
35442: CALL_OW 554
35446: NOT
35447: OR
35448: IFFALSE 35482
// begin task := Delete ( task , 1 ) ;
35450: LD_ADDR_VAR 0 14
35454: PUSH
35455: LD_VAR 0 14
35459: PPUSH
35460: LD_INT 1
35462: PPUSH
35463: CALL_OW 3
35467: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
35468: LD_VAR 0 1
35472: PPUSH
35473: LD_VAR 0 14
35477: PPUSH
35478: CALL_OW 446
// end ; until not HasTask ( flame ) ;
35482: LD_VAR 0 1
35486: PPUSH
35487: CALL_OW 314
35491: NOT
35492: IFFALSE 35329
// end ;
35494: LD_VAR 0 5
35498: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35499: LD_EXP 115
35503: NOT
35504: IFFALSE 35554
35506: GO 35508
35508: DISABLE
// begin initHack := true ;
35509: LD_ADDR_EXP 115
35513: PUSH
35514: LD_INT 1
35516: ST_TO_ADDR
// hackTanks := [ ] ;
35517: LD_ADDR_EXP 116
35521: PUSH
35522: EMPTY
35523: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35524: LD_ADDR_EXP 117
35528: PUSH
35529: EMPTY
35530: ST_TO_ADDR
// hackLimit := 3 ;
35531: LD_ADDR_EXP 118
35535: PUSH
35536: LD_INT 3
35538: ST_TO_ADDR
// hackDist := 12 ;
35539: LD_ADDR_EXP 119
35543: PUSH
35544: LD_INT 12
35546: ST_TO_ADDR
// hackCounter := [ ] ;
35547: LD_ADDR_EXP 120
35551: PUSH
35552: EMPTY
35553: ST_TO_ADDR
// end ;
35554: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35555: LD_EXP 115
35559: PUSH
35560: LD_INT 34
35562: PUSH
35563: LD_INT 99
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PPUSH
35570: CALL_OW 69
35574: AND
35575: IFFALSE 35828
35577: GO 35579
35579: DISABLE
35580: LD_INT 0
35582: PPUSH
35583: PPUSH
// begin enable ;
35584: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35585: LD_ADDR_VAR 0 1
35589: PUSH
35590: LD_INT 34
35592: PUSH
35593: LD_INT 99
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PPUSH
35600: CALL_OW 69
35604: PUSH
35605: FOR_IN
35606: IFFALSE 35826
// begin if not i in hackTanks then
35608: LD_VAR 0 1
35612: PUSH
35613: LD_EXP 116
35617: IN
35618: NOT
35619: IFFALSE 35702
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35621: LD_ADDR_EXP 116
35625: PUSH
35626: LD_EXP 116
35630: PPUSH
35631: LD_EXP 116
35635: PUSH
35636: LD_INT 1
35638: PLUS
35639: PPUSH
35640: LD_VAR 0 1
35644: PPUSH
35645: CALL_OW 1
35649: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35650: LD_ADDR_EXP 117
35654: PUSH
35655: LD_EXP 117
35659: PPUSH
35660: LD_EXP 117
35664: PUSH
35665: LD_INT 1
35667: PLUS
35668: PPUSH
35669: EMPTY
35670: PPUSH
35671: CALL_OW 1
35675: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35676: LD_ADDR_EXP 120
35680: PUSH
35681: LD_EXP 120
35685: PPUSH
35686: LD_EXP 120
35690: PUSH
35691: LD_INT 1
35693: PLUS
35694: PPUSH
35695: EMPTY
35696: PPUSH
35697: CALL_OW 1
35701: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35702: LD_VAR 0 1
35706: PPUSH
35707: CALL_OW 302
35711: NOT
35712: IFFALSE 35725
// begin HackUnlinkAll ( i ) ;
35714: LD_VAR 0 1
35718: PPUSH
35719: CALL 35831 0 1
// continue ;
35723: GO 35605
// end ; HackCheckCapturedStatus ( i ) ;
35725: LD_VAR 0 1
35729: PPUSH
35730: CALL 36274 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35734: LD_ADDR_VAR 0 2
35738: PUSH
35739: LD_INT 81
35741: PUSH
35742: LD_VAR 0 1
35746: PPUSH
35747: CALL_OW 255
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: LD_INT 33
35758: PUSH
35759: LD_INT 3
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 91
35768: PUSH
35769: LD_VAR 0 1
35773: PUSH
35774: LD_EXP 119
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: LIST
35783: PUSH
35784: LD_INT 50
35786: PUSH
35787: EMPTY
35788: LIST
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: LIST
35794: LIST
35795: PPUSH
35796: CALL_OW 69
35800: ST_TO_ADDR
// if not tmp then
35801: LD_VAR 0 2
35805: NOT
35806: IFFALSE 35810
// continue ;
35808: GO 35605
// HackLink ( i , tmp ) ;
35810: LD_VAR 0 1
35814: PPUSH
35815: LD_VAR 0 2
35819: PPUSH
35820: CALL 35967 0 2
// end ;
35824: GO 35605
35826: POP
35827: POP
// end ;
35828: PPOPN 2
35830: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35831: LD_INT 0
35833: PPUSH
35834: PPUSH
35835: PPUSH
// if not hack in hackTanks then
35836: LD_VAR 0 1
35840: PUSH
35841: LD_EXP 116
35845: IN
35846: NOT
35847: IFFALSE 35851
// exit ;
35849: GO 35962
// index := GetElementIndex ( hackTanks , hack ) ;
35851: LD_ADDR_VAR 0 4
35855: PUSH
35856: LD_EXP 116
35860: PPUSH
35861: LD_VAR 0 1
35865: PPUSH
35866: CALL 43404 0 2
35870: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
35871: LD_EXP 117
35875: PUSH
35876: LD_VAR 0 4
35880: ARRAY
35881: IFFALSE 35962
// begin for i in hackTanksCaptured [ index ] do
35883: LD_ADDR_VAR 0 3
35887: PUSH
35888: LD_EXP 117
35892: PUSH
35893: LD_VAR 0 4
35897: ARRAY
35898: PUSH
35899: FOR_IN
35900: IFFALSE 35926
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
35902: LD_VAR 0 3
35906: PUSH
35907: LD_INT 1
35909: ARRAY
35910: PPUSH
35911: LD_VAR 0 3
35915: PUSH
35916: LD_INT 2
35918: ARRAY
35919: PPUSH
35920: CALL_OW 235
35924: GO 35899
35926: POP
35927: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
35928: LD_ADDR_EXP 117
35932: PUSH
35933: LD_EXP 117
35937: PPUSH
35938: LD_VAR 0 4
35942: PPUSH
35943: EMPTY
35944: PPUSH
35945: CALL_OW 1
35949: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
35950: LD_VAR 0 1
35954: PPUSH
35955: LD_INT 0
35957: PPUSH
35958: CALL_OW 505
// end ; end ;
35962: LD_VAR 0 2
35966: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35967: LD_INT 0
35969: PPUSH
35970: PPUSH
35971: PPUSH
// if not hack in hackTanks or not vehicles then
35972: LD_VAR 0 1
35976: PUSH
35977: LD_EXP 116
35981: IN
35982: NOT
35983: PUSH
35984: LD_VAR 0 2
35988: NOT
35989: OR
35990: IFFALSE 35994
// exit ;
35992: GO 36269
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35994: LD_ADDR_VAR 0 2
35998: PUSH
35999: LD_VAR 0 1
36003: PPUSH
36004: LD_VAR 0 2
36008: PPUSH
36009: LD_INT 1
36011: PPUSH
36012: LD_INT 1
36014: PPUSH
36015: CALL 44054 0 4
36019: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36020: LD_ADDR_VAR 0 5
36024: PUSH
36025: LD_EXP 116
36029: PPUSH
36030: LD_VAR 0 1
36034: PPUSH
36035: CALL 43404 0 2
36039: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36040: LD_EXP 117
36044: PUSH
36045: LD_VAR 0 5
36049: ARRAY
36050: PUSH
36051: LD_EXP 118
36055: LESS
36056: IFFALSE 36245
// begin for i := 1 to vehicles do
36058: LD_ADDR_VAR 0 4
36062: PUSH
36063: DOUBLE
36064: LD_INT 1
36066: DEC
36067: ST_TO_ADDR
36068: LD_VAR 0 2
36072: PUSH
36073: FOR_TO
36074: IFFALSE 36243
// begin if hackTanksCaptured [ index ] = hackLimit then
36076: LD_EXP 117
36080: PUSH
36081: LD_VAR 0 5
36085: ARRAY
36086: PUSH
36087: LD_EXP 118
36091: EQUAL
36092: IFFALSE 36096
// break ;
36094: GO 36243
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36096: LD_ADDR_EXP 120
36100: PUSH
36101: LD_EXP 120
36105: PPUSH
36106: LD_VAR 0 5
36110: PPUSH
36111: LD_EXP 120
36115: PUSH
36116: LD_VAR 0 5
36120: ARRAY
36121: PUSH
36122: LD_INT 1
36124: PLUS
36125: PPUSH
36126: CALL_OW 1
36130: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36131: LD_ADDR_EXP 117
36135: PUSH
36136: LD_EXP 117
36140: PPUSH
36141: LD_VAR 0 5
36145: PUSH
36146: LD_EXP 117
36150: PUSH
36151: LD_VAR 0 5
36155: ARRAY
36156: PUSH
36157: LD_INT 1
36159: PLUS
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: PPUSH
36165: LD_VAR 0 2
36169: PUSH
36170: LD_VAR 0 4
36174: ARRAY
36175: PUSH
36176: LD_VAR 0 2
36180: PUSH
36181: LD_VAR 0 4
36185: ARRAY
36186: PPUSH
36187: CALL_OW 255
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PPUSH
36196: CALL 43619 0 3
36200: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36201: LD_VAR 0 2
36205: PUSH
36206: LD_VAR 0 4
36210: ARRAY
36211: PPUSH
36212: LD_VAR 0 1
36216: PPUSH
36217: CALL_OW 255
36221: PPUSH
36222: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36226: LD_VAR 0 2
36230: PUSH
36231: LD_VAR 0 4
36235: ARRAY
36236: PPUSH
36237: CALL_OW 141
// end ;
36241: GO 36073
36243: POP
36244: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36245: LD_VAR 0 1
36249: PPUSH
36250: LD_EXP 117
36254: PUSH
36255: LD_VAR 0 5
36259: ARRAY
36260: PUSH
36261: LD_INT 0
36263: PLUS
36264: PPUSH
36265: CALL_OW 505
// end ;
36269: LD_VAR 0 3
36273: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36274: LD_INT 0
36276: PPUSH
36277: PPUSH
36278: PPUSH
36279: PPUSH
// if not hack in hackTanks then
36280: LD_VAR 0 1
36284: PUSH
36285: LD_EXP 116
36289: IN
36290: NOT
36291: IFFALSE 36295
// exit ;
36293: GO 36535
// index := GetElementIndex ( hackTanks , hack ) ;
36295: LD_ADDR_VAR 0 4
36299: PUSH
36300: LD_EXP 116
36304: PPUSH
36305: LD_VAR 0 1
36309: PPUSH
36310: CALL 43404 0 2
36314: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36315: LD_ADDR_VAR 0 3
36319: PUSH
36320: DOUBLE
36321: LD_EXP 117
36325: PUSH
36326: LD_VAR 0 4
36330: ARRAY
36331: INC
36332: ST_TO_ADDR
36333: LD_INT 1
36335: PUSH
36336: FOR_DOWNTO
36337: IFFALSE 36509
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36339: LD_ADDR_VAR 0 5
36343: PUSH
36344: LD_EXP 117
36348: PUSH
36349: LD_VAR 0 4
36353: ARRAY
36354: PUSH
36355: LD_VAR 0 3
36359: ARRAY
36360: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36361: LD_VAR 0 5
36365: PUSH
36366: LD_INT 1
36368: ARRAY
36369: PPUSH
36370: CALL_OW 302
36374: NOT
36375: PUSH
36376: LD_VAR 0 5
36380: PUSH
36381: LD_INT 1
36383: ARRAY
36384: PPUSH
36385: CALL_OW 255
36389: PUSH
36390: LD_VAR 0 1
36394: PPUSH
36395: CALL_OW 255
36399: NONEQUAL
36400: OR
36401: IFFALSE 36507
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36403: LD_VAR 0 5
36407: PUSH
36408: LD_INT 1
36410: ARRAY
36411: PPUSH
36412: CALL_OW 305
36416: PUSH
36417: LD_VAR 0 5
36421: PUSH
36422: LD_INT 1
36424: ARRAY
36425: PPUSH
36426: CALL_OW 255
36430: PUSH
36431: LD_VAR 0 1
36435: PPUSH
36436: CALL_OW 255
36440: EQUAL
36441: AND
36442: IFFALSE 36466
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36444: LD_VAR 0 5
36448: PUSH
36449: LD_INT 1
36451: ARRAY
36452: PPUSH
36453: LD_VAR 0 5
36457: PUSH
36458: LD_INT 2
36460: ARRAY
36461: PPUSH
36462: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36466: LD_ADDR_EXP 117
36470: PUSH
36471: LD_EXP 117
36475: PPUSH
36476: LD_VAR 0 4
36480: PPUSH
36481: LD_EXP 117
36485: PUSH
36486: LD_VAR 0 4
36490: ARRAY
36491: PPUSH
36492: LD_VAR 0 3
36496: PPUSH
36497: CALL_OW 3
36501: PPUSH
36502: CALL_OW 1
36506: ST_TO_ADDR
// end ; end ;
36507: GO 36336
36509: POP
36510: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36511: LD_VAR 0 1
36515: PPUSH
36516: LD_EXP 117
36520: PUSH
36521: LD_VAR 0 4
36525: ARRAY
36526: PUSH
36527: LD_INT 0
36529: PLUS
36530: PPUSH
36531: CALL_OW 505
// end ;
36535: LD_VAR 0 2
36539: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36540: LD_INT 0
36542: PPUSH
36543: PPUSH
36544: PPUSH
36545: PPUSH
// if not hack in hackTanks then
36546: LD_VAR 0 1
36550: PUSH
36551: LD_EXP 116
36555: IN
36556: NOT
36557: IFFALSE 36561
// exit ;
36559: GO 36646
// index := GetElementIndex ( hackTanks , hack ) ;
36561: LD_ADDR_VAR 0 5
36565: PUSH
36566: LD_EXP 116
36570: PPUSH
36571: LD_VAR 0 1
36575: PPUSH
36576: CALL 43404 0 2
36580: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36581: LD_ADDR_VAR 0 4
36585: PUSH
36586: DOUBLE
36587: LD_INT 1
36589: DEC
36590: ST_TO_ADDR
36591: LD_EXP 117
36595: PUSH
36596: LD_VAR 0 5
36600: ARRAY
36601: PUSH
36602: FOR_TO
36603: IFFALSE 36644
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36605: LD_EXP 117
36609: PUSH
36610: LD_VAR 0 5
36614: ARRAY
36615: PUSH
36616: LD_VAR 0 4
36620: ARRAY
36621: PUSH
36622: LD_INT 1
36624: ARRAY
36625: PUSH
36626: LD_VAR 0 2
36630: EQUAL
36631: IFFALSE 36642
// KillUnit ( vehicle ) ;
36633: LD_VAR 0 2
36637: PPUSH
36638: CALL_OW 66
36642: GO 36602
36644: POP
36645: POP
// end ;
36646: LD_VAR 0 3
36650: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36651: LD_EXP 121
36655: NOT
36656: IFFALSE 36691
36658: GO 36660
36660: DISABLE
// begin initMiner := true ;
36661: LD_ADDR_EXP 121
36665: PUSH
36666: LD_INT 1
36668: ST_TO_ADDR
// minersList := [ ] ;
36669: LD_ADDR_EXP 122
36673: PUSH
36674: EMPTY
36675: ST_TO_ADDR
// minerMinesList := [ ] ;
36676: LD_ADDR_EXP 123
36680: PUSH
36681: EMPTY
36682: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36683: LD_ADDR_EXP 124
36687: PUSH
36688: LD_INT 5
36690: ST_TO_ADDR
// end ;
36691: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36692: LD_EXP 121
36696: PUSH
36697: LD_INT 34
36699: PUSH
36700: LD_INT 81
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PPUSH
36707: CALL_OW 69
36711: AND
36712: IFFALSE 37173
36714: GO 36716
36716: DISABLE
36717: LD_INT 0
36719: PPUSH
36720: PPUSH
36721: PPUSH
36722: PPUSH
// begin enable ;
36723: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36724: LD_ADDR_VAR 0 1
36728: PUSH
36729: LD_INT 34
36731: PUSH
36732: LD_INT 81
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PPUSH
36739: CALL_OW 69
36743: PUSH
36744: FOR_IN
36745: IFFALSE 36817
// begin if not i in minersList then
36747: LD_VAR 0 1
36751: PUSH
36752: LD_EXP 122
36756: IN
36757: NOT
36758: IFFALSE 36815
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36760: LD_ADDR_EXP 122
36764: PUSH
36765: LD_EXP 122
36769: PPUSH
36770: LD_EXP 122
36774: PUSH
36775: LD_INT 1
36777: PLUS
36778: PPUSH
36779: LD_VAR 0 1
36783: PPUSH
36784: CALL_OW 1
36788: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36789: LD_ADDR_EXP 123
36793: PUSH
36794: LD_EXP 123
36798: PPUSH
36799: LD_EXP 123
36803: PUSH
36804: LD_INT 1
36806: PLUS
36807: PPUSH
36808: EMPTY
36809: PPUSH
36810: CALL_OW 1
36814: ST_TO_ADDR
// end end ;
36815: GO 36744
36817: POP
36818: POP
// for i := minerMinesList downto 1 do
36819: LD_ADDR_VAR 0 1
36823: PUSH
36824: DOUBLE
36825: LD_EXP 123
36829: INC
36830: ST_TO_ADDR
36831: LD_INT 1
36833: PUSH
36834: FOR_DOWNTO
36835: IFFALSE 37171
// begin if IsLive ( minersList [ i ] ) then
36837: LD_EXP 122
36841: PUSH
36842: LD_VAR 0 1
36846: ARRAY
36847: PPUSH
36848: CALL_OW 300
36852: IFFALSE 36880
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36854: LD_EXP 122
36858: PUSH
36859: LD_VAR 0 1
36863: ARRAY
36864: PPUSH
36865: LD_EXP 123
36869: PUSH
36870: LD_VAR 0 1
36874: ARRAY
36875: PPUSH
36876: CALL_OW 505
// if not minerMinesList [ i ] then
36880: LD_EXP 123
36884: PUSH
36885: LD_VAR 0 1
36889: ARRAY
36890: NOT
36891: IFFALSE 36895
// continue ;
36893: GO 36834
// for j := minerMinesList [ i ] downto 1 do
36895: LD_ADDR_VAR 0 2
36899: PUSH
36900: DOUBLE
36901: LD_EXP 123
36905: PUSH
36906: LD_VAR 0 1
36910: ARRAY
36911: INC
36912: ST_TO_ADDR
36913: LD_INT 1
36915: PUSH
36916: FOR_DOWNTO
36917: IFFALSE 37167
// begin side := GetSide ( minersList [ i ] ) ;
36919: LD_ADDR_VAR 0 3
36923: PUSH
36924: LD_EXP 122
36928: PUSH
36929: LD_VAR 0 1
36933: ARRAY
36934: PPUSH
36935: CALL_OW 255
36939: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
36940: LD_ADDR_VAR 0 4
36944: PUSH
36945: LD_EXP 123
36949: PUSH
36950: LD_VAR 0 1
36954: ARRAY
36955: PUSH
36956: LD_VAR 0 2
36960: ARRAY
36961: PUSH
36962: LD_INT 1
36964: ARRAY
36965: PPUSH
36966: LD_EXP 123
36970: PUSH
36971: LD_VAR 0 1
36975: ARRAY
36976: PUSH
36977: LD_VAR 0 2
36981: ARRAY
36982: PUSH
36983: LD_INT 2
36985: ARRAY
36986: PPUSH
36987: CALL_OW 428
36991: ST_TO_ADDR
// if not tmp then
36992: LD_VAR 0 4
36996: NOT
36997: IFFALSE 37001
// continue ;
36999: GO 36916
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37001: LD_VAR 0 4
37005: PUSH
37006: LD_INT 81
37008: PUSH
37009: LD_VAR 0 3
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PPUSH
37018: CALL_OW 69
37022: IN
37023: PUSH
37024: LD_EXP 123
37028: PUSH
37029: LD_VAR 0 1
37033: ARRAY
37034: PUSH
37035: LD_VAR 0 2
37039: ARRAY
37040: PUSH
37041: LD_INT 1
37043: ARRAY
37044: PPUSH
37045: LD_EXP 123
37049: PUSH
37050: LD_VAR 0 1
37054: ARRAY
37055: PUSH
37056: LD_VAR 0 2
37060: ARRAY
37061: PUSH
37062: LD_INT 2
37064: ARRAY
37065: PPUSH
37066: CALL_OW 458
37070: AND
37071: IFFALSE 37165
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37073: LD_EXP 123
37077: PUSH
37078: LD_VAR 0 1
37082: ARRAY
37083: PUSH
37084: LD_VAR 0 2
37088: ARRAY
37089: PUSH
37090: LD_INT 1
37092: ARRAY
37093: PPUSH
37094: LD_EXP 123
37098: PUSH
37099: LD_VAR 0 1
37103: ARRAY
37104: PUSH
37105: LD_VAR 0 2
37109: ARRAY
37110: PUSH
37111: LD_INT 2
37113: ARRAY
37114: PPUSH
37115: LD_VAR 0 3
37119: PPUSH
37120: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37124: LD_ADDR_EXP 123
37128: PUSH
37129: LD_EXP 123
37133: PPUSH
37134: LD_VAR 0 1
37138: PPUSH
37139: LD_EXP 123
37143: PUSH
37144: LD_VAR 0 1
37148: ARRAY
37149: PPUSH
37150: LD_VAR 0 2
37154: PPUSH
37155: CALL_OW 3
37159: PPUSH
37160: CALL_OW 1
37164: ST_TO_ADDR
// end ; end ;
37165: GO 36916
37167: POP
37168: POP
// end ;
37169: GO 36834
37171: POP
37172: POP
// end ;
37173: PPOPN 4
37175: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37176: LD_INT 0
37178: PPUSH
37179: PPUSH
// result := false ;
37180: LD_ADDR_VAR 0 4
37184: PUSH
37185: LD_INT 0
37187: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37188: LD_VAR 0 1
37192: PPUSH
37193: CALL_OW 264
37197: PUSH
37198: LD_INT 81
37200: EQUAL
37201: NOT
37202: IFFALSE 37206
// exit ;
37204: GO 37446
// index := GetElementIndex ( minersList , unit ) ;
37206: LD_ADDR_VAR 0 5
37210: PUSH
37211: LD_EXP 122
37215: PPUSH
37216: LD_VAR 0 1
37220: PPUSH
37221: CALL 43404 0 2
37225: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37226: LD_EXP 123
37230: PUSH
37231: LD_VAR 0 5
37235: ARRAY
37236: PUSH
37237: LD_EXP 124
37241: GREATEREQUAL
37242: IFFALSE 37246
// exit ;
37244: GO 37446
// ComMoveXY ( unit , x , y ) ;
37246: LD_VAR 0 1
37250: PPUSH
37251: LD_VAR 0 2
37255: PPUSH
37256: LD_VAR 0 3
37260: PPUSH
37261: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37265: LD_INT 35
37267: PPUSH
37268: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37272: LD_VAR 0 1
37276: PPUSH
37277: LD_VAR 0 2
37281: PPUSH
37282: LD_VAR 0 3
37286: PPUSH
37287: CALL 75145 0 3
37291: NOT
37292: PUSH
37293: LD_VAR 0 1
37297: PPUSH
37298: CALL_OW 314
37302: AND
37303: IFFALSE 37307
// exit ;
37305: GO 37446
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37307: LD_VAR 0 2
37311: PPUSH
37312: LD_VAR 0 3
37316: PPUSH
37317: CALL_OW 428
37321: PUSH
37322: LD_VAR 0 1
37326: EQUAL
37327: PUSH
37328: LD_VAR 0 1
37332: PPUSH
37333: CALL_OW 314
37337: NOT
37338: AND
37339: IFFALSE 37265
// PlaySoundXY ( x , y , PlantMine ) ;
37341: LD_VAR 0 2
37345: PPUSH
37346: LD_VAR 0 3
37350: PPUSH
37351: LD_STRING PlantMine
37353: PPUSH
37354: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37358: LD_VAR 0 2
37362: PPUSH
37363: LD_VAR 0 3
37367: PPUSH
37368: LD_VAR 0 1
37372: PPUSH
37373: CALL_OW 255
37377: PPUSH
37378: LD_INT 0
37380: PPUSH
37381: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37385: LD_ADDR_EXP 123
37389: PUSH
37390: LD_EXP 123
37394: PPUSH
37395: LD_VAR 0 5
37399: PUSH
37400: LD_EXP 123
37404: PUSH
37405: LD_VAR 0 5
37409: ARRAY
37410: PUSH
37411: LD_INT 1
37413: PLUS
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PPUSH
37419: LD_VAR 0 2
37423: PUSH
37424: LD_VAR 0 3
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PPUSH
37433: CALL 43619 0 3
37437: ST_TO_ADDR
// result := true ;
37438: LD_ADDR_VAR 0 4
37442: PUSH
37443: LD_INT 1
37445: ST_TO_ADDR
// end ;
37446: LD_VAR 0 4
37450: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37451: LD_INT 0
37453: PPUSH
37454: PPUSH
37455: PPUSH
// if not unit in minersList then
37456: LD_VAR 0 1
37460: PUSH
37461: LD_EXP 122
37465: IN
37466: NOT
37467: IFFALSE 37471
// exit ;
37469: GO 37863
// index := GetElementIndex ( minersList , unit ) ;
37471: LD_ADDR_VAR 0 6
37475: PUSH
37476: LD_EXP 122
37480: PPUSH
37481: LD_VAR 0 1
37485: PPUSH
37486: CALL 43404 0 2
37490: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37491: LD_ADDR_VAR 0 5
37495: PUSH
37496: DOUBLE
37497: LD_EXP 123
37501: PUSH
37502: LD_VAR 0 6
37506: ARRAY
37507: INC
37508: ST_TO_ADDR
37509: LD_INT 1
37511: PUSH
37512: FOR_DOWNTO
37513: IFFALSE 37674
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37515: LD_EXP 123
37519: PUSH
37520: LD_VAR 0 6
37524: ARRAY
37525: PUSH
37526: LD_VAR 0 5
37530: ARRAY
37531: PUSH
37532: LD_INT 1
37534: ARRAY
37535: PUSH
37536: LD_VAR 0 2
37540: EQUAL
37541: PUSH
37542: LD_EXP 123
37546: PUSH
37547: LD_VAR 0 6
37551: ARRAY
37552: PUSH
37553: LD_VAR 0 5
37557: ARRAY
37558: PUSH
37559: LD_INT 2
37561: ARRAY
37562: PUSH
37563: LD_VAR 0 3
37567: EQUAL
37568: AND
37569: IFFALSE 37672
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37571: LD_EXP 123
37575: PUSH
37576: LD_VAR 0 6
37580: ARRAY
37581: PUSH
37582: LD_VAR 0 5
37586: ARRAY
37587: PUSH
37588: LD_INT 1
37590: ARRAY
37591: PPUSH
37592: LD_EXP 123
37596: PUSH
37597: LD_VAR 0 6
37601: ARRAY
37602: PUSH
37603: LD_VAR 0 5
37607: ARRAY
37608: PUSH
37609: LD_INT 2
37611: ARRAY
37612: PPUSH
37613: LD_VAR 0 1
37617: PPUSH
37618: CALL_OW 255
37622: PPUSH
37623: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37627: LD_ADDR_EXP 123
37631: PUSH
37632: LD_EXP 123
37636: PPUSH
37637: LD_VAR 0 6
37641: PPUSH
37642: LD_EXP 123
37646: PUSH
37647: LD_VAR 0 6
37651: ARRAY
37652: PPUSH
37653: LD_VAR 0 5
37657: PPUSH
37658: CALL_OW 3
37662: PPUSH
37663: CALL_OW 1
37667: ST_TO_ADDR
// exit ;
37668: POP
37669: POP
37670: GO 37863
// end ; end ;
37672: GO 37512
37674: POP
37675: POP
// for i := minerMinesList [ index ] downto 1 do
37676: LD_ADDR_VAR 0 5
37680: PUSH
37681: DOUBLE
37682: LD_EXP 123
37686: PUSH
37687: LD_VAR 0 6
37691: ARRAY
37692: INC
37693: ST_TO_ADDR
37694: LD_INT 1
37696: PUSH
37697: FOR_DOWNTO
37698: IFFALSE 37861
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37700: LD_EXP 123
37704: PUSH
37705: LD_VAR 0 6
37709: ARRAY
37710: PUSH
37711: LD_VAR 0 5
37715: ARRAY
37716: PUSH
37717: LD_INT 1
37719: ARRAY
37720: PPUSH
37721: LD_EXP 123
37725: PUSH
37726: LD_VAR 0 6
37730: ARRAY
37731: PUSH
37732: LD_VAR 0 5
37736: ARRAY
37737: PUSH
37738: LD_INT 2
37740: ARRAY
37741: PPUSH
37742: LD_VAR 0 2
37746: PPUSH
37747: LD_VAR 0 3
37751: PPUSH
37752: CALL_OW 298
37756: PUSH
37757: LD_INT 6
37759: LESS
37760: IFFALSE 37859
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37762: LD_EXP 123
37766: PUSH
37767: LD_VAR 0 6
37771: ARRAY
37772: PUSH
37773: LD_VAR 0 5
37777: ARRAY
37778: PUSH
37779: LD_INT 1
37781: ARRAY
37782: PPUSH
37783: LD_EXP 123
37787: PUSH
37788: LD_VAR 0 6
37792: ARRAY
37793: PUSH
37794: LD_VAR 0 5
37798: ARRAY
37799: PUSH
37800: LD_INT 2
37802: ARRAY
37803: PPUSH
37804: LD_VAR 0 1
37808: PPUSH
37809: CALL_OW 255
37813: PPUSH
37814: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37818: LD_ADDR_EXP 123
37822: PUSH
37823: LD_EXP 123
37827: PPUSH
37828: LD_VAR 0 6
37832: PPUSH
37833: LD_EXP 123
37837: PUSH
37838: LD_VAR 0 6
37842: ARRAY
37843: PPUSH
37844: LD_VAR 0 5
37848: PPUSH
37849: CALL_OW 3
37853: PPUSH
37854: CALL_OW 1
37858: ST_TO_ADDR
// end ; end ;
37859: GO 37697
37861: POP
37862: POP
// end ;
37863: LD_VAR 0 4
37867: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
37868: LD_INT 0
37870: PPUSH
37871: PPUSH
37872: PPUSH
37873: PPUSH
37874: PPUSH
37875: PPUSH
37876: PPUSH
37877: PPUSH
37878: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
37879: LD_VAR 0 1
37883: PPUSH
37884: CALL_OW 264
37888: PUSH
37889: LD_INT 81
37891: EQUAL
37892: NOT
37893: PUSH
37894: LD_VAR 0 1
37898: PUSH
37899: LD_EXP 122
37903: IN
37904: NOT
37905: OR
37906: IFFALSE 37910
// exit ;
37908: GO 38232
// index := GetElementIndex ( minersList , unit ) ;
37910: LD_ADDR_VAR 0 6
37914: PUSH
37915: LD_EXP 122
37919: PPUSH
37920: LD_VAR 0 1
37924: PPUSH
37925: CALL 43404 0 2
37929: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
37930: LD_ADDR_VAR 0 8
37934: PUSH
37935: LD_EXP 124
37939: PUSH
37940: LD_EXP 123
37944: PUSH
37945: LD_VAR 0 6
37949: ARRAY
37950: MINUS
37951: ST_TO_ADDR
// if not minesFreeAmount then
37952: LD_VAR 0 8
37956: NOT
37957: IFFALSE 37961
// exit ;
37959: GO 38232
// tmp := [ ] ;
37961: LD_ADDR_VAR 0 7
37965: PUSH
37966: EMPTY
37967: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
37968: LD_ADDR_VAR 0 5
37972: PUSH
37973: DOUBLE
37974: LD_INT 1
37976: DEC
37977: ST_TO_ADDR
37978: LD_VAR 0 8
37982: PUSH
37983: FOR_TO
37984: IFFALSE 38179
// begin _d := rand ( 0 , 5 ) ;
37986: LD_ADDR_VAR 0 11
37990: PUSH
37991: LD_INT 0
37993: PPUSH
37994: LD_INT 5
37996: PPUSH
37997: CALL_OW 12
38001: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38002: LD_ADDR_VAR 0 12
38006: PUSH
38007: LD_INT 2
38009: PPUSH
38010: LD_INT 6
38012: PPUSH
38013: CALL_OW 12
38017: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38018: LD_ADDR_VAR 0 9
38022: PUSH
38023: LD_VAR 0 2
38027: PPUSH
38028: LD_VAR 0 11
38032: PPUSH
38033: LD_VAR 0 12
38037: PPUSH
38038: CALL_OW 272
38042: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38043: LD_ADDR_VAR 0 10
38047: PUSH
38048: LD_VAR 0 3
38052: PPUSH
38053: LD_VAR 0 11
38057: PPUSH
38058: LD_VAR 0 12
38062: PPUSH
38063: CALL_OW 273
38067: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38068: LD_VAR 0 9
38072: PPUSH
38073: LD_VAR 0 10
38077: PPUSH
38078: CALL_OW 488
38082: PUSH
38083: LD_VAR 0 9
38087: PUSH
38088: LD_VAR 0 10
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PUSH
38097: LD_VAR 0 7
38101: IN
38102: NOT
38103: AND
38104: PUSH
38105: LD_VAR 0 9
38109: PPUSH
38110: LD_VAR 0 10
38114: PPUSH
38115: CALL_OW 458
38119: NOT
38120: AND
38121: IFFALSE 38163
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38123: LD_ADDR_VAR 0 7
38127: PUSH
38128: LD_VAR 0 7
38132: PPUSH
38133: LD_VAR 0 7
38137: PUSH
38138: LD_INT 1
38140: PLUS
38141: PPUSH
38142: LD_VAR 0 9
38146: PUSH
38147: LD_VAR 0 10
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PPUSH
38156: CALL_OW 1
38160: ST_TO_ADDR
38161: GO 38177
// i := i - 1 ;
38163: LD_ADDR_VAR 0 5
38167: PUSH
38168: LD_VAR 0 5
38172: PUSH
38173: LD_INT 1
38175: MINUS
38176: ST_TO_ADDR
// end ;
38177: GO 37983
38179: POP
38180: POP
// for i in tmp do
38181: LD_ADDR_VAR 0 5
38185: PUSH
38186: LD_VAR 0 7
38190: PUSH
38191: FOR_IN
38192: IFFALSE 38230
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38194: LD_VAR 0 1
38198: PPUSH
38199: LD_VAR 0 5
38203: PUSH
38204: LD_INT 1
38206: ARRAY
38207: PPUSH
38208: LD_VAR 0 5
38212: PUSH
38213: LD_INT 2
38215: ARRAY
38216: PPUSH
38217: CALL 37176 0 3
38221: NOT
38222: IFFALSE 38228
// exit ;
38224: POP
38225: POP
38226: GO 38232
38228: GO 38191
38230: POP
38231: POP
// end ;
38232: LD_VAR 0 4
38236: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38237: LD_INT 0
38239: PPUSH
38240: PPUSH
38241: PPUSH
38242: PPUSH
38243: PPUSH
38244: PPUSH
38245: PPUSH
// if not GetClass ( unit ) = class_sniper then
38246: LD_VAR 0 1
38250: PPUSH
38251: CALL_OW 257
38255: PUSH
38256: LD_INT 5
38258: EQUAL
38259: NOT
38260: IFFALSE 38264
// exit ;
38262: GO 38652
// dist := 8 ;
38264: LD_ADDR_VAR 0 5
38268: PUSH
38269: LD_INT 8
38271: ST_TO_ADDR
// viewRange := 12 ;
38272: LD_ADDR_VAR 0 7
38276: PUSH
38277: LD_INT 12
38279: ST_TO_ADDR
// side := GetSide ( unit ) ;
38280: LD_ADDR_VAR 0 6
38284: PUSH
38285: LD_VAR 0 1
38289: PPUSH
38290: CALL_OW 255
38294: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38295: LD_INT 61
38297: PPUSH
38298: LD_VAR 0 6
38302: PPUSH
38303: CALL_OW 321
38307: PUSH
38308: LD_INT 2
38310: EQUAL
38311: IFFALSE 38321
// viewRange := 16 ;
38313: LD_ADDR_VAR 0 7
38317: PUSH
38318: LD_INT 16
38320: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38321: LD_VAR 0 1
38325: PPUSH
38326: LD_VAR 0 2
38330: PPUSH
38331: LD_VAR 0 3
38335: PPUSH
38336: CALL_OW 297
38340: PUSH
38341: LD_VAR 0 5
38345: GREATER
38346: IFFALSE 38425
// begin ComMoveXY ( unit , x , y ) ;
38348: LD_VAR 0 1
38352: PPUSH
38353: LD_VAR 0 2
38357: PPUSH
38358: LD_VAR 0 3
38362: PPUSH
38363: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38367: LD_INT 35
38369: PPUSH
38370: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38374: LD_VAR 0 1
38378: PPUSH
38379: LD_VAR 0 2
38383: PPUSH
38384: LD_VAR 0 3
38388: PPUSH
38389: CALL 75145 0 3
38393: NOT
38394: IFFALSE 38398
// exit ;
38396: GO 38652
// until GetDistUnitXY ( unit , x , y ) < dist ;
38398: LD_VAR 0 1
38402: PPUSH
38403: LD_VAR 0 2
38407: PPUSH
38408: LD_VAR 0 3
38412: PPUSH
38413: CALL_OW 297
38417: PUSH
38418: LD_VAR 0 5
38422: LESS
38423: IFFALSE 38367
// end ; ComTurnXY ( unit , x , y ) ;
38425: LD_VAR 0 1
38429: PPUSH
38430: LD_VAR 0 2
38434: PPUSH
38435: LD_VAR 0 3
38439: PPUSH
38440: CALL_OW 118
// wait ( 5 ) ;
38444: LD_INT 5
38446: PPUSH
38447: CALL_OW 67
// _d := GetDir ( unit ) ;
38451: LD_ADDR_VAR 0 10
38455: PUSH
38456: LD_VAR 0 1
38460: PPUSH
38461: CALL_OW 254
38465: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38466: LD_ADDR_VAR 0 8
38470: PUSH
38471: LD_VAR 0 1
38475: PPUSH
38476: CALL_OW 250
38480: PPUSH
38481: LD_VAR 0 10
38485: PPUSH
38486: LD_VAR 0 5
38490: PPUSH
38491: CALL_OW 272
38495: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38496: LD_ADDR_VAR 0 9
38500: PUSH
38501: LD_VAR 0 1
38505: PPUSH
38506: CALL_OW 251
38510: PPUSH
38511: LD_VAR 0 10
38515: PPUSH
38516: LD_VAR 0 5
38520: PPUSH
38521: CALL_OW 273
38525: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38526: LD_VAR 0 8
38530: PPUSH
38531: LD_VAR 0 9
38535: PPUSH
38536: CALL_OW 488
38540: NOT
38541: IFFALSE 38545
// exit ;
38543: GO 38652
// ComAnimCustom ( unit , 1 ) ;
38545: LD_VAR 0 1
38549: PPUSH
38550: LD_INT 1
38552: PPUSH
38553: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38557: LD_VAR 0 8
38561: PPUSH
38562: LD_VAR 0 9
38566: PPUSH
38567: LD_VAR 0 6
38571: PPUSH
38572: LD_VAR 0 7
38576: PPUSH
38577: CALL_OW 330
// repeat wait ( 1 ) ;
38581: LD_INT 1
38583: PPUSH
38584: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38588: LD_VAR 0 1
38592: PPUSH
38593: CALL_OW 316
38597: PUSH
38598: LD_VAR 0 1
38602: PPUSH
38603: CALL_OW 314
38607: OR
38608: PUSH
38609: LD_VAR 0 1
38613: PPUSH
38614: CALL_OW 302
38618: NOT
38619: OR
38620: PUSH
38621: LD_VAR 0 1
38625: PPUSH
38626: CALL_OW 301
38630: OR
38631: IFFALSE 38581
// RemoveSeeing ( _x , _y , side ) ;
38633: LD_VAR 0 8
38637: PPUSH
38638: LD_VAR 0 9
38642: PPUSH
38643: LD_VAR 0 6
38647: PPUSH
38648: CALL_OW 331
// end ; end_of_file
38652: LD_VAR 0 4
38656: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38657: LD_INT 0
38659: PPUSH
38660: PPUSH
// if exist_mode then
38661: LD_VAR 0 2
38665: IFFALSE 38690
// unit := CreateCharacter ( prefix & ident ) else
38667: LD_ADDR_VAR 0 5
38671: PUSH
38672: LD_VAR 0 3
38676: PUSH
38677: LD_VAR 0 1
38681: STR
38682: PPUSH
38683: CALL_OW 34
38687: ST_TO_ADDR
38688: GO 38705
// unit := NewCharacter ( ident ) ;
38690: LD_ADDR_VAR 0 5
38694: PUSH
38695: LD_VAR 0 1
38699: PPUSH
38700: CALL_OW 25
38704: ST_TO_ADDR
// result := unit ;
38705: LD_ADDR_VAR 0 4
38709: PUSH
38710: LD_VAR 0 5
38714: ST_TO_ADDR
// end ;
38715: LD_VAR 0 4
38719: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38720: LD_INT 0
38722: PPUSH
38723: PPUSH
// if not side or not nation then
38724: LD_VAR 0 1
38728: NOT
38729: PUSH
38730: LD_VAR 0 2
38734: NOT
38735: OR
38736: IFFALSE 38740
// exit ;
38738: GO 39508
// case nation of nation_american :
38740: LD_VAR 0 2
38744: PUSH
38745: LD_INT 1
38747: DOUBLE
38748: EQUAL
38749: IFTRUE 38753
38751: GO 38967
38753: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38754: LD_ADDR_VAR 0 4
38758: PUSH
38759: LD_INT 35
38761: PUSH
38762: LD_INT 45
38764: PUSH
38765: LD_INT 46
38767: PUSH
38768: LD_INT 47
38770: PUSH
38771: LD_INT 82
38773: PUSH
38774: LD_INT 83
38776: PUSH
38777: LD_INT 84
38779: PUSH
38780: LD_INT 85
38782: PUSH
38783: LD_INT 86
38785: PUSH
38786: LD_INT 1
38788: PUSH
38789: LD_INT 2
38791: PUSH
38792: LD_INT 6
38794: PUSH
38795: LD_INT 15
38797: PUSH
38798: LD_INT 16
38800: PUSH
38801: LD_INT 7
38803: PUSH
38804: LD_INT 12
38806: PUSH
38807: LD_INT 13
38809: PUSH
38810: LD_INT 10
38812: PUSH
38813: LD_INT 14
38815: PUSH
38816: LD_INT 20
38818: PUSH
38819: LD_INT 21
38821: PUSH
38822: LD_INT 22
38824: PUSH
38825: LD_INT 25
38827: PUSH
38828: LD_INT 32
38830: PUSH
38831: LD_INT 27
38833: PUSH
38834: LD_INT 36
38836: PUSH
38837: LD_INT 69
38839: PUSH
38840: LD_INT 39
38842: PUSH
38843: LD_INT 34
38845: PUSH
38846: LD_INT 40
38848: PUSH
38849: LD_INT 48
38851: PUSH
38852: LD_INT 49
38854: PUSH
38855: LD_INT 50
38857: PUSH
38858: LD_INT 51
38860: PUSH
38861: LD_INT 52
38863: PUSH
38864: LD_INT 53
38866: PUSH
38867: LD_INT 54
38869: PUSH
38870: LD_INT 55
38872: PUSH
38873: LD_INT 56
38875: PUSH
38876: LD_INT 57
38878: PUSH
38879: LD_INT 58
38881: PUSH
38882: LD_INT 59
38884: PUSH
38885: LD_INT 60
38887: PUSH
38888: LD_INT 61
38890: PUSH
38891: LD_INT 62
38893: PUSH
38894: LD_INT 80
38896: PUSH
38897: LD_INT 82
38899: PUSH
38900: LD_INT 83
38902: PUSH
38903: LD_INT 84
38905: PUSH
38906: LD_INT 85
38908: PUSH
38909: LD_INT 86
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: ST_TO_ADDR
38965: GO 39432
38967: LD_INT 2
38969: DOUBLE
38970: EQUAL
38971: IFTRUE 38975
38973: GO 39201
38975: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
38976: LD_ADDR_VAR 0 4
38980: PUSH
38981: LD_INT 35
38983: PUSH
38984: LD_INT 45
38986: PUSH
38987: LD_INT 46
38989: PUSH
38990: LD_INT 47
38992: PUSH
38993: LD_INT 82
38995: PUSH
38996: LD_INT 83
38998: PUSH
38999: LD_INT 84
39001: PUSH
39002: LD_INT 85
39004: PUSH
39005: LD_INT 87
39007: PUSH
39008: LD_INT 70
39010: PUSH
39011: LD_INT 1
39013: PUSH
39014: LD_INT 11
39016: PUSH
39017: LD_INT 3
39019: PUSH
39020: LD_INT 4
39022: PUSH
39023: LD_INT 5
39025: PUSH
39026: LD_INT 6
39028: PUSH
39029: LD_INT 15
39031: PUSH
39032: LD_INT 18
39034: PUSH
39035: LD_INT 7
39037: PUSH
39038: LD_INT 17
39040: PUSH
39041: LD_INT 8
39043: PUSH
39044: LD_INT 20
39046: PUSH
39047: LD_INT 21
39049: PUSH
39050: LD_INT 22
39052: PUSH
39053: LD_INT 72
39055: PUSH
39056: LD_INT 26
39058: PUSH
39059: LD_INT 69
39061: PUSH
39062: LD_INT 39
39064: PUSH
39065: LD_INT 40
39067: PUSH
39068: LD_INT 41
39070: PUSH
39071: LD_INT 42
39073: PUSH
39074: LD_INT 43
39076: PUSH
39077: LD_INT 48
39079: PUSH
39080: LD_INT 49
39082: PUSH
39083: LD_INT 50
39085: PUSH
39086: LD_INT 51
39088: PUSH
39089: LD_INT 52
39091: PUSH
39092: LD_INT 53
39094: PUSH
39095: LD_INT 54
39097: PUSH
39098: LD_INT 55
39100: PUSH
39101: LD_INT 56
39103: PUSH
39104: LD_INT 60
39106: PUSH
39107: LD_INT 61
39109: PUSH
39110: LD_INT 62
39112: PUSH
39113: LD_INT 66
39115: PUSH
39116: LD_INT 67
39118: PUSH
39119: LD_INT 68
39121: PUSH
39122: LD_INT 81
39124: PUSH
39125: LD_INT 82
39127: PUSH
39128: LD_INT 83
39130: PUSH
39131: LD_INT 84
39133: PUSH
39134: LD_INT 85
39136: PUSH
39137: LD_INT 87
39139: PUSH
39140: LD_INT 88
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: ST_TO_ADDR
39199: GO 39432
39201: LD_INT 3
39203: DOUBLE
39204: EQUAL
39205: IFTRUE 39209
39207: GO 39431
39209: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39210: LD_ADDR_VAR 0 4
39214: PUSH
39215: LD_INT 46
39217: PUSH
39218: LD_INT 47
39220: PUSH
39221: LD_INT 1
39223: PUSH
39224: LD_INT 2
39226: PUSH
39227: LD_INT 82
39229: PUSH
39230: LD_INT 83
39232: PUSH
39233: LD_INT 84
39235: PUSH
39236: LD_INT 85
39238: PUSH
39239: LD_INT 86
39241: PUSH
39242: LD_INT 11
39244: PUSH
39245: LD_INT 9
39247: PUSH
39248: LD_INT 20
39250: PUSH
39251: LD_INT 19
39253: PUSH
39254: LD_INT 21
39256: PUSH
39257: LD_INT 24
39259: PUSH
39260: LD_INT 22
39262: PUSH
39263: LD_INT 25
39265: PUSH
39266: LD_INT 28
39268: PUSH
39269: LD_INT 29
39271: PUSH
39272: LD_INT 30
39274: PUSH
39275: LD_INT 31
39277: PUSH
39278: LD_INT 37
39280: PUSH
39281: LD_INT 38
39283: PUSH
39284: LD_INT 32
39286: PUSH
39287: LD_INT 27
39289: PUSH
39290: LD_INT 33
39292: PUSH
39293: LD_INT 69
39295: PUSH
39296: LD_INT 39
39298: PUSH
39299: LD_INT 34
39301: PUSH
39302: LD_INT 40
39304: PUSH
39305: LD_INT 71
39307: PUSH
39308: LD_INT 23
39310: PUSH
39311: LD_INT 44
39313: PUSH
39314: LD_INT 48
39316: PUSH
39317: LD_INT 49
39319: PUSH
39320: LD_INT 50
39322: PUSH
39323: LD_INT 51
39325: PUSH
39326: LD_INT 52
39328: PUSH
39329: LD_INT 53
39331: PUSH
39332: LD_INT 54
39334: PUSH
39335: LD_INT 55
39337: PUSH
39338: LD_INT 56
39340: PUSH
39341: LD_INT 57
39343: PUSH
39344: LD_INT 58
39346: PUSH
39347: LD_INT 59
39349: PUSH
39350: LD_INT 63
39352: PUSH
39353: LD_INT 64
39355: PUSH
39356: LD_INT 65
39358: PUSH
39359: LD_INT 82
39361: PUSH
39362: LD_INT 83
39364: PUSH
39365: LD_INT 84
39367: PUSH
39368: LD_INT 85
39370: PUSH
39371: LD_INT 86
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: ST_TO_ADDR
39429: GO 39432
39431: POP
// if state > - 1 and state < 3 then
39432: LD_VAR 0 3
39436: PUSH
39437: LD_INT 1
39439: NEG
39440: GREATER
39441: PUSH
39442: LD_VAR 0 3
39446: PUSH
39447: LD_INT 3
39449: LESS
39450: AND
39451: IFFALSE 39508
// for i in result do
39453: LD_ADDR_VAR 0 5
39457: PUSH
39458: LD_VAR 0 4
39462: PUSH
39463: FOR_IN
39464: IFFALSE 39506
// if GetTech ( i , side ) <> state then
39466: LD_VAR 0 5
39470: PPUSH
39471: LD_VAR 0 1
39475: PPUSH
39476: CALL_OW 321
39480: PUSH
39481: LD_VAR 0 3
39485: NONEQUAL
39486: IFFALSE 39504
// result := result diff i ;
39488: LD_ADDR_VAR 0 4
39492: PUSH
39493: LD_VAR 0 4
39497: PUSH
39498: LD_VAR 0 5
39502: DIFF
39503: ST_TO_ADDR
39504: GO 39463
39506: POP
39507: POP
// end ;
39508: LD_VAR 0 4
39512: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39513: LD_INT 0
39515: PPUSH
39516: PPUSH
39517: PPUSH
// result := true ;
39518: LD_ADDR_VAR 0 3
39522: PUSH
39523: LD_INT 1
39525: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39526: LD_ADDR_VAR 0 5
39530: PUSH
39531: LD_VAR 0 2
39535: PPUSH
39536: CALL_OW 480
39540: ST_TO_ADDR
// if not tmp then
39541: LD_VAR 0 5
39545: NOT
39546: IFFALSE 39550
// exit ;
39548: GO 39599
// for i in tmp do
39550: LD_ADDR_VAR 0 4
39554: PUSH
39555: LD_VAR 0 5
39559: PUSH
39560: FOR_IN
39561: IFFALSE 39597
// if GetTech ( i , side ) <> state_researched then
39563: LD_VAR 0 4
39567: PPUSH
39568: LD_VAR 0 1
39572: PPUSH
39573: CALL_OW 321
39577: PUSH
39578: LD_INT 2
39580: NONEQUAL
39581: IFFALSE 39595
// begin result := false ;
39583: LD_ADDR_VAR 0 3
39587: PUSH
39588: LD_INT 0
39590: ST_TO_ADDR
// exit ;
39591: POP
39592: POP
39593: GO 39599
// end ;
39595: GO 39560
39597: POP
39598: POP
// end ;
39599: LD_VAR 0 3
39603: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39604: LD_INT 0
39606: PPUSH
39607: PPUSH
39608: PPUSH
39609: PPUSH
39610: PPUSH
39611: PPUSH
39612: PPUSH
39613: PPUSH
39614: PPUSH
39615: PPUSH
39616: PPUSH
39617: PPUSH
39618: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39619: LD_VAR 0 1
39623: NOT
39624: PUSH
39625: LD_VAR 0 1
39629: PPUSH
39630: CALL_OW 257
39634: PUSH
39635: LD_INT 9
39637: NONEQUAL
39638: OR
39639: IFFALSE 39643
// exit ;
39641: GO 40216
// side := GetSide ( unit ) ;
39643: LD_ADDR_VAR 0 9
39647: PUSH
39648: LD_VAR 0 1
39652: PPUSH
39653: CALL_OW 255
39657: ST_TO_ADDR
// tech_space := tech_spacanom ;
39658: LD_ADDR_VAR 0 12
39662: PUSH
39663: LD_INT 29
39665: ST_TO_ADDR
// tech_time := tech_taurad ;
39666: LD_ADDR_VAR 0 13
39670: PUSH
39671: LD_INT 28
39673: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39674: LD_ADDR_VAR 0 11
39678: PUSH
39679: LD_VAR 0 1
39683: PPUSH
39684: CALL_OW 310
39688: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39689: LD_VAR 0 11
39693: PPUSH
39694: CALL_OW 247
39698: PUSH
39699: LD_INT 2
39701: EQUAL
39702: IFFALSE 39706
// exit ;
39704: GO 40216
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39706: LD_ADDR_VAR 0 8
39710: PUSH
39711: LD_INT 81
39713: PUSH
39714: LD_VAR 0 9
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 3
39725: PUSH
39726: LD_INT 21
39728: PUSH
39729: LD_INT 3
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PPUSH
39744: CALL_OW 69
39748: ST_TO_ADDR
// if not tmp then
39749: LD_VAR 0 8
39753: NOT
39754: IFFALSE 39758
// exit ;
39756: GO 40216
// if in_unit then
39758: LD_VAR 0 11
39762: IFFALSE 39786
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39764: LD_ADDR_VAR 0 10
39768: PUSH
39769: LD_VAR 0 8
39773: PPUSH
39774: LD_VAR 0 11
39778: PPUSH
39779: CALL_OW 74
39783: ST_TO_ADDR
39784: GO 39806
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39786: LD_ADDR_VAR 0 10
39790: PUSH
39791: LD_VAR 0 8
39795: PPUSH
39796: LD_VAR 0 1
39800: PPUSH
39801: CALL_OW 74
39805: ST_TO_ADDR
// if not enemy then
39806: LD_VAR 0 10
39810: NOT
39811: IFFALSE 39815
// exit ;
39813: GO 40216
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39815: LD_VAR 0 11
39819: PUSH
39820: LD_VAR 0 11
39824: PPUSH
39825: LD_VAR 0 10
39829: PPUSH
39830: CALL_OW 296
39834: PUSH
39835: LD_INT 13
39837: GREATER
39838: AND
39839: PUSH
39840: LD_VAR 0 1
39844: PPUSH
39845: LD_VAR 0 10
39849: PPUSH
39850: CALL_OW 296
39854: PUSH
39855: LD_INT 12
39857: GREATER
39858: OR
39859: IFFALSE 39863
// exit ;
39861: GO 40216
// missile := [ 1 ] ;
39863: LD_ADDR_VAR 0 14
39867: PUSH
39868: LD_INT 1
39870: PUSH
39871: EMPTY
39872: LIST
39873: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39874: LD_VAR 0 9
39878: PPUSH
39879: LD_VAR 0 12
39883: PPUSH
39884: CALL_OW 325
39888: IFFALSE 39917
// missile := Replace ( missile , missile + 1 , 2 ) ;
39890: LD_ADDR_VAR 0 14
39894: PUSH
39895: LD_VAR 0 14
39899: PPUSH
39900: LD_VAR 0 14
39904: PUSH
39905: LD_INT 1
39907: PLUS
39908: PPUSH
39909: LD_INT 2
39911: PPUSH
39912: CALL_OW 1
39916: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39917: LD_VAR 0 9
39921: PPUSH
39922: LD_VAR 0 13
39926: PPUSH
39927: CALL_OW 325
39931: PUSH
39932: LD_VAR 0 10
39936: PPUSH
39937: CALL_OW 255
39941: PPUSH
39942: LD_VAR 0 13
39946: PPUSH
39947: CALL_OW 325
39951: NOT
39952: AND
39953: IFFALSE 39982
// missile := Replace ( missile , missile + 1 , 3 ) ;
39955: LD_ADDR_VAR 0 14
39959: PUSH
39960: LD_VAR 0 14
39964: PPUSH
39965: LD_VAR 0 14
39969: PUSH
39970: LD_INT 1
39972: PLUS
39973: PPUSH
39974: LD_INT 3
39976: PPUSH
39977: CALL_OW 1
39981: ST_TO_ADDR
// if missile < 2 then
39982: LD_VAR 0 14
39986: PUSH
39987: LD_INT 2
39989: LESS
39990: IFFALSE 39994
// exit ;
39992: GO 40216
// x := GetX ( enemy ) ;
39994: LD_ADDR_VAR 0 4
39998: PUSH
39999: LD_VAR 0 10
40003: PPUSH
40004: CALL_OW 250
40008: ST_TO_ADDR
// y := GetY ( enemy ) ;
40009: LD_ADDR_VAR 0 5
40013: PUSH
40014: LD_VAR 0 10
40018: PPUSH
40019: CALL_OW 251
40023: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40024: LD_ADDR_VAR 0 6
40028: PUSH
40029: LD_VAR 0 4
40033: PUSH
40034: LD_INT 1
40036: NEG
40037: PPUSH
40038: LD_INT 1
40040: PPUSH
40041: CALL_OW 12
40045: PLUS
40046: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40047: LD_ADDR_VAR 0 7
40051: PUSH
40052: LD_VAR 0 5
40056: PUSH
40057: LD_INT 1
40059: NEG
40060: PPUSH
40061: LD_INT 1
40063: PPUSH
40064: CALL_OW 12
40068: PLUS
40069: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40070: LD_VAR 0 6
40074: PPUSH
40075: LD_VAR 0 7
40079: PPUSH
40080: CALL_OW 488
40084: NOT
40085: IFFALSE 40107
// begin _x := x ;
40087: LD_ADDR_VAR 0 6
40091: PUSH
40092: LD_VAR 0 4
40096: ST_TO_ADDR
// _y := y ;
40097: LD_ADDR_VAR 0 7
40101: PUSH
40102: LD_VAR 0 5
40106: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40107: LD_ADDR_VAR 0 3
40111: PUSH
40112: LD_INT 1
40114: PPUSH
40115: LD_VAR 0 14
40119: PPUSH
40120: CALL_OW 12
40124: ST_TO_ADDR
// case i of 1 :
40125: LD_VAR 0 3
40129: PUSH
40130: LD_INT 1
40132: DOUBLE
40133: EQUAL
40134: IFTRUE 40138
40136: GO 40155
40138: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40139: LD_VAR 0 1
40143: PPUSH
40144: LD_VAR 0 10
40148: PPUSH
40149: CALL_OW 115
40153: GO 40216
40155: LD_INT 2
40157: DOUBLE
40158: EQUAL
40159: IFTRUE 40163
40161: GO 40185
40163: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40164: LD_VAR 0 1
40168: PPUSH
40169: LD_VAR 0 6
40173: PPUSH
40174: LD_VAR 0 7
40178: PPUSH
40179: CALL_OW 153
40183: GO 40216
40185: LD_INT 3
40187: DOUBLE
40188: EQUAL
40189: IFTRUE 40193
40191: GO 40215
40193: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40194: LD_VAR 0 1
40198: PPUSH
40199: LD_VAR 0 6
40203: PPUSH
40204: LD_VAR 0 7
40208: PPUSH
40209: CALL_OW 154
40213: GO 40216
40215: POP
// end ;
40216: LD_VAR 0 2
40220: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40221: LD_INT 0
40223: PPUSH
40224: PPUSH
40225: PPUSH
40226: PPUSH
40227: PPUSH
40228: PPUSH
// if not unit or not building then
40229: LD_VAR 0 1
40233: NOT
40234: PUSH
40235: LD_VAR 0 2
40239: NOT
40240: OR
40241: IFFALSE 40245
// exit ;
40243: GO 40403
// x := GetX ( building ) ;
40245: LD_ADDR_VAR 0 5
40249: PUSH
40250: LD_VAR 0 2
40254: PPUSH
40255: CALL_OW 250
40259: ST_TO_ADDR
// y := GetY ( building ) ;
40260: LD_ADDR_VAR 0 6
40264: PUSH
40265: LD_VAR 0 2
40269: PPUSH
40270: CALL_OW 251
40274: ST_TO_ADDR
// for i = 0 to 5 do
40275: LD_ADDR_VAR 0 4
40279: PUSH
40280: DOUBLE
40281: LD_INT 0
40283: DEC
40284: ST_TO_ADDR
40285: LD_INT 5
40287: PUSH
40288: FOR_TO
40289: IFFALSE 40401
// begin _x := ShiftX ( x , i , 3 ) ;
40291: LD_ADDR_VAR 0 7
40295: PUSH
40296: LD_VAR 0 5
40300: PPUSH
40301: LD_VAR 0 4
40305: PPUSH
40306: LD_INT 3
40308: PPUSH
40309: CALL_OW 272
40313: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40314: LD_ADDR_VAR 0 8
40318: PUSH
40319: LD_VAR 0 6
40323: PPUSH
40324: LD_VAR 0 4
40328: PPUSH
40329: LD_INT 3
40331: PPUSH
40332: CALL_OW 273
40336: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40337: LD_VAR 0 7
40341: PPUSH
40342: LD_VAR 0 8
40346: PPUSH
40347: CALL_OW 488
40351: NOT
40352: IFFALSE 40356
// continue ;
40354: GO 40288
// if HexInfo ( _x , _y ) = 0 then
40356: LD_VAR 0 7
40360: PPUSH
40361: LD_VAR 0 8
40365: PPUSH
40366: CALL_OW 428
40370: PUSH
40371: LD_INT 0
40373: EQUAL
40374: IFFALSE 40399
// begin ComMoveXY ( unit , _x , _y ) ;
40376: LD_VAR 0 1
40380: PPUSH
40381: LD_VAR 0 7
40385: PPUSH
40386: LD_VAR 0 8
40390: PPUSH
40391: CALL_OW 111
// exit ;
40395: POP
40396: POP
40397: GO 40403
// end ; end ;
40399: GO 40288
40401: POP
40402: POP
// end ;
40403: LD_VAR 0 3
40407: RET
// export function ScanBase ( side , base_area ) ; begin
40408: LD_INT 0
40410: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40411: LD_ADDR_VAR 0 3
40415: PUSH
40416: LD_VAR 0 2
40420: PPUSH
40421: LD_INT 81
40423: PUSH
40424: LD_VAR 0 1
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PPUSH
40433: CALL_OW 70
40437: ST_TO_ADDR
// end ;
40438: LD_VAR 0 3
40442: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40443: LD_INT 0
40445: PPUSH
40446: PPUSH
40447: PPUSH
40448: PPUSH
// result := false ;
40449: LD_ADDR_VAR 0 2
40453: PUSH
40454: LD_INT 0
40456: ST_TO_ADDR
// side := GetSide ( unit ) ;
40457: LD_ADDR_VAR 0 3
40461: PUSH
40462: LD_VAR 0 1
40466: PPUSH
40467: CALL_OW 255
40471: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40472: LD_ADDR_VAR 0 4
40476: PUSH
40477: LD_VAR 0 1
40481: PPUSH
40482: CALL_OW 248
40486: ST_TO_ADDR
// case nat of 1 :
40487: LD_VAR 0 4
40491: PUSH
40492: LD_INT 1
40494: DOUBLE
40495: EQUAL
40496: IFTRUE 40500
40498: GO 40511
40500: POP
// tech := tech_lassight ; 2 :
40501: LD_ADDR_VAR 0 5
40505: PUSH
40506: LD_INT 12
40508: ST_TO_ADDR
40509: GO 40550
40511: LD_INT 2
40513: DOUBLE
40514: EQUAL
40515: IFTRUE 40519
40517: GO 40530
40519: POP
// tech := tech_mortar ; 3 :
40520: LD_ADDR_VAR 0 5
40524: PUSH
40525: LD_INT 41
40527: ST_TO_ADDR
40528: GO 40550
40530: LD_INT 3
40532: DOUBLE
40533: EQUAL
40534: IFTRUE 40538
40536: GO 40549
40538: POP
// tech := tech_bazooka ; end ;
40539: LD_ADDR_VAR 0 5
40543: PUSH
40544: LD_INT 44
40546: ST_TO_ADDR
40547: GO 40550
40549: POP
// if Researched ( side , tech ) then
40550: LD_VAR 0 3
40554: PPUSH
40555: LD_VAR 0 5
40559: PPUSH
40560: CALL_OW 325
40564: IFFALSE 40591
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40566: LD_ADDR_VAR 0 2
40570: PUSH
40571: LD_INT 5
40573: PUSH
40574: LD_INT 8
40576: PUSH
40577: LD_INT 9
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: LIST
40584: PUSH
40585: LD_VAR 0 4
40589: ARRAY
40590: ST_TO_ADDR
// end ;
40591: LD_VAR 0 2
40595: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40596: LD_INT 0
40598: PPUSH
40599: PPUSH
40600: PPUSH
// if not mines then
40601: LD_VAR 0 2
40605: NOT
40606: IFFALSE 40610
// exit ;
40608: GO 40754
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40610: LD_ADDR_VAR 0 5
40614: PUSH
40615: LD_INT 81
40617: PUSH
40618: LD_VAR 0 1
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_INT 3
40629: PUSH
40630: LD_INT 21
40632: PUSH
40633: LD_INT 3
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PPUSH
40648: CALL_OW 69
40652: ST_TO_ADDR
// for i in mines do
40653: LD_ADDR_VAR 0 4
40657: PUSH
40658: LD_VAR 0 2
40662: PUSH
40663: FOR_IN
40664: IFFALSE 40752
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40666: LD_VAR 0 4
40670: PUSH
40671: LD_INT 1
40673: ARRAY
40674: PPUSH
40675: LD_VAR 0 4
40679: PUSH
40680: LD_INT 2
40682: ARRAY
40683: PPUSH
40684: CALL_OW 458
40688: NOT
40689: IFFALSE 40693
// continue ;
40691: GO 40663
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40693: LD_VAR 0 4
40697: PUSH
40698: LD_INT 1
40700: ARRAY
40701: PPUSH
40702: LD_VAR 0 4
40706: PUSH
40707: LD_INT 2
40709: ARRAY
40710: PPUSH
40711: CALL_OW 428
40715: PUSH
40716: LD_VAR 0 5
40720: IN
40721: IFFALSE 40750
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40723: LD_VAR 0 4
40727: PUSH
40728: LD_INT 1
40730: ARRAY
40731: PPUSH
40732: LD_VAR 0 4
40736: PUSH
40737: LD_INT 2
40739: ARRAY
40740: PPUSH
40741: LD_VAR 0 1
40745: PPUSH
40746: CALL_OW 456
// end ;
40750: GO 40663
40752: POP
40753: POP
// end ;
40754: LD_VAR 0 3
40758: RET
// export function Count ( array ) ; begin
40759: LD_INT 0
40761: PPUSH
// result := array + 0 ;
40762: LD_ADDR_VAR 0 2
40766: PUSH
40767: LD_VAR 0 1
40771: PUSH
40772: LD_INT 0
40774: PLUS
40775: ST_TO_ADDR
// end ;
40776: LD_VAR 0 2
40780: RET
// export function IsEmpty ( building ) ; begin
40781: LD_INT 0
40783: PPUSH
// if not building then
40784: LD_VAR 0 1
40788: NOT
40789: IFFALSE 40793
// exit ;
40791: GO 40836
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40793: LD_ADDR_VAR 0 2
40797: PUSH
40798: LD_VAR 0 1
40802: PUSH
40803: LD_INT 22
40805: PUSH
40806: LD_VAR 0 1
40810: PPUSH
40811: CALL_OW 255
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 58
40822: PUSH
40823: EMPTY
40824: LIST
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PPUSH
40830: CALL_OW 69
40834: IN
40835: ST_TO_ADDR
// end ;
40836: LD_VAR 0 2
40840: RET
// export function IsNotFull ( building ) ; var places ; begin
40841: LD_INT 0
40843: PPUSH
40844: PPUSH
// if not building then
40845: LD_VAR 0 1
40849: NOT
40850: IFFALSE 40854
// exit ;
40852: GO 40882
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
40854: LD_ADDR_VAR 0 2
40858: PUSH
40859: LD_VAR 0 1
40863: PPUSH
40864: LD_INT 3
40866: PUSH
40867: LD_INT 62
40869: PUSH
40870: EMPTY
40871: LIST
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PPUSH
40877: CALL_OW 72
40881: ST_TO_ADDR
// end ;
40882: LD_VAR 0 2
40886: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40887: LD_INT 0
40889: PPUSH
40890: PPUSH
40891: PPUSH
40892: PPUSH
// tmp := [ ] ;
40893: LD_ADDR_VAR 0 3
40897: PUSH
40898: EMPTY
40899: ST_TO_ADDR
// list := [ ] ;
40900: LD_ADDR_VAR 0 5
40904: PUSH
40905: EMPTY
40906: ST_TO_ADDR
// for i = 16 to 25 do
40907: LD_ADDR_VAR 0 4
40911: PUSH
40912: DOUBLE
40913: LD_INT 16
40915: DEC
40916: ST_TO_ADDR
40917: LD_INT 25
40919: PUSH
40920: FOR_TO
40921: IFFALSE 40994
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40923: LD_ADDR_VAR 0 3
40927: PUSH
40928: LD_VAR 0 3
40932: PUSH
40933: LD_INT 22
40935: PUSH
40936: LD_VAR 0 1
40940: PPUSH
40941: CALL_OW 255
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 91
40952: PUSH
40953: LD_VAR 0 1
40957: PUSH
40958: LD_INT 6
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 30
40968: PUSH
40969: LD_VAR 0 4
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: LIST
40982: PUSH
40983: EMPTY
40984: LIST
40985: PPUSH
40986: CALL_OW 69
40990: ADD
40991: ST_TO_ADDR
40992: GO 40920
40994: POP
40995: POP
// for i = 1 to tmp do
40996: LD_ADDR_VAR 0 4
41000: PUSH
41001: DOUBLE
41002: LD_INT 1
41004: DEC
41005: ST_TO_ADDR
41006: LD_VAR 0 3
41010: PUSH
41011: FOR_TO
41012: IFFALSE 41100
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41014: LD_ADDR_VAR 0 5
41018: PUSH
41019: LD_VAR 0 5
41023: PUSH
41024: LD_VAR 0 3
41028: PUSH
41029: LD_VAR 0 4
41033: ARRAY
41034: PPUSH
41035: CALL_OW 266
41039: PUSH
41040: LD_VAR 0 3
41044: PUSH
41045: LD_VAR 0 4
41049: ARRAY
41050: PPUSH
41051: CALL_OW 250
41055: PUSH
41056: LD_VAR 0 3
41060: PUSH
41061: LD_VAR 0 4
41065: ARRAY
41066: PPUSH
41067: CALL_OW 251
41071: PUSH
41072: LD_VAR 0 3
41076: PUSH
41077: LD_VAR 0 4
41081: ARRAY
41082: PPUSH
41083: CALL_OW 254
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: PUSH
41094: EMPTY
41095: LIST
41096: ADD
41097: ST_TO_ADDR
41098: GO 41011
41100: POP
41101: POP
// result := list ;
41102: LD_ADDR_VAR 0 2
41106: PUSH
41107: LD_VAR 0 5
41111: ST_TO_ADDR
// end ;
41112: LD_VAR 0 2
41116: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41117: LD_INT 0
41119: PPUSH
41120: PPUSH
41121: PPUSH
41122: PPUSH
41123: PPUSH
41124: PPUSH
41125: PPUSH
// if not factory then
41126: LD_VAR 0 1
41130: NOT
41131: IFFALSE 41135
// exit ;
41133: GO 41728
// if control = control_apeman then
41135: LD_VAR 0 4
41139: PUSH
41140: LD_INT 5
41142: EQUAL
41143: IFFALSE 41252
// begin tmp := UnitsInside ( factory ) ;
41145: LD_ADDR_VAR 0 8
41149: PUSH
41150: LD_VAR 0 1
41154: PPUSH
41155: CALL_OW 313
41159: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41160: LD_VAR 0 8
41164: PPUSH
41165: LD_INT 25
41167: PUSH
41168: LD_INT 12
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PPUSH
41175: CALL_OW 72
41179: NOT
41180: IFFALSE 41190
// control := control_manual ;
41182: LD_ADDR_VAR 0 4
41186: PUSH
41187: LD_INT 1
41189: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41190: LD_ADDR_VAR 0 8
41194: PUSH
41195: LD_VAR 0 1
41199: PPUSH
41200: CALL 40887 0 1
41204: ST_TO_ADDR
// if tmp then
41205: LD_VAR 0 8
41209: IFFALSE 41252
// begin for i in tmp do
41211: LD_ADDR_VAR 0 7
41215: PUSH
41216: LD_VAR 0 8
41220: PUSH
41221: FOR_IN
41222: IFFALSE 41250
// if i [ 1 ] = b_ext_radio then
41224: LD_VAR 0 7
41228: PUSH
41229: LD_INT 1
41231: ARRAY
41232: PUSH
41233: LD_INT 22
41235: EQUAL
41236: IFFALSE 41248
// begin control := control_remote ;
41238: LD_ADDR_VAR 0 4
41242: PUSH
41243: LD_INT 2
41245: ST_TO_ADDR
// break ;
41246: GO 41250
// end ;
41248: GO 41221
41250: POP
41251: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41252: LD_VAR 0 1
41256: PPUSH
41257: LD_VAR 0 2
41261: PPUSH
41262: LD_VAR 0 3
41266: PPUSH
41267: LD_VAR 0 4
41271: PPUSH
41272: LD_VAR 0 5
41276: PPUSH
41277: CALL_OW 448
41281: IFFALSE 41316
// begin result := [ chassis , engine , control , weapon ] ;
41283: LD_ADDR_VAR 0 6
41287: PUSH
41288: LD_VAR 0 2
41292: PUSH
41293: LD_VAR 0 3
41297: PUSH
41298: LD_VAR 0 4
41302: PUSH
41303: LD_VAR 0 5
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: LIST
41312: LIST
41313: ST_TO_ADDR
// exit ;
41314: GO 41728
// end ; _chassis := AvailableChassisList ( factory ) ;
41316: LD_ADDR_VAR 0 9
41320: PUSH
41321: LD_VAR 0 1
41325: PPUSH
41326: CALL_OW 475
41330: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41331: LD_ADDR_VAR 0 11
41335: PUSH
41336: LD_VAR 0 1
41340: PPUSH
41341: CALL_OW 476
41345: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41346: LD_ADDR_VAR 0 12
41350: PUSH
41351: LD_VAR 0 1
41355: PPUSH
41356: CALL_OW 477
41360: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41361: LD_ADDR_VAR 0 10
41365: PUSH
41366: LD_VAR 0 1
41370: PPUSH
41371: CALL_OW 478
41375: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41376: LD_VAR 0 9
41380: NOT
41381: PUSH
41382: LD_VAR 0 11
41386: NOT
41387: OR
41388: PUSH
41389: LD_VAR 0 12
41393: NOT
41394: OR
41395: PUSH
41396: LD_VAR 0 10
41400: NOT
41401: OR
41402: IFFALSE 41437
// begin result := [ chassis , engine , control , weapon ] ;
41404: LD_ADDR_VAR 0 6
41408: PUSH
41409: LD_VAR 0 2
41413: PUSH
41414: LD_VAR 0 3
41418: PUSH
41419: LD_VAR 0 4
41423: PUSH
41424: LD_VAR 0 5
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: ST_TO_ADDR
// exit ;
41435: GO 41728
// end ; if not chassis in _chassis then
41437: LD_VAR 0 2
41441: PUSH
41442: LD_VAR 0 9
41446: IN
41447: NOT
41448: IFFALSE 41474
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41450: LD_ADDR_VAR 0 2
41454: PUSH
41455: LD_VAR 0 9
41459: PUSH
41460: LD_INT 1
41462: PPUSH
41463: LD_VAR 0 9
41467: PPUSH
41468: CALL_OW 12
41472: ARRAY
41473: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41474: LD_VAR 0 2
41478: PPUSH
41479: LD_VAR 0 3
41483: PPUSH
41484: CALL 41733 0 2
41488: NOT
41489: IFFALSE 41548
// repeat engine := _engine [ 1 ] ;
41491: LD_ADDR_VAR 0 3
41495: PUSH
41496: LD_VAR 0 11
41500: PUSH
41501: LD_INT 1
41503: ARRAY
41504: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41505: LD_ADDR_VAR 0 11
41509: PUSH
41510: LD_VAR 0 11
41514: PPUSH
41515: LD_INT 1
41517: PPUSH
41518: CALL_OW 3
41522: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41523: LD_VAR 0 2
41527: PPUSH
41528: LD_VAR 0 3
41532: PPUSH
41533: CALL 41733 0 2
41537: PUSH
41538: LD_VAR 0 11
41542: PUSH
41543: EMPTY
41544: EQUAL
41545: OR
41546: IFFALSE 41491
// if not control in _control then
41548: LD_VAR 0 4
41552: PUSH
41553: LD_VAR 0 12
41557: IN
41558: NOT
41559: IFFALSE 41585
// control := _control [ rand ( 1 , _control ) ] ;
41561: LD_ADDR_VAR 0 4
41565: PUSH
41566: LD_VAR 0 12
41570: PUSH
41571: LD_INT 1
41573: PPUSH
41574: LD_VAR 0 12
41578: PPUSH
41579: CALL_OW 12
41583: ARRAY
41584: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41585: LD_VAR 0 2
41589: PPUSH
41590: LD_VAR 0 5
41594: PPUSH
41595: CALL 41953 0 2
41599: NOT
41600: IFFALSE 41659
// repeat weapon := _weapon [ 1 ] ;
41602: LD_ADDR_VAR 0 5
41606: PUSH
41607: LD_VAR 0 10
41611: PUSH
41612: LD_INT 1
41614: ARRAY
41615: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41616: LD_ADDR_VAR 0 10
41620: PUSH
41621: LD_VAR 0 10
41625: PPUSH
41626: LD_INT 1
41628: PPUSH
41629: CALL_OW 3
41633: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41634: LD_VAR 0 2
41638: PPUSH
41639: LD_VAR 0 5
41643: PPUSH
41644: CALL 41953 0 2
41648: PUSH
41649: LD_VAR 0 10
41653: PUSH
41654: EMPTY
41655: EQUAL
41656: OR
41657: IFFALSE 41602
// result := [ ] ;
41659: LD_ADDR_VAR 0 6
41663: PUSH
41664: EMPTY
41665: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41666: LD_VAR 0 1
41670: PPUSH
41671: LD_VAR 0 2
41675: PPUSH
41676: LD_VAR 0 3
41680: PPUSH
41681: LD_VAR 0 4
41685: PPUSH
41686: LD_VAR 0 5
41690: PPUSH
41691: CALL_OW 448
41695: IFFALSE 41728
// result := [ chassis , engine , control , weapon ] ;
41697: LD_ADDR_VAR 0 6
41701: PUSH
41702: LD_VAR 0 2
41706: PUSH
41707: LD_VAR 0 3
41711: PUSH
41712: LD_VAR 0 4
41716: PUSH
41717: LD_VAR 0 5
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: ST_TO_ADDR
// end ;
41728: LD_VAR 0 6
41732: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41733: LD_INT 0
41735: PPUSH
// if not chassis or not engine then
41736: LD_VAR 0 1
41740: NOT
41741: PUSH
41742: LD_VAR 0 2
41746: NOT
41747: OR
41748: IFFALSE 41752
// exit ;
41750: GO 41948
// case engine of engine_solar :
41752: LD_VAR 0 2
41756: PUSH
41757: LD_INT 2
41759: DOUBLE
41760: EQUAL
41761: IFTRUE 41765
41763: GO 41803
41765: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41766: LD_ADDR_VAR 0 3
41770: PUSH
41771: LD_INT 11
41773: PUSH
41774: LD_INT 12
41776: PUSH
41777: LD_INT 13
41779: PUSH
41780: LD_INT 14
41782: PUSH
41783: LD_INT 1
41785: PUSH
41786: LD_INT 2
41788: PUSH
41789: LD_INT 3
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: ST_TO_ADDR
41801: GO 41932
41803: LD_INT 1
41805: DOUBLE
41806: EQUAL
41807: IFTRUE 41811
41809: GO 41873
41811: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41812: LD_ADDR_VAR 0 3
41816: PUSH
41817: LD_INT 11
41819: PUSH
41820: LD_INT 12
41822: PUSH
41823: LD_INT 13
41825: PUSH
41826: LD_INT 14
41828: PUSH
41829: LD_INT 1
41831: PUSH
41832: LD_INT 2
41834: PUSH
41835: LD_INT 3
41837: PUSH
41838: LD_INT 4
41840: PUSH
41841: LD_INT 5
41843: PUSH
41844: LD_INT 21
41846: PUSH
41847: LD_INT 23
41849: PUSH
41850: LD_INT 22
41852: PUSH
41853: LD_INT 24
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: ST_TO_ADDR
41871: GO 41932
41873: LD_INT 3
41875: DOUBLE
41876: EQUAL
41877: IFTRUE 41881
41879: GO 41931
41881: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41882: LD_ADDR_VAR 0 3
41886: PUSH
41887: LD_INT 13
41889: PUSH
41890: LD_INT 14
41892: PUSH
41893: LD_INT 2
41895: PUSH
41896: LD_INT 3
41898: PUSH
41899: LD_INT 4
41901: PUSH
41902: LD_INT 5
41904: PUSH
41905: LD_INT 21
41907: PUSH
41908: LD_INT 22
41910: PUSH
41911: LD_INT 23
41913: PUSH
41914: LD_INT 24
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: ST_TO_ADDR
41929: GO 41932
41931: POP
// result := ( chassis in result ) ;
41932: LD_ADDR_VAR 0 3
41936: PUSH
41937: LD_VAR 0 1
41941: PUSH
41942: LD_VAR 0 3
41946: IN
41947: ST_TO_ADDR
// end ;
41948: LD_VAR 0 3
41952: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41953: LD_INT 0
41955: PPUSH
// if not chassis or not weapon then
41956: LD_VAR 0 1
41960: NOT
41961: PUSH
41962: LD_VAR 0 2
41966: NOT
41967: OR
41968: IFFALSE 41972
// exit ;
41970: GO 43032
// case weapon of us_machine_gun :
41972: LD_VAR 0 2
41976: PUSH
41977: LD_INT 2
41979: DOUBLE
41980: EQUAL
41981: IFTRUE 41985
41983: GO 42015
41985: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41986: LD_ADDR_VAR 0 3
41990: PUSH
41991: LD_INT 1
41993: PUSH
41994: LD_INT 2
41996: PUSH
41997: LD_INT 3
41999: PUSH
42000: LD_INT 4
42002: PUSH
42003: LD_INT 5
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: ST_TO_ADDR
42013: GO 43016
42015: LD_INT 3
42017: DOUBLE
42018: EQUAL
42019: IFTRUE 42023
42021: GO 42053
42023: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42024: LD_ADDR_VAR 0 3
42028: PUSH
42029: LD_INT 1
42031: PUSH
42032: LD_INT 2
42034: PUSH
42035: LD_INT 3
42037: PUSH
42038: LD_INT 4
42040: PUSH
42041: LD_INT 5
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: ST_TO_ADDR
42051: GO 43016
42053: LD_INT 11
42055: DOUBLE
42056: EQUAL
42057: IFTRUE 42061
42059: GO 42091
42061: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42062: LD_ADDR_VAR 0 3
42066: PUSH
42067: LD_INT 1
42069: PUSH
42070: LD_INT 2
42072: PUSH
42073: LD_INT 3
42075: PUSH
42076: LD_INT 4
42078: PUSH
42079: LD_INT 5
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: ST_TO_ADDR
42089: GO 43016
42091: LD_INT 4
42093: DOUBLE
42094: EQUAL
42095: IFTRUE 42099
42097: GO 42125
42099: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42100: LD_ADDR_VAR 0 3
42104: PUSH
42105: LD_INT 2
42107: PUSH
42108: LD_INT 3
42110: PUSH
42111: LD_INT 4
42113: PUSH
42114: LD_INT 5
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: ST_TO_ADDR
42123: GO 43016
42125: LD_INT 5
42127: DOUBLE
42128: EQUAL
42129: IFTRUE 42133
42131: GO 42159
42133: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42134: LD_ADDR_VAR 0 3
42138: PUSH
42139: LD_INT 2
42141: PUSH
42142: LD_INT 3
42144: PUSH
42145: LD_INT 4
42147: PUSH
42148: LD_INT 5
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: ST_TO_ADDR
42157: GO 43016
42159: LD_INT 9
42161: DOUBLE
42162: EQUAL
42163: IFTRUE 42167
42165: GO 42193
42167: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42168: LD_ADDR_VAR 0 3
42172: PUSH
42173: LD_INT 2
42175: PUSH
42176: LD_INT 3
42178: PUSH
42179: LD_INT 4
42181: PUSH
42182: LD_INT 5
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: ST_TO_ADDR
42191: GO 43016
42193: LD_INT 7
42195: DOUBLE
42196: EQUAL
42197: IFTRUE 42201
42199: GO 42227
42201: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42202: LD_ADDR_VAR 0 3
42206: PUSH
42207: LD_INT 2
42209: PUSH
42210: LD_INT 3
42212: PUSH
42213: LD_INT 4
42215: PUSH
42216: LD_INT 5
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: ST_TO_ADDR
42225: GO 43016
42227: LD_INT 12
42229: DOUBLE
42230: EQUAL
42231: IFTRUE 42235
42233: GO 42261
42235: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42236: LD_ADDR_VAR 0 3
42240: PUSH
42241: LD_INT 2
42243: PUSH
42244: LD_INT 3
42246: PUSH
42247: LD_INT 4
42249: PUSH
42250: LD_INT 5
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: ST_TO_ADDR
42259: GO 43016
42261: LD_INT 13
42263: DOUBLE
42264: EQUAL
42265: IFTRUE 42269
42267: GO 42295
42269: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42270: LD_ADDR_VAR 0 3
42274: PUSH
42275: LD_INT 2
42277: PUSH
42278: LD_INT 3
42280: PUSH
42281: LD_INT 4
42283: PUSH
42284: LD_INT 5
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: ST_TO_ADDR
42293: GO 43016
42295: LD_INT 14
42297: DOUBLE
42298: EQUAL
42299: IFTRUE 42303
42301: GO 42321
42303: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42304: LD_ADDR_VAR 0 3
42308: PUSH
42309: LD_INT 4
42311: PUSH
42312: LD_INT 5
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: ST_TO_ADDR
42319: GO 43016
42321: LD_INT 6
42323: DOUBLE
42324: EQUAL
42325: IFTRUE 42329
42327: GO 42347
42329: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42330: LD_ADDR_VAR 0 3
42334: PUSH
42335: LD_INT 4
42337: PUSH
42338: LD_INT 5
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: ST_TO_ADDR
42345: GO 43016
42347: LD_INT 10
42349: DOUBLE
42350: EQUAL
42351: IFTRUE 42355
42353: GO 42373
42355: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42356: LD_ADDR_VAR 0 3
42360: PUSH
42361: LD_INT 4
42363: PUSH
42364: LD_INT 5
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: ST_TO_ADDR
42371: GO 43016
42373: LD_INT 22
42375: DOUBLE
42376: EQUAL
42377: IFTRUE 42381
42379: GO 42407
42381: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42382: LD_ADDR_VAR 0 3
42386: PUSH
42387: LD_INT 11
42389: PUSH
42390: LD_INT 12
42392: PUSH
42393: LD_INT 13
42395: PUSH
42396: LD_INT 14
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: ST_TO_ADDR
42405: GO 43016
42407: LD_INT 23
42409: DOUBLE
42410: EQUAL
42411: IFTRUE 42415
42413: GO 42441
42415: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42416: LD_ADDR_VAR 0 3
42420: PUSH
42421: LD_INT 11
42423: PUSH
42424: LD_INT 12
42426: PUSH
42427: LD_INT 13
42429: PUSH
42430: LD_INT 14
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: ST_TO_ADDR
42439: GO 43016
42441: LD_INT 24
42443: DOUBLE
42444: EQUAL
42445: IFTRUE 42449
42447: GO 42475
42449: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42450: LD_ADDR_VAR 0 3
42454: PUSH
42455: LD_INT 11
42457: PUSH
42458: LD_INT 12
42460: PUSH
42461: LD_INT 13
42463: PUSH
42464: LD_INT 14
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: ST_TO_ADDR
42473: GO 43016
42475: LD_INT 30
42477: DOUBLE
42478: EQUAL
42479: IFTRUE 42483
42481: GO 42509
42483: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42484: LD_ADDR_VAR 0 3
42488: PUSH
42489: LD_INT 11
42491: PUSH
42492: LD_INT 12
42494: PUSH
42495: LD_INT 13
42497: PUSH
42498: LD_INT 14
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: ST_TO_ADDR
42507: GO 43016
42509: LD_INT 25
42511: DOUBLE
42512: EQUAL
42513: IFTRUE 42517
42515: GO 42535
42517: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42518: LD_ADDR_VAR 0 3
42522: PUSH
42523: LD_INT 13
42525: PUSH
42526: LD_INT 14
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: ST_TO_ADDR
42533: GO 43016
42535: LD_INT 27
42537: DOUBLE
42538: EQUAL
42539: IFTRUE 42543
42541: GO 42561
42543: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42544: LD_ADDR_VAR 0 3
42548: PUSH
42549: LD_INT 13
42551: PUSH
42552: LD_INT 14
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: ST_TO_ADDR
42559: GO 43016
42561: LD_INT 92
42563: DOUBLE
42564: EQUAL
42565: IFTRUE 42569
42567: GO 42595
42569: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42570: LD_ADDR_VAR 0 3
42574: PUSH
42575: LD_INT 11
42577: PUSH
42578: LD_INT 12
42580: PUSH
42581: LD_INT 13
42583: PUSH
42584: LD_INT 14
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: ST_TO_ADDR
42593: GO 43016
42595: LD_INT 28
42597: DOUBLE
42598: EQUAL
42599: IFTRUE 42603
42601: GO 42621
42603: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42604: LD_ADDR_VAR 0 3
42608: PUSH
42609: LD_INT 13
42611: PUSH
42612: LD_INT 14
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: ST_TO_ADDR
42619: GO 43016
42621: LD_INT 29
42623: DOUBLE
42624: EQUAL
42625: IFTRUE 42629
42627: GO 42647
42629: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42630: LD_ADDR_VAR 0 3
42634: PUSH
42635: LD_INT 13
42637: PUSH
42638: LD_INT 14
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: ST_TO_ADDR
42645: GO 43016
42647: LD_INT 31
42649: DOUBLE
42650: EQUAL
42651: IFTRUE 42655
42653: GO 42673
42655: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42656: LD_ADDR_VAR 0 3
42660: PUSH
42661: LD_INT 13
42663: PUSH
42664: LD_INT 14
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: ST_TO_ADDR
42671: GO 43016
42673: LD_INT 26
42675: DOUBLE
42676: EQUAL
42677: IFTRUE 42681
42679: GO 42699
42681: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42682: LD_ADDR_VAR 0 3
42686: PUSH
42687: LD_INT 13
42689: PUSH
42690: LD_INT 14
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: ST_TO_ADDR
42697: GO 43016
42699: LD_INT 42
42701: DOUBLE
42702: EQUAL
42703: IFTRUE 42707
42705: GO 42733
42707: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42708: LD_ADDR_VAR 0 3
42712: PUSH
42713: LD_INT 21
42715: PUSH
42716: LD_INT 22
42718: PUSH
42719: LD_INT 23
42721: PUSH
42722: LD_INT 24
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: ST_TO_ADDR
42731: GO 43016
42733: LD_INT 43
42735: DOUBLE
42736: EQUAL
42737: IFTRUE 42741
42739: GO 42767
42741: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42742: LD_ADDR_VAR 0 3
42746: PUSH
42747: LD_INT 21
42749: PUSH
42750: LD_INT 22
42752: PUSH
42753: LD_INT 23
42755: PUSH
42756: LD_INT 24
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: ST_TO_ADDR
42765: GO 43016
42767: LD_INT 44
42769: DOUBLE
42770: EQUAL
42771: IFTRUE 42775
42773: GO 42801
42775: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42776: LD_ADDR_VAR 0 3
42780: PUSH
42781: LD_INT 21
42783: PUSH
42784: LD_INT 22
42786: PUSH
42787: LD_INT 23
42789: PUSH
42790: LD_INT 24
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: ST_TO_ADDR
42799: GO 43016
42801: LD_INT 45
42803: DOUBLE
42804: EQUAL
42805: IFTRUE 42809
42807: GO 42835
42809: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42810: LD_ADDR_VAR 0 3
42814: PUSH
42815: LD_INT 21
42817: PUSH
42818: LD_INT 22
42820: PUSH
42821: LD_INT 23
42823: PUSH
42824: LD_INT 24
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: ST_TO_ADDR
42833: GO 43016
42835: LD_INT 49
42837: DOUBLE
42838: EQUAL
42839: IFTRUE 42843
42841: GO 42869
42843: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42844: LD_ADDR_VAR 0 3
42848: PUSH
42849: LD_INT 21
42851: PUSH
42852: LD_INT 22
42854: PUSH
42855: LD_INT 23
42857: PUSH
42858: LD_INT 24
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: ST_TO_ADDR
42867: GO 43016
42869: LD_INT 51
42871: DOUBLE
42872: EQUAL
42873: IFTRUE 42877
42875: GO 42903
42877: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42878: LD_ADDR_VAR 0 3
42882: PUSH
42883: LD_INT 21
42885: PUSH
42886: LD_INT 22
42888: PUSH
42889: LD_INT 23
42891: PUSH
42892: LD_INT 24
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: ST_TO_ADDR
42901: GO 43016
42903: LD_INT 52
42905: DOUBLE
42906: EQUAL
42907: IFTRUE 42911
42909: GO 42937
42911: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42912: LD_ADDR_VAR 0 3
42916: PUSH
42917: LD_INT 21
42919: PUSH
42920: LD_INT 22
42922: PUSH
42923: LD_INT 23
42925: PUSH
42926: LD_INT 24
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: ST_TO_ADDR
42935: GO 43016
42937: LD_INT 53
42939: DOUBLE
42940: EQUAL
42941: IFTRUE 42945
42943: GO 42963
42945: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42946: LD_ADDR_VAR 0 3
42950: PUSH
42951: LD_INT 23
42953: PUSH
42954: LD_INT 24
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: ST_TO_ADDR
42961: GO 43016
42963: LD_INT 46
42965: DOUBLE
42966: EQUAL
42967: IFTRUE 42971
42969: GO 42989
42971: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42972: LD_ADDR_VAR 0 3
42976: PUSH
42977: LD_INT 23
42979: PUSH
42980: LD_INT 24
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: ST_TO_ADDR
42987: GO 43016
42989: LD_INT 47
42991: DOUBLE
42992: EQUAL
42993: IFTRUE 42997
42995: GO 43015
42997: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42998: LD_ADDR_VAR 0 3
43002: PUSH
43003: LD_INT 23
43005: PUSH
43006: LD_INT 24
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: ST_TO_ADDR
43013: GO 43016
43015: POP
// result := ( chassis in result ) ;
43016: LD_ADDR_VAR 0 3
43020: PUSH
43021: LD_VAR 0 1
43025: PUSH
43026: LD_VAR 0 3
43030: IN
43031: ST_TO_ADDR
// end ;
43032: LD_VAR 0 3
43036: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43037: LD_INT 0
43039: PPUSH
43040: PPUSH
43041: PPUSH
43042: PPUSH
43043: PPUSH
43044: PPUSH
43045: PPUSH
// result := array ;
43046: LD_ADDR_VAR 0 5
43050: PUSH
43051: LD_VAR 0 1
43055: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43056: LD_VAR 0 1
43060: NOT
43061: PUSH
43062: LD_VAR 0 2
43066: NOT
43067: OR
43068: PUSH
43069: LD_VAR 0 3
43073: NOT
43074: OR
43075: PUSH
43076: LD_VAR 0 2
43080: PUSH
43081: LD_VAR 0 1
43085: GREATER
43086: OR
43087: PUSH
43088: LD_VAR 0 3
43092: PUSH
43093: LD_VAR 0 1
43097: GREATER
43098: OR
43099: IFFALSE 43103
// exit ;
43101: GO 43399
// if direction then
43103: LD_VAR 0 4
43107: IFFALSE 43171
// begin d := 1 ;
43109: LD_ADDR_VAR 0 9
43113: PUSH
43114: LD_INT 1
43116: ST_TO_ADDR
// if i_from > i_to then
43117: LD_VAR 0 2
43121: PUSH
43122: LD_VAR 0 3
43126: GREATER
43127: IFFALSE 43153
// length := ( array - i_from ) + i_to else
43129: LD_ADDR_VAR 0 11
43133: PUSH
43134: LD_VAR 0 1
43138: PUSH
43139: LD_VAR 0 2
43143: MINUS
43144: PUSH
43145: LD_VAR 0 3
43149: PLUS
43150: ST_TO_ADDR
43151: GO 43169
// length := i_to - i_from ;
43153: LD_ADDR_VAR 0 11
43157: PUSH
43158: LD_VAR 0 3
43162: PUSH
43163: LD_VAR 0 2
43167: MINUS
43168: ST_TO_ADDR
// end else
43169: GO 43232
// begin d := - 1 ;
43171: LD_ADDR_VAR 0 9
43175: PUSH
43176: LD_INT 1
43178: NEG
43179: ST_TO_ADDR
// if i_from > i_to then
43180: LD_VAR 0 2
43184: PUSH
43185: LD_VAR 0 3
43189: GREATER
43190: IFFALSE 43210
// length := i_from - i_to else
43192: LD_ADDR_VAR 0 11
43196: PUSH
43197: LD_VAR 0 2
43201: PUSH
43202: LD_VAR 0 3
43206: MINUS
43207: ST_TO_ADDR
43208: GO 43232
// length := ( array - i_to ) + i_from ;
43210: LD_ADDR_VAR 0 11
43214: PUSH
43215: LD_VAR 0 1
43219: PUSH
43220: LD_VAR 0 3
43224: MINUS
43225: PUSH
43226: LD_VAR 0 2
43230: PLUS
43231: ST_TO_ADDR
// end ; if not length then
43232: LD_VAR 0 11
43236: NOT
43237: IFFALSE 43241
// exit ;
43239: GO 43399
// tmp := array ;
43241: LD_ADDR_VAR 0 10
43245: PUSH
43246: LD_VAR 0 1
43250: ST_TO_ADDR
// for i = 1 to length do
43251: LD_ADDR_VAR 0 6
43255: PUSH
43256: DOUBLE
43257: LD_INT 1
43259: DEC
43260: ST_TO_ADDR
43261: LD_VAR 0 11
43265: PUSH
43266: FOR_TO
43267: IFFALSE 43387
// begin for j = 1 to array do
43269: LD_ADDR_VAR 0 7
43273: PUSH
43274: DOUBLE
43275: LD_INT 1
43277: DEC
43278: ST_TO_ADDR
43279: LD_VAR 0 1
43283: PUSH
43284: FOR_TO
43285: IFFALSE 43373
// begin k := j + d ;
43287: LD_ADDR_VAR 0 8
43291: PUSH
43292: LD_VAR 0 7
43296: PUSH
43297: LD_VAR 0 9
43301: PLUS
43302: ST_TO_ADDR
// if k > array then
43303: LD_VAR 0 8
43307: PUSH
43308: LD_VAR 0 1
43312: GREATER
43313: IFFALSE 43323
// k := 1 ;
43315: LD_ADDR_VAR 0 8
43319: PUSH
43320: LD_INT 1
43322: ST_TO_ADDR
// if not k then
43323: LD_VAR 0 8
43327: NOT
43328: IFFALSE 43340
// k := array ;
43330: LD_ADDR_VAR 0 8
43334: PUSH
43335: LD_VAR 0 1
43339: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43340: LD_ADDR_VAR 0 10
43344: PUSH
43345: LD_VAR 0 10
43349: PPUSH
43350: LD_VAR 0 8
43354: PPUSH
43355: LD_VAR 0 1
43359: PUSH
43360: LD_VAR 0 7
43364: ARRAY
43365: PPUSH
43366: CALL_OW 1
43370: ST_TO_ADDR
// end ;
43371: GO 43284
43373: POP
43374: POP
// array := tmp ;
43375: LD_ADDR_VAR 0 1
43379: PUSH
43380: LD_VAR 0 10
43384: ST_TO_ADDR
// end ;
43385: GO 43266
43387: POP
43388: POP
// result := array ;
43389: LD_ADDR_VAR 0 5
43393: PUSH
43394: LD_VAR 0 1
43398: ST_TO_ADDR
// end ;
43399: LD_VAR 0 5
43403: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43404: LD_INT 0
43406: PPUSH
43407: PPUSH
// result := 0 ;
43408: LD_ADDR_VAR 0 3
43412: PUSH
43413: LD_INT 0
43415: ST_TO_ADDR
// if not array or not value in array then
43416: LD_VAR 0 1
43420: NOT
43421: PUSH
43422: LD_VAR 0 2
43426: PUSH
43427: LD_VAR 0 1
43431: IN
43432: NOT
43433: OR
43434: IFFALSE 43438
// exit ;
43436: GO 43492
// for i = 1 to array do
43438: LD_ADDR_VAR 0 4
43442: PUSH
43443: DOUBLE
43444: LD_INT 1
43446: DEC
43447: ST_TO_ADDR
43448: LD_VAR 0 1
43452: PUSH
43453: FOR_TO
43454: IFFALSE 43490
// if value = array [ i ] then
43456: LD_VAR 0 2
43460: PUSH
43461: LD_VAR 0 1
43465: PUSH
43466: LD_VAR 0 4
43470: ARRAY
43471: EQUAL
43472: IFFALSE 43488
// begin result := i ;
43474: LD_ADDR_VAR 0 3
43478: PUSH
43479: LD_VAR 0 4
43483: ST_TO_ADDR
// exit ;
43484: POP
43485: POP
43486: GO 43492
// end ;
43488: GO 43453
43490: POP
43491: POP
// end ;
43492: LD_VAR 0 3
43496: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43497: LD_INT 0
43499: PPUSH
// vc_chassis := chassis ;
43500: LD_ADDR_OWVAR 37
43504: PUSH
43505: LD_VAR 0 1
43509: ST_TO_ADDR
// vc_engine := engine ;
43510: LD_ADDR_OWVAR 39
43514: PUSH
43515: LD_VAR 0 2
43519: ST_TO_ADDR
// vc_control := control ;
43520: LD_ADDR_OWVAR 38
43524: PUSH
43525: LD_VAR 0 3
43529: ST_TO_ADDR
// vc_weapon := weapon ;
43530: LD_ADDR_OWVAR 40
43534: PUSH
43535: LD_VAR 0 4
43539: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43540: LD_ADDR_OWVAR 41
43544: PUSH
43545: LD_VAR 0 5
43549: ST_TO_ADDR
// end ;
43550: LD_VAR 0 6
43554: RET
// export function WantPlant ( unit ) ; var task ; begin
43555: LD_INT 0
43557: PPUSH
43558: PPUSH
// result := false ;
43559: LD_ADDR_VAR 0 2
43563: PUSH
43564: LD_INT 0
43566: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43567: LD_ADDR_VAR 0 3
43571: PUSH
43572: LD_VAR 0 1
43576: PPUSH
43577: CALL_OW 437
43581: ST_TO_ADDR
// if task then
43582: LD_VAR 0 3
43586: IFFALSE 43614
// if task [ 1 ] [ 1 ] = p then
43588: LD_VAR 0 3
43592: PUSH
43593: LD_INT 1
43595: ARRAY
43596: PUSH
43597: LD_INT 1
43599: ARRAY
43600: PUSH
43601: LD_STRING p
43603: EQUAL
43604: IFFALSE 43614
// result := true ;
43606: LD_ADDR_VAR 0 2
43610: PUSH
43611: LD_INT 1
43613: ST_TO_ADDR
// end ;
43614: LD_VAR 0 2
43618: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43619: LD_INT 0
43621: PPUSH
43622: PPUSH
43623: PPUSH
43624: PPUSH
// if pos < 1 then
43625: LD_VAR 0 2
43629: PUSH
43630: LD_INT 1
43632: LESS
43633: IFFALSE 43637
// exit ;
43635: GO 43940
// if pos = 1 then
43637: LD_VAR 0 2
43641: PUSH
43642: LD_INT 1
43644: EQUAL
43645: IFFALSE 43678
// result := Replace ( arr , pos [ 1 ] , value ) else
43647: LD_ADDR_VAR 0 4
43651: PUSH
43652: LD_VAR 0 1
43656: PPUSH
43657: LD_VAR 0 2
43661: PUSH
43662: LD_INT 1
43664: ARRAY
43665: PPUSH
43666: LD_VAR 0 3
43670: PPUSH
43671: CALL_OW 1
43675: ST_TO_ADDR
43676: GO 43940
// begin tmp := arr ;
43678: LD_ADDR_VAR 0 6
43682: PUSH
43683: LD_VAR 0 1
43687: ST_TO_ADDR
// s_arr := [ tmp ] ;
43688: LD_ADDR_VAR 0 7
43692: PUSH
43693: LD_VAR 0 6
43697: PUSH
43698: EMPTY
43699: LIST
43700: ST_TO_ADDR
// for i = 1 to pos - 1 do
43701: LD_ADDR_VAR 0 5
43705: PUSH
43706: DOUBLE
43707: LD_INT 1
43709: DEC
43710: ST_TO_ADDR
43711: LD_VAR 0 2
43715: PUSH
43716: LD_INT 1
43718: MINUS
43719: PUSH
43720: FOR_TO
43721: IFFALSE 43766
// begin tmp := tmp [ pos [ i ] ] ;
43723: LD_ADDR_VAR 0 6
43727: PUSH
43728: LD_VAR 0 6
43732: PUSH
43733: LD_VAR 0 2
43737: PUSH
43738: LD_VAR 0 5
43742: ARRAY
43743: ARRAY
43744: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43745: LD_ADDR_VAR 0 7
43749: PUSH
43750: LD_VAR 0 7
43754: PUSH
43755: LD_VAR 0 6
43759: PUSH
43760: EMPTY
43761: LIST
43762: ADD
43763: ST_TO_ADDR
// end ;
43764: GO 43720
43766: POP
43767: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43768: LD_ADDR_VAR 0 6
43772: PUSH
43773: LD_VAR 0 6
43777: PPUSH
43778: LD_VAR 0 2
43782: PUSH
43783: LD_VAR 0 2
43787: ARRAY
43788: PPUSH
43789: LD_VAR 0 3
43793: PPUSH
43794: CALL_OW 1
43798: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43799: LD_ADDR_VAR 0 7
43803: PUSH
43804: LD_VAR 0 7
43808: PPUSH
43809: LD_VAR 0 7
43813: PPUSH
43814: LD_VAR 0 6
43818: PPUSH
43819: CALL_OW 1
43823: ST_TO_ADDR
// for i = s_arr downto 2 do
43824: LD_ADDR_VAR 0 5
43828: PUSH
43829: DOUBLE
43830: LD_VAR 0 7
43834: INC
43835: ST_TO_ADDR
43836: LD_INT 2
43838: PUSH
43839: FOR_DOWNTO
43840: IFFALSE 43924
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43842: LD_ADDR_VAR 0 6
43846: PUSH
43847: LD_VAR 0 7
43851: PUSH
43852: LD_VAR 0 5
43856: PUSH
43857: LD_INT 1
43859: MINUS
43860: ARRAY
43861: PPUSH
43862: LD_VAR 0 2
43866: PUSH
43867: LD_VAR 0 5
43871: PUSH
43872: LD_INT 1
43874: MINUS
43875: ARRAY
43876: PPUSH
43877: LD_VAR 0 7
43881: PUSH
43882: LD_VAR 0 5
43886: ARRAY
43887: PPUSH
43888: CALL_OW 1
43892: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43893: LD_ADDR_VAR 0 7
43897: PUSH
43898: LD_VAR 0 7
43902: PPUSH
43903: LD_VAR 0 5
43907: PUSH
43908: LD_INT 1
43910: MINUS
43911: PPUSH
43912: LD_VAR 0 6
43916: PPUSH
43917: CALL_OW 1
43921: ST_TO_ADDR
// end ;
43922: GO 43839
43924: POP
43925: POP
// result := s_arr [ 1 ] ;
43926: LD_ADDR_VAR 0 4
43930: PUSH
43931: LD_VAR 0 7
43935: PUSH
43936: LD_INT 1
43938: ARRAY
43939: ST_TO_ADDR
// end ; end ;
43940: LD_VAR 0 4
43944: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43945: LD_INT 0
43947: PPUSH
43948: PPUSH
// if not list then
43949: LD_VAR 0 1
43953: NOT
43954: IFFALSE 43958
// exit ;
43956: GO 44049
// i := list [ pos1 ] ;
43958: LD_ADDR_VAR 0 5
43962: PUSH
43963: LD_VAR 0 1
43967: PUSH
43968: LD_VAR 0 2
43972: ARRAY
43973: ST_TO_ADDR
// if not i then
43974: LD_VAR 0 5
43978: NOT
43979: IFFALSE 43983
// exit ;
43981: GO 44049
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43983: LD_ADDR_VAR 0 1
43987: PUSH
43988: LD_VAR 0 1
43992: PPUSH
43993: LD_VAR 0 2
43997: PPUSH
43998: LD_VAR 0 1
44002: PUSH
44003: LD_VAR 0 3
44007: ARRAY
44008: PPUSH
44009: CALL_OW 1
44013: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44014: LD_ADDR_VAR 0 1
44018: PUSH
44019: LD_VAR 0 1
44023: PPUSH
44024: LD_VAR 0 3
44028: PPUSH
44029: LD_VAR 0 5
44033: PPUSH
44034: CALL_OW 1
44038: ST_TO_ADDR
// result := list ;
44039: LD_ADDR_VAR 0 4
44043: PUSH
44044: LD_VAR 0 1
44048: ST_TO_ADDR
// end ;
44049: LD_VAR 0 4
44053: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44054: LD_INT 0
44056: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44057: LD_ADDR_VAR 0 5
44061: PUSH
44062: LD_VAR 0 1
44066: PPUSH
44067: CALL_OW 250
44071: PPUSH
44072: LD_VAR 0 1
44076: PPUSH
44077: CALL_OW 251
44081: PPUSH
44082: LD_VAR 0 2
44086: PPUSH
44087: LD_VAR 0 3
44091: PPUSH
44092: LD_VAR 0 4
44096: PPUSH
44097: CALL 44475 0 5
44101: ST_TO_ADDR
// end ;
44102: LD_VAR 0 5
44106: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
44107: LD_INT 0
44109: PPUSH
44110: PPUSH
44111: PPUSH
44112: PPUSH
// if not list or not unit then
44113: LD_VAR 0 2
44117: NOT
44118: PUSH
44119: LD_VAR 0 1
44123: NOT
44124: OR
44125: IFFALSE 44129
// exit ;
44127: GO 44470
// result := [ ] ;
44129: LD_ADDR_VAR 0 5
44133: PUSH
44134: EMPTY
44135: ST_TO_ADDR
// for i in list do
44136: LD_ADDR_VAR 0 6
44140: PUSH
44141: LD_VAR 0 2
44145: PUSH
44146: FOR_IN
44147: IFFALSE 44365
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44149: LD_ADDR_VAR 0 8
44153: PUSH
44154: LD_VAR 0 1
44158: PPUSH
44159: LD_VAR 0 6
44163: PUSH
44164: LD_INT 1
44166: ARRAY
44167: PPUSH
44168: LD_VAR 0 6
44172: PUSH
44173: LD_INT 2
44175: ARRAY
44176: PPUSH
44177: CALL_OW 297
44181: ST_TO_ADDR
// if not Count ( result ) then
44182: LD_VAR 0 5
44186: PPUSH
44187: CALL 40759 0 1
44191: NOT
44192: IFFALSE 44225
// begin result := Join ( result , [ i , tmp ] ) ;
44194: LD_ADDR_VAR 0 5
44198: PUSH
44199: LD_VAR 0 5
44203: PPUSH
44204: LD_VAR 0 6
44208: PUSH
44209: LD_VAR 0 8
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PPUSH
44218: CALL 76348 0 2
44222: ST_TO_ADDR
// continue ;
44223: GO 44146
// end ; if result [ result ] [ 2 ] <= tmp then
44225: LD_VAR 0 5
44229: PUSH
44230: LD_VAR 0 5
44234: ARRAY
44235: PUSH
44236: LD_INT 2
44238: ARRAY
44239: PUSH
44240: LD_VAR 0 8
44244: LESSEQUAL
44245: IFFALSE 44278
// result := Join ( result , [ i , tmp ] ) else
44247: LD_ADDR_VAR 0 5
44251: PUSH
44252: LD_VAR 0 5
44256: PPUSH
44257: LD_VAR 0 6
44261: PUSH
44262: LD_VAR 0 8
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PPUSH
44271: CALL 76348 0 2
44275: ST_TO_ADDR
44276: GO 44363
// begin for j := 1 to Count ( result ) do
44278: LD_ADDR_VAR 0 7
44282: PUSH
44283: DOUBLE
44284: LD_INT 1
44286: DEC
44287: ST_TO_ADDR
44288: LD_VAR 0 5
44292: PPUSH
44293: CALL 40759 0 1
44297: PUSH
44298: FOR_TO
44299: IFFALSE 44361
// begin if tmp < result [ j ] [ 2 ] then
44301: LD_VAR 0 8
44305: PUSH
44306: LD_VAR 0 5
44310: PUSH
44311: LD_VAR 0 7
44315: ARRAY
44316: PUSH
44317: LD_INT 2
44319: ARRAY
44320: LESS
44321: IFFALSE 44359
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44323: LD_ADDR_VAR 0 5
44327: PUSH
44328: LD_VAR 0 5
44332: PPUSH
44333: LD_VAR 0 7
44337: PPUSH
44338: LD_VAR 0 6
44342: PUSH
44343: LD_VAR 0 8
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PPUSH
44352: CALL_OW 2
44356: ST_TO_ADDR
// break ;
44357: GO 44361
// end ; end ;
44359: GO 44298
44361: POP
44362: POP
// end ; end ;
44363: GO 44146
44365: POP
44366: POP
// if result and not asc then
44367: LD_VAR 0 5
44371: PUSH
44372: LD_VAR 0 3
44376: NOT
44377: AND
44378: IFFALSE 44395
// result := ReverseArray ( result ) ;
44380: LD_ADDR_VAR 0 5
44384: PUSH
44385: LD_VAR 0 5
44389: PPUSH
44390: CALL 71635 0 1
44394: ST_TO_ADDR
// tmp := [ ] ;
44395: LD_ADDR_VAR 0 8
44399: PUSH
44400: EMPTY
44401: ST_TO_ADDR
// if mode then
44402: LD_VAR 0 4
44406: IFFALSE 44470
// begin for i := 1 to result do
44408: LD_ADDR_VAR 0 6
44412: PUSH
44413: DOUBLE
44414: LD_INT 1
44416: DEC
44417: ST_TO_ADDR
44418: LD_VAR 0 5
44422: PUSH
44423: FOR_TO
44424: IFFALSE 44458
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
44426: LD_ADDR_VAR 0 8
44430: PUSH
44431: LD_VAR 0 8
44435: PPUSH
44436: LD_VAR 0 5
44440: PUSH
44441: LD_VAR 0 6
44445: ARRAY
44446: PUSH
44447: LD_INT 1
44449: ARRAY
44450: PPUSH
44451: CALL 76348 0 2
44455: ST_TO_ADDR
44456: GO 44423
44458: POP
44459: POP
// result := tmp ;
44460: LD_ADDR_VAR 0 5
44464: PUSH
44465: LD_VAR 0 8
44469: ST_TO_ADDR
// end ; end ;
44470: LD_VAR 0 5
44474: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44475: LD_INT 0
44477: PPUSH
44478: PPUSH
44479: PPUSH
44480: PPUSH
// if not list then
44481: LD_VAR 0 3
44485: NOT
44486: IFFALSE 44490
// exit ;
44488: GO 44878
// result := [ ] ;
44490: LD_ADDR_VAR 0 6
44494: PUSH
44495: EMPTY
44496: ST_TO_ADDR
// for i in list do
44497: LD_ADDR_VAR 0 7
44501: PUSH
44502: LD_VAR 0 3
44506: PUSH
44507: FOR_IN
44508: IFFALSE 44710
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44510: LD_ADDR_VAR 0 9
44514: PUSH
44515: LD_VAR 0 7
44519: PPUSH
44520: LD_VAR 0 1
44524: PPUSH
44525: LD_VAR 0 2
44529: PPUSH
44530: CALL_OW 297
44534: ST_TO_ADDR
// if not result then
44535: LD_VAR 0 6
44539: NOT
44540: IFFALSE 44566
// result := [ [ i , tmp ] ] else
44542: LD_ADDR_VAR 0 6
44546: PUSH
44547: LD_VAR 0 7
44551: PUSH
44552: LD_VAR 0 9
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: EMPTY
44562: LIST
44563: ST_TO_ADDR
44564: GO 44708
// begin if result [ result ] [ 2 ] < tmp then
44566: LD_VAR 0 6
44570: PUSH
44571: LD_VAR 0 6
44575: ARRAY
44576: PUSH
44577: LD_INT 2
44579: ARRAY
44580: PUSH
44581: LD_VAR 0 9
44585: LESS
44586: IFFALSE 44628
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44588: LD_ADDR_VAR 0 6
44592: PUSH
44593: LD_VAR 0 6
44597: PPUSH
44598: LD_VAR 0 6
44602: PUSH
44603: LD_INT 1
44605: PLUS
44606: PPUSH
44607: LD_VAR 0 7
44611: PUSH
44612: LD_VAR 0 9
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PPUSH
44621: CALL_OW 2
44625: ST_TO_ADDR
44626: GO 44708
// for j = 1 to result do
44628: LD_ADDR_VAR 0 8
44632: PUSH
44633: DOUBLE
44634: LD_INT 1
44636: DEC
44637: ST_TO_ADDR
44638: LD_VAR 0 6
44642: PUSH
44643: FOR_TO
44644: IFFALSE 44706
// begin if tmp < result [ j ] [ 2 ] then
44646: LD_VAR 0 9
44650: PUSH
44651: LD_VAR 0 6
44655: PUSH
44656: LD_VAR 0 8
44660: ARRAY
44661: PUSH
44662: LD_INT 2
44664: ARRAY
44665: LESS
44666: IFFALSE 44704
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44668: LD_ADDR_VAR 0 6
44672: PUSH
44673: LD_VAR 0 6
44677: PPUSH
44678: LD_VAR 0 8
44682: PPUSH
44683: LD_VAR 0 7
44687: PUSH
44688: LD_VAR 0 9
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PPUSH
44697: CALL_OW 2
44701: ST_TO_ADDR
// break ;
44702: GO 44706
// end ; end ;
44704: GO 44643
44706: POP
44707: POP
// end ; end ;
44708: GO 44507
44710: POP
44711: POP
// if result and not asc then
44712: LD_VAR 0 6
44716: PUSH
44717: LD_VAR 0 4
44721: NOT
44722: AND
44723: IFFALSE 44798
// begin tmp := result ;
44725: LD_ADDR_VAR 0 9
44729: PUSH
44730: LD_VAR 0 6
44734: ST_TO_ADDR
// for i = tmp downto 1 do
44735: LD_ADDR_VAR 0 7
44739: PUSH
44740: DOUBLE
44741: LD_VAR 0 9
44745: INC
44746: ST_TO_ADDR
44747: LD_INT 1
44749: PUSH
44750: FOR_DOWNTO
44751: IFFALSE 44796
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44753: LD_ADDR_VAR 0 6
44757: PUSH
44758: LD_VAR 0 6
44762: PPUSH
44763: LD_VAR 0 9
44767: PUSH
44768: LD_VAR 0 7
44772: MINUS
44773: PUSH
44774: LD_INT 1
44776: PLUS
44777: PPUSH
44778: LD_VAR 0 9
44782: PUSH
44783: LD_VAR 0 7
44787: ARRAY
44788: PPUSH
44789: CALL_OW 1
44793: ST_TO_ADDR
44794: GO 44750
44796: POP
44797: POP
// end ; tmp := [ ] ;
44798: LD_ADDR_VAR 0 9
44802: PUSH
44803: EMPTY
44804: ST_TO_ADDR
// if mode then
44805: LD_VAR 0 5
44809: IFFALSE 44878
// begin for i = 1 to result do
44811: LD_ADDR_VAR 0 7
44815: PUSH
44816: DOUBLE
44817: LD_INT 1
44819: DEC
44820: ST_TO_ADDR
44821: LD_VAR 0 6
44825: PUSH
44826: FOR_TO
44827: IFFALSE 44866
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44829: LD_ADDR_VAR 0 9
44833: PUSH
44834: LD_VAR 0 9
44838: PPUSH
44839: LD_VAR 0 7
44843: PPUSH
44844: LD_VAR 0 6
44848: PUSH
44849: LD_VAR 0 7
44853: ARRAY
44854: PUSH
44855: LD_INT 1
44857: ARRAY
44858: PPUSH
44859: CALL_OW 1
44863: ST_TO_ADDR
44864: GO 44826
44866: POP
44867: POP
// result := tmp ;
44868: LD_ADDR_VAR 0 6
44872: PUSH
44873: LD_VAR 0 9
44877: ST_TO_ADDR
// end ; end ;
44878: LD_VAR 0 6
44882: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44883: LD_INT 0
44885: PPUSH
44886: PPUSH
44887: PPUSH
44888: PPUSH
44889: PPUSH
44890: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44891: LD_ADDR_VAR 0 5
44895: PUSH
44896: LD_INT 0
44898: PUSH
44899: LD_INT 0
44901: PUSH
44902: LD_INT 0
44904: PUSH
44905: EMPTY
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: ST_TO_ADDR
// if not x or not y then
44913: LD_VAR 0 2
44917: NOT
44918: PUSH
44919: LD_VAR 0 3
44923: NOT
44924: OR
44925: IFFALSE 44929
// exit ;
44927: GO 46579
// if not range then
44929: LD_VAR 0 4
44933: NOT
44934: IFFALSE 44944
// range := 10 ;
44936: LD_ADDR_VAR 0 4
44940: PUSH
44941: LD_INT 10
44943: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44944: LD_ADDR_VAR 0 8
44948: PUSH
44949: LD_INT 81
44951: PUSH
44952: LD_VAR 0 1
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 92
44963: PUSH
44964: LD_VAR 0 2
44968: PUSH
44969: LD_VAR 0 3
44973: PUSH
44974: LD_VAR 0 4
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 3
44987: PUSH
44988: LD_INT 21
44990: PUSH
44991: LD_INT 3
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: LIST
45006: PPUSH
45007: CALL_OW 69
45011: ST_TO_ADDR
// if not tmp then
45012: LD_VAR 0 8
45016: NOT
45017: IFFALSE 45021
// exit ;
45019: GO 46579
// for i in tmp do
45021: LD_ADDR_VAR 0 6
45025: PUSH
45026: LD_VAR 0 8
45030: PUSH
45031: FOR_IN
45032: IFFALSE 46554
// begin points := [ 0 , 0 , 0 ] ;
45034: LD_ADDR_VAR 0 9
45038: PUSH
45039: LD_INT 0
45041: PUSH
45042: LD_INT 0
45044: PUSH
45045: LD_INT 0
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: LIST
45052: ST_TO_ADDR
// bpoints := 1 ;
45053: LD_ADDR_VAR 0 10
45057: PUSH
45058: LD_INT 1
45060: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45061: LD_VAR 0 6
45065: PPUSH
45066: CALL_OW 247
45070: PUSH
45071: LD_INT 1
45073: DOUBLE
45074: EQUAL
45075: IFTRUE 45079
45077: GO 45657
45079: POP
// begin if GetClass ( i ) = 1 then
45080: LD_VAR 0 6
45084: PPUSH
45085: CALL_OW 257
45089: PUSH
45090: LD_INT 1
45092: EQUAL
45093: IFFALSE 45114
// points := [ 10 , 5 , 3 ] ;
45095: LD_ADDR_VAR 0 9
45099: PUSH
45100: LD_INT 10
45102: PUSH
45103: LD_INT 5
45105: PUSH
45106: LD_INT 3
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: LIST
45113: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45114: LD_VAR 0 6
45118: PPUSH
45119: CALL_OW 257
45123: PUSH
45124: LD_INT 2
45126: PUSH
45127: LD_INT 3
45129: PUSH
45130: LD_INT 4
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: LIST
45137: IN
45138: IFFALSE 45159
// points := [ 3 , 2 , 1 ] ;
45140: LD_ADDR_VAR 0 9
45144: PUSH
45145: LD_INT 3
45147: PUSH
45148: LD_INT 2
45150: PUSH
45151: LD_INT 1
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: LIST
45158: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45159: LD_VAR 0 6
45163: PPUSH
45164: CALL_OW 257
45168: PUSH
45169: LD_INT 5
45171: EQUAL
45172: IFFALSE 45193
// points := [ 130 , 5 , 2 ] ;
45174: LD_ADDR_VAR 0 9
45178: PUSH
45179: LD_INT 130
45181: PUSH
45182: LD_INT 5
45184: PUSH
45185: LD_INT 2
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: LIST
45192: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45193: LD_VAR 0 6
45197: PPUSH
45198: CALL_OW 257
45202: PUSH
45203: LD_INT 8
45205: EQUAL
45206: IFFALSE 45227
// points := [ 35 , 35 , 30 ] ;
45208: LD_ADDR_VAR 0 9
45212: PUSH
45213: LD_INT 35
45215: PUSH
45216: LD_INT 35
45218: PUSH
45219: LD_INT 30
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: LIST
45226: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45227: LD_VAR 0 6
45231: PPUSH
45232: CALL_OW 257
45236: PUSH
45237: LD_INT 9
45239: EQUAL
45240: IFFALSE 45261
// points := [ 20 , 55 , 40 ] ;
45242: LD_ADDR_VAR 0 9
45246: PUSH
45247: LD_INT 20
45249: PUSH
45250: LD_INT 55
45252: PUSH
45253: LD_INT 40
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: LIST
45260: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45261: LD_VAR 0 6
45265: PPUSH
45266: CALL_OW 257
45270: PUSH
45271: LD_INT 12
45273: PUSH
45274: LD_INT 16
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: IN
45281: IFFALSE 45302
// points := [ 5 , 3 , 2 ] ;
45283: LD_ADDR_VAR 0 9
45287: PUSH
45288: LD_INT 5
45290: PUSH
45291: LD_INT 3
45293: PUSH
45294: LD_INT 2
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: LIST
45301: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45302: LD_VAR 0 6
45306: PPUSH
45307: CALL_OW 257
45311: PUSH
45312: LD_INT 17
45314: EQUAL
45315: IFFALSE 45336
// points := [ 100 , 50 , 75 ] ;
45317: LD_ADDR_VAR 0 9
45321: PUSH
45322: LD_INT 100
45324: PUSH
45325: LD_INT 50
45327: PUSH
45328: LD_INT 75
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: LIST
45335: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45336: LD_VAR 0 6
45340: PPUSH
45341: CALL_OW 257
45345: PUSH
45346: LD_INT 15
45348: EQUAL
45349: IFFALSE 45370
// points := [ 10 , 5 , 3 ] ;
45351: LD_ADDR_VAR 0 9
45355: PUSH
45356: LD_INT 10
45358: PUSH
45359: LD_INT 5
45361: PUSH
45362: LD_INT 3
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: LIST
45369: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45370: LD_VAR 0 6
45374: PPUSH
45375: CALL_OW 257
45379: PUSH
45380: LD_INT 14
45382: EQUAL
45383: IFFALSE 45404
// points := [ 10 , 0 , 0 ] ;
45385: LD_ADDR_VAR 0 9
45389: PUSH
45390: LD_INT 10
45392: PUSH
45393: LD_INT 0
45395: PUSH
45396: LD_INT 0
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: LIST
45403: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45404: LD_VAR 0 6
45408: PPUSH
45409: CALL_OW 257
45413: PUSH
45414: LD_INT 11
45416: EQUAL
45417: IFFALSE 45438
// points := [ 30 , 10 , 5 ] ;
45419: LD_ADDR_VAR 0 9
45423: PUSH
45424: LD_INT 30
45426: PUSH
45427: LD_INT 10
45429: PUSH
45430: LD_INT 5
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: LIST
45437: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45438: LD_VAR 0 1
45442: PPUSH
45443: LD_INT 5
45445: PPUSH
45446: CALL_OW 321
45450: PUSH
45451: LD_INT 2
45453: EQUAL
45454: IFFALSE 45471
// bpoints := bpoints * 1.8 ;
45456: LD_ADDR_VAR 0 10
45460: PUSH
45461: LD_VAR 0 10
45465: PUSH
45466: LD_REAL  1.80000000000000E+0000
45469: MUL
45470: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45471: LD_VAR 0 6
45475: PPUSH
45476: CALL_OW 257
45480: PUSH
45481: LD_INT 1
45483: PUSH
45484: LD_INT 2
45486: PUSH
45487: LD_INT 3
45489: PUSH
45490: LD_INT 4
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: IN
45499: PUSH
45500: LD_VAR 0 1
45504: PPUSH
45505: LD_INT 51
45507: PPUSH
45508: CALL_OW 321
45512: PUSH
45513: LD_INT 2
45515: EQUAL
45516: AND
45517: IFFALSE 45534
// bpoints := bpoints * 1.2 ;
45519: LD_ADDR_VAR 0 10
45523: PUSH
45524: LD_VAR 0 10
45528: PUSH
45529: LD_REAL  1.20000000000000E+0000
45532: MUL
45533: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45534: LD_VAR 0 6
45538: PPUSH
45539: CALL_OW 257
45543: PUSH
45544: LD_INT 5
45546: PUSH
45547: LD_INT 7
45549: PUSH
45550: LD_INT 9
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: LIST
45557: IN
45558: PUSH
45559: LD_VAR 0 1
45563: PPUSH
45564: LD_INT 52
45566: PPUSH
45567: CALL_OW 321
45571: PUSH
45572: LD_INT 2
45574: EQUAL
45575: AND
45576: IFFALSE 45593
// bpoints := bpoints * 1.5 ;
45578: LD_ADDR_VAR 0 10
45582: PUSH
45583: LD_VAR 0 10
45587: PUSH
45588: LD_REAL  1.50000000000000E+0000
45591: MUL
45592: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45593: LD_VAR 0 1
45597: PPUSH
45598: LD_INT 66
45600: PPUSH
45601: CALL_OW 321
45605: PUSH
45606: LD_INT 2
45608: EQUAL
45609: IFFALSE 45626
// bpoints := bpoints * 1.1 ;
45611: LD_ADDR_VAR 0 10
45615: PUSH
45616: LD_VAR 0 10
45620: PUSH
45621: LD_REAL  1.10000000000000E+0000
45624: MUL
45625: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45626: LD_ADDR_VAR 0 10
45630: PUSH
45631: LD_VAR 0 10
45635: PUSH
45636: LD_VAR 0 6
45640: PPUSH
45641: LD_INT 1
45643: PPUSH
45644: CALL_OW 259
45648: PUSH
45649: LD_REAL  1.15000000000000E+0000
45652: MUL
45653: MUL
45654: ST_TO_ADDR
// end ; unit_vehicle :
45655: GO 46483
45657: LD_INT 2
45659: DOUBLE
45660: EQUAL
45661: IFTRUE 45665
45663: GO 46471
45665: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45666: LD_VAR 0 6
45670: PPUSH
45671: CALL_OW 264
45675: PUSH
45676: LD_INT 2
45678: PUSH
45679: LD_INT 42
45681: PUSH
45682: LD_INT 24
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: LIST
45689: IN
45690: IFFALSE 45711
// points := [ 25 , 5 , 3 ] ;
45692: LD_ADDR_VAR 0 9
45696: PUSH
45697: LD_INT 25
45699: PUSH
45700: LD_INT 5
45702: PUSH
45703: LD_INT 3
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: LIST
45710: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45711: LD_VAR 0 6
45715: PPUSH
45716: CALL_OW 264
45720: PUSH
45721: LD_INT 4
45723: PUSH
45724: LD_INT 43
45726: PUSH
45727: LD_INT 25
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: LIST
45734: IN
45735: IFFALSE 45756
// points := [ 40 , 15 , 5 ] ;
45737: LD_ADDR_VAR 0 9
45741: PUSH
45742: LD_INT 40
45744: PUSH
45745: LD_INT 15
45747: PUSH
45748: LD_INT 5
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: LIST
45755: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45756: LD_VAR 0 6
45760: PPUSH
45761: CALL_OW 264
45765: PUSH
45766: LD_INT 3
45768: PUSH
45769: LD_INT 23
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: IN
45776: IFFALSE 45797
// points := [ 7 , 25 , 8 ] ;
45778: LD_ADDR_VAR 0 9
45782: PUSH
45783: LD_INT 7
45785: PUSH
45786: LD_INT 25
45788: PUSH
45789: LD_INT 8
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: LIST
45796: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45797: LD_VAR 0 6
45801: PPUSH
45802: CALL_OW 264
45806: PUSH
45807: LD_INT 5
45809: PUSH
45810: LD_INT 27
45812: PUSH
45813: LD_INT 44
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: LIST
45820: IN
45821: IFFALSE 45842
// points := [ 14 , 50 , 16 ] ;
45823: LD_ADDR_VAR 0 9
45827: PUSH
45828: LD_INT 14
45830: PUSH
45831: LD_INT 50
45833: PUSH
45834: LD_INT 16
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: LIST
45841: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45842: LD_VAR 0 6
45846: PPUSH
45847: CALL_OW 264
45851: PUSH
45852: LD_INT 6
45854: PUSH
45855: LD_INT 46
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: IN
45862: IFFALSE 45883
// points := [ 32 , 120 , 70 ] ;
45864: LD_ADDR_VAR 0 9
45868: PUSH
45869: LD_INT 32
45871: PUSH
45872: LD_INT 120
45874: PUSH
45875: LD_INT 70
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: LIST
45882: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45883: LD_VAR 0 6
45887: PPUSH
45888: CALL_OW 264
45892: PUSH
45893: LD_INT 7
45895: PUSH
45896: LD_INT 28
45898: PUSH
45899: LD_INT 45
45901: PUSH
45902: LD_INT 92
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: IN
45911: IFFALSE 45932
// points := [ 35 , 20 , 45 ] ;
45913: LD_ADDR_VAR 0 9
45917: PUSH
45918: LD_INT 35
45920: PUSH
45921: LD_INT 20
45923: PUSH
45924: LD_INT 45
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: LIST
45931: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45932: LD_VAR 0 6
45936: PPUSH
45937: CALL_OW 264
45941: PUSH
45942: LD_INT 47
45944: PUSH
45945: EMPTY
45946: LIST
45947: IN
45948: IFFALSE 45969
// points := [ 67 , 45 , 75 ] ;
45950: LD_ADDR_VAR 0 9
45954: PUSH
45955: LD_INT 67
45957: PUSH
45958: LD_INT 45
45960: PUSH
45961: LD_INT 75
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: LIST
45968: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45969: LD_VAR 0 6
45973: PPUSH
45974: CALL_OW 264
45978: PUSH
45979: LD_INT 26
45981: PUSH
45982: EMPTY
45983: LIST
45984: IN
45985: IFFALSE 46006
// points := [ 120 , 30 , 80 ] ;
45987: LD_ADDR_VAR 0 9
45991: PUSH
45992: LD_INT 120
45994: PUSH
45995: LD_INT 30
45997: PUSH
45998: LD_INT 80
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: LIST
46005: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46006: LD_VAR 0 6
46010: PPUSH
46011: CALL_OW 264
46015: PUSH
46016: LD_INT 22
46018: PUSH
46019: EMPTY
46020: LIST
46021: IN
46022: IFFALSE 46043
// points := [ 40 , 1 , 1 ] ;
46024: LD_ADDR_VAR 0 9
46028: PUSH
46029: LD_INT 40
46031: PUSH
46032: LD_INT 1
46034: PUSH
46035: LD_INT 1
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: LIST
46042: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46043: LD_VAR 0 6
46047: PPUSH
46048: CALL_OW 264
46052: PUSH
46053: LD_INT 29
46055: PUSH
46056: EMPTY
46057: LIST
46058: IN
46059: IFFALSE 46080
// points := [ 70 , 200 , 400 ] ;
46061: LD_ADDR_VAR 0 9
46065: PUSH
46066: LD_INT 70
46068: PUSH
46069: LD_INT 200
46071: PUSH
46072: LD_INT 400
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: LIST
46079: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46080: LD_VAR 0 6
46084: PPUSH
46085: CALL_OW 264
46089: PUSH
46090: LD_INT 14
46092: PUSH
46093: LD_INT 53
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: IN
46100: IFFALSE 46121
// points := [ 40 , 10 , 20 ] ;
46102: LD_ADDR_VAR 0 9
46106: PUSH
46107: LD_INT 40
46109: PUSH
46110: LD_INT 10
46112: PUSH
46113: LD_INT 20
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: LIST
46120: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46121: LD_VAR 0 6
46125: PPUSH
46126: CALL_OW 264
46130: PUSH
46131: LD_INT 9
46133: PUSH
46134: EMPTY
46135: LIST
46136: IN
46137: IFFALSE 46158
// points := [ 5 , 70 , 20 ] ;
46139: LD_ADDR_VAR 0 9
46143: PUSH
46144: LD_INT 5
46146: PUSH
46147: LD_INT 70
46149: PUSH
46150: LD_INT 20
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: LIST
46157: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46158: LD_VAR 0 6
46162: PPUSH
46163: CALL_OW 264
46167: PUSH
46168: LD_INT 10
46170: PUSH
46171: EMPTY
46172: LIST
46173: IN
46174: IFFALSE 46195
// points := [ 35 , 110 , 70 ] ;
46176: LD_ADDR_VAR 0 9
46180: PUSH
46181: LD_INT 35
46183: PUSH
46184: LD_INT 110
46186: PUSH
46187: LD_INT 70
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: LIST
46194: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46195: LD_VAR 0 6
46199: PPUSH
46200: CALL_OW 265
46204: PUSH
46205: LD_INT 25
46207: EQUAL
46208: IFFALSE 46229
// points := [ 80 , 65 , 100 ] ;
46210: LD_ADDR_VAR 0 9
46214: PUSH
46215: LD_INT 80
46217: PUSH
46218: LD_INT 65
46220: PUSH
46221: LD_INT 100
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: LIST
46228: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46229: LD_VAR 0 6
46233: PPUSH
46234: CALL_OW 263
46238: PUSH
46239: LD_INT 1
46241: EQUAL
46242: IFFALSE 46277
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46244: LD_ADDR_VAR 0 10
46248: PUSH
46249: LD_VAR 0 10
46253: PUSH
46254: LD_VAR 0 6
46258: PPUSH
46259: CALL_OW 311
46263: PPUSH
46264: LD_INT 3
46266: PPUSH
46267: CALL_OW 259
46271: PUSH
46272: LD_INT 4
46274: MUL
46275: MUL
46276: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46277: LD_VAR 0 6
46281: PPUSH
46282: CALL_OW 263
46286: PUSH
46287: LD_INT 2
46289: EQUAL
46290: IFFALSE 46341
// begin j := IsControledBy ( i ) ;
46292: LD_ADDR_VAR 0 7
46296: PUSH
46297: LD_VAR 0 6
46301: PPUSH
46302: CALL_OW 312
46306: ST_TO_ADDR
// if j then
46307: LD_VAR 0 7
46311: IFFALSE 46341
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46313: LD_ADDR_VAR 0 10
46317: PUSH
46318: LD_VAR 0 10
46322: PUSH
46323: LD_VAR 0 7
46327: PPUSH
46328: LD_INT 3
46330: PPUSH
46331: CALL_OW 259
46335: PUSH
46336: LD_INT 3
46338: MUL
46339: MUL
46340: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46341: LD_VAR 0 6
46345: PPUSH
46346: CALL_OW 264
46350: PUSH
46351: LD_INT 5
46353: PUSH
46354: LD_INT 6
46356: PUSH
46357: LD_INT 46
46359: PUSH
46360: LD_INT 44
46362: PUSH
46363: LD_INT 47
46365: PUSH
46366: LD_INT 45
46368: PUSH
46369: LD_INT 28
46371: PUSH
46372: LD_INT 7
46374: PUSH
46375: LD_INT 27
46377: PUSH
46378: LD_INT 29
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: IN
46393: PUSH
46394: LD_VAR 0 1
46398: PPUSH
46399: LD_INT 52
46401: PPUSH
46402: CALL_OW 321
46406: PUSH
46407: LD_INT 2
46409: EQUAL
46410: AND
46411: IFFALSE 46428
// bpoints := bpoints * 1.2 ;
46413: LD_ADDR_VAR 0 10
46417: PUSH
46418: LD_VAR 0 10
46422: PUSH
46423: LD_REAL  1.20000000000000E+0000
46426: MUL
46427: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46428: LD_VAR 0 6
46432: PPUSH
46433: CALL_OW 264
46437: PUSH
46438: LD_INT 6
46440: PUSH
46441: LD_INT 46
46443: PUSH
46444: LD_INT 47
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: LIST
46451: IN
46452: IFFALSE 46469
// bpoints := bpoints * 1.2 ;
46454: LD_ADDR_VAR 0 10
46458: PUSH
46459: LD_VAR 0 10
46463: PUSH
46464: LD_REAL  1.20000000000000E+0000
46467: MUL
46468: ST_TO_ADDR
// end ; unit_building :
46469: GO 46483
46471: LD_INT 3
46473: DOUBLE
46474: EQUAL
46475: IFTRUE 46479
46477: GO 46482
46479: POP
// ; end ;
46480: GO 46483
46482: POP
// for j = 1 to 3 do
46483: LD_ADDR_VAR 0 7
46487: PUSH
46488: DOUBLE
46489: LD_INT 1
46491: DEC
46492: ST_TO_ADDR
46493: LD_INT 3
46495: PUSH
46496: FOR_TO
46497: IFFALSE 46550
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46499: LD_ADDR_VAR 0 5
46503: PUSH
46504: LD_VAR 0 5
46508: PPUSH
46509: LD_VAR 0 7
46513: PPUSH
46514: LD_VAR 0 5
46518: PUSH
46519: LD_VAR 0 7
46523: ARRAY
46524: PUSH
46525: LD_VAR 0 9
46529: PUSH
46530: LD_VAR 0 7
46534: ARRAY
46535: PUSH
46536: LD_VAR 0 10
46540: MUL
46541: PLUS
46542: PPUSH
46543: CALL_OW 1
46547: ST_TO_ADDR
46548: GO 46496
46550: POP
46551: POP
// end ;
46552: GO 45031
46554: POP
46555: POP
// result := Replace ( result , 4 , tmp ) ;
46556: LD_ADDR_VAR 0 5
46560: PUSH
46561: LD_VAR 0 5
46565: PPUSH
46566: LD_INT 4
46568: PPUSH
46569: LD_VAR 0 8
46573: PPUSH
46574: CALL_OW 1
46578: ST_TO_ADDR
// end ;
46579: LD_VAR 0 5
46583: RET
// export function DangerAtRange ( unit , range ) ; begin
46584: LD_INT 0
46586: PPUSH
// if not unit then
46587: LD_VAR 0 1
46591: NOT
46592: IFFALSE 46596
// exit ;
46594: GO 46641
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46596: LD_ADDR_VAR 0 3
46600: PUSH
46601: LD_VAR 0 1
46605: PPUSH
46606: CALL_OW 255
46610: PPUSH
46611: LD_VAR 0 1
46615: PPUSH
46616: CALL_OW 250
46620: PPUSH
46621: LD_VAR 0 1
46625: PPUSH
46626: CALL_OW 251
46630: PPUSH
46631: LD_VAR 0 2
46635: PPUSH
46636: CALL 44883 0 4
46640: ST_TO_ADDR
// end ;
46641: LD_VAR 0 3
46645: RET
// export function DangerInArea ( side , area ) ; begin
46646: LD_INT 0
46648: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46649: LD_ADDR_VAR 0 3
46653: PUSH
46654: LD_VAR 0 2
46658: PPUSH
46659: LD_INT 81
46661: PUSH
46662: LD_VAR 0 1
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PPUSH
46671: CALL_OW 70
46675: ST_TO_ADDR
// end ;
46676: LD_VAR 0 3
46680: RET
// export function IsExtension ( b ) ; begin
46681: LD_INT 0
46683: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46684: LD_ADDR_VAR 0 2
46688: PUSH
46689: LD_VAR 0 1
46693: PUSH
46694: LD_INT 23
46696: PUSH
46697: LD_INT 20
46699: PUSH
46700: LD_INT 22
46702: PUSH
46703: LD_INT 17
46705: PUSH
46706: LD_INT 24
46708: PUSH
46709: LD_INT 21
46711: PUSH
46712: LD_INT 19
46714: PUSH
46715: LD_INT 16
46717: PUSH
46718: LD_INT 25
46720: PUSH
46721: LD_INT 18
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: IN
46736: ST_TO_ADDR
// end ;
46737: LD_VAR 0 2
46741: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46742: LD_INT 0
46744: PPUSH
46745: PPUSH
46746: PPUSH
// result := [ ] ;
46747: LD_ADDR_VAR 0 4
46751: PUSH
46752: EMPTY
46753: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46754: LD_ADDR_VAR 0 5
46758: PUSH
46759: LD_VAR 0 2
46763: PPUSH
46764: LD_INT 21
46766: PUSH
46767: LD_INT 3
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PPUSH
46774: CALL_OW 70
46778: ST_TO_ADDR
// if not tmp then
46779: LD_VAR 0 5
46783: NOT
46784: IFFALSE 46788
// exit ;
46786: GO 46852
// if checkLink then
46788: LD_VAR 0 3
46792: IFFALSE 46842
// begin for i in tmp do
46794: LD_ADDR_VAR 0 6
46798: PUSH
46799: LD_VAR 0 5
46803: PUSH
46804: FOR_IN
46805: IFFALSE 46840
// if GetBase ( i ) <> base then
46807: LD_VAR 0 6
46811: PPUSH
46812: CALL_OW 274
46816: PUSH
46817: LD_VAR 0 1
46821: NONEQUAL
46822: IFFALSE 46838
// ComLinkToBase ( base , i ) ;
46824: LD_VAR 0 1
46828: PPUSH
46829: LD_VAR 0 6
46833: PPUSH
46834: CALL_OW 169
46838: GO 46804
46840: POP
46841: POP
// end ; result := tmp ;
46842: LD_ADDR_VAR 0 4
46846: PUSH
46847: LD_VAR 0 5
46851: ST_TO_ADDR
// end ;
46852: LD_VAR 0 4
46856: RET
// export function ComComplete ( units , b ) ; var i ; begin
46857: LD_INT 0
46859: PPUSH
46860: PPUSH
// if not units then
46861: LD_VAR 0 1
46865: NOT
46866: IFFALSE 46870
// exit ;
46868: GO 46960
// for i in units do
46870: LD_ADDR_VAR 0 4
46874: PUSH
46875: LD_VAR 0 1
46879: PUSH
46880: FOR_IN
46881: IFFALSE 46958
// if BuildingStatus ( b ) = bs_build then
46883: LD_VAR 0 2
46887: PPUSH
46888: CALL_OW 461
46892: PUSH
46893: LD_INT 1
46895: EQUAL
46896: IFFALSE 46956
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46898: LD_VAR 0 4
46902: PPUSH
46903: LD_STRING h
46905: PUSH
46906: LD_VAR 0 2
46910: PPUSH
46911: CALL_OW 250
46915: PUSH
46916: LD_VAR 0 2
46920: PPUSH
46921: CALL_OW 251
46925: PUSH
46926: LD_VAR 0 2
46930: PUSH
46931: LD_INT 0
46933: PUSH
46934: LD_INT 0
46936: PUSH
46937: LD_INT 0
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: PUSH
46949: EMPTY
46950: LIST
46951: PPUSH
46952: CALL_OW 446
46956: GO 46880
46958: POP
46959: POP
// end ;
46960: LD_VAR 0 3
46964: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46965: LD_INT 0
46967: PPUSH
46968: PPUSH
46969: PPUSH
46970: PPUSH
46971: PPUSH
46972: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46973: LD_VAR 0 1
46977: NOT
46978: PUSH
46979: LD_VAR 0 1
46983: PPUSH
46984: CALL_OW 263
46988: PUSH
46989: LD_INT 2
46991: NONEQUAL
46992: OR
46993: IFFALSE 46997
// exit ;
46995: GO 47313
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46997: LD_ADDR_VAR 0 6
47001: PUSH
47002: LD_INT 22
47004: PUSH
47005: LD_VAR 0 1
47009: PPUSH
47010: CALL_OW 255
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 2
47021: PUSH
47022: LD_INT 30
47024: PUSH
47025: LD_INT 36
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 34
47034: PUSH
47035: LD_INT 31
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: LIST
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PPUSH
47051: CALL_OW 69
47055: ST_TO_ADDR
// if not tmp then
47056: LD_VAR 0 6
47060: NOT
47061: IFFALSE 47065
// exit ;
47063: GO 47313
// result := [ ] ;
47065: LD_ADDR_VAR 0 2
47069: PUSH
47070: EMPTY
47071: ST_TO_ADDR
// for i in tmp do
47072: LD_ADDR_VAR 0 3
47076: PUSH
47077: LD_VAR 0 6
47081: PUSH
47082: FOR_IN
47083: IFFALSE 47154
// begin t := UnitsInside ( i ) ;
47085: LD_ADDR_VAR 0 4
47089: PUSH
47090: LD_VAR 0 3
47094: PPUSH
47095: CALL_OW 313
47099: ST_TO_ADDR
// if t then
47100: LD_VAR 0 4
47104: IFFALSE 47152
// for j in t do
47106: LD_ADDR_VAR 0 7
47110: PUSH
47111: LD_VAR 0 4
47115: PUSH
47116: FOR_IN
47117: IFFALSE 47150
// result := Replace ( result , result + 1 , j ) ;
47119: LD_ADDR_VAR 0 2
47123: PUSH
47124: LD_VAR 0 2
47128: PPUSH
47129: LD_VAR 0 2
47133: PUSH
47134: LD_INT 1
47136: PLUS
47137: PPUSH
47138: LD_VAR 0 7
47142: PPUSH
47143: CALL_OW 1
47147: ST_TO_ADDR
47148: GO 47116
47150: POP
47151: POP
// end ;
47152: GO 47082
47154: POP
47155: POP
// if not result then
47156: LD_VAR 0 2
47160: NOT
47161: IFFALSE 47165
// exit ;
47163: GO 47313
// mech := result [ 1 ] ;
47165: LD_ADDR_VAR 0 5
47169: PUSH
47170: LD_VAR 0 2
47174: PUSH
47175: LD_INT 1
47177: ARRAY
47178: ST_TO_ADDR
// if result > 1 then
47179: LD_VAR 0 2
47183: PUSH
47184: LD_INT 1
47186: GREATER
47187: IFFALSE 47299
// begin for i = 2 to result do
47189: LD_ADDR_VAR 0 3
47193: PUSH
47194: DOUBLE
47195: LD_INT 2
47197: DEC
47198: ST_TO_ADDR
47199: LD_VAR 0 2
47203: PUSH
47204: FOR_TO
47205: IFFALSE 47297
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47207: LD_ADDR_VAR 0 4
47211: PUSH
47212: LD_VAR 0 2
47216: PUSH
47217: LD_VAR 0 3
47221: ARRAY
47222: PPUSH
47223: LD_INT 3
47225: PPUSH
47226: CALL_OW 259
47230: PUSH
47231: LD_VAR 0 2
47235: PUSH
47236: LD_VAR 0 3
47240: ARRAY
47241: PPUSH
47242: CALL_OW 432
47246: MINUS
47247: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47248: LD_VAR 0 4
47252: PUSH
47253: LD_VAR 0 5
47257: PPUSH
47258: LD_INT 3
47260: PPUSH
47261: CALL_OW 259
47265: PUSH
47266: LD_VAR 0 5
47270: PPUSH
47271: CALL_OW 432
47275: MINUS
47276: GREATEREQUAL
47277: IFFALSE 47295
// mech := result [ i ] ;
47279: LD_ADDR_VAR 0 5
47283: PUSH
47284: LD_VAR 0 2
47288: PUSH
47289: LD_VAR 0 3
47293: ARRAY
47294: ST_TO_ADDR
// end ;
47295: GO 47204
47297: POP
47298: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47299: LD_VAR 0 1
47303: PPUSH
47304: LD_VAR 0 5
47308: PPUSH
47309: CALL_OW 135
// end ;
47313: LD_VAR 0 2
47317: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47318: LD_INT 0
47320: PPUSH
47321: PPUSH
47322: PPUSH
47323: PPUSH
47324: PPUSH
47325: PPUSH
47326: PPUSH
47327: PPUSH
47328: PPUSH
47329: PPUSH
47330: PPUSH
47331: PPUSH
47332: PPUSH
// result := [ ] ;
47333: LD_ADDR_VAR 0 7
47337: PUSH
47338: EMPTY
47339: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47340: LD_VAR 0 1
47344: PPUSH
47345: CALL_OW 266
47349: PUSH
47350: LD_INT 0
47352: PUSH
47353: LD_INT 1
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: IN
47360: NOT
47361: IFFALSE 47365
// exit ;
47363: GO 48999
// if name then
47365: LD_VAR 0 3
47369: IFFALSE 47385
// SetBName ( base_dep , name ) ;
47371: LD_VAR 0 1
47375: PPUSH
47376: LD_VAR 0 3
47380: PPUSH
47381: CALL_OW 500
// base := GetBase ( base_dep ) ;
47385: LD_ADDR_VAR 0 15
47389: PUSH
47390: LD_VAR 0 1
47394: PPUSH
47395: CALL_OW 274
47399: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47400: LD_ADDR_VAR 0 16
47404: PUSH
47405: LD_VAR 0 1
47409: PPUSH
47410: CALL_OW 255
47414: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47415: LD_ADDR_VAR 0 17
47419: PUSH
47420: LD_VAR 0 1
47424: PPUSH
47425: CALL_OW 248
47429: ST_TO_ADDR
// if sources then
47430: LD_VAR 0 5
47434: IFFALSE 47481
// for i = 1 to 3 do
47436: LD_ADDR_VAR 0 8
47440: PUSH
47441: DOUBLE
47442: LD_INT 1
47444: DEC
47445: ST_TO_ADDR
47446: LD_INT 3
47448: PUSH
47449: FOR_TO
47450: IFFALSE 47479
// AddResourceType ( base , i , sources [ i ] ) ;
47452: LD_VAR 0 15
47456: PPUSH
47457: LD_VAR 0 8
47461: PPUSH
47462: LD_VAR 0 5
47466: PUSH
47467: LD_VAR 0 8
47471: ARRAY
47472: PPUSH
47473: CALL_OW 276
47477: GO 47449
47479: POP
47480: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47481: LD_ADDR_VAR 0 18
47485: PUSH
47486: LD_VAR 0 15
47490: PPUSH
47491: LD_VAR 0 2
47495: PPUSH
47496: LD_INT 1
47498: PPUSH
47499: CALL 46742 0 3
47503: ST_TO_ADDR
// InitHc ;
47504: CALL_OW 19
// InitUc ;
47508: CALL_OW 18
// uc_side := side ;
47512: LD_ADDR_OWVAR 20
47516: PUSH
47517: LD_VAR 0 16
47521: ST_TO_ADDR
// uc_nation := nation ;
47522: LD_ADDR_OWVAR 21
47526: PUSH
47527: LD_VAR 0 17
47531: ST_TO_ADDR
// if buildings then
47532: LD_VAR 0 18
47536: IFFALSE 48858
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47538: LD_ADDR_VAR 0 19
47542: PUSH
47543: LD_VAR 0 18
47547: PPUSH
47548: LD_INT 2
47550: PUSH
47551: LD_INT 30
47553: PUSH
47554: LD_INT 29
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 30
47563: PUSH
47564: LD_INT 30
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: LIST
47575: PPUSH
47576: CALL_OW 72
47580: ST_TO_ADDR
// if tmp then
47581: LD_VAR 0 19
47585: IFFALSE 47633
// for i in tmp do
47587: LD_ADDR_VAR 0 8
47591: PUSH
47592: LD_VAR 0 19
47596: PUSH
47597: FOR_IN
47598: IFFALSE 47631
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47600: LD_VAR 0 8
47604: PPUSH
47605: CALL_OW 250
47609: PPUSH
47610: LD_VAR 0 8
47614: PPUSH
47615: CALL_OW 251
47619: PPUSH
47620: LD_VAR 0 16
47624: PPUSH
47625: CALL_OW 441
47629: GO 47597
47631: POP
47632: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47633: LD_VAR 0 18
47637: PPUSH
47638: LD_INT 2
47640: PUSH
47641: LD_INT 30
47643: PUSH
47644: LD_INT 32
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 30
47653: PUSH
47654: LD_INT 33
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: LIST
47665: PPUSH
47666: CALL_OW 72
47670: IFFALSE 47758
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47672: LD_ADDR_VAR 0 8
47676: PUSH
47677: LD_VAR 0 18
47681: PPUSH
47682: LD_INT 2
47684: PUSH
47685: LD_INT 30
47687: PUSH
47688: LD_INT 32
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 30
47697: PUSH
47698: LD_INT 33
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: LIST
47709: PPUSH
47710: CALL_OW 72
47714: PUSH
47715: FOR_IN
47716: IFFALSE 47756
// begin if not GetBWeapon ( i ) then
47718: LD_VAR 0 8
47722: PPUSH
47723: CALL_OW 269
47727: NOT
47728: IFFALSE 47754
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47730: LD_VAR 0 8
47734: PPUSH
47735: LD_VAR 0 8
47739: PPUSH
47740: LD_VAR 0 2
47744: PPUSH
47745: CALL 49004 0 2
47749: PPUSH
47750: CALL_OW 431
// end ;
47754: GO 47715
47756: POP
47757: POP
// end ; for i = 1 to personel do
47758: LD_ADDR_VAR 0 8
47762: PUSH
47763: DOUBLE
47764: LD_INT 1
47766: DEC
47767: ST_TO_ADDR
47768: LD_VAR 0 6
47772: PUSH
47773: FOR_TO
47774: IFFALSE 48838
// begin if i > 4 then
47776: LD_VAR 0 8
47780: PUSH
47781: LD_INT 4
47783: GREATER
47784: IFFALSE 47788
// break ;
47786: GO 48838
// case i of 1 :
47788: LD_VAR 0 8
47792: PUSH
47793: LD_INT 1
47795: DOUBLE
47796: EQUAL
47797: IFTRUE 47801
47799: GO 47881
47801: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47802: LD_ADDR_VAR 0 12
47806: PUSH
47807: LD_VAR 0 18
47811: PPUSH
47812: LD_INT 22
47814: PUSH
47815: LD_VAR 0 16
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 58
47826: PUSH
47827: EMPTY
47828: LIST
47829: PUSH
47830: LD_INT 2
47832: PUSH
47833: LD_INT 30
47835: PUSH
47836: LD_INT 32
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 30
47845: PUSH
47846: LD_INT 4
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 30
47855: PUSH
47856: LD_INT 5
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: LIST
47873: PPUSH
47874: CALL_OW 72
47878: ST_TO_ADDR
47879: GO 48103
47881: LD_INT 2
47883: DOUBLE
47884: EQUAL
47885: IFTRUE 47889
47887: GO 47951
47889: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47890: LD_ADDR_VAR 0 12
47894: PUSH
47895: LD_VAR 0 18
47899: PPUSH
47900: LD_INT 22
47902: PUSH
47903: LD_VAR 0 16
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 2
47914: PUSH
47915: LD_INT 30
47917: PUSH
47918: LD_INT 0
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 30
47927: PUSH
47928: LD_INT 1
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: LIST
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PPUSH
47944: CALL_OW 72
47948: ST_TO_ADDR
47949: GO 48103
47951: LD_INT 3
47953: DOUBLE
47954: EQUAL
47955: IFTRUE 47959
47957: GO 48021
47959: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47960: LD_ADDR_VAR 0 12
47964: PUSH
47965: LD_VAR 0 18
47969: PPUSH
47970: LD_INT 22
47972: PUSH
47973: LD_VAR 0 16
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 2
47984: PUSH
47985: LD_INT 30
47987: PUSH
47988: LD_INT 2
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 30
47997: PUSH
47998: LD_INT 3
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: LIST
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PPUSH
48014: CALL_OW 72
48018: ST_TO_ADDR
48019: GO 48103
48021: LD_INT 4
48023: DOUBLE
48024: EQUAL
48025: IFTRUE 48029
48027: GO 48102
48029: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48030: LD_ADDR_VAR 0 12
48034: PUSH
48035: LD_VAR 0 18
48039: PPUSH
48040: LD_INT 22
48042: PUSH
48043: LD_VAR 0 16
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 2
48054: PUSH
48055: LD_INT 30
48057: PUSH
48058: LD_INT 6
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 30
48067: PUSH
48068: LD_INT 7
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 30
48077: PUSH
48078: LD_INT 8
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PPUSH
48095: CALL_OW 72
48099: ST_TO_ADDR
48100: GO 48103
48102: POP
// if i = 1 then
48103: LD_VAR 0 8
48107: PUSH
48108: LD_INT 1
48110: EQUAL
48111: IFFALSE 48222
// begin tmp := [ ] ;
48113: LD_ADDR_VAR 0 19
48117: PUSH
48118: EMPTY
48119: ST_TO_ADDR
// for j in f do
48120: LD_ADDR_VAR 0 9
48124: PUSH
48125: LD_VAR 0 12
48129: PUSH
48130: FOR_IN
48131: IFFALSE 48204
// if GetBType ( j ) = b_bunker then
48133: LD_VAR 0 9
48137: PPUSH
48138: CALL_OW 266
48142: PUSH
48143: LD_INT 32
48145: EQUAL
48146: IFFALSE 48173
// tmp := Insert ( tmp , 1 , j ) else
48148: LD_ADDR_VAR 0 19
48152: PUSH
48153: LD_VAR 0 19
48157: PPUSH
48158: LD_INT 1
48160: PPUSH
48161: LD_VAR 0 9
48165: PPUSH
48166: CALL_OW 2
48170: ST_TO_ADDR
48171: GO 48202
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48173: LD_ADDR_VAR 0 19
48177: PUSH
48178: LD_VAR 0 19
48182: PPUSH
48183: LD_VAR 0 19
48187: PUSH
48188: LD_INT 1
48190: PLUS
48191: PPUSH
48192: LD_VAR 0 9
48196: PPUSH
48197: CALL_OW 2
48201: ST_TO_ADDR
48202: GO 48130
48204: POP
48205: POP
// if tmp then
48206: LD_VAR 0 19
48210: IFFALSE 48222
// f := tmp ;
48212: LD_ADDR_VAR 0 12
48216: PUSH
48217: LD_VAR 0 19
48221: ST_TO_ADDR
// end ; x := personel [ i ] ;
48222: LD_ADDR_VAR 0 13
48226: PUSH
48227: LD_VAR 0 6
48231: PUSH
48232: LD_VAR 0 8
48236: ARRAY
48237: ST_TO_ADDR
// if x = - 1 then
48238: LD_VAR 0 13
48242: PUSH
48243: LD_INT 1
48245: NEG
48246: EQUAL
48247: IFFALSE 48456
// begin for j in f do
48249: LD_ADDR_VAR 0 9
48253: PUSH
48254: LD_VAR 0 12
48258: PUSH
48259: FOR_IN
48260: IFFALSE 48452
// repeat InitHc ;
48262: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48266: LD_VAR 0 9
48270: PPUSH
48271: CALL_OW 266
48275: PUSH
48276: LD_INT 5
48278: EQUAL
48279: IFFALSE 48349
// begin if UnitsInside ( j ) < 3 then
48281: LD_VAR 0 9
48285: PPUSH
48286: CALL_OW 313
48290: PUSH
48291: LD_INT 3
48293: LESS
48294: IFFALSE 48330
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48296: LD_INT 0
48298: PPUSH
48299: LD_INT 5
48301: PUSH
48302: LD_INT 8
48304: PUSH
48305: LD_INT 9
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: LIST
48312: PUSH
48313: LD_VAR 0 17
48317: ARRAY
48318: PPUSH
48319: LD_VAR 0 4
48323: PPUSH
48324: CALL_OW 380
48328: GO 48347
// PrepareHuman ( false , i , skill ) ;
48330: LD_INT 0
48332: PPUSH
48333: LD_VAR 0 8
48337: PPUSH
48338: LD_VAR 0 4
48342: PPUSH
48343: CALL_OW 380
// end else
48347: GO 48366
// PrepareHuman ( false , i , skill ) ;
48349: LD_INT 0
48351: PPUSH
48352: LD_VAR 0 8
48356: PPUSH
48357: LD_VAR 0 4
48361: PPUSH
48362: CALL_OW 380
// un := CreateHuman ;
48366: LD_ADDR_VAR 0 14
48370: PUSH
48371: CALL_OW 44
48375: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48376: LD_ADDR_VAR 0 7
48380: PUSH
48381: LD_VAR 0 7
48385: PPUSH
48386: LD_INT 1
48388: PPUSH
48389: LD_VAR 0 14
48393: PPUSH
48394: CALL_OW 2
48398: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48399: LD_VAR 0 14
48403: PPUSH
48404: LD_VAR 0 9
48408: PPUSH
48409: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48413: LD_VAR 0 9
48417: PPUSH
48418: CALL_OW 313
48422: PUSH
48423: LD_INT 6
48425: EQUAL
48426: PUSH
48427: LD_VAR 0 9
48431: PPUSH
48432: CALL_OW 266
48436: PUSH
48437: LD_INT 32
48439: PUSH
48440: LD_INT 31
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: IN
48447: OR
48448: IFFALSE 48262
48450: GO 48259
48452: POP
48453: POP
// end else
48454: GO 48836
// for j = 1 to x do
48456: LD_ADDR_VAR 0 9
48460: PUSH
48461: DOUBLE
48462: LD_INT 1
48464: DEC
48465: ST_TO_ADDR
48466: LD_VAR 0 13
48470: PUSH
48471: FOR_TO
48472: IFFALSE 48834
// begin InitHc ;
48474: CALL_OW 19
// if not f then
48478: LD_VAR 0 12
48482: NOT
48483: IFFALSE 48572
// begin PrepareHuman ( false , i , skill ) ;
48485: LD_INT 0
48487: PPUSH
48488: LD_VAR 0 8
48492: PPUSH
48493: LD_VAR 0 4
48497: PPUSH
48498: CALL_OW 380
// un := CreateHuman ;
48502: LD_ADDR_VAR 0 14
48506: PUSH
48507: CALL_OW 44
48511: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48512: LD_ADDR_VAR 0 7
48516: PUSH
48517: LD_VAR 0 7
48521: PPUSH
48522: LD_INT 1
48524: PPUSH
48525: LD_VAR 0 14
48529: PPUSH
48530: CALL_OW 2
48534: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48535: LD_VAR 0 14
48539: PPUSH
48540: LD_VAR 0 1
48544: PPUSH
48545: CALL_OW 250
48549: PPUSH
48550: LD_VAR 0 1
48554: PPUSH
48555: CALL_OW 251
48559: PPUSH
48560: LD_INT 10
48562: PPUSH
48563: LD_INT 0
48565: PPUSH
48566: CALL_OW 50
// continue ;
48570: GO 48471
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48572: LD_VAR 0 12
48576: PUSH
48577: LD_INT 1
48579: ARRAY
48580: PPUSH
48581: CALL_OW 313
48585: PUSH
48586: LD_VAR 0 12
48590: PUSH
48591: LD_INT 1
48593: ARRAY
48594: PPUSH
48595: CALL_OW 266
48599: PUSH
48600: LD_INT 32
48602: PUSH
48603: LD_INT 31
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: IN
48610: AND
48611: PUSH
48612: LD_VAR 0 12
48616: PUSH
48617: LD_INT 1
48619: ARRAY
48620: PPUSH
48621: CALL_OW 313
48625: PUSH
48626: LD_INT 6
48628: EQUAL
48629: OR
48630: IFFALSE 48650
// f := Delete ( f , 1 ) ;
48632: LD_ADDR_VAR 0 12
48636: PUSH
48637: LD_VAR 0 12
48641: PPUSH
48642: LD_INT 1
48644: PPUSH
48645: CALL_OW 3
48649: ST_TO_ADDR
// if not f then
48650: LD_VAR 0 12
48654: NOT
48655: IFFALSE 48673
// begin x := x + 2 ;
48657: LD_ADDR_VAR 0 13
48661: PUSH
48662: LD_VAR 0 13
48666: PUSH
48667: LD_INT 2
48669: PLUS
48670: ST_TO_ADDR
// continue ;
48671: GO 48471
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48673: LD_VAR 0 12
48677: PUSH
48678: LD_INT 1
48680: ARRAY
48681: PPUSH
48682: CALL_OW 266
48686: PUSH
48687: LD_INT 5
48689: EQUAL
48690: IFFALSE 48764
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48692: LD_VAR 0 12
48696: PUSH
48697: LD_INT 1
48699: ARRAY
48700: PPUSH
48701: CALL_OW 313
48705: PUSH
48706: LD_INT 3
48708: LESS
48709: IFFALSE 48745
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48711: LD_INT 0
48713: PPUSH
48714: LD_INT 5
48716: PUSH
48717: LD_INT 8
48719: PUSH
48720: LD_INT 9
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: LIST
48727: PUSH
48728: LD_VAR 0 17
48732: ARRAY
48733: PPUSH
48734: LD_VAR 0 4
48738: PPUSH
48739: CALL_OW 380
48743: GO 48762
// PrepareHuman ( false , i , skill ) ;
48745: LD_INT 0
48747: PPUSH
48748: LD_VAR 0 8
48752: PPUSH
48753: LD_VAR 0 4
48757: PPUSH
48758: CALL_OW 380
// end else
48762: GO 48781
// PrepareHuman ( false , i , skill ) ;
48764: LD_INT 0
48766: PPUSH
48767: LD_VAR 0 8
48771: PPUSH
48772: LD_VAR 0 4
48776: PPUSH
48777: CALL_OW 380
// un := CreateHuman ;
48781: LD_ADDR_VAR 0 14
48785: PUSH
48786: CALL_OW 44
48790: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48791: LD_ADDR_VAR 0 7
48795: PUSH
48796: LD_VAR 0 7
48800: PPUSH
48801: LD_INT 1
48803: PPUSH
48804: LD_VAR 0 14
48808: PPUSH
48809: CALL_OW 2
48813: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48814: LD_VAR 0 14
48818: PPUSH
48819: LD_VAR 0 12
48823: PUSH
48824: LD_INT 1
48826: ARRAY
48827: PPUSH
48828: CALL_OW 52
// end ;
48832: GO 48471
48834: POP
48835: POP
// end ;
48836: GO 47773
48838: POP
48839: POP
// result := result ^ buildings ;
48840: LD_ADDR_VAR 0 7
48844: PUSH
48845: LD_VAR 0 7
48849: PUSH
48850: LD_VAR 0 18
48854: ADD
48855: ST_TO_ADDR
// end else
48856: GO 48999
// begin for i = 1 to personel do
48858: LD_ADDR_VAR 0 8
48862: PUSH
48863: DOUBLE
48864: LD_INT 1
48866: DEC
48867: ST_TO_ADDR
48868: LD_VAR 0 6
48872: PUSH
48873: FOR_TO
48874: IFFALSE 48997
// begin if i > 4 then
48876: LD_VAR 0 8
48880: PUSH
48881: LD_INT 4
48883: GREATER
48884: IFFALSE 48888
// break ;
48886: GO 48997
// x := personel [ i ] ;
48888: LD_ADDR_VAR 0 13
48892: PUSH
48893: LD_VAR 0 6
48897: PUSH
48898: LD_VAR 0 8
48902: ARRAY
48903: ST_TO_ADDR
// if x = - 1 then
48904: LD_VAR 0 13
48908: PUSH
48909: LD_INT 1
48911: NEG
48912: EQUAL
48913: IFFALSE 48917
// continue ;
48915: GO 48873
// PrepareHuman ( false , i , skill ) ;
48917: LD_INT 0
48919: PPUSH
48920: LD_VAR 0 8
48924: PPUSH
48925: LD_VAR 0 4
48929: PPUSH
48930: CALL_OW 380
// un := CreateHuman ;
48934: LD_ADDR_VAR 0 14
48938: PUSH
48939: CALL_OW 44
48943: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48944: LD_VAR 0 14
48948: PPUSH
48949: LD_VAR 0 1
48953: PPUSH
48954: CALL_OW 250
48958: PPUSH
48959: LD_VAR 0 1
48963: PPUSH
48964: CALL_OW 251
48968: PPUSH
48969: LD_INT 10
48971: PPUSH
48972: LD_INT 0
48974: PPUSH
48975: CALL_OW 50
// result := result ^ un ;
48979: LD_ADDR_VAR 0 7
48983: PUSH
48984: LD_VAR 0 7
48988: PUSH
48989: LD_VAR 0 14
48993: ADD
48994: ST_TO_ADDR
// end ;
48995: GO 48873
48997: POP
48998: POP
// end ; end ;
48999: LD_VAR 0 7
49003: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49004: LD_INT 0
49006: PPUSH
49007: PPUSH
49008: PPUSH
49009: PPUSH
49010: PPUSH
49011: PPUSH
49012: PPUSH
49013: PPUSH
49014: PPUSH
49015: PPUSH
49016: PPUSH
49017: PPUSH
49018: PPUSH
49019: PPUSH
49020: PPUSH
49021: PPUSH
// result := false ;
49022: LD_ADDR_VAR 0 3
49026: PUSH
49027: LD_INT 0
49029: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49030: LD_VAR 0 1
49034: NOT
49035: PUSH
49036: LD_VAR 0 1
49040: PPUSH
49041: CALL_OW 266
49045: PUSH
49046: LD_INT 32
49048: PUSH
49049: LD_INT 33
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: IN
49056: NOT
49057: OR
49058: IFFALSE 49062
// exit ;
49060: GO 50171
// nat := GetNation ( tower ) ;
49062: LD_ADDR_VAR 0 12
49066: PUSH
49067: LD_VAR 0 1
49071: PPUSH
49072: CALL_OW 248
49076: ST_TO_ADDR
// side := GetSide ( tower ) ;
49077: LD_ADDR_VAR 0 16
49081: PUSH
49082: LD_VAR 0 1
49086: PPUSH
49087: CALL_OW 255
49091: ST_TO_ADDR
// x := GetX ( tower ) ;
49092: LD_ADDR_VAR 0 10
49096: PUSH
49097: LD_VAR 0 1
49101: PPUSH
49102: CALL_OW 250
49106: ST_TO_ADDR
// y := GetY ( tower ) ;
49107: LD_ADDR_VAR 0 11
49111: PUSH
49112: LD_VAR 0 1
49116: PPUSH
49117: CALL_OW 251
49121: ST_TO_ADDR
// if not x or not y then
49122: LD_VAR 0 10
49126: NOT
49127: PUSH
49128: LD_VAR 0 11
49132: NOT
49133: OR
49134: IFFALSE 49138
// exit ;
49136: GO 50171
// weapon := 0 ;
49138: LD_ADDR_VAR 0 18
49142: PUSH
49143: LD_INT 0
49145: ST_TO_ADDR
// fac_list := [ ] ;
49146: LD_ADDR_VAR 0 17
49150: PUSH
49151: EMPTY
49152: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49153: LD_ADDR_VAR 0 6
49157: PUSH
49158: LD_VAR 0 1
49162: PPUSH
49163: CALL_OW 274
49167: PPUSH
49168: LD_VAR 0 2
49172: PPUSH
49173: LD_INT 0
49175: PPUSH
49176: CALL 46742 0 3
49180: PPUSH
49181: LD_INT 30
49183: PUSH
49184: LD_INT 3
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PPUSH
49191: CALL_OW 72
49195: ST_TO_ADDR
// if not factories then
49196: LD_VAR 0 6
49200: NOT
49201: IFFALSE 49205
// exit ;
49203: GO 50171
// for i in factories do
49205: LD_ADDR_VAR 0 8
49209: PUSH
49210: LD_VAR 0 6
49214: PUSH
49215: FOR_IN
49216: IFFALSE 49241
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49218: LD_ADDR_VAR 0 17
49222: PUSH
49223: LD_VAR 0 17
49227: PUSH
49228: LD_VAR 0 8
49232: PPUSH
49233: CALL_OW 478
49237: UNION
49238: ST_TO_ADDR
49239: GO 49215
49241: POP
49242: POP
// if not fac_list then
49243: LD_VAR 0 17
49247: NOT
49248: IFFALSE 49252
// exit ;
49250: GO 50171
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49252: LD_ADDR_VAR 0 5
49256: PUSH
49257: LD_INT 4
49259: PUSH
49260: LD_INT 5
49262: PUSH
49263: LD_INT 9
49265: PUSH
49266: LD_INT 10
49268: PUSH
49269: LD_INT 6
49271: PUSH
49272: LD_INT 7
49274: PUSH
49275: LD_INT 11
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 27
49289: PUSH
49290: LD_INT 28
49292: PUSH
49293: LD_INT 26
49295: PUSH
49296: LD_INT 30
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 43
49307: PUSH
49308: LD_INT 44
49310: PUSH
49311: LD_INT 46
49313: PUSH
49314: LD_INT 45
49316: PUSH
49317: LD_INT 47
49319: PUSH
49320: LD_INT 49
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: LIST
49335: PUSH
49336: LD_VAR 0 12
49340: ARRAY
49341: ST_TO_ADDR
// list := list isect fac_list ;
49342: LD_ADDR_VAR 0 5
49346: PUSH
49347: LD_VAR 0 5
49351: PUSH
49352: LD_VAR 0 17
49356: ISECT
49357: ST_TO_ADDR
// if not list then
49358: LD_VAR 0 5
49362: NOT
49363: IFFALSE 49367
// exit ;
49365: GO 50171
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49367: LD_VAR 0 12
49371: PUSH
49372: LD_INT 3
49374: EQUAL
49375: PUSH
49376: LD_INT 49
49378: PUSH
49379: LD_VAR 0 5
49383: IN
49384: AND
49385: PUSH
49386: LD_INT 31
49388: PPUSH
49389: LD_VAR 0 16
49393: PPUSH
49394: CALL_OW 321
49398: PUSH
49399: LD_INT 2
49401: EQUAL
49402: AND
49403: IFFALSE 49463
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49405: LD_INT 22
49407: PUSH
49408: LD_VAR 0 16
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 35
49419: PUSH
49420: LD_INT 49
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 91
49429: PUSH
49430: LD_VAR 0 1
49434: PUSH
49435: LD_INT 10
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: LIST
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: LIST
49447: PPUSH
49448: CALL_OW 69
49452: NOT
49453: IFFALSE 49463
// weapon := ru_time_lapser ;
49455: LD_ADDR_VAR 0 18
49459: PUSH
49460: LD_INT 49
49462: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49463: LD_VAR 0 12
49467: PUSH
49468: LD_INT 1
49470: PUSH
49471: LD_INT 2
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: IN
49478: PUSH
49479: LD_INT 11
49481: PUSH
49482: LD_VAR 0 5
49486: IN
49487: PUSH
49488: LD_INT 30
49490: PUSH
49491: LD_VAR 0 5
49495: IN
49496: OR
49497: AND
49498: PUSH
49499: LD_INT 6
49501: PPUSH
49502: LD_VAR 0 16
49506: PPUSH
49507: CALL_OW 321
49511: PUSH
49512: LD_INT 2
49514: EQUAL
49515: AND
49516: IFFALSE 49681
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49518: LD_INT 22
49520: PUSH
49521: LD_VAR 0 16
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 2
49532: PUSH
49533: LD_INT 35
49535: PUSH
49536: LD_INT 11
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 35
49545: PUSH
49546: LD_INT 30
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 91
49560: PUSH
49561: LD_VAR 0 1
49565: PUSH
49566: LD_INT 18
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: LIST
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: LIST
49578: PPUSH
49579: CALL_OW 69
49583: NOT
49584: PUSH
49585: LD_INT 22
49587: PUSH
49588: LD_VAR 0 16
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 2
49599: PUSH
49600: LD_INT 30
49602: PUSH
49603: LD_INT 32
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 30
49612: PUSH
49613: LD_INT 33
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 91
49627: PUSH
49628: LD_VAR 0 1
49632: PUSH
49633: LD_INT 12
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: LIST
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: LIST
49645: PUSH
49646: EMPTY
49647: LIST
49648: PPUSH
49649: CALL_OW 69
49653: PUSH
49654: LD_INT 2
49656: GREATER
49657: AND
49658: IFFALSE 49681
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49660: LD_ADDR_VAR 0 18
49664: PUSH
49665: LD_INT 11
49667: PUSH
49668: LD_INT 30
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_VAR 0 12
49679: ARRAY
49680: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49681: LD_VAR 0 18
49685: NOT
49686: PUSH
49687: LD_INT 40
49689: PPUSH
49690: LD_VAR 0 16
49694: PPUSH
49695: CALL_OW 321
49699: PUSH
49700: LD_INT 2
49702: EQUAL
49703: AND
49704: PUSH
49705: LD_INT 7
49707: PUSH
49708: LD_VAR 0 5
49712: IN
49713: PUSH
49714: LD_INT 28
49716: PUSH
49717: LD_VAR 0 5
49721: IN
49722: OR
49723: PUSH
49724: LD_INT 45
49726: PUSH
49727: LD_VAR 0 5
49731: IN
49732: OR
49733: AND
49734: IFFALSE 49988
// begin hex := GetHexInfo ( x , y ) ;
49736: LD_ADDR_VAR 0 4
49740: PUSH
49741: LD_VAR 0 10
49745: PPUSH
49746: LD_VAR 0 11
49750: PPUSH
49751: CALL_OW 546
49755: ST_TO_ADDR
// if hex [ 1 ] then
49756: LD_VAR 0 4
49760: PUSH
49761: LD_INT 1
49763: ARRAY
49764: IFFALSE 49768
// exit ;
49766: GO 50171
// height := hex [ 2 ] ;
49768: LD_ADDR_VAR 0 15
49772: PUSH
49773: LD_VAR 0 4
49777: PUSH
49778: LD_INT 2
49780: ARRAY
49781: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49782: LD_ADDR_VAR 0 14
49786: PUSH
49787: LD_INT 0
49789: PUSH
49790: LD_INT 2
49792: PUSH
49793: LD_INT 3
49795: PUSH
49796: LD_INT 5
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: ST_TO_ADDR
// for i in tmp do
49805: LD_ADDR_VAR 0 8
49809: PUSH
49810: LD_VAR 0 14
49814: PUSH
49815: FOR_IN
49816: IFFALSE 49986
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49818: LD_ADDR_VAR 0 9
49822: PUSH
49823: LD_VAR 0 10
49827: PPUSH
49828: LD_VAR 0 8
49832: PPUSH
49833: LD_INT 5
49835: PPUSH
49836: CALL_OW 272
49840: PUSH
49841: LD_VAR 0 11
49845: PPUSH
49846: LD_VAR 0 8
49850: PPUSH
49851: LD_INT 5
49853: PPUSH
49854: CALL_OW 273
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49863: LD_VAR 0 9
49867: PUSH
49868: LD_INT 1
49870: ARRAY
49871: PPUSH
49872: LD_VAR 0 9
49876: PUSH
49877: LD_INT 2
49879: ARRAY
49880: PPUSH
49881: CALL_OW 488
49885: IFFALSE 49984
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49887: LD_ADDR_VAR 0 4
49891: PUSH
49892: LD_VAR 0 9
49896: PUSH
49897: LD_INT 1
49899: ARRAY
49900: PPUSH
49901: LD_VAR 0 9
49905: PUSH
49906: LD_INT 2
49908: ARRAY
49909: PPUSH
49910: CALL_OW 546
49914: ST_TO_ADDR
// if hex [ 1 ] then
49915: LD_VAR 0 4
49919: PUSH
49920: LD_INT 1
49922: ARRAY
49923: IFFALSE 49927
// continue ;
49925: GO 49815
// h := hex [ 2 ] ;
49927: LD_ADDR_VAR 0 13
49931: PUSH
49932: LD_VAR 0 4
49936: PUSH
49937: LD_INT 2
49939: ARRAY
49940: ST_TO_ADDR
// if h + 7 < height then
49941: LD_VAR 0 13
49945: PUSH
49946: LD_INT 7
49948: PLUS
49949: PUSH
49950: LD_VAR 0 15
49954: LESS
49955: IFFALSE 49984
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49957: LD_ADDR_VAR 0 18
49961: PUSH
49962: LD_INT 7
49964: PUSH
49965: LD_INT 28
49967: PUSH
49968: LD_INT 45
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: LIST
49975: PUSH
49976: LD_VAR 0 12
49980: ARRAY
49981: ST_TO_ADDR
// break ;
49982: GO 49986
// end ; end ; end ;
49984: GO 49815
49986: POP
49987: POP
// end ; if not weapon then
49988: LD_VAR 0 18
49992: NOT
49993: IFFALSE 50053
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49995: LD_ADDR_VAR 0 5
49999: PUSH
50000: LD_VAR 0 5
50004: PUSH
50005: LD_INT 11
50007: PUSH
50008: LD_INT 30
50010: PUSH
50011: LD_INT 49
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: LIST
50018: DIFF
50019: ST_TO_ADDR
// if not list then
50020: LD_VAR 0 5
50024: NOT
50025: IFFALSE 50029
// exit ;
50027: GO 50171
// weapon := list [ rand ( 1 , list ) ] ;
50029: LD_ADDR_VAR 0 18
50033: PUSH
50034: LD_VAR 0 5
50038: PUSH
50039: LD_INT 1
50041: PPUSH
50042: LD_VAR 0 5
50046: PPUSH
50047: CALL_OW 12
50051: ARRAY
50052: ST_TO_ADDR
// end ; if weapon then
50053: LD_VAR 0 18
50057: IFFALSE 50171
// begin tmp := CostOfWeapon ( weapon ) ;
50059: LD_ADDR_VAR 0 14
50063: PUSH
50064: LD_VAR 0 18
50068: PPUSH
50069: CALL_OW 451
50073: ST_TO_ADDR
// j := GetBase ( tower ) ;
50074: LD_ADDR_VAR 0 9
50078: PUSH
50079: LD_VAR 0 1
50083: PPUSH
50084: CALL_OW 274
50088: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50089: LD_VAR 0 9
50093: PPUSH
50094: LD_INT 1
50096: PPUSH
50097: CALL_OW 275
50101: PUSH
50102: LD_VAR 0 14
50106: PUSH
50107: LD_INT 1
50109: ARRAY
50110: GREATEREQUAL
50111: PUSH
50112: LD_VAR 0 9
50116: PPUSH
50117: LD_INT 2
50119: PPUSH
50120: CALL_OW 275
50124: PUSH
50125: LD_VAR 0 14
50129: PUSH
50130: LD_INT 2
50132: ARRAY
50133: GREATEREQUAL
50134: AND
50135: PUSH
50136: LD_VAR 0 9
50140: PPUSH
50141: LD_INT 3
50143: PPUSH
50144: CALL_OW 275
50148: PUSH
50149: LD_VAR 0 14
50153: PUSH
50154: LD_INT 3
50156: ARRAY
50157: GREATEREQUAL
50158: AND
50159: IFFALSE 50171
// result := weapon ;
50161: LD_ADDR_VAR 0 3
50165: PUSH
50166: LD_VAR 0 18
50170: ST_TO_ADDR
// end ; end ;
50171: LD_VAR 0 3
50175: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50176: LD_INT 0
50178: PPUSH
50179: PPUSH
// result := true ;
50180: LD_ADDR_VAR 0 3
50184: PUSH
50185: LD_INT 1
50187: ST_TO_ADDR
// if array1 = array2 then
50188: LD_VAR 0 1
50192: PUSH
50193: LD_VAR 0 2
50197: EQUAL
50198: IFFALSE 50258
// begin for i = 1 to array1 do
50200: LD_ADDR_VAR 0 4
50204: PUSH
50205: DOUBLE
50206: LD_INT 1
50208: DEC
50209: ST_TO_ADDR
50210: LD_VAR 0 1
50214: PUSH
50215: FOR_TO
50216: IFFALSE 50254
// if array1 [ i ] <> array2 [ i ] then
50218: LD_VAR 0 1
50222: PUSH
50223: LD_VAR 0 4
50227: ARRAY
50228: PUSH
50229: LD_VAR 0 2
50233: PUSH
50234: LD_VAR 0 4
50238: ARRAY
50239: NONEQUAL
50240: IFFALSE 50252
// begin result := false ;
50242: LD_ADDR_VAR 0 3
50246: PUSH
50247: LD_INT 0
50249: ST_TO_ADDR
// break ;
50250: GO 50254
// end ;
50252: GO 50215
50254: POP
50255: POP
// end else
50256: GO 50266
// result := false ;
50258: LD_ADDR_VAR 0 3
50262: PUSH
50263: LD_INT 0
50265: ST_TO_ADDR
// end ;
50266: LD_VAR 0 3
50270: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50271: LD_INT 0
50273: PPUSH
50274: PPUSH
// if not array1 or not array2 then
50275: LD_VAR 0 1
50279: NOT
50280: PUSH
50281: LD_VAR 0 2
50285: NOT
50286: OR
50287: IFFALSE 50291
// exit ;
50289: GO 50355
// result := true ;
50291: LD_ADDR_VAR 0 3
50295: PUSH
50296: LD_INT 1
50298: ST_TO_ADDR
// for i = 1 to array1 do
50299: LD_ADDR_VAR 0 4
50303: PUSH
50304: DOUBLE
50305: LD_INT 1
50307: DEC
50308: ST_TO_ADDR
50309: LD_VAR 0 1
50313: PUSH
50314: FOR_TO
50315: IFFALSE 50353
// if array1 [ i ] <> array2 [ i ] then
50317: LD_VAR 0 1
50321: PUSH
50322: LD_VAR 0 4
50326: ARRAY
50327: PUSH
50328: LD_VAR 0 2
50332: PUSH
50333: LD_VAR 0 4
50337: ARRAY
50338: NONEQUAL
50339: IFFALSE 50351
// begin result := false ;
50341: LD_ADDR_VAR 0 3
50345: PUSH
50346: LD_INT 0
50348: ST_TO_ADDR
// break ;
50349: GO 50353
// end ;
50351: GO 50314
50353: POP
50354: POP
// end ;
50355: LD_VAR 0 3
50359: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50360: LD_INT 0
50362: PPUSH
50363: PPUSH
50364: PPUSH
// pom := GetBase ( fac ) ;
50365: LD_ADDR_VAR 0 5
50369: PUSH
50370: LD_VAR 0 1
50374: PPUSH
50375: CALL_OW 274
50379: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50380: LD_ADDR_VAR 0 4
50384: PUSH
50385: LD_VAR 0 2
50389: PUSH
50390: LD_INT 1
50392: ARRAY
50393: PPUSH
50394: LD_VAR 0 2
50398: PUSH
50399: LD_INT 2
50401: ARRAY
50402: PPUSH
50403: LD_VAR 0 2
50407: PUSH
50408: LD_INT 3
50410: ARRAY
50411: PPUSH
50412: LD_VAR 0 2
50416: PUSH
50417: LD_INT 4
50419: ARRAY
50420: PPUSH
50421: CALL_OW 449
50425: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50426: LD_ADDR_VAR 0 3
50430: PUSH
50431: LD_VAR 0 5
50435: PPUSH
50436: LD_INT 1
50438: PPUSH
50439: CALL_OW 275
50443: PUSH
50444: LD_VAR 0 4
50448: PUSH
50449: LD_INT 1
50451: ARRAY
50452: GREATEREQUAL
50453: PUSH
50454: LD_VAR 0 5
50458: PPUSH
50459: LD_INT 2
50461: PPUSH
50462: CALL_OW 275
50466: PUSH
50467: LD_VAR 0 4
50471: PUSH
50472: LD_INT 2
50474: ARRAY
50475: GREATEREQUAL
50476: AND
50477: PUSH
50478: LD_VAR 0 5
50482: PPUSH
50483: LD_INT 3
50485: PPUSH
50486: CALL_OW 275
50490: PUSH
50491: LD_VAR 0 4
50495: PUSH
50496: LD_INT 3
50498: ARRAY
50499: GREATEREQUAL
50500: AND
50501: ST_TO_ADDR
// end ;
50502: LD_VAR 0 3
50506: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50507: LD_INT 0
50509: PPUSH
50510: PPUSH
50511: PPUSH
50512: PPUSH
// pom := GetBase ( building ) ;
50513: LD_ADDR_VAR 0 3
50517: PUSH
50518: LD_VAR 0 1
50522: PPUSH
50523: CALL_OW 274
50527: ST_TO_ADDR
// if not pom then
50528: LD_VAR 0 3
50532: NOT
50533: IFFALSE 50537
// exit ;
50535: GO 50707
// btype := GetBType ( building ) ;
50537: LD_ADDR_VAR 0 5
50541: PUSH
50542: LD_VAR 0 1
50546: PPUSH
50547: CALL_OW 266
50551: ST_TO_ADDR
// if btype = b_armoury then
50552: LD_VAR 0 5
50556: PUSH
50557: LD_INT 4
50559: EQUAL
50560: IFFALSE 50570
// btype := b_barracks ;
50562: LD_ADDR_VAR 0 5
50566: PUSH
50567: LD_INT 5
50569: ST_TO_ADDR
// if btype = b_depot then
50570: LD_VAR 0 5
50574: PUSH
50575: LD_INT 0
50577: EQUAL
50578: IFFALSE 50588
// btype := b_warehouse ;
50580: LD_ADDR_VAR 0 5
50584: PUSH
50585: LD_INT 1
50587: ST_TO_ADDR
// if btype = b_workshop then
50588: LD_VAR 0 5
50592: PUSH
50593: LD_INT 2
50595: EQUAL
50596: IFFALSE 50606
// btype := b_factory ;
50598: LD_ADDR_VAR 0 5
50602: PUSH
50603: LD_INT 3
50605: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50606: LD_ADDR_VAR 0 4
50610: PUSH
50611: LD_VAR 0 5
50615: PPUSH
50616: LD_VAR 0 1
50620: PPUSH
50621: CALL_OW 248
50625: PPUSH
50626: CALL_OW 450
50630: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50631: LD_ADDR_VAR 0 2
50635: PUSH
50636: LD_VAR 0 3
50640: PPUSH
50641: LD_INT 1
50643: PPUSH
50644: CALL_OW 275
50648: PUSH
50649: LD_VAR 0 4
50653: PUSH
50654: LD_INT 1
50656: ARRAY
50657: GREATEREQUAL
50658: PUSH
50659: LD_VAR 0 3
50663: PPUSH
50664: LD_INT 2
50666: PPUSH
50667: CALL_OW 275
50671: PUSH
50672: LD_VAR 0 4
50676: PUSH
50677: LD_INT 2
50679: ARRAY
50680: GREATEREQUAL
50681: AND
50682: PUSH
50683: LD_VAR 0 3
50687: PPUSH
50688: LD_INT 3
50690: PPUSH
50691: CALL_OW 275
50695: PUSH
50696: LD_VAR 0 4
50700: PUSH
50701: LD_INT 3
50703: ARRAY
50704: GREATEREQUAL
50705: AND
50706: ST_TO_ADDR
// end ;
50707: LD_VAR 0 2
50711: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50712: LD_INT 0
50714: PPUSH
50715: PPUSH
50716: PPUSH
// pom := GetBase ( building ) ;
50717: LD_ADDR_VAR 0 4
50721: PUSH
50722: LD_VAR 0 1
50726: PPUSH
50727: CALL_OW 274
50731: ST_TO_ADDR
// if not pom then
50732: LD_VAR 0 4
50736: NOT
50737: IFFALSE 50741
// exit ;
50739: GO 50842
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50741: LD_ADDR_VAR 0 5
50745: PUSH
50746: LD_VAR 0 2
50750: PPUSH
50751: LD_VAR 0 1
50755: PPUSH
50756: CALL_OW 248
50760: PPUSH
50761: CALL_OW 450
50765: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50766: LD_ADDR_VAR 0 3
50770: PUSH
50771: LD_VAR 0 4
50775: PPUSH
50776: LD_INT 1
50778: PPUSH
50779: CALL_OW 275
50783: PUSH
50784: LD_VAR 0 5
50788: PUSH
50789: LD_INT 1
50791: ARRAY
50792: GREATEREQUAL
50793: PUSH
50794: LD_VAR 0 4
50798: PPUSH
50799: LD_INT 2
50801: PPUSH
50802: CALL_OW 275
50806: PUSH
50807: LD_VAR 0 5
50811: PUSH
50812: LD_INT 2
50814: ARRAY
50815: GREATEREQUAL
50816: AND
50817: PUSH
50818: LD_VAR 0 4
50822: PPUSH
50823: LD_INT 3
50825: PPUSH
50826: CALL_OW 275
50830: PUSH
50831: LD_VAR 0 5
50835: PUSH
50836: LD_INT 3
50838: ARRAY
50839: GREATEREQUAL
50840: AND
50841: ST_TO_ADDR
// end ;
50842: LD_VAR 0 3
50846: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50847: LD_INT 0
50849: PPUSH
50850: PPUSH
50851: PPUSH
50852: PPUSH
50853: PPUSH
50854: PPUSH
50855: PPUSH
50856: PPUSH
50857: PPUSH
50858: PPUSH
50859: PPUSH
// result := false ;
50860: LD_ADDR_VAR 0 8
50864: PUSH
50865: LD_INT 0
50867: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50868: LD_VAR 0 5
50872: NOT
50873: PUSH
50874: LD_VAR 0 1
50878: NOT
50879: OR
50880: PUSH
50881: LD_VAR 0 2
50885: NOT
50886: OR
50887: PUSH
50888: LD_VAR 0 3
50892: NOT
50893: OR
50894: IFFALSE 50898
// exit ;
50896: GO 51712
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50898: LD_ADDR_VAR 0 14
50902: PUSH
50903: LD_VAR 0 1
50907: PPUSH
50908: LD_VAR 0 2
50912: PPUSH
50913: LD_VAR 0 3
50917: PPUSH
50918: LD_VAR 0 4
50922: PPUSH
50923: LD_VAR 0 5
50927: PUSH
50928: LD_INT 1
50930: ARRAY
50931: PPUSH
50932: CALL_OW 248
50936: PPUSH
50937: LD_INT 0
50939: PPUSH
50940: CALL 52965 0 6
50944: ST_TO_ADDR
// if not hexes then
50945: LD_VAR 0 14
50949: NOT
50950: IFFALSE 50954
// exit ;
50952: GO 51712
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50954: LD_ADDR_VAR 0 17
50958: PUSH
50959: LD_VAR 0 5
50963: PPUSH
50964: LD_INT 22
50966: PUSH
50967: LD_VAR 0 13
50971: PPUSH
50972: CALL_OW 255
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 2
50983: PUSH
50984: LD_INT 30
50986: PUSH
50987: LD_INT 0
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 30
50996: PUSH
50997: LD_INT 1
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: LIST
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PPUSH
51013: CALL_OW 72
51017: ST_TO_ADDR
// for i = 1 to hexes do
51018: LD_ADDR_VAR 0 9
51022: PUSH
51023: DOUBLE
51024: LD_INT 1
51026: DEC
51027: ST_TO_ADDR
51028: LD_VAR 0 14
51032: PUSH
51033: FOR_TO
51034: IFFALSE 51710
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51036: LD_ADDR_VAR 0 13
51040: PUSH
51041: LD_VAR 0 14
51045: PUSH
51046: LD_VAR 0 9
51050: ARRAY
51051: PUSH
51052: LD_INT 1
51054: ARRAY
51055: PPUSH
51056: LD_VAR 0 14
51060: PUSH
51061: LD_VAR 0 9
51065: ARRAY
51066: PUSH
51067: LD_INT 2
51069: ARRAY
51070: PPUSH
51071: CALL_OW 428
51075: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51076: LD_VAR 0 14
51080: PUSH
51081: LD_VAR 0 9
51085: ARRAY
51086: PUSH
51087: LD_INT 1
51089: ARRAY
51090: PPUSH
51091: LD_VAR 0 14
51095: PUSH
51096: LD_VAR 0 9
51100: ARRAY
51101: PUSH
51102: LD_INT 2
51104: ARRAY
51105: PPUSH
51106: CALL_OW 351
51110: PUSH
51111: LD_VAR 0 14
51115: PUSH
51116: LD_VAR 0 9
51120: ARRAY
51121: PUSH
51122: LD_INT 1
51124: ARRAY
51125: PPUSH
51126: LD_VAR 0 14
51130: PUSH
51131: LD_VAR 0 9
51135: ARRAY
51136: PUSH
51137: LD_INT 2
51139: ARRAY
51140: PPUSH
51141: CALL_OW 488
51145: NOT
51146: OR
51147: PUSH
51148: LD_VAR 0 13
51152: PPUSH
51153: CALL_OW 247
51157: PUSH
51158: LD_INT 3
51160: EQUAL
51161: OR
51162: IFFALSE 51168
// exit ;
51164: POP
51165: POP
51166: GO 51712
// if not tmp then
51168: LD_VAR 0 13
51172: NOT
51173: IFFALSE 51177
// continue ;
51175: GO 51033
// result := true ;
51177: LD_ADDR_VAR 0 8
51181: PUSH
51182: LD_INT 1
51184: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51185: LD_VAR 0 6
51189: PUSH
51190: LD_VAR 0 13
51194: PPUSH
51195: CALL_OW 247
51199: PUSH
51200: LD_INT 2
51202: EQUAL
51203: AND
51204: PUSH
51205: LD_VAR 0 13
51209: PPUSH
51210: CALL_OW 263
51214: PUSH
51215: LD_INT 1
51217: EQUAL
51218: AND
51219: IFFALSE 51383
// begin if IsDrivenBy ( tmp ) then
51221: LD_VAR 0 13
51225: PPUSH
51226: CALL_OW 311
51230: IFFALSE 51234
// continue ;
51232: GO 51033
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51234: LD_VAR 0 6
51238: PPUSH
51239: LD_INT 3
51241: PUSH
51242: LD_INT 60
51244: PUSH
51245: EMPTY
51246: LIST
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 3
51254: PUSH
51255: LD_INT 55
51257: PUSH
51258: EMPTY
51259: LIST
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PPUSH
51269: CALL_OW 72
51273: IFFALSE 51381
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51275: LD_ADDR_VAR 0 18
51279: PUSH
51280: LD_VAR 0 6
51284: PPUSH
51285: LD_INT 3
51287: PUSH
51288: LD_INT 60
51290: PUSH
51291: EMPTY
51292: LIST
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 3
51300: PUSH
51301: LD_INT 55
51303: PUSH
51304: EMPTY
51305: LIST
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PPUSH
51315: CALL_OW 72
51319: PUSH
51320: LD_INT 1
51322: ARRAY
51323: ST_TO_ADDR
// if IsInUnit ( driver ) then
51324: LD_VAR 0 18
51328: PPUSH
51329: CALL_OW 310
51333: IFFALSE 51344
// ComExit ( driver ) ;
51335: LD_VAR 0 18
51339: PPUSH
51340: CALL 76746 0 1
// AddComEnterUnit ( driver , tmp ) ;
51344: LD_VAR 0 18
51348: PPUSH
51349: LD_VAR 0 13
51353: PPUSH
51354: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51358: LD_VAR 0 18
51362: PPUSH
51363: LD_VAR 0 7
51367: PPUSH
51368: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51372: LD_VAR 0 18
51376: PPUSH
51377: CALL_OW 181
// end ; continue ;
51381: GO 51033
// end ; if not cleaners or not tmp in cleaners then
51383: LD_VAR 0 6
51387: NOT
51388: PUSH
51389: LD_VAR 0 13
51393: PUSH
51394: LD_VAR 0 6
51398: IN
51399: NOT
51400: OR
51401: IFFALSE 51708
// begin if dep then
51403: LD_VAR 0 17
51407: IFFALSE 51543
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51409: LD_ADDR_VAR 0 16
51413: PUSH
51414: LD_VAR 0 17
51418: PUSH
51419: LD_INT 1
51421: ARRAY
51422: PPUSH
51423: CALL_OW 250
51427: PPUSH
51428: LD_VAR 0 17
51432: PUSH
51433: LD_INT 1
51435: ARRAY
51436: PPUSH
51437: CALL_OW 254
51441: PPUSH
51442: LD_INT 5
51444: PPUSH
51445: CALL_OW 272
51449: PUSH
51450: LD_VAR 0 17
51454: PUSH
51455: LD_INT 1
51457: ARRAY
51458: PPUSH
51459: CALL_OW 251
51463: PPUSH
51464: LD_VAR 0 17
51468: PUSH
51469: LD_INT 1
51471: ARRAY
51472: PPUSH
51473: CALL_OW 254
51477: PPUSH
51478: LD_INT 5
51480: PPUSH
51481: CALL_OW 273
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51490: LD_VAR 0 16
51494: PUSH
51495: LD_INT 1
51497: ARRAY
51498: PPUSH
51499: LD_VAR 0 16
51503: PUSH
51504: LD_INT 2
51506: ARRAY
51507: PPUSH
51508: CALL_OW 488
51512: IFFALSE 51543
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51514: LD_VAR 0 13
51518: PPUSH
51519: LD_VAR 0 16
51523: PUSH
51524: LD_INT 1
51526: ARRAY
51527: PPUSH
51528: LD_VAR 0 16
51532: PUSH
51533: LD_INT 2
51535: ARRAY
51536: PPUSH
51537: CALL_OW 111
// continue ;
51541: GO 51033
// end ; end ; r := GetDir ( tmp ) ;
51543: LD_ADDR_VAR 0 15
51547: PUSH
51548: LD_VAR 0 13
51552: PPUSH
51553: CALL_OW 254
51557: ST_TO_ADDR
// if r = 5 then
51558: LD_VAR 0 15
51562: PUSH
51563: LD_INT 5
51565: EQUAL
51566: IFFALSE 51576
// r := 0 ;
51568: LD_ADDR_VAR 0 15
51572: PUSH
51573: LD_INT 0
51575: ST_TO_ADDR
// for j = r to 5 do
51576: LD_ADDR_VAR 0 10
51580: PUSH
51581: DOUBLE
51582: LD_VAR 0 15
51586: DEC
51587: ST_TO_ADDR
51588: LD_INT 5
51590: PUSH
51591: FOR_TO
51592: IFFALSE 51706
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51594: LD_ADDR_VAR 0 11
51598: PUSH
51599: LD_VAR 0 13
51603: PPUSH
51604: CALL_OW 250
51608: PPUSH
51609: LD_VAR 0 10
51613: PPUSH
51614: LD_INT 2
51616: PPUSH
51617: CALL_OW 272
51621: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51622: LD_ADDR_VAR 0 12
51626: PUSH
51627: LD_VAR 0 13
51631: PPUSH
51632: CALL_OW 251
51636: PPUSH
51637: LD_VAR 0 10
51641: PPUSH
51642: LD_INT 2
51644: PPUSH
51645: CALL_OW 273
51649: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51650: LD_VAR 0 11
51654: PPUSH
51655: LD_VAR 0 12
51659: PPUSH
51660: CALL_OW 488
51664: PUSH
51665: LD_VAR 0 11
51669: PPUSH
51670: LD_VAR 0 12
51674: PPUSH
51675: CALL_OW 428
51679: NOT
51680: AND
51681: IFFALSE 51704
// begin ComMoveXY ( tmp , _x , _y ) ;
51683: LD_VAR 0 13
51687: PPUSH
51688: LD_VAR 0 11
51692: PPUSH
51693: LD_VAR 0 12
51697: PPUSH
51698: CALL_OW 111
// break ;
51702: GO 51706
// end ; end ;
51704: GO 51591
51706: POP
51707: POP
// end ; end ;
51708: GO 51033
51710: POP
51711: POP
// end ;
51712: LD_VAR 0 8
51716: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51717: LD_INT 0
51719: PPUSH
// result := true ;
51720: LD_ADDR_VAR 0 3
51724: PUSH
51725: LD_INT 1
51727: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51728: LD_VAR 0 2
51732: PUSH
51733: LD_INT 24
51735: DOUBLE
51736: EQUAL
51737: IFTRUE 51747
51739: LD_INT 33
51741: DOUBLE
51742: EQUAL
51743: IFTRUE 51747
51745: GO 51772
51747: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51748: LD_ADDR_VAR 0 3
51752: PUSH
51753: LD_INT 32
51755: PPUSH
51756: LD_VAR 0 1
51760: PPUSH
51761: CALL_OW 321
51765: PUSH
51766: LD_INT 2
51768: EQUAL
51769: ST_TO_ADDR
51770: GO 52088
51772: LD_INT 20
51774: DOUBLE
51775: EQUAL
51776: IFTRUE 51780
51778: GO 51805
51780: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51781: LD_ADDR_VAR 0 3
51785: PUSH
51786: LD_INT 6
51788: PPUSH
51789: LD_VAR 0 1
51793: PPUSH
51794: CALL_OW 321
51798: PUSH
51799: LD_INT 2
51801: EQUAL
51802: ST_TO_ADDR
51803: GO 52088
51805: LD_INT 22
51807: DOUBLE
51808: EQUAL
51809: IFTRUE 51819
51811: LD_INT 36
51813: DOUBLE
51814: EQUAL
51815: IFTRUE 51819
51817: GO 51844
51819: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51820: LD_ADDR_VAR 0 3
51824: PUSH
51825: LD_INT 15
51827: PPUSH
51828: LD_VAR 0 1
51832: PPUSH
51833: CALL_OW 321
51837: PUSH
51838: LD_INT 2
51840: EQUAL
51841: ST_TO_ADDR
51842: GO 52088
51844: LD_INT 30
51846: DOUBLE
51847: EQUAL
51848: IFTRUE 51852
51850: GO 51877
51852: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51853: LD_ADDR_VAR 0 3
51857: PUSH
51858: LD_INT 20
51860: PPUSH
51861: LD_VAR 0 1
51865: PPUSH
51866: CALL_OW 321
51870: PUSH
51871: LD_INT 2
51873: EQUAL
51874: ST_TO_ADDR
51875: GO 52088
51877: LD_INT 28
51879: DOUBLE
51880: EQUAL
51881: IFTRUE 51891
51883: LD_INT 21
51885: DOUBLE
51886: EQUAL
51887: IFTRUE 51891
51889: GO 51916
51891: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51892: LD_ADDR_VAR 0 3
51896: PUSH
51897: LD_INT 21
51899: PPUSH
51900: LD_VAR 0 1
51904: PPUSH
51905: CALL_OW 321
51909: PUSH
51910: LD_INT 2
51912: EQUAL
51913: ST_TO_ADDR
51914: GO 52088
51916: LD_INT 16
51918: DOUBLE
51919: EQUAL
51920: IFTRUE 51924
51922: GO 51949
51924: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51925: LD_ADDR_VAR 0 3
51929: PUSH
51930: LD_INT 84
51932: PPUSH
51933: LD_VAR 0 1
51937: PPUSH
51938: CALL_OW 321
51942: PUSH
51943: LD_INT 2
51945: EQUAL
51946: ST_TO_ADDR
51947: GO 52088
51949: LD_INT 19
51951: DOUBLE
51952: EQUAL
51953: IFTRUE 51963
51955: LD_INT 23
51957: DOUBLE
51958: EQUAL
51959: IFTRUE 51963
51961: GO 51988
51963: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51964: LD_ADDR_VAR 0 3
51968: PUSH
51969: LD_INT 83
51971: PPUSH
51972: LD_VAR 0 1
51976: PPUSH
51977: CALL_OW 321
51981: PUSH
51982: LD_INT 2
51984: EQUAL
51985: ST_TO_ADDR
51986: GO 52088
51988: LD_INT 17
51990: DOUBLE
51991: EQUAL
51992: IFTRUE 51996
51994: GO 52021
51996: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51997: LD_ADDR_VAR 0 3
52001: PUSH
52002: LD_INT 39
52004: PPUSH
52005: LD_VAR 0 1
52009: PPUSH
52010: CALL_OW 321
52014: PUSH
52015: LD_INT 2
52017: EQUAL
52018: ST_TO_ADDR
52019: GO 52088
52021: LD_INT 18
52023: DOUBLE
52024: EQUAL
52025: IFTRUE 52029
52027: GO 52054
52029: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52030: LD_ADDR_VAR 0 3
52034: PUSH
52035: LD_INT 40
52037: PPUSH
52038: LD_VAR 0 1
52042: PPUSH
52043: CALL_OW 321
52047: PUSH
52048: LD_INT 2
52050: EQUAL
52051: ST_TO_ADDR
52052: GO 52088
52054: LD_INT 27
52056: DOUBLE
52057: EQUAL
52058: IFTRUE 52062
52060: GO 52087
52062: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52063: LD_ADDR_VAR 0 3
52067: PUSH
52068: LD_INT 35
52070: PPUSH
52071: LD_VAR 0 1
52075: PPUSH
52076: CALL_OW 321
52080: PUSH
52081: LD_INT 2
52083: EQUAL
52084: ST_TO_ADDR
52085: GO 52088
52087: POP
// end ;
52088: LD_VAR 0 3
52092: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52093: LD_INT 0
52095: PPUSH
52096: PPUSH
52097: PPUSH
52098: PPUSH
52099: PPUSH
52100: PPUSH
52101: PPUSH
52102: PPUSH
52103: PPUSH
52104: PPUSH
52105: PPUSH
// result := false ;
52106: LD_ADDR_VAR 0 6
52110: PUSH
52111: LD_INT 0
52113: ST_TO_ADDR
// if btype = b_depot then
52114: LD_VAR 0 2
52118: PUSH
52119: LD_INT 0
52121: EQUAL
52122: IFFALSE 52134
// begin result := true ;
52124: LD_ADDR_VAR 0 6
52128: PUSH
52129: LD_INT 1
52131: ST_TO_ADDR
// exit ;
52132: GO 52960
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52134: LD_VAR 0 1
52138: NOT
52139: PUSH
52140: LD_VAR 0 1
52144: PPUSH
52145: CALL_OW 266
52149: PUSH
52150: LD_INT 0
52152: PUSH
52153: LD_INT 1
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: IN
52160: NOT
52161: OR
52162: PUSH
52163: LD_VAR 0 2
52167: NOT
52168: OR
52169: PUSH
52170: LD_VAR 0 5
52174: PUSH
52175: LD_INT 0
52177: PUSH
52178: LD_INT 1
52180: PUSH
52181: LD_INT 2
52183: PUSH
52184: LD_INT 3
52186: PUSH
52187: LD_INT 4
52189: PUSH
52190: LD_INT 5
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: IN
52201: NOT
52202: OR
52203: PUSH
52204: LD_VAR 0 3
52208: PPUSH
52209: LD_VAR 0 4
52213: PPUSH
52214: CALL_OW 488
52218: NOT
52219: OR
52220: IFFALSE 52224
// exit ;
52222: GO 52960
// side := GetSide ( depot ) ;
52224: LD_ADDR_VAR 0 9
52228: PUSH
52229: LD_VAR 0 1
52233: PPUSH
52234: CALL_OW 255
52238: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52239: LD_VAR 0 9
52243: PPUSH
52244: LD_VAR 0 2
52248: PPUSH
52249: CALL 51717 0 2
52253: NOT
52254: IFFALSE 52258
// exit ;
52256: GO 52960
// pom := GetBase ( depot ) ;
52258: LD_ADDR_VAR 0 10
52262: PUSH
52263: LD_VAR 0 1
52267: PPUSH
52268: CALL_OW 274
52272: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52273: LD_ADDR_VAR 0 11
52277: PUSH
52278: LD_VAR 0 2
52282: PPUSH
52283: LD_VAR 0 1
52287: PPUSH
52288: CALL_OW 248
52292: PPUSH
52293: CALL_OW 450
52297: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52298: LD_VAR 0 10
52302: PPUSH
52303: LD_INT 1
52305: PPUSH
52306: CALL_OW 275
52310: PUSH
52311: LD_VAR 0 11
52315: PUSH
52316: LD_INT 1
52318: ARRAY
52319: GREATEREQUAL
52320: PUSH
52321: LD_VAR 0 10
52325: PPUSH
52326: LD_INT 2
52328: PPUSH
52329: CALL_OW 275
52333: PUSH
52334: LD_VAR 0 11
52338: PUSH
52339: LD_INT 2
52341: ARRAY
52342: GREATEREQUAL
52343: AND
52344: PUSH
52345: LD_VAR 0 10
52349: PPUSH
52350: LD_INT 3
52352: PPUSH
52353: CALL_OW 275
52357: PUSH
52358: LD_VAR 0 11
52362: PUSH
52363: LD_INT 3
52365: ARRAY
52366: GREATEREQUAL
52367: AND
52368: NOT
52369: IFFALSE 52373
// exit ;
52371: GO 52960
// if GetBType ( depot ) = b_depot then
52373: LD_VAR 0 1
52377: PPUSH
52378: CALL_OW 266
52382: PUSH
52383: LD_INT 0
52385: EQUAL
52386: IFFALSE 52398
// dist := 28 else
52388: LD_ADDR_VAR 0 14
52392: PUSH
52393: LD_INT 28
52395: ST_TO_ADDR
52396: GO 52406
// dist := 36 ;
52398: LD_ADDR_VAR 0 14
52402: PUSH
52403: LD_INT 36
52405: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52406: LD_VAR 0 1
52410: PPUSH
52411: LD_VAR 0 3
52415: PPUSH
52416: LD_VAR 0 4
52420: PPUSH
52421: CALL_OW 297
52425: PUSH
52426: LD_VAR 0 14
52430: GREATER
52431: IFFALSE 52435
// exit ;
52433: GO 52960
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52435: LD_ADDR_VAR 0 12
52439: PUSH
52440: LD_VAR 0 2
52444: PPUSH
52445: LD_VAR 0 3
52449: PPUSH
52450: LD_VAR 0 4
52454: PPUSH
52455: LD_VAR 0 5
52459: PPUSH
52460: LD_VAR 0 1
52464: PPUSH
52465: CALL_OW 248
52469: PPUSH
52470: LD_INT 0
52472: PPUSH
52473: CALL 52965 0 6
52477: ST_TO_ADDR
// if not hexes then
52478: LD_VAR 0 12
52482: NOT
52483: IFFALSE 52487
// exit ;
52485: GO 52960
// hex := GetHexInfo ( x , y ) ;
52487: LD_ADDR_VAR 0 15
52491: PUSH
52492: LD_VAR 0 3
52496: PPUSH
52497: LD_VAR 0 4
52501: PPUSH
52502: CALL_OW 546
52506: ST_TO_ADDR
// if hex [ 1 ] then
52507: LD_VAR 0 15
52511: PUSH
52512: LD_INT 1
52514: ARRAY
52515: IFFALSE 52519
// exit ;
52517: GO 52960
// height := hex [ 2 ] ;
52519: LD_ADDR_VAR 0 13
52523: PUSH
52524: LD_VAR 0 15
52528: PUSH
52529: LD_INT 2
52531: ARRAY
52532: ST_TO_ADDR
// for i = 1 to hexes do
52533: LD_ADDR_VAR 0 7
52537: PUSH
52538: DOUBLE
52539: LD_INT 1
52541: DEC
52542: ST_TO_ADDR
52543: LD_VAR 0 12
52547: PUSH
52548: FOR_TO
52549: IFFALSE 52879
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52551: LD_VAR 0 12
52555: PUSH
52556: LD_VAR 0 7
52560: ARRAY
52561: PUSH
52562: LD_INT 1
52564: ARRAY
52565: PPUSH
52566: LD_VAR 0 12
52570: PUSH
52571: LD_VAR 0 7
52575: ARRAY
52576: PUSH
52577: LD_INT 2
52579: ARRAY
52580: PPUSH
52581: CALL_OW 488
52585: NOT
52586: PUSH
52587: LD_VAR 0 12
52591: PUSH
52592: LD_VAR 0 7
52596: ARRAY
52597: PUSH
52598: LD_INT 1
52600: ARRAY
52601: PPUSH
52602: LD_VAR 0 12
52606: PUSH
52607: LD_VAR 0 7
52611: ARRAY
52612: PUSH
52613: LD_INT 2
52615: ARRAY
52616: PPUSH
52617: CALL_OW 428
52621: PUSH
52622: LD_INT 0
52624: GREATER
52625: OR
52626: PUSH
52627: LD_VAR 0 12
52631: PUSH
52632: LD_VAR 0 7
52636: ARRAY
52637: PUSH
52638: LD_INT 1
52640: ARRAY
52641: PPUSH
52642: LD_VAR 0 12
52646: PUSH
52647: LD_VAR 0 7
52651: ARRAY
52652: PUSH
52653: LD_INT 2
52655: ARRAY
52656: PPUSH
52657: CALL_OW 351
52661: OR
52662: IFFALSE 52668
// exit ;
52664: POP
52665: POP
52666: GO 52960
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52668: LD_ADDR_VAR 0 8
52672: PUSH
52673: LD_VAR 0 12
52677: PUSH
52678: LD_VAR 0 7
52682: ARRAY
52683: PUSH
52684: LD_INT 1
52686: ARRAY
52687: PPUSH
52688: LD_VAR 0 12
52692: PUSH
52693: LD_VAR 0 7
52697: ARRAY
52698: PUSH
52699: LD_INT 2
52701: ARRAY
52702: PPUSH
52703: CALL_OW 546
52707: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52708: LD_VAR 0 8
52712: PUSH
52713: LD_INT 1
52715: ARRAY
52716: PUSH
52717: LD_VAR 0 8
52721: PUSH
52722: LD_INT 2
52724: ARRAY
52725: PUSH
52726: LD_VAR 0 13
52730: PUSH
52731: LD_INT 2
52733: PLUS
52734: GREATER
52735: OR
52736: PUSH
52737: LD_VAR 0 8
52741: PUSH
52742: LD_INT 2
52744: ARRAY
52745: PUSH
52746: LD_VAR 0 13
52750: PUSH
52751: LD_INT 2
52753: MINUS
52754: LESS
52755: OR
52756: PUSH
52757: LD_VAR 0 8
52761: PUSH
52762: LD_INT 3
52764: ARRAY
52765: PUSH
52766: LD_INT 0
52768: PUSH
52769: LD_INT 8
52771: PUSH
52772: LD_INT 9
52774: PUSH
52775: LD_INT 10
52777: PUSH
52778: LD_INT 11
52780: PUSH
52781: LD_INT 12
52783: PUSH
52784: LD_INT 13
52786: PUSH
52787: LD_INT 16
52789: PUSH
52790: LD_INT 17
52792: PUSH
52793: LD_INT 18
52795: PUSH
52796: LD_INT 19
52798: PUSH
52799: LD_INT 20
52801: PUSH
52802: LD_INT 21
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: IN
52820: NOT
52821: OR
52822: PUSH
52823: LD_VAR 0 8
52827: PUSH
52828: LD_INT 5
52830: ARRAY
52831: NOT
52832: OR
52833: PUSH
52834: LD_VAR 0 8
52838: PUSH
52839: LD_INT 6
52841: ARRAY
52842: PUSH
52843: LD_INT 1
52845: PUSH
52846: LD_INT 2
52848: PUSH
52849: LD_INT 7
52851: PUSH
52852: LD_INT 9
52854: PUSH
52855: LD_INT 10
52857: PUSH
52858: LD_INT 11
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: IN
52869: NOT
52870: OR
52871: IFFALSE 52877
// exit ;
52873: POP
52874: POP
52875: GO 52960
// end ;
52877: GO 52548
52879: POP
52880: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52881: LD_VAR 0 9
52885: PPUSH
52886: LD_VAR 0 3
52890: PPUSH
52891: LD_VAR 0 4
52895: PPUSH
52896: LD_INT 20
52898: PPUSH
52899: CALL 44883 0 4
52903: PUSH
52904: LD_INT 4
52906: ARRAY
52907: IFFALSE 52911
// exit ;
52909: GO 52960
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52911: LD_VAR 0 2
52915: PUSH
52916: LD_INT 29
52918: PUSH
52919: LD_INT 30
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: IN
52926: PUSH
52927: LD_VAR 0 3
52931: PPUSH
52932: LD_VAR 0 4
52936: PPUSH
52937: LD_VAR 0 9
52941: PPUSH
52942: CALL_OW 440
52946: NOT
52947: AND
52948: IFFALSE 52952
// exit ;
52950: GO 52960
// result := true ;
52952: LD_ADDR_VAR 0 6
52956: PUSH
52957: LD_INT 1
52959: ST_TO_ADDR
// end ;
52960: LD_VAR 0 6
52964: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52965: LD_INT 0
52967: PPUSH
52968: PPUSH
52969: PPUSH
52970: PPUSH
52971: PPUSH
52972: PPUSH
52973: PPUSH
52974: PPUSH
52975: PPUSH
52976: PPUSH
52977: PPUSH
52978: PPUSH
52979: PPUSH
52980: PPUSH
52981: PPUSH
52982: PPUSH
52983: PPUSH
52984: PPUSH
52985: PPUSH
52986: PPUSH
52987: PPUSH
52988: PPUSH
52989: PPUSH
52990: PPUSH
52991: PPUSH
52992: PPUSH
52993: PPUSH
52994: PPUSH
52995: PPUSH
52996: PPUSH
52997: PPUSH
52998: PPUSH
52999: PPUSH
53000: PPUSH
53001: PPUSH
53002: PPUSH
53003: PPUSH
53004: PPUSH
53005: PPUSH
53006: PPUSH
53007: PPUSH
53008: PPUSH
53009: PPUSH
53010: PPUSH
53011: PPUSH
53012: PPUSH
53013: PPUSH
53014: PPUSH
53015: PPUSH
53016: PPUSH
53017: PPUSH
53018: PPUSH
53019: PPUSH
53020: PPUSH
53021: PPUSH
53022: PPUSH
53023: PPUSH
53024: PPUSH
// result = [ ] ;
53025: LD_ADDR_VAR 0 7
53029: PUSH
53030: EMPTY
53031: ST_TO_ADDR
// temp_list = [ ] ;
53032: LD_ADDR_VAR 0 9
53036: PUSH
53037: EMPTY
53038: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53039: LD_VAR 0 4
53043: PUSH
53044: LD_INT 0
53046: PUSH
53047: LD_INT 1
53049: PUSH
53050: LD_INT 2
53052: PUSH
53053: LD_INT 3
53055: PUSH
53056: LD_INT 4
53058: PUSH
53059: LD_INT 5
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: IN
53070: NOT
53071: PUSH
53072: LD_VAR 0 1
53076: PUSH
53077: LD_INT 0
53079: PUSH
53080: LD_INT 1
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: IN
53087: PUSH
53088: LD_VAR 0 5
53092: PUSH
53093: LD_INT 1
53095: PUSH
53096: LD_INT 2
53098: PUSH
53099: LD_INT 3
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: LIST
53106: IN
53107: NOT
53108: AND
53109: OR
53110: IFFALSE 53114
// exit ;
53112: GO 71505
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53114: LD_VAR 0 1
53118: PUSH
53119: LD_INT 6
53121: PUSH
53122: LD_INT 7
53124: PUSH
53125: LD_INT 8
53127: PUSH
53128: LD_INT 13
53130: PUSH
53131: LD_INT 12
53133: PUSH
53134: LD_INT 15
53136: PUSH
53137: LD_INT 11
53139: PUSH
53140: LD_INT 14
53142: PUSH
53143: LD_INT 10
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: IN
53157: IFFALSE 53167
// btype = b_lab ;
53159: LD_ADDR_VAR 0 1
53163: PUSH
53164: LD_INT 6
53166: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53167: LD_VAR 0 6
53171: PUSH
53172: LD_INT 0
53174: PUSH
53175: LD_INT 1
53177: PUSH
53178: LD_INT 2
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: LIST
53185: IN
53186: NOT
53187: PUSH
53188: LD_VAR 0 1
53192: PUSH
53193: LD_INT 0
53195: PUSH
53196: LD_INT 1
53198: PUSH
53199: LD_INT 2
53201: PUSH
53202: LD_INT 3
53204: PUSH
53205: LD_INT 6
53207: PUSH
53208: LD_INT 36
53210: PUSH
53211: LD_INT 4
53213: PUSH
53214: LD_INT 5
53216: PUSH
53217: LD_INT 31
53219: PUSH
53220: LD_INT 32
53222: PUSH
53223: LD_INT 33
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: IN
53239: NOT
53240: PUSH
53241: LD_VAR 0 6
53245: PUSH
53246: LD_INT 1
53248: EQUAL
53249: AND
53250: OR
53251: PUSH
53252: LD_VAR 0 1
53256: PUSH
53257: LD_INT 2
53259: PUSH
53260: LD_INT 3
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: IN
53267: NOT
53268: PUSH
53269: LD_VAR 0 6
53273: PUSH
53274: LD_INT 2
53276: EQUAL
53277: AND
53278: OR
53279: IFFALSE 53289
// mode = 0 ;
53281: LD_ADDR_VAR 0 6
53285: PUSH
53286: LD_INT 0
53288: ST_TO_ADDR
// case mode of 0 :
53289: LD_VAR 0 6
53293: PUSH
53294: LD_INT 0
53296: DOUBLE
53297: EQUAL
53298: IFTRUE 53302
53300: GO 64755
53302: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53303: LD_ADDR_VAR 0 11
53307: PUSH
53308: LD_INT 0
53310: PUSH
53311: LD_INT 0
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 0
53320: PUSH
53321: LD_INT 1
53323: NEG
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 1
53331: PUSH
53332: LD_INT 0
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 1
53341: PUSH
53342: LD_INT 1
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 0
53351: PUSH
53352: LD_INT 1
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 1
53361: NEG
53362: PUSH
53363: LD_INT 0
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 1
53372: NEG
53373: PUSH
53374: LD_INT 1
53376: NEG
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 1
53384: NEG
53385: PUSH
53386: LD_INT 2
53388: NEG
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 0
53396: PUSH
53397: LD_INT 2
53399: NEG
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 1
53407: PUSH
53408: LD_INT 1
53410: NEG
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 1
53418: PUSH
53419: LD_INT 2
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 0
53428: PUSH
53429: LD_INT 2
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 1
53438: NEG
53439: PUSH
53440: LD_INT 1
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 1
53449: PUSH
53450: LD_INT 3
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 0
53459: PUSH
53460: LD_INT 3
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 1
53469: NEG
53470: PUSH
53471: LD_INT 2
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53496: LD_ADDR_VAR 0 12
53500: PUSH
53501: LD_INT 0
53503: PUSH
53504: LD_INT 0
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 0
53513: PUSH
53514: LD_INT 1
53516: NEG
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 1
53524: PUSH
53525: LD_INT 0
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 1
53534: PUSH
53535: LD_INT 1
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 0
53544: PUSH
53545: LD_INT 1
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 1
53554: NEG
53555: PUSH
53556: LD_INT 0
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 1
53565: NEG
53566: PUSH
53567: LD_INT 1
53569: NEG
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 1
53577: PUSH
53578: LD_INT 1
53580: NEG
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 2
53588: PUSH
53589: LD_INT 0
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 2
53598: PUSH
53599: LD_INT 1
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 1
53608: NEG
53609: PUSH
53610: LD_INT 1
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 2
53619: NEG
53620: PUSH
53621: LD_INT 0
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 2
53630: NEG
53631: PUSH
53632: LD_INT 1
53634: NEG
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 2
53642: NEG
53643: PUSH
53644: LD_INT 1
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 3
53653: NEG
53654: PUSH
53655: LD_INT 0
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 3
53664: NEG
53665: PUSH
53666: LD_INT 1
53668: NEG
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53692: LD_ADDR_VAR 0 13
53696: PUSH
53697: LD_INT 0
53699: PUSH
53700: LD_INT 0
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 0
53709: PUSH
53710: LD_INT 1
53712: NEG
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 1
53720: PUSH
53721: LD_INT 0
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 1
53730: PUSH
53731: LD_INT 1
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 0
53740: PUSH
53741: LD_INT 1
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 1
53750: NEG
53751: PUSH
53752: LD_INT 0
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 1
53761: NEG
53762: PUSH
53763: LD_INT 1
53765: NEG
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 1
53773: NEG
53774: PUSH
53775: LD_INT 2
53777: NEG
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 2
53785: PUSH
53786: LD_INT 1
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 2
53795: PUSH
53796: LD_INT 2
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 1
53805: PUSH
53806: LD_INT 2
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 2
53815: NEG
53816: PUSH
53817: LD_INT 1
53819: NEG
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 2
53827: NEG
53828: PUSH
53829: LD_INT 2
53831: NEG
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 2
53839: NEG
53840: PUSH
53841: LD_INT 3
53843: NEG
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 3
53851: NEG
53852: PUSH
53853: LD_INT 2
53855: NEG
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 3
53863: NEG
53864: PUSH
53865: LD_INT 3
53867: NEG
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53891: LD_ADDR_VAR 0 14
53895: PUSH
53896: LD_INT 0
53898: PUSH
53899: LD_INT 0
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 0
53908: PUSH
53909: LD_INT 1
53911: NEG
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 1
53919: PUSH
53920: LD_INT 0
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 1
53929: PUSH
53930: LD_INT 1
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 0
53939: PUSH
53940: LD_INT 1
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 1
53949: NEG
53950: PUSH
53951: LD_INT 0
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 1
53960: NEG
53961: PUSH
53962: LD_INT 1
53964: NEG
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 1
53972: NEG
53973: PUSH
53974: LD_INT 2
53976: NEG
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 0
53984: PUSH
53985: LD_INT 2
53987: NEG
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 1
53995: PUSH
53996: LD_INT 1
53998: NEG
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 1
54006: PUSH
54007: LD_INT 2
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 0
54016: PUSH
54017: LD_INT 2
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 1
54026: NEG
54027: PUSH
54028: LD_INT 1
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 1
54037: NEG
54038: PUSH
54039: LD_INT 3
54041: NEG
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 0
54049: PUSH
54050: LD_INT 3
54052: NEG
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 1
54060: PUSH
54061: LD_INT 2
54063: NEG
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54087: LD_ADDR_VAR 0 15
54091: PUSH
54092: LD_INT 0
54094: PUSH
54095: LD_INT 0
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 0
54104: PUSH
54105: LD_INT 1
54107: NEG
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 1
54115: PUSH
54116: LD_INT 0
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 1
54125: PUSH
54126: LD_INT 1
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 0
54135: PUSH
54136: LD_INT 1
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 1
54145: NEG
54146: PUSH
54147: LD_INT 0
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 1
54156: NEG
54157: PUSH
54158: LD_INT 1
54160: NEG
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 1
54168: PUSH
54169: LD_INT 1
54171: NEG
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 2
54179: PUSH
54180: LD_INT 0
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 2
54189: PUSH
54190: LD_INT 1
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 1
54199: NEG
54200: PUSH
54201: LD_INT 1
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 2
54210: NEG
54211: PUSH
54212: LD_INT 0
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 2
54221: NEG
54222: PUSH
54223: LD_INT 1
54225: NEG
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 2
54233: PUSH
54234: LD_INT 1
54236: NEG
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 3
54244: PUSH
54245: LD_INT 0
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 3
54254: PUSH
54255: LD_INT 1
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54280: LD_ADDR_VAR 0 16
54284: PUSH
54285: LD_INT 0
54287: PUSH
54288: LD_INT 0
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 0
54297: PUSH
54298: LD_INT 1
54300: NEG
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 1
54308: PUSH
54309: LD_INT 0
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 1
54318: PUSH
54319: LD_INT 1
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 0
54328: PUSH
54329: LD_INT 1
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 1
54338: NEG
54339: PUSH
54340: LD_INT 0
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 1
54349: NEG
54350: PUSH
54351: LD_INT 1
54353: NEG
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 1
54361: NEG
54362: PUSH
54363: LD_INT 2
54365: NEG
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 2
54373: PUSH
54374: LD_INT 1
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 2
54383: PUSH
54384: LD_INT 2
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 1
54393: PUSH
54394: LD_INT 2
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 2
54403: NEG
54404: PUSH
54405: LD_INT 1
54407: NEG
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 2
54415: NEG
54416: PUSH
54417: LD_INT 2
54419: NEG
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 3
54427: PUSH
54428: LD_INT 2
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 3
54437: PUSH
54438: LD_INT 3
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 2
54447: PUSH
54448: LD_INT 3
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54473: LD_ADDR_VAR 0 17
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: LD_INT 0
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 0
54490: PUSH
54491: LD_INT 1
54493: NEG
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 1
54501: PUSH
54502: LD_INT 0
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 1
54511: PUSH
54512: LD_INT 1
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 0
54521: PUSH
54522: LD_INT 1
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 1
54531: NEG
54532: PUSH
54533: LD_INT 0
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 1
54542: NEG
54543: PUSH
54544: LD_INT 1
54546: NEG
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 1
54554: NEG
54555: PUSH
54556: LD_INT 2
54558: NEG
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 0
54566: PUSH
54567: LD_INT 2
54569: NEG
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 1
54577: PUSH
54578: LD_INT 1
54580: NEG
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 2
54588: PUSH
54589: LD_INT 0
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 2
54598: PUSH
54599: LD_INT 1
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 2
54608: PUSH
54609: LD_INT 2
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 1
54618: PUSH
54619: LD_INT 2
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 0
54628: PUSH
54629: LD_INT 2
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 1
54638: NEG
54639: PUSH
54640: LD_INT 1
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 2
54649: NEG
54650: PUSH
54651: LD_INT 0
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 2
54660: NEG
54661: PUSH
54662: LD_INT 1
54664: NEG
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 2
54672: NEG
54673: PUSH
54674: LD_INT 2
54676: NEG
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54703: LD_ADDR_VAR 0 18
54707: PUSH
54708: LD_INT 0
54710: PUSH
54711: LD_INT 0
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 0
54720: PUSH
54721: LD_INT 1
54723: NEG
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 1
54731: PUSH
54732: LD_INT 0
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 1
54741: PUSH
54742: LD_INT 1
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 0
54751: PUSH
54752: LD_INT 1
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 1
54761: NEG
54762: PUSH
54763: LD_INT 0
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: LD_INT 1
54776: NEG
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 1
54784: NEG
54785: PUSH
54786: LD_INT 2
54788: NEG
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 0
54796: PUSH
54797: LD_INT 2
54799: NEG
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 1
54807: PUSH
54808: LD_INT 1
54810: NEG
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 2
54818: PUSH
54819: LD_INT 0
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 2
54828: PUSH
54829: LD_INT 1
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 2
54838: PUSH
54839: LD_INT 2
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 1
54848: PUSH
54849: LD_INT 2
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 0
54858: PUSH
54859: LD_INT 2
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 1
54868: NEG
54869: PUSH
54870: LD_INT 1
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 2
54879: NEG
54880: PUSH
54881: LD_INT 0
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 2
54890: NEG
54891: PUSH
54892: LD_INT 1
54894: NEG
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 2
54902: NEG
54903: PUSH
54904: LD_INT 2
54906: NEG
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54933: LD_ADDR_VAR 0 19
54937: PUSH
54938: LD_INT 0
54940: PUSH
54941: LD_INT 0
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 0
54950: PUSH
54951: LD_INT 1
54953: NEG
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 1
54961: PUSH
54962: LD_INT 0
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 1
54971: PUSH
54972: LD_INT 1
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 0
54981: PUSH
54982: LD_INT 1
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 1
54991: NEG
54992: PUSH
54993: LD_INT 0
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 1
55002: NEG
55003: PUSH
55004: LD_INT 1
55006: NEG
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 1
55014: NEG
55015: PUSH
55016: LD_INT 2
55018: NEG
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 0
55026: PUSH
55027: LD_INT 2
55029: NEG
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 1
55037: PUSH
55038: LD_INT 1
55040: NEG
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 2
55048: PUSH
55049: LD_INT 0
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 2
55058: PUSH
55059: LD_INT 1
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 2
55068: PUSH
55069: LD_INT 2
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 1
55078: PUSH
55079: LD_INT 2
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 0
55088: PUSH
55089: LD_INT 2
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 1
55098: NEG
55099: PUSH
55100: LD_INT 1
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 2
55109: NEG
55110: PUSH
55111: LD_INT 0
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 2
55120: NEG
55121: PUSH
55122: LD_INT 1
55124: NEG
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 2
55132: NEG
55133: PUSH
55134: LD_INT 2
55136: NEG
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55163: LD_ADDR_VAR 0 20
55167: PUSH
55168: LD_INT 0
55170: PUSH
55171: LD_INT 0
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: LD_INT 1
55183: NEG
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 1
55191: PUSH
55192: LD_INT 0
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 1
55201: PUSH
55202: LD_INT 1
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 0
55211: PUSH
55212: LD_INT 1
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 1
55221: NEG
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 1
55232: NEG
55233: PUSH
55234: LD_INT 1
55236: NEG
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 1
55244: NEG
55245: PUSH
55246: LD_INT 2
55248: NEG
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: LD_INT 2
55259: NEG
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 1
55267: PUSH
55268: LD_INT 1
55270: NEG
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 2
55278: PUSH
55279: LD_INT 0
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 2
55288: PUSH
55289: LD_INT 1
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 2
55298: PUSH
55299: LD_INT 2
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 1
55308: PUSH
55309: LD_INT 2
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 0
55318: PUSH
55319: LD_INT 2
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 1
55328: NEG
55329: PUSH
55330: LD_INT 1
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 2
55339: NEG
55340: PUSH
55341: LD_INT 0
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 2
55350: NEG
55351: PUSH
55352: LD_INT 1
55354: NEG
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 2
55362: NEG
55363: PUSH
55364: LD_INT 2
55366: NEG
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55393: LD_ADDR_VAR 0 21
55397: PUSH
55398: LD_INT 0
55400: PUSH
55401: LD_INT 0
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 0
55410: PUSH
55411: LD_INT 1
55413: NEG
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 1
55421: PUSH
55422: LD_INT 0
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 1
55431: PUSH
55432: LD_INT 1
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 0
55441: PUSH
55442: LD_INT 1
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 1
55451: NEG
55452: PUSH
55453: LD_INT 0
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 1
55462: NEG
55463: PUSH
55464: LD_INT 1
55466: NEG
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 1
55474: NEG
55475: PUSH
55476: LD_INT 2
55478: NEG
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: LD_INT 2
55489: NEG
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 1
55497: PUSH
55498: LD_INT 1
55500: NEG
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 2
55508: PUSH
55509: LD_INT 0
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 2
55518: PUSH
55519: LD_INT 1
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 2
55528: PUSH
55529: LD_INT 2
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 1
55538: PUSH
55539: LD_INT 2
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 0
55548: PUSH
55549: LD_INT 2
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 1
55558: NEG
55559: PUSH
55560: LD_INT 1
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 2
55569: NEG
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 2
55580: NEG
55581: PUSH
55582: LD_INT 1
55584: NEG
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 2
55592: NEG
55593: PUSH
55594: LD_INT 2
55596: NEG
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55623: LD_ADDR_VAR 0 22
55627: PUSH
55628: LD_INT 0
55630: PUSH
55631: LD_INT 0
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 0
55640: PUSH
55641: LD_INT 1
55643: NEG
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 1
55651: PUSH
55652: LD_INT 0
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 1
55661: PUSH
55662: LD_INT 1
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 0
55671: PUSH
55672: LD_INT 1
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 1
55681: NEG
55682: PUSH
55683: LD_INT 0
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 1
55692: NEG
55693: PUSH
55694: LD_INT 1
55696: NEG
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 1
55704: NEG
55705: PUSH
55706: LD_INT 2
55708: NEG
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 0
55716: PUSH
55717: LD_INT 2
55719: NEG
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 1
55727: PUSH
55728: LD_INT 1
55730: NEG
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 2
55738: PUSH
55739: LD_INT 0
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 2
55748: PUSH
55749: LD_INT 1
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 2
55758: PUSH
55759: LD_INT 2
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 1
55768: PUSH
55769: LD_INT 2
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 0
55778: PUSH
55779: LD_INT 2
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 1
55788: NEG
55789: PUSH
55790: LD_INT 1
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 2
55799: NEG
55800: PUSH
55801: LD_INT 0
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 2
55810: NEG
55811: PUSH
55812: LD_INT 1
55814: NEG
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 2
55822: NEG
55823: PUSH
55824: LD_INT 2
55826: NEG
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55853: LD_ADDR_VAR 0 23
55857: PUSH
55858: LD_INT 0
55860: PUSH
55861: LD_INT 0
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 0
55870: PUSH
55871: LD_INT 1
55873: NEG
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 1
55881: PUSH
55882: LD_INT 0
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 1
55891: PUSH
55892: LD_INT 1
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 0
55901: PUSH
55902: LD_INT 1
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 1
55911: NEG
55912: PUSH
55913: LD_INT 0
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 1
55922: NEG
55923: PUSH
55924: LD_INT 1
55926: NEG
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 1
55934: NEG
55935: PUSH
55936: LD_INT 2
55938: NEG
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 0
55946: PUSH
55947: LD_INT 2
55949: NEG
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 1
55957: PUSH
55958: LD_INT 1
55960: NEG
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 2
55968: PUSH
55969: LD_INT 0
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 2
55978: PUSH
55979: LD_INT 1
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 2
55988: PUSH
55989: LD_INT 2
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 1
55998: PUSH
55999: LD_INT 2
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 0
56008: PUSH
56009: LD_INT 2
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 1
56018: NEG
56019: PUSH
56020: LD_INT 1
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 2
56029: NEG
56030: PUSH
56031: LD_INT 0
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 2
56040: NEG
56041: PUSH
56042: LD_INT 1
56044: NEG
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 2
56052: NEG
56053: PUSH
56054: LD_INT 2
56056: NEG
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 2
56064: NEG
56065: PUSH
56066: LD_INT 3
56068: NEG
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 1
56076: NEG
56077: PUSH
56078: LD_INT 3
56080: NEG
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 1
56088: PUSH
56089: LD_INT 2
56091: NEG
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 2
56099: PUSH
56100: LD_INT 1
56102: NEG
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56133: LD_ADDR_VAR 0 24
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: LD_INT 0
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 0
56150: PUSH
56151: LD_INT 1
56153: NEG
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 1
56161: PUSH
56162: LD_INT 0
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 1
56171: PUSH
56172: LD_INT 1
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 0
56181: PUSH
56182: LD_INT 1
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 1
56191: NEG
56192: PUSH
56193: LD_INT 0
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 1
56202: NEG
56203: PUSH
56204: LD_INT 1
56206: NEG
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 1
56214: NEG
56215: PUSH
56216: LD_INT 2
56218: NEG
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 0
56226: PUSH
56227: LD_INT 2
56229: NEG
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 1
56237: PUSH
56238: LD_INT 1
56240: NEG
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 2
56248: PUSH
56249: LD_INT 0
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 2
56258: PUSH
56259: LD_INT 1
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 2
56268: PUSH
56269: LD_INT 2
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 1
56278: PUSH
56279: LD_INT 2
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 0
56288: PUSH
56289: LD_INT 2
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 1
56298: NEG
56299: PUSH
56300: LD_INT 1
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 2
56309: NEG
56310: PUSH
56311: LD_INT 0
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 2
56320: NEG
56321: PUSH
56322: LD_INT 1
56324: NEG
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 2
56332: NEG
56333: PUSH
56334: LD_INT 2
56336: NEG
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 1
56344: PUSH
56345: LD_INT 2
56347: NEG
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 2
56355: PUSH
56356: LD_INT 1
56358: NEG
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 3
56366: PUSH
56367: LD_INT 1
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 3
56376: PUSH
56377: LD_INT 2
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56409: LD_ADDR_VAR 0 25
56413: PUSH
56414: LD_INT 0
56416: PUSH
56417: LD_INT 0
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 0
56426: PUSH
56427: LD_INT 1
56429: NEG
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 1
56437: PUSH
56438: LD_INT 0
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 1
56447: PUSH
56448: LD_INT 1
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: LD_INT 1
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 1
56467: NEG
56468: PUSH
56469: LD_INT 0
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 1
56478: NEG
56479: PUSH
56480: LD_INT 1
56482: NEG
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 1
56490: NEG
56491: PUSH
56492: LD_INT 2
56494: NEG
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 0
56502: PUSH
56503: LD_INT 2
56505: NEG
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 1
56513: PUSH
56514: LD_INT 1
56516: NEG
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 2
56524: PUSH
56525: LD_INT 0
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 2
56534: PUSH
56535: LD_INT 1
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 2
56544: PUSH
56545: LD_INT 2
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 1
56554: PUSH
56555: LD_INT 2
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 0
56564: PUSH
56565: LD_INT 2
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 1
56574: NEG
56575: PUSH
56576: LD_INT 1
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 2
56585: NEG
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 2
56596: NEG
56597: PUSH
56598: LD_INT 1
56600: NEG
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 2
56608: NEG
56609: PUSH
56610: LD_INT 2
56612: NEG
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 3
56620: PUSH
56621: LD_INT 1
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 3
56630: PUSH
56631: LD_INT 2
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 2
56640: PUSH
56641: LD_INT 3
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 1
56650: PUSH
56651: LD_INT 3
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56683: LD_ADDR_VAR 0 26
56687: PUSH
56688: LD_INT 0
56690: PUSH
56691: LD_INT 0
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 0
56700: PUSH
56701: LD_INT 1
56703: NEG
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 1
56711: PUSH
56712: LD_INT 0
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 1
56721: PUSH
56722: LD_INT 1
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 0
56731: PUSH
56732: LD_INT 1
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 1
56741: NEG
56742: PUSH
56743: LD_INT 0
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 1
56752: NEG
56753: PUSH
56754: LD_INT 1
56756: NEG
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 1
56764: NEG
56765: PUSH
56766: LD_INT 2
56768: NEG
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 0
56776: PUSH
56777: LD_INT 2
56779: NEG
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 1
56787: PUSH
56788: LD_INT 1
56790: NEG
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 2
56798: PUSH
56799: LD_INT 0
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 2
56808: PUSH
56809: LD_INT 1
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 2
56818: PUSH
56819: LD_INT 2
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 1
56828: PUSH
56829: LD_INT 2
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 0
56838: PUSH
56839: LD_INT 2
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 1
56848: NEG
56849: PUSH
56850: LD_INT 1
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 2
56859: NEG
56860: PUSH
56861: LD_INT 0
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 2
56870: NEG
56871: PUSH
56872: LD_INT 1
56874: NEG
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 2
56882: NEG
56883: PUSH
56884: LD_INT 2
56886: NEG
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 2
56894: PUSH
56895: LD_INT 3
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 1
56904: PUSH
56905: LD_INT 3
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 1
56914: NEG
56915: PUSH
56916: LD_INT 2
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 2
56925: NEG
56926: PUSH
56927: LD_INT 1
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56959: LD_ADDR_VAR 0 27
56963: PUSH
56964: LD_INT 0
56966: PUSH
56967: LD_INT 0
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 0
56976: PUSH
56977: LD_INT 1
56979: NEG
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 1
56987: PUSH
56988: LD_INT 0
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 1
56997: PUSH
56998: LD_INT 1
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 0
57007: PUSH
57008: LD_INT 1
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 1
57017: NEG
57018: PUSH
57019: LD_INT 0
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 1
57028: NEG
57029: PUSH
57030: LD_INT 1
57032: NEG
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 1
57040: NEG
57041: PUSH
57042: LD_INT 2
57044: NEG
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 0
57052: PUSH
57053: LD_INT 2
57055: NEG
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 1
57063: PUSH
57064: LD_INT 1
57066: NEG
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 2
57074: PUSH
57075: LD_INT 0
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 2
57084: PUSH
57085: LD_INT 1
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 2
57094: PUSH
57095: LD_INT 2
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 1
57104: PUSH
57105: LD_INT 2
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 0
57114: PUSH
57115: LD_INT 2
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 1
57124: NEG
57125: PUSH
57126: LD_INT 1
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 2
57135: NEG
57136: PUSH
57137: LD_INT 0
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 2
57146: NEG
57147: PUSH
57148: LD_INT 1
57150: NEG
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 2
57158: NEG
57159: PUSH
57160: LD_INT 2
57162: NEG
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 1
57170: NEG
57171: PUSH
57172: LD_INT 2
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 2
57181: NEG
57182: PUSH
57183: LD_INT 1
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 3
57192: NEG
57193: PUSH
57194: LD_INT 1
57196: NEG
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 3
57204: NEG
57205: PUSH
57206: LD_INT 2
57208: NEG
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57239: LD_ADDR_VAR 0 28
57243: PUSH
57244: LD_INT 0
57246: PUSH
57247: LD_INT 0
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 0
57256: PUSH
57257: LD_INT 1
57259: NEG
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 1
57267: PUSH
57268: LD_INT 0
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 1
57277: PUSH
57278: LD_INT 1
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 0
57287: PUSH
57288: LD_INT 1
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 1
57297: NEG
57298: PUSH
57299: LD_INT 0
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 1
57308: NEG
57309: PUSH
57310: LD_INT 1
57312: NEG
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 1
57320: NEG
57321: PUSH
57322: LD_INT 2
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 0
57332: PUSH
57333: LD_INT 2
57335: NEG
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 1
57343: PUSH
57344: LD_INT 1
57346: NEG
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 2
57354: PUSH
57355: LD_INT 0
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 2
57364: PUSH
57365: LD_INT 1
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 2
57374: PUSH
57375: LD_INT 2
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 1
57384: PUSH
57385: LD_INT 2
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 0
57394: PUSH
57395: LD_INT 2
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 1
57404: NEG
57405: PUSH
57406: LD_INT 1
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 2
57415: NEG
57416: PUSH
57417: LD_INT 0
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 2
57426: NEG
57427: PUSH
57428: LD_INT 1
57430: NEG
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 2
57438: NEG
57439: PUSH
57440: LD_INT 2
57442: NEG
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 2
57450: NEG
57451: PUSH
57452: LD_INT 3
57454: NEG
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 1
57462: NEG
57463: PUSH
57464: LD_INT 3
57466: NEG
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 3
57474: NEG
57475: PUSH
57476: LD_INT 1
57478: NEG
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 3
57486: NEG
57487: PUSH
57488: LD_INT 2
57490: NEG
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57521: LD_ADDR_VAR 0 29
57525: PUSH
57526: LD_INT 0
57528: PUSH
57529: LD_INT 0
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 0
57538: PUSH
57539: LD_INT 1
57541: NEG
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 1
57549: PUSH
57550: LD_INT 0
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 1
57559: PUSH
57560: LD_INT 1
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 0
57569: PUSH
57570: LD_INT 1
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 1
57579: NEG
57580: PUSH
57581: LD_INT 0
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 1
57590: NEG
57591: PUSH
57592: LD_INT 1
57594: NEG
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 1
57602: NEG
57603: PUSH
57604: LD_INT 2
57606: NEG
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 0
57614: PUSH
57615: LD_INT 2
57617: NEG
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 1
57625: PUSH
57626: LD_INT 1
57628: NEG
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 2
57636: PUSH
57637: LD_INT 0
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 2
57646: PUSH
57647: LD_INT 1
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 1
57656: PUSH
57657: LD_INT 2
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 0
57666: PUSH
57667: LD_INT 2
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 1
57676: NEG
57677: PUSH
57678: LD_INT 1
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 2
57687: NEG
57688: PUSH
57689: LD_INT 1
57691: NEG
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 2
57699: NEG
57700: PUSH
57701: LD_INT 2
57703: NEG
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 2
57711: NEG
57712: PUSH
57713: LD_INT 3
57715: NEG
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 2
57723: PUSH
57724: LD_INT 1
57726: NEG
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 3
57734: PUSH
57735: LD_INT 1
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 1
57744: PUSH
57745: LD_INT 3
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 1
57754: NEG
57755: PUSH
57756: LD_INT 2
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 3
57765: NEG
57766: PUSH
57767: LD_INT 2
57769: NEG
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57800: LD_ADDR_VAR 0 30
57804: PUSH
57805: LD_INT 0
57807: PUSH
57808: LD_INT 0
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 0
57817: PUSH
57818: LD_INT 1
57820: NEG
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 1
57828: PUSH
57829: LD_INT 0
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 1
57838: PUSH
57839: LD_INT 1
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 0
57848: PUSH
57849: LD_INT 1
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 1
57858: NEG
57859: PUSH
57860: LD_INT 0
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 1
57869: NEG
57870: PUSH
57871: LD_INT 1
57873: NEG
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 1
57881: NEG
57882: PUSH
57883: LD_INT 2
57885: NEG
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 0
57893: PUSH
57894: LD_INT 2
57896: NEG
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 1
57904: PUSH
57905: LD_INT 1
57907: NEG
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 2
57915: PUSH
57916: LD_INT 0
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 2
57925: PUSH
57926: LD_INT 1
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 2
57935: PUSH
57936: LD_INT 2
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 1
57945: PUSH
57946: LD_INT 2
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 1
57955: NEG
57956: PUSH
57957: LD_INT 1
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 2
57966: NEG
57967: PUSH
57968: LD_INT 0
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 2
57977: NEG
57978: PUSH
57979: LD_INT 1
57981: NEG
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 1
57989: NEG
57990: PUSH
57991: LD_INT 3
57993: NEG
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 1
58001: PUSH
58002: LD_INT 2
58004: NEG
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 3
58012: PUSH
58013: LD_INT 2
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 2
58022: PUSH
58023: LD_INT 3
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 2
58032: NEG
58033: PUSH
58034: LD_INT 1
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 3
58043: NEG
58044: PUSH
58045: LD_INT 1
58047: NEG
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58078: LD_ADDR_VAR 0 31
58082: PUSH
58083: LD_INT 0
58085: PUSH
58086: LD_INT 0
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 0
58095: PUSH
58096: LD_INT 1
58098: NEG
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 1
58106: PUSH
58107: LD_INT 0
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 1
58116: PUSH
58117: LD_INT 1
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 0
58126: PUSH
58127: LD_INT 1
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 1
58136: NEG
58137: PUSH
58138: LD_INT 0
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 1
58147: NEG
58148: PUSH
58149: LD_INT 1
58151: NEG
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 1
58159: NEG
58160: PUSH
58161: LD_INT 2
58163: NEG
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 1
58171: PUSH
58172: LD_INT 1
58174: NEG
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 2
58182: PUSH
58183: LD_INT 0
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 2
58192: PUSH
58193: LD_INT 1
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 2
58202: PUSH
58203: LD_INT 2
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 1
58212: PUSH
58213: LD_INT 2
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 0
58222: PUSH
58223: LD_INT 2
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 1
58232: NEG
58233: PUSH
58234: LD_INT 1
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 2
58243: NEG
58244: PUSH
58245: LD_INT 1
58247: NEG
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 2
58255: NEG
58256: PUSH
58257: LD_INT 2
58259: NEG
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 2
58267: NEG
58268: PUSH
58269: LD_INT 3
58271: NEG
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 2
58279: PUSH
58280: LD_INT 1
58282: NEG
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 3
58290: PUSH
58291: LD_INT 1
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 1
58300: PUSH
58301: LD_INT 3
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 1
58310: NEG
58311: PUSH
58312: LD_INT 2
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 3
58321: NEG
58322: PUSH
58323: LD_INT 2
58325: NEG
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58356: LD_ADDR_VAR 0 32
58360: PUSH
58361: LD_INT 0
58363: PUSH
58364: LD_INT 0
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 0
58373: PUSH
58374: LD_INT 1
58376: NEG
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 1
58384: PUSH
58385: LD_INT 0
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 1
58394: PUSH
58395: LD_INT 1
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 0
58404: PUSH
58405: LD_INT 1
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 1
58414: NEG
58415: PUSH
58416: LD_INT 0
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 1
58425: NEG
58426: PUSH
58427: LD_INT 1
58429: NEG
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 1
58437: NEG
58438: PUSH
58439: LD_INT 2
58441: NEG
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 0
58449: PUSH
58450: LD_INT 2
58452: NEG
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 1
58460: PUSH
58461: LD_INT 1
58463: NEG
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 2
58471: PUSH
58472: LD_INT 1
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 2
58481: PUSH
58482: LD_INT 2
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 1
58491: PUSH
58492: LD_INT 2
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 0
58501: PUSH
58502: LD_INT 2
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 1
58511: NEG
58512: PUSH
58513: LD_INT 1
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 2
58522: NEG
58523: PUSH
58524: LD_INT 0
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 2
58533: NEG
58534: PUSH
58535: LD_INT 1
58537: NEG
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 1
58545: NEG
58546: PUSH
58547: LD_INT 3
58549: NEG
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 1
58557: PUSH
58558: LD_INT 2
58560: NEG
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 3
58568: PUSH
58569: LD_INT 2
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 2
58578: PUSH
58579: LD_INT 3
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 2
58588: NEG
58589: PUSH
58590: LD_INT 1
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 3
58599: NEG
58600: PUSH
58601: LD_INT 1
58603: NEG
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58634: LD_ADDR_VAR 0 33
58638: PUSH
58639: LD_INT 0
58641: PUSH
58642: LD_INT 0
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 0
58651: PUSH
58652: LD_INT 1
58654: NEG
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 1
58662: PUSH
58663: LD_INT 0
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 1
58672: PUSH
58673: LD_INT 1
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 0
58682: PUSH
58683: LD_INT 1
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 1
58692: NEG
58693: PUSH
58694: LD_INT 0
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 1
58703: NEG
58704: PUSH
58705: LD_INT 1
58707: NEG
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 1
58715: NEG
58716: PUSH
58717: LD_INT 2
58719: NEG
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 1
58727: PUSH
58728: LD_INT 1
58730: NEG
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 2
58738: PUSH
58739: LD_INT 0
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 2
58748: PUSH
58749: LD_INT 1
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 1
58758: PUSH
58759: LD_INT 2
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 0
58768: PUSH
58769: LD_INT 2
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 1
58778: NEG
58779: PUSH
58780: LD_INT 1
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 2
58789: NEG
58790: PUSH
58791: LD_INT 0
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 2
58800: NEG
58801: PUSH
58802: LD_INT 1
58804: NEG
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 2
58812: NEG
58813: PUSH
58814: LD_INT 2
58816: NEG
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 2
58824: NEG
58825: PUSH
58826: LD_INT 3
58828: NEG
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 2
58836: PUSH
58837: LD_INT 1
58839: NEG
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 3
58847: PUSH
58848: LD_INT 1
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 1
58857: PUSH
58858: LD_INT 3
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 1
58867: NEG
58868: PUSH
58869: LD_INT 2
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 3
58878: NEG
58879: PUSH
58880: LD_INT 2
58882: NEG
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58913: LD_ADDR_VAR 0 34
58917: PUSH
58918: LD_INT 0
58920: PUSH
58921: LD_INT 0
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 0
58930: PUSH
58931: LD_INT 1
58933: NEG
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 1
58941: PUSH
58942: LD_INT 0
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 1
58951: PUSH
58952: LD_INT 1
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 0
58961: PUSH
58962: LD_INT 1
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 1
58971: NEG
58972: PUSH
58973: LD_INT 0
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 1
58982: NEG
58983: PUSH
58984: LD_INT 1
58986: NEG
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 1
58994: NEG
58995: PUSH
58996: LD_INT 2
58998: NEG
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 0
59006: PUSH
59007: LD_INT 2
59009: NEG
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 1
59017: PUSH
59018: LD_INT 1
59020: NEG
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 2
59028: PUSH
59029: LD_INT 1
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 2
59038: PUSH
59039: LD_INT 2
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 1
59048: PUSH
59049: LD_INT 2
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 1
59058: NEG
59059: PUSH
59060: LD_INT 1
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 2
59069: NEG
59070: PUSH
59071: LD_INT 0
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 2
59080: NEG
59081: PUSH
59082: LD_INT 1
59084: NEG
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 2
59092: NEG
59093: PUSH
59094: LD_INT 2
59096: NEG
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 1
59104: NEG
59105: PUSH
59106: LD_INT 3
59108: NEG
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 1
59116: PUSH
59117: LD_INT 2
59119: NEG
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 3
59127: PUSH
59128: LD_INT 2
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 2
59137: PUSH
59138: LD_INT 3
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 2
59147: NEG
59148: PUSH
59149: LD_INT 1
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 3
59158: NEG
59159: PUSH
59160: LD_INT 1
59162: NEG
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59193: LD_ADDR_VAR 0 35
59197: PUSH
59198: LD_INT 0
59200: PUSH
59201: LD_INT 0
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 0
59210: PUSH
59211: LD_INT 1
59213: NEG
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 1
59221: PUSH
59222: LD_INT 0
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 1
59231: PUSH
59232: LD_INT 1
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 0
59241: PUSH
59242: LD_INT 1
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 1
59251: NEG
59252: PUSH
59253: LD_INT 0
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 1
59262: NEG
59263: PUSH
59264: LD_INT 1
59266: NEG
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 2
59274: PUSH
59275: LD_INT 1
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 2
59284: NEG
59285: PUSH
59286: LD_INT 1
59288: NEG
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59305: LD_ADDR_VAR 0 36
59309: PUSH
59310: LD_INT 0
59312: PUSH
59313: LD_INT 0
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 0
59322: PUSH
59323: LD_INT 1
59325: NEG
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 1
59333: PUSH
59334: LD_INT 0
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 1
59343: PUSH
59344: LD_INT 1
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 0
59353: PUSH
59354: LD_INT 1
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 1
59363: NEG
59364: PUSH
59365: LD_INT 0
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: LD_INT 1
59374: NEG
59375: PUSH
59376: LD_INT 1
59378: NEG
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 1
59386: NEG
59387: PUSH
59388: LD_INT 2
59390: NEG
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 1
59398: PUSH
59399: LD_INT 2
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59417: LD_ADDR_VAR 0 37
59421: PUSH
59422: LD_INT 0
59424: PUSH
59425: LD_INT 0
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 0
59434: PUSH
59435: LD_INT 1
59437: NEG
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 1
59445: PUSH
59446: LD_INT 0
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 1
59455: PUSH
59456: LD_INT 1
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 0
59465: PUSH
59466: LD_INT 1
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 1
59475: NEG
59476: PUSH
59477: LD_INT 0
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 1
59486: NEG
59487: PUSH
59488: LD_INT 1
59490: NEG
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 1
59498: PUSH
59499: LD_INT 1
59501: NEG
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 1
59509: NEG
59510: PUSH
59511: LD_INT 1
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59529: LD_ADDR_VAR 0 38
59533: PUSH
59534: LD_INT 0
59536: PUSH
59537: LD_INT 0
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 0
59546: PUSH
59547: LD_INT 1
59549: NEG
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 1
59557: PUSH
59558: LD_INT 0
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 1
59567: PUSH
59568: LD_INT 1
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 0
59577: PUSH
59578: LD_INT 1
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 1
59587: NEG
59588: PUSH
59589: LD_INT 0
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 1
59598: NEG
59599: PUSH
59600: LD_INT 1
59602: NEG
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 2
59610: PUSH
59611: LD_INT 1
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 2
59620: NEG
59621: PUSH
59622: LD_INT 1
59624: NEG
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59641: LD_ADDR_VAR 0 39
59645: PUSH
59646: LD_INT 0
59648: PUSH
59649: LD_INT 0
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 0
59658: PUSH
59659: LD_INT 1
59661: NEG
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 1
59669: PUSH
59670: LD_INT 0
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 1
59679: PUSH
59680: LD_INT 1
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 0
59689: PUSH
59690: LD_INT 1
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 1
59699: NEG
59700: PUSH
59701: LD_INT 0
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 1
59710: NEG
59711: PUSH
59712: LD_INT 1
59714: NEG
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 1
59722: NEG
59723: PUSH
59724: LD_INT 2
59726: NEG
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 1
59734: PUSH
59735: LD_INT 2
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59753: LD_ADDR_VAR 0 40
59757: PUSH
59758: LD_INT 0
59760: PUSH
59761: LD_INT 0
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 0
59770: PUSH
59771: LD_INT 1
59773: NEG
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: LD_INT 1
59781: PUSH
59782: LD_INT 0
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 1
59791: PUSH
59792: LD_INT 1
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 0
59801: PUSH
59802: LD_INT 1
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 1
59811: NEG
59812: PUSH
59813: LD_INT 0
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 1
59822: NEG
59823: PUSH
59824: LD_INT 1
59826: NEG
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 1
59834: PUSH
59835: LD_INT 1
59837: NEG
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 1
59845: NEG
59846: PUSH
59847: LD_INT 1
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59865: LD_ADDR_VAR 0 41
59869: PUSH
59870: LD_INT 0
59872: PUSH
59873: LD_INT 0
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 0
59882: PUSH
59883: LD_INT 1
59885: NEG
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 1
59893: PUSH
59894: LD_INT 0
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 1
59903: PUSH
59904: LD_INT 1
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 0
59913: PUSH
59914: LD_INT 1
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 1
59923: NEG
59924: PUSH
59925: LD_INT 0
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 1
59934: NEG
59935: PUSH
59936: LD_INT 1
59938: NEG
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 1
59946: NEG
59947: PUSH
59948: LD_INT 2
59950: NEG
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 1
59958: PUSH
59959: LD_INT 1
59961: NEG
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 2
59969: PUSH
59970: LD_INT 0
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 2
59979: PUSH
59980: LD_INT 1
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 2
59989: PUSH
59990: LD_INT 2
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 1
59999: PUSH
60000: LD_INT 2
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 1
60009: NEG
60010: PUSH
60011: LD_INT 1
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 2
60020: NEG
60021: PUSH
60022: LD_INT 0
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 2
60031: NEG
60032: PUSH
60033: LD_INT 1
60035: NEG
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 2
60043: NEG
60044: PUSH
60045: LD_INT 2
60047: NEG
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 2
60055: NEG
60056: PUSH
60057: LD_INT 3
60059: NEG
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 2
60067: PUSH
60068: LD_INT 1
60070: NEG
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 3
60078: PUSH
60079: LD_INT 0
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 3
60088: PUSH
60089: LD_INT 1
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 3
60098: PUSH
60099: LD_INT 2
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 3
60108: PUSH
60109: LD_INT 3
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 2
60118: PUSH
60119: LD_INT 3
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 2
60128: NEG
60129: PUSH
60130: LD_INT 1
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 3
60139: NEG
60140: PUSH
60141: LD_INT 0
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 3
60150: NEG
60151: PUSH
60152: LD_INT 1
60154: NEG
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 3
60162: NEG
60163: PUSH
60164: LD_INT 2
60166: NEG
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 3
60174: NEG
60175: PUSH
60176: LD_INT 3
60178: NEG
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60215: LD_ADDR_VAR 0 42
60219: PUSH
60220: LD_INT 0
60222: PUSH
60223: LD_INT 0
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 0
60232: PUSH
60233: LD_INT 1
60235: NEG
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 1
60243: PUSH
60244: LD_INT 0
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 1
60253: PUSH
60254: LD_INT 1
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 0
60263: PUSH
60264: LD_INT 1
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 1
60273: NEG
60274: PUSH
60275: LD_INT 0
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 1
60284: NEG
60285: PUSH
60286: LD_INT 1
60288: NEG
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 1
60296: NEG
60297: PUSH
60298: LD_INT 2
60300: NEG
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 0
60308: PUSH
60309: LD_INT 2
60311: NEG
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 1
60319: PUSH
60320: LD_INT 1
60322: NEG
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 2
60330: PUSH
60331: LD_INT 1
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 2
60340: PUSH
60341: LD_INT 2
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 1
60350: PUSH
60351: LD_INT 2
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 0
60360: PUSH
60361: LD_INT 2
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 1
60370: NEG
60371: PUSH
60372: LD_INT 1
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 2
60381: NEG
60382: PUSH
60383: LD_INT 1
60385: NEG
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 2
60393: NEG
60394: PUSH
60395: LD_INT 2
60397: NEG
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 2
60405: NEG
60406: PUSH
60407: LD_INT 3
60409: NEG
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 1
60417: NEG
60418: PUSH
60419: LD_INT 3
60421: NEG
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 0
60429: PUSH
60430: LD_INT 3
60432: NEG
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 1
60440: PUSH
60441: LD_INT 2
60443: NEG
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 3
60451: PUSH
60452: LD_INT 2
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 3
60461: PUSH
60462: LD_INT 3
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 2
60471: PUSH
60472: LD_INT 3
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 1
60481: PUSH
60482: LD_INT 3
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 0
60491: PUSH
60492: LD_INT 3
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 1
60501: NEG
60502: PUSH
60503: LD_INT 2
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 3
60512: NEG
60513: PUSH
60514: LD_INT 2
60516: NEG
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 3
60524: NEG
60525: PUSH
60526: LD_INT 3
60528: NEG
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60565: LD_ADDR_VAR 0 43
60569: PUSH
60570: LD_INT 0
60572: PUSH
60573: LD_INT 0
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 0
60582: PUSH
60583: LD_INT 1
60585: NEG
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 1
60593: PUSH
60594: LD_INT 0
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 1
60603: PUSH
60604: LD_INT 1
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 0
60613: PUSH
60614: LD_INT 1
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 1
60623: NEG
60624: PUSH
60625: LD_INT 0
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 1
60634: NEG
60635: PUSH
60636: LD_INT 1
60638: NEG
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 1
60646: NEG
60647: PUSH
60648: LD_INT 2
60650: NEG
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 0
60658: PUSH
60659: LD_INT 2
60661: NEG
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 1
60669: PUSH
60670: LD_INT 1
60672: NEG
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 2
60680: PUSH
60681: LD_INT 0
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 2
60690: PUSH
60691: LD_INT 1
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 1
60700: PUSH
60701: LD_INT 2
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 0
60710: PUSH
60711: LD_INT 2
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 1
60720: NEG
60721: PUSH
60722: LD_INT 1
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 2
60731: NEG
60732: PUSH
60733: LD_INT 0
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 2
60742: NEG
60743: PUSH
60744: LD_INT 1
60746: NEG
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 1
60754: NEG
60755: PUSH
60756: LD_INT 3
60758: NEG
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 0
60766: PUSH
60767: LD_INT 3
60769: NEG
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 1
60777: PUSH
60778: LD_INT 2
60780: NEG
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 2
60788: PUSH
60789: LD_INT 1
60791: NEG
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 3
60799: PUSH
60800: LD_INT 0
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 3
60809: PUSH
60810: LD_INT 1
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 1
60819: PUSH
60820: LD_INT 3
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 0
60829: PUSH
60830: LD_INT 3
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 1
60839: NEG
60840: PUSH
60841: LD_INT 2
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 2
60850: NEG
60851: PUSH
60852: LD_INT 1
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 3
60861: NEG
60862: PUSH
60863: LD_INT 0
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PUSH
60870: LD_INT 3
60872: NEG
60873: PUSH
60874: LD_INT 1
60876: NEG
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60913: LD_ADDR_VAR 0 44
60917: PUSH
60918: LD_INT 0
60920: PUSH
60921: LD_INT 0
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 0
60930: PUSH
60931: LD_INT 1
60933: NEG
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 1
60941: PUSH
60942: LD_INT 0
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 1
60951: PUSH
60952: LD_INT 1
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 0
60961: PUSH
60962: LD_INT 1
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 1
60971: NEG
60972: PUSH
60973: LD_INT 0
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 1
60982: NEG
60983: PUSH
60984: LD_INT 1
60986: NEG
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 1
60994: NEG
60995: PUSH
60996: LD_INT 2
60998: NEG
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 1
61006: PUSH
61007: LD_INT 1
61009: NEG
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 2
61017: PUSH
61018: LD_INT 0
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 2
61027: PUSH
61028: LD_INT 1
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 2
61037: PUSH
61038: LD_INT 2
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 1
61047: PUSH
61048: LD_INT 2
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 1
61057: NEG
61058: PUSH
61059: LD_INT 1
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 2
61068: NEG
61069: PUSH
61070: LD_INT 0
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 2
61079: NEG
61080: PUSH
61081: LD_INT 1
61083: NEG
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 2
61091: NEG
61092: PUSH
61093: LD_INT 2
61095: NEG
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 2
61103: NEG
61104: PUSH
61105: LD_INT 3
61107: NEG
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 2
61115: PUSH
61116: LD_INT 1
61118: NEG
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 3
61126: PUSH
61127: LD_INT 0
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 3
61136: PUSH
61137: LD_INT 1
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 3
61146: PUSH
61147: LD_INT 2
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: LD_INT 3
61156: PUSH
61157: LD_INT 3
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: PUSH
61164: LD_INT 2
61166: PUSH
61167: LD_INT 3
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 2
61176: NEG
61177: PUSH
61178: LD_INT 1
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 3
61187: NEG
61188: PUSH
61189: LD_INT 0
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 3
61198: NEG
61199: PUSH
61200: LD_INT 1
61202: NEG
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 3
61210: NEG
61211: PUSH
61212: LD_INT 2
61214: NEG
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 3
61222: NEG
61223: PUSH
61224: LD_INT 3
61226: NEG
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61263: LD_ADDR_VAR 0 45
61267: PUSH
61268: LD_INT 0
61270: PUSH
61271: LD_INT 0
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 0
61280: PUSH
61281: LD_INT 1
61283: NEG
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 1
61291: PUSH
61292: LD_INT 0
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 1
61301: PUSH
61302: LD_INT 1
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 0
61311: PUSH
61312: LD_INT 1
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: LD_INT 1
61321: NEG
61322: PUSH
61323: LD_INT 0
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 1
61332: NEG
61333: PUSH
61334: LD_INT 1
61336: NEG
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 1
61344: NEG
61345: PUSH
61346: LD_INT 2
61348: NEG
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 0
61356: PUSH
61357: LD_INT 2
61359: NEG
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 1
61367: PUSH
61368: LD_INT 1
61370: NEG
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 2
61378: PUSH
61379: LD_INT 1
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 2
61388: PUSH
61389: LD_INT 2
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 1
61398: PUSH
61399: LD_INT 2
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 0
61408: PUSH
61409: LD_INT 2
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 1
61418: NEG
61419: PUSH
61420: LD_INT 1
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 2
61429: NEG
61430: PUSH
61431: LD_INT 1
61433: NEG
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 2
61441: NEG
61442: PUSH
61443: LD_INT 2
61445: NEG
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 2
61453: NEG
61454: PUSH
61455: LD_INT 3
61457: NEG
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 1
61465: NEG
61466: PUSH
61467: LD_INT 3
61469: NEG
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 0
61477: PUSH
61478: LD_INT 3
61480: NEG
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 1
61488: PUSH
61489: LD_INT 2
61491: NEG
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 3
61499: PUSH
61500: LD_INT 2
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 3
61509: PUSH
61510: LD_INT 3
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 2
61519: PUSH
61520: LD_INT 3
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 1
61529: PUSH
61530: LD_INT 3
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 0
61539: PUSH
61540: LD_INT 3
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 1
61549: NEG
61550: PUSH
61551: LD_INT 2
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 3
61560: NEG
61561: PUSH
61562: LD_INT 2
61564: NEG
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 3
61572: NEG
61573: PUSH
61574: LD_INT 3
61576: NEG
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61613: LD_ADDR_VAR 0 46
61617: PUSH
61618: LD_INT 0
61620: PUSH
61621: LD_INT 0
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 0
61630: PUSH
61631: LD_INT 1
61633: NEG
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 1
61641: PUSH
61642: LD_INT 0
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 1
61651: PUSH
61652: LD_INT 1
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 0
61661: PUSH
61662: LD_INT 1
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 1
61671: NEG
61672: PUSH
61673: LD_INT 0
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 1
61682: NEG
61683: PUSH
61684: LD_INT 1
61686: NEG
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 1
61694: NEG
61695: PUSH
61696: LD_INT 2
61698: NEG
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 0
61706: PUSH
61707: LD_INT 2
61709: NEG
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 1
61717: PUSH
61718: LD_INT 1
61720: NEG
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: LD_INT 2
61728: PUSH
61729: LD_INT 0
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 2
61738: PUSH
61739: LD_INT 1
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 1
61748: PUSH
61749: LD_INT 2
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 0
61758: PUSH
61759: LD_INT 2
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 1
61768: NEG
61769: PUSH
61770: LD_INT 1
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 2
61779: NEG
61780: PUSH
61781: LD_INT 0
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 2
61790: NEG
61791: PUSH
61792: LD_INT 1
61794: NEG
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_INT 1
61802: NEG
61803: PUSH
61804: LD_INT 3
61806: NEG
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 0
61814: PUSH
61815: LD_INT 3
61817: NEG
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 1
61825: PUSH
61826: LD_INT 2
61828: NEG
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 2
61836: PUSH
61837: LD_INT 1
61839: NEG
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 3
61847: PUSH
61848: LD_INT 0
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 3
61857: PUSH
61858: LD_INT 1
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 1
61867: PUSH
61868: LD_INT 3
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 0
61877: PUSH
61878: LD_INT 3
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 1
61887: NEG
61888: PUSH
61889: LD_INT 2
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 2
61898: NEG
61899: PUSH
61900: LD_INT 1
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 3
61909: NEG
61910: PUSH
61911: LD_INT 0
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: PUSH
61918: LD_INT 3
61920: NEG
61921: PUSH
61922: LD_INT 1
61924: NEG
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61961: LD_ADDR_VAR 0 47
61965: PUSH
61966: LD_INT 0
61968: PUSH
61969: LD_INT 0
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 0
61978: PUSH
61979: LD_INT 1
61981: NEG
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 1
61989: PUSH
61990: LD_INT 0
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 1
61999: PUSH
62000: LD_INT 1
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 0
62009: PUSH
62010: LD_INT 1
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 1
62019: NEG
62020: PUSH
62021: LD_INT 0
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 1
62030: NEG
62031: PUSH
62032: LD_INT 1
62034: NEG
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: LD_INT 1
62042: NEG
62043: PUSH
62044: LD_INT 2
62046: NEG
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 0
62054: PUSH
62055: LD_INT 2
62057: NEG
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 1
62065: PUSH
62066: LD_INT 1
62068: NEG
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 2
62076: NEG
62077: PUSH
62078: LD_INT 1
62080: NEG
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 2
62088: NEG
62089: PUSH
62090: LD_INT 2
62092: NEG
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62112: LD_ADDR_VAR 0 48
62116: PUSH
62117: LD_INT 0
62119: PUSH
62120: LD_INT 0
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 0
62129: PUSH
62130: LD_INT 1
62132: NEG
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 1
62140: PUSH
62141: LD_INT 0
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 1
62150: PUSH
62151: LD_INT 1
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 0
62160: PUSH
62161: LD_INT 1
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 1
62170: NEG
62171: PUSH
62172: LD_INT 0
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 1
62181: NEG
62182: PUSH
62183: LD_INT 1
62185: NEG
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 1
62193: NEG
62194: PUSH
62195: LD_INT 2
62197: NEG
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 0
62205: PUSH
62206: LD_INT 2
62208: NEG
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 1
62216: PUSH
62217: LD_INT 1
62219: NEG
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 2
62227: PUSH
62228: LD_INT 0
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 2
62237: PUSH
62238: LD_INT 1
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62259: LD_ADDR_VAR 0 49
62263: PUSH
62264: LD_INT 0
62266: PUSH
62267: LD_INT 0
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 0
62276: PUSH
62277: LD_INT 1
62279: NEG
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 1
62287: PUSH
62288: LD_INT 0
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 1
62297: PUSH
62298: LD_INT 1
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 0
62307: PUSH
62308: LD_INT 1
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 1
62317: NEG
62318: PUSH
62319: LD_INT 0
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 1
62328: NEG
62329: PUSH
62330: LD_INT 1
62332: NEG
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 1
62340: PUSH
62341: LD_INT 1
62343: NEG
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 2
62351: PUSH
62352: LD_INT 0
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 2
62361: PUSH
62362: LD_INT 1
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 2
62371: PUSH
62372: LD_INT 2
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 1
62381: PUSH
62382: LD_INT 2
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62403: LD_ADDR_VAR 0 50
62407: PUSH
62408: LD_INT 0
62410: PUSH
62411: LD_INT 0
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 0
62420: PUSH
62421: LD_INT 1
62423: NEG
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 1
62431: PUSH
62432: LD_INT 0
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: LD_INT 1
62441: PUSH
62442: LD_INT 1
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 0
62451: PUSH
62452: LD_INT 1
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 1
62461: NEG
62462: PUSH
62463: LD_INT 0
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 1
62472: NEG
62473: PUSH
62474: LD_INT 1
62476: NEG
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PUSH
62482: LD_INT 2
62484: PUSH
62485: LD_INT 1
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 2
62494: PUSH
62495: LD_INT 2
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 1
62504: PUSH
62505: LD_INT 2
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 0
62514: PUSH
62515: LD_INT 2
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 1
62524: NEG
62525: PUSH
62526: LD_INT 1
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62547: LD_ADDR_VAR 0 51
62551: PUSH
62552: LD_INT 0
62554: PUSH
62555: LD_INT 0
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 0
62564: PUSH
62565: LD_INT 1
62567: NEG
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 1
62575: PUSH
62576: LD_INT 0
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 1
62585: PUSH
62586: LD_INT 1
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 0
62595: PUSH
62596: LD_INT 1
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 1
62605: NEG
62606: PUSH
62607: LD_INT 0
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 1
62616: NEG
62617: PUSH
62618: LD_INT 1
62620: NEG
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 1
62628: PUSH
62629: LD_INT 2
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 0
62638: PUSH
62639: LD_INT 2
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 1
62648: NEG
62649: PUSH
62650: LD_INT 1
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 2
62659: NEG
62660: PUSH
62661: LD_INT 0
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 2
62670: NEG
62671: PUSH
62672: LD_INT 1
62674: NEG
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62694: LD_ADDR_VAR 0 52
62698: PUSH
62699: LD_INT 0
62701: PUSH
62702: LD_INT 0
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 0
62711: PUSH
62712: LD_INT 1
62714: NEG
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 1
62722: PUSH
62723: LD_INT 0
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 1
62732: PUSH
62733: LD_INT 1
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 0
62742: PUSH
62743: LD_INT 1
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 1
62752: NEG
62753: PUSH
62754: LD_INT 0
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 1
62763: NEG
62764: PUSH
62765: LD_INT 1
62767: NEG
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 1
62775: NEG
62776: PUSH
62777: LD_INT 2
62779: NEG
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 1
62787: NEG
62788: PUSH
62789: LD_INT 1
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 2
62798: NEG
62799: PUSH
62800: LD_INT 0
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 2
62809: NEG
62810: PUSH
62811: LD_INT 1
62813: NEG
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_INT 2
62821: NEG
62822: PUSH
62823: LD_INT 2
62825: NEG
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62845: LD_ADDR_VAR 0 53
62849: PUSH
62850: LD_INT 0
62852: PUSH
62853: LD_INT 0
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 0
62862: PUSH
62863: LD_INT 1
62865: NEG
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: PUSH
62871: LD_INT 1
62873: PUSH
62874: LD_INT 0
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 1
62883: PUSH
62884: LD_INT 1
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 0
62893: PUSH
62894: LD_INT 1
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 1
62903: NEG
62904: PUSH
62905: LD_INT 0
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: PUSH
62912: LD_INT 1
62914: NEG
62915: PUSH
62916: LD_INT 1
62918: NEG
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: LD_INT 1
62926: NEG
62927: PUSH
62928: LD_INT 2
62930: NEG
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 0
62938: PUSH
62939: LD_INT 2
62941: NEG
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 1
62949: PUSH
62950: LD_INT 1
62952: NEG
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 2
62960: PUSH
62961: LD_INT 0
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 2
62970: PUSH
62971: LD_INT 1
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 2
62980: PUSH
62981: LD_INT 2
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: LD_INT 1
62990: PUSH
62991: LD_INT 2
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 0
63000: PUSH
63001: LD_INT 2
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 1
63010: NEG
63011: PUSH
63012: LD_INT 1
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: LD_INT 2
63021: NEG
63022: PUSH
63023: LD_INT 0
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 2
63032: NEG
63033: PUSH
63034: LD_INT 1
63036: NEG
63037: PUSH
63038: EMPTY
63039: LIST
63040: LIST
63041: PUSH
63042: LD_INT 2
63044: NEG
63045: PUSH
63046: LD_INT 2
63048: NEG
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: LIST
63065: LIST
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63075: LD_ADDR_VAR 0 54
63079: PUSH
63080: LD_INT 0
63082: PUSH
63083: LD_INT 0
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: LD_INT 0
63092: PUSH
63093: LD_INT 1
63095: NEG
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 1
63103: PUSH
63104: LD_INT 0
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: LD_INT 1
63113: PUSH
63114: LD_INT 1
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 0
63123: PUSH
63124: LD_INT 1
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 1
63133: NEG
63134: PUSH
63135: LD_INT 0
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: LD_INT 1
63144: NEG
63145: PUSH
63146: LD_INT 1
63148: NEG
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: PUSH
63154: LD_INT 1
63156: NEG
63157: PUSH
63158: LD_INT 2
63160: NEG
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PUSH
63166: LD_INT 0
63168: PUSH
63169: LD_INT 2
63171: NEG
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 1
63179: PUSH
63180: LD_INT 1
63182: NEG
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 2
63190: PUSH
63191: LD_INT 0
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 2
63200: PUSH
63201: LD_INT 1
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 2
63210: PUSH
63211: LD_INT 2
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 1
63220: PUSH
63221: LD_INT 2
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 0
63230: PUSH
63231: LD_INT 2
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 1
63240: NEG
63241: PUSH
63242: LD_INT 1
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 2
63251: NEG
63252: PUSH
63253: LD_INT 0
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: LD_INT 2
63262: NEG
63263: PUSH
63264: LD_INT 1
63266: NEG
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 2
63274: NEG
63275: PUSH
63276: LD_INT 2
63278: NEG
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: LIST
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63305: LD_ADDR_VAR 0 55
63309: PUSH
63310: LD_INT 0
63312: PUSH
63313: LD_INT 0
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: PUSH
63320: LD_INT 0
63322: PUSH
63323: LD_INT 1
63325: NEG
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 1
63333: PUSH
63334: LD_INT 0
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 1
63343: PUSH
63344: LD_INT 1
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 0
63353: PUSH
63354: LD_INT 1
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: LD_INT 1
63363: NEG
63364: PUSH
63365: LD_INT 0
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: PUSH
63372: LD_INT 1
63374: NEG
63375: PUSH
63376: LD_INT 1
63378: NEG
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: PUSH
63384: LD_INT 1
63386: NEG
63387: PUSH
63388: LD_INT 2
63390: NEG
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 0
63398: PUSH
63399: LD_INT 2
63401: NEG
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 1
63409: PUSH
63410: LD_INT 1
63412: NEG
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: PUSH
63418: LD_INT 2
63420: PUSH
63421: LD_INT 0
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 2
63430: PUSH
63431: LD_INT 1
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 2
63440: PUSH
63441: LD_INT 2
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 1
63450: PUSH
63451: LD_INT 2
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: LD_INT 0
63460: PUSH
63461: LD_INT 2
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: LD_INT 1
63470: NEG
63471: PUSH
63472: LD_INT 1
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: LD_INT 2
63481: NEG
63482: PUSH
63483: LD_INT 0
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: PUSH
63490: LD_INT 2
63492: NEG
63493: PUSH
63494: LD_INT 1
63496: NEG
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PUSH
63502: LD_INT 2
63504: NEG
63505: PUSH
63506: LD_INT 2
63508: NEG
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63535: LD_ADDR_VAR 0 56
63539: PUSH
63540: LD_INT 0
63542: PUSH
63543: LD_INT 0
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 0
63552: PUSH
63553: LD_INT 1
63555: NEG
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 1
63563: PUSH
63564: LD_INT 0
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 1
63573: PUSH
63574: LD_INT 1
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 0
63583: PUSH
63584: LD_INT 1
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 1
63593: NEG
63594: PUSH
63595: LD_INT 0
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 1
63604: NEG
63605: PUSH
63606: LD_INT 1
63608: NEG
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_INT 1
63616: NEG
63617: PUSH
63618: LD_INT 2
63620: NEG
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: LD_INT 0
63628: PUSH
63629: LD_INT 2
63631: NEG
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 1
63639: PUSH
63640: LD_INT 1
63642: NEG
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 2
63650: PUSH
63651: LD_INT 0
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: LD_INT 2
63660: PUSH
63661: LD_INT 1
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 2
63670: PUSH
63671: LD_INT 2
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 1
63680: PUSH
63681: LD_INT 2
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 0
63690: PUSH
63691: LD_INT 2
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 1
63700: NEG
63701: PUSH
63702: LD_INT 1
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 2
63711: NEG
63712: PUSH
63713: LD_INT 0
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: PUSH
63720: LD_INT 2
63722: NEG
63723: PUSH
63724: LD_INT 1
63726: NEG
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: LD_INT 2
63734: NEG
63735: PUSH
63736: LD_INT 2
63738: NEG
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: LIST
63759: LIST
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63765: LD_ADDR_VAR 0 57
63769: PUSH
63770: LD_INT 0
63772: PUSH
63773: LD_INT 0
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 0
63782: PUSH
63783: LD_INT 1
63785: NEG
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 1
63793: PUSH
63794: LD_INT 0
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 1
63803: PUSH
63804: LD_INT 1
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 0
63813: PUSH
63814: LD_INT 1
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 1
63823: NEG
63824: PUSH
63825: LD_INT 0
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 1
63834: NEG
63835: PUSH
63836: LD_INT 1
63838: NEG
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: LD_INT 1
63846: NEG
63847: PUSH
63848: LD_INT 2
63850: NEG
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: PUSH
63856: LD_INT 0
63858: PUSH
63859: LD_INT 2
63861: NEG
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: LD_INT 1
63869: PUSH
63870: LD_INT 1
63872: NEG
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 2
63880: PUSH
63881: LD_INT 0
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: LD_INT 2
63890: PUSH
63891: LD_INT 1
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 2
63900: PUSH
63901: LD_INT 2
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 1
63910: PUSH
63911: LD_INT 2
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: PUSH
63918: LD_INT 0
63920: PUSH
63921: LD_INT 2
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 1
63930: NEG
63931: PUSH
63932: LD_INT 1
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: PUSH
63939: LD_INT 2
63941: NEG
63942: PUSH
63943: LD_INT 0
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 2
63952: NEG
63953: PUSH
63954: LD_INT 1
63956: NEG
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 2
63964: NEG
63965: PUSH
63966: LD_INT 2
63968: NEG
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63995: LD_ADDR_VAR 0 58
63999: PUSH
64000: LD_INT 0
64002: PUSH
64003: LD_INT 0
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: PUSH
64010: LD_INT 0
64012: PUSH
64013: LD_INT 1
64015: NEG
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: LD_INT 1
64023: PUSH
64024: LD_INT 0
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 1
64033: PUSH
64034: LD_INT 1
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: LD_INT 0
64043: PUSH
64044: LD_INT 1
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PUSH
64051: LD_INT 1
64053: NEG
64054: PUSH
64055: LD_INT 0
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 1
64064: NEG
64065: PUSH
64066: LD_INT 1
64068: NEG
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: PUSH
64074: LD_INT 1
64076: NEG
64077: PUSH
64078: LD_INT 2
64080: NEG
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 0
64088: PUSH
64089: LD_INT 2
64091: NEG
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: PUSH
64097: LD_INT 1
64099: PUSH
64100: LD_INT 1
64102: NEG
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 2
64110: PUSH
64111: LD_INT 0
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 2
64120: PUSH
64121: LD_INT 1
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: LD_INT 2
64130: PUSH
64131: LD_INT 2
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: PUSH
64138: LD_INT 1
64140: PUSH
64141: LD_INT 2
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 0
64150: PUSH
64151: LD_INT 2
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 1
64160: NEG
64161: PUSH
64162: LD_INT 1
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_INT 2
64171: NEG
64172: PUSH
64173: LD_INT 0
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 2
64182: NEG
64183: PUSH
64184: LD_INT 1
64186: NEG
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: LD_INT 2
64194: NEG
64195: PUSH
64196: LD_INT 2
64198: NEG
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: LIST
64221: LIST
64222: LIST
64223: LIST
64224: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64225: LD_ADDR_VAR 0 59
64229: PUSH
64230: LD_INT 0
64232: PUSH
64233: LD_INT 0
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: PUSH
64240: LD_INT 0
64242: PUSH
64243: LD_INT 1
64245: NEG
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: PUSH
64251: LD_INT 1
64253: PUSH
64254: LD_INT 0
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PUSH
64261: LD_INT 1
64263: PUSH
64264: LD_INT 1
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: PUSH
64271: LD_INT 0
64273: PUSH
64274: LD_INT 1
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: LD_INT 1
64283: NEG
64284: PUSH
64285: LD_INT 0
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: LD_INT 1
64294: NEG
64295: PUSH
64296: LD_INT 1
64298: NEG
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: LIST
64308: LIST
64309: LIST
64310: LIST
64311: LIST
64312: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64313: LD_ADDR_VAR 0 60
64317: PUSH
64318: LD_INT 0
64320: PUSH
64321: LD_INT 0
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 0
64330: PUSH
64331: LD_INT 1
64333: NEG
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_INT 1
64341: PUSH
64342: LD_INT 0
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PUSH
64349: LD_INT 1
64351: PUSH
64352: LD_INT 1
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: LD_INT 0
64361: PUSH
64362: LD_INT 1
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: LD_INT 1
64371: NEG
64372: PUSH
64373: LD_INT 0
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PUSH
64380: LD_INT 1
64382: NEG
64383: PUSH
64384: LD_INT 1
64386: NEG
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: LIST
64396: LIST
64397: LIST
64398: LIST
64399: LIST
64400: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64401: LD_ADDR_VAR 0 61
64405: PUSH
64406: LD_INT 0
64408: PUSH
64409: LD_INT 0
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: LD_INT 0
64418: PUSH
64419: LD_INT 1
64421: NEG
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 1
64429: PUSH
64430: LD_INT 0
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 1
64439: PUSH
64440: LD_INT 1
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: LD_INT 0
64449: PUSH
64450: LD_INT 1
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: PUSH
64457: LD_INT 1
64459: NEG
64460: PUSH
64461: LD_INT 0
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PUSH
64468: LD_INT 1
64470: NEG
64471: PUSH
64472: LD_INT 1
64474: NEG
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: LIST
64488: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64489: LD_ADDR_VAR 0 62
64493: PUSH
64494: LD_INT 0
64496: PUSH
64497: LD_INT 0
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: PUSH
64504: LD_INT 0
64506: PUSH
64507: LD_INT 1
64509: NEG
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 1
64517: PUSH
64518: LD_INT 0
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: LD_INT 1
64527: PUSH
64528: LD_INT 1
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: PUSH
64535: LD_INT 0
64537: PUSH
64538: LD_INT 1
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 1
64547: NEG
64548: PUSH
64549: LD_INT 0
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: LD_INT 1
64558: NEG
64559: PUSH
64560: LD_INT 1
64562: NEG
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: LIST
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64577: LD_ADDR_VAR 0 63
64581: PUSH
64582: LD_INT 0
64584: PUSH
64585: LD_INT 0
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: LD_INT 0
64594: PUSH
64595: LD_INT 1
64597: NEG
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 1
64605: PUSH
64606: LD_INT 0
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: LD_INT 1
64615: PUSH
64616: LD_INT 1
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: PUSH
64623: LD_INT 0
64625: PUSH
64626: LD_INT 1
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: LD_INT 1
64635: NEG
64636: PUSH
64637: LD_INT 0
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: PUSH
64644: LD_INT 1
64646: NEG
64647: PUSH
64648: LD_INT 1
64650: NEG
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64665: LD_ADDR_VAR 0 64
64669: PUSH
64670: LD_INT 0
64672: PUSH
64673: LD_INT 0
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: LD_INT 0
64682: PUSH
64683: LD_INT 1
64685: NEG
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: PUSH
64691: LD_INT 1
64693: PUSH
64694: LD_INT 0
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: PUSH
64701: LD_INT 1
64703: PUSH
64704: LD_INT 1
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: PUSH
64711: LD_INT 0
64713: PUSH
64714: LD_INT 1
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_INT 1
64723: NEG
64724: PUSH
64725: LD_INT 0
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 1
64734: NEG
64735: PUSH
64736: LD_INT 1
64738: NEG
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: LIST
64748: LIST
64749: LIST
64750: LIST
64751: LIST
64752: ST_TO_ADDR
// end ; 1 :
64753: GO 70650
64755: LD_INT 1
64757: DOUBLE
64758: EQUAL
64759: IFTRUE 64763
64761: GO 67386
64763: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64764: LD_ADDR_VAR 0 11
64768: PUSH
64769: LD_INT 1
64771: NEG
64772: PUSH
64773: LD_INT 3
64775: NEG
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: LD_INT 0
64783: PUSH
64784: LD_INT 3
64786: NEG
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: LD_INT 1
64794: PUSH
64795: LD_INT 2
64797: NEG
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: EMPTY
64804: LIST
64805: LIST
64806: LIST
64807: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64808: LD_ADDR_VAR 0 12
64812: PUSH
64813: LD_INT 2
64815: PUSH
64816: LD_INT 1
64818: NEG
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_INT 3
64826: PUSH
64827: LD_INT 0
64829: PUSH
64830: EMPTY
64831: LIST
64832: LIST
64833: PUSH
64834: LD_INT 3
64836: PUSH
64837: LD_INT 1
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: LIST
64848: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64849: LD_ADDR_VAR 0 13
64853: PUSH
64854: LD_INT 3
64856: PUSH
64857: LD_INT 2
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: PUSH
64864: LD_INT 3
64866: PUSH
64867: LD_INT 3
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: PUSH
64874: LD_INT 2
64876: PUSH
64877: LD_INT 3
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: LIST
64888: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64889: LD_ADDR_VAR 0 14
64893: PUSH
64894: LD_INT 1
64896: PUSH
64897: LD_INT 3
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 0
64906: PUSH
64907: LD_INT 3
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: PUSH
64914: LD_INT 1
64916: NEG
64917: PUSH
64918: LD_INT 2
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: LIST
64929: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64930: LD_ADDR_VAR 0 15
64934: PUSH
64935: LD_INT 2
64937: NEG
64938: PUSH
64939: LD_INT 1
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: PUSH
64946: LD_INT 3
64948: NEG
64949: PUSH
64950: LD_INT 0
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: PUSH
64957: LD_INT 3
64959: NEG
64960: PUSH
64961: LD_INT 1
64963: NEG
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: LIST
64973: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64974: LD_ADDR_VAR 0 16
64978: PUSH
64979: LD_INT 2
64981: NEG
64982: PUSH
64983: LD_INT 3
64985: NEG
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: PUSH
64991: LD_INT 3
64993: NEG
64994: PUSH
64995: LD_INT 2
64997: NEG
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 3
65005: NEG
65006: PUSH
65007: LD_INT 3
65009: NEG
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: LIST
65019: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65020: LD_ADDR_VAR 0 17
65024: PUSH
65025: LD_INT 1
65027: NEG
65028: PUSH
65029: LD_INT 3
65031: NEG
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: LD_INT 0
65039: PUSH
65040: LD_INT 3
65042: NEG
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: PUSH
65048: LD_INT 1
65050: PUSH
65051: LD_INT 2
65053: NEG
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: LIST
65063: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65064: LD_ADDR_VAR 0 18
65068: PUSH
65069: LD_INT 2
65071: PUSH
65072: LD_INT 1
65074: NEG
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: PUSH
65080: LD_INT 3
65082: PUSH
65083: LD_INT 0
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: LD_INT 3
65092: PUSH
65093: LD_INT 1
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: LIST
65104: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65105: LD_ADDR_VAR 0 19
65109: PUSH
65110: LD_INT 3
65112: PUSH
65113: LD_INT 2
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: LD_INT 3
65122: PUSH
65123: LD_INT 3
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: LD_INT 2
65132: PUSH
65133: LD_INT 3
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: LIST
65144: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65145: LD_ADDR_VAR 0 20
65149: PUSH
65150: LD_INT 1
65152: PUSH
65153: LD_INT 3
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: PUSH
65160: LD_INT 0
65162: PUSH
65163: LD_INT 3
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: PUSH
65170: LD_INT 1
65172: NEG
65173: PUSH
65174: LD_INT 2
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: LIST
65185: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65186: LD_ADDR_VAR 0 21
65190: PUSH
65191: LD_INT 2
65193: NEG
65194: PUSH
65195: LD_INT 1
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: PUSH
65202: LD_INT 3
65204: NEG
65205: PUSH
65206: LD_INT 0
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PUSH
65213: LD_INT 3
65215: NEG
65216: PUSH
65217: LD_INT 1
65219: NEG
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: LIST
65229: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65230: LD_ADDR_VAR 0 22
65234: PUSH
65235: LD_INT 2
65237: NEG
65238: PUSH
65239: LD_INT 3
65241: NEG
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 3
65249: NEG
65250: PUSH
65251: LD_INT 2
65253: NEG
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 3
65261: NEG
65262: PUSH
65263: LD_INT 3
65265: NEG
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: LIST
65275: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65276: LD_ADDR_VAR 0 23
65280: PUSH
65281: LD_INT 0
65283: PUSH
65284: LD_INT 3
65286: NEG
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: PUSH
65292: LD_INT 1
65294: NEG
65295: PUSH
65296: LD_INT 4
65298: NEG
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: LD_INT 1
65306: PUSH
65307: LD_INT 3
65309: NEG
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: LIST
65319: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65320: LD_ADDR_VAR 0 24
65324: PUSH
65325: LD_INT 3
65327: PUSH
65328: LD_INT 0
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_INT 3
65337: PUSH
65338: LD_INT 1
65340: NEG
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: LD_INT 4
65348: PUSH
65349: LD_INT 1
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: LIST
65360: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65361: LD_ADDR_VAR 0 25
65365: PUSH
65366: LD_INT 3
65368: PUSH
65369: LD_INT 3
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: PUSH
65376: LD_INT 4
65378: PUSH
65379: LD_INT 3
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 3
65388: PUSH
65389: LD_INT 4
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: LIST
65400: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65401: LD_ADDR_VAR 0 26
65405: PUSH
65406: LD_INT 0
65408: PUSH
65409: LD_INT 3
65411: PUSH
65412: EMPTY
65413: LIST
65414: LIST
65415: PUSH
65416: LD_INT 1
65418: PUSH
65419: LD_INT 4
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: PUSH
65426: LD_INT 1
65428: NEG
65429: PUSH
65430: LD_INT 3
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: LIST
65441: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65442: LD_ADDR_VAR 0 27
65446: PUSH
65447: LD_INT 3
65449: NEG
65450: PUSH
65451: LD_INT 0
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: PUSH
65458: LD_INT 3
65460: NEG
65461: PUSH
65462: LD_INT 1
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PUSH
65469: LD_INT 4
65471: NEG
65472: PUSH
65473: LD_INT 1
65475: NEG
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: LIST
65485: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65486: LD_ADDR_VAR 0 28
65490: PUSH
65491: LD_INT 3
65493: NEG
65494: PUSH
65495: LD_INT 3
65497: NEG
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: LD_INT 3
65505: NEG
65506: PUSH
65507: LD_INT 4
65509: NEG
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: LD_INT 4
65517: NEG
65518: PUSH
65519: LD_INT 3
65521: NEG
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: LIST
65531: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65532: LD_ADDR_VAR 0 29
65536: PUSH
65537: LD_INT 1
65539: NEG
65540: PUSH
65541: LD_INT 3
65543: NEG
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: PUSH
65549: LD_INT 0
65551: PUSH
65552: LD_INT 3
65554: NEG
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 1
65562: PUSH
65563: LD_INT 2
65565: NEG
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: PUSH
65571: LD_INT 1
65573: NEG
65574: PUSH
65575: LD_INT 4
65577: NEG
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: LD_INT 0
65585: PUSH
65586: LD_INT 4
65588: NEG
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: LD_INT 1
65596: PUSH
65597: LD_INT 3
65599: NEG
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: PUSH
65605: LD_INT 1
65607: NEG
65608: PUSH
65609: LD_INT 5
65611: NEG
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 0
65619: PUSH
65620: LD_INT 5
65622: NEG
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PUSH
65628: LD_INT 1
65630: PUSH
65631: LD_INT 4
65633: NEG
65634: PUSH
65635: EMPTY
65636: LIST
65637: LIST
65638: PUSH
65639: LD_INT 1
65641: NEG
65642: PUSH
65643: LD_INT 6
65645: NEG
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: LD_INT 0
65653: PUSH
65654: LD_INT 6
65656: NEG
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 1
65664: PUSH
65665: LD_INT 5
65667: NEG
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65687: LD_ADDR_VAR 0 30
65691: PUSH
65692: LD_INT 2
65694: PUSH
65695: LD_INT 1
65697: NEG
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 3
65705: PUSH
65706: LD_INT 0
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: LD_INT 3
65715: PUSH
65716: LD_INT 1
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PUSH
65723: LD_INT 3
65725: PUSH
65726: LD_INT 1
65728: NEG
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 4
65736: PUSH
65737: LD_INT 0
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: PUSH
65744: LD_INT 4
65746: PUSH
65747: LD_INT 1
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: LD_INT 4
65756: PUSH
65757: LD_INT 1
65759: NEG
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: LD_INT 5
65767: PUSH
65768: LD_INT 0
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: PUSH
65775: LD_INT 5
65777: PUSH
65778: LD_INT 1
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: PUSH
65785: LD_INT 5
65787: PUSH
65788: LD_INT 1
65790: NEG
65791: PUSH
65792: EMPTY
65793: LIST
65794: LIST
65795: PUSH
65796: LD_INT 6
65798: PUSH
65799: LD_INT 0
65801: PUSH
65802: EMPTY
65803: LIST
65804: LIST
65805: PUSH
65806: LD_INT 6
65808: PUSH
65809: LD_INT 1
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: LIST
65820: LIST
65821: LIST
65822: LIST
65823: LIST
65824: LIST
65825: LIST
65826: LIST
65827: LIST
65828: LIST
65829: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65830: LD_ADDR_VAR 0 31
65834: PUSH
65835: LD_INT 3
65837: PUSH
65838: LD_INT 2
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: PUSH
65845: LD_INT 3
65847: PUSH
65848: LD_INT 3
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: PUSH
65855: LD_INT 2
65857: PUSH
65858: LD_INT 3
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PUSH
65865: LD_INT 4
65867: PUSH
65868: LD_INT 3
65870: PUSH
65871: EMPTY
65872: LIST
65873: LIST
65874: PUSH
65875: LD_INT 4
65877: PUSH
65878: LD_INT 4
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PUSH
65885: LD_INT 3
65887: PUSH
65888: LD_INT 4
65890: PUSH
65891: EMPTY
65892: LIST
65893: LIST
65894: PUSH
65895: LD_INT 5
65897: PUSH
65898: LD_INT 4
65900: PUSH
65901: EMPTY
65902: LIST
65903: LIST
65904: PUSH
65905: LD_INT 5
65907: PUSH
65908: LD_INT 5
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 4
65917: PUSH
65918: LD_INT 5
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: LD_INT 6
65927: PUSH
65928: LD_INT 5
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: PUSH
65935: LD_INT 6
65937: PUSH
65938: LD_INT 6
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: PUSH
65945: LD_INT 5
65947: PUSH
65948: LD_INT 6
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: LIST
65959: LIST
65960: LIST
65961: LIST
65962: LIST
65963: LIST
65964: LIST
65965: LIST
65966: LIST
65967: LIST
65968: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65969: LD_ADDR_VAR 0 32
65973: PUSH
65974: LD_INT 1
65976: PUSH
65977: LD_INT 3
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 0
65986: PUSH
65987: LD_INT 3
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 1
65996: NEG
65997: PUSH
65998: LD_INT 2
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: LD_INT 1
66007: PUSH
66008: LD_INT 4
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: PUSH
66015: LD_INT 0
66017: PUSH
66018: LD_INT 4
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: PUSH
66025: LD_INT 1
66027: NEG
66028: PUSH
66029: LD_INT 3
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: PUSH
66036: LD_INT 1
66038: PUSH
66039: LD_INT 5
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: LD_INT 0
66048: PUSH
66049: LD_INT 5
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: PUSH
66056: LD_INT 1
66058: NEG
66059: PUSH
66060: LD_INT 4
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 1
66069: PUSH
66070: LD_INT 6
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: PUSH
66077: LD_INT 0
66079: PUSH
66080: LD_INT 6
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PUSH
66087: LD_INT 1
66089: NEG
66090: PUSH
66091: LD_INT 5
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: LIST
66110: LIST
66111: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66112: LD_ADDR_VAR 0 33
66116: PUSH
66117: LD_INT 2
66119: NEG
66120: PUSH
66121: LD_INT 1
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: PUSH
66128: LD_INT 3
66130: NEG
66131: PUSH
66132: LD_INT 0
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 3
66141: NEG
66142: PUSH
66143: LD_INT 1
66145: NEG
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: PUSH
66151: LD_INT 3
66153: NEG
66154: PUSH
66155: LD_INT 1
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: PUSH
66162: LD_INT 4
66164: NEG
66165: PUSH
66166: LD_INT 0
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: LD_INT 4
66175: NEG
66176: PUSH
66177: LD_INT 1
66179: NEG
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: LD_INT 4
66187: NEG
66188: PUSH
66189: LD_INT 1
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: LD_INT 5
66198: NEG
66199: PUSH
66200: LD_INT 0
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: PUSH
66207: LD_INT 5
66209: NEG
66210: PUSH
66211: LD_INT 1
66213: NEG
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: LD_INT 5
66221: NEG
66222: PUSH
66223: LD_INT 1
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: PUSH
66230: LD_INT 6
66232: NEG
66233: PUSH
66234: LD_INT 0
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: PUSH
66241: LD_INT 6
66243: NEG
66244: PUSH
66245: LD_INT 1
66247: NEG
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: LIST
66257: LIST
66258: LIST
66259: LIST
66260: LIST
66261: LIST
66262: LIST
66263: LIST
66264: LIST
66265: LIST
66266: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66267: LD_ADDR_VAR 0 34
66271: PUSH
66272: LD_INT 2
66274: NEG
66275: PUSH
66276: LD_INT 3
66278: NEG
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: PUSH
66284: LD_INT 3
66286: NEG
66287: PUSH
66288: LD_INT 2
66290: NEG
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: PUSH
66296: LD_INT 3
66298: NEG
66299: PUSH
66300: LD_INT 3
66302: NEG
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: PUSH
66308: LD_INT 3
66310: NEG
66311: PUSH
66312: LD_INT 4
66314: NEG
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: PUSH
66320: LD_INT 4
66322: NEG
66323: PUSH
66324: LD_INT 3
66326: NEG
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: PUSH
66332: LD_INT 4
66334: NEG
66335: PUSH
66336: LD_INT 4
66338: NEG
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: PUSH
66344: LD_INT 4
66346: NEG
66347: PUSH
66348: LD_INT 5
66350: NEG
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PUSH
66356: LD_INT 5
66358: NEG
66359: PUSH
66360: LD_INT 4
66362: NEG
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: PUSH
66368: LD_INT 5
66370: NEG
66371: PUSH
66372: LD_INT 5
66374: NEG
66375: PUSH
66376: EMPTY
66377: LIST
66378: LIST
66379: PUSH
66380: LD_INT 5
66382: NEG
66383: PUSH
66384: LD_INT 6
66386: NEG
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: PUSH
66392: LD_INT 6
66394: NEG
66395: PUSH
66396: LD_INT 5
66398: NEG
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: PUSH
66404: LD_INT 6
66406: NEG
66407: PUSH
66408: LD_INT 6
66410: NEG
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: LIST
66420: LIST
66421: LIST
66422: LIST
66423: LIST
66424: LIST
66425: LIST
66426: LIST
66427: LIST
66428: LIST
66429: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66430: LD_ADDR_VAR 0 41
66434: PUSH
66435: LD_INT 0
66437: PUSH
66438: LD_INT 2
66440: NEG
66441: PUSH
66442: EMPTY
66443: LIST
66444: LIST
66445: PUSH
66446: LD_INT 1
66448: NEG
66449: PUSH
66450: LD_INT 3
66452: NEG
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PUSH
66458: LD_INT 1
66460: PUSH
66461: LD_INT 2
66463: NEG
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: LIST
66473: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66474: LD_ADDR_VAR 0 42
66478: PUSH
66479: LD_INT 2
66481: PUSH
66482: LD_INT 0
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: LD_INT 2
66491: PUSH
66492: LD_INT 1
66494: NEG
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PUSH
66500: LD_INT 3
66502: PUSH
66503: LD_INT 1
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: PUSH
66510: EMPTY
66511: LIST
66512: LIST
66513: LIST
66514: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66515: LD_ADDR_VAR 0 43
66519: PUSH
66520: LD_INT 2
66522: PUSH
66523: LD_INT 2
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: LD_INT 3
66532: PUSH
66533: LD_INT 2
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: LD_INT 2
66542: PUSH
66543: LD_INT 3
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: LIST
66554: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66555: LD_ADDR_VAR 0 44
66559: PUSH
66560: LD_INT 0
66562: PUSH
66563: LD_INT 2
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 1
66572: PUSH
66573: LD_INT 3
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: PUSH
66580: LD_INT 1
66582: NEG
66583: PUSH
66584: LD_INT 2
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: LIST
66595: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66596: LD_ADDR_VAR 0 45
66600: PUSH
66601: LD_INT 2
66603: NEG
66604: PUSH
66605: LD_INT 0
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: LD_INT 2
66614: NEG
66615: PUSH
66616: LD_INT 1
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: LD_INT 3
66625: NEG
66626: PUSH
66627: LD_INT 1
66629: NEG
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: LIST
66639: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66640: LD_ADDR_VAR 0 46
66644: PUSH
66645: LD_INT 2
66647: NEG
66648: PUSH
66649: LD_INT 2
66651: NEG
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: LD_INT 2
66659: NEG
66660: PUSH
66661: LD_INT 3
66663: NEG
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: PUSH
66669: LD_INT 3
66671: NEG
66672: PUSH
66673: LD_INT 2
66675: NEG
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: LIST
66685: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66686: LD_ADDR_VAR 0 47
66690: PUSH
66691: LD_INT 2
66693: NEG
66694: PUSH
66695: LD_INT 3
66697: NEG
66698: PUSH
66699: EMPTY
66700: LIST
66701: LIST
66702: PUSH
66703: LD_INT 1
66705: NEG
66706: PUSH
66707: LD_INT 3
66709: NEG
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66719: LD_ADDR_VAR 0 48
66723: PUSH
66724: LD_INT 1
66726: PUSH
66727: LD_INT 2
66729: NEG
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 2
66737: PUSH
66738: LD_INT 1
66740: NEG
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: EMPTY
66747: LIST
66748: LIST
66749: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66750: LD_ADDR_VAR 0 49
66754: PUSH
66755: LD_INT 3
66757: PUSH
66758: LD_INT 1
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: PUSH
66765: LD_INT 3
66767: PUSH
66768: LD_INT 2
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66779: LD_ADDR_VAR 0 50
66783: PUSH
66784: LD_INT 2
66786: PUSH
66787: LD_INT 3
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: PUSH
66794: LD_INT 1
66796: PUSH
66797: LD_INT 3
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66808: LD_ADDR_VAR 0 51
66812: PUSH
66813: LD_INT 1
66815: NEG
66816: PUSH
66817: LD_INT 2
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: PUSH
66824: LD_INT 2
66826: NEG
66827: PUSH
66828: LD_INT 1
66830: PUSH
66831: EMPTY
66832: LIST
66833: LIST
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66839: LD_ADDR_VAR 0 52
66843: PUSH
66844: LD_INT 3
66846: NEG
66847: PUSH
66848: LD_INT 1
66850: NEG
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: PUSH
66856: LD_INT 3
66858: NEG
66859: PUSH
66860: LD_INT 2
66862: NEG
66863: PUSH
66864: EMPTY
66865: LIST
66866: LIST
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66872: LD_ADDR_VAR 0 53
66876: PUSH
66877: LD_INT 1
66879: NEG
66880: PUSH
66881: LD_INT 3
66883: NEG
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: LD_INT 0
66891: PUSH
66892: LD_INT 3
66894: NEG
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 1
66902: PUSH
66903: LD_INT 2
66905: NEG
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: LIST
66915: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66916: LD_ADDR_VAR 0 54
66920: PUSH
66921: LD_INT 2
66923: PUSH
66924: LD_INT 1
66926: NEG
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: PUSH
66932: LD_INT 3
66934: PUSH
66935: LD_INT 0
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PUSH
66942: LD_INT 3
66944: PUSH
66945: LD_INT 1
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: EMPTY
66953: LIST
66954: LIST
66955: LIST
66956: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66957: LD_ADDR_VAR 0 55
66961: PUSH
66962: LD_INT 3
66964: PUSH
66965: LD_INT 2
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 3
66974: PUSH
66975: LD_INT 3
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 2
66984: PUSH
66985: LD_INT 3
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: LIST
66996: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66997: LD_ADDR_VAR 0 56
67001: PUSH
67002: LD_INT 1
67004: PUSH
67005: LD_INT 3
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: LD_INT 0
67014: PUSH
67015: LD_INT 3
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: PUSH
67022: LD_INT 1
67024: NEG
67025: PUSH
67026: LD_INT 2
67028: PUSH
67029: EMPTY
67030: LIST
67031: LIST
67032: PUSH
67033: EMPTY
67034: LIST
67035: LIST
67036: LIST
67037: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67038: LD_ADDR_VAR 0 57
67042: PUSH
67043: LD_INT 2
67045: NEG
67046: PUSH
67047: LD_INT 1
67049: PUSH
67050: EMPTY
67051: LIST
67052: LIST
67053: PUSH
67054: LD_INT 3
67056: NEG
67057: PUSH
67058: LD_INT 0
67060: PUSH
67061: EMPTY
67062: LIST
67063: LIST
67064: PUSH
67065: LD_INT 3
67067: NEG
67068: PUSH
67069: LD_INT 1
67071: NEG
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: LIST
67081: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67082: LD_ADDR_VAR 0 58
67086: PUSH
67087: LD_INT 2
67089: NEG
67090: PUSH
67091: LD_INT 3
67093: NEG
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: PUSH
67099: LD_INT 3
67101: NEG
67102: PUSH
67103: LD_INT 2
67105: NEG
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: PUSH
67111: LD_INT 3
67113: NEG
67114: PUSH
67115: LD_INT 3
67117: NEG
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: PUSH
67123: EMPTY
67124: LIST
67125: LIST
67126: LIST
67127: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67128: LD_ADDR_VAR 0 59
67132: PUSH
67133: LD_INT 1
67135: NEG
67136: PUSH
67137: LD_INT 2
67139: NEG
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: LD_INT 0
67147: PUSH
67148: LD_INT 2
67150: NEG
67151: PUSH
67152: EMPTY
67153: LIST
67154: LIST
67155: PUSH
67156: LD_INT 1
67158: PUSH
67159: LD_INT 1
67161: NEG
67162: PUSH
67163: EMPTY
67164: LIST
67165: LIST
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: LIST
67171: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67172: LD_ADDR_VAR 0 60
67176: PUSH
67177: LD_INT 1
67179: PUSH
67180: LD_INT 1
67182: NEG
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: PUSH
67188: LD_INT 2
67190: PUSH
67191: LD_INT 0
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: PUSH
67198: LD_INT 2
67200: PUSH
67201: LD_INT 1
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: PUSH
67208: EMPTY
67209: LIST
67210: LIST
67211: LIST
67212: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67213: LD_ADDR_VAR 0 61
67217: PUSH
67218: LD_INT 2
67220: PUSH
67221: LD_INT 1
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: PUSH
67228: LD_INT 2
67230: PUSH
67231: LD_INT 2
67233: PUSH
67234: EMPTY
67235: LIST
67236: LIST
67237: PUSH
67238: LD_INT 1
67240: PUSH
67241: LD_INT 2
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PUSH
67248: EMPTY
67249: LIST
67250: LIST
67251: LIST
67252: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67253: LD_ADDR_VAR 0 62
67257: PUSH
67258: LD_INT 1
67260: PUSH
67261: LD_INT 2
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: PUSH
67268: LD_INT 0
67270: PUSH
67271: LD_INT 2
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: PUSH
67278: LD_INT 1
67280: NEG
67281: PUSH
67282: LD_INT 1
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: LIST
67293: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67294: LD_ADDR_VAR 0 63
67298: PUSH
67299: LD_INT 1
67301: NEG
67302: PUSH
67303: LD_INT 1
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: PUSH
67310: LD_INT 2
67312: NEG
67313: PUSH
67314: LD_INT 0
67316: PUSH
67317: EMPTY
67318: LIST
67319: LIST
67320: PUSH
67321: LD_INT 2
67323: NEG
67324: PUSH
67325: LD_INT 1
67327: NEG
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: LIST
67337: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67338: LD_ADDR_VAR 0 64
67342: PUSH
67343: LD_INT 1
67345: NEG
67346: PUSH
67347: LD_INT 2
67349: NEG
67350: PUSH
67351: EMPTY
67352: LIST
67353: LIST
67354: PUSH
67355: LD_INT 2
67357: NEG
67358: PUSH
67359: LD_INT 1
67361: NEG
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: LD_INT 2
67369: NEG
67370: PUSH
67371: LD_INT 2
67373: NEG
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: PUSH
67379: EMPTY
67380: LIST
67381: LIST
67382: LIST
67383: ST_TO_ADDR
// end ; 2 :
67384: GO 70650
67386: LD_INT 2
67388: DOUBLE
67389: EQUAL
67390: IFTRUE 67394
67392: GO 70649
67394: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67395: LD_ADDR_VAR 0 29
67399: PUSH
67400: LD_INT 4
67402: PUSH
67403: LD_INT 0
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: LD_INT 4
67412: PUSH
67413: LD_INT 1
67415: NEG
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PUSH
67421: LD_INT 5
67423: PUSH
67424: LD_INT 0
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: LD_INT 5
67433: PUSH
67434: LD_INT 1
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: LD_INT 4
67443: PUSH
67444: LD_INT 1
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 3
67453: PUSH
67454: LD_INT 0
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: PUSH
67461: LD_INT 3
67463: PUSH
67464: LD_INT 1
67466: NEG
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: LD_INT 3
67474: PUSH
67475: LD_INT 2
67477: NEG
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: PUSH
67483: LD_INT 5
67485: PUSH
67486: LD_INT 2
67488: PUSH
67489: EMPTY
67490: LIST
67491: LIST
67492: PUSH
67493: LD_INT 3
67495: PUSH
67496: LD_INT 3
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: PUSH
67503: LD_INT 3
67505: PUSH
67506: LD_INT 2
67508: PUSH
67509: EMPTY
67510: LIST
67511: LIST
67512: PUSH
67513: LD_INT 4
67515: PUSH
67516: LD_INT 3
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: PUSH
67523: LD_INT 4
67525: PUSH
67526: LD_INT 4
67528: PUSH
67529: EMPTY
67530: LIST
67531: LIST
67532: PUSH
67533: LD_INT 3
67535: PUSH
67536: LD_INT 4
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: PUSH
67543: LD_INT 2
67545: PUSH
67546: LD_INT 3
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: PUSH
67553: LD_INT 2
67555: PUSH
67556: LD_INT 2
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: PUSH
67563: LD_INT 4
67565: PUSH
67566: LD_INT 2
67568: PUSH
67569: EMPTY
67570: LIST
67571: LIST
67572: PUSH
67573: LD_INT 2
67575: PUSH
67576: LD_INT 4
67578: PUSH
67579: EMPTY
67580: LIST
67581: LIST
67582: PUSH
67583: LD_INT 0
67585: PUSH
67586: LD_INT 4
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: PUSH
67593: LD_INT 0
67595: PUSH
67596: LD_INT 3
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: PUSH
67603: LD_INT 1
67605: PUSH
67606: LD_INT 4
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: PUSH
67613: LD_INT 1
67615: PUSH
67616: LD_INT 5
67618: PUSH
67619: EMPTY
67620: LIST
67621: LIST
67622: PUSH
67623: LD_INT 0
67625: PUSH
67626: LD_INT 5
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: PUSH
67633: LD_INT 1
67635: NEG
67636: PUSH
67637: LD_INT 4
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PUSH
67644: LD_INT 1
67646: NEG
67647: PUSH
67648: LD_INT 3
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: PUSH
67655: LD_INT 2
67657: PUSH
67658: LD_INT 5
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: PUSH
67665: LD_INT 2
67667: NEG
67668: PUSH
67669: LD_INT 3
67671: PUSH
67672: EMPTY
67673: LIST
67674: LIST
67675: PUSH
67676: LD_INT 3
67678: NEG
67679: PUSH
67680: LD_INT 0
67682: PUSH
67683: EMPTY
67684: LIST
67685: LIST
67686: PUSH
67687: LD_INT 3
67689: NEG
67690: PUSH
67691: LD_INT 1
67693: NEG
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: LD_INT 2
67701: NEG
67702: PUSH
67703: LD_INT 0
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: LD_INT 2
67712: NEG
67713: PUSH
67714: LD_INT 1
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: PUSH
67721: LD_INT 3
67723: NEG
67724: PUSH
67725: LD_INT 1
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: PUSH
67732: LD_INT 4
67734: NEG
67735: PUSH
67736: LD_INT 0
67738: PUSH
67739: EMPTY
67740: LIST
67741: LIST
67742: PUSH
67743: LD_INT 4
67745: NEG
67746: PUSH
67747: LD_INT 1
67749: NEG
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: PUSH
67755: LD_INT 4
67757: NEG
67758: PUSH
67759: LD_INT 2
67761: NEG
67762: PUSH
67763: EMPTY
67764: LIST
67765: LIST
67766: PUSH
67767: LD_INT 2
67769: NEG
67770: PUSH
67771: LD_INT 2
67773: PUSH
67774: EMPTY
67775: LIST
67776: LIST
67777: PUSH
67778: LD_INT 4
67780: NEG
67781: PUSH
67782: LD_INT 4
67784: NEG
67785: PUSH
67786: EMPTY
67787: LIST
67788: LIST
67789: PUSH
67790: LD_INT 4
67792: NEG
67793: PUSH
67794: LD_INT 5
67796: NEG
67797: PUSH
67798: EMPTY
67799: LIST
67800: LIST
67801: PUSH
67802: LD_INT 3
67804: NEG
67805: PUSH
67806: LD_INT 4
67808: NEG
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PUSH
67814: LD_INT 3
67816: NEG
67817: PUSH
67818: LD_INT 3
67820: NEG
67821: PUSH
67822: EMPTY
67823: LIST
67824: LIST
67825: PUSH
67826: LD_INT 4
67828: NEG
67829: PUSH
67830: LD_INT 3
67832: NEG
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: PUSH
67838: LD_INT 5
67840: NEG
67841: PUSH
67842: LD_INT 4
67844: NEG
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: PUSH
67850: LD_INT 5
67852: NEG
67853: PUSH
67854: LD_INT 5
67856: NEG
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: PUSH
67862: LD_INT 3
67864: NEG
67865: PUSH
67866: LD_INT 5
67868: NEG
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: PUSH
67874: LD_INT 5
67876: NEG
67877: PUSH
67878: LD_INT 3
67880: NEG
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: LIST
67890: LIST
67891: LIST
67892: LIST
67893: LIST
67894: LIST
67895: LIST
67896: LIST
67897: LIST
67898: LIST
67899: LIST
67900: LIST
67901: LIST
67902: LIST
67903: LIST
67904: LIST
67905: LIST
67906: LIST
67907: LIST
67908: LIST
67909: LIST
67910: LIST
67911: LIST
67912: LIST
67913: LIST
67914: LIST
67915: LIST
67916: LIST
67917: LIST
67918: LIST
67919: LIST
67920: LIST
67921: LIST
67922: LIST
67923: LIST
67924: LIST
67925: LIST
67926: LIST
67927: LIST
67928: LIST
67929: LIST
67930: LIST
67931: LIST
67932: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67933: LD_ADDR_VAR 0 30
67937: PUSH
67938: LD_INT 4
67940: PUSH
67941: LD_INT 4
67943: PUSH
67944: EMPTY
67945: LIST
67946: LIST
67947: PUSH
67948: LD_INT 4
67950: PUSH
67951: LD_INT 3
67953: PUSH
67954: EMPTY
67955: LIST
67956: LIST
67957: PUSH
67958: LD_INT 5
67960: PUSH
67961: LD_INT 4
67963: PUSH
67964: EMPTY
67965: LIST
67966: LIST
67967: PUSH
67968: LD_INT 5
67970: PUSH
67971: LD_INT 5
67973: PUSH
67974: EMPTY
67975: LIST
67976: LIST
67977: PUSH
67978: LD_INT 4
67980: PUSH
67981: LD_INT 5
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: LD_INT 3
67990: PUSH
67991: LD_INT 4
67993: PUSH
67994: EMPTY
67995: LIST
67996: LIST
67997: PUSH
67998: LD_INT 3
68000: PUSH
68001: LD_INT 3
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: PUSH
68008: LD_INT 5
68010: PUSH
68011: LD_INT 3
68013: PUSH
68014: EMPTY
68015: LIST
68016: LIST
68017: PUSH
68018: LD_INT 3
68020: PUSH
68021: LD_INT 5
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: PUSH
68028: LD_INT 0
68030: PUSH
68031: LD_INT 3
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: PUSH
68038: LD_INT 0
68040: PUSH
68041: LD_INT 2
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: PUSH
68048: LD_INT 1
68050: PUSH
68051: LD_INT 3
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: PUSH
68058: LD_INT 1
68060: PUSH
68061: LD_INT 4
68063: PUSH
68064: EMPTY
68065: LIST
68066: LIST
68067: PUSH
68068: LD_INT 0
68070: PUSH
68071: LD_INT 4
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: PUSH
68078: LD_INT 1
68080: NEG
68081: PUSH
68082: LD_INT 3
68084: PUSH
68085: EMPTY
68086: LIST
68087: LIST
68088: PUSH
68089: LD_INT 1
68091: NEG
68092: PUSH
68093: LD_INT 2
68095: PUSH
68096: EMPTY
68097: LIST
68098: LIST
68099: PUSH
68100: LD_INT 2
68102: PUSH
68103: LD_INT 4
68105: PUSH
68106: EMPTY
68107: LIST
68108: LIST
68109: PUSH
68110: LD_INT 2
68112: NEG
68113: PUSH
68114: LD_INT 2
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: PUSH
68121: LD_INT 4
68123: NEG
68124: PUSH
68125: LD_INT 0
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: PUSH
68132: LD_INT 4
68134: NEG
68135: PUSH
68136: LD_INT 1
68138: NEG
68139: PUSH
68140: EMPTY
68141: LIST
68142: LIST
68143: PUSH
68144: LD_INT 3
68146: NEG
68147: PUSH
68148: LD_INT 0
68150: PUSH
68151: EMPTY
68152: LIST
68153: LIST
68154: PUSH
68155: LD_INT 3
68157: NEG
68158: PUSH
68159: LD_INT 1
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: PUSH
68166: LD_INT 4
68168: NEG
68169: PUSH
68170: LD_INT 1
68172: PUSH
68173: EMPTY
68174: LIST
68175: LIST
68176: PUSH
68177: LD_INT 5
68179: NEG
68180: PUSH
68181: LD_INT 0
68183: PUSH
68184: EMPTY
68185: LIST
68186: LIST
68187: PUSH
68188: LD_INT 5
68190: NEG
68191: PUSH
68192: LD_INT 1
68194: NEG
68195: PUSH
68196: EMPTY
68197: LIST
68198: LIST
68199: PUSH
68200: LD_INT 5
68202: NEG
68203: PUSH
68204: LD_INT 2
68206: NEG
68207: PUSH
68208: EMPTY
68209: LIST
68210: LIST
68211: PUSH
68212: LD_INT 3
68214: NEG
68215: PUSH
68216: LD_INT 2
68218: PUSH
68219: EMPTY
68220: LIST
68221: LIST
68222: PUSH
68223: LD_INT 3
68225: NEG
68226: PUSH
68227: LD_INT 3
68229: NEG
68230: PUSH
68231: EMPTY
68232: LIST
68233: LIST
68234: PUSH
68235: LD_INT 3
68237: NEG
68238: PUSH
68239: LD_INT 4
68241: NEG
68242: PUSH
68243: EMPTY
68244: LIST
68245: LIST
68246: PUSH
68247: LD_INT 2
68249: NEG
68250: PUSH
68251: LD_INT 3
68253: NEG
68254: PUSH
68255: EMPTY
68256: LIST
68257: LIST
68258: PUSH
68259: LD_INT 2
68261: NEG
68262: PUSH
68263: LD_INT 2
68265: NEG
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: PUSH
68271: LD_INT 3
68273: NEG
68274: PUSH
68275: LD_INT 2
68277: NEG
68278: PUSH
68279: EMPTY
68280: LIST
68281: LIST
68282: PUSH
68283: LD_INT 4
68285: NEG
68286: PUSH
68287: LD_INT 3
68289: NEG
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: LD_INT 4
68297: NEG
68298: PUSH
68299: LD_INT 4
68301: NEG
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: PUSH
68307: LD_INT 2
68309: NEG
68310: PUSH
68311: LD_INT 4
68313: NEG
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: PUSH
68319: LD_INT 4
68321: NEG
68322: PUSH
68323: LD_INT 2
68325: NEG
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: PUSH
68331: LD_INT 0
68333: PUSH
68334: LD_INT 4
68336: NEG
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: PUSH
68342: LD_INT 0
68344: PUSH
68345: LD_INT 5
68347: NEG
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: PUSH
68353: LD_INT 1
68355: PUSH
68356: LD_INT 4
68358: NEG
68359: PUSH
68360: EMPTY
68361: LIST
68362: LIST
68363: PUSH
68364: LD_INT 1
68366: PUSH
68367: LD_INT 3
68369: NEG
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: PUSH
68375: LD_INT 0
68377: PUSH
68378: LD_INT 3
68380: NEG
68381: PUSH
68382: EMPTY
68383: LIST
68384: LIST
68385: PUSH
68386: LD_INT 1
68388: NEG
68389: PUSH
68390: LD_INT 4
68392: NEG
68393: PUSH
68394: EMPTY
68395: LIST
68396: LIST
68397: PUSH
68398: LD_INT 1
68400: NEG
68401: PUSH
68402: LD_INT 5
68404: NEG
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: PUSH
68410: LD_INT 2
68412: PUSH
68413: LD_INT 3
68415: NEG
68416: PUSH
68417: EMPTY
68418: LIST
68419: LIST
68420: PUSH
68421: LD_INT 2
68423: NEG
68424: PUSH
68425: LD_INT 5
68427: NEG
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: EMPTY
68434: LIST
68435: LIST
68436: LIST
68437: LIST
68438: LIST
68439: LIST
68440: LIST
68441: LIST
68442: LIST
68443: LIST
68444: LIST
68445: LIST
68446: LIST
68447: LIST
68448: LIST
68449: LIST
68450: LIST
68451: LIST
68452: LIST
68453: LIST
68454: LIST
68455: LIST
68456: LIST
68457: LIST
68458: LIST
68459: LIST
68460: LIST
68461: LIST
68462: LIST
68463: LIST
68464: LIST
68465: LIST
68466: LIST
68467: LIST
68468: LIST
68469: LIST
68470: LIST
68471: LIST
68472: LIST
68473: LIST
68474: LIST
68475: LIST
68476: LIST
68477: LIST
68478: LIST
68479: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68480: LD_ADDR_VAR 0 31
68484: PUSH
68485: LD_INT 0
68487: PUSH
68488: LD_INT 4
68490: PUSH
68491: EMPTY
68492: LIST
68493: LIST
68494: PUSH
68495: LD_INT 0
68497: PUSH
68498: LD_INT 3
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: PUSH
68505: LD_INT 1
68507: PUSH
68508: LD_INT 4
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: LD_INT 1
68517: PUSH
68518: LD_INT 5
68520: PUSH
68521: EMPTY
68522: LIST
68523: LIST
68524: PUSH
68525: LD_INT 0
68527: PUSH
68528: LD_INT 5
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: PUSH
68535: LD_INT 1
68537: NEG
68538: PUSH
68539: LD_INT 4
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: PUSH
68546: LD_INT 1
68548: NEG
68549: PUSH
68550: LD_INT 3
68552: PUSH
68553: EMPTY
68554: LIST
68555: LIST
68556: PUSH
68557: LD_INT 2
68559: PUSH
68560: LD_INT 5
68562: PUSH
68563: EMPTY
68564: LIST
68565: LIST
68566: PUSH
68567: LD_INT 2
68569: NEG
68570: PUSH
68571: LD_INT 3
68573: PUSH
68574: EMPTY
68575: LIST
68576: LIST
68577: PUSH
68578: LD_INT 3
68580: NEG
68581: PUSH
68582: LD_INT 0
68584: PUSH
68585: EMPTY
68586: LIST
68587: LIST
68588: PUSH
68589: LD_INT 3
68591: NEG
68592: PUSH
68593: LD_INT 1
68595: NEG
68596: PUSH
68597: EMPTY
68598: LIST
68599: LIST
68600: PUSH
68601: LD_INT 2
68603: NEG
68604: PUSH
68605: LD_INT 0
68607: PUSH
68608: EMPTY
68609: LIST
68610: LIST
68611: PUSH
68612: LD_INT 2
68614: NEG
68615: PUSH
68616: LD_INT 1
68618: PUSH
68619: EMPTY
68620: LIST
68621: LIST
68622: PUSH
68623: LD_INT 3
68625: NEG
68626: PUSH
68627: LD_INT 1
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: PUSH
68634: LD_INT 4
68636: NEG
68637: PUSH
68638: LD_INT 0
68640: PUSH
68641: EMPTY
68642: LIST
68643: LIST
68644: PUSH
68645: LD_INT 4
68647: NEG
68648: PUSH
68649: LD_INT 1
68651: NEG
68652: PUSH
68653: EMPTY
68654: LIST
68655: LIST
68656: PUSH
68657: LD_INT 4
68659: NEG
68660: PUSH
68661: LD_INT 2
68663: NEG
68664: PUSH
68665: EMPTY
68666: LIST
68667: LIST
68668: PUSH
68669: LD_INT 2
68671: NEG
68672: PUSH
68673: LD_INT 2
68675: PUSH
68676: EMPTY
68677: LIST
68678: LIST
68679: PUSH
68680: LD_INT 4
68682: NEG
68683: PUSH
68684: LD_INT 4
68686: NEG
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: PUSH
68692: LD_INT 4
68694: NEG
68695: PUSH
68696: LD_INT 5
68698: NEG
68699: PUSH
68700: EMPTY
68701: LIST
68702: LIST
68703: PUSH
68704: LD_INT 3
68706: NEG
68707: PUSH
68708: LD_INT 4
68710: NEG
68711: PUSH
68712: EMPTY
68713: LIST
68714: LIST
68715: PUSH
68716: LD_INT 3
68718: NEG
68719: PUSH
68720: LD_INT 3
68722: NEG
68723: PUSH
68724: EMPTY
68725: LIST
68726: LIST
68727: PUSH
68728: LD_INT 4
68730: NEG
68731: PUSH
68732: LD_INT 3
68734: NEG
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: PUSH
68740: LD_INT 5
68742: NEG
68743: PUSH
68744: LD_INT 4
68746: NEG
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: PUSH
68752: LD_INT 5
68754: NEG
68755: PUSH
68756: LD_INT 5
68758: NEG
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: PUSH
68764: LD_INT 3
68766: NEG
68767: PUSH
68768: LD_INT 5
68770: NEG
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: PUSH
68776: LD_INT 5
68778: NEG
68779: PUSH
68780: LD_INT 3
68782: NEG
68783: PUSH
68784: EMPTY
68785: LIST
68786: LIST
68787: PUSH
68788: LD_INT 0
68790: PUSH
68791: LD_INT 3
68793: NEG
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: PUSH
68799: LD_INT 0
68801: PUSH
68802: LD_INT 4
68804: NEG
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: LD_INT 1
68812: PUSH
68813: LD_INT 3
68815: NEG
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: PUSH
68821: LD_INT 1
68823: PUSH
68824: LD_INT 2
68826: NEG
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: PUSH
68832: LD_INT 0
68834: PUSH
68835: LD_INT 2
68837: NEG
68838: PUSH
68839: EMPTY
68840: LIST
68841: LIST
68842: PUSH
68843: LD_INT 1
68845: NEG
68846: PUSH
68847: LD_INT 3
68849: NEG
68850: PUSH
68851: EMPTY
68852: LIST
68853: LIST
68854: PUSH
68855: LD_INT 1
68857: NEG
68858: PUSH
68859: LD_INT 4
68861: NEG
68862: PUSH
68863: EMPTY
68864: LIST
68865: LIST
68866: PUSH
68867: LD_INT 2
68869: PUSH
68870: LD_INT 2
68872: NEG
68873: PUSH
68874: EMPTY
68875: LIST
68876: LIST
68877: PUSH
68878: LD_INT 2
68880: NEG
68881: PUSH
68882: LD_INT 4
68884: NEG
68885: PUSH
68886: EMPTY
68887: LIST
68888: LIST
68889: PUSH
68890: LD_INT 4
68892: PUSH
68893: LD_INT 0
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: PUSH
68900: LD_INT 4
68902: PUSH
68903: LD_INT 1
68905: NEG
68906: PUSH
68907: EMPTY
68908: LIST
68909: LIST
68910: PUSH
68911: LD_INT 5
68913: PUSH
68914: LD_INT 0
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: PUSH
68921: LD_INT 5
68923: PUSH
68924: LD_INT 1
68926: PUSH
68927: EMPTY
68928: LIST
68929: LIST
68930: PUSH
68931: LD_INT 4
68933: PUSH
68934: LD_INT 1
68936: PUSH
68937: EMPTY
68938: LIST
68939: LIST
68940: PUSH
68941: LD_INT 3
68943: PUSH
68944: LD_INT 0
68946: PUSH
68947: EMPTY
68948: LIST
68949: LIST
68950: PUSH
68951: LD_INT 3
68953: PUSH
68954: LD_INT 1
68956: NEG
68957: PUSH
68958: EMPTY
68959: LIST
68960: LIST
68961: PUSH
68962: LD_INT 3
68964: PUSH
68965: LD_INT 2
68967: NEG
68968: PUSH
68969: EMPTY
68970: LIST
68971: LIST
68972: PUSH
68973: LD_INT 5
68975: PUSH
68976: LD_INT 2
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: PUSH
68983: EMPTY
68984: LIST
68985: LIST
68986: LIST
68987: LIST
68988: LIST
68989: LIST
68990: LIST
68991: LIST
68992: LIST
68993: LIST
68994: LIST
68995: LIST
68996: LIST
68997: LIST
68998: LIST
68999: LIST
69000: LIST
69001: LIST
69002: LIST
69003: LIST
69004: LIST
69005: LIST
69006: LIST
69007: LIST
69008: LIST
69009: LIST
69010: LIST
69011: LIST
69012: LIST
69013: LIST
69014: LIST
69015: LIST
69016: LIST
69017: LIST
69018: LIST
69019: LIST
69020: LIST
69021: LIST
69022: LIST
69023: LIST
69024: LIST
69025: LIST
69026: LIST
69027: LIST
69028: LIST
69029: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69030: LD_ADDR_VAR 0 32
69034: PUSH
69035: LD_INT 4
69037: NEG
69038: PUSH
69039: LD_INT 0
69041: PUSH
69042: EMPTY
69043: LIST
69044: LIST
69045: PUSH
69046: LD_INT 4
69048: NEG
69049: PUSH
69050: LD_INT 1
69052: NEG
69053: PUSH
69054: EMPTY
69055: LIST
69056: LIST
69057: PUSH
69058: LD_INT 3
69060: NEG
69061: PUSH
69062: LD_INT 0
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: PUSH
69069: LD_INT 3
69071: NEG
69072: PUSH
69073: LD_INT 1
69075: PUSH
69076: EMPTY
69077: LIST
69078: LIST
69079: PUSH
69080: LD_INT 4
69082: NEG
69083: PUSH
69084: LD_INT 1
69086: PUSH
69087: EMPTY
69088: LIST
69089: LIST
69090: PUSH
69091: LD_INT 5
69093: NEG
69094: PUSH
69095: LD_INT 0
69097: PUSH
69098: EMPTY
69099: LIST
69100: LIST
69101: PUSH
69102: LD_INT 5
69104: NEG
69105: PUSH
69106: LD_INT 1
69108: NEG
69109: PUSH
69110: EMPTY
69111: LIST
69112: LIST
69113: PUSH
69114: LD_INT 5
69116: NEG
69117: PUSH
69118: LD_INT 2
69120: NEG
69121: PUSH
69122: EMPTY
69123: LIST
69124: LIST
69125: PUSH
69126: LD_INT 3
69128: NEG
69129: PUSH
69130: LD_INT 2
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: PUSH
69137: LD_INT 3
69139: NEG
69140: PUSH
69141: LD_INT 3
69143: NEG
69144: PUSH
69145: EMPTY
69146: LIST
69147: LIST
69148: PUSH
69149: LD_INT 3
69151: NEG
69152: PUSH
69153: LD_INT 4
69155: NEG
69156: PUSH
69157: EMPTY
69158: LIST
69159: LIST
69160: PUSH
69161: LD_INT 2
69163: NEG
69164: PUSH
69165: LD_INT 3
69167: NEG
69168: PUSH
69169: EMPTY
69170: LIST
69171: LIST
69172: PUSH
69173: LD_INT 2
69175: NEG
69176: PUSH
69177: LD_INT 2
69179: NEG
69180: PUSH
69181: EMPTY
69182: LIST
69183: LIST
69184: PUSH
69185: LD_INT 3
69187: NEG
69188: PUSH
69189: LD_INT 2
69191: NEG
69192: PUSH
69193: EMPTY
69194: LIST
69195: LIST
69196: PUSH
69197: LD_INT 4
69199: NEG
69200: PUSH
69201: LD_INT 3
69203: NEG
69204: PUSH
69205: EMPTY
69206: LIST
69207: LIST
69208: PUSH
69209: LD_INT 4
69211: NEG
69212: PUSH
69213: LD_INT 4
69215: NEG
69216: PUSH
69217: EMPTY
69218: LIST
69219: LIST
69220: PUSH
69221: LD_INT 2
69223: NEG
69224: PUSH
69225: LD_INT 4
69227: NEG
69228: PUSH
69229: EMPTY
69230: LIST
69231: LIST
69232: PUSH
69233: LD_INT 4
69235: NEG
69236: PUSH
69237: LD_INT 2
69239: NEG
69240: PUSH
69241: EMPTY
69242: LIST
69243: LIST
69244: PUSH
69245: LD_INT 0
69247: PUSH
69248: LD_INT 4
69250: NEG
69251: PUSH
69252: EMPTY
69253: LIST
69254: LIST
69255: PUSH
69256: LD_INT 0
69258: PUSH
69259: LD_INT 5
69261: NEG
69262: PUSH
69263: EMPTY
69264: LIST
69265: LIST
69266: PUSH
69267: LD_INT 1
69269: PUSH
69270: LD_INT 4
69272: NEG
69273: PUSH
69274: EMPTY
69275: LIST
69276: LIST
69277: PUSH
69278: LD_INT 1
69280: PUSH
69281: LD_INT 3
69283: NEG
69284: PUSH
69285: EMPTY
69286: LIST
69287: LIST
69288: PUSH
69289: LD_INT 0
69291: PUSH
69292: LD_INT 3
69294: NEG
69295: PUSH
69296: EMPTY
69297: LIST
69298: LIST
69299: PUSH
69300: LD_INT 1
69302: NEG
69303: PUSH
69304: LD_INT 4
69306: NEG
69307: PUSH
69308: EMPTY
69309: LIST
69310: LIST
69311: PUSH
69312: LD_INT 1
69314: NEG
69315: PUSH
69316: LD_INT 5
69318: NEG
69319: PUSH
69320: EMPTY
69321: LIST
69322: LIST
69323: PUSH
69324: LD_INT 2
69326: PUSH
69327: LD_INT 3
69329: NEG
69330: PUSH
69331: EMPTY
69332: LIST
69333: LIST
69334: PUSH
69335: LD_INT 2
69337: NEG
69338: PUSH
69339: LD_INT 5
69341: NEG
69342: PUSH
69343: EMPTY
69344: LIST
69345: LIST
69346: PUSH
69347: LD_INT 3
69349: PUSH
69350: LD_INT 0
69352: PUSH
69353: EMPTY
69354: LIST
69355: LIST
69356: PUSH
69357: LD_INT 3
69359: PUSH
69360: LD_INT 1
69362: NEG
69363: PUSH
69364: EMPTY
69365: LIST
69366: LIST
69367: PUSH
69368: LD_INT 4
69370: PUSH
69371: LD_INT 0
69373: PUSH
69374: EMPTY
69375: LIST
69376: LIST
69377: PUSH
69378: LD_INT 4
69380: PUSH
69381: LD_INT 1
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: PUSH
69388: LD_INT 3
69390: PUSH
69391: LD_INT 1
69393: PUSH
69394: EMPTY
69395: LIST
69396: LIST
69397: PUSH
69398: LD_INT 2
69400: PUSH
69401: LD_INT 0
69403: PUSH
69404: EMPTY
69405: LIST
69406: LIST
69407: PUSH
69408: LD_INT 2
69410: PUSH
69411: LD_INT 1
69413: NEG
69414: PUSH
69415: EMPTY
69416: LIST
69417: LIST
69418: PUSH
69419: LD_INT 2
69421: PUSH
69422: LD_INT 2
69424: NEG
69425: PUSH
69426: EMPTY
69427: LIST
69428: LIST
69429: PUSH
69430: LD_INT 4
69432: PUSH
69433: LD_INT 2
69435: PUSH
69436: EMPTY
69437: LIST
69438: LIST
69439: PUSH
69440: LD_INT 4
69442: PUSH
69443: LD_INT 4
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: PUSH
69450: LD_INT 4
69452: PUSH
69453: LD_INT 3
69455: PUSH
69456: EMPTY
69457: LIST
69458: LIST
69459: PUSH
69460: LD_INT 5
69462: PUSH
69463: LD_INT 4
69465: PUSH
69466: EMPTY
69467: LIST
69468: LIST
69469: PUSH
69470: LD_INT 5
69472: PUSH
69473: LD_INT 5
69475: PUSH
69476: EMPTY
69477: LIST
69478: LIST
69479: PUSH
69480: LD_INT 4
69482: PUSH
69483: LD_INT 5
69485: PUSH
69486: EMPTY
69487: LIST
69488: LIST
69489: PUSH
69490: LD_INT 3
69492: PUSH
69493: LD_INT 4
69495: PUSH
69496: EMPTY
69497: LIST
69498: LIST
69499: PUSH
69500: LD_INT 3
69502: PUSH
69503: LD_INT 3
69505: PUSH
69506: EMPTY
69507: LIST
69508: LIST
69509: PUSH
69510: LD_INT 5
69512: PUSH
69513: LD_INT 3
69515: PUSH
69516: EMPTY
69517: LIST
69518: LIST
69519: PUSH
69520: LD_INT 3
69522: PUSH
69523: LD_INT 5
69525: PUSH
69526: EMPTY
69527: LIST
69528: LIST
69529: PUSH
69530: EMPTY
69531: LIST
69532: LIST
69533: LIST
69534: LIST
69535: LIST
69536: LIST
69537: LIST
69538: LIST
69539: LIST
69540: LIST
69541: LIST
69542: LIST
69543: LIST
69544: LIST
69545: LIST
69546: LIST
69547: LIST
69548: LIST
69549: LIST
69550: LIST
69551: LIST
69552: LIST
69553: LIST
69554: LIST
69555: LIST
69556: LIST
69557: LIST
69558: LIST
69559: LIST
69560: LIST
69561: LIST
69562: LIST
69563: LIST
69564: LIST
69565: LIST
69566: LIST
69567: LIST
69568: LIST
69569: LIST
69570: LIST
69571: LIST
69572: LIST
69573: LIST
69574: LIST
69575: LIST
69576: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69577: LD_ADDR_VAR 0 33
69581: PUSH
69582: LD_INT 4
69584: NEG
69585: PUSH
69586: LD_INT 4
69588: NEG
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: PUSH
69594: LD_INT 4
69596: NEG
69597: PUSH
69598: LD_INT 5
69600: NEG
69601: PUSH
69602: EMPTY
69603: LIST
69604: LIST
69605: PUSH
69606: LD_INT 3
69608: NEG
69609: PUSH
69610: LD_INT 4
69612: NEG
69613: PUSH
69614: EMPTY
69615: LIST
69616: LIST
69617: PUSH
69618: LD_INT 3
69620: NEG
69621: PUSH
69622: LD_INT 3
69624: NEG
69625: PUSH
69626: EMPTY
69627: LIST
69628: LIST
69629: PUSH
69630: LD_INT 4
69632: NEG
69633: PUSH
69634: LD_INT 3
69636: NEG
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: PUSH
69642: LD_INT 5
69644: NEG
69645: PUSH
69646: LD_INT 4
69648: NEG
69649: PUSH
69650: EMPTY
69651: LIST
69652: LIST
69653: PUSH
69654: LD_INT 5
69656: NEG
69657: PUSH
69658: LD_INT 5
69660: NEG
69661: PUSH
69662: EMPTY
69663: LIST
69664: LIST
69665: PUSH
69666: LD_INT 3
69668: NEG
69669: PUSH
69670: LD_INT 5
69672: NEG
69673: PUSH
69674: EMPTY
69675: LIST
69676: LIST
69677: PUSH
69678: LD_INT 5
69680: NEG
69681: PUSH
69682: LD_INT 3
69684: NEG
69685: PUSH
69686: EMPTY
69687: LIST
69688: LIST
69689: PUSH
69690: LD_INT 0
69692: PUSH
69693: LD_INT 3
69695: NEG
69696: PUSH
69697: EMPTY
69698: LIST
69699: LIST
69700: PUSH
69701: LD_INT 0
69703: PUSH
69704: LD_INT 4
69706: NEG
69707: PUSH
69708: EMPTY
69709: LIST
69710: LIST
69711: PUSH
69712: LD_INT 1
69714: PUSH
69715: LD_INT 3
69717: NEG
69718: PUSH
69719: EMPTY
69720: LIST
69721: LIST
69722: PUSH
69723: LD_INT 1
69725: PUSH
69726: LD_INT 2
69728: NEG
69729: PUSH
69730: EMPTY
69731: LIST
69732: LIST
69733: PUSH
69734: LD_INT 0
69736: PUSH
69737: LD_INT 2
69739: NEG
69740: PUSH
69741: EMPTY
69742: LIST
69743: LIST
69744: PUSH
69745: LD_INT 1
69747: NEG
69748: PUSH
69749: LD_INT 3
69751: NEG
69752: PUSH
69753: EMPTY
69754: LIST
69755: LIST
69756: PUSH
69757: LD_INT 1
69759: NEG
69760: PUSH
69761: LD_INT 4
69763: NEG
69764: PUSH
69765: EMPTY
69766: LIST
69767: LIST
69768: PUSH
69769: LD_INT 2
69771: PUSH
69772: LD_INT 2
69774: NEG
69775: PUSH
69776: EMPTY
69777: LIST
69778: LIST
69779: PUSH
69780: LD_INT 2
69782: NEG
69783: PUSH
69784: LD_INT 4
69786: NEG
69787: PUSH
69788: EMPTY
69789: LIST
69790: LIST
69791: PUSH
69792: LD_INT 4
69794: PUSH
69795: LD_INT 0
69797: PUSH
69798: EMPTY
69799: LIST
69800: LIST
69801: PUSH
69802: LD_INT 4
69804: PUSH
69805: LD_INT 1
69807: NEG
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: PUSH
69813: LD_INT 5
69815: PUSH
69816: LD_INT 0
69818: PUSH
69819: EMPTY
69820: LIST
69821: LIST
69822: PUSH
69823: LD_INT 5
69825: PUSH
69826: LD_INT 1
69828: PUSH
69829: EMPTY
69830: LIST
69831: LIST
69832: PUSH
69833: LD_INT 4
69835: PUSH
69836: LD_INT 1
69838: PUSH
69839: EMPTY
69840: LIST
69841: LIST
69842: PUSH
69843: LD_INT 3
69845: PUSH
69846: LD_INT 0
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: PUSH
69853: LD_INT 3
69855: PUSH
69856: LD_INT 1
69858: NEG
69859: PUSH
69860: EMPTY
69861: LIST
69862: LIST
69863: PUSH
69864: LD_INT 3
69866: PUSH
69867: LD_INT 2
69869: NEG
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: PUSH
69875: LD_INT 5
69877: PUSH
69878: LD_INT 2
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: PUSH
69885: LD_INT 3
69887: PUSH
69888: LD_INT 3
69890: PUSH
69891: EMPTY
69892: LIST
69893: LIST
69894: PUSH
69895: LD_INT 3
69897: PUSH
69898: LD_INT 2
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: PUSH
69905: LD_INT 4
69907: PUSH
69908: LD_INT 3
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: PUSH
69915: LD_INT 4
69917: PUSH
69918: LD_INT 4
69920: PUSH
69921: EMPTY
69922: LIST
69923: LIST
69924: PUSH
69925: LD_INT 3
69927: PUSH
69928: LD_INT 4
69930: PUSH
69931: EMPTY
69932: LIST
69933: LIST
69934: PUSH
69935: LD_INT 2
69937: PUSH
69938: LD_INT 3
69940: PUSH
69941: EMPTY
69942: LIST
69943: LIST
69944: PUSH
69945: LD_INT 2
69947: PUSH
69948: LD_INT 2
69950: PUSH
69951: EMPTY
69952: LIST
69953: LIST
69954: PUSH
69955: LD_INT 4
69957: PUSH
69958: LD_INT 2
69960: PUSH
69961: EMPTY
69962: LIST
69963: LIST
69964: PUSH
69965: LD_INT 2
69967: PUSH
69968: LD_INT 4
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: PUSH
69975: LD_INT 0
69977: PUSH
69978: LD_INT 4
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: PUSH
69985: LD_INT 0
69987: PUSH
69988: LD_INT 3
69990: PUSH
69991: EMPTY
69992: LIST
69993: LIST
69994: PUSH
69995: LD_INT 1
69997: PUSH
69998: LD_INT 4
70000: PUSH
70001: EMPTY
70002: LIST
70003: LIST
70004: PUSH
70005: LD_INT 1
70007: PUSH
70008: LD_INT 5
70010: PUSH
70011: EMPTY
70012: LIST
70013: LIST
70014: PUSH
70015: LD_INT 0
70017: PUSH
70018: LD_INT 5
70020: PUSH
70021: EMPTY
70022: LIST
70023: LIST
70024: PUSH
70025: LD_INT 1
70027: NEG
70028: PUSH
70029: LD_INT 4
70031: PUSH
70032: EMPTY
70033: LIST
70034: LIST
70035: PUSH
70036: LD_INT 1
70038: NEG
70039: PUSH
70040: LD_INT 3
70042: PUSH
70043: EMPTY
70044: LIST
70045: LIST
70046: PUSH
70047: LD_INT 2
70049: PUSH
70050: LD_INT 5
70052: PUSH
70053: EMPTY
70054: LIST
70055: LIST
70056: PUSH
70057: LD_INT 2
70059: NEG
70060: PUSH
70061: LD_INT 3
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: PUSH
70068: EMPTY
70069: LIST
70070: LIST
70071: LIST
70072: LIST
70073: LIST
70074: LIST
70075: LIST
70076: LIST
70077: LIST
70078: LIST
70079: LIST
70080: LIST
70081: LIST
70082: LIST
70083: LIST
70084: LIST
70085: LIST
70086: LIST
70087: LIST
70088: LIST
70089: LIST
70090: LIST
70091: LIST
70092: LIST
70093: LIST
70094: LIST
70095: LIST
70096: LIST
70097: LIST
70098: LIST
70099: LIST
70100: LIST
70101: LIST
70102: LIST
70103: LIST
70104: LIST
70105: LIST
70106: LIST
70107: LIST
70108: LIST
70109: LIST
70110: LIST
70111: LIST
70112: LIST
70113: LIST
70114: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70115: LD_ADDR_VAR 0 34
70119: PUSH
70120: LD_INT 0
70122: PUSH
70123: LD_INT 4
70125: NEG
70126: PUSH
70127: EMPTY
70128: LIST
70129: LIST
70130: PUSH
70131: LD_INT 0
70133: PUSH
70134: LD_INT 5
70136: NEG
70137: PUSH
70138: EMPTY
70139: LIST
70140: LIST
70141: PUSH
70142: LD_INT 1
70144: PUSH
70145: LD_INT 4
70147: NEG
70148: PUSH
70149: EMPTY
70150: LIST
70151: LIST
70152: PUSH
70153: LD_INT 1
70155: PUSH
70156: LD_INT 3
70158: NEG
70159: PUSH
70160: EMPTY
70161: LIST
70162: LIST
70163: PUSH
70164: LD_INT 0
70166: PUSH
70167: LD_INT 3
70169: NEG
70170: PUSH
70171: EMPTY
70172: LIST
70173: LIST
70174: PUSH
70175: LD_INT 1
70177: NEG
70178: PUSH
70179: LD_INT 4
70181: NEG
70182: PUSH
70183: EMPTY
70184: LIST
70185: LIST
70186: PUSH
70187: LD_INT 1
70189: NEG
70190: PUSH
70191: LD_INT 5
70193: NEG
70194: PUSH
70195: EMPTY
70196: LIST
70197: LIST
70198: PUSH
70199: LD_INT 2
70201: PUSH
70202: LD_INT 3
70204: NEG
70205: PUSH
70206: EMPTY
70207: LIST
70208: LIST
70209: PUSH
70210: LD_INT 2
70212: NEG
70213: PUSH
70214: LD_INT 5
70216: NEG
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: LD_INT 3
70224: PUSH
70225: LD_INT 0
70227: PUSH
70228: EMPTY
70229: LIST
70230: LIST
70231: PUSH
70232: LD_INT 3
70234: PUSH
70235: LD_INT 1
70237: NEG
70238: PUSH
70239: EMPTY
70240: LIST
70241: LIST
70242: PUSH
70243: LD_INT 4
70245: PUSH
70246: LD_INT 0
70248: PUSH
70249: EMPTY
70250: LIST
70251: LIST
70252: PUSH
70253: LD_INT 4
70255: PUSH
70256: LD_INT 1
70258: PUSH
70259: EMPTY
70260: LIST
70261: LIST
70262: PUSH
70263: LD_INT 3
70265: PUSH
70266: LD_INT 1
70268: PUSH
70269: EMPTY
70270: LIST
70271: LIST
70272: PUSH
70273: LD_INT 2
70275: PUSH
70276: LD_INT 0
70278: PUSH
70279: EMPTY
70280: LIST
70281: LIST
70282: PUSH
70283: LD_INT 2
70285: PUSH
70286: LD_INT 1
70288: NEG
70289: PUSH
70290: EMPTY
70291: LIST
70292: LIST
70293: PUSH
70294: LD_INT 2
70296: PUSH
70297: LD_INT 2
70299: NEG
70300: PUSH
70301: EMPTY
70302: LIST
70303: LIST
70304: PUSH
70305: LD_INT 4
70307: PUSH
70308: LD_INT 2
70310: PUSH
70311: EMPTY
70312: LIST
70313: LIST
70314: PUSH
70315: LD_INT 4
70317: PUSH
70318: LD_INT 4
70320: PUSH
70321: EMPTY
70322: LIST
70323: LIST
70324: PUSH
70325: LD_INT 4
70327: PUSH
70328: LD_INT 3
70330: PUSH
70331: EMPTY
70332: LIST
70333: LIST
70334: PUSH
70335: LD_INT 5
70337: PUSH
70338: LD_INT 4
70340: PUSH
70341: EMPTY
70342: LIST
70343: LIST
70344: PUSH
70345: LD_INT 5
70347: PUSH
70348: LD_INT 5
70350: PUSH
70351: EMPTY
70352: LIST
70353: LIST
70354: PUSH
70355: LD_INT 4
70357: PUSH
70358: LD_INT 5
70360: PUSH
70361: EMPTY
70362: LIST
70363: LIST
70364: PUSH
70365: LD_INT 3
70367: PUSH
70368: LD_INT 4
70370: PUSH
70371: EMPTY
70372: LIST
70373: LIST
70374: PUSH
70375: LD_INT 3
70377: PUSH
70378: LD_INT 3
70380: PUSH
70381: EMPTY
70382: LIST
70383: LIST
70384: PUSH
70385: LD_INT 5
70387: PUSH
70388: LD_INT 3
70390: PUSH
70391: EMPTY
70392: LIST
70393: LIST
70394: PUSH
70395: LD_INT 3
70397: PUSH
70398: LD_INT 5
70400: PUSH
70401: EMPTY
70402: LIST
70403: LIST
70404: PUSH
70405: LD_INT 0
70407: PUSH
70408: LD_INT 3
70410: PUSH
70411: EMPTY
70412: LIST
70413: LIST
70414: PUSH
70415: LD_INT 0
70417: PUSH
70418: LD_INT 2
70420: PUSH
70421: EMPTY
70422: LIST
70423: LIST
70424: PUSH
70425: LD_INT 1
70427: PUSH
70428: LD_INT 3
70430: PUSH
70431: EMPTY
70432: LIST
70433: LIST
70434: PUSH
70435: LD_INT 1
70437: PUSH
70438: LD_INT 4
70440: PUSH
70441: EMPTY
70442: LIST
70443: LIST
70444: PUSH
70445: LD_INT 0
70447: PUSH
70448: LD_INT 4
70450: PUSH
70451: EMPTY
70452: LIST
70453: LIST
70454: PUSH
70455: LD_INT 1
70457: NEG
70458: PUSH
70459: LD_INT 3
70461: PUSH
70462: EMPTY
70463: LIST
70464: LIST
70465: PUSH
70466: LD_INT 1
70468: NEG
70469: PUSH
70470: LD_INT 2
70472: PUSH
70473: EMPTY
70474: LIST
70475: LIST
70476: PUSH
70477: LD_INT 2
70479: PUSH
70480: LD_INT 4
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: PUSH
70487: LD_INT 2
70489: NEG
70490: PUSH
70491: LD_INT 2
70493: PUSH
70494: EMPTY
70495: LIST
70496: LIST
70497: PUSH
70498: LD_INT 4
70500: NEG
70501: PUSH
70502: LD_INT 0
70504: PUSH
70505: EMPTY
70506: LIST
70507: LIST
70508: PUSH
70509: LD_INT 4
70511: NEG
70512: PUSH
70513: LD_INT 1
70515: NEG
70516: PUSH
70517: EMPTY
70518: LIST
70519: LIST
70520: PUSH
70521: LD_INT 3
70523: NEG
70524: PUSH
70525: LD_INT 0
70527: PUSH
70528: EMPTY
70529: LIST
70530: LIST
70531: PUSH
70532: LD_INT 3
70534: NEG
70535: PUSH
70536: LD_INT 1
70538: PUSH
70539: EMPTY
70540: LIST
70541: LIST
70542: PUSH
70543: LD_INT 4
70545: NEG
70546: PUSH
70547: LD_INT 1
70549: PUSH
70550: EMPTY
70551: LIST
70552: LIST
70553: PUSH
70554: LD_INT 5
70556: NEG
70557: PUSH
70558: LD_INT 0
70560: PUSH
70561: EMPTY
70562: LIST
70563: LIST
70564: PUSH
70565: LD_INT 5
70567: NEG
70568: PUSH
70569: LD_INT 1
70571: NEG
70572: PUSH
70573: EMPTY
70574: LIST
70575: LIST
70576: PUSH
70577: LD_INT 5
70579: NEG
70580: PUSH
70581: LD_INT 2
70583: NEG
70584: PUSH
70585: EMPTY
70586: LIST
70587: LIST
70588: PUSH
70589: LD_INT 3
70591: NEG
70592: PUSH
70593: LD_INT 2
70595: PUSH
70596: EMPTY
70597: LIST
70598: LIST
70599: PUSH
70600: EMPTY
70601: LIST
70602: LIST
70603: LIST
70604: LIST
70605: LIST
70606: LIST
70607: LIST
70608: LIST
70609: LIST
70610: LIST
70611: LIST
70612: LIST
70613: LIST
70614: LIST
70615: LIST
70616: LIST
70617: LIST
70618: LIST
70619: LIST
70620: LIST
70621: LIST
70622: LIST
70623: LIST
70624: LIST
70625: LIST
70626: LIST
70627: LIST
70628: LIST
70629: LIST
70630: LIST
70631: LIST
70632: LIST
70633: LIST
70634: LIST
70635: LIST
70636: LIST
70637: LIST
70638: LIST
70639: LIST
70640: LIST
70641: LIST
70642: LIST
70643: LIST
70644: LIST
70645: LIST
70646: ST_TO_ADDR
// end ; end ;
70647: GO 70650
70649: POP
// case btype of b_depot , b_warehouse :
70650: LD_VAR 0 1
70654: PUSH
70655: LD_INT 0
70657: DOUBLE
70658: EQUAL
70659: IFTRUE 70669
70661: LD_INT 1
70663: DOUBLE
70664: EQUAL
70665: IFTRUE 70669
70667: GO 70870
70669: POP
// case nation of nation_american :
70670: LD_VAR 0 5
70674: PUSH
70675: LD_INT 1
70677: DOUBLE
70678: EQUAL
70679: IFTRUE 70683
70681: GO 70739
70683: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70684: LD_ADDR_VAR 0 9
70688: PUSH
70689: LD_VAR 0 11
70693: PUSH
70694: LD_VAR 0 12
70698: PUSH
70699: LD_VAR 0 13
70703: PUSH
70704: LD_VAR 0 14
70708: PUSH
70709: LD_VAR 0 15
70713: PUSH
70714: LD_VAR 0 16
70718: PUSH
70719: EMPTY
70720: LIST
70721: LIST
70722: LIST
70723: LIST
70724: LIST
70725: LIST
70726: PUSH
70727: LD_VAR 0 4
70731: PUSH
70732: LD_INT 1
70734: PLUS
70735: ARRAY
70736: ST_TO_ADDR
70737: GO 70868
70739: LD_INT 2
70741: DOUBLE
70742: EQUAL
70743: IFTRUE 70747
70745: GO 70803
70747: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70748: LD_ADDR_VAR 0 9
70752: PUSH
70753: LD_VAR 0 17
70757: PUSH
70758: LD_VAR 0 18
70762: PUSH
70763: LD_VAR 0 19
70767: PUSH
70768: LD_VAR 0 20
70772: PUSH
70773: LD_VAR 0 21
70777: PUSH
70778: LD_VAR 0 22
70782: PUSH
70783: EMPTY
70784: LIST
70785: LIST
70786: LIST
70787: LIST
70788: LIST
70789: LIST
70790: PUSH
70791: LD_VAR 0 4
70795: PUSH
70796: LD_INT 1
70798: PLUS
70799: ARRAY
70800: ST_TO_ADDR
70801: GO 70868
70803: LD_INT 3
70805: DOUBLE
70806: EQUAL
70807: IFTRUE 70811
70809: GO 70867
70811: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70812: LD_ADDR_VAR 0 9
70816: PUSH
70817: LD_VAR 0 23
70821: PUSH
70822: LD_VAR 0 24
70826: PUSH
70827: LD_VAR 0 25
70831: PUSH
70832: LD_VAR 0 26
70836: PUSH
70837: LD_VAR 0 27
70841: PUSH
70842: LD_VAR 0 28
70846: PUSH
70847: EMPTY
70848: LIST
70849: LIST
70850: LIST
70851: LIST
70852: LIST
70853: LIST
70854: PUSH
70855: LD_VAR 0 4
70859: PUSH
70860: LD_INT 1
70862: PLUS
70863: ARRAY
70864: ST_TO_ADDR
70865: GO 70868
70867: POP
70868: GO 71423
70870: LD_INT 2
70872: DOUBLE
70873: EQUAL
70874: IFTRUE 70884
70876: LD_INT 3
70878: DOUBLE
70879: EQUAL
70880: IFTRUE 70884
70882: GO 70940
70884: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70885: LD_ADDR_VAR 0 9
70889: PUSH
70890: LD_VAR 0 29
70894: PUSH
70895: LD_VAR 0 30
70899: PUSH
70900: LD_VAR 0 31
70904: PUSH
70905: LD_VAR 0 32
70909: PUSH
70910: LD_VAR 0 33
70914: PUSH
70915: LD_VAR 0 34
70919: PUSH
70920: EMPTY
70921: LIST
70922: LIST
70923: LIST
70924: LIST
70925: LIST
70926: LIST
70927: PUSH
70928: LD_VAR 0 4
70932: PUSH
70933: LD_INT 1
70935: PLUS
70936: ARRAY
70937: ST_TO_ADDR
70938: GO 71423
70940: LD_INT 16
70942: DOUBLE
70943: EQUAL
70944: IFTRUE 71002
70946: LD_INT 17
70948: DOUBLE
70949: EQUAL
70950: IFTRUE 71002
70952: LD_INT 18
70954: DOUBLE
70955: EQUAL
70956: IFTRUE 71002
70958: LD_INT 19
70960: DOUBLE
70961: EQUAL
70962: IFTRUE 71002
70964: LD_INT 22
70966: DOUBLE
70967: EQUAL
70968: IFTRUE 71002
70970: LD_INT 20
70972: DOUBLE
70973: EQUAL
70974: IFTRUE 71002
70976: LD_INT 21
70978: DOUBLE
70979: EQUAL
70980: IFTRUE 71002
70982: LD_INT 23
70984: DOUBLE
70985: EQUAL
70986: IFTRUE 71002
70988: LD_INT 24
70990: DOUBLE
70991: EQUAL
70992: IFTRUE 71002
70994: LD_INT 25
70996: DOUBLE
70997: EQUAL
70998: IFTRUE 71002
71000: GO 71058
71002: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71003: LD_ADDR_VAR 0 9
71007: PUSH
71008: LD_VAR 0 35
71012: PUSH
71013: LD_VAR 0 36
71017: PUSH
71018: LD_VAR 0 37
71022: PUSH
71023: LD_VAR 0 38
71027: PUSH
71028: LD_VAR 0 39
71032: PUSH
71033: LD_VAR 0 40
71037: PUSH
71038: EMPTY
71039: LIST
71040: LIST
71041: LIST
71042: LIST
71043: LIST
71044: LIST
71045: PUSH
71046: LD_VAR 0 4
71050: PUSH
71051: LD_INT 1
71053: PLUS
71054: ARRAY
71055: ST_TO_ADDR
71056: GO 71423
71058: LD_INT 6
71060: DOUBLE
71061: EQUAL
71062: IFTRUE 71114
71064: LD_INT 7
71066: DOUBLE
71067: EQUAL
71068: IFTRUE 71114
71070: LD_INT 8
71072: DOUBLE
71073: EQUAL
71074: IFTRUE 71114
71076: LD_INT 13
71078: DOUBLE
71079: EQUAL
71080: IFTRUE 71114
71082: LD_INT 12
71084: DOUBLE
71085: EQUAL
71086: IFTRUE 71114
71088: LD_INT 15
71090: DOUBLE
71091: EQUAL
71092: IFTRUE 71114
71094: LD_INT 11
71096: DOUBLE
71097: EQUAL
71098: IFTRUE 71114
71100: LD_INT 14
71102: DOUBLE
71103: EQUAL
71104: IFTRUE 71114
71106: LD_INT 10
71108: DOUBLE
71109: EQUAL
71110: IFTRUE 71114
71112: GO 71170
71114: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71115: LD_ADDR_VAR 0 9
71119: PUSH
71120: LD_VAR 0 41
71124: PUSH
71125: LD_VAR 0 42
71129: PUSH
71130: LD_VAR 0 43
71134: PUSH
71135: LD_VAR 0 44
71139: PUSH
71140: LD_VAR 0 45
71144: PUSH
71145: LD_VAR 0 46
71149: PUSH
71150: EMPTY
71151: LIST
71152: LIST
71153: LIST
71154: LIST
71155: LIST
71156: LIST
71157: PUSH
71158: LD_VAR 0 4
71162: PUSH
71163: LD_INT 1
71165: PLUS
71166: ARRAY
71167: ST_TO_ADDR
71168: GO 71423
71170: LD_INT 36
71172: DOUBLE
71173: EQUAL
71174: IFTRUE 71178
71176: GO 71234
71178: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71179: LD_ADDR_VAR 0 9
71183: PUSH
71184: LD_VAR 0 47
71188: PUSH
71189: LD_VAR 0 48
71193: PUSH
71194: LD_VAR 0 49
71198: PUSH
71199: LD_VAR 0 50
71203: PUSH
71204: LD_VAR 0 51
71208: PUSH
71209: LD_VAR 0 52
71213: PUSH
71214: EMPTY
71215: LIST
71216: LIST
71217: LIST
71218: LIST
71219: LIST
71220: LIST
71221: PUSH
71222: LD_VAR 0 4
71226: PUSH
71227: LD_INT 1
71229: PLUS
71230: ARRAY
71231: ST_TO_ADDR
71232: GO 71423
71234: LD_INT 4
71236: DOUBLE
71237: EQUAL
71238: IFTRUE 71260
71240: LD_INT 5
71242: DOUBLE
71243: EQUAL
71244: IFTRUE 71260
71246: LD_INT 34
71248: DOUBLE
71249: EQUAL
71250: IFTRUE 71260
71252: LD_INT 37
71254: DOUBLE
71255: EQUAL
71256: IFTRUE 71260
71258: GO 71316
71260: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71261: LD_ADDR_VAR 0 9
71265: PUSH
71266: LD_VAR 0 53
71270: PUSH
71271: LD_VAR 0 54
71275: PUSH
71276: LD_VAR 0 55
71280: PUSH
71281: LD_VAR 0 56
71285: PUSH
71286: LD_VAR 0 57
71290: PUSH
71291: LD_VAR 0 58
71295: PUSH
71296: EMPTY
71297: LIST
71298: LIST
71299: LIST
71300: LIST
71301: LIST
71302: LIST
71303: PUSH
71304: LD_VAR 0 4
71308: PUSH
71309: LD_INT 1
71311: PLUS
71312: ARRAY
71313: ST_TO_ADDR
71314: GO 71423
71316: LD_INT 31
71318: DOUBLE
71319: EQUAL
71320: IFTRUE 71366
71322: LD_INT 32
71324: DOUBLE
71325: EQUAL
71326: IFTRUE 71366
71328: LD_INT 33
71330: DOUBLE
71331: EQUAL
71332: IFTRUE 71366
71334: LD_INT 27
71336: DOUBLE
71337: EQUAL
71338: IFTRUE 71366
71340: LD_INT 26
71342: DOUBLE
71343: EQUAL
71344: IFTRUE 71366
71346: LD_INT 28
71348: DOUBLE
71349: EQUAL
71350: IFTRUE 71366
71352: LD_INT 29
71354: DOUBLE
71355: EQUAL
71356: IFTRUE 71366
71358: LD_INT 30
71360: DOUBLE
71361: EQUAL
71362: IFTRUE 71366
71364: GO 71422
71366: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71367: LD_ADDR_VAR 0 9
71371: PUSH
71372: LD_VAR 0 59
71376: PUSH
71377: LD_VAR 0 60
71381: PUSH
71382: LD_VAR 0 61
71386: PUSH
71387: LD_VAR 0 62
71391: PUSH
71392: LD_VAR 0 63
71396: PUSH
71397: LD_VAR 0 64
71401: PUSH
71402: EMPTY
71403: LIST
71404: LIST
71405: LIST
71406: LIST
71407: LIST
71408: LIST
71409: PUSH
71410: LD_VAR 0 4
71414: PUSH
71415: LD_INT 1
71417: PLUS
71418: ARRAY
71419: ST_TO_ADDR
71420: GO 71423
71422: POP
// temp_list2 = [ ] ;
71423: LD_ADDR_VAR 0 10
71427: PUSH
71428: EMPTY
71429: ST_TO_ADDR
// for i in temp_list do
71430: LD_ADDR_VAR 0 8
71434: PUSH
71435: LD_VAR 0 9
71439: PUSH
71440: FOR_IN
71441: IFFALSE 71493
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71443: LD_ADDR_VAR 0 10
71447: PUSH
71448: LD_VAR 0 10
71452: PUSH
71453: LD_VAR 0 8
71457: PUSH
71458: LD_INT 1
71460: ARRAY
71461: PUSH
71462: LD_VAR 0 2
71466: PLUS
71467: PUSH
71468: LD_VAR 0 8
71472: PUSH
71473: LD_INT 2
71475: ARRAY
71476: PUSH
71477: LD_VAR 0 3
71481: PLUS
71482: PUSH
71483: EMPTY
71484: LIST
71485: LIST
71486: PUSH
71487: EMPTY
71488: LIST
71489: ADD
71490: ST_TO_ADDR
71491: GO 71440
71493: POP
71494: POP
// result = temp_list2 ;
71495: LD_ADDR_VAR 0 7
71499: PUSH
71500: LD_VAR 0 10
71504: ST_TO_ADDR
// end ;
71505: LD_VAR 0 7
71509: RET
// export function EnemyInRange ( unit , dist ) ; begin
71510: LD_INT 0
71512: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71513: LD_ADDR_VAR 0 3
71517: PUSH
71518: LD_VAR 0 1
71522: PPUSH
71523: CALL_OW 255
71527: PPUSH
71528: LD_VAR 0 1
71532: PPUSH
71533: CALL_OW 250
71537: PPUSH
71538: LD_VAR 0 1
71542: PPUSH
71543: CALL_OW 251
71547: PPUSH
71548: LD_VAR 0 2
71552: PPUSH
71553: CALL 44883 0 4
71557: PUSH
71558: LD_INT 4
71560: ARRAY
71561: ST_TO_ADDR
// end ;
71562: LD_VAR 0 3
71566: RET
// export function PlayerSeeMe ( unit ) ; begin
71567: LD_INT 0
71569: PPUSH
// result := See ( your_side , unit ) ;
71570: LD_ADDR_VAR 0 2
71574: PUSH
71575: LD_OWVAR 2
71579: PPUSH
71580: LD_VAR 0 1
71584: PPUSH
71585: CALL_OW 292
71589: ST_TO_ADDR
// end ;
71590: LD_VAR 0 2
71594: RET
// export function ReverseDir ( unit ) ; begin
71595: LD_INT 0
71597: PPUSH
// if not unit then
71598: LD_VAR 0 1
71602: NOT
71603: IFFALSE 71607
// exit ;
71605: GO 71630
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71607: LD_ADDR_VAR 0 2
71611: PUSH
71612: LD_VAR 0 1
71616: PPUSH
71617: CALL_OW 254
71621: PUSH
71622: LD_INT 3
71624: PLUS
71625: PUSH
71626: LD_INT 6
71628: MOD
71629: ST_TO_ADDR
// end ;
71630: LD_VAR 0 2
71634: RET
// export function ReverseArray ( array ) ; var i ; begin
71635: LD_INT 0
71637: PPUSH
71638: PPUSH
// if not array then
71639: LD_VAR 0 1
71643: NOT
71644: IFFALSE 71648
// exit ;
71646: GO 71703
// result := [ ] ;
71648: LD_ADDR_VAR 0 2
71652: PUSH
71653: EMPTY
71654: ST_TO_ADDR
// for i := array downto 1 do
71655: LD_ADDR_VAR 0 3
71659: PUSH
71660: DOUBLE
71661: LD_VAR 0 1
71665: INC
71666: ST_TO_ADDR
71667: LD_INT 1
71669: PUSH
71670: FOR_DOWNTO
71671: IFFALSE 71701
// result := Join ( result , array [ i ] ) ;
71673: LD_ADDR_VAR 0 2
71677: PUSH
71678: LD_VAR 0 2
71682: PPUSH
71683: LD_VAR 0 1
71687: PUSH
71688: LD_VAR 0 3
71692: ARRAY
71693: PPUSH
71694: CALL 76348 0 2
71698: ST_TO_ADDR
71699: GO 71670
71701: POP
71702: POP
// end ;
71703: LD_VAR 0 2
71707: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
71708: LD_INT 0
71710: PPUSH
71711: PPUSH
71712: PPUSH
71713: PPUSH
71714: PPUSH
71715: PPUSH
// if not unit or not hexes then
71716: LD_VAR 0 1
71720: NOT
71721: PUSH
71722: LD_VAR 0 2
71726: NOT
71727: OR
71728: IFFALSE 71732
// exit ;
71730: GO 71855
// dist := 9999 ;
71732: LD_ADDR_VAR 0 5
71736: PUSH
71737: LD_INT 9999
71739: ST_TO_ADDR
// for i = 1 to hexes do
71740: LD_ADDR_VAR 0 4
71744: PUSH
71745: DOUBLE
71746: LD_INT 1
71748: DEC
71749: ST_TO_ADDR
71750: LD_VAR 0 2
71754: PUSH
71755: FOR_TO
71756: IFFALSE 71843
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71758: LD_ADDR_VAR 0 6
71762: PUSH
71763: LD_VAR 0 1
71767: PPUSH
71768: LD_VAR 0 2
71772: PUSH
71773: LD_VAR 0 4
71777: ARRAY
71778: PUSH
71779: LD_INT 1
71781: ARRAY
71782: PPUSH
71783: LD_VAR 0 2
71787: PUSH
71788: LD_VAR 0 4
71792: ARRAY
71793: PUSH
71794: LD_INT 2
71796: ARRAY
71797: PPUSH
71798: CALL_OW 297
71802: ST_TO_ADDR
// if tdist < dist then
71803: LD_VAR 0 6
71807: PUSH
71808: LD_VAR 0 5
71812: LESS
71813: IFFALSE 71841
// begin hex := hexes [ i ] ;
71815: LD_ADDR_VAR 0 8
71819: PUSH
71820: LD_VAR 0 2
71824: PUSH
71825: LD_VAR 0 4
71829: ARRAY
71830: ST_TO_ADDR
// dist := tdist ;
71831: LD_ADDR_VAR 0 5
71835: PUSH
71836: LD_VAR 0 6
71840: ST_TO_ADDR
// end ; end ;
71841: GO 71755
71843: POP
71844: POP
// result := hex ;
71845: LD_ADDR_VAR 0 3
71849: PUSH
71850: LD_VAR 0 8
71854: ST_TO_ADDR
// end ;
71855: LD_VAR 0 3
71859: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71860: LD_INT 0
71862: PPUSH
71863: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71864: LD_VAR 0 1
71868: NOT
71869: PUSH
71870: LD_VAR 0 1
71874: PUSH
71875: LD_INT 21
71877: PUSH
71878: LD_INT 2
71880: PUSH
71881: EMPTY
71882: LIST
71883: LIST
71884: PUSH
71885: LD_INT 23
71887: PUSH
71888: LD_INT 2
71890: PUSH
71891: EMPTY
71892: LIST
71893: LIST
71894: PUSH
71895: EMPTY
71896: LIST
71897: LIST
71898: PPUSH
71899: CALL_OW 69
71903: IN
71904: NOT
71905: OR
71906: IFFALSE 71910
// exit ;
71908: GO 71957
// for i = 1 to 3 do
71910: LD_ADDR_VAR 0 3
71914: PUSH
71915: DOUBLE
71916: LD_INT 1
71918: DEC
71919: ST_TO_ADDR
71920: LD_INT 3
71922: PUSH
71923: FOR_TO
71924: IFFALSE 71955
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71926: LD_VAR 0 1
71930: PPUSH
71931: CALL_OW 250
71935: PPUSH
71936: LD_VAR 0 1
71940: PPUSH
71941: CALL_OW 251
71945: PPUSH
71946: LD_INT 1
71948: PPUSH
71949: CALL_OW 453
71953: GO 71923
71955: POP
71956: POP
// end ;
71957: LD_VAR 0 2
71961: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71962: LD_INT 0
71964: PPUSH
71965: PPUSH
71966: PPUSH
71967: PPUSH
71968: PPUSH
71969: PPUSH
// if not unit or not enemy_unit then
71970: LD_VAR 0 1
71974: NOT
71975: PUSH
71976: LD_VAR 0 2
71980: NOT
71981: OR
71982: IFFALSE 71986
// exit ;
71984: GO 72453
// if GetLives ( i ) < 250 then
71986: LD_VAR 0 4
71990: PPUSH
71991: CALL_OW 256
71995: PUSH
71996: LD_INT 250
71998: LESS
71999: IFFALSE 72012
// begin ComAutodestruct ( i ) ;
72001: LD_VAR 0 4
72005: PPUSH
72006: CALL 71860 0 1
// exit ;
72010: GO 72453
// end ; x := GetX ( enemy_unit ) ;
72012: LD_ADDR_VAR 0 7
72016: PUSH
72017: LD_VAR 0 2
72021: PPUSH
72022: CALL_OW 250
72026: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72027: LD_ADDR_VAR 0 8
72031: PUSH
72032: LD_VAR 0 2
72036: PPUSH
72037: CALL_OW 251
72041: ST_TO_ADDR
// if not x or not y then
72042: LD_VAR 0 7
72046: NOT
72047: PUSH
72048: LD_VAR 0 8
72052: NOT
72053: OR
72054: IFFALSE 72058
// exit ;
72056: GO 72453
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72058: LD_ADDR_VAR 0 6
72062: PUSH
72063: LD_VAR 0 7
72067: PPUSH
72068: LD_INT 0
72070: PPUSH
72071: LD_INT 4
72073: PPUSH
72074: CALL_OW 272
72078: PUSH
72079: LD_VAR 0 8
72083: PPUSH
72084: LD_INT 0
72086: PPUSH
72087: LD_INT 4
72089: PPUSH
72090: CALL_OW 273
72094: PUSH
72095: EMPTY
72096: LIST
72097: LIST
72098: PUSH
72099: LD_VAR 0 7
72103: PPUSH
72104: LD_INT 1
72106: PPUSH
72107: LD_INT 4
72109: PPUSH
72110: CALL_OW 272
72114: PUSH
72115: LD_VAR 0 8
72119: PPUSH
72120: LD_INT 1
72122: PPUSH
72123: LD_INT 4
72125: PPUSH
72126: CALL_OW 273
72130: PUSH
72131: EMPTY
72132: LIST
72133: LIST
72134: PUSH
72135: LD_VAR 0 7
72139: PPUSH
72140: LD_INT 2
72142: PPUSH
72143: LD_INT 4
72145: PPUSH
72146: CALL_OW 272
72150: PUSH
72151: LD_VAR 0 8
72155: PPUSH
72156: LD_INT 2
72158: PPUSH
72159: LD_INT 4
72161: PPUSH
72162: CALL_OW 273
72166: PUSH
72167: EMPTY
72168: LIST
72169: LIST
72170: PUSH
72171: LD_VAR 0 7
72175: PPUSH
72176: LD_INT 3
72178: PPUSH
72179: LD_INT 4
72181: PPUSH
72182: CALL_OW 272
72186: PUSH
72187: LD_VAR 0 8
72191: PPUSH
72192: LD_INT 3
72194: PPUSH
72195: LD_INT 4
72197: PPUSH
72198: CALL_OW 273
72202: PUSH
72203: EMPTY
72204: LIST
72205: LIST
72206: PUSH
72207: LD_VAR 0 7
72211: PPUSH
72212: LD_INT 4
72214: PPUSH
72215: LD_INT 4
72217: PPUSH
72218: CALL_OW 272
72222: PUSH
72223: LD_VAR 0 8
72227: PPUSH
72228: LD_INT 4
72230: PPUSH
72231: LD_INT 4
72233: PPUSH
72234: CALL_OW 273
72238: PUSH
72239: EMPTY
72240: LIST
72241: LIST
72242: PUSH
72243: LD_VAR 0 7
72247: PPUSH
72248: LD_INT 5
72250: PPUSH
72251: LD_INT 4
72253: PPUSH
72254: CALL_OW 272
72258: PUSH
72259: LD_VAR 0 8
72263: PPUSH
72264: LD_INT 5
72266: PPUSH
72267: LD_INT 4
72269: PPUSH
72270: CALL_OW 273
72274: PUSH
72275: EMPTY
72276: LIST
72277: LIST
72278: PUSH
72279: EMPTY
72280: LIST
72281: LIST
72282: LIST
72283: LIST
72284: LIST
72285: LIST
72286: ST_TO_ADDR
// for i = tmp downto 1 do
72287: LD_ADDR_VAR 0 4
72291: PUSH
72292: DOUBLE
72293: LD_VAR 0 6
72297: INC
72298: ST_TO_ADDR
72299: LD_INT 1
72301: PUSH
72302: FOR_DOWNTO
72303: IFFALSE 72404
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72305: LD_VAR 0 6
72309: PUSH
72310: LD_VAR 0 4
72314: ARRAY
72315: PUSH
72316: LD_INT 1
72318: ARRAY
72319: PPUSH
72320: LD_VAR 0 6
72324: PUSH
72325: LD_VAR 0 4
72329: ARRAY
72330: PUSH
72331: LD_INT 2
72333: ARRAY
72334: PPUSH
72335: CALL_OW 488
72339: NOT
72340: PUSH
72341: LD_VAR 0 6
72345: PUSH
72346: LD_VAR 0 4
72350: ARRAY
72351: PUSH
72352: LD_INT 1
72354: ARRAY
72355: PPUSH
72356: LD_VAR 0 6
72360: PUSH
72361: LD_VAR 0 4
72365: ARRAY
72366: PUSH
72367: LD_INT 2
72369: ARRAY
72370: PPUSH
72371: CALL_OW 428
72375: PUSH
72376: LD_INT 0
72378: NONEQUAL
72379: OR
72380: IFFALSE 72402
// tmp := Delete ( tmp , i ) ;
72382: LD_ADDR_VAR 0 6
72386: PUSH
72387: LD_VAR 0 6
72391: PPUSH
72392: LD_VAR 0 4
72396: PPUSH
72397: CALL_OW 3
72401: ST_TO_ADDR
72402: GO 72302
72404: POP
72405: POP
// j := GetClosestHex ( unit , tmp ) ;
72406: LD_ADDR_VAR 0 5
72410: PUSH
72411: LD_VAR 0 1
72415: PPUSH
72416: LD_VAR 0 6
72420: PPUSH
72421: CALL 71708 0 2
72425: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72426: LD_VAR 0 1
72430: PPUSH
72431: LD_VAR 0 5
72435: PUSH
72436: LD_INT 1
72438: ARRAY
72439: PPUSH
72440: LD_VAR 0 5
72444: PUSH
72445: LD_INT 2
72447: ARRAY
72448: PPUSH
72449: CALL_OW 111
// end ;
72453: LD_VAR 0 3
72457: RET
// export function PrepareApemanSoldier ( ) ; begin
72458: LD_INT 0
72460: PPUSH
// uc_nation := 0 ;
72461: LD_ADDR_OWVAR 21
72465: PUSH
72466: LD_INT 0
72468: ST_TO_ADDR
// hc_sex := sex_male ;
72469: LD_ADDR_OWVAR 27
72473: PUSH
72474: LD_INT 1
72476: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72477: LD_ADDR_OWVAR 28
72481: PUSH
72482: LD_INT 15
72484: ST_TO_ADDR
// hc_gallery :=  ;
72485: LD_ADDR_OWVAR 33
72489: PUSH
72490: LD_STRING 
72492: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72493: LD_ADDR_OWVAR 31
72497: PUSH
72498: LD_INT 0
72500: PPUSH
72501: LD_INT 3
72503: PPUSH
72504: CALL_OW 12
72508: PUSH
72509: LD_INT 0
72511: PPUSH
72512: LD_INT 3
72514: PPUSH
72515: CALL_OW 12
72519: PUSH
72520: LD_INT 0
72522: PUSH
72523: LD_INT 0
72525: PUSH
72526: EMPTY
72527: LIST
72528: LIST
72529: LIST
72530: LIST
72531: ST_TO_ADDR
// end ;
72532: LD_VAR 0 1
72536: RET
// export function PrepareApemanEngineer ( ) ; begin
72537: LD_INT 0
72539: PPUSH
// uc_nation := 0 ;
72540: LD_ADDR_OWVAR 21
72544: PUSH
72545: LD_INT 0
72547: ST_TO_ADDR
// hc_sex := sex_male ;
72548: LD_ADDR_OWVAR 27
72552: PUSH
72553: LD_INT 1
72555: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72556: LD_ADDR_OWVAR 28
72560: PUSH
72561: LD_INT 16
72563: ST_TO_ADDR
// hc_gallery :=  ;
72564: LD_ADDR_OWVAR 33
72568: PUSH
72569: LD_STRING 
72571: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72572: LD_ADDR_OWVAR 31
72576: PUSH
72577: LD_INT 0
72579: PPUSH
72580: LD_INT 3
72582: PPUSH
72583: CALL_OW 12
72587: PUSH
72588: LD_INT 0
72590: PPUSH
72591: LD_INT 3
72593: PPUSH
72594: CALL_OW 12
72598: PUSH
72599: LD_INT 0
72601: PUSH
72602: LD_INT 0
72604: PUSH
72605: EMPTY
72606: LIST
72607: LIST
72608: LIST
72609: LIST
72610: ST_TO_ADDR
// end ;
72611: LD_VAR 0 1
72615: RET
// export function PrepareApeman ( agressivity ) ; begin
72616: LD_INT 0
72618: PPUSH
// uc_side := 0 ;
72619: LD_ADDR_OWVAR 20
72623: PUSH
72624: LD_INT 0
72626: ST_TO_ADDR
// uc_nation := 0 ;
72627: LD_ADDR_OWVAR 21
72631: PUSH
72632: LD_INT 0
72634: ST_TO_ADDR
// hc_sex := sex_male ;
72635: LD_ADDR_OWVAR 27
72639: PUSH
72640: LD_INT 1
72642: ST_TO_ADDR
// hc_class := class_apeman ;
72643: LD_ADDR_OWVAR 28
72647: PUSH
72648: LD_INT 12
72650: ST_TO_ADDR
// hc_gallery :=  ;
72651: LD_ADDR_OWVAR 33
72655: PUSH
72656: LD_STRING 
72658: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72659: LD_ADDR_OWVAR 35
72663: PUSH
72664: LD_VAR 0 1
72668: NEG
72669: PPUSH
72670: LD_VAR 0 1
72674: PPUSH
72675: CALL_OW 12
72679: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72680: LD_ADDR_OWVAR 31
72684: PUSH
72685: LD_INT 0
72687: PPUSH
72688: LD_INT 3
72690: PPUSH
72691: CALL_OW 12
72695: PUSH
72696: LD_INT 0
72698: PPUSH
72699: LD_INT 3
72701: PPUSH
72702: CALL_OW 12
72706: PUSH
72707: LD_INT 0
72709: PUSH
72710: LD_INT 0
72712: PUSH
72713: EMPTY
72714: LIST
72715: LIST
72716: LIST
72717: LIST
72718: ST_TO_ADDR
// end ;
72719: LD_VAR 0 2
72723: RET
// export function PrepareTiger ( agressivity ) ; begin
72724: LD_INT 0
72726: PPUSH
// uc_side := 0 ;
72727: LD_ADDR_OWVAR 20
72731: PUSH
72732: LD_INT 0
72734: ST_TO_ADDR
// uc_nation := 0 ;
72735: LD_ADDR_OWVAR 21
72739: PUSH
72740: LD_INT 0
72742: ST_TO_ADDR
// hc_class := class_tiger ;
72743: LD_ADDR_OWVAR 28
72747: PUSH
72748: LD_INT 14
72750: ST_TO_ADDR
// hc_gallery :=  ;
72751: LD_ADDR_OWVAR 33
72755: PUSH
72756: LD_STRING 
72758: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72759: LD_ADDR_OWVAR 35
72763: PUSH
72764: LD_VAR 0 1
72768: NEG
72769: PPUSH
72770: LD_VAR 0 1
72774: PPUSH
72775: CALL_OW 12
72779: ST_TO_ADDR
// end ;
72780: LD_VAR 0 2
72784: RET
// export function PrepareEnchidna ( ) ; begin
72785: LD_INT 0
72787: PPUSH
// uc_side := 0 ;
72788: LD_ADDR_OWVAR 20
72792: PUSH
72793: LD_INT 0
72795: ST_TO_ADDR
// uc_nation := 0 ;
72796: LD_ADDR_OWVAR 21
72800: PUSH
72801: LD_INT 0
72803: ST_TO_ADDR
// hc_class := class_baggie ;
72804: LD_ADDR_OWVAR 28
72808: PUSH
72809: LD_INT 13
72811: ST_TO_ADDR
// hc_gallery :=  ;
72812: LD_ADDR_OWVAR 33
72816: PUSH
72817: LD_STRING 
72819: ST_TO_ADDR
// end ;
72820: LD_VAR 0 1
72824: RET
// export function PrepareFrog ( ) ; begin
72825: LD_INT 0
72827: PPUSH
// uc_side := 0 ;
72828: LD_ADDR_OWVAR 20
72832: PUSH
72833: LD_INT 0
72835: ST_TO_ADDR
// uc_nation := 0 ;
72836: LD_ADDR_OWVAR 21
72840: PUSH
72841: LD_INT 0
72843: ST_TO_ADDR
// hc_class := class_frog ;
72844: LD_ADDR_OWVAR 28
72848: PUSH
72849: LD_INT 19
72851: ST_TO_ADDR
// hc_gallery :=  ;
72852: LD_ADDR_OWVAR 33
72856: PUSH
72857: LD_STRING 
72859: ST_TO_ADDR
// end ;
72860: LD_VAR 0 1
72864: RET
// export function PrepareFish ( ) ; begin
72865: LD_INT 0
72867: PPUSH
// uc_side := 0 ;
72868: LD_ADDR_OWVAR 20
72872: PUSH
72873: LD_INT 0
72875: ST_TO_ADDR
// uc_nation := 0 ;
72876: LD_ADDR_OWVAR 21
72880: PUSH
72881: LD_INT 0
72883: ST_TO_ADDR
// hc_class := class_fish ;
72884: LD_ADDR_OWVAR 28
72888: PUSH
72889: LD_INT 20
72891: ST_TO_ADDR
// hc_gallery :=  ;
72892: LD_ADDR_OWVAR 33
72896: PUSH
72897: LD_STRING 
72899: ST_TO_ADDR
// end ;
72900: LD_VAR 0 1
72904: RET
// export function PrepareBird ( ) ; begin
72905: LD_INT 0
72907: PPUSH
// uc_side := 0 ;
72908: LD_ADDR_OWVAR 20
72912: PUSH
72913: LD_INT 0
72915: ST_TO_ADDR
// uc_nation := 0 ;
72916: LD_ADDR_OWVAR 21
72920: PUSH
72921: LD_INT 0
72923: ST_TO_ADDR
// hc_class := class_phororhacos ;
72924: LD_ADDR_OWVAR 28
72928: PUSH
72929: LD_INT 18
72931: ST_TO_ADDR
// hc_gallery :=  ;
72932: LD_ADDR_OWVAR 33
72936: PUSH
72937: LD_STRING 
72939: ST_TO_ADDR
// end ;
72940: LD_VAR 0 1
72944: RET
// export function PrepareHorse ( ) ; begin
72945: LD_INT 0
72947: PPUSH
// uc_side := 0 ;
72948: LD_ADDR_OWVAR 20
72952: PUSH
72953: LD_INT 0
72955: ST_TO_ADDR
// uc_nation := 0 ;
72956: LD_ADDR_OWVAR 21
72960: PUSH
72961: LD_INT 0
72963: ST_TO_ADDR
// hc_class := class_horse ;
72964: LD_ADDR_OWVAR 28
72968: PUSH
72969: LD_INT 21
72971: ST_TO_ADDR
// hc_gallery :=  ;
72972: LD_ADDR_OWVAR 33
72976: PUSH
72977: LD_STRING 
72979: ST_TO_ADDR
// end ;
72980: LD_VAR 0 1
72984: RET
// export function PrepareMastodont ( ) ; begin
72985: LD_INT 0
72987: PPUSH
// uc_side := 0 ;
72988: LD_ADDR_OWVAR 20
72992: PUSH
72993: LD_INT 0
72995: ST_TO_ADDR
// uc_nation := 0 ;
72996: LD_ADDR_OWVAR 21
73000: PUSH
73001: LD_INT 0
73003: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73004: LD_ADDR_OWVAR 37
73008: PUSH
73009: LD_INT 31
73011: ST_TO_ADDR
// vc_control := control_rider ;
73012: LD_ADDR_OWVAR 38
73016: PUSH
73017: LD_INT 4
73019: ST_TO_ADDR
// end ;
73020: LD_VAR 0 1
73024: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73025: LD_INT 0
73027: PPUSH
73028: PPUSH
73029: PPUSH
// uc_side = 0 ;
73030: LD_ADDR_OWVAR 20
73034: PUSH
73035: LD_INT 0
73037: ST_TO_ADDR
// uc_nation = 0 ;
73038: LD_ADDR_OWVAR 21
73042: PUSH
73043: LD_INT 0
73045: ST_TO_ADDR
// InitHc_All ( ) ;
73046: CALL_OW 584
// InitVc ;
73050: CALL_OW 20
// if mastodonts then
73054: LD_VAR 0 6
73058: IFFALSE 73125
// for i = 1 to mastodonts do
73060: LD_ADDR_VAR 0 11
73064: PUSH
73065: DOUBLE
73066: LD_INT 1
73068: DEC
73069: ST_TO_ADDR
73070: LD_VAR 0 6
73074: PUSH
73075: FOR_TO
73076: IFFALSE 73123
// begin vc_chassis := 31 ;
73078: LD_ADDR_OWVAR 37
73082: PUSH
73083: LD_INT 31
73085: ST_TO_ADDR
// vc_control := control_rider ;
73086: LD_ADDR_OWVAR 38
73090: PUSH
73091: LD_INT 4
73093: ST_TO_ADDR
// animal := CreateVehicle ;
73094: LD_ADDR_VAR 0 12
73098: PUSH
73099: CALL_OW 45
73103: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73104: LD_VAR 0 12
73108: PPUSH
73109: LD_VAR 0 8
73113: PPUSH
73114: LD_INT 0
73116: PPUSH
73117: CALL 75253 0 3
// end ;
73121: GO 73075
73123: POP
73124: POP
// if horses then
73125: LD_VAR 0 5
73129: IFFALSE 73196
// for i = 1 to horses do
73131: LD_ADDR_VAR 0 11
73135: PUSH
73136: DOUBLE
73137: LD_INT 1
73139: DEC
73140: ST_TO_ADDR
73141: LD_VAR 0 5
73145: PUSH
73146: FOR_TO
73147: IFFALSE 73194
// begin hc_class := 21 ;
73149: LD_ADDR_OWVAR 28
73153: PUSH
73154: LD_INT 21
73156: ST_TO_ADDR
// hc_gallery :=  ;
73157: LD_ADDR_OWVAR 33
73161: PUSH
73162: LD_STRING 
73164: ST_TO_ADDR
// animal := CreateHuman ;
73165: LD_ADDR_VAR 0 12
73169: PUSH
73170: CALL_OW 44
73174: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73175: LD_VAR 0 12
73179: PPUSH
73180: LD_VAR 0 8
73184: PPUSH
73185: LD_INT 0
73187: PPUSH
73188: CALL 75253 0 3
// end ;
73192: GO 73146
73194: POP
73195: POP
// if birds then
73196: LD_VAR 0 1
73200: IFFALSE 73267
// for i = 1 to birds do
73202: LD_ADDR_VAR 0 11
73206: PUSH
73207: DOUBLE
73208: LD_INT 1
73210: DEC
73211: ST_TO_ADDR
73212: LD_VAR 0 1
73216: PUSH
73217: FOR_TO
73218: IFFALSE 73265
// begin hc_class := 18 ;
73220: LD_ADDR_OWVAR 28
73224: PUSH
73225: LD_INT 18
73227: ST_TO_ADDR
// hc_gallery =  ;
73228: LD_ADDR_OWVAR 33
73232: PUSH
73233: LD_STRING 
73235: ST_TO_ADDR
// animal := CreateHuman ;
73236: LD_ADDR_VAR 0 12
73240: PUSH
73241: CALL_OW 44
73245: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73246: LD_VAR 0 12
73250: PPUSH
73251: LD_VAR 0 8
73255: PPUSH
73256: LD_INT 0
73258: PPUSH
73259: CALL 75253 0 3
// end ;
73263: GO 73217
73265: POP
73266: POP
// if tigers then
73267: LD_VAR 0 2
73271: IFFALSE 73355
// for i = 1 to tigers do
73273: LD_ADDR_VAR 0 11
73277: PUSH
73278: DOUBLE
73279: LD_INT 1
73281: DEC
73282: ST_TO_ADDR
73283: LD_VAR 0 2
73287: PUSH
73288: FOR_TO
73289: IFFALSE 73353
// begin hc_class = class_tiger ;
73291: LD_ADDR_OWVAR 28
73295: PUSH
73296: LD_INT 14
73298: ST_TO_ADDR
// hc_gallery =  ;
73299: LD_ADDR_OWVAR 33
73303: PUSH
73304: LD_STRING 
73306: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73307: LD_ADDR_OWVAR 35
73311: PUSH
73312: LD_INT 7
73314: NEG
73315: PPUSH
73316: LD_INT 7
73318: PPUSH
73319: CALL_OW 12
73323: ST_TO_ADDR
// animal := CreateHuman ;
73324: LD_ADDR_VAR 0 12
73328: PUSH
73329: CALL_OW 44
73333: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73334: LD_VAR 0 12
73338: PPUSH
73339: LD_VAR 0 8
73343: PPUSH
73344: LD_INT 0
73346: PPUSH
73347: CALL 75253 0 3
// end ;
73351: GO 73288
73353: POP
73354: POP
// if apemans then
73355: LD_VAR 0 3
73359: IFFALSE 73482
// for i = 1 to apemans do
73361: LD_ADDR_VAR 0 11
73365: PUSH
73366: DOUBLE
73367: LD_INT 1
73369: DEC
73370: ST_TO_ADDR
73371: LD_VAR 0 3
73375: PUSH
73376: FOR_TO
73377: IFFALSE 73480
// begin hc_class = class_apeman ;
73379: LD_ADDR_OWVAR 28
73383: PUSH
73384: LD_INT 12
73386: ST_TO_ADDR
// hc_gallery =  ;
73387: LD_ADDR_OWVAR 33
73391: PUSH
73392: LD_STRING 
73394: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73395: LD_ADDR_OWVAR 35
73399: PUSH
73400: LD_INT 2
73402: NEG
73403: PPUSH
73404: LD_INT 2
73406: PPUSH
73407: CALL_OW 12
73411: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73412: LD_ADDR_OWVAR 31
73416: PUSH
73417: LD_INT 1
73419: PPUSH
73420: LD_INT 3
73422: PPUSH
73423: CALL_OW 12
73427: PUSH
73428: LD_INT 1
73430: PPUSH
73431: LD_INT 3
73433: PPUSH
73434: CALL_OW 12
73438: PUSH
73439: LD_INT 0
73441: PUSH
73442: LD_INT 0
73444: PUSH
73445: EMPTY
73446: LIST
73447: LIST
73448: LIST
73449: LIST
73450: ST_TO_ADDR
// animal := CreateHuman ;
73451: LD_ADDR_VAR 0 12
73455: PUSH
73456: CALL_OW 44
73460: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73461: LD_VAR 0 12
73465: PPUSH
73466: LD_VAR 0 8
73470: PPUSH
73471: LD_INT 0
73473: PPUSH
73474: CALL 75253 0 3
// end ;
73478: GO 73376
73480: POP
73481: POP
// if enchidnas then
73482: LD_VAR 0 4
73486: IFFALSE 73553
// for i = 1 to enchidnas do
73488: LD_ADDR_VAR 0 11
73492: PUSH
73493: DOUBLE
73494: LD_INT 1
73496: DEC
73497: ST_TO_ADDR
73498: LD_VAR 0 4
73502: PUSH
73503: FOR_TO
73504: IFFALSE 73551
// begin hc_class = 13 ;
73506: LD_ADDR_OWVAR 28
73510: PUSH
73511: LD_INT 13
73513: ST_TO_ADDR
// hc_gallery =  ;
73514: LD_ADDR_OWVAR 33
73518: PUSH
73519: LD_STRING 
73521: ST_TO_ADDR
// animal := CreateHuman ;
73522: LD_ADDR_VAR 0 12
73526: PUSH
73527: CALL_OW 44
73531: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73532: LD_VAR 0 12
73536: PPUSH
73537: LD_VAR 0 8
73541: PPUSH
73542: LD_INT 0
73544: PPUSH
73545: CALL 75253 0 3
// end ;
73549: GO 73503
73551: POP
73552: POP
// if fishes then
73553: LD_VAR 0 7
73557: IFFALSE 73624
// for i = 1 to fishes do
73559: LD_ADDR_VAR 0 11
73563: PUSH
73564: DOUBLE
73565: LD_INT 1
73567: DEC
73568: ST_TO_ADDR
73569: LD_VAR 0 7
73573: PUSH
73574: FOR_TO
73575: IFFALSE 73622
// begin hc_class = 20 ;
73577: LD_ADDR_OWVAR 28
73581: PUSH
73582: LD_INT 20
73584: ST_TO_ADDR
// hc_gallery =  ;
73585: LD_ADDR_OWVAR 33
73589: PUSH
73590: LD_STRING 
73592: ST_TO_ADDR
// animal := CreateHuman ;
73593: LD_ADDR_VAR 0 12
73597: PUSH
73598: CALL_OW 44
73602: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73603: LD_VAR 0 12
73607: PPUSH
73608: LD_VAR 0 9
73612: PPUSH
73613: LD_INT 0
73615: PPUSH
73616: CALL 75253 0 3
// end ;
73620: GO 73574
73622: POP
73623: POP
// end ;
73624: LD_VAR 0 10
73628: RET
// export function WantHeal ( sci , unit ) ; begin
73629: LD_INT 0
73631: PPUSH
// if GetTaskList ( sci ) > 0 then
73632: LD_VAR 0 1
73636: PPUSH
73637: CALL_OW 437
73641: PUSH
73642: LD_INT 0
73644: GREATER
73645: IFFALSE 73715
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73647: LD_VAR 0 1
73651: PPUSH
73652: CALL_OW 437
73656: PUSH
73657: LD_INT 1
73659: ARRAY
73660: PUSH
73661: LD_INT 1
73663: ARRAY
73664: PUSH
73665: LD_STRING l
73667: EQUAL
73668: PUSH
73669: LD_VAR 0 1
73673: PPUSH
73674: CALL_OW 437
73678: PUSH
73679: LD_INT 1
73681: ARRAY
73682: PUSH
73683: LD_INT 4
73685: ARRAY
73686: PUSH
73687: LD_VAR 0 2
73691: EQUAL
73692: AND
73693: IFFALSE 73705
// result := true else
73695: LD_ADDR_VAR 0 3
73699: PUSH
73700: LD_INT 1
73702: ST_TO_ADDR
73703: GO 73713
// result := false ;
73705: LD_ADDR_VAR 0 3
73709: PUSH
73710: LD_INT 0
73712: ST_TO_ADDR
// end else
73713: GO 73723
// result := false ;
73715: LD_ADDR_VAR 0 3
73719: PUSH
73720: LD_INT 0
73722: ST_TO_ADDR
// end ;
73723: LD_VAR 0 3
73727: RET
// export function HealTarget ( sci ) ; begin
73728: LD_INT 0
73730: PPUSH
// if not sci then
73731: LD_VAR 0 1
73735: NOT
73736: IFFALSE 73740
// exit ;
73738: GO 73805
// result := 0 ;
73740: LD_ADDR_VAR 0 2
73744: PUSH
73745: LD_INT 0
73747: ST_TO_ADDR
// if GetTaskList ( sci ) then
73748: LD_VAR 0 1
73752: PPUSH
73753: CALL_OW 437
73757: IFFALSE 73805
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73759: LD_VAR 0 1
73763: PPUSH
73764: CALL_OW 437
73768: PUSH
73769: LD_INT 1
73771: ARRAY
73772: PUSH
73773: LD_INT 1
73775: ARRAY
73776: PUSH
73777: LD_STRING l
73779: EQUAL
73780: IFFALSE 73805
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73782: LD_ADDR_VAR 0 2
73786: PUSH
73787: LD_VAR 0 1
73791: PPUSH
73792: CALL_OW 437
73796: PUSH
73797: LD_INT 1
73799: ARRAY
73800: PUSH
73801: LD_INT 4
73803: ARRAY
73804: ST_TO_ADDR
// end ;
73805: LD_VAR 0 2
73809: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73810: LD_INT 0
73812: PPUSH
73813: PPUSH
73814: PPUSH
73815: PPUSH
// if not base_units then
73816: LD_VAR 0 1
73820: NOT
73821: IFFALSE 73825
// exit ;
73823: GO 73912
// result := false ;
73825: LD_ADDR_VAR 0 2
73829: PUSH
73830: LD_INT 0
73832: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73833: LD_ADDR_VAR 0 5
73837: PUSH
73838: LD_VAR 0 1
73842: PPUSH
73843: LD_INT 21
73845: PUSH
73846: LD_INT 3
73848: PUSH
73849: EMPTY
73850: LIST
73851: LIST
73852: PPUSH
73853: CALL_OW 72
73857: ST_TO_ADDR
// if not tmp then
73858: LD_VAR 0 5
73862: NOT
73863: IFFALSE 73867
// exit ;
73865: GO 73912
// for i in tmp do
73867: LD_ADDR_VAR 0 3
73871: PUSH
73872: LD_VAR 0 5
73876: PUSH
73877: FOR_IN
73878: IFFALSE 73910
// begin result := EnemyInRange ( i , 22 ) ;
73880: LD_ADDR_VAR 0 2
73884: PUSH
73885: LD_VAR 0 3
73889: PPUSH
73890: LD_INT 22
73892: PPUSH
73893: CALL 71510 0 2
73897: ST_TO_ADDR
// if result then
73898: LD_VAR 0 2
73902: IFFALSE 73908
// exit ;
73904: POP
73905: POP
73906: GO 73912
// end ;
73908: GO 73877
73910: POP
73911: POP
// end ;
73912: LD_VAR 0 2
73916: RET
// export function FilterByTag ( units , tag ) ; begin
73917: LD_INT 0
73919: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
73920: LD_ADDR_VAR 0 3
73924: PUSH
73925: LD_VAR 0 1
73929: PPUSH
73930: LD_INT 120
73932: PUSH
73933: LD_VAR 0 2
73937: PUSH
73938: EMPTY
73939: LIST
73940: LIST
73941: PPUSH
73942: CALL_OW 72
73946: ST_TO_ADDR
// end ;
73947: LD_VAR 0 3
73951: RET
// export function IsDriver ( un ) ; begin
73952: LD_INT 0
73954: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73955: LD_ADDR_VAR 0 2
73959: PUSH
73960: LD_VAR 0 1
73964: PUSH
73965: LD_INT 55
73967: PUSH
73968: EMPTY
73969: LIST
73970: PPUSH
73971: CALL_OW 69
73975: IN
73976: ST_TO_ADDR
// end ;
73977: LD_VAR 0 2
73981: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73982: LD_INT 0
73984: PPUSH
73985: PPUSH
// list := [ ] ;
73986: LD_ADDR_VAR 0 5
73990: PUSH
73991: EMPTY
73992: ST_TO_ADDR
// case d of 0 :
73993: LD_VAR 0 3
73997: PUSH
73998: LD_INT 0
74000: DOUBLE
74001: EQUAL
74002: IFTRUE 74006
74004: GO 74139
74006: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74007: LD_ADDR_VAR 0 5
74011: PUSH
74012: LD_VAR 0 1
74016: PUSH
74017: LD_INT 4
74019: MINUS
74020: PUSH
74021: LD_VAR 0 2
74025: PUSH
74026: LD_INT 4
74028: MINUS
74029: PUSH
74030: LD_INT 2
74032: PUSH
74033: EMPTY
74034: LIST
74035: LIST
74036: LIST
74037: PUSH
74038: LD_VAR 0 1
74042: PUSH
74043: LD_INT 3
74045: MINUS
74046: PUSH
74047: LD_VAR 0 2
74051: PUSH
74052: LD_INT 1
74054: PUSH
74055: EMPTY
74056: LIST
74057: LIST
74058: LIST
74059: PUSH
74060: LD_VAR 0 1
74064: PUSH
74065: LD_INT 4
74067: PLUS
74068: PUSH
74069: LD_VAR 0 2
74073: PUSH
74074: LD_INT 4
74076: PUSH
74077: EMPTY
74078: LIST
74079: LIST
74080: LIST
74081: PUSH
74082: LD_VAR 0 1
74086: PUSH
74087: LD_INT 3
74089: PLUS
74090: PUSH
74091: LD_VAR 0 2
74095: PUSH
74096: LD_INT 3
74098: PLUS
74099: PUSH
74100: LD_INT 5
74102: PUSH
74103: EMPTY
74104: LIST
74105: LIST
74106: LIST
74107: PUSH
74108: LD_VAR 0 1
74112: PUSH
74113: LD_VAR 0 2
74117: PUSH
74118: LD_INT 4
74120: PLUS
74121: PUSH
74122: LD_INT 0
74124: PUSH
74125: EMPTY
74126: LIST
74127: LIST
74128: LIST
74129: PUSH
74130: EMPTY
74131: LIST
74132: LIST
74133: LIST
74134: LIST
74135: LIST
74136: ST_TO_ADDR
// end ; 1 :
74137: GO 74837
74139: LD_INT 1
74141: DOUBLE
74142: EQUAL
74143: IFTRUE 74147
74145: GO 74280
74147: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74148: LD_ADDR_VAR 0 5
74152: PUSH
74153: LD_VAR 0 1
74157: PUSH
74158: LD_VAR 0 2
74162: PUSH
74163: LD_INT 4
74165: MINUS
74166: PUSH
74167: LD_INT 3
74169: PUSH
74170: EMPTY
74171: LIST
74172: LIST
74173: LIST
74174: PUSH
74175: LD_VAR 0 1
74179: PUSH
74180: LD_INT 3
74182: MINUS
74183: PUSH
74184: LD_VAR 0 2
74188: PUSH
74189: LD_INT 3
74191: MINUS
74192: PUSH
74193: LD_INT 2
74195: PUSH
74196: EMPTY
74197: LIST
74198: LIST
74199: LIST
74200: PUSH
74201: LD_VAR 0 1
74205: PUSH
74206: LD_INT 4
74208: MINUS
74209: PUSH
74210: LD_VAR 0 2
74214: PUSH
74215: LD_INT 1
74217: PUSH
74218: EMPTY
74219: LIST
74220: LIST
74221: LIST
74222: PUSH
74223: LD_VAR 0 1
74227: PUSH
74228: LD_VAR 0 2
74232: PUSH
74233: LD_INT 3
74235: PLUS
74236: PUSH
74237: LD_INT 0
74239: PUSH
74240: EMPTY
74241: LIST
74242: LIST
74243: LIST
74244: PUSH
74245: LD_VAR 0 1
74249: PUSH
74250: LD_INT 4
74252: PLUS
74253: PUSH
74254: LD_VAR 0 2
74258: PUSH
74259: LD_INT 4
74261: PLUS
74262: PUSH
74263: LD_INT 5
74265: PUSH
74266: EMPTY
74267: LIST
74268: LIST
74269: LIST
74270: PUSH
74271: EMPTY
74272: LIST
74273: LIST
74274: LIST
74275: LIST
74276: LIST
74277: ST_TO_ADDR
// end ; 2 :
74278: GO 74837
74280: LD_INT 2
74282: DOUBLE
74283: EQUAL
74284: IFTRUE 74288
74286: GO 74417
74288: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74289: LD_ADDR_VAR 0 5
74293: PUSH
74294: LD_VAR 0 1
74298: PUSH
74299: LD_VAR 0 2
74303: PUSH
74304: LD_INT 3
74306: MINUS
74307: PUSH
74308: LD_INT 3
74310: PUSH
74311: EMPTY
74312: LIST
74313: LIST
74314: LIST
74315: PUSH
74316: LD_VAR 0 1
74320: PUSH
74321: LD_INT 4
74323: PLUS
74324: PUSH
74325: LD_VAR 0 2
74329: PUSH
74330: LD_INT 4
74332: PUSH
74333: EMPTY
74334: LIST
74335: LIST
74336: LIST
74337: PUSH
74338: LD_VAR 0 1
74342: PUSH
74343: LD_VAR 0 2
74347: PUSH
74348: LD_INT 4
74350: PLUS
74351: PUSH
74352: LD_INT 0
74354: PUSH
74355: EMPTY
74356: LIST
74357: LIST
74358: LIST
74359: PUSH
74360: LD_VAR 0 1
74364: PUSH
74365: LD_INT 3
74367: MINUS
74368: PUSH
74369: LD_VAR 0 2
74373: PUSH
74374: LD_INT 1
74376: PUSH
74377: EMPTY
74378: LIST
74379: LIST
74380: LIST
74381: PUSH
74382: LD_VAR 0 1
74386: PUSH
74387: LD_INT 4
74389: MINUS
74390: PUSH
74391: LD_VAR 0 2
74395: PUSH
74396: LD_INT 4
74398: MINUS
74399: PUSH
74400: LD_INT 2
74402: PUSH
74403: EMPTY
74404: LIST
74405: LIST
74406: LIST
74407: PUSH
74408: EMPTY
74409: LIST
74410: LIST
74411: LIST
74412: LIST
74413: LIST
74414: ST_TO_ADDR
// end ; 3 :
74415: GO 74837
74417: LD_INT 3
74419: DOUBLE
74420: EQUAL
74421: IFTRUE 74425
74423: GO 74558
74425: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74426: LD_ADDR_VAR 0 5
74430: PUSH
74431: LD_VAR 0 1
74435: PUSH
74436: LD_INT 3
74438: PLUS
74439: PUSH
74440: LD_VAR 0 2
74444: PUSH
74445: LD_INT 4
74447: PUSH
74448: EMPTY
74449: LIST
74450: LIST
74451: LIST
74452: PUSH
74453: LD_VAR 0 1
74457: PUSH
74458: LD_INT 4
74460: PLUS
74461: PUSH
74462: LD_VAR 0 2
74466: PUSH
74467: LD_INT 4
74469: PLUS
74470: PUSH
74471: LD_INT 5
74473: PUSH
74474: EMPTY
74475: LIST
74476: LIST
74477: LIST
74478: PUSH
74479: LD_VAR 0 1
74483: PUSH
74484: LD_INT 4
74486: MINUS
74487: PUSH
74488: LD_VAR 0 2
74492: PUSH
74493: LD_INT 1
74495: PUSH
74496: EMPTY
74497: LIST
74498: LIST
74499: LIST
74500: PUSH
74501: LD_VAR 0 1
74505: PUSH
74506: LD_VAR 0 2
74510: PUSH
74511: LD_INT 4
74513: MINUS
74514: PUSH
74515: LD_INT 3
74517: PUSH
74518: EMPTY
74519: LIST
74520: LIST
74521: LIST
74522: PUSH
74523: LD_VAR 0 1
74527: PUSH
74528: LD_INT 3
74530: MINUS
74531: PUSH
74532: LD_VAR 0 2
74536: PUSH
74537: LD_INT 3
74539: MINUS
74540: PUSH
74541: LD_INT 2
74543: PUSH
74544: EMPTY
74545: LIST
74546: LIST
74547: LIST
74548: PUSH
74549: EMPTY
74550: LIST
74551: LIST
74552: LIST
74553: LIST
74554: LIST
74555: ST_TO_ADDR
// end ; 4 :
74556: GO 74837
74558: LD_INT 4
74560: DOUBLE
74561: EQUAL
74562: IFTRUE 74566
74564: GO 74699
74566: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74567: LD_ADDR_VAR 0 5
74571: PUSH
74572: LD_VAR 0 1
74576: PUSH
74577: LD_VAR 0 2
74581: PUSH
74582: LD_INT 4
74584: PLUS
74585: PUSH
74586: LD_INT 0
74588: PUSH
74589: EMPTY
74590: LIST
74591: LIST
74592: LIST
74593: PUSH
74594: LD_VAR 0 1
74598: PUSH
74599: LD_INT 3
74601: PLUS
74602: PUSH
74603: LD_VAR 0 2
74607: PUSH
74608: LD_INT 3
74610: PLUS
74611: PUSH
74612: LD_INT 5
74614: PUSH
74615: EMPTY
74616: LIST
74617: LIST
74618: LIST
74619: PUSH
74620: LD_VAR 0 1
74624: PUSH
74625: LD_INT 4
74627: PLUS
74628: PUSH
74629: LD_VAR 0 2
74633: PUSH
74634: LD_INT 4
74636: PUSH
74637: EMPTY
74638: LIST
74639: LIST
74640: LIST
74641: PUSH
74642: LD_VAR 0 1
74646: PUSH
74647: LD_VAR 0 2
74651: PUSH
74652: LD_INT 3
74654: MINUS
74655: PUSH
74656: LD_INT 3
74658: PUSH
74659: EMPTY
74660: LIST
74661: LIST
74662: LIST
74663: PUSH
74664: LD_VAR 0 1
74668: PUSH
74669: LD_INT 4
74671: MINUS
74672: PUSH
74673: LD_VAR 0 2
74677: PUSH
74678: LD_INT 4
74680: MINUS
74681: PUSH
74682: LD_INT 2
74684: PUSH
74685: EMPTY
74686: LIST
74687: LIST
74688: LIST
74689: PUSH
74690: EMPTY
74691: LIST
74692: LIST
74693: LIST
74694: LIST
74695: LIST
74696: ST_TO_ADDR
// end ; 5 :
74697: GO 74837
74699: LD_INT 5
74701: DOUBLE
74702: EQUAL
74703: IFTRUE 74707
74705: GO 74836
74707: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74708: LD_ADDR_VAR 0 5
74712: PUSH
74713: LD_VAR 0 1
74717: PUSH
74718: LD_INT 4
74720: MINUS
74721: PUSH
74722: LD_VAR 0 2
74726: PUSH
74727: LD_INT 1
74729: PUSH
74730: EMPTY
74731: LIST
74732: LIST
74733: LIST
74734: PUSH
74735: LD_VAR 0 1
74739: PUSH
74740: LD_VAR 0 2
74744: PUSH
74745: LD_INT 4
74747: MINUS
74748: PUSH
74749: LD_INT 3
74751: PUSH
74752: EMPTY
74753: LIST
74754: LIST
74755: LIST
74756: PUSH
74757: LD_VAR 0 1
74761: PUSH
74762: LD_INT 4
74764: PLUS
74765: PUSH
74766: LD_VAR 0 2
74770: PUSH
74771: LD_INT 4
74773: PLUS
74774: PUSH
74775: LD_INT 5
74777: PUSH
74778: EMPTY
74779: LIST
74780: LIST
74781: LIST
74782: PUSH
74783: LD_VAR 0 1
74787: PUSH
74788: LD_INT 3
74790: PLUS
74791: PUSH
74792: LD_VAR 0 2
74796: PUSH
74797: LD_INT 4
74799: PUSH
74800: EMPTY
74801: LIST
74802: LIST
74803: LIST
74804: PUSH
74805: LD_VAR 0 1
74809: PUSH
74810: LD_VAR 0 2
74814: PUSH
74815: LD_INT 3
74817: PLUS
74818: PUSH
74819: LD_INT 0
74821: PUSH
74822: EMPTY
74823: LIST
74824: LIST
74825: LIST
74826: PUSH
74827: EMPTY
74828: LIST
74829: LIST
74830: LIST
74831: LIST
74832: LIST
74833: ST_TO_ADDR
// end ; end ;
74834: GO 74837
74836: POP
// result := list ;
74837: LD_ADDR_VAR 0 4
74841: PUSH
74842: LD_VAR 0 5
74846: ST_TO_ADDR
// end ;
74847: LD_VAR 0 4
74851: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74852: LD_INT 0
74854: PPUSH
74855: PPUSH
74856: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74857: LD_VAR 0 1
74861: NOT
74862: PUSH
74863: LD_VAR 0 2
74867: PUSH
74868: LD_INT 1
74870: PUSH
74871: LD_INT 2
74873: PUSH
74874: LD_INT 3
74876: PUSH
74877: LD_INT 4
74879: PUSH
74880: EMPTY
74881: LIST
74882: LIST
74883: LIST
74884: LIST
74885: IN
74886: NOT
74887: OR
74888: IFFALSE 74892
// exit ;
74890: GO 74975
// tmp := [ ] ;
74892: LD_ADDR_VAR 0 5
74896: PUSH
74897: EMPTY
74898: ST_TO_ADDR
// for i in units do
74899: LD_ADDR_VAR 0 4
74903: PUSH
74904: LD_VAR 0 1
74908: PUSH
74909: FOR_IN
74910: IFFALSE 74944
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
74912: LD_ADDR_VAR 0 5
74916: PUSH
74917: LD_VAR 0 5
74921: PPUSH
74922: LD_VAR 0 4
74926: PPUSH
74927: LD_VAR 0 2
74931: PPUSH
74932: CALL_OW 259
74936: PPUSH
74937: CALL 76348 0 2
74941: ST_TO_ADDR
74942: GO 74909
74944: POP
74945: POP
// if not tmp then
74946: LD_VAR 0 5
74950: NOT
74951: IFFALSE 74955
// exit ;
74953: GO 74975
// result := SortListByListDesc ( units , tmp ) ;
74955: LD_ADDR_VAR 0 3
74959: PUSH
74960: LD_VAR 0 1
74964: PPUSH
74965: LD_VAR 0 5
74969: PPUSH
74970: CALL_OW 77
74974: ST_TO_ADDR
// end ;
74975: LD_VAR 0 3
74979: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74980: LD_INT 0
74982: PPUSH
74983: PPUSH
74984: PPUSH
// result := false ;
74985: LD_ADDR_VAR 0 3
74989: PUSH
74990: LD_INT 0
74992: ST_TO_ADDR
// if not building then
74993: LD_VAR 0 2
74997: NOT
74998: IFFALSE 75002
// exit ;
75000: GO 75140
// x := GetX ( building ) ;
75002: LD_ADDR_VAR 0 4
75006: PUSH
75007: LD_VAR 0 2
75011: PPUSH
75012: CALL_OW 250
75016: ST_TO_ADDR
// y := GetY ( building ) ;
75017: LD_ADDR_VAR 0 5
75021: PUSH
75022: LD_VAR 0 2
75026: PPUSH
75027: CALL_OW 251
75031: ST_TO_ADDR
// if not x or not y then
75032: LD_VAR 0 4
75036: NOT
75037: PUSH
75038: LD_VAR 0 5
75042: NOT
75043: OR
75044: IFFALSE 75048
// exit ;
75046: GO 75140
// if GetTaskList ( unit ) then
75048: LD_VAR 0 1
75052: PPUSH
75053: CALL_OW 437
75057: IFFALSE 75140
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75059: LD_STRING e
75061: PUSH
75062: LD_VAR 0 1
75066: PPUSH
75067: CALL_OW 437
75071: PUSH
75072: LD_INT 1
75074: ARRAY
75075: PUSH
75076: LD_INT 1
75078: ARRAY
75079: EQUAL
75080: PUSH
75081: LD_VAR 0 4
75085: PUSH
75086: LD_VAR 0 1
75090: PPUSH
75091: CALL_OW 437
75095: PUSH
75096: LD_INT 1
75098: ARRAY
75099: PUSH
75100: LD_INT 2
75102: ARRAY
75103: EQUAL
75104: AND
75105: PUSH
75106: LD_VAR 0 5
75110: PUSH
75111: LD_VAR 0 1
75115: PPUSH
75116: CALL_OW 437
75120: PUSH
75121: LD_INT 1
75123: ARRAY
75124: PUSH
75125: LD_INT 3
75127: ARRAY
75128: EQUAL
75129: AND
75130: IFFALSE 75140
// result := true end ;
75132: LD_ADDR_VAR 0 3
75136: PUSH
75137: LD_INT 1
75139: ST_TO_ADDR
// end ;
75140: LD_VAR 0 3
75144: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75145: LD_INT 0
75147: PPUSH
// result := false ;
75148: LD_ADDR_VAR 0 4
75152: PUSH
75153: LD_INT 0
75155: ST_TO_ADDR
// if GetTaskList ( unit ) then
75156: LD_VAR 0 1
75160: PPUSH
75161: CALL_OW 437
75165: IFFALSE 75248
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75167: LD_STRING M
75169: PUSH
75170: LD_VAR 0 1
75174: PPUSH
75175: CALL_OW 437
75179: PUSH
75180: LD_INT 1
75182: ARRAY
75183: PUSH
75184: LD_INT 1
75186: ARRAY
75187: EQUAL
75188: PUSH
75189: LD_VAR 0 2
75193: PUSH
75194: LD_VAR 0 1
75198: PPUSH
75199: CALL_OW 437
75203: PUSH
75204: LD_INT 1
75206: ARRAY
75207: PUSH
75208: LD_INT 2
75210: ARRAY
75211: EQUAL
75212: AND
75213: PUSH
75214: LD_VAR 0 3
75218: PUSH
75219: LD_VAR 0 1
75223: PPUSH
75224: CALL_OW 437
75228: PUSH
75229: LD_INT 1
75231: ARRAY
75232: PUSH
75233: LD_INT 3
75235: ARRAY
75236: EQUAL
75237: AND
75238: IFFALSE 75248
// result := true ;
75240: LD_ADDR_VAR 0 4
75244: PUSH
75245: LD_INT 1
75247: ST_TO_ADDR
// end ; end ;
75248: LD_VAR 0 4
75252: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75253: LD_INT 0
75255: PPUSH
75256: PPUSH
75257: PPUSH
75258: PPUSH
// if not unit or not area then
75259: LD_VAR 0 1
75263: NOT
75264: PUSH
75265: LD_VAR 0 2
75269: NOT
75270: OR
75271: IFFALSE 75275
// exit ;
75273: GO 75451
// tmp := AreaToList ( area , i ) ;
75275: LD_ADDR_VAR 0 6
75279: PUSH
75280: LD_VAR 0 2
75284: PPUSH
75285: LD_VAR 0 5
75289: PPUSH
75290: CALL_OW 517
75294: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75295: LD_ADDR_VAR 0 5
75299: PUSH
75300: DOUBLE
75301: LD_INT 1
75303: DEC
75304: ST_TO_ADDR
75305: LD_VAR 0 6
75309: PUSH
75310: LD_INT 1
75312: ARRAY
75313: PUSH
75314: FOR_TO
75315: IFFALSE 75449
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75317: LD_ADDR_VAR 0 7
75321: PUSH
75322: LD_VAR 0 6
75326: PUSH
75327: LD_INT 1
75329: ARRAY
75330: PUSH
75331: LD_VAR 0 5
75335: ARRAY
75336: PUSH
75337: LD_VAR 0 6
75341: PUSH
75342: LD_INT 2
75344: ARRAY
75345: PUSH
75346: LD_VAR 0 5
75350: ARRAY
75351: PUSH
75352: EMPTY
75353: LIST
75354: LIST
75355: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
75356: LD_INT 92
75358: PUSH
75359: LD_VAR 0 7
75363: PUSH
75364: LD_INT 1
75366: ARRAY
75367: PUSH
75368: LD_VAR 0 7
75372: PUSH
75373: LD_INT 2
75375: ARRAY
75376: PUSH
75377: LD_INT 2
75379: PUSH
75380: EMPTY
75381: LIST
75382: LIST
75383: LIST
75384: LIST
75385: PPUSH
75386: CALL_OW 69
75390: PUSH
75391: LD_INT 0
75393: EQUAL
75394: IFFALSE 75447
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75396: LD_VAR 0 1
75400: PPUSH
75401: LD_VAR 0 7
75405: PUSH
75406: LD_INT 1
75408: ARRAY
75409: PPUSH
75410: LD_VAR 0 7
75414: PUSH
75415: LD_INT 2
75417: ARRAY
75418: PPUSH
75419: LD_VAR 0 3
75423: PPUSH
75424: CALL_OW 48
// result := IsPlaced ( unit ) ;
75428: LD_ADDR_VAR 0 4
75432: PUSH
75433: LD_VAR 0 1
75437: PPUSH
75438: CALL_OW 305
75442: ST_TO_ADDR
// exit ;
75443: POP
75444: POP
75445: GO 75451
// end ; end ;
75447: GO 75314
75449: POP
75450: POP
// end ;
75451: LD_VAR 0 4
75455: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75456: LD_INT 0
75458: PPUSH
75459: PPUSH
75460: PPUSH
// if not side or side > 8 then
75461: LD_VAR 0 1
75465: NOT
75466: PUSH
75467: LD_VAR 0 1
75471: PUSH
75472: LD_INT 8
75474: GREATER
75475: OR
75476: IFFALSE 75480
// exit ;
75478: GO 75667
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75480: LD_ADDR_VAR 0 4
75484: PUSH
75485: LD_INT 22
75487: PUSH
75488: LD_VAR 0 1
75492: PUSH
75493: EMPTY
75494: LIST
75495: LIST
75496: PUSH
75497: LD_INT 21
75499: PUSH
75500: LD_INT 3
75502: PUSH
75503: EMPTY
75504: LIST
75505: LIST
75506: PUSH
75507: EMPTY
75508: LIST
75509: LIST
75510: PPUSH
75511: CALL_OW 69
75515: ST_TO_ADDR
// if not tmp then
75516: LD_VAR 0 4
75520: NOT
75521: IFFALSE 75525
// exit ;
75523: GO 75667
// enable_addtolog := true ;
75525: LD_ADDR_OWVAR 81
75529: PUSH
75530: LD_INT 1
75532: ST_TO_ADDR
// AddToLog ( [ ) ;
75533: LD_STRING [
75535: PPUSH
75536: CALL_OW 561
// for i in tmp do
75540: LD_ADDR_VAR 0 3
75544: PUSH
75545: LD_VAR 0 4
75549: PUSH
75550: FOR_IN
75551: IFFALSE 75658
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75553: LD_STRING [
75555: PUSH
75556: LD_VAR 0 3
75560: PPUSH
75561: CALL_OW 266
75565: STR
75566: PUSH
75567: LD_STRING , 
75569: STR
75570: PUSH
75571: LD_VAR 0 3
75575: PPUSH
75576: CALL_OW 250
75580: STR
75581: PUSH
75582: LD_STRING , 
75584: STR
75585: PUSH
75586: LD_VAR 0 3
75590: PPUSH
75591: CALL_OW 251
75595: STR
75596: PUSH
75597: LD_STRING , 
75599: STR
75600: PUSH
75601: LD_VAR 0 3
75605: PPUSH
75606: CALL_OW 254
75610: STR
75611: PUSH
75612: LD_STRING , 
75614: STR
75615: PUSH
75616: LD_VAR 0 3
75620: PPUSH
75621: LD_INT 1
75623: PPUSH
75624: CALL_OW 268
75628: STR
75629: PUSH
75630: LD_STRING , 
75632: STR
75633: PUSH
75634: LD_VAR 0 3
75638: PPUSH
75639: LD_INT 2
75641: PPUSH
75642: CALL_OW 268
75646: STR
75647: PUSH
75648: LD_STRING ],
75650: STR
75651: PPUSH
75652: CALL_OW 561
// end ;
75656: GO 75550
75658: POP
75659: POP
// AddToLog ( ]; ) ;
75660: LD_STRING ];
75662: PPUSH
75663: CALL_OW 561
// end ;
75667: LD_VAR 0 2
75671: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75672: LD_INT 0
75674: PPUSH
75675: PPUSH
75676: PPUSH
75677: PPUSH
75678: PPUSH
// if not area or not rate or not max then
75679: LD_VAR 0 1
75683: NOT
75684: PUSH
75685: LD_VAR 0 2
75689: NOT
75690: OR
75691: PUSH
75692: LD_VAR 0 4
75696: NOT
75697: OR
75698: IFFALSE 75702
// exit ;
75700: GO 75891
// while 1 do
75702: LD_INT 1
75704: IFFALSE 75891
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75706: LD_ADDR_VAR 0 9
75710: PUSH
75711: LD_VAR 0 1
75715: PPUSH
75716: LD_INT 1
75718: PPUSH
75719: CALL_OW 287
75723: PUSH
75724: LD_INT 10
75726: MUL
75727: ST_TO_ADDR
// r := rate / 10 ;
75728: LD_ADDR_VAR 0 7
75732: PUSH
75733: LD_VAR 0 2
75737: PUSH
75738: LD_INT 10
75740: DIVREAL
75741: ST_TO_ADDR
// time := 1 1$00 ;
75742: LD_ADDR_VAR 0 8
75746: PUSH
75747: LD_INT 2100
75749: ST_TO_ADDR
// if amount < min then
75750: LD_VAR 0 9
75754: PUSH
75755: LD_VAR 0 3
75759: LESS
75760: IFFALSE 75778
// r := r * 2 else
75762: LD_ADDR_VAR 0 7
75766: PUSH
75767: LD_VAR 0 7
75771: PUSH
75772: LD_INT 2
75774: MUL
75775: ST_TO_ADDR
75776: GO 75804
// if amount > max then
75778: LD_VAR 0 9
75782: PUSH
75783: LD_VAR 0 4
75787: GREATER
75788: IFFALSE 75804
// r := r / 2 ;
75790: LD_ADDR_VAR 0 7
75794: PUSH
75795: LD_VAR 0 7
75799: PUSH
75800: LD_INT 2
75802: DIVREAL
75803: ST_TO_ADDR
// time := time / r ;
75804: LD_ADDR_VAR 0 8
75808: PUSH
75809: LD_VAR 0 8
75813: PUSH
75814: LD_VAR 0 7
75818: DIVREAL
75819: ST_TO_ADDR
// if time < 0 then
75820: LD_VAR 0 8
75824: PUSH
75825: LD_INT 0
75827: LESS
75828: IFFALSE 75845
// time := time * - 1 ;
75830: LD_ADDR_VAR 0 8
75834: PUSH
75835: LD_VAR 0 8
75839: PUSH
75840: LD_INT 1
75842: NEG
75843: MUL
75844: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
75845: LD_VAR 0 8
75849: PUSH
75850: LD_INT 35
75852: PPUSH
75853: LD_INT 875
75855: PPUSH
75856: CALL_OW 12
75860: PLUS
75861: PPUSH
75862: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75866: LD_INT 1
75868: PPUSH
75869: LD_INT 5
75871: PPUSH
75872: CALL_OW 12
75876: PPUSH
75877: LD_VAR 0 1
75881: PPUSH
75882: LD_INT 1
75884: PPUSH
75885: CALL_OW 55
// end ;
75889: GO 75702
// end ;
75891: LD_VAR 0 5
75895: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75896: LD_INT 0
75898: PPUSH
75899: PPUSH
75900: PPUSH
75901: PPUSH
75902: PPUSH
75903: PPUSH
75904: PPUSH
75905: PPUSH
// if not turrets or not factories then
75906: LD_VAR 0 1
75910: NOT
75911: PUSH
75912: LD_VAR 0 2
75916: NOT
75917: OR
75918: IFFALSE 75922
// exit ;
75920: GO 76229
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75922: LD_ADDR_VAR 0 10
75926: PUSH
75927: LD_INT 5
75929: PUSH
75930: LD_INT 6
75932: PUSH
75933: EMPTY
75934: LIST
75935: LIST
75936: PUSH
75937: LD_INT 2
75939: PUSH
75940: LD_INT 4
75942: PUSH
75943: EMPTY
75944: LIST
75945: LIST
75946: PUSH
75947: LD_INT 3
75949: PUSH
75950: LD_INT 5
75952: PUSH
75953: EMPTY
75954: LIST
75955: LIST
75956: PUSH
75957: EMPTY
75958: LIST
75959: LIST
75960: LIST
75961: PUSH
75962: LD_INT 24
75964: PUSH
75965: LD_INT 25
75967: PUSH
75968: EMPTY
75969: LIST
75970: LIST
75971: PUSH
75972: LD_INT 23
75974: PUSH
75975: LD_INT 27
75977: PUSH
75978: EMPTY
75979: LIST
75980: LIST
75981: PUSH
75982: EMPTY
75983: LIST
75984: LIST
75985: PUSH
75986: LD_INT 42
75988: PUSH
75989: LD_INT 43
75991: PUSH
75992: EMPTY
75993: LIST
75994: LIST
75995: PUSH
75996: LD_INT 44
75998: PUSH
75999: LD_INT 46
76001: PUSH
76002: EMPTY
76003: LIST
76004: LIST
76005: PUSH
76006: LD_INT 45
76008: PUSH
76009: LD_INT 47
76011: PUSH
76012: EMPTY
76013: LIST
76014: LIST
76015: PUSH
76016: EMPTY
76017: LIST
76018: LIST
76019: LIST
76020: PUSH
76021: EMPTY
76022: LIST
76023: LIST
76024: LIST
76025: ST_TO_ADDR
// result := [ ] ;
76026: LD_ADDR_VAR 0 3
76030: PUSH
76031: EMPTY
76032: ST_TO_ADDR
// for i in turrets do
76033: LD_ADDR_VAR 0 4
76037: PUSH
76038: LD_VAR 0 1
76042: PUSH
76043: FOR_IN
76044: IFFALSE 76227
// begin nat := GetNation ( i ) ;
76046: LD_ADDR_VAR 0 7
76050: PUSH
76051: LD_VAR 0 4
76055: PPUSH
76056: CALL_OW 248
76060: ST_TO_ADDR
// weapon := 0 ;
76061: LD_ADDR_VAR 0 8
76065: PUSH
76066: LD_INT 0
76068: ST_TO_ADDR
// if not nat then
76069: LD_VAR 0 7
76073: NOT
76074: IFFALSE 76078
// continue ;
76076: GO 76043
// for j in list [ nat ] do
76078: LD_ADDR_VAR 0 5
76082: PUSH
76083: LD_VAR 0 10
76087: PUSH
76088: LD_VAR 0 7
76092: ARRAY
76093: PUSH
76094: FOR_IN
76095: IFFALSE 76136
// if GetBWeapon ( i ) = j [ 1 ] then
76097: LD_VAR 0 4
76101: PPUSH
76102: CALL_OW 269
76106: PUSH
76107: LD_VAR 0 5
76111: PUSH
76112: LD_INT 1
76114: ARRAY
76115: EQUAL
76116: IFFALSE 76134
// begin weapon := j [ 2 ] ;
76118: LD_ADDR_VAR 0 8
76122: PUSH
76123: LD_VAR 0 5
76127: PUSH
76128: LD_INT 2
76130: ARRAY
76131: ST_TO_ADDR
// break ;
76132: GO 76136
// end ;
76134: GO 76094
76136: POP
76137: POP
// if not weapon then
76138: LD_VAR 0 8
76142: NOT
76143: IFFALSE 76147
// continue ;
76145: GO 76043
// for k in factories do
76147: LD_ADDR_VAR 0 6
76151: PUSH
76152: LD_VAR 0 2
76156: PUSH
76157: FOR_IN
76158: IFFALSE 76223
// begin weapons := AvailableWeaponList ( k ) ;
76160: LD_ADDR_VAR 0 9
76164: PUSH
76165: LD_VAR 0 6
76169: PPUSH
76170: CALL_OW 478
76174: ST_TO_ADDR
// if not weapons then
76175: LD_VAR 0 9
76179: NOT
76180: IFFALSE 76184
// continue ;
76182: GO 76157
// if weapon in weapons then
76184: LD_VAR 0 8
76188: PUSH
76189: LD_VAR 0 9
76193: IN
76194: IFFALSE 76221
// begin result := [ i , weapon ] ;
76196: LD_ADDR_VAR 0 3
76200: PUSH
76201: LD_VAR 0 4
76205: PUSH
76206: LD_VAR 0 8
76210: PUSH
76211: EMPTY
76212: LIST
76213: LIST
76214: ST_TO_ADDR
// exit ;
76215: POP
76216: POP
76217: POP
76218: POP
76219: GO 76229
// end ; end ;
76221: GO 76157
76223: POP
76224: POP
// end ;
76225: GO 76043
76227: POP
76228: POP
// end ;
76229: LD_VAR 0 3
76233: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76234: LD_INT 0
76236: PPUSH
// if not side or side > 8 then
76237: LD_VAR 0 3
76241: NOT
76242: PUSH
76243: LD_VAR 0 3
76247: PUSH
76248: LD_INT 8
76250: GREATER
76251: OR
76252: IFFALSE 76256
// exit ;
76254: GO 76315
// if not range then
76256: LD_VAR 0 4
76260: NOT
76261: IFFALSE 76272
// range := - 12 ;
76263: LD_ADDR_VAR 0 4
76267: PUSH
76268: LD_INT 12
76270: NEG
76271: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76272: LD_VAR 0 1
76276: PPUSH
76277: LD_VAR 0 2
76281: PPUSH
76282: LD_VAR 0 3
76286: PPUSH
76287: LD_VAR 0 4
76291: PPUSH
76292: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76296: LD_VAR 0 1
76300: PPUSH
76301: LD_VAR 0 2
76305: PPUSH
76306: LD_VAR 0 3
76310: PPUSH
76311: CALL_OW 331
// end ;
76315: LD_VAR 0 5
76319: RET
// export function Video ( mode ) ; begin
76320: LD_INT 0
76322: PPUSH
// ingame_video = mode ;
76323: LD_ADDR_OWVAR 52
76327: PUSH
76328: LD_VAR 0 1
76332: ST_TO_ADDR
// interface_hidden = mode ;
76333: LD_ADDR_OWVAR 54
76337: PUSH
76338: LD_VAR 0 1
76342: ST_TO_ADDR
// end ;
76343: LD_VAR 0 2
76347: RET
// export function Join ( array , element ) ; begin
76348: LD_INT 0
76350: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76351: LD_ADDR_VAR 0 3
76355: PUSH
76356: LD_VAR 0 1
76360: PPUSH
76361: LD_VAR 0 1
76365: PUSH
76366: LD_INT 1
76368: PLUS
76369: PPUSH
76370: LD_VAR 0 2
76374: PPUSH
76375: CALL_OW 1
76379: ST_TO_ADDR
// end ;
76380: LD_VAR 0 3
76384: RET
// export function JoinUnion ( array , element ) ; begin
76385: LD_INT 0
76387: PPUSH
// result := array union element ;
76388: LD_ADDR_VAR 0 3
76392: PUSH
76393: LD_VAR 0 1
76397: PUSH
76398: LD_VAR 0 2
76402: UNION
76403: ST_TO_ADDR
// end ;
76404: LD_VAR 0 3
76408: RET
// export function GetBehemoths ( side ) ; begin
76409: LD_INT 0
76411: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76412: LD_ADDR_VAR 0 2
76416: PUSH
76417: LD_INT 22
76419: PUSH
76420: LD_VAR 0 1
76424: PUSH
76425: EMPTY
76426: LIST
76427: LIST
76428: PUSH
76429: LD_INT 31
76431: PUSH
76432: LD_INT 25
76434: PUSH
76435: EMPTY
76436: LIST
76437: LIST
76438: PUSH
76439: EMPTY
76440: LIST
76441: LIST
76442: PPUSH
76443: CALL_OW 69
76447: ST_TO_ADDR
// end ;
76448: LD_VAR 0 2
76452: RET
// export function Shuffle ( array ) ; var i , index ; begin
76453: LD_INT 0
76455: PPUSH
76456: PPUSH
76457: PPUSH
// result := [ ] ;
76458: LD_ADDR_VAR 0 2
76462: PUSH
76463: EMPTY
76464: ST_TO_ADDR
// if not array then
76465: LD_VAR 0 1
76469: NOT
76470: IFFALSE 76474
// exit ;
76472: GO 76573
// Randomize ;
76474: CALL_OW 10
// for i = array downto 1 do
76478: LD_ADDR_VAR 0 3
76482: PUSH
76483: DOUBLE
76484: LD_VAR 0 1
76488: INC
76489: ST_TO_ADDR
76490: LD_INT 1
76492: PUSH
76493: FOR_DOWNTO
76494: IFFALSE 76571
// begin index := rand ( 1 , array ) ;
76496: LD_ADDR_VAR 0 4
76500: PUSH
76501: LD_INT 1
76503: PPUSH
76504: LD_VAR 0 1
76508: PPUSH
76509: CALL_OW 12
76513: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76514: LD_ADDR_VAR 0 2
76518: PUSH
76519: LD_VAR 0 2
76523: PPUSH
76524: LD_VAR 0 2
76528: PUSH
76529: LD_INT 1
76531: PLUS
76532: PPUSH
76533: LD_VAR 0 1
76537: PUSH
76538: LD_VAR 0 4
76542: ARRAY
76543: PPUSH
76544: CALL_OW 2
76548: ST_TO_ADDR
// array := Delete ( array , index ) ;
76549: LD_ADDR_VAR 0 1
76553: PUSH
76554: LD_VAR 0 1
76558: PPUSH
76559: LD_VAR 0 4
76563: PPUSH
76564: CALL_OW 3
76568: ST_TO_ADDR
// end ;
76569: GO 76493
76571: POP
76572: POP
// end ;
76573: LD_VAR 0 2
76577: RET
// export function GetBaseMaterials ( base ) ; begin
76578: LD_INT 0
76580: PPUSH
// result := [ 0 , 0 , 0 ] ;
76581: LD_ADDR_VAR 0 2
76585: PUSH
76586: LD_INT 0
76588: PUSH
76589: LD_INT 0
76591: PUSH
76592: LD_INT 0
76594: PUSH
76595: EMPTY
76596: LIST
76597: LIST
76598: LIST
76599: ST_TO_ADDR
// if not base then
76600: LD_VAR 0 1
76604: NOT
76605: IFFALSE 76609
// exit ;
76607: GO 76658
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76609: LD_ADDR_VAR 0 2
76613: PUSH
76614: LD_VAR 0 1
76618: PPUSH
76619: LD_INT 1
76621: PPUSH
76622: CALL_OW 275
76626: PUSH
76627: LD_VAR 0 1
76631: PPUSH
76632: LD_INT 2
76634: PPUSH
76635: CALL_OW 275
76639: PUSH
76640: LD_VAR 0 1
76644: PPUSH
76645: LD_INT 3
76647: PPUSH
76648: CALL_OW 275
76652: PUSH
76653: EMPTY
76654: LIST
76655: LIST
76656: LIST
76657: ST_TO_ADDR
// end ;
76658: LD_VAR 0 2
76662: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76663: LD_INT 0
76665: PPUSH
76666: PPUSH
// result := array ;
76667: LD_ADDR_VAR 0 3
76671: PUSH
76672: LD_VAR 0 1
76676: ST_TO_ADDR
// if size >= result then
76677: LD_VAR 0 2
76681: PUSH
76682: LD_VAR 0 3
76686: GREATEREQUAL
76687: IFFALSE 76691
// exit ;
76689: GO 76741
// if size then
76691: LD_VAR 0 2
76695: IFFALSE 76741
// for i := array downto size do
76697: LD_ADDR_VAR 0 4
76701: PUSH
76702: DOUBLE
76703: LD_VAR 0 1
76707: INC
76708: ST_TO_ADDR
76709: LD_VAR 0 2
76713: PUSH
76714: FOR_DOWNTO
76715: IFFALSE 76739
// result := Delete ( result , result ) ;
76717: LD_ADDR_VAR 0 3
76721: PUSH
76722: LD_VAR 0 3
76726: PPUSH
76727: LD_VAR 0 3
76731: PPUSH
76732: CALL_OW 3
76736: ST_TO_ADDR
76737: GO 76714
76739: POP
76740: POP
// end ;
76741: LD_VAR 0 3
76745: RET
// export function ComExit ( unit ) ; var tmp ; begin
76746: LD_INT 0
76748: PPUSH
76749: PPUSH
// if not IsInUnit ( unit ) then
76750: LD_VAR 0 1
76754: PPUSH
76755: CALL_OW 310
76759: NOT
76760: IFFALSE 76764
// exit ;
76762: GO 76824
// tmp := IsInUnit ( unit ) ;
76764: LD_ADDR_VAR 0 3
76768: PUSH
76769: LD_VAR 0 1
76773: PPUSH
76774: CALL_OW 310
76778: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76779: LD_VAR 0 3
76783: PPUSH
76784: CALL_OW 247
76788: PUSH
76789: LD_INT 2
76791: EQUAL
76792: IFFALSE 76805
// ComExitVehicle ( unit ) else
76794: LD_VAR 0 1
76798: PPUSH
76799: CALL_OW 121
76803: GO 76814
// ComExitBuilding ( unit ) ;
76805: LD_VAR 0 1
76809: PPUSH
76810: CALL_OW 122
// result := tmp ;
76814: LD_ADDR_VAR 0 2
76818: PUSH
76819: LD_VAR 0 3
76823: ST_TO_ADDR
// end ;
76824: LD_VAR 0 2
76828: RET
// export function ComExitAll ( units ) ; var i ; begin
76829: LD_INT 0
76831: PPUSH
76832: PPUSH
// if not units then
76833: LD_VAR 0 1
76837: NOT
76838: IFFALSE 76842
// exit ;
76840: GO 76868
// for i in units do
76842: LD_ADDR_VAR 0 3
76846: PUSH
76847: LD_VAR 0 1
76851: PUSH
76852: FOR_IN
76853: IFFALSE 76866
// ComExit ( i ) ;
76855: LD_VAR 0 3
76859: PPUSH
76860: CALL 76746 0 1
76864: GO 76852
76866: POP
76867: POP
// end ;
76868: LD_VAR 0 2
76872: RET
// export function ResetHc ; begin
76873: LD_INT 0
76875: PPUSH
// InitHc ;
76876: CALL_OW 19
// hc_importance := 0 ;
76880: LD_ADDR_OWVAR 32
76884: PUSH
76885: LD_INT 0
76887: ST_TO_ADDR
// end ;
76888: LD_VAR 0 1
76892: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76893: LD_INT 0
76895: PPUSH
76896: PPUSH
76897: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76898: LD_ADDR_VAR 0 6
76902: PUSH
76903: LD_VAR 0 1
76907: PUSH
76908: LD_VAR 0 3
76912: PLUS
76913: PUSH
76914: LD_INT 2
76916: DIV
76917: ST_TO_ADDR
// if _x < 0 then
76918: LD_VAR 0 6
76922: PUSH
76923: LD_INT 0
76925: LESS
76926: IFFALSE 76943
// _x := _x * - 1 ;
76928: LD_ADDR_VAR 0 6
76932: PUSH
76933: LD_VAR 0 6
76937: PUSH
76938: LD_INT 1
76940: NEG
76941: MUL
76942: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76943: LD_ADDR_VAR 0 7
76947: PUSH
76948: LD_VAR 0 2
76952: PUSH
76953: LD_VAR 0 4
76957: PLUS
76958: PUSH
76959: LD_INT 2
76961: DIV
76962: ST_TO_ADDR
// if _y < 0 then
76963: LD_VAR 0 7
76967: PUSH
76968: LD_INT 0
76970: LESS
76971: IFFALSE 76988
// _y := _y * - 1 ;
76973: LD_ADDR_VAR 0 7
76977: PUSH
76978: LD_VAR 0 7
76982: PUSH
76983: LD_INT 1
76985: NEG
76986: MUL
76987: ST_TO_ADDR
// result := [ _x , _y ] ;
76988: LD_ADDR_VAR 0 5
76992: PUSH
76993: LD_VAR 0 6
76997: PUSH
76998: LD_VAR 0 7
77002: PUSH
77003: EMPTY
77004: LIST
77005: LIST
77006: ST_TO_ADDR
// end ;
77007: LD_VAR 0 5
77011: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77012: LD_INT 0
77014: PPUSH
77015: PPUSH
77016: PPUSH
77017: PPUSH
// task := GetTaskList ( unit ) ;
77018: LD_ADDR_VAR 0 7
77022: PUSH
77023: LD_VAR 0 1
77027: PPUSH
77028: CALL_OW 437
77032: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77033: LD_VAR 0 7
77037: NOT
77038: PUSH
77039: LD_VAR 0 1
77043: PPUSH
77044: LD_VAR 0 2
77048: PPUSH
77049: CALL_OW 308
77053: NOT
77054: AND
77055: IFFALSE 77059
// exit ;
77057: GO 77177
// if IsInArea ( unit , area ) then
77059: LD_VAR 0 1
77063: PPUSH
77064: LD_VAR 0 2
77068: PPUSH
77069: CALL_OW 308
77073: IFFALSE 77091
// begin ComMoveToArea ( unit , goAway ) ;
77075: LD_VAR 0 1
77079: PPUSH
77080: LD_VAR 0 3
77084: PPUSH
77085: CALL_OW 113
// exit ;
77089: GO 77177
// end ; if task [ 1 ] [ 1 ] <> M then
77091: LD_VAR 0 7
77095: PUSH
77096: LD_INT 1
77098: ARRAY
77099: PUSH
77100: LD_INT 1
77102: ARRAY
77103: PUSH
77104: LD_STRING M
77106: NONEQUAL
77107: IFFALSE 77111
// exit ;
77109: GO 77177
// x := task [ 1 ] [ 2 ] ;
77111: LD_ADDR_VAR 0 5
77115: PUSH
77116: LD_VAR 0 7
77120: PUSH
77121: LD_INT 1
77123: ARRAY
77124: PUSH
77125: LD_INT 2
77127: ARRAY
77128: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77129: LD_ADDR_VAR 0 6
77133: PUSH
77134: LD_VAR 0 7
77138: PUSH
77139: LD_INT 1
77141: ARRAY
77142: PUSH
77143: LD_INT 3
77145: ARRAY
77146: ST_TO_ADDR
// if InArea ( x , y , area ) then
77147: LD_VAR 0 5
77151: PPUSH
77152: LD_VAR 0 6
77156: PPUSH
77157: LD_VAR 0 2
77161: PPUSH
77162: CALL_OW 309
77166: IFFALSE 77177
// ComStop ( unit ) ;
77168: LD_VAR 0 1
77172: PPUSH
77173: CALL_OW 141
// end ;
77177: LD_VAR 0 4
77181: RET
// export function Abs ( value ) ; begin
77182: LD_INT 0
77184: PPUSH
// result := value ;
77185: LD_ADDR_VAR 0 2
77189: PUSH
77190: LD_VAR 0 1
77194: ST_TO_ADDR
// if value < 0 then
77195: LD_VAR 0 1
77199: PUSH
77200: LD_INT 0
77202: LESS
77203: IFFALSE 77220
// result := value * - 1 ;
77205: LD_ADDR_VAR 0 2
77209: PUSH
77210: LD_VAR 0 1
77214: PUSH
77215: LD_INT 1
77217: NEG
77218: MUL
77219: ST_TO_ADDR
// end ;
77220: LD_VAR 0 2
77224: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77225: LD_INT 0
77227: PPUSH
77228: PPUSH
77229: PPUSH
77230: PPUSH
77231: PPUSH
77232: PPUSH
77233: PPUSH
77234: PPUSH
// if not unit or not building then
77235: LD_VAR 0 1
77239: NOT
77240: PUSH
77241: LD_VAR 0 2
77245: NOT
77246: OR
77247: IFFALSE 77251
// exit ;
77249: GO 77477
// x := GetX ( building ) ;
77251: LD_ADDR_VAR 0 4
77255: PUSH
77256: LD_VAR 0 2
77260: PPUSH
77261: CALL_OW 250
77265: ST_TO_ADDR
// y := GetY ( building ) ;
77266: LD_ADDR_VAR 0 6
77270: PUSH
77271: LD_VAR 0 2
77275: PPUSH
77276: CALL_OW 251
77280: ST_TO_ADDR
// d := GetDir ( building ) ;
77281: LD_ADDR_VAR 0 8
77285: PUSH
77286: LD_VAR 0 2
77290: PPUSH
77291: CALL_OW 254
77295: ST_TO_ADDR
// r := 4 ;
77296: LD_ADDR_VAR 0 9
77300: PUSH
77301: LD_INT 4
77303: ST_TO_ADDR
// for i := 1 to 5 do
77304: LD_ADDR_VAR 0 10
77308: PUSH
77309: DOUBLE
77310: LD_INT 1
77312: DEC
77313: ST_TO_ADDR
77314: LD_INT 5
77316: PUSH
77317: FOR_TO
77318: IFFALSE 77475
// begin _x := ShiftX ( x , d , r + i ) ;
77320: LD_ADDR_VAR 0 5
77324: PUSH
77325: LD_VAR 0 4
77329: PPUSH
77330: LD_VAR 0 8
77334: PPUSH
77335: LD_VAR 0 9
77339: PUSH
77340: LD_VAR 0 10
77344: PLUS
77345: PPUSH
77346: CALL_OW 272
77350: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77351: LD_ADDR_VAR 0 7
77355: PUSH
77356: LD_VAR 0 6
77360: PPUSH
77361: LD_VAR 0 8
77365: PPUSH
77366: LD_VAR 0 9
77370: PUSH
77371: LD_VAR 0 10
77375: PLUS
77376: PPUSH
77377: CALL_OW 273
77381: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77382: LD_VAR 0 5
77386: PPUSH
77387: LD_VAR 0 7
77391: PPUSH
77392: CALL_OW 488
77396: PUSH
77397: LD_VAR 0 5
77401: PPUSH
77402: LD_VAR 0 7
77406: PPUSH
77407: CALL_OW 428
77411: PPUSH
77412: CALL_OW 247
77416: PUSH
77417: LD_INT 3
77419: PUSH
77420: LD_INT 2
77422: PUSH
77423: EMPTY
77424: LIST
77425: LIST
77426: IN
77427: NOT
77428: AND
77429: IFFALSE 77473
// begin ComMoveXY ( unit , _x , _y ) ;
77431: LD_VAR 0 1
77435: PPUSH
77436: LD_VAR 0 5
77440: PPUSH
77441: LD_VAR 0 7
77445: PPUSH
77446: CALL_OW 111
// result := [ _x , _y ] ;
77450: LD_ADDR_VAR 0 3
77454: PUSH
77455: LD_VAR 0 5
77459: PUSH
77460: LD_VAR 0 7
77464: PUSH
77465: EMPTY
77466: LIST
77467: LIST
77468: ST_TO_ADDR
// exit ;
77469: POP
77470: POP
77471: GO 77477
// end ; end ;
77473: GO 77317
77475: POP
77476: POP
// end ;
77477: LD_VAR 0 3
77481: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77482: LD_INT 0
77484: PPUSH
77485: PPUSH
77486: PPUSH
// result := 0 ;
77487: LD_ADDR_VAR 0 3
77491: PUSH
77492: LD_INT 0
77494: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77495: LD_VAR 0 1
77499: PUSH
77500: LD_INT 0
77502: LESS
77503: PUSH
77504: LD_VAR 0 1
77508: PUSH
77509: LD_INT 8
77511: GREATER
77512: OR
77513: PUSH
77514: LD_VAR 0 2
77518: PUSH
77519: LD_INT 0
77521: LESS
77522: OR
77523: PUSH
77524: LD_VAR 0 2
77528: PUSH
77529: LD_INT 8
77531: GREATER
77532: OR
77533: IFFALSE 77537
// exit ;
77535: GO 77612
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77537: LD_ADDR_VAR 0 4
77541: PUSH
77542: LD_INT 22
77544: PUSH
77545: LD_VAR 0 2
77549: PUSH
77550: EMPTY
77551: LIST
77552: LIST
77553: PPUSH
77554: CALL_OW 69
77558: PUSH
77559: FOR_IN
77560: IFFALSE 77610
// begin un := UnitShoot ( i ) ;
77562: LD_ADDR_VAR 0 5
77566: PUSH
77567: LD_VAR 0 4
77571: PPUSH
77572: CALL_OW 504
77576: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77577: LD_VAR 0 5
77581: PPUSH
77582: CALL_OW 255
77586: PUSH
77587: LD_VAR 0 1
77591: EQUAL
77592: IFFALSE 77608
// begin result := un ;
77594: LD_ADDR_VAR 0 3
77598: PUSH
77599: LD_VAR 0 5
77603: ST_TO_ADDR
// exit ;
77604: POP
77605: POP
77606: GO 77612
// end ; end ;
77608: GO 77559
77610: POP
77611: POP
// end ;
77612: LD_VAR 0 3
77616: RET
// export function GetCargoBay ( units ) ; begin
77617: LD_INT 0
77619: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77620: LD_ADDR_VAR 0 2
77624: PUSH
77625: LD_VAR 0 1
77629: PPUSH
77630: LD_INT 2
77632: PUSH
77633: LD_INT 34
77635: PUSH
77636: LD_INT 12
77638: PUSH
77639: EMPTY
77640: LIST
77641: LIST
77642: PUSH
77643: LD_INT 34
77645: PUSH
77646: LD_INT 51
77648: PUSH
77649: EMPTY
77650: LIST
77651: LIST
77652: PUSH
77653: LD_INT 34
77655: PUSH
77656: LD_INT 32
77658: PUSH
77659: EMPTY
77660: LIST
77661: LIST
77662: PUSH
77663: LD_INT 34
77665: PUSH
77666: LD_INT 89
77668: PUSH
77669: EMPTY
77670: LIST
77671: LIST
77672: PUSH
77673: EMPTY
77674: LIST
77675: LIST
77676: LIST
77677: LIST
77678: LIST
77679: PPUSH
77680: CALL_OW 72
77684: ST_TO_ADDR
// end ;
77685: LD_VAR 0 2
77689: RET
// export function Negate ( value ) ; begin
77690: LD_INT 0
77692: PPUSH
// result := not value ;
77693: LD_ADDR_VAR 0 2
77697: PUSH
77698: LD_VAR 0 1
77702: NOT
77703: ST_TO_ADDR
// end ;
77704: LD_VAR 0 2
77708: RET
// export function Inc ( value ) ; begin
77709: LD_INT 0
77711: PPUSH
// result := value + 1 ;
77712: LD_ADDR_VAR 0 2
77716: PUSH
77717: LD_VAR 0 1
77721: PUSH
77722: LD_INT 1
77724: PLUS
77725: ST_TO_ADDR
// end ;
77726: LD_VAR 0 2
77730: RET
// export function Dec ( value ) ; begin
77731: LD_INT 0
77733: PPUSH
// result := value - 1 ;
77734: LD_ADDR_VAR 0 2
77738: PUSH
77739: LD_VAR 0 1
77743: PUSH
77744: LD_INT 1
77746: MINUS
77747: ST_TO_ADDR
// end ;
77748: LD_VAR 0 2
77752: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77753: LD_INT 0
77755: PPUSH
77756: PPUSH
77757: PPUSH
77758: PPUSH
77759: PPUSH
77760: PPUSH
77761: PPUSH
77762: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77763: LD_VAR 0 1
77767: PPUSH
77768: LD_VAR 0 2
77772: PPUSH
77773: CALL_OW 488
77777: NOT
77778: PUSH
77779: LD_VAR 0 3
77783: PPUSH
77784: LD_VAR 0 4
77788: PPUSH
77789: CALL_OW 488
77793: NOT
77794: OR
77795: IFFALSE 77808
// begin result := - 1 ;
77797: LD_ADDR_VAR 0 5
77801: PUSH
77802: LD_INT 1
77804: NEG
77805: ST_TO_ADDR
// exit ;
77806: GO 78043
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77808: LD_ADDR_VAR 0 12
77812: PUSH
77813: LD_VAR 0 1
77817: PPUSH
77818: LD_VAR 0 2
77822: PPUSH
77823: LD_VAR 0 3
77827: PPUSH
77828: LD_VAR 0 4
77832: PPUSH
77833: CALL 76893 0 4
77837: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
77838: LD_ADDR_VAR 0 11
77842: PUSH
77843: LD_VAR 0 1
77847: PPUSH
77848: LD_VAR 0 2
77852: PPUSH
77853: LD_VAR 0 12
77857: PUSH
77858: LD_INT 1
77860: ARRAY
77861: PPUSH
77862: LD_VAR 0 12
77866: PUSH
77867: LD_INT 2
77869: ARRAY
77870: PPUSH
77871: CALL_OW 298
77875: ST_TO_ADDR
// distance := 9999 ;
77876: LD_ADDR_VAR 0 10
77880: PUSH
77881: LD_INT 9999
77883: ST_TO_ADDR
// for i := 0 to 5 do
77884: LD_ADDR_VAR 0 6
77888: PUSH
77889: DOUBLE
77890: LD_INT 0
77892: DEC
77893: ST_TO_ADDR
77894: LD_INT 5
77896: PUSH
77897: FOR_TO
77898: IFFALSE 78041
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77900: LD_ADDR_VAR 0 7
77904: PUSH
77905: LD_VAR 0 1
77909: PPUSH
77910: LD_VAR 0 6
77914: PPUSH
77915: LD_VAR 0 11
77919: PPUSH
77920: CALL_OW 272
77924: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
77925: LD_ADDR_VAR 0 8
77929: PUSH
77930: LD_VAR 0 2
77934: PPUSH
77935: LD_VAR 0 6
77939: PPUSH
77940: LD_VAR 0 11
77944: PPUSH
77945: CALL_OW 273
77949: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77950: LD_VAR 0 7
77954: PPUSH
77955: LD_VAR 0 8
77959: PPUSH
77960: CALL_OW 488
77964: NOT
77965: IFFALSE 77969
// continue ;
77967: GO 77897
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77969: LD_ADDR_VAR 0 9
77973: PUSH
77974: LD_VAR 0 12
77978: PUSH
77979: LD_INT 1
77981: ARRAY
77982: PPUSH
77983: LD_VAR 0 12
77987: PUSH
77988: LD_INT 2
77990: ARRAY
77991: PPUSH
77992: LD_VAR 0 7
77996: PPUSH
77997: LD_VAR 0 8
78001: PPUSH
78002: CALL_OW 298
78006: ST_TO_ADDR
// if tmp < distance then
78007: LD_VAR 0 9
78011: PUSH
78012: LD_VAR 0 10
78016: LESS
78017: IFFALSE 78039
// begin result := i ;
78019: LD_ADDR_VAR 0 5
78023: PUSH
78024: LD_VAR 0 6
78028: ST_TO_ADDR
// distance := tmp ;
78029: LD_ADDR_VAR 0 10
78033: PUSH
78034: LD_VAR 0 9
78038: ST_TO_ADDR
// end ; end ;
78039: GO 77897
78041: POP
78042: POP
// end ;
78043: LD_VAR 0 5
78047: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78048: LD_INT 0
78050: PPUSH
78051: PPUSH
// if not driver or not IsInUnit ( driver ) then
78052: LD_VAR 0 1
78056: NOT
78057: PUSH
78058: LD_VAR 0 1
78062: PPUSH
78063: CALL_OW 310
78067: NOT
78068: OR
78069: IFFALSE 78073
// exit ;
78071: GO 78163
// vehicle := IsInUnit ( driver ) ;
78073: LD_ADDR_VAR 0 3
78077: PUSH
78078: LD_VAR 0 1
78082: PPUSH
78083: CALL_OW 310
78087: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78088: LD_VAR 0 1
78092: PPUSH
78093: LD_STRING \
78095: PUSH
78096: LD_INT 0
78098: PUSH
78099: LD_INT 0
78101: PUSH
78102: LD_INT 0
78104: PUSH
78105: LD_INT 0
78107: PUSH
78108: LD_INT 0
78110: PUSH
78111: LD_INT 0
78113: PUSH
78114: EMPTY
78115: LIST
78116: LIST
78117: LIST
78118: LIST
78119: LIST
78120: LIST
78121: LIST
78122: PUSH
78123: LD_STRING E
78125: PUSH
78126: LD_INT 0
78128: PUSH
78129: LD_INT 0
78131: PUSH
78132: LD_VAR 0 3
78136: PUSH
78137: LD_INT 0
78139: PUSH
78140: LD_INT 0
78142: PUSH
78143: LD_INT 0
78145: PUSH
78146: EMPTY
78147: LIST
78148: LIST
78149: LIST
78150: LIST
78151: LIST
78152: LIST
78153: LIST
78154: PUSH
78155: EMPTY
78156: LIST
78157: LIST
78158: PPUSH
78159: CALL_OW 446
// end ;
78163: LD_VAR 0 2
78167: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78168: LD_INT 0
78170: PPUSH
78171: PPUSH
// if not driver or not IsInUnit ( driver ) then
78172: LD_VAR 0 1
78176: NOT
78177: PUSH
78178: LD_VAR 0 1
78182: PPUSH
78183: CALL_OW 310
78187: NOT
78188: OR
78189: IFFALSE 78193
// exit ;
78191: GO 78283
// vehicle := IsInUnit ( driver ) ;
78193: LD_ADDR_VAR 0 3
78197: PUSH
78198: LD_VAR 0 1
78202: PPUSH
78203: CALL_OW 310
78207: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78208: LD_VAR 0 1
78212: PPUSH
78213: LD_STRING \
78215: PUSH
78216: LD_INT 0
78218: PUSH
78219: LD_INT 0
78221: PUSH
78222: LD_INT 0
78224: PUSH
78225: LD_INT 0
78227: PUSH
78228: LD_INT 0
78230: PUSH
78231: LD_INT 0
78233: PUSH
78234: EMPTY
78235: LIST
78236: LIST
78237: LIST
78238: LIST
78239: LIST
78240: LIST
78241: LIST
78242: PUSH
78243: LD_STRING E
78245: PUSH
78246: LD_INT 0
78248: PUSH
78249: LD_INT 0
78251: PUSH
78252: LD_VAR 0 3
78256: PUSH
78257: LD_INT 0
78259: PUSH
78260: LD_INT 0
78262: PUSH
78263: LD_INT 0
78265: PUSH
78266: EMPTY
78267: LIST
78268: LIST
78269: LIST
78270: LIST
78271: LIST
78272: LIST
78273: LIST
78274: PUSH
78275: EMPTY
78276: LIST
78277: LIST
78278: PPUSH
78279: CALL_OW 447
// end ;
78283: LD_VAR 0 2
78287: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78288: LD_INT 0
78290: PPUSH
78291: PPUSH
78292: PPUSH
// tmp := [ ] ;
78293: LD_ADDR_VAR 0 5
78297: PUSH
78298: EMPTY
78299: ST_TO_ADDR
// for i in units do
78300: LD_ADDR_VAR 0 4
78304: PUSH
78305: LD_VAR 0 1
78309: PUSH
78310: FOR_IN
78311: IFFALSE 78349
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78313: LD_ADDR_VAR 0 5
78317: PUSH
78318: LD_VAR 0 5
78322: PPUSH
78323: LD_VAR 0 5
78327: PUSH
78328: LD_INT 1
78330: PLUS
78331: PPUSH
78332: LD_VAR 0 4
78336: PPUSH
78337: CALL_OW 256
78341: PPUSH
78342: CALL_OW 2
78346: ST_TO_ADDR
78347: GO 78310
78349: POP
78350: POP
// if not tmp then
78351: LD_VAR 0 5
78355: NOT
78356: IFFALSE 78360
// exit ;
78358: GO 78408
// if asc then
78360: LD_VAR 0 2
78364: IFFALSE 78388
// result := SortListByListAsc ( units , tmp ) else
78366: LD_ADDR_VAR 0 3
78370: PUSH
78371: LD_VAR 0 1
78375: PPUSH
78376: LD_VAR 0 5
78380: PPUSH
78381: CALL_OW 76
78385: ST_TO_ADDR
78386: GO 78408
// result := SortListByListDesc ( units , tmp ) ;
78388: LD_ADDR_VAR 0 3
78392: PUSH
78393: LD_VAR 0 1
78397: PPUSH
78398: LD_VAR 0 5
78402: PPUSH
78403: CALL_OW 77
78407: ST_TO_ADDR
// end ;
78408: LD_VAR 0 3
78412: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78413: LD_INT 0
78415: PPUSH
78416: PPUSH
// task := GetTaskList ( mech ) ;
78417: LD_ADDR_VAR 0 4
78421: PUSH
78422: LD_VAR 0 1
78426: PPUSH
78427: CALL_OW 437
78431: ST_TO_ADDR
// if not task then
78432: LD_VAR 0 4
78436: NOT
78437: IFFALSE 78441
// exit ;
78439: GO 78483
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78441: LD_ADDR_VAR 0 3
78445: PUSH
78446: LD_VAR 0 4
78450: PUSH
78451: LD_INT 1
78453: ARRAY
78454: PUSH
78455: LD_INT 1
78457: ARRAY
78458: PUSH
78459: LD_STRING r
78461: EQUAL
78462: PUSH
78463: LD_VAR 0 4
78467: PUSH
78468: LD_INT 1
78470: ARRAY
78471: PUSH
78472: LD_INT 4
78474: ARRAY
78475: PUSH
78476: LD_VAR 0 2
78480: EQUAL
78481: AND
78482: ST_TO_ADDR
// end ;
78483: LD_VAR 0 3
78487: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78488: LD_INT 0
78490: PPUSH
// SetDir ( unit , d ) ;
78491: LD_VAR 0 1
78495: PPUSH
78496: LD_VAR 0 4
78500: PPUSH
78501: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78505: LD_VAR 0 1
78509: PPUSH
78510: LD_VAR 0 2
78514: PPUSH
78515: LD_VAR 0 3
78519: PPUSH
78520: LD_VAR 0 5
78524: PPUSH
78525: CALL_OW 48
// end ;
78529: LD_VAR 0 6
78533: RET
// export function ToNaturalNumber ( number ) ; begin
78534: LD_INT 0
78536: PPUSH
// result := number div 1 ;
78537: LD_ADDR_VAR 0 2
78541: PUSH
78542: LD_VAR 0 1
78546: PUSH
78547: LD_INT 1
78549: DIV
78550: ST_TO_ADDR
// if number < 0 then
78551: LD_VAR 0 1
78555: PUSH
78556: LD_INT 0
78558: LESS
78559: IFFALSE 78569
// result := 0 ;
78561: LD_ADDR_VAR 0 2
78565: PUSH
78566: LD_INT 0
78568: ST_TO_ADDR
// end ;
78569: LD_VAR 0 2
78573: RET
// export function SortByClass ( units , class ) ; var un ; begin
78574: LD_INT 0
78576: PPUSH
78577: PPUSH
// if not units or not class then
78578: LD_VAR 0 1
78582: NOT
78583: PUSH
78584: LD_VAR 0 2
78588: NOT
78589: OR
78590: IFFALSE 78594
// exit ;
78592: GO 78689
// result := [ ] ;
78594: LD_ADDR_VAR 0 3
78598: PUSH
78599: EMPTY
78600: ST_TO_ADDR
// for un in units do
78601: LD_ADDR_VAR 0 4
78605: PUSH
78606: LD_VAR 0 1
78610: PUSH
78611: FOR_IN
78612: IFFALSE 78687
// if GetClass ( un ) = class then
78614: LD_VAR 0 4
78618: PPUSH
78619: CALL_OW 257
78623: PUSH
78624: LD_VAR 0 2
78628: EQUAL
78629: IFFALSE 78656
// result := Insert ( result , 1 , un ) else
78631: LD_ADDR_VAR 0 3
78635: PUSH
78636: LD_VAR 0 3
78640: PPUSH
78641: LD_INT 1
78643: PPUSH
78644: LD_VAR 0 4
78648: PPUSH
78649: CALL_OW 2
78653: ST_TO_ADDR
78654: GO 78685
// result := Replace ( result , result + 1 , un ) ;
78656: LD_ADDR_VAR 0 3
78660: PUSH
78661: LD_VAR 0 3
78665: PPUSH
78666: LD_VAR 0 3
78670: PUSH
78671: LD_INT 1
78673: PLUS
78674: PPUSH
78675: LD_VAR 0 4
78679: PPUSH
78680: CALL_OW 1
78684: ST_TO_ADDR
78685: GO 78611
78687: POP
78688: POP
// end ;
78689: LD_VAR 0 3
78693: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78694: LD_INT 0
78696: PPUSH
78697: PPUSH
78698: PPUSH
78699: PPUSH
78700: PPUSH
78701: PPUSH
78702: PPUSH
// result := [ ] ;
78703: LD_ADDR_VAR 0 4
78707: PUSH
78708: EMPTY
78709: ST_TO_ADDR
// if x - r < 0 then
78710: LD_VAR 0 1
78714: PUSH
78715: LD_VAR 0 3
78719: MINUS
78720: PUSH
78721: LD_INT 0
78723: LESS
78724: IFFALSE 78736
// min_x := 0 else
78726: LD_ADDR_VAR 0 8
78730: PUSH
78731: LD_INT 0
78733: ST_TO_ADDR
78734: GO 78752
// min_x := x - r ;
78736: LD_ADDR_VAR 0 8
78740: PUSH
78741: LD_VAR 0 1
78745: PUSH
78746: LD_VAR 0 3
78750: MINUS
78751: ST_TO_ADDR
// if y - r < 0 then
78752: LD_VAR 0 2
78756: PUSH
78757: LD_VAR 0 3
78761: MINUS
78762: PUSH
78763: LD_INT 0
78765: LESS
78766: IFFALSE 78778
// min_y := 0 else
78768: LD_ADDR_VAR 0 7
78772: PUSH
78773: LD_INT 0
78775: ST_TO_ADDR
78776: GO 78794
// min_y := y - r ;
78778: LD_ADDR_VAR 0 7
78782: PUSH
78783: LD_VAR 0 2
78787: PUSH
78788: LD_VAR 0 3
78792: MINUS
78793: ST_TO_ADDR
// max_x := x + r ;
78794: LD_ADDR_VAR 0 9
78798: PUSH
78799: LD_VAR 0 1
78803: PUSH
78804: LD_VAR 0 3
78808: PLUS
78809: ST_TO_ADDR
// max_y := y + r ;
78810: LD_ADDR_VAR 0 10
78814: PUSH
78815: LD_VAR 0 2
78819: PUSH
78820: LD_VAR 0 3
78824: PLUS
78825: ST_TO_ADDR
// for _x = min_x to max_x do
78826: LD_ADDR_VAR 0 5
78830: PUSH
78831: DOUBLE
78832: LD_VAR 0 8
78836: DEC
78837: ST_TO_ADDR
78838: LD_VAR 0 9
78842: PUSH
78843: FOR_TO
78844: IFFALSE 78945
// for _y = min_y to max_y do
78846: LD_ADDR_VAR 0 6
78850: PUSH
78851: DOUBLE
78852: LD_VAR 0 7
78856: DEC
78857: ST_TO_ADDR
78858: LD_VAR 0 10
78862: PUSH
78863: FOR_TO
78864: IFFALSE 78941
// begin if not ValidHex ( _x , _y ) then
78866: LD_VAR 0 5
78870: PPUSH
78871: LD_VAR 0 6
78875: PPUSH
78876: CALL_OW 488
78880: NOT
78881: IFFALSE 78885
// continue ;
78883: GO 78863
// if GetResourceTypeXY ( _x , _y ) then
78885: LD_VAR 0 5
78889: PPUSH
78890: LD_VAR 0 6
78894: PPUSH
78895: CALL_OW 283
78899: IFFALSE 78939
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
78901: LD_ADDR_VAR 0 4
78905: PUSH
78906: LD_VAR 0 4
78910: PPUSH
78911: LD_VAR 0 4
78915: PUSH
78916: LD_INT 1
78918: PLUS
78919: PPUSH
78920: LD_VAR 0 5
78924: PUSH
78925: LD_VAR 0 6
78929: PUSH
78930: EMPTY
78931: LIST
78932: LIST
78933: PPUSH
78934: CALL_OW 1
78938: ST_TO_ADDR
// end ;
78939: GO 78863
78941: POP
78942: POP
78943: GO 78843
78945: POP
78946: POP
// end ;
78947: LD_VAR 0 4
78951: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
78952: LD_INT 0
78954: PPUSH
78955: PPUSH
78956: PPUSH
78957: PPUSH
78958: PPUSH
78959: PPUSH
78960: PPUSH
78961: PPUSH
// if not units then
78962: LD_VAR 0 1
78966: NOT
78967: IFFALSE 78971
// exit ;
78969: GO 79495
// result := UnitFilter ( units , [ f_ok ] ) ;
78971: LD_ADDR_VAR 0 3
78975: PUSH
78976: LD_VAR 0 1
78980: PPUSH
78981: LD_INT 50
78983: PUSH
78984: EMPTY
78985: LIST
78986: PPUSH
78987: CALL_OW 72
78991: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
78992: LD_ADDR_VAR 0 8
78996: PUSH
78997: LD_VAR 0 1
79001: PUSH
79002: LD_INT 1
79004: ARRAY
79005: PPUSH
79006: CALL_OW 255
79010: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79011: LD_ADDR_VAR 0 10
79015: PUSH
79016: LD_INT 29
79018: PUSH
79019: LD_INT 91
79021: PUSH
79022: LD_INT 49
79024: PUSH
79025: EMPTY
79026: LIST
79027: LIST
79028: LIST
79029: ST_TO_ADDR
// if not result then
79030: LD_VAR 0 3
79034: NOT
79035: IFFALSE 79039
// exit ;
79037: GO 79495
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79039: LD_ADDR_VAR 0 5
79043: PUSH
79044: LD_INT 81
79046: PUSH
79047: LD_VAR 0 8
79051: PUSH
79052: EMPTY
79053: LIST
79054: LIST
79055: PPUSH
79056: CALL_OW 69
79060: ST_TO_ADDR
// for i in result do
79061: LD_ADDR_VAR 0 4
79065: PUSH
79066: LD_VAR 0 3
79070: PUSH
79071: FOR_IN
79072: IFFALSE 79493
// begin tag := GetTag ( i ) + 1 ;
79074: LD_ADDR_VAR 0 9
79078: PUSH
79079: LD_VAR 0 4
79083: PPUSH
79084: CALL_OW 110
79088: PUSH
79089: LD_INT 1
79091: PLUS
79092: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79093: LD_ADDR_VAR 0 7
79097: PUSH
79098: LD_VAR 0 4
79102: PPUSH
79103: CALL_OW 250
79107: PPUSH
79108: LD_VAR 0 4
79112: PPUSH
79113: CALL_OW 251
79117: PPUSH
79118: LD_INT 6
79120: PPUSH
79121: CALL 78694 0 3
79125: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79126: LD_VAR 0 4
79130: PPUSH
79131: CALL_OW 247
79135: PUSH
79136: LD_INT 2
79138: EQUAL
79139: PUSH
79140: LD_VAR 0 7
79144: AND
79145: PUSH
79146: LD_VAR 0 4
79150: PPUSH
79151: CALL_OW 264
79155: PUSH
79156: LD_VAR 0 10
79160: IN
79161: NOT
79162: AND
79163: IFFALSE 79202
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79165: LD_VAR 0 4
79169: PPUSH
79170: LD_VAR 0 7
79174: PUSH
79175: LD_INT 1
79177: ARRAY
79178: PUSH
79179: LD_INT 1
79181: ARRAY
79182: PPUSH
79183: LD_VAR 0 7
79187: PUSH
79188: LD_INT 1
79190: ARRAY
79191: PUSH
79192: LD_INT 2
79194: ARRAY
79195: PPUSH
79196: CALL_OW 116
79200: GO 79491
// if path > tag then
79202: LD_VAR 0 2
79206: PUSH
79207: LD_VAR 0 9
79211: GREATER
79212: IFFALSE 79420
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79214: LD_ADDR_VAR 0 6
79218: PUSH
79219: LD_VAR 0 5
79223: PPUSH
79224: LD_INT 91
79226: PUSH
79227: LD_VAR 0 4
79231: PUSH
79232: LD_INT 8
79234: PUSH
79235: EMPTY
79236: LIST
79237: LIST
79238: LIST
79239: PPUSH
79240: CALL_OW 72
79244: ST_TO_ADDR
// if nearEnemy then
79245: LD_VAR 0 6
79249: IFFALSE 79318
// begin if GetWeapon ( i ) = ru_time_lapser then
79251: LD_VAR 0 4
79255: PPUSH
79256: CALL_OW 264
79260: PUSH
79261: LD_INT 49
79263: EQUAL
79264: IFFALSE 79292
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79266: LD_VAR 0 4
79270: PPUSH
79271: LD_VAR 0 6
79275: PPUSH
79276: LD_VAR 0 4
79280: PPUSH
79281: CALL_OW 74
79285: PPUSH
79286: CALL_OW 112
79290: GO 79316
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79292: LD_VAR 0 4
79296: PPUSH
79297: LD_VAR 0 6
79301: PPUSH
79302: LD_VAR 0 4
79306: PPUSH
79307: CALL_OW 74
79311: PPUSH
79312: CALL 80420 0 2
// end else
79316: GO 79418
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79318: LD_VAR 0 4
79322: PPUSH
79323: LD_VAR 0 2
79327: PUSH
79328: LD_VAR 0 9
79332: ARRAY
79333: PUSH
79334: LD_INT 1
79336: ARRAY
79337: PPUSH
79338: LD_VAR 0 2
79342: PUSH
79343: LD_VAR 0 9
79347: ARRAY
79348: PUSH
79349: LD_INT 2
79351: ARRAY
79352: PPUSH
79353: CALL_OW 297
79357: PUSH
79358: LD_INT 6
79360: GREATER
79361: IFFALSE 79404
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79363: LD_VAR 0 4
79367: PPUSH
79368: LD_VAR 0 2
79372: PUSH
79373: LD_VAR 0 9
79377: ARRAY
79378: PUSH
79379: LD_INT 1
79381: ARRAY
79382: PPUSH
79383: LD_VAR 0 2
79387: PUSH
79388: LD_VAR 0 9
79392: ARRAY
79393: PUSH
79394: LD_INT 2
79396: ARRAY
79397: PPUSH
79398: CALL_OW 114
79402: GO 79418
// SetTag ( i , tag ) ;
79404: LD_VAR 0 4
79408: PPUSH
79409: LD_VAR 0 9
79413: PPUSH
79414: CALL_OW 109
// end else
79418: GO 79491
// if enemy then
79420: LD_VAR 0 5
79424: IFFALSE 79491
// begin if GetWeapon ( i ) = ru_time_lapser then
79426: LD_VAR 0 4
79430: PPUSH
79431: CALL_OW 264
79435: PUSH
79436: LD_INT 49
79438: EQUAL
79439: IFFALSE 79467
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79441: LD_VAR 0 4
79445: PPUSH
79446: LD_VAR 0 5
79450: PPUSH
79451: LD_VAR 0 4
79455: PPUSH
79456: CALL_OW 74
79460: PPUSH
79461: CALL_OW 112
79465: GO 79491
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79467: LD_VAR 0 4
79471: PPUSH
79472: LD_VAR 0 5
79476: PPUSH
79477: LD_VAR 0 4
79481: PPUSH
79482: CALL_OW 74
79486: PPUSH
79487: CALL 80420 0 2
// end ; end ;
79491: GO 79071
79493: POP
79494: POP
// end ;
79495: LD_VAR 0 3
79499: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79500: LD_INT 0
79502: PPUSH
79503: PPUSH
79504: PPUSH
// if not unit or IsInUnit ( unit ) then
79505: LD_VAR 0 1
79509: NOT
79510: PUSH
79511: LD_VAR 0 1
79515: PPUSH
79516: CALL_OW 310
79520: OR
79521: IFFALSE 79525
// exit ;
79523: GO 79616
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79525: LD_ADDR_VAR 0 4
79529: PUSH
79530: LD_VAR 0 1
79534: PPUSH
79535: CALL_OW 250
79539: PPUSH
79540: LD_VAR 0 2
79544: PPUSH
79545: LD_INT 1
79547: PPUSH
79548: CALL_OW 272
79552: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79553: LD_ADDR_VAR 0 5
79557: PUSH
79558: LD_VAR 0 1
79562: PPUSH
79563: CALL_OW 251
79567: PPUSH
79568: LD_VAR 0 2
79572: PPUSH
79573: LD_INT 1
79575: PPUSH
79576: CALL_OW 273
79580: ST_TO_ADDR
// if ValidHex ( x , y ) then
79581: LD_VAR 0 4
79585: PPUSH
79586: LD_VAR 0 5
79590: PPUSH
79591: CALL_OW 488
79595: IFFALSE 79616
// ComTurnXY ( unit , x , y ) ;
79597: LD_VAR 0 1
79601: PPUSH
79602: LD_VAR 0 4
79606: PPUSH
79607: LD_VAR 0 5
79611: PPUSH
79612: CALL_OW 118
// end ;
79616: LD_VAR 0 3
79620: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79621: LD_INT 0
79623: PPUSH
79624: PPUSH
// result := false ;
79625: LD_ADDR_VAR 0 3
79629: PUSH
79630: LD_INT 0
79632: ST_TO_ADDR
// if not units then
79633: LD_VAR 0 2
79637: NOT
79638: IFFALSE 79642
// exit ;
79640: GO 79687
// for i in units do
79642: LD_ADDR_VAR 0 4
79646: PUSH
79647: LD_VAR 0 2
79651: PUSH
79652: FOR_IN
79653: IFFALSE 79685
// if See ( side , i ) then
79655: LD_VAR 0 1
79659: PPUSH
79660: LD_VAR 0 4
79664: PPUSH
79665: CALL_OW 292
79669: IFFALSE 79683
// begin result := true ;
79671: LD_ADDR_VAR 0 3
79675: PUSH
79676: LD_INT 1
79678: ST_TO_ADDR
// exit ;
79679: POP
79680: POP
79681: GO 79687
// end ;
79683: GO 79652
79685: POP
79686: POP
// end ;
79687: LD_VAR 0 3
79691: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79692: LD_INT 0
79694: PPUSH
79695: PPUSH
79696: PPUSH
79697: PPUSH
// if not unit or not points then
79698: LD_VAR 0 1
79702: NOT
79703: PUSH
79704: LD_VAR 0 2
79708: NOT
79709: OR
79710: IFFALSE 79714
// exit ;
79712: GO 79804
// dist := 99999 ;
79714: LD_ADDR_VAR 0 5
79718: PUSH
79719: LD_INT 99999
79721: ST_TO_ADDR
// for i in points do
79722: LD_ADDR_VAR 0 4
79726: PUSH
79727: LD_VAR 0 2
79731: PUSH
79732: FOR_IN
79733: IFFALSE 79802
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79735: LD_ADDR_VAR 0 6
79739: PUSH
79740: LD_VAR 0 1
79744: PPUSH
79745: LD_VAR 0 4
79749: PUSH
79750: LD_INT 1
79752: ARRAY
79753: PPUSH
79754: LD_VAR 0 4
79758: PUSH
79759: LD_INT 2
79761: ARRAY
79762: PPUSH
79763: CALL_OW 297
79767: ST_TO_ADDR
// if tmpDist < dist then
79768: LD_VAR 0 6
79772: PUSH
79773: LD_VAR 0 5
79777: LESS
79778: IFFALSE 79800
// begin result := i ;
79780: LD_ADDR_VAR 0 3
79784: PUSH
79785: LD_VAR 0 4
79789: ST_TO_ADDR
// dist := tmpDist ;
79790: LD_ADDR_VAR 0 5
79794: PUSH
79795: LD_VAR 0 6
79799: ST_TO_ADDR
// end ; end ;
79800: GO 79732
79802: POP
79803: POP
// end ;
79804: LD_VAR 0 3
79808: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
79809: LD_INT 0
79811: PPUSH
// uc_side := side ;
79812: LD_ADDR_OWVAR 20
79816: PUSH
79817: LD_VAR 0 1
79821: ST_TO_ADDR
// uc_nation := 3 ;
79822: LD_ADDR_OWVAR 21
79826: PUSH
79827: LD_INT 3
79829: ST_TO_ADDR
// vc_chassis := 25 ;
79830: LD_ADDR_OWVAR 37
79834: PUSH
79835: LD_INT 25
79837: ST_TO_ADDR
// vc_engine := engine_siberite ;
79838: LD_ADDR_OWVAR 39
79842: PUSH
79843: LD_INT 3
79845: ST_TO_ADDR
// vc_control := control_computer ;
79846: LD_ADDR_OWVAR 38
79850: PUSH
79851: LD_INT 3
79853: ST_TO_ADDR
// vc_weapon := 59 ;
79854: LD_ADDR_OWVAR 40
79858: PUSH
79859: LD_INT 59
79861: ST_TO_ADDR
// result := CreateVehicle ;
79862: LD_ADDR_VAR 0 5
79866: PUSH
79867: CALL_OW 45
79871: ST_TO_ADDR
// SetDir ( result , d ) ;
79872: LD_VAR 0 5
79876: PPUSH
79877: LD_VAR 0 4
79881: PPUSH
79882: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
79886: LD_VAR 0 5
79890: PPUSH
79891: LD_VAR 0 2
79895: PPUSH
79896: LD_VAR 0 3
79900: PPUSH
79901: LD_INT 0
79903: PPUSH
79904: CALL_OW 48
// end ;
79908: LD_VAR 0 5
79912: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
79913: LD_INT 0
79915: PPUSH
79916: PPUSH
79917: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
79918: LD_ADDR_VAR 0 2
79922: PUSH
79923: LD_INT 0
79925: PUSH
79926: LD_INT 0
79928: PUSH
79929: LD_INT 0
79931: PUSH
79932: LD_INT 0
79934: PUSH
79935: EMPTY
79936: LIST
79937: LIST
79938: LIST
79939: LIST
79940: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
79941: LD_VAR 0 1
79945: NOT
79946: PUSH
79947: LD_VAR 0 1
79951: PPUSH
79952: CALL_OW 264
79956: PUSH
79957: LD_INT 12
79959: PUSH
79960: LD_INT 51
79962: PUSH
79963: LD_INT 32
79965: PUSH
79966: LD_INT 89
79968: PUSH
79969: EMPTY
79970: LIST
79971: LIST
79972: LIST
79973: LIST
79974: IN
79975: NOT
79976: OR
79977: IFFALSE 79981
// exit ;
79979: GO 80079
// for i := 1 to 3 do
79981: LD_ADDR_VAR 0 3
79985: PUSH
79986: DOUBLE
79987: LD_INT 1
79989: DEC
79990: ST_TO_ADDR
79991: LD_INT 3
79993: PUSH
79994: FOR_TO
79995: IFFALSE 80077
// begin tmp := GetCargo ( cargo , i ) ;
79997: LD_ADDR_VAR 0 4
80001: PUSH
80002: LD_VAR 0 1
80006: PPUSH
80007: LD_VAR 0 3
80011: PPUSH
80012: CALL_OW 289
80016: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80017: LD_ADDR_VAR 0 2
80021: PUSH
80022: LD_VAR 0 2
80026: PPUSH
80027: LD_VAR 0 3
80031: PPUSH
80032: LD_VAR 0 4
80036: PPUSH
80037: CALL_OW 1
80041: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80042: LD_ADDR_VAR 0 2
80046: PUSH
80047: LD_VAR 0 2
80051: PPUSH
80052: LD_INT 4
80054: PPUSH
80055: LD_VAR 0 2
80059: PUSH
80060: LD_INT 4
80062: ARRAY
80063: PUSH
80064: LD_VAR 0 4
80068: PLUS
80069: PPUSH
80070: CALL_OW 1
80074: ST_TO_ADDR
// end ;
80075: GO 79994
80077: POP
80078: POP
// end ;
80079: LD_VAR 0 2
80083: RET
// export function Length ( array ) ; begin
80084: LD_INT 0
80086: PPUSH
// result := array + 0 ;
80087: LD_ADDR_VAR 0 2
80091: PUSH
80092: LD_VAR 0 1
80096: PUSH
80097: LD_INT 0
80099: PLUS
80100: ST_TO_ADDR
// end ;
80101: LD_VAR 0 2
80105: RET
// export function PrepareArray ( array ) ; begin
80106: LD_INT 0
80108: PPUSH
// result := array diff 0 ;
80109: LD_ADDR_VAR 0 2
80113: PUSH
80114: LD_VAR 0 1
80118: PUSH
80119: LD_INT 0
80121: DIFF
80122: ST_TO_ADDR
// if not result [ 1 ] then
80123: LD_VAR 0 2
80127: PUSH
80128: LD_INT 1
80130: ARRAY
80131: NOT
80132: IFFALSE 80152
// result := Delete ( result , 1 ) ;
80134: LD_ADDR_VAR 0 2
80138: PUSH
80139: LD_VAR 0 2
80143: PPUSH
80144: LD_INT 1
80146: PPUSH
80147: CALL_OW 3
80151: ST_TO_ADDR
// end ;
80152: LD_VAR 0 2
80156: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
80157: LD_INT 0
80159: PPUSH
80160: PPUSH
80161: PPUSH
80162: PPUSH
// sibRocketRange := 25 ;
80163: LD_ADDR_VAR 0 6
80167: PUSH
80168: LD_INT 25
80170: ST_TO_ADDR
// result := false ;
80171: LD_ADDR_VAR 0 4
80175: PUSH
80176: LD_INT 0
80178: ST_TO_ADDR
// for i := 0 to 5 do
80179: LD_ADDR_VAR 0 5
80183: PUSH
80184: DOUBLE
80185: LD_INT 0
80187: DEC
80188: ST_TO_ADDR
80189: LD_INT 5
80191: PUSH
80192: FOR_TO
80193: IFFALSE 80260
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
80195: LD_VAR 0 1
80199: PPUSH
80200: LD_VAR 0 5
80204: PPUSH
80205: LD_VAR 0 6
80209: PPUSH
80210: CALL_OW 272
80214: PPUSH
80215: LD_VAR 0 2
80219: PPUSH
80220: LD_VAR 0 5
80224: PPUSH
80225: LD_VAR 0 6
80229: PPUSH
80230: CALL_OW 273
80234: PPUSH
80235: LD_VAR 0 3
80239: PPUSH
80240: CALL_OW 309
80244: IFFALSE 80258
// begin result := true ;
80246: LD_ADDR_VAR 0 4
80250: PUSH
80251: LD_INT 1
80253: ST_TO_ADDR
// exit ;
80254: POP
80255: POP
80256: GO 80262
// end ;
80258: GO 80192
80260: POP
80261: POP
// end ;
80262: LD_VAR 0 4
80266: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
80267: LD_INT 0
80269: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
80270: LD_VAR 0 1
80274: PPUSH
80275: LD_VAR 0 2
80279: PPUSH
80280: LD_INT 0
80282: PPUSH
80283: LD_INT 0
80285: PPUSH
80286: LD_INT 1
80288: PPUSH
80289: LD_INT 0
80291: PPUSH
80292: CALL_OW 587
// end ;
80296: LD_VAR 0 3
80300: RET
// export function CenterOnNow ( unit ) ; begin
80301: LD_INT 0
80303: PPUSH
// result := IsInUnit ( unit ) ;
80304: LD_ADDR_VAR 0 2
80308: PUSH
80309: LD_VAR 0 1
80313: PPUSH
80314: CALL_OW 310
80318: ST_TO_ADDR
// if not result then
80319: LD_VAR 0 2
80323: NOT
80324: IFFALSE 80336
// result := unit ;
80326: LD_ADDR_VAR 0 2
80330: PUSH
80331: LD_VAR 0 1
80335: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
80336: LD_VAR 0 1
80340: PPUSH
80341: CALL_OW 87
// end ;
80345: LD_VAR 0 2
80349: RET
// export function ComMoveHex ( unit , hex ) ; begin
80350: LD_INT 0
80352: PPUSH
// if not hex then
80353: LD_VAR 0 2
80357: NOT
80358: IFFALSE 80362
// exit ;
80360: GO 80415
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
80362: LD_VAR 0 2
80366: PUSH
80367: LD_INT 1
80369: ARRAY
80370: PPUSH
80371: LD_VAR 0 2
80375: PUSH
80376: LD_INT 2
80378: ARRAY
80379: PPUSH
80380: CALL_OW 428
80384: IFFALSE 80388
// exit ;
80386: GO 80415
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
80388: LD_VAR 0 1
80392: PPUSH
80393: LD_VAR 0 2
80397: PUSH
80398: LD_INT 1
80400: ARRAY
80401: PPUSH
80402: LD_VAR 0 2
80406: PUSH
80407: LD_INT 2
80409: ARRAY
80410: PPUSH
80411: CALL_OW 111
// end ;
80415: LD_VAR 0 3
80419: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
80420: LD_INT 0
80422: PPUSH
80423: PPUSH
80424: PPUSH
// if not unit or not enemy then
80425: LD_VAR 0 1
80429: NOT
80430: PUSH
80431: LD_VAR 0 2
80435: NOT
80436: OR
80437: IFFALSE 80441
// exit ;
80439: GO 80565
// x := GetX ( enemy ) ;
80441: LD_ADDR_VAR 0 4
80445: PUSH
80446: LD_VAR 0 2
80450: PPUSH
80451: CALL_OW 250
80455: ST_TO_ADDR
// y := GetY ( enemy ) ;
80456: LD_ADDR_VAR 0 5
80460: PUSH
80461: LD_VAR 0 2
80465: PPUSH
80466: CALL_OW 251
80470: ST_TO_ADDR
// if ValidHex ( x , y ) then
80471: LD_VAR 0 4
80475: PPUSH
80476: LD_VAR 0 5
80480: PPUSH
80481: CALL_OW 488
80485: IFFALSE 80565
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
80487: LD_VAR 0 2
80491: PPUSH
80492: CALL_OW 247
80496: PUSH
80497: LD_INT 3
80499: PUSH
80500: LD_INT 2
80502: PUSH
80503: EMPTY
80504: LIST
80505: LIST
80506: IN
80507: PUSH
80508: LD_VAR 0 1
80512: PPUSH
80513: CALL_OW 255
80517: PPUSH
80518: LD_VAR 0 2
80522: PPUSH
80523: CALL_OW 292
80527: AND
80528: IFFALSE 80546
// ComAttackUnit ( unit , enemy ) else
80530: LD_VAR 0 1
80534: PPUSH
80535: LD_VAR 0 2
80539: PPUSH
80540: CALL_OW 115
80544: GO 80565
// ComAgressiveMove ( unit , x , y ) ;
80546: LD_VAR 0 1
80550: PPUSH
80551: LD_VAR 0 4
80555: PPUSH
80556: LD_VAR 0 5
80560: PPUSH
80561: CALL_OW 114
// end ;
80565: LD_VAR 0 3
80569: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
80570: LD_INT 0
80572: PPUSH
80573: PPUSH
80574: PPUSH
// list := AreaToList ( area , 0 ) ;
80575: LD_ADDR_VAR 0 5
80579: PUSH
80580: LD_VAR 0 1
80584: PPUSH
80585: LD_INT 0
80587: PPUSH
80588: CALL_OW 517
80592: ST_TO_ADDR
// if not list then
80593: LD_VAR 0 5
80597: NOT
80598: IFFALSE 80602
// exit ;
80600: GO 80732
// if all then
80602: LD_VAR 0 2
80606: IFFALSE 80694
// begin for i := 1 to list [ 1 ] do
80608: LD_ADDR_VAR 0 4
80612: PUSH
80613: DOUBLE
80614: LD_INT 1
80616: DEC
80617: ST_TO_ADDR
80618: LD_VAR 0 5
80622: PUSH
80623: LD_INT 1
80625: ARRAY
80626: PUSH
80627: FOR_TO
80628: IFFALSE 80690
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
80630: LD_ADDR_VAR 0 3
80634: PUSH
80635: LD_VAR 0 3
80639: PPUSH
80640: LD_VAR 0 3
80644: PUSH
80645: LD_INT 1
80647: PLUS
80648: PPUSH
80649: LD_VAR 0 5
80653: PUSH
80654: LD_INT 1
80656: ARRAY
80657: PUSH
80658: LD_VAR 0 4
80662: ARRAY
80663: PUSH
80664: LD_VAR 0 5
80668: PUSH
80669: LD_INT 2
80671: ARRAY
80672: PUSH
80673: LD_VAR 0 4
80677: ARRAY
80678: PUSH
80679: EMPTY
80680: LIST
80681: LIST
80682: PPUSH
80683: CALL_OW 1
80687: ST_TO_ADDR
80688: GO 80627
80690: POP
80691: POP
// exit ;
80692: GO 80732
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
80694: LD_ADDR_VAR 0 3
80698: PUSH
80699: LD_VAR 0 5
80703: PUSH
80704: LD_INT 1
80706: ARRAY
80707: PUSH
80708: LD_INT 1
80710: ARRAY
80711: PUSH
80712: LD_VAR 0 5
80716: PUSH
80717: LD_INT 2
80719: ARRAY
80720: PUSH
80721: LD_INT 1
80723: ARRAY
80724: PUSH
80725: EMPTY
80726: LIST
80727: LIST
80728: PUSH
80729: EMPTY
80730: LIST
80731: ST_TO_ADDR
// end ;
80732: LD_VAR 0 3
80736: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
80737: LD_INT 0
80739: PPUSH
80740: PPUSH
// list := AreaToList ( area , 0 ) ;
80741: LD_ADDR_VAR 0 4
80745: PUSH
80746: LD_VAR 0 1
80750: PPUSH
80751: LD_INT 0
80753: PPUSH
80754: CALL_OW 517
80758: ST_TO_ADDR
// if not list then
80759: LD_VAR 0 4
80763: NOT
80764: IFFALSE 80768
// exit ;
80766: GO 80809
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
80768: LD_ADDR_VAR 0 3
80772: PUSH
80773: LD_VAR 0 4
80777: PUSH
80778: LD_INT 1
80780: ARRAY
80781: PUSH
80782: LD_INT 1
80784: ARRAY
80785: PUSH
80786: LD_VAR 0 4
80790: PUSH
80791: LD_INT 2
80793: ARRAY
80794: PUSH
80795: LD_INT 1
80797: ARRAY
80798: PUSH
80799: LD_VAR 0 2
80803: PUSH
80804: EMPTY
80805: LIST
80806: LIST
80807: LIST
80808: ST_TO_ADDR
// end ;
80809: LD_VAR 0 3
80813: RET
// export function First ( array ) ; begin
80814: LD_INT 0
80816: PPUSH
// if not array then
80817: LD_VAR 0 1
80821: NOT
80822: IFFALSE 80826
// exit ;
80824: GO 80840
// result := array [ 1 ] ;
80826: LD_ADDR_VAR 0 2
80830: PUSH
80831: LD_VAR 0 1
80835: PUSH
80836: LD_INT 1
80838: ARRAY
80839: ST_TO_ADDR
// end ;
80840: LD_VAR 0 2
80844: RET
// export function Last ( array ) ; begin
80845: LD_INT 0
80847: PPUSH
// if not array then
80848: LD_VAR 0 1
80852: NOT
80853: IFFALSE 80857
// exit ;
80855: GO 80873
// result := array [ array ] ;
80857: LD_ADDR_VAR 0 2
80861: PUSH
80862: LD_VAR 0 1
80866: PUSH
80867: LD_VAR 0 1
80871: ARRAY
80872: ST_TO_ADDR
// end ;
80873: LD_VAR 0 2
80877: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
80878: LD_INT 0
80880: PPUSH
80881: PPUSH
// result := [ ] ;
80882: LD_ADDR_VAR 0 5
80886: PUSH
80887: EMPTY
80888: ST_TO_ADDR
// if not array then
80889: LD_VAR 0 1
80893: NOT
80894: IFFALSE 80898
// exit ;
80896: GO 81010
// for i := 1 to array do
80898: LD_ADDR_VAR 0 6
80902: PUSH
80903: DOUBLE
80904: LD_INT 1
80906: DEC
80907: ST_TO_ADDR
80908: LD_VAR 0 1
80912: PUSH
80913: FOR_TO
80914: IFFALSE 81008
// if array [ i ] [ index ] = value then
80916: LD_VAR 0 1
80920: PUSH
80921: LD_VAR 0 6
80925: ARRAY
80926: PUSH
80927: LD_VAR 0 2
80931: ARRAY
80932: PUSH
80933: LD_VAR 0 3
80937: EQUAL
80938: IFFALSE 81006
// begin if indexColumn then
80940: LD_VAR 0 4
80944: IFFALSE 80980
// result := Join ( result , array [ i ] [ indexColumn ] ) else
80946: LD_ADDR_VAR 0 5
80950: PUSH
80951: LD_VAR 0 5
80955: PPUSH
80956: LD_VAR 0 1
80960: PUSH
80961: LD_VAR 0 6
80965: ARRAY
80966: PUSH
80967: LD_VAR 0 4
80971: ARRAY
80972: PPUSH
80973: CALL 76348 0 2
80977: ST_TO_ADDR
80978: GO 81006
// result := Join ( result , array [ i ] ) ;
80980: LD_ADDR_VAR 0 5
80984: PUSH
80985: LD_VAR 0 5
80989: PPUSH
80990: LD_VAR 0 1
80994: PUSH
80995: LD_VAR 0 6
80999: ARRAY
81000: PPUSH
81001: CALL 76348 0 2
81005: ST_TO_ADDR
// end ;
81006: GO 80913
81008: POP
81009: POP
// end ;
81010: LD_VAR 0 5
81014: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
81015: LD_INT 0
81017: PPUSH
81018: PPUSH
81019: PPUSH
// if btype = b_depot then
81020: LD_VAR 0 2
81024: PUSH
81025: LD_INT 0
81027: EQUAL
81028: IFFALSE 81040
// begin result := true ;
81030: LD_ADDR_VAR 0 3
81034: PUSH
81035: LD_INT 1
81037: ST_TO_ADDR
// exit ;
81038: GO 81156
// end ; pom := GetBase ( depot ) ;
81040: LD_ADDR_VAR 0 4
81044: PUSH
81045: LD_VAR 0 1
81049: PPUSH
81050: CALL_OW 274
81054: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
81055: LD_ADDR_VAR 0 5
81059: PUSH
81060: LD_VAR 0 2
81064: PPUSH
81065: LD_VAR 0 1
81069: PPUSH
81070: CALL_OW 248
81074: PPUSH
81075: CALL_OW 450
81079: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
81080: LD_ADDR_VAR 0 3
81084: PUSH
81085: LD_VAR 0 4
81089: PPUSH
81090: LD_INT 1
81092: PPUSH
81093: CALL_OW 275
81097: PUSH
81098: LD_VAR 0 5
81102: PUSH
81103: LD_INT 1
81105: ARRAY
81106: GREATEREQUAL
81107: PUSH
81108: LD_VAR 0 4
81112: PPUSH
81113: LD_INT 2
81115: PPUSH
81116: CALL_OW 275
81120: PUSH
81121: LD_VAR 0 5
81125: PUSH
81126: LD_INT 2
81128: ARRAY
81129: GREATEREQUAL
81130: AND
81131: PUSH
81132: LD_VAR 0 4
81136: PPUSH
81137: LD_INT 3
81139: PPUSH
81140: CALL_OW 275
81144: PUSH
81145: LD_VAR 0 5
81149: PUSH
81150: LD_INT 3
81152: ARRAY
81153: GREATEREQUAL
81154: AND
81155: ST_TO_ADDR
// end ;
81156: LD_VAR 0 3
81160: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
81161: LD_INT 0
81163: PPUSH
// if not vehicles or not parkingPoint then
81164: LD_VAR 0 1
81168: NOT
81169: PUSH
81170: LD_VAR 0 2
81174: NOT
81175: OR
81176: IFFALSE 81180
// exit ;
81178: GO 81278
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
81180: LD_ADDR_VAR 0 1
81184: PUSH
81185: LD_VAR 0 1
81189: PPUSH
81190: LD_INT 50
81192: PUSH
81193: EMPTY
81194: LIST
81195: PUSH
81196: LD_INT 3
81198: PUSH
81199: LD_INT 92
81201: PUSH
81202: LD_VAR 0 2
81206: PUSH
81207: LD_INT 1
81209: ARRAY
81210: PUSH
81211: LD_VAR 0 2
81215: PUSH
81216: LD_INT 2
81218: ARRAY
81219: PUSH
81220: LD_INT 8
81222: PUSH
81223: EMPTY
81224: LIST
81225: LIST
81226: LIST
81227: LIST
81228: PUSH
81229: EMPTY
81230: LIST
81231: LIST
81232: PUSH
81233: EMPTY
81234: LIST
81235: LIST
81236: PPUSH
81237: CALL_OW 72
81241: ST_TO_ADDR
// if not vehicles then
81242: LD_VAR 0 1
81246: NOT
81247: IFFALSE 81251
// exit ;
81249: GO 81278
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
81251: LD_VAR 0 1
81255: PPUSH
81256: LD_VAR 0 2
81260: PUSH
81261: LD_INT 1
81263: ARRAY
81264: PPUSH
81265: LD_VAR 0 2
81269: PUSH
81270: LD_INT 2
81272: ARRAY
81273: PPUSH
81274: CALL_OW 111
// end ; end_of_file
81278: LD_VAR 0 3
81282: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81283: LD_VAR 0 1
81287: PPUSH
81288: LD_VAR 0 2
81292: PPUSH
81293: LD_VAR 0 3
81297: PPUSH
81298: LD_VAR 0 4
81302: PPUSH
81303: LD_VAR 0 5
81307: PPUSH
81308: LD_VAR 0 6
81312: PPUSH
81313: CALL 17953 0 6
// end ;
81317: PPOPN 6
81319: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81320: LD_INT 0
81322: PPUSH
// begin if not units then
81323: LD_VAR 0 1
81327: NOT
81328: IFFALSE 81332
// exit ;
81330: GO 81332
// end ;
81332: PPOPN 7
81334: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81335: CALL 17857 0 0
// end ;
81339: PPOPN 1
81341: END
