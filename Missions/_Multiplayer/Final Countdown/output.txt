// export JMM , Powell , Bobby , Cyrus , Lisa , Frank , Brown , Donaldson , Gladstone , Cornell ; export Denis , Joan , Kurt , Yamoko , Gary , Simms , Stevens , Coonie , Burlak , Roth ; export Friend , Kozlov , Baker , VanHouten , Vsevolod , Platonov , Kovaljuk ; export Omar , Heike ; export OtherWithJMM , OtherNotJMM ; export legion_cheated , kappa_saved , woman_saved , kappa_delayed , Woman_in_am14 ; export JMM_woman , Woman_alive , Initial_JMM_vehicle , Initial_Woman_vehicle ; export BobbyLoc , CyrusLoc , LisaLoc , FrankLoc , BrownLoc , DonaldsonLoc ; export VanHoutenLoc , GladstoneLoc , JoanLoc , YamokoLoc ; export GaryLoc , DenisLoc , CornellLoc ; export Roth_Captured ; export Russian_project_canceled ; export No_Looses ; export JMM_veh , Woman_veh ; export Am1_vehicles ; export Captured_vehicles ; export All_americans , Named_americans ; export Remaining_Named , Remaining_Powells , Carriers ; export End_of_journey ; export JMM_Helpers ; export CenterJMM ; export Number_of_JMM_Helpers ; export True_Americans ; export Not_True_Americans ; export Omar_Soldiers ; export Omar_Scientists ; export Omar_Vehicles ; export Number_of_Omar_Soldiers ; export Number_of_Omar_Hovercrafts ; export Number_of_Omar_Flamethrowers ; export Number_of_Omar_RocketLaunchers ; export All_arabians ; export Arabian_soldiers ; export Arabian_Engineers ; export Arabian_scientists ; export Arabian_mechanics ; export Arabian_apemens ; export Control_Driver ; export Arabian_Outside ; export New_ArRu_Fact ; export Arabian_buildings ; export Number_of_Arabian_Soldiers ; export Number_of_Arabian_scientists ; export Number_of_Arabian_mechanics ; export Number_of_Arabian_Engineers ; export All_alliances ; export Alliance_rus_soldiers ; export Alliance_am_soldiers ; export Alliance_rus_scientists ; export Alliance_am_scientists ; export Alliance_Explorers ; export Captured_Units_of_Alliance ; export Explorer1 , Explorer2 ; export Alliance_Doctors ; export Number_of_AllAm_Soldiers ; export Number_of_AllAm_Scientists ; export Number_of_AllRu_Soldiers ; export Number_of_AllRu_Scientists ; export Russian_soldiers ; export Russian_scientists ; export Russian_engineers ; export Russian_mechanics ; export All_russians ; export Rus_doctors ; export Russian_Buildings ; export R1_Attack_Time ; export R_attack_time ; export R1_Attack_counter ; export R_Attack_counter ; export R1_Attack_group ; export Main_R1_Attack_group ; export Main_R_Attack_Group ; export R_Attack_Group ; export New_Patrol_Group , R1Patrol_group ; export R_Patrol_group ; export R_Constructed_Attack ; export R_Constructed_Patrol ; export Behemot_Engineers ; export Russian_Behemots ; export New_Behemots ; export Rus_Attack_Time ; export R_New_Attack ; export R_New_Patrol ; export Number_of_russian_soldiers ; export Number_of_russian_scientists ; export Number_of_russian_mechanics ; export Number_of_russian_engineers ; export First_JMM_Task ; export out_of_base ; export Great_ingame_video ; export R1_attack ; export Protect_Powell ; export Talk_Bomba ; export Center_on_fight ; export JMM_Is_Ready ; export Ingame_Run_over ; export Game_Continue ; export Vsevolod_Comes ; export Woman_Comes ; export Matherlod_Contamined1 ; export Matherlod_Contamined2 ; export Matherlod_Contamined3 ; export Alliance_Captured ; export Explorers_Can_Go ; export Not_End_of_Alliance ; export JMM_has_surrounded ; export Friend_Escapes ; export Not_Ingame_Run_over ; export End_of_m ; export Timer ; export JMM_Captured ; export Map_am_base , Map_rus_attack , Send_Helpers ; export Start_Am1_Base ; export Send_Material ; export Capture_JMM_Vehicles ; export First_Powells_Attack ; export Second_Powells_Attack ; export Run_JMM_Vehicles ; export Rus1_Attack ; export Rus_Attack ; export Retreat_Report ; export JMM_Talk ; export Send_Arabian_Back ; export Link_Bombs ; export americans , americans1 , russians , russians1 , arabians , arabians1 , alliance , Explorers_Side ; export human_difficulty_skill , apeman_difficulty_skill ; export Skip ; export Powell_Warning ; export Warning_Time ; export Time_of_Ingame_Run_Over ; export First_ingame_done ; export R1_Attack_Overflow ; export Powell_vehicle ; export Powell_Attack_Counter ; export Center_To_Powell ; export Debug_Constant ; export R1_Attack_Continues ; export Number_of_crates ; export Construction_of_Arabian_rocket ; export Number_of_Arabian_rocket ; export Stevens_Coming_Time ; export Woman_Coming_Time ; export Alliance_broadcast ; export Behemots_broadcast ; export Time_of_first_capture ; export Really_Kurt ; export Time_of_capturing ; export Alliance_def_buildings ; export Way_of_Explorers ; export Step_On_The_Way ; export Explorer_Way_Number ; export Number_of_captured_americans ; export Alaskite_Bomb_Time ; export Arabian_siberite_attack_time ; export R_Attack_Overflow ; export Russian_Siberite_Attack ; export Russian_Siberite_rockets ; export Time_to_Think_Over ; export The_Last_Time ; export Friend_Accepted ; export Friend_Escaped ; export Number_of_Behemots ; export Time_Of_Crates ; export Number_of_complete_Behemots ; export Behemot_Places ; export Behemot_attack_time ; export Friend_has_come ; export The_Last_Arabian_Attack_Begun ; export Friend_has_to_escape ; export Wood_registry ; export Add_Legion_Objectives ; export Starting_Construction_Time ; export Heike_Last_Words ; export Joan_semafor ; export Arabian_reg_id ; export Arabian_def_id ; export Arabian_build_id ; export Russian1_reg_id ; export Russian1_att_id ; export Russian1_reg1_id ; export Russian1_patr_id ; export Russian_reg_id ; export Russian_att_id ; export Russian_patr_id ; export Russian_reg_def_id ; export Russian_def_id ; export Russian_build_id ; export Alliance_reg_id ; export Alliance_def_id ; export Alliance_wood_reg_id ; function Set_variables ; begin
   0: LD_INT 0
   2: PPUSH
// CenterJMM = false ;
   3: LD_ADDR_EXP 68
   7: PUSH
   8: LD_INT 0
  10: ST_TO_ADDR
// End_of_journey = false ;
  11: LD_ADDR_EXP 66
  15: PUSH
  16: LD_INT 0
  18: ST_TO_ADDR
// Skip = false ;
  19: LD_ADDR_EXP 186
  23: PUSH
  24: LD_INT 0
  26: ST_TO_ADDR
// Captured_vehicles = [ ] ;
  27: LD_ADDR_EXP 60
  31: PUSH
  32: EMPTY
  33: ST_TO_ADDR
// R1_Attack_time = 0 ;
  34: LD_ADDR_EXP 114
  38: PUSH
  39: LD_INT 0
  41: ST_TO_ADDR
// R1_Attack_counter = 0 ;
  42: LD_ADDR_EXP 116
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// R1_Attack_group = [ ] ;
  50: LD_ADDR_EXP 118
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// Main_R1_Attack_group = [ ] ;
  57: LD_ADDR_EXP 119
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// Main_R_Attack_Group = [ ] ;
  64: LD_ADDR_EXP 120
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// Powell_warning = 0 ;
  71: LD_ADDR_EXP 187
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// Warning_Time = 0 ;
  79: LD_ADDR_EXP 188
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// Time_of_Ingame_Run_Over = 100 100$0 ;
  87: LD_ADDR_EXP 189
  91: PUSH
  92: LD_INT 210000
  94: ST_TO_ADDR
// First_ingame_done = false ;
  95: LD_ADDR_EXP 190
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// Rus_doctors = [ ] ;
 103: LD_ADDR_EXP 112
 107: PUSH
 108: EMPTY
 109: ST_TO_ADDR
// R1_Attack_Overflow = 0 ;
 110: LD_ADDR_EXP 191
 114: PUSH
 115: LD_INT 0
 117: ST_TO_ADDR
// New_Patrol_Group = 0 ;
 118: LD_ADDR_EXP 122
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// R1Patrol_group = 0 ;
 126: LD_ADDR_EXP 123
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// R_Patrol_group = 0 ;
 134: LD_ADDR_EXP 124
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// Arabian_Outside = 0 ;
 142: LD_ADDR_EXP 86
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// Powell_vehicle = 0 ;
 150: LD_ADDR_EXP 192
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// Powell_Attack_Counter = 1 ;
 158: LD_ADDR_EXP 193
 162: PUSH
 163: LD_INT 1
 165: ST_TO_ADDR
// Center_To_Powell = false ;
 166: LD_ADDR_EXP 194
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// R1_Attack_Continues = false ;
 174: LD_ADDR_EXP 196
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// New_ArRu_Fact = 0 ;
 182: LD_ADDR_EXP 87
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// Construction_of_Arabian_rocket = false ;
 190: LD_ADDR_EXP 198
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// Number_of_Arabian_rocket = 1 ;
 198: LD_ADDR_EXP 199
 202: PUSH
 203: LD_INT 1
 205: ST_TO_ADDR
// Alliance_def_buildings = [ AllT1 , AllT2 , AllT3 , AllT4 , AllT5 , AllT7 , AllT8 ] ;
 206: LD_ADDR_EXP 207
 210: PUSH
 211: LD_INT 50
 213: PUSH
 214: LD_INT 54
 216: PUSH
 217: LD_INT 51
 219: PUSH
 220: LD_INT 52
 222: PUSH
 223: LD_INT 53
 225: PUSH
 226: LD_INT 38
 228: PUSH
 229: LD_INT 44
 231: PUSH
 232: EMPTY
 233: LIST
 234: LIST
 235: LIST
 236: LIST
 237: LIST
 238: LIST
 239: LIST
 240: ST_TO_ADDR
// True_Americans = [ ] ;
 241: LD_ADDR_EXP 70
 245: PUSH
 246: EMPTY
 247: ST_TO_ADDR
// Not_True_Americans = [ ] ;
 248: LD_ADDR_EXP 71
 252: PUSH
 253: EMPTY
 254: ST_TO_ADDR
// Roth_Captured = false ;
 255: LD_ADDR_EXP 54
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// Russian_project_canceled = true ;
 263: LD_ADDR_EXP 55
 267: PUSH
 268: LD_INT 1
 270: ST_TO_ADDR
// No_Looses = true ;
 271: LD_ADDR_EXP 56
 275: PUSH
 276: LD_INT 1
 278: ST_TO_ADDR
// Captured_Units_of_Alliance = [ ] ;
 279: LD_ADDR_EXP 99
 283: PUSH
 284: EMPTY
 285: ST_TO_ADDR
// Way_of_Explorers = [ [ [ 183 , 160 ] , [ 142 , 131 ] , [ 120 , 104 ] , [ 95 , 71 ] , [ 78 , 62 ] ] , [ [ 182 , 155 ] , [ 173 , 136 ] , [ 156 , 94 ] , [ 126 , 73 ] , [ 95 , 71 ] , [ 78 , 62 ] ] ] ;
 286: LD_ADDR_EXP 208
 290: PUSH
 291: LD_INT 183
 293: PUSH
 294: LD_INT 160
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: PUSH
 301: LD_INT 142
 303: PUSH
 304: LD_INT 131
 306: PUSH
 307: EMPTY
 308: LIST
 309: LIST
 310: PUSH
 311: LD_INT 120
 313: PUSH
 314: LD_INT 104
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: PUSH
 321: LD_INT 95
 323: PUSH
 324: LD_INT 71
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: LD_INT 78
 333: PUSH
 334: LD_INT 62
 336: PUSH
 337: EMPTY
 338: LIST
 339: LIST
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: LIST
 346: LIST
 347: PUSH
 348: LD_INT 182
 350: PUSH
 351: LD_INT 155
 353: PUSH
 354: EMPTY
 355: LIST
 356: LIST
 357: PUSH
 358: LD_INT 173
 360: PUSH
 361: LD_INT 136
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: PUSH
 368: LD_INT 156
 370: PUSH
 371: LD_INT 94
 373: PUSH
 374: EMPTY
 375: LIST
 376: LIST
 377: PUSH
 378: LD_INT 126
 380: PUSH
 381: LD_INT 73
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PUSH
 388: LD_INT 95
 390: PUSH
 391: LD_INT 71
 393: PUSH
 394: EMPTY
 395: LIST
 396: LIST
 397: PUSH
 398: LD_INT 78
 400: PUSH
 401: LD_INT 62
 403: PUSH
 404: EMPTY
 405: LIST
 406: LIST
 407: PUSH
 408: EMPTY
 409: LIST
 410: LIST
 411: LIST
 412: LIST
 413: LIST
 414: LIST
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: ST_TO_ADDR
// Explorer1 = 0 ;
 420: LD_ADDR_EXP 100
 424: PUSH
 425: LD_INT 0
 427: ST_TO_ADDR
// Explorer2 = 0 ;
 428: LD_ADDR_EXP 101
 432: PUSH
 433: LD_INT 0
 435: ST_TO_ADDR
// Step_On_The_Way = 1 ;
 436: LD_ADDR_EXP 209
 440: PUSH
 441: LD_INT 1
 443: ST_TO_ADDR
// Explorer_Way_Number = 1 ;
 444: LD_ADDR_EXP 210
 448: PUSH
 449: LD_INT 1
 451: ST_TO_ADDR
// Number_of_captured_americans = 0 ;
 452: LD_ADDR_EXP 211
 456: PUSH
 457: LD_INT 0
 459: ST_TO_ADDR
// R_Attack_Group = [ ] ;
 460: LD_ADDR_EXP 121
 464: PUSH
 465: EMPTY
 466: ST_TO_ADDR
// R_Attack_Overflow = 0 ;
 467: LD_ADDR_EXP 214
 471: PUSH
 472: LD_INT 0
 474: ST_TO_ADDR
// R_Constructed_Attack = [ ] ;
 475: LD_ADDR_EXP 125
 479: PUSH
 480: EMPTY
 481: ST_TO_ADDR
// R_Constructed_Patrol = [ ] ;
 482: LD_ADDR_EXP 126
 486: PUSH
 487: EMPTY
 488: ST_TO_ADDR
// Russian_Siberite_Attack = false ;
 489: LD_ADDR_EXP 215
 493: PUSH
 494: LD_INT 0
 496: ST_TO_ADDR
// Russian_Siberite_rockets = [ RR1 ] ;
 497: LD_ADDR_EXP 216
 501: PUSH
 502: LD_INT 146
 504: PUSH
 505: EMPTY
 506: LIST
 507: ST_TO_ADDR
// Time_to_Think_Over = 0 ;
 508: LD_ADDR_EXP 217
 512: PUSH
 513: LD_INT 0
 515: ST_TO_ADDR
// The_Last_Time = 0 ;
 516: LD_ADDR_EXP 218
 520: PUSH
 521: LD_INT 0
 523: ST_TO_ADDR
// Friend_Accepted = false ;
 524: LD_ADDR_EXP 219
 528: PUSH
 529: LD_INT 0
 531: ST_TO_ADDR
// Friend_Escaped = false ;
 532: LD_ADDR_EXP 220
 536: PUSH
 537: LD_INT 0
 539: ST_TO_ADDR
// Time_Of_Crates = 0 ;
 540: LD_ADDR_EXP 222
 544: PUSH
 545: LD_INT 0
 547: ST_TO_ADDR
// Behemot_Engineers = [ ] ;
 548: LD_ADDR_EXP 127
 552: PUSH
 553: EMPTY
 554: ST_TO_ADDR
// Behemot_Places = [ [ 191 , 117 ] , [ 194 , 124 ] , [ 197 , 117 ] , [ 200 , 122 ] , [ 203 , 118 ] , [ 206 , 126 ] , [ 210 , 127 ] , [ 208 , 122 ] , [ 213 , 124 ] ] ;
 555: LD_ADDR_EXP 224
 559: PUSH
 560: LD_INT 191
 562: PUSH
 563: LD_INT 117
 565: PUSH
 566: EMPTY
 567: LIST
 568: LIST
 569: PUSH
 570: LD_INT 194
 572: PUSH
 573: LD_INT 124
 575: PUSH
 576: EMPTY
 577: LIST
 578: LIST
 579: PUSH
 580: LD_INT 197
 582: PUSH
 583: LD_INT 117
 585: PUSH
 586: EMPTY
 587: LIST
 588: LIST
 589: PUSH
 590: LD_INT 200
 592: PUSH
 593: LD_INT 122
 595: PUSH
 596: EMPTY
 597: LIST
 598: LIST
 599: PUSH
 600: LD_INT 203
 602: PUSH
 603: LD_INT 118
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PUSH
 610: LD_INT 206
 612: PUSH
 613: LD_INT 126
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: PUSH
 620: LD_INT 210
 622: PUSH
 623: LD_INT 127
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: PUSH
 630: LD_INT 208
 632: PUSH
 633: LD_INT 122
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: PUSH
 640: LD_INT 213
 642: PUSH
 643: LD_INT 124
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: PUSH
 650: EMPTY
 651: LIST
 652: LIST
 653: LIST
 654: LIST
 655: LIST
 656: LIST
 657: LIST
 658: LIST
 659: LIST
 660: ST_TO_ADDR
// Number_of_complete_Behemots = 0 ;
 661: LD_ADDR_EXP 223
 665: PUSH
 666: LD_INT 0
 668: ST_TO_ADDR
// Russian_Behemots = [ ] ;
 669: LD_ADDR_EXP 128
 673: PUSH
 674: EMPTY
 675: ST_TO_ADDR
// New_Behemots = [ ] ;
 676: LD_ADDR_EXP 129
 680: PUSH
 681: EMPTY
 682: ST_TO_ADDR
// JMM_Helpers = [ ] ;
 683: LD_ADDR_EXP 67
 687: PUSH
 688: EMPTY
 689: ST_TO_ADDR
// R_New_Attack = [ ] ;
 690: LD_ADDR_EXP 131
 694: PUSH
 695: EMPTY
 696: ST_TO_ADDR
// R_New_Patrol = [ ] ;
 697: LD_ADDR_EXP 132
 701: PUSH
 702: EMPTY
 703: ST_TO_ADDR
// Friend_has_come = false ;
 704: LD_ADDR_EXP 226
 708: PUSH
 709: LD_INT 0
 711: ST_TO_ADDR
// The_Last_Arabian_Attack_Begun = false ;
 712: LD_ADDR_EXP 227
 716: PUSH
 717: LD_INT 0
 719: ST_TO_ADDR
// Friend_has_to_escape = false ;
 720: LD_ADDR_EXP 228
 724: PUSH
 725: LD_INT 0
 727: ST_TO_ADDR
// Wood_registry = false ;
 728: LD_ADDR_EXP 229
 732: PUSH
 733: LD_INT 0
 735: ST_TO_ADDR
// Add_Legion_Objectives = false ;
 736: LD_ADDR_EXP 230
 740: PUSH
 741: LD_INT 0
 743: ST_TO_ADDR
// Starting_Construction_Time = 0 ;
 744: LD_ADDR_EXP 231
 748: PUSH
 749: LD_INT 0
 751: ST_TO_ADDR
// Heike_Last_Words = false ;
 752: LD_ADDR_EXP 232
 756: PUSH
 757: LD_INT 0
 759: ST_TO_ADDR
// Joan_semafor = false ;
 760: LD_ADDR_EXP 233
 764: PUSH
 765: LD_INT 0
 767: ST_TO_ADDR
// Arabian_reg_id = - 1 ;
 768: LD_ADDR_EXP 234
 772: PUSH
 773: LD_INT 1
 775: NEG
 776: ST_TO_ADDR
// Arabian_def_id = - 1 ;
 777: LD_ADDR_EXP 235
 781: PUSH
 782: LD_INT 1
 784: NEG
 785: ST_TO_ADDR
// Russian1_reg_id = - 1 ;
 786: LD_ADDR_EXP 237
 790: PUSH
 791: LD_INT 1
 793: NEG
 794: ST_TO_ADDR
// Russian1_att_id = - 1 ;
 795: LD_ADDR_EXP 238
 799: PUSH
 800: LD_INT 1
 802: NEG
 803: ST_TO_ADDR
// Russian1_reg1_id = - 1 ;
 804: LD_ADDR_EXP 239
 808: PUSH
 809: LD_INT 1
 811: NEG
 812: ST_TO_ADDR
// Russian1_patr_id = - 1 ;
 813: LD_ADDR_EXP 240
 817: PUSH
 818: LD_INT 1
 820: NEG
 821: ST_TO_ADDR
// Russian_reg_def_id = - 1 ;
 822: LD_ADDR_EXP 244
 826: PUSH
 827: LD_INT 1
 829: NEG
 830: ST_TO_ADDR
// Russian_def_id = - 1 ;
 831: LD_ADDR_EXP 245
 835: PUSH
 836: LD_INT 1
 838: NEG
 839: ST_TO_ADDR
// Russian_reg_id = - 1 ;
 840: LD_ADDR_EXP 241
 844: PUSH
 845: LD_INT 1
 847: NEG
 848: ST_TO_ADDR
// Russian_att_id = - 1 ;
 849: LD_ADDR_EXP 242
 853: PUSH
 854: LD_INT 1
 856: NEG
 857: ST_TO_ADDR
// Russian_patr_id = - 1 ;
 858: LD_ADDR_EXP 243
 862: PUSH
 863: LD_INT 1
 865: NEG
 866: ST_TO_ADDR
// Russian_build_id = - 1 ;
 867: LD_ADDR_EXP 246
 871: PUSH
 872: LD_INT 1
 874: NEG
 875: ST_TO_ADDR
// Alliance_reg_id = - 1 ;
 876: LD_ADDR_EXP 247
 880: PUSH
 881: LD_INT 1
 883: NEG
 884: ST_TO_ADDR
// Alliance_def_id = - 1 ;
 885: LD_ADDR_EXP 248
 889: PUSH
 890: LD_INT 1
 892: NEG
 893: ST_TO_ADDR
// Alliance_wood_reg_id = - 1 ;
 894: LD_ADDR_EXP 249
 898: PUSH
 899: LD_INT 1
 901: NEG
 902: ST_TO_ADDR
// legion_cheated = LoadVariable ( legion_cheated , true ) ;
 903: LD_ADDR_EXP 32
 907: PUSH
 908: LD_STRING legion_cheated
 910: PPUSH
 911: LD_INT 1
 913: PPUSH
 914: CALL_OW 30
 918: ST_TO_ADDR
// kappa_saved = LoadVariable ( kappa_saved , false ) ;
 919: LD_ADDR_EXP 33
 923: PUSH
 924: LD_STRING kappa_saved
 926: PPUSH
 927: LD_INT 0
 929: PPUSH
 930: CALL_OW 30
 934: ST_TO_ADDR
// kappa_delayed = LoadVariable ( kappa_delayed , true ) ;
 935: LD_ADDR_EXP 35
 939: PUSH
 940: LD_STRING kappa_delayed
 942: PPUSH
 943: LD_INT 1
 945: PPUSH
 946: CALL_OW 30
 950: ST_TO_ADDR
// Woman_alive = LoadVariable ( woman_alive , false ) ;
 951: LD_ADDR_EXP 38
 955: PUSH
 956: LD_STRING woman_alive
 958: PPUSH
 959: LD_INT 0
 961: PPUSH
 962: CALL_OW 30
 966: ST_TO_ADDR
// Initial_JMM_vehicle = LoadVariable ( veh_jmm , 0 ) ;
 967: LD_ADDR_EXP 39
 971: PUSH
 972: LD_STRING veh_jmm
 974: PPUSH
 975: LD_INT 0
 977: PPUSH
 978: CALL_OW 30
 982: ST_TO_ADDR
// Initial_Woman_vehicle = LoadVariable ( veh_surv , 0 ) ;
 983: LD_ADDR_EXP 40
 987: PUSH
 988: LD_STRING veh_surv
 990: PPUSH
 991: LD_INT 0
 993: PPUSH
 994: CALL_OW 30
 998: ST_TO_ADDR
// Woman_in_am14 = LoadVariable ( woman_in_am14 , 1 ) ;
 999: LD_ADDR_EXP 36
1003: PUSH
1004: LD_STRING woman_in_am14
1006: PPUSH
1007: LD_INT 1
1009: PPUSH
1010: CALL_OW 30
1014: ST_TO_ADDR
// if Initial_Woman_vehicle > 0 then
1015: LD_EXP 40
1019: PUSH
1020: LD_INT 0
1022: GREATER
1023: IFFALSE 1035
// Woman_saved = true else
1025: LD_ADDR_EXP 34
1029: PUSH
1030: LD_INT 1
1032: ST_TO_ADDR
1033: GO 1043
// Woman_saved = false ;
1035: LD_ADDR_EXP 34
1039: PUSH
1040: LD_INT 0
1042: ST_TO_ADDR
// americans = 1 ;
1043: LD_ADDR_EXP 176
1047: PUSH
1048: LD_INT 1
1050: ST_TO_ADDR
// americans1 = 4 ;
1051: LD_ADDR_EXP 177
1055: PUSH
1056: LD_INT 4
1058: ST_TO_ADDR
// russians = 3 ;
1059: LD_ADDR_EXP 178
1063: PUSH
1064: LD_INT 3
1066: ST_TO_ADDR
// russians1 = 6 ;
1067: LD_ADDR_EXP 179
1071: PUSH
1072: LD_INT 6
1074: ST_TO_ADDR
// arabians = 8 ;
1075: LD_ADDR_EXP 180
1079: PUSH
1080: LD_INT 8
1082: ST_TO_ADDR
// arabians1 = 2 ;
1083: LD_ADDR_EXP 181
1087: PUSH
1088: LD_INT 2
1090: ST_TO_ADDR
// alliance = 7 ;
1091: LD_ADDR_EXP 182
1095: PUSH
1096: LD_INT 7
1098: ST_TO_ADDR
// Explorers_Side = 5 ;
1099: LD_ADDR_EXP 183
1103: PUSH
1104: LD_INT 5
1106: ST_TO_ADDR
// uc_side := americans1 ;
1107: LD_ADDR_OWVAR 20
1111: PUSH
1112: LD_EXP 177
1116: ST_TO_ADDR
// OtherWithJMM = CreateCharacterSet ( OtherWithJMM ) ;
1117: LD_ADDR_EXP 30
1121: PUSH
1122: LD_STRING OtherWithJMM
1124: PPUSH
1125: CALL_OW 31
1129: ST_TO_ADDR
// OtherNotJMM = CreateCharacterSet ( OtherNotJMM ) ;
1130: LD_ADDR_EXP 31
1134: PUSH
1135: LD_STRING OtherNotJMM
1137: PPUSH
1138: CALL_OW 31
1142: ST_TO_ADDR
// BobbyLoc = LoadVariable ( BobbyLoc , 1 ) ;
1143: LD_ADDR_EXP 41
1147: PUSH
1148: LD_STRING BobbyLoc
1150: PPUSH
1151: LD_INT 1
1153: PPUSH
1154: CALL_OW 30
1158: ST_TO_ADDR
// CyrusLoc = LoadVariable ( CyrusLoc , 1 ) ;
1159: LD_ADDR_EXP 42
1163: PUSH
1164: LD_STRING CyrusLoc
1166: PPUSH
1167: LD_INT 1
1169: PPUSH
1170: CALL_OW 30
1174: ST_TO_ADDR
// LisaLoc = LoadVariable ( LisaLoc , 1 ) ;
1175: LD_ADDR_EXP 43
1179: PUSH
1180: LD_STRING LisaLoc
1182: PPUSH
1183: LD_INT 1
1185: PPUSH
1186: CALL_OW 30
1190: ST_TO_ADDR
// FrankLoc = LoadVariable ( FrankLoc , 1 ) ;
1191: LD_ADDR_EXP 44
1195: PUSH
1196: LD_STRING FrankLoc
1198: PPUSH
1199: LD_INT 1
1201: PPUSH
1202: CALL_OW 30
1206: ST_TO_ADDR
// BrownLoc = LoadVariable ( BrownLoc , 1 ) ;
1207: LD_ADDR_EXP 45
1211: PUSH
1212: LD_STRING BrownLoc
1214: PPUSH
1215: LD_INT 1
1217: PPUSH
1218: CALL_OW 30
1222: ST_TO_ADDR
// DonaldsonLoc = LoadVariable ( DonaldsonLoc , 1 ) ;
1223: LD_ADDR_EXP 46
1227: PUSH
1228: LD_STRING DonaldsonLoc
1230: PPUSH
1231: LD_INT 1
1233: PPUSH
1234: CALL_OW 30
1238: ST_TO_ADDR
// VanHoutenLoc = LoadVariable ( VanHoutenLoc , 1 ) ;
1239: LD_ADDR_EXP 47
1243: PUSH
1244: LD_STRING VanHoutenLoc
1246: PPUSH
1247: LD_INT 1
1249: PPUSH
1250: CALL_OW 30
1254: ST_TO_ADDR
// GladstoneLoc = LoadVariable ( GladstoneLoc , 1 ) ;
1255: LD_ADDR_EXP 48
1259: PUSH
1260: LD_STRING GladstoneLoc
1262: PPUSH
1263: LD_INT 1
1265: PPUSH
1266: CALL_OW 30
1270: ST_TO_ADDR
// JoanLoc = LoadVariable ( JoanLoc , 1 ) ;
1271: LD_ADDR_EXP 49
1275: PUSH
1276: LD_STRING JoanLoc
1278: PPUSH
1279: LD_INT 1
1281: PPUSH
1282: CALL_OW 30
1286: ST_TO_ADDR
// YamokoLoc = LoadVariable ( YamokoLoc , 1 ) ;
1287: LD_ADDR_EXP 50
1291: PUSH
1292: LD_STRING YamokoLoc
1294: PPUSH
1295: LD_INT 1
1297: PPUSH
1298: CALL_OW 30
1302: ST_TO_ADDR
// GaryLoc = LoadVariable ( GaryLoc , 1 ) ;
1303: LD_ADDR_EXP 51
1307: PUSH
1308: LD_STRING GaryLoc
1310: PPUSH
1311: LD_INT 1
1313: PPUSH
1314: CALL_OW 30
1318: ST_TO_ADDR
// DenisLoc = LoadVariable ( DenisLoc , 1 ) ;
1319: LD_ADDR_EXP 52
1323: PUSH
1324: LD_STRING DenisLoc
1326: PPUSH
1327: LD_INT 1
1329: PPUSH
1330: CALL_OW 30
1334: ST_TO_ADDR
// CornellLoc = LoadVariable ( CornellLoc , 1 ) ;
1335: LD_ADDR_EXP 53
1339: PUSH
1340: LD_STRING CornellLoc
1342: PPUSH
1343: LD_INT 1
1345: PPUSH
1346: CALL_OW 30
1350: ST_TO_ADDR
// Map_am_base = 1 ;
1351: LD_ADDR_EXP 161
1355: PUSH
1356: LD_INT 1
1358: ST_TO_ADDR
// Map_rus_attack = 2 ;
1359: LD_ADDR_EXP 162
1363: PUSH
1364: LD_INT 2
1366: ST_TO_ADDR
// Send_Helpers = 3 ;
1367: LD_ADDR_EXP 163
1371: PUSH
1372: LD_INT 3
1374: ST_TO_ADDR
// Send_Material = 4 ;
1375: LD_ADDR_EXP 165
1379: PUSH
1380: LD_INT 4
1382: ST_TO_ADDR
// Capture_JMM_Vehicles = 5 ;
1383: LD_ADDR_EXP 166
1387: PUSH
1388: LD_INT 5
1390: ST_TO_ADDR
// First_Powells_Attack = 6 ;
1391: LD_ADDR_EXP 167
1395: PUSH
1396: LD_INT 6
1398: ST_TO_ADDR
// Second_Powells_Attack = 7 ;
1399: LD_ADDR_EXP 168
1403: PUSH
1404: LD_INT 7
1406: ST_TO_ADDR
// Run_JMM_Vehicles = 8 ;
1407: LD_ADDR_EXP 169
1411: PUSH
1412: LD_INT 8
1414: ST_TO_ADDR
// Rus1_Attack = 9 ;
1415: LD_ADDR_EXP 170
1419: PUSH
1420: LD_INT 9
1422: ST_TO_ADDR
// Retreat_Report = 10 ;
1423: LD_ADDR_EXP 172
1427: PUSH
1428: LD_INT 10
1430: ST_TO_ADDR
// JMM_Talk = 11 ;
1431: LD_ADDR_EXP 173
1435: PUSH
1436: LD_INT 11
1438: ST_TO_ADDR
// Send_Arabian_Back = 12 ;
1439: LD_ADDR_EXP 174
1443: PUSH
1444: LD_INT 12
1446: ST_TO_ADDR
// Link_Bombs = 13 ;
1447: LD_ADDR_EXP 175
1451: PUSH
1452: LD_INT 13
1454: ST_TO_ADDR
// Rus_Attack = 14 ;
1455: LD_ADDR_EXP 171
1459: PUSH
1460: LD_INT 14
1462: ST_TO_ADDR
// JMM_Is_Ready = 15 ;
1463: LD_ADDR_EXP 144
1467: PUSH
1468: LD_INT 15
1470: ST_TO_ADDR
// First_JMM_Task = 1 ;
1471: LD_ADDR_EXP 137
1475: PUSH
1476: LD_INT 1
1478: ST_TO_ADDR
// disable ( First_JMM_Task ) ;
1479: LD_EXP 137
1483: DISABLE_MARKED
// out_of_base = 2 ;
1484: LD_ADDR_EXP 138
1488: PUSH
1489: LD_INT 2
1491: ST_TO_ADDR
// disable ( out_of_base ) ;
1492: LD_EXP 138
1496: DISABLE_MARKED
// Great_ingame_video = 3 ;
1497: LD_ADDR_EXP 139
1501: PUSH
1502: LD_INT 3
1504: ST_TO_ADDR
// disable ( Great_ingame_video ) ;
1505: LD_EXP 139
1509: DISABLE_MARKED
// R1_attack = 4 ;
1510: LD_ADDR_EXP 140
1514: PUSH
1515: LD_INT 4
1517: ST_TO_ADDR
// disable ( R1_attack ) ;
1518: LD_EXP 140
1522: DISABLE_MARKED
// Protect_Powell = 5 ;
1523: LD_ADDR_EXP 141
1527: PUSH
1528: LD_INT 5
1530: ST_TO_ADDR
// disable ( Protect_Powell ) ;
1531: LD_EXP 141
1535: DISABLE_MARKED
// Talk_Bomba = 6 ;
1536: LD_ADDR_EXP 142
1540: PUSH
1541: LD_INT 6
1543: ST_TO_ADDR
// disable ( Talk_Bomba ) ;
1544: LD_EXP 142
1548: DISABLE_MARKED
// Center_on_fight = 7 ;
1549: LD_ADDR_EXP 143
1553: PUSH
1554: LD_INT 7
1556: ST_TO_ADDR
// disable ( Center_on_fight ) ;
1557: LD_EXP 143
1561: DISABLE_MARKED
// Not_Ingame_Run_over = 8 ;
1562: LD_ADDR_EXP 157
1566: PUSH
1567: LD_INT 8
1569: ST_TO_ADDR
// enable ( Not_Ingame_Run_over ) ;
1570: LD_EXP 157
1574: ENABLE_MARKED
// Ingame_Run_over = 9 ;
1575: LD_ADDR_EXP 145
1579: PUSH
1580: LD_INT 9
1582: ST_TO_ADDR
// disable ( Ingame_Run_over ) ;
1583: LD_EXP 145
1587: DISABLE_MARKED
// Game_Continue = 10 ;
1588: LD_ADDR_EXP 146
1592: PUSH
1593: LD_INT 10
1595: ST_TO_ADDR
// disable ( Game_Continue ) ;
1596: LD_EXP 146
1600: DISABLE_MARKED
// Woman_Comes = 11 ;
1601: LD_ADDR_EXP 148
1605: PUSH
1606: LD_INT 11
1608: ST_TO_ADDR
// Vsevolod_Comes = 12 ;
1609: LD_ADDR_EXP 147
1613: PUSH
1614: LD_INT 12
1616: ST_TO_ADDR
// if ( Woman_alive and kappa_saved and woman_saved = false ) then
1617: LD_EXP 38
1621: PUSH
1622: LD_EXP 33
1626: AND
1627: PUSH
1628: LD_EXP 34
1632: PUSH
1633: LD_INT 0
1635: EQUAL
1636: AND
1637: IFFALSE 1651
// begin disable ( Vsevolod_Comes ) ;
1639: LD_EXP 147
1643: DISABLE_MARKED
// enable ( Woman_Comes ) ;
1644: LD_EXP 148
1648: ENABLE_MARKED
// end else
1649: GO 1680
// if not ( kappa_saved ) then
1651: LD_EXP 33
1655: NOT
1656: IFFALSE 1670
// begin enable ( Vsevolod_Comes ) ;
1658: LD_EXP 147
1662: ENABLE_MARKED
// disable ( Woman_Comes ) ;
1663: LD_EXP 148
1667: DISABLE_MARKED
// end else
1668: GO 1680
// begin disable ( Vsevolod_Comes ) ;
1670: LD_EXP 147
1674: DISABLE_MARKED
// disable ( Woman_Comes ) ;
1675: LD_EXP 148
1679: DISABLE_MARKED
// end ; Matherlod_Contamined1 = 13 ;
1680: LD_ADDR_EXP 149
1684: PUSH
1685: LD_INT 13
1687: ST_TO_ADDR
// disable ( Matherlod_Contamined1 ) ;
1688: LD_EXP 149
1692: DISABLE_MARKED
// Matherlod_Contamined2 = 14 ;
1693: LD_ADDR_EXP 150
1697: PUSH
1698: LD_INT 14
1700: ST_TO_ADDR
// disable ( Matherlod_Contamined2 ) ;
1701: LD_EXP 150
1705: DISABLE_MARKED
// Matherlod_Contamined3 = 15 ;
1706: LD_ADDR_EXP 151
1710: PUSH
1711: LD_INT 15
1713: ST_TO_ADDR
// disable ( Matherlod_Contamined3 ) ;
1714: LD_EXP 151
1718: DISABLE_MARKED
// Alliance_Captured = 16 ;
1719: LD_ADDR_EXP 152
1723: PUSH
1724: LD_INT 16
1726: ST_TO_ADDR
// disable ( Alliance_Captured ) ;
1727: LD_EXP 152
1731: DISABLE_MARKED
// Explorers_Can_Go = 17 ;
1732: LD_ADDR_EXP 153
1736: PUSH
1737: LD_INT 17
1739: ST_TO_ADDR
// disable ( Explorers_Can_Go ) ;
1740: LD_EXP 153
1744: DISABLE_MARKED
// Not_End_of_Alliance = 18 ;
1745: LD_ADDR_EXP 154
1749: PUSH
1750: LD_INT 18
1752: ST_TO_ADDR
// enable ( Not_End_of_Alliance ) ;
1753: LD_EXP 154
1757: ENABLE_MARKED
// JMM_has_surrounded = 19 ;
1758: LD_ADDR_EXP 155
1762: PUSH
1763: LD_INT 19
1765: ST_TO_ADDR
// disable ( JMM_has_surrounded ) ;
1766: LD_EXP 155
1770: DISABLE_MARKED
// Friend_Escapes = 20 ;
1771: LD_ADDR_EXP 156
1775: PUSH
1776: LD_INT 20
1778: ST_TO_ADDR
// disable ( Friend_Escapes ) ;
1779: LD_EXP 156
1783: DISABLE_MARKED
// JMM_Captured = 22 ;
1784: LD_ADDR_EXP 160
1788: PUSH
1789: LD_INT 22
1791: ST_TO_ADDR
// disable ( JMM_Captured ) ;
1792: LD_EXP 160
1796: DISABLE_MARKED
// End_of_m = 23 ;
1797: LD_ADDR_EXP 158
1801: PUSH
1802: LD_INT 23
1804: ST_TO_ADDR
// disable ( End_of_m ) ;
1805: LD_EXP 158
1809: DISABLE_MARKED
// Timer = 24 ;
1810: LD_ADDR_EXP 159
1814: PUSH
1815: LD_INT 24
1817: ST_TO_ADDR
// disable ( Timer ) ;
1818: LD_EXP 159
1822: DISABLE_MARKED
// Arabian_buildings = [ [ b_bunker , 56 , 28 , 0 , [ ar_rocket_launcher ] ] , [ b_bunker , 53 , 25 , 0 , [ ar_gun ] ] , [ b_bunker , 59 , 28 , 5 , [ ar_radar ] ] , [ b_bunker , 35 , 4 , 0 , [ ar_radar ] ] , [ b_bunker , 68 , 20 , 0 , [ ar_radar ] ] , [ b_depot , 53 , 7 , 3 , [ ] ] , [ b_siberite_power , 42 , 5 , 0 , [ ] ] , [ b_siberite_power , 44 , 3 , 0 , [ ] ] , [ b_siberite_power , 93 , 7 , 0 , [ ] ] , [ b_siberite_power , 91 , 3 , 0 , [ ] ] , [ b_barracks , 49 , 9 , 1 , [ ] ] , [ b_bunker , 66 , 26 , 0 , [ ar_rocket_launcher ] ] , [ b_bunker , 69 , 26 , 0 , [ ar_gun ] ] , [ b_bunker , 57 , 13 , 0 , [ ar_flame_thrower ] ] , [ b_bunker , 70 , 10 , 0 , [ ar_gun ] ] , [ b_bunker , 83 , 24 , 0 , [ ar_gun ] ] , [ b_bunker , 88 , 27 , 0 , [ ar_rocket_launcher ] ] , [ b_lab_full , 68 , 13 , 5 , [ b_lab_siberium , b_lab_weapon ] ] , [ b_factory , 89 , 21 , 4 , [ ] ] , [ b_barracks , 84 , 10 , 0 , [ ] ] , [ b_bunker , 88 , 13 , 0 , [ ar_gun ] ] , [ b_bunker , 59 , 10 , 0 , [ ar_gun ] ] , [ b_bunker , 79 , 4 , 5 , [ ar_rocket_launcher ] ] , [ b_warehouse , 84 , 4 , 2 , [ ] ] , [ b_ext_rocket , 93 , 21 , 4 , [ ] ] , [ b_ext_radar , 89 , 18 , 3 , [ ] ] , [ b_ext_gun , 92 , 24 , 5 , [ ] ] , [ b_bunker , 93 , 27 , 1 , [ ar_radar ] ] , [ b_bunker , 90 , 11 , 0 , [ ar_radar ] ] ] ;
1823: LD_ADDR_EXP 88
1827: PUSH
1828: LD_INT 32
1830: PUSH
1831: LD_INT 56
1833: PUSH
1834: LD_INT 28
1836: PUSH
1837: LD_INT 0
1839: PUSH
1840: LD_INT 28
1842: PUSH
1843: EMPTY
1844: LIST
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: LIST
1850: LIST
1851: LIST
1852: PUSH
1853: LD_INT 32
1855: PUSH
1856: LD_INT 53
1858: PUSH
1859: LD_INT 25
1861: PUSH
1862: LD_INT 0
1864: PUSH
1865: LD_INT 27
1867: PUSH
1868: EMPTY
1869: LIST
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: LIST
1877: PUSH
1878: LD_INT 32
1880: PUSH
1881: LD_INT 59
1883: PUSH
1884: LD_INT 28
1886: PUSH
1887: LD_INT 5
1889: PUSH
1890: LD_INT 30
1892: PUSH
1893: EMPTY
1894: LIST
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: PUSH
1903: LD_INT 32
1905: PUSH
1906: LD_INT 35
1908: PUSH
1909: LD_INT 4
1911: PUSH
1912: LD_INT 0
1914: PUSH
1915: LD_INT 30
1917: PUSH
1918: EMPTY
1919: LIST
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: PUSH
1928: LD_INT 32
1930: PUSH
1931: LD_INT 68
1933: PUSH
1934: LD_INT 20
1936: PUSH
1937: LD_INT 0
1939: PUSH
1940: LD_INT 30
1942: PUSH
1943: EMPTY
1944: LIST
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: LIST
1951: LIST
1952: PUSH
1953: LD_INT 0
1955: PUSH
1956: LD_INT 53
1958: PUSH
1959: LD_INT 7
1961: PUSH
1962: LD_INT 3
1964: PUSH
1965: EMPTY
1966: PUSH
1967: EMPTY
1968: LIST
1969: LIST
1970: LIST
1971: LIST
1972: LIST
1973: PUSH
1974: LD_INT 28
1976: PUSH
1977: LD_INT 42
1979: PUSH
1980: LD_INT 5
1982: PUSH
1983: LD_INT 0
1985: PUSH
1986: EMPTY
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: LIST
1994: PUSH
1995: LD_INT 28
1997: PUSH
1998: LD_INT 44
2000: PUSH
2001: LD_INT 3
2003: PUSH
2004: LD_INT 0
2006: PUSH
2007: EMPTY
2008: PUSH
2009: EMPTY
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: LIST
2015: PUSH
2016: LD_INT 28
2018: PUSH
2019: LD_INT 93
2021: PUSH
2022: LD_INT 7
2024: PUSH
2025: LD_INT 0
2027: PUSH
2028: EMPTY
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: LIST
2036: PUSH
2037: LD_INT 28
2039: PUSH
2040: LD_INT 91
2042: PUSH
2043: LD_INT 3
2045: PUSH
2046: LD_INT 0
2048: PUSH
2049: EMPTY
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: PUSH
2058: LD_INT 5
2060: PUSH
2061: LD_INT 49
2063: PUSH
2064: LD_INT 9
2066: PUSH
2067: LD_INT 1
2069: PUSH
2070: EMPTY
2071: PUSH
2072: EMPTY
2073: LIST
2074: LIST
2075: LIST
2076: LIST
2077: LIST
2078: PUSH
2079: LD_INT 32
2081: PUSH
2082: LD_INT 66
2084: PUSH
2085: LD_INT 26
2087: PUSH
2088: LD_INT 0
2090: PUSH
2091: LD_INT 28
2093: PUSH
2094: EMPTY
2095: LIST
2096: PUSH
2097: EMPTY
2098: LIST
2099: LIST
2100: LIST
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 32
2106: PUSH
2107: LD_INT 69
2109: PUSH
2110: LD_INT 26
2112: PUSH
2113: LD_INT 0
2115: PUSH
2116: LD_INT 27
2118: PUSH
2119: EMPTY
2120: LIST
2121: PUSH
2122: EMPTY
2123: LIST
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: PUSH
2129: LD_INT 32
2131: PUSH
2132: LD_INT 57
2134: PUSH
2135: LD_INT 13
2137: PUSH
2138: LD_INT 0
2140: PUSH
2141: LD_INT 26
2143: PUSH
2144: EMPTY
2145: LIST
2146: PUSH
2147: EMPTY
2148: LIST
2149: LIST
2150: LIST
2151: LIST
2152: LIST
2153: PUSH
2154: LD_INT 32
2156: PUSH
2157: LD_INT 70
2159: PUSH
2160: LD_INT 10
2162: PUSH
2163: LD_INT 0
2165: PUSH
2166: LD_INT 27
2168: PUSH
2169: EMPTY
2170: LIST
2171: PUSH
2172: EMPTY
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: PUSH
2179: LD_INT 32
2181: PUSH
2182: LD_INT 83
2184: PUSH
2185: LD_INT 24
2187: PUSH
2188: LD_INT 0
2190: PUSH
2191: LD_INT 27
2193: PUSH
2194: EMPTY
2195: LIST
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: LIST
2201: LIST
2202: LIST
2203: PUSH
2204: LD_INT 32
2206: PUSH
2207: LD_INT 88
2209: PUSH
2210: LD_INT 27
2212: PUSH
2213: LD_INT 0
2215: PUSH
2216: LD_INT 28
2218: PUSH
2219: EMPTY
2220: LIST
2221: PUSH
2222: EMPTY
2223: LIST
2224: LIST
2225: LIST
2226: LIST
2227: LIST
2228: PUSH
2229: LD_INT 8
2231: PUSH
2232: LD_INT 68
2234: PUSH
2235: LD_INT 13
2237: PUSH
2238: LD_INT 5
2240: PUSH
2241: LD_INT 11
2243: PUSH
2244: LD_INT 10
2246: PUSH
2247: EMPTY
2248: LIST
2249: LIST
2250: PUSH
2251: EMPTY
2252: LIST
2253: LIST
2254: LIST
2255: LIST
2256: LIST
2257: PUSH
2258: LD_INT 3
2260: PUSH
2261: LD_INT 89
2263: PUSH
2264: LD_INT 21
2266: PUSH
2267: LD_INT 4
2269: PUSH
2270: EMPTY
2271: PUSH
2272: EMPTY
2273: LIST
2274: LIST
2275: LIST
2276: LIST
2277: LIST
2278: PUSH
2279: LD_INT 5
2281: PUSH
2282: LD_INT 84
2284: PUSH
2285: LD_INT 10
2287: PUSH
2288: LD_INT 0
2290: PUSH
2291: EMPTY
2292: PUSH
2293: EMPTY
2294: LIST
2295: LIST
2296: LIST
2297: LIST
2298: LIST
2299: PUSH
2300: LD_INT 32
2302: PUSH
2303: LD_INT 88
2305: PUSH
2306: LD_INT 13
2308: PUSH
2309: LD_INT 0
2311: PUSH
2312: LD_INT 27
2314: PUSH
2315: EMPTY
2316: LIST
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: LIST
2322: LIST
2323: LIST
2324: PUSH
2325: LD_INT 32
2327: PUSH
2328: LD_INT 59
2330: PUSH
2331: LD_INT 10
2333: PUSH
2334: LD_INT 0
2336: PUSH
2337: LD_INT 27
2339: PUSH
2340: EMPTY
2341: LIST
2342: PUSH
2343: EMPTY
2344: LIST
2345: LIST
2346: LIST
2347: LIST
2348: LIST
2349: PUSH
2350: LD_INT 32
2352: PUSH
2353: LD_INT 79
2355: PUSH
2356: LD_INT 4
2358: PUSH
2359: LD_INT 5
2361: PUSH
2362: LD_INT 28
2364: PUSH
2365: EMPTY
2366: LIST
2367: PUSH
2368: EMPTY
2369: LIST
2370: LIST
2371: LIST
2372: LIST
2373: LIST
2374: PUSH
2375: LD_INT 1
2377: PUSH
2378: LD_INT 84
2380: PUSH
2381: LD_INT 4
2383: PUSH
2384: LD_INT 2
2386: PUSH
2387: EMPTY
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: LIST
2395: PUSH
2396: LD_INT 18
2398: PUSH
2399: LD_INT 93
2401: PUSH
2402: LD_INT 21
2404: PUSH
2405: LD_INT 4
2407: PUSH
2408: EMPTY
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: PUSH
2417: LD_INT 20
2419: PUSH
2420: LD_INT 89
2422: PUSH
2423: LD_INT 18
2425: PUSH
2426: LD_INT 3
2428: PUSH
2429: EMPTY
2430: PUSH
2431: EMPTY
2432: LIST
2433: LIST
2434: LIST
2435: LIST
2436: LIST
2437: PUSH
2438: LD_INT 17
2440: PUSH
2441: LD_INT 92
2443: PUSH
2444: LD_INT 24
2446: PUSH
2447: LD_INT 5
2449: PUSH
2450: EMPTY
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: LIST
2456: LIST
2457: LIST
2458: PUSH
2459: LD_INT 32
2461: PUSH
2462: LD_INT 93
2464: PUSH
2465: LD_INT 27
2467: PUSH
2468: LD_INT 1
2470: PUSH
2471: LD_INT 30
2473: PUSH
2474: EMPTY
2475: LIST
2476: PUSH
2477: EMPTY
2478: LIST
2479: LIST
2480: LIST
2481: LIST
2482: LIST
2483: PUSH
2484: LD_INT 32
2486: PUSH
2487: LD_INT 90
2489: PUSH
2490: LD_INT 11
2492: PUSH
2493: LD_INT 0
2495: PUSH
2496: LD_INT 30
2498: PUSH
2499: EMPTY
2500: LIST
2501: PUSH
2502: EMPTY
2503: LIST
2504: LIST
2505: LIST
2506: LIST
2507: LIST
2508: PUSH
2509: EMPTY
2510: LIST
2511: LIST
2512: LIST
2513: LIST
2514: LIST
2515: LIST
2516: LIST
2517: LIST
2518: LIST
2519: LIST
2520: LIST
2521: LIST
2522: LIST
2523: LIST
2524: LIST
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: LIST
2530: LIST
2531: LIST
2532: LIST
2533: LIST
2534: LIST
2535: LIST
2536: LIST
2537: LIST
2538: LIST
2539: ST_TO_ADDR
// Russian_Buildings = [ [ b_lab_full , 202 , 95 , 5 , [ b_lab_siberium , b_lab_weapon ] ] , [ b_barracks , 170 , 45 , 2 , [ ] ] , [ b_factory , 195 , 84 , 4 , [ ] ] , [ b_ext_rocket , 191 , 80 , 2 , [ ] ] , [ b_ext_siberium , 195 , 81 , 3 , [ ] ] , [ b_ext_computer , 199 , 84 , 4 , [ ] ] , [ b_ext_gun , 198 , 87 , 5 , [ ] ] , [ b_ext_track , 195 , 88 , 0 , [ ] ] , [ b_siberite_power , 190 , 66 , 1 , [ ] ] , [ b_turret , 182 , 58 , 1 , [ ru_rocket ] ] , [ b_turret , 188 , 70 , 1 , [ ru_rocket ] ] , [ b_turret , 183 , 61 , 1 , [ ru_time_lapser ] ] , [ b_turret , 186 , 67 , 1 , [ ru_heavy_gun ] ] , [ b_turret , 185 , 64 , 1 , [ ru_gatling_gun ] ] , [ b_warehouse , 175 , 56 , 3 , [ ] ] , [ b_teleport , 182 , 87 , 0 , [ ] ] , [ b_teleport , 165 , 60 , 3 , [ ] ] , [ b_warehouse , 175 , 81 , 3 , [ ] ] , [ b_barracks , 155 , 44 , 5 , [ ] ] , [ b_turret , 156 , 73 , 1 , [ ru_heavy_gun ] ] , [ b_turret , 158 , 76 , 0 , [ ru_rocket_launcher ] ] , [ b_turret , 156 , 78 , 1 , [ ru_rocket ] ] , [ b_turret , 160 , 86 , 0 , [ ru_heavy_gun ] ] , [ b_bunker , 158 , 82 , 1 , [ ru_gatling_gun ] ] , [ b_bunker , 164 , 86 , 1 , [ ru_rocket ] ] , [ b_bunker , 161 , 81 , 1 , [ ru_rocket_launcher ] ] , [ b_turret , 161 , 75 , 1 , [ ru_time_lapser ] ] , [ b_siberite_power , 163 , 79 , 0 , [ ] ] , [ b_turret , 182 , 105 , 0 , [ ru_gatling_gun ] ] , [ b_turret , 161 , 93 , 1 , [ ru_heavy_gun ] ] , [ b_turret , 164 , 98 , 1 , [ ru_time_lapser ] ] , [ b_turret , 188 , 98 , 3 , [ ru_rocket_launcher ] ] , [ b_turret , 200 , 98 , 0 , [ ru_gatling_gun ] ] , [ b_siberite_power , 166 , 96 , 0 , [ ] ] , [ b_turret , 169 , 100 , 1 , [ ru_rocket ] ] , [ b_turret , 208 , 106 , 0 , [ ru_gatling_gun ] ] , [ b_turret , 196 , 107 , 0 , [ ru_rocket ] ] , [ b_siberite_power , 186 , 101 , 4 , [ ] ] , [ b_siberite_power , 193 , 101 , 3 , [ ] ] , [ b_siberite_power , 182 , 50 , 1 , [ ] ] , [ b_siberite_power , 153 , 28 , 4 , [ ] ] , [ b_siberite_power , 201 , 89 , 1 , [ ] ] , [ b_turret , 150 , 25 , 0 , [ ru_rocket_launcher ] ] , [ b_turret , 151 , 31 , 0 , [ ru_heavy_gun ] ] , [ b_bunker , 153 , 39 , 0 , [ ru_heavy_gun ] ] , [ b_turret , 157 , 41 , 1 , [ ru_time_lapser ] ] , [ b_bunker , 158 , 54 , 1 , [ ru_time_lapser ] ] , [ b_turret , 155 , 35 , 0 , [ ru_rocket ] ] , [ b_turret , 190 , 106 , 0 , [ ru_time_lapser ] ] , [ b_turret , 201 , 106 , 0 , [ ru_time_lapser ] ] , [ b_turret , 154 , 63 , 1 , [ ru_time_lapser ] ] , [ b_turret , 158 , 67 , 1 , [ ru_gatling_gun ] ] , [ b_bunker , 155 , 57 , 1 , [ ru_heavy_gun ] ] , [ b_bunker , 158 , 62 , 1 , [ ru_rocket ] ] , [ b_turret , 164 , 89 , 4 , [ ru_time_lapser ] ] ] ;
2540: LD_ADDR_EXP 113
2544: PUSH
2545: LD_INT 8
2547: PUSH
2548: LD_INT 202
2550: PUSH
2551: LD_INT 95
2553: PUSH
2554: LD_INT 5
2556: PUSH
2557: LD_INT 11
2559: PUSH
2560: LD_INT 10
2562: PUSH
2563: EMPTY
2564: LIST
2565: LIST
2566: PUSH
2567: EMPTY
2568: LIST
2569: LIST
2570: LIST
2571: LIST
2572: LIST
2573: PUSH
2574: LD_INT 5
2576: PUSH
2577: LD_INT 170
2579: PUSH
2580: LD_INT 45
2582: PUSH
2583: LD_INT 2
2585: PUSH
2586: EMPTY
2587: PUSH
2588: EMPTY
2589: LIST
2590: LIST
2591: LIST
2592: LIST
2593: LIST
2594: PUSH
2595: LD_INT 3
2597: PUSH
2598: LD_INT 195
2600: PUSH
2601: LD_INT 84
2603: PUSH
2604: LD_INT 4
2606: PUSH
2607: EMPTY
2608: PUSH
2609: EMPTY
2610: LIST
2611: LIST
2612: LIST
2613: LIST
2614: LIST
2615: PUSH
2616: LD_INT 18
2618: PUSH
2619: LD_INT 191
2621: PUSH
2622: LD_INT 80
2624: PUSH
2625: LD_INT 2
2627: PUSH
2628: EMPTY
2629: PUSH
2630: EMPTY
2631: LIST
2632: LIST
2633: LIST
2634: LIST
2635: LIST
2636: PUSH
2637: LD_INT 21
2639: PUSH
2640: LD_INT 195
2642: PUSH
2643: LD_INT 81
2645: PUSH
2646: LD_INT 3
2648: PUSH
2649: EMPTY
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: LIST
2655: LIST
2656: LIST
2657: PUSH
2658: LD_INT 24
2660: PUSH
2661: LD_INT 199
2663: PUSH
2664: LD_INT 84
2666: PUSH
2667: LD_INT 4
2669: PUSH
2670: EMPTY
2671: PUSH
2672: EMPTY
2673: LIST
2674: LIST
2675: LIST
2676: LIST
2677: LIST
2678: PUSH
2679: LD_INT 17
2681: PUSH
2682: LD_INT 198
2684: PUSH
2685: LD_INT 87
2687: PUSH
2688: LD_INT 5
2690: PUSH
2691: EMPTY
2692: PUSH
2693: EMPTY
2694: LIST
2695: LIST
2696: LIST
2697: LIST
2698: LIST
2699: PUSH
2700: LD_INT 16
2702: PUSH
2703: LD_INT 195
2705: PUSH
2706: LD_INT 88
2708: PUSH
2709: LD_INT 0
2711: PUSH
2712: EMPTY
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: LIST
2718: LIST
2719: LIST
2720: PUSH
2721: LD_INT 28
2723: PUSH
2724: LD_INT 190
2726: PUSH
2727: LD_INT 66
2729: PUSH
2730: LD_INT 1
2732: PUSH
2733: EMPTY
2734: PUSH
2735: EMPTY
2736: LIST
2737: LIST
2738: LIST
2739: LIST
2740: LIST
2741: PUSH
2742: LD_INT 33
2744: PUSH
2745: LD_INT 182
2747: PUSH
2748: LD_INT 58
2750: PUSH
2751: LD_INT 1
2753: PUSH
2754: LD_INT 47
2756: PUSH
2757: EMPTY
2758: LIST
2759: PUSH
2760: EMPTY
2761: LIST
2762: LIST
2763: LIST
2764: LIST
2765: LIST
2766: PUSH
2767: LD_INT 33
2769: PUSH
2770: LD_INT 188
2772: PUSH
2773: LD_INT 70
2775: PUSH
2776: LD_INT 1
2778: PUSH
2779: LD_INT 47
2781: PUSH
2782: EMPTY
2783: LIST
2784: PUSH
2785: EMPTY
2786: LIST
2787: LIST
2788: LIST
2789: LIST
2790: LIST
2791: PUSH
2792: LD_INT 33
2794: PUSH
2795: LD_INT 183
2797: PUSH
2798: LD_INT 61
2800: PUSH
2801: LD_INT 1
2803: PUSH
2804: LD_INT 49
2806: PUSH
2807: EMPTY
2808: LIST
2809: PUSH
2810: EMPTY
2811: LIST
2812: LIST
2813: LIST
2814: LIST
2815: LIST
2816: PUSH
2817: LD_INT 33
2819: PUSH
2820: LD_INT 186
2822: PUSH
2823: LD_INT 67
2825: PUSH
2826: LD_INT 1
2828: PUSH
2829: LD_INT 46
2831: PUSH
2832: EMPTY
2833: LIST
2834: PUSH
2835: EMPTY
2836: LIST
2837: LIST
2838: LIST
2839: LIST
2840: LIST
2841: PUSH
2842: LD_INT 33
2844: PUSH
2845: LD_INT 185
2847: PUSH
2848: LD_INT 64
2850: PUSH
2851: LD_INT 1
2853: PUSH
2854: LD_INT 43
2856: PUSH
2857: EMPTY
2858: LIST
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: LIST
2864: LIST
2865: LIST
2866: PUSH
2867: LD_INT 1
2869: PUSH
2870: LD_INT 175
2872: PUSH
2873: LD_INT 56
2875: PUSH
2876: LD_INT 3
2878: PUSH
2879: EMPTY
2880: PUSH
2881: EMPTY
2882: LIST
2883: LIST
2884: LIST
2885: LIST
2886: LIST
2887: PUSH
2888: LD_INT 34
2890: PUSH
2891: LD_INT 182
2893: PUSH
2894: LD_INT 87
2896: PUSH
2897: LD_INT 0
2899: PUSH
2900: EMPTY
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: LIST
2906: LIST
2907: LIST
2908: PUSH
2909: LD_INT 34
2911: PUSH
2912: LD_INT 165
2914: PUSH
2915: LD_INT 60
2917: PUSH
2918: LD_INT 3
2920: PUSH
2921: EMPTY
2922: PUSH
2923: EMPTY
2924: LIST
2925: LIST
2926: LIST
2927: LIST
2928: LIST
2929: PUSH
2930: LD_INT 1
2932: PUSH
2933: LD_INT 175
2935: PUSH
2936: LD_INT 81
2938: PUSH
2939: LD_INT 3
2941: PUSH
2942: EMPTY
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: LIST
2948: LIST
2949: LIST
2950: PUSH
2951: LD_INT 5
2953: PUSH
2954: LD_INT 155
2956: PUSH
2957: LD_INT 44
2959: PUSH
2960: LD_INT 5
2962: PUSH
2963: EMPTY
2964: PUSH
2965: EMPTY
2966: LIST
2967: LIST
2968: LIST
2969: LIST
2970: LIST
2971: PUSH
2972: LD_INT 33
2974: PUSH
2975: LD_INT 156
2977: PUSH
2978: LD_INT 73
2980: PUSH
2981: LD_INT 1
2983: PUSH
2984: LD_INT 46
2986: PUSH
2987: EMPTY
2988: LIST
2989: PUSH
2990: EMPTY
2991: LIST
2992: LIST
2993: LIST
2994: LIST
2995: LIST
2996: PUSH
2997: LD_INT 33
2999: PUSH
3000: LD_INT 158
3002: PUSH
3003: LD_INT 76
3005: PUSH
3006: LD_INT 0
3008: PUSH
3009: LD_INT 45
3011: PUSH
3012: EMPTY
3013: LIST
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: LIST
3019: LIST
3020: LIST
3021: PUSH
3022: LD_INT 33
3024: PUSH
3025: LD_INT 156
3027: PUSH
3028: LD_INT 78
3030: PUSH
3031: LD_INT 1
3033: PUSH
3034: LD_INT 47
3036: PUSH
3037: EMPTY
3038: LIST
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: LIST
3044: LIST
3045: LIST
3046: PUSH
3047: LD_INT 33
3049: PUSH
3050: LD_INT 160
3052: PUSH
3053: LD_INT 86
3055: PUSH
3056: LD_INT 0
3058: PUSH
3059: LD_INT 46
3061: PUSH
3062: EMPTY
3063: LIST
3064: PUSH
3065: EMPTY
3066: LIST
3067: LIST
3068: LIST
3069: LIST
3070: LIST
3071: PUSH
3072: LD_INT 32
3074: PUSH
3075: LD_INT 158
3077: PUSH
3078: LD_INT 82
3080: PUSH
3081: LD_INT 1
3083: PUSH
3084: LD_INT 43
3086: PUSH
3087: EMPTY
3088: LIST
3089: PUSH
3090: EMPTY
3091: LIST
3092: LIST
3093: LIST
3094: LIST
3095: LIST
3096: PUSH
3097: LD_INT 32
3099: PUSH
3100: LD_INT 164
3102: PUSH
3103: LD_INT 86
3105: PUSH
3106: LD_INT 1
3108: PUSH
3109: LD_INT 47
3111: PUSH
3112: EMPTY
3113: LIST
3114: PUSH
3115: EMPTY
3116: LIST
3117: LIST
3118: LIST
3119: LIST
3120: LIST
3121: PUSH
3122: LD_INT 32
3124: PUSH
3125: LD_INT 161
3127: PUSH
3128: LD_INT 81
3130: PUSH
3131: LD_INT 1
3133: PUSH
3134: LD_INT 45
3136: PUSH
3137: EMPTY
3138: LIST
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: LIST
3144: LIST
3145: LIST
3146: PUSH
3147: LD_INT 33
3149: PUSH
3150: LD_INT 161
3152: PUSH
3153: LD_INT 75
3155: PUSH
3156: LD_INT 1
3158: PUSH
3159: LD_INT 49
3161: PUSH
3162: EMPTY
3163: LIST
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: LIST
3169: LIST
3170: LIST
3171: PUSH
3172: LD_INT 28
3174: PUSH
3175: LD_INT 163
3177: PUSH
3178: LD_INT 79
3180: PUSH
3181: LD_INT 0
3183: PUSH
3184: EMPTY
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: LIST
3192: PUSH
3193: LD_INT 33
3195: PUSH
3196: LD_INT 182
3198: PUSH
3199: LD_INT 105
3201: PUSH
3202: LD_INT 0
3204: PUSH
3205: LD_INT 43
3207: PUSH
3208: EMPTY
3209: LIST
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: LIST
3215: LIST
3216: LIST
3217: PUSH
3218: LD_INT 33
3220: PUSH
3221: LD_INT 161
3223: PUSH
3224: LD_INT 93
3226: PUSH
3227: LD_INT 1
3229: PUSH
3230: LD_INT 46
3232: PUSH
3233: EMPTY
3234: LIST
3235: PUSH
3236: EMPTY
3237: LIST
3238: LIST
3239: LIST
3240: LIST
3241: LIST
3242: PUSH
3243: LD_INT 33
3245: PUSH
3246: LD_INT 164
3248: PUSH
3249: LD_INT 98
3251: PUSH
3252: LD_INT 1
3254: PUSH
3255: LD_INT 49
3257: PUSH
3258: EMPTY
3259: LIST
3260: PUSH
3261: EMPTY
3262: LIST
3263: LIST
3264: LIST
3265: LIST
3266: LIST
3267: PUSH
3268: LD_INT 33
3270: PUSH
3271: LD_INT 188
3273: PUSH
3274: LD_INT 98
3276: PUSH
3277: LD_INT 3
3279: PUSH
3280: LD_INT 45
3282: PUSH
3283: EMPTY
3284: LIST
3285: PUSH
3286: EMPTY
3287: LIST
3288: LIST
3289: LIST
3290: LIST
3291: LIST
3292: PUSH
3293: LD_INT 33
3295: PUSH
3296: LD_INT 200
3298: PUSH
3299: LD_INT 98
3301: PUSH
3302: LD_INT 0
3304: PUSH
3305: LD_INT 43
3307: PUSH
3308: EMPTY
3309: LIST
3310: PUSH
3311: EMPTY
3312: LIST
3313: LIST
3314: LIST
3315: LIST
3316: LIST
3317: PUSH
3318: LD_INT 28
3320: PUSH
3321: LD_INT 166
3323: PUSH
3324: LD_INT 96
3326: PUSH
3327: LD_INT 0
3329: PUSH
3330: EMPTY
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: LIST
3336: LIST
3337: LIST
3338: PUSH
3339: LD_INT 33
3341: PUSH
3342: LD_INT 169
3344: PUSH
3345: LD_INT 100
3347: PUSH
3348: LD_INT 1
3350: PUSH
3351: LD_INT 47
3353: PUSH
3354: EMPTY
3355: LIST
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: LIST
3361: LIST
3362: LIST
3363: PUSH
3364: LD_INT 33
3366: PUSH
3367: LD_INT 208
3369: PUSH
3370: LD_INT 106
3372: PUSH
3373: LD_INT 0
3375: PUSH
3376: LD_INT 43
3378: PUSH
3379: EMPTY
3380: LIST
3381: PUSH
3382: EMPTY
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: LIST
3388: PUSH
3389: LD_INT 33
3391: PUSH
3392: LD_INT 196
3394: PUSH
3395: LD_INT 107
3397: PUSH
3398: LD_INT 0
3400: PUSH
3401: LD_INT 47
3403: PUSH
3404: EMPTY
3405: LIST
3406: PUSH
3407: EMPTY
3408: LIST
3409: LIST
3410: LIST
3411: LIST
3412: LIST
3413: PUSH
3414: LD_INT 28
3416: PUSH
3417: LD_INT 186
3419: PUSH
3420: LD_INT 101
3422: PUSH
3423: LD_INT 4
3425: PUSH
3426: EMPTY
3427: PUSH
3428: EMPTY
3429: LIST
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: PUSH
3435: LD_INT 28
3437: PUSH
3438: LD_INT 193
3440: PUSH
3441: LD_INT 101
3443: PUSH
3444: LD_INT 3
3446: PUSH
3447: EMPTY
3448: PUSH
3449: EMPTY
3450: LIST
3451: LIST
3452: LIST
3453: LIST
3454: LIST
3455: PUSH
3456: LD_INT 28
3458: PUSH
3459: LD_INT 182
3461: PUSH
3462: LD_INT 50
3464: PUSH
3465: LD_INT 1
3467: PUSH
3468: EMPTY
3469: PUSH
3470: EMPTY
3471: LIST
3472: LIST
3473: LIST
3474: LIST
3475: LIST
3476: PUSH
3477: LD_INT 28
3479: PUSH
3480: LD_INT 153
3482: PUSH
3483: LD_INT 28
3485: PUSH
3486: LD_INT 4
3488: PUSH
3489: EMPTY
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: PUSH
3498: LD_INT 28
3500: PUSH
3501: LD_INT 201
3503: PUSH
3504: LD_INT 89
3506: PUSH
3507: LD_INT 1
3509: PUSH
3510: EMPTY
3511: PUSH
3512: EMPTY
3513: LIST
3514: LIST
3515: LIST
3516: LIST
3517: LIST
3518: PUSH
3519: LD_INT 33
3521: PUSH
3522: LD_INT 150
3524: PUSH
3525: LD_INT 25
3527: PUSH
3528: LD_INT 0
3530: PUSH
3531: LD_INT 45
3533: PUSH
3534: EMPTY
3535: LIST
3536: PUSH
3537: EMPTY
3538: LIST
3539: LIST
3540: LIST
3541: LIST
3542: LIST
3543: PUSH
3544: LD_INT 33
3546: PUSH
3547: LD_INT 151
3549: PUSH
3550: LD_INT 31
3552: PUSH
3553: LD_INT 0
3555: PUSH
3556: LD_INT 46
3558: PUSH
3559: EMPTY
3560: LIST
3561: PUSH
3562: EMPTY
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: PUSH
3569: LD_INT 32
3571: PUSH
3572: LD_INT 153
3574: PUSH
3575: LD_INT 39
3577: PUSH
3578: LD_INT 0
3580: PUSH
3581: LD_INT 46
3583: PUSH
3584: EMPTY
3585: LIST
3586: PUSH
3587: EMPTY
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: PUSH
3594: LD_INT 33
3596: PUSH
3597: LD_INT 157
3599: PUSH
3600: LD_INT 41
3602: PUSH
3603: LD_INT 1
3605: PUSH
3606: LD_INT 49
3608: PUSH
3609: EMPTY
3610: LIST
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: PUSH
3619: LD_INT 32
3621: PUSH
3622: LD_INT 158
3624: PUSH
3625: LD_INT 54
3627: PUSH
3628: LD_INT 1
3630: PUSH
3631: LD_INT 49
3633: PUSH
3634: EMPTY
3635: LIST
3636: PUSH
3637: EMPTY
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: PUSH
3644: LD_INT 33
3646: PUSH
3647: LD_INT 155
3649: PUSH
3650: LD_INT 35
3652: PUSH
3653: LD_INT 0
3655: PUSH
3656: LD_INT 47
3658: PUSH
3659: EMPTY
3660: LIST
3661: PUSH
3662: EMPTY
3663: LIST
3664: LIST
3665: LIST
3666: LIST
3667: LIST
3668: PUSH
3669: LD_INT 33
3671: PUSH
3672: LD_INT 190
3674: PUSH
3675: LD_INT 106
3677: PUSH
3678: LD_INT 0
3680: PUSH
3681: LD_INT 49
3683: PUSH
3684: EMPTY
3685: LIST
3686: PUSH
3687: EMPTY
3688: LIST
3689: LIST
3690: LIST
3691: LIST
3692: LIST
3693: PUSH
3694: LD_INT 33
3696: PUSH
3697: LD_INT 201
3699: PUSH
3700: LD_INT 106
3702: PUSH
3703: LD_INT 0
3705: PUSH
3706: LD_INT 49
3708: PUSH
3709: EMPTY
3710: LIST
3711: PUSH
3712: EMPTY
3713: LIST
3714: LIST
3715: LIST
3716: LIST
3717: LIST
3718: PUSH
3719: LD_INT 33
3721: PUSH
3722: LD_INT 154
3724: PUSH
3725: LD_INT 63
3727: PUSH
3728: LD_INT 1
3730: PUSH
3731: LD_INT 49
3733: PUSH
3734: EMPTY
3735: LIST
3736: PUSH
3737: EMPTY
3738: LIST
3739: LIST
3740: LIST
3741: LIST
3742: LIST
3743: PUSH
3744: LD_INT 33
3746: PUSH
3747: LD_INT 158
3749: PUSH
3750: LD_INT 67
3752: PUSH
3753: LD_INT 1
3755: PUSH
3756: LD_INT 43
3758: PUSH
3759: EMPTY
3760: LIST
3761: PUSH
3762: EMPTY
3763: LIST
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: PUSH
3769: LD_INT 32
3771: PUSH
3772: LD_INT 155
3774: PUSH
3775: LD_INT 57
3777: PUSH
3778: LD_INT 1
3780: PUSH
3781: LD_INT 46
3783: PUSH
3784: EMPTY
3785: LIST
3786: PUSH
3787: EMPTY
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: PUSH
3794: LD_INT 32
3796: PUSH
3797: LD_INT 158
3799: PUSH
3800: LD_INT 62
3802: PUSH
3803: LD_INT 1
3805: PUSH
3806: LD_INT 47
3808: PUSH
3809: EMPTY
3810: LIST
3811: PUSH
3812: EMPTY
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: PUSH
3819: LD_INT 33
3821: PUSH
3822: LD_INT 164
3824: PUSH
3825: LD_INT 89
3827: PUSH
3828: LD_INT 4
3830: PUSH
3831: LD_INT 49
3833: PUSH
3834: EMPTY
3835: LIST
3836: PUSH
3837: EMPTY
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: PUSH
3844: EMPTY
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: LIST
3882: LIST
3883: LIST
3884: LIST
3885: LIST
3886: LIST
3887: LIST
3888: LIST
3889: LIST
3890: LIST
3891: LIST
3892: LIST
3893: LIST
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: ST_TO_ADDR
// SetTech ( tech_SibFiss , americans , state_disabled ) ;
3901: LD_INT 25
3903: PPUSH
3904: LD_EXP 176
3908: PPUSH
3909: LD_INT 0
3911: PPUSH
3912: CALL_OW 322
// end ;
3916: LD_VAR 0 1
3920: RET
// function Prepare_difficulty ; var i ; begin
3921: LD_INT 0
3923: PPUSH
3924: PPUSH
// human_difficulty_skill = [ 6 , 7 , 8 ] [ Difficulty ] ;
3925: LD_ADDR_EXP 184
3929: PUSH
3930: LD_INT 6
3932: PUSH
3933: LD_INT 7
3935: PUSH
3936: LD_INT 8
3938: PUSH
3939: EMPTY
3940: LIST
3941: LIST
3942: LIST
3943: PUSH
3944: LD_OWVAR 67
3948: ARRAY
3949: ST_TO_ADDR
// apeman_difficulty_skill = [ 3 , 4 , 5 ] [ Difficulty ] ;
3950: LD_ADDR_EXP 185
3954: PUSH
3955: LD_INT 3
3957: PUSH
3958: LD_INT 4
3960: PUSH
3961: LD_INT 5
3963: PUSH
3964: EMPTY
3965: LIST
3966: LIST
3967: LIST
3968: PUSH
3969: LD_OWVAR 67
3973: ARRAY
3974: ST_TO_ADDR
// Number_of_crates = [ 7 , 5 , 4 ] [ Difficulty ] ;
3975: LD_ADDR_EXP 197
3979: PUSH
3980: LD_INT 7
3982: PUSH
3983: LD_INT 5
3985: PUSH
3986: LD_INT 4
3988: PUSH
3989: EMPTY
3990: LIST
3991: LIST
3992: LIST
3993: PUSH
3994: LD_OWVAR 67
3998: ARRAY
3999: ST_TO_ADDR
// Number_of_JMM_Helpers = 5 ;
4000: LD_ADDR_EXP 69
4004: PUSH
4005: LD_INT 5
4007: ST_TO_ADDR
// Number_Of_Omar_Soldiers = [ 2 , 4 , 5 ] [ Difficulty ] ;
4008: LD_ADDR_EXP 75
4012: PUSH
4013: LD_INT 2
4015: PUSH
4016: LD_INT 4
4018: PUSH
4019: LD_INT 5
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: LIST
4026: PUSH
4027: LD_OWVAR 67
4031: ARRAY
4032: ST_TO_ADDR
// Number_of_Omar_Hovercrafts = [ 1 , 1 , 2 ] [ Difficulty ] ;
4033: LD_ADDR_EXP 76
4037: PUSH
4038: LD_INT 1
4040: PUSH
4041: LD_INT 1
4043: PUSH
4044: LD_INT 2
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: LIST
4051: PUSH
4052: LD_OWVAR 67
4056: ARRAY
4057: ST_TO_ADDR
// Number_of_Omar_Flamethrowers = [ 0 , 1 , 1 ] [ Difficulty ] ;
4058: LD_ADDR_EXP 77
4062: PUSH
4063: LD_INT 0
4065: PUSH
4066: LD_INT 1
4068: PUSH
4069: LD_INT 1
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: LIST
4076: PUSH
4077: LD_OWVAR 67
4081: ARRAY
4082: ST_TO_ADDR
// Number_of_Omar_RocketLaunchers = [ 0 , 0 , 1 ] [ Difficulty ] ;
4083: LD_ADDR_EXP 78
4087: PUSH
4088: LD_INT 0
4090: PUSH
4091: LD_INT 0
4093: PUSH
4094: LD_INT 1
4096: PUSH
4097: EMPTY
4098: LIST
4099: LIST
4100: LIST
4101: PUSH
4102: LD_OWVAR 67
4106: ARRAY
4107: ST_TO_ADDR
// Number_of_russian_soldiers = [ 3 , 5 , 6 ] [ Difficulty ] ;
4108: LD_ADDR_EXP 133
4112: PUSH
4113: LD_INT 3
4115: PUSH
4116: LD_INT 5
4118: PUSH
4119: LD_INT 6
4121: PUSH
4122: EMPTY
4123: LIST
4124: LIST
4125: LIST
4126: PUSH
4127: LD_OWVAR 67
4131: ARRAY
4132: ST_TO_ADDR
// Number_of_russian_scientists = [ 6 , 6 , 6 ] [ Difficulty ] ;
4133: LD_ADDR_EXP 134
4137: PUSH
4138: LD_INT 6
4140: PUSH
4141: LD_INT 6
4143: PUSH
4144: LD_INT 6
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: LIST
4151: PUSH
4152: LD_OWVAR 67
4156: ARRAY
4157: ST_TO_ADDR
// Number_of_russian_mechanics = [ 6 , 6 , 6 ] [ Difficulty ] ;
4158: LD_ADDR_EXP 135
4162: PUSH
4163: LD_INT 6
4165: PUSH
4166: LD_INT 6
4168: PUSH
4169: LD_INT 6
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: LIST
4176: PUSH
4177: LD_OWVAR 67
4181: ARRAY
4182: ST_TO_ADDR
// Number_of_russian_engineers = [ 2 , 3 , 4 ] [ Difficulty ] ;
4183: LD_ADDR_EXP 136
4187: PUSH
4188: LD_INT 2
4190: PUSH
4191: LD_INT 3
4193: PUSH
4194: LD_INT 4
4196: PUSH
4197: EMPTY
4198: LIST
4199: LIST
4200: LIST
4201: PUSH
4202: LD_OWVAR 67
4206: ARRAY
4207: ST_TO_ADDR
// Number_of_Behemots = [ 2 , 3 , 4 ] [ Difficulty ] ;
4208: LD_ADDR_EXP 221
4212: PUSH
4213: LD_INT 2
4215: PUSH
4216: LD_INT 3
4218: PUSH
4219: LD_INT 4
4221: PUSH
4222: EMPTY
4223: LIST
4224: LIST
4225: LIST
4226: PUSH
4227: LD_OWVAR 67
4231: ARRAY
4232: ST_TO_ADDR
// Number_of_Arabian_Engineers = [ 1 , 1 , 2 ] [ Difficulty ] ;
4233: LD_ADDR_EXP 92
4237: PUSH
4238: LD_INT 1
4240: PUSH
4241: LD_INT 1
4243: PUSH
4244: LD_INT 2
4246: PUSH
4247: EMPTY
4248: LIST
4249: LIST
4250: LIST
4251: PUSH
4252: LD_OWVAR 67
4256: ARRAY
4257: ST_TO_ADDR
// Number_of_Arabian_Soldiers = [ 3 , 4 , 5 ] [ Difficulty ] ;
4258: LD_ADDR_EXP 89
4262: PUSH
4263: LD_INT 3
4265: PUSH
4266: LD_INT 4
4268: PUSH
4269: LD_INT 5
4271: PUSH
4272: EMPTY
4273: LIST
4274: LIST
4275: LIST
4276: PUSH
4277: LD_OWVAR 67
4281: ARRAY
4282: ST_TO_ADDR
// Number_of_Arabian_scientists = [ 1 , 2 , 2 ] [ Difficulty ] ;
4283: LD_ADDR_EXP 90
4287: PUSH
4288: LD_INT 1
4290: PUSH
4291: LD_INT 2
4293: PUSH
4294: LD_INT 2
4296: PUSH
4297: EMPTY
4298: LIST
4299: LIST
4300: LIST
4301: PUSH
4302: LD_OWVAR 67
4306: ARRAY
4307: ST_TO_ADDR
// Number_of_Arabian_mechanics = [ 1 , 2 , 3 ] [ Difficulty ] ;
4308: LD_ADDR_EXP 91
4312: PUSH
4313: LD_INT 1
4315: PUSH
4316: LD_INT 2
4318: PUSH
4319: LD_INT 3
4321: PUSH
4322: EMPTY
4323: LIST
4324: LIST
4325: LIST
4326: PUSH
4327: LD_OWVAR 67
4331: ARRAY
4332: ST_TO_ADDR
// Number_of_AllAm_Soldiers = [ 4 , 4 , 4 ] [ Difficulty ] ;
4333: LD_ADDR_EXP 103
4337: PUSH
4338: LD_INT 4
4340: PUSH
4341: LD_INT 4
4343: PUSH
4344: LD_INT 4
4346: PUSH
4347: EMPTY
4348: LIST
4349: LIST
4350: LIST
4351: PUSH
4352: LD_OWVAR 67
4356: ARRAY
4357: ST_TO_ADDR
// Number_of_AllAm_Scientists = [ 4 , 4 , 4 ] [ Difficulty ] ;
4358: LD_ADDR_EXP 104
4362: PUSH
4363: LD_INT 4
4365: PUSH
4366: LD_INT 4
4368: PUSH
4369: LD_INT 4
4371: PUSH
4372: EMPTY
4373: LIST
4374: LIST
4375: LIST
4376: PUSH
4377: LD_OWVAR 67
4381: ARRAY
4382: ST_TO_ADDR
// Number_of_AllRu_Soldiers = [ 1 , 2 , 3 ] [ Difficulty ] ;
4383: LD_ADDR_EXP 105
4387: PUSH
4388: LD_INT 1
4390: PUSH
4391: LD_INT 2
4393: PUSH
4394: LD_INT 3
4396: PUSH
4397: EMPTY
4398: LIST
4399: LIST
4400: LIST
4401: PUSH
4402: LD_OWVAR 67
4406: ARRAY
4407: ST_TO_ADDR
// Number_of_AllRu_Scientists = [ 4 , 4 , 4 ] [ Difficulty ] ;
4408: LD_ADDR_EXP 106
4412: PUSH
4413: LD_INT 4
4415: PUSH
4416: LD_INT 4
4418: PUSH
4419: LD_INT 4
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: LIST
4426: PUSH
4427: LD_OWVAR 67
4431: ARRAY
4432: ST_TO_ADDR
// Woman_Coming_Time = [ 18 18$0 , 18 18$0 , 18 18$0 ] [ Difficulty ] ;
4433: LD_ADDR_EXP 201
4437: PUSH
4438: LD_INT 37800
4440: PUSH
4441: LD_INT 37800
4443: PUSH
4444: LD_INT 37800
4446: PUSH
4447: EMPTY
4448: LIST
4449: LIST
4450: LIST
4451: PUSH
4452: LD_OWVAR 67
4456: ARRAY
4457: ST_TO_ADDR
// Rus_Attack_Time = [ 35 35$0 , 30 30$0 , 28 28$0 ] [ Difficulty ] ;
4458: LD_ADDR_EXP 130
4462: PUSH
4463: LD_INT 73500
4465: PUSH
4466: LD_INT 63000
4468: PUSH
4469: LD_INT 58800
4471: PUSH
4472: EMPTY
4473: LIST
4474: LIST
4475: LIST
4476: PUSH
4477: LD_OWVAR 67
4481: ARRAY
4482: ST_TO_ADDR
// Stevens_Coming_Time = [ 35 35$0 , 35 35$0 , 32 32$0 ] [ Difficulty ] ;
4483: LD_ADDR_EXP 200
4487: PUSH
4488: LD_INT 73500
4490: PUSH
4491: LD_INT 73500
4493: PUSH
4494: LD_INT 67200
4496: PUSH
4497: EMPTY
4498: LIST
4499: LIST
4500: LIST
4501: PUSH
4502: LD_OWVAR 67
4506: ARRAY
4507: ST_TO_ADDR
// Alliance_broadcast = [ 45 45$0 , 40 40$0 , 35 35$0 ] [ Difficulty ] ;
4508: LD_ADDR_EXP 202
4512: PUSH
4513: LD_INT 94500
4515: PUSH
4516: LD_INT 84000
4518: PUSH
4519: LD_INT 73500
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: LIST
4526: PUSH
4527: LD_OWVAR 67
4531: ARRAY
4532: ST_TO_ADDR
// Arabian_siberite_attack_time = [ 50 50$0 , 45 45$0 , 40 40$0 ] [ Difficulty ] ;
4533: LD_ADDR_EXP 213
4537: PUSH
4538: LD_INT 105000
4540: PUSH
4541: LD_INT 94500
4543: PUSH
4544: LD_INT 84000
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: LIST
4551: PUSH
4552: LD_OWVAR 67
4556: ARRAY
4557: ST_TO_ADDR
// Behemots_broadcast = [ 55 55$0 , 50 50$0 , 45 45$0 ] [ Difficulty ] ;
4558: LD_ADDR_EXP 203
4562: PUSH
4563: LD_INT 115500
4565: PUSH
4566: LD_INT 105000
4568: PUSH
4569: LD_INT 94500
4571: PUSH
4572: EMPTY
4573: LIST
4574: LIST
4575: LIST
4576: PUSH
4577: LD_OWVAR 67
4581: ARRAY
4582: ST_TO_ADDR
// Alaskite_Bomb_Time = [ 60 60$0 , 55 55$0 , 50 50$0 ] [ Difficulty ] ;
4583: LD_ADDR_EXP 212
4587: PUSH
4588: LD_INT 126000
4590: PUSH
4591: LD_INT 115500
4593: PUSH
4594: LD_INT 105000
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: LIST
4601: PUSH
4602: LD_OWVAR 67
4606: ARRAY
4607: ST_TO_ADDR
// Time_of_first_capture = [ 65 65$0 , 60 60$0 , 55 55$0 ] [ Difficulty ] ;
4608: LD_ADDR_EXP 204
4612: PUSH
4613: LD_INT 136500
4615: PUSH
4616: LD_INT 126000
4618: PUSH
4619: LD_INT 115500
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: LIST
4626: PUSH
4627: LD_OWVAR 67
4631: ARRAY
4632: ST_TO_ADDR
// Behemot_attack_time = [ 70 70$0 , 65 65$0 , 60 60$0 ] [ Difficulty ] ;
4633: LD_ADDR_EXP 225
4637: PUSH
4638: LD_INT 147000
4640: PUSH
4641: LD_INT 136500
4643: PUSH
4644: LD_INT 126000
4646: PUSH
4647: EMPTY
4648: LIST
4649: LIST
4650: LIST
4651: PUSH
4652: LD_OWVAR 67
4656: ARRAY
4657: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 222 , 179 ) ) ;
4658: LD_INT 222
4660: PPUSH
4661: LD_INT 179
4663: PPUSH
4664: CALL_OW 438
4668: PPUSH
4669: CALL_OW 65
// DestroyUnit ( GetUnitNumber ( 226 , 183 ) ) ;
4673: LD_INT 226
4675: PPUSH
4676: LD_INT 183
4678: PPUSH
4679: CALL_OW 438
4683: PPUSH
4684: CALL_OW 65
// case Difficulty of 1 :
4688: LD_OWVAR 67
4692: PUSH
4693: LD_INT 1
4695: DOUBLE
4696: EQUAL
4697: IFTRUE 4701
4699: GO 5579
4701: POP
// begin DestroyUnit ( GetUnitNumber ( 229 , 176 ) ) ;
4702: LD_INT 229
4704: PPUSH
4705: LD_INT 176
4707: PPUSH
4708: CALL_OW 438
4712: PPUSH
4713: CALL_OW 65
// DestroyUnit ( GetUnitNumber ( 53 , 25 ) ) ;
4717: LD_INT 53
4719: PPUSH
4720: LD_INT 25
4722: PPUSH
4723: CALL_OW 438
4727: PPUSH
4728: CALL_OW 65
// Arabian_buildings = Arabian_buildings diff [ [ b_bunker , 53 , 25 , 0 , [ ar_gun ] ] ] ;
4732: LD_ADDR_EXP 88
4736: PUSH
4737: LD_EXP 88
4741: PUSH
4742: LD_INT 32
4744: PUSH
4745: LD_INT 53
4747: PUSH
4748: LD_INT 25
4750: PUSH
4751: LD_INT 0
4753: PUSH
4754: LD_INT 27
4756: PUSH
4757: EMPTY
4758: LIST
4759: PUSH
4760: EMPTY
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: PUSH
4767: EMPTY
4768: LIST
4769: DIFF
4770: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 70 , 10 ) ) ;
4771: LD_INT 70
4773: PPUSH
4774: LD_INT 10
4776: PPUSH
4777: CALL_OW 438
4781: PPUSH
4782: CALL_OW 65
// Arabian_buildings = Arabian_buildings diff [ [ b_bunker , 70 , 10 , 0 , [ ar_gun ] ] ] ;
4786: LD_ADDR_EXP 88
4790: PUSH
4791: LD_EXP 88
4795: PUSH
4796: LD_INT 32
4798: PUSH
4799: LD_INT 70
4801: PUSH
4802: LD_INT 10
4804: PUSH
4805: LD_INT 0
4807: PUSH
4808: LD_INT 27
4810: PUSH
4811: EMPTY
4812: LIST
4813: PUSH
4814: EMPTY
4815: LIST
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: PUSH
4821: EMPTY
4822: LIST
4823: DIFF
4824: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 79 , 4 ) ) ;
4825: LD_INT 79
4827: PPUSH
4828: LD_INT 4
4830: PPUSH
4831: CALL_OW 438
4835: PPUSH
4836: CALL_OW 65
// Arabian_buildings = Arabian_buildings diff [ [ b_bunker , 79 , 4 , 5 , [ ar_rocket_launcher ] ] ] ;
4840: LD_ADDR_EXP 88
4844: PUSH
4845: LD_EXP 88
4849: PUSH
4850: LD_INT 32
4852: PUSH
4853: LD_INT 79
4855: PUSH
4856: LD_INT 4
4858: PUSH
4859: LD_INT 5
4861: PUSH
4862: LD_INT 28
4864: PUSH
4865: EMPTY
4866: LIST
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: PUSH
4875: EMPTY
4876: LIST
4877: DIFF
4878: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 49 , 9 ) ) ;
4879: LD_INT 49
4881: PPUSH
4882: LD_INT 9
4884: PPUSH
4885: CALL_OW 438
4889: PPUSH
4890: CALL_OW 65
// Arabian_buildings = Arabian_buildings diff [ [ b_barracks , 49 , 9 , 1 , [ ] ] ] ;
4894: LD_ADDR_EXP 88
4898: PUSH
4899: LD_EXP 88
4903: PUSH
4904: LD_INT 5
4906: PUSH
4907: LD_INT 49
4909: PUSH
4910: LD_INT 9
4912: PUSH
4913: LD_INT 1
4915: PUSH
4916: EMPTY
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: PUSH
4925: EMPTY
4926: LIST
4927: DIFF
4928: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 150 , 25 ) ) ;
4929: LD_INT 150
4931: PPUSH
4932: LD_INT 25
4934: PPUSH
4935: CALL_OW 438
4939: PPUSH
4940: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_turret , 150 , 25 , 0 , [ ru_rocket_launcher ] ] ] ;
4944: LD_ADDR_EXP 113
4948: PUSH
4949: LD_EXP 113
4953: PUSH
4954: LD_INT 33
4956: PUSH
4957: LD_INT 150
4959: PUSH
4960: LD_INT 25
4962: PUSH
4963: LD_INT 0
4965: PUSH
4966: LD_INT 45
4968: PUSH
4969: EMPTY
4970: LIST
4971: PUSH
4972: EMPTY
4973: LIST
4974: LIST
4975: LIST
4976: LIST
4977: LIST
4978: PUSH
4979: EMPTY
4980: LIST
4981: DIFF
4982: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 155 , 35 ) ) ;
4983: LD_INT 155
4985: PPUSH
4986: LD_INT 35
4988: PPUSH
4989: CALL_OW 438
4993: PPUSH
4994: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_turret , 155 , 35 , 0 , [ ru_rocket ] ] ] ;
4998: LD_ADDR_EXP 113
5002: PUSH
5003: LD_EXP 113
5007: PUSH
5008: LD_INT 33
5010: PUSH
5011: LD_INT 155
5013: PUSH
5014: LD_INT 35
5016: PUSH
5017: LD_INT 0
5019: PUSH
5020: LD_INT 47
5022: PUSH
5023: EMPTY
5024: LIST
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: PUSH
5033: EMPTY
5034: LIST
5035: DIFF
5036: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 153 , 39 ) ) ;
5037: LD_INT 153
5039: PPUSH
5040: LD_INT 39
5042: PPUSH
5043: CALL_OW 438
5047: PPUSH
5048: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_bunker , 153 , 39 , 0 , [ ru_heavy_gun ] ] ] ;
5052: LD_ADDR_EXP 113
5056: PUSH
5057: LD_EXP 113
5061: PUSH
5062: LD_INT 32
5064: PUSH
5065: LD_INT 153
5067: PUSH
5068: LD_INT 39
5070: PUSH
5071: LD_INT 0
5073: PUSH
5074: LD_INT 46
5076: PUSH
5077: EMPTY
5078: LIST
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: LIST
5086: PUSH
5087: EMPTY
5088: LIST
5089: DIFF
5090: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 188 , 70 ) ) ;
5091: LD_INT 188
5093: PPUSH
5094: LD_INT 70
5096: PPUSH
5097: CALL_OW 438
5101: PPUSH
5102: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_turret , 188 , 70 , 1 , [ ru_rocket ] ] ] ;
5106: LD_ADDR_EXP 113
5110: PUSH
5111: LD_EXP 113
5115: PUSH
5116: LD_INT 33
5118: PUSH
5119: LD_INT 188
5121: PUSH
5122: LD_INT 70
5124: PUSH
5125: LD_INT 1
5127: PUSH
5128: LD_INT 47
5130: PUSH
5131: EMPTY
5132: LIST
5133: PUSH
5134: EMPTY
5135: LIST
5136: LIST
5137: LIST
5138: LIST
5139: LIST
5140: PUSH
5141: EMPTY
5142: LIST
5143: DIFF
5144: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 188 , 98 ) ) ;
5145: LD_INT 188
5147: PPUSH
5148: LD_INT 98
5150: PPUSH
5151: CALL_OW 438
5155: PPUSH
5156: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_turret , 188 , 98 , 3 , [ ru_rocket_launcher ] ] ] ;
5160: LD_ADDR_EXP 113
5164: PUSH
5165: LD_EXP 113
5169: PUSH
5170: LD_INT 33
5172: PUSH
5173: LD_INT 188
5175: PUSH
5176: LD_INT 98
5178: PUSH
5179: LD_INT 3
5181: PUSH
5182: LD_INT 45
5184: PUSH
5185: EMPTY
5186: LIST
5187: PUSH
5188: EMPTY
5189: LIST
5190: LIST
5191: LIST
5192: LIST
5193: LIST
5194: PUSH
5195: EMPTY
5196: LIST
5197: DIFF
5198: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 200 , 98 ) ) ;
5199: LD_INT 200
5201: PPUSH
5202: LD_INT 98
5204: PPUSH
5205: CALL_OW 438
5209: PPUSH
5210: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_turret , 200 , 98 , 0 , [ ru_gatling_gun ] ] ] ;
5214: LD_ADDR_EXP 113
5218: PUSH
5219: LD_EXP 113
5223: PUSH
5224: LD_INT 33
5226: PUSH
5227: LD_INT 200
5229: PUSH
5230: LD_INT 98
5232: PUSH
5233: LD_INT 0
5235: PUSH
5236: LD_INT 43
5238: PUSH
5239: EMPTY
5240: LIST
5241: PUSH
5242: EMPTY
5243: LIST
5244: LIST
5245: LIST
5246: LIST
5247: LIST
5248: PUSH
5249: EMPTY
5250: LIST
5251: DIFF
5252: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 169 , 100 ) ) ;
5253: LD_INT 169
5255: PPUSH
5256: LD_INT 100
5258: PPUSH
5259: CALL_OW 438
5263: PPUSH
5264: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_turret , 169 , 100 , 1 , [ ru_rocket ] ] ] ;
5268: LD_ADDR_EXP 113
5272: PUSH
5273: LD_EXP 113
5277: PUSH
5278: LD_INT 33
5280: PUSH
5281: LD_INT 169
5283: PUSH
5284: LD_INT 100
5286: PUSH
5287: LD_INT 1
5289: PUSH
5290: LD_INT 47
5292: PUSH
5293: EMPTY
5294: LIST
5295: PUSH
5296: EMPTY
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: PUSH
5303: EMPTY
5304: LIST
5305: DIFF
5306: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 164 , 86 ) ) ;
5307: LD_INT 164
5309: PPUSH
5310: LD_INT 86
5312: PPUSH
5313: CALL_OW 438
5317: PPUSH
5318: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_bunker , 164 , 86 , 1 , [ ru_rocket ] ] ] ;
5322: LD_ADDR_EXP 113
5326: PUSH
5327: LD_EXP 113
5331: PUSH
5332: LD_INT 32
5334: PUSH
5335: LD_INT 164
5337: PUSH
5338: LD_INT 86
5340: PUSH
5341: LD_INT 1
5343: PUSH
5344: LD_INT 47
5346: PUSH
5347: EMPTY
5348: LIST
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: LIST
5354: LIST
5355: LIST
5356: PUSH
5357: EMPTY
5358: LIST
5359: DIFF
5360: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 160 , 86 ) ) ;
5361: LD_INT 160
5363: PPUSH
5364: LD_INT 86
5366: PPUSH
5367: CALL_OW 438
5371: PPUSH
5372: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_turret , 160 , 86 , 0 , [ ru_heavy_gun ] ] ] ;
5376: LD_ADDR_EXP 113
5380: PUSH
5381: LD_EXP 113
5385: PUSH
5386: LD_INT 33
5388: PUSH
5389: LD_INT 160
5391: PUSH
5392: LD_INT 86
5394: PUSH
5395: LD_INT 0
5397: PUSH
5398: LD_INT 46
5400: PUSH
5401: EMPTY
5402: LIST
5403: PUSH
5404: EMPTY
5405: LIST
5406: LIST
5407: LIST
5408: LIST
5409: LIST
5410: PUSH
5411: EMPTY
5412: LIST
5413: DIFF
5414: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 158 , 76 ) ) ;
5415: LD_INT 158
5417: PPUSH
5418: LD_INT 76
5420: PPUSH
5421: CALL_OW 438
5425: PPUSH
5426: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_turret , 158 , 76 , 0 , [ ru_rocket_launcher ] ] ] ;
5430: LD_ADDR_EXP 113
5434: PUSH
5435: LD_EXP 113
5439: PUSH
5440: LD_INT 33
5442: PUSH
5443: LD_INT 158
5445: PUSH
5446: LD_INT 76
5448: PUSH
5449: LD_INT 0
5451: PUSH
5452: LD_INT 45
5454: PUSH
5455: EMPTY
5456: LIST
5457: PUSH
5458: EMPTY
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: PUSH
5465: EMPTY
5466: LIST
5467: DIFF
5468: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 158 , 62 ) ) ;
5469: LD_INT 158
5471: PPUSH
5472: LD_INT 62
5474: PPUSH
5475: CALL_OW 438
5479: PPUSH
5480: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_bunker , 158 , 62 , 1 , [ ru_rocket ] ] ] ;
5484: LD_ADDR_EXP 113
5488: PUSH
5489: LD_EXP 113
5493: PUSH
5494: LD_INT 32
5496: PUSH
5497: LD_INT 158
5499: PUSH
5500: LD_INT 62
5502: PUSH
5503: LD_INT 1
5505: PUSH
5506: LD_INT 47
5508: PUSH
5509: EMPTY
5510: LIST
5511: PUSH
5512: EMPTY
5513: LIST
5514: LIST
5515: LIST
5516: LIST
5517: LIST
5518: PUSH
5519: EMPTY
5520: LIST
5521: DIFF
5522: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 155 , 57 ) ) ;
5523: LD_INT 155
5525: PPUSH
5526: LD_INT 57
5528: PPUSH
5529: CALL_OW 438
5533: PPUSH
5534: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_bunker , 155 , 57 , 1 , [ ru_heavy_gun ] ] ] ;
5538: LD_ADDR_EXP 113
5542: PUSH
5543: LD_EXP 113
5547: PUSH
5548: LD_INT 32
5550: PUSH
5551: LD_INT 155
5553: PUSH
5554: LD_INT 57
5556: PUSH
5557: LD_INT 1
5559: PUSH
5560: LD_INT 46
5562: PUSH
5563: EMPTY
5564: LIST
5565: PUSH
5566: EMPTY
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: PUSH
5573: EMPTY
5574: LIST
5575: DIFF
5576: ST_TO_ADDR
// end ; 2 :
5577: GO 6049
5579: LD_INT 2
5581: DOUBLE
5582: EQUAL
5583: IFTRUE 5587
5585: GO 6037
5587: POP
// begin DestroyUnit ( GetUnitNumber ( 224 , 176 ) ) ;
5588: LD_INT 224
5590: PPUSH
5591: LD_INT 176
5593: PPUSH
5594: CALL_OW 438
5598: PPUSH
5599: CALL_OW 65
// DestroyUnit ( GetUnitNumber ( 53 , 25 ) ) ;
5603: LD_INT 53
5605: PPUSH
5606: LD_INT 25
5608: PPUSH
5609: CALL_OW 438
5613: PPUSH
5614: CALL_OW 65
// Arabian_buildings = Arabian_buildings diff [ [ b_bunker , 53 , 25 , 0 , [ ar_gun ] ] ] ;
5618: LD_ADDR_EXP 88
5622: PUSH
5623: LD_EXP 88
5627: PUSH
5628: LD_INT 32
5630: PUSH
5631: LD_INT 53
5633: PUSH
5634: LD_INT 25
5636: PUSH
5637: LD_INT 0
5639: PUSH
5640: LD_INT 27
5642: PUSH
5643: EMPTY
5644: LIST
5645: PUSH
5646: EMPTY
5647: LIST
5648: LIST
5649: LIST
5650: LIST
5651: LIST
5652: PUSH
5653: EMPTY
5654: LIST
5655: DIFF
5656: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 70 , 10 ) ) ;
5657: LD_INT 70
5659: PPUSH
5660: LD_INT 10
5662: PPUSH
5663: CALL_OW 438
5667: PPUSH
5668: CALL_OW 65
// Arabian_buildings = Arabian_buildings diff [ [ b_bunker , 70 , 10 , 0 , [ ar_gun ] ] ] ;
5672: LD_ADDR_EXP 88
5676: PUSH
5677: LD_EXP 88
5681: PUSH
5682: LD_INT 32
5684: PUSH
5685: LD_INT 70
5687: PUSH
5688: LD_INT 10
5690: PUSH
5691: LD_INT 0
5693: PUSH
5694: LD_INT 27
5696: PUSH
5697: EMPTY
5698: LIST
5699: PUSH
5700: EMPTY
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: PUSH
5707: EMPTY
5708: LIST
5709: DIFF
5710: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 79 , 4 ) ) ;
5711: LD_INT 79
5713: PPUSH
5714: LD_INT 4
5716: PPUSH
5717: CALL_OW 438
5721: PPUSH
5722: CALL_OW 65
// Arabian_buildings = Arabian_buildings diff [ [ b_bunker , 79 , 4 , 5 , [ ar_rocket_launcher ] ] ] ;
5726: LD_ADDR_EXP 88
5730: PUSH
5731: LD_EXP 88
5735: PUSH
5736: LD_INT 32
5738: PUSH
5739: LD_INT 79
5741: PUSH
5742: LD_INT 4
5744: PUSH
5745: LD_INT 5
5747: PUSH
5748: LD_INT 28
5750: PUSH
5751: EMPTY
5752: LIST
5753: PUSH
5754: EMPTY
5755: LIST
5756: LIST
5757: LIST
5758: LIST
5759: LIST
5760: PUSH
5761: EMPTY
5762: LIST
5763: DIFF
5764: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 155 , 35 ) ) ;
5765: LD_INT 155
5767: PPUSH
5768: LD_INT 35
5770: PPUSH
5771: CALL_OW 438
5775: PPUSH
5776: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_turret , 155 , 35 , 0 , [ ru_rocket ] ] ] ;
5780: LD_ADDR_EXP 113
5784: PUSH
5785: LD_EXP 113
5789: PUSH
5790: LD_INT 33
5792: PUSH
5793: LD_INT 155
5795: PUSH
5796: LD_INT 35
5798: PUSH
5799: LD_INT 0
5801: PUSH
5802: LD_INT 47
5804: PUSH
5805: EMPTY
5806: LIST
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: LIST
5812: LIST
5813: LIST
5814: PUSH
5815: EMPTY
5816: LIST
5817: DIFF
5818: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 151 , 31 ) ) ;
5819: LD_INT 151
5821: PPUSH
5822: LD_INT 31
5824: PPUSH
5825: CALL_OW 438
5829: PPUSH
5830: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_turret , 151 , 31 , 0 , [ ru_heavy_gun ] ] ] ;
5834: LD_ADDR_EXP 113
5838: PUSH
5839: LD_EXP 113
5843: PUSH
5844: LD_INT 33
5846: PUSH
5847: LD_INT 151
5849: PUSH
5850: LD_INT 31
5852: PUSH
5853: LD_INT 0
5855: PUSH
5856: LD_INT 46
5858: PUSH
5859: EMPTY
5860: LIST
5861: PUSH
5862: EMPTY
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: PUSH
5869: EMPTY
5870: LIST
5871: DIFF
5872: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 169 , 100 ) ) ;
5873: LD_INT 169
5875: PPUSH
5876: LD_INT 100
5878: PPUSH
5879: CALL_OW 438
5883: PPUSH
5884: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_turret , 169 , 100 , 1 , [ ru_rocket ] ] ] ;
5888: LD_ADDR_EXP 113
5892: PUSH
5893: LD_EXP 113
5897: PUSH
5898: LD_INT 33
5900: PUSH
5901: LD_INT 169
5903: PUSH
5904: LD_INT 100
5906: PUSH
5907: LD_INT 1
5909: PUSH
5910: LD_INT 47
5912: PUSH
5913: EMPTY
5914: LIST
5915: PUSH
5916: EMPTY
5917: LIST
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: PUSH
5923: EMPTY
5924: LIST
5925: DIFF
5926: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 158 , 76 ) ) ;
5927: LD_INT 158
5929: PPUSH
5930: LD_INT 76
5932: PPUSH
5933: CALL_OW 438
5937: PPUSH
5938: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_turret , 158 , 76 , 0 , [ ru_rocket_launcher ] ] ] ;
5942: LD_ADDR_EXP 113
5946: PUSH
5947: LD_EXP 113
5951: PUSH
5952: LD_INT 33
5954: PUSH
5955: LD_INT 158
5957: PUSH
5958: LD_INT 76
5960: PUSH
5961: LD_INT 0
5963: PUSH
5964: LD_INT 45
5966: PUSH
5967: EMPTY
5968: LIST
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: PUSH
5977: EMPTY
5978: LIST
5979: DIFF
5980: ST_TO_ADDR
// DestroyUnit ( GetUnitNumber ( 156 , 73 ) ) ;
5981: LD_INT 156
5983: PPUSH
5984: LD_INT 73
5986: PPUSH
5987: CALL_OW 438
5991: PPUSH
5992: CALL_OW 65
// Russian_Buildings = Russian_Buildings diff [ [ b_turret , 156 , 73 , 1 , [ ru_heavy_gun ] ] ] ;
5996: LD_ADDR_EXP 113
6000: PUSH
6001: LD_EXP 113
6005: PUSH
6006: LD_INT 33
6008: PUSH
6009: LD_INT 156
6011: PUSH
6012: LD_INT 73
6014: PUSH
6015: LD_INT 1
6017: PUSH
6018: LD_INT 46
6020: PUSH
6021: EMPTY
6022: LIST
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: PUSH
6031: EMPTY
6032: LIST
6033: DIFF
6034: ST_TO_ADDR
// end ; 3 :
6035: GO 6049
6037: LD_INT 3
6039: DOUBLE
6040: EQUAL
6041: IFTRUE 6045
6043: GO 6048
6045: POP
// begin end ; end ;
6046: GO 6049
6048: POP
// end ;
6049: LD_VAR 0 1
6053: RET
// export function LinkBombs ; begin
6054: LD_INT 0
6056: PPUSH
// ComEnterUnit ( Control_Driver , ArControl ) ;
6057: LD_EXP 85
6061: PPUSH
6062: LD_INT 140
6064: PPUSH
6065: CALL_OW 120
// Wait ( 1 ) ;
6069: LD_INT 1
6071: PPUSH
6072: CALL_OW 67
// WaitTask ( Control_Driver , 1 ) ;
6076: LD_EXP 85
6080: PPUSH
6081: LD_INT 1
6083: PPUSH
6084: CALL 17823 0 2
// LinkVehicleToHuman ( ArBomb1 , Control_Driver ) ;
6088: LD_INT 139
6090: PPUSH
6091: LD_EXP 85
6095: PPUSH
6096: CALL_OW 53
// LinkVehicleToHuman ( ArBomb2 , Control_Driver ) ;
6100: LD_INT 138
6102: PPUSH
6103: LD_EXP 85
6107: PPUSH
6108: CALL_OW 53
// end ;
6112: LD_VAR 0 1
6116: RET
// function Prepare_Characters ; var i , Un , hlp , Gamma2Comander , Alpha , New_person , Drivers , Other , Number_of_all , Selected_Unit , New_vehicle ; begin
6117: LD_INT 0
6119: PPUSH
6120: PPUSH
6121: PPUSH
6122: PPUSH
6123: PPUSH
6124: PPUSH
6125: PPUSH
6126: PPUSH
6127: PPUSH
6128: PPUSH
6129: PPUSH
6130: PPUSH
// uc_nation = nation_american ;
6131: LD_ADDR_OWVAR 21
6135: PUSH
6136: LD_INT 1
6138: ST_TO_ADDR
// uc_side = americans ;
6139: LD_ADDR_OWVAR 20
6143: PUSH
6144: LD_EXP 176
6148: ST_TO_ADDR
// if not debug_constant then
6149: LD_EXP 195
6153: NOT
6154: IFFALSE 6171
// JMM = CreateCharacter ( JMM ) else
6156: LD_ADDR_EXP 1
6160: PUSH
6161: LD_STRING JMM
6163: PPUSH
6164: CALL_OW 34
6168: ST_TO_ADDR
6169: GO 6193
// begin hc_name = JMM ;
6171: LD_ADDR_OWVAR 26
6175: PUSH
6176: LD_STRING JMM
6178: ST_TO_ADDR
// JMM = CreateHuman ;
6179: LD_ADDR_EXP 1
6183: PUSH
6184: CALL_OW 44
6188: ST_TO_ADDR
// InitHc ;
6189: CALL_OW 19
// end ; if not JMM then
6193: LD_EXP 1
6197: NOT
6198: IFFALSE 6213
// BuildQuery ( Error: John Macmillan not found!!! , [ OK ] ) ;
6200: LD_STRING Error: John Macmillan not found!!!
6202: PPUSH
6203: LD_STRING OK
6205: PUSH
6206: EMPTY
6207: LIST
6208: PPUSH
6209: CALL_OW 99
// uc_side = americans1 ;
6213: LD_ADDR_OWVAR 20
6217: PUSH
6218: LD_EXP 177
6222: ST_TO_ADDR
// Powell = NewCharacter ( Powell ) ;
6223: LD_ADDR_EXP 2
6227: PUSH
6228: LD_STRING Powell
6230: PPUSH
6231: CALL_OW 25
6235: ST_TO_ADDR
// if not Powell then
6236: LD_EXP 2
6240: NOT
6241: IFFALSE 6258
// BuildQuery ( Error: Powell not found!!! , [ OK ] ) else
6243: LD_STRING Error: Powell not found!!!
6245: PPUSH
6246: LD_STRING OK
6248: PUSH
6249: EMPTY
6250: LIST
6251: PPUSH
6252: CALL_OW 99
6256: GO 6363
// begin SetSkill ( Powell , skill_combat , 10 ) ;
6258: LD_EXP 2
6262: PPUSH
6263: LD_INT 1
6265: PPUSH
6266: LD_INT 10
6268: PPUSH
6269: CALL_OW 237
// SetSkill ( Powell , skill_mechanical , 10 ) ;
6273: LD_EXP 2
6277: PPUSH
6278: LD_INT 3
6280: PPUSH
6281: LD_INT 10
6283: PPUSH
6284: CALL_OW 237
// SetSkill ( Powell , skill_engineering , 8 ) ;
6288: LD_EXP 2
6292: PPUSH
6293: LD_INT 2
6295: PPUSH
6296: LD_INT 8
6298: PPUSH
6299: CALL_OW 237
// SetSkill ( Powell , skill_scientistic , 4 ) ;
6303: LD_EXP 2
6307: PPUSH
6308: LD_INT 4
6310: PPUSH
6311: LD_INT 4
6313: PPUSH
6314: CALL_OW 237
// SetAttr ( Powell , attr_speed , 11 ) ;
6318: LD_EXP 2
6322: PPUSH
6323: LD_INT 2
6325: PPUSH
6326: LD_INT 11
6328: PPUSH
6329: CALL_OW 239
// SetAttr ( Powell , attr_stamina , 13 ) ;
6333: LD_EXP 2
6337: PPUSH
6338: LD_INT 1
6340: PPUSH
6341: LD_INT 13
6343: PPUSH
6344: CALL_OW 239
// PlaceUnitArea ( Powell , Center_am_b , false ) ;
6348: LD_EXP 2
6352: PPUSH
6353: LD_INT 13
6355: PPUSH
6356: LD_INT 0
6358: PPUSH
6359: CALL_OW 49
// end ; Bobby = CreateCharacter ( Bobby ) ;
6363: LD_ADDR_EXP 3
6367: PUSH
6368: LD_STRING Bobby
6370: PPUSH
6371: CALL_OW 34
6375: ST_TO_ADDR
// if Bobby then
6376: LD_EXP 3
6380: IFFALSE 6407
// begin if BobbyLoc <> 6 then
6382: LD_EXP 41
6386: PUSH
6387: LD_INT 6
6389: NONEQUAL
6390: IFFALSE 6407
// PlaceUnitArea ( Bobby , Center_am_b , false ) ;
6392: LD_EXP 3
6396: PPUSH
6397: LD_INT 13
6399: PPUSH
6400: LD_INT 0
6402: PPUSH
6403: CALL_OW 49
// end ; Cyrus = CreateCharacter ( Cyrus ) ;
6407: LD_ADDR_EXP 4
6411: PUSH
6412: LD_STRING Cyrus
6414: PPUSH
6415: CALL_OW 34
6419: ST_TO_ADDR
// if Cyrus then
6420: LD_EXP 4
6424: IFFALSE 6451
// begin if CyrusLoc <> 6 then
6426: LD_EXP 42
6430: PUSH
6431: LD_INT 6
6433: NONEQUAL
6434: IFFALSE 6451
// PlaceUnitArea ( Cyrus , Center_am_b , false ) ;
6436: LD_EXP 4
6440: PPUSH
6441: LD_INT 13
6443: PPUSH
6444: LD_INT 0
6446: PPUSH
6447: CALL_OW 49
// end ; Lisa = CreateCharacter ( Lisa ) ;
6451: LD_ADDR_EXP 5
6455: PUSH
6456: LD_STRING Lisa
6458: PPUSH
6459: CALL_OW 34
6463: ST_TO_ADDR
// if Lisa and Woman_in_am14 <> 2 then
6464: LD_EXP 5
6468: PUSH
6469: LD_EXP 36
6473: PUSH
6474: LD_INT 2
6476: NONEQUAL
6477: AND
6478: IFFALSE 6505
// begin if LisaLoc <> 6 then
6480: LD_EXP 43
6484: PUSH
6485: LD_INT 6
6487: NONEQUAL
6488: IFFALSE 6505
// PlaceUnitArea ( Lisa , Center_am_b , false ) ;
6490: LD_EXP 5
6494: PPUSH
6495: LD_INT 13
6497: PPUSH
6498: LD_INT 0
6500: PPUSH
6501: CALL_OW 49
// end ; Frank = CreateCharacter ( Frank ) ;
6505: LD_ADDR_EXP 6
6509: PUSH
6510: LD_STRING Frank
6512: PPUSH
6513: CALL_OW 34
6517: ST_TO_ADDR
// if Frank then
6518: LD_EXP 6
6522: IFFALSE 6549
// begin if FrankLoc <> 6 then
6524: LD_EXP 44
6528: PUSH
6529: LD_INT 6
6531: NONEQUAL
6532: IFFALSE 6549
// PlaceUnitArea ( Frank , Center_am_b , false ) ;
6534: LD_EXP 6
6538: PPUSH
6539: LD_INT 13
6541: PPUSH
6542: LD_INT 0
6544: PPUSH
6545: CALL_OW 49
// end ; Brown = CreateCharacter ( Brown ) ;
6549: LD_ADDR_EXP 7
6553: PUSH
6554: LD_STRING Brown
6556: PPUSH
6557: CALL_OW 34
6561: ST_TO_ADDR
// if Brown then
6562: LD_EXP 7
6566: IFFALSE 6593
// begin if BrownLoc <> 6 then
6568: LD_EXP 45
6572: PUSH
6573: LD_INT 6
6575: NONEQUAL
6576: IFFALSE 6593
// PlaceUnitArea ( Brown , Center_am_b , false ) ;
6578: LD_EXP 7
6582: PPUSH
6583: LD_INT 13
6585: PPUSH
6586: LD_INT 0
6588: PPUSH
6589: CALL_OW 49
// end ; Donaldson = CreateCharacter ( Donaldson ) ;
6593: LD_ADDR_EXP 8
6597: PUSH
6598: LD_STRING Donaldson
6600: PPUSH
6601: CALL_OW 34
6605: ST_TO_ADDR
// if Donaldson then
6606: LD_EXP 8
6610: IFFALSE 6637
// begin if DonaldsonLoc <> 6 then
6612: LD_EXP 46
6616: PUSH
6617: LD_INT 6
6619: NONEQUAL
6620: IFFALSE 6637
// PlaceUnitArea ( Donaldson , Center_am_b , false ) ;
6622: LD_EXP 8
6626: PPUSH
6627: LD_INT 13
6629: PPUSH
6630: LD_INT 0
6632: PPUSH
6633: CALL_OW 49
// end ; Gladstone = CreateCharacter ( Gladstone ) ;
6637: LD_ADDR_EXP 9
6641: PUSH
6642: LD_STRING Gladstone
6644: PPUSH
6645: CALL_OW 34
6649: ST_TO_ADDR
// if Gladstone then
6650: LD_EXP 9
6654: IFFALSE 6681
// begin if GladstoneLoc <> 6 then
6656: LD_EXP 48
6660: PUSH
6661: LD_INT 6
6663: NONEQUAL
6664: IFFALSE 6681
// PlaceUnitArea ( Gladstone , Center_am_b , false ) ;
6666: LD_EXP 9
6670: PPUSH
6671: LD_INT 13
6673: PPUSH
6674: LD_INT 0
6676: PPUSH
6677: CALL_OW 49
// end ; Denis = CreateCharacter ( Denis ) ;
6681: LD_ADDR_EXP 11
6685: PUSH
6686: LD_STRING Denis
6688: PPUSH
6689: CALL_OW 34
6693: ST_TO_ADDR
// if Denis then
6694: LD_EXP 11
6698: IFFALSE 6725
// begin if DenisLoc <> 6 then
6700: LD_EXP 52
6704: PUSH
6705: LD_INT 6
6707: NONEQUAL
6708: IFFALSE 6725
// PlaceUnitArea ( Denis , Center_am_b , false ) ;
6710: LD_EXP 11
6714: PPUSH
6715: LD_INT 13
6717: PPUSH
6718: LD_INT 0
6720: PPUSH
6721: CALL_OW 49
// end ; Cornell = CreateCharacter ( Cornell ) ;
6725: LD_ADDR_EXP 10
6729: PUSH
6730: LD_STRING Cornell
6732: PPUSH
6733: CALL_OW 34
6737: ST_TO_ADDR
// if Cornell then
6738: LD_EXP 10
6742: IFFALSE 6769
// begin if CornellLoc <> 6 then
6744: LD_EXP 53
6748: PUSH
6749: LD_INT 6
6751: NONEQUAL
6752: IFFALSE 6769
// PlaceUnitArea ( Cornell , Center_am_b , false ) ;
6754: LD_EXP 10
6758: PPUSH
6759: LD_INT 13
6761: PPUSH
6762: LD_INT 0
6764: PPUSH
6765: CALL_OW 49
// end ; Yamoko = CreateCharacter ( Yamoko ) ;
6769: LD_ADDR_EXP 14
6773: PUSH
6774: LD_STRING Yamoko
6776: PPUSH
6777: CALL_OW 34
6781: ST_TO_ADDR
// if Yamoko then
6782: LD_EXP 14
6786: IFFALSE 6813
// begin if YamokoLoc <> 6 then
6788: LD_EXP 50
6792: PUSH
6793: LD_INT 6
6795: NONEQUAL
6796: IFFALSE 6813
// PlaceUnitArea ( Yamoko , Center_am_b , false ) ;
6798: LD_EXP 14
6802: PPUSH
6803: LD_INT 13
6805: PPUSH
6806: LD_INT 0
6808: PPUSH
6809: CALL_OW 49
// end ; Gary = CreateCharacter ( Gary ) ;
6813: LD_ADDR_EXP 15
6817: PUSH
6818: LD_STRING Gary
6820: PPUSH
6821: CALL_OW 34
6825: ST_TO_ADDR
// if Gary then
6826: LD_EXP 15
6830: IFFALSE 6857
// begin if GaryLoc <> 6 then
6832: LD_EXP 51
6836: PUSH
6837: LD_INT 6
6839: NONEQUAL
6840: IFFALSE 6857
// PlaceUnitArea ( Gary , Center_am_b , false ) ;
6842: LD_EXP 15
6846: PPUSH
6847: LD_INT 13
6849: PPUSH
6850: LD_INT 0
6852: PPUSH
6853: CALL_OW 49
// end ; VanHouten = CreateCharacter ( VanHouten ) ;
6857: LD_ADDR_EXP 24
6861: PUSH
6862: LD_STRING VanHouten
6864: PPUSH
6865: CALL_OW 34
6869: ST_TO_ADDR
// if VanHouten then
6870: LD_EXP 24
6874: IFFALSE 6901
// begin if VanHoutenLoc <> 6 then
6876: LD_EXP 47
6880: PUSH
6881: LD_INT 6
6883: NONEQUAL
6884: IFFALSE 6901
// PlaceUnitArea ( VanHoutenLoc , Center_am_b , false ) ;
6886: LD_EXP 47
6890: PPUSH
6891: LD_INT 13
6893: PPUSH
6894: LD_INT 0
6896: PPUSH
6897: CALL_OW 49
// end ; Stevens = CreateCharacter ( Stevens ) ;
6901: LD_ADDR_EXP 17
6905: PUSH
6906: LD_STRING Stevens
6908: PPUSH
6909: CALL_OW 34
6913: ST_TO_ADDR
// if not ( Stevens ) then
6914: LD_EXP 17
6918: NOT
6919: IFFALSE 6972
// begin PrepareScientist ( 1 , 9 ) ;
6921: LD_INT 1
6923: PPUSH
6924: LD_INT 9
6926: PPUSH
6927: CALL_OW 384
// hc_name = Baker Smith ;
6931: LD_ADDR_OWVAR 26
6935: PUSH
6936: LD_STRING Baker Smith
6938: ST_TO_ADDR
// Baker = CreateHuman ;
6939: LD_ADDR_EXP 23
6943: PUSH
6944: CALL_OW 44
6948: ST_TO_ADDR
// SetSkill ( Baker , skill_scientistic , 8 ) ;
6949: LD_EXP 23
6953: PPUSH
6954: LD_INT 4
6956: PPUSH
6957: LD_INT 8
6959: PPUSH
6960: CALL_OW 237
// hc_name =  ;
6964: LD_ADDR_OWVAR 26
6968: PUSH
6969: LD_STRING 
6971: ST_TO_ADDR
// end ; Coonie = CreateCharacter ( Coonie ) ;
6972: LD_ADDR_EXP 18
6976: PUSH
6977: LD_STRING Coonie
6979: PPUSH
6980: CALL_OW 34
6984: ST_TO_ADDR
// if Coonie and Woman_in_am14 <> 3 then
6985: LD_EXP 18
6989: PUSH
6990: LD_EXP 36
6994: PUSH
6995: LD_INT 3
6997: NONEQUAL
6998: AND
6999: IFFALSE 7010
// begin DestroyUnit ( Coonie ) ;
7001: LD_EXP 18
7005: PPUSH
7006: CALL_OW 65
// end ; if not debug_constant then
7010: LD_EXP 195
7014: NOT
7015: IFFALSE 7032
// Joan = CreateCharacter ( Joan ) else
7017: LD_ADDR_EXP 12
7021: PUSH
7022: LD_STRING Joan
7024: PPUSH
7025: CALL_OW 34
7029: ST_TO_ADDR
7030: GO 7062
// begin hc_name = Joan ;
7032: LD_ADDR_OWVAR 26
7036: PUSH
7037: LD_STRING Joan
7039: ST_TO_ADDR
// hc_sex = sex_female ;
7040: LD_ADDR_OWVAR 27
7044: PUSH
7045: LD_INT 2
7047: ST_TO_ADDR
// Joan = CreateHuman ;
7048: LD_ADDR_EXP 12
7052: PUSH
7053: CALL_OW 44
7057: ST_TO_ADDR
// InitHC ;
7058: CALL_OW 19
// end ; All_americans = FilterAllUnits ( [ [ f_side , americans1 ] , [ f_type , unit_human ] ] ) diff Powell ;
7062: LD_ADDR_EXP 61
7066: PUSH
7067: LD_INT 22
7069: PUSH
7070: LD_EXP 177
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: PUSH
7079: LD_INT 21
7081: PUSH
7082: LD_INT 1
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: PUSH
7089: EMPTY
7090: LIST
7091: LIST
7092: PPUSH
7093: CALL_OW 69
7097: PUSH
7098: LD_EXP 2
7102: DIFF
7103: ST_TO_ADDR
// Named_americans = All_americans ;
7104: LD_ADDR_EXP 62
7108: PUSH
7109: LD_EXP 61
7113: ST_TO_ADDR
// if Named_americans > 12 then
7114: LD_EXP 62
7118: PUSH
7119: LD_INT 12
7121: GREATER
7122: IFFALSE 7140
// Number_of_all = Named_americans + 8 else
7124: LD_ADDR_VAR 0 10
7128: PUSH
7129: LD_EXP 62
7133: PUSH
7134: LD_INT 8
7136: PLUS
7137: ST_TO_ADDR
7138: GO 7148
// Number_of_all = 20 ;
7140: LD_ADDR_VAR 0 10
7144: PUSH
7145: LD_INT 20
7147: ST_TO_ADDR
// while ( OtherNotJMM <> 0 ) and ( All_Americans < Number_of_all ) do
7148: LD_EXP 31
7152: PUSH
7153: LD_INT 0
7155: NONEQUAL
7156: PUSH
7157: LD_EXP 61
7161: PUSH
7162: LD_VAR 0 10
7166: LESS
7167: AND
7168: IFFALSE 7237
// begin Selected_unit = FindMaxSumSkill ( OtherNotJMM , 0 ) ;
7170: LD_ADDR_VAR 0 11
7174: PUSH
7175: LD_EXP 31
7179: PPUSH
7180: LD_INT 0
7182: PPUSH
7183: CALL 18035 0 2
7187: ST_TO_ADDR
// OtherNotJMM = OtherNotJMM diff Selected_unit ;
7188: LD_ADDR_EXP 31
7192: PUSH
7193: LD_EXP 31
7197: PUSH
7198: LD_VAR 0 11
7202: DIFF
7203: ST_TO_ADDR
// All_Americans = All_americans ^ Selected_unit ;
7204: LD_ADDR_EXP 61
7208: PUSH
7209: LD_EXP 61
7213: PUSH
7214: LD_VAR 0 11
7218: ADD
7219: ST_TO_ADDR
// PlaceUnitArea ( Selected_unit , Center_am_b , false ) ;
7220: LD_VAR 0 11
7224: PPUSH
7225: LD_INT 13
7227: PPUSH
7228: LD_INT 0
7230: PPUSH
7231: CALL_OW 49
// end ;
7235: GO 7148
// if All_americans < Number_of_all then
7237: LD_EXP 61
7241: PUSH
7242: LD_VAR 0 10
7246: LESS
7247: IFFALSE 7412
// for i = All_americans + 1 to Number_of_all do
7249: LD_ADDR_VAR 0 2
7253: PUSH
7254: DOUBLE
7255: LD_EXP 61
7259: PUSH
7260: LD_INT 1
7262: PLUS
7263: DEC
7264: ST_TO_ADDR
7265: LD_VAR 0 10
7269: PUSH
7270: FOR_TO
7271: IFFALSE 7410
// begin case ( i mod 4 ) of 0 :
7273: LD_VAR 0 2
7277: PUSH
7278: LD_INT 4
7280: MOD
7281: PUSH
7282: LD_INT 0
7284: DOUBLE
7285: EQUAL
7286: IFTRUE 7290
7288: GO 7303
7290: POP
// begin PrepareSoldier ( sex_male , 7 ) ;
7291: LD_INT 1
7293: PPUSH
7294: LD_INT 7
7296: PPUSH
7297: CALL_OW 381
// end ; 1 :
7301: GO 7367
7303: LD_INT 1
7305: DOUBLE
7306: EQUAL
7307: IFTRUE 7311
7309: GO 7324
7311: POP
// begin PrepareScientist ( sex_male , 7 ) ;
7312: LD_INT 1
7314: PPUSH
7315: LD_INT 7
7317: PPUSH
7318: CALL_OW 384
// end ; 2 :
7322: GO 7367
7324: LD_INT 2
7326: DOUBLE
7327: EQUAL
7328: IFTRUE 7332
7330: GO 7345
7332: POP
// begin PrepareMechanic ( sex_male , 7 ) ;
7333: LD_INT 1
7335: PPUSH
7336: LD_INT 7
7338: PPUSH
7339: CALL_OW 383
// end ; 3 :
7343: GO 7367
7345: LD_INT 3
7347: DOUBLE
7348: EQUAL
7349: IFTRUE 7353
7351: GO 7366
7353: POP
// begin PrepareEngineer ( sex_male , 7 ) ;
7354: LD_INT 1
7356: PPUSH
7357: LD_INT 7
7359: PPUSH
7360: CALL_OW 382
// end ; end ;
7364: GO 7367
7366: POP
// New_person = CreateHuman ;
7367: LD_ADDR_VAR 0 7
7371: PUSH
7372: CALL_OW 44
7376: ST_TO_ADDR
// All_americans = All_americans ^ New_person ;
7377: LD_ADDR_EXP 61
7381: PUSH
7382: LD_EXP 61
7386: PUSH
7387: LD_VAR 0 7
7391: ADD
7392: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_am_b , false ) ;
7393: LD_VAR 0 7
7397: PPUSH
7398: LD_INT 13
7400: PPUSH
7401: LD_INT 0
7403: PPUSH
7404: CALL_OW 49
// end ;
7408: GO 7270
7410: POP
7411: POP
// Remaining_Powells = All_americans ;
7412: LD_ADDR_EXP 64
7416: PUSH
7417: LD_EXP 61
7421: ST_TO_ADDR
// uc_nation = nation_russian ;
7422: LD_ADDR_OWVAR 21
7426: PUSH
7427: LD_INT 3
7429: ST_TO_ADDR
// uc_side = russians ;
7430: LD_ADDR_OWVAR 20
7434: PUSH
7435: LD_EXP 178
7439: ST_TO_ADDR
// uc_nation = nation_russian ;
7440: LD_ADDR_OWVAR 21
7444: PUSH
7445: LD_INT 3
7447: ST_TO_ADDR
// Platonov = NewCharacter ( Platonov ) ;
7448: LD_ADDR_EXP 26
7452: PUSH
7453: LD_STRING Platonov
7455: PPUSH
7456: CALL_OW 25
7460: ST_TO_ADDR
// if Platonov then
7461: LD_EXP 26
7465: IFFALSE 7529
// begin SetSkill ( Platonov , skill_combat , 10 ) ;
7467: LD_EXP 26
7471: PPUSH
7472: LD_INT 1
7474: PPUSH
7475: LD_INT 10
7477: PPUSH
7478: CALL_OW 237
// SetSkill ( Platonov , skill_engineering , 6 ) ;
7482: LD_EXP 26
7486: PPUSH
7487: LD_INT 2
7489: PPUSH
7490: LD_INT 6
7492: PPUSH
7493: CALL_OW 237
// SetSkill ( Platonov , skill_mechanical , 10 ) ;
7497: LD_EXP 26
7501: PPUSH
7502: LD_INT 3
7504: PPUSH
7505: LD_INT 10
7507: PPUSH
7508: CALL_OW 237
// SetSkill ( Platonov , skill_scientistic , 2 ) ;
7512: LD_EXP 26
7516: PPUSH
7517: LD_INT 4
7519: PPUSH
7520: LD_INT 2
7522: PPUSH
7523: CALL_OW 237
// end else
7527: GO 7617
// begin hc_sex = sex_male ;
7529: LD_ADDR_OWVAR 27
7533: PUSH
7534: LD_INT 1
7536: ST_TO_ADDR
// hc_class = class_soldier ;
7537: LD_ADDR_OWVAR 28
7541: PUSH
7542: LD_INT 1
7544: ST_TO_ADDR
// hc_skills = [ 10 , 6 , 10 , 3 ] ;
7545: LD_ADDR_OWVAR 31
7549: PUSH
7550: LD_INT 10
7552: PUSH
7553: LD_INT 6
7555: PUSH
7556: LD_INT 10
7558: PUSH
7559: LD_INT 3
7561: PUSH
7562: EMPTY
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
7568: LD_ADDR_OWVAR 29
7572: PUSH
7573: LD_INT 10
7575: PUSH
7576: LD_INT 10
7578: PUSH
7579: EMPTY
7580: LIST
7581: LIST
7582: ST_TO_ADDR
// hc_name = Platonov ;
7583: LD_ADDR_OWVAR 26
7587: PUSH
7588: LD_STRING Platonov
7590: ST_TO_ADDR
// Platonov = CreateHuman ;
7591: LD_ADDR_EXP 26
7595: PUSH
7596: CALL_OW 44
7600: ST_TO_ADDR
// hc_name =  ;
7601: LD_ADDR_OWVAR 26
7605: PUSH
7606: LD_STRING 
7608: ST_TO_ADDR
// hc_gallery =  ;
7609: LD_ADDR_OWVAR 33
7613: PUSH
7614: LD_STRING 
7616: ST_TO_ADDR
// end ; uc_nation = nation_russian ;
7617: LD_ADDR_OWVAR 21
7621: PUSH
7622: LD_INT 3
7624: ST_TO_ADDR
// Kovaljuk = NewCharacter ( Kovaljuk ) ;
7625: LD_ADDR_EXP 27
7629: PUSH
7630: LD_STRING Kovaljuk
7632: PPUSH
7633: CALL_OW 25
7637: ST_TO_ADDR
// if Kovaljuk then
7638: LD_EXP 27
7642: IFFALSE 7706
// begin SetSkill ( Kovaljuk , skill_combat , 8 ) ;
7644: LD_EXP 27
7648: PPUSH
7649: LD_INT 1
7651: PPUSH
7652: LD_INT 8
7654: PPUSH
7655: CALL_OW 237
// SetSkill ( Kovaljuk , skill_engineering , 10 ) ;
7659: LD_EXP 27
7663: PPUSH
7664: LD_INT 2
7666: PPUSH
7667: LD_INT 10
7669: PPUSH
7670: CALL_OW 237
// SetSkill ( Kovaljuk , skill_mechanical , 4 ) ;
7674: LD_EXP 27
7678: PPUSH
7679: LD_INT 3
7681: PPUSH
7682: LD_INT 4
7684: PPUSH
7685: CALL_OW 237
// SetSkill ( Kovaljuk , skill_scientistic , 3 ) ;
7689: LD_EXP 27
7693: PPUSH
7694: LD_INT 4
7696: PPUSH
7697: LD_INT 3
7699: PPUSH
7700: CALL_OW 237
// end else
7704: GO 7794
// begin hc_sex = sex_male ;
7706: LD_ADDR_OWVAR 27
7710: PUSH
7711: LD_INT 1
7713: ST_TO_ADDR
// hc_class = class_soldier ;
7714: LD_ADDR_OWVAR 28
7718: PUSH
7719: LD_INT 1
7721: ST_TO_ADDR
// hc_skills = [ 8 , 10 , 4 , 3 ] ;
7722: LD_ADDR_OWVAR 31
7726: PUSH
7727: LD_INT 8
7729: PUSH
7730: LD_INT 10
7732: PUSH
7733: LD_INT 4
7735: PUSH
7736: LD_INT 3
7738: PUSH
7739: EMPTY
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
7745: LD_ADDR_OWVAR 29
7749: PUSH
7750: LD_INT 10
7752: PUSH
7753: LD_INT 10
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: ST_TO_ADDR
// hc_name = Kovaljuk ;
7760: LD_ADDR_OWVAR 26
7764: PUSH
7765: LD_STRING Kovaljuk
7767: ST_TO_ADDR
// Kovaljuk = CreateHuman ;
7768: LD_ADDR_EXP 27
7772: PUSH
7773: CALL_OW 44
7777: ST_TO_ADDR
// hc_name =  ;
7778: LD_ADDR_OWVAR 26
7782: PUSH
7783: LD_STRING 
7785: ST_TO_ADDR
// hc_gallery =  ;
7786: LD_ADDR_OWVAR 33
7790: PUSH
7791: LD_STRING 
7793: ST_TO_ADDR
// end ; for Un = 1 to Number_of_russian_soldiers do
7794: LD_ADDR_VAR 0 3
7798: PUSH
7799: DOUBLE
7800: LD_INT 1
7802: DEC
7803: ST_TO_ADDR
7804: LD_EXP 133
7808: PUSH
7809: FOR_TO
7810: IFFALSE 7898
// begin if i in [ 1 , 2 ] then
7812: LD_VAR 0 2
7816: PUSH
7817: LD_INT 1
7819: PUSH
7820: LD_INT 2
7822: PUSH
7823: EMPTY
7824: LIST
7825: LIST
7826: IN
7827: IFFALSE 7843
// PrepareSoldier ( sex_male , human_difficulty_skill ) else
7829: LD_INT 1
7831: PPUSH
7832: LD_EXP 184
7836: PPUSH
7837: CALL_OW 381
7841: GO 7855
// PrepareSoldier ( 0 , human_difficulty_skill ) ;
7843: LD_INT 0
7845: PPUSH
7846: LD_EXP 184
7850: PPUSH
7851: CALL_OW 381
// New_person = CreateHuman ;
7855: LD_ADDR_VAR 0 7
7859: PUSH
7860: CALL_OW 44
7864: ST_TO_ADDR
// Russian_soldiers = Russian_soldiers ^ New_person ;
7865: LD_ADDR_EXP 107
7869: PUSH
7870: LD_EXP 107
7874: PUSH
7875: LD_VAR 0 7
7879: ADD
7880: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_ru_b , false ) ;
7881: LD_VAR 0 7
7885: PPUSH
7886: LD_INT 16
7888: PPUSH
7889: LD_INT 0
7891: PPUSH
7892: CALL_OW 49
// end ;
7896: GO 7809
7898: POP
7899: POP
// for Un = 1 to Number_of_russian_scientists do
7900: LD_ADDR_VAR 0 3
7904: PUSH
7905: DOUBLE
7906: LD_INT 1
7908: DEC
7909: ST_TO_ADDR
7910: LD_EXP 134
7914: PUSH
7915: FOR_TO
7916: IFFALSE 7973
// begin PrepareScientist ( 0 , human_difficulty_skill ) ;
7918: LD_INT 0
7920: PPUSH
7921: LD_EXP 184
7925: PPUSH
7926: CALL_OW 384
// New_person = CreateHuman ;
7930: LD_ADDR_VAR 0 7
7934: PUSH
7935: CALL_OW 44
7939: ST_TO_ADDR
// Russian_scientists = Russian_scientists ^ New_person ;
7940: LD_ADDR_EXP 108
7944: PUSH
7945: LD_EXP 108
7949: PUSH
7950: LD_VAR 0 7
7954: ADD
7955: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_ru_b , false ) ;
7956: LD_VAR 0 7
7960: PPUSH
7961: LD_INT 16
7963: PPUSH
7964: LD_INT 0
7966: PPUSH
7967: CALL_OW 49
// end ;
7971: GO 7915
7973: POP
7974: POP
// for Un = 1 to Number_of_russian_engineers do
7975: LD_ADDR_VAR 0 3
7979: PUSH
7980: DOUBLE
7981: LD_INT 1
7983: DEC
7984: ST_TO_ADDR
7985: LD_EXP 136
7989: PUSH
7990: FOR_TO
7991: IFFALSE 8048
// begin PrepareEngineer ( 0 , human_difficulty_skill ) ;
7993: LD_INT 0
7995: PPUSH
7996: LD_EXP 184
8000: PPUSH
8001: CALL_OW 382
// New_person = CreateHuman ;
8005: LD_ADDR_VAR 0 7
8009: PUSH
8010: CALL_OW 44
8014: ST_TO_ADDR
// Russian_engineers = Russian_engineers ^ New_person ;
8015: LD_ADDR_EXP 109
8019: PUSH
8020: LD_EXP 109
8024: PUSH
8025: LD_VAR 0 7
8029: ADD
8030: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_ru_b , false ) ;
8031: LD_VAR 0 7
8035: PPUSH
8036: LD_INT 16
8038: PPUSH
8039: LD_INT 0
8041: PPUSH
8042: CALL_OW 49
// end ;
8046: GO 7990
8048: POP
8049: POP
// for Un = 1 to Number_of_russian_mechanics do
8050: LD_ADDR_VAR 0 3
8054: PUSH
8055: DOUBLE
8056: LD_INT 1
8058: DEC
8059: ST_TO_ADDR
8060: LD_EXP 135
8064: PUSH
8065: FOR_TO
8066: IFFALSE 8123
// begin PrepareMechanic ( 0 , human_difficulty_skill ) ;
8068: LD_INT 0
8070: PPUSH
8071: LD_EXP 184
8075: PPUSH
8076: CALL_OW 383
// New_person = CreateHuman ;
8080: LD_ADDR_VAR 0 7
8084: PUSH
8085: CALL_OW 44
8089: ST_TO_ADDR
// Russian_Mechanics = Russian_Mechanics ^ New_person ;
8090: LD_ADDR_EXP 110
8094: PUSH
8095: LD_EXP 110
8099: PUSH
8100: LD_VAR 0 7
8104: ADD
8105: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_ru_b , false ) ;
8106: LD_VAR 0 7
8110: PPUSH
8111: LD_INT 16
8113: PPUSH
8114: LD_INT 0
8116: PPUSH
8117: CALL_OW 49
// end ;
8121: GO 8065
8123: POP
8124: POP
// All_russians = Russian_soldiers ^ Russian_scientists ^ Russian_Engineers ^ Russian_mechanics ;
8125: LD_ADDR_EXP 111
8129: PUSH
8130: LD_EXP 107
8134: PUSH
8135: LD_EXP 108
8139: ADD
8140: PUSH
8141: LD_EXP 109
8145: ADD
8146: PUSH
8147: LD_EXP 110
8151: ADD
8152: ST_TO_ADDR
// uc_nation = nation_arabian ;
8153: LD_ADDR_OWVAR 21
8157: PUSH
8158: LD_INT 2
8160: ST_TO_ADDR
// uc_side = arabians1 ;
8161: LD_ADDR_OWVAR 20
8165: PUSH
8166: LD_EXP 181
8170: ST_TO_ADDR
// Omar = NewCharacter ( Omar ) ;
8171: LD_ADDR_EXP 28
8175: PUSH
8176: LD_STRING Omar
8178: PPUSH
8179: CALL_OW 25
8183: ST_TO_ADDR
// if not ( Omar ) then
8184: LD_EXP 28
8188: NOT
8189: IFFALSE 8191
// begin end ; RemoveUnit ( Masto ) ;
8191: LD_INT 147
8193: PPUSH
8194: CALL_OW 64
// PlaceHumanInUnit ( Omar , Masto ) ;
8198: LD_EXP 28
8202: PPUSH
8203: LD_INT 147
8205: PPUSH
8206: CALL_OW 52
// Heike = NewCharacter ( Heike ) ;
8210: LD_ADDR_EXP 29
8214: PUSH
8215: LD_STRING Heike
8217: PPUSH
8218: CALL_OW 25
8222: ST_TO_ADDR
// if Heike then
8223: LD_EXP 29
8227: IFFALSE 8243
// begin SetClass ( Heike , class_mortar ) ;
8229: LD_EXP 29
8233: PPUSH
8234: LD_INT 8
8236: PPUSH
8237: CALL_OW 336
// end else
8241: GO 8243
// begin end ; Omar_Scientists = [ ] ;
8243: LD_ADDR_EXP 73
8247: PUSH
8248: EMPTY
8249: ST_TO_ADDR
// for i = 1 to 2 do
8250: LD_ADDR_VAR 0 2
8254: PUSH
8255: DOUBLE
8256: LD_INT 1
8258: DEC
8259: ST_TO_ADDR
8260: LD_INT 2
8262: PUSH
8263: FOR_TO
8264: IFFALSE 8306
// begin PrepareScientist ( 0 , human_difficulty_skill ) ;
8266: LD_INT 0
8268: PPUSH
8269: LD_EXP 184
8273: PPUSH
8274: CALL_OW 384
// New_Person = CreateHuman ;
8278: LD_ADDR_VAR 0 7
8282: PUSH
8283: CALL_OW 44
8287: ST_TO_ADDR
// Omar_Scientists = Omar_Scientists ^ New_Person ;
8288: LD_ADDR_EXP 73
8292: PUSH
8293: LD_EXP 73
8297: PUSH
8298: LD_VAR 0 7
8302: ADD
8303: ST_TO_ADDR
// end ;
8304: GO 8263
8306: POP
8307: POP
// Omar_Soldiers = [ ] ;
8308: LD_ADDR_EXP 72
8312: PUSH
8313: EMPTY
8314: ST_TO_ADDR
// for i = 1 to Number_Of_Omar_Soldiers do
8315: LD_ADDR_VAR 0 2
8319: PUSH
8320: DOUBLE
8321: LD_INT 1
8323: DEC
8324: ST_TO_ADDR
8325: LD_EXP 75
8329: PUSH
8330: FOR_TO
8331: IFFALSE 8395
// begin PrepareSoldier ( 0 , human_difficulty_skill ) ;
8333: LD_INT 0
8335: PPUSH
8336: LD_EXP 184
8340: PPUSH
8341: CALL_OW 381
// New_Person = CreateHuman ;
8345: LD_ADDR_VAR 0 7
8349: PUSH
8350: CALL_OW 44
8354: ST_TO_ADDR
// if i = 1 then
8355: LD_VAR 0 2
8359: PUSH
8360: LD_INT 1
8362: EQUAL
8363: IFFALSE 8377
// SetClass ( New_Person , class_mortar ) ;
8365: LD_VAR 0 7
8369: PPUSH
8370: LD_INT 8
8372: PPUSH
8373: CALL_OW 336
// Omar_Soldiers = Omar_Soldiers ^ New_Person ;
8377: LD_ADDR_EXP 72
8381: PUSH
8382: LD_EXP 72
8386: PUSH
8387: LD_VAR 0 7
8391: ADD
8392: ST_TO_ADDR
// end ;
8393: GO 8330
8395: POP
8396: POP
// for i = 1 to Number_of_Omar_Hovercrafts do
8397: LD_ADDR_VAR 0 2
8401: PUSH
8402: DOUBLE
8403: LD_INT 1
8405: DEC
8406: ST_TO_ADDR
8407: LD_EXP 76
8411: PUSH
8412: FOR_TO
8413: IFFALSE 8501
// begin uc_side = arabians1 ;
8415: LD_ADDR_OWVAR 20
8419: PUSH
8420: LD_EXP 181
8424: ST_TO_ADDR
// uc_nation = nation_arabian ;
8425: LD_ADDR_OWVAR 21
8429: PUSH
8430: LD_INT 2
8432: ST_TO_ADDR
// uc_direction = 2 ;
8433: LD_ADDR_OWVAR 24
8437: PUSH
8438: LD_INT 2
8440: ST_TO_ADDR
// vc_chassis = ar_hovercraft ;
8441: LD_ADDR_OWVAR 37
8445: PUSH
8446: LD_INT 11
8448: ST_TO_ADDR
// vc_engine = engine_combustion ;
8449: LD_ADDR_OWVAR 39
8453: PUSH
8454: LD_INT 1
8456: ST_TO_ADDR
// vc_control = control_manual ;
8457: LD_ADDR_OWVAR 38
8461: PUSH
8462: LD_INT 1
8464: ST_TO_ADDR
// vc_weapon = ar_double_machine_gun ;
8465: LD_ADDR_OWVAR 40
8469: PUSH
8470: LD_INT 24
8472: ST_TO_ADDR
// New_vehicle = CreateVehicle ;
8473: LD_ADDR_VAR 0 12
8477: PUSH
8478: CALL_OW 45
8482: ST_TO_ADDR
// Omar_vehicles = Omar_vehicles ^ New_vehicle ;
8483: LD_ADDR_EXP 74
8487: PUSH
8488: LD_EXP 74
8492: PUSH
8493: LD_VAR 0 12
8497: ADD
8498: ST_TO_ADDR
// end ;
8499: GO 8412
8501: POP
8502: POP
// for i = 1 to Number_of_Omar_Flamethrowers do
8503: LD_ADDR_VAR 0 2
8507: PUSH
8508: DOUBLE
8509: LD_INT 1
8511: DEC
8512: ST_TO_ADDR
8513: LD_EXP 77
8517: PUSH
8518: FOR_TO
8519: IFFALSE 8581
// begin vc_chassis = ar_half_tracked ;
8521: LD_ADDR_OWVAR 37
8525: PUSH
8526: LD_INT 14
8528: ST_TO_ADDR
// vc_engine = engine_combustion ;
8529: LD_ADDR_OWVAR 39
8533: PUSH
8534: LD_INT 1
8536: ST_TO_ADDR
// vc_control = control_manual ;
8537: LD_ADDR_OWVAR 38
8541: PUSH
8542: LD_INT 1
8544: ST_TO_ADDR
// vc_weapon = ar_flame_thrower ;
8545: LD_ADDR_OWVAR 40
8549: PUSH
8550: LD_INT 26
8552: ST_TO_ADDR
// New_vehicle = CreateVehicle ;
8553: LD_ADDR_VAR 0 12
8557: PUSH
8558: CALL_OW 45
8562: ST_TO_ADDR
// Omar_vehicles = Omar_vehicles ^ New_vehicle ;
8563: LD_ADDR_EXP 74
8567: PUSH
8568: LD_EXP 74
8572: PUSH
8573: LD_VAR 0 12
8577: ADD
8578: ST_TO_ADDR
// end ;
8579: GO 8518
8581: POP
8582: POP
// for i = 1 to Number_of_Omar_RocketLaunchers do
8583: LD_ADDR_VAR 0 2
8587: PUSH
8588: DOUBLE
8589: LD_INT 1
8591: DEC
8592: ST_TO_ADDR
8593: LD_EXP 78
8597: PUSH
8598: FOR_TO
8599: IFFALSE 8661
// begin vc_chassis = ar_half_tracked ;
8601: LD_ADDR_OWVAR 37
8605: PUSH
8606: LD_INT 14
8608: ST_TO_ADDR
// vc_engine = engine_combustion ;
8609: LD_ADDR_OWVAR 39
8613: PUSH
8614: LD_INT 1
8616: ST_TO_ADDR
// vc_control = control_manual ;
8617: LD_ADDR_OWVAR 38
8621: PUSH
8622: LD_INT 1
8624: ST_TO_ADDR
// vc_weapon = ar_rocket_launcher ;
8625: LD_ADDR_OWVAR 40
8629: PUSH
8630: LD_INT 28
8632: ST_TO_ADDR
// New_vehicle = CreateVehicle ;
8633: LD_ADDR_VAR 0 12
8637: PUSH
8638: CALL_OW 45
8642: ST_TO_ADDR
// Omar_vehicles = Omar_vehicles ^ New_vehicle ;
8643: LD_ADDR_EXP 74
8647: PUSH
8648: LD_EXP 74
8652: PUSH
8653: LD_VAR 0 12
8657: ADD
8658: ST_TO_ADDR
// end ;
8659: GO 8598
8661: POP
8662: POP
// for Un in Omar_vehicles do
8663: LD_ADDR_VAR 0 3
8667: PUSH
8668: LD_EXP 74
8672: PUSH
8673: FOR_IN
8674: IFFALSE 8714
// begin PrepareMechanic ( 0 , human_difficulty_skill ) ;
8676: LD_INT 0
8678: PPUSH
8679: LD_EXP 184
8683: PPUSH
8684: CALL_OW 383
// New_Person = CreateHuman ;
8688: LD_ADDR_VAR 0 7
8692: PUSH
8693: CALL_OW 44
8697: ST_TO_ADDR
// PlaceHumanInUnit ( New_Person , Un ) ;
8698: LD_VAR 0 7
8702: PPUSH
8703: LD_VAR 0 3
8707: PPUSH
8708: CALL_OW 52
// end ;
8712: GO 8673
8714: POP
8715: POP
// uc_nation = nation_arabian ;
8716: LD_ADDR_OWVAR 21
8720: PUSH
8721: LD_INT 2
8723: ST_TO_ADDR
// uc_side = arabians ;
8724: LD_ADDR_OWVAR 20
8728: PUSH
8729: LD_EXP 180
8733: ST_TO_ADDR
// Kurt = CreateCharacter ( Kurt ) ;
8734: LD_ADDR_EXP 13
8738: PUSH
8739: LD_STRING Kurt
8741: PPUSH
8742: CALL_OW 34
8746: ST_TO_ADDR
// if Kurt then
8747: LD_EXP 13
8751: IFFALSE 8823
// begin Really_Kurt = true ;
8753: LD_ADDR_EXP 205
8757: PUSH
8758: LD_INT 1
8760: ST_TO_ADDR
// SetSkill ( Kurt , skill_combat , 8 ) ;
8761: LD_EXP 13
8765: PPUSH
8766: LD_INT 1
8768: PPUSH
8769: LD_INT 8
8771: PPUSH
8772: CALL_OW 237
// SetSkill ( Kurt , skill_engineering , 4 ) ;
8776: LD_EXP 13
8780: PPUSH
8781: LD_INT 2
8783: PPUSH
8784: LD_INT 4
8786: PPUSH
8787: CALL_OW 237
// SetSkill ( Kurt , skill_mechanical , 3 ) ;
8791: LD_EXP 13
8795: PPUSH
8796: LD_INT 3
8798: PPUSH
8799: LD_INT 3
8801: PPUSH
8802: CALL_OW 237
// SetSkill ( Kurt , skill_scientistic , 5 ) ;
8806: LD_EXP 13
8810: PPUSH
8811: LD_INT 4
8813: PPUSH
8814: LD_INT 5
8816: PPUSH
8817: CALL_OW 237
// end else
8821: GO 8895
// begin Really_Kurt = false ;
8823: LD_ADDR_EXP 205
8827: PUSH
8828: LD_INT 0
8830: ST_TO_ADDR
// hc_sex = sex_male ;
8831: LD_ADDR_OWVAR 27
8835: PUSH
8836: LD_INT 1
8838: ST_TO_ADDR
// hc_class = class_mechanic ;
8839: LD_ADDR_OWVAR 28
8843: PUSH
8844: LD_INT 3
8846: ST_TO_ADDR
// hc_skills = [ 8 , 4 , 3 , 5 ] ;
8847: LD_ADDR_OWVAR 31
8851: PUSH
8852: LD_INT 8
8854: PUSH
8855: LD_INT 4
8857: PUSH
8858: LD_INT 3
8860: PUSH
8861: LD_INT 5
8863: PUSH
8864: EMPTY
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
8870: LD_ADDR_OWVAR 29
8874: PUSH
8875: LD_INT 10
8877: PUSH
8878: LD_INT 10
8880: PUSH
8881: EMPTY
8882: LIST
8883: LIST
8884: ST_TO_ADDR
// Kurt = CreateHuman ;
8885: LD_ADDR_EXP 13
8889: PUSH
8890: CALL_OW 44
8894: ST_TO_ADDR
// end ; hc_sex = sex_male ;
8895: LD_ADDR_OWVAR 27
8899: PUSH
8900: LD_INT 1
8902: ST_TO_ADDR
// hc_class = class_mechanic ;
8903: LD_ADDR_OWVAR 28
8907: PUSH
8908: LD_INT 3
8910: ST_TO_ADDR
// hc_skills = [ 4 , 2 , 7 , 3 ] ;
8911: LD_ADDR_OWVAR 31
8915: PUSH
8916: LD_INT 4
8918: PUSH
8919: LD_INT 2
8921: PUSH
8922: LD_INT 7
8924: PUSH
8925: LD_INT 3
8927: PUSH
8928: EMPTY
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
8934: LD_ADDR_OWVAR 29
8938: PUSH
8939: LD_INT 10
8941: PUSH
8942: LD_INT 10
8944: PUSH
8945: EMPTY
8946: LIST
8947: LIST
8948: ST_TO_ADDR
// hc_name = Ali Hadarach ;
8949: LD_ADDR_OWVAR 26
8953: PUSH
8954: LD_STRING Ali Hadarach
8956: ST_TO_ADDR
// Friend = CreateHuman ;
8957: LD_ADDR_EXP 21
8961: PUSH
8962: CALL_OW 44
8966: ST_TO_ADDR
// hc_name =  ;
8967: LD_ADDR_OWVAR 26
8971: PUSH
8972: LD_STRING 
8974: ST_TO_ADDR
// uc_nation = nation_russian ;
8975: LD_ADDR_OWVAR 21
8979: PUSH
8980: LD_INT 3
8982: ST_TO_ADDR
// Kozlov = NewCharacter ( Kozlov ) ;
8983: LD_ADDR_EXP 22
8987: PUSH
8988: LD_STRING Kozlov
8990: PPUSH
8991: CALL_OW 25
8995: ST_TO_ADDR
// if Kozlov then
8996: LD_EXP 22
9000: IFFALSE 9064
// begin SetSkill ( Kozlov , skill_combat , 2 ) ;
9002: LD_EXP 22
9006: PPUSH
9007: LD_INT 1
9009: PPUSH
9010: LD_INT 2
9012: PPUSH
9013: CALL_OW 237
// SetSkill ( Kozlov , skill_engineering , 8 ) ;
9017: LD_EXP 22
9021: PPUSH
9022: LD_INT 2
9024: PPUSH
9025: LD_INT 8
9027: PPUSH
9028: CALL_OW 237
// SetSkill ( Kozlov , skill_mechanical , 3 ) ;
9032: LD_EXP 22
9036: PPUSH
9037: LD_INT 3
9039: PPUSH
9040: LD_INT 3
9042: PPUSH
9043: CALL_OW 237
// SetSkill ( Kozlov , skill_scientistic , 10 ) ;
9047: LD_EXP 22
9051: PPUSH
9052: LD_INT 4
9054: PPUSH
9055: LD_INT 10
9057: PPUSH
9058: CALL_OW 237
// end else
9062: GO 9168
// begin hc_gallery = ru ;
9064: LD_ADDR_OWVAR 33
9068: PUSH
9069: LD_STRING ru
9071: ST_TO_ADDR
// hc_face_number = 34 ;
9072: LD_ADDR_OWVAR 34
9076: PUSH
9077: LD_INT 34
9079: ST_TO_ADDR
// hc_sex = sex_male ;
9080: LD_ADDR_OWVAR 27
9084: PUSH
9085: LD_INT 1
9087: ST_TO_ADDR
// hc_class = class_engineer ;
9088: LD_ADDR_OWVAR 28
9092: PUSH
9093: LD_INT 2
9095: ST_TO_ADDR
// hc_skills = [ 2 , 8 , 3 , 10 ] ;
9096: LD_ADDR_OWVAR 31
9100: PUSH
9101: LD_INT 2
9103: PUSH
9104: LD_INT 8
9106: PUSH
9107: LD_INT 3
9109: PUSH
9110: LD_INT 10
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
9119: LD_ADDR_OWVAR 29
9123: PUSH
9124: LD_INT 10
9126: PUSH
9127: LD_INT 10
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: ST_TO_ADDR
// hc_name = Nikita S. Kozlov ;
9134: LD_ADDR_OWVAR 26
9138: PUSH
9139: LD_STRING Nikita S. Kozlov
9141: ST_TO_ADDR
// Kozlov = CreateHuman ;
9142: LD_ADDR_EXP 22
9146: PUSH
9147: CALL_OW 44
9151: ST_TO_ADDR
// hc_name =  ;
9152: LD_ADDR_OWVAR 26
9156: PUSH
9157: LD_STRING 
9159: ST_TO_ADDR
// hc_gallery =  ;
9160: LD_ADDR_OWVAR 33
9164: PUSH
9165: LD_STRING 
9167: ST_TO_ADDR
// end ; uc_nation = nation_arabian ;
9168: LD_ADDR_OWVAR 21
9172: PUSH
9173: LD_INT 2
9175: ST_TO_ADDR
// for Un = 1 to Number_of_Arabian_Soldiers do
9176: LD_ADDR_VAR 0 3
9180: PUSH
9181: DOUBLE
9182: LD_INT 1
9184: DEC
9185: ST_TO_ADDR
9186: LD_EXP 89
9190: PUSH
9191: FOR_TO
9192: IFFALSE 9292
// begin if i in [ 1 , 2 , 3 ] then
9194: LD_VAR 0 2
9198: PUSH
9199: LD_INT 1
9201: PUSH
9202: LD_INT 2
9204: PUSH
9205: LD_INT 3
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: LIST
9212: IN
9213: IFFALSE 9233
// PrepareSoldier ( sex_male , human_difficulty_skill - 1 ) else
9215: LD_INT 1
9217: PPUSH
9218: LD_EXP 184
9222: PUSH
9223: LD_INT 1
9225: MINUS
9226: PPUSH
9227: CALL_OW 381
9231: GO 9249
// PrepareSoldier ( 0 , human_difficulty_skill - 1 ) ;
9233: LD_INT 0
9235: PPUSH
9236: LD_EXP 184
9240: PUSH
9241: LD_INT 1
9243: MINUS
9244: PPUSH
9245: CALL_OW 381
// New_person = CreateHuman ;
9249: LD_ADDR_VAR 0 7
9253: PUSH
9254: CALL_OW 44
9258: ST_TO_ADDR
// Arabian_soldiers = Arabian_soldiers ^ New_person ;
9259: LD_ADDR_EXP 80
9263: PUSH
9264: LD_EXP 80
9268: PUSH
9269: LD_VAR 0 7
9273: ADD
9274: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_ar_b , false ) ;
9275: LD_VAR 0 7
9279: PPUSH
9280: LD_INT 14
9282: PPUSH
9283: LD_INT 0
9285: PPUSH
9286: CALL_OW 49
// end ;
9290: GO 9191
9292: POP
9293: POP
// for Un = 1 to Number_of_Arabian_Engineers do
9294: LD_ADDR_VAR 0 3
9298: PUSH
9299: DOUBLE
9300: LD_INT 1
9302: DEC
9303: ST_TO_ADDR
9304: LD_EXP 92
9308: PUSH
9309: FOR_TO
9310: IFFALSE 9410
// begin PrepareEngineer ( 0 , human_difficulty_skill ) ;
9312: LD_INT 0
9314: PPUSH
9315: LD_EXP 184
9319: PPUSH
9320: CALL_OW 382
// New_person = CreateHuman ;
9324: LD_ADDR_VAR 0 7
9328: PUSH
9329: CALL_OW 44
9333: ST_TO_ADDR
// SetSkill ( New_person , class_engineer , human_difficulty_skill ) ;
9334: LD_VAR 0 7
9338: PPUSH
9339: LD_INT 2
9341: PPUSH
9342: LD_EXP 184
9346: PPUSH
9347: CALL_OW 237
// Arabian_Engineers = Arabian_Engineers ^ New_person ;
9351: LD_ADDR_EXP 81
9355: PUSH
9356: LD_EXP 81
9360: PUSH
9361: LD_VAR 0 7
9365: ADD
9366: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_ar_b , false ) ;
9367: LD_VAR 0 7
9371: PPUSH
9372: LD_INT 14
9374: PPUSH
9375: LD_INT 0
9377: PPUSH
9378: CALL_OW 49
// ComEnterUnit ( New_person , ArDep2 ) ;
9382: LD_VAR 0 7
9386: PPUSH
9387: LD_INT 99
9389: PPUSH
9390: CALL_OW 120
// DoNotAttack ( americans1 , New_person ) ;
9394: LD_EXP 177
9398: PPUSH
9399: LD_VAR 0 7
9403: PPUSH
9404: CALL_OW 471
// end ;
9408: GO 9309
9410: POP
9411: POP
// for Un = 1 to Number_of_Arabian_Mechanics do
9412: LD_ADDR_VAR 0 3
9416: PUSH
9417: DOUBLE
9418: LD_INT 1
9420: DEC
9421: ST_TO_ADDR
9422: LD_EXP 91
9426: PUSH
9427: FOR_TO
9428: IFFALSE 9497
// begin PrepareMechanic ( 0 , human_difficulty_skill ) ;
9430: LD_INT 0
9432: PPUSH
9433: LD_EXP 184
9437: PPUSH
9438: CALL_OW 383
// New_person = CreateHuman ;
9442: LD_ADDR_VAR 0 7
9446: PUSH
9447: CALL_OW 44
9451: ST_TO_ADDR
// Arabian_mechanics = Arabian_mechanics ^ New_person ;
9452: LD_ADDR_EXP 83
9456: PUSH
9457: LD_EXP 83
9461: PUSH
9462: LD_VAR 0 7
9466: ADD
9467: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_ar_b , false ) ;
9468: LD_VAR 0 7
9472: PPUSH
9473: LD_INT 14
9475: PPUSH
9476: LD_INT 0
9478: PPUSH
9479: CALL_OW 49
// ComEnterUnit ( New_person , ArFact ) ;
9483: LD_VAR 0 7
9487: PPUSH
9488: LD_INT 117
9490: PPUSH
9491: CALL_OW 120
// end ;
9495: GO 9427
9497: POP
9498: POP
// PrepareMechanic ( 0 , human_difficulty_skill ) ;
9499: LD_INT 0
9501: PPUSH
9502: LD_EXP 184
9506: PPUSH
9507: CALL_OW 383
// New_person = CreateHuman ;
9511: LD_ADDR_VAR 0 7
9515: PUSH
9516: CALL_OW 44
9520: ST_TO_ADDR
// Control_Driver = New_person ;
9521: LD_ADDR_EXP 85
9525: PUSH
9526: LD_VAR 0 7
9530: ST_TO_ADDR
// PlaceUnitArea ( Control_Driver , Center_ar_b , false ) ;
9531: LD_EXP 85
9535: PPUSH
9536: LD_INT 14
9538: PPUSH
9539: LD_INT 0
9541: PPUSH
9542: CALL_OW 49
// SetSkill ( Control_Driver , class_mechanic , 3 ) ;
9546: LD_EXP 85
9550: PPUSH
9551: LD_INT 3
9553: PPUSH
9554: LD_INT 3
9556: PPUSH
9557: CALL_OW 237
// RaiseSailEvent ( Link_Bombs ) ;
9561: LD_EXP 175
9565: PPUSH
9566: CALL_OW 427
// for Un = 1 to Number_of_Arabian_Scientists do
9570: LD_ADDR_VAR 0 3
9574: PUSH
9575: DOUBLE
9576: LD_INT 1
9578: DEC
9579: ST_TO_ADDR
9580: LD_EXP 90
9584: PUSH
9585: FOR_TO
9586: IFFALSE 9643
// begin PrepareScientist ( 0 , human_difficulty_skill ) ;
9588: LD_INT 0
9590: PPUSH
9591: LD_EXP 184
9595: PPUSH
9596: CALL_OW 384
// New_person = CreateHuman ;
9600: LD_ADDR_VAR 0 7
9604: PUSH
9605: CALL_OW 44
9609: ST_TO_ADDR
// Arabian_scientists = Arabian_scientists ^ New_person ;
9610: LD_ADDR_EXP 82
9614: PUSH
9615: LD_EXP 82
9619: PUSH
9620: LD_VAR 0 7
9624: ADD
9625: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_ar_b , false ) ;
9626: LD_VAR 0 7
9630: PPUSH
9631: LD_INT 14
9633: PPUSH
9634: LD_INT 0
9636: PPUSH
9637: CALL_OW 49
// end ;
9641: GO 9585
9643: POP
9644: POP
// uc_nation = nation_nature ;
9645: LD_ADDR_OWVAR 21
9649: PUSH
9650: LD_INT 0
9652: ST_TO_ADDR
// for Un = 1 to 4 do
9653: LD_ADDR_VAR 0 3
9657: PUSH
9658: DOUBLE
9659: LD_INT 1
9661: DEC
9662: ST_TO_ADDR
9663: LD_INT 4
9665: PUSH
9666: FOR_TO
9667: IFFALSE 9830
// begin PrepareSoldier ( 0 , apeman_difficulty_skill ) ;
9669: LD_INT 0
9671: PPUSH
9672: LD_EXP 185
9676: PPUSH
9677: CALL_OW 381
// hc_class = class_apeman_soldier ;
9681: LD_ADDR_OWVAR 28
9685: PUSH
9686: LD_INT 15
9688: ST_TO_ADDR
// New_person = CreateHuman ;
9689: LD_ADDR_VAR 0 7
9693: PUSH
9694: CALL_OW 44
9698: ST_TO_ADDR
// Arabian_apemens = Arabian_apemens ^ New_person ;
9699: LD_ADDR_EXP 84
9703: PUSH
9704: LD_EXP 84
9708: PUSH
9709: LD_VAR 0 7
9713: ADD
9714: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_ar_b , false ) ;
9715: LD_VAR 0 7
9719: PPUSH
9720: LD_INT 14
9722: PPUSH
9723: LD_INT 0
9725: PPUSH
9726: CALL_OW 49
// case Un of 1 :
9730: LD_VAR 0 3
9734: PUSH
9735: LD_INT 1
9737: DOUBLE
9738: EQUAL
9739: IFTRUE 9743
9741: GO 9758
9743: POP
// ComEnterUnit ( New_person , ArRad1 ) ; 2 :
9744: LD_VAR 0 7
9748: PPUSH
9749: LD_INT 97
9751: PPUSH
9752: CALL_OW 120
9756: GO 9828
9758: LD_INT 2
9760: DOUBLE
9761: EQUAL
9762: IFTRUE 9766
9764: GO 9781
9766: POP
// ComEnterUnit ( New_person , ArRad2 ) ; 3 :
9767: LD_VAR 0 7
9771: PPUSH
9772: LD_INT 88
9774: PPUSH
9775: CALL_OW 120
9779: GO 9828
9781: LD_INT 3
9783: DOUBLE
9784: EQUAL
9785: IFTRUE 9789
9787: GO 9804
9789: POP
// ComEnterUnit ( New_person , ArRad3 ) ; 4 :
9790: LD_VAR 0 7
9794: PPUSH
9795: LD_INT 98
9797: PPUSH
9798: CALL_OW 120
9802: GO 9828
9804: LD_INT 4
9806: DOUBLE
9807: EQUAL
9808: IFTRUE 9812
9810: GO 9827
9812: POP
// ComEnterUnit ( New_person , ArRad4 ) ; end ;
9813: LD_VAR 0 7
9817: PPUSH
9818: LD_INT 127
9820: PPUSH
9821: CALL_OW 120
9825: GO 9828
9827: POP
// end ;
9828: GO 9666
9830: POP
9831: POP
// All_arabians = Arabian_soldiers ^ Arabian_scientists ^ Arabian_apemens ^ Control_Driver ;
9832: LD_ADDR_EXP 79
9836: PUSH
9837: LD_EXP 80
9841: PUSH
9842: LD_EXP 82
9846: ADD
9847: PUSH
9848: LD_EXP 84
9852: ADD
9853: PUSH
9854: LD_EXP 85
9858: ADD
9859: ST_TO_ADDR
// uc_side = alliance ;
9860: LD_ADDR_OWVAR 20
9864: PUSH
9865: LD_EXP 182
9869: ST_TO_ADDR
// uc_nation = nation_american ;
9870: LD_ADDR_OWVAR 21
9874: PUSH
9875: LD_INT 1
9877: ST_TO_ADDR
// Roth = NewCharacter ( Roth ) ;
9878: LD_ADDR_EXP 20
9882: PUSH
9883: LD_STRING Roth
9885: PPUSH
9886: CALL_OW 25
9890: ST_TO_ADDR
// if not Roth then
9891: LD_EXP 20
9895: NOT
9896: IFFALSE 9913
// BuildQuery ( Error: Roth not found!!! , [ OK ] ) else
9898: LD_STRING Error: Roth not found!!!
9900: PPUSH
9901: LD_STRING OK
9903: PUSH
9904: EMPTY
9905: LIST
9906: PPUSH
9907: CALL_OW 99
9911: GO 9958
// begin PlaceUnitArea ( Roth , Center_al_b , false ) ;
9913: LD_EXP 20
9917: PPUSH
9918: LD_INT 15
9920: PPUSH
9921: LD_INT 0
9923: PPUSH
9924: CALL_OW 49
// ComMoveXY ( Roth , 249 , 187 ) ;
9928: LD_EXP 20
9932: PPUSH
9933: LD_INT 249
9935: PPUSH
9936: LD_INT 187
9938: PPUSH
9939: CALL_OW 111
// AddComTurnXY ( Roth , 245 , 187 ) ;
9943: LD_EXP 20
9947: PPUSH
9948: LD_INT 245
9950: PPUSH
9951: LD_INT 187
9953: PPUSH
9954: CALL_OW 178
// end ; Simms = CreateCharacter ( Simms ) ;
9958: LD_ADDR_EXP 16
9962: PUSH
9963: LD_STRING Simms
9965: PPUSH
9966: CALL_OW 34
9970: ST_TO_ADDR
// if not ( Simms ) then
9971: LD_EXP 16
9975: NOT
9976: IFFALSE 9998
// begin PrepareScientist ( sex_female , 7 ) ;
9978: LD_INT 2
9980: PPUSH
9981: LD_INT 7
9983: PPUSH
9984: CALL_OW 384
// Simms = CreateHuman ;
9988: LD_ADDR_EXP 16
9992: PUSH
9993: CALL_OW 44
9997: ST_TO_ADDR
// end ; PlaceUnitArea ( Simms , Center_al_b , false ) ;
9998: LD_EXP 16
10002: PPUSH
10003: LD_INT 15
10005: PPUSH
10006: LD_INT 0
10008: PPUSH
10009: CALL_OW 49
// ComMoveXY ( Simms , 243 , 187 ) ;
10013: LD_EXP 16
10017: PPUSH
10018: LD_INT 243
10020: PPUSH
10021: LD_INT 187
10023: PPUSH
10024: CALL_OW 111
// AddComTurnXY ( Simms , 245 , 187 ) ;
10028: LD_EXP 16
10032: PPUSH
10033: LD_INT 245
10035: PPUSH
10036: LD_INT 187
10038: PPUSH
10039: CALL_OW 178
// uc_side = alliance ;
10043: LD_ADDR_OWVAR 20
10047: PUSH
10048: LD_EXP 182
10052: ST_TO_ADDR
// uc_nation = nation_american ;
10053: LD_ADDR_OWVAR 21
10057: PUSH
10058: LD_INT 1
10060: ST_TO_ADDR
// Alliance_am_soldiers = [ ] ;
10061: LD_ADDR_EXP 95
10065: PUSH
10066: EMPTY
10067: ST_TO_ADDR
// for Un = 1 to Number_of_AllAm_Soldiers do
10068: LD_ADDR_VAR 0 3
10072: PUSH
10073: DOUBLE
10074: LD_INT 1
10076: DEC
10077: ST_TO_ADDR
10078: LD_EXP 103
10082: PUSH
10083: FOR_TO
10084: IFFALSE 10141
// begin PrepareSoldier ( 0 , human_difficulty_skill ) ;
10086: LD_INT 0
10088: PPUSH
10089: LD_EXP 184
10093: PPUSH
10094: CALL_OW 381
// New_person = CreateHuman ;
10098: LD_ADDR_VAR 0 7
10102: PUSH
10103: CALL_OW 44
10107: ST_TO_ADDR
// Alliance_am_soldiers = Alliance_am_soldiers ^ New_person ;
10108: LD_ADDR_EXP 95
10112: PUSH
10113: LD_EXP 95
10117: PUSH
10118: LD_VAR 0 7
10122: ADD
10123: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_al_b , false ) ;
10124: LD_VAR 0 7
10128: PPUSH
10129: LD_INT 15
10131: PPUSH
10132: LD_INT 0
10134: PPUSH
10135: CALL_OW 49
// end ;
10139: GO 10083
10141: POP
10142: POP
// uc_side = alliance ;
10143: LD_ADDR_OWVAR 20
10147: PUSH
10148: LD_EXP 182
10152: ST_TO_ADDR
// uc_nation = nation_american ;
10153: LD_ADDR_OWVAR 21
10157: PUSH
10158: LD_INT 1
10160: ST_TO_ADDR
// Alliance_am_scientists = [ ] ;
10161: LD_ADDR_EXP 97
10165: PUSH
10166: EMPTY
10167: ST_TO_ADDR
// for Un = 1 to Number_of_AllAm_Scientists do
10168: LD_ADDR_VAR 0 3
10172: PUSH
10173: DOUBLE
10174: LD_INT 1
10176: DEC
10177: ST_TO_ADDR
10178: LD_EXP 104
10182: PUSH
10183: FOR_TO
10184: IFFALSE 10241
// begin PrepareScientist ( 0 , human_difficulty_skill ) ;
10186: LD_INT 0
10188: PPUSH
10189: LD_EXP 184
10193: PPUSH
10194: CALL_OW 384
// New_person = CreateHuman ;
10198: LD_ADDR_VAR 0 7
10202: PUSH
10203: CALL_OW 44
10207: ST_TO_ADDR
// Alliance_am_scientists = Alliance_am_scientists ^ New_person ;
10208: LD_ADDR_EXP 97
10212: PUSH
10213: LD_EXP 97
10217: PUSH
10218: LD_VAR 0 7
10222: ADD
10223: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_al_b , false ) ;
10224: LD_VAR 0 7
10228: PPUSH
10229: LD_INT 15
10231: PPUSH
10232: LD_INT 0
10234: PPUSH
10235: CALL_OW 49
// end ;
10239: GO 10183
10241: POP
10242: POP
// uc_side = alliance ;
10243: LD_ADDR_OWVAR 20
10247: PUSH
10248: LD_EXP 182
10252: ST_TO_ADDR
// uc_nation = nation_russian ;
10253: LD_ADDR_OWVAR 21
10257: PUSH
10258: LD_INT 3
10260: ST_TO_ADDR
// Alliance_rus_soldiers = [ ] ;
10261: LD_ADDR_EXP 94
10265: PUSH
10266: EMPTY
10267: ST_TO_ADDR
// for Un = 1 to Number_of_AllRu_Soldiers do
10268: LD_ADDR_VAR 0 3
10272: PUSH
10273: DOUBLE
10274: LD_INT 1
10276: DEC
10277: ST_TO_ADDR
10278: LD_EXP 105
10282: PUSH
10283: FOR_TO
10284: IFFALSE 10341
// begin PrepareSoldier ( 0 , human_difficulty_skill ) ;
10286: LD_INT 0
10288: PPUSH
10289: LD_EXP 184
10293: PPUSH
10294: CALL_OW 381
// New_person = CreateHuman ;
10298: LD_ADDR_VAR 0 7
10302: PUSH
10303: CALL_OW 44
10307: ST_TO_ADDR
// Alliance_rus_soldiers = Alliance_rus_soldiers ^ New_person ;
10308: LD_ADDR_EXP 94
10312: PUSH
10313: LD_EXP 94
10317: PUSH
10318: LD_VAR 0 7
10322: ADD
10323: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_al_b , false ) ;
10324: LD_VAR 0 7
10328: PPUSH
10329: LD_INT 15
10331: PPUSH
10332: LD_INT 0
10334: PPUSH
10335: CALL_OW 49
// end ;
10339: GO 10283
10341: POP
10342: POP
// uc_side = alliance ;
10343: LD_ADDR_OWVAR 20
10347: PUSH
10348: LD_EXP 182
10352: ST_TO_ADDR
// uc_nation = nation_russian ;
10353: LD_ADDR_OWVAR 21
10357: PUSH
10358: LD_INT 3
10360: ST_TO_ADDR
// Alliance_rus_scientists = [ ] ;
10361: LD_ADDR_EXP 96
10365: PUSH
10366: EMPTY
10367: ST_TO_ADDR
// for Un = 1 to Number_of_AllRu_Scientists do
10368: LD_ADDR_VAR 0 3
10372: PUSH
10373: DOUBLE
10374: LD_INT 1
10376: DEC
10377: ST_TO_ADDR
10378: LD_EXP 106
10382: PUSH
10383: FOR_TO
10384: IFFALSE 10441
// begin PrepareScientist ( 0 , human_difficulty_skill ) ;
10386: LD_INT 0
10388: PPUSH
10389: LD_EXP 184
10393: PPUSH
10394: CALL_OW 384
// New_person = CreateHuman ;
10398: LD_ADDR_VAR 0 7
10402: PUSH
10403: CALL_OW 44
10407: ST_TO_ADDR
// Alliance_rus_scientists = Alliance_rus_scientists ^ New_person ;
10408: LD_ADDR_EXP 96
10412: PUSH
10413: LD_EXP 96
10417: PUSH
10418: LD_VAR 0 7
10422: ADD
10423: ST_TO_ADDR
// PlaceUnitArea ( New_person , Center_al_b , false ) ;
10424: LD_VAR 0 7
10428: PPUSH
10429: LD_INT 15
10431: PPUSH
10432: LD_INT 0
10434: PPUSH
10435: CALL_OW 49
// end ;
10439: GO 10383
10441: POP
10442: POP
// uc_side = russians1 ;
10443: LD_ADDR_OWVAR 20
10447: PUSH
10448: LD_EXP 179
10452: ST_TO_ADDR
// uc_nation = nation_russian ;
10453: LD_ADDR_OWVAR 21
10457: PUSH
10458: LD_INT 3
10460: ST_TO_ADDR
// Vsevolod = NewCharacter ( Vsevolod ) ;
10461: LD_ADDR_EXP 25
10465: PUSH
10466: LD_STRING Vsevolod
10468: PPUSH
10469: CALL_OW 25
10473: ST_TO_ADDR
// if Vsevolod then
10474: LD_EXP 25
10478: IFFALSE 10554
// begin SetSkill ( Vsevolod , skill_combat , 6 ) ;
10480: LD_EXP 25
10484: PPUSH
10485: LD_INT 1
10487: PPUSH
10488: LD_INT 6
10490: PPUSH
10491: CALL_OW 237
// SetSkill ( Vsevolod , skill_engineering , 4 ) ;
10495: LD_EXP 25
10499: PPUSH
10500: LD_INT 2
10502: PPUSH
10503: LD_INT 4
10505: PPUSH
10506: CALL_OW 237
// SetSkill ( Vsevolod , skill_mechanical , 10 ) ;
10510: LD_EXP 25
10514: PPUSH
10515: LD_INT 3
10517: PPUSH
10518: LD_INT 10
10520: PPUSH
10521: CALL_OW 237
// SetSkill ( Vsevolod , skill_scientistic , 2 ) ;
10525: LD_EXP 25
10529: PPUSH
10530: LD_INT 4
10532: PPUSH
10533: LD_INT 2
10535: PPUSH
10536: CALL_OW 237
// SetClass ( Vsevolod , class_mechanic ) ;
10540: LD_EXP 25
10544: PPUSH
10545: LD_INT 3
10547: PPUSH
10548: CALL_OW 336
// end else
10552: GO 10642
// begin hc_sex = sex_male ;
10554: LD_ADDR_OWVAR 27
10558: PUSH
10559: LD_INT 1
10561: ST_TO_ADDR
// hc_class = class_mechanic ;
10562: LD_ADDR_OWVAR 28
10566: PUSH
10567: LD_INT 3
10569: ST_TO_ADDR
// hc_skills = [ 6 , 4 , 10 , 2 ] ;
10570: LD_ADDR_OWVAR 31
10574: PUSH
10575: LD_INT 6
10577: PUSH
10578: LD_INT 4
10580: PUSH
10581: LD_INT 10
10583: PUSH
10584: LD_INT 2
10586: PUSH
10587: EMPTY
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
10593: LD_ADDR_OWVAR 29
10597: PUSH
10598: LD_INT 10
10600: PUSH
10601: LD_INT 10
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: ST_TO_ADDR
// hc_name = Vsevolod I. Gorki ;
10608: LD_ADDR_OWVAR 26
10612: PUSH
10613: LD_STRING Vsevolod I. Gorki
10615: ST_TO_ADDR
// Vsevolod = CreateHuman ;
10616: LD_ADDR_EXP 25
10620: PUSH
10621: CALL_OW 44
10625: ST_TO_ADDR
// hc_name =  ;
10626: LD_ADDR_OWVAR 26
10630: PUSH
10631: LD_STRING 
10633: ST_TO_ADDR
// hc_gallery =  ;
10634: LD_ADDR_OWVAR 33
10638: PUSH
10639: LD_STRING 
10641: ST_TO_ADDR
// end ; RevealFogArea ( americans , way ) ;
10642: LD_EXP 176
10646: PPUSH
10647: LD_INT 22
10649: PPUSH
10650: CALL_OW 332
// uc_side = americans ;
10654: LD_ADDR_OWVAR 20
10658: PUSH
10659: LD_EXP 176
10663: ST_TO_ADDR
// uc_nation = nation_american ;
10664: LD_ADDR_OWVAR 21
10668: PUSH
10669: LD_INT 1
10671: ST_TO_ADDR
// uc_direction = 6 ;
10672: LD_ADDR_OWVAR 24
10676: PUSH
10677: LD_INT 6
10679: ST_TO_ADDR
// if Initial_JMM_vehicle <> 0 then
10680: LD_EXP 39
10684: PUSH
10685: LD_INT 0
10687: NONEQUAL
10688: IFFALSE 10748
// begin vc_chassis = Initial_JMM_vehicle [ 1 ] ;
10690: LD_ADDR_OWVAR 37
10694: PUSH
10695: LD_EXP 39
10699: PUSH
10700: LD_INT 1
10702: ARRAY
10703: ST_TO_ADDR
// vc_engine = Initial_JMM_vehicle [ 2 ] ;
10704: LD_ADDR_OWVAR 39
10708: PUSH
10709: LD_EXP 39
10713: PUSH
10714: LD_INT 2
10716: ARRAY
10717: ST_TO_ADDR
// vc_control = Initial_JMM_vehicle [ 3 ] ;
10718: LD_ADDR_OWVAR 38
10722: PUSH
10723: LD_EXP 39
10727: PUSH
10728: LD_INT 3
10730: ARRAY
10731: ST_TO_ADDR
// vc_weapon = Initial_JMM_vehicle [ 4 ] ;
10732: LD_ADDR_OWVAR 40
10736: PUSH
10737: LD_EXP 39
10741: PUSH
10742: LD_INT 4
10744: ARRAY
10745: ST_TO_ADDR
// end else
10746: GO 10780
// begin vc_chassis = us_medium_tracked ;
10748: LD_ADDR_OWVAR 37
10752: PUSH
10753: LD_INT 3
10755: ST_TO_ADDR
// vc_engine = engine_siberite ;
10756: LD_ADDR_OWVAR 39
10760: PUSH
10761: LD_INT 3
10763: ST_TO_ADDR
// vc_control = control_manual ;
10764: LD_ADDR_OWVAR 38
10768: PUSH
10769: LD_INT 1
10771: ST_TO_ADDR
// vc_weapon = us_light_gun ;
10772: LD_ADDR_OWVAR 40
10776: PUSH
10777: LD_INT 3
10779: ST_TO_ADDR
// end ; JMM_veh = CreateVehicle ;
10780: LD_ADDR_EXP 57
10784: PUSH
10785: CALL_OW 45
10789: ST_TO_ADDR
// SetFuel ( Jmm_veh , 100 ) ;
10790: LD_EXP 57
10794: PPUSH
10795: LD_INT 100
10797: PPUSH
10798: CALL_OW 240
// PlaceHumanInUnit ( JMM , JMM_veh ) ;
10802: LD_EXP 1
10806: PPUSH
10807: LD_EXP 57
10811: PPUSH
10812: CALL_OW 52
// PlaceUnitXY ( JMM_veh , 100 , 151 , false ) ;
10816: LD_EXP 57
10820: PPUSH
10821: LD_INT 100
10823: PPUSH
10824: LD_INT 151
10826: PPUSH
10827: LD_INT 0
10829: PPUSH
10830: CALL_OW 48
// if woman_alive then
10834: LD_EXP 38
10838: IFFALSE 10873
// JMM_woman = [ Joan , Lisa , Coonie ] [ Woman_in_am14 ] else
10840: LD_ADDR_EXP 37
10844: PUSH
10845: LD_EXP 12
10849: PUSH
10850: LD_EXP 5
10854: PUSH
10855: LD_EXP 18
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: LIST
10864: PUSH
10865: LD_EXP 36
10869: ARRAY
10870: ST_TO_ADDR
10871: GO 10881
// JMM_Woman = 0 ;
10873: LD_ADDR_EXP 37
10877: PUSH
10878: LD_INT 0
10880: ST_TO_ADDR
// if woman_saved then
10881: LD_EXP 34
10885: IFFALSE 11055
// begin if Initial_Woman_vehicle <> 0 then
10887: LD_EXP 40
10891: PUSH
10892: LD_INT 0
10894: NONEQUAL
10895: IFFALSE 10955
// begin vc_chassis = Initial_Woman_vehicle [ 1 ] ;
10897: LD_ADDR_OWVAR 37
10901: PUSH
10902: LD_EXP 40
10906: PUSH
10907: LD_INT 1
10909: ARRAY
10910: ST_TO_ADDR
// vc_engine = Initial_Woman_vehicle [ 2 ] ;
10911: LD_ADDR_OWVAR 39
10915: PUSH
10916: LD_EXP 40
10920: PUSH
10921: LD_INT 2
10923: ARRAY
10924: ST_TO_ADDR
// vc_control = Initial_Woman_vehicle [ 3 ] ;
10925: LD_ADDR_OWVAR 38
10929: PUSH
10930: LD_EXP 40
10934: PUSH
10935: LD_INT 3
10937: ARRAY
10938: ST_TO_ADDR
// vc_weapon = Initial_Woman_vehicle [ 4 ] ;
10939: LD_ADDR_OWVAR 40
10943: PUSH
10944: LD_EXP 40
10948: PUSH
10949: LD_INT 4
10951: ARRAY
10952: ST_TO_ADDR
// end else
10953: GO 10987
// begin vc_chassis = us_medium_tracked ;
10955: LD_ADDR_OWVAR 37
10959: PUSH
10960: LD_INT 3
10962: ST_TO_ADDR
// vc_engine = engine_siberite ;
10963: LD_ADDR_OWVAR 39
10967: PUSH
10968: LD_INT 3
10970: ST_TO_ADDR
// vc_control = control_manual ;
10971: LD_ADDR_OWVAR 38
10975: PUSH
10976: LD_INT 1
10978: ST_TO_ADDR
// vc_weapon = us_light_gun ;
10979: LD_ADDR_OWVAR 40
10983: PUSH
10984: LD_INT 3
10986: ST_TO_ADDR
// end ; Woman_veh = CreateVehicle ;
10987: LD_ADDR_EXP 58
10991: PUSH
10992: CALL_OW 45
10996: ST_TO_ADDR
// SetFuel ( Woman_veh , 100 ) ;
10997: LD_EXP 58
11001: PPUSH
11002: LD_INT 100
11004: PPUSH
11005: CALL_OW 240
// SetSide ( JMM_woman , americans ) ;
11009: LD_EXP 37
11013: PPUSH
11014: LD_EXP 176
11018: PPUSH
11019: CALL_OW 235
// PlaceHumanInUnit ( JMM_woman , Woman_veh ) ;
11023: LD_EXP 37
11027: PPUSH
11028: LD_EXP 58
11032: PPUSH
11033: CALL_OW 52
// PlaceUnitXY ( Woman_veh , 101 , 156 , false ) ;
11037: LD_EXP 58
11041: PPUSH
11042: LD_INT 101
11044: PPUSH
11045: LD_INT 156
11047: PPUSH
11048: LD_INT 0
11050: PPUSH
11051: CALL_OW 48
// end ; end ;
11055: LD_VAR 0 1
11059: RET
// function Set_marks ; begin
11060: LD_INT 0
11062: PPUSH
// end ;
11063: LD_VAR 0 1
11067: RET
// function Set_attitudes ; begin
11068: LD_INT 0
11070: PPUSH
// SetAttitude ( americans , americans1 , att_friend , true ) ;
11071: LD_EXP 176
11075: PPUSH
11076: LD_EXP 177
11080: PPUSH
11081: LD_INT 1
11083: PPUSH
11084: LD_INT 1
11086: PPUSH
11087: CALL_OW 80
// SetAttitude ( russians , russians1 , att_friend , true ) ;
11091: LD_EXP 178
11095: PPUSH
11096: LD_EXP 179
11100: PPUSH
11101: LD_INT 1
11103: PPUSH
11104: LD_INT 1
11106: PPUSH
11107: CALL_OW 80
// SetAttitude ( arabians , arabians1 , att_friend , true ) ;
11111: LD_EXP 180
11115: PPUSH
11116: LD_EXP 181
11120: PPUSH
11121: LD_INT 1
11123: PPUSH
11124: LD_INT 1
11126: PPUSH
11127: CALL_OW 80
// SetAttitude ( arabians , russians , att_neutral , true ) ;
11131: LD_EXP 180
11135: PPUSH
11136: LD_EXP 178
11140: PPUSH
11141: LD_INT 0
11143: PPUSH
11144: LD_INT 1
11146: PPUSH
11147: CALL_OW 80
// SetAttitude ( arabians , russians1 , att_neutral , true ) ;
11151: LD_EXP 180
11155: PPUSH
11156: LD_EXP 179
11160: PPUSH
11161: LD_INT 0
11163: PPUSH
11164: LD_INT 1
11166: PPUSH
11167: CALL_OW 80
// SetAttitude ( arabians , alliance , att_neutral , true ) ;
11171: LD_EXP 180
11175: PPUSH
11176: LD_EXP 182
11180: PPUSH
11181: LD_INT 0
11183: PPUSH
11184: LD_INT 1
11186: PPUSH
11187: CALL_OW 80
// SetAttitude ( russians , alliance , att_neutral , true ) ;
11191: LD_EXP 178
11195: PPUSH
11196: LD_EXP 182
11200: PPUSH
11201: LD_INT 0
11203: PPUSH
11204: LD_INT 1
11206: PPUSH
11207: CALL_OW 80
// SetAttitude ( russians1 , alliance , att_neutral , true ) ;
11211: LD_EXP 179
11215: PPUSH
11216: LD_EXP 182
11220: PPUSH
11221: LD_INT 0
11223: PPUSH
11224: LD_INT 1
11226: PPUSH
11227: CALL_OW 80
// SetAttitude ( americans , russians , att_enemy , true ) ;
11231: LD_EXP 176
11235: PPUSH
11236: LD_EXP 178
11240: PPUSH
11241: LD_INT 2
11243: PPUSH
11244: LD_INT 1
11246: PPUSH
11247: CALL_OW 80
// SetAttitude ( americans , arabians , att_enemy , true ) ;
11251: LD_EXP 176
11255: PPUSH
11256: LD_EXP 180
11260: PPUSH
11261: LD_INT 2
11263: PPUSH
11264: LD_INT 1
11266: PPUSH
11267: CALL_OW 80
// SetAttitude ( americans , alliance , att_enemy , true ) ;
11271: LD_EXP 176
11275: PPUSH
11276: LD_EXP 182
11280: PPUSH
11281: LD_INT 2
11283: PPUSH
11284: LD_INT 1
11286: PPUSH
11287: CALL_OW 80
// SetAttitude ( americans1 , russians , att_enemy , true ) ;
11291: LD_EXP 177
11295: PPUSH
11296: LD_EXP 178
11300: PPUSH
11301: LD_INT 2
11303: PPUSH
11304: LD_INT 1
11306: PPUSH
11307: CALL_OW 80
// SetAttitude ( americans1 , arabians , att_enemy , true ) ;
11311: LD_EXP 177
11315: PPUSH
11316: LD_EXP 180
11320: PPUSH
11321: LD_INT 2
11323: PPUSH
11324: LD_INT 1
11326: PPUSH
11327: CALL_OW 80
// SetAttitude ( americans1 , alliance , att_friend , true ) ;
11331: LD_EXP 177
11335: PPUSH
11336: LD_EXP 182
11340: PPUSH
11341: LD_INT 1
11343: PPUSH
11344: LD_INT 1
11346: PPUSH
11347: CALL_OW 80
// SetAttitude ( Explorers_side , alliance , att_friend , true ) ;
11351: LD_EXP 183
11355: PPUSH
11356: LD_EXP 182
11360: PPUSH
11361: LD_INT 1
11363: PPUSH
11364: LD_INT 1
11366: PPUSH
11367: CALL_OW 80
// SetAttitude ( Explorers_Side , americans , att_friend , false ) ;
11371: LD_EXP 183
11375: PPUSH
11376: LD_EXP 176
11380: PPUSH
11381: LD_INT 1
11383: PPUSH
11384: LD_INT 0
11386: PPUSH
11387: CALL_OW 80
// SetAttitude ( americans , Explorers_side , att_neutral , false ) ;
11391: LD_EXP 176
11395: PPUSH
11396: LD_EXP 183
11400: PPUSH
11401: LD_INT 0
11403: PPUSH
11404: LD_INT 0
11406: PPUSH
11407: CALL_OW 80
// SetAttitude ( Explorers_side , russians , att_neutral , true ) ;
11411: LD_EXP 183
11415: PPUSH
11416: LD_EXP 178
11420: PPUSH
11421: LD_INT 0
11423: PPUSH
11424: LD_INT 1
11426: PPUSH
11427: CALL_OW 80
// SetAttitude ( Explorers_side , russians1 , att_neutral , true ) ;
11431: LD_EXP 183
11435: PPUSH
11436: LD_EXP 179
11440: PPUSH
11441: LD_INT 0
11443: PPUSH
11444: LD_INT 1
11446: PPUSH
11447: CALL_OW 80
// SetAttitude ( Explorers_side , arabians , att_neutral , true ) ;
11451: LD_EXP 183
11455: PPUSH
11456: LD_EXP 180
11460: PPUSH
11461: LD_INT 0
11463: PPUSH
11464: LD_INT 1
11466: PPUSH
11467: CALL_OW 80
// end ;
11471: LD_VAR 0 1
11475: RET
// function Send_units_to_initial_position ; begin
11476: LD_INT 0
11478: PPUSH
// end ;
11479: LD_VAR 0 1
11483: RET
// function Init ; begin
11484: LD_INT 0
11486: PPUSH
// RandomizeAll ;
11487: CALL_OW 11
// Set_variables ;
11491: CALL 0 0 0
// Prepare_difficulty ;
11495: CALL 3921 0 0
// Set_marks ;
11499: CALL 11060 0 0
// Set_attitudes ;
11503: CALL 11068 0 0
// Prepare_characters ;
11507: CALL 6117 0 0
// Send_units_to_initial_position ;
11511: CALL 11476 0 0
// end ;
11515: LD_VAR 0 1
11519: RET
// starting begin Debug_Constant = false ;
11520: LD_ADDR_EXP 195
11524: PUSH
11525: LD_INT 0
11527: ST_TO_ADDR
// Init ;
11528: CALL 11484 0 0
// CenterNowOnXY ( 135 , 194 ) ;
11532: LD_INT 135
11534: PPUSH
11535: LD_INT 194
11537: PPUSH
11538: CALL_OW 86
// Wait ( 0 0$5 ) ;
11542: LD_INT 175
11544: PPUSH
11545: CALL_OW 67
// CenterJMM = true ;
11549: LD_ADDR_EXP 68
11553: PUSH
11554: LD_INT 1
11556: ST_TO_ADDR
// end ; end_of_file
11557: END
// function FirstTalk ; var list_of_q , selection , V ; begin
11558: LD_INT 0
11560: PPUSH
11561: PPUSH
11562: PPUSH
11563: PPUSH
// RaiseSailEvent ( Run_JMM_Vehicles ) ;
11564: LD_EXP 169
11568: PPUSH
11569: CALL_OW 427
// if kappa_delayed then
11573: LD_EXP 35
11577: IFFALSE 11801
// begin Say ( JMM , D1T-JMM-1 ) ;
11579: LD_EXP 1
11583: PPUSH
11584: LD_STRING D1T-JMM-1
11586: PPUSH
11587: CALL_OW 88
// Say ( Powell , D1T-Pow-1 ) ;
11591: LD_EXP 2
11595: PPUSH
11596: LD_STRING D1T-Pow-1
11598: PPUSH
11599: CALL_OW 88
// if kappa_saved then
11603: LD_EXP 33
11607: IFFALSE 11635
// begin Say ( JMM , D1T-JMM-2 ) ;
11609: LD_EXP 1
11613: PPUSH
11614: LD_STRING D1T-JMM-2
11616: PPUSH
11617: CALL_OW 88
// Say ( Powell , D1T-Pow-2 ) ;
11621: LD_EXP 2
11625: PPUSH
11626: LD_STRING D1T-Pow-2
11628: PPUSH
11629: CALL_OW 88
// end else
11633: GO 11799
// if not ( kappa_saved ) and Woman_saved then
11635: LD_EXP 33
11639: NOT
11640: PUSH
11641: LD_EXP 34
11645: AND
11646: IFFALSE 11761
// begin Say ( JMM , D1T-JMM-3 ) ;
11648: LD_EXP 1
11652: PPUSH
11653: LD_STRING D1T-JMM-3
11655: PPUSH
11656: CALL_OW 88
// Say ( Powell , D1T-Pow-3 ) ;
11660: LD_EXP 2
11664: PPUSH
11665: LD_STRING D1T-Pow-3
11667: PPUSH
11668: CALL_OW 88
// case Woman_in_am14 of 1 :
11672: LD_EXP 36
11676: PUSH
11677: LD_INT 1
11679: DOUBLE
11680: EQUAL
11681: IFTRUE 11685
11683: GO 11700
11685: POP
// Say ( Joan , D1T-Joan-3 ) ; 2 :
11686: LD_EXP 12
11690: PPUSH
11691: LD_STRING D1T-Joan-3
11693: PPUSH
11694: CALL_OW 88
11698: GO 11747
11700: LD_INT 2
11702: DOUBLE
11703: EQUAL
11704: IFTRUE 11708
11706: GO 11723
11708: POP
// Say ( Lisa , D1T-Lisa-3 ) ; 3 :
11709: LD_EXP 5
11713: PPUSH
11714: LD_STRING D1T-Lisa-3
11716: PPUSH
11717: CALL_OW 88
11721: GO 11747
11723: LD_INT 3
11725: DOUBLE
11726: EQUAL
11727: IFTRUE 11731
11729: GO 11746
11731: POP
// Say ( Coonie , D1T-Con-3 ) ; end ;
11732: LD_EXP 18
11736: PPUSH
11737: LD_STRING D1T-Con-3
11739: PPUSH
11740: CALL_OW 88
11744: GO 11747
11746: POP
// Say ( Powell , D1T-Pow-4 ) ;
11747: LD_EXP 2
11751: PPUSH
11752: LD_STRING D1T-Pow-4
11754: PPUSH
11755: CALL_OW 88
// end else
11759: GO 11799
// if not ( kappa_saved ) and not ( Woman_saved ) then
11761: LD_EXP 33
11765: NOT
11766: PUSH
11767: LD_EXP 34
11771: NOT
11772: AND
11773: IFFALSE 11799
// begin Say ( JMM , D1T-JMM-4 ) ;
11775: LD_EXP 1
11779: PPUSH
11780: LD_STRING D1T-JMM-4
11782: PPUSH
11783: CALL_OW 88
// Say ( Powell , D1T-Pow-5 ) ;
11787: LD_EXP 2
11791: PPUSH
11792: LD_STRING D1T-Pow-5
11794: PPUSH
11795: CALL_OW 88
// end ; end else
11799: GO 11825
// begin Say ( JMM , D1nT-JMM-1 ) ;
11801: LD_EXP 1
11805: PPUSH
11806: LD_STRING D1nT-JMM-1
11808: PPUSH
11809: CALL_OW 88
// Say ( Powell , D1nT-Pow-1 ) ;
11813: LD_EXP 2
11817: PPUSH
11818: LD_STRING D1nT-Pow-1
11820: PPUSH
11821: CALL_OW 88
// end ; Say ( JMM , D1-JMM-1 ) ;
11825: LD_EXP 1
11829: PPUSH
11830: LD_STRING D1-JMM-1
11832: PPUSH
11833: CALL_OW 88
// Say ( Powell , D1-Pow-1 ) ;
11837: LD_EXP 2
11841: PPUSH
11842: LD_STRING D1-Pow-1
11844: PPUSH
11845: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
11849: LD_EXP 1
11853: PPUSH
11854: LD_STRING D1-JMM-2
11856: PPUSH
11857: CALL_OW 88
// if not ( Skip ) then
11861: LD_EXP 186
11865: NOT
11866: IFFALSE 11877
// RaiseSailEvent ( Map_am_base ) ;
11868: LD_EXP 161
11872: PPUSH
11873: CALL_OW 427
// Say ( Powell , D1-Pow-2 ) ;
11877: LD_EXP 2
11881: PPUSH
11882: LD_STRING D1-Pow-2
11884: PPUSH
11885: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11889: LD_EXP 1
11893: PPUSH
11894: LD_STRING D1-JMM-3
11896: PPUSH
11897: CALL_OW 88
// Say ( Powell , D1-Pow-3 ) ;
11901: LD_EXP 2
11905: PPUSH
11906: LD_STRING D1-Pow-3
11908: PPUSH
11909: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
11913: LD_EXP 1
11917: PPUSH
11918: LD_STRING D1-JMM-4
11920: PPUSH
11921: CALL_OW 88
// Say ( Powell , D1-Pow-4 ) ;
11925: LD_EXP 2
11929: PPUSH
11930: LD_STRING D1-Pow-4
11932: PPUSH
11933: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
11937: LD_EXP 1
11941: PPUSH
11942: LD_STRING D1-JMM-5
11944: PPUSH
11945: CALL_OW 88
// if not ( Skip ) then
11949: LD_EXP 186
11953: NOT
11954: IFFALSE 11965
// RaiseSailEvent ( Map_rus_attack ) ;
11956: LD_EXP 162
11960: PPUSH
11961: CALL_OW 427
// Say ( Powell , D1-Pow-5 ) ;
11965: LD_EXP 2
11969: PPUSH
11970: LD_STRING D1-Pow-5
11972: PPUSH
11973: CALL_OW 88
// if not ( Skip ) then
11977: LD_EXP 186
11981: NOT
11982: IFFALSE 12149
// begin list_of_q = [ 1 , 2 , 3 , 4 , 5 , 6 ] ;
11984: LD_ADDR_VAR 0 2
11988: PUSH
11989: LD_INT 1
11991: PUSH
11992: LD_INT 2
11994: PUSH
11995: LD_INT 3
11997: PUSH
11998: LD_INT 4
12000: PUSH
12001: LD_INT 5
12003: PUSH
12004: LD_INT 6
12006: PUSH
12007: EMPTY
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: ST_TO_ADDR
// repeat selection = SelectiveQuery ( Q1 , list_of_q ) ;
12015: LD_ADDR_VAR 0 3
12019: PUSH
12020: LD_STRING Q1
12022: PPUSH
12023: LD_VAR 0 2
12027: PPUSH
12028: CALL_OW 98
12032: ST_TO_ADDR
// list_of_q = list_of_q diff selection ;
12033: LD_ADDR_VAR 0 2
12037: PUSH
12038: LD_VAR 0 2
12042: PUSH
12043: LD_VAR 0 3
12047: DIFF
12048: ST_TO_ADDR
// ResolveQuery ( selection , list_of_q ) ;
12049: LD_VAR 0 3
12053: PPUSH
12054: LD_VAR 0 2
12058: PPUSH
12059: CALL 12154 0 2
// until ( selection in [ 5 , 6 ] ) or list_of_q = 2 ;
12063: LD_VAR 0 3
12067: PUSH
12068: LD_INT 5
12070: PUSH
12071: LD_INT 6
12073: PUSH
12074: EMPTY
12075: LIST
12076: LIST
12077: IN
12078: PUSH
12079: LD_VAR 0 2
12083: PUSH
12084: LD_INT 2
12086: EQUAL
12087: OR
12088: IFFALSE 12015
// if not ( selection in [ 5 , 6 ] ) then
12090: LD_VAR 0 3
12094: PUSH
12095: LD_INT 5
12097: PUSH
12098: LD_INT 6
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: IN
12105: NOT
12106: IFFALSE 12149
// begin selection = SelectiveQuery ( Q1a , [ 1 , 2 ] ) ;
12108: LD_ADDR_VAR 0 3
12112: PUSH
12113: LD_STRING Q1a
12115: PPUSH
12116: LD_INT 1
12118: PUSH
12119: LD_INT 2
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: PPUSH
12126: CALL_OW 98
12130: ST_TO_ADDR
// ResolveQuery ( selection + 4 , list_of_q ) ;
12131: LD_VAR 0 3
12135: PUSH
12136: LD_INT 4
12138: PLUS
12139: PPUSH
12140: LD_VAR 0 2
12144: PPUSH
12145: CALL 12154 0 2
// end ; end ; end ;
12149: LD_VAR 0 1
12153: RET
// function ResolveQuery ( question , list_of_q ) ; begin
12154: LD_INT 0
12156: PPUSH
// case question of 1 :
12157: LD_VAR 0 1
12161: PUSH
12162: LD_INT 1
12164: DOUBLE
12165: EQUAL
12166: IFTRUE 12170
12168: GO 12221
12170: POP
// begin Say ( JMM , D2Mot-JMM-1 ) ;
12171: LD_EXP 1
12175: PPUSH
12176: LD_STRING D2Mot-JMM-1
12178: PPUSH
12179: CALL_OW 88
// Say ( Powell , D2Mot-Pow-1 ) ;
12183: LD_EXP 2
12187: PPUSH
12188: LD_STRING D2Mot-Pow-1
12190: PPUSH
12191: CALL_OW 88
// Say ( JMM , D2Mot-JMM-2 ) ;
12195: LD_EXP 1
12199: PPUSH
12200: LD_STRING D2Mot-JMM-2
12202: PPUSH
12203: CALL_OW 88
// Say ( Powell , D2Mot-Pow-2 ) ;
12207: LD_EXP 2
12211: PPUSH
12212: LD_STRING D2Mot-Pow-2
12214: PPUSH
12215: CALL_OW 88
// end ; 2 :
12219: GO 12572
12221: LD_INT 2
12223: DOUBLE
12224: EQUAL
12225: IFTRUE 12229
12227: GO 12305
12229: POP
// begin Say ( JMM , D2Rus-JMM-1 ) ;
12230: LD_EXP 1
12234: PPUSH
12235: LD_STRING D2Rus-JMM-1
12237: PPUSH
12238: CALL_OW 88
// Say ( Powell , D2Rus-Pow-1 ) ;
12242: LD_EXP 2
12246: PPUSH
12247: LD_STRING D2Rus-Pow-1
12249: PPUSH
12250: CALL_OW 88
// Say ( JMM , D2Rus-JMM-2 ) ;
12254: LD_EXP 1
12258: PPUSH
12259: LD_STRING D2Rus-JMM-2
12261: PPUSH
12262: CALL_OW 88
// if not ( 3 in list_of_q ) then
12266: LD_INT 3
12268: PUSH
12269: LD_VAR 0 2
12273: IN
12274: NOT
12275: IFFALSE 12291
// Say ( Powell , D2Rus-Pow-2 ) else
12277: LD_EXP 2
12281: PPUSH
12282: LD_STRING D2Rus-Pow-2
12284: PPUSH
12285: CALL_OW 88
12289: GO 12303
// Say ( Powell , D2Rus-Pow-2a ) ;
12291: LD_EXP 2
12295: PPUSH
12296: LD_STRING D2Rus-Pow-2a
12298: PPUSH
12299: CALL_OW 88
// end ; 3 :
12303: GO 12572
12305: LD_INT 3
12307: DOUBLE
12308: EQUAL
12309: IFTRUE 12313
12311: GO 12406
12313: POP
// begin Say ( JMM , D2Leg-JMM-1 ) ;
12314: LD_EXP 1
12318: PPUSH
12319: LD_STRING D2Leg-JMM-1
12321: PPUSH
12322: CALL_OW 88
// Say ( Powell , D2Leg-Pow-1 ) ;
12326: LD_EXP 2
12330: PPUSH
12331: LD_STRING D2Leg-Pow-1
12333: PPUSH
12334: CALL_OW 88
// if ( 2 in list_of_q ) then
12338: LD_INT 2
12340: PUSH
12341: LD_VAR 0 2
12345: IN
12346: IFFALSE 12372
// begin Say ( JMM , D2Leg-JMM-2 ) ;
12348: LD_EXP 1
12352: PPUSH
12353: LD_STRING D2Leg-JMM-2
12355: PPUSH
12356: CALL_OW 88
// Say ( Powell , D2Leg-Pow-2 ) ;
12360: LD_EXP 2
12364: PPUSH
12365: LD_STRING D2Leg-Pow-2
12367: PPUSH
12368: CALL_OW 88
// end ; Say ( JMM , D2Leg-JMM-3 ) ;
12372: LD_EXP 1
12376: PPUSH
12377: LD_STRING D2Leg-JMM-3
12379: PPUSH
12380: CALL_OW 88
// Say ( Powell , D2Leg-Pow-3 ) ;
12384: LD_EXP 2
12388: PPUSH
12389: LD_STRING D2Leg-Pow-3
12391: PPUSH
12392: CALL_OW 88
// Add_Legion_Objectives = true ;
12396: LD_ADDR_EXP 230
12400: PUSH
12401: LD_INT 1
12403: ST_TO_ADDR
// end ; 4 :
12404: GO 12572
12406: LD_INT 4
12408: DOUBLE
12409: EQUAL
12410: IFTRUE 12414
12412: GO 12489
12414: POP
// begin Say ( JMM , D2Ar-JMM-1 ) ;
12415: LD_EXP 1
12419: PPUSH
12420: LD_STRING D2Ar-JMM-1
12422: PPUSH
12423: CALL_OW 88
// Say ( Powell , D2Ar-Pow-1 ) ;
12427: LD_EXP 2
12431: PPUSH
12432: LD_STRING D2Ar-Pow-1
12434: PPUSH
12435: CALL_OW 88
// Say ( JMM , D2Ar-JMM-2 ) ;
12439: LD_EXP 1
12443: PPUSH
12444: LD_STRING D2Ar-JMM-2
12446: PPUSH
12447: CALL_OW 88
// Say ( Powell , D2Ar-Pow-2 ) ;
12451: LD_EXP 2
12455: PPUSH
12456: LD_STRING D2Ar-Pow-2
12458: PPUSH
12459: CALL_OW 88
// Say ( JMM , D2Ar-JMM-3 ) ;
12463: LD_EXP 1
12467: PPUSH
12468: LD_STRING D2Ar-JMM-3
12470: PPUSH
12471: CALL_OW 88
// Say ( Powell , D2Ar-Pow-3 ) ;
12475: LD_EXP 2
12479: PPUSH
12480: LD_STRING D2Ar-Pow-3
12482: PPUSH
12483: CALL_OW 88
// end ; 5 :
12487: GO 12572
12489: LD_INT 5
12491: DOUBLE
12492: EQUAL
12493: IFTRUE 12497
12495: GO 12512
12497: POP
// begin Say ( JMM , D2Conf-JMM-1 ) ;
12498: LD_EXP 1
12502: PPUSH
12503: LD_STRING D2Conf-JMM-1
12505: PPUSH
12506: CALL_OW 88
// end ; 6 :
12510: GO 12572
12512: LD_INT 6
12514: DOUBLE
12515: EQUAL
12516: IFTRUE 12520
12518: GO 12571
12520: POP
// begin Say ( JMM , D2Com-JMM-1 ) ;
12521: LD_EXP 1
12525: PPUSH
12526: LD_STRING D2Com-JMM-1
12528: PPUSH
12529: CALL_OW 88
// Say ( Powell , D2Com-Pow-1 ) ;
12533: LD_EXP 2
12537: PPUSH
12538: LD_STRING D2Com-Pow-1
12540: PPUSH
12541: CALL_OW 88
// Say ( JMM , D2Com-JMM-2 ) ;
12545: LD_EXP 1
12549: PPUSH
12550: LD_STRING D2Com-JMM-2
12552: PPUSH
12553: CALL_OW 88
// Say ( Powell , D2Com-Pow-2 ) ;
12557: LD_EXP 2
12561: PPUSH
12562: LD_STRING D2Com-Pow-2
12564: PPUSH
12565: CALL_OW 88
// end ; end ;
12569: GO 12572
12571: POP
// end ;
12572: LD_VAR 0 3
12576: RET
// function SecondTalk ; begin
12577: LD_INT 0
12579: PPUSH
// Joan_semafor = true ;
12580: LD_ADDR_EXP 233
12584: PUSH
12585: LD_INT 1
12587: ST_TO_ADDR
// if Woman_saved > 0 then
12588: LD_EXP 34
12592: PUSH
12593: LD_INT 0
12595: GREATER
12596: IFFALSE 12697
// begin case Woman_saved of 1 :
12598: LD_EXP 34
12602: PUSH
12603: LD_INT 1
12605: DOUBLE
12606: EQUAL
12607: IFTRUE 12611
12609: GO 12626
12611: POP
// Say ( Joan , D3W-Joan-1 ) ; 2 :
12612: LD_EXP 12
12616: PPUSH
12617: LD_STRING D3W-Joan-1
12619: PPUSH
12620: CALL_OW 88
12624: GO 12673
12626: LD_INT 2
12628: DOUBLE
12629: EQUAL
12630: IFTRUE 12634
12632: GO 12649
12634: POP
// Say ( Lisa , D3W-Lisa-1 ) ; 3 :
12635: LD_EXP 5
12639: PPUSH
12640: LD_STRING D3W-Lisa-1
12642: PPUSH
12643: CALL_OW 88
12647: GO 12673
12649: LD_INT 3
12651: DOUBLE
12652: EQUAL
12653: IFTRUE 12657
12655: GO 12672
12657: POP
// Say ( Coonie , D3W-Con-1 ) ; end ;
12658: LD_EXP 18
12662: PPUSH
12663: LD_STRING D3W-Con-1
12665: PPUSH
12666: CALL_OW 88
12670: GO 12673
12672: POP
// Say ( JMM , D3W-JMM-1 ) ;
12673: LD_EXP 1
12677: PPUSH
12678: LD_STRING D3W-JMM-1
12680: PPUSH
12681: CALL_OW 88
// Say ( JMM , D3nW-JMM-1a ) ;
12685: LD_EXP 1
12689: PPUSH
12690: LD_STRING D3nW-JMM-1a
12692: PPUSH
12693: CALL_OW 88
// end ; Joan_semafor = false ;
12697: LD_ADDR_EXP 233
12701: PUSH
12702: LD_INT 0
12704: ST_TO_ADDR
// end ;
12705: LD_VAR 0 1
12709: RET
// every 0 0$1 do var hlp ;
12710: GO 12712
12712: DISABLE
12713: LD_INT 0
12715: PPUSH
// begin ingame_video = true ;
12716: LD_ADDR_OWVAR 52
12720: PUSH
12721: LD_INT 1
12723: ST_TO_ADDR
// interface_hidden = true ;
12724: LD_ADDR_OWVAR 54
12728: PUSH
12729: LD_INT 1
12731: ST_TO_ADDR
// FirstTalk ;
12732: CALL 11558 0 0
// WaitTask ( JMM_veh , 1 ) ;
12736: LD_EXP 57
12740: PPUSH
12741: LD_INT 1
12743: PPUSH
12744: CALL 17823 0 2
// if IsInUnit ( JMM ) then
12748: LD_EXP 1
12752: PPUSH
12753: CALL_OW 310
12757: IFFALSE 12783
// begin ComExitVehicle ( JMM ) ;
12759: LD_EXP 1
12763: PPUSH
12764: CALL_OW 121
// if JMM_Woman then
12768: LD_EXP 37
12772: IFFALSE 12783
// ComExitVehicle ( JMM_Woman ) ;
12774: LD_EXP 37
12778: PPUSH
12779: CALL_OW 121
// end ; Wait ( 0 0$1 ) ;
12783: LD_INT 35
12785: PPUSH
12786: CALL_OW 67
// Skip = false ;
12790: LD_ADDR_EXP 186
12794: PUSH
12795: LD_INT 0
12797: ST_TO_ADDR
// CenterJMM = false ;
12798: LD_ADDR_EXP 68
12802: PUSH
12803: LD_INT 0
12805: ST_TO_ADDR
// Wait ( 0 0$1 ) ;
12806: LD_INT 35
12808: PPUSH
12809: CALL_OW 67
// ComMoveXY ( [ JMM , JMM_woman ] , 68 , 105 ) ;
12813: LD_EXP 1
12817: PUSH
12818: LD_EXP 37
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: PPUSH
12827: LD_INT 68
12829: PPUSH
12830: LD_INT 105
12832: PPUSH
12833: CALL_OW 111
// ComMoveXY ( Powell , 47 , 64 ) ;
12837: LD_EXP 2
12841: PPUSH
12842: LD_INT 47
12844: PPUSH
12845: LD_INT 64
12847: PPUSH
12848: CALL_OW 111
// RaiseSailEvent ( Send_Helpers ) ;
12852: LD_EXP 163
12856: PPUSH
12857: CALL_OW 427
// CenterOnXY ( 64 , 99 ) ;
12861: LD_INT 64
12863: PPUSH
12864: LD_INT 99
12866: PPUSH
12867: CALL_OW 84
// WaitTask ( [ JMM , JMM_woman ] , 0.5 ) ;
12871: LD_EXP 1
12875: PUSH
12876: LD_EXP 37
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: PPUSH
12885: LD_REAL  5.00000000000000E-0001
12888: PPUSH
12889: CALL 17823 0 2
// ChangeMissionObjectives ( M1 ) ;
12893: LD_STRING M1
12895: PPUSH
12896: CALL_OW 337
// ingame_video = false ;
12900: LD_ADDR_OWVAR 52
12904: PUSH
12905: LD_INT 0
12907: ST_TO_ADDR
// interface_hidden = false ;
12908: LD_ADDR_OWVAR 54
12912: PUSH
12913: LD_INT 0
12915: ST_TO_ADDR
// SaveForQuickRestart ;
12916: CALL_OW 22
// Wait ( 0 0$2 ) ;
12920: LD_INT 70
12922: PPUSH
12923: CALL_OW 67
// RandomizeAll ;
12927: CALL_OW 11
// SecondTalk ;
12931: CALL 12577 0 0
// end ;
12935: PPOPN 1
12937: END
// every 0 0$2 trigger Time_of_Ingame_Run_Over + 0 0$15 < tick marked 10 do
12938: LD_EXP 189
12942: PUSH
12943: LD_INT 525
12945: PLUS
12946: PUSH
12947: LD_OWVAR 1
12951: LESS
12952: IFFALSE 13116
12954: GO 12956
12956: DISABLE
// begin DialogueOn ;
12957: CALL_OW 6
// SayRadioNoName ( Friend , D7-Friend-1 ) ;
12961: LD_EXP 21
12965: PPUSH
12966: LD_STRING D7-Friend-1
12968: PPUSH
12969: CALL_OW 95
// Say ( JMM , D7-JMM-1 ) ;
12973: LD_EXP 1
12977: PPUSH
12978: LD_STRING D7-JMM-1
12980: PPUSH
12981: CALL_OW 88
// SayRadioNoName ( Friend , D7-Friend-2 ) ;
12985: LD_EXP 21
12989: PPUSH
12990: LD_STRING D7-Friend-2
12992: PPUSH
12993: CALL_OW 95
// Say ( JMM , D7-JMM-2 ) ;
12997: LD_EXP 1
13001: PPUSH
13002: LD_STRING D7-JMM-2
13004: PPUSH
13005: CALL_OW 88
// SayRadioNoName ( Friend , D7-Friend-3 ) ;
13009: LD_EXP 21
13013: PPUSH
13014: LD_STRING D7-Friend-3
13016: PPUSH
13017: CALL_OW 95
// Say ( JMM , D7-JMM-3 ) ;
13021: LD_EXP 1
13025: PPUSH
13026: LD_STRING D7-JMM-3
13028: PPUSH
13029: CALL_OW 88
// SayRadioNoName ( Friend , D7-Friend-4 ) ;
13033: LD_EXP 21
13037: PPUSH
13038: LD_STRING D7-Friend-4
13040: PPUSH
13041: CALL_OW 95
// Say ( JMM , D7-JMM-4 ) ;
13045: LD_EXP 1
13049: PPUSH
13050: LD_STRING D7-JMM-4
13052: PPUSH
13053: CALL_OW 88
// SayRadioNoName ( Friend , D7-Friend-5 ) ;
13057: LD_EXP 21
13061: PPUSH
13062: LD_STRING D7-Friend-5
13064: PPUSH
13065: CALL_OW 95
// Say ( JMM , D7-JMM-5 ) ;
13069: LD_EXP 1
13073: PPUSH
13074: LD_STRING D7-JMM-5
13076: PPUSH
13077: CALL_OW 88
// SayRadioNoName ( Friend , D7-Friend-6 ) ;
13081: LD_EXP 21
13085: PPUSH
13086: LD_STRING D7-Friend-6
13088: PPUSH
13089: CALL_OW 95
// Say ( JMM , D7-JMM-6 ) ;
13093: LD_EXP 1
13097: PPUSH
13098: LD_STRING D7-JMM-6
13100: PPUSH
13101: CALL_OW 88
// DialogueOff ;
13105: CALL_OW 7
// ChangeMissionObjectives ( Mlegion ) ;
13109: LD_STRING Mlegion
13111: PPUSH
13112: CALL_OW 337
// end ;
13116: END
// every 0 0$1 trigger tick > Stevens_Coming_Time marked 10 do var Stevens_people , Un , New_vehicle , Stev_vehicles ;
13117: LD_OWVAR 1
13121: PUSH
13122: LD_EXP 200
13126: GREATER
13127: IFFALSE 13911
13129: GO 13131
13131: DISABLE
13132: LD_INT 0
13134: PPUSH
13135: PPUSH
13136: PPUSH
13137: PPUSH
// begin Stevens_people = [ ] ;
13138: LD_ADDR_VAR 0 1
13142: PUSH
13143: EMPTY
13144: ST_TO_ADDR
// if BobbyLoc = 6 then
13145: LD_EXP 41
13149: PUSH
13150: LD_INT 6
13152: EQUAL
13153: IFFALSE 13171
// Stevens_people = Stevens_people ^ Bobby ;
13155: LD_ADDR_VAR 0 1
13159: PUSH
13160: LD_VAR 0 1
13164: PUSH
13165: LD_EXP 3
13169: ADD
13170: ST_TO_ADDR
// if CyrusLoc = 6 then
13171: LD_EXP 42
13175: PUSH
13176: LD_INT 6
13178: EQUAL
13179: IFFALSE 13197
// Stevens_people = Stevens_people ^ Cyrus ;
13181: LD_ADDR_VAR 0 1
13185: PUSH
13186: LD_VAR 0 1
13190: PUSH
13191: LD_EXP 4
13195: ADD
13196: ST_TO_ADDR
// if LisaLoc = 6 then
13197: LD_EXP 43
13201: PUSH
13202: LD_INT 6
13204: EQUAL
13205: IFFALSE 13223
// Stevens_people = Stevens_people ^ Lisa ;
13207: LD_ADDR_VAR 0 1
13211: PUSH
13212: LD_VAR 0 1
13216: PUSH
13217: LD_EXP 5
13221: ADD
13222: ST_TO_ADDR
// if FrankLoc = 6 then
13223: LD_EXP 44
13227: PUSH
13228: LD_INT 6
13230: EQUAL
13231: IFFALSE 13249
// Stevens_people = Stevens_people ^ Frank ;
13233: LD_ADDR_VAR 0 1
13237: PUSH
13238: LD_VAR 0 1
13242: PUSH
13243: LD_EXP 6
13247: ADD
13248: ST_TO_ADDR
// if BrownLoc = 6 then
13249: LD_EXP 45
13253: PUSH
13254: LD_INT 6
13256: EQUAL
13257: IFFALSE 13275
// Stevens_people = Stevens_people ^ Brown ;
13259: LD_ADDR_VAR 0 1
13263: PUSH
13264: LD_VAR 0 1
13268: PUSH
13269: LD_EXP 7
13273: ADD
13274: ST_TO_ADDR
// if DonaldsonLoc = 6 then
13275: LD_EXP 46
13279: PUSH
13280: LD_INT 6
13282: EQUAL
13283: IFFALSE 13301
// Stevens_people = Stevens_people ^ Donaldson ;
13285: LD_ADDR_VAR 0 1
13289: PUSH
13290: LD_VAR 0 1
13294: PUSH
13295: LD_EXP 8
13299: ADD
13300: ST_TO_ADDR
// if VanHoutenLoc = 6 then
13301: LD_EXP 47
13305: PUSH
13306: LD_INT 6
13308: EQUAL
13309: IFFALSE 13327
// Stevens_people = Stevens_people ^ VanHouten ;
13311: LD_ADDR_VAR 0 1
13315: PUSH
13316: LD_VAR 0 1
13320: PUSH
13321: LD_EXP 24
13325: ADD
13326: ST_TO_ADDR
// if GladstoneLoc = 6 then
13327: LD_EXP 48
13331: PUSH
13332: LD_INT 6
13334: EQUAL
13335: IFFALSE 13353
// Stevens_people = Stevens_people ^ Gladstone ;
13337: LD_ADDR_VAR 0 1
13341: PUSH
13342: LD_VAR 0 1
13346: PUSH
13347: LD_EXP 9
13351: ADD
13352: ST_TO_ADDR
// if YamokoLoc = 6 then
13353: LD_EXP 50
13357: PUSH
13358: LD_INT 6
13360: EQUAL
13361: IFFALSE 13379
// Stevens_people = Stevens_people ^ Yamoko ;
13363: LD_ADDR_VAR 0 1
13367: PUSH
13368: LD_VAR 0 1
13372: PUSH
13373: LD_EXP 14
13377: ADD
13378: ST_TO_ADDR
// if GaryLoc = 6 then
13379: LD_EXP 51
13383: PUSH
13384: LD_INT 6
13386: EQUAL
13387: IFFALSE 13405
// Stevens_people = Stevens_people ^ Gary ;
13389: LD_ADDR_VAR 0 1
13393: PUSH
13394: LD_VAR 0 1
13398: PUSH
13399: LD_EXP 15
13403: ADD
13404: ST_TO_ADDR
// if DenisLoc = 6 then
13405: LD_EXP 52
13409: PUSH
13410: LD_INT 6
13412: EQUAL
13413: IFFALSE 13431
// Stevens_people = Stevens_people ^ Denis ;
13415: LD_ADDR_VAR 0 1
13419: PUSH
13420: LD_VAR 0 1
13424: PUSH
13425: LD_EXP 11
13429: ADD
13430: ST_TO_ADDR
// if CornellLoc = 6 then
13431: LD_EXP 53
13435: PUSH
13436: LD_INT 6
13438: EQUAL
13439: IFFALSE 13457
// Stevens_people = Stevens_people ^ Cornell ;
13441: LD_ADDR_VAR 0 1
13445: PUSH
13446: LD_VAR 0 1
13450: PUSH
13451: LD_EXP 10
13455: ADD
13456: ST_TO_ADDR
// if Stevens then
13457: LD_EXP 17
13461: IFFALSE 13481
// Stevens_people = Stevens_people ^ Stevens else
13463: LD_ADDR_VAR 0 1
13467: PUSH
13468: LD_VAR 0 1
13472: PUSH
13473: LD_EXP 17
13477: ADD
13478: ST_TO_ADDR
13479: GO 13497
// Stevens_people = Stevens_people ^ Baker ;
13481: LD_ADDR_VAR 0 1
13485: PUSH
13486: LD_VAR 0 1
13490: PUSH
13491: LD_EXP 23
13495: ADD
13496: ST_TO_ADDR
// Stevens_people = Stevens_people ^ OtherWithJMM diff [ 0 ] ;
13497: LD_ADDR_VAR 0 1
13501: PUSH
13502: LD_VAR 0 1
13506: PUSH
13507: LD_EXP 30
13511: ADD
13512: PUSH
13513: LD_INT 0
13515: PUSH
13516: EMPTY
13517: LIST
13518: DIFF
13519: ST_TO_ADDR
// for Un in Stevens_people do
13520: LD_ADDR_VAR 0 2
13524: PUSH
13525: LD_VAR 0 1
13529: PUSH
13530: FOR_IN
13531: IFFALSE 13662
// begin SetSide ( Un , americans ) ;
13533: LD_VAR 0 2
13537: PPUSH
13538: LD_EXP 176
13542: PPUSH
13543: CALL_OW 235
// uc_side = americans ;
13547: LD_ADDR_OWVAR 20
13551: PUSH
13552: LD_EXP 176
13556: ST_TO_ADDR
// uc_nation = nation_american ;
13557: LD_ADDR_OWVAR 21
13561: PUSH
13562: LD_INT 1
13564: ST_TO_ADDR
// uc_direction = 1 ;
13565: LD_ADDR_OWVAR 24
13569: PUSH
13570: LD_INT 1
13572: ST_TO_ADDR
// vc_chassis = us_light_wheeled ;
13573: LD_ADDR_OWVAR 37
13577: PUSH
13578: LD_INT 1
13580: ST_TO_ADDR
// vc_engine = engine_combustion ;
13581: LD_ADDR_OWVAR 39
13585: PUSH
13586: LD_INT 1
13588: ST_TO_ADDR
// vc_control = control_manual ;
13589: LD_ADDR_OWVAR 38
13593: PUSH
13594: LD_INT 1
13596: ST_TO_ADDR
// vc_weapon = us_machine_gun ;
13597: LD_ADDR_OWVAR 40
13601: PUSH
13602: LD_INT 2
13604: ST_TO_ADDR
// New_vehicle = CreateVehicle ;
13605: LD_ADDR_VAR 0 3
13609: PUSH
13610: CALL_OW 45
13614: ST_TO_ADDR
// Stev_vehicles = Stev_vehicles ^ New_vehicle ;
13615: LD_ADDR_VAR 0 4
13619: PUSH
13620: LD_VAR 0 4
13624: PUSH
13625: LD_VAR 0 3
13629: ADD
13630: ST_TO_ADDR
// PlaceHumanInUnit ( Un , New_vehicle ) ;
13631: LD_VAR 0 2
13635: PPUSH
13636: LD_VAR 0 3
13640: PPUSH
13641: CALL_OW 52
// PlaceUnitArea ( New_vehicle , Stev_place , false ) ;
13645: LD_VAR 0 3
13649: PPUSH
13650: LD_INT 35
13652: PPUSH
13653: LD_INT 0
13655: PPUSH
13656: CALL_OW 49
// end ;
13660: GO 13530
13662: POP
13663: POP
// DialogueON ;
13664: CALL_OW 6
// CenterOnUnits ( Stev_vehicles ) ;
13668: LD_VAR 0 4
13672: PPUSH
13673: CALL_OW 85
// if Stevens then
13677: LD_EXP 17
13681: IFFALSE 13781
// begin SayRadio ( Stevens , D8-Huck-1 ) ;
13683: LD_EXP 17
13687: PPUSH
13688: LD_STRING D8-Huck-1
13690: PPUSH
13691: CALL_OW 94
// Say ( JMM , D8-JMM-1 ) ;
13695: LD_EXP 1
13699: PPUSH
13700: LD_STRING D8-JMM-1
13702: PPUSH
13703: CALL_OW 88
// SayRadio ( Stevens , D8-Huck-2 ) ;
13707: LD_EXP 17
13711: PPUSH
13712: LD_STRING D8-Huck-2
13714: PPUSH
13715: CALL_OW 94
// Say ( JMM , D8-JMM-2 ) ;
13719: LD_EXP 1
13723: PPUSH
13724: LD_STRING D8-JMM-2
13726: PPUSH
13727: CALL_OW 88
// SayRadio ( Stevens , D8-Huck-3 ) ;
13731: LD_EXP 17
13735: PPUSH
13736: LD_STRING D8-Huck-3
13738: PPUSH
13739: CALL_OW 94
// Say ( JMM , D8-JMM-3 ) ;
13743: LD_EXP 1
13747: PPUSH
13748: LD_STRING D8-JMM-3
13750: PPUSH
13751: CALL_OW 88
// SayRadio ( Stevens , D8-Huck-4 ) ;
13755: LD_EXP 17
13759: PPUSH
13760: LD_STRING D8-Huck-4
13762: PPUSH
13763: CALL_OW 94
// Say ( JMM , D8-JMM-4 ) ;
13767: LD_EXP 1
13771: PPUSH
13772: LD_STRING D8-JMM-4
13774: PPUSH
13775: CALL_OW 88
// end else
13779: GO 13877
// begin SayRadio ( Baker , D8-Huck-1 ) ;
13781: LD_EXP 23
13785: PPUSH
13786: LD_STRING D8-Huck-1
13788: PPUSH
13789: CALL_OW 94
// Say ( JMM , D8-JMM-1a ) ;
13793: LD_EXP 1
13797: PPUSH
13798: LD_STRING D8-JMM-1a
13800: PPUSH
13801: CALL_OW 88
// SayRadio ( Baker , D8-Huck-2 ) ;
13805: LD_EXP 23
13809: PPUSH
13810: LD_STRING D8-Huck-2
13812: PPUSH
13813: CALL_OW 94
// Say ( JMM , D8-JMM-2 ) ;
13817: LD_EXP 1
13821: PPUSH
13822: LD_STRING D8-JMM-2
13824: PPUSH
13825: CALL_OW 88
// SayRadio ( Baker , D8-Huck-3 ) ;
13829: LD_EXP 23
13833: PPUSH
13834: LD_STRING D8-Huck-3
13836: PPUSH
13837: CALL_OW 94
// Say ( JMM , D8-JMM-3 ) ;
13841: LD_EXP 1
13845: PPUSH
13846: LD_STRING D8-JMM-3
13848: PPUSH
13849: CALL_OW 88
// SayRadio ( Baker , D8-Huck-4 ) ;
13853: LD_EXP 23
13857: PPUSH
13858: LD_STRING D8-Huck-4
13860: PPUSH
13861: CALL_OW 94
// Say ( JMM , D8-JMM-4 ) ;
13865: LD_EXP 1
13869: PPUSH
13870: LD_STRING D8-JMM-4
13872: PPUSH
13873: CALL_OW 88
// end ; DialogueOFF ;
13877: CALL_OW 7
// SetTech ( tech_SibFiss , americans , state_enabled ) ;
13881: LD_INT 25
13883: PPUSH
13884: LD_EXP 176
13888: PPUSH
13889: LD_INT 1
13891: PPUSH
13892: CALL_OW 322
// ComMoveXY ( Stev_vehicles , 47 , 63 ) ;
13896: LD_VAR 0 4
13900: PPUSH
13901: LD_INT 47
13903: PPUSH
13904: LD_INT 63
13906: PPUSH
13907: CALL_OW 111
// end ;
13911: PPOPN 4
13913: END
// function CCreateVehicle ( nat , side , dir , chassis , engine , control , weapon ) ; var veh , i , person ; begin
13914: LD_INT 0
13916: PPUSH
13917: PPUSH
13918: PPUSH
13919: PPUSH
// uc_side = side ;
13920: LD_ADDR_OWVAR 20
13924: PUSH
13925: LD_VAR 0 2
13929: ST_TO_ADDR
// uc_direction = dir ;
13930: LD_ADDR_OWVAR 24
13934: PUSH
13935: LD_VAR 0 3
13939: ST_TO_ADDR
// uc_nation = nat ;
13940: LD_ADDR_OWVAR 21
13944: PUSH
13945: LD_VAR 0 1
13949: ST_TO_ADDR
// vc_chassis = chassis ;
13950: LD_ADDR_OWVAR 37
13954: PUSH
13955: LD_VAR 0 4
13959: ST_TO_ADDR
// vc_control = control ;
13960: LD_ADDR_OWVAR 38
13964: PUSH
13965: LD_VAR 0 6
13969: ST_TO_ADDR
// vc_engine = engine ;
13970: LD_ADDR_OWVAR 39
13974: PUSH
13975: LD_VAR 0 5
13979: ST_TO_ADDR
// vc_weapon = weapon ;
13980: LD_ADDR_OWVAR 40
13984: PUSH
13985: LD_VAR 0 7
13989: ST_TO_ADDR
// veh = CreateVehicle ;
13990: LD_ADDR_VAR 0 9
13994: PUSH
13995: CALL_OW 45
13999: ST_TO_ADDR
// result = veh ;
14000: LD_ADDR_VAR 0 8
14004: PUSH
14005: LD_VAR 0 9
14009: ST_TO_ADDR
// end ;
14010: LD_VAR 0 8
14014: RET
// every 0 0$2 trigger ( tick > Woman_Coming_Time ) and ( tick > Time_of_Ingame_Run_Over ) marked 11 do var New_veh , i , Un , Woman_vehs ;
14015: LD_OWVAR 1
14019: PUSH
14020: LD_EXP 201
14024: GREATER
14025: PUSH
14026: LD_OWVAR 1
14030: PUSH
14031: LD_EXP 189
14035: GREATER
14036: AND
14037: IFFALSE 14521
14039: GO 14041
14041: DISABLE
14042: LD_INT 0
14044: PPUSH
14045: PPUSH
14046: PPUSH
14047: PPUSH
// begin Woman_vehs = [ ] ;
14048: LD_ADDR_VAR 0 4
14052: PUSH
14053: EMPTY
14054: ST_TO_ADDR
// for i = 1 to 3 do
14055: LD_ADDR_VAR 0 2
14059: PUSH
14060: DOUBLE
14061: LD_INT 1
14063: DEC
14064: ST_TO_ADDR
14065: LD_INT 3
14067: PUSH
14068: FOR_TO
14069: IFFALSE 14122
// begin New_veh = CCreateVehicle ( nation_american , americans , 1 , us_medium_tracked , engine_siberite , control_computer , us_laser ) ;
14071: LD_ADDR_VAR 0 1
14075: PUSH
14076: LD_INT 1
14078: PPUSH
14079: LD_EXP 176
14083: PPUSH
14084: LD_INT 1
14086: PPUSH
14087: LD_INT 3
14089: PPUSH
14090: LD_INT 3
14092: PPUSH
14093: LD_INT 3
14095: PPUSH
14096: LD_INT 9
14098: PPUSH
14099: CALL 13914 0 7
14103: ST_TO_ADDR
// Woman_vehs = Woman_vehs ^ New_veh ;
14104: LD_ADDR_VAR 0 4
14108: PUSH
14109: LD_VAR 0 4
14113: PUSH
14114: LD_VAR 0 1
14118: ADD
14119: ST_TO_ADDR
// end ;
14120: GO 14068
14122: POP
14123: POP
// New_veh = CCreateVehicle ( nation_american , americans , 1 , us_medium_tracked , engine_siberite , control_computer , us_rocket_launcher ) ;
14124: LD_ADDR_VAR 0 1
14128: PUSH
14129: LD_INT 1
14131: PPUSH
14132: LD_EXP 176
14136: PPUSH
14137: LD_INT 1
14139: PPUSH
14140: LD_INT 3
14142: PPUSH
14143: LD_INT 3
14145: PPUSH
14146: LD_INT 3
14148: PPUSH
14149: LD_INT 7
14151: PPUSH
14152: CALL 13914 0 7
14156: ST_TO_ADDR
// Woman_vehs = Woman_vehs ^ New_veh ;
14157: LD_ADDR_VAR 0 4
14161: PUSH
14162: LD_VAR 0 4
14166: PUSH
14167: LD_VAR 0 1
14171: ADD
14172: ST_TO_ADDR
// New_veh = CCreateVehicle ( nation_american , americans , 1 , us_medium_tracked , engine_siberite , control_manual , us_rocket_launcher ) ;
14173: LD_ADDR_VAR 0 1
14177: PUSH
14178: LD_INT 1
14180: PPUSH
14181: LD_EXP 176
14185: PPUSH
14186: LD_INT 1
14188: PPUSH
14189: LD_INT 3
14191: PPUSH
14192: LD_INT 3
14194: PPUSH
14195: LD_INT 1
14197: PPUSH
14198: LD_INT 7
14200: PPUSH
14201: CALL 13914 0 7
14205: ST_TO_ADDR
// Woman_vehs = Woman_vehs ^ New_veh ;
14206: LD_ADDR_VAR 0 4
14210: PUSH
14211: LD_VAR 0 4
14215: PUSH
14216: LD_VAR 0 1
14220: ADD
14221: ST_TO_ADDR
// SetSide ( JMM_Woman , americans ) ;
14222: LD_EXP 37
14226: PPUSH
14227: LD_EXP 176
14231: PPUSH
14232: CALL_OW 235
// PlaceHumanInUnit ( JMM_Woman , New_veh ) ;
14236: LD_EXP 37
14240: PPUSH
14241: LD_VAR 0 1
14245: PPUSH
14246: CALL_OW 52
// for Un in Woman_vehs do
14250: LD_ADDR_VAR 0 3
14254: PUSH
14255: LD_VAR 0 4
14259: PUSH
14260: FOR_IN
14261: IFFALSE 14280
// PlaceUnitArea ( Un , Stev_place , false ) ;
14263: LD_VAR 0 3
14267: PPUSH
14268: LD_INT 35
14270: PPUSH
14271: LD_INT 0
14273: PPUSH
14274: CALL_OW 49
14278: GO 14260
14280: POP
14281: POP
// Wait ( 0 0$1 ) ;
14282: LD_INT 35
14284: PPUSH
14285: CALL_OW 67
// DialogueON ;
14289: CALL_OW 6
// case woman_in_am14 of 1 :
14293: LD_EXP 36
14297: PUSH
14298: LD_INT 1
14300: DOUBLE
14301: EQUAL
14302: IFTRUE 14306
14304: GO 14330
14306: POP
// begin CenterOnUnits ( Joan ) ;
14307: LD_EXP 12
14311: PPUSH
14312: CALL_OW 85
// SayRadio ( Joan , D10BW-Joan-1 ) ;
14316: LD_EXP 12
14320: PPUSH
14321: LD_STRING D10BW-Joan-1
14323: PPUSH
14324: CALL_OW 94
// end ; 2 :
14328: GO 14395
14330: LD_INT 2
14332: DOUBLE
14333: EQUAL
14334: IFTRUE 14338
14336: GO 14362
14338: POP
// begin CenterOnUnits ( Lisa ) ;
14339: LD_EXP 5
14343: PPUSH
14344: CALL_OW 85
// SayRadio ( Lisa , D10BW-Lisa-1 ) ;
14348: LD_EXP 5
14352: PPUSH
14353: LD_STRING D10BW-Lisa-1
14355: PPUSH
14356: CALL_OW 94
// end ; 3 :
14360: GO 14395
14362: LD_INT 3
14364: DOUBLE
14365: EQUAL
14366: IFTRUE 14370
14368: GO 14394
14370: POP
// begin CenterOnUnits ( Coonie ) ;
14371: LD_EXP 18
14375: PPUSH
14376: CALL_OW 85
// SayRadio ( Coonie , D10BW-Con-1 ) ;
14380: LD_EXP 18
14384: PPUSH
14385: LD_STRING D10BW-Con-1
14387: PPUSH
14388: CALL_OW 94
// end ; end ;
14392: GO 14395
14394: POP
// DialogueOFF ;
14395: CALL_OW 7
// Named_Americans = Named_Americans ^ JMM_woman ;
14399: LD_ADDR_EXP 62
14403: PUSH
14404: LD_EXP 62
14408: PUSH
14409: LD_EXP 37
14413: ADD
14414: ST_TO_ADDR
// All_americans = All_americans ^ JMM_woman ;
14415: LD_ADDR_EXP 61
14419: PUSH
14420: LD_EXP 61
14424: PUSH
14425: LD_EXP 37
14429: ADD
14430: ST_TO_ADDR
// ComMoveXY ( Woman_vehs , 97 , 167 ) ;
14431: LD_VAR 0 4
14435: PPUSH
14436: LD_INT 97
14438: PPUSH
14439: LD_INT 167
14441: PPUSH
14442: CALL_OW 111
// AddComMoveXY ( Woman_vehs , 102 , 147 ) ;
14446: LD_VAR 0 4
14450: PPUSH
14451: LD_INT 102
14453: PPUSH
14454: LD_INT 147
14456: PPUSH
14457: CALL_OW 171
// AddComMoveXY ( Woman_vehs , 96 , 128 ) ;
14461: LD_VAR 0 4
14465: PPUSH
14466: LD_INT 96
14468: PPUSH
14469: LD_INT 128
14471: PPUSH
14472: CALL_OW 171
// AddComMoveXY ( Woman_vehs , 80 , 108 ) ;
14476: LD_VAR 0 4
14480: PPUSH
14481: LD_INT 80
14483: PPUSH
14484: LD_INT 108
14486: PPUSH
14487: CALL_OW 171
// AddComMoveXY ( Woman_vehs , 63 , 92 ) ;
14491: LD_VAR 0 4
14495: PPUSH
14496: LD_INT 63
14498: PPUSH
14499: LD_INT 92
14501: PPUSH
14502: CALL_OW 171
// AddComMoveXY ( Woman_vehs , 47 , 63 ) ;
14506: LD_VAR 0 4
14510: PPUSH
14511: LD_INT 47
14513: PPUSH
14514: LD_INT 63
14516: PPUSH
14517: CALL_OW 171
// end ;
14521: PPOPN 4
14523: END
// every 0 0$2 trigger ( tick > Woman_Coming_Time ) and ( tick > Time_of_Ingame_Run_Over ) marked 12 do var New_veh , i , Un , Vsevolod_vehs ;
14524: LD_OWVAR 1
14528: PUSH
14529: LD_EXP 201
14533: GREATER
14534: PUSH
14535: LD_OWVAR 1
14539: PUSH
14540: LD_EXP 189
14544: GREATER
14545: AND
14546: IFFALSE 15300
14548: GO 14550
14550: DISABLE
14551: LD_INT 0
14553: PPUSH
14554: PPUSH
14555: PPUSH
14556: PPUSH
// begin Vsevolod_vehs = [ ] ;
14557: LD_ADDR_VAR 0 4
14561: PUSH
14562: EMPTY
14563: ST_TO_ADDR
// for i = 1 to 4 do
14564: LD_ADDR_VAR 0 2
14568: PUSH
14569: DOUBLE
14570: LD_INT 1
14572: DEC
14573: ST_TO_ADDR
14574: LD_INT 4
14576: PUSH
14577: FOR_TO
14578: IFFALSE 14631
// begin New_veh = CCreateVehicle ( nation_american , russians1 , 1 , us_medium_tracked , engine_siberite , control_computer , us_laser ) ;
14580: LD_ADDR_VAR 0 1
14584: PUSH
14585: LD_INT 1
14587: PPUSH
14588: LD_EXP 179
14592: PPUSH
14593: LD_INT 1
14595: PPUSH
14596: LD_INT 3
14598: PPUSH
14599: LD_INT 3
14601: PPUSH
14602: LD_INT 3
14604: PPUSH
14605: LD_INT 9
14607: PPUSH
14608: CALL 13914 0 7
14612: ST_TO_ADDR
// Vsevolod_vehs = Vsevolod_vehs ^ New_veh ;
14613: LD_ADDR_VAR 0 4
14617: PUSH
14618: LD_VAR 0 4
14622: PUSH
14623: LD_VAR 0 1
14627: ADD
14628: ST_TO_ADDR
// end ;
14629: GO 14577
14631: POP
14632: POP
// for i = 1 to 3 do
14633: LD_ADDR_VAR 0 2
14637: PUSH
14638: DOUBLE
14639: LD_INT 1
14641: DEC
14642: ST_TO_ADDR
14643: LD_INT 3
14645: PUSH
14646: FOR_TO
14647: IFFALSE 14700
// begin New_veh = CCreateVehicle ( nation_american , russians1 , 1 , us_medium_tracked , engine_siberite , control_computer , us_rocket_launcher ) ;
14649: LD_ADDR_VAR 0 1
14653: PUSH
14654: LD_INT 1
14656: PPUSH
14657: LD_EXP 179
14661: PPUSH
14662: LD_INT 1
14664: PPUSH
14665: LD_INT 3
14667: PPUSH
14668: LD_INT 3
14670: PPUSH
14671: LD_INT 3
14673: PPUSH
14674: LD_INT 7
14676: PPUSH
14677: CALL 13914 0 7
14681: ST_TO_ADDR
// Vsevolod_vehs = Vsevolod_vehs ^ New_veh ;
14682: LD_ADDR_VAR 0 4
14686: PUSH
14687: LD_VAR 0 4
14691: PUSH
14692: LD_VAR 0 1
14696: ADD
14697: ST_TO_ADDR
// end ;
14698: GO 14646
14700: POP
14701: POP
// New_veh = CCreateVehicle ( nation_american , russians1 , 1 , us_medium_tracked , engine_siberite , control_manual , us_rocket_launcher ) ;
14702: LD_ADDR_VAR 0 1
14706: PUSH
14707: LD_INT 1
14709: PPUSH
14710: LD_EXP 179
14714: PPUSH
14715: LD_INT 1
14717: PPUSH
14718: LD_INT 3
14720: PPUSH
14721: LD_INT 3
14723: PPUSH
14724: LD_INT 1
14726: PPUSH
14727: LD_INT 7
14729: PPUSH
14730: CALL 13914 0 7
14734: ST_TO_ADDR
// Vsevolod_vehs = Vsevolod_vehs ^ New_veh ;
14735: LD_ADDR_VAR 0 4
14739: PUSH
14740: LD_VAR 0 4
14744: PUSH
14745: LD_VAR 0 1
14749: ADD
14750: ST_TO_ADDR
// PlaceHumanInUnit ( Vsevolod , New_veh ) ;
14751: LD_EXP 25
14755: PPUSH
14756: LD_VAR 0 1
14760: PPUSH
14761: CALL_OW 52
// for Un in Vsevolod_vehs do
14765: LD_ADDR_VAR 0 3
14769: PUSH
14770: LD_VAR 0 4
14774: PUSH
14775: FOR_IN
14776: IFFALSE 14795
// PlaceUnitArea ( Un , Stev_place , false ) ;
14778: LD_VAR 0 3
14782: PPUSH
14783: LD_INT 35
14785: PPUSH
14786: LD_INT 0
14788: PPUSH
14789: CALL_OW 49
14793: GO 14775
14795: POP
14796: POP
// ComMoveXY ( Vsevolod_vehs , 135 , 180 ) ;
14797: LD_VAR 0 4
14801: PPUSH
14802: LD_INT 135
14804: PPUSH
14805: LD_INT 180
14807: PPUSH
14808: CALL_OW 111
// AddComMoveXY ( Vsevolod_vehs , 159 , 179 ) ;
14812: LD_VAR 0 4
14816: PPUSH
14817: LD_INT 159
14819: PPUSH
14820: LD_INT 179
14822: PPUSH
14823: CALL_OW 171
// WaitPos ( 159 , 179 , 10 , Vsevolod_vehs , 1 ) ;
14827: LD_INT 159
14829: PPUSH
14830: LD_INT 179
14832: PPUSH
14833: LD_INT 10
14835: PPUSH
14836: LD_VAR 0 4
14840: PPUSH
14841: LD_INT 1
14843: PPUSH
14844: CALL 17921 0 5
// AddComMoveXY ( Vsevolod_vehs , 174 , 170 ) ;
14848: LD_VAR 0 4
14852: PPUSH
14853: LD_INT 174
14855: PPUSH
14856: LD_INT 170
14858: PPUSH
14859: CALL_OW 171
// AddComMoveXY ( Vsevolod_vehs , 170 , 149 ) ;
14863: LD_VAR 0 4
14867: PPUSH
14868: LD_INT 170
14870: PPUSH
14871: LD_INT 149
14873: PPUSH
14874: CALL_OW 171
// AddComMoveXY ( Vsevolod_vehs , 156 , 134 ) ;
14878: LD_VAR 0 4
14882: PPUSH
14883: LD_INT 156
14885: PPUSH
14886: LD_INT 134
14888: PPUSH
14889: CALL_OW 171
// WaitPos ( 156 , 134 , 10 , Vsevolod_vehs , 1 ) ;
14893: LD_INT 156
14895: PPUSH
14896: LD_INT 134
14898: PPUSH
14899: LD_INT 10
14901: PPUSH
14902: LD_VAR 0 4
14906: PPUSH
14907: LD_INT 1
14909: PPUSH
14910: CALL 17921 0 5
// AddComMoveXY ( Vsevolod_vehs , 132 , 118 ) ;
14914: LD_VAR 0 4
14918: PPUSH
14919: LD_INT 132
14921: PPUSH
14922: LD_INT 118
14924: PPUSH
14925: CALL_OW 171
// AddComMoveXY ( Vsevolod_vehs , 113 , 97 ) ;
14929: LD_VAR 0 4
14933: PPUSH
14934: LD_INT 113
14936: PPUSH
14937: LD_INT 97
14939: PPUSH
14940: CALL_OW 171
// AddComMoveXY ( Vsevolod_vehs , 103 , 79 ) ;
14944: LD_VAR 0 4
14948: PPUSH
14949: LD_INT 103
14951: PPUSH
14952: LD_INT 79
14954: PPUSH
14955: CALL_OW 171
// WaitPos ( 103 , 79 , 10 , Vsevolod_vehs , 1 ) ;
14959: LD_INT 103
14961: PPUSH
14962: LD_INT 79
14964: PPUSH
14965: LD_INT 10
14967: PPUSH
14968: LD_VAR 0 4
14972: PPUSH
14973: LD_INT 1
14975: PPUSH
14976: CALL 17921 0 5
// AddComMoveXY ( Vsevolod_vehs , 73 , 62 ) ;
14980: LD_VAR 0 4
14984: PPUSH
14985: LD_INT 73
14987: PPUSH
14988: LD_INT 62
14990: PPUSH
14991: CALL_OW 171
// WaitPos ( 73 , 62 , 10 , Vsevolod_vehs , 1 ) ;
14995: LD_INT 73
14997: PPUSH
14998: LD_INT 62
15000: PPUSH
15001: LD_INT 10
15003: PPUSH
15004: LD_VAR 0 4
15008: PPUSH
15009: LD_INT 1
15011: PPUSH
15012: CALL 17921 0 5
// placeseeing ( 73 , 62 , americans , - 8 ) ;
15016: LD_INT 73
15018: PPUSH
15019: LD_INT 62
15021: PPUSH
15022: LD_EXP 176
15026: PPUSH
15027: LD_INT 8
15029: NEG
15030: PPUSH
15031: CALL_OW 330
// CenterOnXY ( 73 , 62 ) ;
15035: LD_INT 73
15037: PPUSH
15038: LD_INT 62
15040: PPUSH
15041: CALL_OW 84
// Wait ( 0 0$3 ) ;
15045: LD_INT 105
15047: PPUSH
15048: CALL_OW 67
// SA_OnVsevolodAppear ;
15052: CALL 56038 0 0
// DialogueON ;
15056: CALL_OW 6
// Say ( JMM , D10nB-JMM-1 ) ;
15060: LD_EXP 1
15064: PPUSH
15065: LD_STRING D10nB-JMM-1
15067: PPUSH
15068: CALL_OW 88
// Say ( Vsevolod , D10nB-Vse-1 ) ;
15072: LD_EXP 25
15076: PPUSH
15077: LD_STRING D10nB-Vse-1
15079: PPUSH
15080: CALL_OW 88
// if not ( IsOk ( Burlak ) ) then
15084: LD_EXP 19
15088: PPUSH
15089: CALL_OW 302
15093: NOT
15094: IFFALSE 15108
// Say ( Vsevolod ,  ) ;
15096: LD_EXP 25
15100: PPUSH
15101: LD_STRING 
15103: PPUSH
15104: CALL_OW 88
// Say ( JMM , D10nB-JMM-2 ) ;
15108: LD_EXP 1
15112: PPUSH
15113: LD_STRING D10nB-JMM-2
15115: PPUSH
15116: CALL_OW 88
// case Woman_in_am14 of 1 :
15120: LD_EXP 36
15124: PUSH
15125: LD_INT 1
15127: DOUBLE
15128: EQUAL
15129: IFTRUE 15133
15131: GO 15184
15133: POP
// begin Say ( Vsevolod , D10nB-Vse-2 ) ;
15134: LD_EXP 25
15138: PPUSH
15139: LD_STRING D10nB-Vse-2
15141: PPUSH
15142: CALL_OW 88
// Say ( JMM , D10nB-JMM-3 ) ;
15146: LD_EXP 1
15150: PPUSH
15151: LD_STRING D10nB-JMM-3
15153: PPUSH
15154: CALL_OW 88
// Say ( Vsevolod , D10nB-Vse-3 ) ;
15158: LD_EXP 25
15162: PPUSH
15163: LD_STRING D10nB-Vse-3
15165: PPUSH
15166: CALL_OW 88
// Say ( JMM , D10nB-JMM-4 ) ;
15170: LD_EXP 1
15174: PPUSH
15175: LD_STRING D10nB-JMM-4
15177: PPUSH
15178: CALL_OW 88
// end ; 2 :
15182: GO 15267
15184: LD_INT 2
15186: DOUBLE
15187: EQUAL
15188: IFTRUE 15192
15190: GO 15231
15192: POP
// begin Say ( JMM , D10nB-Vse-4 ) ;
15193: LD_EXP 1
15197: PPUSH
15198: LD_STRING D10nB-Vse-4
15200: PPUSH
15201: CALL_OW 88
// Say ( Vsevolod , D10nB-JMM-5 ) ;
15205: LD_EXP 25
15209: PPUSH
15210: LD_STRING D10nB-JMM-5
15212: PPUSH
15213: CALL_OW 88
// Say ( JMM , D10nB-Vse-5 ) ;
15217: LD_EXP 1
15221: PPUSH
15222: LD_STRING D10nB-Vse-5
15224: PPUSH
15225: CALL_OW 88
// end ; 3 :
15229: GO 15267
15231: LD_INT 3
15233: DOUBLE
15234: EQUAL
15235: IFTRUE 15239
15237: GO 15266
15239: POP
// begin Say ( Vsevolod , D10nB-Vse-5a ) ;
15240: LD_EXP 25
15244: PPUSH
15245: LD_STRING D10nB-Vse-5a
15247: PPUSH
15248: CALL_OW 88
// Say ( JMM , D10nB-JMM-6 ) ;
15252: LD_EXP 1
15256: PPUSH
15257: LD_STRING D10nB-JMM-6
15259: PPUSH
15260: CALL_OW 88
// end ; end ;
15264: GO 15267
15266: POP
// DialogueOFF ;
15267: CALL_OW 7
// removeseeing ( 73 , 62 , americans ) ;
15271: LD_INT 73
15273: PPUSH
15274: LD_INT 62
15276: PPUSH
15277: LD_EXP 176
15281: PPUSH
15282: CALL_OW 331
// AddMcUnits ( Russian1_reg_id , Vsevolod_vehs ) ;
15286: LD_EXP 237
15290: PPUSH
15291: LD_VAR 0 4
15295: PPUSH
15296: CALL_OW 390
// end ;
15300: PPOPN 4
15302: END
// every 0 0$1 trigger tick > Alliance_broadcast marked 10 do var list_of_q , selection ;
15303: LD_OWVAR 1
15307: PUSH
15308: LD_EXP 202
15312: GREATER
15313: IFFALSE 15719
15315: GO 15317
15317: DISABLE
15318: LD_INT 0
15320: PPUSH
15321: PPUSH
// begin DialogueON ;
15322: CALL_OW 6
// SayRadio ( Roth , D9-Roth-1 ) ;
15326: LD_EXP 20
15330: PPUSH
15331: LD_STRING D9-Roth-1
15333: PPUSH
15334: CALL_OW 94
// CenterOnUnits ( JMM ) ;
15338: LD_EXP 1
15342: PPUSH
15343: CALL_OW 85
// Say ( JMM , D9-JMM-1 ) ;
15347: LD_EXP 1
15351: PPUSH
15352: LD_STRING D9-JMM-1
15354: PPUSH
15355: CALL_OW 88
// SayRadio ( Roth , D9-Roth-2 ) ;
15359: LD_EXP 20
15363: PPUSH
15364: LD_STRING D9-Roth-2
15366: PPUSH
15367: CALL_OW 94
// SayRadio ( Roth , D9-Roth-2a ) ;
15371: LD_EXP 20
15375: PPUSH
15376: LD_STRING D9-Roth-2a
15378: PPUSH
15379: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-2 ) ;
15383: LD_EXP 26
15387: PPUSH
15388: LD_STRING D9-Pla-2
15390: PPUSH
15391: CALL_OW 94
// SayRadio ( Roth , D9-Roth-3 ) ;
15395: LD_EXP 20
15399: PPUSH
15400: LD_STRING D9-Roth-3
15402: PPUSH
15403: CALL_OW 94
// SayRadio ( Platonov , D9-Pla-3 ) ;
15407: LD_EXP 26
15411: PPUSH
15412: LD_STRING D9-Pla-3
15414: PPUSH
15415: CALL_OW 94
// SayRadio ( Roth , D9-Roth-4 ) ;
15419: LD_EXP 20
15423: PPUSH
15424: LD_STRING D9-Roth-4
15426: PPUSH
15427: CALL_OW 94
// list_of_q = [ 1 , 2 , 3 ] ;
15431: LD_ADDR_VAR 0 1
15435: PUSH
15436: LD_INT 1
15438: PUSH
15439: LD_INT 2
15441: PUSH
15442: LD_INT 3
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: LIST
15449: ST_TO_ADDR
// selection = SelectiveQuery ( Q9 , list_of_q ) ;
15450: LD_ADDR_VAR 0 2
15454: PUSH
15455: LD_STRING Q9
15457: PPUSH
15458: LD_VAR 0 1
15462: PPUSH
15463: CALL_OW 98
15467: ST_TO_ADDR
// case selection of 1 :
15468: LD_VAR 0 2
15472: PUSH
15473: LD_INT 1
15475: DOUBLE
15476: EQUAL
15477: IFTRUE 15481
15479: GO 15503
15481: POP
// begin Wait ( 0 0$3 ) ;
15482: LD_INT 105
15484: PPUSH
15485: CALL_OW 67
// SayRadio ( Roth , D9a-Roth-1 ) ;
15489: LD_EXP 20
15493: PPUSH
15494: LD_STRING D9a-Roth-1
15496: PPUSH
15497: CALL_OW 94
// end ; 2 :
15501: GO 15636
15503: LD_INT 2
15505: DOUBLE
15506: EQUAL
15507: IFTRUE 15511
15509: GO 15545
15511: POP
// begin Wait ( 0 0$0.5 ) ;
15512: LD_INT 18
15514: PPUSH
15515: CALL_OW 67
// Say ( JMM , D9b-JMM-1 ) ;
15519: LD_EXP 1
15523: PPUSH
15524: LD_STRING D9b-JMM-1
15526: PPUSH
15527: CALL_OW 88
// SayRadio ( Roth , D9b-Roth-1 ) ;
15531: LD_EXP 20
15535: PPUSH
15536: LD_STRING D9b-Roth-1
15538: PPUSH
15539: CALL_OW 94
// end ; 3 :
15543: GO 15636
15545: LD_INT 3
15547: DOUBLE
15548: EQUAL
15549: IFTRUE 15553
15551: GO 15635
15553: POP
// begin Wait ( 0 0$2 ) ;
15554: LD_INT 70
15556: PPUSH
15557: CALL_OW 67
// Say ( JMM , D9c-JMM-1 ) ;
15561: LD_EXP 1
15565: PPUSH
15566: LD_STRING D9c-JMM-1
15568: PPUSH
15569: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-1 ) ;
15573: LD_EXP 20
15577: PPUSH
15578: LD_STRING D9c-Roth-1
15580: PPUSH
15581: CALL_OW 94
// Say ( JMM , D9c-JMM-2 ) ;
15585: LD_EXP 1
15589: PPUSH
15590: LD_STRING D9c-JMM-2
15592: PPUSH
15593: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-2 ) ;
15597: LD_EXP 20
15601: PPUSH
15602: LD_STRING D9c-Roth-2
15604: PPUSH
15605: CALL_OW 94
// Say ( JMM , D9c-JMM-3 ) ;
15609: LD_EXP 1
15613: PPUSH
15614: LD_STRING D9c-JMM-3
15616: PPUSH
15617: CALL_OW 88
// SayRadio ( Roth , D9c-Roth-3 ) ;
15621: LD_EXP 20
15625: PPUSH
15626: LD_STRING D9c-Roth-3
15628: PPUSH
15629: CALL_OW 94
// end ; end ;
15633: GO 15636
15635: POP
// SayRadio ( Roth , D9cont-Roth-1 ) ;
15636: LD_EXP 20
15640: PPUSH
15641: LD_STRING D9cont-Roth-1
15643: PPUSH
15644: CALL_OW 94
// Say ( JMM , D9cont-JMM-1 ) ;
15648: LD_EXP 1
15652: PPUSH
15653: LD_STRING D9cont-JMM-1
15655: PPUSH
15656: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-2 ) ;
15660: LD_EXP 20
15664: PPUSH
15665: LD_STRING D9cont-Roth-2
15667: PPUSH
15668: CALL_OW 94
// Say ( JMM , D9cont-JMM-2 ) ;
15672: LD_EXP 1
15676: PPUSH
15677: LD_STRING D9cont-JMM-2
15679: PPUSH
15680: CALL_OW 88
// SayRadio ( Roth , D9cont-Roth-3 ) ;
15684: LD_EXP 20
15688: PPUSH
15689: LD_STRING D9cont-Roth-3
15691: PPUSH
15692: CALL_OW 94
// Say ( JMM , D9cont-JMM-3 ) ;
15696: LD_EXP 1
15700: PPUSH
15701: LD_STRING D9cont-JMM-3
15703: PPUSH
15704: CALL_OW 88
// DialogueOFF ;
15708: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
15712: LD_STRING M3
15714: PPUSH
15715: CALL_OW 337
// end ;
15719: PPOPN 2
15721: END
// every 0 0$1 trigger Behemots_broadcast < tick marked 10 do var Sold1 , list_of_all_males , UnNamed_males , Named_males ;
15722: LD_EXP 203
15726: PUSH
15727: LD_OWVAR 1
15731: LESS
15732: IFFALSE 16180
15734: GO 15736
15736: DISABLE
15737: LD_INT 0
15739: PPUSH
15740: PPUSH
15741: PPUSH
15742: PPUSH
// begin Sold1 = 0 ;
15743: LD_ADDR_VAR 0 1
15747: PUSH
15748: LD_INT 0
15750: ST_TO_ADDR
// BuildBehemots ;
15751: CALL 47790 0 0
// list_of_all_males = FilterAllUnits ( [ [ f_side , americans ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , f_not , [ [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ] ) ;
15755: LD_ADDR_VAR 0 2
15759: PUSH
15760: LD_INT 22
15762: PUSH
15763: LD_EXP 176
15767: PUSH
15768: EMPTY
15769: LIST
15770: LIST
15771: PUSH
15772: LD_INT 21
15774: PUSH
15775: LD_INT 1
15777: PUSH
15778: EMPTY
15779: LIST
15780: LIST
15781: PUSH
15782: LD_INT 26
15784: PUSH
15785: LD_INT 1
15787: PUSH
15788: EMPTY
15789: LIST
15790: LIST
15791: PUSH
15792: LD_INT 50
15794: PUSH
15795: EMPTY
15796: LIST
15797: PUSH
15798: LD_INT 3
15800: PUSH
15801: LD_INT 2
15803: PUSH
15804: LD_INT 25
15806: PUSH
15807: LD_INT 12
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: PUSH
15814: LD_INT 25
15816: PUSH
15817: LD_INT 16
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: PUSH
15824: LD_INT 25
15826: PUSH
15827: LD_INT 17
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: PUSH
15834: LD_INT 25
15836: PUSH
15837: LD_INT 15
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PUSH
15844: LD_INT 25
15846: PUSH
15847: LD_INT 17
15849: PUSH
15850: EMPTY
15851: LIST
15852: LIST
15853: PUSH
15854: EMPTY
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: PUSH
15862: EMPTY
15863: LIST
15864: PUSH
15865: EMPTY
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: PPUSH
15873: CALL_OW 69
15877: ST_TO_ADDR
// UnNamed_males = list_of_all_males diff [ JMM , Powell , Bobby , Cyrus , Frank , Brown , Gladstone , Cornell , Denis , Gary , Stevens ] ;
15878: LD_ADDR_VAR 0 3
15882: PUSH
15883: LD_VAR 0 2
15887: PUSH
15888: LD_EXP 1
15892: PUSH
15893: LD_EXP 2
15897: PUSH
15898: LD_EXP 3
15902: PUSH
15903: LD_EXP 4
15907: PUSH
15908: LD_EXP 6
15912: PUSH
15913: LD_EXP 7
15917: PUSH
15918: LD_EXP 9
15922: PUSH
15923: LD_EXP 10
15927: PUSH
15928: LD_EXP 11
15932: PUSH
15933: LD_EXP 15
15937: PUSH
15938: LD_EXP 17
15942: PUSH
15943: EMPTY
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: DIFF
15956: ST_TO_ADDR
// if UnNamed_males <> 0 then
15957: LD_VAR 0 3
15961: PUSH
15962: LD_INT 0
15964: NONEQUAL
15965: IFFALSE 15993
// begin Sold1 = UnNamed_males [ Rand ( 1 , UnNamed_males ) ] ;
15967: LD_ADDR_VAR 0 1
15971: PUSH
15972: LD_VAR 0 3
15976: PUSH
15977: LD_INT 1
15979: PPUSH
15980: LD_VAR 0 3
15984: PPUSH
15985: CALL_OW 12
15989: ARRAY
15990: ST_TO_ADDR
// end else
15991: GO 16067
// if list_of_all_males diff [ JMM , Powell ] <> 0 then
15993: LD_VAR 0 2
15997: PUSH
15998: LD_EXP 1
16002: PUSH
16003: LD_EXP 2
16007: PUSH
16008: EMPTY
16009: LIST
16010: LIST
16011: PUSH
16012: LD_INT 0
16014: NONEQUAL
16015: DIFF
16016: IFFALSE 16067
// begin list_of_all_males = list_of_all_males diff [ JMM , Powell ] ;
16018: LD_ADDR_VAR 0 2
16022: PUSH
16023: LD_VAR 0 2
16027: PUSH
16028: LD_EXP 1
16032: PUSH
16033: LD_EXP 2
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: DIFF
16042: ST_TO_ADDR
// Sold1 = list_of_all_males [ Rand ( 1 , list_of_all_males ) ] ;
16043: LD_ADDR_VAR 0 1
16047: PUSH
16048: LD_VAR 0 2
16052: PUSH
16053: LD_INT 1
16055: PPUSH
16056: LD_VAR 0 2
16060: PPUSH
16061: CALL_OW 12
16065: ARRAY
16066: ST_TO_ADDR
// end ; if Sold1 <> 0 then
16067: LD_VAR 0 1
16071: PUSH
16072: LD_INT 0
16074: NONEQUAL
16075: IFFALSE 16180
// begin CenterNowOnUnits ( JMM ) ;
16077: LD_EXP 1
16081: PPUSH
16082: CALL_OW 87
// DialogueON ;
16086: CALL_OW 6
// Wait ( 0 0$1 ) ;
16090: LD_INT 35
16092: PPUSH
16093: CALL_OW 67
// Say ( Sold1 , D11-Sol1-1 ) ;
16097: LD_VAR 0 1
16101: PPUSH
16102: LD_STRING D11-Sol1-1
16104: PPUSH
16105: CALL_OW 88
// SayRadio ( Platonov , D11-Pla-1 ) ;
16109: LD_EXP 26
16113: PPUSH
16114: LD_STRING D11-Pla-1
16116: PPUSH
16117: CALL_OW 94
// SayRadio ( Kovaljuk , D11-Kov-1 ) ;
16121: LD_EXP 27
16125: PPUSH
16126: LD_STRING D11-Kov-1
16128: PPUSH
16129: CALL_OW 94
// SayRadio ( Platonov , D11-Pla-2 ) ;
16133: LD_EXP 26
16137: PPUSH
16138: LD_STRING D11-Pla-2
16140: PPUSH
16141: CALL_OW 94
// Say ( Sold1 , D11-Sol1-2 ) ;
16145: LD_VAR 0 1
16149: PPUSH
16150: LD_STRING D11-Sol1-2
16152: PPUSH
16153: CALL_OW 88
// Say ( JMM , D11-JMM-2 ) ;
16157: LD_EXP 1
16161: PPUSH
16162: LD_STRING D11-JMM-2
16164: PPUSH
16165: CALL_OW 88
// DialogueOff ;
16169: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
16173: LD_STRING M4
16175: PPUSH
16176: CALL_OW 337
// end ; end ;
16180: PPOPN 4
16182: END
// every 0 0$1 trigger Alaskite_Bomb_Time < tick marked 10 do var list_of_q , selection , Americans_has_sib_rocket ;
16183: LD_EXP 212
16187: PUSH
16188: LD_OWVAR 1
16192: LESS
16193: IFFALSE 16528
16195: GO 16197
16197: DISABLE
16198: LD_INT 0
16200: PPUSH
16201: PPUSH
16202: PPUSH
// begin DialogueON ;
16203: CALL_OW 6
// Say ( Platonov , D15-Pla-1 ) ;
16207: LD_EXP 26
16211: PPUSH
16212: LD_STRING D15-Pla-1
16214: PPUSH
16215: CALL_OW 88
// list_of_q = [ 1 , 2 , 3 , 4 ] ;
16219: LD_ADDR_VAR 0 1
16223: PUSH
16224: LD_INT 1
16226: PUSH
16227: LD_INT 2
16229: PUSH
16230: LD_INT 3
16232: PUSH
16233: LD_INT 4
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: ST_TO_ADDR
// selection = SelectiveQuery ( Q15a , list_of_q ) ;
16242: LD_ADDR_VAR 0 2
16246: PUSH
16247: LD_STRING Q15a
16249: PPUSH
16250: LD_VAR 0 1
16254: PPUSH
16255: CALL_OW 98
16259: ST_TO_ADDR
// case selection of 1 :
16260: LD_VAR 0 2
16264: PUSH
16265: LD_INT 1
16267: DOUBLE
16268: EQUAL
16269: IFTRUE 16273
16271: GO 16301
16273: POP
// begin Say ( JMM , D15a-JMM-1 ) ;
16274: LD_EXP 1
16278: PPUSH
16279: LD_STRING D15a-JMM-1
16281: PPUSH
16282: CALL_OW 88
// enable ( JMM_has_surrounded ) ;
16286: LD_EXP 155
16290: ENABLE_MARKED
// Friend_has_to_escape = true ;
16291: LD_ADDR_EXP 228
16295: PUSH
16296: LD_INT 1
16298: ST_TO_ADDR
// end ; 2 :
16299: GO 16524
16301: LD_INT 2
16303: DOUBLE
16304: EQUAL
16305: IFTRUE 16309
16307: GO 16350
16309: POP
// begin Say ( JMM , D15b-JMM-1 ) ;
16310: LD_EXP 1
16314: PPUSH
16315: LD_STRING D15b-JMM-1
16317: PPUSH
16318: CALL_OW 88
// Say ( Platonov , D15b-Pla-1 ) ;
16322: LD_EXP 26
16326: PPUSH
16327: LD_STRING D15b-Pla-1
16329: PPUSH
16330: CALL_OW 88
// Time_to_Think_Over = tick + 3 3$0 ;
16334: LD_ADDR_EXP 217
16338: PUSH
16339: LD_OWVAR 1
16343: PUSH
16344: LD_INT 6300
16346: PLUS
16347: ST_TO_ADDR
// end ; 3 :
16348: GO 16524
16350: LD_INT 3
16352: DOUBLE
16353: EQUAL
16354: IFTRUE 16358
16356: GO 16401
16358: POP
// begin Say ( JMM , D15c-JMM-1 ) ;
16359: LD_EXP 1
16363: PPUSH
16364: LD_STRING D15c-JMM-1
16366: PPUSH
16367: CALL_OW 88
// Say ( Platonov , D15c-Pla-1 ) ;
16371: LD_EXP 26
16375: PPUSH
16376: LD_STRING D15c-Pla-1
16378: PPUSH
16379: CALL_OW 88
// Russian_Siberite_Attack = true ;
16383: LD_ADDR_EXP 215
16387: PUSH
16388: LD_INT 1
16390: ST_TO_ADDR
// Friend_has_to_escape = true ;
16391: LD_ADDR_EXP 228
16395: PUSH
16396: LD_INT 1
16398: ST_TO_ADDR
// end ; 4 :
16399: GO 16524
16401: LD_INT 4
16403: DOUBLE
16404: EQUAL
16405: IFTRUE 16409
16407: GO 16523
16409: POP
// begin Say ( JMM , D15d-JMM-1 ) ;
16410: LD_EXP 1
16414: PPUSH
16415: LD_STRING D15d-JMM-1
16417: PPUSH
16418: CALL_OW 88
// Say ( Platonov , D15d-Pla-1 ) ;
16422: LD_EXP 26
16426: PPUSH
16427: LD_STRING D15d-Pla-1
16429: PPUSH
16430: CALL_OW 88
// if Friend_Accepted then
16434: LD_EXP 219
16438: IFFALSE 16456
// The_Last_Time = tick + 1 1$0 else
16440: LD_ADDR_EXP 218
16444: PUSH
16445: LD_OWVAR 1
16449: PUSH
16450: LD_INT 2100
16452: PLUS
16453: ST_TO_ADDR
16454: GO 16470
// The_Last_Time = tick + 5 5$0 ;
16456: LD_ADDR_EXP 218
16460: PUSH
16461: LD_OWVAR 1
16465: PUSH
16466: LD_INT 10500
16468: PLUS
16469: ST_TO_ADDR
// Americans_has_sib_rocket = FilterAllUnits ( [ [ f_side , americans ] , [ f_weapon , us_siberium_rocket ] ] ) ;
16470: LD_ADDR_VAR 0 3
16474: PUSH
16475: LD_INT 22
16477: PUSH
16478: LD_EXP 176
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: PUSH
16487: LD_INT 34
16489: PUSH
16490: LD_INT 8
16492: PUSH
16493: EMPTY
16494: LIST
16495: LIST
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: PPUSH
16501: CALL_OW 69
16505: ST_TO_ADDR
// if not ( Americans_has_sib_rocket ) then
16506: LD_VAR 0 3
16510: NOT
16511: IFFALSE 16521
// Friend_has_to_escape = true ;
16513: LD_ADDR_EXP 228
16517: PUSH
16518: LD_INT 1
16520: ST_TO_ADDR
// end ; end ;
16521: GO 16524
16523: POP
// DialogueOFF ;
16524: CALL_OW 7
// end ;
16528: PPOPN 3
16530: END
// every 0 0$1 trigger ( Time_to_Think_Over <> 0 ) and ( Time_to_Think_Over < tick ) marked 10 do var selection , list_of_q , Americans_has_sib_rocket ;
16531: LD_EXP 217
16535: PUSH
16536: LD_INT 0
16538: NONEQUAL
16539: PUSH
16540: LD_EXP 217
16544: PUSH
16545: LD_OWVAR 1
16549: LESS
16550: AND
16551: IFFALSE 16821
16553: GO 16555
16555: DISABLE
16556: LD_INT 0
16558: PPUSH
16559: PPUSH
16560: PPUSH
// begin DialogueON ;
16561: CALL_OW 6
// list_of_q = [ 1 , 3 , 4 ] ;
16565: LD_ADDR_VAR 0 2
16569: PUSH
16570: LD_INT 1
16572: PUSH
16573: LD_INT 3
16575: PUSH
16576: LD_INT 4
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: LIST
16583: ST_TO_ADDR
// selection = SelectiveQuery ( Q15a , list_of_q ) ;
16584: LD_ADDR_VAR 0 1
16588: PUSH
16589: LD_STRING Q15a
16591: PPUSH
16592: LD_VAR 0 2
16596: PPUSH
16597: CALL_OW 98
16601: ST_TO_ADDR
// case selection of 1 :
16602: LD_VAR 0 1
16606: PUSH
16607: LD_INT 1
16609: DOUBLE
16610: EQUAL
16611: IFTRUE 16615
16613: GO 16643
16615: POP
// begin Say ( JMM , D15a-JMM-1 ) ;
16616: LD_EXP 1
16620: PPUSH
16621: LD_STRING D15a-JMM-1
16623: PPUSH
16624: CALL_OW 88
// enable ( JMM_has_surrounded ) ;
16628: LD_EXP 155
16632: ENABLE_MARKED
// Friend_has_to_escape = true ;
16633: LD_ADDR_EXP 228
16637: PUSH
16638: LD_INT 1
16640: ST_TO_ADDR
// end ; 3 :
16641: GO 16817
16643: LD_INT 3
16645: DOUBLE
16646: EQUAL
16647: IFTRUE 16651
16649: GO 16694
16651: POP
// begin Say ( JMM , D15c-JMM-1 ) ;
16652: LD_EXP 1
16656: PPUSH
16657: LD_STRING D15c-JMM-1
16659: PPUSH
16660: CALL_OW 88
// Say ( Platonov , D15c-Pla-1 ) ;
16664: LD_EXP 26
16668: PPUSH
16669: LD_STRING D15c-Pla-1
16671: PPUSH
16672: CALL_OW 88
// Russian_Siberite_Attack = true ;
16676: LD_ADDR_EXP 215
16680: PUSH
16681: LD_INT 1
16683: ST_TO_ADDR
// Friend_has_to_escape = true ;
16684: LD_ADDR_EXP 228
16688: PUSH
16689: LD_INT 1
16691: ST_TO_ADDR
// end ; 4 :
16692: GO 16817
16694: LD_INT 4
16696: DOUBLE
16697: EQUAL
16698: IFTRUE 16702
16700: GO 16816
16702: POP
// begin Say ( JMM , D15d-JMM-1a ) ;
16703: LD_EXP 1
16707: PPUSH
16708: LD_STRING D15d-JMM-1a
16710: PPUSH
16711: CALL_OW 88
// Say ( Platonov , D15d-Pla-1 ) ;
16715: LD_EXP 26
16719: PPUSH
16720: LD_STRING D15d-Pla-1
16722: PPUSH
16723: CALL_OW 88
// if Friend_Accepted then
16727: LD_EXP 219
16731: IFFALSE 16749
// The_Last_Time = tick + 1 1$0 else
16733: LD_ADDR_EXP 218
16737: PUSH
16738: LD_OWVAR 1
16742: PUSH
16743: LD_INT 2100
16745: PLUS
16746: ST_TO_ADDR
16747: GO 16763
// The_Last_Time = tick + 5 5$0 ;
16749: LD_ADDR_EXP 218
16753: PUSH
16754: LD_OWVAR 1
16758: PUSH
16759: LD_INT 10500
16761: PLUS
16762: ST_TO_ADDR
// Americans_has_sib_rocket = FilterAllUnits ( [ [ f_side , americans ] , [ f_weapon , us_siberium_rocket ] ] ) ;
16763: LD_ADDR_VAR 0 3
16767: PUSH
16768: LD_INT 22
16770: PUSH
16771: LD_EXP 176
16775: PUSH
16776: EMPTY
16777: LIST
16778: LIST
16779: PUSH
16780: LD_INT 34
16782: PUSH
16783: LD_INT 8
16785: PUSH
16786: EMPTY
16787: LIST
16788: LIST
16789: PUSH
16790: EMPTY
16791: LIST
16792: LIST
16793: PPUSH
16794: CALL_OW 69
16798: ST_TO_ADDR
// if not ( Americans_has_sib_rocket ) then
16799: LD_VAR 0 3
16803: NOT
16804: IFFALSE 16814
// Friend_has_to_escape = true ;
16806: LD_ADDR_EXP 228
16810: PUSH
16811: LD_INT 1
16813: ST_TO_ADDR
// end ; end ;
16814: GO 16817
16816: POP
// DialogueOFF ;
16817: CALL_OW 7
// end ;
16821: PPOPN 3
16823: END
// function FriendSelectedDialogue ; begin
16824: LD_INT 0
16826: PPUSH
// ComStop ( Friend ) ;
16827: LD_EXP 21
16831: PPUSH
16832: CALL_OW 141
// CenterNowOnUnits ( Friend ) ;
16836: LD_EXP 21
16840: PPUSH
16841: CALL_OW 87
// DialogueON ;
16845: CALL_OW 6
// Say ( JMM , D16-JMM-1 ) ;
16849: LD_EXP 1
16853: PPUSH
16854: LD_STRING D16-JMM-1
16856: PPUSH
16857: CALL_OW 88
// Say ( Friend , D16-Friend-1 ) ;
16861: LD_EXP 21
16865: PPUSH
16866: LD_STRING D16-Friend-1
16868: PPUSH
16869: CALL_OW 88
// Say ( JMM , D16-JMM-2 ) ;
16873: LD_EXP 1
16877: PPUSH
16878: LD_STRING D16-JMM-2
16880: PPUSH
16881: CALL_OW 88
// DialogueOFF ;
16885: CALL_OW 7
// end ;
16889: LD_VAR 0 1
16893: RET
// every 0 0$1 trigger ( Friend_has_to_escape ) and IsOk ( Friend ) do
16894: LD_EXP 228
16898: PUSH
16899: LD_EXP 21
16903: PPUSH
16904: CALL_OW 302
16908: AND
16909: IFFALSE 17056
16911: GO 16913
16913: DISABLE
// begin disable ;
16914: DISABLE
// if ( Alaskite_Bomb_Time + 0 0$15 < tick ) then
16915: LD_EXP 212
16919: PUSH
16920: LD_INT 525
16922: PLUS
16923: PUSH
16924: LD_OWVAR 1
16928: LESS
16929: IFFALSE 17055
// begin if IsSelected ( Friend ) then
16931: LD_EXP 21
16935: PPUSH
16936: CALL_OW 306
16940: IFFALSE 16951
// DeselectUnits ( Friend ) ;
16942: LD_EXP 21
16946: PPUSH
16947: CALL_OW 491
// enable ( Friend_Escapes ) ;
16951: LD_EXP 156
16955: ENABLE_MARKED
// ComMoveXY ( Friend , 20 , 2 ) ;
16956: LD_EXP 21
16960: PPUSH
16961: LD_INT 20
16963: PPUSH
16964: LD_INT 2
16966: PPUSH
16967: CALL_OW 111
// AddComHold ( Friend ) ;
16971: LD_EXP 21
16975: PPUSH
16976: CALL_OW 200
// Wait ( 0 0$0.5 ) ;
16980: LD_INT 18
16982: PPUSH
16983: CALL_OW 67
// while ( HasTask ( Friend ) and not ( IsSelected ( Friend ) ) ) do
16987: LD_EXP 21
16991: PPUSH
16992: CALL_OW 314
16996: PUSH
16997: LD_EXP 21
17001: PPUSH
17002: CALL_OW 306
17006: NOT
17007: AND
17008: IFFALSE 17019
// Wait ( 0 0$1 ) ;
17010: LD_INT 35
17012: PPUSH
17013: CALL_OW 67
17017: GO 16987
// if IsSelected ( Friend ) then
17019: LD_EXP 21
17023: PPUSH
17024: CALL_OW 306
17028: IFFALSE 17036
// FriendSelectedDialogue else
17030: CALL 16824 0 0
17034: GO 17053
// begin DestroyUnit ( Friend ) ;
17036: LD_EXP 21
17040: PPUSH
17041: CALL_OW 65
// Friend_escaped = true ;
17045: LD_ADDR_EXP 220
17049: PUSH
17050: LD_INT 1
17052: ST_TO_ADDR
// end ; end else
17053: GO 17056
// enable ;
17055: ENABLE
// end ;
17056: END
// every 0 0$1 trigger ( The_Last_Time <> 0 ) and ( The_Last_Time < tick ) marked 10 do var Americans_has_sib_rocket , Sold1 , list_of_all_males , UnNamed_males , Named_males ;
17057: LD_EXP 218
17061: PUSH
17062: LD_INT 0
17064: NONEQUAL
17065: PUSH
17066: LD_EXP 218
17070: PUSH
17071: LD_OWVAR 1
17075: LESS
17076: AND
17077: IFFALSE 17635
17079: GO 17081
17081: DISABLE
17082: LD_INT 0
17084: PPUSH
17085: PPUSH
17086: PPUSH
17087: PPUSH
17088: PPUSH
// begin Named_males = [ Bobby , Cyrus , Frank , Brown , Gladstone , Cornell , Denis , Gary , Stevens ] ;
17089: LD_ADDR_VAR 0 5
17093: PUSH
17094: LD_EXP 3
17098: PUSH
17099: LD_EXP 4
17103: PUSH
17104: LD_EXP 6
17108: PUSH
17109: LD_EXP 7
17113: PUSH
17114: LD_EXP 9
17118: PUSH
17119: LD_EXP 10
17123: PUSH
17124: LD_EXP 11
17128: PUSH
17129: LD_EXP 15
17133: PUSH
17134: LD_EXP 17
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: ST_TO_ADDR
// list_of_all_males = FilterAllUnits ( [ [ f_side , americans ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , f_not , [ [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ] ) ;
17150: LD_ADDR_VAR 0 3
17154: PUSH
17155: LD_INT 22
17157: PUSH
17158: LD_EXP 176
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: PUSH
17167: LD_INT 21
17169: PUSH
17170: LD_INT 1
17172: PUSH
17173: EMPTY
17174: LIST
17175: LIST
17176: PUSH
17177: LD_INT 26
17179: PUSH
17180: LD_INT 1
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: PUSH
17187: LD_INT 50
17189: PUSH
17190: EMPTY
17191: LIST
17192: PUSH
17193: LD_INT 3
17195: PUSH
17196: LD_INT 2
17198: PUSH
17199: LD_INT 25
17201: PUSH
17202: LD_INT 12
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: PUSH
17209: LD_INT 25
17211: PUSH
17212: LD_INT 16
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: PUSH
17219: LD_INT 25
17221: PUSH
17222: LD_INT 17
17224: PUSH
17225: EMPTY
17226: LIST
17227: LIST
17228: PUSH
17229: LD_INT 25
17231: PUSH
17232: LD_INT 15
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: PUSH
17239: LD_INT 25
17241: PUSH
17242: LD_INT 17
17244: PUSH
17245: EMPTY
17246: LIST
17247: LIST
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: PUSH
17257: EMPTY
17258: LIST
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: PPUSH
17268: CALL_OW 69
17272: ST_TO_ADDR
// UnNamed_males = list_of_all_males diff ( [ JMM , Powell ] ^ Named_males ) ;
17273: LD_ADDR_VAR 0 4
17277: PUSH
17278: LD_VAR 0 3
17282: PUSH
17283: LD_EXP 1
17287: PUSH
17288: LD_EXP 2
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: LD_VAR 0 5
17301: ADD
17302: DIFF
17303: ST_TO_ADDR
// if UnNamed_males <> 0 then
17304: LD_VAR 0 4
17308: PUSH
17309: LD_INT 0
17311: NONEQUAL
17312: IFFALSE 17340
// begin Sold1 = list_of_all_males [ Rand ( 1 , list_of_all_males ) ] ;
17314: LD_ADDR_VAR 0 2
17318: PUSH
17319: LD_VAR 0 3
17323: PUSH
17324: LD_INT 1
17326: PPUSH
17327: LD_VAR 0 3
17331: PPUSH
17332: CALL_OW 12
17336: ARRAY
17337: ST_TO_ADDR
// end else
17338: GO 17409
// begin Named_males = UnitFilter ( Named_males , [ [ f_ok ] , [ f_sex , sex_male ] ] ) ;
17340: LD_ADDR_VAR 0 5
17344: PUSH
17345: LD_VAR 0 5
17349: PPUSH
17350: LD_INT 50
17352: PUSH
17353: EMPTY
17354: LIST
17355: PUSH
17356: LD_INT 26
17358: PUSH
17359: LD_INT 1
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: PPUSH
17370: CALL_OW 72
17374: ST_TO_ADDR
// if named_males <> 0 then
17375: LD_VAR 0 5
17379: PUSH
17380: LD_INT 0
17382: NONEQUAL
17383: IFFALSE 17409
// Sold1 = Named_males [ Rand ( 1 , Named_males ) ] ;
17385: LD_ADDR_VAR 0 2
17389: PUSH
17390: LD_VAR 0 5
17394: PUSH
17395: LD_INT 1
17397: PPUSH
17398: LD_VAR 0 5
17402: PPUSH
17403: CALL_OW 12
17407: ARRAY
17408: ST_TO_ADDR
// end ; Americans_has_sib_rocket = FilterAllUnits ( [ [ f_side , americans ] , [ f_weapon , us_siberium_rocket ] ] ) ;
17409: LD_ADDR_VAR 0 1
17413: PUSH
17414: LD_INT 22
17416: PUSH
17417: LD_EXP 176
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: PUSH
17426: LD_INT 34
17428: PUSH
17429: LD_INT 8
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: PPUSH
17440: CALL_OW 69
17444: ST_TO_ADDR
// DialogueON ;
17445: CALL_OW 6
// if ( Americans_has_sib_rocket = 0 ) and Friend_Accepted then
17449: LD_VAR 0 1
17453: PUSH
17454: LD_INT 0
17456: EQUAL
17457: PUSH
17458: LD_EXP 219
17462: AND
17463: IFFALSE 17568
// begin Say ( Platonov , D16a-Pla-1 ) ;
17465: LD_EXP 26
17469: PPUSH
17470: LD_STRING D16a-Pla-1
17472: PPUSH
17473: CALL_OW 88
// if IsOk ( Stevens ) then
17477: LD_EXP 17
17481: PPUSH
17482: CALL_OW 302
17486: IFFALSE 17502
// Say ( Stevens , D16a-Huck-1 ) else
17488: LD_EXP 17
17492: PPUSH
17493: LD_STRING D16a-Huck-1
17495: PPUSH
17496: CALL_OW 88
17500: GO 17514
// Say ( Sold1 , D16a-Sol1-1 ) ;
17502: LD_VAR 0 2
17506: PPUSH
17507: LD_STRING D16a-Sol1-1
17509: PPUSH
17510: CALL_OW 88
// if Friend_Escaped then
17514: LD_EXP 220
17518: IFFALSE 17534
// Say ( JMM , D16a-JMM-1 ) else
17520: LD_EXP 1
17524: PPUSH
17525: LD_STRING D16a-JMM-1
17527: PPUSH
17528: CALL_OW 88
17532: GO 17558
// begin Say ( JMM , D16a-JMM-1a ) ;
17534: LD_EXP 1
17538: PPUSH
17539: LD_STRING D16a-JMM-1a
17541: PPUSH
17542: CALL_OW 88
// Say ( Friend , D16a-Friend-1 ) ;
17546: LD_EXP 21
17550: PPUSH
17551: LD_STRING D16a-Friend-1
17553: PPUSH
17554: CALL_OW 88
// end ; Russian_Siberite_Attack = true ;
17558: LD_ADDR_EXP 215
17562: PUSH
17563: LD_INT 1
17565: ST_TO_ADDR
// end else
17566: GO 17631
// if ( Americans_has_sib_rocket = 0 ) and not ( Friend_Accepted ) then
17568: LD_VAR 0 1
17572: PUSH
17573: LD_INT 0
17575: EQUAL
17576: PUSH
17577: LD_EXP 219
17581: NOT
17582: AND
17583: IFFALSE 17619
// begin Say ( Platonov , D16b-Pla-1 ) ;
17585: LD_EXP 26
17589: PPUSH
17590: LD_STRING D16b-Pla-1
17592: PPUSH
17593: CALL_OW 88
// Say ( JMM , D16b-JMM-1 ) ;
17597: LD_EXP 1
17601: PPUSH
17602: LD_STRING D16b-JMM-1
17604: PPUSH
17605: CALL_OW 88
// Russian_Siberite_Attack = true ;
17609: LD_ADDR_EXP 215
17613: PUSH
17614: LD_INT 1
17616: ST_TO_ADDR
// end else
17617: GO 17631
// begin Say ( Platonov , D16c-Pla-1 ) ;
17619: LD_EXP 26
17623: PPUSH
17624: LD_STRING D16c-Pla-1
17626: PPUSH
17627: CALL_OW 88
// end ; DialogueOFF ;
17631: CALL_OW 7
// end ;
17635: PPOPN 5
17637: END
// every 0 0$2 trigger CenterJMM do var X , Y , NewX , NewY ;
17638: LD_EXP 68
17642: IFFALSE 17754
17644: GO 17646
17646: DISABLE
17647: LD_INT 0
17649: PPUSH
17650: PPUSH
17651: PPUSH
17652: PPUSH
// begin X = GetX ( JMM_veh ) ;
17653: LD_ADDR_VAR 0 1
17657: PUSH
17658: LD_EXP 57
17662: PPUSH
17663: CALL_OW 250
17667: ST_TO_ADDR
// Y = GetY ( Jmm_veh ) ;
17668: LD_ADDR_VAR 0 2
17672: PUSH
17673: LD_EXP 57
17677: PPUSH
17678: CALL_OW 251
17682: ST_TO_ADDR
// NewX = ShiftX ( X , GetDir ( JMM_veh ) , 5 ) ;
17683: LD_ADDR_VAR 0 3
17687: PUSH
17688: LD_VAR 0 1
17692: PPUSH
17693: LD_EXP 57
17697: PPUSH
17698: CALL_OW 254
17702: PPUSH
17703: LD_INT 5
17705: PPUSH
17706: CALL_OW 272
17710: ST_TO_ADDR
// NewY = ShiftY ( Y , GetDir ( JMM_veh ) , 5 ) ;
17711: LD_ADDR_VAR 0 4
17715: PUSH
17716: LD_VAR 0 2
17720: PPUSH
17721: LD_EXP 57
17725: PPUSH
17726: CALL_OW 254
17730: PPUSH
17731: LD_INT 5
17733: PPUSH
17734: CALL_OW 273
17738: ST_TO_ADDR
// CenterOnXY ( NewX , NewY ) ;
17739: LD_VAR 0 3
17743: PPUSH
17744: LD_VAR 0 4
17748: PPUSH
17749: CALL_OW 84
// enable ;
17753: ENABLE
// end ; end_of_file
17754: PPOPN 4
17756: END
// var taken ; export function ComMoveXYR ( Un , x , y , r , b ) ; var Hex ; begin
17757: LD_INT 0
17759: PPUSH
17760: PPUSH
// Hex = RandHexXYR ( x , y , r , b ) ;
17761: LD_ADDR_VAR 0 7
17765: PUSH
17766: LD_VAR 0 2
17770: PPUSH
17771: LD_VAR 0 3
17775: PPUSH
17776: LD_VAR 0 4
17780: PPUSH
17781: LD_VAR 0 5
17785: PPUSH
17786: CALL_OW 17
17790: ST_TO_ADDR
// ComMoveXY ( Un , Hex [ 1 ] , Hex [ 2 ] ) end ;
17791: LD_VAR 0 1
17795: PPUSH
17796: LD_VAR 0 7
17800: PUSH
17801: LD_INT 1
17803: ARRAY
17804: PPUSH
17805: LD_VAR 0 7
17809: PUSH
17810: LD_INT 2
17812: ARRAY
17813: PPUSH
17814: CALL_OW 111
17818: LD_VAR 0 6
17822: RET
// export function WaitTask ( list_of_units , reaction ) ; var i , busy ; begin
17823: LD_INT 0
17825: PPUSH
17826: PPUSH
17827: PPUSH
// wait ( 2 ) ;
17828: LD_INT 2
17830: PPUSH
17831: CALL_OW 67
// repeat busy = false ;
17835: LD_ADDR_VAR 0 5
17839: PUSH
17840: LD_INT 0
17842: ST_TO_ADDR
// for i in list_of_units do
17843: LD_ADDR_VAR 0 4
17847: PUSH
17848: LD_VAR 0 1
17852: PUSH
17853: FOR_IN
17854: IFFALSE 17888
// if IsOk ( i ) then
17856: LD_VAR 0 4
17860: PPUSH
17861: CALL_OW 302
17865: IFFALSE 17886
// if HasTask ( i ) then
17867: LD_VAR 0 4
17871: PPUSH
17872: CALL_OW 314
17876: IFFALSE 17886
// begin busy = true ;
17878: LD_ADDR_VAR 0 5
17882: PUSH
17883: LD_INT 1
17885: ST_TO_ADDR
// end ;
17886: GO 17853
17888: POP
17889: POP
// if busy then
17890: LD_VAR 0 5
17894: IFFALSE 17909
// wait ( 0 0$1 * reaction ) ;
17896: LD_INT 35
17898: PUSH
17899: LD_VAR 0 2
17903: MUL
17904: PPUSH
17905: CALL_OW 67
// until not ( busy ) ;
17909: LD_VAR 0 5
17913: NOT
17914: IFFALSE 17835
// end ;
17916: LD_VAR 0 3
17920: RET
// export function WaitPos ( x_pos , y_pos , dist , list_of_units , reaction ) ; var i , are_at_position ; begin
17921: LD_INT 0
17923: PPUSH
17924: PPUSH
17925: PPUSH
// wait ( 2 ) ;
17926: LD_INT 2
17928: PPUSH
17929: CALL_OW 67
// repeat are_at_position = true ;
17933: LD_ADDR_VAR 0 8
17937: PUSH
17938: LD_INT 1
17940: ST_TO_ADDR
// for i in list_of_units do
17941: LD_ADDR_VAR 0 7
17945: PUSH
17946: LD_VAR 0 4
17950: PUSH
17951: FOR_IN
17952: IFFALSE 18002
// if IsOk ( i ) then
17954: LD_VAR 0 7
17958: PPUSH
17959: CALL_OW 302
17963: IFFALSE 18000
// if GetDistUnitXY ( i , x_pos , y_pos ) > dist then
17965: LD_VAR 0 7
17969: PPUSH
17970: LD_VAR 0 1
17974: PPUSH
17975: LD_VAR 0 2
17979: PPUSH
17980: CALL_OW 297
17984: PUSH
17985: LD_VAR 0 3
17989: GREATER
17990: IFFALSE 18000
// are_at_position = false ;
17992: LD_ADDR_VAR 0 8
17996: PUSH
17997: LD_INT 0
17999: ST_TO_ADDR
18000: GO 17951
18002: POP
18003: POP
// if not ( are_at_position ) then
18004: LD_VAR 0 8
18008: NOT
18009: IFFALSE 18024
// wait ( 0 0$1 * reaction ) ;
18011: LD_INT 35
18013: PUSH
18014: LD_VAR 0 5
18018: MUL
18019: PPUSH
18020: CALL_OW 67
// until are_at_position ;
18024: LD_VAR 0 8
18028: IFFALSE 17933
// end ;
18030: LD_VAR 0 6
18034: RET
// export function FindMaxSumSkill ( Uns , sex ) ; var Skill_Sum , Selected_unit , New_Skill_Sum , i ; begin
18035: LD_INT 0
18037: PPUSH
18038: PPUSH
18039: PPUSH
18040: PPUSH
18041: PPUSH
// Skill_Sum = - 1 ;
18042: LD_ADDR_VAR 0 4
18046: PUSH
18047: LD_INT 1
18049: NEG
18050: ST_TO_ADDR
// Selected_unit = 0 ;
18051: LD_ADDR_VAR 0 5
18055: PUSH
18056: LD_INT 0
18058: ST_TO_ADDR
// for i = 1 to Uns do
18059: LD_ADDR_VAR 0 7
18063: PUSH
18064: DOUBLE
18065: LD_INT 1
18067: DEC
18068: ST_TO_ADDR
18069: LD_VAR 0 1
18073: PUSH
18074: FOR_TO
18075: IFFALSE 18234
// begin New_Skill_Sum = GetSkill ( Uns [ i ] , skill_combat ) + GetSkill ( Uns [ i ] , skill_engineering ) + GetSkill ( Uns [ i ] , skill_mechanical ) + GetSkill ( Uns [ i ] , skill_scientistic ) ;
18077: LD_ADDR_VAR 0 6
18081: PUSH
18082: LD_VAR 0 1
18086: PUSH
18087: LD_VAR 0 7
18091: ARRAY
18092: PPUSH
18093: LD_INT 1
18095: PPUSH
18096: CALL_OW 259
18100: PUSH
18101: LD_VAR 0 1
18105: PUSH
18106: LD_VAR 0 7
18110: ARRAY
18111: PPUSH
18112: LD_INT 2
18114: PPUSH
18115: CALL_OW 259
18119: PLUS
18120: PUSH
18121: LD_VAR 0 1
18125: PUSH
18126: LD_VAR 0 7
18130: ARRAY
18131: PPUSH
18132: LD_INT 3
18134: PPUSH
18135: CALL_OW 259
18139: PLUS
18140: PUSH
18141: LD_VAR 0 1
18145: PUSH
18146: LD_VAR 0 7
18150: ARRAY
18151: PPUSH
18152: LD_INT 4
18154: PPUSH
18155: CALL_OW 259
18159: PLUS
18160: ST_TO_ADDR
// if New_Skill_Sum > Skill_Sum and ( ( sex = 0 ) or ( sex = GetSex ( Uns [ i ] ) ) ) then
18161: LD_VAR 0 6
18165: PUSH
18166: LD_VAR 0 4
18170: GREATER
18171: PUSH
18172: LD_VAR 0 2
18176: PUSH
18177: LD_INT 0
18179: EQUAL
18180: PUSH
18181: LD_VAR 0 2
18185: PUSH
18186: LD_VAR 0 1
18190: PUSH
18191: LD_VAR 0 7
18195: ARRAY
18196: PPUSH
18197: CALL_OW 258
18201: EQUAL
18202: OR
18203: AND
18204: IFFALSE 18232
// begin Skill_Sum = New_Skill_Sum ;
18206: LD_ADDR_VAR 0 4
18210: PUSH
18211: LD_VAR 0 6
18215: ST_TO_ADDR
// Selected_unit = Uns [ i ] ;
18216: LD_ADDR_VAR 0 5
18220: PUSH
18221: LD_VAR 0 1
18225: PUSH
18226: LD_VAR 0 7
18230: ARRAY
18231: ST_TO_ADDR
// end ; end ;
18232: GO 18074
18234: POP
18235: POP
// result = Selected_unit ;
18236: LD_ADDR_VAR 0 3
18240: PUSH
18241: LD_VAR 0 5
18245: ST_TO_ADDR
// end ;
18246: LD_VAR 0 3
18250: RET
// export function FindMinSumSkill ( Uns , sex ) ; var Skill_Sum , Selected_unit , New_Skill_Sum , i ; begin
18251: LD_INT 0
18253: PPUSH
18254: PPUSH
18255: PPUSH
18256: PPUSH
18257: PPUSH
// Skill_Sum = 100 ;
18258: LD_ADDR_VAR 0 4
18262: PUSH
18263: LD_INT 100
18265: ST_TO_ADDR
// Selected_unit = 0 ;
18266: LD_ADDR_VAR 0 5
18270: PUSH
18271: LD_INT 0
18273: ST_TO_ADDR
// for i = 1 to Uns do
18274: LD_ADDR_VAR 0 7
18278: PUSH
18279: DOUBLE
18280: LD_INT 1
18282: DEC
18283: ST_TO_ADDR
18284: LD_VAR 0 1
18288: PUSH
18289: FOR_TO
18290: IFFALSE 18449
// begin New_Skill_Sum = GetSkill ( Uns [ i ] , skill_combat ) + GetSkill ( Uns [ i ] , skill_engineering ) + GetSkill ( Uns [ i ] , skill_mechanical ) + GetSkill ( Uns [ i ] , skill_scientistic ) ;
18292: LD_ADDR_VAR 0 6
18296: PUSH
18297: LD_VAR 0 1
18301: PUSH
18302: LD_VAR 0 7
18306: ARRAY
18307: PPUSH
18308: LD_INT 1
18310: PPUSH
18311: CALL_OW 259
18315: PUSH
18316: LD_VAR 0 1
18320: PUSH
18321: LD_VAR 0 7
18325: ARRAY
18326: PPUSH
18327: LD_INT 2
18329: PPUSH
18330: CALL_OW 259
18334: PLUS
18335: PUSH
18336: LD_VAR 0 1
18340: PUSH
18341: LD_VAR 0 7
18345: ARRAY
18346: PPUSH
18347: LD_INT 3
18349: PPUSH
18350: CALL_OW 259
18354: PLUS
18355: PUSH
18356: LD_VAR 0 1
18360: PUSH
18361: LD_VAR 0 7
18365: ARRAY
18366: PPUSH
18367: LD_INT 4
18369: PPUSH
18370: CALL_OW 259
18374: PLUS
18375: ST_TO_ADDR
// if New_Skill_Sum < Skill_Sum and ( ( sex = 0 ) or ( sex = GetSex ( Uns [ i ] ) ) ) then
18376: LD_VAR 0 6
18380: PUSH
18381: LD_VAR 0 4
18385: LESS
18386: PUSH
18387: LD_VAR 0 2
18391: PUSH
18392: LD_INT 0
18394: EQUAL
18395: PUSH
18396: LD_VAR 0 2
18400: PUSH
18401: LD_VAR 0 1
18405: PUSH
18406: LD_VAR 0 7
18410: ARRAY
18411: PPUSH
18412: CALL_OW 258
18416: EQUAL
18417: OR
18418: AND
18419: IFFALSE 18447
// begin Skill_Sum = New_Skill_Sum ;
18421: LD_ADDR_VAR 0 4
18425: PUSH
18426: LD_VAR 0 6
18430: ST_TO_ADDR
// Selected_unit = Uns [ i ] ;
18431: LD_ADDR_VAR 0 5
18435: PUSH
18436: LD_VAR 0 1
18440: PUSH
18441: LD_VAR 0 7
18445: ARRAY
18446: ST_TO_ADDR
// end ; end ;
18447: GO 18289
18449: POP
18450: POP
// result = Selected_unit ;
18451: LD_ADDR_VAR 0 3
18455: PUSH
18456: LD_VAR 0 5
18460: ST_TO_ADDR
// end ;
18461: LD_VAR 0 3
18465: RET
// export function RSiberiteAttack ( Rocket ) ; var American_units , Selected_unit , Factories , Teleport1 , Teleport2 , Un ; begin
18466: LD_INT 0
18468: PPUSH
18469: PPUSH
18470: PPUSH
18471: PPUSH
18472: PPUSH
18473: PPUSH
18474: PPUSH
// Selected_unit = 0 ;
18475: LD_ADDR_VAR 0 4
18479: PUSH
18480: LD_INT 0
18482: ST_TO_ADDR
// American_units = FilterAllUnits ( [ [ f_side , americans ] , [ f_type , unit_building ] ] ) ;
18483: LD_ADDR_VAR 0 3
18487: PUSH
18488: LD_INT 22
18490: PUSH
18491: LD_EXP 176
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: PUSH
18500: LD_INT 21
18502: PUSH
18503: LD_INT 3
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: PPUSH
18514: CALL_OW 69
18518: ST_TO_ADDR
// Factories = UnitFilter ( American_units , [ f_btype , b_factory ] ) ;
18519: LD_ADDR_VAR 0 5
18523: PUSH
18524: LD_VAR 0 3
18528: PPUSH
18529: LD_INT 30
18531: PUSH
18532: LD_INT 3
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: PPUSH
18539: CALL_OW 72
18543: ST_TO_ADDR
// if Factories then
18544: LD_VAR 0 5
18548: IFFALSE 18615
// begin Selected_unit = Factories [ 1 ] ;
18550: LD_ADDR_VAR 0 4
18554: PUSH
18555: LD_VAR 0 5
18559: PUSH
18560: LD_INT 1
18562: ARRAY
18563: ST_TO_ADDR
// for Un in Factories do
18564: LD_ADDR_VAR 0 8
18568: PUSH
18569: LD_VAR 0 5
18573: PUSH
18574: FOR_IN
18575: IFFALSE 18611
// if UnitsInside ( Un ) > UnitsInside ( Selected_unit ) then
18577: LD_VAR 0 8
18581: PPUSH
18582: CALL_OW 313
18586: PUSH
18587: LD_VAR 0 4
18591: PPUSH
18592: CALL_OW 313
18596: GREATER
18597: IFFALSE 18609
// Selected_unit = Un ;
18599: LD_ADDR_VAR 0 4
18603: PUSH
18604: LD_VAR 0 8
18608: ST_TO_ADDR
18609: GO 18574
18611: POP
18612: POP
// end else
18613: GO 18645
// if American_units then
18615: LD_VAR 0 3
18619: IFFALSE 18645
// begin Selected_unit = American_units [ Rand ( 1 , American_units ) ] ;
18621: LD_ADDR_VAR 0 4
18625: PUSH
18626: LD_VAR 0 3
18630: PUSH
18631: LD_INT 1
18633: PPUSH
18634: LD_VAR 0 3
18638: PPUSH
18639: CALL_OW 12
18643: ARRAY
18644: ST_TO_ADDR
// end ; if Rand ( 1 , 2 ) = 1 then
18645: LD_INT 1
18647: PPUSH
18648: LD_INT 2
18650: PPUSH
18651: CALL_OW 12
18655: PUSH
18656: LD_INT 1
18658: EQUAL
18659: IFFALSE 18815
// begin Teleport1 = GetUnitNumber ( 165 , 60 ) ;
18661: LD_ADDR_VAR 0 6
18665: PUSH
18666: LD_INT 165
18668: PPUSH
18669: LD_INT 60
18671: PPUSH
18672: CALL_OW 438
18676: ST_TO_ADDR
// Teleport2 = GetUnitNumber ( 182 , 87 ) ;
18677: LD_ADDR_VAR 0 7
18681: PUSH
18682: LD_INT 182
18684: PPUSH
18685: LD_INT 87
18687: PPUSH
18688: CALL_OW 438
18692: ST_TO_ADDR
// if Rand ( 1 , 2 ) = 1 then
18693: LD_INT 1
18695: PPUSH
18696: LD_INT 2
18698: PPUSH
18699: CALL_OW 12
18703: PUSH
18704: LD_INT 1
18706: EQUAL
18707: IFFALSE 18763
// begin if IsOk ( Teleport1 ) then
18709: LD_VAR 0 6
18713: PPUSH
18714: CALL_OW 302
18718: IFFALSE 18736
// ComEnterUnit ( Rocket , Teleport1 ) else
18720: LD_VAR 0 1
18724: PPUSH
18725: LD_VAR 0 6
18729: PPUSH
18730: CALL_OW 120
18734: GO 18761
// if IsOk ( Teleport2 ) then
18736: LD_VAR 0 7
18740: PPUSH
18741: CALL_OW 302
18745: IFFALSE 18761
// ComEnterUnit ( Rocket , Teleport2 ) end else
18747: LD_VAR 0 1
18751: PPUSH
18752: LD_VAR 0 7
18756: PPUSH
18757: CALL_OW 120
18761: GO 18815
// begin if IsOk ( Teleport2 ) then
18763: LD_VAR 0 7
18767: PPUSH
18768: CALL_OW 302
18772: IFFALSE 18790
// ComEnterUnit ( Rocket , Teleport2 ) else
18774: LD_VAR 0 1
18778: PPUSH
18779: LD_VAR 0 7
18783: PPUSH
18784: CALL_OW 120
18788: GO 18815
// if IsOk ( Teleport1 ) then
18790: LD_VAR 0 6
18794: PPUSH
18795: CALL_OW 302
18799: IFFALSE 18815
// ComEnterUnit ( Rocket , Teleport1 ) end ;
18801: LD_VAR 0 1
18805: PPUSH
18806: LD_VAR 0 6
18810: PPUSH
18811: CALL_OW 120
// end ; AddComAttackPlace ( Rocket , GetX ( Selected_unit ) , GetY ( Selected_unit ) ) ;
18815: LD_VAR 0 1
18819: PPUSH
18820: LD_VAR 0 4
18824: PPUSH
18825: CALL_OW 250
18829: PPUSH
18830: LD_VAR 0 4
18834: PPUSH
18835: CALL_OW 251
18839: PPUSH
18840: CALL_OW 176
// end ;
18844: LD_VAR 0 2
18848: RET
// on SailEvent ( Event ) do begin case Event of Map_am_base :
18849: LD_VAR 0 1
18853: PUSH
18854: LD_EXP 161
18858: DOUBLE
18859: EQUAL
18860: IFTRUE 18864
18862: GO 18896
18864: POP
// begin Wait ( 0 0$3 ) ;
18865: LD_INT 105
18867: PPUSH
18868: CALL_OW 67
// RevealFogArea ( americans , Map_am ) ;
18872: LD_EXP 176
18876: PPUSH
18877: LD_INT 20
18879: PPUSH
18880: CALL_OW 332
// CenterOnXY ( 60 , 88 ) ;
18884: LD_INT 60
18886: PPUSH
18887: LD_INT 88
18889: PPUSH
18890: CALL_OW 84
// end ; Map_rus_attack :
18894: GO 19244
18896: LD_EXP 162
18900: DOUBLE
18901: EQUAL
18902: IFTRUE 18906
18904: GO 19000
18906: POP
// begin Wait ( 0 0$4 ) ;
18907: LD_INT 140
18909: PPUSH
18910: CALL_OW 67
// CenterOnXY ( 118 , 180 ) ;
18914: LD_INT 118
18916: PPUSH
18917: LD_INT 180
18919: PPUSH
18920: CALL_OW 84
// Wait ( 0 0$4 ) ;
18924: LD_INT 140
18926: PPUSH
18927: CALL_OW 67
// CenterOnXY ( 76 , 133 ) ;
18931: LD_INT 76
18933: PPUSH
18934: LD_INT 133
18936: PPUSH
18937: CALL_OW 84
// Wait ( 0 0$3 ) ;
18941: LD_INT 105
18943: PPUSH
18944: CALL_OW 67
// if IsInUnit ( JMM ) <> 0 then
18948: LD_EXP 1
18952: PPUSH
18953: CALL_OW 310
18957: PUSH
18958: LD_INT 0
18960: NONEQUAL
18961: IFFALSE 18974
// CenterOnUnits ( JMM_veh ) else
18963: LD_EXP 57
18967: PPUSH
18968: CALL_OW 85
18972: GO 18983
// CenterOnUnits ( JMM ) ;
18974: LD_EXP 1
18978: PPUSH
18979: CALL_OW 85
// if not ( End_of_journey ) then
18983: LD_EXP 66
18987: NOT
18988: IFFALSE 18998
// CenterJMM = true ;
18990: LD_ADDR_EXP 68
18994: PUSH
18995: LD_INT 1
18997: ST_TO_ADDR
// end ; Send_Helpers :
18998: GO 19244
19000: LD_EXP 163
19004: DOUBLE
19005: EQUAL
19006: IFTRUE 19010
19008: GO 19017
19010: POP
// SendHelpers ; Start_Am1_Base :
19011: CALL 21733 0 0
19015: GO 19244
19017: LD_EXP 164
19021: DOUBLE
19022: EQUAL
19023: IFTRUE 19027
19025: GO 19034
19027: POP
// StartAm1Base ; Send_Material :
19028: CALL 23108 0 0
19032: GO 19244
19034: LD_EXP 165
19038: DOUBLE
19039: EQUAL
19040: IFTRUE 19044
19042: GO 19051
19044: POP
// SendMaterial ; Capture_JMM_Vehicles :
19045: CALL 22654 0 0
19049: GO 19244
19051: LD_EXP 166
19055: DOUBLE
19056: EQUAL
19057: IFTRUE 19061
19059: GO 19068
19061: POP
// CaptureJMMVehicles ; First_Powells_Attack :
19062: CALL 21154 0 0
19066: GO 19244
19068: LD_EXP 167
19072: DOUBLE
19073: EQUAL
19074: IFTRUE 19078
19076: GO 19085
19078: POP
// FirstPowellsAttack ; Second_Powells_Attack :
19079: CALL 24725 0 0
19083: GO 19244
19085: LD_EXP 168
19089: DOUBLE
19090: EQUAL
19091: IFTRUE 19095
19093: GO 19102
19095: POP
// SecondPowellsAttack ; Run_JMM_Vehicles :
19096: CALL 25699 0 0
19100: GO 19244
19102: LD_EXP 169
19106: DOUBLE
19107: EQUAL
19108: IFTRUE 19112
19110: GO 19119
19112: POP
// RunJMMVehicles ; Rus1_Attack :
19113: CALL 20880 0 0
19117: GO 19244
19119: LD_EXP 170
19123: DOUBLE
19124: EQUAL
19125: IFTRUE 19129
19127: GO 19136
19129: POP
// Rus1Attack ; Rus_Attack :
19130: CALL 38155 0 0
19134: GO 19244
19136: LD_EXP 171
19140: DOUBLE
19141: EQUAL
19142: IFTRUE 19146
19144: GO 19153
19146: POP
// RusAttack ; Retreat_Report :
19147: CALL 47045 0 0
19151: GO 19244
19153: LD_EXP 172
19157: DOUBLE
19158: EQUAL
19159: IFTRUE 19163
19161: GO 19170
19163: POP
// RetreatReport ; JMM_Talk :
19164: CALL 24655 0 0
19168: GO 19244
19170: LD_EXP 173
19174: DOUBLE
19175: EQUAL
19176: IFTRUE 19180
19178: GO 19187
19180: POP
// JMMTalk ; Send_Arabian_Back :
19181: CALL 21495 0 0
19185: GO 19244
19187: LD_EXP 174
19191: DOUBLE
19192: EQUAL
19193: IFTRUE 19197
19195: GO 19209
19197: POP
// SendArabianBack ( Arabian_Outside ) ; Link_Bombs :
19198: LD_EXP 86
19202: PPUSH
19203: CALL 31283 0 1
19207: GO 19244
19209: LD_EXP 175
19213: DOUBLE
19214: EQUAL
19215: IFTRUE 19219
19217: GO 19226
19219: POP
// LinkBombs ; JMM_Is_Ready :
19220: CALL 6054 0 0
19224: GO 19244
19226: LD_EXP 144
19230: DOUBLE
19231: EQUAL
19232: IFTRUE 19236
19234: GO 19243
19236: POP
// JMMIsReady ; end ;
19237: CALL 30094 0 0
19241: GO 19244
19243: POP
// end ;
19244: PPOPN 1
19246: END
// on DialogueSkipped ( i ) do begin Skip = true ;
19247: LD_ADDR_EXP 186
19251: PUSH
19252: LD_INT 1
19254: ST_TO_ADDR
// end ;
19255: PPOPN 1
19257: END
// on VehicleConstructed ( veh , fact ) do begin case GetSide ( veh ) of americans1 :
19258: LD_VAR 0 1
19262: PPUSH
19263: CALL_OW 255
19267: PUSH
19268: LD_EXP 177
19272: DOUBLE
19273: EQUAL
19274: IFTRUE 19278
19276: GO 19290
19278: POP
// Am1VehicleConstructed ( veh ) ; arabians :
19279: LD_VAR 0 1
19283: PPUSH
19284: CALL 24136 0 1
19288: GO 19335
19290: LD_EXP 180
19294: DOUBLE
19295: EQUAL
19296: IFTRUE 19300
19298: GO 19312
19300: POP
// ArVehicleConstructed ( veh ) ; russians :
19301: LD_VAR 0 1
19305: PPUSH
19306: CALL 35044 0 1
19310: GO 19335
19312: LD_EXP 178
19316: DOUBLE
19317: EQUAL
19318: IFTRUE 19322
19320: GO 19334
19322: POP
// BuildGroups ( veh ) ; end ;
19323: LD_VAR 0 1
19327: PPUSH
19328: CALL 44851 0 1
19332: GO 19335
19334: POP
// end ;
19335: PPOPN 2
19337: END
// on VehicleCaptured ( VehNew , VehOld , OrigSide , Hum ) do begin if VehOld = JMM_veh then
19338: LD_VAR 0 2
19342: PUSH
19343: LD_EXP 57
19347: EQUAL
19348: IFFALSE 19366
// Captured_vehicles = Captured_vehicles ^ VehNew ;
19350: LD_ADDR_EXP 60
19354: PUSH
19355: LD_EXP 60
19359: PUSH
19360: LD_VAR 0 1
19364: ADD
19365: ST_TO_ADDR
// if VehOld = Woman_veh then
19366: LD_VAR 0 2
19370: PUSH
19371: LD_EXP 58
19375: EQUAL
19376: IFFALSE 19394
// Captured_vehicles = Captured_vehicles ^ VehNew ;
19378: LD_ADDR_EXP 60
19382: PUSH
19383: LD_EXP 60
19387: PUSH
19388: LD_VAR 0 1
19392: ADD
19393: ST_TO_ADDR
// end ;
19394: PPOPN 4
19396: END
// on BuildingCaptured ( build , origside , eng ) do begin case origside of americans1 :
19397: LD_VAR 0 2
19401: PUSH
19402: LD_EXP 177
19406: DOUBLE
19407: EQUAL
19408: IFTRUE 19412
19410: GO 19432
19412: POP
// begin Say ( Powell , DBack3-Pow-1 ) ;
19413: LD_EXP 2
19417: PPUSH
19418: LD_STRING DBack3-Pow-1
19420: PPUSH
19421: CALL_OW 88
// enable ( out_of_base ) ;
19425: LD_EXP 138
19429: ENABLE_MARKED
// end ; alliance :
19430: GO 19450
19432: LD_EXP 182
19436: DOUBLE
19437: EQUAL
19438: IFTRUE 19442
19440: GO 19449
19442: POP
// begin AllianceBuildingInRed ;
19443: CALL 50660 0 0
// end ; end ;
19447: GO 19450
19449: POP
// end ;
19450: PPOPN 3
19452: END
// on ResearchComplete ( tech , lab ) do var Uns ;
19453: LD_INT 0
19455: PPUSH
// begin if lab in [ RusLab1 , RusLab2 ] then
19456: LD_VAR 0 2
19460: PUSH
19461: LD_INT 2
19463: PUSH
19464: LD_INT 1
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: IN
19471: IFFALSE 19490
// SetTech ( tech , Russians1 , state_researched ) ;
19473: LD_VAR 0 1
19477: PPUSH
19478: LD_EXP 179
19482: PPUSH
19483: LD_INT 2
19485: PPUSH
19486: CALL_OW 322
// if ( tech = tech_ST3 ) and ( lab = RusLab1 ) then
19490: LD_VAR 0 1
19494: PUSH
19495: LD_INT 65
19497: EQUAL
19498: PUSH
19499: LD_VAR 0 2
19503: PUSH
19504: LD_INT 2
19506: EQUAL
19507: AND
19508: IFFALSE 19532
// begin Uns = UnitsInside ( RusLab1 ) ;
19510: LD_ADDR_VAR 0 3
19514: PUSH
19515: LD_INT 2
19517: PPUSH
19518: CALL_OW 313
19522: ST_TO_ADDR
// ChangeScientists ( Uns ) ;
19523: LD_VAR 0 3
19527: PPUSH
19528: CALL 42449 0 1
// end ; if ( tech = tech_Sib3 ) and ( lab = RusLab2 ) then
19532: LD_VAR 0 1
19536: PUSH
19537: LD_INT 56
19539: EQUAL
19540: PUSH
19541: LD_VAR 0 2
19545: PUSH
19546: LD_INT 1
19548: EQUAL
19549: AND
19550: IFFALSE 19574
// begin Uns = UnitsInside ( RusLab2 ) ;
19552: LD_ADDR_VAR 0 3
19556: PUSH
19557: LD_INT 1
19559: PPUSH
19560: CALL_OW 313
19564: ST_TO_ADDR
// ChangeScientists ( Uns ) ;
19565: LD_VAR 0 3
19569: PPUSH
19570: CALL 42449 0 1
// end ; if ( tech = tech_ST3 ) and ( lab = AllLabR1 ) then
19574: LD_VAR 0 1
19578: PUSH
19579: LD_INT 65
19581: EQUAL
19582: PUSH
19583: LD_VAR 0 2
19587: PUSH
19588: LD_INT 39
19590: EQUAL
19591: AND
19592: IFFALSE 19609
// begin ComEnterUnit ( UnitsInside ( AllLabR1 ) , AllLabR2 ) ;
19594: LD_INT 39
19596: PPUSH
19597: CALL_OW 313
19601: PPUSH
19602: LD_INT 133
19604: PPUSH
19605: CALL_OW 120
// end ; if ( tech = tech_Weap3 ) and ( lab = AllLabR2 ) then
19609: LD_VAR 0 1
19613: PUSH
19614: LD_INT 53
19616: EQUAL
19617: PUSH
19618: LD_VAR 0 2
19622: PUSH
19623: LD_INT 133
19625: EQUAL
19626: AND
19627: IFFALSE 19629
// begin end ; if ( tech = tech_Sib3 ) and ( lab = AllLabA ) then
19629: LD_VAR 0 1
19633: PUSH
19634: LD_INT 56
19636: EQUAL
19637: PUSH
19638: LD_VAR 0 2
19642: PUSH
19643: LD_INT 46
19645: EQUAL
19646: AND
19647: IFFALSE 19649
// begin end ; end ;
19649: PPOPN 3
19651: END
// on UnitGoesToRed ( Un ) do var i ;
19652: LD_INT 0
19654: PPUSH
// begin case GetSide ( Un ) of Americans :
19655: LD_VAR 0 1
19659: PPUSH
19660: CALL_OW 255
19664: PUSH
19665: LD_EXP 176
19669: DOUBLE
19670: EQUAL
19671: IFTRUE 19675
19673: GO 19678
19675: POP
// begin end ; Americans1 :
19676: GO 20158
19678: LD_EXP 177
19682: DOUBLE
19683: EQUAL
19684: IFTRUE 19688
19686: GO 19691
19688: POP
// begin end ; Russians :
19689: GO 20158
19691: LD_EXP 178
19695: DOUBLE
19696: EQUAL
19697: IFTRUE 19701
19699: GO 19704
19701: POP
// begin end ; Russians1 :
19702: GO 20158
19704: LD_EXP 179
19708: DOUBLE
19709: EQUAL
19710: IFTRUE 19714
19712: GO 19791
19714: POP
// begin if ( GetType ( Un ) = unit_vehicle ) then
19715: LD_VAR 0 1
19719: PPUSH
19720: CALL_OW 247
19724: PUSH
19725: LD_INT 2
19727: EQUAL
19728: IFFALSE 19789
// if ( GetControl ( Un ) = control_manual ) and ( ( GetWeapon ( Un ) = ru_rocket ) or ( GetWeapon ( Un ) = ru_time_lapser ) ) then
19730: LD_VAR 0 1
19734: PPUSH
19735: CALL_OW 263
19739: PUSH
19740: LD_INT 1
19742: EQUAL
19743: PUSH
19744: LD_VAR 0 1
19748: PPUSH
19749: CALL_OW 264
19753: PUSH
19754: LD_INT 47
19756: EQUAL
19757: PUSH
19758: LD_VAR 0 1
19762: PPUSH
19763: CALL_OW 264
19767: PUSH
19768: LD_INT 49
19770: EQUAL
19771: OR
19772: AND
19773: IFFALSE 19789
// begin PriorityAttack ( Russians1 , Un ) ;
19775: LD_EXP 179
19779: PPUSH
19780: LD_VAR 0 1
19784: PPUSH
19785: CALL_OW 470
// end ; end ; Arabians :
19789: GO 20158
19791: LD_EXP 180
19795: DOUBLE
19796: EQUAL
19797: IFTRUE 19801
19799: GO 20112
19801: POP
// begin if Un = ArDep1 then
19802: LD_VAR 0 1
19806: PUSH
19807: LD_INT 122
19809: EQUAL
19810: IFFALSE 19829
// begin SetLives ( [ ArRuFact , ArRuSibExt ] , 0 ) ;
19812: LD_INT 105
19814: PUSH
19815: LD_INT 116
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: PPUSH
19822: LD_INT 0
19824: PPUSH
19825: CALL_OW 234
// end ; if GetBType ( Un ) = b_turret then
19829: LD_VAR 0 1
19833: PPUSH
19834: CALL_OW 266
19838: PUSH
19839: LD_INT 33
19841: EQUAL
19842: IFFALSE 19999
// begin i = UnitsInside ( Un ) ;
19844: LD_ADDR_VAR 0 2
19848: PUSH
19849: LD_VAR 0 1
19853: PPUSH
19854: CALL_OW 313
19858: ST_TO_ADDR
// if ( i ^ [ ] ) = 1 then
19859: LD_VAR 0 2
19863: PUSH
19864: EMPTY
19865: ADD
19866: PUSH
19867: LD_INT 1
19869: EQUAL
19870: IFFALSE 19999
// if GetNation ( Un ) = nation_nature then
19872: LD_VAR 0 1
19876: PPUSH
19877: CALL_OW 248
19881: PUSH
19882: LD_INT 0
19884: EQUAL
19885: IFFALSE 19999
// begin ComMoveXYR ( Un , 48 , 4 , 3 , false ) ;
19887: LD_VAR 0 1
19891: PPUSH
19892: LD_INT 48
19894: PPUSH
19895: LD_INT 4
19897: PPUSH
19898: LD_INT 3
19900: PPUSH
19901: LD_INT 0
19903: PPUSH
19904: CALL 17757 0 5
// AddComHold ( Un ) ;
19908: LD_VAR 0 1
19912: PPUSH
19913: CALL_OW 200
// while ( R1_Attack_Continues = false ) or not ( ExistMc ( Arabian_def_id ) ) do
19917: LD_EXP 196
19921: PUSH
19922: LD_INT 0
19924: EQUAL
19925: PUSH
19926: LD_EXP 235
19930: PPUSH
19931: CALL_OW 386
19935: NOT
19936: OR
19937: IFFALSE 19948
// Wait ( 0 0$1 ) ;
19939: LD_INT 35
19941: PPUSH
19942: CALL_OW 67
19946: GO 19917
// ComMoveXYR ( Un , 63 , 16 , 3 , true ) ;
19948: LD_VAR 0 1
19952: PPUSH
19953: LD_INT 63
19955: PPUSH
19956: LD_INT 16
19958: PPUSH
19959: LD_INT 3
19961: PPUSH
19962: LD_INT 1
19964: PPUSH
19965: CALL 17757 0 5
// AddMcUnits ( Arabian_def_id , Un ) ;
19969: LD_EXP 235
19973: PPUSH
19974: LD_VAR 0 1
19978: PPUSH
19979: CALL_OW 390
// All_arabians = Arabian_soldiers ^ Un ;
19983: LD_ADDR_EXP 79
19987: PUSH
19988: LD_EXP 80
19992: PUSH
19993: LD_VAR 0 1
19997: ADD
19998: ST_TO_ADDR
// end ; end ; if ( Un = New_ArRu_Fact ) and IsOk ( Kozlov ) then
19999: LD_VAR 0 1
20003: PUSH
20004: LD_EXP 87
20008: EQUAL
20009: PUSH
20010: LD_EXP 22
20014: PPUSH
20015: CALL_OW 302
20019: AND
20020: IFFALSE 20110
// begin if GetClass ( Kozlov ) <> class_engineer then
20022: LD_EXP 22
20026: PPUSH
20027: CALL_OW 257
20031: PUSH
20032: LD_INT 2
20034: NONEQUAL
20035: IFFALSE 20070
// begin ComEnterUnit ( Kozlov , ArDep1 ) ;
20037: LD_EXP 22
20041: PPUSH
20042: LD_INT 122
20044: PPUSH
20045: CALL_OW 120
// AddComChangeProfession ( Kozlov , class_engineer ) ;
20049: LD_EXP 22
20053: PPUSH
20054: LD_INT 2
20056: PPUSH
20057: CALL_OW 183
// AddComExitBuilding ( Kozlov ) ;
20061: LD_EXP 22
20065: PPUSH
20066: CALL_OW 182
// end ; AddComRepairBuilding ( Kozlov , New_ArRu_Fact ) ;
20070: LD_EXP 22
20074: PPUSH
20075: LD_EXP 87
20079: PPUSH
20080: CALL_OW 190
// AddComEnterUnit ( Kozlov , New_ArRu_Fact ) ;
20084: LD_EXP 22
20088: PPUSH
20089: LD_EXP 87
20093: PPUSH
20094: CALL_OW 180
// AddComChangeProfession ( Kozlov , class_mechanic ) ;
20098: LD_EXP 22
20102: PPUSH
20103: LD_INT 3
20105: PPUSH
20106: CALL_OW 183
// end ; end ; Arabians1 :
20110: GO 20158
20112: LD_EXP 181
20116: DOUBLE
20117: EQUAL
20118: IFTRUE 20122
20120: GO 20125
20122: POP
// begin end ; Alliance :
20123: GO 20158
20125: LD_EXP 182
20129: DOUBLE
20130: EQUAL
20131: IFTRUE 20135
20133: GO 20157
20135: POP
// begin if ( GetType ( Un ) = unit_building ) then
20136: LD_VAR 0 1
20140: PPUSH
20141: CALL_OW 247
20145: PUSH
20146: LD_INT 3
20148: EQUAL
20149: IFFALSE 20155
// AllianceBuildingInRed ;
20151: CALL 50660 0 0
// end ; end ;
20155: GO 20158
20157: POP
// end ;
20158: PPOPN 2
20160: END
// on HumanDestroyed ( un , side , nation , x , y , direction , sex , class ) do var i ;
20161: LD_INT 0
20163: PPUSH
// begin Wait ( 1 ) ;
20164: LD_INT 1
20166: PPUSH
20167: CALL_OW 67
// case side of americans :
20171: LD_VAR 0 2
20175: PUSH
20176: LD_EXP 176
20180: DOUBLE
20181: EQUAL
20182: IFTRUE 20186
20184: GO 20207
20186: POP
// begin if nation <> nation_nature then
20187: LD_VAR 0 3
20191: PUSH
20192: LD_INT 0
20194: NONEQUAL
20195: IFFALSE 20205
// No_Looses = false ;
20197: LD_ADDR_EXP 56
20201: PUSH
20202: LD_INT 0
20204: ST_TO_ADDR
// end ; arabians :
20205: GO 20410
20207: LD_EXP 180
20211: DOUBLE
20212: EQUAL
20213: IFTRUE 20217
20215: GO 20224
20217: POP
// begin ArabianPersonIsDead ;
20218: CALL 33698 0 0
// end ; arabians1 :
20222: GO 20410
20224: LD_EXP 181
20228: DOUBLE
20229: EQUAL
20230: IFTRUE 20234
20232: GO 20245
20234: POP
// begin HeikeLastWords ;
20235: CALL 49786 0 0
// TestForEndOfMission ;
20239: CALL 49858 0 0
// end ; alliance :
20243: GO 20410
20245: LD_EXP 182
20249: DOUBLE
20250: EQUAL
20251: IFTRUE 20255
20253: GO 20283
20255: POP
// begin if ( un = Roth ) then
20256: LD_VAR 0 1
20260: PUSH
20261: LD_EXP 20
20265: EQUAL
20266: IFFALSE 20277
// ChangeMissionObjectives ( M3b ) else
20268: LD_STRING M3b
20270: PPUSH
20271: CALL_OW 337
20275: GO 20281
// AlliancePersonIsDead ;
20277: CALL 50577 0 0
// end ; russians :
20281: GO 20410
20283: LD_EXP 178
20287: DOUBLE
20288: EQUAL
20289: IFTRUE 20293
20291: GO 20409
20293: POP
// begin if Un in Behemot_Engineers then
20294: LD_VAR 0 1
20298: PUSH
20299: LD_EXP 127
20303: IN
20304: IFFALSE 20407
// begin Behemot_Engineers = Behemot_Engineers diff Un ;
20306: LD_ADDR_EXP 127
20310: PUSH
20311: LD_EXP 127
20315: PUSH
20316: LD_VAR 0 1
20320: DIFF
20321: ST_TO_ADDR
// if Behemot_Engineers = [ ] then
20322: LD_EXP 127
20326: PUSH
20327: EMPTY
20328: EQUAL
20329: IFFALSE 20356
// begin if Russian_project_canceled then
20331: LD_EXP 55
20335: IFFALSE 20344
// ChangeMissionObjectives ( M4a ) ;
20337: LD_STRING M4a
20339: PPUSH
20340: CALL_OW 337
// Number_of_complete_Behemots = 0 ;
20344: LD_ADDR_EXP 223
20348: PUSH
20349: LD_INT 0
20351: ST_TO_ADDR
// BehemotsAttack ;
20352: CALL 48022 0 0
// end ; Wait ( 1 ) ;
20356: LD_INT 1
20358: PPUSH
20359: CALL_OW 67
// for i in Behemot_Engineers do
20363: LD_ADDR_VAR 0 9
20367: PUSH
20368: LD_EXP 127
20372: PUSH
20373: FOR_IN
20374: IFFALSE 20393
// if HasTask ( i ) then
20376: LD_VAR 0 9
20380: PPUSH
20381: CALL_OW 314
20385: IFFALSE 20391
// exit ;
20387: POP
20388: POP
20389: GO 20410
20391: GO 20373
20393: POP
20394: POP
// Number_of_complete_Behemots = 0 ;
20395: LD_ADDR_EXP 223
20399: PUSH
20400: LD_INT 0
20402: ST_TO_ADDR
// BehemotsAttack ;
20403: CALL 48022 0 0
// end ; end ; end ;
20407: GO 20410
20409: POP
// end ;
20410: PPOPN 9
20412: END
// on SiberiteRocketExploded ( Un , x , y ) do begin SA_OnSiberiteRocketExploded ( Un ) ;
20413: LD_VAR 0 1
20417: PPUSH
20418: CALL 55978 0 1
// if InArea ( x , y , Rus_Base ) then
20422: LD_VAR 0 2
20426: PPUSH
20427: LD_VAR 0 3
20431: PPUSH
20432: LD_INT 5
20434: PPUSH
20435: CALL_OW 309
20439: IFFALSE 20487
// begin if GetSide ( Un ) = arabians then
20441: LD_VAR 0 1
20445: PPUSH
20446: CALL_OW 255
20450: PUSH
20451: LD_EXP 180
20455: EQUAL
20456: IFFALSE 20465
// enable ( Matherlod_Contamined1 ) else
20458: LD_EXP 149
20462: ENABLE_MARKED
20463: GO 20487
// if GetSide ( Un ) = americans then
20465: LD_VAR 0 1
20469: PPUSH
20470: CALL_OW 255
20474: PUSH
20475: LD_EXP 176
20479: EQUAL
20480: IFFALSE 20487
// enable ( Matherlod_Contamined2 ) ;
20482: LD_EXP 150
20486: ENABLE_MARKED
// end ; if GetSide ( Un ) = russians then
20487: LD_VAR 0 1
20491: PPUSH
20492: CALL_OW 255
20496: PUSH
20497: LD_EXP 178
20501: EQUAL
20502: IFFALSE 20523
// begin Wait ( 0 0$5 ) ;
20504: LD_INT 175
20506: PPUSH
20507: CALL_OW 67
// Say ( Platonov , D18-Pla-1 ) ;
20511: LD_EXP 26
20515: PPUSH
20516: LD_STRING D18-Pla-1
20518: PPUSH
20519: CALL_OW 88
// end ; end ;
20523: PPOPN 3
20525: END
// on BuildingStarted ( build , hum ) do begin if GetBType ( build ) = b_behemoth then
20526: LD_VAR 0 1
20530: PPUSH
20531: CALL_OW 266
20535: PUSH
20536: LD_INT 37
20538: EQUAL
20539: IFFALSE 20557
// Russian_Behemots = Russian_Behemots ^ build ;
20541: LD_ADDR_EXP 128
20545: PUSH
20546: LD_EXP 128
20550: PUSH
20551: LD_VAR 0 1
20555: ADD
20556: ST_TO_ADDR
// end ;
20557: PPOPN 2
20559: END
// on BehemothConstructed ( behemot ) do var i ;
20560: LD_INT 0
20562: PPUSH
// begin if GetSide ( behemot ) = 1 then
20563: LD_VAR 0 1
20567: PPUSH
20568: CALL_OW 255
20572: PUSH
20573: LD_INT 1
20575: EQUAL
20576: IFFALSE 20580
// exit ;
20578: GO 20706
// Russian_Behemots = UnitFilter ( ( Russian_Behemots ^ behemot ) diff [ 0 ] , [ f_alive ] ) ;
20580: LD_ADDR_EXP 128
20584: PUSH
20585: LD_EXP 128
20589: PUSH
20590: LD_VAR 0 1
20594: ADD
20595: PUSH
20596: LD_INT 0
20598: PUSH
20599: EMPTY
20600: LIST
20601: DIFF
20602: PPUSH
20603: LD_INT 51
20605: PUSH
20606: EMPTY
20607: LIST
20608: PPUSH
20609: CALL_OW 72
20613: ST_TO_ADDR
// New_Behemots = New_Behemots ^ behemot ;
20614: LD_ADDR_EXP 129
20618: PUSH
20619: LD_EXP 129
20623: PUSH
20624: LD_VAR 0 1
20628: ADD
20629: ST_TO_ADDR
// if Russian_project_canceled = true then
20630: LD_EXP 55
20634: PUSH
20635: LD_INT 1
20637: EQUAL
20638: IFFALSE 20655
// begin Russian_project_canceled = false ;
20640: LD_ADDR_EXP 55
20644: PUSH
20645: LD_INT 0
20647: ST_TO_ADDR
// ChangeMissionObjectives ( M4b ) ;
20648: LD_STRING M4b
20650: PPUSH
20651: CALL_OW 337
// end ; Wait ( 1 ) ;
20655: LD_INT 1
20657: PPUSH
20658: CALL_OW 67
// for i in Behemot_Engineers do
20662: LD_ADDR_VAR 0 2
20666: PUSH
20667: LD_EXP 127
20671: PUSH
20672: FOR_IN
20673: IFFALSE 20692
// if HasTask ( i ) then
20675: LD_VAR 0 2
20679: PPUSH
20680: CALL_OW 314
20684: IFFALSE 20690
// exit ;
20686: POP
20687: POP
20688: GO 20706
20690: GO 20672
20692: POP
20693: POP
// Number_of_complete_Behemots = 0 ;
20694: LD_ADDR_EXP 223
20698: PUSH
20699: LD_INT 0
20701: ST_TO_ADDR
// BehemotsAttack ;
20702: CALL 48022 0 0
// end ;
20706: PPOPN 2
20708: END
// on SibDepositContaminated ( Un , X , Y ) do begin if InArea ( X , Y , R_base ) then
20709: LD_VAR 0 2
20713: PPUSH
20714: LD_VAR 0 3
20718: PPUSH
20719: LD_INT 36
20721: PPUSH
20722: CALL_OW 309
20726: IFFALSE 20787
// begin if GetSide ( Un ) = arabians1 then
20728: LD_VAR 0 1
20732: PPUSH
20733: CALL_OW 255
20737: PUSH
20738: LD_EXP 181
20742: EQUAL
20743: IFFALSE 20787
// begin CenterOnXY ( X , Y ) ;
20745: LD_VAR 0 2
20749: PPUSH
20750: LD_VAR 0 3
20754: PPUSH
20755: CALL_OW 84
// placeseeing ( X , Y , americans , - 12 ) ;
20759: LD_VAR 0 2
20763: PPUSH
20764: LD_VAR 0 3
20768: PPUSH
20769: LD_EXP 176
20773: PPUSH
20774: LD_INT 12
20776: NEG
20777: PPUSH
20778: CALL_OW 330
// enable ( Matherlod_Contamined3 ) ;
20782: LD_EXP 151
20786: ENABLE_MARKED
// end ; end ; end ;
20787: PPOPN 3
20789: END
// var reg_res ; on McRegistryResultChanges ( mcid , count , strength ) do begin case mcid of Alliance_wood_reg_id :
20790: LD_VAR 0 1
20794: PUSH
20795: LD_EXP 249
20799: DOUBLE
20800: EQUAL
20801: IFTRUE 20805
20803: GO 20812
20805: POP
// GuardAllianceWood ; end ;
20806: CALL 55054 0 0
20810: GO 20813
20812: POP
// reg_res = count &    & strength ;
20813: LD_ADDR_LOC 2
20817: PUSH
20818: LD_VAR 0 2
20822: PUSH
20823: LD_STRING   
20825: STR
20826: PUSH
20827: LD_VAR 0 3
20831: STR
20832: ST_TO_ADDR
// end ;
20833: PPOPN 3
20835: END
// on McDefendTakesUnit ( mcid , un ) do begin taken := taken ^ [ un ] ;
20836: LD_ADDR_LOC 1
20840: PUSH
20841: LD_LOC 1
20845: PUSH
20846: LD_VAR 0 2
20850: PUSH
20851: EMPTY
20852: LIST
20853: ADD
20854: ST_TO_ADDR
// end ;
20855: PPOPN 2
20857: END
// on McDefendReturnsUnit ( mcid , un ) do begin taken := taken diff [ un ] ;
20858: LD_ADDR_LOC 1
20862: PUSH
20863: LD_LOC 1
20867: PUSH
20868: LD_VAR 0 2
20872: PUSH
20873: EMPTY
20874: LIST
20875: DIFF
20876: ST_TO_ADDR
// end ; end_of_file
20877: PPOPN 2
20879: END
// var driver1 , driver2 , Selected_Sold ; var soldiers , soldiers1 , Retreat_Boy ; var driver , developer ; var R1_Attacking_Units , R1_Patroling_Units ; var The_original_mechanical_Skill ; export function RunJMMVehicles ; var V ; begin
20880: LD_INT 0
20882: PPUSH
20883: PPUSH
// RevealFogArea ( americans , map_ar ) ;
20884: LD_EXP 176
20888: PPUSH
20889: LD_INT 19
20891: PPUSH
20892: CALL_OW 332
// V = [ JMM_veh ] ;
20896: LD_ADDR_VAR 0 2
20900: PUSH
20901: LD_EXP 57
20905: PUSH
20906: EMPTY
20907: LIST
20908: ST_TO_ADDR
// if JMM_Woman then
20909: LD_EXP 37
20913: IFFALSE 20934
// V = V ^ [ Woman_veh ] ;
20915: LD_ADDR_VAR 0 2
20919: PUSH
20920: LD_VAR 0 2
20924: PUSH
20925: LD_EXP 58
20929: PUSH
20930: EMPTY
20931: LIST
20932: ADD
20933: ST_TO_ADDR
// AddComMoveXY ( V , 94 , 124 ) ;
20934: LD_VAR 0 2
20938: PPUSH
20939: LD_INT 94
20941: PPUSH
20942: LD_INT 124
20944: PPUSH
20945: CALL_OW 171
// AddComMoveXY ( V , 47 , 79 ) ;
20949: LD_VAR 0 2
20953: PPUSH
20954: LD_INT 47
20956: PPUSH
20957: LD_INT 79
20959: PPUSH
20960: CALL_OW 171
// WaitTask ( V , 0.5 ) ;
20964: LD_VAR 0 2
20968: PPUSH
20969: LD_REAL  5.00000000000000E-0001
20972: PPUSH
20973: CALL 17823 0 2
// ComExitVehicle ( V ) ;
20977: LD_VAR 0 2
20981: PPUSH
20982: CALL_OW 121
// if not ( Skip ) then
20986: LD_EXP 186
20990: NOT
20991: IFFALSE 21001
// CenterJMM = false ;
20993: LD_ADDR_EXP 68
20997: PUSH
20998: LD_INT 0
21000: ST_TO_ADDR
// End_of_journey = true ;
21001: LD_ADDR_EXP 66
21005: PUSH
21006: LD_INT 1
21008: ST_TO_ADDR
// RaiseSailEvent ( Capture_JMM_Vehicles ) ;
21009: LD_EXP 166
21013: PPUSH
21014: CALL_OW 427
// Wait ( 2 ) ;
21018: LD_INT 2
21020: PPUSH
21021: CALL_OW 67
// if not ( Skip ) then
21025: LD_EXP 186
21029: NOT
21030: IFFALSE 21047
// ComMoveXY ( JMM , 48 , 63 ) ;
21032: LD_EXP 1
21036: PPUSH
21037: LD_INT 48
21039: PPUSH
21040: LD_INT 63
21042: PPUSH
21043: CALL_OW 111
// if not ( Skip ) then
21047: LD_EXP 186
21051: NOT
21052: IFFALSE 21068
// AddComTurnUnit ( JMM , Powell ) ;
21054: LD_EXP 1
21058: PPUSH
21059: LD_EXP 2
21063: PPUSH
21064: CALL_OW 179
// if not ( Skip ) then
21068: LD_EXP 186
21072: NOT
21073: IFFALSE 21090
// ComMoveXY ( JMM_Woman , 47 , 68 ) ;
21075: LD_EXP 37
21079: PPUSH
21080: LD_INT 47
21082: PPUSH
21083: LD_INT 68
21085: PPUSH
21086: CALL_OW 111
// if not ( Skip ) then
21090: LD_EXP 186
21094: NOT
21095: IFFALSE 21112
// ComMoveXY ( Powell , 43 , 63 ) ;
21097: LD_EXP 2
21101: PPUSH
21102: LD_INT 43
21104: PPUSH
21105: LD_INT 63
21107: PPUSH
21108: CALL_OW 111
// if not ( Skip ) then
21112: LD_EXP 186
21116: NOT
21117: IFFALSE 21133
// AddComTurnUnit ( Powell , JMM ) ;
21119: LD_EXP 2
21123: PPUSH
21124: LD_EXP 1
21128: PPUSH
21129: CALL_OW 179
// if not ( Skip ) then
21133: LD_EXP 186
21137: NOT
21138: IFFALSE 21149
// CenterOnUnits ( Powell ) ;
21140: LD_EXP 2
21144: PPUSH
21145: CALL_OW 85
// end ;
21149: LD_VAR 0 1
21153: RET
// export function CaptureJMMVehicles ; var possible_drivers , hex ; begin
21154: LD_INT 0
21156: PPUSH
21157: PPUSH
21158: PPUSH
// possible_drivers = Remaining_Powells diff Named_americans ;
21159: LD_ADDR_VAR 0 2
21163: PUSH
21164: LD_EXP 64
21168: PUSH
21169: LD_EXP 62
21173: DIFF
21174: ST_TO_ADDR
// driver1 = possible_drivers [ 1 ] ;
21175: LD_ADDR_LOC 3
21179: PUSH
21180: LD_VAR 0 2
21184: PUSH
21185: LD_INT 1
21187: ARRAY
21188: ST_TO_ADDR
// driver2 = possible_drivers [ 2 ] ;
21189: LD_ADDR_LOC 4
21193: PUSH
21194: LD_VAR 0 2
21198: PUSH
21199: LD_INT 2
21201: ARRAY
21202: ST_TO_ADDR
// Remaining_Powells = Remaining_Powells diff ( driver1 ^ driver2 ) ;
21203: LD_ADDR_EXP 64
21207: PUSH
21208: LD_EXP 64
21212: PUSH
21213: LD_LOC 3
21217: PUSH
21218: LD_LOC 4
21222: ADD
21223: DIFF
21224: ST_TO_ADDR
// ComEnterUnit ( driver1 , JMM_veh ) ;
21225: LD_LOC 3
21229: PPUSH
21230: LD_EXP 57
21234: PPUSH
21235: CALL_OW 120
// hex = RandHexArea ( Am1_parking , true ) ;
21239: LD_ADDR_VAR 0 3
21243: PUSH
21244: LD_INT 21
21246: PPUSH
21247: LD_INT 1
21249: PPUSH
21250: CALL_OW 16
21254: ST_TO_ADDR
// AddComMoveXY ( driver1 , hex [ 1 ] , hex [ 2 ] ) ;
21255: LD_LOC 3
21259: PPUSH
21260: LD_VAR 0 3
21264: PUSH
21265: LD_INT 1
21267: ARRAY
21268: PPUSH
21269: LD_VAR 0 3
21273: PUSH
21274: LD_INT 2
21276: ARRAY
21277: PPUSH
21278: CALL_OW 171
// AddComExitVehicle ( driver1 ) ;
21282: LD_LOC 3
21286: PPUSH
21287: CALL_OW 181
// AddComEnterUnit ( driver1 , AmArm ) ;
21291: LD_LOC 3
21295: PPUSH
21296: LD_INT 92
21298: PPUSH
21299: CALL_OW 180
// AddComChangeProfession ( driver1 , class_soldier ) ;
21303: LD_LOC 3
21307: PPUSH
21308: LD_INT 1
21310: PPUSH
21311: CALL_OW 183
// if Woman_veh then
21315: LD_EXP 58
21319: IFFALSE 21456
// begin ComEnterUnit ( driver2 , Woman_veh ) ;
21321: LD_LOC 4
21325: PPUSH
21326: LD_EXP 58
21330: PPUSH
21331: CALL_OW 120
// hex = RandHexArea ( Am1_parking , true ) ;
21335: LD_ADDR_VAR 0 3
21339: PUSH
21340: LD_INT 21
21342: PPUSH
21343: LD_INT 1
21345: PPUSH
21346: CALL_OW 16
21350: ST_TO_ADDR
// AddComMoveXY ( driver2 , hex [ 1 ] , hex [ 2 ] ) ;
21351: LD_LOC 4
21355: PPUSH
21356: LD_VAR 0 3
21360: PUSH
21361: LD_INT 1
21363: ARRAY
21364: PPUSH
21365: LD_VAR 0 3
21369: PUSH
21370: LD_INT 2
21372: ARRAY
21373: PPUSH
21374: CALL_OW 171
// AddComExitVehicle ( driver2 ) ;
21378: LD_LOC 4
21382: PPUSH
21383: CALL_OW 181
// AddComEnterUnit ( driver2 , AmArm ) ;
21387: LD_LOC 4
21391: PPUSH
21392: LD_INT 92
21394: PPUSH
21395: CALL_OW 180
// AddComChangeProfession ( driver2 , class_soldier ) ;
21399: LD_LOC 4
21403: PPUSH
21404: LD_INT 1
21406: PPUSH
21407: CALL_OW 183
// WaitTask ( [ driver1 , driver2 ] , 1 ) ;
21411: LD_LOC 3
21415: PUSH
21416: LD_LOC 4
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: PPUSH
21425: LD_INT 1
21427: PPUSH
21428: CALL 17823 0 2
// Remaining_Powells = Remaining_Powells ^ driver1 ^ driver2 ;
21432: LD_ADDR_EXP 64
21436: PUSH
21437: LD_EXP 64
21441: PUSH
21442: LD_LOC 3
21446: ADD
21447: PUSH
21448: LD_LOC 4
21452: ADD
21453: ST_TO_ADDR
// end else
21454: GO 21490
// begin WaitTask ( driver1 , 1 ) ;
21456: LD_LOC 3
21460: PPUSH
21461: LD_INT 1
21463: PPUSH
21464: CALL 17823 0 2
// Remaining_Powells = Remaining_Powells ^ driver1 ^ driver2 ;
21468: LD_ADDR_EXP 64
21472: PUSH
21473: LD_EXP 64
21477: PUSH
21478: LD_LOC 3
21482: ADD
21483: PUSH
21484: LD_LOC 4
21488: ADD
21489: ST_TO_ADDR
// end ; end ;
21490: LD_VAR 0 1
21494: RET
// export function JMMTalk ; begin
21495: LD_INT 0
21497: PPUSH
// while Joan_semafor do
21498: LD_EXP 233
21502: IFFALSE 21513
// Wait ( 0 0$1 ) ;
21504: LD_INT 35
21506: PPUSH
21507: CALL_OW 67
21511: GO 21498
// case Selected_Sold of Lisa :
21513: LD_LOC 5
21517: PUSH
21518: LD_EXP 5
21522: DOUBLE
21523: EQUAL
21524: IFTRUE 21528
21526: GO 21543
21528: POP
// Say ( Lisa , D3nW-Lisa-1 ) ; Cyrus :
21529: LD_EXP 5
21533: PPUSH
21534: LD_STRING D3nW-Lisa-1
21536: PPUSH
21537: CALL_OW 88
21541: GO 21694
21543: LD_EXP 4
21547: DOUBLE
21548: EQUAL
21549: IFTRUE 21553
21551: GO 21568
21553: POP
// Say ( Cyrus , D3nW-Cyrus-1 ) ; Bobby :
21554: LD_EXP 4
21558: PPUSH
21559: LD_STRING D3nW-Cyrus-1
21561: PPUSH
21562: CALL_OW 88
21566: GO 21694
21568: LD_EXP 3
21572: DOUBLE
21573: EQUAL
21574: IFTRUE 21578
21576: GO 21593
21578: POP
// Say ( Bobby , D3nW-Bobby-1 ) ; Gary :
21579: LD_EXP 3
21583: PPUSH
21584: LD_STRING D3nW-Bobby-1
21586: PPUSH
21587: CALL_OW 88
21591: GO 21694
21593: LD_EXP 15
21597: DOUBLE
21598: EQUAL
21599: IFTRUE 21603
21601: GO 21618
21603: POP
// Say ( Gary , D3nW-Gary-1 ) ; Donaldson :
21604: LD_EXP 15
21608: PPUSH
21609: LD_STRING D3nW-Gary-1
21611: PPUSH
21612: CALL_OW 88
21616: GO 21694
21618: LD_EXP 8
21622: DOUBLE
21623: EQUAL
21624: IFTRUE 21628
21626: GO 21643
21628: POP
// Say ( Donaldson , D3nW-Don-1 ) ; Frank :
21629: LD_EXP 8
21633: PPUSH
21634: LD_STRING D3nW-Don-1
21636: PPUSH
21637: CALL_OW 88
21641: GO 21694
21643: LD_EXP 6
21647: DOUBLE
21648: EQUAL
21649: IFTRUE 21653
21651: GO 21668
21653: POP
// Say ( Frank , D3nW-Frank-1 ) ; Cornell :
21654: LD_EXP 6
21658: PPUSH
21659: LD_STRING D3nW-Frank-1
21661: PPUSH
21662: CALL_OW 88
21666: GO 21694
21668: LD_EXP 10
21672: DOUBLE
21673: EQUAL
21674: IFTRUE 21678
21676: GO 21693
21678: POP
// Say ( Cornell , D3nW-Corn-1 ) ; end ;
21679: LD_EXP 10
21683: PPUSH
21684: LD_STRING D3nW-Corn-1
21686: PPUSH
21687: CALL_OW 88
21691: GO 21694
21693: POP
// if Selected_Sold > 0 then
21694: LD_LOC 5
21698: PUSH
21699: LD_INT 0
21701: GREATER
21702: IFFALSE 21728
// begin Say ( JMM , D3nW-JMM-1 ) ;
21704: LD_EXP 1
21708: PPUSH
21709: LD_STRING D3nW-JMM-1
21711: PPUSH
21712: CALL_OW 88
// Say ( JMM , D3nW-JMM-1a ) ;
21716: LD_EXP 1
21720: PPUSH
21721: LD_STRING D3nW-JMM-1a
21723: PPUSH
21724: CALL_OW 88
// end ; end ;
21728: LD_VAR 0 1
21732: RET
// export function SendHelpers ; var Named_without_woman , Un , Uns , i , Possible_Units ; begin
21733: LD_INT 0
21735: PPUSH
21736: PPUSH
21737: PPUSH
21738: PPUSH
21739: PPUSH
21740: PPUSH
// JMM_Helpers = Named_Americans ;
21741: LD_ADDR_EXP 67
21745: PUSH
21746: LD_EXP 62
21750: ST_TO_ADDR
// if Named_Americans > Number_of_JMM_Helpers then
21751: LD_EXP 62
21755: PUSH
21756: LD_EXP 69
21760: GREATER
21761: IFFALSE 21953
// begin Uns = FindMaxSkill ( JMM_Helpers , skill_engineering ) ;
21763: LD_ADDR_VAR 0 4
21767: PUSH
21768: LD_EXP 67
21772: PPUSH
21773: LD_INT 2
21775: PPUSH
21776: CALL_OW 433
21780: ST_TO_ADDR
// JMM_Helpers = JMM_Helpers diff Uns ;
21781: LD_ADDR_EXP 67
21785: PUSH
21786: LD_EXP 67
21790: PUSH
21791: LD_VAR 0 4
21795: DIFF
21796: ST_TO_ADDR
// Uns = Uns ^ FindMaxSkill ( JMM_Helpers , skill_scientistic ) ;
21797: LD_ADDR_VAR 0 4
21801: PUSH
21802: LD_VAR 0 4
21806: PUSH
21807: LD_EXP 67
21811: PPUSH
21812: LD_INT 4
21814: PPUSH
21815: CALL_OW 433
21819: ADD
21820: ST_TO_ADDR
// JMM_Helpers = JMM_Helpers diff Uns ;
21821: LD_ADDR_EXP 67
21825: PUSH
21826: LD_EXP 67
21830: PUSH
21831: LD_VAR 0 4
21835: DIFF
21836: ST_TO_ADDR
// Uns = Uns ^ FindMaxSkill ( JMM_Helpers , skill_combat ) ;
21837: LD_ADDR_VAR 0 4
21841: PUSH
21842: LD_VAR 0 4
21846: PUSH
21847: LD_EXP 67
21851: PPUSH
21852: LD_INT 1
21854: PPUSH
21855: CALL_OW 433
21859: ADD
21860: ST_TO_ADDR
// JMM_Helpers = JMM_Helpers diff Uns ;
21861: LD_ADDR_EXP 67
21865: PUSH
21866: LD_EXP 67
21870: PUSH
21871: LD_VAR 0 4
21875: DIFF
21876: ST_TO_ADDR
// for Un = Number_of_JMM_Helpers to Named_Americans - 1 do
21877: LD_ADDR_VAR 0 3
21881: PUSH
21882: DOUBLE
21883: LD_EXP 69
21887: DEC
21888: ST_TO_ADDR
21889: LD_EXP 62
21893: PUSH
21894: LD_INT 1
21896: MINUS
21897: PUSH
21898: FOR_TO
21899: IFFALSE 21933
// begin JMM_Helpers = JMM_Helpers diff JMM_Helpers [ Rand ( 1 , JMM_Helpers ) ] ;
21901: LD_ADDR_EXP 67
21905: PUSH
21906: LD_EXP 67
21910: PUSH
21911: LD_EXP 67
21915: PUSH
21916: LD_INT 1
21918: PPUSH
21919: LD_EXP 67
21923: PPUSH
21924: CALL_OW 12
21928: ARRAY
21929: DIFF
21930: ST_TO_ADDR
// end ;
21931: GO 21898
21933: POP
21934: POP
// JMM_Helpers = JMM_Helpers ^ Uns ;
21935: LD_ADDR_EXP 67
21939: PUSH
21940: LD_EXP 67
21944: PUSH
21945: LD_VAR 0 4
21949: ADD
21950: ST_TO_ADDR
// end else
21951: GO 22065
// if Named_Americans < Number_of_JMM_Helpers then
21953: LD_EXP 62
21957: PUSH
21958: LD_EXP 69
21962: LESS
21963: IFFALSE 22065
// begin JMM_Helpers = JMM_Helpers ^ FindMaxSkill ( ( All_americans diff ( JMM_Helpers ^ JMM_Woman ) ) , skill_engineering ) ;
21965: LD_ADDR_EXP 67
21969: PUSH
21970: LD_EXP 67
21974: PUSH
21975: LD_EXP 61
21979: PUSH
21980: LD_EXP 67
21984: PUSH
21985: LD_EXP 37
21989: ADD
21990: DIFF
21991: PPUSH
21992: LD_INT 2
21994: PPUSH
21995: CALL_OW 433
21999: ADD
22000: ST_TO_ADDR
// for Un = Named_Americans + 2 to Number_of_JMM_Helpers do
22001: LD_ADDR_VAR 0 3
22005: PUSH
22006: DOUBLE
22007: LD_EXP 62
22011: PUSH
22012: LD_INT 2
22014: PLUS
22015: DEC
22016: ST_TO_ADDR
22017: LD_EXP 69
22021: PUSH
22022: FOR_TO
22023: IFFALSE 22063
// begin JMM_Helpers = JMM_Helpers ^ FindMaxSkill ( ( All_americans diff ( JMM_Helpers ^ JMM_Woman ) ) , skill_combat ) ;
22025: LD_ADDR_EXP 67
22029: PUSH
22030: LD_EXP 67
22034: PUSH
22035: LD_EXP 61
22039: PUSH
22040: LD_EXP 67
22044: PUSH
22045: LD_EXP 37
22049: ADD
22050: DIFF
22051: PPUSH
22052: LD_INT 1
22054: PPUSH
22055: CALL_OW 433
22059: ADD
22060: ST_TO_ADDR
// end ;
22061: GO 22022
22063: POP
22064: POP
// end ; Uns = JMM_Helpers ;
22065: LD_ADDR_VAR 0 4
22069: PUSH
22070: LD_EXP 67
22074: ST_TO_ADDR
// Un = FindMaxSkill ( Uns , skill_engineering ) ;
22075: LD_ADDR_VAR 0 3
22079: PUSH
22080: LD_VAR 0 4
22084: PPUSH
22085: LD_INT 2
22087: PPUSH
22088: CALL_OW 433
22092: ST_TO_ADDR
// Uns = Uns diff Un ;
22093: LD_ADDR_VAR 0 4
22097: PUSH
22098: LD_VAR 0 4
22102: PUSH
22103: LD_VAR 0 3
22107: DIFF
22108: ST_TO_ADDR
// if GetClass ( Un ) <> class_engineer then
22109: LD_VAR 0 3
22113: PPUSH
22114: CALL_OW 257
22118: PUSH
22119: LD_INT 2
22121: NONEQUAL
22122: IFFALSE 22165
// begin ComEnterUnit ( Un , AmDep ) ;
22124: LD_VAR 0 3
22128: PPUSH
22129: LD_INT 84
22131: PPUSH
22132: CALL_OW 120
// AddComChangeProfession ( Un , class_engineer ) ;
22136: LD_VAR 0 3
22140: PPUSH
22141: LD_INT 2
22143: PPUSH
22144: CALL_OW 183
// AddComMoveXY ( Un , 68 , 107 ) ;
22148: LD_VAR 0 3
22152: PPUSH
22153: LD_INT 68
22155: PPUSH
22156: LD_INT 107
22158: PPUSH
22159: CALL_OW 171
// end else
22163: GO 22180
// ComMoveXY ( Un , 68 , 107 ) ;
22165: LD_VAR 0 3
22169: PPUSH
22170: LD_INT 68
22172: PPUSH
22173: LD_INT 107
22175: PPUSH
22176: CALL_OW 111
// for i = 1 to 1 do
22180: LD_ADDR_VAR 0 5
22184: PUSH
22185: DOUBLE
22186: LD_INT 1
22188: DEC
22189: ST_TO_ADDR
22190: LD_INT 1
22192: PUSH
22193: FOR_TO
22194: IFFALSE 22303
// begin Un = FindMaxSkill ( Uns , skill_scientistic ) ;
22196: LD_ADDR_VAR 0 3
22200: PUSH
22201: LD_VAR 0 4
22205: PPUSH
22206: LD_INT 4
22208: PPUSH
22209: CALL_OW 433
22213: ST_TO_ADDR
// Uns = Uns diff Un ;
22214: LD_ADDR_VAR 0 4
22218: PUSH
22219: LD_VAR 0 4
22223: PUSH
22224: LD_VAR 0 3
22228: DIFF
22229: ST_TO_ADDR
// if GetClass ( Un ) <> class_scientistic then
22230: LD_VAR 0 3
22234: PPUSH
22235: CALL_OW 257
22239: PUSH
22240: LD_INT 4
22242: NONEQUAL
22243: IFFALSE 22286
// begin ComEnterUnit ( Un , AmLab ) ;
22245: LD_VAR 0 3
22249: PPUSH
22250: LD_INT 91
22252: PPUSH
22253: CALL_OW 120
// AddComChangeProfession ( Un , class_scientistic ) ;
22257: LD_VAR 0 3
22261: PPUSH
22262: LD_INT 4
22264: PPUSH
22265: CALL_OW 183
// AddComMoveXY ( Un , 68 , 107 ) ;
22269: LD_VAR 0 3
22273: PPUSH
22274: LD_INT 68
22276: PPUSH
22277: LD_INT 107
22279: PPUSH
22280: CALL_OW 171
// end else
22284: GO 22301
// ComMoveXY ( Un , 68 , 107 ) ;
22286: LD_VAR 0 3
22290: PPUSH
22291: LD_INT 68
22293: PPUSH
22294: LD_INT 107
22296: PPUSH
22297: CALL_OW 111
// end ;
22301: GO 22193
22303: POP
22304: POP
// for Un in Uns do
22305: LD_ADDR_VAR 0 3
22309: PUSH
22310: LD_VAR 0 4
22314: PUSH
22315: FOR_IN
22316: IFFALSE 22391
// begin if GetClass ( Un ) <> class_soldier then
22318: LD_VAR 0 3
22322: PPUSH
22323: CALL_OW 257
22327: PUSH
22328: LD_INT 1
22330: NONEQUAL
22331: IFFALSE 22374
// begin ComEnterUnit ( Un , AmArm ) ;
22333: LD_VAR 0 3
22337: PPUSH
22338: LD_INT 92
22340: PPUSH
22341: CALL_OW 120
// AddComChangeProfession ( Un , class_soldier ) ;
22345: LD_VAR 0 3
22349: PPUSH
22350: LD_INT 1
22352: PPUSH
22353: CALL_OW 183
// AddComMoveXY ( Un , 68 , 107 ) ;
22357: LD_VAR 0 3
22361: PPUSH
22362: LD_INT 68
22364: PPUSH
22365: LD_INT 107
22367: PPUSH
22368: CALL_OW 171
// end else
22372: GO 22389
// ComMoveXY ( Un , 68 , 107 ) ;
22374: LD_VAR 0 3
22378: PPUSH
22379: LD_INT 68
22381: PPUSH
22382: LD_INT 107
22384: PPUSH
22385: CALL_OW 111
// end ;
22389: GO 22315
22391: POP
22392: POP
// Uns = JMM_Helpers ;
22393: LD_ADDR_VAR 0 4
22397: PUSH
22398: LD_EXP 67
22402: ST_TO_ADDR
// while Uns > 0 do
22403: LD_VAR 0 4
22407: PUSH
22408: LD_INT 0
22410: GREATER
22411: IFFALSE 22490
// begin for Un in Uns do
22413: LD_ADDR_VAR 0 3
22417: PUSH
22418: LD_VAR 0 4
22422: PUSH
22423: FOR_IN
22424: IFFALSE 22479
// if GetDistUnitXY ( Un , 68 , 107 ) < 6 then
22426: LD_VAR 0 3
22430: PPUSH
22431: LD_INT 68
22433: PPUSH
22434: LD_INT 107
22436: PPUSH
22437: CALL_OW 297
22441: PUSH
22442: LD_INT 6
22444: LESS
22445: IFFALSE 22477
// begin SetSide ( Un , americans ) ;
22447: LD_VAR 0 3
22451: PPUSH
22452: LD_EXP 176
22456: PPUSH
22457: CALL_OW 235
// Uns = Uns diff Un ;
22461: LD_ADDR_VAR 0 4
22465: PUSH
22466: LD_VAR 0 4
22470: PUSH
22471: LD_VAR 0 3
22475: DIFF
22476: ST_TO_ADDR
// end ;
22477: GO 22423
22479: POP
22480: POP
// Wait ( 0 0$1 ) ;
22481: LD_INT 35
22483: PPUSH
22484: CALL_OW 67
// end ;
22488: GO 22403
// tick = 0 ;
22490: LD_ADDR_OWVAR 1
22494: PUSH
22495: LD_INT 0
22497: ST_TO_ADDR
// StartRussianBase ;
22498: CALL 41536 0 0
// StartAllianceBase ;
22502: CALL 49949 0 0
// StartArabianBase ;
22506: CALL 31079 0 0
// R1_Attack_Continues = true ;
22510: LD_ADDR_EXP 196
22514: PUSH
22515: LD_INT 1
22517: ST_TO_ADDR
// enable ( R1_attack ) ;
22518: LD_EXP 140
22522: ENABLE_MARKED
// enable ( First_JMM_Task ) ;
22523: LD_EXP 137
22527: ENABLE_MARKED
// Possible_Units = 0 ;
22528: LD_ADDR_VAR 0 6
22532: PUSH
22533: LD_INT 0
22535: ST_TO_ADDR
// Possible_Units = JMM_Helpers isect [ Lisa , Cyrus , Bobby , Gary , Donaldson , Frank , Cornell ] ;
22536: LD_ADDR_VAR 0 6
22540: PUSH
22541: LD_EXP 67
22545: PUSH
22546: LD_EXP 5
22550: PUSH
22551: LD_EXP 4
22555: PUSH
22556: LD_EXP 3
22560: PUSH
22561: LD_EXP 15
22565: PUSH
22566: LD_EXP 8
22570: PUSH
22571: LD_EXP 6
22575: PUSH
22576: LD_EXP 10
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: ISECT
22590: ST_TO_ADDR
// Selected_Sold = Possible_Units [ Rand ( 1 , Possible_Units ) ] ;
22591: LD_ADDR_LOC 5
22595: PUSH
22596: LD_VAR 0 6
22600: PUSH
22601: LD_INT 1
22603: PPUSH
22604: LD_VAR 0 6
22608: PPUSH
22609: CALL_OW 12
22613: ARRAY
22614: ST_TO_ADDR
// RaiseSailEvent ( JMM_Talk ) ;
22615: LD_EXP 173
22619: PPUSH
22620: CALL_OW 427
// Remaining_Powells = Remaining_Powells diff JMM_Helpers ;
22624: LD_ADDR_EXP 64
22628: PUSH
22629: LD_EXP 64
22633: PUSH
22634: LD_EXP 67
22638: DIFF
22639: ST_TO_ADDR
// RaiseSailEvent ( Start_Am1_Base ) ;
22640: LD_EXP 164
22644: PPUSH
22645: CALL_OW 427
// end ;
22649: LD_VAR 0 1
22653: RET
// export function SendMaterial ; var Un , i , Cans_Positions , Free_Place ; begin
22654: LD_INT 0
22656: PPUSH
22657: PPUSH
22658: PPUSH
22659: PPUSH
22660: PPUSH
// ComEnterUnit ( Carriers , AmDep ) ;
22661: LD_EXP 65
22665: PPUSH
22666: LD_INT 84
22668: PPUSH
22669: CALL_OW 120
// for Un in Carriers do
22673: LD_ADDR_VAR 0 2
22677: PUSH
22678: LD_EXP 65
22682: PUSH
22683: FOR_IN
22684: IFFALSE 22700
// begin AddComChangeProfession ( Un , class_engineer ) ;
22686: LD_VAR 0 2
22690: PPUSH
22691: LD_INT 2
22693: PPUSH
22694: CALL_OW 183
// end ;
22698: GO 22683
22700: POP
22701: POP
// WaitTask ( Carriers , 0.5 ) ;
22702: LD_EXP 65
22706: PPUSH
22707: LD_REAL  5.00000000000000E-0001
22710: PPUSH
22711: CALL 17823 0 2
// Cans_Positions = [ [ 63 , 103 ] , [ 68 , 101 ] , [ 66 , 96 ] , [ 64 , 99 ] , [ 59 , 99 ] , [ 67 , 104 ] , [ 69 , 95 ] ] ;
22715: LD_ADDR_VAR 0 4
22719: PUSH
22720: LD_INT 63
22722: PUSH
22723: LD_INT 103
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: PUSH
22730: LD_INT 68
22732: PUSH
22733: LD_INT 101
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: PUSH
22740: LD_INT 66
22742: PUSH
22743: LD_INT 96
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: PUSH
22750: LD_INT 64
22752: PUSH
22753: LD_INT 99
22755: PUSH
22756: EMPTY
22757: LIST
22758: LIST
22759: PUSH
22760: LD_INT 59
22762: PUSH
22763: LD_INT 99
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: PUSH
22770: LD_INT 67
22772: PUSH
22773: LD_INT 104
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: PUSH
22780: LD_INT 69
22782: PUSH
22783: LD_INT 95
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: ST_TO_ADDR
// for i = 1 to Number_of_crates do
22799: LD_ADDR_VAR 0 3
22803: PUSH
22804: DOUBLE
22805: LD_INT 1
22807: DEC
22808: ST_TO_ADDR
22809: LD_EXP 197
22813: PUSH
22814: FOR_TO
22815: IFFALSE 22909
// begin if i = 1 then
22817: LD_VAR 0 3
22821: PUSH
22822: LD_INT 1
22824: EQUAL
22825: IFFALSE 22844
// ComTransport ( Carriers , AmDep , mat_cans ) else
22827: LD_EXP 65
22831: PPUSH
22832: LD_INT 84
22834: PPUSH
22835: LD_INT 1
22837: PPUSH
22838: CALL_OW 151
22842: GO 22859
// AddComTransport ( Carriers , AmDep , mat_cans ) ;
22844: LD_EXP 65
22848: PPUSH
22849: LD_INT 84
22851: PPUSH
22852: LD_INT 1
22854: PPUSH
22855: CALL_OW 211
// AddComMoveXY ( Carriers , Cans_Positions [ i ] [ 1 ] , Cans_Positions [ i ] [ 2 ] ) ;
22859: LD_EXP 65
22863: PPUSH
22864: LD_VAR 0 4
22868: PUSH
22869: LD_VAR 0 3
22873: ARRAY
22874: PUSH
22875: LD_INT 1
22877: ARRAY
22878: PPUSH
22879: LD_VAR 0 4
22883: PUSH
22884: LD_VAR 0 3
22888: ARRAY
22889: PUSH
22890: LD_INT 2
22892: ARRAY
22893: PPUSH
22894: CALL_OW 171
// AddComUnload ( Carriers ) ;
22898: LD_EXP 65
22902: PPUSH
22903: CALL_OW 219
// end ;
22907: GO 22814
22909: POP
22910: POP
// AddComMoveXY ( Carriers , 48 , 73 ) ;
22911: LD_EXP 65
22915: PPUSH
22916: LD_INT 48
22918: PPUSH
22919: LD_INT 73
22921: PPUSH
22922: CALL_OW 171
// WaitTask ( Carriers , 1 ) ;
22926: LD_EXP 65
22930: PPUSH
22931: LD_INT 1
22933: PPUSH
22934: CALL 17823 0 2
// Free_Place = 6 - UnitsInside ( AmArm ) ;
22938: LD_ADDR_VAR 0 5
22942: PUSH
22943: LD_INT 6
22945: PUSH
22946: LD_INT 92
22948: PPUSH
22949: CALL_OW 313
22953: MINUS
22954: ST_TO_ADDR
// if Free_Place > 2 then
22955: LD_VAR 0 5
22959: PUSH
22960: LD_INT 2
22962: GREATER
22963: IFFALSE 22979
// AddComEnterUnit ( Carriers , AmArm ) else
22965: LD_EXP 65
22969: PPUSH
22970: LD_INT 92
22972: PPUSH
22973: CALL_OW 180
22977: GO 23075
// begin for i = 1 to Free_Place do
22979: LD_ADDR_VAR 0 3
22983: PUSH
22984: DOUBLE
22985: LD_INT 1
22987: DEC
22988: ST_TO_ADDR
22989: LD_VAR 0 5
22993: PUSH
22994: FOR_TO
22995: IFFALSE 23029
// begin AddComEnterUnit ( Carriers [ i ] , AmArm ) ;
22997: LD_EXP 65
23001: PUSH
23002: LD_VAR 0 3
23006: ARRAY
23007: PPUSH
23008: LD_INT 92
23010: PPUSH
23011: CALL_OW 180
// AddComChangeProfession ( Carriers , class_soldier ) ;
23015: LD_EXP 65
23019: PPUSH
23020: LD_INT 1
23022: PPUSH
23023: CALL_OW 183
// end ;
23027: GO 22994
23029: POP
23030: POP
// for i = Free_Place + 1 to 3 do
23031: LD_ADDR_VAR 0 3
23035: PUSH
23036: DOUBLE
23037: LD_VAR 0 5
23041: PUSH
23042: LD_INT 1
23044: PLUS
23045: DEC
23046: ST_TO_ADDR
23047: LD_INT 3
23049: PUSH
23050: FOR_TO
23051: IFFALSE 23073
// AddComEnterUnit ( Carriers [ i ] , AmLab ) ;
23053: LD_EXP 65
23057: PUSH
23058: LD_VAR 0 3
23062: ARRAY
23063: PPUSH
23064: LD_INT 91
23066: PPUSH
23067: CALL_OW 180
23071: GO 23050
23073: POP
23074: POP
// end ; WaitTask ( Carriers , 1 ) ;
23075: LD_EXP 65
23079: PPUSH
23080: LD_INT 1
23082: PPUSH
23083: CALL 17823 0 2
// Remaining_Powells = Remaining_Powells ^ Carriers ;
23087: LD_ADDR_EXP 64
23091: PUSH
23092: LD_EXP 64
23096: PUSH
23097: LD_EXP 65
23101: ADD
23102: ST_TO_ADDR
// end ;
23103: LD_VAR 0 1
23107: RET
// export function StartAm1Base ; var i , Un , Uns ; begin
23108: LD_INT 0
23110: PPUSH
23111: PPUSH
23112: PPUSH
23113: PPUSH
// Remaining_Named = ( Remaining_Powells diff JMM_Helpers ) isect Named_americans ;
23114: LD_ADDR_EXP 63
23118: PUSH
23119: LD_EXP 64
23123: PUSH
23124: LD_EXP 67
23128: DIFF
23129: PUSH
23130: LD_EXP 62
23134: ISECT
23135: ST_TO_ADDR
// Remaining_Powells = Remaining_Powells diff Named_americans ;
23136: LD_ADDR_EXP 64
23140: PUSH
23141: LD_EXP 64
23145: PUSH
23146: LD_EXP 62
23150: DIFF
23151: ST_TO_ADDR
// Carriers = [ ] ;
23152: LD_ADDR_EXP 65
23156: PUSH
23157: EMPTY
23158: ST_TO_ADDR
// for i = 1 to 3 do
23159: LD_ADDR_VAR 0 2
23163: PUSH
23164: DOUBLE
23165: LD_INT 1
23167: DEC
23168: ST_TO_ADDR
23169: LD_INT 3
23171: PUSH
23172: FOR_TO
23173: IFFALSE 23217
// begin Carriers = Carriers ^ Remaining_Powells [ 1 ] ;
23175: LD_ADDR_EXP 65
23179: PUSH
23180: LD_EXP 65
23184: PUSH
23185: LD_EXP 64
23189: PUSH
23190: LD_INT 1
23192: ARRAY
23193: ADD
23194: ST_TO_ADDR
// Remaining_Powells = Remaining_Powells diff Remaining_Powells [ 1 ] ;
23195: LD_ADDR_EXP 64
23199: PUSH
23200: LD_EXP 64
23204: PUSH
23205: LD_EXP 64
23209: PUSH
23210: LD_INT 1
23212: ARRAY
23213: DIFF
23214: ST_TO_ADDR
// end ;
23215: GO 23172
23217: POP
23218: POP
// RaiseSailEvent ( Send_material ) ;
23219: LD_EXP 165
23223: PPUSH
23224: CALL_OW 427
// while UnitFilter ( Carriers , [ f_not , [ f_class , class_engineer ] ] ) do
23228: LD_EXP 65
23232: PPUSH
23233: LD_INT 3
23235: PUSH
23236: LD_INT 25
23238: PUSH
23239: LD_INT 2
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: PPUSH
23250: CALL_OW 72
23254: IFFALSE 23265
// Wait ( 0 0$1 ) ;
23256: LD_INT 35
23258: PPUSH
23259: CALL_OW 67
23263: GO 23228
// i = 0 ;
23265: LD_ADDR_VAR 0 2
23269: PUSH
23270: LD_INT 0
23272: ST_TO_ADDR
// Uns = Remaining_Powells ;
23273: LD_ADDR_VAR 0 4
23277: PUSH
23278: LD_EXP 64
23282: ST_TO_ADDR
// repeat i = i + 1 ;
23283: LD_ADDR_VAR 0 2
23287: PUSH
23288: LD_VAR 0 2
23292: PUSH
23293: LD_INT 1
23295: PLUS
23296: ST_TO_ADDR
// case i of 1 :
23297: LD_VAR 0 2
23301: PUSH
23302: LD_INT 1
23304: DOUBLE
23305: EQUAL
23306: IFTRUE 23310
23308: GO 23383
23310: POP
// begin Un = FindMaxSkill ( Uns , skill_combat ) ;
23311: LD_ADDR_VAR 0 3
23315: PUSH
23316: LD_VAR 0 4
23320: PPUSH
23321: LD_INT 1
23323: PPUSH
23324: CALL_OW 433
23328: ST_TO_ADDR
// Uns = Uns diff Un ;
23329: LD_ADDR_VAR 0 4
23333: PUSH
23334: LD_VAR 0 4
23338: PUSH
23339: LD_VAR 0 3
23343: DIFF
23344: ST_TO_ADDR
// ComEnterUnit ( Un , AmArm ) ;
23345: LD_VAR 0 3
23349: PPUSH
23350: LD_INT 92
23352: PPUSH
23353: CALL_OW 120
// AddComChangeProfession ( Un , class_soldier ) ;
23357: LD_VAR 0 3
23361: PPUSH
23362: LD_INT 1
23364: PPUSH
23365: CALL_OW 183
// AddComEnterUnit ( Un , AmB1 ) ;
23369: LD_VAR 0 3
23373: PPUSH
23374: LD_INT 89
23376: PPUSH
23377: CALL_OW 180
// end ; 2 :
23381: GO 23780
23383: LD_INT 2
23385: DOUBLE
23386: EQUAL
23387: IFTRUE 23391
23389: GO 23464
23391: POP
// begin Un = FindMaxSkill ( Uns , skill_combat ) ;
23392: LD_ADDR_VAR 0 3
23396: PUSH
23397: LD_VAR 0 4
23401: PPUSH
23402: LD_INT 1
23404: PPUSH
23405: CALL_OW 433
23409: ST_TO_ADDR
// Uns = Uns diff Un ;
23410: LD_ADDR_VAR 0 4
23414: PUSH
23415: LD_VAR 0 4
23419: PUSH
23420: LD_VAR 0 3
23424: DIFF
23425: ST_TO_ADDR
// ComEnterUnit ( Un , AmArm ) ;
23426: LD_VAR 0 3
23430: PPUSH
23431: LD_INT 92
23433: PPUSH
23434: CALL_OW 120
// AddComChangeProfession ( Un , class_soldier ) ;
23438: LD_VAR 0 3
23442: PPUSH
23443: LD_INT 1
23445: PPUSH
23446: CALL_OW 183
// AddComEnterUnit ( Un , AmB2 ) ;
23450: LD_VAR 0 3
23454: PPUSH
23455: LD_INT 90
23457: PPUSH
23458: CALL_OW 180
// end ; 3 :
23462: GO 23780
23464: LD_INT 3
23466: DOUBLE
23467: EQUAL
23468: IFTRUE 23472
23470: GO 23566
23472: POP
// begin Un = FindMinSkill ( Uns , skill_mechanical ) ;
23473: LD_ADDR_VAR 0 3
23477: PUSH
23478: LD_VAR 0 4
23482: PPUSH
23483: LD_INT 3
23485: PPUSH
23486: CALL_OW 443
23490: ST_TO_ADDR
// The_original_mechanical_Skill = GetSkill ( Un , skill_mechanical ) ;
23491: LD_ADDR_LOC 13
23495: PUSH
23496: LD_VAR 0 3
23500: PPUSH
23501: LD_INT 3
23503: PPUSH
23504: CALL_OW 259
23508: ST_TO_ADDR
// SetSkill ( Un , skill_mechanical , 5 ) ;
23509: LD_VAR 0 3
23513: PPUSH
23514: LD_INT 3
23516: PPUSH
23517: LD_INT 5
23519: PPUSH
23520: CALL_OW 237
// Uns = Uns diff Un ;
23524: LD_ADDR_VAR 0 4
23528: PUSH
23529: LD_VAR 0 4
23533: PUSH
23534: LD_VAR 0 3
23538: DIFF
23539: ST_TO_ADDR
// ComEnterUnit ( Un , AmFact ) ;
23540: LD_VAR 0 3
23544: PPUSH
23545: LD_INT 85
23547: PPUSH
23548: CALL_OW 120
// AddComChangeProfession ( Un , class_mechanic ) ;
23552: LD_VAR 0 3
23556: PPUSH
23557: LD_INT 3
23559: PPUSH
23560: CALL_OW 183
// end ; 4 :
23564: GO 23780
23566: LD_INT 4
23568: DOUBLE
23569: EQUAL
23570: IFTRUE 23574
23572: GO 23645
23574: POP
// begin Un = FindMinSkill ( Uns , skill_scientistic ) ;
23575: LD_ADDR_VAR 0 3
23579: PUSH
23580: LD_VAR 0 4
23584: PPUSH
23585: LD_INT 4
23587: PPUSH
23588: CALL_OW 443
23592: ST_TO_ADDR
// Uns = Uns diff Un ;
23593: LD_ADDR_VAR 0 4
23597: PUSH
23598: LD_VAR 0 4
23602: PUSH
23603: LD_VAR 0 3
23607: DIFF
23608: ST_TO_ADDR
// ComEnterUnit ( Un , AmLab ) ;
23609: LD_VAR 0 3
23613: PPUSH
23614: LD_INT 91
23616: PPUSH
23617: CALL_OW 120
// AddComChangeProfession ( Un , class_scientistic ) ;
23621: LD_VAR 0 3
23625: PPUSH
23626: LD_INT 4
23628: PPUSH
23629: CALL_OW 183
// Developer = Un ;
23633: LD_ADDR_LOC 10
23637: PUSH
23638: LD_VAR 0 3
23642: ST_TO_ADDR
// end ; else
23643: GO 23780
23645: POP
// begin if ( i mod 2 = 1 ) and ( i > 2 ) then
23646: LD_VAR 0 2
23650: PUSH
23651: LD_INT 2
23653: MOD
23654: PUSH
23655: LD_INT 1
23657: EQUAL
23658: PUSH
23659: LD_VAR 0 2
23663: PUSH
23664: LD_INT 2
23666: GREATER
23667: AND
23668: IFFALSE 23726
// begin Un = Uns [ 1 ] ;
23670: LD_ADDR_VAR 0 3
23674: PUSH
23675: LD_VAR 0 4
23679: PUSH
23680: LD_INT 1
23682: ARRAY
23683: ST_TO_ADDR
// Uns = Uns diff Un ;
23684: LD_ADDR_VAR 0 4
23688: PUSH
23689: LD_VAR 0 4
23693: PUSH
23694: LD_VAR 0 3
23698: DIFF
23699: ST_TO_ADDR
// ComEnterUnit ( Un , AmArm ) ;
23700: LD_VAR 0 3
23704: PPUSH
23705: LD_INT 92
23707: PPUSH
23708: CALL_OW 120
// AddComChangeProfession ( Un , class_soldier ) ;
23712: LD_VAR 0 3
23716: PPUSH
23717: LD_INT 1
23719: PPUSH
23720: CALL_OW 183
// end else
23724: GO 23780
// begin Un = Uns [ 1 ] ;
23726: LD_ADDR_VAR 0 3
23730: PUSH
23731: LD_VAR 0 4
23735: PUSH
23736: LD_INT 1
23738: ARRAY
23739: ST_TO_ADDR
// Uns = Uns diff Un ;
23740: LD_ADDR_VAR 0 4
23744: PUSH
23745: LD_VAR 0 4
23749: PUSH
23750: LD_VAR 0 3
23754: DIFF
23755: ST_TO_ADDR
// ComEnterUnit ( Un , AmDep ) ;
23756: LD_VAR 0 3
23760: PPUSH
23761: LD_INT 84
23763: PPUSH
23764: CALL_OW 120
// AddComChangeProfession ( Un , class_engineer ) ;
23768: LD_VAR 0 3
23772: PPUSH
23773: LD_INT 2
23775: PPUSH
23776: CALL_OW 183
// end ; end ; end ; until Uns = 0 ;
23780: LD_VAR 0 4
23784: PUSH
23785: LD_INT 0
23787: EQUAL
23788: IFFALSE 23283
// ComResearch ( AmLab , tech_Tech1 ) ;
23790: LD_INT 91
23792: PPUSH
23793: LD_INT 48
23795: PPUSH
23796: CALL_OW 124
// AddComResearch ( AmLab , tech_Tech2 ) ;
23800: LD_INT 91
23802: PPUSH
23803: LD_INT 49
23805: PPUSH
23806: CALL_OW 184
// AddComResearch ( AmLab , tech_Tech3 ) ;
23810: LD_INT 91
23812: PPUSH
23813: LD_INT 50
23815: PPUSH
23816: CALL_OW 184
// AddComConstruct ( AmFact , us_medium_tracked , engine_solar , control_manual , us_light_gun ) ;
23820: LD_INT 85
23822: PPUSH
23823: LD_INT 3
23825: PPUSH
23826: LD_INT 2
23828: PPUSH
23829: LD_INT 1
23831: PPUSH
23832: LD_INT 3
23834: PPUSH
23835: CALL_OW 185
// if Remaining_Named <> 0 then
23839: LD_EXP 63
23843: PUSH
23844: LD_INT 0
23846: NONEQUAL
23847: IFFALSE 24131
// begin ComEnterUnit ( Remaining_Named [ 1 ] , AmLab ) ;
23849: LD_EXP 63
23853: PUSH
23854: LD_INT 1
23856: ARRAY
23857: PPUSH
23858: LD_INT 91
23860: PPUSH
23861: CALL_OW 120
// AddComChangeProfession ( Remaining_Named [ 1 ] , class_scientistic ) ;
23865: LD_EXP 63
23869: PUSH
23870: LD_INT 1
23872: ARRAY
23873: PPUSH
23874: LD_INT 4
23876: PPUSH
23877: CALL_OW 183
// while ( GetClass ( Carriers [ 1 ] ) <> class_engineer or GetClass ( Carriers [ 2 ] ) <> class_engineer or GetClass ( Carriers [ 3 ] ) <> class_engineer ) do
23881: LD_EXP 65
23885: PUSH
23886: LD_INT 1
23888: ARRAY
23889: PPUSH
23890: CALL_OW 257
23894: PUSH
23895: LD_INT 2
23897: NONEQUAL
23898: PUSH
23899: LD_EXP 65
23903: PUSH
23904: LD_INT 2
23906: ARRAY
23907: PPUSH
23908: CALL_OW 257
23912: PUSH
23913: LD_INT 2
23915: NONEQUAL
23916: OR
23917: PUSH
23918: LD_EXP 65
23922: PUSH
23923: LD_INT 3
23925: ARRAY
23926: PPUSH
23927: CALL_OW 257
23931: PUSH
23932: LD_INT 2
23934: NONEQUAL
23935: OR
23936: IFFALSE 23947
// Wait ( 0 0$1 ) ;
23938: LD_INT 35
23940: PPUSH
23941: CALL_OW 67
23945: GO 23881
// if Remaining_Named > 7 then
23947: LD_EXP 63
23951: PUSH
23952: LD_INT 7
23954: GREATER
23955: IFFALSE 24073
// begin for i = 2 to 7 do
23957: LD_ADDR_VAR 0 2
23961: PUSH
23962: DOUBLE
23963: LD_INT 2
23965: DEC
23966: ST_TO_ADDR
23967: LD_INT 7
23969: PUSH
23970: FOR_TO
23971: IFFALSE 24011
// begin ComEnterUnit ( Remaining_Named [ i ] , AmDep ) ;
23973: LD_EXP 63
23977: PUSH
23978: LD_VAR 0 2
23982: ARRAY
23983: PPUSH
23984: LD_INT 84
23986: PPUSH
23987: CALL_OW 120
// AddComChangeProfession ( Remaining_Named [ i ] , class_engineer ) ;
23991: LD_EXP 63
23995: PUSH
23996: LD_VAR 0 2
24000: ARRAY
24001: PPUSH
24002: LD_INT 2
24004: PPUSH
24005: CALL_OW 183
// end ;
24009: GO 23970
24011: POP
24012: POP
// for i = 8 to Remaining_Named do
24013: LD_ADDR_VAR 0 2
24017: PUSH
24018: DOUBLE
24019: LD_INT 8
24021: DEC
24022: ST_TO_ADDR
24023: LD_EXP 63
24027: PUSH
24028: FOR_TO
24029: IFFALSE 24069
// begin ComEnterUnit ( Remaining_Named [ i ] , AmArm ) ;
24031: LD_EXP 63
24035: PUSH
24036: LD_VAR 0 2
24040: ARRAY
24041: PPUSH
24042: LD_INT 92
24044: PPUSH
24045: CALL_OW 120
// AddComChangeProfession ( Remaining_Named [ i ] , class_soldier ) ;
24049: LD_EXP 63
24053: PUSH
24054: LD_VAR 0 2
24058: ARRAY
24059: PPUSH
24060: LD_INT 1
24062: PPUSH
24063: CALL_OW 183
// end ;
24067: GO 24028
24069: POP
24070: POP
// end else
24071: GO 24131
// for i = 2 to Remaining_Named do
24073: LD_ADDR_VAR 0 2
24077: PUSH
24078: DOUBLE
24079: LD_INT 2
24081: DEC
24082: ST_TO_ADDR
24083: LD_EXP 63
24087: PUSH
24088: FOR_TO
24089: IFFALSE 24129
// begin ComEnterUnit ( Remaining_Named [ i ] , AmDep ) ;
24091: LD_EXP 63
24095: PUSH
24096: LD_VAR 0 2
24100: ARRAY
24101: PPUSH
24102: LD_INT 84
24104: PPUSH
24105: CALL_OW 120
// AddComChangeProfession ( Remaining_Named [ i ] , class_engineer ) ;
24109: LD_EXP 63
24113: PUSH
24114: LD_VAR 0 2
24118: ARRAY
24119: PPUSH
24120: LD_INT 2
24122: PPUSH
24123: CALL_OW 183
// end ;
24127: GO 24088
24129: POP
24130: POP
// end ; end ;
24131: LD_VAR 0 1
24135: RET
// export function Am1VehicleConstructed ( veh ) ; var hex ; begin
24136: LD_INT 0
24138: PPUSH
24139: PPUSH
// driver = UnitsInside ( veh ) [ 1 ] ;
24140: LD_ADDR_LOC 9
24144: PUSH
24145: LD_VAR 0 1
24149: PPUSH
24150: CALL_OW 313
24154: PUSH
24155: LD_INT 1
24157: ARRAY
24158: ST_TO_ADDR
// Am1_vehicles = Am1_vehicles ^ veh ;
24159: LD_ADDR_EXP 59
24163: PUSH
24164: LD_EXP 59
24168: PUSH
24169: LD_VAR 0 1
24173: ADD
24174: ST_TO_ADDR
// if Am1_vehicles < 4 then
24175: LD_EXP 59
24179: PUSH
24180: LD_INT 4
24182: LESS
24183: IFFALSE 24306
// begin hex = RandHexArea ( Am1_parking , true ) ;
24185: LD_ADDR_VAR 0 3
24189: PUSH
24190: LD_INT 21
24192: PPUSH
24193: LD_INT 1
24195: PPUSH
24196: CALL_OW 16
24200: ST_TO_ADDR
// ComMoveXY ( driver , hex [ 1 ] , hex [ 2 ] ) ;
24201: LD_LOC 9
24205: PPUSH
24206: LD_VAR 0 3
24210: PUSH
24211: LD_INT 1
24213: ARRAY
24214: PPUSH
24215: LD_VAR 0 3
24219: PUSH
24220: LD_INT 2
24222: ARRAY
24223: PPUSH
24224: CALL_OW 111
// AddComExitVehicle ( driver ) ;
24228: LD_LOC 9
24232: PPUSH
24233: CALL_OW 181
// AddComEnterUnit ( driver , AmFact ) ;
24237: LD_LOC 9
24241: PPUSH
24242: LD_INT 85
24244: PPUSH
24245: CALL_OW 180
// if Powell_Attack_Counter in [ 1 , 3 ] then
24249: LD_EXP 193
24253: PUSH
24254: LD_INT 1
24256: PUSH
24257: LD_INT 3
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: IN
24264: IFFALSE 24304
// ComConstruct ( Amfact , us_medium_tracked , engine_solar , control_manual , [ us_light_gun , us_double_gun ] [ Rand ( 1 , 2 ) ] ) ;
24266: LD_INT 85
24268: PPUSH
24269: LD_INT 3
24271: PPUSH
24272: LD_INT 2
24274: PPUSH
24275: LD_INT 1
24277: PPUSH
24278: LD_INT 3
24280: PUSH
24281: LD_INT 5
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: LD_INT 1
24290: PPUSH
24291: LD_INT 2
24293: PPUSH
24294: CALL_OW 12
24298: ARRAY
24299: PPUSH
24300: CALL_OW 125
// end else
24304: GO 24650
// if Powell_Attack_Counter = 1 then
24306: LD_EXP 193
24310: PUSH
24311: LD_INT 1
24313: EQUAL
24314: IFFALSE 24444
// begin Powell_Attack_Counter = 2 ;
24316: LD_ADDR_EXP 193
24320: PUSH
24321: LD_INT 2
24323: ST_TO_ADDR
// ComMoveXY ( driver , 52 , 64 ) ;
24324: LD_LOC 9
24328: PPUSH
24329: LD_INT 52
24331: PPUSH
24332: LD_INT 64
24334: PPUSH
24335: CALL_OW 111
// AddComExitVehicle ( driver ) ;
24339: LD_LOC 9
24343: PPUSH
24344: CALL_OW 181
// AddComEnterUnit ( driver , AmFact ) ;
24348: LD_LOC 9
24352: PPUSH
24353: LD_INT 85
24355: PPUSH
24356: CALL_OW 180
// Wait ( 1 ) ;
24360: LD_INT 1
24362: PPUSH
24363: CALL_OW 67
// WaitTask ( driver , 1 ) ;
24367: LD_LOC 9
24371: PPUSH
24372: LD_INT 1
24374: PPUSH
24375: CALL 17823 0 2
// Remaining_Powells = Remaining_Powells diff driver ;
24379: LD_ADDR_EXP 64
24383: PUSH
24384: LD_EXP 64
24388: PUSH
24389: LD_LOC 9
24393: DIFF
24394: ST_TO_ADDR
// FirstPowellsAttack ;
24395: CALL 24725 0 0
// Powell_Attack_Counter = 3 ;
24399: LD_ADDR_EXP 193
24403: PUSH
24404: LD_INT 3
24406: ST_TO_ADDR
// Remaining_Powells = Remaining_Powells ^ driver ;
24407: LD_ADDR_EXP 64
24411: PUSH
24412: LD_EXP 64
24416: PUSH
24417: LD_LOC 9
24421: ADD
24422: ST_TO_ADDR
// ComConstruct ( AmFact , us_medium_tracked , engine_solar , control_manual , us_light_gun ) ;
24423: LD_INT 85
24425: PPUSH
24426: LD_INT 3
24428: PPUSH
24429: LD_INT 2
24431: PPUSH
24432: LD_INT 1
24434: PPUSH
24435: LD_INT 3
24437: PPUSH
24438: CALL_OW 125
// end else
24442: GO 24650
// if Powell_Attack_Counter = 3 then
24444: LD_EXP 193
24448: PUSH
24449: LD_INT 3
24451: EQUAL
24452: IFFALSE 24547
// begin Powell_Attack_Counter = 4 ;
24454: LD_ADDR_EXP 193
24458: PUSH
24459: LD_INT 4
24461: ST_TO_ADDR
// ComConstruct ( AmFact , us_medium_tracked , engine_solar , control_manual , us_light_gun ) ;
24462: LD_INT 85
24464: PPUSH
24465: LD_INT 3
24467: PPUSH
24468: LD_INT 2
24470: PPUSH
24471: LD_INT 1
24473: PPUSH
24474: LD_INT 3
24476: PPUSH
24477: CALL_OW 125
// hex = RandHexArea ( Am1_parking , true ) ;
24481: LD_ADDR_VAR 0 3
24485: PUSH
24486: LD_INT 21
24488: PPUSH
24489: LD_INT 1
24491: PPUSH
24492: CALL_OW 16
24496: ST_TO_ADDR
// ComMoveXY ( driver , hex [ 1 ] , hex [ 2 ] ) ;
24497: LD_LOC 9
24501: PPUSH
24502: LD_VAR 0 3
24506: PUSH
24507: LD_INT 1
24509: ARRAY
24510: PPUSH
24511: LD_VAR 0 3
24515: PUSH
24516: LD_INT 2
24518: ARRAY
24519: PPUSH
24520: CALL_OW 111
// AddComExitVehicle ( driver ) ;
24524: LD_LOC 9
24528: PPUSH
24529: CALL_OW 181
// AddComEnterUnit ( driver , AmFact ) ;
24533: LD_LOC 9
24537: PPUSH
24538: LD_INT 85
24540: PPUSH
24541: CALL_OW 180
// end else
24545: GO 24650
// if Powell_Attack_Counter = 4 then
24547: LD_EXP 193
24551: PUSH
24552: LD_INT 4
24554: EQUAL
24555: IFFALSE 24650
// begin Powell_Attack_Counter = 5 ;
24557: LD_ADDR_EXP 193
24561: PUSH
24562: LD_INT 5
24564: ST_TO_ADDR
// Am1_vehicles = Am1_vehicles diff veh ;
24565: LD_ADDR_EXP 59
24569: PUSH
24570: LD_EXP 59
24574: PUSH
24575: LD_VAR 0 1
24579: DIFF
24580: ST_TO_ADDR
// Powell_vehicle = veh ;
24581: LD_ADDR_EXP 192
24585: PUSH
24586: LD_VAR 0 1
24590: ST_TO_ADDR
// ComMoveXY ( driver , 52 , 64 ) ;
24591: LD_LOC 9
24595: PPUSH
24596: LD_INT 52
24598: PPUSH
24599: LD_INT 64
24601: PPUSH
24602: CALL_OW 111
// AddComExitVehicle ( driver ) ;
24606: LD_LOC 9
24610: PPUSH
24611: CALL_OW 181
// AddComEnterUnit ( driver , AmFact ) ;
24615: LD_LOC 9
24619: PPUSH
24620: LD_INT 85
24622: PPUSH
24623: CALL_OW 180
// Wait ( 1 ) ;
24627: LD_INT 1
24629: PPUSH
24630: CALL_OW 67
// WaitTask ( driver , 1 ) ;
24634: LD_LOC 9
24638: PPUSH
24639: LD_INT 1
24641: PPUSH
24642: CALL 17823 0 2
// SecondPowellsAttack ;
24646: CALL 25699 0 0
// end ; end ;
24650: LD_VAR 0 2
24654: RET
// export function RetreatReport ; begin
24655: LD_INT 0
24657: PPUSH
// Say ( Retreat_Boy , D4a-Sol1-1 ) ;
24658: LD_LOC 8
24662: PPUSH
24663: LD_STRING D4a-Sol1-1
24665: PPUSH
24666: CALL_OW 88
// Wait ( 0 0$4 ) ;
24670: LD_INT 140
24672: PPUSH
24673: CALL_OW 67
// Say ( Powell , D4a-Pow-1 ) ;
24677: LD_EXP 2
24681: PPUSH
24682: LD_STRING D4a-Pow-1
24684: PPUSH
24685: CALL_OW 88
// Wait ( 0 0$2 ) ;
24689: LD_INT 70
24691: PPUSH
24692: CALL_OW 67
// Say ( Retreat_Boy , D4a-Sol1-2 ) ;
24696: LD_LOC 8
24700: PPUSH
24701: LD_STRING D4a-Sol1-2
24703: PPUSH
24704: CALL_OW 88
// Say ( Powell , D4a-Pow-2 ) ;
24708: LD_EXP 2
24712: PPUSH
24713: LD_STRING D4a-Pow-2
24715: PPUSH
24716: CALL_OW 88
// end ;
24720: LD_VAR 0 1
24724: RET
// export function FirstPowellsAttack ; var i , Un , ret , first_ret , InsideArm ; begin
24725: LD_INT 0
24727: PPUSH
24728: PPUSH
24729: PPUSH
24730: PPUSH
24731: PPUSH
24732: PPUSH
// soldiers = [ ] ;
24733: LD_ADDR_LOC 6
24737: PUSH
24738: EMPTY
24739: ST_TO_ADDR
// ret = [ 0 , 0 , 0 , 0 ] ;
24740: LD_ADDR_VAR 0 4
24744: PUSH
24745: LD_INT 0
24747: PUSH
24748: LD_INT 0
24750: PUSH
24751: LD_INT 0
24753: PUSH
24754: LD_INT 0
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: ST_TO_ADDR
// first_ret = true ;
24763: LD_ADDR_VAR 0 5
24767: PUSH
24768: LD_INT 1
24770: ST_TO_ADDR
// InsideArm = UnitsInside ( AmArm ) ;
24771: LD_ADDR_VAR 0 6
24775: PUSH
24776: LD_INT 92
24778: PPUSH
24779: CALL_OW 313
24783: ST_TO_ADDR
// ComExitBuilding ( InsideArm ) ;
24784: LD_VAR 0 6
24788: PPUSH
24789: CALL_OW 122
// ComMoveXY ( InsideArm , 55 , 69 ) ;
24793: LD_VAR 0 6
24797: PPUSH
24798: LD_INT 55
24800: PPUSH
24801: LD_INT 69
24803: PPUSH
24804: CALL_OW 111
// for i = 1 to 4 do
24808: LD_ADDR_VAR 0 2
24812: PUSH
24813: DOUBLE
24814: LD_INT 1
24816: DEC
24817: ST_TO_ADDR
24818: LD_INT 4
24820: PUSH
24821: FOR_TO
24822: IFFALSE 24998
// begin Un = 0 ;
24824: LD_ADDR_VAR 0 3
24828: PUSH
24829: LD_INT 0
24831: ST_TO_ADDR
// Un = FindMinSumSkill ( Remaining_Powells diff [ driver , developer ] , sex_male ) ;
24832: LD_ADDR_VAR 0 3
24836: PUSH
24837: LD_EXP 64
24841: PUSH
24842: LD_LOC 9
24846: PUSH
24847: LD_LOC 10
24851: PUSH
24852: EMPTY
24853: LIST
24854: LIST
24855: DIFF
24856: PPUSH
24857: LD_INT 1
24859: PPUSH
24860: CALL 18251 0 2
24864: ST_TO_ADDR
// if Un = 0 then
24865: LD_VAR 0 3
24869: PUSH
24870: LD_INT 0
24872: EQUAL
24873: IFFALSE 24893
// Un = FindMinSumSkill ( Remaining_Powells , 0 ) ;
24875: LD_ADDR_VAR 0 3
24879: PUSH
24880: LD_EXP 64
24884: PPUSH
24885: LD_INT 0
24887: PPUSH
24888: CALL 18251 0 2
24892: ST_TO_ADDR
// Remaining_Powells = Remaining_Powells diff Un ;
24893: LD_ADDR_EXP 64
24897: PUSH
24898: LD_EXP 64
24902: PUSH
24903: LD_VAR 0 3
24907: DIFF
24908: ST_TO_ADDR
// soldiers = soldiers ^ Un ;
24909: LD_ADDR_LOC 6
24913: PUSH
24914: LD_LOC 6
24918: PUSH
24919: LD_VAR 0 3
24923: ADD
24924: ST_TO_ADDR
// if GetClass ( Un ) <> class_soldier then
24925: LD_VAR 0 3
24929: PPUSH
24930: CALL_OW 257
24934: PUSH
24935: LD_INT 1
24937: NONEQUAL
24938: IFFALSE 24981
// begin ComEnterUnit ( Un , AmArm ) ;
24940: LD_VAR 0 3
24944: PPUSH
24945: LD_INT 92
24947: PPUSH
24948: CALL_OW 120
// AddComChangeProfession ( Un , class_soldier ) ;
24952: LD_VAR 0 3
24956: PPUSH
24957: LD_INT 1
24959: PPUSH
24960: CALL_OW 183
// AddComMoveXY ( Un , 45 , 64 ) ;
24964: LD_VAR 0 3
24968: PPUSH
24969: LD_INT 45
24971: PPUSH
24972: LD_INT 64
24974: PPUSH
24975: CALL_OW 171
// end else
24979: GO 24996
// ComMoveXY ( Un , 45 , 64 ) ;
24981: LD_VAR 0 3
24985: PPUSH
24986: LD_INT 45
24988: PPUSH
24989: LD_INT 64
24991: PPUSH
24992: CALL_OW 111
// end ;
24996: GO 24821
24998: POP
24999: POP
// WaitTask ( soldiers , 1 ) ;
25000: LD_LOC 6
25004: PPUSH
25005: LD_INT 1
25007: PPUSH
25008: CALL 17823 0 2
// ComEnterUnit ( InsideArm diff soldiers , AmArm ) ;
25012: LD_VAR 0 6
25016: PUSH
25017: LD_LOC 6
25021: DIFF
25022: PPUSH
25023: LD_INT 92
25025: PPUSH
25026: CALL_OW 120
// if not ( Debug_Constant ) then
25030: LD_EXP 195
25034: NOT
25035: IFFALSE 25056
// begin while tick < 12 12$0 do
25037: LD_OWVAR 1
25041: PUSH
25042: LD_INT 25200
25044: LESS
25045: IFFALSE 25056
// Wait ( 0 0$1 ) ;
25047: LD_INT 35
25049: PPUSH
25050: CALL_OW 67
25054: GO 25037
// end ; Say ( Powell , D4-Pow-1 ) ;
25056: LD_EXP 2
25060: PPUSH
25061: LD_STRING D4-Pow-1
25063: PPUSH
25064: CALL_OW 88
// Say ( soldiers [ 1 ] , D4-Sol1-1 ) ;
25068: LD_LOC 6
25072: PUSH
25073: LD_INT 1
25075: ARRAY
25076: PPUSH
25077: LD_STRING D4-Sol1-1
25079: PPUSH
25080: CALL_OW 88
// Say ( Powell , D4-Pow-2 ) ;
25084: LD_EXP 2
25088: PPUSH
25089: LD_STRING D4-Pow-2
25091: PPUSH
25092: CALL_OW 88
// for i = 1 to 4 do
25096: LD_ADDR_VAR 0 2
25100: PUSH
25101: DOUBLE
25102: LD_INT 1
25104: DEC
25105: ST_TO_ADDR
25106: LD_INT 4
25108: PUSH
25109: FOR_TO
25110: IFFALSE 25161
// begin ComEnterUnit ( soldiers [ i ] , Am1_vehicles [ i ] ) ;
25112: LD_LOC 6
25116: PUSH
25117: LD_VAR 0 2
25121: ARRAY
25122: PPUSH
25123: LD_EXP 59
25127: PUSH
25128: LD_VAR 0 2
25132: ARRAY
25133: PPUSH
25134: CALL_OW 120
// AddComMoveXY ( soldiers [ i ] , 66 , 61 ) ;
25138: LD_LOC 6
25142: PUSH
25143: LD_VAR 0 2
25147: ARRAY
25148: PPUSH
25149: LD_INT 66
25151: PPUSH
25152: LD_INT 61
25154: PPUSH
25155: CALL_OW 171
// end ;
25159: GO 25109
25161: POP
25162: POP
// WaitPos ( 66 , 61 , 6 , Am1_vehicles , 1 ) ;
25163: LD_INT 66
25165: PPUSH
25166: LD_INT 61
25168: PPUSH
25169: LD_INT 6
25171: PPUSH
25172: LD_EXP 59
25176: PPUSH
25177: LD_INT 1
25179: PPUSH
25180: CALL 17921 0 5
// ComAgressiveMove ( Am1_vehicles , 76 , 22 ) ;
25184: LD_EXP 59
25188: PPUSH
25189: LD_INT 76
25191: PPUSH
25192: LD_INT 22
25194: PPUSH
25195: CALL_OW 114
// while not ( IsInArea ( soldiers [ 1 ] , Am_Base ) and IsInArea ( soldiers [ 2 ] , Am_Base ) and IsInArea ( soldiers [ 3 ] , Am_Base ) and IsInArea ( soldiers [ 4 ] , Am_Base ) ) do
25199: LD_LOC 6
25203: PUSH
25204: LD_INT 1
25206: ARRAY
25207: PPUSH
25208: LD_INT 1
25210: PPUSH
25211: CALL_OW 308
25215: PUSH
25216: LD_LOC 6
25220: PUSH
25221: LD_INT 2
25223: ARRAY
25224: PPUSH
25225: LD_INT 1
25227: PPUSH
25228: CALL_OW 308
25232: AND
25233: PUSH
25234: LD_LOC 6
25238: PUSH
25239: LD_INT 3
25241: ARRAY
25242: PPUSH
25243: LD_INT 1
25245: PPUSH
25246: CALL_OW 308
25250: AND
25251: PUSH
25252: LD_LOC 6
25256: PUSH
25257: LD_INT 4
25259: ARRAY
25260: PPUSH
25261: LD_INT 1
25263: PPUSH
25264: CALL_OW 308
25268: AND
25269: NOT
25270: IFFALSE 25470
// begin for i = 1 to 4 do
25272: LD_ADDR_VAR 0 2
25276: PUSH
25277: DOUBLE
25278: LD_INT 1
25280: DEC
25281: ST_TO_ADDR
25282: LD_INT 4
25284: PUSH
25285: FOR_TO
25286: IFFALSE 25459
// begin if not ( IsInUnit ( soldiers [ i ] ) ) and not ( ret [ i ] ) then
25288: LD_LOC 6
25292: PUSH
25293: LD_VAR 0 2
25297: ARRAY
25298: PPUSH
25299: CALL_OW 310
25303: NOT
25304: PUSH
25305: LD_VAR 0 4
25309: PUSH
25310: LD_VAR 0 2
25314: ARRAY
25315: NOT
25316: AND
25317: IFFALSE 25424
// begin if first_ret then
25319: LD_VAR 0 5
25323: IFFALSE 25358
// begin first_ret = false ;
25325: LD_ADDR_VAR 0 5
25329: PUSH
25330: LD_INT 0
25332: ST_TO_ADDR
// Retreat_Boy = soldiers [ i ] ;
25333: LD_ADDR_LOC 8
25337: PUSH
25338: LD_LOC 6
25342: PUSH
25343: LD_VAR 0 2
25347: ARRAY
25348: ST_TO_ADDR
// RaiseSailEvent ( Retreat_Report ) ;
25349: LD_EXP 172
25353: PPUSH
25354: CALL_OW 427
// end ; ret = replace ( ret , i , 1 ) ;
25358: LD_ADDR_VAR 0 4
25362: PUSH
25363: LD_VAR 0 4
25367: PPUSH
25368: LD_VAR 0 2
25372: PPUSH
25373: LD_INT 1
25375: PPUSH
25376: CALL_OW 1
25380: ST_TO_ADDR
// ComMoveXY ( soldiers [ i ] , 51 , 65 ) ;
25381: LD_LOC 6
25385: PUSH
25386: LD_VAR 0 2
25390: ARRAY
25391: PPUSH
25392: LD_INT 51
25394: PPUSH
25395: LD_INT 65
25397: PPUSH
25398: CALL_OW 111
// DoNotAttack ( arabians , soldiers [ i ] ) ;
25402: LD_EXP 180
25406: PPUSH
25407: LD_LOC 6
25411: PUSH
25412: LD_VAR 0 2
25416: ARRAY
25417: PPUSH
25418: CALL_OW 471
// end else
25422: GO 25457
// if ret [ i ] then
25424: LD_VAR 0 4
25428: PUSH
25429: LD_VAR 0 2
25433: ARRAY
25434: IFFALSE 25457
// ComMoveXY ( soldiers [ i ] , 51 , 65 ) ;
25436: LD_LOC 6
25440: PUSH
25441: LD_VAR 0 2
25445: ARRAY
25446: PPUSH
25447: LD_INT 51
25449: PPUSH
25450: LD_INT 65
25452: PPUSH
25453: CALL_OW 111
// end ;
25457: GO 25285
25459: POP
25460: POP
// Wait ( 0 0$0.2 ) ;
25461: LD_INT 7
25463: PPUSH
25464: CALL_OW 67
// end ;
25468: GO 25199
// for Un in soldiers do
25470: LD_ADDR_VAR 0 3
25474: PUSH
25475: LD_LOC 6
25479: PUSH
25480: FOR_IN
25481: IFFALSE 25499
// NormalAttack ( arabians , Un ) ;
25483: LD_EXP 180
25487: PPUSH
25488: LD_VAR 0 3
25492: PPUSH
25493: CALL_OW 472
25497: GO 25480
25499: POP
25500: POP
// if UnitsInside ( AmB1 ) = 0 then
25501: LD_INT 89
25503: PPUSH
25504: CALL_OW 313
25508: PUSH
25509: LD_INT 0
25511: EQUAL
25512: IFFALSE 25570
// begin ComEnterUnit ( soldiers [ 1 ] , AmB1 ) ;
25514: LD_LOC 6
25518: PUSH
25519: LD_INT 1
25521: ARRAY
25522: PPUSH
25523: LD_INT 89
25525: PPUSH
25526: CALL_OW 120
// Remaining_Powells = Remaining_Powells ^ soldiers [ 1 ] ;
25530: LD_ADDR_EXP 64
25534: PUSH
25535: LD_EXP 64
25539: PUSH
25540: LD_LOC 6
25544: PUSH
25545: LD_INT 1
25547: ARRAY
25548: ADD
25549: ST_TO_ADDR
// soldiers = soldiers diff soldiers [ 1 ] ;
25550: LD_ADDR_LOC 6
25554: PUSH
25555: LD_LOC 6
25559: PUSH
25560: LD_LOC 6
25564: PUSH
25565: LD_INT 1
25567: ARRAY
25568: DIFF
25569: ST_TO_ADDR
// end ; if UnitsInside ( AmB2 ) = 0 then
25570: LD_INT 90
25572: PPUSH
25573: CALL_OW 313
25577: PUSH
25578: LD_INT 0
25580: EQUAL
25581: IFFALSE 25639
// begin ComEnterUnit ( soldiers [ 2 ] , AmB2 ) ;
25583: LD_LOC 6
25587: PUSH
25588: LD_INT 2
25590: ARRAY
25591: PPUSH
25592: LD_INT 90
25594: PPUSH
25595: CALL_OW 120
// Remaining_Powells = Remaining_Powells ^ soldiers [ 2 ] ;
25599: LD_ADDR_EXP 64
25603: PUSH
25604: LD_EXP 64
25608: PUSH
25609: LD_LOC 6
25613: PUSH
25614: LD_INT 2
25616: ARRAY
25617: ADD
25618: ST_TO_ADDR
// soldiers = soldiers diff soldiers [ 2 ] ;
25619: LD_ADDR_LOC 6
25623: PUSH
25624: LD_LOC 6
25628: PUSH
25629: LD_LOC 6
25633: PUSH
25634: LD_INT 2
25636: ARRAY
25637: DIFF
25638: ST_TO_ADDR
// end ; for Un in soldiers do
25639: LD_ADDR_VAR 0 3
25643: PUSH
25644: LD_LOC 6
25648: PUSH
25649: FOR_IN
25650: IFFALSE 25682
// begin Remaining_Powells = Remaining_Powells ^ Un ;
25652: LD_ADDR_EXP 64
25656: PUSH
25657: LD_EXP 64
25661: PUSH
25662: LD_VAR 0 3
25666: ADD
25667: ST_TO_ADDR
// ComEnterUnit ( Un , AmArm ) ;
25668: LD_VAR 0 3
25672: PPUSH
25673: LD_INT 92
25675: PPUSH
25676: CALL_OW 120
// end ;
25680: GO 25649
25682: POP
25683: POP
// Am1_vehicles = Captured_vehicles ;
25684: LD_ADDR_EXP 59
25688: PUSH
25689: LD_EXP 60
25693: ST_TO_ADDR
// end ;
25694: LD_VAR 0 1
25698: RET
// export function SecondPowellsAttack ; var i , Un , Un1 , Initial_lives , InsideArm , Hex , JMM_Labs ; begin
25699: LD_INT 0
25701: PPUSH
25702: PPUSH
25703: PPUSH
25704: PPUSH
25705: PPUSH
25706: PPUSH
25707: PPUSH
25708: PPUSH
// soldiers = [ ] ;
25709: LD_ADDR_LOC 6
25713: PUSH
25714: EMPTY
25715: ST_TO_ADDR
// soldiers1 = [ ] ;
25716: LD_ADDR_LOC 7
25720: PUSH
25721: EMPTY
25722: ST_TO_ADDR
// if not ( Debug_Constant ) then
25723: LD_EXP 195
25727: NOT
25728: IFFALSE 25926
// begin while tick < 20 20$0 do
25730: LD_OWVAR 1
25734: PUSH
25735: LD_INT 42000
25737: LESS
25738: IFFALSE 25749
// Wait ( 0 0$1 ) ;
25740: LD_INT 35
25742: PPUSH
25743: CALL_OW 67
25747: GO 25730
// disable ( R1_attack ) ;
25749: LD_EXP 140
25753: DISABLE_MARKED
// R1_Attack_Continues = false ;
25754: LD_ADDR_EXP 196
25758: PUSH
25759: LD_INT 0
25761: ST_TO_ADDR
// while tick < 23 23$30 do
25762: LD_OWVAR 1
25766: PUSH
25767: LD_INT 49350
25769: LESS
25770: IFFALSE 25781
// Wait ( 0 0$1 ) ;
25772: LD_INT 35
25774: PPUSH
25775: CALL_OW 67
25779: GO 25762
// R1_Attacking_Units = GetMcUnits ( Russian1_att_id ) ;
25781: LD_ADDR_LOC 11
25785: PUSH
25786: LD_EXP 238
25790: PPUSH
25791: CALL_OW 389
25795: ST_TO_ADDR
// RemoveMcUnits ( Russian1_att_id , R1_Attacking_Units ) ;
25796: LD_EXP 238
25800: PPUSH
25801: LD_LOC 11
25805: PPUSH
25806: CALL_OW 391
// ComMoveXY ( R1_Attacking_Units , 93 , 173 ) ;
25810: LD_LOC 11
25814: PPUSH
25815: LD_INT 93
25817: PPUSH
25818: LD_INT 173
25820: PPUSH
25821: CALL_OW 111
// AddComHold ( R1_Attacking_Units ) ;
25825: LD_LOC 11
25829: PPUSH
25830: CALL_OW 200
// R1_Patroling_Units = GetMcUnits ( Russian1_patr_id ) ;
25834: LD_ADDR_LOC 12
25838: PUSH
25839: LD_EXP 240
25843: PPUSH
25844: CALL_OW 389
25848: ST_TO_ADDR
// RemoveMcUnits ( Russian1_patr_id , R1_Patroling_Units ) ;
25849: LD_EXP 240
25853: PPUSH
25854: LD_LOC 12
25858: PPUSH
25859: CALL_OW 391
// ComMoveXY ( R1_Patroling_Units , 93 , 173 ) ;
25863: LD_LOC 12
25867: PPUSH
25868: LD_INT 93
25870: PPUSH
25871: LD_INT 173
25873: PPUSH
25874: CALL_OW 111
// AddComHold ( R1_Patroling_Units ) ;
25878: LD_LOC 12
25882: PPUSH
25883: CALL_OW 200
// while tick < 24 24$0 do
25887: LD_OWVAR 1
25891: PUSH
25892: LD_INT 50400
25894: LESS
25895: IFFALSE 25906
// Wait ( 0 0$1 ) ;
25897: LD_INT 35
25899: PPUSH
25900: CALL_OW 67
25904: GO 25887
// SetAttitude ( russians1 , americans , att_friend , true ) ;
25906: LD_EXP 179
25910: PPUSH
25911: LD_EXP 176
25915: PPUSH
25916: LD_INT 1
25918: PPUSH
25919: LD_INT 1
25921: PPUSH
25922: CALL_OW 80
// end ; disable ( Not_Ingame_Run_over ) ;
25926: LD_EXP 157
25930: DISABLE_MARKED
// if Remaining_Powells > 8 then
25931: LD_EXP 64
25935: PUSH
25936: LD_INT 8
25938: GREATER
25939: IFFALSE 25994
// begin Remaining_Powells = Remaining_Powells diff Driver ;
25941: LD_ADDR_EXP 64
25945: PUSH
25946: LD_EXP 64
25950: PUSH
25951: LD_LOC 9
25955: DIFF
25956: ST_TO_ADDR
// SetSkill ( Driver , skill_mechanical , The_original_mechanical_Skill + GetSkill ( Driver , skill_mechanical ) - 5 ) ;
25957: LD_LOC 9
25961: PPUSH
25962: LD_INT 3
25964: PPUSH
25965: LD_LOC 13
25969: PUSH
25970: LD_LOC 9
25974: PPUSH
25975: LD_INT 3
25977: PPUSH
25978: CALL_OW 259
25982: PLUS
25983: PUSH
25984: LD_INT 5
25986: MINUS
25987: PPUSH
25988: CALL_OW 237
// end else
25992: GO 26002
// Driver = 0 ;
25994: LD_ADDR_LOC 9
25998: PUSH
25999: LD_INT 0
26001: ST_TO_ADDR
// for i = 1 to 4 do
26002: LD_ADDR_VAR 0 2
26006: PUSH
26007: DOUBLE
26008: LD_INT 1
26010: DEC
26011: ST_TO_ADDR
26012: LD_INT 4
26014: PUSH
26015: FOR_TO
26016: IFFALSE 26141
// begin Un = FindMinSumSkill ( Remaining_Powells , 0 ) ;
26018: LD_ADDR_VAR 0 3
26022: PUSH
26023: LD_EXP 64
26027: PPUSH
26028: LD_INT 0
26030: PPUSH
26031: CALL 18251 0 2
26035: ST_TO_ADDR
// Remaining_Powells = Remaining_Powells diff Un ;
26036: LD_ADDR_EXP 64
26040: PUSH
26041: LD_EXP 64
26045: PUSH
26046: LD_VAR 0 3
26050: DIFF
26051: ST_TO_ADDR
// soldiers = soldiers ^ Un ;
26052: LD_ADDR_LOC 6
26056: PUSH
26057: LD_LOC 6
26061: PUSH
26062: LD_VAR 0 3
26066: ADD
26067: ST_TO_ADDR
// if GetClass ( Un ) <> class_soldier then
26068: LD_VAR 0 3
26072: PPUSH
26073: CALL_OW 257
26077: PUSH
26078: LD_INT 1
26080: NONEQUAL
26081: IFFALSE 26124
// begin ComEnterUnit ( Un , AmArm ) ;
26083: LD_VAR 0 3
26087: PPUSH
26088: LD_INT 92
26090: PPUSH
26091: CALL_OW 120
// AddComChangeProfession ( Un , class_soldier ) ;
26095: LD_VAR 0 3
26099: PPUSH
26100: LD_INT 1
26102: PPUSH
26103: CALL_OW 183
// AddComMoveXY ( Un , 45 , 64 ) ;
26107: LD_VAR 0 3
26111: PPUSH
26112: LD_INT 45
26114: PPUSH
26115: LD_INT 64
26117: PPUSH
26118: CALL_OW 171
// end else
26122: GO 26139
// ComMoveXY ( Un , 45 , 64 ) ;
26124: LD_VAR 0 3
26128: PPUSH
26129: LD_INT 45
26131: PPUSH
26132: LD_INT 64
26134: PPUSH
26135: CALL_OW 111
// end ;
26139: GO 26015
26141: POP
26142: POP
// WaitTask ( soldiers , 1 ) ;
26143: LD_LOC 6
26147: PPUSH
26148: LD_INT 1
26150: PPUSH
26151: CALL 17823 0 2
// for i = 1 to 4 do
26155: LD_ADDR_VAR 0 2
26159: PUSH
26160: DOUBLE
26161: LD_INT 1
26163: DEC
26164: ST_TO_ADDR
26165: LD_INT 4
26167: PUSH
26168: FOR_TO
26169: IFFALSE 26334
// begin if ( ( i = 1 ) or ( i = 2 ) ) then
26171: LD_VAR 0 2
26175: PUSH
26176: LD_INT 1
26178: EQUAL
26179: PUSH
26180: LD_VAR 0 2
26184: PUSH
26185: LD_INT 2
26187: EQUAL
26188: OR
26189: IFFALSE 26211
// Un = FindMinSumSkill ( Remaining_Powells , sex_male ) else
26191: LD_ADDR_VAR 0 3
26195: PUSH
26196: LD_EXP 64
26200: PPUSH
26201: LD_INT 1
26203: PPUSH
26204: CALL 18251 0 2
26208: ST_TO_ADDR
26209: GO 26229
// Un = FindMinSumSkill ( Remaining_Powells , 0 ) ;
26211: LD_ADDR_VAR 0 3
26215: PUSH
26216: LD_EXP 64
26220: PPUSH
26221: LD_INT 0
26223: PPUSH
26224: CALL 18251 0 2
26228: ST_TO_ADDR
// Remaining_Powells = Remaining_Powells diff Un ;
26229: LD_ADDR_EXP 64
26233: PUSH
26234: LD_EXP 64
26238: PUSH
26239: LD_VAR 0 3
26243: DIFF
26244: ST_TO_ADDR
// soldiers1 = soldiers1 ^ Un ;
26245: LD_ADDR_LOC 7
26249: PUSH
26250: LD_LOC 7
26254: PUSH
26255: LD_VAR 0 3
26259: ADD
26260: ST_TO_ADDR
// if GetClass ( Un ) <> class_soldier then
26261: LD_VAR 0 3
26265: PPUSH
26266: CALL_OW 257
26270: PUSH
26271: LD_INT 1
26273: NONEQUAL
26274: IFFALSE 26317
// begin ComEnterUnit ( Un , AmArm ) ;
26276: LD_VAR 0 3
26280: PPUSH
26281: LD_INT 92
26283: PPUSH
26284: CALL_OW 120
// AddComChangeProfession ( Un , class_soldier ) ;
26288: LD_VAR 0 3
26292: PPUSH
26293: LD_INT 1
26295: PPUSH
26296: CALL_OW 183
// AddComMoveXY ( Un , 45 , 64 ) ;
26300: LD_VAR 0 3
26304: PPUSH
26305: LD_INT 45
26307: PPUSH
26308: LD_INT 64
26310: PPUSH
26311: CALL_OW 171
// end else
26315: GO 26332
// ComMoveXY ( Un , 45 , 64 ) ;
26317: LD_VAR 0 3
26321: PPUSH
26322: LD_INT 45
26324: PPUSH
26325: LD_INT 64
26327: PPUSH
26328: CALL_OW 111
// end ;
26332: GO 26168
26334: POP
26335: POP
// if Driver <> 0 then
26336: LD_LOC 9
26340: PUSH
26341: LD_INT 0
26343: NONEQUAL
26344: IFFALSE 26369
// Remaining_Powells = Insert ( Remaining_Powells , 1 , Driver ) ;
26346: LD_ADDR_EXP 64
26350: PUSH
26351: LD_EXP 64
26355: PPUSH
26356: LD_INT 1
26358: PPUSH
26359: LD_LOC 9
26363: PPUSH
26364: CALL_OW 2
26368: ST_TO_ADDR
// ingame_video = true ;
26369: LD_ADDR_OWVAR 52
26373: PUSH
26374: LD_INT 1
26376: ST_TO_ADDR
// interface_hidden = true ;
26377: LD_ADDR_OWVAR 54
26381: PUSH
26382: LD_INT 1
26384: ST_TO_ADDR
// CenterOnXY ( 48 , 63 ) ;
26385: LD_INT 48
26387: PPUSH
26388: LD_INT 63
26390: PPUSH
26391: CALL_OW 84
// JMM_Labs = FilterAllUnits ( [ [ f_side , americans ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_full ] , [ f_btype , b_lab_half ] ] ] ) ;
26395: LD_ADDR_VAR 0 8
26399: PUSH
26400: LD_INT 22
26402: PUSH
26403: LD_EXP 176
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: PUSH
26412: LD_INT 2
26414: PUSH
26415: LD_INT 30
26417: PUSH
26418: LD_INT 6
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 30
26427: PUSH
26428: LD_INT 8
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: PUSH
26435: LD_INT 30
26437: PUSH
26438: LD_INT 7
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PPUSH
26455: CALL_OW 69
26459: ST_TO_ADDR
// ComExitBuilding ( JMM_Labs ) ;
26460: LD_VAR 0 8
26464: PPUSH
26465: CALL_OW 122
// WaitTask ( soldiers1 , 1 ) ;
26469: LD_LOC 7
26473: PPUSH
26474: LD_INT 1
26476: PPUSH
26477: CALL 17823 0 2
// if UnitsInside ( AmB1 ) = 0 then
26481: LD_INT 89
26483: PPUSH
26484: CALL_OW 313
26488: PUSH
26489: LD_INT 0
26491: EQUAL
26492: IFFALSE 26585
// begin Un = FindMaxSkill ( Remaining_Named ^ Remaining_Powells , skill_combat ) ;
26494: LD_ADDR_VAR 0 3
26498: PUSH
26499: LD_EXP 63
26503: PUSH
26504: LD_EXP 64
26508: ADD
26509: PPUSH
26510: LD_INT 1
26512: PPUSH
26513: CALL_OW 433
26517: ST_TO_ADDR
// if GetClass ( Un ) = class_soldier then
26518: LD_VAR 0 3
26522: PPUSH
26523: CALL_OW 257
26527: PUSH
26528: LD_INT 1
26530: EQUAL
26531: IFFALSE 26547
// ComEnterUnit ( Un , AmB1 ) else
26533: LD_VAR 0 3
26537: PPUSH
26538: LD_INT 89
26540: PPUSH
26541: CALL_OW 120
26545: GO 26583
// begin ComEnterUnit ( Un , AmArm ) ;
26547: LD_VAR 0 3
26551: PPUSH
26552: LD_INT 92
26554: PPUSH
26555: CALL_OW 120
// AddComChangeProfession ( Un , class_soldier ) ;
26559: LD_VAR 0 3
26563: PPUSH
26564: LD_INT 1
26566: PPUSH
26567: CALL_OW 183
// AddComEnterUnit ( Un , AmB1 ) ;
26571: LD_VAR 0 3
26575: PPUSH
26576: LD_INT 89
26578: PPUSH
26579: CALL_OW 180
// end ; end else
26583: GO 26598
// Un = UnitsInside ( AmB1 ) ;
26585: LD_ADDR_VAR 0 3
26589: PUSH
26590: LD_INT 89
26592: PPUSH
26593: CALL_OW 313
26597: ST_TO_ADDR
// if UnitsInside ( AmB2 ) = 0 then
26598: LD_INT 90
26600: PPUSH
26601: CALL_OW 313
26605: PUSH
26606: LD_INT 0
26608: EQUAL
26609: IFFALSE 26708
// begin Un1 = FindMaxSkill ( ( Remaining_Named ^ Remaining_Powells ) diff Un , skill_combat ) ;
26611: LD_ADDR_VAR 0 4
26615: PUSH
26616: LD_EXP 63
26620: PUSH
26621: LD_EXP 64
26625: ADD
26626: PUSH
26627: LD_VAR 0 3
26631: DIFF
26632: PPUSH
26633: LD_INT 1
26635: PPUSH
26636: CALL_OW 433
26640: ST_TO_ADDR
// if GetClass ( Un1 ) = class_soldier then
26641: LD_VAR 0 4
26645: PPUSH
26646: CALL_OW 257
26650: PUSH
26651: LD_INT 1
26653: EQUAL
26654: IFFALSE 26670
// ComEnterUnit ( Un1 , AmB2 ) else
26656: LD_VAR 0 4
26660: PPUSH
26661: LD_INT 90
26663: PPUSH
26664: CALL_OW 120
26668: GO 26706
// begin ComEnterUnit ( Un1 , AmArm ) ;
26670: LD_VAR 0 4
26674: PPUSH
26675: LD_INT 92
26677: PPUSH
26678: CALL_OW 120
// AddComChangeProfession ( Un1 , class_soldier ) ;
26682: LD_VAR 0 4
26686: PPUSH
26687: LD_INT 1
26689: PPUSH
26690: CALL_OW 183
// AddComEnterUnit ( Un1 , AmB2 ) ;
26694: LD_VAR 0 4
26698: PPUSH
26699: LD_INT 90
26701: PPUSH
26702: CALL_OW 180
// end ; end else
26706: GO 26721
// Un1 = UnitsInside ( AmB2 ) ;
26708: LD_ADDR_VAR 0 4
26712: PUSH
26713: LD_INT 90
26715: PPUSH
26716: CALL_OW 313
26720: ST_TO_ADDR
// ComEnterUnit ( Remaining_Powells diff ( Un ^ Un1 ) , AmArm ) ;
26721: LD_EXP 64
26725: PUSH
26726: LD_VAR 0 3
26730: PUSH
26731: LD_VAR 0 4
26735: ADD
26736: DIFF
26737: PPUSH
26738: LD_INT 92
26740: PPUSH
26741: CALL_OW 120
// AddComChangeProfession ( Remaining_Powells diff ( Un ^ Un1 ) , class_soldier ) ;
26745: LD_EXP 64
26749: PUSH
26750: LD_VAR 0 3
26754: PUSH
26755: LD_VAR 0 4
26759: ADD
26760: DIFF
26761: PPUSH
26762: LD_INT 1
26764: PPUSH
26765: CALL_OW 183
// game_speed = 4 ;
26769: LD_ADDR_OWVAR 65
26773: PUSH
26774: LD_INT 4
26776: ST_TO_ADDR
// Say ( Powell , D5-Pow-1 ) ;
26777: LD_EXP 2
26781: PPUSH
26782: LD_STRING D5-Pow-1
26784: PPUSH
26785: CALL_OW 88
// Say ( Soldiers1 [ 1 ] , D5-Sol2-1 ) ;
26789: LD_LOC 7
26793: PUSH
26794: LD_INT 1
26796: ARRAY
26797: PPUSH
26798: LD_STRING D5-Sol2-1
26800: PPUSH
26801: CALL_OW 88
// Say ( Powell , D5-Pow-2 ) ;
26805: LD_EXP 2
26809: PPUSH
26810: LD_STRING D5-Pow-2
26812: PPUSH
26813: CALL_OW 88
// Say ( Soldiers1 [ 2 ] , D5-Sol2-2 ) ;
26817: LD_LOC 7
26821: PUSH
26822: LD_INT 2
26824: ARRAY
26825: PPUSH
26826: LD_STRING D5-Sol2-2
26828: PPUSH
26829: CALL_OW 88
// Say ( Powell , D5-Pow-3 ) ;
26833: LD_EXP 2
26837: PPUSH
26838: LD_STRING D5-Pow-3
26840: PPUSH
26841: CALL_OW 88
// disable ( First_JMM_Task ) ;
26845: LD_EXP 137
26849: DISABLE_MARKED
// EnableVideoExclamations ;
26850: CALL_OW 498
// for i = 1 to 4 do
26854: LD_ADDR_VAR 0 2
26858: PUSH
26859: DOUBLE
26860: LD_INT 1
26862: DEC
26863: ST_TO_ADDR
26864: LD_INT 4
26866: PUSH
26867: FOR_TO
26868: IFFALSE 26919
// begin ComEnterUnit ( soldiers [ i ] , Am1_vehicles [ i ] ) ;
26870: LD_LOC 6
26874: PUSH
26875: LD_VAR 0 2
26879: ARRAY
26880: PPUSH
26881: LD_EXP 59
26885: PUSH
26886: LD_VAR 0 2
26890: ARRAY
26891: PPUSH
26892: CALL_OW 120
// AddComMoveXY ( soldiers [ i ] , 68 , 64 ) ;
26896: LD_LOC 6
26900: PUSH
26901: LD_VAR 0 2
26905: ARRAY
26906: PPUSH
26907: LD_INT 68
26909: PPUSH
26910: LD_INT 64
26912: PPUSH
26913: CALL_OW 171
// end ;
26917: GO 26867
26919: POP
26920: POP
// for i = 1 to 4 do
26921: LD_ADDR_VAR 0 2
26925: PUSH
26926: DOUBLE
26927: LD_INT 1
26929: DEC
26930: ST_TO_ADDR
26931: LD_INT 4
26933: PUSH
26934: FOR_TO
26935: IFFALSE 26960
// begin ComMoveXY ( soldiers1 [ i ] , 68 , 64 ) ;
26937: LD_LOC 7
26941: PUSH
26942: LD_VAR 0 2
26946: ARRAY
26947: PPUSH
26948: LD_INT 68
26950: PPUSH
26951: LD_INT 64
26953: PPUSH
26954: CALL_OW 111
// end ;
26958: GO 26934
26960: POP
26961: POP
// enable ( Center_on_fight ) ;
26962: LD_EXP 143
26966: ENABLE_MARKED
// WaitPos ( 68 , 64 , 8 , Am1_vehicles ^ soldiers1 ^ soldiers , 1 ) ;
26967: LD_INT 68
26969: PPUSH
26970: LD_INT 64
26972: PPUSH
26973: LD_INT 8
26975: PPUSH
26976: LD_EXP 59
26980: PUSH
26981: LD_LOC 7
26985: ADD
26986: PUSH
26987: LD_LOC 6
26991: ADD
26992: PPUSH
26993: LD_INT 1
26995: PPUSH
26996: CALL 17921 0 5
// ComAgressiveMove ( Am1_vehicles ^ soldiers1 ^ soldiers , 76 , 22 ) ;
27000: LD_EXP 59
27004: PUSH
27005: LD_LOC 7
27009: ADD
27010: PUSH
27011: LD_LOC 6
27015: ADD
27016: PPUSH
27017: LD_INT 76
27019: PPUSH
27020: LD_INT 22
27022: PPUSH
27023: CALL_OW 114
// Initial_lives = GetLives ( Am1_vehicles ^ soldiers1 ^ soldiers ) ;
27027: LD_ADDR_VAR 0 5
27031: PUSH
27032: LD_EXP 59
27036: PUSH
27037: LD_LOC 7
27041: ADD
27042: PUSH
27043: LD_LOC 6
27047: ADD
27048: PPUSH
27049: CALL_OW 256
27053: ST_TO_ADDR
// repeat Wait ( 0 0$1 ) ;
27054: LD_INT 35
27056: PPUSH
27057: CALL_OW 67
// until Initial_lives > GetLives ( Am1_vehicles ^ soldiers1 ^ soldiers ) + 1 ;
27061: LD_VAR 0 5
27065: PUSH
27066: LD_EXP 59
27070: PUSH
27071: LD_LOC 7
27075: ADD
27076: PUSH
27077: LD_LOC 6
27081: ADD
27082: PPUSH
27083: CALL_OW 256
27087: PUSH
27088: LD_INT 1
27090: PLUS
27091: GREATER
27092: IFFALSE 27054
// Say ( Powell , D5a-Pow-1 ) ;
27094: LD_EXP 2
27098: PPUSH
27099: LD_STRING D5a-Pow-1
27101: PPUSH
27102: CALL_OW 88
// Say ( Powell , D5a-Pow-1a ) ;
27106: LD_EXP 2
27110: PPUSH
27111: LD_STRING D5a-Pow-1a
27113: PPUSH
27114: CALL_OW 88
// Wait ( 0 0$1 ) ;
27118: LD_INT 35
27120: PPUSH
27121: CALL_OW 67
// Say ( Powell , D5a-Pow-1b ) ;
27125: LD_EXP 2
27129: PPUSH
27130: LD_STRING D5a-Pow-1b
27132: PPUSH
27133: CALL_OW 88
// Wait ( 0 0$1 ) ;
27137: LD_INT 35
27139: PPUSH
27140: CALL_OW 67
// Say ( Powell , D5a-Pow-1c ) ;
27144: LD_EXP 2
27148: PPUSH
27149: LD_STRING D5a-Pow-1c
27151: PPUSH
27152: CALL_OW 88
// Say ( Powell , D5a-Pow-1d ) ;
27156: LD_EXP 2
27160: PPUSH
27161: LD_STRING D5a-Pow-1d
27163: PPUSH
27164: CALL_OW 88
// while ( GetLives ( soldiers ^ soldiers1 ) > 0 ) do
27168: LD_LOC 6
27172: PUSH
27173: LD_LOC 7
27177: ADD
27178: PPUSH
27179: CALL_OW 256
27183: PUSH
27184: LD_INT 0
27186: GREATER
27187: IFFALSE 27198
// Wait ( 0 0$0.5 ) ;
27189: LD_INT 18
27191: PPUSH
27192: CALL_OW 67
27196: GO 27168
// DisableVideoExclamations ;
27198: CALL_OW 499
// disable ( Center_on_fight ) ;
27202: LD_EXP 143
27206: DISABLE_MARKED
// enable ( Great_Ingame_Video ) ;
27207: LD_EXP 139
27211: ENABLE_MARKED
// end ;
27212: LD_VAR 0 1
27216: RET
// every 0 0$1 marked 3 do var Units_Outside , All_A1 , Sold , Arabian1 , Arabian2 , Arabian3 , Arabian_Buildings , Alive , Un , Remaining_named_males , Remaining_named_females , Uns , i , Hex ;
27217: GO 27219
27219: DISABLE
27220: LD_INT 0
27222: PPUSH
27223: PPUSH
27224: PPUSH
27225: PPUSH
27226: PPUSH
27227: PPUSH
27228: PPUSH
27229: PPUSH
27230: PPUSH
27231: PPUSH
27232: PPUSH
27233: PPUSH
27234: PPUSH
27235: PPUSH
// begin Uns = [ ] ;
27236: LD_ADDR_VAR 0 12
27240: PUSH
27241: EMPTY
27242: ST_TO_ADDR
// Remaining_named_males = UnitFilter ( Remaining_named , [ f_sex , sex_male ] ) ;
27243: LD_ADDR_VAR 0 10
27247: PUSH
27248: LD_EXP 63
27252: PPUSH
27253: LD_INT 26
27255: PUSH
27256: LD_INT 1
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PPUSH
27263: CALL_OW 72
27267: ST_TO_ADDR
// Remaining_named_females = UnitFilter ( Remaining_named , [ f_sex , sex_female ] ) ;
27268: LD_ADDR_VAR 0 11
27272: PUSH
27273: LD_EXP 63
27277: PPUSH
27278: LD_INT 26
27280: PUSH
27281: LD_INT 2
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PPUSH
27288: CALL_OW 72
27292: ST_TO_ADDR
// for i = Remaining_named_males + 1 to 3 do
27293: LD_ADDR_VAR 0 13
27297: PUSH
27298: DOUBLE
27299: LD_VAR 0 10
27303: PUSH
27304: LD_INT 1
27306: PLUS
27307: DEC
27308: ST_TO_ADDR
27309: LD_INT 3
27311: PUSH
27312: FOR_TO
27313: IFFALSE 27363
// if ( Remaining_named_females >= ( i - Remaining_named_males ) ) then
27315: LD_VAR 0 11
27319: PUSH
27320: LD_VAR 0 13
27324: PUSH
27325: LD_VAR 0 10
27329: MINUS
27330: GREATEREQUAL
27331: IFFALSE 27361
// Uns = Uns ^ Remaining_named_females [ i - Remaining_named_males ] ;
27333: LD_ADDR_VAR 0 12
27337: PUSH
27338: LD_VAR 0 12
27342: PUSH
27343: LD_VAR 0 11
27347: PUSH
27348: LD_VAR 0 13
27352: PUSH
27353: LD_VAR 0 10
27357: MINUS
27358: ARRAY
27359: ADD
27360: ST_TO_ADDR
27361: GO 27312
27363: POP
27364: POP
// Remaining_named_males = Remaining_named_males ^ Uns ;
27365: LD_ADDR_VAR 0 10
27369: PUSH
27370: LD_VAR 0 10
27374: PUSH
27375: LD_VAR 0 12
27379: ADD
27380: ST_TO_ADDR
// Sold = [ ] ;
27381: LD_ADDR_VAR 0 3
27385: PUSH
27386: EMPTY
27387: ST_TO_ADDR
// for i = 1 to 3 do
27388: LD_ADDR_VAR 0 13
27392: PUSH
27393: DOUBLE
27394: LD_INT 1
27396: DEC
27397: ST_TO_ADDR
27398: LD_INT 3
27400: PUSH
27401: FOR_TO
27402: IFFALSE 27520
// begin Un = FindMaxSumSkill ( Remaining_Powells diff Sold , sex_male ) ;
27404: LD_ADDR_VAR 0 9
27408: PUSH
27409: LD_EXP 64
27413: PUSH
27414: LD_VAR 0 3
27418: DIFF
27419: PPUSH
27420: LD_INT 1
27422: PPUSH
27423: CALL 18035 0 2
27427: ST_TO_ADDR
// if Un = 0 then
27428: LD_VAR 0 9
27432: PUSH
27433: LD_INT 0
27435: EQUAL
27436: IFFALSE 27462
// Un = FindMaxSumSkill ( Remaining_named_males diff Sold , sex_male ) ;
27438: LD_ADDR_VAR 0 9
27442: PUSH
27443: LD_VAR 0 10
27447: PUSH
27448: LD_VAR 0 3
27452: DIFF
27453: PPUSH
27454: LD_INT 1
27456: PPUSH
27457: CALL 18035 0 2
27461: ST_TO_ADDR
// if Un = 0 then
27462: LD_VAR 0 9
27466: PUSH
27467: LD_INT 0
27469: EQUAL
27470: IFFALSE 27502
// Un = FindMaxSumSkill ( ( Remaining_Powells ^ Remaining_named_males ) diff Sold , sex_male ) ;
27472: LD_ADDR_VAR 0 9
27476: PUSH
27477: LD_EXP 64
27481: PUSH
27482: LD_VAR 0 10
27486: ADD
27487: PUSH
27488: LD_VAR 0 3
27492: DIFF
27493: PPUSH
27494: LD_INT 1
27496: PPUSH
27497: CALL 18035 0 2
27501: ST_TO_ADDR
// Sold = Sold ^ Un ;
27502: LD_ADDR_VAR 0 3
27506: PUSH
27507: LD_VAR 0 3
27511: PUSH
27512: LD_VAR 0 9
27516: ADD
27517: ST_TO_ADDR
// end ;
27518: GO 27401
27520: POP
27521: POP
// Uns = UnitFilter ( Arabian_soldiers , [ f_sex , sex_male ] ) ;
27522: LD_ADDR_VAR 0 12
27526: PUSH
27527: LD_EXP 80
27531: PPUSH
27532: LD_INT 26
27534: PUSH
27535: LD_INT 1
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: PPUSH
27542: CALL_OW 72
27546: ST_TO_ADDR
// Arabian1 = Uns [ 1 ] ;
27547: LD_ADDR_VAR 0 4
27551: PUSH
27552: LD_VAR 0 12
27556: PUSH
27557: LD_INT 1
27559: ARRAY
27560: ST_TO_ADDR
// Arabian2 = Uns [ 2 ] ;
27561: LD_ADDR_VAR 0 5
27565: PUSH
27566: LD_VAR 0 12
27570: PUSH
27571: LD_INT 2
27573: ARRAY
27574: ST_TO_ADDR
// Arabian3 = Uns [ 3 ] ;
27575: LD_ADDR_VAR 0 6
27579: PUSH
27580: LD_VAR 0 12
27584: PUSH
27585: LD_INT 3
27587: ARRAY
27588: ST_TO_ADDR
// if GetLives ( ArT1 ) > 0 and GetLives ( ArT1 ) < 500 then
27589: LD_INT 107
27591: PPUSH
27592: CALL_OW 256
27596: PUSH
27597: LD_INT 0
27599: GREATER
27600: PUSH
27601: LD_INT 107
27603: PPUSH
27604: CALL_OW 256
27608: PUSH
27609: LD_INT 500
27611: LESS
27612: AND
27613: IFFALSE 27625
// SetLives ( ArT1 , 500 ) ;
27615: LD_INT 107
27617: PPUSH
27618: LD_INT 500
27620: PPUSH
27621: CALL_OW 234
// RemoveMcUnits ( Arabian_def_id , Arabian_soldiers ^ ArT1 ) ;
27625: LD_EXP 235
27629: PPUSH
27630: LD_EXP 80
27634: PUSH
27635: LD_INT 107
27637: ADD
27638: PPUSH
27639: CALL_OW 391
// ComMoveXY ( Arabian_soldiers , 52 , 15 ) ;
27643: LD_EXP 80
27647: PPUSH
27648: LD_INT 52
27650: PPUSH
27651: LD_INT 15
27653: PPUSH
27654: CALL_OW 111
// AddComHold ( Arabian_soldiers ) ;
27658: LD_EXP 80
27662: PPUSH
27663: CALL_OW 200
// Wait ( 0 0$0.5 ) ;
27667: LD_INT 18
27669: PPUSH
27670: CALL_OW 67
// ComEnterUnit ( Arabian1 , ArT1 ) ;
27674: LD_VAR 0 4
27678: PPUSH
27679: LD_INT 107
27681: PPUSH
27682: CALL_OW 120
// ComMoveXY ( Arabian2 , 71 , 18 ) ;
27686: LD_VAR 0 5
27690: PPUSH
27691: LD_INT 71
27693: PPUSH
27694: LD_INT 18
27696: PPUSH
27697: CALL_OW 111
// AddComHold ( Arabian2 ) ;
27701: LD_VAR 0 5
27705: PPUSH
27706: CALL_OW 200
// ComMoveXY ( Arabian_mechanics [ 1 ] , 83 , 15 ) ;
27710: LD_EXP 83
27714: PUSH
27715: LD_INT 1
27717: ARRAY
27718: PPUSH
27719: LD_INT 83
27721: PPUSH
27722: LD_INT 15
27724: PPUSH
27725: CALL_OW 111
// AddComHold ( Arabian_mechanics [ 1 ] ) ;
27729: LD_EXP 83
27733: PUSH
27734: LD_INT 1
27736: ARRAY
27737: PPUSH
27738: CALL_OW 200
// ComMoveXY ( Arabian3 , 85 , 26 ) ;
27742: LD_VAR 0 6
27746: PPUSH
27747: LD_INT 85
27749: PPUSH
27750: LD_INT 26
27752: PPUSH
27753: CALL_OW 111
// AddComHold ( Arabian3 ) ;
27757: LD_VAR 0 6
27761: PPUSH
27762: CALL_OW 200
// RemoveMcUnits ( Arabian_build_id , Arabian_Engineers ) ;
27766: LD_EXP 236
27770: PPUSH
27771: LD_EXP 81
27775: PPUSH
27776: CALL_OW 391
// ComEnterUnit ( Arabian_Engineers , GetUnitNumber ( 53 , 7 ) ) ;
27780: LD_EXP 81
27784: PPUSH
27785: LD_INT 53
27787: PPUSH
27788: LD_INT 7
27790: PPUSH
27791: CALL_OW 438
27795: PPUSH
27796: CALL_OW 120
// CenterOnXY ( 60 , 62 ) ;
27800: LD_INT 60
27802: PPUSH
27803: LD_INT 62
27805: PPUSH
27806: CALL_OW 84
// Say ( Sold [ 3 ] , D6-Sol3-1 ) ;
27810: LD_VAR 0 3
27814: PUSH
27815: LD_INT 3
27817: ARRAY
27818: PPUSH
27819: LD_STRING D6-Sol3-1
27821: PPUSH
27822: CALL_OW 88
// ComMoveXY ( ArBomb1 , 71 , 61 ) ;
27826: LD_INT 139
27828: PPUSH
27829: LD_INT 71
27831: PPUSH
27832: LD_INT 61
27834: PPUSH
27835: CALL_OW 111
// ComMoveXY ( ArBomb2 , 74 , 61 ) ;
27839: LD_INT 138
27841: PPUSH
27842: LD_INT 74
27844: PPUSH
27845: LD_INT 61
27847: PPUSH
27848: CALL_OW 111
// Say ( Powell , D6-Pow-1 ) ;
27852: LD_EXP 2
27856: PPUSH
27857: LD_STRING D6-Pow-1
27859: PPUSH
27860: CALL_OW 88
// WaitPos ( 71 , 61 , 6 , [ ArBomb1 , ArBomb2 ] , 1 ) ;
27864: LD_INT 71
27866: PPUSH
27867: LD_INT 61
27869: PPUSH
27870: LD_INT 6
27872: PPUSH
27873: LD_INT 139
27875: PUSH
27876: LD_INT 138
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PPUSH
27883: LD_INT 1
27885: PPUSH
27886: CALL 17921 0 5
// Say ( Sold [ 1 ] , D6-Sol3-2 ) ;
27890: LD_VAR 0 3
27894: PUSH
27895: LD_INT 1
27897: ARRAY
27898: PPUSH
27899: LD_STRING D6-Sol3-2
27901: PPUSH
27902: CALL_OW 88
// ComMoveXY ( ArBomb1 , 50 , 56 ) ;
27906: LD_INT 139
27908: PPUSH
27909: LD_INT 50
27911: PPUSH
27912: LD_INT 56
27914: PPUSH
27915: CALL_OW 111
// AddComMoveXY ( ArBomb1 , 46 , 52 ) ;
27919: LD_INT 139
27921: PPUSH
27922: LD_INT 46
27924: PPUSH
27925: LD_INT 52
27927: PPUSH
27928: CALL_OW 171
// PriorityAttack ( americans1 , ArBomb1 ) ;
27932: LD_EXP 177
27936: PPUSH
27937: LD_INT 139
27939: PPUSH
27940: CALL_OW 470
// ComMoveXY ( ArBomb2 , 48 , 60 ) ;
27944: LD_INT 138
27946: PPUSH
27947: LD_INT 48
27949: PPUSH
27950: LD_INT 60
27952: PPUSH
27953: CALL_OW 111
// AddComMoveXY ( ArBomb2 , 45 , 57 ) ;
27957: LD_INT 138
27959: PPUSH
27960: LD_INT 45
27962: PPUSH
27963: LD_INT 57
27965: PPUSH
27966: CALL_OW 171
// AddComAttackUnit ( ArBomb2 , AmFact ) ;
27970: LD_INT 138
27972: PPUSH
27973: LD_INT 85
27975: PPUSH
27976: CALL_OW 175
// DoNotAttack ( americans1 , ArBomb2 ) ;
27980: LD_EXP 177
27984: PPUSH
27985: LD_INT 138
27987: PPUSH
27988: CALL_OW 471
// ComMoveXY ( Powell , 58 , 68 ) ;
27992: LD_EXP 2
27996: PPUSH
27997: LD_INT 58
27999: PPUSH
28000: LD_INT 68
28002: PPUSH
28003: CALL_OW 111
// AddComHold ( Powell ) ;
28007: LD_EXP 2
28011: PPUSH
28012: CALL_OW 200
// ComExitBuilding ( UnitsInside ( AmArm ) ) ;
28016: LD_INT 92
28018: PPUSH
28019: CALL_OW 313
28023: PPUSH
28024: CALL_OW 122
// ComExitBuilding ( UnitsInside ( AmFact ) ) ;
28028: LD_INT 85
28030: PPUSH
28031: CALL_OW 313
28035: PPUSH
28036: CALL_OW 122
// Wait ( 1 ) ;
28040: LD_INT 1
28042: PPUSH
28043: CALL_OW 67
// while UnitsInside ( AmArm ) <> 0 do
28047: LD_INT 92
28049: PPUSH
28050: CALL_OW 313
28054: PUSH
28055: LD_INT 0
28057: NONEQUAL
28058: IFFALSE 28069
// Wait ( 2 ) ;
28060: LD_INT 2
28062: PPUSH
28063: CALL_OW 67
28067: GO 28047
// Units_Outside = FilterUnitsInArea ( Am_Base , [ [ f_side , americans1 ] , [ f_type , unit_human ] ] ) diff ( soldiers1 ^ soldiers ^ Powell ) ;
28069: LD_ADDR_VAR 0 1
28073: PUSH
28074: LD_INT 1
28076: PPUSH
28077: LD_INT 22
28079: PUSH
28080: LD_EXP 177
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PUSH
28089: LD_INT 21
28091: PUSH
28092: LD_INT 1
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PPUSH
28103: CALL_OW 70
28107: PUSH
28108: LD_LOC 7
28112: PUSH
28113: LD_LOC 6
28117: ADD
28118: PUSH
28119: LD_EXP 2
28123: ADD
28124: DIFF
28125: ST_TO_ADDR
// for Un in Units_Outside do
28126: LD_ADDR_VAR 0 9
28130: PUSH
28131: LD_VAR 0 1
28135: PUSH
28136: FOR_IN
28137: IFFALSE 28199
// begin Hex = RandHexXYR ( 56 , 69 , 2 , false ) ;
28139: LD_ADDR_VAR 0 14
28143: PUSH
28144: LD_INT 56
28146: PPUSH
28147: LD_INT 69
28149: PPUSH
28150: LD_INT 2
28152: PPUSH
28153: LD_INT 0
28155: PPUSH
28156: CALL_OW 17
28160: ST_TO_ADDR
// ComMoveXY ( Un , Hex [ 1 ] , Hex [ 2 ] ) ;
28161: LD_VAR 0 9
28165: PPUSH
28166: LD_VAR 0 14
28170: PUSH
28171: LD_INT 1
28173: ARRAY
28174: PPUSH
28175: LD_VAR 0 14
28179: PUSH
28180: LD_INT 2
28182: ARRAY
28183: PPUSH
28184: CALL_OW 111
// AddComHold ( Un ) ;
28188: LD_VAR 0 9
28192: PPUSH
28193: CALL_OW 200
// end ;
28197: GO 28136
28199: POP
28200: POP
// enable ( Talk_Bomba ) ;
28201: LD_EXP 142
28205: ENABLE_MARKED
// while ( IsOk ( ArBomb1 ) or IsOk ( ArBomb2 ) ) do
28206: LD_INT 139
28208: PPUSH
28209: CALL_OW 302
28213: PUSH
28214: LD_INT 138
28216: PPUSH
28217: CALL_OW 302
28221: OR
28222: IFFALSE 28308
// begin if ( GetDistUnitXY ( ArBomb1 , 41 , 54 ) <= 7 ) and ( GetLives ( ArBomb1 ) > 250 ) then
28224: LD_INT 139
28226: PPUSH
28227: LD_INT 41
28229: PPUSH
28230: LD_INT 54
28232: PPUSH
28233: CALL_OW 297
28237: PUSH
28238: LD_INT 7
28240: LESSEQUAL
28241: PUSH
28242: LD_INT 139
28244: PPUSH
28245: CALL_OW 256
28249: PUSH
28250: LD_INT 250
28252: GREATER
28253: AND
28254: IFFALSE 28266
// SetLives ( ArBomb1 , 200 ) ;
28256: LD_INT 139
28258: PPUSH
28259: LD_INT 200
28261: PPUSH
28262: CALL_OW 234
// if not ( IsOk ( ArBomb2 ) ) then
28266: LD_INT 138
28268: PPUSH
28269: CALL_OW 302
28273: NOT
28274: IFFALSE 28299
// if GetLives ( AmFact ) > 0 then
28276: LD_INT 85
28278: PPUSH
28279: CALL_OW 256
28283: PUSH
28284: LD_INT 0
28286: GREATER
28287: IFFALSE 28299
// SetLives ( AmFact , 0 ) ;
28289: LD_INT 85
28291: PPUSH
28292: LD_INT 0
28294: PPUSH
28295: CALL_OW 234
// Wait ( 4 ) ;
28299: LD_INT 4
28301: PPUSH
28302: CALL_OW 67
// end ;
28306: GO 28206
// Wait ( 0 0$2 ) ;
28308: LD_INT 70
28310: PPUSH
28311: CALL_OW 67
// Say ( Powell , D6a-Pow-1 ) ;
28315: LD_EXP 2
28319: PPUSH
28320: LD_STRING D6a-Pow-1
28322: PPUSH
28323: CALL_OW 88
// Say ( Sold [ 1 ] , D6a-Sol3-1 ) ;
28327: LD_VAR 0 3
28331: PUSH
28332: LD_INT 1
28334: ARRAY
28335: PPUSH
28336: LD_STRING D6a-Sol3-1
28338: PPUSH
28339: CALL_OW 88
// Say ( Powell , D6a-Pow-2 ) ;
28343: LD_EXP 2
28347: PPUSH
28348: LD_STRING D6a-Pow-2
28350: PPUSH
28351: CALL_OW 88
// Say ( Sold [ 1 ] , D6a-Sol3-2 ) ;
28355: LD_VAR 0 3
28359: PUSH
28360: LD_INT 1
28362: ARRAY
28363: PPUSH
28364: LD_STRING D6a-Sol3-2
28366: PPUSH
28367: CALL_OW 88
// Say ( Powell , D6a-Pow-3 ) ;
28371: LD_EXP 2
28375: PPUSH
28376: LD_STRING D6a-Pow-3
28378: PPUSH
28379: CALL_OW 88
// Center_To_Powell = true ;
28383: LD_ADDR_EXP 194
28387: PUSH
28388: LD_INT 1
28390: ST_TO_ADDR
// enable ( Protect_Powell ) ;
28391: LD_EXP 141
28395: ENABLE_MARKED
// ComEnterUnit ( Powell , Powell_vehicle ) ;
28396: LD_EXP 2
28400: PPUSH
28401: LD_EXP 192
28405: PPUSH
28406: CALL_OW 120
// AddComMoveXY ( Powell , 66 , 62 ) ;
28410: LD_EXP 2
28414: PPUSH
28415: LD_INT 66
28417: PPUSH
28418: LD_INT 62
28420: PPUSH
28421: CALL_OW 171
// AddComMoveXY ( Powell , 81 , 61 ) ;
28425: LD_EXP 2
28429: PPUSH
28430: LD_INT 81
28432: PPUSH
28433: LD_INT 61
28435: PPUSH
28436: CALL_OW 171
// AddComMoveXY ( Powell , 86 , 56 ) ;
28440: LD_EXP 2
28444: PPUSH
28445: LD_INT 86
28447: PPUSH
28448: LD_INT 56
28450: PPUSH
28451: CALL_OW 171
// AddComMoveXY ( Powell , 74 , 24 ) ;
28455: LD_EXP 2
28459: PPUSH
28460: LD_INT 74
28462: PPUSH
28463: LD_INT 24
28465: PPUSH
28466: CALL_OW 171
// while GetDistUnitXY ( Powell_vehicle , 74 , 24 ) > 12 do
28470: LD_EXP 192
28474: PPUSH
28475: LD_INT 74
28477: PPUSH
28478: LD_INT 24
28480: PPUSH
28481: CALL_OW 297
28485: PUSH
28486: LD_INT 12
28488: GREATER
28489: IFFALSE 28500
// Wait ( 0 0$0.1 ) ;
28491: LD_INT 4
28493: PPUSH
28494: CALL_OW 67
28498: GO 28470
// Say ( Powell , D6b-Pow-1 ) ;
28500: LD_EXP 2
28504: PPUSH
28505: LD_STRING D6b-Pow-1
28507: PPUSH
28508: CALL_OW 88
// game_speed = 3 ;
28512: LD_ADDR_OWVAR 65
28516: PUSH
28517: LD_INT 3
28519: ST_TO_ADDR
// while GetDistUnitXY ( Powell_vehicle , 74 , 24 ) > 5 do
28520: LD_EXP 192
28524: PPUSH
28525: LD_INT 74
28527: PPUSH
28528: LD_INT 24
28530: PPUSH
28531: CALL_OW 297
28535: PUSH
28536: LD_INT 5
28538: GREATER
28539: IFFALSE 28550
// Wait ( 0 0$0.1 ) ;
28541: LD_INT 4
28543: PPUSH
28544: CALL_OW 67
28548: GO 28520
// SetLives ( Powell_vehicle , 251 ) ;
28550: LD_EXP 192
28554: PPUSH
28555: LD_INT 251
28557: PPUSH
28558: CALL_OW 234
// while IsInUnit ( Powell ) do
28562: LD_EXP 2
28566: PPUSH
28567: CALL_OW 310
28571: IFFALSE 28582
// Wait ( 2 ) ;
28573: LD_INT 2
28575: PPUSH
28576: CALL_OW 67
28580: GO 28562
// SetAttr ( Powell , attr_speed , 14 ) ;
28582: LD_EXP 2
28586: PPUSH
28587: LD_INT 2
28589: PPUSH
28590: LD_INT 14
28592: PPUSH
28593: CALL_OW 239
// ComEnterUnit ( Powell , PowBomb ) ;
28597: LD_EXP 2
28601: PPUSH
28602: LD_INT 137
28604: PPUSH
28605: CALL_OW 120
// Say ( Powell , D6b-Pow-1a ) ;
28609: LD_EXP 2
28613: PPUSH
28614: LD_STRING D6b-Pow-1a
28616: PPUSH
28617: CALL_OW 88
// repeat wait ( 2 ) ;
28621: LD_INT 2
28623: PPUSH
28624: CALL_OW 67
// until IsInUnit ( Powell ) ;
28628: LD_EXP 2
28632: PPUSH
28633: CALL_OW 310
28637: IFFALSE 28621
// AddComMoveXY ( Powell , 81 , 21 ) ;
28639: LD_EXP 2
28643: PPUSH
28644: LD_INT 81
28646: PPUSH
28647: LD_INT 21
28649: PPUSH
28650: CALL_OW 171
// AddComMoveXY ( Powell , 73 , 16 ) ;
28654: LD_EXP 2
28658: PPUSH
28659: LD_INT 73
28661: PPUSH
28662: LD_INT 16
28664: PPUSH
28665: CALL_OW 171
// AddComMoveXY ( Powell , 76 , 21 ) ;
28669: LD_EXP 2
28673: PPUSH
28674: LD_INT 76
28676: PPUSH
28677: LD_INT 21
28679: PPUSH
28680: CALL_OW 171
// AddComMoveXY ( Powell , 78 , 15 ) ;
28684: LD_EXP 2
28688: PPUSH
28689: LD_INT 78
28691: PPUSH
28692: LD_INT 15
28694: PPUSH
28695: CALL_OW 171
// Say ( Powell , D6b-Pow-1b ) ;
28699: LD_EXP 2
28703: PPUSH
28704: LD_STRING D6b-Pow-1b
28706: PPUSH
28707: CALL_OW 88
// ComMoveXY ( Arabian_soldiers , 48 , 14 ) ;
28711: LD_EXP 80
28715: PPUSH
28716: LD_INT 48
28718: PPUSH
28719: LD_INT 14
28721: PPUSH
28722: CALL_OW 111
// AddComHold ( Arabian_soldiers ) ;
28726: LD_EXP 80
28730: PPUSH
28731: CALL_OW 200
// ComEnterUnit ( Arabian_mechanics [ 1 ] , ArFact ) ;
28735: LD_EXP 83
28739: PUSH
28740: LD_INT 1
28742: ARRAY
28743: PPUSH
28744: LD_INT 117
28746: PPUSH
28747: CALL_OW 120
// ComMoveXY ( Arabian3 , 96 , 29 ) ;
28751: LD_VAR 0 6
28755: PPUSH
28756: LD_INT 96
28758: PPUSH
28759: LD_INT 29
28761: PPUSH
28762: CALL_OW 111
// async ;
28766: ASYNC
// Say ( Arabian1 , D6b-ArSol1-1 ) ;
28767: LD_VAR 0 4
28771: PPUSH
28772: LD_STRING D6b-ArSol1-1
28774: PPUSH
28775: CALL_OW 88
// wait ( 0 0$1 ) ;
28779: LD_INT 35
28781: PPUSH
28782: CALL_OW 67
// Say ( Arabian2 , D6b-ArSol2-1 ) ;
28786: LD_VAR 0 5
28790: PPUSH
28791: LD_STRING D6b-ArSol2-1
28793: PPUSH
28794: CALL_OW 88
// wait ( 0 0$0.5 ) ;
28798: LD_INT 18
28800: PPUSH
28801: CALL_OW 67
// sync ;
28805: SYNC
// Say ( Powell , D6b-Pow-2 ) ;
28806: LD_EXP 2
28810: PPUSH
28811: LD_STRING D6b-Pow-2
28813: PPUSH
28814: CALL_OW 88
// WaitTask ( Powell , 0.1 ) ;
28818: LD_EXP 2
28822: PPUSH
28823: LD_REAL  1.00000000000000E-0001
28826: PPUSH
28827: CALL 17823 0 2
// if IsInUnit ( Powell ) then
28831: LD_EXP 2
28835: PPUSH
28836: CALL_OW 310
28840: IFFALSE 28860
// WaitTask ( IsInUnit ( Powell ) , 0.1 ) ;
28842: LD_EXP 2
28846: PPUSH
28847: CALL_OW 310
28851: PPUSH
28852: LD_REAL  1.00000000000000E-0001
28855: PPUSH
28856: CALL 17823 0 2
// DialogueOn ;
28860: CALL_OW 6
// Say ( Powell , D6b-Pow-2a ) ;
28864: LD_EXP 2
28868: PPUSH
28869: LD_STRING D6b-Pow-2a
28871: PPUSH
28872: CALL_OW 88
// DialogueOff ;
28876: CALL_OW 7
// disable ( Protect_Powell ) ;
28880: LD_EXP 141
28884: DISABLE_MARKED
// ComAttackUnit ( IsInUnit ( Powell ) , ArRuFact ) ;
28885: LD_EXP 2
28889: PPUSH
28890: CALL_OW 310
28894: PPUSH
28895: LD_INT 105
28897: PPUSH
28898: CALL_OW 115
// placeseeing ( 78 , 12 , americans , - 8 ) ;
28902: LD_INT 78
28904: PPUSH
28905: LD_INT 12
28907: PPUSH
28908: LD_EXP 176
28912: PPUSH
28913: LD_INT 8
28915: NEG
28916: PPUSH
28917: CALL_OW 330
// while IsOk ( IsInUnit ( Powell ) ) do
28921: LD_EXP 2
28925: PPUSH
28926: CALL_OW 310
28930: PPUSH
28931: CALL_OW 302
28935: IFFALSE 28946
// Wait ( 0 0$0.5 ) ;
28937: LD_INT 18
28939: PPUSH
28940: CALL_OW 67
28944: GO 28921
// if GetLives ( ArRuFact ) > 0 then
28946: LD_INT 105
28948: PPUSH
28949: CALL_OW 256
28953: PUSH
28954: LD_INT 0
28956: GREATER
28957: IFFALSE 28969
// SetLives ( ArRuFact , 0 ) ;
28959: LD_INT 105
28961: PPUSH
28962: LD_INT 0
28964: PPUSH
28965: CALL_OW 234
// Center_To_Powell = false ;
28969: LD_ADDR_EXP 194
28973: PUSH
28974: LD_INT 0
28976: ST_TO_ADDR
// Wait ( 0 0$5 ) ;
28977: LD_INT 175
28979: PPUSH
28980: CALL_OW 67
// removeseeing ( 78 , 12 , americans ) ;
28984: LD_INT 78
28986: PPUSH
28987: LD_INT 12
28989: PPUSH
28990: LD_EXP 176
28994: PPUSH
28995: CALL_OW 331
// CenterOnUnits ( JMM ) ;
28999: LD_EXP 1
29003: PPUSH
29004: CALL_OW 85
// RepairArabExtensions ;
29008: CALL 31725 0 0
// AddMcUnits ( Arabian_def_id , Arabian_soldiers ^ ArT1 ) ;
29012: LD_EXP 235
29016: PPUSH
29017: LD_EXP 80
29021: PUSH
29022: LD_INT 107
29024: ADD
29025: PPUSH
29026: CALL_OW 390
// for Un in Arabian_Soldiers do
29030: LD_ADDR_VAR 0 9
29034: PUSH
29035: LD_EXP 80
29039: PUSH
29040: FOR_IN
29041: IFFALSE 29088
// begin Hex = RandHexArea ( Ar_Base , false ) ;
29043: LD_ADDR_VAR 0 14
29047: PUSH
29048: LD_INT 17
29050: PPUSH
29051: LD_INT 0
29053: PPUSH
29054: CALL_OW 16
29058: ST_TO_ADDR
// ComMoveXY ( Un , Hex [ 1 ] , Hex [ 2 ] ) ;
29059: LD_VAR 0 9
29063: PPUSH
29064: LD_VAR 0 14
29068: PUSH
29069: LD_INT 1
29071: ARRAY
29072: PPUSH
29073: LD_VAR 0 14
29077: PUSH
29078: LD_INT 2
29080: ARRAY
29081: PPUSH
29082: CALL_OW 111
// end ;
29086: GO 29040
29088: POP
29089: POP
// Say ( Sold [ 1 ] , D6c-Sol3-1 ) ;
29090: LD_VAR 0 3
29094: PUSH
29095: LD_INT 1
29097: ARRAY
29098: PPUSH
29099: LD_STRING D6c-Sol3-1
29101: PPUSH
29102: CALL_OW 88
// Say ( Jmm , D6c-JMM-1 ) ;
29106: LD_EXP 1
29110: PPUSH
29111: LD_STRING D6c-JMM-1
29113: PPUSH
29114: CALL_OW 88
// Alive = UnitFilter ( [ Cyrus , Bobby , Cornell ] , [ f_ok ] ) ;
29118: LD_ADDR_VAR 0 8
29122: PUSH
29123: LD_EXP 4
29127: PUSH
29128: LD_EXP 3
29132: PUSH
29133: LD_EXP 10
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: LIST
29142: PPUSH
29143: LD_INT 50
29145: PUSH
29146: EMPTY
29147: LIST
29148: PPUSH
29149: CALL_OW 72
29153: ST_TO_ADDR
// if Alive > 0 then
29154: LD_VAR 0 8
29158: PUSH
29159: LD_INT 0
29161: GREATER
29162: IFFALSE 29190
// Un = Alive [ Rand ( 1 , Alive ) ] else
29164: LD_ADDR_VAR 0 9
29168: PUSH
29169: LD_VAR 0 8
29173: PUSH
29174: LD_INT 1
29176: PPUSH
29177: LD_VAR 0 8
29181: PPUSH
29182: CALL_OW 12
29186: ARRAY
29187: ST_TO_ADDR
29188: GO 29204
// Un = Sold [ 3 ] ;
29190: LD_ADDR_VAR 0 9
29194: PUSH
29195: LD_VAR 0 3
29199: PUSH
29200: LD_INT 3
29202: ARRAY
29203: ST_TO_ADDR
// case Un of Cyrus :
29204: LD_VAR 0 9
29208: PUSH
29209: LD_EXP 4
29213: DOUBLE
29214: EQUAL
29215: IFTRUE 29219
29217: GO 29234
29219: POP
// Say ( Cyrus , D6c-Cyrus-1 ) ; Bobby :
29220: LD_EXP 4
29224: PPUSH
29225: LD_STRING D6c-Cyrus-1
29227: PPUSH
29228: CALL_OW 88
29232: GO 29318
29234: LD_EXP 3
29238: DOUBLE
29239: EQUAL
29240: IFTRUE 29244
29242: GO 29259
29244: POP
// Say ( Bobby , D6c-Bobby-1 ) ; Cornell :
29245: LD_EXP 3
29249: PPUSH
29250: LD_STRING D6c-Bobby-1
29252: PPUSH
29253: CALL_OW 88
29257: GO 29318
29259: LD_EXP 10
29263: DOUBLE
29264: EQUAL
29265: IFTRUE 29269
29267: GO 29284
29269: POP
// Say ( Cornell , D6c-Corn-1 ) ; Sold [ 3 ] :
29270: LD_EXP 10
29274: PPUSH
29275: LD_STRING D6c-Corn-1
29277: PPUSH
29278: CALL_OW 88
29282: GO 29318
29284: LD_VAR 0 3
29288: PUSH
29289: LD_INT 3
29291: ARRAY
29292: DOUBLE
29293: EQUAL
29294: IFTRUE 29298
29296: GO 29317
29298: POP
// Say ( Sold [ 3 ] , D6c-Sol1-1 ) ; end ;
29299: LD_VAR 0 3
29303: PUSH
29304: LD_INT 3
29306: ARRAY
29307: PPUSH
29308: LD_STRING D6c-Sol1-1
29310: PPUSH
29311: CALL_OW 88
29315: GO 29318
29317: POP
// Alive = UnitFilter ( [ Lisa , Gary , Donaldson ] , [ f_ok ] ) ;
29318: LD_ADDR_VAR 0 8
29322: PUSH
29323: LD_EXP 5
29327: PUSH
29328: LD_EXP 15
29332: PUSH
29333: LD_EXP 8
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: LIST
29342: PPUSH
29343: LD_INT 50
29345: PUSH
29346: EMPTY
29347: LIST
29348: PPUSH
29349: CALL_OW 72
29353: ST_TO_ADDR
// if Alive > 0 then
29354: LD_VAR 0 8
29358: PUSH
29359: LD_INT 0
29361: GREATER
29362: IFFALSE 29390
// Un = Alive [ Rand ( 1 , Alive ) ] else
29364: LD_ADDR_VAR 0 9
29368: PUSH
29369: LD_VAR 0 8
29373: PUSH
29374: LD_INT 1
29376: PPUSH
29377: LD_VAR 0 8
29381: PPUSH
29382: CALL_OW 12
29386: ARRAY
29387: ST_TO_ADDR
29388: GO 29404
// Un = Sold [ 2 ] ;
29390: LD_ADDR_VAR 0 9
29394: PUSH
29395: LD_VAR 0 3
29399: PUSH
29400: LD_INT 2
29402: ARRAY
29403: ST_TO_ADDR
// case Un of Lisa :
29404: LD_VAR 0 9
29408: PUSH
29409: LD_EXP 5
29413: DOUBLE
29414: EQUAL
29415: IFTRUE 29419
29417: GO 29434
29419: POP
// Say ( Lisa , D6c-Lisa-1 ) ; Gary :
29420: LD_EXP 5
29424: PPUSH
29425: LD_STRING D6c-Lisa-1
29427: PPUSH
29428: CALL_OW 88
29432: GO 29518
29434: LD_EXP 15
29438: DOUBLE
29439: EQUAL
29440: IFTRUE 29444
29442: GO 29459
29444: POP
// Say ( Gary , D6c-Gary-1 ) ; Donaldson :
29445: LD_EXP 15
29449: PPUSH
29450: LD_STRING D6c-Gary-1
29452: PPUSH
29453: CALL_OW 88
29457: GO 29518
29459: LD_EXP 8
29463: DOUBLE
29464: EQUAL
29465: IFTRUE 29469
29467: GO 29484
29469: POP
// Say ( Donaldson , D6c-Don-1 ) ; Sold [ 2 ] :
29470: LD_EXP 8
29474: PPUSH
29475: LD_STRING D6c-Don-1
29477: PPUSH
29478: CALL_OW 88
29482: GO 29518
29484: LD_VAR 0 3
29488: PUSH
29489: LD_INT 2
29491: ARRAY
29492: DOUBLE
29493: EQUAL
29494: IFTRUE 29498
29496: GO 29517
29498: POP
// Say ( Sold [ 2 ] , D6c-Sol2-1 ) ; end ;
29499: LD_VAR 0 3
29503: PUSH
29504: LD_INT 2
29506: ARRAY
29507: PPUSH
29508: LD_STRING D6c-Sol2-1
29510: PPUSH
29511: CALL_OW 88
29515: GO 29518
29517: POP
// Say ( Sold [ 1 ] , D6c-Sol3-2 ) ;
29518: LD_VAR 0 3
29522: PUSH
29523: LD_INT 1
29525: ARRAY
29526: PPUSH
29527: LD_STRING D6c-Sol3-2
29529: PPUSH
29530: CALL_OW 88
// Wait ( 0 0$2 ) ;
29534: LD_INT 70
29536: PPUSH
29537: CALL_OW 67
// Say ( JMM , D6c-JMM-2 ) ;
29541: LD_EXP 1
29545: PPUSH
29546: LD_STRING D6c-JMM-2
29548: PPUSH
29549: CALL_OW 88
// SetSide ( FilterAllUnits ( [ f_side , Americans1 ] ) , americans ) ;
29553: LD_INT 22
29555: PUSH
29556: LD_EXP 177
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PPUSH
29565: CALL_OW 69
29569: PPUSH
29570: LD_EXP 176
29574: PPUSH
29575: CALL_OW 235
// ingame_video = false ;
29579: LD_ADDR_OWVAR 52
29583: PUSH
29584: LD_INT 0
29586: ST_TO_ADDR
// interface_hidden = false ;
29587: LD_ADDR_OWVAR 54
29591: PUSH
29592: LD_INT 0
29594: ST_TO_ADDR
// ChangeMissionObjectives ( M2 ) ;
29595: LD_STRING M2
29597: PPUSH
29598: CALL_OW 337
// Wait ( 0 0$1 ) ;
29602: LD_INT 35
29604: PPUSH
29605: CALL_OW 67
// enable ( R1_attack ) ;
29609: LD_EXP 140
29613: ENABLE_MARKED
// R1_Attack_Continues = true ;
29614: LD_ADDR_EXP 196
29618: PUSH
29619: LD_INT 1
29621: ST_TO_ADDR
// ComMoveXY ( R1_Attacking_Units , 101 , 147 ) ;
29622: LD_LOC 11
29626: PPUSH
29627: LD_INT 101
29629: PPUSH
29630: LD_INT 147
29632: PPUSH
29633: CALL_OW 111
// AddMcUnits ( Russian1_att_id , R1_Attacking_Units ) ;
29637: LD_EXP 238
29641: PPUSH
29642: LD_LOC 11
29646: PPUSH
29647: CALL_OW 390
// ComMoveXY ( R1_Patroling_Units , 101 , 147 ) ;
29651: LD_LOC 12
29655: PPUSH
29656: LD_INT 101
29658: PPUSH
29659: LD_INT 147
29661: PPUSH
29662: CALL_OW 111
// AddMcUnits ( Russian1_patr_id , R1_Patroling_Units ) ;
29666: LD_EXP 240
29670: PPUSH
29671: LD_LOC 12
29675: PPUSH
29676: CALL_OW 390
// SetAttitude ( russians1 , americans , att_enemy , true ) ;
29680: LD_EXP 179
29684: PPUSH
29685: LD_EXP 176
29689: PPUSH
29690: LD_INT 2
29692: PPUSH
29693: LD_INT 1
29695: PPUSH
29696: CALL_OW 80
// Arabian_Buildings = FilterUnitsInArea ( Ar_Base , [ f_type , unit_building ] ) ;
29700: LD_ADDR_VAR 0 7
29704: PUSH
29705: LD_INT 17
29707: PPUSH
29708: LD_INT 21
29710: PUSH
29711: LD_INT 3
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PPUSH
29718: CALL_OW 70
29722: ST_TO_ADDR
// for Un in Arabian_Buildings do
29723: LD_ADDR_VAR 0 9
29727: PUSH
29728: LD_VAR 0 7
29732: PUSH
29733: FOR_IN
29734: IFFALSE 29780
// if ( GetLives ( Un ) > 0 ) and ( GetLives ( Un ) < 250 ) then
29736: LD_VAR 0 9
29740: PPUSH
29741: CALL_OW 256
29745: PUSH
29746: LD_INT 0
29748: GREATER
29749: PUSH
29750: LD_VAR 0 9
29754: PPUSH
29755: CALL_OW 256
29759: PUSH
29760: LD_INT 250
29762: LESS
29763: AND
29764: IFFALSE 29778
// SetLives ( Un , 400 ) ;
29766: LD_VAR 0 9
29770: PPUSH
29771: LD_INT 400
29773: PPUSH
29774: CALL_OW 234
29778: GO 29733
29780: POP
29781: POP
// AddMcUnits ( Arabian_build_id , Arabian_Engineers ) ;
29782: LD_EXP 236
29786: PPUSH
29787: LD_EXP 81
29791: PPUSH
29792: CALL_OW 390
// ComExitBuilding ( Arabian_Engineers ) ;
29796: LD_EXP 81
29800: PPUSH
29801: CALL_OW 122
// enable ( Ingame_Run_over ) ;
29805: LD_EXP 145
29809: ENABLE_MARKED
// Time_of_Ingame_Run_Over = tick ;
29810: LD_ADDR_EXP 189
29814: PUSH
29815: LD_OWVAR 1
29819: ST_TO_ADDR
// Woman_Coming_Time = Woman_Coming_Time + tick ;
29820: LD_ADDR_EXP 201
29824: PUSH
29825: LD_EXP 201
29829: PUSH
29830: LD_OWVAR 1
29834: PLUS
29835: ST_TO_ADDR
// Rus_Attack_time = Rus_Attack_time + tick ;
29836: LD_ADDR_EXP 130
29840: PUSH
29841: LD_EXP 130
29845: PUSH
29846: LD_OWVAR 1
29850: PLUS
29851: ST_TO_ADDR
// Stevens_Coming_Time = Stevens_Coming_Time + tick ;
29852: LD_ADDR_EXP 200
29856: PUSH
29857: LD_EXP 200
29861: PUSH
29862: LD_OWVAR 1
29866: PLUS
29867: ST_TO_ADDR
// Alliance_broadcast = Alliance_broadcast + tick ;
29868: LD_ADDR_EXP 202
29872: PUSH
29873: LD_EXP 202
29877: PUSH
29878: LD_OWVAR 1
29882: PLUS
29883: ST_TO_ADDR
// Arabian_siberite_attack_time = Arabian_siberite_attack_time + tick ;
29884: LD_ADDR_EXP 213
29888: PUSH
29889: LD_EXP 213
29893: PUSH
29894: LD_OWVAR 1
29898: PLUS
29899: ST_TO_ADDR
// Behemots_broadcast = Behemots_broadcast + tick ;
29900: LD_ADDR_EXP 203
29904: PUSH
29905: LD_EXP 203
29909: PUSH
29910: LD_OWVAR 1
29914: PLUS
29915: ST_TO_ADDR
// Alaskite_Bomb_Time = Alaskite_Bomb_Time + tick ;
29916: LD_ADDR_EXP 212
29920: PUSH
29921: LD_EXP 212
29925: PUSH
29926: LD_OWVAR 1
29930: PLUS
29931: ST_TO_ADDR
// Time_of_first_capture = Time_of_first_capture + tick ;
29932: LD_ADDR_EXP 204
29936: PUSH
29937: LD_EXP 204
29941: PUSH
29942: LD_OWVAR 1
29946: PLUS
29947: ST_TO_ADDR
// Behemot_attack_time = Behemot_attack_time + tick ;
29948: LD_ADDR_EXP 225
29952: PUSH
29953: LD_EXP 225
29957: PUSH
29958: LD_OWVAR 1
29962: PLUS
29963: ST_TO_ADDR
// enable ( Game_Continue ) ;
29964: LD_EXP 146
29968: ENABLE_MARKED
// enable ( Timer ) ;
29969: LD_EXP 159
29973: ENABLE_MARKED
// SetTech ( tech_Gun , americans , state_researched ) ;
29974: LD_INT 39
29976: PPUSH
29977: LD_EXP 176
29981: PPUSH
29982: LD_INT 2
29984: PPUSH
29985: CALL_OW 322
// SetTech ( tech_SolPow , americans , state_researched ) ;
29989: LD_INT 35
29991: PPUSH
29992: LD_EXP 176
29996: PPUSH
29997: LD_INT 2
29999: PPUSH
30000: CALL_OW 322
// SetTech ( tech_SolEng , americans , state_researched ) ;
30004: LD_INT 45
30006: PPUSH
30007: LD_EXP 176
30011: PPUSH
30012: LD_INT 2
30014: PPUSH
30015: CALL_OW 322
// All_americans = FilterAllUnits ( [ [ f_side , americans ] , [ f_type , unit_human ] ] ) ;
30019: LD_ADDR_EXP 61
30023: PUSH
30024: LD_INT 22
30026: PUSH
30027: LD_EXP 176
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: LD_INT 21
30038: PUSH
30039: LD_INT 1
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PPUSH
30050: CALL_OW 69
30054: ST_TO_ADDR
// All_russians = FilterAllUnits ( [ [ f_side , russians ] , [ f_type , unit_human ] ] ) ;
30055: LD_ADDR_EXP 111
30059: PUSH
30060: LD_INT 22
30062: PUSH
30063: LD_EXP 178
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: PUSH
30072: LD_INT 21
30074: PUSH
30075: LD_INT 1
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PPUSH
30086: CALL_OW 69
30090: ST_TO_ADDR
// end ;
30091: PPOPN 14
30093: END
// export function JMMIsReady ; begin
30094: LD_INT 0
30096: PPUSH
// Say ( JMM , D6c-JMM-2 ) ;
30097: LD_EXP 1
30101: PPUSH
30102: LD_STRING D6c-JMM-2
30104: PPUSH
30105: CALL_OW 88
// end ;
30109: LD_VAR 0 1
30113: RET
// every 0 0$0.2 marked 6 do
30114: GO 30116
30116: DISABLE
// begin Say ( Powell , D6-Pow-2 ) ;
30117: LD_EXP 2
30121: PPUSH
30122: LD_STRING D6-Pow-2
30124: PPUSH
30125: CALL_OW 88
// end ;
30129: END
// every 0 0$0.1 marked 5 do
30130: GO 30132
30132: DISABLE
// begin if IsInUnit ( Powell ) = 0 then
30133: LD_EXP 2
30137: PPUSH
30138: CALL_OW 310
30142: PUSH
30143: LD_INT 0
30145: EQUAL
30146: IFFALSE 30175
// begin if GetLives ( Powell ) < 900 then
30148: LD_EXP 2
30152: PPUSH
30153: CALL_OW 256
30157: PUSH
30158: LD_INT 900
30160: LESS
30161: IFFALSE 30175
// SetLives ( Powell , 1000 ) ;
30163: LD_EXP 2
30167: PPUSH
30168: LD_INT 1000
30170: PPUSH
30171: CALL_OW 234
// end ; if ( IsInUnit ( Powell ) <> 0 ) and ( IsInUnit ( Powell ) <> Powell_vehicle ) then
30175: LD_EXP 2
30179: PPUSH
30180: CALL_OW 310
30184: PUSH
30185: LD_INT 0
30187: NONEQUAL
30188: PUSH
30189: LD_EXP 2
30193: PPUSH
30194: CALL_OW 310
30198: PUSH
30199: LD_EXP 192
30203: NONEQUAL
30204: AND
30205: IFFALSE 30271
// begin if GetLives ( IsInUnit ( Powell ) ) < 400 then
30207: LD_EXP 2
30211: PPUSH
30212: CALL_OW 310
30216: PPUSH
30217: CALL_OW 256
30221: PUSH
30222: LD_INT 400
30224: LESS
30225: IFFALSE 30244
// SetLives ( IsInUnit ( Powell ) , 400 ) ;
30227: LD_EXP 2
30231: PPUSH
30232: CALL_OW 310
30236: PPUSH
30237: LD_INT 400
30239: PPUSH
30240: CALL_OW 234
// if GetLives ( Powell ) < 400 then
30244: LD_EXP 2
30248: PPUSH
30249: CALL_OW 256
30253: PUSH
30254: LD_INT 400
30256: LESS
30257: IFFALSE 30271
// SetLives ( Powell , 400 ) ;
30259: LD_EXP 2
30263: PPUSH
30264: LD_INT 400
30266: PPUSH
30267: CALL_OW 234
// end ; enable ;
30271: ENABLE
// end ;
30272: END
// every 0 0$2 trigger Center_To_Powell do var X , Y , NewX , NewY ;
30273: LD_EXP 194
30277: IFFALSE 30508
30279: GO 30281
30281: DISABLE
30282: LD_INT 0
30284: PPUSH
30285: PPUSH
30286: PPUSH
30287: PPUSH
// begin if IsInUnit ( Powell ) = Powell_vehicle then
30288: LD_EXP 2
30292: PPUSH
30293: CALL_OW 310
30297: PUSH
30298: LD_EXP 192
30302: EQUAL
30303: IFFALSE 30407
// begin X = GetX ( Powell_vehicle ) ;
30305: LD_ADDR_VAR 0 1
30309: PUSH
30310: LD_EXP 192
30314: PPUSH
30315: CALL_OW 250
30319: ST_TO_ADDR
// Y = GetY ( Powell_vehicle ) ;
30320: LD_ADDR_VAR 0 2
30324: PUSH
30325: LD_EXP 192
30329: PPUSH
30330: CALL_OW 251
30334: ST_TO_ADDR
// NewX = ShiftX ( X , GetDir ( Powell_vehicle ) , 5 ) ;
30335: LD_ADDR_VAR 0 3
30339: PUSH
30340: LD_VAR 0 1
30344: PPUSH
30345: LD_EXP 192
30349: PPUSH
30350: CALL_OW 254
30354: PPUSH
30355: LD_INT 5
30357: PPUSH
30358: CALL_OW 272
30362: ST_TO_ADDR
// NewY = ShiftY ( Y , GetDir ( Powell_vehicle ) , 5 ) ;
30363: LD_ADDR_VAR 0 4
30367: PUSH
30368: LD_VAR 0 2
30372: PPUSH
30373: LD_EXP 192
30377: PPUSH
30378: CALL_OW 254
30382: PPUSH
30383: LD_INT 5
30385: PPUSH
30386: CALL_OW 273
30390: ST_TO_ADDR
// CenterOnXY ( NewX , NewY ) ;
30391: LD_VAR 0 3
30395: PPUSH
30396: LD_VAR 0 4
30400: PPUSH
30401: CALL_OW 84
// end else
30405: GO 30507
// begin X = GetX ( Powell ) ;
30407: LD_ADDR_VAR 0 1
30411: PUSH
30412: LD_EXP 2
30416: PPUSH
30417: CALL_OW 250
30421: ST_TO_ADDR
// Y = GetY ( Powell ) ;
30422: LD_ADDR_VAR 0 2
30426: PUSH
30427: LD_EXP 2
30431: PPUSH
30432: CALL_OW 251
30436: ST_TO_ADDR
// NewX = ShiftX ( X , GetDir ( Powell ) , 2 ) ;
30437: LD_ADDR_VAR 0 3
30441: PUSH
30442: LD_VAR 0 1
30446: PPUSH
30447: LD_EXP 2
30451: PPUSH
30452: CALL_OW 254
30456: PPUSH
30457: LD_INT 2
30459: PPUSH
30460: CALL_OW 272
30464: ST_TO_ADDR
// NewY = ShiftY ( Y , GetDir ( Powell ) , 2 ) ;
30465: LD_ADDR_VAR 0 4
30469: PUSH
30470: LD_VAR 0 2
30474: PPUSH
30475: LD_EXP 2
30479: PPUSH
30480: CALL_OW 254
30484: PPUSH
30485: LD_INT 2
30487: PPUSH
30488: CALL_OW 273
30492: ST_TO_ADDR
// CenterOnXY ( NewX , NewY ) ;
30493: LD_VAR 0 3
30497: PPUSH
30498: LD_VAR 0 4
30502: PPUSH
30503: CALL_OW 84
// end ; enable ;
30507: ENABLE
// end ;
30508: PPOPN 4
30510: END
// every 0 0$1 marked 1 do var Un , Count ;
30511: GO 30513
30513: DISABLE
30514: LD_INT 0
30516: PPUSH
30517: PPUSH
// begin if GetLives ( Powell ) < 950 then
30518: LD_EXP 2
30522: PPUSH
30523: CALL_OW 256
30527: PUSH
30528: LD_INT 950
30530: LESS
30531: IFFALSE 30540
// begin enable ( out_of_base ) ;
30533: LD_EXP 138
30537: ENABLE_MARKED
// exit ;
30538: GO 30839
// end ; Count = 0 ;
30540: LD_ADDR_VAR 0 2
30544: PUSH
30545: LD_INT 0
30547: ST_TO_ADDR
// for Un in ( JMM_Helpers ^ Joan ^ JMM ) do
30548: LD_ADDR_VAR 0 1
30552: PUSH
30553: LD_EXP 67
30557: PUSH
30558: LD_EXP 12
30562: ADD
30563: PUSH
30564: LD_EXP 1
30568: ADD
30569: PUSH
30570: FOR_IN
30571: IFFALSE 30646
// if ( not ( IsInArea ( Un , JMM_Hill ) ) and IsOk ( Un ) and ( Warning_Time + 0 0$15 ) < tick ) then
30573: LD_VAR 0 1
30577: PPUSH
30578: LD_INT 2
30580: PPUSH
30581: CALL_OW 308
30585: NOT
30586: PUSH
30587: LD_VAR 0 1
30591: PPUSH
30592: CALL_OW 302
30596: AND
30597: PUSH
30598: LD_EXP 188
30602: PUSH
30603: LD_INT 525
30605: PLUS
30606: PUSH
30607: LD_OWVAR 1
30611: LESS
30612: AND
30613: IFFALSE 30644
// begin Count = Count + 1 ;
30615: LD_ADDR_VAR 0 2
30619: PUSH
30620: LD_VAR 0 2
30624: PUSH
30625: LD_INT 1
30627: PLUS
30628: ST_TO_ADDR
// ComMoveXY ( Un , 68 , 107 ) ;
30629: LD_VAR 0 1
30633: PPUSH
30634: LD_INT 68
30636: PPUSH
30637: LD_INT 107
30639: PPUSH
30640: CALL_OW 111
// end ;
30644: GO 30570
30646: POP
30647: POP
// if Count then
30648: LD_VAR 0 2
30652: IFFALSE 30838
// begin Powell_warning = Powell_warning + 1 ;
30654: LD_ADDR_EXP 187
30658: PUSH
30659: LD_EXP 187
30663: PUSH
30664: LD_INT 1
30666: PLUS
30667: ST_TO_ADDR
// case Powell_warning of 1 :
30668: LD_EXP 187
30672: PUSH
30673: LD_INT 1
30675: DOUBLE
30676: EQUAL
30677: IFTRUE 30681
30679: GO 30706
30681: POP
// begin Warning_Time = tick ;
30682: LD_ADDR_EXP 188
30686: PUSH
30687: LD_OWVAR 1
30691: ST_TO_ADDR
// Say ( Powell , DBack1-Pow-1 ) ;
30692: LD_EXP 2
30696: PPUSH
30697: LD_STRING DBack1-Pow-1
30699: PPUSH
30700: CALL_OW 88
// end ; 2 :
30704: GO 30768
30706: LD_INT 2
30708: DOUBLE
30709: EQUAL
30710: IFTRUE 30714
30712: GO 30739
30714: POP
// begin Warning_Time = tick ;
30715: LD_ADDR_EXP 188
30719: PUSH
30720: LD_OWVAR 1
30724: ST_TO_ADDR
// Say ( Powell , DBack2-Pow-1 ) ;
30725: LD_EXP 2
30729: PPUSH
30730: LD_STRING DBack2-Pow-1
30732: PPUSH
30733: CALL_OW 88
// end ; 3 :
30737: GO 30768
30739: LD_INT 3
30741: DOUBLE
30742: EQUAL
30743: IFTRUE 30747
30745: GO 30767
30747: POP
// begin Say ( Powell , DBack3-Pow-1 ) ;
30748: LD_EXP 2
30752: PPUSH
30753: LD_STRING DBack3-Pow-1
30755: PPUSH
30756: CALL_OW 88
// enable ( out_of_base ) ;
30760: LD_EXP 138
30764: ENABLE_MARKED
// end ; end ;
30765: GO 30768
30767: POP
// for Un in ( JMM_Helpers ^ Joan ^ JMM ) do
30768: LD_ADDR_VAR 0 1
30772: PUSH
30773: LD_EXP 67
30777: PUSH
30778: LD_EXP 12
30782: ADD
30783: PUSH
30784: LD_EXP 1
30788: ADD
30789: PUSH
30790: FOR_IN
30791: IFFALSE 30836
// if ( not ( IsInArea ( Un , JMM_Hill ) ) and IsOk ( Un ) ) then
30793: LD_VAR 0 1
30797: PPUSH
30798: LD_INT 2
30800: PPUSH
30801: CALL_OW 308
30805: NOT
30806: PUSH
30807: LD_VAR 0 1
30811: PPUSH
30812: CALL_OW 302
30816: AND
30817: IFFALSE 30834
// begin ComMoveXY ( Un , 68 , 107 ) ;
30819: LD_VAR 0 1
30823: PPUSH
30824: LD_INT 68
30826: PPUSH
30827: LD_INT 107
30829: PPUSH
30830: CALL_OW 111
// end ;
30834: GO 30790
30836: POP
30837: POP
// end ; enable ;
30838: ENABLE
// end ;
30839: PPOPN 2
30841: END
// every 0 0$2 marked 7 do var Sum_X , Sum_Y , New_X , New_Y , Number , Un ;
30842: GO 30844
30844: DISABLE
30845: LD_INT 0
30847: PPUSH
30848: PPUSH
30849: PPUSH
30850: PPUSH
30851: PPUSH
30852: PPUSH
// begin Number = UnitFilter ( Soldiers ^ Soldiers1 , [ f_alive ] ) ;
30853: LD_ADDR_VAR 0 5
30857: PUSH
30858: LD_LOC 6
30862: PUSH
30863: LD_LOC 7
30867: ADD
30868: PPUSH
30869: LD_INT 51
30871: PUSH
30872: EMPTY
30873: LIST
30874: PPUSH
30875: CALL_OW 72
30879: ST_TO_ADDR
// if Number > 0 then
30880: LD_VAR 0 5
30884: PUSH
30885: LD_INT 0
30887: GREATER
30888: IFFALSE 31047
// begin for Un in ( Soldiers ^ Soldiers1 ) do
30890: LD_ADDR_VAR 0 6
30894: PUSH
30895: LD_LOC 6
30899: PUSH
30900: LD_LOC 7
30904: ADD
30905: PUSH
30906: FOR_IN
30907: IFFALSE 30975
// begin if IsLive ( Un ) then
30909: LD_VAR 0 6
30913: PPUSH
30914: CALL_OW 300
30918: IFFALSE 30941
// Sum_X = Sum_X + GetX ( Un ) ;
30920: LD_ADDR_VAR 0 1
30924: PUSH
30925: LD_VAR 0 1
30929: PUSH
30930: LD_VAR 0 6
30934: PPUSH
30935: CALL_OW 250
30939: PLUS
30940: ST_TO_ADDR
// if IsLive ( Un ) then
30941: LD_VAR 0 6
30945: PPUSH
30946: CALL_OW 300
30950: IFFALSE 30973
// Sum_Y = Sum_Y + GetY ( Un ) ;
30952: LD_ADDR_VAR 0 2
30956: PUSH
30957: LD_VAR 0 2
30961: PUSH
30962: LD_VAR 0 6
30966: PPUSH
30967: CALL_OW 251
30971: PLUS
30972: ST_TO_ADDR
// end ;
30973: GO 30906
30975: POP
30976: POP
// New_X = ( Sum_X + Number / 2 ) div Number ;
30977: LD_ADDR_VAR 0 3
30981: PUSH
30982: LD_VAR 0 1
30986: PUSH
30987: LD_VAR 0 5
30991: PUSH
30992: LD_INT 2
30994: DIVREAL
30995: PLUS
30996: PUSH
30997: LD_VAR 0 5
31001: DIV
31002: ST_TO_ADDR
// New_Y = ( ( Sum_Y + Number / 2 ) div Number ) - 5 ;
31003: LD_ADDR_VAR 0 4
31007: PUSH
31008: LD_VAR 0 2
31012: PUSH
31013: LD_VAR 0 5
31017: PUSH
31018: LD_INT 2
31020: DIVREAL
31021: PLUS
31022: PUSH
31023: LD_VAR 0 5
31027: DIV
31028: PUSH
31029: LD_INT 5
31031: MINUS
31032: ST_TO_ADDR
// CenterOnXY ( New_X , New_Y ) ;
31033: LD_VAR 0 3
31037: PPUSH
31038: LD_VAR 0 4
31042: PPUSH
31043: CALL_OW 84
// end ; enable ;
31047: ENABLE
// end ;
31048: PPOPN 6
31050: END
// every 0 0$1 marked 24 do
31051: GO 31053
31053: DISABLE
// begin display_strings = [ #Am15-1 , tick - Time_of_Ingame_Run_Over ] ;
31054: LD_ADDR_OWVAR 47
31058: PUSH
31059: LD_STRING #Am15-1
31061: PUSH
31062: LD_OWVAR 1
31066: PUSH
31067: LD_EXP 189
31071: MINUS
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: ST_TO_ADDR
// enable ;
31077: ENABLE
// end ; end_of_file
31078: END
// export function StartArabianBase ; var units_to_protect ; begin
31079: LD_INT 0
31081: PPUSH
31082: PPUSH
// units_to_protect = FilterAllUnits ( [ [ f_side , arabians ] , [ f_type , unit_building ] ] ) ;
31083: LD_ADDR_VAR 0 2
31087: PUSH
31088: LD_INT 22
31090: PUSH
31091: LD_EXP 180
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: PUSH
31100: LD_INT 21
31102: PUSH
31103: LD_INT 3
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: PPUSH
31114: CALL_OW 69
31118: ST_TO_ADDR
// Arabian_reg_id = McRegistry ( arabians , [ [ mc_reg_area_to_guard , Arabians_Base ] , [ mc_reg_area_to_protect , Arabians_Base ] , [ mc_reg_units_to_protect , units_to_protect ] , - mc_reg_only_important , - mc_reg_ignore_fog ] ) ;
31119: LD_ADDR_EXP 234
31123: PUSH
31124: LD_EXP 180
31128: PPUSH
31129: LD_INT 2
31131: PUSH
31132: LD_INT 4
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: PUSH
31139: LD_INT 3
31141: PUSH
31142: LD_INT 4
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 4
31151: PUSH
31152: LD_VAR 0 2
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: LD_INT 8
31163: NEG
31164: PUSH
31165: LD_INT 7
31167: NEG
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: PPUSH
31176: CALL_OW 399
31180: ST_TO_ADDR
// Arabian_def_id = McDefend ( 100 , Arabian_reg_id , Arabian_soldiers ^ units_to_protect , [ [ mc_area_dont_leave , Ar_Base ] , [ mc_retreat_area_people , Ar_Heal ] , [ mc_retreat_lives_people , 550 ] ] ) ;
31181: LD_ADDR_EXP 235
31185: PUSH
31186: LD_INT 100
31188: PPUSH
31189: LD_EXP 234
31193: PPUSH
31194: LD_EXP 80
31198: PUSH
31199: LD_VAR 0 2
31203: ADD
31204: PPUSH
31205: LD_INT 2
31207: PUSH
31208: LD_INT 17
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 7
31217: PUSH
31218: LD_INT 23
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 5
31227: PUSH
31228: LD_INT 550
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: LIST
31239: PPUSH
31240: CALL_OW 401
31244: ST_TO_ADDR
// Arabian_build_id = McBase ( 50 , Arabian_Engineers , Arabian_Buildings , [ ] , [ ] , [ mc_base_cont ] ) ;
31245: LD_ADDR_EXP 236
31249: PUSH
31250: LD_INT 50
31252: PPUSH
31253: LD_EXP 81
31257: PPUSH
31258: LD_EXP 88
31262: PPUSH
31263: EMPTY
31264: PPUSH
31265: EMPTY
31266: PPUSH
31267: LD_INT 1
31269: PUSH
31270: EMPTY
31271: LIST
31272: PPUSH
31273: CALL_OW 397
31277: ST_TO_ADDR
// end ;
31278: LD_VAR 0 1
31282: RET
// export function SendArabianBack ( Un ) ; var Hex , New_Hex , i ; begin
31283: LD_INT 0
31285: PPUSH
31286: PPUSH
31287: PPUSH
31288: PPUSH
// if GetClass ( Un ) = class_scientistic then
31289: LD_VAR 0 1
31293: PPUSH
31294: CALL_OW 257
31298: PUSH
31299: LD_INT 4
31301: EQUAL
31302: IFFALSE 31322
// Hex = RandHexArea ( Ar_Heal , false ) else
31304: LD_ADDR_VAR 0 3
31308: PUSH
31309: LD_INT 23
31311: PPUSH
31312: LD_INT 0
31314: PPUSH
31315: CALL_OW 16
31319: ST_TO_ADDR
31320: GO 31338
// Hex = RandHexArea ( Ar_Base , false ) ;
31322: LD_ADDR_VAR 0 3
31326: PUSH
31327: LD_INT 17
31329: PPUSH
31330: LD_INT 0
31332: PPUSH
31333: CALL_OW 16
31337: ST_TO_ADDR
// for i = 1 to 10 do
31338: LD_ADDR_VAR 0 5
31342: PUSH
31343: DOUBLE
31344: LD_INT 1
31346: DEC
31347: ST_TO_ADDR
31348: LD_INT 10
31350: PUSH
31351: FOR_TO
31352: IFFALSE 31473
// begin if GetClass ( Un ) = class_scientistic then
31354: LD_VAR 0 1
31358: PPUSH
31359: CALL_OW 257
31363: PUSH
31364: LD_INT 4
31366: EQUAL
31367: IFFALSE 31387
// New_Hex = RandHexArea ( Ar_Heal , false ) else
31369: LD_ADDR_VAR 0 4
31373: PUSH
31374: LD_INT 23
31376: PPUSH
31377: LD_INT 0
31379: PPUSH
31380: CALL_OW 16
31384: ST_TO_ADDR
31385: GO 31403
// New_Hex = RandHexArea ( Ar_Base , false ) ;
31387: LD_ADDR_VAR 0 4
31391: PUSH
31392: LD_INT 17
31394: PPUSH
31395: LD_INT 0
31397: PPUSH
31398: CALL_OW 16
31402: ST_TO_ADDR
// if GetDistUnitXY ( Un , New_Hex [ 1 ] , New_Hex [ 2 ] ) < GetDistUnitXY ( Un , Hex [ 1 ] , Hex [ 2 ] ) then
31403: LD_VAR 0 1
31407: PPUSH
31408: LD_VAR 0 4
31412: PUSH
31413: LD_INT 1
31415: ARRAY
31416: PPUSH
31417: LD_VAR 0 4
31421: PUSH
31422: LD_INT 2
31424: ARRAY
31425: PPUSH
31426: CALL_OW 297
31430: PUSH
31431: LD_VAR 0 1
31435: PPUSH
31436: LD_VAR 0 3
31440: PUSH
31441: LD_INT 1
31443: ARRAY
31444: PPUSH
31445: LD_VAR 0 3
31449: PUSH
31450: LD_INT 2
31452: ARRAY
31453: PPUSH
31454: CALL_OW 297
31458: LESS
31459: IFFALSE 31471
// Hex = New_Hex ;
31461: LD_ADDR_VAR 0 3
31465: PUSH
31466: LD_VAR 0 4
31470: ST_TO_ADDR
// end ;
31471: GO 31351
31473: POP
31474: POP
// if GetUnitMc ( Un ) = Arabian_def_id then
31475: LD_VAR 0 1
31479: PPUSH
31480: CALL_OW 388
31484: PUSH
31485: LD_EXP 235
31489: EQUAL
31490: IFFALSE 31561
// begin RemoveMcUnits ( Arabian_def_id , Un ) ;
31492: LD_EXP 235
31496: PPUSH
31497: LD_VAR 0 1
31501: PPUSH
31502: CALL_OW 391
// ComMoveXY ( Un , Hex [ 1 ] , Hex [ 2 ] ) ;
31506: LD_VAR 0 1
31510: PPUSH
31511: LD_VAR 0 3
31515: PUSH
31516: LD_INT 1
31518: ARRAY
31519: PPUSH
31520: LD_VAR 0 3
31524: PUSH
31525: LD_INT 2
31527: ARRAY
31528: PPUSH
31529: CALL_OW 111
// WaitTask ( Un , 1 ) ;
31533: LD_VAR 0 1
31537: PPUSH
31538: LD_INT 1
31540: PPUSH
31541: CALL 17823 0 2
// AddMcUnits ( Arabian_def_id , Un ) ;
31545: LD_EXP 235
31549: PPUSH
31550: LD_VAR 0 1
31554: PPUSH
31555: CALL_OW 390
// end else
31559: GO 31600
// begin ComMoveXY ( Un , Hex [ 1 ] , Hex [ 2 ] ) ;
31561: LD_VAR 0 1
31565: PPUSH
31566: LD_VAR 0 3
31570: PUSH
31571: LD_INT 1
31573: ARRAY
31574: PPUSH
31575: LD_VAR 0 3
31579: PUSH
31580: LD_INT 2
31582: ARRAY
31583: PPUSH
31584: CALL_OW 111
// WaitTask ( Un , 1 ) ;
31588: LD_VAR 0 1
31592: PPUSH
31593: LD_INT 1
31595: PPUSH
31596: CALL 17823 0 2
// end ; end ;
31600: LD_VAR 0 2
31604: RET
// every 0 0$10 trigger not ( Friend_has_come ) do var Un ;
31605: LD_EXP 226
31609: NOT
31610: IFFALSE 31722
31612: GO 31614
31614: DISABLE
31615: LD_INT 0
31617: PPUSH
// begin for Un in All_Arabians do
31618: LD_ADDR_VAR 0 1
31622: PUSH
31623: LD_EXP 79
31627: PUSH
31628: FOR_IN
31629: IFFALSE 31719
// begin if ( ( GetClass ( Un ) = class_scientistic ) and not ( IsInArea ( Un , Ar_Heal ) ) or ( GetClass ( Un ) <> class_scientistic ) and not ( IsInArea ( Un , Ar_Base ) ) ) then
31631: LD_VAR 0 1
31635: PPUSH
31636: CALL_OW 257
31640: PUSH
31641: LD_INT 4
31643: EQUAL
31644: PUSH
31645: LD_VAR 0 1
31649: PPUSH
31650: LD_INT 23
31652: PPUSH
31653: CALL_OW 308
31657: NOT
31658: AND
31659: PUSH
31660: LD_VAR 0 1
31664: PPUSH
31665: CALL_OW 257
31669: PUSH
31670: LD_INT 4
31672: NONEQUAL
31673: PUSH
31674: LD_VAR 0 1
31678: PPUSH
31679: LD_INT 17
31681: PPUSH
31682: CALL_OW 308
31686: NOT
31687: AND
31688: OR
31689: IFFALSE 31717
// begin Arabian_Outside = Un ;
31691: LD_ADDR_EXP 86
31695: PUSH
31696: LD_VAR 0 1
31700: ST_TO_ADDR
// RaiseSailEvent ( Send_Arabian_Back ) ;
31701: LD_EXP 174
31705: PPUSH
31706: CALL_OW 427
// Wait ( 1 ) ;
31710: LD_INT 1
31712: PPUSH
31713: CALL_OW 67
// end end ;
31717: GO 31628
31719: POP
31720: POP
// enable ;
31721: ENABLE
// end ;
31722: PPOPN 1
31724: END
// export function RepairArabExtensions ; begin
31725: LD_INT 0
31727: PPUSH
// uc_nation = nation_russian ;
31728: LD_ADDR_OWVAR 21
31732: PUSH
31733: LD_INT 3
31735: ST_TO_ADDR
// uc_side = arabians ;
31736: LD_ADDR_OWVAR 20
31740: PUSH
31741: LD_EXP 180
31745: ST_TO_ADDR
// if not ( IsDead ( ArRuSibExt ) ) and GetLives ( ArRuSibExt ) < 1000 then
31746: LD_INT 116
31748: PPUSH
31749: CALL_OW 301
31753: NOT
31754: PUSH
31755: LD_INT 116
31757: PPUSH
31758: CALL_OW 256
31762: PUSH
31763: LD_INT 1000
31765: LESS
31766: AND
31767: IFFALSE 31779
// SetLives ( ArRuSibExt , 1000 ) ;
31769: LD_INT 116
31771: PPUSH
31772: LD_INT 1000
31774: PPUSH
31775: CALL_OW 234
// if not ( IsDead ( ArRuRoExt ) ) and GetLives ( ArRuRoExt ) < 1000 then
31779: LD_INT 115
31781: PPUSH
31782: CALL_OW 301
31786: NOT
31787: PUSH
31788: LD_INT 115
31790: PPUSH
31791: CALL_OW 256
31795: PUSH
31796: LD_INT 1000
31798: LESS
31799: AND
31800: IFFALSE 31812
// SetLives ( ArRuRoExt , 1000 ) ;
31802: LD_INT 115
31804: PPUSH
31805: LD_INT 1000
31807: PPUSH
31808: CALL_OW 234
// if not ( IsDead ( ArRuTrackExt ) ) and GetLives ( ArRuTrackExt ) < 1000 then
31812: LD_INT 141
31814: PPUSH
31815: CALL_OW 301
31819: NOT
31820: PUSH
31821: LD_INT 141
31823: PPUSH
31824: CALL_OW 256
31828: PUSH
31829: LD_INT 1000
31831: LESS
31832: AND
31833: IFFALSE 31845
// SetLives ( ArRuTrackExt , 1000 ) ;
31835: LD_INT 141
31837: PPUSH
31838: LD_INT 1000
31840: PPUSH
31841: CALL_OW 234
// if not ( IsDead ( ArRuCompExt ) ) and GetLives ( ArRuTrackExt ) < 1000 then
31845: LD_INT 142
31847: PPUSH
31848: CALL_OW 301
31852: NOT
31853: PUSH
31854: LD_INT 141
31856: PPUSH
31857: CALL_OW 256
31861: PUSH
31862: LD_INT 1000
31864: LESS
31865: AND
31866: IFFALSE 31878
// SetLives ( ArRuTrackExt , 1000 ) ;
31868: LD_INT 141
31870: PPUSH
31871: LD_INT 1000
31873: PPUSH
31874: CALL_OW 234
// end ;
31878: LD_VAR 0 1
31882: RET
// every 0 0$1 marked 9 do
31883: GO 31885
31885: DISABLE
// begin disable ;
31886: DISABLE
// SetResourceType ( GetBase ( GetUnitNumber ( 84 , 4 ) ) , mat_cans , 200 ) ;
31887: LD_INT 84
31889: PPUSH
31890: LD_INT 4
31892: PPUSH
31893: CALL_OW 438
31897: PPUSH
31898: CALL_OW 274
31902: PPUSH
31903: LD_INT 1
31905: PPUSH
31906: LD_INT 200
31908: PPUSH
31909: CALL_OW 277
// PlaceUnitArea ( Kozlov , Ar_Base , false ) ;
31913: LD_EXP 22
31917: PPUSH
31918: LD_INT 17
31920: PPUSH
31921: LD_INT 0
31923: PPUSH
31924: CALL_OW 49
// Wait ( 1 ) ;
31928: LD_INT 1
31930: PPUSH
31931: CALL_OW 67
// ComEnterUnit ( Kozlov , ArDep1 ) ;
31935: LD_EXP 22
31939: PPUSH
31940: LD_INT 122
31942: PPUSH
31943: CALL_OW 120
// AddComChangeProfession ( Kozlov , class_engineer ) ;
31947: LD_EXP 22
31951: PPUSH
31952: LD_INT 2
31954: PPUSH
31955: CALL_OW 183
// AddComExitBuilding ( Kozlov ) ;
31959: LD_EXP 22
31963: PPUSH
31964: CALL_OW 182
// AddComBuild ( Kozlov , b_workshop , 78 , 12 , 3 ) ;
31968: LD_EXP 22
31972: PPUSH
31973: LD_INT 2
31975: PPUSH
31976: LD_INT 78
31978: PPUSH
31979: LD_INT 12
31981: PPUSH
31982: LD_INT 3
31984: PPUSH
31985: CALL_OW 205
// while GetBType ( GetUnitNumber ( 78 , 12 ) ) <> b_workshop do
31989: LD_INT 78
31991: PPUSH
31992: LD_INT 12
31994: PPUSH
31995: CALL_OW 438
31999: PPUSH
32000: CALL_OW 266
32004: PUSH
32005: LD_INT 2
32007: NONEQUAL
32008: IFFALSE 32019
// begin Wait ( 0 0$1 ) ;
32010: LD_INT 35
32012: PPUSH
32013: CALL_OW 67
// end ;
32017: GO 31989
// RemoveMcUnits ( Arabian_build_id , Arabian_Engineers ) ;
32019: LD_EXP 236
32023: PPUSH
32024: LD_EXP 81
32028: PPUSH
32029: CALL_OW 391
// ComRepairBuilding ( Arabian_Engineers , GetUnitNumber ( 78 , 12 ) ) ;
32033: LD_EXP 81
32037: PPUSH
32038: LD_INT 78
32040: PPUSH
32041: LD_INT 12
32043: PPUSH
32044: CALL_OW 438
32048: PPUSH
32049: CALL_OW 130
// WaitTask ( Kozlov , 1 ) ;
32053: LD_EXP 22
32057: PPUSH
32058: LD_INT 1
32060: PPUSH
32061: CALL 17823 0 2
// ComUpgrade ( GetUnitNumber ( 78 , 12 ) ) ;
32065: LD_INT 78
32067: PPUSH
32068: LD_INT 12
32070: PPUSH
32071: CALL_OW 438
32075: PPUSH
32076: CALL_OW 146
// repeat Wait ( 1 ) ;
32080: LD_INT 1
32082: PPUSH
32083: CALL_OW 67
// until GetBType ( GetUnitNumber ( 78 , 12 ) ) = b_factory ;
32087: LD_INT 78
32089: PPUSH
32090: LD_INT 12
32092: PPUSH
32093: CALL_OW 438
32097: PPUSH
32098: CALL_OW 266
32102: PUSH
32103: LD_INT 3
32105: EQUAL
32106: IFFALSE 32080
// ComRepairBuilding ( Kozlov ^ Arabian_Engineers , GetUnitNumber ( 78 , 12 ) ) ;
32108: LD_EXP 22
32112: PUSH
32113: LD_EXP 81
32117: ADD
32118: PPUSH
32119: LD_INT 78
32121: PPUSH
32122: LD_INT 12
32124: PPUSH
32125: CALL_OW 438
32129: PPUSH
32130: CALL_OW 130
// WaitTask ( Kozlov , 1 ) ;
32134: LD_EXP 22
32138: PPUSH
32139: LD_INT 1
32141: PPUSH
32142: CALL 17823 0 2
// if IsDead ( ArRuSibExt ) then
32146: LD_INT 116
32148: PPUSH
32149: CALL_OW 301
32153: IFFALSE 32279
// begin SetResourceType ( GetBase ( GetUnitNumber ( 84 , 4 ) ) , mat_siberit , 200 ) ;
32155: LD_INT 84
32157: PPUSH
32158: LD_INT 4
32160: PPUSH
32161: CALL_OW 438
32165: PPUSH
32166: CALL_OW 274
32170: PPUSH
32171: LD_INT 3
32173: PPUSH
32174: LD_INT 200
32176: PPUSH
32177: CALL_OW 277
// SetResourceType ( GetBase ( GetUnitNumber ( 84 , 4 ) ) , mat_cans , 200 ) ;
32181: LD_INT 84
32183: PPUSH
32184: LD_INT 4
32186: PPUSH
32187: CALL_OW 438
32191: PPUSH
32192: CALL_OW 274
32196: PPUSH
32197: LD_INT 1
32199: PPUSH
32200: LD_INT 200
32202: PPUSH
32203: CALL_OW 277
// while GetBType ( GetUnitNumber ( 74 , 12 ) ) <> b_ext_siberium do
32207: LD_INT 74
32209: PPUSH
32210: LD_INT 12
32212: PPUSH
32213: CALL_OW 438
32217: PPUSH
32218: CALL_OW 266
32222: PUSH
32223: LD_INT 21
32225: NONEQUAL
32226: IFFALSE 32259
// begin ComBuild ( Kozlov , b_ext_siberium , 74 , 12 , 1 ) ;
32228: LD_EXP 22
32232: PPUSH
32233: LD_INT 21
32235: PPUSH
32236: LD_INT 74
32238: PPUSH
32239: LD_INT 12
32241: PPUSH
32242: LD_INT 1
32244: PPUSH
32245: CALL_OW 145
// Wait ( 0.5 ) ;
32249: LD_REAL  5.00000000000000E-0001
32252: PPUSH
32253: CALL_OW 67
// end ;
32257: GO 32207
// ComRepairBuilding ( Arabian_Engineers , GetUnitNumber ( 74 , 12 ) ) ;
32259: LD_EXP 81
32263: PPUSH
32264: LD_INT 74
32266: PPUSH
32267: LD_INT 12
32269: PPUSH
32270: CALL_OW 438
32274: PPUSH
32275: CALL_OW 130
// end ; repeat Wait ( 2 ) ;
32279: LD_INT 2
32281: PPUSH
32282: CALL_OW 67
// until not ( HasTask ( Kozlov ) ) ;
32286: LD_EXP 22
32290: PPUSH
32291: CALL_OW 314
32295: NOT
32296: IFFALSE 32279
// WaitTask ( Kozlov , 1 ) ;
32298: LD_EXP 22
32302: PPUSH
32303: LD_INT 1
32305: PPUSH
32306: CALL 17823 0 2
// if IsDead ( ArRuTrackExt ) then
32310: LD_INT 141
32312: PPUSH
32313: CALL_OW 301
32317: IFFALSE 32443
// begin SetResourceType ( GetBase ( GetUnitNumber ( 84 , 4 ) ) , mat_siberit , 200 ) ;
32319: LD_INT 84
32321: PPUSH
32322: LD_INT 4
32324: PPUSH
32325: CALL_OW 438
32329: PPUSH
32330: CALL_OW 274
32334: PPUSH
32335: LD_INT 3
32337: PPUSH
32338: LD_INT 200
32340: PPUSH
32341: CALL_OW 277
// SetResourceType ( GetBase ( GetUnitNumber ( 84 , 4 ) ) , mat_cans , 200 ) ;
32345: LD_INT 84
32347: PPUSH
32348: LD_INT 4
32350: PPUSH
32351: CALL_OW 438
32355: PPUSH
32356: CALL_OW 274
32360: PPUSH
32361: LD_INT 1
32363: PPUSH
32364: LD_INT 200
32366: PPUSH
32367: CALL_OW 277
// while GetBType ( GetUnitNumber ( 81 , 12 ) ) <> b_ext_track do
32371: LD_INT 81
32373: PPUSH
32374: LD_INT 12
32376: PPUSH
32377: CALL_OW 438
32381: PPUSH
32382: CALL_OW 266
32386: PUSH
32387: LD_INT 16
32389: NONEQUAL
32390: IFFALSE 32423
// begin ComBuild ( Kozlov , b_ext_track , 81 , 12 , 4 ) ;
32392: LD_EXP 22
32396: PPUSH
32397: LD_INT 16
32399: PPUSH
32400: LD_INT 81
32402: PPUSH
32403: LD_INT 12
32405: PPUSH
32406: LD_INT 4
32408: PPUSH
32409: CALL_OW 145
// Wait ( 0.5 ) ;
32413: LD_REAL  5.00000000000000E-0001
32416: PPUSH
32417: CALL_OW 67
// end ;
32421: GO 32371
// ComRepairBuilding ( Arabian_Engineers , GetUnitNumber ( 81 , 12 ) ) ;
32423: LD_EXP 81
32427: PPUSH
32428: LD_INT 81
32430: PPUSH
32431: LD_INT 12
32433: PPUSH
32434: CALL_OW 438
32438: PPUSH
32439: CALL_OW 130
// end ; repeat Wait ( 2 ) ;
32443: LD_INT 2
32445: PPUSH
32446: CALL_OW 67
// until not ( HasTask ( Kozlov ) ) ;
32450: LD_EXP 22
32454: PPUSH
32455: CALL_OW 314
32459: NOT
32460: IFFALSE 32443
// WaitTask ( Kozlov , 1 ) ;
32462: LD_EXP 22
32466: PPUSH
32467: LD_INT 1
32469: PPUSH
32470: CALL 17823 0 2
// SetResourceType ( GetBase ( GetUnitNumber ( 78 , 12 ) ) , mat_siberit , 200 ) ;
32474: LD_INT 78
32476: PPUSH
32477: LD_INT 12
32479: PPUSH
32480: CALL_OW 438
32484: PPUSH
32485: CALL_OW 274
32489: PPUSH
32490: LD_INT 3
32492: PPUSH
32493: LD_INT 200
32495: PPUSH
32496: CALL_OW 277
// SetResourceType ( GetBase ( GetUnitNumber ( 78 , 12 ) ) , mat_cans , 200 ) ;
32500: LD_INT 78
32502: PPUSH
32503: LD_INT 12
32505: PPUSH
32506: CALL_OW 438
32510: PPUSH
32511: CALL_OW 274
32515: PPUSH
32516: LD_INT 1
32518: PPUSH
32519: LD_INT 200
32521: PPUSH
32522: CALL_OW 277
// ComEnterUnit ( Kozlov , GetUnitNumber ( 78 , 12 ) ) ;
32526: LD_EXP 22
32530: PPUSH
32531: LD_INT 78
32533: PPUSH
32534: LD_INT 12
32536: PPUSH
32537: CALL_OW 438
32541: PPUSH
32542: CALL_OW 120
// AddComChangeProfession ( Kozlov , class_mechanic ) ;
32546: LD_EXP 22
32550: PPUSH
32551: LD_INT 3
32553: PPUSH
32554: CALL_OW 183
// AddComConstruct ( GetUnitNumber ( 78 , 12 ) , ru_heavy_tracked , engine_siberite , control_computer , ru_siberium_rocket ) ;
32558: LD_INT 78
32560: PPUSH
32561: LD_INT 12
32563: PPUSH
32564: CALL_OW 438
32568: PPUSH
32569: LD_INT 24
32571: PPUSH
32572: LD_INT 3
32574: PPUSH
32575: LD_INT 3
32577: PPUSH
32578: LD_INT 48
32580: PPUSH
32581: CALL_OW 185
// AddMcUnits ( Arabian_build_id , Arabian_Engineers ) ;
32585: LD_EXP 236
32589: PPUSH
32590: LD_EXP 81
32594: PPUSH
32595: CALL_OW 390
// Wait ( 0 0$10 ) ;
32599: LD_INT 350
32601: PPUSH
32602: CALL_OW 67
// Starting_Construction_Time = tick ;
32606: LD_ADDR_EXP 231
32610: PUSH
32611: LD_OWVAR 1
32615: ST_TO_ADDR
// Construction_of_Arabian_rocket = true ;
32616: LD_ADDR_EXP 198
32620: PUSH
32621: LD_INT 1
32623: ST_TO_ADDR
// end ;
32624: END
// every 0 0$1 trigger Construction_of_Arabian_rocket and IsOk ( GetUnitNumber ( 78 , 12 ) ) marked 10 do var progress ;
32625: LD_EXP 198
32629: PUSH
32630: LD_INT 78
32632: PPUSH
32633: LD_INT 12
32635: PPUSH
32636: CALL_OW 438
32640: PPUSH
32641: CALL_OW 302
32645: AND
32646: IFFALSE 32856
32648: GO 32650
32650: DISABLE
32651: LD_INT 0
32653: PPUSH
// begin if ( tick < Arabian_siberite_attack_time ) and ( Number_of_Arabian_rocket = 1 ) and IsOk ( GetUnitNumber ( 78 , 12 ) ) and GetSide ( GetUnitNumber ( 78 , 12 ) ) = arabians then
32654: LD_OWVAR 1
32658: PUSH
32659: LD_EXP 213
32663: LESS
32664: PUSH
32665: LD_EXP 199
32669: PUSH
32670: LD_INT 1
32672: EQUAL
32673: AND
32674: PUSH
32675: LD_INT 78
32677: PPUSH
32678: LD_INT 12
32680: PPUSH
32681: CALL_OW 438
32685: PPUSH
32686: CALL_OW 302
32690: AND
32691: PUSH
32692: LD_INT 78
32694: PPUSH
32695: LD_INT 12
32697: PPUSH
32698: CALL_OW 438
32702: PPUSH
32703: CALL_OW 255
32707: PUSH
32708: LD_EXP 180
32712: EQUAL
32713: AND
32714: IFFALSE 32799
// begin progress = 100 * ( tick - Starting_Construction_Time ) / ( Arabian_siberite_attack_time - Starting_Construction_Time ) div 1 ;
32716: LD_ADDR_VAR 0 1
32720: PUSH
32721: LD_INT 100
32723: PUSH
32724: LD_OWVAR 1
32728: PUSH
32729: LD_EXP 231
32733: MINUS
32734: MUL
32735: PUSH
32736: LD_EXP 213
32740: PUSH
32741: LD_EXP 231
32745: MINUS
32746: DIVREAL
32747: PUSH
32748: LD_INT 1
32750: DIV
32751: ST_TO_ADDR
// if progress > 0 then
32752: LD_VAR 0 1
32756: PUSH
32757: LD_INT 0
32759: GREATER
32760: IFFALSE 32776
// progress = progress - 1 ;
32762: LD_ADDR_VAR 0 1
32766: PUSH
32767: LD_VAR 0 1
32771: PUSH
32772: LD_INT 1
32774: MINUS
32775: ST_TO_ADDR
// SetWorkingProgress ( GetUnitNumber ( 78 , 12 ) , progress ) ;
32776: LD_INT 78
32778: PPUSH
32779: LD_INT 12
32781: PPUSH
32782: CALL_OW 438
32786: PPUSH
32787: LD_VAR 0 1
32791: PPUSH
32792: CALL_OW 329
// enable ;
32796: ENABLE
// end else
32797: GO 32856
// if ( tick >= Arabian_siberite_attack_time ) and ( Number_of_Arabian_rocket = 1 ) and IsOk ( GetUnitNumber ( 78 , 12 ) ) then
32799: LD_OWVAR 1
32803: PUSH
32804: LD_EXP 213
32808: GREATEREQUAL
32809: PUSH
32810: LD_EXP 199
32814: PUSH
32815: LD_INT 1
32817: EQUAL
32818: AND
32819: PUSH
32820: LD_INT 78
32822: PPUSH
32823: LD_INT 12
32825: PPUSH
32826: CALL_OW 438
32830: PPUSH
32831: CALL_OW 302
32835: AND
32836: IFFALSE 32856
// begin SetWorkingProgress ( GetUnitNumber ( 78 , 12 ) , 99 ) ;
32838: LD_INT 78
32840: PPUSH
32841: LD_INT 12
32843: PPUSH
32844: CALL_OW 438
32848: PPUSH
32849: LD_INT 99
32851: PPUSH
32852: CALL_OW 329
// end ; end ;
32856: PPOPN 1
32858: END
// function SiberiteRocketAttack ( rocket , X , Y , Num_of_rocket ) ; var RocketDriver ; begin
32859: LD_INT 0
32861: PPUSH
32862: PPUSH
// ComAttackPlace ( rocket , X , Y ) ;
32863: LD_VAR 0 1
32867: PPUSH
32868: LD_VAR 0 2
32872: PPUSH
32873: LD_VAR 0 3
32877: PPUSH
32878: CALL_OW 116
// case Num_of_rocket of 1 :
32882: LD_VAR 0 4
32886: PUSH
32887: LD_INT 1
32889: DOUBLE
32890: EQUAL
32891: IFTRUE 32895
32893: GO 32910
32895: POP
// Say ( Kurt , D12-Kurt-1 ) ; 2 :
32896: LD_EXP 13
32900: PPUSH
32901: LD_STRING D12-Kurt-1
32903: PPUSH
32904: CALL_OW 88
32908: GO 32946
32910: LD_INT 2
32912: DOUBLE
32913: EQUAL
32914: IFTRUE 32918
32916: GO 32945
32918: POP
// begin Say ( Kurt , D12a-Kurt-1 ) ;
32919: LD_EXP 13
32923: PPUSH
32924: LD_STRING D12a-Kurt-1
32926: PPUSH
32927: CALL_OW 88
// Say ( Roth , D12a-Roth-1 ) ;
32931: LD_EXP 20
32935: PPUSH
32936: LD_STRING D12a-Roth-1
32938: PPUSH
32939: CALL_OW 88
// end ; end ;
32943: GO 32946
32945: POP
// end ;
32946: LD_VAR 0 5
32950: RET
// function FriendComing ; var list_of_q , selection ; begin
32951: LD_INT 0
32953: PPUSH
32954: PPUSH
32955: PPUSH
// if Add_Legion_Objectives then
32956: LD_EXP 230
32960: IFFALSE 32996
// begin Add_Legion_Objectives = false ;
32962: LD_ADDR_EXP 230
32966: PUSH
32967: LD_INT 0
32969: ST_TO_ADDR
// if Number_of_Arabian_rocket = 1 then
32970: LD_EXP 199
32974: PUSH
32975: LD_INT 1
32977: EQUAL
32978: IFFALSE 32989
// ChangeMissionObjectives ( MlegionOut ) else
32980: LD_STRING MlegionOut
32982: PPUSH
32983: CALL_OW 337
32987: GO 32996
// ChangeMissionObjectives ( MlegionDel ) ;
32989: LD_STRING MlegionDel
32991: PPUSH
32992: CALL_OW 337
// end ; Friend_has_come = true ;
32996: LD_ADDR_EXP 226
33000: PUSH
33001: LD_INT 1
33003: ST_TO_ADDR
// KillMc ( Arabian_reg_id ) ;
33004: LD_EXP 234
33008: PPUSH
33009: CALL_OW 387
// KillMc ( Arabian_def_id ) ;
33013: LD_EXP 235
33017: PPUSH
33018: CALL_OW 387
// KillMc ( Arabian_build_id ) ;
33022: LD_EXP 236
33026: PPUSH
33027: CALL_OW 387
// if SeeXY ( americans , 31 , 4 ) and not ( GetUnitNumber ( 31 , 4 ) > 0 ) then
33031: LD_EXP 176
33035: PPUSH
33036: LD_INT 31
33038: PPUSH
33039: LD_INT 4
33041: PPUSH
33042: CALL_OW 293
33046: PUSH
33047: LD_INT 31
33049: PPUSH
33050: LD_INT 4
33052: PPUSH
33053: CALL_OW 438
33057: PUSH
33058: LD_INT 0
33060: GREATER
33061: NOT
33062: AND
33063: IFFALSE 33085
// PlaceUnitXY ( Friend , 31 , 4 , false ) else
33065: LD_EXP 21
33069: PPUSH
33070: LD_INT 31
33072: PPUSH
33073: LD_INT 4
33075: PPUSH
33076: LD_INT 0
33078: PPUSH
33079: CALL_OW 48
33083: GO 33214
// if SeeXY ( americans , 88 , 7 ) and not ( GetUnitNumber ( 88 , 7 ) > 0 ) then
33085: LD_EXP 176
33089: PPUSH
33090: LD_INT 88
33092: PPUSH
33093: LD_INT 7
33095: PPUSH
33096: CALL_OW 293
33100: PUSH
33101: LD_INT 88
33103: PPUSH
33104: LD_INT 7
33106: PPUSH
33107: CALL_OW 438
33111: PUSH
33112: LD_INT 0
33114: GREATER
33115: NOT
33116: AND
33117: IFFALSE 33139
// PlaceUnitXY ( Friend , 88 , 7 , false ) else
33119: LD_EXP 21
33123: PPUSH
33124: LD_INT 88
33126: PPUSH
33127: LD_INT 7
33129: PPUSH
33130: LD_INT 0
33132: PPUSH
33133: CALL_OW 48
33137: GO 33214
// if SeeXY ( americans , 101 , 23 ) and not ( GetUnitNumber ( 101 , 23 ) > 0 ) then
33139: LD_EXP 176
33143: PPUSH
33144: LD_INT 101
33146: PPUSH
33147: LD_INT 23
33149: PPUSH
33150: CALL_OW 293
33154: PUSH
33155: LD_INT 101
33157: PPUSH
33158: LD_INT 23
33160: PPUSH
33161: CALL_OW 438
33165: PUSH
33166: LD_INT 0
33168: GREATER
33169: NOT
33170: AND
33171: IFFALSE 33193
// PlaceUnitXY ( Friend , 101 , 23 , false ) else
33173: LD_EXP 21
33177: PPUSH
33178: LD_INT 101
33180: PPUSH
33181: LD_INT 23
33183: PPUSH
33184: LD_INT 0
33186: PPUSH
33187: CALL_OW 48
33191: GO 33214
// PlaceUnitXYR ( Friend , 6 , 4 , 3 , false ) ;
33193: LD_EXP 21
33197: PPUSH
33198: LD_INT 6
33200: PPUSH
33201: LD_INT 4
33203: PPUSH
33204: LD_INT 3
33206: PPUSH
33207: LD_INT 0
33209: PPUSH
33210: CALL_OW 50
// ComMoveUnit ( Friend , JMM ) ;
33214: LD_EXP 21
33218: PPUSH
33219: LD_EXP 1
33223: PPUSH
33224: CALL_OW 112
// SetAttitude ( americans , arabians , att_friend , true ) ;
33228: LD_EXP 176
33232: PPUSH
33233: LD_EXP 180
33237: PPUSH
33238: LD_INT 1
33240: PPUSH
33241: LD_INT 1
33243: PPUSH
33244: CALL_OW 80
// All_Americans = FilterAllUnits ( [ [ f_side , americans ] , [ f_type , unit_human ] ] ) ;
33248: LD_ADDR_EXP 61
33252: PUSH
33253: LD_INT 22
33255: PUSH
33256: LD_EXP 176
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 21
33267: PUSH
33268: LD_INT 1
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PPUSH
33279: CALL_OW 69
33283: ST_TO_ADDR
// repeat Wait ( 0 0$1 ) ;
33284: LD_INT 35
33286: PPUSH
33287: CALL_OW 67
// until UnitFilter ( All_Americans , [ f_dist , Friend , 4 ] ) > 0 ;
33291: LD_EXP 61
33295: PPUSH
33296: LD_INT 91
33298: PUSH
33299: LD_EXP 21
33303: PUSH
33304: LD_INT 4
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: LIST
33311: PPUSH
33312: CALL_OW 72
33316: PUSH
33317: LD_INT 0
33319: GREATER
33320: IFFALSE 33284
// ComHold ( Friend ) ;
33322: LD_EXP 21
33326: PPUSH
33327: CALL_OW 140
// CenterNowOnUnits ( Friend ) ;
33331: LD_EXP 21
33335: PPUSH
33336: CALL_OW 87
// Wait ( 0 0$0.5 ) ;
33340: LD_INT 18
33342: PPUSH
33343: CALL_OW 67
// DialogueON ;
33347: CALL_OW 6
// Say ( JMM , D14-JMM-1 ) ;
33351: LD_EXP 1
33355: PPUSH
33356: LD_STRING D14-JMM-1
33358: PPUSH
33359: CALL_OW 88
// Say ( Friend , D14-Friend-1 ) ;
33363: LD_EXP 21
33367: PPUSH
33368: LD_STRING D14-Friend-1
33370: PPUSH
33371: CALL_OW 88
// Say ( JMM , D14-JMM-2 ) ;
33375: LD_EXP 1
33379: PPUSH
33380: LD_STRING D14-JMM-2
33382: PPUSH
33383: CALL_OW 88
// Say ( Friend , D14-Friend-2 ) ;
33387: LD_EXP 21
33391: PPUSH
33392: LD_STRING D14-Friend-2
33394: PPUSH
33395: CALL_OW 88
// Say ( JMM , D14-JMM-3 ) ;
33399: LD_EXP 1
33403: PPUSH
33404: LD_STRING D14-JMM-3
33406: PPUSH
33407: CALL_OW 88
// Say ( Friend , D14-Friend-3 ) ;
33411: LD_EXP 21
33415: PPUSH
33416: LD_STRING D14-Friend-3
33418: PPUSH
33419: CALL_OW 88
// list_of_q = [ 1 , 2 , 3 ] ;
33423: LD_ADDR_VAR 0 2
33427: PUSH
33428: LD_INT 1
33430: PUSH
33431: LD_INT 2
33433: PUSH
33434: LD_INT 3
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: LIST
33441: ST_TO_ADDR
// selection = SelectiveQuery ( Q14 , list_of_q ) ;
33442: LD_ADDR_VAR 0 3
33446: PUSH
33447: LD_STRING Q14
33449: PPUSH
33450: LD_VAR 0 2
33454: PPUSH
33455: CALL_OW 98
33459: ST_TO_ADDR
// case selection of 1 :
33460: LD_VAR 0 3
33464: PUSH
33465: LD_INT 1
33467: DOUBLE
33468: EQUAL
33469: IFTRUE 33473
33471: GO 33529
33473: POP
// begin Say ( JMM , D14a-JMM-1 ) ;
33474: LD_EXP 1
33478: PPUSH
33479: LD_STRING D14a-JMM-1
33481: PPUSH
33482: CALL_OW 88
// SetSide ( Friend , americans ) ;
33486: LD_EXP 21
33490: PPUSH
33491: LD_EXP 176
33495: PPUSH
33496: CALL_OW 235
// All_americans = All_americans ^ [ Friend ] ;
33500: LD_ADDR_EXP 61
33504: PUSH
33505: LD_EXP 61
33509: PUSH
33510: LD_EXP 21
33514: PUSH
33515: EMPTY
33516: LIST
33517: ADD
33518: ST_TO_ADDR
// Friend_Accepted = true ;
33519: LD_ADDR_EXP 219
33523: PUSH
33524: LD_INT 1
33526: ST_TO_ADDR
// end ; 2 :
33527: GO 33627
33529: LD_INT 2
33531: DOUBLE
33532: EQUAL
33533: IFTRUE 33537
33535: GO 33559
33537: POP
// begin Say ( JMM , D14b-JMM-1 ) ;
33538: LD_EXP 1
33542: PPUSH
33543: LD_STRING D14b-JMM-1
33545: PPUSH
33546: CALL_OW 88
// Wait ( 0 0$1 ) ;
33550: LD_INT 35
33552: PPUSH
33553: CALL_OW 67
// end ; 3 :
33557: GO 33627
33559: LD_INT 3
33561: DOUBLE
33562: EQUAL
33563: IFTRUE 33567
33565: GO 33626
33567: POP
// begin Say ( JMM , D14c-JMM-1 ) ;
33568: LD_EXP 1
33572: PPUSH
33573: LD_STRING D14c-JMM-1
33575: PPUSH
33576: CALL_OW 88
// Say ( Friend , D14c-Friend-1 ) ;
33580: LD_EXP 21
33584: PPUSH
33585: LD_STRING D14c-Friend-1
33587: PPUSH
33588: CALL_OW 88
// Say ( JMM , D14c-JMM-2 ) ;
33592: LD_EXP 1
33596: PPUSH
33597: LD_STRING D14c-JMM-2
33599: PPUSH
33600: CALL_OW 88
// SetAttitude ( americans , arabians , att_enemy , true ) ;
33604: LD_EXP 176
33608: PPUSH
33609: LD_EXP 180
33613: PPUSH
33614: LD_INT 2
33616: PPUSH
33617: LD_INT 1
33619: PPUSH
33620: CALL_OW 80
// end ; end ;
33624: GO 33627
33626: POP
// DialogueOFF ;
33627: CALL_OW 7
// if GetSide ( Friend ) = arabians then
33631: LD_EXP 21
33635: PPUSH
33636: CALL_OW 255
33640: PUSH
33641: LD_EXP 180
33645: EQUAL
33646: IFFALSE 33693
// begin ComMoveXY ( Friend , 4 , 3 ) ;
33648: LD_EXP 21
33652: PPUSH
33653: LD_INT 4
33655: PPUSH
33656: LD_INT 3
33658: PPUSH
33659: CALL_OW 111
// AddComHold ( Friend ) ;
33663: LD_EXP 21
33667: PPUSH
33668: CALL_OW 200
// WaitTask ( Friend , 1 ) ;
33672: LD_EXP 21
33676: PPUSH
33677: LD_INT 1
33679: PPUSH
33680: CALL 17823 0 2
// DestroyUnit ( Friend ) ;
33684: LD_EXP 21
33688: PPUSH
33689: CALL_OW 65
// end ; end ;
33693: LD_VAR 0 1
33697: RET
// export function ArabianPersonIsDead ; var unit_lives , Un , Unit_with_max_lives , X , Y , dir , cl , InUn , Units_to_stop , Mech_in_fact , ar_units ; begin
33698: LD_INT 0
33700: PPUSH
33701: PPUSH
33702: PPUSH
33703: PPUSH
33704: PPUSH
33705: PPUSH
33706: PPUSH
33707: PPUSH
33708: PPUSH
33709: PPUSH
33710: PPUSH
33711: PPUSH
// ar_units = FilterAllUnits ( [ [ f_side , arabians ] , [ f_type , unit_human ] , [ f_alive ] , f_not , [ f_nation , nation_nature ] ] ) diff [ Kozlov , Friend , Kurt ] ;
33712: LD_ADDR_VAR 0 12
33716: PUSH
33717: LD_INT 22
33719: PUSH
33720: LD_EXP 180
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: LD_INT 21
33731: PUSH
33732: LD_INT 1
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: LD_INT 51
33741: PUSH
33742: EMPTY
33743: LIST
33744: PUSH
33745: LD_INT 3
33747: PUSH
33748: LD_INT 23
33750: PUSH
33751: LD_INT 0
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: PPUSH
33765: CALL_OW 69
33769: PUSH
33770: LD_EXP 22
33774: PUSH
33775: LD_EXP 21
33779: PUSH
33780: LD_EXP 13
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: LIST
33789: DIFF
33790: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , arabians ] , [ f_type , unit_human ] , [ f_alive ] ] ) = 0 and not ( Friend_has_come ) then
33791: LD_INT 22
33793: PUSH
33794: LD_EXP 180
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: LD_INT 21
33805: PUSH
33806: LD_INT 1
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: PUSH
33813: LD_INT 51
33815: PUSH
33816: EMPTY
33817: LIST
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: LIST
33823: PPUSH
33824: CALL_OW 69
33828: PUSH
33829: LD_INT 0
33831: EQUAL
33832: PUSH
33833: LD_EXP 226
33837: NOT
33838: AND
33839: IFFALSE 33845
// FriendComing ;
33841: CALL 32951 0 0
// if ar_units = 8 then
33845: LD_VAR 0 12
33849: PUSH
33850: LD_INT 8
33852: EQUAL
33853: IFFALSE 33984
// begin Mech_in_fact = UnitsInside ( ArFact ) ;
33855: LD_ADDR_VAR 0 11
33859: PUSH
33860: LD_INT 117
33862: PPUSH
33863: CALL_OW 313
33867: ST_TO_ADDR
// ComExitBuilding ( Mech_in_fact ) ;
33868: LD_VAR 0 11
33872: PPUSH
33873: CALL_OW 122
// AddMcUnits ( Arabian_def_id , Mech_in_fact ) ;
33877: LD_EXP 235
33881: PPUSH
33882: LD_VAR 0 11
33886: PPUSH
33887: CALL_OW 390
// Wait ( 0 0$2 ) ;
33891: LD_INT 70
33893: PPUSH
33894: CALL_OW 67
// SetLives ( UnitFilter ( [ GetUnitNumber ( 89 , 21 ) , GetUnitNumber ( 93 , 21 ) , GetUnitNumber ( 89 , 18 ) , GetUnitNumber ( 92 , 24 ) , GetUnitNumber ( 44 , 3 ) , ] , [ f_side , arabians ] ) , 0 ) ;
33898: LD_INT 89
33900: PPUSH
33901: LD_INT 21
33903: PPUSH
33904: CALL_OW 438
33908: PUSH
33909: LD_INT 93
33911: PPUSH
33912: LD_INT 21
33914: PPUSH
33915: CALL_OW 438
33919: PUSH
33920: LD_INT 89
33922: PPUSH
33923: LD_INT 18
33925: PPUSH
33926: CALL_OW 438
33930: PUSH
33931: LD_INT 92
33933: PPUSH
33934: LD_INT 24
33936: PPUSH
33937: CALL_OW 438
33941: PUSH
33942: LD_INT 44
33944: PPUSH
33945: LD_INT 3
33947: PPUSH
33948: CALL_OW 438
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: PPUSH
33960: LD_INT 22
33962: PUSH
33963: LD_EXP 180
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PPUSH
33972: CALL_OW 72
33976: PPUSH
33977: LD_INT 0
33979: PPUSH
33980: CALL_OW 234
// end ; if ar_units = 4 then
33984: LD_VAR 0 12
33988: PUSH
33989: LD_INT 4
33991: EQUAL
33992: IFFALSE 35039
// begin SetAttitude ( arabians , russians , att_friend , true ) ;
33994: LD_EXP 180
33998: PPUSH
33999: LD_EXP 178
34003: PPUSH
34004: LD_INT 1
34006: PPUSH
34007: LD_INT 1
34009: PPUSH
34010: CALL_OW 80
// Units_to_stop = FilterAllUnits ( [ [ f_side , americans ] , [ f_side , arabians ] , [ f_ok ] ] ) ;
34014: LD_ADDR_VAR 0 10
34018: PUSH
34019: LD_INT 22
34021: PUSH
34022: LD_EXP 176
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: LD_INT 22
34033: PUSH
34034: LD_EXP 180
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PUSH
34043: LD_INT 50
34045: PUSH
34046: EMPTY
34047: LIST
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: LIST
34053: PPUSH
34054: CALL_OW 69
34058: ST_TO_ADDR
// ComStop ( Units_to_stop ) ;
34059: LD_VAR 0 10
34063: PPUSH
34064: CALL_OW 141
// SetLives ( [ GetUnitNumber ( 78 , 12 ) , Kozlov ] ^ UnitFilter ( [ GetUnitNumber ( 91 , 3 ) , GetUnitNumber ( 93 , 7 ) ] , [ f_side , arabians ] ) , 0 ) ;
34068: LD_INT 78
34070: PPUSH
34071: LD_INT 12
34073: PPUSH
34074: CALL_OW 438
34078: PUSH
34079: LD_EXP 22
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 91
34090: PPUSH
34091: LD_INT 3
34093: PPUSH
34094: CALL_OW 438
34098: PUSH
34099: LD_INT 93
34101: PPUSH
34102: LD_INT 7
34104: PPUSH
34105: CALL_OW 438
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PPUSH
34114: LD_INT 22
34116: PUSH
34117: LD_EXP 180
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: PPUSH
34126: CALL_OW 72
34130: ADD
34131: PPUSH
34132: LD_INT 0
34134: PPUSH
34135: CALL_OW 234
// SetResourceType ( GetBase ( ArDep1 ) , mat_cans , 20 ) ;
34139: LD_INT 122
34141: PPUSH
34142: CALL_OW 274
34146: PPUSH
34147: LD_INT 1
34149: PPUSH
34150: LD_INT 20
34152: PPUSH
34153: CALL_OW 277
// SetResourceType ( GetBase ( ArDep1 ) , mat_siberit , 10 ) ;
34157: LD_INT 122
34159: PPUSH
34160: CALL_OW 274
34164: PPUSH
34165: LD_INT 3
34167: PPUSH
34168: LD_INT 10
34170: PPUSH
34171: CALL_OW 277
// SetResourceType ( GetBase ( ArDep2 ) , mat_cans , 15 ) ;
34175: LD_INT 99
34177: PPUSH
34178: CALL_OW 274
34182: PPUSH
34183: LD_INT 1
34185: PPUSH
34186: LD_INT 15
34188: PPUSH
34189: CALL_OW 277
// SetResourceType ( GetBase ( ArDep2 ) , mat_siberit , 15 ) ;
34193: LD_INT 99
34195: PPUSH
34196: CALL_OW 274
34200: PPUSH
34201: LD_INT 3
34203: PPUSH
34204: LD_INT 15
34206: PPUSH
34207: CALL_OW 277
// Wait ( 1 ) ;
34211: LD_INT 1
34213: PPUSH
34214: CALL_OW 67
// unit_lives = GetLives ( ar_units [ 1 ] ) ;
34218: LD_ADDR_VAR 0 2
34222: PUSH
34223: LD_VAR 0 12
34227: PUSH
34228: LD_INT 1
34230: ARRAY
34231: PPUSH
34232: CALL_OW 256
34236: ST_TO_ADDR
// Unit_with_max_lives = ar_units [ 1 ] ;
34237: LD_ADDR_VAR 0 4
34241: PUSH
34242: LD_VAR 0 12
34246: PUSH
34247: LD_INT 1
34249: ARRAY
34250: ST_TO_ADDR
// for Un in ar_units do
34251: LD_ADDR_VAR 0 3
34255: PUSH
34256: LD_VAR 0 12
34260: PUSH
34261: FOR_IN
34262: IFFALSE 34308
// if GetLives ( Un ) > unit_lives then
34264: LD_VAR 0 3
34268: PPUSH
34269: CALL_OW 256
34273: PUSH
34274: LD_VAR 0 2
34278: GREATER
34279: IFFALSE 34306
// begin Unit_with_max_lives = Un ;
34281: LD_ADDR_VAR 0 4
34285: PUSH
34286: LD_VAR 0 3
34290: ST_TO_ADDR
// unit_lives = GetLives ( Un ) ;
34291: LD_ADDR_VAR 0 2
34295: PUSH
34296: LD_VAR 0 3
34300: PPUSH
34301: CALL_OW 256
34305: ST_TO_ADDR
// end ;
34306: GO 34261
34308: POP
34309: POP
// X = GetX ( Unit_with_max_lives ) ;
34310: LD_ADDR_VAR 0 5
34314: PUSH
34315: LD_VAR 0 4
34319: PPUSH
34320: CALL_OW 250
34324: ST_TO_ADDR
// Y = GetY ( Unit_with_max_lives ) ;
34325: LD_ADDR_VAR 0 6
34329: PUSH
34330: LD_VAR 0 4
34334: PPUSH
34335: CALL_OW 251
34339: ST_TO_ADDR
// dir = GetDir ( Unit_with_max_lives ) ;
34340: LD_ADDR_VAR 0 7
34344: PUSH
34345: LD_VAR 0 4
34349: PPUSH
34350: CALL_OW 254
34354: ST_TO_ADDR
// cl = GetClass ( Unit_with_max_lives ) ;
34355: LD_ADDR_VAR 0 8
34359: PUSH
34360: LD_VAR 0 4
34364: PPUSH
34365: CALL_OW 257
34369: ST_TO_ADDR
// if IsInUnit ( Unit_with_max_lives ) = 0 then
34370: LD_VAR 0 4
34374: PPUSH
34375: CALL_OW 310
34379: PUSH
34380: LD_INT 0
34382: EQUAL
34383: IFFALSE 34460
// begin DestroyUnit ( Unit_with_max_lives ) ;
34385: LD_VAR 0 4
34389: PPUSH
34390: CALL_OW 65
// SetLives ( Kurt , unit_lives ) ;
34394: LD_EXP 13
34398: PPUSH
34399: LD_VAR 0 2
34403: PPUSH
34404: CALL_OW 234
// SetClass ( Kurt , cl ) ;
34408: LD_EXP 13
34412: PPUSH
34413: LD_VAR 0 8
34417: PPUSH
34418: CALL_OW 336
// SetDir ( Kurt , dir ) ;
34422: LD_EXP 13
34426: PPUSH
34427: LD_VAR 0 7
34431: PPUSH
34432: CALL_OW 233
// PlaceUnitXY ( Kurt , X , Y , false ) ;
34436: LD_EXP 13
34440: PPUSH
34441: LD_VAR 0 5
34445: PPUSH
34446: LD_VAR 0 6
34450: PPUSH
34451: LD_INT 0
34453: PPUSH
34454: CALL_OW 48
// end else
34458: GO 34526
// begin InUn = IsInUnit ( Unit_with_max_lives ) ;
34460: LD_ADDR_VAR 0 9
34464: PUSH
34465: LD_VAR 0 4
34469: PPUSH
34470: CALL_OW 310
34474: ST_TO_ADDR
// DestroyUnit ( Unit_with_max_lives ) ;
34475: LD_VAR 0 4
34479: PPUSH
34480: CALL_OW 65
// SetLives ( Kurt , unit_lives ) ;
34484: LD_EXP 13
34488: PPUSH
34489: LD_VAR 0 2
34493: PPUSH
34494: CALL_OW 234
// SetClass ( Kurt , cl ) ;
34498: LD_EXP 13
34502: PPUSH
34503: LD_VAR 0 8
34507: PPUSH
34508: CALL_OW 336
// PlaceHumanInUnit ( Kurt , InUn ) ;
34512: LD_EXP 13
34516: PPUSH
34517: LD_VAR 0 9
34521: PPUSH
34522: CALL_OW 52
// end ; DialogueON ;
34526: CALL_OW 6
// Say ( JMM , D13-JMM-1 ) ;
34530: LD_EXP 1
34534: PPUSH
34535: LD_STRING D13-JMM-1
34537: PPUSH
34538: CALL_OW 88
// Say ( Kurt , D13-Kurt-1 ) ;
34542: LD_EXP 13
34546: PPUSH
34547: LD_STRING D13-Kurt-1
34549: PPUSH
34550: CALL_OW 88
// Say ( JMM , D13-JMM-2 ) ;
34554: LD_EXP 1
34558: PPUSH
34559: LD_STRING D13-JMM-2
34561: PPUSH
34562: CALL_OW 88
// if legion_cheated then
34566: LD_EXP 32
34570: IFFALSE 34606
// begin Say ( Kurt , D13-Kurt-2 ) ;
34572: LD_EXP 13
34576: PPUSH
34577: LD_STRING D13-Kurt-2
34579: PPUSH
34580: CALL_OW 88
// SetAttitude ( arabians , russians , att_enemy , true ) ;
34584: LD_EXP 180
34588: PPUSH
34589: LD_EXP 178
34593: PPUSH
34594: LD_INT 2
34596: PPUSH
34597: LD_INT 1
34599: PPUSH
34600: CALL_OW 80
// end else
34604: GO 35035
// begin if Really_Kurt then
34606: LD_EXP 205
34610: IFFALSE 34626
// Say ( Kurt , D13-Kurt-2a ) else
34612: LD_EXP 13
34616: PPUSH
34617: LD_STRING D13-Kurt-2a
34619: PPUSH
34620: CALL_OW 88
34624: GO 34638
// Say ( Kurt , D13-Kurt-2b ) ;
34626: LD_EXP 13
34630: PPUSH
34631: LD_STRING D13-Kurt-2b
34633: PPUSH
34634: CALL_OW 88
// Say ( JMM , D13-JMM-3 ) ;
34638: LD_EXP 1
34642: PPUSH
34643: LD_STRING D13-JMM-3
34645: PPUSH
34646: CALL_OW 88
// Say ( Kurt , D13-Kurt-3 ) ;
34650: LD_EXP 13
34654: PPUSH
34655: LD_STRING D13-Kurt-3
34657: PPUSH
34658: CALL_OW 88
// Say ( JMM , D13-JMM-4 ) ;
34662: LD_EXP 1
34666: PPUSH
34667: LD_STRING D13-JMM-4
34669: PPUSH
34670: CALL_OW 88
// ar_units = Kurt ^ ( FilterAllUnits ( [ [ f_side , arabians ] , [ f_type , unit_human ] , [ f_alive ] ] ) diff Kozlov ) ;
34674: LD_ADDR_VAR 0 12
34678: PUSH
34679: LD_EXP 13
34683: PUSH
34684: LD_INT 22
34686: PUSH
34687: LD_EXP 180
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: PUSH
34696: LD_INT 21
34698: PUSH
34699: LD_INT 1
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: LD_INT 51
34708: PUSH
34709: EMPTY
34710: LIST
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: LIST
34716: PPUSH
34717: CALL_OW 69
34721: PUSH
34722: LD_EXP 22
34726: DIFF
34727: ADD
34728: ST_TO_ADDR
// for Un in ar_units do
34729: LD_ADDR_VAR 0 3
34733: PUSH
34734: LD_VAR 0 12
34738: PUSH
34739: FOR_IN
34740: IFFALSE 34922
// begin if GetLives ( Un ) < 300 then
34742: LD_VAR 0 3
34746: PPUSH
34747: CALL_OW 256
34751: PUSH
34752: LD_INT 300
34754: LESS
34755: IFFALSE 34769
// SetLives ( Un , 300 ) ;
34757: LD_VAR 0 3
34761: PPUSH
34762: LD_INT 300
34764: PPUSH
34765: CALL_OW 234
// SetSide ( Un , americans ) ;
34769: LD_VAR 0 3
34773: PPUSH
34774: LD_EXP 176
34778: PPUSH
34779: CALL_OW 235
// if GetType ( IsInUnit ( Un ) ) = unit_vehicle then
34783: LD_VAR 0 3
34787: PPUSH
34788: CALL_OW 310
34792: PPUSH
34793: CALL_OW 247
34797: PUSH
34798: LD_INT 2
34800: EQUAL
34801: IFFALSE 34814
// ComExitVehicle ( Un ) else
34803: LD_VAR 0 3
34807: PPUSH
34808: CALL_OW 121
34812: GO 34843
// if GetType ( IsInUnit ( Un ) ) = unit_building then
34814: LD_VAR 0 3
34818: PPUSH
34819: CALL_OW 310
34823: PPUSH
34824: CALL_OW 247
34828: PUSH
34829: LD_INT 3
34831: EQUAL
34832: IFFALSE 34843
// ComExitBuilding ( Un ) ;
34834: LD_VAR 0 3
34838: PPUSH
34839: CALL_OW 122
// if not ( ( GetClass ( Un ) = class_apeman ) or ( GetClass ( Un ) = class_apeman_engineer ) or ( GetClass ( Un ) = class_apeman_kamikaze ) or ( GetClass ( Un ) = class_apeman_soldier ) ) then
34843: LD_VAR 0 3
34847: PPUSH
34848: CALL_OW 257
34852: PUSH
34853: LD_INT 12
34855: EQUAL
34856: PUSH
34857: LD_VAR 0 3
34861: PPUSH
34862: CALL_OW 257
34866: PUSH
34867: LD_INT 16
34869: EQUAL
34870: OR
34871: PUSH
34872: LD_VAR 0 3
34876: PPUSH
34877: CALL_OW 257
34881: PUSH
34882: LD_INT 17
34884: EQUAL
34885: OR
34886: PUSH
34887: LD_VAR 0 3
34891: PPUSH
34892: CALL_OW 257
34896: PUSH
34897: LD_INT 15
34899: EQUAL
34900: OR
34901: NOT
34902: IFFALSE 34920
// All_americans = All_americans ^ Un ;
34904: LD_ADDR_EXP 61
34908: PUSH
34909: LD_EXP 61
34913: PUSH
34914: LD_VAR 0 3
34918: ADD
34919: ST_TO_ADDR
// end ;
34920: GO 34739
34922: POP
34923: POP
// for Un in Arabian_buildings do
34924: LD_ADDR_VAR 0 3
34928: PUSH
34929: LD_EXP 88
34933: PUSH
34934: FOR_IN
34935: IFFALSE 35000
// begin if IsOk ( GetUnitNumber ( Un [ 2 ] , Un [ 3 ] ) ) then
34937: LD_VAR 0 3
34941: PUSH
34942: LD_INT 2
34944: ARRAY
34945: PPUSH
34946: LD_VAR 0 3
34950: PUSH
34951: LD_INT 3
34953: ARRAY
34954: PPUSH
34955: CALL_OW 438
34959: PPUSH
34960: CALL_OW 302
34964: IFFALSE 34998
// SetSide ( GetUnitNumber ( Un [ 2 ] , Un [ 3 ] ) , americans ) ;
34966: LD_VAR 0 3
34970: PUSH
34971: LD_INT 2
34973: ARRAY
34974: PPUSH
34975: LD_VAR 0 3
34979: PUSH
34980: LD_INT 3
34982: ARRAY
34983: PPUSH
34984: CALL_OW 438
34988: PPUSH
34989: LD_EXP 176
34993: PPUSH
34994: CALL_OW 235
// end ;
34998: GO 34934
35000: POP
35001: POP
// DialogueOFF ;
35002: CALL_OW 7
// SA_OnLegionJoin ;
35006: CALL 56008 0 0
// Hint ( Legion ) ;
35010: LD_STRING Legion
35012: PPUSH
35013: CALL_OW 339
// Wait ( 0 0$5 ) ;
35017: LD_INT 175
35019: PPUSH
35020: CALL_OW 67
// if not ( Friend_has_come ) then
35024: LD_EXP 226
35028: NOT
35029: IFFALSE 35035
// FriendComing ;
35031: CALL 32951 0 0
// end ; DialogueOFF ;
35035: CALL_OW 7
// end ; end ;
35039: LD_VAR 0 1
35043: RET
// export function ArVehicleConstructed ( veh ) ; begin
35044: LD_INT 0
35046: PPUSH
// if ( GetWeapon ( veh ) = ru_siberium_rocket ) then
35047: LD_VAR 0 1
35051: PPUSH
35052: CALL_OW 264
35056: PUSH
35057: LD_INT 48
35059: EQUAL
35060: IFFALSE 35218
// begin Wait ( 0 0$2 ) ;
35062: LD_INT 70
35064: PPUSH
35065: CALL_OW 67
// ComExitVehicle ( Kozlov ) ;
35069: LD_EXP 22
35073: PPUSH
35074: CALL_OW 121
// Wait ( 2 ) ;
35078: LD_INT 2
35080: PPUSH
35081: CALL_OW 67
// ComEnterUnit ( Kozlov , GetUnitNumber ( 78 , 12 ) ) ;
35085: LD_EXP 22
35089: PPUSH
35090: LD_INT 78
35092: PPUSH
35093: LD_INT 12
35095: PPUSH
35096: CALL_OW 438
35100: PPUSH
35101: CALL_OW 120
// AddComConstruct ( GetUnitNumber ( 78 , 12 ) , ru_heavy_tracked , engine_siberite , control_computer , ru_siberium_rocket ) ;
35105: LD_INT 78
35107: PPUSH
35108: LD_INT 12
35110: PPUSH
35111: CALL_OW 438
35115: PPUSH
35116: LD_INT 24
35118: PPUSH
35119: LD_INT 3
35121: PPUSH
35122: LD_INT 3
35124: PPUSH
35125: LD_INT 48
35127: PPUSH
35128: CALL_OW 185
// case Number_of_Arabian_rocket of 1 :
35132: LD_EXP 199
35136: PUSH
35137: LD_INT 1
35139: DOUBLE
35140: EQUAL
35141: IFTRUE 35145
35143: GO 35188
35145: POP
// begin Construction_of_Arabian_rocket = false ;
35146: LD_ADDR_EXP 198
35150: PUSH
35151: LD_INT 0
35153: ST_TO_ADDR
// Number_of_Arabian_rocket = Number_of_Arabian_rocket + 1 ;
35154: LD_ADDR_EXP 199
35158: PUSH
35159: LD_EXP 199
35163: PUSH
35164: LD_INT 1
35166: PLUS
35167: ST_TO_ADDR
// SiberiteRocketAttack ( veh , 46 , 64 , 1 ) ;
35168: LD_VAR 0 1
35172: PPUSH
35173: LD_INT 46
35175: PPUSH
35176: LD_INT 64
35178: PPUSH
35179: LD_INT 1
35181: PPUSH
35182: CALL 32859 0 4
// end ; 2 :
35186: GO 35218
35188: LD_INT 2
35190: DOUBLE
35191: EQUAL
35192: IFTRUE 35196
35194: GO 35217
35196: POP
// SiberiteRocketAttack ( veh , 155 , 60 , 2 ) ; end ;
35197: LD_VAR 0 1
35201: PPUSH
35202: LD_INT 155
35204: PPUSH
35205: LD_INT 60
35207: PPUSH
35208: LD_INT 2
35210: PPUSH
35211: CALL 32859 0 4
35215: GO 35218
35217: POP
// end ; end ; end_of_file
35218: LD_VAR 0 2
35222: RET
// function PrepareAndCreateVehicleR1P ( number , chassis , engine , control , weapon ) ; var veh , i , person ; begin
35223: LD_INT 0
35225: PPUSH
35226: PPUSH
35227: PPUSH
35228: PPUSH
// uc_side = russians1 ;
35229: LD_ADDR_OWVAR 20
35233: PUSH
35234: LD_EXP 179
35238: ST_TO_ADDR
// uc_direction = 0 ;
35239: LD_ADDR_OWVAR 24
35243: PUSH
35244: LD_INT 0
35246: ST_TO_ADDR
// uc_nation = nation_russian ;
35247: LD_ADDR_OWVAR 21
35251: PUSH
35252: LD_INT 3
35254: ST_TO_ADDR
// for i = 1 to number do
35255: LD_ADDR_VAR 0 8
35259: PUSH
35260: DOUBLE
35261: LD_INT 1
35263: DEC
35264: ST_TO_ADDR
35265: LD_VAR 0 1
35269: PUSH
35270: FOR_TO
35271: IFFALSE 35407
// begin vc_chassis = chassis ;
35273: LD_ADDR_OWVAR 37
35277: PUSH
35278: LD_VAR 0 2
35282: ST_TO_ADDR
// vc_control = control ;
35283: LD_ADDR_OWVAR 38
35287: PUSH
35288: LD_VAR 0 4
35292: ST_TO_ADDR
// vc_engine = engine ;
35293: LD_ADDR_OWVAR 39
35297: PUSH
35298: LD_VAR 0 3
35302: ST_TO_ADDR
// vc_weapon = weapon ;
35303: LD_ADDR_OWVAR 40
35307: PUSH
35308: LD_VAR 0 5
35312: ST_TO_ADDR
// veh = CreateVehicle ;
35313: LD_ADDR_VAR 0 7
35317: PUSH
35318: CALL_OW 45
35322: ST_TO_ADDR
// New_Patrol_Group = New_Patrol_Group ^ veh ;
35323: LD_ADDR_EXP 122
35327: PUSH
35328: LD_EXP 122
35332: PUSH
35333: LD_VAR 0 7
35337: ADD
35338: ST_TO_ADDR
// if control = control_manual then
35339: LD_VAR 0 4
35343: PUSH
35344: LD_INT 1
35346: EQUAL
35347: IFFALSE 35405
// begin PrepareMechanic ( 0 , 7 + Difficulty ) ;
35349: LD_INT 0
35351: PPUSH
35352: LD_INT 7
35354: PUSH
35355: LD_OWVAR 67
35359: PLUS
35360: PPUSH
35361: CALL_OW 383
// Person = CreateHuman ;
35365: LD_ADDR_VAR 0 9
35369: PUSH
35370: CALL_OW 44
35374: ST_TO_ADDR
// PlaceHumanInUnit ( Person , veh ) ;
35375: LD_VAR 0 9
35379: PPUSH
35380: LD_VAR 0 7
35384: PPUSH
35385: CALL_OW 52
// New_Patrol_Group = New_Patrol_Group ^ Person ;
35389: LD_ADDR_EXP 122
35393: PUSH
35394: LD_EXP 122
35398: PUSH
35399: LD_VAR 0 9
35403: ADD
35404: ST_TO_ADDR
// end ; end ;
35405: GO 35270
35407: POP
35408: POP
// end ;
35409: LD_VAR 0 6
35413: RET
// function PrepareAndCreateVehicleR1 ( number , chassis , engine , control , weapon ) ; var veh , i , person ; begin
35414: LD_INT 0
35416: PPUSH
35417: PPUSH
35418: PPUSH
35419: PPUSH
// uc_side = russians1 ;
35420: LD_ADDR_OWVAR 20
35424: PUSH
35425: LD_EXP 179
35429: ST_TO_ADDR
// uc_direction = 0 ;
35430: LD_ADDR_OWVAR 24
35434: PUSH
35435: LD_INT 0
35437: ST_TO_ADDR
// uc_nation = nation_russian ;
35438: LD_ADDR_OWVAR 21
35442: PUSH
35443: LD_INT 3
35445: ST_TO_ADDR
// for i = 1 to number do
35446: LD_ADDR_VAR 0 8
35450: PUSH
35451: DOUBLE
35452: LD_INT 1
35454: DEC
35455: ST_TO_ADDR
35456: LD_VAR 0 1
35460: PUSH
35461: FOR_TO
35462: IFFALSE 35598
// begin vc_chassis = chassis ;
35464: LD_ADDR_OWVAR 37
35468: PUSH
35469: LD_VAR 0 2
35473: ST_TO_ADDR
// vc_control = control ;
35474: LD_ADDR_OWVAR 38
35478: PUSH
35479: LD_VAR 0 4
35483: ST_TO_ADDR
// vc_engine = engine ;
35484: LD_ADDR_OWVAR 39
35488: PUSH
35489: LD_VAR 0 3
35493: ST_TO_ADDR
// vc_weapon = weapon ;
35494: LD_ADDR_OWVAR 40
35498: PUSH
35499: LD_VAR 0 5
35503: ST_TO_ADDR
// veh = CreateVehicle ;
35504: LD_ADDR_VAR 0 7
35508: PUSH
35509: CALL_OW 45
35513: ST_TO_ADDR
// R1_Attack_Group = R1_Attack_Group ^ veh ;
35514: LD_ADDR_EXP 118
35518: PUSH
35519: LD_EXP 118
35523: PUSH
35524: LD_VAR 0 7
35528: ADD
35529: ST_TO_ADDR
// if control = control_manual then
35530: LD_VAR 0 4
35534: PUSH
35535: LD_INT 1
35537: EQUAL
35538: IFFALSE 35596
// begin PrepareMechanic ( 0 , 7 + Difficulty ) ;
35540: LD_INT 0
35542: PPUSH
35543: LD_INT 7
35545: PUSH
35546: LD_OWVAR 67
35550: PLUS
35551: PPUSH
35552: CALL_OW 383
// Person = CreateHuman ;
35556: LD_ADDR_VAR 0 9
35560: PUSH
35561: CALL_OW 44
35565: ST_TO_ADDR
// PlaceHumanInUnit ( Person , veh ) ;
35566: LD_VAR 0 9
35570: PPUSH
35571: LD_VAR 0 7
35575: PPUSH
35576: CALL_OW 52
// R1_Attack_Group = R1_Attack_Group ^ Person ;
35580: LD_ADDR_EXP 118
35584: PUSH
35585: LD_EXP 118
35589: PUSH
35590: LD_VAR 0 9
35594: ADD
35595: ST_TO_ADDR
// end ; end ;
35596: GO 35461
35598: POP
35599: POP
// end ;
35600: LD_VAR 0 6
35604: RET
// function GetRandomVehicle ( time ) ; var Rand_Veh , Selected , Credits , Probab , engine ; begin
35605: LD_INT 0
35607: PPUSH
35608: PPUSH
35609: PPUSH
35610: PPUSH
35611: PPUSH
35612: PPUSH
// Selected = false ;
35613: LD_ADDR_VAR 0 4
35617: PUSH
35618: LD_INT 0
35620: ST_TO_ADDR
// if time <= 2 then
35621: LD_VAR 0 1
35625: PUSH
35626: LD_INT 2
35628: LESSEQUAL
35629: IFFALSE 35641
// engine = engine_combustion else
35631: LD_ADDR_VAR 0 7
35635: PUSH
35636: LD_INT 1
35638: ST_TO_ADDR
35639: GO 35649
// engine = engine_siberite ;
35641: LD_ADDR_VAR 0 7
35645: PUSH
35646: LD_INT 3
35648: ST_TO_ADDR
// repeat Probab = Rand ( 1 , 100 ) ;
35649: LD_ADDR_VAR 0 6
35653: PUSH
35654: LD_INT 1
35656: PPUSH
35657: LD_INT 100
35659: PPUSH
35660: CALL_OW 12
35664: ST_TO_ADDR
// case time of 1 :
35665: LD_VAR 0 1
35669: PUSH
35670: LD_INT 1
35672: DOUBLE
35673: EQUAL
35674: IFTRUE 35678
35676: GO 35716
35678: POP
// Rand_Veh = [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] ; 2 :
35679: LD_ADDR_VAR 0 3
35683: PUSH
35684: LD_INT 1
35686: PUSH
35687: LD_INT 2
35689: PUSH
35690: LD_INT 3
35692: PUSH
35693: LD_INT 4
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 1
35704: PPUSH
35705: LD_INT 4
35707: PPUSH
35708: CALL_OW 12
35712: ARRAY
35713: ST_TO_ADDR
35714: GO 35991
35716: LD_INT 2
35718: DOUBLE
35719: EQUAL
35720: IFTRUE 35724
35722: GO 35770
35724: POP
// Rand_Veh = [ 1 , 2 , 3 , 4 , 5 , 6 ] [ Rand ( 1 , 6 ) ] ; 3 :
35725: LD_ADDR_VAR 0 3
35729: PUSH
35730: LD_INT 1
35732: PUSH
35733: LD_INT 2
35735: PUSH
35736: LD_INT 3
35738: PUSH
35739: LD_INT 4
35741: PUSH
35742: LD_INT 5
35744: PUSH
35745: LD_INT 6
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: LIST
35752: LIST
35753: LIST
35754: LIST
35755: PUSH
35756: LD_INT 1
35758: PPUSH
35759: LD_INT 6
35761: PPUSH
35762: CALL_OW 12
35766: ARRAY
35767: ST_TO_ADDR
35768: GO 35991
35770: LD_INT 3
35772: DOUBLE
35773: EQUAL
35774: IFTRUE 35778
35776: GO 35820
35778: POP
// Rand_Veh = [ 3 , 4 , 5 , 6 , 7 ] [ Rand ( 1 , 5 ) ] ; 4 :
35779: LD_ADDR_VAR 0 3
35783: PUSH
35784: LD_INT 3
35786: PUSH
35787: LD_INT 4
35789: PUSH
35790: LD_INT 5
35792: PUSH
35793: LD_INT 6
35795: PUSH
35796: LD_INT 7
35798: PUSH
35799: EMPTY
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: PUSH
35806: LD_INT 1
35808: PPUSH
35809: LD_INT 5
35811: PPUSH
35812: CALL_OW 12
35816: ARRAY
35817: ST_TO_ADDR
35818: GO 35991
35820: LD_INT 4
35822: DOUBLE
35823: EQUAL
35824: IFTRUE 35828
35826: GO 35874
35828: POP
// Rand_Veh = [ 3 , 4 , 5 , 6 , 7 , 8 ] [ Rand ( 1 , 6 ) ] ; 5 :
35829: LD_ADDR_VAR 0 3
35833: PUSH
35834: LD_INT 3
35836: PUSH
35837: LD_INT 4
35839: PUSH
35840: LD_INT 5
35842: PUSH
35843: LD_INT 6
35845: PUSH
35846: LD_INT 7
35848: PUSH
35849: LD_INT 8
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: PUSH
35860: LD_INT 1
35862: PPUSH
35863: LD_INT 6
35865: PPUSH
35866: CALL_OW 12
35870: ARRAY
35871: ST_TO_ADDR
35872: GO 35991
35874: LD_INT 5
35876: DOUBLE
35877: EQUAL
35878: IFTRUE 35882
35880: GO 35928
35882: POP
// Rand_Veh = [ 4 , 5 , 6 , 7 , 8 , 9 ] [ Rand ( 1 , 6 ) ] ; 6 :
35883: LD_ADDR_VAR 0 3
35887: PUSH
35888: LD_INT 4
35890: PUSH
35891: LD_INT 5
35893: PUSH
35894: LD_INT 6
35896: PUSH
35897: LD_INT 7
35899: PUSH
35900: LD_INT 8
35902: PUSH
35903: LD_INT 9
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: PUSH
35914: LD_INT 1
35916: PPUSH
35917: LD_INT 6
35919: PPUSH
35920: CALL_OW 12
35924: ARRAY
35925: ST_TO_ADDR
35926: GO 35991
35928: LD_INT 6
35930: DOUBLE
35931: EQUAL
35932: IFTRUE 35936
35934: GO 35990
35936: POP
// Rand_Veh = [ 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 ] [ Rand ( 1 , 8 ) ] ; end ;
35937: LD_ADDR_VAR 0 3
35941: PUSH
35942: LD_INT 5
35944: PUSH
35945: LD_INT 6
35947: PUSH
35948: LD_INT 7
35950: PUSH
35951: LD_INT 8
35953: PUSH
35954: LD_INT 9
35956: PUSH
35957: LD_INT 10
35959: PUSH
35960: LD_INT 11
35962: PUSH
35963: LD_INT 12
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: LIST
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 1
35978: PPUSH
35979: LD_INT 8
35981: PPUSH
35982: CALL_OW 12
35986: ARRAY
35987: ST_TO_ADDR
35988: GO 35991
35990: POP
// case Rand_Veh of 1 :
35991: LD_VAR 0 3
35995: PUSH
35996: LD_INT 1
35998: DOUBLE
35999: EQUAL
36000: IFTRUE 36004
36002: GO 36084
36004: POP
// begin if ( time <= 1 and Probab < 60 ) or ( time <= 3 and Probab < 20 ) then
36005: LD_VAR 0 1
36009: PUSH
36010: LD_INT 1
36012: LESSEQUAL
36013: PUSH
36014: LD_VAR 0 6
36018: PUSH
36019: LD_INT 60
36021: LESS
36022: AND
36023: PUSH
36024: LD_VAR 0 1
36028: PUSH
36029: LD_INT 3
36031: LESSEQUAL
36032: PUSH
36033: LD_VAR 0 6
36037: PUSH
36038: LD_INT 20
36040: LESS
36041: AND
36042: OR
36043: IFFALSE 36082
// begin Selected = true ;
36045: LD_ADDR_VAR 0 4
36049: PUSH
36050: LD_INT 1
36052: ST_TO_ADDR
// Credits = 3 ;
36053: LD_ADDR_VAR 0 5
36057: PUSH
36058: LD_INT 3
36060: ST_TO_ADDR
// PrepareAndCreateVehicleR1 ( 1 , ru_medium_tracked , engine , control_computer , ru_heavy_machine_gun ) ;
36061: LD_INT 1
36063: PPUSH
36064: LD_INT 22
36066: PPUSH
36067: LD_VAR 0 7
36071: PPUSH
36072: LD_INT 3
36074: PPUSH
36075: LD_INT 42
36077: PPUSH
36078: CALL 35414 0 5
// end ; end ; 2 :
36082: GO 36771
36084: LD_INT 2
36086: DOUBLE
36087: EQUAL
36088: IFTRUE 36092
36090: GO 36172
36092: POP
// begin if ( time <= 1 and Probab < 80 ) or ( time <= 3 and Probab < 30 ) then
36093: LD_VAR 0 1
36097: PUSH
36098: LD_INT 1
36100: LESSEQUAL
36101: PUSH
36102: LD_VAR 0 6
36106: PUSH
36107: LD_INT 80
36109: LESS
36110: AND
36111: PUSH
36112: LD_VAR 0 1
36116: PUSH
36117: LD_INT 3
36119: LESSEQUAL
36120: PUSH
36121: LD_VAR 0 6
36125: PUSH
36126: LD_INT 30
36128: LESS
36129: AND
36130: OR
36131: IFFALSE 36170
// begin Selected = true ;
36133: LD_ADDR_VAR 0 4
36137: PUSH
36138: LD_INT 1
36140: ST_TO_ADDR
// Credits = 4 ;
36141: LD_ADDR_VAR 0 5
36145: PUSH
36146: LD_INT 4
36148: ST_TO_ADDR
// PrepareAndCreateVehicleR1 ( 1 , ru_heavy_tracked , engine , control_computer , ru_heavy_machine_gun ) ;
36149: LD_INT 1
36151: PPUSH
36152: LD_INT 24
36154: PPUSH
36155: LD_VAR 0 7
36159: PPUSH
36160: LD_INT 3
36162: PPUSH
36163: LD_INT 42
36165: PPUSH
36166: CALL 35414 0 5
// end ; end ; 4 :
36170: GO 36771
36172: LD_INT 4
36174: DOUBLE
36175: EQUAL
36176: IFTRUE 36180
36178: GO 36280
36180: POP
// begin if ( time <= 1 and Probab < 100 ) or ( time <= 3 and Probab < 80 ) or ( time > 3 and Probab < 40 ) then
36181: LD_VAR 0 1
36185: PUSH
36186: LD_INT 1
36188: LESSEQUAL
36189: PUSH
36190: LD_VAR 0 6
36194: PUSH
36195: LD_INT 100
36197: LESS
36198: AND
36199: PUSH
36200: LD_VAR 0 1
36204: PUSH
36205: LD_INT 3
36207: LESSEQUAL
36208: PUSH
36209: LD_VAR 0 6
36213: PUSH
36214: LD_INT 80
36216: LESS
36217: AND
36218: OR
36219: PUSH
36220: LD_VAR 0 1
36224: PUSH
36225: LD_INT 3
36227: GREATER
36228: PUSH
36229: LD_VAR 0 6
36233: PUSH
36234: LD_INT 40
36236: LESS
36237: AND
36238: OR
36239: IFFALSE 36278
// begin Selected = true ;
36241: LD_ADDR_VAR 0 4
36245: PUSH
36246: LD_INT 1
36248: ST_TO_ADDR
// Credits = 5 ;
36249: LD_ADDR_VAR 0 5
36253: PUSH
36254: LD_INT 5
36256: ST_TO_ADDR
// PrepareAndCreateVehicleR1 ( 1 , ru_medium_tracked , engine , control_computer , ru_gatling_gun ) end ;
36257: LD_INT 1
36259: PPUSH
36260: LD_INT 22
36262: PPUSH
36263: LD_VAR 0 7
36267: PPUSH
36268: LD_INT 3
36270: PPUSH
36271: LD_INT 43
36273: PPUSH
36274: CALL 35414 0 5
// end ; 3 :
36278: GO 36771
36280: LD_INT 3
36282: DOUBLE
36283: EQUAL
36284: IFTRUE 36288
36286: GO 36368
36288: POP
// begin if ( time <= 1 and Probab < 100 ) or ( time <= 3 and Probab < 40 ) then
36289: LD_VAR 0 1
36293: PUSH
36294: LD_INT 1
36296: LESSEQUAL
36297: PUSH
36298: LD_VAR 0 6
36302: PUSH
36303: LD_INT 100
36305: LESS
36306: AND
36307: PUSH
36308: LD_VAR 0 1
36312: PUSH
36313: LD_INT 3
36315: LESSEQUAL
36316: PUSH
36317: LD_VAR 0 6
36321: PUSH
36322: LD_INT 40
36324: LESS
36325: AND
36326: OR
36327: IFFALSE 36366
// begin Selected = true ;
36329: LD_ADDR_VAR 0 4
36333: PUSH
36334: LD_INT 1
36336: ST_TO_ADDR
// Credits = 5 ;
36337: LD_ADDR_VAR 0 5
36341: PUSH
36342: LD_INT 5
36344: ST_TO_ADDR
// PrepareAndCreateVehicleR1 ( 1 , ru_medium_tracked , engine , control_computer , ru_gun ) end ;
36345: LD_INT 1
36347: PPUSH
36348: LD_INT 22
36350: PPUSH
36351: LD_VAR 0 7
36355: PPUSH
36356: LD_INT 3
36358: PPUSH
36359: LD_INT 44
36361: PPUSH
36362: CALL 35414 0 5
// end ; 5 :
36366: GO 36771
36368: LD_INT 5
36370: DOUBLE
36371: EQUAL
36372: IFTRUE 36376
36374: GO 36416
36376: POP
// begin Selected = true ;
36377: LD_ADDR_VAR 0 4
36381: PUSH
36382: LD_INT 1
36384: ST_TO_ADDR
// Credits = 7 ;
36385: LD_ADDR_VAR 0 5
36389: PUSH
36390: LD_INT 7
36392: ST_TO_ADDR
// PrepareAndCreateVehicleR1 ( 1 , ru_heavy_tracked , engine , control_computer , ru_gatling_gun ) end ; 6 :
36393: LD_INT 1
36395: PPUSH
36396: LD_INT 24
36398: PPUSH
36399: LD_VAR 0 7
36403: PPUSH
36404: LD_INT 3
36406: PPUSH
36407: LD_INT 43
36409: PPUSH
36410: CALL 35414 0 5
36414: GO 36771
36416: LD_INT 6
36418: DOUBLE
36419: EQUAL
36420: IFTRUE 36424
36422: GO 36524
36424: POP
// begin if ( time <= 1 and Probab < 100 ) or ( time <= 3 and Probab < 60 ) or ( time > 3 and Probab < 20 ) then
36425: LD_VAR 0 1
36429: PUSH
36430: LD_INT 1
36432: LESSEQUAL
36433: PUSH
36434: LD_VAR 0 6
36438: PUSH
36439: LD_INT 100
36441: LESS
36442: AND
36443: PUSH
36444: LD_VAR 0 1
36448: PUSH
36449: LD_INT 3
36451: LESSEQUAL
36452: PUSH
36453: LD_VAR 0 6
36457: PUSH
36458: LD_INT 60
36460: LESS
36461: AND
36462: OR
36463: PUSH
36464: LD_VAR 0 1
36468: PUSH
36469: LD_INT 3
36471: GREATER
36472: PUSH
36473: LD_VAR 0 6
36477: PUSH
36478: LD_INT 20
36480: LESS
36481: AND
36482: OR
36483: IFFALSE 36522
// begin Selected = true ;
36485: LD_ADDR_VAR 0 4
36489: PUSH
36490: LD_INT 1
36492: ST_TO_ADDR
// Credits = 7 ;
36493: LD_ADDR_VAR 0 5
36497: PUSH
36498: LD_INT 7
36500: ST_TO_ADDR
// PrepareAndCreateVehicleR1 ( 1 , ru_heavy_tracked , engine , control_computer , ru_gun ) end ;
36501: LD_INT 1
36503: PPUSH
36504: LD_INT 24
36506: PPUSH
36507: LD_VAR 0 7
36511: PPUSH
36512: LD_INT 3
36514: PPUSH
36515: LD_INT 44
36517: PPUSH
36518: CALL 35414 0 5
// end ; 7 :
36522: GO 36771
36524: LD_INT 7
36526: DOUBLE
36527: EQUAL
36528: IFTRUE 36532
36530: GO 36572
36532: POP
// begin Selected = true ;
36533: LD_ADDR_VAR 0 4
36537: PUSH
36538: LD_INT 1
36540: ST_TO_ADDR
// Credits = 11 ;
36541: LD_ADDR_VAR 0 5
36545: PUSH
36546: LD_INT 11
36548: ST_TO_ADDR
// PrepareAndCreateVehicleR1 ( 1 , ru_heavy_tracked , engine , control_computer , ru_heavy_gun ) ;
36549: LD_INT 1
36551: PPUSH
36552: LD_INT 24
36554: PPUSH
36555: LD_VAR 0 7
36559: PPUSH
36560: LD_INT 3
36562: PPUSH
36563: LD_INT 46
36565: PPUSH
36566: CALL 35414 0 5
// end ; 8 :
36570: GO 36771
36572: LD_INT 8
36574: DOUBLE
36575: EQUAL
36576: IFTRUE 36580
36578: GO 36620
36580: POP
// begin Selected = true ;
36581: LD_ADDR_VAR 0 4
36585: PUSH
36586: LD_INT 1
36588: ST_TO_ADDR
// Credits = 9 ;
36589: LD_ADDR_VAR 0 5
36593: PUSH
36594: LD_INT 9
36596: ST_TO_ADDR
// PrepareAndCreateVehicleR1 ( 1 , ru_medium_tracked , engine , control_computer , ru_rocket_launcher ) ;
36597: LD_INT 1
36599: PPUSH
36600: LD_INT 22
36602: PPUSH
36603: LD_VAR 0 7
36607: PPUSH
36608: LD_INT 3
36610: PPUSH
36611: LD_INT 45
36613: PPUSH
36614: CALL 35414 0 5
// end ; 9 :
36618: GO 36771
36620: LD_INT 9
36622: DOUBLE
36623: EQUAL
36624: IFTRUE 36628
36626: GO 36668
36628: POP
// begin Selected = true ;
36629: LD_ADDR_VAR 0 4
36633: PUSH
36634: LD_INT 1
36636: ST_TO_ADDR
// Credits = 11 ;
36637: LD_ADDR_VAR 0 5
36641: PUSH
36642: LD_INT 11
36644: ST_TO_ADDR
// PrepareAndCreateVehicleR1 ( 1 , ru_heavy_tracked , engine , control_computer , ru_rocket_launcher ) ;
36645: LD_INT 1
36647: PPUSH
36648: LD_INT 24
36650: PPUSH
36651: LD_VAR 0 7
36655: PPUSH
36656: LD_INT 3
36658: PPUSH
36659: LD_INT 45
36661: PPUSH
36662: CALL 35414 0 5
// end ; 10 , 11 :
36666: GO 36771
36668: LD_INT 10
36670: DOUBLE
36671: EQUAL
36672: IFTRUE 36682
36674: LD_INT 11
36676: DOUBLE
36677: EQUAL
36678: IFTRUE 36682
36680: GO 36722
36682: POP
// begin Selected = true ;
36683: LD_ADDR_VAR 0 4
36687: PUSH
36688: LD_INT 1
36690: ST_TO_ADDR
// Credits = 15 ;
36691: LD_ADDR_VAR 0 5
36695: PUSH
36696: LD_INT 15
36698: ST_TO_ADDR
// PrepareAndCreateVehicleR1 ( 1 , ru_heavy_tracked , engine , control_computer , ru_rocket ) ;
36699: LD_INT 1
36701: PPUSH
36702: LD_INT 24
36704: PPUSH
36705: LD_VAR 0 7
36709: PPUSH
36710: LD_INT 3
36712: PPUSH
36713: LD_INT 47
36715: PPUSH
36716: CALL 35414 0 5
// end ; 12 :
36720: GO 36771
36722: LD_INT 12
36724: DOUBLE
36725: EQUAL
36726: IFTRUE 36730
36728: GO 36770
36730: POP
// begin Selected = true ;
36731: LD_ADDR_VAR 0 4
36735: PUSH
36736: LD_INT 1
36738: ST_TO_ADDR
// Credits = 15 ;
36739: LD_ADDR_VAR 0 5
36743: PUSH
36744: LD_INT 15
36746: ST_TO_ADDR
// PrepareAndCreateVehicleR1 ( 1 , ru_heavy_tracked , engine , control_computer , ru_rocket ) ;
36747: LD_INT 1
36749: PPUSH
36750: LD_INT 24
36752: PPUSH
36753: LD_VAR 0 7
36757: PPUSH
36758: LD_INT 3
36760: PPUSH
36761: LD_INT 47
36763: PPUSH
36764: CALL 35414 0 5
// end ; end ;
36768: GO 36771
36770: POP
// until Selected ;
36771: LD_VAR 0 4
36775: IFFALSE 35649
// Result = Credits ;
36777: LD_ADDR_VAR 0 2
36781: PUSH
36782: LD_VAR 0 5
36786: ST_TO_ADDR
// end ;
36787: LD_VAR 0 2
36791: RET
// function GenerateGroup ( Credits , time ) ; var Used_Credits ; begin
36792: LD_INT 0
36794: PPUSH
36795: PPUSH
// repeat Used_Credits = Used_Credits + GetRandomVehicle ( time ) ;
36796: LD_ADDR_VAR 0 4
36800: PUSH
36801: LD_VAR 0 4
36805: PUSH
36806: LD_VAR 0 2
36810: PPUSH
36811: CALL 35605 0 1
36815: PLUS
36816: ST_TO_ADDR
// until Credits < Used_Credits ;
36817: LD_VAR 0 1
36821: PUSH
36822: LD_VAR 0 4
36826: LESS
36827: IFFALSE 36796
// result = Used_Credits ;
36829: LD_ADDR_VAR 0 3
36833: PUSH
36834: LD_VAR 0 4
36838: ST_TO_ADDR
// end ;
36839: LD_VAR 0 3
36843: RET
// function GenerateAttackingGroup ; var Power , Next_time , Number_of_units , Person , veh , i , Used_Credits , Credits , Strength_of_attack ; begin
36844: LD_INT 0
36846: PPUSH
36847: PPUSH
36848: PPUSH
36849: PPUSH
36850: PPUSH
36851: PPUSH
36852: PPUSH
36853: PPUSH
36854: PPUSH
36855: PPUSH
// Power = Rand ( 1 , 3 ) ;
36856: LD_ADDR_VAR 0 2
36860: PUSH
36861: LD_INT 1
36863: PPUSH
36864: LD_INT 3
36866: PPUSH
36867: CALL_OW 12
36871: ST_TO_ADDR
// Number_of_units = Rand ( 1 , 2 ) ;
36872: LD_ADDR_VAR 0 4
36876: PUSH
36877: LD_INT 1
36879: PPUSH
36880: LD_INT 2
36882: PPUSH
36883: CALL_OW 12
36887: ST_TO_ADDR
// R1_Attack_Group = [ ] ;
36888: LD_ADDR_EXP 118
36892: PUSH
36893: EMPTY
36894: ST_TO_ADDR
// if tick < 6 6$0 then
36895: LD_OWVAR 1
36899: PUSH
36900: LD_INT 12600
36902: LESS
36903: IFFALSE 37247
// begin case R1_Attack_Counter of 1 :
36905: LD_EXP 116
36909: PUSH
36910: LD_INT 1
36912: DOUBLE
36913: EQUAL
36914: IFTRUE 36918
36916: GO 36984
36918: POP
// begin PrepareAndCreateVehicleR1 ( 1 , ru_medium_tracked , engine_combustion , control_computer , ru_gun ) ;
36919: LD_INT 1
36921: PPUSH
36922: LD_INT 22
36924: PPUSH
36925: LD_INT 1
36927: PPUSH
36928: LD_INT 3
36930: PPUSH
36931: LD_INT 44
36933: PPUSH
36934: CALL 35414 0 5
// PrepareAndCreateVehicleR1 ( 1 , ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ) ;
36938: LD_INT 1
36940: PPUSH
36941: LD_INT 22
36943: PPUSH
36944: LD_INT 1
36946: PPUSH
36947: LD_INT 3
36949: PPUSH
36950: LD_INT 43
36952: PPUSH
36953: CALL 35414 0 5
// R1_attack_time = [ 0 0$40 , 0 0$30 , 0 0$20 ] [ Difficulty ] ;
36957: LD_ADDR_EXP 114
36961: PUSH
36962: LD_INT 1400
36964: PUSH
36965: LD_INT 1050
36967: PUSH
36968: LD_INT 700
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: LIST
36975: PUSH
36976: LD_OWVAR 67
36980: ARRAY
36981: ST_TO_ADDR
// end ; 2 :
36982: GO 37245
36984: LD_INT 2
36986: DOUBLE
36987: EQUAL
36988: IFTRUE 36992
36990: GO 37056
36992: POP
// begin PrepareAndCreateVehicleR1 ( [ 2 , 3 , 4 ] [ Difficulty ] , ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ) ;
36993: LD_INT 2
36995: PUSH
36996: LD_INT 3
36998: PUSH
36999: LD_INT 4
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: LIST
37006: PUSH
37007: LD_OWVAR 67
37011: ARRAY
37012: PPUSH
37013: LD_INT 22
37015: PPUSH
37016: LD_INT 1
37018: PPUSH
37019: LD_INT 3
37021: PPUSH
37022: LD_INT 43
37024: PPUSH
37025: CALL 35414 0 5
// R1_attack_time = [ 3 3$0 , 3 3$00 , 3 3$00 ] [ Difficulty ] ;
37029: LD_ADDR_EXP 114
37033: PUSH
37034: LD_INT 6300
37036: PUSH
37037: LD_INT 6300
37039: PUSH
37040: LD_INT 6300
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: LIST
37047: PUSH
37048: LD_OWVAR 67
37052: ARRAY
37053: ST_TO_ADDR
// end ; 3 :
37054: GO 37245
37056: LD_INT 3
37058: DOUBLE
37059: EQUAL
37060: IFTRUE 37064
37062: GO 37130
37064: POP
// begin PrepareAndCreateVehicleR1 ( 2 , ru_heavy_tracked , engine_combustion , control_computer , ru_gun ) ;
37065: LD_INT 2
37067: PPUSH
37068: LD_INT 24
37070: PPUSH
37071: LD_INT 1
37073: PPUSH
37074: LD_INT 3
37076: PPUSH
37077: LD_INT 44
37079: PPUSH
37080: CALL 35414 0 5
// PrepareAndCreateVehicleR1 ( 1 , ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ) ;
37084: LD_INT 1
37086: PPUSH
37087: LD_INT 22
37089: PPUSH
37090: LD_INT 1
37092: PPUSH
37093: LD_INT 3
37095: PPUSH
37096: LD_INT 43
37098: PPUSH
37099: CALL 35414 0 5
// R1_attack_time = [ 2 2$50 , 2 2$20 , 2 2$0 ] [ Difficulty ] ;
37103: LD_ADDR_EXP 114
37107: PUSH
37108: LD_INT 5950
37110: PUSH
37111: LD_INT 4900
37113: PUSH
37114: LD_INT 4200
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: LIST
37121: PUSH
37122: LD_OWVAR 67
37126: ARRAY
37127: ST_TO_ADDR
// end ; else
37128: GO 37245
37130: POP
// begin Credits = [ 8 , 11 , 14 ] [ Difficulty ] ;
37131: LD_ADDR_VAR 0 9
37135: PUSH
37136: LD_INT 8
37138: PUSH
37139: LD_INT 11
37141: PUSH
37142: LD_INT 14
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: LIST
37149: PUSH
37150: LD_OWVAR 67
37154: ARRAY
37155: ST_TO_ADDR
// Used_Credits = GenerateGroup ( Credits + R1_Attack_Overflow , 1 ) ;
37156: LD_ADDR_VAR 0 8
37160: PUSH
37161: LD_VAR 0 9
37165: PUSH
37166: LD_EXP 191
37170: PLUS
37171: PPUSH
37172: LD_INT 1
37174: PPUSH
37175: CALL 36792 0 2
37179: ST_TO_ADDR
// R1_Attack_Overflow = ( Credits + R1_Attack_Overflow ) - Used_Credits ;
37180: LD_ADDR_EXP 191
37184: PUSH
37185: LD_VAR 0 9
37189: PUSH
37190: LD_EXP 191
37194: PLUS
37195: PUSH
37196: LD_VAR 0 8
37200: MINUS
37201: ST_TO_ADDR
// R1_attack_time = [ 2 2$50 , 2 2$20 , 2 2$0 ] [ Difficulty ] ;
37202: LD_ADDR_EXP 114
37206: PUSH
37207: LD_INT 5950
37209: PUSH
37210: LD_INT 4900
37212: PUSH
37213: LD_INT 4200
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: LIST
37220: PUSH
37221: LD_OWVAR 67
37225: ARRAY
37226: ST_TO_ADDR
// if R1_attack_time > 6 6$0 then
37227: LD_EXP 114
37231: PUSH
37232: LD_INT 12600
37234: GREATER
37235: IFFALSE 37245
// R1_Attack_Counter = 0 ;
37237: LD_ADDR_EXP 116
37241: PUSH
37242: LD_INT 0
37244: ST_TO_ADDR
// end ; end ; end else
37245: GO 38079
// if tick < 14 14$0 then
37247: LD_OWVAR 1
37251: PUSH
37252: LD_INT 29400
37254: LESS
37255: IFFALSE 37487
// begin case R1_Attack_Counter of 1 :
37257: LD_EXP 116
37261: PUSH
37262: LD_INT 1
37264: DOUBLE
37265: EQUAL
37266: IFTRUE 37270
37268: GO 37370
37270: POP
// begin case Difficulty of 1 , 2 :
37271: LD_OWVAR 67
37275: PUSH
37276: LD_INT 1
37278: DOUBLE
37279: EQUAL
37280: IFTRUE 37290
37282: LD_INT 2
37284: DOUBLE
37285: EQUAL
37286: IFTRUE 37290
37288: GO 37312
37290: POP
// PrepareAndCreateVehicleR1 ( 3 , ru_heavy_tracked , engine_siberite , control_computer , ru_gun ) ; 3 :
37291: LD_INT 3
37293: PPUSH
37294: LD_INT 24
37296: PPUSH
37297: LD_INT 3
37299: PPUSH
37300: LD_INT 3
37302: PPUSH
37303: LD_INT 44
37305: PPUSH
37306: CALL 35414 0 5
37310: GO 37343
37312: LD_INT 3
37314: DOUBLE
37315: EQUAL
37316: IFTRUE 37320
37318: GO 37342
37320: POP
// PrepareAndCreateVehicleR1 ( 1 , ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ) ; end ;
37321: LD_INT 1
37323: PPUSH
37324: LD_INT 22
37326: PPUSH
37327: LD_INT 3
37329: PPUSH
37330: LD_INT 3
37332: PPUSH
37333: LD_INT 45
37335: PPUSH
37336: CALL 35414 0 5
37340: GO 37343
37342: POP
// R1_attack_time = [ 1 1$50 , 1 1$20 , 1 1$30 ] [ Difficulty ] ;
37343: LD_ADDR_EXP 114
37347: PUSH
37348: LD_INT 3850
37350: PUSH
37351: LD_INT 2800
37353: PUSH
37354: LD_INT 3150
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: LIST
37361: PUSH
37362: LD_OWVAR 67
37366: ARRAY
37367: ST_TO_ADDR
// end ; else
37368: GO 37485
37370: POP
// begin Credits = [ 14 , 18 , 22 ] [ Difficulty ] ;
37371: LD_ADDR_VAR 0 9
37375: PUSH
37376: LD_INT 14
37378: PUSH
37379: LD_INT 18
37381: PUSH
37382: LD_INT 22
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: LIST
37389: PUSH
37390: LD_OWVAR 67
37394: ARRAY
37395: ST_TO_ADDR
// Used_Credits = GenerateGroup ( Credits + R1_Attack_Overflow , 2 ) ;
37396: LD_ADDR_VAR 0 8
37400: PUSH
37401: LD_VAR 0 9
37405: PUSH
37406: LD_EXP 191
37410: PLUS
37411: PPUSH
37412: LD_INT 2
37414: PPUSH
37415: CALL 36792 0 2
37419: ST_TO_ADDR
// R1_Attack_Overflow = ( Credits + R1_Attack_Overflow ) - Used_Credits ;
37420: LD_ADDR_EXP 191
37424: PUSH
37425: LD_VAR 0 9
37429: PUSH
37430: LD_EXP 191
37434: PLUS
37435: PUSH
37436: LD_VAR 0 8
37440: MINUS
37441: ST_TO_ADDR
// R1_attack_time = [ 3 3$30 , 3 3$0 , 2 2$40 ] [ Difficulty ] ;
37442: LD_ADDR_EXP 114
37446: PUSH
37447: LD_INT 7350
37449: PUSH
37450: LD_INT 6300
37452: PUSH
37453: LD_INT 5600
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: LIST
37460: PUSH
37461: LD_OWVAR 67
37465: ARRAY
37466: ST_TO_ADDR
// if R1_attack_time > 14 14$0 then
37467: LD_EXP 114
37471: PUSH
37472: LD_INT 29400
37474: GREATER
37475: IFFALSE 37485
// R1_Attack_Counter = 0 ;
37477: LD_ADDR_EXP 116
37481: PUSH
37482: LD_INT 0
37484: ST_TO_ADDR
// end ; end ; end else
37485: GO 38079
// if tick < 25 25$0 then
37487: LD_OWVAR 1
37491: PUSH
37492: LD_INT 52500
37494: LESS
37495: IFFALSE 37613
// begin Credits = [ 8 , 10 , 12 ] [ Difficulty ] ;
37497: LD_ADDR_VAR 0 9
37501: PUSH
37502: LD_INT 8
37504: PUSH
37505: LD_INT 10
37507: PUSH
37508: LD_INT 12
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: LIST
37515: PUSH
37516: LD_OWVAR 67
37520: ARRAY
37521: ST_TO_ADDR
// Used_Credits = GenerateGroup ( Credits + R1_Attack_Overflow , 3 ) ;
37522: LD_ADDR_VAR 0 8
37526: PUSH
37527: LD_VAR 0 9
37531: PUSH
37532: LD_EXP 191
37536: PLUS
37537: PPUSH
37538: LD_INT 3
37540: PPUSH
37541: CALL 36792 0 2
37545: ST_TO_ADDR
// R1_Attack_Overflow = ( Credits + R1_Attack_Overflow ) - Used_Credits ;
37546: LD_ADDR_EXP 191
37550: PUSH
37551: LD_VAR 0 9
37555: PUSH
37556: LD_EXP 191
37560: PLUS
37561: PUSH
37562: LD_VAR 0 8
37566: MINUS
37567: ST_TO_ADDR
// R1_attack_time = [ 2 2$0 , 1 1$50 , 1 1$40 ] [ Difficulty ] ;
37568: LD_ADDR_EXP 114
37572: PUSH
37573: LD_INT 4200
37575: PUSH
37576: LD_INT 3850
37578: PUSH
37579: LD_INT 3500
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: LIST
37586: PUSH
37587: LD_OWVAR 67
37591: ARRAY
37592: ST_TO_ADDR
// if R1_attack_time > 25 25$0 then
37593: LD_EXP 114
37597: PUSH
37598: LD_INT 52500
37600: GREATER
37601: IFFALSE 37611
// R1_Attack_Counter = 0 ;
37603: LD_ADDR_EXP 116
37607: PUSH
37608: LD_INT 0
37610: ST_TO_ADDR
// end else
37611: GO 38079
// if tick < Rus_Attack_time then
37613: LD_OWVAR 1
37617: PUSH
37618: LD_EXP 130
37622: LESS
37623: IFFALSE 37723
// begin Credits = [ 14 , 18 , 22 ] [ Difficulty ] ;
37625: LD_ADDR_VAR 0 9
37629: PUSH
37630: LD_INT 14
37632: PUSH
37633: LD_INT 18
37635: PUSH
37636: LD_INT 22
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: LIST
37643: PUSH
37644: LD_OWVAR 67
37648: ARRAY
37649: ST_TO_ADDR
// Used_Credits = GenerateGroup ( Credits + R1_Attack_Overflow , 4 ) ;
37650: LD_ADDR_VAR 0 8
37654: PUSH
37655: LD_VAR 0 9
37659: PUSH
37660: LD_EXP 191
37664: PLUS
37665: PPUSH
37666: LD_INT 4
37668: PPUSH
37669: CALL 36792 0 2
37673: ST_TO_ADDR
// R1_Attack_Overflow = ( Credits + R1_Attack_Overflow ) - Used_Credits ;
37674: LD_ADDR_EXP 191
37678: PUSH
37679: LD_VAR 0 9
37683: PUSH
37684: LD_EXP 191
37688: PLUS
37689: PUSH
37690: LD_VAR 0 8
37694: MINUS
37695: ST_TO_ADDR
// R1_attack_time = [ 4 4$0 , 3 3$30 , 3 3$10 ] [ Difficulty ] ;
37696: LD_ADDR_EXP 114
37700: PUSH
37701: LD_INT 8400
37703: PUSH
37704: LD_INT 7350
37706: PUSH
37707: LD_INT 6650
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: LIST
37714: PUSH
37715: LD_OWVAR 67
37719: ARRAY
37720: ST_TO_ADDR
// end else
37721: GO 38079
// if tick < Stevens_Coming_Time then
37723: LD_OWVAR 1
37727: PUSH
37728: LD_EXP 200
37732: LESS
37733: IFFALSE 37833
// begin Credits = [ 18 , 22 , 26 ] [ Difficulty ] ;
37735: LD_ADDR_VAR 0 9
37739: PUSH
37740: LD_INT 18
37742: PUSH
37743: LD_INT 22
37745: PUSH
37746: LD_INT 26
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: LIST
37753: PUSH
37754: LD_OWVAR 67
37758: ARRAY
37759: ST_TO_ADDR
// Used_Credits = GenerateGroup ( Credits + R1_Attack_Overflow , 5 ) ;
37760: LD_ADDR_VAR 0 8
37764: PUSH
37765: LD_VAR 0 9
37769: PUSH
37770: LD_EXP 191
37774: PLUS
37775: PPUSH
37776: LD_INT 5
37778: PPUSH
37779: CALL 36792 0 2
37783: ST_TO_ADDR
// R1_Attack_Overflow = ( Credits + R1_Attack_Overflow ) - Used_Credits ;
37784: LD_ADDR_EXP 191
37788: PUSH
37789: LD_VAR 0 9
37793: PUSH
37794: LD_EXP 191
37798: PLUS
37799: PUSH
37800: LD_VAR 0 8
37804: MINUS
37805: ST_TO_ADDR
// R1_attack_time = [ 4 4$3 , 4 4$0 , 3 3$30 ] [ Difficulty ] ;
37806: LD_ADDR_EXP 114
37810: PUSH
37811: LD_INT 8505
37813: PUSH
37814: LD_INT 8400
37816: PUSH
37817: LD_INT 7350
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: LIST
37824: PUSH
37825: LD_OWVAR 67
37829: ARRAY
37830: ST_TO_ADDR
// end else
37831: GO 38079
// if tick < Alaskite_Bomb_Time then
37833: LD_OWVAR 1
37837: PUSH
37838: LD_EXP 212
37842: LESS
37843: IFFALSE 37943
// begin Credits = [ 22 , 27 , 32 ] [ Difficulty ] ;
37845: LD_ADDR_VAR 0 9
37849: PUSH
37850: LD_INT 22
37852: PUSH
37853: LD_INT 27
37855: PUSH
37856: LD_INT 32
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: LIST
37863: PUSH
37864: LD_OWVAR 67
37868: ARRAY
37869: ST_TO_ADDR
// Used_Credits = GenerateGroup ( Credits + R1_Attack_Overflow , 5 ) ;
37870: LD_ADDR_VAR 0 8
37874: PUSH
37875: LD_VAR 0 9
37879: PUSH
37880: LD_EXP 191
37884: PLUS
37885: PPUSH
37886: LD_INT 5
37888: PPUSH
37889: CALL 36792 0 2
37893: ST_TO_ADDR
// R1_Attack_Overflow = ( Credits + R1_Attack_Overflow ) - Used_Credits ;
37894: LD_ADDR_EXP 191
37898: PUSH
37899: LD_VAR 0 9
37903: PUSH
37904: LD_EXP 191
37908: PLUS
37909: PUSH
37910: LD_VAR 0 8
37914: MINUS
37915: ST_TO_ADDR
// R1_attack_time = [ 4 4$0 , 3 3$30 , 3 3$10 ] [ Difficulty ] ;
37916: LD_ADDR_EXP 114
37920: PUSH
37921: LD_INT 8400
37923: PUSH
37924: LD_INT 7350
37926: PUSH
37927: LD_INT 6650
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: LIST
37934: PUSH
37935: LD_OWVAR 67
37939: ARRAY
37940: ST_TO_ADDR
// end else
37941: GO 38079
// if tick > Alaskite_Bomb_Time then
37943: LD_OWVAR 1
37947: PUSH
37948: LD_EXP 212
37952: GREATER
37953: IFFALSE 38079
// begin Strength_of_attack = Rand ( 1 , 7 ) ;
37955: LD_ADDR_VAR 0 10
37959: PUSH
37960: LD_INT 1
37962: PPUSH
37963: LD_INT 7
37965: PPUSH
37966: CALL_OW 12
37970: ST_TO_ADDR
// Credits = [ 6 , 8 , 10 ] [ Difficulty ] * Strength_of_attack ;
37971: LD_ADDR_VAR 0 9
37975: PUSH
37976: LD_INT 6
37978: PUSH
37979: LD_INT 8
37981: PUSH
37982: LD_INT 10
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: LIST
37989: PUSH
37990: LD_OWVAR 67
37994: ARRAY
37995: PUSH
37996: LD_VAR 0 10
38000: MUL
38001: ST_TO_ADDR
// Used_Credits = GenerateGroup ( Credits + R1_Attack_Overflow , 6 ) ;
38002: LD_ADDR_VAR 0 8
38006: PUSH
38007: LD_VAR 0 9
38011: PUSH
38012: LD_EXP 191
38016: PLUS
38017: PPUSH
38018: LD_INT 6
38020: PPUSH
38021: CALL 36792 0 2
38025: ST_TO_ADDR
// R1_Attack_Overflow = ( Credits + R1_Attack_Overflow ) - Used_Credits ;
38026: LD_ADDR_EXP 191
38030: PUSH
38031: LD_VAR 0 9
38035: PUSH
38036: LD_EXP 191
38040: PLUS
38041: PUSH
38042: LD_VAR 0 8
38046: MINUS
38047: ST_TO_ADDR
// R1_attack_time = [ 1 1$0 , 1 1$0 , 1 1$0 ] [ Difficulty ] * Strength_of_attack ;
38048: LD_ADDR_EXP 114
38052: PUSH
38053: LD_INT 2100
38055: PUSH
38056: LD_INT 2100
38058: PUSH
38059: LD_INT 2100
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: LIST
38066: PUSH
38067: LD_OWVAR 67
38071: ARRAY
38072: PUSH
38073: LD_VAR 0 10
38077: MUL
38078: ST_TO_ADDR
// end ; end ;
38079: LD_VAR 0 1
38083: RET
// function GeneratePatrolingGroup ; begin
38084: LD_INT 0
38086: PPUSH
// New_Patrol_Group = [ ] ;
38087: LD_ADDR_EXP 122
38091: PUSH
38092: EMPTY
38093: ST_TO_ADDR
// if R1_Attack_Counter > 2 then
38094: LD_EXP 116
38098: PUSH
38099: LD_INT 2
38101: GREATER
38102: IFFALSE 38150
// begin R1Patrol_group = UnitFilter ( R1Patrol_group , [ f_alive ] ) ;
38104: LD_ADDR_EXP 123
38108: PUSH
38109: LD_EXP 123
38113: PPUSH
38114: LD_INT 51
38116: PUSH
38117: EMPTY
38118: LIST
38119: PPUSH
38120: CALL_OW 72
38124: ST_TO_ADDR
// PrepareAndCreateVehicleR1P ( 1 - R1Patrol_Group , ru_medium_tracked , engine_siberite , control_computer , ru_heavy_machine_gun ) ;
38125: LD_INT 1
38127: PUSH
38128: LD_EXP 123
38132: MINUS
38133: PPUSH
38134: LD_INT 22
38136: PPUSH
38137: LD_INT 3
38139: PPUSH
38140: LD_INT 3
38142: PPUSH
38143: LD_INT 42
38145: PPUSH
38146: CALL 35223 0 5
// end ; end ;
38150: LD_VAR 0 1
38154: RET
// export function Rus1Attack ; var Un , Am_units , Attack_area , Area_changed , Hlp_R1_Attack_Group , Hlp_New_Patrol_Group , temp_list , spawn_at_Arrival1 ; begin
38155: LD_INT 0
38157: PPUSH
38158: PPUSH
38159: PPUSH
38160: PPUSH
38161: PPUSH
38162: PPUSH
38163: PPUSH
38164: PPUSH
38165: PPUSH
// Hlp_R1_Attack_Group = R1_Attack_Group ;
38166: LD_ADDR_VAR 0 6
38170: PUSH
38171: LD_EXP 118
38175: ST_TO_ADDR
// Hlp_New_Patrol_Group = New_Patrol_Group ;
38176: LD_ADDR_VAR 0 7
38180: PUSH
38181: LD_EXP 122
38185: ST_TO_ADDR
// if tick < 12 12$0 then
38186: LD_OWVAR 1
38190: PUSH
38191: LD_INT 25200
38193: LESS
38194: IFFALSE 38270
// begin for Un in Hlp_R1_Attack_Group do
38196: LD_ADDR_VAR 0 2
38200: PUSH
38201: LD_VAR 0 6
38205: PUSH
38206: FOR_IN
38207: IFFALSE 38226
// PlaceUnitArea ( Un , Arrival1 , false ) ;
38209: LD_VAR 0 2
38213: PPUSH
38214: LD_INT 24
38216: PPUSH
38217: LD_INT 0
38219: PPUSH
38220: CALL_OW 49
38224: GO 38206
38226: POP
38227: POP
// for Un in Hlp_New_Patrol_Group do
38228: LD_ADDR_VAR 0 2
38232: PUSH
38233: LD_VAR 0 7
38237: PUSH
38238: FOR_IN
38239: IFFALSE 38258
// PlaceUnitArea ( Un , Arrival1 , false ) ;
38241: LD_VAR 0 2
38245: PPUSH
38246: LD_INT 24
38248: PPUSH
38249: LD_INT 0
38251: PPUSH
38252: CALL_OW 49
38256: GO 38238
38258: POP
38259: POP
// spawn_at_Arrival1 = true ;
38260: LD_ADDR_VAR 0 9
38264: PUSH
38265: LD_INT 1
38267: ST_TO_ADDR
// end else
38268: GO 38428
// begin if Rand ( 0 , 1 ) then
38270: LD_INT 0
38272: PPUSH
38273: LD_INT 1
38275: PPUSH
38276: CALL_OW 12
38280: IFFALSE 38356
// begin for Un in Hlp_R1_Attack_Group do
38282: LD_ADDR_VAR 0 2
38286: PUSH
38287: LD_VAR 0 6
38291: PUSH
38292: FOR_IN
38293: IFFALSE 38312
// PlaceUnitArea ( Un , Arrival1 , false ) ;
38295: LD_VAR 0 2
38299: PPUSH
38300: LD_INT 24
38302: PPUSH
38303: LD_INT 0
38305: PPUSH
38306: CALL_OW 49
38310: GO 38292
38312: POP
38313: POP
// for Un in Hlp_New_Patrol_Group do
38314: LD_ADDR_VAR 0 2
38318: PUSH
38319: LD_VAR 0 7
38323: PUSH
38324: FOR_IN
38325: IFFALSE 38344
// PlaceUnitArea ( Un , Arrival1 , false ) ;
38327: LD_VAR 0 2
38331: PPUSH
38332: LD_INT 24
38334: PPUSH
38335: LD_INT 0
38337: PPUSH
38338: CALL_OW 49
38342: GO 38324
38344: POP
38345: POP
// spawn_at_Arrival1 = true ;
38346: LD_ADDR_VAR 0 9
38350: PUSH
38351: LD_INT 1
38353: ST_TO_ADDR
// end else
38354: GO 38428
// begin for Un in Hlp_R1_Attack_Group do
38356: LD_ADDR_VAR 0 2
38360: PUSH
38361: LD_VAR 0 6
38365: PUSH
38366: FOR_IN
38367: IFFALSE 38386
// PlaceUnitArea ( Un , Arrival2 , false ) ;
38369: LD_VAR 0 2
38373: PPUSH
38374: LD_INT 25
38376: PPUSH
38377: LD_INT 0
38379: PPUSH
38380: CALL_OW 49
38384: GO 38366
38386: POP
38387: POP
// for Un in Hlp_New_Patrol_Group do
38388: LD_ADDR_VAR 0 2
38392: PUSH
38393: LD_VAR 0 7
38397: PUSH
38398: FOR_IN
38399: IFFALSE 38418
// PlaceUnitArea ( Un , Arrival2 , false ) ;
38401: LD_VAR 0 2
38405: PPUSH
38406: LD_INT 25
38408: PPUSH
38409: LD_INT 0
38411: PPUSH
38412: CALL_OW 49
38416: GO 38398
38418: POP
38419: POP
// spawn_at_Arrival1 = false ;
38420: LD_ADDR_VAR 0 9
38424: PUSH
38425: LD_INT 0
38427: ST_TO_ADDR
// end ; end ; Main_R1_Attack_Group = Main_R1_Attack_Group ^ Hlp_R1_Attack_Group ;
38428: LD_ADDR_EXP 119
38432: PUSH
38433: LD_EXP 119
38437: PUSH
38438: LD_VAR 0 6
38442: ADD
38443: ST_TO_ADDR
// Main_R1_Attack_Group = UnitFilter ( Main_R1_Attack_Group , [ f_alive ] ) ;
38444: LD_ADDR_EXP 119
38448: PUSH
38449: LD_EXP 119
38453: PPUSH
38454: LD_INT 51
38456: PUSH
38457: EMPTY
38458: LIST
38459: PPUSH
38460: CALL_OW 72
38464: ST_TO_ADDR
// Area_changed = false ;
38465: LD_ADDR_VAR 0 5
38469: PUSH
38470: LD_INT 0
38472: ST_TO_ADDR
// if FilterUnitsInArea ( JMM_Hill , [ f_side , americans ] ) > 0 then
38473: LD_INT 2
38475: PPUSH
38476: LD_INT 22
38478: PUSH
38479: LD_EXP 176
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PPUSH
38488: CALL_OW 70
38492: PUSH
38493: LD_INT 0
38495: GREATER
38496: IFFALSE 38516
// begin Area_changed = true ;
38498: LD_ADDR_VAR 0 5
38502: PUSH
38503: LD_INT 1
38505: ST_TO_ADDR
// attack_area = JMM_Hill ;
38506: LD_ADDR_VAR 0 4
38510: PUSH
38511: LD_INT 2
38513: ST_TO_ADDR
// end else
38514: GO 38901
// if FilterUnitsInArea ( Am_Base , [ f_side , americans ] ) > 0 then
38516: LD_INT 1
38518: PPUSH
38519: LD_INT 22
38521: PUSH
38522: LD_EXP 176
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PPUSH
38531: CALL_OW 70
38535: PUSH
38536: LD_INT 0
38538: GREATER
38539: IFFALSE 38559
// begin Area_changed = true ;
38541: LD_ADDR_VAR 0 5
38545: PUSH
38546: LD_INT 1
38548: ST_TO_ADDR
// attack_area = Am_Base ;
38549: LD_ADDR_VAR 0 4
38553: PUSH
38554: LD_INT 1
38556: ST_TO_ADDR
// end else
38557: GO 38901
// if FilterUnitsInArea ( Ar_Base , [ f_side , americans ] ) > 0 then
38559: LD_INT 17
38561: PPUSH
38562: LD_INT 22
38564: PUSH
38565: LD_EXP 176
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PPUSH
38574: CALL_OW 70
38578: PUSH
38579: LD_INT 0
38581: GREATER
38582: IFFALSE 38602
// begin Area_changed = true ;
38584: LD_ADDR_VAR 0 5
38588: PUSH
38589: LD_INT 1
38591: ST_TO_ADDR
// attack_area = Ar_Base ;
38592: LD_ADDR_VAR 0 4
38596: PUSH
38597: LD_INT 17
38599: ST_TO_ADDR
// end else
38600: GO 38901
// if FilterUnitsInArea ( Plan3 , [ f_side , americans ] ) > 0 then
38602: LD_INT 31
38604: PPUSH
38605: LD_INT 22
38607: PUSH
38608: LD_EXP 176
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PPUSH
38617: CALL_OW 70
38621: PUSH
38622: LD_INT 0
38624: GREATER
38625: IFFALSE 38645
// begin Area_changed = true ;
38627: LD_ADDR_VAR 0 5
38631: PUSH
38632: LD_INT 1
38634: ST_TO_ADDR
// attack_area = Plan3 ;
38635: LD_ADDR_VAR 0 4
38639: PUSH
38640: LD_INT 31
38642: ST_TO_ADDR
// end else
38643: GO 38901
// if FilterUnitsInArea ( Plan1 , [ f_side , americans ] ) > 0 then
38645: LD_INT 29
38647: PPUSH
38648: LD_INT 22
38650: PUSH
38651: LD_EXP 176
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PPUSH
38660: CALL_OW 70
38664: PUSH
38665: LD_INT 0
38667: GREATER
38668: IFFALSE 38688
// begin Area_changed = true ;
38670: LD_ADDR_VAR 0 5
38674: PUSH
38675: LD_INT 1
38677: ST_TO_ADDR
// attack_area = Plan1 ;
38678: LD_ADDR_VAR 0 4
38682: PUSH
38683: LD_INT 29
38685: ST_TO_ADDR
// end else
38686: GO 38901
// if FilterUnitsInArea ( Plan5 , [ f_side , americans ] ) > 0 then
38688: LD_INT 33
38690: PPUSH
38691: LD_INT 22
38693: PUSH
38694: LD_EXP 176
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PPUSH
38703: CALL_OW 70
38707: PUSH
38708: LD_INT 0
38710: GREATER
38711: IFFALSE 38731
// begin Area_changed = true ;
38713: LD_ADDR_VAR 0 5
38717: PUSH
38718: LD_INT 1
38720: ST_TO_ADDR
// attack_area = Plan5 ;
38721: LD_ADDR_VAR 0 4
38725: PUSH
38726: LD_INT 33
38728: ST_TO_ADDR
// end else
38729: GO 38901
// if FilterUnitsInArea ( Plan2 , [ f_side , americans ] ) > 0 then
38731: LD_INT 30
38733: PPUSH
38734: LD_INT 22
38736: PUSH
38737: LD_EXP 176
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PPUSH
38746: CALL_OW 70
38750: PUSH
38751: LD_INT 0
38753: GREATER
38754: IFFALSE 38774
// begin Area_changed = true ;
38756: LD_ADDR_VAR 0 5
38760: PUSH
38761: LD_INT 1
38763: ST_TO_ADDR
// attack_area = Plan2 ;
38764: LD_ADDR_VAR 0 4
38768: PUSH
38769: LD_INT 30
38771: ST_TO_ADDR
// end else
38772: GO 38901
// if FilterUnitsInArea ( Plan4 , [ f_side , americans ] ) > 0 then
38774: LD_INT 32
38776: PPUSH
38777: LD_INT 22
38779: PUSH
38780: LD_EXP 176
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PPUSH
38789: CALL_OW 70
38793: PUSH
38794: LD_INT 0
38796: GREATER
38797: IFFALSE 38817
// begin Area_changed = true ;
38799: LD_ADDR_VAR 0 5
38803: PUSH
38804: LD_INT 1
38806: ST_TO_ADDR
// attack_area = Plan4 ;
38807: LD_ADDR_VAR 0 4
38811: PUSH
38812: LD_INT 32
38814: ST_TO_ADDR
// end else
38815: GO 38901
// if FilterUnitsInArea ( Plan6 , [ f_side , americans ] ) > 0 then
38817: LD_INT 34
38819: PPUSH
38820: LD_INT 22
38822: PUSH
38823: LD_EXP 176
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PPUSH
38832: CALL_OW 70
38836: PUSH
38837: LD_INT 0
38839: GREATER
38840: IFFALSE 38860
// begin Area_changed = true ;
38842: LD_ADDR_VAR 0 5
38846: PUSH
38847: LD_INT 1
38849: ST_TO_ADDR
// attack_area = Plan6 ;
38850: LD_ADDR_VAR 0 4
38854: PUSH
38855: LD_INT 34
38857: ST_TO_ADDR
// end else
38858: GO 38901
// if FilterUnitsInArea ( Aliance_Base , [ f_side , americans ] ) > 0 then
38860: LD_INT 7
38862: PPUSH
38863: LD_INT 22
38865: PUSH
38866: LD_EXP 176
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PPUSH
38875: CALL_OW 70
38879: PUSH
38880: LD_INT 0
38882: GREATER
38883: IFFALSE 38901
// begin Area_changed = true ;
38885: LD_ADDR_VAR 0 5
38889: PUSH
38890: LD_INT 1
38892: ST_TO_ADDR
// attack_area = Aliance_Base ;
38893: LD_ADDR_VAR 0 4
38897: PUSH
38898: LD_INT 7
38900: ST_TO_ADDR
// end ; temp_list = Hlp_R1_Attack_Group ^ Hlp_New_Patrol_Group ;
38901: LD_ADDR_VAR 0 8
38905: PUSH
38906: LD_VAR 0 6
38910: PUSH
38911: LD_VAR 0 7
38915: ADD
38916: ST_TO_ADDR
// case attack_area of JMM_Hill :
38917: LD_VAR 0 4
38921: PUSH
38922: LD_INT 2
38924: DOUBLE
38925: EQUAL
38926: IFTRUE 38930
38928: GO 39016
38930: POP
// begin if spawn_at_Arrival1 then
38931: LD_VAR 0 9
38935: IFFALSE 38939
// begin end else
38937: GO 39014
// begin ComAgressiveMove ( temp_list , 163 , 181 ) ;
38939: LD_VAR 0 8
38943: PPUSH
38944: LD_INT 163
38946: PPUSH
38947: LD_INT 181
38949: PPUSH
38950: CALL_OW 114
// AddComAgressiveMove ( temp_list , 175 , 165 ) ;
38954: LD_VAR 0 8
38958: PPUSH
38959: LD_INT 175
38961: PPUSH
38962: LD_INT 165
38964: PPUSH
38965: CALL_OW 174
// AddComAgressiveMove ( temp_list , 160 , 138 ) ;
38969: LD_VAR 0 8
38973: PPUSH
38974: LD_INT 160
38976: PPUSH
38977: LD_INT 138
38979: PPUSH
38980: CALL_OW 174
// AddComAgressiveMove ( temp_list , 138 , 121 ) ;
38984: LD_VAR 0 8
38988: PPUSH
38989: LD_INT 138
38991: PPUSH
38992: LD_INT 121
38994: PPUSH
38995: CALL_OW 174
// AddComAgressiveMove ( temp_list , 113 , 105 ) ;
38999: LD_VAR 0 8
39003: PPUSH
39004: LD_INT 113
39006: PPUSH
39007: LD_INT 105
39009: PPUSH
39010: CALL_OW 174
// end ; end ; Am_Base :
39014: GO 39434
39016: LD_INT 1
39018: DOUBLE
39019: EQUAL
39020: IFTRUE 39024
39022: GO 39155
39024: POP
// begin if spawn_at_Arrival1 then
39025: LD_VAR 0 9
39029: IFFALSE 39048
// begin ComAgressiveMove ( temp_list , 86 , 123 ) ;
39031: LD_VAR 0 8
39035: PPUSH
39036: LD_INT 86
39038: PPUSH
39039: LD_INT 123
39041: PPUSH
39042: CALL_OW 114
// end else
39046: GO 39153
// begin ComAgressiveMove ( temp_list , 163 , 181 ) ;
39048: LD_VAR 0 8
39052: PPUSH
39053: LD_INT 163
39055: PPUSH
39056: LD_INT 181
39058: PPUSH
39059: CALL_OW 114
// AddComAgressiveMove ( temp_list , 175 , 165 ) ;
39063: LD_VAR 0 8
39067: PPUSH
39068: LD_INT 175
39070: PPUSH
39071: LD_INT 165
39073: PPUSH
39074: CALL_OW 174
// AddComAgressiveMove ( temp_list , 160 , 138 ) ;
39078: LD_VAR 0 8
39082: PPUSH
39083: LD_INT 160
39085: PPUSH
39086: LD_INT 138
39088: PPUSH
39089: CALL_OW 174
// AddComAgressiveMove ( temp_list , 138 , 121 ) ;
39093: LD_VAR 0 8
39097: PPUSH
39098: LD_INT 138
39100: PPUSH
39101: LD_INT 121
39103: PPUSH
39104: CALL_OW 174
// AddComAgressiveMove ( temp_list , 113 , 105 ) ;
39108: LD_VAR 0 8
39112: PPUSH
39113: LD_INT 113
39115: PPUSH
39116: LD_INT 105
39118: PPUSH
39119: CALL_OW 174
// AddComAgressiveMove ( temp_list , 99 , 83 ) ;
39123: LD_VAR 0 8
39127: PPUSH
39128: LD_INT 99
39130: PPUSH
39131: LD_INT 83
39133: PPUSH
39134: CALL_OW 174
// AddComAgressiveMove ( temp_list , 83 , 62 ) ;
39138: LD_VAR 0 8
39142: PPUSH
39143: LD_INT 83
39145: PPUSH
39146: LD_INT 62
39148: PPUSH
39149: CALL_OW 174
// end ; end ; Ar_Base :
39153: GO 39434
39155: LD_INT 17
39157: DOUBLE
39158: EQUAL
39159: IFTRUE 39163
39161: GO 39339
39163: POP
// begin if spawn_at_Arrival1 then
39164: LD_VAR 0 9
39168: IFFALSE 39232
// begin ComAgressiveMove ( temp_list , 86 , 123 ) ;
39170: LD_VAR 0 8
39174: PPUSH
39175: LD_INT 86
39177: PPUSH
39178: LD_INT 123
39180: PPUSH
39181: CALL_OW 114
// AddComAgressiveMove ( temp_list , 71 , 101 ) ;
39185: LD_VAR 0 8
39189: PPUSH
39190: LD_INT 71
39192: PPUSH
39193: LD_INT 101
39195: PPUSH
39196: CALL_OW 174
// AddComAgressiveMove ( temp_list , 58 , 77 ) ;
39200: LD_VAR 0 8
39204: PPUSH
39205: LD_INT 58
39207: PPUSH
39208: LD_INT 77
39210: PPUSH
39211: CALL_OW 174
// AddComAgressiveMove ( temp_list , 66 , 61 ) ;
39215: LD_VAR 0 8
39219: PPUSH
39220: LD_INT 66
39222: PPUSH
39223: LD_INT 61
39225: PPUSH
39226: CALL_OW 174
// end else
39230: GO 39337
// begin ComAgressiveMove ( temp_list , 163 , 181 ) ;
39232: LD_VAR 0 8
39236: PPUSH
39237: LD_INT 163
39239: PPUSH
39240: LD_INT 181
39242: PPUSH
39243: CALL_OW 114
// AddComAgressiveMove ( temp_list , 175 , 165 ) ;
39247: LD_VAR 0 8
39251: PPUSH
39252: LD_INT 175
39254: PPUSH
39255: LD_INT 165
39257: PPUSH
39258: CALL_OW 174
// AddComAgressiveMove ( temp_list , 160 , 138 ) ;
39262: LD_VAR 0 8
39266: PPUSH
39267: LD_INT 160
39269: PPUSH
39270: LD_INT 138
39272: PPUSH
39273: CALL_OW 174
// AddComAgressiveMove ( temp_list , 138 , 121 ) ;
39277: LD_VAR 0 8
39281: PPUSH
39282: LD_INT 138
39284: PPUSH
39285: LD_INT 121
39287: PPUSH
39288: CALL_OW 174
// AddComAgressiveMove ( temp_list , 113 , 105 ) ;
39292: LD_VAR 0 8
39296: PPUSH
39297: LD_INT 113
39299: PPUSH
39300: LD_INT 105
39302: PPUSH
39303: CALL_OW 174
// AddComAgressiveMove ( temp_list , 108 , 82 ) ;
39307: LD_VAR 0 8
39311: PPUSH
39312: LD_INT 108
39314: PPUSH
39315: LD_INT 82
39317: PPUSH
39318: CALL_OW 174
// AddComAgressiveMove ( temp_list , 99 , 59 ) ;
39322: LD_VAR 0 8
39326: PPUSH
39327: LD_INT 99
39329: PPUSH
39330: LD_INT 59
39332: PPUSH
39333: CALL_OW 174
// end ; end ; Aliance_Base :
39337: GO 39434
39339: LD_INT 7
39341: DOUBLE
39342: EQUAL
39343: IFTRUE 39347
39345: GO 39433
39347: POP
// begin if spawn_at_Arrival1 then
39348: LD_VAR 0 9
39352: IFFALSE 39416
// begin ComAgressiveMove ( temp_list , 96 , 163 ) ;
39354: LD_VAR 0 8
39358: PPUSH
39359: LD_INT 96
39361: PPUSH
39362: LD_INT 163
39364: PPUSH
39365: CALL_OW 114
// AddComAgressiveMove ( temp_list , 120 , 179 ) ;
39369: LD_VAR 0 8
39373: PPUSH
39374: LD_INT 120
39376: PPUSH
39377: LD_INT 179
39379: PPUSH
39380: CALL_OW 174
// AddComAgressiveMove ( temp_list , 141 , 179 ) ;
39384: LD_VAR 0 8
39388: PPUSH
39389: LD_INT 141
39391: PPUSH
39392: LD_INT 179
39394: PPUSH
39395: CALL_OW 174
// AddComAgressiveMove ( temp_list , 163 , 179 ) ;
39399: LD_VAR 0 8
39403: PPUSH
39404: LD_INT 163
39406: PPUSH
39407: LD_INT 179
39409: PPUSH
39410: CALL_OW 174
// end else
39414: GO 39431
// begin ComAgressiveMove ( temp_list , 163 , 179 ) ;
39416: LD_VAR 0 8
39420: PPUSH
39421: LD_INT 163
39423: PPUSH
39424: LD_INT 179
39426: PPUSH
39427: CALL_OW 114
// end ; end ; end ;
39431: GO 39434
39433: POP
// WaitTask ( temp_list , 1 ) ;
39434: LD_VAR 0 8
39438: PPUSH
39439: LD_INT 1
39441: PPUSH
39442: CALL 17823 0 2
// if not ( ExistMc ( Russian1_reg_id ) ) then
39446: LD_EXP 237
39450: PPUSH
39451: CALL_OW 386
39455: NOT
39456: IFFALSE 39514
// begin Russian1_reg_id = McRegistry ( russians1 , [ [ mc_reg_refresh_time , 0 0$2 ] , [ mc_reg_area_to_guard , attack_area ] , - mc_reg_only_important , mc_reg_ignore_fog , mc_reg_buildings ] ) ;
39458: LD_ADDR_EXP 237
39462: PUSH
39463: LD_EXP 179
39467: PPUSH
39468: LD_INT 1
39470: PUSH
39471: LD_INT 70
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 2
39480: PUSH
39481: LD_VAR 0 4
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 8
39492: NEG
39493: PUSH
39494: LD_INT 7
39496: PUSH
39497: LD_INT 9
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: PPUSH
39507: CALL_OW 399
39511: ST_TO_ADDR
// end else
39512: GO 39544
// if Area_changed then
39514: LD_VAR 0 5
39518: IFFALSE 39544
// begin McRegistryChangeOptions ( Russian1_reg_id , [ [ mc_reg_area_to_guard , attack_area ] ] ) ;
39520: LD_EXP 237
39524: PPUSH
39525: LD_INT 2
39527: PUSH
39528: LD_VAR 0 4
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: EMPTY
39538: LIST
39539: PPUSH
39540: CALL_OW 400
// end ; if not ( ExistMc ( Russian1_att_id ) ) then
39544: LD_EXP 238
39548: PPUSH
39549: CALL_OW 386
39553: NOT
39554: IFFALSE 39631
// begin Russian1_att_id = McAttack ( 100 , Russian1_reg_id , Main_R1_Attack_Group , [ [ mc_retreat_area_vehicles , retreat1 ] , [ mc_retreat_area_people , retreat1 ] , [ mc_retreat_lives_vehicles , 600 ] , [ mc_retreat_lives_people , 600 ] , mc_no_stop ] ) ;
39556: LD_ADDR_EXP 238
39560: PUSH
39561: LD_INT 100
39563: PPUSH
39564: LD_EXP 237
39568: PPUSH
39569: LD_EXP 119
39573: PPUSH
39574: LD_INT 8
39576: PUSH
39577: LD_INT 40
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 7
39586: PUSH
39587: LD_INT 40
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 6
39596: PUSH
39597: LD_INT 600
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 5
39606: PUSH
39607: LD_INT 600
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 10
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: PPUSH
39624: CALL_OW 402
39628: ST_TO_ADDR
// end else
39629: GO 39645
// begin AddMcUnits ( Russian1_att_id , Hlp_R1_Attack_Group ) ;
39631: LD_EXP 238
39635: PPUSH
39636: LD_VAR 0 6
39640: PPUSH
39641: CALL_OW 390
// end ; if not ( ExistMc ( Russian1_reg1_id ) ) then
39645: LD_EXP 239
39649: PPUSH
39650: CALL_OW 386
39654: NOT
39655: IFFALSE 39705
// begin Russian1_reg1_id = McRegistry ( russians1 , [ [ mc_reg_refresh_time , 0 0$4 ] , [ mc_reg_area_to_guard , attack_area ] , - mc_reg_only_important ] ) ;
39657: LD_ADDR_EXP 239
39661: PUSH
39662: LD_EXP 179
39666: PPUSH
39667: LD_INT 1
39669: PUSH
39670: LD_INT 140
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 2
39679: PUSH
39680: LD_VAR 0 4
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 8
39691: NEG
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: LIST
39697: PPUSH
39698: CALL_OW 399
39702: ST_TO_ADDR
// end else
39703: GO 39735
// if Area_changed then
39705: LD_VAR 0 5
39709: IFFALSE 39735
// begin McRegistryChangeOptions ( Russian1_reg1_id , [ [ mc_reg_area_to_guard , attack_area ] ] ) ;
39711: LD_EXP 239
39715: PPUSH
39716: LD_INT 2
39718: PUSH
39719: LD_VAR 0 4
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: EMPTY
39729: LIST
39730: PPUSH
39731: CALL_OW 400
// end ; if not ( ExistMc ( Russian1_patr_id ) ) and ( Hlp_New_Patrol_Group <> 0 ) then
39735: LD_EXP 240
39739: PPUSH
39740: CALL_OW 386
39744: NOT
39745: PUSH
39746: LD_VAR 0 7
39750: PUSH
39751: LD_INT 0
39753: NONEQUAL
39754: AND
39755: IFFALSE 39798
// begin R1Patrol_group = Hlp_New_Patrol_Group ;
39757: LD_ADDR_EXP 123
39761: PUSH
39762: LD_VAR 0 7
39766: ST_TO_ADDR
// Russian1_patr_id = McPatrol ( 100 , Russian1_reg1_id , Hlp_New_Patrol_Group , [ mc_no_stop ] ) ;
39767: LD_ADDR_EXP 240
39771: PUSH
39772: LD_INT 100
39774: PPUSH
39775: LD_EXP 239
39779: PPUSH
39780: LD_VAR 0 7
39784: PPUSH
39785: LD_INT 10
39787: PUSH
39788: EMPTY
39789: LIST
39790: PPUSH
39791: CALL_OW 403
39795: ST_TO_ADDR
// end else
39796: GO 39838
// begin R1Patrol_group = R1Patrol_group ^ Hlp_New_Patrol_Group ;
39798: LD_ADDR_EXP 123
39802: PUSH
39803: LD_EXP 123
39807: PUSH
39808: LD_VAR 0 7
39812: ADD
39813: ST_TO_ADDR
// if Hlp_New_Patrol_Group <> 0 then
39814: LD_VAR 0 7
39818: PUSH
39819: LD_INT 0
39821: NONEQUAL
39822: IFFALSE 39838
// AddMcUnits ( Russian1_patr_id , Hlp_New_Patrol_Group ) ;
39824: LD_EXP 240
39828: PPUSH
39829: LD_VAR 0 7
39833: PPUSH
39834: CALL_OW 390
// end ; end ;
39838: LD_VAR 0 1
39842: RET
// every 0 0$1 do var Un , ill ;
39843: GO 39845
39845: DISABLE
39846: LD_INT 0
39848: PPUSH
39849: PPUSH
// begin ill = FilterUnitsInArea ( OutComming , [ [ f_side , russians1 ] , f_not , [ f_lives , 600 ] ] ) ;
39850: LD_ADDR_VAR 0 2
39854: PUSH
39855: LD_INT 41
39857: PPUSH
39858: LD_INT 22
39860: PUSH
39861: LD_EXP 179
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 3
39872: PUSH
39873: LD_INT 24
39875: PUSH
39876: LD_INT 600
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: LIST
39887: PPUSH
39888: CALL_OW 70
39892: ST_TO_ADDR
// ill = ill ^ FilterUnitsInArea ( arrival2 , [ [ f_side , russians1 ] , f_not , [ f_lives , 600 ] ] ) ;
39893: LD_ADDR_VAR 0 2
39897: PUSH
39898: LD_VAR 0 2
39902: PUSH
39903: LD_INT 25
39905: PPUSH
39906: LD_INT 22
39908: PUSH
39909: LD_EXP 179
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 3
39920: PUSH
39921: LD_INT 24
39923: PUSH
39924: LD_INT 600
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: LIST
39935: PPUSH
39936: CALL_OW 70
39940: ADD
39941: ST_TO_ADDR
// if ill > 0 then
39942: LD_VAR 0 2
39946: PUSH
39947: LD_INT 0
39949: GREATER
39950: IFFALSE 40008
// begin Main_R1_Attack_Group = Main_R1_Attack_Group diff ill ;
39952: LD_ADDR_EXP 119
39956: PUSH
39957: LD_EXP 119
39961: PUSH
39962: LD_VAR 0 2
39966: DIFF
39967: ST_TO_ADDR
// RemoveMcUnits ( Russian1_att_id , ill ) ;
39968: LD_EXP 238
39972: PPUSH
39973: LD_VAR 0 2
39977: PPUSH
39978: CALL_OW 391
// for Un in ill do
39982: LD_ADDR_VAR 0 1
39986: PUSH
39987: LD_VAR 0 2
39991: PUSH
39992: FOR_IN
39993: IFFALSE 40006
// DestroyUnit ( Un ) ;
39995: LD_VAR 0 1
39999: PPUSH
40000: CALL_OW 65
40004: GO 39992
40006: POP
40007: POP
// end ; enable ;
40008: ENABLE
// end ;
40009: PPOPN 2
40011: END
// every 0 0$1 marked 4 do
40012: GO 40014
40014: DISABLE
// begin disable ;
40015: DISABLE
// if Main_R1_Attack_Group < 50 then
40016: LD_EXP 119
40020: PUSH
40021: LD_INT 50
40023: LESS
40024: IFFALSE 40092
// begin R1_Attack_Counter = R1_Attack_Counter + 1 ;
40026: LD_ADDR_EXP 116
40030: PUSH
40031: LD_EXP 116
40035: PUSH
40036: LD_INT 1
40038: PLUS
40039: ST_TO_ADDR
// GenerateAttackingGroup ;
40040: CALL 36844 0 0
// GeneratePatrolingGroup ;
40044: CALL 38084 0 0
// Wait ( R1_attack_time ) ;
40048: LD_EXP 114
40052: PPUSH
40053: CALL_OW 67
// while R1_Attack_Continues = false do
40057: LD_EXP 196
40061: PUSH
40062: LD_INT 0
40064: EQUAL
40065: IFFALSE 40076
// Wait ( 0 0$1 ) ;
40067: LD_INT 35
40069: PPUSH
40070: CALL_OW 67
40074: GO 40057
// RaiseSailEvent ( Rus1_Attack ) ;
40076: LD_EXP 170
40080: PPUSH
40081: CALL_OW 427
// Wait ( 1 ) ;
40085: LD_INT 1
40087: PPUSH
40088: CALL_OW 67
// end ; enable ;
40092: ENABLE
// end ; end_of_file
40093: END
// every 0 0$1 trigger IsDead ( Powell ) marked 8 do
40094: LD_EXP 2
40098: PPUSH
40099: CALL_OW 301
40103: IFFALSE 40119
40105: GO 40107
40107: DISABLE
// begin YouLost ( Surrender ) ;
40108: LD_STRING Surrender
40110: PPUSH
40111: CALL_OW 104
// ExitGame ;
40115: CALL_OW 341
// end ;
40119: END
// every 0 0$1 marked 22 do
40120: GO 40122
40122: DISABLE
// begin YouLost ( JMMCaptured ) ;
40123: LD_STRING JMMCaptured
40125: PPUSH
40126: CALL_OW 104
// ExitGame ;
40130: CALL_OW 341
// end ;
40134: END
// every 0 0$1 marked 19 do
40135: GO 40137
40137: DISABLE
// begin YouLost ( Surrender ) ;
40138: LD_STRING Surrender
40140: PPUSH
40141: CALL_OW 104
// ExitGame ;
40145: CALL_OW 341
// end ;
40149: END
// every 0 0$1 marked 2 do
40150: GO 40152
40152: DISABLE
// begin YouLost ( Dismissed ) ;
40153: LD_STRING Dismissed
40155: PPUSH
40156: CALL_OW 104
// ExitGame ;
40160: CALL_OW 341
// end ;
40164: END
// every 0 0$5 trigger IsDead ( JMM ) do
40165: LD_EXP 1
40169: PPUSH
40170: CALL_OW 301
40174: IFFALSE 40190
40176: GO 40178
40178: DISABLE
// begin YouLost ( JMM ) ;
40179: LD_STRING JMM
40181: PPUSH
40182: CALL_OW 104
// ExitGame ;
40186: CALL_OW 341
// end ;
40190: END
// every 0 0$5 marked 13 do
40191: GO 40193
40193: DISABLE
// begin Wait ( 0 0$5 ) ;
40194: LD_INT 175
40196: PPUSH
40197: CALL_OW 67
// YouLost ( Motherlode1 ) ;
40201: LD_STRING Motherlode1
40203: PPUSH
40204: CALL_OW 104
// ExitGame ;
40208: CALL_OW 341
// end ;
40212: END
// every 0 0$5 marked 14 do
40213: GO 40215
40215: DISABLE
// begin Wait ( 0 0$5 ) ;
40216: LD_INT 175
40218: PPUSH
40219: CALL_OW 67
// YouLost ( Motherlode2 ) ;
40223: LD_STRING Motherlode2
40225: PPUSH
40226: CALL_OW 104
// ExitGame ;
40230: CALL_OW 341
// end ;
40234: END
// every 0 0$5 marked 15 do
40235: GO 40237
40237: DISABLE
// begin Wait ( 0 0$7 ) ;
40238: LD_INT 245
40240: PPUSH
40241: CALL_OW 67
// YouLost ( Motherlode3 ) ;
40245: LD_STRING Motherlode3
40247: PPUSH
40248: CALL_OW 104
// ExitGame ;
40252: CALL_OW 341
// end ;
40256: END
// every 0 0$1 marked 23 do
40257: GO 40259
40259: DISABLE
// begin DialogueON ;
40260: CALL_OW 6
// Say ( JMM , D20-JMM-1 ) ;
40264: LD_EXP 1
40268: PPUSH
40269: LD_STRING D20-JMM-1
40271: PPUSH
40272: CALL_OW 88
// if IsOk ( Joan ) and GetSide ( Joan ) = americans then
40276: LD_EXP 12
40280: PPUSH
40281: CALL_OW 302
40285: PUSH
40286: LD_EXP 12
40290: PPUSH
40291: CALL_OW 255
40295: PUSH
40296: LD_EXP 176
40300: EQUAL
40301: AND
40302: IFFALSE 40316
// Say ( Joan , D20-Joan-1 ) ;
40304: LD_EXP 12
40308: PPUSH
40309: LD_STRING D20-Joan-1
40311: PPUSH
40312: CALL_OW 88
// if IsOk ( Lisa ) and GetSide ( Lisa ) = americans then
40316: LD_EXP 5
40320: PPUSH
40321: CALL_OW 302
40325: PUSH
40326: LD_EXP 5
40330: PPUSH
40331: CALL_OW 255
40335: PUSH
40336: LD_EXP 176
40340: EQUAL
40341: AND
40342: IFFALSE 40356
// Say ( Lisa , D20-Lisa-1 ) ;
40344: LD_EXP 5
40348: PPUSH
40349: LD_STRING D20-Lisa-1
40351: PPUSH
40352: CALL_OW 88
// if IsOk ( Donaldson ) and GetSide ( Donaldson ) = americans then
40356: LD_EXP 8
40360: PPUSH
40361: CALL_OW 302
40365: PUSH
40366: LD_EXP 8
40370: PPUSH
40371: CALL_OW 255
40375: PUSH
40376: LD_EXP 176
40380: EQUAL
40381: AND
40382: IFFALSE 40396
// Say ( Donaldson , D20-Don-1 ) ;
40384: LD_EXP 8
40388: PPUSH
40389: LD_STRING D20-Don-1
40391: PPUSH
40392: CALL_OW 88
// if IsOk ( Cornell ) and GetSide ( Cornell ) = americans then
40396: LD_EXP 10
40400: PPUSH
40401: CALL_OW 302
40405: PUSH
40406: LD_EXP 10
40410: PPUSH
40411: CALL_OW 255
40415: PUSH
40416: LD_EXP 176
40420: EQUAL
40421: AND
40422: IFFALSE 40436
// Say ( Cornell , D20-Corn-1 ) ;
40424: LD_EXP 10
40428: PPUSH
40429: LD_STRING D20-Corn-1
40431: PPUSH
40432: CALL_OW 88
// if IsOk ( Denis ) and GetSide ( Denis ) = americans then
40436: LD_EXP 11
40440: PPUSH
40441: CALL_OW 302
40445: PUSH
40446: LD_EXP 11
40450: PPUSH
40451: CALL_OW 255
40455: PUSH
40456: LD_EXP 176
40460: EQUAL
40461: AND
40462: IFFALSE 40476
// Say ( Denis , D20-Den-1 ) ;
40464: LD_EXP 11
40468: PPUSH
40469: LD_STRING D20-Den-1
40471: PPUSH
40472: CALL_OW 88
// if IsOk ( Bobby ) and GetSide ( Bobby ) = americans then
40476: LD_EXP 3
40480: PPUSH
40481: CALL_OW 302
40485: PUSH
40486: LD_EXP 3
40490: PPUSH
40491: CALL_OW 255
40495: PUSH
40496: LD_EXP 176
40500: EQUAL
40501: AND
40502: IFFALSE 40516
// Say ( Bobby , D20-Bobby-1 ) ;
40504: LD_EXP 3
40508: PPUSH
40509: LD_STRING D20-Bobby-1
40511: PPUSH
40512: CALL_OW 88
// if IsOk ( Gladstone ) and GetSide ( Gladstone ) = americans then
40516: LD_EXP 9
40520: PPUSH
40521: CALL_OW 302
40525: PUSH
40526: LD_EXP 9
40530: PPUSH
40531: CALL_OW 255
40535: PUSH
40536: LD_EXP 176
40540: EQUAL
40541: AND
40542: IFFALSE 40556
// Say ( Gladstone , D20-Glad-1 ) ;
40544: LD_EXP 9
40548: PPUSH
40549: LD_STRING D20-Glad-1
40551: PPUSH
40552: CALL_OW 88
// if IsOk ( Cyrus ) and GetSide ( Cyrus ) = americans then
40556: LD_EXP 4
40560: PPUSH
40561: CALL_OW 302
40565: PUSH
40566: LD_EXP 4
40570: PPUSH
40571: CALL_OW 255
40575: PUSH
40576: LD_EXP 176
40580: EQUAL
40581: AND
40582: IFFALSE 40596
// Say ( Cyrus , D20-Cyrus-1 ) ;
40584: LD_EXP 4
40588: PPUSH
40589: LD_STRING D20-Cyrus-1
40591: PPUSH
40592: CALL_OW 88
// if IsOk ( Stevens ) and GetSide ( Stevens ) = americans then
40596: LD_EXP 17
40600: PPUSH
40601: CALL_OW 302
40605: PUSH
40606: LD_EXP 17
40610: PPUSH
40611: CALL_OW 255
40615: PUSH
40616: LD_EXP 176
40620: EQUAL
40621: AND
40622: IFFALSE 40636
// Say ( Stevens , D20-Huck-1 ) ;
40624: LD_EXP 17
40628: PPUSH
40629: LD_STRING D20-Huck-1
40631: PPUSH
40632: CALL_OW 88
// if IsOk ( Brown ) and GetSide ( Brown ) = americans then
40636: LD_EXP 7
40640: PPUSH
40641: CALL_OW 302
40645: PUSH
40646: LD_EXP 7
40650: PPUSH
40651: CALL_OW 255
40655: PUSH
40656: LD_EXP 176
40660: EQUAL
40661: AND
40662: IFFALSE 40676
// Say ( Brown , D20-Brown-1 ) ;
40664: LD_EXP 7
40668: PPUSH
40669: LD_STRING D20-Brown-1
40671: PPUSH
40672: CALL_OW 88
// if IsOk ( Gary ) and GetSide ( Gary ) = americans then
40676: LD_EXP 15
40680: PPUSH
40681: CALL_OW 302
40685: PUSH
40686: LD_EXP 15
40690: PPUSH
40691: CALL_OW 255
40695: PUSH
40696: LD_EXP 176
40700: EQUAL
40701: AND
40702: IFFALSE 40716
// Say ( Gary , D20-Gary-1 ) ;
40704: LD_EXP 15
40708: PPUSH
40709: LD_STRING D20-Gary-1
40711: PPUSH
40712: CALL_OW 88
// if IsOk ( Coonie ) and GetSide ( Coonie ) = americans then
40716: LD_EXP 18
40720: PPUSH
40721: CALL_OW 302
40725: PUSH
40726: LD_EXP 18
40730: PPUSH
40731: CALL_OW 255
40735: PUSH
40736: LD_EXP 176
40740: EQUAL
40741: AND
40742: IFFALSE 40756
// Say ( Coonie , D20-Con-1 ) ;
40744: LD_EXP 18
40748: PPUSH
40749: LD_STRING D20-Con-1
40751: PPUSH
40752: CALL_OW 88
// if IsOk ( Kurt ) and GetSide ( Kurt ) = americans then
40756: LD_EXP 13
40760: PPUSH
40761: CALL_OW 302
40765: PUSH
40766: LD_EXP 13
40770: PPUSH
40771: CALL_OW 255
40775: PUSH
40776: LD_EXP 176
40780: EQUAL
40781: AND
40782: IFFALSE 40796
// Say ( Kurt , D20-Kurt-1 ) ;
40784: LD_EXP 13
40788: PPUSH
40789: LD_STRING D20-Kurt-1
40791: PPUSH
40792: CALL_OW 88
// if IsOk ( Yamoko ) and GetSide ( Yamoko ) = americans then
40796: LD_EXP 14
40800: PPUSH
40801: CALL_OW 302
40805: PUSH
40806: LD_EXP 14
40810: PPUSH
40811: CALL_OW 255
40815: PUSH
40816: LD_EXP 176
40820: EQUAL
40821: AND
40822: IFFALSE 40836
// Say ( Yamoko , D20-Yam-1 ) ;
40824: LD_EXP 14
40828: PPUSH
40829: LD_STRING D20-Yam-1
40831: PPUSH
40832: CALL_OW 88
// if IsOk ( Frank ) and GetSide ( Frank ) = americans then
40836: LD_EXP 6
40840: PPUSH
40841: CALL_OW 302
40845: PUSH
40846: LD_EXP 6
40850: PPUSH
40851: CALL_OW 255
40855: PUSH
40856: LD_EXP 176
40860: EQUAL
40861: AND
40862: IFFALSE 40876
// Say ( Frank , D20-Frank-1 ) ;
40864: LD_EXP 6
40868: PPUSH
40869: LD_STRING D20-Frank-1
40871: PPUSH
40872: CALL_OW 88
// DialogueOFF ;
40876: CALL_OW 7
// if Roth_Captured then
40880: LD_EXP 54
40884: IFFALSE 40898
// AddMedal ( Roth , 1 ) else
40886: LD_STRING Roth
40888: PPUSH
40889: LD_INT 1
40891: PPUSH
40892: CALL_OW 101
40896: GO 40933
// begin if IsOk ( Roth ) then
40898: LD_EXP 20
40902: PPUSH
40903: CALL_OW 302
40907: IFFALSE 40922
// AddMedal ( Roth , - 2 ) else
40909: LD_STRING Roth
40911: PPUSH
40912: LD_INT 2
40914: NEG
40915: PPUSH
40916: CALL_OW 101
40920: GO 40933
// AddMedal ( Roth , - 1 ) ;
40922: LD_STRING Roth
40924: PPUSH
40925: LD_INT 1
40927: NEG
40928: PPUSH
40929: CALL_OW 101
// end ; AddMedal ( Project , Russian_project_canceled ) ;
40933: LD_STRING Project
40935: PPUSH
40936: LD_EXP 55
40940: PPUSH
40941: CALL_OW 101
// AddMedal ( NoLosses , No_Looses ) ;
40945: LD_STRING NoLosses
40947: PPUSH
40948: LD_EXP 56
40952: PPUSH
40953: CALL_OW 101
// SA_OnMissionComplete ;
40957: CALL 56023 0 0
// GiveMedals ( MAIN ) ;
40961: LD_STRING MAIN
40963: PPUSH
40964: CALL_OW 102
// SaveCharacters ( JMM , JMM ) ;
40968: LD_EXP 1
40972: PPUSH
40973: LD_STRING JMM
40975: PPUSH
40976: CALL_OW 38
// if IsLive ( Cyrus ) then
40980: LD_EXP 4
40984: PPUSH
40985: CALL_OW 300
40989: IFFALSE 41003
// SaveCharacters ( Cyrus , Cyrus ) ;
40991: LD_EXP 4
40995: PPUSH
40996: LD_STRING Cyrus
40998: PPUSH
40999: CALL_OW 38
// if IsLive ( Bobby ) then
41003: LD_EXP 3
41007: PPUSH
41008: CALL_OW 300
41012: IFFALSE 41026
// SaveCharacters ( Bobby , Bobby ) ;
41014: LD_EXP 3
41018: PPUSH
41019: LD_STRING Bobby
41021: PPUSH
41022: CALL_OW 38
// if IsLive ( Lisa ) then
41026: LD_EXP 5
41030: PPUSH
41031: CALL_OW 300
41035: IFFALSE 41049
// SaveCharacters ( Lisa , Lisa ) ;
41037: LD_EXP 5
41041: PPUSH
41042: LD_STRING Lisa
41044: PPUSH
41045: CALL_OW 38
// if IsLive ( Frank ) then
41049: LD_EXP 6
41053: PPUSH
41054: CALL_OW 300
41058: IFFALSE 41072
// SaveCharacters ( Frank , Frank ) ;
41060: LD_EXP 6
41064: PPUSH
41065: LD_STRING Frank
41067: PPUSH
41068: CALL_OW 38
// if IsLive ( Donaldson ) then
41072: LD_EXP 8
41076: PPUSH
41077: CALL_OW 300
41081: IFFALSE 41095
// SaveCharacters ( Donaldson , Donaldson ) ;
41083: LD_EXP 8
41087: PPUSH
41088: LD_STRING Donaldson
41090: PPUSH
41091: CALL_OW 38
// if IsLive ( Brown ) then
41095: LD_EXP 7
41099: PPUSH
41100: CALL_OW 300
41104: IFFALSE 41118
// SaveCharacters ( Brown , Brown ) ;
41106: LD_EXP 7
41110: PPUSH
41111: LD_STRING Brown
41113: PPUSH
41114: CALL_OW 38
// if IsLive ( Denis ) then
41118: LD_EXP 11
41122: PPUSH
41123: CALL_OW 300
41127: IFFALSE 41141
// SaveCharacters ( Denis , Denis ) ;
41129: LD_EXP 11
41133: PPUSH
41134: LD_STRING Denis
41136: PPUSH
41137: CALL_OW 38
// if IsLive ( Gladstone ) then
41141: LD_EXP 9
41145: PPUSH
41146: CALL_OW 300
41150: IFFALSE 41164
// SaveCharacters ( Gladstone , Gladstone ) ;
41152: LD_EXP 9
41156: PPUSH
41157: LD_STRING Gladstone
41159: PPUSH
41160: CALL_OW 38
// if IsLive ( Yamoko ) then
41164: LD_EXP 14
41168: PPUSH
41169: CALL_OW 300
41173: IFFALSE 41187
// SaveCharacters ( Yamoko , Yamoko ) ;
41175: LD_EXP 14
41179: PPUSH
41180: LD_STRING Yamoko
41182: PPUSH
41183: CALL_OW 38
// if IsLive ( Cornell ) then
41187: LD_EXP 10
41191: PPUSH
41192: CALL_OW 300
41196: IFFALSE 41210
// SaveCharacters ( Cornell , Cornell ) ;
41198: LD_EXP 10
41202: PPUSH
41203: LD_STRING Cornell
41205: PPUSH
41206: CALL_OW 38
// if IsLive ( Joan ) then
41210: LD_EXP 12
41214: PPUSH
41215: CALL_OW 300
41219: IFFALSE 41233
// SaveCharacters ( Joan , Joan ) ;
41221: LD_EXP 12
41225: PPUSH
41226: LD_STRING Joan
41228: PPUSH
41229: CALL_OW 38
// if IsLive ( Kurt ) then
41233: LD_EXP 13
41237: PPUSH
41238: CALL_OW 300
41242: IFFALSE 41256
// SaveCharacters ( Kurt , Kurt ) ;
41244: LD_EXP 13
41248: PPUSH
41249: LD_STRING Kurt
41251: PPUSH
41252: CALL_OW 38
// if IsLive ( Gary ) then
41256: LD_EXP 15
41260: PPUSH
41261: CALL_OW 300
41265: IFFALSE 41279
// SaveCharacters ( Gary , Gary ) ;
41267: LD_EXP 15
41271: PPUSH
41272: LD_STRING Gary
41274: PPUSH
41275: CALL_OW 38
// if IsLive ( Stevens ) then
41279: LD_EXP 17
41283: PPUSH
41284: CALL_OW 300
41288: IFFALSE 41302
// SaveCharacters ( Stevens , Stevens ) ;
41290: LD_EXP 17
41294: PPUSH
41295: LD_STRING Stevens
41297: PPUSH
41298: CALL_OW 38
// if IsLive ( Coonie ) then
41302: LD_EXP 18
41306: PPUSH
41307: CALL_OW 300
41311: IFFALSE 41325
// SaveCharacters ( Coonie , Coonie ) ;
41313: LD_EXP 18
41317: PPUSH
41318: LD_STRING Coonie
41320: PPUSH
41321: CALL_OW 38
// if IsLive ( Baker ) then
41325: LD_EXP 23
41329: PPUSH
41330: CALL_OW 300
41334: IFFALSE 41348
// SaveCharacters ( Baker , Baker ) ;
41336: LD_EXP 23
41340: PPUSH
41341: LD_STRING Baker
41343: PPUSH
41344: CALL_OW 38
// if IsLive ( VanHouten ) then
41348: LD_EXP 24
41352: PPUSH
41353: CALL_OW 300
41357: IFFALSE 41371
// SaveCharacters ( VanHouten , VanHouten ) ;
41359: LD_EXP 24
41363: PPUSH
41364: LD_STRING VanHouten
41366: PPUSH
41367: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_alive ] , [ f_side , americans ] , [ f_type , unit_human ] ] ) diff [ JMM , Cyrus , Bobby , Lisa , Frank , Donaldson , Brown , Denis , Gladstone , Yamoko , Cornell , Joan , Kurt , Gary , Stevens , Coonie , Baker , VanHouten ] , Am15Winners ) ;
41371: LD_INT 51
41373: PUSH
41374: EMPTY
41375: LIST
41376: PUSH
41377: LD_INT 22
41379: PUSH
41380: LD_EXP 176
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 21
41391: PUSH
41392: LD_INT 1
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: LIST
41403: PPUSH
41404: CALL_OW 69
41408: PUSH
41409: LD_EXP 1
41413: PUSH
41414: LD_EXP 4
41418: PUSH
41419: LD_EXP 3
41423: PUSH
41424: LD_EXP 5
41428: PUSH
41429: LD_EXP 6
41433: PUSH
41434: LD_EXP 8
41438: PUSH
41439: LD_EXP 7
41443: PUSH
41444: LD_EXP 11
41448: PUSH
41449: LD_EXP 9
41453: PUSH
41454: LD_EXP 14
41458: PUSH
41459: LD_EXP 10
41463: PUSH
41464: LD_EXP 12
41468: PUSH
41469: LD_EXP 13
41473: PUSH
41474: LD_EXP 15
41478: PUSH
41479: LD_EXP 17
41483: PUSH
41484: LD_EXP 18
41488: PUSH
41489: LD_EXP 23
41493: PUSH
41494: LD_EXP 24
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: DIFF
41519: PPUSH
41520: LD_STRING Am15Winners
41522: PPUSH
41523: CALL_OW 38
// YouWin ;
41527: CALL_OW 103
// ExitGame ;
41531: CALL_OW 341
// end ; end_of_file
41535: END
// export function StartRussianBase ; var i , Bunkers , Turrets , units_to_protect , Teleport1 , Teleport2 , R_Eng ; begin
41536: LD_INT 0
41538: PPUSH
41539: PPUSH
41540: PPUSH
41541: PPUSH
41542: PPUSH
41543: PPUSH
41544: PPUSH
41545: PPUSH
// Teleport1 = GetUnitNumber ( 165 , 60 ) ;
41546: LD_ADDR_VAR 0 6
41550: PUSH
41551: LD_INT 165
41553: PPUSH
41554: LD_INT 60
41556: PPUSH
41557: CALL_OW 438
41561: ST_TO_ADDR
// Teleport2 = GetUnitNumber ( 182 , 87 ) ;
41562: LD_ADDR_VAR 0 7
41566: PUSH
41567: LD_INT 182
41569: PPUSH
41570: LD_INT 87
41572: PPUSH
41573: CALL_OW 438
41577: ST_TO_ADDR
// TeleportExit ( Teleport1 , 90 , 71 ) ;
41578: LD_VAR 0 6
41582: PPUSH
41583: LD_INT 90
41585: PPUSH
41586: LD_INT 71
41588: PPUSH
41589: CALL_OW 243
// TeleportExit ( Teleport2 , 147 , 109 ) ;
41593: LD_VAR 0 7
41597: PPUSH
41598: LD_INT 147
41600: PPUSH
41601: LD_INT 109
41603: PPUSH
41604: CALL_OW 243
// for i = 3 to 4 do
41608: LD_ADDR_VAR 0 2
41612: PUSH
41613: DOUBLE
41614: LD_INT 3
41616: DEC
41617: ST_TO_ADDR
41618: LD_INT 4
41620: PUSH
41621: FOR_TO
41622: IFFALSE 41644
// ComEnterUnit ( Russian_scientists [ i ] , RusLab1 ) ;
41624: LD_EXP 108
41628: PUSH
41629: LD_VAR 0 2
41633: ARRAY
41634: PPUSH
41635: LD_INT 2
41637: PPUSH
41638: CALL_OW 120
41642: GO 41621
41644: POP
41645: POP
// for i = 5 to 6 do
41646: LD_ADDR_VAR 0 2
41650: PUSH
41651: DOUBLE
41652: LD_INT 5
41654: DEC
41655: ST_TO_ADDR
41656: LD_INT 6
41658: PUSH
41659: FOR_TO
41660: IFFALSE 41682
// ComEnterUnit ( Russian_scientists [ i ] , RusLab2 ) ;
41662: LD_EXP 108
41666: PUSH
41667: LD_VAR 0 2
41671: ARRAY
41672: PPUSH
41673: LD_INT 1
41675: PPUSH
41676: CALL_OW 120
41680: GO 41659
41682: POP
41683: POP
// for i = 3 to Number_of_Russian_Engineers do
41684: LD_ADDR_VAR 0 2
41688: PUSH
41689: DOUBLE
41690: LD_INT 3
41692: DEC
41693: ST_TO_ADDR
41694: LD_EXP 136
41698: PUSH
41699: FOR_TO
41700: IFFALSE 41740
// begin ComEnterUnit ( Russian_engineers [ i ] , RusLab2 ) ;
41702: LD_EXP 109
41706: PUSH
41707: LD_VAR 0 2
41711: ARRAY
41712: PPUSH
41713: LD_INT 1
41715: PPUSH
41716: CALL_OW 120
// AddComChangeProfession ( Russian_engineers [ i ] , class_scientistic ) ;
41720: LD_EXP 109
41724: PUSH
41725: LD_VAR 0 2
41729: ARRAY
41730: PPUSH
41731: LD_INT 4
41733: PPUSH
41734: CALL_OW 183
// end ;
41738: GO 41699
41740: POP
41741: POP
// ComResearch ( RusLab1 , tech_Comp1 ) ;
41742: LD_INT 2
41744: PPUSH
41745: LD_INT 57
41747: PPUSH
41748: CALL_OW 124
// ComResearch ( RusLab1 , tech_Comp2 ) ;
41752: LD_INT 2
41754: PPUSH
41755: LD_INT 58
41757: PPUSH
41758: CALL_OW 124
// AddComResearch ( RusLab1 , tech_Comp3 ) ;
41762: LD_INT 2
41764: PPUSH
41765: LD_INT 59
41767: PPUSH
41768: CALL_OW 184
// AddComResearch ( RusLab1 , tech_ST1 ) ;
41772: LD_INT 2
41774: PPUSH
41775: LD_INT 63
41777: PPUSH
41778: CALL_OW 184
// AddComResearch ( RusLab1 , tech_ST2 ) ;
41782: LD_INT 2
41784: PPUSH
41785: LD_INT 64
41787: PPUSH
41788: CALL_OW 184
// AddComResearch ( RusLab1 , tech_ST3 ) ;
41792: LD_INT 2
41794: PPUSH
41795: LD_INT 65
41797: PPUSH
41798: CALL_OW 184
// ComResearch ( RusLab2 , tech_Weap1 ) ;
41802: LD_INT 1
41804: PPUSH
41805: LD_INT 51
41807: PPUSH
41808: CALL_OW 124
// AddComResearch ( RusLab2 , tech_Weap2 ) ;
41812: LD_INT 1
41814: PPUSH
41815: LD_INT 52
41817: PPUSH
41818: CALL_OW 184
// AddComResearch ( RusLab2 , tech_SibFiss ) ;
41822: LD_INT 1
41824: PPUSH
41825: LD_INT 25
41827: PPUSH
41828: CALL_OW 184
// AddComResearch ( RusLab2 , tech_Weap3 ) ;
41832: LD_INT 1
41834: PPUSH
41835: LD_INT 53
41837: PPUSH
41838: CALL_OW 184
// AddComResearch ( RusLab2 , tech_Sib1 ) ;
41842: LD_INT 1
41844: PPUSH
41845: LD_INT 54
41847: PPUSH
41848: CALL_OW 184
// AddComResearch ( RusLab2 , tech_Sib2 ) ;
41852: LD_INT 1
41854: PPUSH
41855: LD_INT 55
41857: PPUSH
41858: CALL_OW 184
// AddComResearch ( RusLab2 , tech_Sib3 ) ;
41862: LD_INT 1
41864: PPUSH
41865: LD_INT 56
41867: PPUSH
41868: CALL_OW 184
// for i = 1 to 3 do
41872: LD_ADDR_VAR 0 2
41876: PUSH
41877: DOUBLE
41878: LD_INT 1
41880: DEC
41881: ST_TO_ADDR
41882: LD_INT 3
41884: PUSH
41885: FOR_TO
41886: IFFALSE 41916
// ComEnterUnit ( Russian_mechanics [ i ] , GetUnitNumber ( 195 , 84 ) ) ;
41888: LD_EXP 110
41892: PUSH
41893: LD_VAR 0 2
41897: ARRAY
41898: PPUSH
41899: LD_INT 195
41901: PPUSH
41902: LD_INT 84
41904: PPUSH
41905: CALL_OW 438
41909: PPUSH
41910: CALL_OW 120
41914: GO 41885
41916: POP
41917: POP
// for i = 4 to 6 do
41918: LD_ADDR_VAR 0 2
41922: PUSH
41923: DOUBLE
41924: LD_INT 4
41926: DEC
41927: ST_TO_ADDR
41928: LD_INT 6
41930: PUSH
41931: FOR_TO
41932: IFFALSE 41962
// ComEnterUnit ( Russian_mechanics [ i ] , GetUnitNumber ( 170 , 35 ) ) ;
41934: LD_EXP 110
41938: PUSH
41939: LD_VAR 0 2
41943: ARRAY
41944: PPUSH
41945: LD_INT 170
41947: PPUSH
41948: LD_INT 35
41950: PPUSH
41951: CALL_OW 438
41955: PPUSH
41956: CALL_OW 120
41960: GO 41931
41962: POP
41963: POP
// Bunkers = FilterAllUnits ( [ [ f_side , russians ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) ;
41964: LD_ADDR_VAR 0 3
41968: PUSH
41969: LD_INT 22
41971: PUSH
41972: LD_EXP 178
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 21
41983: PUSH
41984: LD_INT 3
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 30
41993: PUSH
41994: LD_INT 32
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: LIST
42005: PPUSH
42006: CALL_OW 69
42010: ST_TO_ADDR
// if Bunkers <= Russian_soldiers then
42011: LD_VAR 0 3
42015: PUSH
42016: LD_EXP 107
42020: LESSEQUAL
42021: IFFALSE 42119
// begin for i = 1 to Bunkers do
42023: LD_ADDR_VAR 0 2
42027: PUSH
42028: DOUBLE
42029: LD_INT 1
42031: DEC
42032: ST_TO_ADDR
42033: LD_VAR 0 3
42037: PUSH
42038: FOR_TO
42039: IFFALSE 42069
// ComEnterUnit ( Russian_soldiers [ i ] , Bunkers [ i ] ) ;
42041: LD_EXP 107
42045: PUSH
42046: LD_VAR 0 2
42050: ARRAY
42051: PPUSH
42052: LD_VAR 0 3
42056: PUSH
42057: LD_VAR 0 2
42061: ARRAY
42062: PPUSH
42063: CALL_OW 120
42067: GO 42038
42069: POP
42070: POP
// for i = Bunkers + 1 to Russian_soldiers do
42071: LD_ADDR_VAR 0 2
42075: PUSH
42076: DOUBLE
42077: LD_VAR 0 3
42081: PUSH
42082: LD_INT 1
42084: PLUS
42085: DEC
42086: ST_TO_ADDR
42087: LD_EXP 107
42091: PUSH
42092: FOR_TO
42093: IFFALSE 42115
// ComEnterUnit ( Russian_soldiers [ i ] , RusBarr1 ) ;
42095: LD_EXP 107
42099: PUSH
42100: LD_VAR 0 2
42104: ARRAY
42105: PPUSH
42106: LD_INT 27
42108: PPUSH
42109: CALL_OW 120
42113: GO 42092
42115: POP
42116: POP
// end else
42117: GO 42167
// begin for i = 1 to Russian_soldiers do
42119: LD_ADDR_VAR 0 2
42123: PUSH
42124: DOUBLE
42125: LD_INT 1
42127: DEC
42128: ST_TO_ADDR
42129: LD_EXP 107
42133: PUSH
42134: FOR_TO
42135: IFFALSE 42165
// ComEnterUnit ( Russian_soldiers [ i ] , Bunkers [ i ] ) ;
42137: LD_EXP 107
42141: PUSH
42142: LD_VAR 0 2
42146: ARRAY
42147: PPUSH
42148: LD_VAR 0 3
42152: PUSH
42153: LD_VAR 0 2
42157: ARRAY
42158: PPUSH
42159: CALL_OW 120
42163: GO 42134
42165: POP
42166: POP
// end ; Turrets = FilterAllUnits ( [ [ f_side , russians ] , [ f_type , unit_building ] , [ f_btype , b_turret ] ] ) ;
42167: LD_ADDR_VAR 0 4
42171: PUSH
42172: LD_INT 22
42174: PUSH
42175: LD_EXP 178
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 21
42186: PUSH
42187: LD_INT 3
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 30
42196: PUSH
42197: LD_INT 33
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: LIST
42208: PPUSH
42209: CALL_OW 69
42213: ST_TO_ADDR
// units_to_protect = Bunkers ^ Turrets ^ RusBarr1 ^ RusBarr2 ;
42214: LD_ADDR_VAR 0 5
42218: PUSH
42219: LD_VAR 0 3
42223: PUSH
42224: LD_VAR 0 4
42228: ADD
42229: PUSH
42230: LD_INT 27
42232: ADD
42233: PUSH
42234: LD_INT 3
42236: ADD
42237: ST_TO_ADDR
// Russian_reg_def_id = McRegistry ( russians , [ [ mc_reg_area_to_guard , Rus_Base ] , [ mc_reg_area_to_protect , Rus_Base ] , [ mc_reg_units_to_protect , units_to_protect ] , - mc_reg_only_important , - mc_reg_ignore_fog ] ) ;
42238: LD_ADDR_EXP 244
42242: PUSH
42243: LD_EXP 178
42247: PPUSH
42248: LD_INT 2
42250: PUSH
42251: LD_INT 5
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 3
42260: PUSH
42261: LD_INT 5
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 4
42270: PUSH
42271: LD_VAR 0 5
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 8
42282: NEG
42283: PUSH
42284: LD_INT 7
42286: NEG
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: PPUSH
42295: CALL_OW 399
42299: ST_TO_ADDR
// Russian_def_id = McDefend ( 100 , Russian_reg_def_id , Russian_soldiers ^ units_to_protect , [ [ mc_area_dont_leave , Rus_Base ] , [ mc_retreat_area_people , Rus_Heal ] , [ mc_retreat_lives_people , 550 ] ] ) ;
42300: LD_ADDR_EXP 245
42304: PUSH
42305: LD_INT 100
42307: PPUSH
42308: LD_EXP 244
42312: PPUSH
42313: LD_EXP 107
42317: PUSH
42318: LD_VAR 0 5
42322: ADD
42323: PPUSH
42324: LD_INT 2
42326: PUSH
42327: LD_INT 5
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 7
42336: PUSH
42337: LD_INT 27
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 5
42346: PUSH
42347: LD_INT 550
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: LIST
42358: PPUSH
42359: CALL_OW 401
42363: ST_TO_ADDR
// R_Eng = [ ] ;
42364: LD_ADDR_VAR 0 8
42368: PUSH
42369: EMPTY
42370: ST_TO_ADDR
// for i = 3 to Russian_Engineers do
42371: LD_ADDR_VAR 0 2
42375: PUSH
42376: DOUBLE
42377: LD_INT 3
42379: DEC
42380: ST_TO_ADDR
42381: LD_EXP 109
42385: PUSH
42386: FOR_TO
42387: IFFALSE 42413
// R_Eng = R_Eng ^ Russian_Engineers [ i ] ;
42389: LD_ADDR_VAR 0 8
42393: PUSH
42394: LD_VAR 0 8
42398: PUSH
42399: LD_EXP 109
42403: PUSH
42404: LD_VAR 0 2
42408: ARRAY
42409: ADD
42410: ST_TO_ADDR
42411: GO 42386
42413: POP
42414: POP
// McBase ( Russian_build_id , R_Eng , Russian_Buildings , [ ] , [ ] , [ mc_base_cont ] ) ;
42415: LD_EXP 246
42419: PPUSH
42420: LD_VAR 0 8
42424: PPUSH
42425: LD_EXP 113
42429: PPUSH
42430: EMPTY
42431: PPUSH
42432: EMPTY
42433: PPUSH
42434: LD_INT 1
42436: PUSH
42437: EMPTY
42438: LIST
42439: PPUSH
42440: CALL_OW 397
// end ;
42444: LD_VAR 0 1
42448: RET
// export function ChangeScientists ( Uns ) ; var Un , hex , InBarr1 , InBarr2 , eng , i ; begin
42449: LD_INT 0
42451: PPUSH
42452: PPUSH
42453: PPUSH
42454: PPUSH
42455: PPUSH
42456: PPUSH
42457: PPUSH
// eng = Uns isect Russian_engineers ;
42458: LD_ADDR_VAR 0 7
42462: PUSH
42463: LD_VAR 0 1
42467: PUSH
42468: LD_EXP 109
42472: ISECT
42473: ST_TO_ADDR
// Uns = Uns diff ( Uns isect Russian_engineers ) ;
42474: LD_ADDR_VAR 0 1
42478: PUSH
42479: LD_VAR 0 1
42483: PUSH
42484: LD_VAR 0 1
42488: PUSH
42489: LD_EXP 109
42493: ISECT
42494: DIFF
42495: ST_TO_ADDR
// AddMcUnits ( Russian_build_id , eng ) ;
42496: LD_EXP 246
42500: PPUSH
42501: LD_VAR 0 7
42505: PPUSH
42506: CALL_OW 390
// for i = 1 to 2 do
42510: LD_ADDR_VAR 0 8
42514: PUSH
42515: DOUBLE
42516: LD_INT 1
42518: DEC
42519: ST_TO_ADDR
42520: LD_INT 2
42522: PUSH
42523: FOR_TO
42524: IFFALSE 42578
// if Uns <> 0 then
42526: LD_VAR 0 1
42530: PUSH
42531: LD_INT 0
42533: NONEQUAL
42534: IFFALSE 42576
// begin Rus_Doctors = Rus_Doctors ^ Russian_engineers [ 1 ] ;
42536: LD_ADDR_EXP 112
42540: PUSH
42541: LD_EXP 112
42545: PUSH
42546: LD_EXP 109
42550: PUSH
42551: LD_INT 1
42553: ARRAY
42554: ADD
42555: ST_TO_ADDR
// Uns = Uns diff Russian_engineers [ 1 ] ;
42556: LD_ADDR_VAR 0 1
42560: PUSH
42561: LD_VAR 0 1
42565: PUSH
42566: LD_EXP 109
42570: PUSH
42571: LD_INT 1
42573: ARRAY
42574: DIFF
42575: ST_TO_ADDR
// end ;
42576: GO 42523
42578: POP
42579: POP
// for Un in Rus_Doctors do
42580: LD_ADDR_VAR 0 3
42584: PUSH
42585: LD_EXP 112
42589: PUSH
42590: FOR_IN
42591: IFFALSE 42647
// begin hex = RandHexArea ( Rus_Heal , true ) ;
42593: LD_ADDR_VAR 0 4
42597: PUSH
42598: LD_INT 27
42600: PPUSH
42601: LD_INT 1
42603: PPUSH
42604: CALL_OW 16
42608: ST_TO_ADDR
// SetRememberedX ( Un , hex [ 1 ] ) ;
42609: LD_VAR 0 3
42613: PPUSH
42614: LD_VAR 0 4
42618: PUSH
42619: LD_INT 1
42621: ARRAY
42622: PPUSH
42623: CALL_OW 231
// SetRememberedY ( Un , hex [ 2 ] ) ;
42627: LD_VAR 0 3
42631: PPUSH
42632: LD_VAR 0 4
42636: PUSH
42637: LD_INT 2
42639: ARRAY
42640: PPUSH
42641: CALL_OW 232
// end ;
42645: GO 42590
42647: POP
42648: POP
// ComReturn ( Rus_Doctors ) ;
42649: LD_EXP 112
42653: PPUSH
42654: CALL_OW 144
// InBarr1 = UnitsInside ( RusBarr1 ) ;
42658: LD_ADDR_VAR 0 5
42662: PUSH
42663: LD_INT 27
42665: PPUSH
42666: CALL_OW 313
42670: ST_TO_ADDR
// InBarr2 = UnitsInside ( RusBarr2 ) ;
42671: LD_ADDR_VAR 0 6
42675: PUSH
42676: LD_INT 3
42678: PPUSH
42679: CALL_OW 313
42683: ST_TO_ADDR
// for Un in Uns do
42684: LD_ADDR_VAR 0 3
42688: PUSH
42689: LD_VAR 0 1
42693: PUSH
42694: FOR_IN
42695: IFFALSE 42865
// begin if InBarr1 < 6 then
42697: LD_VAR 0 5
42701: PUSH
42702: LD_INT 6
42704: LESS
42705: IFFALSE 42765
// begin InBarr1 = InBarr1 + 1 ;
42707: LD_ADDR_VAR 0 5
42711: PUSH
42712: LD_VAR 0 5
42716: PUSH
42717: LD_INT 1
42719: PLUS
42720: ST_TO_ADDR
// Russian_soldiers = Russian_soldiers ^ Un ;
42721: LD_ADDR_EXP 107
42725: PUSH
42726: LD_EXP 107
42730: PUSH
42731: LD_VAR 0 3
42735: ADD
42736: ST_TO_ADDR
// AddMcUnits ( Russian_def_id , Un ) ;
42737: LD_EXP 245
42741: PPUSH
42742: LD_VAR 0 3
42746: PPUSH
42747: CALL_OW 390
// ComEnterUnit ( Un , RusBarr1 ) ;
42751: LD_VAR 0 3
42755: PPUSH
42756: LD_INT 27
42758: PPUSH
42759: CALL_OW 120
// end else
42763: GO 42863
// if InBarr2 < 6 then
42765: LD_VAR 0 6
42769: PUSH
42770: LD_INT 6
42772: LESS
42773: IFFALSE 42833
// begin InBarr2 = InBarr2 + 1 ;
42775: LD_ADDR_VAR 0 6
42779: PUSH
42780: LD_VAR 0 6
42784: PUSH
42785: LD_INT 1
42787: PLUS
42788: ST_TO_ADDR
// Russian_soldiers = Russian_soldiers ^ Un ;
42789: LD_ADDR_EXP 107
42793: PUSH
42794: LD_EXP 107
42798: PUSH
42799: LD_VAR 0 3
42803: ADD
42804: ST_TO_ADDR
// AddMcUnits ( Russian_def_id , Un ) ;
42805: LD_EXP 245
42809: PPUSH
42810: LD_VAR 0 3
42814: PPUSH
42815: CALL_OW 390
// ComEnterUnit ( Un , RusBarr2 ) ;
42819: LD_VAR 0 3
42823: PPUSH
42824: LD_INT 3
42826: PPUSH
42827: CALL_OW 120
// end else
42831: GO 42863
// begin Russian_soldiers = Russian_soldiers ^ Un ;
42833: LD_ADDR_EXP 107
42837: PUSH
42838: LD_EXP 107
42842: PUSH
42843: LD_VAR 0 3
42847: ADD
42848: ST_TO_ADDR
// AddMcUnits ( Russian_def_id , Un ) ;
42849: LD_EXP 245
42853: PPUSH
42854: LD_VAR 0 3
42858: PPUSH
42859: CALL_OW 390
// end ; end ;
42863: GO 42694
42865: POP
42866: POP
// end ;
42867: LD_VAR 0 2
42871: RET
// every 0 0$5 do var Un ;
42872: GO 42874
42874: DISABLE
42875: LD_INT 0
42877: PPUSH
// begin for Un in Rus_Doctors do
42878: LD_ADDR_VAR 0 1
42882: PUSH
42883: LD_EXP 112
42887: PUSH
42888: FOR_IN
42889: IFFALSE 42979
// begin if not ( HasTask ( Un ) ) then
42891: LD_VAR 0 1
42895: PPUSH
42896: CALL_OW 314
42900: NOT
42901: IFFALSE 42977
// if ( GetClass ( Un ) <> class_scientistic ) then
42903: LD_VAR 0 1
42907: PPUSH
42908: CALL_OW 257
42912: PUSH
42913: LD_INT 4
42915: NONEQUAL
42916: IFFALSE 42953
// begin ComEnterUnit ( Un , RusLab2 ) ;
42918: LD_VAR 0 1
42922: PPUSH
42923: LD_INT 1
42925: PPUSH
42926: CALL_OW 120
// AddComChangeProfession ( Un , class_scientistic ) ;
42930: LD_VAR 0 1
42934: PPUSH
42935: LD_INT 4
42937: PPUSH
42938: CALL_OW 183
// AddComReturn ( Un ) ;
42942: LD_VAR 0 1
42946: PPUSH
42947: CALL_OW 204
// end else
42951: GO 42977
// if not ( IsInArea ( Un , Rus_Heal ) ) then
42953: LD_VAR 0 1
42957: PPUSH
42958: LD_INT 27
42960: PPUSH
42961: CALL_OW 308
42965: NOT
42966: IFFALSE 42977
// ComReturn ( Un ) ;
42968: LD_VAR 0 1
42972: PPUSH
42973: CALL_OW 144
// end ;
42977: GO 42888
42979: POP
42980: POP
// end ;
42981: PPOPN 1
42983: END
// function GetRandomVehicle ( time ) ; var Rand_Veh , Selected , Credits , Probab , engine ; begin
42984: LD_INT 0
42986: PPUSH
42987: PPUSH
42988: PPUSH
42989: PPUSH
42990: PPUSH
42991: PPUSH
// Selected = false ;
42992: LD_ADDR_VAR 0 4
42996: PUSH
42997: LD_INT 0
42999: ST_TO_ADDR
// engine = engine_siberite ;
43000: LD_ADDR_VAR 0 7
43004: PUSH
43005: LD_INT 3
43007: ST_TO_ADDR
// repeat Probab = Rand ( 1 , 100 ) ;
43008: LD_ADDR_VAR 0 6
43012: PUSH
43013: LD_INT 1
43015: PPUSH
43016: LD_INT 100
43018: PPUSH
43019: CALL_OW 12
43023: ST_TO_ADDR
// case time of 1 :
43024: LD_VAR 0 1
43028: PUSH
43029: LD_INT 1
43031: DOUBLE
43032: EQUAL
43033: IFTRUE 43037
43035: GO 43083
43037: POP
// Rand_Veh = [ 1 , 2 , 3 , 4 , 5 , 6 ] [ Rand ( 1 , 6 ) ] ; 2 :
43038: LD_ADDR_VAR 0 3
43042: PUSH
43043: LD_INT 1
43045: PUSH
43046: LD_INT 2
43048: PUSH
43049: LD_INT 3
43051: PUSH
43052: LD_INT 4
43054: PUSH
43055: LD_INT 5
43057: PUSH
43058: LD_INT 6
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 1
43071: PPUSH
43072: LD_INT 6
43074: PPUSH
43075: CALL_OW 12
43079: ARRAY
43080: ST_TO_ADDR
43081: GO 43200
43083: LD_INT 2
43085: DOUBLE
43086: EQUAL
43087: IFTRUE 43091
43089: GO 43137
43091: POP
// Rand_Veh = [ 3 , 4 , 5 , 6 , 7 , 8 ] [ Rand ( 1 , 6 ) ] ; 3 :
43092: LD_ADDR_VAR 0 3
43096: PUSH
43097: LD_INT 3
43099: PUSH
43100: LD_INT 4
43102: PUSH
43103: LD_INT 5
43105: PUSH
43106: LD_INT 6
43108: PUSH
43109: LD_INT 7
43111: PUSH
43112: LD_INT 8
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 1
43125: PPUSH
43126: LD_INT 6
43128: PPUSH
43129: CALL_OW 12
43133: ARRAY
43134: ST_TO_ADDR
43135: GO 43200
43137: LD_INT 3
43139: DOUBLE
43140: EQUAL
43141: IFTRUE 43145
43143: GO 43199
43145: POP
// Rand_Veh = [ 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 ] [ Rand ( 1 , 8 ) ] ; end ;
43146: LD_ADDR_VAR 0 3
43150: PUSH
43151: LD_INT 5
43153: PUSH
43154: LD_INT 6
43156: PUSH
43157: LD_INT 7
43159: PUSH
43160: LD_INT 8
43162: PUSH
43163: LD_INT 9
43165: PUSH
43166: LD_INT 10
43168: PUSH
43169: LD_INT 11
43171: PUSH
43172: LD_INT 12
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 1
43187: PPUSH
43188: LD_INT 8
43190: PPUSH
43191: CALL_OW 12
43195: ARRAY
43196: ST_TO_ADDR
43197: GO 43200
43199: POP
// case Rand_Veh of 1 :
43200: LD_VAR 0 3
43204: PUSH
43205: LD_INT 1
43207: DOUBLE
43208: EQUAL
43209: IFTRUE 43213
43211: GO 43306
43213: POP
// begin if ( time <= 1 and Probab < 60 ) or ( time <= 3 and Probab < 20 ) then
43214: LD_VAR 0 1
43218: PUSH
43219: LD_INT 1
43221: LESSEQUAL
43222: PUSH
43223: LD_VAR 0 6
43227: PUSH
43228: LD_INT 60
43230: LESS
43231: AND
43232: PUSH
43233: LD_VAR 0 1
43237: PUSH
43238: LD_INT 3
43240: LESSEQUAL
43241: PUSH
43242: LD_VAR 0 6
43246: PUSH
43247: LD_INT 20
43249: LESS
43250: AND
43251: OR
43252: IFFALSE 43304
// begin Selected = true ;
43254: LD_ADDR_VAR 0 4
43258: PUSH
43259: LD_INT 1
43261: ST_TO_ADDR
// Credits = 3 ;
43262: LD_ADDR_VAR 0 5
43266: PUSH
43267: LD_INT 3
43269: ST_TO_ADDR
// R_Attack_Group = R_Attack_Group ^ [ [ ru_medium_tracked , engine , control_computer , ru_heavy_machine_gun ] ] ;
43270: LD_ADDR_EXP 121
43274: PUSH
43275: LD_EXP 121
43279: PUSH
43280: LD_INT 22
43282: PUSH
43283: LD_VAR 0 7
43287: PUSH
43288: LD_INT 3
43290: PUSH
43291: LD_INT 42
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: PUSH
43300: EMPTY
43301: LIST
43302: ADD
43303: ST_TO_ADDR
// end ; end ; 2 :
43304: GO 44123
43306: LD_INT 2
43308: DOUBLE
43309: EQUAL
43310: IFTRUE 43314
43312: GO 43407
43314: POP
// begin if ( time <= 1 and Probab < 80 ) or ( time <= 3 and Probab < 30 ) then
43315: LD_VAR 0 1
43319: PUSH
43320: LD_INT 1
43322: LESSEQUAL
43323: PUSH
43324: LD_VAR 0 6
43328: PUSH
43329: LD_INT 80
43331: LESS
43332: AND
43333: PUSH
43334: LD_VAR 0 1
43338: PUSH
43339: LD_INT 3
43341: LESSEQUAL
43342: PUSH
43343: LD_VAR 0 6
43347: PUSH
43348: LD_INT 30
43350: LESS
43351: AND
43352: OR
43353: IFFALSE 43405
// begin Selected = true ;
43355: LD_ADDR_VAR 0 4
43359: PUSH
43360: LD_INT 1
43362: ST_TO_ADDR
// Credits = 4 ;
43363: LD_ADDR_VAR 0 5
43367: PUSH
43368: LD_INT 4
43370: ST_TO_ADDR
// R_Attack_Group = R_Attack_Group ^ [ [ ru_heavy_tracked , engine , control_computer , ru_heavy_machine_gun ] ] ;
43371: LD_ADDR_EXP 121
43375: PUSH
43376: LD_EXP 121
43380: PUSH
43381: LD_INT 24
43383: PUSH
43384: LD_VAR 0 7
43388: PUSH
43389: LD_INT 3
43391: PUSH
43392: LD_INT 42
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: PUSH
43401: EMPTY
43402: LIST
43403: ADD
43404: ST_TO_ADDR
// end ; end ; 4 :
43405: GO 44123
43407: LD_INT 4
43409: DOUBLE
43410: EQUAL
43411: IFTRUE 43415
43413: GO 43528
43415: POP
// begin if ( time <= 1 and Probab < 100 ) or ( time <= 3 and Probab < 80 ) or ( time > 3 and Probab < 50 ) then
43416: LD_VAR 0 1
43420: PUSH
43421: LD_INT 1
43423: LESSEQUAL
43424: PUSH
43425: LD_VAR 0 6
43429: PUSH
43430: LD_INT 100
43432: LESS
43433: AND
43434: PUSH
43435: LD_VAR 0 1
43439: PUSH
43440: LD_INT 3
43442: LESSEQUAL
43443: PUSH
43444: LD_VAR 0 6
43448: PUSH
43449: LD_INT 80
43451: LESS
43452: AND
43453: OR
43454: PUSH
43455: LD_VAR 0 1
43459: PUSH
43460: LD_INT 3
43462: GREATER
43463: PUSH
43464: LD_VAR 0 6
43468: PUSH
43469: LD_INT 50
43471: LESS
43472: AND
43473: OR
43474: IFFALSE 43526
// begin Selected = true ;
43476: LD_ADDR_VAR 0 4
43480: PUSH
43481: LD_INT 1
43483: ST_TO_ADDR
// Credits = 5 ;
43484: LD_ADDR_VAR 0 5
43488: PUSH
43489: LD_INT 5
43491: ST_TO_ADDR
// R_Attack_Group = R_Attack_Group ^ [ [ ru_medium_tracked , engine , control_computer , ru_gatling_gun ] ] ;
43492: LD_ADDR_EXP 121
43496: PUSH
43497: LD_EXP 121
43501: PUSH
43502: LD_INT 22
43504: PUSH
43505: LD_VAR 0 7
43509: PUSH
43510: LD_INT 3
43512: PUSH
43513: LD_INT 43
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: LIST
43520: LIST
43521: PUSH
43522: EMPTY
43523: LIST
43524: ADD
43525: ST_TO_ADDR
// end ; end ; 3 :
43526: GO 44123
43528: LD_INT 3
43530: DOUBLE
43531: EQUAL
43532: IFTRUE 43536
43534: GO 43629
43536: POP
// begin if ( time <= 1 and Probab < 100 ) or ( time <= 3 and Probab < 40 ) then
43537: LD_VAR 0 1
43541: PUSH
43542: LD_INT 1
43544: LESSEQUAL
43545: PUSH
43546: LD_VAR 0 6
43550: PUSH
43551: LD_INT 100
43553: LESS
43554: AND
43555: PUSH
43556: LD_VAR 0 1
43560: PUSH
43561: LD_INT 3
43563: LESSEQUAL
43564: PUSH
43565: LD_VAR 0 6
43569: PUSH
43570: LD_INT 40
43572: LESS
43573: AND
43574: OR
43575: IFFALSE 43627
// begin Selected = true ;
43577: LD_ADDR_VAR 0 4
43581: PUSH
43582: LD_INT 1
43584: ST_TO_ADDR
// Credits = 5 ;
43585: LD_ADDR_VAR 0 5
43589: PUSH
43590: LD_INT 5
43592: ST_TO_ADDR
// R_Attack_Group = R_Attack_Group ^ [ [ ru_medium_tracked , engine , control_computer , ru_gun ] ] ;
43593: LD_ADDR_EXP 121
43597: PUSH
43598: LD_EXP 121
43602: PUSH
43603: LD_INT 22
43605: PUSH
43606: LD_VAR 0 7
43610: PUSH
43611: LD_INT 3
43613: PUSH
43614: LD_INT 44
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: PUSH
43623: EMPTY
43624: LIST
43625: ADD
43626: ST_TO_ADDR
// end ; end ; 5 :
43627: GO 44123
43629: LD_INT 5
43631: DOUBLE
43632: EQUAL
43633: IFTRUE 43637
43635: GO 43690
43637: POP
// begin Selected = true ;
43638: LD_ADDR_VAR 0 4
43642: PUSH
43643: LD_INT 1
43645: ST_TO_ADDR
// Credits = 7 ;
43646: LD_ADDR_VAR 0 5
43650: PUSH
43651: LD_INT 7
43653: ST_TO_ADDR
// R_Attack_Group = R_Attack_Group ^ [ [ ru_heavy_tracked , engine , control_computer , ru_gatling_gun ] ] ;
43654: LD_ADDR_EXP 121
43658: PUSH
43659: LD_EXP 121
43663: PUSH
43664: LD_INT 24
43666: PUSH
43667: LD_VAR 0 7
43671: PUSH
43672: LD_INT 3
43674: PUSH
43675: LD_INT 43
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: PUSH
43684: EMPTY
43685: LIST
43686: ADD
43687: ST_TO_ADDR
// end ; 6 :
43688: GO 44123
43690: LD_INT 6
43692: DOUBLE
43693: EQUAL
43694: IFTRUE 43698
43696: GO 43811
43698: POP
// begin if ( time <= 1 and Probab < 100 ) or ( time <= 3 and Probab < 60 ) or ( time > 3 and Probab < 20 ) then
43699: LD_VAR 0 1
43703: PUSH
43704: LD_INT 1
43706: LESSEQUAL
43707: PUSH
43708: LD_VAR 0 6
43712: PUSH
43713: LD_INT 100
43715: LESS
43716: AND
43717: PUSH
43718: LD_VAR 0 1
43722: PUSH
43723: LD_INT 3
43725: LESSEQUAL
43726: PUSH
43727: LD_VAR 0 6
43731: PUSH
43732: LD_INT 60
43734: LESS
43735: AND
43736: OR
43737: PUSH
43738: LD_VAR 0 1
43742: PUSH
43743: LD_INT 3
43745: GREATER
43746: PUSH
43747: LD_VAR 0 6
43751: PUSH
43752: LD_INT 20
43754: LESS
43755: AND
43756: OR
43757: IFFALSE 43809
// begin Selected = true ;
43759: LD_ADDR_VAR 0 4
43763: PUSH
43764: LD_INT 1
43766: ST_TO_ADDR
// Credits = 7 ;
43767: LD_ADDR_VAR 0 5
43771: PUSH
43772: LD_INT 7
43774: ST_TO_ADDR
// R_Attack_Group = R_Attack_Group ^ [ [ ru_heavy_tracked , engine , control_computer , ru_gun ] ] ;
43775: LD_ADDR_EXP 121
43779: PUSH
43780: LD_EXP 121
43784: PUSH
43785: LD_INT 24
43787: PUSH
43788: LD_VAR 0 7
43792: PUSH
43793: LD_INT 3
43795: PUSH
43796: LD_INT 44
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: PUSH
43805: EMPTY
43806: LIST
43807: ADD
43808: ST_TO_ADDR
// end ; end ; 7 :
43809: GO 44123
43811: LD_INT 7
43813: DOUBLE
43814: EQUAL
43815: IFTRUE 43819
43817: GO 43872
43819: POP
// begin Selected = true ;
43820: LD_ADDR_VAR 0 4
43824: PUSH
43825: LD_INT 1
43827: ST_TO_ADDR
// Credits = 9 ;
43828: LD_ADDR_VAR 0 5
43832: PUSH
43833: LD_INT 9
43835: ST_TO_ADDR
// R_Attack_Group = R_Attack_Group ^ [ [ ru_medium_tracked , engine , control_computer , ru_rocket_launcher ] ] ;
43836: LD_ADDR_EXP 121
43840: PUSH
43841: LD_EXP 121
43845: PUSH
43846: LD_INT 22
43848: PUSH
43849: LD_VAR 0 7
43853: PUSH
43854: LD_INT 3
43856: PUSH
43857: LD_INT 45
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: PUSH
43866: EMPTY
43867: LIST
43868: ADD
43869: ST_TO_ADDR
// end ; 8 :
43870: GO 44123
43872: LD_INT 8
43874: DOUBLE
43875: EQUAL
43876: IFTRUE 43880
43878: GO 43933
43880: POP
// begin Selected = true ;
43881: LD_ADDR_VAR 0 4
43885: PUSH
43886: LD_INT 1
43888: ST_TO_ADDR
// Credits = 11 ;
43889: LD_ADDR_VAR 0 5
43893: PUSH
43894: LD_INT 11
43896: ST_TO_ADDR
// R_Attack_Group = R_Attack_Group ^ [ [ ru_heavy_tracked , engine , control_computer , ru_rocket_launcher ] ] ;
43897: LD_ADDR_EXP 121
43901: PUSH
43902: LD_EXP 121
43906: PUSH
43907: LD_INT 24
43909: PUSH
43910: LD_VAR 0 7
43914: PUSH
43915: LD_INT 3
43917: PUSH
43918: LD_INT 45
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: PUSH
43927: EMPTY
43928: LIST
43929: ADD
43930: ST_TO_ADDR
// end ; 9 :
43931: GO 44123
43933: LD_INT 9
43935: DOUBLE
43936: EQUAL
43937: IFTRUE 43941
43939: GO 43994
43941: POP
// begin Selected = true ;
43942: LD_ADDR_VAR 0 4
43946: PUSH
43947: LD_INT 1
43949: ST_TO_ADDR
// Credits = 11 ;
43950: LD_ADDR_VAR 0 5
43954: PUSH
43955: LD_INT 11
43957: ST_TO_ADDR
// R_Attack_Group = R_Attack_Group ^ [ [ ru_heavy_tracked , engine , control_computer , ru_heavy_gun ] ] ;
43958: LD_ADDR_EXP 121
43962: PUSH
43963: LD_EXP 121
43967: PUSH
43968: LD_INT 24
43970: PUSH
43971: LD_VAR 0 7
43975: PUSH
43976: LD_INT 3
43978: PUSH
43979: LD_INT 46
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: PUSH
43988: EMPTY
43989: LIST
43990: ADD
43991: ST_TO_ADDR
// end ; 10 , 11 :
43992: GO 44123
43994: LD_INT 10
43996: DOUBLE
43997: EQUAL
43998: IFTRUE 44008
44000: LD_INT 11
44002: DOUBLE
44003: EQUAL
44004: IFTRUE 44008
44006: GO 44061
44008: POP
// begin Selected = true ;
44009: LD_ADDR_VAR 0 4
44013: PUSH
44014: LD_INT 1
44016: ST_TO_ADDR
// Credits = 15 ;
44017: LD_ADDR_VAR 0 5
44021: PUSH
44022: LD_INT 15
44024: ST_TO_ADDR
// R_Attack_Group = R_Attack_Group ^ [ [ ru_heavy_tracked , engine , control_computer , ru_rocket ] ] ;
44025: LD_ADDR_EXP 121
44029: PUSH
44030: LD_EXP 121
44034: PUSH
44035: LD_INT 24
44037: PUSH
44038: LD_VAR 0 7
44042: PUSH
44043: LD_INT 3
44045: PUSH
44046: LD_INT 47
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: PUSH
44055: EMPTY
44056: LIST
44057: ADD
44058: ST_TO_ADDR
// end ; 12 :
44059: GO 44123
44061: LD_INT 12
44063: DOUBLE
44064: EQUAL
44065: IFTRUE 44069
44067: GO 44122
44069: POP
// begin Selected = true ;
44070: LD_ADDR_VAR 0 4
44074: PUSH
44075: LD_INT 1
44077: ST_TO_ADDR
// Credits = 4 ;
44078: LD_ADDR_VAR 0 5
44082: PUSH
44083: LD_INT 4
44085: ST_TO_ADDR
// R_Attack_Group = R_Attack_Group ^ [ [ ru_heavy_tracked , engine , control_computer , ru_time_lapser ] ] ;
44086: LD_ADDR_EXP 121
44090: PUSH
44091: LD_EXP 121
44095: PUSH
44096: LD_INT 24
44098: PUSH
44099: LD_VAR 0 7
44103: PUSH
44104: LD_INT 3
44106: PUSH
44107: LD_INT 49
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: PUSH
44116: EMPTY
44117: LIST
44118: ADD
44119: ST_TO_ADDR
// end ; end ;
44120: GO 44123
44122: POP
// until Selected ;
44123: LD_VAR 0 4
44127: IFFALSE 43008
// Result = Credits ;
44129: LD_ADDR_VAR 0 2
44133: PUSH
44134: LD_VAR 0 5
44138: ST_TO_ADDR
// end ;
44139: LD_VAR 0 2
44143: RET
// function GenerateGroup ( Credits , time ) ; var Used_Credits , i ; begin
44144: LD_INT 0
44146: PPUSH
44147: PPUSH
44148: PPUSH
// Used_Credits = 0 ;
44149: LD_ADDR_VAR 0 4
44153: PUSH
44154: LD_INT 0
44156: ST_TO_ADDR
// if Russian_Siberite_Attack then
44157: LD_EXP 215
44161: IFFALSE 44273
// begin if CanBeConstructed ( GetUnitNumber ( 195 , 84 ) , ru_heavy_tracked , engine_siberite , control_computer , ru_siberium_rocket ) or CanBeConstructed ( GetUnitNumber ( 170 , 35 ) , ru_heavy_tracked , engine_siberite , control_computer , ru_siberium_rocket ) then
44163: LD_INT 195
44165: PPUSH
44166: LD_INT 84
44168: PPUSH
44169: CALL_OW 438
44173: PPUSH
44174: LD_INT 24
44176: PPUSH
44177: LD_INT 3
44179: PPUSH
44180: LD_INT 3
44182: PPUSH
44183: LD_INT 48
44185: PPUSH
44186: CALL_OW 448
44190: PUSH
44191: LD_INT 170
44193: PPUSH
44194: LD_INT 35
44196: PPUSH
44197: CALL_OW 438
44201: PPUSH
44202: LD_INT 24
44204: PPUSH
44205: LD_INT 3
44207: PPUSH
44208: LD_INT 3
44210: PPUSH
44211: LD_INT 48
44213: PPUSH
44214: CALL_OW 448
44218: OR
44219: IFFALSE 44273
// begin for i = 1 to 2 do
44221: LD_ADDR_VAR 0 5
44225: PUSH
44226: DOUBLE
44227: LD_INT 1
44229: DEC
44230: ST_TO_ADDR
44231: LD_INT 2
44233: PUSH
44234: FOR_TO
44235: IFFALSE 44271
// R_Attack_Group = R_Attack_Group ^ [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_siberium_rocket ] ] ;
44237: LD_ADDR_EXP 121
44241: PUSH
44242: LD_EXP 121
44246: PUSH
44247: LD_INT 24
44249: PUSH
44250: LD_INT 3
44252: PUSH
44253: LD_INT 3
44255: PUSH
44256: LD_INT 48
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: PUSH
44265: EMPTY
44266: LIST
44267: ADD
44268: ST_TO_ADDR
44269: GO 44234
44271: POP
44272: POP
// end ; end ; repeat Used_Credits = Used_Credits + GetRandomVehicle ( time ) ;
44273: LD_ADDR_VAR 0 4
44277: PUSH
44278: LD_VAR 0 4
44282: PUSH
44283: LD_VAR 0 2
44287: PPUSH
44288: CALL 42984 0 1
44292: PLUS
44293: ST_TO_ADDR
// until Credits < Used_Credits ;
44294: LD_VAR 0 1
44298: PUSH
44299: LD_VAR 0 4
44303: LESS
44304: IFFALSE 44273
// result = Used_Credits ;
44306: LD_ADDR_VAR 0 3
44310: PUSH
44311: LD_VAR 0 4
44315: ST_TO_ADDR
// end ;
44316: LD_VAR 0 3
44320: RET
// function GenerateAttackingGroup ; var Power , Next_time , Number_of_units , Person , veh , i , Used_Credits , Credits , Strength_of_attack ; begin
44321: LD_INT 0
44323: PPUSH
44324: PPUSH
44325: PPUSH
44326: PPUSH
44327: PPUSH
44328: PPUSH
44329: PPUSH
44330: PPUSH
44331: PPUSH
44332: PPUSH
// Power = Rand ( 1 , 3 ) ;
44333: LD_ADDR_VAR 0 2
44337: PUSH
44338: LD_INT 1
44340: PPUSH
44341: LD_INT 3
44343: PPUSH
44344: CALL_OW 12
44348: ST_TO_ADDR
// Number_of_units = Rand ( 1 , 2 ) ;
44349: LD_ADDR_VAR 0 4
44353: PUSH
44354: LD_INT 1
44356: PPUSH
44357: LD_INT 2
44359: PPUSH
44360: CALL_OW 12
44364: ST_TO_ADDR
// R_Attack_Group = [ ] ;
44365: LD_ADDR_EXP 121
44369: PUSH
44370: EMPTY
44371: ST_TO_ADDR
// if tick < Rus_Attack_Time + 10 10$0 then
44372: LD_OWVAR 1
44376: PUSH
44377: LD_EXP 130
44381: PUSH
44382: LD_INT 21000
44384: PLUS
44385: LESS
44386: IFFALSE 44548
// begin case R_Attack_Counter of 1 :
44388: LD_EXP 117
44392: PUSH
44393: LD_INT 1
44395: DOUBLE
44396: EQUAL
44397: IFTRUE 44401
44399: GO 44466
44401: POP
// begin R_Attack_Group = R_Attack_Group ;
44402: LD_ADDR_EXP 121
44406: PUSH
44407: LD_EXP 121
44411: ST_TO_ADDR
// for i = 1 to 3 do
44412: LD_ADDR_VAR 0 7
44416: PUSH
44417: DOUBLE
44418: LD_INT 1
44420: DEC
44421: ST_TO_ADDR
44422: LD_INT 3
44424: PUSH
44425: FOR_TO
44426: IFFALSE 44462
// begin R_Attack_Group = R_Attack_Group ^ [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] ] ;
44428: LD_ADDR_EXP 121
44432: PUSH
44433: LD_EXP 121
44437: PUSH
44438: LD_INT 22
44440: PUSH
44441: LD_INT 3
44443: PUSH
44444: LD_INT 3
44446: PUSH
44447: LD_INT 44
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: PUSH
44456: EMPTY
44457: LIST
44458: ADD
44459: ST_TO_ADDR
// end ;
44460: GO 44425
44462: POP
44463: POP
// end ; else
44464: GO 44546
44466: POP
// begin Credits = 20 ;
44467: LD_ADDR_VAR 0 9
44471: PUSH
44472: LD_INT 20
44474: ST_TO_ADDR
// Used_Credits = GenerateGroup ( Credits + R_Attack_Overflow , 1 ) ;
44475: LD_ADDR_VAR 0 8
44479: PUSH
44480: LD_VAR 0 9
44484: PUSH
44485: LD_EXP 214
44489: PLUS
44490: PPUSH
44491: LD_INT 1
44493: PPUSH
44494: CALL 44144 0 2
44498: ST_TO_ADDR
// R_Attack_Overflow = ( Credits + R_Attack_Overflow ) - Used_Credits ;
44499: LD_ADDR_EXP 214
44503: PUSH
44504: LD_VAR 0 9
44508: PUSH
44509: LD_EXP 214
44513: PLUS
44514: PUSH
44515: LD_VAR 0 8
44519: MINUS
44520: ST_TO_ADDR
// R_attack_time = [ 5 5$0 , 4 4$30 , 4 4$0 ] [ Difficulty ] ;
44521: LD_ADDR_EXP 115
44525: PUSH
44526: LD_INT 10500
44528: PUSH
44529: LD_INT 9450
44531: PUSH
44532: LD_INT 8400
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: LIST
44539: PUSH
44540: LD_OWVAR 67
44544: ARRAY
44545: ST_TO_ADDR
// end ; end ; end else
44546: GO 44769
// if tick < Rus_Attack_Time + 30 30$0 then
44548: LD_OWVAR 1
44552: PUSH
44553: LD_EXP 130
44557: PUSH
44558: LD_INT 63000
44560: PLUS
44561: LESS
44562: IFFALSE 44645
// begin Credits = 20 ;
44564: LD_ADDR_VAR 0 9
44568: PUSH
44569: LD_INT 20
44571: ST_TO_ADDR
// Used_Credits = GenerateGroup ( Credits + R_Attack_Overflow , 2 ) ;
44572: LD_ADDR_VAR 0 8
44576: PUSH
44577: LD_VAR 0 9
44581: PUSH
44582: LD_EXP 214
44586: PLUS
44587: PPUSH
44588: LD_INT 2
44590: PPUSH
44591: CALL 44144 0 2
44595: ST_TO_ADDR
// R_Attack_Overflow = ( Credits + R_Attack_Overflow ) - Used_Credits ;
44596: LD_ADDR_EXP 214
44600: PUSH
44601: LD_VAR 0 9
44605: PUSH
44606: LD_EXP 214
44610: PLUS
44611: PUSH
44612: LD_VAR 0 8
44616: MINUS
44617: ST_TO_ADDR
// R_attack_time = [ 7 7$0 , 6 6$30 , 6 6$0 ] [ Difficulty ] ;
44618: LD_ADDR_EXP 115
44622: PUSH
44623: LD_INT 14700
44625: PUSH
44626: LD_INT 13650
44628: PUSH
44629: LD_INT 12600
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: LIST
44636: PUSH
44637: LD_OWVAR 67
44641: ARRAY
44642: ST_TO_ADDR
// end else
44643: GO 44769
// begin Strength_of_attack = Rand ( 1 , 7 ) ;
44645: LD_ADDR_VAR 0 10
44649: PUSH
44650: LD_INT 1
44652: PPUSH
44653: LD_INT 7
44655: PPUSH
44656: CALL_OW 12
44660: ST_TO_ADDR
// Credits = [ 6 , 8 , 10 ] [ Difficulty ] * Strength_of_attack ;
44661: LD_ADDR_VAR 0 9
44665: PUSH
44666: LD_INT 6
44668: PUSH
44669: LD_INT 8
44671: PUSH
44672: LD_INT 10
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: LIST
44679: PUSH
44680: LD_OWVAR 67
44684: ARRAY
44685: PUSH
44686: LD_VAR 0 10
44690: MUL
44691: ST_TO_ADDR
// Used_Credits = GenerateGroup ( Credits + R1_Attack_Overflow , 3 ) ;
44692: LD_ADDR_VAR 0 8
44696: PUSH
44697: LD_VAR 0 9
44701: PUSH
44702: LD_EXP 191
44706: PLUS
44707: PPUSH
44708: LD_INT 3
44710: PPUSH
44711: CALL 44144 0 2
44715: ST_TO_ADDR
// R1_Attack_Overflow = ( Credits + R1_Attack_Overflow ) - Used_Credits ;
44716: LD_ADDR_EXP 191
44720: PUSH
44721: LD_VAR 0 9
44725: PUSH
44726: LD_EXP 191
44730: PLUS
44731: PUSH
44732: LD_VAR 0 8
44736: MINUS
44737: ST_TO_ADDR
// R1_attack_time = [ 0 0$30 , 0 0$25 , 0 0$20 ] [ Difficulty ] * Strength_of_attack ;
44738: LD_ADDR_EXP 114
44742: PUSH
44743: LD_INT 1050
44745: PUSH
44746: LD_INT 875
44748: PUSH
44749: LD_INT 700
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: LIST
44756: PUSH
44757: LD_OWVAR 67
44761: ARRAY
44762: PUSH
44763: LD_VAR 0 10
44767: MUL
44768: ST_TO_ADDR
// end ; end ;
44769: LD_VAR 0 1
44773: RET
// function GeneratePatrolingGroup ; var i ; begin
44774: LD_INT 0
44776: PPUSH
44777: PPUSH
// R_Patrol_group = [ ] ;
44778: LD_ADDR_EXP 124
44782: PUSH
44783: EMPTY
44784: ST_TO_ADDR
// for i = 1 to 1 - ( R_Patrol_Group ^ [ ] ) do
44785: LD_ADDR_VAR 0 2
44789: PUSH
44790: DOUBLE
44791: LD_INT 1
44793: DEC
44794: ST_TO_ADDR
44795: LD_INT 1
44797: PUSH
44798: LD_EXP 124
44802: PUSH
44803: EMPTY
44804: ADD
44805: MINUS
44806: PUSH
44807: FOR_TO
44808: IFFALSE 44844
// R_Patrol_Group = R_Patrol_Group ^ [ [ ru_medium_tracked , engine_siberite , control_computer , ru_heavy_machine_gun ] ] ;
44810: LD_ADDR_EXP 124
44814: PUSH
44815: LD_EXP 124
44819: PUSH
44820: LD_INT 22
44822: PUSH
44823: LD_INT 3
44825: PUSH
44826: LD_INT 3
44828: PUSH
44829: LD_INT 42
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: PUSH
44838: EMPTY
44839: LIST
44840: ADD
44841: ST_TO_ADDR
44842: GO 44807
44844: POP
44845: POP
// end ;
44846: LD_VAR 0 1
44850: RET
// export function BuildGroups ( Constructed_vehicle ) ; var Un , i ; begin
44851: LD_INT 0
44853: PPUSH
44854: PPUSH
44855: PPUSH
// if Constructed_vehicle <> 0 then
44856: LD_VAR 0 1
44860: PUSH
44861: LD_INT 0
44863: NONEQUAL
44864: IFFALSE 44976
// begin if ( GetWeapon ( Constructed_vehicle ) = ru_heavy_machine_gun ) then
44866: LD_VAR 0 1
44870: PPUSH
44871: CALL_OW 264
44875: PUSH
44876: LD_INT 42
44878: EQUAL
44879: IFFALSE 44913
// begin R_Constructed_Patrol = R_Constructed_Patrol ^ Constructed_vehicle ;
44881: LD_ADDR_EXP 126
44885: PUSH
44886: LD_EXP 126
44890: PUSH
44891: LD_VAR 0 1
44895: ADD
44896: ST_TO_ADDR
// AddMcUnits ( Russian_def_id , Constructed_vehicle ) end else
44897: LD_EXP 245
44901: PPUSH
44902: LD_VAR 0 1
44906: PPUSH
44907: CALL_OW 390
44911: GO 44976
// if ( GetWeapon ( Constructed_vehicle ) = ru_siberium_rocket ) then
44913: LD_VAR 0 1
44917: PPUSH
44918: CALL_OW 264
44922: PUSH
44923: LD_INT 48
44925: EQUAL
44926: IFFALSE 44946
// begin Russian_Siberite_rockets = Russian_Siberite_rockets ^ Constructed_vehicle ;
44928: LD_ADDR_EXP 216
44932: PUSH
44933: LD_EXP 216
44937: PUSH
44938: LD_VAR 0 1
44942: ADD
44943: ST_TO_ADDR
// end else
44944: GO 44976
// begin R_Constructed_Attack = R_Constructed_Attack ^ Constructed_vehicle ;
44946: LD_ADDR_EXP 125
44950: PUSH
44951: LD_EXP 125
44955: PUSH
44956: LD_VAR 0 1
44960: ADD
44961: ST_TO_ADDR
// AddMcUnits ( Russian_def_id , Constructed_vehicle ) ;
44962: LD_EXP 245
44966: PPUSH
44967: LD_VAR 0 1
44971: PPUSH
44972: CALL_OW 390
// end end ; i = 1 ;
44976: LD_ADDR_VAR 0 4
44980: PUSH
44981: LD_INT 1
44983: ST_TO_ADDR
// while i <= R_Attack_Group do
44984: LD_VAR 0 4
44988: PUSH
44989: LD_EXP 121
44993: LESSEQUAL
44994: IFFALSE 45190
// begin if not ( CanBeConstructed ( GetUnitNumber ( 195 , 84 ) , R_Attack_Group [ i ] [ 1 ] , R_Attack_Group [ i ] [ 2 ] , R_Attack_Group [ i ] [ 3 ] , R_Attack_Group [ i ] [ 4 ] ) ) and not ( CanBeConstructed ( GetUnitNumber ( 170 , 35 ) , R_Attack_Group [ i ] [ 1 ] , R_Attack_Group [ i ] [ 2 ] , R_Attack_Group [ i ] [ 3 ] , R_Attack_Group [ i ] [ 4 ] ) ) then
44996: LD_INT 195
44998: PPUSH
44999: LD_INT 84
45001: PPUSH
45002: CALL_OW 438
45006: PPUSH
45007: LD_EXP 121
45011: PUSH
45012: LD_VAR 0 4
45016: ARRAY
45017: PUSH
45018: LD_INT 1
45020: ARRAY
45021: PPUSH
45022: LD_EXP 121
45026: PUSH
45027: LD_VAR 0 4
45031: ARRAY
45032: PUSH
45033: LD_INT 2
45035: ARRAY
45036: PPUSH
45037: LD_EXP 121
45041: PUSH
45042: LD_VAR 0 4
45046: ARRAY
45047: PUSH
45048: LD_INT 3
45050: ARRAY
45051: PPUSH
45052: LD_EXP 121
45056: PUSH
45057: LD_VAR 0 4
45061: ARRAY
45062: PUSH
45063: LD_INT 4
45065: ARRAY
45066: PPUSH
45067: CALL_OW 448
45071: NOT
45072: PUSH
45073: LD_INT 170
45075: PPUSH
45076: LD_INT 35
45078: PPUSH
45079: CALL_OW 438
45083: PPUSH
45084: LD_EXP 121
45088: PUSH
45089: LD_VAR 0 4
45093: ARRAY
45094: PUSH
45095: LD_INT 1
45097: ARRAY
45098: PPUSH
45099: LD_EXP 121
45103: PUSH
45104: LD_VAR 0 4
45108: ARRAY
45109: PUSH
45110: LD_INT 2
45112: ARRAY
45113: PPUSH
45114: LD_EXP 121
45118: PUSH
45119: LD_VAR 0 4
45123: ARRAY
45124: PUSH
45125: LD_INT 3
45127: ARRAY
45128: PPUSH
45129: LD_EXP 121
45133: PUSH
45134: LD_VAR 0 4
45138: ARRAY
45139: PUSH
45140: LD_INT 4
45142: ARRAY
45143: PPUSH
45144: CALL_OW 448
45148: NOT
45149: AND
45150: IFFALSE 45174
// R_Attack_Group = Delete ( R_Attack_Group , i ) else
45152: LD_ADDR_EXP 121
45156: PUSH
45157: LD_EXP 121
45161: PPUSH
45162: LD_VAR 0 4
45166: PPUSH
45167: CALL_OW 3
45171: ST_TO_ADDR
45172: GO 45188
// i = i + 1 ;
45174: LD_ADDR_VAR 0 4
45178: PUSH
45179: LD_VAR 0 4
45183: PUSH
45184: LD_INT 1
45186: PLUS
45187: ST_TO_ADDR
// end ;
45188: GO 44984
// i = 1 ;
45190: LD_ADDR_VAR 0 4
45194: PUSH
45195: LD_INT 1
45197: ST_TO_ADDR
// while i <= R_Patrol_Group do
45198: LD_VAR 0 4
45202: PUSH
45203: LD_EXP 124
45207: LESSEQUAL
45208: IFFALSE 45404
// begin if not ( CanBeConstructed ( GetUnitNumber ( 195 , 84 ) , R_Patrol_Group [ i ] [ 1 ] , R_Patrol_Group [ i ] [ 2 ] , R_Patrol_Group [ i ] [ 3 ] , R_Patrol_Group [ i ] [ 4 ] ) ) and not ( CanBeConstructed ( GetUnitNumber ( 170 , 35 ) , R_Patrol_Group [ i ] [ 1 ] , R_Patrol_Group [ i ] [ 2 ] , R_Patrol_Group [ i ] [ 3 ] , R_Patrol_Group [ i ] [ 4 ] ) ) then
45210: LD_INT 195
45212: PPUSH
45213: LD_INT 84
45215: PPUSH
45216: CALL_OW 438
45220: PPUSH
45221: LD_EXP 124
45225: PUSH
45226: LD_VAR 0 4
45230: ARRAY
45231: PUSH
45232: LD_INT 1
45234: ARRAY
45235: PPUSH
45236: LD_EXP 124
45240: PUSH
45241: LD_VAR 0 4
45245: ARRAY
45246: PUSH
45247: LD_INT 2
45249: ARRAY
45250: PPUSH
45251: LD_EXP 124
45255: PUSH
45256: LD_VAR 0 4
45260: ARRAY
45261: PUSH
45262: LD_INT 3
45264: ARRAY
45265: PPUSH
45266: LD_EXP 124
45270: PUSH
45271: LD_VAR 0 4
45275: ARRAY
45276: PUSH
45277: LD_INT 4
45279: ARRAY
45280: PPUSH
45281: CALL_OW 448
45285: NOT
45286: PUSH
45287: LD_INT 170
45289: PPUSH
45290: LD_INT 35
45292: PPUSH
45293: CALL_OW 438
45297: PPUSH
45298: LD_EXP 124
45302: PUSH
45303: LD_VAR 0 4
45307: ARRAY
45308: PUSH
45309: LD_INT 1
45311: ARRAY
45312: PPUSH
45313: LD_EXP 124
45317: PUSH
45318: LD_VAR 0 4
45322: ARRAY
45323: PUSH
45324: LD_INT 2
45326: ARRAY
45327: PPUSH
45328: LD_EXP 124
45332: PUSH
45333: LD_VAR 0 4
45337: ARRAY
45338: PUSH
45339: LD_INT 3
45341: ARRAY
45342: PPUSH
45343: LD_EXP 124
45347: PUSH
45348: LD_VAR 0 4
45352: ARRAY
45353: PUSH
45354: LD_INT 4
45356: ARRAY
45357: PPUSH
45358: CALL_OW 448
45362: NOT
45363: AND
45364: IFFALSE 45388
// R_Patrol_Group = Delete ( R_Patrol_Group , i ) else
45366: LD_ADDR_EXP 124
45370: PUSH
45371: LD_EXP 124
45375: PPUSH
45376: LD_VAR 0 4
45380: PPUSH
45381: CALL_OW 3
45385: ST_TO_ADDR
45386: GO 45402
// i = i + 1 ;
45388: LD_ADDR_VAR 0 4
45392: PUSH
45393: LD_VAR 0 4
45397: PUSH
45398: LD_INT 1
45400: PLUS
45401: ST_TO_ADDR
// end ;
45402: GO 45198
// if ( R_Attack_Group > 0 ) then
45404: LD_EXP 121
45408: PUSH
45409: LD_INT 0
45411: GREATER
45412: IFFALSE 45597
// if not ( BuildingStatus ( GetUnitNumber ( 195 , 84 ) ) = bs_working ) and CanBeConstructed ( GetUnitNumber ( 195 , 84 ) , R_Attack_Group [ 1 ] [ 1 ] , R_Attack_Group [ 1 ] [ 2 ] , R_Attack_Group [ 1 ] [ 3 ] , R_Attack_Group [ 1 ] [ 4 ] ) then
45414: LD_INT 195
45416: PPUSH
45417: LD_INT 84
45419: PPUSH
45420: CALL_OW 438
45424: PPUSH
45425: CALL_OW 461
45429: PUSH
45430: LD_INT 3
45432: EQUAL
45433: NOT
45434: PUSH
45435: LD_INT 195
45437: PPUSH
45438: LD_INT 84
45440: PPUSH
45441: CALL_OW 438
45445: PPUSH
45446: LD_EXP 121
45450: PUSH
45451: LD_INT 1
45453: ARRAY
45454: PUSH
45455: LD_INT 1
45457: ARRAY
45458: PPUSH
45459: LD_EXP 121
45463: PUSH
45464: LD_INT 1
45466: ARRAY
45467: PUSH
45468: LD_INT 2
45470: ARRAY
45471: PPUSH
45472: LD_EXP 121
45476: PUSH
45477: LD_INT 1
45479: ARRAY
45480: PUSH
45481: LD_INT 3
45483: ARRAY
45484: PPUSH
45485: LD_EXP 121
45489: PUSH
45490: LD_INT 1
45492: ARRAY
45493: PUSH
45494: LD_INT 4
45496: ARRAY
45497: PPUSH
45498: CALL_OW 448
45502: AND
45503: IFFALSE 45597
// begin ComConstruct ( GetUnitNumber ( 195 , 84 ) , R_Attack_Group [ 1 ] [ 1 ] , R_Attack_Group [ 1 ] [ 2 ] , R_Attack_Group [ 1 ] [ 3 ] , R_Attack_Group [ 1 ] [ 4 ] ) ;
45505: LD_INT 195
45507: PPUSH
45508: LD_INT 84
45510: PPUSH
45511: CALL_OW 438
45515: PPUSH
45516: LD_EXP 121
45520: PUSH
45521: LD_INT 1
45523: ARRAY
45524: PUSH
45525: LD_INT 1
45527: ARRAY
45528: PPUSH
45529: LD_EXP 121
45533: PUSH
45534: LD_INT 1
45536: ARRAY
45537: PUSH
45538: LD_INT 2
45540: ARRAY
45541: PPUSH
45542: LD_EXP 121
45546: PUSH
45547: LD_INT 1
45549: ARRAY
45550: PUSH
45551: LD_INT 3
45553: ARRAY
45554: PPUSH
45555: LD_EXP 121
45559: PUSH
45560: LD_INT 1
45562: ARRAY
45563: PUSH
45564: LD_INT 4
45566: ARRAY
45567: PPUSH
45568: CALL_OW 125
// R_Attack_Group = Delete ( R_Attack_Group , 1 ) ;
45572: LD_ADDR_EXP 121
45576: PUSH
45577: LD_EXP 121
45581: PPUSH
45582: LD_INT 1
45584: PPUSH
45585: CALL_OW 3
45589: ST_TO_ADDR
// Wait ( 1 ) ;
45590: LD_INT 1
45592: PPUSH
45593: CALL_OW 67
// end ; if ( R_Attack_Group > 0 ) then
45597: LD_EXP 121
45601: PUSH
45602: LD_INT 0
45604: GREATER
45605: IFFALSE 45790
// if not ( BuildingStatus ( GetUnitNumber ( 170 , 35 ) ) = bs_working ) and CanBeConstructed ( GetUnitNumber ( 170 , 35 ) , R_Attack_Group [ 1 ] [ 1 ] , R_Attack_Group [ 1 ] [ 2 ] , R_Attack_Group [ 1 ] [ 3 ] , R_Attack_Group [ 1 ] [ 4 ] ) then
45607: LD_INT 170
45609: PPUSH
45610: LD_INT 35
45612: PPUSH
45613: CALL_OW 438
45617: PPUSH
45618: CALL_OW 461
45622: PUSH
45623: LD_INT 3
45625: EQUAL
45626: NOT
45627: PUSH
45628: LD_INT 170
45630: PPUSH
45631: LD_INT 35
45633: PPUSH
45634: CALL_OW 438
45638: PPUSH
45639: LD_EXP 121
45643: PUSH
45644: LD_INT 1
45646: ARRAY
45647: PUSH
45648: LD_INT 1
45650: ARRAY
45651: PPUSH
45652: LD_EXP 121
45656: PUSH
45657: LD_INT 1
45659: ARRAY
45660: PUSH
45661: LD_INT 2
45663: ARRAY
45664: PPUSH
45665: LD_EXP 121
45669: PUSH
45670: LD_INT 1
45672: ARRAY
45673: PUSH
45674: LD_INT 3
45676: ARRAY
45677: PPUSH
45678: LD_EXP 121
45682: PUSH
45683: LD_INT 1
45685: ARRAY
45686: PUSH
45687: LD_INT 4
45689: ARRAY
45690: PPUSH
45691: CALL_OW 448
45695: AND
45696: IFFALSE 45790
// begin ComConstruct ( GetUnitNumber ( 170 , 35 ) , R_Attack_Group [ 1 ] [ 1 ] , R_Attack_Group [ 1 ] [ 2 ] , R_Attack_Group [ 1 ] [ 3 ] , R_Attack_Group [ 1 ] [ 4 ] ) ;
45698: LD_INT 170
45700: PPUSH
45701: LD_INT 35
45703: PPUSH
45704: CALL_OW 438
45708: PPUSH
45709: LD_EXP 121
45713: PUSH
45714: LD_INT 1
45716: ARRAY
45717: PUSH
45718: LD_INT 1
45720: ARRAY
45721: PPUSH
45722: LD_EXP 121
45726: PUSH
45727: LD_INT 1
45729: ARRAY
45730: PUSH
45731: LD_INT 2
45733: ARRAY
45734: PPUSH
45735: LD_EXP 121
45739: PUSH
45740: LD_INT 1
45742: ARRAY
45743: PUSH
45744: LD_INT 3
45746: ARRAY
45747: PPUSH
45748: LD_EXP 121
45752: PUSH
45753: LD_INT 1
45755: ARRAY
45756: PUSH
45757: LD_INT 4
45759: ARRAY
45760: PPUSH
45761: CALL_OW 125
// R_Attack_Group = Delete ( R_Attack_Group , 1 ) ;
45765: LD_ADDR_EXP 121
45769: PUSH
45770: LD_EXP 121
45774: PPUSH
45775: LD_INT 1
45777: PPUSH
45778: CALL_OW 3
45782: ST_TO_ADDR
// Wait ( 1 ) ;
45783: LD_INT 1
45785: PPUSH
45786: CALL_OW 67
// end ; if ( R_Patrol_Group > 0 ) then
45790: LD_EXP 124
45794: PUSH
45795: LD_INT 0
45797: GREATER
45798: IFFALSE 45983
// if not ( BuildingStatus ( GetUnitNumber ( 195 , 84 ) ) = bs_working ) and CanBeConstructed ( GetUnitNumber ( 195 , 84 ) , R_Patrol_Group [ 1 ] [ 1 ] , R_Patrol_Group [ 1 ] [ 2 ] , R_Patrol_Group [ 1 ] [ 3 ] , R_Patrol_Group [ 1 ] [ 4 ] ) then
45800: LD_INT 195
45802: PPUSH
45803: LD_INT 84
45805: PPUSH
45806: CALL_OW 438
45810: PPUSH
45811: CALL_OW 461
45815: PUSH
45816: LD_INT 3
45818: EQUAL
45819: NOT
45820: PUSH
45821: LD_INT 195
45823: PPUSH
45824: LD_INT 84
45826: PPUSH
45827: CALL_OW 438
45831: PPUSH
45832: LD_EXP 124
45836: PUSH
45837: LD_INT 1
45839: ARRAY
45840: PUSH
45841: LD_INT 1
45843: ARRAY
45844: PPUSH
45845: LD_EXP 124
45849: PUSH
45850: LD_INT 1
45852: ARRAY
45853: PUSH
45854: LD_INT 2
45856: ARRAY
45857: PPUSH
45858: LD_EXP 124
45862: PUSH
45863: LD_INT 1
45865: ARRAY
45866: PUSH
45867: LD_INT 3
45869: ARRAY
45870: PPUSH
45871: LD_EXP 124
45875: PUSH
45876: LD_INT 1
45878: ARRAY
45879: PUSH
45880: LD_INT 4
45882: ARRAY
45883: PPUSH
45884: CALL_OW 448
45888: AND
45889: IFFALSE 45983
// begin ComConstruct ( GetUnitNumber ( 195 , 84 ) , R_Patrol_Group [ 1 ] [ 1 ] , R_Patrol_Group [ 1 ] [ 2 ] , R_Patrol_Group [ 1 ] [ 3 ] , R_Patrol_Group [ 1 ] [ 4 ] ) ;
45891: LD_INT 195
45893: PPUSH
45894: LD_INT 84
45896: PPUSH
45897: CALL_OW 438
45901: PPUSH
45902: LD_EXP 124
45906: PUSH
45907: LD_INT 1
45909: ARRAY
45910: PUSH
45911: LD_INT 1
45913: ARRAY
45914: PPUSH
45915: LD_EXP 124
45919: PUSH
45920: LD_INT 1
45922: ARRAY
45923: PUSH
45924: LD_INT 2
45926: ARRAY
45927: PPUSH
45928: LD_EXP 124
45932: PUSH
45933: LD_INT 1
45935: ARRAY
45936: PUSH
45937: LD_INT 3
45939: ARRAY
45940: PPUSH
45941: LD_EXP 124
45945: PUSH
45946: LD_INT 1
45948: ARRAY
45949: PUSH
45950: LD_INT 4
45952: ARRAY
45953: PPUSH
45954: CALL_OW 125
// R_Patrol_Group = Delete ( R_Patrol_Group , 1 ) ;
45958: LD_ADDR_EXP 124
45962: PUSH
45963: LD_EXP 124
45967: PPUSH
45968: LD_INT 1
45970: PPUSH
45971: CALL_OW 3
45975: ST_TO_ADDR
// Wait ( 1 ) ;
45976: LD_INT 1
45978: PPUSH
45979: CALL_OW 67
// end ; if ( R_Patrol_Group > 0 ) then
45983: LD_EXP 124
45987: PUSH
45988: LD_INT 0
45990: GREATER
45991: IFFALSE 46176
// if not ( BuildingStatus ( GetUnitNumber ( 170 , 35 ) ) = bs_working ) and CanBeConstructed ( GetUnitNumber ( 170 , 35 ) , R_Patrol_Group [ 1 ] [ 1 ] , R_Patrol_Group [ 1 ] [ 2 ] , R_Patrol_Group [ 1 ] [ 3 ] , R_Patrol_Group [ 1 ] [ 4 ] ) then
45993: LD_INT 170
45995: PPUSH
45996: LD_INT 35
45998: PPUSH
45999: CALL_OW 438
46003: PPUSH
46004: CALL_OW 461
46008: PUSH
46009: LD_INT 3
46011: EQUAL
46012: NOT
46013: PUSH
46014: LD_INT 170
46016: PPUSH
46017: LD_INT 35
46019: PPUSH
46020: CALL_OW 438
46024: PPUSH
46025: LD_EXP 124
46029: PUSH
46030: LD_INT 1
46032: ARRAY
46033: PUSH
46034: LD_INT 1
46036: ARRAY
46037: PPUSH
46038: LD_EXP 124
46042: PUSH
46043: LD_INT 1
46045: ARRAY
46046: PUSH
46047: LD_INT 2
46049: ARRAY
46050: PPUSH
46051: LD_EXP 124
46055: PUSH
46056: LD_INT 1
46058: ARRAY
46059: PUSH
46060: LD_INT 3
46062: ARRAY
46063: PPUSH
46064: LD_EXP 124
46068: PUSH
46069: LD_INT 1
46071: ARRAY
46072: PUSH
46073: LD_INT 4
46075: ARRAY
46076: PPUSH
46077: CALL_OW 448
46081: AND
46082: IFFALSE 46176
// begin ComConstruct ( GetUnitNumber ( 170 , 35 ) , R_Patrol_Group [ 1 ] [ 1 ] , R_Patrol_Group [ 1 ] [ 2 ] , R_Patrol_Group [ 1 ] [ 3 ] , R_Patrol_Group [ 1 ] [ 4 ] ) ;
46084: LD_INT 170
46086: PPUSH
46087: LD_INT 35
46089: PPUSH
46090: CALL_OW 438
46094: PPUSH
46095: LD_EXP 124
46099: PUSH
46100: LD_INT 1
46102: ARRAY
46103: PUSH
46104: LD_INT 1
46106: ARRAY
46107: PPUSH
46108: LD_EXP 124
46112: PUSH
46113: LD_INT 1
46115: ARRAY
46116: PUSH
46117: LD_INT 2
46119: ARRAY
46120: PPUSH
46121: LD_EXP 124
46125: PUSH
46126: LD_INT 1
46128: ARRAY
46129: PUSH
46130: LD_INT 3
46132: ARRAY
46133: PPUSH
46134: LD_EXP 124
46138: PUSH
46139: LD_INT 1
46141: ARRAY
46142: PUSH
46143: LD_INT 4
46145: ARRAY
46146: PPUSH
46147: CALL_OW 125
// R_Patrol_Group = Delete ( R_Patrol_Group , 1 ) ;
46151: LD_ADDR_EXP 124
46155: PUSH
46156: LD_EXP 124
46160: PPUSH
46161: LD_INT 1
46163: PPUSH
46164: CALL_OW 3
46168: ST_TO_ADDR
// Wait ( 1 ) ;
46169: LD_INT 1
46171: PPUSH
46172: CALL_OW 67
// end ; end ;
46176: LD_VAR 0 2
46180: RET
// function SetAttackArea ; var Attack_Area ; begin
46181: LD_INT 0
46183: PPUSH
46184: PPUSH
// if FilterUnitsInArea ( Plan4 , [ f_side , americans ] ) > 0 then
46185: LD_INT 32
46187: PPUSH
46188: LD_INT 22
46190: PUSH
46191: LD_EXP 176
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PPUSH
46200: CALL_OW 70
46204: PUSH
46205: LD_INT 0
46207: GREATER
46208: IFFALSE 46220
// attack_area = Plan4 else
46210: LD_ADDR_VAR 0 2
46214: PUSH
46215: LD_INT 32
46217: ST_TO_ADDR
46218: GO 46551
// if FilterUnitsInArea ( Plan6 , [ [ f_side , americans ] , f_not , [ f_type , unit_human ] ] ) > 0 then
46220: LD_INT 34
46222: PPUSH
46223: LD_INT 22
46225: PUSH
46226: LD_EXP 176
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 3
46237: PUSH
46238: LD_INT 21
46240: PUSH
46241: LD_INT 1
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: LIST
46252: PPUSH
46253: CALL_OW 70
46257: PUSH
46258: LD_INT 0
46260: GREATER
46261: IFFALSE 46273
// attack_area = Plan6 else
46263: LD_ADDR_VAR 0 2
46267: PUSH
46268: LD_INT 34
46270: ST_TO_ADDR
46271: GO 46551
// if FilterUnitsInArea ( Am_Base , [ f_side , americans ] ) > 0 then
46273: LD_INT 1
46275: PPUSH
46276: LD_INT 22
46278: PUSH
46279: LD_EXP 176
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PPUSH
46288: CALL_OW 70
46292: PUSH
46293: LD_INT 0
46295: GREATER
46296: IFFALSE 46308
// attack_area = Am_Base else
46298: LD_ADDR_VAR 0 2
46302: PUSH
46303: LD_INT 1
46305: ST_TO_ADDR
46306: GO 46551
// if FilterUnitsInArea ( JMM_Hill , [ f_side , americans ] ) > 0 then
46308: LD_INT 2
46310: PPUSH
46311: LD_INT 22
46313: PUSH
46314: LD_EXP 176
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PPUSH
46323: CALL_OW 70
46327: PUSH
46328: LD_INT 0
46330: GREATER
46331: IFFALSE 46343
// attack_area = JMM_Hill else
46333: LD_ADDR_VAR 0 2
46337: PUSH
46338: LD_INT 2
46340: ST_TO_ADDR
46341: GO 46551
// if FilterUnitsInArea ( Plan3 , [ f_side , americans ] ) > 0 then
46343: LD_INT 31
46345: PPUSH
46346: LD_INT 22
46348: PUSH
46349: LD_EXP 176
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PPUSH
46358: CALL_OW 70
46362: PUSH
46363: LD_INT 0
46365: GREATER
46366: IFFALSE 46378
// attack_area = Plan3 else
46368: LD_ADDR_VAR 0 2
46372: PUSH
46373: LD_INT 31
46375: ST_TO_ADDR
46376: GO 46551
// if FilterUnitsInArea ( Ar_Base , [ f_side , americans ] ) > 0 then
46378: LD_INT 17
46380: PPUSH
46381: LD_INT 22
46383: PUSH
46384: LD_EXP 176
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PPUSH
46393: CALL_OW 70
46397: PUSH
46398: LD_INT 0
46400: GREATER
46401: IFFALSE 46413
// attack_area = Ar_Base else
46403: LD_ADDR_VAR 0 2
46407: PUSH
46408: LD_INT 17
46410: ST_TO_ADDR
46411: GO 46551
// if FilterUnitsInArea ( Plan5 , [ f_side , americans ] ) > 0 then
46413: LD_INT 33
46415: PPUSH
46416: LD_INT 22
46418: PUSH
46419: LD_EXP 176
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PPUSH
46428: CALL_OW 70
46432: PUSH
46433: LD_INT 0
46435: GREATER
46436: IFFALSE 46448
// attack_area = Plan5 else
46438: LD_ADDR_VAR 0 2
46442: PUSH
46443: LD_INT 33
46445: ST_TO_ADDR
46446: GO 46551
// if FilterUnitsInArea ( Aliance_Base , [ f_side , americans ] ) > 0 then
46448: LD_INT 7
46450: PPUSH
46451: LD_INT 22
46453: PUSH
46454: LD_EXP 176
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PPUSH
46463: CALL_OW 70
46467: PUSH
46468: LD_INT 0
46470: GREATER
46471: IFFALSE 46483
// attack_area = Aliance_Base else
46473: LD_ADDR_VAR 0 2
46477: PUSH
46478: LD_INT 7
46480: ST_TO_ADDR
46481: GO 46551
// if FilterUnitsInArea ( Plan1 , [ f_side , americans ] ) > 0 then
46483: LD_INT 29
46485: PPUSH
46486: LD_INT 22
46488: PUSH
46489: LD_EXP 176
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PPUSH
46498: CALL_OW 70
46502: PUSH
46503: LD_INT 0
46505: GREATER
46506: IFFALSE 46518
// attack_area = Plan1 else
46508: LD_ADDR_VAR 0 2
46512: PUSH
46513: LD_INT 29
46515: ST_TO_ADDR
46516: GO 46551
// if FilterUnitsInArea ( Plan2 , [ f_side , americans ] ) > 0 then
46518: LD_INT 30
46520: PPUSH
46521: LD_INT 22
46523: PUSH
46524: LD_EXP 176
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PPUSH
46533: CALL_OW 70
46537: PUSH
46538: LD_INT 0
46540: GREATER
46541: IFFALSE 46551
// attack_area = Plan2 ;
46543: LD_ADDR_VAR 0 2
46547: PUSH
46548: LD_INT 30
46550: ST_TO_ADDR
// result = Attack_Area ;
46551: LD_ADDR_VAR 0 1
46555: PUSH
46556: LD_VAR 0 2
46560: ST_TO_ADDR
// end ;
46561: LD_VAR 0 1
46565: RET
// function GoThroughTeleport ( Attack_Area ) ; var Teleport1 , Teleport2 ; begin
46566: LD_INT 0
46568: PPUSH
46569: PPUSH
46570: PPUSH
// Teleport1 = GetUnitNumber ( 165 , 60 ) ;
46571: LD_ADDR_VAR 0 3
46575: PUSH
46576: LD_INT 165
46578: PPUSH
46579: LD_INT 60
46581: PPUSH
46582: CALL_OW 438
46586: ST_TO_ADDR
// Teleport2 = GetUnitNumber ( 182 , 87 ) ;
46587: LD_ADDR_VAR 0 4
46591: PUSH
46592: LD_INT 182
46594: PPUSH
46595: LD_INT 87
46597: PPUSH
46598: CALL_OW 438
46602: ST_TO_ADDR
// if Attack_Area in [ Am_Base , JMM_Hill , Plan3 , Ar_Base , Plan1 ] then
46603: LD_VAR 0 1
46607: PUSH
46608: LD_INT 1
46610: PUSH
46611: LD_INT 2
46613: PUSH
46614: LD_INT 31
46616: PUSH
46617: LD_INT 17
46619: PUSH
46620: LD_INT 29
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: IN
46630: IFFALSE 46698
// begin if IsOk ( Teleport1 ) then
46632: LD_VAR 0 3
46636: PPUSH
46637: CALL_OW 302
46641: IFFALSE 46665
// ComEnterUnit ( R_New_Attack ^ R_New_Patrol , Teleport1 ) else
46643: LD_EXP 131
46647: PUSH
46648: LD_EXP 132
46652: ADD
46653: PPUSH
46654: LD_VAR 0 3
46658: PPUSH
46659: CALL_OW 120
46663: GO 46696
// if IsOk ( Teleport2 ) then
46665: LD_VAR 0 4
46669: PPUSH
46670: CALL_OW 302
46674: IFFALSE 46696
// ComEnterUnit ( R_New_Attack ^ R_New_Patrol , Teleport2 ) end else
46676: LD_EXP 131
46680: PUSH
46681: LD_EXP 132
46685: ADD
46686: PPUSH
46687: LD_VAR 0 4
46691: PPUSH
46692: CALL_OW 120
46696: GO 46762
// begin if IsOk ( Teleport2 ) then
46698: LD_VAR 0 4
46702: PPUSH
46703: CALL_OW 302
46707: IFFALSE 46731
// ComEnterUnit ( R_New_Attack ^ R_New_Patrol , Teleport2 ) else
46709: LD_EXP 131
46713: PUSH
46714: LD_EXP 132
46718: ADD
46719: PPUSH
46720: LD_VAR 0 4
46724: PPUSH
46725: CALL_OW 120
46729: GO 46762
// if IsOk ( Teleport1 ) then
46731: LD_VAR 0 3
46735: PPUSH
46736: CALL_OW 302
46740: IFFALSE 46762
// ComEnterUnit ( R_New_Attack ^ R_New_Patrol , Teleport1 ) end ;
46742: LD_EXP 131
46746: PUSH
46747: LD_EXP 132
46751: ADD
46752: PPUSH
46753: LD_VAR 0 3
46757: PPUSH
46758: CALL_OW 120
// WaitTask ( R_New_Attack ^ R_New_Patrol , 1 ) ;
46762: LD_EXP 131
46766: PUSH
46767: LD_EXP 132
46771: ADD
46772: PPUSH
46773: LD_INT 1
46775: PPUSH
46776: CALL 17823 0 2
// end ;
46780: LD_VAR 0 2
46784: RET
// function StartOfRusAttack ( Attack_Area ) ; var Un ; begin
46785: LD_INT 0
46787: PPUSH
46788: PPUSH
// if Russian_Siberite_Attack then
46789: LD_EXP 215
46793: IFFALSE 46821
// for Un in Russian_Siberite_rockets do
46795: LD_ADDR_VAR 0 3
46799: PUSH
46800: LD_EXP 216
46804: PUSH
46805: FOR_IN
46806: IFFALSE 46819
// RSiberiteAttack ( Un ) ;
46808: LD_VAR 0 3
46812: PPUSH
46813: CALL 18466 0 1
46817: GO 46805
46819: POP
46820: POP
// if not ( ExistMc ( Russian_reg_id ) ) then
46821: LD_EXP 241
46825: PPUSH
46826: CALL_OW 386
46830: NOT
46831: IFFALSE 46889
// begin Russian_reg_id = McRegistry ( russians , [ [ mc_reg_refresh_time , 0 0$5 ] , [ mc_reg_area_to_guard , attack_area ] , - mc_reg_only_important , mc_reg_ignore_fog , mc_reg_buildings ] ) ;
46833: LD_ADDR_EXP 241
46837: PUSH
46838: LD_EXP 178
46842: PPUSH
46843: LD_INT 1
46845: PUSH
46846: LD_INT 175
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 2
46855: PUSH
46856: LD_VAR 0 1
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 8
46867: NEG
46868: PUSH
46869: LD_INT 7
46871: PUSH
46872: LD_INT 9
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: PPUSH
46882: CALL_OW 399
46886: ST_TO_ADDR
// end else
46887: GO 46913
// begin McRegistryChangeOptions ( Russian_reg_id , [ [ mc_reg_area_to_guard , attack_area ] ] ) ;
46889: LD_EXP 241
46893: PPUSH
46894: LD_INT 2
46896: PUSH
46897: LD_VAR 0 1
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: EMPTY
46907: LIST
46908: PPUSH
46909: CALL_OW 400
// end ; if not ( ExistMc ( Russian_att_id ) ) then
46913: LD_EXP 242
46917: PPUSH
46918: CALL_OW 386
46922: NOT
46923: IFFALSE 47000
// begin Russian_att_id = McAttack ( 100 , Russian_reg_id , Main_R_Attack_Group , [ [ mc_retreat_area_vehicles , retreat1 ] , [ mc_retreat_area_people , retreat1 ] , [ mc_retreat_lives_vehicles , 600 ] , [ mc_retreat_lives_people , 600 ] , mc_no_stop ] ) ;
46925: LD_ADDR_EXP 242
46929: PUSH
46930: LD_INT 100
46932: PPUSH
46933: LD_EXP 241
46937: PPUSH
46938: LD_EXP 120
46942: PPUSH
46943: LD_INT 8
46945: PUSH
46946: LD_INT 40
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 7
46955: PUSH
46956: LD_INT 40
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 6
46965: PUSH
46966: LD_INT 600
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 5
46975: PUSH
46976: LD_INT 600
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 10
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: PPUSH
46993: CALL_OW 402
46997: ST_TO_ADDR
// end else
46998: GO 47020
// begin AddMcUnits ( Russian_att_id , R_New_Attack ^ R_New_Patrol ) ;
47000: LD_EXP 242
47004: PPUSH
47005: LD_EXP 131
47009: PUSH
47010: LD_EXP 132
47014: ADD
47015: PPUSH
47016: CALL_OW 390
// end ; RemoveMcUnits ( Russian_def_id , R_New_Attack ^ R_New_Patrol ) ;
47020: LD_EXP 245
47024: PPUSH
47025: LD_EXP 131
47029: PUSH
47030: LD_EXP 132
47034: ADD
47035: PPUSH
47036: CALL_OW 391
// end ;
47040: LD_VAR 0 2
47044: RET
// export function RusAttack ; var Attack_Area ; begin
47045: LD_INT 0
47047: PPUSH
47048: PPUSH
// while ( FilterUnitsInArea ( R_base , [ [ f_side , americans ] , [ f_ok ] ] ) > 0 ) do
47049: LD_INT 36
47051: PPUSH
47052: LD_INT 22
47054: PUSH
47055: LD_EXP 176
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 50
47066: PUSH
47067: EMPTY
47068: LIST
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PPUSH
47074: CALL_OW 70
47078: PUSH
47079: LD_INT 0
47081: GREATER
47082: IFFALSE 47093
// Wait ( 0 0$10 ) ;
47084: LD_INT 350
47086: PPUSH
47087: CALL_OW 67
47091: GO 47049
// Main_R_Attack_Group = Main_R_Attack_Group ^ R_New_Attack ^ R_New_Patrol ;
47093: LD_ADDR_EXP 120
47097: PUSH
47098: LD_EXP 120
47102: PUSH
47103: LD_EXP 131
47107: ADD
47108: PUSH
47109: LD_EXP 132
47113: ADD
47114: ST_TO_ADDR
// Main_R_Attack_Group = UnitFilter ( Main_R_Attack_Group , [ f_ok ] ) ;
47115: LD_ADDR_EXP 120
47119: PUSH
47120: LD_EXP 120
47124: PPUSH
47125: LD_INT 50
47127: PUSH
47128: EMPTY
47129: LIST
47130: PPUSH
47131: CALL_OW 72
47135: ST_TO_ADDR
// Attack_Area = SetAttackArea ;
47136: LD_ADDR_VAR 0 2
47140: PUSH
47141: CALL 46181 0 0
47145: ST_TO_ADDR
// if ( R_New_Attack ^ R_New_Patrol <> 0 ) then
47146: LD_EXP 131
47150: PUSH
47151: LD_EXP 132
47155: ADD
47156: PUSH
47157: LD_INT 0
47159: NONEQUAL
47160: IFFALSE 47171
// GoThroughTeleport ( Attack_Area ) ;
47162: LD_VAR 0 2
47166: PPUSH
47167: CALL 46566 0 1
// StartOfRusAttack ( Attack_Area ) ;
47171: LD_VAR 0 2
47175: PPUSH
47176: CALL 46785 0 1
// end ;
47180: LD_VAR 0 1
47184: RET
// every 0 0$1 trigger tick > Rus_Attack_Time marked 10 do
47185: LD_OWVAR 1
47189: PUSH
47190: LD_EXP 130
47194: GREATER
47195: IFFALSE 47436
47197: GO 47199
47199: DISABLE
// begin disable ;
47200: DISABLE
// while true do
47201: LD_INT 1
47203: IFFALSE 47436
// begin if Main_R_Attack_Group < 40 then
47205: LD_EXP 120
47209: PUSH
47210: LD_INT 40
47212: LESS
47213: IFFALSE 47244
// begin R_Attack_counter = R_Attack_counter + 1 ;
47215: LD_ADDR_EXP 117
47219: PUSH
47220: LD_EXP 117
47224: PUSH
47225: LD_INT 1
47227: PLUS
47228: ST_TO_ADDR
// GenerateAttackingGroup ;
47229: CALL 44321 0 0
// GeneratePatrolingGroup ;
47233: CALL 44774 0 0
// BuildGroups ( 0 ) ;
47237: LD_INT 0
47239: PPUSH
47240: CALL 44851 0 1
// end ; while ( R_Attack_Group <> 0 ) or ( R_Patrol_Group <> 0 ) or ( BuildingStatus ( GetUnitNumber ( 170 , 35 ) ) = bs_working ) or ( BuildingStatus ( GetUnitNumber ( 195 , 84 ) ) = bs_working ) do
47244: LD_EXP 121
47248: PUSH
47249: LD_INT 0
47251: NONEQUAL
47252: PUSH
47253: LD_EXP 124
47257: PUSH
47258: LD_INT 0
47260: NONEQUAL
47261: OR
47262: PUSH
47263: LD_INT 170
47265: PPUSH
47266: LD_INT 35
47268: PPUSH
47269: CALL_OW 438
47273: PPUSH
47274: CALL_OW 461
47278: PUSH
47279: LD_INT 3
47281: EQUAL
47282: OR
47283: PUSH
47284: LD_INT 195
47286: PPUSH
47287: LD_INT 84
47289: PPUSH
47290: CALL_OW 438
47294: PPUSH
47295: CALL_OW 461
47299: PUSH
47300: LD_INT 3
47302: EQUAL
47303: OR
47304: IFFALSE 47315
// Wait ( 1 1$0 ) ;
47306: LD_INT 2100
47308: PPUSH
47309: CALL_OW 67
47313: GO 47244
// if ( R_New_Attack ^ R_New_Patrol ) = 0 then
47315: LD_EXP 131
47319: PUSH
47320: LD_EXP 132
47324: ADD
47325: PUSH
47326: LD_INT 0
47328: EQUAL
47329: IFFALSE 47340
// Wait ( 0 0$15 ) else
47331: LD_INT 525
47333: PPUSH
47334: CALL_OW 67
47338: GO 47391
// begin while R_attack_time > 0 0$15 do
47340: LD_EXP 115
47344: PUSH
47345: LD_INT 525
47347: GREATER
47348: IFFALSE 47382
// begin R_attack_time = R_attack_time - 0 0$15 ;
47350: LD_ADDR_EXP 115
47354: PUSH
47355: LD_EXP 115
47359: PUSH
47360: LD_INT 525
47362: MINUS
47363: ST_TO_ADDR
// RaiseSailEvent ( Rus_Attack ) ;
47364: LD_EXP 171
47368: PPUSH
47369: CALL_OW 427
// Wait ( 0 0$15 ) ;
47373: LD_INT 525
47375: PPUSH
47376: CALL_OW 67
// end ;
47380: GO 47340
// Wait ( R_attack_time ) ;
47382: LD_EXP 115
47386: PPUSH
47387: CALL_OW 67
// end ; R_New_Attack = R_Constructed_Attack ;
47391: LD_ADDR_EXP 131
47395: PUSH
47396: LD_EXP 125
47400: ST_TO_ADDR
// R_Constructed_Attack = [ ] ;
47401: LD_ADDR_EXP 125
47405: PUSH
47406: EMPTY
47407: ST_TO_ADDR
// R_New_Patrol = R_Constructed_Patrol ;
47408: LD_ADDR_EXP 132
47412: PUSH
47413: LD_EXP 126
47417: ST_TO_ADDR
// R_Constructed_Patrol = [ ] ;
47418: LD_ADDR_EXP 126
47422: PUSH
47423: EMPTY
47424: ST_TO_ADDR
// RaiseSailEvent ( Rus_Attack ) ;
47425: LD_EXP 171
47429: PPUSH
47430: CALL_OW 427
// end ;
47434: GO 47201
// end ;
47436: END
// every 0 0$1 trigger Russian_Siberite_Attack do var Un ;
47437: LD_EXP 215
47441: IFFALSE 47475
47443: GO 47445
47445: DISABLE
47446: LD_INT 0
47448: PPUSH
// begin for Un in Russian_Siberite_rockets do
47449: LD_ADDR_VAR 0 1
47453: PUSH
47454: LD_EXP 216
47458: PUSH
47459: FOR_IN
47460: IFFALSE 47473
// RSiberiteAttack ( Un ) ;
47462: LD_VAR 0 1
47466: PPUSH
47467: CALL 18466 0 1
47471: GO 47459
47473: POP
47474: POP
// end ;
47475: PPOPN 1
47477: END
// every 0 0$30 do var Dep1 , Dep2 , Dep3 ;
47478: GO 47480
47480: DISABLE
47481: LD_INT 0
47483: PPUSH
47484: PPUSH
47485: PPUSH
// begin Dep1 = GetUnitNumber ( 175 , 56 ) ;
47486: LD_ADDR_VAR 0 1
47490: PUSH
47491: LD_INT 175
47493: PPUSH
47494: LD_INT 56
47496: PPUSH
47497: CALL_OW 438
47501: ST_TO_ADDR
// Dep2 = GetUnitNumber ( 175 , 81 ) ;
47502: LD_ADDR_VAR 0 2
47506: PUSH
47507: LD_INT 175
47509: PPUSH
47510: LD_INT 81
47512: PPUSH
47513: CALL_OW 438
47517: ST_TO_ADDR
// Dep3 = GetUnitNumber ( 213 , 117 ) ;
47518: LD_ADDR_VAR 0 3
47522: PUSH
47523: LD_INT 213
47525: PPUSH
47526: LD_INT 117
47528: PPUSH
47529: CALL_OW 438
47533: ST_TO_ADDR
// if IsOk ( Dep1 ) and GetSide ( Dep1 ) = russians then
47534: LD_VAR 0 1
47538: PPUSH
47539: CALL_OW 302
47543: PUSH
47544: LD_VAR 0 1
47548: PPUSH
47549: CALL_OW 255
47553: PUSH
47554: LD_EXP 178
47558: EQUAL
47559: AND
47560: IFFALSE 47618
// begin SetResourceType ( GetBase ( Dep1 ) , mat_siberit , rand ( 1500 , 2000 ) ) ;
47562: LD_VAR 0 1
47566: PPUSH
47567: CALL_OW 274
47571: PPUSH
47572: LD_INT 3
47574: PPUSH
47575: LD_INT 1500
47577: PPUSH
47578: LD_INT 2000
47580: PPUSH
47581: CALL_OW 12
47585: PPUSH
47586: CALL_OW 277
// SetResourceType ( GetBase ( Dep1 ) , mat_cans , rand ( 1500 , 2000 ) ) ;
47590: LD_VAR 0 1
47594: PPUSH
47595: CALL_OW 274
47599: PPUSH
47600: LD_INT 1
47602: PPUSH
47603: LD_INT 1500
47605: PPUSH
47606: LD_INT 2000
47608: PPUSH
47609: CALL_OW 12
47613: PPUSH
47614: CALL_OW 277
// end ; if IsOk ( Dep2 ) and GetSide ( Dep2 ) = russians then
47618: LD_VAR 0 2
47622: PPUSH
47623: CALL_OW 302
47627: PUSH
47628: LD_VAR 0 2
47632: PPUSH
47633: CALL_OW 255
47637: PUSH
47638: LD_EXP 178
47642: EQUAL
47643: AND
47644: IFFALSE 47702
// begin SetResourceType ( GetBase ( Dep2 ) , mat_siberit , rand ( 1500 , 2000 ) ) ;
47646: LD_VAR 0 2
47650: PPUSH
47651: CALL_OW 274
47655: PPUSH
47656: LD_INT 3
47658: PPUSH
47659: LD_INT 1500
47661: PPUSH
47662: LD_INT 2000
47664: PPUSH
47665: CALL_OW 12
47669: PPUSH
47670: CALL_OW 277
// SetResourceType ( GetBase ( Dep2 ) , mat_cans , rand ( 1500 , 2000 ) ) ;
47674: LD_VAR 0 2
47678: PPUSH
47679: CALL_OW 274
47683: PPUSH
47684: LD_INT 1
47686: PPUSH
47687: LD_INT 1500
47689: PPUSH
47690: LD_INT 2000
47692: PPUSH
47693: CALL_OW 12
47697: PPUSH
47698: CALL_OW 277
// end ; if IsOk ( Dep3 ) and GetSide ( Dep3 ) = russians then
47702: LD_VAR 0 3
47706: PPUSH
47707: CALL_OW 302
47711: PUSH
47712: LD_VAR 0 3
47716: PPUSH
47717: CALL_OW 255
47721: PUSH
47722: LD_EXP 178
47726: EQUAL
47727: AND
47728: IFFALSE 47786
// begin SetResourceType ( GetBase ( Dep3 ) , mat_siberit , rand ( 500 , 600 ) ) ;
47730: LD_VAR 0 3
47734: PPUSH
47735: CALL_OW 274
47739: PPUSH
47740: LD_INT 3
47742: PPUSH
47743: LD_INT 500
47745: PPUSH
47746: LD_INT 600
47748: PPUSH
47749: CALL_OW 12
47753: PPUSH
47754: CALL_OW 277
// SetResourceType ( GetBase ( Dep3 ) , mat_cans , rand ( 2000 , 2200 ) ) ;
47758: LD_VAR 0 3
47762: PPUSH
47763: CALL_OW 274
47767: PPUSH
47768: LD_INT 1
47770: PPUSH
47771: LD_INT 2000
47773: PPUSH
47774: LD_INT 2200
47776: PPUSH
47777: CALL_OW 12
47781: PPUSH
47782: CALL_OW 277
// end ; enable ;
47786: ENABLE
// end ;
47787: PPOPN 3
47789: END
// export function BuildBehemots ; var i , Un , New_Person ; begin
47790: LD_INT 0
47792: PPUSH
47793: PPUSH
47794: PPUSH
47795: PPUSH
// uc_side = russians ;
47796: LD_ADDR_OWVAR 20
47800: PUSH
47801: LD_EXP 178
47805: ST_TO_ADDR
// uc_nation = nation_russian ;
47806: LD_ADDR_OWVAR 21
47810: PUSH
47811: LD_INT 3
47813: ST_TO_ADDR
// for i = 1 to Number_of_Behemots do
47814: LD_ADDR_VAR 0 2
47818: PUSH
47819: DOUBLE
47820: LD_INT 1
47822: DEC
47823: ST_TO_ADDR
47824: LD_EXP 221
47828: PUSH
47829: FOR_TO
47830: IFFALSE 47914
// begin PrepareMechanic ( 0 , human_difficulty_skill ) ;
47832: LD_INT 0
47834: PPUSH
47835: LD_EXP 184
47839: PPUSH
47840: CALL_OW 383
// New_Person = CreateHuman ;
47844: LD_ADDR_VAR 0 4
47848: PUSH
47849: CALL_OW 44
47853: ST_TO_ADDR
// PlaceHumanInUnit ( New_Person , GetUnitNumber ( 175 , 81 ) ) ;
47854: LD_VAR 0 4
47858: PPUSH
47859: LD_INT 175
47861: PPUSH
47862: LD_INT 81
47864: PPUSH
47865: CALL_OW 438
47869: PPUSH
47870: CALL_OW 52
// AddComExitBuilding ( New_Person ) ;
47874: LD_VAR 0 4
47878: PPUSH
47879: CALL_OW 182
// Behemot_Engineers = Behemot_Engineers ^ New_Person ;
47883: LD_ADDR_EXP 127
47887: PUSH
47888: LD_EXP 127
47892: PUSH
47893: LD_VAR 0 4
47897: ADD
47898: ST_TO_ADDR
// WaitTask ( New_Person , 0.2 ) ;
47899: LD_VAR 0 4
47903: PPUSH
47904: LD_REAL  2.00000000000000E-0001
47907: PPUSH
47908: CALL 17823 0 2
// end ;
47912: GO 47829
47914: POP
47915: POP
// SetSkill ( Behemot_Engineers , skill_engineering , Human_difficulty_skill ) ;
47916: LD_EXP 127
47920: PPUSH
47921: LD_INT 2
47923: PPUSH
47924: LD_EXP 184
47928: PPUSH
47929: CALL_OW 237
// i = 1 ;
47933: LD_ADDR_VAR 0 2
47937: PUSH
47938: LD_INT 1
47940: ST_TO_ADDR
// for Un in Behemot_Engineers do
47941: LD_ADDR_VAR 0 3
47945: PUSH
47946: LD_EXP 127
47950: PUSH
47951: FOR_IN
47952: IFFALSE 48015
// begin ComBuildBehemoth ( Un , b_behemoth , Behemot_Places [ i ] [ 1 ] , Behemot_Places [ i ] [ 2 ] , 5 ) ;
47954: LD_VAR 0 3
47958: PPUSH
47959: LD_INT 37
47961: PPUSH
47962: LD_EXP 224
47966: PUSH
47967: LD_VAR 0 2
47971: ARRAY
47972: PUSH
47973: LD_INT 1
47975: ARRAY
47976: PPUSH
47977: LD_EXP 224
47981: PUSH
47982: LD_VAR 0 2
47986: ARRAY
47987: PUSH
47988: LD_INT 2
47990: ARRAY
47991: PPUSH
47992: LD_INT 5
47994: PPUSH
47995: CALL_OW 170
// i = i + 1 ;
47999: LD_ADDR_VAR 0 2
48003: PUSH
48004: LD_VAR 0 2
48008: PUSH
48009: LD_INT 1
48011: PLUS
48012: ST_TO_ADDR
// end ;
48013: GO 47951
48015: POP
48016: POP
// end ;
48017: LD_VAR 0 1
48021: RET
// export function BehemotsAttack ; var i , Un ; begin
48022: LD_INT 0
48024: PPUSH
48025: PPUSH
48026: PPUSH
// while tick < Behemot_attack_time do
48027: LD_OWVAR 1
48031: PUSH
48032: LD_EXP 225
48036: LESS
48037: IFFALSE 48048
// Wait ( 0 0$2 ) ;
48039: LD_INT 70
48041: PPUSH
48042: CALL_OW 67
48046: GO 48027
// AddMcUnits ( Russian_att_id , New_Behemots ) ;
48048: LD_EXP 242
48052: PPUSH
48053: LD_EXP 129
48057: PPUSH
48058: CALL_OW 390
// New_Behemots = [ ] ;
48062: LD_ADDR_EXP 129
48066: PUSH
48067: EMPTY
48068: ST_TO_ADDR
// i = 1 ;
48069: LD_ADDR_VAR 0 2
48073: PUSH
48074: LD_INT 1
48076: ST_TO_ADDR
// for Un in Behemot_Engineers do
48077: LD_ADDR_VAR 0 3
48081: PUSH
48082: LD_EXP 127
48086: PUSH
48087: FOR_IN
48088: IFFALSE 48151
// begin ComBuildBehemoth ( Un , b_behemoth , Behemot_Places [ i ] [ 1 ] , Behemot_Places [ i ] [ 2 ] , 5 ) ;
48090: LD_VAR 0 3
48094: PPUSH
48095: LD_INT 37
48097: PPUSH
48098: LD_EXP 224
48102: PUSH
48103: LD_VAR 0 2
48107: ARRAY
48108: PUSH
48109: LD_INT 1
48111: ARRAY
48112: PPUSH
48113: LD_EXP 224
48117: PUSH
48118: LD_VAR 0 2
48122: ARRAY
48123: PUSH
48124: LD_INT 2
48126: ARRAY
48127: PPUSH
48128: LD_INT 5
48130: PPUSH
48131: CALL_OW 170
// i = i + 1 ;
48135: LD_ADDR_VAR 0 2
48139: PUSH
48140: LD_VAR 0 2
48144: PUSH
48145: LD_INT 1
48147: PLUS
48148: ST_TO_ADDR
// end ;
48149: GO 48087
48151: POP
48152: POP
// i = 1 ;
48153: LD_ADDR_VAR 0 2
48157: PUSH
48158: LD_INT 1
48160: ST_TO_ADDR
// for Un in Behemot_Engineers do
48161: LD_ADDR_VAR 0 3
48165: PUSH
48166: LD_EXP 127
48170: PUSH
48171: FOR_IN
48172: IFFALSE 48301
// begin while IsOk ( Un ) and not ( GetBType ( GetUnitNumber ( Behemot_Places [ i ] [ 1 ] , Behemot_Places [ i ] [ 2 ] ) ) = b_behemoth ) do
48174: LD_VAR 0 3
48178: PPUSH
48179: CALL_OW 302
48183: PUSH
48184: LD_EXP 224
48188: PUSH
48189: LD_VAR 0 2
48193: ARRAY
48194: PUSH
48195: LD_INT 1
48197: ARRAY
48198: PPUSH
48199: LD_EXP 224
48203: PUSH
48204: LD_VAR 0 2
48208: ARRAY
48209: PUSH
48210: LD_INT 2
48212: ARRAY
48213: PPUSH
48214: CALL_OW 438
48218: PPUSH
48219: CALL_OW 266
48223: PUSH
48224: LD_INT 37
48226: EQUAL
48227: NOT
48228: AND
48229: IFFALSE 48285
// begin ComBuildBehemoth ( Un , b_behemoth , Behemot_Places [ i ] [ 1 ] , Behemot_Places [ i ] [ 2 ] , 5 ) ;
48231: LD_VAR 0 3
48235: PPUSH
48236: LD_INT 37
48238: PPUSH
48239: LD_EXP 224
48243: PUSH
48244: LD_VAR 0 2
48248: ARRAY
48249: PUSH
48250: LD_INT 1
48252: ARRAY
48253: PPUSH
48254: LD_EXP 224
48258: PUSH
48259: LD_VAR 0 2
48263: ARRAY
48264: PUSH
48265: LD_INT 2
48267: ARRAY
48268: PPUSH
48269: LD_INT 5
48271: PPUSH
48272: CALL_OW 170
// Wait ( 0 0$0.5 ) ;
48276: LD_INT 18
48278: PPUSH
48279: CALL_OW 67
// end ;
48283: GO 48174
// i = i + 1 ;
48285: LD_ADDR_VAR 0 2
48289: PUSH
48290: LD_VAR 0 2
48294: PUSH
48295: LD_INT 1
48297: PLUS
48298: ST_TO_ADDR
// end ;
48299: GO 48171
48301: POP
48302: POP
// end ;
48303: LD_VAR 0 1
48307: RET
// every 0 0$2 trigger Russian_Behemots <> 0 do var Un ;
48308: LD_EXP 128
48312: PUSH
48313: LD_INT 0
48315: NONEQUAL
48316: IFFALSE 48424
48318: GO 48320
48320: DISABLE
48321: LD_INT 0
48323: PPUSH
// begin for Un in Russian_Behemots do
48324: LD_ADDR_VAR 0 1
48328: PUSH
48329: LD_EXP 128
48333: PUSH
48334: FOR_IN
48335: IFFALSE 48421
// if See ( americans , Un ) then
48337: LD_EXP 176
48341: PPUSH
48342: LD_VAR 0 1
48346: PPUSH
48347: CALL_OW 292
48351: IFFALSE 48419
// begin if IsInArea ( Un , Plan6 ) then
48353: LD_VAR 0 1
48357: PPUSH
48358: LD_INT 34
48360: PPUSH
48361: CALL_OW 308
48365: IFFALSE 48394
// begin CenterOnUnits ( Un ) ;
48367: LD_VAR 0 1
48371: PPUSH
48372: CALL_OW 85
// Say ( JMM , D17a-JMM-1 ) ;
48376: LD_EXP 1
48380: PPUSH
48381: LD_STRING D17a-JMM-1
48383: PPUSH
48384: CALL_OW 88
// exit ;
48388: POP
48389: POP
48390: GO 48424
// end else
48392: GO 48419
// begin CenterOnUnits ( Un ) ;
48394: LD_VAR 0 1
48398: PPUSH
48399: CALL_OW 85
// Say ( JMM , D17b-JMM-1 ) ;
48403: LD_EXP 1
48407: PPUSH
48408: LD_STRING D17b-JMM-1
48410: PPUSH
48411: CALL_OW 88
// exit ;
48415: POP
48416: POP
48417: GO 48424
// end ; end ;
48419: GO 48334
48421: POP
48422: POP
// enable ;
48423: ENABLE
// end ;
48424: PPOPN 1
48426: END
// every 0 0$10 trigger tick > Behemots_broadcast and ( not ( Russian_Siberite_Attack ) or not ( The_Last_Arabian_Attack_Begun ) ) do var Teleport1 , Teleport2 , Un , i , hex , sib_r , rus_remaind ;
48427: LD_OWVAR 1
48431: PUSH
48432: LD_EXP 203
48436: GREATER
48437: PUSH
48438: LD_EXP 215
48442: NOT
48443: PUSH
48444: LD_EXP 227
48448: NOT
48449: OR
48450: AND
48451: IFFALSE 48676
48453: GO 48455
48455: DISABLE
48456: LD_INT 0
48458: PPUSH
48459: PPUSH
48460: PPUSH
48461: PPUSH
48462: PPUSH
48463: PPUSH
48464: PPUSH
// begin rus_remaind = UnitFilter ( All_Russians , [ f_ok ] ) ;
48465: LD_ADDR_VAR 0 7
48469: PUSH
48470: LD_EXP 111
48474: PPUSH
48475: LD_INT 50
48477: PUSH
48478: EMPTY
48479: LIST
48480: PPUSH
48481: CALL_OW 72
48485: ST_TO_ADDR
// if ( rus_remaind < 3 ) and not ( The_Last_Arabian_Attack_Begun ) then
48486: LD_VAR 0 7
48490: PUSH
48491: LD_INT 3
48493: LESS
48494: PUSH
48495: LD_EXP 227
48499: NOT
48500: AND
48501: IFFALSE 48515
// begin The_Last_Arabian_Attack_Begun = true ;
48503: LD_ADDR_EXP 227
48507: PUSH
48508: LD_INT 1
48510: ST_TO_ADDR
// TheLastArabianAttack ;
48511: CALL 49918 0 0
// end ; if ( rus_remaind < 10 ) and not ( Russian_Siberite_Attack ) then
48515: LD_VAR 0 7
48519: PUSH
48520: LD_INT 10
48522: LESS
48523: PUSH
48524: LD_EXP 215
48528: NOT
48529: AND
48530: IFFALSE 48661
// begin if ( FilterUnitsInArea ( R_base , [ [ f_side , americans ] , [ f_ok ] ] ) <> 0 ) then
48532: LD_INT 36
48534: PPUSH
48535: LD_INT 22
48537: PUSH
48538: LD_EXP 176
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 50
48549: PUSH
48550: EMPTY
48551: LIST
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PPUSH
48557: CALL_OW 70
48561: PUSH
48562: LD_INT 0
48564: NONEQUAL
48565: IFFALSE 48661
// begin sib_r = FilterAllUnits ( [ [ f_side , Russians ] , [ f_ok ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
48567: LD_ADDR_VAR 0 6
48571: PUSH
48572: LD_INT 22
48574: PUSH
48575: LD_EXP 178
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 50
48586: PUSH
48587: EMPTY
48588: LIST
48589: PUSH
48590: LD_INT 34
48592: PUSH
48593: LD_INT 48
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: LIST
48604: PPUSH
48605: CALL_OW 69
48609: ST_TO_ADDR
// if ( sib_r <> 0 ) and not ( Russian_Siberite_Attack ) then
48610: LD_VAR 0 6
48614: PUSH
48615: LD_INT 0
48617: NONEQUAL
48618: PUSH
48619: LD_EXP 215
48623: NOT
48624: AND
48625: IFFALSE 48661
// begin Russian_Siberite_Attack = true ;
48627: LD_ADDR_EXP 215
48631: PUSH
48632: LD_INT 1
48634: ST_TO_ADDR
// for Un in sib_r do
48635: LD_ADDR_VAR 0 3
48639: PUSH
48640: LD_VAR 0 6
48644: PUSH
48645: FOR_IN
48646: IFFALSE 48659
// RSiberiteAttack ( Un ) ;
48648: LD_VAR 0 3
48652: PPUSH
48653: CALL 18466 0 1
48657: GO 48645
48659: POP
48660: POP
// end ; end ; end ; if not ( Russian_Siberite_Attack ) or not ( The_Last_Arabian_Attack_Begun ) then
48661: LD_EXP 215
48665: NOT
48666: PUSH
48667: LD_EXP 227
48671: NOT
48672: OR
48673: IFFALSE 48676
// enable ;
48675: ENABLE
// end ; end_of_file
48676: PPOPN 7
48678: END
// function PlaceAttackingUnits ; var Un ; begin
48679: LD_INT 0
48681: PPUSH
48682: PPUSH
// for Un in Omar_vehicles do
48683: LD_ADDR_VAR 0 2
48687: PUSH
48688: LD_EXP 74
48692: PUSH
48693: FOR_IN
48694: IFFALSE 48713
// PlaceUnitArea ( Un , ArStart1 , false ) ;
48696: LD_VAR 0 2
48700: PPUSH
48701: LD_INT 38
48703: PPUSH
48704: LD_INT 0
48706: PPUSH
48707: CALL_OW 49
48711: GO 48693
48713: POP
48714: POP
// PlaceUnitArea ( Masto , ArStart , false ) ;
48715: LD_INT 147
48717: PPUSH
48718: LD_INT 37
48720: PPUSH
48721: LD_INT 0
48723: PPUSH
48724: CALL_OW 49
// PlaceUnitArea ( Heike , ArStart , false ) ;
48728: LD_EXP 29
48732: PPUSH
48733: LD_INT 37
48735: PPUSH
48736: LD_INT 0
48738: PPUSH
48739: CALL_OW 49
// for Un in Omar_Soldiers do
48743: LD_ADDR_VAR 0 2
48747: PUSH
48748: LD_EXP 72
48752: PUSH
48753: FOR_IN
48754: IFFALSE 48773
// PlaceUnitArea ( Un , ArStart , false ) ;
48756: LD_VAR 0 2
48760: PPUSH
48761: LD_INT 37
48763: PPUSH
48764: LD_INT 0
48766: PPUSH
48767: CALL_OW 49
48771: GO 48753
48773: POP
48774: POP
// for Un in Omar_Scientists do
48775: LD_ADDR_VAR 0 2
48779: PUSH
48780: LD_EXP 73
48784: PUSH
48785: FOR_IN
48786: IFFALSE 48805
// PlaceUnitArea ( Un , ArStart , false ) ;
48788: LD_VAR 0 2
48792: PPUSH
48793: LD_INT 37
48795: PPUSH
48796: LD_INT 0
48798: PPUSH
48799: CALL_OW 49
48803: GO 48785
48805: POP
48806: POP
// end ;
48807: LD_VAR 0 1
48811: RET
// function JMM_warns ; var Remaining_americans , Remaining_unnamed_males , sold ; begin
48812: LD_INT 0
48814: PPUSH
48815: PPUSH
48816: PPUSH
48817: PPUSH
// placeseeing ( 157 , 7 , americans , - 15 ) ;
48818: LD_INT 157
48820: PPUSH
48821: LD_INT 7
48823: PPUSH
48824: LD_EXP 176
48828: PPUSH
48829: LD_INT 15
48831: NEG
48832: PPUSH
48833: CALL_OW 330
// placeseeing ( 165 , 21 , americans , - 15 ) ;
48837: LD_INT 165
48839: PPUSH
48840: LD_INT 21
48842: PPUSH
48843: LD_EXP 176
48847: PPUSH
48848: LD_INT 15
48850: NEG
48851: PPUSH
48852: CALL_OW 330
// CenterNowOnUnits ( [ Omar , Heike ] ) ;
48856: LD_EXP 28
48860: PUSH
48861: LD_EXP 29
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PPUSH
48870: CALL_OW 87
// Wait ( 0 0$0.5 ) ;
48874: LD_INT 18
48876: PPUSH
48877: CALL_OW 67
// Remaining_americans = FilterAllUnits ( [ [ f_side , americans ] , [ f_sex , sex_male ] , f_not , [ [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_kamikaze ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ] ) diff JMM ;
48881: LD_ADDR_VAR 0 2
48885: PUSH
48886: LD_INT 22
48888: PUSH
48889: LD_EXP 176
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 26
48900: PUSH
48901: LD_INT 1
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 3
48910: PUSH
48911: LD_INT 2
48913: PUSH
48914: LD_INT 25
48916: PUSH
48917: LD_INT 12
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 25
48926: PUSH
48927: LD_INT 16
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 25
48936: PUSH
48937: LD_INT 17
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 25
48946: PUSH
48947: LD_INT 15
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 25
48956: PUSH
48957: LD_INT 17
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: PUSH
48972: EMPTY
48973: LIST
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: PPUSH
48981: CALL_OW 69
48985: PUSH
48986: LD_EXP 1
48990: DIFF
48991: ST_TO_ADDR
// Remaining_unnamed_males = Remaining_americans diff [ JMM , Powell , Bobby , Cyrus , Lisa , Frank , Brown , Donaldson , Gladstone , Cornell , Denis , Joan , Kurt , Yamoko , Gary , Simms , Stevens , Coonie , Friend ] ;
48992: LD_ADDR_VAR 0 3
48996: PUSH
48997: LD_VAR 0 2
49001: PUSH
49002: LD_EXP 1
49006: PUSH
49007: LD_EXP 2
49011: PUSH
49012: LD_EXP 3
49016: PUSH
49017: LD_EXP 4
49021: PUSH
49022: LD_EXP 5
49026: PUSH
49027: LD_EXP 6
49031: PUSH
49032: LD_EXP 7
49036: PUSH
49037: LD_EXP 8
49041: PUSH
49042: LD_EXP 9
49046: PUSH
49047: LD_EXP 10
49051: PUSH
49052: LD_EXP 11
49056: PUSH
49057: LD_EXP 12
49061: PUSH
49062: LD_EXP 13
49066: PUSH
49067: LD_EXP 14
49071: PUSH
49072: LD_EXP 15
49076: PUSH
49077: LD_EXP 16
49081: PUSH
49082: LD_EXP 17
49086: PUSH
49087: LD_EXP 18
49091: PUSH
49092: LD_EXP 21
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: DIFF
49118: ST_TO_ADDR
// Sold = 0 ;
49119: LD_ADDR_VAR 0 4
49123: PUSH
49124: LD_INT 0
49126: ST_TO_ADDR
// if Remaining_unnamed_males <> 0 then
49127: LD_VAR 0 3
49131: PUSH
49132: LD_INT 0
49134: NONEQUAL
49135: IFFALSE 49163
// Sold = Remaining_unnamed_males [ Rand ( 1 , Remaining_unnamed_males ) ] else
49137: LD_ADDR_VAR 0 4
49141: PUSH
49142: LD_VAR 0 3
49146: PUSH
49147: LD_INT 1
49149: PPUSH
49150: LD_VAR 0 3
49154: PPUSH
49155: CALL_OW 12
49159: ARRAY
49160: ST_TO_ADDR
49161: GO 49197
// if Sold <> 0 then
49163: LD_VAR 0 4
49167: PUSH
49168: LD_INT 0
49170: NONEQUAL
49171: IFFALSE 49197
// Sold = Remaining_americans [ Rand ( 1 , Remaining_americans ) ] ;
49173: LD_ADDR_VAR 0 4
49177: PUSH
49178: LD_VAR 0 2
49182: PUSH
49183: LD_INT 1
49185: PPUSH
49186: LD_VAR 0 2
49190: PPUSH
49191: CALL_OW 12
49195: ARRAY
49196: ST_TO_ADDR
// DialogueON ;
49197: CALL_OW 6
// Say ( JMM , D19-JMM-1 ) ;
49201: LD_EXP 1
49205: PPUSH
49206: LD_STRING D19-JMM-1
49208: PPUSH
49209: CALL_OW 88
// Say ( Sold , D19-Sol1-1 ) ;
49213: LD_VAR 0 4
49217: PPUSH
49218: LD_STRING D19-Sol1-1
49220: PPUSH
49221: CALL_OW 88
// Say ( JMM , D19-JMM-2 ) ;
49225: LD_EXP 1
49229: PPUSH
49230: LD_STRING D19-JMM-2
49232: PPUSH
49233: CALL_OW 88
// DialogueOFF ;
49237: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
49241: LD_STRING M5
49243: PPUSH
49244: CALL_OW 337
// end ;
49248: LD_VAR 0 1
49252: RET
// function LaunchMines ; var mines_pos , mines_pos1 , i , j ; begin
49253: LD_INT 0
49255: PPUSH
49256: PPUSH
49257: PPUSH
49258: PPUSH
49259: PPUSH
// mines_pos = [ [ 168 , 18 ] , [ 169 , 20 ] , [ 167 , 20 ] , [ 164 , 18 ] , [ 164 , 19 ] , [ 163 , 19 ] , [ 164 , 21 ] , [ 165 , 21 ] , [ 163 , 20 ] , [ 164 , 22 ] , [ 162 , 20 ] ] ;
49260: LD_ADDR_VAR 0 2
49264: PUSH
49265: LD_INT 168
49267: PUSH
49268: LD_INT 18
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 169
49277: PUSH
49278: LD_INT 20
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 167
49287: PUSH
49288: LD_INT 20
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 164
49297: PUSH
49298: LD_INT 18
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 164
49307: PUSH
49308: LD_INT 19
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 163
49317: PUSH
49318: LD_INT 19
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 164
49327: PUSH
49328: LD_INT 21
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 165
49337: PUSH
49338: LD_INT 21
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 163
49347: PUSH
49348: LD_INT 20
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 164
49357: PUSH
49358: LD_INT 22
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 162
49367: PUSH
49368: LD_INT 20
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: ST_TO_ADDR
// mines_pos1 = [ [ 169 , 34 ] , [ 169 , 35 ] , [ 167 , 32 ] , [ 170 , 31 ] , [ 173 , 35 ] , [ 174 , 39 ] ] ;
49388: LD_ADDR_VAR 0 3
49392: PUSH
49393: LD_INT 169
49395: PUSH
49396: LD_INT 34
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 169
49405: PUSH
49406: LD_INT 35
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 167
49415: PUSH
49416: LD_INT 32
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 170
49425: PUSH
49426: LD_INT 31
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 173
49435: PUSH
49436: LD_INT 35
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 174
49445: PUSH
49446: LD_INT 39
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: ST_TO_ADDR
// for i = 1 to mines_pos do
49461: LD_ADDR_VAR 0 4
49465: PUSH
49466: DOUBLE
49467: LD_INT 1
49469: DEC
49470: ST_TO_ADDR
49471: LD_VAR 0 2
49475: PUSH
49476: FOR_TO
49477: IFFALSE 49689
// begin MineExplosion ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] , 1 ) ;
49479: LD_VAR 0 2
49483: PUSH
49484: LD_VAR 0 4
49488: ARRAY
49489: PUSH
49490: LD_INT 1
49492: ARRAY
49493: PPUSH
49494: LD_VAR 0 2
49498: PUSH
49499: LD_VAR 0 4
49503: ARRAY
49504: PUSH
49505: LD_INT 2
49507: ARRAY
49508: PPUSH
49509: LD_INT 1
49511: PPUSH
49512: CALL_OW 453
// Wait ( Rand ( 1 , 3 ) ) ;
49516: LD_INT 1
49518: PPUSH
49519: LD_INT 3
49521: PPUSH
49522: CALL_OW 12
49526: PPUSH
49527: CALL_OW 67
// if i < mines_pos then
49531: LD_VAR 0 4
49535: PUSH
49536: LD_VAR 0 2
49540: LESS
49541: IFFALSE 49579
// RemoveEnvironmentWithoutRebuild ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] ) else
49543: LD_VAR 0 2
49547: PUSH
49548: LD_VAR 0 4
49552: ARRAY
49553: PUSH
49554: LD_INT 1
49556: ARRAY
49557: PPUSH
49558: LD_VAR 0 2
49562: PUSH
49563: LD_VAR 0 4
49567: ARRAY
49568: PUSH
49569: LD_INT 2
49571: ARRAY
49572: PPUSH
49573: CALL_OW 348
49577: GO 49687
// begin for j = 1 to mines_pos1 do
49579: LD_ADDR_VAR 0 5
49583: PUSH
49584: DOUBLE
49585: LD_INT 1
49587: DEC
49588: ST_TO_ADDR
49589: LD_VAR 0 3
49593: PUSH
49594: FOR_TO
49595: IFFALSE 49651
// begin MineExplosion ( mines_pos1 [ j ] [ 1 ] , mines_pos1 [ j ] [ 2 ] , 1 ) ;
49597: LD_VAR 0 3
49601: PUSH
49602: LD_VAR 0 5
49606: ARRAY
49607: PUSH
49608: LD_INT 1
49610: ARRAY
49611: PPUSH
49612: LD_VAR 0 3
49616: PUSH
49617: LD_VAR 0 5
49621: ARRAY
49622: PUSH
49623: LD_INT 2
49625: ARRAY
49626: PPUSH
49627: LD_INT 1
49629: PPUSH
49630: CALL_OW 453
// Wait ( Rand ( 1 , 3 ) ) ;
49634: LD_INT 1
49636: PPUSH
49637: LD_INT 3
49639: PPUSH
49640: CALL_OW 12
49644: PPUSH
49645: CALL_OW 67
// end ;
49649: GO 49594
49651: POP
49652: POP
// RemoveEnvironment ( mines_pos [ i ] [ 1 ] , mines_pos [ i ] [ 2 ] ) ;
49653: LD_VAR 0 2
49657: PUSH
49658: LD_VAR 0 4
49662: ARRAY
49663: PUSH
49664: LD_INT 1
49666: ARRAY
49667: PPUSH
49668: LD_VAR 0 2
49672: PUSH
49673: LD_VAR 0 4
49677: ARRAY
49678: PUSH
49679: LD_INT 2
49681: ARRAY
49682: PPUSH
49683: CALL_OW 347
// end ; end ;
49687: GO 49476
49689: POP
49690: POP
// end ;
49691: LD_VAR 0 1
49695: RET
// function StartTheAttack ; begin
49696: LD_INT 0
49698: PPUSH
// ComMoveXY ( Omar_vehicles ^ Masto , 184 , 82 ) ;
49699: LD_EXP 74
49703: PUSH
49704: LD_INT 147
49706: ADD
49707: PPUSH
49708: LD_INT 184
49710: PPUSH
49711: LD_INT 82
49713: PPUSH
49714: CALL_OW 111
// Wait ( 0 0$3 ) ;
49718: LD_INT 105
49720: PPUSH
49721: CALL_OW 67
// McMove ( 100 , Heike ^ Omar_Soldiers , [ [ 184 , 82 ] ] , mc_no_stop ) ;
49725: LD_INT 100
49727: PPUSH
49728: LD_EXP 29
49732: PUSH
49733: LD_EXP 72
49737: ADD
49738: PPUSH
49739: LD_INT 184
49741: PUSH
49742: LD_INT 82
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: EMPTY
49750: LIST
49751: PPUSH
49752: LD_INT 10
49754: PPUSH
49755: CALL_OW 398
// Wait ( 0 0$5 ) ;
49759: LD_INT 175
49761: PPUSH
49762: CALL_OW 67
// ComContaminate ( Omar_Scientists , 177 , 69 ) ;
49766: LD_EXP 73
49770: PPUSH
49771: LD_INT 177
49773: PPUSH
49774: LD_INT 69
49776: PPUSH
49777: CALL_OW 158
// end ;
49781: LD_VAR 0 1
49785: RET
// export function HeikeLastWords ; begin
49786: LD_INT 0
49788: PPUSH
// if IsDead ( Omar ) and ( Heike_Last_Words = false ) then
49789: LD_EXP 28
49793: PPUSH
49794: CALL_OW 301
49798: PUSH
49799: LD_EXP 232
49803: PUSH
49804: LD_INT 0
49806: EQUAL
49807: AND
49808: IFFALSE 49853
// begin Heike_Last_Words = true ;
49810: LD_ADDR_EXP 232
49814: PUSH
49815: LD_INT 1
49817: ST_TO_ADDR
// Say ( JMM , D19a-JMM-1 ) ;
49818: LD_EXP 1
49822: PPUSH
49823: LD_STRING D19a-JMM-1
49825: PPUSH
49826: CALL_OW 88
// if IsOk ( Heike ) then
49830: LD_EXP 29
49834: PPUSH
49835: CALL_OW 302
49839: IFFALSE 49853
// Say ( Heike , D19a-Hke-1 ) ;
49841: LD_EXP 29
49845: PPUSH
49846: LD_STRING D19a-Hke-1
49848: PPUSH
49849: CALL_OW 88
// end end ;
49853: LD_VAR 0 1
49857: RET
// export function TestForEndOfMission ; var Last_enemies ; begin
49858: LD_INT 0
49860: PPUSH
49861: PPUSH
// Last_enemies = FilterAllUnits ( [ [ f_type , unit_human ] , [ f_side , arabians1 ] ] ) ;
49862: LD_ADDR_VAR 0 2
49866: PUSH
49867: LD_INT 21
49869: PUSH
49870: LD_INT 1
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 22
49879: PUSH
49880: LD_EXP 181
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PPUSH
49893: CALL_OW 69
49897: ST_TO_ADDR
// if Last_enemies = 0 then
49898: LD_VAR 0 2
49902: PUSH
49903: LD_INT 0
49905: EQUAL
49906: IFFALSE 49913
// enable ( End_of_m ) ;
49908: LD_EXP 158
49912: ENABLE_MARKED
// end ;
49913: LD_VAR 0 1
49917: RET
// export function TheLastArabianAttack ; begin
49918: LD_INT 0
49920: PPUSH
// Wait ( 0 0$10 ) ;
49921: LD_INT 350
49923: PPUSH
49924: CALL_OW 67
// PlaceAttackingUnits ;
49928: CALL 48679 0 0
// JMM_warns ;
49932: CALL 48812 0 0
// LaunchMines ;
49936: CALL 49253 0 0
// StartTheAttack ;
49940: CALL 49696 0 0
// end ; end_of_file
49944: LD_VAR 0 1
49948: RET
// export function StartAllianceBase ; var i , Bunkers , Turrets , units_to_protect ; begin
49949: LD_INT 0
49951: PPUSH
49952: PPUSH
49953: PPUSH
49954: PPUSH
49955: PPUSH
// SetResourceType ( GetBase ( AllDep ) , mat_siberit , 200 ) ;
49956: LD_INT 45
49958: PPUSH
49959: CALL_OW 274
49963: PPUSH
49964: LD_INT 3
49966: PPUSH
49967: LD_INT 200
49969: PPUSH
49970: CALL_OW 277
// SetResourceType ( GetBase ( AllDep ) , mat_cans , 400 ) ;
49974: LD_INT 45
49976: PPUSH
49977: CALL_OW 274
49981: PPUSH
49982: LD_INT 1
49984: PPUSH
49985: LD_INT 400
49987: PPUSH
49988: CALL_OW 277
// Alliance_Doctors = Alliance_am_scientists [ 1 ] ;
49992: LD_ADDR_EXP 102
49996: PUSH
49997: LD_EXP 97
50001: PUSH
50002: LD_INT 1
50004: ARRAY
50005: ST_TO_ADDR
// Alliance_am_scientists = Alliance_am_scientists diff Alliance_am_scientists [ 1 ] ;
50006: LD_ADDR_EXP 97
50010: PUSH
50011: LD_EXP 97
50015: PUSH
50016: LD_EXP 97
50020: PUSH
50021: LD_INT 1
50023: ARRAY
50024: DIFF
50025: ST_TO_ADDR
// ComEnterUnit ( Alliance_am_scientists , AllLabA ) ;
50026: LD_EXP 97
50030: PPUSH
50031: LD_INT 46
50033: PPUSH
50034: CALL_OW 120
// Alliance_Doctors = Alliance_rus_scientists [ 1 ] ;
50038: LD_ADDR_EXP 102
50042: PUSH
50043: LD_EXP 96
50047: PUSH
50048: LD_INT 1
50050: ARRAY
50051: ST_TO_ADDR
// Alliance_rus_scientists = Alliance_rus_scientists diff Alliance_rus_scientists [ 1 ] ;
50052: LD_ADDR_EXP 96
50056: PUSH
50057: LD_EXP 96
50061: PUSH
50062: LD_EXP 96
50066: PUSH
50067: LD_INT 1
50069: ARRAY
50070: DIFF
50071: ST_TO_ADDR
// ComEnterUnit ( Alliance_rus_scientists , AllLabR1 ) ;
50072: LD_EXP 96
50076: PPUSH
50077: LD_INT 39
50079: PPUSH
50080: CALL_OW 120
// ComResearch ( AllLabA , tech_Comp1 ) ;
50084: LD_INT 46
50086: PPUSH
50087: LD_INT 57
50089: PPUSH
50090: CALL_OW 124
// AddComResearch ( AllLabA , tech_Opto1 ) ;
50094: LD_INT 46
50096: PPUSH
50097: LD_INT 60
50099: PPUSH
50100: CALL_OW 184
// AddComResearch ( AllLabA , tech_Sib1 ) ;
50104: LD_INT 46
50106: PPUSH
50107: LD_INT 54
50109: PPUSH
50110: CALL_OW 184
// AddComResearch ( AllLabA , tech_Opto2 ) ;
50114: LD_INT 46
50116: PPUSH
50117: LD_INT 61
50119: PPUSH
50120: CALL_OW 184
// AddComResearch ( AllLabA , tech_Sib2 ) ;
50124: LD_INT 46
50126: PPUSH
50127: LD_INT 55
50129: PPUSH
50130: CALL_OW 184
// AddComResearch ( AllLabA , tech_Opto3 ) ;
50134: LD_INT 46
50136: PPUSH
50137: LD_INT 62
50139: PPUSH
50140: CALL_OW 184
// AddComResearch ( AllLabA , tech_Sib3 ) ;
50144: LD_INT 46
50146: PPUSH
50147: LD_INT 56
50149: PPUSH
50150: CALL_OW 184
// ComResearch ( AllLabR1 , tech_ST1 ) ;
50154: LD_INT 39
50156: PPUSH
50157: LD_INT 63
50159: PPUSH
50160: CALL_OW 124
// AddComResearch ( AllLabR1 , tech_ST2 ) ;
50164: LD_INT 39
50166: PPUSH
50167: LD_INT 64
50169: PPUSH
50170: CALL_OW 184
// AddComResearch ( AllLabR1 , tech_ST3 ) ;
50174: LD_INT 39
50176: PPUSH
50177: LD_INT 65
50179: PPUSH
50180: CALL_OW 184
// ComResearch ( AllLabR2 , tech_Comp1 ) ;
50184: LD_INT 133
50186: PPUSH
50187: LD_INT 57
50189: PPUSH
50190: CALL_OW 124
// AddComResearch ( AllLabR2 , tech_Weap1 ) ;
50194: LD_INT 133
50196: PPUSH
50197: LD_INT 51
50199: PPUSH
50200: CALL_OW 184
// AddComResearch ( AllLabR2 , tech_Comp2 ) ;
50204: LD_INT 133
50206: PPUSH
50207: LD_INT 58
50209: PPUSH
50210: CALL_OW 184
// AddComResearch ( AllLabR2 , tech_Weap2 ) ;
50214: LD_INT 133
50216: PPUSH
50217: LD_INT 52
50219: PPUSH
50220: CALL_OW 184
// AddComResearch ( AllLabR2 , tech_Comp3 ) ;
50224: LD_INT 133
50226: PPUSH
50227: LD_INT 59
50229: PPUSH
50230: CALL_OW 184
// AddComResearch ( AllLabR2 , tech_Weap3 ) ;
50234: LD_INT 133
50236: PPUSH
50237: LD_INT 53
50239: PPUSH
50240: CALL_OW 184
// ComEnterUnit ( Alliance_am_soldiers , AllBarrA ) ;
50244: LD_EXP 95
50248: PPUSH
50249: LD_INT 41
50251: PPUSH
50252: CALL_OW 120
// ComEnterUnit ( Alliance_rus_soldiers , AllBarrR ) ;
50256: LD_EXP 94
50260: PPUSH
50261: LD_INT 48
50263: PPUSH
50264: CALL_OW 120
// Bunkers = FilterAllUnits ( [ [ f_side , alliance ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) ;
50268: LD_ADDR_VAR 0 3
50272: PUSH
50273: LD_INT 22
50275: PUSH
50276: LD_EXP 182
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 21
50287: PUSH
50288: LD_INT 3
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 30
50297: PUSH
50298: LD_INT 32
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: LIST
50309: PPUSH
50310: CALL_OW 69
50314: ST_TO_ADDR
// Turrets = FilterAllUnits ( [ [ f_side , alliance ] , [ f_type , unit_building ] , [ f_btype , b_turret ] ] ) ;
50315: LD_ADDR_VAR 0 4
50319: PUSH
50320: LD_INT 22
50322: PUSH
50323: LD_EXP 182
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 21
50334: PUSH
50335: LD_INT 3
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 30
50344: PUSH
50345: LD_INT 33
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: LIST
50356: PPUSH
50357: CALL_OW 69
50361: ST_TO_ADDR
// units_to_protect = Bunkers ^ Turrets ^ AllBarrA ^ AllBarrR ;
50362: LD_ADDR_VAR 0 5
50366: PUSH
50367: LD_VAR 0 3
50371: PUSH
50372: LD_VAR 0 4
50376: ADD
50377: PUSH
50378: LD_INT 41
50380: ADD
50381: PUSH
50382: LD_INT 48
50384: ADD
50385: ST_TO_ADDR
// Alliance_reg_id = McRegistry ( alliance , [ [ mc_reg_area_to_guard , Al_Base ] , [ mc_reg_refresh_time , 0 0$2 ] , [ mc_reg_area_to_protect , Al_Base ] , [ mc_reg_units_to_protect , units_to_protect ] , - mc_reg_only_important , - mc_reg_ignore_fog ] ) ;
50386: LD_ADDR_EXP 247
50390: PUSH
50391: LD_EXP 182
50395: PPUSH
50396: LD_INT 2
50398: PUSH
50399: LD_INT 18
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 1
50408: PUSH
50409: LD_INT 70
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 3
50418: PUSH
50419: LD_INT 18
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 4
50428: PUSH
50429: LD_VAR 0 5
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 8
50440: NEG
50441: PUSH
50442: LD_INT 7
50444: NEG
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: PPUSH
50454: CALL_OW 399
50458: ST_TO_ADDR
// Alliance_wood_reg_id = McRegistry ( alliance , [ [ mc_reg_area_to_guard , Ali_wood ] , [ mc_reg_refresh_time , 0 0$5 ] , - mc_reg_only_important , - mc_reg_ignore_fog ] ) ;
50459: LD_ADDR_EXP 249
50463: PUSH
50464: LD_EXP 182
50468: PPUSH
50469: LD_INT 2
50471: PUSH
50472: LD_INT 9
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 1
50481: PUSH
50482: LD_INT 175
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 8
50491: NEG
50492: PUSH
50493: LD_INT 7
50495: NEG
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: PPUSH
50503: CALL_OW 399
50507: ST_TO_ADDR
// McDefend ( 100 , Alliance_reg_id , Alliance_am_soldiers ^ Alliance_rus_soldiers ^ units_to_protect , [ [ mc_area_dont_leave , Al_Base ] , [ mc_retreat_area_people , Al_Heal ] , [ mc_retreat_lives_people , 550 ] ] ) ;
50508: LD_INT 100
50510: PPUSH
50511: LD_EXP 247
50515: PPUSH
50516: LD_EXP 95
50520: PUSH
50521: LD_EXP 94
50525: ADD
50526: PUSH
50527: LD_VAR 0 5
50531: ADD
50532: PPUSH
50533: LD_INT 2
50535: PUSH
50536: LD_INT 18
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 7
50545: PUSH
50546: LD_INT 28
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 5
50555: PUSH
50556: LD_INT 550
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: LIST
50567: PPUSH
50568: CALL_OW 401
// end ;
50572: LD_VAR 0 1
50576: RET
// export function AlliancePersonIsDead ; begin
50577: LD_INT 0
50579: PPUSH
// if FilterAllUnits ( [ [ f_side , alliance ] , [ f_alive ] , [ f_type , unit_human ] ] ) = 0 then
50580: LD_INT 22
50582: PUSH
50583: LD_EXP 182
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 51
50594: PUSH
50595: EMPTY
50596: LIST
50597: PUSH
50598: LD_INT 21
50600: PUSH
50601: LD_INT 1
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: LIST
50612: PPUSH
50613: CALL_OW 69
50617: PUSH
50618: LD_INT 0
50620: EQUAL
50621: IFFALSE 50655
// begin KillMc ( Alliance_reg_id ) ;
50623: LD_EXP 247
50627: PPUSH
50628: CALL_OW 387
// KillMc ( Alliance_def_id ) ;
50632: LD_EXP 248
50636: PPUSH
50637: CALL_OW 387
// KillMc ( Alliance_wood_reg_id ) ;
50641: LD_EXP 249
50645: PPUSH
50646: CALL_OW 387
// disable ( Not_end_of_alliance ) ;
50650: LD_EXP 154
50654: DISABLE_MARKED
// end ; end ;
50655: LD_VAR 0 1
50659: RET
// export function AllianceBuildingInRed ; var All_Alliance_Units , Un ; begin
50660: LD_INT 0
50662: PPUSH
50663: PPUSH
50664: PPUSH
// if not ( IsOk ( AllDep ) ) or GetSide ( AllDep ) <> alliance or not ( IsOk ( AllLabA ) ) or GetSide ( AllLabA ) <> alliance then
50665: LD_INT 45
50667: PPUSH
50668: CALL_OW 302
50672: NOT
50673: PUSH
50674: LD_INT 45
50676: PPUSH
50677: CALL_OW 255
50681: PUSH
50682: LD_EXP 182
50686: NONEQUAL
50687: OR
50688: PUSH
50689: LD_INT 46
50691: PPUSH
50692: CALL_OW 302
50696: NOT
50697: OR
50698: PUSH
50699: LD_INT 46
50701: PPUSH
50702: CALL_OW 255
50706: PUSH
50707: LD_EXP 182
50711: NONEQUAL
50712: OR
50713: IFFALSE 50749
// begin ComStop ( [ Explorer1 , Explorer2 ] ) ;
50715: LD_EXP 100
50719: PUSH
50720: LD_EXP 101
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PPUSH
50729: CALL_OW 141
// Explorer1 = 0 ;
50733: LD_ADDR_EXP 100
50737: PUSH
50738: LD_INT 0
50740: ST_TO_ADDR
// Explorer2 = 0 ;
50741: LD_ADDR_EXP 101
50745: PUSH
50746: LD_INT 0
50748: ST_TO_ADDR
// end ; if ( ( UnitFilter ( Alliance_def_buildings , [ [ f_ok ] , [ f_side , alliance ] ] ) = 0 ) or not ( IsOk ( AllDep ) ) or GetSide ( AllDep ) <> alliance ) then
50749: LD_EXP 207
50753: PPUSH
50754: LD_INT 50
50756: PUSH
50757: EMPTY
50758: LIST
50759: PUSH
50760: LD_INT 22
50762: PUSH
50763: LD_EXP 182
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PPUSH
50776: CALL_OW 72
50780: PUSH
50781: LD_INT 0
50783: EQUAL
50784: PUSH
50785: LD_INT 45
50787: PPUSH
50788: CALL_OW 302
50792: NOT
50793: OR
50794: PUSH
50795: LD_INT 45
50797: PPUSH
50798: CALL_OW 255
50802: PUSH
50803: LD_EXP 182
50807: NONEQUAL
50808: OR
50809: IFFALSE 51448
// begin if IsOk ( Roth ) and GetAttitude ( alliance , americans ) <> att_friend then
50811: LD_EXP 20
50815: PPUSH
50816: CALL_OW 302
50820: PUSH
50821: LD_EXP 182
50825: PPUSH
50826: LD_EXP 176
50830: PPUSH
50831: CALL_OW 81
50835: PUSH
50836: LD_INT 1
50838: NONEQUAL
50839: AND
50840: IFFALSE 51448
// begin disable ( Explorers_Can_Go ) ;
50842: LD_EXP 153
50846: DISABLE_MARKED
// disable ( Not_End_of_Alliance ) ;
50847: LD_EXP 154
50851: DISABLE_MARKED
// SetSide ( FilterAllUnits ( [ f_side , Explorers_Side ] ) , alliance ) ;
50852: LD_INT 22
50854: PUSH
50855: LD_EXP 183
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PPUSH
50864: CALL_OW 69
50868: PPUSH
50869: LD_EXP 182
50873: PPUSH
50874: CALL_OW 235
// KillMc ( Alliance_reg_id ) ;
50878: LD_EXP 247
50882: PPUSH
50883: CALL_OW 387
// KillMc ( Alliance_def_id ) ;
50887: LD_EXP 248
50891: PPUSH
50892: CALL_OW 387
// KillMc ( Alliance_wood_reg_id ) ;
50896: LD_EXP 249
50900: PPUSH
50901: CALL_OW 387
// Roth_Captured = true ;
50905: LD_ADDR_EXP 54
50909: PUSH
50910: LD_INT 1
50912: ST_TO_ADDR
// SetAttitude ( Alliance , Americans , att_friend , true ) ;
50913: LD_EXP 182
50917: PPUSH
50918: LD_EXP 176
50922: PPUSH
50923: LD_INT 1
50925: PPUSH
50926: LD_INT 1
50928: PPUSH
50929: CALL_OW 80
// All_Alliance_Units = FilterAllUnits ( [ f_side , Alliance ] ) ;
50933: LD_ADDR_VAR 0 2
50937: PUSH
50938: LD_INT 22
50940: PUSH
50941: LD_EXP 182
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PPUSH
50950: CALL_OW 69
50954: ST_TO_ADDR
// ComExitBuilding ( All_Alliance_Units ) ;
50955: LD_VAR 0 2
50959: PPUSH
50960: CALL_OW 122
// ComStop ( All_Alliance_Units ) ;
50964: LD_VAR 0 2
50968: PPUSH
50969: CALL_OW 141
// ComStop ( FilterUnitsInArea ( Al_Base , [ f_side , americans ] ) ) ;
50973: LD_INT 18
50975: PPUSH
50976: LD_INT 22
50978: PUSH
50979: LD_EXP 176
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PPUSH
50988: CALL_OW 70
50992: PPUSH
50993: CALL_OW 141
// Wait ( 0 0$1 ) ;
50997: LD_INT 35
50999: PPUSH
51000: CALL_OW 67
// CenterNowOnXY ( 233 , 181 ) ;
51004: LD_INT 233
51006: PPUSH
51007: LD_INT 181
51009: PPUSH
51010: CALL_OW 86
// DialogueON ;
51014: CALL_OW 6
// Say ( JMM , DAb-JMM-1 ) ;
51018: LD_EXP 1
51022: PPUSH
51023: LD_STRING DAb-JMM-1
51025: PPUSH
51026: CALL_OW 88
// if ( True_Americans ^ [ ] ) = 1 then
51030: LD_EXP 70
51034: PUSH
51035: EMPTY
51036: ADD
51037: PUSH
51038: LD_INT 1
51040: EQUAL
51041: IFFALSE 51057
// Say ( JMM , DAb-JMM-1a ) else
51043: LD_EXP 1
51047: PPUSH
51048: LD_STRING DAb-JMM-1a
51050: PPUSH
51051: CALL_OW 88
51055: GO 51079
// if True_Americans > 1 then
51057: LD_EXP 70
51061: PUSH
51062: LD_INT 1
51064: GREATER
51065: IFFALSE 51079
// Say ( JMM , DAb-JMM-1b ) ;
51067: LD_EXP 1
51071: PPUSH
51072: LD_STRING DAb-JMM-1b
51074: PPUSH
51075: CALL_OW 88
// DialogueOFF ;
51079: CALL_OW 7
// ChangeMissionObjectives ( M3a ) ;
51083: LD_STRING M3a
51085: PPUSH
51086: CALL_OW 337
// Captured_Units_of_Alliance = FilterAllUnits ( [ [ f_side , alliance ] , [ f_type , unit_human ] , [ f_alive ] ] ) ;
51090: LD_ADDR_EXP 99
51094: PUSH
51095: LD_INT 22
51097: PUSH
51098: LD_EXP 182
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 21
51109: PUSH
51110: LD_INT 1
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 51
51119: PUSH
51120: EMPTY
51121: LIST
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: LIST
51127: PPUSH
51128: CALL_OW 69
51132: ST_TO_ADDR
// ComMoveXY ( Captured_Units_of_Alliance , 226 , 197 ) ;
51133: LD_EXP 99
51137: PPUSH
51138: LD_INT 226
51140: PPUSH
51141: LD_INT 197
51143: PPUSH
51144: CALL_OW 111
// enable ( Alliance_Captured ) ;
51148: LD_EXP 152
51152: ENABLE_MARKED
// if IsOk ( AllDep ) then
51153: LD_INT 45
51155: PPUSH
51156: CALL_OW 302
51160: IFFALSE 51223
// begin for Un in True_Americans do
51162: LD_ADDR_VAR 0 3
51166: PUSH
51167: LD_EXP 70
51171: PUSH
51172: FOR_IN
51173: IFFALSE 51219
// begin SetSide ( Un , americans ) ;
51175: LD_VAR 0 3
51179: PPUSH
51180: LD_EXP 176
51184: PPUSH
51185: CALL_OW 235
// PlaceHumanInUnit ( Un , AllDep ) ;
51189: LD_VAR 0 3
51193: PPUSH
51194: LD_INT 45
51196: PPUSH
51197: CALL_OW 52
// ComExitBuilding ( Un ) ;
51201: LD_VAR 0 3
51205: PPUSH
51206: CALL_OW 122
// Wait ( 1 ) ;
51210: LD_INT 1
51212: PPUSH
51213: CALL_OW 67
// end ;
51217: GO 51172
51219: POP
51220: POP
// end else
51221: GO 51448
// if IsOk ( AllLabR2 ) then
51223: LD_INT 133
51225: PPUSH
51226: CALL_OW 302
51230: IFFALSE 51293
// begin for Un in True_Americans do
51232: LD_ADDR_VAR 0 3
51236: PUSH
51237: LD_EXP 70
51241: PUSH
51242: FOR_IN
51243: IFFALSE 51289
// begin SetSide ( Un , americans ) ;
51245: LD_VAR 0 3
51249: PPUSH
51250: LD_EXP 176
51254: PPUSH
51255: CALL_OW 235
// PlaceHumanInUnit ( Un , AllLabR2 ) ;
51259: LD_VAR 0 3
51263: PPUSH
51264: LD_INT 133
51266: PPUSH
51267: CALL_OW 52
// ComExitBuilding ( Un ) ;
51271: LD_VAR 0 3
51275: PPUSH
51276: CALL_OW 122
// Wait ( 1 ) ;
51280: LD_INT 1
51282: PPUSH
51283: CALL_OW 67
// end ;
51287: GO 51242
51289: POP
51290: POP
// end else
51291: GO 51448
// if IsOk ( AllLabR1 ) then
51293: LD_INT 39
51295: PPUSH
51296: CALL_OW 302
51300: IFFALSE 51363
// begin for Un in True_Americans do
51302: LD_ADDR_VAR 0 3
51306: PUSH
51307: LD_EXP 70
51311: PUSH
51312: FOR_IN
51313: IFFALSE 51359
// begin SetSide ( Un , americans ) ;
51315: LD_VAR 0 3
51319: PPUSH
51320: LD_EXP 176
51324: PPUSH
51325: CALL_OW 235
// PlaceHumanInUnit ( Un , AllLabR1 ) ;
51329: LD_VAR 0 3
51333: PPUSH
51334: LD_INT 39
51336: PPUSH
51337: CALL_OW 52
// ComExitBuilding ( Un ) ;
51341: LD_VAR 0 3
51345: PPUSH
51346: CALL_OW 122
// Wait ( 1 ) ;
51350: LD_INT 1
51352: PPUSH
51353: CALL_OW 67
// end ;
51357: GO 51312
51359: POP
51360: POP
// end else
51361: GO 51448
// begin for Un in True_Americans do
51363: LD_ADDR_VAR 0 3
51367: PUSH
51368: LD_EXP 70
51372: PUSH
51373: FOR_IN
51374: IFFALSE 51429
// begin SetSide ( Un , americans ) ;
51376: LD_VAR 0 3
51380: PPUSH
51381: LD_EXP 176
51385: PPUSH
51386: CALL_OW 235
// All_americans = All_americans ^ Un ;
51390: LD_ADDR_EXP 61
51394: PUSH
51395: LD_EXP 61
51399: PUSH
51400: LD_VAR 0 3
51404: ADD
51405: ST_TO_ADDR
// PlaceUnitXYR ( Un , 250 , 195 , 3 , false ) ;
51406: LD_VAR 0 3
51410: PPUSH
51411: LD_INT 250
51413: PPUSH
51414: LD_INT 195
51416: PPUSH
51417: LD_INT 3
51419: PPUSH
51420: LD_INT 0
51422: PPUSH
51423: CALL_OW 50
// end ;
51427: GO 51373
51429: POP
51430: POP
// All_americans = All_americans diff [ 0 ] ;
51431: LD_ADDR_EXP 61
51435: PUSH
51436: LD_EXP 61
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: EMPTY
51445: LIST
51446: DIFF
51447: ST_TO_ADDR
// end ; end ; end ; end ;
51448: LD_VAR 0 1
51452: RET
// function SelectExplorer ; var R , Un ; begin
51453: LD_INT 0
51455: PPUSH
51456: PPUSH
51457: PPUSH
// R = 0 ;
51458: LD_ADDR_VAR 0 2
51462: PUSH
51463: LD_INT 0
51465: ST_TO_ADDR
// for Un in Alliance_am_soldiers ^ Alliance_am_scientists do
51466: LD_ADDR_VAR 0 3
51470: PUSH
51471: LD_EXP 95
51475: PUSH
51476: LD_EXP 97
51480: ADD
51481: PUSH
51482: FOR_IN
51483: IFFALSE 51631
// if IsOk ( Un ) then
51485: LD_VAR 0 3
51489: PPUSH
51490: CALL_OW 302
51494: IFFALSE 51629
// begin if Un in Alliance_am_soldiers then
51496: LD_VAR 0 3
51500: PUSH
51501: LD_EXP 95
51505: IN
51506: IFFALSE 51526
// Alliance_am_soldiers = Alliance_am_soldiers diff Un else
51508: LD_ADDR_EXP 95
51512: PUSH
51513: LD_EXP 95
51517: PUSH
51518: LD_VAR 0 3
51522: DIFF
51523: ST_TO_ADDR
51524: GO 51542
// Alliance_am_scientists = Alliance_am_scientists diff Un ;
51526: LD_ADDR_EXP 97
51530: PUSH
51531: LD_EXP 97
51535: PUSH
51536: LD_VAR 0 3
51540: DIFF
51541: ST_TO_ADDR
// if GetClass ( Un ) <> class_soldier then
51542: LD_VAR 0 3
51546: PPUSH
51547: CALL_OW 257
51551: PUSH
51552: LD_INT 1
51554: NONEQUAL
51555: IFFALSE 51603
// begin ComEnterUnit ( Un , AllBarrA ) ;
51557: LD_VAR 0 3
51561: PPUSH
51562: LD_INT 41
51564: PPUSH
51565: CALL_OW 120
// AddComChangeProfession ( Un , class_soldier ) ;
51569: LD_VAR 0 3
51573: PPUSH
51574: LD_INT 1
51576: PPUSH
51577: CALL_OW 183
// AddComExitBuilding ( Un ) ;
51581: LD_VAR 0 3
51585: PPUSH
51586: CALL_OW 182
// WaitTask ( Un , 0.5 ) ;
51590: LD_VAR 0 3
51594: PPUSH
51595: LD_REAL  5.00000000000000E-0001
51598: PPUSH
51599: CALL 17823 0 2
// end ; SetSide ( Un , Explorers_Side ) ;
51603: LD_VAR 0 3
51607: PPUSH
51608: LD_EXP 183
51612: PPUSH
51613: CALL_OW 235
// R = Un ;
51617: LD_ADDR_VAR 0 2
51621: PUSH
51622: LD_VAR 0 3
51626: ST_TO_ADDR
// break ;
51627: GO 51631
// end ;
51629: GO 51482
51631: POP
51632: POP
// Result = R ;
51633: LD_ADDR_VAR 0 1
51637: PUSH
51638: LD_VAR 0 2
51642: ST_TO_ADDR
// end ;
51643: LD_VAR 0 1
51647: RET
// function SelectExplorers ; begin
51648: LD_INT 0
51650: PPUSH
// if not ( IsLive ( Explorer1 ) ) then
51651: LD_EXP 100
51655: PPUSH
51656: CALL_OW 300
51660: NOT
51661: IFFALSE 51673
// Explorer1 = SelectExplorer ;
51663: LD_ADDR_EXP 100
51667: PUSH
51668: CALL 51453 0 0
51672: ST_TO_ADDR
// if not ( IsLive ( Explorer2 ) ) then
51673: LD_EXP 101
51677: PPUSH
51678: CALL_OW 300
51682: NOT
51683: IFFALSE 51695
// Explorer2 = SelectExplorer ;
51685: LD_ADDR_EXP 101
51689: PUSH
51690: CALL 51453 0 0
51694: ST_TO_ADDR
// end ;
51695: LD_VAR 0 1
51699: RET
// function CaptureDialogue ( Captured_american ) ; var Join ; begin
51700: LD_INT 0
51702: PPUSH
51703: PPUSH
// Join = 0 ;
51704: LD_ADDR_VAR 0 3
51708: PUSH
51709: LD_INT 0
51711: ST_TO_ADDR
// DialogueON ;
51712: CALL_OW 6
// case Captured_american of JMM :
51716: LD_VAR 0 1
51720: PUSH
51721: LD_EXP 1
51725: DOUBLE
51726: EQUAL
51727: IFTRUE 51731
51729: GO 51746
51731: POP
// ForceSay ( JMM , DA1-JMM-1 ) ; Joan :
51732: LD_EXP 1
51736: PPUSH
51737: LD_STRING DA1-JMM-1
51739: PPUSH
51740: CALL_OW 91
51744: GO 52163
51746: LD_EXP 12
51750: DOUBLE
51751: EQUAL
51752: IFTRUE 51756
51754: GO 51771
51756: POP
// ForceSay ( Joan , DA1-Joan-1 ) ; Lisa :
51757: LD_EXP 12
51761: PPUSH
51762: LD_STRING DA1-Joan-1
51764: PPUSH
51765: CALL_OW 91
51769: GO 52163
51771: LD_EXP 5
51775: DOUBLE
51776: EQUAL
51777: IFTRUE 51781
51779: GO 51796
51781: POP
// ForceSay ( Lisa , DA1-Lisa-1 ) ; Donaldson :
51782: LD_EXP 5
51786: PPUSH
51787: LD_STRING DA1-Lisa-1
51789: PPUSH
51790: CALL_OW 91
51794: GO 52163
51796: LD_EXP 8
51800: DOUBLE
51801: EQUAL
51802: IFTRUE 51806
51804: GO 51821
51806: POP
// ForceSay ( Donaldson , DA1-Don-1 ) ; Cornell :
51807: LD_EXP 8
51811: PPUSH
51812: LD_STRING DA1-Don-1
51814: PPUSH
51815: CALL_OW 91
51819: GO 52163
51821: LD_EXP 10
51825: DOUBLE
51826: EQUAL
51827: IFTRUE 51831
51829: GO 51846
51831: POP
// ForceSay ( Cornell , DA1-Corn-1 ) ; Denis :
51832: LD_EXP 10
51836: PPUSH
51837: LD_STRING DA1-Corn-1
51839: PPUSH
51840: CALL_OW 91
51844: GO 52163
51846: LD_EXP 11
51850: DOUBLE
51851: EQUAL
51852: IFTRUE 51856
51854: GO 51871
51856: POP
// ForceSay ( Denis , DA1-Den-1 ) ; Bobby :
51857: LD_EXP 11
51861: PPUSH
51862: LD_STRING DA1-Den-1
51864: PPUSH
51865: CALL_OW 91
51869: GO 52163
51871: LD_EXP 3
51875: DOUBLE
51876: EQUAL
51877: IFTRUE 51881
51879: GO 51896
51881: POP
// ForceSay ( Bobby , DA1-Bobby-1 ) ; Gladstone :
51882: LD_EXP 3
51886: PPUSH
51887: LD_STRING DA1-Bobby-1
51889: PPUSH
51890: CALL_OW 91
51894: GO 52163
51896: LD_EXP 9
51900: DOUBLE
51901: EQUAL
51902: IFTRUE 51906
51904: GO 51921
51906: POP
// ForceSay ( Gladstone , DA1-Glad-1 ) ; Cyrus :
51907: LD_EXP 9
51911: PPUSH
51912: LD_STRING DA1-Glad-1
51914: PPUSH
51915: CALL_OW 91
51919: GO 52163
51921: LD_EXP 4
51925: DOUBLE
51926: EQUAL
51927: IFTRUE 51931
51929: GO 51946
51931: POP
// ForceSay ( Cyrus , DA1-Cyrus-1 ) ; Stevens :
51932: LD_EXP 4
51936: PPUSH
51937: LD_STRING DA1-Cyrus-1
51939: PPUSH
51940: CALL_OW 91
51944: GO 52163
51946: LD_EXP 17
51950: DOUBLE
51951: EQUAL
51952: IFTRUE 51956
51954: GO 51971
51956: POP
// ForceSay ( Stevens , DA1-Huck-1 ) ; Brown :
51957: LD_EXP 17
51961: PPUSH
51962: LD_STRING DA1-Huck-1
51964: PPUSH
51965: CALL_OW 91
51969: GO 52163
51971: LD_EXP 7
51975: DOUBLE
51976: EQUAL
51977: IFTRUE 51981
51979: GO 51996
51981: POP
// ForceSay ( Brown , DA1-Brown-1 ) ; Gary :
51982: LD_EXP 7
51986: PPUSH
51987: LD_STRING DA1-Brown-1
51989: PPUSH
51990: CALL_OW 91
51994: GO 52163
51996: LD_EXP 15
52000: DOUBLE
52001: EQUAL
52002: IFTRUE 52006
52004: GO 52021
52006: POP
// ForceSay ( Gary , DA1-Gary-1 ) ; Coonie :
52007: LD_EXP 15
52011: PPUSH
52012: LD_STRING DA1-Gary-1
52014: PPUSH
52015: CALL_OW 91
52019: GO 52163
52021: LD_EXP 18
52025: DOUBLE
52026: EQUAL
52027: IFTRUE 52031
52029: GO 52046
52031: POP
// ForceSay ( Coonie , DA1-Con-1 ) ; Kurt :
52032: LD_EXP 18
52036: PPUSH
52037: LD_STRING DA1-Con-1
52039: PPUSH
52040: CALL_OW 91
52044: GO 52163
52046: LD_EXP 13
52050: DOUBLE
52051: EQUAL
52052: IFTRUE 52056
52054: GO 52071
52056: POP
// ForceSay ( Kurt , DA1-Kurt-1 ) ; Yamoko :
52057: LD_EXP 13
52061: PPUSH
52062: LD_STRING DA1-Kurt-1
52064: PPUSH
52065: CALL_OW 91
52069: GO 52163
52071: LD_EXP 14
52075: DOUBLE
52076: EQUAL
52077: IFTRUE 52081
52079: GO 52096
52081: POP
// ForceSay ( Yamoko , DA1-Yam-1 ) ; Frank :
52082: LD_EXP 14
52086: PPUSH
52087: LD_STRING DA1-Yam-1
52089: PPUSH
52090: CALL_OW 91
52094: GO 52163
52096: LD_EXP 6
52100: DOUBLE
52101: EQUAL
52102: IFTRUE 52106
52104: GO 52121
52106: POP
// ForceSay ( Frank , DA1-Frank-1 ) ; else
52107: LD_EXP 6
52111: PPUSH
52112: LD_STRING DA1-Frank-1
52114: PPUSH
52115: CALL_OW 91
52119: GO 52163
52121: POP
// begin if GetSex ( Captured_american ) = sex_male then
52122: LD_VAR 0 1
52126: PPUSH
52127: CALL_OW 258
52131: PUSH
52132: LD_INT 1
52134: EQUAL
52135: IFFALSE 52151
// ForceSay ( Captured_american , DA1-Sol1-1 ) else
52137: LD_VAR 0 1
52141: PPUSH
52142: LD_STRING DA1-Sol1-1
52144: PPUSH
52145: CALL_OW 91
52149: GO 52163
// ForceSay ( Captured_american , DA1-FSol1-1 ) ;
52151: LD_VAR 0 1
52155: PPUSH
52156: LD_STRING DA1-FSol1-1
52158: PPUSH
52159: CALL_OW 91
// end ; end ; Say ( Roth , DA-Roth-1 ) ;
52163: LD_EXP 20
52167: PPUSH
52168: LD_STRING DA-Roth-1
52170: PPUSH
52171: CALL_OW 88
// if Number_of_captured_americans = 1 then
52175: LD_EXP 211
52179: PUSH
52180: LD_INT 1
52182: EQUAL
52183: IFFALSE 52211
// begin Say ( Simms , DA-Sim-1 ) ;
52185: LD_EXP 16
52189: PPUSH
52190: LD_STRING DA-Sim-1
52192: PPUSH
52193: CALL_OW 88
// Say ( Roth , DA-Roth-2 ) ;
52197: LD_EXP 20
52201: PPUSH
52202: LD_STRING DA-Roth-2
52204: PPUSH
52205: CALL_OW 88
// end else
52209: GO 52223
// Say ( Simms , DA-Sim-2 ) ;
52211: LD_EXP 16
52215: PPUSH
52216: LD_STRING DA-Sim-2
52218: PPUSH
52219: CALL_OW 88
// case Captured_american of JMM :
52223: LD_VAR 0 1
52227: PUSH
52228: LD_EXP 1
52232: DOUBLE
52233: EQUAL
52234: IFTRUE 52238
52236: GO 52253
52238: POP
// ForceSay ( JMM , DA1-JMM-1a ) ; Joan :
52239: LD_EXP 1
52243: PPUSH
52244: LD_STRING DA1-JMM-1a
52246: PPUSH
52247: CALL_OW 91
52251: GO 52735
52253: LD_EXP 12
52257: DOUBLE
52258: EQUAL
52259: IFTRUE 52263
52261: GO 52278
52263: POP
// ForceSay ( Joan , DA1-Joan-1a ) ; Lisa :
52264: LD_EXP 12
52268: PPUSH
52269: LD_STRING DA1-Joan-1a
52271: PPUSH
52272: CALL_OW 91
52276: GO 52735
52278: LD_EXP 5
52282: DOUBLE
52283: EQUAL
52284: IFTRUE 52288
52286: GO 52303
52288: POP
// ForceSay ( Lisa , DA1-Lisa-1a ) ; Donaldson :
52289: LD_EXP 5
52293: PPUSH
52294: LD_STRING DA1-Lisa-1a
52296: PPUSH
52297: CALL_OW 91
52301: GO 52735
52303: LD_EXP 8
52307: DOUBLE
52308: EQUAL
52309: IFTRUE 52313
52311: GO 52328
52313: POP
// ForceSay ( Donaldson , DA1-Don-1a ) ; Cornell :
52314: LD_EXP 8
52318: PPUSH
52319: LD_STRING DA1-Don-1a
52321: PPUSH
52322: CALL_OW 91
52326: GO 52735
52328: LD_EXP 10
52332: DOUBLE
52333: EQUAL
52334: IFTRUE 52338
52336: GO 52353
52338: POP
// ForceSay ( Cornell , DA1-Corn-1a ) ; Denis :
52339: LD_EXP 10
52343: PPUSH
52344: LD_STRING DA1-Corn-1a
52346: PPUSH
52347: CALL_OW 91
52351: GO 52735
52353: LD_EXP 11
52357: DOUBLE
52358: EQUAL
52359: IFTRUE 52363
52361: GO 52378
52363: POP
// ForceSay ( Denis , DA1-Den-1a ) ; Bobby :
52364: LD_EXP 11
52368: PPUSH
52369: LD_STRING DA1-Den-1a
52371: PPUSH
52372: CALL_OW 91
52376: GO 52735
52378: LD_EXP 3
52382: DOUBLE
52383: EQUAL
52384: IFTRUE 52388
52386: GO 52403
52388: POP
// ForceSay ( Bobby , DA1-Bobby-1a ) ; Gladstone :
52389: LD_EXP 3
52393: PPUSH
52394: LD_STRING DA1-Bobby-1a
52396: PPUSH
52397: CALL_OW 91
52401: GO 52735
52403: LD_EXP 9
52407: DOUBLE
52408: EQUAL
52409: IFTRUE 52413
52411: GO 52428
52413: POP
// ForceSay ( Gladstone , DA1-Glad-1a ) ; Cyrus :
52414: LD_EXP 9
52418: PPUSH
52419: LD_STRING DA1-Glad-1a
52421: PPUSH
52422: CALL_OW 91
52426: GO 52735
52428: LD_EXP 4
52432: DOUBLE
52433: EQUAL
52434: IFTRUE 52438
52436: GO 52453
52438: POP
// ForceSay ( Cyrus , DA1-Cyrus-1a ) ; Stevens :
52439: LD_EXP 4
52443: PPUSH
52444: LD_STRING DA1-Cyrus-1a
52446: PPUSH
52447: CALL_OW 91
52451: GO 52735
52453: LD_EXP 17
52457: DOUBLE
52458: EQUAL
52459: IFTRUE 52463
52461: GO 52478
52463: POP
// ForceSay ( Stevens , DA1-Huck-1a ) ; Brown :
52464: LD_EXP 17
52468: PPUSH
52469: LD_STRING DA1-Huck-1a
52471: PPUSH
52472: CALL_OW 91
52476: GO 52735
52478: LD_EXP 7
52482: DOUBLE
52483: EQUAL
52484: IFTRUE 52488
52486: GO 52503
52488: POP
// ForceSay ( Brown , DA1-Brown-1a ) ; Gary :
52489: LD_EXP 7
52493: PPUSH
52494: LD_STRING DA1-Brown-1a
52496: PPUSH
52497: CALL_OW 91
52501: GO 52735
52503: LD_EXP 15
52507: DOUBLE
52508: EQUAL
52509: IFTRUE 52513
52511: GO 52528
52513: POP
// ForceSay ( Gary , DA1-Gary-1a ) ; Coonie :
52514: LD_EXP 15
52518: PPUSH
52519: LD_STRING DA1-Gary-1a
52521: PPUSH
52522: CALL_OW 91
52526: GO 52735
52528: LD_EXP 18
52532: DOUBLE
52533: EQUAL
52534: IFTRUE 52538
52536: GO 52553
52538: POP
// ForceSay ( Coonie , DA1-Con-1a ) ; Kurt :
52539: LD_EXP 18
52543: PPUSH
52544: LD_STRING DA1-Con-1a
52546: PPUSH
52547: CALL_OW 91
52551: GO 52735
52553: LD_EXP 13
52557: DOUBLE
52558: EQUAL
52559: IFTRUE 52563
52561: GO 52578
52563: POP
// ForceSay ( Kurt , DA1-Kurt-1a ) ; Yamoko :
52564: LD_EXP 13
52568: PPUSH
52569: LD_STRING DA1-Kurt-1a
52571: PPUSH
52572: CALL_OW 91
52576: GO 52735
52578: LD_EXP 14
52582: DOUBLE
52583: EQUAL
52584: IFTRUE 52588
52586: GO 52603
52588: POP
// ForceSay ( Yamoko , DA1-Yam-1a ) ; Frank :
52589: LD_EXP 14
52593: PPUSH
52594: LD_STRING DA1-Yam-1a
52596: PPUSH
52597: CALL_OW 91
52601: GO 52735
52603: LD_EXP 6
52607: DOUBLE
52608: EQUAL
52609: IFTRUE 52613
52611: GO 52628
52613: POP
// ForceSay ( Frank , DA1-Frank-1a ) ; else
52614: LD_EXP 6
52618: PPUSH
52619: LD_STRING DA1-Frank-1a
52621: PPUSH
52622: CALL_OW 91
52626: GO 52735
52628: POP
// begin Join = Rand ( 0 , 1 ) ;
52629: LD_ADDR_VAR 0 3
52633: PUSH
52634: LD_INT 0
52636: PPUSH
52637: LD_INT 1
52639: PPUSH
52640: CALL_OW 12
52644: ST_TO_ADDR
// if Join then
52645: LD_VAR 0 3
52649: IFFALSE 52694
// begin if GetSex ( Captured_american ) = sex_male then
52651: LD_VAR 0 1
52655: PPUSH
52656: CALL_OW 258
52660: PUSH
52661: LD_INT 1
52663: EQUAL
52664: IFFALSE 52680
// ForceSay ( Captured_american , DA1-Sol1-1b ) else
52666: LD_VAR 0 1
52670: PPUSH
52671: LD_STRING DA1-Sol1-1b
52673: PPUSH
52674: CALL_OW 91
52678: GO 52692
// ForceSay ( Captured_american , DA1-FSol1-1b ) ;
52680: LD_VAR 0 1
52684: PPUSH
52685: LD_STRING DA1-FSol1-1b
52687: PPUSH
52688: CALL_OW 91
// end else
52692: GO 52735
// begin if GetSex ( Captured_american ) = sex_male then
52694: LD_VAR 0 1
52698: PPUSH
52699: CALL_OW 258
52703: PUSH
52704: LD_INT 1
52706: EQUAL
52707: IFFALSE 52723
// ForceSay ( Captured_american , DA1-Sol1-1a ) else
52709: LD_VAR 0 1
52713: PPUSH
52714: LD_STRING DA1-Sol1-1a
52716: PPUSH
52717: CALL_OW 91
52721: GO 52735
// ForceSay ( Captured_american , DA1-FSol1-1a ) ;
52723: LD_VAR 0 1
52727: PPUSH
52728: LD_STRING DA1-FSol1-1a
52730: PPUSH
52731: CALL_OW 91
// end ; end ; end ; if ( Captured_american in [ Donaldson , Denis , Bobby , Stevens , Brown , Yamoko ] ) or Join then
52735: LD_VAR 0 1
52739: PUSH
52740: LD_EXP 8
52744: PUSH
52745: LD_EXP 11
52749: PUSH
52750: LD_EXP 3
52754: PUSH
52755: LD_EXP 17
52759: PUSH
52760: LD_EXP 7
52764: PUSH
52765: LD_EXP 14
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: IN
52778: PUSH
52779: LD_VAR 0 3
52783: OR
52784: IFFALSE 52846
// begin Say ( Roth , DA-Roth-3 ) ;
52786: LD_EXP 20
52790: PPUSH
52791: LD_STRING DA-Roth-3
52793: PPUSH
52794: CALL_OW 88
// SetSide ( Captured_american , alliance ) ;
52798: LD_VAR 0 1
52802: PPUSH
52803: LD_EXP 182
52807: PPUSH
52808: CALL_OW 235
// Alliance_am_soldiers = Alliance_am_soldiers ^ Captured_american ;
52812: LD_ADDR_EXP 95
52816: PUSH
52817: LD_EXP 95
52821: PUSH
52822: LD_VAR 0 1
52826: ADD
52827: ST_TO_ADDR
// All_americans = All_americans diff Captured_american ;
52828: LD_ADDR_EXP 61
52832: PUSH
52833: LD_EXP 61
52837: PUSH
52838: LD_VAR 0 1
52842: DIFF
52843: ST_TO_ADDR
// end else
52844: GO 52883
// begin Say ( Roth , DA-Roth-3a ) ;
52846: LD_EXP 20
52850: PPUSH
52851: LD_STRING DA-Roth-3a
52853: PPUSH
52854: CALL_OW 88
// RemoveUnit ( Captured_american ) ;
52858: LD_VAR 0 1
52862: PPUSH
52863: CALL_OW 64
// True_americans = True_americans ^ Captured_american ;
52867: LD_ADDR_EXP 70
52871: PUSH
52872: LD_EXP 70
52876: PUSH
52877: LD_VAR 0 1
52881: ADD
52882: ST_TO_ADDR
// end ; SetLives ( Captured_american , 1000 ) ;
52883: LD_VAR 0 1
52887: PPUSH
52888: LD_INT 1000
52890: PPUSH
52891: CALL_OW 234
// if ( Captured_american = JMM ) then
52895: LD_VAR 0 1
52899: PUSH
52900: LD_EXP 1
52904: EQUAL
52905: IFFALSE 52912
// enable ( JMM_Captured ) ;
52907: LD_EXP 160
52911: ENABLE_MARKED
// DialogueOFF ;
52912: CALL_OW 7
// end ;
52916: LD_VAR 0 2
52920: RET
// function HealExplorers ; begin
52921: LD_INT 0
52923: PPUSH
// if ( IsLive ( Explorer1 ) and not ( See ( americans , Explorer1 ) ) ) then
52924: LD_EXP 100
52928: PPUSH
52929: CALL_OW 300
52933: PUSH
52934: LD_EXP 176
52938: PPUSH
52939: LD_EXP 100
52943: PPUSH
52944: CALL_OW 292
52948: NOT
52949: AND
52950: IFFALSE 52964
// SetLives ( Explorer1 , 1000 ) ;
52952: LD_EXP 100
52956: PPUSH
52957: LD_INT 1000
52959: PPUSH
52960: CALL_OW 234
// if ( IsLive ( Explorer2 ) and not ( See ( americans , Explorer2 ) ) ) then
52964: LD_EXP 101
52968: PPUSH
52969: CALL_OW 300
52973: PUSH
52974: LD_EXP 176
52978: PPUSH
52979: LD_EXP 101
52983: PPUSH
52984: CALL_OW 292
52988: NOT
52989: AND
52990: IFFALSE 53004
// SetLives ( Explorer2 , 1000 ) ;
52992: LD_EXP 101
52996: PPUSH
52997: LD_INT 1000
52999: PPUSH
53000: CALL_OW 234
// end ;
53004: LD_VAR 0 1
53008: RET
// function SohwCaptureToPlayer ( Captured_american , Explorer1 , Explorer2 ) ; var AmToAr , ArToAm , Un , Units_to_stop ; begin
53009: LD_INT 0
53011: PPUSH
53012: PPUSH
53013: PPUSH
53014: PPUSH
53015: PPUSH
// AmToAr = GetAttitude ( americans , arabians ) ;
53016: LD_ADDR_VAR 0 5
53020: PUSH
53021: LD_EXP 176
53025: PPUSH
53026: LD_EXP 180
53030: PPUSH
53031: CALL_OW 81
53035: ST_TO_ADDR
// ArToAm = GetAttitude ( arabians , americans ) ;
53036: LD_ADDR_VAR 0 6
53040: PUSH
53041: LD_EXP 180
53045: PPUSH
53046: LD_EXP 176
53050: PPUSH
53051: CALL_OW 81
53055: ST_TO_ADDR
// SetAttitude ( americans , russians , att_friend , true ) ;
53056: LD_EXP 176
53060: PPUSH
53061: LD_EXP 178
53065: PPUSH
53066: LD_INT 1
53068: PPUSH
53069: LD_INT 1
53071: PPUSH
53072: CALL_OW 80
// SetAttitude ( americans , russians1 , att_friend , true ) ;
53076: LD_EXP 176
53080: PPUSH
53081: LD_EXP 179
53085: PPUSH
53086: LD_INT 1
53088: PPUSH
53089: LD_INT 1
53091: PPUSH
53092: CALL_OW 80
// SetAttitude ( americans , arabians , att_friend , true ) ;
53096: LD_EXP 176
53100: PPUSH
53101: LD_EXP 180
53105: PPUSH
53106: LD_INT 1
53108: PPUSH
53109: LD_INT 1
53111: PPUSH
53112: CALL_OW 80
// Units_to_stop = FilterAllUnits ( [ [ f_or , [ f_side , russians ] , [ f_side , russians1 ] , [ f_side , arabians ] , [ f_side , americans ] ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
53116: LD_ADDR_VAR 0 8
53120: PUSH
53121: LD_INT 2
53123: PUSH
53124: LD_INT 22
53126: PUSH
53127: LD_EXP 178
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 22
53138: PUSH
53139: LD_EXP 179
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 22
53150: PUSH
53151: LD_EXP 180
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 22
53162: PUSH
53163: LD_EXP 176
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 2
53181: PUSH
53182: LD_INT 21
53184: PUSH
53185: LD_INT 1
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 21
53194: PUSH
53195: LD_INT 2
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: LIST
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PPUSH
53211: CALL_OW 69
53215: ST_TO_ADDR
// for Un in Units_to_stop do
53216: LD_ADDR_VAR 0 7
53220: PUSH
53221: LD_VAR 0 8
53225: PUSH
53226: FOR_IN
53227: IFFALSE 53255
// begin if Attacks ( Un ) <> 0 then
53229: LD_VAR 0 7
53233: PPUSH
53234: CALL_OW 320
53238: PUSH
53239: LD_INT 0
53241: NONEQUAL
53242: IFFALSE 53253
// ComStop ( Un ) ;
53244: LD_VAR 0 7
53248: PPUSH
53249: CALL_OW 141
// end ;
53253: GO 53226
53255: POP
53256: POP
// while IsInUnit ( Captured_american ) <> 0 do
53257: LD_VAR 0 1
53261: PPUSH
53262: CALL_OW 310
53266: PUSH
53267: LD_INT 0
53269: NONEQUAL
53270: IFFALSE 53295
// begin ComExitVehicle ( IsInUnit ( Captured_american ) ) ;
53272: LD_VAR 0 1
53276: PPUSH
53277: CALL_OW 310
53281: PPUSH
53282: CALL_OW 121
// Wait ( 1 ) ;
53286: LD_INT 1
53288: PPUSH
53289: CALL_OW 67
// end ;
53293: GO 53257
// SetSide ( Captured_american , americans1 ) ;
53295: LD_VAR 0 1
53299: PPUSH
53300: LD_EXP 177
53304: PPUSH
53305: CALL_OW 235
// ComStop ( Captured_american ) ;
53309: LD_VAR 0 1
53313: PPUSH
53314: CALL_OW 141
// DoNotAttack ( alliance , Captured_american ) ;
53318: LD_EXP 182
53322: PPUSH
53323: LD_VAR 0 1
53327: PPUSH
53328: CALL_OW 471
// DoNotAttack ( Explorers_side , Captured_american ) ;
53332: LD_EXP 183
53336: PPUSH
53337: LD_VAR 0 1
53341: PPUSH
53342: CALL_OW 471
// if ( Explorer1 <> 0 ) and ( Explorer2 <> 0 ) then
53346: LD_VAR 0 2
53350: PUSH
53351: LD_INT 0
53353: NONEQUAL
53354: PUSH
53355: LD_VAR 0 3
53359: PUSH
53360: LD_INT 0
53362: NONEQUAL
53363: AND
53364: IFFALSE 53392
// CenterNowOnUnits ( [ Explorer1 , Explorer2 , Captured_american ] ) else
53366: LD_VAR 0 2
53370: PUSH
53371: LD_VAR 0 3
53375: PUSH
53376: LD_VAR 0 1
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: LIST
53385: PPUSH
53386: CALL_OW 87
53390: GO 53401
// CenterNowOnUnits ( Captured_american ) ;
53392: LD_VAR 0 1
53396: PPUSH
53397: CALL_OW 87
// ingame_video = true ;
53401: LD_ADDR_OWVAR 52
53405: PUSH
53406: LD_INT 1
53408: ST_TO_ADDR
// if Explorer1 <> 0 then
53409: LD_VAR 0 2
53413: PUSH
53414: LD_INT 0
53416: NONEQUAL
53417: IFFALSE 53440
// TeleportUnit ( Explorer1 , 245 , 186 , 3 , true ) ;
53419: LD_VAR 0 2
53423: PPUSH
53424: LD_INT 245
53426: PPUSH
53427: LD_INT 186
53429: PPUSH
53430: LD_INT 3
53432: PPUSH
53433: LD_INT 1
53435: PPUSH
53436: CALL_OW 483
// if Explorer2 <> 0 then
53440: LD_VAR 0 3
53444: PUSH
53445: LD_INT 0
53447: NONEQUAL
53448: IFFALSE 53471
// TeleportUnit ( Explorer2 , 245 , 186 , 3 , true ) ;
53450: LD_VAR 0 3
53454: PPUSH
53455: LD_INT 245
53457: PPUSH
53458: LD_INT 186
53460: PPUSH
53461: LD_INT 3
53463: PPUSH
53464: LD_INT 1
53466: PPUSH
53467: CALL_OW 483
// TeleportUnit ( Captured_american , 245 , 186 , 3 , true ) ;
53471: LD_VAR 0 1
53475: PPUSH
53476: LD_INT 245
53478: PPUSH
53479: LD_INT 186
53481: PPUSH
53482: LD_INT 3
53484: PPUSH
53485: LD_INT 1
53487: PPUSH
53488: CALL_OW 483
// Wait ( 0 0$3 ) ;
53492: LD_INT 105
53494: PPUSH
53495: CALL_OW 67
// CenterNowOnUnits ( Captured_american ) ;
53499: LD_VAR 0 1
53503: PPUSH
53504: CALL_OW 87
// Wait ( 0 0$1 ) ;
53508: LD_INT 35
53510: PPUSH
53511: CALL_OW 67
// ingame_video = false ;
53515: LD_ADDR_OWVAR 52
53519: PUSH
53520: LD_INT 0
53522: ST_TO_ADDR
// CaptureDialogue ( Captured_american ) ;
53523: LD_VAR 0 1
53527: PPUSH
53528: CALL 51700 0 1
// HealExplorers ;
53532: CALL 52921 0 0
// SetAttitude ( americans , russians , att_enemy , true ) ;
53536: LD_EXP 176
53540: PPUSH
53541: LD_EXP 178
53545: PPUSH
53546: LD_INT 2
53548: PPUSH
53549: LD_INT 1
53551: PPUSH
53552: CALL_OW 80
// SetAttitude ( americans , russians1 , att_enemy , true ) ;
53556: LD_EXP 176
53560: PPUSH
53561: LD_EXP 179
53565: PPUSH
53566: LD_INT 2
53568: PPUSH
53569: LD_INT 1
53571: PPUSH
53572: CALL_OW 80
// SetAttitude ( americans , arabians , AmToAr , false ) ;
53576: LD_EXP 176
53580: PPUSH
53581: LD_EXP 180
53585: PPUSH
53586: LD_VAR 0 5
53590: PPUSH
53591: LD_INT 0
53593: PPUSH
53594: CALL_OW 80
// SetAttitude ( arabians , americans , ArToAm , false ) ;
53598: LD_EXP 180
53602: PPUSH
53603: LD_EXP 176
53607: PPUSH
53608: LD_VAR 0 6
53612: PPUSH
53613: LD_INT 0
53615: PPUSH
53616: CALL_OW 80
// NormalAttack ( alliance , Captured_american ) ;
53620: LD_EXP 182
53624: PPUSH
53625: LD_VAR 0 1
53629: PPUSH
53630: CALL_OW 472
// NormalAttack ( Explorers_side , Captured_american ) ;
53634: LD_EXP 183
53638: PPUSH
53639: LD_VAR 0 1
53643: PPUSH
53644: CALL_OW 472
// if Captured_american <> JMM then
53648: LD_VAR 0 1
53652: PUSH
53653: LD_EXP 1
53657: NONEQUAL
53658: IFFALSE 53723
// begin DialogueOn ;
53660: CALL_OW 6
// Wait ( 0 0$2 ) ;
53664: LD_INT 70
53666: PPUSH
53667: CALL_OW 67
// Say ( JMM , DAa-JMM-1 ) ;
53671: LD_EXP 1
53675: PPUSH
53676: LD_STRING DAa-JMM-1
53678: PPUSH
53679: CALL_OW 88
// if tick > Alliance_broadcast then
53683: LD_OWVAR 1
53687: PUSH
53688: LD_EXP 202
53692: GREATER
53693: IFFALSE 53707
// Say ( JMM , DAa-JMM-1a ) ;
53695: LD_EXP 1
53699: PPUSH
53700: LD_STRING DAa-JMM-1a
53702: PPUSH
53703: CALL_OW 88
// Say ( JMM , DAa-JMM-1b ) ;
53707: LD_EXP 1
53711: PPUSH
53712: LD_STRING DAa-JMM-1b
53714: PPUSH
53715: CALL_OW 88
// DialogueOff ;
53719: CALL_OW 7
// end ; end ;
53723: LD_VAR 0 4
53727: RET
// function CapturewWithoutShow ( Captured_american , Explorer1 , Explorer2 ) ; begin
53728: LD_INT 0
53730: PPUSH
// while IsInUnit ( Captured_american ) <> 0 do
53731: LD_VAR 0 1
53735: PPUSH
53736: CALL_OW 310
53740: PUSH
53741: LD_INT 0
53743: NONEQUAL
53744: IFFALSE 53769
// begin ComExitVehicle ( IsInUnit ( Captured_american ) ) ;
53746: LD_VAR 0 1
53750: PPUSH
53751: CALL_OW 310
53755: PPUSH
53756: CALL_OW 121
// Wait ( 1 ) ;
53760: LD_INT 1
53762: PPUSH
53763: CALL_OW 67
// end ;
53767: GO 53731
// SetSide ( Captured_american , americans1 ) ;
53769: LD_VAR 0 1
53773: PPUSH
53774: LD_EXP 177
53778: PPUSH
53779: CALL_OW 235
// ComStop ( Captured_american ) ;
53783: LD_VAR 0 1
53787: PPUSH
53788: CALL_OW 141
// DoNotAttack ( alliance , Captured_american ) ;
53792: LD_EXP 182
53796: PPUSH
53797: LD_VAR 0 1
53801: PPUSH
53802: CALL_OW 471
// DoNotAttack ( Explorers_side , Captured_american ) ;
53806: LD_EXP 183
53810: PPUSH
53811: LD_VAR 0 1
53815: PPUSH
53816: CALL_OW 471
// if Explorer1 <> 0 then
53820: LD_VAR 0 2
53824: PUSH
53825: LD_INT 0
53827: NONEQUAL
53828: IFFALSE 53851
// TeleportUnit ( Explorer1 , 245 , 186 , 3 , true ) ;
53830: LD_VAR 0 2
53834: PPUSH
53835: LD_INT 245
53837: PPUSH
53838: LD_INT 186
53840: PPUSH
53841: LD_INT 3
53843: PPUSH
53844: LD_INT 1
53846: PPUSH
53847: CALL_OW 483
// if Explorer2 <> 0 then
53851: LD_VAR 0 3
53855: PUSH
53856: LD_INT 0
53858: NONEQUAL
53859: IFFALSE 53882
// TeleportUnit ( Explorer2 , 245 , 186 , 3 , true ) ;
53861: LD_VAR 0 3
53865: PPUSH
53866: LD_INT 245
53868: PPUSH
53869: LD_INT 186
53871: PPUSH
53872: LD_INT 3
53874: PPUSH
53875: LD_INT 1
53877: PPUSH
53878: CALL_OW 483
// TeleportUnit ( Captured_american , 245 , 186 , 3 , true ) ;
53882: LD_VAR 0 1
53886: PPUSH
53887: LD_INT 245
53889: PPUSH
53890: LD_INT 186
53892: PPUSH
53893: LD_INT 3
53895: PPUSH
53896: LD_INT 1
53898: PPUSH
53899: CALL_OW 483
// Wait ( 0 0$3 ) ;
53903: LD_INT 105
53905: PPUSH
53906: CALL_OW 67
// CaptureDialogue ( Captured_american ) ;
53910: LD_VAR 0 1
53914: PPUSH
53915: CALL 51700 0 1
// NormalAttack ( alliance , Captured_american ) ;
53919: LD_EXP 182
53923: PPUSH
53924: LD_VAR 0 1
53928: PPUSH
53929: CALL_OW 472
// NormalAttack ( Explorers_side , Captured_american ) ;
53933: LD_EXP 183
53937: PPUSH
53938: LD_VAR 0 1
53942: PPUSH
53943: CALL_OW 472
// HealExplorers ;
53947: CALL 52921 0 0
// end ;
53951: LD_VAR 0 4
53955: RET
// function SetExplorerWayNumber ; var WayNumber ; begin
53956: LD_INT 0
53958: PPUSH
53959: PPUSH
// if GetAttitude ( russians , Explorers_Side ) = att_enemy then
53960: LD_EXP 178
53964: PPUSH
53965: LD_EXP 183
53969: PPUSH
53970: CALL_OW 81
53974: PUSH
53975: LD_INT 2
53977: EQUAL
53978: IFFALSE 54016
// begin Explorer_Way_Number = Rand ( 1 , 4 ) ;
53980: LD_ADDR_EXP 210
53984: PUSH
53985: LD_INT 1
53987: PPUSH
53988: LD_INT 4
53990: PPUSH
53991: CALL_OW 12
53995: ST_TO_ADDR
// if Explorer_Way_Number > 1 then
53996: LD_EXP 210
54000: PUSH
54001: LD_INT 1
54003: GREATER
54004: IFFALSE 54014
// Explorer_Way_Number = 2 ;
54006: LD_ADDR_EXP 210
54010: PUSH
54011: LD_INT 2
54013: ST_TO_ADDR
// end else
54014: GO 54032
// Explorer_Way_Number = Rand ( 1 , 2 ) ;
54016: LD_ADDR_EXP 210
54020: PUSH
54021: LD_INT 1
54023: PPUSH
54024: LD_INT 2
54026: PPUSH
54027: CALL_OW 12
54031: ST_TO_ADDR
// end ;
54032: LD_VAR 0 1
54036: RET
// every 0 0$0.5 marked 17 do var Americans_to_capture , Captured_american , AmToAr , ArToAm , Units_to_stop , Un , Uns ;
54037: GO 54039
54039: DISABLE
54040: LD_INT 0
54042: PPUSH
54043: PPUSH
54044: PPUSH
54045: PPUSH
54046: PPUSH
54047: PPUSH
54048: PPUSH
// begin if not ( Wood_registry ) then
54049: LD_EXP 229
54053: NOT
54054: IFFALSE 55050
// begin Wood_registry = true ;
54056: LD_ADDR_EXP 229
54060: PUSH
54061: LD_INT 1
54063: ST_TO_ADDR
// Americans_to_capture = [ ] ;
54064: LD_ADDR_VAR 0 1
54068: PUSH
54069: EMPTY
54070: ST_TO_ADDR
// Captured_american = 0 ;
54071: LD_ADDR_VAR 0 2
54075: PUSH
54076: LD_INT 0
54078: ST_TO_ADDR
// if IsOk ( AllDep ) then
54079: LD_INT 45
54081: PPUSH
54082: CALL_OW 302
54086: IFFALSE 55039
// begin disable ;
54088: DISABLE
// if IsLive ( Explorer1 ) and IsLive ( Explorer2 ) then
54089: LD_EXP 100
54093: PPUSH
54094: CALL_OW 300
54098: PUSH
54099: LD_EXP 101
54103: PPUSH
54104: CALL_OW 300
54108: AND
54109: IFFALSE 54922
// begin if ( ( GetLives ( Explorer1 ) < 700 ) or ( GetLives ( Explorer2 ) < 700 ) ) then
54111: LD_EXP 100
54115: PPUSH
54116: CALL_OW 256
54120: PUSH
54121: LD_INT 700
54123: LESS
54124: PUSH
54125: LD_EXP 101
54129: PPUSH
54130: CALL_OW 256
54134: PUSH
54135: LD_INT 700
54137: LESS
54138: OR
54139: IFFALSE 54290
// begin if not ( IsInArea ( Explorer1 , Al_Base ) ) then
54141: LD_EXP 100
54145: PPUSH
54146: LD_INT 18
54148: PPUSH
54149: CALL_OW 308
54153: NOT
54154: IFFALSE 54177
// TeleportUnit ( Explorer1 , 245 , 186 , 3 , true ) ;
54156: LD_EXP 100
54160: PPUSH
54161: LD_INT 245
54163: PPUSH
54164: LD_INT 186
54166: PPUSH
54167: LD_INT 3
54169: PPUSH
54170: LD_INT 1
54172: PPUSH
54173: CALL_OW 483
// if not ( IsInArea ( Explorer2 , Al_Base ) ) then
54177: LD_EXP 101
54181: PPUSH
54182: LD_INT 18
54184: PPUSH
54185: CALL_OW 308
54189: NOT
54190: IFFALSE 54213
// TeleportUnit ( Explorer2 , 245 , 186 , 3 , true ) ;
54192: LD_EXP 101
54196: PPUSH
54197: LD_INT 245
54199: PPUSH
54200: LD_INT 186
54202: PPUSH
54203: LD_INT 3
54205: PPUSH
54206: LD_INT 1
54208: PPUSH
54209: CALL_OW 483
// HealExplorers ;
54213: CALL 52921 0 0
// Step_On_The_Way = 1 ;
54217: LD_ADDR_EXP 209
54221: PUSH
54222: LD_INT 1
54224: ST_TO_ADDR
// SetExplorerWayNumber ;
54225: CALL 53956 0 0
// Wait ( 0 0$3 ) ;
54229: LD_INT 105
54231: PPUSH
54232: CALL_OW 67
// for Un in All_americans do
54236: LD_ADDR_VAR 0 6
54240: PUSH
54241: LD_EXP 61
54245: PUSH
54246: FOR_IN
54247: IFFALSE 54286
// if ( Attacks ( Un ) in [ Explorer1 , Explorer2 ] ) then
54249: LD_VAR 0 6
54253: PPUSH
54254: CALL_OW 320
54258: PUSH
54259: LD_EXP 100
54263: PUSH
54264: LD_EXP 101
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: IN
54273: IFFALSE 54284
// ComStop ( Un ) ;
54275: LD_VAR 0 6
54279: PPUSH
54280: CALL_OW 141
54284: GO 54246
54286: POP
54287: POP
// end else
54288: GO 54920
// begin Uns = UnitFilter ( All_americans , [ f_or , [ f_dist , Explorer1 , 15 ] , [ f_dist , Explorer2 , 15 ] ] ) ;
54290: LD_ADDR_VAR 0 7
54294: PUSH
54295: LD_EXP 61
54299: PPUSH
54300: LD_INT 2
54302: PUSH
54303: LD_INT 91
54305: PUSH
54306: LD_EXP 100
54310: PUSH
54311: LD_INT 15
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 91
54321: PUSH
54322: LD_EXP 101
54326: PUSH
54327: LD_INT 15
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: LIST
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: LIST
54339: PPUSH
54340: CALL_OW 72
54344: ST_TO_ADDR
// for Un in Uns do
54345: LD_ADDR_VAR 0 6
54349: PUSH
54350: LD_VAR 0 7
54354: PUSH
54355: FOR_IN
54356: IFFALSE 54376
// Americans_to_capture = Americans_to_capture ^ Un ;
54358: LD_ADDR_VAR 0 1
54362: PUSH
54363: LD_VAR 0 1
54367: PUSH
54368: LD_VAR 0 6
54372: ADD
54373: ST_TO_ADDR
54374: GO 54355
54376: POP
54377: POP
// if Americans_to_capture > 0 then
54378: LD_VAR 0 1
54382: PUSH
54383: LD_INT 0
54385: GREATER
54386: IFFALSE 54649
// begin if ( Americans_to_capture [ 1 ] <> JMM ) or ( Americans_to_capture ^ [ ] = 1 ) then
54388: LD_VAR 0 1
54392: PUSH
54393: LD_INT 1
54395: ARRAY
54396: PUSH
54397: LD_EXP 1
54401: NONEQUAL
54402: PUSH
54403: LD_VAR 0 1
54407: PUSH
54408: EMPTY
54409: ADD
54410: PUSH
54411: LD_INT 1
54413: EQUAL
54414: OR
54415: IFFALSE 54433
// Captured_american = Americans_to_capture [ 1 ] else
54417: LD_ADDR_VAR 0 2
54421: PUSH
54422: LD_VAR 0 1
54426: PUSH
54427: LD_INT 1
54429: ARRAY
54430: ST_TO_ADDR
54431: GO 54460
// if ( Americans_to_capture ^ [ ] ) > 1 then
54433: LD_VAR 0 1
54437: PUSH
54438: EMPTY
54439: ADD
54440: PUSH
54441: LD_INT 1
54443: GREATER
54444: IFFALSE 54460
// Captured_american = Americans_to_capture [ 2 ] ;
54446: LD_ADDR_VAR 0 2
54450: PUSH
54451: LD_VAR 0 1
54455: PUSH
54456: LD_INT 2
54458: ARRAY
54459: ST_TO_ADDR
// if ( Captured_american <> JMM ) or ( Number_of_captured_americans <> 0 ) then
54460: LD_VAR 0 2
54464: PUSH
54465: LD_EXP 1
54469: NONEQUAL
54470: PUSH
54471: LD_EXP 211
54475: PUSH
54476: LD_INT 0
54478: NONEQUAL
54479: OR
54480: IFFALSE 54639
// begin Number_of_captured_americans = Number_of_captured_americans + 1 ;
54482: LD_ADDR_EXP 211
54486: PUSH
54487: LD_EXP 211
54491: PUSH
54492: LD_INT 1
54494: PLUS
54495: ST_TO_ADDR
// if ( Number_of_captured_americans = 1 ) or ( Captured_american = JMM ) then
54496: LD_EXP 211
54500: PUSH
54501: LD_INT 1
54503: EQUAL
54504: PUSH
54505: LD_VAR 0 2
54509: PUSH
54510: LD_EXP 1
54514: EQUAL
54515: OR
54516: IFFALSE 54539
// begin SohwCaptureToPlayer ( Captured_american , Explorer1 , Explorer2 ) ;
54518: LD_VAR 0 2
54522: PPUSH
54523: LD_EXP 100
54527: PPUSH
54528: LD_EXP 101
54532: PPUSH
54533: CALL 53009 0 3
// end else
54537: GO 54558
// begin CapturewWithoutShow ( Captured_american , Explorer1 , Explorer2 ) ;
54539: LD_VAR 0 2
54543: PPUSH
54544: LD_EXP 100
54548: PPUSH
54549: LD_EXP 101
54553: PPUSH
54554: CALL 53728 0 3
// end ; SetExplorerWayNumber ;
54558: CALL 53956 0 0
// Step_On_The_Way = 1 ;
54562: LD_ADDR_EXP 209
54566: PUSH
54567: LD_INT 1
54569: ST_TO_ADDR
// repeat Wait ( 0 0$1 ) ;
54570: LD_INT 35
54572: PPUSH
54573: CALL_OW 67
// until ( not ( IsLive ( Explorer1 ) ) or not ( IsLive ( Explorer2 ) ) or ( GetLives ( Explorer1 ) = 1000 and GetLives ( Explorer2 ) = 1000 ) or Roth_Captured ) ;
54577: LD_EXP 100
54581: PPUSH
54582: CALL_OW 300
54586: NOT
54587: PUSH
54588: LD_EXP 101
54592: PPUSH
54593: CALL_OW 300
54597: NOT
54598: OR
54599: PUSH
54600: LD_EXP 100
54604: PPUSH
54605: CALL_OW 256
54609: PUSH
54610: LD_INT 1000
54612: EQUAL
54613: PUSH
54614: LD_EXP 101
54618: PPUSH
54619: CALL_OW 256
54623: PUSH
54624: LD_INT 1000
54626: EQUAL
54627: AND
54628: OR
54629: PUSH
54630: LD_EXP 54
54634: OR
54635: IFFALSE 54570
// end else
54637: GO 54647
// Captured_american = 0 ;
54639: LD_ADDR_VAR 0 2
54643: PUSH
54644: LD_INT 0
54646: ST_TO_ADDR
// end else
54647: GO 54920
// if not ( HasTask ( Explorer1 ) ) and not ( HasTask ( Explorer2 ) ) and ( Step_On_The_Way < Way_of_Explorers [ Explorer_Way_Number ] ) then
54649: LD_EXP 100
54653: PPUSH
54654: CALL_OW 314
54658: NOT
54659: PUSH
54660: LD_EXP 101
54664: PPUSH
54665: CALL_OW 314
54669: NOT
54670: AND
54671: PUSH
54672: LD_EXP 209
54676: PUSH
54677: LD_EXP 208
54681: PUSH
54682: LD_EXP 210
54686: ARRAY
54687: LESS
54688: AND
54689: IFFALSE 54920
// begin Wait ( 0 0$2 ) ;
54691: LD_INT 70
54693: PPUSH
54694: CALL_OW 67
// if not ( SeeXY ( americans , Way_of_Explorers [ Explorer_Way_Number ] [ Step_On_The_Way ] [ 1 ] , Way_of_Explorers [ Explorer_Way_Number ] [ Step_On_The_Way ] [ 2 ] ) ) or ( Rand ( 1 , 20 ) = 1 ) then
54698: LD_EXP 176
54702: PPUSH
54703: LD_EXP 208
54707: PUSH
54708: LD_EXP 210
54712: ARRAY
54713: PUSH
54714: LD_EXP 209
54718: ARRAY
54719: PUSH
54720: LD_INT 1
54722: ARRAY
54723: PPUSH
54724: LD_EXP 208
54728: PUSH
54729: LD_EXP 210
54733: ARRAY
54734: PUSH
54735: LD_EXP 209
54739: ARRAY
54740: PUSH
54741: LD_INT 2
54743: ARRAY
54744: PPUSH
54745: CALL_OW 293
54749: NOT
54750: PUSH
54751: LD_INT 1
54753: PPUSH
54754: LD_INT 20
54756: PPUSH
54757: CALL_OW 12
54761: PUSH
54762: LD_INT 1
54764: EQUAL
54765: OR
54766: IFFALSE 54920
// begin ComMoveXY ( Explorer1 , Way_of_Explorers [ Explorer_Way_Number ] [ Step_On_The_Way ] [ 1 ] , Way_of_Explorers [ Explorer_Way_Number ] [ Step_On_The_Way ] [ 2 ] ) ;
54768: LD_EXP 100
54772: PPUSH
54773: LD_EXP 208
54777: PUSH
54778: LD_EXP 210
54782: ARRAY
54783: PUSH
54784: LD_EXP 209
54788: ARRAY
54789: PUSH
54790: LD_INT 1
54792: ARRAY
54793: PPUSH
54794: LD_EXP 208
54798: PUSH
54799: LD_EXP 210
54803: ARRAY
54804: PUSH
54805: LD_EXP 209
54809: ARRAY
54810: PUSH
54811: LD_INT 2
54813: ARRAY
54814: PPUSH
54815: CALL_OW 111
// AddComHold ( Explorer1 ) ;
54819: LD_EXP 100
54823: PPUSH
54824: CALL_OW 200
// AddComForceInvisible ( Explorer1 ) ;
54828: LD_EXP 100
54832: PPUSH
54833: CALL_OW 497
// ComMoveXY ( Explorer2 , Way_of_Explorers [ Explorer_Way_Number ] [ Step_On_The_Way ] [ 1 ] , Way_of_Explorers [ Explorer_Way_Number ] [ Step_On_The_Way ] [ 2 ] ) ;
54837: LD_EXP 101
54841: PPUSH
54842: LD_EXP 208
54846: PUSH
54847: LD_EXP 210
54851: ARRAY
54852: PUSH
54853: LD_EXP 209
54857: ARRAY
54858: PUSH
54859: LD_INT 1
54861: ARRAY
54862: PPUSH
54863: LD_EXP 208
54867: PUSH
54868: LD_EXP 210
54872: ARRAY
54873: PUSH
54874: LD_EXP 209
54878: ARRAY
54879: PUSH
54880: LD_INT 2
54882: ARRAY
54883: PPUSH
54884: CALL_OW 111
// AddComHold ( Explorer2 ) ;
54888: LD_EXP 101
54892: PPUSH
54893: CALL_OW 200
// AddComForceInvisible ( Explorer2 ) ;
54897: LD_EXP 101
54901: PPUSH
54902: CALL_OW 497
// Step_On_The_Way = Step_On_The_Way + 1 ;
54906: LD_ADDR_EXP 209
54910: PUSH
54911: LD_EXP 209
54915: PUSH
54916: LD_INT 1
54918: PLUS
54919: ST_TO_ADDR
// end ; end ; end ; end else
54920: GO 55036
// begin if IsLive ( Explorer1 ) and not ( IsInArea ( Explorer1 , Al_Base ) ) then
54922: LD_EXP 100
54926: PPUSH
54927: CALL_OW 300
54931: PUSH
54932: LD_EXP 100
54936: PPUSH
54937: LD_INT 18
54939: PPUSH
54940: CALL_OW 308
54944: NOT
54945: AND
54946: IFFALSE 54969
// TeleportUnit ( Explorer1 , 245 , 186 , 3 , true ) ;
54948: LD_EXP 100
54952: PPUSH
54953: LD_INT 245
54955: PPUSH
54956: LD_INT 186
54958: PPUSH
54959: LD_INT 3
54961: PPUSH
54962: LD_INT 1
54964: PPUSH
54965: CALL_OW 483
// if IsLive ( Explorer2 ) and not ( IsInArea ( Explorer2 , Al_Base ) ) then
54969: LD_EXP 101
54973: PPUSH
54974: CALL_OW 300
54978: PUSH
54979: LD_EXP 101
54983: PPUSH
54984: LD_INT 18
54986: PPUSH
54987: CALL_OW 308
54991: NOT
54992: AND
54993: IFFALSE 55016
// TeleportUnit ( Explorer2 , 245 , 186 , 3 , true ) ;
54995: LD_EXP 101
54999: PPUSH
55000: LD_INT 245
55002: PPUSH
55003: LD_INT 186
55005: PPUSH
55006: LD_INT 3
55008: PPUSH
55009: LD_INT 1
55011: PPUSH
55012: CALL_OW 483
// HealExplorers ;
55016: CALL 52921 0 0
// SelectExplorers ;
55020: CALL 51648 0 0
// Step_On_The_Way = 1 ;
55024: LD_ADDR_EXP 209
55028: PUSH
55029: LD_INT 1
55031: ST_TO_ADDR
// SetExplorerWayNumber ;
55032: CALL 53956 0 0
// end ; enable ;
55036: ENABLE
// end else
55037: GO 55040
// disable ;
55039: DISABLE
// Wood_registry = false ;
55040: LD_ADDR_EXP 229
55044: PUSH
55045: LD_INT 0
55047: ST_TO_ADDR
// end else
55048: GO 55051
// enable ;
55050: ENABLE
// end ;
55051: PPOPN 7
55053: END
// export function GuardAllianceWood ; var Uns , Un , Americans_to_capture , Captured_american ; begin
55054: LD_INT 0
55056: PPUSH
55057: PPUSH
55058: PPUSH
55059: PPUSH
55060: PPUSH
// if not ( Wood_registry ) then
55061: LD_EXP 229
55065: NOT
55066: IFFALSE 55291
// begin Wood_registry = true ;
55068: LD_ADDR_EXP 229
55072: PUSH
55073: LD_INT 1
55075: ST_TO_ADDR
// Americans_to_capture = [ ] ;
55076: LD_ADDR_VAR 0 4
55080: PUSH
55081: EMPTY
55082: ST_TO_ADDR
// for Un in All_americans do
55083: LD_ADDR_VAR 0 3
55087: PUSH
55088: LD_EXP 61
55092: PUSH
55093: FOR_IN
55094: IFFALSE 55196
// if IsInArea ( Un , Ali_wood ) then
55096: LD_VAR 0 3
55100: PPUSH
55101: LD_INT 9
55103: PPUSH
55104: CALL_OW 308
55108: IFFALSE 55194
// begin if ( GetType ( Un ) = unit_human ) then
55110: LD_VAR 0 3
55114: PPUSH
55115: CALL_OW 247
55119: PUSH
55120: LD_INT 1
55122: EQUAL
55123: IFFALSE 55143
// Americans_to_capture = Americans_to_capture ^ Un else
55125: LD_ADDR_VAR 0 4
55129: PUSH
55130: LD_VAR 0 4
55134: PUSH
55135: LD_VAR 0 3
55139: ADD
55140: ST_TO_ADDR
55141: GO 55194
// if ( GetType ( Un ) = unit_vehicle ) and ( UnitsInside ( Un ) <> 0 ) then
55143: LD_VAR 0 3
55147: PPUSH
55148: CALL_OW 247
55152: PUSH
55153: LD_INT 2
55155: EQUAL
55156: PUSH
55157: LD_VAR 0 3
55161: PPUSH
55162: CALL_OW 313
55166: PUSH
55167: LD_INT 0
55169: NONEQUAL
55170: AND
55171: IFFALSE 55194
// Americans_to_capture = Americans_to_capture ^ UnitsInside ( Un ) ;
55173: LD_ADDR_VAR 0 4
55177: PUSH
55178: LD_VAR 0 4
55182: PUSH
55183: LD_VAR 0 3
55187: PPUSH
55188: CALL_OW 313
55192: ADD
55193: ST_TO_ADDR
// end ;
55194: GO 55093
55196: POP
55197: POP
// for Captured_american in Americans_to_capture do
55198: LD_ADDR_VAR 0 5
55202: PUSH
55203: LD_VAR 0 4
55207: PUSH
55208: FOR_IN
55209: IFFALSE 55281
// begin Number_of_captured_americans = Number_of_captured_americans + 1 ;
55211: LD_ADDR_EXP 211
55215: PUSH
55216: LD_EXP 211
55220: PUSH
55221: LD_INT 1
55223: PLUS
55224: ST_TO_ADDR
// if ( Number_of_captured_americans = 1 ) or ( Captured_american = JMM ) then
55225: LD_EXP 211
55229: PUSH
55230: LD_INT 1
55232: EQUAL
55233: PUSH
55234: LD_VAR 0 5
55238: PUSH
55239: LD_EXP 1
55243: EQUAL
55244: OR
55245: IFFALSE 55264
// begin SohwCaptureToPlayer ( Captured_american , 0 , 0 ) ;
55247: LD_VAR 0 5
55251: PPUSH
55252: LD_INT 0
55254: PPUSH
55255: LD_INT 0
55257: PPUSH
55258: CALL 53009 0 3
// end else
55262: GO 55279
// begin CapturewWithoutShow ( Captured_american , 0 , 0 ) ;
55264: LD_VAR 0 5
55268: PPUSH
55269: LD_INT 0
55271: PPUSH
55272: LD_INT 0
55274: PPUSH
55275: CALL 53728 0 3
// end ; end ;
55279: GO 55208
55281: POP
55282: POP
// Wood_registry = false ;
55283: LD_ADDR_EXP 229
55287: PUSH
55288: LD_INT 0
55290: ST_TO_ADDR
// end ; end ;
55291: LD_VAR 0 1
55295: RET
// every 0 0$1 marked 16 do var Un ;
55296: GO 55298
55298: DISABLE
55299: LD_INT 0
55301: PPUSH
// begin for Un in Captured_Units_of_Alliance do
55302: LD_ADDR_VAR 0 1
55306: PUSH
55307: LD_EXP 99
55311: PUSH
55312: FOR_IN
55313: IFFALSE 55363
// if GetDistUnitXY ( Un , 226 , 197 ) < 2 then
55315: LD_VAR 0 1
55319: PPUSH
55320: LD_INT 226
55322: PPUSH
55323: LD_INT 197
55325: PPUSH
55326: CALL_OW 297
55330: PUSH
55331: LD_INT 2
55333: LESS
55334: IFFALSE 55361
// begin RemoveUnit ( Un ) ;
55336: LD_VAR 0 1
55340: PPUSH
55341: CALL_OW 64
// Captured_Units_of_Alliance = Captured_Units_of_Alliance diff Un ;
55345: LD_ADDR_EXP 99
55349: PUSH
55350: LD_EXP 99
55354: PUSH
55355: LD_VAR 0 1
55359: DIFF
55360: ST_TO_ADDR
// end ;
55361: GO 55312
55363: POP
55364: POP
// if Captured_Units_of_Alliance > 0 then
55365: LD_EXP 99
55369: PUSH
55370: LD_INT 0
55372: GREATER
55373: IFFALSE 55408
// begin enable ;
55375: ENABLE
// for Un in Captured_Units_of_Alliance do
55376: LD_ADDR_VAR 0 1
55380: PUSH
55381: LD_EXP 99
55385: PUSH
55386: FOR_IN
55387: IFFALSE 55406
// ComMoveXY ( Un , 226 , 197 ) ;
55389: LD_VAR 0 1
55393: PPUSH
55394: LD_INT 226
55396: PPUSH
55397: LD_INT 197
55399: PPUSH
55400: CALL_OW 111
55404: GO 55386
55406: POP
55407: POP
// end ; end ;
55408: PPOPN 1
55410: END
// every 0 0$1 trigger ( Tick > Time_of_first_capture ) marked 10 do
55411: LD_OWVAR 1
55415: PUSH
55416: LD_EXP 204
55420: GREATER
55421: IFFALSE 55431
55423: GO 55425
55425: DISABLE
// begin enable ( Explorers_Can_Go ) ;
55426: LD_EXP 153
55430: ENABLE_MARKED
// end ; end_of_file
55431: END
// function CratesInArea ( area ) ; begin
55432: LD_INT 0
55434: PPUSH
// result = GetResourceArea ( area , mat_cans ) ;
55435: LD_ADDR_VAR 0 2
55439: PUSH
55440: LD_VAR 0 1
55444: PPUSH
55445: LD_INT 1
55447: PPUSH
55448: CALL_OW 287
55452: ST_TO_ADDR
// end ;
55453: LD_VAR 0 2
55457: RET
// function ln ( numb ) ; var i ; begin
55458: LD_INT 0
55460: PPUSH
55461: PPUSH
// i = 0 ;
55462: LD_ADDR_VAR 0 3
55466: PUSH
55467: LD_INT 0
55469: ST_TO_ADDR
// while ( i < 10 ) and ( numb > 1 ) do
55470: LD_VAR 0 3
55474: PUSH
55475: LD_INT 10
55477: LESS
55478: PUSH
55479: LD_VAR 0 1
55483: PUSH
55484: LD_INT 1
55486: GREATER
55487: AND
55488: IFFALSE 55520
// begin numb = numb div 2 ;
55490: LD_ADDR_VAR 0 1
55494: PUSH
55495: LD_VAR 0 1
55499: PUSH
55500: LD_INT 2
55502: DIV
55503: ST_TO_ADDR
// i = i + 1 ;
55504: LD_ADDR_VAR 0 3
55508: PUSH
55509: LD_VAR 0 3
55513: PUSH
55514: LD_INT 1
55516: PLUS
55517: ST_TO_ADDR
// end ;
55518: GO 55470
// result = i ;
55520: LD_ADDR_VAR 0 2
55524: PUSH
55525: LD_VAR 0 3
55529: ST_TO_ADDR
// end ;
55530: LD_VAR 0 2
55534: RET
// function TimeStep ; var r , hlp ; begin
55535: LD_INT 0
55537: PPUSH
55538: PPUSH
55539: PPUSH
// r = tick div 400 ;
55540: LD_ADDR_VAR 0 2
55544: PUSH
55545: LD_OWVAR 1
55549: PUSH
55550: LD_INT 400
55552: DIV
55553: ST_TO_ADDR
// hlp = ln ( r ) + 1 ;
55554: LD_ADDR_VAR 0 3
55558: PUSH
55559: LD_VAR 0 2
55563: PPUSH
55564: CALL 55458 0 1
55568: PUSH
55569: LD_INT 1
55571: PLUS
55572: ST_TO_ADDR
// if r > 8 then
55573: LD_VAR 0 2
55577: PUSH
55578: LD_INT 8
55580: GREATER
55581: IFFALSE 55593
// hlp = 8 else
55583: LD_ADDR_VAR 0 3
55587: PUSH
55588: LD_INT 8
55590: ST_TO_ADDR
55591: GO 55603
// hlp = r ;
55593: LD_ADDR_VAR 0 3
55597: PUSH
55598: LD_VAR 0 2
55602: ST_TO_ADDR
// result = hlp ;
55603: LD_ADDR_VAR 0 1
55607: PUSH
55608: LD_VAR 0 3
55612: ST_TO_ADDR
// end ;
55613: LD_VAR 0 1
55617: RET
// function CreateNewCrates ( Number ) ; var Old_Crates , area ; begin
55618: LD_INT 0
55620: PPUSH
55621: PPUSH
55622: PPUSH
// area = Plan3 ;
55623: LD_ADDR_VAR 0 4
55627: PUSH
55628: LD_INT 31
55630: ST_TO_ADDR
// Old_Crates = ln ( CratesInArea ( area ) ) ;
55631: LD_ADDR_VAR 0 3
55635: PUSH
55636: LD_VAR 0 4
55640: PPUSH
55641: CALL 55432 0 1
55645: PPUSH
55646: CALL 55458 0 1
55650: ST_TO_ADDR
// if Old_Crates < 10 then
55651: LD_VAR 0 3
55655: PUSH
55656: LD_INT 10
55658: LESS
55659: IFFALSE 55712
// if rand ( 1 , 100 ) < 25 + ( 15 * ( 10 - Old_Crates ) ) / 2 then
55661: LD_INT 1
55663: PPUSH
55664: LD_INT 100
55666: PPUSH
55667: CALL_OW 12
55671: PUSH
55672: LD_INT 25
55674: PUSH
55675: LD_INT 15
55677: PUSH
55678: LD_INT 10
55680: PUSH
55681: LD_VAR 0 3
55685: MINUS
55686: MUL
55687: PUSH
55688: LD_INT 2
55690: DIVREAL
55691: PLUS
55692: LESS
55693: IFFALSE 55712
// CreateCratesArea ( Number , area , true ) ;
55695: LD_VAR 0 1
55699: PPUSH
55700: LD_VAR 0 4
55704: PPUSH
55705: LD_INT 1
55707: PPUSH
55708: CALL_OW 55
// end ;
55712: LD_VAR 0 2
55716: RET
// every 0 0$5 trigger tick > Time_Of_Crates do var Step ;
55717: LD_OWVAR 1
55721: PUSH
55722: LD_EXP 222
55726: GREATER
55727: IFFALSE 55803
55729: GO 55731
55731: DISABLE
55732: LD_INT 0
55734: PPUSH
// begin Step = TimeStep ;
55735: LD_ADDR_VAR 0 1
55739: PUSH
55740: CALL 55535 0 0
55744: ST_TO_ADDR
// Time_Of_Crates = Time_Of_Crates + 0 0$10 + Rand ( 0 0$6 * Step , 0 0$05 + 0 0$12 * Step ) ;
55745: LD_ADDR_EXP 222
55749: PUSH
55750: LD_EXP 222
55754: PUSH
55755: LD_INT 350
55757: PLUS
55758: PUSH
55759: LD_INT 210
55761: PUSH
55762: LD_VAR 0 1
55766: MUL
55767: PPUSH
55768: LD_INT 175
55770: PUSH
55771: LD_INT 420
55773: PUSH
55774: LD_VAR 0 1
55778: MUL
55779: PLUS
55780: PPUSH
55781: CALL_OW 12
55785: PLUS
55786: ST_TO_ADDR
// CreateNewCrates ( Rand ( 3 , 5 ) ) ;
55787: LD_INT 3
55789: PPUSH
55790: LD_INT 5
55792: PPUSH
55793: CALL_OW 12
55797: PPUSH
55798: CALL 55618 0 1
// enable ;
55802: ENABLE
// end ; end_of_file
55803: PPOPN 1
55805: END
// every 0 0$2 + 0 0$0.1 do
55806: GO 55808
55808: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ) > FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] , [ f_class , class_apeman_kamikaze ] ] ] ] ) then
55809: LD_INT 22
55811: PUSH
55812: LD_INT 1
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 2
55821: PUSH
55822: LD_INT 25
55824: PUSH
55825: LD_INT 12
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 25
55834: PUSH
55835: LD_INT 16
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 25
55844: PUSH
55845: LD_INT 15
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 25
55854: PUSH
55855: LD_INT 17
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PPUSH
55873: CALL_OW 69
55877: PUSH
55878: LD_INT 22
55880: PUSH
55881: LD_INT 1
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 21
55890: PUSH
55891: LD_INT 1
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 3
55900: PUSH
55901: LD_INT 2
55903: PUSH
55904: LD_INT 25
55906: PUSH
55907: LD_INT 12
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 25
55916: PUSH
55917: LD_INT 16
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 25
55926: PUSH
55927: LD_INT 15
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 25
55936: PUSH
55937: LD_INT 17
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: LIST
55959: PPUSH
55960: CALL_OW 69
55964: GREATER
55965: IFFALSE 55976
// begin SetAchievement ( ACH_POTA ) ;
55967: LD_STRING ACH_POTA
55969: PPUSH
55970: CALL_OW 543
// exit ;
55974: GO 55977
// end ; enable ;
55976: ENABLE
// end ;
55977: END
// export function SA_OnSiberiteRocketExploded ( siberite_rocket_vehicle ) ; begin
55978: LD_INT 0
55980: PPUSH
// if GetSide ( siberite_rocket_vehicle ) = 1 then
55981: LD_VAR 0 1
55985: PPUSH
55986: CALL_OW 255
55990: PUSH
55991: LD_INT 1
55993: EQUAL
55994: IFFALSE 56003
// SetAchievement ( ACH_RAD ) ;
55996: LD_STRING ACH_RAD
55998: PPUSH
55999: CALL_OW 543
// end ;
56003: LD_VAR 0 2
56007: RET
// export function SA_OnLegionJoin ; begin
56008: LD_INT 0
56010: PPUSH
// SetAchievement ( ACH_LS ) ;
56011: LD_STRING ACH_LS
56013: PPUSH
56014: CALL_OW 543
// end ;
56018: LD_VAR 0 1
56022: RET
// export function SA_OnMissionComplete ; begin
56023: LD_INT 0
56025: PPUSH
// SetAchievement ( ACH_GBA ) ;
56026: LD_STRING ACH_GBA
56028: PPUSH
56029: CALL_OW 543
// end ;
56033: LD_VAR 0 1
56037: RET
// export function SA_OnVsevolodAppear ; begin
56038: LD_INT 0
56040: PPUSH
// SetAchievement ( ACH_MMB ) ;
56041: LD_STRING ACH_MMB
56043: PPUSH
56044: CALL_OW 543
// end ;
56048: LD_VAR 0 1
56052: RET
