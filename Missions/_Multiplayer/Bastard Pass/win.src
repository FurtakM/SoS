function CanWinLoose;
begin
  Result := True;

  if IAmServer and PlayerCount > 0 then
    Result := False;

  if IAmSpec and PlayerCount > 1 then
    Result := False;
end;

function HasPower(i);
begin
  if def_people_respawning then
    Result := FilterAllUnits([[f_side, i], [f_or, [f_type, unit_human], [f_control, control_computer], [f_control, control_apeman], [f_btype, b_depot], [f_btype, b_warehouse]]])
  else
    Result := FilterAllUnits([[f_side, i], [f_or, [f_type, unit_human], [f_control, control_computer], [f_control, control_apeman]]]);
end;

function AlliedSides(i, j);
begin
  Result := False;

  if (GetAttitude(i, j) = att_friend) and (GetAttitude(j, i) = att_friend) and GetAlliedVictory(i) and GetAlliedVictory(j) then
    Result := True;
end;

every 0$3 trigger CanWinLoose marked 400 do
  YouLostInMultiplayer;

every 0$3 trigger CanWinLoose marked 401 do
  YouWinInMultiplayer;

every 0$3 marked 98 do // Team Game
var i, CanWin;
begin
  if not HasPower(your_side) then
    begin
      Multiplayer_Loose_Message;
      Enable(400);
    end
  else
    begin
      CanWin := True;

      for i := 1 to 8 do
        if Side_Positions[i] and MultiplayerSideAlive(i) and (i<>your_side) then
          if not Side_Teams[i] or (Side_Teams[i]<>Side_Teams[your_side]) then
            if HasPower(i) then
              begin
                CanWin := False;
                break;
              end;

      if CanWin then
        Enable(401)
      else
        Enable;
    end;
end;

every 0$3 marked 99 do // Kill 'em all
var i, CanWin;
begin
  if not HasPower(your_side) then
    begin
      Multiplayer_Loose_Message;
      Enable(400);
    end
  else
    begin
      CanWin := True;

      for i := 1 to 8 do
        if Side_Positions[i] and MultiplayerSideAlive(i) and (i<>your_side) then
          if not AlliedSides(i, your_side) then
            if HasPower(i) then
              begin
                CanWin := False;
                break;
              end;

      if CanWin then
        Enable(401)
      else
        Enable;
    end;
end;