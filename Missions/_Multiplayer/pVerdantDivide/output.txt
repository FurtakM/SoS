// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 3279 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3702 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 ] ;
  20: LD_ADDR_EXP 6
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 1
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ 0 , 1 , 2 , 4 ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 7
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: LD_INT 0
 461: PUSH
 462: LD_INT 1
 464: PUSH
 465: LD_INT 2
 467: PUSH
 468: LD_INT 4
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: LIST
 475: LIST
 476: PUSH
 477: LD_INT 0
 479: PUSH
 480: LD_INT 6300
 482: PUSH
 483: LD_INT 10500
 485: PUSH
 486: LD_INT 16800
 488: PUSH
 489: LD_INT 21000
 491: PUSH
 492: LD_INT 25200
 494: PUSH
 495: LD_INT 31500
 497: PUSH
 498: LD_INT 42000
 500: PUSH
 501: LD_INT 63000
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: LIST
 534: LIST
 535: LIST
 536: LIST
 537: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 1 , 3 3$0 ] ;
 538: LD_ADDR_EXP 8
 542: PUSH
 543: LD_INT 2
 545: PUSH
 546: LD_INT 15
 548: PUSH
 549: LD_INT 4
 551: PUSH
 552: LD_INT 100
 554: PUSH
 555: LD_INT 30
 557: PUSH
 558: LD_INT 0
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: LIST
 565: PUSH
 566: LD_INT 3
 568: PUSH
 569: LD_INT 1
 571: PUSH
 572: LD_INT 2
 574: PUSH
 575: LD_INT 250
 577: PUSH
 578: LD_INT 2
 580: PUSH
 581: LD_INT 10500
 583: PUSH
 584: LD_INT 1
 586: PUSH
 587: LD_INT 700
 589: PUSH
 590: LD_INT 1
 592: PUSH
 593: LD_INT 700
 595: PUSH
 596: LD_INT 3
 598: PUSH
 599: LD_INT 0
 601: PUSH
 602: LD_INT 0
 604: PUSH
 605: LD_INT 31500
 607: PUSH
 608: LD_INT 0
 610: PUSH
 611: LD_INT 1
 613: PUSH
 614: LD_INT 6300
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: LIST
 629: LIST
 630: LIST
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: LIST
 636: LIST
 637: LIST
 638: LIST
 639: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 1
 647: ST_TO_ADDR
// your_side := 1 ;
 648: LD_ADDR_OWVAR 2
 652: PUSH
 653: LD_INT 1
 655: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 3 , 4 , 5 , 6 , 0 , 0 ] ;
 656: LD_ADDR_EXP 9
 660: PUSH
 661: LD_INT 1
 663: PUSH
 664: LD_INT 2
 666: PUSH
 667: LD_INT 3
 669: PUSH
 670: LD_INT 4
 672: PUSH
 673: LD_INT 5
 675: PUSH
 676: LD_INT 6
 678: PUSH
 679: LD_INT 0
 681: PUSH
 682: LD_INT 0
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: LIST
 692: LIST
 693: LIST
 694: ST_TO_ADDR
// mpSideTeams := [ 1 , 1 , 2 , 3 , 4 , 4 , 0 , 0 ] ;
 695: LD_ADDR_EXP 10
 699: PUSH
 700: LD_INT 1
 702: PUSH
 703: LD_INT 1
 705: PUSH
 706: LD_INT 2
 708: PUSH
 709: LD_INT 3
 711: PUSH
 712: LD_INT 4
 714: PUSH
 715: LD_INT 4
 717: PUSH
 718: LD_INT 0
 720: PUSH
 721: LD_INT 0
 723: PUSH
 724: EMPTY
 725: LIST
 726: LIST
 727: LIST
 728: LIST
 729: LIST
 730: LIST
 731: LIST
 732: LIST
 733: ST_TO_ADDR
// mpSideNations := [ 3 , 3 , 3 , 3 , 3 , 3 , 0 , 0 ] ;
 734: LD_ADDR_EXP 11
 738: PUSH
 739: LD_INT 3
 741: PUSH
 742: LD_INT 3
 744: PUSH
 745: LD_INT 3
 747: PUSH
 748: LD_INT 3
 750: PUSH
 751: LD_INT 3
 753: PUSH
 754: LD_INT 3
 756: PUSH
 757: LD_INT 0
 759: PUSH
 760: LD_INT 0
 762: PUSH
 763: EMPTY
 764: LIST
 765: LIST
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: LIST
 771: LIST
 772: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 ] , [ 2 , 3 ] , [ 4 , 5 ] ] ;
 773: LD_ADDR_EXP 12
 777: PUSH
 778: LD_INT 1
 780: PUSH
 781: LD_INT 2
 783: PUSH
 784: EMPTY
 785: LIST
 786: LIST
 787: PUSH
 788: LD_INT 2
 790: PUSH
 791: LD_INT 3
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: PUSH
 798: LD_INT 4
 800: PUSH
 801: LD_INT 5
 803: PUSH
 804: EMPTY
 805: LIST
 806: LIST
 807: PUSH
 808: EMPTY
 809: LIST
 810: LIST
 811: LIST
 812: ST_TO_ADDR
// mpTeamGame := true ;
 813: LD_ADDR_EXP 13
 817: PUSH
 818: LD_INT 1
 820: ST_TO_ADDR
// mpMapSize := [ 140 , 160 ] ;
 821: LD_ADDR_EXP 31
 825: PUSH
 826: LD_INT 140
 828: PUSH
 829: LD_INT 160
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: ST_TO_ADDR
// end ;
 836: LD_VAR 0 1
 840: RET
// export kingArea , kingCamArea , mpTree ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 841: LD_INT 0
 843: PPUSH
 844: PPUSH
 845: PPUSH
 846: PPUSH
 847: PPUSH
 848: PPUSH
 849: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
 850: LD_ADDR_EXP 21
 854: PUSH
 855: LD_INT 1
 857: PUSH
 858: LD_INT 2
 860: PUSH
 861: LD_INT 3
 863: PUSH
 864: LD_INT 4
 866: PUSH
 867: LD_INT 5
 869: PUSH
 870: LD_INT 6
 872: PUSH
 873: EMPTY
 874: LIST
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: ST_TO_ADDR
// mpMarkedAreas := [ westRiverCratesArea , eastRiverCratesArea , centerCratesArea ] union mpBuildUpAreas ;
 881: LD_ADDR_EXP 20
 885: PUSH
 886: LD_INT 9
 888: PUSH
 889: LD_INT 10
 891: PUSH
 892: LD_INT 11
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: LIST
 899: PUSH
 900: LD_EXP 21
 904: UNION
 905: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 906: LD_VAR 0 1
 910: PUSH
 911: LD_INT 2
 913: EQUAL
 914: IFFALSE 926
// baseLevel := 1 else
 916: LD_ADDR_VAR 0 7
 920: PUSH
 921: LD_INT 1
 923: ST_TO_ADDR
 924: GO 940
// baseLevel := mpGameSettings [ 1 ] ;
 926: LD_ADDR_VAR 0 7
 930: PUSH
 931: LD_EXP 8
 935: PUSH
 936: LD_INT 1
 938: ARRAY
 939: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 940: LD_ADDR_EXP 26
 944: PUSH
 945: LD_EXP 8
 949: PUSH
 950: LD_INT 2
 952: ARRAY
 953: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 954: LD_ADDR_EXP 27
 958: PUSH
 959: LD_EXP 8
 963: PUSH
 964: LD_INT 3
 966: ARRAY
 967: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 968: LD_ADDR_EXP 17
 972: PUSH
 973: LD_EXP 8
 977: PUSH
 978: LD_INT 4
 980: ARRAY
 981: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 982: LD_ADDR_EXP 29
 986: PUSH
 987: LD_EXP 8
 991: PUSH
 992: LD_INT 5
 994: ARRAY
 995: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
 996: LD_ADDR_VAR 0 5
1000: PUSH
1001: LD_EXP 8
1005: PUSH
1006: LD_INT 6
1008: ARRAY
1009: PUSH
1010: LD_INT 0
1012: GREATER
1013: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1014: LD_ADDR_VAR 0 6
1018: PUSH
1019: LD_EXP 8
1023: PUSH
1024: LD_INT 7
1026: ARRAY
1027: PUSH
1028: LD_INT 0
1030: GREATER
1031: ST_TO_ADDR
// kingCamArea := 0 ;
1032: LD_ADDR_EXP 2
1036: PUSH
1037: LD_INT 0
1039: ST_TO_ADDR
// kingArea := 0 ;
1040: LD_ADDR_EXP 1
1044: PUSH
1045: LD_INT 0
1047: ST_TO_ADDR
// if gameType = GameTypeKing then
1048: LD_VAR 0 1
1052: PUSH
1053: LD_INT 3
1055: EQUAL
1056: IFFALSE 1096
// begin mpKingArea := 0 ;
1058: LD_ADDR_EXP 36
1062: PUSH
1063: LD_INT 0
1065: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1066: LD_ADDR_EXP 37
1070: PUSH
1071: LD_EXP 8
1075: PUSH
1076: LD_INT 8
1078: ARRAY
1079: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1080: LD_ADDR_EXP 39
1084: PUSH
1085: LD_EXP 8
1089: PUSH
1090: LD_INT 10
1092: ARRAY
1093: ST_TO_ADDR
// end else
1094: GO 1120
// begin mpKingArea := 0 ;
1096: LD_ADDR_EXP 36
1100: PUSH
1101: LD_INT 0
1103: ST_TO_ADDR
// mpPoints := 0 ;
1104: LD_ADDR_EXP 37
1108: PUSH
1109: LD_INT 0
1111: ST_TO_ADDR
// mpEmissions := 0 ;
1112: LD_ADDR_EXP 39
1116: PUSH
1117: LD_INT 0
1119: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1120: LD_EXP 8
1124: PUSH
1125: LD_INT 9
1127: ARRAY
1128: IFFALSE 1260
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1130: LD_ADDR_EXP 38
1134: PUSH
1135: LD_INT 1
1137: PUSH
1138: LD_INT 1
1140: PUSH
1141: LD_INT 1
1143: PUSH
1144: LD_INT 2
1146: PUSH
1147: EMPTY
1148: LIST
1149: LIST
1150: LIST
1151: LIST
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: LD_INT 1
1158: PUSH
1159: LD_INT 1
1161: PUSH
1162: LD_INT 3
1164: PUSH
1165: EMPTY
1166: LIST
1167: LIST
1168: LIST
1169: LIST
1170: PUSH
1171: EMPTY
1172: LIST
1173: LIST
1174: PUSH
1175: LD_INT 12
1177: PUSH
1178: LD_INT 1
1180: PUSH
1181: LD_INT 1
1183: PUSH
1184: LD_INT 24
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: LIST
1191: LIST
1192: PUSH
1193: LD_INT 12
1195: PUSH
1196: LD_INT 1
1198: PUSH
1199: LD_INT 1
1201: PUSH
1202: LD_INT 23
1204: PUSH
1205: EMPTY
1206: LIST
1207: LIST
1208: LIST
1209: LIST
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: PUSH
1215: LD_INT 21
1217: PUSH
1218: LD_INT 1
1220: PUSH
1221: LD_INT 1
1223: PUSH
1224: LD_INT 42
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: LIST
1231: LIST
1232: PUSH
1233: LD_INT 21
1235: PUSH
1236: LD_INT 1
1238: PUSH
1239: LD_INT 1
1241: PUSH
1242: LD_INT 42
1244: PUSH
1245: EMPTY
1246: LIST
1247: LIST
1248: LIST
1249: LIST
1250: PUSH
1251: EMPTY
1252: LIST
1253: LIST
1254: PUSH
1255: EMPTY
1256: LIST
1257: LIST
1258: LIST
1259: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1260: LD_ADDR_EXP 18
1264: PUSH
1265: LD_EXP 8
1269: PUSH
1270: LD_INT 11
1272: ARRAY
1273: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1274: LD_ADDR_EXP 24
1278: PUSH
1279: LD_EXP 8
1283: PUSH
1284: LD_INT 12
1286: ARRAY
1287: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1288: LD_ADDR_EXP 28
1292: PUSH
1293: LD_EXP 8
1297: PUSH
1298: LD_INT 13
1300: ARRAY
1301: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1302: LD_ADDR_EXP 35
1306: PUSH
1307: LD_EXP 8
1311: PUSH
1312: LD_INT 14
1314: ARRAY
1315: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1316: LD_ADDR_EXP 32
1320: PUSH
1321: LD_EXP 8
1325: PUSH
1326: LD_INT 15
1328: ARRAY
1329: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1330: LD_ADDR_EXP 30
1334: PUSH
1335: LD_EXP 8
1339: PUSH
1340: LD_INT 18
1342: ARRAY
1343: ST_TO_ADDR
// mpTree := mpGameSettings [ 20 ] ;
1344: LD_ADDR_EXP 3
1348: PUSH
1349: LD_EXP 8
1353: PUSH
1354: LD_INT 20
1356: ARRAY
1357: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1358: LD_ADDR_EXP 22
1362: PUSH
1363: LD_EXP 8
1367: PUSH
1368: LD_INT 21
1370: ARRAY
1371: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea ] ;
1372: LD_ADDR_EXP 33
1376: PUSH
1377: LD_INT 12
1379: PUSH
1380: LD_INT 13
1382: PUSH
1383: LD_INT 14
1385: PUSH
1386: LD_INT 15
1388: PUSH
1389: LD_INT 16
1391: PUSH
1392: LD_INT 17
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 3 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 0 ) , GetBuildingFromArea ( depotArea5 , 0 ) , GetBuildingFromArea ( depotArea6 , 5 ) ] ;
1403: LD_ADDR_VAR 0 8
1407: PUSH
1408: LD_INT 18
1410: PPUSH
1411: LD_INT 2
1413: PPUSH
1414: CALL 63268 0 2
1418: PUSH
1419: LD_INT 24
1421: PPUSH
1422: LD_INT 3
1424: PPUSH
1425: CALL 63268 0 2
1429: PUSH
1430: LD_INT 30
1432: PPUSH
1433: LD_INT 3
1435: PPUSH
1436: CALL 63268 0 2
1440: PUSH
1441: LD_INT 36
1443: PPUSH
1444: LD_INT 0
1446: PPUSH
1447: CALL 63268 0 2
1451: PUSH
1452: LD_INT 42
1454: PPUSH
1455: LD_INT 0
1457: PPUSH
1458: CALL 63268 0 2
1462: PUSH
1463: LD_INT 48
1465: PPUSH
1466: LD_INT 5
1468: PPUSH
1469: CALL 63268 0 2
1473: PUSH
1474: EMPTY
1475: LIST
1476: LIST
1477: LIST
1478: LIST
1479: LIST
1480: LIST
1481: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1482: LD_ADDR_VAR 0 3
1486: PUSH
1487: DOUBLE
1488: LD_INT 1
1490: DEC
1491: ST_TO_ADDR
1492: LD_VAR 0 8
1496: PPUSH
1497: CALL 22573 0 1
1501: PUSH
1502: FOR_TO
1503: IFFALSE 1607
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1505: LD_ADDR_EXP 23
1509: PUSH
1510: LD_EXP 23
1514: PPUSH
1515: LD_VAR 0 3
1519: PPUSH
1520: LD_VAR 0 8
1524: PUSH
1525: LD_VAR 0 3
1529: ARRAY
1530: PUSH
1531: LD_INT 1
1533: ARRAY
1534: PPUSH
1535: LD_VAR 0 8
1539: PUSH
1540: LD_VAR 0 3
1544: ARRAY
1545: PUSH
1546: LD_INT 3
1548: ARRAY
1549: PPUSH
1550: LD_INT 10
1552: PPUSH
1553: CALL_OW 272
1557: PUSH
1558: LD_VAR 0 8
1562: PUSH
1563: LD_VAR 0 3
1567: ARRAY
1568: PUSH
1569: LD_INT 2
1571: ARRAY
1572: PPUSH
1573: LD_VAR 0 8
1577: PUSH
1578: LD_VAR 0 3
1582: ARRAY
1583: PUSH
1584: LD_INT 3
1586: ARRAY
1587: PPUSH
1588: LD_INT 10
1590: PPUSH
1591: CALL_OW 273
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: PPUSH
1600: CALL_OW 1
1604: ST_TO_ADDR
1605: GO 1502
1607: POP
1608: POP
// if hasOil then
1609: LD_VAR 0 5
1613: IFFALSE 1724
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1615: LD_ADDR_VAR 0 4
1619: PUSH
1620: LD_EXP 8
1624: PUSH
1625: LD_INT 6
1627: ARRAY
1628: PUSH
1629: LD_INT 2
1631: EQUAL
1632: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) ] ;
1633: LD_ADDR_EXP 14
1637: PUSH
1638: LD_INT 19
1640: PPUSH
1641: LD_VAR 0 4
1645: PPUSH
1646: CALL 63101 0 2
1650: PUSH
1651: LD_INT 25
1653: PPUSH
1654: LD_VAR 0 4
1658: PPUSH
1659: CALL 63101 0 2
1663: PUSH
1664: LD_INT 31
1666: PPUSH
1667: LD_VAR 0 4
1671: PPUSH
1672: CALL 63101 0 2
1676: PUSH
1677: LD_INT 37
1679: PPUSH
1680: LD_VAR 0 4
1684: PPUSH
1685: CALL 63101 0 2
1689: PUSH
1690: LD_INT 43
1692: PPUSH
1693: LD_VAR 0 4
1697: PPUSH
1698: CALL 63101 0 2
1702: PUSH
1703: LD_INT 49
1705: PPUSH
1706: LD_VAR 0 4
1710: PPUSH
1711: CALL 63101 0 2
1715: PUSH
1716: EMPTY
1717: LIST
1718: LIST
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: ST_TO_ADDR
// end ; if hasSib then
1724: LD_VAR 0 6
1728: IFFALSE 1839
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1730: LD_ADDR_VAR 0 4
1734: PUSH
1735: LD_EXP 8
1739: PUSH
1740: LD_INT 7
1742: ARRAY
1743: PUSH
1744: LD_INT 2
1746: EQUAL
1747: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) ] ;
1748: LD_ADDR_EXP 15
1752: PUSH
1753: LD_INT 20
1755: PPUSH
1756: LD_VAR 0 4
1760: PPUSH
1761: CALL 63101 0 2
1765: PUSH
1766: LD_INT 26
1768: PPUSH
1769: LD_VAR 0 4
1773: PPUSH
1774: CALL 63101 0 2
1778: PUSH
1779: LD_INT 32
1781: PPUSH
1782: LD_VAR 0 4
1786: PPUSH
1787: CALL 63101 0 2
1791: PUSH
1792: LD_INT 38
1794: PPUSH
1795: LD_VAR 0 4
1799: PPUSH
1800: CALL 63101 0 2
1804: PUSH
1805: LD_INT 44
1807: PPUSH
1808: LD_VAR 0 4
1812: PPUSH
1813: CALL 63101 0 2
1817: PUSH
1818: LD_INT 50
1820: PPUSH
1821: LD_VAR 0 4
1825: PPUSH
1826: CALL 63101 0 2
1830: PUSH
1831: EMPTY
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1839: LD_VAR 0 7
1843: PUSH
1844: LD_INT 1
1846: GREATEREQUAL
1847: IFFALSE 1859
// mpDepots := startPos ;
1849: LD_ADDR_EXP 16
1853: PUSH
1854: LD_VAR 0 8
1858: ST_TO_ADDR
// if baseLevel >= 2 then
1859: LD_VAR 0 7
1863: PUSH
1864: LD_INT 2
1866: GREATEREQUAL
1867: IFFALSE 2182
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 3 ) ] ] ;
1869: LD_ADDR_EXP 19
1873: PUSH
1874: LD_INT 31
1876: PUSH
1877: LD_INT 22
1879: PPUSH
1880: LD_INT 0
1882: PPUSH
1883: CALL 63268 0 2
1887: ADD
1888: PUSH
1889: LD_INT 31
1891: PUSH
1892: LD_INT 23
1894: PPUSH
1895: LD_INT 5
1897: PPUSH
1898: CALL 63268 0 2
1902: ADD
1903: PUSH
1904: LD_INT 4
1906: PUSH
1907: LD_INT 21
1909: PPUSH
1910: LD_INT 0
1912: PPUSH
1913: CALL 63268 0 2
1917: ADD
1918: PUSH
1919: EMPTY
1920: LIST
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 31
1926: PUSH
1927: LD_INT 28
1929: PPUSH
1930: LD_INT 0
1932: PPUSH
1933: CALL 63268 0 2
1937: ADD
1938: PUSH
1939: LD_INT 31
1941: PUSH
1942: LD_INT 29
1944: PPUSH
1945: LD_INT 5
1947: PPUSH
1948: CALL 63268 0 2
1952: ADD
1953: PUSH
1954: LD_INT 4
1956: PUSH
1957: LD_INT 27
1959: PPUSH
1960: LD_INT 5
1962: PPUSH
1963: CALL 63268 0 2
1967: ADD
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: LIST
1973: PUSH
1974: LD_INT 31
1976: PUSH
1977: LD_INT 34
1979: PPUSH
1980: LD_INT 0
1982: PPUSH
1983: CALL 63268 0 2
1987: ADD
1988: PUSH
1989: LD_INT 31
1991: PUSH
1992: LD_INT 35
1994: PPUSH
1995: LD_INT 5
1997: PPUSH
1998: CALL 63268 0 2
2002: ADD
2003: PUSH
2004: LD_INT 4
2006: PUSH
2007: LD_INT 33
2009: PPUSH
2010: LD_INT 5
2012: PPUSH
2013: CALL 63268 0 2
2017: ADD
2018: PUSH
2019: EMPTY
2020: LIST
2021: LIST
2022: LIST
2023: PUSH
2024: LD_INT 31
2026: PUSH
2027: LD_INT 40
2029: PPUSH
2030: LD_INT 2
2032: PPUSH
2033: CALL 63268 0 2
2037: ADD
2038: PUSH
2039: LD_INT 31
2041: PUSH
2042: LD_INT 41
2044: PPUSH
2045: LD_INT 3
2047: PPUSH
2048: CALL 63268 0 2
2052: ADD
2053: PUSH
2054: LD_INT 4
2056: PUSH
2057: LD_INT 39
2059: PPUSH
2060: LD_INT 3
2062: PPUSH
2063: CALL 63268 0 2
2067: ADD
2068: PUSH
2069: EMPTY
2070: LIST
2071: LIST
2072: LIST
2073: PUSH
2074: LD_INT 31
2076: PUSH
2077: LD_INT 46
2079: PPUSH
2080: LD_INT 2
2082: PPUSH
2083: CALL 63268 0 2
2087: ADD
2088: PUSH
2089: LD_INT 31
2091: PUSH
2092: LD_INT 47
2094: PPUSH
2095: LD_INT 3
2097: PPUSH
2098: CALL 63268 0 2
2102: ADD
2103: PUSH
2104: LD_INT 4
2106: PUSH
2107: LD_INT 45
2109: PPUSH
2110: LD_INT 3
2112: PPUSH
2113: CALL 63268 0 2
2117: ADD
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: LIST
2123: PUSH
2124: LD_INT 31
2126: PUSH
2127: LD_INT 52
2129: PPUSH
2130: LD_INT 3
2132: PPUSH
2133: CALL 63268 0 2
2137: ADD
2138: PUSH
2139: LD_INT 31
2141: PUSH
2142: LD_INT 53
2144: PPUSH
2145: LD_INT 2
2147: PPUSH
2148: CALL 63268 0 2
2152: ADD
2153: PUSH
2154: LD_INT 4
2156: PUSH
2157: LD_INT 51
2159: PPUSH
2160: LD_INT 3
2162: PPUSH
2163: CALL 63268 0 2
2167: ADD
2168: PUSH
2169: EMPTY
2170: LIST
2171: LIST
2172: LIST
2173: PUSH
2174: EMPTY
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: LIST
2180: LIST
2181: ST_TO_ADDR
// end ; if mpTree then
2182: LD_EXP 3
2186: IFFALSE 2198
// SetAreaMapShow ( TreeArea , 1 ) ;
2188: LD_INT 8
2190: PPUSH
2191: LD_INT 1
2193: PPUSH
2194: CALL_OW 424
// end ;
2198: LD_VAR 0 2
2202: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2203: GO 2205
2205: DISABLE
2206: LD_INT 0
2208: PPUSH
2209: PPUSH
2210: PPUSH
2211: PPUSH
2212: PPUSH
2213: PPUSH
2214: PPUSH
2215: PPUSH
// begin if not mpShipments then
2216: LD_EXP 29
2220: NOT
2221: IFFALSE 2225
// exit ;
2223: GO 2660
// case mpShipments of 1 :
2225: LD_EXP 29
2229: PUSH
2230: LD_INT 1
2232: DOUBLE
2233: EQUAL
2234: IFTRUE 2238
2236: GO 2273
2238: POP
// begin time := 0 0$30 ;
2239: LD_ADDR_VAR 0 5
2243: PUSH
2244: LD_INT 1050
2246: ST_TO_ADDR
// normalTime := 0 0$30 ;
2247: LD_ADDR_VAR 0 6
2251: PUSH
2252: LD_INT 1050
2254: ST_TO_ADDR
// maxTime := 1 1$20 ;
2255: LD_ADDR_VAR 0 8
2259: PUSH
2260: LD_INT 2800
2262: ST_TO_ADDR
// delayTime := 0 0$5 ;
2263: LD_ADDR_VAR 0 7
2267: PUSH
2268: LD_INT 175
2270: ST_TO_ADDR
// end ; 2 :
2271: GO 2403
2273: LD_INT 2
2275: DOUBLE
2276: EQUAL
2277: IFTRUE 2281
2279: GO 2316
2281: POP
// begin time := 0 0$25 ;
2282: LD_ADDR_VAR 0 5
2286: PUSH
2287: LD_INT 875
2289: ST_TO_ADDR
// normalTime := 0 0$25 ;
2290: LD_ADDR_VAR 0 6
2294: PUSH
2295: LD_INT 875
2297: ST_TO_ADDR
// maxTime := 1 1$10 ;
2298: LD_ADDR_VAR 0 8
2302: PUSH
2303: LD_INT 2450
2305: ST_TO_ADDR
// delayTime := 0 0$4 ;
2306: LD_ADDR_VAR 0 7
2310: PUSH
2311: LD_INT 140
2313: ST_TO_ADDR
// end ; 3 :
2314: GO 2403
2316: LD_INT 3
2318: DOUBLE
2319: EQUAL
2320: IFTRUE 2324
2322: GO 2359
2324: POP
// begin time := 0 0$20 ;
2325: LD_ADDR_VAR 0 5
2329: PUSH
2330: LD_INT 700
2332: ST_TO_ADDR
// normalTime := 0 0$20 ;
2333: LD_ADDR_VAR 0 6
2337: PUSH
2338: LD_INT 700
2340: ST_TO_ADDR
// maxTime := 1 1$00 ;
2341: LD_ADDR_VAR 0 8
2345: PUSH
2346: LD_INT 2100
2348: ST_TO_ADDR
// delayTime := 0 0$3 ;
2349: LD_ADDR_VAR 0 7
2353: PUSH
2354: LD_INT 105
2356: ST_TO_ADDR
// end ; 4 :
2357: GO 2403
2359: LD_INT 4
2361: DOUBLE
2362: EQUAL
2363: IFTRUE 2367
2365: GO 2402
2367: POP
// begin time := 0 0$15 ;
2368: LD_ADDR_VAR 0 5
2372: PUSH
2373: LD_INT 525
2375: ST_TO_ADDR
// normalTime := 0 0$15 ;
2376: LD_ADDR_VAR 0 6
2380: PUSH
2381: LD_INT 525
2383: ST_TO_ADDR
// maxTime := 0 0$55 ;
2384: LD_ADDR_VAR 0 8
2388: PUSH
2389: LD_INT 1925
2391: ST_TO_ADDR
// delayTime := 0 0$2 ;
2392: LD_ADDR_VAR 0 7
2396: PUSH
2397: LD_INT 70
2399: ST_TO_ADDR
// end ; end ;
2400: GO 2403
2402: POP
// areas := [ centerCratesArea , westRiverCratesArea , eastRiverCratesArea ] ;
2403: LD_ADDR_VAR 0 4
2407: PUSH
2408: LD_INT 11
2410: PUSH
2411: LD_INT 9
2413: PUSH
2414: LD_INT 10
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: LIST
2421: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 ] ;
2422: LD_ADDR_VAR 0 3
2426: PUSH
2427: LD_INT 1
2429: PUSH
2430: LD_INT 2
2432: PUSH
2433: LD_INT 3
2435: PUSH
2436: LD_INT 4
2438: PUSH
2439: LD_INT 5
2441: PUSH
2442: LD_INT 6
2444: PUSH
2445: EMPTY
2446: LIST
2447: LIST
2448: LIST
2449: LIST
2450: LIST
2451: LIST
2452: ST_TO_ADDR
// for i := 1 to 8 do
2453: LD_ADDR_VAR 0 1
2457: PUSH
2458: DOUBLE
2459: LD_INT 1
2461: DEC
2462: ST_TO_ADDR
2463: LD_INT 8
2465: PUSH
2466: FOR_TO
2467: IFFALSE 2514
// begin if not mpSidePositions [ i ] then
2469: LD_EXP 9
2473: PUSH
2474: LD_VAR 0 1
2478: ARRAY
2479: NOT
2480: IFFALSE 2484
// continue ;
2482: GO 2466
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2484: LD_ADDR_VAR 0 4
2488: PUSH
2489: LD_VAR 0 4
2493: PUSH
2494: LD_VAR 0 3
2498: PUSH
2499: LD_EXP 9
2503: PUSH
2504: LD_VAR 0 1
2508: ARRAY
2509: ARRAY
2510: ADD
2511: ST_TO_ADDR
// end ;
2512: GO 2466
2514: POP
2515: POP
// x := 1 ;
2516: LD_ADDR_VAR 0 2
2520: PUSH
2521: LD_INT 1
2523: ST_TO_ADDR
// repeat wait ( time ) ;
2524: LD_VAR 0 5
2528: PPUSH
2529: CALL_OW 67
// x := Inc ( x ) ;
2533: LD_ADDR_VAR 0 2
2537: PUSH
2538: LD_VAR 0 2
2542: PPUSH
2543: CALL 59922 0 1
2547: ST_TO_ADDR
// if x > 5 then
2548: LD_VAR 0 2
2552: PUSH
2553: LD_INT 5
2555: GREATER
2556: IFFALSE 2566
// x := 1 ;
2558: LD_ADDR_VAR 0 2
2562: PUSH
2563: LD_INT 1
2565: ST_TO_ADDR
// for i in areas do
2566: LD_ADDR_VAR 0 1
2570: PUSH
2571: LD_VAR 0 4
2575: PUSH
2576: FOR_IN
2577: IFFALSE 2616
// begin if GetResourceArea ( i , mat_cans ) < 30 then
2579: LD_VAR 0 1
2583: PPUSH
2584: LD_INT 1
2586: PPUSH
2587: CALL_OW 287
2591: PUSH
2592: LD_INT 30
2594: LESS
2595: IFFALSE 2614
// begin CreateCratesArea ( x , i , true ) ;
2597: LD_VAR 0 2
2601: PPUSH
2602: LD_VAR 0 1
2606: PPUSH
2607: LD_INT 1
2609: PPUSH
2610: CALL_OW 55
// end ; end ;
2614: GO 2576
2616: POP
2617: POP
// time := time + delayTime ;
2618: LD_ADDR_VAR 0 5
2622: PUSH
2623: LD_VAR 0 5
2627: PUSH
2628: LD_VAR 0 7
2632: PLUS
2633: ST_TO_ADDR
// if time > maxTime then
2634: LD_VAR 0 5
2638: PUSH
2639: LD_VAR 0 8
2643: GREATER
2644: IFFALSE 2656
// time := normalTime ;
2646: LD_ADDR_VAR 0 5
2650: PUSH
2651: LD_VAR 0 6
2655: ST_TO_ADDR
// until false ;
2656: LD_INT 0
2658: IFFALSE 2524
// end ;
2660: PPOPN 8
2662: END
// export treeVisited ; every 0 0$2 trigger mpTree do var i , tmp , skill , power , bonus , lua ;
2663: LD_EXP 3
2667: IFFALSE 3116
2669: GO 2671
2671: DISABLE
2672: LD_INT 0
2674: PPUSH
2675: PPUSH
2676: PPUSH
2677: PPUSH
2678: PPUSH
2679: PPUSH
// begin treeVisited := [ ] ;
2680: LD_ADDR_EXP 4
2684: PUSH
2685: EMPTY
2686: ST_TO_ADDR
// power := 1 ;
2687: LD_ADDR_VAR 0 4
2691: PUSH
2692: LD_INT 1
2694: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2695: LD_INT 35
2697: PPUSH
2698: CALL_OW 67
// if tick mod Round ( 20 20$0 div mpTree ) = 0 then
2702: LD_OWVAR 1
2706: PUSH
2707: LD_INT 42000
2709: PUSH
2710: LD_EXP 3
2714: DIV
2715: PPUSH
2716: CALL_OW 574
2720: MOD
2721: PUSH
2722: LD_INT 0
2724: EQUAL
2725: IFFALSE 2742
// power := Inc ( power ) ;
2727: LD_ADDR_VAR 0 4
2731: PUSH
2732: LD_VAR 0 4
2736: PPUSH
2737: CALL 59922 0 1
2741: ST_TO_ADDR
// if power > 10 then
2742: LD_VAR 0 4
2746: PUSH
2747: LD_INT 10
2749: GREATER
2750: IFFALSE 2760
// power := 10 ;
2752: LD_ADDR_VAR 0 4
2756: PUSH
2757: LD_INT 10
2759: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_inarea , TreeArea ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) diff treeVisited ;
2760: LD_ADDR_VAR 0 2
2764: PUSH
2765: LD_INT 95
2767: PUSH
2768: LD_INT 8
2770: PUSH
2771: EMPTY
2772: LIST
2773: LIST
2774: PUSH
2775: LD_INT 21
2777: PUSH
2778: LD_INT 1
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: PUSH
2785: LD_INT 3
2787: PUSH
2788: LD_INT 23
2790: PUSH
2791: LD_INT 0
2793: PUSH
2794: EMPTY
2795: LIST
2796: LIST
2797: PUSH
2798: EMPTY
2799: LIST
2800: LIST
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: LIST
2806: PPUSH
2807: CALL_OW 69
2811: PUSH
2812: LD_EXP 4
2816: DIFF
2817: ST_TO_ADDR
// if tmp then
2818: LD_VAR 0 2
2822: IFFALSE 2987
// begin for i in tmp do
2824: LD_ADDR_VAR 0 1
2828: PUSH
2829: LD_VAR 0 2
2833: PUSH
2834: FOR_IN
2835: IFFALSE 2985
// begin treeVisited := Join ( treeVisited , i ) ;
2837: LD_ADDR_EXP 4
2841: PUSH
2842: LD_EXP 4
2846: PPUSH
2847: LD_VAR 0 1
2851: PPUSH
2852: CALL 58549 0 2
2856: ST_TO_ADDR
// bonus := GetSkill ( i , i mod 4 + 1 ) + power ;
2857: LD_ADDR_VAR 0 5
2861: PUSH
2862: LD_VAR 0 1
2866: PPUSH
2867: LD_VAR 0 1
2871: PUSH
2872: LD_INT 4
2874: MOD
2875: PUSH
2876: LD_INT 1
2878: PLUS
2879: PPUSH
2880: CALL_OW 259
2884: PUSH
2885: LD_VAR 0 4
2889: PLUS
2890: ST_TO_ADDR
// if bonus > 10 then
2891: LD_VAR 0 5
2895: PUSH
2896: LD_INT 10
2898: GREATER
2899: IFFALSE 2909
// bonus := 10 ;
2901: LD_ADDR_VAR 0 5
2905: PUSH
2906: LD_INT 10
2908: ST_TO_ADDR
// skill := i mod 4 + 1 ;
2909: LD_ADDR_VAR 0 3
2913: PUSH
2914: LD_VAR 0 1
2918: PUSH
2919: LD_INT 4
2921: MOD
2922: PUSH
2923: LD_INT 1
2925: PLUS
2926: ST_TO_ADDR
// SetSkill ( i , skill , bonus ) ;
2927: LD_VAR 0 1
2931: PPUSH
2932: LD_VAR 0 3
2936: PPUSH
2937: LD_VAR 0 5
2941: PPUSH
2942: CALL_OW 237
// ToLua ( displayTreeBonusDetails( & i & , & skill & , & power & ) ) ;
2946: LD_STRING displayTreeBonusDetails(
2948: PUSH
2949: LD_VAR 0 1
2953: STR
2954: PUSH
2955: LD_STRING ,
2957: STR
2958: PUSH
2959: LD_VAR 0 3
2963: STR
2964: PUSH
2965: LD_STRING ,
2967: STR
2968: PUSH
2969: LD_VAR 0 4
2973: STR
2974: PUSH
2975: LD_STRING )
2977: STR
2978: PPUSH
2979: CALL_OW 559
// end ;
2983: GO 2834
2985: POP
2986: POP
// end ; lua := LFC_UNITS_CUSTOM_ICON = { ;
2987: LD_ADDR_VAR 0 6
2991: PUSH
2992: LD_STRING LFC_UNITS_CUSTOM_ICON = {
2994: ST_TO_ADDR
// for i := 1 to Count ( treeVisited ) do
2995: LD_ADDR_VAR 0 1
2999: PUSH
3000: DOUBLE
3001: LD_INT 1
3003: DEC
3004: ST_TO_ADDR
3005: LD_EXP 4
3009: PPUSH
3010: CALL 22573 0 1
3014: PUSH
3015: FOR_TO
3016: IFFALSE 3081
// begin lua := lua & { & treeVisited [ i ] & , 13} ;
3018: LD_ADDR_VAR 0 6
3022: PUSH
3023: LD_VAR 0 6
3027: PUSH
3028: LD_STRING {
3030: STR
3031: PUSH
3032: LD_EXP 4
3036: PUSH
3037: LD_VAR 0 1
3041: ARRAY
3042: STR
3043: PUSH
3044: LD_STRING , 13}
3046: STR
3047: ST_TO_ADDR
// if i < Count ( treeVisited ) then
3048: LD_VAR 0 1
3052: PUSH
3053: LD_EXP 4
3057: PPUSH
3058: CALL 22573 0 1
3062: LESS
3063: IFFALSE 3079
// lua := lua & ,  ;
3065: LD_ADDR_VAR 0 6
3069: PUSH
3070: LD_VAR 0 6
3074: PUSH
3075: LD_STRING , 
3077: STR
3078: ST_TO_ADDR
// end ;
3079: GO 3015
3081: POP
3082: POP
// lua := lua & } ;
3083: LD_ADDR_VAR 0 6
3087: PUSH
3088: LD_VAR 0 6
3092: PUSH
3093: LD_STRING }
3095: STR
3096: ST_TO_ADDR
// if treeVisited then
3097: LD_EXP 4
3101: IFFALSE 3112
// ToLua ( lua ) ;
3103: LD_VAR 0 6
3107: PPUSH
3108: CALL_OW 559
// until false ;
3112: LD_INT 0
3114: IFFALSE 2695
// end ; end_of_file
3116: PPOPN 6
3118: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3119: LD_VAR 0 1
3123: PPUSH
3124: CALL 12424 0 1
// Multiplayer_UnitDestroyed ( un ) ;
3128: LD_VAR 0 1
3132: PPUSH
3133: CALL 8831 0 1
// end ;
3137: PPOPN 1
3139: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
3140: LD_VAR 0 1
3144: PPUSH
3145: CALL 12441 0 1
// end ;
3149: PPOPN 1
3151: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
3152: LD_VAR 0 1
3156: PPUSH
3157: CALL 9884 0 1
3161: PPOPN 1
3163: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
3164: LD_VAR 0 1
3168: PPUSH
3169: LD_VAR 0 2
3173: PPUSH
3174: CALL 12482 0 2
3178: PPOPN 2
3180: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
3181: LD_VAR 0 1
3185: PPUSH
3186: LD_VAR 0 2
3190: PPUSH
3191: LD_VAR 0 3
3195: PPUSH
3196: CALL 9937 0 3
3200: PPOPN 3
3202: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
3203: LD_VAR 0 1
3207: PPUSH
3208: LD_VAR 0 2
3212: PPUSH
3213: LD_VAR 0 3
3217: PPUSH
3218: LD_VAR 0 4
3222: PPUSH
3223: LD_VAR 0 5
3227: PPUSH
3228: CALL 10621 0 5
3232: PPOPN 5
3234: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ;
3235: LD_VAR 0 1
3239: PPUSH
3240: LD_VAR 0 2
3244: PPUSH
3245: LD_VAR 0 3
3249: PPUSH
3250: LD_VAR 0 4
3254: PPUSH
3255: CALL 10724 0 4
3259: PPOPN 4
3261: END
// on VehicleConstruction_ApeConsumed ( factory , unit ) do Multiplayer_VehicleConstruction_ApeConsumed ( factory , unit ) ; end_of_file
3262: LD_VAR 0 1
3266: PPUSH
3267: LD_VAR 0 2
3271: PPUSH
3272: CALL 9637 0 2
3276: PPOPN 2
3278: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpCommanders , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
3279: LD_INT 0
3281: PPUSH
3282: PPUSH
// disable ( mpActive ) ;
3283: LD_INT 100
3285: DISABLE_MARKED
// disable ( mpWin ) ;
3286: LD_INT 101
3288: DISABLE_MARKED
// disable ( mpLose ) ;
3289: LD_INT 102
3291: DISABLE_MARKED
// mpGameType := 0 ;
3292: LD_ADDR_EXP 5
3296: PUSH
3297: LD_INT 0
3299: ST_TO_ADDR
// mpGameSettings := [ ] ;
3300: LD_ADDR_EXP 8
3304: PUSH
3305: EMPTY
3306: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
3307: LD_ADDR_EXP 6
3311: PUSH
3312: EMPTY
3313: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
3314: LD_ADDR_EXP 7
3318: PUSH
3319: EMPTY
3320: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
3321: LD_ADDR_EXP 31
3325: PUSH
3326: LD_INT 2
3328: PUSH
3329: LD_INT 2
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: ST_TO_ADDR
// mpOilDeposits := [ ] ;
3336: LD_ADDR_EXP 14
3340: PUSH
3341: EMPTY
3342: ST_TO_ADDR
// mpSibDeposits := [ ] ;
3343: LD_ADDR_EXP 15
3347: PUSH
3348: EMPTY
3349: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
3350: LD_ADDR_EXP 44
3354: PUSH
3355: EMPTY
3356: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
3357: LD_ADDR_EXP 45
3361: PUSH
3362: EMPTY
3363: ST_TO_ADDR
// mpDepots := [ ] ;
3364: LD_ADDR_EXP 16
3368: PUSH
3369: EMPTY
3370: ST_TO_ADDR
// mpBuildings := [ ] ;
3371: LD_ADDR_EXP 19
3375: PUSH
3376: EMPTY
3377: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
3378: LD_ADDR_EXP 20
3382: PUSH
3383: EMPTY
3384: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
3385: LD_ADDR_EXP 21
3389: PUSH
3390: EMPTY
3391: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
3392: LD_ADDR_EXP 22
3396: PUSH
3397: EMPTY
3398: ST_TO_ADDR
// mpStartingResources := [ ] ;
3399: LD_ADDR_EXP 17
3403: PUSH
3404: EMPTY
3405: ST_TO_ADDR
// mpStartPos := [ ] ;
3406: LD_ADDR_EXP 23
3410: PUSH
3411: EMPTY
3412: ST_TO_ADDR
// mpBattleFlag := - 1 ;
3413: LD_ADDR_EXP 24
3417: PUSH
3418: LD_INT 1
3420: NEG
3421: ST_TO_ADDR
// mpBattleFlags := [ ] ;
3422: LD_ADDR_EXP 25
3426: PUSH
3427: EMPTY
3428: ST_TO_ADDR
// mpApemans := [ ] ;
3429: LD_ADDR_EXP 32
3433: PUSH
3434: EMPTY
3435: ST_TO_ADDR
// mpApemansArea := [ ] ;
3436: LD_ADDR_EXP 33
3440: PUSH
3441: EMPTY
3442: ST_TO_ADDR
// mpRespawn := [ ] ;
3443: LD_ADDR_EXP 35
3447: PUSH
3448: EMPTY
3449: ST_TO_ADDR
// mpKingArea := 0 ;
3450: LD_ADDR_EXP 36
3454: PUSH
3455: LD_INT 0
3457: ST_TO_ADDR
// mpPoints := [ ] ;
3458: LD_ADDR_EXP 37
3462: PUSH
3463: EMPTY
3464: ST_TO_ADDR
// mpVehicles := 0 ;
3465: LD_ADDR_EXP 38
3469: PUSH
3470: LD_INT 0
3472: ST_TO_ADDR
// mpShipments := 0 ;
3473: LD_ADDR_EXP 29
3477: PUSH
3478: LD_INT 0
3480: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3481: LD_ADDR_EXP 42
3485: PUSH
3486: EMPTY
3487: PUSH
3488: EMPTY
3489: PUSH
3490: EMPTY
3491: PUSH
3492: EMPTY
3493: PUSH
3494: EMPTY
3495: PUSH
3496: EMPTY
3497: PUSH
3498: EMPTY
3499: PUSH
3500: EMPTY
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: LIST
3510: LIST
3511: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3512: LD_ADDR_EXP 34
3516: PUSH
3517: EMPTY
3518: PUSH
3519: EMPTY
3520: PUSH
3521: EMPTY
3522: PUSH
3523: EMPTY
3524: PUSH
3525: EMPTY
3526: PUSH
3527: EMPTY
3528: PUSH
3529: EMPTY
3530: PUSH
3531: EMPTY
3532: PUSH
3533: EMPTY
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: LIST
3542: ST_TO_ADDR
// mpCommanders := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
3543: LD_ADDR_EXP 43
3547: PUSH
3548: LD_INT 0
3550: PUSH
3551: LD_INT 0
3553: PUSH
3554: LD_INT 0
3556: PUSH
3557: LD_INT 0
3559: PUSH
3560: LD_INT 0
3562: PUSH
3563: LD_INT 0
3565: PUSH
3566: LD_INT 0
3568: PUSH
3569: LD_INT 0
3571: PUSH
3572: EMPTY
3573: LIST
3574: LIST
3575: LIST
3576: LIST
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: ST_TO_ADDR
// mpEmissions := 0 ;
3582: LD_ADDR_EXP 39
3586: PUSH
3587: LD_INT 0
3589: ST_TO_ADDR
// mpTeleports := 0 ;
3590: LD_ADDR_EXP 46
3594: PUSH
3595: LD_INT 0
3597: ST_TO_ADDR
// mpArtifacts := 0 ;
3598: LD_ADDR_EXP 47
3602: PUSH
3603: LD_INT 0
3605: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
3606: LD_ADDR_EXP 48
3610: PUSH
3611: LD_INT 0
3613: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3614: LD_ADDR_EXP 27
3618: PUSH
3619: LD_INT 3
3621: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3622: LD_ADDR_EXP 26
3626: PUSH
3627: LD_INT 15
3629: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3630: LD_ADDR_EXP 40
3634: PUSH
3635: LD_INT 0
3637: ST_TO_ADDR
// mpGameActive := false ;
3638: LD_ADDR_EXP 41
3642: PUSH
3643: LD_INT 0
3645: ST_TO_ADDR
// mpBlockRespThread := false ;
3646: LD_ADDR_EXP 49
3650: PUSH
3651: LD_INT 0
3653: ST_TO_ADDR
// for i := 1 to 32 do
3654: LD_ADDR_VAR 0 2
3658: PUSH
3659: DOUBLE
3660: LD_INT 1
3662: DEC
3663: ST_TO_ADDR
3664: LD_INT 32
3666: PUSH
3667: FOR_TO
3668: IFFALSE 3695
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3670: LD_ADDR_EXP 8
3674: PUSH
3675: LD_EXP 8
3679: PPUSH
3680: LD_VAR 0 2
3684: PPUSH
3685: LD_INT 0
3687: PPUSH
3688: CALL_OW 1
3692: ST_TO_ADDR
3693: GO 3667
3695: POP
3696: POP
// end ;
3697: LD_VAR 0 1
3701: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3702: LD_INT 0
3704: PPUSH
3705: PPUSH
3706: PPUSH
3707: PPUSH
3708: PPUSH
3709: PPUSH
3710: PPUSH
3711: PPUSH
3712: PPUSH
3713: PPUSH
3714: PPUSH
3715: PPUSH
3716: PPUSH
3717: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , GameTypeSurvivalHardcore ] ;
3718: LD_ADDR_VAR 0 14
3722: PUSH
3723: LD_INT 1
3725: PUSH
3726: LD_INT 2
3728: PUSH
3729: LD_INT 3
3731: PUSH
3732: LD_INT 5
3734: PUSH
3735: LD_INT 6
3737: PUSH
3738: LD_INT 7
3740: PUSH
3741: LD_INT 8
3743: PUSH
3744: EMPTY
3745: LIST
3746: LIST
3747: LIST
3748: LIST
3749: LIST
3750: LIST
3751: LIST
3752: ST_TO_ADDR
// for i in gameTypes do
3753: LD_ADDR_VAR 0 2
3757: PUSH
3758: LD_VAR 0 14
3762: PUSH
3763: FOR_IN
3764: IFFALSE 3773
// disable ( i ) ;
3766: LD_VAR 0 2
3770: DISABLE_MARKED
3771: GO 3763
3773: POP
3774: POP
// if Multiplayer then
3775: LD_OWVAR 4
3779: IFFALSE 3963
// begin mpGameType := mp_game_type ;
3781: LD_ADDR_EXP 5
3785: PUSH
3786: LD_OWVAR 6
3790: ST_TO_ADDR
// your_side := mp_player_side ;
3791: LD_ADDR_OWVAR 2
3795: PUSH
3796: LD_OWVAR 7
3800: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
3801: LD_ADDR_EXP 9
3805: PUSH
3806: LD_OWVAR 17
3810: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
3811: LD_ADDR_EXP 10
3815: PUSH
3816: LD_OWVAR 15
3820: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
3821: LD_ADDR_EXP 11
3825: PUSH
3826: LD_OWVAR 16
3830: ST_TO_ADDR
// mpTeams := mp_teams ;
3831: LD_ADDR_EXP 12
3835: PUSH
3836: LD_OWVAR 12
3840: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
3841: LD_ADDR_VAR 0 2
3845: PUSH
3846: DOUBLE
3847: LD_INT 1
3849: DEC
3850: ST_TO_ADDR
3851: LD_EXP 6
3855: PPUSH
3856: CALL 22573 0 1
3860: PUSH
3861: FOR_TO
3862: IFFALSE 3938
// begin setting := mpGameSettingsKeys [ i ] ;
3864: LD_ADDR_VAR 0 12
3868: PUSH
3869: LD_EXP 6
3873: PUSH
3874: LD_VAR 0 2
3878: ARRAY
3879: ST_TO_ADDR
// if setting then
3880: LD_VAR 0 12
3884: IFFALSE 3936
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
3886: LD_ADDR_EXP 8
3890: PUSH
3891: LD_EXP 8
3895: PPUSH
3896: LD_VAR 0 2
3900: PPUSH
3901: LD_EXP 7
3905: PUSH
3906: LD_VAR 0 2
3910: ARRAY
3911: PUSH
3912: LD_VAR 0 2
3916: PUSH
3917: LD_INT 1
3919: MINUS
3920: PPUSH
3921: CALL_OW 426
3925: PUSH
3926: LD_INT 1
3928: PLUS
3929: ARRAY
3930: PPUSH
3931: CALL_OW 1
3935: ST_TO_ADDR
// end ;
3936: GO 3861
3938: POP
3939: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
3940: LD_ADDR_EXP 13
3944: PUSH
3945: LD_EXP 10
3949: PUSH
3950: LD_INT 0
3952: PUSH
3953: EMPTY
3954: LIST
3955: DIFF
3956: PUSH
3957: LD_INT 1
3959: GREATER
3960: ST_TO_ADDR
// end else
3961: GO 3963
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
3963: LD_EXP 5
3967: PPUSH
3968: CALL 841 0 1
// if Count ( mpMarkedAreas ) then
3972: LD_EXP 20
3976: PPUSH
3977: CALL 22573 0 1
3981: IFFALSE 4012
// begin for i in mpMarkedAreas do
3983: LD_ADDR_VAR 0 2
3987: PUSH
3988: LD_EXP 20
3992: PUSH
3993: FOR_IN
3994: IFFALSE 4010
// SetAreaMapShow ( i , 0 ) ;
3996: LD_VAR 0 2
4000: PPUSH
4001: LD_INT 0
4003: PPUSH
4004: CALL_OW 424
4008: GO 3993
4010: POP
4011: POP
// end ; for i := 1 to 8 do
4012: LD_ADDR_VAR 0 2
4016: PUSH
4017: DOUBLE
4018: LD_INT 1
4020: DEC
4021: ST_TO_ADDR
4022: LD_INT 8
4024: PUSH
4025: FOR_TO
4026: IFFALSE 5485
// begin if not mpSidePositions [ i ] then
4028: LD_EXP 9
4032: PUSH
4033: LD_VAR 0 2
4037: ARRAY
4038: NOT
4039: IFFALSE 4043
// continue ;
4041: GO 4025
// side := i ;
4043: LD_ADDR_VAR 0 7
4047: PUSH
4048: LD_VAR 0 2
4052: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
4053: LD_ADDR_VAR 0 9
4057: PUSH
4058: LD_EXP 11
4062: PUSH
4063: LD_VAR 0 2
4067: ARRAY
4068: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
4069: LD_ADDR_VAR 0 8
4073: PUSH
4074: LD_EXP 9
4078: PUSH
4079: LD_VAR 0 2
4083: ARRAY
4084: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
4085: LD_EXP 14
4089: PPUSH
4090: CALL 22573 0 1
4094: IFFALSE 4171
// begin for j in mpOilDeposits [ pos ] do
4096: LD_ADDR_VAR 0 3
4100: PUSH
4101: LD_EXP 14
4105: PUSH
4106: LD_VAR 0 8
4110: ARRAY
4111: PUSH
4112: FOR_IN
4113: IFFALSE 4169
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
4115: LD_VAR 0 3
4119: PUSH
4120: LD_INT 1
4122: ARRAY
4123: PPUSH
4124: LD_VAR 0 3
4128: PUSH
4129: LD_INT 2
4131: ARRAY
4132: PPUSH
4133: LD_INT 2
4135: PPUSH
4136: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
4140: LD_VAR 0 3
4144: PUSH
4145: LD_INT 1
4147: ARRAY
4148: PPUSH
4149: LD_VAR 0 3
4153: PUSH
4154: LD_INT 2
4156: ARRAY
4157: PPUSH
4158: LD_VAR 0 7
4162: PPUSH
4163: CALL_OW 441
// end ;
4167: GO 4112
4169: POP
4170: POP
// end ; if Count ( mpSibDeposits ) then
4171: LD_EXP 15
4175: PPUSH
4176: CALL 22573 0 1
4180: IFFALSE 4257
// begin for j in mpSibDeposits [ pos ] do
4182: LD_ADDR_VAR 0 3
4186: PUSH
4187: LD_EXP 15
4191: PUSH
4192: LD_VAR 0 8
4196: ARRAY
4197: PUSH
4198: FOR_IN
4199: IFFALSE 4255
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
4201: LD_VAR 0 3
4205: PUSH
4206: LD_INT 1
4208: ARRAY
4209: PPUSH
4210: LD_VAR 0 3
4214: PUSH
4215: LD_INT 2
4217: ARRAY
4218: PPUSH
4219: LD_INT 3
4221: PPUSH
4222: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
4226: LD_VAR 0 3
4230: PUSH
4231: LD_INT 1
4233: ARRAY
4234: PPUSH
4235: LD_VAR 0 3
4239: PUSH
4240: LD_INT 2
4242: ARRAY
4243: PPUSH
4244: LD_VAR 0 7
4248: PPUSH
4249: CALL_OW 441
// end ;
4253: GO 4198
4255: POP
4256: POP
// end ; InitBc ;
4257: CALL_OW 21
// InitUc ;
4261: CALL_OW 18
// uc_side := side ;
4265: LD_ADDR_OWVAR 20
4269: PUSH
4270: LD_VAR 0 7
4274: ST_TO_ADDR
// uc_nation := nation ;
4275: LD_ADDR_OWVAR 21
4279: PUSH
4280: LD_VAR 0 9
4284: ST_TO_ADDR
// if mpBattleFlag > - 1 then
4285: LD_EXP 24
4289: PUSH
4290: LD_INT 1
4292: NEG
4293: GREATER
4294: IFFALSE 4453
// begin x := mpStartPos [ pos ] [ 1 ] ;
4296: LD_ADDR_VAR 0 5
4300: PUSH
4301: LD_EXP 23
4305: PUSH
4306: LD_VAR 0 8
4310: ARRAY
4311: PUSH
4312: LD_INT 1
4314: ARRAY
4315: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4316: LD_ADDR_VAR 0 6
4320: PUSH
4321: LD_EXP 23
4325: PUSH
4326: LD_VAR 0 8
4330: ARRAY
4331: PUSH
4332: LD_INT 2
4334: ARRAY
4335: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4336: LD_VAR 0 5
4340: PPUSH
4341: LD_VAR 0 6
4345: PPUSH
4346: LD_INT 12
4348: PPUSH
4349: LD_INT 2
4351: PPUSH
4352: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
4356: LD_ADDR_EXP 25
4360: PUSH
4361: LD_EXP 25
4365: PPUSH
4366: LD_VAR 0 7
4370: PPUSH
4371: LD_VAR 0 7
4375: PPUSH
4376: LD_VAR 0 5
4380: PPUSH
4381: LD_VAR 0 6
4385: PPUSH
4386: LD_INT 1
4388: PUSH
4389: LD_INT 100
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: PUSH
4396: LD_INT 2
4398: PUSH
4399: LD_INT 70
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: PUSH
4406: LD_INT 3
4408: PUSH
4409: LD_INT 40
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: PUSH
4416: LD_INT 10
4418: PUSH
4419: LD_INT 25
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: PUSH
4426: LD_INT 20
4428: PUSH
4429: LD_INT 100
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: PPUSH
4443: CALL_OW 418
4447: PPUSH
4448: CALL_OW 1
4452: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
4453: LD_EXP 16
4457: PPUSH
4458: CALL 22573 0 1
4462: IFFALSE 4661
// begin if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore , GameTypeArmsRace , GameTypeArmsArtifact ] then
4464: LD_EXP 5
4468: PUSH
4469: LD_INT 2
4471: PUSH
4472: LD_INT 8
4474: PUSH
4475: LD_INT 6
4477: PUSH
4478: LD_INT 7
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: LIST
4485: LIST
4486: IN
4487: IFFALSE 4507
// begin bc_level := 10 ;
4489: LD_ADDR_OWVAR 43
4493: PUSH
4494: LD_INT 10
4496: ST_TO_ADDR
// bc_type := b_warehouse ;
4497: LD_ADDR_OWVAR 42
4501: PUSH
4502: LD_INT 1
4504: ST_TO_ADDR
// end else
4505: GO 4523
// begin bc_level := 0 ;
4507: LD_ADDR_OWVAR 43
4511: PUSH
4512: LD_INT 0
4514: ST_TO_ADDR
// bc_type := b_depot ;
4515: LD_ADDR_OWVAR 42
4519: PUSH
4520: LD_INT 0
4522: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
4523: LD_ADDR_VAR 0 4
4527: PUSH
4528: LD_EXP 16
4532: PUSH
4533: LD_VAR 0 8
4537: ARRAY
4538: PUSH
4539: LD_INT 1
4541: ARRAY
4542: PPUSH
4543: LD_EXP 16
4547: PUSH
4548: LD_VAR 0 8
4552: ARRAY
4553: PUSH
4554: LD_INT 2
4556: ARRAY
4557: PPUSH
4558: LD_EXP 16
4562: PUSH
4563: LD_VAR 0 8
4567: ARRAY
4568: PUSH
4569: LD_INT 3
4571: ARRAY
4572: PPUSH
4573: CALL_OW 47
4577: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
4578: LD_VAR 0 4
4582: PPUSH
4583: LD_STRING @
4585: PUSH
4586: LD_VAR 0 7
4590: STR
4591: PPUSH
4592: CALL_OW 500
// if Count ( mpStartingResources ) then
4596: LD_EXP 17
4600: PPUSH
4601: CALL 22573 0 1
4605: IFFALSE 4659
// begin for j := 1 to mpStartingResources do
4607: LD_ADDR_VAR 0 3
4611: PUSH
4612: DOUBLE
4613: LD_INT 1
4615: DEC
4616: ST_TO_ADDR
4617: LD_EXP 17
4621: PUSH
4622: FOR_TO
4623: IFFALSE 4657
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
4625: LD_VAR 0 4
4629: PPUSH
4630: CALL_OW 274
4634: PPUSH
4635: LD_VAR 0 3
4639: PPUSH
4640: LD_EXP 17
4644: PUSH
4645: LD_VAR 0 3
4649: ARRAY
4650: PPUSH
4651: CALL_OW 277
4655: GO 4622
4657: POP
4658: POP
// end ; end else
4659: GO 4868
// if Count ( mpStartingResources ) then
4661: LD_EXP 17
4665: PPUSH
4666: CALL 22573 0 1
4670: IFFALSE 4868
// begin x := mpStartPos [ pos ] [ 1 ] ;
4672: LD_ADDR_VAR 0 5
4676: PUSH
4677: LD_EXP 23
4681: PUSH
4682: LD_VAR 0 8
4686: ARRAY
4687: PUSH
4688: LD_INT 1
4690: ARRAY
4691: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4692: LD_ADDR_VAR 0 6
4696: PUSH
4697: LD_EXP 23
4701: PUSH
4702: LD_VAR 0 8
4706: ARRAY
4707: PUSH
4708: LD_INT 2
4710: ARRAY
4711: ST_TO_ADDR
// for j := 1 to mpStartingResources do
4712: LD_ADDR_VAR 0 3
4716: PUSH
4717: DOUBLE
4718: LD_INT 1
4720: DEC
4721: ST_TO_ADDR
4722: LD_EXP 17
4726: PUSH
4727: FOR_TO
4728: IFFALSE 4866
// begin resources := mpStartingResources [ j ] ;
4730: LD_ADDR_VAR 0 13
4734: PUSH
4735: LD_EXP 17
4739: PUSH
4740: LD_VAR 0 3
4744: ARRAY
4745: ST_TO_ADDR
// if resources = 0 then
4746: LD_VAR 0 13
4750: PUSH
4751: LD_INT 0
4753: EQUAL
4754: IFFALSE 4758
// continue ;
4756: GO 4727
// repeat if resources >= 50 then
4758: LD_VAR 0 13
4762: PUSH
4763: LD_INT 50
4765: GREATEREQUAL
4766: IFFALSE 4812
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
4768: LD_VAR 0 3
4772: PPUSH
4773: LD_INT 5
4775: PPUSH
4776: LD_VAR 0 5
4780: PPUSH
4781: LD_VAR 0 6
4785: PPUSH
4786: LD_INT 6
4788: PPUSH
4789: LD_INT 0
4791: PPUSH
4792: CALL_OW 60
// resources := resources - 50 ;
4796: LD_ADDR_VAR 0 13
4800: PUSH
4801: LD_VAR 0 13
4805: PUSH
4806: LD_INT 50
4808: MINUS
4809: ST_TO_ADDR
// end else
4810: GO 4854
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
4812: LD_VAR 0 3
4816: PPUSH
4817: LD_VAR 0 13
4821: PUSH
4822: LD_INT 10
4824: DIV
4825: PPUSH
4826: LD_VAR 0 5
4830: PPUSH
4831: LD_VAR 0 6
4835: PPUSH
4836: LD_INT 6
4838: PPUSH
4839: LD_INT 0
4841: PPUSH
4842: CALL_OW 60
// resources := 0 ;
4846: LD_ADDR_VAR 0 13
4850: PUSH
4851: LD_INT 0
4853: ST_TO_ADDR
// end ; until resources <= 0 ;
4854: LD_VAR 0 13
4858: PUSH
4859: LD_INT 0
4861: LESSEQUAL
4862: IFFALSE 4758
// end ;
4864: GO 4727
4866: POP
4867: POP
// end ; if Count ( mpBuildings ) and not mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] then
4868: LD_EXP 19
4872: PPUSH
4873: CALL 22573 0 1
4877: IFFALSE 4897
4879: PUSH
4880: LD_EXP 5
4884: PUSH
4885: LD_INT 2
4887: PUSH
4888: LD_INT 8
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: IN
4895: NOT
4896: AND
4897: IFFALSE 4975
// begin for j in mpBuildings [ pos ] do
4899: LD_ADDR_VAR 0 3
4903: PUSH
4904: LD_EXP 19
4908: PUSH
4909: LD_VAR 0 8
4913: ARRAY
4914: PUSH
4915: FOR_IN
4916: IFFALSE 4973
// begin bc_level := 0 ;
4918: LD_ADDR_OWVAR 43
4922: PUSH
4923: LD_INT 0
4925: ST_TO_ADDR
// bc_type := j [ 1 ] ;
4926: LD_ADDR_OWVAR 42
4930: PUSH
4931: LD_VAR 0 3
4935: PUSH
4936: LD_INT 1
4938: ARRAY
4939: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
4940: LD_VAR 0 3
4944: PUSH
4945: LD_INT 2
4947: ARRAY
4948: PPUSH
4949: LD_VAR 0 3
4953: PUSH
4954: LD_INT 3
4956: ARRAY
4957: PPUSH
4958: LD_VAR 0 3
4962: PUSH
4963: LD_INT 4
4965: ARRAY
4966: PPUSH
4967: CALL_OW 47
// end ;
4971: GO 4915
4973: POP
4974: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
4975: LD_EXP 28
4979: IFFALSE 4999
4981: PUSH
4982: LD_INT 20
4984: PPUSH
4985: LD_VAR 0 7
4989: PPUSH
4990: CALL_OW 321
4994: PUSH
4995: LD_INT 1
4997: EQUAL
4998: AND
4999: IFFALSE 5016
// SetTech ( tech_SibDet , side , state_researched ) ;
5001: LD_INT 20
5003: PPUSH
5004: LD_VAR 0 7
5008: PPUSH
5009: LD_INT 2
5011: PPUSH
5012: CALL_OW 322
// if not mpArtifacts then
5016: LD_EXP 47
5020: NOT
5021: IFFALSE 5038
// SetTech ( tech_artifact , side , state_disabled ) ;
5023: LD_INT 24
5025: PPUSH
5026: LD_VAR 0 7
5030: PPUSH
5031: LD_INT 0
5033: PPUSH
5034: CALL_OW 322
// if mpSibBomb = 1 then
5038: LD_EXP 30
5042: PUSH
5043: LD_INT 1
5045: EQUAL
5046: IFFALSE 5065
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
5048: LD_INT 25
5050: PPUSH
5051: LD_VAR 0 7
5055: PPUSH
5056: LD_INT 1
5058: PPUSH
5059: CALL_OW 322
// end else
5063: GO 5080
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
5065: LD_INT 25
5067: PPUSH
5068: LD_VAR 0 7
5072: PPUSH
5073: LD_INT 0
5075: PPUSH
5076: CALL_OW 322
// end ; if mpVehicles then
5080: LD_EXP 38
5084: IFFALSE 5183
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
5086: LD_ADDR_VAR 0 3
5090: PUSH
5091: LD_VAR 0 7
5095: PPUSH
5096: LD_VAR 0 9
5100: PPUSH
5101: LD_EXP 38
5105: PPUSH
5106: CALL 6442 0 3
5110: PUSH
5111: FOR_IN
5112: IFFALSE 5181
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
5114: LD_VAR 0 3
5118: PPUSH
5119: LD_INT 0
5121: PPUSH
5122: LD_INT 5
5124: PPUSH
5125: CALL_OW 12
5129: PPUSH
5130: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
5134: LD_VAR 0 3
5138: PPUSH
5139: LD_EXP 23
5143: PUSH
5144: LD_VAR 0 8
5148: ARRAY
5149: PUSH
5150: LD_INT 1
5152: ARRAY
5153: PPUSH
5154: LD_EXP 23
5158: PUSH
5159: LD_VAR 0 8
5163: ARRAY
5164: PUSH
5165: LD_INT 2
5167: ARRAY
5168: PPUSH
5169: LD_INT 12
5171: PPUSH
5172: LD_INT 0
5174: PPUSH
5175: CALL_OW 50
// end ;
5179: GO 5111
5181: POP
5182: POP
// end ; uc_nation := nation ;
5183: LD_ADDR_OWVAR 21
5187: PUSH
5188: LD_VAR 0 9
5192: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
5193: LD_EXP 5
5197: PUSH
5198: LD_INT 6
5200: PUSH
5201: LD_INT 7
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: IN
5208: IFFALSE 5233
5210: PUSH
5211: LD_EXP 9
5215: PUSH
5216: LD_VAR 0 2
5220: ARRAY
5221: PUSH
5222: LD_INT 1
5224: PUSH
5225: LD_INT 2
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: IN
5232: AND
5233: IFFALSE 5281
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
5235: LD_ADDR_VAR 0 11
5239: PUSH
5240: LD_VAR 0 7
5244: PPUSH
5245: LD_VAR 0 9
5249: PPUSH
5250: LD_EXP 26
5254: PUSH
5255: LD_EXP 26
5259: PUSH
5260: LD_INT 2
5262: DIV
5263: PLUS
5264: PPUSH
5265: LD_EXP 27
5269: PUSH
5270: LD_INT 1
5272: PLUS
5273: PPUSH
5274: CALL 5897 0 4
5278: ST_TO_ADDR
5279: GO 5311
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
5281: LD_ADDR_VAR 0 11
5285: PUSH
5286: LD_VAR 0 7
5290: PPUSH
5291: LD_VAR 0 9
5295: PPUSH
5296: LD_EXP 26
5300: PPUSH
5301: LD_EXP 27
5305: PPUSH
5306: CALL 5897 0 4
5310: ST_TO_ADDR
// for j in team do
5311: LD_ADDR_VAR 0 3
5315: PUSH
5316: LD_VAR 0 11
5320: PUSH
5321: FOR_IN
5322: IFFALSE 5371
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
5324: LD_VAR 0 3
5328: PPUSH
5329: LD_EXP 23
5333: PUSH
5334: LD_VAR 0 8
5338: ARRAY
5339: PUSH
5340: LD_INT 1
5342: ARRAY
5343: PPUSH
5344: LD_EXP 23
5348: PUSH
5349: LD_VAR 0 8
5353: ARRAY
5354: PUSH
5355: LD_INT 2
5357: ARRAY
5358: PPUSH
5359: LD_INT 12
5361: PPUSH
5362: LD_INT 0
5364: PPUSH
5365: CALL_OW 50
5369: GO 5321
5371: POP
5372: POP
// if mpApemans then
5373: LD_EXP 32
5377: IFFALSE 5483
// begin for j := 1 to mpApemans do
5379: LD_ADDR_VAR 0 3
5383: PUSH
5384: DOUBLE
5385: LD_INT 1
5387: DEC
5388: ST_TO_ADDR
5389: LD_EXP 32
5393: PUSH
5394: FOR_TO
5395: IFFALSE 5481
// begin PrepareApeman ( - 5 ) ;
5397: LD_INT 5
5399: NEG
5400: PPUSH
5401: CALL 54676 0 1
// ape := CreateHuman ;
5405: LD_ADDR_VAR 0 10
5409: PUSH
5410: CALL_OW 44
5414: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
5415: LD_ADDR_EXP 34
5419: PUSH
5420: LD_EXP 34
5424: PPUSH
5425: LD_VAR 0 8
5429: PPUSH
5430: LD_EXP 34
5434: PUSH
5435: LD_VAR 0 8
5439: ARRAY
5440: PPUSH
5441: LD_VAR 0 10
5445: PPUSH
5446: CALL 58549 0 2
5450: PPUSH
5451: CALL_OW 1
5455: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
5456: LD_VAR 0 10
5460: PPUSH
5461: LD_EXP 33
5465: PUSH
5466: LD_VAR 0 8
5470: ARRAY
5471: PPUSH
5472: LD_INT 0
5474: PPUSH
5475: CALL_OW 49
// end ;
5479: GO 5394
5481: POP
5482: POP
// end ; end ;
5483: GO 4025
5485: POP
5486: POP
// if not mpTeamGame then
5487: LD_EXP 13
5491: NOT
5492: IFFALSE 5590
// begin for i := 1 to 8 do
5494: LD_ADDR_VAR 0 2
5498: PUSH
5499: DOUBLE
5500: LD_INT 1
5502: DEC
5503: ST_TO_ADDR
5504: LD_INT 8
5506: PUSH
5507: FOR_TO
5508: IFFALSE 5586
// for j := 1 to 8 do
5510: LD_ADDR_VAR 0 3
5514: PUSH
5515: DOUBLE
5516: LD_INT 1
5518: DEC
5519: ST_TO_ADDR
5520: LD_INT 8
5522: PUSH
5523: FOR_TO
5524: IFFALSE 5582
// if i <> j then
5526: LD_VAR 0 2
5530: PUSH
5531: LD_VAR 0 3
5535: NONEQUAL
5536: IFFALSE 5560
// SetAttitude ( i , j , att_neutral , true ) else
5538: LD_VAR 0 2
5542: PPUSH
5543: LD_VAR 0 3
5547: PPUSH
5548: LD_INT 0
5550: PPUSH
5551: LD_INT 1
5553: PPUSH
5554: CALL_OW 80
5558: GO 5580
// SetAttitude ( i , j , att_friend , true ) ;
5560: LD_VAR 0 2
5564: PPUSH
5565: LD_VAR 0 3
5569: PPUSH
5570: LD_INT 1
5572: PPUSH
5573: LD_INT 1
5575: PPUSH
5576: CALL_OW 80
5580: GO 5523
5582: POP
5583: POP
5584: GO 5507
5586: POP
5587: POP
// end else
5588: GO 5765
// begin if mpSharedVision then
5590: LD_EXP 18
5594: IFFALSE 5659
// begin for i in mpTeams do
5596: LD_ADDR_VAR 0 2
5600: PUSH
5601: LD_EXP 12
5605: PUSH
5606: FOR_IN
5607: IFFALSE 5657
// for j := 2 to i do
5609: LD_ADDR_VAR 0 3
5613: PUSH
5614: DOUBLE
5615: LD_INT 2
5617: DEC
5618: ST_TO_ADDR
5619: LD_VAR 0 2
5623: PUSH
5624: FOR_TO
5625: IFFALSE 5653
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
5627: LD_VAR 0 2
5631: PUSH
5632: LD_VAR 0 3
5636: ARRAY
5637: PPUSH
5638: LD_VAR 0 2
5642: PUSH
5643: LD_INT 1
5645: ARRAY
5646: PPUSH
5647: CALL_OW 343
5651: GO 5624
5653: POP
5654: POP
5655: GO 5606
5657: POP
5658: POP
// end ; for i := 1 to 8 do
5659: LD_ADDR_VAR 0 2
5663: PUSH
5664: DOUBLE
5665: LD_INT 1
5667: DEC
5668: ST_TO_ADDR
5669: LD_INT 8
5671: PUSH
5672: FOR_TO
5673: IFFALSE 5763
// for j := 1 to 8 do
5675: LD_ADDR_VAR 0 3
5679: PUSH
5680: DOUBLE
5681: LD_INT 1
5683: DEC
5684: ST_TO_ADDR
5685: LD_INT 8
5687: PUSH
5688: FOR_TO
5689: IFFALSE 5759
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
5691: LD_EXP 10
5695: PUSH
5696: LD_VAR 0 2
5700: ARRAY
5701: PUSH
5702: LD_EXP 10
5706: PUSH
5707: LD_VAR 0 3
5711: ARRAY
5712: EQUAL
5713: IFFALSE 5737
// SetAttitude ( i , j , att_friend , true ) else
5715: LD_VAR 0 2
5719: PPUSH
5720: LD_VAR 0 3
5724: PPUSH
5725: LD_INT 1
5727: PPUSH
5728: LD_INT 1
5730: PPUSH
5731: CALL_OW 80
5735: GO 5757
// SetAttitude ( i , j , att_enemy , true ) ;
5737: LD_VAR 0 2
5741: PPUSH
5742: LD_VAR 0 3
5746: PPUSH
5747: LD_INT 2
5749: PPUSH
5750: LD_INT 1
5752: PPUSH
5753: CALL_OW 80
5757: GO 5688
5759: POP
5760: POP
5761: GO 5672
5763: POP
5764: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5765: LD_ADDR_OWVAR 71
5769: PUSH
5770: LD_EXP 11
5774: PUSH
5775: LD_OWVAR 2
5779: ARRAY
5780: ST_TO_ADDR
// if IAmSpec then
5781: CALL_OW 531
5785: IFFALSE 5826
// begin FogOff ( true ) ;
5787: LD_INT 1
5789: PPUSH
5790: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
5794: LD_EXP 31
5798: PUSH
5799: LD_INT 1
5801: ARRAY
5802: PUSH
5803: LD_INT 2
5805: DIV
5806: PPUSH
5807: LD_EXP 31
5811: PUSH
5812: LD_INT 2
5814: ARRAY
5815: PUSH
5816: LD_INT 2
5818: DIV
5819: PPUSH
5820: CALL_OW 86
// end else
5824: GO 5872
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
5826: LD_EXP 23
5830: PUSH
5831: LD_EXP 9
5835: PUSH
5836: LD_OWVAR 2
5840: ARRAY
5841: ARRAY
5842: PUSH
5843: LD_INT 1
5845: ARRAY
5846: PPUSH
5847: LD_EXP 23
5851: PUSH
5852: LD_EXP 9
5856: PUSH
5857: LD_OWVAR 2
5861: ARRAY
5862: ARRAY
5863: PUSH
5864: LD_INT 2
5866: ARRAY
5867: PPUSH
5868: CALL_OW 86
// end ; BeginBuildUp ;
5872: CALL 6975 0 0
// enable ( mpActive ) ;
5876: LD_INT 100
5878: ENABLE_MARKED
// enable ( mpGameType ) ;
5879: LD_EXP 5
5883: ENABLE_MARKED
// mpGameActive := true ;
5884: LD_ADDR_EXP 41
5888: PUSH
5889: LD_INT 1
5891: ST_TO_ADDR
// end ;
5892: LD_VAR 0 1
5896: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class , commander ; begin
5897: LD_INT 0
5899: PPUSH
5900: PPUSH
5901: PPUSH
5902: PPUSH
5903: PPUSH
// result := [ ] ;
5904: LD_ADDR_VAR 0 5
5908: PUSH
5909: EMPTY
5910: ST_TO_ADDR
// class := class_soldier ;
5911: LD_ADDR_VAR 0 8
5915: PUSH
5916: LD_INT 1
5918: ST_TO_ADDR
// uc_side := side ;
5919: LD_ADDR_OWVAR 20
5923: PUSH
5924: LD_VAR 0 1
5928: ST_TO_ADDR
// uc_nation := nation ;
5929: LD_ADDR_OWVAR 21
5933: PUSH
5934: LD_VAR 0 2
5938: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
5939: LD_ADDR_OWVAR 26
5943: PUSH
5944: LD_OWVAR 19
5948: PUSH
5949: LD_VAR 0 1
5953: ARRAY
5954: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
5955: LD_INT 1
5957: PPUSH
5958: LD_INT 2
5960: PPUSH
5961: CALL_OW 12
5965: PPUSH
5966: LD_VAR 0 8
5970: PPUSH
5971: LD_VAR 0 4
5975: PUSH
5976: LD_INT 2
5978: PLUS
5979: PPUSH
5980: CALL_OW 380
// hc_importance := 105 ;
5984: LD_ADDR_OWVAR 32
5988: PUSH
5989: LD_INT 105
5991: ST_TO_ADDR
// if Multiplayer then
5992: LD_OWVAR 4
5996: IFFALSE 6036
// begin hc_gallery := MULTIAVATARS ;
5998: LD_ADDR_OWVAR 33
6002: PUSH
6003: LD_STRING MULTIAVATARS
6005: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
6006: LD_ADDR_OWVAR 34
6010: PUSH
6011: LD_VAR 0 1
6015: PPUSH
6016: CALL_OW 525
6020: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
6021: LD_ADDR_OWVAR 27
6025: PUSH
6026: LD_VAR 0 1
6030: PPUSH
6031: CALL_OW 526
6035: ST_TO_ADDR
// end ; commander := CreateHuman ;
6036: LD_ADDR_VAR 0 9
6040: PUSH
6041: CALL_OW 44
6045: ST_TO_ADDR
// result := Join ( result , commander ) ;
6046: LD_ADDR_VAR 0 5
6050: PUSH
6051: LD_VAR 0 5
6055: PPUSH
6056: LD_VAR 0 9
6060: PPUSH
6061: CALL 58549 0 2
6065: ST_TO_ADDR
// mpCommanders := Replace ( mpCommanders , side , commander ) ;
6066: LD_ADDR_EXP 43
6070: PUSH
6071: LD_EXP 43
6075: PPUSH
6076: LD_VAR 0 1
6080: PPUSH
6081: LD_VAR 0 9
6085: PPUSH
6086: CALL_OW 1
6090: ST_TO_ADDR
// if mpTeamPreset then
6091: LD_LOC 1
6095: IFFALSE 6191
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
6097: LD_LOC 1
6101: PUSH
6102: LD_INT 1
6104: ARRAY
6105: PPUSH
6106: LD_VAR 0 5
6110: PUSH
6111: LD_VAR 0 5
6115: ARRAY
6116: PPUSH
6117: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
6121: LD_VAR 0 5
6125: PUSH
6126: LD_VAR 0 5
6130: ARRAY
6131: PPUSH
6132: LD_INT 1
6134: PPUSH
6135: LD_LOC 1
6139: PUSH
6140: LD_INT 1
6142: ARRAY
6143: PPUSH
6144: LD_INT 1
6146: PPUSH
6147: CALL_OW 260
6151: PPUSH
6152: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
6156: LD_VAR 0 5
6160: PUSH
6161: LD_VAR 0 5
6165: ARRAY
6166: PPUSH
6167: LD_INT 2
6169: PPUSH
6170: LD_LOC 1
6174: PUSH
6175: LD_INT 1
6177: ARRAY
6178: PPUSH
6179: LD_INT 2
6181: PPUSH
6182: CALL_OW 260
6186: PPUSH
6187: CALL_OW 239
// end ; InitHc_All ( ) ;
6191: CALL_OW 584
// class := 2 ;
6195: LD_ADDR_VAR 0 8
6199: PUSH
6200: LD_INT 2
6202: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
6203: LD_ADDR_VAR 0 6
6207: PUSH
6208: DOUBLE
6209: LD_INT 1
6211: DEC
6212: ST_TO_ADDR
6213: LD_VAR 0 3
6217: PUSH
6218: LD_INT 1
6220: MINUS
6221: PUSH
6222: FOR_TO
6223: IFFALSE 6418
// begin PrepareHuman ( false , class , skill ) ;
6225: LD_INT 0
6227: PPUSH
6228: LD_VAR 0 8
6232: PPUSH
6233: LD_VAR 0 4
6237: PPUSH
6238: CALL_OW 380
// un := CreateHuman ;
6242: LD_ADDR_VAR 0 7
6246: PUSH
6247: CALL_OW 44
6251: ST_TO_ADDR
// result := Join ( result , un ) ;
6252: LD_ADDR_VAR 0 5
6256: PUSH
6257: LD_VAR 0 5
6261: PPUSH
6262: LD_VAR 0 7
6266: PPUSH
6267: CALL 58549 0 2
6271: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
6272: LD_LOC 1
6276: PPUSH
6277: CALL 22573 0 1
6281: PUSH
6282: LD_VAR 0 3
6286: GREATEREQUAL
6287: IFFALSE 6383
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
6289: LD_LOC 1
6293: PUSH
6294: LD_VAR 0 6
6298: PUSH
6299: LD_INT 1
6301: PLUS
6302: ARRAY
6303: PPUSH
6304: LD_VAR 0 7
6308: PPUSH
6309: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
6313: LD_VAR 0 7
6317: PPUSH
6318: LD_INT 1
6320: PPUSH
6321: LD_LOC 1
6325: PUSH
6326: LD_VAR 0 6
6330: PUSH
6331: LD_INT 1
6333: PLUS
6334: ARRAY
6335: PPUSH
6336: LD_INT 1
6338: PPUSH
6339: CALL_OW 260
6343: PPUSH
6344: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
6348: LD_VAR 0 7
6352: PPUSH
6353: LD_INT 2
6355: PPUSH
6356: LD_LOC 1
6360: PUSH
6361: LD_VAR 0 6
6365: PUSH
6366: LD_INT 1
6368: PLUS
6369: ARRAY
6370: PPUSH
6371: LD_INT 2
6373: PPUSH
6374: CALL_OW 260
6378: PPUSH
6379: CALL_OW 239
// end ; class := Inc ( class ) ;
6383: LD_ADDR_VAR 0 8
6387: PUSH
6388: LD_VAR 0 8
6392: PPUSH
6393: CALL 59922 0 1
6397: ST_TO_ADDR
// if class = 5 then
6398: LD_VAR 0 8
6402: PUSH
6403: LD_INT 5
6405: EQUAL
6406: IFFALSE 6416
// class := 1 ;
6408: LD_ADDR_VAR 0 8
6412: PUSH
6413: LD_INT 1
6415: ST_TO_ADDR
// end ;
6416: GO 6222
6418: POP
6419: POP
// if not mpTeamPreset then
6420: LD_LOC 1
6424: NOT
6425: IFFALSE 6437
// mpTeamPreset := result ;
6427: LD_ADDR_LOC 1
6431: PUSH
6432: LD_VAR 0 5
6436: ST_TO_ADDR
// end ;
6437: LD_VAR 0 5
6441: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
6442: LD_INT 0
6444: PPUSH
6445: PPUSH
// result := [ ] ;
6446: LD_ADDR_VAR 0 4
6450: PUSH
6451: EMPTY
6452: ST_TO_ADDR
// if not vehicles then
6453: LD_VAR 0 3
6457: NOT
6458: IFFALSE 6462
// exit ;
6460: GO 6676
// for i := 1 to vehicles [ nation ] do
6462: LD_ADDR_VAR 0 5
6466: PUSH
6467: DOUBLE
6468: LD_INT 1
6470: DEC
6471: ST_TO_ADDR
6472: LD_VAR 0 3
6476: PUSH
6477: LD_VAR 0 2
6481: ARRAY
6482: PUSH
6483: FOR_TO
6484: IFFALSE 6674
// begin uc_side := side ;
6486: LD_ADDR_OWVAR 20
6490: PUSH
6491: LD_VAR 0 1
6495: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
6496: LD_VAR 0 3
6500: PUSH
6501: LD_VAR 0 2
6505: ARRAY
6506: PUSH
6507: LD_VAR 0 5
6511: ARRAY
6512: PPUSH
6513: CALL 22573 0 1
6517: PUSH
6518: LD_INT 4
6520: GREATER
6521: IFFALSE 6551
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
6523: LD_ADDR_OWVAR 21
6527: PUSH
6528: LD_VAR 0 3
6532: PUSH
6533: LD_VAR 0 2
6537: ARRAY
6538: PUSH
6539: LD_VAR 0 5
6543: ARRAY
6544: PUSH
6545: LD_INT 5
6547: ARRAY
6548: ST_TO_ADDR
6549: GO 6561
// uc_nation := nation ;
6551: LD_ADDR_OWVAR 21
6555: PUSH
6556: LD_VAR 0 2
6560: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
6561: LD_VAR 0 3
6565: PUSH
6566: LD_VAR 0 2
6570: ARRAY
6571: PUSH
6572: LD_VAR 0 5
6576: ARRAY
6577: PUSH
6578: LD_INT 1
6580: ARRAY
6581: PPUSH
6582: LD_VAR 0 3
6586: PUSH
6587: LD_VAR 0 2
6591: ARRAY
6592: PUSH
6593: LD_VAR 0 5
6597: ARRAY
6598: PUSH
6599: LD_INT 2
6601: ARRAY
6602: PPUSH
6603: LD_VAR 0 3
6607: PUSH
6608: LD_VAR 0 2
6612: ARRAY
6613: PUSH
6614: LD_VAR 0 5
6618: ARRAY
6619: PUSH
6620: LD_INT 3
6622: ARRAY
6623: PPUSH
6624: LD_VAR 0 3
6628: PUSH
6629: LD_VAR 0 2
6633: ARRAY
6634: PUSH
6635: LD_VAR 0 5
6639: ARRAY
6640: PUSH
6641: LD_INT 4
6643: ARRAY
6644: PPUSH
6645: LD_INT 80
6647: PPUSH
6648: CALL 25369 0 5
// result := Join ( result , CreateVehicle ) ;
6652: LD_ADDR_VAR 0 4
6656: PUSH
6657: LD_VAR 0 4
6661: PPUSH
6662: CALL_OW 45
6666: PPUSH
6667: CALL 58549 0 2
6671: ST_TO_ADDR
// end ;
6672: GO 6483
6674: POP
6675: POP
// end ;
6676: LD_VAR 0 4
6680: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
6681: LD_INT 0
6683: PPUSH
6684: PPUSH
// for i in mpBattleFlags do
6685: LD_ADDR_VAR 0 3
6689: PUSH
6690: LD_EXP 25
6694: PUSH
6695: FOR_IN
6696: IFFALSE 6773
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
6698: LD_VAR 0 3
6702: PPUSH
6703: LD_INT 1
6705: PUSH
6706: LD_VAR 0 1
6710: PUSH
6711: EMPTY
6712: LIST
6713: LIST
6714: PUSH
6715: LD_INT 2
6717: PUSH
6718: LD_VAR 0 1
6722: PUSH
6723: LD_REAL  7.00000000000000E-0001
6726: MUL
6727: PUSH
6728: EMPTY
6729: LIST
6730: LIST
6731: PUSH
6732: LD_INT 3
6734: PUSH
6735: LD_VAR 0 1
6739: PUSH
6740: LD_REAL  4.00000000000000E-0001
6743: MUL
6744: PUSH
6745: EMPTY
6746: LIST
6747: LIST
6748: PUSH
6749: LD_INT 20
6751: PUSH
6752: LD_VAR 0 1
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: LIST
6765: LIST
6766: PPUSH
6767: CALL_OW 423
6771: GO 6695
6773: POP
6774: POP
// end ;
6775: LD_VAR 0 2
6779: RET
// every 0 0$1 trigger mpActive do var i , strength ;
6780: LD_INT 100
6782: IFFALSE 6877
6784: GO 6786
6786: DISABLE
6787: LD_INT 0
6789: PPUSH
6790: PPUSH
// begin if mpBattleFlag <= 0 then
6791: LD_EXP 24
6795: PUSH
6796: LD_INT 0
6798: LESSEQUAL
6799: IFFALSE 6803
// exit ;
6801: GO 6877
// strength := 100 ;
6803: LD_ADDR_VAR 0 2
6807: PUSH
6808: LD_INT 100
6810: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
6811: LD_EXP 24
6815: PPUSH
6816: CALL_OW 67
// strength := Dec ( strength ) ;
6820: LD_ADDR_VAR 0 2
6824: PUSH
6825: LD_VAR 0 2
6829: PPUSH
6830: CALL 59944 0 1
6834: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
6835: LD_VAR 0 2
6839: PPUSH
6840: CALL 6681 0 1
// until not strength ;
6844: LD_VAR 0 2
6848: NOT
6849: IFFALSE 6811
// for i in mpBattleFlags do
6851: LD_ADDR_VAR 0 1
6855: PUSH
6856: LD_EXP 25
6860: PUSH
6861: FOR_IN
6862: IFFALSE 6875
// KillBattleFlag ( i ) ;
6864: LD_VAR 0 1
6868: PPUSH
6869: CALL_OW 419
6873: GO 6861
6875: POP
6876: POP
// end ;
6877: PPOPN 2
6879: END
// every 0 0$1 marked mpActive do var side , tmp ;
6880: GO 6882
6882: DISABLE
6883: LD_INT 0
6885: PPUSH
6886: PPUSH
// begin if mpSibBomb <= 1 then
6887: LD_EXP 30
6891: PUSH
6892: LD_INT 1
6894: LESSEQUAL
6895: IFFALSE 6899
// exit ;
6897: GO 6972
// tmp := mpSibBomb ;
6899: LD_ADDR_VAR 0 2
6903: PUSH
6904: LD_EXP 30
6908: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6909: LD_INT 35
6911: PPUSH
6912: CALL_OW 67
// tmp := tmp - 0 0$1 ;
6916: LD_ADDR_VAR 0 2
6920: PUSH
6921: LD_VAR 0 2
6925: PUSH
6926: LD_INT 35
6928: MINUS
6929: ST_TO_ADDR
// until not tmp ;
6930: LD_VAR 0 2
6934: NOT
6935: IFFALSE 6909
// for side := 1 to 8 do
6937: LD_ADDR_VAR 0 1
6941: PUSH
6942: DOUBLE
6943: LD_INT 1
6945: DEC
6946: ST_TO_ADDR
6947: LD_INT 8
6949: PUSH
6950: FOR_TO
6951: IFFALSE 6970
// SetTech ( tech_SibFiss , side , state_enabled ) ;
6953: LD_INT 25
6955: PPUSH
6956: LD_VAR 0 1
6960: PPUSH
6961: LD_INT 1
6963: PPUSH
6964: CALL_OW 322
6968: GO 6950
6970: POP
6971: POP
// end ;
6972: PPOPN 2
6974: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
6975: LD_INT 0
6977: PPUSH
6978: PPUSH
6979: PPUSH
// mpBuildUpTimeDelay := 0 ;
6980: LD_ADDR_EXP 50
6984: PUSH
6985: LD_INT 0
6987: ST_TO_ADDR
// if not mpBuildUpTime then
6988: LD_EXP 22
6992: NOT
6993: IFFALSE 6997
// exit ;
6995: GO 7186
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
6997: LD_ADDR_EXP 50
7001: PUSH
7002: LD_INT 8400
7004: PUSH
7005: LD_INT 2100
7007: PUSH
7008: LD_EXP 22
7012: MUL
7013: PLUS
7014: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
7015: LD_ADDR_EXP 51
7019: PUSH
7020: LD_INT 1
7022: ST_TO_ADDR
// for i := 1 to 8 do
7023: LD_ADDR_VAR 0 2
7027: PUSH
7028: DOUBLE
7029: LD_INT 1
7031: DEC
7032: ST_TO_ADDR
7033: LD_INT 8
7035: PUSH
7036: FOR_TO
7037: IFFALSE 7184
// if mpSidePositions [ i ] then
7039: LD_EXP 9
7043: PUSH
7044: LD_VAR 0 2
7048: ARRAY
7049: IFFALSE 7182
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
7051: LD_EXP 21
7055: PUSH
7056: LD_EXP 9
7060: PUSH
7061: LD_VAR 0 2
7065: ARRAY
7066: ARRAY
7067: PPUSH
7068: LD_INT 5
7070: PPUSH
7071: CALL_OW 424
// for j := 1 to 8 do
7075: LD_ADDR_VAR 0 3
7079: PUSH
7080: DOUBLE
7081: LD_INT 1
7083: DEC
7084: ST_TO_ADDR
7085: LD_INT 8
7087: PUSH
7088: FOR_TO
7089: IFFALSE 7180
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
7091: LD_EXP 9
7095: PUSH
7096: LD_VAR 0 3
7100: ARRAY
7101: IFFALSE 7150
7103: PUSH
7104: LD_EXP 10
7108: PUSH
7109: LD_VAR 0 2
7113: ARRAY
7114: PUSH
7115: LD_EXP 10
7119: PUSH
7120: LD_VAR 0 3
7124: ARRAY
7125: NONEQUAL
7126: IFTRUE 7149
7128: PUSH
7129: LD_EXP 13
7133: NOT
7134: IFFALSE 7148
7136: PUSH
7137: LD_VAR 0 2
7141: PUSH
7142: LD_VAR 0 3
7146: NONEQUAL
7147: AND
7148: OR
7149: AND
7150: IFFALSE 7178
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
7152: LD_VAR 0 3
7156: PPUSH
7157: LD_EXP 21
7161: PUSH
7162: LD_EXP 9
7166: PUSH
7167: LD_VAR 0 2
7171: ARRAY
7172: ARRAY
7173: PPUSH
7174: CALL_OW 333
7178: GO 7088
7180: POP
7181: POP
// end ;
7182: GO 7036
7184: POP
7185: POP
// end ;
7186: LD_VAR 0 1
7190: RET
// function EndBuildUp ; var i , j ; begin
7191: LD_INT 0
7193: PPUSH
7194: PPUSH
7195: PPUSH
// mpBuildUpTimeActive := false ;
7196: LD_ADDR_EXP 51
7200: PUSH
7201: LD_INT 0
7203: ST_TO_ADDR
// for i := 1 to 8 do
7204: LD_ADDR_VAR 0 2
7208: PUSH
7209: DOUBLE
7210: LD_INT 1
7212: DEC
7213: ST_TO_ADDR
7214: LD_INT 8
7216: PUSH
7217: FOR_TO
7218: IFFALSE 7365
// if mpSidePositions [ i ] then
7220: LD_EXP 9
7224: PUSH
7225: LD_VAR 0 2
7229: ARRAY
7230: IFFALSE 7363
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
7232: LD_EXP 21
7236: PUSH
7237: LD_EXP 9
7241: PUSH
7242: LD_VAR 0 2
7246: ARRAY
7247: ARRAY
7248: PPUSH
7249: LD_INT 0
7251: PPUSH
7252: CALL_OW 424
// for j := 1 to 8 do
7256: LD_ADDR_VAR 0 3
7260: PUSH
7261: DOUBLE
7262: LD_INT 1
7264: DEC
7265: ST_TO_ADDR
7266: LD_INT 8
7268: PUSH
7269: FOR_TO
7270: IFFALSE 7361
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
7272: LD_EXP 9
7276: PUSH
7277: LD_VAR 0 3
7281: ARRAY
7282: IFFALSE 7331
7284: PUSH
7285: LD_EXP 10
7289: PUSH
7290: LD_VAR 0 2
7294: ARRAY
7295: PUSH
7296: LD_EXP 10
7300: PUSH
7301: LD_VAR 0 3
7305: ARRAY
7306: NONEQUAL
7307: IFTRUE 7330
7309: PUSH
7310: LD_EXP 13
7314: NOT
7315: IFFALSE 7329
7317: PUSH
7318: LD_VAR 0 2
7322: PUSH
7323: LD_VAR 0 3
7327: NONEQUAL
7328: AND
7329: OR
7330: AND
7331: IFFALSE 7359
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
7333: LD_VAR 0 3
7337: PPUSH
7338: LD_EXP 21
7342: PUSH
7343: LD_EXP 9
7347: PUSH
7348: LD_VAR 0 2
7352: ARRAY
7353: ARRAY
7354: PPUSH
7355: CALL_OW 334
7359: GO 7269
7361: POP
7362: POP
// end ;
7363: GO 7217
7365: POP
7366: POP
// end ;
7367: LD_VAR 0 1
7371: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
7372: LD_EXP 51
7376: IFFALSE 7555
7378: GO 7380
7380: DISABLE
7381: LD_INT 0
7383: PPUSH
7384: PPUSH
// begin for i := 1 to 8 do
7385: LD_ADDR_VAR 0 1
7389: PUSH
7390: DOUBLE
7391: LD_INT 1
7393: DEC
7394: ST_TO_ADDR
7395: LD_INT 8
7397: PUSH
7398: FOR_TO
7399: IFFALSE 7552
// if mpSidePositions [ i ] then
7401: LD_EXP 9
7405: PUSH
7406: LD_VAR 0 1
7410: ARRAY
7411: IFFALSE 7550
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
7413: LD_ADDR_VAR 0 2
7417: PUSH
7418: LD_EXP 21
7422: PUSH
7423: LD_EXP 9
7427: PUSH
7428: LD_VAR 0 1
7432: ARRAY
7433: ARRAY
7434: PPUSH
7435: LD_INT 2
7437: PUSH
7438: LD_INT 21
7440: PUSH
7441: LD_INT 1
7443: PUSH
7444: EMPTY
7445: LIST
7446: LIST
7447: PUSH
7448: LD_INT 21
7450: PUSH
7451: LD_INT 2
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: LIST
7462: PUSH
7463: LD_INT 22
7465: PUSH
7466: LD_OWVAR 2
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: PPUSH
7479: CALL_OW 70
7483: PUSH
7484: FOR_IN
7485: IFFALSE 7548
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
7487: LD_EXP 10
7491: PUSH
7492: LD_VAR 0 1
7496: ARRAY
7497: PUSH
7498: LD_EXP 10
7502: PUSH
7503: LD_OWVAR 2
7507: ARRAY
7508: NONEQUAL
7509: IFTRUE 7532
7511: PUSH
7512: LD_EXP 13
7516: NOT
7517: IFFALSE 7531
7519: PUSH
7520: LD_VAR 0 1
7524: PUSH
7525: LD_OWVAR 2
7529: NONEQUAL
7530: AND
7531: OR
7532: IFFALSE 7546
// ComMoveToArea ( un , BuildUpEscape ) ;
7534: LD_VAR 0 2
7538: PPUSH
7539: LD_INT 7
7541: PPUSH
7542: CALL_OW 113
7546: GO 7484
7548: POP
7549: POP
7550: GO 7398
7552: POP
7553: POP
// enable ;
7554: ENABLE
// end ;
7555: PPOPN 2
7557: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
7558: LD_EXP 22
7562: IFFALSE 7612
7564: GO 7566
7566: DISABLE
7567: LD_INT 0
7569: PPUSH
// begin tmp := mpBuildUpTime ;
7570: LD_ADDR_VAR 0 1
7574: PUSH
7575: LD_EXP 22
7579: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7580: LD_INT 35
7582: PPUSH
7583: CALL_OW 67
// tmp := tmp - 0 0$1 ;
7587: LD_ADDR_VAR 0 1
7591: PUSH
7592: LD_VAR 0 1
7596: PUSH
7597: LD_INT 35
7599: MINUS
7600: ST_TO_ADDR
// until not tmp ;
7601: LD_VAR 0 1
7605: NOT
7606: IFFALSE 7580
// EndBuildUp ;
7608: CALL 7191 0 0
// end ;
7612: PPOPN 1
7614: END
// every 0 0$1 trigger mpActive marked mpWin do
7615: LD_INT 100
7617: IFFALSE 7651
7619: GO 7621
7621: DISABLE
// begin if IAmServer then
7622: CALL_OW 518
7626: IFFALSE 7635
// wait ( 0 0$3 ) ;
7628: LD_INT 105
7630: PPUSH
7631: CALL_OW 67
// if Multiplayer then
7635: LD_OWVAR 4
7639: IFFALSE 7647
// YouWinInMultiplayer else
7641: CALL_OW 106
7645: GO 7651
// YouWin ;
7647: CALL_OW 103
// end ;
7651: END
// export function HasPowerByGameType ( gameType , side ) ; begin
7652: LD_INT 0
7654: PPUSH
// result := false ;
7655: LD_ADDR_VAR 0 3
7659: PUSH
7660: LD_INT 0
7662: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , GameTypeForts :
7663: LD_VAR 0 1
7667: PUSH
7668: LD_INT 1
7670: DOUBLE
7671: EQUAL
7672: IFTRUE 7700
7674: LD_INT 5
7676: DOUBLE
7677: EQUAL
7678: IFTRUE 7700
7680: LD_INT 6
7682: DOUBLE
7683: EQUAL
7684: IFTRUE 7700
7686: LD_INT 7
7688: DOUBLE
7689: EQUAL
7690: IFTRUE 7700
7692: LD_INT 9
7694: DOUBLE
7695: EQUAL
7696: IFTRUE 7700
7698: GO 7773
7700: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7701: LD_ADDR_VAR 0 3
7705: PUSH
7706: LD_INT 22
7708: PUSH
7709: LD_VAR 0 2
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: PUSH
7718: LD_INT 2
7720: PUSH
7721: LD_INT 21
7723: PUSH
7724: LD_INT 1
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: PUSH
7731: LD_INT 33
7733: PUSH
7734: LD_INT 3
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: PUSH
7741: LD_INT 33
7743: PUSH
7744: LD_INT 5
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: LIST
7755: LIST
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: PPUSH
7761: CALL_OW 69
7765: PPUSH
7766: CALL 22573 0 1
7770: ST_TO_ADDR
// end ; GameTypeSurvival :
7771: GO 8169
7773: LD_INT 2
7775: DOUBLE
7776: EQUAL
7777: IFTRUE 7781
7779: GO 7911
7781: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7782: LD_ADDR_VAR 0 3
7786: PUSH
7787: LD_INT 22
7789: PUSH
7790: LD_VAR 0 2
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: PUSH
7799: LD_INT 2
7801: PUSH
7802: LD_INT 30
7804: PUSH
7805: LD_INT 0
7807: PUSH
7808: EMPTY
7809: LIST
7810: LIST
7811: PUSH
7812: LD_INT 30
7814: PUSH
7815: LD_INT 1
7817: PUSH
7818: EMPTY
7819: LIST
7820: LIST
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: LIST
7826: PUSH
7827: EMPTY
7828: LIST
7829: LIST
7830: PPUSH
7831: CALL_OW 69
7835: PPUSH
7836: CALL 22573 0 1
7840: IFFALSE 7908
7842: PUSH
7843: LD_INT 22
7845: PUSH
7846: LD_VAR 0 2
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: PUSH
7855: LD_INT 2
7857: PUSH
7858: LD_INT 21
7860: PUSH
7861: LD_INT 1
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: PUSH
7868: LD_INT 33
7870: PUSH
7871: LD_INT 3
7873: PUSH
7874: EMPTY
7875: LIST
7876: LIST
7877: PUSH
7878: LD_INT 33
7880: PUSH
7881: LD_INT 5
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: PUSH
7888: EMPTY
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: PPUSH
7898: CALL_OW 69
7902: PPUSH
7903: CALL 22573 0 1
7907: AND
7908: ST_TO_ADDR
// end ; GameTypeSurvivalHardcore :
7909: GO 8169
7911: LD_INT 8
7913: DOUBLE
7914: EQUAL
7915: IFTRUE 7919
7917: GO 8068
7919: POP
// begin result := IsLive ( mpCommanders [ side ] ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7920: LD_ADDR_VAR 0 3
7924: PUSH
7925: LD_EXP 43
7929: PUSH
7930: LD_VAR 0 2
7934: ARRAY
7935: PPUSH
7936: CALL_OW 300
7940: IFFALSE 7997
7942: PUSH
7943: LD_INT 22
7945: PUSH
7946: LD_VAR 0 2
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: PUSH
7955: LD_INT 2
7957: PUSH
7958: LD_INT 30
7960: PUSH
7961: LD_INT 0
7963: PUSH
7964: EMPTY
7965: LIST
7966: LIST
7967: PUSH
7968: LD_INT 30
7970: PUSH
7971: LD_INT 1
7973: PUSH
7974: EMPTY
7975: LIST
7976: LIST
7977: PUSH
7978: EMPTY
7979: LIST
7980: LIST
7981: LIST
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: PPUSH
7987: CALL_OW 69
7991: PPUSH
7992: CALL 22573 0 1
7996: AND
7997: IFFALSE 8065
7999: PUSH
8000: LD_INT 22
8002: PUSH
8003: LD_VAR 0 2
8007: PUSH
8008: EMPTY
8009: LIST
8010: LIST
8011: PUSH
8012: LD_INT 2
8014: PUSH
8015: LD_INT 21
8017: PUSH
8018: LD_INT 1
8020: PUSH
8021: EMPTY
8022: LIST
8023: LIST
8024: PUSH
8025: LD_INT 33
8027: PUSH
8028: LD_INT 3
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: PUSH
8035: LD_INT 33
8037: PUSH
8038: LD_INT 5
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: PPUSH
8055: CALL_OW 69
8059: PPUSH
8060: CALL 22573 0 1
8064: AND
8065: ST_TO_ADDR
// end ; GameTypeKing :
8066: GO 8169
8068: LD_INT 3
8070: DOUBLE
8071: EQUAL
8072: IFTRUE 8076
8074: GO 8168
8076: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
8077: LD_ADDR_VAR 0 3
8081: PUSH
8082: LD_INT 22
8084: PUSH
8085: LD_VAR 0 2
8089: PUSH
8090: EMPTY
8091: LIST
8092: LIST
8093: PUSH
8094: LD_INT 2
8096: PUSH
8097: LD_INT 21
8099: PUSH
8100: LD_INT 1
8102: PUSH
8103: EMPTY
8104: LIST
8105: LIST
8106: PUSH
8107: LD_INT 33
8109: PUSH
8110: LD_INT 3
8112: PUSH
8113: EMPTY
8114: LIST
8115: LIST
8116: PUSH
8117: LD_INT 33
8119: PUSH
8120: LD_INT 5
8122: PUSH
8123: EMPTY
8124: LIST
8125: LIST
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: LIST
8131: LIST
8132: PUSH
8133: EMPTY
8134: LIST
8135: LIST
8136: PPUSH
8137: CALL_OW 69
8141: PPUSH
8142: CALL 22573 0 1
8146: IFFALSE 8165
8148: PUSH
8149: LD_VAR 0 2
8153: PPUSH
8154: CALL 65027 0 1
8158: PUSH
8159: LD_EXP 37
8163: LESS
8164: AND
8165: ST_TO_ADDR
// end ; end ;
8166: GO 8169
8168: POP
// end ;
8169: LD_VAR 0 3
8173: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
8174: LD_INT 100
8176: IFFALSE 8406
8178: GO 8180
8180: DISABLE
8181: LD_INT 0
8183: PPUSH
8184: PPUSH
// begin if Multiplayer then
8185: LD_OWVAR 4
8189: IFFALSE 8197
// SetPlayerSpectator ( ) else
8191: CALL_OW 572
8195: GO 8206
// FogOff ( your_side ) ;
8197: LD_OWVAR 2
8201: PPUSH
8202: CALL_OW 344
// repeat gameIsOn := false ;
8206: LD_ADDR_VAR 0 1
8210: PUSH
8211: LD_INT 0
8213: ST_TO_ADDR
// for i := 1 to 8 do
8214: LD_ADDR_VAR 0 2
8218: PUSH
8219: DOUBLE
8220: LD_INT 1
8222: DEC
8223: ST_TO_ADDR
8224: LD_INT 8
8226: PUSH
8227: FOR_TO
8228: IFFALSE 8358
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8230: LD_EXP 9
8234: PUSH
8235: LD_VAR 0 2
8239: ARRAY
8240: IFFALSE 8253
8242: PUSH
8243: LD_VAR 0 2
8247: PPUSH
8248: CALL_OW 108
8252: AND
8253: IFFALSE 8267
8255: PUSH
8256: LD_VAR 0 2
8260: PUSH
8261: LD_OWVAR 2
8265: NONEQUAL
8266: AND
8267: IFFALSE 8356
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
8269: LD_EXP 10
8273: PUSH
8274: LD_VAR 0 2
8278: ARRAY
8279: NOT
8280: IFTRUE 8328
8282: PUSH
8283: LD_EXP 10
8287: PUSH
8288: LD_VAR 0 2
8292: ARRAY
8293: PUSH
8294: LD_EXP 10
8298: PUSH
8299: LD_OWVAR 2
8303: ARRAY
8304: NONEQUAL
8305: IFFALSE 8327
8307: PUSH
8308: LD_OWVAR 2
8312: PPUSH
8313: LD_VAR 0 2
8317: PPUSH
8318: CALL_OW 81
8322: PUSH
8323: LD_INT 1
8325: NONEQUAL
8326: AND
8327: OR
8328: IFFALSE 8356
// if HasPowerByGameType ( mpGameType , i ) then
8330: LD_EXP 5
8334: PPUSH
8335: LD_VAR 0 2
8339: PPUSH
8340: CALL 7652 0 2
8344: IFFALSE 8356
// begin gameIsOn := true ;
8346: LD_ADDR_VAR 0 1
8350: PUSH
8351: LD_INT 1
8353: ST_TO_ADDR
// break ;
8354: GO 8358
// end ;
8356: GO 8227
8358: POP
8359: POP
// wait ( 100 ) ;
8360: LD_INT 100
8362: PPUSH
8363: CALL_OW 67
// until not gameIsOn ;
8367: LD_VAR 0 1
8371: NOT
8372: IFFALSE 8206
// if IAmServer then
8374: CALL_OW 518
8378: IFFALSE 8387
// wait ( 0 0$3 ) ;
8380: LD_INT 105
8382: PPUSH
8383: CALL_OW 67
// if Multiplayer then
8387: LD_OWVAR 4
8391: IFFALSE 8399
// YouLostInMultiplayer else
8393: CALL_OW 107
8397: GO 8406
// YouLost (  ) ;
8399: LD_STRING 
8401: PPUSH
8402: CALL_OW 104
// end ;
8406: PPOPN 2
8408: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
8409: LD_EXP 35
8413: IFFALSE 8797
8415: GO 8417
8417: DISABLE
8418: LD_INT 0
8420: PPUSH
8421: PPUSH
8422: PPUSH
8423: PPUSH
8424: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
8425: LD_ADDR_VAR 0 5
8429: PUSH
8430: LD_INT 1
8432: PUSH
8433: LD_INT 2
8435: PUSH
8436: LD_INT 3
8438: PUSH
8439: LD_INT 4
8441: PUSH
8442: LD_INT 5
8444: PUSH
8445: LD_INT 6
8447: PUSH
8448: LD_INT 7
8450: PUSH
8451: LD_INT 8
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
8464: LD_INT 350
8466: PPUSH
8467: CALL_OW 67
// for i := 1 to 8 do
8471: LD_ADDR_VAR 0 1
8475: PUSH
8476: DOUBLE
8477: LD_INT 1
8479: DEC
8480: ST_TO_ADDR
8481: LD_INT 8
8483: PUSH
8484: FOR_TO
8485: IFFALSE 8767
// begin j := sides [ i ] ;
8487: LD_ADDR_VAR 0 2
8491: PUSH
8492: LD_VAR 0 5
8496: PUSH
8497: LD_VAR 0 1
8501: ARRAY
8502: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
8503: LD_EXP 42
8507: PUSH
8508: LD_VAR 0 2
8512: ARRAY
8513: PPUSH
8514: CALL 22573 0 1
8518: IFFALSE 8531
8520: PUSH
8521: LD_VAR 0 2
8525: PPUSH
8526: CALL_OW 108
8530: AND
8531: IFFALSE 8549
8533: PUSH
8534: LD_EXP 5
8538: PPUSH
8539: LD_VAR 0 2
8543: PPUSH
8544: CALL 7652 0 2
8548: AND
8549: IFFALSE 8765
// begin wait ( mpRespawn div 2 ) ;
8551: LD_EXP 35
8555: PUSH
8556: LD_INT 2
8558: DIV
8559: PPUSH
8560: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8564: LD_ADDR_VAR 0 3
8568: PUSH
8569: LD_INT 22
8571: PUSH
8572: LD_VAR 0 2
8576: PUSH
8577: EMPTY
8578: LIST
8579: LIST
8580: PUSH
8581: LD_INT 50
8583: PUSH
8584: EMPTY
8585: LIST
8586: PUSH
8587: LD_INT 2
8589: PUSH
8590: LD_INT 30
8592: PUSH
8593: LD_INT 0
8595: PUSH
8596: EMPTY
8597: LIST
8598: LIST
8599: PUSH
8600: LD_INT 30
8602: PUSH
8603: LD_INT 1
8605: PUSH
8606: EMPTY
8607: LIST
8608: LIST
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: LIST
8614: PUSH
8615: EMPTY
8616: LIST
8617: LIST
8618: LIST
8619: PPUSH
8620: CALL_OW 69
8624: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
8625: LD_VAR 0 3
8629: NOT
8630: IFTRUE 8644
8632: PUSH
8633: LD_VAR 0 2
8637: PPUSH
8638: CALL_OW 108
8642: NOT
8643: OR
8644: IFTRUE 8663
8646: PUSH
8647: LD_EXP 5
8651: PPUSH
8652: LD_VAR 0 2
8656: PPUSH
8657: CALL 7652 0 2
8661: NOT
8662: OR
8663: IFFALSE 8667
// continue ;
8665: GO 8484
// spawn := tmp [ 1 ] ;
8667: LD_ADDR_VAR 0 4
8671: PUSH
8672: LD_VAR 0 3
8676: PUSH
8677: LD_INT 1
8679: ARRAY
8680: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
8681: LD_EXP 42
8685: PUSH
8686: LD_VAR 0 2
8690: ARRAY
8691: PUSH
8692: LD_INT 1
8694: ARRAY
8695: PPUSH
8696: LD_VAR 0 4
8700: PPUSH
8701: CALL_OW 250
8705: PPUSH
8706: LD_VAR 0 4
8710: PPUSH
8711: CALL_OW 251
8715: PPUSH
8716: LD_INT 32
8718: PPUSH
8719: LD_INT 1
8721: PPUSH
8722: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
8726: LD_ADDR_EXP 42
8730: PUSH
8731: LD_EXP 42
8735: PPUSH
8736: LD_VAR 0 2
8740: PPUSH
8741: LD_EXP 42
8745: PUSH
8746: LD_VAR 0 2
8750: ARRAY
8751: PPUSH
8752: LD_INT 1
8754: PPUSH
8755: CALL_OW 3
8759: PPUSH
8760: CALL_OW 1
8764: ST_TO_ADDR
// end ; end ;
8765: GO 8484
8767: POP
8768: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
8769: LD_ADDR_VAR 0 5
8773: PUSH
8774: LD_VAR 0 5
8778: PPUSH
8779: LD_INT 1
8781: PPUSH
8782: LD_INT 8
8784: PPUSH
8785: LD_INT 1
8787: PPUSH
8788: CALL 24899 0 4
8792: ST_TO_ADDR
// until false ;
8793: LD_INT 0
8795: IFFALSE 8464
// end ;
8797: PPOPN 5
8799: END
// every 0 0$1 marked mpActive do
8800: GO 8802
8802: DISABLE
// begin enable ;
8803: ENABLE
// if not mpDisplayStrings then
8804: LD_EXP 40
8808: NOT
8809: IFFALSE 8820
// begin display_strings := [ ] ;
8811: LD_ADDR_OWVAR 47
8815: PUSH
8816: EMPTY
8817: ST_TO_ADDR
// exit ;
8818: GO 8830
// end ; display_strings := mpDisplayStrings ;
8820: LD_ADDR_OWVAR 47
8824: PUSH
8825: LD_EXP 40
8829: ST_TO_ADDR
// end ; end_of_file
8830: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
8831: LD_INT 0
8833: PPUSH
8834: PPUSH
8835: PPUSH
8836: PPUSH
8837: PPUSH
8838: PPUSH
8839: PPUSH
8840: PPUSH
8841: PPUSH
// if GetType ( un ) = unit_vehicle then
8842: LD_VAR 0 1
8846: PPUSH
8847: CALL_OW 247
8851: PUSH
8852: LD_INT 2
8854: EQUAL
8855: IFFALSE 8859
// exit ;
8857: GO 9632
// side := GetSide ( un ) ;
8859: LD_ADDR_VAR 0 9
8863: PUSH
8864: LD_VAR 0 1
8868: PPUSH
8869: CALL_OW 255
8873: ST_TO_ADDR
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] then
8874: LD_EXP 5
8878: PUSH
8879: LD_INT 2
8881: PUSH
8882: LD_INT 8
8884: PUSH
8885: EMPTY
8886: LIST
8887: LIST
8888: IN
8889: IFFALSE 8983
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
8891: LD_VAR 0 1
8895: PPUSH
8896: CALL_OW 266
8900: PUSH
8901: LD_INT 0
8903: PUSH
8904: LD_INT 1
8906: PUSH
8907: EMPTY
8908: LIST
8909: LIST
8910: IN
8911: IFFALSE 8983
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
8913: LD_ADDR_VAR 0 3
8917: PUSH
8918: LD_INT 22
8920: PUSH
8921: LD_VAR 0 9
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: PUSH
8930: LD_INT 2
8932: PUSH
8933: LD_INT 21
8935: PUSH
8936: LD_INT 1
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PUSH
8943: LD_INT 33
8945: PUSH
8946: LD_INT 3
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: PUSH
8953: EMPTY
8954: LIST
8955: LIST
8956: LIST
8957: PUSH
8958: EMPTY
8959: LIST
8960: LIST
8961: PPUSH
8962: CALL_OW 69
8966: PUSH
8967: FOR_IN
8968: IFFALSE 8981
// KillUnit ( i ) ;
8970: LD_VAR 0 3
8974: PPUSH
8975: CALL_OW 66
8979: GO 8967
8981: POP
8982: POP
// end ; if mpGameType = GameTypeSurvivalHardcore then
8983: LD_EXP 5
8987: PUSH
8988: LD_INT 8
8990: EQUAL
8991: IFFALSE 9075
// if un in mpCommanders then
8993: LD_VAR 0 1
8997: PUSH
8998: LD_EXP 43
9002: IN
9003: IFFALSE 9075
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
9005: LD_ADDR_VAR 0 3
9009: PUSH
9010: LD_INT 22
9012: PUSH
9013: LD_VAR 0 9
9017: PUSH
9018: EMPTY
9019: LIST
9020: LIST
9021: PUSH
9022: LD_INT 2
9024: PUSH
9025: LD_INT 21
9027: PUSH
9028: LD_INT 1
9030: PUSH
9031: EMPTY
9032: LIST
9033: LIST
9034: PUSH
9035: LD_INT 33
9037: PUSH
9038: LD_INT 3
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: LIST
9049: PUSH
9050: EMPTY
9051: LIST
9052: LIST
9053: PPUSH
9054: CALL_OW 69
9058: PUSH
9059: FOR_IN
9060: IFFALSE 9073
// KillUnit ( i ) ;
9062: LD_VAR 0 3
9066: PPUSH
9067: CALL_OW 66
9071: GO 9059
9073: POP
9074: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
9075: LD_VAR 0 1
9079: PPUSH
9080: CALL_OW 257
9084: PUSH
9085: LD_INT 12
9087: PUSH
9088: LD_INT 17
9090: PUSH
9091: LD_INT 15
9093: PUSH
9094: LD_INT 16
9096: PUSH
9097: EMPTY
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: IN
9103: IFTRUE 9120
9105: PUSH
9106: LD_VAR 0 1
9110: PPUSH
9111: CALL_OW 263
9115: PUSH
9116: LD_INT 5
9118: EQUAL
9119: OR
9120: IFFALSE 9357
// begin tag := 0 ;
9122: LD_ADDR_VAR 0 5
9126: PUSH
9127: LD_INT 0
9129: ST_TO_ADDR
// for i := 1 to 8 do
9130: LD_ADDR_VAR 0 3
9134: PUSH
9135: DOUBLE
9136: LD_INT 1
9138: DEC
9139: ST_TO_ADDR
9140: LD_INT 8
9142: PUSH
9143: FOR_TO
9144: IFFALSE 9178
// if un in mpApePosIndex [ i ] then
9146: LD_VAR 0 1
9150: PUSH
9151: LD_EXP 34
9155: PUSH
9156: LD_VAR 0 3
9160: ARRAY
9161: IN
9162: IFFALSE 9176
// begin tag := i ;
9164: LD_ADDR_VAR 0 5
9168: PUSH
9169: LD_VAR 0 3
9173: ST_TO_ADDR
// break ;
9174: GO 9178
// end ;
9176: GO 9143
9178: POP
9179: POP
// if not tag then
9180: LD_VAR 0 5
9184: NOT
9185: IFFALSE 9189
// exit ;
9187: GO 9632
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
9189: LD_ADDR_VAR 0 7
9193: PUSH
9194: LD_EXP 33
9198: PUSH
9199: LD_EXP 9
9203: PUSH
9204: LD_VAR 0 5
9208: ARRAY
9209: ARRAY
9210: ST_TO_ADDR
// if not area then
9211: LD_VAR 0 7
9215: NOT
9216: IFFALSE 9220
// exit ;
9218: GO 9632
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
9220: LD_INT 14700
9222: PUSH
9223: LD_VAR 0 1
9227: PUSH
9228: LD_INT 5
9230: MOD
9231: PUSH
9232: LD_INT 1
9234: PLUS
9235: PUSH
9236: LD_INT 700
9238: MUL
9239: PLUS
9240: PPUSH
9241: CALL_OW 67
// repeat wait ( 10 ) ;
9245: LD_INT 10
9247: PPUSH
9248: CALL_OW 67
// until not mpBlockRespThread ;
9252: LD_EXP 49
9256: NOT
9257: IFFALSE 9245
// mpBlockRespThread := true ;
9259: LD_ADDR_EXP 49
9263: PUSH
9264: LD_INT 1
9266: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
9267: LD_INT 0
9269: PPUSH
9270: CALL 54676 0 1
// ape := CreateHuman ;
9274: LD_ADDR_VAR 0 4
9278: PUSH
9279: CALL_OW 44
9283: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
9284: LD_ADDR_EXP 34
9288: PUSH
9289: LD_EXP 34
9293: PPUSH
9294: LD_VAR 0 5
9298: PPUSH
9299: LD_EXP 34
9303: PUSH
9304: LD_VAR 0 5
9308: ARRAY
9309: PPUSH
9310: LD_VAR 0 4
9314: PPUSH
9315: CALL 58549 0 2
9319: PPUSH
9320: CALL_OW 1
9324: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
9325: LD_VAR 0 4
9329: PPUSH
9330: LD_VAR 0 7
9334: PPUSH
9335: LD_INT 0
9337: PPUSH
9338: CALL_OW 49
// wait ( 10 ) ;
9342: LD_INT 10
9344: PPUSH
9345: CALL_OW 67
// mpBlockRespThread := false ;
9349: LD_ADDR_EXP 49
9353: PUSH
9354: LD_INT 0
9356: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
9357: LD_VAR 0 1
9361: PPUSH
9362: CALL_OW 247
9366: PUSH
9367: LD_INT 1
9369: EQUAL
9370: IFFALSE 9387
9372: PUSH
9373: LD_VAR 0 1
9377: PPUSH
9378: CALL_OW 248
9382: PUSH
9383: LD_INT 0
9385: GREATER
9386: AND
9387: IFFALSE 9632
// begin if not mpRespawn then
9389: LD_EXP 35
9393: NOT
9394: IFFALSE 9398
// exit ;
9396: GO 9632
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
9398: LD_VAR 0 9
9402: PPUSH
9403: CALL_OW 108
9407: NOT
9408: IFFALSE 9427
9410: PUSH
9411: LD_EXP 5
9415: PPUSH
9416: LD_VAR 0 9
9420: PPUSH
9421: CALL 7652 0 2
9425: NOT
9426: AND
9427: IFFALSE 9431
// exit ;
9429: GO 9632
// side := GetSide ( un ) ;
9431: LD_ADDR_VAR 0 9
9435: PUSH
9436: LD_VAR 0 1
9440: PPUSH
9441: CALL_OW 255
9445: ST_TO_ADDR
// nation := GetNation ( un ) ;
9446: LD_ADDR_VAR 0 8
9450: PUSH
9451: LD_VAR 0 1
9455: PPUSH
9456: CALL_OW 248
9460: ST_TO_ADDR
// class := GetClass ( un ) ;
9461: LD_ADDR_VAR 0 6
9465: PUSH
9466: LD_VAR 0 1
9470: PPUSH
9471: CALL_OW 257
9475: ST_TO_ADDR
// if class > 4 then
9476: LD_VAR 0 6
9480: PUSH
9481: LD_INT 4
9483: GREATER
9484: IFFALSE 9494
// class := 1 ;
9486: LD_ADDR_VAR 0 6
9490: PUSH
9491: LD_INT 1
9493: ST_TO_ADDR
// repeat wait ( 10 ) ;
9494: LD_INT 10
9496: PPUSH
9497: CALL_OW 67
// until not mpBlockRespThread ;
9501: LD_EXP 49
9505: NOT
9506: IFFALSE 9494
// mpBlockRespThread := true ;
9508: LD_ADDR_EXP 49
9512: PUSH
9513: LD_INT 1
9515: ST_TO_ADDR
// uc_side := side ;
9516: LD_ADDR_OWVAR 20
9520: PUSH
9521: LD_VAR 0 9
9525: ST_TO_ADDR
// uc_nation := nation ;
9526: LD_ADDR_OWVAR 21
9530: PUSH
9531: LD_VAR 0 8
9535: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
9536: LD_INT 0
9538: PPUSH
9539: LD_VAR 0 6
9543: PPUSH
9544: LD_INT 2
9546: PPUSH
9547: CALL_OW 380
// un := CreateHuman ;
9551: LD_ADDR_VAR 0 1
9555: PUSH
9556: CALL_OW 44
9560: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
9561: LD_ADDR_EXP 42
9565: PUSH
9566: LD_EXP 42
9570: PPUSH
9571: LD_VAR 0 9
9575: PPUSH
9576: LD_EXP 42
9580: PUSH
9581: LD_VAR 0 9
9585: ARRAY
9586: PPUSH
9587: LD_EXP 42
9591: PUSH
9592: LD_VAR 0 9
9596: ARRAY
9597: PUSH
9598: LD_INT 1
9600: PLUS
9601: PPUSH
9602: LD_VAR 0 1
9606: PPUSH
9607: CALL_OW 1
9611: PPUSH
9612: CALL_OW 1
9616: ST_TO_ADDR
// wait ( 10 ) ;
9617: LD_INT 10
9619: PPUSH
9620: CALL_OW 67
// mpBlockRespThread := false ;
9624: LD_ADDR_EXP 49
9628: PUSH
9629: LD_INT 0
9631: ST_TO_ADDR
// end ; end ;
9632: LD_VAR 0 2
9636: RET
// export function Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ; var i , tag , area , ape ; begin
9637: LD_INT 0
9639: PPUSH
9640: PPUSH
9641: PPUSH
9642: PPUSH
9643: PPUSH
// tag := 0 ;
9644: LD_ADDR_VAR 0 5
9648: PUSH
9649: LD_INT 0
9651: ST_TO_ADDR
// for i := 1 to 8 do
9652: LD_ADDR_VAR 0 4
9656: PUSH
9657: DOUBLE
9658: LD_INT 1
9660: DEC
9661: ST_TO_ADDR
9662: LD_INT 8
9664: PUSH
9665: FOR_TO
9666: IFFALSE 9700
// if un in mpApePosIndex [ i ] then
9668: LD_VAR 0 2
9672: PUSH
9673: LD_EXP 34
9677: PUSH
9678: LD_VAR 0 4
9682: ARRAY
9683: IN
9684: IFFALSE 9698
// begin tag := i ;
9686: LD_ADDR_VAR 0 5
9690: PUSH
9691: LD_VAR 0 4
9695: ST_TO_ADDR
// break ;
9696: GO 9700
// end ;
9698: GO 9665
9700: POP
9701: POP
// if not tag then
9702: LD_VAR 0 5
9706: NOT
9707: IFFALSE 9711
// exit ;
9709: GO 9879
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
9711: LD_ADDR_VAR 0 6
9715: PUSH
9716: LD_EXP 33
9720: PUSH
9721: LD_EXP 9
9725: PUSH
9726: LD_VAR 0 5
9730: ARRAY
9731: ARRAY
9732: ST_TO_ADDR
// if not area then
9733: LD_VAR 0 6
9737: NOT
9738: IFFALSE 9742
// exit ;
9740: GO 9879
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
9742: LD_INT 14700
9744: PUSH
9745: LD_VAR 0 2
9749: PUSH
9750: LD_INT 5
9752: MOD
9753: PUSH
9754: LD_INT 1
9756: PLUS
9757: PUSH
9758: LD_INT 700
9760: MUL
9761: PLUS
9762: PPUSH
9763: CALL_OW 67
// repeat wait ( 10 ) ;
9767: LD_INT 10
9769: PPUSH
9770: CALL_OW 67
// until not mpBlockRespThread ;
9774: LD_EXP 49
9778: NOT
9779: IFFALSE 9767
// mpBlockRespThread := true ;
9781: LD_ADDR_EXP 49
9785: PUSH
9786: LD_INT 1
9788: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
9789: LD_INT 0
9791: PPUSH
9792: CALL 54676 0 1
// ape := CreateHuman ;
9796: LD_ADDR_VAR 0 7
9800: PUSH
9801: CALL_OW 44
9805: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
9806: LD_ADDR_EXP 34
9810: PUSH
9811: LD_EXP 34
9815: PPUSH
9816: LD_VAR 0 5
9820: PPUSH
9821: LD_EXP 34
9825: PUSH
9826: LD_VAR 0 5
9830: ARRAY
9831: PPUSH
9832: LD_VAR 0 7
9836: PPUSH
9837: CALL 58549 0 2
9841: PPUSH
9842: CALL_OW 1
9846: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
9847: LD_VAR 0 7
9851: PPUSH
9852: LD_VAR 0 6
9856: PPUSH
9857: LD_INT 0
9859: PPUSH
9860: CALL_OW 49
// wait ( 10 ) ;
9864: LD_INT 10
9866: PPUSH
9867: CALL_OW 67
// mpBlockRespThread := false ;
9871: LD_ADDR_EXP 49
9875: PUSH
9876: LD_INT 0
9878: ST_TO_ADDR
// end ;
9879: LD_VAR 0 3
9883: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
9884: LD_INT 0
9886: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
9887: LD_VAR 0 1
9891: PPUSH
9892: CALL_OW 266
9896: PUSH
9897: LD_INT 0
9899: PUSH
9900: LD_INT 1
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: IN
9907: IFFALSE 9932
// SetBName ( building , @ & GetSide ( building ) ) ;
9909: LD_VAR 0 1
9913: PPUSH
9914: LD_STRING @
9916: PUSH
9917: LD_VAR 0 1
9921: PPUSH
9922: CALL_OW 255
9926: STR
9927: PPUSH
9928: CALL_OW 500
// end ;
9932: LD_VAR 0 2
9936: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
9937: LD_INT 0
9939: PPUSH
9940: PPUSH
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] and GetBType ( building ) in [ b_depot , b_warehouse ] then
9941: LD_EXP 5
9945: PUSH
9946: LD_INT 2
9948: PUSH
9949: LD_INT 8
9951: PUSH
9952: EMPTY
9953: LIST
9954: LIST
9955: IN
9956: IFFALSE 9980
9958: PUSH
9959: LD_VAR 0 1
9963: PPUSH
9964: CALL_OW 266
9968: PUSH
9969: LD_INT 0
9971: PUSH
9972: LD_INT 1
9974: PUSH
9975: EMPTY
9976: LIST
9977: LIST
9978: IN
9979: AND
9980: IFFALSE 10059
// begin SetSide ( building , oldSide ) ;
9982: LD_VAR 0 1
9986: PPUSH
9987: LD_VAR 0 2
9991: PPUSH
9992: CALL_OW 235
// KillUnit ( building ) ;
9996: LD_VAR 0 1
10000: PPUSH
10001: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
10005: LD_ADDR_VAR 0 5
10009: PUSH
10010: LD_INT 22
10012: PUSH
10013: LD_VAR 0 2
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: PUSH
10022: LD_INT 21
10024: PUSH
10025: LD_INT 1
10027: PUSH
10028: EMPTY
10029: LIST
10030: LIST
10031: PUSH
10032: EMPTY
10033: LIST
10034: LIST
10035: PPUSH
10036: CALL_OW 69
10040: PUSH
10041: FOR_IN
10042: IFFALSE 10055
// KillUnit ( i ) ;
10044: LD_VAR 0 5
10048: PPUSH
10049: CALL_OW 66
10053: GO 10041
10055: POP
10056: POP
// exit ;
10057: GO 10104
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
10059: LD_VAR 0 1
10063: PPUSH
10064: CALL_OW 266
10068: PUSH
10069: LD_INT 0
10071: PUSH
10072: LD_INT 1
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: IN
10079: IFFALSE 10104
// SetBName ( building , @ & GetSide ( building ) ) ;
10081: LD_VAR 0 1
10085: PPUSH
10086: LD_STRING @
10088: PUSH
10089: LD_VAR 0 1
10093: PPUSH
10094: CALL_OW 255
10098: STR
10099: PPUSH
10100: CALL_OW 500
// end ;
10104: LD_VAR 0 4
10108: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
10109: LD_INT 0
10111: PPUSH
10112: PPUSH
10113: PPUSH
// if mpGameType <> GameTypeFamine then
10114: LD_EXP 5
10118: PUSH
10119: LD_INT 5
10121: NONEQUAL
10122: IFFALSE 10126
// exit ;
10124: GO 10360
// for i := 1 to mpGlobalOilDeposits do
10126: LD_ADDR_VAR 0 6
10130: PUSH
10131: DOUBLE
10132: LD_INT 1
10134: DEC
10135: ST_TO_ADDR
10136: LD_EXP 44
10140: PUSH
10141: FOR_TO
10142: IFFALSE 10358
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
10144: LD_EXP 44
10148: PUSH
10149: LD_VAR 0 6
10153: ARRAY
10154: PUSH
10155: LD_INT 1
10157: ARRAY
10158: PPUSH
10159: LD_EXP 44
10163: PUSH
10164: LD_VAR 0 6
10168: ARRAY
10169: PUSH
10170: LD_INT 2
10172: ARRAY
10173: PPUSH
10174: CALL_OW 428
10178: PUSH
10179: LD_VAR 0 1
10183: EQUAL
10184: IFFALSE 10356
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
10186: LD_ADDR_VAR 0 7
10190: PUSH
10191: LD_EXP 44
10195: PUSH
10196: LD_VAR 0 6
10200: ARRAY
10201: PUSH
10202: LD_INT 3
10204: ARRAY
10205: ST_TO_ADDR
// value := value - amount ;
10206: LD_ADDR_VAR 0 7
10210: PUSH
10211: LD_VAR 0 7
10215: PUSH
10216: LD_VAR 0 4
10220: MINUS
10221: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
10222: LD_ADDR_EXP 44
10226: PUSH
10227: LD_EXP 44
10231: PPUSH
10232: LD_VAR 0 6
10236: PPUSH
10237: LD_EXP 44
10241: PUSH
10242: LD_VAR 0 6
10246: ARRAY
10247: PPUSH
10248: LD_INT 3
10250: PPUSH
10251: LD_VAR 0 7
10255: PPUSH
10256: CALL_OW 1
10260: PPUSH
10261: CALL_OW 1
10265: ST_TO_ADDR
// if side in [ your_side , 9 ] then
10266: LD_VAR 0 2
10270: PUSH
10271: LD_OWVAR 2
10275: PUSH
10276: LD_INT 9
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: IN
10283: IFFALSE 10299
// SetUnitDisplayNumber ( building , value ) ;
10285: LD_VAR 0 1
10289: PPUSH
10290: LD_VAR 0 7
10294: PPUSH
10295: CALL_OW 505
// if value <= 0 then
10299: LD_VAR 0 7
10303: PUSH
10304: LD_INT 0
10306: LESSEQUAL
10307: IFFALSE 10356
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
10309: LD_EXP 44
10313: PUSH
10314: LD_VAR 0 6
10318: ARRAY
10319: PUSH
10320: LD_INT 1
10322: ARRAY
10323: PPUSH
10324: LD_EXP 44
10328: PUSH
10329: LD_VAR 0 6
10333: ARRAY
10334: PUSH
10335: LD_INT 2
10337: ARRAY
10338: PPUSH
10339: CALL_OW 63
// KillUnit ( building ) ;
10343: LD_VAR 0 1
10347: PPUSH
10348: CALL_OW 66
// exit ;
10352: POP
10353: POP
10354: GO 10360
// end ; end ; end ;
10356: GO 10141
10358: POP
10359: POP
// end ;
10360: LD_VAR 0 5
10364: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
10365: LD_INT 0
10367: PPUSH
10368: PPUSH
10369: PPUSH
// if mpGameType <> GameTypeFamine then
10370: LD_EXP 5
10374: PUSH
10375: LD_INT 5
10377: NONEQUAL
10378: IFFALSE 10382
// exit ;
10380: GO 10616
// for i := 1 to mpGlobalSibDeposits do
10382: LD_ADDR_VAR 0 6
10386: PUSH
10387: DOUBLE
10388: LD_INT 1
10390: DEC
10391: ST_TO_ADDR
10392: LD_EXP 45
10396: PUSH
10397: FOR_TO
10398: IFFALSE 10614
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
10400: LD_EXP 45
10404: PUSH
10405: LD_VAR 0 6
10409: ARRAY
10410: PUSH
10411: LD_INT 1
10413: ARRAY
10414: PPUSH
10415: LD_EXP 45
10419: PUSH
10420: LD_VAR 0 6
10424: ARRAY
10425: PUSH
10426: LD_INT 2
10428: ARRAY
10429: PPUSH
10430: CALL_OW 428
10434: PUSH
10435: LD_VAR 0 1
10439: EQUAL
10440: IFFALSE 10612
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
10442: LD_ADDR_VAR 0 7
10446: PUSH
10447: LD_EXP 45
10451: PUSH
10452: LD_VAR 0 6
10456: ARRAY
10457: PUSH
10458: LD_INT 3
10460: ARRAY
10461: ST_TO_ADDR
// value := value - amount ;
10462: LD_ADDR_VAR 0 7
10466: PUSH
10467: LD_VAR 0 7
10471: PUSH
10472: LD_VAR 0 4
10476: MINUS
10477: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
10478: LD_ADDR_EXP 45
10482: PUSH
10483: LD_EXP 45
10487: PPUSH
10488: LD_VAR 0 6
10492: PPUSH
10493: LD_EXP 45
10497: PUSH
10498: LD_VAR 0 6
10502: ARRAY
10503: PPUSH
10504: LD_INT 3
10506: PPUSH
10507: LD_VAR 0 7
10511: PPUSH
10512: CALL_OW 1
10516: PPUSH
10517: CALL_OW 1
10521: ST_TO_ADDR
// if side in [ your_side , 9 ] then
10522: LD_VAR 0 2
10526: PUSH
10527: LD_OWVAR 2
10531: PUSH
10532: LD_INT 9
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: IN
10539: IFFALSE 10555
// SetUnitDisplayNumber ( building , value ) ;
10541: LD_VAR 0 1
10545: PPUSH
10546: LD_VAR 0 7
10550: PPUSH
10551: CALL_OW 505
// if value <= 0 then
10555: LD_VAR 0 7
10559: PUSH
10560: LD_INT 0
10562: LESSEQUAL
10563: IFFALSE 10612
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
10565: LD_EXP 45
10569: PUSH
10570: LD_VAR 0 6
10574: ARRAY
10575: PUSH
10576: LD_INT 1
10578: ARRAY
10579: PPUSH
10580: LD_EXP 45
10584: PUSH
10585: LD_VAR 0 6
10589: ARRAY
10590: PUSH
10591: LD_INT 2
10593: ARRAY
10594: PPUSH
10595: CALL_OW 63
// KillUnit ( building ) ;
10599: LD_VAR 0 1
10603: PPUSH
10604: CALL_OW 66
// exit ;
10608: POP
10609: POP
10610: GO 10616
// end ; end ; end ;
10612: GO 10397
10614: POP
10615: POP
// end ;
10616: LD_VAR 0 5
10620: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
10621: LD_INT 0
10623: PPUSH
10624: PPUSH
// side := GetSide ( factory ) ;
10625: LD_ADDR_VAR 0 7
10629: PUSH
10630: LD_VAR 0 1
10634: PPUSH
10635: CALL_OW 255
10639: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
10640: LD_VAR 0 5
10644: PUSH
10645: LD_INT 81
10647: EQUAL
10648: IFFALSE 10686
10650: PUSH
10651: LD_INT 22
10653: PUSH
10654: LD_VAR 0 7
10658: PUSH
10659: EMPTY
10660: LIST
10661: LIST
10662: PUSH
10663: LD_INT 34
10665: PUSH
10666: LD_INT 81
10668: PUSH
10669: EMPTY
10670: LIST
10671: LIST
10672: PUSH
10673: EMPTY
10674: LIST
10675: LIST
10676: PPUSH
10677: CALL_OW 69
10681: PUSH
10682: LD_INT 0
10684: GREATER
10685: AND
10686: IFFALSE 10719
// begin ComCancel ( factory ) ;
10688: LD_VAR 0 1
10692: PPUSH
10693: CALL_OW 127
// if side = your_side then
10697: LD_VAR 0 7
10701: PUSH
10702: LD_OWVAR 2
10706: EQUAL
10707: IFFALSE 10719
// HintSpec ( VehLimit , 2 ) ;
10709: LD_STRING VehLimit
10711: PPUSH
10712: LD_INT 2
10714: PPUSH
10715: CALL_OW 338
// end ; end ;
10719: LD_VAR 0 6
10723: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
10724: LD_INT 0
10726: PPUSH
10727: PPUSH
10728: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
10729: LD_VAR 0 1
10733: PPUSH
10734: CALL_OW 264
10738: PUSH
10739: LD_INT 81
10741: EQUAL
10742: IFFALSE 10759
10744: PUSH
10745: LD_VAR 0 1
10749: PPUSH
10750: CALL_OW 263
10754: PUSH
10755: LD_INT 1
10757: EQUAL
10758: AND
10759: IFFALSE 11039
// begin for i := 1 to Count ( minersList ) do
10761: LD_ADDR_VAR 0 6
10765: PUSH
10766: DOUBLE
10767: LD_INT 1
10769: DEC
10770: ST_TO_ADDR
10771: LD_EXP 59
10775: PPUSH
10776: CALL 22573 0 1
10780: PUSH
10781: FOR_TO
10782: IFFALSE 10900
// begin if minersList [ i ] = oldId then
10784: LD_EXP 59
10788: PUSH
10789: LD_VAR 0 6
10793: ARRAY
10794: PUSH
10795: LD_VAR 0 2
10799: EQUAL
10800: IFFALSE 10898
// begin for j := 1 to minerMinesList [ i ] do
10802: LD_ADDR_VAR 0 7
10806: PUSH
10807: DOUBLE
10808: LD_INT 1
10810: DEC
10811: ST_TO_ADDR
10812: LD_EXP 60
10816: PUSH
10817: LD_VAR 0 6
10821: ARRAY
10822: PUSH
10823: FOR_TO
10824: IFFALSE 10874
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
10826: LD_EXP 60
10830: PUSH
10831: LD_VAR 0 6
10835: ARRAY
10836: PUSH
10837: LD_VAR 0 7
10841: ARRAY
10842: PUSH
10843: LD_INT 1
10845: ARRAY
10846: PPUSH
10847: LD_EXP 60
10851: PUSH
10852: LD_VAR 0 6
10856: ARRAY
10857: PUSH
10858: LD_VAR 0 7
10862: ARRAY
10863: PUSH
10864: LD_INT 2
10866: ARRAY
10867: PPUSH
10868: CALL_OW 612
10872: GO 10823
10874: POP
10875: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
10876: LD_ADDR_EXP 60
10880: PUSH
10881: LD_EXP 60
10885: PPUSH
10886: LD_VAR 0 6
10890: PPUSH
10891: CALL_OW 3
10895: ST_TO_ADDR
// break ;
10896: GO 10900
// end ; end ;
10898: GO 10781
10900: POP
10901: POP
// minersList := minersList diff oldId ;
10902: LD_ADDR_EXP 59
10906: PUSH
10907: LD_EXP 59
10911: PUSH
10912: LD_VAR 0 2
10916: DIFF
10917: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
10918: LD_INT 22
10920: PUSH
10921: LD_VAR 0 4
10925: PPUSH
10926: CALL_OW 255
10930: PUSH
10931: EMPTY
10932: LIST
10933: LIST
10934: PUSH
10935: LD_INT 34
10937: PUSH
10938: LD_INT 81
10940: PUSH
10941: EMPTY
10942: LIST
10943: LIST
10944: PUSH
10945: EMPTY
10946: LIST
10947: LIST
10948: PPUSH
10949: CALL_OW 69
10953: PUSH
10954: LD_INT 1
10956: GREATER
10957: IFFALSE 10984
// begin ComExit ( unit ) ;
10959: LD_VAR 0 4
10963: PPUSH
10964: CALL 58947 0 1
// SetSide ( newId , oldSide ) ;
10968: LD_VAR 0 1
10972: PPUSH
10973: LD_VAR 0 3
10977: PPUSH
10978: CALL_OW 235
// exit ;
10982: GO 11039
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
10984: LD_ADDR_EXP 59
10988: PUSH
10989: LD_EXP 59
10993: PPUSH
10994: LD_EXP 59
10998: PUSH
10999: LD_INT 1
11001: PLUS
11002: PPUSH
11003: LD_VAR 0 1
11007: PPUSH
11008: CALL_OW 1
11012: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
11013: LD_ADDR_EXP 60
11017: PUSH
11018: LD_EXP 60
11022: PPUSH
11023: LD_EXP 60
11027: PUSH
11028: LD_INT 1
11030: PLUS
11031: PPUSH
11032: EMPTY
11033: PPUSH
11034: CALL_OW 1
11038: ST_TO_ADDR
// end ; end ; end_of_file
11039: LD_VAR 0 5
11043: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
11044: LD_EXP 41
11048: IFFALSE 11056
11050: PUSH
11051: CALL 11266 0 0
11055: AND
11056: IFFALSE 11064
11058: PUSH
11059: LD_OWVAR 4
11063: AND
11064: IFFALSE 11263
11066: GO 11068
11068: DISABLE
11069: LD_INT 0
11071: PPUSH
11072: PPUSH
// begin canWin := false ;
11073: LD_ADDR_VAR 0 2
11077: PUSH
11078: LD_INT 0
11080: ST_TO_ADDR
// if not HasPower ( your_side ) then
11081: LD_OWVAR 2
11085: PPUSH
11086: CALL 11308 0 1
11090: NOT
11091: IFFALSE 11102
// begin Multiplayer_Loose_Message ;
11093: CALL_OW 521
// enable ( mpLose ) ;
11097: LD_INT 102
11099: ENABLE_MARKED
// end else
11100: GO 11263
// begin canWin := true ;
11102: LD_ADDR_VAR 0 2
11106: PUSH
11107: LD_INT 1
11109: ST_TO_ADDR
// for i := 1 to 8 do
11110: LD_ADDR_VAR 0 1
11114: PUSH
11115: DOUBLE
11116: LD_INT 1
11118: DEC
11119: ST_TO_ADDR
11120: LD_INT 8
11122: PUSH
11123: FOR_TO
11124: IFFALSE 11249
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
11126: LD_EXP 9
11130: PUSH
11131: LD_VAR 0 1
11135: ARRAY
11136: IFFALSE 11149
11138: PUSH
11139: LD_VAR 0 1
11143: PPUSH
11144: CALL_OW 108
11148: AND
11149: IFFALSE 11163
11151: PUSH
11152: LD_VAR 0 1
11156: PUSH
11157: LD_OWVAR 2
11161: NONEQUAL
11162: AND
11163: IFFALSE 11247
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
11165: LD_EXP 10
11169: PUSH
11170: LD_VAR 0 1
11174: ARRAY
11175: NOT
11176: IFTRUE 11224
11178: PUSH
11179: LD_EXP 10
11183: PUSH
11184: LD_VAR 0 1
11188: ARRAY
11189: PUSH
11190: LD_EXP 10
11194: PUSH
11195: LD_OWVAR 2
11199: ARRAY
11200: NONEQUAL
11201: IFFALSE 11223
11203: PUSH
11204: LD_OWVAR 2
11208: PPUSH
11209: LD_VAR 0 1
11213: PPUSH
11214: CALL_OW 81
11218: PUSH
11219: LD_INT 1
11221: NONEQUAL
11222: AND
11223: OR
11224: IFFALSE 11247
// if HasPower ( i ) then
11226: LD_VAR 0 1
11230: PPUSH
11231: CALL 11308 0 1
11235: IFFALSE 11247
// begin canWin := false ;
11237: LD_ADDR_VAR 0 2
11241: PUSH
11242: LD_INT 0
11244: ST_TO_ADDR
// break ;
11245: GO 11249
// end ;
11247: GO 11123
11249: POP
11250: POP
// if canWin then
11251: LD_VAR 0 2
11255: IFFALSE 11262
// enable ( mpWin ) else
11257: LD_INT 101
11259: ENABLE_MARKED
11260: GO 11263
// enable ;
11262: ENABLE
// end ; end ;
11263: PPOPN 2
11265: END
// function CanWinLoose ; begin
11266: LD_INT 0
11268: PPUSH
// result := true ;
11269: LD_ADDR_VAR 0 1
11273: PUSH
11274: LD_INT 1
11276: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
11277: CALL_OW 531
11281: IFFALSE 11293
11283: PUSH
11284: CALL_OW 519
11288: PUSH
11289: LD_INT 1
11291: GREATER
11292: AND
11293: IFFALSE 11303
// result := false ;
11295: LD_ADDR_VAR 0 1
11299: PUSH
11300: LD_INT 0
11302: ST_TO_ADDR
// end ;
11303: LD_VAR 0 1
11307: RET
// function HasPower ( i ) ; begin
11308: LD_INT 0
11310: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
11311: LD_ADDR_VAR 0 2
11315: PUSH
11316: LD_INT 22
11318: PUSH
11319: LD_VAR 0 1
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: PUSH
11328: LD_INT 2
11330: PUSH
11331: LD_INT 21
11333: PUSH
11334: LD_INT 1
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: PUSH
11341: LD_INT 33
11343: PUSH
11344: LD_INT 3
11346: PUSH
11347: EMPTY
11348: LIST
11349: LIST
11350: PUSH
11351: LD_INT 33
11353: PUSH
11354: LD_INT 5
11356: PUSH
11357: EMPTY
11358: LIST
11359: LIST
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: LIST
11365: LIST
11366: PUSH
11367: EMPTY
11368: LIST
11369: LIST
11370: PPUSH
11371: CALL_OW 69
11375: ST_TO_ADDR
// end ; end_of_file
11376: LD_VAR 0 2
11380: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
11381: LD_EXP 41
11385: IFFALSE 11428
11387: GO 11389
11389: DISABLE
11390: LD_INT 0
11392: PPUSH
// begin for i := 1 to 8 do
11393: LD_ADDR_VAR 0 1
11397: PUSH
11398: DOUBLE
11399: LD_INT 1
11401: DEC
11402: ST_TO_ADDR
11403: LD_INT 8
11405: PUSH
11406: FOR_TO
11407: IFFALSE 11426
// SetRestrict ( b_depot , i , state_disabled ) ;
11409: LD_INT 0
11411: PPUSH
11412: LD_VAR 0 1
11416: PPUSH
11417: LD_INT 0
11419: PPUSH
11420: CALL_OW 324
11424: GO 11406
11426: POP
11427: POP
// end ;
11428: PPOPN 1
11430: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
11431: LD_EXP 41
11435: IFFALSE 11443
11437: PUSH
11438: CALL 11653 0 0
11442: AND
11443: IFFALSE 11451
11445: PUSH
11446: LD_OWVAR 4
11450: AND
11451: IFFALSE 11650
11453: GO 11455
11455: DISABLE
11456: LD_INT 0
11458: PPUSH
11459: PPUSH
// begin canWin := false ;
11460: LD_ADDR_VAR 0 2
11464: PUSH
11465: LD_INT 0
11467: ST_TO_ADDR
// if not HasPower ( your_side ) then
11468: LD_OWVAR 2
11472: PPUSH
11473: CALL 11695 0 1
11477: NOT
11478: IFFALSE 11489
// begin Multiplayer_Loose_Message ;
11480: CALL_OW 521
// enable ( mpLose ) ;
11484: LD_INT 102
11486: ENABLE_MARKED
// end else
11487: GO 11650
// begin canWin := true ;
11489: LD_ADDR_VAR 0 2
11493: PUSH
11494: LD_INT 1
11496: ST_TO_ADDR
// for i := 1 to 8 do
11497: LD_ADDR_VAR 0 1
11501: PUSH
11502: DOUBLE
11503: LD_INT 1
11505: DEC
11506: ST_TO_ADDR
11507: LD_INT 8
11509: PUSH
11510: FOR_TO
11511: IFFALSE 11636
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
11513: LD_EXP 9
11517: PUSH
11518: LD_VAR 0 1
11522: ARRAY
11523: IFFALSE 11536
11525: PUSH
11526: LD_VAR 0 1
11530: PPUSH
11531: CALL_OW 108
11535: AND
11536: IFFALSE 11550
11538: PUSH
11539: LD_VAR 0 1
11543: PUSH
11544: LD_OWVAR 2
11548: NONEQUAL
11549: AND
11550: IFFALSE 11634
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
11552: LD_EXP 10
11556: PUSH
11557: LD_VAR 0 1
11561: ARRAY
11562: NOT
11563: IFTRUE 11611
11565: PUSH
11566: LD_EXP 10
11570: PUSH
11571: LD_VAR 0 1
11575: ARRAY
11576: PUSH
11577: LD_EXP 10
11581: PUSH
11582: LD_OWVAR 2
11586: ARRAY
11587: NONEQUAL
11588: IFFALSE 11610
11590: PUSH
11591: LD_OWVAR 2
11595: PPUSH
11596: LD_VAR 0 1
11600: PPUSH
11601: CALL_OW 81
11605: PUSH
11606: LD_INT 1
11608: NONEQUAL
11609: AND
11610: OR
11611: IFFALSE 11634
// if HasPower ( i ) then
11613: LD_VAR 0 1
11617: PPUSH
11618: CALL 11695 0 1
11622: IFFALSE 11634
// begin canWin := false ;
11624: LD_ADDR_VAR 0 2
11628: PUSH
11629: LD_INT 0
11631: ST_TO_ADDR
// break ;
11632: GO 11636
// end ;
11634: GO 11510
11636: POP
11637: POP
// if canWin then
11638: LD_VAR 0 2
11642: IFFALSE 11649
// enable ( mpWin ) else
11644: LD_INT 101
11646: ENABLE_MARKED
11647: GO 11650
// enable ;
11649: ENABLE
// end ; end ;
11650: PPOPN 2
11652: END
// function CanWinLoose ; begin
11653: LD_INT 0
11655: PPUSH
// result := true ;
11656: LD_ADDR_VAR 0 1
11660: PUSH
11661: LD_INT 1
11663: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
11664: CALL_OW 531
11668: IFFALSE 11680
11670: PUSH
11671: CALL_OW 519
11675: PUSH
11676: LD_INT 1
11678: GREATER
11679: AND
11680: IFFALSE 11690
// result := false ;
11682: LD_ADDR_VAR 0 1
11686: PUSH
11687: LD_INT 0
11689: ST_TO_ADDR
// end ;
11690: LD_VAR 0 1
11694: RET
// function HasPower ( i ) ; begin
11695: LD_INT 0
11697: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
11698: LD_INT 22
11700: PUSH
11701: LD_VAR 0 1
11705: PUSH
11706: EMPTY
11707: LIST
11708: LIST
11709: PUSH
11710: LD_INT 2
11712: PUSH
11713: LD_INT 30
11715: PUSH
11716: LD_INT 0
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: PUSH
11723: LD_INT 30
11725: PUSH
11726: LD_INT 1
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: LIST
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: PPUSH
11742: CALL_OW 69
11746: NOT
11747: IFFALSE 11751
// exit ;
11749: GO 11816
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
11751: LD_ADDR_VAR 0 2
11755: PUSH
11756: LD_INT 22
11758: PUSH
11759: LD_VAR 0 1
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: PUSH
11768: LD_INT 2
11770: PUSH
11771: LD_INT 21
11773: PUSH
11774: LD_INT 1
11776: PUSH
11777: EMPTY
11778: LIST
11779: LIST
11780: PUSH
11781: LD_INT 33
11783: PUSH
11784: LD_INT 3
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: PUSH
11791: LD_INT 33
11793: PUSH
11794: LD_INT 5
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: PPUSH
11811: CALL_OW 69
11815: ST_TO_ADDR
// end ; end_of_file
11816: LD_VAR 0 2
11820: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvivalHardcore do var i ;
11821: LD_EXP 41
11825: IFFALSE 11868
11827: GO 11829
11829: DISABLE
11830: LD_INT 0
11832: PPUSH
// begin for i := 1 to 8 do
11833: LD_ADDR_VAR 0 1
11837: PUSH
11838: DOUBLE
11839: LD_INT 1
11841: DEC
11842: ST_TO_ADDR
11843: LD_INT 8
11845: PUSH
11846: FOR_TO
11847: IFFALSE 11866
// SetRestrict ( b_depot , i , state_disabled ) ;
11849: LD_INT 0
11851: PPUSH
11852: LD_VAR 0 1
11856: PPUSH
11857: LD_INT 0
11859: PPUSH
11860: CALL_OW 324
11864: GO 11846
11866: POP
11867: POP
// end ;
11868: PPOPN 1
11870: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvivalHardcore do var i , canWin ;
11871: LD_EXP 41
11875: IFFALSE 11883
11877: PUSH
11878: CALL 12093 0 0
11882: AND
11883: IFFALSE 11891
11885: PUSH
11886: LD_OWVAR 4
11890: AND
11891: IFFALSE 12090
11893: GO 11895
11895: DISABLE
11896: LD_INT 0
11898: PPUSH
11899: PPUSH
// begin canWin := false ;
11900: LD_ADDR_VAR 0 2
11904: PUSH
11905: LD_INT 0
11907: ST_TO_ADDR
// if not HasPower ( your_side ) then
11908: LD_OWVAR 2
11912: PPUSH
11913: CALL 12135 0 1
11917: NOT
11918: IFFALSE 11929
// begin Multiplayer_Loose_Message ;
11920: CALL_OW 521
// enable ( mpLose ) ;
11924: LD_INT 102
11926: ENABLE_MARKED
// end else
11927: GO 12090
// begin canWin := true ;
11929: LD_ADDR_VAR 0 2
11933: PUSH
11934: LD_INT 1
11936: ST_TO_ADDR
// for i := 1 to 8 do
11937: LD_ADDR_VAR 0 1
11941: PUSH
11942: DOUBLE
11943: LD_INT 1
11945: DEC
11946: ST_TO_ADDR
11947: LD_INT 8
11949: PUSH
11950: FOR_TO
11951: IFFALSE 12076
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
11953: LD_EXP 9
11957: PUSH
11958: LD_VAR 0 1
11962: ARRAY
11963: IFFALSE 11976
11965: PUSH
11966: LD_VAR 0 1
11970: PPUSH
11971: CALL_OW 108
11975: AND
11976: IFFALSE 11990
11978: PUSH
11979: LD_VAR 0 1
11983: PUSH
11984: LD_OWVAR 2
11988: NONEQUAL
11989: AND
11990: IFFALSE 12074
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
11992: LD_EXP 10
11996: PUSH
11997: LD_VAR 0 1
12001: ARRAY
12002: NOT
12003: IFTRUE 12051
12005: PUSH
12006: LD_EXP 10
12010: PUSH
12011: LD_VAR 0 1
12015: ARRAY
12016: PUSH
12017: LD_EXP 10
12021: PUSH
12022: LD_OWVAR 2
12026: ARRAY
12027: NONEQUAL
12028: IFFALSE 12050
12030: PUSH
12031: LD_OWVAR 2
12035: PPUSH
12036: LD_VAR 0 1
12040: PPUSH
12041: CALL_OW 81
12045: PUSH
12046: LD_INT 1
12048: NONEQUAL
12049: AND
12050: OR
12051: IFFALSE 12074
// if HasPower ( i ) then
12053: LD_VAR 0 1
12057: PPUSH
12058: CALL 12135 0 1
12062: IFFALSE 12074
// begin canWin := false ;
12064: LD_ADDR_VAR 0 2
12068: PUSH
12069: LD_INT 0
12071: ST_TO_ADDR
// break ;
12072: GO 12076
// end ;
12074: GO 11950
12076: POP
12077: POP
// if canWin then
12078: LD_VAR 0 2
12082: IFFALSE 12089
// enable ( mpWin ) else
12084: LD_INT 101
12086: ENABLE_MARKED
12087: GO 12090
// enable ;
12089: ENABLE
// end ; end ;
12090: PPOPN 2
12092: END
// function CanWinLoose ; begin
12093: LD_INT 0
12095: PPUSH
// result := true ;
12096: LD_ADDR_VAR 0 1
12100: PUSH
12101: LD_INT 1
12103: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
12104: CALL_OW 531
12108: IFFALSE 12120
12110: PUSH
12111: CALL_OW 519
12115: PUSH
12116: LD_INT 1
12118: GREATER
12119: AND
12120: IFFALSE 12130
// result := false ;
12122: LD_ADDR_VAR 0 1
12126: PUSH
12127: LD_INT 0
12129: ST_TO_ADDR
// end ;
12130: LD_VAR 0 1
12134: RET
// function HasPower ( i ) ; begin
12135: LD_INT 0
12137: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
12138: LD_INT 22
12140: PUSH
12141: LD_VAR 0 1
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: PUSH
12150: LD_INT 2
12152: PUSH
12153: LD_INT 30
12155: PUSH
12156: LD_INT 0
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: PUSH
12163: LD_INT 30
12165: PUSH
12166: LD_INT 1
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: PUSH
12173: EMPTY
12174: LIST
12175: LIST
12176: LIST
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: PPUSH
12182: CALL_OW 69
12186: NOT
12187: IFFALSE 12191
// exit ;
12189: GO 12256
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
12191: LD_ADDR_VAR 0 2
12195: PUSH
12196: LD_INT 22
12198: PUSH
12199: LD_VAR 0 1
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: PUSH
12208: LD_INT 2
12210: PUSH
12211: LD_INT 21
12213: PUSH
12214: LD_INT 1
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: PUSH
12221: LD_INT 33
12223: PUSH
12224: LD_INT 3
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: PUSH
12231: LD_INT 33
12233: PUSH
12234: LD_INT 5
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: PPUSH
12251: CALL_OW 69
12255: ST_TO_ADDR
// end ; end_of_file
12256: LD_VAR 0 2
12260: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
12261: LD_VAR 0 1
12265: PUSH
12266: LD_INT 200
12268: DOUBLE
12269: GREATEREQUAL
12270: IFFALSE 12278
12272: LD_INT 299
12274: DOUBLE
12275: LESSEQUAL
12276: IFTRUE 12280
12278: GO 12312
12280: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
12281: LD_VAR 0 1
12285: PPUSH
12286: LD_VAR 0 2
12290: PPUSH
12291: LD_VAR 0 3
12295: PPUSH
12296: LD_VAR 0 4
12300: PPUSH
12301: LD_VAR 0 5
12305: PPUSH
12306: CALL 13174 0 5
12310: GO 12389
12312: LD_INT 300
12314: DOUBLE
12315: GREATEREQUAL
12316: IFFALSE 12324
12318: LD_INT 399
12320: DOUBLE
12321: LESSEQUAL
12322: IFTRUE 12326
12324: GO 12388
12326: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
12327: LD_VAR 0 1
12331: PPUSH
12332: LD_VAR 0 2
12336: PPUSH
12337: LD_VAR 0 3
12341: PPUSH
12342: LD_VAR 0 4
12346: PPUSH
12347: LD_VAR 0 5
12351: PPUSH
12352: LD_VAR 0 6
12356: PPUSH
12357: LD_VAR 0 7
12361: PPUSH
12362: LD_VAR 0 8
12366: PPUSH
12367: LD_VAR 0 9
12371: PPUSH
12372: LD_VAR 0 10
12376: PPUSH
12377: LD_VAR 0 11
12381: PPUSH
12382: CALL 19499 0 11
12386: GO 12389
12388: POP
// end ;
12389: PPOPN 11
12391: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
12392: LD_VAR 0 1
12396: PPUSH
12397: LD_VAR 0 2
12401: PPUSH
12402: LD_VAR 0 3
12406: PPUSH
12407: LD_VAR 0 4
12411: PPUSH
12412: LD_VAR 0 5
12416: PPUSH
12417: CALL 12474 0 5
// end ; end_of_file
12421: PPOPN 5
12423: END
// export function SOS_UnitDestroyed ( un ) ; begin
12424: LD_INT 0
12426: PPUSH
// ComRadiation ( un ) ;
12427: LD_VAR 0 1
12431: PPUSH
12432: CALL 13594 0 1
// end ;
12436: LD_VAR 0 2
12440: RET
// export function SOS_UnitKamikazed ( un ) ; begin
12441: LD_INT 0
12443: PPUSH
// ComRadiation ( un ) ;
12444: LD_VAR 0 1
12448: PPUSH
12449: CALL 13594 0 1
// end ;
12453: LD_VAR 0 2
12457: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
12458: LD_INT 0
12460: PPUSH
// end ;
12461: LD_VAR 0 4
12465: RET
// export function SOS_Command ( cmd ) ; begin
12466: LD_INT 0
12468: PPUSH
// end ;
12469: LD_VAR 0 2
12473: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
12474: LD_INT 0
12476: PPUSH
// end ;
12477: LD_VAR 0 6
12481: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
12482: LD_INT 0
12484: PPUSH
12485: PPUSH
12486: PPUSH
12487: PPUSH
12488: PPUSH
// if not vehicle or not factory then
12489: LD_VAR 0 1
12493: NOT
12494: IFTRUE 12503
12496: PUSH
12497: LD_VAR 0 2
12501: NOT
12502: OR
12503: IFFALSE 12507
// exit ;
12505: GO 13169
// weapon := GetWeapon ( vehicle ) ;
12507: LD_ADDR_VAR 0 7
12511: PUSH
12512: LD_VAR 0 1
12516: PPUSH
12517: CALL_OW 264
12521: ST_TO_ADDR
// if weapon = ar_miner then
12522: LD_VAR 0 7
12526: PUSH
12527: LD_INT 81
12529: EQUAL
12530: IFFALSE 12587
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
12532: LD_ADDR_EXP 59
12536: PUSH
12537: LD_EXP 59
12541: PPUSH
12542: LD_EXP 59
12546: PUSH
12547: LD_INT 1
12549: PLUS
12550: PPUSH
12551: LD_VAR 0 1
12555: PPUSH
12556: CALL_OW 1
12560: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
12561: LD_ADDR_EXP 60
12565: PUSH
12566: LD_EXP 60
12570: PPUSH
12571: LD_EXP 60
12575: PUSH
12576: LD_INT 1
12578: PLUS
12579: PPUSH
12580: EMPTY
12581: PPUSH
12582: CALL_OW 1
12586: ST_TO_ADDR
// end ; if not factoryWaypoints then
12587: LD_EXP 62
12591: NOT
12592: IFFALSE 12596
// exit ;
12594: GO 13169
// for i := 1 to Count ( factoryWaypoints ) do
12596: LD_ADDR_VAR 0 4
12600: PUSH
12601: DOUBLE
12602: LD_INT 1
12604: DEC
12605: ST_TO_ADDR
12606: LD_EXP 62
12610: PPUSH
12611: CALL 22573 0 1
12615: PUSH
12616: FOR_TO
12617: IFFALSE 13167
// if factoryWaypoints [ i ] [ 2 ] = factory then
12619: LD_EXP 62
12623: PUSH
12624: LD_VAR 0 4
12628: ARRAY
12629: PUSH
12630: LD_INT 2
12632: ARRAY
12633: PUSH
12634: LD_VAR 0 2
12638: EQUAL
12639: IFFALSE 13165
// begin if GetControl ( vehicle ) = control_manual then
12641: LD_VAR 0 1
12645: PPUSH
12646: CALL_OW 263
12650: PUSH
12651: LD_INT 1
12653: EQUAL
12654: IFFALSE 13018
// begin driver := IsDrivenBy ( vehicle ) ;
12656: LD_ADDR_VAR 0 5
12660: PUSH
12661: LD_VAR 0 1
12665: PPUSH
12666: CALL_OW 311
12670: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
12671: LD_VAR 0 5
12675: PUSH
12676: LD_EXP 63
12680: IN
12681: IFTRUE 12695
12683: PUSH
12684: LD_VAR 0 1
12688: PUSH
12689: LD_EXP 63
12693: IN
12694: OR
12695: IFFALSE 12701
// exit ;
12697: POP
12698: POP
12699: GO 13169
// if not HasTask ( driver ) then
12701: LD_VAR 0 5
12705: PPUSH
12706: CALL_OW 314
12710: NOT
12711: IFFALSE 13016
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
12713: LD_ADDR_EXP 63
12717: PUSH
12718: LD_EXP 63
12722: PPUSH
12723: LD_VAR 0 5
12727: PPUSH
12728: CALL 58549 0 2
12732: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
12733: LD_ADDR_EXP 63
12737: PUSH
12738: LD_EXP 63
12742: PPUSH
12743: LD_VAR 0 1
12747: PPUSH
12748: CALL 58549 0 2
12752: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
12753: LD_ADDR_VAR 0 6
12757: PUSH
12758: LD_EXP 62
12762: PUSH
12763: LD_VAR 0 4
12767: ARRAY
12768: PUSH
12769: LD_INT 3
12771: ARRAY
12772: PPUSH
12773: LD_EXP 62
12777: PUSH
12778: LD_VAR 0 4
12782: ARRAY
12783: PUSH
12784: LD_INT 4
12786: ARRAY
12787: PPUSH
12788: CALL_OW 428
12792: ST_TO_ADDR
// if hex then
12793: LD_VAR 0 6
12797: IFFALSE 12815
// ComMoveUnit ( driver , hex ) else
12799: LD_VAR 0 5
12803: PPUSH
12804: LD_VAR 0 6
12808: PPUSH
12809: CALL_OW 112
12813: GO 12899
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
12815: LD_VAR 0 1
12819: PPUSH
12820: LD_EXP 62
12824: PUSH
12825: LD_VAR 0 4
12829: ARRAY
12830: PUSH
12831: LD_INT 3
12833: ARRAY
12834: PPUSH
12835: LD_EXP 62
12839: PUSH
12840: LD_VAR 0 4
12844: ARRAY
12845: PUSH
12846: LD_INT 4
12848: ARRAY
12849: PPUSH
12850: CALL_OW 297
12854: PUSH
12855: LD_INT 0
12857: GREATER
12858: IFFALSE 12899
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
12860: LD_VAR 0 5
12864: PPUSH
12865: LD_EXP 62
12869: PUSH
12870: LD_VAR 0 4
12874: ARRAY
12875: PUSH
12876: LD_INT 3
12878: ARRAY
12879: PPUSH
12880: LD_EXP 62
12884: PUSH
12885: LD_VAR 0 4
12889: ARRAY
12890: PUSH
12891: LD_INT 4
12893: ARRAY
12894: PPUSH
12895: CALL_OW 111
// AddComExitVehicle ( driver ) ;
12899: LD_VAR 0 5
12903: PPUSH
12904: CALL_OW 181
// if Multiplayer then
12908: LD_OWVAR 4
12912: IFFALSE 12961
// begin repeat wait ( 10 ) ;
12914: LD_INT 10
12916: PPUSH
12917: CALL_OW 67
// until not IsInUnit ( driver ) ;
12921: LD_VAR 0 5
12925: PPUSH
12926: CALL_OW 310
12930: NOT
12931: IFFALSE 12914
// if not HasTask ( driver ) then
12933: LD_VAR 0 5
12937: PPUSH
12938: CALL_OW 314
12942: NOT
12943: IFFALSE 12959
// ComEnterUnit ( driver , factory ) ;
12945: LD_VAR 0 5
12949: PPUSH
12950: LD_VAR 0 2
12954: PPUSH
12955: CALL_OW 120
// end else
12959: GO 12975
// AddComEnterUnit ( driver , factory ) ;
12961: LD_VAR 0 5
12965: PPUSH
12966: LD_VAR 0 2
12970: PPUSH
12971: CALL_OW 180
// wait ( 0 0$1 ) ;
12975: LD_INT 35
12977: PPUSH
12978: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
12982: LD_ADDR_EXP 63
12986: PUSH
12987: LD_EXP 63
12991: PUSH
12992: LD_VAR 0 5
12996: DIFF
12997: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
12998: LD_ADDR_EXP 63
13002: PUSH
13003: LD_EXP 63
13007: PUSH
13008: LD_VAR 0 1
13012: DIFF
13013: ST_TO_ADDR
// break ;
13014: GO 13167
// end ; end else
13016: GO 13165
// if GetControl ( vehicle ) = control_remote then
13018: LD_VAR 0 1
13022: PPUSH
13023: CALL_OW 263
13027: PUSH
13028: LD_INT 2
13030: EQUAL
13031: IFFALSE 13117
// begin wait ( 0 0$2 ) ;
13033: LD_INT 70
13035: PPUSH
13036: CALL_OW 67
// repeat wait ( 10 ) ;
13040: LD_INT 10
13042: PPUSH
13043: CALL_OW 67
// Connect ( vehicle ) ;
13047: LD_VAR 0 1
13051: PPUSH
13052: CALL 28851 0 1
// until IsControledBy ( vehicle ) ;
13056: LD_VAR 0 1
13060: PPUSH
13061: CALL_OW 312
13065: IFFALSE 13040
// wait ( 10 ) ;
13067: LD_INT 10
13069: PPUSH
13070: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
13074: LD_VAR 0 1
13078: PPUSH
13079: LD_EXP 62
13083: PUSH
13084: LD_VAR 0 4
13088: ARRAY
13089: PUSH
13090: LD_INT 3
13092: ARRAY
13093: PPUSH
13094: LD_EXP 62
13098: PUSH
13099: LD_VAR 0 4
13103: ARRAY
13104: PUSH
13105: LD_INT 4
13107: ARRAY
13108: PPUSH
13109: CALL_OW 111
// break ;
13113: GO 13167
// end else
13115: GO 13165
// begin wait ( 0 0$3 ) ;
13117: LD_INT 105
13119: PPUSH
13120: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
13124: LD_VAR 0 1
13128: PPUSH
13129: LD_EXP 62
13133: PUSH
13134: LD_VAR 0 4
13138: ARRAY
13139: PUSH
13140: LD_INT 3
13142: ARRAY
13143: PPUSH
13144: LD_EXP 62
13148: PUSH
13149: LD_VAR 0 4
13153: ARRAY
13154: PUSH
13155: LD_INT 4
13157: ARRAY
13158: PPUSH
13159: CALL_OW 111
// break ;
13163: GO 13167
// end ; end ;
13165: GO 12616
13167: POP
13168: POP
// end ;
13169: LD_VAR 0 3
13173: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
13174: LD_INT 0
13176: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
13177: LD_VAR 0 1
13181: PUSH
13182: LD_INT 250
13184: EQUAL
13185: IFFALSE 13202
13187: PUSH
13188: LD_VAR 0 2
13192: PPUSH
13193: CALL_OW 264
13197: PUSH
13198: LD_INT 81
13200: EQUAL
13201: AND
13202: IFFALSE 13223
// MinerPlaceMine ( unit , x , y ) ;
13204: LD_VAR 0 2
13208: PPUSH
13209: LD_VAR 0 4
13213: PPUSH
13214: LD_VAR 0 5
13218: PPUSH
13219: CALL 16569 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
13223: LD_VAR 0 1
13227: PUSH
13228: LD_INT 251
13230: EQUAL
13231: IFFALSE 13248
13233: PUSH
13234: LD_VAR 0 2
13238: PPUSH
13239: CALL_OW 264
13243: PUSH
13244: LD_INT 81
13246: EQUAL
13247: AND
13248: IFFALSE 13269
// MinerDetonateMine ( unit , x , y ) ;
13250: LD_VAR 0 2
13254: PPUSH
13255: LD_VAR 0 4
13259: PPUSH
13260: LD_VAR 0 5
13264: PPUSH
13265: CALL 16976 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
13269: LD_VAR 0 1
13273: PUSH
13274: LD_INT 252
13276: EQUAL
13277: IFFALSE 13294
13279: PUSH
13280: LD_VAR 0 2
13284: PPUSH
13285: CALL_OW 264
13289: PUSH
13290: LD_INT 81
13292: EQUAL
13293: AND
13294: IFFALSE 13315
// MinerCreateMinefield ( unit , x , y ) ;
13296: LD_VAR 0 2
13300: PPUSH
13301: LD_VAR 0 4
13305: PPUSH
13306: LD_VAR 0 5
13310: PPUSH
13311: CALL 17208 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
13315: LD_VAR 0 1
13319: PUSH
13320: LD_INT 253
13322: EQUAL
13323: IFFALSE 13340
13325: PUSH
13326: LD_VAR 0 2
13330: PPUSH
13331: CALL_OW 257
13335: PUSH
13336: LD_INT 5
13338: EQUAL
13339: AND
13340: IFFALSE 13361
// ComBinocular ( unit , x , y ) ;
13342: LD_VAR 0 2
13346: PPUSH
13347: LD_VAR 0 4
13351: PPUSH
13352: LD_VAR 0 5
13356: PPUSH
13357: CALL 17583 0 3
// if selectedUnit then
13361: LD_VAR 0 3
13365: IFFALSE 13425
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
13367: LD_VAR 0 1
13371: PUSH
13372: LD_INT 254
13374: EQUAL
13375: IFFALSE 13392
13377: PUSH
13378: LD_VAR 0 2
13382: PPUSH
13383: CALL_OW 264
13387: PUSH
13388: LD_INT 99
13390: EQUAL
13391: AND
13392: IFFALSE 13409
13394: PUSH
13395: LD_VAR 0 3
13399: PPUSH
13400: CALL_OW 263
13404: PUSH
13405: LD_INT 3
13407: EQUAL
13408: AND
13409: IFFALSE 13425
// HackDestroyVehicle ( unit , selectedUnit ) ;
13411: LD_VAR 0 2
13415: PPUSH
13416: LD_VAR 0 3
13420: PPUSH
13421: CALL 15759 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
13425: LD_VAR 0 1
13429: PUSH
13430: LD_INT 255
13432: EQUAL
13433: IFFALSE 13457
13435: PUSH
13436: LD_VAR 0 2
13440: PPUSH
13441: CALL_OW 264
13445: PUSH
13446: LD_INT 14
13448: PUSH
13449: LD_INT 53
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: IN
13456: AND
13457: IFFALSE 13475
13459: PUSH
13460: LD_VAR 0 4
13464: PPUSH
13465: LD_VAR 0 5
13469: PPUSH
13470: CALL_OW 488
13474: AND
13475: IFFALSE 13499
// CutTreeXYR ( unit , x , y , 12 ) ;
13477: LD_VAR 0 2
13481: PPUSH
13482: LD_VAR 0 4
13486: PPUSH
13487: LD_VAR 0 5
13491: PPUSH
13492: LD_INT 12
13494: PPUSH
13495: CALL 13690 0 4
// if cmd = 256 then
13499: LD_VAR 0 1
13503: PUSH
13504: LD_INT 256
13506: EQUAL
13507: IFFALSE 13528
// SetFactoryWaypoint ( unit , x , y ) ;
13509: LD_VAR 0 2
13513: PPUSH
13514: LD_VAR 0 4
13518: PPUSH
13519: LD_VAR 0 5
13523: PPUSH
13524: CALL 19507 0 3
// if cmd = 257 then
13528: LD_VAR 0 1
13532: PUSH
13533: LD_INT 257
13535: EQUAL
13536: IFFALSE 13557
// SetWarehouseGatheringPoint ( unit , x , y ) ;
13538: LD_VAR 0 2
13542: PPUSH
13543: LD_VAR 0 4
13547: PPUSH
13548: LD_VAR 0 5
13552: PPUSH
13553: CALL 20003 0 3
// if cmd = 258 then
13557: LD_VAR 0 1
13561: PUSH
13562: LD_INT 258
13564: EQUAL
13565: IFFALSE 13589
// BurnTreeXYR ( unit , x , y , 8 ) ;
13567: LD_VAR 0 2
13571: PPUSH
13572: LD_VAR 0 4
13576: PPUSH
13577: LD_VAR 0 5
13581: PPUSH
13582: LD_INT 8
13584: PPUSH
13585: CALL 14112 0 4
// end ;
13589: LD_VAR 0 6
13593: RET
// export function ComRadiation ( un ) ; var eff ; begin
13594: LD_INT 0
13596: PPUSH
13597: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
13598: LD_VAR 0 1
13602: PPUSH
13603: CALL_OW 264
13607: PUSH
13608: LD_INT 91
13610: NONEQUAL
13611: IFFALSE 13615
// exit ;
13613: GO 13685
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
13615: LD_INT 68
13617: PPUSH
13618: LD_VAR 0 1
13622: PPUSH
13623: CALL_OW 255
13627: PPUSH
13628: CALL_OW 321
13632: PUSH
13633: LD_INT 2
13635: EQUAL
13636: IFFALSE 13648
// eff := 50 else
13638: LD_ADDR_VAR 0 3
13642: PUSH
13643: LD_INT 50
13645: ST_TO_ADDR
13646: GO 13656
// eff := 25 ;
13648: LD_ADDR_VAR 0 3
13652: PUSH
13653: LD_INT 25
13655: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
13656: LD_VAR 0 1
13660: PPUSH
13661: CALL_OW 250
13665: PPUSH
13666: LD_VAR 0 1
13670: PPUSH
13671: CALL_OW 251
13675: PPUSH
13676: LD_VAR 0 3
13680: PPUSH
13681: CALL_OW 495
// end ;
13685: LD_VAR 0 2
13689: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
13690: LD_INT 0
13692: PPUSH
13693: PPUSH
13694: PPUSH
13695: PPUSH
13696: PPUSH
13697: PPUSH
13698: PPUSH
13699: PPUSH
13700: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
13701: LD_VAR 0 1
13705: PPUSH
13706: CALL_OW 302
13710: NOT
13711: IFTRUE 13730
13713: PUSH
13714: LD_VAR 0 2
13718: PPUSH
13719: LD_VAR 0 3
13723: PPUSH
13724: CALL_OW 488
13728: NOT
13729: OR
13730: IFTRUE 13739
13732: PUSH
13733: LD_VAR 0 4
13737: NOT
13738: OR
13739: IFFALSE 13743
// exit ;
13741: GO 14107
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
13743: LD_VAR 0 1
13747: PPUSH
13748: CALL_OW 437
13752: PPUSH
13753: CALL 22573 0 1
13757: PUSH
13758: LD_INT 10
13760: GREATER
13761: IFFALSE 13765
// exit ;
13763: GO 14107
// list := [ ] ;
13765: LD_ADDR_VAR 0 13
13769: PUSH
13770: EMPTY
13771: ST_TO_ADDR
// if x - r < 0 then
13772: LD_VAR 0 2
13776: PUSH
13777: LD_VAR 0 4
13781: MINUS
13782: PUSH
13783: LD_INT 0
13785: LESS
13786: IFFALSE 13798
// min_x := 0 else
13788: LD_ADDR_VAR 0 7
13792: PUSH
13793: LD_INT 0
13795: ST_TO_ADDR
13796: GO 13814
// min_x := x - r ;
13798: LD_ADDR_VAR 0 7
13802: PUSH
13803: LD_VAR 0 2
13807: PUSH
13808: LD_VAR 0 4
13812: MINUS
13813: ST_TO_ADDR
// if y - r < 0 then
13814: LD_VAR 0 3
13818: PUSH
13819: LD_VAR 0 4
13823: MINUS
13824: PUSH
13825: LD_INT 0
13827: LESS
13828: IFFALSE 13840
// min_y := 0 else
13830: LD_ADDR_VAR 0 8
13834: PUSH
13835: LD_INT 0
13837: ST_TO_ADDR
13838: GO 13856
// min_y := y - r ;
13840: LD_ADDR_VAR 0 8
13844: PUSH
13845: LD_VAR 0 3
13849: PUSH
13850: LD_VAR 0 4
13854: MINUS
13855: ST_TO_ADDR
// max_x := x + r ;
13856: LD_ADDR_VAR 0 9
13860: PUSH
13861: LD_VAR 0 2
13865: PUSH
13866: LD_VAR 0 4
13870: PLUS
13871: ST_TO_ADDR
// max_y := y + r ;
13872: LD_ADDR_VAR 0 10
13876: PUSH
13877: LD_VAR 0 3
13881: PUSH
13882: LD_VAR 0 4
13886: PLUS
13887: ST_TO_ADDR
// for _x = min_x to max_x do
13888: LD_ADDR_VAR 0 11
13892: PUSH
13893: DOUBLE
13894: LD_VAR 0 7
13898: DEC
13899: ST_TO_ADDR
13900: LD_VAR 0 9
13904: PUSH
13905: FOR_TO
13906: IFFALSE 14025
// for _y = min_y to max_y do
13908: LD_ADDR_VAR 0 12
13912: PUSH
13913: DOUBLE
13914: LD_VAR 0 8
13918: DEC
13919: ST_TO_ADDR
13920: LD_VAR 0 10
13924: PUSH
13925: FOR_TO
13926: IFFALSE 14021
// begin if not ValidHex ( _x , _y ) then
13928: LD_VAR 0 11
13932: PPUSH
13933: LD_VAR 0 12
13937: PPUSH
13938: CALL_OW 488
13942: NOT
13943: IFFALSE 13947
// continue ;
13945: GO 13925
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
13947: LD_VAR 0 11
13951: PPUSH
13952: LD_VAR 0 12
13956: PPUSH
13957: CALL_OW 351
13961: IFFALSE 13979
13963: PUSH
13964: LD_VAR 0 11
13968: PPUSH
13969: LD_VAR 0 12
13973: PPUSH
13974: CALL_OW 554
13978: AND
13979: IFFALSE 14019
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
13981: LD_ADDR_VAR 0 13
13985: PUSH
13986: LD_VAR 0 13
13990: PPUSH
13991: LD_VAR 0 13
13995: PUSH
13996: LD_INT 1
13998: PLUS
13999: PPUSH
14000: LD_VAR 0 11
14004: PUSH
14005: LD_VAR 0 12
14009: PUSH
14010: EMPTY
14011: LIST
14012: LIST
14013: PPUSH
14014: CALL_OW 2
14018: ST_TO_ADDR
// end ;
14019: GO 13925
14021: POP
14022: POP
14023: GO 13905
14025: POP
14026: POP
// if not list then
14027: LD_VAR 0 13
14031: NOT
14032: IFFALSE 14036
// exit ;
14034: GO 14107
// for i in list do
14036: LD_ADDR_VAR 0 6
14040: PUSH
14041: LD_VAR 0 13
14045: PUSH
14046: FOR_IN
14047: IFFALSE 14105
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
14049: LD_VAR 0 1
14053: PPUSH
14054: LD_STRING M
14056: PUSH
14057: LD_VAR 0 6
14061: PUSH
14062: LD_INT 1
14064: ARRAY
14065: PUSH
14066: LD_VAR 0 6
14070: PUSH
14071: LD_INT 2
14073: ARRAY
14074: PUSH
14075: LD_INT 0
14077: PUSH
14078: LD_INT 0
14080: PUSH
14081: LD_INT 0
14083: PUSH
14084: LD_INT 0
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: PUSH
14096: EMPTY
14097: LIST
14098: PPUSH
14099: CALL_OW 447
14103: GO 14046
14105: POP
14106: POP
// end ;
14107: LD_VAR 0 5
14111: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
14112: LD_INT 0
14114: PPUSH
14115: PPUSH
14116: PPUSH
14117: PPUSH
14118: PPUSH
14119: PPUSH
14120: PPUSH
14121: PPUSH
14122: PPUSH
14123: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
14124: LD_VAR 0 1
14128: PPUSH
14129: CALL_OW 302
14133: NOT
14134: IFTRUE 14153
14136: PUSH
14137: LD_VAR 0 2
14141: PPUSH
14142: LD_VAR 0 3
14146: PPUSH
14147: CALL_OW 488
14151: NOT
14152: OR
14153: IFTRUE 14162
14155: PUSH
14156: LD_VAR 0 4
14160: NOT
14161: OR
14162: IFFALSE 14166
// exit ;
14164: GO 14705
// if Count ( GetTaskList ( flame ) ) > 10 then
14166: LD_VAR 0 1
14170: PPUSH
14171: CALL_OW 437
14175: PPUSH
14176: CALL 22573 0 1
14180: PUSH
14181: LD_INT 10
14183: GREATER
14184: IFFALSE 14188
// exit ;
14186: GO 14705
// list := [ ] ;
14188: LD_ADDR_VAR 0 13
14192: PUSH
14193: EMPTY
14194: ST_TO_ADDR
// if x - r < 0 then
14195: LD_VAR 0 2
14199: PUSH
14200: LD_VAR 0 4
14204: MINUS
14205: PUSH
14206: LD_INT 0
14208: LESS
14209: IFFALSE 14221
// min_x := 0 else
14211: LD_ADDR_VAR 0 7
14215: PUSH
14216: LD_INT 0
14218: ST_TO_ADDR
14219: GO 14237
// min_x := x - r ;
14221: LD_ADDR_VAR 0 7
14225: PUSH
14226: LD_VAR 0 2
14230: PUSH
14231: LD_VAR 0 4
14235: MINUS
14236: ST_TO_ADDR
// if y - r < 0 then
14237: LD_VAR 0 3
14241: PUSH
14242: LD_VAR 0 4
14246: MINUS
14247: PUSH
14248: LD_INT 0
14250: LESS
14251: IFFALSE 14263
// min_y := 0 else
14253: LD_ADDR_VAR 0 8
14257: PUSH
14258: LD_INT 0
14260: ST_TO_ADDR
14261: GO 14279
// min_y := y - r ;
14263: LD_ADDR_VAR 0 8
14267: PUSH
14268: LD_VAR 0 3
14272: PUSH
14273: LD_VAR 0 4
14277: MINUS
14278: ST_TO_ADDR
// max_x := x + r ;
14279: LD_ADDR_VAR 0 9
14283: PUSH
14284: LD_VAR 0 2
14288: PUSH
14289: LD_VAR 0 4
14293: PLUS
14294: ST_TO_ADDR
// max_y := y + r ;
14295: LD_ADDR_VAR 0 10
14299: PUSH
14300: LD_VAR 0 3
14304: PUSH
14305: LD_VAR 0 4
14309: PLUS
14310: ST_TO_ADDR
// for _x = min_x to max_x do
14311: LD_ADDR_VAR 0 11
14315: PUSH
14316: DOUBLE
14317: LD_VAR 0 7
14321: DEC
14322: ST_TO_ADDR
14323: LD_VAR 0 9
14327: PUSH
14328: FOR_TO
14329: IFFALSE 14448
// for _y = min_y to max_y do
14331: LD_ADDR_VAR 0 12
14335: PUSH
14336: DOUBLE
14337: LD_VAR 0 8
14341: DEC
14342: ST_TO_ADDR
14343: LD_VAR 0 10
14347: PUSH
14348: FOR_TO
14349: IFFALSE 14444
// begin if not ValidHex ( _x , _y ) then
14351: LD_VAR 0 11
14355: PPUSH
14356: LD_VAR 0 12
14360: PPUSH
14361: CALL_OW 488
14365: NOT
14366: IFFALSE 14370
// continue ;
14368: GO 14348
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
14370: LD_VAR 0 11
14374: PPUSH
14375: LD_VAR 0 12
14379: PPUSH
14380: CALL_OW 351
14384: IFFALSE 14402
14386: PUSH
14387: LD_VAR 0 11
14391: PPUSH
14392: LD_VAR 0 12
14396: PPUSH
14397: CALL_OW 554
14401: AND
14402: IFFALSE 14442
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
14404: LD_ADDR_VAR 0 13
14408: PUSH
14409: LD_VAR 0 13
14413: PPUSH
14414: LD_VAR 0 13
14418: PUSH
14419: LD_INT 1
14421: PLUS
14422: PPUSH
14423: LD_VAR 0 11
14427: PUSH
14428: LD_VAR 0 12
14432: PUSH
14433: EMPTY
14434: LIST
14435: LIST
14436: PPUSH
14437: CALL_OW 2
14441: ST_TO_ADDR
// end ;
14442: GO 14348
14444: POP
14445: POP
14446: GO 14328
14448: POP
14449: POP
// if not list then
14450: LD_VAR 0 13
14454: NOT
14455: IFFALSE 14459
// exit ;
14457: GO 14705
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
14459: LD_ADDR_VAR 0 13
14463: PUSH
14464: LD_VAR 0 1
14468: PPUSH
14469: LD_VAR 0 13
14473: PPUSH
14474: LD_INT 1
14476: PPUSH
14477: LD_INT 1
14479: PPUSH
14480: CALL 25979 0 4
14484: ST_TO_ADDR
// ComStop ( flame ) ;
14485: LD_VAR 0 1
14489: PPUSH
14490: CALL_OW 141
// for i in list do
14494: LD_ADDR_VAR 0 6
14498: PUSH
14499: LD_VAR 0 13
14503: PUSH
14504: FOR_IN
14505: IFFALSE 14536
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
14507: LD_VAR 0 1
14511: PPUSH
14512: LD_VAR 0 6
14516: PUSH
14517: LD_INT 1
14519: ARRAY
14520: PPUSH
14521: LD_VAR 0 6
14525: PUSH
14526: LD_INT 2
14528: ARRAY
14529: PPUSH
14530: CALL_OW 176
14534: GO 14504
14536: POP
14537: POP
// repeat wait ( 0 0$1 ) ;
14538: LD_INT 35
14540: PPUSH
14541: CALL_OW 67
// task := GetTaskList ( flame ) ;
14545: LD_ADDR_VAR 0 14
14549: PUSH
14550: LD_VAR 0 1
14554: PPUSH
14555: CALL_OW 437
14559: ST_TO_ADDR
// if not task then
14560: LD_VAR 0 14
14564: NOT
14565: IFFALSE 14569
// exit ;
14567: GO 14705
// if task [ 1 ] [ 1 ] <> | then
14569: LD_VAR 0 14
14573: PUSH
14574: LD_INT 1
14576: ARRAY
14577: PUSH
14578: LD_INT 1
14580: ARRAY
14581: PUSH
14582: LD_STRING |
14584: NONEQUAL
14585: IFFALSE 14589
// exit ;
14587: GO 14705
// _x := task [ 1 ] [ 2 ] ;
14589: LD_ADDR_VAR 0 11
14593: PUSH
14594: LD_VAR 0 14
14598: PUSH
14599: LD_INT 1
14601: ARRAY
14602: PUSH
14603: LD_INT 2
14605: ARRAY
14606: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
14607: LD_ADDR_VAR 0 12
14611: PUSH
14612: LD_VAR 0 14
14616: PUSH
14617: LD_INT 1
14619: ARRAY
14620: PUSH
14621: LD_INT 3
14623: ARRAY
14624: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
14625: LD_VAR 0 11
14629: PPUSH
14630: LD_VAR 0 12
14634: PPUSH
14635: CALL_OW 351
14639: NOT
14640: IFTRUE 14659
14642: PUSH
14643: LD_VAR 0 11
14647: PPUSH
14648: LD_VAR 0 12
14652: PPUSH
14653: CALL_OW 554
14657: NOT
14658: OR
14659: IFFALSE 14693
// begin task := Delete ( task , 1 ) ;
14661: LD_ADDR_VAR 0 14
14665: PUSH
14666: LD_VAR 0 14
14670: PPUSH
14671: LD_INT 1
14673: PPUSH
14674: CALL_OW 3
14678: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
14679: LD_VAR 0 1
14683: PPUSH
14684: LD_VAR 0 14
14688: PPUSH
14689: CALL_OW 446
// end ; until not HasTask ( flame ) ;
14693: LD_VAR 0 1
14697: PPUSH
14698: CALL_OW 314
14702: NOT
14703: IFFALSE 14538
// end ;
14705: LD_VAR 0 5
14709: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
14710: LD_EXP 52
14714: NOT
14715: IFFALSE 14765
14717: GO 14719
14719: DISABLE
// begin initHack := true ;
14720: LD_ADDR_EXP 52
14724: PUSH
14725: LD_INT 1
14727: ST_TO_ADDR
// hackTanks := [ ] ;
14728: LD_ADDR_EXP 53
14732: PUSH
14733: EMPTY
14734: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
14735: LD_ADDR_EXP 54
14739: PUSH
14740: EMPTY
14741: ST_TO_ADDR
// hackLimit := 3 ;
14742: LD_ADDR_EXP 55
14746: PUSH
14747: LD_INT 3
14749: ST_TO_ADDR
// hackDist := 12 ;
14750: LD_ADDR_EXP 56
14754: PUSH
14755: LD_INT 12
14757: ST_TO_ADDR
// hackCounter := [ ] ;
14758: LD_ADDR_EXP 57
14762: PUSH
14763: EMPTY
14764: ST_TO_ADDR
// end ;
14765: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
14766: LD_EXP 52
14770: IFFALSE 14788
14772: PUSH
14773: LD_INT 34
14775: PUSH
14776: LD_INT 99
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: PPUSH
14783: CALL_OW 69
14787: AND
14788: IFFALSE 15041
14790: GO 14792
14792: DISABLE
14793: LD_INT 0
14795: PPUSH
14796: PPUSH
// begin enable ;
14797: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
14798: LD_ADDR_VAR 0 1
14802: PUSH
14803: LD_INT 34
14805: PUSH
14806: LD_INT 99
14808: PUSH
14809: EMPTY
14810: LIST
14811: LIST
14812: PPUSH
14813: CALL_OW 69
14817: PUSH
14818: FOR_IN
14819: IFFALSE 15039
// begin if not i in hackTanks then
14821: LD_VAR 0 1
14825: PUSH
14826: LD_EXP 53
14830: IN
14831: NOT
14832: IFFALSE 14915
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
14834: LD_ADDR_EXP 53
14838: PUSH
14839: LD_EXP 53
14843: PPUSH
14844: LD_EXP 53
14848: PUSH
14849: LD_INT 1
14851: PLUS
14852: PPUSH
14853: LD_VAR 0 1
14857: PPUSH
14858: CALL_OW 1
14862: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
14863: LD_ADDR_EXP 54
14867: PUSH
14868: LD_EXP 54
14872: PPUSH
14873: LD_EXP 54
14877: PUSH
14878: LD_INT 1
14880: PLUS
14881: PPUSH
14882: EMPTY
14883: PPUSH
14884: CALL_OW 1
14888: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
14889: LD_ADDR_EXP 57
14893: PUSH
14894: LD_EXP 57
14898: PPUSH
14899: LD_EXP 57
14903: PUSH
14904: LD_INT 1
14906: PLUS
14907: PPUSH
14908: EMPTY
14909: PPUSH
14910: CALL_OW 1
14914: ST_TO_ADDR
// end ; if not IsOk ( i ) then
14915: LD_VAR 0 1
14919: PPUSH
14920: CALL_OW 302
14924: NOT
14925: IFFALSE 14938
// begin HackUnlinkAll ( i ) ;
14927: LD_VAR 0 1
14931: PPUSH
14932: CALL 15044 0 1
// continue ;
14936: GO 14818
// end ; HackCheckCapturedStatus ( i ) ;
14938: LD_VAR 0 1
14942: PPUSH
14943: CALL 15489 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
14947: LD_ADDR_VAR 0 2
14951: PUSH
14952: LD_INT 81
14954: PUSH
14955: LD_VAR 0 1
14959: PPUSH
14960: CALL_OW 255
14964: PUSH
14965: EMPTY
14966: LIST
14967: LIST
14968: PUSH
14969: LD_INT 33
14971: PUSH
14972: LD_INT 3
14974: PUSH
14975: EMPTY
14976: LIST
14977: LIST
14978: PUSH
14979: LD_INT 91
14981: PUSH
14982: LD_VAR 0 1
14986: PUSH
14987: LD_EXP 56
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: LIST
14996: PUSH
14997: LD_INT 50
14999: PUSH
15000: EMPTY
15001: LIST
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: PPUSH
15009: CALL_OW 69
15013: ST_TO_ADDR
// if not tmp then
15014: LD_VAR 0 2
15018: NOT
15019: IFFALSE 15023
// continue ;
15021: GO 14818
// HackLink ( i , tmp ) ;
15023: LD_VAR 0 1
15027: PPUSH
15028: LD_VAR 0 2
15032: PPUSH
15033: CALL 15180 0 2
// end ;
15037: GO 14818
15039: POP
15040: POP
// end ;
15041: PPOPN 2
15043: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
15044: LD_INT 0
15046: PPUSH
15047: PPUSH
15048: PPUSH
// if not hack in hackTanks then
15049: LD_VAR 0 1
15053: PUSH
15054: LD_EXP 53
15058: IN
15059: NOT
15060: IFFALSE 15064
// exit ;
15062: GO 15175
// index := GetElementIndex ( hackTanks , hack ) ;
15064: LD_ADDR_VAR 0 4
15068: PUSH
15069: LD_EXP 53
15073: PPUSH
15074: LD_VAR 0 1
15078: PPUSH
15079: CALL 25274 0 2
15083: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
15084: LD_EXP 54
15088: PUSH
15089: LD_VAR 0 4
15093: ARRAY
15094: IFFALSE 15175
// begin for i in hackTanksCaptured [ index ] do
15096: LD_ADDR_VAR 0 3
15100: PUSH
15101: LD_EXP 54
15105: PUSH
15106: LD_VAR 0 4
15110: ARRAY
15111: PUSH
15112: FOR_IN
15113: IFFALSE 15139
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
15115: LD_VAR 0 3
15119: PUSH
15120: LD_INT 1
15122: ARRAY
15123: PPUSH
15124: LD_VAR 0 3
15128: PUSH
15129: LD_INT 2
15131: ARRAY
15132: PPUSH
15133: CALL_OW 235
15137: GO 15112
15139: POP
15140: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
15141: LD_ADDR_EXP 54
15145: PUSH
15146: LD_EXP 54
15150: PPUSH
15151: LD_VAR 0 4
15155: PPUSH
15156: EMPTY
15157: PPUSH
15158: CALL_OW 1
15162: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
15163: LD_VAR 0 1
15167: PPUSH
15168: LD_INT 0
15170: PPUSH
15171: CALL_OW 505
// end ; end ;
15175: LD_VAR 0 2
15179: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
15180: LD_INT 0
15182: PPUSH
15183: PPUSH
15184: PPUSH
// if not hack in hackTanks or not vehicles then
15185: LD_VAR 0 1
15189: PUSH
15190: LD_EXP 53
15194: IN
15195: NOT
15196: IFTRUE 15205
15198: PUSH
15199: LD_VAR 0 2
15203: NOT
15204: OR
15205: IFFALSE 15209
// exit ;
15207: GO 15484
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
15209: LD_ADDR_VAR 0 2
15213: PUSH
15214: LD_VAR 0 1
15218: PPUSH
15219: LD_VAR 0 2
15223: PPUSH
15224: LD_INT 1
15226: PPUSH
15227: LD_INT 1
15229: PPUSH
15230: CALL 25926 0 4
15234: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
15235: LD_ADDR_VAR 0 5
15239: PUSH
15240: LD_EXP 53
15244: PPUSH
15245: LD_VAR 0 1
15249: PPUSH
15250: CALL 25274 0 2
15254: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
15255: LD_EXP 54
15259: PUSH
15260: LD_VAR 0 5
15264: ARRAY
15265: PUSH
15266: LD_EXP 55
15270: LESS
15271: IFFALSE 15460
// begin for i := 1 to vehicles do
15273: LD_ADDR_VAR 0 4
15277: PUSH
15278: DOUBLE
15279: LD_INT 1
15281: DEC
15282: ST_TO_ADDR
15283: LD_VAR 0 2
15287: PUSH
15288: FOR_TO
15289: IFFALSE 15458
// begin if hackTanksCaptured [ index ] = hackLimit then
15291: LD_EXP 54
15295: PUSH
15296: LD_VAR 0 5
15300: ARRAY
15301: PUSH
15302: LD_EXP 55
15306: EQUAL
15307: IFFALSE 15311
// break ;
15309: GO 15458
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
15311: LD_ADDR_EXP 57
15315: PUSH
15316: LD_EXP 57
15320: PPUSH
15321: LD_VAR 0 5
15325: PPUSH
15326: LD_EXP 57
15330: PUSH
15331: LD_VAR 0 5
15335: ARRAY
15336: PUSH
15337: LD_INT 1
15339: PLUS
15340: PPUSH
15341: CALL_OW 1
15345: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
15346: LD_ADDR_EXP 54
15350: PUSH
15351: LD_EXP 54
15355: PPUSH
15356: LD_VAR 0 5
15360: PUSH
15361: LD_EXP 54
15365: PUSH
15366: LD_VAR 0 5
15370: ARRAY
15371: PUSH
15372: LD_INT 1
15374: PLUS
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: PPUSH
15380: LD_VAR 0 2
15384: PUSH
15385: LD_VAR 0 4
15389: ARRAY
15390: PUSH
15391: LD_VAR 0 2
15395: PUSH
15396: LD_VAR 0 4
15400: ARRAY
15401: PPUSH
15402: CALL_OW 255
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PPUSH
15411: CALL 25491 0 3
15415: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
15416: LD_VAR 0 2
15420: PUSH
15421: LD_VAR 0 4
15425: ARRAY
15426: PPUSH
15427: LD_VAR 0 1
15431: PPUSH
15432: CALL_OW 255
15436: PPUSH
15437: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
15441: LD_VAR 0 2
15445: PUSH
15446: LD_VAR 0 4
15450: ARRAY
15451: PPUSH
15452: CALL_OW 141
// end ;
15456: GO 15288
15458: POP
15459: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
15460: LD_VAR 0 1
15464: PPUSH
15465: LD_EXP 54
15469: PUSH
15470: LD_VAR 0 5
15474: ARRAY
15475: PUSH
15476: LD_INT 0
15478: PLUS
15479: PPUSH
15480: CALL_OW 505
// end ;
15484: LD_VAR 0 3
15488: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
15489: LD_INT 0
15491: PPUSH
15492: PPUSH
15493: PPUSH
15494: PPUSH
// if not hack in hackTanks then
15495: LD_VAR 0 1
15499: PUSH
15500: LD_EXP 53
15504: IN
15505: NOT
15506: IFFALSE 15510
// exit ;
15508: GO 15754
// index := GetElementIndex ( hackTanks , hack ) ;
15510: LD_ADDR_VAR 0 4
15514: PUSH
15515: LD_EXP 53
15519: PPUSH
15520: LD_VAR 0 1
15524: PPUSH
15525: CALL 25274 0 2
15529: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
15530: LD_ADDR_VAR 0 3
15534: PUSH
15535: DOUBLE
15536: LD_EXP 54
15540: PUSH
15541: LD_VAR 0 4
15545: ARRAY
15546: INC
15547: ST_TO_ADDR
15548: LD_INT 1
15550: PUSH
15551: FOR_DOWNTO
15552: IFFALSE 15728
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
15554: LD_ADDR_VAR 0 5
15558: PUSH
15559: LD_EXP 54
15563: PUSH
15564: LD_VAR 0 4
15568: ARRAY
15569: PUSH
15570: LD_VAR 0 3
15574: ARRAY
15575: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
15576: LD_VAR 0 5
15580: PUSH
15581: LD_INT 1
15583: ARRAY
15584: PPUSH
15585: CALL_OW 302
15589: NOT
15590: IFTRUE 15618
15592: PUSH
15593: LD_VAR 0 5
15597: PUSH
15598: LD_INT 1
15600: ARRAY
15601: PPUSH
15602: CALL_OW 255
15606: PUSH
15607: LD_VAR 0 1
15611: PPUSH
15612: CALL_OW 255
15616: NONEQUAL
15617: OR
15618: IFFALSE 15726
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
15620: LD_VAR 0 5
15624: PUSH
15625: LD_INT 1
15627: ARRAY
15628: PPUSH
15629: CALL_OW 305
15633: IFFALSE 15661
15635: PUSH
15636: LD_VAR 0 5
15640: PUSH
15641: LD_INT 1
15643: ARRAY
15644: PPUSH
15645: CALL_OW 255
15649: PUSH
15650: LD_VAR 0 1
15654: PPUSH
15655: CALL_OW 255
15659: EQUAL
15660: AND
15661: IFFALSE 15685
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
15663: LD_VAR 0 5
15667: PUSH
15668: LD_INT 1
15670: ARRAY
15671: PPUSH
15672: LD_VAR 0 5
15676: PUSH
15677: LD_INT 2
15679: ARRAY
15680: PPUSH
15681: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
15685: LD_ADDR_EXP 54
15689: PUSH
15690: LD_EXP 54
15694: PPUSH
15695: LD_VAR 0 4
15699: PPUSH
15700: LD_EXP 54
15704: PUSH
15705: LD_VAR 0 4
15709: ARRAY
15710: PPUSH
15711: LD_VAR 0 3
15715: PPUSH
15716: CALL_OW 3
15720: PPUSH
15721: CALL_OW 1
15725: ST_TO_ADDR
// end ; end ;
15726: GO 15551
15728: POP
15729: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
15730: LD_VAR 0 1
15734: PPUSH
15735: LD_EXP 54
15739: PUSH
15740: LD_VAR 0 4
15744: ARRAY
15745: PUSH
15746: LD_INT 0
15748: PLUS
15749: PPUSH
15750: CALL_OW 505
// end ;
15754: LD_VAR 0 2
15758: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
15759: LD_INT 0
15761: PPUSH
15762: PPUSH
15763: PPUSH
15764: PPUSH
// if not hack in hackTanks then
15765: LD_VAR 0 1
15769: PUSH
15770: LD_EXP 53
15774: IN
15775: NOT
15776: IFFALSE 15780
// exit ;
15778: GO 15865
// index := GetElementIndex ( hackTanks , hack ) ;
15780: LD_ADDR_VAR 0 5
15784: PUSH
15785: LD_EXP 53
15789: PPUSH
15790: LD_VAR 0 1
15794: PPUSH
15795: CALL 25274 0 2
15799: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
15800: LD_ADDR_VAR 0 4
15804: PUSH
15805: DOUBLE
15806: LD_INT 1
15808: DEC
15809: ST_TO_ADDR
15810: LD_EXP 54
15814: PUSH
15815: LD_VAR 0 5
15819: ARRAY
15820: PUSH
15821: FOR_TO
15822: IFFALSE 15863
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
15824: LD_EXP 54
15828: PUSH
15829: LD_VAR 0 5
15833: ARRAY
15834: PUSH
15835: LD_VAR 0 4
15839: ARRAY
15840: PUSH
15841: LD_INT 1
15843: ARRAY
15844: PUSH
15845: LD_VAR 0 2
15849: EQUAL
15850: IFFALSE 15861
// KillUnit ( vehicle ) ;
15852: LD_VAR 0 2
15856: PPUSH
15857: CALL_OW 66
15861: GO 15821
15863: POP
15864: POP
// end ;
15865: LD_VAR 0 3
15869: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
15870: LD_EXP 58
15874: NOT
15875: IFFALSE 16008
15877: GO 15879
15879: DISABLE
15880: LD_INT 0
15882: PPUSH
// begin initMiner := true ;
15883: LD_ADDR_EXP 58
15887: PUSH
15888: LD_INT 1
15890: ST_TO_ADDR
// minersList := [ ] ;
15891: LD_ADDR_EXP 59
15895: PUSH
15896: EMPTY
15897: ST_TO_ADDR
// minerMinesList := [ ] ;
15898: LD_ADDR_EXP 60
15902: PUSH
15903: EMPTY
15904: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
15905: LD_ADDR_EXP 61
15909: PUSH
15910: LD_INT 10
15912: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
15913: LD_ADDR_VAR 0 1
15917: PUSH
15918: LD_INT 34
15920: PUSH
15921: LD_INT 81
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PPUSH
15928: CALL_OW 69
15932: PUSH
15933: FOR_IN
15934: IFFALSE 16006
// begin if not i in minersList then
15936: LD_VAR 0 1
15940: PUSH
15941: LD_EXP 59
15945: IN
15946: NOT
15947: IFFALSE 16004
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
15949: LD_ADDR_EXP 59
15953: PUSH
15954: LD_EXP 59
15958: PPUSH
15959: LD_EXP 59
15963: PUSH
15964: LD_INT 1
15966: PLUS
15967: PPUSH
15968: LD_VAR 0 1
15972: PPUSH
15973: CALL_OW 1
15977: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
15978: LD_ADDR_EXP 60
15982: PUSH
15983: LD_EXP 60
15987: PPUSH
15988: LD_EXP 60
15992: PUSH
15993: LD_INT 1
15995: PLUS
15996: PPUSH
15997: EMPTY
15998: PPUSH
15999: CALL_OW 1
16003: ST_TO_ADDR
// end end ;
16004: GO 15933
16006: POP
16007: POP
// end ;
16008: PPOPN 1
16010: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
16011: LD_EXP 58
16015: IFFALSE 16046
16017: PUSH
16018: LD_EXP 60
16022: PPUSH
16023: CALL 22573 0 1
16027: IFTRUE 16045
16029: PUSH
16030: LD_INT 34
16032: PUSH
16033: LD_INT 81
16035: PUSH
16036: EMPTY
16037: LIST
16038: LIST
16039: PPUSH
16040: CALL_OW 69
16044: OR
16045: AND
16046: IFFALSE 16566
16048: GO 16050
16050: DISABLE
16051: LD_INT 0
16053: PPUSH
16054: PPUSH
16055: PPUSH
16056: PPUSH
// begin enable ;
16057: ENABLE
// for i := minerMinesList downto 1 do
16058: LD_ADDR_VAR 0 1
16062: PUSH
16063: DOUBLE
16064: LD_EXP 60
16068: INC
16069: ST_TO_ADDR
16070: LD_INT 1
16072: PUSH
16073: FOR_DOWNTO
16074: IFFALSE 16564
// begin side := GetSide ( minersList [ i ] ) ;
16076: LD_ADDR_VAR 0 3
16080: PUSH
16081: LD_EXP 59
16085: PUSH
16086: LD_VAR 0 1
16090: ARRAY
16091: PPUSH
16092: CALL_OW 255
16096: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
16097: LD_EXP 59
16101: PUSH
16102: LD_VAR 0 1
16106: ARRAY
16107: PPUSH
16108: CALL_OW 300
16112: IFFALSE 16133
16114: PUSH
16115: LD_VAR 0 3
16119: PUSH
16120: LD_OWVAR 2
16124: PUSH
16125: LD_INT 9
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: IN
16132: AND
16133: IFFALSE 16166
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
16135: LD_EXP 59
16139: PUSH
16140: LD_VAR 0 1
16144: ARRAY
16145: PPUSH
16146: LD_EXP 60
16150: PUSH
16151: LD_VAR 0 1
16155: ARRAY
16156: PPUSH
16157: CALL 22573 0 1
16161: PPUSH
16162: CALL_OW 505
// if not minerMinesList [ i ] then
16166: LD_EXP 60
16170: PUSH
16171: LD_VAR 0 1
16175: ARRAY
16176: NOT
16177: IFFALSE 16181
// continue ;
16179: GO 16073
// for j := minerMinesList [ i ] downto 1 do
16181: LD_ADDR_VAR 0 2
16185: PUSH
16186: DOUBLE
16187: LD_EXP 60
16191: PUSH
16192: LD_VAR 0 1
16196: ARRAY
16197: INC
16198: ST_TO_ADDR
16199: LD_INT 1
16201: PUSH
16202: FOR_DOWNTO
16203: IFFALSE 16560
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
16205: LD_EXP 59
16209: PUSH
16210: LD_VAR 0 1
16214: ARRAY
16215: PPUSH
16216: CALL_OW 301
16220: IFTRUE 16240
16222: PUSH
16223: LD_EXP 59
16227: PUSH
16228: LD_VAR 0 1
16232: ARRAY
16233: PPUSH
16234: CALL_OW 305
16238: NOT
16239: OR
16240: IFFALSE 16331
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
16242: LD_EXP 60
16246: PUSH
16247: LD_VAR 0 1
16251: ARRAY
16252: PUSH
16253: LD_VAR 0 2
16257: ARRAY
16258: PUSH
16259: LD_INT 1
16261: ARRAY
16262: PPUSH
16263: LD_EXP 60
16267: PUSH
16268: LD_VAR 0 1
16272: ARRAY
16273: PUSH
16274: LD_VAR 0 2
16278: ARRAY
16279: PUSH
16280: LD_INT 2
16282: ARRAY
16283: PPUSH
16284: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
16288: LD_ADDR_EXP 60
16292: PUSH
16293: LD_EXP 60
16297: PPUSH
16298: LD_VAR 0 1
16302: PPUSH
16303: LD_EXP 60
16307: PUSH
16308: LD_VAR 0 1
16312: ARRAY
16313: PPUSH
16314: LD_VAR 0 2
16318: PPUSH
16319: CALL_OW 3
16323: PPUSH
16324: CALL_OW 1
16328: ST_TO_ADDR
// continue ;
16329: GO 16202
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
16331: LD_ADDR_VAR 0 4
16335: PUSH
16336: LD_EXP 60
16340: PUSH
16341: LD_VAR 0 1
16345: ARRAY
16346: PUSH
16347: LD_VAR 0 2
16351: ARRAY
16352: PUSH
16353: LD_INT 1
16355: ARRAY
16356: PPUSH
16357: LD_EXP 60
16361: PUSH
16362: LD_VAR 0 1
16366: ARRAY
16367: PUSH
16368: LD_VAR 0 2
16372: ARRAY
16373: PUSH
16374: LD_INT 2
16376: ARRAY
16377: PPUSH
16378: CALL_OW 428
16382: ST_TO_ADDR
// if not tmp then
16383: LD_VAR 0 4
16387: NOT
16388: IFFALSE 16392
// continue ;
16390: GO 16202
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
16392: LD_VAR 0 4
16396: PUSH
16397: LD_INT 81
16399: PUSH
16400: LD_VAR 0 3
16404: PUSH
16405: EMPTY
16406: LIST
16407: LIST
16408: PPUSH
16409: CALL_OW 69
16413: IN
16414: IFFALSE 16464
16416: PUSH
16417: LD_EXP 60
16421: PUSH
16422: LD_VAR 0 1
16426: ARRAY
16427: PUSH
16428: LD_VAR 0 2
16432: ARRAY
16433: PUSH
16434: LD_INT 1
16436: ARRAY
16437: PPUSH
16438: LD_EXP 60
16442: PUSH
16443: LD_VAR 0 1
16447: ARRAY
16448: PUSH
16449: LD_VAR 0 2
16453: ARRAY
16454: PUSH
16455: LD_INT 2
16457: ARRAY
16458: PPUSH
16459: CALL_OW 458
16463: AND
16464: IFFALSE 16558
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
16466: LD_EXP 60
16470: PUSH
16471: LD_VAR 0 1
16475: ARRAY
16476: PUSH
16477: LD_VAR 0 2
16481: ARRAY
16482: PUSH
16483: LD_INT 1
16485: ARRAY
16486: PPUSH
16487: LD_EXP 60
16491: PUSH
16492: LD_VAR 0 1
16496: ARRAY
16497: PUSH
16498: LD_VAR 0 2
16502: ARRAY
16503: PUSH
16504: LD_INT 2
16506: ARRAY
16507: PPUSH
16508: LD_VAR 0 3
16512: PPUSH
16513: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
16517: LD_ADDR_EXP 60
16521: PUSH
16522: LD_EXP 60
16526: PPUSH
16527: LD_VAR 0 1
16531: PPUSH
16532: LD_EXP 60
16536: PUSH
16537: LD_VAR 0 1
16541: ARRAY
16542: PPUSH
16543: LD_VAR 0 2
16547: PPUSH
16548: CALL_OW 3
16552: PPUSH
16553: CALL_OW 1
16557: ST_TO_ADDR
// end ; end ;
16558: GO 16202
16560: POP
16561: POP
// end ;
16562: GO 16073
16564: POP
16565: POP
// end ;
16566: PPOPN 4
16568: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
16569: LD_INT 0
16571: PPUSH
16572: PPUSH
16573: PPUSH
16574: PPUSH
// result := false ;
16575: LD_ADDR_VAR 0 4
16579: PUSH
16580: LD_INT 0
16582: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
16583: LD_VAR 0 1
16587: PPUSH
16588: CALL_OW 264
16592: PUSH
16593: LD_INT 81
16595: EQUAL
16596: NOT
16597: IFFALSE 16601
// exit ;
16599: GO 16971
// side := GetSide ( unit ) ;
16601: LD_ADDR_VAR 0 6
16605: PUSH
16606: LD_VAR 0 1
16610: PPUSH
16611: CALL_OW 255
16615: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
16616: LD_ADDR_VAR 0 5
16620: PUSH
16621: LD_EXP 59
16625: PPUSH
16626: LD_VAR 0 1
16630: PPUSH
16631: CALL 25274 0 2
16635: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
16636: LD_EXP 60
16640: PUSH
16641: LD_VAR 0 5
16645: ARRAY
16646: PUSH
16647: LD_EXP 61
16651: GREATEREQUAL
16652: IFFALSE 16656
// exit ;
16654: GO 16971
// ComMoveXY ( unit , x , y ) ;
16656: LD_VAR 0 1
16660: PPUSH
16661: LD_VAR 0 2
16665: PPUSH
16666: LD_VAR 0 3
16670: PPUSH
16671: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16675: LD_INT 35
16677: PPUSH
16678: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
16682: LD_VAR 0 1
16686: PPUSH
16687: LD_VAR 0 2
16691: PPUSH
16692: LD_VAR 0 3
16696: PPUSH
16697: CALL 57330 0 3
16701: NOT
16702: IFFALSE 16715
16704: PUSH
16705: LD_VAR 0 1
16709: PPUSH
16710: CALL_OW 314
16714: AND
16715: IFFALSE 16719
// exit ;
16717: GO 16971
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
16719: LD_VAR 0 2
16723: PPUSH
16724: LD_VAR 0 3
16728: PPUSH
16729: CALL_OW 428
16733: PUSH
16734: LD_VAR 0 1
16738: EQUAL
16739: IFFALSE 16753
16741: PUSH
16742: LD_VAR 0 1
16746: PPUSH
16747: CALL_OW 314
16751: NOT
16752: AND
16753: IFFALSE 16675
// if MineAtPos ( x , y ) then
16755: LD_VAR 0 2
16759: PPUSH
16760: LD_VAR 0 3
16764: PPUSH
16765: CALL_OW 458
16769: IFFALSE 16773
// exit ;
16771: GO 16971
// if your_side = side then
16773: LD_OWVAR 2
16777: PUSH
16778: LD_VAR 0 6
16782: EQUAL
16783: IFFALSE 16802
// PlaySoundXY ( x , y , PlantMine ) ;
16785: LD_VAR 0 2
16789: PPUSH
16790: LD_VAR 0 3
16794: PPUSH
16795: LD_STRING PlantMine
16797: PPUSH
16798: CALL_OW 366
// repeat wait ( 1 ) ;
16802: LD_INT 1
16804: PPUSH
16805: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
16809: LD_VAR 0 2
16813: PPUSH
16814: LD_VAR 0 3
16818: PPUSH
16819: LD_VAR 0 6
16823: PPUSH
16824: LD_INT 0
16826: PPUSH
16827: CALL_OW 454
16831: IFFALSE 16802
// if MineAtPos ( x , y ) then
16833: LD_VAR 0 2
16837: PPUSH
16838: LD_VAR 0 3
16842: PPUSH
16843: CALL_OW 458
16847: IFFALSE 16963
// begin for i in minerMinesList [ index ] do
16849: LD_ADDR_VAR 0 7
16853: PUSH
16854: LD_EXP 60
16858: PUSH
16859: LD_VAR 0 5
16863: ARRAY
16864: PUSH
16865: FOR_IN
16866: IFFALSE 16908
// if i [ 1 ] = x and i [ 2 ] = y then
16868: LD_VAR 0 7
16872: PUSH
16873: LD_INT 1
16875: ARRAY
16876: PUSH
16877: LD_VAR 0 2
16881: EQUAL
16882: IFFALSE 16900
16884: PUSH
16885: LD_VAR 0 7
16889: PUSH
16890: LD_INT 2
16892: ARRAY
16893: PUSH
16894: LD_VAR 0 3
16898: EQUAL
16899: AND
16900: IFFALSE 16906
// exit ;
16902: POP
16903: POP
16904: GO 16971
16906: GO 16865
16908: POP
16909: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
16910: LD_ADDR_EXP 60
16914: PUSH
16915: LD_EXP 60
16919: PPUSH
16920: LD_VAR 0 5
16924: PUSH
16925: LD_EXP 60
16929: PUSH
16930: LD_VAR 0 5
16934: ARRAY
16935: PUSH
16936: LD_INT 1
16938: PLUS
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: PPUSH
16944: LD_VAR 0 2
16948: PUSH
16949: LD_VAR 0 3
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: PPUSH
16958: CALL 25491 0 3
16962: ST_TO_ADDR
// end ; result := true ;
16963: LD_ADDR_VAR 0 4
16967: PUSH
16968: LD_INT 1
16970: ST_TO_ADDR
// end ;
16971: LD_VAR 0 4
16975: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
16976: LD_INT 0
16978: PPUSH
16979: PPUSH
16980: PPUSH
// if not unit in minersList then
16981: LD_VAR 0 1
16985: PUSH
16986: LD_EXP 59
16990: IN
16991: NOT
16992: IFFALSE 16996
// exit ;
16994: GO 17203
// index := GetElementIndex ( minersList , unit ) ;
16996: LD_ADDR_VAR 0 6
17000: PUSH
17001: LD_EXP 59
17005: PPUSH
17006: LD_VAR 0 1
17010: PPUSH
17011: CALL 25274 0 2
17015: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
17016: LD_ADDR_VAR 0 5
17020: PUSH
17021: DOUBLE
17022: LD_EXP 60
17026: PUSH
17027: LD_VAR 0 6
17031: ARRAY
17032: INC
17033: ST_TO_ADDR
17034: LD_INT 1
17036: PUSH
17037: FOR_DOWNTO
17038: IFFALSE 17201
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
17040: LD_EXP 60
17044: PUSH
17045: LD_VAR 0 6
17049: ARRAY
17050: PUSH
17051: LD_VAR 0 5
17055: ARRAY
17056: PUSH
17057: LD_INT 1
17059: ARRAY
17060: PPUSH
17061: LD_EXP 60
17065: PUSH
17066: LD_VAR 0 6
17070: ARRAY
17071: PUSH
17072: LD_VAR 0 5
17076: ARRAY
17077: PUSH
17078: LD_INT 2
17080: ARRAY
17081: PPUSH
17082: LD_VAR 0 2
17086: PPUSH
17087: LD_VAR 0 3
17091: PPUSH
17092: CALL_OW 298
17096: PUSH
17097: LD_INT 6
17099: LESS
17100: IFFALSE 17199
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
17102: LD_EXP 60
17106: PUSH
17107: LD_VAR 0 6
17111: ARRAY
17112: PUSH
17113: LD_VAR 0 5
17117: ARRAY
17118: PUSH
17119: LD_INT 1
17121: ARRAY
17122: PPUSH
17123: LD_EXP 60
17127: PUSH
17128: LD_VAR 0 6
17132: ARRAY
17133: PUSH
17134: LD_VAR 0 5
17138: ARRAY
17139: PUSH
17140: LD_INT 2
17142: ARRAY
17143: PPUSH
17144: LD_VAR 0 1
17148: PPUSH
17149: CALL_OW 255
17153: PPUSH
17154: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
17158: LD_ADDR_EXP 60
17162: PUSH
17163: LD_EXP 60
17167: PPUSH
17168: LD_VAR 0 6
17172: PPUSH
17173: LD_EXP 60
17177: PUSH
17178: LD_VAR 0 6
17182: ARRAY
17183: PPUSH
17184: LD_VAR 0 5
17188: PPUSH
17189: CALL_OW 3
17193: PPUSH
17194: CALL_OW 1
17198: ST_TO_ADDR
// end ; end ;
17199: GO 17037
17201: POP
17202: POP
// end ;
17203: LD_VAR 0 4
17207: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
17208: LD_INT 0
17210: PPUSH
17211: PPUSH
17212: PPUSH
17213: PPUSH
17214: PPUSH
17215: PPUSH
17216: PPUSH
17217: PPUSH
17218: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
17219: LD_VAR 0 1
17223: PPUSH
17224: CALL_OW 264
17228: PUSH
17229: LD_INT 81
17231: EQUAL
17232: NOT
17233: IFTRUE 17248
17235: PUSH
17236: LD_VAR 0 1
17240: PUSH
17241: LD_EXP 59
17245: IN
17246: NOT
17247: OR
17248: IFFALSE 17252
// exit ;
17250: GO 17578
// index := GetElementIndex ( minersList , unit ) ;
17252: LD_ADDR_VAR 0 6
17256: PUSH
17257: LD_EXP 59
17261: PPUSH
17262: LD_VAR 0 1
17266: PPUSH
17267: CALL 25274 0 2
17271: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
17272: LD_ADDR_VAR 0 8
17276: PUSH
17277: LD_EXP 61
17281: PUSH
17282: LD_EXP 60
17286: PUSH
17287: LD_VAR 0 6
17291: ARRAY
17292: MINUS
17293: ST_TO_ADDR
// if not minesFreeAmount then
17294: LD_VAR 0 8
17298: NOT
17299: IFFALSE 17303
// exit ;
17301: GO 17578
// tmp := [ ] ;
17303: LD_ADDR_VAR 0 7
17307: PUSH
17308: EMPTY
17309: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
17310: LD_ADDR_VAR 0 5
17314: PUSH
17315: DOUBLE
17316: LD_INT 1
17318: DEC
17319: ST_TO_ADDR
17320: LD_VAR 0 8
17324: PUSH
17325: FOR_TO
17326: IFFALSE 17525
// begin _d := rand ( 0 , 5 ) ;
17328: LD_ADDR_VAR 0 11
17332: PUSH
17333: LD_INT 0
17335: PPUSH
17336: LD_INT 5
17338: PPUSH
17339: CALL_OW 12
17343: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
17344: LD_ADDR_VAR 0 12
17348: PUSH
17349: LD_INT 2
17351: PPUSH
17352: LD_INT 6
17354: PPUSH
17355: CALL_OW 12
17359: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
17360: LD_ADDR_VAR 0 9
17364: PUSH
17365: LD_VAR 0 2
17369: PPUSH
17370: LD_VAR 0 11
17374: PPUSH
17375: LD_VAR 0 12
17379: PPUSH
17380: CALL_OW 272
17384: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
17385: LD_ADDR_VAR 0 10
17389: PUSH
17390: LD_VAR 0 3
17394: PPUSH
17395: LD_VAR 0 11
17399: PPUSH
17400: LD_VAR 0 12
17404: PPUSH
17405: CALL_OW 273
17409: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
17410: LD_VAR 0 9
17414: PPUSH
17415: LD_VAR 0 10
17419: PPUSH
17420: CALL_OW 488
17424: IFFALSE 17448
17426: PUSH
17427: LD_VAR 0 9
17431: PUSH
17432: LD_VAR 0 10
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: PUSH
17441: LD_VAR 0 7
17445: IN
17446: NOT
17447: AND
17448: IFFALSE 17467
17450: PUSH
17451: LD_VAR 0 9
17455: PPUSH
17456: LD_VAR 0 10
17460: PPUSH
17461: CALL_OW 458
17465: NOT
17466: AND
17467: IFFALSE 17509
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
17469: LD_ADDR_VAR 0 7
17473: PUSH
17474: LD_VAR 0 7
17478: PPUSH
17479: LD_VAR 0 7
17483: PUSH
17484: LD_INT 1
17486: PLUS
17487: PPUSH
17488: LD_VAR 0 9
17492: PUSH
17493: LD_VAR 0 10
17497: PUSH
17498: EMPTY
17499: LIST
17500: LIST
17501: PPUSH
17502: CALL_OW 1
17506: ST_TO_ADDR
17507: GO 17523
// i := i - 1 ;
17509: LD_ADDR_VAR 0 5
17513: PUSH
17514: LD_VAR 0 5
17518: PUSH
17519: LD_INT 1
17521: MINUS
17522: ST_TO_ADDR
// end ;
17523: GO 17325
17525: POP
17526: POP
// for i in tmp do
17527: LD_ADDR_VAR 0 5
17531: PUSH
17532: LD_VAR 0 7
17536: PUSH
17537: FOR_IN
17538: IFFALSE 17576
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
17540: LD_VAR 0 1
17544: PPUSH
17545: LD_VAR 0 5
17549: PUSH
17550: LD_INT 1
17552: ARRAY
17553: PPUSH
17554: LD_VAR 0 5
17558: PUSH
17559: LD_INT 2
17561: ARRAY
17562: PPUSH
17563: CALL 16569 0 3
17567: NOT
17568: IFFALSE 17574
// exit ;
17570: POP
17571: POP
17572: GO 17578
17574: GO 17537
17576: POP
17577: POP
// end ;
17578: LD_VAR 0 4
17582: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
17583: LD_INT 0
17585: PPUSH
17586: PPUSH
17587: PPUSH
17588: PPUSH
17589: PPUSH
17590: PPUSH
17591: PPUSH
17592: PPUSH
17593: PPUSH
// if GetClass ( unit ) <> class_sniper then
17594: LD_VAR 0 1
17598: PPUSH
17599: CALL_OW 257
17603: PUSH
17604: LD_INT 5
17606: NONEQUAL
17607: IFFALSE 17611
// exit ;
17609: GO 18081
// dist := 8 ;
17611: LD_ADDR_VAR 0 5
17615: PUSH
17616: LD_INT 8
17618: ST_TO_ADDR
// viewRange := 12 ;
17619: LD_ADDR_VAR 0 8
17623: PUSH
17624: LD_INT 12
17626: ST_TO_ADDR
// side := GetSide ( unit ) ;
17627: LD_ADDR_VAR 0 6
17631: PUSH
17632: LD_VAR 0 1
17636: PPUSH
17637: CALL_OW 255
17641: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
17642: LD_INT 61
17644: PPUSH
17645: LD_VAR 0 6
17649: PPUSH
17650: CALL_OW 321
17654: PUSH
17655: LD_INT 2
17657: EQUAL
17658: IFFALSE 17668
// viewRange := 16 ;
17660: LD_ADDR_VAR 0 8
17664: PUSH
17665: LD_INT 16
17667: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
17668: LD_VAR 0 1
17672: PPUSH
17673: LD_VAR 0 2
17677: PPUSH
17678: LD_VAR 0 3
17682: PPUSH
17683: CALL_OW 297
17687: PUSH
17688: LD_VAR 0 5
17692: GREATER
17693: IFFALSE 17772
// begin ComMoveXY ( unit , x , y ) ;
17695: LD_VAR 0 1
17699: PPUSH
17700: LD_VAR 0 2
17704: PPUSH
17705: LD_VAR 0 3
17709: PPUSH
17710: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17714: LD_INT 35
17716: PPUSH
17717: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
17721: LD_VAR 0 1
17725: PPUSH
17726: LD_VAR 0 2
17730: PPUSH
17731: LD_VAR 0 3
17735: PPUSH
17736: CALL 57330 0 3
17740: NOT
17741: IFFALSE 17745
// exit ;
17743: GO 18081
// until GetDistUnitXY ( unit , x , y ) < dist ;
17745: LD_VAR 0 1
17749: PPUSH
17750: LD_VAR 0 2
17754: PPUSH
17755: LD_VAR 0 3
17759: PPUSH
17760: CALL_OW 297
17764: PUSH
17765: LD_VAR 0 5
17769: LESS
17770: IFFALSE 17714
// end ; ComTurnXY ( unit , x , y ) ;
17772: LD_VAR 0 1
17776: PPUSH
17777: LD_VAR 0 2
17781: PPUSH
17782: LD_VAR 0 3
17786: PPUSH
17787: CALL_OW 118
// repeat if Multiplayer then
17791: LD_OWVAR 4
17795: IFFALSE 17806
// wait ( 35 ) else
17797: LD_INT 35
17799: PPUSH
17800: CALL_OW 67
17804: GO 17813
// wait ( 5 ) ;
17806: LD_INT 5
17808: PPUSH
17809: CALL_OW 67
// _d := GetDir ( unit ) ;
17813: LD_ADDR_VAR 0 11
17817: PUSH
17818: LD_VAR 0 1
17822: PPUSH
17823: CALL_OW 254
17827: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
17828: LD_ADDR_VAR 0 7
17832: PUSH
17833: LD_VAR 0 1
17837: PPUSH
17838: CALL_OW 250
17842: PPUSH
17843: LD_VAR 0 1
17847: PPUSH
17848: CALL_OW 251
17852: PPUSH
17853: LD_VAR 0 2
17857: PPUSH
17858: LD_VAR 0 3
17862: PPUSH
17863: CALL 59966 0 4
17867: ST_TO_ADDR
// until dir = _d ;
17868: LD_VAR 0 7
17872: PUSH
17873: LD_VAR 0 11
17877: EQUAL
17878: IFFALSE 17791
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
17880: LD_ADDR_VAR 0 9
17884: PUSH
17885: LD_VAR 0 1
17889: PPUSH
17890: CALL_OW 250
17894: PPUSH
17895: LD_VAR 0 7
17899: PPUSH
17900: LD_VAR 0 5
17904: PPUSH
17905: CALL_OW 272
17909: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
17910: LD_ADDR_VAR 0 10
17914: PUSH
17915: LD_VAR 0 1
17919: PPUSH
17920: CALL_OW 251
17924: PPUSH
17925: LD_VAR 0 7
17929: PPUSH
17930: LD_VAR 0 5
17934: PPUSH
17935: CALL_OW 273
17939: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17940: LD_VAR 0 9
17944: PPUSH
17945: LD_VAR 0 10
17949: PPUSH
17950: CALL_OW 488
17954: NOT
17955: IFFALSE 17959
// exit ;
17957: GO 18081
// ComAnimCustom ( unit , 1 ) ;
17959: LD_VAR 0 1
17963: PPUSH
17964: LD_INT 1
17966: PPUSH
17967: CALL_OW 592
// p := 0 ;
17971: LD_ADDR_VAR 0 12
17975: PUSH
17976: LD_INT 0
17978: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
17979: LD_VAR 0 9
17983: PPUSH
17984: LD_VAR 0 10
17988: PPUSH
17989: LD_VAR 0 6
17993: PPUSH
17994: LD_VAR 0 8
17998: PPUSH
17999: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
18003: LD_INT 35
18005: PPUSH
18006: CALL_OW 67
// p := Inc ( p ) ;
18010: LD_ADDR_VAR 0 12
18014: PUSH
18015: LD_VAR 0 12
18019: PPUSH
18020: CALL 59922 0 1
18024: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
18025: LD_VAR 0 12
18029: PUSH
18030: LD_INT 3
18032: EQUAL
18033: IFTRUE 18047
18035: PUSH
18036: LD_VAR 0 1
18040: PPUSH
18041: CALL_OW 302
18045: NOT
18046: OR
18047: IFTRUE 18060
18049: PUSH
18050: LD_VAR 0 1
18054: PPUSH
18055: CALL_OW 301
18059: OR
18060: IFFALSE 18003
// RemoveSeeing ( _x , _y , side ) ;
18062: LD_VAR 0 9
18066: PPUSH
18067: LD_VAR 0 10
18071: PPUSH
18072: LD_VAR 0 6
18076: PPUSH
18077: CALL_OW 331
// end ;
18081: LD_VAR 0 4
18085: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
18086: LD_INT 0
18088: PPUSH
18089: PPUSH
18090: PPUSH
18091: PPUSH
18092: PPUSH
18093: PPUSH
18094: PPUSH
18095: PPUSH
18096: PPUSH
18097: PPUSH
18098: PPUSH
// if not unit then
18099: LD_VAR 0 1
18103: NOT
18104: IFFALSE 18108
// exit ;
18106: GO 18379
// side := GetSide ( unit ) ;
18108: LD_ADDR_VAR 0 3
18112: PUSH
18113: LD_VAR 0 1
18117: PPUSH
18118: CALL_OW 255
18122: ST_TO_ADDR
// x := GetX ( unit ) ;
18123: LD_ADDR_VAR 0 5
18127: PUSH
18128: LD_VAR 0 1
18132: PPUSH
18133: CALL_OW 250
18137: ST_TO_ADDR
// y := GetY ( unit ) ;
18138: LD_ADDR_VAR 0 6
18142: PUSH
18143: LD_VAR 0 1
18147: PPUSH
18148: CALL_OW 251
18152: ST_TO_ADDR
// r := 8 ;
18153: LD_ADDR_VAR 0 4
18157: PUSH
18158: LD_INT 8
18160: ST_TO_ADDR
// if x - r < 0 then
18161: LD_VAR 0 5
18165: PUSH
18166: LD_VAR 0 4
18170: MINUS
18171: PUSH
18172: LD_INT 0
18174: LESS
18175: IFFALSE 18187
// min_x := 0 else
18177: LD_ADDR_VAR 0 7
18181: PUSH
18182: LD_INT 0
18184: ST_TO_ADDR
18185: GO 18203
// min_x := x - r ;
18187: LD_ADDR_VAR 0 7
18191: PUSH
18192: LD_VAR 0 5
18196: PUSH
18197: LD_VAR 0 4
18201: MINUS
18202: ST_TO_ADDR
// if y - r < 0 then
18203: LD_VAR 0 6
18207: PUSH
18208: LD_VAR 0 4
18212: MINUS
18213: PUSH
18214: LD_INT 0
18216: LESS
18217: IFFALSE 18229
// min_y := 0 else
18219: LD_ADDR_VAR 0 8
18223: PUSH
18224: LD_INT 0
18226: ST_TO_ADDR
18227: GO 18245
// min_y := y - r ;
18229: LD_ADDR_VAR 0 8
18233: PUSH
18234: LD_VAR 0 6
18238: PUSH
18239: LD_VAR 0 4
18243: MINUS
18244: ST_TO_ADDR
// max_x := x + r ;
18245: LD_ADDR_VAR 0 9
18249: PUSH
18250: LD_VAR 0 5
18254: PUSH
18255: LD_VAR 0 4
18259: PLUS
18260: ST_TO_ADDR
// max_y := y + r ;
18261: LD_ADDR_VAR 0 10
18265: PUSH
18266: LD_VAR 0 6
18270: PUSH
18271: LD_VAR 0 4
18275: PLUS
18276: ST_TO_ADDR
// for _x = min_x to max_x do
18277: LD_ADDR_VAR 0 11
18281: PUSH
18282: DOUBLE
18283: LD_VAR 0 7
18287: DEC
18288: ST_TO_ADDR
18289: LD_VAR 0 9
18293: PUSH
18294: FOR_TO
18295: IFFALSE 18377
// for _y = min_y to max_y do
18297: LD_ADDR_VAR 0 12
18301: PUSH
18302: DOUBLE
18303: LD_VAR 0 8
18307: DEC
18308: ST_TO_ADDR
18309: LD_VAR 0 10
18313: PUSH
18314: FOR_TO
18315: IFFALSE 18373
// begin if not ValidHex ( _x , _y ) then
18317: LD_VAR 0 11
18321: PPUSH
18322: LD_VAR 0 12
18326: PPUSH
18327: CALL_OW 488
18331: NOT
18332: IFFALSE 18336
// continue ;
18334: GO 18314
// if MineAtPos ( _x , _y ) then
18336: LD_VAR 0 11
18340: PPUSH
18341: LD_VAR 0 12
18345: PPUSH
18346: CALL_OW 458
18350: IFFALSE 18371
// ViewMineAtPos ( _x , _y , side ) ;
18352: LD_VAR 0 11
18356: PPUSH
18357: LD_VAR 0 12
18361: PPUSH
18362: LD_VAR 0 3
18366: PPUSH
18367: CALL_OW 457
// end ;
18371: GO 18314
18373: POP
18374: POP
18375: GO 18294
18377: POP
18378: POP
// end ;
18379: LD_VAR 0 2
18383: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
18384: LD_INT 0
18386: PPUSH
18387: PPUSH
18388: PPUSH
18389: PPUSH
18390: PPUSH
18391: PPUSH
18392: PPUSH
// if not units then
18393: LD_VAR 0 1
18397: NOT
18398: IFFALSE 18402
// exit ;
18400: GO 18866
// scaners := [ ] ;
18402: LD_ADDR_VAR 0 6
18406: PUSH
18407: EMPTY
18408: ST_TO_ADDR
// for i in units do
18409: LD_ADDR_VAR 0 3
18413: PUSH
18414: LD_VAR 0 1
18418: PUSH
18419: FOR_IN
18420: IFFALSE 18577
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
18422: LD_VAR 0 3
18426: PPUSH
18427: CALL_OW 264
18431: PUSH
18432: LD_INT 11
18434: NONEQUAL
18435: IFTRUE 18449
18437: PUSH
18438: LD_VAR 0 3
18442: PPUSH
18443: CALL_OW 302
18447: NOT
18448: OR
18449: IFTRUE 18466
18451: PUSH
18452: LD_VAR 0 3
18456: PPUSH
18457: CALL_OW 110
18461: PUSH
18462: LD_INT 502
18464: EQUAL
18465: OR
18466: IFFALSE 18470
// continue ;
18468: GO 18419
// ComStop ( i ) ;
18470: LD_VAR 0 3
18474: PPUSH
18475: CALL_OW 141
// x := GetX ( i ) ;
18479: LD_ADDR_VAR 0 4
18483: PUSH
18484: LD_VAR 0 3
18488: PPUSH
18489: CALL_OW 250
18493: ST_TO_ADDR
// y := GetY ( i ) ;
18494: LD_ADDR_VAR 0 5
18498: PUSH
18499: LD_VAR 0 3
18503: PPUSH
18504: CALL_OW 251
18508: ST_TO_ADDR
// if GetSide ( i ) = your_side then
18509: LD_VAR 0 3
18513: PPUSH
18514: CALL_OW 255
18518: PUSH
18519: LD_OWVAR 2
18523: EQUAL
18524: IFFALSE 18543
// PlaySoundXY ( x , y , mineDetector ) ;
18526: LD_VAR 0 4
18530: PPUSH
18531: LD_VAR 0 5
18535: PPUSH
18536: LD_STRING mineDetector
18538: PPUSH
18539: CALL_OW 366
// scaners := Join ( scaners , i ) ;
18543: LD_ADDR_VAR 0 6
18547: PUSH
18548: LD_VAR 0 6
18552: PPUSH
18553: LD_VAR 0 3
18557: PPUSH
18558: CALL 58549 0 2
18562: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
18563: LD_VAR 0 3
18567: PPUSH
18568: LD_INT 502
18570: PPUSH
18571: CALL_OW 109
// end ;
18575: GO 18419
18577: POP
18578: POP
// if not scaners then
18579: LD_VAR 0 6
18583: NOT
18584: IFFALSE 18588
// exit ;
18586: GO 18866
// wait ( 3 ) ;
18588: LD_INT 3
18590: PPUSH
18591: CALL_OW 67
// timer := 6 ;
18595: LD_ADDR_VAR 0 7
18599: PUSH
18600: LD_INT 6
18602: ST_TO_ADDR
// repeat for i in scaners do
18603: LD_ADDR_VAR 0 3
18607: PUSH
18608: LD_VAR 0 6
18612: PUSH
18613: FOR_IN
18614: IFFALSE 18764
// begin side := GetSide ( i ) ;
18616: LD_ADDR_VAR 0 8
18620: PUSH
18621: LD_VAR 0 3
18625: PPUSH
18626: CALL_OW 255
18630: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
18631: LD_VAR 0 3
18635: PPUSH
18636: CALL_OW 302
18640: NOT
18641: IFTRUE 18654
18643: PUSH
18644: LD_VAR 0 3
18648: PPUSH
18649: CALL_OW 314
18653: OR
18654: IFTRUE 18685
18656: PUSH
18657: LD_VAR 0 3
18661: PPUSH
18662: CALL_OW 263
18666: PUSH
18667: LD_INT 1
18669: EQUAL
18670: IFFALSE 18684
18672: PUSH
18673: LD_VAR 0 3
18677: PPUSH
18678: CALL_OW 311
18682: NOT
18683: AND
18684: OR
18685: IFFALSE 18729
// begin SetUnitDisplayNumber ( i , 0 ) ;
18687: LD_VAR 0 3
18691: PPUSH
18692: LD_INT 0
18694: PPUSH
18695: CALL_OW 505
// SetTag ( i , 0 ) ;
18699: LD_VAR 0 3
18703: PPUSH
18704: LD_INT 0
18706: PPUSH
18707: CALL_OW 109
// scaners := scaners diff i ;
18711: LD_ADDR_VAR 0 6
18715: PUSH
18716: LD_VAR 0 6
18720: PUSH
18721: LD_VAR 0 3
18725: DIFF
18726: ST_TO_ADDR
// continue ;
18727: GO 18613
// end ; if side in [ your_side , 9 ] then
18729: LD_VAR 0 8
18733: PUSH
18734: LD_OWVAR 2
18738: PUSH
18739: LD_INT 9
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: IN
18746: IFFALSE 18762
// SetUnitDisplayNumber ( i , timer ) ;
18748: LD_VAR 0 3
18752: PPUSH
18753: LD_VAR 0 7
18757: PPUSH
18758: CALL_OW 505
// end ;
18762: GO 18613
18764: POP
18765: POP
// if not scaners then
18766: LD_VAR 0 6
18770: NOT
18771: IFFALSE 18775
// exit ;
18773: GO 18866
// timer := Dec ( timer ) ;
18775: LD_ADDR_VAR 0 7
18779: PUSH
18780: LD_VAR 0 7
18784: PPUSH
18785: CALL 59944 0 1
18789: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18790: LD_INT 35
18792: PPUSH
18793: CALL_OW 67
// until timer = 0 ;
18797: LD_VAR 0 7
18801: PUSH
18802: LD_INT 0
18804: EQUAL
18805: IFFALSE 18603
// if not scaners then
18807: LD_VAR 0 6
18811: NOT
18812: IFFALSE 18816
// exit ;
18814: GO 18866
// for i in scaners do
18816: LD_ADDR_VAR 0 3
18820: PUSH
18821: LD_VAR 0 6
18825: PUSH
18826: FOR_IN
18827: IFFALSE 18864
// begin SetUnitDisplayNumber ( i , 0 ) ;
18829: LD_VAR 0 3
18833: PPUSH
18834: LD_INT 0
18836: PPUSH
18837: CALL_OW 505
// SetTag ( i , 0 ) ;
18841: LD_VAR 0 3
18845: PPUSH
18846: LD_INT 0
18848: PPUSH
18849: CALL_OW 109
// RevealDetectorMine ( i ) ;
18853: LD_VAR 0 3
18857: PPUSH
18858: CALL 18086 0 1
// end ;
18862: GO 18826
18864: POP
18865: POP
// end ;
18866: LD_VAR 0 2
18870: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
18871: LD_INT 0
18873: PPUSH
// if p1 = mine_detector_mode then
18874: LD_VAR 0 2
18878: PUSH
18879: LD_INT 103
18881: EQUAL
18882: IFFALSE 18893
// DetectMine ( units ) ;
18884: LD_VAR 0 1
18888: PPUSH
18889: CALL 18384 0 1
// end ; end_of_file
18893: LD_VAR 0 7
18897: RET
// every 0 0$1 do
18898: GO 18900
18900: DISABLE
// begin enable ;
18901: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18902: LD_STRING updateTimer(
18904: PUSH
18905: LD_OWVAR 1
18909: STR
18910: PUSH
18911: LD_STRING );
18913: STR
18914: PPUSH
18915: CALL_OW 559
// end ;
18919: END
// export function SOS_MapStart ( ) ; begin
18920: LD_INT 0
18922: PPUSH
// UpdateFactoryWaypoints ( ) ;
18923: CALL 19861 0 0
// UpdateWarehouseGatheringPoints ( ) ;
18927: CALL 20113 0 0
// ParseMultiDataToLua ( ) ;
18931: CALL 20260 0 0
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
18935: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
18937: PPUSH
18938: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
18942: LD_STRING setSpecLogoNumber(
18944: PUSH
18945: LD_INT 2
18947: STR
18948: PUSH
18949: LD_STRING ,
18951: STR
18952: PUSH
18953: LD_INT 1
18955: STR
18956: PUSH
18957: LD_STRING )
18959: STR
18960: PPUSH
18961: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
18965: LD_STRING setSpecLogoNumber(
18967: PUSH
18968: LD_INT 3
18970: STR
18971: PUSH
18972: LD_STRING ,
18974: STR
18975: PUSH
18976: LD_INT 2
18978: STR
18979: PUSH
18980: LD_STRING )
18982: STR
18983: PPUSH
18984: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
18988: LD_STRING setSpecLogoNumber(
18990: PUSH
18991: LD_INT 4
18993: STR
18994: PUSH
18995: LD_STRING ,
18997: STR
18998: PUSH
18999: LD_INT 3
19001: STR
19002: PUSH
19003: LD_STRING )
19005: STR
19006: PPUSH
19007: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
19011: LD_STRING setSpecLogoNumber(
19013: PUSH
19014: LD_INT 5
19016: STR
19017: PUSH
19018: LD_STRING ,
19020: STR
19021: PUSH
19022: LD_INT 4
19024: STR
19025: PUSH
19026: LD_STRING )
19028: STR
19029: PPUSH
19030: CALL_OW 559
// end ;
19034: LD_VAR 0 1
19038: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
19039: LD_INT 0
19041: PPUSH
19042: PPUSH
19043: PPUSH
19044: PPUSH
19045: PPUSH
19046: PPUSH
19047: PPUSH
19048: PPUSH
19049: PPUSH
// for i := 1 to 8 do
19050: LD_ADDR_VAR 0 2
19054: PUSH
19055: DOUBLE
19056: LD_INT 1
19058: DEC
19059: ST_TO_ADDR
19060: LD_INT 8
19062: PUSH
19063: FOR_TO
19064: IFFALSE 19449
// begin if mpSidePositions [ i ] then
19066: LD_EXP 9
19070: PUSH
19071: LD_VAR 0 2
19075: ARRAY
19076: IFFALSE 19447
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
19078: LD_ADDR_VAR 0 7
19082: PUSH
19083: LD_INT 22
19085: PUSH
19086: LD_VAR 0 2
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: LD_INT 21
19097: PUSH
19098: LD_INT 1
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: PPUSH
19109: CALL_OW 69
19113: PPUSH
19114: CALL 22573 0 1
19118: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19119: LD_ADDR_VAR 0 9
19123: PUSH
19124: LD_INT 22
19126: PUSH
19127: LD_VAR 0 2
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: LD_INT 2
19138: PUSH
19139: LD_INT 30
19141: PUSH
19142: LD_INT 0
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: PUSH
19149: LD_INT 30
19151: PUSH
19152: LD_INT 1
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: LIST
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: PPUSH
19168: CALL_OW 69
19172: ST_TO_ADDR
// crates := 0 ;
19173: LD_ADDR_VAR 0 4
19177: PUSH
19178: LD_INT 0
19180: ST_TO_ADDR
// oil := 0 ;
19181: LD_ADDR_VAR 0 5
19185: PUSH
19186: LD_INT 0
19188: ST_TO_ADDR
// sib := 0 ;
19189: LD_ADDR_VAR 0 6
19193: PUSH
19194: LD_INT 0
19196: ST_TO_ADDR
// if bases then
19197: LD_VAR 0 9
19201: IFFALSE 19307
// begin for j in bases do
19203: LD_ADDR_VAR 0 3
19207: PUSH
19208: LD_VAR 0 9
19212: PUSH
19213: FOR_IN
19214: IFFALSE 19305
// begin base := GetBase ( j ) ;
19216: LD_ADDR_VAR 0 8
19220: PUSH
19221: LD_VAR 0 3
19225: PPUSH
19226: CALL_OW 274
19230: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
19231: LD_ADDR_VAR 0 4
19235: PUSH
19236: LD_VAR 0 4
19240: PUSH
19241: LD_VAR 0 8
19245: PPUSH
19246: LD_INT 1
19248: PPUSH
19249: CALL_OW 275
19253: PLUS
19254: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
19255: LD_ADDR_VAR 0 5
19259: PUSH
19260: LD_VAR 0 5
19264: PUSH
19265: LD_VAR 0 8
19269: PPUSH
19270: LD_INT 2
19272: PPUSH
19273: CALL_OW 275
19277: PLUS
19278: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
19279: LD_ADDR_VAR 0 6
19283: PUSH
19284: LD_VAR 0 6
19288: PUSH
19289: LD_VAR 0 8
19293: PPUSH
19294: LD_INT 3
19296: PPUSH
19297: CALL_OW 275
19301: PLUS
19302: ST_TO_ADDR
// end ;
19303: GO 19213
19305: POP
19306: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
19307: LD_STRING setSpecText(
19309: PUSH
19310: LD_VAR 0 2
19314: STR
19315: PUSH
19316: LD_STRING ,
19318: STR
19319: PUSH
19320: LD_INT 2
19322: STR
19323: PUSH
19324: LD_STRING ,
19326: STR
19327: PUSH
19328: LD_VAR 0 4
19332: STR
19333: PUSH
19334: LD_STRING )
19336: STR
19337: PPUSH
19338: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
19342: LD_STRING setSpecText(
19344: PUSH
19345: LD_VAR 0 2
19349: STR
19350: PUSH
19351: LD_STRING ,
19353: STR
19354: PUSH
19355: LD_INT 3
19357: STR
19358: PUSH
19359: LD_STRING ,
19361: STR
19362: PUSH
19363: LD_VAR 0 5
19367: STR
19368: PUSH
19369: LD_STRING )
19371: STR
19372: PPUSH
19373: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
19377: LD_STRING setSpecText(
19379: PUSH
19380: LD_VAR 0 2
19384: STR
19385: PUSH
19386: LD_STRING ,
19388: STR
19389: PUSH
19390: LD_INT 4
19392: STR
19393: PUSH
19394: LD_STRING ,
19396: STR
19397: PUSH
19398: LD_VAR 0 6
19402: STR
19403: PUSH
19404: LD_STRING )
19406: STR
19407: PPUSH
19408: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
19412: LD_STRING setSpecText(
19414: PUSH
19415: LD_VAR 0 2
19419: STR
19420: PUSH
19421: LD_STRING ,
19423: STR
19424: PUSH
19425: LD_INT 5
19427: STR
19428: PUSH
19429: LD_STRING ,
19431: STR
19432: PUSH
19433: LD_VAR 0 7
19437: STR
19438: PUSH
19439: LD_STRING )
19441: STR
19442: PPUSH
19443: CALL_OW 559
// end ; end ;
19447: GO 19063
19449: POP
19450: POP
// end ;
19451: LD_VAR 0 1
19455: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
19456: LD_INT 2
19458: PUSH
19459: LD_INT 30
19461: PUSH
19462: LD_INT 0
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: PUSH
19469: LD_INT 30
19471: PUSH
19472: LD_INT 1
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: LIST
19483: PPUSH
19484: CALL_OW 69
19488: IFFALSE 19498
19490: GO 19492
19492: DISABLE
// begin enable ;
19493: ENABLE
// UpdateSpectatorBar ;
19494: CALL 19039 0 0
// end ;
19498: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19499: LD_INT 0
19501: PPUSH
// end ;
19502: LD_VAR 0 12
19506: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19507: LD_INT 0
19509: PPUSH
19510: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19511: LD_VAR 0 1
19515: NOT
19516: IFTRUE 19535
19518: PUSH
19519: LD_VAR 0 2
19523: PPUSH
19524: LD_VAR 0 3
19528: PPUSH
19529: CALL_OW 488
19533: NOT
19534: OR
19535: IFTRUE 19570
19537: PUSH
19538: LD_VAR 0 1
19542: PPUSH
19543: CALL_OW 266
19547: PUSH
19548: LD_INT 3
19550: NONEQUAL
19551: IFFALSE 19569
19553: PUSH
19554: LD_VAR 0 1
19558: PPUSH
19559: CALL_OW 247
19563: PUSH
19564: LD_INT 1
19566: EQUAL
19567: NOT
19568: AND
19569: OR
19570: IFFALSE 19574
// exit ;
19572: GO 19856
// if GetType ( factory ) = unit_human then
19574: LD_VAR 0 1
19578: PPUSH
19579: CALL_OW 247
19583: PUSH
19584: LD_INT 1
19586: EQUAL
19587: IFFALSE 19604
// factory := IsInUnit ( factory ) ;
19589: LD_ADDR_VAR 0 1
19593: PUSH
19594: LD_VAR 0 1
19598: PPUSH
19599: CALL_OW 310
19603: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
19604: LD_VAR 0 1
19608: PPUSH
19609: CALL_OW 266
19613: PUSH
19614: LD_INT 3
19616: NONEQUAL
19617: IFFALSE 19621
// exit ;
19619: GO 19856
// for i := 1 to Count ( factoryWaypoints ) do
19621: LD_ADDR_VAR 0 5
19625: PUSH
19626: DOUBLE
19627: LD_INT 1
19629: DEC
19630: ST_TO_ADDR
19631: LD_EXP 62
19635: PPUSH
19636: CALL 22573 0 1
19640: PUSH
19641: FOR_TO
19642: IFFALSE 19804
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
19644: LD_VAR 0 2
19648: PPUSH
19649: LD_VAR 0 3
19653: PPUSH
19654: CALL_OW 428
19658: PUSH
19659: LD_EXP 62
19663: PUSH
19664: LD_VAR 0 5
19668: ARRAY
19669: PUSH
19670: LD_INT 2
19672: ARRAY
19673: EQUAL
19674: IFFALSE 19706
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
19676: LD_ADDR_EXP 62
19680: PUSH
19681: LD_EXP 62
19685: PPUSH
19686: LD_VAR 0 5
19690: PPUSH
19691: CALL_OW 3
19695: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19696: CALL 19861 0 0
// exit ;
19700: POP
19701: POP
19702: GO 19856
// end else
19704: GO 19802
// if factory = factoryWaypoints [ i ] [ 2 ] then
19706: LD_VAR 0 1
19710: PUSH
19711: LD_EXP 62
19715: PUSH
19716: LD_VAR 0 5
19720: ARRAY
19721: PUSH
19722: LD_INT 2
19724: ARRAY
19725: EQUAL
19726: IFFALSE 19802
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
19728: LD_ADDR_EXP 62
19732: PUSH
19733: LD_EXP 62
19737: PPUSH
19738: LD_VAR 0 5
19742: PPUSH
19743: CALL_OW 3
19747: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
19748: LD_ADDR_EXP 62
19752: PUSH
19753: LD_EXP 62
19757: PPUSH
19758: LD_VAR 0 1
19762: PPUSH
19763: CALL_OW 255
19767: PUSH
19768: LD_VAR 0 1
19772: PUSH
19773: LD_VAR 0 2
19777: PUSH
19778: LD_VAR 0 3
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: PPUSH
19789: CALL 58549 0 2
19793: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19794: CALL 19861 0 0
// exit ;
19798: POP
19799: POP
19800: GO 19856
// end ; end ;
19802: GO 19641
19804: POP
19805: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
19806: LD_ADDR_EXP 62
19810: PUSH
19811: LD_EXP 62
19815: PPUSH
19816: LD_VAR 0 1
19820: PPUSH
19821: CALL_OW 255
19825: PUSH
19826: LD_VAR 0 1
19830: PUSH
19831: LD_VAR 0 2
19835: PUSH
19836: LD_VAR 0 3
19840: PUSH
19841: EMPTY
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: PPUSH
19847: CALL 58549 0 2
19851: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19852: CALL 19861 0 0
// end ;
19856: LD_VAR 0 4
19860: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
19861: LD_INT 0
19863: PPUSH
19864: PPUSH
19865: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
19866: LD_STRING resetFactoryWaypoint();
19868: PPUSH
19869: CALL_OW 559
// if factoryWaypoints then
19873: LD_EXP 62
19877: IFFALSE 19998
// begin list := factoryWaypoints ;
19879: LD_ADDR_VAR 0 3
19883: PUSH
19884: LD_EXP 62
19888: ST_TO_ADDR
// for i := 1 to list do
19889: LD_ADDR_VAR 0 2
19893: PUSH
19894: DOUBLE
19895: LD_INT 1
19897: DEC
19898: ST_TO_ADDR
19899: LD_VAR 0 3
19903: PUSH
19904: FOR_TO
19905: IFFALSE 19996
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19907: LD_STRING setFactoryWaypointXY(
19909: PUSH
19910: LD_VAR 0 3
19914: PUSH
19915: LD_VAR 0 2
19919: ARRAY
19920: PUSH
19921: LD_INT 1
19923: ARRAY
19924: STR
19925: PUSH
19926: LD_STRING ,
19928: STR
19929: PUSH
19930: LD_VAR 0 3
19934: PUSH
19935: LD_VAR 0 2
19939: ARRAY
19940: PUSH
19941: LD_INT 2
19943: ARRAY
19944: STR
19945: PUSH
19946: LD_STRING ,
19948: STR
19949: PUSH
19950: LD_VAR 0 3
19954: PUSH
19955: LD_VAR 0 2
19959: ARRAY
19960: PUSH
19961: LD_INT 3
19963: ARRAY
19964: STR
19965: PUSH
19966: LD_STRING ,
19968: STR
19969: PUSH
19970: LD_VAR 0 3
19974: PUSH
19975: LD_VAR 0 2
19979: ARRAY
19980: PUSH
19981: LD_INT 4
19983: ARRAY
19984: STR
19985: PUSH
19986: LD_STRING )
19988: STR
19989: PPUSH
19990: CALL_OW 559
19994: GO 19904
19996: POP
19997: POP
// end ; end ;
19998: LD_VAR 0 1
20002: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
20003: LD_INT 0
20005: PPUSH
// if HexInfo ( x , y ) = warehouse then
20006: LD_VAR 0 2
20010: PPUSH
20011: LD_VAR 0 3
20015: PPUSH
20016: CALL_OW 428
20020: PUSH
20021: LD_VAR 0 1
20025: EQUAL
20026: IFFALSE 20053
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
20028: LD_ADDR_EXP 64
20032: PUSH
20033: LD_EXP 64
20037: PPUSH
20038: LD_VAR 0 1
20042: PPUSH
20043: LD_INT 0
20045: PPUSH
20046: CALL_OW 1
20050: ST_TO_ADDR
20051: GO 20104
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
20053: LD_ADDR_EXP 64
20057: PUSH
20058: LD_EXP 64
20062: PPUSH
20063: LD_VAR 0 1
20067: PPUSH
20068: LD_VAR 0 1
20072: PPUSH
20073: CALL_OW 255
20077: PUSH
20078: LD_VAR 0 1
20082: PUSH
20083: LD_VAR 0 2
20087: PUSH
20088: LD_VAR 0 3
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: PPUSH
20099: CALL_OW 1
20103: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
20104: CALL 20113 0 0
// end ;
20108: LD_VAR 0 4
20112: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
20113: LD_INT 0
20115: PPUSH
20116: PPUSH
20117: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
20118: LD_STRING resetWarehouseGatheringPoints();
20120: PPUSH
20121: CALL_OW 559
// if warehouseGatheringPoints then
20125: LD_EXP 64
20129: IFFALSE 20255
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
20131: LD_ADDR_VAR 0 3
20135: PUSH
20136: LD_EXP 64
20140: PPUSH
20141: CALL 62483 0 1
20145: ST_TO_ADDR
// for i := 1 to list do
20146: LD_ADDR_VAR 0 2
20150: PUSH
20151: DOUBLE
20152: LD_INT 1
20154: DEC
20155: ST_TO_ADDR
20156: LD_VAR 0 3
20160: PUSH
20161: FOR_TO
20162: IFFALSE 20253
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20164: LD_STRING setWarehouseGatheringPointXY(
20166: PUSH
20167: LD_VAR 0 3
20171: PUSH
20172: LD_VAR 0 2
20176: ARRAY
20177: PUSH
20178: LD_INT 1
20180: ARRAY
20181: STR
20182: PUSH
20183: LD_STRING ,
20185: STR
20186: PUSH
20187: LD_VAR 0 3
20191: PUSH
20192: LD_VAR 0 2
20196: ARRAY
20197: PUSH
20198: LD_INT 2
20200: ARRAY
20201: STR
20202: PUSH
20203: LD_STRING ,
20205: STR
20206: PUSH
20207: LD_VAR 0 3
20211: PUSH
20212: LD_VAR 0 2
20216: ARRAY
20217: PUSH
20218: LD_INT 3
20220: ARRAY
20221: STR
20222: PUSH
20223: LD_STRING ,
20225: STR
20226: PUSH
20227: LD_VAR 0 3
20231: PUSH
20232: LD_VAR 0 2
20236: ARRAY
20237: PUSH
20238: LD_INT 4
20240: ARRAY
20241: STR
20242: PUSH
20243: LD_STRING )
20245: STR
20246: PPUSH
20247: CALL_OW 559
20251: GO 20161
20253: POP
20254: POP
// end ; end ;
20255: LD_VAR 0 1
20259: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
20260: LD_INT 0
20262: PPUSH
20263: PPUSH
// if not mpSidePositions then
20264: LD_EXP 9
20268: NOT
20269: IFFALSE 20273
// exit ;
20271: GO 20344
// result :=  ;
20273: LD_ADDR_VAR 0 1
20277: PUSH
20278: LD_STRING 
20280: ST_TO_ADDR
// for i := 1 to 8 do
20281: LD_ADDR_VAR 0 2
20285: PUSH
20286: DOUBLE
20287: LD_INT 1
20289: DEC
20290: ST_TO_ADDR
20291: LD_INT 8
20293: PUSH
20294: FOR_TO
20295: IFFALSE 20325
// begin result := result & mpSidePositions [ i ] & ; ;
20297: LD_ADDR_VAR 0 1
20301: PUSH
20302: LD_VAR 0 1
20306: PUSH
20307: LD_EXP 9
20311: PUSH
20312: LD_VAR 0 2
20316: ARRAY
20317: STR
20318: PUSH
20319: LD_STRING ;
20321: STR
20322: ST_TO_ADDR
// end ;
20323: GO 20294
20325: POP
20326: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
20327: LD_STRING setMultiplayerRealPosition("
20329: PUSH
20330: LD_VAR 0 1
20334: STR
20335: PUSH
20336: LD_STRING ");
20338: STR
20339: PPUSH
20340: CALL_OW 559
// end ; end_of_file
20344: LD_VAR 0 1
20348: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
20349: LD_INT 0
20351: PPUSH
20352: PPUSH
// if exist_mode then
20353: LD_VAR 0 2
20357: IFFALSE 20403
// begin unit := CreateCharacter ( prefix & ident ) ;
20359: LD_ADDR_VAR 0 5
20363: PUSH
20364: LD_VAR 0 3
20368: PUSH
20369: LD_VAR 0 1
20373: STR
20374: PPUSH
20375: CALL_OW 34
20379: ST_TO_ADDR
// if unit then
20380: LD_VAR 0 5
20384: IFFALSE 20401
// DeleteCharacters ( prefix & ident ) ;
20386: LD_VAR 0 3
20390: PUSH
20391: LD_VAR 0 1
20395: STR
20396: PPUSH
20397: CALL_OW 40
// end else
20401: GO 20418
// unit := NewCharacter ( ident ) ;
20403: LD_ADDR_VAR 0 5
20407: PUSH
20408: LD_VAR 0 1
20412: PPUSH
20413: CALL_OW 25
20417: ST_TO_ADDR
// result := unit ;
20418: LD_ADDR_VAR 0 4
20422: PUSH
20423: LD_VAR 0 5
20427: ST_TO_ADDR
// end ;
20428: LD_VAR 0 4
20432: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
20433: LD_INT 0
20435: PPUSH
20436: PPUSH
// if exist_mode then
20437: LD_VAR 0 2
20441: IFFALSE 20466
// unit := CreateCharacter ( prefix & ident ) else
20443: LD_ADDR_VAR 0 5
20447: PUSH
20448: LD_VAR 0 3
20452: PUSH
20453: LD_VAR 0 1
20457: STR
20458: PPUSH
20459: CALL_OW 34
20463: ST_TO_ADDR
20464: GO 20481
// unit := NewCharacter ( ident ) ;
20466: LD_ADDR_VAR 0 5
20470: PUSH
20471: LD_VAR 0 1
20475: PPUSH
20476: CALL_OW 25
20480: ST_TO_ADDR
// result := unit ;
20481: LD_ADDR_VAR 0 4
20485: PUSH
20486: LD_VAR 0 5
20490: ST_TO_ADDR
// end ;
20491: LD_VAR 0 4
20495: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
20496: LD_INT 0
20498: PPUSH
20499: PPUSH
// if not side or not nation then
20500: LD_VAR 0 1
20504: NOT
20505: IFTRUE 20514
20507: PUSH
20508: LD_VAR 0 2
20512: NOT
20513: OR
20514: IFFALSE 20518
// exit ;
20516: GO 21312
// case nation of nation_american :
20518: LD_VAR 0 2
20522: PUSH
20523: LD_INT 1
20525: DOUBLE
20526: EQUAL
20527: IFTRUE 20531
20529: GO 20753
20531: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
20532: LD_ADDR_VAR 0 4
20536: PUSH
20537: LD_INT 35
20539: PUSH
20540: LD_INT 45
20542: PUSH
20543: LD_INT 46
20545: PUSH
20546: LD_INT 47
20548: PUSH
20549: LD_INT 82
20551: PUSH
20552: LD_INT 83
20554: PUSH
20555: LD_INT 84
20557: PUSH
20558: LD_INT 85
20560: PUSH
20561: LD_INT 86
20563: PUSH
20564: LD_INT 1
20566: PUSH
20567: LD_INT 2
20569: PUSH
20570: LD_INT 6
20572: PUSH
20573: LD_INT 15
20575: PUSH
20576: LD_INT 16
20578: PUSH
20579: LD_INT 7
20581: PUSH
20582: LD_INT 12
20584: PUSH
20585: LD_INT 13
20587: PUSH
20588: LD_INT 10
20590: PUSH
20591: LD_INT 14
20593: PUSH
20594: LD_INT 20
20596: PUSH
20597: LD_INT 21
20599: PUSH
20600: LD_INT 22
20602: PUSH
20603: LD_INT 25
20605: PUSH
20606: LD_INT 32
20608: PUSH
20609: LD_INT 27
20611: PUSH
20612: LD_INT 36
20614: PUSH
20615: LD_INT 69
20617: PUSH
20618: LD_INT 39
20620: PUSH
20621: LD_INT 34
20623: PUSH
20624: LD_INT 40
20626: PUSH
20627: LD_INT 48
20629: PUSH
20630: LD_INT 49
20632: PUSH
20633: LD_INT 50
20635: PUSH
20636: LD_INT 51
20638: PUSH
20639: LD_INT 52
20641: PUSH
20642: LD_INT 53
20644: PUSH
20645: LD_INT 54
20647: PUSH
20648: LD_INT 55
20650: PUSH
20651: LD_INT 56
20653: PUSH
20654: LD_INT 57
20656: PUSH
20657: LD_INT 58
20659: PUSH
20660: LD_INT 59
20662: PUSH
20663: LD_INT 60
20665: PUSH
20666: LD_INT 61
20668: PUSH
20669: LD_INT 62
20671: PUSH
20672: LD_INT 80
20674: PUSH
20675: LD_INT 82
20677: PUSH
20678: LD_INT 83
20680: PUSH
20681: LD_INT 84
20683: PUSH
20684: LD_INT 85
20686: PUSH
20687: LD_INT 86
20689: PUSH
20690: LD_INT 90
20692: PUSH
20693: LD_INT 93
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: ST_TO_ADDR
20751: GO 21234
20753: LD_INT 2
20755: DOUBLE
20756: EQUAL
20757: IFTRUE 20761
20759: GO 20995
20761: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
20762: LD_ADDR_VAR 0 4
20766: PUSH
20767: LD_INT 35
20769: PUSH
20770: LD_INT 45
20772: PUSH
20773: LD_INT 46
20775: PUSH
20776: LD_INT 47
20778: PUSH
20779: LD_INT 82
20781: PUSH
20782: LD_INT 83
20784: PUSH
20785: LD_INT 84
20787: PUSH
20788: LD_INT 85
20790: PUSH
20791: LD_INT 87
20793: PUSH
20794: LD_INT 70
20796: PUSH
20797: LD_INT 1
20799: PUSH
20800: LD_INT 11
20802: PUSH
20803: LD_INT 3
20805: PUSH
20806: LD_INT 4
20808: PUSH
20809: LD_INT 5
20811: PUSH
20812: LD_INT 6
20814: PUSH
20815: LD_INT 15
20817: PUSH
20818: LD_INT 18
20820: PUSH
20821: LD_INT 7
20823: PUSH
20824: LD_INT 17
20826: PUSH
20827: LD_INT 8
20829: PUSH
20830: LD_INT 20
20832: PUSH
20833: LD_INT 21
20835: PUSH
20836: LD_INT 22
20838: PUSH
20839: LD_INT 72
20841: PUSH
20842: LD_INT 26
20844: PUSH
20845: LD_INT 69
20847: PUSH
20848: LD_INT 39
20850: PUSH
20851: LD_INT 40
20853: PUSH
20854: LD_INT 41
20856: PUSH
20857: LD_INT 42
20859: PUSH
20860: LD_INT 43
20862: PUSH
20863: LD_INT 48
20865: PUSH
20866: LD_INT 49
20868: PUSH
20869: LD_INT 50
20871: PUSH
20872: LD_INT 51
20874: PUSH
20875: LD_INT 52
20877: PUSH
20878: LD_INT 53
20880: PUSH
20881: LD_INT 54
20883: PUSH
20884: LD_INT 55
20886: PUSH
20887: LD_INT 56
20889: PUSH
20890: LD_INT 60
20892: PUSH
20893: LD_INT 61
20895: PUSH
20896: LD_INT 62
20898: PUSH
20899: LD_INT 66
20901: PUSH
20902: LD_INT 67
20904: PUSH
20905: LD_INT 68
20907: PUSH
20908: LD_INT 81
20910: PUSH
20911: LD_INT 82
20913: PUSH
20914: LD_INT 83
20916: PUSH
20917: LD_INT 84
20919: PUSH
20920: LD_INT 85
20922: PUSH
20923: LD_INT 87
20925: PUSH
20926: LD_INT 88
20928: PUSH
20929: LD_INT 92
20931: PUSH
20932: LD_INT 94
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: ST_TO_ADDR
20993: GO 21234
20995: LD_INT 3
20997: DOUBLE
20998: EQUAL
20999: IFTRUE 21003
21001: GO 21233
21003: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
21004: LD_ADDR_VAR 0 4
21008: PUSH
21009: LD_INT 46
21011: PUSH
21012: LD_INT 47
21014: PUSH
21015: LD_INT 1
21017: PUSH
21018: LD_INT 2
21020: PUSH
21021: LD_INT 82
21023: PUSH
21024: LD_INT 83
21026: PUSH
21027: LD_INT 84
21029: PUSH
21030: LD_INT 85
21032: PUSH
21033: LD_INT 86
21035: PUSH
21036: LD_INT 11
21038: PUSH
21039: LD_INT 9
21041: PUSH
21042: LD_INT 20
21044: PUSH
21045: LD_INT 19
21047: PUSH
21048: LD_INT 21
21050: PUSH
21051: LD_INT 24
21053: PUSH
21054: LD_INT 22
21056: PUSH
21057: LD_INT 25
21059: PUSH
21060: LD_INT 28
21062: PUSH
21063: LD_INT 29
21065: PUSH
21066: LD_INT 30
21068: PUSH
21069: LD_INT 31
21071: PUSH
21072: LD_INT 37
21074: PUSH
21075: LD_INT 38
21077: PUSH
21078: LD_INT 32
21080: PUSH
21081: LD_INT 27
21083: PUSH
21084: LD_INT 33
21086: PUSH
21087: LD_INT 69
21089: PUSH
21090: LD_INT 39
21092: PUSH
21093: LD_INT 34
21095: PUSH
21096: LD_INT 40
21098: PUSH
21099: LD_INT 71
21101: PUSH
21102: LD_INT 23
21104: PUSH
21105: LD_INT 44
21107: PUSH
21108: LD_INT 48
21110: PUSH
21111: LD_INT 49
21113: PUSH
21114: LD_INT 50
21116: PUSH
21117: LD_INT 51
21119: PUSH
21120: LD_INT 52
21122: PUSH
21123: LD_INT 53
21125: PUSH
21126: LD_INT 54
21128: PUSH
21129: LD_INT 55
21131: PUSH
21132: LD_INT 56
21134: PUSH
21135: LD_INT 57
21137: PUSH
21138: LD_INT 58
21140: PUSH
21141: LD_INT 59
21143: PUSH
21144: LD_INT 63
21146: PUSH
21147: LD_INT 64
21149: PUSH
21150: LD_INT 65
21152: PUSH
21153: LD_INT 82
21155: PUSH
21156: LD_INT 83
21158: PUSH
21159: LD_INT 84
21161: PUSH
21162: LD_INT 85
21164: PUSH
21165: LD_INT 86
21167: PUSH
21168: LD_INT 89
21170: PUSH
21171: LD_INT 91
21173: PUSH
21174: EMPTY
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: ST_TO_ADDR
21231: GO 21234
21233: POP
// if state > - 1 and state < 3 then
21234: LD_VAR 0 3
21238: PUSH
21239: LD_INT 1
21241: NEG
21242: GREATER
21243: IFFALSE 21255
21245: PUSH
21246: LD_VAR 0 3
21250: PUSH
21251: LD_INT 3
21253: LESS
21254: AND
21255: IFFALSE 21312
// for i in result do
21257: LD_ADDR_VAR 0 5
21261: PUSH
21262: LD_VAR 0 4
21266: PUSH
21267: FOR_IN
21268: IFFALSE 21310
// if GetTech ( i , side ) <> state then
21270: LD_VAR 0 5
21274: PPUSH
21275: LD_VAR 0 1
21279: PPUSH
21280: CALL_OW 321
21284: PUSH
21285: LD_VAR 0 3
21289: NONEQUAL
21290: IFFALSE 21308
// result := result diff i ;
21292: LD_ADDR_VAR 0 4
21296: PUSH
21297: LD_VAR 0 4
21301: PUSH
21302: LD_VAR 0 5
21306: DIFF
21307: ST_TO_ADDR
21308: GO 21267
21310: POP
21311: POP
// end ;
21312: LD_VAR 0 4
21316: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
21317: LD_INT 0
21319: PPUSH
21320: PPUSH
21321: PPUSH
// result := true ;
21322: LD_ADDR_VAR 0 3
21326: PUSH
21327: LD_INT 1
21329: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
21330: LD_ADDR_VAR 0 5
21334: PUSH
21335: LD_VAR 0 2
21339: PPUSH
21340: CALL_OW 480
21344: ST_TO_ADDR
// if not tmp then
21345: LD_VAR 0 5
21349: NOT
21350: IFFALSE 21354
// exit ;
21352: GO 21403
// for i in tmp do
21354: LD_ADDR_VAR 0 4
21358: PUSH
21359: LD_VAR 0 5
21363: PUSH
21364: FOR_IN
21365: IFFALSE 21401
// if GetTech ( i , side ) <> state_researched then
21367: LD_VAR 0 4
21371: PPUSH
21372: LD_VAR 0 1
21376: PPUSH
21377: CALL_OW 321
21381: PUSH
21382: LD_INT 2
21384: NONEQUAL
21385: IFFALSE 21399
// begin result := false ;
21387: LD_ADDR_VAR 0 3
21391: PUSH
21392: LD_INT 0
21394: ST_TO_ADDR
// exit ;
21395: POP
21396: POP
21397: GO 21403
// end ;
21399: GO 21364
21401: POP
21402: POP
// end ;
21403: LD_VAR 0 3
21407: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
21408: LD_INT 0
21410: PPUSH
21411: PPUSH
21412: PPUSH
21413: PPUSH
21414: PPUSH
21415: PPUSH
21416: PPUSH
21417: PPUSH
21418: PPUSH
21419: PPUSH
21420: PPUSH
21421: PPUSH
21422: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
21423: LD_VAR 0 1
21427: NOT
21428: IFTRUE 21445
21430: PUSH
21431: LD_VAR 0 1
21435: PPUSH
21436: CALL_OW 257
21440: PUSH
21441: LD_INT 9
21443: NONEQUAL
21444: OR
21445: IFFALSE 21449
// exit ;
21447: GO 22028
// side := GetSide ( unit ) ;
21449: LD_ADDR_VAR 0 9
21453: PUSH
21454: LD_VAR 0 1
21458: PPUSH
21459: CALL_OW 255
21463: ST_TO_ADDR
// tech_space := tech_spacanom ;
21464: LD_ADDR_VAR 0 12
21468: PUSH
21469: LD_INT 29
21471: ST_TO_ADDR
// tech_time := tech_taurad ;
21472: LD_ADDR_VAR 0 13
21476: PUSH
21477: LD_INT 28
21479: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
21480: LD_ADDR_VAR 0 11
21484: PUSH
21485: LD_VAR 0 1
21489: PPUSH
21490: CALL_OW 310
21494: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
21495: LD_VAR 0 11
21499: PPUSH
21500: CALL_OW 247
21504: PUSH
21505: LD_INT 2
21507: EQUAL
21508: IFFALSE 21512
// exit ;
21510: GO 22028
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21512: LD_ADDR_VAR 0 8
21516: PUSH
21517: LD_INT 81
21519: PUSH
21520: LD_VAR 0 9
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: PUSH
21529: LD_INT 3
21531: PUSH
21532: LD_INT 21
21534: PUSH
21535: LD_INT 3
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: PPUSH
21550: CALL_OW 69
21554: ST_TO_ADDR
// if not tmp then
21555: LD_VAR 0 8
21559: NOT
21560: IFFALSE 21564
// exit ;
21562: GO 22028
// if in_unit then
21564: LD_VAR 0 11
21568: IFFALSE 21592
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
21570: LD_ADDR_VAR 0 10
21574: PUSH
21575: LD_VAR 0 8
21579: PPUSH
21580: LD_VAR 0 11
21584: PPUSH
21585: CALL_OW 74
21589: ST_TO_ADDR
21590: GO 21612
// enemy := NearestUnitToUnit ( tmp , unit ) ;
21592: LD_ADDR_VAR 0 10
21596: PUSH
21597: LD_VAR 0 8
21601: PPUSH
21602: LD_VAR 0 1
21606: PPUSH
21607: CALL_OW 74
21611: ST_TO_ADDR
// if not enemy then
21612: LD_VAR 0 10
21616: NOT
21617: IFFALSE 21621
// exit ;
21619: GO 22028
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
21621: LD_VAR 0 11
21625: IFFALSE 21647
21627: PUSH
21628: LD_VAR 0 11
21632: PPUSH
21633: LD_VAR 0 10
21637: PPUSH
21638: CALL_OW 296
21642: PUSH
21643: LD_INT 13
21645: GREATER
21646: AND
21647: IFTRUE 21669
21649: PUSH
21650: LD_VAR 0 1
21654: PPUSH
21655: LD_VAR 0 10
21659: PPUSH
21660: CALL_OW 296
21664: PUSH
21665: LD_INT 12
21667: GREATER
21668: OR
21669: IFFALSE 21673
// exit ;
21671: GO 22028
// missile := [ 1 ] ;
21673: LD_ADDR_VAR 0 14
21677: PUSH
21678: LD_INT 1
21680: PUSH
21681: EMPTY
21682: LIST
21683: ST_TO_ADDR
// if Researched ( side , tech_space ) then
21684: LD_VAR 0 9
21688: PPUSH
21689: LD_VAR 0 12
21693: PPUSH
21694: CALL_OW 325
21698: IFFALSE 21727
// missile := Replace ( missile , missile + 1 , 2 ) ;
21700: LD_ADDR_VAR 0 14
21704: PUSH
21705: LD_VAR 0 14
21709: PPUSH
21710: LD_VAR 0 14
21714: PUSH
21715: LD_INT 1
21717: PLUS
21718: PPUSH
21719: LD_INT 2
21721: PPUSH
21722: CALL_OW 1
21726: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
21727: LD_VAR 0 9
21731: PPUSH
21732: LD_VAR 0 13
21736: PPUSH
21737: CALL_OW 325
21741: IFFALSE 21765
21743: PUSH
21744: LD_VAR 0 10
21748: PPUSH
21749: CALL_OW 255
21753: PPUSH
21754: LD_VAR 0 13
21758: PPUSH
21759: CALL_OW 325
21763: NOT
21764: AND
21765: IFFALSE 21794
// missile := Replace ( missile , missile + 1 , 3 ) ;
21767: LD_ADDR_VAR 0 14
21771: PUSH
21772: LD_VAR 0 14
21776: PPUSH
21777: LD_VAR 0 14
21781: PUSH
21782: LD_INT 1
21784: PLUS
21785: PPUSH
21786: LD_INT 3
21788: PPUSH
21789: CALL_OW 1
21793: ST_TO_ADDR
// if missile < 2 then
21794: LD_VAR 0 14
21798: PUSH
21799: LD_INT 2
21801: LESS
21802: IFFALSE 21806
// exit ;
21804: GO 22028
// x := GetX ( enemy ) ;
21806: LD_ADDR_VAR 0 4
21810: PUSH
21811: LD_VAR 0 10
21815: PPUSH
21816: CALL_OW 250
21820: ST_TO_ADDR
// y := GetY ( enemy ) ;
21821: LD_ADDR_VAR 0 5
21825: PUSH
21826: LD_VAR 0 10
21830: PPUSH
21831: CALL_OW 251
21835: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
21836: LD_ADDR_VAR 0 6
21840: PUSH
21841: LD_VAR 0 4
21845: PUSH
21846: LD_INT 1
21848: NEG
21849: PPUSH
21850: LD_INT 1
21852: PPUSH
21853: CALL_OW 12
21857: PLUS
21858: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
21859: LD_ADDR_VAR 0 7
21863: PUSH
21864: LD_VAR 0 5
21868: PUSH
21869: LD_INT 1
21871: NEG
21872: PPUSH
21873: LD_INT 1
21875: PPUSH
21876: CALL_OW 12
21880: PLUS
21881: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21882: LD_VAR 0 6
21886: PPUSH
21887: LD_VAR 0 7
21891: PPUSH
21892: CALL_OW 488
21896: NOT
21897: IFFALSE 21919
// begin _x := x ;
21899: LD_ADDR_VAR 0 6
21903: PUSH
21904: LD_VAR 0 4
21908: ST_TO_ADDR
// _y := y ;
21909: LD_ADDR_VAR 0 7
21913: PUSH
21914: LD_VAR 0 5
21918: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
21919: LD_ADDR_VAR 0 3
21923: PUSH
21924: LD_INT 1
21926: PPUSH
21927: LD_VAR 0 14
21931: PPUSH
21932: CALL_OW 12
21936: ST_TO_ADDR
// case i of 1 :
21937: LD_VAR 0 3
21941: PUSH
21942: LD_INT 1
21944: DOUBLE
21945: EQUAL
21946: IFTRUE 21950
21948: GO 21967
21950: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
21951: LD_VAR 0 1
21955: PPUSH
21956: LD_VAR 0 10
21960: PPUSH
21961: CALL_OW 115
21965: GO 22028
21967: LD_INT 2
21969: DOUBLE
21970: EQUAL
21971: IFTRUE 21975
21973: GO 21997
21975: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
21976: LD_VAR 0 1
21980: PPUSH
21981: LD_VAR 0 6
21985: PPUSH
21986: LD_VAR 0 7
21990: PPUSH
21991: CALL_OW 153
21995: GO 22028
21997: LD_INT 3
21999: DOUBLE
22000: EQUAL
22001: IFTRUE 22005
22003: GO 22027
22005: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22006: LD_VAR 0 1
22010: PPUSH
22011: LD_VAR 0 6
22015: PPUSH
22016: LD_VAR 0 7
22020: PPUSH
22021: CALL_OW 154
22025: GO 22028
22027: POP
// end ;
22028: LD_VAR 0 2
22032: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22033: LD_INT 0
22035: PPUSH
22036: PPUSH
22037: PPUSH
22038: PPUSH
22039: PPUSH
22040: PPUSH
// if not unit or not building then
22041: LD_VAR 0 1
22045: NOT
22046: IFTRUE 22055
22048: PUSH
22049: LD_VAR 0 2
22053: NOT
22054: OR
22055: IFFALSE 22059
// exit ;
22057: GO 22217
// x := GetX ( building ) ;
22059: LD_ADDR_VAR 0 5
22063: PUSH
22064: LD_VAR 0 2
22068: PPUSH
22069: CALL_OW 250
22073: ST_TO_ADDR
// y := GetY ( building ) ;
22074: LD_ADDR_VAR 0 6
22078: PUSH
22079: LD_VAR 0 2
22083: PPUSH
22084: CALL_OW 251
22088: ST_TO_ADDR
// for i := 0 to 5 do
22089: LD_ADDR_VAR 0 4
22093: PUSH
22094: DOUBLE
22095: LD_INT 0
22097: DEC
22098: ST_TO_ADDR
22099: LD_INT 5
22101: PUSH
22102: FOR_TO
22103: IFFALSE 22215
// begin _x := ShiftX ( x , i , 3 ) ;
22105: LD_ADDR_VAR 0 7
22109: PUSH
22110: LD_VAR 0 5
22114: PPUSH
22115: LD_VAR 0 4
22119: PPUSH
22120: LD_INT 3
22122: PPUSH
22123: CALL_OW 272
22127: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
22128: LD_ADDR_VAR 0 8
22132: PUSH
22133: LD_VAR 0 6
22137: PPUSH
22138: LD_VAR 0 4
22142: PPUSH
22143: LD_INT 3
22145: PPUSH
22146: CALL_OW 273
22150: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22151: LD_VAR 0 7
22155: PPUSH
22156: LD_VAR 0 8
22160: PPUSH
22161: CALL_OW 488
22165: NOT
22166: IFFALSE 22170
// continue ;
22168: GO 22102
// if HexInfo ( _x , _y ) = 0 then
22170: LD_VAR 0 7
22174: PPUSH
22175: LD_VAR 0 8
22179: PPUSH
22180: CALL_OW 428
22184: PUSH
22185: LD_INT 0
22187: EQUAL
22188: IFFALSE 22213
// begin ComMoveXY ( unit , _x , _y ) ;
22190: LD_VAR 0 1
22194: PPUSH
22195: LD_VAR 0 7
22199: PPUSH
22200: LD_VAR 0 8
22204: PPUSH
22205: CALL_OW 111
// exit ;
22209: POP
22210: POP
22211: GO 22217
// end ; end ;
22213: GO 22102
22215: POP
22216: POP
// end ;
22217: LD_VAR 0 3
22221: RET
// export function ScanBase ( side , base_area ) ; begin
22222: LD_INT 0
22224: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
22225: LD_ADDR_VAR 0 3
22229: PUSH
22230: LD_VAR 0 2
22234: PPUSH
22235: LD_INT 81
22237: PUSH
22238: LD_VAR 0 1
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: PPUSH
22247: CALL_OW 70
22251: ST_TO_ADDR
// end ;
22252: LD_VAR 0 3
22256: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22257: LD_INT 0
22259: PPUSH
22260: PPUSH
22261: PPUSH
22262: PPUSH
// result := false ;
22263: LD_ADDR_VAR 0 2
22267: PUSH
22268: LD_INT 0
22270: ST_TO_ADDR
// side := GetSide ( unit ) ;
22271: LD_ADDR_VAR 0 3
22275: PUSH
22276: LD_VAR 0 1
22280: PPUSH
22281: CALL_OW 255
22285: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22286: LD_ADDR_VAR 0 4
22290: PUSH
22291: LD_VAR 0 1
22295: PPUSH
22296: CALL_OW 248
22300: ST_TO_ADDR
// case nat of 1 :
22301: LD_VAR 0 4
22305: PUSH
22306: LD_INT 1
22308: DOUBLE
22309: EQUAL
22310: IFTRUE 22314
22312: GO 22325
22314: POP
// tech := tech_lassight ; 2 :
22315: LD_ADDR_VAR 0 5
22319: PUSH
22320: LD_INT 12
22322: ST_TO_ADDR
22323: GO 22364
22325: LD_INT 2
22327: DOUBLE
22328: EQUAL
22329: IFTRUE 22333
22331: GO 22344
22333: POP
// tech := tech_mortar ; 3 :
22334: LD_ADDR_VAR 0 5
22338: PUSH
22339: LD_INT 41
22341: ST_TO_ADDR
22342: GO 22364
22344: LD_INT 3
22346: DOUBLE
22347: EQUAL
22348: IFTRUE 22352
22350: GO 22363
22352: POP
// tech := tech_bazooka ; end ;
22353: LD_ADDR_VAR 0 5
22357: PUSH
22358: LD_INT 44
22360: ST_TO_ADDR
22361: GO 22364
22363: POP
// if Researched ( side , tech ) then
22364: LD_VAR 0 3
22368: PPUSH
22369: LD_VAR 0 5
22373: PPUSH
22374: CALL_OW 325
22378: IFFALSE 22405
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22380: LD_ADDR_VAR 0 2
22384: PUSH
22385: LD_INT 5
22387: PUSH
22388: LD_INT 8
22390: PUSH
22391: LD_INT 9
22393: PUSH
22394: EMPTY
22395: LIST
22396: LIST
22397: LIST
22398: PUSH
22399: LD_VAR 0 4
22403: ARRAY
22404: ST_TO_ADDR
// end ;
22405: LD_VAR 0 2
22409: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22410: LD_INT 0
22412: PPUSH
22413: PPUSH
22414: PPUSH
// if not mines then
22415: LD_VAR 0 2
22419: NOT
22420: IFFALSE 22424
// exit ;
22422: GO 22568
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22424: LD_ADDR_VAR 0 5
22428: PUSH
22429: LD_INT 81
22431: PUSH
22432: LD_VAR 0 1
22436: PUSH
22437: EMPTY
22438: LIST
22439: LIST
22440: PUSH
22441: LD_INT 3
22443: PUSH
22444: LD_INT 21
22446: PUSH
22447: LD_INT 3
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: PPUSH
22462: CALL_OW 69
22466: ST_TO_ADDR
// for i in mines do
22467: LD_ADDR_VAR 0 4
22471: PUSH
22472: LD_VAR 0 2
22476: PUSH
22477: FOR_IN
22478: IFFALSE 22566
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22480: LD_VAR 0 4
22484: PUSH
22485: LD_INT 1
22487: ARRAY
22488: PPUSH
22489: LD_VAR 0 4
22493: PUSH
22494: LD_INT 2
22496: ARRAY
22497: PPUSH
22498: CALL_OW 458
22502: NOT
22503: IFFALSE 22507
// continue ;
22505: GO 22477
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22507: LD_VAR 0 4
22511: PUSH
22512: LD_INT 1
22514: ARRAY
22515: PPUSH
22516: LD_VAR 0 4
22520: PUSH
22521: LD_INT 2
22523: ARRAY
22524: PPUSH
22525: CALL_OW 428
22529: PUSH
22530: LD_VAR 0 5
22534: IN
22535: IFFALSE 22564
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22537: LD_VAR 0 4
22541: PUSH
22542: LD_INT 1
22544: ARRAY
22545: PPUSH
22546: LD_VAR 0 4
22550: PUSH
22551: LD_INT 2
22553: ARRAY
22554: PPUSH
22555: LD_VAR 0 1
22559: PPUSH
22560: CALL_OW 456
// end ;
22564: GO 22477
22566: POP
22567: POP
// end ;
22568: LD_VAR 0 3
22572: RET
// export function Count ( array ) ; begin
22573: LD_INT 0
22575: PPUSH
// result := array + 0 ;
22576: LD_ADDR_VAR 0 2
22580: PUSH
22581: LD_VAR 0 1
22585: PUSH
22586: LD_INT 0
22588: PLUS
22589: ST_TO_ADDR
// end ;
22590: LD_VAR 0 2
22594: RET
// export function IsEmpty ( building ) ; begin
22595: LD_INT 0
22597: PPUSH
// if not building then
22598: LD_VAR 0 1
22602: NOT
22603: IFFALSE 22607
// exit ;
22605: GO 22650
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22607: LD_ADDR_VAR 0 2
22611: PUSH
22612: LD_VAR 0 1
22616: PUSH
22617: LD_INT 22
22619: PUSH
22620: LD_VAR 0 1
22624: PPUSH
22625: CALL_OW 255
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 58
22636: PUSH
22637: EMPTY
22638: LIST
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PPUSH
22644: CALL_OW 69
22648: IN
22649: ST_TO_ADDR
// end ;
22650: LD_VAR 0 2
22654: RET
// export function IsNotFull ( building ) ; var places ; begin
22655: LD_INT 0
22657: PPUSH
22658: PPUSH
// if not building then
22659: LD_VAR 0 1
22663: NOT
22664: IFFALSE 22668
// exit ;
22666: GO 22696
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
22668: LD_ADDR_VAR 0 2
22672: PUSH
22673: LD_VAR 0 1
22677: PPUSH
22678: LD_INT 3
22680: PUSH
22681: LD_INT 62
22683: PUSH
22684: EMPTY
22685: LIST
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: PPUSH
22691: CALL_OW 72
22695: ST_TO_ADDR
// end ;
22696: LD_VAR 0 2
22700: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
22701: LD_INT 0
22703: PPUSH
22704: PPUSH
22705: PPUSH
22706: PPUSH
// tmp := [ ] ;
22707: LD_ADDR_VAR 0 3
22711: PUSH
22712: EMPTY
22713: ST_TO_ADDR
// list := [ ] ;
22714: LD_ADDR_VAR 0 5
22718: PUSH
22719: EMPTY
22720: ST_TO_ADDR
// for i = 16 to 25 do
22721: LD_ADDR_VAR 0 4
22725: PUSH
22726: DOUBLE
22727: LD_INT 16
22729: DEC
22730: ST_TO_ADDR
22731: LD_INT 25
22733: PUSH
22734: FOR_TO
22735: IFFALSE 22808
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
22737: LD_ADDR_VAR 0 3
22741: PUSH
22742: LD_VAR 0 3
22746: PUSH
22747: LD_INT 22
22749: PUSH
22750: LD_VAR 0 1
22754: PPUSH
22755: CALL_OW 255
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: PUSH
22764: LD_INT 91
22766: PUSH
22767: LD_VAR 0 1
22771: PUSH
22772: LD_INT 6
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: LIST
22779: PUSH
22780: LD_INT 30
22782: PUSH
22783: LD_VAR 0 4
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: LIST
22796: PUSH
22797: EMPTY
22798: LIST
22799: PPUSH
22800: CALL_OW 69
22804: ADD
22805: ST_TO_ADDR
22806: GO 22734
22808: POP
22809: POP
// for i = 1 to tmp do
22810: LD_ADDR_VAR 0 4
22814: PUSH
22815: DOUBLE
22816: LD_INT 1
22818: DEC
22819: ST_TO_ADDR
22820: LD_VAR 0 3
22824: PUSH
22825: FOR_TO
22826: IFFALSE 22914
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
22828: LD_ADDR_VAR 0 5
22832: PUSH
22833: LD_VAR 0 5
22837: PUSH
22838: LD_VAR 0 3
22842: PUSH
22843: LD_VAR 0 4
22847: ARRAY
22848: PPUSH
22849: CALL_OW 266
22853: PUSH
22854: LD_VAR 0 3
22858: PUSH
22859: LD_VAR 0 4
22863: ARRAY
22864: PPUSH
22865: CALL_OW 250
22869: PUSH
22870: LD_VAR 0 3
22874: PUSH
22875: LD_VAR 0 4
22879: ARRAY
22880: PPUSH
22881: CALL_OW 251
22885: PUSH
22886: LD_VAR 0 3
22890: PUSH
22891: LD_VAR 0 4
22895: ARRAY
22896: PPUSH
22897: CALL_OW 254
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: PUSH
22908: EMPTY
22909: LIST
22910: ADD
22911: ST_TO_ADDR
22912: GO 22825
22914: POP
22915: POP
// result := list ;
22916: LD_ADDR_VAR 0 2
22920: PUSH
22921: LD_VAR 0 5
22925: ST_TO_ADDR
// end ;
22926: LD_VAR 0 2
22930: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
22931: LD_INT 0
22933: PPUSH
22934: PPUSH
22935: PPUSH
22936: PPUSH
22937: PPUSH
22938: PPUSH
22939: PPUSH
// if not factory then
22940: LD_VAR 0 1
22944: NOT
22945: IFFALSE 22949
// exit ;
22947: GO 23552
// if control = control_apeman then
22949: LD_VAR 0 4
22953: PUSH
22954: LD_INT 5
22956: EQUAL
22957: IFFALSE 23066
// begin tmp := UnitsInside ( factory ) ;
22959: LD_ADDR_VAR 0 8
22963: PUSH
22964: LD_VAR 0 1
22968: PPUSH
22969: CALL_OW 313
22973: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
22974: LD_VAR 0 8
22978: PPUSH
22979: LD_INT 25
22981: PUSH
22982: LD_INT 12
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PPUSH
22989: CALL_OW 72
22993: NOT
22994: IFFALSE 23004
// control := control_manual ;
22996: LD_ADDR_VAR 0 4
23000: PUSH
23001: LD_INT 1
23003: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23004: LD_ADDR_VAR 0 8
23008: PUSH
23009: LD_VAR 0 1
23013: PPUSH
23014: CALL 22701 0 1
23018: ST_TO_ADDR
// if tmp then
23019: LD_VAR 0 8
23023: IFFALSE 23066
// begin for i in tmp do
23025: LD_ADDR_VAR 0 7
23029: PUSH
23030: LD_VAR 0 8
23034: PUSH
23035: FOR_IN
23036: IFFALSE 23064
// if i [ 1 ] = b_ext_radio then
23038: LD_VAR 0 7
23042: PUSH
23043: LD_INT 1
23045: ARRAY
23046: PUSH
23047: LD_INT 22
23049: EQUAL
23050: IFFALSE 23062
// begin control := control_remote ;
23052: LD_ADDR_VAR 0 4
23056: PUSH
23057: LD_INT 2
23059: ST_TO_ADDR
// break ;
23060: GO 23064
// end ;
23062: GO 23035
23064: POP
23065: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23066: LD_VAR 0 1
23070: PPUSH
23071: LD_VAR 0 2
23075: PPUSH
23076: LD_VAR 0 3
23080: PPUSH
23081: LD_VAR 0 4
23085: PPUSH
23086: LD_VAR 0 5
23090: PPUSH
23091: CALL_OW 448
23095: IFFALSE 23130
// begin result := [ chassis , engine , control , weapon ] ;
23097: LD_ADDR_VAR 0 6
23101: PUSH
23102: LD_VAR 0 2
23106: PUSH
23107: LD_VAR 0 3
23111: PUSH
23112: LD_VAR 0 4
23116: PUSH
23117: LD_VAR 0 5
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: ST_TO_ADDR
// exit ;
23128: GO 23552
// end ; _chassis := AvailableChassisList ( factory ) ;
23130: LD_ADDR_VAR 0 9
23134: PUSH
23135: LD_VAR 0 1
23139: PPUSH
23140: CALL_OW 475
23144: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23145: LD_ADDR_VAR 0 11
23149: PUSH
23150: LD_VAR 0 1
23154: PPUSH
23155: CALL_OW 476
23159: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23160: LD_ADDR_VAR 0 12
23164: PUSH
23165: LD_VAR 0 1
23169: PPUSH
23170: CALL_OW 477
23174: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23175: LD_ADDR_VAR 0 10
23179: PUSH
23180: LD_VAR 0 1
23184: PPUSH
23185: CALL_OW 478
23189: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23190: LD_VAR 0 9
23194: NOT
23195: IFTRUE 23204
23197: PUSH
23198: LD_VAR 0 11
23202: NOT
23203: OR
23204: IFTRUE 23213
23206: PUSH
23207: LD_VAR 0 12
23211: NOT
23212: OR
23213: IFTRUE 23222
23215: PUSH
23216: LD_VAR 0 10
23220: NOT
23221: OR
23222: IFFALSE 23257
// begin result := [ chassis , engine , control , weapon ] ;
23224: LD_ADDR_VAR 0 6
23228: PUSH
23229: LD_VAR 0 2
23233: PUSH
23234: LD_VAR 0 3
23238: PUSH
23239: LD_VAR 0 4
23243: PUSH
23244: LD_VAR 0 5
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: ST_TO_ADDR
// exit ;
23255: GO 23552
// end ; if not chassis in _chassis then
23257: LD_VAR 0 2
23261: PUSH
23262: LD_VAR 0 9
23266: IN
23267: NOT
23268: IFFALSE 23294
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23270: LD_ADDR_VAR 0 2
23274: PUSH
23275: LD_VAR 0 9
23279: PUSH
23280: LD_INT 1
23282: PPUSH
23283: LD_VAR 0 9
23287: PPUSH
23288: CALL_OW 12
23292: ARRAY
23293: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23294: LD_VAR 0 2
23298: PPUSH
23299: LD_VAR 0 3
23303: PPUSH
23304: CALL 23557 0 2
23308: NOT
23309: IFFALSE 23370
// repeat engine := _engine [ 1 ] ;
23311: LD_ADDR_VAR 0 3
23315: PUSH
23316: LD_VAR 0 11
23320: PUSH
23321: LD_INT 1
23323: ARRAY
23324: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23325: LD_ADDR_VAR 0 11
23329: PUSH
23330: LD_VAR 0 11
23334: PPUSH
23335: LD_INT 1
23337: PPUSH
23338: CALL_OW 3
23342: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23343: LD_VAR 0 2
23347: PPUSH
23348: LD_VAR 0 3
23352: PPUSH
23353: CALL 23557 0 2
23357: IFTRUE 23368
23359: PUSH
23360: LD_VAR 0 11
23364: PUSH
23365: EMPTY
23366: EQUAL
23367: OR
23368: IFFALSE 23311
// if not control in _control then
23370: LD_VAR 0 4
23374: PUSH
23375: LD_VAR 0 12
23379: IN
23380: NOT
23381: IFFALSE 23407
// control := _control [ rand ( 1 , _control ) ] ;
23383: LD_ADDR_VAR 0 4
23387: PUSH
23388: LD_VAR 0 12
23392: PUSH
23393: LD_INT 1
23395: PPUSH
23396: LD_VAR 0 12
23400: PPUSH
23401: CALL_OW 12
23405: ARRAY
23406: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23407: LD_VAR 0 2
23411: PPUSH
23412: LD_VAR 0 5
23416: PPUSH
23417: CALL 23779 0 2
23421: NOT
23422: IFFALSE 23483
// repeat weapon := _weapon [ 1 ] ;
23424: LD_ADDR_VAR 0 5
23428: PUSH
23429: LD_VAR 0 10
23433: PUSH
23434: LD_INT 1
23436: ARRAY
23437: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23438: LD_ADDR_VAR 0 10
23442: PUSH
23443: LD_VAR 0 10
23447: PPUSH
23448: LD_INT 1
23450: PPUSH
23451: CALL_OW 3
23455: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23456: LD_VAR 0 2
23460: PPUSH
23461: LD_VAR 0 5
23465: PPUSH
23466: CALL 23779 0 2
23470: IFTRUE 23481
23472: PUSH
23473: LD_VAR 0 10
23477: PUSH
23478: EMPTY
23479: EQUAL
23480: OR
23481: IFFALSE 23424
// result := [ ] ;
23483: LD_ADDR_VAR 0 6
23487: PUSH
23488: EMPTY
23489: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23490: LD_VAR 0 1
23494: PPUSH
23495: LD_VAR 0 2
23499: PPUSH
23500: LD_VAR 0 3
23504: PPUSH
23505: LD_VAR 0 4
23509: PPUSH
23510: LD_VAR 0 5
23514: PPUSH
23515: CALL_OW 448
23519: IFFALSE 23552
// result := [ chassis , engine , control , weapon ] ;
23521: LD_ADDR_VAR 0 6
23525: PUSH
23526: LD_VAR 0 2
23530: PUSH
23531: LD_VAR 0 3
23535: PUSH
23536: LD_VAR 0 4
23540: PUSH
23541: LD_VAR 0 5
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: ST_TO_ADDR
// end ;
23552: LD_VAR 0 6
23556: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23557: LD_INT 0
23559: PPUSH
// if not chassis or not engine then
23560: LD_VAR 0 1
23564: NOT
23565: IFTRUE 23574
23567: PUSH
23568: LD_VAR 0 2
23572: NOT
23573: OR
23574: IFFALSE 23578
// exit ;
23576: GO 23774
// case engine of engine_solar :
23578: LD_VAR 0 2
23582: PUSH
23583: LD_INT 2
23585: DOUBLE
23586: EQUAL
23587: IFTRUE 23591
23589: GO 23629
23591: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23592: LD_ADDR_VAR 0 3
23596: PUSH
23597: LD_INT 11
23599: PUSH
23600: LD_INT 12
23602: PUSH
23603: LD_INT 13
23605: PUSH
23606: LD_INT 14
23608: PUSH
23609: LD_INT 1
23611: PUSH
23612: LD_INT 2
23614: PUSH
23615: LD_INT 3
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: ST_TO_ADDR
23627: GO 23758
23629: LD_INT 1
23631: DOUBLE
23632: EQUAL
23633: IFTRUE 23637
23635: GO 23699
23637: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23638: LD_ADDR_VAR 0 3
23642: PUSH
23643: LD_INT 11
23645: PUSH
23646: LD_INT 12
23648: PUSH
23649: LD_INT 13
23651: PUSH
23652: LD_INT 14
23654: PUSH
23655: LD_INT 1
23657: PUSH
23658: LD_INT 2
23660: PUSH
23661: LD_INT 3
23663: PUSH
23664: LD_INT 4
23666: PUSH
23667: LD_INT 5
23669: PUSH
23670: LD_INT 21
23672: PUSH
23673: LD_INT 23
23675: PUSH
23676: LD_INT 22
23678: PUSH
23679: LD_INT 24
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: ST_TO_ADDR
23697: GO 23758
23699: LD_INT 3
23701: DOUBLE
23702: EQUAL
23703: IFTRUE 23707
23705: GO 23757
23707: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23708: LD_ADDR_VAR 0 3
23712: PUSH
23713: LD_INT 13
23715: PUSH
23716: LD_INT 14
23718: PUSH
23719: LD_INT 2
23721: PUSH
23722: LD_INT 3
23724: PUSH
23725: LD_INT 4
23727: PUSH
23728: LD_INT 5
23730: PUSH
23731: LD_INT 21
23733: PUSH
23734: LD_INT 22
23736: PUSH
23737: LD_INT 23
23739: PUSH
23740: LD_INT 24
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: ST_TO_ADDR
23755: GO 23758
23757: POP
// result := ( chassis in result ) ;
23758: LD_ADDR_VAR 0 3
23762: PUSH
23763: LD_VAR 0 1
23767: PUSH
23768: LD_VAR 0 3
23772: IN
23773: ST_TO_ADDR
// end ;
23774: LD_VAR 0 3
23778: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
23779: LD_INT 0
23781: PPUSH
// if not chassis or not weapon then
23782: LD_VAR 0 1
23786: NOT
23787: IFTRUE 23796
23789: PUSH
23790: LD_VAR 0 2
23794: NOT
23795: OR
23796: IFFALSE 23800
// exit ;
23798: GO 24894
// case weapon of us_machine_gun :
23800: LD_VAR 0 2
23804: PUSH
23805: LD_INT 2
23807: DOUBLE
23808: EQUAL
23809: IFTRUE 23813
23811: GO 23843
23813: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
23814: LD_ADDR_VAR 0 3
23818: PUSH
23819: LD_INT 1
23821: PUSH
23822: LD_INT 2
23824: PUSH
23825: LD_INT 3
23827: PUSH
23828: LD_INT 4
23830: PUSH
23831: LD_INT 5
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: ST_TO_ADDR
23841: GO 24878
23843: LD_INT 3
23845: DOUBLE
23846: EQUAL
23847: IFTRUE 23851
23849: GO 23881
23851: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
23852: LD_ADDR_VAR 0 3
23856: PUSH
23857: LD_INT 1
23859: PUSH
23860: LD_INT 2
23862: PUSH
23863: LD_INT 3
23865: PUSH
23866: LD_INT 4
23868: PUSH
23869: LD_INT 5
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: ST_TO_ADDR
23879: GO 24878
23881: LD_INT 11
23883: DOUBLE
23884: EQUAL
23885: IFTRUE 23889
23887: GO 23919
23889: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
23890: LD_ADDR_VAR 0 3
23894: PUSH
23895: LD_INT 1
23897: PUSH
23898: LD_INT 2
23900: PUSH
23901: LD_INT 3
23903: PUSH
23904: LD_INT 4
23906: PUSH
23907: LD_INT 5
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: ST_TO_ADDR
23917: GO 24878
23919: LD_INT 4
23921: DOUBLE
23922: EQUAL
23923: IFTRUE 23927
23925: GO 23953
23927: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
23928: LD_ADDR_VAR 0 3
23932: PUSH
23933: LD_INT 2
23935: PUSH
23936: LD_INT 3
23938: PUSH
23939: LD_INT 4
23941: PUSH
23942: LD_INT 5
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: ST_TO_ADDR
23951: GO 24878
23953: LD_INT 5
23955: DOUBLE
23956: EQUAL
23957: IFTRUE 23961
23959: GO 23987
23961: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
23962: LD_ADDR_VAR 0 3
23966: PUSH
23967: LD_INT 2
23969: PUSH
23970: LD_INT 3
23972: PUSH
23973: LD_INT 4
23975: PUSH
23976: LD_INT 5
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: ST_TO_ADDR
23985: GO 24878
23987: LD_INT 9
23989: DOUBLE
23990: EQUAL
23991: IFTRUE 23995
23993: GO 24021
23995: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
23996: LD_ADDR_VAR 0 3
24000: PUSH
24001: LD_INT 2
24003: PUSH
24004: LD_INT 3
24006: PUSH
24007: LD_INT 4
24009: PUSH
24010: LD_INT 5
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: ST_TO_ADDR
24019: GO 24878
24021: LD_INT 7
24023: DOUBLE
24024: EQUAL
24025: IFTRUE 24029
24027: GO 24055
24029: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24030: LD_ADDR_VAR 0 3
24034: PUSH
24035: LD_INT 2
24037: PUSH
24038: LD_INT 3
24040: PUSH
24041: LD_INT 4
24043: PUSH
24044: LD_INT 5
24046: PUSH
24047: EMPTY
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: ST_TO_ADDR
24053: GO 24878
24055: LD_INT 12
24057: DOUBLE
24058: EQUAL
24059: IFTRUE 24063
24061: GO 24089
24063: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24064: LD_ADDR_VAR 0 3
24068: PUSH
24069: LD_INT 2
24071: PUSH
24072: LD_INT 3
24074: PUSH
24075: LD_INT 4
24077: PUSH
24078: LD_INT 5
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: ST_TO_ADDR
24087: GO 24878
24089: LD_INT 13
24091: DOUBLE
24092: EQUAL
24093: IFTRUE 24097
24095: GO 24123
24097: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24098: LD_ADDR_VAR 0 3
24102: PUSH
24103: LD_INT 2
24105: PUSH
24106: LD_INT 3
24108: PUSH
24109: LD_INT 4
24111: PUSH
24112: LD_INT 5
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: ST_TO_ADDR
24121: GO 24878
24123: LD_INT 14
24125: DOUBLE
24126: EQUAL
24127: IFTRUE 24131
24129: GO 24149
24131: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24132: LD_ADDR_VAR 0 3
24136: PUSH
24137: LD_INT 4
24139: PUSH
24140: LD_INT 5
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: ST_TO_ADDR
24147: GO 24878
24149: LD_INT 6
24151: DOUBLE
24152: EQUAL
24153: IFTRUE 24157
24155: GO 24175
24157: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24158: LD_ADDR_VAR 0 3
24162: PUSH
24163: LD_INT 4
24165: PUSH
24166: LD_INT 5
24168: PUSH
24169: EMPTY
24170: LIST
24171: LIST
24172: ST_TO_ADDR
24173: GO 24878
24175: LD_INT 10
24177: DOUBLE
24178: EQUAL
24179: IFTRUE 24183
24181: GO 24201
24183: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24184: LD_ADDR_VAR 0 3
24188: PUSH
24189: LD_INT 4
24191: PUSH
24192: LD_INT 5
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: ST_TO_ADDR
24199: GO 24878
24201: LD_INT 22
24203: DOUBLE
24204: EQUAL
24205: IFTRUE 24209
24207: GO 24235
24209: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24210: LD_ADDR_VAR 0 3
24214: PUSH
24215: LD_INT 11
24217: PUSH
24218: LD_INT 12
24220: PUSH
24221: LD_INT 13
24223: PUSH
24224: LD_INT 14
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: ST_TO_ADDR
24233: GO 24878
24235: LD_INT 23
24237: DOUBLE
24238: EQUAL
24239: IFTRUE 24243
24241: GO 24269
24243: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24244: LD_ADDR_VAR 0 3
24248: PUSH
24249: LD_INT 11
24251: PUSH
24252: LD_INT 12
24254: PUSH
24255: LD_INT 13
24257: PUSH
24258: LD_INT 14
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: ST_TO_ADDR
24267: GO 24878
24269: LD_INT 24
24271: DOUBLE
24272: EQUAL
24273: IFTRUE 24277
24275: GO 24303
24277: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24278: LD_ADDR_VAR 0 3
24282: PUSH
24283: LD_INT 11
24285: PUSH
24286: LD_INT 12
24288: PUSH
24289: LD_INT 13
24291: PUSH
24292: LD_INT 14
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: ST_TO_ADDR
24301: GO 24878
24303: LD_INT 30
24305: DOUBLE
24306: EQUAL
24307: IFTRUE 24311
24309: GO 24337
24311: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24312: LD_ADDR_VAR 0 3
24316: PUSH
24317: LD_INT 11
24319: PUSH
24320: LD_INT 12
24322: PUSH
24323: LD_INT 13
24325: PUSH
24326: LD_INT 14
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: ST_TO_ADDR
24335: GO 24878
24337: LD_INT 25
24339: DOUBLE
24340: EQUAL
24341: IFTRUE 24345
24343: GO 24363
24345: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24346: LD_ADDR_VAR 0 3
24350: PUSH
24351: LD_INT 13
24353: PUSH
24354: LD_INT 14
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: ST_TO_ADDR
24361: GO 24878
24363: LD_INT 27
24365: DOUBLE
24366: EQUAL
24367: IFTRUE 24371
24369: GO 24389
24371: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
24372: LD_ADDR_VAR 0 3
24376: PUSH
24377: LD_INT 13
24379: PUSH
24380: LD_INT 14
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: ST_TO_ADDR
24387: GO 24878
24389: LD_INT 92
24391: DOUBLE
24392: EQUAL
24393: IFTRUE 24397
24395: GO 24423
24397: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24398: LD_ADDR_VAR 0 3
24402: PUSH
24403: LD_INT 11
24405: PUSH
24406: LD_INT 12
24408: PUSH
24409: LD_INT 13
24411: PUSH
24412: LD_INT 14
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: ST_TO_ADDR
24421: GO 24878
24423: LD_INT 28
24425: DOUBLE
24426: EQUAL
24427: IFTRUE 24431
24429: GO 24449
24431: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24432: LD_ADDR_VAR 0 3
24436: PUSH
24437: LD_INT 13
24439: PUSH
24440: LD_INT 14
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: ST_TO_ADDR
24447: GO 24878
24449: LD_INT 29
24451: DOUBLE
24452: EQUAL
24453: IFTRUE 24457
24455: GO 24475
24457: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24458: LD_ADDR_VAR 0 3
24462: PUSH
24463: LD_INT 13
24465: PUSH
24466: LD_INT 14
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: ST_TO_ADDR
24473: GO 24878
24475: LD_INT 31
24477: DOUBLE
24478: EQUAL
24479: IFTRUE 24483
24481: GO 24501
24483: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24484: LD_ADDR_VAR 0 3
24488: PUSH
24489: LD_INT 13
24491: PUSH
24492: LD_INT 14
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: ST_TO_ADDR
24499: GO 24878
24501: LD_INT 26
24503: DOUBLE
24504: EQUAL
24505: IFTRUE 24509
24507: GO 24527
24509: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24510: LD_ADDR_VAR 0 3
24514: PUSH
24515: LD_INT 13
24517: PUSH
24518: LD_INT 14
24520: PUSH
24521: EMPTY
24522: LIST
24523: LIST
24524: ST_TO_ADDR
24525: GO 24878
24527: LD_INT 42
24529: DOUBLE
24530: EQUAL
24531: IFTRUE 24535
24533: GO 24561
24535: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24536: LD_ADDR_VAR 0 3
24540: PUSH
24541: LD_INT 21
24543: PUSH
24544: LD_INT 22
24546: PUSH
24547: LD_INT 23
24549: PUSH
24550: LD_INT 24
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: ST_TO_ADDR
24559: GO 24878
24561: LD_INT 43
24563: DOUBLE
24564: EQUAL
24565: IFTRUE 24569
24567: GO 24595
24569: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24570: LD_ADDR_VAR 0 3
24574: PUSH
24575: LD_INT 21
24577: PUSH
24578: LD_INT 22
24580: PUSH
24581: LD_INT 23
24583: PUSH
24584: LD_INT 24
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: ST_TO_ADDR
24593: GO 24878
24595: LD_INT 44
24597: DOUBLE
24598: EQUAL
24599: IFTRUE 24603
24601: GO 24629
24603: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24604: LD_ADDR_VAR 0 3
24608: PUSH
24609: LD_INT 21
24611: PUSH
24612: LD_INT 22
24614: PUSH
24615: LD_INT 23
24617: PUSH
24618: LD_INT 24
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: ST_TO_ADDR
24627: GO 24878
24629: LD_INT 45
24631: DOUBLE
24632: EQUAL
24633: IFTRUE 24637
24635: GO 24663
24637: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24638: LD_ADDR_VAR 0 3
24642: PUSH
24643: LD_INT 21
24645: PUSH
24646: LD_INT 22
24648: PUSH
24649: LD_INT 23
24651: PUSH
24652: LD_INT 24
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: ST_TO_ADDR
24661: GO 24878
24663: LD_INT 49
24665: DOUBLE
24666: EQUAL
24667: IFTRUE 24671
24669: GO 24697
24671: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24672: LD_ADDR_VAR 0 3
24676: PUSH
24677: LD_INT 21
24679: PUSH
24680: LD_INT 22
24682: PUSH
24683: LD_INT 23
24685: PUSH
24686: LD_INT 24
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: ST_TO_ADDR
24695: GO 24878
24697: LD_INT 51
24699: DOUBLE
24700: EQUAL
24701: IFTRUE 24705
24703: GO 24731
24705: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24706: LD_ADDR_VAR 0 3
24710: PUSH
24711: LD_INT 21
24713: PUSH
24714: LD_INT 22
24716: PUSH
24717: LD_INT 23
24719: PUSH
24720: LD_INT 24
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: ST_TO_ADDR
24729: GO 24878
24731: LD_INT 52
24733: DOUBLE
24734: EQUAL
24735: IFTRUE 24739
24737: GO 24765
24739: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
24740: LD_ADDR_VAR 0 3
24744: PUSH
24745: LD_INT 21
24747: PUSH
24748: LD_INT 22
24750: PUSH
24751: LD_INT 23
24753: PUSH
24754: LD_INT 24
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: ST_TO_ADDR
24763: GO 24878
24765: LD_INT 53
24767: DOUBLE
24768: EQUAL
24769: IFTRUE 24773
24771: GO 24791
24773: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
24774: LD_ADDR_VAR 0 3
24778: PUSH
24779: LD_INT 23
24781: PUSH
24782: LD_INT 24
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: ST_TO_ADDR
24789: GO 24878
24791: LD_INT 46
24793: DOUBLE
24794: EQUAL
24795: IFTRUE 24799
24797: GO 24817
24799: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
24800: LD_ADDR_VAR 0 3
24804: PUSH
24805: LD_INT 23
24807: PUSH
24808: LD_INT 24
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: ST_TO_ADDR
24815: GO 24878
24817: LD_INT 47
24819: DOUBLE
24820: EQUAL
24821: IFTRUE 24825
24823: GO 24843
24825: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
24826: LD_ADDR_VAR 0 3
24830: PUSH
24831: LD_INT 23
24833: PUSH
24834: LD_INT 24
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: ST_TO_ADDR
24841: GO 24878
24843: LD_INT 98
24845: DOUBLE
24846: EQUAL
24847: IFTRUE 24851
24849: GO 24877
24851: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24852: LD_ADDR_VAR 0 3
24856: PUSH
24857: LD_INT 21
24859: PUSH
24860: LD_INT 22
24862: PUSH
24863: LD_INT 23
24865: PUSH
24866: LD_INT 24
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: ST_TO_ADDR
24875: GO 24878
24877: POP
// result := ( chassis in result ) ;
24878: LD_ADDR_VAR 0 3
24882: PUSH
24883: LD_VAR 0 1
24887: PUSH
24888: LD_VAR 0 3
24892: IN
24893: ST_TO_ADDR
// end ;
24894: LD_VAR 0 3
24898: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
24899: LD_INT 0
24901: PPUSH
24902: PPUSH
24903: PPUSH
24904: PPUSH
24905: PPUSH
24906: PPUSH
24907: PPUSH
// result := array ;
24908: LD_ADDR_VAR 0 5
24912: PUSH
24913: LD_VAR 0 1
24917: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
24918: LD_VAR 0 1
24922: NOT
24923: IFTRUE 24932
24925: PUSH
24926: LD_VAR 0 2
24930: NOT
24931: OR
24932: IFTRUE 24941
24934: PUSH
24935: LD_VAR 0 3
24939: NOT
24940: OR
24941: IFTRUE 24955
24943: PUSH
24944: LD_VAR 0 2
24948: PUSH
24949: LD_VAR 0 1
24953: GREATER
24954: OR
24955: IFTRUE 24969
24957: PUSH
24958: LD_VAR 0 3
24962: PUSH
24963: LD_VAR 0 1
24967: GREATER
24968: OR
24969: IFFALSE 24973
// exit ;
24971: GO 25269
// if direction then
24973: LD_VAR 0 4
24977: IFFALSE 25041
// begin d := 1 ;
24979: LD_ADDR_VAR 0 9
24983: PUSH
24984: LD_INT 1
24986: ST_TO_ADDR
// if i_from > i_to then
24987: LD_VAR 0 2
24991: PUSH
24992: LD_VAR 0 3
24996: GREATER
24997: IFFALSE 25023
// length := ( array - i_from ) + i_to else
24999: LD_ADDR_VAR 0 11
25003: PUSH
25004: LD_VAR 0 1
25008: PUSH
25009: LD_VAR 0 2
25013: MINUS
25014: PUSH
25015: LD_VAR 0 3
25019: PLUS
25020: ST_TO_ADDR
25021: GO 25039
// length := i_to - i_from ;
25023: LD_ADDR_VAR 0 11
25027: PUSH
25028: LD_VAR 0 3
25032: PUSH
25033: LD_VAR 0 2
25037: MINUS
25038: ST_TO_ADDR
// end else
25039: GO 25102
// begin d := - 1 ;
25041: LD_ADDR_VAR 0 9
25045: PUSH
25046: LD_INT 1
25048: NEG
25049: ST_TO_ADDR
// if i_from > i_to then
25050: LD_VAR 0 2
25054: PUSH
25055: LD_VAR 0 3
25059: GREATER
25060: IFFALSE 25080
// length := i_from - i_to else
25062: LD_ADDR_VAR 0 11
25066: PUSH
25067: LD_VAR 0 2
25071: PUSH
25072: LD_VAR 0 3
25076: MINUS
25077: ST_TO_ADDR
25078: GO 25102
// length := ( array - i_to ) + i_from ;
25080: LD_ADDR_VAR 0 11
25084: PUSH
25085: LD_VAR 0 1
25089: PUSH
25090: LD_VAR 0 3
25094: MINUS
25095: PUSH
25096: LD_VAR 0 2
25100: PLUS
25101: ST_TO_ADDR
// end ; if not length then
25102: LD_VAR 0 11
25106: NOT
25107: IFFALSE 25111
// exit ;
25109: GO 25269
// tmp := array ;
25111: LD_ADDR_VAR 0 10
25115: PUSH
25116: LD_VAR 0 1
25120: ST_TO_ADDR
// for i = 1 to length do
25121: LD_ADDR_VAR 0 6
25125: PUSH
25126: DOUBLE
25127: LD_INT 1
25129: DEC
25130: ST_TO_ADDR
25131: LD_VAR 0 11
25135: PUSH
25136: FOR_TO
25137: IFFALSE 25257
// begin for j = 1 to array do
25139: LD_ADDR_VAR 0 7
25143: PUSH
25144: DOUBLE
25145: LD_INT 1
25147: DEC
25148: ST_TO_ADDR
25149: LD_VAR 0 1
25153: PUSH
25154: FOR_TO
25155: IFFALSE 25243
// begin k := j + d ;
25157: LD_ADDR_VAR 0 8
25161: PUSH
25162: LD_VAR 0 7
25166: PUSH
25167: LD_VAR 0 9
25171: PLUS
25172: ST_TO_ADDR
// if k > array then
25173: LD_VAR 0 8
25177: PUSH
25178: LD_VAR 0 1
25182: GREATER
25183: IFFALSE 25193
// k := 1 ;
25185: LD_ADDR_VAR 0 8
25189: PUSH
25190: LD_INT 1
25192: ST_TO_ADDR
// if not k then
25193: LD_VAR 0 8
25197: NOT
25198: IFFALSE 25210
// k := array ;
25200: LD_ADDR_VAR 0 8
25204: PUSH
25205: LD_VAR 0 1
25209: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25210: LD_ADDR_VAR 0 10
25214: PUSH
25215: LD_VAR 0 10
25219: PPUSH
25220: LD_VAR 0 8
25224: PPUSH
25225: LD_VAR 0 1
25229: PUSH
25230: LD_VAR 0 7
25234: ARRAY
25235: PPUSH
25236: CALL_OW 1
25240: ST_TO_ADDR
// end ;
25241: GO 25154
25243: POP
25244: POP
// array := tmp ;
25245: LD_ADDR_VAR 0 1
25249: PUSH
25250: LD_VAR 0 10
25254: ST_TO_ADDR
// end ;
25255: GO 25136
25257: POP
25258: POP
// result := array ;
25259: LD_ADDR_VAR 0 5
25263: PUSH
25264: LD_VAR 0 1
25268: ST_TO_ADDR
// end ;
25269: LD_VAR 0 5
25273: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25274: LD_INT 0
25276: PPUSH
25277: PPUSH
// result := 0 ;
25278: LD_ADDR_VAR 0 3
25282: PUSH
25283: LD_INT 0
25285: ST_TO_ADDR
// if not array or not value in array then
25286: LD_VAR 0 1
25290: NOT
25291: IFTRUE 25306
25293: PUSH
25294: LD_VAR 0 2
25298: PUSH
25299: LD_VAR 0 1
25303: IN
25304: NOT
25305: OR
25306: IFFALSE 25310
// exit ;
25308: GO 25364
// for i = 1 to array do
25310: LD_ADDR_VAR 0 4
25314: PUSH
25315: DOUBLE
25316: LD_INT 1
25318: DEC
25319: ST_TO_ADDR
25320: LD_VAR 0 1
25324: PUSH
25325: FOR_TO
25326: IFFALSE 25362
// if value = array [ i ] then
25328: LD_VAR 0 2
25332: PUSH
25333: LD_VAR 0 1
25337: PUSH
25338: LD_VAR 0 4
25342: ARRAY
25343: EQUAL
25344: IFFALSE 25360
// begin result := i ;
25346: LD_ADDR_VAR 0 3
25350: PUSH
25351: LD_VAR 0 4
25355: ST_TO_ADDR
// exit ;
25356: POP
25357: POP
25358: GO 25364
// end ;
25360: GO 25325
25362: POP
25363: POP
// end ;
25364: LD_VAR 0 3
25368: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25369: LD_INT 0
25371: PPUSH
// vc_chassis := chassis ;
25372: LD_ADDR_OWVAR 37
25376: PUSH
25377: LD_VAR 0 1
25381: ST_TO_ADDR
// vc_engine := engine ;
25382: LD_ADDR_OWVAR 39
25386: PUSH
25387: LD_VAR 0 2
25391: ST_TO_ADDR
// vc_control := control ;
25392: LD_ADDR_OWVAR 38
25396: PUSH
25397: LD_VAR 0 3
25401: ST_TO_ADDR
// vc_weapon := weapon ;
25402: LD_ADDR_OWVAR 40
25406: PUSH
25407: LD_VAR 0 4
25411: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25412: LD_ADDR_OWVAR 41
25416: PUSH
25417: LD_VAR 0 5
25421: ST_TO_ADDR
// end ;
25422: LD_VAR 0 6
25426: RET
// export function WantPlant ( unit ) ; var task ; begin
25427: LD_INT 0
25429: PPUSH
25430: PPUSH
// result := false ;
25431: LD_ADDR_VAR 0 2
25435: PUSH
25436: LD_INT 0
25438: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25439: LD_ADDR_VAR 0 3
25443: PUSH
25444: LD_VAR 0 1
25448: PPUSH
25449: CALL_OW 437
25453: ST_TO_ADDR
// if task then
25454: LD_VAR 0 3
25458: IFFALSE 25486
// if task [ 1 ] [ 1 ] = p then
25460: LD_VAR 0 3
25464: PUSH
25465: LD_INT 1
25467: ARRAY
25468: PUSH
25469: LD_INT 1
25471: ARRAY
25472: PUSH
25473: LD_STRING p
25475: EQUAL
25476: IFFALSE 25486
// result := true ;
25478: LD_ADDR_VAR 0 2
25482: PUSH
25483: LD_INT 1
25485: ST_TO_ADDR
// end ;
25486: LD_VAR 0 2
25490: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25491: LD_INT 0
25493: PPUSH
25494: PPUSH
25495: PPUSH
25496: PPUSH
// if pos < 1 then
25497: LD_VAR 0 2
25501: PUSH
25502: LD_INT 1
25504: LESS
25505: IFFALSE 25509
// exit ;
25507: GO 25812
// if pos = 1 then
25509: LD_VAR 0 2
25513: PUSH
25514: LD_INT 1
25516: EQUAL
25517: IFFALSE 25550
// result := Replace ( arr , pos [ 1 ] , value ) else
25519: LD_ADDR_VAR 0 4
25523: PUSH
25524: LD_VAR 0 1
25528: PPUSH
25529: LD_VAR 0 2
25533: PUSH
25534: LD_INT 1
25536: ARRAY
25537: PPUSH
25538: LD_VAR 0 3
25542: PPUSH
25543: CALL_OW 1
25547: ST_TO_ADDR
25548: GO 25812
// begin tmp := arr ;
25550: LD_ADDR_VAR 0 6
25554: PUSH
25555: LD_VAR 0 1
25559: ST_TO_ADDR
// s_arr := [ tmp ] ;
25560: LD_ADDR_VAR 0 7
25564: PUSH
25565: LD_VAR 0 6
25569: PUSH
25570: EMPTY
25571: LIST
25572: ST_TO_ADDR
// for i = 1 to pos - 1 do
25573: LD_ADDR_VAR 0 5
25577: PUSH
25578: DOUBLE
25579: LD_INT 1
25581: DEC
25582: ST_TO_ADDR
25583: LD_VAR 0 2
25587: PUSH
25588: LD_INT 1
25590: MINUS
25591: PUSH
25592: FOR_TO
25593: IFFALSE 25638
// begin tmp := tmp [ pos [ i ] ] ;
25595: LD_ADDR_VAR 0 6
25599: PUSH
25600: LD_VAR 0 6
25604: PUSH
25605: LD_VAR 0 2
25609: PUSH
25610: LD_VAR 0 5
25614: ARRAY
25615: ARRAY
25616: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25617: LD_ADDR_VAR 0 7
25621: PUSH
25622: LD_VAR 0 7
25626: PUSH
25627: LD_VAR 0 6
25631: PUSH
25632: EMPTY
25633: LIST
25634: ADD
25635: ST_TO_ADDR
// end ;
25636: GO 25592
25638: POP
25639: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25640: LD_ADDR_VAR 0 6
25644: PUSH
25645: LD_VAR 0 6
25649: PPUSH
25650: LD_VAR 0 2
25654: PUSH
25655: LD_VAR 0 2
25659: ARRAY
25660: PPUSH
25661: LD_VAR 0 3
25665: PPUSH
25666: CALL_OW 1
25670: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25671: LD_ADDR_VAR 0 7
25675: PUSH
25676: LD_VAR 0 7
25680: PPUSH
25681: LD_VAR 0 7
25685: PPUSH
25686: LD_VAR 0 6
25690: PPUSH
25691: CALL_OW 1
25695: ST_TO_ADDR
// for i = s_arr downto 2 do
25696: LD_ADDR_VAR 0 5
25700: PUSH
25701: DOUBLE
25702: LD_VAR 0 7
25706: INC
25707: ST_TO_ADDR
25708: LD_INT 2
25710: PUSH
25711: FOR_DOWNTO
25712: IFFALSE 25796
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25714: LD_ADDR_VAR 0 6
25718: PUSH
25719: LD_VAR 0 7
25723: PUSH
25724: LD_VAR 0 5
25728: PUSH
25729: LD_INT 1
25731: MINUS
25732: ARRAY
25733: PPUSH
25734: LD_VAR 0 2
25738: PUSH
25739: LD_VAR 0 5
25743: PUSH
25744: LD_INT 1
25746: MINUS
25747: ARRAY
25748: PPUSH
25749: LD_VAR 0 7
25753: PUSH
25754: LD_VAR 0 5
25758: ARRAY
25759: PPUSH
25760: CALL_OW 1
25764: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25765: LD_ADDR_VAR 0 7
25769: PUSH
25770: LD_VAR 0 7
25774: PPUSH
25775: LD_VAR 0 5
25779: PUSH
25780: LD_INT 1
25782: MINUS
25783: PPUSH
25784: LD_VAR 0 6
25788: PPUSH
25789: CALL_OW 1
25793: ST_TO_ADDR
// end ;
25794: GO 25711
25796: POP
25797: POP
// result := s_arr [ 1 ] ;
25798: LD_ADDR_VAR 0 4
25802: PUSH
25803: LD_VAR 0 7
25807: PUSH
25808: LD_INT 1
25810: ARRAY
25811: ST_TO_ADDR
// end ; end ;
25812: LD_VAR 0 4
25816: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
25817: LD_INT 0
25819: PPUSH
25820: PPUSH
// if not list then
25821: LD_VAR 0 1
25825: NOT
25826: IFFALSE 25830
// exit ;
25828: GO 25921
// i := list [ pos1 ] ;
25830: LD_ADDR_VAR 0 5
25834: PUSH
25835: LD_VAR 0 1
25839: PUSH
25840: LD_VAR 0 2
25844: ARRAY
25845: ST_TO_ADDR
// if not i then
25846: LD_VAR 0 5
25850: NOT
25851: IFFALSE 25855
// exit ;
25853: GO 25921
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
25855: LD_ADDR_VAR 0 1
25859: PUSH
25860: LD_VAR 0 1
25864: PPUSH
25865: LD_VAR 0 2
25869: PPUSH
25870: LD_VAR 0 1
25874: PUSH
25875: LD_VAR 0 3
25879: ARRAY
25880: PPUSH
25881: CALL_OW 1
25885: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
25886: LD_ADDR_VAR 0 1
25890: PUSH
25891: LD_VAR 0 1
25895: PPUSH
25896: LD_VAR 0 3
25900: PPUSH
25901: LD_VAR 0 5
25905: PPUSH
25906: CALL_OW 1
25910: ST_TO_ADDR
// result := list ;
25911: LD_ADDR_VAR 0 4
25915: PUSH
25916: LD_VAR 0 1
25920: ST_TO_ADDR
// end ;
25921: LD_VAR 0 4
25925: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
25926: LD_INT 0
25928: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
25929: LD_ADDR_VAR 0 5
25933: PUSH
25934: LD_VAR 0 1
25938: PPUSH
25939: CALL_OW 250
25943: PPUSH
25944: LD_VAR 0 1
25948: PPUSH
25949: CALL_OW 251
25953: PPUSH
25954: LD_VAR 0 2
25958: PPUSH
25959: LD_VAR 0 3
25963: PPUSH
25964: LD_VAR 0 4
25968: PPUSH
25969: CALL 26351 0 5
25973: ST_TO_ADDR
// end ;
25974: LD_VAR 0 5
25978: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
25979: LD_INT 0
25981: PPUSH
25982: PPUSH
25983: PPUSH
25984: PPUSH
// if not list or not unit then
25985: LD_VAR 0 2
25989: NOT
25990: IFTRUE 25999
25992: PUSH
25993: LD_VAR 0 1
25997: NOT
25998: OR
25999: IFFALSE 26003
// exit ;
26001: GO 26346
// result := [ ] ;
26003: LD_ADDR_VAR 0 5
26007: PUSH
26008: EMPTY
26009: ST_TO_ADDR
// for i in list do
26010: LD_ADDR_VAR 0 6
26014: PUSH
26015: LD_VAR 0 2
26019: PUSH
26020: FOR_IN
26021: IFFALSE 26239
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
26023: LD_ADDR_VAR 0 8
26027: PUSH
26028: LD_VAR 0 1
26032: PPUSH
26033: LD_VAR 0 6
26037: PUSH
26038: LD_INT 1
26040: ARRAY
26041: PPUSH
26042: LD_VAR 0 6
26046: PUSH
26047: LD_INT 2
26049: ARRAY
26050: PPUSH
26051: CALL_OW 297
26055: ST_TO_ADDR
// if not Count ( result ) then
26056: LD_VAR 0 5
26060: PPUSH
26061: CALL 22573 0 1
26065: NOT
26066: IFFALSE 26099
// begin result := Join ( result , [ i , tmp ] ) ;
26068: LD_ADDR_VAR 0 5
26072: PUSH
26073: LD_VAR 0 5
26077: PPUSH
26078: LD_VAR 0 6
26082: PUSH
26083: LD_VAR 0 8
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PPUSH
26092: CALL 58549 0 2
26096: ST_TO_ADDR
// continue ;
26097: GO 26020
// end ; if result [ result ] [ 2 ] <= tmp then
26099: LD_VAR 0 5
26103: PUSH
26104: LD_VAR 0 5
26108: ARRAY
26109: PUSH
26110: LD_INT 2
26112: ARRAY
26113: PUSH
26114: LD_VAR 0 8
26118: LESSEQUAL
26119: IFFALSE 26152
// result := Join ( result , [ i , tmp ] ) else
26121: LD_ADDR_VAR 0 5
26125: PUSH
26126: LD_VAR 0 5
26130: PPUSH
26131: LD_VAR 0 6
26135: PUSH
26136: LD_VAR 0 8
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: PPUSH
26145: CALL 58549 0 2
26149: ST_TO_ADDR
26150: GO 26237
// begin for j := 1 to Count ( result ) do
26152: LD_ADDR_VAR 0 7
26156: PUSH
26157: DOUBLE
26158: LD_INT 1
26160: DEC
26161: ST_TO_ADDR
26162: LD_VAR 0 5
26166: PPUSH
26167: CALL 22573 0 1
26171: PUSH
26172: FOR_TO
26173: IFFALSE 26235
// begin if tmp < result [ j ] [ 2 ] then
26175: LD_VAR 0 8
26179: PUSH
26180: LD_VAR 0 5
26184: PUSH
26185: LD_VAR 0 7
26189: ARRAY
26190: PUSH
26191: LD_INT 2
26193: ARRAY
26194: LESS
26195: IFFALSE 26233
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26197: LD_ADDR_VAR 0 5
26201: PUSH
26202: LD_VAR 0 5
26206: PPUSH
26207: LD_VAR 0 7
26211: PPUSH
26212: LD_VAR 0 6
26216: PUSH
26217: LD_VAR 0 8
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PPUSH
26226: CALL_OW 2
26230: ST_TO_ADDR
// break ;
26231: GO 26235
// end ; end ;
26233: GO 26172
26235: POP
26236: POP
// end ; end ;
26237: GO 26020
26239: POP
26240: POP
// if result and not asc then
26241: LD_VAR 0 5
26245: IFFALSE 26254
26247: PUSH
26248: LD_VAR 0 3
26252: NOT
26253: AND
26254: IFFALSE 26271
// result := ReverseArray ( result ) ;
26256: LD_ADDR_VAR 0 5
26260: PUSH
26261: LD_VAR 0 5
26265: PPUSH
26266: CALL 53629 0 1
26270: ST_TO_ADDR
// tmp := [ ] ;
26271: LD_ADDR_VAR 0 8
26275: PUSH
26276: EMPTY
26277: ST_TO_ADDR
// if mode then
26278: LD_VAR 0 4
26282: IFFALSE 26346
// begin for i := 1 to result do
26284: LD_ADDR_VAR 0 6
26288: PUSH
26289: DOUBLE
26290: LD_INT 1
26292: DEC
26293: ST_TO_ADDR
26294: LD_VAR 0 5
26298: PUSH
26299: FOR_TO
26300: IFFALSE 26334
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
26302: LD_ADDR_VAR 0 8
26306: PUSH
26307: LD_VAR 0 8
26311: PPUSH
26312: LD_VAR 0 5
26316: PUSH
26317: LD_VAR 0 6
26321: ARRAY
26322: PUSH
26323: LD_INT 1
26325: ARRAY
26326: PPUSH
26327: CALL 58549 0 2
26331: ST_TO_ADDR
26332: GO 26299
26334: POP
26335: POP
// result := tmp ;
26336: LD_ADDR_VAR 0 5
26340: PUSH
26341: LD_VAR 0 8
26345: ST_TO_ADDR
// end ; end ;
26346: LD_VAR 0 5
26350: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26351: LD_INT 0
26353: PPUSH
26354: PPUSH
26355: PPUSH
26356: PPUSH
// if not list then
26357: LD_VAR 0 3
26361: NOT
26362: IFFALSE 26366
// exit ;
26364: GO 26756
// result := [ ] ;
26366: LD_ADDR_VAR 0 6
26370: PUSH
26371: EMPTY
26372: ST_TO_ADDR
// for i in list do
26373: LD_ADDR_VAR 0 7
26377: PUSH
26378: LD_VAR 0 3
26382: PUSH
26383: FOR_IN
26384: IFFALSE 26586
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26386: LD_ADDR_VAR 0 9
26390: PUSH
26391: LD_VAR 0 7
26395: PPUSH
26396: LD_VAR 0 1
26400: PPUSH
26401: LD_VAR 0 2
26405: PPUSH
26406: CALL_OW 297
26410: ST_TO_ADDR
// if not result then
26411: LD_VAR 0 6
26415: NOT
26416: IFFALSE 26442
// result := [ [ i , tmp ] ] else
26418: LD_ADDR_VAR 0 6
26422: PUSH
26423: LD_VAR 0 7
26427: PUSH
26428: LD_VAR 0 9
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: EMPTY
26438: LIST
26439: ST_TO_ADDR
26440: GO 26584
// begin if result [ result ] [ 2 ] <= tmp then
26442: LD_VAR 0 6
26446: PUSH
26447: LD_VAR 0 6
26451: ARRAY
26452: PUSH
26453: LD_INT 2
26455: ARRAY
26456: PUSH
26457: LD_VAR 0 9
26461: LESSEQUAL
26462: IFFALSE 26504
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26464: LD_ADDR_VAR 0 6
26468: PUSH
26469: LD_VAR 0 6
26473: PPUSH
26474: LD_VAR 0 6
26478: PUSH
26479: LD_INT 1
26481: PLUS
26482: PPUSH
26483: LD_VAR 0 7
26487: PUSH
26488: LD_VAR 0 9
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PPUSH
26497: CALL_OW 2
26501: ST_TO_ADDR
26502: GO 26584
// for j := 1 to result do
26504: LD_ADDR_VAR 0 8
26508: PUSH
26509: DOUBLE
26510: LD_INT 1
26512: DEC
26513: ST_TO_ADDR
26514: LD_VAR 0 6
26518: PUSH
26519: FOR_TO
26520: IFFALSE 26582
// begin if tmp < result [ j ] [ 2 ] then
26522: LD_VAR 0 9
26526: PUSH
26527: LD_VAR 0 6
26531: PUSH
26532: LD_VAR 0 8
26536: ARRAY
26537: PUSH
26538: LD_INT 2
26540: ARRAY
26541: LESS
26542: IFFALSE 26580
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26544: LD_ADDR_VAR 0 6
26548: PUSH
26549: LD_VAR 0 6
26553: PPUSH
26554: LD_VAR 0 8
26558: PPUSH
26559: LD_VAR 0 7
26563: PUSH
26564: LD_VAR 0 9
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PPUSH
26573: CALL_OW 2
26577: ST_TO_ADDR
// break ;
26578: GO 26582
// end ; end ;
26580: GO 26519
26582: POP
26583: POP
// end ; end ;
26584: GO 26383
26586: POP
26587: POP
// if result and not asc then
26588: LD_VAR 0 6
26592: IFFALSE 26601
26594: PUSH
26595: LD_VAR 0 4
26599: NOT
26600: AND
26601: IFFALSE 26676
// begin tmp := result ;
26603: LD_ADDR_VAR 0 9
26607: PUSH
26608: LD_VAR 0 6
26612: ST_TO_ADDR
// for i = tmp downto 1 do
26613: LD_ADDR_VAR 0 7
26617: PUSH
26618: DOUBLE
26619: LD_VAR 0 9
26623: INC
26624: ST_TO_ADDR
26625: LD_INT 1
26627: PUSH
26628: FOR_DOWNTO
26629: IFFALSE 26674
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26631: LD_ADDR_VAR 0 6
26635: PUSH
26636: LD_VAR 0 6
26640: PPUSH
26641: LD_VAR 0 9
26645: PUSH
26646: LD_VAR 0 7
26650: MINUS
26651: PUSH
26652: LD_INT 1
26654: PLUS
26655: PPUSH
26656: LD_VAR 0 9
26660: PUSH
26661: LD_VAR 0 7
26665: ARRAY
26666: PPUSH
26667: CALL_OW 1
26671: ST_TO_ADDR
26672: GO 26628
26674: POP
26675: POP
// end ; tmp := [ ] ;
26676: LD_ADDR_VAR 0 9
26680: PUSH
26681: EMPTY
26682: ST_TO_ADDR
// if mode then
26683: LD_VAR 0 5
26687: IFFALSE 26756
// begin for i = 1 to result do
26689: LD_ADDR_VAR 0 7
26693: PUSH
26694: DOUBLE
26695: LD_INT 1
26697: DEC
26698: ST_TO_ADDR
26699: LD_VAR 0 6
26703: PUSH
26704: FOR_TO
26705: IFFALSE 26744
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26707: LD_ADDR_VAR 0 9
26711: PUSH
26712: LD_VAR 0 9
26716: PPUSH
26717: LD_VAR 0 7
26721: PPUSH
26722: LD_VAR 0 6
26726: PUSH
26727: LD_VAR 0 7
26731: ARRAY
26732: PUSH
26733: LD_INT 1
26735: ARRAY
26736: PPUSH
26737: CALL_OW 1
26741: ST_TO_ADDR
26742: GO 26704
26744: POP
26745: POP
// result := tmp ;
26746: LD_ADDR_VAR 0 6
26750: PUSH
26751: LD_VAR 0 9
26755: ST_TO_ADDR
// end ; end ;
26756: LD_VAR 0 6
26760: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26761: LD_INT 0
26763: PPUSH
26764: PPUSH
26765: PPUSH
26766: PPUSH
26767: PPUSH
26768: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26769: LD_ADDR_VAR 0 5
26773: PUSH
26774: LD_INT 0
26776: PUSH
26777: LD_INT 0
26779: PUSH
26780: LD_INT 0
26782: PUSH
26783: EMPTY
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: ST_TO_ADDR
// if not x or not y then
26791: LD_VAR 0 2
26795: NOT
26796: IFTRUE 26805
26798: PUSH
26799: LD_VAR 0 3
26803: NOT
26804: OR
26805: IFFALSE 26809
// exit ;
26807: GO 28465
// if not range then
26809: LD_VAR 0 4
26813: NOT
26814: IFFALSE 26824
// range := 10 ;
26816: LD_ADDR_VAR 0 4
26820: PUSH
26821: LD_INT 10
26823: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26824: LD_ADDR_VAR 0 8
26828: PUSH
26829: LD_INT 81
26831: PUSH
26832: LD_VAR 0 1
26836: PUSH
26837: EMPTY
26838: LIST
26839: LIST
26840: PUSH
26841: LD_INT 92
26843: PUSH
26844: LD_VAR 0 2
26848: PUSH
26849: LD_VAR 0 3
26853: PUSH
26854: LD_VAR 0 4
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 3
26867: PUSH
26868: LD_INT 21
26870: PUSH
26871: LD_INT 3
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: LIST
26886: PPUSH
26887: CALL_OW 69
26891: ST_TO_ADDR
// if not tmp then
26892: LD_VAR 0 8
26896: NOT
26897: IFFALSE 26901
// exit ;
26899: GO 28465
// for i in tmp do
26901: LD_ADDR_VAR 0 6
26905: PUSH
26906: LD_VAR 0 8
26910: PUSH
26911: FOR_IN
26912: IFFALSE 28440
// begin points := [ 0 , 0 , 0 ] ;
26914: LD_ADDR_VAR 0 9
26918: PUSH
26919: LD_INT 0
26921: PUSH
26922: LD_INT 0
26924: PUSH
26925: LD_INT 0
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: LIST
26932: ST_TO_ADDR
// bpoints := 1 ;
26933: LD_ADDR_VAR 0 10
26937: PUSH
26938: LD_INT 1
26940: ST_TO_ADDR
// case GetType ( i ) of unit_human :
26941: LD_VAR 0 6
26945: PPUSH
26946: CALL_OW 247
26950: PUSH
26951: LD_INT 1
26953: DOUBLE
26954: EQUAL
26955: IFTRUE 26959
26957: GO 27541
26959: POP
// begin if GetClass ( i ) = 1 then
26960: LD_VAR 0 6
26964: PPUSH
26965: CALL_OW 257
26969: PUSH
26970: LD_INT 1
26972: EQUAL
26973: IFFALSE 26994
// points := [ 10 , 5 , 3 ] ;
26975: LD_ADDR_VAR 0 9
26979: PUSH
26980: LD_INT 10
26982: PUSH
26983: LD_INT 5
26985: PUSH
26986: LD_INT 3
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: LIST
26993: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
26994: LD_VAR 0 6
26998: PPUSH
26999: CALL_OW 257
27003: PUSH
27004: LD_INT 2
27006: PUSH
27007: LD_INT 3
27009: PUSH
27010: LD_INT 4
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: LIST
27017: IN
27018: IFFALSE 27039
// points := [ 3 , 2 , 1 ] ;
27020: LD_ADDR_VAR 0 9
27024: PUSH
27025: LD_INT 3
27027: PUSH
27028: LD_INT 2
27030: PUSH
27031: LD_INT 1
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: LIST
27038: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27039: LD_VAR 0 6
27043: PPUSH
27044: CALL_OW 257
27048: PUSH
27049: LD_INT 5
27051: EQUAL
27052: IFFALSE 27073
// points := [ 130 , 5 , 2 ] ;
27054: LD_ADDR_VAR 0 9
27058: PUSH
27059: LD_INT 130
27061: PUSH
27062: LD_INT 5
27064: PUSH
27065: LD_INT 2
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: LIST
27072: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27073: LD_VAR 0 6
27077: PPUSH
27078: CALL_OW 257
27082: PUSH
27083: LD_INT 8
27085: EQUAL
27086: IFFALSE 27107
// points := [ 35 , 35 , 30 ] ;
27088: LD_ADDR_VAR 0 9
27092: PUSH
27093: LD_INT 35
27095: PUSH
27096: LD_INT 35
27098: PUSH
27099: LD_INT 30
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: LIST
27106: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27107: LD_VAR 0 6
27111: PPUSH
27112: CALL_OW 257
27116: PUSH
27117: LD_INT 9
27119: EQUAL
27120: IFFALSE 27141
// points := [ 20 , 55 , 40 ] ;
27122: LD_ADDR_VAR 0 9
27126: PUSH
27127: LD_INT 20
27129: PUSH
27130: LD_INT 55
27132: PUSH
27133: LD_INT 40
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: LIST
27140: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27141: LD_VAR 0 6
27145: PPUSH
27146: CALL_OW 257
27150: PUSH
27151: LD_INT 12
27153: PUSH
27154: LD_INT 16
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: IN
27161: IFFALSE 27182
// points := [ 5 , 3 , 2 ] ;
27163: LD_ADDR_VAR 0 9
27167: PUSH
27168: LD_INT 5
27170: PUSH
27171: LD_INT 3
27173: PUSH
27174: LD_INT 2
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: LIST
27181: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27182: LD_VAR 0 6
27186: PPUSH
27187: CALL_OW 257
27191: PUSH
27192: LD_INT 17
27194: EQUAL
27195: IFFALSE 27216
// points := [ 100 , 50 , 75 ] ;
27197: LD_ADDR_VAR 0 9
27201: PUSH
27202: LD_INT 100
27204: PUSH
27205: LD_INT 50
27207: PUSH
27208: LD_INT 75
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: LIST
27215: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27216: LD_VAR 0 6
27220: PPUSH
27221: CALL_OW 257
27225: PUSH
27226: LD_INT 15
27228: EQUAL
27229: IFFALSE 27250
// points := [ 10 , 5 , 3 ] ;
27231: LD_ADDR_VAR 0 9
27235: PUSH
27236: LD_INT 10
27238: PUSH
27239: LD_INT 5
27241: PUSH
27242: LD_INT 3
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: LIST
27249: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27250: LD_VAR 0 6
27254: PPUSH
27255: CALL_OW 257
27259: PUSH
27260: LD_INT 14
27262: EQUAL
27263: IFFALSE 27284
// points := [ 10 , 0 , 0 ] ;
27265: LD_ADDR_VAR 0 9
27269: PUSH
27270: LD_INT 10
27272: PUSH
27273: LD_INT 0
27275: PUSH
27276: LD_INT 0
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: LIST
27283: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27284: LD_VAR 0 6
27288: PPUSH
27289: CALL_OW 257
27293: PUSH
27294: LD_INT 11
27296: EQUAL
27297: IFFALSE 27318
// points := [ 30 , 10 , 5 ] ;
27299: LD_ADDR_VAR 0 9
27303: PUSH
27304: LD_INT 30
27306: PUSH
27307: LD_INT 10
27309: PUSH
27310: LD_INT 5
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: LIST
27317: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27318: LD_VAR 0 1
27322: PPUSH
27323: LD_INT 5
27325: PPUSH
27326: CALL_OW 321
27330: PUSH
27331: LD_INT 2
27333: EQUAL
27334: IFFALSE 27351
// bpoints := bpoints * 1.8 ;
27336: LD_ADDR_VAR 0 10
27340: PUSH
27341: LD_VAR 0 10
27345: PUSH
27346: LD_REAL  1.80000000000000E+0000
27349: MUL
27350: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27351: LD_VAR 0 6
27355: PPUSH
27356: CALL_OW 257
27360: PUSH
27361: LD_INT 1
27363: PUSH
27364: LD_INT 2
27366: PUSH
27367: LD_INT 3
27369: PUSH
27370: LD_INT 4
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: IN
27379: IFFALSE 27399
27381: PUSH
27382: LD_VAR 0 1
27386: PPUSH
27387: LD_INT 51
27389: PPUSH
27390: CALL_OW 321
27394: PUSH
27395: LD_INT 2
27397: EQUAL
27398: AND
27399: IFFALSE 27416
// bpoints := bpoints * 1.2 ;
27401: LD_ADDR_VAR 0 10
27405: PUSH
27406: LD_VAR 0 10
27410: PUSH
27411: LD_REAL  1.20000000000000E+0000
27414: MUL
27415: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27416: LD_VAR 0 6
27420: PPUSH
27421: CALL_OW 257
27425: PUSH
27426: LD_INT 5
27428: PUSH
27429: LD_INT 7
27431: PUSH
27432: LD_INT 9
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: LIST
27439: IN
27440: IFFALSE 27460
27442: PUSH
27443: LD_VAR 0 1
27447: PPUSH
27448: LD_INT 52
27450: PPUSH
27451: CALL_OW 321
27455: PUSH
27456: LD_INT 2
27458: EQUAL
27459: AND
27460: IFFALSE 27477
// bpoints := bpoints * 1.5 ;
27462: LD_ADDR_VAR 0 10
27466: PUSH
27467: LD_VAR 0 10
27471: PUSH
27472: LD_REAL  1.50000000000000E+0000
27475: MUL
27476: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27477: LD_VAR 0 1
27481: PPUSH
27482: LD_INT 66
27484: PPUSH
27485: CALL_OW 321
27489: PUSH
27490: LD_INT 2
27492: EQUAL
27493: IFFALSE 27510
// bpoints := bpoints * 1.1 ;
27495: LD_ADDR_VAR 0 10
27499: PUSH
27500: LD_VAR 0 10
27504: PUSH
27505: LD_REAL  1.10000000000000E+0000
27508: MUL
27509: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27510: LD_ADDR_VAR 0 10
27514: PUSH
27515: LD_VAR 0 10
27519: PUSH
27520: LD_VAR 0 6
27524: PPUSH
27525: LD_INT 1
27527: PPUSH
27528: CALL_OW 259
27532: PUSH
27533: LD_REAL  1.15000000000000E+0000
27536: MUL
27537: MUL
27538: ST_TO_ADDR
// end ; unit_vehicle :
27539: GO 28369
27541: LD_INT 2
27543: DOUBLE
27544: EQUAL
27545: IFTRUE 27549
27547: GO 28357
27549: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27550: LD_VAR 0 6
27554: PPUSH
27555: CALL_OW 264
27559: PUSH
27560: LD_INT 2
27562: PUSH
27563: LD_INT 42
27565: PUSH
27566: LD_INT 24
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: LIST
27573: IN
27574: IFFALSE 27595
// points := [ 25 , 5 , 3 ] ;
27576: LD_ADDR_VAR 0 9
27580: PUSH
27581: LD_INT 25
27583: PUSH
27584: LD_INT 5
27586: PUSH
27587: LD_INT 3
27589: PUSH
27590: EMPTY
27591: LIST
27592: LIST
27593: LIST
27594: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27595: LD_VAR 0 6
27599: PPUSH
27600: CALL_OW 264
27604: PUSH
27605: LD_INT 4
27607: PUSH
27608: LD_INT 43
27610: PUSH
27611: LD_INT 25
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: LIST
27618: IN
27619: IFFALSE 27640
// points := [ 40 , 15 , 5 ] ;
27621: LD_ADDR_VAR 0 9
27625: PUSH
27626: LD_INT 40
27628: PUSH
27629: LD_INT 15
27631: PUSH
27632: LD_INT 5
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: LIST
27639: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27640: LD_VAR 0 6
27644: PPUSH
27645: CALL_OW 264
27649: PUSH
27650: LD_INT 3
27652: PUSH
27653: LD_INT 23
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: IN
27660: IFFALSE 27681
// points := [ 7 , 25 , 8 ] ;
27662: LD_ADDR_VAR 0 9
27666: PUSH
27667: LD_INT 7
27669: PUSH
27670: LD_INT 25
27672: PUSH
27673: LD_INT 8
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: LIST
27680: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27681: LD_VAR 0 6
27685: PPUSH
27686: CALL_OW 264
27690: PUSH
27691: LD_INT 5
27693: PUSH
27694: LD_INT 27
27696: PUSH
27697: LD_INT 44
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: LIST
27704: IN
27705: IFFALSE 27726
// points := [ 14 , 50 , 16 ] ;
27707: LD_ADDR_VAR 0 9
27711: PUSH
27712: LD_INT 14
27714: PUSH
27715: LD_INT 50
27717: PUSH
27718: LD_INT 16
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: LIST
27725: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27726: LD_VAR 0 6
27730: PPUSH
27731: CALL_OW 264
27735: PUSH
27736: LD_INT 6
27738: PUSH
27739: LD_INT 46
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: IN
27746: IFFALSE 27767
// points := [ 32 , 120 , 70 ] ;
27748: LD_ADDR_VAR 0 9
27752: PUSH
27753: LD_INT 32
27755: PUSH
27756: LD_INT 120
27758: PUSH
27759: LD_INT 70
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: LIST
27766: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
27767: LD_VAR 0 6
27771: PPUSH
27772: CALL_OW 264
27776: PUSH
27777: LD_INT 7
27779: PUSH
27780: LD_INT 28
27782: PUSH
27783: LD_INT 45
27785: PUSH
27786: LD_INT 92
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: IN
27795: IFFALSE 27816
// points := [ 35 , 20 , 45 ] ;
27797: LD_ADDR_VAR 0 9
27801: PUSH
27802: LD_INT 35
27804: PUSH
27805: LD_INT 20
27807: PUSH
27808: LD_INT 45
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: LIST
27815: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
27816: LD_VAR 0 6
27820: PPUSH
27821: CALL_OW 264
27825: PUSH
27826: LD_INT 47
27828: PUSH
27829: EMPTY
27830: LIST
27831: IN
27832: IFFALSE 27853
// points := [ 67 , 45 , 75 ] ;
27834: LD_ADDR_VAR 0 9
27838: PUSH
27839: LD_INT 67
27841: PUSH
27842: LD_INT 45
27844: PUSH
27845: LD_INT 75
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: LIST
27852: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
27853: LD_VAR 0 6
27857: PPUSH
27858: CALL_OW 264
27862: PUSH
27863: LD_INT 26
27865: PUSH
27866: EMPTY
27867: LIST
27868: IN
27869: IFFALSE 27890
// points := [ 120 , 30 , 80 ] ;
27871: LD_ADDR_VAR 0 9
27875: PUSH
27876: LD_INT 120
27878: PUSH
27879: LD_INT 30
27881: PUSH
27882: LD_INT 80
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: LIST
27889: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
27890: LD_VAR 0 6
27894: PPUSH
27895: CALL_OW 264
27899: PUSH
27900: LD_INT 22
27902: PUSH
27903: EMPTY
27904: LIST
27905: IN
27906: IFFALSE 27927
// points := [ 40 , 1 , 1 ] ;
27908: LD_ADDR_VAR 0 9
27912: PUSH
27913: LD_INT 40
27915: PUSH
27916: LD_INT 1
27918: PUSH
27919: LD_INT 1
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: LIST
27926: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
27927: LD_VAR 0 6
27931: PPUSH
27932: CALL_OW 264
27936: PUSH
27937: LD_INT 29
27939: PUSH
27940: EMPTY
27941: LIST
27942: IN
27943: IFFALSE 27964
// points := [ 70 , 200 , 400 ] ;
27945: LD_ADDR_VAR 0 9
27949: PUSH
27950: LD_INT 70
27952: PUSH
27953: LD_INT 200
27955: PUSH
27956: LD_INT 400
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: LIST
27963: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
27964: LD_VAR 0 6
27968: PPUSH
27969: CALL_OW 264
27973: PUSH
27974: LD_INT 14
27976: PUSH
27977: LD_INT 53
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: IN
27984: IFFALSE 28005
// points := [ 40 , 10 , 20 ] ;
27986: LD_ADDR_VAR 0 9
27990: PUSH
27991: LD_INT 40
27993: PUSH
27994: LD_INT 10
27996: PUSH
27997: LD_INT 20
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: LIST
28004: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28005: LD_VAR 0 6
28009: PPUSH
28010: CALL_OW 264
28014: PUSH
28015: LD_INT 9
28017: PUSH
28018: EMPTY
28019: LIST
28020: IN
28021: IFFALSE 28042
// points := [ 5 , 70 , 20 ] ;
28023: LD_ADDR_VAR 0 9
28027: PUSH
28028: LD_INT 5
28030: PUSH
28031: LD_INT 70
28033: PUSH
28034: LD_INT 20
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: LIST
28041: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28042: LD_VAR 0 6
28046: PPUSH
28047: CALL_OW 264
28051: PUSH
28052: LD_INT 10
28054: PUSH
28055: EMPTY
28056: LIST
28057: IN
28058: IFFALSE 28079
// points := [ 35 , 110 , 70 ] ;
28060: LD_ADDR_VAR 0 9
28064: PUSH
28065: LD_INT 35
28067: PUSH
28068: LD_INT 110
28070: PUSH
28071: LD_INT 70
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: LIST
28078: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28079: LD_VAR 0 6
28083: PPUSH
28084: CALL_OW 265
28088: PUSH
28089: LD_INT 25
28091: EQUAL
28092: IFFALSE 28113
// points := [ 80 , 65 , 100 ] ;
28094: LD_ADDR_VAR 0 9
28098: PUSH
28099: LD_INT 80
28101: PUSH
28102: LD_INT 65
28104: PUSH
28105: LD_INT 100
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: LIST
28112: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28113: LD_VAR 0 6
28117: PPUSH
28118: CALL_OW 263
28122: PUSH
28123: LD_INT 1
28125: EQUAL
28126: IFFALSE 28161
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28128: LD_ADDR_VAR 0 10
28132: PUSH
28133: LD_VAR 0 10
28137: PUSH
28138: LD_VAR 0 6
28142: PPUSH
28143: CALL_OW 311
28147: PPUSH
28148: LD_INT 3
28150: PPUSH
28151: CALL_OW 259
28155: PUSH
28156: LD_INT 4
28158: MUL
28159: MUL
28160: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28161: LD_VAR 0 6
28165: PPUSH
28166: CALL_OW 263
28170: PUSH
28171: LD_INT 2
28173: EQUAL
28174: IFFALSE 28225
// begin j := IsControledBy ( i ) ;
28176: LD_ADDR_VAR 0 7
28180: PUSH
28181: LD_VAR 0 6
28185: PPUSH
28186: CALL_OW 312
28190: ST_TO_ADDR
// if j then
28191: LD_VAR 0 7
28195: IFFALSE 28225
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28197: LD_ADDR_VAR 0 10
28201: PUSH
28202: LD_VAR 0 10
28206: PUSH
28207: LD_VAR 0 7
28211: PPUSH
28212: LD_INT 3
28214: PPUSH
28215: CALL_OW 259
28219: PUSH
28220: LD_INT 3
28222: MUL
28223: MUL
28224: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28225: LD_VAR 0 6
28229: PPUSH
28230: CALL_OW 264
28234: PUSH
28235: LD_INT 5
28237: PUSH
28238: LD_INT 6
28240: PUSH
28241: LD_INT 46
28243: PUSH
28244: LD_INT 44
28246: PUSH
28247: LD_INT 47
28249: PUSH
28250: LD_INT 45
28252: PUSH
28253: LD_INT 28
28255: PUSH
28256: LD_INT 7
28258: PUSH
28259: LD_INT 27
28261: PUSH
28262: LD_INT 29
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: IN
28277: IFFALSE 28297
28279: PUSH
28280: LD_VAR 0 1
28284: PPUSH
28285: LD_INT 52
28287: PPUSH
28288: CALL_OW 321
28292: PUSH
28293: LD_INT 2
28295: EQUAL
28296: AND
28297: IFFALSE 28314
// bpoints := bpoints * 1.2 ;
28299: LD_ADDR_VAR 0 10
28303: PUSH
28304: LD_VAR 0 10
28308: PUSH
28309: LD_REAL  1.20000000000000E+0000
28312: MUL
28313: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28314: LD_VAR 0 6
28318: PPUSH
28319: CALL_OW 264
28323: PUSH
28324: LD_INT 6
28326: PUSH
28327: LD_INT 46
28329: PUSH
28330: LD_INT 47
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: LIST
28337: IN
28338: IFFALSE 28355
// bpoints := bpoints * 1.2 ;
28340: LD_ADDR_VAR 0 10
28344: PUSH
28345: LD_VAR 0 10
28349: PUSH
28350: LD_REAL  1.20000000000000E+0000
28353: MUL
28354: ST_TO_ADDR
// end ; unit_building :
28355: GO 28369
28357: LD_INT 3
28359: DOUBLE
28360: EQUAL
28361: IFTRUE 28365
28363: GO 28368
28365: POP
// ; end ;
28366: GO 28369
28368: POP
// for j = 1 to 3 do
28369: LD_ADDR_VAR 0 7
28373: PUSH
28374: DOUBLE
28375: LD_INT 1
28377: DEC
28378: ST_TO_ADDR
28379: LD_INT 3
28381: PUSH
28382: FOR_TO
28383: IFFALSE 28436
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28385: LD_ADDR_VAR 0 5
28389: PUSH
28390: LD_VAR 0 5
28394: PPUSH
28395: LD_VAR 0 7
28399: PPUSH
28400: LD_VAR 0 5
28404: PUSH
28405: LD_VAR 0 7
28409: ARRAY
28410: PUSH
28411: LD_VAR 0 9
28415: PUSH
28416: LD_VAR 0 7
28420: ARRAY
28421: PUSH
28422: LD_VAR 0 10
28426: MUL
28427: PLUS
28428: PPUSH
28429: CALL_OW 1
28433: ST_TO_ADDR
28434: GO 28382
28436: POP
28437: POP
// end ;
28438: GO 26911
28440: POP
28441: POP
// result := Replace ( result , 4 , tmp ) ;
28442: LD_ADDR_VAR 0 5
28446: PUSH
28447: LD_VAR 0 5
28451: PPUSH
28452: LD_INT 4
28454: PPUSH
28455: LD_VAR 0 8
28459: PPUSH
28460: CALL_OW 1
28464: ST_TO_ADDR
// end ;
28465: LD_VAR 0 5
28469: RET
// export function DangerAtRange ( unit , range ) ; begin
28470: LD_INT 0
28472: PPUSH
// if not unit then
28473: LD_VAR 0 1
28477: NOT
28478: IFFALSE 28482
// exit ;
28480: GO 28527
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28482: LD_ADDR_VAR 0 3
28486: PUSH
28487: LD_VAR 0 1
28491: PPUSH
28492: CALL_OW 255
28496: PPUSH
28497: LD_VAR 0 1
28501: PPUSH
28502: CALL_OW 250
28506: PPUSH
28507: LD_VAR 0 1
28511: PPUSH
28512: CALL_OW 251
28516: PPUSH
28517: LD_VAR 0 2
28521: PPUSH
28522: CALL 26761 0 4
28526: ST_TO_ADDR
// end ;
28527: LD_VAR 0 3
28531: RET
// export function DangerInArea ( side , area ) ; begin
28532: LD_INT 0
28534: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28535: LD_ADDR_VAR 0 3
28539: PUSH
28540: LD_VAR 0 2
28544: PPUSH
28545: LD_INT 81
28547: PUSH
28548: LD_VAR 0 1
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PPUSH
28557: CALL_OW 70
28561: ST_TO_ADDR
// end ;
28562: LD_VAR 0 3
28566: RET
// export function IsExtension ( b ) ; begin
28567: LD_INT 0
28569: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28570: LD_ADDR_VAR 0 2
28574: PUSH
28575: LD_VAR 0 1
28579: PUSH
28580: LD_INT 23
28582: PUSH
28583: LD_INT 20
28585: PUSH
28586: LD_INT 22
28588: PUSH
28589: LD_INT 17
28591: PUSH
28592: LD_INT 24
28594: PUSH
28595: LD_INT 21
28597: PUSH
28598: LD_INT 19
28600: PUSH
28601: LD_INT 16
28603: PUSH
28604: LD_INT 25
28606: PUSH
28607: LD_INT 18
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: LIST
28617: LIST
28618: LIST
28619: LIST
28620: LIST
28621: IN
28622: ST_TO_ADDR
// end ;
28623: LD_VAR 0 2
28627: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
28628: LD_INT 0
28630: PPUSH
28631: PPUSH
28632: PPUSH
// result := [ ] ;
28633: LD_ADDR_VAR 0 4
28637: PUSH
28638: EMPTY
28639: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28640: LD_ADDR_VAR 0 5
28644: PUSH
28645: LD_VAR 0 2
28649: PPUSH
28650: LD_INT 21
28652: PUSH
28653: LD_INT 3
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PPUSH
28660: CALL_OW 70
28664: ST_TO_ADDR
// if not tmp then
28665: LD_VAR 0 5
28669: NOT
28670: IFFALSE 28674
// exit ;
28672: GO 28738
// if checkLink then
28674: LD_VAR 0 3
28678: IFFALSE 28728
// begin for i in tmp do
28680: LD_ADDR_VAR 0 6
28684: PUSH
28685: LD_VAR 0 5
28689: PUSH
28690: FOR_IN
28691: IFFALSE 28726
// if GetBase ( i ) <> base then
28693: LD_VAR 0 6
28697: PPUSH
28698: CALL_OW 274
28702: PUSH
28703: LD_VAR 0 1
28707: NONEQUAL
28708: IFFALSE 28724
// ComLinkToBase ( base , i ) ;
28710: LD_VAR 0 1
28714: PPUSH
28715: LD_VAR 0 6
28719: PPUSH
28720: CALL_OW 169
28724: GO 28690
28726: POP
28727: POP
// end ; result := tmp ;
28728: LD_ADDR_VAR 0 4
28732: PUSH
28733: LD_VAR 0 5
28737: ST_TO_ADDR
// end ;
28738: LD_VAR 0 4
28742: RET
// export function ComComplete ( units , b ) ; var i ; begin
28743: LD_INT 0
28745: PPUSH
28746: PPUSH
// if not units then
28747: LD_VAR 0 1
28751: NOT
28752: IFFALSE 28756
// exit ;
28754: GO 28846
// for i in units do
28756: LD_ADDR_VAR 0 4
28760: PUSH
28761: LD_VAR 0 1
28765: PUSH
28766: FOR_IN
28767: IFFALSE 28844
// if BuildingStatus ( b ) = bs_build then
28769: LD_VAR 0 2
28773: PPUSH
28774: CALL_OW 461
28778: PUSH
28779: LD_INT 1
28781: EQUAL
28782: IFFALSE 28842
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28784: LD_VAR 0 4
28788: PPUSH
28789: LD_STRING h
28791: PUSH
28792: LD_VAR 0 2
28796: PPUSH
28797: CALL_OW 250
28801: PUSH
28802: LD_VAR 0 2
28806: PPUSH
28807: CALL_OW 251
28811: PUSH
28812: LD_VAR 0 2
28816: PUSH
28817: LD_INT 0
28819: PUSH
28820: LD_INT 0
28822: PUSH
28823: LD_INT 0
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: PUSH
28835: EMPTY
28836: LIST
28837: PPUSH
28838: CALL_OW 446
28842: GO 28766
28844: POP
28845: POP
// end ;
28846: LD_VAR 0 3
28850: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
28851: LD_INT 0
28853: PPUSH
28854: PPUSH
28855: PPUSH
28856: PPUSH
28857: PPUSH
28858: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
28859: LD_VAR 0 1
28863: NOT
28864: IFTRUE 28881
28866: PUSH
28867: LD_VAR 0 1
28871: PPUSH
28872: CALL_OW 263
28876: PUSH
28877: LD_INT 2
28879: NONEQUAL
28880: OR
28881: IFFALSE 28885
// exit ;
28883: GO 29201
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
28885: LD_ADDR_VAR 0 6
28889: PUSH
28890: LD_INT 22
28892: PUSH
28893: LD_VAR 0 1
28897: PPUSH
28898: CALL_OW 255
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: PUSH
28907: LD_INT 2
28909: PUSH
28910: LD_INT 30
28912: PUSH
28913: LD_INT 36
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: LD_INT 34
28922: PUSH
28923: LD_INT 31
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: LIST
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PPUSH
28939: CALL_OW 69
28943: ST_TO_ADDR
// if not tmp then
28944: LD_VAR 0 6
28948: NOT
28949: IFFALSE 28953
// exit ;
28951: GO 29201
// result := [ ] ;
28953: LD_ADDR_VAR 0 2
28957: PUSH
28958: EMPTY
28959: ST_TO_ADDR
// for i in tmp do
28960: LD_ADDR_VAR 0 3
28964: PUSH
28965: LD_VAR 0 6
28969: PUSH
28970: FOR_IN
28971: IFFALSE 29042
// begin t := UnitsInside ( i ) ;
28973: LD_ADDR_VAR 0 4
28977: PUSH
28978: LD_VAR 0 3
28982: PPUSH
28983: CALL_OW 313
28987: ST_TO_ADDR
// if t then
28988: LD_VAR 0 4
28992: IFFALSE 29040
// for j in t do
28994: LD_ADDR_VAR 0 7
28998: PUSH
28999: LD_VAR 0 4
29003: PUSH
29004: FOR_IN
29005: IFFALSE 29038
// result := Replace ( result , result + 1 , j ) ;
29007: LD_ADDR_VAR 0 2
29011: PUSH
29012: LD_VAR 0 2
29016: PPUSH
29017: LD_VAR 0 2
29021: PUSH
29022: LD_INT 1
29024: PLUS
29025: PPUSH
29026: LD_VAR 0 7
29030: PPUSH
29031: CALL_OW 1
29035: ST_TO_ADDR
29036: GO 29004
29038: POP
29039: POP
// end ;
29040: GO 28970
29042: POP
29043: POP
// if not result then
29044: LD_VAR 0 2
29048: NOT
29049: IFFALSE 29053
// exit ;
29051: GO 29201
// mech := result [ 1 ] ;
29053: LD_ADDR_VAR 0 5
29057: PUSH
29058: LD_VAR 0 2
29062: PUSH
29063: LD_INT 1
29065: ARRAY
29066: ST_TO_ADDR
// if result > 1 then
29067: LD_VAR 0 2
29071: PUSH
29072: LD_INT 1
29074: GREATER
29075: IFFALSE 29187
// begin for i = 2 to result do
29077: LD_ADDR_VAR 0 3
29081: PUSH
29082: DOUBLE
29083: LD_INT 2
29085: DEC
29086: ST_TO_ADDR
29087: LD_VAR 0 2
29091: PUSH
29092: FOR_TO
29093: IFFALSE 29185
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29095: LD_ADDR_VAR 0 4
29099: PUSH
29100: LD_VAR 0 2
29104: PUSH
29105: LD_VAR 0 3
29109: ARRAY
29110: PPUSH
29111: LD_INT 3
29113: PPUSH
29114: CALL_OW 259
29118: PUSH
29119: LD_VAR 0 2
29123: PUSH
29124: LD_VAR 0 3
29128: ARRAY
29129: PPUSH
29130: CALL_OW 432
29134: MINUS
29135: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29136: LD_VAR 0 4
29140: PUSH
29141: LD_VAR 0 5
29145: PPUSH
29146: LD_INT 3
29148: PPUSH
29149: CALL_OW 259
29153: PUSH
29154: LD_VAR 0 5
29158: PPUSH
29159: CALL_OW 432
29163: MINUS
29164: GREATEREQUAL
29165: IFFALSE 29183
// mech := result [ i ] ;
29167: LD_ADDR_VAR 0 5
29171: PUSH
29172: LD_VAR 0 2
29176: PUSH
29177: LD_VAR 0 3
29181: ARRAY
29182: ST_TO_ADDR
// end ;
29183: GO 29092
29185: POP
29186: POP
// end ; ComLinkTo ( vehicle , mech ) ;
29187: LD_VAR 0 1
29191: PPUSH
29192: LD_VAR 0 5
29196: PPUSH
29197: CALL_OW 135
// end ;
29201: LD_VAR 0 2
29205: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29206: LD_INT 0
29208: PPUSH
29209: PPUSH
29210: PPUSH
29211: PPUSH
29212: PPUSH
29213: PPUSH
29214: PPUSH
29215: PPUSH
29216: PPUSH
29217: PPUSH
29218: PPUSH
29219: PPUSH
29220: PPUSH
// result := [ ] ;
29221: LD_ADDR_VAR 0 7
29225: PUSH
29226: EMPTY
29227: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29228: LD_VAR 0 1
29232: PPUSH
29233: CALL_OW 266
29237: PUSH
29238: LD_INT 0
29240: PUSH
29241: LD_INT 1
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: IN
29248: NOT
29249: IFFALSE 29253
// exit ;
29251: GO 30893
// if name then
29253: LD_VAR 0 3
29257: IFFALSE 29273
// SetBName ( base_dep , name ) ;
29259: LD_VAR 0 1
29263: PPUSH
29264: LD_VAR 0 3
29268: PPUSH
29269: CALL_OW 500
// base := GetBase ( base_dep ) ;
29273: LD_ADDR_VAR 0 15
29277: PUSH
29278: LD_VAR 0 1
29282: PPUSH
29283: CALL_OW 274
29287: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29288: LD_ADDR_VAR 0 16
29292: PUSH
29293: LD_VAR 0 1
29297: PPUSH
29298: CALL_OW 255
29302: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29303: LD_ADDR_VAR 0 17
29307: PUSH
29308: LD_VAR 0 1
29312: PPUSH
29313: CALL_OW 248
29317: ST_TO_ADDR
// if sources then
29318: LD_VAR 0 5
29322: IFFALSE 29369
// for i = 1 to 3 do
29324: LD_ADDR_VAR 0 8
29328: PUSH
29329: DOUBLE
29330: LD_INT 1
29332: DEC
29333: ST_TO_ADDR
29334: LD_INT 3
29336: PUSH
29337: FOR_TO
29338: IFFALSE 29367
// AddResourceType ( base , i , sources [ i ] ) ;
29340: LD_VAR 0 15
29344: PPUSH
29345: LD_VAR 0 8
29349: PPUSH
29350: LD_VAR 0 5
29354: PUSH
29355: LD_VAR 0 8
29359: ARRAY
29360: PPUSH
29361: CALL_OW 276
29365: GO 29337
29367: POP
29368: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
29369: LD_ADDR_VAR 0 18
29373: PUSH
29374: LD_VAR 0 15
29378: PPUSH
29379: LD_VAR 0 2
29383: PPUSH
29384: LD_INT 1
29386: PPUSH
29387: CALL 28628 0 3
29391: ST_TO_ADDR
// InitHc ;
29392: CALL_OW 19
// InitUc ;
29396: CALL_OW 18
// uc_side := side ;
29400: LD_ADDR_OWVAR 20
29404: PUSH
29405: LD_VAR 0 16
29409: ST_TO_ADDR
// uc_nation := nation ;
29410: LD_ADDR_OWVAR 21
29414: PUSH
29415: LD_VAR 0 17
29419: ST_TO_ADDR
// if buildings then
29420: LD_VAR 0 18
29424: IFFALSE 30752
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29426: LD_ADDR_VAR 0 19
29430: PUSH
29431: LD_VAR 0 18
29435: PPUSH
29436: LD_INT 2
29438: PUSH
29439: LD_INT 30
29441: PUSH
29442: LD_INT 29
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PUSH
29449: LD_INT 30
29451: PUSH
29452: LD_INT 30
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: LIST
29463: PPUSH
29464: CALL_OW 72
29468: ST_TO_ADDR
// if tmp then
29469: LD_VAR 0 19
29473: IFFALSE 29521
// for i in tmp do
29475: LD_ADDR_VAR 0 8
29479: PUSH
29480: LD_VAR 0 19
29484: PUSH
29485: FOR_IN
29486: IFFALSE 29519
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29488: LD_VAR 0 8
29492: PPUSH
29493: CALL_OW 250
29497: PPUSH
29498: LD_VAR 0 8
29502: PPUSH
29503: CALL_OW 251
29507: PPUSH
29508: LD_VAR 0 16
29512: PPUSH
29513: CALL_OW 441
29517: GO 29485
29519: POP
29520: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29521: LD_VAR 0 18
29525: PPUSH
29526: LD_INT 2
29528: PUSH
29529: LD_INT 30
29531: PUSH
29532: LD_INT 32
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: LD_INT 30
29541: PUSH
29542: LD_INT 33
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: LIST
29553: PPUSH
29554: CALL_OW 72
29558: IFFALSE 29646
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29560: LD_ADDR_VAR 0 8
29564: PUSH
29565: LD_VAR 0 18
29569: PPUSH
29570: LD_INT 2
29572: PUSH
29573: LD_INT 30
29575: PUSH
29576: LD_INT 32
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PUSH
29583: LD_INT 30
29585: PUSH
29586: LD_INT 33
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: LIST
29597: PPUSH
29598: CALL_OW 72
29602: PUSH
29603: FOR_IN
29604: IFFALSE 29644
// begin if not GetBWeapon ( i ) then
29606: LD_VAR 0 8
29610: PPUSH
29611: CALL_OW 269
29615: NOT
29616: IFFALSE 29642
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29618: LD_VAR 0 8
29622: PPUSH
29623: LD_VAR 0 8
29627: PPUSH
29628: LD_VAR 0 2
29632: PPUSH
29633: CALL 30898 0 2
29637: PPUSH
29638: CALL_OW 431
// end ;
29642: GO 29603
29644: POP
29645: POP
// end ; for i = 1 to personel do
29646: LD_ADDR_VAR 0 8
29650: PUSH
29651: DOUBLE
29652: LD_INT 1
29654: DEC
29655: ST_TO_ADDR
29656: LD_VAR 0 6
29660: PUSH
29661: FOR_TO
29662: IFFALSE 30732
// begin if i > 4 then
29664: LD_VAR 0 8
29668: PUSH
29669: LD_INT 4
29671: GREATER
29672: IFFALSE 29676
// break ;
29674: GO 30732
// case i of 1 :
29676: LD_VAR 0 8
29680: PUSH
29681: LD_INT 1
29683: DOUBLE
29684: EQUAL
29685: IFTRUE 29689
29687: GO 29769
29689: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29690: LD_ADDR_VAR 0 12
29694: PUSH
29695: LD_VAR 0 18
29699: PPUSH
29700: LD_INT 22
29702: PUSH
29703: LD_VAR 0 16
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: LD_INT 58
29714: PUSH
29715: EMPTY
29716: LIST
29717: PUSH
29718: LD_INT 2
29720: PUSH
29721: LD_INT 30
29723: PUSH
29724: LD_INT 32
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PUSH
29731: LD_INT 30
29733: PUSH
29734: LD_INT 4
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 30
29743: PUSH
29744: LD_INT 5
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: LIST
29755: LIST
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: LIST
29761: PPUSH
29762: CALL_OW 72
29766: ST_TO_ADDR
29767: GO 29991
29769: LD_INT 2
29771: DOUBLE
29772: EQUAL
29773: IFTRUE 29777
29775: GO 29839
29777: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29778: LD_ADDR_VAR 0 12
29782: PUSH
29783: LD_VAR 0 18
29787: PPUSH
29788: LD_INT 22
29790: PUSH
29791: LD_VAR 0 16
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: LD_INT 2
29802: PUSH
29803: LD_INT 30
29805: PUSH
29806: LD_INT 0
29808: PUSH
29809: EMPTY
29810: LIST
29811: LIST
29812: PUSH
29813: LD_INT 30
29815: PUSH
29816: LD_INT 1
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: LIST
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PPUSH
29832: CALL_OW 72
29836: ST_TO_ADDR
29837: GO 29991
29839: LD_INT 3
29841: DOUBLE
29842: EQUAL
29843: IFTRUE 29847
29845: GO 29909
29847: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29848: LD_ADDR_VAR 0 12
29852: PUSH
29853: LD_VAR 0 18
29857: PPUSH
29858: LD_INT 22
29860: PUSH
29861: LD_VAR 0 16
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PUSH
29870: LD_INT 2
29872: PUSH
29873: LD_INT 30
29875: PUSH
29876: LD_INT 2
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: LD_INT 30
29885: PUSH
29886: LD_INT 3
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: LIST
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PPUSH
29902: CALL_OW 72
29906: ST_TO_ADDR
29907: GO 29991
29909: LD_INT 4
29911: DOUBLE
29912: EQUAL
29913: IFTRUE 29917
29915: GO 29990
29917: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
29918: LD_ADDR_VAR 0 12
29922: PUSH
29923: LD_VAR 0 18
29927: PPUSH
29928: LD_INT 22
29930: PUSH
29931: LD_VAR 0 16
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PUSH
29940: LD_INT 2
29942: PUSH
29943: LD_INT 30
29945: PUSH
29946: LD_INT 6
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: LD_INT 30
29955: PUSH
29956: LD_INT 7
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: PUSH
29963: LD_INT 30
29965: PUSH
29966: LD_INT 8
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: PPUSH
29983: CALL_OW 72
29987: ST_TO_ADDR
29988: GO 29991
29990: POP
// if i = 1 then
29991: LD_VAR 0 8
29995: PUSH
29996: LD_INT 1
29998: EQUAL
29999: IFFALSE 30110
// begin tmp := [ ] ;
30001: LD_ADDR_VAR 0 19
30005: PUSH
30006: EMPTY
30007: ST_TO_ADDR
// for j in f do
30008: LD_ADDR_VAR 0 9
30012: PUSH
30013: LD_VAR 0 12
30017: PUSH
30018: FOR_IN
30019: IFFALSE 30092
// if GetBType ( j ) = b_bunker then
30021: LD_VAR 0 9
30025: PPUSH
30026: CALL_OW 266
30030: PUSH
30031: LD_INT 32
30033: EQUAL
30034: IFFALSE 30061
// tmp := Insert ( tmp , 1 , j ) else
30036: LD_ADDR_VAR 0 19
30040: PUSH
30041: LD_VAR 0 19
30045: PPUSH
30046: LD_INT 1
30048: PPUSH
30049: LD_VAR 0 9
30053: PPUSH
30054: CALL_OW 2
30058: ST_TO_ADDR
30059: GO 30090
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30061: LD_ADDR_VAR 0 19
30065: PUSH
30066: LD_VAR 0 19
30070: PPUSH
30071: LD_VAR 0 19
30075: PUSH
30076: LD_INT 1
30078: PLUS
30079: PPUSH
30080: LD_VAR 0 9
30084: PPUSH
30085: CALL_OW 2
30089: ST_TO_ADDR
30090: GO 30018
30092: POP
30093: POP
// if tmp then
30094: LD_VAR 0 19
30098: IFFALSE 30110
// f := tmp ;
30100: LD_ADDR_VAR 0 12
30104: PUSH
30105: LD_VAR 0 19
30109: ST_TO_ADDR
// end ; x := personel [ i ] ;
30110: LD_ADDR_VAR 0 13
30114: PUSH
30115: LD_VAR 0 6
30119: PUSH
30120: LD_VAR 0 8
30124: ARRAY
30125: ST_TO_ADDR
// if x = - 1 then
30126: LD_VAR 0 13
30130: PUSH
30131: LD_INT 1
30133: NEG
30134: EQUAL
30135: IFFALSE 30346
// begin for j in f do
30137: LD_ADDR_VAR 0 9
30141: PUSH
30142: LD_VAR 0 12
30146: PUSH
30147: FOR_IN
30148: IFFALSE 30342
// repeat InitHc ;
30150: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30154: LD_VAR 0 9
30158: PPUSH
30159: CALL_OW 266
30163: PUSH
30164: LD_INT 5
30166: EQUAL
30167: IFFALSE 30237
// begin if UnitsInside ( j ) < 3 then
30169: LD_VAR 0 9
30173: PPUSH
30174: CALL_OW 313
30178: PUSH
30179: LD_INT 3
30181: LESS
30182: IFFALSE 30218
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30184: LD_INT 0
30186: PPUSH
30187: LD_INT 5
30189: PUSH
30190: LD_INT 8
30192: PUSH
30193: LD_INT 9
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: LIST
30200: PUSH
30201: LD_VAR 0 17
30205: ARRAY
30206: PPUSH
30207: LD_VAR 0 4
30211: PPUSH
30212: CALL_OW 380
30216: GO 30235
// PrepareHuman ( false , i , skill ) ;
30218: LD_INT 0
30220: PPUSH
30221: LD_VAR 0 8
30225: PPUSH
30226: LD_VAR 0 4
30230: PPUSH
30231: CALL_OW 380
// end else
30235: GO 30254
// PrepareHuman ( false , i , skill ) ;
30237: LD_INT 0
30239: PPUSH
30240: LD_VAR 0 8
30244: PPUSH
30245: LD_VAR 0 4
30249: PPUSH
30250: CALL_OW 380
// un := CreateHuman ;
30254: LD_ADDR_VAR 0 14
30258: PUSH
30259: CALL_OW 44
30263: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30264: LD_ADDR_VAR 0 7
30268: PUSH
30269: LD_VAR 0 7
30273: PPUSH
30274: LD_INT 1
30276: PPUSH
30277: LD_VAR 0 14
30281: PPUSH
30282: CALL_OW 2
30286: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30287: LD_VAR 0 14
30291: PPUSH
30292: LD_VAR 0 9
30296: PPUSH
30297: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30301: LD_VAR 0 9
30305: PPUSH
30306: CALL_OW 313
30310: PUSH
30311: LD_INT 6
30313: EQUAL
30314: IFTRUE 30338
30316: PUSH
30317: LD_VAR 0 9
30321: PPUSH
30322: CALL_OW 266
30326: PUSH
30327: LD_INT 32
30329: PUSH
30330: LD_INT 31
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: IN
30337: OR
30338: IFFALSE 30150
30340: GO 30147
30342: POP
30343: POP
// end else
30344: GO 30730
// for j = 1 to x do
30346: LD_ADDR_VAR 0 9
30350: PUSH
30351: DOUBLE
30352: LD_INT 1
30354: DEC
30355: ST_TO_ADDR
30356: LD_VAR 0 13
30360: PUSH
30361: FOR_TO
30362: IFFALSE 30728
// begin InitHc ;
30364: CALL_OW 19
// if not f then
30368: LD_VAR 0 12
30372: NOT
30373: IFFALSE 30462
// begin PrepareHuman ( false , i , skill ) ;
30375: LD_INT 0
30377: PPUSH
30378: LD_VAR 0 8
30382: PPUSH
30383: LD_VAR 0 4
30387: PPUSH
30388: CALL_OW 380
// un := CreateHuman ;
30392: LD_ADDR_VAR 0 14
30396: PUSH
30397: CALL_OW 44
30401: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30402: LD_ADDR_VAR 0 7
30406: PUSH
30407: LD_VAR 0 7
30411: PPUSH
30412: LD_INT 1
30414: PPUSH
30415: LD_VAR 0 14
30419: PPUSH
30420: CALL_OW 2
30424: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30425: LD_VAR 0 14
30429: PPUSH
30430: LD_VAR 0 1
30434: PPUSH
30435: CALL_OW 250
30439: PPUSH
30440: LD_VAR 0 1
30444: PPUSH
30445: CALL_OW 251
30449: PPUSH
30450: LD_INT 10
30452: PPUSH
30453: LD_INT 0
30455: PPUSH
30456: CALL_OW 50
// continue ;
30460: GO 30361
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30462: LD_VAR 0 12
30466: PUSH
30467: LD_INT 1
30469: ARRAY
30470: PPUSH
30471: CALL_OW 313
30475: IFFALSE 30503
30477: PUSH
30478: LD_VAR 0 12
30482: PUSH
30483: LD_INT 1
30485: ARRAY
30486: PPUSH
30487: CALL_OW 266
30491: PUSH
30492: LD_INT 32
30494: PUSH
30495: LD_INT 31
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: IN
30502: AND
30503: IFTRUE 30524
30505: PUSH
30506: LD_VAR 0 12
30510: PUSH
30511: LD_INT 1
30513: ARRAY
30514: PPUSH
30515: CALL_OW 313
30519: PUSH
30520: LD_INT 6
30522: EQUAL
30523: OR
30524: IFFALSE 30544
// f := Delete ( f , 1 ) ;
30526: LD_ADDR_VAR 0 12
30530: PUSH
30531: LD_VAR 0 12
30535: PPUSH
30536: LD_INT 1
30538: PPUSH
30539: CALL_OW 3
30543: ST_TO_ADDR
// if not f then
30544: LD_VAR 0 12
30548: NOT
30549: IFFALSE 30567
// begin x := x + 2 ;
30551: LD_ADDR_VAR 0 13
30555: PUSH
30556: LD_VAR 0 13
30560: PUSH
30561: LD_INT 2
30563: PLUS
30564: ST_TO_ADDR
// continue ;
30565: GO 30361
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30567: LD_VAR 0 12
30571: PUSH
30572: LD_INT 1
30574: ARRAY
30575: PPUSH
30576: CALL_OW 266
30580: PUSH
30581: LD_INT 5
30583: EQUAL
30584: IFFALSE 30658
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30586: LD_VAR 0 12
30590: PUSH
30591: LD_INT 1
30593: ARRAY
30594: PPUSH
30595: CALL_OW 313
30599: PUSH
30600: LD_INT 3
30602: LESS
30603: IFFALSE 30639
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30605: LD_INT 0
30607: PPUSH
30608: LD_INT 5
30610: PUSH
30611: LD_INT 8
30613: PUSH
30614: LD_INT 9
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: LIST
30621: PUSH
30622: LD_VAR 0 17
30626: ARRAY
30627: PPUSH
30628: LD_VAR 0 4
30632: PPUSH
30633: CALL_OW 380
30637: GO 30656
// PrepareHuman ( false , i , skill ) ;
30639: LD_INT 0
30641: PPUSH
30642: LD_VAR 0 8
30646: PPUSH
30647: LD_VAR 0 4
30651: PPUSH
30652: CALL_OW 380
// end else
30656: GO 30675
// PrepareHuman ( false , i , skill ) ;
30658: LD_INT 0
30660: PPUSH
30661: LD_VAR 0 8
30665: PPUSH
30666: LD_VAR 0 4
30670: PPUSH
30671: CALL_OW 380
// un := CreateHuman ;
30675: LD_ADDR_VAR 0 14
30679: PUSH
30680: CALL_OW 44
30684: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30685: LD_ADDR_VAR 0 7
30689: PUSH
30690: LD_VAR 0 7
30694: PPUSH
30695: LD_INT 1
30697: PPUSH
30698: LD_VAR 0 14
30702: PPUSH
30703: CALL_OW 2
30707: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30708: LD_VAR 0 14
30712: PPUSH
30713: LD_VAR 0 12
30717: PUSH
30718: LD_INT 1
30720: ARRAY
30721: PPUSH
30722: CALL_OW 52
// end ;
30726: GO 30361
30728: POP
30729: POP
// end ;
30730: GO 29661
30732: POP
30733: POP
// result := result ^ buildings ;
30734: LD_ADDR_VAR 0 7
30738: PUSH
30739: LD_VAR 0 7
30743: PUSH
30744: LD_VAR 0 18
30748: ADD
30749: ST_TO_ADDR
// end else
30750: GO 30893
// begin for i = 1 to personel do
30752: LD_ADDR_VAR 0 8
30756: PUSH
30757: DOUBLE
30758: LD_INT 1
30760: DEC
30761: ST_TO_ADDR
30762: LD_VAR 0 6
30766: PUSH
30767: FOR_TO
30768: IFFALSE 30891
// begin if i > 4 then
30770: LD_VAR 0 8
30774: PUSH
30775: LD_INT 4
30777: GREATER
30778: IFFALSE 30782
// break ;
30780: GO 30891
// x := personel [ i ] ;
30782: LD_ADDR_VAR 0 13
30786: PUSH
30787: LD_VAR 0 6
30791: PUSH
30792: LD_VAR 0 8
30796: ARRAY
30797: ST_TO_ADDR
// if x = - 1 then
30798: LD_VAR 0 13
30802: PUSH
30803: LD_INT 1
30805: NEG
30806: EQUAL
30807: IFFALSE 30811
// continue ;
30809: GO 30767
// PrepareHuman ( false , i , skill ) ;
30811: LD_INT 0
30813: PPUSH
30814: LD_VAR 0 8
30818: PPUSH
30819: LD_VAR 0 4
30823: PPUSH
30824: CALL_OW 380
// un := CreateHuman ;
30828: LD_ADDR_VAR 0 14
30832: PUSH
30833: CALL_OW 44
30837: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30838: LD_VAR 0 14
30842: PPUSH
30843: LD_VAR 0 1
30847: PPUSH
30848: CALL_OW 250
30852: PPUSH
30853: LD_VAR 0 1
30857: PPUSH
30858: CALL_OW 251
30862: PPUSH
30863: LD_INT 10
30865: PPUSH
30866: LD_INT 0
30868: PPUSH
30869: CALL_OW 50
// result := result ^ un ;
30873: LD_ADDR_VAR 0 7
30877: PUSH
30878: LD_VAR 0 7
30882: PUSH
30883: LD_VAR 0 14
30887: ADD
30888: ST_TO_ADDR
// end ;
30889: GO 30767
30891: POP
30892: POP
// end ; end ;
30893: LD_VAR 0 7
30897: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
30898: LD_INT 0
30900: PPUSH
30901: PPUSH
30902: PPUSH
30903: PPUSH
30904: PPUSH
30905: PPUSH
30906: PPUSH
30907: PPUSH
30908: PPUSH
30909: PPUSH
30910: PPUSH
30911: PPUSH
30912: PPUSH
30913: PPUSH
30914: PPUSH
30915: PPUSH
// result := false ;
30916: LD_ADDR_VAR 0 3
30920: PUSH
30921: LD_INT 0
30923: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
30924: LD_VAR 0 1
30928: NOT
30929: IFTRUE 30954
30931: PUSH
30932: LD_VAR 0 1
30936: PPUSH
30937: CALL_OW 266
30941: PUSH
30942: LD_INT 32
30944: PUSH
30945: LD_INT 33
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: IN
30952: NOT
30953: OR
30954: IFFALSE 30958
// exit ;
30956: GO 32093
// nat := GetNation ( tower ) ;
30958: LD_ADDR_VAR 0 12
30962: PUSH
30963: LD_VAR 0 1
30967: PPUSH
30968: CALL_OW 248
30972: ST_TO_ADDR
// side := GetSide ( tower ) ;
30973: LD_ADDR_VAR 0 16
30977: PUSH
30978: LD_VAR 0 1
30982: PPUSH
30983: CALL_OW 255
30987: ST_TO_ADDR
// x := GetX ( tower ) ;
30988: LD_ADDR_VAR 0 10
30992: PUSH
30993: LD_VAR 0 1
30997: PPUSH
30998: CALL_OW 250
31002: ST_TO_ADDR
// y := GetY ( tower ) ;
31003: LD_ADDR_VAR 0 11
31007: PUSH
31008: LD_VAR 0 1
31012: PPUSH
31013: CALL_OW 251
31017: ST_TO_ADDR
// if not x or not y then
31018: LD_VAR 0 10
31022: NOT
31023: IFTRUE 31032
31025: PUSH
31026: LD_VAR 0 11
31030: NOT
31031: OR
31032: IFFALSE 31036
// exit ;
31034: GO 32093
// weapon := 0 ;
31036: LD_ADDR_VAR 0 18
31040: PUSH
31041: LD_INT 0
31043: ST_TO_ADDR
// fac_list := [ ] ;
31044: LD_ADDR_VAR 0 17
31048: PUSH
31049: EMPTY
31050: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
31051: LD_ADDR_VAR 0 6
31055: PUSH
31056: LD_VAR 0 1
31060: PPUSH
31061: CALL_OW 274
31065: PPUSH
31066: LD_VAR 0 2
31070: PPUSH
31071: LD_INT 0
31073: PPUSH
31074: CALL 28628 0 3
31078: PPUSH
31079: LD_INT 30
31081: PUSH
31082: LD_INT 3
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PPUSH
31089: CALL_OW 72
31093: ST_TO_ADDR
// if not factories then
31094: LD_VAR 0 6
31098: NOT
31099: IFFALSE 31103
// exit ;
31101: GO 32093
// for i in factories do
31103: LD_ADDR_VAR 0 8
31107: PUSH
31108: LD_VAR 0 6
31112: PUSH
31113: FOR_IN
31114: IFFALSE 31139
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31116: LD_ADDR_VAR 0 17
31120: PUSH
31121: LD_VAR 0 17
31125: PUSH
31126: LD_VAR 0 8
31130: PPUSH
31131: CALL_OW 478
31135: UNION
31136: ST_TO_ADDR
31137: GO 31113
31139: POP
31140: POP
// if not fac_list then
31141: LD_VAR 0 17
31145: NOT
31146: IFFALSE 31150
// exit ;
31148: GO 32093
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31150: LD_ADDR_VAR 0 5
31154: PUSH
31155: LD_INT 4
31157: PUSH
31158: LD_INT 5
31160: PUSH
31161: LD_INT 9
31163: PUSH
31164: LD_INT 10
31166: PUSH
31167: LD_INT 6
31169: PUSH
31170: LD_INT 7
31172: PUSH
31173: LD_INT 11
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: PUSH
31185: LD_INT 27
31187: PUSH
31188: LD_INT 28
31190: PUSH
31191: LD_INT 26
31193: PUSH
31194: LD_INT 30
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: PUSH
31203: LD_INT 43
31205: PUSH
31206: LD_INT 44
31208: PUSH
31209: LD_INT 46
31211: PUSH
31212: LD_INT 45
31214: PUSH
31215: LD_INT 47
31217: PUSH
31218: LD_INT 49
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: LIST
31233: PUSH
31234: LD_VAR 0 12
31238: ARRAY
31239: ST_TO_ADDR
// list := list isect fac_list ;
31240: LD_ADDR_VAR 0 5
31244: PUSH
31245: LD_VAR 0 5
31249: PUSH
31250: LD_VAR 0 17
31254: ISECT
31255: ST_TO_ADDR
// if not list then
31256: LD_VAR 0 5
31260: NOT
31261: IFFALSE 31265
// exit ;
31263: GO 32093
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31265: LD_VAR 0 12
31269: PUSH
31270: LD_INT 3
31272: EQUAL
31273: IFFALSE 31285
31275: PUSH
31276: LD_INT 49
31278: PUSH
31279: LD_VAR 0 5
31283: IN
31284: AND
31285: IFFALSE 31305
31287: PUSH
31288: LD_INT 31
31290: PPUSH
31291: LD_VAR 0 16
31295: PPUSH
31296: CALL_OW 321
31300: PUSH
31301: LD_INT 2
31303: EQUAL
31304: AND
31305: IFFALSE 31365
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31307: LD_INT 22
31309: PUSH
31310: LD_VAR 0 16
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 35
31321: PUSH
31322: LD_INT 49
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: LD_INT 91
31331: PUSH
31332: LD_VAR 0 1
31336: PUSH
31337: LD_INT 10
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: LIST
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: LIST
31349: PPUSH
31350: CALL_OW 69
31354: NOT
31355: IFFALSE 31365
// weapon := ru_time_lapser ;
31357: LD_ADDR_VAR 0 18
31361: PUSH
31362: LD_INT 49
31364: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31365: LD_VAR 0 12
31369: PUSH
31370: LD_INT 1
31372: PUSH
31373: LD_INT 2
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: IN
31380: IFFALSE 31404
31382: PUSH
31383: LD_INT 11
31385: PUSH
31386: LD_VAR 0 5
31390: IN
31391: IFTRUE 31403
31393: PUSH
31394: LD_INT 30
31396: PUSH
31397: LD_VAR 0 5
31401: IN
31402: OR
31403: AND
31404: IFFALSE 31424
31406: PUSH
31407: LD_INT 6
31409: PPUSH
31410: LD_VAR 0 16
31414: PPUSH
31415: CALL_OW 321
31419: PUSH
31420: LD_INT 2
31422: EQUAL
31423: AND
31424: IFFALSE 31591
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31426: LD_INT 22
31428: PUSH
31429: LD_VAR 0 16
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PUSH
31438: LD_INT 2
31440: PUSH
31441: LD_INT 35
31443: PUSH
31444: LD_INT 11
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: PUSH
31451: LD_INT 35
31453: PUSH
31454: LD_INT 30
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: LIST
31465: PUSH
31466: LD_INT 91
31468: PUSH
31469: LD_VAR 0 1
31473: PUSH
31474: LD_INT 18
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: LIST
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: LIST
31486: PPUSH
31487: CALL_OW 69
31491: NOT
31492: IFFALSE 31568
31494: PUSH
31495: LD_INT 22
31497: PUSH
31498: LD_VAR 0 16
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PUSH
31507: LD_INT 2
31509: PUSH
31510: LD_INT 30
31512: PUSH
31513: LD_INT 32
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 30
31522: PUSH
31523: LD_INT 33
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 91
31537: PUSH
31538: LD_VAR 0 1
31542: PUSH
31543: LD_INT 12
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: LIST
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: LIST
31555: PUSH
31556: EMPTY
31557: LIST
31558: PPUSH
31559: CALL_OW 69
31563: PUSH
31564: LD_INT 2
31566: GREATER
31567: AND
31568: IFFALSE 31591
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31570: LD_ADDR_VAR 0 18
31574: PUSH
31575: LD_INT 11
31577: PUSH
31578: LD_INT 30
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_VAR 0 12
31589: ARRAY
31590: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31591: LD_VAR 0 18
31595: NOT
31596: IFFALSE 31616
31598: PUSH
31599: LD_INT 40
31601: PPUSH
31602: LD_VAR 0 16
31606: PPUSH
31607: CALL_OW 321
31611: PUSH
31612: LD_INT 2
31614: EQUAL
31615: AND
31616: IFFALSE 31652
31618: PUSH
31619: LD_INT 7
31621: PUSH
31622: LD_VAR 0 5
31626: IN
31627: IFTRUE 31639
31629: PUSH
31630: LD_INT 28
31632: PUSH
31633: LD_VAR 0 5
31637: IN
31638: OR
31639: IFTRUE 31651
31641: PUSH
31642: LD_INT 45
31644: PUSH
31645: LD_VAR 0 5
31649: IN
31650: OR
31651: AND
31652: IFFALSE 31906
// begin hex := GetHexInfo ( x , y ) ;
31654: LD_ADDR_VAR 0 4
31658: PUSH
31659: LD_VAR 0 10
31663: PPUSH
31664: LD_VAR 0 11
31668: PPUSH
31669: CALL_OW 546
31673: ST_TO_ADDR
// if hex [ 1 ] then
31674: LD_VAR 0 4
31678: PUSH
31679: LD_INT 1
31681: ARRAY
31682: IFFALSE 31686
// exit ;
31684: GO 32093
// height := hex [ 2 ] ;
31686: LD_ADDR_VAR 0 15
31690: PUSH
31691: LD_VAR 0 4
31695: PUSH
31696: LD_INT 2
31698: ARRAY
31699: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31700: LD_ADDR_VAR 0 14
31704: PUSH
31705: LD_INT 0
31707: PUSH
31708: LD_INT 2
31710: PUSH
31711: LD_INT 3
31713: PUSH
31714: LD_INT 5
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: ST_TO_ADDR
// for i in tmp do
31723: LD_ADDR_VAR 0 8
31727: PUSH
31728: LD_VAR 0 14
31732: PUSH
31733: FOR_IN
31734: IFFALSE 31904
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31736: LD_ADDR_VAR 0 9
31740: PUSH
31741: LD_VAR 0 10
31745: PPUSH
31746: LD_VAR 0 8
31750: PPUSH
31751: LD_INT 5
31753: PPUSH
31754: CALL_OW 272
31758: PUSH
31759: LD_VAR 0 11
31763: PPUSH
31764: LD_VAR 0 8
31768: PPUSH
31769: LD_INT 5
31771: PPUSH
31772: CALL_OW 273
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31781: LD_VAR 0 9
31785: PUSH
31786: LD_INT 1
31788: ARRAY
31789: PPUSH
31790: LD_VAR 0 9
31794: PUSH
31795: LD_INT 2
31797: ARRAY
31798: PPUSH
31799: CALL_OW 488
31803: IFFALSE 31902
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31805: LD_ADDR_VAR 0 4
31809: PUSH
31810: LD_VAR 0 9
31814: PUSH
31815: LD_INT 1
31817: ARRAY
31818: PPUSH
31819: LD_VAR 0 9
31823: PUSH
31824: LD_INT 2
31826: ARRAY
31827: PPUSH
31828: CALL_OW 546
31832: ST_TO_ADDR
// if hex [ 1 ] then
31833: LD_VAR 0 4
31837: PUSH
31838: LD_INT 1
31840: ARRAY
31841: IFFALSE 31845
// continue ;
31843: GO 31733
// h := hex [ 2 ] ;
31845: LD_ADDR_VAR 0 13
31849: PUSH
31850: LD_VAR 0 4
31854: PUSH
31855: LD_INT 2
31857: ARRAY
31858: ST_TO_ADDR
// if h + 7 < height then
31859: LD_VAR 0 13
31863: PUSH
31864: LD_INT 7
31866: PLUS
31867: PUSH
31868: LD_VAR 0 15
31872: LESS
31873: IFFALSE 31902
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
31875: LD_ADDR_VAR 0 18
31879: PUSH
31880: LD_INT 7
31882: PUSH
31883: LD_INT 28
31885: PUSH
31886: LD_INT 45
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: LIST
31893: PUSH
31894: LD_VAR 0 12
31898: ARRAY
31899: ST_TO_ADDR
// break ;
31900: GO 31904
// end ; end ; end ;
31902: GO 31733
31904: POP
31905: POP
// end ; if not weapon then
31906: LD_VAR 0 18
31910: NOT
31911: IFFALSE 31971
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
31913: LD_ADDR_VAR 0 5
31917: PUSH
31918: LD_VAR 0 5
31922: PUSH
31923: LD_INT 11
31925: PUSH
31926: LD_INT 30
31928: PUSH
31929: LD_INT 49
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: LIST
31936: DIFF
31937: ST_TO_ADDR
// if not list then
31938: LD_VAR 0 5
31942: NOT
31943: IFFALSE 31947
// exit ;
31945: GO 32093
// weapon := list [ rand ( 1 , list ) ] ;
31947: LD_ADDR_VAR 0 18
31951: PUSH
31952: LD_VAR 0 5
31956: PUSH
31957: LD_INT 1
31959: PPUSH
31960: LD_VAR 0 5
31964: PPUSH
31965: CALL_OW 12
31969: ARRAY
31970: ST_TO_ADDR
// end ; if weapon then
31971: LD_VAR 0 18
31975: IFFALSE 32093
// begin tmp := CostOfWeapon ( weapon ) ;
31977: LD_ADDR_VAR 0 14
31981: PUSH
31982: LD_VAR 0 18
31986: PPUSH
31987: CALL_OW 451
31991: ST_TO_ADDR
// j := GetBase ( tower ) ;
31992: LD_ADDR_VAR 0 9
31996: PUSH
31997: LD_VAR 0 1
32001: PPUSH
32002: CALL_OW 274
32006: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32007: LD_VAR 0 9
32011: PPUSH
32012: LD_INT 1
32014: PPUSH
32015: CALL_OW 275
32019: PUSH
32020: LD_VAR 0 14
32024: PUSH
32025: LD_INT 1
32027: ARRAY
32028: GREATEREQUAL
32029: IFFALSE 32055
32031: PUSH
32032: LD_VAR 0 9
32036: PPUSH
32037: LD_INT 2
32039: PPUSH
32040: CALL_OW 275
32044: PUSH
32045: LD_VAR 0 14
32049: PUSH
32050: LD_INT 2
32052: ARRAY
32053: GREATEREQUAL
32054: AND
32055: IFFALSE 32081
32057: PUSH
32058: LD_VAR 0 9
32062: PPUSH
32063: LD_INT 3
32065: PPUSH
32066: CALL_OW 275
32070: PUSH
32071: LD_VAR 0 14
32075: PUSH
32076: LD_INT 3
32078: ARRAY
32079: GREATEREQUAL
32080: AND
32081: IFFALSE 32093
// result := weapon ;
32083: LD_ADDR_VAR 0 3
32087: PUSH
32088: LD_VAR 0 18
32092: ST_TO_ADDR
// end ; end ;
32093: LD_VAR 0 3
32097: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32098: LD_INT 0
32100: PPUSH
32101: PPUSH
// result := true ;
32102: LD_ADDR_VAR 0 3
32106: PUSH
32107: LD_INT 1
32109: ST_TO_ADDR
// if array1 = array2 then
32110: LD_VAR 0 1
32114: PUSH
32115: LD_VAR 0 2
32119: EQUAL
32120: IFFALSE 32180
// begin for i = 1 to array1 do
32122: LD_ADDR_VAR 0 4
32126: PUSH
32127: DOUBLE
32128: LD_INT 1
32130: DEC
32131: ST_TO_ADDR
32132: LD_VAR 0 1
32136: PUSH
32137: FOR_TO
32138: IFFALSE 32176
// if array1 [ i ] <> array2 [ i ] then
32140: LD_VAR 0 1
32144: PUSH
32145: LD_VAR 0 4
32149: ARRAY
32150: PUSH
32151: LD_VAR 0 2
32155: PUSH
32156: LD_VAR 0 4
32160: ARRAY
32161: NONEQUAL
32162: IFFALSE 32174
// begin result := false ;
32164: LD_ADDR_VAR 0 3
32168: PUSH
32169: LD_INT 0
32171: ST_TO_ADDR
// break ;
32172: GO 32176
// end ;
32174: GO 32137
32176: POP
32177: POP
// end else
32178: GO 32188
// result := false ;
32180: LD_ADDR_VAR 0 3
32184: PUSH
32185: LD_INT 0
32187: ST_TO_ADDR
// end ;
32188: LD_VAR 0 3
32192: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
32193: LD_INT 0
32195: PPUSH
32196: PPUSH
// if not array1 or not array2 then
32197: LD_VAR 0 1
32201: NOT
32202: IFTRUE 32211
32204: PUSH
32205: LD_VAR 0 2
32209: NOT
32210: OR
32211: IFFALSE 32215
// exit ;
32213: GO 32279
// result := true ;
32215: LD_ADDR_VAR 0 3
32219: PUSH
32220: LD_INT 1
32222: ST_TO_ADDR
// for i = 1 to array1 do
32223: LD_ADDR_VAR 0 4
32227: PUSH
32228: DOUBLE
32229: LD_INT 1
32231: DEC
32232: ST_TO_ADDR
32233: LD_VAR 0 1
32237: PUSH
32238: FOR_TO
32239: IFFALSE 32277
// if array1 [ i ] <> array2 [ i ] then
32241: LD_VAR 0 1
32245: PUSH
32246: LD_VAR 0 4
32250: ARRAY
32251: PUSH
32252: LD_VAR 0 2
32256: PUSH
32257: LD_VAR 0 4
32261: ARRAY
32262: NONEQUAL
32263: IFFALSE 32275
// begin result := false ;
32265: LD_ADDR_VAR 0 3
32269: PUSH
32270: LD_INT 0
32272: ST_TO_ADDR
// break ;
32273: GO 32277
// end ;
32275: GO 32238
32277: POP
32278: POP
// end ;
32279: LD_VAR 0 3
32283: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32284: LD_INT 0
32286: PPUSH
32287: PPUSH
32288: PPUSH
// pom := GetBase ( fac ) ;
32289: LD_ADDR_VAR 0 5
32293: PUSH
32294: LD_VAR 0 1
32298: PPUSH
32299: CALL_OW 274
32303: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32304: LD_ADDR_VAR 0 4
32308: PUSH
32309: LD_VAR 0 2
32313: PUSH
32314: LD_INT 1
32316: ARRAY
32317: PPUSH
32318: LD_VAR 0 2
32322: PUSH
32323: LD_INT 2
32325: ARRAY
32326: PPUSH
32327: LD_VAR 0 2
32331: PUSH
32332: LD_INT 3
32334: ARRAY
32335: PPUSH
32336: LD_VAR 0 2
32340: PUSH
32341: LD_INT 4
32343: ARRAY
32344: PPUSH
32345: CALL_OW 449
32349: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32350: LD_ADDR_VAR 0 3
32354: PUSH
32355: LD_VAR 0 5
32359: PPUSH
32360: LD_INT 1
32362: PPUSH
32363: CALL_OW 275
32367: PUSH
32368: LD_VAR 0 4
32372: PUSH
32373: LD_INT 1
32375: ARRAY
32376: GREATEREQUAL
32377: IFFALSE 32403
32379: PUSH
32380: LD_VAR 0 5
32384: PPUSH
32385: LD_INT 2
32387: PPUSH
32388: CALL_OW 275
32392: PUSH
32393: LD_VAR 0 4
32397: PUSH
32398: LD_INT 2
32400: ARRAY
32401: GREATEREQUAL
32402: AND
32403: IFFALSE 32429
32405: PUSH
32406: LD_VAR 0 5
32410: PPUSH
32411: LD_INT 3
32413: PPUSH
32414: CALL_OW 275
32418: PUSH
32419: LD_VAR 0 4
32423: PUSH
32424: LD_INT 3
32426: ARRAY
32427: GREATEREQUAL
32428: AND
32429: ST_TO_ADDR
// end ;
32430: LD_VAR 0 3
32434: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32435: LD_INT 0
32437: PPUSH
32438: PPUSH
32439: PPUSH
32440: PPUSH
// pom := GetBase ( building ) ;
32441: LD_ADDR_VAR 0 3
32445: PUSH
32446: LD_VAR 0 1
32450: PPUSH
32451: CALL_OW 274
32455: ST_TO_ADDR
// if not pom then
32456: LD_VAR 0 3
32460: NOT
32461: IFFALSE 32465
// exit ;
32463: GO 32639
// btype := GetBType ( building ) ;
32465: LD_ADDR_VAR 0 5
32469: PUSH
32470: LD_VAR 0 1
32474: PPUSH
32475: CALL_OW 266
32479: ST_TO_ADDR
// if btype = b_armoury then
32480: LD_VAR 0 5
32484: PUSH
32485: LD_INT 4
32487: EQUAL
32488: IFFALSE 32498
// btype := b_barracks ;
32490: LD_ADDR_VAR 0 5
32494: PUSH
32495: LD_INT 5
32497: ST_TO_ADDR
// if btype = b_depot then
32498: LD_VAR 0 5
32502: PUSH
32503: LD_INT 0
32505: EQUAL
32506: IFFALSE 32516
// btype := b_warehouse ;
32508: LD_ADDR_VAR 0 5
32512: PUSH
32513: LD_INT 1
32515: ST_TO_ADDR
// if btype = b_workshop then
32516: LD_VAR 0 5
32520: PUSH
32521: LD_INT 2
32523: EQUAL
32524: IFFALSE 32534
// btype := b_factory ;
32526: LD_ADDR_VAR 0 5
32530: PUSH
32531: LD_INT 3
32533: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32534: LD_ADDR_VAR 0 4
32538: PUSH
32539: LD_VAR 0 5
32543: PPUSH
32544: LD_VAR 0 1
32548: PPUSH
32549: CALL_OW 248
32553: PPUSH
32554: CALL_OW 450
32558: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32559: LD_ADDR_VAR 0 2
32563: PUSH
32564: LD_VAR 0 3
32568: PPUSH
32569: LD_INT 1
32571: PPUSH
32572: CALL_OW 275
32576: PUSH
32577: LD_VAR 0 4
32581: PUSH
32582: LD_INT 1
32584: ARRAY
32585: GREATEREQUAL
32586: IFFALSE 32612
32588: PUSH
32589: LD_VAR 0 3
32593: PPUSH
32594: LD_INT 2
32596: PPUSH
32597: CALL_OW 275
32601: PUSH
32602: LD_VAR 0 4
32606: PUSH
32607: LD_INT 2
32609: ARRAY
32610: GREATEREQUAL
32611: AND
32612: IFFALSE 32638
32614: PUSH
32615: LD_VAR 0 3
32619: PPUSH
32620: LD_INT 3
32622: PPUSH
32623: CALL_OW 275
32627: PUSH
32628: LD_VAR 0 4
32632: PUSH
32633: LD_INT 3
32635: ARRAY
32636: GREATEREQUAL
32637: AND
32638: ST_TO_ADDR
// end ;
32639: LD_VAR 0 2
32643: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32644: LD_INT 0
32646: PPUSH
32647: PPUSH
32648: PPUSH
// pom := GetBase ( building ) ;
32649: LD_ADDR_VAR 0 4
32653: PUSH
32654: LD_VAR 0 1
32658: PPUSH
32659: CALL_OW 274
32663: ST_TO_ADDR
// if not pom then
32664: LD_VAR 0 4
32668: NOT
32669: IFFALSE 32673
// exit ;
32671: GO 32778
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32673: LD_ADDR_VAR 0 5
32677: PUSH
32678: LD_VAR 0 2
32682: PPUSH
32683: LD_VAR 0 1
32687: PPUSH
32688: CALL_OW 248
32692: PPUSH
32693: CALL_OW 450
32697: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32698: LD_ADDR_VAR 0 3
32702: PUSH
32703: LD_VAR 0 4
32707: PPUSH
32708: LD_INT 1
32710: PPUSH
32711: CALL_OW 275
32715: PUSH
32716: LD_VAR 0 5
32720: PUSH
32721: LD_INT 1
32723: ARRAY
32724: GREATEREQUAL
32725: IFFALSE 32751
32727: PUSH
32728: LD_VAR 0 4
32732: PPUSH
32733: LD_INT 2
32735: PPUSH
32736: CALL_OW 275
32740: PUSH
32741: LD_VAR 0 5
32745: PUSH
32746: LD_INT 2
32748: ARRAY
32749: GREATEREQUAL
32750: AND
32751: IFFALSE 32777
32753: PUSH
32754: LD_VAR 0 4
32758: PPUSH
32759: LD_INT 3
32761: PPUSH
32762: CALL_OW 275
32766: PUSH
32767: LD_VAR 0 5
32771: PUSH
32772: LD_INT 3
32774: ARRAY
32775: GREATEREQUAL
32776: AND
32777: ST_TO_ADDR
// end ;
32778: LD_VAR 0 3
32782: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
32783: LD_INT 0
32785: PPUSH
32786: PPUSH
32787: PPUSH
32788: PPUSH
32789: PPUSH
32790: PPUSH
32791: PPUSH
32792: PPUSH
32793: PPUSH
32794: PPUSH
32795: PPUSH
// result := false ;
32796: LD_ADDR_VAR 0 8
32800: PUSH
32801: LD_INT 0
32803: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
32804: LD_VAR 0 5
32808: NOT
32809: IFTRUE 32818
32811: PUSH
32812: LD_VAR 0 1
32816: NOT
32817: OR
32818: IFTRUE 32827
32820: PUSH
32821: LD_VAR 0 2
32825: NOT
32826: OR
32827: IFTRUE 32836
32829: PUSH
32830: LD_VAR 0 3
32834: NOT
32835: OR
32836: IFFALSE 32840
// exit ;
32838: GO 33666
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
32840: LD_ADDR_VAR 0 14
32844: PUSH
32845: LD_VAR 0 1
32849: PPUSH
32850: LD_VAR 0 2
32854: PPUSH
32855: LD_VAR 0 3
32859: PPUSH
32860: LD_VAR 0 4
32864: PPUSH
32865: LD_VAR 0 5
32869: PUSH
32870: LD_INT 1
32872: ARRAY
32873: PPUSH
32874: CALL_OW 248
32878: PPUSH
32879: LD_INT 0
32881: PPUSH
32882: CALL 34947 0 6
32886: ST_TO_ADDR
// if not hexes then
32887: LD_VAR 0 14
32891: NOT
32892: IFFALSE 32896
// exit ;
32894: GO 33666
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32896: LD_ADDR_VAR 0 17
32900: PUSH
32901: LD_VAR 0 5
32905: PPUSH
32906: LD_INT 22
32908: PUSH
32909: LD_VAR 0 13
32913: PPUSH
32914: CALL_OW 255
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: PUSH
32923: LD_INT 2
32925: PUSH
32926: LD_INT 30
32928: PUSH
32929: LD_INT 0
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PUSH
32936: LD_INT 30
32938: PUSH
32939: LD_INT 1
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: LIST
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: PPUSH
32955: CALL_OW 72
32959: ST_TO_ADDR
// for i = 1 to hexes do
32960: LD_ADDR_VAR 0 9
32964: PUSH
32965: DOUBLE
32966: LD_INT 1
32968: DEC
32969: ST_TO_ADDR
32970: LD_VAR 0 14
32974: PUSH
32975: FOR_TO
32976: IFFALSE 33664
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32978: LD_ADDR_VAR 0 13
32982: PUSH
32983: LD_VAR 0 14
32987: PUSH
32988: LD_VAR 0 9
32992: ARRAY
32993: PUSH
32994: LD_INT 1
32996: ARRAY
32997: PPUSH
32998: LD_VAR 0 14
33002: PUSH
33003: LD_VAR 0 9
33007: ARRAY
33008: PUSH
33009: LD_INT 2
33011: ARRAY
33012: PPUSH
33013: CALL_OW 428
33017: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33018: LD_VAR 0 14
33022: PUSH
33023: LD_VAR 0 9
33027: ARRAY
33028: PUSH
33029: LD_INT 1
33031: ARRAY
33032: PPUSH
33033: LD_VAR 0 14
33037: PUSH
33038: LD_VAR 0 9
33042: ARRAY
33043: PUSH
33044: LD_INT 2
33046: ARRAY
33047: PPUSH
33048: CALL_OW 351
33052: IFTRUE 33091
33054: PUSH
33055: LD_VAR 0 14
33059: PUSH
33060: LD_VAR 0 9
33064: ARRAY
33065: PUSH
33066: LD_INT 1
33068: ARRAY
33069: PPUSH
33070: LD_VAR 0 14
33074: PUSH
33075: LD_VAR 0 9
33079: ARRAY
33080: PUSH
33081: LD_INT 2
33083: ARRAY
33084: PPUSH
33085: CALL_OW 488
33089: NOT
33090: OR
33091: IFTRUE 33108
33093: PUSH
33094: LD_VAR 0 13
33098: PPUSH
33099: CALL_OW 247
33103: PUSH
33104: LD_INT 3
33106: EQUAL
33107: OR
33108: IFFALSE 33114
// exit ;
33110: POP
33111: POP
33112: GO 33666
// if not tmp then
33114: LD_VAR 0 13
33118: NOT
33119: IFFALSE 33123
// continue ;
33121: GO 32975
// result := true ;
33123: LD_ADDR_VAR 0 8
33127: PUSH
33128: LD_INT 1
33130: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
33131: LD_VAR 0 6
33135: IFFALSE 33152
33137: PUSH
33138: LD_VAR 0 13
33142: PPUSH
33143: CALL_OW 247
33147: PUSH
33148: LD_INT 2
33150: EQUAL
33151: AND
33152: IFFALSE 33169
33154: PUSH
33155: LD_VAR 0 13
33159: PPUSH
33160: CALL_OW 263
33164: PUSH
33165: LD_INT 1
33167: EQUAL
33168: AND
33169: IFFALSE 33333
// begin if IsDrivenBy ( tmp ) then
33171: LD_VAR 0 13
33175: PPUSH
33176: CALL_OW 311
33180: IFFALSE 33184
// continue ;
33182: GO 32975
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
33184: LD_VAR 0 6
33188: PPUSH
33189: LD_INT 3
33191: PUSH
33192: LD_INT 60
33194: PUSH
33195: EMPTY
33196: LIST
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PUSH
33202: LD_INT 3
33204: PUSH
33205: LD_INT 55
33207: PUSH
33208: EMPTY
33209: LIST
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PPUSH
33219: CALL_OW 72
33223: IFFALSE 33331
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
33225: LD_ADDR_VAR 0 18
33229: PUSH
33230: LD_VAR 0 6
33234: PPUSH
33235: LD_INT 3
33237: PUSH
33238: LD_INT 60
33240: PUSH
33241: EMPTY
33242: LIST
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 3
33250: PUSH
33251: LD_INT 55
33253: PUSH
33254: EMPTY
33255: LIST
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PPUSH
33265: CALL_OW 72
33269: PUSH
33270: LD_INT 1
33272: ARRAY
33273: ST_TO_ADDR
// if IsInUnit ( driver ) then
33274: LD_VAR 0 18
33278: PPUSH
33279: CALL_OW 310
33283: IFFALSE 33294
// ComExit ( driver ) ;
33285: LD_VAR 0 18
33289: PPUSH
33290: CALL 58947 0 1
// AddComEnterUnit ( driver , tmp ) ;
33294: LD_VAR 0 18
33298: PPUSH
33299: LD_VAR 0 13
33303: PPUSH
33304: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
33308: LD_VAR 0 18
33312: PPUSH
33313: LD_VAR 0 7
33317: PPUSH
33318: CALL_OW 173
// AddComExitVehicle ( driver ) ;
33322: LD_VAR 0 18
33326: PPUSH
33327: CALL_OW 181
// end ; continue ;
33331: GO 32975
// end ; if not cleaners or not tmp in cleaners then
33333: LD_VAR 0 6
33337: NOT
33338: IFTRUE 33353
33340: PUSH
33341: LD_VAR 0 13
33345: PUSH
33346: LD_VAR 0 6
33350: IN
33351: NOT
33352: OR
33353: IFFALSE 33662
// begin if dep then
33355: LD_VAR 0 17
33359: IFFALSE 33495
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33361: LD_ADDR_VAR 0 16
33365: PUSH
33366: LD_VAR 0 17
33370: PUSH
33371: LD_INT 1
33373: ARRAY
33374: PPUSH
33375: CALL_OW 250
33379: PPUSH
33380: LD_VAR 0 17
33384: PUSH
33385: LD_INT 1
33387: ARRAY
33388: PPUSH
33389: CALL_OW 254
33393: PPUSH
33394: LD_INT 5
33396: PPUSH
33397: CALL_OW 272
33401: PUSH
33402: LD_VAR 0 17
33406: PUSH
33407: LD_INT 1
33409: ARRAY
33410: PPUSH
33411: CALL_OW 251
33415: PPUSH
33416: LD_VAR 0 17
33420: PUSH
33421: LD_INT 1
33423: ARRAY
33424: PPUSH
33425: CALL_OW 254
33429: PPUSH
33430: LD_INT 5
33432: PPUSH
33433: CALL_OW 273
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33442: LD_VAR 0 16
33446: PUSH
33447: LD_INT 1
33449: ARRAY
33450: PPUSH
33451: LD_VAR 0 16
33455: PUSH
33456: LD_INT 2
33458: ARRAY
33459: PPUSH
33460: CALL_OW 488
33464: IFFALSE 33495
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33466: LD_VAR 0 13
33470: PPUSH
33471: LD_VAR 0 16
33475: PUSH
33476: LD_INT 1
33478: ARRAY
33479: PPUSH
33480: LD_VAR 0 16
33484: PUSH
33485: LD_INT 2
33487: ARRAY
33488: PPUSH
33489: CALL_OW 111
// continue ;
33493: GO 32975
// end ; end ; r := GetDir ( tmp ) ;
33495: LD_ADDR_VAR 0 15
33499: PUSH
33500: LD_VAR 0 13
33504: PPUSH
33505: CALL_OW 254
33509: ST_TO_ADDR
// if r = 5 then
33510: LD_VAR 0 15
33514: PUSH
33515: LD_INT 5
33517: EQUAL
33518: IFFALSE 33528
// r := 0 ;
33520: LD_ADDR_VAR 0 15
33524: PUSH
33525: LD_INT 0
33527: ST_TO_ADDR
// for j = r to 5 do
33528: LD_ADDR_VAR 0 10
33532: PUSH
33533: DOUBLE
33534: LD_VAR 0 15
33538: DEC
33539: ST_TO_ADDR
33540: LD_INT 5
33542: PUSH
33543: FOR_TO
33544: IFFALSE 33660
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33546: LD_ADDR_VAR 0 11
33550: PUSH
33551: LD_VAR 0 13
33555: PPUSH
33556: CALL_OW 250
33560: PPUSH
33561: LD_VAR 0 10
33565: PPUSH
33566: LD_INT 2
33568: PPUSH
33569: CALL_OW 272
33573: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33574: LD_ADDR_VAR 0 12
33578: PUSH
33579: LD_VAR 0 13
33583: PPUSH
33584: CALL_OW 251
33588: PPUSH
33589: LD_VAR 0 10
33593: PPUSH
33594: LD_INT 2
33596: PPUSH
33597: CALL_OW 273
33601: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33602: LD_VAR 0 11
33606: PPUSH
33607: LD_VAR 0 12
33611: PPUSH
33612: CALL_OW 488
33616: IFFALSE 33635
33618: PUSH
33619: LD_VAR 0 11
33623: PPUSH
33624: LD_VAR 0 12
33628: PPUSH
33629: CALL_OW 428
33633: NOT
33634: AND
33635: IFFALSE 33658
// begin ComMoveXY ( tmp , _x , _y ) ;
33637: LD_VAR 0 13
33641: PPUSH
33642: LD_VAR 0 11
33646: PPUSH
33647: LD_VAR 0 12
33651: PPUSH
33652: CALL_OW 111
// break ;
33656: GO 33660
// end ; end ;
33658: GO 33543
33660: POP
33661: POP
// end ; end ;
33662: GO 32975
33664: POP
33665: POP
// end ;
33666: LD_VAR 0 8
33670: RET
// export function BuildingTechInvented ( side , btype ) ; begin
33671: LD_INT 0
33673: PPUSH
// result := true ;
33674: LD_ADDR_VAR 0 3
33678: PUSH
33679: LD_INT 1
33681: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
33682: LD_VAR 0 2
33686: PUSH
33687: LD_INT 24
33689: DOUBLE
33690: EQUAL
33691: IFTRUE 33701
33693: LD_INT 33
33695: DOUBLE
33696: EQUAL
33697: IFTRUE 33701
33699: GO 33726
33701: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
33702: LD_ADDR_VAR 0 3
33706: PUSH
33707: LD_INT 32
33709: PPUSH
33710: LD_VAR 0 1
33714: PPUSH
33715: CALL_OW 321
33719: PUSH
33720: LD_INT 2
33722: EQUAL
33723: ST_TO_ADDR
33724: GO 34042
33726: LD_INT 20
33728: DOUBLE
33729: EQUAL
33730: IFTRUE 33734
33732: GO 33759
33734: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
33735: LD_ADDR_VAR 0 3
33739: PUSH
33740: LD_INT 6
33742: PPUSH
33743: LD_VAR 0 1
33747: PPUSH
33748: CALL_OW 321
33752: PUSH
33753: LD_INT 2
33755: EQUAL
33756: ST_TO_ADDR
33757: GO 34042
33759: LD_INT 22
33761: DOUBLE
33762: EQUAL
33763: IFTRUE 33773
33765: LD_INT 36
33767: DOUBLE
33768: EQUAL
33769: IFTRUE 33773
33771: GO 33798
33773: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
33774: LD_ADDR_VAR 0 3
33778: PUSH
33779: LD_INT 15
33781: PPUSH
33782: LD_VAR 0 1
33786: PPUSH
33787: CALL_OW 321
33791: PUSH
33792: LD_INT 2
33794: EQUAL
33795: ST_TO_ADDR
33796: GO 34042
33798: LD_INT 30
33800: DOUBLE
33801: EQUAL
33802: IFTRUE 33806
33804: GO 33831
33806: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
33807: LD_ADDR_VAR 0 3
33811: PUSH
33812: LD_INT 20
33814: PPUSH
33815: LD_VAR 0 1
33819: PPUSH
33820: CALL_OW 321
33824: PUSH
33825: LD_INT 2
33827: EQUAL
33828: ST_TO_ADDR
33829: GO 34042
33831: LD_INT 28
33833: DOUBLE
33834: EQUAL
33835: IFTRUE 33845
33837: LD_INT 21
33839: DOUBLE
33840: EQUAL
33841: IFTRUE 33845
33843: GO 33870
33845: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
33846: LD_ADDR_VAR 0 3
33850: PUSH
33851: LD_INT 21
33853: PPUSH
33854: LD_VAR 0 1
33858: PPUSH
33859: CALL_OW 321
33863: PUSH
33864: LD_INT 2
33866: EQUAL
33867: ST_TO_ADDR
33868: GO 34042
33870: LD_INT 16
33872: DOUBLE
33873: EQUAL
33874: IFTRUE 33878
33876: GO 33903
33878: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
33879: LD_ADDR_VAR 0 3
33883: PUSH
33884: LD_INT 84
33886: PPUSH
33887: LD_VAR 0 1
33891: PPUSH
33892: CALL_OW 321
33896: PUSH
33897: LD_INT 2
33899: EQUAL
33900: ST_TO_ADDR
33901: GO 34042
33903: LD_INT 19
33905: DOUBLE
33906: EQUAL
33907: IFTRUE 33917
33909: LD_INT 23
33911: DOUBLE
33912: EQUAL
33913: IFTRUE 33917
33915: GO 33942
33917: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
33918: LD_ADDR_VAR 0 3
33922: PUSH
33923: LD_INT 83
33925: PPUSH
33926: LD_VAR 0 1
33930: PPUSH
33931: CALL_OW 321
33935: PUSH
33936: LD_INT 2
33938: EQUAL
33939: ST_TO_ADDR
33940: GO 34042
33942: LD_INT 17
33944: DOUBLE
33945: EQUAL
33946: IFTRUE 33950
33948: GO 33975
33950: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
33951: LD_ADDR_VAR 0 3
33955: PUSH
33956: LD_INT 39
33958: PPUSH
33959: LD_VAR 0 1
33963: PPUSH
33964: CALL_OW 321
33968: PUSH
33969: LD_INT 2
33971: EQUAL
33972: ST_TO_ADDR
33973: GO 34042
33975: LD_INT 18
33977: DOUBLE
33978: EQUAL
33979: IFTRUE 33983
33981: GO 34008
33983: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
33984: LD_ADDR_VAR 0 3
33988: PUSH
33989: LD_INT 40
33991: PPUSH
33992: LD_VAR 0 1
33996: PPUSH
33997: CALL_OW 321
34001: PUSH
34002: LD_INT 2
34004: EQUAL
34005: ST_TO_ADDR
34006: GO 34042
34008: LD_INT 27
34010: DOUBLE
34011: EQUAL
34012: IFTRUE 34016
34014: GO 34041
34016: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
34017: LD_ADDR_VAR 0 3
34021: PUSH
34022: LD_INT 35
34024: PPUSH
34025: LD_VAR 0 1
34029: PPUSH
34030: CALL_OW 321
34034: PUSH
34035: LD_INT 2
34037: EQUAL
34038: ST_TO_ADDR
34039: GO 34042
34041: POP
// end ;
34042: LD_VAR 0 3
34046: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
34047: LD_INT 0
34049: PPUSH
34050: PPUSH
34051: PPUSH
34052: PPUSH
34053: PPUSH
34054: PPUSH
34055: PPUSH
34056: PPUSH
34057: PPUSH
34058: PPUSH
34059: PPUSH
// result := false ;
34060: LD_ADDR_VAR 0 6
34064: PUSH
34065: LD_INT 0
34067: ST_TO_ADDR
// if btype = b_depot then
34068: LD_VAR 0 2
34072: PUSH
34073: LD_INT 0
34075: EQUAL
34076: IFFALSE 34088
// begin result := true ;
34078: LD_ADDR_VAR 0 6
34082: PUSH
34083: LD_INT 1
34085: ST_TO_ADDR
// exit ;
34086: GO 34942
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34088: LD_VAR 0 1
34092: NOT
34093: IFTRUE 34118
34095: PUSH
34096: LD_VAR 0 1
34100: PPUSH
34101: CALL_OW 266
34105: PUSH
34106: LD_INT 0
34108: PUSH
34109: LD_INT 1
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: IN
34116: NOT
34117: OR
34118: IFTRUE 34127
34120: PUSH
34121: LD_VAR 0 2
34125: NOT
34126: OR
34127: IFTRUE 34163
34129: PUSH
34130: LD_VAR 0 5
34134: PUSH
34135: LD_INT 0
34137: PUSH
34138: LD_INT 1
34140: PUSH
34141: LD_INT 2
34143: PUSH
34144: LD_INT 3
34146: PUSH
34147: LD_INT 4
34149: PUSH
34150: LD_INT 5
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: IN
34161: NOT
34162: OR
34163: IFTRUE 34182
34165: PUSH
34166: LD_VAR 0 3
34170: PPUSH
34171: LD_VAR 0 4
34175: PPUSH
34176: CALL_OW 488
34180: NOT
34181: OR
34182: IFFALSE 34186
// exit ;
34184: GO 34942
// side := GetSide ( depot ) ;
34186: LD_ADDR_VAR 0 9
34190: PUSH
34191: LD_VAR 0 1
34195: PPUSH
34196: CALL_OW 255
34200: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
34201: LD_VAR 0 9
34205: PPUSH
34206: LD_VAR 0 2
34210: PPUSH
34211: CALL 33671 0 2
34215: NOT
34216: IFFALSE 34220
// exit ;
34218: GO 34942
// pom := GetBase ( depot ) ;
34220: LD_ADDR_VAR 0 10
34224: PUSH
34225: LD_VAR 0 1
34229: PPUSH
34230: CALL_OW 274
34234: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34235: LD_ADDR_VAR 0 11
34239: PUSH
34240: LD_VAR 0 2
34244: PPUSH
34245: LD_VAR 0 1
34249: PPUSH
34250: CALL_OW 248
34254: PPUSH
34255: CALL_OW 450
34259: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34260: LD_VAR 0 10
34264: PPUSH
34265: LD_INT 1
34267: PPUSH
34268: CALL_OW 275
34272: PUSH
34273: LD_VAR 0 11
34277: PUSH
34278: LD_INT 1
34280: ARRAY
34281: GREATEREQUAL
34282: IFFALSE 34308
34284: PUSH
34285: LD_VAR 0 10
34289: PPUSH
34290: LD_INT 2
34292: PPUSH
34293: CALL_OW 275
34297: PUSH
34298: LD_VAR 0 11
34302: PUSH
34303: LD_INT 2
34305: ARRAY
34306: GREATEREQUAL
34307: AND
34308: IFFALSE 34334
34310: PUSH
34311: LD_VAR 0 10
34315: PPUSH
34316: LD_INT 3
34318: PPUSH
34319: CALL_OW 275
34323: PUSH
34324: LD_VAR 0 11
34328: PUSH
34329: LD_INT 3
34331: ARRAY
34332: GREATEREQUAL
34333: AND
34334: NOT
34335: IFFALSE 34339
// exit ;
34337: GO 34942
// if GetBType ( depot ) = b_depot then
34339: LD_VAR 0 1
34343: PPUSH
34344: CALL_OW 266
34348: PUSH
34349: LD_INT 0
34351: EQUAL
34352: IFFALSE 34364
// dist := 28 else
34354: LD_ADDR_VAR 0 14
34358: PUSH
34359: LD_INT 28
34361: ST_TO_ADDR
34362: GO 34372
// dist := 36 ;
34364: LD_ADDR_VAR 0 14
34368: PUSH
34369: LD_INT 36
34371: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34372: LD_VAR 0 1
34376: PPUSH
34377: LD_VAR 0 3
34381: PPUSH
34382: LD_VAR 0 4
34386: PPUSH
34387: CALL_OW 297
34391: PUSH
34392: LD_VAR 0 14
34396: GREATER
34397: IFFALSE 34401
// exit ;
34399: GO 34942
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34401: LD_ADDR_VAR 0 12
34405: PUSH
34406: LD_VAR 0 2
34410: PPUSH
34411: LD_VAR 0 3
34415: PPUSH
34416: LD_VAR 0 4
34420: PPUSH
34421: LD_VAR 0 5
34425: PPUSH
34426: LD_VAR 0 1
34430: PPUSH
34431: CALL_OW 248
34435: PPUSH
34436: LD_INT 0
34438: PPUSH
34439: CALL 34947 0 6
34443: ST_TO_ADDR
// if not hexes then
34444: LD_VAR 0 12
34448: NOT
34449: IFFALSE 34453
// exit ;
34451: GO 34942
// hex := GetHexInfo ( x , y ) ;
34453: LD_ADDR_VAR 0 15
34457: PUSH
34458: LD_VAR 0 3
34462: PPUSH
34463: LD_VAR 0 4
34467: PPUSH
34468: CALL_OW 546
34472: ST_TO_ADDR
// if hex [ 1 ] then
34473: LD_VAR 0 15
34477: PUSH
34478: LD_INT 1
34480: ARRAY
34481: IFFALSE 34485
// exit ;
34483: GO 34942
// height := hex [ 2 ] ;
34485: LD_ADDR_VAR 0 13
34489: PUSH
34490: LD_VAR 0 15
34494: PUSH
34495: LD_INT 2
34497: ARRAY
34498: ST_TO_ADDR
// for i = 1 to hexes do
34499: LD_ADDR_VAR 0 7
34503: PUSH
34504: DOUBLE
34505: LD_INT 1
34507: DEC
34508: ST_TO_ADDR
34509: LD_VAR 0 12
34513: PUSH
34514: FOR_TO
34515: IFFALSE 34859
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34517: LD_VAR 0 12
34521: PUSH
34522: LD_VAR 0 7
34526: ARRAY
34527: PUSH
34528: LD_INT 1
34530: ARRAY
34531: PPUSH
34532: LD_VAR 0 12
34536: PUSH
34537: LD_VAR 0 7
34541: ARRAY
34542: PUSH
34543: LD_INT 2
34545: ARRAY
34546: PPUSH
34547: CALL_OW 488
34551: NOT
34552: IFTRUE 34594
34554: PUSH
34555: LD_VAR 0 12
34559: PUSH
34560: LD_VAR 0 7
34564: ARRAY
34565: PUSH
34566: LD_INT 1
34568: ARRAY
34569: PPUSH
34570: LD_VAR 0 12
34574: PUSH
34575: LD_VAR 0 7
34579: ARRAY
34580: PUSH
34581: LD_INT 2
34583: ARRAY
34584: PPUSH
34585: CALL_OW 428
34589: PUSH
34590: LD_INT 0
34592: GREATER
34593: OR
34594: IFTRUE 34632
34596: PUSH
34597: LD_VAR 0 12
34601: PUSH
34602: LD_VAR 0 7
34606: ARRAY
34607: PUSH
34608: LD_INT 1
34610: ARRAY
34611: PPUSH
34612: LD_VAR 0 12
34616: PUSH
34617: LD_VAR 0 7
34621: ARRAY
34622: PUSH
34623: LD_INT 2
34625: ARRAY
34626: PPUSH
34627: CALL_OW 351
34631: OR
34632: IFFALSE 34638
// exit ;
34634: POP
34635: POP
34636: GO 34942
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34638: LD_ADDR_VAR 0 8
34642: PUSH
34643: LD_VAR 0 12
34647: PUSH
34648: LD_VAR 0 7
34652: ARRAY
34653: PUSH
34654: LD_INT 1
34656: ARRAY
34657: PPUSH
34658: LD_VAR 0 12
34662: PUSH
34663: LD_VAR 0 7
34667: ARRAY
34668: PUSH
34669: LD_INT 2
34671: ARRAY
34672: PPUSH
34673: CALL_OW 546
34677: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34678: LD_VAR 0 8
34682: PUSH
34683: LD_INT 1
34685: ARRAY
34686: IFTRUE 34708
34688: PUSH
34689: LD_VAR 0 8
34693: PUSH
34694: LD_INT 2
34696: ARRAY
34697: PUSH
34698: LD_VAR 0 13
34702: PUSH
34703: LD_INT 2
34705: PLUS
34706: GREATER
34707: OR
34708: IFTRUE 34730
34710: PUSH
34711: LD_VAR 0 8
34715: PUSH
34716: LD_INT 2
34718: ARRAY
34719: PUSH
34720: LD_VAR 0 13
34724: PUSH
34725: LD_INT 2
34727: MINUS
34728: LESS
34729: OR
34730: IFTRUE 34798
34732: PUSH
34733: LD_VAR 0 8
34737: PUSH
34738: LD_INT 3
34740: ARRAY
34741: PUSH
34742: LD_INT 0
34744: PUSH
34745: LD_INT 8
34747: PUSH
34748: LD_INT 9
34750: PUSH
34751: LD_INT 10
34753: PUSH
34754: LD_INT 11
34756: PUSH
34757: LD_INT 12
34759: PUSH
34760: LD_INT 13
34762: PUSH
34763: LD_INT 16
34765: PUSH
34766: LD_INT 17
34768: PUSH
34769: LD_INT 18
34771: PUSH
34772: LD_INT 19
34774: PUSH
34775: LD_INT 20
34777: PUSH
34778: LD_INT 21
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: IN
34796: NOT
34797: OR
34798: IFTRUE 34811
34800: PUSH
34801: LD_VAR 0 8
34805: PUSH
34806: LD_INT 5
34808: ARRAY
34809: NOT
34810: OR
34811: IFTRUE 34851
34813: PUSH
34814: LD_VAR 0 8
34818: PUSH
34819: LD_INT 6
34821: ARRAY
34822: PUSH
34823: LD_INT 1
34825: PUSH
34826: LD_INT 2
34828: PUSH
34829: LD_INT 7
34831: PUSH
34832: LD_INT 9
34834: PUSH
34835: LD_INT 10
34837: PUSH
34838: LD_INT 11
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: IN
34849: NOT
34850: OR
34851: IFFALSE 34857
// exit ;
34853: POP
34854: POP
34855: GO 34942
// end ;
34857: GO 34514
34859: POP
34860: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34861: LD_VAR 0 9
34865: PPUSH
34866: LD_VAR 0 3
34870: PPUSH
34871: LD_VAR 0 4
34875: PPUSH
34876: LD_INT 20
34878: PPUSH
34879: CALL 26761 0 4
34883: PUSH
34884: LD_INT 4
34886: ARRAY
34887: IFFALSE 34891
// exit ;
34889: GO 34942
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34891: LD_VAR 0 2
34895: PUSH
34896: LD_INT 29
34898: PUSH
34899: LD_INT 30
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: IN
34906: IFFALSE 34930
34908: PUSH
34909: LD_VAR 0 3
34913: PPUSH
34914: LD_VAR 0 4
34918: PPUSH
34919: LD_VAR 0 9
34923: PPUSH
34924: CALL_OW 440
34928: NOT
34929: AND
34930: IFFALSE 34934
// exit ;
34932: GO 34942
// result := true ;
34934: LD_ADDR_VAR 0 6
34938: PUSH
34939: LD_INT 1
34941: ST_TO_ADDR
// end ;
34942: LD_VAR 0 6
34946: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
34947: LD_INT 0
34949: PPUSH
34950: PPUSH
34951: PPUSH
34952: PPUSH
34953: PPUSH
34954: PPUSH
34955: PPUSH
34956: PPUSH
34957: PPUSH
34958: PPUSH
34959: PPUSH
34960: PPUSH
34961: PPUSH
34962: PPUSH
34963: PPUSH
34964: PPUSH
34965: PPUSH
34966: PPUSH
34967: PPUSH
34968: PPUSH
34969: PPUSH
34970: PPUSH
34971: PPUSH
34972: PPUSH
34973: PPUSH
34974: PPUSH
34975: PPUSH
34976: PPUSH
34977: PPUSH
34978: PPUSH
34979: PPUSH
34980: PPUSH
34981: PPUSH
34982: PPUSH
34983: PPUSH
34984: PPUSH
34985: PPUSH
34986: PPUSH
34987: PPUSH
34988: PPUSH
34989: PPUSH
34990: PPUSH
34991: PPUSH
34992: PPUSH
34993: PPUSH
34994: PPUSH
34995: PPUSH
34996: PPUSH
34997: PPUSH
34998: PPUSH
34999: PPUSH
35000: PPUSH
35001: PPUSH
35002: PPUSH
35003: PPUSH
35004: PPUSH
35005: PPUSH
35006: PPUSH
// result = [ ] ;
35007: LD_ADDR_VAR 0 7
35011: PUSH
35012: EMPTY
35013: ST_TO_ADDR
// temp_list = [ ] ;
35014: LD_ADDR_VAR 0 9
35018: PUSH
35019: EMPTY
35020: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35021: LD_VAR 0 4
35025: PUSH
35026: LD_INT 0
35028: PUSH
35029: LD_INT 1
35031: PUSH
35032: LD_INT 2
35034: PUSH
35035: LD_INT 3
35037: PUSH
35038: LD_INT 4
35040: PUSH
35041: LD_INT 5
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: IN
35052: NOT
35053: IFTRUE 35096
35055: PUSH
35056: LD_VAR 0 1
35060: PUSH
35061: LD_INT 0
35063: PUSH
35064: LD_INT 1
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: IN
35071: IFFALSE 35095
35073: PUSH
35074: LD_VAR 0 5
35078: PUSH
35079: LD_INT 1
35081: PUSH
35082: LD_INT 2
35084: PUSH
35085: LD_INT 3
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: LIST
35092: IN
35093: NOT
35094: AND
35095: OR
35096: IFFALSE 35100
// exit ;
35098: GO 53499
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35100: LD_VAR 0 1
35104: PUSH
35105: LD_INT 6
35107: PUSH
35108: LD_INT 7
35110: PUSH
35111: LD_INT 8
35113: PUSH
35114: LD_INT 13
35116: PUSH
35117: LD_INT 12
35119: PUSH
35120: LD_INT 15
35122: PUSH
35123: LD_INT 11
35125: PUSH
35126: LD_INT 14
35128: PUSH
35129: LD_INT 10
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: IN
35143: IFFALSE 35153
// btype = b_lab ;
35145: LD_ADDR_VAR 0 1
35149: PUSH
35150: LD_INT 6
35152: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35153: LD_VAR 0 6
35157: PUSH
35158: LD_INT 0
35160: PUSH
35161: LD_INT 1
35163: PUSH
35164: LD_INT 2
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: LIST
35171: IN
35172: NOT
35173: IFTRUE 35241
35175: PUSH
35176: LD_VAR 0 1
35180: PUSH
35181: LD_INT 0
35183: PUSH
35184: LD_INT 1
35186: PUSH
35187: LD_INT 2
35189: PUSH
35190: LD_INT 3
35192: PUSH
35193: LD_INT 6
35195: PUSH
35196: LD_INT 36
35198: PUSH
35199: LD_INT 4
35201: PUSH
35202: LD_INT 5
35204: PUSH
35205: LD_INT 31
35207: PUSH
35208: LD_INT 32
35210: PUSH
35211: LD_INT 33
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: LIST
35226: IN
35227: NOT
35228: IFFALSE 35240
35230: PUSH
35231: LD_VAR 0 6
35235: PUSH
35236: LD_INT 1
35238: EQUAL
35239: AND
35240: OR
35241: IFTRUE 35273
35243: PUSH
35244: LD_VAR 0 1
35248: PUSH
35249: LD_INT 2
35251: PUSH
35252: LD_INT 3
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: IN
35259: NOT
35260: IFFALSE 35272
35262: PUSH
35263: LD_VAR 0 6
35267: PUSH
35268: LD_INT 2
35270: EQUAL
35271: AND
35272: OR
35273: IFFALSE 35283
// mode = 0 ;
35275: LD_ADDR_VAR 0 6
35279: PUSH
35280: LD_INT 0
35282: ST_TO_ADDR
// case mode of 0 :
35283: LD_VAR 0 6
35287: PUSH
35288: LD_INT 0
35290: DOUBLE
35291: EQUAL
35292: IFTRUE 35296
35294: GO 46749
35296: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35297: LD_ADDR_VAR 0 11
35301: PUSH
35302: LD_INT 0
35304: PUSH
35305: LD_INT 0
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: LD_INT 0
35314: PUSH
35315: LD_INT 1
35317: NEG
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 1
35325: PUSH
35326: LD_INT 0
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: LD_INT 1
35335: PUSH
35336: LD_INT 1
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: LD_INT 0
35345: PUSH
35346: LD_INT 1
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 1
35355: NEG
35356: PUSH
35357: LD_INT 0
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 1
35366: NEG
35367: PUSH
35368: LD_INT 1
35370: NEG
35371: PUSH
35372: EMPTY
35373: LIST
35374: LIST
35375: PUSH
35376: LD_INT 1
35378: NEG
35379: PUSH
35380: LD_INT 2
35382: NEG
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: PUSH
35388: LD_INT 0
35390: PUSH
35391: LD_INT 2
35393: NEG
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: PUSH
35399: LD_INT 1
35401: PUSH
35402: LD_INT 1
35404: NEG
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: LD_INT 1
35412: PUSH
35413: LD_INT 2
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 0
35422: PUSH
35423: LD_INT 2
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: LD_INT 1
35432: NEG
35433: PUSH
35434: LD_INT 1
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: LD_INT 1
35443: PUSH
35444: LD_INT 3
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 0
35453: PUSH
35454: LD_INT 3
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: LD_INT 1
35463: NEG
35464: PUSH
35465: LD_INT 2
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35490: LD_ADDR_VAR 0 12
35494: PUSH
35495: LD_INT 0
35497: PUSH
35498: LD_INT 0
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: PUSH
35505: LD_INT 0
35507: PUSH
35508: LD_INT 1
35510: NEG
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: LD_INT 1
35518: PUSH
35519: LD_INT 0
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: PUSH
35526: LD_INT 1
35528: PUSH
35529: LD_INT 1
35531: PUSH
35532: EMPTY
35533: LIST
35534: LIST
35535: PUSH
35536: LD_INT 0
35538: PUSH
35539: LD_INT 1
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: PUSH
35546: LD_INT 1
35548: NEG
35549: PUSH
35550: LD_INT 0
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: PUSH
35557: LD_INT 1
35559: NEG
35560: PUSH
35561: LD_INT 1
35563: NEG
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 1
35571: PUSH
35572: LD_INT 1
35574: NEG
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: LD_INT 2
35582: PUSH
35583: LD_INT 0
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 2
35592: PUSH
35593: LD_INT 1
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PUSH
35600: LD_INT 1
35602: NEG
35603: PUSH
35604: LD_INT 1
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: LD_INT 2
35613: NEG
35614: PUSH
35615: LD_INT 0
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: PUSH
35622: LD_INT 2
35624: NEG
35625: PUSH
35626: LD_INT 1
35628: NEG
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: PUSH
35634: LD_INT 2
35636: NEG
35637: PUSH
35638: LD_INT 1
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: LD_INT 3
35647: NEG
35648: PUSH
35649: LD_INT 0
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 3
35658: NEG
35659: PUSH
35660: LD_INT 1
35662: NEG
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35686: LD_ADDR_VAR 0 13
35690: PUSH
35691: LD_INT 0
35693: PUSH
35694: LD_INT 0
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PUSH
35701: LD_INT 0
35703: PUSH
35704: LD_INT 1
35706: NEG
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 1
35714: PUSH
35715: LD_INT 0
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 1
35724: PUSH
35725: LD_INT 1
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_INT 0
35734: PUSH
35735: LD_INT 1
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 1
35744: NEG
35745: PUSH
35746: LD_INT 0
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 1
35755: NEG
35756: PUSH
35757: LD_INT 1
35759: NEG
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 1
35767: NEG
35768: PUSH
35769: LD_INT 2
35771: NEG
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: LD_INT 2
35779: PUSH
35780: LD_INT 1
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 2
35789: PUSH
35790: LD_INT 2
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: PUSH
35797: LD_INT 1
35799: PUSH
35800: LD_INT 2
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: LD_INT 2
35809: NEG
35810: PUSH
35811: LD_INT 1
35813: NEG
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: PUSH
35819: LD_INT 2
35821: NEG
35822: PUSH
35823: LD_INT 2
35825: NEG
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: LD_INT 2
35833: NEG
35834: PUSH
35835: LD_INT 3
35837: NEG
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: LD_INT 3
35845: NEG
35846: PUSH
35847: LD_INT 2
35849: NEG
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PUSH
35855: LD_INT 3
35857: NEG
35858: PUSH
35859: LD_INT 3
35861: NEG
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35885: LD_ADDR_VAR 0 14
35889: PUSH
35890: LD_INT 0
35892: PUSH
35893: LD_INT 0
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: PUSH
35900: LD_INT 0
35902: PUSH
35903: LD_INT 1
35905: NEG
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: PUSH
35911: LD_INT 1
35913: PUSH
35914: LD_INT 0
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: PUSH
35921: LD_INT 1
35923: PUSH
35924: LD_INT 1
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: PUSH
35931: LD_INT 0
35933: PUSH
35934: LD_INT 1
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 1
35943: NEG
35944: PUSH
35945: LD_INT 0
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PUSH
35952: LD_INT 1
35954: NEG
35955: PUSH
35956: LD_INT 1
35958: NEG
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PUSH
35964: LD_INT 1
35966: NEG
35967: PUSH
35968: LD_INT 2
35970: NEG
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 0
35978: PUSH
35979: LD_INT 2
35981: NEG
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 1
35989: PUSH
35990: LD_INT 1
35992: NEG
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: PUSH
35998: LD_INT 1
36000: PUSH
36001: LD_INT 2
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 0
36010: PUSH
36011: LD_INT 2
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: PUSH
36018: LD_INT 1
36020: NEG
36021: PUSH
36022: LD_INT 1
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: PUSH
36029: LD_INT 1
36031: NEG
36032: PUSH
36033: LD_INT 3
36035: NEG
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_INT 0
36043: PUSH
36044: LD_INT 3
36046: NEG
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 1
36054: PUSH
36055: LD_INT 2
36057: NEG
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36081: LD_ADDR_VAR 0 15
36085: PUSH
36086: LD_INT 0
36088: PUSH
36089: LD_INT 0
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: PUSH
36096: LD_INT 0
36098: PUSH
36099: LD_INT 1
36101: NEG
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: LD_INT 1
36109: PUSH
36110: LD_INT 0
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 1
36119: PUSH
36120: LD_INT 1
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: LD_INT 0
36129: PUSH
36130: LD_INT 1
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 1
36139: NEG
36140: PUSH
36141: LD_INT 0
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 1
36150: NEG
36151: PUSH
36152: LD_INT 1
36154: NEG
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 1
36162: PUSH
36163: LD_INT 1
36165: NEG
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 2
36173: PUSH
36174: LD_INT 0
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: PUSH
36181: LD_INT 2
36183: PUSH
36184: LD_INT 1
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 1
36193: NEG
36194: PUSH
36195: LD_INT 1
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: PUSH
36202: LD_INT 2
36204: NEG
36205: PUSH
36206: LD_INT 0
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: LD_INT 2
36215: NEG
36216: PUSH
36217: LD_INT 1
36219: NEG
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: LD_INT 2
36227: PUSH
36228: LD_INT 1
36230: NEG
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 3
36238: PUSH
36239: LD_INT 0
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 3
36248: PUSH
36249: LD_INT 1
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36274: LD_ADDR_VAR 0 16
36278: PUSH
36279: LD_INT 0
36281: PUSH
36282: LD_INT 0
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: LD_INT 0
36291: PUSH
36292: LD_INT 1
36294: NEG
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 1
36302: PUSH
36303: LD_INT 0
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 1
36312: PUSH
36313: LD_INT 1
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: LD_INT 0
36322: PUSH
36323: LD_INT 1
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: PUSH
36330: LD_INT 1
36332: NEG
36333: PUSH
36334: LD_INT 0
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: PUSH
36341: LD_INT 1
36343: NEG
36344: PUSH
36345: LD_INT 1
36347: NEG
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: PUSH
36353: LD_INT 1
36355: NEG
36356: PUSH
36357: LD_INT 2
36359: NEG
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 2
36367: PUSH
36368: LD_INT 1
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 2
36377: PUSH
36378: LD_INT 2
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: LD_INT 1
36387: PUSH
36388: LD_INT 2
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PUSH
36395: LD_INT 2
36397: NEG
36398: PUSH
36399: LD_INT 1
36401: NEG
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: PUSH
36407: LD_INT 2
36409: NEG
36410: PUSH
36411: LD_INT 2
36413: NEG
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 3
36421: PUSH
36422: LD_INT 2
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 3
36431: PUSH
36432: LD_INT 3
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 2
36441: PUSH
36442: LD_INT 3
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: LIST
36453: LIST
36454: LIST
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36467: LD_ADDR_VAR 0 17
36471: PUSH
36472: LD_INT 0
36474: PUSH
36475: LD_INT 0
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: LD_INT 0
36484: PUSH
36485: LD_INT 1
36487: NEG
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 1
36495: PUSH
36496: LD_INT 0
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: LD_INT 1
36505: PUSH
36506: LD_INT 1
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: PUSH
36513: LD_INT 0
36515: PUSH
36516: LD_INT 1
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: PUSH
36523: LD_INT 1
36525: NEG
36526: PUSH
36527: LD_INT 0
36529: PUSH
36530: EMPTY
36531: LIST
36532: LIST
36533: PUSH
36534: LD_INT 1
36536: NEG
36537: PUSH
36538: LD_INT 1
36540: NEG
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: PUSH
36546: LD_INT 1
36548: NEG
36549: PUSH
36550: LD_INT 2
36552: NEG
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: PUSH
36558: LD_INT 0
36560: PUSH
36561: LD_INT 2
36563: NEG
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 1
36571: PUSH
36572: LD_INT 1
36574: NEG
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: LD_INT 2
36582: PUSH
36583: LD_INT 0
36585: PUSH
36586: EMPTY
36587: LIST
36588: LIST
36589: PUSH
36590: LD_INT 2
36592: PUSH
36593: LD_INT 1
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: LD_INT 2
36602: PUSH
36603: LD_INT 2
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: PUSH
36610: LD_INT 1
36612: PUSH
36613: LD_INT 2
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: PUSH
36620: LD_INT 0
36622: PUSH
36623: LD_INT 2
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: PUSH
36630: LD_INT 1
36632: NEG
36633: PUSH
36634: LD_INT 1
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: LD_INT 2
36643: NEG
36644: PUSH
36645: LD_INT 0
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: PUSH
36652: LD_INT 2
36654: NEG
36655: PUSH
36656: LD_INT 1
36658: NEG
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: PUSH
36664: LD_INT 2
36666: NEG
36667: PUSH
36668: LD_INT 2
36670: NEG
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36697: LD_ADDR_VAR 0 18
36701: PUSH
36702: LD_INT 0
36704: PUSH
36705: LD_INT 0
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: PUSH
36712: LD_INT 0
36714: PUSH
36715: LD_INT 1
36717: NEG
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: PUSH
36723: LD_INT 1
36725: PUSH
36726: LD_INT 0
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PUSH
36733: LD_INT 1
36735: PUSH
36736: LD_INT 1
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: LD_INT 0
36745: PUSH
36746: LD_INT 1
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: LD_INT 1
36755: NEG
36756: PUSH
36757: LD_INT 0
36759: PUSH
36760: EMPTY
36761: LIST
36762: LIST
36763: PUSH
36764: LD_INT 1
36766: NEG
36767: PUSH
36768: LD_INT 1
36770: NEG
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: LD_INT 1
36778: NEG
36779: PUSH
36780: LD_INT 2
36782: NEG
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: PUSH
36788: LD_INT 0
36790: PUSH
36791: LD_INT 2
36793: NEG
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: LD_INT 1
36801: PUSH
36802: LD_INT 1
36804: NEG
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: PUSH
36810: LD_INT 2
36812: PUSH
36813: LD_INT 0
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: PUSH
36820: LD_INT 2
36822: PUSH
36823: LD_INT 1
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: LD_INT 2
36832: PUSH
36833: LD_INT 2
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: PUSH
36840: LD_INT 1
36842: PUSH
36843: LD_INT 2
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PUSH
36850: LD_INT 0
36852: PUSH
36853: LD_INT 2
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 1
36862: NEG
36863: PUSH
36864: LD_INT 1
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 2
36873: NEG
36874: PUSH
36875: LD_INT 0
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 2
36884: NEG
36885: PUSH
36886: LD_INT 1
36888: NEG
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 2
36896: NEG
36897: PUSH
36898: LD_INT 2
36900: NEG
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36927: LD_ADDR_VAR 0 19
36931: PUSH
36932: LD_INT 0
36934: PUSH
36935: LD_INT 0
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: LD_INT 0
36944: PUSH
36945: LD_INT 1
36947: NEG
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 1
36955: PUSH
36956: LD_INT 0
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: PUSH
36963: LD_INT 1
36965: PUSH
36966: LD_INT 1
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PUSH
36973: LD_INT 0
36975: PUSH
36976: LD_INT 1
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 1
36985: NEG
36986: PUSH
36987: LD_INT 0
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: PUSH
36994: LD_INT 1
36996: NEG
36997: PUSH
36998: LD_INT 1
37000: NEG
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: PUSH
37006: LD_INT 1
37008: NEG
37009: PUSH
37010: LD_INT 2
37012: NEG
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PUSH
37018: LD_INT 0
37020: PUSH
37021: LD_INT 2
37023: NEG
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 1
37031: PUSH
37032: LD_INT 1
37034: NEG
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: LD_INT 2
37042: PUSH
37043: LD_INT 0
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 2
37052: PUSH
37053: LD_INT 1
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 2
37062: PUSH
37063: LD_INT 2
37065: PUSH
37066: EMPTY
37067: LIST
37068: LIST
37069: PUSH
37070: LD_INT 1
37072: PUSH
37073: LD_INT 2
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PUSH
37080: LD_INT 0
37082: PUSH
37083: LD_INT 2
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 1
37092: NEG
37093: PUSH
37094: LD_INT 1
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 2
37103: NEG
37104: PUSH
37105: LD_INT 0
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 2
37114: NEG
37115: PUSH
37116: LD_INT 1
37118: NEG
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 2
37126: NEG
37127: PUSH
37128: LD_INT 2
37130: NEG
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: LIST
37150: LIST
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37157: LD_ADDR_VAR 0 20
37161: PUSH
37162: LD_INT 0
37164: PUSH
37165: LD_INT 0
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: LD_INT 0
37174: PUSH
37175: LD_INT 1
37177: NEG
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 1
37185: PUSH
37186: LD_INT 0
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: LD_INT 1
37195: PUSH
37196: LD_INT 1
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 0
37205: PUSH
37206: LD_INT 1
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: LD_INT 1
37215: NEG
37216: PUSH
37217: LD_INT 0
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: LD_INT 1
37226: NEG
37227: PUSH
37228: LD_INT 1
37230: NEG
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: LD_INT 1
37238: NEG
37239: PUSH
37240: LD_INT 2
37242: NEG
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_INT 0
37250: PUSH
37251: LD_INT 2
37253: NEG
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: LD_INT 1
37261: PUSH
37262: LD_INT 1
37264: NEG
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: LD_INT 2
37272: PUSH
37273: LD_INT 0
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 2
37282: PUSH
37283: LD_INT 1
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PUSH
37290: LD_INT 2
37292: PUSH
37293: LD_INT 2
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: PUSH
37300: LD_INT 1
37302: PUSH
37303: LD_INT 2
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: LD_INT 0
37312: PUSH
37313: LD_INT 2
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 1
37322: NEG
37323: PUSH
37324: LD_INT 1
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 2
37333: NEG
37334: PUSH
37335: LD_INT 0
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 2
37344: NEG
37345: PUSH
37346: LD_INT 1
37348: NEG
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 2
37356: NEG
37357: PUSH
37358: LD_INT 2
37360: NEG
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37387: LD_ADDR_VAR 0 21
37391: PUSH
37392: LD_INT 0
37394: PUSH
37395: LD_INT 0
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: LD_INT 0
37404: PUSH
37405: LD_INT 1
37407: NEG
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 1
37415: PUSH
37416: LD_INT 0
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 1
37425: PUSH
37426: LD_INT 1
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: LD_INT 0
37435: PUSH
37436: LD_INT 1
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 1
37445: NEG
37446: PUSH
37447: LD_INT 0
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: LD_INT 1
37456: NEG
37457: PUSH
37458: LD_INT 1
37460: NEG
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 1
37468: NEG
37469: PUSH
37470: LD_INT 2
37472: NEG
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: LD_INT 0
37480: PUSH
37481: LD_INT 2
37483: NEG
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: PUSH
37489: LD_INT 1
37491: PUSH
37492: LD_INT 1
37494: NEG
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 2
37502: PUSH
37503: LD_INT 0
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 2
37512: PUSH
37513: LD_INT 1
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 2
37522: PUSH
37523: LD_INT 2
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 1
37532: PUSH
37533: LD_INT 2
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 0
37542: PUSH
37543: LD_INT 2
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 1
37552: NEG
37553: PUSH
37554: LD_INT 1
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: LD_INT 2
37563: NEG
37564: PUSH
37565: LD_INT 0
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 2
37574: NEG
37575: PUSH
37576: LD_INT 1
37578: NEG
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 2
37586: NEG
37587: PUSH
37588: LD_INT 2
37590: NEG
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37617: LD_ADDR_VAR 0 22
37621: PUSH
37622: LD_INT 0
37624: PUSH
37625: LD_INT 0
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 0
37634: PUSH
37635: LD_INT 1
37637: NEG
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 1
37645: PUSH
37646: LD_INT 0
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 1
37655: PUSH
37656: LD_INT 1
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: LD_INT 0
37665: PUSH
37666: LD_INT 1
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PUSH
37673: LD_INT 1
37675: NEG
37676: PUSH
37677: LD_INT 0
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PUSH
37684: LD_INT 1
37686: NEG
37687: PUSH
37688: LD_INT 1
37690: NEG
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: LD_INT 1
37698: NEG
37699: PUSH
37700: LD_INT 2
37702: NEG
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: PUSH
37708: LD_INT 0
37710: PUSH
37711: LD_INT 2
37713: NEG
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: LD_INT 1
37721: PUSH
37722: LD_INT 1
37724: NEG
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 2
37732: PUSH
37733: LD_INT 0
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 2
37742: PUSH
37743: LD_INT 1
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PUSH
37750: LD_INT 2
37752: PUSH
37753: LD_INT 2
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: LD_INT 1
37762: PUSH
37763: LD_INT 2
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: LD_INT 0
37772: PUSH
37773: LD_INT 2
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 1
37782: NEG
37783: PUSH
37784: LD_INT 1
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PUSH
37791: LD_INT 2
37793: NEG
37794: PUSH
37795: LD_INT 0
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 2
37804: NEG
37805: PUSH
37806: LD_INT 1
37808: NEG
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 2
37816: NEG
37817: PUSH
37818: LD_INT 2
37820: NEG
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37847: LD_ADDR_VAR 0 23
37851: PUSH
37852: LD_INT 0
37854: PUSH
37855: LD_INT 0
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: LD_INT 0
37864: PUSH
37865: LD_INT 1
37867: NEG
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: PUSH
37873: LD_INT 1
37875: PUSH
37876: LD_INT 0
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 1
37885: PUSH
37886: LD_INT 1
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 0
37895: PUSH
37896: LD_INT 1
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 1
37905: NEG
37906: PUSH
37907: LD_INT 0
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: LD_INT 1
37916: NEG
37917: PUSH
37918: LD_INT 1
37920: NEG
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: LD_INT 1
37928: NEG
37929: PUSH
37930: LD_INT 2
37932: NEG
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 0
37940: PUSH
37941: LD_INT 2
37943: NEG
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: LD_INT 1
37951: PUSH
37952: LD_INT 1
37954: NEG
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 2
37962: PUSH
37963: LD_INT 0
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 2
37972: PUSH
37973: LD_INT 1
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PUSH
37980: LD_INT 2
37982: PUSH
37983: LD_INT 2
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: LD_INT 1
37992: PUSH
37993: LD_INT 2
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PUSH
38000: LD_INT 0
38002: PUSH
38003: LD_INT 2
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: PUSH
38010: LD_INT 1
38012: NEG
38013: PUSH
38014: LD_INT 1
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PUSH
38021: LD_INT 2
38023: NEG
38024: PUSH
38025: LD_INT 0
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 2
38034: NEG
38035: PUSH
38036: LD_INT 1
38038: NEG
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: PUSH
38044: LD_INT 2
38046: NEG
38047: PUSH
38048: LD_INT 2
38050: NEG
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: PUSH
38056: LD_INT 2
38058: NEG
38059: PUSH
38060: LD_INT 3
38062: NEG
38063: PUSH
38064: EMPTY
38065: LIST
38066: LIST
38067: PUSH
38068: LD_INT 1
38070: NEG
38071: PUSH
38072: LD_INT 3
38074: NEG
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: LD_INT 1
38082: PUSH
38083: LD_INT 2
38085: NEG
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: PUSH
38091: LD_INT 2
38093: PUSH
38094: LD_INT 1
38096: NEG
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38127: LD_ADDR_VAR 0 24
38131: PUSH
38132: LD_INT 0
38134: PUSH
38135: LD_INT 0
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PUSH
38142: LD_INT 0
38144: PUSH
38145: LD_INT 1
38147: NEG
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: LD_INT 1
38155: PUSH
38156: LD_INT 0
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PUSH
38163: LD_INT 1
38165: PUSH
38166: LD_INT 1
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 0
38175: PUSH
38176: LD_INT 1
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: PUSH
38183: LD_INT 1
38185: NEG
38186: PUSH
38187: LD_INT 0
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 1
38196: NEG
38197: PUSH
38198: LD_INT 1
38200: NEG
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PUSH
38206: LD_INT 1
38208: NEG
38209: PUSH
38210: LD_INT 2
38212: NEG
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: LD_INT 0
38220: PUSH
38221: LD_INT 2
38223: NEG
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 1
38231: PUSH
38232: LD_INT 1
38234: NEG
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 2
38242: PUSH
38243: LD_INT 0
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 2
38252: PUSH
38253: LD_INT 1
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 2
38262: PUSH
38263: LD_INT 2
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: LD_INT 1
38272: PUSH
38273: LD_INT 2
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: LD_INT 0
38282: PUSH
38283: LD_INT 2
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 1
38292: NEG
38293: PUSH
38294: LD_INT 1
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 2
38303: NEG
38304: PUSH
38305: LD_INT 0
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 2
38314: NEG
38315: PUSH
38316: LD_INT 1
38318: NEG
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 2
38326: NEG
38327: PUSH
38328: LD_INT 2
38330: NEG
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 1
38338: PUSH
38339: LD_INT 2
38341: NEG
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: LD_INT 2
38349: PUSH
38350: LD_INT 1
38352: NEG
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 3
38360: PUSH
38361: LD_INT 1
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: LD_INT 3
38370: PUSH
38371: LD_INT 2
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38403: LD_ADDR_VAR 0 25
38407: PUSH
38408: LD_INT 0
38410: PUSH
38411: LD_INT 0
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: LD_INT 0
38420: PUSH
38421: LD_INT 1
38423: NEG
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 1
38431: PUSH
38432: LD_INT 0
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 1
38441: PUSH
38442: LD_INT 1
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: LD_INT 0
38451: PUSH
38452: LD_INT 1
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 1
38461: NEG
38462: PUSH
38463: LD_INT 0
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: LD_INT 1
38472: NEG
38473: PUSH
38474: LD_INT 1
38476: NEG
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: LD_INT 1
38484: NEG
38485: PUSH
38486: LD_INT 2
38488: NEG
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 0
38496: PUSH
38497: LD_INT 2
38499: NEG
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: LD_INT 1
38507: PUSH
38508: LD_INT 1
38510: NEG
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: LD_INT 2
38518: PUSH
38519: LD_INT 0
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 2
38528: PUSH
38529: LD_INT 1
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 2
38538: PUSH
38539: LD_INT 2
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 1
38548: PUSH
38549: LD_INT 2
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 0
38558: PUSH
38559: LD_INT 2
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 1
38568: NEG
38569: PUSH
38570: LD_INT 1
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 2
38579: NEG
38580: PUSH
38581: LD_INT 0
38583: PUSH
38584: EMPTY
38585: LIST
38586: LIST
38587: PUSH
38588: LD_INT 2
38590: NEG
38591: PUSH
38592: LD_INT 1
38594: NEG
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 2
38602: NEG
38603: PUSH
38604: LD_INT 2
38606: NEG
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: LD_INT 3
38614: PUSH
38615: LD_INT 1
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: LD_INT 3
38624: PUSH
38625: LD_INT 2
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: LD_INT 2
38634: PUSH
38635: LD_INT 3
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 1
38644: PUSH
38645: LD_INT 3
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38677: LD_ADDR_VAR 0 26
38681: PUSH
38682: LD_INT 0
38684: PUSH
38685: LD_INT 0
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: LD_INT 0
38694: PUSH
38695: LD_INT 1
38697: NEG
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: LD_INT 1
38705: PUSH
38706: LD_INT 0
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: PUSH
38713: LD_INT 1
38715: PUSH
38716: LD_INT 1
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: PUSH
38723: LD_INT 0
38725: PUSH
38726: LD_INT 1
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 1
38735: NEG
38736: PUSH
38737: LD_INT 0
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 1
38746: NEG
38747: PUSH
38748: LD_INT 1
38750: NEG
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 1
38758: NEG
38759: PUSH
38760: LD_INT 2
38762: NEG
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 0
38770: PUSH
38771: LD_INT 2
38773: NEG
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 1
38781: PUSH
38782: LD_INT 1
38784: NEG
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: LD_INT 2
38792: PUSH
38793: LD_INT 0
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 2
38802: PUSH
38803: LD_INT 1
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 2
38812: PUSH
38813: LD_INT 2
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 1
38822: PUSH
38823: LD_INT 2
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: PUSH
38830: LD_INT 0
38832: PUSH
38833: LD_INT 2
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 1
38842: NEG
38843: PUSH
38844: LD_INT 1
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 2
38853: NEG
38854: PUSH
38855: LD_INT 0
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 2
38864: NEG
38865: PUSH
38866: LD_INT 1
38868: NEG
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: PUSH
38874: LD_INT 2
38876: NEG
38877: PUSH
38878: LD_INT 2
38880: NEG
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: PUSH
38886: LD_INT 2
38888: PUSH
38889: LD_INT 3
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 1
38898: PUSH
38899: LD_INT 3
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 1
38908: NEG
38909: PUSH
38910: LD_INT 2
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 2
38919: NEG
38920: PUSH
38921: LD_INT 1
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38953: LD_ADDR_VAR 0 27
38957: PUSH
38958: LD_INT 0
38960: PUSH
38961: LD_INT 0
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: LD_INT 0
38970: PUSH
38971: LD_INT 1
38973: NEG
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 1
38981: PUSH
38982: LD_INT 0
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 1
38991: PUSH
38992: LD_INT 1
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 0
39001: PUSH
39002: LD_INT 1
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 1
39011: NEG
39012: PUSH
39013: LD_INT 0
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 1
39022: NEG
39023: PUSH
39024: LD_INT 1
39026: NEG
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: LD_INT 1
39034: NEG
39035: PUSH
39036: LD_INT 2
39038: NEG
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 0
39046: PUSH
39047: LD_INT 2
39049: NEG
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 1
39057: PUSH
39058: LD_INT 1
39060: NEG
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: LD_INT 2
39068: PUSH
39069: LD_INT 0
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 2
39078: PUSH
39079: LD_INT 1
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 2
39088: PUSH
39089: LD_INT 2
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 1
39098: PUSH
39099: LD_INT 2
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 0
39108: PUSH
39109: LD_INT 2
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 1
39118: NEG
39119: PUSH
39120: LD_INT 1
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 2
39129: NEG
39130: PUSH
39131: LD_INT 0
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 2
39140: NEG
39141: PUSH
39142: LD_INT 1
39144: NEG
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 2
39152: NEG
39153: PUSH
39154: LD_INT 2
39156: NEG
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 1
39164: NEG
39165: PUSH
39166: LD_INT 2
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 2
39175: NEG
39176: PUSH
39177: LD_INT 1
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 3
39186: NEG
39187: PUSH
39188: LD_INT 1
39190: NEG
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 3
39198: NEG
39199: PUSH
39200: LD_INT 2
39202: NEG
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39233: LD_ADDR_VAR 0 28
39237: PUSH
39238: LD_INT 0
39240: PUSH
39241: LD_INT 0
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 0
39250: PUSH
39251: LD_INT 1
39253: NEG
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 1
39261: PUSH
39262: LD_INT 0
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 1
39271: PUSH
39272: LD_INT 1
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 0
39281: PUSH
39282: LD_INT 1
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 1
39291: NEG
39292: PUSH
39293: LD_INT 0
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: LD_INT 1
39302: NEG
39303: PUSH
39304: LD_INT 1
39306: NEG
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: LD_INT 1
39314: NEG
39315: PUSH
39316: LD_INT 2
39318: NEG
39319: PUSH
39320: EMPTY
39321: LIST
39322: LIST
39323: PUSH
39324: LD_INT 0
39326: PUSH
39327: LD_INT 2
39329: NEG
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 1
39337: PUSH
39338: LD_INT 1
39340: NEG
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 2
39348: PUSH
39349: LD_INT 0
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 2
39358: PUSH
39359: LD_INT 1
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 2
39368: PUSH
39369: LD_INT 2
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 1
39378: PUSH
39379: LD_INT 2
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 0
39388: PUSH
39389: LD_INT 2
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 1
39398: NEG
39399: PUSH
39400: LD_INT 1
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 2
39409: NEG
39410: PUSH
39411: LD_INT 0
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 2
39420: NEG
39421: PUSH
39422: LD_INT 1
39424: NEG
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 2
39432: NEG
39433: PUSH
39434: LD_INT 2
39436: NEG
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 2
39444: NEG
39445: PUSH
39446: LD_INT 3
39448: NEG
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 1
39456: NEG
39457: PUSH
39458: LD_INT 3
39460: NEG
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 3
39468: NEG
39469: PUSH
39470: LD_INT 1
39472: NEG
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 3
39480: NEG
39481: PUSH
39482: LD_INT 2
39484: NEG
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39515: LD_ADDR_VAR 0 29
39519: PUSH
39520: LD_INT 0
39522: PUSH
39523: LD_INT 0
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 0
39532: PUSH
39533: LD_INT 1
39535: NEG
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 1
39543: PUSH
39544: LD_INT 0
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 1
39553: PUSH
39554: LD_INT 1
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 0
39563: PUSH
39564: LD_INT 1
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: LD_INT 1
39573: NEG
39574: PUSH
39575: LD_INT 0
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 1
39584: NEG
39585: PUSH
39586: LD_INT 1
39588: NEG
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 1
39596: NEG
39597: PUSH
39598: LD_INT 2
39600: NEG
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 0
39608: PUSH
39609: LD_INT 2
39611: NEG
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 1
39619: PUSH
39620: LD_INT 1
39622: NEG
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 2
39630: PUSH
39631: LD_INT 0
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 2
39640: PUSH
39641: LD_INT 1
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 1
39650: PUSH
39651: LD_INT 2
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: LD_INT 0
39660: PUSH
39661: LD_INT 2
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PUSH
39668: LD_INT 1
39670: NEG
39671: PUSH
39672: LD_INT 1
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 2
39681: NEG
39682: PUSH
39683: LD_INT 1
39685: NEG
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 2
39693: NEG
39694: PUSH
39695: LD_INT 2
39697: NEG
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 2
39705: NEG
39706: PUSH
39707: LD_INT 3
39709: NEG
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 2
39717: PUSH
39718: LD_INT 1
39720: NEG
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 3
39728: PUSH
39729: LD_INT 1
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: LD_INT 1
39738: PUSH
39739: LD_INT 3
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 1
39748: NEG
39749: PUSH
39750: LD_INT 2
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 3
39759: NEG
39760: PUSH
39761: LD_INT 2
39763: NEG
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39794: LD_ADDR_VAR 0 30
39798: PUSH
39799: LD_INT 0
39801: PUSH
39802: LD_INT 0
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: LD_INT 0
39811: PUSH
39812: LD_INT 1
39814: NEG
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 1
39822: PUSH
39823: LD_INT 0
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: LD_INT 1
39832: PUSH
39833: LD_INT 1
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 0
39842: PUSH
39843: LD_INT 1
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: LD_INT 1
39852: NEG
39853: PUSH
39854: LD_INT 0
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: LD_INT 1
39863: NEG
39864: PUSH
39865: LD_INT 1
39867: NEG
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: PUSH
39873: LD_INT 1
39875: NEG
39876: PUSH
39877: LD_INT 2
39879: NEG
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 0
39887: PUSH
39888: LD_INT 2
39890: NEG
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: LD_INT 1
39898: PUSH
39899: LD_INT 1
39901: NEG
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 2
39909: PUSH
39910: LD_INT 0
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 2
39919: PUSH
39920: LD_INT 1
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 2
39929: PUSH
39930: LD_INT 2
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: PUSH
39937: LD_INT 1
39939: PUSH
39940: LD_INT 2
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 1
39949: NEG
39950: PUSH
39951: LD_INT 1
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 2
39960: NEG
39961: PUSH
39962: LD_INT 0
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 2
39971: NEG
39972: PUSH
39973: LD_INT 1
39975: NEG
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 1
39983: NEG
39984: PUSH
39985: LD_INT 3
39987: NEG
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 1
39995: PUSH
39996: LD_INT 2
39998: NEG
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: LD_INT 3
40006: PUSH
40007: LD_INT 2
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 2
40016: PUSH
40017: LD_INT 3
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 2
40026: NEG
40027: PUSH
40028: LD_INT 1
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 3
40037: NEG
40038: PUSH
40039: LD_INT 1
40041: NEG
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40072: LD_ADDR_VAR 0 31
40076: PUSH
40077: LD_INT 0
40079: PUSH
40080: LD_INT 0
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 0
40089: PUSH
40090: LD_INT 1
40092: NEG
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 1
40100: PUSH
40101: LD_INT 0
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PUSH
40108: LD_INT 1
40110: PUSH
40111: LD_INT 1
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: LD_INT 0
40120: PUSH
40121: LD_INT 1
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 1
40130: NEG
40131: PUSH
40132: LD_INT 0
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 1
40141: NEG
40142: PUSH
40143: LD_INT 1
40145: NEG
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 1
40153: NEG
40154: PUSH
40155: LD_INT 2
40157: NEG
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 1
40165: PUSH
40166: LD_INT 1
40168: NEG
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 2
40176: PUSH
40177: LD_INT 0
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 2
40186: PUSH
40187: LD_INT 1
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 2
40196: PUSH
40197: LD_INT 2
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 1
40206: PUSH
40207: LD_INT 2
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 0
40216: PUSH
40217: LD_INT 2
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 1
40226: NEG
40227: PUSH
40228: LD_INT 1
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 2
40237: NEG
40238: PUSH
40239: LD_INT 1
40241: NEG
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 2
40249: NEG
40250: PUSH
40251: LD_INT 2
40253: NEG
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 2
40261: NEG
40262: PUSH
40263: LD_INT 3
40265: NEG
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 2
40273: PUSH
40274: LD_INT 1
40276: NEG
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 3
40284: PUSH
40285: LD_INT 1
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 1
40294: PUSH
40295: LD_INT 3
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PUSH
40302: LD_INT 1
40304: NEG
40305: PUSH
40306: LD_INT 2
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 3
40315: NEG
40316: PUSH
40317: LD_INT 2
40319: NEG
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40350: LD_ADDR_VAR 0 32
40354: PUSH
40355: LD_INT 0
40357: PUSH
40358: LD_INT 0
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 0
40367: PUSH
40368: LD_INT 1
40370: NEG
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 1
40378: PUSH
40379: LD_INT 0
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 1
40388: PUSH
40389: LD_INT 1
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 0
40398: PUSH
40399: LD_INT 1
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 1
40408: NEG
40409: PUSH
40410: LD_INT 0
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 1
40419: NEG
40420: PUSH
40421: LD_INT 1
40423: NEG
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 1
40431: NEG
40432: PUSH
40433: LD_INT 2
40435: NEG
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 0
40443: PUSH
40444: LD_INT 2
40446: NEG
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 1
40454: PUSH
40455: LD_INT 1
40457: NEG
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 2
40465: PUSH
40466: LD_INT 1
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 2
40475: PUSH
40476: LD_INT 2
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 1
40485: PUSH
40486: LD_INT 2
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 0
40495: PUSH
40496: LD_INT 2
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 1
40505: NEG
40506: PUSH
40507: LD_INT 1
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 2
40516: NEG
40517: PUSH
40518: LD_INT 0
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 2
40527: NEG
40528: PUSH
40529: LD_INT 1
40531: NEG
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 1
40539: NEG
40540: PUSH
40541: LD_INT 3
40543: NEG
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: LD_INT 1
40551: PUSH
40552: LD_INT 2
40554: NEG
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 3
40562: PUSH
40563: LD_INT 2
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 2
40572: PUSH
40573: LD_INT 3
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 2
40582: NEG
40583: PUSH
40584: LD_INT 1
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 3
40593: NEG
40594: PUSH
40595: LD_INT 1
40597: NEG
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40628: LD_ADDR_VAR 0 33
40632: PUSH
40633: LD_INT 0
40635: PUSH
40636: LD_INT 0
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 0
40645: PUSH
40646: LD_INT 1
40648: NEG
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 1
40656: PUSH
40657: LD_INT 0
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 1
40666: PUSH
40667: LD_INT 1
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 0
40676: PUSH
40677: LD_INT 1
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 1
40686: NEG
40687: PUSH
40688: LD_INT 0
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PUSH
40695: LD_INT 1
40697: NEG
40698: PUSH
40699: LD_INT 1
40701: NEG
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 1
40709: NEG
40710: PUSH
40711: LD_INT 2
40713: NEG
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 1
40721: PUSH
40722: LD_INT 1
40724: NEG
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 2
40732: PUSH
40733: LD_INT 0
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 2
40742: PUSH
40743: LD_INT 1
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 1
40752: PUSH
40753: LD_INT 2
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 0
40762: PUSH
40763: LD_INT 2
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 1
40772: NEG
40773: PUSH
40774: LD_INT 1
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 2
40783: NEG
40784: PUSH
40785: LD_INT 0
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 2
40794: NEG
40795: PUSH
40796: LD_INT 1
40798: NEG
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 2
40806: NEG
40807: PUSH
40808: LD_INT 2
40810: NEG
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 2
40818: NEG
40819: PUSH
40820: LD_INT 3
40822: NEG
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 2
40830: PUSH
40831: LD_INT 1
40833: NEG
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 3
40841: PUSH
40842: LD_INT 1
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 1
40851: PUSH
40852: LD_INT 3
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: LD_INT 1
40861: NEG
40862: PUSH
40863: LD_INT 2
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 3
40872: NEG
40873: PUSH
40874: LD_INT 2
40876: NEG
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40907: LD_ADDR_VAR 0 34
40911: PUSH
40912: LD_INT 0
40914: PUSH
40915: LD_INT 0
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 0
40924: PUSH
40925: LD_INT 1
40927: NEG
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 1
40935: PUSH
40936: LD_INT 0
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 1
40945: PUSH
40946: LD_INT 1
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 0
40955: PUSH
40956: LD_INT 1
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 1
40965: NEG
40966: PUSH
40967: LD_INT 0
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 1
40976: NEG
40977: PUSH
40978: LD_INT 1
40980: NEG
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 1
40988: NEG
40989: PUSH
40990: LD_INT 2
40992: NEG
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 0
41000: PUSH
41001: LD_INT 2
41003: NEG
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 1
41011: PUSH
41012: LD_INT 1
41014: NEG
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 2
41022: PUSH
41023: LD_INT 1
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 2
41032: PUSH
41033: LD_INT 2
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 1
41042: PUSH
41043: LD_INT 2
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 1
41052: NEG
41053: PUSH
41054: LD_INT 1
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 2
41063: NEG
41064: PUSH
41065: LD_INT 0
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 2
41074: NEG
41075: PUSH
41076: LD_INT 1
41078: NEG
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 2
41086: NEG
41087: PUSH
41088: LD_INT 2
41090: NEG
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 1
41098: NEG
41099: PUSH
41100: LD_INT 3
41102: NEG
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 1
41110: PUSH
41111: LD_INT 2
41113: NEG
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 3
41121: PUSH
41122: LD_INT 2
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 2
41131: PUSH
41132: LD_INT 3
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 2
41141: NEG
41142: PUSH
41143: LD_INT 1
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 3
41152: NEG
41153: PUSH
41154: LD_INT 1
41156: NEG
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41187: LD_ADDR_VAR 0 35
41191: PUSH
41192: LD_INT 0
41194: PUSH
41195: LD_INT 0
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 0
41204: PUSH
41205: LD_INT 1
41207: NEG
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 1
41215: PUSH
41216: LD_INT 0
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 1
41225: PUSH
41226: LD_INT 1
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 0
41235: PUSH
41236: LD_INT 1
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 1
41245: NEG
41246: PUSH
41247: LD_INT 0
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 1
41256: NEG
41257: PUSH
41258: LD_INT 1
41260: NEG
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 2
41268: PUSH
41269: LD_INT 1
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 2
41278: NEG
41279: PUSH
41280: LD_INT 1
41282: NEG
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41299: LD_ADDR_VAR 0 36
41303: PUSH
41304: LD_INT 0
41306: PUSH
41307: LD_INT 0
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 0
41316: PUSH
41317: LD_INT 1
41319: NEG
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 1
41327: PUSH
41328: LD_INT 0
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 1
41337: PUSH
41338: LD_INT 1
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 0
41347: PUSH
41348: LD_INT 1
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 1
41357: NEG
41358: PUSH
41359: LD_INT 0
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 1
41368: NEG
41369: PUSH
41370: LD_INT 1
41372: NEG
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 1
41380: NEG
41381: PUSH
41382: LD_INT 2
41384: NEG
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 1
41392: PUSH
41393: LD_INT 2
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41411: LD_ADDR_VAR 0 37
41415: PUSH
41416: LD_INT 0
41418: PUSH
41419: LD_INT 0
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 0
41428: PUSH
41429: LD_INT 1
41431: NEG
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 1
41439: PUSH
41440: LD_INT 0
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 1
41449: PUSH
41450: LD_INT 1
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 0
41459: PUSH
41460: LD_INT 1
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 1
41469: NEG
41470: PUSH
41471: LD_INT 0
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 1
41480: NEG
41481: PUSH
41482: LD_INT 1
41484: NEG
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 1
41492: PUSH
41493: LD_INT 1
41495: NEG
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 1
41503: NEG
41504: PUSH
41505: LD_INT 1
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41523: LD_ADDR_VAR 0 38
41527: PUSH
41528: LD_INT 0
41530: PUSH
41531: LD_INT 0
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 0
41540: PUSH
41541: LD_INT 1
41543: NEG
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 1
41551: PUSH
41552: LD_INT 0
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 1
41561: PUSH
41562: LD_INT 1
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 0
41571: PUSH
41572: LD_INT 1
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 1
41581: NEG
41582: PUSH
41583: LD_INT 0
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 1
41592: NEG
41593: PUSH
41594: LD_INT 1
41596: NEG
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 2
41604: PUSH
41605: LD_INT 1
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 2
41614: NEG
41615: PUSH
41616: LD_INT 1
41618: NEG
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41635: LD_ADDR_VAR 0 39
41639: PUSH
41640: LD_INT 0
41642: PUSH
41643: LD_INT 0
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 0
41652: PUSH
41653: LD_INT 1
41655: NEG
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 1
41663: PUSH
41664: LD_INT 0
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 1
41673: PUSH
41674: LD_INT 1
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 0
41683: PUSH
41684: LD_INT 1
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 1
41693: NEG
41694: PUSH
41695: LD_INT 0
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 1
41704: NEG
41705: PUSH
41706: LD_INT 1
41708: NEG
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 1
41716: NEG
41717: PUSH
41718: LD_INT 2
41720: NEG
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 1
41728: PUSH
41729: LD_INT 2
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41747: LD_ADDR_VAR 0 40
41751: PUSH
41752: LD_INT 0
41754: PUSH
41755: LD_INT 0
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 0
41764: PUSH
41765: LD_INT 1
41767: NEG
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 1
41775: PUSH
41776: LD_INT 0
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 1
41785: PUSH
41786: LD_INT 1
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 0
41795: PUSH
41796: LD_INT 1
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: PUSH
41803: LD_INT 1
41805: NEG
41806: PUSH
41807: LD_INT 0
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 1
41816: NEG
41817: PUSH
41818: LD_INT 1
41820: NEG
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 1
41828: PUSH
41829: LD_INT 1
41831: NEG
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 1
41839: NEG
41840: PUSH
41841: LD_INT 1
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41859: LD_ADDR_VAR 0 41
41863: PUSH
41864: LD_INT 0
41866: PUSH
41867: LD_INT 0
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: LD_INT 0
41876: PUSH
41877: LD_INT 1
41879: NEG
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 1
41887: PUSH
41888: LD_INT 0
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 1
41897: PUSH
41898: LD_INT 1
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 0
41907: PUSH
41908: LD_INT 1
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 1
41917: NEG
41918: PUSH
41919: LD_INT 0
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 1
41928: NEG
41929: PUSH
41930: LD_INT 1
41932: NEG
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 1
41940: NEG
41941: PUSH
41942: LD_INT 2
41944: NEG
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 1
41952: PUSH
41953: LD_INT 1
41955: NEG
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 2
41963: PUSH
41964: LD_INT 0
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 2
41973: PUSH
41974: LD_INT 1
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 2
41983: PUSH
41984: LD_INT 2
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 1
41993: PUSH
41994: LD_INT 2
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 1
42003: NEG
42004: PUSH
42005: LD_INT 1
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 2
42014: NEG
42015: PUSH
42016: LD_INT 0
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 2
42025: NEG
42026: PUSH
42027: LD_INT 1
42029: NEG
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 2
42037: NEG
42038: PUSH
42039: LD_INT 2
42041: NEG
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 2
42049: NEG
42050: PUSH
42051: LD_INT 3
42053: NEG
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 2
42061: PUSH
42062: LD_INT 1
42064: NEG
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 3
42072: PUSH
42073: LD_INT 0
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 3
42082: PUSH
42083: LD_INT 1
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 3
42092: PUSH
42093: LD_INT 2
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 3
42102: PUSH
42103: LD_INT 3
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 2
42112: PUSH
42113: LD_INT 3
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 2
42122: NEG
42123: PUSH
42124: LD_INT 1
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: LD_INT 3
42133: NEG
42134: PUSH
42135: LD_INT 0
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 3
42144: NEG
42145: PUSH
42146: LD_INT 1
42148: NEG
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 3
42156: NEG
42157: PUSH
42158: LD_INT 2
42160: NEG
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 3
42168: NEG
42169: PUSH
42170: LD_INT 3
42172: NEG
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42209: LD_ADDR_VAR 0 42
42213: PUSH
42214: LD_INT 0
42216: PUSH
42217: LD_INT 0
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 0
42226: PUSH
42227: LD_INT 1
42229: NEG
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 1
42237: PUSH
42238: LD_INT 0
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 1
42247: PUSH
42248: LD_INT 1
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 0
42257: PUSH
42258: LD_INT 1
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 1
42267: NEG
42268: PUSH
42269: LD_INT 0
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 1
42278: NEG
42279: PUSH
42280: LD_INT 1
42282: NEG
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 1
42290: NEG
42291: PUSH
42292: LD_INT 2
42294: NEG
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 0
42302: PUSH
42303: LD_INT 2
42305: NEG
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 1
42313: PUSH
42314: LD_INT 1
42316: NEG
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 2
42324: PUSH
42325: LD_INT 1
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 2
42334: PUSH
42335: LD_INT 2
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 1
42344: PUSH
42345: LD_INT 2
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 0
42354: PUSH
42355: LD_INT 2
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 1
42364: NEG
42365: PUSH
42366: LD_INT 1
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 2
42375: NEG
42376: PUSH
42377: LD_INT 1
42379: NEG
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 2
42387: NEG
42388: PUSH
42389: LD_INT 2
42391: NEG
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 2
42399: NEG
42400: PUSH
42401: LD_INT 3
42403: NEG
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 1
42411: NEG
42412: PUSH
42413: LD_INT 3
42415: NEG
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 0
42423: PUSH
42424: LD_INT 3
42426: NEG
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 1
42434: PUSH
42435: LD_INT 2
42437: NEG
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 3
42445: PUSH
42446: LD_INT 2
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 3
42455: PUSH
42456: LD_INT 3
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 2
42465: PUSH
42466: LD_INT 3
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 1
42475: PUSH
42476: LD_INT 3
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 0
42485: PUSH
42486: LD_INT 3
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 1
42495: NEG
42496: PUSH
42497: LD_INT 2
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 3
42506: NEG
42507: PUSH
42508: LD_INT 2
42510: NEG
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 3
42518: NEG
42519: PUSH
42520: LD_INT 3
42522: NEG
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42559: LD_ADDR_VAR 0 43
42563: PUSH
42564: LD_INT 0
42566: PUSH
42567: LD_INT 0
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 0
42576: PUSH
42577: LD_INT 1
42579: NEG
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 1
42587: PUSH
42588: LD_INT 0
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 1
42597: PUSH
42598: LD_INT 1
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 0
42607: PUSH
42608: LD_INT 1
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 1
42617: NEG
42618: PUSH
42619: LD_INT 0
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 1
42628: NEG
42629: PUSH
42630: LD_INT 1
42632: NEG
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 1
42640: NEG
42641: PUSH
42642: LD_INT 2
42644: NEG
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 0
42652: PUSH
42653: LD_INT 2
42655: NEG
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 1
42663: PUSH
42664: LD_INT 1
42666: NEG
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 2
42674: PUSH
42675: LD_INT 0
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 2
42684: PUSH
42685: LD_INT 1
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 1
42694: PUSH
42695: LD_INT 2
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 0
42704: PUSH
42705: LD_INT 2
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 1
42714: NEG
42715: PUSH
42716: LD_INT 1
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 2
42725: NEG
42726: PUSH
42727: LD_INT 0
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 2
42736: NEG
42737: PUSH
42738: LD_INT 1
42740: NEG
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 1
42748: NEG
42749: PUSH
42750: LD_INT 3
42752: NEG
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 0
42760: PUSH
42761: LD_INT 3
42763: NEG
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 1
42771: PUSH
42772: LD_INT 2
42774: NEG
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 2
42782: PUSH
42783: LD_INT 1
42785: NEG
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 3
42793: PUSH
42794: LD_INT 0
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 3
42803: PUSH
42804: LD_INT 1
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 1
42813: PUSH
42814: LD_INT 3
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 0
42823: PUSH
42824: LD_INT 3
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 1
42833: NEG
42834: PUSH
42835: LD_INT 2
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 2
42844: NEG
42845: PUSH
42846: LD_INT 1
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 3
42855: NEG
42856: PUSH
42857: LD_INT 0
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 3
42866: NEG
42867: PUSH
42868: LD_INT 1
42870: NEG
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42907: LD_ADDR_VAR 0 44
42911: PUSH
42912: LD_INT 0
42914: PUSH
42915: LD_INT 0
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 0
42924: PUSH
42925: LD_INT 1
42927: NEG
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 1
42935: PUSH
42936: LD_INT 0
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: PUSH
42943: LD_INT 1
42945: PUSH
42946: LD_INT 1
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 0
42955: PUSH
42956: LD_INT 1
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 1
42965: NEG
42966: PUSH
42967: LD_INT 0
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 1
42976: NEG
42977: PUSH
42978: LD_INT 1
42980: NEG
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 1
42988: NEG
42989: PUSH
42990: LD_INT 2
42992: NEG
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 1
43000: PUSH
43001: LD_INT 1
43003: NEG
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 2
43011: PUSH
43012: LD_INT 0
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: LD_INT 2
43021: PUSH
43022: LD_INT 1
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 2
43031: PUSH
43032: LD_INT 2
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 1
43041: PUSH
43042: LD_INT 2
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 1
43051: NEG
43052: PUSH
43053: LD_INT 1
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 2
43062: NEG
43063: PUSH
43064: LD_INT 0
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 2
43073: NEG
43074: PUSH
43075: LD_INT 1
43077: NEG
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 2
43085: NEG
43086: PUSH
43087: LD_INT 2
43089: NEG
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 2
43097: NEG
43098: PUSH
43099: LD_INT 3
43101: NEG
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 2
43109: PUSH
43110: LD_INT 1
43112: NEG
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 3
43120: PUSH
43121: LD_INT 0
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 3
43130: PUSH
43131: LD_INT 1
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 3
43140: PUSH
43141: LD_INT 2
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 3
43150: PUSH
43151: LD_INT 3
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 2
43160: PUSH
43161: LD_INT 3
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 2
43170: NEG
43171: PUSH
43172: LD_INT 1
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 3
43181: NEG
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 3
43192: NEG
43193: PUSH
43194: LD_INT 1
43196: NEG
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 3
43204: NEG
43205: PUSH
43206: LD_INT 2
43208: NEG
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 3
43216: NEG
43217: PUSH
43218: LD_INT 3
43220: NEG
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43257: LD_ADDR_VAR 0 45
43261: PUSH
43262: LD_INT 0
43264: PUSH
43265: LD_INT 0
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 0
43274: PUSH
43275: LD_INT 1
43277: NEG
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 1
43285: PUSH
43286: LD_INT 0
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 1
43295: PUSH
43296: LD_INT 1
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 0
43305: PUSH
43306: LD_INT 1
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 1
43315: NEG
43316: PUSH
43317: LD_INT 0
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 1
43326: NEG
43327: PUSH
43328: LD_INT 1
43330: NEG
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 1
43338: NEG
43339: PUSH
43340: LD_INT 2
43342: NEG
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 0
43350: PUSH
43351: LD_INT 2
43353: NEG
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 1
43361: PUSH
43362: LD_INT 1
43364: NEG
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 2
43372: PUSH
43373: LD_INT 1
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 2
43382: PUSH
43383: LD_INT 2
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 1
43392: PUSH
43393: LD_INT 2
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 0
43402: PUSH
43403: LD_INT 2
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 1
43412: NEG
43413: PUSH
43414: LD_INT 1
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 2
43423: NEG
43424: PUSH
43425: LD_INT 1
43427: NEG
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 2
43435: NEG
43436: PUSH
43437: LD_INT 2
43439: NEG
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 2
43447: NEG
43448: PUSH
43449: LD_INT 3
43451: NEG
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 1
43459: NEG
43460: PUSH
43461: LD_INT 3
43463: NEG
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 0
43471: PUSH
43472: LD_INT 3
43474: NEG
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 1
43482: PUSH
43483: LD_INT 2
43485: NEG
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 3
43493: PUSH
43494: LD_INT 2
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 3
43503: PUSH
43504: LD_INT 3
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 2
43513: PUSH
43514: LD_INT 3
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 1
43523: PUSH
43524: LD_INT 3
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 0
43533: PUSH
43534: LD_INT 3
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 1
43543: NEG
43544: PUSH
43545: LD_INT 2
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 3
43554: NEG
43555: PUSH
43556: LD_INT 2
43558: NEG
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 3
43566: NEG
43567: PUSH
43568: LD_INT 3
43570: NEG
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43607: LD_ADDR_VAR 0 46
43611: PUSH
43612: LD_INT 0
43614: PUSH
43615: LD_INT 0
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 0
43624: PUSH
43625: LD_INT 1
43627: NEG
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 1
43635: PUSH
43636: LD_INT 0
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 1
43645: PUSH
43646: LD_INT 1
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 0
43655: PUSH
43656: LD_INT 1
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 1
43665: NEG
43666: PUSH
43667: LD_INT 0
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: LD_INT 1
43676: NEG
43677: PUSH
43678: LD_INT 1
43680: NEG
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 1
43688: NEG
43689: PUSH
43690: LD_INT 2
43692: NEG
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 0
43700: PUSH
43701: LD_INT 2
43703: NEG
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 1
43711: PUSH
43712: LD_INT 1
43714: NEG
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 2
43722: PUSH
43723: LD_INT 0
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 2
43732: PUSH
43733: LD_INT 1
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 1
43742: PUSH
43743: LD_INT 2
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 0
43752: PUSH
43753: LD_INT 2
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 1
43762: NEG
43763: PUSH
43764: LD_INT 1
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 2
43773: NEG
43774: PUSH
43775: LD_INT 0
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 2
43784: NEG
43785: PUSH
43786: LD_INT 1
43788: NEG
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 1
43796: NEG
43797: PUSH
43798: LD_INT 3
43800: NEG
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 0
43808: PUSH
43809: LD_INT 3
43811: NEG
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 1
43819: PUSH
43820: LD_INT 2
43822: NEG
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 2
43830: PUSH
43831: LD_INT 1
43833: NEG
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 3
43841: PUSH
43842: LD_INT 0
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 3
43851: PUSH
43852: LD_INT 1
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 1
43861: PUSH
43862: LD_INT 3
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 0
43871: PUSH
43872: LD_INT 3
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 1
43881: NEG
43882: PUSH
43883: LD_INT 2
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 2
43892: NEG
43893: PUSH
43894: LD_INT 1
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 3
43903: NEG
43904: PUSH
43905: LD_INT 0
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 3
43914: NEG
43915: PUSH
43916: LD_INT 1
43918: NEG
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43955: LD_ADDR_VAR 0 47
43959: PUSH
43960: LD_INT 0
43962: PUSH
43963: LD_INT 0
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 0
43972: PUSH
43973: LD_INT 1
43975: NEG
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 1
43983: PUSH
43984: LD_INT 0
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 1
43993: PUSH
43994: LD_INT 1
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 0
44003: PUSH
44004: LD_INT 1
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 1
44013: NEG
44014: PUSH
44015: LD_INT 0
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 1
44024: NEG
44025: PUSH
44026: LD_INT 1
44028: NEG
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 1
44036: NEG
44037: PUSH
44038: LD_INT 2
44040: NEG
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 0
44048: PUSH
44049: LD_INT 2
44051: NEG
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 1
44059: PUSH
44060: LD_INT 1
44062: NEG
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 2
44070: NEG
44071: PUSH
44072: LD_INT 1
44074: NEG
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 2
44082: NEG
44083: PUSH
44084: LD_INT 2
44086: NEG
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44106: LD_ADDR_VAR 0 48
44110: PUSH
44111: LD_INT 0
44113: PUSH
44114: LD_INT 0
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 0
44123: PUSH
44124: LD_INT 1
44126: NEG
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 1
44134: PUSH
44135: LD_INT 0
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 1
44144: PUSH
44145: LD_INT 1
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 0
44154: PUSH
44155: LD_INT 1
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 1
44164: NEG
44165: PUSH
44166: LD_INT 0
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 1
44175: NEG
44176: PUSH
44177: LD_INT 1
44179: NEG
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 1
44187: NEG
44188: PUSH
44189: LD_INT 2
44191: NEG
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 0
44199: PUSH
44200: LD_INT 2
44202: NEG
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 1
44210: PUSH
44211: LD_INT 1
44213: NEG
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 2
44221: PUSH
44222: LD_INT 0
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 2
44231: PUSH
44232: LD_INT 1
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44253: LD_ADDR_VAR 0 49
44257: PUSH
44258: LD_INT 0
44260: PUSH
44261: LD_INT 0
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 0
44270: PUSH
44271: LD_INT 1
44273: NEG
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 1
44281: PUSH
44282: LD_INT 0
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 1
44291: PUSH
44292: LD_INT 1
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 0
44301: PUSH
44302: LD_INT 1
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 1
44311: NEG
44312: PUSH
44313: LD_INT 0
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 1
44322: NEG
44323: PUSH
44324: LD_INT 1
44326: NEG
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 1
44334: PUSH
44335: LD_INT 1
44337: NEG
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 2
44345: PUSH
44346: LD_INT 0
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 2
44355: PUSH
44356: LD_INT 1
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 2
44365: PUSH
44366: LD_INT 2
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 1
44375: PUSH
44376: LD_INT 2
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44397: LD_ADDR_VAR 0 50
44401: PUSH
44402: LD_INT 0
44404: PUSH
44405: LD_INT 0
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 0
44414: PUSH
44415: LD_INT 1
44417: NEG
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 1
44425: PUSH
44426: LD_INT 0
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 1
44435: PUSH
44436: LD_INT 1
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 0
44445: PUSH
44446: LD_INT 1
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 1
44455: NEG
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 1
44466: NEG
44467: PUSH
44468: LD_INT 1
44470: NEG
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 2
44478: PUSH
44479: LD_INT 1
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 2
44488: PUSH
44489: LD_INT 2
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 1
44498: PUSH
44499: LD_INT 2
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 0
44508: PUSH
44509: LD_INT 2
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 1
44518: NEG
44519: PUSH
44520: LD_INT 1
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44541: LD_ADDR_VAR 0 51
44545: PUSH
44546: LD_INT 0
44548: PUSH
44549: LD_INT 0
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 0
44558: PUSH
44559: LD_INT 1
44561: NEG
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 1
44569: PUSH
44570: LD_INT 0
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 1
44579: PUSH
44580: LD_INT 1
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 0
44589: PUSH
44590: LD_INT 1
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 1
44599: NEG
44600: PUSH
44601: LD_INT 0
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 1
44610: NEG
44611: PUSH
44612: LD_INT 1
44614: NEG
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 1
44622: PUSH
44623: LD_INT 2
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 0
44632: PUSH
44633: LD_INT 2
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 1
44642: NEG
44643: PUSH
44644: LD_INT 1
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 2
44653: NEG
44654: PUSH
44655: LD_INT 0
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 2
44664: NEG
44665: PUSH
44666: LD_INT 1
44668: NEG
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44688: LD_ADDR_VAR 0 52
44692: PUSH
44693: LD_INT 0
44695: PUSH
44696: LD_INT 0
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 0
44705: PUSH
44706: LD_INT 1
44708: NEG
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 1
44716: PUSH
44717: LD_INT 0
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 1
44726: PUSH
44727: LD_INT 1
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 0
44736: PUSH
44737: LD_INT 1
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 1
44746: NEG
44747: PUSH
44748: LD_INT 0
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 1
44757: NEG
44758: PUSH
44759: LD_INT 1
44761: NEG
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 1
44769: NEG
44770: PUSH
44771: LD_INT 2
44773: NEG
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 1
44781: NEG
44782: PUSH
44783: LD_INT 1
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 2
44792: NEG
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 2
44803: NEG
44804: PUSH
44805: LD_INT 1
44807: NEG
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 2
44815: NEG
44816: PUSH
44817: LD_INT 2
44819: NEG
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44839: LD_ADDR_VAR 0 53
44843: PUSH
44844: LD_INT 0
44846: PUSH
44847: LD_INT 0
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 0
44856: PUSH
44857: LD_INT 1
44859: NEG
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 1
44867: PUSH
44868: LD_INT 0
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 1
44877: PUSH
44878: LD_INT 1
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 0
44887: PUSH
44888: LD_INT 1
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 1
44897: NEG
44898: PUSH
44899: LD_INT 0
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 1
44908: NEG
44909: PUSH
44910: LD_INT 1
44912: NEG
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 1
44920: NEG
44921: PUSH
44922: LD_INT 2
44924: NEG
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 0
44932: PUSH
44933: LD_INT 2
44935: NEG
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 1
44943: PUSH
44944: LD_INT 1
44946: NEG
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 2
44954: PUSH
44955: LD_INT 0
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 2
44964: PUSH
44965: LD_INT 1
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 2
44974: PUSH
44975: LD_INT 2
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 1
44984: PUSH
44985: LD_INT 2
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 0
44994: PUSH
44995: LD_INT 2
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 1
45004: NEG
45005: PUSH
45006: LD_INT 1
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 2
45015: NEG
45016: PUSH
45017: LD_INT 0
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 2
45026: NEG
45027: PUSH
45028: LD_INT 1
45030: NEG
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 2
45038: NEG
45039: PUSH
45040: LD_INT 2
45042: NEG
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45069: LD_ADDR_VAR 0 54
45073: PUSH
45074: LD_INT 0
45076: PUSH
45077: LD_INT 0
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 0
45086: PUSH
45087: LD_INT 1
45089: NEG
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 1
45097: PUSH
45098: LD_INT 0
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 1
45107: PUSH
45108: LD_INT 1
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 0
45117: PUSH
45118: LD_INT 1
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 1
45127: NEG
45128: PUSH
45129: LD_INT 0
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 1
45138: NEG
45139: PUSH
45140: LD_INT 1
45142: NEG
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 1
45150: NEG
45151: PUSH
45152: LD_INT 2
45154: NEG
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 0
45162: PUSH
45163: LD_INT 2
45165: NEG
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 1
45173: PUSH
45174: LD_INT 1
45176: NEG
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 2
45184: PUSH
45185: LD_INT 0
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 2
45194: PUSH
45195: LD_INT 1
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 2
45204: PUSH
45205: LD_INT 2
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 1
45214: PUSH
45215: LD_INT 2
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 0
45224: PUSH
45225: LD_INT 2
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 1
45234: NEG
45235: PUSH
45236: LD_INT 1
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 2
45245: NEG
45246: PUSH
45247: LD_INT 0
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 2
45256: NEG
45257: PUSH
45258: LD_INT 1
45260: NEG
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 2
45268: NEG
45269: PUSH
45270: LD_INT 2
45272: NEG
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45299: LD_ADDR_VAR 0 55
45303: PUSH
45304: LD_INT 0
45306: PUSH
45307: LD_INT 0
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 0
45316: PUSH
45317: LD_INT 1
45319: NEG
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 1
45327: PUSH
45328: LD_INT 0
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 1
45337: PUSH
45338: LD_INT 1
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 0
45347: PUSH
45348: LD_INT 1
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 1
45357: NEG
45358: PUSH
45359: LD_INT 0
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 1
45368: NEG
45369: PUSH
45370: LD_INT 1
45372: NEG
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 1
45380: NEG
45381: PUSH
45382: LD_INT 2
45384: NEG
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 0
45392: PUSH
45393: LD_INT 2
45395: NEG
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 1
45403: PUSH
45404: LD_INT 1
45406: NEG
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 2
45414: PUSH
45415: LD_INT 0
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 2
45424: PUSH
45425: LD_INT 1
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 2
45434: PUSH
45435: LD_INT 2
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 1
45444: PUSH
45445: LD_INT 2
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: LD_INT 2
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 1
45464: NEG
45465: PUSH
45466: LD_INT 1
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 2
45475: NEG
45476: PUSH
45477: LD_INT 0
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 2
45486: NEG
45487: PUSH
45488: LD_INT 1
45490: NEG
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 2
45498: NEG
45499: PUSH
45500: LD_INT 2
45502: NEG
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45529: LD_ADDR_VAR 0 56
45533: PUSH
45534: LD_INT 0
45536: PUSH
45537: LD_INT 0
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 0
45546: PUSH
45547: LD_INT 1
45549: NEG
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 1
45557: PUSH
45558: LD_INT 0
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 1
45567: PUSH
45568: LD_INT 1
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 0
45577: PUSH
45578: LD_INT 1
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 1
45587: NEG
45588: PUSH
45589: LD_INT 0
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 1
45598: NEG
45599: PUSH
45600: LD_INT 1
45602: NEG
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 1
45610: NEG
45611: PUSH
45612: LD_INT 2
45614: NEG
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 0
45622: PUSH
45623: LD_INT 2
45625: NEG
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 1
45633: PUSH
45634: LD_INT 1
45636: NEG
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 2
45644: PUSH
45645: LD_INT 0
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 2
45654: PUSH
45655: LD_INT 1
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 2
45664: PUSH
45665: LD_INT 2
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 1
45674: PUSH
45675: LD_INT 2
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 0
45684: PUSH
45685: LD_INT 2
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 1
45694: NEG
45695: PUSH
45696: LD_INT 1
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 2
45705: NEG
45706: PUSH
45707: LD_INT 0
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 2
45716: NEG
45717: PUSH
45718: LD_INT 1
45720: NEG
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 2
45728: NEG
45729: PUSH
45730: LD_INT 2
45732: NEG
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45759: LD_ADDR_VAR 0 57
45763: PUSH
45764: LD_INT 0
45766: PUSH
45767: LD_INT 0
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 0
45776: PUSH
45777: LD_INT 1
45779: NEG
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 1
45787: PUSH
45788: LD_INT 0
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 1
45797: PUSH
45798: LD_INT 1
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 0
45807: PUSH
45808: LD_INT 1
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 1
45817: NEG
45818: PUSH
45819: LD_INT 0
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 1
45828: NEG
45829: PUSH
45830: LD_INT 1
45832: NEG
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 1
45840: NEG
45841: PUSH
45842: LD_INT 2
45844: NEG
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 0
45852: PUSH
45853: LD_INT 2
45855: NEG
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 1
45863: PUSH
45864: LD_INT 1
45866: NEG
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 2
45874: PUSH
45875: LD_INT 0
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 2
45884: PUSH
45885: LD_INT 1
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 2
45894: PUSH
45895: LD_INT 2
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 1
45904: PUSH
45905: LD_INT 2
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 0
45914: PUSH
45915: LD_INT 2
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 1
45924: NEG
45925: PUSH
45926: LD_INT 1
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 2
45935: NEG
45936: PUSH
45937: LD_INT 0
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 2
45946: NEG
45947: PUSH
45948: LD_INT 1
45950: NEG
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 2
45958: NEG
45959: PUSH
45960: LD_INT 2
45962: NEG
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45989: LD_ADDR_VAR 0 58
45993: PUSH
45994: LD_INT 0
45996: PUSH
45997: LD_INT 0
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 0
46006: PUSH
46007: LD_INT 1
46009: NEG
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 1
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 1
46027: PUSH
46028: LD_INT 1
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 0
46037: PUSH
46038: LD_INT 1
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 1
46047: NEG
46048: PUSH
46049: LD_INT 0
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 1
46058: NEG
46059: PUSH
46060: LD_INT 1
46062: NEG
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: LD_INT 2
46074: NEG
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 0
46082: PUSH
46083: LD_INT 2
46085: NEG
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 1
46093: PUSH
46094: LD_INT 1
46096: NEG
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 2
46104: PUSH
46105: LD_INT 0
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 2
46114: PUSH
46115: LD_INT 1
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 2
46124: PUSH
46125: LD_INT 2
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 1
46134: PUSH
46135: LD_INT 2
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: LD_INT 2
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: LD_INT 1
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 2
46165: NEG
46166: PUSH
46167: LD_INT 0
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 2
46176: NEG
46177: PUSH
46178: LD_INT 1
46180: NEG
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 2
46188: NEG
46189: PUSH
46190: LD_INT 2
46192: NEG
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46219: LD_ADDR_VAR 0 59
46223: PUSH
46224: LD_INT 0
46226: PUSH
46227: LD_INT 0
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 0
46236: PUSH
46237: LD_INT 1
46239: NEG
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 1
46247: PUSH
46248: LD_INT 0
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 1
46257: PUSH
46258: LD_INT 1
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 0
46267: PUSH
46268: LD_INT 1
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 1
46277: NEG
46278: PUSH
46279: LD_INT 0
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 1
46288: NEG
46289: PUSH
46290: LD_INT 1
46292: NEG
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46307: LD_ADDR_VAR 0 60
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: LD_INT 0
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 0
46324: PUSH
46325: LD_INT 1
46327: NEG
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 1
46335: PUSH
46336: LD_INT 0
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 1
46345: PUSH
46346: LD_INT 1
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 0
46355: PUSH
46356: LD_INT 1
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 1
46365: NEG
46366: PUSH
46367: LD_INT 0
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 1
46376: NEG
46377: PUSH
46378: LD_INT 1
46380: NEG
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46395: LD_ADDR_VAR 0 61
46399: PUSH
46400: LD_INT 0
46402: PUSH
46403: LD_INT 0
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 0
46412: PUSH
46413: LD_INT 1
46415: NEG
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 1
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 1
46433: PUSH
46434: LD_INT 1
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 0
46443: PUSH
46444: LD_INT 1
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 1
46453: NEG
46454: PUSH
46455: LD_INT 0
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 1
46464: NEG
46465: PUSH
46466: LD_INT 1
46468: NEG
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46483: LD_ADDR_VAR 0 62
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: LD_INT 0
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 0
46500: PUSH
46501: LD_INT 1
46503: NEG
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 1
46511: PUSH
46512: LD_INT 0
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 1
46521: PUSH
46522: LD_INT 1
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 0
46531: PUSH
46532: LD_INT 1
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 1
46541: NEG
46542: PUSH
46543: LD_INT 0
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 1
46552: NEG
46553: PUSH
46554: LD_INT 1
46556: NEG
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46571: LD_ADDR_VAR 0 63
46575: PUSH
46576: LD_INT 0
46578: PUSH
46579: LD_INT 0
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 0
46588: PUSH
46589: LD_INT 1
46591: NEG
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 1
46599: PUSH
46600: LD_INT 0
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 1
46609: PUSH
46610: LD_INT 1
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 0
46619: PUSH
46620: LD_INT 1
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 1
46629: NEG
46630: PUSH
46631: LD_INT 0
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 1
46640: NEG
46641: PUSH
46642: LD_INT 1
46644: NEG
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46659: LD_ADDR_VAR 0 64
46663: PUSH
46664: LD_INT 0
46666: PUSH
46667: LD_INT 0
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 0
46676: PUSH
46677: LD_INT 1
46679: NEG
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 1
46687: PUSH
46688: LD_INT 0
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 1
46697: PUSH
46698: LD_INT 1
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 0
46707: PUSH
46708: LD_INT 1
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 1
46717: NEG
46718: PUSH
46719: LD_INT 0
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 1
46728: NEG
46729: PUSH
46730: LD_INT 1
46732: NEG
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: ST_TO_ADDR
// end ; 1 :
46747: GO 52644
46749: LD_INT 1
46751: DOUBLE
46752: EQUAL
46753: IFTRUE 46757
46755: GO 49380
46757: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46758: LD_ADDR_VAR 0 11
46762: PUSH
46763: LD_INT 1
46765: NEG
46766: PUSH
46767: LD_INT 3
46769: NEG
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 0
46777: PUSH
46778: LD_INT 3
46780: NEG
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 1
46788: PUSH
46789: LD_INT 2
46791: NEG
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: LIST
46801: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46802: LD_ADDR_VAR 0 12
46806: PUSH
46807: LD_INT 2
46809: PUSH
46810: LD_INT 1
46812: NEG
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 3
46820: PUSH
46821: LD_INT 0
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 3
46830: PUSH
46831: LD_INT 1
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: LIST
46842: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46843: LD_ADDR_VAR 0 13
46847: PUSH
46848: LD_INT 3
46850: PUSH
46851: LD_INT 2
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 3
46860: PUSH
46861: LD_INT 3
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 2
46870: PUSH
46871: LD_INT 3
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: LIST
46882: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46883: LD_ADDR_VAR 0 14
46887: PUSH
46888: LD_INT 1
46890: PUSH
46891: LD_INT 3
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 0
46900: PUSH
46901: LD_INT 3
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 1
46910: NEG
46911: PUSH
46912: LD_INT 2
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: LIST
46923: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46924: LD_ADDR_VAR 0 15
46928: PUSH
46929: LD_INT 2
46931: NEG
46932: PUSH
46933: LD_INT 1
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 3
46942: NEG
46943: PUSH
46944: LD_INT 0
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 3
46953: NEG
46954: PUSH
46955: LD_INT 1
46957: NEG
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: LIST
46967: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46968: LD_ADDR_VAR 0 16
46972: PUSH
46973: LD_INT 2
46975: NEG
46976: PUSH
46977: LD_INT 3
46979: NEG
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 3
46987: NEG
46988: PUSH
46989: LD_INT 2
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 3
46999: NEG
47000: PUSH
47001: LD_INT 3
47003: NEG
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: LIST
47013: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47014: LD_ADDR_VAR 0 17
47018: PUSH
47019: LD_INT 1
47021: NEG
47022: PUSH
47023: LD_INT 3
47025: NEG
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 0
47033: PUSH
47034: LD_INT 3
47036: NEG
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 1
47044: PUSH
47045: LD_INT 2
47047: NEG
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: LIST
47057: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47058: LD_ADDR_VAR 0 18
47062: PUSH
47063: LD_INT 2
47065: PUSH
47066: LD_INT 1
47068: NEG
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 3
47076: PUSH
47077: LD_INT 0
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 3
47086: PUSH
47087: LD_INT 1
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: LIST
47098: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47099: LD_ADDR_VAR 0 19
47103: PUSH
47104: LD_INT 3
47106: PUSH
47107: LD_INT 2
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 3
47116: PUSH
47117: LD_INT 3
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 2
47126: PUSH
47127: LD_INT 3
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: LIST
47138: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47139: LD_ADDR_VAR 0 20
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: LD_INT 3
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 0
47156: PUSH
47157: LD_INT 3
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 1
47166: NEG
47167: PUSH
47168: LD_INT 2
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: LIST
47179: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47180: LD_ADDR_VAR 0 21
47184: PUSH
47185: LD_INT 2
47187: NEG
47188: PUSH
47189: LD_INT 1
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 3
47198: NEG
47199: PUSH
47200: LD_INT 0
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 3
47209: NEG
47210: PUSH
47211: LD_INT 1
47213: NEG
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: LIST
47223: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47224: LD_ADDR_VAR 0 22
47228: PUSH
47229: LD_INT 2
47231: NEG
47232: PUSH
47233: LD_INT 3
47235: NEG
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 3
47243: NEG
47244: PUSH
47245: LD_INT 2
47247: NEG
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 3
47255: NEG
47256: PUSH
47257: LD_INT 3
47259: NEG
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: LIST
47269: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47270: LD_ADDR_VAR 0 23
47274: PUSH
47275: LD_INT 0
47277: PUSH
47278: LD_INT 3
47280: NEG
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 1
47288: NEG
47289: PUSH
47290: LD_INT 4
47292: NEG
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 1
47300: PUSH
47301: LD_INT 3
47303: NEG
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: LIST
47313: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47314: LD_ADDR_VAR 0 24
47318: PUSH
47319: LD_INT 3
47321: PUSH
47322: LD_INT 0
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 3
47331: PUSH
47332: LD_INT 1
47334: NEG
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 4
47342: PUSH
47343: LD_INT 1
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: LIST
47354: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47355: LD_ADDR_VAR 0 25
47359: PUSH
47360: LD_INT 3
47362: PUSH
47363: LD_INT 3
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 4
47372: PUSH
47373: LD_INT 3
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 3
47382: PUSH
47383: LD_INT 4
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: LIST
47394: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47395: LD_ADDR_VAR 0 26
47399: PUSH
47400: LD_INT 0
47402: PUSH
47403: LD_INT 3
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 1
47412: PUSH
47413: LD_INT 4
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 1
47422: NEG
47423: PUSH
47424: LD_INT 3
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: LIST
47435: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47436: LD_ADDR_VAR 0 27
47440: PUSH
47441: LD_INT 3
47443: NEG
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 3
47454: NEG
47455: PUSH
47456: LD_INT 1
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 4
47465: NEG
47466: PUSH
47467: LD_INT 1
47469: NEG
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: LIST
47479: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47480: LD_ADDR_VAR 0 28
47484: PUSH
47485: LD_INT 3
47487: NEG
47488: PUSH
47489: LD_INT 3
47491: NEG
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 3
47499: NEG
47500: PUSH
47501: LD_INT 4
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 4
47511: NEG
47512: PUSH
47513: LD_INT 3
47515: NEG
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: LIST
47525: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47526: LD_ADDR_VAR 0 29
47530: PUSH
47531: LD_INT 1
47533: NEG
47534: PUSH
47535: LD_INT 3
47537: NEG
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: LD_INT 3
47548: NEG
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: PUSH
47557: LD_INT 2
47559: NEG
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: LD_INT 4
47571: NEG
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: LD_INT 4
47582: NEG
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 1
47590: PUSH
47591: LD_INT 3
47593: NEG
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 1
47601: NEG
47602: PUSH
47603: LD_INT 5
47605: NEG
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 0
47613: PUSH
47614: LD_INT 5
47616: NEG
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 1
47624: PUSH
47625: LD_INT 4
47627: NEG
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 1
47635: NEG
47636: PUSH
47637: LD_INT 6
47639: NEG
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: LD_INT 6
47650: NEG
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 1
47658: PUSH
47659: LD_INT 5
47661: NEG
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47681: LD_ADDR_VAR 0 30
47685: PUSH
47686: LD_INT 2
47688: PUSH
47689: LD_INT 1
47691: NEG
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 3
47699: PUSH
47700: LD_INT 0
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 3
47709: PUSH
47710: LD_INT 1
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 3
47719: PUSH
47720: LD_INT 1
47722: NEG
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 4
47730: PUSH
47731: LD_INT 0
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 4
47740: PUSH
47741: LD_INT 1
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 4
47750: PUSH
47751: LD_INT 1
47753: NEG
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 5
47761: PUSH
47762: LD_INT 0
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 5
47771: PUSH
47772: LD_INT 1
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 5
47781: PUSH
47782: LD_INT 1
47784: NEG
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 6
47792: PUSH
47793: LD_INT 0
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 6
47802: PUSH
47803: LD_INT 1
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47824: LD_ADDR_VAR 0 31
47828: PUSH
47829: LD_INT 3
47831: PUSH
47832: LD_INT 2
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 3
47841: PUSH
47842: LD_INT 3
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 2
47851: PUSH
47852: LD_INT 3
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 4
47861: PUSH
47862: LD_INT 3
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 4
47871: PUSH
47872: LD_INT 4
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 3
47881: PUSH
47882: LD_INT 4
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 5
47891: PUSH
47892: LD_INT 4
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 5
47901: PUSH
47902: LD_INT 5
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 4
47911: PUSH
47912: LD_INT 5
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 6
47921: PUSH
47922: LD_INT 5
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 6
47931: PUSH
47932: LD_INT 6
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 5
47941: PUSH
47942: LD_INT 6
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47963: LD_ADDR_VAR 0 32
47967: PUSH
47968: LD_INT 1
47970: PUSH
47971: LD_INT 3
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 0
47980: PUSH
47981: LD_INT 3
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 1
47990: NEG
47991: PUSH
47992: LD_INT 2
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 1
48001: PUSH
48002: LD_INT 4
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 0
48011: PUSH
48012: LD_INT 4
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 1
48021: NEG
48022: PUSH
48023: LD_INT 3
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 1
48032: PUSH
48033: LD_INT 5
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 0
48042: PUSH
48043: LD_INT 5
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 1
48052: NEG
48053: PUSH
48054: LD_INT 4
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 1
48063: PUSH
48064: LD_INT 6
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 0
48073: PUSH
48074: LD_INT 6
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 1
48083: NEG
48084: PUSH
48085: LD_INT 5
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48106: LD_ADDR_VAR 0 33
48110: PUSH
48111: LD_INT 2
48113: NEG
48114: PUSH
48115: LD_INT 1
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 3
48124: NEG
48125: PUSH
48126: LD_INT 0
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 3
48135: NEG
48136: PUSH
48137: LD_INT 1
48139: NEG
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 3
48147: NEG
48148: PUSH
48149: LD_INT 1
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 4
48158: NEG
48159: PUSH
48160: LD_INT 0
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 4
48169: NEG
48170: PUSH
48171: LD_INT 1
48173: NEG
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 4
48181: NEG
48182: PUSH
48183: LD_INT 1
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 5
48192: NEG
48193: PUSH
48194: LD_INT 0
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 5
48203: NEG
48204: PUSH
48205: LD_INT 1
48207: NEG
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 5
48215: NEG
48216: PUSH
48217: LD_INT 1
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 6
48226: NEG
48227: PUSH
48228: LD_INT 0
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 6
48237: NEG
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48261: LD_ADDR_VAR 0 34
48265: PUSH
48266: LD_INT 2
48268: NEG
48269: PUSH
48270: LD_INT 3
48272: NEG
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 3
48280: NEG
48281: PUSH
48282: LD_INT 2
48284: NEG
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 3
48292: NEG
48293: PUSH
48294: LD_INT 3
48296: NEG
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 3
48304: NEG
48305: PUSH
48306: LD_INT 4
48308: NEG
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 4
48316: NEG
48317: PUSH
48318: LD_INT 3
48320: NEG
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 4
48328: NEG
48329: PUSH
48330: LD_INT 4
48332: NEG
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 4
48340: NEG
48341: PUSH
48342: LD_INT 5
48344: NEG
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 5
48352: NEG
48353: PUSH
48354: LD_INT 4
48356: NEG
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 5
48364: NEG
48365: PUSH
48366: LD_INT 5
48368: NEG
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 5
48376: NEG
48377: PUSH
48378: LD_INT 6
48380: NEG
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 6
48388: NEG
48389: PUSH
48390: LD_INT 5
48392: NEG
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 6
48400: NEG
48401: PUSH
48402: LD_INT 6
48404: NEG
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48424: LD_ADDR_VAR 0 41
48428: PUSH
48429: LD_INT 0
48431: PUSH
48432: LD_INT 2
48434: NEG
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 1
48442: NEG
48443: PUSH
48444: LD_INT 3
48446: NEG
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 1
48454: PUSH
48455: LD_INT 2
48457: NEG
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: LIST
48467: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48468: LD_ADDR_VAR 0 42
48472: PUSH
48473: LD_INT 2
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 2
48485: PUSH
48486: LD_INT 1
48488: NEG
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 3
48496: PUSH
48497: LD_INT 1
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: LIST
48508: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48509: LD_ADDR_VAR 0 43
48513: PUSH
48514: LD_INT 2
48516: PUSH
48517: LD_INT 2
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 3
48526: PUSH
48527: LD_INT 2
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 2
48536: PUSH
48537: LD_INT 3
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: LIST
48548: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48549: LD_ADDR_VAR 0 44
48553: PUSH
48554: LD_INT 0
48556: PUSH
48557: LD_INT 2
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 1
48566: PUSH
48567: LD_INT 3
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 1
48576: NEG
48577: PUSH
48578: LD_INT 2
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: LIST
48589: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48590: LD_ADDR_VAR 0 45
48594: PUSH
48595: LD_INT 2
48597: NEG
48598: PUSH
48599: LD_INT 0
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 2
48608: NEG
48609: PUSH
48610: LD_INT 1
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 3
48619: NEG
48620: PUSH
48621: LD_INT 1
48623: NEG
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: LIST
48633: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48634: LD_ADDR_VAR 0 46
48638: PUSH
48639: LD_INT 2
48641: NEG
48642: PUSH
48643: LD_INT 2
48645: NEG
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 2
48653: NEG
48654: PUSH
48655: LD_INT 3
48657: NEG
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 3
48665: NEG
48666: PUSH
48667: LD_INT 2
48669: NEG
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: LIST
48679: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48680: LD_ADDR_VAR 0 47
48684: PUSH
48685: LD_INT 2
48687: NEG
48688: PUSH
48689: LD_INT 3
48691: NEG
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 1
48699: NEG
48700: PUSH
48701: LD_INT 3
48703: NEG
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48713: LD_ADDR_VAR 0 48
48717: PUSH
48718: LD_INT 1
48720: PUSH
48721: LD_INT 2
48723: NEG
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 2
48731: PUSH
48732: LD_INT 1
48734: NEG
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48744: LD_ADDR_VAR 0 49
48748: PUSH
48749: LD_INT 3
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 3
48761: PUSH
48762: LD_INT 2
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48773: LD_ADDR_VAR 0 50
48777: PUSH
48778: LD_INT 2
48780: PUSH
48781: LD_INT 3
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 1
48790: PUSH
48791: LD_INT 3
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48802: LD_ADDR_VAR 0 51
48806: PUSH
48807: LD_INT 1
48809: NEG
48810: PUSH
48811: LD_INT 2
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 2
48820: NEG
48821: PUSH
48822: LD_INT 1
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48833: LD_ADDR_VAR 0 52
48837: PUSH
48838: LD_INT 3
48840: NEG
48841: PUSH
48842: LD_INT 1
48844: NEG
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 3
48852: NEG
48853: PUSH
48854: LD_INT 2
48856: NEG
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48866: LD_ADDR_VAR 0 53
48870: PUSH
48871: LD_INT 1
48873: NEG
48874: PUSH
48875: LD_INT 3
48877: NEG
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: LD_INT 3
48888: NEG
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 1
48896: PUSH
48897: LD_INT 2
48899: NEG
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: LIST
48909: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48910: LD_ADDR_VAR 0 54
48914: PUSH
48915: LD_INT 2
48917: PUSH
48918: LD_INT 1
48920: NEG
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 3
48928: PUSH
48929: LD_INT 0
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 3
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: LIST
48950: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48951: LD_ADDR_VAR 0 55
48955: PUSH
48956: LD_INT 3
48958: PUSH
48959: LD_INT 2
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 3
48968: PUSH
48969: LD_INT 3
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 2
48978: PUSH
48979: LD_INT 3
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: LIST
48990: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48991: LD_ADDR_VAR 0 56
48995: PUSH
48996: LD_INT 1
48998: PUSH
48999: LD_INT 3
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 0
49008: PUSH
49009: LD_INT 3
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 1
49018: NEG
49019: PUSH
49020: LD_INT 2
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: LIST
49031: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49032: LD_ADDR_VAR 0 57
49036: PUSH
49037: LD_INT 2
49039: NEG
49040: PUSH
49041: LD_INT 1
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 3
49050: NEG
49051: PUSH
49052: LD_INT 0
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 3
49061: NEG
49062: PUSH
49063: LD_INT 1
49065: NEG
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: LIST
49075: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49076: LD_ADDR_VAR 0 58
49080: PUSH
49081: LD_INT 2
49083: NEG
49084: PUSH
49085: LD_INT 3
49087: NEG
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 3
49095: NEG
49096: PUSH
49097: LD_INT 2
49099: NEG
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 3
49107: NEG
49108: PUSH
49109: LD_INT 3
49111: NEG
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: LIST
49121: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49122: LD_ADDR_VAR 0 59
49126: PUSH
49127: LD_INT 1
49129: NEG
49130: PUSH
49131: LD_INT 2
49133: NEG
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 0
49141: PUSH
49142: LD_INT 2
49144: NEG
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 1
49152: PUSH
49153: LD_INT 1
49155: NEG
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: LIST
49165: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49166: LD_ADDR_VAR 0 60
49170: PUSH
49171: LD_INT 1
49173: PUSH
49174: LD_INT 1
49176: NEG
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 2
49184: PUSH
49185: LD_INT 0
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 2
49194: PUSH
49195: LD_INT 1
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: LIST
49206: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49207: LD_ADDR_VAR 0 61
49211: PUSH
49212: LD_INT 2
49214: PUSH
49215: LD_INT 1
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 2
49224: PUSH
49225: LD_INT 2
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 1
49234: PUSH
49235: LD_INT 2
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: LIST
49246: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49247: LD_ADDR_VAR 0 62
49251: PUSH
49252: LD_INT 1
49254: PUSH
49255: LD_INT 2
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 0
49264: PUSH
49265: LD_INT 2
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 1
49274: NEG
49275: PUSH
49276: LD_INT 1
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: LIST
49287: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49288: LD_ADDR_VAR 0 63
49292: PUSH
49293: LD_INT 1
49295: NEG
49296: PUSH
49297: LD_INT 1
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 2
49306: NEG
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 2
49317: NEG
49318: PUSH
49319: LD_INT 1
49321: NEG
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: LIST
49331: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49332: LD_ADDR_VAR 0 64
49336: PUSH
49337: LD_INT 1
49339: NEG
49340: PUSH
49341: LD_INT 2
49343: NEG
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 2
49351: NEG
49352: PUSH
49353: LD_INT 1
49355: NEG
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 2
49363: NEG
49364: PUSH
49365: LD_INT 2
49367: NEG
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: LIST
49377: ST_TO_ADDR
// end ; 2 :
49378: GO 52644
49380: LD_INT 2
49382: DOUBLE
49383: EQUAL
49384: IFTRUE 49388
49386: GO 52643
49388: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49389: LD_ADDR_VAR 0 29
49393: PUSH
49394: LD_INT 4
49396: PUSH
49397: LD_INT 0
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 4
49406: PUSH
49407: LD_INT 1
49409: NEG
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 5
49417: PUSH
49418: LD_INT 0
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 5
49427: PUSH
49428: LD_INT 1
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 4
49437: PUSH
49438: LD_INT 1
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 3
49447: PUSH
49448: LD_INT 0
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 3
49457: PUSH
49458: LD_INT 1
49460: NEG
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 3
49468: PUSH
49469: LD_INT 2
49471: NEG
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 5
49479: PUSH
49480: LD_INT 2
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 3
49489: PUSH
49490: LD_INT 3
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 3
49499: PUSH
49500: LD_INT 2
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 4
49509: PUSH
49510: LD_INT 3
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 4
49519: PUSH
49520: LD_INT 4
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 3
49529: PUSH
49530: LD_INT 4
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 2
49539: PUSH
49540: LD_INT 3
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 2
49549: PUSH
49550: LD_INT 2
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 4
49559: PUSH
49560: LD_INT 2
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 2
49569: PUSH
49570: LD_INT 4
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 0
49579: PUSH
49580: LD_INT 4
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 0
49589: PUSH
49590: LD_INT 3
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 1
49599: PUSH
49600: LD_INT 4
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 1
49609: PUSH
49610: LD_INT 5
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 0
49619: PUSH
49620: LD_INT 5
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 1
49629: NEG
49630: PUSH
49631: LD_INT 4
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 1
49640: NEG
49641: PUSH
49642: LD_INT 3
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 2
49651: PUSH
49652: LD_INT 5
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 2
49661: NEG
49662: PUSH
49663: LD_INT 3
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 3
49672: NEG
49673: PUSH
49674: LD_INT 0
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 3
49683: NEG
49684: PUSH
49685: LD_INT 1
49687: NEG
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 2
49695: NEG
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 2
49706: NEG
49707: PUSH
49708: LD_INT 1
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 3
49717: NEG
49718: PUSH
49719: LD_INT 1
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 4
49728: NEG
49729: PUSH
49730: LD_INT 0
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 4
49739: NEG
49740: PUSH
49741: LD_INT 1
49743: NEG
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 4
49751: NEG
49752: PUSH
49753: LD_INT 2
49755: NEG
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 2
49763: NEG
49764: PUSH
49765: LD_INT 2
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 4
49774: NEG
49775: PUSH
49776: LD_INT 4
49778: NEG
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 4
49786: NEG
49787: PUSH
49788: LD_INT 5
49790: NEG
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 3
49798: NEG
49799: PUSH
49800: LD_INT 4
49802: NEG
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 3
49810: NEG
49811: PUSH
49812: LD_INT 3
49814: NEG
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 4
49822: NEG
49823: PUSH
49824: LD_INT 3
49826: NEG
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 5
49834: NEG
49835: PUSH
49836: LD_INT 4
49838: NEG
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 5
49846: NEG
49847: PUSH
49848: LD_INT 5
49850: NEG
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 3
49858: NEG
49859: PUSH
49860: LD_INT 5
49862: NEG
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 5
49870: NEG
49871: PUSH
49872: LD_INT 3
49874: NEG
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49927: LD_ADDR_VAR 0 30
49931: PUSH
49932: LD_INT 4
49934: PUSH
49935: LD_INT 4
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 4
49944: PUSH
49945: LD_INT 3
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 5
49954: PUSH
49955: LD_INT 4
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 5
49964: PUSH
49965: LD_INT 5
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 4
49974: PUSH
49975: LD_INT 5
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 3
49984: PUSH
49985: LD_INT 4
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 3
49994: PUSH
49995: LD_INT 3
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 5
50004: PUSH
50005: LD_INT 3
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 3
50014: PUSH
50015: LD_INT 5
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: LD_INT 3
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 0
50034: PUSH
50035: LD_INT 2
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 1
50044: PUSH
50045: LD_INT 3
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 1
50054: PUSH
50055: LD_INT 4
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 0
50064: PUSH
50065: LD_INT 4
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 1
50074: NEG
50075: PUSH
50076: LD_INT 3
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 1
50085: NEG
50086: PUSH
50087: LD_INT 2
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 2
50096: PUSH
50097: LD_INT 4
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 2
50106: NEG
50107: PUSH
50108: LD_INT 2
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 4
50117: NEG
50118: PUSH
50119: LD_INT 0
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 4
50128: NEG
50129: PUSH
50130: LD_INT 1
50132: NEG
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 3
50140: NEG
50141: PUSH
50142: LD_INT 0
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 3
50151: NEG
50152: PUSH
50153: LD_INT 1
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 4
50162: NEG
50163: PUSH
50164: LD_INT 1
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 5
50173: NEG
50174: PUSH
50175: LD_INT 0
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 5
50184: NEG
50185: PUSH
50186: LD_INT 1
50188: NEG
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 5
50196: NEG
50197: PUSH
50198: LD_INT 2
50200: NEG
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 3
50208: NEG
50209: PUSH
50210: LD_INT 2
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 3
50219: NEG
50220: PUSH
50221: LD_INT 3
50223: NEG
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 3
50231: NEG
50232: PUSH
50233: LD_INT 4
50235: NEG
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 2
50243: NEG
50244: PUSH
50245: LD_INT 3
50247: NEG
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 2
50255: NEG
50256: PUSH
50257: LD_INT 2
50259: NEG
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 3
50267: NEG
50268: PUSH
50269: LD_INT 2
50271: NEG
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 4
50279: NEG
50280: PUSH
50281: LD_INT 3
50283: NEG
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 4
50291: NEG
50292: PUSH
50293: LD_INT 4
50295: NEG
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 2
50303: NEG
50304: PUSH
50305: LD_INT 4
50307: NEG
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 4
50315: NEG
50316: PUSH
50317: LD_INT 2
50319: NEG
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 0
50327: PUSH
50328: LD_INT 4
50330: NEG
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 0
50338: PUSH
50339: LD_INT 5
50341: NEG
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 1
50349: PUSH
50350: LD_INT 4
50352: NEG
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 1
50360: PUSH
50361: LD_INT 3
50363: NEG
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 0
50371: PUSH
50372: LD_INT 3
50374: NEG
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 1
50382: NEG
50383: PUSH
50384: LD_INT 4
50386: NEG
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 1
50394: NEG
50395: PUSH
50396: LD_INT 5
50398: NEG
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 2
50406: PUSH
50407: LD_INT 3
50409: NEG
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 2
50417: NEG
50418: PUSH
50419: LD_INT 5
50421: NEG
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50474: LD_ADDR_VAR 0 31
50478: PUSH
50479: LD_INT 0
50481: PUSH
50482: LD_INT 4
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 0
50491: PUSH
50492: LD_INT 3
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 1
50501: PUSH
50502: LD_INT 4
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 1
50511: PUSH
50512: LD_INT 5
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 0
50521: PUSH
50522: LD_INT 5
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 1
50531: NEG
50532: PUSH
50533: LD_INT 4
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 1
50542: NEG
50543: PUSH
50544: LD_INT 3
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 2
50553: PUSH
50554: LD_INT 5
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 2
50563: NEG
50564: PUSH
50565: LD_INT 3
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 3
50574: NEG
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 3
50585: NEG
50586: PUSH
50587: LD_INT 1
50589: NEG
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 2
50597: NEG
50598: PUSH
50599: LD_INT 0
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 2
50608: NEG
50609: PUSH
50610: LD_INT 1
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 3
50619: NEG
50620: PUSH
50621: LD_INT 1
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 4
50630: NEG
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 4
50641: NEG
50642: PUSH
50643: LD_INT 1
50645: NEG
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 4
50653: NEG
50654: PUSH
50655: LD_INT 2
50657: NEG
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 2
50665: NEG
50666: PUSH
50667: LD_INT 2
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 4
50676: NEG
50677: PUSH
50678: LD_INT 4
50680: NEG
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 4
50688: NEG
50689: PUSH
50690: LD_INT 5
50692: NEG
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 3
50700: NEG
50701: PUSH
50702: LD_INT 4
50704: NEG
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 3
50712: NEG
50713: PUSH
50714: LD_INT 3
50716: NEG
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 4
50724: NEG
50725: PUSH
50726: LD_INT 3
50728: NEG
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 5
50736: NEG
50737: PUSH
50738: LD_INT 4
50740: NEG
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 5
50748: NEG
50749: PUSH
50750: LD_INT 5
50752: NEG
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 3
50760: NEG
50761: PUSH
50762: LD_INT 5
50764: NEG
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 5
50772: NEG
50773: PUSH
50774: LD_INT 3
50776: NEG
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 0
50784: PUSH
50785: LD_INT 3
50787: NEG
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 0
50795: PUSH
50796: LD_INT 4
50798: NEG
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 1
50806: PUSH
50807: LD_INT 3
50809: NEG
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 1
50817: PUSH
50818: LD_INT 2
50820: NEG
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 0
50828: PUSH
50829: LD_INT 2
50831: NEG
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 1
50839: NEG
50840: PUSH
50841: LD_INT 3
50843: NEG
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 1
50851: NEG
50852: PUSH
50853: LD_INT 4
50855: NEG
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 2
50863: PUSH
50864: LD_INT 2
50866: NEG
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 2
50874: NEG
50875: PUSH
50876: LD_INT 4
50878: NEG
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 4
50886: PUSH
50887: LD_INT 0
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 4
50896: PUSH
50897: LD_INT 1
50899: NEG
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 5
50907: PUSH
50908: LD_INT 0
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 5
50917: PUSH
50918: LD_INT 1
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 4
50927: PUSH
50928: LD_INT 1
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 3
50937: PUSH
50938: LD_INT 0
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 3
50947: PUSH
50948: LD_INT 1
50950: NEG
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 3
50958: PUSH
50959: LD_INT 2
50961: NEG
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 5
50969: PUSH
50970: LD_INT 2
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51024: LD_ADDR_VAR 0 32
51028: PUSH
51029: LD_INT 4
51031: NEG
51032: PUSH
51033: LD_INT 0
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 4
51042: NEG
51043: PUSH
51044: LD_INT 1
51046: NEG
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 3
51054: NEG
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 3
51065: NEG
51066: PUSH
51067: LD_INT 1
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 4
51076: NEG
51077: PUSH
51078: LD_INT 1
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 5
51087: NEG
51088: PUSH
51089: LD_INT 0
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 5
51098: NEG
51099: PUSH
51100: LD_INT 1
51102: NEG
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 5
51110: NEG
51111: PUSH
51112: LD_INT 2
51114: NEG
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 3
51122: NEG
51123: PUSH
51124: LD_INT 2
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 3
51133: NEG
51134: PUSH
51135: LD_INT 3
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 3
51145: NEG
51146: PUSH
51147: LD_INT 4
51149: NEG
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 2
51157: NEG
51158: PUSH
51159: LD_INT 3
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 2
51169: NEG
51170: PUSH
51171: LD_INT 2
51173: NEG
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 3
51181: NEG
51182: PUSH
51183: LD_INT 2
51185: NEG
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 4
51193: NEG
51194: PUSH
51195: LD_INT 3
51197: NEG
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 4
51205: NEG
51206: PUSH
51207: LD_INT 4
51209: NEG
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 2
51217: NEG
51218: PUSH
51219: LD_INT 4
51221: NEG
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 4
51229: NEG
51230: PUSH
51231: LD_INT 2
51233: NEG
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: LD_INT 4
51244: NEG
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 0
51252: PUSH
51253: LD_INT 5
51255: NEG
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 1
51263: PUSH
51264: LD_INT 4
51266: NEG
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 1
51274: PUSH
51275: LD_INT 3
51277: NEG
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 0
51285: PUSH
51286: LD_INT 3
51288: NEG
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 1
51296: NEG
51297: PUSH
51298: LD_INT 4
51300: NEG
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 1
51308: NEG
51309: PUSH
51310: LD_INT 5
51312: NEG
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 2
51320: PUSH
51321: LD_INT 3
51323: NEG
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 2
51331: NEG
51332: PUSH
51333: LD_INT 5
51335: NEG
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 3
51343: PUSH
51344: LD_INT 0
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 3
51353: PUSH
51354: LD_INT 1
51356: NEG
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 4
51364: PUSH
51365: LD_INT 0
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 4
51374: PUSH
51375: LD_INT 1
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 3
51384: PUSH
51385: LD_INT 1
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 2
51394: PUSH
51395: LD_INT 0
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 2
51404: PUSH
51405: LD_INT 1
51407: NEG
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 2
51415: PUSH
51416: LD_INT 2
51418: NEG
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 4
51426: PUSH
51427: LD_INT 2
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 4
51436: PUSH
51437: LD_INT 4
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 4
51446: PUSH
51447: LD_INT 3
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 5
51456: PUSH
51457: LD_INT 4
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 5
51466: PUSH
51467: LD_INT 5
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 4
51476: PUSH
51477: LD_INT 5
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 3
51486: PUSH
51487: LD_INT 4
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 3
51496: PUSH
51497: LD_INT 3
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 5
51506: PUSH
51507: LD_INT 3
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 3
51516: PUSH
51517: LD_INT 5
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51571: LD_ADDR_VAR 0 33
51575: PUSH
51576: LD_INT 4
51578: NEG
51579: PUSH
51580: LD_INT 4
51582: NEG
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 4
51590: NEG
51591: PUSH
51592: LD_INT 5
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 3
51602: NEG
51603: PUSH
51604: LD_INT 4
51606: NEG
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 3
51614: NEG
51615: PUSH
51616: LD_INT 3
51618: NEG
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 4
51626: NEG
51627: PUSH
51628: LD_INT 3
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 5
51638: NEG
51639: PUSH
51640: LD_INT 4
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 5
51650: NEG
51651: PUSH
51652: LD_INT 5
51654: NEG
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 3
51662: NEG
51663: PUSH
51664: LD_INT 5
51666: NEG
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 5
51674: NEG
51675: PUSH
51676: LD_INT 3
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: LD_INT 3
51689: NEG
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 0
51697: PUSH
51698: LD_INT 4
51700: NEG
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 1
51708: PUSH
51709: LD_INT 3
51711: NEG
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 1
51719: PUSH
51720: LD_INT 2
51722: NEG
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 0
51730: PUSH
51731: LD_INT 2
51733: NEG
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 1
51741: NEG
51742: PUSH
51743: LD_INT 3
51745: NEG
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 1
51753: NEG
51754: PUSH
51755: LD_INT 4
51757: NEG
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 2
51765: PUSH
51766: LD_INT 2
51768: NEG
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 2
51776: NEG
51777: PUSH
51778: LD_INT 4
51780: NEG
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 4
51788: PUSH
51789: LD_INT 0
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 4
51798: PUSH
51799: LD_INT 1
51801: NEG
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 5
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 5
51819: PUSH
51820: LD_INT 1
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 4
51829: PUSH
51830: LD_INT 1
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 3
51839: PUSH
51840: LD_INT 0
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 3
51849: PUSH
51850: LD_INT 1
51852: NEG
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 3
51860: PUSH
51861: LD_INT 2
51863: NEG
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 5
51871: PUSH
51872: LD_INT 2
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 3
51881: PUSH
51882: LD_INT 3
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 3
51891: PUSH
51892: LD_INT 2
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 4
51901: PUSH
51902: LD_INT 3
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 4
51911: PUSH
51912: LD_INT 4
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 3
51921: PUSH
51922: LD_INT 4
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 2
51931: PUSH
51932: LD_INT 3
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 2
51941: PUSH
51942: LD_INT 2
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 4
51951: PUSH
51952: LD_INT 2
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 2
51961: PUSH
51962: LD_INT 4
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 0
51971: PUSH
51972: LD_INT 4
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 0
51981: PUSH
51982: LD_INT 3
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 1
51991: PUSH
51992: LD_INT 4
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 1
52001: PUSH
52002: LD_INT 5
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 0
52011: PUSH
52012: LD_INT 5
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 1
52021: NEG
52022: PUSH
52023: LD_INT 4
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 1
52032: NEG
52033: PUSH
52034: LD_INT 3
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 2
52043: PUSH
52044: LD_INT 5
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 2
52053: NEG
52054: PUSH
52055: LD_INT 3
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52109: LD_ADDR_VAR 0 34
52113: PUSH
52114: LD_INT 0
52116: PUSH
52117: LD_INT 4
52119: NEG
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 0
52127: PUSH
52128: LD_INT 5
52130: NEG
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 1
52138: PUSH
52139: LD_INT 4
52141: NEG
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 1
52149: PUSH
52150: LD_INT 3
52152: NEG
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 0
52160: PUSH
52161: LD_INT 3
52163: NEG
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 1
52171: NEG
52172: PUSH
52173: LD_INT 4
52175: NEG
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 1
52183: NEG
52184: PUSH
52185: LD_INT 5
52187: NEG
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 2
52195: PUSH
52196: LD_INT 3
52198: NEG
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 2
52206: NEG
52207: PUSH
52208: LD_INT 5
52210: NEG
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 3
52218: PUSH
52219: LD_INT 0
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 3
52228: PUSH
52229: LD_INT 1
52231: NEG
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 4
52239: PUSH
52240: LD_INT 0
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 4
52249: PUSH
52250: LD_INT 1
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 3
52259: PUSH
52260: LD_INT 1
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 2
52269: PUSH
52270: LD_INT 0
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 2
52279: PUSH
52280: LD_INT 1
52282: NEG
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 2
52290: PUSH
52291: LD_INT 2
52293: NEG
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 4
52301: PUSH
52302: LD_INT 2
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 4
52311: PUSH
52312: LD_INT 4
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 4
52321: PUSH
52322: LD_INT 3
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 5
52331: PUSH
52332: LD_INT 4
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 5
52341: PUSH
52342: LD_INT 5
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 4
52351: PUSH
52352: LD_INT 5
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 3
52361: PUSH
52362: LD_INT 4
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 3
52371: PUSH
52372: LD_INT 3
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 5
52381: PUSH
52382: LD_INT 3
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 3
52391: PUSH
52392: LD_INT 5
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 0
52401: PUSH
52402: LD_INT 3
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 0
52411: PUSH
52412: LD_INT 2
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 1
52421: PUSH
52422: LD_INT 3
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 1
52431: PUSH
52432: LD_INT 4
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: LD_INT 4
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 1
52451: NEG
52452: PUSH
52453: LD_INT 3
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 1
52462: NEG
52463: PUSH
52464: LD_INT 2
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 2
52473: PUSH
52474: LD_INT 4
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 2
52483: NEG
52484: PUSH
52485: LD_INT 2
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 4
52494: NEG
52495: PUSH
52496: LD_INT 0
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 4
52505: NEG
52506: PUSH
52507: LD_INT 1
52509: NEG
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 3
52517: NEG
52518: PUSH
52519: LD_INT 0
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 3
52528: NEG
52529: PUSH
52530: LD_INT 1
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 4
52539: NEG
52540: PUSH
52541: LD_INT 1
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 5
52550: NEG
52551: PUSH
52552: LD_INT 0
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 5
52561: NEG
52562: PUSH
52563: LD_INT 1
52565: NEG
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 5
52573: NEG
52574: PUSH
52575: LD_INT 2
52577: NEG
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 3
52585: NEG
52586: PUSH
52587: LD_INT 2
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: ST_TO_ADDR
// end ; end ;
52641: GO 52644
52643: POP
// case btype of b_depot , b_warehouse :
52644: LD_VAR 0 1
52648: PUSH
52649: LD_INT 0
52651: DOUBLE
52652: EQUAL
52653: IFTRUE 52663
52655: LD_INT 1
52657: DOUBLE
52658: EQUAL
52659: IFTRUE 52663
52661: GO 52864
52663: POP
// case nation of nation_american :
52664: LD_VAR 0 5
52668: PUSH
52669: LD_INT 1
52671: DOUBLE
52672: EQUAL
52673: IFTRUE 52677
52675: GO 52733
52677: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
52678: LD_ADDR_VAR 0 9
52682: PUSH
52683: LD_VAR 0 11
52687: PUSH
52688: LD_VAR 0 12
52692: PUSH
52693: LD_VAR 0 13
52697: PUSH
52698: LD_VAR 0 14
52702: PUSH
52703: LD_VAR 0 15
52707: PUSH
52708: LD_VAR 0 16
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: PUSH
52721: LD_VAR 0 4
52725: PUSH
52726: LD_INT 1
52728: PLUS
52729: ARRAY
52730: ST_TO_ADDR
52731: GO 52862
52733: LD_INT 2
52735: DOUBLE
52736: EQUAL
52737: IFTRUE 52741
52739: GO 52797
52741: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
52742: LD_ADDR_VAR 0 9
52746: PUSH
52747: LD_VAR 0 17
52751: PUSH
52752: LD_VAR 0 18
52756: PUSH
52757: LD_VAR 0 19
52761: PUSH
52762: LD_VAR 0 20
52766: PUSH
52767: LD_VAR 0 21
52771: PUSH
52772: LD_VAR 0 22
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: PUSH
52785: LD_VAR 0 4
52789: PUSH
52790: LD_INT 1
52792: PLUS
52793: ARRAY
52794: ST_TO_ADDR
52795: GO 52862
52797: LD_INT 3
52799: DOUBLE
52800: EQUAL
52801: IFTRUE 52805
52803: GO 52861
52805: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52806: LD_ADDR_VAR 0 9
52810: PUSH
52811: LD_VAR 0 23
52815: PUSH
52816: LD_VAR 0 24
52820: PUSH
52821: LD_VAR 0 25
52825: PUSH
52826: LD_VAR 0 26
52830: PUSH
52831: LD_VAR 0 27
52835: PUSH
52836: LD_VAR 0 28
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: PUSH
52849: LD_VAR 0 4
52853: PUSH
52854: LD_INT 1
52856: PLUS
52857: ARRAY
52858: ST_TO_ADDR
52859: GO 52862
52861: POP
52862: GO 53417
52864: LD_INT 2
52866: DOUBLE
52867: EQUAL
52868: IFTRUE 52878
52870: LD_INT 3
52872: DOUBLE
52873: EQUAL
52874: IFTRUE 52878
52876: GO 52934
52878: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52879: LD_ADDR_VAR 0 9
52883: PUSH
52884: LD_VAR 0 29
52888: PUSH
52889: LD_VAR 0 30
52893: PUSH
52894: LD_VAR 0 31
52898: PUSH
52899: LD_VAR 0 32
52903: PUSH
52904: LD_VAR 0 33
52908: PUSH
52909: LD_VAR 0 34
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: PUSH
52922: LD_VAR 0 4
52926: PUSH
52927: LD_INT 1
52929: PLUS
52930: ARRAY
52931: ST_TO_ADDR
52932: GO 53417
52934: LD_INT 16
52936: DOUBLE
52937: EQUAL
52938: IFTRUE 52996
52940: LD_INT 17
52942: DOUBLE
52943: EQUAL
52944: IFTRUE 52996
52946: LD_INT 18
52948: DOUBLE
52949: EQUAL
52950: IFTRUE 52996
52952: LD_INT 19
52954: DOUBLE
52955: EQUAL
52956: IFTRUE 52996
52958: LD_INT 22
52960: DOUBLE
52961: EQUAL
52962: IFTRUE 52996
52964: LD_INT 20
52966: DOUBLE
52967: EQUAL
52968: IFTRUE 52996
52970: LD_INT 21
52972: DOUBLE
52973: EQUAL
52974: IFTRUE 52996
52976: LD_INT 23
52978: DOUBLE
52979: EQUAL
52980: IFTRUE 52996
52982: LD_INT 24
52984: DOUBLE
52985: EQUAL
52986: IFTRUE 52996
52988: LD_INT 25
52990: DOUBLE
52991: EQUAL
52992: IFTRUE 52996
52994: GO 53052
52996: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52997: LD_ADDR_VAR 0 9
53001: PUSH
53002: LD_VAR 0 35
53006: PUSH
53007: LD_VAR 0 36
53011: PUSH
53012: LD_VAR 0 37
53016: PUSH
53017: LD_VAR 0 38
53021: PUSH
53022: LD_VAR 0 39
53026: PUSH
53027: LD_VAR 0 40
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: PUSH
53040: LD_VAR 0 4
53044: PUSH
53045: LD_INT 1
53047: PLUS
53048: ARRAY
53049: ST_TO_ADDR
53050: GO 53417
53052: LD_INT 6
53054: DOUBLE
53055: EQUAL
53056: IFTRUE 53108
53058: LD_INT 7
53060: DOUBLE
53061: EQUAL
53062: IFTRUE 53108
53064: LD_INT 8
53066: DOUBLE
53067: EQUAL
53068: IFTRUE 53108
53070: LD_INT 13
53072: DOUBLE
53073: EQUAL
53074: IFTRUE 53108
53076: LD_INT 12
53078: DOUBLE
53079: EQUAL
53080: IFTRUE 53108
53082: LD_INT 15
53084: DOUBLE
53085: EQUAL
53086: IFTRUE 53108
53088: LD_INT 11
53090: DOUBLE
53091: EQUAL
53092: IFTRUE 53108
53094: LD_INT 14
53096: DOUBLE
53097: EQUAL
53098: IFTRUE 53108
53100: LD_INT 10
53102: DOUBLE
53103: EQUAL
53104: IFTRUE 53108
53106: GO 53164
53108: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53109: LD_ADDR_VAR 0 9
53113: PUSH
53114: LD_VAR 0 41
53118: PUSH
53119: LD_VAR 0 42
53123: PUSH
53124: LD_VAR 0 43
53128: PUSH
53129: LD_VAR 0 44
53133: PUSH
53134: LD_VAR 0 45
53138: PUSH
53139: LD_VAR 0 46
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: PUSH
53152: LD_VAR 0 4
53156: PUSH
53157: LD_INT 1
53159: PLUS
53160: ARRAY
53161: ST_TO_ADDR
53162: GO 53417
53164: LD_INT 36
53166: DOUBLE
53167: EQUAL
53168: IFTRUE 53172
53170: GO 53228
53172: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53173: LD_ADDR_VAR 0 9
53177: PUSH
53178: LD_VAR 0 47
53182: PUSH
53183: LD_VAR 0 48
53187: PUSH
53188: LD_VAR 0 49
53192: PUSH
53193: LD_VAR 0 50
53197: PUSH
53198: LD_VAR 0 51
53202: PUSH
53203: LD_VAR 0 52
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: PUSH
53216: LD_VAR 0 4
53220: PUSH
53221: LD_INT 1
53223: PLUS
53224: ARRAY
53225: ST_TO_ADDR
53226: GO 53417
53228: LD_INT 4
53230: DOUBLE
53231: EQUAL
53232: IFTRUE 53254
53234: LD_INT 5
53236: DOUBLE
53237: EQUAL
53238: IFTRUE 53254
53240: LD_INT 34
53242: DOUBLE
53243: EQUAL
53244: IFTRUE 53254
53246: LD_INT 37
53248: DOUBLE
53249: EQUAL
53250: IFTRUE 53254
53252: GO 53310
53254: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53255: LD_ADDR_VAR 0 9
53259: PUSH
53260: LD_VAR 0 53
53264: PUSH
53265: LD_VAR 0 54
53269: PUSH
53270: LD_VAR 0 55
53274: PUSH
53275: LD_VAR 0 56
53279: PUSH
53280: LD_VAR 0 57
53284: PUSH
53285: LD_VAR 0 58
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: PUSH
53298: LD_VAR 0 4
53302: PUSH
53303: LD_INT 1
53305: PLUS
53306: ARRAY
53307: ST_TO_ADDR
53308: GO 53417
53310: LD_INT 31
53312: DOUBLE
53313: EQUAL
53314: IFTRUE 53360
53316: LD_INT 32
53318: DOUBLE
53319: EQUAL
53320: IFTRUE 53360
53322: LD_INT 33
53324: DOUBLE
53325: EQUAL
53326: IFTRUE 53360
53328: LD_INT 27
53330: DOUBLE
53331: EQUAL
53332: IFTRUE 53360
53334: LD_INT 26
53336: DOUBLE
53337: EQUAL
53338: IFTRUE 53360
53340: LD_INT 28
53342: DOUBLE
53343: EQUAL
53344: IFTRUE 53360
53346: LD_INT 29
53348: DOUBLE
53349: EQUAL
53350: IFTRUE 53360
53352: LD_INT 30
53354: DOUBLE
53355: EQUAL
53356: IFTRUE 53360
53358: GO 53416
53360: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
53361: LD_ADDR_VAR 0 9
53365: PUSH
53366: LD_VAR 0 59
53370: PUSH
53371: LD_VAR 0 60
53375: PUSH
53376: LD_VAR 0 61
53380: PUSH
53381: LD_VAR 0 62
53385: PUSH
53386: LD_VAR 0 63
53390: PUSH
53391: LD_VAR 0 64
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: PUSH
53404: LD_VAR 0 4
53408: PUSH
53409: LD_INT 1
53411: PLUS
53412: ARRAY
53413: ST_TO_ADDR
53414: GO 53417
53416: POP
// temp_list2 = [ ] ;
53417: LD_ADDR_VAR 0 10
53421: PUSH
53422: EMPTY
53423: ST_TO_ADDR
// for i in temp_list do
53424: LD_ADDR_VAR 0 8
53428: PUSH
53429: LD_VAR 0 9
53433: PUSH
53434: FOR_IN
53435: IFFALSE 53487
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53437: LD_ADDR_VAR 0 10
53441: PUSH
53442: LD_VAR 0 10
53446: PUSH
53447: LD_VAR 0 8
53451: PUSH
53452: LD_INT 1
53454: ARRAY
53455: PUSH
53456: LD_VAR 0 2
53460: PLUS
53461: PUSH
53462: LD_VAR 0 8
53466: PUSH
53467: LD_INT 2
53469: ARRAY
53470: PUSH
53471: LD_VAR 0 3
53475: PLUS
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: EMPTY
53482: LIST
53483: ADD
53484: ST_TO_ADDR
53485: GO 53434
53487: POP
53488: POP
// result = temp_list2 ;
53489: LD_ADDR_VAR 0 7
53493: PUSH
53494: LD_VAR 0 10
53498: ST_TO_ADDR
// end ;
53499: LD_VAR 0 7
53503: RET
// export function EnemyInRange ( unit , dist ) ; begin
53504: LD_INT 0
53506: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53507: LD_ADDR_VAR 0 3
53511: PUSH
53512: LD_VAR 0 1
53516: PPUSH
53517: CALL_OW 255
53521: PPUSH
53522: LD_VAR 0 1
53526: PPUSH
53527: CALL_OW 250
53531: PPUSH
53532: LD_VAR 0 1
53536: PPUSH
53537: CALL_OW 251
53541: PPUSH
53542: LD_VAR 0 2
53546: PPUSH
53547: CALL 26761 0 4
53551: PUSH
53552: LD_INT 4
53554: ARRAY
53555: ST_TO_ADDR
// end ;
53556: LD_VAR 0 3
53560: RET
// export function PlayerSeeMe ( unit ) ; begin
53561: LD_INT 0
53563: PPUSH
// result := See ( your_side , unit ) ;
53564: LD_ADDR_VAR 0 2
53568: PUSH
53569: LD_OWVAR 2
53573: PPUSH
53574: LD_VAR 0 1
53578: PPUSH
53579: CALL_OW 292
53583: ST_TO_ADDR
// end ;
53584: LD_VAR 0 2
53588: RET
// export function ReverseDir ( unit ) ; begin
53589: LD_INT 0
53591: PPUSH
// if not unit then
53592: LD_VAR 0 1
53596: NOT
53597: IFFALSE 53601
// exit ;
53599: GO 53624
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53601: LD_ADDR_VAR 0 2
53605: PUSH
53606: LD_VAR 0 1
53610: PPUSH
53611: CALL_OW 254
53615: PUSH
53616: LD_INT 3
53618: PLUS
53619: PUSH
53620: LD_INT 6
53622: MOD
53623: ST_TO_ADDR
// end ;
53624: LD_VAR 0 2
53628: RET
// export function ReverseArray ( array ) ; var i ; begin
53629: LD_INT 0
53631: PPUSH
53632: PPUSH
// if not array then
53633: LD_VAR 0 1
53637: NOT
53638: IFFALSE 53642
// exit ;
53640: GO 53697
// result := [ ] ;
53642: LD_ADDR_VAR 0 2
53646: PUSH
53647: EMPTY
53648: ST_TO_ADDR
// for i := array downto 1 do
53649: LD_ADDR_VAR 0 3
53653: PUSH
53654: DOUBLE
53655: LD_VAR 0 1
53659: INC
53660: ST_TO_ADDR
53661: LD_INT 1
53663: PUSH
53664: FOR_DOWNTO
53665: IFFALSE 53695
// result := Join ( result , array [ i ] ) ;
53667: LD_ADDR_VAR 0 2
53671: PUSH
53672: LD_VAR 0 2
53676: PPUSH
53677: LD_VAR 0 1
53681: PUSH
53682: LD_VAR 0 3
53686: ARRAY
53687: PPUSH
53688: CALL 58549 0 2
53692: ST_TO_ADDR
53693: GO 53664
53695: POP
53696: POP
// end ;
53697: LD_VAR 0 2
53701: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
53702: LD_INT 0
53704: PPUSH
53705: PPUSH
53706: PPUSH
53707: PPUSH
53708: PPUSH
53709: PPUSH
// if not unit or not hexes then
53710: LD_VAR 0 1
53714: NOT
53715: IFTRUE 53724
53717: PUSH
53718: LD_VAR 0 2
53722: NOT
53723: OR
53724: IFFALSE 53728
// exit ;
53726: GO 53851
// dist := 9999 ;
53728: LD_ADDR_VAR 0 5
53732: PUSH
53733: LD_INT 9999
53735: ST_TO_ADDR
// for i = 1 to hexes do
53736: LD_ADDR_VAR 0 4
53740: PUSH
53741: DOUBLE
53742: LD_INT 1
53744: DEC
53745: ST_TO_ADDR
53746: LD_VAR 0 2
53750: PUSH
53751: FOR_TO
53752: IFFALSE 53839
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53754: LD_ADDR_VAR 0 6
53758: PUSH
53759: LD_VAR 0 1
53763: PPUSH
53764: LD_VAR 0 2
53768: PUSH
53769: LD_VAR 0 4
53773: ARRAY
53774: PUSH
53775: LD_INT 1
53777: ARRAY
53778: PPUSH
53779: LD_VAR 0 2
53783: PUSH
53784: LD_VAR 0 4
53788: ARRAY
53789: PUSH
53790: LD_INT 2
53792: ARRAY
53793: PPUSH
53794: CALL_OW 297
53798: ST_TO_ADDR
// if tdist < dist then
53799: LD_VAR 0 6
53803: PUSH
53804: LD_VAR 0 5
53808: LESS
53809: IFFALSE 53837
// begin hex := hexes [ i ] ;
53811: LD_ADDR_VAR 0 8
53815: PUSH
53816: LD_VAR 0 2
53820: PUSH
53821: LD_VAR 0 4
53825: ARRAY
53826: ST_TO_ADDR
// dist := tdist ;
53827: LD_ADDR_VAR 0 5
53831: PUSH
53832: LD_VAR 0 6
53836: ST_TO_ADDR
// end ; end ;
53837: GO 53751
53839: POP
53840: POP
// result := hex ;
53841: LD_ADDR_VAR 0 3
53845: PUSH
53846: LD_VAR 0 8
53850: ST_TO_ADDR
// end ;
53851: LD_VAR 0 3
53855: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53856: LD_INT 0
53858: PPUSH
53859: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53860: LD_VAR 0 1
53864: NOT
53865: IFTRUE 53904
53867: PUSH
53868: LD_VAR 0 1
53872: PUSH
53873: LD_INT 21
53875: PUSH
53876: LD_INT 2
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 23
53885: PUSH
53886: LD_INT 2
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PPUSH
53897: CALL_OW 69
53901: IN
53902: NOT
53903: OR
53904: IFFALSE 53908
// exit ;
53906: GO 53955
// for i = 1 to 3 do
53908: LD_ADDR_VAR 0 3
53912: PUSH
53913: DOUBLE
53914: LD_INT 1
53916: DEC
53917: ST_TO_ADDR
53918: LD_INT 3
53920: PUSH
53921: FOR_TO
53922: IFFALSE 53953
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53924: LD_VAR 0 1
53928: PPUSH
53929: CALL_OW 250
53933: PPUSH
53934: LD_VAR 0 1
53938: PPUSH
53939: CALL_OW 251
53943: PPUSH
53944: LD_INT 1
53946: PPUSH
53947: CALL_OW 453
53951: GO 53921
53953: POP
53954: POP
// end ;
53955: LD_VAR 0 2
53959: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53960: LD_INT 0
53962: PPUSH
53963: PPUSH
53964: PPUSH
53965: PPUSH
53966: PPUSH
53967: PPUSH
// if not unit or not enemy_unit then
53968: LD_VAR 0 1
53972: NOT
53973: IFTRUE 53982
53975: PUSH
53976: LD_VAR 0 2
53980: NOT
53981: OR
53982: IFFALSE 53986
// exit ;
53984: GO 54467
// if GetLives ( i ) < 250 then
53986: LD_VAR 0 4
53990: PPUSH
53991: CALL_OW 256
53995: PUSH
53996: LD_INT 250
53998: LESS
53999: IFFALSE 54012
// begin ComAutodestruct ( i ) ;
54001: LD_VAR 0 4
54005: PPUSH
54006: CALL 53856 0 1
// exit ;
54010: GO 54467
// end ; x := GetX ( enemy_unit ) ;
54012: LD_ADDR_VAR 0 7
54016: PUSH
54017: LD_VAR 0 2
54021: PPUSH
54022: CALL_OW 250
54026: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54027: LD_ADDR_VAR 0 8
54031: PUSH
54032: LD_VAR 0 2
54036: PPUSH
54037: CALL_OW 251
54041: ST_TO_ADDR
// if not x or not y then
54042: LD_VAR 0 7
54046: NOT
54047: IFTRUE 54056
54049: PUSH
54050: LD_VAR 0 8
54054: NOT
54055: OR
54056: IFFALSE 54060
// exit ;
54058: GO 54467
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54060: LD_ADDR_VAR 0 6
54064: PUSH
54065: LD_VAR 0 7
54069: PPUSH
54070: LD_INT 0
54072: PPUSH
54073: LD_INT 4
54075: PPUSH
54076: CALL_OW 272
54080: PUSH
54081: LD_VAR 0 8
54085: PPUSH
54086: LD_INT 0
54088: PPUSH
54089: LD_INT 4
54091: PPUSH
54092: CALL_OW 273
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_VAR 0 7
54105: PPUSH
54106: LD_INT 1
54108: PPUSH
54109: LD_INT 4
54111: PPUSH
54112: CALL_OW 272
54116: PUSH
54117: LD_VAR 0 8
54121: PPUSH
54122: LD_INT 1
54124: PPUSH
54125: LD_INT 4
54127: PPUSH
54128: CALL_OW 273
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_VAR 0 7
54141: PPUSH
54142: LD_INT 2
54144: PPUSH
54145: LD_INT 4
54147: PPUSH
54148: CALL_OW 272
54152: PUSH
54153: LD_VAR 0 8
54157: PPUSH
54158: LD_INT 2
54160: PPUSH
54161: LD_INT 4
54163: PPUSH
54164: CALL_OW 273
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_VAR 0 7
54177: PPUSH
54178: LD_INT 3
54180: PPUSH
54181: LD_INT 4
54183: PPUSH
54184: CALL_OW 272
54188: PUSH
54189: LD_VAR 0 8
54193: PPUSH
54194: LD_INT 3
54196: PPUSH
54197: LD_INT 4
54199: PPUSH
54200: CALL_OW 273
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_VAR 0 7
54213: PPUSH
54214: LD_INT 4
54216: PPUSH
54217: LD_INT 4
54219: PPUSH
54220: CALL_OW 272
54224: PUSH
54225: LD_VAR 0 8
54229: PPUSH
54230: LD_INT 4
54232: PPUSH
54233: LD_INT 4
54235: PPUSH
54236: CALL_OW 273
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_VAR 0 7
54249: PPUSH
54250: LD_INT 5
54252: PPUSH
54253: LD_INT 4
54255: PPUSH
54256: CALL_OW 272
54260: PUSH
54261: LD_VAR 0 8
54265: PPUSH
54266: LD_INT 5
54268: PPUSH
54269: LD_INT 4
54271: PPUSH
54272: CALL_OW 273
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: ST_TO_ADDR
// for i = tmp downto 1 do
54289: LD_ADDR_VAR 0 4
54293: PUSH
54294: DOUBLE
54295: LD_VAR 0 6
54299: INC
54300: ST_TO_ADDR
54301: LD_INT 1
54303: PUSH
54304: FOR_DOWNTO
54305: IFFALSE 54408
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54307: LD_VAR 0 6
54311: PUSH
54312: LD_VAR 0 4
54316: ARRAY
54317: PUSH
54318: LD_INT 1
54320: ARRAY
54321: PPUSH
54322: LD_VAR 0 6
54326: PUSH
54327: LD_VAR 0 4
54331: ARRAY
54332: PUSH
54333: LD_INT 2
54335: ARRAY
54336: PPUSH
54337: CALL_OW 488
54341: NOT
54342: IFTRUE 54384
54344: PUSH
54345: LD_VAR 0 6
54349: PUSH
54350: LD_VAR 0 4
54354: ARRAY
54355: PUSH
54356: LD_INT 1
54358: ARRAY
54359: PPUSH
54360: LD_VAR 0 6
54364: PUSH
54365: LD_VAR 0 4
54369: ARRAY
54370: PUSH
54371: LD_INT 2
54373: ARRAY
54374: PPUSH
54375: CALL_OW 428
54379: PUSH
54380: LD_INT 0
54382: NONEQUAL
54383: OR
54384: IFFALSE 54406
// tmp := Delete ( tmp , i ) ;
54386: LD_ADDR_VAR 0 6
54390: PUSH
54391: LD_VAR 0 6
54395: PPUSH
54396: LD_VAR 0 4
54400: PPUSH
54401: CALL_OW 3
54405: ST_TO_ADDR
54406: GO 54304
54408: POP
54409: POP
// j := GetClosestHex ( unit , tmp ) ;
54410: LD_ADDR_VAR 0 5
54414: PUSH
54415: LD_VAR 0 1
54419: PPUSH
54420: LD_VAR 0 6
54424: PPUSH
54425: CALL 53702 0 2
54429: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54430: LD_VAR 0 1
54434: PPUSH
54435: LD_VAR 0 5
54439: PUSH
54440: LD_INT 1
54442: ARRAY
54443: PPUSH
54444: LD_VAR 0 5
54448: PUSH
54449: LD_INT 2
54451: ARRAY
54452: PPUSH
54453: CALL_OW 111
// result := j ;
54457: LD_ADDR_VAR 0 3
54461: PUSH
54462: LD_VAR 0 5
54466: ST_TO_ADDR
// end ;
54467: LD_VAR 0 3
54471: RET
// export function PrepareApemanSoldier ( ) ; begin
54472: LD_INT 0
54474: PPUSH
// uc_nation := 0 ;
54475: LD_ADDR_OWVAR 21
54479: PUSH
54480: LD_INT 0
54482: ST_TO_ADDR
// hc_sex := sex_male ;
54483: LD_ADDR_OWVAR 27
54487: PUSH
54488: LD_INT 1
54490: ST_TO_ADDR
// hc_name :=  ;
54491: LD_ADDR_OWVAR 26
54495: PUSH
54496: LD_STRING 
54498: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
54499: LD_ADDR_OWVAR 28
54503: PUSH
54504: LD_INT 15
54506: ST_TO_ADDR
// hc_gallery :=  ;
54507: LD_ADDR_OWVAR 33
54511: PUSH
54512: LD_STRING 
54514: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54515: LD_ADDR_OWVAR 31
54519: PUSH
54520: LD_INT 0
54522: PPUSH
54523: LD_INT 3
54525: PPUSH
54526: CALL_OW 12
54530: PUSH
54531: LD_INT 0
54533: PPUSH
54534: LD_INT 3
54536: PPUSH
54537: CALL_OW 12
54541: PUSH
54542: LD_INT 0
54544: PUSH
54545: LD_INT 0
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
54554: LD_ADDR_OWVAR 29
54558: PUSH
54559: LD_INT 10
54561: PUSH
54562: LD_INT 12
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: ST_TO_ADDR
// end ;
54569: LD_VAR 0 1
54573: RET
// export function PrepareApemanEngineer ( ) ; begin
54574: LD_INT 0
54576: PPUSH
// uc_nation := 0 ;
54577: LD_ADDR_OWVAR 21
54581: PUSH
54582: LD_INT 0
54584: ST_TO_ADDR
// hc_sex := sex_male ;
54585: LD_ADDR_OWVAR 27
54589: PUSH
54590: LD_INT 1
54592: ST_TO_ADDR
// hc_name :=  ;
54593: LD_ADDR_OWVAR 26
54597: PUSH
54598: LD_STRING 
54600: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
54601: LD_ADDR_OWVAR 28
54605: PUSH
54606: LD_INT 16
54608: ST_TO_ADDR
// hc_gallery :=  ;
54609: LD_ADDR_OWVAR 33
54613: PUSH
54614: LD_STRING 
54616: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54617: LD_ADDR_OWVAR 31
54621: PUSH
54622: LD_INT 0
54624: PPUSH
54625: LD_INT 3
54627: PPUSH
54628: CALL_OW 12
54632: PUSH
54633: LD_INT 0
54635: PPUSH
54636: LD_INT 3
54638: PPUSH
54639: CALL_OW 12
54643: PUSH
54644: LD_INT 0
54646: PUSH
54647: LD_INT 0
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
54656: LD_ADDR_OWVAR 29
54660: PUSH
54661: LD_INT 10
54663: PUSH
54664: LD_INT 12
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: ST_TO_ADDR
// end ;
54671: LD_VAR 0 1
54675: RET
// export function PrepareApeman ( agressivity ) ; begin
54676: LD_INT 0
54678: PPUSH
// uc_side := 0 ;
54679: LD_ADDR_OWVAR 20
54683: PUSH
54684: LD_INT 0
54686: ST_TO_ADDR
// uc_nation := 0 ;
54687: LD_ADDR_OWVAR 21
54691: PUSH
54692: LD_INT 0
54694: ST_TO_ADDR
// hc_sex := sex_male ;
54695: LD_ADDR_OWVAR 27
54699: PUSH
54700: LD_INT 1
54702: ST_TO_ADDR
// hc_class := class_apeman ;
54703: LD_ADDR_OWVAR 28
54707: PUSH
54708: LD_INT 12
54710: ST_TO_ADDR
// hc_gallery :=  ;
54711: LD_ADDR_OWVAR 33
54715: PUSH
54716: LD_STRING 
54718: ST_TO_ADDR
// hc_name :=  ;
54719: LD_ADDR_OWVAR 26
54723: PUSH
54724: LD_STRING 
54726: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
54727: LD_ADDR_OWVAR 29
54731: PUSH
54732: LD_INT 10
54734: PUSH
54735: LD_INT 12
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: ST_TO_ADDR
// if agressivity = 0 then
54742: LD_VAR 0 1
54746: PUSH
54747: LD_INT 0
54749: EQUAL
54750: IFFALSE 54762
// hc_agressivity := 0 else
54752: LD_ADDR_OWVAR 35
54756: PUSH
54757: LD_INT 0
54759: ST_TO_ADDR
54760: GO 54783
// hc_agressivity := rand ( - agressivity , agressivity ) ;
54762: LD_ADDR_OWVAR 35
54766: PUSH
54767: LD_VAR 0 1
54771: NEG
54772: PPUSH
54773: LD_VAR 0 1
54777: PPUSH
54778: CALL_OW 12
54782: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54783: LD_ADDR_OWVAR 31
54787: PUSH
54788: LD_INT 0
54790: PPUSH
54791: LD_INT 3
54793: PPUSH
54794: CALL_OW 12
54798: PUSH
54799: LD_INT 0
54801: PPUSH
54802: LD_INT 3
54804: PPUSH
54805: CALL_OW 12
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: LD_INT 0
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: ST_TO_ADDR
// end ;
54822: LD_VAR 0 2
54826: RET
// export function PrepareTiger ( agressivity ) ; begin
54827: LD_INT 0
54829: PPUSH
// uc_side := 0 ;
54830: LD_ADDR_OWVAR 20
54834: PUSH
54835: LD_INT 0
54837: ST_TO_ADDR
// uc_nation := 0 ;
54838: LD_ADDR_OWVAR 21
54842: PUSH
54843: LD_INT 0
54845: ST_TO_ADDR
// InitHc ;
54846: CALL_OW 19
// hc_class := class_tiger ;
54850: LD_ADDR_OWVAR 28
54854: PUSH
54855: LD_INT 14
54857: ST_TO_ADDR
// hc_gallery :=  ;
54858: LD_ADDR_OWVAR 33
54862: PUSH
54863: LD_STRING 
54865: ST_TO_ADDR
// hc_name :=  ;
54866: LD_ADDR_OWVAR 26
54870: PUSH
54871: LD_STRING 
54873: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
54874: LD_ADDR_OWVAR 35
54878: PUSH
54879: LD_VAR 0 1
54883: NEG
54884: PPUSH
54885: LD_VAR 0 1
54889: PPUSH
54890: CALL_OW 12
54894: ST_TO_ADDR
// end ;
54895: LD_VAR 0 2
54899: RET
// export function PrepareEnchidna ( ) ; begin
54900: LD_INT 0
54902: PPUSH
// uc_side := 0 ;
54903: LD_ADDR_OWVAR 20
54907: PUSH
54908: LD_INT 0
54910: ST_TO_ADDR
// uc_nation := 0 ;
54911: LD_ADDR_OWVAR 21
54915: PUSH
54916: LD_INT 0
54918: ST_TO_ADDR
// InitHc ;
54919: CALL_OW 19
// hc_class := class_baggie ;
54923: LD_ADDR_OWVAR 28
54927: PUSH
54928: LD_INT 13
54930: ST_TO_ADDR
// hc_gallery :=  ;
54931: LD_ADDR_OWVAR 33
54935: PUSH
54936: LD_STRING 
54938: ST_TO_ADDR
// hc_name :=  ;
54939: LD_ADDR_OWVAR 26
54943: PUSH
54944: LD_STRING 
54946: ST_TO_ADDR
// end ;
54947: LD_VAR 0 1
54951: RET
// export function PrepareFrog ( ) ; begin
54952: LD_INT 0
54954: PPUSH
// uc_side := 0 ;
54955: LD_ADDR_OWVAR 20
54959: PUSH
54960: LD_INT 0
54962: ST_TO_ADDR
// uc_nation := 0 ;
54963: LD_ADDR_OWVAR 21
54967: PUSH
54968: LD_INT 0
54970: ST_TO_ADDR
// InitHc ;
54971: CALL_OW 19
// hc_class := class_frog ;
54975: LD_ADDR_OWVAR 28
54979: PUSH
54980: LD_INT 19
54982: ST_TO_ADDR
// hc_gallery :=  ;
54983: LD_ADDR_OWVAR 33
54987: PUSH
54988: LD_STRING 
54990: ST_TO_ADDR
// hc_name :=  ;
54991: LD_ADDR_OWVAR 26
54995: PUSH
54996: LD_STRING 
54998: ST_TO_ADDR
// end ;
54999: LD_VAR 0 1
55003: RET
// export function PrepareFish ( ) ; begin
55004: LD_INT 0
55006: PPUSH
// uc_side := 0 ;
55007: LD_ADDR_OWVAR 20
55011: PUSH
55012: LD_INT 0
55014: ST_TO_ADDR
// uc_nation := 0 ;
55015: LD_ADDR_OWVAR 21
55019: PUSH
55020: LD_INT 0
55022: ST_TO_ADDR
// InitHc ;
55023: CALL_OW 19
// hc_class := class_fish ;
55027: LD_ADDR_OWVAR 28
55031: PUSH
55032: LD_INT 20
55034: ST_TO_ADDR
// hc_gallery :=  ;
55035: LD_ADDR_OWVAR 33
55039: PUSH
55040: LD_STRING 
55042: ST_TO_ADDR
// hc_name :=  ;
55043: LD_ADDR_OWVAR 26
55047: PUSH
55048: LD_STRING 
55050: ST_TO_ADDR
// end ;
55051: LD_VAR 0 1
55055: RET
// export function PrepareBird ( ) ; begin
55056: LD_INT 0
55058: PPUSH
// uc_side := 0 ;
55059: LD_ADDR_OWVAR 20
55063: PUSH
55064: LD_INT 0
55066: ST_TO_ADDR
// uc_nation := 0 ;
55067: LD_ADDR_OWVAR 21
55071: PUSH
55072: LD_INT 0
55074: ST_TO_ADDR
// InitHc ;
55075: CALL_OW 19
// hc_class := class_phororhacos ;
55079: LD_ADDR_OWVAR 28
55083: PUSH
55084: LD_INT 18
55086: ST_TO_ADDR
// hc_gallery :=  ;
55087: LD_ADDR_OWVAR 33
55091: PUSH
55092: LD_STRING 
55094: ST_TO_ADDR
// hc_name :=  ;
55095: LD_ADDR_OWVAR 26
55099: PUSH
55100: LD_STRING 
55102: ST_TO_ADDR
// end ;
55103: LD_VAR 0 1
55107: RET
// export function PrepareHorse ( ) ; begin
55108: LD_INT 0
55110: PPUSH
// uc_side := 0 ;
55111: LD_ADDR_OWVAR 20
55115: PUSH
55116: LD_INT 0
55118: ST_TO_ADDR
// uc_nation := 0 ;
55119: LD_ADDR_OWVAR 21
55123: PUSH
55124: LD_INT 0
55126: ST_TO_ADDR
// InitHc ;
55127: CALL_OW 19
// hc_class := class_horse ;
55131: LD_ADDR_OWVAR 28
55135: PUSH
55136: LD_INT 21
55138: ST_TO_ADDR
// hc_gallery :=  ;
55139: LD_ADDR_OWVAR 33
55143: PUSH
55144: LD_STRING 
55146: ST_TO_ADDR
// hc_name :=  ;
55147: LD_ADDR_OWVAR 26
55151: PUSH
55152: LD_STRING 
55154: ST_TO_ADDR
// end ;
55155: LD_VAR 0 1
55159: RET
// export function PrepareMastodont ( ) ; begin
55160: LD_INT 0
55162: PPUSH
// uc_side := 0 ;
55163: LD_ADDR_OWVAR 20
55167: PUSH
55168: LD_INT 0
55170: ST_TO_ADDR
// uc_nation := 0 ;
55171: LD_ADDR_OWVAR 21
55175: PUSH
55176: LD_INT 0
55178: ST_TO_ADDR
// vc_chassis := class_mastodont ;
55179: LD_ADDR_OWVAR 37
55183: PUSH
55184: LD_INT 31
55186: ST_TO_ADDR
// vc_control := control_rider ;
55187: LD_ADDR_OWVAR 38
55191: PUSH
55192: LD_INT 4
55194: ST_TO_ADDR
// end ;
55195: LD_VAR 0 1
55199: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55200: LD_INT 0
55202: PPUSH
55203: PPUSH
55204: PPUSH
// uc_side = 0 ;
55205: LD_ADDR_OWVAR 20
55209: PUSH
55210: LD_INT 0
55212: ST_TO_ADDR
// uc_nation = 0 ;
55213: LD_ADDR_OWVAR 21
55217: PUSH
55218: LD_INT 0
55220: ST_TO_ADDR
// InitHc_All ( ) ;
55221: CALL_OW 584
// InitVc ;
55225: CALL_OW 20
// if mastodonts then
55229: LD_VAR 0 6
55233: IFFALSE 55300
// for i = 1 to mastodonts do
55235: LD_ADDR_VAR 0 11
55239: PUSH
55240: DOUBLE
55241: LD_INT 1
55243: DEC
55244: ST_TO_ADDR
55245: LD_VAR 0 6
55249: PUSH
55250: FOR_TO
55251: IFFALSE 55298
// begin vc_chassis := 31 ;
55253: LD_ADDR_OWVAR 37
55257: PUSH
55258: LD_INT 31
55260: ST_TO_ADDR
// vc_control := control_rider ;
55261: LD_ADDR_OWVAR 38
55265: PUSH
55266: LD_INT 4
55268: ST_TO_ADDR
// animal := CreateVehicle ;
55269: LD_ADDR_VAR 0 12
55273: PUSH
55274: CALL_OW 45
55278: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55279: LD_VAR 0 12
55283: PPUSH
55284: LD_VAR 0 8
55288: PPUSH
55289: LD_INT 0
55291: PPUSH
55292: CALL 57442 0 3
// end ;
55296: GO 55250
55298: POP
55299: POP
// if horses then
55300: LD_VAR 0 5
55304: IFFALSE 55371
// for i = 1 to horses do
55306: LD_ADDR_VAR 0 11
55310: PUSH
55311: DOUBLE
55312: LD_INT 1
55314: DEC
55315: ST_TO_ADDR
55316: LD_VAR 0 5
55320: PUSH
55321: FOR_TO
55322: IFFALSE 55369
// begin hc_class := 21 ;
55324: LD_ADDR_OWVAR 28
55328: PUSH
55329: LD_INT 21
55331: ST_TO_ADDR
// hc_gallery :=  ;
55332: LD_ADDR_OWVAR 33
55336: PUSH
55337: LD_STRING 
55339: ST_TO_ADDR
// animal := CreateHuman ;
55340: LD_ADDR_VAR 0 12
55344: PUSH
55345: CALL_OW 44
55349: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55350: LD_VAR 0 12
55354: PPUSH
55355: LD_VAR 0 8
55359: PPUSH
55360: LD_INT 0
55362: PPUSH
55363: CALL 57442 0 3
// end ;
55367: GO 55321
55369: POP
55370: POP
// if birds then
55371: LD_VAR 0 1
55375: IFFALSE 55442
// for i = 1 to birds do
55377: LD_ADDR_VAR 0 11
55381: PUSH
55382: DOUBLE
55383: LD_INT 1
55385: DEC
55386: ST_TO_ADDR
55387: LD_VAR 0 1
55391: PUSH
55392: FOR_TO
55393: IFFALSE 55440
// begin hc_class := 18 ;
55395: LD_ADDR_OWVAR 28
55399: PUSH
55400: LD_INT 18
55402: ST_TO_ADDR
// hc_gallery =  ;
55403: LD_ADDR_OWVAR 33
55407: PUSH
55408: LD_STRING 
55410: ST_TO_ADDR
// animal := CreateHuman ;
55411: LD_ADDR_VAR 0 12
55415: PUSH
55416: CALL_OW 44
55420: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55421: LD_VAR 0 12
55425: PPUSH
55426: LD_VAR 0 8
55430: PPUSH
55431: LD_INT 0
55433: PPUSH
55434: CALL 57442 0 3
// end ;
55438: GO 55392
55440: POP
55441: POP
// if tigers then
55442: LD_VAR 0 2
55446: IFFALSE 55530
// for i = 1 to tigers do
55448: LD_ADDR_VAR 0 11
55452: PUSH
55453: DOUBLE
55454: LD_INT 1
55456: DEC
55457: ST_TO_ADDR
55458: LD_VAR 0 2
55462: PUSH
55463: FOR_TO
55464: IFFALSE 55528
// begin hc_class = class_tiger ;
55466: LD_ADDR_OWVAR 28
55470: PUSH
55471: LD_INT 14
55473: ST_TO_ADDR
// hc_gallery =  ;
55474: LD_ADDR_OWVAR 33
55478: PUSH
55479: LD_STRING 
55481: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55482: LD_ADDR_OWVAR 35
55486: PUSH
55487: LD_INT 7
55489: NEG
55490: PPUSH
55491: LD_INT 7
55493: PPUSH
55494: CALL_OW 12
55498: ST_TO_ADDR
// animal := CreateHuman ;
55499: LD_ADDR_VAR 0 12
55503: PUSH
55504: CALL_OW 44
55508: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55509: LD_VAR 0 12
55513: PPUSH
55514: LD_VAR 0 8
55518: PPUSH
55519: LD_INT 0
55521: PPUSH
55522: CALL 57442 0 3
// end ;
55526: GO 55463
55528: POP
55529: POP
// if apemans then
55530: LD_VAR 0 3
55534: IFFALSE 55657
// for i = 1 to apemans do
55536: LD_ADDR_VAR 0 11
55540: PUSH
55541: DOUBLE
55542: LD_INT 1
55544: DEC
55545: ST_TO_ADDR
55546: LD_VAR 0 3
55550: PUSH
55551: FOR_TO
55552: IFFALSE 55655
// begin hc_class = class_apeman ;
55554: LD_ADDR_OWVAR 28
55558: PUSH
55559: LD_INT 12
55561: ST_TO_ADDR
// hc_gallery =  ;
55562: LD_ADDR_OWVAR 33
55566: PUSH
55567: LD_STRING 
55569: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
55570: LD_ADDR_OWVAR 35
55574: PUSH
55575: LD_INT 2
55577: NEG
55578: PPUSH
55579: LD_INT 2
55581: PPUSH
55582: CALL_OW 12
55586: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
55587: LD_ADDR_OWVAR 31
55591: PUSH
55592: LD_INT 1
55594: PPUSH
55595: LD_INT 3
55597: PPUSH
55598: CALL_OW 12
55602: PUSH
55603: LD_INT 1
55605: PPUSH
55606: LD_INT 3
55608: PPUSH
55609: CALL_OW 12
55613: PUSH
55614: LD_INT 0
55616: PUSH
55617: LD_INT 0
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: ST_TO_ADDR
// animal := CreateHuman ;
55626: LD_ADDR_VAR 0 12
55630: PUSH
55631: CALL_OW 44
55635: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55636: LD_VAR 0 12
55640: PPUSH
55641: LD_VAR 0 8
55645: PPUSH
55646: LD_INT 0
55648: PPUSH
55649: CALL 57442 0 3
// end ;
55653: GO 55551
55655: POP
55656: POP
// if enchidnas then
55657: LD_VAR 0 4
55661: IFFALSE 55728
// for i = 1 to enchidnas do
55663: LD_ADDR_VAR 0 11
55667: PUSH
55668: DOUBLE
55669: LD_INT 1
55671: DEC
55672: ST_TO_ADDR
55673: LD_VAR 0 4
55677: PUSH
55678: FOR_TO
55679: IFFALSE 55726
// begin hc_class = 13 ;
55681: LD_ADDR_OWVAR 28
55685: PUSH
55686: LD_INT 13
55688: ST_TO_ADDR
// hc_gallery =  ;
55689: LD_ADDR_OWVAR 33
55693: PUSH
55694: LD_STRING 
55696: ST_TO_ADDR
// animal := CreateHuman ;
55697: LD_ADDR_VAR 0 12
55701: PUSH
55702: CALL_OW 44
55706: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55707: LD_VAR 0 12
55711: PPUSH
55712: LD_VAR 0 8
55716: PPUSH
55717: LD_INT 0
55719: PPUSH
55720: CALL 57442 0 3
// end ;
55724: GO 55678
55726: POP
55727: POP
// if fishes then
55728: LD_VAR 0 7
55732: IFFALSE 55799
// for i = 1 to fishes do
55734: LD_ADDR_VAR 0 11
55738: PUSH
55739: DOUBLE
55740: LD_INT 1
55742: DEC
55743: ST_TO_ADDR
55744: LD_VAR 0 7
55748: PUSH
55749: FOR_TO
55750: IFFALSE 55797
// begin hc_class = 20 ;
55752: LD_ADDR_OWVAR 28
55756: PUSH
55757: LD_INT 20
55759: ST_TO_ADDR
// hc_gallery =  ;
55760: LD_ADDR_OWVAR 33
55764: PUSH
55765: LD_STRING 
55767: ST_TO_ADDR
// animal := CreateHuman ;
55768: LD_ADDR_VAR 0 12
55772: PUSH
55773: CALL_OW 44
55777: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
55778: LD_VAR 0 12
55782: PPUSH
55783: LD_VAR 0 9
55787: PPUSH
55788: LD_INT 0
55790: PPUSH
55791: CALL 57442 0 3
// end ;
55795: GO 55749
55797: POP
55798: POP
// end ;
55799: LD_VAR 0 10
55803: RET
// export function WantHeal ( sci , unit ) ; begin
55804: LD_INT 0
55806: PPUSH
// if GetTaskList ( sci ) > 0 then
55807: LD_VAR 0 1
55811: PPUSH
55812: CALL_OW 437
55816: PUSH
55817: LD_INT 0
55819: GREATER
55820: IFFALSE 55892
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
55822: LD_VAR 0 1
55826: PPUSH
55827: CALL_OW 437
55831: PUSH
55832: LD_INT 1
55834: ARRAY
55835: PUSH
55836: LD_INT 1
55838: ARRAY
55839: PUSH
55840: LD_STRING l
55842: EQUAL
55843: IFFALSE 55870
55845: PUSH
55846: LD_VAR 0 1
55850: PPUSH
55851: CALL_OW 437
55855: PUSH
55856: LD_INT 1
55858: ARRAY
55859: PUSH
55860: LD_INT 4
55862: ARRAY
55863: PUSH
55864: LD_VAR 0 2
55868: EQUAL
55869: AND
55870: IFFALSE 55882
// result := true else
55872: LD_ADDR_VAR 0 3
55876: PUSH
55877: LD_INT 1
55879: ST_TO_ADDR
55880: GO 55890
// result := false ;
55882: LD_ADDR_VAR 0 3
55886: PUSH
55887: LD_INT 0
55889: ST_TO_ADDR
// end else
55890: GO 55900
// result := false ;
55892: LD_ADDR_VAR 0 3
55896: PUSH
55897: LD_INT 0
55899: ST_TO_ADDR
// end ;
55900: LD_VAR 0 3
55904: RET
// export function HealTarget ( sci ) ; begin
55905: LD_INT 0
55907: PPUSH
// if not sci then
55908: LD_VAR 0 1
55912: NOT
55913: IFFALSE 55917
// exit ;
55915: GO 55982
// result := 0 ;
55917: LD_ADDR_VAR 0 2
55921: PUSH
55922: LD_INT 0
55924: ST_TO_ADDR
// if GetTaskList ( sci ) then
55925: LD_VAR 0 1
55929: PPUSH
55930: CALL_OW 437
55934: IFFALSE 55982
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55936: LD_VAR 0 1
55940: PPUSH
55941: CALL_OW 437
55945: PUSH
55946: LD_INT 1
55948: ARRAY
55949: PUSH
55950: LD_INT 1
55952: ARRAY
55953: PUSH
55954: LD_STRING l
55956: EQUAL
55957: IFFALSE 55982
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55959: LD_ADDR_VAR 0 2
55963: PUSH
55964: LD_VAR 0 1
55968: PPUSH
55969: CALL_OW 437
55973: PUSH
55974: LD_INT 1
55976: ARRAY
55977: PUSH
55978: LD_INT 4
55980: ARRAY
55981: ST_TO_ADDR
// end ;
55982: LD_VAR 0 2
55986: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
55987: LD_INT 0
55989: PPUSH
55990: PPUSH
55991: PPUSH
55992: PPUSH
// if not base_units then
55993: LD_VAR 0 1
55997: NOT
55998: IFFALSE 56002
// exit ;
56000: GO 56089
// result := false ;
56002: LD_ADDR_VAR 0 2
56006: PUSH
56007: LD_INT 0
56009: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56010: LD_ADDR_VAR 0 5
56014: PUSH
56015: LD_VAR 0 1
56019: PPUSH
56020: LD_INT 21
56022: PUSH
56023: LD_INT 3
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PPUSH
56030: CALL_OW 72
56034: ST_TO_ADDR
// if not tmp then
56035: LD_VAR 0 5
56039: NOT
56040: IFFALSE 56044
// exit ;
56042: GO 56089
// for i in tmp do
56044: LD_ADDR_VAR 0 3
56048: PUSH
56049: LD_VAR 0 5
56053: PUSH
56054: FOR_IN
56055: IFFALSE 56087
// begin result := EnemyInRange ( i , 22 ) ;
56057: LD_ADDR_VAR 0 2
56061: PUSH
56062: LD_VAR 0 3
56066: PPUSH
56067: LD_INT 22
56069: PPUSH
56070: CALL 53504 0 2
56074: ST_TO_ADDR
// if result then
56075: LD_VAR 0 2
56079: IFFALSE 56085
// exit ;
56081: POP
56082: POP
56083: GO 56089
// end ;
56085: GO 56054
56087: POP
56088: POP
// end ;
56089: LD_VAR 0 2
56093: RET
// export function FilterByTag ( units , tag ) ; begin
56094: LD_INT 0
56096: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
56097: LD_ADDR_VAR 0 3
56101: PUSH
56102: LD_VAR 0 1
56106: PPUSH
56107: LD_INT 120
56109: PUSH
56110: LD_VAR 0 2
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PPUSH
56119: CALL_OW 72
56123: ST_TO_ADDR
// end ;
56124: LD_VAR 0 3
56128: RET
// export function IsDriver ( un ) ; begin
56129: LD_INT 0
56131: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56132: LD_ADDR_VAR 0 2
56136: PUSH
56137: LD_VAR 0 1
56141: PUSH
56142: LD_INT 55
56144: PUSH
56145: EMPTY
56146: LIST
56147: PPUSH
56148: CALL_OW 69
56152: IN
56153: ST_TO_ADDR
// end ;
56154: LD_VAR 0 2
56158: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56159: LD_INT 0
56161: PPUSH
56162: PPUSH
// list := [ ] ;
56163: LD_ADDR_VAR 0 5
56167: PUSH
56168: EMPTY
56169: ST_TO_ADDR
// case d of 0 :
56170: LD_VAR 0 3
56174: PUSH
56175: LD_INT 0
56177: DOUBLE
56178: EQUAL
56179: IFTRUE 56183
56181: GO 56316
56183: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56184: LD_ADDR_VAR 0 5
56188: PUSH
56189: LD_VAR 0 1
56193: PUSH
56194: LD_INT 4
56196: MINUS
56197: PUSH
56198: LD_VAR 0 2
56202: PUSH
56203: LD_INT 4
56205: MINUS
56206: PUSH
56207: LD_INT 2
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: LIST
56214: PUSH
56215: LD_VAR 0 1
56219: PUSH
56220: LD_INT 3
56222: MINUS
56223: PUSH
56224: LD_VAR 0 2
56228: PUSH
56229: LD_INT 1
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: LIST
56236: PUSH
56237: LD_VAR 0 1
56241: PUSH
56242: LD_INT 4
56244: PLUS
56245: PUSH
56246: LD_VAR 0 2
56250: PUSH
56251: LD_INT 4
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: LIST
56258: PUSH
56259: LD_VAR 0 1
56263: PUSH
56264: LD_INT 3
56266: PLUS
56267: PUSH
56268: LD_VAR 0 2
56272: PUSH
56273: LD_INT 3
56275: PLUS
56276: PUSH
56277: LD_INT 5
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: LIST
56284: PUSH
56285: LD_VAR 0 1
56289: PUSH
56290: LD_VAR 0 2
56294: PUSH
56295: LD_INT 4
56297: PLUS
56298: PUSH
56299: LD_INT 0
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: LIST
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: ST_TO_ADDR
// end ; 1 :
56314: GO 57014
56316: LD_INT 1
56318: DOUBLE
56319: EQUAL
56320: IFTRUE 56324
56322: GO 56457
56324: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56325: LD_ADDR_VAR 0 5
56329: PUSH
56330: LD_VAR 0 1
56334: PUSH
56335: LD_VAR 0 2
56339: PUSH
56340: LD_INT 4
56342: MINUS
56343: PUSH
56344: LD_INT 3
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: LIST
56351: PUSH
56352: LD_VAR 0 1
56356: PUSH
56357: LD_INT 3
56359: MINUS
56360: PUSH
56361: LD_VAR 0 2
56365: PUSH
56366: LD_INT 3
56368: MINUS
56369: PUSH
56370: LD_INT 2
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: LIST
56377: PUSH
56378: LD_VAR 0 1
56382: PUSH
56383: LD_INT 4
56385: MINUS
56386: PUSH
56387: LD_VAR 0 2
56391: PUSH
56392: LD_INT 1
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: LIST
56399: PUSH
56400: LD_VAR 0 1
56404: PUSH
56405: LD_VAR 0 2
56409: PUSH
56410: LD_INT 3
56412: PLUS
56413: PUSH
56414: LD_INT 0
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: LIST
56421: PUSH
56422: LD_VAR 0 1
56426: PUSH
56427: LD_INT 4
56429: PLUS
56430: PUSH
56431: LD_VAR 0 2
56435: PUSH
56436: LD_INT 4
56438: PLUS
56439: PUSH
56440: LD_INT 5
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: LIST
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: ST_TO_ADDR
// end ; 2 :
56455: GO 57014
56457: LD_INT 2
56459: DOUBLE
56460: EQUAL
56461: IFTRUE 56465
56463: GO 56594
56465: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56466: LD_ADDR_VAR 0 5
56470: PUSH
56471: LD_VAR 0 1
56475: PUSH
56476: LD_VAR 0 2
56480: PUSH
56481: LD_INT 3
56483: MINUS
56484: PUSH
56485: LD_INT 3
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: LIST
56492: PUSH
56493: LD_VAR 0 1
56497: PUSH
56498: LD_INT 4
56500: PLUS
56501: PUSH
56502: LD_VAR 0 2
56506: PUSH
56507: LD_INT 4
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: LIST
56514: PUSH
56515: LD_VAR 0 1
56519: PUSH
56520: LD_VAR 0 2
56524: PUSH
56525: LD_INT 4
56527: PLUS
56528: PUSH
56529: LD_INT 0
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: LIST
56536: PUSH
56537: LD_VAR 0 1
56541: PUSH
56542: LD_INT 3
56544: MINUS
56545: PUSH
56546: LD_VAR 0 2
56550: PUSH
56551: LD_INT 1
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: LIST
56558: PUSH
56559: LD_VAR 0 1
56563: PUSH
56564: LD_INT 4
56566: MINUS
56567: PUSH
56568: LD_VAR 0 2
56572: PUSH
56573: LD_INT 4
56575: MINUS
56576: PUSH
56577: LD_INT 2
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: LIST
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: ST_TO_ADDR
// end ; 3 :
56592: GO 57014
56594: LD_INT 3
56596: DOUBLE
56597: EQUAL
56598: IFTRUE 56602
56600: GO 56735
56602: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56603: LD_ADDR_VAR 0 5
56607: PUSH
56608: LD_VAR 0 1
56612: PUSH
56613: LD_INT 3
56615: PLUS
56616: PUSH
56617: LD_VAR 0 2
56621: PUSH
56622: LD_INT 4
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: LIST
56629: PUSH
56630: LD_VAR 0 1
56634: PUSH
56635: LD_INT 4
56637: PLUS
56638: PUSH
56639: LD_VAR 0 2
56643: PUSH
56644: LD_INT 4
56646: PLUS
56647: PUSH
56648: LD_INT 5
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: LIST
56655: PUSH
56656: LD_VAR 0 1
56660: PUSH
56661: LD_INT 4
56663: MINUS
56664: PUSH
56665: LD_VAR 0 2
56669: PUSH
56670: LD_INT 1
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: LIST
56677: PUSH
56678: LD_VAR 0 1
56682: PUSH
56683: LD_VAR 0 2
56687: PUSH
56688: LD_INT 4
56690: MINUS
56691: PUSH
56692: LD_INT 3
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: LIST
56699: PUSH
56700: LD_VAR 0 1
56704: PUSH
56705: LD_INT 3
56707: MINUS
56708: PUSH
56709: LD_VAR 0 2
56713: PUSH
56714: LD_INT 3
56716: MINUS
56717: PUSH
56718: LD_INT 2
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: LIST
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: ST_TO_ADDR
// end ; 4 :
56733: GO 57014
56735: LD_INT 4
56737: DOUBLE
56738: EQUAL
56739: IFTRUE 56743
56741: GO 56876
56743: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
56744: LD_ADDR_VAR 0 5
56748: PUSH
56749: LD_VAR 0 1
56753: PUSH
56754: LD_VAR 0 2
56758: PUSH
56759: LD_INT 4
56761: PLUS
56762: PUSH
56763: LD_INT 0
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: LIST
56770: PUSH
56771: LD_VAR 0 1
56775: PUSH
56776: LD_INT 3
56778: PLUS
56779: PUSH
56780: LD_VAR 0 2
56784: PUSH
56785: LD_INT 3
56787: PLUS
56788: PUSH
56789: LD_INT 5
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: LIST
56796: PUSH
56797: LD_VAR 0 1
56801: PUSH
56802: LD_INT 4
56804: PLUS
56805: PUSH
56806: LD_VAR 0 2
56810: PUSH
56811: LD_INT 4
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: LIST
56818: PUSH
56819: LD_VAR 0 1
56823: PUSH
56824: LD_VAR 0 2
56828: PUSH
56829: LD_INT 3
56831: MINUS
56832: PUSH
56833: LD_INT 3
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: LIST
56840: PUSH
56841: LD_VAR 0 1
56845: PUSH
56846: LD_INT 4
56848: MINUS
56849: PUSH
56850: LD_VAR 0 2
56854: PUSH
56855: LD_INT 4
56857: MINUS
56858: PUSH
56859: LD_INT 2
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: LIST
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: ST_TO_ADDR
// end ; 5 :
56874: GO 57014
56876: LD_INT 5
56878: DOUBLE
56879: EQUAL
56880: IFTRUE 56884
56882: GO 57013
56884: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
56885: LD_ADDR_VAR 0 5
56889: PUSH
56890: LD_VAR 0 1
56894: PUSH
56895: LD_INT 4
56897: MINUS
56898: PUSH
56899: LD_VAR 0 2
56903: PUSH
56904: LD_INT 1
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: LIST
56911: PUSH
56912: LD_VAR 0 1
56916: PUSH
56917: LD_VAR 0 2
56921: PUSH
56922: LD_INT 4
56924: MINUS
56925: PUSH
56926: LD_INT 3
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: LIST
56933: PUSH
56934: LD_VAR 0 1
56938: PUSH
56939: LD_INT 4
56941: PLUS
56942: PUSH
56943: LD_VAR 0 2
56947: PUSH
56948: LD_INT 4
56950: PLUS
56951: PUSH
56952: LD_INT 5
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: LIST
56959: PUSH
56960: LD_VAR 0 1
56964: PUSH
56965: LD_INT 3
56967: PLUS
56968: PUSH
56969: LD_VAR 0 2
56973: PUSH
56974: LD_INT 4
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: LIST
56981: PUSH
56982: LD_VAR 0 1
56986: PUSH
56987: LD_VAR 0 2
56991: PUSH
56992: LD_INT 3
56994: PLUS
56995: PUSH
56996: LD_INT 0
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: LIST
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: ST_TO_ADDR
// end ; end ;
57011: GO 57014
57013: POP
// result := list ;
57014: LD_ADDR_VAR 0 4
57018: PUSH
57019: LD_VAR 0 5
57023: ST_TO_ADDR
// end ;
57024: LD_VAR 0 4
57028: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57029: LD_INT 0
57031: PPUSH
57032: PPUSH
57033: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57034: LD_VAR 0 1
57038: NOT
57039: IFTRUE 57067
57041: PUSH
57042: LD_VAR 0 2
57046: PUSH
57047: LD_INT 1
57049: PUSH
57050: LD_INT 2
57052: PUSH
57053: LD_INT 3
57055: PUSH
57056: LD_INT 4
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: IN
57065: NOT
57066: OR
57067: IFFALSE 57071
// exit ;
57069: GO 57154
// tmp := [ ] ;
57071: LD_ADDR_VAR 0 5
57075: PUSH
57076: EMPTY
57077: ST_TO_ADDR
// for i in units do
57078: LD_ADDR_VAR 0 4
57082: PUSH
57083: LD_VAR 0 1
57087: PUSH
57088: FOR_IN
57089: IFFALSE 57123
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
57091: LD_ADDR_VAR 0 5
57095: PUSH
57096: LD_VAR 0 5
57100: PPUSH
57101: LD_VAR 0 4
57105: PPUSH
57106: LD_VAR 0 2
57110: PPUSH
57111: CALL_OW 259
57115: PPUSH
57116: CALL 58549 0 2
57120: ST_TO_ADDR
57121: GO 57088
57123: POP
57124: POP
// if not tmp then
57125: LD_VAR 0 5
57129: NOT
57130: IFFALSE 57134
// exit ;
57132: GO 57154
// result := SortListByListDesc ( units , tmp ) ;
57134: LD_ADDR_VAR 0 3
57138: PUSH
57139: LD_VAR 0 1
57143: PPUSH
57144: LD_VAR 0 5
57148: PPUSH
57149: CALL_OW 77
57153: ST_TO_ADDR
// end ;
57154: LD_VAR 0 3
57158: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57159: LD_INT 0
57161: PPUSH
57162: PPUSH
57163: PPUSH
// result := false ;
57164: LD_ADDR_VAR 0 3
57168: PUSH
57169: LD_INT 0
57171: ST_TO_ADDR
// if not building then
57172: LD_VAR 0 2
57176: NOT
57177: IFFALSE 57181
// exit ;
57179: GO 57325
// x := GetX ( building ) ;
57181: LD_ADDR_VAR 0 4
57185: PUSH
57186: LD_VAR 0 2
57190: PPUSH
57191: CALL_OW 250
57195: ST_TO_ADDR
// y := GetY ( building ) ;
57196: LD_ADDR_VAR 0 5
57200: PUSH
57201: LD_VAR 0 2
57205: PPUSH
57206: CALL_OW 251
57210: ST_TO_ADDR
// if not x or not y then
57211: LD_VAR 0 4
57215: NOT
57216: IFTRUE 57225
57218: PUSH
57219: LD_VAR 0 5
57223: NOT
57224: OR
57225: IFFALSE 57229
// exit ;
57227: GO 57325
// if GetTaskList ( unit ) then
57229: LD_VAR 0 1
57233: PPUSH
57234: CALL_OW 437
57238: IFFALSE 57325
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57240: LD_STRING e
57242: PUSH
57243: LD_VAR 0 1
57247: PPUSH
57248: CALL_OW 437
57252: PUSH
57253: LD_INT 1
57255: ARRAY
57256: PUSH
57257: LD_INT 1
57259: ARRAY
57260: EQUAL
57261: IFFALSE 57288
57263: PUSH
57264: LD_VAR 0 4
57268: PUSH
57269: LD_VAR 0 1
57273: PPUSH
57274: CALL_OW 437
57278: PUSH
57279: LD_INT 1
57281: ARRAY
57282: PUSH
57283: LD_INT 2
57285: ARRAY
57286: EQUAL
57287: AND
57288: IFFALSE 57315
57290: PUSH
57291: LD_VAR 0 5
57295: PUSH
57296: LD_VAR 0 1
57300: PPUSH
57301: CALL_OW 437
57305: PUSH
57306: LD_INT 1
57308: ARRAY
57309: PUSH
57310: LD_INT 3
57312: ARRAY
57313: EQUAL
57314: AND
57315: IFFALSE 57325
// result := true end ;
57317: LD_ADDR_VAR 0 3
57321: PUSH
57322: LD_INT 1
57324: ST_TO_ADDR
// end ;
57325: LD_VAR 0 3
57329: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
57330: LD_INT 0
57332: PPUSH
// result := false ;
57333: LD_ADDR_VAR 0 4
57337: PUSH
57338: LD_INT 0
57340: ST_TO_ADDR
// if GetTaskList ( unit ) then
57341: LD_VAR 0 1
57345: PPUSH
57346: CALL_OW 437
57350: IFFALSE 57437
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57352: LD_STRING M
57354: PUSH
57355: LD_VAR 0 1
57359: PPUSH
57360: CALL_OW 437
57364: PUSH
57365: LD_INT 1
57367: ARRAY
57368: PUSH
57369: LD_INT 1
57371: ARRAY
57372: EQUAL
57373: IFFALSE 57400
57375: PUSH
57376: LD_VAR 0 2
57380: PUSH
57381: LD_VAR 0 1
57385: PPUSH
57386: CALL_OW 437
57390: PUSH
57391: LD_INT 1
57393: ARRAY
57394: PUSH
57395: LD_INT 2
57397: ARRAY
57398: EQUAL
57399: AND
57400: IFFALSE 57427
57402: PUSH
57403: LD_VAR 0 3
57407: PUSH
57408: LD_VAR 0 1
57412: PPUSH
57413: CALL_OW 437
57417: PUSH
57418: LD_INT 1
57420: ARRAY
57421: PUSH
57422: LD_INT 3
57424: ARRAY
57425: EQUAL
57426: AND
57427: IFFALSE 57437
// result := true ;
57429: LD_ADDR_VAR 0 4
57433: PUSH
57434: LD_INT 1
57436: ST_TO_ADDR
// end ; end ;
57437: LD_VAR 0 4
57441: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57442: LD_INT 0
57444: PPUSH
57445: PPUSH
57446: PPUSH
57447: PPUSH
// if not unit or not area then
57448: LD_VAR 0 1
57452: NOT
57453: IFTRUE 57462
57455: PUSH
57456: LD_VAR 0 2
57460: NOT
57461: OR
57462: IFFALSE 57466
// exit ;
57464: GO 57642
// tmp := AreaToList ( area , i ) ;
57466: LD_ADDR_VAR 0 6
57470: PUSH
57471: LD_VAR 0 2
57475: PPUSH
57476: LD_VAR 0 5
57480: PPUSH
57481: CALL_OW 517
57485: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57486: LD_ADDR_VAR 0 5
57490: PUSH
57491: DOUBLE
57492: LD_INT 1
57494: DEC
57495: ST_TO_ADDR
57496: LD_VAR 0 6
57500: PUSH
57501: LD_INT 1
57503: ARRAY
57504: PUSH
57505: FOR_TO
57506: IFFALSE 57640
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57508: LD_ADDR_VAR 0 7
57512: PUSH
57513: LD_VAR 0 6
57517: PUSH
57518: LD_INT 1
57520: ARRAY
57521: PUSH
57522: LD_VAR 0 5
57526: ARRAY
57527: PUSH
57528: LD_VAR 0 6
57532: PUSH
57533: LD_INT 2
57535: ARRAY
57536: PUSH
57537: LD_VAR 0 5
57541: ARRAY
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
57547: LD_INT 92
57549: PUSH
57550: LD_VAR 0 7
57554: PUSH
57555: LD_INT 1
57557: ARRAY
57558: PUSH
57559: LD_VAR 0 7
57563: PUSH
57564: LD_INT 2
57566: ARRAY
57567: PUSH
57568: LD_INT 2
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: PPUSH
57577: CALL_OW 69
57581: PUSH
57582: LD_INT 0
57584: EQUAL
57585: IFFALSE 57638
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
57587: LD_VAR 0 1
57591: PPUSH
57592: LD_VAR 0 7
57596: PUSH
57597: LD_INT 1
57599: ARRAY
57600: PPUSH
57601: LD_VAR 0 7
57605: PUSH
57606: LD_INT 2
57608: ARRAY
57609: PPUSH
57610: LD_VAR 0 3
57614: PPUSH
57615: CALL_OW 48
// result := IsPlaced ( unit ) ;
57619: LD_ADDR_VAR 0 4
57623: PUSH
57624: LD_VAR 0 1
57628: PPUSH
57629: CALL_OW 305
57633: ST_TO_ADDR
// exit ;
57634: POP
57635: POP
57636: GO 57642
// end ; end ;
57638: GO 57505
57640: POP
57641: POP
// end ;
57642: LD_VAR 0 4
57646: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57647: LD_INT 0
57649: PPUSH
57650: PPUSH
57651: PPUSH
// if not side or side > 8 then
57652: LD_VAR 0 1
57656: NOT
57657: IFTRUE 57669
57659: PUSH
57660: LD_VAR 0 1
57664: PUSH
57665: LD_INT 8
57667: GREATER
57668: OR
57669: IFFALSE 57673
// exit ;
57671: GO 57860
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57673: LD_ADDR_VAR 0 4
57677: PUSH
57678: LD_INT 22
57680: PUSH
57681: LD_VAR 0 1
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 21
57692: PUSH
57693: LD_INT 3
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PPUSH
57704: CALL_OW 69
57708: ST_TO_ADDR
// if not tmp then
57709: LD_VAR 0 4
57713: NOT
57714: IFFALSE 57718
// exit ;
57716: GO 57860
// enable_addtolog := true ;
57718: LD_ADDR_OWVAR 81
57722: PUSH
57723: LD_INT 1
57725: ST_TO_ADDR
// AddToLog ( [ ) ;
57726: LD_STRING [
57728: PPUSH
57729: CALL_OW 561
// for i in tmp do
57733: LD_ADDR_VAR 0 3
57737: PUSH
57738: LD_VAR 0 4
57742: PUSH
57743: FOR_IN
57744: IFFALSE 57851
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57746: LD_STRING [
57748: PUSH
57749: LD_VAR 0 3
57753: PPUSH
57754: CALL_OW 266
57758: STR
57759: PUSH
57760: LD_STRING , 
57762: STR
57763: PUSH
57764: LD_VAR 0 3
57768: PPUSH
57769: CALL_OW 250
57773: STR
57774: PUSH
57775: LD_STRING , 
57777: STR
57778: PUSH
57779: LD_VAR 0 3
57783: PPUSH
57784: CALL_OW 251
57788: STR
57789: PUSH
57790: LD_STRING , 
57792: STR
57793: PUSH
57794: LD_VAR 0 3
57798: PPUSH
57799: CALL_OW 254
57803: STR
57804: PUSH
57805: LD_STRING , 
57807: STR
57808: PUSH
57809: LD_VAR 0 3
57813: PPUSH
57814: LD_INT 1
57816: PPUSH
57817: CALL_OW 268
57821: STR
57822: PUSH
57823: LD_STRING , 
57825: STR
57826: PUSH
57827: LD_VAR 0 3
57831: PPUSH
57832: LD_INT 2
57834: PPUSH
57835: CALL_OW 268
57839: STR
57840: PUSH
57841: LD_STRING ],
57843: STR
57844: PPUSH
57845: CALL_OW 561
// end ;
57849: GO 57743
57851: POP
57852: POP
// AddToLog ( ]; ) ;
57853: LD_STRING ];
57855: PPUSH
57856: CALL_OW 561
// end ;
57860: LD_VAR 0 2
57864: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
57865: LD_INT 0
57867: PPUSH
57868: PPUSH
57869: PPUSH
57870: PPUSH
57871: PPUSH
// if not area or not rate or not max then
57872: LD_VAR 0 1
57876: NOT
57877: IFTRUE 57886
57879: PUSH
57880: LD_VAR 0 2
57884: NOT
57885: OR
57886: IFTRUE 57895
57888: PUSH
57889: LD_VAR 0 4
57893: NOT
57894: OR
57895: IFFALSE 57899
// exit ;
57897: GO 58088
// while 1 do
57899: LD_INT 1
57901: IFFALSE 58088
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
57903: LD_ADDR_VAR 0 9
57907: PUSH
57908: LD_VAR 0 1
57912: PPUSH
57913: LD_INT 1
57915: PPUSH
57916: CALL_OW 287
57920: PUSH
57921: LD_INT 10
57923: MUL
57924: ST_TO_ADDR
// r := rate / 10 ;
57925: LD_ADDR_VAR 0 7
57929: PUSH
57930: LD_VAR 0 2
57934: PUSH
57935: LD_INT 10
57937: DIVREAL
57938: ST_TO_ADDR
// time := 1 1$00 ;
57939: LD_ADDR_VAR 0 8
57943: PUSH
57944: LD_INT 2100
57946: ST_TO_ADDR
// if amount < min then
57947: LD_VAR 0 9
57951: PUSH
57952: LD_VAR 0 3
57956: LESS
57957: IFFALSE 57975
// r := r * 2 else
57959: LD_ADDR_VAR 0 7
57963: PUSH
57964: LD_VAR 0 7
57968: PUSH
57969: LD_INT 2
57971: MUL
57972: ST_TO_ADDR
57973: GO 58001
// if amount > max then
57975: LD_VAR 0 9
57979: PUSH
57980: LD_VAR 0 4
57984: GREATER
57985: IFFALSE 58001
// r := r / 2 ;
57987: LD_ADDR_VAR 0 7
57991: PUSH
57992: LD_VAR 0 7
57996: PUSH
57997: LD_INT 2
57999: DIVREAL
58000: ST_TO_ADDR
// time := time / r ;
58001: LD_ADDR_VAR 0 8
58005: PUSH
58006: LD_VAR 0 8
58010: PUSH
58011: LD_VAR 0 7
58015: DIVREAL
58016: ST_TO_ADDR
// if time < 0 then
58017: LD_VAR 0 8
58021: PUSH
58022: LD_INT 0
58024: LESS
58025: IFFALSE 58042
// time := time * - 1 ;
58027: LD_ADDR_VAR 0 8
58031: PUSH
58032: LD_VAR 0 8
58036: PUSH
58037: LD_INT 1
58039: NEG
58040: MUL
58041: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
58042: LD_VAR 0 8
58046: PUSH
58047: LD_INT 35
58049: PPUSH
58050: LD_INT 875
58052: PPUSH
58053: CALL_OW 12
58057: PLUS
58058: PPUSH
58059: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58063: LD_INT 1
58065: PPUSH
58066: LD_INT 5
58068: PPUSH
58069: CALL_OW 12
58073: PPUSH
58074: LD_VAR 0 1
58078: PPUSH
58079: LD_INT 1
58081: PPUSH
58082: CALL_OW 55
// end ;
58086: GO 57899
// end ;
58088: LD_VAR 0 5
58092: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58093: LD_INT 0
58095: PPUSH
58096: PPUSH
58097: PPUSH
58098: PPUSH
58099: PPUSH
58100: PPUSH
58101: PPUSH
58102: PPUSH
// if not turrets or not factories then
58103: LD_VAR 0 1
58107: NOT
58108: IFTRUE 58117
58110: PUSH
58111: LD_VAR 0 2
58115: NOT
58116: OR
58117: IFFALSE 58121
// exit ;
58119: GO 58428
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58121: LD_ADDR_VAR 0 10
58125: PUSH
58126: LD_INT 5
58128: PUSH
58129: LD_INT 6
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 2
58138: PUSH
58139: LD_INT 4
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 3
58148: PUSH
58149: LD_INT 5
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 24
58163: PUSH
58164: LD_INT 25
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 23
58173: PUSH
58174: LD_INT 27
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 42
58187: PUSH
58188: LD_INT 43
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 44
58197: PUSH
58198: LD_INT 46
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 45
58207: PUSH
58208: LD_INT 47
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: LIST
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: LIST
58224: ST_TO_ADDR
// result := [ ] ;
58225: LD_ADDR_VAR 0 3
58229: PUSH
58230: EMPTY
58231: ST_TO_ADDR
// for i in turrets do
58232: LD_ADDR_VAR 0 4
58236: PUSH
58237: LD_VAR 0 1
58241: PUSH
58242: FOR_IN
58243: IFFALSE 58426
// begin nat := GetNation ( i ) ;
58245: LD_ADDR_VAR 0 7
58249: PUSH
58250: LD_VAR 0 4
58254: PPUSH
58255: CALL_OW 248
58259: ST_TO_ADDR
// weapon := 0 ;
58260: LD_ADDR_VAR 0 8
58264: PUSH
58265: LD_INT 0
58267: ST_TO_ADDR
// if not nat then
58268: LD_VAR 0 7
58272: NOT
58273: IFFALSE 58277
// continue ;
58275: GO 58242
// for j in list [ nat ] do
58277: LD_ADDR_VAR 0 5
58281: PUSH
58282: LD_VAR 0 10
58286: PUSH
58287: LD_VAR 0 7
58291: ARRAY
58292: PUSH
58293: FOR_IN
58294: IFFALSE 58335
// if GetBWeapon ( i ) = j [ 1 ] then
58296: LD_VAR 0 4
58300: PPUSH
58301: CALL_OW 269
58305: PUSH
58306: LD_VAR 0 5
58310: PUSH
58311: LD_INT 1
58313: ARRAY
58314: EQUAL
58315: IFFALSE 58333
// begin weapon := j [ 2 ] ;
58317: LD_ADDR_VAR 0 8
58321: PUSH
58322: LD_VAR 0 5
58326: PUSH
58327: LD_INT 2
58329: ARRAY
58330: ST_TO_ADDR
// break ;
58331: GO 58335
// end ;
58333: GO 58293
58335: POP
58336: POP
// if not weapon then
58337: LD_VAR 0 8
58341: NOT
58342: IFFALSE 58346
// continue ;
58344: GO 58242
// for k in factories do
58346: LD_ADDR_VAR 0 6
58350: PUSH
58351: LD_VAR 0 2
58355: PUSH
58356: FOR_IN
58357: IFFALSE 58422
// begin weapons := AvailableWeaponList ( k ) ;
58359: LD_ADDR_VAR 0 9
58363: PUSH
58364: LD_VAR 0 6
58368: PPUSH
58369: CALL_OW 478
58373: ST_TO_ADDR
// if not weapons then
58374: LD_VAR 0 9
58378: NOT
58379: IFFALSE 58383
// continue ;
58381: GO 58356
// if weapon in weapons then
58383: LD_VAR 0 8
58387: PUSH
58388: LD_VAR 0 9
58392: IN
58393: IFFALSE 58420
// begin result := [ i , weapon ] ;
58395: LD_ADDR_VAR 0 3
58399: PUSH
58400: LD_VAR 0 4
58404: PUSH
58405: LD_VAR 0 8
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: ST_TO_ADDR
// exit ;
58414: POP
58415: POP
58416: POP
58417: POP
58418: GO 58428
// end ; end ;
58420: GO 58356
58422: POP
58423: POP
// end ;
58424: GO 58242
58426: POP
58427: POP
// end ;
58428: LD_VAR 0 3
58432: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58433: LD_INT 0
58435: PPUSH
// if not side or side > 8 then
58436: LD_VAR 0 3
58440: NOT
58441: IFTRUE 58453
58443: PUSH
58444: LD_VAR 0 3
58448: PUSH
58449: LD_INT 8
58451: GREATER
58452: OR
58453: IFFALSE 58457
// exit ;
58455: GO 58516
// if not range then
58457: LD_VAR 0 4
58461: NOT
58462: IFFALSE 58473
// range := - 12 ;
58464: LD_ADDR_VAR 0 4
58468: PUSH
58469: LD_INT 12
58471: NEG
58472: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58473: LD_VAR 0 1
58477: PPUSH
58478: LD_VAR 0 2
58482: PPUSH
58483: LD_VAR 0 3
58487: PPUSH
58488: LD_VAR 0 4
58492: PPUSH
58493: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58497: LD_VAR 0 1
58501: PPUSH
58502: LD_VAR 0 2
58506: PPUSH
58507: LD_VAR 0 3
58511: PPUSH
58512: CALL_OW 331
// end ;
58516: LD_VAR 0 5
58520: RET
// export function Video ( mode ) ; begin
58521: LD_INT 0
58523: PPUSH
// ingame_video = mode ;
58524: LD_ADDR_OWVAR 52
58528: PUSH
58529: LD_VAR 0 1
58533: ST_TO_ADDR
// interface_hidden = mode ;
58534: LD_ADDR_OWVAR 54
58538: PUSH
58539: LD_VAR 0 1
58543: ST_TO_ADDR
// end ;
58544: LD_VAR 0 2
58548: RET
// export function Join ( array , element ) ; begin
58549: LD_INT 0
58551: PPUSH
// result := Replace ( array , array + 1 , element ) ;
58552: LD_ADDR_VAR 0 3
58556: PUSH
58557: LD_VAR 0 1
58561: PPUSH
58562: LD_VAR 0 1
58566: PUSH
58567: LD_INT 1
58569: PLUS
58570: PPUSH
58571: LD_VAR 0 2
58575: PPUSH
58576: CALL_OW 1
58580: ST_TO_ADDR
// end ;
58581: LD_VAR 0 3
58585: RET
// export function JoinUnion ( array , element ) ; begin
58586: LD_INT 0
58588: PPUSH
// result := array union element ;
58589: LD_ADDR_VAR 0 3
58593: PUSH
58594: LD_VAR 0 1
58598: PUSH
58599: LD_VAR 0 2
58603: UNION
58604: ST_TO_ADDR
// end ;
58605: LD_VAR 0 3
58609: RET
// export function GetBehemoths ( side ) ; begin
58610: LD_INT 0
58612: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
58613: LD_ADDR_VAR 0 2
58617: PUSH
58618: LD_INT 22
58620: PUSH
58621: LD_VAR 0 1
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 31
58632: PUSH
58633: LD_INT 25
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PPUSH
58644: CALL_OW 69
58648: ST_TO_ADDR
// end ;
58649: LD_VAR 0 2
58653: RET
// export function Shuffle ( array ) ; var i , index ; begin
58654: LD_INT 0
58656: PPUSH
58657: PPUSH
58658: PPUSH
// result := [ ] ;
58659: LD_ADDR_VAR 0 2
58663: PUSH
58664: EMPTY
58665: ST_TO_ADDR
// if not array then
58666: LD_VAR 0 1
58670: NOT
58671: IFFALSE 58675
// exit ;
58673: GO 58774
// Randomize ;
58675: CALL_OW 10
// for i = array downto 1 do
58679: LD_ADDR_VAR 0 3
58683: PUSH
58684: DOUBLE
58685: LD_VAR 0 1
58689: INC
58690: ST_TO_ADDR
58691: LD_INT 1
58693: PUSH
58694: FOR_DOWNTO
58695: IFFALSE 58772
// begin index := rand ( 1 , array ) ;
58697: LD_ADDR_VAR 0 4
58701: PUSH
58702: LD_INT 1
58704: PPUSH
58705: LD_VAR 0 1
58709: PPUSH
58710: CALL_OW 12
58714: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58715: LD_ADDR_VAR 0 2
58719: PUSH
58720: LD_VAR 0 2
58724: PPUSH
58725: LD_VAR 0 2
58729: PUSH
58730: LD_INT 1
58732: PLUS
58733: PPUSH
58734: LD_VAR 0 1
58738: PUSH
58739: LD_VAR 0 4
58743: ARRAY
58744: PPUSH
58745: CALL_OW 2
58749: ST_TO_ADDR
// array := Delete ( array , index ) ;
58750: LD_ADDR_VAR 0 1
58754: PUSH
58755: LD_VAR 0 1
58759: PPUSH
58760: LD_VAR 0 4
58764: PPUSH
58765: CALL_OW 3
58769: ST_TO_ADDR
// end ;
58770: GO 58694
58772: POP
58773: POP
// end ;
58774: LD_VAR 0 2
58778: RET
// export function GetBaseMaterials ( base ) ; begin
58779: LD_INT 0
58781: PPUSH
// result := [ 0 , 0 , 0 ] ;
58782: LD_ADDR_VAR 0 2
58786: PUSH
58787: LD_INT 0
58789: PUSH
58790: LD_INT 0
58792: PUSH
58793: LD_INT 0
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: LIST
58800: ST_TO_ADDR
// if not base then
58801: LD_VAR 0 1
58805: NOT
58806: IFFALSE 58810
// exit ;
58808: GO 58859
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
58810: LD_ADDR_VAR 0 2
58814: PUSH
58815: LD_VAR 0 1
58819: PPUSH
58820: LD_INT 1
58822: PPUSH
58823: CALL_OW 275
58827: PUSH
58828: LD_VAR 0 1
58832: PPUSH
58833: LD_INT 2
58835: PPUSH
58836: CALL_OW 275
58840: PUSH
58841: LD_VAR 0 1
58845: PPUSH
58846: LD_INT 3
58848: PPUSH
58849: CALL_OW 275
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: LIST
58858: ST_TO_ADDR
// end ;
58859: LD_VAR 0 2
58863: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
58864: LD_INT 0
58866: PPUSH
58867: PPUSH
// result := array ;
58868: LD_ADDR_VAR 0 3
58872: PUSH
58873: LD_VAR 0 1
58877: ST_TO_ADDR
// if size >= result then
58878: LD_VAR 0 2
58882: PUSH
58883: LD_VAR 0 3
58887: GREATEREQUAL
58888: IFFALSE 58892
// exit ;
58890: GO 58942
// if size then
58892: LD_VAR 0 2
58896: IFFALSE 58942
// for i := array downto size do
58898: LD_ADDR_VAR 0 4
58902: PUSH
58903: DOUBLE
58904: LD_VAR 0 1
58908: INC
58909: ST_TO_ADDR
58910: LD_VAR 0 2
58914: PUSH
58915: FOR_DOWNTO
58916: IFFALSE 58940
// result := Delete ( result , result ) ;
58918: LD_ADDR_VAR 0 3
58922: PUSH
58923: LD_VAR 0 3
58927: PPUSH
58928: LD_VAR 0 3
58932: PPUSH
58933: CALL_OW 3
58937: ST_TO_ADDR
58938: GO 58915
58940: POP
58941: POP
// end ;
58942: LD_VAR 0 3
58946: RET
// export function ComExit ( unit ) ; var tmp ; begin
58947: LD_INT 0
58949: PPUSH
58950: PPUSH
// if not IsInUnit ( unit ) then
58951: LD_VAR 0 1
58955: PPUSH
58956: CALL_OW 310
58960: NOT
58961: IFFALSE 58965
// exit ;
58963: GO 59025
// tmp := IsInUnit ( unit ) ;
58965: LD_ADDR_VAR 0 3
58969: PUSH
58970: LD_VAR 0 1
58974: PPUSH
58975: CALL_OW 310
58979: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
58980: LD_VAR 0 3
58984: PPUSH
58985: CALL_OW 247
58989: PUSH
58990: LD_INT 2
58992: EQUAL
58993: IFFALSE 59006
// ComExitVehicle ( unit ) else
58995: LD_VAR 0 1
58999: PPUSH
59000: CALL_OW 121
59004: GO 59015
// ComExitBuilding ( unit ) ;
59006: LD_VAR 0 1
59010: PPUSH
59011: CALL_OW 122
// result := tmp ;
59015: LD_ADDR_VAR 0 2
59019: PUSH
59020: LD_VAR 0 3
59024: ST_TO_ADDR
// end ;
59025: LD_VAR 0 2
59029: RET
// export function ComExitAll ( units ) ; var i ; begin
59030: LD_INT 0
59032: PPUSH
59033: PPUSH
// if not units then
59034: LD_VAR 0 1
59038: NOT
59039: IFFALSE 59043
// exit ;
59041: GO 59069
// for i in units do
59043: LD_ADDR_VAR 0 3
59047: PUSH
59048: LD_VAR 0 1
59052: PUSH
59053: FOR_IN
59054: IFFALSE 59067
// ComExit ( i ) ;
59056: LD_VAR 0 3
59060: PPUSH
59061: CALL 58947 0 1
59065: GO 59053
59067: POP
59068: POP
// end ;
59069: LD_VAR 0 2
59073: RET
// export function ResetHc ; begin
59074: LD_INT 0
59076: PPUSH
// InitHc ;
59077: CALL_OW 19
// hc_importance := 0 ;
59081: LD_ADDR_OWVAR 32
59085: PUSH
59086: LD_INT 0
59088: ST_TO_ADDR
// end ;
59089: LD_VAR 0 1
59093: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59094: LD_INT 0
59096: PPUSH
59097: PPUSH
59098: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59099: LD_ADDR_VAR 0 6
59103: PUSH
59104: LD_VAR 0 1
59108: PUSH
59109: LD_VAR 0 3
59113: PLUS
59114: PUSH
59115: LD_INT 2
59117: DIV
59118: ST_TO_ADDR
// if _x < 0 then
59119: LD_VAR 0 6
59123: PUSH
59124: LD_INT 0
59126: LESS
59127: IFFALSE 59144
// _x := _x * - 1 ;
59129: LD_ADDR_VAR 0 6
59133: PUSH
59134: LD_VAR 0 6
59138: PUSH
59139: LD_INT 1
59141: NEG
59142: MUL
59143: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
59144: LD_ADDR_VAR 0 7
59148: PUSH
59149: LD_VAR 0 2
59153: PUSH
59154: LD_VAR 0 4
59158: PLUS
59159: PUSH
59160: LD_INT 2
59162: DIV
59163: ST_TO_ADDR
// if _y < 0 then
59164: LD_VAR 0 7
59168: PUSH
59169: LD_INT 0
59171: LESS
59172: IFFALSE 59189
// _y := _y * - 1 ;
59174: LD_ADDR_VAR 0 7
59178: PUSH
59179: LD_VAR 0 7
59183: PUSH
59184: LD_INT 1
59186: NEG
59187: MUL
59188: ST_TO_ADDR
// result := [ _x , _y ] ;
59189: LD_ADDR_VAR 0 5
59193: PUSH
59194: LD_VAR 0 6
59198: PUSH
59199: LD_VAR 0 7
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: ST_TO_ADDR
// end ;
59208: LD_VAR 0 5
59212: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
59213: LD_INT 0
59215: PPUSH
59216: PPUSH
59217: PPUSH
59218: PPUSH
// task := GetTaskList ( unit ) ;
59219: LD_ADDR_VAR 0 7
59223: PUSH
59224: LD_VAR 0 1
59228: PPUSH
59229: CALL_OW 437
59233: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
59234: LD_VAR 0 7
59238: NOT
59239: IFFALSE 59258
59241: PUSH
59242: LD_VAR 0 1
59246: PPUSH
59247: LD_VAR 0 2
59251: PPUSH
59252: CALL_OW 308
59256: NOT
59257: AND
59258: IFFALSE 59262
// exit ;
59260: GO 59380
// if IsInArea ( unit , area ) then
59262: LD_VAR 0 1
59266: PPUSH
59267: LD_VAR 0 2
59271: PPUSH
59272: CALL_OW 308
59276: IFFALSE 59294
// begin ComMoveToArea ( unit , goAway ) ;
59278: LD_VAR 0 1
59282: PPUSH
59283: LD_VAR 0 3
59287: PPUSH
59288: CALL_OW 113
// exit ;
59292: GO 59380
// end ; if task [ 1 ] [ 1 ] <> M then
59294: LD_VAR 0 7
59298: PUSH
59299: LD_INT 1
59301: ARRAY
59302: PUSH
59303: LD_INT 1
59305: ARRAY
59306: PUSH
59307: LD_STRING M
59309: NONEQUAL
59310: IFFALSE 59314
// exit ;
59312: GO 59380
// x := task [ 1 ] [ 2 ] ;
59314: LD_ADDR_VAR 0 5
59318: PUSH
59319: LD_VAR 0 7
59323: PUSH
59324: LD_INT 1
59326: ARRAY
59327: PUSH
59328: LD_INT 2
59330: ARRAY
59331: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
59332: LD_ADDR_VAR 0 6
59336: PUSH
59337: LD_VAR 0 7
59341: PUSH
59342: LD_INT 1
59344: ARRAY
59345: PUSH
59346: LD_INT 3
59348: ARRAY
59349: ST_TO_ADDR
// if InArea ( x , y , area ) then
59350: LD_VAR 0 5
59354: PPUSH
59355: LD_VAR 0 6
59359: PPUSH
59360: LD_VAR 0 2
59364: PPUSH
59365: CALL_OW 309
59369: IFFALSE 59380
// ComStop ( unit ) ;
59371: LD_VAR 0 1
59375: PPUSH
59376: CALL_OW 141
// end ;
59380: LD_VAR 0 4
59384: RET
// export function Abs ( value ) ; begin
59385: LD_INT 0
59387: PPUSH
// result := value ;
59388: LD_ADDR_VAR 0 2
59392: PUSH
59393: LD_VAR 0 1
59397: ST_TO_ADDR
// if value < 0 then
59398: LD_VAR 0 1
59402: PUSH
59403: LD_INT 0
59405: LESS
59406: IFFALSE 59423
// result := value * - 1 ;
59408: LD_ADDR_VAR 0 2
59412: PUSH
59413: LD_VAR 0 1
59417: PUSH
59418: LD_INT 1
59420: NEG
59421: MUL
59422: ST_TO_ADDR
// end ;
59423: LD_VAR 0 2
59427: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
59428: LD_INT 0
59430: PPUSH
59431: PPUSH
59432: PPUSH
59433: PPUSH
59434: PPUSH
59435: PPUSH
59436: PPUSH
59437: PPUSH
// if not unit or not building then
59438: LD_VAR 0 1
59442: NOT
59443: IFTRUE 59452
59445: PUSH
59446: LD_VAR 0 2
59450: NOT
59451: OR
59452: IFFALSE 59456
// exit ;
59454: GO 59684
// x := GetX ( building ) ;
59456: LD_ADDR_VAR 0 4
59460: PUSH
59461: LD_VAR 0 2
59465: PPUSH
59466: CALL_OW 250
59470: ST_TO_ADDR
// y := GetY ( building ) ;
59471: LD_ADDR_VAR 0 6
59475: PUSH
59476: LD_VAR 0 2
59480: PPUSH
59481: CALL_OW 251
59485: ST_TO_ADDR
// d := GetDir ( building ) ;
59486: LD_ADDR_VAR 0 8
59490: PUSH
59491: LD_VAR 0 2
59495: PPUSH
59496: CALL_OW 254
59500: ST_TO_ADDR
// r := 4 ;
59501: LD_ADDR_VAR 0 9
59505: PUSH
59506: LD_INT 4
59508: ST_TO_ADDR
// for i := 1 to 5 do
59509: LD_ADDR_VAR 0 10
59513: PUSH
59514: DOUBLE
59515: LD_INT 1
59517: DEC
59518: ST_TO_ADDR
59519: LD_INT 5
59521: PUSH
59522: FOR_TO
59523: IFFALSE 59682
// begin _x := ShiftX ( x , d , r + i ) ;
59525: LD_ADDR_VAR 0 5
59529: PUSH
59530: LD_VAR 0 4
59534: PPUSH
59535: LD_VAR 0 8
59539: PPUSH
59540: LD_VAR 0 9
59544: PUSH
59545: LD_VAR 0 10
59549: PLUS
59550: PPUSH
59551: CALL_OW 272
59555: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
59556: LD_ADDR_VAR 0 7
59560: PUSH
59561: LD_VAR 0 6
59565: PPUSH
59566: LD_VAR 0 8
59570: PPUSH
59571: LD_VAR 0 9
59575: PUSH
59576: LD_VAR 0 10
59580: PLUS
59581: PPUSH
59582: CALL_OW 273
59586: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
59587: LD_VAR 0 5
59591: PPUSH
59592: LD_VAR 0 7
59596: PPUSH
59597: CALL_OW 488
59601: IFFALSE 59636
59603: PUSH
59604: LD_VAR 0 5
59608: PPUSH
59609: LD_VAR 0 7
59613: PPUSH
59614: CALL_OW 428
59618: PPUSH
59619: CALL_OW 247
59623: PUSH
59624: LD_INT 3
59626: PUSH
59627: LD_INT 2
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: IN
59634: NOT
59635: AND
59636: IFFALSE 59680
// begin ComMoveXY ( unit , _x , _y ) ;
59638: LD_VAR 0 1
59642: PPUSH
59643: LD_VAR 0 5
59647: PPUSH
59648: LD_VAR 0 7
59652: PPUSH
59653: CALL_OW 111
// result := [ _x , _y ] ;
59657: LD_ADDR_VAR 0 3
59661: PUSH
59662: LD_VAR 0 5
59666: PUSH
59667: LD_VAR 0 7
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: ST_TO_ADDR
// exit ;
59676: POP
59677: POP
59678: GO 59684
// end ; end ;
59680: GO 59522
59682: POP
59683: POP
// end ;
59684: LD_VAR 0 3
59688: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
59689: LD_INT 0
59691: PPUSH
59692: PPUSH
59693: PPUSH
// result := 0 ;
59694: LD_ADDR_VAR 0 3
59698: PUSH
59699: LD_INT 0
59701: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
59702: LD_VAR 0 1
59706: PUSH
59707: LD_INT 0
59709: LESS
59710: IFTRUE 59722
59712: PUSH
59713: LD_VAR 0 1
59717: PUSH
59718: LD_INT 8
59720: GREATER
59721: OR
59722: IFTRUE 59734
59724: PUSH
59725: LD_VAR 0 2
59729: PUSH
59730: LD_INT 0
59732: LESS
59733: OR
59734: IFTRUE 59746
59736: PUSH
59737: LD_VAR 0 2
59741: PUSH
59742: LD_INT 8
59744: GREATER
59745: OR
59746: IFFALSE 59750
// exit ;
59748: GO 59825
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
59750: LD_ADDR_VAR 0 4
59754: PUSH
59755: LD_INT 22
59757: PUSH
59758: LD_VAR 0 2
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PPUSH
59767: CALL_OW 69
59771: PUSH
59772: FOR_IN
59773: IFFALSE 59823
// begin un := UnitShoot ( i ) ;
59775: LD_ADDR_VAR 0 5
59779: PUSH
59780: LD_VAR 0 4
59784: PPUSH
59785: CALL_OW 504
59789: ST_TO_ADDR
// if GetSide ( un ) = side1 then
59790: LD_VAR 0 5
59794: PPUSH
59795: CALL_OW 255
59799: PUSH
59800: LD_VAR 0 1
59804: EQUAL
59805: IFFALSE 59821
// begin result := un ;
59807: LD_ADDR_VAR 0 3
59811: PUSH
59812: LD_VAR 0 5
59816: ST_TO_ADDR
// exit ;
59817: POP
59818: POP
59819: GO 59825
// end ; end ;
59821: GO 59772
59823: POP
59824: POP
// end ;
59825: LD_VAR 0 3
59829: RET
// export function GetCargoBay ( units ) ; begin
59830: LD_INT 0
59832: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
59833: LD_ADDR_VAR 0 2
59837: PUSH
59838: LD_VAR 0 1
59842: PPUSH
59843: LD_INT 2
59845: PUSH
59846: LD_INT 34
59848: PUSH
59849: LD_INT 12
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 34
59858: PUSH
59859: LD_INT 51
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 34
59868: PUSH
59869: LD_INT 32
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 34
59878: PUSH
59879: LD_INT 89
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: PPUSH
59893: CALL_OW 72
59897: ST_TO_ADDR
// end ;
59898: LD_VAR 0 2
59902: RET
// export function Negate ( value ) ; begin
59903: LD_INT 0
59905: PPUSH
// result := not value ;
59906: LD_ADDR_VAR 0 2
59910: PUSH
59911: LD_VAR 0 1
59915: NOT
59916: ST_TO_ADDR
// end ;
59917: LD_VAR 0 2
59921: RET
// export function Inc ( value ) ; begin
59922: LD_INT 0
59924: PPUSH
// result := value + 1 ;
59925: LD_ADDR_VAR 0 2
59929: PUSH
59930: LD_VAR 0 1
59934: PUSH
59935: LD_INT 1
59937: PLUS
59938: ST_TO_ADDR
// end ;
59939: LD_VAR 0 2
59943: RET
// export function Dec ( value ) ; begin
59944: LD_INT 0
59946: PPUSH
// result := value - 1 ;
59947: LD_ADDR_VAR 0 2
59951: PUSH
59952: LD_VAR 0 1
59956: PUSH
59957: LD_INT 1
59959: MINUS
59960: ST_TO_ADDR
// end ;
59961: LD_VAR 0 2
59965: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
59966: LD_INT 0
59968: PPUSH
59969: PPUSH
59970: PPUSH
59971: PPUSH
59972: PPUSH
59973: PPUSH
59974: PPUSH
59975: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
59976: LD_VAR 0 1
59980: PPUSH
59981: LD_VAR 0 2
59985: PPUSH
59986: CALL_OW 488
59990: NOT
59991: IFTRUE 60010
59993: PUSH
59994: LD_VAR 0 3
59998: PPUSH
59999: LD_VAR 0 4
60003: PPUSH
60004: CALL_OW 488
60008: NOT
60009: OR
60010: IFFALSE 60023
// begin result := - 1 ;
60012: LD_ADDR_VAR 0 5
60016: PUSH
60017: LD_INT 1
60019: NEG
60020: ST_TO_ADDR
// exit ;
60021: GO 60258
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
60023: LD_ADDR_VAR 0 12
60027: PUSH
60028: LD_VAR 0 1
60032: PPUSH
60033: LD_VAR 0 2
60037: PPUSH
60038: LD_VAR 0 3
60042: PPUSH
60043: LD_VAR 0 4
60047: PPUSH
60048: CALL 59094 0 4
60052: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
60053: LD_ADDR_VAR 0 11
60057: PUSH
60058: LD_VAR 0 1
60062: PPUSH
60063: LD_VAR 0 2
60067: PPUSH
60068: LD_VAR 0 12
60072: PUSH
60073: LD_INT 1
60075: ARRAY
60076: PPUSH
60077: LD_VAR 0 12
60081: PUSH
60082: LD_INT 2
60084: ARRAY
60085: PPUSH
60086: CALL_OW 298
60090: ST_TO_ADDR
// distance := 9999 ;
60091: LD_ADDR_VAR 0 10
60095: PUSH
60096: LD_INT 9999
60098: ST_TO_ADDR
// for i := 0 to 5 do
60099: LD_ADDR_VAR 0 6
60103: PUSH
60104: DOUBLE
60105: LD_INT 0
60107: DEC
60108: ST_TO_ADDR
60109: LD_INT 5
60111: PUSH
60112: FOR_TO
60113: IFFALSE 60256
// begin _x := ShiftX ( x1 , i , centerDist ) ;
60115: LD_ADDR_VAR 0 7
60119: PUSH
60120: LD_VAR 0 1
60124: PPUSH
60125: LD_VAR 0 6
60129: PPUSH
60130: LD_VAR 0 11
60134: PPUSH
60135: CALL_OW 272
60139: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
60140: LD_ADDR_VAR 0 8
60144: PUSH
60145: LD_VAR 0 2
60149: PPUSH
60150: LD_VAR 0 6
60154: PPUSH
60155: LD_VAR 0 11
60159: PPUSH
60160: CALL_OW 273
60164: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60165: LD_VAR 0 7
60169: PPUSH
60170: LD_VAR 0 8
60174: PPUSH
60175: CALL_OW 488
60179: NOT
60180: IFFALSE 60184
// continue ;
60182: GO 60112
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
60184: LD_ADDR_VAR 0 9
60188: PUSH
60189: LD_VAR 0 12
60193: PUSH
60194: LD_INT 1
60196: ARRAY
60197: PPUSH
60198: LD_VAR 0 12
60202: PUSH
60203: LD_INT 2
60205: ARRAY
60206: PPUSH
60207: LD_VAR 0 7
60211: PPUSH
60212: LD_VAR 0 8
60216: PPUSH
60217: CALL_OW 298
60221: ST_TO_ADDR
// if tmp < distance then
60222: LD_VAR 0 9
60226: PUSH
60227: LD_VAR 0 10
60231: LESS
60232: IFFALSE 60254
// begin result := i ;
60234: LD_ADDR_VAR 0 5
60238: PUSH
60239: LD_VAR 0 6
60243: ST_TO_ADDR
// distance := tmp ;
60244: LD_ADDR_VAR 0 10
60248: PUSH
60249: LD_VAR 0 9
60253: ST_TO_ADDR
// end ; end ;
60254: GO 60112
60256: POP
60257: POP
// end ;
60258: LD_VAR 0 5
60262: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60263: LD_INT 0
60265: PPUSH
60266: PPUSH
// if not driver or not IsInUnit ( driver ) then
60267: LD_VAR 0 1
60271: NOT
60272: IFTRUE 60286
60274: PUSH
60275: LD_VAR 0 1
60279: PPUSH
60280: CALL_OW 310
60284: NOT
60285: OR
60286: IFFALSE 60290
// exit ;
60288: GO 60380
// vehicle := IsInUnit ( driver ) ;
60290: LD_ADDR_VAR 0 3
60294: PUSH
60295: LD_VAR 0 1
60299: PPUSH
60300: CALL_OW 310
60304: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60305: LD_VAR 0 1
60309: PPUSH
60310: LD_STRING \
60312: PUSH
60313: LD_INT 0
60315: PUSH
60316: LD_INT 0
60318: PUSH
60319: LD_INT 0
60321: PUSH
60322: LD_INT 0
60324: PUSH
60325: LD_INT 0
60327: PUSH
60328: LD_INT 0
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: LIST
60339: PUSH
60340: LD_STRING E
60342: PUSH
60343: LD_INT 0
60345: PUSH
60346: LD_INT 0
60348: PUSH
60349: LD_VAR 0 3
60353: PUSH
60354: LD_INT 0
60356: PUSH
60357: LD_INT 0
60359: PUSH
60360: LD_INT 0
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PPUSH
60376: CALL_OW 446
// end ;
60380: LD_VAR 0 2
60384: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60385: LD_INT 0
60387: PPUSH
60388: PPUSH
// if not driver or not IsInUnit ( driver ) then
60389: LD_VAR 0 1
60393: NOT
60394: IFTRUE 60408
60396: PUSH
60397: LD_VAR 0 1
60401: PPUSH
60402: CALL_OW 310
60406: NOT
60407: OR
60408: IFFALSE 60412
// exit ;
60410: GO 60502
// vehicle := IsInUnit ( driver ) ;
60412: LD_ADDR_VAR 0 3
60416: PUSH
60417: LD_VAR 0 1
60421: PPUSH
60422: CALL_OW 310
60426: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60427: LD_VAR 0 1
60431: PPUSH
60432: LD_STRING \
60434: PUSH
60435: LD_INT 0
60437: PUSH
60438: LD_INT 0
60440: PUSH
60441: LD_INT 0
60443: PUSH
60444: LD_INT 0
60446: PUSH
60447: LD_INT 0
60449: PUSH
60450: LD_INT 0
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: PUSH
60462: LD_STRING E
60464: PUSH
60465: LD_INT 0
60467: PUSH
60468: LD_INT 0
60470: PUSH
60471: LD_VAR 0 3
60475: PUSH
60476: LD_INT 0
60478: PUSH
60479: LD_INT 0
60481: PUSH
60482: LD_INT 0
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PPUSH
60498: CALL_OW 447
// end ;
60502: LD_VAR 0 2
60506: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
60507: LD_INT 0
60509: PPUSH
60510: PPUSH
60511: PPUSH
// tmp := [ ] ;
60512: LD_ADDR_VAR 0 5
60516: PUSH
60517: EMPTY
60518: ST_TO_ADDR
// for i in units do
60519: LD_ADDR_VAR 0 4
60523: PUSH
60524: LD_VAR 0 1
60528: PUSH
60529: FOR_IN
60530: IFFALSE 60568
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
60532: LD_ADDR_VAR 0 5
60536: PUSH
60537: LD_VAR 0 5
60541: PPUSH
60542: LD_VAR 0 5
60546: PUSH
60547: LD_INT 1
60549: PLUS
60550: PPUSH
60551: LD_VAR 0 4
60555: PPUSH
60556: CALL_OW 256
60560: PPUSH
60561: CALL_OW 2
60565: ST_TO_ADDR
60566: GO 60529
60568: POP
60569: POP
// if not tmp then
60570: LD_VAR 0 5
60574: NOT
60575: IFFALSE 60579
// exit ;
60577: GO 60627
// if asc then
60579: LD_VAR 0 2
60583: IFFALSE 60607
// result := SortListByListAsc ( units , tmp ) else
60585: LD_ADDR_VAR 0 3
60589: PUSH
60590: LD_VAR 0 1
60594: PPUSH
60595: LD_VAR 0 5
60599: PPUSH
60600: CALL_OW 76
60604: ST_TO_ADDR
60605: GO 60627
// result := SortListByListDesc ( units , tmp ) ;
60607: LD_ADDR_VAR 0 3
60611: PUSH
60612: LD_VAR 0 1
60616: PPUSH
60617: LD_VAR 0 5
60621: PPUSH
60622: CALL_OW 77
60626: ST_TO_ADDR
// end ;
60627: LD_VAR 0 3
60631: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
60632: LD_INT 0
60634: PPUSH
60635: PPUSH
// task := GetTaskList ( mech ) ;
60636: LD_ADDR_VAR 0 4
60640: PUSH
60641: LD_VAR 0 1
60645: PPUSH
60646: CALL_OW 437
60650: ST_TO_ADDR
// if not task then
60651: LD_VAR 0 4
60655: NOT
60656: IFFALSE 60660
// exit ;
60658: GO 60704
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
60660: LD_ADDR_VAR 0 3
60664: PUSH
60665: LD_VAR 0 4
60669: PUSH
60670: LD_INT 1
60672: ARRAY
60673: PUSH
60674: LD_INT 1
60676: ARRAY
60677: PUSH
60678: LD_STRING r
60680: EQUAL
60681: IFFALSE 60703
60683: PUSH
60684: LD_VAR 0 4
60688: PUSH
60689: LD_INT 1
60691: ARRAY
60692: PUSH
60693: LD_INT 4
60695: ARRAY
60696: PUSH
60697: LD_VAR 0 2
60701: EQUAL
60702: AND
60703: ST_TO_ADDR
// end ;
60704: LD_VAR 0 3
60708: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
60709: LD_INT 0
60711: PPUSH
// SetDir ( unit , d ) ;
60712: LD_VAR 0 1
60716: PPUSH
60717: LD_VAR 0 4
60721: PPUSH
60722: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
60726: LD_ADDR_VAR 0 6
60730: PUSH
60731: LD_VAR 0 1
60735: PPUSH
60736: LD_VAR 0 2
60740: PPUSH
60741: LD_VAR 0 3
60745: PPUSH
60746: LD_VAR 0 5
60750: PPUSH
60751: CALL_OW 48
60755: ST_TO_ADDR
// end ;
60756: LD_VAR 0 6
60760: RET
// export function ToNaturalNumber ( number ) ; begin
60761: LD_INT 0
60763: PPUSH
// result := number div 1 ;
60764: LD_ADDR_VAR 0 2
60768: PUSH
60769: LD_VAR 0 1
60773: PUSH
60774: LD_INT 1
60776: DIV
60777: ST_TO_ADDR
// if number < 0 then
60778: LD_VAR 0 1
60782: PUSH
60783: LD_INT 0
60785: LESS
60786: IFFALSE 60796
// result := 0 ;
60788: LD_ADDR_VAR 0 2
60792: PUSH
60793: LD_INT 0
60795: ST_TO_ADDR
// end ;
60796: LD_VAR 0 2
60800: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
60801: LD_INT 0
60803: PPUSH
60804: PPUSH
60805: PPUSH
// if not buildings then
60806: LD_VAR 0 1
60810: NOT
60811: IFFALSE 60815
// exit ;
60813: GO 60930
// tmp := [ ] ;
60815: LD_ADDR_VAR 0 5
60819: PUSH
60820: EMPTY
60821: ST_TO_ADDR
// for b in buildings do
60822: LD_ADDR_VAR 0 4
60826: PUSH
60827: LD_VAR 0 1
60831: PUSH
60832: FOR_IN
60833: IFFALSE 60871
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
60835: LD_ADDR_VAR 0 5
60839: PUSH
60840: LD_VAR 0 5
60844: PPUSH
60845: LD_VAR 0 5
60849: PUSH
60850: LD_INT 1
60852: PLUS
60853: PPUSH
60854: LD_VAR 0 4
60858: PPUSH
60859: CALL_OW 266
60863: PPUSH
60864: CALL_OW 1
60868: ST_TO_ADDR
60869: GO 60832
60871: POP
60872: POP
// if not tmp then
60873: LD_VAR 0 5
60877: NOT
60878: IFFALSE 60882
// exit ;
60880: GO 60930
// if asc then
60882: LD_VAR 0 2
60886: IFFALSE 60910
// result := SortListByListAsc ( buildings , tmp ) else
60888: LD_ADDR_VAR 0 3
60892: PUSH
60893: LD_VAR 0 1
60897: PPUSH
60898: LD_VAR 0 5
60902: PPUSH
60903: CALL_OW 76
60907: ST_TO_ADDR
60908: GO 60930
// result := SortListByListDesc ( buildings , tmp ) ;
60910: LD_ADDR_VAR 0 3
60914: PUSH
60915: LD_VAR 0 1
60919: PPUSH
60920: LD_VAR 0 5
60924: PPUSH
60925: CALL_OW 77
60929: ST_TO_ADDR
// end ;
60930: LD_VAR 0 3
60934: RET
// export function SortByClass ( units , class ) ; var un ; begin
60935: LD_INT 0
60937: PPUSH
60938: PPUSH
// if not units or not class then
60939: LD_VAR 0 1
60943: NOT
60944: IFTRUE 60953
60946: PUSH
60947: LD_VAR 0 2
60951: NOT
60952: OR
60953: IFFALSE 60957
// exit ;
60955: GO 61052
// result := [ ] ;
60957: LD_ADDR_VAR 0 3
60961: PUSH
60962: EMPTY
60963: ST_TO_ADDR
// for un in units do
60964: LD_ADDR_VAR 0 4
60968: PUSH
60969: LD_VAR 0 1
60973: PUSH
60974: FOR_IN
60975: IFFALSE 61050
// if GetClass ( un ) = class then
60977: LD_VAR 0 4
60981: PPUSH
60982: CALL_OW 257
60986: PUSH
60987: LD_VAR 0 2
60991: EQUAL
60992: IFFALSE 61019
// result := Insert ( result , 1 , un ) else
60994: LD_ADDR_VAR 0 3
60998: PUSH
60999: LD_VAR 0 3
61003: PPUSH
61004: LD_INT 1
61006: PPUSH
61007: LD_VAR 0 4
61011: PPUSH
61012: CALL_OW 2
61016: ST_TO_ADDR
61017: GO 61048
// result := Replace ( result , result + 1 , un ) ;
61019: LD_ADDR_VAR 0 3
61023: PUSH
61024: LD_VAR 0 3
61028: PPUSH
61029: LD_VAR 0 3
61033: PUSH
61034: LD_INT 1
61036: PLUS
61037: PPUSH
61038: LD_VAR 0 4
61042: PPUSH
61043: CALL_OW 1
61047: ST_TO_ADDR
61048: GO 60974
61050: POP
61051: POP
// end ;
61052: LD_VAR 0 3
61056: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
61057: LD_INT 0
61059: PPUSH
61060: PPUSH
61061: PPUSH
61062: PPUSH
61063: PPUSH
61064: PPUSH
61065: PPUSH
// result := [ ] ;
61066: LD_ADDR_VAR 0 4
61070: PUSH
61071: EMPTY
61072: ST_TO_ADDR
// if x - r < 0 then
61073: LD_VAR 0 1
61077: PUSH
61078: LD_VAR 0 3
61082: MINUS
61083: PUSH
61084: LD_INT 0
61086: LESS
61087: IFFALSE 61099
// min_x := 0 else
61089: LD_ADDR_VAR 0 8
61093: PUSH
61094: LD_INT 0
61096: ST_TO_ADDR
61097: GO 61115
// min_x := x - r ;
61099: LD_ADDR_VAR 0 8
61103: PUSH
61104: LD_VAR 0 1
61108: PUSH
61109: LD_VAR 0 3
61113: MINUS
61114: ST_TO_ADDR
// if y - r < 0 then
61115: LD_VAR 0 2
61119: PUSH
61120: LD_VAR 0 3
61124: MINUS
61125: PUSH
61126: LD_INT 0
61128: LESS
61129: IFFALSE 61141
// min_y := 0 else
61131: LD_ADDR_VAR 0 7
61135: PUSH
61136: LD_INT 0
61138: ST_TO_ADDR
61139: GO 61157
// min_y := y - r ;
61141: LD_ADDR_VAR 0 7
61145: PUSH
61146: LD_VAR 0 2
61150: PUSH
61151: LD_VAR 0 3
61155: MINUS
61156: ST_TO_ADDR
// max_x := x + r ;
61157: LD_ADDR_VAR 0 9
61161: PUSH
61162: LD_VAR 0 1
61166: PUSH
61167: LD_VAR 0 3
61171: PLUS
61172: ST_TO_ADDR
// max_y := y + r ;
61173: LD_ADDR_VAR 0 10
61177: PUSH
61178: LD_VAR 0 2
61182: PUSH
61183: LD_VAR 0 3
61187: PLUS
61188: ST_TO_ADDR
// for _x = min_x to max_x do
61189: LD_ADDR_VAR 0 5
61193: PUSH
61194: DOUBLE
61195: LD_VAR 0 8
61199: DEC
61200: ST_TO_ADDR
61201: LD_VAR 0 9
61205: PUSH
61206: FOR_TO
61207: IFFALSE 61308
// for _y = min_y to max_y do
61209: LD_ADDR_VAR 0 6
61213: PUSH
61214: DOUBLE
61215: LD_VAR 0 7
61219: DEC
61220: ST_TO_ADDR
61221: LD_VAR 0 10
61225: PUSH
61226: FOR_TO
61227: IFFALSE 61304
// begin if not ValidHex ( _x , _y ) then
61229: LD_VAR 0 5
61233: PPUSH
61234: LD_VAR 0 6
61238: PPUSH
61239: CALL_OW 488
61243: NOT
61244: IFFALSE 61248
// continue ;
61246: GO 61226
// if GetResourceTypeXY ( _x , _y ) then
61248: LD_VAR 0 5
61252: PPUSH
61253: LD_VAR 0 6
61257: PPUSH
61258: CALL_OW 283
61262: IFFALSE 61302
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
61264: LD_ADDR_VAR 0 4
61268: PUSH
61269: LD_VAR 0 4
61273: PPUSH
61274: LD_VAR 0 4
61278: PUSH
61279: LD_INT 1
61281: PLUS
61282: PPUSH
61283: LD_VAR 0 5
61287: PUSH
61288: LD_VAR 0 6
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PPUSH
61297: CALL_OW 1
61301: ST_TO_ADDR
// end ;
61302: GO 61226
61304: POP
61305: POP
61306: GO 61206
61308: POP
61309: POP
// end ;
61310: LD_VAR 0 4
61314: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
61315: LD_INT 0
61317: PPUSH
61318: PPUSH
61319: PPUSH
61320: PPUSH
61321: PPUSH
61322: PPUSH
61323: PPUSH
61324: PPUSH
// if not units then
61325: LD_VAR 0 1
61329: NOT
61330: IFFALSE 61334
// exit ;
61332: GO 61866
// result := UnitFilter ( units , [ f_ok ] ) ;
61334: LD_ADDR_VAR 0 3
61338: PUSH
61339: LD_VAR 0 1
61343: PPUSH
61344: LD_INT 50
61346: PUSH
61347: EMPTY
61348: LIST
61349: PPUSH
61350: CALL_OW 72
61354: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
61355: LD_ADDR_VAR 0 8
61359: PUSH
61360: LD_VAR 0 1
61364: PUSH
61365: LD_INT 1
61367: ARRAY
61368: PPUSH
61369: CALL_OW 255
61373: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
61374: LD_ADDR_VAR 0 10
61378: PUSH
61379: LD_INT 29
61381: PUSH
61382: LD_INT 91
61384: PUSH
61385: LD_INT 49
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: LIST
61392: ST_TO_ADDR
// if not result then
61393: LD_VAR 0 3
61397: NOT
61398: IFFALSE 61402
// exit ;
61400: GO 61866
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
61402: LD_ADDR_VAR 0 5
61406: PUSH
61407: LD_INT 81
61409: PUSH
61410: LD_VAR 0 8
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PPUSH
61419: CALL_OW 69
61423: ST_TO_ADDR
// for i in result do
61424: LD_ADDR_VAR 0 4
61428: PUSH
61429: LD_VAR 0 3
61433: PUSH
61434: FOR_IN
61435: IFFALSE 61864
// begin tag := GetTag ( i ) + 1 ;
61437: LD_ADDR_VAR 0 9
61441: PUSH
61442: LD_VAR 0 4
61446: PPUSH
61447: CALL_OW 110
61451: PUSH
61452: LD_INT 1
61454: PLUS
61455: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
61456: LD_ADDR_VAR 0 7
61460: PUSH
61461: LD_VAR 0 4
61465: PPUSH
61466: CALL_OW 250
61470: PPUSH
61471: LD_VAR 0 4
61475: PPUSH
61476: CALL_OW 251
61480: PPUSH
61481: LD_INT 4
61483: PPUSH
61484: CALL 61057 0 3
61488: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
61489: LD_VAR 0 4
61493: PPUSH
61494: CALL_OW 247
61498: PUSH
61499: LD_INT 2
61501: EQUAL
61502: IFFALSE 61514
61504: PUSH
61505: LD_VAR 0 7
61509: PUSH
61510: LD_INT 2
61512: GREATER
61513: AND
61514: IFFALSE 61534
61516: PUSH
61517: LD_VAR 0 4
61521: PPUSH
61522: CALL_OW 264
61526: PUSH
61527: LD_VAR 0 10
61531: IN
61532: NOT
61533: AND
61534: IFFALSE 61573
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
61536: LD_VAR 0 4
61540: PPUSH
61541: LD_VAR 0 7
61545: PUSH
61546: LD_INT 1
61548: ARRAY
61549: PUSH
61550: LD_INT 1
61552: ARRAY
61553: PPUSH
61554: LD_VAR 0 7
61558: PUSH
61559: LD_INT 1
61561: ARRAY
61562: PUSH
61563: LD_INT 2
61565: ARRAY
61566: PPUSH
61567: CALL_OW 116
61571: GO 61862
// if path > tag then
61573: LD_VAR 0 2
61577: PUSH
61578: LD_VAR 0 9
61582: GREATER
61583: IFFALSE 61791
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
61585: LD_ADDR_VAR 0 6
61589: PUSH
61590: LD_VAR 0 5
61594: PPUSH
61595: LD_INT 91
61597: PUSH
61598: LD_VAR 0 4
61602: PUSH
61603: LD_INT 8
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: LIST
61610: PPUSH
61611: CALL_OW 72
61615: ST_TO_ADDR
// if nearEnemy then
61616: LD_VAR 0 6
61620: IFFALSE 61689
// begin if GetWeapon ( i ) = ru_time_lapser then
61622: LD_VAR 0 4
61626: PPUSH
61627: CALL_OW 264
61631: PUSH
61632: LD_INT 49
61634: EQUAL
61635: IFFALSE 61663
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
61637: LD_VAR 0 4
61641: PPUSH
61642: LD_VAR 0 6
61646: PPUSH
61647: LD_VAR 0 4
61651: PPUSH
61652: CALL_OW 74
61656: PPUSH
61657: CALL_OW 112
61661: GO 61687
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
61663: LD_VAR 0 4
61667: PPUSH
61668: LD_VAR 0 6
61672: PPUSH
61673: LD_VAR 0 4
61677: PPUSH
61678: CALL_OW 74
61682: PPUSH
61683: CALL 62947 0 2
// end else
61687: GO 61789
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
61689: LD_VAR 0 4
61693: PPUSH
61694: LD_VAR 0 2
61698: PUSH
61699: LD_VAR 0 9
61703: ARRAY
61704: PUSH
61705: LD_INT 1
61707: ARRAY
61708: PPUSH
61709: LD_VAR 0 2
61713: PUSH
61714: LD_VAR 0 9
61718: ARRAY
61719: PUSH
61720: LD_INT 2
61722: ARRAY
61723: PPUSH
61724: CALL_OW 297
61728: PUSH
61729: LD_INT 6
61731: GREATER
61732: IFFALSE 61775
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
61734: LD_VAR 0 4
61738: PPUSH
61739: LD_VAR 0 2
61743: PUSH
61744: LD_VAR 0 9
61748: ARRAY
61749: PUSH
61750: LD_INT 1
61752: ARRAY
61753: PPUSH
61754: LD_VAR 0 2
61758: PUSH
61759: LD_VAR 0 9
61763: ARRAY
61764: PUSH
61765: LD_INT 2
61767: ARRAY
61768: PPUSH
61769: CALL_OW 114
61773: GO 61789
// SetTag ( i , tag ) ;
61775: LD_VAR 0 4
61779: PPUSH
61780: LD_VAR 0 9
61784: PPUSH
61785: CALL_OW 109
// end else
61789: GO 61862
// if enemy then
61791: LD_VAR 0 5
61795: IFFALSE 61862
// begin if GetWeapon ( i ) = ru_time_lapser then
61797: LD_VAR 0 4
61801: PPUSH
61802: CALL_OW 264
61806: PUSH
61807: LD_INT 49
61809: EQUAL
61810: IFFALSE 61838
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
61812: LD_VAR 0 4
61816: PPUSH
61817: LD_VAR 0 5
61821: PPUSH
61822: LD_VAR 0 4
61826: PPUSH
61827: CALL_OW 74
61831: PPUSH
61832: CALL_OW 112
61836: GO 61862
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
61838: LD_VAR 0 4
61842: PPUSH
61843: LD_VAR 0 5
61847: PPUSH
61848: LD_VAR 0 4
61852: PPUSH
61853: CALL_OW 74
61857: PPUSH
61858: CALL 62947 0 2
// end ; end ;
61862: GO 61434
61864: POP
61865: POP
// end ;
61866: LD_VAR 0 3
61870: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
61871: LD_INT 0
61873: PPUSH
61874: PPUSH
61875: PPUSH
// if not unit or IsInUnit ( unit ) then
61876: LD_VAR 0 1
61880: NOT
61881: IFTRUE 61894
61883: PUSH
61884: LD_VAR 0 1
61888: PPUSH
61889: CALL_OW 310
61893: OR
61894: IFFALSE 61898
// exit ;
61896: GO 61989
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
61898: LD_ADDR_VAR 0 4
61902: PUSH
61903: LD_VAR 0 1
61907: PPUSH
61908: CALL_OW 250
61912: PPUSH
61913: LD_VAR 0 2
61917: PPUSH
61918: LD_INT 1
61920: PPUSH
61921: CALL_OW 272
61925: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
61926: LD_ADDR_VAR 0 5
61930: PUSH
61931: LD_VAR 0 1
61935: PPUSH
61936: CALL_OW 251
61940: PPUSH
61941: LD_VAR 0 2
61945: PPUSH
61946: LD_INT 1
61948: PPUSH
61949: CALL_OW 273
61953: ST_TO_ADDR
// if ValidHex ( x , y ) then
61954: LD_VAR 0 4
61958: PPUSH
61959: LD_VAR 0 5
61963: PPUSH
61964: CALL_OW 488
61968: IFFALSE 61989
// ComTurnXY ( unit , x , y ) ;
61970: LD_VAR 0 1
61974: PPUSH
61975: LD_VAR 0 4
61979: PPUSH
61980: LD_VAR 0 5
61984: PPUSH
61985: CALL_OW 118
// end ;
61989: LD_VAR 0 3
61993: RET
// export function SeeUnits ( side , units ) ; var i ; begin
61994: LD_INT 0
61996: PPUSH
61997: PPUSH
// result := false ;
61998: LD_ADDR_VAR 0 3
62002: PUSH
62003: LD_INT 0
62005: ST_TO_ADDR
// if not units then
62006: LD_VAR 0 2
62010: NOT
62011: IFFALSE 62015
// exit ;
62013: GO 62060
// for i in units do
62015: LD_ADDR_VAR 0 4
62019: PUSH
62020: LD_VAR 0 2
62024: PUSH
62025: FOR_IN
62026: IFFALSE 62058
// if See ( side , i ) then
62028: LD_VAR 0 1
62032: PPUSH
62033: LD_VAR 0 4
62037: PPUSH
62038: CALL_OW 292
62042: IFFALSE 62056
// begin result := true ;
62044: LD_ADDR_VAR 0 3
62048: PUSH
62049: LD_INT 1
62051: ST_TO_ADDR
// exit ;
62052: POP
62053: POP
62054: GO 62060
// end ;
62056: GO 62025
62058: POP
62059: POP
// end ;
62060: LD_VAR 0 3
62064: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
62065: LD_INT 0
62067: PPUSH
62068: PPUSH
62069: PPUSH
62070: PPUSH
// if not unit or not points then
62071: LD_VAR 0 1
62075: NOT
62076: IFTRUE 62085
62078: PUSH
62079: LD_VAR 0 2
62083: NOT
62084: OR
62085: IFFALSE 62089
// exit ;
62087: GO 62179
// dist := 99999 ;
62089: LD_ADDR_VAR 0 5
62093: PUSH
62094: LD_INT 99999
62096: ST_TO_ADDR
// for i in points do
62097: LD_ADDR_VAR 0 4
62101: PUSH
62102: LD_VAR 0 2
62106: PUSH
62107: FOR_IN
62108: IFFALSE 62177
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
62110: LD_ADDR_VAR 0 6
62114: PUSH
62115: LD_VAR 0 1
62119: PPUSH
62120: LD_VAR 0 4
62124: PUSH
62125: LD_INT 1
62127: ARRAY
62128: PPUSH
62129: LD_VAR 0 4
62133: PUSH
62134: LD_INT 2
62136: ARRAY
62137: PPUSH
62138: CALL_OW 297
62142: ST_TO_ADDR
// if tmpDist < dist then
62143: LD_VAR 0 6
62147: PUSH
62148: LD_VAR 0 5
62152: LESS
62153: IFFALSE 62175
// begin result := i ;
62155: LD_ADDR_VAR 0 3
62159: PUSH
62160: LD_VAR 0 4
62164: ST_TO_ADDR
// dist := tmpDist ;
62165: LD_ADDR_VAR 0 5
62169: PUSH
62170: LD_VAR 0 6
62174: ST_TO_ADDR
// end ; end ;
62175: GO 62107
62177: POP
62178: POP
// end ;
62179: LD_VAR 0 3
62183: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
62184: LD_INT 0
62186: PPUSH
// uc_side := side ;
62187: LD_ADDR_OWVAR 20
62191: PUSH
62192: LD_VAR 0 1
62196: ST_TO_ADDR
// uc_nation := 3 ;
62197: LD_ADDR_OWVAR 21
62201: PUSH
62202: LD_INT 3
62204: ST_TO_ADDR
// vc_chassis := 25 ;
62205: LD_ADDR_OWVAR 37
62209: PUSH
62210: LD_INT 25
62212: ST_TO_ADDR
// vc_engine := engine_siberite ;
62213: LD_ADDR_OWVAR 39
62217: PUSH
62218: LD_INT 3
62220: ST_TO_ADDR
// vc_control := control_computer ;
62221: LD_ADDR_OWVAR 38
62225: PUSH
62226: LD_INT 3
62228: ST_TO_ADDR
// vc_weapon := 59 ;
62229: LD_ADDR_OWVAR 40
62233: PUSH
62234: LD_INT 59
62236: ST_TO_ADDR
// result := CreateVehicle ;
62237: LD_ADDR_VAR 0 5
62241: PUSH
62242: CALL_OW 45
62246: ST_TO_ADDR
// SetDir ( result , d ) ;
62247: LD_VAR 0 5
62251: PPUSH
62252: LD_VAR 0 4
62256: PPUSH
62257: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
62261: LD_VAR 0 5
62265: PPUSH
62266: LD_VAR 0 2
62270: PPUSH
62271: LD_VAR 0 3
62275: PPUSH
62276: LD_INT 0
62278: PPUSH
62279: CALL_OW 48
// end ;
62283: LD_VAR 0 5
62287: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
62288: LD_INT 0
62290: PPUSH
62291: PPUSH
62292: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
62293: LD_ADDR_VAR 0 2
62297: PUSH
62298: LD_INT 0
62300: PUSH
62301: LD_INT 0
62303: PUSH
62304: LD_INT 0
62306: PUSH
62307: LD_INT 0
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
62316: LD_VAR 0 1
62320: NOT
62321: IFTRUE 62354
62323: PUSH
62324: LD_VAR 0 1
62328: PPUSH
62329: CALL_OW 264
62333: PUSH
62334: LD_INT 12
62336: PUSH
62337: LD_INT 51
62339: PUSH
62340: LD_INT 32
62342: PUSH
62343: LD_INT 89
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: IN
62352: NOT
62353: OR
62354: IFFALSE 62358
// exit ;
62356: GO 62456
// for i := 1 to 3 do
62358: LD_ADDR_VAR 0 3
62362: PUSH
62363: DOUBLE
62364: LD_INT 1
62366: DEC
62367: ST_TO_ADDR
62368: LD_INT 3
62370: PUSH
62371: FOR_TO
62372: IFFALSE 62454
// begin tmp := GetCargo ( cargo , i ) ;
62374: LD_ADDR_VAR 0 4
62378: PUSH
62379: LD_VAR 0 1
62383: PPUSH
62384: LD_VAR 0 3
62388: PPUSH
62389: CALL_OW 289
62393: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
62394: LD_ADDR_VAR 0 2
62398: PUSH
62399: LD_VAR 0 2
62403: PPUSH
62404: LD_VAR 0 3
62408: PPUSH
62409: LD_VAR 0 4
62413: PPUSH
62414: CALL_OW 1
62418: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
62419: LD_ADDR_VAR 0 2
62423: PUSH
62424: LD_VAR 0 2
62428: PPUSH
62429: LD_INT 4
62431: PPUSH
62432: LD_VAR 0 2
62436: PUSH
62437: LD_INT 4
62439: ARRAY
62440: PUSH
62441: LD_VAR 0 4
62445: PLUS
62446: PPUSH
62447: CALL_OW 1
62451: ST_TO_ADDR
// end ;
62452: GO 62371
62454: POP
62455: POP
// end ;
62456: LD_VAR 0 2
62460: RET
// export function Length ( array ) ; begin
62461: LD_INT 0
62463: PPUSH
// result := array + 0 ;
62464: LD_ADDR_VAR 0 2
62468: PUSH
62469: LD_VAR 0 1
62473: PUSH
62474: LD_INT 0
62476: PLUS
62477: ST_TO_ADDR
// end ;
62478: LD_VAR 0 2
62482: RET
// export function PrepareArray ( array ) ; begin
62483: LD_INT 0
62485: PPUSH
// result := array diff 0 ;
62486: LD_ADDR_VAR 0 2
62490: PUSH
62491: LD_VAR 0 1
62495: PUSH
62496: LD_INT 0
62498: DIFF
62499: ST_TO_ADDR
// if not result [ 1 ] then
62500: LD_VAR 0 2
62504: PUSH
62505: LD_INT 1
62507: ARRAY
62508: NOT
62509: IFFALSE 62529
// result := Delete ( result , 1 ) ;
62511: LD_ADDR_VAR 0 2
62515: PUSH
62516: LD_VAR 0 2
62520: PPUSH
62521: LD_INT 1
62523: PPUSH
62524: CALL_OW 3
62528: ST_TO_ADDR
// end ;
62529: LD_VAR 0 2
62533: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
62534: LD_INT 0
62536: PPUSH
62537: PPUSH
62538: PPUSH
62539: PPUSH
// sibRocketRange := 25 ;
62540: LD_ADDR_VAR 0 6
62544: PUSH
62545: LD_INT 25
62547: ST_TO_ADDR
// result := false ;
62548: LD_ADDR_VAR 0 4
62552: PUSH
62553: LD_INT 0
62555: ST_TO_ADDR
// for i := 0 to 5 do
62556: LD_ADDR_VAR 0 5
62560: PUSH
62561: DOUBLE
62562: LD_INT 0
62564: DEC
62565: ST_TO_ADDR
62566: LD_INT 5
62568: PUSH
62569: FOR_TO
62570: IFFALSE 62637
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
62572: LD_VAR 0 1
62576: PPUSH
62577: LD_VAR 0 5
62581: PPUSH
62582: LD_VAR 0 6
62586: PPUSH
62587: CALL_OW 272
62591: PPUSH
62592: LD_VAR 0 2
62596: PPUSH
62597: LD_VAR 0 5
62601: PPUSH
62602: LD_VAR 0 6
62606: PPUSH
62607: CALL_OW 273
62611: PPUSH
62612: LD_VAR 0 3
62616: PPUSH
62617: CALL_OW 309
62621: IFFALSE 62635
// begin result := true ;
62623: LD_ADDR_VAR 0 4
62627: PUSH
62628: LD_INT 1
62630: ST_TO_ADDR
// exit ;
62631: POP
62632: POP
62633: GO 62639
// end ;
62635: GO 62569
62637: POP
62638: POP
// end ;
62639: LD_VAR 0 4
62643: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
62644: LD_INT 0
62646: PPUSH
62647: PPUSH
62648: PPUSH
// if btype = b_depot then
62649: LD_VAR 0 2
62653: PUSH
62654: LD_INT 0
62656: EQUAL
62657: IFFALSE 62669
// begin result := true ;
62659: LD_ADDR_VAR 0 3
62663: PUSH
62664: LD_INT 1
62666: ST_TO_ADDR
// exit ;
62667: GO 62789
// end ; pom := GetBase ( depot ) ;
62669: LD_ADDR_VAR 0 4
62673: PUSH
62674: LD_VAR 0 1
62678: PPUSH
62679: CALL_OW 274
62683: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
62684: LD_ADDR_VAR 0 5
62688: PUSH
62689: LD_VAR 0 2
62693: PPUSH
62694: LD_VAR 0 1
62698: PPUSH
62699: CALL_OW 248
62703: PPUSH
62704: CALL_OW 450
62708: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
62709: LD_ADDR_VAR 0 3
62713: PUSH
62714: LD_VAR 0 4
62718: PPUSH
62719: LD_INT 1
62721: PPUSH
62722: CALL_OW 275
62726: PUSH
62727: LD_VAR 0 5
62731: PUSH
62732: LD_INT 1
62734: ARRAY
62735: GREATEREQUAL
62736: IFFALSE 62762
62738: PUSH
62739: LD_VAR 0 4
62743: PPUSH
62744: LD_INT 2
62746: PPUSH
62747: CALL_OW 275
62751: PUSH
62752: LD_VAR 0 5
62756: PUSH
62757: LD_INT 2
62759: ARRAY
62760: GREATEREQUAL
62761: AND
62762: IFFALSE 62788
62764: PUSH
62765: LD_VAR 0 4
62769: PPUSH
62770: LD_INT 3
62772: PPUSH
62773: CALL_OW 275
62777: PUSH
62778: LD_VAR 0 5
62782: PUSH
62783: LD_INT 3
62785: ARRAY
62786: GREATEREQUAL
62787: AND
62788: ST_TO_ADDR
// end ;
62789: LD_VAR 0 3
62793: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
62794: LD_INT 0
62796: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
62797: LD_VAR 0 1
62801: PPUSH
62802: LD_VAR 0 2
62806: PPUSH
62807: LD_INT 0
62809: PPUSH
62810: LD_INT 0
62812: PPUSH
62813: LD_INT 1
62815: PPUSH
62816: LD_INT 0
62818: PPUSH
62819: CALL_OW 587
// end ;
62823: LD_VAR 0 3
62827: RET
// export function CenterOnNow ( unit ) ; begin
62828: LD_INT 0
62830: PPUSH
// result := IsInUnit ( unit ) ;
62831: LD_ADDR_VAR 0 2
62835: PUSH
62836: LD_VAR 0 1
62840: PPUSH
62841: CALL_OW 310
62845: ST_TO_ADDR
// if not result then
62846: LD_VAR 0 2
62850: NOT
62851: IFFALSE 62863
// result := unit ;
62853: LD_ADDR_VAR 0 2
62857: PUSH
62858: LD_VAR 0 1
62862: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
62863: LD_VAR 0 1
62867: PPUSH
62868: CALL_OW 87
// end ;
62872: LD_VAR 0 2
62876: RET
// export function ComMoveHex ( unit , hex ) ; begin
62877: LD_INT 0
62879: PPUSH
// if not hex then
62880: LD_VAR 0 2
62884: NOT
62885: IFFALSE 62889
// exit ;
62887: GO 62942
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
62889: LD_VAR 0 2
62893: PUSH
62894: LD_INT 1
62896: ARRAY
62897: PPUSH
62898: LD_VAR 0 2
62902: PUSH
62903: LD_INT 2
62905: ARRAY
62906: PPUSH
62907: CALL_OW 428
62911: IFFALSE 62915
// exit ;
62913: GO 62942
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
62915: LD_VAR 0 1
62919: PPUSH
62920: LD_VAR 0 2
62924: PUSH
62925: LD_INT 1
62927: ARRAY
62928: PPUSH
62929: LD_VAR 0 2
62933: PUSH
62934: LD_INT 2
62936: ARRAY
62937: PPUSH
62938: CALL_OW 111
// end ;
62942: LD_VAR 0 3
62946: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
62947: LD_INT 0
62949: PPUSH
62950: PPUSH
62951: PPUSH
// if not unit or not enemy then
62952: LD_VAR 0 1
62956: NOT
62957: IFTRUE 62966
62959: PUSH
62960: LD_VAR 0 2
62964: NOT
62965: OR
62966: IFFALSE 62970
// exit ;
62968: GO 63096
// x := GetX ( enemy ) ;
62970: LD_ADDR_VAR 0 4
62974: PUSH
62975: LD_VAR 0 2
62979: PPUSH
62980: CALL_OW 250
62984: ST_TO_ADDR
// y := GetY ( enemy ) ;
62985: LD_ADDR_VAR 0 5
62989: PUSH
62990: LD_VAR 0 2
62994: PPUSH
62995: CALL_OW 251
62999: ST_TO_ADDR
// if ValidHex ( x , y ) then
63000: LD_VAR 0 4
63004: PPUSH
63005: LD_VAR 0 5
63009: PPUSH
63010: CALL_OW 488
63014: IFFALSE 63096
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
63016: LD_VAR 0 2
63020: PPUSH
63021: CALL_OW 247
63025: PUSH
63026: LD_INT 3
63028: PUSH
63029: LD_INT 2
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: IN
63036: IFTRUE 63059
63038: PUSH
63039: LD_VAR 0 1
63043: PPUSH
63044: CALL_OW 255
63048: PPUSH
63049: LD_VAR 0 2
63053: PPUSH
63054: CALL_OW 292
63058: OR
63059: IFFALSE 63077
// ComAttackUnit ( unit , enemy ) else
63061: LD_VAR 0 1
63065: PPUSH
63066: LD_VAR 0 2
63070: PPUSH
63071: CALL_OW 115
63075: GO 63096
// ComAgressiveMove ( unit , x , y ) ;
63077: LD_VAR 0 1
63081: PPUSH
63082: LD_VAR 0 4
63086: PPUSH
63087: LD_VAR 0 5
63091: PPUSH
63092: CALL_OW 114
// end ;
63096: LD_VAR 0 3
63100: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
63101: LD_INT 0
63103: PPUSH
63104: PPUSH
63105: PPUSH
// list := AreaToList ( area , 0 ) ;
63106: LD_ADDR_VAR 0 5
63110: PUSH
63111: LD_VAR 0 1
63115: PPUSH
63116: LD_INT 0
63118: PPUSH
63119: CALL_OW 517
63123: ST_TO_ADDR
// if not list then
63124: LD_VAR 0 5
63128: NOT
63129: IFFALSE 63133
// exit ;
63131: GO 63263
// if all then
63133: LD_VAR 0 2
63137: IFFALSE 63225
// begin for i := 1 to list [ 1 ] do
63139: LD_ADDR_VAR 0 4
63143: PUSH
63144: DOUBLE
63145: LD_INT 1
63147: DEC
63148: ST_TO_ADDR
63149: LD_VAR 0 5
63153: PUSH
63154: LD_INT 1
63156: ARRAY
63157: PUSH
63158: FOR_TO
63159: IFFALSE 63221
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
63161: LD_ADDR_VAR 0 3
63165: PUSH
63166: LD_VAR 0 3
63170: PPUSH
63171: LD_VAR 0 3
63175: PUSH
63176: LD_INT 1
63178: PLUS
63179: PPUSH
63180: LD_VAR 0 5
63184: PUSH
63185: LD_INT 1
63187: ARRAY
63188: PUSH
63189: LD_VAR 0 4
63193: ARRAY
63194: PUSH
63195: LD_VAR 0 5
63199: PUSH
63200: LD_INT 2
63202: ARRAY
63203: PUSH
63204: LD_VAR 0 4
63208: ARRAY
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PPUSH
63214: CALL_OW 1
63218: ST_TO_ADDR
63219: GO 63158
63221: POP
63222: POP
// exit ;
63223: GO 63263
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
63225: LD_ADDR_VAR 0 3
63229: PUSH
63230: LD_VAR 0 5
63234: PUSH
63235: LD_INT 1
63237: ARRAY
63238: PUSH
63239: LD_INT 1
63241: ARRAY
63242: PUSH
63243: LD_VAR 0 5
63247: PUSH
63248: LD_INT 2
63250: ARRAY
63251: PUSH
63252: LD_INT 1
63254: ARRAY
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: EMPTY
63261: LIST
63262: ST_TO_ADDR
// end ;
63263: LD_VAR 0 3
63267: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
63268: LD_INT 0
63270: PPUSH
63271: PPUSH
// list := AreaToList ( area , 0 ) ;
63272: LD_ADDR_VAR 0 4
63276: PUSH
63277: LD_VAR 0 1
63281: PPUSH
63282: LD_INT 0
63284: PPUSH
63285: CALL_OW 517
63289: ST_TO_ADDR
// if not list then
63290: LD_VAR 0 4
63294: NOT
63295: IFFALSE 63299
// exit ;
63297: GO 63340
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
63299: LD_ADDR_VAR 0 3
63303: PUSH
63304: LD_VAR 0 4
63308: PUSH
63309: LD_INT 1
63311: ARRAY
63312: PUSH
63313: LD_INT 1
63315: ARRAY
63316: PUSH
63317: LD_VAR 0 4
63321: PUSH
63322: LD_INT 2
63324: ARRAY
63325: PUSH
63326: LD_INT 1
63328: ARRAY
63329: PUSH
63330: LD_VAR 0 2
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: LIST
63339: ST_TO_ADDR
// end ;
63340: LD_VAR 0 3
63344: RET
// export function First ( array ) ; begin
63345: LD_INT 0
63347: PPUSH
// if not array then
63348: LD_VAR 0 1
63352: NOT
63353: IFFALSE 63357
// exit ;
63355: GO 63371
// result := array [ 1 ] ;
63357: LD_ADDR_VAR 0 2
63361: PUSH
63362: LD_VAR 0 1
63366: PUSH
63367: LD_INT 1
63369: ARRAY
63370: ST_TO_ADDR
// end ;
63371: LD_VAR 0 2
63375: RET
// export function Last ( array ) ; begin
63376: LD_INT 0
63378: PPUSH
// if not array then
63379: LD_VAR 0 1
63383: NOT
63384: IFFALSE 63388
// exit ;
63386: GO 63404
// result := array [ array ] ;
63388: LD_ADDR_VAR 0 2
63392: PUSH
63393: LD_VAR 0 1
63397: PUSH
63398: LD_VAR 0 1
63402: ARRAY
63403: ST_TO_ADDR
// end ;
63404: LD_VAR 0 2
63408: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
63409: LD_INT 0
63411: PPUSH
63412: PPUSH
// result := [ ] ;
63413: LD_ADDR_VAR 0 5
63417: PUSH
63418: EMPTY
63419: ST_TO_ADDR
// if not array then
63420: LD_VAR 0 1
63424: NOT
63425: IFFALSE 63429
// exit ;
63427: GO 63541
// for i := 1 to array do
63429: LD_ADDR_VAR 0 6
63433: PUSH
63434: DOUBLE
63435: LD_INT 1
63437: DEC
63438: ST_TO_ADDR
63439: LD_VAR 0 1
63443: PUSH
63444: FOR_TO
63445: IFFALSE 63539
// if array [ i ] [ index ] = value then
63447: LD_VAR 0 1
63451: PUSH
63452: LD_VAR 0 6
63456: ARRAY
63457: PUSH
63458: LD_VAR 0 2
63462: ARRAY
63463: PUSH
63464: LD_VAR 0 3
63468: EQUAL
63469: IFFALSE 63537
// begin if indexColumn then
63471: LD_VAR 0 4
63475: IFFALSE 63511
// result := Join ( result , array [ i ] [ indexColumn ] ) else
63477: LD_ADDR_VAR 0 5
63481: PUSH
63482: LD_VAR 0 5
63486: PPUSH
63487: LD_VAR 0 1
63491: PUSH
63492: LD_VAR 0 6
63496: ARRAY
63497: PUSH
63498: LD_VAR 0 4
63502: ARRAY
63503: PPUSH
63504: CALL 58549 0 2
63508: ST_TO_ADDR
63509: GO 63537
// result := Join ( result , array [ i ] ) ;
63511: LD_ADDR_VAR 0 5
63515: PUSH
63516: LD_VAR 0 5
63520: PPUSH
63521: LD_VAR 0 1
63525: PUSH
63526: LD_VAR 0 6
63530: ARRAY
63531: PPUSH
63532: CALL 58549 0 2
63536: ST_TO_ADDR
// end ;
63537: GO 63444
63539: POP
63540: POP
// end ;
63541: LD_VAR 0 5
63545: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
63546: LD_INT 0
63548: PPUSH
// if not vehicles or not parkingPoint then
63549: LD_VAR 0 1
63553: NOT
63554: IFTRUE 63563
63556: PUSH
63557: LD_VAR 0 2
63561: NOT
63562: OR
63563: IFFALSE 63567
// exit ;
63565: GO 63665
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
63567: LD_ADDR_VAR 0 1
63571: PUSH
63572: LD_VAR 0 1
63576: PPUSH
63577: LD_INT 50
63579: PUSH
63580: EMPTY
63581: LIST
63582: PUSH
63583: LD_INT 3
63585: PUSH
63586: LD_INT 92
63588: PUSH
63589: LD_VAR 0 2
63593: PUSH
63594: LD_INT 1
63596: ARRAY
63597: PUSH
63598: LD_VAR 0 2
63602: PUSH
63603: LD_INT 2
63605: ARRAY
63606: PUSH
63607: LD_INT 8
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PPUSH
63624: CALL_OW 72
63628: ST_TO_ADDR
// if not vehicles then
63629: LD_VAR 0 1
63633: NOT
63634: IFFALSE 63638
// exit ;
63636: GO 63665
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
63638: LD_VAR 0 1
63642: PPUSH
63643: LD_VAR 0 2
63647: PUSH
63648: LD_INT 1
63650: ARRAY
63651: PPUSH
63652: LD_VAR 0 2
63656: PUSH
63657: LD_INT 2
63659: ARRAY
63660: PPUSH
63661: CALL_OW 111
// end ;
63665: LD_VAR 0 3
63669: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
63670: LD_INT 0
63672: PPUSH
63673: PPUSH
63674: PPUSH
// if not side or not area then
63675: LD_VAR 0 1
63679: NOT
63680: IFTRUE 63689
63682: PUSH
63683: LD_VAR 0 2
63687: NOT
63688: OR
63689: IFFALSE 63693
// exit ;
63691: GO 63812
// tmp := AreaToList ( area , 0 ) ;
63693: LD_ADDR_VAR 0 5
63697: PUSH
63698: LD_VAR 0 2
63702: PPUSH
63703: LD_INT 0
63705: PPUSH
63706: CALL_OW 517
63710: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
63711: LD_ADDR_VAR 0 4
63715: PUSH
63716: DOUBLE
63717: LD_INT 1
63719: DEC
63720: ST_TO_ADDR
63721: LD_VAR 0 5
63725: PUSH
63726: LD_INT 1
63728: ARRAY
63729: PUSH
63730: FOR_TO
63731: IFFALSE 63810
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
63733: LD_VAR 0 5
63737: PUSH
63738: LD_INT 1
63740: ARRAY
63741: PUSH
63742: LD_VAR 0 4
63746: ARRAY
63747: PPUSH
63748: LD_VAR 0 5
63752: PUSH
63753: LD_INT 2
63755: ARRAY
63756: PUSH
63757: LD_VAR 0 4
63761: ARRAY
63762: PPUSH
63763: CALL_OW 351
63767: IFFALSE 63808
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
63769: LD_VAR 0 5
63773: PUSH
63774: LD_INT 1
63776: ARRAY
63777: PUSH
63778: LD_VAR 0 4
63782: ARRAY
63783: PPUSH
63784: LD_VAR 0 5
63788: PUSH
63789: LD_INT 2
63791: ARRAY
63792: PUSH
63793: LD_VAR 0 4
63797: ARRAY
63798: PPUSH
63799: LD_VAR 0 1
63803: PPUSH
63804: CALL_OW 244
// end ;
63808: GO 63730
63810: POP
63811: POP
// end ;
63812: LD_VAR 0 3
63816: RET
// export function UniqueArray ( array ) ; var i ; begin
63817: LD_INT 0
63819: PPUSH
63820: PPUSH
// result := [ ] ;
63821: LD_ADDR_VAR 0 2
63825: PUSH
63826: EMPTY
63827: ST_TO_ADDR
// if not array then
63828: LD_VAR 0 1
63832: NOT
63833: IFFALSE 63837
// exit ;
63835: GO 63898
// for i := 1 to array do
63837: LD_ADDR_VAR 0 3
63841: PUSH
63842: DOUBLE
63843: LD_INT 1
63845: DEC
63846: ST_TO_ADDR
63847: LD_VAR 0 1
63851: PUSH
63852: FOR_TO
63853: IFFALSE 63896
// if not array [ i ] in result then
63855: LD_VAR 0 1
63859: PUSH
63860: LD_VAR 0 3
63864: ARRAY
63865: PUSH
63866: LD_VAR 0 2
63870: IN
63871: NOT
63872: IFFALSE 63894
// result := Join ( result , i ) ;
63874: LD_ADDR_VAR 0 2
63878: PUSH
63879: LD_VAR 0 2
63883: PPUSH
63884: LD_VAR 0 3
63888: PPUSH
63889: CALL 58549 0 2
63893: ST_TO_ADDR
63894: GO 63852
63896: POP
63897: POP
// end ; end_of_file
63898: LD_VAR 0 2
63902: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
63903: PPOPN 6
63905: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
63906: LD_INT 0
63908: PPUSH
// begin if not units then
63909: LD_VAR 0 1
63913: NOT
63914: IFFALSE 63918
// exit ;
63916: GO 63952
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
63918: LD_VAR 0 1
63922: PPUSH
63923: LD_VAR 0 2
63927: PPUSH
63928: LD_VAR 0 3
63932: PPUSH
63933: LD_VAR 0 4
63937: PPUSH
63938: LD_VAR 0 5
63942: PPUSH
63943: LD_VAR 0 6
63947: PPUSH
63948: CALL 18871 0 6
// end ;
63952: PPOPN 7
63954: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
63955: LD_EXP 5
63959: PUSH
63960: LD_INT 4
63962: EQUAL
63963: IFFALSE 63999
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
63965: LD_STRING setGameDifficulty(
63967: PUSH
63968: LD_OWVAR 67
63972: STR
63973: PUSH
63974: LD_STRING )
63976: STR
63977: PPUSH
63978: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
63982: LD_STRING displayDifficulty(
63984: PUSH
63985: LD_OWVAR 67
63989: STR
63990: PUSH
63991: LD_STRING )
63993: STR
63994: PPUSH
63995: CALL_OW 559
// end ; SOS_MapStart ( ) ;
63999: CALL 18920 0 0
// end ; end_of_file end_of_file
64003: PPOPN 1
64005: END
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
64006: LD_EXP 41
64010: IFFALSE 64351
64012: GO 64014
64014: DISABLE
64015: LD_INT 0
64017: PPUSH
64018: PPUSH
64019: PPUSH
// begin mpKingPoints := [ ] ;
64020: LD_ADDR_EXP 66
64024: PUSH
64025: EMPTY
64026: ST_TO_ADDR
// if mpTeamGame then
64027: LD_EXP 13
64031: IFFALSE 64085
// begin for i := 1 to Count ( mpTeams ) do
64033: LD_ADDR_VAR 0 1
64037: PUSH
64038: DOUBLE
64039: LD_INT 1
64041: DEC
64042: ST_TO_ADDR
64043: LD_EXP 12
64047: PPUSH
64048: CALL 22573 0 1
64052: PUSH
64053: FOR_TO
64054: IFFALSE 64081
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
64056: LD_ADDR_EXP 66
64060: PUSH
64061: LD_EXP 66
64065: PPUSH
64066: LD_VAR 0 1
64070: PPUSH
64071: LD_INT 0
64073: PPUSH
64074: CALL_OW 1
64078: ST_TO_ADDR
64079: GO 64053
64081: POP
64082: POP
// end else
64083: GO 64128
// begin for i := 1 to 8 do
64085: LD_ADDR_VAR 0 1
64089: PUSH
64090: DOUBLE
64091: LD_INT 1
64093: DEC
64094: ST_TO_ADDR
64095: LD_INT 8
64097: PUSH
64098: FOR_TO
64099: IFFALSE 64126
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
64101: LD_ADDR_EXP 66
64105: PUSH
64106: LD_EXP 66
64110: PPUSH
64111: LD_VAR 0 1
64115: PPUSH
64116: LD_INT 0
64118: PPUSH
64119: CALL_OW 1
64123: ST_TO_ADDR
64124: GO 64098
64126: POP
64127: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
64128: LD_ADDR_VAR 0 3
64132: PUSH
64133: LD_EXP 2
64137: PPUSH
64138: LD_INT 0
64140: PPUSH
64141: CALL_OW 517
64145: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
64146: LD_ADDR_VAR 0 1
64150: PUSH
64151: DOUBLE
64152: LD_INT 1
64154: DEC
64155: ST_TO_ADDR
64156: LD_VAR 0 3
64160: PUSH
64161: LD_INT 1
64163: ARRAY
64164: PUSH
64165: FOR_TO
64166: IFFALSE 64233
// for j := 1 to 8 do
64168: LD_ADDR_VAR 0 2
64172: PUSH
64173: DOUBLE
64174: LD_INT 1
64176: DEC
64177: ST_TO_ADDR
64178: LD_INT 8
64180: PUSH
64181: FOR_TO
64182: IFFALSE 64229
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
64184: LD_VAR 0 3
64188: PUSH
64189: LD_INT 1
64191: ARRAY
64192: PUSH
64193: LD_VAR 0 1
64197: ARRAY
64198: PPUSH
64199: LD_VAR 0 3
64203: PUSH
64204: LD_INT 2
64206: ARRAY
64207: PUSH
64208: LD_VAR 0 1
64212: ARRAY
64213: PPUSH
64214: LD_VAR 0 2
64218: PPUSH
64219: LD_INT 12
64221: NEG
64222: PPUSH
64223: CALL_OW 330
64227: GO 64181
64229: POP
64230: POP
64231: GO 64165
64233: POP
64234: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
64235: LD_EXP 36
64239: PPUSH
64240: LD_INT 1
64242: PPUSH
64243: CALL_OW 424
// UpdateCounter ;
64247: CALL 64857 0 0
// repeat wait ( 0 0$1 ) ;
64251: LD_INT 35
64253: PPUSH
64254: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
64258: LD_ADDR_VAR 0 3
64262: PUSH
64263: LD_EXP 36
64267: PPUSH
64268: LD_INT 3
64270: PUSH
64271: LD_INT 57
64273: PUSH
64274: EMPTY
64275: LIST
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: LD_INT 50
64283: PUSH
64284: EMPTY
64285: LIST
64286: PUSH
64287: LD_INT 2
64289: PUSH
64290: LD_INT 30
64292: PUSH
64293: LD_INT 0
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: LD_INT 30
64302: PUSH
64303: LD_INT 1
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: LIST
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: LIST
64319: PPUSH
64320: CALL_OW 70
64324: ST_TO_ADDR
// if not tmp then
64325: LD_VAR 0 3
64329: NOT
64330: IFFALSE 64334
// continue ;
64332: GO 64251
// AddPoints ( tmp ) ;
64334: LD_VAR 0 3
64338: PPUSH
64339: CALL 64535 0 1
// UpdateCounter ;
64343: CALL 64857 0 0
// until false ;
64347: LD_INT 0
64349: IFFALSE 64251
// end ;
64351: PPOPN 3
64353: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
64354: LD_EXP 41
64358: IFFALSE 64366
64360: PUSH
64361: LD_EXP 39
64365: AND
64366: IFFALSE 64532
64368: GO 64370
64370: DISABLE
64371: LD_INT 0
64373: PPUSH
64374: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
64375: LD_ADDR_VAR 0 2
64379: PUSH
64380: LD_EXP 2
64384: PPUSH
64385: LD_INT 0
64387: PPUSH
64388: CALL_OW 517
64392: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
64393: LD_ADDR_VAR 0 1
64397: PUSH
64398: DOUBLE
64399: LD_INT 1
64401: DEC
64402: ST_TO_ADDR
64403: LD_VAR 0 2
64407: PUSH
64408: LD_INT 1
64410: ARRAY
64411: PUSH
64412: FOR_TO
64413: IFFALSE 64454
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
64415: LD_VAR 0 2
64419: PUSH
64420: LD_INT 1
64422: ARRAY
64423: PUSH
64424: LD_VAR 0 1
64428: ARRAY
64429: PPUSH
64430: LD_VAR 0 2
64434: PUSH
64435: LD_INT 2
64437: ARRAY
64438: PUSH
64439: LD_VAR 0 1
64443: ARRAY
64444: PPUSH
64445: LD_INT 125
64447: PPUSH
64448: CALL_OW 495
64452: GO 64412
64454: POP
64455: POP
// repeat wait ( mpEmissions ) ;
64456: LD_EXP 39
64460: PPUSH
64461: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
64465: LD_ADDR_VAR 0 1
64469: PUSH
64470: DOUBLE
64471: LD_INT 1
64473: DEC
64474: ST_TO_ADDR
64475: LD_VAR 0 2
64479: PUSH
64480: LD_INT 1
64482: ARRAY
64483: PUSH
64484: FOR_TO
64485: IFFALSE 64526
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
64487: LD_VAR 0 2
64491: PUSH
64492: LD_INT 1
64494: ARRAY
64495: PUSH
64496: LD_VAR 0 1
64500: ARRAY
64501: PPUSH
64502: LD_VAR 0 2
64506: PUSH
64507: LD_INT 2
64509: ARRAY
64510: PUSH
64511: LD_VAR 0 1
64515: ARRAY
64516: PPUSH
64517: LD_INT 15
64519: PPUSH
64520: CALL_OW 495
64524: GO 64484
64526: POP
64527: POP
// until false ;
64528: LD_INT 0
64530: IFFALSE 64456
// end ;
64532: PPOPN 2
64534: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
64535: LD_INT 0
64537: PPUSH
64538: PPUSH
64539: PPUSH
64540: PPUSH
64541: PPUSH
// if mpTeamGame then
64542: LD_EXP 13
64546: IFFALSE 64743
// begin first := depots [ 1 ] ;
64548: LD_ADDR_VAR 0 4
64552: PUSH
64553: LD_VAR 0 1
64557: PUSH
64558: LD_INT 1
64560: ARRAY
64561: ST_TO_ADDR
// side := GetSide ( first ) ;
64562: LD_ADDR_VAR 0 6
64566: PUSH
64567: LD_VAR 0 4
64571: PPUSH
64572: CALL_OW 255
64576: ST_TO_ADDR
// for i := 1 to mpTeams do
64577: LD_ADDR_VAR 0 3
64581: PUSH
64582: DOUBLE
64583: LD_INT 1
64585: DEC
64586: ST_TO_ADDR
64587: LD_EXP 12
64591: PUSH
64592: FOR_TO
64593: IFFALSE 64627
// if side in mpTeams [ i ] then
64595: LD_VAR 0 6
64599: PUSH
64600: LD_EXP 12
64604: PUSH
64605: LD_VAR 0 3
64609: ARRAY
64610: IN
64611: IFFALSE 64625
// begin team := i ;
64613: LD_ADDR_VAR 0 5
64617: PUSH
64618: LD_VAR 0 3
64622: ST_TO_ADDR
// break ;
64623: GO 64627
// end ;
64625: GO 64592
64627: POP
64628: POP
// if not team then
64629: LD_VAR 0 5
64633: NOT
64634: IFFALSE 64638
// exit ;
64636: GO 64852
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
64638: LD_EXP 36
64642: PPUSH
64643: LD_INT 81
64645: PUSH
64646: LD_VAR 0 6
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PPUSH
64655: CALL_OW 70
64659: IFFALSE 64663
// exit ;
64661: GO 64852
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
64663: LD_ADDR_EXP 66
64667: PUSH
64668: LD_EXP 66
64672: PPUSH
64673: LD_VAR 0 5
64677: PPUSH
64678: LD_EXP 66
64682: PUSH
64683: LD_VAR 0 5
64687: ARRAY
64688: PUSH
64689: LD_INT 1
64691: PLUS
64692: PPUSH
64693: CALL_OW 1
64697: ST_TO_ADDR
// for i in mpTeams [ team ] do
64698: LD_ADDR_VAR 0 3
64702: PUSH
64703: LD_EXP 12
64707: PUSH
64708: LD_VAR 0 5
64712: ARRAY
64713: PUSH
64714: FOR_IN
64715: IFFALSE 64739
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
64717: LD_VAR 0 3
64721: PPUSH
64722: LD_EXP 66
64726: PUSH
64727: LD_VAR 0 5
64731: ARRAY
64732: PPUSH
64733: CALL_OW 506
64737: GO 64714
64739: POP
64740: POP
// end else
64741: GO 64852
// begin first := depots [ 1 ] ;
64743: LD_ADDR_VAR 0 4
64747: PUSH
64748: LD_VAR 0 1
64752: PUSH
64753: LD_INT 1
64755: ARRAY
64756: ST_TO_ADDR
// side := GetSide ( first ) ;
64757: LD_ADDR_VAR 0 6
64761: PUSH
64762: LD_VAR 0 4
64766: PPUSH
64767: CALL_OW 255
64771: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
64772: LD_EXP 36
64776: PPUSH
64777: LD_INT 81
64779: PUSH
64780: LD_VAR 0 6
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PPUSH
64789: CALL_OW 70
64793: IFFALSE 64797
// exit ;
64795: GO 64852
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
64797: LD_ADDR_EXP 66
64801: PUSH
64802: LD_EXP 66
64806: PPUSH
64807: LD_VAR 0 6
64811: PPUSH
64812: LD_EXP 66
64816: PUSH
64817: LD_VAR 0 6
64821: ARRAY
64822: PUSH
64823: LD_INT 1
64825: PLUS
64826: PPUSH
64827: CALL_OW 1
64831: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
64832: LD_VAR 0 6
64836: PPUSH
64837: LD_EXP 66
64841: PUSH
64842: LD_VAR 0 6
64846: ARRAY
64847: PPUSH
64848: CALL_OW 506
// end ; end ;
64852: LD_VAR 0 2
64856: RET
// function UpdateCounter ; var i ; begin
64857: LD_INT 0
64859: PPUSH
64860: PPUSH
// result := [ ] ;
64861: LD_ADDR_VAR 0 1
64865: PUSH
64866: EMPTY
64867: ST_TO_ADDR
// if mpTeamGame then
64868: LD_EXP 13
64872: IFFALSE 64939
// begin for i := 1 to mpTeams do
64874: LD_ADDR_VAR 0 2
64878: PUSH
64879: DOUBLE
64880: LD_INT 1
64882: DEC
64883: ST_TO_ADDR
64884: LD_EXP 12
64888: PUSH
64889: FOR_TO
64890: IFFALSE 64935
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
64892: LD_ADDR_VAR 0 1
64896: PUSH
64897: LD_VAR 0 1
64901: PUSH
64902: LD_STRING #KingoftheHill-Team
64904: PUSH
64905: LD_VAR 0 2
64909: PUSH
64910: LD_EXP 66
64914: PUSH
64915: LD_VAR 0 2
64919: ARRAY
64920: PUSH
64921: LD_EXP 37
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: ADD
64932: ST_TO_ADDR
64933: GO 64889
64935: POP
64936: POP
// end else
64937: GO 65012
// begin for i := 1 to 8 do
64939: LD_ADDR_VAR 0 2
64943: PUSH
64944: DOUBLE
64945: LD_INT 1
64947: DEC
64948: ST_TO_ADDR
64949: LD_INT 8
64951: PUSH
64952: FOR_TO
64953: IFFALSE 65010
// if mpSidePositions [ i ] then
64955: LD_EXP 9
64959: PUSH
64960: LD_VAR 0 2
64964: ARRAY
64965: IFFALSE 65008
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
64967: LD_ADDR_VAR 0 1
64971: PUSH
64972: LD_VAR 0 1
64976: PUSH
64977: LD_STRING #KingoftheHill-Player
64979: PUSH
64980: LD_VAR 0 2
64984: PUSH
64985: LD_EXP 66
64989: PUSH
64990: LD_VAR 0 2
64994: ARRAY
64995: PUSH
64996: LD_EXP 37
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: ADD
65007: ST_TO_ADDR
65008: GO 64952
65010: POP
65011: POP
// end ; mpDisplayStrings := result ;
65012: LD_ADDR_EXP 40
65016: PUSH
65017: LD_VAR 0 1
65021: ST_TO_ADDR
// end ;
65022: LD_VAR 0 1
65026: RET
// export function HowMuchPointsKing ( side ) ; begin
65027: LD_INT 0
65029: PPUSH
// result := HowMuchPoints ( side ) ;
65030: LD_ADDR_VAR 0 2
65034: PUSH
65035: LD_VAR 0 1
65039: PPUSH
65040: CALL 65050 0 1
65044: ST_TO_ADDR
// end ;
65045: LD_VAR 0 2
65049: RET
// function HowMuchPoints ( side ) ; var i ; begin
65050: LD_INT 0
65052: PPUSH
65053: PPUSH
// if mpTeamGame then
65054: LD_EXP 13
65058: IFFALSE 65127
// begin for i := 1 to Count ( mpTeams ) do
65060: LD_ADDR_VAR 0 3
65064: PUSH
65065: DOUBLE
65066: LD_INT 1
65068: DEC
65069: ST_TO_ADDR
65070: LD_EXP 12
65074: PPUSH
65075: CALL 22573 0 1
65079: PUSH
65080: FOR_TO
65081: IFFALSE 65123
// begin if side in mpTeams [ i ] then
65083: LD_VAR 0 1
65087: PUSH
65088: LD_EXP 12
65092: PUSH
65093: LD_VAR 0 3
65097: ARRAY
65098: IN
65099: IFFALSE 65121
// begin result := mpKingPoints [ i ] ;
65101: LD_ADDR_VAR 0 2
65105: PUSH
65106: LD_EXP 66
65110: PUSH
65111: LD_VAR 0 3
65115: ARRAY
65116: ST_TO_ADDR
// exit ;
65117: POP
65118: POP
65119: GO 65143
// end ; end ;
65121: GO 65080
65123: POP
65124: POP
// end else
65125: GO 65143
// result := mpKingPoints [ side ] ;
65127: LD_ADDR_VAR 0 2
65131: PUSH
65132: LD_EXP 66
65136: PUSH
65137: LD_VAR 0 1
65141: ARRAY
65142: ST_TO_ADDR
// end ;
65143: LD_VAR 0 2
65147: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
65148: LD_EXP 41
65152: IFFALSE 65160
65154: PUSH
65155: CALL 65572 0 0
65159: AND
65160: IFFALSE 65168
65162: PUSH
65163: LD_OWVAR 4
65167: AND
65168: IFFALSE 65421
65170: GO 65172
65172: DISABLE
65173: LD_INT 0
65175: PPUSH
65176: PPUSH
// begin canWin := false ;
65177: LD_ADDR_VAR 0 2
65181: PUSH
65182: LD_INT 0
65184: ST_TO_ADDR
// if not HasPower ( your_side ) then
65185: LD_OWVAR 2
65189: PPUSH
65190: CALL 65614 0 1
65194: NOT
65195: IFFALSE 65206
// begin Multiplayer_Loose_Message ;
65197: CALL_OW 521
// enable ( mpLose ) ;
65201: LD_INT 102
65203: ENABLE_MARKED
// end else
65204: GO 65421
// begin if not EnemiesInGame then
65206: CALL 65424 0 0
65210: NOT
65211: IFFALSE 65218
// begin enable ( mpWin ) ;
65213: LD_INT 101
65215: ENABLE_MARKED
// exit ;
65216: GO 65421
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
65218: LD_ADDR_VAR 0 2
65222: PUSH
65223: LD_OWVAR 2
65227: PPUSH
65228: CALL 65050 0 1
65232: PUSH
65233: LD_EXP 37
65237: GREATEREQUAL
65238: IFFALSE 65251
65240: PUSH
65241: LD_OWVAR 2
65245: PPUSH
65246: CALL 65614 0 1
65250: AND
65251: ST_TO_ADDR
// for i := 1 to 8 do
65252: LD_ADDR_VAR 0 1
65256: PUSH
65257: DOUBLE
65258: LD_INT 1
65260: DEC
65261: ST_TO_ADDR
65262: LD_INT 8
65264: PUSH
65265: FOR_TO
65266: IFFALSE 65407
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
65268: LD_EXP 9
65272: PUSH
65273: LD_VAR 0 1
65277: ARRAY
65278: IFFALSE 65291
65280: PUSH
65281: LD_VAR 0 1
65285: PPUSH
65286: CALL_OW 108
65290: AND
65291: IFFALSE 65305
65293: PUSH
65294: LD_VAR 0 1
65298: PUSH
65299: LD_OWVAR 2
65303: NONEQUAL
65304: AND
65305: IFFALSE 65405
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
65307: LD_EXP 10
65311: PUSH
65312: LD_VAR 0 1
65316: ARRAY
65317: NOT
65318: IFTRUE 65366
65320: PUSH
65321: LD_EXP 10
65325: PUSH
65326: LD_VAR 0 1
65330: ARRAY
65331: PUSH
65332: LD_EXP 10
65336: PUSH
65337: LD_OWVAR 2
65341: ARRAY
65342: NONEQUAL
65343: IFFALSE 65365
65345: PUSH
65346: LD_OWVAR 2
65350: PPUSH
65351: LD_VAR 0 1
65355: PPUSH
65356: CALL_OW 81
65360: PUSH
65361: LD_INT 1
65363: NONEQUAL
65364: AND
65365: OR
65366: IFFALSE 65405
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
65368: LD_VAR 0 1
65372: PPUSH
65373: CALL 65050 0 1
65377: PUSH
65378: LD_EXP 37
65382: GREATEREQUAL
65383: IFFALSE 65396
65385: PUSH
65386: LD_VAR 0 1
65390: PPUSH
65391: CALL 65614 0 1
65395: AND
65396: IFFALSE 65405
// begin enable ( mpLose ) ;
65398: LD_INT 102
65400: ENABLE_MARKED
// exit ;
65401: POP
65402: POP
65403: GO 65421
// end ;
65405: GO 65265
65407: POP
65408: POP
// if canWin then
65409: LD_VAR 0 2
65413: IFFALSE 65420
// enable ( mpWin ) else
65415: LD_INT 101
65417: ENABLE_MARKED
65418: GO 65421
// enable ;
65420: ENABLE
// end ; end ;
65421: PPOPN 2
65423: END
// function EnemiesInGame ; var i ; begin
65424: LD_INT 0
65426: PPUSH
65427: PPUSH
// result := false ;
65428: LD_ADDR_VAR 0 1
65432: PUSH
65433: LD_INT 0
65435: ST_TO_ADDR
// for i := 1 to 8 do
65436: LD_ADDR_VAR 0 2
65440: PUSH
65441: DOUBLE
65442: LD_INT 1
65444: DEC
65445: ST_TO_ADDR
65446: LD_INT 8
65448: PUSH
65449: FOR_TO
65450: IFFALSE 65565
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
65452: LD_VAR 0 2
65456: PUSH
65457: LD_OWVAR 2
65461: NONEQUAL
65462: IFFALSE 65475
65464: PUSH
65465: LD_VAR 0 2
65469: PPUSH
65470: CALL 65614 0 1
65474: AND
65475: IFFALSE 65488
65477: PUSH
65478: LD_VAR 0 2
65482: PPUSH
65483: CALL_OW 108
65487: AND
65488: IFFALSE 65563
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
65490: LD_EXP 10
65494: PUSH
65495: LD_VAR 0 2
65499: ARRAY
65500: NOT
65501: IFTRUE 65549
65503: PUSH
65504: LD_EXP 10
65508: PUSH
65509: LD_VAR 0 2
65513: ARRAY
65514: PUSH
65515: LD_EXP 10
65519: PUSH
65520: LD_OWVAR 2
65524: ARRAY
65525: NONEQUAL
65526: IFFALSE 65548
65528: PUSH
65529: LD_OWVAR 2
65533: PPUSH
65534: LD_VAR 0 2
65538: PPUSH
65539: CALL_OW 81
65543: PUSH
65544: LD_INT 1
65546: NONEQUAL
65547: AND
65548: OR
65549: IFFALSE 65563
// begin result := true ;
65551: LD_ADDR_VAR 0 1
65555: PUSH
65556: LD_INT 1
65558: ST_TO_ADDR
// exit ;
65559: POP
65560: POP
65561: GO 65567
// end ;
65563: GO 65449
65565: POP
65566: POP
// end ;
65567: LD_VAR 0 1
65571: RET
// function CanWinLoose ; begin
65572: LD_INT 0
65574: PPUSH
// result := true ;
65575: LD_ADDR_VAR 0 1
65579: PUSH
65580: LD_INT 1
65582: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
65583: CALL_OW 531
65587: IFFALSE 65599
65589: PUSH
65590: CALL_OW 519
65594: PUSH
65595: LD_INT 1
65597: GREATER
65598: AND
65599: IFFALSE 65609
// result := false ;
65601: LD_ADDR_VAR 0 1
65605: PUSH
65606: LD_INT 0
65608: ST_TO_ADDR
// end ;
65609: LD_VAR 0 1
65613: RET
// function HasPower ( i ) ; begin
65614: LD_INT 0
65616: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
65617: LD_ADDR_VAR 0 2
65621: PUSH
65622: LD_INT 22
65624: PUSH
65625: LD_VAR 0 1
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: PUSH
65634: LD_INT 2
65636: PUSH
65637: LD_INT 21
65639: PUSH
65640: LD_INT 1
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: PUSH
65647: LD_INT 33
65649: PUSH
65650: LD_INT 3
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: PUSH
65657: LD_INT 33
65659: PUSH
65660: LD_INT 5
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PUSH
65667: EMPTY
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: PPUSH
65677: CALL_OW 69
65681: ST_TO_ADDR
// end ;
65682: LD_VAR 0 2
65686: RET
