// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 3504 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 3927 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 1 , 1 ] ;
  20: LD_ADDR_EXP 6
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 1
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ 0 , 1 , 2 , 4 ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 7
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: LD_INT 0
 461: PUSH
 462: LD_INT 1
 464: PUSH
 465: LD_INT 2
 467: PUSH
 468: LD_INT 4
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: LIST
 475: LIST
 476: PUSH
 477: LD_INT 0
 479: PUSH
 480: LD_INT 6300
 482: PUSH
 483: LD_INT 10500
 485: PUSH
 486: LD_INT 16800
 488: PUSH
 489: LD_INT 21000
 491: PUSH
 492: LD_INT 25200
 494: PUSH
 495: LD_INT 31500
 497: PUSH
 498: LD_INT 42000
 500: PUSH
 501: LD_INT 63000
 503: PUSH
 504: EMPTY
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: LIST
 527: LIST
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: LIST
 534: LIST
 535: LIST
 536: LIST
 537: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 1 , 3 3$0 ] ;
 538: LD_ADDR_EXP 8
 542: PUSH
 543: LD_INT 2
 545: PUSH
 546: LD_INT 15
 548: PUSH
 549: LD_INT 4
 551: PUSH
 552: LD_INT 100
 554: PUSH
 555: LD_INT 30
 557: PUSH
 558: LD_INT 0
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: LIST
 565: PUSH
 566: LD_INT 3
 568: PUSH
 569: LD_INT 1
 571: PUSH
 572: LD_INT 2
 574: PUSH
 575: LD_INT 250
 577: PUSH
 578: LD_INT 2
 580: PUSH
 581: LD_INT 10500
 583: PUSH
 584: LD_INT 1
 586: PUSH
 587: LD_INT 700
 589: PUSH
 590: LD_INT 1
 592: PUSH
 593: LD_INT 700
 595: PUSH
 596: LD_INT 3
 598: PUSH
 599: LD_INT 0
 601: PUSH
 602: LD_INT 0
 604: PUSH
 605: LD_INT 31500
 607: PUSH
 608: LD_INT 0
 610: PUSH
 611: LD_INT 1
 613: PUSH
 614: LD_INT 6300
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: LIST
 625: LIST
 626: LIST
 627: LIST
 628: LIST
 629: LIST
 630: LIST
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: LIST
 636: LIST
 637: LIST
 638: LIST
 639: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 1
 647: ST_TO_ADDR
// your_side := 1 ;
 648: LD_ADDR_OWVAR 2
 652: PUSH
 653: LD_INT 1
 655: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 656: LD_ADDR_EXP 9
 660: PUSH
 661: LD_INT 8
 663: PUSH
 664: LD_INT 2
 666: PUSH
 667: LD_INT 3
 669: PUSH
 670: LD_INT 4
 672: PUSH
 673: LD_INT 5
 675: PUSH
 676: LD_INT 6
 678: PUSH
 679: LD_INT 7
 681: PUSH
 682: LD_INT 1
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: LIST
 692: LIST
 693: LIST
 694: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 695: LD_ADDR_EXP 10
 699: PUSH
 700: LD_INT 1
 702: PUSH
 703: LD_INT 2
 705: PUSH
 706: LD_INT 2
 708: PUSH
 709: LD_INT 3
 711: PUSH
 712: LD_INT 3
 714: PUSH
 715: LD_INT 4
 717: PUSH
 718: LD_INT 4
 720: PUSH
 721: LD_INT 1
 723: PUSH
 724: EMPTY
 725: LIST
 726: LIST
 727: LIST
 728: LIST
 729: LIST
 730: LIST
 731: LIST
 732: LIST
 733: ST_TO_ADDR
// mpSideNations := [ 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 ] ;
 734: LD_ADDR_EXP 11
 738: PUSH
 739: LD_INT 3
 741: PUSH
 742: LD_INT 3
 744: PUSH
 745: LD_INT 3
 747: PUSH
 748: LD_INT 3
 750: PUSH
 751: LD_INT 3
 753: PUSH
 754: LD_INT 3
 756: PUSH
 757: LD_INT 3
 759: PUSH
 760: LD_INT 3
 762: PUSH
 763: EMPTY
 764: LIST
 765: LIST
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: LIST
 771: LIST
 772: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 773: LD_ADDR_EXP 12
 777: PUSH
 778: LD_INT 1
 780: PUSH
 781: LD_INT 8
 783: PUSH
 784: EMPTY
 785: LIST
 786: LIST
 787: PUSH
 788: LD_INT 2
 790: PUSH
 791: LD_INT 3
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: PUSH
 798: LD_INT 4
 800: PUSH
 801: LD_INT 5
 803: PUSH
 804: EMPTY
 805: LIST
 806: LIST
 807: PUSH
 808: LD_INT 6
 810: PUSH
 811: LD_INT 7
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: LIST
 822: LIST
 823: ST_TO_ADDR
// mpTeamGame := true ;
 824: LD_ADDR_EXP 13
 828: PUSH
 829: LD_INT 1
 831: ST_TO_ADDR
// mpMapSize := [ 180 , 220 ] ;
 832: LD_ADDR_EXP 31
 836: PUSH
 837: LD_INT 180
 839: PUSH
 840: LD_INT 220
 842: PUSH
 843: EMPTY
 844: LIST
 845: LIST
 846: ST_TO_ADDR
// end ;
 847: LD_VAR 0 1
 851: RET
// export kingArea , kingCamArea , mpTree ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 852: LD_INT 0
 854: PPUSH
 855: PPUSH
 856: PPUSH
 857: PPUSH
 858: PPUSH
 859: PPUSH
 860: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 861: LD_ADDR_EXP 21
 865: PUSH
 866: LD_INT 3
 868: PUSH
 869: LD_INT 4
 871: PUSH
 872: LD_INT 5
 874: PUSH
 875: LD_INT 6
 877: PUSH
 878: LD_INT 7
 880: PUSH
 881: LD_INT 8
 883: PUSH
 884: LD_INT 9
 886: PUSH
 887: LD_INT 10
 889: PUSH
 890: EMPTY
 891: LIST
 892: LIST
 893: LIST
 894: LIST
 895: LIST
 896: LIST
 897: LIST
 898: LIST
 899: ST_TO_ADDR
// mpMarkedAreas := [ southHillArea , northHillArea , ] union mpBuildUpAreas ;
 900: LD_ADDR_EXP 20
 904: PUSH
 905: LD_INT 1
 907: PUSH
 908: LD_INT 2
 910: PUSH
 911: EMPTY
 912: LIST
 913: LIST
 914: PUSH
 915: LD_EXP 21
 919: UNION
 920: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 921: LD_VAR 0 1
 925: PUSH
 926: LD_INT 2
 928: EQUAL
 929: IFFALSE 941
// baseLevel := 1 else
 931: LD_ADDR_VAR 0 7
 935: PUSH
 936: LD_INT 1
 938: ST_TO_ADDR
 939: GO 955
// baseLevel := mpGameSettings [ 1 ] ;
 941: LD_ADDR_VAR 0 7
 945: PUSH
 946: LD_EXP 8
 950: PUSH
 951: LD_INT 1
 953: ARRAY
 954: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 955: LD_ADDR_EXP 26
 959: PUSH
 960: LD_EXP 8
 964: PUSH
 965: LD_INT 2
 967: ARRAY
 968: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 969: LD_ADDR_EXP 27
 973: PUSH
 974: LD_EXP 8
 978: PUSH
 979: LD_INT 3
 981: ARRAY
 982: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 983: LD_ADDR_EXP 17
 987: PUSH
 988: LD_EXP 8
 992: PUSH
 993: LD_INT 4
 995: ARRAY
 996: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 997: LD_ADDR_EXP 29
1001: PUSH
1002: LD_EXP 8
1006: PUSH
1007: LD_INT 5
1009: ARRAY
1010: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1011: LD_ADDR_VAR 0 5
1015: PUSH
1016: LD_EXP 8
1020: PUSH
1021: LD_INT 6
1023: ARRAY
1024: PUSH
1025: LD_INT 0
1027: GREATER
1028: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1029: LD_ADDR_VAR 0 6
1033: PUSH
1034: LD_EXP 8
1038: PUSH
1039: LD_INT 7
1041: ARRAY
1042: PUSH
1043: LD_INT 0
1045: GREATER
1046: ST_TO_ADDR
// kingCamArea := 0 ;
1047: LD_ADDR_EXP 2
1051: PUSH
1052: LD_INT 0
1054: ST_TO_ADDR
// kingArea := 0 ;
1055: LD_ADDR_EXP 1
1059: PUSH
1060: LD_INT 0
1062: ST_TO_ADDR
// if gameType = GameTypeKing then
1063: LD_VAR 0 1
1067: PUSH
1068: LD_INT 3
1070: EQUAL
1071: IFFALSE 1111
// begin mpKingArea := 0 ;
1073: LD_ADDR_EXP 36
1077: PUSH
1078: LD_INT 0
1080: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1081: LD_ADDR_EXP 37
1085: PUSH
1086: LD_EXP 8
1090: PUSH
1091: LD_INT 8
1093: ARRAY
1094: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1095: LD_ADDR_EXP 39
1099: PUSH
1100: LD_EXP 8
1104: PUSH
1105: LD_INT 10
1107: ARRAY
1108: ST_TO_ADDR
// end else
1109: GO 1135
// begin mpKingArea := 0 ;
1111: LD_ADDR_EXP 36
1115: PUSH
1116: LD_INT 0
1118: ST_TO_ADDR
// mpPoints := 0 ;
1119: LD_ADDR_EXP 37
1123: PUSH
1124: LD_INT 0
1126: ST_TO_ADDR
// mpEmissions := 0 ;
1127: LD_ADDR_EXP 39
1131: PUSH
1132: LD_INT 0
1134: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1135: LD_EXP 8
1139: PUSH
1140: LD_INT 9
1142: ARRAY
1143: IFFALSE 1275
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1145: LD_ADDR_EXP 38
1149: PUSH
1150: LD_INT 1
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: LD_INT 1
1158: PUSH
1159: LD_INT 2
1161: PUSH
1162: EMPTY
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: PUSH
1168: LD_INT 1
1170: PUSH
1171: LD_INT 1
1173: PUSH
1174: LD_INT 1
1176: PUSH
1177: LD_INT 3
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PUSH
1190: LD_INT 12
1192: PUSH
1193: LD_INT 1
1195: PUSH
1196: LD_INT 1
1198: PUSH
1199: LD_INT 24
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: LIST
1206: LIST
1207: PUSH
1208: LD_INT 12
1210: PUSH
1211: LD_INT 1
1213: PUSH
1214: LD_INT 1
1216: PUSH
1217: LD_INT 23
1219: PUSH
1220: EMPTY
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: PUSH
1230: LD_INT 21
1232: PUSH
1233: LD_INT 1
1235: PUSH
1236: LD_INT 1
1238: PUSH
1239: LD_INT 42
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: LIST
1246: LIST
1247: PUSH
1248: LD_INT 21
1250: PUSH
1251: LD_INT 1
1253: PUSH
1254: LD_INT 1
1256: PUSH
1257: LD_INT 42
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: PUSH
1266: EMPTY
1267: LIST
1268: LIST
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: LIST
1274: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1275: LD_ADDR_EXP 18
1279: PUSH
1280: LD_EXP 8
1284: PUSH
1285: LD_INT 11
1287: ARRAY
1288: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1289: LD_ADDR_EXP 24
1293: PUSH
1294: LD_EXP 8
1298: PUSH
1299: LD_INT 12
1301: ARRAY
1302: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1303: LD_ADDR_EXP 28
1307: PUSH
1308: LD_EXP 8
1312: PUSH
1313: LD_INT 13
1315: ARRAY
1316: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1317: LD_ADDR_EXP 35
1321: PUSH
1322: LD_EXP 8
1326: PUSH
1327: LD_INT 14
1329: ARRAY
1330: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1331: LD_ADDR_EXP 32
1335: PUSH
1336: LD_EXP 8
1340: PUSH
1341: LD_INT 15
1343: ARRAY
1344: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1345: LD_ADDR_EXP 30
1349: PUSH
1350: LD_EXP 8
1354: PUSH
1355: LD_INT 18
1357: ARRAY
1358: ST_TO_ADDR
// mpTree := mpGameSettings [ 20 ] ;
1359: LD_ADDR_EXP 3
1363: PUSH
1364: LD_EXP 8
1368: PUSH
1369: LD_INT 20
1371: ARRAY
1372: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1373: LD_ADDR_EXP 22
1377: PUSH
1378: LD_EXP 8
1382: PUSH
1383: LD_INT 21
1385: ARRAY
1386: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1387: LD_ADDR_EXP 33
1391: PUSH
1392: LD_INT 11
1394: PUSH
1395: LD_INT 12
1397: PUSH
1398: LD_INT 13
1400: PUSH
1401: LD_INT 14
1403: PUSH
1404: LD_INT 15
1406: PUSH
1407: LD_INT 16
1409: PUSH
1410: LD_INT 17
1412: PUSH
1413: LD_INT 18
1415: PUSH
1416: EMPTY
1417: LIST
1418: LIST
1419: LIST
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 3 ) , GetBuildingFromArea ( depotArea3 , 2 ) , GetBuildingFromArea ( depotArea4 , 3 ) , GetBuildingFromArea ( depotArea5 , 0 ) , GetBuildingFromArea ( depotArea6 , 5 ) , GetBuildingFromArea ( depotArea7 , 0 ) , GetBuildingFromArea ( depotArea8 , 5 ) ] ;
1426: LD_ADDR_VAR 0 8
1430: PUSH
1431: LD_INT 19
1433: PPUSH
1434: LD_INT 2
1436: PPUSH
1437: CALL 63493 0 2
1441: PUSH
1442: LD_INT 25
1444: PPUSH
1445: LD_INT 3
1447: PPUSH
1448: CALL 63493 0 2
1452: PUSH
1453: LD_INT 31
1455: PPUSH
1456: LD_INT 2
1458: PPUSH
1459: CALL 63493 0 2
1463: PUSH
1464: LD_INT 37
1466: PPUSH
1467: LD_INT 3
1469: PPUSH
1470: CALL 63493 0 2
1474: PUSH
1475: LD_INT 43
1477: PPUSH
1478: LD_INT 0
1480: PPUSH
1481: CALL 63493 0 2
1485: PUSH
1486: LD_INT 49
1488: PPUSH
1489: LD_INT 5
1491: PPUSH
1492: CALL 63493 0 2
1496: PUSH
1497: LD_INT 55
1499: PPUSH
1500: LD_INT 0
1502: PPUSH
1503: CALL 63493 0 2
1507: PUSH
1508: LD_INT 61
1510: PPUSH
1511: LD_INT 5
1513: PPUSH
1514: CALL 63493 0 2
1518: PUSH
1519: EMPTY
1520: LIST
1521: LIST
1522: LIST
1523: LIST
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1529: LD_ADDR_VAR 0 3
1533: PUSH
1534: DOUBLE
1535: LD_INT 1
1537: DEC
1538: ST_TO_ADDR
1539: LD_VAR 0 8
1543: PPUSH
1544: CALL 22798 0 1
1548: PUSH
1549: FOR_TO
1550: IFFALSE 1654
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1552: LD_ADDR_EXP 23
1556: PUSH
1557: LD_EXP 23
1561: PPUSH
1562: LD_VAR 0 3
1566: PPUSH
1567: LD_VAR 0 8
1571: PUSH
1572: LD_VAR 0 3
1576: ARRAY
1577: PUSH
1578: LD_INT 1
1580: ARRAY
1581: PPUSH
1582: LD_VAR 0 8
1586: PUSH
1587: LD_VAR 0 3
1591: ARRAY
1592: PUSH
1593: LD_INT 3
1595: ARRAY
1596: PPUSH
1597: LD_INT 10
1599: PPUSH
1600: CALL_OW 272
1604: PUSH
1605: LD_VAR 0 8
1609: PUSH
1610: LD_VAR 0 3
1614: ARRAY
1615: PUSH
1616: LD_INT 2
1618: ARRAY
1619: PPUSH
1620: LD_VAR 0 8
1624: PUSH
1625: LD_VAR 0 3
1629: ARRAY
1630: PUSH
1631: LD_INT 3
1633: ARRAY
1634: PPUSH
1635: LD_INT 10
1637: PPUSH
1638: CALL_OW 273
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: PPUSH
1647: CALL_OW 1
1651: ST_TO_ADDR
1652: GO 1549
1654: POP
1655: POP
// if hasOil then
1656: LD_VAR 0 5
1660: IFFALSE 1799
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1662: LD_ADDR_VAR 0 4
1666: PUSH
1667: LD_EXP 8
1671: PUSH
1672: LD_INT 6
1674: ARRAY
1675: PUSH
1676: LD_INT 2
1678: EQUAL
1679: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1680: LD_ADDR_EXP 14
1684: PUSH
1685: LD_INT 20
1687: PPUSH
1688: LD_VAR 0 4
1692: PPUSH
1693: CALL 63326 0 2
1697: PUSH
1698: LD_INT 26
1700: PPUSH
1701: LD_VAR 0 4
1705: PPUSH
1706: CALL 63326 0 2
1710: PUSH
1711: LD_INT 32
1713: PPUSH
1714: LD_VAR 0 4
1718: PPUSH
1719: CALL 63326 0 2
1723: PUSH
1724: LD_INT 38
1726: PPUSH
1727: LD_VAR 0 4
1731: PPUSH
1732: CALL 63326 0 2
1736: PUSH
1737: LD_INT 44
1739: PPUSH
1740: LD_VAR 0 4
1744: PPUSH
1745: CALL 63326 0 2
1749: PUSH
1750: LD_INT 50
1752: PPUSH
1753: LD_VAR 0 4
1757: PPUSH
1758: CALL 63326 0 2
1762: PUSH
1763: LD_INT 56
1765: PPUSH
1766: LD_VAR 0 4
1770: PPUSH
1771: CALL 63326 0 2
1775: PUSH
1776: LD_INT 62
1778: PPUSH
1779: LD_VAR 0 4
1783: PPUSH
1784: CALL 63326 0 2
1788: PUSH
1789: EMPTY
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: ST_TO_ADDR
// end ; if hasSib then
1799: LD_VAR 0 6
1803: IFFALSE 1942
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1805: LD_ADDR_VAR 0 4
1809: PUSH
1810: LD_EXP 8
1814: PUSH
1815: LD_INT 7
1817: ARRAY
1818: PUSH
1819: LD_INT 2
1821: EQUAL
1822: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1823: LD_ADDR_EXP 15
1827: PUSH
1828: LD_INT 21
1830: PPUSH
1831: LD_VAR 0 4
1835: PPUSH
1836: CALL 63326 0 2
1840: PUSH
1841: LD_INT 27
1843: PPUSH
1844: LD_VAR 0 4
1848: PPUSH
1849: CALL 63326 0 2
1853: PUSH
1854: LD_INT 33
1856: PPUSH
1857: LD_VAR 0 4
1861: PPUSH
1862: CALL 63326 0 2
1866: PUSH
1867: LD_INT 39
1869: PPUSH
1870: LD_VAR 0 4
1874: PPUSH
1875: CALL 63326 0 2
1879: PUSH
1880: LD_INT 45
1882: PPUSH
1883: LD_VAR 0 4
1887: PPUSH
1888: CALL 63326 0 2
1892: PUSH
1893: LD_INT 51
1895: PPUSH
1896: LD_VAR 0 4
1900: PPUSH
1901: CALL 63326 0 2
1905: PUSH
1906: LD_INT 57
1908: PPUSH
1909: LD_VAR 0 4
1913: PPUSH
1914: CALL 63326 0 2
1918: PUSH
1919: LD_INT 63
1921: PPUSH
1922: LD_VAR 0 4
1926: PPUSH
1927: CALL 63326 0 2
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: LIST
1936: LIST
1937: LIST
1938: LIST
1939: LIST
1940: LIST
1941: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1942: LD_VAR 0 7
1946: PUSH
1947: LD_INT 1
1949: GREATEREQUAL
1950: IFFALSE 1962
// mpDepots := startPos ;
1952: LD_ADDR_EXP 16
1956: PUSH
1957: LD_VAR 0 8
1961: ST_TO_ADDR
// if baseLevel >= 2 then
1962: LD_VAR 0 7
1966: PUSH
1967: LD_INT 2
1969: GREATEREQUAL
1970: IFFALSE 2387
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 3 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 2 ) ] ] ;
1972: LD_ADDR_EXP 19
1976: PUSH
1977: LD_INT 31
1979: PUSH
1980: LD_INT 23
1982: PPUSH
1983: LD_INT 0
1985: PPUSH
1986: CALL 63493 0 2
1990: ADD
1991: PUSH
1992: LD_INT 31
1994: PUSH
1995: LD_INT 24
1997: PPUSH
1998: LD_INT 5
2000: PPUSH
2001: CALL 63493 0 2
2005: ADD
2006: PUSH
2007: LD_INT 4
2009: PUSH
2010: LD_INT 22
2012: PPUSH
2013: LD_INT 5
2015: PPUSH
2016: CALL 63493 0 2
2020: ADD
2021: PUSH
2022: EMPTY
2023: LIST
2024: LIST
2025: LIST
2026: PUSH
2027: LD_INT 31
2029: PUSH
2030: LD_INT 29
2032: PPUSH
2033: LD_INT 0
2035: PPUSH
2036: CALL 63493 0 2
2040: ADD
2041: PUSH
2042: LD_INT 31
2044: PUSH
2045: LD_INT 30
2047: PPUSH
2048: LD_INT 1
2050: PPUSH
2051: CALL 63493 0 2
2055: ADD
2056: PUSH
2057: LD_INT 4
2059: PUSH
2060: LD_INT 28
2062: PPUSH
2063: LD_INT 5
2065: PPUSH
2066: CALL 63493 0 2
2070: ADD
2071: PUSH
2072: EMPTY
2073: LIST
2074: LIST
2075: LIST
2076: PUSH
2077: LD_INT 31
2079: PUSH
2080: LD_INT 35
2082: PPUSH
2083: LD_INT 0
2085: PPUSH
2086: CALL 63493 0 2
2090: ADD
2091: PUSH
2092: LD_INT 31
2094: PUSH
2095: LD_INT 36
2097: PPUSH
2098: LD_INT 3
2100: PPUSH
2101: CALL 63493 0 2
2105: ADD
2106: PUSH
2107: LD_INT 4
2109: PUSH
2110: LD_INT 34
2112: PPUSH
2113: LD_INT 5
2115: PPUSH
2116: CALL 63493 0 2
2120: ADD
2121: PUSH
2122: EMPTY
2123: LIST
2124: LIST
2125: LIST
2126: PUSH
2127: LD_INT 31
2129: PUSH
2130: LD_INT 41
2132: PPUSH
2133: LD_INT 1
2135: PPUSH
2136: CALL 63493 0 2
2140: ADD
2141: PUSH
2142: LD_INT 31
2144: PUSH
2145: LD_INT 42
2147: PPUSH
2148: LD_INT 5
2150: PPUSH
2151: CALL 63493 0 2
2155: ADD
2156: PUSH
2157: LD_INT 4
2159: PUSH
2160: LD_INT 40
2162: PPUSH
2163: LD_INT 0
2165: PPUSH
2166: CALL 63493 0 2
2170: ADD
2171: PUSH
2172: EMPTY
2173: LIST
2174: LIST
2175: LIST
2176: PUSH
2177: LD_INT 31
2179: PUSH
2180: LD_INT 47
2182: PPUSH
2183: LD_INT 2
2185: PPUSH
2186: CALL 63493 0 2
2190: ADD
2191: PUSH
2192: LD_INT 31
2194: PUSH
2195: LD_INT 48
2197: PPUSH
2198: LD_INT 4
2200: PPUSH
2201: CALL 63493 0 2
2205: ADD
2206: PUSH
2207: LD_INT 4
2209: PUSH
2210: LD_INT 46
2212: PPUSH
2213: LD_INT 3
2215: PPUSH
2216: CALL 63493 0 2
2220: ADD
2221: PUSH
2222: EMPTY
2223: LIST
2224: LIST
2225: LIST
2226: PUSH
2227: LD_INT 31
2229: PUSH
2230: LD_INT 53
2232: PPUSH
2233: LD_INT 3
2235: PPUSH
2236: CALL 63493 0 2
2240: ADD
2241: PUSH
2242: LD_INT 31
2244: PUSH
2245: LD_INT 54
2247: PPUSH
2248: LD_INT 0
2250: PPUSH
2251: CALL 63493 0 2
2255: ADD
2256: PUSH
2257: LD_INT 4
2259: PUSH
2260: LD_INT 52
2262: PPUSH
2263: LD_INT 3
2265: PPUSH
2266: CALL 63493 0 2
2270: ADD
2271: PUSH
2272: EMPTY
2273: LIST
2274: LIST
2275: LIST
2276: PUSH
2277: LD_INT 31
2279: PUSH
2280: LD_INT 59
2282: PPUSH
2283: LD_INT 3
2285: PPUSH
2286: CALL 63493 0 2
2290: ADD
2291: PUSH
2292: LD_INT 31
2294: PUSH
2295: LD_INT 60
2297: PPUSH
2298: LD_INT 5
2300: PPUSH
2301: CALL 63493 0 2
2305: ADD
2306: PUSH
2307: LD_INT 4
2309: PUSH
2310: LD_INT 58
2312: PPUSH
2313: LD_INT 2
2315: PPUSH
2316: CALL 63493 0 2
2320: ADD
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: LIST
2326: PUSH
2327: LD_INT 31
2329: PUSH
2330: LD_INT 65
2332: PPUSH
2333: LD_INT 1
2335: PPUSH
2336: CALL 63493 0 2
2340: ADD
2341: PUSH
2342: LD_INT 31
2344: PUSH
2345: LD_INT 66
2347: PPUSH
2348: LD_INT 3
2350: PPUSH
2351: CALL 63493 0 2
2355: ADD
2356: PUSH
2357: LD_INT 4
2359: PUSH
2360: LD_INT 64
2362: PPUSH
2363: LD_INT 2
2365: PPUSH
2366: CALL 63493 0 2
2370: ADD
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: LIST
2376: PUSH
2377: EMPTY
2378: LIST
2379: LIST
2380: LIST
2381: LIST
2382: LIST
2383: LIST
2384: LIST
2385: LIST
2386: ST_TO_ADDR
// end ; if mpTree then
2387: LD_EXP 3
2391: IFFALSE 2403
// SetAreaMapShow ( TreeArea , 1 ) ;
2393: LD_INT 69
2395: PPUSH
2396: LD_INT 1
2398: PPUSH
2399: CALL_OW 424
// end ;
2403: LD_VAR 0 2
2407: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2408: GO 2410
2410: DISABLE
2411: LD_INT 0
2413: PPUSH
2414: PPUSH
2415: PPUSH
2416: PPUSH
2417: PPUSH
2418: PPUSH
2419: PPUSH
2420: PPUSH
// begin if not mpShipments then
2421: LD_EXP 29
2425: NOT
2426: IFFALSE 2430
// exit ;
2428: GO 2885
// case mpShipments of 1 :
2430: LD_EXP 29
2434: PUSH
2435: LD_INT 1
2437: DOUBLE
2438: EQUAL
2439: IFTRUE 2443
2441: GO 2478
2443: POP
// begin time := 0 0$30 ;
2444: LD_ADDR_VAR 0 5
2448: PUSH
2449: LD_INT 1050
2451: ST_TO_ADDR
// normalTime := 0 0$30 ;
2452: LD_ADDR_VAR 0 6
2456: PUSH
2457: LD_INT 1050
2459: ST_TO_ADDR
// maxTime := 1 1$20 ;
2460: LD_ADDR_VAR 0 8
2464: PUSH
2465: LD_INT 2800
2467: ST_TO_ADDR
// delayTime := 0 0$5 ;
2468: LD_ADDR_VAR 0 7
2472: PUSH
2473: LD_INT 175
2475: ST_TO_ADDR
// end ; 2 :
2476: GO 2608
2478: LD_INT 2
2480: DOUBLE
2481: EQUAL
2482: IFTRUE 2486
2484: GO 2521
2486: POP
// begin time := 0 0$25 ;
2487: LD_ADDR_VAR 0 5
2491: PUSH
2492: LD_INT 875
2494: ST_TO_ADDR
// normalTime := 0 0$25 ;
2495: LD_ADDR_VAR 0 6
2499: PUSH
2500: LD_INT 875
2502: ST_TO_ADDR
// maxTime := 1 1$10 ;
2503: LD_ADDR_VAR 0 8
2507: PUSH
2508: LD_INT 2450
2510: ST_TO_ADDR
// delayTime := 0 0$4 ;
2511: LD_ADDR_VAR 0 7
2515: PUSH
2516: LD_INT 140
2518: ST_TO_ADDR
// end ; 3 :
2519: GO 2608
2521: LD_INT 3
2523: DOUBLE
2524: EQUAL
2525: IFTRUE 2529
2527: GO 2564
2529: POP
// begin time := 0 0$20 ;
2530: LD_ADDR_VAR 0 5
2534: PUSH
2535: LD_INT 700
2537: ST_TO_ADDR
// normalTime := 0 0$20 ;
2538: LD_ADDR_VAR 0 6
2542: PUSH
2543: LD_INT 700
2545: ST_TO_ADDR
// maxTime := 1 1$00 ;
2546: LD_ADDR_VAR 0 8
2550: PUSH
2551: LD_INT 2100
2553: ST_TO_ADDR
// delayTime := 0 0$3 ;
2554: LD_ADDR_VAR 0 7
2558: PUSH
2559: LD_INT 105
2561: ST_TO_ADDR
// end ; 4 :
2562: GO 2608
2564: LD_INT 4
2566: DOUBLE
2567: EQUAL
2568: IFTRUE 2572
2570: GO 2607
2572: POP
// begin time := 0 0$15 ;
2573: LD_ADDR_VAR 0 5
2577: PUSH
2578: LD_INT 525
2580: ST_TO_ADDR
// normalTime := 0 0$15 ;
2581: LD_ADDR_VAR 0 6
2585: PUSH
2586: LD_INT 525
2588: ST_TO_ADDR
// maxTime := 0 0$55 ;
2589: LD_ADDR_VAR 0 8
2593: PUSH
2594: LD_INT 1925
2596: ST_TO_ADDR
// delayTime := 0 0$2 ;
2597: LD_ADDR_VAR 0 7
2601: PUSH
2602: LD_INT 70
2604: ST_TO_ADDR
// end ; end ;
2605: GO 2608
2607: POP
// areas := [ Between1 , Between2 , Center1 , Center2 , northHillArea , southHillArea ] ;
2608: LD_ADDR_VAR 0 4
2612: PUSH
2613: LD_INT 67
2615: PUSH
2616: LD_INT 68
2618: PUSH
2619: LD_INT 70
2621: PUSH
2622: LD_INT 71
2624: PUSH
2625: LD_INT 2
2627: PUSH
2628: LD_INT 1
2630: PUSH
2631: EMPTY
2632: LIST
2633: LIST
2634: LIST
2635: LIST
2636: LIST
2637: LIST
2638: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2639: LD_ADDR_VAR 0 3
2643: PUSH
2644: LD_INT 3
2646: PUSH
2647: LD_INT 4
2649: PUSH
2650: LD_INT 5
2652: PUSH
2653: LD_INT 6
2655: PUSH
2656: LD_INT 7
2658: PUSH
2659: LD_INT 8
2661: PUSH
2662: LD_INT 9
2664: PUSH
2665: LD_INT 10
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: LIST
2672: LIST
2673: LIST
2674: LIST
2675: LIST
2676: LIST
2677: ST_TO_ADDR
// for i := 1 to 8 do
2678: LD_ADDR_VAR 0 1
2682: PUSH
2683: DOUBLE
2684: LD_INT 1
2686: DEC
2687: ST_TO_ADDR
2688: LD_INT 8
2690: PUSH
2691: FOR_TO
2692: IFFALSE 2739
// begin if not mpSidePositions [ i ] then
2694: LD_EXP 9
2698: PUSH
2699: LD_VAR 0 1
2703: ARRAY
2704: NOT
2705: IFFALSE 2709
// continue ;
2707: GO 2691
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2709: LD_ADDR_VAR 0 4
2713: PUSH
2714: LD_VAR 0 4
2718: PUSH
2719: LD_VAR 0 3
2723: PUSH
2724: LD_EXP 9
2728: PUSH
2729: LD_VAR 0 1
2733: ARRAY
2734: ARRAY
2735: ADD
2736: ST_TO_ADDR
// end ;
2737: GO 2691
2739: POP
2740: POP
// x := 1 ;
2741: LD_ADDR_VAR 0 2
2745: PUSH
2746: LD_INT 1
2748: ST_TO_ADDR
// repeat wait ( time ) ;
2749: LD_VAR 0 5
2753: PPUSH
2754: CALL_OW 67
// x := Inc ( x ) ;
2758: LD_ADDR_VAR 0 2
2762: PUSH
2763: LD_VAR 0 2
2767: PPUSH
2768: CALL 60147 0 1
2772: ST_TO_ADDR
// if x > 5 then
2773: LD_VAR 0 2
2777: PUSH
2778: LD_INT 5
2780: GREATER
2781: IFFALSE 2791
// x := 1 ;
2783: LD_ADDR_VAR 0 2
2787: PUSH
2788: LD_INT 1
2790: ST_TO_ADDR
// for i in areas do
2791: LD_ADDR_VAR 0 1
2795: PUSH
2796: LD_VAR 0 4
2800: PUSH
2801: FOR_IN
2802: IFFALSE 2841
// begin if GetResourceArea ( i , mat_cans ) < 30 then
2804: LD_VAR 0 1
2808: PPUSH
2809: LD_INT 1
2811: PPUSH
2812: CALL_OW 287
2816: PUSH
2817: LD_INT 30
2819: LESS
2820: IFFALSE 2839
// begin CreateCratesArea ( x , i , true ) ;
2822: LD_VAR 0 2
2826: PPUSH
2827: LD_VAR 0 1
2831: PPUSH
2832: LD_INT 1
2834: PPUSH
2835: CALL_OW 55
// end ; end ;
2839: GO 2801
2841: POP
2842: POP
// time := time + delayTime ;
2843: LD_ADDR_VAR 0 5
2847: PUSH
2848: LD_VAR 0 5
2852: PUSH
2853: LD_VAR 0 7
2857: PLUS
2858: ST_TO_ADDR
// if time > maxTime then
2859: LD_VAR 0 5
2863: PUSH
2864: LD_VAR 0 8
2868: GREATER
2869: IFFALSE 2881
// time := normalTime ;
2871: LD_ADDR_VAR 0 5
2875: PUSH
2876: LD_VAR 0 6
2880: ST_TO_ADDR
// until false ;
2881: LD_INT 0
2883: IFFALSE 2749
// end ;
2885: PPOPN 8
2887: END
// export treeVisited ; every 0 0$2 trigger mpTree do var i , tmp , skill , power , bonus , lua ;
2888: LD_EXP 3
2892: IFFALSE 3341
2894: GO 2896
2896: DISABLE
2897: LD_INT 0
2899: PPUSH
2900: PPUSH
2901: PPUSH
2902: PPUSH
2903: PPUSH
2904: PPUSH
// begin treeVisited := [ ] ;
2905: LD_ADDR_EXP 4
2909: PUSH
2910: EMPTY
2911: ST_TO_ADDR
// power := 1 ;
2912: LD_ADDR_VAR 0 4
2916: PUSH
2917: LD_INT 1
2919: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2920: LD_INT 35
2922: PPUSH
2923: CALL_OW 67
// if tick mod Round ( 20 20$0 div mpTree ) = 0 then
2927: LD_OWVAR 1
2931: PUSH
2932: LD_INT 42000
2934: PUSH
2935: LD_EXP 3
2939: DIV
2940: PPUSH
2941: CALL_OW 574
2945: MOD
2946: PUSH
2947: LD_INT 0
2949: EQUAL
2950: IFFALSE 2967
// power := Inc ( power ) ;
2952: LD_ADDR_VAR 0 4
2956: PUSH
2957: LD_VAR 0 4
2961: PPUSH
2962: CALL 60147 0 1
2966: ST_TO_ADDR
// if power > 10 then
2967: LD_VAR 0 4
2971: PUSH
2972: LD_INT 10
2974: GREATER
2975: IFFALSE 2985
// power := 10 ;
2977: LD_ADDR_VAR 0 4
2981: PUSH
2982: LD_INT 10
2984: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_inarea , TreeArea ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) diff treeVisited ;
2985: LD_ADDR_VAR 0 2
2989: PUSH
2990: LD_INT 95
2992: PUSH
2993: LD_INT 69
2995: PUSH
2996: EMPTY
2997: LIST
2998: LIST
2999: PUSH
3000: LD_INT 21
3002: PUSH
3003: LD_INT 1
3005: PUSH
3006: EMPTY
3007: LIST
3008: LIST
3009: PUSH
3010: LD_INT 3
3012: PUSH
3013: LD_INT 23
3015: PUSH
3016: LD_INT 0
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PUSH
3023: EMPTY
3024: LIST
3025: LIST
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: LIST
3031: PPUSH
3032: CALL_OW 69
3036: PUSH
3037: LD_EXP 4
3041: DIFF
3042: ST_TO_ADDR
// if tmp then
3043: LD_VAR 0 2
3047: IFFALSE 3212
// begin for i in tmp do
3049: LD_ADDR_VAR 0 1
3053: PUSH
3054: LD_VAR 0 2
3058: PUSH
3059: FOR_IN
3060: IFFALSE 3210
// begin treeVisited := Join ( treeVisited , i ) ;
3062: LD_ADDR_EXP 4
3066: PUSH
3067: LD_EXP 4
3071: PPUSH
3072: LD_VAR 0 1
3076: PPUSH
3077: CALL 58774 0 2
3081: ST_TO_ADDR
// bonus := GetSkill ( i , i mod 4 + 1 ) + power ;
3082: LD_ADDR_VAR 0 5
3086: PUSH
3087: LD_VAR 0 1
3091: PPUSH
3092: LD_VAR 0 1
3096: PUSH
3097: LD_INT 4
3099: MOD
3100: PUSH
3101: LD_INT 1
3103: PLUS
3104: PPUSH
3105: CALL_OW 259
3109: PUSH
3110: LD_VAR 0 4
3114: PLUS
3115: ST_TO_ADDR
// if bonus > 10 then
3116: LD_VAR 0 5
3120: PUSH
3121: LD_INT 10
3123: GREATER
3124: IFFALSE 3134
// bonus := 10 ;
3126: LD_ADDR_VAR 0 5
3130: PUSH
3131: LD_INT 10
3133: ST_TO_ADDR
// skill := i mod 4 + 1 ;
3134: LD_ADDR_VAR 0 3
3138: PUSH
3139: LD_VAR 0 1
3143: PUSH
3144: LD_INT 4
3146: MOD
3147: PUSH
3148: LD_INT 1
3150: PLUS
3151: ST_TO_ADDR
// SetSkill ( i , skill , bonus ) ;
3152: LD_VAR 0 1
3156: PPUSH
3157: LD_VAR 0 3
3161: PPUSH
3162: LD_VAR 0 5
3166: PPUSH
3167: CALL_OW 237
// ToLua ( displayTreeBonusDetails( & i & , & skill & , & power & ) ) ;
3171: LD_STRING displayTreeBonusDetails(
3173: PUSH
3174: LD_VAR 0 1
3178: STR
3179: PUSH
3180: LD_STRING ,
3182: STR
3183: PUSH
3184: LD_VAR 0 3
3188: STR
3189: PUSH
3190: LD_STRING ,
3192: STR
3193: PUSH
3194: LD_VAR 0 4
3198: STR
3199: PUSH
3200: LD_STRING )
3202: STR
3203: PPUSH
3204: CALL_OW 559
// end ;
3208: GO 3059
3210: POP
3211: POP
// end ; lua := LFC_UNITS_CUSTOM_ICON = { ;
3212: LD_ADDR_VAR 0 6
3216: PUSH
3217: LD_STRING LFC_UNITS_CUSTOM_ICON = {
3219: ST_TO_ADDR
// for i := 1 to Count ( treeVisited ) do
3220: LD_ADDR_VAR 0 1
3224: PUSH
3225: DOUBLE
3226: LD_INT 1
3228: DEC
3229: ST_TO_ADDR
3230: LD_EXP 4
3234: PPUSH
3235: CALL 22798 0 1
3239: PUSH
3240: FOR_TO
3241: IFFALSE 3306
// begin lua := lua & { & treeVisited [ i ] & , 13} ;
3243: LD_ADDR_VAR 0 6
3247: PUSH
3248: LD_VAR 0 6
3252: PUSH
3253: LD_STRING {
3255: STR
3256: PUSH
3257: LD_EXP 4
3261: PUSH
3262: LD_VAR 0 1
3266: ARRAY
3267: STR
3268: PUSH
3269: LD_STRING , 13}
3271: STR
3272: ST_TO_ADDR
// if i < Count ( treeVisited ) then
3273: LD_VAR 0 1
3277: PUSH
3278: LD_EXP 4
3282: PPUSH
3283: CALL 22798 0 1
3287: LESS
3288: IFFALSE 3304
// lua := lua & ,  ;
3290: LD_ADDR_VAR 0 6
3294: PUSH
3295: LD_VAR 0 6
3299: PUSH
3300: LD_STRING , 
3302: STR
3303: ST_TO_ADDR
// end ;
3304: GO 3240
3306: POP
3307: POP
// lua := lua & } ;
3308: LD_ADDR_VAR 0 6
3312: PUSH
3313: LD_VAR 0 6
3317: PUSH
3318: LD_STRING }
3320: STR
3321: ST_TO_ADDR
// if treeVisited then
3322: LD_EXP 4
3326: IFFALSE 3337
// ToLua ( lua ) ;
3328: LD_VAR 0 6
3332: PPUSH
3333: CALL_OW 559
// until false ;
3337: LD_INT 0
3339: IFFALSE 2920
// end ; end_of_file
3341: PPOPN 6
3343: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
3344: LD_VAR 0 1
3348: PPUSH
3349: CALL 12649 0 1
// Multiplayer_UnitDestroyed ( un ) ;
3353: LD_VAR 0 1
3357: PPUSH
3358: CALL 9056 0 1
// end ;
3362: PPOPN 1
3364: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
3365: LD_VAR 0 1
3369: PPUSH
3370: CALL 12666 0 1
// end ;
3374: PPOPN 1
3376: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
3377: LD_VAR 0 1
3381: PPUSH
3382: CALL 10109 0 1
3386: PPOPN 1
3388: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
3389: LD_VAR 0 1
3393: PPUSH
3394: LD_VAR 0 2
3398: PPUSH
3399: CALL 12707 0 2
3403: PPOPN 2
3405: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
3406: LD_VAR 0 1
3410: PPUSH
3411: LD_VAR 0 2
3415: PPUSH
3416: LD_VAR 0 3
3420: PPUSH
3421: CALL 10162 0 3
3425: PPOPN 3
3427: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
3428: LD_VAR 0 1
3432: PPUSH
3433: LD_VAR 0 2
3437: PPUSH
3438: LD_VAR 0 3
3442: PPUSH
3443: LD_VAR 0 4
3447: PPUSH
3448: LD_VAR 0 5
3452: PPUSH
3453: CALL 10846 0 5
3457: PPOPN 5
3459: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ;
3460: LD_VAR 0 1
3464: PPUSH
3465: LD_VAR 0 2
3469: PPUSH
3470: LD_VAR 0 3
3474: PPUSH
3475: LD_VAR 0 4
3479: PPUSH
3480: CALL 10949 0 4
3484: PPOPN 4
3486: END
// on VehicleConstruction_ApeConsumed ( factory , unit ) do Multiplayer_VehicleConstruction_ApeConsumed ( factory , unit ) ; end_of_file
3487: LD_VAR 0 1
3491: PPUSH
3492: LD_VAR 0 2
3496: PPUSH
3497: CALL 9862 0 2
3501: PPOPN 2
3503: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpCommanders , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
3504: LD_INT 0
3506: PPUSH
3507: PPUSH
// disable ( mpActive ) ;
3508: LD_INT 100
3510: DISABLE_MARKED
// disable ( mpWin ) ;
3511: LD_INT 101
3513: DISABLE_MARKED
// disable ( mpLose ) ;
3514: LD_INT 102
3516: DISABLE_MARKED
// mpGameType := 0 ;
3517: LD_ADDR_EXP 5
3521: PUSH
3522: LD_INT 0
3524: ST_TO_ADDR
// mpGameSettings := [ ] ;
3525: LD_ADDR_EXP 8
3529: PUSH
3530: EMPTY
3531: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
3532: LD_ADDR_EXP 6
3536: PUSH
3537: EMPTY
3538: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
3539: LD_ADDR_EXP 7
3543: PUSH
3544: EMPTY
3545: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
3546: LD_ADDR_EXP 31
3550: PUSH
3551: LD_INT 2
3553: PUSH
3554: LD_INT 2
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: ST_TO_ADDR
// mpOilDeposits := [ ] ;
3561: LD_ADDR_EXP 14
3565: PUSH
3566: EMPTY
3567: ST_TO_ADDR
// mpSibDeposits := [ ] ;
3568: LD_ADDR_EXP 15
3572: PUSH
3573: EMPTY
3574: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
3575: LD_ADDR_EXP 44
3579: PUSH
3580: EMPTY
3581: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
3582: LD_ADDR_EXP 45
3586: PUSH
3587: EMPTY
3588: ST_TO_ADDR
// mpDepots := [ ] ;
3589: LD_ADDR_EXP 16
3593: PUSH
3594: EMPTY
3595: ST_TO_ADDR
// mpBuildings := [ ] ;
3596: LD_ADDR_EXP 19
3600: PUSH
3601: EMPTY
3602: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
3603: LD_ADDR_EXP 20
3607: PUSH
3608: EMPTY
3609: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
3610: LD_ADDR_EXP 21
3614: PUSH
3615: EMPTY
3616: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
3617: LD_ADDR_EXP 22
3621: PUSH
3622: EMPTY
3623: ST_TO_ADDR
// mpStartingResources := [ ] ;
3624: LD_ADDR_EXP 17
3628: PUSH
3629: EMPTY
3630: ST_TO_ADDR
// mpStartPos := [ ] ;
3631: LD_ADDR_EXP 23
3635: PUSH
3636: EMPTY
3637: ST_TO_ADDR
// mpBattleFlag := - 1 ;
3638: LD_ADDR_EXP 24
3642: PUSH
3643: LD_INT 1
3645: NEG
3646: ST_TO_ADDR
// mpBattleFlags := [ ] ;
3647: LD_ADDR_EXP 25
3651: PUSH
3652: EMPTY
3653: ST_TO_ADDR
// mpApemans := [ ] ;
3654: LD_ADDR_EXP 32
3658: PUSH
3659: EMPTY
3660: ST_TO_ADDR
// mpApemansArea := [ ] ;
3661: LD_ADDR_EXP 33
3665: PUSH
3666: EMPTY
3667: ST_TO_ADDR
// mpRespawn := [ ] ;
3668: LD_ADDR_EXP 35
3672: PUSH
3673: EMPTY
3674: ST_TO_ADDR
// mpKingArea := 0 ;
3675: LD_ADDR_EXP 36
3679: PUSH
3680: LD_INT 0
3682: ST_TO_ADDR
// mpPoints := [ ] ;
3683: LD_ADDR_EXP 37
3687: PUSH
3688: EMPTY
3689: ST_TO_ADDR
// mpVehicles := 0 ;
3690: LD_ADDR_EXP 38
3694: PUSH
3695: LD_INT 0
3697: ST_TO_ADDR
// mpShipments := 0 ;
3698: LD_ADDR_EXP 29
3702: PUSH
3703: LD_INT 0
3705: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3706: LD_ADDR_EXP 42
3710: PUSH
3711: EMPTY
3712: PUSH
3713: EMPTY
3714: PUSH
3715: EMPTY
3716: PUSH
3717: EMPTY
3718: PUSH
3719: EMPTY
3720: PUSH
3721: EMPTY
3722: PUSH
3723: EMPTY
3724: PUSH
3725: EMPTY
3726: PUSH
3727: EMPTY
3728: LIST
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3737: LD_ADDR_EXP 34
3741: PUSH
3742: EMPTY
3743: PUSH
3744: EMPTY
3745: PUSH
3746: EMPTY
3747: PUSH
3748: EMPTY
3749: PUSH
3750: EMPTY
3751: PUSH
3752: EMPTY
3753: PUSH
3754: EMPTY
3755: PUSH
3756: EMPTY
3757: PUSH
3758: EMPTY
3759: LIST
3760: LIST
3761: LIST
3762: LIST
3763: LIST
3764: LIST
3765: LIST
3766: LIST
3767: ST_TO_ADDR
// mpCommanders := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
3768: LD_ADDR_EXP 43
3772: PUSH
3773: LD_INT 0
3775: PUSH
3776: LD_INT 0
3778: PUSH
3779: LD_INT 0
3781: PUSH
3782: LD_INT 0
3784: PUSH
3785: LD_INT 0
3787: PUSH
3788: LD_INT 0
3790: PUSH
3791: LD_INT 0
3793: PUSH
3794: LD_INT 0
3796: PUSH
3797: EMPTY
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: ST_TO_ADDR
// mpEmissions := 0 ;
3807: LD_ADDR_EXP 39
3811: PUSH
3812: LD_INT 0
3814: ST_TO_ADDR
// mpTeleports := 0 ;
3815: LD_ADDR_EXP 46
3819: PUSH
3820: LD_INT 0
3822: ST_TO_ADDR
// mpArtifacts := 0 ;
3823: LD_ADDR_EXP 47
3827: PUSH
3828: LD_INT 0
3830: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
3831: LD_ADDR_EXP 48
3835: PUSH
3836: LD_INT 0
3838: ST_TO_ADDR
// mpPeopleSkill := 3 ;
3839: LD_ADDR_EXP 27
3843: PUSH
3844: LD_INT 3
3846: ST_TO_ADDR
// mpPeopleAmount := 15 ;
3847: LD_ADDR_EXP 26
3851: PUSH
3852: LD_INT 15
3854: ST_TO_ADDR
// mpDisplayStrings := 0 ;
3855: LD_ADDR_EXP 40
3859: PUSH
3860: LD_INT 0
3862: ST_TO_ADDR
// mpGameActive := false ;
3863: LD_ADDR_EXP 41
3867: PUSH
3868: LD_INT 0
3870: ST_TO_ADDR
// mpBlockRespThread := false ;
3871: LD_ADDR_EXP 49
3875: PUSH
3876: LD_INT 0
3878: ST_TO_ADDR
// for i := 1 to 32 do
3879: LD_ADDR_VAR 0 2
3883: PUSH
3884: DOUBLE
3885: LD_INT 1
3887: DEC
3888: ST_TO_ADDR
3889: LD_INT 32
3891: PUSH
3892: FOR_TO
3893: IFFALSE 3920
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
3895: LD_ADDR_EXP 8
3899: PUSH
3900: LD_EXP 8
3904: PPUSH
3905: LD_VAR 0 2
3909: PPUSH
3910: LD_INT 0
3912: PPUSH
3913: CALL_OW 1
3917: ST_TO_ADDR
3918: GO 3892
3920: POP
3921: POP
// end ;
3922: LD_VAR 0 1
3926: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
3927: LD_INT 0
3929: PPUSH
3930: PPUSH
3931: PPUSH
3932: PPUSH
3933: PPUSH
3934: PPUSH
3935: PPUSH
3936: PPUSH
3937: PPUSH
3938: PPUSH
3939: PPUSH
3940: PPUSH
3941: PPUSH
3942: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , GameTypeSurvivalHardcore ] ;
3943: LD_ADDR_VAR 0 14
3947: PUSH
3948: LD_INT 1
3950: PUSH
3951: LD_INT 2
3953: PUSH
3954: LD_INT 3
3956: PUSH
3957: LD_INT 5
3959: PUSH
3960: LD_INT 6
3962: PUSH
3963: LD_INT 7
3965: PUSH
3966: LD_INT 8
3968: PUSH
3969: EMPTY
3970: LIST
3971: LIST
3972: LIST
3973: LIST
3974: LIST
3975: LIST
3976: LIST
3977: ST_TO_ADDR
// for i in gameTypes do
3978: LD_ADDR_VAR 0 2
3982: PUSH
3983: LD_VAR 0 14
3987: PUSH
3988: FOR_IN
3989: IFFALSE 3998
// disable ( i ) ;
3991: LD_VAR 0 2
3995: DISABLE_MARKED
3996: GO 3988
3998: POP
3999: POP
// if Multiplayer then
4000: LD_OWVAR 4
4004: IFFALSE 4188
// begin mpGameType := mp_game_type ;
4006: LD_ADDR_EXP 5
4010: PUSH
4011: LD_OWVAR 6
4015: ST_TO_ADDR
// your_side := mp_player_side ;
4016: LD_ADDR_OWVAR 2
4020: PUSH
4021: LD_OWVAR 7
4025: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
4026: LD_ADDR_EXP 9
4030: PUSH
4031: LD_OWVAR 17
4035: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
4036: LD_ADDR_EXP 10
4040: PUSH
4041: LD_OWVAR 15
4045: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
4046: LD_ADDR_EXP 11
4050: PUSH
4051: LD_OWVAR 16
4055: ST_TO_ADDR
// mpTeams := mp_teams ;
4056: LD_ADDR_EXP 12
4060: PUSH
4061: LD_OWVAR 12
4065: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
4066: LD_ADDR_VAR 0 2
4070: PUSH
4071: DOUBLE
4072: LD_INT 1
4074: DEC
4075: ST_TO_ADDR
4076: LD_EXP 6
4080: PPUSH
4081: CALL 22798 0 1
4085: PUSH
4086: FOR_TO
4087: IFFALSE 4163
// begin setting := mpGameSettingsKeys [ i ] ;
4089: LD_ADDR_VAR 0 12
4093: PUSH
4094: LD_EXP 6
4098: PUSH
4099: LD_VAR 0 2
4103: ARRAY
4104: ST_TO_ADDR
// if setting then
4105: LD_VAR 0 12
4109: IFFALSE 4161
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
4111: LD_ADDR_EXP 8
4115: PUSH
4116: LD_EXP 8
4120: PPUSH
4121: LD_VAR 0 2
4125: PPUSH
4126: LD_EXP 7
4130: PUSH
4131: LD_VAR 0 2
4135: ARRAY
4136: PUSH
4137: LD_VAR 0 2
4141: PUSH
4142: LD_INT 1
4144: MINUS
4145: PPUSH
4146: CALL_OW 426
4150: PUSH
4151: LD_INT 1
4153: PLUS
4154: ARRAY
4155: PPUSH
4156: CALL_OW 1
4160: ST_TO_ADDR
// end ;
4161: GO 4086
4163: POP
4164: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
4165: LD_ADDR_EXP 13
4169: PUSH
4170: LD_EXP 10
4174: PUSH
4175: LD_INT 0
4177: PUSH
4178: EMPTY
4179: LIST
4180: DIFF
4181: PUSH
4182: LD_INT 1
4184: GREATER
4185: ST_TO_ADDR
// end else
4186: GO 4188
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
4188: LD_EXP 5
4192: PPUSH
4193: CALL 852 0 1
// if Count ( mpMarkedAreas ) then
4197: LD_EXP 20
4201: PPUSH
4202: CALL 22798 0 1
4206: IFFALSE 4237
// begin for i in mpMarkedAreas do
4208: LD_ADDR_VAR 0 2
4212: PUSH
4213: LD_EXP 20
4217: PUSH
4218: FOR_IN
4219: IFFALSE 4235
// SetAreaMapShow ( i , 0 ) ;
4221: LD_VAR 0 2
4225: PPUSH
4226: LD_INT 0
4228: PPUSH
4229: CALL_OW 424
4233: GO 4218
4235: POP
4236: POP
// end ; for i := 1 to 8 do
4237: LD_ADDR_VAR 0 2
4241: PUSH
4242: DOUBLE
4243: LD_INT 1
4245: DEC
4246: ST_TO_ADDR
4247: LD_INT 8
4249: PUSH
4250: FOR_TO
4251: IFFALSE 5710
// begin if not mpSidePositions [ i ] then
4253: LD_EXP 9
4257: PUSH
4258: LD_VAR 0 2
4262: ARRAY
4263: NOT
4264: IFFALSE 4268
// continue ;
4266: GO 4250
// side := i ;
4268: LD_ADDR_VAR 0 7
4272: PUSH
4273: LD_VAR 0 2
4277: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
4278: LD_ADDR_VAR 0 9
4282: PUSH
4283: LD_EXP 11
4287: PUSH
4288: LD_VAR 0 2
4292: ARRAY
4293: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
4294: LD_ADDR_VAR 0 8
4298: PUSH
4299: LD_EXP 9
4303: PUSH
4304: LD_VAR 0 2
4308: ARRAY
4309: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
4310: LD_EXP 14
4314: PPUSH
4315: CALL 22798 0 1
4319: IFFALSE 4396
// begin for j in mpOilDeposits [ pos ] do
4321: LD_ADDR_VAR 0 3
4325: PUSH
4326: LD_EXP 14
4330: PUSH
4331: LD_VAR 0 8
4335: ARRAY
4336: PUSH
4337: FOR_IN
4338: IFFALSE 4394
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
4340: LD_VAR 0 3
4344: PUSH
4345: LD_INT 1
4347: ARRAY
4348: PPUSH
4349: LD_VAR 0 3
4353: PUSH
4354: LD_INT 2
4356: ARRAY
4357: PPUSH
4358: LD_INT 2
4360: PPUSH
4361: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
4365: LD_VAR 0 3
4369: PUSH
4370: LD_INT 1
4372: ARRAY
4373: PPUSH
4374: LD_VAR 0 3
4378: PUSH
4379: LD_INT 2
4381: ARRAY
4382: PPUSH
4383: LD_VAR 0 7
4387: PPUSH
4388: CALL_OW 441
// end ;
4392: GO 4337
4394: POP
4395: POP
// end ; if Count ( mpSibDeposits ) then
4396: LD_EXP 15
4400: PPUSH
4401: CALL 22798 0 1
4405: IFFALSE 4482
// begin for j in mpSibDeposits [ pos ] do
4407: LD_ADDR_VAR 0 3
4411: PUSH
4412: LD_EXP 15
4416: PUSH
4417: LD_VAR 0 8
4421: ARRAY
4422: PUSH
4423: FOR_IN
4424: IFFALSE 4480
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
4426: LD_VAR 0 3
4430: PUSH
4431: LD_INT 1
4433: ARRAY
4434: PPUSH
4435: LD_VAR 0 3
4439: PUSH
4440: LD_INT 2
4442: ARRAY
4443: PPUSH
4444: LD_INT 3
4446: PPUSH
4447: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
4451: LD_VAR 0 3
4455: PUSH
4456: LD_INT 1
4458: ARRAY
4459: PPUSH
4460: LD_VAR 0 3
4464: PUSH
4465: LD_INT 2
4467: ARRAY
4468: PPUSH
4469: LD_VAR 0 7
4473: PPUSH
4474: CALL_OW 441
// end ;
4478: GO 4423
4480: POP
4481: POP
// end ; InitBc ;
4482: CALL_OW 21
// InitUc ;
4486: CALL_OW 18
// uc_side := side ;
4490: LD_ADDR_OWVAR 20
4494: PUSH
4495: LD_VAR 0 7
4499: ST_TO_ADDR
// uc_nation := nation ;
4500: LD_ADDR_OWVAR 21
4504: PUSH
4505: LD_VAR 0 9
4509: ST_TO_ADDR
// if mpBattleFlag > - 1 then
4510: LD_EXP 24
4514: PUSH
4515: LD_INT 1
4517: NEG
4518: GREATER
4519: IFFALSE 4678
// begin x := mpStartPos [ pos ] [ 1 ] ;
4521: LD_ADDR_VAR 0 5
4525: PUSH
4526: LD_EXP 23
4530: PUSH
4531: LD_VAR 0 8
4535: ARRAY
4536: PUSH
4537: LD_INT 1
4539: ARRAY
4540: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4541: LD_ADDR_VAR 0 6
4545: PUSH
4546: LD_EXP 23
4550: PUSH
4551: LD_VAR 0 8
4555: ARRAY
4556: PUSH
4557: LD_INT 2
4559: ARRAY
4560: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
4561: LD_VAR 0 5
4565: PPUSH
4566: LD_VAR 0 6
4570: PPUSH
4571: LD_INT 12
4573: PPUSH
4574: LD_INT 2
4576: PPUSH
4577: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
4581: LD_ADDR_EXP 25
4585: PUSH
4586: LD_EXP 25
4590: PPUSH
4591: LD_VAR 0 7
4595: PPUSH
4596: LD_VAR 0 7
4600: PPUSH
4601: LD_VAR 0 5
4605: PPUSH
4606: LD_VAR 0 6
4610: PPUSH
4611: LD_INT 1
4613: PUSH
4614: LD_INT 100
4616: PUSH
4617: EMPTY
4618: LIST
4619: LIST
4620: PUSH
4621: LD_INT 2
4623: PUSH
4624: LD_INT 70
4626: PUSH
4627: EMPTY
4628: LIST
4629: LIST
4630: PUSH
4631: LD_INT 3
4633: PUSH
4634: LD_INT 40
4636: PUSH
4637: EMPTY
4638: LIST
4639: LIST
4640: PUSH
4641: LD_INT 10
4643: PUSH
4644: LD_INT 25
4646: PUSH
4647: EMPTY
4648: LIST
4649: LIST
4650: PUSH
4651: LD_INT 20
4653: PUSH
4654: LD_INT 100
4656: PUSH
4657: EMPTY
4658: LIST
4659: LIST
4660: PUSH
4661: EMPTY
4662: LIST
4663: LIST
4664: LIST
4665: LIST
4666: LIST
4667: PPUSH
4668: CALL_OW 418
4672: PPUSH
4673: CALL_OW 1
4677: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
4678: LD_EXP 16
4682: PPUSH
4683: CALL 22798 0 1
4687: IFFALSE 4886
// begin if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore , GameTypeArmsRace , GameTypeArmsArtifact ] then
4689: LD_EXP 5
4693: PUSH
4694: LD_INT 2
4696: PUSH
4697: LD_INT 8
4699: PUSH
4700: LD_INT 6
4702: PUSH
4703: LD_INT 7
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: IN
4712: IFFALSE 4732
// begin bc_level := 10 ;
4714: LD_ADDR_OWVAR 43
4718: PUSH
4719: LD_INT 10
4721: ST_TO_ADDR
// bc_type := b_warehouse ;
4722: LD_ADDR_OWVAR 42
4726: PUSH
4727: LD_INT 1
4729: ST_TO_ADDR
// end else
4730: GO 4748
// begin bc_level := 0 ;
4732: LD_ADDR_OWVAR 43
4736: PUSH
4737: LD_INT 0
4739: ST_TO_ADDR
// bc_type := b_depot ;
4740: LD_ADDR_OWVAR 42
4744: PUSH
4745: LD_INT 0
4747: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
4748: LD_ADDR_VAR 0 4
4752: PUSH
4753: LD_EXP 16
4757: PUSH
4758: LD_VAR 0 8
4762: ARRAY
4763: PUSH
4764: LD_INT 1
4766: ARRAY
4767: PPUSH
4768: LD_EXP 16
4772: PUSH
4773: LD_VAR 0 8
4777: ARRAY
4778: PUSH
4779: LD_INT 2
4781: ARRAY
4782: PPUSH
4783: LD_EXP 16
4787: PUSH
4788: LD_VAR 0 8
4792: ARRAY
4793: PUSH
4794: LD_INT 3
4796: ARRAY
4797: PPUSH
4798: CALL_OW 47
4802: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
4803: LD_VAR 0 4
4807: PPUSH
4808: LD_STRING @
4810: PUSH
4811: LD_VAR 0 7
4815: STR
4816: PPUSH
4817: CALL_OW 500
// if Count ( mpStartingResources ) then
4821: LD_EXP 17
4825: PPUSH
4826: CALL 22798 0 1
4830: IFFALSE 4884
// begin for j := 1 to mpStartingResources do
4832: LD_ADDR_VAR 0 3
4836: PUSH
4837: DOUBLE
4838: LD_INT 1
4840: DEC
4841: ST_TO_ADDR
4842: LD_EXP 17
4846: PUSH
4847: FOR_TO
4848: IFFALSE 4882
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
4850: LD_VAR 0 4
4854: PPUSH
4855: CALL_OW 274
4859: PPUSH
4860: LD_VAR 0 3
4864: PPUSH
4865: LD_EXP 17
4869: PUSH
4870: LD_VAR 0 3
4874: ARRAY
4875: PPUSH
4876: CALL_OW 277
4880: GO 4847
4882: POP
4883: POP
// end ; end else
4884: GO 5093
// if Count ( mpStartingResources ) then
4886: LD_EXP 17
4890: PPUSH
4891: CALL 22798 0 1
4895: IFFALSE 5093
// begin x := mpStartPos [ pos ] [ 1 ] ;
4897: LD_ADDR_VAR 0 5
4901: PUSH
4902: LD_EXP 23
4906: PUSH
4907: LD_VAR 0 8
4911: ARRAY
4912: PUSH
4913: LD_INT 1
4915: ARRAY
4916: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
4917: LD_ADDR_VAR 0 6
4921: PUSH
4922: LD_EXP 23
4926: PUSH
4927: LD_VAR 0 8
4931: ARRAY
4932: PUSH
4933: LD_INT 2
4935: ARRAY
4936: ST_TO_ADDR
// for j := 1 to mpStartingResources do
4937: LD_ADDR_VAR 0 3
4941: PUSH
4942: DOUBLE
4943: LD_INT 1
4945: DEC
4946: ST_TO_ADDR
4947: LD_EXP 17
4951: PUSH
4952: FOR_TO
4953: IFFALSE 5091
// begin resources := mpStartingResources [ j ] ;
4955: LD_ADDR_VAR 0 13
4959: PUSH
4960: LD_EXP 17
4964: PUSH
4965: LD_VAR 0 3
4969: ARRAY
4970: ST_TO_ADDR
// if resources = 0 then
4971: LD_VAR 0 13
4975: PUSH
4976: LD_INT 0
4978: EQUAL
4979: IFFALSE 4983
// continue ;
4981: GO 4952
// repeat if resources >= 50 then
4983: LD_VAR 0 13
4987: PUSH
4988: LD_INT 50
4990: GREATEREQUAL
4991: IFFALSE 5037
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
4993: LD_VAR 0 3
4997: PPUSH
4998: LD_INT 5
5000: PPUSH
5001: LD_VAR 0 5
5005: PPUSH
5006: LD_VAR 0 6
5010: PPUSH
5011: LD_INT 6
5013: PPUSH
5014: LD_INT 0
5016: PPUSH
5017: CALL_OW 60
// resources := resources - 50 ;
5021: LD_ADDR_VAR 0 13
5025: PUSH
5026: LD_VAR 0 13
5030: PUSH
5031: LD_INT 50
5033: MINUS
5034: ST_TO_ADDR
// end else
5035: GO 5079
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
5037: LD_VAR 0 3
5041: PPUSH
5042: LD_VAR 0 13
5046: PUSH
5047: LD_INT 10
5049: DIV
5050: PPUSH
5051: LD_VAR 0 5
5055: PPUSH
5056: LD_VAR 0 6
5060: PPUSH
5061: LD_INT 6
5063: PPUSH
5064: LD_INT 0
5066: PPUSH
5067: CALL_OW 60
// resources := 0 ;
5071: LD_ADDR_VAR 0 13
5075: PUSH
5076: LD_INT 0
5078: ST_TO_ADDR
// end ; until resources <= 0 ;
5079: LD_VAR 0 13
5083: PUSH
5084: LD_INT 0
5086: LESSEQUAL
5087: IFFALSE 4983
// end ;
5089: GO 4952
5091: POP
5092: POP
// end ; if Count ( mpBuildings ) and not mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] then
5093: LD_EXP 19
5097: PPUSH
5098: CALL 22798 0 1
5102: IFFALSE 5122
5104: PUSH
5105: LD_EXP 5
5109: PUSH
5110: LD_INT 2
5112: PUSH
5113: LD_INT 8
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: IN
5120: NOT
5121: AND
5122: IFFALSE 5200
// begin for j in mpBuildings [ pos ] do
5124: LD_ADDR_VAR 0 3
5128: PUSH
5129: LD_EXP 19
5133: PUSH
5134: LD_VAR 0 8
5138: ARRAY
5139: PUSH
5140: FOR_IN
5141: IFFALSE 5198
// begin bc_level := 0 ;
5143: LD_ADDR_OWVAR 43
5147: PUSH
5148: LD_INT 0
5150: ST_TO_ADDR
// bc_type := j [ 1 ] ;
5151: LD_ADDR_OWVAR 42
5155: PUSH
5156: LD_VAR 0 3
5160: PUSH
5161: LD_INT 1
5163: ARRAY
5164: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
5165: LD_VAR 0 3
5169: PUSH
5170: LD_INT 2
5172: ARRAY
5173: PPUSH
5174: LD_VAR 0 3
5178: PUSH
5179: LD_INT 3
5181: ARRAY
5182: PPUSH
5183: LD_VAR 0 3
5187: PUSH
5188: LD_INT 4
5190: ARRAY
5191: PPUSH
5192: CALL_OW 47
// end ;
5196: GO 5140
5198: POP
5199: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
5200: LD_EXP 28
5204: IFFALSE 5224
5206: PUSH
5207: LD_INT 20
5209: PPUSH
5210: LD_VAR 0 7
5214: PPUSH
5215: CALL_OW 321
5219: PUSH
5220: LD_INT 1
5222: EQUAL
5223: AND
5224: IFFALSE 5241
// SetTech ( tech_SibDet , side , state_researched ) ;
5226: LD_INT 20
5228: PPUSH
5229: LD_VAR 0 7
5233: PPUSH
5234: LD_INT 2
5236: PPUSH
5237: CALL_OW 322
// if not mpArtifacts then
5241: LD_EXP 47
5245: NOT
5246: IFFALSE 5263
// SetTech ( tech_artifact , side , state_disabled ) ;
5248: LD_INT 24
5250: PPUSH
5251: LD_VAR 0 7
5255: PPUSH
5256: LD_INT 0
5258: PPUSH
5259: CALL_OW 322
// if mpSibBomb = 1 then
5263: LD_EXP 30
5267: PUSH
5268: LD_INT 1
5270: EQUAL
5271: IFFALSE 5290
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
5273: LD_INT 25
5275: PPUSH
5276: LD_VAR 0 7
5280: PPUSH
5281: LD_INT 1
5283: PPUSH
5284: CALL_OW 322
// end else
5288: GO 5305
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
5290: LD_INT 25
5292: PPUSH
5293: LD_VAR 0 7
5297: PPUSH
5298: LD_INT 0
5300: PPUSH
5301: CALL_OW 322
// end ; if mpVehicles then
5305: LD_EXP 38
5309: IFFALSE 5408
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
5311: LD_ADDR_VAR 0 3
5315: PUSH
5316: LD_VAR 0 7
5320: PPUSH
5321: LD_VAR 0 9
5325: PPUSH
5326: LD_EXP 38
5330: PPUSH
5331: CALL 6667 0 3
5335: PUSH
5336: FOR_IN
5337: IFFALSE 5406
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
5339: LD_VAR 0 3
5343: PPUSH
5344: LD_INT 0
5346: PPUSH
5347: LD_INT 5
5349: PPUSH
5350: CALL_OW 12
5354: PPUSH
5355: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
5359: LD_VAR 0 3
5363: PPUSH
5364: LD_EXP 23
5368: PUSH
5369: LD_VAR 0 8
5373: ARRAY
5374: PUSH
5375: LD_INT 1
5377: ARRAY
5378: PPUSH
5379: LD_EXP 23
5383: PUSH
5384: LD_VAR 0 8
5388: ARRAY
5389: PUSH
5390: LD_INT 2
5392: ARRAY
5393: PPUSH
5394: LD_INT 12
5396: PPUSH
5397: LD_INT 0
5399: PPUSH
5400: CALL_OW 50
// end ;
5404: GO 5336
5406: POP
5407: POP
// end ; uc_nation := nation ;
5408: LD_ADDR_OWVAR 21
5412: PUSH
5413: LD_VAR 0 9
5417: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
5418: LD_EXP 5
5422: PUSH
5423: LD_INT 6
5425: PUSH
5426: LD_INT 7
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: IN
5433: IFFALSE 5458
5435: PUSH
5436: LD_EXP 9
5440: PUSH
5441: LD_VAR 0 2
5445: ARRAY
5446: PUSH
5447: LD_INT 1
5449: PUSH
5450: LD_INT 2
5452: PUSH
5453: EMPTY
5454: LIST
5455: LIST
5456: IN
5457: AND
5458: IFFALSE 5506
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
5460: LD_ADDR_VAR 0 11
5464: PUSH
5465: LD_VAR 0 7
5469: PPUSH
5470: LD_VAR 0 9
5474: PPUSH
5475: LD_EXP 26
5479: PUSH
5480: LD_EXP 26
5484: PUSH
5485: LD_INT 2
5487: DIV
5488: PLUS
5489: PPUSH
5490: LD_EXP 27
5494: PUSH
5495: LD_INT 1
5497: PLUS
5498: PPUSH
5499: CALL 6122 0 4
5503: ST_TO_ADDR
5504: GO 5536
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
5506: LD_ADDR_VAR 0 11
5510: PUSH
5511: LD_VAR 0 7
5515: PPUSH
5516: LD_VAR 0 9
5520: PPUSH
5521: LD_EXP 26
5525: PPUSH
5526: LD_EXP 27
5530: PPUSH
5531: CALL 6122 0 4
5535: ST_TO_ADDR
// for j in team do
5536: LD_ADDR_VAR 0 3
5540: PUSH
5541: LD_VAR 0 11
5545: PUSH
5546: FOR_IN
5547: IFFALSE 5596
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
5549: LD_VAR 0 3
5553: PPUSH
5554: LD_EXP 23
5558: PUSH
5559: LD_VAR 0 8
5563: ARRAY
5564: PUSH
5565: LD_INT 1
5567: ARRAY
5568: PPUSH
5569: LD_EXP 23
5573: PUSH
5574: LD_VAR 0 8
5578: ARRAY
5579: PUSH
5580: LD_INT 2
5582: ARRAY
5583: PPUSH
5584: LD_INT 12
5586: PPUSH
5587: LD_INT 0
5589: PPUSH
5590: CALL_OW 50
5594: GO 5546
5596: POP
5597: POP
// if mpApemans then
5598: LD_EXP 32
5602: IFFALSE 5708
// begin for j := 1 to mpApemans do
5604: LD_ADDR_VAR 0 3
5608: PUSH
5609: DOUBLE
5610: LD_INT 1
5612: DEC
5613: ST_TO_ADDR
5614: LD_EXP 32
5618: PUSH
5619: FOR_TO
5620: IFFALSE 5706
// begin PrepareApeman ( - 5 ) ;
5622: LD_INT 5
5624: NEG
5625: PPUSH
5626: CALL 54901 0 1
// ape := CreateHuman ;
5630: LD_ADDR_VAR 0 10
5634: PUSH
5635: CALL_OW 44
5639: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
5640: LD_ADDR_EXP 34
5644: PUSH
5645: LD_EXP 34
5649: PPUSH
5650: LD_VAR 0 8
5654: PPUSH
5655: LD_EXP 34
5659: PUSH
5660: LD_VAR 0 8
5664: ARRAY
5665: PPUSH
5666: LD_VAR 0 10
5670: PPUSH
5671: CALL 58774 0 2
5675: PPUSH
5676: CALL_OW 1
5680: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
5681: LD_VAR 0 10
5685: PPUSH
5686: LD_EXP 33
5690: PUSH
5691: LD_VAR 0 8
5695: ARRAY
5696: PPUSH
5697: LD_INT 0
5699: PPUSH
5700: CALL_OW 49
// end ;
5704: GO 5619
5706: POP
5707: POP
// end ; end ;
5708: GO 4250
5710: POP
5711: POP
// if not mpTeamGame then
5712: LD_EXP 13
5716: NOT
5717: IFFALSE 5815
// begin for i := 1 to 8 do
5719: LD_ADDR_VAR 0 2
5723: PUSH
5724: DOUBLE
5725: LD_INT 1
5727: DEC
5728: ST_TO_ADDR
5729: LD_INT 8
5731: PUSH
5732: FOR_TO
5733: IFFALSE 5811
// for j := 1 to 8 do
5735: LD_ADDR_VAR 0 3
5739: PUSH
5740: DOUBLE
5741: LD_INT 1
5743: DEC
5744: ST_TO_ADDR
5745: LD_INT 8
5747: PUSH
5748: FOR_TO
5749: IFFALSE 5807
// if i <> j then
5751: LD_VAR 0 2
5755: PUSH
5756: LD_VAR 0 3
5760: NONEQUAL
5761: IFFALSE 5785
// SetAttitude ( i , j , att_neutral , true ) else
5763: LD_VAR 0 2
5767: PPUSH
5768: LD_VAR 0 3
5772: PPUSH
5773: LD_INT 0
5775: PPUSH
5776: LD_INT 1
5778: PPUSH
5779: CALL_OW 80
5783: GO 5805
// SetAttitude ( i , j , att_friend , true ) ;
5785: LD_VAR 0 2
5789: PPUSH
5790: LD_VAR 0 3
5794: PPUSH
5795: LD_INT 1
5797: PPUSH
5798: LD_INT 1
5800: PPUSH
5801: CALL_OW 80
5805: GO 5748
5807: POP
5808: POP
5809: GO 5732
5811: POP
5812: POP
// end else
5813: GO 5990
// begin if mpSharedVision then
5815: LD_EXP 18
5819: IFFALSE 5884
// begin for i in mpTeams do
5821: LD_ADDR_VAR 0 2
5825: PUSH
5826: LD_EXP 12
5830: PUSH
5831: FOR_IN
5832: IFFALSE 5882
// for j := 2 to i do
5834: LD_ADDR_VAR 0 3
5838: PUSH
5839: DOUBLE
5840: LD_INT 2
5842: DEC
5843: ST_TO_ADDR
5844: LD_VAR 0 2
5848: PUSH
5849: FOR_TO
5850: IFFALSE 5878
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
5852: LD_VAR 0 2
5856: PUSH
5857: LD_VAR 0 3
5861: ARRAY
5862: PPUSH
5863: LD_VAR 0 2
5867: PUSH
5868: LD_INT 1
5870: ARRAY
5871: PPUSH
5872: CALL_OW 343
5876: GO 5849
5878: POP
5879: POP
5880: GO 5831
5882: POP
5883: POP
// end ; for i := 1 to 8 do
5884: LD_ADDR_VAR 0 2
5888: PUSH
5889: DOUBLE
5890: LD_INT 1
5892: DEC
5893: ST_TO_ADDR
5894: LD_INT 8
5896: PUSH
5897: FOR_TO
5898: IFFALSE 5988
// for j := 1 to 8 do
5900: LD_ADDR_VAR 0 3
5904: PUSH
5905: DOUBLE
5906: LD_INT 1
5908: DEC
5909: ST_TO_ADDR
5910: LD_INT 8
5912: PUSH
5913: FOR_TO
5914: IFFALSE 5984
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
5916: LD_EXP 10
5920: PUSH
5921: LD_VAR 0 2
5925: ARRAY
5926: PUSH
5927: LD_EXP 10
5931: PUSH
5932: LD_VAR 0 3
5936: ARRAY
5937: EQUAL
5938: IFFALSE 5962
// SetAttitude ( i , j , att_friend , true ) else
5940: LD_VAR 0 2
5944: PPUSH
5945: LD_VAR 0 3
5949: PPUSH
5950: LD_INT 1
5952: PPUSH
5953: LD_INT 1
5955: PPUSH
5956: CALL_OW 80
5960: GO 5982
// SetAttitude ( i , j , att_enemy , true ) ;
5962: LD_VAR 0 2
5966: PPUSH
5967: LD_VAR 0 3
5971: PPUSH
5972: LD_INT 2
5974: PPUSH
5975: LD_INT 1
5977: PPUSH
5978: CALL_OW 80
5982: GO 5913
5984: POP
5985: POP
5986: GO 5897
5988: POP
5989: POP
// end ; music_nat := mpSideNations [ your_side ] ;
5990: LD_ADDR_OWVAR 71
5994: PUSH
5995: LD_EXP 11
5999: PUSH
6000: LD_OWVAR 2
6004: ARRAY
6005: ST_TO_ADDR
// if IAmSpec then
6006: CALL_OW 531
6010: IFFALSE 6051
// begin FogOff ( true ) ;
6012: LD_INT 1
6014: PPUSH
6015: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
6019: LD_EXP 31
6023: PUSH
6024: LD_INT 1
6026: ARRAY
6027: PUSH
6028: LD_INT 2
6030: DIV
6031: PPUSH
6032: LD_EXP 31
6036: PUSH
6037: LD_INT 2
6039: ARRAY
6040: PUSH
6041: LD_INT 2
6043: DIV
6044: PPUSH
6045: CALL_OW 86
// end else
6049: GO 6097
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
6051: LD_EXP 23
6055: PUSH
6056: LD_EXP 9
6060: PUSH
6061: LD_OWVAR 2
6065: ARRAY
6066: ARRAY
6067: PUSH
6068: LD_INT 1
6070: ARRAY
6071: PPUSH
6072: LD_EXP 23
6076: PUSH
6077: LD_EXP 9
6081: PUSH
6082: LD_OWVAR 2
6086: ARRAY
6087: ARRAY
6088: PUSH
6089: LD_INT 2
6091: ARRAY
6092: PPUSH
6093: CALL_OW 86
// end ; BeginBuildUp ;
6097: CALL 7200 0 0
// enable ( mpActive ) ;
6101: LD_INT 100
6103: ENABLE_MARKED
// enable ( mpGameType ) ;
6104: LD_EXP 5
6108: ENABLE_MARKED
// mpGameActive := true ;
6109: LD_ADDR_EXP 41
6113: PUSH
6114: LD_INT 1
6116: ST_TO_ADDR
// end ;
6117: LD_VAR 0 1
6121: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class , commander ; begin
6122: LD_INT 0
6124: PPUSH
6125: PPUSH
6126: PPUSH
6127: PPUSH
6128: PPUSH
// result := [ ] ;
6129: LD_ADDR_VAR 0 5
6133: PUSH
6134: EMPTY
6135: ST_TO_ADDR
// class := class_soldier ;
6136: LD_ADDR_VAR 0 8
6140: PUSH
6141: LD_INT 1
6143: ST_TO_ADDR
// uc_side := side ;
6144: LD_ADDR_OWVAR 20
6148: PUSH
6149: LD_VAR 0 1
6153: ST_TO_ADDR
// uc_nation := nation ;
6154: LD_ADDR_OWVAR 21
6158: PUSH
6159: LD_VAR 0 2
6163: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
6164: LD_ADDR_OWVAR 26
6168: PUSH
6169: LD_OWVAR 19
6173: PUSH
6174: LD_VAR 0 1
6178: ARRAY
6179: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
6180: LD_INT 1
6182: PPUSH
6183: LD_INT 2
6185: PPUSH
6186: CALL_OW 12
6190: PPUSH
6191: LD_VAR 0 8
6195: PPUSH
6196: LD_VAR 0 4
6200: PUSH
6201: LD_INT 2
6203: PLUS
6204: PPUSH
6205: CALL_OW 380
// hc_importance := 105 ;
6209: LD_ADDR_OWVAR 32
6213: PUSH
6214: LD_INT 105
6216: ST_TO_ADDR
// if Multiplayer then
6217: LD_OWVAR 4
6221: IFFALSE 6261
// begin hc_gallery := MULTIAVATARS ;
6223: LD_ADDR_OWVAR 33
6227: PUSH
6228: LD_STRING MULTIAVATARS
6230: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
6231: LD_ADDR_OWVAR 34
6235: PUSH
6236: LD_VAR 0 1
6240: PPUSH
6241: CALL_OW 525
6245: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
6246: LD_ADDR_OWVAR 27
6250: PUSH
6251: LD_VAR 0 1
6255: PPUSH
6256: CALL_OW 526
6260: ST_TO_ADDR
// end ; commander := CreateHuman ;
6261: LD_ADDR_VAR 0 9
6265: PUSH
6266: CALL_OW 44
6270: ST_TO_ADDR
// result := Join ( result , commander ) ;
6271: LD_ADDR_VAR 0 5
6275: PUSH
6276: LD_VAR 0 5
6280: PPUSH
6281: LD_VAR 0 9
6285: PPUSH
6286: CALL 58774 0 2
6290: ST_TO_ADDR
// mpCommanders := Replace ( mpCommanders , side , commander ) ;
6291: LD_ADDR_EXP 43
6295: PUSH
6296: LD_EXP 43
6300: PPUSH
6301: LD_VAR 0 1
6305: PPUSH
6306: LD_VAR 0 9
6310: PPUSH
6311: CALL_OW 1
6315: ST_TO_ADDR
// if mpTeamPreset then
6316: LD_LOC 1
6320: IFFALSE 6416
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
6322: LD_LOC 1
6326: PUSH
6327: LD_INT 1
6329: ARRAY
6330: PPUSH
6331: LD_VAR 0 5
6335: PUSH
6336: LD_VAR 0 5
6340: ARRAY
6341: PPUSH
6342: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
6346: LD_VAR 0 5
6350: PUSH
6351: LD_VAR 0 5
6355: ARRAY
6356: PPUSH
6357: LD_INT 1
6359: PPUSH
6360: LD_LOC 1
6364: PUSH
6365: LD_INT 1
6367: ARRAY
6368: PPUSH
6369: LD_INT 1
6371: PPUSH
6372: CALL_OW 260
6376: PPUSH
6377: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
6381: LD_VAR 0 5
6385: PUSH
6386: LD_VAR 0 5
6390: ARRAY
6391: PPUSH
6392: LD_INT 2
6394: PPUSH
6395: LD_LOC 1
6399: PUSH
6400: LD_INT 1
6402: ARRAY
6403: PPUSH
6404: LD_INT 2
6406: PPUSH
6407: CALL_OW 260
6411: PPUSH
6412: CALL_OW 239
// end ; InitHc_All ( ) ;
6416: CALL_OW 584
// class := 2 ;
6420: LD_ADDR_VAR 0 8
6424: PUSH
6425: LD_INT 2
6427: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
6428: LD_ADDR_VAR 0 6
6432: PUSH
6433: DOUBLE
6434: LD_INT 1
6436: DEC
6437: ST_TO_ADDR
6438: LD_VAR 0 3
6442: PUSH
6443: LD_INT 1
6445: MINUS
6446: PUSH
6447: FOR_TO
6448: IFFALSE 6643
// begin PrepareHuman ( false , class , skill ) ;
6450: LD_INT 0
6452: PPUSH
6453: LD_VAR 0 8
6457: PPUSH
6458: LD_VAR 0 4
6462: PPUSH
6463: CALL_OW 380
// un := CreateHuman ;
6467: LD_ADDR_VAR 0 7
6471: PUSH
6472: CALL_OW 44
6476: ST_TO_ADDR
// result := Join ( result , un ) ;
6477: LD_ADDR_VAR 0 5
6481: PUSH
6482: LD_VAR 0 5
6486: PPUSH
6487: LD_VAR 0 7
6491: PPUSH
6492: CALL 58774 0 2
6496: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
6497: LD_LOC 1
6501: PPUSH
6502: CALL 22798 0 1
6506: PUSH
6507: LD_VAR 0 3
6511: GREATEREQUAL
6512: IFFALSE 6608
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
6514: LD_LOC 1
6518: PUSH
6519: LD_VAR 0 6
6523: PUSH
6524: LD_INT 1
6526: PLUS
6527: ARRAY
6528: PPUSH
6529: LD_VAR 0 7
6533: PPUSH
6534: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
6538: LD_VAR 0 7
6542: PPUSH
6543: LD_INT 1
6545: PPUSH
6546: LD_LOC 1
6550: PUSH
6551: LD_VAR 0 6
6555: PUSH
6556: LD_INT 1
6558: PLUS
6559: ARRAY
6560: PPUSH
6561: LD_INT 1
6563: PPUSH
6564: CALL_OW 260
6568: PPUSH
6569: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
6573: LD_VAR 0 7
6577: PPUSH
6578: LD_INT 2
6580: PPUSH
6581: LD_LOC 1
6585: PUSH
6586: LD_VAR 0 6
6590: PUSH
6591: LD_INT 1
6593: PLUS
6594: ARRAY
6595: PPUSH
6596: LD_INT 2
6598: PPUSH
6599: CALL_OW 260
6603: PPUSH
6604: CALL_OW 239
// end ; class := Inc ( class ) ;
6608: LD_ADDR_VAR 0 8
6612: PUSH
6613: LD_VAR 0 8
6617: PPUSH
6618: CALL 60147 0 1
6622: ST_TO_ADDR
// if class = 5 then
6623: LD_VAR 0 8
6627: PUSH
6628: LD_INT 5
6630: EQUAL
6631: IFFALSE 6641
// class := 1 ;
6633: LD_ADDR_VAR 0 8
6637: PUSH
6638: LD_INT 1
6640: ST_TO_ADDR
// end ;
6641: GO 6447
6643: POP
6644: POP
// if not mpTeamPreset then
6645: LD_LOC 1
6649: NOT
6650: IFFALSE 6662
// mpTeamPreset := result ;
6652: LD_ADDR_LOC 1
6656: PUSH
6657: LD_VAR 0 5
6661: ST_TO_ADDR
// end ;
6662: LD_VAR 0 5
6666: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
6667: LD_INT 0
6669: PPUSH
6670: PPUSH
// result := [ ] ;
6671: LD_ADDR_VAR 0 4
6675: PUSH
6676: EMPTY
6677: ST_TO_ADDR
// if not vehicles then
6678: LD_VAR 0 3
6682: NOT
6683: IFFALSE 6687
// exit ;
6685: GO 6901
// for i := 1 to vehicles [ nation ] do
6687: LD_ADDR_VAR 0 5
6691: PUSH
6692: DOUBLE
6693: LD_INT 1
6695: DEC
6696: ST_TO_ADDR
6697: LD_VAR 0 3
6701: PUSH
6702: LD_VAR 0 2
6706: ARRAY
6707: PUSH
6708: FOR_TO
6709: IFFALSE 6899
// begin uc_side := side ;
6711: LD_ADDR_OWVAR 20
6715: PUSH
6716: LD_VAR 0 1
6720: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
6721: LD_VAR 0 3
6725: PUSH
6726: LD_VAR 0 2
6730: ARRAY
6731: PUSH
6732: LD_VAR 0 5
6736: ARRAY
6737: PPUSH
6738: CALL 22798 0 1
6742: PUSH
6743: LD_INT 4
6745: GREATER
6746: IFFALSE 6776
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
6748: LD_ADDR_OWVAR 21
6752: PUSH
6753: LD_VAR 0 3
6757: PUSH
6758: LD_VAR 0 2
6762: ARRAY
6763: PUSH
6764: LD_VAR 0 5
6768: ARRAY
6769: PUSH
6770: LD_INT 5
6772: ARRAY
6773: ST_TO_ADDR
6774: GO 6786
// uc_nation := nation ;
6776: LD_ADDR_OWVAR 21
6780: PUSH
6781: LD_VAR 0 2
6785: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
6786: LD_VAR 0 3
6790: PUSH
6791: LD_VAR 0 2
6795: ARRAY
6796: PUSH
6797: LD_VAR 0 5
6801: ARRAY
6802: PUSH
6803: LD_INT 1
6805: ARRAY
6806: PPUSH
6807: LD_VAR 0 3
6811: PUSH
6812: LD_VAR 0 2
6816: ARRAY
6817: PUSH
6818: LD_VAR 0 5
6822: ARRAY
6823: PUSH
6824: LD_INT 2
6826: ARRAY
6827: PPUSH
6828: LD_VAR 0 3
6832: PUSH
6833: LD_VAR 0 2
6837: ARRAY
6838: PUSH
6839: LD_VAR 0 5
6843: ARRAY
6844: PUSH
6845: LD_INT 3
6847: ARRAY
6848: PPUSH
6849: LD_VAR 0 3
6853: PUSH
6854: LD_VAR 0 2
6858: ARRAY
6859: PUSH
6860: LD_VAR 0 5
6864: ARRAY
6865: PUSH
6866: LD_INT 4
6868: ARRAY
6869: PPUSH
6870: LD_INT 80
6872: PPUSH
6873: CALL 25594 0 5
// result := Join ( result , CreateVehicle ) ;
6877: LD_ADDR_VAR 0 4
6881: PUSH
6882: LD_VAR 0 4
6886: PPUSH
6887: CALL_OW 45
6891: PPUSH
6892: CALL 58774 0 2
6896: ST_TO_ADDR
// end ;
6897: GO 6708
6899: POP
6900: POP
// end ;
6901: LD_VAR 0 4
6905: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
6906: LD_INT 0
6908: PPUSH
6909: PPUSH
// for i in mpBattleFlags do
6910: LD_ADDR_VAR 0 3
6914: PUSH
6915: LD_EXP 25
6919: PUSH
6920: FOR_IN
6921: IFFALSE 6998
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
6923: LD_VAR 0 3
6927: PPUSH
6928: LD_INT 1
6930: PUSH
6931: LD_VAR 0 1
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: LD_INT 2
6942: PUSH
6943: LD_VAR 0 1
6947: PUSH
6948: LD_REAL  7.00000000000000E-0001
6951: MUL
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: PUSH
6957: LD_INT 3
6959: PUSH
6960: LD_VAR 0 1
6964: PUSH
6965: LD_REAL  4.00000000000000E-0001
6968: MUL
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: PUSH
6974: LD_INT 20
6976: PUSH
6977: LD_VAR 0 1
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: LIST
6990: LIST
6991: PPUSH
6992: CALL_OW 423
6996: GO 6920
6998: POP
6999: POP
// end ;
7000: LD_VAR 0 2
7004: RET
// every 0 0$1 trigger mpActive do var i , strength ;
7005: LD_INT 100
7007: IFFALSE 7102
7009: GO 7011
7011: DISABLE
7012: LD_INT 0
7014: PPUSH
7015: PPUSH
// begin if mpBattleFlag <= 0 then
7016: LD_EXP 24
7020: PUSH
7021: LD_INT 0
7023: LESSEQUAL
7024: IFFALSE 7028
// exit ;
7026: GO 7102
// strength := 100 ;
7028: LD_ADDR_VAR 0 2
7032: PUSH
7033: LD_INT 100
7035: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
7036: LD_EXP 24
7040: PPUSH
7041: CALL_OW 67
// strength := Dec ( strength ) ;
7045: LD_ADDR_VAR 0 2
7049: PUSH
7050: LD_VAR 0 2
7054: PPUSH
7055: CALL 60169 0 1
7059: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
7060: LD_VAR 0 2
7064: PPUSH
7065: CALL 6906 0 1
// until not strength ;
7069: LD_VAR 0 2
7073: NOT
7074: IFFALSE 7036
// for i in mpBattleFlags do
7076: LD_ADDR_VAR 0 1
7080: PUSH
7081: LD_EXP 25
7085: PUSH
7086: FOR_IN
7087: IFFALSE 7100
// KillBattleFlag ( i ) ;
7089: LD_VAR 0 1
7093: PPUSH
7094: CALL_OW 419
7098: GO 7086
7100: POP
7101: POP
// end ;
7102: PPOPN 2
7104: END
// every 0 0$1 marked mpActive do var side , tmp ;
7105: GO 7107
7107: DISABLE
7108: LD_INT 0
7110: PPUSH
7111: PPUSH
// begin if mpSibBomb <= 1 then
7112: LD_EXP 30
7116: PUSH
7117: LD_INT 1
7119: LESSEQUAL
7120: IFFALSE 7124
// exit ;
7122: GO 7197
// tmp := mpSibBomb ;
7124: LD_ADDR_VAR 0 2
7128: PUSH
7129: LD_EXP 30
7133: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7134: LD_INT 35
7136: PPUSH
7137: CALL_OW 67
// tmp := tmp - 0 0$1 ;
7141: LD_ADDR_VAR 0 2
7145: PUSH
7146: LD_VAR 0 2
7150: PUSH
7151: LD_INT 35
7153: MINUS
7154: ST_TO_ADDR
// until not tmp ;
7155: LD_VAR 0 2
7159: NOT
7160: IFFALSE 7134
// for side := 1 to 8 do
7162: LD_ADDR_VAR 0 1
7166: PUSH
7167: DOUBLE
7168: LD_INT 1
7170: DEC
7171: ST_TO_ADDR
7172: LD_INT 8
7174: PUSH
7175: FOR_TO
7176: IFFALSE 7195
// SetTech ( tech_SibFiss , side , state_enabled ) ;
7178: LD_INT 25
7180: PPUSH
7181: LD_VAR 0 1
7185: PPUSH
7186: LD_INT 1
7188: PPUSH
7189: CALL_OW 322
7193: GO 7175
7195: POP
7196: POP
// end ;
7197: PPOPN 2
7199: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
7200: LD_INT 0
7202: PPUSH
7203: PPUSH
7204: PPUSH
// mpBuildUpTimeDelay := 0 ;
7205: LD_ADDR_EXP 50
7209: PUSH
7210: LD_INT 0
7212: ST_TO_ADDR
// if not mpBuildUpTime then
7213: LD_EXP 22
7217: NOT
7218: IFFALSE 7222
// exit ;
7220: GO 7411
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
7222: LD_ADDR_EXP 50
7226: PUSH
7227: LD_INT 8400
7229: PUSH
7230: LD_INT 2100
7232: PUSH
7233: LD_EXP 22
7237: MUL
7238: PLUS
7239: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
7240: LD_ADDR_EXP 51
7244: PUSH
7245: LD_INT 1
7247: ST_TO_ADDR
// for i := 1 to 8 do
7248: LD_ADDR_VAR 0 2
7252: PUSH
7253: DOUBLE
7254: LD_INT 1
7256: DEC
7257: ST_TO_ADDR
7258: LD_INT 8
7260: PUSH
7261: FOR_TO
7262: IFFALSE 7409
// if mpSidePositions [ i ] then
7264: LD_EXP 9
7268: PUSH
7269: LD_VAR 0 2
7273: ARRAY
7274: IFFALSE 7407
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
7276: LD_EXP 21
7280: PUSH
7281: LD_EXP 9
7285: PUSH
7286: LD_VAR 0 2
7290: ARRAY
7291: ARRAY
7292: PPUSH
7293: LD_INT 5
7295: PPUSH
7296: CALL_OW 424
// for j := 1 to 8 do
7300: LD_ADDR_VAR 0 3
7304: PUSH
7305: DOUBLE
7306: LD_INT 1
7308: DEC
7309: ST_TO_ADDR
7310: LD_INT 8
7312: PUSH
7313: FOR_TO
7314: IFFALSE 7405
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
7316: LD_EXP 9
7320: PUSH
7321: LD_VAR 0 3
7325: ARRAY
7326: IFFALSE 7375
7328: PUSH
7329: LD_EXP 10
7333: PUSH
7334: LD_VAR 0 2
7338: ARRAY
7339: PUSH
7340: LD_EXP 10
7344: PUSH
7345: LD_VAR 0 3
7349: ARRAY
7350: NONEQUAL
7351: IFTRUE 7374
7353: PUSH
7354: LD_EXP 13
7358: NOT
7359: IFFALSE 7373
7361: PUSH
7362: LD_VAR 0 2
7366: PUSH
7367: LD_VAR 0 3
7371: NONEQUAL
7372: AND
7373: OR
7374: AND
7375: IFFALSE 7403
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
7377: LD_VAR 0 3
7381: PPUSH
7382: LD_EXP 21
7386: PUSH
7387: LD_EXP 9
7391: PUSH
7392: LD_VAR 0 2
7396: ARRAY
7397: ARRAY
7398: PPUSH
7399: CALL_OW 333
7403: GO 7313
7405: POP
7406: POP
// end ;
7407: GO 7261
7409: POP
7410: POP
// end ;
7411: LD_VAR 0 1
7415: RET
// function EndBuildUp ; var i , j ; begin
7416: LD_INT 0
7418: PPUSH
7419: PPUSH
7420: PPUSH
// mpBuildUpTimeActive := false ;
7421: LD_ADDR_EXP 51
7425: PUSH
7426: LD_INT 0
7428: ST_TO_ADDR
// for i := 1 to 8 do
7429: LD_ADDR_VAR 0 2
7433: PUSH
7434: DOUBLE
7435: LD_INT 1
7437: DEC
7438: ST_TO_ADDR
7439: LD_INT 8
7441: PUSH
7442: FOR_TO
7443: IFFALSE 7590
// if mpSidePositions [ i ] then
7445: LD_EXP 9
7449: PUSH
7450: LD_VAR 0 2
7454: ARRAY
7455: IFFALSE 7588
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
7457: LD_EXP 21
7461: PUSH
7462: LD_EXP 9
7466: PUSH
7467: LD_VAR 0 2
7471: ARRAY
7472: ARRAY
7473: PPUSH
7474: LD_INT 0
7476: PPUSH
7477: CALL_OW 424
// for j := 1 to 8 do
7481: LD_ADDR_VAR 0 3
7485: PUSH
7486: DOUBLE
7487: LD_INT 1
7489: DEC
7490: ST_TO_ADDR
7491: LD_INT 8
7493: PUSH
7494: FOR_TO
7495: IFFALSE 7586
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
7497: LD_EXP 9
7501: PUSH
7502: LD_VAR 0 3
7506: ARRAY
7507: IFFALSE 7556
7509: PUSH
7510: LD_EXP 10
7514: PUSH
7515: LD_VAR 0 2
7519: ARRAY
7520: PUSH
7521: LD_EXP 10
7525: PUSH
7526: LD_VAR 0 3
7530: ARRAY
7531: NONEQUAL
7532: IFTRUE 7555
7534: PUSH
7535: LD_EXP 13
7539: NOT
7540: IFFALSE 7554
7542: PUSH
7543: LD_VAR 0 2
7547: PUSH
7548: LD_VAR 0 3
7552: NONEQUAL
7553: AND
7554: OR
7555: AND
7556: IFFALSE 7584
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
7558: LD_VAR 0 3
7562: PPUSH
7563: LD_EXP 21
7567: PUSH
7568: LD_EXP 9
7572: PUSH
7573: LD_VAR 0 2
7577: ARRAY
7578: ARRAY
7579: PPUSH
7580: CALL_OW 334
7584: GO 7494
7586: POP
7587: POP
// end ;
7588: GO 7442
7590: POP
7591: POP
// end ;
7592: LD_VAR 0 1
7596: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
7597: LD_EXP 51
7601: IFFALSE 7780
7603: GO 7605
7605: DISABLE
7606: LD_INT 0
7608: PPUSH
7609: PPUSH
// begin for i := 1 to 8 do
7610: LD_ADDR_VAR 0 1
7614: PUSH
7615: DOUBLE
7616: LD_INT 1
7618: DEC
7619: ST_TO_ADDR
7620: LD_INT 8
7622: PUSH
7623: FOR_TO
7624: IFFALSE 7777
// if mpSidePositions [ i ] then
7626: LD_EXP 9
7630: PUSH
7631: LD_VAR 0 1
7635: ARRAY
7636: IFFALSE 7775
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
7638: LD_ADDR_VAR 0 2
7642: PUSH
7643: LD_EXP 21
7647: PUSH
7648: LD_EXP 9
7652: PUSH
7653: LD_VAR 0 1
7657: ARRAY
7658: ARRAY
7659: PPUSH
7660: LD_INT 2
7662: PUSH
7663: LD_INT 21
7665: PUSH
7666: LD_INT 1
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: PUSH
7673: LD_INT 21
7675: PUSH
7676: LD_INT 2
7678: PUSH
7679: EMPTY
7680: LIST
7681: LIST
7682: PUSH
7683: EMPTY
7684: LIST
7685: LIST
7686: LIST
7687: PUSH
7688: LD_INT 22
7690: PUSH
7691: LD_OWVAR 2
7695: PUSH
7696: EMPTY
7697: LIST
7698: LIST
7699: PUSH
7700: EMPTY
7701: LIST
7702: LIST
7703: PPUSH
7704: CALL_OW 70
7708: PUSH
7709: FOR_IN
7710: IFFALSE 7773
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
7712: LD_EXP 10
7716: PUSH
7717: LD_VAR 0 1
7721: ARRAY
7722: PUSH
7723: LD_EXP 10
7727: PUSH
7728: LD_OWVAR 2
7732: ARRAY
7733: NONEQUAL
7734: IFTRUE 7757
7736: PUSH
7737: LD_EXP 13
7741: NOT
7742: IFFALSE 7756
7744: PUSH
7745: LD_VAR 0 1
7749: PUSH
7750: LD_OWVAR 2
7754: NONEQUAL
7755: AND
7756: OR
7757: IFFALSE 7771
// ComMoveToArea ( un , BuildUpEscape ) ;
7759: LD_VAR 0 2
7763: PPUSH
7764: LD_INT 72
7766: PPUSH
7767: CALL_OW 113
7771: GO 7709
7773: POP
7774: POP
7775: GO 7623
7777: POP
7778: POP
// enable ;
7779: ENABLE
// end ;
7780: PPOPN 2
7782: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
7783: LD_EXP 22
7787: IFFALSE 7837
7789: GO 7791
7791: DISABLE
7792: LD_INT 0
7794: PPUSH
// begin tmp := mpBuildUpTime ;
7795: LD_ADDR_VAR 0 1
7799: PUSH
7800: LD_EXP 22
7804: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7805: LD_INT 35
7807: PPUSH
7808: CALL_OW 67
// tmp := tmp - 0 0$1 ;
7812: LD_ADDR_VAR 0 1
7816: PUSH
7817: LD_VAR 0 1
7821: PUSH
7822: LD_INT 35
7824: MINUS
7825: ST_TO_ADDR
// until not tmp ;
7826: LD_VAR 0 1
7830: NOT
7831: IFFALSE 7805
// EndBuildUp ;
7833: CALL 7416 0 0
// end ;
7837: PPOPN 1
7839: END
// every 0 0$1 trigger mpActive marked mpWin do
7840: LD_INT 100
7842: IFFALSE 7876
7844: GO 7846
7846: DISABLE
// begin if IAmServer then
7847: CALL_OW 518
7851: IFFALSE 7860
// wait ( 0 0$3 ) ;
7853: LD_INT 105
7855: PPUSH
7856: CALL_OW 67
// if Multiplayer then
7860: LD_OWVAR 4
7864: IFFALSE 7872
// YouWinInMultiplayer else
7866: CALL_OW 106
7870: GO 7876
// YouWin ;
7872: CALL_OW 103
// end ;
7876: END
// export function HasPowerByGameType ( gameType , side ) ; begin
7877: LD_INT 0
7879: PPUSH
// result := false ;
7880: LD_ADDR_VAR 0 3
7884: PUSH
7885: LD_INT 0
7887: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , GameTypeForts :
7888: LD_VAR 0 1
7892: PUSH
7893: LD_INT 1
7895: DOUBLE
7896: EQUAL
7897: IFTRUE 7925
7899: LD_INT 5
7901: DOUBLE
7902: EQUAL
7903: IFTRUE 7925
7905: LD_INT 6
7907: DOUBLE
7908: EQUAL
7909: IFTRUE 7925
7911: LD_INT 7
7913: DOUBLE
7914: EQUAL
7915: IFTRUE 7925
7917: LD_INT 9
7919: DOUBLE
7920: EQUAL
7921: IFTRUE 7925
7923: GO 7998
7925: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
7926: LD_ADDR_VAR 0 3
7930: PUSH
7931: LD_INT 22
7933: PUSH
7934: LD_VAR 0 2
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: PUSH
7943: LD_INT 2
7945: PUSH
7946: LD_INT 21
7948: PUSH
7949: LD_INT 1
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: PUSH
7956: LD_INT 33
7958: PUSH
7959: LD_INT 3
7961: PUSH
7962: EMPTY
7963: LIST
7964: LIST
7965: PUSH
7966: LD_INT 33
7968: PUSH
7969: LD_INT 5
7971: PUSH
7972: EMPTY
7973: LIST
7974: LIST
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: LIST
7980: LIST
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: PPUSH
7986: CALL_OW 69
7990: PPUSH
7991: CALL 22798 0 1
7995: ST_TO_ADDR
// end ; GameTypeSurvival :
7996: GO 8394
7998: LD_INT 2
8000: DOUBLE
8001: EQUAL
8002: IFTRUE 8006
8004: GO 8136
8006: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
8007: LD_ADDR_VAR 0 3
8011: PUSH
8012: LD_INT 22
8014: PUSH
8015: LD_VAR 0 2
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: PUSH
8024: LD_INT 2
8026: PUSH
8027: LD_INT 30
8029: PUSH
8030: LD_INT 0
8032: PUSH
8033: EMPTY
8034: LIST
8035: LIST
8036: PUSH
8037: LD_INT 30
8039: PUSH
8040: LD_INT 1
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: PUSH
8047: EMPTY
8048: LIST
8049: LIST
8050: LIST
8051: PUSH
8052: EMPTY
8053: LIST
8054: LIST
8055: PPUSH
8056: CALL_OW 69
8060: PPUSH
8061: CALL 22798 0 1
8065: IFFALSE 8133
8067: PUSH
8068: LD_INT 22
8070: PUSH
8071: LD_VAR 0 2
8075: PUSH
8076: EMPTY
8077: LIST
8078: LIST
8079: PUSH
8080: LD_INT 2
8082: PUSH
8083: LD_INT 21
8085: PUSH
8086: LD_INT 1
8088: PUSH
8089: EMPTY
8090: LIST
8091: LIST
8092: PUSH
8093: LD_INT 33
8095: PUSH
8096: LD_INT 3
8098: PUSH
8099: EMPTY
8100: LIST
8101: LIST
8102: PUSH
8103: LD_INT 33
8105: PUSH
8106: LD_INT 5
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: PUSH
8113: EMPTY
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: PPUSH
8123: CALL_OW 69
8127: PPUSH
8128: CALL 22798 0 1
8132: AND
8133: ST_TO_ADDR
// end ; GameTypeSurvivalHardcore :
8134: GO 8394
8136: LD_INT 8
8138: DOUBLE
8139: EQUAL
8140: IFTRUE 8144
8142: GO 8293
8144: POP
// begin result := IsLive ( mpCommanders [ side ] ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
8145: LD_ADDR_VAR 0 3
8149: PUSH
8150: LD_EXP 43
8154: PUSH
8155: LD_VAR 0 2
8159: ARRAY
8160: PPUSH
8161: CALL_OW 300
8165: IFFALSE 8222
8167: PUSH
8168: LD_INT 22
8170: PUSH
8171: LD_VAR 0 2
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: PUSH
8180: LD_INT 2
8182: PUSH
8183: LD_INT 30
8185: PUSH
8186: LD_INT 0
8188: PUSH
8189: EMPTY
8190: LIST
8191: LIST
8192: PUSH
8193: LD_INT 30
8195: PUSH
8196: LD_INT 1
8198: PUSH
8199: EMPTY
8200: LIST
8201: LIST
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: LIST
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: PPUSH
8212: CALL_OW 69
8216: PPUSH
8217: CALL 22798 0 1
8221: AND
8222: IFFALSE 8290
8224: PUSH
8225: LD_INT 22
8227: PUSH
8228: LD_VAR 0 2
8232: PUSH
8233: EMPTY
8234: LIST
8235: LIST
8236: PUSH
8237: LD_INT 2
8239: PUSH
8240: LD_INT 21
8242: PUSH
8243: LD_INT 1
8245: PUSH
8246: EMPTY
8247: LIST
8248: LIST
8249: PUSH
8250: LD_INT 33
8252: PUSH
8253: LD_INT 3
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: PUSH
8260: LD_INT 33
8262: PUSH
8263: LD_INT 5
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: PUSH
8270: EMPTY
8271: LIST
8272: LIST
8273: LIST
8274: LIST
8275: PUSH
8276: EMPTY
8277: LIST
8278: LIST
8279: PPUSH
8280: CALL_OW 69
8284: PPUSH
8285: CALL 22798 0 1
8289: AND
8290: ST_TO_ADDR
// end ; GameTypeKing :
8291: GO 8394
8293: LD_INT 3
8295: DOUBLE
8296: EQUAL
8297: IFTRUE 8301
8299: GO 8393
8301: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
8302: LD_ADDR_VAR 0 3
8306: PUSH
8307: LD_INT 22
8309: PUSH
8310: LD_VAR 0 2
8314: PUSH
8315: EMPTY
8316: LIST
8317: LIST
8318: PUSH
8319: LD_INT 2
8321: PUSH
8322: LD_INT 21
8324: PUSH
8325: LD_INT 1
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: PUSH
8332: LD_INT 33
8334: PUSH
8335: LD_INT 3
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: PUSH
8342: LD_INT 33
8344: PUSH
8345: LD_INT 5
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: PUSH
8352: EMPTY
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: PPUSH
8362: CALL_OW 69
8366: PPUSH
8367: CALL 22798 0 1
8371: IFFALSE 8390
8373: PUSH
8374: LD_VAR 0 2
8378: PPUSH
8379: CALL 65252 0 1
8383: PUSH
8384: LD_EXP 37
8388: LESS
8389: AND
8390: ST_TO_ADDR
// end ; end ;
8391: GO 8394
8393: POP
// end ;
8394: LD_VAR 0 3
8398: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
8399: LD_INT 100
8401: IFFALSE 8631
8403: GO 8405
8405: DISABLE
8406: LD_INT 0
8408: PPUSH
8409: PPUSH
// begin if Multiplayer then
8410: LD_OWVAR 4
8414: IFFALSE 8422
// SetPlayerSpectator ( ) else
8416: CALL_OW 572
8420: GO 8431
// FogOff ( your_side ) ;
8422: LD_OWVAR 2
8426: PPUSH
8427: CALL_OW 344
// repeat gameIsOn := false ;
8431: LD_ADDR_VAR 0 1
8435: PUSH
8436: LD_INT 0
8438: ST_TO_ADDR
// for i := 1 to 8 do
8439: LD_ADDR_VAR 0 2
8443: PUSH
8444: DOUBLE
8445: LD_INT 1
8447: DEC
8448: ST_TO_ADDR
8449: LD_INT 8
8451: PUSH
8452: FOR_TO
8453: IFFALSE 8583
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
8455: LD_EXP 9
8459: PUSH
8460: LD_VAR 0 2
8464: ARRAY
8465: IFFALSE 8478
8467: PUSH
8468: LD_VAR 0 2
8472: PPUSH
8473: CALL_OW 108
8477: AND
8478: IFFALSE 8492
8480: PUSH
8481: LD_VAR 0 2
8485: PUSH
8486: LD_OWVAR 2
8490: NONEQUAL
8491: AND
8492: IFFALSE 8581
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
8494: LD_EXP 10
8498: PUSH
8499: LD_VAR 0 2
8503: ARRAY
8504: NOT
8505: IFTRUE 8553
8507: PUSH
8508: LD_EXP 10
8512: PUSH
8513: LD_VAR 0 2
8517: ARRAY
8518: PUSH
8519: LD_EXP 10
8523: PUSH
8524: LD_OWVAR 2
8528: ARRAY
8529: NONEQUAL
8530: IFFALSE 8552
8532: PUSH
8533: LD_OWVAR 2
8537: PPUSH
8538: LD_VAR 0 2
8542: PPUSH
8543: CALL_OW 81
8547: PUSH
8548: LD_INT 1
8550: NONEQUAL
8551: AND
8552: OR
8553: IFFALSE 8581
// if HasPowerByGameType ( mpGameType , i ) then
8555: LD_EXP 5
8559: PPUSH
8560: LD_VAR 0 2
8564: PPUSH
8565: CALL 7877 0 2
8569: IFFALSE 8581
// begin gameIsOn := true ;
8571: LD_ADDR_VAR 0 1
8575: PUSH
8576: LD_INT 1
8578: ST_TO_ADDR
// break ;
8579: GO 8583
// end ;
8581: GO 8452
8583: POP
8584: POP
// wait ( 100 ) ;
8585: LD_INT 100
8587: PPUSH
8588: CALL_OW 67
// until not gameIsOn ;
8592: LD_VAR 0 1
8596: NOT
8597: IFFALSE 8431
// if IAmServer then
8599: CALL_OW 518
8603: IFFALSE 8612
// wait ( 0 0$3 ) ;
8605: LD_INT 105
8607: PPUSH
8608: CALL_OW 67
// if Multiplayer then
8612: LD_OWVAR 4
8616: IFFALSE 8624
// YouLostInMultiplayer else
8618: CALL_OW 107
8622: GO 8631
// YouLost (  ) ;
8624: LD_STRING 
8626: PPUSH
8627: CALL_OW 104
// end ;
8631: PPOPN 2
8633: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
8634: LD_EXP 35
8638: IFFALSE 9022
8640: GO 8642
8642: DISABLE
8643: LD_INT 0
8645: PPUSH
8646: PPUSH
8647: PPUSH
8648: PPUSH
8649: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
8650: LD_ADDR_VAR 0 5
8654: PUSH
8655: LD_INT 1
8657: PUSH
8658: LD_INT 2
8660: PUSH
8661: LD_INT 3
8663: PUSH
8664: LD_INT 4
8666: PUSH
8667: LD_INT 5
8669: PUSH
8670: LD_INT 6
8672: PUSH
8673: LD_INT 7
8675: PUSH
8676: LD_INT 8
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
8689: LD_INT 350
8691: PPUSH
8692: CALL_OW 67
// for i := 1 to 8 do
8696: LD_ADDR_VAR 0 1
8700: PUSH
8701: DOUBLE
8702: LD_INT 1
8704: DEC
8705: ST_TO_ADDR
8706: LD_INT 8
8708: PUSH
8709: FOR_TO
8710: IFFALSE 8992
// begin j := sides [ i ] ;
8712: LD_ADDR_VAR 0 2
8716: PUSH
8717: LD_VAR 0 5
8721: PUSH
8722: LD_VAR 0 1
8726: ARRAY
8727: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
8728: LD_EXP 42
8732: PUSH
8733: LD_VAR 0 2
8737: ARRAY
8738: PPUSH
8739: CALL 22798 0 1
8743: IFFALSE 8756
8745: PUSH
8746: LD_VAR 0 2
8750: PPUSH
8751: CALL_OW 108
8755: AND
8756: IFFALSE 8774
8758: PUSH
8759: LD_EXP 5
8763: PPUSH
8764: LD_VAR 0 2
8768: PPUSH
8769: CALL 7877 0 2
8773: AND
8774: IFFALSE 8990
// begin wait ( mpRespawn div 2 ) ;
8776: LD_EXP 35
8780: PUSH
8781: LD_INT 2
8783: DIV
8784: PPUSH
8785: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
8789: LD_ADDR_VAR 0 3
8793: PUSH
8794: LD_INT 22
8796: PUSH
8797: LD_VAR 0 2
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: PUSH
8806: LD_INT 50
8808: PUSH
8809: EMPTY
8810: LIST
8811: PUSH
8812: LD_INT 2
8814: PUSH
8815: LD_INT 30
8817: PUSH
8818: LD_INT 0
8820: PUSH
8821: EMPTY
8822: LIST
8823: LIST
8824: PUSH
8825: LD_INT 30
8827: PUSH
8828: LD_INT 1
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: LIST
8839: PUSH
8840: EMPTY
8841: LIST
8842: LIST
8843: LIST
8844: PPUSH
8845: CALL_OW 69
8849: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
8850: LD_VAR 0 3
8854: NOT
8855: IFTRUE 8869
8857: PUSH
8858: LD_VAR 0 2
8862: PPUSH
8863: CALL_OW 108
8867: NOT
8868: OR
8869: IFTRUE 8888
8871: PUSH
8872: LD_EXP 5
8876: PPUSH
8877: LD_VAR 0 2
8881: PPUSH
8882: CALL 7877 0 2
8886: NOT
8887: OR
8888: IFFALSE 8892
// continue ;
8890: GO 8709
// spawn := tmp [ 1 ] ;
8892: LD_ADDR_VAR 0 4
8896: PUSH
8897: LD_VAR 0 3
8901: PUSH
8902: LD_INT 1
8904: ARRAY
8905: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
8906: LD_EXP 42
8910: PUSH
8911: LD_VAR 0 2
8915: ARRAY
8916: PUSH
8917: LD_INT 1
8919: ARRAY
8920: PPUSH
8921: LD_VAR 0 4
8925: PPUSH
8926: CALL_OW 250
8930: PPUSH
8931: LD_VAR 0 4
8935: PPUSH
8936: CALL_OW 251
8940: PPUSH
8941: LD_INT 32
8943: PPUSH
8944: LD_INT 1
8946: PPUSH
8947: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
8951: LD_ADDR_EXP 42
8955: PUSH
8956: LD_EXP 42
8960: PPUSH
8961: LD_VAR 0 2
8965: PPUSH
8966: LD_EXP 42
8970: PUSH
8971: LD_VAR 0 2
8975: ARRAY
8976: PPUSH
8977: LD_INT 1
8979: PPUSH
8980: CALL_OW 3
8984: PPUSH
8985: CALL_OW 1
8989: ST_TO_ADDR
// end ; end ;
8990: GO 8709
8992: POP
8993: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
8994: LD_ADDR_VAR 0 5
8998: PUSH
8999: LD_VAR 0 5
9003: PPUSH
9004: LD_INT 1
9006: PPUSH
9007: LD_INT 8
9009: PPUSH
9010: LD_INT 1
9012: PPUSH
9013: CALL 25124 0 4
9017: ST_TO_ADDR
// until false ;
9018: LD_INT 0
9020: IFFALSE 8689
// end ;
9022: PPOPN 5
9024: END
// every 0 0$1 marked mpActive do
9025: GO 9027
9027: DISABLE
// begin enable ;
9028: ENABLE
// if not mpDisplayStrings then
9029: LD_EXP 40
9033: NOT
9034: IFFALSE 9045
// begin display_strings := [ ] ;
9036: LD_ADDR_OWVAR 47
9040: PUSH
9041: EMPTY
9042: ST_TO_ADDR
// exit ;
9043: GO 9055
// end ; display_strings := mpDisplayStrings ;
9045: LD_ADDR_OWVAR 47
9049: PUSH
9050: LD_EXP 40
9054: ST_TO_ADDR
// end ; end_of_file
9055: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
9056: LD_INT 0
9058: PPUSH
9059: PPUSH
9060: PPUSH
9061: PPUSH
9062: PPUSH
9063: PPUSH
9064: PPUSH
9065: PPUSH
9066: PPUSH
// if GetType ( un ) = unit_vehicle then
9067: LD_VAR 0 1
9071: PPUSH
9072: CALL_OW 247
9076: PUSH
9077: LD_INT 2
9079: EQUAL
9080: IFFALSE 9084
// exit ;
9082: GO 9857
// side := GetSide ( un ) ;
9084: LD_ADDR_VAR 0 9
9088: PUSH
9089: LD_VAR 0 1
9093: PPUSH
9094: CALL_OW 255
9098: ST_TO_ADDR
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] then
9099: LD_EXP 5
9103: PUSH
9104: LD_INT 2
9106: PUSH
9107: LD_INT 8
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: IN
9114: IFFALSE 9208
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
9116: LD_VAR 0 1
9120: PPUSH
9121: CALL_OW 266
9125: PUSH
9126: LD_INT 0
9128: PUSH
9129: LD_INT 1
9131: PUSH
9132: EMPTY
9133: LIST
9134: LIST
9135: IN
9136: IFFALSE 9208
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
9138: LD_ADDR_VAR 0 3
9142: PUSH
9143: LD_INT 22
9145: PUSH
9146: LD_VAR 0 9
9150: PUSH
9151: EMPTY
9152: LIST
9153: LIST
9154: PUSH
9155: LD_INT 2
9157: PUSH
9158: LD_INT 21
9160: PUSH
9161: LD_INT 1
9163: PUSH
9164: EMPTY
9165: LIST
9166: LIST
9167: PUSH
9168: LD_INT 33
9170: PUSH
9171: LD_INT 3
9173: PUSH
9174: EMPTY
9175: LIST
9176: LIST
9177: PUSH
9178: EMPTY
9179: LIST
9180: LIST
9181: LIST
9182: PUSH
9183: EMPTY
9184: LIST
9185: LIST
9186: PPUSH
9187: CALL_OW 69
9191: PUSH
9192: FOR_IN
9193: IFFALSE 9206
// KillUnit ( i ) ;
9195: LD_VAR 0 3
9199: PPUSH
9200: CALL_OW 66
9204: GO 9192
9206: POP
9207: POP
// end ; if mpGameType = GameTypeSurvivalHardcore then
9208: LD_EXP 5
9212: PUSH
9213: LD_INT 8
9215: EQUAL
9216: IFFALSE 9300
// if un in mpCommanders then
9218: LD_VAR 0 1
9222: PUSH
9223: LD_EXP 43
9227: IN
9228: IFFALSE 9300
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
9230: LD_ADDR_VAR 0 3
9234: PUSH
9235: LD_INT 22
9237: PUSH
9238: LD_VAR 0 9
9242: PUSH
9243: EMPTY
9244: LIST
9245: LIST
9246: PUSH
9247: LD_INT 2
9249: PUSH
9250: LD_INT 21
9252: PUSH
9253: LD_INT 1
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: PUSH
9260: LD_INT 33
9262: PUSH
9263: LD_INT 3
9265: PUSH
9266: EMPTY
9267: LIST
9268: LIST
9269: PUSH
9270: EMPTY
9271: LIST
9272: LIST
9273: LIST
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: PPUSH
9279: CALL_OW 69
9283: PUSH
9284: FOR_IN
9285: IFFALSE 9298
// KillUnit ( i ) ;
9287: LD_VAR 0 3
9291: PPUSH
9292: CALL_OW 66
9296: GO 9284
9298: POP
9299: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
9300: LD_VAR 0 1
9304: PPUSH
9305: CALL_OW 257
9309: PUSH
9310: LD_INT 12
9312: PUSH
9313: LD_INT 17
9315: PUSH
9316: LD_INT 15
9318: PUSH
9319: LD_INT 16
9321: PUSH
9322: EMPTY
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: IN
9328: IFTRUE 9345
9330: PUSH
9331: LD_VAR 0 1
9335: PPUSH
9336: CALL_OW 263
9340: PUSH
9341: LD_INT 5
9343: EQUAL
9344: OR
9345: IFFALSE 9582
// begin tag := 0 ;
9347: LD_ADDR_VAR 0 5
9351: PUSH
9352: LD_INT 0
9354: ST_TO_ADDR
// for i := 1 to 8 do
9355: LD_ADDR_VAR 0 3
9359: PUSH
9360: DOUBLE
9361: LD_INT 1
9363: DEC
9364: ST_TO_ADDR
9365: LD_INT 8
9367: PUSH
9368: FOR_TO
9369: IFFALSE 9403
// if un in mpApePosIndex [ i ] then
9371: LD_VAR 0 1
9375: PUSH
9376: LD_EXP 34
9380: PUSH
9381: LD_VAR 0 3
9385: ARRAY
9386: IN
9387: IFFALSE 9401
// begin tag := i ;
9389: LD_ADDR_VAR 0 5
9393: PUSH
9394: LD_VAR 0 3
9398: ST_TO_ADDR
// break ;
9399: GO 9403
// end ;
9401: GO 9368
9403: POP
9404: POP
// if not tag then
9405: LD_VAR 0 5
9409: NOT
9410: IFFALSE 9414
// exit ;
9412: GO 9857
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
9414: LD_ADDR_VAR 0 7
9418: PUSH
9419: LD_EXP 33
9423: PUSH
9424: LD_EXP 9
9428: PUSH
9429: LD_VAR 0 5
9433: ARRAY
9434: ARRAY
9435: ST_TO_ADDR
// if not area then
9436: LD_VAR 0 7
9440: NOT
9441: IFFALSE 9445
// exit ;
9443: GO 9857
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
9445: LD_INT 14700
9447: PUSH
9448: LD_VAR 0 1
9452: PUSH
9453: LD_INT 5
9455: MOD
9456: PUSH
9457: LD_INT 1
9459: PLUS
9460: PUSH
9461: LD_INT 700
9463: MUL
9464: PLUS
9465: PPUSH
9466: CALL_OW 67
// repeat wait ( 10 ) ;
9470: LD_INT 10
9472: PPUSH
9473: CALL_OW 67
// until not mpBlockRespThread ;
9477: LD_EXP 49
9481: NOT
9482: IFFALSE 9470
// mpBlockRespThread := true ;
9484: LD_ADDR_EXP 49
9488: PUSH
9489: LD_INT 1
9491: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
9492: LD_INT 0
9494: PPUSH
9495: CALL 54901 0 1
// ape := CreateHuman ;
9499: LD_ADDR_VAR 0 4
9503: PUSH
9504: CALL_OW 44
9508: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
9509: LD_ADDR_EXP 34
9513: PUSH
9514: LD_EXP 34
9518: PPUSH
9519: LD_VAR 0 5
9523: PPUSH
9524: LD_EXP 34
9528: PUSH
9529: LD_VAR 0 5
9533: ARRAY
9534: PPUSH
9535: LD_VAR 0 4
9539: PPUSH
9540: CALL 58774 0 2
9544: PPUSH
9545: CALL_OW 1
9549: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
9550: LD_VAR 0 4
9554: PPUSH
9555: LD_VAR 0 7
9559: PPUSH
9560: LD_INT 0
9562: PPUSH
9563: CALL_OW 49
// wait ( 10 ) ;
9567: LD_INT 10
9569: PPUSH
9570: CALL_OW 67
// mpBlockRespThread := false ;
9574: LD_ADDR_EXP 49
9578: PUSH
9579: LD_INT 0
9581: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
9582: LD_VAR 0 1
9586: PPUSH
9587: CALL_OW 247
9591: PUSH
9592: LD_INT 1
9594: EQUAL
9595: IFFALSE 9612
9597: PUSH
9598: LD_VAR 0 1
9602: PPUSH
9603: CALL_OW 248
9607: PUSH
9608: LD_INT 0
9610: GREATER
9611: AND
9612: IFFALSE 9857
// begin if not mpRespawn then
9614: LD_EXP 35
9618: NOT
9619: IFFALSE 9623
// exit ;
9621: GO 9857
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
9623: LD_VAR 0 9
9627: PPUSH
9628: CALL_OW 108
9632: NOT
9633: IFFALSE 9652
9635: PUSH
9636: LD_EXP 5
9640: PPUSH
9641: LD_VAR 0 9
9645: PPUSH
9646: CALL 7877 0 2
9650: NOT
9651: AND
9652: IFFALSE 9656
// exit ;
9654: GO 9857
// side := GetSide ( un ) ;
9656: LD_ADDR_VAR 0 9
9660: PUSH
9661: LD_VAR 0 1
9665: PPUSH
9666: CALL_OW 255
9670: ST_TO_ADDR
// nation := GetNation ( un ) ;
9671: LD_ADDR_VAR 0 8
9675: PUSH
9676: LD_VAR 0 1
9680: PPUSH
9681: CALL_OW 248
9685: ST_TO_ADDR
// class := GetClass ( un ) ;
9686: LD_ADDR_VAR 0 6
9690: PUSH
9691: LD_VAR 0 1
9695: PPUSH
9696: CALL_OW 257
9700: ST_TO_ADDR
// if class > 4 then
9701: LD_VAR 0 6
9705: PUSH
9706: LD_INT 4
9708: GREATER
9709: IFFALSE 9719
// class := 1 ;
9711: LD_ADDR_VAR 0 6
9715: PUSH
9716: LD_INT 1
9718: ST_TO_ADDR
// repeat wait ( 10 ) ;
9719: LD_INT 10
9721: PPUSH
9722: CALL_OW 67
// until not mpBlockRespThread ;
9726: LD_EXP 49
9730: NOT
9731: IFFALSE 9719
// mpBlockRespThread := true ;
9733: LD_ADDR_EXP 49
9737: PUSH
9738: LD_INT 1
9740: ST_TO_ADDR
// uc_side := side ;
9741: LD_ADDR_OWVAR 20
9745: PUSH
9746: LD_VAR 0 9
9750: ST_TO_ADDR
// uc_nation := nation ;
9751: LD_ADDR_OWVAR 21
9755: PUSH
9756: LD_VAR 0 8
9760: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
9761: LD_INT 0
9763: PPUSH
9764: LD_VAR 0 6
9768: PPUSH
9769: LD_INT 2
9771: PPUSH
9772: CALL_OW 380
// un := CreateHuman ;
9776: LD_ADDR_VAR 0 1
9780: PUSH
9781: CALL_OW 44
9785: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
9786: LD_ADDR_EXP 42
9790: PUSH
9791: LD_EXP 42
9795: PPUSH
9796: LD_VAR 0 9
9800: PPUSH
9801: LD_EXP 42
9805: PUSH
9806: LD_VAR 0 9
9810: ARRAY
9811: PPUSH
9812: LD_EXP 42
9816: PUSH
9817: LD_VAR 0 9
9821: ARRAY
9822: PUSH
9823: LD_INT 1
9825: PLUS
9826: PPUSH
9827: LD_VAR 0 1
9831: PPUSH
9832: CALL_OW 1
9836: PPUSH
9837: CALL_OW 1
9841: ST_TO_ADDR
// wait ( 10 ) ;
9842: LD_INT 10
9844: PPUSH
9845: CALL_OW 67
// mpBlockRespThread := false ;
9849: LD_ADDR_EXP 49
9853: PUSH
9854: LD_INT 0
9856: ST_TO_ADDR
// end ; end ;
9857: LD_VAR 0 2
9861: RET
// export function Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ; var i , tag , area , ape ; begin
9862: LD_INT 0
9864: PPUSH
9865: PPUSH
9866: PPUSH
9867: PPUSH
9868: PPUSH
// tag := 0 ;
9869: LD_ADDR_VAR 0 5
9873: PUSH
9874: LD_INT 0
9876: ST_TO_ADDR
// for i := 1 to 8 do
9877: LD_ADDR_VAR 0 4
9881: PUSH
9882: DOUBLE
9883: LD_INT 1
9885: DEC
9886: ST_TO_ADDR
9887: LD_INT 8
9889: PUSH
9890: FOR_TO
9891: IFFALSE 9925
// if un in mpApePosIndex [ i ] then
9893: LD_VAR 0 2
9897: PUSH
9898: LD_EXP 34
9902: PUSH
9903: LD_VAR 0 4
9907: ARRAY
9908: IN
9909: IFFALSE 9923
// begin tag := i ;
9911: LD_ADDR_VAR 0 5
9915: PUSH
9916: LD_VAR 0 4
9920: ST_TO_ADDR
// break ;
9921: GO 9925
// end ;
9923: GO 9890
9925: POP
9926: POP
// if not tag then
9927: LD_VAR 0 5
9931: NOT
9932: IFFALSE 9936
// exit ;
9934: GO 10104
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
9936: LD_ADDR_VAR 0 6
9940: PUSH
9941: LD_EXP 33
9945: PUSH
9946: LD_EXP 9
9950: PUSH
9951: LD_VAR 0 5
9955: ARRAY
9956: ARRAY
9957: ST_TO_ADDR
// if not area then
9958: LD_VAR 0 6
9962: NOT
9963: IFFALSE 9967
// exit ;
9965: GO 10104
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
9967: LD_INT 14700
9969: PUSH
9970: LD_VAR 0 2
9974: PUSH
9975: LD_INT 5
9977: MOD
9978: PUSH
9979: LD_INT 1
9981: PLUS
9982: PUSH
9983: LD_INT 700
9985: MUL
9986: PLUS
9987: PPUSH
9988: CALL_OW 67
// repeat wait ( 10 ) ;
9992: LD_INT 10
9994: PPUSH
9995: CALL_OW 67
// until not mpBlockRespThread ;
9999: LD_EXP 49
10003: NOT
10004: IFFALSE 9992
// mpBlockRespThread := true ;
10006: LD_ADDR_EXP 49
10010: PUSH
10011: LD_INT 1
10013: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
10014: LD_INT 0
10016: PPUSH
10017: CALL 54901 0 1
// ape := CreateHuman ;
10021: LD_ADDR_VAR 0 7
10025: PUSH
10026: CALL_OW 44
10030: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
10031: LD_ADDR_EXP 34
10035: PUSH
10036: LD_EXP 34
10040: PPUSH
10041: LD_VAR 0 5
10045: PPUSH
10046: LD_EXP 34
10050: PUSH
10051: LD_VAR 0 5
10055: ARRAY
10056: PPUSH
10057: LD_VAR 0 7
10061: PPUSH
10062: CALL 58774 0 2
10066: PPUSH
10067: CALL_OW 1
10071: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
10072: LD_VAR 0 7
10076: PPUSH
10077: LD_VAR 0 6
10081: PPUSH
10082: LD_INT 0
10084: PPUSH
10085: CALL_OW 49
// wait ( 10 ) ;
10089: LD_INT 10
10091: PPUSH
10092: CALL_OW 67
// mpBlockRespThread := false ;
10096: LD_ADDR_EXP 49
10100: PUSH
10101: LD_INT 0
10103: ST_TO_ADDR
// end ;
10104: LD_VAR 0 3
10108: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
10109: LD_INT 0
10111: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
10112: LD_VAR 0 1
10116: PPUSH
10117: CALL_OW 266
10121: PUSH
10122: LD_INT 0
10124: PUSH
10125: LD_INT 1
10127: PUSH
10128: EMPTY
10129: LIST
10130: LIST
10131: IN
10132: IFFALSE 10157
// SetBName ( building , @ & GetSide ( building ) ) ;
10134: LD_VAR 0 1
10138: PPUSH
10139: LD_STRING @
10141: PUSH
10142: LD_VAR 0 1
10146: PPUSH
10147: CALL_OW 255
10151: STR
10152: PPUSH
10153: CALL_OW 500
// end ;
10157: LD_VAR 0 2
10161: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
10162: LD_INT 0
10164: PPUSH
10165: PPUSH
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] and GetBType ( building ) in [ b_depot , b_warehouse ] then
10166: LD_EXP 5
10170: PUSH
10171: LD_INT 2
10173: PUSH
10174: LD_INT 8
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: IN
10181: IFFALSE 10205
10183: PUSH
10184: LD_VAR 0 1
10188: PPUSH
10189: CALL_OW 266
10193: PUSH
10194: LD_INT 0
10196: PUSH
10197: LD_INT 1
10199: PUSH
10200: EMPTY
10201: LIST
10202: LIST
10203: IN
10204: AND
10205: IFFALSE 10284
// begin SetSide ( building , oldSide ) ;
10207: LD_VAR 0 1
10211: PPUSH
10212: LD_VAR 0 2
10216: PPUSH
10217: CALL_OW 235
// KillUnit ( building ) ;
10221: LD_VAR 0 1
10225: PPUSH
10226: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
10230: LD_ADDR_VAR 0 5
10234: PUSH
10235: LD_INT 22
10237: PUSH
10238: LD_VAR 0 2
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: PUSH
10247: LD_INT 21
10249: PUSH
10250: LD_INT 1
10252: PUSH
10253: EMPTY
10254: LIST
10255: LIST
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: PPUSH
10261: CALL_OW 69
10265: PUSH
10266: FOR_IN
10267: IFFALSE 10280
// KillUnit ( i ) ;
10269: LD_VAR 0 5
10273: PPUSH
10274: CALL_OW 66
10278: GO 10266
10280: POP
10281: POP
// exit ;
10282: GO 10329
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
10284: LD_VAR 0 1
10288: PPUSH
10289: CALL_OW 266
10293: PUSH
10294: LD_INT 0
10296: PUSH
10297: LD_INT 1
10299: PUSH
10300: EMPTY
10301: LIST
10302: LIST
10303: IN
10304: IFFALSE 10329
// SetBName ( building , @ & GetSide ( building ) ) ;
10306: LD_VAR 0 1
10310: PPUSH
10311: LD_STRING @
10313: PUSH
10314: LD_VAR 0 1
10318: PPUSH
10319: CALL_OW 255
10323: STR
10324: PPUSH
10325: CALL_OW 500
// end ;
10329: LD_VAR 0 4
10333: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
10334: LD_INT 0
10336: PPUSH
10337: PPUSH
10338: PPUSH
// if mpGameType <> GameTypeFamine then
10339: LD_EXP 5
10343: PUSH
10344: LD_INT 5
10346: NONEQUAL
10347: IFFALSE 10351
// exit ;
10349: GO 10585
// for i := 1 to mpGlobalOilDeposits do
10351: LD_ADDR_VAR 0 6
10355: PUSH
10356: DOUBLE
10357: LD_INT 1
10359: DEC
10360: ST_TO_ADDR
10361: LD_EXP 44
10365: PUSH
10366: FOR_TO
10367: IFFALSE 10583
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
10369: LD_EXP 44
10373: PUSH
10374: LD_VAR 0 6
10378: ARRAY
10379: PUSH
10380: LD_INT 1
10382: ARRAY
10383: PPUSH
10384: LD_EXP 44
10388: PUSH
10389: LD_VAR 0 6
10393: ARRAY
10394: PUSH
10395: LD_INT 2
10397: ARRAY
10398: PPUSH
10399: CALL_OW 428
10403: PUSH
10404: LD_VAR 0 1
10408: EQUAL
10409: IFFALSE 10581
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
10411: LD_ADDR_VAR 0 7
10415: PUSH
10416: LD_EXP 44
10420: PUSH
10421: LD_VAR 0 6
10425: ARRAY
10426: PUSH
10427: LD_INT 3
10429: ARRAY
10430: ST_TO_ADDR
// value := value - amount ;
10431: LD_ADDR_VAR 0 7
10435: PUSH
10436: LD_VAR 0 7
10440: PUSH
10441: LD_VAR 0 4
10445: MINUS
10446: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
10447: LD_ADDR_EXP 44
10451: PUSH
10452: LD_EXP 44
10456: PPUSH
10457: LD_VAR 0 6
10461: PPUSH
10462: LD_EXP 44
10466: PUSH
10467: LD_VAR 0 6
10471: ARRAY
10472: PPUSH
10473: LD_INT 3
10475: PPUSH
10476: LD_VAR 0 7
10480: PPUSH
10481: CALL_OW 1
10485: PPUSH
10486: CALL_OW 1
10490: ST_TO_ADDR
// if side in [ your_side , 9 ] then
10491: LD_VAR 0 2
10495: PUSH
10496: LD_OWVAR 2
10500: PUSH
10501: LD_INT 9
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: IN
10508: IFFALSE 10524
// SetUnitDisplayNumber ( building , value ) ;
10510: LD_VAR 0 1
10514: PPUSH
10515: LD_VAR 0 7
10519: PPUSH
10520: CALL_OW 505
// if value <= 0 then
10524: LD_VAR 0 7
10528: PUSH
10529: LD_INT 0
10531: LESSEQUAL
10532: IFFALSE 10581
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
10534: LD_EXP 44
10538: PUSH
10539: LD_VAR 0 6
10543: ARRAY
10544: PUSH
10545: LD_INT 1
10547: ARRAY
10548: PPUSH
10549: LD_EXP 44
10553: PUSH
10554: LD_VAR 0 6
10558: ARRAY
10559: PUSH
10560: LD_INT 2
10562: ARRAY
10563: PPUSH
10564: CALL_OW 63
// KillUnit ( building ) ;
10568: LD_VAR 0 1
10572: PPUSH
10573: CALL_OW 66
// exit ;
10577: POP
10578: POP
10579: GO 10585
// end ; end ; end ;
10581: GO 10366
10583: POP
10584: POP
// end ;
10585: LD_VAR 0 5
10589: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
10590: LD_INT 0
10592: PPUSH
10593: PPUSH
10594: PPUSH
// if mpGameType <> GameTypeFamine then
10595: LD_EXP 5
10599: PUSH
10600: LD_INT 5
10602: NONEQUAL
10603: IFFALSE 10607
// exit ;
10605: GO 10841
// for i := 1 to mpGlobalSibDeposits do
10607: LD_ADDR_VAR 0 6
10611: PUSH
10612: DOUBLE
10613: LD_INT 1
10615: DEC
10616: ST_TO_ADDR
10617: LD_EXP 45
10621: PUSH
10622: FOR_TO
10623: IFFALSE 10839
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
10625: LD_EXP 45
10629: PUSH
10630: LD_VAR 0 6
10634: ARRAY
10635: PUSH
10636: LD_INT 1
10638: ARRAY
10639: PPUSH
10640: LD_EXP 45
10644: PUSH
10645: LD_VAR 0 6
10649: ARRAY
10650: PUSH
10651: LD_INT 2
10653: ARRAY
10654: PPUSH
10655: CALL_OW 428
10659: PUSH
10660: LD_VAR 0 1
10664: EQUAL
10665: IFFALSE 10837
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
10667: LD_ADDR_VAR 0 7
10671: PUSH
10672: LD_EXP 45
10676: PUSH
10677: LD_VAR 0 6
10681: ARRAY
10682: PUSH
10683: LD_INT 3
10685: ARRAY
10686: ST_TO_ADDR
// value := value - amount ;
10687: LD_ADDR_VAR 0 7
10691: PUSH
10692: LD_VAR 0 7
10696: PUSH
10697: LD_VAR 0 4
10701: MINUS
10702: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
10703: LD_ADDR_EXP 45
10707: PUSH
10708: LD_EXP 45
10712: PPUSH
10713: LD_VAR 0 6
10717: PPUSH
10718: LD_EXP 45
10722: PUSH
10723: LD_VAR 0 6
10727: ARRAY
10728: PPUSH
10729: LD_INT 3
10731: PPUSH
10732: LD_VAR 0 7
10736: PPUSH
10737: CALL_OW 1
10741: PPUSH
10742: CALL_OW 1
10746: ST_TO_ADDR
// if side in [ your_side , 9 ] then
10747: LD_VAR 0 2
10751: PUSH
10752: LD_OWVAR 2
10756: PUSH
10757: LD_INT 9
10759: PUSH
10760: EMPTY
10761: LIST
10762: LIST
10763: IN
10764: IFFALSE 10780
// SetUnitDisplayNumber ( building , value ) ;
10766: LD_VAR 0 1
10770: PPUSH
10771: LD_VAR 0 7
10775: PPUSH
10776: CALL_OW 505
// if value <= 0 then
10780: LD_VAR 0 7
10784: PUSH
10785: LD_INT 0
10787: LESSEQUAL
10788: IFFALSE 10837
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
10790: LD_EXP 45
10794: PUSH
10795: LD_VAR 0 6
10799: ARRAY
10800: PUSH
10801: LD_INT 1
10803: ARRAY
10804: PPUSH
10805: LD_EXP 45
10809: PUSH
10810: LD_VAR 0 6
10814: ARRAY
10815: PUSH
10816: LD_INT 2
10818: ARRAY
10819: PPUSH
10820: CALL_OW 63
// KillUnit ( building ) ;
10824: LD_VAR 0 1
10828: PPUSH
10829: CALL_OW 66
// exit ;
10833: POP
10834: POP
10835: GO 10841
// end ; end ; end ;
10837: GO 10622
10839: POP
10840: POP
// end ;
10841: LD_VAR 0 5
10845: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
10846: LD_INT 0
10848: PPUSH
10849: PPUSH
// side := GetSide ( factory ) ;
10850: LD_ADDR_VAR 0 7
10854: PUSH
10855: LD_VAR 0 1
10859: PPUSH
10860: CALL_OW 255
10864: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
10865: LD_VAR 0 5
10869: PUSH
10870: LD_INT 81
10872: EQUAL
10873: IFFALSE 10911
10875: PUSH
10876: LD_INT 22
10878: PUSH
10879: LD_VAR 0 7
10883: PUSH
10884: EMPTY
10885: LIST
10886: LIST
10887: PUSH
10888: LD_INT 34
10890: PUSH
10891: LD_INT 81
10893: PUSH
10894: EMPTY
10895: LIST
10896: LIST
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: PPUSH
10902: CALL_OW 69
10906: PUSH
10907: LD_INT 0
10909: GREATER
10910: AND
10911: IFFALSE 10944
// begin ComCancel ( factory ) ;
10913: LD_VAR 0 1
10917: PPUSH
10918: CALL_OW 127
// if side = your_side then
10922: LD_VAR 0 7
10926: PUSH
10927: LD_OWVAR 2
10931: EQUAL
10932: IFFALSE 10944
// HintSpec ( VehLimit , 2 ) ;
10934: LD_STRING VehLimit
10936: PPUSH
10937: LD_INT 2
10939: PPUSH
10940: CALL_OW 338
// end ; end ;
10944: LD_VAR 0 6
10948: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
10949: LD_INT 0
10951: PPUSH
10952: PPUSH
10953: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
10954: LD_VAR 0 1
10958: PPUSH
10959: CALL_OW 264
10963: PUSH
10964: LD_INT 81
10966: EQUAL
10967: IFFALSE 10984
10969: PUSH
10970: LD_VAR 0 1
10974: PPUSH
10975: CALL_OW 263
10979: PUSH
10980: LD_INT 1
10982: EQUAL
10983: AND
10984: IFFALSE 11264
// begin for i := 1 to Count ( minersList ) do
10986: LD_ADDR_VAR 0 6
10990: PUSH
10991: DOUBLE
10992: LD_INT 1
10994: DEC
10995: ST_TO_ADDR
10996: LD_EXP 59
11000: PPUSH
11001: CALL 22798 0 1
11005: PUSH
11006: FOR_TO
11007: IFFALSE 11125
// begin if minersList [ i ] = oldId then
11009: LD_EXP 59
11013: PUSH
11014: LD_VAR 0 6
11018: ARRAY
11019: PUSH
11020: LD_VAR 0 2
11024: EQUAL
11025: IFFALSE 11123
// begin for j := 1 to minerMinesList [ i ] do
11027: LD_ADDR_VAR 0 7
11031: PUSH
11032: DOUBLE
11033: LD_INT 1
11035: DEC
11036: ST_TO_ADDR
11037: LD_EXP 60
11041: PUSH
11042: LD_VAR 0 6
11046: ARRAY
11047: PUSH
11048: FOR_TO
11049: IFFALSE 11099
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
11051: LD_EXP 60
11055: PUSH
11056: LD_VAR 0 6
11060: ARRAY
11061: PUSH
11062: LD_VAR 0 7
11066: ARRAY
11067: PUSH
11068: LD_INT 1
11070: ARRAY
11071: PPUSH
11072: LD_EXP 60
11076: PUSH
11077: LD_VAR 0 6
11081: ARRAY
11082: PUSH
11083: LD_VAR 0 7
11087: ARRAY
11088: PUSH
11089: LD_INT 2
11091: ARRAY
11092: PPUSH
11093: CALL_OW 612
11097: GO 11048
11099: POP
11100: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
11101: LD_ADDR_EXP 60
11105: PUSH
11106: LD_EXP 60
11110: PPUSH
11111: LD_VAR 0 6
11115: PPUSH
11116: CALL_OW 3
11120: ST_TO_ADDR
// break ;
11121: GO 11125
// end ; end ;
11123: GO 11006
11125: POP
11126: POP
// minersList := minersList diff oldId ;
11127: LD_ADDR_EXP 59
11131: PUSH
11132: LD_EXP 59
11136: PUSH
11137: LD_VAR 0 2
11141: DIFF
11142: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
11143: LD_INT 22
11145: PUSH
11146: LD_VAR 0 4
11150: PPUSH
11151: CALL_OW 255
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: PUSH
11160: LD_INT 34
11162: PUSH
11163: LD_INT 81
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: PPUSH
11174: CALL_OW 69
11178: PUSH
11179: LD_INT 1
11181: GREATER
11182: IFFALSE 11209
// begin ComExit ( unit ) ;
11184: LD_VAR 0 4
11188: PPUSH
11189: CALL 59172 0 1
// SetSide ( newId , oldSide ) ;
11193: LD_VAR 0 1
11197: PPUSH
11198: LD_VAR 0 3
11202: PPUSH
11203: CALL_OW 235
// exit ;
11207: GO 11264
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
11209: LD_ADDR_EXP 59
11213: PUSH
11214: LD_EXP 59
11218: PPUSH
11219: LD_EXP 59
11223: PUSH
11224: LD_INT 1
11226: PLUS
11227: PPUSH
11228: LD_VAR 0 1
11232: PPUSH
11233: CALL_OW 1
11237: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
11238: LD_ADDR_EXP 60
11242: PUSH
11243: LD_EXP 60
11247: PPUSH
11248: LD_EXP 60
11252: PUSH
11253: LD_INT 1
11255: PLUS
11256: PPUSH
11257: EMPTY
11258: PPUSH
11259: CALL_OW 1
11263: ST_TO_ADDR
// end ; end ; end_of_file
11264: LD_VAR 0 5
11268: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
11269: LD_EXP 41
11273: IFFALSE 11281
11275: PUSH
11276: CALL 11491 0 0
11280: AND
11281: IFFALSE 11289
11283: PUSH
11284: LD_OWVAR 4
11288: AND
11289: IFFALSE 11488
11291: GO 11293
11293: DISABLE
11294: LD_INT 0
11296: PPUSH
11297: PPUSH
// begin canWin := false ;
11298: LD_ADDR_VAR 0 2
11302: PUSH
11303: LD_INT 0
11305: ST_TO_ADDR
// if not HasPower ( your_side ) then
11306: LD_OWVAR 2
11310: PPUSH
11311: CALL 11533 0 1
11315: NOT
11316: IFFALSE 11327
// begin Multiplayer_Loose_Message ;
11318: CALL_OW 521
// enable ( mpLose ) ;
11322: LD_INT 102
11324: ENABLE_MARKED
// end else
11325: GO 11488
// begin canWin := true ;
11327: LD_ADDR_VAR 0 2
11331: PUSH
11332: LD_INT 1
11334: ST_TO_ADDR
// for i := 1 to 8 do
11335: LD_ADDR_VAR 0 1
11339: PUSH
11340: DOUBLE
11341: LD_INT 1
11343: DEC
11344: ST_TO_ADDR
11345: LD_INT 8
11347: PUSH
11348: FOR_TO
11349: IFFALSE 11474
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
11351: LD_EXP 9
11355: PUSH
11356: LD_VAR 0 1
11360: ARRAY
11361: IFFALSE 11374
11363: PUSH
11364: LD_VAR 0 1
11368: PPUSH
11369: CALL_OW 108
11373: AND
11374: IFFALSE 11388
11376: PUSH
11377: LD_VAR 0 1
11381: PUSH
11382: LD_OWVAR 2
11386: NONEQUAL
11387: AND
11388: IFFALSE 11472
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
11390: LD_EXP 10
11394: PUSH
11395: LD_VAR 0 1
11399: ARRAY
11400: NOT
11401: IFTRUE 11449
11403: PUSH
11404: LD_EXP 10
11408: PUSH
11409: LD_VAR 0 1
11413: ARRAY
11414: PUSH
11415: LD_EXP 10
11419: PUSH
11420: LD_OWVAR 2
11424: ARRAY
11425: NONEQUAL
11426: IFFALSE 11448
11428: PUSH
11429: LD_OWVAR 2
11433: PPUSH
11434: LD_VAR 0 1
11438: PPUSH
11439: CALL_OW 81
11443: PUSH
11444: LD_INT 1
11446: NONEQUAL
11447: AND
11448: OR
11449: IFFALSE 11472
// if HasPower ( i ) then
11451: LD_VAR 0 1
11455: PPUSH
11456: CALL 11533 0 1
11460: IFFALSE 11472
// begin canWin := false ;
11462: LD_ADDR_VAR 0 2
11466: PUSH
11467: LD_INT 0
11469: ST_TO_ADDR
// break ;
11470: GO 11474
// end ;
11472: GO 11348
11474: POP
11475: POP
// if canWin then
11476: LD_VAR 0 2
11480: IFFALSE 11487
// enable ( mpWin ) else
11482: LD_INT 101
11484: ENABLE_MARKED
11485: GO 11488
// enable ;
11487: ENABLE
// end ; end ;
11488: PPOPN 2
11490: END
// function CanWinLoose ; begin
11491: LD_INT 0
11493: PPUSH
// result := true ;
11494: LD_ADDR_VAR 0 1
11498: PUSH
11499: LD_INT 1
11501: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
11502: CALL_OW 531
11506: IFFALSE 11518
11508: PUSH
11509: CALL_OW 519
11513: PUSH
11514: LD_INT 1
11516: GREATER
11517: AND
11518: IFFALSE 11528
// result := false ;
11520: LD_ADDR_VAR 0 1
11524: PUSH
11525: LD_INT 0
11527: ST_TO_ADDR
// end ;
11528: LD_VAR 0 1
11532: RET
// function HasPower ( i ) ; begin
11533: LD_INT 0
11535: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
11536: LD_ADDR_VAR 0 2
11540: PUSH
11541: LD_INT 22
11543: PUSH
11544: LD_VAR 0 1
11548: PUSH
11549: EMPTY
11550: LIST
11551: LIST
11552: PUSH
11553: LD_INT 2
11555: PUSH
11556: LD_INT 21
11558: PUSH
11559: LD_INT 1
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: PUSH
11566: LD_INT 33
11568: PUSH
11569: LD_INT 3
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: PUSH
11576: LD_INT 33
11578: PUSH
11579: LD_INT 5
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: PUSH
11586: EMPTY
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: PUSH
11592: EMPTY
11593: LIST
11594: LIST
11595: PPUSH
11596: CALL_OW 69
11600: ST_TO_ADDR
// end ; end_of_file
11601: LD_VAR 0 2
11605: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
11606: LD_EXP 41
11610: IFFALSE 11653
11612: GO 11614
11614: DISABLE
11615: LD_INT 0
11617: PPUSH
// begin for i := 1 to 8 do
11618: LD_ADDR_VAR 0 1
11622: PUSH
11623: DOUBLE
11624: LD_INT 1
11626: DEC
11627: ST_TO_ADDR
11628: LD_INT 8
11630: PUSH
11631: FOR_TO
11632: IFFALSE 11651
// SetRestrict ( b_depot , i , state_disabled ) ;
11634: LD_INT 0
11636: PPUSH
11637: LD_VAR 0 1
11641: PPUSH
11642: LD_INT 0
11644: PPUSH
11645: CALL_OW 324
11649: GO 11631
11651: POP
11652: POP
// end ;
11653: PPOPN 1
11655: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
11656: LD_EXP 41
11660: IFFALSE 11668
11662: PUSH
11663: CALL 11878 0 0
11667: AND
11668: IFFALSE 11676
11670: PUSH
11671: LD_OWVAR 4
11675: AND
11676: IFFALSE 11875
11678: GO 11680
11680: DISABLE
11681: LD_INT 0
11683: PPUSH
11684: PPUSH
// begin canWin := false ;
11685: LD_ADDR_VAR 0 2
11689: PUSH
11690: LD_INT 0
11692: ST_TO_ADDR
// if not HasPower ( your_side ) then
11693: LD_OWVAR 2
11697: PPUSH
11698: CALL 11920 0 1
11702: NOT
11703: IFFALSE 11714
// begin Multiplayer_Loose_Message ;
11705: CALL_OW 521
// enable ( mpLose ) ;
11709: LD_INT 102
11711: ENABLE_MARKED
// end else
11712: GO 11875
// begin canWin := true ;
11714: LD_ADDR_VAR 0 2
11718: PUSH
11719: LD_INT 1
11721: ST_TO_ADDR
// for i := 1 to 8 do
11722: LD_ADDR_VAR 0 1
11726: PUSH
11727: DOUBLE
11728: LD_INT 1
11730: DEC
11731: ST_TO_ADDR
11732: LD_INT 8
11734: PUSH
11735: FOR_TO
11736: IFFALSE 11861
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
11738: LD_EXP 9
11742: PUSH
11743: LD_VAR 0 1
11747: ARRAY
11748: IFFALSE 11761
11750: PUSH
11751: LD_VAR 0 1
11755: PPUSH
11756: CALL_OW 108
11760: AND
11761: IFFALSE 11775
11763: PUSH
11764: LD_VAR 0 1
11768: PUSH
11769: LD_OWVAR 2
11773: NONEQUAL
11774: AND
11775: IFFALSE 11859
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
11777: LD_EXP 10
11781: PUSH
11782: LD_VAR 0 1
11786: ARRAY
11787: NOT
11788: IFTRUE 11836
11790: PUSH
11791: LD_EXP 10
11795: PUSH
11796: LD_VAR 0 1
11800: ARRAY
11801: PUSH
11802: LD_EXP 10
11806: PUSH
11807: LD_OWVAR 2
11811: ARRAY
11812: NONEQUAL
11813: IFFALSE 11835
11815: PUSH
11816: LD_OWVAR 2
11820: PPUSH
11821: LD_VAR 0 1
11825: PPUSH
11826: CALL_OW 81
11830: PUSH
11831: LD_INT 1
11833: NONEQUAL
11834: AND
11835: OR
11836: IFFALSE 11859
// if HasPower ( i ) then
11838: LD_VAR 0 1
11842: PPUSH
11843: CALL 11920 0 1
11847: IFFALSE 11859
// begin canWin := false ;
11849: LD_ADDR_VAR 0 2
11853: PUSH
11854: LD_INT 0
11856: ST_TO_ADDR
// break ;
11857: GO 11861
// end ;
11859: GO 11735
11861: POP
11862: POP
// if canWin then
11863: LD_VAR 0 2
11867: IFFALSE 11874
// enable ( mpWin ) else
11869: LD_INT 101
11871: ENABLE_MARKED
11872: GO 11875
// enable ;
11874: ENABLE
// end ; end ;
11875: PPOPN 2
11877: END
// function CanWinLoose ; begin
11878: LD_INT 0
11880: PPUSH
// result := true ;
11881: LD_ADDR_VAR 0 1
11885: PUSH
11886: LD_INT 1
11888: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
11889: CALL_OW 531
11893: IFFALSE 11905
11895: PUSH
11896: CALL_OW 519
11900: PUSH
11901: LD_INT 1
11903: GREATER
11904: AND
11905: IFFALSE 11915
// result := false ;
11907: LD_ADDR_VAR 0 1
11911: PUSH
11912: LD_INT 0
11914: ST_TO_ADDR
// end ;
11915: LD_VAR 0 1
11919: RET
// function HasPower ( i ) ; begin
11920: LD_INT 0
11922: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
11923: LD_INT 22
11925: PUSH
11926: LD_VAR 0 1
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: PUSH
11935: LD_INT 2
11937: PUSH
11938: LD_INT 30
11940: PUSH
11941: LD_INT 0
11943: PUSH
11944: EMPTY
11945: LIST
11946: LIST
11947: PUSH
11948: LD_INT 30
11950: PUSH
11951: LD_INT 1
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: LIST
11962: PUSH
11963: EMPTY
11964: LIST
11965: LIST
11966: PPUSH
11967: CALL_OW 69
11971: NOT
11972: IFFALSE 11976
// exit ;
11974: GO 12041
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
11976: LD_ADDR_VAR 0 2
11980: PUSH
11981: LD_INT 22
11983: PUSH
11984: LD_VAR 0 1
11988: PUSH
11989: EMPTY
11990: LIST
11991: LIST
11992: PUSH
11993: LD_INT 2
11995: PUSH
11996: LD_INT 21
11998: PUSH
11999: LD_INT 1
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: PUSH
12006: LD_INT 33
12008: PUSH
12009: LD_INT 3
12011: PUSH
12012: EMPTY
12013: LIST
12014: LIST
12015: PUSH
12016: LD_INT 33
12018: PUSH
12019: LD_INT 5
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: PUSH
12026: EMPTY
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: PUSH
12032: EMPTY
12033: LIST
12034: LIST
12035: PPUSH
12036: CALL_OW 69
12040: ST_TO_ADDR
// end ; end_of_file
12041: LD_VAR 0 2
12045: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvivalHardcore do var i ;
12046: LD_EXP 41
12050: IFFALSE 12093
12052: GO 12054
12054: DISABLE
12055: LD_INT 0
12057: PPUSH
// begin for i := 1 to 8 do
12058: LD_ADDR_VAR 0 1
12062: PUSH
12063: DOUBLE
12064: LD_INT 1
12066: DEC
12067: ST_TO_ADDR
12068: LD_INT 8
12070: PUSH
12071: FOR_TO
12072: IFFALSE 12091
// SetRestrict ( b_depot , i , state_disabled ) ;
12074: LD_INT 0
12076: PPUSH
12077: LD_VAR 0 1
12081: PPUSH
12082: LD_INT 0
12084: PPUSH
12085: CALL_OW 324
12089: GO 12071
12091: POP
12092: POP
// end ;
12093: PPOPN 1
12095: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvivalHardcore do var i , canWin ;
12096: LD_EXP 41
12100: IFFALSE 12108
12102: PUSH
12103: CALL 12318 0 0
12107: AND
12108: IFFALSE 12116
12110: PUSH
12111: LD_OWVAR 4
12115: AND
12116: IFFALSE 12315
12118: GO 12120
12120: DISABLE
12121: LD_INT 0
12123: PPUSH
12124: PPUSH
// begin canWin := false ;
12125: LD_ADDR_VAR 0 2
12129: PUSH
12130: LD_INT 0
12132: ST_TO_ADDR
// if not HasPower ( your_side ) then
12133: LD_OWVAR 2
12137: PPUSH
12138: CALL 12360 0 1
12142: NOT
12143: IFFALSE 12154
// begin Multiplayer_Loose_Message ;
12145: CALL_OW 521
// enable ( mpLose ) ;
12149: LD_INT 102
12151: ENABLE_MARKED
// end else
12152: GO 12315
// begin canWin := true ;
12154: LD_ADDR_VAR 0 2
12158: PUSH
12159: LD_INT 1
12161: ST_TO_ADDR
// for i := 1 to 8 do
12162: LD_ADDR_VAR 0 1
12166: PUSH
12167: DOUBLE
12168: LD_INT 1
12170: DEC
12171: ST_TO_ADDR
12172: LD_INT 8
12174: PUSH
12175: FOR_TO
12176: IFFALSE 12301
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
12178: LD_EXP 9
12182: PUSH
12183: LD_VAR 0 1
12187: ARRAY
12188: IFFALSE 12201
12190: PUSH
12191: LD_VAR 0 1
12195: PPUSH
12196: CALL_OW 108
12200: AND
12201: IFFALSE 12215
12203: PUSH
12204: LD_VAR 0 1
12208: PUSH
12209: LD_OWVAR 2
12213: NONEQUAL
12214: AND
12215: IFFALSE 12299
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
12217: LD_EXP 10
12221: PUSH
12222: LD_VAR 0 1
12226: ARRAY
12227: NOT
12228: IFTRUE 12276
12230: PUSH
12231: LD_EXP 10
12235: PUSH
12236: LD_VAR 0 1
12240: ARRAY
12241: PUSH
12242: LD_EXP 10
12246: PUSH
12247: LD_OWVAR 2
12251: ARRAY
12252: NONEQUAL
12253: IFFALSE 12275
12255: PUSH
12256: LD_OWVAR 2
12260: PPUSH
12261: LD_VAR 0 1
12265: PPUSH
12266: CALL_OW 81
12270: PUSH
12271: LD_INT 1
12273: NONEQUAL
12274: AND
12275: OR
12276: IFFALSE 12299
// if HasPower ( i ) then
12278: LD_VAR 0 1
12282: PPUSH
12283: CALL 12360 0 1
12287: IFFALSE 12299
// begin canWin := false ;
12289: LD_ADDR_VAR 0 2
12293: PUSH
12294: LD_INT 0
12296: ST_TO_ADDR
// break ;
12297: GO 12301
// end ;
12299: GO 12175
12301: POP
12302: POP
// if canWin then
12303: LD_VAR 0 2
12307: IFFALSE 12314
// enable ( mpWin ) else
12309: LD_INT 101
12311: ENABLE_MARKED
12312: GO 12315
// enable ;
12314: ENABLE
// end ; end ;
12315: PPOPN 2
12317: END
// function CanWinLoose ; begin
12318: LD_INT 0
12320: PPUSH
// result := true ;
12321: LD_ADDR_VAR 0 1
12325: PUSH
12326: LD_INT 1
12328: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
12329: CALL_OW 531
12333: IFFALSE 12345
12335: PUSH
12336: CALL_OW 519
12340: PUSH
12341: LD_INT 1
12343: GREATER
12344: AND
12345: IFFALSE 12355
// result := false ;
12347: LD_ADDR_VAR 0 1
12351: PUSH
12352: LD_INT 0
12354: ST_TO_ADDR
// end ;
12355: LD_VAR 0 1
12359: RET
// function HasPower ( i ) ; begin
12360: LD_INT 0
12362: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
12363: LD_INT 22
12365: PUSH
12366: LD_VAR 0 1
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: PUSH
12375: LD_INT 2
12377: PUSH
12378: LD_INT 30
12380: PUSH
12381: LD_INT 0
12383: PUSH
12384: EMPTY
12385: LIST
12386: LIST
12387: PUSH
12388: LD_INT 30
12390: PUSH
12391: LD_INT 1
12393: PUSH
12394: EMPTY
12395: LIST
12396: LIST
12397: PUSH
12398: EMPTY
12399: LIST
12400: LIST
12401: LIST
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: PPUSH
12407: CALL_OW 69
12411: NOT
12412: IFFALSE 12416
// exit ;
12414: GO 12481
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
12416: LD_ADDR_VAR 0 2
12420: PUSH
12421: LD_INT 22
12423: PUSH
12424: LD_VAR 0 1
12428: PUSH
12429: EMPTY
12430: LIST
12431: LIST
12432: PUSH
12433: LD_INT 2
12435: PUSH
12436: LD_INT 21
12438: PUSH
12439: LD_INT 1
12441: PUSH
12442: EMPTY
12443: LIST
12444: LIST
12445: PUSH
12446: LD_INT 33
12448: PUSH
12449: LD_INT 3
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: PUSH
12456: LD_INT 33
12458: PUSH
12459: LD_INT 5
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: PPUSH
12476: CALL_OW 69
12480: ST_TO_ADDR
// end ; end_of_file
12481: LD_VAR 0 2
12485: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
12486: LD_VAR 0 1
12490: PUSH
12491: LD_INT 200
12493: DOUBLE
12494: GREATEREQUAL
12495: IFFALSE 12503
12497: LD_INT 299
12499: DOUBLE
12500: LESSEQUAL
12501: IFTRUE 12505
12503: GO 12537
12505: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
12506: LD_VAR 0 1
12510: PPUSH
12511: LD_VAR 0 2
12515: PPUSH
12516: LD_VAR 0 3
12520: PPUSH
12521: LD_VAR 0 4
12525: PPUSH
12526: LD_VAR 0 5
12530: PPUSH
12531: CALL 13399 0 5
12535: GO 12614
12537: LD_INT 300
12539: DOUBLE
12540: GREATEREQUAL
12541: IFFALSE 12549
12543: LD_INT 399
12545: DOUBLE
12546: LESSEQUAL
12547: IFTRUE 12551
12549: GO 12613
12551: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
12552: LD_VAR 0 1
12556: PPUSH
12557: LD_VAR 0 2
12561: PPUSH
12562: LD_VAR 0 3
12566: PPUSH
12567: LD_VAR 0 4
12571: PPUSH
12572: LD_VAR 0 5
12576: PPUSH
12577: LD_VAR 0 6
12581: PPUSH
12582: LD_VAR 0 7
12586: PPUSH
12587: LD_VAR 0 8
12591: PPUSH
12592: LD_VAR 0 9
12596: PPUSH
12597: LD_VAR 0 10
12601: PPUSH
12602: LD_VAR 0 11
12606: PPUSH
12607: CALL 19724 0 11
12611: GO 12614
12613: POP
// end ;
12614: PPOPN 11
12616: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
12617: LD_VAR 0 1
12621: PPUSH
12622: LD_VAR 0 2
12626: PPUSH
12627: LD_VAR 0 3
12631: PPUSH
12632: LD_VAR 0 4
12636: PPUSH
12637: LD_VAR 0 5
12641: PPUSH
12642: CALL 12699 0 5
// end ; end_of_file
12646: PPOPN 5
12648: END
// export function SOS_UnitDestroyed ( un ) ; begin
12649: LD_INT 0
12651: PPUSH
// ComRadiation ( un ) ;
12652: LD_VAR 0 1
12656: PPUSH
12657: CALL 13819 0 1
// end ;
12661: LD_VAR 0 2
12665: RET
// export function SOS_UnitKamikazed ( un ) ; begin
12666: LD_INT 0
12668: PPUSH
// ComRadiation ( un ) ;
12669: LD_VAR 0 1
12673: PPUSH
12674: CALL 13819 0 1
// end ;
12678: LD_VAR 0 2
12682: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
12683: LD_INT 0
12685: PPUSH
// end ;
12686: LD_VAR 0 4
12690: RET
// export function SOS_Command ( cmd ) ; begin
12691: LD_INT 0
12693: PPUSH
// end ;
12694: LD_VAR 0 2
12698: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
12699: LD_INT 0
12701: PPUSH
// end ;
12702: LD_VAR 0 6
12706: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
12707: LD_INT 0
12709: PPUSH
12710: PPUSH
12711: PPUSH
12712: PPUSH
12713: PPUSH
// if not vehicle or not factory then
12714: LD_VAR 0 1
12718: NOT
12719: IFTRUE 12728
12721: PUSH
12722: LD_VAR 0 2
12726: NOT
12727: OR
12728: IFFALSE 12732
// exit ;
12730: GO 13394
// weapon := GetWeapon ( vehicle ) ;
12732: LD_ADDR_VAR 0 7
12736: PUSH
12737: LD_VAR 0 1
12741: PPUSH
12742: CALL_OW 264
12746: ST_TO_ADDR
// if weapon = ar_miner then
12747: LD_VAR 0 7
12751: PUSH
12752: LD_INT 81
12754: EQUAL
12755: IFFALSE 12812
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
12757: LD_ADDR_EXP 59
12761: PUSH
12762: LD_EXP 59
12766: PPUSH
12767: LD_EXP 59
12771: PUSH
12772: LD_INT 1
12774: PLUS
12775: PPUSH
12776: LD_VAR 0 1
12780: PPUSH
12781: CALL_OW 1
12785: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
12786: LD_ADDR_EXP 60
12790: PUSH
12791: LD_EXP 60
12795: PPUSH
12796: LD_EXP 60
12800: PUSH
12801: LD_INT 1
12803: PLUS
12804: PPUSH
12805: EMPTY
12806: PPUSH
12807: CALL_OW 1
12811: ST_TO_ADDR
// end ; if not factoryWaypoints then
12812: LD_EXP 62
12816: NOT
12817: IFFALSE 12821
// exit ;
12819: GO 13394
// for i := 1 to Count ( factoryWaypoints ) do
12821: LD_ADDR_VAR 0 4
12825: PUSH
12826: DOUBLE
12827: LD_INT 1
12829: DEC
12830: ST_TO_ADDR
12831: LD_EXP 62
12835: PPUSH
12836: CALL 22798 0 1
12840: PUSH
12841: FOR_TO
12842: IFFALSE 13392
// if factoryWaypoints [ i ] [ 2 ] = factory then
12844: LD_EXP 62
12848: PUSH
12849: LD_VAR 0 4
12853: ARRAY
12854: PUSH
12855: LD_INT 2
12857: ARRAY
12858: PUSH
12859: LD_VAR 0 2
12863: EQUAL
12864: IFFALSE 13390
// begin if GetControl ( vehicle ) = control_manual then
12866: LD_VAR 0 1
12870: PPUSH
12871: CALL_OW 263
12875: PUSH
12876: LD_INT 1
12878: EQUAL
12879: IFFALSE 13243
// begin driver := IsDrivenBy ( vehicle ) ;
12881: LD_ADDR_VAR 0 5
12885: PUSH
12886: LD_VAR 0 1
12890: PPUSH
12891: CALL_OW 311
12895: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
12896: LD_VAR 0 5
12900: PUSH
12901: LD_EXP 63
12905: IN
12906: IFTRUE 12920
12908: PUSH
12909: LD_VAR 0 1
12913: PUSH
12914: LD_EXP 63
12918: IN
12919: OR
12920: IFFALSE 12926
// exit ;
12922: POP
12923: POP
12924: GO 13394
// if not HasTask ( driver ) then
12926: LD_VAR 0 5
12930: PPUSH
12931: CALL_OW 314
12935: NOT
12936: IFFALSE 13241
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
12938: LD_ADDR_EXP 63
12942: PUSH
12943: LD_EXP 63
12947: PPUSH
12948: LD_VAR 0 5
12952: PPUSH
12953: CALL 58774 0 2
12957: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
12958: LD_ADDR_EXP 63
12962: PUSH
12963: LD_EXP 63
12967: PPUSH
12968: LD_VAR 0 1
12972: PPUSH
12973: CALL 58774 0 2
12977: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
12978: LD_ADDR_VAR 0 6
12982: PUSH
12983: LD_EXP 62
12987: PUSH
12988: LD_VAR 0 4
12992: ARRAY
12993: PUSH
12994: LD_INT 3
12996: ARRAY
12997: PPUSH
12998: LD_EXP 62
13002: PUSH
13003: LD_VAR 0 4
13007: ARRAY
13008: PUSH
13009: LD_INT 4
13011: ARRAY
13012: PPUSH
13013: CALL_OW 428
13017: ST_TO_ADDR
// if hex then
13018: LD_VAR 0 6
13022: IFFALSE 13040
// ComMoveUnit ( driver , hex ) else
13024: LD_VAR 0 5
13028: PPUSH
13029: LD_VAR 0 6
13033: PPUSH
13034: CALL_OW 112
13038: GO 13124
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
13040: LD_VAR 0 1
13044: PPUSH
13045: LD_EXP 62
13049: PUSH
13050: LD_VAR 0 4
13054: ARRAY
13055: PUSH
13056: LD_INT 3
13058: ARRAY
13059: PPUSH
13060: LD_EXP 62
13064: PUSH
13065: LD_VAR 0 4
13069: ARRAY
13070: PUSH
13071: LD_INT 4
13073: ARRAY
13074: PPUSH
13075: CALL_OW 297
13079: PUSH
13080: LD_INT 0
13082: GREATER
13083: IFFALSE 13124
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
13085: LD_VAR 0 5
13089: PPUSH
13090: LD_EXP 62
13094: PUSH
13095: LD_VAR 0 4
13099: ARRAY
13100: PUSH
13101: LD_INT 3
13103: ARRAY
13104: PPUSH
13105: LD_EXP 62
13109: PUSH
13110: LD_VAR 0 4
13114: ARRAY
13115: PUSH
13116: LD_INT 4
13118: ARRAY
13119: PPUSH
13120: CALL_OW 111
// AddComExitVehicle ( driver ) ;
13124: LD_VAR 0 5
13128: PPUSH
13129: CALL_OW 181
// if Multiplayer then
13133: LD_OWVAR 4
13137: IFFALSE 13186
// begin repeat wait ( 10 ) ;
13139: LD_INT 10
13141: PPUSH
13142: CALL_OW 67
// until not IsInUnit ( driver ) ;
13146: LD_VAR 0 5
13150: PPUSH
13151: CALL_OW 310
13155: NOT
13156: IFFALSE 13139
// if not HasTask ( driver ) then
13158: LD_VAR 0 5
13162: PPUSH
13163: CALL_OW 314
13167: NOT
13168: IFFALSE 13184
// ComEnterUnit ( driver , factory ) ;
13170: LD_VAR 0 5
13174: PPUSH
13175: LD_VAR 0 2
13179: PPUSH
13180: CALL_OW 120
// end else
13184: GO 13200
// AddComEnterUnit ( driver , factory ) ;
13186: LD_VAR 0 5
13190: PPUSH
13191: LD_VAR 0 2
13195: PPUSH
13196: CALL_OW 180
// wait ( 0 0$1 ) ;
13200: LD_INT 35
13202: PPUSH
13203: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
13207: LD_ADDR_EXP 63
13211: PUSH
13212: LD_EXP 63
13216: PUSH
13217: LD_VAR 0 5
13221: DIFF
13222: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
13223: LD_ADDR_EXP 63
13227: PUSH
13228: LD_EXP 63
13232: PUSH
13233: LD_VAR 0 1
13237: DIFF
13238: ST_TO_ADDR
// break ;
13239: GO 13392
// end ; end else
13241: GO 13390
// if GetControl ( vehicle ) = control_remote then
13243: LD_VAR 0 1
13247: PPUSH
13248: CALL_OW 263
13252: PUSH
13253: LD_INT 2
13255: EQUAL
13256: IFFALSE 13342
// begin wait ( 0 0$2 ) ;
13258: LD_INT 70
13260: PPUSH
13261: CALL_OW 67
// repeat wait ( 10 ) ;
13265: LD_INT 10
13267: PPUSH
13268: CALL_OW 67
// Connect ( vehicle ) ;
13272: LD_VAR 0 1
13276: PPUSH
13277: CALL 29076 0 1
// until IsControledBy ( vehicle ) ;
13281: LD_VAR 0 1
13285: PPUSH
13286: CALL_OW 312
13290: IFFALSE 13265
// wait ( 10 ) ;
13292: LD_INT 10
13294: PPUSH
13295: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
13299: LD_VAR 0 1
13303: PPUSH
13304: LD_EXP 62
13308: PUSH
13309: LD_VAR 0 4
13313: ARRAY
13314: PUSH
13315: LD_INT 3
13317: ARRAY
13318: PPUSH
13319: LD_EXP 62
13323: PUSH
13324: LD_VAR 0 4
13328: ARRAY
13329: PUSH
13330: LD_INT 4
13332: ARRAY
13333: PPUSH
13334: CALL_OW 111
// break ;
13338: GO 13392
// end else
13340: GO 13390
// begin wait ( 0 0$3 ) ;
13342: LD_INT 105
13344: PPUSH
13345: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
13349: LD_VAR 0 1
13353: PPUSH
13354: LD_EXP 62
13358: PUSH
13359: LD_VAR 0 4
13363: ARRAY
13364: PUSH
13365: LD_INT 3
13367: ARRAY
13368: PPUSH
13369: LD_EXP 62
13373: PUSH
13374: LD_VAR 0 4
13378: ARRAY
13379: PUSH
13380: LD_INT 4
13382: ARRAY
13383: PPUSH
13384: CALL_OW 111
// break ;
13388: GO 13392
// end ; end ;
13390: GO 12841
13392: POP
13393: POP
// end ;
13394: LD_VAR 0 3
13398: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
13399: LD_INT 0
13401: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
13402: LD_VAR 0 1
13406: PUSH
13407: LD_INT 250
13409: EQUAL
13410: IFFALSE 13427
13412: PUSH
13413: LD_VAR 0 2
13417: PPUSH
13418: CALL_OW 264
13422: PUSH
13423: LD_INT 81
13425: EQUAL
13426: AND
13427: IFFALSE 13448
// MinerPlaceMine ( unit , x , y ) ;
13429: LD_VAR 0 2
13433: PPUSH
13434: LD_VAR 0 4
13438: PPUSH
13439: LD_VAR 0 5
13443: PPUSH
13444: CALL 16794 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
13448: LD_VAR 0 1
13452: PUSH
13453: LD_INT 251
13455: EQUAL
13456: IFFALSE 13473
13458: PUSH
13459: LD_VAR 0 2
13463: PPUSH
13464: CALL_OW 264
13468: PUSH
13469: LD_INT 81
13471: EQUAL
13472: AND
13473: IFFALSE 13494
// MinerDetonateMine ( unit , x , y ) ;
13475: LD_VAR 0 2
13479: PPUSH
13480: LD_VAR 0 4
13484: PPUSH
13485: LD_VAR 0 5
13489: PPUSH
13490: CALL 17201 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
13494: LD_VAR 0 1
13498: PUSH
13499: LD_INT 252
13501: EQUAL
13502: IFFALSE 13519
13504: PUSH
13505: LD_VAR 0 2
13509: PPUSH
13510: CALL_OW 264
13514: PUSH
13515: LD_INT 81
13517: EQUAL
13518: AND
13519: IFFALSE 13540
// MinerCreateMinefield ( unit , x , y ) ;
13521: LD_VAR 0 2
13525: PPUSH
13526: LD_VAR 0 4
13530: PPUSH
13531: LD_VAR 0 5
13535: PPUSH
13536: CALL 17433 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
13540: LD_VAR 0 1
13544: PUSH
13545: LD_INT 253
13547: EQUAL
13548: IFFALSE 13565
13550: PUSH
13551: LD_VAR 0 2
13555: PPUSH
13556: CALL_OW 257
13560: PUSH
13561: LD_INT 5
13563: EQUAL
13564: AND
13565: IFFALSE 13586
// ComBinocular ( unit , x , y ) ;
13567: LD_VAR 0 2
13571: PPUSH
13572: LD_VAR 0 4
13576: PPUSH
13577: LD_VAR 0 5
13581: PPUSH
13582: CALL 17808 0 3
// if selectedUnit then
13586: LD_VAR 0 3
13590: IFFALSE 13650
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
13592: LD_VAR 0 1
13596: PUSH
13597: LD_INT 254
13599: EQUAL
13600: IFFALSE 13617
13602: PUSH
13603: LD_VAR 0 2
13607: PPUSH
13608: CALL_OW 264
13612: PUSH
13613: LD_INT 99
13615: EQUAL
13616: AND
13617: IFFALSE 13634
13619: PUSH
13620: LD_VAR 0 3
13624: PPUSH
13625: CALL_OW 263
13629: PUSH
13630: LD_INT 3
13632: EQUAL
13633: AND
13634: IFFALSE 13650
// HackDestroyVehicle ( unit , selectedUnit ) ;
13636: LD_VAR 0 2
13640: PPUSH
13641: LD_VAR 0 3
13645: PPUSH
13646: CALL 15984 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
13650: LD_VAR 0 1
13654: PUSH
13655: LD_INT 255
13657: EQUAL
13658: IFFALSE 13682
13660: PUSH
13661: LD_VAR 0 2
13665: PPUSH
13666: CALL_OW 264
13670: PUSH
13671: LD_INT 14
13673: PUSH
13674: LD_INT 53
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: IN
13681: AND
13682: IFFALSE 13700
13684: PUSH
13685: LD_VAR 0 4
13689: PPUSH
13690: LD_VAR 0 5
13694: PPUSH
13695: CALL_OW 488
13699: AND
13700: IFFALSE 13724
// CutTreeXYR ( unit , x , y , 12 ) ;
13702: LD_VAR 0 2
13706: PPUSH
13707: LD_VAR 0 4
13711: PPUSH
13712: LD_VAR 0 5
13716: PPUSH
13717: LD_INT 12
13719: PPUSH
13720: CALL 13915 0 4
// if cmd = 256 then
13724: LD_VAR 0 1
13728: PUSH
13729: LD_INT 256
13731: EQUAL
13732: IFFALSE 13753
// SetFactoryWaypoint ( unit , x , y ) ;
13734: LD_VAR 0 2
13738: PPUSH
13739: LD_VAR 0 4
13743: PPUSH
13744: LD_VAR 0 5
13748: PPUSH
13749: CALL 19732 0 3
// if cmd = 257 then
13753: LD_VAR 0 1
13757: PUSH
13758: LD_INT 257
13760: EQUAL
13761: IFFALSE 13782
// SetWarehouseGatheringPoint ( unit , x , y ) ;
13763: LD_VAR 0 2
13767: PPUSH
13768: LD_VAR 0 4
13772: PPUSH
13773: LD_VAR 0 5
13777: PPUSH
13778: CALL 20228 0 3
// if cmd = 258 then
13782: LD_VAR 0 1
13786: PUSH
13787: LD_INT 258
13789: EQUAL
13790: IFFALSE 13814
// BurnTreeXYR ( unit , x , y , 8 ) ;
13792: LD_VAR 0 2
13796: PPUSH
13797: LD_VAR 0 4
13801: PPUSH
13802: LD_VAR 0 5
13806: PPUSH
13807: LD_INT 8
13809: PPUSH
13810: CALL 14337 0 4
// end ;
13814: LD_VAR 0 6
13818: RET
// export function ComRadiation ( un ) ; var eff ; begin
13819: LD_INT 0
13821: PPUSH
13822: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
13823: LD_VAR 0 1
13827: PPUSH
13828: CALL_OW 264
13832: PUSH
13833: LD_INT 91
13835: NONEQUAL
13836: IFFALSE 13840
// exit ;
13838: GO 13910
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
13840: LD_INT 68
13842: PPUSH
13843: LD_VAR 0 1
13847: PPUSH
13848: CALL_OW 255
13852: PPUSH
13853: CALL_OW 321
13857: PUSH
13858: LD_INT 2
13860: EQUAL
13861: IFFALSE 13873
// eff := 50 else
13863: LD_ADDR_VAR 0 3
13867: PUSH
13868: LD_INT 50
13870: ST_TO_ADDR
13871: GO 13881
// eff := 25 ;
13873: LD_ADDR_VAR 0 3
13877: PUSH
13878: LD_INT 25
13880: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
13881: LD_VAR 0 1
13885: PPUSH
13886: CALL_OW 250
13890: PPUSH
13891: LD_VAR 0 1
13895: PPUSH
13896: CALL_OW 251
13900: PPUSH
13901: LD_VAR 0 3
13905: PPUSH
13906: CALL_OW 495
// end ;
13910: LD_VAR 0 2
13914: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
13915: LD_INT 0
13917: PPUSH
13918: PPUSH
13919: PPUSH
13920: PPUSH
13921: PPUSH
13922: PPUSH
13923: PPUSH
13924: PPUSH
13925: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
13926: LD_VAR 0 1
13930: PPUSH
13931: CALL_OW 302
13935: NOT
13936: IFTRUE 13955
13938: PUSH
13939: LD_VAR 0 2
13943: PPUSH
13944: LD_VAR 0 3
13948: PPUSH
13949: CALL_OW 488
13953: NOT
13954: OR
13955: IFTRUE 13964
13957: PUSH
13958: LD_VAR 0 4
13962: NOT
13963: OR
13964: IFFALSE 13968
// exit ;
13966: GO 14332
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
13968: LD_VAR 0 1
13972: PPUSH
13973: CALL_OW 437
13977: PPUSH
13978: CALL 22798 0 1
13982: PUSH
13983: LD_INT 10
13985: GREATER
13986: IFFALSE 13990
// exit ;
13988: GO 14332
// list := [ ] ;
13990: LD_ADDR_VAR 0 13
13994: PUSH
13995: EMPTY
13996: ST_TO_ADDR
// if x - r < 0 then
13997: LD_VAR 0 2
14001: PUSH
14002: LD_VAR 0 4
14006: MINUS
14007: PUSH
14008: LD_INT 0
14010: LESS
14011: IFFALSE 14023
// min_x := 0 else
14013: LD_ADDR_VAR 0 7
14017: PUSH
14018: LD_INT 0
14020: ST_TO_ADDR
14021: GO 14039
// min_x := x - r ;
14023: LD_ADDR_VAR 0 7
14027: PUSH
14028: LD_VAR 0 2
14032: PUSH
14033: LD_VAR 0 4
14037: MINUS
14038: ST_TO_ADDR
// if y - r < 0 then
14039: LD_VAR 0 3
14043: PUSH
14044: LD_VAR 0 4
14048: MINUS
14049: PUSH
14050: LD_INT 0
14052: LESS
14053: IFFALSE 14065
// min_y := 0 else
14055: LD_ADDR_VAR 0 8
14059: PUSH
14060: LD_INT 0
14062: ST_TO_ADDR
14063: GO 14081
// min_y := y - r ;
14065: LD_ADDR_VAR 0 8
14069: PUSH
14070: LD_VAR 0 3
14074: PUSH
14075: LD_VAR 0 4
14079: MINUS
14080: ST_TO_ADDR
// max_x := x + r ;
14081: LD_ADDR_VAR 0 9
14085: PUSH
14086: LD_VAR 0 2
14090: PUSH
14091: LD_VAR 0 4
14095: PLUS
14096: ST_TO_ADDR
// max_y := y + r ;
14097: LD_ADDR_VAR 0 10
14101: PUSH
14102: LD_VAR 0 3
14106: PUSH
14107: LD_VAR 0 4
14111: PLUS
14112: ST_TO_ADDR
// for _x = min_x to max_x do
14113: LD_ADDR_VAR 0 11
14117: PUSH
14118: DOUBLE
14119: LD_VAR 0 7
14123: DEC
14124: ST_TO_ADDR
14125: LD_VAR 0 9
14129: PUSH
14130: FOR_TO
14131: IFFALSE 14250
// for _y = min_y to max_y do
14133: LD_ADDR_VAR 0 12
14137: PUSH
14138: DOUBLE
14139: LD_VAR 0 8
14143: DEC
14144: ST_TO_ADDR
14145: LD_VAR 0 10
14149: PUSH
14150: FOR_TO
14151: IFFALSE 14246
// begin if not ValidHex ( _x , _y ) then
14153: LD_VAR 0 11
14157: PPUSH
14158: LD_VAR 0 12
14162: PPUSH
14163: CALL_OW 488
14167: NOT
14168: IFFALSE 14172
// continue ;
14170: GO 14150
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
14172: LD_VAR 0 11
14176: PPUSH
14177: LD_VAR 0 12
14181: PPUSH
14182: CALL_OW 351
14186: IFFALSE 14204
14188: PUSH
14189: LD_VAR 0 11
14193: PPUSH
14194: LD_VAR 0 12
14198: PPUSH
14199: CALL_OW 554
14203: AND
14204: IFFALSE 14244
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
14206: LD_ADDR_VAR 0 13
14210: PUSH
14211: LD_VAR 0 13
14215: PPUSH
14216: LD_VAR 0 13
14220: PUSH
14221: LD_INT 1
14223: PLUS
14224: PPUSH
14225: LD_VAR 0 11
14229: PUSH
14230: LD_VAR 0 12
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: PPUSH
14239: CALL_OW 2
14243: ST_TO_ADDR
// end ;
14244: GO 14150
14246: POP
14247: POP
14248: GO 14130
14250: POP
14251: POP
// if not list then
14252: LD_VAR 0 13
14256: NOT
14257: IFFALSE 14261
// exit ;
14259: GO 14332
// for i in list do
14261: LD_ADDR_VAR 0 6
14265: PUSH
14266: LD_VAR 0 13
14270: PUSH
14271: FOR_IN
14272: IFFALSE 14330
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
14274: LD_VAR 0 1
14278: PPUSH
14279: LD_STRING M
14281: PUSH
14282: LD_VAR 0 6
14286: PUSH
14287: LD_INT 1
14289: ARRAY
14290: PUSH
14291: LD_VAR 0 6
14295: PUSH
14296: LD_INT 2
14298: ARRAY
14299: PUSH
14300: LD_INT 0
14302: PUSH
14303: LD_INT 0
14305: PUSH
14306: LD_INT 0
14308: PUSH
14309: LD_INT 0
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: PUSH
14321: EMPTY
14322: LIST
14323: PPUSH
14324: CALL_OW 447
14328: GO 14271
14330: POP
14331: POP
// end ;
14332: LD_VAR 0 5
14336: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
14337: LD_INT 0
14339: PPUSH
14340: PPUSH
14341: PPUSH
14342: PPUSH
14343: PPUSH
14344: PPUSH
14345: PPUSH
14346: PPUSH
14347: PPUSH
14348: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
14349: LD_VAR 0 1
14353: PPUSH
14354: CALL_OW 302
14358: NOT
14359: IFTRUE 14378
14361: PUSH
14362: LD_VAR 0 2
14366: PPUSH
14367: LD_VAR 0 3
14371: PPUSH
14372: CALL_OW 488
14376: NOT
14377: OR
14378: IFTRUE 14387
14380: PUSH
14381: LD_VAR 0 4
14385: NOT
14386: OR
14387: IFFALSE 14391
// exit ;
14389: GO 14930
// if Count ( GetTaskList ( flame ) ) > 10 then
14391: LD_VAR 0 1
14395: PPUSH
14396: CALL_OW 437
14400: PPUSH
14401: CALL 22798 0 1
14405: PUSH
14406: LD_INT 10
14408: GREATER
14409: IFFALSE 14413
// exit ;
14411: GO 14930
// list := [ ] ;
14413: LD_ADDR_VAR 0 13
14417: PUSH
14418: EMPTY
14419: ST_TO_ADDR
// if x - r < 0 then
14420: LD_VAR 0 2
14424: PUSH
14425: LD_VAR 0 4
14429: MINUS
14430: PUSH
14431: LD_INT 0
14433: LESS
14434: IFFALSE 14446
// min_x := 0 else
14436: LD_ADDR_VAR 0 7
14440: PUSH
14441: LD_INT 0
14443: ST_TO_ADDR
14444: GO 14462
// min_x := x - r ;
14446: LD_ADDR_VAR 0 7
14450: PUSH
14451: LD_VAR 0 2
14455: PUSH
14456: LD_VAR 0 4
14460: MINUS
14461: ST_TO_ADDR
// if y - r < 0 then
14462: LD_VAR 0 3
14466: PUSH
14467: LD_VAR 0 4
14471: MINUS
14472: PUSH
14473: LD_INT 0
14475: LESS
14476: IFFALSE 14488
// min_y := 0 else
14478: LD_ADDR_VAR 0 8
14482: PUSH
14483: LD_INT 0
14485: ST_TO_ADDR
14486: GO 14504
// min_y := y - r ;
14488: LD_ADDR_VAR 0 8
14492: PUSH
14493: LD_VAR 0 3
14497: PUSH
14498: LD_VAR 0 4
14502: MINUS
14503: ST_TO_ADDR
// max_x := x + r ;
14504: LD_ADDR_VAR 0 9
14508: PUSH
14509: LD_VAR 0 2
14513: PUSH
14514: LD_VAR 0 4
14518: PLUS
14519: ST_TO_ADDR
// max_y := y + r ;
14520: LD_ADDR_VAR 0 10
14524: PUSH
14525: LD_VAR 0 3
14529: PUSH
14530: LD_VAR 0 4
14534: PLUS
14535: ST_TO_ADDR
// for _x = min_x to max_x do
14536: LD_ADDR_VAR 0 11
14540: PUSH
14541: DOUBLE
14542: LD_VAR 0 7
14546: DEC
14547: ST_TO_ADDR
14548: LD_VAR 0 9
14552: PUSH
14553: FOR_TO
14554: IFFALSE 14673
// for _y = min_y to max_y do
14556: LD_ADDR_VAR 0 12
14560: PUSH
14561: DOUBLE
14562: LD_VAR 0 8
14566: DEC
14567: ST_TO_ADDR
14568: LD_VAR 0 10
14572: PUSH
14573: FOR_TO
14574: IFFALSE 14669
// begin if not ValidHex ( _x , _y ) then
14576: LD_VAR 0 11
14580: PPUSH
14581: LD_VAR 0 12
14585: PPUSH
14586: CALL_OW 488
14590: NOT
14591: IFFALSE 14595
// continue ;
14593: GO 14573
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
14595: LD_VAR 0 11
14599: PPUSH
14600: LD_VAR 0 12
14604: PPUSH
14605: CALL_OW 351
14609: IFFALSE 14627
14611: PUSH
14612: LD_VAR 0 11
14616: PPUSH
14617: LD_VAR 0 12
14621: PPUSH
14622: CALL_OW 554
14626: AND
14627: IFFALSE 14667
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
14629: LD_ADDR_VAR 0 13
14633: PUSH
14634: LD_VAR 0 13
14638: PPUSH
14639: LD_VAR 0 13
14643: PUSH
14644: LD_INT 1
14646: PLUS
14647: PPUSH
14648: LD_VAR 0 11
14652: PUSH
14653: LD_VAR 0 12
14657: PUSH
14658: EMPTY
14659: LIST
14660: LIST
14661: PPUSH
14662: CALL_OW 2
14666: ST_TO_ADDR
// end ;
14667: GO 14573
14669: POP
14670: POP
14671: GO 14553
14673: POP
14674: POP
// if not list then
14675: LD_VAR 0 13
14679: NOT
14680: IFFALSE 14684
// exit ;
14682: GO 14930
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
14684: LD_ADDR_VAR 0 13
14688: PUSH
14689: LD_VAR 0 1
14693: PPUSH
14694: LD_VAR 0 13
14698: PPUSH
14699: LD_INT 1
14701: PPUSH
14702: LD_INT 1
14704: PPUSH
14705: CALL 26204 0 4
14709: ST_TO_ADDR
// ComStop ( flame ) ;
14710: LD_VAR 0 1
14714: PPUSH
14715: CALL_OW 141
// for i in list do
14719: LD_ADDR_VAR 0 6
14723: PUSH
14724: LD_VAR 0 13
14728: PUSH
14729: FOR_IN
14730: IFFALSE 14761
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
14732: LD_VAR 0 1
14736: PPUSH
14737: LD_VAR 0 6
14741: PUSH
14742: LD_INT 1
14744: ARRAY
14745: PPUSH
14746: LD_VAR 0 6
14750: PUSH
14751: LD_INT 2
14753: ARRAY
14754: PPUSH
14755: CALL_OW 176
14759: GO 14729
14761: POP
14762: POP
// repeat wait ( 0 0$1 ) ;
14763: LD_INT 35
14765: PPUSH
14766: CALL_OW 67
// task := GetTaskList ( flame ) ;
14770: LD_ADDR_VAR 0 14
14774: PUSH
14775: LD_VAR 0 1
14779: PPUSH
14780: CALL_OW 437
14784: ST_TO_ADDR
// if not task then
14785: LD_VAR 0 14
14789: NOT
14790: IFFALSE 14794
// exit ;
14792: GO 14930
// if task [ 1 ] [ 1 ] <> | then
14794: LD_VAR 0 14
14798: PUSH
14799: LD_INT 1
14801: ARRAY
14802: PUSH
14803: LD_INT 1
14805: ARRAY
14806: PUSH
14807: LD_STRING |
14809: NONEQUAL
14810: IFFALSE 14814
// exit ;
14812: GO 14930
// _x := task [ 1 ] [ 2 ] ;
14814: LD_ADDR_VAR 0 11
14818: PUSH
14819: LD_VAR 0 14
14823: PUSH
14824: LD_INT 1
14826: ARRAY
14827: PUSH
14828: LD_INT 2
14830: ARRAY
14831: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
14832: LD_ADDR_VAR 0 12
14836: PUSH
14837: LD_VAR 0 14
14841: PUSH
14842: LD_INT 1
14844: ARRAY
14845: PUSH
14846: LD_INT 3
14848: ARRAY
14849: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
14850: LD_VAR 0 11
14854: PPUSH
14855: LD_VAR 0 12
14859: PPUSH
14860: CALL_OW 351
14864: NOT
14865: IFTRUE 14884
14867: PUSH
14868: LD_VAR 0 11
14872: PPUSH
14873: LD_VAR 0 12
14877: PPUSH
14878: CALL_OW 554
14882: NOT
14883: OR
14884: IFFALSE 14918
// begin task := Delete ( task , 1 ) ;
14886: LD_ADDR_VAR 0 14
14890: PUSH
14891: LD_VAR 0 14
14895: PPUSH
14896: LD_INT 1
14898: PPUSH
14899: CALL_OW 3
14903: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
14904: LD_VAR 0 1
14908: PPUSH
14909: LD_VAR 0 14
14913: PPUSH
14914: CALL_OW 446
// end ; until not HasTask ( flame ) ;
14918: LD_VAR 0 1
14922: PPUSH
14923: CALL_OW 314
14927: NOT
14928: IFFALSE 14763
// end ;
14930: LD_VAR 0 5
14934: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
14935: LD_EXP 52
14939: NOT
14940: IFFALSE 14990
14942: GO 14944
14944: DISABLE
// begin initHack := true ;
14945: LD_ADDR_EXP 52
14949: PUSH
14950: LD_INT 1
14952: ST_TO_ADDR
// hackTanks := [ ] ;
14953: LD_ADDR_EXP 53
14957: PUSH
14958: EMPTY
14959: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
14960: LD_ADDR_EXP 54
14964: PUSH
14965: EMPTY
14966: ST_TO_ADDR
// hackLimit := 3 ;
14967: LD_ADDR_EXP 55
14971: PUSH
14972: LD_INT 3
14974: ST_TO_ADDR
// hackDist := 12 ;
14975: LD_ADDR_EXP 56
14979: PUSH
14980: LD_INT 12
14982: ST_TO_ADDR
// hackCounter := [ ] ;
14983: LD_ADDR_EXP 57
14987: PUSH
14988: EMPTY
14989: ST_TO_ADDR
// end ;
14990: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
14991: LD_EXP 52
14995: IFFALSE 15013
14997: PUSH
14998: LD_INT 34
15000: PUSH
15001: LD_INT 99
15003: PUSH
15004: EMPTY
15005: LIST
15006: LIST
15007: PPUSH
15008: CALL_OW 69
15012: AND
15013: IFFALSE 15266
15015: GO 15017
15017: DISABLE
15018: LD_INT 0
15020: PPUSH
15021: PPUSH
// begin enable ;
15022: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
15023: LD_ADDR_VAR 0 1
15027: PUSH
15028: LD_INT 34
15030: PUSH
15031: LD_INT 99
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: PPUSH
15038: CALL_OW 69
15042: PUSH
15043: FOR_IN
15044: IFFALSE 15264
// begin if not i in hackTanks then
15046: LD_VAR 0 1
15050: PUSH
15051: LD_EXP 53
15055: IN
15056: NOT
15057: IFFALSE 15140
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
15059: LD_ADDR_EXP 53
15063: PUSH
15064: LD_EXP 53
15068: PPUSH
15069: LD_EXP 53
15073: PUSH
15074: LD_INT 1
15076: PLUS
15077: PPUSH
15078: LD_VAR 0 1
15082: PPUSH
15083: CALL_OW 1
15087: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
15088: LD_ADDR_EXP 54
15092: PUSH
15093: LD_EXP 54
15097: PPUSH
15098: LD_EXP 54
15102: PUSH
15103: LD_INT 1
15105: PLUS
15106: PPUSH
15107: EMPTY
15108: PPUSH
15109: CALL_OW 1
15113: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
15114: LD_ADDR_EXP 57
15118: PUSH
15119: LD_EXP 57
15123: PPUSH
15124: LD_EXP 57
15128: PUSH
15129: LD_INT 1
15131: PLUS
15132: PPUSH
15133: EMPTY
15134: PPUSH
15135: CALL_OW 1
15139: ST_TO_ADDR
// end ; if not IsOk ( i ) then
15140: LD_VAR 0 1
15144: PPUSH
15145: CALL_OW 302
15149: NOT
15150: IFFALSE 15163
// begin HackUnlinkAll ( i ) ;
15152: LD_VAR 0 1
15156: PPUSH
15157: CALL 15269 0 1
// continue ;
15161: GO 15043
// end ; HackCheckCapturedStatus ( i ) ;
15163: LD_VAR 0 1
15167: PPUSH
15168: CALL 15714 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
15172: LD_ADDR_VAR 0 2
15176: PUSH
15177: LD_INT 81
15179: PUSH
15180: LD_VAR 0 1
15184: PPUSH
15185: CALL_OW 255
15189: PUSH
15190: EMPTY
15191: LIST
15192: LIST
15193: PUSH
15194: LD_INT 33
15196: PUSH
15197: LD_INT 3
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: PUSH
15204: LD_INT 91
15206: PUSH
15207: LD_VAR 0 1
15211: PUSH
15212: LD_EXP 56
15216: PUSH
15217: EMPTY
15218: LIST
15219: LIST
15220: LIST
15221: PUSH
15222: LD_INT 50
15224: PUSH
15225: EMPTY
15226: LIST
15227: PUSH
15228: EMPTY
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: PPUSH
15234: CALL_OW 69
15238: ST_TO_ADDR
// if not tmp then
15239: LD_VAR 0 2
15243: NOT
15244: IFFALSE 15248
// continue ;
15246: GO 15043
// HackLink ( i , tmp ) ;
15248: LD_VAR 0 1
15252: PPUSH
15253: LD_VAR 0 2
15257: PPUSH
15258: CALL 15405 0 2
// end ;
15262: GO 15043
15264: POP
15265: POP
// end ;
15266: PPOPN 2
15268: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
15269: LD_INT 0
15271: PPUSH
15272: PPUSH
15273: PPUSH
// if not hack in hackTanks then
15274: LD_VAR 0 1
15278: PUSH
15279: LD_EXP 53
15283: IN
15284: NOT
15285: IFFALSE 15289
// exit ;
15287: GO 15400
// index := GetElementIndex ( hackTanks , hack ) ;
15289: LD_ADDR_VAR 0 4
15293: PUSH
15294: LD_EXP 53
15298: PPUSH
15299: LD_VAR 0 1
15303: PPUSH
15304: CALL 25499 0 2
15308: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
15309: LD_EXP 54
15313: PUSH
15314: LD_VAR 0 4
15318: ARRAY
15319: IFFALSE 15400
// begin for i in hackTanksCaptured [ index ] do
15321: LD_ADDR_VAR 0 3
15325: PUSH
15326: LD_EXP 54
15330: PUSH
15331: LD_VAR 0 4
15335: ARRAY
15336: PUSH
15337: FOR_IN
15338: IFFALSE 15364
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
15340: LD_VAR 0 3
15344: PUSH
15345: LD_INT 1
15347: ARRAY
15348: PPUSH
15349: LD_VAR 0 3
15353: PUSH
15354: LD_INT 2
15356: ARRAY
15357: PPUSH
15358: CALL_OW 235
15362: GO 15337
15364: POP
15365: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
15366: LD_ADDR_EXP 54
15370: PUSH
15371: LD_EXP 54
15375: PPUSH
15376: LD_VAR 0 4
15380: PPUSH
15381: EMPTY
15382: PPUSH
15383: CALL_OW 1
15387: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
15388: LD_VAR 0 1
15392: PPUSH
15393: LD_INT 0
15395: PPUSH
15396: CALL_OW 505
// end ; end ;
15400: LD_VAR 0 2
15404: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
15405: LD_INT 0
15407: PPUSH
15408: PPUSH
15409: PPUSH
// if not hack in hackTanks or not vehicles then
15410: LD_VAR 0 1
15414: PUSH
15415: LD_EXP 53
15419: IN
15420: NOT
15421: IFTRUE 15430
15423: PUSH
15424: LD_VAR 0 2
15428: NOT
15429: OR
15430: IFFALSE 15434
// exit ;
15432: GO 15709
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
15434: LD_ADDR_VAR 0 2
15438: PUSH
15439: LD_VAR 0 1
15443: PPUSH
15444: LD_VAR 0 2
15448: PPUSH
15449: LD_INT 1
15451: PPUSH
15452: LD_INT 1
15454: PPUSH
15455: CALL 26151 0 4
15459: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
15460: LD_ADDR_VAR 0 5
15464: PUSH
15465: LD_EXP 53
15469: PPUSH
15470: LD_VAR 0 1
15474: PPUSH
15475: CALL 25499 0 2
15479: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
15480: LD_EXP 54
15484: PUSH
15485: LD_VAR 0 5
15489: ARRAY
15490: PUSH
15491: LD_EXP 55
15495: LESS
15496: IFFALSE 15685
// begin for i := 1 to vehicles do
15498: LD_ADDR_VAR 0 4
15502: PUSH
15503: DOUBLE
15504: LD_INT 1
15506: DEC
15507: ST_TO_ADDR
15508: LD_VAR 0 2
15512: PUSH
15513: FOR_TO
15514: IFFALSE 15683
// begin if hackTanksCaptured [ index ] = hackLimit then
15516: LD_EXP 54
15520: PUSH
15521: LD_VAR 0 5
15525: ARRAY
15526: PUSH
15527: LD_EXP 55
15531: EQUAL
15532: IFFALSE 15536
// break ;
15534: GO 15683
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
15536: LD_ADDR_EXP 57
15540: PUSH
15541: LD_EXP 57
15545: PPUSH
15546: LD_VAR 0 5
15550: PPUSH
15551: LD_EXP 57
15555: PUSH
15556: LD_VAR 0 5
15560: ARRAY
15561: PUSH
15562: LD_INT 1
15564: PLUS
15565: PPUSH
15566: CALL_OW 1
15570: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
15571: LD_ADDR_EXP 54
15575: PUSH
15576: LD_EXP 54
15580: PPUSH
15581: LD_VAR 0 5
15585: PUSH
15586: LD_EXP 54
15590: PUSH
15591: LD_VAR 0 5
15595: ARRAY
15596: PUSH
15597: LD_INT 1
15599: PLUS
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: PPUSH
15605: LD_VAR 0 2
15609: PUSH
15610: LD_VAR 0 4
15614: ARRAY
15615: PUSH
15616: LD_VAR 0 2
15620: PUSH
15621: LD_VAR 0 4
15625: ARRAY
15626: PPUSH
15627: CALL_OW 255
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: PPUSH
15636: CALL 25716 0 3
15640: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
15641: LD_VAR 0 2
15645: PUSH
15646: LD_VAR 0 4
15650: ARRAY
15651: PPUSH
15652: LD_VAR 0 1
15656: PPUSH
15657: CALL_OW 255
15661: PPUSH
15662: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
15666: LD_VAR 0 2
15670: PUSH
15671: LD_VAR 0 4
15675: ARRAY
15676: PPUSH
15677: CALL_OW 141
// end ;
15681: GO 15513
15683: POP
15684: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
15685: LD_VAR 0 1
15689: PPUSH
15690: LD_EXP 54
15694: PUSH
15695: LD_VAR 0 5
15699: ARRAY
15700: PUSH
15701: LD_INT 0
15703: PLUS
15704: PPUSH
15705: CALL_OW 505
// end ;
15709: LD_VAR 0 3
15713: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
15714: LD_INT 0
15716: PPUSH
15717: PPUSH
15718: PPUSH
15719: PPUSH
// if not hack in hackTanks then
15720: LD_VAR 0 1
15724: PUSH
15725: LD_EXP 53
15729: IN
15730: NOT
15731: IFFALSE 15735
// exit ;
15733: GO 15979
// index := GetElementIndex ( hackTanks , hack ) ;
15735: LD_ADDR_VAR 0 4
15739: PUSH
15740: LD_EXP 53
15744: PPUSH
15745: LD_VAR 0 1
15749: PPUSH
15750: CALL 25499 0 2
15754: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
15755: LD_ADDR_VAR 0 3
15759: PUSH
15760: DOUBLE
15761: LD_EXP 54
15765: PUSH
15766: LD_VAR 0 4
15770: ARRAY
15771: INC
15772: ST_TO_ADDR
15773: LD_INT 1
15775: PUSH
15776: FOR_DOWNTO
15777: IFFALSE 15953
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
15779: LD_ADDR_VAR 0 5
15783: PUSH
15784: LD_EXP 54
15788: PUSH
15789: LD_VAR 0 4
15793: ARRAY
15794: PUSH
15795: LD_VAR 0 3
15799: ARRAY
15800: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
15801: LD_VAR 0 5
15805: PUSH
15806: LD_INT 1
15808: ARRAY
15809: PPUSH
15810: CALL_OW 302
15814: NOT
15815: IFTRUE 15843
15817: PUSH
15818: LD_VAR 0 5
15822: PUSH
15823: LD_INT 1
15825: ARRAY
15826: PPUSH
15827: CALL_OW 255
15831: PUSH
15832: LD_VAR 0 1
15836: PPUSH
15837: CALL_OW 255
15841: NONEQUAL
15842: OR
15843: IFFALSE 15951
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
15845: LD_VAR 0 5
15849: PUSH
15850: LD_INT 1
15852: ARRAY
15853: PPUSH
15854: CALL_OW 305
15858: IFFALSE 15886
15860: PUSH
15861: LD_VAR 0 5
15865: PUSH
15866: LD_INT 1
15868: ARRAY
15869: PPUSH
15870: CALL_OW 255
15874: PUSH
15875: LD_VAR 0 1
15879: PPUSH
15880: CALL_OW 255
15884: EQUAL
15885: AND
15886: IFFALSE 15910
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
15888: LD_VAR 0 5
15892: PUSH
15893: LD_INT 1
15895: ARRAY
15896: PPUSH
15897: LD_VAR 0 5
15901: PUSH
15902: LD_INT 2
15904: ARRAY
15905: PPUSH
15906: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
15910: LD_ADDR_EXP 54
15914: PUSH
15915: LD_EXP 54
15919: PPUSH
15920: LD_VAR 0 4
15924: PPUSH
15925: LD_EXP 54
15929: PUSH
15930: LD_VAR 0 4
15934: ARRAY
15935: PPUSH
15936: LD_VAR 0 3
15940: PPUSH
15941: CALL_OW 3
15945: PPUSH
15946: CALL_OW 1
15950: ST_TO_ADDR
// end ; end ;
15951: GO 15776
15953: POP
15954: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
15955: LD_VAR 0 1
15959: PPUSH
15960: LD_EXP 54
15964: PUSH
15965: LD_VAR 0 4
15969: ARRAY
15970: PUSH
15971: LD_INT 0
15973: PLUS
15974: PPUSH
15975: CALL_OW 505
// end ;
15979: LD_VAR 0 2
15983: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
15984: LD_INT 0
15986: PPUSH
15987: PPUSH
15988: PPUSH
15989: PPUSH
// if not hack in hackTanks then
15990: LD_VAR 0 1
15994: PUSH
15995: LD_EXP 53
15999: IN
16000: NOT
16001: IFFALSE 16005
// exit ;
16003: GO 16090
// index := GetElementIndex ( hackTanks , hack ) ;
16005: LD_ADDR_VAR 0 5
16009: PUSH
16010: LD_EXP 53
16014: PPUSH
16015: LD_VAR 0 1
16019: PPUSH
16020: CALL 25499 0 2
16024: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
16025: LD_ADDR_VAR 0 4
16029: PUSH
16030: DOUBLE
16031: LD_INT 1
16033: DEC
16034: ST_TO_ADDR
16035: LD_EXP 54
16039: PUSH
16040: LD_VAR 0 5
16044: ARRAY
16045: PUSH
16046: FOR_TO
16047: IFFALSE 16088
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
16049: LD_EXP 54
16053: PUSH
16054: LD_VAR 0 5
16058: ARRAY
16059: PUSH
16060: LD_VAR 0 4
16064: ARRAY
16065: PUSH
16066: LD_INT 1
16068: ARRAY
16069: PUSH
16070: LD_VAR 0 2
16074: EQUAL
16075: IFFALSE 16086
// KillUnit ( vehicle ) ;
16077: LD_VAR 0 2
16081: PPUSH
16082: CALL_OW 66
16086: GO 16046
16088: POP
16089: POP
// end ;
16090: LD_VAR 0 3
16094: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
16095: LD_EXP 58
16099: NOT
16100: IFFALSE 16233
16102: GO 16104
16104: DISABLE
16105: LD_INT 0
16107: PPUSH
// begin initMiner := true ;
16108: LD_ADDR_EXP 58
16112: PUSH
16113: LD_INT 1
16115: ST_TO_ADDR
// minersList := [ ] ;
16116: LD_ADDR_EXP 59
16120: PUSH
16121: EMPTY
16122: ST_TO_ADDR
// minerMinesList := [ ] ;
16123: LD_ADDR_EXP 60
16127: PUSH
16128: EMPTY
16129: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
16130: LD_ADDR_EXP 61
16134: PUSH
16135: LD_INT 10
16137: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
16138: LD_ADDR_VAR 0 1
16142: PUSH
16143: LD_INT 34
16145: PUSH
16146: LD_INT 81
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: PPUSH
16153: CALL_OW 69
16157: PUSH
16158: FOR_IN
16159: IFFALSE 16231
// begin if not i in minersList then
16161: LD_VAR 0 1
16165: PUSH
16166: LD_EXP 59
16170: IN
16171: NOT
16172: IFFALSE 16229
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
16174: LD_ADDR_EXP 59
16178: PUSH
16179: LD_EXP 59
16183: PPUSH
16184: LD_EXP 59
16188: PUSH
16189: LD_INT 1
16191: PLUS
16192: PPUSH
16193: LD_VAR 0 1
16197: PPUSH
16198: CALL_OW 1
16202: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
16203: LD_ADDR_EXP 60
16207: PUSH
16208: LD_EXP 60
16212: PPUSH
16213: LD_EXP 60
16217: PUSH
16218: LD_INT 1
16220: PLUS
16221: PPUSH
16222: EMPTY
16223: PPUSH
16224: CALL_OW 1
16228: ST_TO_ADDR
// end end ;
16229: GO 16158
16231: POP
16232: POP
// end ;
16233: PPOPN 1
16235: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
16236: LD_EXP 58
16240: IFFALSE 16271
16242: PUSH
16243: LD_EXP 60
16247: PPUSH
16248: CALL 22798 0 1
16252: IFTRUE 16270
16254: PUSH
16255: LD_INT 34
16257: PUSH
16258: LD_INT 81
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: PPUSH
16265: CALL_OW 69
16269: OR
16270: AND
16271: IFFALSE 16791
16273: GO 16275
16275: DISABLE
16276: LD_INT 0
16278: PPUSH
16279: PPUSH
16280: PPUSH
16281: PPUSH
// begin enable ;
16282: ENABLE
// for i := minerMinesList downto 1 do
16283: LD_ADDR_VAR 0 1
16287: PUSH
16288: DOUBLE
16289: LD_EXP 60
16293: INC
16294: ST_TO_ADDR
16295: LD_INT 1
16297: PUSH
16298: FOR_DOWNTO
16299: IFFALSE 16789
// begin side := GetSide ( minersList [ i ] ) ;
16301: LD_ADDR_VAR 0 3
16305: PUSH
16306: LD_EXP 59
16310: PUSH
16311: LD_VAR 0 1
16315: ARRAY
16316: PPUSH
16317: CALL_OW 255
16321: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
16322: LD_EXP 59
16326: PUSH
16327: LD_VAR 0 1
16331: ARRAY
16332: PPUSH
16333: CALL_OW 300
16337: IFFALSE 16358
16339: PUSH
16340: LD_VAR 0 3
16344: PUSH
16345: LD_OWVAR 2
16349: PUSH
16350: LD_INT 9
16352: PUSH
16353: EMPTY
16354: LIST
16355: LIST
16356: IN
16357: AND
16358: IFFALSE 16391
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
16360: LD_EXP 59
16364: PUSH
16365: LD_VAR 0 1
16369: ARRAY
16370: PPUSH
16371: LD_EXP 60
16375: PUSH
16376: LD_VAR 0 1
16380: ARRAY
16381: PPUSH
16382: CALL 22798 0 1
16386: PPUSH
16387: CALL_OW 505
// if not minerMinesList [ i ] then
16391: LD_EXP 60
16395: PUSH
16396: LD_VAR 0 1
16400: ARRAY
16401: NOT
16402: IFFALSE 16406
// continue ;
16404: GO 16298
// for j := minerMinesList [ i ] downto 1 do
16406: LD_ADDR_VAR 0 2
16410: PUSH
16411: DOUBLE
16412: LD_EXP 60
16416: PUSH
16417: LD_VAR 0 1
16421: ARRAY
16422: INC
16423: ST_TO_ADDR
16424: LD_INT 1
16426: PUSH
16427: FOR_DOWNTO
16428: IFFALSE 16785
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
16430: LD_EXP 59
16434: PUSH
16435: LD_VAR 0 1
16439: ARRAY
16440: PPUSH
16441: CALL_OW 301
16445: IFTRUE 16465
16447: PUSH
16448: LD_EXP 59
16452: PUSH
16453: LD_VAR 0 1
16457: ARRAY
16458: PPUSH
16459: CALL_OW 305
16463: NOT
16464: OR
16465: IFFALSE 16556
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
16467: LD_EXP 60
16471: PUSH
16472: LD_VAR 0 1
16476: ARRAY
16477: PUSH
16478: LD_VAR 0 2
16482: ARRAY
16483: PUSH
16484: LD_INT 1
16486: ARRAY
16487: PPUSH
16488: LD_EXP 60
16492: PUSH
16493: LD_VAR 0 1
16497: ARRAY
16498: PUSH
16499: LD_VAR 0 2
16503: ARRAY
16504: PUSH
16505: LD_INT 2
16507: ARRAY
16508: PPUSH
16509: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
16513: LD_ADDR_EXP 60
16517: PUSH
16518: LD_EXP 60
16522: PPUSH
16523: LD_VAR 0 1
16527: PPUSH
16528: LD_EXP 60
16532: PUSH
16533: LD_VAR 0 1
16537: ARRAY
16538: PPUSH
16539: LD_VAR 0 2
16543: PPUSH
16544: CALL_OW 3
16548: PPUSH
16549: CALL_OW 1
16553: ST_TO_ADDR
// continue ;
16554: GO 16427
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
16556: LD_ADDR_VAR 0 4
16560: PUSH
16561: LD_EXP 60
16565: PUSH
16566: LD_VAR 0 1
16570: ARRAY
16571: PUSH
16572: LD_VAR 0 2
16576: ARRAY
16577: PUSH
16578: LD_INT 1
16580: ARRAY
16581: PPUSH
16582: LD_EXP 60
16586: PUSH
16587: LD_VAR 0 1
16591: ARRAY
16592: PUSH
16593: LD_VAR 0 2
16597: ARRAY
16598: PUSH
16599: LD_INT 2
16601: ARRAY
16602: PPUSH
16603: CALL_OW 428
16607: ST_TO_ADDR
// if not tmp then
16608: LD_VAR 0 4
16612: NOT
16613: IFFALSE 16617
// continue ;
16615: GO 16427
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
16617: LD_VAR 0 4
16621: PUSH
16622: LD_INT 81
16624: PUSH
16625: LD_VAR 0 3
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: PPUSH
16634: CALL_OW 69
16638: IN
16639: IFFALSE 16689
16641: PUSH
16642: LD_EXP 60
16646: PUSH
16647: LD_VAR 0 1
16651: ARRAY
16652: PUSH
16653: LD_VAR 0 2
16657: ARRAY
16658: PUSH
16659: LD_INT 1
16661: ARRAY
16662: PPUSH
16663: LD_EXP 60
16667: PUSH
16668: LD_VAR 0 1
16672: ARRAY
16673: PUSH
16674: LD_VAR 0 2
16678: ARRAY
16679: PUSH
16680: LD_INT 2
16682: ARRAY
16683: PPUSH
16684: CALL_OW 458
16688: AND
16689: IFFALSE 16783
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
16691: LD_EXP 60
16695: PUSH
16696: LD_VAR 0 1
16700: ARRAY
16701: PUSH
16702: LD_VAR 0 2
16706: ARRAY
16707: PUSH
16708: LD_INT 1
16710: ARRAY
16711: PPUSH
16712: LD_EXP 60
16716: PUSH
16717: LD_VAR 0 1
16721: ARRAY
16722: PUSH
16723: LD_VAR 0 2
16727: ARRAY
16728: PUSH
16729: LD_INT 2
16731: ARRAY
16732: PPUSH
16733: LD_VAR 0 3
16737: PPUSH
16738: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
16742: LD_ADDR_EXP 60
16746: PUSH
16747: LD_EXP 60
16751: PPUSH
16752: LD_VAR 0 1
16756: PPUSH
16757: LD_EXP 60
16761: PUSH
16762: LD_VAR 0 1
16766: ARRAY
16767: PPUSH
16768: LD_VAR 0 2
16772: PPUSH
16773: CALL_OW 3
16777: PPUSH
16778: CALL_OW 1
16782: ST_TO_ADDR
// end ; end ;
16783: GO 16427
16785: POP
16786: POP
// end ;
16787: GO 16298
16789: POP
16790: POP
// end ;
16791: PPOPN 4
16793: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
16794: LD_INT 0
16796: PPUSH
16797: PPUSH
16798: PPUSH
16799: PPUSH
// result := false ;
16800: LD_ADDR_VAR 0 4
16804: PUSH
16805: LD_INT 0
16807: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
16808: LD_VAR 0 1
16812: PPUSH
16813: CALL_OW 264
16817: PUSH
16818: LD_INT 81
16820: EQUAL
16821: NOT
16822: IFFALSE 16826
// exit ;
16824: GO 17196
// side := GetSide ( unit ) ;
16826: LD_ADDR_VAR 0 6
16830: PUSH
16831: LD_VAR 0 1
16835: PPUSH
16836: CALL_OW 255
16840: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
16841: LD_ADDR_VAR 0 5
16845: PUSH
16846: LD_EXP 59
16850: PPUSH
16851: LD_VAR 0 1
16855: PPUSH
16856: CALL 25499 0 2
16860: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
16861: LD_EXP 60
16865: PUSH
16866: LD_VAR 0 5
16870: ARRAY
16871: PUSH
16872: LD_EXP 61
16876: GREATEREQUAL
16877: IFFALSE 16881
// exit ;
16879: GO 17196
// ComMoveXY ( unit , x , y ) ;
16881: LD_VAR 0 1
16885: PPUSH
16886: LD_VAR 0 2
16890: PPUSH
16891: LD_VAR 0 3
16895: PPUSH
16896: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
16900: LD_INT 35
16902: PPUSH
16903: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
16907: LD_VAR 0 1
16911: PPUSH
16912: LD_VAR 0 2
16916: PPUSH
16917: LD_VAR 0 3
16921: PPUSH
16922: CALL 57555 0 3
16926: NOT
16927: IFFALSE 16940
16929: PUSH
16930: LD_VAR 0 1
16934: PPUSH
16935: CALL_OW 314
16939: AND
16940: IFFALSE 16944
// exit ;
16942: GO 17196
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
16944: LD_VAR 0 2
16948: PPUSH
16949: LD_VAR 0 3
16953: PPUSH
16954: CALL_OW 428
16958: PUSH
16959: LD_VAR 0 1
16963: EQUAL
16964: IFFALSE 16978
16966: PUSH
16967: LD_VAR 0 1
16971: PPUSH
16972: CALL_OW 314
16976: NOT
16977: AND
16978: IFFALSE 16900
// if MineAtPos ( x , y ) then
16980: LD_VAR 0 2
16984: PPUSH
16985: LD_VAR 0 3
16989: PPUSH
16990: CALL_OW 458
16994: IFFALSE 16998
// exit ;
16996: GO 17196
// if your_side = side then
16998: LD_OWVAR 2
17002: PUSH
17003: LD_VAR 0 6
17007: EQUAL
17008: IFFALSE 17027
// PlaySoundXY ( x , y , PlantMine ) ;
17010: LD_VAR 0 2
17014: PPUSH
17015: LD_VAR 0 3
17019: PPUSH
17020: LD_STRING PlantMine
17022: PPUSH
17023: CALL_OW 366
// repeat wait ( 1 ) ;
17027: LD_INT 1
17029: PPUSH
17030: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
17034: LD_VAR 0 2
17038: PPUSH
17039: LD_VAR 0 3
17043: PPUSH
17044: LD_VAR 0 6
17048: PPUSH
17049: LD_INT 0
17051: PPUSH
17052: CALL_OW 454
17056: IFFALSE 17027
// if MineAtPos ( x , y ) then
17058: LD_VAR 0 2
17062: PPUSH
17063: LD_VAR 0 3
17067: PPUSH
17068: CALL_OW 458
17072: IFFALSE 17188
// begin for i in minerMinesList [ index ] do
17074: LD_ADDR_VAR 0 7
17078: PUSH
17079: LD_EXP 60
17083: PUSH
17084: LD_VAR 0 5
17088: ARRAY
17089: PUSH
17090: FOR_IN
17091: IFFALSE 17133
// if i [ 1 ] = x and i [ 2 ] = y then
17093: LD_VAR 0 7
17097: PUSH
17098: LD_INT 1
17100: ARRAY
17101: PUSH
17102: LD_VAR 0 2
17106: EQUAL
17107: IFFALSE 17125
17109: PUSH
17110: LD_VAR 0 7
17114: PUSH
17115: LD_INT 2
17117: ARRAY
17118: PUSH
17119: LD_VAR 0 3
17123: EQUAL
17124: AND
17125: IFFALSE 17131
// exit ;
17127: POP
17128: POP
17129: GO 17196
17131: GO 17090
17133: POP
17134: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
17135: LD_ADDR_EXP 60
17139: PUSH
17140: LD_EXP 60
17144: PPUSH
17145: LD_VAR 0 5
17149: PUSH
17150: LD_EXP 60
17154: PUSH
17155: LD_VAR 0 5
17159: ARRAY
17160: PUSH
17161: LD_INT 1
17163: PLUS
17164: PUSH
17165: EMPTY
17166: LIST
17167: LIST
17168: PPUSH
17169: LD_VAR 0 2
17173: PUSH
17174: LD_VAR 0 3
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: PPUSH
17183: CALL 25716 0 3
17187: ST_TO_ADDR
// end ; result := true ;
17188: LD_ADDR_VAR 0 4
17192: PUSH
17193: LD_INT 1
17195: ST_TO_ADDR
// end ;
17196: LD_VAR 0 4
17200: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
17201: LD_INT 0
17203: PPUSH
17204: PPUSH
17205: PPUSH
// if not unit in minersList then
17206: LD_VAR 0 1
17210: PUSH
17211: LD_EXP 59
17215: IN
17216: NOT
17217: IFFALSE 17221
// exit ;
17219: GO 17428
// index := GetElementIndex ( minersList , unit ) ;
17221: LD_ADDR_VAR 0 6
17225: PUSH
17226: LD_EXP 59
17230: PPUSH
17231: LD_VAR 0 1
17235: PPUSH
17236: CALL 25499 0 2
17240: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
17241: LD_ADDR_VAR 0 5
17245: PUSH
17246: DOUBLE
17247: LD_EXP 60
17251: PUSH
17252: LD_VAR 0 6
17256: ARRAY
17257: INC
17258: ST_TO_ADDR
17259: LD_INT 1
17261: PUSH
17262: FOR_DOWNTO
17263: IFFALSE 17426
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
17265: LD_EXP 60
17269: PUSH
17270: LD_VAR 0 6
17274: ARRAY
17275: PUSH
17276: LD_VAR 0 5
17280: ARRAY
17281: PUSH
17282: LD_INT 1
17284: ARRAY
17285: PPUSH
17286: LD_EXP 60
17290: PUSH
17291: LD_VAR 0 6
17295: ARRAY
17296: PUSH
17297: LD_VAR 0 5
17301: ARRAY
17302: PUSH
17303: LD_INT 2
17305: ARRAY
17306: PPUSH
17307: LD_VAR 0 2
17311: PPUSH
17312: LD_VAR 0 3
17316: PPUSH
17317: CALL_OW 298
17321: PUSH
17322: LD_INT 6
17324: LESS
17325: IFFALSE 17424
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
17327: LD_EXP 60
17331: PUSH
17332: LD_VAR 0 6
17336: ARRAY
17337: PUSH
17338: LD_VAR 0 5
17342: ARRAY
17343: PUSH
17344: LD_INT 1
17346: ARRAY
17347: PPUSH
17348: LD_EXP 60
17352: PUSH
17353: LD_VAR 0 6
17357: ARRAY
17358: PUSH
17359: LD_VAR 0 5
17363: ARRAY
17364: PUSH
17365: LD_INT 2
17367: ARRAY
17368: PPUSH
17369: LD_VAR 0 1
17373: PPUSH
17374: CALL_OW 255
17378: PPUSH
17379: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
17383: LD_ADDR_EXP 60
17387: PUSH
17388: LD_EXP 60
17392: PPUSH
17393: LD_VAR 0 6
17397: PPUSH
17398: LD_EXP 60
17402: PUSH
17403: LD_VAR 0 6
17407: ARRAY
17408: PPUSH
17409: LD_VAR 0 5
17413: PPUSH
17414: CALL_OW 3
17418: PPUSH
17419: CALL_OW 1
17423: ST_TO_ADDR
// end ; end ;
17424: GO 17262
17426: POP
17427: POP
// end ;
17428: LD_VAR 0 4
17432: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
17433: LD_INT 0
17435: PPUSH
17436: PPUSH
17437: PPUSH
17438: PPUSH
17439: PPUSH
17440: PPUSH
17441: PPUSH
17442: PPUSH
17443: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
17444: LD_VAR 0 1
17448: PPUSH
17449: CALL_OW 264
17453: PUSH
17454: LD_INT 81
17456: EQUAL
17457: NOT
17458: IFTRUE 17473
17460: PUSH
17461: LD_VAR 0 1
17465: PUSH
17466: LD_EXP 59
17470: IN
17471: NOT
17472: OR
17473: IFFALSE 17477
// exit ;
17475: GO 17803
// index := GetElementIndex ( minersList , unit ) ;
17477: LD_ADDR_VAR 0 6
17481: PUSH
17482: LD_EXP 59
17486: PPUSH
17487: LD_VAR 0 1
17491: PPUSH
17492: CALL 25499 0 2
17496: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
17497: LD_ADDR_VAR 0 8
17501: PUSH
17502: LD_EXP 61
17506: PUSH
17507: LD_EXP 60
17511: PUSH
17512: LD_VAR 0 6
17516: ARRAY
17517: MINUS
17518: ST_TO_ADDR
// if not minesFreeAmount then
17519: LD_VAR 0 8
17523: NOT
17524: IFFALSE 17528
// exit ;
17526: GO 17803
// tmp := [ ] ;
17528: LD_ADDR_VAR 0 7
17532: PUSH
17533: EMPTY
17534: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
17535: LD_ADDR_VAR 0 5
17539: PUSH
17540: DOUBLE
17541: LD_INT 1
17543: DEC
17544: ST_TO_ADDR
17545: LD_VAR 0 8
17549: PUSH
17550: FOR_TO
17551: IFFALSE 17750
// begin _d := rand ( 0 , 5 ) ;
17553: LD_ADDR_VAR 0 11
17557: PUSH
17558: LD_INT 0
17560: PPUSH
17561: LD_INT 5
17563: PPUSH
17564: CALL_OW 12
17568: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
17569: LD_ADDR_VAR 0 12
17573: PUSH
17574: LD_INT 2
17576: PPUSH
17577: LD_INT 6
17579: PPUSH
17580: CALL_OW 12
17584: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
17585: LD_ADDR_VAR 0 9
17589: PUSH
17590: LD_VAR 0 2
17594: PPUSH
17595: LD_VAR 0 11
17599: PPUSH
17600: LD_VAR 0 12
17604: PPUSH
17605: CALL_OW 272
17609: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
17610: LD_ADDR_VAR 0 10
17614: PUSH
17615: LD_VAR 0 3
17619: PPUSH
17620: LD_VAR 0 11
17624: PPUSH
17625: LD_VAR 0 12
17629: PPUSH
17630: CALL_OW 273
17634: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
17635: LD_VAR 0 9
17639: PPUSH
17640: LD_VAR 0 10
17644: PPUSH
17645: CALL_OW 488
17649: IFFALSE 17673
17651: PUSH
17652: LD_VAR 0 9
17656: PUSH
17657: LD_VAR 0 10
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: PUSH
17666: LD_VAR 0 7
17670: IN
17671: NOT
17672: AND
17673: IFFALSE 17692
17675: PUSH
17676: LD_VAR 0 9
17680: PPUSH
17681: LD_VAR 0 10
17685: PPUSH
17686: CALL_OW 458
17690: NOT
17691: AND
17692: IFFALSE 17734
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
17694: LD_ADDR_VAR 0 7
17698: PUSH
17699: LD_VAR 0 7
17703: PPUSH
17704: LD_VAR 0 7
17708: PUSH
17709: LD_INT 1
17711: PLUS
17712: PPUSH
17713: LD_VAR 0 9
17717: PUSH
17718: LD_VAR 0 10
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PPUSH
17727: CALL_OW 1
17731: ST_TO_ADDR
17732: GO 17748
// i := i - 1 ;
17734: LD_ADDR_VAR 0 5
17738: PUSH
17739: LD_VAR 0 5
17743: PUSH
17744: LD_INT 1
17746: MINUS
17747: ST_TO_ADDR
// end ;
17748: GO 17550
17750: POP
17751: POP
// for i in tmp do
17752: LD_ADDR_VAR 0 5
17756: PUSH
17757: LD_VAR 0 7
17761: PUSH
17762: FOR_IN
17763: IFFALSE 17801
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
17765: LD_VAR 0 1
17769: PPUSH
17770: LD_VAR 0 5
17774: PUSH
17775: LD_INT 1
17777: ARRAY
17778: PPUSH
17779: LD_VAR 0 5
17783: PUSH
17784: LD_INT 2
17786: ARRAY
17787: PPUSH
17788: CALL 16794 0 3
17792: NOT
17793: IFFALSE 17799
// exit ;
17795: POP
17796: POP
17797: GO 17803
17799: GO 17762
17801: POP
17802: POP
// end ;
17803: LD_VAR 0 4
17807: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
17808: LD_INT 0
17810: PPUSH
17811: PPUSH
17812: PPUSH
17813: PPUSH
17814: PPUSH
17815: PPUSH
17816: PPUSH
17817: PPUSH
17818: PPUSH
// if GetClass ( unit ) <> class_sniper then
17819: LD_VAR 0 1
17823: PPUSH
17824: CALL_OW 257
17828: PUSH
17829: LD_INT 5
17831: NONEQUAL
17832: IFFALSE 17836
// exit ;
17834: GO 18306
// dist := 8 ;
17836: LD_ADDR_VAR 0 5
17840: PUSH
17841: LD_INT 8
17843: ST_TO_ADDR
// viewRange := 12 ;
17844: LD_ADDR_VAR 0 8
17848: PUSH
17849: LD_INT 12
17851: ST_TO_ADDR
// side := GetSide ( unit ) ;
17852: LD_ADDR_VAR 0 6
17856: PUSH
17857: LD_VAR 0 1
17861: PPUSH
17862: CALL_OW 255
17866: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
17867: LD_INT 61
17869: PPUSH
17870: LD_VAR 0 6
17874: PPUSH
17875: CALL_OW 321
17879: PUSH
17880: LD_INT 2
17882: EQUAL
17883: IFFALSE 17893
// viewRange := 16 ;
17885: LD_ADDR_VAR 0 8
17889: PUSH
17890: LD_INT 16
17892: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
17893: LD_VAR 0 1
17897: PPUSH
17898: LD_VAR 0 2
17902: PPUSH
17903: LD_VAR 0 3
17907: PPUSH
17908: CALL_OW 297
17912: PUSH
17913: LD_VAR 0 5
17917: GREATER
17918: IFFALSE 17997
// begin ComMoveXY ( unit , x , y ) ;
17920: LD_VAR 0 1
17924: PPUSH
17925: LD_VAR 0 2
17929: PPUSH
17930: LD_VAR 0 3
17934: PPUSH
17935: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17939: LD_INT 35
17941: PPUSH
17942: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
17946: LD_VAR 0 1
17950: PPUSH
17951: LD_VAR 0 2
17955: PPUSH
17956: LD_VAR 0 3
17960: PPUSH
17961: CALL 57555 0 3
17965: NOT
17966: IFFALSE 17970
// exit ;
17968: GO 18306
// until GetDistUnitXY ( unit , x , y ) < dist ;
17970: LD_VAR 0 1
17974: PPUSH
17975: LD_VAR 0 2
17979: PPUSH
17980: LD_VAR 0 3
17984: PPUSH
17985: CALL_OW 297
17989: PUSH
17990: LD_VAR 0 5
17994: LESS
17995: IFFALSE 17939
// end ; ComTurnXY ( unit , x , y ) ;
17997: LD_VAR 0 1
18001: PPUSH
18002: LD_VAR 0 2
18006: PPUSH
18007: LD_VAR 0 3
18011: PPUSH
18012: CALL_OW 118
// repeat if Multiplayer then
18016: LD_OWVAR 4
18020: IFFALSE 18031
// wait ( 35 ) else
18022: LD_INT 35
18024: PPUSH
18025: CALL_OW 67
18029: GO 18038
// wait ( 5 ) ;
18031: LD_INT 5
18033: PPUSH
18034: CALL_OW 67
// _d := GetDir ( unit ) ;
18038: LD_ADDR_VAR 0 11
18042: PUSH
18043: LD_VAR 0 1
18047: PPUSH
18048: CALL_OW 254
18052: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
18053: LD_ADDR_VAR 0 7
18057: PUSH
18058: LD_VAR 0 1
18062: PPUSH
18063: CALL_OW 250
18067: PPUSH
18068: LD_VAR 0 1
18072: PPUSH
18073: CALL_OW 251
18077: PPUSH
18078: LD_VAR 0 2
18082: PPUSH
18083: LD_VAR 0 3
18087: PPUSH
18088: CALL 60191 0 4
18092: ST_TO_ADDR
// until dir = _d ;
18093: LD_VAR 0 7
18097: PUSH
18098: LD_VAR 0 11
18102: EQUAL
18103: IFFALSE 18016
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
18105: LD_ADDR_VAR 0 9
18109: PUSH
18110: LD_VAR 0 1
18114: PPUSH
18115: CALL_OW 250
18119: PPUSH
18120: LD_VAR 0 7
18124: PPUSH
18125: LD_VAR 0 5
18129: PPUSH
18130: CALL_OW 272
18134: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
18135: LD_ADDR_VAR 0 10
18139: PUSH
18140: LD_VAR 0 1
18144: PPUSH
18145: CALL_OW 251
18149: PPUSH
18150: LD_VAR 0 7
18154: PPUSH
18155: LD_VAR 0 5
18159: PPUSH
18160: CALL_OW 273
18164: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18165: LD_VAR 0 9
18169: PPUSH
18170: LD_VAR 0 10
18174: PPUSH
18175: CALL_OW 488
18179: NOT
18180: IFFALSE 18184
// exit ;
18182: GO 18306
// ComAnimCustom ( unit , 1 ) ;
18184: LD_VAR 0 1
18188: PPUSH
18189: LD_INT 1
18191: PPUSH
18192: CALL_OW 592
// p := 0 ;
18196: LD_ADDR_VAR 0 12
18200: PUSH
18201: LD_INT 0
18203: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
18204: LD_VAR 0 9
18208: PPUSH
18209: LD_VAR 0 10
18213: PPUSH
18214: LD_VAR 0 6
18218: PPUSH
18219: LD_VAR 0 8
18223: PPUSH
18224: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
18228: LD_INT 35
18230: PPUSH
18231: CALL_OW 67
// p := Inc ( p ) ;
18235: LD_ADDR_VAR 0 12
18239: PUSH
18240: LD_VAR 0 12
18244: PPUSH
18245: CALL 60147 0 1
18249: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
18250: LD_VAR 0 12
18254: PUSH
18255: LD_INT 3
18257: EQUAL
18258: IFTRUE 18272
18260: PUSH
18261: LD_VAR 0 1
18265: PPUSH
18266: CALL_OW 302
18270: NOT
18271: OR
18272: IFTRUE 18285
18274: PUSH
18275: LD_VAR 0 1
18279: PPUSH
18280: CALL_OW 301
18284: OR
18285: IFFALSE 18228
// RemoveSeeing ( _x , _y , side ) ;
18287: LD_VAR 0 9
18291: PPUSH
18292: LD_VAR 0 10
18296: PPUSH
18297: LD_VAR 0 6
18301: PPUSH
18302: CALL_OW 331
// end ;
18306: LD_VAR 0 4
18310: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
18311: LD_INT 0
18313: PPUSH
18314: PPUSH
18315: PPUSH
18316: PPUSH
18317: PPUSH
18318: PPUSH
18319: PPUSH
18320: PPUSH
18321: PPUSH
18322: PPUSH
18323: PPUSH
// if not unit then
18324: LD_VAR 0 1
18328: NOT
18329: IFFALSE 18333
// exit ;
18331: GO 18604
// side := GetSide ( unit ) ;
18333: LD_ADDR_VAR 0 3
18337: PUSH
18338: LD_VAR 0 1
18342: PPUSH
18343: CALL_OW 255
18347: ST_TO_ADDR
// x := GetX ( unit ) ;
18348: LD_ADDR_VAR 0 5
18352: PUSH
18353: LD_VAR 0 1
18357: PPUSH
18358: CALL_OW 250
18362: ST_TO_ADDR
// y := GetY ( unit ) ;
18363: LD_ADDR_VAR 0 6
18367: PUSH
18368: LD_VAR 0 1
18372: PPUSH
18373: CALL_OW 251
18377: ST_TO_ADDR
// r := 8 ;
18378: LD_ADDR_VAR 0 4
18382: PUSH
18383: LD_INT 8
18385: ST_TO_ADDR
// if x - r < 0 then
18386: LD_VAR 0 5
18390: PUSH
18391: LD_VAR 0 4
18395: MINUS
18396: PUSH
18397: LD_INT 0
18399: LESS
18400: IFFALSE 18412
// min_x := 0 else
18402: LD_ADDR_VAR 0 7
18406: PUSH
18407: LD_INT 0
18409: ST_TO_ADDR
18410: GO 18428
// min_x := x - r ;
18412: LD_ADDR_VAR 0 7
18416: PUSH
18417: LD_VAR 0 5
18421: PUSH
18422: LD_VAR 0 4
18426: MINUS
18427: ST_TO_ADDR
// if y - r < 0 then
18428: LD_VAR 0 6
18432: PUSH
18433: LD_VAR 0 4
18437: MINUS
18438: PUSH
18439: LD_INT 0
18441: LESS
18442: IFFALSE 18454
// min_y := 0 else
18444: LD_ADDR_VAR 0 8
18448: PUSH
18449: LD_INT 0
18451: ST_TO_ADDR
18452: GO 18470
// min_y := y - r ;
18454: LD_ADDR_VAR 0 8
18458: PUSH
18459: LD_VAR 0 6
18463: PUSH
18464: LD_VAR 0 4
18468: MINUS
18469: ST_TO_ADDR
// max_x := x + r ;
18470: LD_ADDR_VAR 0 9
18474: PUSH
18475: LD_VAR 0 5
18479: PUSH
18480: LD_VAR 0 4
18484: PLUS
18485: ST_TO_ADDR
// max_y := y + r ;
18486: LD_ADDR_VAR 0 10
18490: PUSH
18491: LD_VAR 0 6
18495: PUSH
18496: LD_VAR 0 4
18500: PLUS
18501: ST_TO_ADDR
// for _x = min_x to max_x do
18502: LD_ADDR_VAR 0 11
18506: PUSH
18507: DOUBLE
18508: LD_VAR 0 7
18512: DEC
18513: ST_TO_ADDR
18514: LD_VAR 0 9
18518: PUSH
18519: FOR_TO
18520: IFFALSE 18602
// for _y = min_y to max_y do
18522: LD_ADDR_VAR 0 12
18526: PUSH
18527: DOUBLE
18528: LD_VAR 0 8
18532: DEC
18533: ST_TO_ADDR
18534: LD_VAR 0 10
18538: PUSH
18539: FOR_TO
18540: IFFALSE 18598
// begin if not ValidHex ( _x , _y ) then
18542: LD_VAR 0 11
18546: PPUSH
18547: LD_VAR 0 12
18551: PPUSH
18552: CALL_OW 488
18556: NOT
18557: IFFALSE 18561
// continue ;
18559: GO 18539
// if MineAtPos ( _x , _y ) then
18561: LD_VAR 0 11
18565: PPUSH
18566: LD_VAR 0 12
18570: PPUSH
18571: CALL_OW 458
18575: IFFALSE 18596
// ViewMineAtPos ( _x , _y , side ) ;
18577: LD_VAR 0 11
18581: PPUSH
18582: LD_VAR 0 12
18586: PPUSH
18587: LD_VAR 0 3
18591: PPUSH
18592: CALL_OW 457
// end ;
18596: GO 18539
18598: POP
18599: POP
18600: GO 18519
18602: POP
18603: POP
// end ;
18604: LD_VAR 0 2
18608: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
18609: LD_INT 0
18611: PPUSH
18612: PPUSH
18613: PPUSH
18614: PPUSH
18615: PPUSH
18616: PPUSH
18617: PPUSH
// if not units then
18618: LD_VAR 0 1
18622: NOT
18623: IFFALSE 18627
// exit ;
18625: GO 19091
// scaners := [ ] ;
18627: LD_ADDR_VAR 0 6
18631: PUSH
18632: EMPTY
18633: ST_TO_ADDR
// for i in units do
18634: LD_ADDR_VAR 0 3
18638: PUSH
18639: LD_VAR 0 1
18643: PUSH
18644: FOR_IN
18645: IFFALSE 18802
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
18647: LD_VAR 0 3
18651: PPUSH
18652: CALL_OW 264
18656: PUSH
18657: LD_INT 11
18659: NONEQUAL
18660: IFTRUE 18674
18662: PUSH
18663: LD_VAR 0 3
18667: PPUSH
18668: CALL_OW 302
18672: NOT
18673: OR
18674: IFTRUE 18691
18676: PUSH
18677: LD_VAR 0 3
18681: PPUSH
18682: CALL_OW 110
18686: PUSH
18687: LD_INT 502
18689: EQUAL
18690: OR
18691: IFFALSE 18695
// continue ;
18693: GO 18644
// ComStop ( i ) ;
18695: LD_VAR 0 3
18699: PPUSH
18700: CALL_OW 141
// x := GetX ( i ) ;
18704: LD_ADDR_VAR 0 4
18708: PUSH
18709: LD_VAR 0 3
18713: PPUSH
18714: CALL_OW 250
18718: ST_TO_ADDR
// y := GetY ( i ) ;
18719: LD_ADDR_VAR 0 5
18723: PUSH
18724: LD_VAR 0 3
18728: PPUSH
18729: CALL_OW 251
18733: ST_TO_ADDR
// if GetSide ( i ) = your_side then
18734: LD_VAR 0 3
18738: PPUSH
18739: CALL_OW 255
18743: PUSH
18744: LD_OWVAR 2
18748: EQUAL
18749: IFFALSE 18768
// PlaySoundXY ( x , y , mineDetector ) ;
18751: LD_VAR 0 4
18755: PPUSH
18756: LD_VAR 0 5
18760: PPUSH
18761: LD_STRING mineDetector
18763: PPUSH
18764: CALL_OW 366
// scaners := Join ( scaners , i ) ;
18768: LD_ADDR_VAR 0 6
18772: PUSH
18773: LD_VAR 0 6
18777: PPUSH
18778: LD_VAR 0 3
18782: PPUSH
18783: CALL 58774 0 2
18787: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
18788: LD_VAR 0 3
18792: PPUSH
18793: LD_INT 502
18795: PPUSH
18796: CALL_OW 109
// end ;
18800: GO 18644
18802: POP
18803: POP
// if not scaners then
18804: LD_VAR 0 6
18808: NOT
18809: IFFALSE 18813
// exit ;
18811: GO 19091
// wait ( 3 ) ;
18813: LD_INT 3
18815: PPUSH
18816: CALL_OW 67
// timer := 6 ;
18820: LD_ADDR_VAR 0 7
18824: PUSH
18825: LD_INT 6
18827: ST_TO_ADDR
// repeat for i in scaners do
18828: LD_ADDR_VAR 0 3
18832: PUSH
18833: LD_VAR 0 6
18837: PUSH
18838: FOR_IN
18839: IFFALSE 18989
// begin side := GetSide ( i ) ;
18841: LD_ADDR_VAR 0 8
18845: PUSH
18846: LD_VAR 0 3
18850: PPUSH
18851: CALL_OW 255
18855: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
18856: LD_VAR 0 3
18860: PPUSH
18861: CALL_OW 302
18865: NOT
18866: IFTRUE 18879
18868: PUSH
18869: LD_VAR 0 3
18873: PPUSH
18874: CALL_OW 314
18878: OR
18879: IFTRUE 18910
18881: PUSH
18882: LD_VAR 0 3
18886: PPUSH
18887: CALL_OW 263
18891: PUSH
18892: LD_INT 1
18894: EQUAL
18895: IFFALSE 18909
18897: PUSH
18898: LD_VAR 0 3
18902: PPUSH
18903: CALL_OW 311
18907: NOT
18908: AND
18909: OR
18910: IFFALSE 18954
// begin SetUnitDisplayNumber ( i , 0 ) ;
18912: LD_VAR 0 3
18916: PPUSH
18917: LD_INT 0
18919: PPUSH
18920: CALL_OW 505
// SetTag ( i , 0 ) ;
18924: LD_VAR 0 3
18928: PPUSH
18929: LD_INT 0
18931: PPUSH
18932: CALL_OW 109
// scaners := scaners diff i ;
18936: LD_ADDR_VAR 0 6
18940: PUSH
18941: LD_VAR 0 6
18945: PUSH
18946: LD_VAR 0 3
18950: DIFF
18951: ST_TO_ADDR
// continue ;
18952: GO 18838
// end ; if side in [ your_side , 9 ] then
18954: LD_VAR 0 8
18958: PUSH
18959: LD_OWVAR 2
18963: PUSH
18964: LD_INT 9
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: IN
18971: IFFALSE 18987
// SetUnitDisplayNumber ( i , timer ) ;
18973: LD_VAR 0 3
18977: PPUSH
18978: LD_VAR 0 7
18982: PPUSH
18983: CALL_OW 505
// end ;
18987: GO 18838
18989: POP
18990: POP
// if not scaners then
18991: LD_VAR 0 6
18995: NOT
18996: IFFALSE 19000
// exit ;
18998: GO 19091
// timer := Dec ( timer ) ;
19000: LD_ADDR_VAR 0 7
19004: PUSH
19005: LD_VAR 0 7
19009: PPUSH
19010: CALL 60169 0 1
19014: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19015: LD_INT 35
19017: PPUSH
19018: CALL_OW 67
// until timer = 0 ;
19022: LD_VAR 0 7
19026: PUSH
19027: LD_INT 0
19029: EQUAL
19030: IFFALSE 18828
// if not scaners then
19032: LD_VAR 0 6
19036: NOT
19037: IFFALSE 19041
// exit ;
19039: GO 19091
// for i in scaners do
19041: LD_ADDR_VAR 0 3
19045: PUSH
19046: LD_VAR 0 6
19050: PUSH
19051: FOR_IN
19052: IFFALSE 19089
// begin SetUnitDisplayNumber ( i , 0 ) ;
19054: LD_VAR 0 3
19058: PPUSH
19059: LD_INT 0
19061: PPUSH
19062: CALL_OW 505
// SetTag ( i , 0 ) ;
19066: LD_VAR 0 3
19070: PPUSH
19071: LD_INT 0
19073: PPUSH
19074: CALL_OW 109
// RevealDetectorMine ( i ) ;
19078: LD_VAR 0 3
19082: PPUSH
19083: CALL 18311 0 1
// end ;
19087: GO 19051
19089: POP
19090: POP
// end ;
19091: LD_VAR 0 2
19095: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
19096: LD_INT 0
19098: PPUSH
// if p1 = mine_detector_mode then
19099: LD_VAR 0 2
19103: PUSH
19104: LD_INT 103
19106: EQUAL
19107: IFFALSE 19118
// DetectMine ( units ) ;
19109: LD_VAR 0 1
19113: PPUSH
19114: CALL 18609 0 1
// end ; end_of_file
19118: LD_VAR 0 7
19122: RET
// every 0 0$1 do
19123: GO 19125
19125: DISABLE
// begin enable ;
19126: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19127: LD_STRING updateTimer(
19129: PUSH
19130: LD_OWVAR 1
19134: STR
19135: PUSH
19136: LD_STRING );
19138: STR
19139: PPUSH
19140: CALL_OW 559
// end ;
19144: END
// export function SOS_MapStart ( ) ; begin
19145: LD_INT 0
19147: PPUSH
// UpdateFactoryWaypoints ( ) ;
19148: CALL 20086 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19152: CALL 20338 0 0
// ParseMultiDataToLua ( ) ;
19156: CALL 20485 0 0
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
19160: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
19162: PPUSH
19163: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
19167: LD_STRING setSpecLogoNumber(
19169: PUSH
19170: LD_INT 2
19172: STR
19173: PUSH
19174: LD_STRING ,
19176: STR
19177: PUSH
19178: LD_INT 1
19180: STR
19181: PUSH
19182: LD_STRING )
19184: STR
19185: PPUSH
19186: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
19190: LD_STRING setSpecLogoNumber(
19192: PUSH
19193: LD_INT 3
19195: STR
19196: PUSH
19197: LD_STRING ,
19199: STR
19200: PUSH
19201: LD_INT 2
19203: STR
19204: PUSH
19205: LD_STRING )
19207: STR
19208: PPUSH
19209: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
19213: LD_STRING setSpecLogoNumber(
19215: PUSH
19216: LD_INT 4
19218: STR
19219: PUSH
19220: LD_STRING ,
19222: STR
19223: PUSH
19224: LD_INT 3
19226: STR
19227: PUSH
19228: LD_STRING )
19230: STR
19231: PPUSH
19232: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
19236: LD_STRING setSpecLogoNumber(
19238: PUSH
19239: LD_INT 5
19241: STR
19242: PUSH
19243: LD_STRING ,
19245: STR
19246: PUSH
19247: LD_INT 4
19249: STR
19250: PUSH
19251: LD_STRING )
19253: STR
19254: PPUSH
19255: CALL_OW 559
// end ;
19259: LD_VAR 0 1
19263: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
19264: LD_INT 0
19266: PPUSH
19267: PPUSH
19268: PPUSH
19269: PPUSH
19270: PPUSH
19271: PPUSH
19272: PPUSH
19273: PPUSH
19274: PPUSH
// for i := 1 to 8 do
19275: LD_ADDR_VAR 0 2
19279: PUSH
19280: DOUBLE
19281: LD_INT 1
19283: DEC
19284: ST_TO_ADDR
19285: LD_INT 8
19287: PUSH
19288: FOR_TO
19289: IFFALSE 19674
// begin if mpSidePositions [ i ] then
19291: LD_EXP 9
19295: PUSH
19296: LD_VAR 0 2
19300: ARRAY
19301: IFFALSE 19672
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
19303: LD_ADDR_VAR 0 7
19307: PUSH
19308: LD_INT 22
19310: PUSH
19311: LD_VAR 0 2
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: PUSH
19320: LD_INT 21
19322: PUSH
19323: LD_INT 1
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PPUSH
19334: CALL_OW 69
19338: PPUSH
19339: CALL 22798 0 1
19343: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19344: LD_ADDR_VAR 0 9
19348: PUSH
19349: LD_INT 22
19351: PUSH
19352: LD_VAR 0 2
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: LD_INT 2
19363: PUSH
19364: LD_INT 30
19366: PUSH
19367: LD_INT 0
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: LD_INT 30
19376: PUSH
19377: LD_INT 1
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: LIST
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PPUSH
19393: CALL_OW 69
19397: ST_TO_ADDR
// crates := 0 ;
19398: LD_ADDR_VAR 0 4
19402: PUSH
19403: LD_INT 0
19405: ST_TO_ADDR
// oil := 0 ;
19406: LD_ADDR_VAR 0 5
19410: PUSH
19411: LD_INT 0
19413: ST_TO_ADDR
// sib := 0 ;
19414: LD_ADDR_VAR 0 6
19418: PUSH
19419: LD_INT 0
19421: ST_TO_ADDR
// if bases then
19422: LD_VAR 0 9
19426: IFFALSE 19532
// begin for j in bases do
19428: LD_ADDR_VAR 0 3
19432: PUSH
19433: LD_VAR 0 9
19437: PUSH
19438: FOR_IN
19439: IFFALSE 19530
// begin base := GetBase ( j ) ;
19441: LD_ADDR_VAR 0 8
19445: PUSH
19446: LD_VAR 0 3
19450: PPUSH
19451: CALL_OW 274
19455: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
19456: LD_ADDR_VAR 0 4
19460: PUSH
19461: LD_VAR 0 4
19465: PUSH
19466: LD_VAR 0 8
19470: PPUSH
19471: LD_INT 1
19473: PPUSH
19474: CALL_OW 275
19478: PLUS
19479: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
19480: LD_ADDR_VAR 0 5
19484: PUSH
19485: LD_VAR 0 5
19489: PUSH
19490: LD_VAR 0 8
19494: PPUSH
19495: LD_INT 2
19497: PPUSH
19498: CALL_OW 275
19502: PLUS
19503: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
19504: LD_ADDR_VAR 0 6
19508: PUSH
19509: LD_VAR 0 6
19513: PUSH
19514: LD_VAR 0 8
19518: PPUSH
19519: LD_INT 3
19521: PPUSH
19522: CALL_OW 275
19526: PLUS
19527: ST_TO_ADDR
// end ;
19528: GO 19438
19530: POP
19531: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
19532: LD_STRING setSpecText(
19534: PUSH
19535: LD_VAR 0 2
19539: STR
19540: PUSH
19541: LD_STRING ,
19543: STR
19544: PUSH
19545: LD_INT 2
19547: STR
19548: PUSH
19549: LD_STRING ,
19551: STR
19552: PUSH
19553: LD_VAR 0 4
19557: STR
19558: PUSH
19559: LD_STRING )
19561: STR
19562: PPUSH
19563: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
19567: LD_STRING setSpecText(
19569: PUSH
19570: LD_VAR 0 2
19574: STR
19575: PUSH
19576: LD_STRING ,
19578: STR
19579: PUSH
19580: LD_INT 3
19582: STR
19583: PUSH
19584: LD_STRING ,
19586: STR
19587: PUSH
19588: LD_VAR 0 5
19592: STR
19593: PUSH
19594: LD_STRING )
19596: STR
19597: PPUSH
19598: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
19602: LD_STRING setSpecText(
19604: PUSH
19605: LD_VAR 0 2
19609: STR
19610: PUSH
19611: LD_STRING ,
19613: STR
19614: PUSH
19615: LD_INT 4
19617: STR
19618: PUSH
19619: LD_STRING ,
19621: STR
19622: PUSH
19623: LD_VAR 0 6
19627: STR
19628: PUSH
19629: LD_STRING )
19631: STR
19632: PPUSH
19633: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
19637: LD_STRING setSpecText(
19639: PUSH
19640: LD_VAR 0 2
19644: STR
19645: PUSH
19646: LD_STRING ,
19648: STR
19649: PUSH
19650: LD_INT 5
19652: STR
19653: PUSH
19654: LD_STRING ,
19656: STR
19657: PUSH
19658: LD_VAR 0 7
19662: STR
19663: PUSH
19664: LD_STRING )
19666: STR
19667: PPUSH
19668: CALL_OW 559
// end ; end ;
19672: GO 19288
19674: POP
19675: POP
// end ;
19676: LD_VAR 0 1
19680: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
19681: LD_INT 2
19683: PUSH
19684: LD_INT 30
19686: PUSH
19687: LD_INT 0
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PUSH
19694: LD_INT 30
19696: PUSH
19697: LD_INT 1
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: LIST
19708: PPUSH
19709: CALL_OW 69
19713: IFFALSE 19723
19715: GO 19717
19717: DISABLE
// begin enable ;
19718: ENABLE
// UpdateSpectatorBar ;
19719: CALL 19264 0 0
// end ;
19723: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19724: LD_INT 0
19726: PPUSH
// end ;
19727: LD_VAR 0 12
19731: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19732: LD_INT 0
19734: PPUSH
19735: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19736: LD_VAR 0 1
19740: NOT
19741: IFTRUE 19760
19743: PUSH
19744: LD_VAR 0 2
19748: PPUSH
19749: LD_VAR 0 3
19753: PPUSH
19754: CALL_OW 488
19758: NOT
19759: OR
19760: IFTRUE 19795
19762: PUSH
19763: LD_VAR 0 1
19767: PPUSH
19768: CALL_OW 266
19772: PUSH
19773: LD_INT 3
19775: NONEQUAL
19776: IFFALSE 19794
19778: PUSH
19779: LD_VAR 0 1
19783: PPUSH
19784: CALL_OW 247
19788: PUSH
19789: LD_INT 1
19791: EQUAL
19792: NOT
19793: AND
19794: OR
19795: IFFALSE 19799
// exit ;
19797: GO 20081
// if GetType ( factory ) = unit_human then
19799: LD_VAR 0 1
19803: PPUSH
19804: CALL_OW 247
19808: PUSH
19809: LD_INT 1
19811: EQUAL
19812: IFFALSE 19829
// factory := IsInUnit ( factory ) ;
19814: LD_ADDR_VAR 0 1
19818: PUSH
19819: LD_VAR 0 1
19823: PPUSH
19824: CALL_OW 310
19828: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
19829: LD_VAR 0 1
19833: PPUSH
19834: CALL_OW 266
19838: PUSH
19839: LD_INT 3
19841: NONEQUAL
19842: IFFALSE 19846
// exit ;
19844: GO 20081
// for i := 1 to Count ( factoryWaypoints ) do
19846: LD_ADDR_VAR 0 5
19850: PUSH
19851: DOUBLE
19852: LD_INT 1
19854: DEC
19855: ST_TO_ADDR
19856: LD_EXP 62
19860: PPUSH
19861: CALL 22798 0 1
19865: PUSH
19866: FOR_TO
19867: IFFALSE 20029
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
19869: LD_VAR 0 2
19873: PPUSH
19874: LD_VAR 0 3
19878: PPUSH
19879: CALL_OW 428
19883: PUSH
19884: LD_EXP 62
19888: PUSH
19889: LD_VAR 0 5
19893: ARRAY
19894: PUSH
19895: LD_INT 2
19897: ARRAY
19898: EQUAL
19899: IFFALSE 19931
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
19901: LD_ADDR_EXP 62
19905: PUSH
19906: LD_EXP 62
19910: PPUSH
19911: LD_VAR 0 5
19915: PPUSH
19916: CALL_OW 3
19920: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19921: CALL 20086 0 0
// exit ;
19925: POP
19926: POP
19927: GO 20081
// end else
19929: GO 20027
// if factory = factoryWaypoints [ i ] [ 2 ] then
19931: LD_VAR 0 1
19935: PUSH
19936: LD_EXP 62
19940: PUSH
19941: LD_VAR 0 5
19945: ARRAY
19946: PUSH
19947: LD_INT 2
19949: ARRAY
19950: EQUAL
19951: IFFALSE 20027
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
19953: LD_ADDR_EXP 62
19957: PUSH
19958: LD_EXP 62
19962: PPUSH
19963: LD_VAR 0 5
19967: PPUSH
19968: CALL_OW 3
19972: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
19973: LD_ADDR_EXP 62
19977: PUSH
19978: LD_EXP 62
19982: PPUSH
19983: LD_VAR 0 1
19987: PPUSH
19988: CALL_OW 255
19992: PUSH
19993: LD_VAR 0 1
19997: PUSH
19998: LD_VAR 0 2
20002: PUSH
20003: LD_VAR 0 3
20007: PUSH
20008: EMPTY
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: PPUSH
20014: CALL 58774 0 2
20018: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20019: CALL 20086 0 0
// exit ;
20023: POP
20024: POP
20025: GO 20081
// end ; end ;
20027: GO 19866
20029: POP
20030: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
20031: LD_ADDR_EXP 62
20035: PUSH
20036: LD_EXP 62
20040: PPUSH
20041: LD_VAR 0 1
20045: PPUSH
20046: CALL_OW 255
20050: PUSH
20051: LD_VAR 0 1
20055: PUSH
20056: LD_VAR 0 2
20060: PUSH
20061: LD_VAR 0 3
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: PPUSH
20072: CALL 58774 0 2
20076: ST_TO_ADDR
// UpdateFactoryWaypoints ;
20077: CALL 20086 0 0
// end ;
20081: LD_VAR 0 4
20085: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
20086: LD_INT 0
20088: PPUSH
20089: PPUSH
20090: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
20091: LD_STRING resetFactoryWaypoint();
20093: PPUSH
20094: CALL_OW 559
// if factoryWaypoints then
20098: LD_EXP 62
20102: IFFALSE 20223
// begin list := factoryWaypoints ;
20104: LD_ADDR_VAR 0 3
20108: PUSH
20109: LD_EXP 62
20113: ST_TO_ADDR
// for i := 1 to list do
20114: LD_ADDR_VAR 0 2
20118: PUSH
20119: DOUBLE
20120: LD_INT 1
20122: DEC
20123: ST_TO_ADDR
20124: LD_VAR 0 3
20128: PUSH
20129: FOR_TO
20130: IFFALSE 20221
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20132: LD_STRING setFactoryWaypointXY(
20134: PUSH
20135: LD_VAR 0 3
20139: PUSH
20140: LD_VAR 0 2
20144: ARRAY
20145: PUSH
20146: LD_INT 1
20148: ARRAY
20149: STR
20150: PUSH
20151: LD_STRING ,
20153: STR
20154: PUSH
20155: LD_VAR 0 3
20159: PUSH
20160: LD_VAR 0 2
20164: ARRAY
20165: PUSH
20166: LD_INT 2
20168: ARRAY
20169: STR
20170: PUSH
20171: LD_STRING ,
20173: STR
20174: PUSH
20175: LD_VAR 0 3
20179: PUSH
20180: LD_VAR 0 2
20184: ARRAY
20185: PUSH
20186: LD_INT 3
20188: ARRAY
20189: STR
20190: PUSH
20191: LD_STRING ,
20193: STR
20194: PUSH
20195: LD_VAR 0 3
20199: PUSH
20200: LD_VAR 0 2
20204: ARRAY
20205: PUSH
20206: LD_INT 4
20208: ARRAY
20209: STR
20210: PUSH
20211: LD_STRING )
20213: STR
20214: PPUSH
20215: CALL_OW 559
20219: GO 20129
20221: POP
20222: POP
// end ; end ;
20223: LD_VAR 0 1
20227: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
20228: LD_INT 0
20230: PPUSH
// if HexInfo ( x , y ) = warehouse then
20231: LD_VAR 0 2
20235: PPUSH
20236: LD_VAR 0 3
20240: PPUSH
20241: CALL_OW 428
20245: PUSH
20246: LD_VAR 0 1
20250: EQUAL
20251: IFFALSE 20278
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
20253: LD_ADDR_EXP 64
20257: PUSH
20258: LD_EXP 64
20262: PPUSH
20263: LD_VAR 0 1
20267: PPUSH
20268: LD_INT 0
20270: PPUSH
20271: CALL_OW 1
20275: ST_TO_ADDR
20276: GO 20329
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
20278: LD_ADDR_EXP 64
20282: PUSH
20283: LD_EXP 64
20287: PPUSH
20288: LD_VAR 0 1
20292: PPUSH
20293: LD_VAR 0 1
20297: PPUSH
20298: CALL_OW 255
20302: PUSH
20303: LD_VAR 0 1
20307: PUSH
20308: LD_VAR 0 2
20312: PUSH
20313: LD_VAR 0 3
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: PPUSH
20324: CALL_OW 1
20328: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
20329: CALL 20338 0 0
// end ;
20333: LD_VAR 0 4
20337: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
20338: LD_INT 0
20340: PPUSH
20341: PPUSH
20342: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
20343: LD_STRING resetWarehouseGatheringPoints();
20345: PPUSH
20346: CALL_OW 559
// if warehouseGatheringPoints then
20350: LD_EXP 64
20354: IFFALSE 20480
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
20356: LD_ADDR_VAR 0 3
20360: PUSH
20361: LD_EXP 64
20365: PPUSH
20366: CALL 62708 0 1
20370: ST_TO_ADDR
// for i := 1 to list do
20371: LD_ADDR_VAR 0 2
20375: PUSH
20376: DOUBLE
20377: LD_INT 1
20379: DEC
20380: ST_TO_ADDR
20381: LD_VAR 0 3
20385: PUSH
20386: FOR_TO
20387: IFFALSE 20478
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
20389: LD_STRING setWarehouseGatheringPointXY(
20391: PUSH
20392: LD_VAR 0 3
20396: PUSH
20397: LD_VAR 0 2
20401: ARRAY
20402: PUSH
20403: LD_INT 1
20405: ARRAY
20406: STR
20407: PUSH
20408: LD_STRING ,
20410: STR
20411: PUSH
20412: LD_VAR 0 3
20416: PUSH
20417: LD_VAR 0 2
20421: ARRAY
20422: PUSH
20423: LD_INT 2
20425: ARRAY
20426: STR
20427: PUSH
20428: LD_STRING ,
20430: STR
20431: PUSH
20432: LD_VAR 0 3
20436: PUSH
20437: LD_VAR 0 2
20441: ARRAY
20442: PUSH
20443: LD_INT 3
20445: ARRAY
20446: STR
20447: PUSH
20448: LD_STRING ,
20450: STR
20451: PUSH
20452: LD_VAR 0 3
20456: PUSH
20457: LD_VAR 0 2
20461: ARRAY
20462: PUSH
20463: LD_INT 4
20465: ARRAY
20466: STR
20467: PUSH
20468: LD_STRING )
20470: STR
20471: PPUSH
20472: CALL_OW 559
20476: GO 20386
20478: POP
20479: POP
// end ; end ;
20480: LD_VAR 0 1
20484: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
20485: LD_INT 0
20487: PPUSH
20488: PPUSH
// if not mpSidePositions then
20489: LD_EXP 9
20493: NOT
20494: IFFALSE 20498
// exit ;
20496: GO 20569
// result :=  ;
20498: LD_ADDR_VAR 0 1
20502: PUSH
20503: LD_STRING 
20505: ST_TO_ADDR
// for i := 1 to 8 do
20506: LD_ADDR_VAR 0 2
20510: PUSH
20511: DOUBLE
20512: LD_INT 1
20514: DEC
20515: ST_TO_ADDR
20516: LD_INT 8
20518: PUSH
20519: FOR_TO
20520: IFFALSE 20550
// begin result := result & mpSidePositions [ i ] & ; ;
20522: LD_ADDR_VAR 0 1
20526: PUSH
20527: LD_VAR 0 1
20531: PUSH
20532: LD_EXP 9
20536: PUSH
20537: LD_VAR 0 2
20541: ARRAY
20542: STR
20543: PUSH
20544: LD_STRING ;
20546: STR
20547: ST_TO_ADDR
// end ;
20548: GO 20519
20550: POP
20551: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
20552: LD_STRING setMultiplayerRealPosition("
20554: PUSH
20555: LD_VAR 0 1
20559: STR
20560: PUSH
20561: LD_STRING ");
20563: STR
20564: PPUSH
20565: CALL_OW 559
// end ; end_of_file
20569: LD_VAR 0 1
20573: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
20574: LD_INT 0
20576: PPUSH
20577: PPUSH
// if exist_mode then
20578: LD_VAR 0 2
20582: IFFALSE 20628
// begin unit := CreateCharacter ( prefix & ident ) ;
20584: LD_ADDR_VAR 0 5
20588: PUSH
20589: LD_VAR 0 3
20593: PUSH
20594: LD_VAR 0 1
20598: STR
20599: PPUSH
20600: CALL_OW 34
20604: ST_TO_ADDR
// if unit then
20605: LD_VAR 0 5
20609: IFFALSE 20626
// DeleteCharacters ( prefix & ident ) ;
20611: LD_VAR 0 3
20615: PUSH
20616: LD_VAR 0 1
20620: STR
20621: PPUSH
20622: CALL_OW 40
// end else
20626: GO 20643
// unit := NewCharacter ( ident ) ;
20628: LD_ADDR_VAR 0 5
20632: PUSH
20633: LD_VAR 0 1
20637: PPUSH
20638: CALL_OW 25
20642: ST_TO_ADDR
// result := unit ;
20643: LD_ADDR_VAR 0 4
20647: PUSH
20648: LD_VAR 0 5
20652: ST_TO_ADDR
// end ;
20653: LD_VAR 0 4
20657: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
20658: LD_INT 0
20660: PPUSH
20661: PPUSH
// if exist_mode then
20662: LD_VAR 0 2
20666: IFFALSE 20691
// unit := CreateCharacter ( prefix & ident ) else
20668: LD_ADDR_VAR 0 5
20672: PUSH
20673: LD_VAR 0 3
20677: PUSH
20678: LD_VAR 0 1
20682: STR
20683: PPUSH
20684: CALL_OW 34
20688: ST_TO_ADDR
20689: GO 20706
// unit := NewCharacter ( ident ) ;
20691: LD_ADDR_VAR 0 5
20695: PUSH
20696: LD_VAR 0 1
20700: PPUSH
20701: CALL_OW 25
20705: ST_TO_ADDR
// result := unit ;
20706: LD_ADDR_VAR 0 4
20710: PUSH
20711: LD_VAR 0 5
20715: ST_TO_ADDR
// end ;
20716: LD_VAR 0 4
20720: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
20721: LD_INT 0
20723: PPUSH
20724: PPUSH
// if not side or not nation then
20725: LD_VAR 0 1
20729: NOT
20730: IFTRUE 20739
20732: PUSH
20733: LD_VAR 0 2
20737: NOT
20738: OR
20739: IFFALSE 20743
// exit ;
20741: GO 21537
// case nation of nation_american :
20743: LD_VAR 0 2
20747: PUSH
20748: LD_INT 1
20750: DOUBLE
20751: EQUAL
20752: IFTRUE 20756
20754: GO 20978
20756: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
20757: LD_ADDR_VAR 0 4
20761: PUSH
20762: LD_INT 35
20764: PUSH
20765: LD_INT 45
20767: PUSH
20768: LD_INT 46
20770: PUSH
20771: LD_INT 47
20773: PUSH
20774: LD_INT 82
20776: PUSH
20777: LD_INT 83
20779: PUSH
20780: LD_INT 84
20782: PUSH
20783: LD_INT 85
20785: PUSH
20786: LD_INT 86
20788: PUSH
20789: LD_INT 1
20791: PUSH
20792: LD_INT 2
20794: PUSH
20795: LD_INT 6
20797: PUSH
20798: LD_INT 15
20800: PUSH
20801: LD_INT 16
20803: PUSH
20804: LD_INT 7
20806: PUSH
20807: LD_INT 12
20809: PUSH
20810: LD_INT 13
20812: PUSH
20813: LD_INT 10
20815: PUSH
20816: LD_INT 14
20818: PUSH
20819: LD_INT 20
20821: PUSH
20822: LD_INT 21
20824: PUSH
20825: LD_INT 22
20827: PUSH
20828: LD_INT 25
20830: PUSH
20831: LD_INT 32
20833: PUSH
20834: LD_INT 27
20836: PUSH
20837: LD_INT 36
20839: PUSH
20840: LD_INT 69
20842: PUSH
20843: LD_INT 39
20845: PUSH
20846: LD_INT 34
20848: PUSH
20849: LD_INT 40
20851: PUSH
20852: LD_INT 48
20854: PUSH
20855: LD_INT 49
20857: PUSH
20858: LD_INT 50
20860: PUSH
20861: LD_INT 51
20863: PUSH
20864: LD_INT 52
20866: PUSH
20867: LD_INT 53
20869: PUSH
20870: LD_INT 54
20872: PUSH
20873: LD_INT 55
20875: PUSH
20876: LD_INT 56
20878: PUSH
20879: LD_INT 57
20881: PUSH
20882: LD_INT 58
20884: PUSH
20885: LD_INT 59
20887: PUSH
20888: LD_INT 60
20890: PUSH
20891: LD_INT 61
20893: PUSH
20894: LD_INT 62
20896: PUSH
20897: LD_INT 80
20899: PUSH
20900: LD_INT 82
20902: PUSH
20903: LD_INT 83
20905: PUSH
20906: LD_INT 84
20908: PUSH
20909: LD_INT 85
20911: PUSH
20912: LD_INT 86
20914: PUSH
20915: LD_INT 90
20917: PUSH
20918: LD_INT 93
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: ST_TO_ADDR
20976: GO 21459
20978: LD_INT 2
20980: DOUBLE
20981: EQUAL
20982: IFTRUE 20986
20984: GO 21220
20986: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
20987: LD_ADDR_VAR 0 4
20991: PUSH
20992: LD_INT 35
20994: PUSH
20995: LD_INT 45
20997: PUSH
20998: LD_INT 46
21000: PUSH
21001: LD_INT 47
21003: PUSH
21004: LD_INT 82
21006: PUSH
21007: LD_INT 83
21009: PUSH
21010: LD_INT 84
21012: PUSH
21013: LD_INT 85
21015: PUSH
21016: LD_INT 87
21018: PUSH
21019: LD_INT 70
21021: PUSH
21022: LD_INT 1
21024: PUSH
21025: LD_INT 11
21027: PUSH
21028: LD_INT 3
21030: PUSH
21031: LD_INT 4
21033: PUSH
21034: LD_INT 5
21036: PUSH
21037: LD_INT 6
21039: PUSH
21040: LD_INT 15
21042: PUSH
21043: LD_INT 18
21045: PUSH
21046: LD_INT 7
21048: PUSH
21049: LD_INT 17
21051: PUSH
21052: LD_INT 8
21054: PUSH
21055: LD_INT 20
21057: PUSH
21058: LD_INT 21
21060: PUSH
21061: LD_INT 22
21063: PUSH
21064: LD_INT 72
21066: PUSH
21067: LD_INT 26
21069: PUSH
21070: LD_INT 69
21072: PUSH
21073: LD_INT 39
21075: PUSH
21076: LD_INT 40
21078: PUSH
21079: LD_INT 41
21081: PUSH
21082: LD_INT 42
21084: PUSH
21085: LD_INT 43
21087: PUSH
21088: LD_INT 48
21090: PUSH
21091: LD_INT 49
21093: PUSH
21094: LD_INT 50
21096: PUSH
21097: LD_INT 51
21099: PUSH
21100: LD_INT 52
21102: PUSH
21103: LD_INT 53
21105: PUSH
21106: LD_INT 54
21108: PUSH
21109: LD_INT 55
21111: PUSH
21112: LD_INT 56
21114: PUSH
21115: LD_INT 60
21117: PUSH
21118: LD_INT 61
21120: PUSH
21121: LD_INT 62
21123: PUSH
21124: LD_INT 66
21126: PUSH
21127: LD_INT 67
21129: PUSH
21130: LD_INT 68
21132: PUSH
21133: LD_INT 81
21135: PUSH
21136: LD_INT 82
21138: PUSH
21139: LD_INT 83
21141: PUSH
21142: LD_INT 84
21144: PUSH
21145: LD_INT 85
21147: PUSH
21148: LD_INT 87
21150: PUSH
21151: LD_INT 88
21153: PUSH
21154: LD_INT 92
21156: PUSH
21157: LD_INT 94
21159: PUSH
21160: EMPTY
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: ST_TO_ADDR
21218: GO 21459
21220: LD_INT 3
21222: DOUBLE
21223: EQUAL
21224: IFTRUE 21228
21226: GO 21458
21228: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
21229: LD_ADDR_VAR 0 4
21233: PUSH
21234: LD_INT 46
21236: PUSH
21237: LD_INT 47
21239: PUSH
21240: LD_INT 1
21242: PUSH
21243: LD_INT 2
21245: PUSH
21246: LD_INT 82
21248: PUSH
21249: LD_INT 83
21251: PUSH
21252: LD_INT 84
21254: PUSH
21255: LD_INT 85
21257: PUSH
21258: LD_INT 86
21260: PUSH
21261: LD_INT 11
21263: PUSH
21264: LD_INT 9
21266: PUSH
21267: LD_INT 20
21269: PUSH
21270: LD_INT 19
21272: PUSH
21273: LD_INT 21
21275: PUSH
21276: LD_INT 24
21278: PUSH
21279: LD_INT 22
21281: PUSH
21282: LD_INT 25
21284: PUSH
21285: LD_INT 28
21287: PUSH
21288: LD_INT 29
21290: PUSH
21291: LD_INT 30
21293: PUSH
21294: LD_INT 31
21296: PUSH
21297: LD_INT 37
21299: PUSH
21300: LD_INT 38
21302: PUSH
21303: LD_INT 32
21305: PUSH
21306: LD_INT 27
21308: PUSH
21309: LD_INT 33
21311: PUSH
21312: LD_INT 69
21314: PUSH
21315: LD_INT 39
21317: PUSH
21318: LD_INT 34
21320: PUSH
21321: LD_INT 40
21323: PUSH
21324: LD_INT 71
21326: PUSH
21327: LD_INT 23
21329: PUSH
21330: LD_INT 44
21332: PUSH
21333: LD_INT 48
21335: PUSH
21336: LD_INT 49
21338: PUSH
21339: LD_INT 50
21341: PUSH
21342: LD_INT 51
21344: PUSH
21345: LD_INT 52
21347: PUSH
21348: LD_INT 53
21350: PUSH
21351: LD_INT 54
21353: PUSH
21354: LD_INT 55
21356: PUSH
21357: LD_INT 56
21359: PUSH
21360: LD_INT 57
21362: PUSH
21363: LD_INT 58
21365: PUSH
21366: LD_INT 59
21368: PUSH
21369: LD_INT 63
21371: PUSH
21372: LD_INT 64
21374: PUSH
21375: LD_INT 65
21377: PUSH
21378: LD_INT 82
21380: PUSH
21381: LD_INT 83
21383: PUSH
21384: LD_INT 84
21386: PUSH
21387: LD_INT 85
21389: PUSH
21390: LD_INT 86
21392: PUSH
21393: LD_INT 89
21395: PUSH
21396: LD_INT 91
21398: PUSH
21399: EMPTY
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: ST_TO_ADDR
21456: GO 21459
21458: POP
// if state > - 1 and state < 3 then
21459: LD_VAR 0 3
21463: PUSH
21464: LD_INT 1
21466: NEG
21467: GREATER
21468: IFFALSE 21480
21470: PUSH
21471: LD_VAR 0 3
21475: PUSH
21476: LD_INT 3
21478: LESS
21479: AND
21480: IFFALSE 21537
// for i in result do
21482: LD_ADDR_VAR 0 5
21486: PUSH
21487: LD_VAR 0 4
21491: PUSH
21492: FOR_IN
21493: IFFALSE 21535
// if GetTech ( i , side ) <> state then
21495: LD_VAR 0 5
21499: PPUSH
21500: LD_VAR 0 1
21504: PPUSH
21505: CALL_OW 321
21509: PUSH
21510: LD_VAR 0 3
21514: NONEQUAL
21515: IFFALSE 21533
// result := result diff i ;
21517: LD_ADDR_VAR 0 4
21521: PUSH
21522: LD_VAR 0 4
21526: PUSH
21527: LD_VAR 0 5
21531: DIFF
21532: ST_TO_ADDR
21533: GO 21492
21535: POP
21536: POP
// end ;
21537: LD_VAR 0 4
21541: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
21542: LD_INT 0
21544: PPUSH
21545: PPUSH
21546: PPUSH
// result := true ;
21547: LD_ADDR_VAR 0 3
21551: PUSH
21552: LD_INT 1
21554: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
21555: LD_ADDR_VAR 0 5
21559: PUSH
21560: LD_VAR 0 2
21564: PPUSH
21565: CALL_OW 480
21569: ST_TO_ADDR
// if not tmp then
21570: LD_VAR 0 5
21574: NOT
21575: IFFALSE 21579
// exit ;
21577: GO 21628
// for i in tmp do
21579: LD_ADDR_VAR 0 4
21583: PUSH
21584: LD_VAR 0 5
21588: PUSH
21589: FOR_IN
21590: IFFALSE 21626
// if GetTech ( i , side ) <> state_researched then
21592: LD_VAR 0 4
21596: PPUSH
21597: LD_VAR 0 1
21601: PPUSH
21602: CALL_OW 321
21606: PUSH
21607: LD_INT 2
21609: NONEQUAL
21610: IFFALSE 21624
// begin result := false ;
21612: LD_ADDR_VAR 0 3
21616: PUSH
21617: LD_INT 0
21619: ST_TO_ADDR
// exit ;
21620: POP
21621: POP
21622: GO 21628
// end ;
21624: GO 21589
21626: POP
21627: POP
// end ;
21628: LD_VAR 0 3
21632: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
21633: LD_INT 0
21635: PPUSH
21636: PPUSH
21637: PPUSH
21638: PPUSH
21639: PPUSH
21640: PPUSH
21641: PPUSH
21642: PPUSH
21643: PPUSH
21644: PPUSH
21645: PPUSH
21646: PPUSH
21647: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
21648: LD_VAR 0 1
21652: NOT
21653: IFTRUE 21670
21655: PUSH
21656: LD_VAR 0 1
21660: PPUSH
21661: CALL_OW 257
21665: PUSH
21666: LD_INT 9
21668: NONEQUAL
21669: OR
21670: IFFALSE 21674
// exit ;
21672: GO 22253
// side := GetSide ( unit ) ;
21674: LD_ADDR_VAR 0 9
21678: PUSH
21679: LD_VAR 0 1
21683: PPUSH
21684: CALL_OW 255
21688: ST_TO_ADDR
// tech_space := tech_spacanom ;
21689: LD_ADDR_VAR 0 12
21693: PUSH
21694: LD_INT 29
21696: ST_TO_ADDR
// tech_time := tech_taurad ;
21697: LD_ADDR_VAR 0 13
21701: PUSH
21702: LD_INT 28
21704: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
21705: LD_ADDR_VAR 0 11
21709: PUSH
21710: LD_VAR 0 1
21714: PPUSH
21715: CALL_OW 310
21719: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
21720: LD_VAR 0 11
21724: PPUSH
21725: CALL_OW 247
21729: PUSH
21730: LD_INT 2
21732: EQUAL
21733: IFFALSE 21737
// exit ;
21735: GO 22253
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21737: LD_ADDR_VAR 0 8
21741: PUSH
21742: LD_INT 81
21744: PUSH
21745: LD_VAR 0 9
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: PUSH
21754: LD_INT 3
21756: PUSH
21757: LD_INT 21
21759: PUSH
21760: LD_INT 3
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: PPUSH
21775: CALL_OW 69
21779: ST_TO_ADDR
// if not tmp then
21780: LD_VAR 0 8
21784: NOT
21785: IFFALSE 21789
// exit ;
21787: GO 22253
// if in_unit then
21789: LD_VAR 0 11
21793: IFFALSE 21817
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
21795: LD_ADDR_VAR 0 10
21799: PUSH
21800: LD_VAR 0 8
21804: PPUSH
21805: LD_VAR 0 11
21809: PPUSH
21810: CALL_OW 74
21814: ST_TO_ADDR
21815: GO 21837
// enemy := NearestUnitToUnit ( tmp , unit ) ;
21817: LD_ADDR_VAR 0 10
21821: PUSH
21822: LD_VAR 0 8
21826: PPUSH
21827: LD_VAR 0 1
21831: PPUSH
21832: CALL_OW 74
21836: ST_TO_ADDR
// if not enemy then
21837: LD_VAR 0 10
21841: NOT
21842: IFFALSE 21846
// exit ;
21844: GO 22253
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
21846: LD_VAR 0 11
21850: IFFALSE 21872
21852: PUSH
21853: LD_VAR 0 11
21857: PPUSH
21858: LD_VAR 0 10
21862: PPUSH
21863: CALL_OW 296
21867: PUSH
21868: LD_INT 13
21870: GREATER
21871: AND
21872: IFTRUE 21894
21874: PUSH
21875: LD_VAR 0 1
21879: PPUSH
21880: LD_VAR 0 10
21884: PPUSH
21885: CALL_OW 296
21889: PUSH
21890: LD_INT 12
21892: GREATER
21893: OR
21894: IFFALSE 21898
// exit ;
21896: GO 22253
// missile := [ 1 ] ;
21898: LD_ADDR_VAR 0 14
21902: PUSH
21903: LD_INT 1
21905: PUSH
21906: EMPTY
21907: LIST
21908: ST_TO_ADDR
// if Researched ( side , tech_space ) then
21909: LD_VAR 0 9
21913: PPUSH
21914: LD_VAR 0 12
21918: PPUSH
21919: CALL_OW 325
21923: IFFALSE 21952
// missile := Replace ( missile , missile + 1 , 2 ) ;
21925: LD_ADDR_VAR 0 14
21929: PUSH
21930: LD_VAR 0 14
21934: PPUSH
21935: LD_VAR 0 14
21939: PUSH
21940: LD_INT 1
21942: PLUS
21943: PPUSH
21944: LD_INT 2
21946: PPUSH
21947: CALL_OW 1
21951: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
21952: LD_VAR 0 9
21956: PPUSH
21957: LD_VAR 0 13
21961: PPUSH
21962: CALL_OW 325
21966: IFFALSE 21990
21968: PUSH
21969: LD_VAR 0 10
21973: PPUSH
21974: CALL_OW 255
21978: PPUSH
21979: LD_VAR 0 13
21983: PPUSH
21984: CALL_OW 325
21988: NOT
21989: AND
21990: IFFALSE 22019
// missile := Replace ( missile , missile + 1 , 3 ) ;
21992: LD_ADDR_VAR 0 14
21996: PUSH
21997: LD_VAR 0 14
22001: PPUSH
22002: LD_VAR 0 14
22006: PUSH
22007: LD_INT 1
22009: PLUS
22010: PPUSH
22011: LD_INT 3
22013: PPUSH
22014: CALL_OW 1
22018: ST_TO_ADDR
// if missile < 2 then
22019: LD_VAR 0 14
22023: PUSH
22024: LD_INT 2
22026: LESS
22027: IFFALSE 22031
// exit ;
22029: GO 22253
// x := GetX ( enemy ) ;
22031: LD_ADDR_VAR 0 4
22035: PUSH
22036: LD_VAR 0 10
22040: PPUSH
22041: CALL_OW 250
22045: ST_TO_ADDR
// y := GetY ( enemy ) ;
22046: LD_ADDR_VAR 0 5
22050: PUSH
22051: LD_VAR 0 10
22055: PPUSH
22056: CALL_OW 251
22060: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22061: LD_ADDR_VAR 0 6
22065: PUSH
22066: LD_VAR 0 4
22070: PUSH
22071: LD_INT 1
22073: NEG
22074: PPUSH
22075: LD_INT 1
22077: PPUSH
22078: CALL_OW 12
22082: PLUS
22083: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22084: LD_ADDR_VAR 0 7
22088: PUSH
22089: LD_VAR 0 5
22093: PUSH
22094: LD_INT 1
22096: NEG
22097: PPUSH
22098: LD_INT 1
22100: PPUSH
22101: CALL_OW 12
22105: PLUS
22106: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22107: LD_VAR 0 6
22111: PPUSH
22112: LD_VAR 0 7
22116: PPUSH
22117: CALL_OW 488
22121: NOT
22122: IFFALSE 22144
// begin _x := x ;
22124: LD_ADDR_VAR 0 6
22128: PUSH
22129: LD_VAR 0 4
22133: ST_TO_ADDR
// _y := y ;
22134: LD_ADDR_VAR 0 7
22138: PUSH
22139: LD_VAR 0 5
22143: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22144: LD_ADDR_VAR 0 3
22148: PUSH
22149: LD_INT 1
22151: PPUSH
22152: LD_VAR 0 14
22156: PPUSH
22157: CALL_OW 12
22161: ST_TO_ADDR
// case i of 1 :
22162: LD_VAR 0 3
22166: PUSH
22167: LD_INT 1
22169: DOUBLE
22170: EQUAL
22171: IFTRUE 22175
22173: GO 22192
22175: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22176: LD_VAR 0 1
22180: PPUSH
22181: LD_VAR 0 10
22185: PPUSH
22186: CALL_OW 115
22190: GO 22253
22192: LD_INT 2
22194: DOUBLE
22195: EQUAL
22196: IFTRUE 22200
22198: GO 22222
22200: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22201: LD_VAR 0 1
22205: PPUSH
22206: LD_VAR 0 6
22210: PPUSH
22211: LD_VAR 0 7
22215: PPUSH
22216: CALL_OW 153
22220: GO 22253
22222: LD_INT 3
22224: DOUBLE
22225: EQUAL
22226: IFTRUE 22230
22228: GO 22252
22230: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22231: LD_VAR 0 1
22235: PPUSH
22236: LD_VAR 0 6
22240: PPUSH
22241: LD_VAR 0 7
22245: PPUSH
22246: CALL_OW 154
22250: GO 22253
22252: POP
// end ;
22253: LD_VAR 0 2
22257: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22258: LD_INT 0
22260: PPUSH
22261: PPUSH
22262: PPUSH
22263: PPUSH
22264: PPUSH
22265: PPUSH
// if not unit or not building then
22266: LD_VAR 0 1
22270: NOT
22271: IFTRUE 22280
22273: PUSH
22274: LD_VAR 0 2
22278: NOT
22279: OR
22280: IFFALSE 22284
// exit ;
22282: GO 22442
// x := GetX ( building ) ;
22284: LD_ADDR_VAR 0 5
22288: PUSH
22289: LD_VAR 0 2
22293: PPUSH
22294: CALL_OW 250
22298: ST_TO_ADDR
// y := GetY ( building ) ;
22299: LD_ADDR_VAR 0 6
22303: PUSH
22304: LD_VAR 0 2
22308: PPUSH
22309: CALL_OW 251
22313: ST_TO_ADDR
// for i := 0 to 5 do
22314: LD_ADDR_VAR 0 4
22318: PUSH
22319: DOUBLE
22320: LD_INT 0
22322: DEC
22323: ST_TO_ADDR
22324: LD_INT 5
22326: PUSH
22327: FOR_TO
22328: IFFALSE 22440
// begin _x := ShiftX ( x , i , 3 ) ;
22330: LD_ADDR_VAR 0 7
22334: PUSH
22335: LD_VAR 0 5
22339: PPUSH
22340: LD_VAR 0 4
22344: PPUSH
22345: LD_INT 3
22347: PPUSH
22348: CALL_OW 272
22352: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
22353: LD_ADDR_VAR 0 8
22357: PUSH
22358: LD_VAR 0 6
22362: PPUSH
22363: LD_VAR 0 4
22367: PPUSH
22368: LD_INT 3
22370: PPUSH
22371: CALL_OW 273
22375: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22376: LD_VAR 0 7
22380: PPUSH
22381: LD_VAR 0 8
22385: PPUSH
22386: CALL_OW 488
22390: NOT
22391: IFFALSE 22395
// continue ;
22393: GO 22327
// if HexInfo ( _x , _y ) = 0 then
22395: LD_VAR 0 7
22399: PPUSH
22400: LD_VAR 0 8
22404: PPUSH
22405: CALL_OW 428
22409: PUSH
22410: LD_INT 0
22412: EQUAL
22413: IFFALSE 22438
// begin ComMoveXY ( unit , _x , _y ) ;
22415: LD_VAR 0 1
22419: PPUSH
22420: LD_VAR 0 7
22424: PPUSH
22425: LD_VAR 0 8
22429: PPUSH
22430: CALL_OW 111
// exit ;
22434: POP
22435: POP
22436: GO 22442
// end ; end ;
22438: GO 22327
22440: POP
22441: POP
// end ;
22442: LD_VAR 0 3
22446: RET
// export function ScanBase ( side , base_area ) ; begin
22447: LD_INT 0
22449: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
22450: LD_ADDR_VAR 0 3
22454: PUSH
22455: LD_VAR 0 2
22459: PPUSH
22460: LD_INT 81
22462: PUSH
22463: LD_VAR 0 1
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: PPUSH
22472: CALL_OW 70
22476: ST_TO_ADDR
// end ;
22477: LD_VAR 0 3
22481: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22482: LD_INT 0
22484: PPUSH
22485: PPUSH
22486: PPUSH
22487: PPUSH
// result := false ;
22488: LD_ADDR_VAR 0 2
22492: PUSH
22493: LD_INT 0
22495: ST_TO_ADDR
// side := GetSide ( unit ) ;
22496: LD_ADDR_VAR 0 3
22500: PUSH
22501: LD_VAR 0 1
22505: PPUSH
22506: CALL_OW 255
22510: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22511: LD_ADDR_VAR 0 4
22515: PUSH
22516: LD_VAR 0 1
22520: PPUSH
22521: CALL_OW 248
22525: ST_TO_ADDR
// case nat of 1 :
22526: LD_VAR 0 4
22530: PUSH
22531: LD_INT 1
22533: DOUBLE
22534: EQUAL
22535: IFTRUE 22539
22537: GO 22550
22539: POP
// tech := tech_lassight ; 2 :
22540: LD_ADDR_VAR 0 5
22544: PUSH
22545: LD_INT 12
22547: ST_TO_ADDR
22548: GO 22589
22550: LD_INT 2
22552: DOUBLE
22553: EQUAL
22554: IFTRUE 22558
22556: GO 22569
22558: POP
// tech := tech_mortar ; 3 :
22559: LD_ADDR_VAR 0 5
22563: PUSH
22564: LD_INT 41
22566: ST_TO_ADDR
22567: GO 22589
22569: LD_INT 3
22571: DOUBLE
22572: EQUAL
22573: IFTRUE 22577
22575: GO 22588
22577: POP
// tech := tech_bazooka ; end ;
22578: LD_ADDR_VAR 0 5
22582: PUSH
22583: LD_INT 44
22585: ST_TO_ADDR
22586: GO 22589
22588: POP
// if Researched ( side , tech ) then
22589: LD_VAR 0 3
22593: PPUSH
22594: LD_VAR 0 5
22598: PPUSH
22599: CALL_OW 325
22603: IFFALSE 22630
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22605: LD_ADDR_VAR 0 2
22609: PUSH
22610: LD_INT 5
22612: PUSH
22613: LD_INT 8
22615: PUSH
22616: LD_INT 9
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: LIST
22623: PUSH
22624: LD_VAR 0 4
22628: ARRAY
22629: ST_TO_ADDR
// end ;
22630: LD_VAR 0 2
22634: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22635: LD_INT 0
22637: PPUSH
22638: PPUSH
22639: PPUSH
// if not mines then
22640: LD_VAR 0 2
22644: NOT
22645: IFFALSE 22649
// exit ;
22647: GO 22793
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22649: LD_ADDR_VAR 0 5
22653: PUSH
22654: LD_INT 81
22656: PUSH
22657: LD_VAR 0 1
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: LD_INT 3
22668: PUSH
22669: LD_INT 21
22671: PUSH
22672: LD_INT 3
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PPUSH
22687: CALL_OW 69
22691: ST_TO_ADDR
// for i in mines do
22692: LD_ADDR_VAR 0 4
22696: PUSH
22697: LD_VAR 0 2
22701: PUSH
22702: FOR_IN
22703: IFFALSE 22791
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22705: LD_VAR 0 4
22709: PUSH
22710: LD_INT 1
22712: ARRAY
22713: PPUSH
22714: LD_VAR 0 4
22718: PUSH
22719: LD_INT 2
22721: ARRAY
22722: PPUSH
22723: CALL_OW 458
22727: NOT
22728: IFFALSE 22732
// continue ;
22730: GO 22702
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22732: LD_VAR 0 4
22736: PUSH
22737: LD_INT 1
22739: ARRAY
22740: PPUSH
22741: LD_VAR 0 4
22745: PUSH
22746: LD_INT 2
22748: ARRAY
22749: PPUSH
22750: CALL_OW 428
22754: PUSH
22755: LD_VAR 0 5
22759: IN
22760: IFFALSE 22789
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22762: LD_VAR 0 4
22766: PUSH
22767: LD_INT 1
22769: ARRAY
22770: PPUSH
22771: LD_VAR 0 4
22775: PUSH
22776: LD_INT 2
22778: ARRAY
22779: PPUSH
22780: LD_VAR 0 1
22784: PPUSH
22785: CALL_OW 456
// end ;
22789: GO 22702
22791: POP
22792: POP
// end ;
22793: LD_VAR 0 3
22797: RET
// export function Count ( array ) ; begin
22798: LD_INT 0
22800: PPUSH
// result := array + 0 ;
22801: LD_ADDR_VAR 0 2
22805: PUSH
22806: LD_VAR 0 1
22810: PUSH
22811: LD_INT 0
22813: PLUS
22814: ST_TO_ADDR
// end ;
22815: LD_VAR 0 2
22819: RET
// export function IsEmpty ( building ) ; begin
22820: LD_INT 0
22822: PPUSH
// if not building then
22823: LD_VAR 0 1
22827: NOT
22828: IFFALSE 22832
// exit ;
22830: GO 22875
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22832: LD_ADDR_VAR 0 2
22836: PUSH
22837: LD_VAR 0 1
22841: PUSH
22842: LD_INT 22
22844: PUSH
22845: LD_VAR 0 1
22849: PPUSH
22850: CALL_OW 255
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: PUSH
22859: LD_INT 58
22861: PUSH
22862: EMPTY
22863: LIST
22864: PUSH
22865: EMPTY
22866: LIST
22867: LIST
22868: PPUSH
22869: CALL_OW 69
22873: IN
22874: ST_TO_ADDR
// end ;
22875: LD_VAR 0 2
22879: RET
// export function IsNotFull ( building ) ; var places ; begin
22880: LD_INT 0
22882: PPUSH
22883: PPUSH
// if not building then
22884: LD_VAR 0 1
22888: NOT
22889: IFFALSE 22893
// exit ;
22891: GO 22921
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
22893: LD_ADDR_VAR 0 2
22897: PUSH
22898: LD_VAR 0 1
22902: PPUSH
22903: LD_INT 3
22905: PUSH
22906: LD_INT 62
22908: PUSH
22909: EMPTY
22910: LIST
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PPUSH
22916: CALL_OW 72
22920: ST_TO_ADDR
// end ;
22921: LD_VAR 0 2
22925: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
22926: LD_INT 0
22928: PPUSH
22929: PPUSH
22930: PPUSH
22931: PPUSH
// tmp := [ ] ;
22932: LD_ADDR_VAR 0 3
22936: PUSH
22937: EMPTY
22938: ST_TO_ADDR
// list := [ ] ;
22939: LD_ADDR_VAR 0 5
22943: PUSH
22944: EMPTY
22945: ST_TO_ADDR
// for i = 16 to 25 do
22946: LD_ADDR_VAR 0 4
22950: PUSH
22951: DOUBLE
22952: LD_INT 16
22954: DEC
22955: ST_TO_ADDR
22956: LD_INT 25
22958: PUSH
22959: FOR_TO
22960: IFFALSE 23033
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
22962: LD_ADDR_VAR 0 3
22966: PUSH
22967: LD_VAR 0 3
22971: PUSH
22972: LD_INT 22
22974: PUSH
22975: LD_VAR 0 1
22979: PPUSH
22980: CALL_OW 255
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PUSH
22989: LD_INT 91
22991: PUSH
22992: LD_VAR 0 1
22996: PUSH
22997: LD_INT 6
22999: PUSH
23000: EMPTY
23001: LIST
23002: LIST
23003: LIST
23004: PUSH
23005: LD_INT 30
23007: PUSH
23008: LD_VAR 0 4
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: LIST
23021: PUSH
23022: EMPTY
23023: LIST
23024: PPUSH
23025: CALL_OW 69
23029: ADD
23030: ST_TO_ADDR
23031: GO 22959
23033: POP
23034: POP
// for i = 1 to tmp do
23035: LD_ADDR_VAR 0 4
23039: PUSH
23040: DOUBLE
23041: LD_INT 1
23043: DEC
23044: ST_TO_ADDR
23045: LD_VAR 0 3
23049: PUSH
23050: FOR_TO
23051: IFFALSE 23139
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23053: LD_ADDR_VAR 0 5
23057: PUSH
23058: LD_VAR 0 5
23062: PUSH
23063: LD_VAR 0 3
23067: PUSH
23068: LD_VAR 0 4
23072: ARRAY
23073: PPUSH
23074: CALL_OW 266
23078: PUSH
23079: LD_VAR 0 3
23083: PUSH
23084: LD_VAR 0 4
23088: ARRAY
23089: PPUSH
23090: CALL_OW 250
23094: PUSH
23095: LD_VAR 0 3
23099: PUSH
23100: LD_VAR 0 4
23104: ARRAY
23105: PPUSH
23106: CALL_OW 251
23110: PUSH
23111: LD_VAR 0 3
23115: PUSH
23116: LD_VAR 0 4
23120: ARRAY
23121: PPUSH
23122: CALL_OW 254
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: PUSH
23133: EMPTY
23134: LIST
23135: ADD
23136: ST_TO_ADDR
23137: GO 23050
23139: POP
23140: POP
// result := list ;
23141: LD_ADDR_VAR 0 2
23145: PUSH
23146: LD_VAR 0 5
23150: ST_TO_ADDR
// end ;
23151: LD_VAR 0 2
23155: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23156: LD_INT 0
23158: PPUSH
23159: PPUSH
23160: PPUSH
23161: PPUSH
23162: PPUSH
23163: PPUSH
23164: PPUSH
// if not factory then
23165: LD_VAR 0 1
23169: NOT
23170: IFFALSE 23174
// exit ;
23172: GO 23777
// if control = control_apeman then
23174: LD_VAR 0 4
23178: PUSH
23179: LD_INT 5
23181: EQUAL
23182: IFFALSE 23291
// begin tmp := UnitsInside ( factory ) ;
23184: LD_ADDR_VAR 0 8
23188: PUSH
23189: LD_VAR 0 1
23193: PPUSH
23194: CALL_OW 313
23198: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23199: LD_VAR 0 8
23203: PPUSH
23204: LD_INT 25
23206: PUSH
23207: LD_INT 12
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: PPUSH
23214: CALL_OW 72
23218: NOT
23219: IFFALSE 23229
// control := control_manual ;
23221: LD_ADDR_VAR 0 4
23225: PUSH
23226: LD_INT 1
23228: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23229: LD_ADDR_VAR 0 8
23233: PUSH
23234: LD_VAR 0 1
23238: PPUSH
23239: CALL 22926 0 1
23243: ST_TO_ADDR
// if tmp then
23244: LD_VAR 0 8
23248: IFFALSE 23291
// begin for i in tmp do
23250: LD_ADDR_VAR 0 7
23254: PUSH
23255: LD_VAR 0 8
23259: PUSH
23260: FOR_IN
23261: IFFALSE 23289
// if i [ 1 ] = b_ext_radio then
23263: LD_VAR 0 7
23267: PUSH
23268: LD_INT 1
23270: ARRAY
23271: PUSH
23272: LD_INT 22
23274: EQUAL
23275: IFFALSE 23287
// begin control := control_remote ;
23277: LD_ADDR_VAR 0 4
23281: PUSH
23282: LD_INT 2
23284: ST_TO_ADDR
// break ;
23285: GO 23289
// end ;
23287: GO 23260
23289: POP
23290: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23291: LD_VAR 0 1
23295: PPUSH
23296: LD_VAR 0 2
23300: PPUSH
23301: LD_VAR 0 3
23305: PPUSH
23306: LD_VAR 0 4
23310: PPUSH
23311: LD_VAR 0 5
23315: PPUSH
23316: CALL_OW 448
23320: IFFALSE 23355
// begin result := [ chassis , engine , control , weapon ] ;
23322: LD_ADDR_VAR 0 6
23326: PUSH
23327: LD_VAR 0 2
23331: PUSH
23332: LD_VAR 0 3
23336: PUSH
23337: LD_VAR 0 4
23341: PUSH
23342: LD_VAR 0 5
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: ST_TO_ADDR
// exit ;
23353: GO 23777
// end ; _chassis := AvailableChassisList ( factory ) ;
23355: LD_ADDR_VAR 0 9
23359: PUSH
23360: LD_VAR 0 1
23364: PPUSH
23365: CALL_OW 475
23369: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23370: LD_ADDR_VAR 0 11
23374: PUSH
23375: LD_VAR 0 1
23379: PPUSH
23380: CALL_OW 476
23384: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23385: LD_ADDR_VAR 0 12
23389: PUSH
23390: LD_VAR 0 1
23394: PPUSH
23395: CALL_OW 477
23399: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23400: LD_ADDR_VAR 0 10
23404: PUSH
23405: LD_VAR 0 1
23409: PPUSH
23410: CALL_OW 478
23414: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23415: LD_VAR 0 9
23419: NOT
23420: IFTRUE 23429
23422: PUSH
23423: LD_VAR 0 11
23427: NOT
23428: OR
23429: IFTRUE 23438
23431: PUSH
23432: LD_VAR 0 12
23436: NOT
23437: OR
23438: IFTRUE 23447
23440: PUSH
23441: LD_VAR 0 10
23445: NOT
23446: OR
23447: IFFALSE 23482
// begin result := [ chassis , engine , control , weapon ] ;
23449: LD_ADDR_VAR 0 6
23453: PUSH
23454: LD_VAR 0 2
23458: PUSH
23459: LD_VAR 0 3
23463: PUSH
23464: LD_VAR 0 4
23468: PUSH
23469: LD_VAR 0 5
23473: PUSH
23474: EMPTY
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: ST_TO_ADDR
// exit ;
23480: GO 23777
// end ; if not chassis in _chassis then
23482: LD_VAR 0 2
23486: PUSH
23487: LD_VAR 0 9
23491: IN
23492: NOT
23493: IFFALSE 23519
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23495: LD_ADDR_VAR 0 2
23499: PUSH
23500: LD_VAR 0 9
23504: PUSH
23505: LD_INT 1
23507: PPUSH
23508: LD_VAR 0 9
23512: PPUSH
23513: CALL_OW 12
23517: ARRAY
23518: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23519: LD_VAR 0 2
23523: PPUSH
23524: LD_VAR 0 3
23528: PPUSH
23529: CALL 23782 0 2
23533: NOT
23534: IFFALSE 23595
// repeat engine := _engine [ 1 ] ;
23536: LD_ADDR_VAR 0 3
23540: PUSH
23541: LD_VAR 0 11
23545: PUSH
23546: LD_INT 1
23548: ARRAY
23549: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23550: LD_ADDR_VAR 0 11
23554: PUSH
23555: LD_VAR 0 11
23559: PPUSH
23560: LD_INT 1
23562: PPUSH
23563: CALL_OW 3
23567: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23568: LD_VAR 0 2
23572: PPUSH
23573: LD_VAR 0 3
23577: PPUSH
23578: CALL 23782 0 2
23582: IFTRUE 23593
23584: PUSH
23585: LD_VAR 0 11
23589: PUSH
23590: EMPTY
23591: EQUAL
23592: OR
23593: IFFALSE 23536
// if not control in _control then
23595: LD_VAR 0 4
23599: PUSH
23600: LD_VAR 0 12
23604: IN
23605: NOT
23606: IFFALSE 23632
// control := _control [ rand ( 1 , _control ) ] ;
23608: LD_ADDR_VAR 0 4
23612: PUSH
23613: LD_VAR 0 12
23617: PUSH
23618: LD_INT 1
23620: PPUSH
23621: LD_VAR 0 12
23625: PPUSH
23626: CALL_OW 12
23630: ARRAY
23631: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23632: LD_VAR 0 2
23636: PPUSH
23637: LD_VAR 0 5
23641: PPUSH
23642: CALL 24004 0 2
23646: NOT
23647: IFFALSE 23708
// repeat weapon := _weapon [ 1 ] ;
23649: LD_ADDR_VAR 0 5
23653: PUSH
23654: LD_VAR 0 10
23658: PUSH
23659: LD_INT 1
23661: ARRAY
23662: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23663: LD_ADDR_VAR 0 10
23667: PUSH
23668: LD_VAR 0 10
23672: PPUSH
23673: LD_INT 1
23675: PPUSH
23676: CALL_OW 3
23680: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23681: LD_VAR 0 2
23685: PPUSH
23686: LD_VAR 0 5
23690: PPUSH
23691: CALL 24004 0 2
23695: IFTRUE 23706
23697: PUSH
23698: LD_VAR 0 10
23702: PUSH
23703: EMPTY
23704: EQUAL
23705: OR
23706: IFFALSE 23649
// result := [ ] ;
23708: LD_ADDR_VAR 0 6
23712: PUSH
23713: EMPTY
23714: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23715: LD_VAR 0 1
23719: PPUSH
23720: LD_VAR 0 2
23724: PPUSH
23725: LD_VAR 0 3
23729: PPUSH
23730: LD_VAR 0 4
23734: PPUSH
23735: LD_VAR 0 5
23739: PPUSH
23740: CALL_OW 448
23744: IFFALSE 23777
// result := [ chassis , engine , control , weapon ] ;
23746: LD_ADDR_VAR 0 6
23750: PUSH
23751: LD_VAR 0 2
23755: PUSH
23756: LD_VAR 0 3
23760: PUSH
23761: LD_VAR 0 4
23765: PUSH
23766: LD_VAR 0 5
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: ST_TO_ADDR
// end ;
23777: LD_VAR 0 6
23781: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23782: LD_INT 0
23784: PPUSH
// if not chassis or not engine then
23785: LD_VAR 0 1
23789: NOT
23790: IFTRUE 23799
23792: PUSH
23793: LD_VAR 0 2
23797: NOT
23798: OR
23799: IFFALSE 23803
// exit ;
23801: GO 23999
// case engine of engine_solar :
23803: LD_VAR 0 2
23807: PUSH
23808: LD_INT 2
23810: DOUBLE
23811: EQUAL
23812: IFTRUE 23816
23814: GO 23854
23816: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23817: LD_ADDR_VAR 0 3
23821: PUSH
23822: LD_INT 11
23824: PUSH
23825: LD_INT 12
23827: PUSH
23828: LD_INT 13
23830: PUSH
23831: LD_INT 14
23833: PUSH
23834: LD_INT 1
23836: PUSH
23837: LD_INT 2
23839: PUSH
23840: LD_INT 3
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: ST_TO_ADDR
23852: GO 23983
23854: LD_INT 1
23856: DOUBLE
23857: EQUAL
23858: IFTRUE 23862
23860: GO 23924
23862: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23863: LD_ADDR_VAR 0 3
23867: PUSH
23868: LD_INT 11
23870: PUSH
23871: LD_INT 12
23873: PUSH
23874: LD_INT 13
23876: PUSH
23877: LD_INT 14
23879: PUSH
23880: LD_INT 1
23882: PUSH
23883: LD_INT 2
23885: PUSH
23886: LD_INT 3
23888: PUSH
23889: LD_INT 4
23891: PUSH
23892: LD_INT 5
23894: PUSH
23895: LD_INT 21
23897: PUSH
23898: LD_INT 23
23900: PUSH
23901: LD_INT 22
23903: PUSH
23904: LD_INT 24
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: ST_TO_ADDR
23922: GO 23983
23924: LD_INT 3
23926: DOUBLE
23927: EQUAL
23928: IFTRUE 23932
23930: GO 23982
23932: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23933: LD_ADDR_VAR 0 3
23937: PUSH
23938: LD_INT 13
23940: PUSH
23941: LD_INT 14
23943: PUSH
23944: LD_INT 2
23946: PUSH
23947: LD_INT 3
23949: PUSH
23950: LD_INT 4
23952: PUSH
23953: LD_INT 5
23955: PUSH
23956: LD_INT 21
23958: PUSH
23959: LD_INT 22
23961: PUSH
23962: LD_INT 23
23964: PUSH
23965: LD_INT 24
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: ST_TO_ADDR
23980: GO 23983
23982: POP
// result := ( chassis in result ) ;
23983: LD_ADDR_VAR 0 3
23987: PUSH
23988: LD_VAR 0 1
23992: PUSH
23993: LD_VAR 0 3
23997: IN
23998: ST_TO_ADDR
// end ;
23999: LD_VAR 0 3
24003: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24004: LD_INT 0
24006: PPUSH
// if not chassis or not weapon then
24007: LD_VAR 0 1
24011: NOT
24012: IFTRUE 24021
24014: PUSH
24015: LD_VAR 0 2
24019: NOT
24020: OR
24021: IFFALSE 24025
// exit ;
24023: GO 25119
// case weapon of us_machine_gun :
24025: LD_VAR 0 2
24029: PUSH
24030: LD_INT 2
24032: DOUBLE
24033: EQUAL
24034: IFTRUE 24038
24036: GO 24068
24038: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24039: LD_ADDR_VAR 0 3
24043: PUSH
24044: LD_INT 1
24046: PUSH
24047: LD_INT 2
24049: PUSH
24050: LD_INT 3
24052: PUSH
24053: LD_INT 4
24055: PUSH
24056: LD_INT 5
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: ST_TO_ADDR
24066: GO 25103
24068: LD_INT 3
24070: DOUBLE
24071: EQUAL
24072: IFTRUE 24076
24074: GO 24106
24076: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24077: LD_ADDR_VAR 0 3
24081: PUSH
24082: LD_INT 1
24084: PUSH
24085: LD_INT 2
24087: PUSH
24088: LD_INT 3
24090: PUSH
24091: LD_INT 4
24093: PUSH
24094: LD_INT 5
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: ST_TO_ADDR
24104: GO 25103
24106: LD_INT 11
24108: DOUBLE
24109: EQUAL
24110: IFTRUE 24114
24112: GO 24144
24114: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24115: LD_ADDR_VAR 0 3
24119: PUSH
24120: LD_INT 1
24122: PUSH
24123: LD_INT 2
24125: PUSH
24126: LD_INT 3
24128: PUSH
24129: LD_INT 4
24131: PUSH
24132: LD_INT 5
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: ST_TO_ADDR
24142: GO 25103
24144: LD_INT 4
24146: DOUBLE
24147: EQUAL
24148: IFTRUE 24152
24150: GO 24178
24152: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24153: LD_ADDR_VAR 0 3
24157: PUSH
24158: LD_INT 2
24160: PUSH
24161: LD_INT 3
24163: PUSH
24164: LD_INT 4
24166: PUSH
24167: LD_INT 5
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: ST_TO_ADDR
24176: GO 25103
24178: LD_INT 5
24180: DOUBLE
24181: EQUAL
24182: IFTRUE 24186
24184: GO 24212
24186: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24187: LD_ADDR_VAR 0 3
24191: PUSH
24192: LD_INT 2
24194: PUSH
24195: LD_INT 3
24197: PUSH
24198: LD_INT 4
24200: PUSH
24201: LD_INT 5
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: ST_TO_ADDR
24210: GO 25103
24212: LD_INT 9
24214: DOUBLE
24215: EQUAL
24216: IFTRUE 24220
24218: GO 24246
24220: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24221: LD_ADDR_VAR 0 3
24225: PUSH
24226: LD_INT 2
24228: PUSH
24229: LD_INT 3
24231: PUSH
24232: LD_INT 4
24234: PUSH
24235: LD_INT 5
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: ST_TO_ADDR
24244: GO 25103
24246: LD_INT 7
24248: DOUBLE
24249: EQUAL
24250: IFTRUE 24254
24252: GO 24280
24254: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24255: LD_ADDR_VAR 0 3
24259: PUSH
24260: LD_INT 2
24262: PUSH
24263: LD_INT 3
24265: PUSH
24266: LD_INT 4
24268: PUSH
24269: LD_INT 5
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: ST_TO_ADDR
24278: GO 25103
24280: LD_INT 12
24282: DOUBLE
24283: EQUAL
24284: IFTRUE 24288
24286: GO 24314
24288: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24289: LD_ADDR_VAR 0 3
24293: PUSH
24294: LD_INT 2
24296: PUSH
24297: LD_INT 3
24299: PUSH
24300: LD_INT 4
24302: PUSH
24303: LD_INT 5
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: ST_TO_ADDR
24312: GO 25103
24314: LD_INT 13
24316: DOUBLE
24317: EQUAL
24318: IFTRUE 24322
24320: GO 24348
24322: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24323: LD_ADDR_VAR 0 3
24327: PUSH
24328: LD_INT 2
24330: PUSH
24331: LD_INT 3
24333: PUSH
24334: LD_INT 4
24336: PUSH
24337: LD_INT 5
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: ST_TO_ADDR
24346: GO 25103
24348: LD_INT 14
24350: DOUBLE
24351: EQUAL
24352: IFTRUE 24356
24354: GO 24374
24356: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24357: LD_ADDR_VAR 0 3
24361: PUSH
24362: LD_INT 4
24364: PUSH
24365: LD_INT 5
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: ST_TO_ADDR
24372: GO 25103
24374: LD_INT 6
24376: DOUBLE
24377: EQUAL
24378: IFTRUE 24382
24380: GO 24400
24382: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24383: LD_ADDR_VAR 0 3
24387: PUSH
24388: LD_INT 4
24390: PUSH
24391: LD_INT 5
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: ST_TO_ADDR
24398: GO 25103
24400: LD_INT 10
24402: DOUBLE
24403: EQUAL
24404: IFTRUE 24408
24406: GO 24426
24408: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24409: LD_ADDR_VAR 0 3
24413: PUSH
24414: LD_INT 4
24416: PUSH
24417: LD_INT 5
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: ST_TO_ADDR
24424: GO 25103
24426: LD_INT 22
24428: DOUBLE
24429: EQUAL
24430: IFTRUE 24434
24432: GO 24460
24434: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24435: LD_ADDR_VAR 0 3
24439: PUSH
24440: LD_INT 11
24442: PUSH
24443: LD_INT 12
24445: PUSH
24446: LD_INT 13
24448: PUSH
24449: LD_INT 14
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: ST_TO_ADDR
24458: GO 25103
24460: LD_INT 23
24462: DOUBLE
24463: EQUAL
24464: IFTRUE 24468
24466: GO 24494
24468: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24469: LD_ADDR_VAR 0 3
24473: PUSH
24474: LD_INT 11
24476: PUSH
24477: LD_INT 12
24479: PUSH
24480: LD_INT 13
24482: PUSH
24483: LD_INT 14
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: ST_TO_ADDR
24492: GO 25103
24494: LD_INT 24
24496: DOUBLE
24497: EQUAL
24498: IFTRUE 24502
24500: GO 24528
24502: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24503: LD_ADDR_VAR 0 3
24507: PUSH
24508: LD_INT 11
24510: PUSH
24511: LD_INT 12
24513: PUSH
24514: LD_INT 13
24516: PUSH
24517: LD_INT 14
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: ST_TO_ADDR
24526: GO 25103
24528: LD_INT 30
24530: DOUBLE
24531: EQUAL
24532: IFTRUE 24536
24534: GO 24562
24536: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24537: LD_ADDR_VAR 0 3
24541: PUSH
24542: LD_INT 11
24544: PUSH
24545: LD_INT 12
24547: PUSH
24548: LD_INT 13
24550: PUSH
24551: LD_INT 14
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: ST_TO_ADDR
24560: GO 25103
24562: LD_INT 25
24564: DOUBLE
24565: EQUAL
24566: IFTRUE 24570
24568: GO 24588
24570: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24571: LD_ADDR_VAR 0 3
24575: PUSH
24576: LD_INT 13
24578: PUSH
24579: LD_INT 14
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: ST_TO_ADDR
24586: GO 25103
24588: LD_INT 27
24590: DOUBLE
24591: EQUAL
24592: IFTRUE 24596
24594: GO 24614
24596: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
24597: LD_ADDR_VAR 0 3
24601: PUSH
24602: LD_INT 13
24604: PUSH
24605: LD_INT 14
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: ST_TO_ADDR
24612: GO 25103
24614: LD_INT 92
24616: DOUBLE
24617: EQUAL
24618: IFTRUE 24622
24620: GO 24648
24622: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24623: LD_ADDR_VAR 0 3
24627: PUSH
24628: LD_INT 11
24630: PUSH
24631: LD_INT 12
24633: PUSH
24634: LD_INT 13
24636: PUSH
24637: LD_INT 14
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: ST_TO_ADDR
24646: GO 25103
24648: LD_INT 28
24650: DOUBLE
24651: EQUAL
24652: IFTRUE 24656
24654: GO 24674
24656: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24657: LD_ADDR_VAR 0 3
24661: PUSH
24662: LD_INT 13
24664: PUSH
24665: LD_INT 14
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: ST_TO_ADDR
24672: GO 25103
24674: LD_INT 29
24676: DOUBLE
24677: EQUAL
24678: IFTRUE 24682
24680: GO 24700
24682: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24683: LD_ADDR_VAR 0 3
24687: PUSH
24688: LD_INT 13
24690: PUSH
24691: LD_INT 14
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: ST_TO_ADDR
24698: GO 25103
24700: LD_INT 31
24702: DOUBLE
24703: EQUAL
24704: IFTRUE 24708
24706: GO 24726
24708: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24709: LD_ADDR_VAR 0 3
24713: PUSH
24714: LD_INT 13
24716: PUSH
24717: LD_INT 14
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: ST_TO_ADDR
24724: GO 25103
24726: LD_INT 26
24728: DOUBLE
24729: EQUAL
24730: IFTRUE 24734
24732: GO 24752
24734: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24735: LD_ADDR_VAR 0 3
24739: PUSH
24740: LD_INT 13
24742: PUSH
24743: LD_INT 14
24745: PUSH
24746: EMPTY
24747: LIST
24748: LIST
24749: ST_TO_ADDR
24750: GO 25103
24752: LD_INT 42
24754: DOUBLE
24755: EQUAL
24756: IFTRUE 24760
24758: GO 24786
24760: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24761: LD_ADDR_VAR 0 3
24765: PUSH
24766: LD_INT 21
24768: PUSH
24769: LD_INT 22
24771: PUSH
24772: LD_INT 23
24774: PUSH
24775: LD_INT 24
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: ST_TO_ADDR
24784: GO 25103
24786: LD_INT 43
24788: DOUBLE
24789: EQUAL
24790: IFTRUE 24794
24792: GO 24820
24794: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24795: LD_ADDR_VAR 0 3
24799: PUSH
24800: LD_INT 21
24802: PUSH
24803: LD_INT 22
24805: PUSH
24806: LD_INT 23
24808: PUSH
24809: LD_INT 24
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: ST_TO_ADDR
24818: GO 25103
24820: LD_INT 44
24822: DOUBLE
24823: EQUAL
24824: IFTRUE 24828
24826: GO 24854
24828: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24829: LD_ADDR_VAR 0 3
24833: PUSH
24834: LD_INT 21
24836: PUSH
24837: LD_INT 22
24839: PUSH
24840: LD_INT 23
24842: PUSH
24843: LD_INT 24
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: ST_TO_ADDR
24852: GO 25103
24854: LD_INT 45
24856: DOUBLE
24857: EQUAL
24858: IFTRUE 24862
24860: GO 24888
24862: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24863: LD_ADDR_VAR 0 3
24867: PUSH
24868: LD_INT 21
24870: PUSH
24871: LD_INT 22
24873: PUSH
24874: LD_INT 23
24876: PUSH
24877: LD_INT 24
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: ST_TO_ADDR
24886: GO 25103
24888: LD_INT 49
24890: DOUBLE
24891: EQUAL
24892: IFTRUE 24896
24894: GO 24922
24896: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24897: LD_ADDR_VAR 0 3
24901: PUSH
24902: LD_INT 21
24904: PUSH
24905: LD_INT 22
24907: PUSH
24908: LD_INT 23
24910: PUSH
24911: LD_INT 24
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: ST_TO_ADDR
24920: GO 25103
24922: LD_INT 51
24924: DOUBLE
24925: EQUAL
24926: IFTRUE 24930
24928: GO 24956
24930: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24931: LD_ADDR_VAR 0 3
24935: PUSH
24936: LD_INT 21
24938: PUSH
24939: LD_INT 22
24941: PUSH
24942: LD_INT 23
24944: PUSH
24945: LD_INT 24
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: ST_TO_ADDR
24954: GO 25103
24956: LD_INT 52
24958: DOUBLE
24959: EQUAL
24960: IFTRUE 24964
24962: GO 24990
24964: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
24965: LD_ADDR_VAR 0 3
24969: PUSH
24970: LD_INT 21
24972: PUSH
24973: LD_INT 22
24975: PUSH
24976: LD_INT 23
24978: PUSH
24979: LD_INT 24
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: ST_TO_ADDR
24988: GO 25103
24990: LD_INT 53
24992: DOUBLE
24993: EQUAL
24994: IFTRUE 24998
24996: GO 25016
24998: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
24999: LD_ADDR_VAR 0 3
25003: PUSH
25004: LD_INT 23
25006: PUSH
25007: LD_INT 24
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: ST_TO_ADDR
25014: GO 25103
25016: LD_INT 46
25018: DOUBLE
25019: EQUAL
25020: IFTRUE 25024
25022: GO 25042
25024: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25025: LD_ADDR_VAR 0 3
25029: PUSH
25030: LD_INT 23
25032: PUSH
25033: LD_INT 24
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: ST_TO_ADDR
25040: GO 25103
25042: LD_INT 47
25044: DOUBLE
25045: EQUAL
25046: IFTRUE 25050
25048: GO 25068
25050: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
25051: LD_ADDR_VAR 0 3
25055: PUSH
25056: LD_INT 23
25058: PUSH
25059: LD_INT 24
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: ST_TO_ADDR
25066: GO 25103
25068: LD_INT 98
25070: DOUBLE
25071: EQUAL
25072: IFTRUE 25076
25074: GO 25102
25076: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25077: LD_ADDR_VAR 0 3
25081: PUSH
25082: LD_INT 21
25084: PUSH
25085: LD_INT 22
25087: PUSH
25088: LD_INT 23
25090: PUSH
25091: LD_INT 24
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: ST_TO_ADDR
25100: GO 25103
25102: POP
// result := ( chassis in result ) ;
25103: LD_ADDR_VAR 0 3
25107: PUSH
25108: LD_VAR 0 1
25112: PUSH
25113: LD_VAR 0 3
25117: IN
25118: ST_TO_ADDR
// end ;
25119: LD_VAR 0 3
25123: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25124: LD_INT 0
25126: PPUSH
25127: PPUSH
25128: PPUSH
25129: PPUSH
25130: PPUSH
25131: PPUSH
25132: PPUSH
// result := array ;
25133: LD_ADDR_VAR 0 5
25137: PUSH
25138: LD_VAR 0 1
25142: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25143: LD_VAR 0 1
25147: NOT
25148: IFTRUE 25157
25150: PUSH
25151: LD_VAR 0 2
25155: NOT
25156: OR
25157: IFTRUE 25166
25159: PUSH
25160: LD_VAR 0 3
25164: NOT
25165: OR
25166: IFTRUE 25180
25168: PUSH
25169: LD_VAR 0 2
25173: PUSH
25174: LD_VAR 0 1
25178: GREATER
25179: OR
25180: IFTRUE 25194
25182: PUSH
25183: LD_VAR 0 3
25187: PUSH
25188: LD_VAR 0 1
25192: GREATER
25193: OR
25194: IFFALSE 25198
// exit ;
25196: GO 25494
// if direction then
25198: LD_VAR 0 4
25202: IFFALSE 25266
// begin d := 1 ;
25204: LD_ADDR_VAR 0 9
25208: PUSH
25209: LD_INT 1
25211: ST_TO_ADDR
// if i_from > i_to then
25212: LD_VAR 0 2
25216: PUSH
25217: LD_VAR 0 3
25221: GREATER
25222: IFFALSE 25248
// length := ( array - i_from ) + i_to else
25224: LD_ADDR_VAR 0 11
25228: PUSH
25229: LD_VAR 0 1
25233: PUSH
25234: LD_VAR 0 2
25238: MINUS
25239: PUSH
25240: LD_VAR 0 3
25244: PLUS
25245: ST_TO_ADDR
25246: GO 25264
// length := i_to - i_from ;
25248: LD_ADDR_VAR 0 11
25252: PUSH
25253: LD_VAR 0 3
25257: PUSH
25258: LD_VAR 0 2
25262: MINUS
25263: ST_TO_ADDR
// end else
25264: GO 25327
// begin d := - 1 ;
25266: LD_ADDR_VAR 0 9
25270: PUSH
25271: LD_INT 1
25273: NEG
25274: ST_TO_ADDR
// if i_from > i_to then
25275: LD_VAR 0 2
25279: PUSH
25280: LD_VAR 0 3
25284: GREATER
25285: IFFALSE 25305
// length := i_from - i_to else
25287: LD_ADDR_VAR 0 11
25291: PUSH
25292: LD_VAR 0 2
25296: PUSH
25297: LD_VAR 0 3
25301: MINUS
25302: ST_TO_ADDR
25303: GO 25327
// length := ( array - i_to ) + i_from ;
25305: LD_ADDR_VAR 0 11
25309: PUSH
25310: LD_VAR 0 1
25314: PUSH
25315: LD_VAR 0 3
25319: MINUS
25320: PUSH
25321: LD_VAR 0 2
25325: PLUS
25326: ST_TO_ADDR
// end ; if not length then
25327: LD_VAR 0 11
25331: NOT
25332: IFFALSE 25336
// exit ;
25334: GO 25494
// tmp := array ;
25336: LD_ADDR_VAR 0 10
25340: PUSH
25341: LD_VAR 0 1
25345: ST_TO_ADDR
// for i = 1 to length do
25346: LD_ADDR_VAR 0 6
25350: PUSH
25351: DOUBLE
25352: LD_INT 1
25354: DEC
25355: ST_TO_ADDR
25356: LD_VAR 0 11
25360: PUSH
25361: FOR_TO
25362: IFFALSE 25482
// begin for j = 1 to array do
25364: LD_ADDR_VAR 0 7
25368: PUSH
25369: DOUBLE
25370: LD_INT 1
25372: DEC
25373: ST_TO_ADDR
25374: LD_VAR 0 1
25378: PUSH
25379: FOR_TO
25380: IFFALSE 25468
// begin k := j + d ;
25382: LD_ADDR_VAR 0 8
25386: PUSH
25387: LD_VAR 0 7
25391: PUSH
25392: LD_VAR 0 9
25396: PLUS
25397: ST_TO_ADDR
// if k > array then
25398: LD_VAR 0 8
25402: PUSH
25403: LD_VAR 0 1
25407: GREATER
25408: IFFALSE 25418
// k := 1 ;
25410: LD_ADDR_VAR 0 8
25414: PUSH
25415: LD_INT 1
25417: ST_TO_ADDR
// if not k then
25418: LD_VAR 0 8
25422: NOT
25423: IFFALSE 25435
// k := array ;
25425: LD_ADDR_VAR 0 8
25429: PUSH
25430: LD_VAR 0 1
25434: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25435: LD_ADDR_VAR 0 10
25439: PUSH
25440: LD_VAR 0 10
25444: PPUSH
25445: LD_VAR 0 8
25449: PPUSH
25450: LD_VAR 0 1
25454: PUSH
25455: LD_VAR 0 7
25459: ARRAY
25460: PPUSH
25461: CALL_OW 1
25465: ST_TO_ADDR
// end ;
25466: GO 25379
25468: POP
25469: POP
// array := tmp ;
25470: LD_ADDR_VAR 0 1
25474: PUSH
25475: LD_VAR 0 10
25479: ST_TO_ADDR
// end ;
25480: GO 25361
25482: POP
25483: POP
// result := array ;
25484: LD_ADDR_VAR 0 5
25488: PUSH
25489: LD_VAR 0 1
25493: ST_TO_ADDR
// end ;
25494: LD_VAR 0 5
25498: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25499: LD_INT 0
25501: PPUSH
25502: PPUSH
// result := 0 ;
25503: LD_ADDR_VAR 0 3
25507: PUSH
25508: LD_INT 0
25510: ST_TO_ADDR
// if not array or not value in array then
25511: LD_VAR 0 1
25515: NOT
25516: IFTRUE 25531
25518: PUSH
25519: LD_VAR 0 2
25523: PUSH
25524: LD_VAR 0 1
25528: IN
25529: NOT
25530: OR
25531: IFFALSE 25535
// exit ;
25533: GO 25589
// for i = 1 to array do
25535: LD_ADDR_VAR 0 4
25539: PUSH
25540: DOUBLE
25541: LD_INT 1
25543: DEC
25544: ST_TO_ADDR
25545: LD_VAR 0 1
25549: PUSH
25550: FOR_TO
25551: IFFALSE 25587
// if value = array [ i ] then
25553: LD_VAR 0 2
25557: PUSH
25558: LD_VAR 0 1
25562: PUSH
25563: LD_VAR 0 4
25567: ARRAY
25568: EQUAL
25569: IFFALSE 25585
// begin result := i ;
25571: LD_ADDR_VAR 0 3
25575: PUSH
25576: LD_VAR 0 4
25580: ST_TO_ADDR
// exit ;
25581: POP
25582: POP
25583: GO 25589
// end ;
25585: GO 25550
25587: POP
25588: POP
// end ;
25589: LD_VAR 0 3
25593: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25594: LD_INT 0
25596: PPUSH
// vc_chassis := chassis ;
25597: LD_ADDR_OWVAR 37
25601: PUSH
25602: LD_VAR 0 1
25606: ST_TO_ADDR
// vc_engine := engine ;
25607: LD_ADDR_OWVAR 39
25611: PUSH
25612: LD_VAR 0 2
25616: ST_TO_ADDR
// vc_control := control ;
25617: LD_ADDR_OWVAR 38
25621: PUSH
25622: LD_VAR 0 3
25626: ST_TO_ADDR
// vc_weapon := weapon ;
25627: LD_ADDR_OWVAR 40
25631: PUSH
25632: LD_VAR 0 4
25636: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25637: LD_ADDR_OWVAR 41
25641: PUSH
25642: LD_VAR 0 5
25646: ST_TO_ADDR
// end ;
25647: LD_VAR 0 6
25651: RET
// export function WantPlant ( unit ) ; var task ; begin
25652: LD_INT 0
25654: PPUSH
25655: PPUSH
// result := false ;
25656: LD_ADDR_VAR 0 2
25660: PUSH
25661: LD_INT 0
25663: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25664: LD_ADDR_VAR 0 3
25668: PUSH
25669: LD_VAR 0 1
25673: PPUSH
25674: CALL_OW 437
25678: ST_TO_ADDR
// if task then
25679: LD_VAR 0 3
25683: IFFALSE 25711
// if task [ 1 ] [ 1 ] = p then
25685: LD_VAR 0 3
25689: PUSH
25690: LD_INT 1
25692: ARRAY
25693: PUSH
25694: LD_INT 1
25696: ARRAY
25697: PUSH
25698: LD_STRING p
25700: EQUAL
25701: IFFALSE 25711
// result := true ;
25703: LD_ADDR_VAR 0 2
25707: PUSH
25708: LD_INT 1
25710: ST_TO_ADDR
// end ;
25711: LD_VAR 0 2
25715: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25716: LD_INT 0
25718: PPUSH
25719: PPUSH
25720: PPUSH
25721: PPUSH
// if pos < 1 then
25722: LD_VAR 0 2
25726: PUSH
25727: LD_INT 1
25729: LESS
25730: IFFALSE 25734
// exit ;
25732: GO 26037
// if pos = 1 then
25734: LD_VAR 0 2
25738: PUSH
25739: LD_INT 1
25741: EQUAL
25742: IFFALSE 25775
// result := Replace ( arr , pos [ 1 ] , value ) else
25744: LD_ADDR_VAR 0 4
25748: PUSH
25749: LD_VAR 0 1
25753: PPUSH
25754: LD_VAR 0 2
25758: PUSH
25759: LD_INT 1
25761: ARRAY
25762: PPUSH
25763: LD_VAR 0 3
25767: PPUSH
25768: CALL_OW 1
25772: ST_TO_ADDR
25773: GO 26037
// begin tmp := arr ;
25775: LD_ADDR_VAR 0 6
25779: PUSH
25780: LD_VAR 0 1
25784: ST_TO_ADDR
// s_arr := [ tmp ] ;
25785: LD_ADDR_VAR 0 7
25789: PUSH
25790: LD_VAR 0 6
25794: PUSH
25795: EMPTY
25796: LIST
25797: ST_TO_ADDR
// for i = 1 to pos - 1 do
25798: LD_ADDR_VAR 0 5
25802: PUSH
25803: DOUBLE
25804: LD_INT 1
25806: DEC
25807: ST_TO_ADDR
25808: LD_VAR 0 2
25812: PUSH
25813: LD_INT 1
25815: MINUS
25816: PUSH
25817: FOR_TO
25818: IFFALSE 25863
// begin tmp := tmp [ pos [ i ] ] ;
25820: LD_ADDR_VAR 0 6
25824: PUSH
25825: LD_VAR 0 6
25829: PUSH
25830: LD_VAR 0 2
25834: PUSH
25835: LD_VAR 0 5
25839: ARRAY
25840: ARRAY
25841: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25842: LD_ADDR_VAR 0 7
25846: PUSH
25847: LD_VAR 0 7
25851: PUSH
25852: LD_VAR 0 6
25856: PUSH
25857: EMPTY
25858: LIST
25859: ADD
25860: ST_TO_ADDR
// end ;
25861: GO 25817
25863: POP
25864: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25865: LD_ADDR_VAR 0 6
25869: PUSH
25870: LD_VAR 0 6
25874: PPUSH
25875: LD_VAR 0 2
25879: PUSH
25880: LD_VAR 0 2
25884: ARRAY
25885: PPUSH
25886: LD_VAR 0 3
25890: PPUSH
25891: CALL_OW 1
25895: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25896: LD_ADDR_VAR 0 7
25900: PUSH
25901: LD_VAR 0 7
25905: PPUSH
25906: LD_VAR 0 7
25910: PPUSH
25911: LD_VAR 0 6
25915: PPUSH
25916: CALL_OW 1
25920: ST_TO_ADDR
// for i = s_arr downto 2 do
25921: LD_ADDR_VAR 0 5
25925: PUSH
25926: DOUBLE
25927: LD_VAR 0 7
25931: INC
25932: ST_TO_ADDR
25933: LD_INT 2
25935: PUSH
25936: FOR_DOWNTO
25937: IFFALSE 26021
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25939: LD_ADDR_VAR 0 6
25943: PUSH
25944: LD_VAR 0 7
25948: PUSH
25949: LD_VAR 0 5
25953: PUSH
25954: LD_INT 1
25956: MINUS
25957: ARRAY
25958: PPUSH
25959: LD_VAR 0 2
25963: PUSH
25964: LD_VAR 0 5
25968: PUSH
25969: LD_INT 1
25971: MINUS
25972: ARRAY
25973: PPUSH
25974: LD_VAR 0 7
25978: PUSH
25979: LD_VAR 0 5
25983: ARRAY
25984: PPUSH
25985: CALL_OW 1
25989: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25990: LD_ADDR_VAR 0 7
25994: PUSH
25995: LD_VAR 0 7
25999: PPUSH
26000: LD_VAR 0 5
26004: PUSH
26005: LD_INT 1
26007: MINUS
26008: PPUSH
26009: LD_VAR 0 6
26013: PPUSH
26014: CALL_OW 1
26018: ST_TO_ADDR
// end ;
26019: GO 25936
26021: POP
26022: POP
// result := s_arr [ 1 ] ;
26023: LD_ADDR_VAR 0 4
26027: PUSH
26028: LD_VAR 0 7
26032: PUSH
26033: LD_INT 1
26035: ARRAY
26036: ST_TO_ADDR
// end ; end ;
26037: LD_VAR 0 4
26041: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26042: LD_INT 0
26044: PPUSH
26045: PPUSH
// if not list then
26046: LD_VAR 0 1
26050: NOT
26051: IFFALSE 26055
// exit ;
26053: GO 26146
// i := list [ pos1 ] ;
26055: LD_ADDR_VAR 0 5
26059: PUSH
26060: LD_VAR 0 1
26064: PUSH
26065: LD_VAR 0 2
26069: ARRAY
26070: ST_TO_ADDR
// if not i then
26071: LD_VAR 0 5
26075: NOT
26076: IFFALSE 26080
// exit ;
26078: GO 26146
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26080: LD_ADDR_VAR 0 1
26084: PUSH
26085: LD_VAR 0 1
26089: PPUSH
26090: LD_VAR 0 2
26094: PPUSH
26095: LD_VAR 0 1
26099: PUSH
26100: LD_VAR 0 3
26104: ARRAY
26105: PPUSH
26106: CALL_OW 1
26110: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26111: LD_ADDR_VAR 0 1
26115: PUSH
26116: LD_VAR 0 1
26120: PPUSH
26121: LD_VAR 0 3
26125: PPUSH
26126: LD_VAR 0 5
26130: PPUSH
26131: CALL_OW 1
26135: ST_TO_ADDR
// result := list ;
26136: LD_ADDR_VAR 0 4
26140: PUSH
26141: LD_VAR 0 1
26145: ST_TO_ADDR
// end ;
26146: LD_VAR 0 4
26150: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26151: LD_INT 0
26153: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26154: LD_ADDR_VAR 0 5
26158: PUSH
26159: LD_VAR 0 1
26163: PPUSH
26164: CALL_OW 250
26168: PPUSH
26169: LD_VAR 0 1
26173: PPUSH
26174: CALL_OW 251
26178: PPUSH
26179: LD_VAR 0 2
26183: PPUSH
26184: LD_VAR 0 3
26188: PPUSH
26189: LD_VAR 0 4
26193: PPUSH
26194: CALL 26576 0 5
26198: ST_TO_ADDR
// end ;
26199: LD_VAR 0 5
26203: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
26204: LD_INT 0
26206: PPUSH
26207: PPUSH
26208: PPUSH
26209: PPUSH
// if not list or not unit then
26210: LD_VAR 0 2
26214: NOT
26215: IFTRUE 26224
26217: PUSH
26218: LD_VAR 0 1
26222: NOT
26223: OR
26224: IFFALSE 26228
// exit ;
26226: GO 26571
// result := [ ] ;
26228: LD_ADDR_VAR 0 5
26232: PUSH
26233: EMPTY
26234: ST_TO_ADDR
// for i in list do
26235: LD_ADDR_VAR 0 6
26239: PUSH
26240: LD_VAR 0 2
26244: PUSH
26245: FOR_IN
26246: IFFALSE 26464
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
26248: LD_ADDR_VAR 0 8
26252: PUSH
26253: LD_VAR 0 1
26257: PPUSH
26258: LD_VAR 0 6
26262: PUSH
26263: LD_INT 1
26265: ARRAY
26266: PPUSH
26267: LD_VAR 0 6
26271: PUSH
26272: LD_INT 2
26274: ARRAY
26275: PPUSH
26276: CALL_OW 297
26280: ST_TO_ADDR
// if not Count ( result ) then
26281: LD_VAR 0 5
26285: PPUSH
26286: CALL 22798 0 1
26290: NOT
26291: IFFALSE 26324
// begin result := Join ( result , [ i , tmp ] ) ;
26293: LD_ADDR_VAR 0 5
26297: PUSH
26298: LD_VAR 0 5
26302: PPUSH
26303: LD_VAR 0 6
26307: PUSH
26308: LD_VAR 0 8
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PPUSH
26317: CALL 58774 0 2
26321: ST_TO_ADDR
// continue ;
26322: GO 26245
// end ; if result [ result ] [ 2 ] <= tmp then
26324: LD_VAR 0 5
26328: PUSH
26329: LD_VAR 0 5
26333: ARRAY
26334: PUSH
26335: LD_INT 2
26337: ARRAY
26338: PUSH
26339: LD_VAR 0 8
26343: LESSEQUAL
26344: IFFALSE 26377
// result := Join ( result , [ i , tmp ] ) else
26346: LD_ADDR_VAR 0 5
26350: PUSH
26351: LD_VAR 0 5
26355: PPUSH
26356: LD_VAR 0 6
26360: PUSH
26361: LD_VAR 0 8
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PPUSH
26370: CALL 58774 0 2
26374: ST_TO_ADDR
26375: GO 26462
// begin for j := 1 to Count ( result ) do
26377: LD_ADDR_VAR 0 7
26381: PUSH
26382: DOUBLE
26383: LD_INT 1
26385: DEC
26386: ST_TO_ADDR
26387: LD_VAR 0 5
26391: PPUSH
26392: CALL 22798 0 1
26396: PUSH
26397: FOR_TO
26398: IFFALSE 26460
// begin if tmp < result [ j ] [ 2 ] then
26400: LD_VAR 0 8
26404: PUSH
26405: LD_VAR 0 5
26409: PUSH
26410: LD_VAR 0 7
26414: ARRAY
26415: PUSH
26416: LD_INT 2
26418: ARRAY
26419: LESS
26420: IFFALSE 26458
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26422: LD_ADDR_VAR 0 5
26426: PUSH
26427: LD_VAR 0 5
26431: PPUSH
26432: LD_VAR 0 7
26436: PPUSH
26437: LD_VAR 0 6
26441: PUSH
26442: LD_VAR 0 8
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PPUSH
26451: CALL_OW 2
26455: ST_TO_ADDR
// break ;
26456: GO 26460
// end ; end ;
26458: GO 26397
26460: POP
26461: POP
// end ; end ;
26462: GO 26245
26464: POP
26465: POP
// if result and not asc then
26466: LD_VAR 0 5
26470: IFFALSE 26479
26472: PUSH
26473: LD_VAR 0 3
26477: NOT
26478: AND
26479: IFFALSE 26496
// result := ReverseArray ( result ) ;
26481: LD_ADDR_VAR 0 5
26485: PUSH
26486: LD_VAR 0 5
26490: PPUSH
26491: CALL 53854 0 1
26495: ST_TO_ADDR
// tmp := [ ] ;
26496: LD_ADDR_VAR 0 8
26500: PUSH
26501: EMPTY
26502: ST_TO_ADDR
// if mode then
26503: LD_VAR 0 4
26507: IFFALSE 26571
// begin for i := 1 to result do
26509: LD_ADDR_VAR 0 6
26513: PUSH
26514: DOUBLE
26515: LD_INT 1
26517: DEC
26518: ST_TO_ADDR
26519: LD_VAR 0 5
26523: PUSH
26524: FOR_TO
26525: IFFALSE 26559
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
26527: LD_ADDR_VAR 0 8
26531: PUSH
26532: LD_VAR 0 8
26536: PPUSH
26537: LD_VAR 0 5
26541: PUSH
26542: LD_VAR 0 6
26546: ARRAY
26547: PUSH
26548: LD_INT 1
26550: ARRAY
26551: PPUSH
26552: CALL 58774 0 2
26556: ST_TO_ADDR
26557: GO 26524
26559: POP
26560: POP
// result := tmp ;
26561: LD_ADDR_VAR 0 5
26565: PUSH
26566: LD_VAR 0 8
26570: ST_TO_ADDR
// end ; end ;
26571: LD_VAR 0 5
26575: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26576: LD_INT 0
26578: PPUSH
26579: PPUSH
26580: PPUSH
26581: PPUSH
// if not list then
26582: LD_VAR 0 3
26586: NOT
26587: IFFALSE 26591
// exit ;
26589: GO 26981
// result := [ ] ;
26591: LD_ADDR_VAR 0 6
26595: PUSH
26596: EMPTY
26597: ST_TO_ADDR
// for i in list do
26598: LD_ADDR_VAR 0 7
26602: PUSH
26603: LD_VAR 0 3
26607: PUSH
26608: FOR_IN
26609: IFFALSE 26811
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26611: LD_ADDR_VAR 0 9
26615: PUSH
26616: LD_VAR 0 7
26620: PPUSH
26621: LD_VAR 0 1
26625: PPUSH
26626: LD_VAR 0 2
26630: PPUSH
26631: CALL_OW 297
26635: ST_TO_ADDR
// if not result then
26636: LD_VAR 0 6
26640: NOT
26641: IFFALSE 26667
// result := [ [ i , tmp ] ] else
26643: LD_ADDR_VAR 0 6
26647: PUSH
26648: LD_VAR 0 7
26652: PUSH
26653: LD_VAR 0 9
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: PUSH
26662: EMPTY
26663: LIST
26664: ST_TO_ADDR
26665: GO 26809
// begin if result [ result ] [ 2 ] <= tmp then
26667: LD_VAR 0 6
26671: PUSH
26672: LD_VAR 0 6
26676: ARRAY
26677: PUSH
26678: LD_INT 2
26680: ARRAY
26681: PUSH
26682: LD_VAR 0 9
26686: LESSEQUAL
26687: IFFALSE 26729
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26689: LD_ADDR_VAR 0 6
26693: PUSH
26694: LD_VAR 0 6
26698: PPUSH
26699: LD_VAR 0 6
26703: PUSH
26704: LD_INT 1
26706: PLUS
26707: PPUSH
26708: LD_VAR 0 7
26712: PUSH
26713: LD_VAR 0 9
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: PPUSH
26722: CALL_OW 2
26726: ST_TO_ADDR
26727: GO 26809
// for j := 1 to result do
26729: LD_ADDR_VAR 0 8
26733: PUSH
26734: DOUBLE
26735: LD_INT 1
26737: DEC
26738: ST_TO_ADDR
26739: LD_VAR 0 6
26743: PUSH
26744: FOR_TO
26745: IFFALSE 26807
// begin if tmp < result [ j ] [ 2 ] then
26747: LD_VAR 0 9
26751: PUSH
26752: LD_VAR 0 6
26756: PUSH
26757: LD_VAR 0 8
26761: ARRAY
26762: PUSH
26763: LD_INT 2
26765: ARRAY
26766: LESS
26767: IFFALSE 26805
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26769: LD_ADDR_VAR 0 6
26773: PUSH
26774: LD_VAR 0 6
26778: PPUSH
26779: LD_VAR 0 8
26783: PPUSH
26784: LD_VAR 0 7
26788: PUSH
26789: LD_VAR 0 9
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PPUSH
26798: CALL_OW 2
26802: ST_TO_ADDR
// break ;
26803: GO 26807
// end ; end ;
26805: GO 26744
26807: POP
26808: POP
// end ; end ;
26809: GO 26608
26811: POP
26812: POP
// if result and not asc then
26813: LD_VAR 0 6
26817: IFFALSE 26826
26819: PUSH
26820: LD_VAR 0 4
26824: NOT
26825: AND
26826: IFFALSE 26901
// begin tmp := result ;
26828: LD_ADDR_VAR 0 9
26832: PUSH
26833: LD_VAR 0 6
26837: ST_TO_ADDR
// for i = tmp downto 1 do
26838: LD_ADDR_VAR 0 7
26842: PUSH
26843: DOUBLE
26844: LD_VAR 0 9
26848: INC
26849: ST_TO_ADDR
26850: LD_INT 1
26852: PUSH
26853: FOR_DOWNTO
26854: IFFALSE 26899
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26856: LD_ADDR_VAR 0 6
26860: PUSH
26861: LD_VAR 0 6
26865: PPUSH
26866: LD_VAR 0 9
26870: PUSH
26871: LD_VAR 0 7
26875: MINUS
26876: PUSH
26877: LD_INT 1
26879: PLUS
26880: PPUSH
26881: LD_VAR 0 9
26885: PUSH
26886: LD_VAR 0 7
26890: ARRAY
26891: PPUSH
26892: CALL_OW 1
26896: ST_TO_ADDR
26897: GO 26853
26899: POP
26900: POP
// end ; tmp := [ ] ;
26901: LD_ADDR_VAR 0 9
26905: PUSH
26906: EMPTY
26907: ST_TO_ADDR
// if mode then
26908: LD_VAR 0 5
26912: IFFALSE 26981
// begin for i = 1 to result do
26914: LD_ADDR_VAR 0 7
26918: PUSH
26919: DOUBLE
26920: LD_INT 1
26922: DEC
26923: ST_TO_ADDR
26924: LD_VAR 0 6
26928: PUSH
26929: FOR_TO
26930: IFFALSE 26969
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26932: LD_ADDR_VAR 0 9
26936: PUSH
26937: LD_VAR 0 9
26941: PPUSH
26942: LD_VAR 0 7
26946: PPUSH
26947: LD_VAR 0 6
26951: PUSH
26952: LD_VAR 0 7
26956: ARRAY
26957: PUSH
26958: LD_INT 1
26960: ARRAY
26961: PPUSH
26962: CALL_OW 1
26966: ST_TO_ADDR
26967: GO 26929
26969: POP
26970: POP
// result := tmp ;
26971: LD_ADDR_VAR 0 6
26975: PUSH
26976: LD_VAR 0 9
26980: ST_TO_ADDR
// end ; end ;
26981: LD_VAR 0 6
26985: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26986: LD_INT 0
26988: PPUSH
26989: PPUSH
26990: PPUSH
26991: PPUSH
26992: PPUSH
26993: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26994: LD_ADDR_VAR 0 5
26998: PUSH
26999: LD_INT 0
27001: PUSH
27002: LD_INT 0
27004: PUSH
27005: LD_INT 0
27007: PUSH
27008: EMPTY
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: ST_TO_ADDR
// if not x or not y then
27016: LD_VAR 0 2
27020: NOT
27021: IFTRUE 27030
27023: PUSH
27024: LD_VAR 0 3
27028: NOT
27029: OR
27030: IFFALSE 27034
// exit ;
27032: GO 28690
// if not range then
27034: LD_VAR 0 4
27038: NOT
27039: IFFALSE 27049
// range := 10 ;
27041: LD_ADDR_VAR 0 4
27045: PUSH
27046: LD_INT 10
27048: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27049: LD_ADDR_VAR 0 8
27053: PUSH
27054: LD_INT 81
27056: PUSH
27057: LD_VAR 0 1
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: LD_INT 92
27068: PUSH
27069: LD_VAR 0 2
27073: PUSH
27074: LD_VAR 0 3
27078: PUSH
27079: LD_VAR 0 4
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: PUSH
27090: LD_INT 3
27092: PUSH
27093: LD_INT 21
27095: PUSH
27096: LD_INT 3
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: LIST
27111: PPUSH
27112: CALL_OW 69
27116: ST_TO_ADDR
// if not tmp then
27117: LD_VAR 0 8
27121: NOT
27122: IFFALSE 27126
// exit ;
27124: GO 28690
// for i in tmp do
27126: LD_ADDR_VAR 0 6
27130: PUSH
27131: LD_VAR 0 8
27135: PUSH
27136: FOR_IN
27137: IFFALSE 28665
// begin points := [ 0 , 0 , 0 ] ;
27139: LD_ADDR_VAR 0 9
27143: PUSH
27144: LD_INT 0
27146: PUSH
27147: LD_INT 0
27149: PUSH
27150: LD_INT 0
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: LIST
27157: ST_TO_ADDR
// bpoints := 1 ;
27158: LD_ADDR_VAR 0 10
27162: PUSH
27163: LD_INT 1
27165: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27166: LD_VAR 0 6
27170: PPUSH
27171: CALL_OW 247
27175: PUSH
27176: LD_INT 1
27178: DOUBLE
27179: EQUAL
27180: IFTRUE 27184
27182: GO 27766
27184: POP
// begin if GetClass ( i ) = 1 then
27185: LD_VAR 0 6
27189: PPUSH
27190: CALL_OW 257
27194: PUSH
27195: LD_INT 1
27197: EQUAL
27198: IFFALSE 27219
// points := [ 10 , 5 , 3 ] ;
27200: LD_ADDR_VAR 0 9
27204: PUSH
27205: LD_INT 10
27207: PUSH
27208: LD_INT 5
27210: PUSH
27211: LD_INT 3
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: LIST
27218: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27219: LD_VAR 0 6
27223: PPUSH
27224: CALL_OW 257
27228: PUSH
27229: LD_INT 2
27231: PUSH
27232: LD_INT 3
27234: PUSH
27235: LD_INT 4
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: LIST
27242: IN
27243: IFFALSE 27264
// points := [ 3 , 2 , 1 ] ;
27245: LD_ADDR_VAR 0 9
27249: PUSH
27250: LD_INT 3
27252: PUSH
27253: LD_INT 2
27255: PUSH
27256: LD_INT 1
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: LIST
27263: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27264: LD_VAR 0 6
27268: PPUSH
27269: CALL_OW 257
27273: PUSH
27274: LD_INT 5
27276: EQUAL
27277: IFFALSE 27298
// points := [ 130 , 5 , 2 ] ;
27279: LD_ADDR_VAR 0 9
27283: PUSH
27284: LD_INT 130
27286: PUSH
27287: LD_INT 5
27289: PUSH
27290: LD_INT 2
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: LIST
27297: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27298: LD_VAR 0 6
27302: PPUSH
27303: CALL_OW 257
27307: PUSH
27308: LD_INT 8
27310: EQUAL
27311: IFFALSE 27332
// points := [ 35 , 35 , 30 ] ;
27313: LD_ADDR_VAR 0 9
27317: PUSH
27318: LD_INT 35
27320: PUSH
27321: LD_INT 35
27323: PUSH
27324: LD_INT 30
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: LIST
27331: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27332: LD_VAR 0 6
27336: PPUSH
27337: CALL_OW 257
27341: PUSH
27342: LD_INT 9
27344: EQUAL
27345: IFFALSE 27366
// points := [ 20 , 55 , 40 ] ;
27347: LD_ADDR_VAR 0 9
27351: PUSH
27352: LD_INT 20
27354: PUSH
27355: LD_INT 55
27357: PUSH
27358: LD_INT 40
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: LIST
27365: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27366: LD_VAR 0 6
27370: PPUSH
27371: CALL_OW 257
27375: PUSH
27376: LD_INT 12
27378: PUSH
27379: LD_INT 16
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: IN
27386: IFFALSE 27407
// points := [ 5 , 3 , 2 ] ;
27388: LD_ADDR_VAR 0 9
27392: PUSH
27393: LD_INT 5
27395: PUSH
27396: LD_INT 3
27398: PUSH
27399: LD_INT 2
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: LIST
27406: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27407: LD_VAR 0 6
27411: PPUSH
27412: CALL_OW 257
27416: PUSH
27417: LD_INT 17
27419: EQUAL
27420: IFFALSE 27441
// points := [ 100 , 50 , 75 ] ;
27422: LD_ADDR_VAR 0 9
27426: PUSH
27427: LD_INT 100
27429: PUSH
27430: LD_INT 50
27432: PUSH
27433: LD_INT 75
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: LIST
27440: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27441: LD_VAR 0 6
27445: PPUSH
27446: CALL_OW 257
27450: PUSH
27451: LD_INT 15
27453: EQUAL
27454: IFFALSE 27475
// points := [ 10 , 5 , 3 ] ;
27456: LD_ADDR_VAR 0 9
27460: PUSH
27461: LD_INT 10
27463: PUSH
27464: LD_INT 5
27466: PUSH
27467: LD_INT 3
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: LIST
27474: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27475: LD_VAR 0 6
27479: PPUSH
27480: CALL_OW 257
27484: PUSH
27485: LD_INT 14
27487: EQUAL
27488: IFFALSE 27509
// points := [ 10 , 0 , 0 ] ;
27490: LD_ADDR_VAR 0 9
27494: PUSH
27495: LD_INT 10
27497: PUSH
27498: LD_INT 0
27500: PUSH
27501: LD_INT 0
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: LIST
27508: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27509: LD_VAR 0 6
27513: PPUSH
27514: CALL_OW 257
27518: PUSH
27519: LD_INT 11
27521: EQUAL
27522: IFFALSE 27543
// points := [ 30 , 10 , 5 ] ;
27524: LD_ADDR_VAR 0 9
27528: PUSH
27529: LD_INT 30
27531: PUSH
27532: LD_INT 10
27534: PUSH
27535: LD_INT 5
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: LIST
27542: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27543: LD_VAR 0 1
27547: PPUSH
27548: LD_INT 5
27550: PPUSH
27551: CALL_OW 321
27555: PUSH
27556: LD_INT 2
27558: EQUAL
27559: IFFALSE 27576
// bpoints := bpoints * 1.8 ;
27561: LD_ADDR_VAR 0 10
27565: PUSH
27566: LD_VAR 0 10
27570: PUSH
27571: LD_REAL  1.80000000000000E+0000
27574: MUL
27575: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27576: LD_VAR 0 6
27580: PPUSH
27581: CALL_OW 257
27585: PUSH
27586: LD_INT 1
27588: PUSH
27589: LD_INT 2
27591: PUSH
27592: LD_INT 3
27594: PUSH
27595: LD_INT 4
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: IN
27604: IFFALSE 27624
27606: PUSH
27607: LD_VAR 0 1
27611: PPUSH
27612: LD_INT 51
27614: PPUSH
27615: CALL_OW 321
27619: PUSH
27620: LD_INT 2
27622: EQUAL
27623: AND
27624: IFFALSE 27641
// bpoints := bpoints * 1.2 ;
27626: LD_ADDR_VAR 0 10
27630: PUSH
27631: LD_VAR 0 10
27635: PUSH
27636: LD_REAL  1.20000000000000E+0000
27639: MUL
27640: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27641: LD_VAR 0 6
27645: PPUSH
27646: CALL_OW 257
27650: PUSH
27651: LD_INT 5
27653: PUSH
27654: LD_INT 7
27656: PUSH
27657: LD_INT 9
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: LIST
27664: IN
27665: IFFALSE 27685
27667: PUSH
27668: LD_VAR 0 1
27672: PPUSH
27673: LD_INT 52
27675: PPUSH
27676: CALL_OW 321
27680: PUSH
27681: LD_INT 2
27683: EQUAL
27684: AND
27685: IFFALSE 27702
// bpoints := bpoints * 1.5 ;
27687: LD_ADDR_VAR 0 10
27691: PUSH
27692: LD_VAR 0 10
27696: PUSH
27697: LD_REAL  1.50000000000000E+0000
27700: MUL
27701: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27702: LD_VAR 0 1
27706: PPUSH
27707: LD_INT 66
27709: PPUSH
27710: CALL_OW 321
27714: PUSH
27715: LD_INT 2
27717: EQUAL
27718: IFFALSE 27735
// bpoints := bpoints * 1.1 ;
27720: LD_ADDR_VAR 0 10
27724: PUSH
27725: LD_VAR 0 10
27729: PUSH
27730: LD_REAL  1.10000000000000E+0000
27733: MUL
27734: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27735: LD_ADDR_VAR 0 10
27739: PUSH
27740: LD_VAR 0 10
27744: PUSH
27745: LD_VAR 0 6
27749: PPUSH
27750: LD_INT 1
27752: PPUSH
27753: CALL_OW 259
27757: PUSH
27758: LD_REAL  1.15000000000000E+0000
27761: MUL
27762: MUL
27763: ST_TO_ADDR
// end ; unit_vehicle :
27764: GO 28594
27766: LD_INT 2
27768: DOUBLE
27769: EQUAL
27770: IFTRUE 27774
27772: GO 28582
27774: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27775: LD_VAR 0 6
27779: PPUSH
27780: CALL_OW 264
27784: PUSH
27785: LD_INT 2
27787: PUSH
27788: LD_INT 42
27790: PUSH
27791: LD_INT 24
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: LIST
27798: IN
27799: IFFALSE 27820
// points := [ 25 , 5 , 3 ] ;
27801: LD_ADDR_VAR 0 9
27805: PUSH
27806: LD_INT 25
27808: PUSH
27809: LD_INT 5
27811: PUSH
27812: LD_INT 3
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: LIST
27819: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27820: LD_VAR 0 6
27824: PPUSH
27825: CALL_OW 264
27829: PUSH
27830: LD_INT 4
27832: PUSH
27833: LD_INT 43
27835: PUSH
27836: LD_INT 25
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: LIST
27843: IN
27844: IFFALSE 27865
// points := [ 40 , 15 , 5 ] ;
27846: LD_ADDR_VAR 0 9
27850: PUSH
27851: LD_INT 40
27853: PUSH
27854: LD_INT 15
27856: PUSH
27857: LD_INT 5
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: LIST
27864: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27865: LD_VAR 0 6
27869: PPUSH
27870: CALL_OW 264
27874: PUSH
27875: LD_INT 3
27877: PUSH
27878: LD_INT 23
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: IN
27885: IFFALSE 27906
// points := [ 7 , 25 , 8 ] ;
27887: LD_ADDR_VAR 0 9
27891: PUSH
27892: LD_INT 7
27894: PUSH
27895: LD_INT 25
27897: PUSH
27898: LD_INT 8
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: LIST
27905: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27906: LD_VAR 0 6
27910: PPUSH
27911: CALL_OW 264
27915: PUSH
27916: LD_INT 5
27918: PUSH
27919: LD_INT 27
27921: PUSH
27922: LD_INT 44
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: LIST
27929: IN
27930: IFFALSE 27951
// points := [ 14 , 50 , 16 ] ;
27932: LD_ADDR_VAR 0 9
27936: PUSH
27937: LD_INT 14
27939: PUSH
27940: LD_INT 50
27942: PUSH
27943: LD_INT 16
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: LIST
27950: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27951: LD_VAR 0 6
27955: PPUSH
27956: CALL_OW 264
27960: PUSH
27961: LD_INT 6
27963: PUSH
27964: LD_INT 46
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: IN
27971: IFFALSE 27992
// points := [ 32 , 120 , 70 ] ;
27973: LD_ADDR_VAR 0 9
27977: PUSH
27978: LD_INT 32
27980: PUSH
27981: LD_INT 120
27983: PUSH
27984: LD_INT 70
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: LIST
27991: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
27992: LD_VAR 0 6
27996: PPUSH
27997: CALL_OW 264
28001: PUSH
28002: LD_INT 7
28004: PUSH
28005: LD_INT 28
28007: PUSH
28008: LD_INT 45
28010: PUSH
28011: LD_INT 92
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: IN
28020: IFFALSE 28041
// points := [ 35 , 20 , 45 ] ;
28022: LD_ADDR_VAR 0 9
28026: PUSH
28027: LD_INT 35
28029: PUSH
28030: LD_INT 20
28032: PUSH
28033: LD_INT 45
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: LIST
28040: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28041: LD_VAR 0 6
28045: PPUSH
28046: CALL_OW 264
28050: PUSH
28051: LD_INT 47
28053: PUSH
28054: EMPTY
28055: LIST
28056: IN
28057: IFFALSE 28078
// points := [ 67 , 45 , 75 ] ;
28059: LD_ADDR_VAR 0 9
28063: PUSH
28064: LD_INT 67
28066: PUSH
28067: LD_INT 45
28069: PUSH
28070: LD_INT 75
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: LIST
28077: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28078: LD_VAR 0 6
28082: PPUSH
28083: CALL_OW 264
28087: PUSH
28088: LD_INT 26
28090: PUSH
28091: EMPTY
28092: LIST
28093: IN
28094: IFFALSE 28115
// points := [ 120 , 30 , 80 ] ;
28096: LD_ADDR_VAR 0 9
28100: PUSH
28101: LD_INT 120
28103: PUSH
28104: LD_INT 30
28106: PUSH
28107: LD_INT 80
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: LIST
28114: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28115: LD_VAR 0 6
28119: PPUSH
28120: CALL_OW 264
28124: PUSH
28125: LD_INT 22
28127: PUSH
28128: EMPTY
28129: LIST
28130: IN
28131: IFFALSE 28152
// points := [ 40 , 1 , 1 ] ;
28133: LD_ADDR_VAR 0 9
28137: PUSH
28138: LD_INT 40
28140: PUSH
28141: LD_INT 1
28143: PUSH
28144: LD_INT 1
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: LIST
28151: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28152: LD_VAR 0 6
28156: PPUSH
28157: CALL_OW 264
28161: PUSH
28162: LD_INT 29
28164: PUSH
28165: EMPTY
28166: LIST
28167: IN
28168: IFFALSE 28189
// points := [ 70 , 200 , 400 ] ;
28170: LD_ADDR_VAR 0 9
28174: PUSH
28175: LD_INT 70
28177: PUSH
28178: LD_INT 200
28180: PUSH
28181: LD_INT 400
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: LIST
28188: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28189: LD_VAR 0 6
28193: PPUSH
28194: CALL_OW 264
28198: PUSH
28199: LD_INT 14
28201: PUSH
28202: LD_INT 53
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: IN
28209: IFFALSE 28230
// points := [ 40 , 10 , 20 ] ;
28211: LD_ADDR_VAR 0 9
28215: PUSH
28216: LD_INT 40
28218: PUSH
28219: LD_INT 10
28221: PUSH
28222: LD_INT 20
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: LIST
28229: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28230: LD_VAR 0 6
28234: PPUSH
28235: CALL_OW 264
28239: PUSH
28240: LD_INT 9
28242: PUSH
28243: EMPTY
28244: LIST
28245: IN
28246: IFFALSE 28267
// points := [ 5 , 70 , 20 ] ;
28248: LD_ADDR_VAR 0 9
28252: PUSH
28253: LD_INT 5
28255: PUSH
28256: LD_INT 70
28258: PUSH
28259: LD_INT 20
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: LIST
28266: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28267: LD_VAR 0 6
28271: PPUSH
28272: CALL_OW 264
28276: PUSH
28277: LD_INT 10
28279: PUSH
28280: EMPTY
28281: LIST
28282: IN
28283: IFFALSE 28304
// points := [ 35 , 110 , 70 ] ;
28285: LD_ADDR_VAR 0 9
28289: PUSH
28290: LD_INT 35
28292: PUSH
28293: LD_INT 110
28295: PUSH
28296: LD_INT 70
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: LIST
28303: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28304: LD_VAR 0 6
28308: PPUSH
28309: CALL_OW 265
28313: PUSH
28314: LD_INT 25
28316: EQUAL
28317: IFFALSE 28338
// points := [ 80 , 65 , 100 ] ;
28319: LD_ADDR_VAR 0 9
28323: PUSH
28324: LD_INT 80
28326: PUSH
28327: LD_INT 65
28329: PUSH
28330: LD_INT 100
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: LIST
28337: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28338: LD_VAR 0 6
28342: PPUSH
28343: CALL_OW 263
28347: PUSH
28348: LD_INT 1
28350: EQUAL
28351: IFFALSE 28386
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28353: LD_ADDR_VAR 0 10
28357: PUSH
28358: LD_VAR 0 10
28362: PUSH
28363: LD_VAR 0 6
28367: PPUSH
28368: CALL_OW 311
28372: PPUSH
28373: LD_INT 3
28375: PPUSH
28376: CALL_OW 259
28380: PUSH
28381: LD_INT 4
28383: MUL
28384: MUL
28385: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28386: LD_VAR 0 6
28390: PPUSH
28391: CALL_OW 263
28395: PUSH
28396: LD_INT 2
28398: EQUAL
28399: IFFALSE 28450
// begin j := IsControledBy ( i ) ;
28401: LD_ADDR_VAR 0 7
28405: PUSH
28406: LD_VAR 0 6
28410: PPUSH
28411: CALL_OW 312
28415: ST_TO_ADDR
// if j then
28416: LD_VAR 0 7
28420: IFFALSE 28450
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28422: LD_ADDR_VAR 0 10
28426: PUSH
28427: LD_VAR 0 10
28431: PUSH
28432: LD_VAR 0 7
28436: PPUSH
28437: LD_INT 3
28439: PPUSH
28440: CALL_OW 259
28444: PUSH
28445: LD_INT 3
28447: MUL
28448: MUL
28449: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28450: LD_VAR 0 6
28454: PPUSH
28455: CALL_OW 264
28459: PUSH
28460: LD_INT 5
28462: PUSH
28463: LD_INT 6
28465: PUSH
28466: LD_INT 46
28468: PUSH
28469: LD_INT 44
28471: PUSH
28472: LD_INT 47
28474: PUSH
28475: LD_INT 45
28477: PUSH
28478: LD_INT 28
28480: PUSH
28481: LD_INT 7
28483: PUSH
28484: LD_INT 27
28486: PUSH
28487: LD_INT 29
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: LIST
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: IN
28502: IFFALSE 28522
28504: PUSH
28505: LD_VAR 0 1
28509: PPUSH
28510: LD_INT 52
28512: PPUSH
28513: CALL_OW 321
28517: PUSH
28518: LD_INT 2
28520: EQUAL
28521: AND
28522: IFFALSE 28539
// bpoints := bpoints * 1.2 ;
28524: LD_ADDR_VAR 0 10
28528: PUSH
28529: LD_VAR 0 10
28533: PUSH
28534: LD_REAL  1.20000000000000E+0000
28537: MUL
28538: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28539: LD_VAR 0 6
28543: PPUSH
28544: CALL_OW 264
28548: PUSH
28549: LD_INT 6
28551: PUSH
28552: LD_INT 46
28554: PUSH
28555: LD_INT 47
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: LIST
28562: IN
28563: IFFALSE 28580
// bpoints := bpoints * 1.2 ;
28565: LD_ADDR_VAR 0 10
28569: PUSH
28570: LD_VAR 0 10
28574: PUSH
28575: LD_REAL  1.20000000000000E+0000
28578: MUL
28579: ST_TO_ADDR
// end ; unit_building :
28580: GO 28594
28582: LD_INT 3
28584: DOUBLE
28585: EQUAL
28586: IFTRUE 28590
28588: GO 28593
28590: POP
// ; end ;
28591: GO 28594
28593: POP
// for j = 1 to 3 do
28594: LD_ADDR_VAR 0 7
28598: PUSH
28599: DOUBLE
28600: LD_INT 1
28602: DEC
28603: ST_TO_ADDR
28604: LD_INT 3
28606: PUSH
28607: FOR_TO
28608: IFFALSE 28661
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28610: LD_ADDR_VAR 0 5
28614: PUSH
28615: LD_VAR 0 5
28619: PPUSH
28620: LD_VAR 0 7
28624: PPUSH
28625: LD_VAR 0 5
28629: PUSH
28630: LD_VAR 0 7
28634: ARRAY
28635: PUSH
28636: LD_VAR 0 9
28640: PUSH
28641: LD_VAR 0 7
28645: ARRAY
28646: PUSH
28647: LD_VAR 0 10
28651: MUL
28652: PLUS
28653: PPUSH
28654: CALL_OW 1
28658: ST_TO_ADDR
28659: GO 28607
28661: POP
28662: POP
// end ;
28663: GO 27136
28665: POP
28666: POP
// result := Replace ( result , 4 , tmp ) ;
28667: LD_ADDR_VAR 0 5
28671: PUSH
28672: LD_VAR 0 5
28676: PPUSH
28677: LD_INT 4
28679: PPUSH
28680: LD_VAR 0 8
28684: PPUSH
28685: CALL_OW 1
28689: ST_TO_ADDR
// end ;
28690: LD_VAR 0 5
28694: RET
// export function DangerAtRange ( unit , range ) ; begin
28695: LD_INT 0
28697: PPUSH
// if not unit then
28698: LD_VAR 0 1
28702: NOT
28703: IFFALSE 28707
// exit ;
28705: GO 28752
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28707: LD_ADDR_VAR 0 3
28711: PUSH
28712: LD_VAR 0 1
28716: PPUSH
28717: CALL_OW 255
28721: PPUSH
28722: LD_VAR 0 1
28726: PPUSH
28727: CALL_OW 250
28731: PPUSH
28732: LD_VAR 0 1
28736: PPUSH
28737: CALL_OW 251
28741: PPUSH
28742: LD_VAR 0 2
28746: PPUSH
28747: CALL 26986 0 4
28751: ST_TO_ADDR
// end ;
28752: LD_VAR 0 3
28756: RET
// export function DangerInArea ( side , area ) ; begin
28757: LD_INT 0
28759: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28760: LD_ADDR_VAR 0 3
28764: PUSH
28765: LD_VAR 0 2
28769: PPUSH
28770: LD_INT 81
28772: PUSH
28773: LD_VAR 0 1
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: PPUSH
28782: CALL_OW 70
28786: ST_TO_ADDR
// end ;
28787: LD_VAR 0 3
28791: RET
// export function IsExtension ( b ) ; begin
28792: LD_INT 0
28794: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28795: LD_ADDR_VAR 0 2
28799: PUSH
28800: LD_VAR 0 1
28804: PUSH
28805: LD_INT 23
28807: PUSH
28808: LD_INT 20
28810: PUSH
28811: LD_INT 22
28813: PUSH
28814: LD_INT 17
28816: PUSH
28817: LD_INT 24
28819: PUSH
28820: LD_INT 21
28822: PUSH
28823: LD_INT 19
28825: PUSH
28826: LD_INT 16
28828: PUSH
28829: LD_INT 25
28831: PUSH
28832: LD_INT 18
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: IN
28847: ST_TO_ADDR
// end ;
28848: LD_VAR 0 2
28852: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
28853: LD_INT 0
28855: PPUSH
28856: PPUSH
28857: PPUSH
// result := [ ] ;
28858: LD_ADDR_VAR 0 4
28862: PUSH
28863: EMPTY
28864: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28865: LD_ADDR_VAR 0 5
28869: PUSH
28870: LD_VAR 0 2
28874: PPUSH
28875: LD_INT 21
28877: PUSH
28878: LD_INT 3
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PPUSH
28885: CALL_OW 70
28889: ST_TO_ADDR
// if not tmp then
28890: LD_VAR 0 5
28894: NOT
28895: IFFALSE 28899
// exit ;
28897: GO 28963
// if checkLink then
28899: LD_VAR 0 3
28903: IFFALSE 28953
// begin for i in tmp do
28905: LD_ADDR_VAR 0 6
28909: PUSH
28910: LD_VAR 0 5
28914: PUSH
28915: FOR_IN
28916: IFFALSE 28951
// if GetBase ( i ) <> base then
28918: LD_VAR 0 6
28922: PPUSH
28923: CALL_OW 274
28927: PUSH
28928: LD_VAR 0 1
28932: NONEQUAL
28933: IFFALSE 28949
// ComLinkToBase ( base , i ) ;
28935: LD_VAR 0 1
28939: PPUSH
28940: LD_VAR 0 6
28944: PPUSH
28945: CALL_OW 169
28949: GO 28915
28951: POP
28952: POP
// end ; result := tmp ;
28953: LD_ADDR_VAR 0 4
28957: PUSH
28958: LD_VAR 0 5
28962: ST_TO_ADDR
// end ;
28963: LD_VAR 0 4
28967: RET
// export function ComComplete ( units , b ) ; var i ; begin
28968: LD_INT 0
28970: PPUSH
28971: PPUSH
// if not units then
28972: LD_VAR 0 1
28976: NOT
28977: IFFALSE 28981
// exit ;
28979: GO 29071
// for i in units do
28981: LD_ADDR_VAR 0 4
28985: PUSH
28986: LD_VAR 0 1
28990: PUSH
28991: FOR_IN
28992: IFFALSE 29069
// if BuildingStatus ( b ) = bs_build then
28994: LD_VAR 0 2
28998: PPUSH
28999: CALL_OW 461
29003: PUSH
29004: LD_INT 1
29006: EQUAL
29007: IFFALSE 29067
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29009: LD_VAR 0 4
29013: PPUSH
29014: LD_STRING h
29016: PUSH
29017: LD_VAR 0 2
29021: PPUSH
29022: CALL_OW 250
29026: PUSH
29027: LD_VAR 0 2
29031: PPUSH
29032: CALL_OW 251
29036: PUSH
29037: LD_VAR 0 2
29041: PUSH
29042: LD_INT 0
29044: PUSH
29045: LD_INT 0
29047: PUSH
29048: LD_INT 0
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: PUSH
29060: EMPTY
29061: LIST
29062: PPUSH
29063: CALL_OW 446
29067: GO 28991
29069: POP
29070: POP
// end ;
29071: LD_VAR 0 3
29075: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29076: LD_INT 0
29078: PPUSH
29079: PPUSH
29080: PPUSH
29081: PPUSH
29082: PPUSH
29083: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
29084: LD_VAR 0 1
29088: NOT
29089: IFTRUE 29106
29091: PUSH
29092: LD_VAR 0 1
29096: PPUSH
29097: CALL_OW 263
29101: PUSH
29102: LD_INT 2
29104: NONEQUAL
29105: OR
29106: IFFALSE 29110
// exit ;
29108: GO 29426
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29110: LD_ADDR_VAR 0 6
29114: PUSH
29115: LD_INT 22
29117: PUSH
29118: LD_VAR 0 1
29122: PPUSH
29123: CALL_OW 255
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: PUSH
29132: LD_INT 2
29134: PUSH
29135: LD_INT 30
29137: PUSH
29138: LD_INT 36
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PUSH
29145: LD_INT 34
29147: PUSH
29148: LD_INT 31
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: LIST
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PPUSH
29164: CALL_OW 69
29168: ST_TO_ADDR
// if not tmp then
29169: LD_VAR 0 6
29173: NOT
29174: IFFALSE 29178
// exit ;
29176: GO 29426
// result := [ ] ;
29178: LD_ADDR_VAR 0 2
29182: PUSH
29183: EMPTY
29184: ST_TO_ADDR
// for i in tmp do
29185: LD_ADDR_VAR 0 3
29189: PUSH
29190: LD_VAR 0 6
29194: PUSH
29195: FOR_IN
29196: IFFALSE 29267
// begin t := UnitsInside ( i ) ;
29198: LD_ADDR_VAR 0 4
29202: PUSH
29203: LD_VAR 0 3
29207: PPUSH
29208: CALL_OW 313
29212: ST_TO_ADDR
// if t then
29213: LD_VAR 0 4
29217: IFFALSE 29265
// for j in t do
29219: LD_ADDR_VAR 0 7
29223: PUSH
29224: LD_VAR 0 4
29228: PUSH
29229: FOR_IN
29230: IFFALSE 29263
// result := Replace ( result , result + 1 , j ) ;
29232: LD_ADDR_VAR 0 2
29236: PUSH
29237: LD_VAR 0 2
29241: PPUSH
29242: LD_VAR 0 2
29246: PUSH
29247: LD_INT 1
29249: PLUS
29250: PPUSH
29251: LD_VAR 0 7
29255: PPUSH
29256: CALL_OW 1
29260: ST_TO_ADDR
29261: GO 29229
29263: POP
29264: POP
// end ;
29265: GO 29195
29267: POP
29268: POP
// if not result then
29269: LD_VAR 0 2
29273: NOT
29274: IFFALSE 29278
// exit ;
29276: GO 29426
// mech := result [ 1 ] ;
29278: LD_ADDR_VAR 0 5
29282: PUSH
29283: LD_VAR 0 2
29287: PUSH
29288: LD_INT 1
29290: ARRAY
29291: ST_TO_ADDR
// if result > 1 then
29292: LD_VAR 0 2
29296: PUSH
29297: LD_INT 1
29299: GREATER
29300: IFFALSE 29412
// begin for i = 2 to result do
29302: LD_ADDR_VAR 0 3
29306: PUSH
29307: DOUBLE
29308: LD_INT 2
29310: DEC
29311: ST_TO_ADDR
29312: LD_VAR 0 2
29316: PUSH
29317: FOR_TO
29318: IFFALSE 29410
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29320: LD_ADDR_VAR 0 4
29324: PUSH
29325: LD_VAR 0 2
29329: PUSH
29330: LD_VAR 0 3
29334: ARRAY
29335: PPUSH
29336: LD_INT 3
29338: PPUSH
29339: CALL_OW 259
29343: PUSH
29344: LD_VAR 0 2
29348: PUSH
29349: LD_VAR 0 3
29353: ARRAY
29354: PPUSH
29355: CALL_OW 432
29359: MINUS
29360: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29361: LD_VAR 0 4
29365: PUSH
29366: LD_VAR 0 5
29370: PPUSH
29371: LD_INT 3
29373: PPUSH
29374: CALL_OW 259
29378: PUSH
29379: LD_VAR 0 5
29383: PPUSH
29384: CALL_OW 432
29388: MINUS
29389: GREATEREQUAL
29390: IFFALSE 29408
// mech := result [ i ] ;
29392: LD_ADDR_VAR 0 5
29396: PUSH
29397: LD_VAR 0 2
29401: PUSH
29402: LD_VAR 0 3
29406: ARRAY
29407: ST_TO_ADDR
// end ;
29408: GO 29317
29410: POP
29411: POP
// end ; ComLinkTo ( vehicle , mech ) ;
29412: LD_VAR 0 1
29416: PPUSH
29417: LD_VAR 0 5
29421: PPUSH
29422: CALL_OW 135
// end ;
29426: LD_VAR 0 2
29430: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29431: LD_INT 0
29433: PPUSH
29434: PPUSH
29435: PPUSH
29436: PPUSH
29437: PPUSH
29438: PPUSH
29439: PPUSH
29440: PPUSH
29441: PPUSH
29442: PPUSH
29443: PPUSH
29444: PPUSH
29445: PPUSH
// result := [ ] ;
29446: LD_ADDR_VAR 0 7
29450: PUSH
29451: EMPTY
29452: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29453: LD_VAR 0 1
29457: PPUSH
29458: CALL_OW 266
29462: PUSH
29463: LD_INT 0
29465: PUSH
29466: LD_INT 1
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: IN
29473: NOT
29474: IFFALSE 29478
// exit ;
29476: GO 31118
// if name then
29478: LD_VAR 0 3
29482: IFFALSE 29498
// SetBName ( base_dep , name ) ;
29484: LD_VAR 0 1
29488: PPUSH
29489: LD_VAR 0 3
29493: PPUSH
29494: CALL_OW 500
// base := GetBase ( base_dep ) ;
29498: LD_ADDR_VAR 0 15
29502: PUSH
29503: LD_VAR 0 1
29507: PPUSH
29508: CALL_OW 274
29512: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29513: LD_ADDR_VAR 0 16
29517: PUSH
29518: LD_VAR 0 1
29522: PPUSH
29523: CALL_OW 255
29527: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29528: LD_ADDR_VAR 0 17
29532: PUSH
29533: LD_VAR 0 1
29537: PPUSH
29538: CALL_OW 248
29542: ST_TO_ADDR
// if sources then
29543: LD_VAR 0 5
29547: IFFALSE 29594
// for i = 1 to 3 do
29549: LD_ADDR_VAR 0 8
29553: PUSH
29554: DOUBLE
29555: LD_INT 1
29557: DEC
29558: ST_TO_ADDR
29559: LD_INT 3
29561: PUSH
29562: FOR_TO
29563: IFFALSE 29592
// AddResourceType ( base , i , sources [ i ] ) ;
29565: LD_VAR 0 15
29569: PPUSH
29570: LD_VAR 0 8
29574: PPUSH
29575: LD_VAR 0 5
29579: PUSH
29580: LD_VAR 0 8
29584: ARRAY
29585: PPUSH
29586: CALL_OW 276
29590: GO 29562
29592: POP
29593: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
29594: LD_ADDR_VAR 0 18
29598: PUSH
29599: LD_VAR 0 15
29603: PPUSH
29604: LD_VAR 0 2
29608: PPUSH
29609: LD_INT 1
29611: PPUSH
29612: CALL 28853 0 3
29616: ST_TO_ADDR
// InitHc ;
29617: CALL_OW 19
// InitUc ;
29621: CALL_OW 18
// uc_side := side ;
29625: LD_ADDR_OWVAR 20
29629: PUSH
29630: LD_VAR 0 16
29634: ST_TO_ADDR
// uc_nation := nation ;
29635: LD_ADDR_OWVAR 21
29639: PUSH
29640: LD_VAR 0 17
29644: ST_TO_ADDR
// if buildings then
29645: LD_VAR 0 18
29649: IFFALSE 30977
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29651: LD_ADDR_VAR 0 19
29655: PUSH
29656: LD_VAR 0 18
29660: PPUSH
29661: LD_INT 2
29663: PUSH
29664: LD_INT 30
29666: PUSH
29667: LD_INT 29
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 30
29676: PUSH
29677: LD_INT 30
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: LIST
29688: PPUSH
29689: CALL_OW 72
29693: ST_TO_ADDR
// if tmp then
29694: LD_VAR 0 19
29698: IFFALSE 29746
// for i in tmp do
29700: LD_ADDR_VAR 0 8
29704: PUSH
29705: LD_VAR 0 19
29709: PUSH
29710: FOR_IN
29711: IFFALSE 29744
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29713: LD_VAR 0 8
29717: PPUSH
29718: CALL_OW 250
29722: PPUSH
29723: LD_VAR 0 8
29727: PPUSH
29728: CALL_OW 251
29732: PPUSH
29733: LD_VAR 0 16
29737: PPUSH
29738: CALL_OW 441
29742: GO 29710
29744: POP
29745: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29746: LD_VAR 0 18
29750: PPUSH
29751: LD_INT 2
29753: PUSH
29754: LD_INT 30
29756: PUSH
29757: LD_INT 32
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: LD_INT 30
29766: PUSH
29767: LD_INT 33
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: LIST
29778: PPUSH
29779: CALL_OW 72
29783: IFFALSE 29871
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29785: LD_ADDR_VAR 0 8
29789: PUSH
29790: LD_VAR 0 18
29794: PPUSH
29795: LD_INT 2
29797: PUSH
29798: LD_INT 30
29800: PUSH
29801: LD_INT 32
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 30
29810: PUSH
29811: LD_INT 33
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: LIST
29822: PPUSH
29823: CALL_OW 72
29827: PUSH
29828: FOR_IN
29829: IFFALSE 29869
// begin if not GetBWeapon ( i ) then
29831: LD_VAR 0 8
29835: PPUSH
29836: CALL_OW 269
29840: NOT
29841: IFFALSE 29867
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29843: LD_VAR 0 8
29847: PPUSH
29848: LD_VAR 0 8
29852: PPUSH
29853: LD_VAR 0 2
29857: PPUSH
29858: CALL 31123 0 2
29862: PPUSH
29863: CALL_OW 431
// end ;
29867: GO 29828
29869: POP
29870: POP
// end ; for i = 1 to personel do
29871: LD_ADDR_VAR 0 8
29875: PUSH
29876: DOUBLE
29877: LD_INT 1
29879: DEC
29880: ST_TO_ADDR
29881: LD_VAR 0 6
29885: PUSH
29886: FOR_TO
29887: IFFALSE 30957
// begin if i > 4 then
29889: LD_VAR 0 8
29893: PUSH
29894: LD_INT 4
29896: GREATER
29897: IFFALSE 29901
// break ;
29899: GO 30957
// case i of 1 :
29901: LD_VAR 0 8
29905: PUSH
29906: LD_INT 1
29908: DOUBLE
29909: EQUAL
29910: IFTRUE 29914
29912: GO 29994
29914: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29915: LD_ADDR_VAR 0 12
29919: PUSH
29920: LD_VAR 0 18
29924: PPUSH
29925: LD_INT 22
29927: PUSH
29928: LD_VAR 0 16
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 58
29939: PUSH
29940: EMPTY
29941: LIST
29942: PUSH
29943: LD_INT 2
29945: PUSH
29946: LD_INT 30
29948: PUSH
29949: LD_INT 32
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: PUSH
29956: LD_INT 30
29958: PUSH
29959: LD_INT 4
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: LD_INT 30
29968: PUSH
29969: LD_INT 5
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: LIST
29986: PPUSH
29987: CALL_OW 72
29991: ST_TO_ADDR
29992: GO 30216
29994: LD_INT 2
29996: DOUBLE
29997: EQUAL
29998: IFTRUE 30002
30000: GO 30064
30002: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30003: LD_ADDR_VAR 0 12
30007: PUSH
30008: LD_VAR 0 18
30012: PPUSH
30013: LD_INT 22
30015: PUSH
30016: LD_VAR 0 16
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PUSH
30025: LD_INT 2
30027: PUSH
30028: LD_INT 30
30030: PUSH
30031: LD_INT 0
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 30
30040: PUSH
30041: LD_INT 1
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: LIST
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PPUSH
30057: CALL_OW 72
30061: ST_TO_ADDR
30062: GO 30216
30064: LD_INT 3
30066: DOUBLE
30067: EQUAL
30068: IFTRUE 30072
30070: GO 30134
30072: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30073: LD_ADDR_VAR 0 12
30077: PUSH
30078: LD_VAR 0 18
30082: PPUSH
30083: LD_INT 22
30085: PUSH
30086: LD_VAR 0 16
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PUSH
30095: LD_INT 2
30097: PUSH
30098: LD_INT 30
30100: PUSH
30101: LD_INT 2
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: LD_INT 30
30110: PUSH
30111: LD_INT 3
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: LIST
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PPUSH
30127: CALL_OW 72
30131: ST_TO_ADDR
30132: GO 30216
30134: LD_INT 4
30136: DOUBLE
30137: EQUAL
30138: IFTRUE 30142
30140: GO 30215
30142: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30143: LD_ADDR_VAR 0 12
30147: PUSH
30148: LD_VAR 0 18
30152: PPUSH
30153: LD_INT 22
30155: PUSH
30156: LD_VAR 0 16
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 2
30167: PUSH
30168: LD_INT 30
30170: PUSH
30171: LD_INT 6
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: LD_INT 30
30180: PUSH
30181: LD_INT 7
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: PUSH
30188: LD_INT 30
30190: PUSH
30191: LD_INT 8
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PPUSH
30208: CALL_OW 72
30212: ST_TO_ADDR
30213: GO 30216
30215: POP
// if i = 1 then
30216: LD_VAR 0 8
30220: PUSH
30221: LD_INT 1
30223: EQUAL
30224: IFFALSE 30335
// begin tmp := [ ] ;
30226: LD_ADDR_VAR 0 19
30230: PUSH
30231: EMPTY
30232: ST_TO_ADDR
// for j in f do
30233: LD_ADDR_VAR 0 9
30237: PUSH
30238: LD_VAR 0 12
30242: PUSH
30243: FOR_IN
30244: IFFALSE 30317
// if GetBType ( j ) = b_bunker then
30246: LD_VAR 0 9
30250: PPUSH
30251: CALL_OW 266
30255: PUSH
30256: LD_INT 32
30258: EQUAL
30259: IFFALSE 30286
// tmp := Insert ( tmp , 1 , j ) else
30261: LD_ADDR_VAR 0 19
30265: PUSH
30266: LD_VAR 0 19
30270: PPUSH
30271: LD_INT 1
30273: PPUSH
30274: LD_VAR 0 9
30278: PPUSH
30279: CALL_OW 2
30283: ST_TO_ADDR
30284: GO 30315
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30286: LD_ADDR_VAR 0 19
30290: PUSH
30291: LD_VAR 0 19
30295: PPUSH
30296: LD_VAR 0 19
30300: PUSH
30301: LD_INT 1
30303: PLUS
30304: PPUSH
30305: LD_VAR 0 9
30309: PPUSH
30310: CALL_OW 2
30314: ST_TO_ADDR
30315: GO 30243
30317: POP
30318: POP
// if tmp then
30319: LD_VAR 0 19
30323: IFFALSE 30335
// f := tmp ;
30325: LD_ADDR_VAR 0 12
30329: PUSH
30330: LD_VAR 0 19
30334: ST_TO_ADDR
// end ; x := personel [ i ] ;
30335: LD_ADDR_VAR 0 13
30339: PUSH
30340: LD_VAR 0 6
30344: PUSH
30345: LD_VAR 0 8
30349: ARRAY
30350: ST_TO_ADDR
// if x = - 1 then
30351: LD_VAR 0 13
30355: PUSH
30356: LD_INT 1
30358: NEG
30359: EQUAL
30360: IFFALSE 30571
// begin for j in f do
30362: LD_ADDR_VAR 0 9
30366: PUSH
30367: LD_VAR 0 12
30371: PUSH
30372: FOR_IN
30373: IFFALSE 30567
// repeat InitHc ;
30375: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30379: LD_VAR 0 9
30383: PPUSH
30384: CALL_OW 266
30388: PUSH
30389: LD_INT 5
30391: EQUAL
30392: IFFALSE 30462
// begin if UnitsInside ( j ) < 3 then
30394: LD_VAR 0 9
30398: PPUSH
30399: CALL_OW 313
30403: PUSH
30404: LD_INT 3
30406: LESS
30407: IFFALSE 30443
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30409: LD_INT 0
30411: PPUSH
30412: LD_INT 5
30414: PUSH
30415: LD_INT 8
30417: PUSH
30418: LD_INT 9
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: LIST
30425: PUSH
30426: LD_VAR 0 17
30430: ARRAY
30431: PPUSH
30432: LD_VAR 0 4
30436: PPUSH
30437: CALL_OW 380
30441: GO 30460
// PrepareHuman ( false , i , skill ) ;
30443: LD_INT 0
30445: PPUSH
30446: LD_VAR 0 8
30450: PPUSH
30451: LD_VAR 0 4
30455: PPUSH
30456: CALL_OW 380
// end else
30460: GO 30479
// PrepareHuman ( false , i , skill ) ;
30462: LD_INT 0
30464: PPUSH
30465: LD_VAR 0 8
30469: PPUSH
30470: LD_VAR 0 4
30474: PPUSH
30475: CALL_OW 380
// un := CreateHuman ;
30479: LD_ADDR_VAR 0 14
30483: PUSH
30484: CALL_OW 44
30488: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30489: LD_ADDR_VAR 0 7
30493: PUSH
30494: LD_VAR 0 7
30498: PPUSH
30499: LD_INT 1
30501: PPUSH
30502: LD_VAR 0 14
30506: PPUSH
30507: CALL_OW 2
30511: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30512: LD_VAR 0 14
30516: PPUSH
30517: LD_VAR 0 9
30521: PPUSH
30522: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30526: LD_VAR 0 9
30530: PPUSH
30531: CALL_OW 313
30535: PUSH
30536: LD_INT 6
30538: EQUAL
30539: IFTRUE 30563
30541: PUSH
30542: LD_VAR 0 9
30546: PPUSH
30547: CALL_OW 266
30551: PUSH
30552: LD_INT 32
30554: PUSH
30555: LD_INT 31
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: IN
30562: OR
30563: IFFALSE 30375
30565: GO 30372
30567: POP
30568: POP
// end else
30569: GO 30955
// for j = 1 to x do
30571: LD_ADDR_VAR 0 9
30575: PUSH
30576: DOUBLE
30577: LD_INT 1
30579: DEC
30580: ST_TO_ADDR
30581: LD_VAR 0 13
30585: PUSH
30586: FOR_TO
30587: IFFALSE 30953
// begin InitHc ;
30589: CALL_OW 19
// if not f then
30593: LD_VAR 0 12
30597: NOT
30598: IFFALSE 30687
// begin PrepareHuman ( false , i , skill ) ;
30600: LD_INT 0
30602: PPUSH
30603: LD_VAR 0 8
30607: PPUSH
30608: LD_VAR 0 4
30612: PPUSH
30613: CALL_OW 380
// un := CreateHuman ;
30617: LD_ADDR_VAR 0 14
30621: PUSH
30622: CALL_OW 44
30626: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30627: LD_ADDR_VAR 0 7
30631: PUSH
30632: LD_VAR 0 7
30636: PPUSH
30637: LD_INT 1
30639: PPUSH
30640: LD_VAR 0 14
30644: PPUSH
30645: CALL_OW 2
30649: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30650: LD_VAR 0 14
30654: PPUSH
30655: LD_VAR 0 1
30659: PPUSH
30660: CALL_OW 250
30664: PPUSH
30665: LD_VAR 0 1
30669: PPUSH
30670: CALL_OW 251
30674: PPUSH
30675: LD_INT 10
30677: PPUSH
30678: LD_INT 0
30680: PPUSH
30681: CALL_OW 50
// continue ;
30685: GO 30586
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30687: LD_VAR 0 12
30691: PUSH
30692: LD_INT 1
30694: ARRAY
30695: PPUSH
30696: CALL_OW 313
30700: IFFALSE 30728
30702: PUSH
30703: LD_VAR 0 12
30707: PUSH
30708: LD_INT 1
30710: ARRAY
30711: PPUSH
30712: CALL_OW 266
30716: PUSH
30717: LD_INT 32
30719: PUSH
30720: LD_INT 31
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: IN
30727: AND
30728: IFTRUE 30749
30730: PUSH
30731: LD_VAR 0 12
30735: PUSH
30736: LD_INT 1
30738: ARRAY
30739: PPUSH
30740: CALL_OW 313
30744: PUSH
30745: LD_INT 6
30747: EQUAL
30748: OR
30749: IFFALSE 30769
// f := Delete ( f , 1 ) ;
30751: LD_ADDR_VAR 0 12
30755: PUSH
30756: LD_VAR 0 12
30760: PPUSH
30761: LD_INT 1
30763: PPUSH
30764: CALL_OW 3
30768: ST_TO_ADDR
// if not f then
30769: LD_VAR 0 12
30773: NOT
30774: IFFALSE 30792
// begin x := x + 2 ;
30776: LD_ADDR_VAR 0 13
30780: PUSH
30781: LD_VAR 0 13
30785: PUSH
30786: LD_INT 2
30788: PLUS
30789: ST_TO_ADDR
// continue ;
30790: GO 30586
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30792: LD_VAR 0 12
30796: PUSH
30797: LD_INT 1
30799: ARRAY
30800: PPUSH
30801: CALL_OW 266
30805: PUSH
30806: LD_INT 5
30808: EQUAL
30809: IFFALSE 30883
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30811: LD_VAR 0 12
30815: PUSH
30816: LD_INT 1
30818: ARRAY
30819: PPUSH
30820: CALL_OW 313
30824: PUSH
30825: LD_INT 3
30827: LESS
30828: IFFALSE 30864
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30830: LD_INT 0
30832: PPUSH
30833: LD_INT 5
30835: PUSH
30836: LD_INT 8
30838: PUSH
30839: LD_INT 9
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: LIST
30846: PUSH
30847: LD_VAR 0 17
30851: ARRAY
30852: PPUSH
30853: LD_VAR 0 4
30857: PPUSH
30858: CALL_OW 380
30862: GO 30881
// PrepareHuman ( false , i , skill ) ;
30864: LD_INT 0
30866: PPUSH
30867: LD_VAR 0 8
30871: PPUSH
30872: LD_VAR 0 4
30876: PPUSH
30877: CALL_OW 380
// end else
30881: GO 30900
// PrepareHuman ( false , i , skill ) ;
30883: LD_INT 0
30885: PPUSH
30886: LD_VAR 0 8
30890: PPUSH
30891: LD_VAR 0 4
30895: PPUSH
30896: CALL_OW 380
// un := CreateHuman ;
30900: LD_ADDR_VAR 0 14
30904: PUSH
30905: CALL_OW 44
30909: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30910: LD_ADDR_VAR 0 7
30914: PUSH
30915: LD_VAR 0 7
30919: PPUSH
30920: LD_INT 1
30922: PPUSH
30923: LD_VAR 0 14
30927: PPUSH
30928: CALL_OW 2
30932: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30933: LD_VAR 0 14
30937: PPUSH
30938: LD_VAR 0 12
30942: PUSH
30943: LD_INT 1
30945: ARRAY
30946: PPUSH
30947: CALL_OW 52
// end ;
30951: GO 30586
30953: POP
30954: POP
// end ;
30955: GO 29886
30957: POP
30958: POP
// result := result ^ buildings ;
30959: LD_ADDR_VAR 0 7
30963: PUSH
30964: LD_VAR 0 7
30968: PUSH
30969: LD_VAR 0 18
30973: ADD
30974: ST_TO_ADDR
// end else
30975: GO 31118
// begin for i = 1 to personel do
30977: LD_ADDR_VAR 0 8
30981: PUSH
30982: DOUBLE
30983: LD_INT 1
30985: DEC
30986: ST_TO_ADDR
30987: LD_VAR 0 6
30991: PUSH
30992: FOR_TO
30993: IFFALSE 31116
// begin if i > 4 then
30995: LD_VAR 0 8
30999: PUSH
31000: LD_INT 4
31002: GREATER
31003: IFFALSE 31007
// break ;
31005: GO 31116
// x := personel [ i ] ;
31007: LD_ADDR_VAR 0 13
31011: PUSH
31012: LD_VAR 0 6
31016: PUSH
31017: LD_VAR 0 8
31021: ARRAY
31022: ST_TO_ADDR
// if x = - 1 then
31023: LD_VAR 0 13
31027: PUSH
31028: LD_INT 1
31030: NEG
31031: EQUAL
31032: IFFALSE 31036
// continue ;
31034: GO 30992
// PrepareHuman ( false , i , skill ) ;
31036: LD_INT 0
31038: PPUSH
31039: LD_VAR 0 8
31043: PPUSH
31044: LD_VAR 0 4
31048: PPUSH
31049: CALL_OW 380
// un := CreateHuman ;
31053: LD_ADDR_VAR 0 14
31057: PUSH
31058: CALL_OW 44
31062: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31063: LD_VAR 0 14
31067: PPUSH
31068: LD_VAR 0 1
31072: PPUSH
31073: CALL_OW 250
31077: PPUSH
31078: LD_VAR 0 1
31082: PPUSH
31083: CALL_OW 251
31087: PPUSH
31088: LD_INT 10
31090: PPUSH
31091: LD_INT 0
31093: PPUSH
31094: CALL_OW 50
// result := result ^ un ;
31098: LD_ADDR_VAR 0 7
31102: PUSH
31103: LD_VAR 0 7
31107: PUSH
31108: LD_VAR 0 14
31112: ADD
31113: ST_TO_ADDR
// end ;
31114: GO 30992
31116: POP
31117: POP
// end ; end ;
31118: LD_VAR 0 7
31122: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31123: LD_INT 0
31125: PPUSH
31126: PPUSH
31127: PPUSH
31128: PPUSH
31129: PPUSH
31130: PPUSH
31131: PPUSH
31132: PPUSH
31133: PPUSH
31134: PPUSH
31135: PPUSH
31136: PPUSH
31137: PPUSH
31138: PPUSH
31139: PPUSH
31140: PPUSH
// result := false ;
31141: LD_ADDR_VAR 0 3
31145: PUSH
31146: LD_INT 0
31148: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31149: LD_VAR 0 1
31153: NOT
31154: IFTRUE 31179
31156: PUSH
31157: LD_VAR 0 1
31161: PPUSH
31162: CALL_OW 266
31166: PUSH
31167: LD_INT 32
31169: PUSH
31170: LD_INT 33
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: IN
31177: NOT
31178: OR
31179: IFFALSE 31183
// exit ;
31181: GO 32318
// nat := GetNation ( tower ) ;
31183: LD_ADDR_VAR 0 12
31187: PUSH
31188: LD_VAR 0 1
31192: PPUSH
31193: CALL_OW 248
31197: ST_TO_ADDR
// side := GetSide ( tower ) ;
31198: LD_ADDR_VAR 0 16
31202: PUSH
31203: LD_VAR 0 1
31207: PPUSH
31208: CALL_OW 255
31212: ST_TO_ADDR
// x := GetX ( tower ) ;
31213: LD_ADDR_VAR 0 10
31217: PUSH
31218: LD_VAR 0 1
31222: PPUSH
31223: CALL_OW 250
31227: ST_TO_ADDR
// y := GetY ( tower ) ;
31228: LD_ADDR_VAR 0 11
31232: PUSH
31233: LD_VAR 0 1
31237: PPUSH
31238: CALL_OW 251
31242: ST_TO_ADDR
// if not x or not y then
31243: LD_VAR 0 10
31247: NOT
31248: IFTRUE 31257
31250: PUSH
31251: LD_VAR 0 11
31255: NOT
31256: OR
31257: IFFALSE 31261
// exit ;
31259: GO 32318
// weapon := 0 ;
31261: LD_ADDR_VAR 0 18
31265: PUSH
31266: LD_INT 0
31268: ST_TO_ADDR
// fac_list := [ ] ;
31269: LD_ADDR_VAR 0 17
31273: PUSH
31274: EMPTY
31275: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
31276: LD_ADDR_VAR 0 6
31280: PUSH
31281: LD_VAR 0 1
31285: PPUSH
31286: CALL_OW 274
31290: PPUSH
31291: LD_VAR 0 2
31295: PPUSH
31296: LD_INT 0
31298: PPUSH
31299: CALL 28853 0 3
31303: PPUSH
31304: LD_INT 30
31306: PUSH
31307: LD_INT 3
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PPUSH
31314: CALL_OW 72
31318: ST_TO_ADDR
// if not factories then
31319: LD_VAR 0 6
31323: NOT
31324: IFFALSE 31328
// exit ;
31326: GO 32318
// for i in factories do
31328: LD_ADDR_VAR 0 8
31332: PUSH
31333: LD_VAR 0 6
31337: PUSH
31338: FOR_IN
31339: IFFALSE 31364
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31341: LD_ADDR_VAR 0 17
31345: PUSH
31346: LD_VAR 0 17
31350: PUSH
31351: LD_VAR 0 8
31355: PPUSH
31356: CALL_OW 478
31360: UNION
31361: ST_TO_ADDR
31362: GO 31338
31364: POP
31365: POP
// if not fac_list then
31366: LD_VAR 0 17
31370: NOT
31371: IFFALSE 31375
// exit ;
31373: GO 32318
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31375: LD_ADDR_VAR 0 5
31379: PUSH
31380: LD_INT 4
31382: PUSH
31383: LD_INT 5
31385: PUSH
31386: LD_INT 9
31388: PUSH
31389: LD_INT 10
31391: PUSH
31392: LD_INT 6
31394: PUSH
31395: LD_INT 7
31397: PUSH
31398: LD_INT 11
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: PUSH
31410: LD_INT 27
31412: PUSH
31413: LD_INT 28
31415: PUSH
31416: LD_INT 26
31418: PUSH
31419: LD_INT 30
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: PUSH
31428: LD_INT 43
31430: PUSH
31431: LD_INT 44
31433: PUSH
31434: LD_INT 46
31436: PUSH
31437: LD_INT 45
31439: PUSH
31440: LD_INT 47
31442: PUSH
31443: LD_INT 49
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: LIST
31458: PUSH
31459: LD_VAR 0 12
31463: ARRAY
31464: ST_TO_ADDR
// list := list isect fac_list ;
31465: LD_ADDR_VAR 0 5
31469: PUSH
31470: LD_VAR 0 5
31474: PUSH
31475: LD_VAR 0 17
31479: ISECT
31480: ST_TO_ADDR
// if not list then
31481: LD_VAR 0 5
31485: NOT
31486: IFFALSE 31490
// exit ;
31488: GO 32318
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31490: LD_VAR 0 12
31494: PUSH
31495: LD_INT 3
31497: EQUAL
31498: IFFALSE 31510
31500: PUSH
31501: LD_INT 49
31503: PUSH
31504: LD_VAR 0 5
31508: IN
31509: AND
31510: IFFALSE 31530
31512: PUSH
31513: LD_INT 31
31515: PPUSH
31516: LD_VAR 0 16
31520: PPUSH
31521: CALL_OW 321
31525: PUSH
31526: LD_INT 2
31528: EQUAL
31529: AND
31530: IFFALSE 31590
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31532: LD_INT 22
31534: PUSH
31535: LD_VAR 0 16
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 35
31546: PUSH
31547: LD_INT 49
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 91
31556: PUSH
31557: LD_VAR 0 1
31561: PUSH
31562: LD_INT 10
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: LIST
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: LIST
31574: PPUSH
31575: CALL_OW 69
31579: NOT
31580: IFFALSE 31590
// weapon := ru_time_lapser ;
31582: LD_ADDR_VAR 0 18
31586: PUSH
31587: LD_INT 49
31589: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31590: LD_VAR 0 12
31594: PUSH
31595: LD_INT 1
31597: PUSH
31598: LD_INT 2
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: IN
31605: IFFALSE 31629
31607: PUSH
31608: LD_INT 11
31610: PUSH
31611: LD_VAR 0 5
31615: IN
31616: IFTRUE 31628
31618: PUSH
31619: LD_INT 30
31621: PUSH
31622: LD_VAR 0 5
31626: IN
31627: OR
31628: AND
31629: IFFALSE 31649
31631: PUSH
31632: LD_INT 6
31634: PPUSH
31635: LD_VAR 0 16
31639: PPUSH
31640: CALL_OW 321
31644: PUSH
31645: LD_INT 2
31647: EQUAL
31648: AND
31649: IFFALSE 31816
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31651: LD_INT 22
31653: PUSH
31654: LD_VAR 0 16
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: LD_INT 2
31665: PUSH
31666: LD_INT 35
31668: PUSH
31669: LD_INT 11
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 35
31678: PUSH
31679: LD_INT 30
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: LIST
31690: PUSH
31691: LD_INT 91
31693: PUSH
31694: LD_VAR 0 1
31698: PUSH
31699: LD_INT 18
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: LIST
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: LIST
31711: PPUSH
31712: CALL_OW 69
31716: NOT
31717: IFFALSE 31793
31719: PUSH
31720: LD_INT 22
31722: PUSH
31723: LD_VAR 0 16
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: LD_INT 2
31734: PUSH
31735: LD_INT 30
31737: PUSH
31738: LD_INT 32
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: LD_INT 30
31747: PUSH
31748: LD_INT 33
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: LIST
31759: PUSH
31760: LD_INT 91
31762: PUSH
31763: LD_VAR 0 1
31767: PUSH
31768: LD_INT 12
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: LIST
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: LIST
31780: PUSH
31781: EMPTY
31782: LIST
31783: PPUSH
31784: CALL_OW 69
31788: PUSH
31789: LD_INT 2
31791: GREATER
31792: AND
31793: IFFALSE 31816
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31795: LD_ADDR_VAR 0 18
31799: PUSH
31800: LD_INT 11
31802: PUSH
31803: LD_INT 30
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_VAR 0 12
31814: ARRAY
31815: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31816: LD_VAR 0 18
31820: NOT
31821: IFFALSE 31841
31823: PUSH
31824: LD_INT 40
31826: PPUSH
31827: LD_VAR 0 16
31831: PPUSH
31832: CALL_OW 321
31836: PUSH
31837: LD_INT 2
31839: EQUAL
31840: AND
31841: IFFALSE 31877
31843: PUSH
31844: LD_INT 7
31846: PUSH
31847: LD_VAR 0 5
31851: IN
31852: IFTRUE 31864
31854: PUSH
31855: LD_INT 28
31857: PUSH
31858: LD_VAR 0 5
31862: IN
31863: OR
31864: IFTRUE 31876
31866: PUSH
31867: LD_INT 45
31869: PUSH
31870: LD_VAR 0 5
31874: IN
31875: OR
31876: AND
31877: IFFALSE 32131
// begin hex := GetHexInfo ( x , y ) ;
31879: LD_ADDR_VAR 0 4
31883: PUSH
31884: LD_VAR 0 10
31888: PPUSH
31889: LD_VAR 0 11
31893: PPUSH
31894: CALL_OW 546
31898: ST_TO_ADDR
// if hex [ 1 ] then
31899: LD_VAR 0 4
31903: PUSH
31904: LD_INT 1
31906: ARRAY
31907: IFFALSE 31911
// exit ;
31909: GO 32318
// height := hex [ 2 ] ;
31911: LD_ADDR_VAR 0 15
31915: PUSH
31916: LD_VAR 0 4
31920: PUSH
31921: LD_INT 2
31923: ARRAY
31924: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31925: LD_ADDR_VAR 0 14
31929: PUSH
31930: LD_INT 0
31932: PUSH
31933: LD_INT 2
31935: PUSH
31936: LD_INT 3
31938: PUSH
31939: LD_INT 5
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: ST_TO_ADDR
// for i in tmp do
31948: LD_ADDR_VAR 0 8
31952: PUSH
31953: LD_VAR 0 14
31957: PUSH
31958: FOR_IN
31959: IFFALSE 32129
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31961: LD_ADDR_VAR 0 9
31965: PUSH
31966: LD_VAR 0 10
31970: PPUSH
31971: LD_VAR 0 8
31975: PPUSH
31976: LD_INT 5
31978: PPUSH
31979: CALL_OW 272
31983: PUSH
31984: LD_VAR 0 11
31988: PPUSH
31989: LD_VAR 0 8
31993: PPUSH
31994: LD_INT 5
31996: PPUSH
31997: CALL_OW 273
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32006: LD_VAR 0 9
32010: PUSH
32011: LD_INT 1
32013: ARRAY
32014: PPUSH
32015: LD_VAR 0 9
32019: PUSH
32020: LD_INT 2
32022: ARRAY
32023: PPUSH
32024: CALL_OW 488
32028: IFFALSE 32127
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32030: LD_ADDR_VAR 0 4
32034: PUSH
32035: LD_VAR 0 9
32039: PUSH
32040: LD_INT 1
32042: ARRAY
32043: PPUSH
32044: LD_VAR 0 9
32048: PUSH
32049: LD_INT 2
32051: ARRAY
32052: PPUSH
32053: CALL_OW 546
32057: ST_TO_ADDR
// if hex [ 1 ] then
32058: LD_VAR 0 4
32062: PUSH
32063: LD_INT 1
32065: ARRAY
32066: IFFALSE 32070
// continue ;
32068: GO 31958
// h := hex [ 2 ] ;
32070: LD_ADDR_VAR 0 13
32074: PUSH
32075: LD_VAR 0 4
32079: PUSH
32080: LD_INT 2
32082: ARRAY
32083: ST_TO_ADDR
// if h + 7 < height then
32084: LD_VAR 0 13
32088: PUSH
32089: LD_INT 7
32091: PLUS
32092: PUSH
32093: LD_VAR 0 15
32097: LESS
32098: IFFALSE 32127
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32100: LD_ADDR_VAR 0 18
32104: PUSH
32105: LD_INT 7
32107: PUSH
32108: LD_INT 28
32110: PUSH
32111: LD_INT 45
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: LIST
32118: PUSH
32119: LD_VAR 0 12
32123: ARRAY
32124: ST_TO_ADDR
// break ;
32125: GO 32129
// end ; end ; end ;
32127: GO 31958
32129: POP
32130: POP
// end ; if not weapon then
32131: LD_VAR 0 18
32135: NOT
32136: IFFALSE 32196
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32138: LD_ADDR_VAR 0 5
32142: PUSH
32143: LD_VAR 0 5
32147: PUSH
32148: LD_INT 11
32150: PUSH
32151: LD_INT 30
32153: PUSH
32154: LD_INT 49
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: LIST
32161: DIFF
32162: ST_TO_ADDR
// if not list then
32163: LD_VAR 0 5
32167: NOT
32168: IFFALSE 32172
// exit ;
32170: GO 32318
// weapon := list [ rand ( 1 , list ) ] ;
32172: LD_ADDR_VAR 0 18
32176: PUSH
32177: LD_VAR 0 5
32181: PUSH
32182: LD_INT 1
32184: PPUSH
32185: LD_VAR 0 5
32189: PPUSH
32190: CALL_OW 12
32194: ARRAY
32195: ST_TO_ADDR
// end ; if weapon then
32196: LD_VAR 0 18
32200: IFFALSE 32318
// begin tmp := CostOfWeapon ( weapon ) ;
32202: LD_ADDR_VAR 0 14
32206: PUSH
32207: LD_VAR 0 18
32211: PPUSH
32212: CALL_OW 451
32216: ST_TO_ADDR
// j := GetBase ( tower ) ;
32217: LD_ADDR_VAR 0 9
32221: PUSH
32222: LD_VAR 0 1
32226: PPUSH
32227: CALL_OW 274
32231: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32232: LD_VAR 0 9
32236: PPUSH
32237: LD_INT 1
32239: PPUSH
32240: CALL_OW 275
32244: PUSH
32245: LD_VAR 0 14
32249: PUSH
32250: LD_INT 1
32252: ARRAY
32253: GREATEREQUAL
32254: IFFALSE 32280
32256: PUSH
32257: LD_VAR 0 9
32261: PPUSH
32262: LD_INT 2
32264: PPUSH
32265: CALL_OW 275
32269: PUSH
32270: LD_VAR 0 14
32274: PUSH
32275: LD_INT 2
32277: ARRAY
32278: GREATEREQUAL
32279: AND
32280: IFFALSE 32306
32282: PUSH
32283: LD_VAR 0 9
32287: PPUSH
32288: LD_INT 3
32290: PPUSH
32291: CALL_OW 275
32295: PUSH
32296: LD_VAR 0 14
32300: PUSH
32301: LD_INT 3
32303: ARRAY
32304: GREATEREQUAL
32305: AND
32306: IFFALSE 32318
// result := weapon ;
32308: LD_ADDR_VAR 0 3
32312: PUSH
32313: LD_VAR 0 18
32317: ST_TO_ADDR
// end ; end ;
32318: LD_VAR 0 3
32322: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32323: LD_INT 0
32325: PPUSH
32326: PPUSH
// result := true ;
32327: LD_ADDR_VAR 0 3
32331: PUSH
32332: LD_INT 1
32334: ST_TO_ADDR
// if array1 = array2 then
32335: LD_VAR 0 1
32339: PUSH
32340: LD_VAR 0 2
32344: EQUAL
32345: IFFALSE 32405
// begin for i = 1 to array1 do
32347: LD_ADDR_VAR 0 4
32351: PUSH
32352: DOUBLE
32353: LD_INT 1
32355: DEC
32356: ST_TO_ADDR
32357: LD_VAR 0 1
32361: PUSH
32362: FOR_TO
32363: IFFALSE 32401
// if array1 [ i ] <> array2 [ i ] then
32365: LD_VAR 0 1
32369: PUSH
32370: LD_VAR 0 4
32374: ARRAY
32375: PUSH
32376: LD_VAR 0 2
32380: PUSH
32381: LD_VAR 0 4
32385: ARRAY
32386: NONEQUAL
32387: IFFALSE 32399
// begin result := false ;
32389: LD_ADDR_VAR 0 3
32393: PUSH
32394: LD_INT 0
32396: ST_TO_ADDR
// break ;
32397: GO 32401
// end ;
32399: GO 32362
32401: POP
32402: POP
// end else
32403: GO 32413
// result := false ;
32405: LD_ADDR_VAR 0 3
32409: PUSH
32410: LD_INT 0
32412: ST_TO_ADDR
// end ;
32413: LD_VAR 0 3
32417: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
32418: LD_INT 0
32420: PPUSH
32421: PPUSH
// if not array1 or not array2 then
32422: LD_VAR 0 1
32426: NOT
32427: IFTRUE 32436
32429: PUSH
32430: LD_VAR 0 2
32434: NOT
32435: OR
32436: IFFALSE 32440
// exit ;
32438: GO 32504
// result := true ;
32440: LD_ADDR_VAR 0 3
32444: PUSH
32445: LD_INT 1
32447: ST_TO_ADDR
// for i = 1 to array1 do
32448: LD_ADDR_VAR 0 4
32452: PUSH
32453: DOUBLE
32454: LD_INT 1
32456: DEC
32457: ST_TO_ADDR
32458: LD_VAR 0 1
32462: PUSH
32463: FOR_TO
32464: IFFALSE 32502
// if array1 [ i ] <> array2 [ i ] then
32466: LD_VAR 0 1
32470: PUSH
32471: LD_VAR 0 4
32475: ARRAY
32476: PUSH
32477: LD_VAR 0 2
32481: PUSH
32482: LD_VAR 0 4
32486: ARRAY
32487: NONEQUAL
32488: IFFALSE 32500
// begin result := false ;
32490: LD_ADDR_VAR 0 3
32494: PUSH
32495: LD_INT 0
32497: ST_TO_ADDR
// break ;
32498: GO 32502
// end ;
32500: GO 32463
32502: POP
32503: POP
// end ;
32504: LD_VAR 0 3
32508: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32509: LD_INT 0
32511: PPUSH
32512: PPUSH
32513: PPUSH
// pom := GetBase ( fac ) ;
32514: LD_ADDR_VAR 0 5
32518: PUSH
32519: LD_VAR 0 1
32523: PPUSH
32524: CALL_OW 274
32528: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32529: LD_ADDR_VAR 0 4
32533: PUSH
32534: LD_VAR 0 2
32538: PUSH
32539: LD_INT 1
32541: ARRAY
32542: PPUSH
32543: LD_VAR 0 2
32547: PUSH
32548: LD_INT 2
32550: ARRAY
32551: PPUSH
32552: LD_VAR 0 2
32556: PUSH
32557: LD_INT 3
32559: ARRAY
32560: PPUSH
32561: LD_VAR 0 2
32565: PUSH
32566: LD_INT 4
32568: ARRAY
32569: PPUSH
32570: CALL_OW 449
32574: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32575: LD_ADDR_VAR 0 3
32579: PUSH
32580: LD_VAR 0 5
32584: PPUSH
32585: LD_INT 1
32587: PPUSH
32588: CALL_OW 275
32592: PUSH
32593: LD_VAR 0 4
32597: PUSH
32598: LD_INT 1
32600: ARRAY
32601: GREATEREQUAL
32602: IFFALSE 32628
32604: PUSH
32605: LD_VAR 0 5
32609: PPUSH
32610: LD_INT 2
32612: PPUSH
32613: CALL_OW 275
32617: PUSH
32618: LD_VAR 0 4
32622: PUSH
32623: LD_INT 2
32625: ARRAY
32626: GREATEREQUAL
32627: AND
32628: IFFALSE 32654
32630: PUSH
32631: LD_VAR 0 5
32635: PPUSH
32636: LD_INT 3
32638: PPUSH
32639: CALL_OW 275
32643: PUSH
32644: LD_VAR 0 4
32648: PUSH
32649: LD_INT 3
32651: ARRAY
32652: GREATEREQUAL
32653: AND
32654: ST_TO_ADDR
// end ;
32655: LD_VAR 0 3
32659: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32660: LD_INT 0
32662: PPUSH
32663: PPUSH
32664: PPUSH
32665: PPUSH
// pom := GetBase ( building ) ;
32666: LD_ADDR_VAR 0 3
32670: PUSH
32671: LD_VAR 0 1
32675: PPUSH
32676: CALL_OW 274
32680: ST_TO_ADDR
// if not pom then
32681: LD_VAR 0 3
32685: NOT
32686: IFFALSE 32690
// exit ;
32688: GO 32864
// btype := GetBType ( building ) ;
32690: LD_ADDR_VAR 0 5
32694: PUSH
32695: LD_VAR 0 1
32699: PPUSH
32700: CALL_OW 266
32704: ST_TO_ADDR
// if btype = b_armoury then
32705: LD_VAR 0 5
32709: PUSH
32710: LD_INT 4
32712: EQUAL
32713: IFFALSE 32723
// btype := b_barracks ;
32715: LD_ADDR_VAR 0 5
32719: PUSH
32720: LD_INT 5
32722: ST_TO_ADDR
// if btype = b_depot then
32723: LD_VAR 0 5
32727: PUSH
32728: LD_INT 0
32730: EQUAL
32731: IFFALSE 32741
// btype := b_warehouse ;
32733: LD_ADDR_VAR 0 5
32737: PUSH
32738: LD_INT 1
32740: ST_TO_ADDR
// if btype = b_workshop then
32741: LD_VAR 0 5
32745: PUSH
32746: LD_INT 2
32748: EQUAL
32749: IFFALSE 32759
// btype := b_factory ;
32751: LD_ADDR_VAR 0 5
32755: PUSH
32756: LD_INT 3
32758: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32759: LD_ADDR_VAR 0 4
32763: PUSH
32764: LD_VAR 0 5
32768: PPUSH
32769: LD_VAR 0 1
32773: PPUSH
32774: CALL_OW 248
32778: PPUSH
32779: CALL_OW 450
32783: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32784: LD_ADDR_VAR 0 2
32788: PUSH
32789: LD_VAR 0 3
32793: PPUSH
32794: LD_INT 1
32796: PPUSH
32797: CALL_OW 275
32801: PUSH
32802: LD_VAR 0 4
32806: PUSH
32807: LD_INT 1
32809: ARRAY
32810: GREATEREQUAL
32811: IFFALSE 32837
32813: PUSH
32814: LD_VAR 0 3
32818: PPUSH
32819: LD_INT 2
32821: PPUSH
32822: CALL_OW 275
32826: PUSH
32827: LD_VAR 0 4
32831: PUSH
32832: LD_INT 2
32834: ARRAY
32835: GREATEREQUAL
32836: AND
32837: IFFALSE 32863
32839: PUSH
32840: LD_VAR 0 3
32844: PPUSH
32845: LD_INT 3
32847: PPUSH
32848: CALL_OW 275
32852: PUSH
32853: LD_VAR 0 4
32857: PUSH
32858: LD_INT 3
32860: ARRAY
32861: GREATEREQUAL
32862: AND
32863: ST_TO_ADDR
// end ;
32864: LD_VAR 0 2
32868: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32869: LD_INT 0
32871: PPUSH
32872: PPUSH
32873: PPUSH
// pom := GetBase ( building ) ;
32874: LD_ADDR_VAR 0 4
32878: PUSH
32879: LD_VAR 0 1
32883: PPUSH
32884: CALL_OW 274
32888: ST_TO_ADDR
// if not pom then
32889: LD_VAR 0 4
32893: NOT
32894: IFFALSE 32898
// exit ;
32896: GO 33003
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32898: LD_ADDR_VAR 0 5
32902: PUSH
32903: LD_VAR 0 2
32907: PPUSH
32908: LD_VAR 0 1
32912: PPUSH
32913: CALL_OW 248
32917: PPUSH
32918: CALL_OW 450
32922: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32923: LD_ADDR_VAR 0 3
32927: PUSH
32928: LD_VAR 0 4
32932: PPUSH
32933: LD_INT 1
32935: PPUSH
32936: CALL_OW 275
32940: PUSH
32941: LD_VAR 0 5
32945: PUSH
32946: LD_INT 1
32948: ARRAY
32949: GREATEREQUAL
32950: IFFALSE 32976
32952: PUSH
32953: LD_VAR 0 4
32957: PPUSH
32958: LD_INT 2
32960: PPUSH
32961: CALL_OW 275
32965: PUSH
32966: LD_VAR 0 5
32970: PUSH
32971: LD_INT 2
32973: ARRAY
32974: GREATEREQUAL
32975: AND
32976: IFFALSE 33002
32978: PUSH
32979: LD_VAR 0 4
32983: PPUSH
32984: LD_INT 3
32986: PPUSH
32987: CALL_OW 275
32991: PUSH
32992: LD_VAR 0 5
32996: PUSH
32997: LD_INT 3
32999: ARRAY
33000: GREATEREQUAL
33001: AND
33002: ST_TO_ADDR
// end ;
33003: LD_VAR 0 3
33007: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33008: LD_INT 0
33010: PPUSH
33011: PPUSH
33012: PPUSH
33013: PPUSH
33014: PPUSH
33015: PPUSH
33016: PPUSH
33017: PPUSH
33018: PPUSH
33019: PPUSH
33020: PPUSH
// result := false ;
33021: LD_ADDR_VAR 0 8
33025: PUSH
33026: LD_INT 0
33028: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33029: LD_VAR 0 5
33033: NOT
33034: IFTRUE 33043
33036: PUSH
33037: LD_VAR 0 1
33041: NOT
33042: OR
33043: IFTRUE 33052
33045: PUSH
33046: LD_VAR 0 2
33050: NOT
33051: OR
33052: IFTRUE 33061
33054: PUSH
33055: LD_VAR 0 3
33059: NOT
33060: OR
33061: IFFALSE 33065
// exit ;
33063: GO 33891
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33065: LD_ADDR_VAR 0 14
33069: PUSH
33070: LD_VAR 0 1
33074: PPUSH
33075: LD_VAR 0 2
33079: PPUSH
33080: LD_VAR 0 3
33084: PPUSH
33085: LD_VAR 0 4
33089: PPUSH
33090: LD_VAR 0 5
33094: PUSH
33095: LD_INT 1
33097: ARRAY
33098: PPUSH
33099: CALL_OW 248
33103: PPUSH
33104: LD_INT 0
33106: PPUSH
33107: CALL 35172 0 6
33111: ST_TO_ADDR
// if not hexes then
33112: LD_VAR 0 14
33116: NOT
33117: IFFALSE 33121
// exit ;
33119: GO 33891
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33121: LD_ADDR_VAR 0 17
33125: PUSH
33126: LD_VAR 0 5
33130: PPUSH
33131: LD_INT 22
33133: PUSH
33134: LD_VAR 0 13
33138: PPUSH
33139: CALL_OW 255
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: PUSH
33148: LD_INT 2
33150: PUSH
33151: LD_INT 30
33153: PUSH
33154: LD_INT 0
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: LD_INT 30
33163: PUSH
33164: LD_INT 1
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: LIST
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PPUSH
33180: CALL_OW 72
33184: ST_TO_ADDR
// for i = 1 to hexes do
33185: LD_ADDR_VAR 0 9
33189: PUSH
33190: DOUBLE
33191: LD_INT 1
33193: DEC
33194: ST_TO_ADDR
33195: LD_VAR 0 14
33199: PUSH
33200: FOR_TO
33201: IFFALSE 33889
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33203: LD_ADDR_VAR 0 13
33207: PUSH
33208: LD_VAR 0 14
33212: PUSH
33213: LD_VAR 0 9
33217: ARRAY
33218: PUSH
33219: LD_INT 1
33221: ARRAY
33222: PPUSH
33223: LD_VAR 0 14
33227: PUSH
33228: LD_VAR 0 9
33232: ARRAY
33233: PUSH
33234: LD_INT 2
33236: ARRAY
33237: PPUSH
33238: CALL_OW 428
33242: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33243: LD_VAR 0 14
33247: PUSH
33248: LD_VAR 0 9
33252: ARRAY
33253: PUSH
33254: LD_INT 1
33256: ARRAY
33257: PPUSH
33258: LD_VAR 0 14
33262: PUSH
33263: LD_VAR 0 9
33267: ARRAY
33268: PUSH
33269: LD_INT 2
33271: ARRAY
33272: PPUSH
33273: CALL_OW 351
33277: IFTRUE 33316
33279: PUSH
33280: LD_VAR 0 14
33284: PUSH
33285: LD_VAR 0 9
33289: ARRAY
33290: PUSH
33291: LD_INT 1
33293: ARRAY
33294: PPUSH
33295: LD_VAR 0 14
33299: PUSH
33300: LD_VAR 0 9
33304: ARRAY
33305: PUSH
33306: LD_INT 2
33308: ARRAY
33309: PPUSH
33310: CALL_OW 488
33314: NOT
33315: OR
33316: IFTRUE 33333
33318: PUSH
33319: LD_VAR 0 13
33323: PPUSH
33324: CALL_OW 247
33328: PUSH
33329: LD_INT 3
33331: EQUAL
33332: OR
33333: IFFALSE 33339
// exit ;
33335: POP
33336: POP
33337: GO 33891
// if not tmp then
33339: LD_VAR 0 13
33343: NOT
33344: IFFALSE 33348
// continue ;
33346: GO 33200
// result := true ;
33348: LD_ADDR_VAR 0 8
33352: PUSH
33353: LD_INT 1
33355: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
33356: LD_VAR 0 6
33360: IFFALSE 33377
33362: PUSH
33363: LD_VAR 0 13
33367: PPUSH
33368: CALL_OW 247
33372: PUSH
33373: LD_INT 2
33375: EQUAL
33376: AND
33377: IFFALSE 33394
33379: PUSH
33380: LD_VAR 0 13
33384: PPUSH
33385: CALL_OW 263
33389: PUSH
33390: LD_INT 1
33392: EQUAL
33393: AND
33394: IFFALSE 33558
// begin if IsDrivenBy ( tmp ) then
33396: LD_VAR 0 13
33400: PPUSH
33401: CALL_OW 311
33405: IFFALSE 33409
// continue ;
33407: GO 33200
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
33409: LD_VAR 0 6
33413: PPUSH
33414: LD_INT 3
33416: PUSH
33417: LD_INT 60
33419: PUSH
33420: EMPTY
33421: LIST
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 3
33429: PUSH
33430: LD_INT 55
33432: PUSH
33433: EMPTY
33434: LIST
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PPUSH
33444: CALL_OW 72
33448: IFFALSE 33556
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
33450: LD_ADDR_VAR 0 18
33454: PUSH
33455: LD_VAR 0 6
33459: PPUSH
33460: LD_INT 3
33462: PUSH
33463: LD_INT 60
33465: PUSH
33466: EMPTY
33467: LIST
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 3
33475: PUSH
33476: LD_INT 55
33478: PUSH
33479: EMPTY
33480: LIST
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PPUSH
33490: CALL_OW 72
33494: PUSH
33495: LD_INT 1
33497: ARRAY
33498: ST_TO_ADDR
// if IsInUnit ( driver ) then
33499: LD_VAR 0 18
33503: PPUSH
33504: CALL_OW 310
33508: IFFALSE 33519
// ComExit ( driver ) ;
33510: LD_VAR 0 18
33514: PPUSH
33515: CALL 59172 0 1
// AddComEnterUnit ( driver , tmp ) ;
33519: LD_VAR 0 18
33523: PPUSH
33524: LD_VAR 0 13
33528: PPUSH
33529: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
33533: LD_VAR 0 18
33537: PPUSH
33538: LD_VAR 0 7
33542: PPUSH
33543: CALL_OW 173
// AddComExitVehicle ( driver ) ;
33547: LD_VAR 0 18
33551: PPUSH
33552: CALL_OW 181
// end ; continue ;
33556: GO 33200
// end ; if not cleaners or not tmp in cleaners then
33558: LD_VAR 0 6
33562: NOT
33563: IFTRUE 33578
33565: PUSH
33566: LD_VAR 0 13
33570: PUSH
33571: LD_VAR 0 6
33575: IN
33576: NOT
33577: OR
33578: IFFALSE 33887
// begin if dep then
33580: LD_VAR 0 17
33584: IFFALSE 33720
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33586: LD_ADDR_VAR 0 16
33590: PUSH
33591: LD_VAR 0 17
33595: PUSH
33596: LD_INT 1
33598: ARRAY
33599: PPUSH
33600: CALL_OW 250
33604: PPUSH
33605: LD_VAR 0 17
33609: PUSH
33610: LD_INT 1
33612: ARRAY
33613: PPUSH
33614: CALL_OW 254
33618: PPUSH
33619: LD_INT 5
33621: PPUSH
33622: CALL_OW 272
33626: PUSH
33627: LD_VAR 0 17
33631: PUSH
33632: LD_INT 1
33634: ARRAY
33635: PPUSH
33636: CALL_OW 251
33640: PPUSH
33641: LD_VAR 0 17
33645: PUSH
33646: LD_INT 1
33648: ARRAY
33649: PPUSH
33650: CALL_OW 254
33654: PPUSH
33655: LD_INT 5
33657: PPUSH
33658: CALL_OW 273
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33667: LD_VAR 0 16
33671: PUSH
33672: LD_INT 1
33674: ARRAY
33675: PPUSH
33676: LD_VAR 0 16
33680: PUSH
33681: LD_INT 2
33683: ARRAY
33684: PPUSH
33685: CALL_OW 488
33689: IFFALSE 33720
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33691: LD_VAR 0 13
33695: PPUSH
33696: LD_VAR 0 16
33700: PUSH
33701: LD_INT 1
33703: ARRAY
33704: PPUSH
33705: LD_VAR 0 16
33709: PUSH
33710: LD_INT 2
33712: ARRAY
33713: PPUSH
33714: CALL_OW 111
// continue ;
33718: GO 33200
// end ; end ; r := GetDir ( tmp ) ;
33720: LD_ADDR_VAR 0 15
33724: PUSH
33725: LD_VAR 0 13
33729: PPUSH
33730: CALL_OW 254
33734: ST_TO_ADDR
// if r = 5 then
33735: LD_VAR 0 15
33739: PUSH
33740: LD_INT 5
33742: EQUAL
33743: IFFALSE 33753
// r := 0 ;
33745: LD_ADDR_VAR 0 15
33749: PUSH
33750: LD_INT 0
33752: ST_TO_ADDR
// for j = r to 5 do
33753: LD_ADDR_VAR 0 10
33757: PUSH
33758: DOUBLE
33759: LD_VAR 0 15
33763: DEC
33764: ST_TO_ADDR
33765: LD_INT 5
33767: PUSH
33768: FOR_TO
33769: IFFALSE 33885
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33771: LD_ADDR_VAR 0 11
33775: PUSH
33776: LD_VAR 0 13
33780: PPUSH
33781: CALL_OW 250
33785: PPUSH
33786: LD_VAR 0 10
33790: PPUSH
33791: LD_INT 2
33793: PPUSH
33794: CALL_OW 272
33798: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33799: LD_ADDR_VAR 0 12
33803: PUSH
33804: LD_VAR 0 13
33808: PPUSH
33809: CALL_OW 251
33813: PPUSH
33814: LD_VAR 0 10
33818: PPUSH
33819: LD_INT 2
33821: PPUSH
33822: CALL_OW 273
33826: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33827: LD_VAR 0 11
33831: PPUSH
33832: LD_VAR 0 12
33836: PPUSH
33837: CALL_OW 488
33841: IFFALSE 33860
33843: PUSH
33844: LD_VAR 0 11
33848: PPUSH
33849: LD_VAR 0 12
33853: PPUSH
33854: CALL_OW 428
33858: NOT
33859: AND
33860: IFFALSE 33883
// begin ComMoveXY ( tmp , _x , _y ) ;
33862: LD_VAR 0 13
33866: PPUSH
33867: LD_VAR 0 11
33871: PPUSH
33872: LD_VAR 0 12
33876: PPUSH
33877: CALL_OW 111
// break ;
33881: GO 33885
// end ; end ;
33883: GO 33768
33885: POP
33886: POP
// end ; end ;
33887: GO 33200
33889: POP
33890: POP
// end ;
33891: LD_VAR 0 8
33895: RET
// export function BuildingTechInvented ( side , btype ) ; begin
33896: LD_INT 0
33898: PPUSH
// result := true ;
33899: LD_ADDR_VAR 0 3
33903: PUSH
33904: LD_INT 1
33906: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
33907: LD_VAR 0 2
33911: PUSH
33912: LD_INT 24
33914: DOUBLE
33915: EQUAL
33916: IFTRUE 33926
33918: LD_INT 33
33920: DOUBLE
33921: EQUAL
33922: IFTRUE 33926
33924: GO 33951
33926: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
33927: LD_ADDR_VAR 0 3
33931: PUSH
33932: LD_INT 32
33934: PPUSH
33935: LD_VAR 0 1
33939: PPUSH
33940: CALL_OW 321
33944: PUSH
33945: LD_INT 2
33947: EQUAL
33948: ST_TO_ADDR
33949: GO 34267
33951: LD_INT 20
33953: DOUBLE
33954: EQUAL
33955: IFTRUE 33959
33957: GO 33984
33959: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
33960: LD_ADDR_VAR 0 3
33964: PUSH
33965: LD_INT 6
33967: PPUSH
33968: LD_VAR 0 1
33972: PPUSH
33973: CALL_OW 321
33977: PUSH
33978: LD_INT 2
33980: EQUAL
33981: ST_TO_ADDR
33982: GO 34267
33984: LD_INT 22
33986: DOUBLE
33987: EQUAL
33988: IFTRUE 33998
33990: LD_INT 36
33992: DOUBLE
33993: EQUAL
33994: IFTRUE 33998
33996: GO 34023
33998: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
33999: LD_ADDR_VAR 0 3
34003: PUSH
34004: LD_INT 15
34006: PPUSH
34007: LD_VAR 0 1
34011: PPUSH
34012: CALL_OW 321
34016: PUSH
34017: LD_INT 2
34019: EQUAL
34020: ST_TO_ADDR
34021: GO 34267
34023: LD_INT 30
34025: DOUBLE
34026: EQUAL
34027: IFTRUE 34031
34029: GO 34056
34031: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
34032: LD_ADDR_VAR 0 3
34036: PUSH
34037: LD_INT 20
34039: PPUSH
34040: LD_VAR 0 1
34044: PPUSH
34045: CALL_OW 321
34049: PUSH
34050: LD_INT 2
34052: EQUAL
34053: ST_TO_ADDR
34054: GO 34267
34056: LD_INT 28
34058: DOUBLE
34059: EQUAL
34060: IFTRUE 34070
34062: LD_INT 21
34064: DOUBLE
34065: EQUAL
34066: IFTRUE 34070
34068: GO 34095
34070: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
34071: LD_ADDR_VAR 0 3
34075: PUSH
34076: LD_INT 21
34078: PPUSH
34079: LD_VAR 0 1
34083: PPUSH
34084: CALL_OW 321
34088: PUSH
34089: LD_INT 2
34091: EQUAL
34092: ST_TO_ADDR
34093: GO 34267
34095: LD_INT 16
34097: DOUBLE
34098: EQUAL
34099: IFTRUE 34103
34101: GO 34128
34103: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
34104: LD_ADDR_VAR 0 3
34108: PUSH
34109: LD_INT 84
34111: PPUSH
34112: LD_VAR 0 1
34116: PPUSH
34117: CALL_OW 321
34121: PUSH
34122: LD_INT 2
34124: EQUAL
34125: ST_TO_ADDR
34126: GO 34267
34128: LD_INT 19
34130: DOUBLE
34131: EQUAL
34132: IFTRUE 34142
34134: LD_INT 23
34136: DOUBLE
34137: EQUAL
34138: IFTRUE 34142
34140: GO 34167
34142: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
34143: LD_ADDR_VAR 0 3
34147: PUSH
34148: LD_INT 83
34150: PPUSH
34151: LD_VAR 0 1
34155: PPUSH
34156: CALL_OW 321
34160: PUSH
34161: LD_INT 2
34163: EQUAL
34164: ST_TO_ADDR
34165: GO 34267
34167: LD_INT 17
34169: DOUBLE
34170: EQUAL
34171: IFTRUE 34175
34173: GO 34200
34175: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
34176: LD_ADDR_VAR 0 3
34180: PUSH
34181: LD_INT 39
34183: PPUSH
34184: LD_VAR 0 1
34188: PPUSH
34189: CALL_OW 321
34193: PUSH
34194: LD_INT 2
34196: EQUAL
34197: ST_TO_ADDR
34198: GO 34267
34200: LD_INT 18
34202: DOUBLE
34203: EQUAL
34204: IFTRUE 34208
34206: GO 34233
34208: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
34209: LD_ADDR_VAR 0 3
34213: PUSH
34214: LD_INT 40
34216: PPUSH
34217: LD_VAR 0 1
34221: PPUSH
34222: CALL_OW 321
34226: PUSH
34227: LD_INT 2
34229: EQUAL
34230: ST_TO_ADDR
34231: GO 34267
34233: LD_INT 27
34235: DOUBLE
34236: EQUAL
34237: IFTRUE 34241
34239: GO 34266
34241: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
34242: LD_ADDR_VAR 0 3
34246: PUSH
34247: LD_INT 35
34249: PPUSH
34250: LD_VAR 0 1
34254: PPUSH
34255: CALL_OW 321
34259: PUSH
34260: LD_INT 2
34262: EQUAL
34263: ST_TO_ADDR
34264: GO 34267
34266: POP
// end ;
34267: LD_VAR 0 3
34271: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
34272: LD_INT 0
34274: PPUSH
34275: PPUSH
34276: PPUSH
34277: PPUSH
34278: PPUSH
34279: PPUSH
34280: PPUSH
34281: PPUSH
34282: PPUSH
34283: PPUSH
34284: PPUSH
// result := false ;
34285: LD_ADDR_VAR 0 6
34289: PUSH
34290: LD_INT 0
34292: ST_TO_ADDR
// if btype = b_depot then
34293: LD_VAR 0 2
34297: PUSH
34298: LD_INT 0
34300: EQUAL
34301: IFFALSE 34313
// begin result := true ;
34303: LD_ADDR_VAR 0 6
34307: PUSH
34308: LD_INT 1
34310: ST_TO_ADDR
// exit ;
34311: GO 35167
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34313: LD_VAR 0 1
34317: NOT
34318: IFTRUE 34343
34320: PUSH
34321: LD_VAR 0 1
34325: PPUSH
34326: CALL_OW 266
34330: PUSH
34331: LD_INT 0
34333: PUSH
34334: LD_INT 1
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: IN
34341: NOT
34342: OR
34343: IFTRUE 34352
34345: PUSH
34346: LD_VAR 0 2
34350: NOT
34351: OR
34352: IFTRUE 34388
34354: PUSH
34355: LD_VAR 0 5
34359: PUSH
34360: LD_INT 0
34362: PUSH
34363: LD_INT 1
34365: PUSH
34366: LD_INT 2
34368: PUSH
34369: LD_INT 3
34371: PUSH
34372: LD_INT 4
34374: PUSH
34375: LD_INT 5
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: IN
34386: NOT
34387: OR
34388: IFTRUE 34407
34390: PUSH
34391: LD_VAR 0 3
34395: PPUSH
34396: LD_VAR 0 4
34400: PPUSH
34401: CALL_OW 488
34405: NOT
34406: OR
34407: IFFALSE 34411
// exit ;
34409: GO 35167
// side := GetSide ( depot ) ;
34411: LD_ADDR_VAR 0 9
34415: PUSH
34416: LD_VAR 0 1
34420: PPUSH
34421: CALL_OW 255
34425: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
34426: LD_VAR 0 9
34430: PPUSH
34431: LD_VAR 0 2
34435: PPUSH
34436: CALL 33896 0 2
34440: NOT
34441: IFFALSE 34445
// exit ;
34443: GO 35167
// pom := GetBase ( depot ) ;
34445: LD_ADDR_VAR 0 10
34449: PUSH
34450: LD_VAR 0 1
34454: PPUSH
34455: CALL_OW 274
34459: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34460: LD_ADDR_VAR 0 11
34464: PUSH
34465: LD_VAR 0 2
34469: PPUSH
34470: LD_VAR 0 1
34474: PPUSH
34475: CALL_OW 248
34479: PPUSH
34480: CALL_OW 450
34484: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34485: LD_VAR 0 10
34489: PPUSH
34490: LD_INT 1
34492: PPUSH
34493: CALL_OW 275
34497: PUSH
34498: LD_VAR 0 11
34502: PUSH
34503: LD_INT 1
34505: ARRAY
34506: GREATEREQUAL
34507: IFFALSE 34533
34509: PUSH
34510: LD_VAR 0 10
34514: PPUSH
34515: LD_INT 2
34517: PPUSH
34518: CALL_OW 275
34522: PUSH
34523: LD_VAR 0 11
34527: PUSH
34528: LD_INT 2
34530: ARRAY
34531: GREATEREQUAL
34532: AND
34533: IFFALSE 34559
34535: PUSH
34536: LD_VAR 0 10
34540: PPUSH
34541: LD_INT 3
34543: PPUSH
34544: CALL_OW 275
34548: PUSH
34549: LD_VAR 0 11
34553: PUSH
34554: LD_INT 3
34556: ARRAY
34557: GREATEREQUAL
34558: AND
34559: NOT
34560: IFFALSE 34564
// exit ;
34562: GO 35167
// if GetBType ( depot ) = b_depot then
34564: LD_VAR 0 1
34568: PPUSH
34569: CALL_OW 266
34573: PUSH
34574: LD_INT 0
34576: EQUAL
34577: IFFALSE 34589
// dist := 28 else
34579: LD_ADDR_VAR 0 14
34583: PUSH
34584: LD_INT 28
34586: ST_TO_ADDR
34587: GO 34597
// dist := 36 ;
34589: LD_ADDR_VAR 0 14
34593: PUSH
34594: LD_INT 36
34596: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34597: LD_VAR 0 1
34601: PPUSH
34602: LD_VAR 0 3
34606: PPUSH
34607: LD_VAR 0 4
34611: PPUSH
34612: CALL_OW 297
34616: PUSH
34617: LD_VAR 0 14
34621: GREATER
34622: IFFALSE 34626
// exit ;
34624: GO 35167
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34626: LD_ADDR_VAR 0 12
34630: PUSH
34631: LD_VAR 0 2
34635: PPUSH
34636: LD_VAR 0 3
34640: PPUSH
34641: LD_VAR 0 4
34645: PPUSH
34646: LD_VAR 0 5
34650: PPUSH
34651: LD_VAR 0 1
34655: PPUSH
34656: CALL_OW 248
34660: PPUSH
34661: LD_INT 0
34663: PPUSH
34664: CALL 35172 0 6
34668: ST_TO_ADDR
// if not hexes then
34669: LD_VAR 0 12
34673: NOT
34674: IFFALSE 34678
// exit ;
34676: GO 35167
// hex := GetHexInfo ( x , y ) ;
34678: LD_ADDR_VAR 0 15
34682: PUSH
34683: LD_VAR 0 3
34687: PPUSH
34688: LD_VAR 0 4
34692: PPUSH
34693: CALL_OW 546
34697: ST_TO_ADDR
// if hex [ 1 ] then
34698: LD_VAR 0 15
34702: PUSH
34703: LD_INT 1
34705: ARRAY
34706: IFFALSE 34710
// exit ;
34708: GO 35167
// height := hex [ 2 ] ;
34710: LD_ADDR_VAR 0 13
34714: PUSH
34715: LD_VAR 0 15
34719: PUSH
34720: LD_INT 2
34722: ARRAY
34723: ST_TO_ADDR
// for i = 1 to hexes do
34724: LD_ADDR_VAR 0 7
34728: PUSH
34729: DOUBLE
34730: LD_INT 1
34732: DEC
34733: ST_TO_ADDR
34734: LD_VAR 0 12
34738: PUSH
34739: FOR_TO
34740: IFFALSE 35084
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34742: LD_VAR 0 12
34746: PUSH
34747: LD_VAR 0 7
34751: ARRAY
34752: PUSH
34753: LD_INT 1
34755: ARRAY
34756: PPUSH
34757: LD_VAR 0 12
34761: PUSH
34762: LD_VAR 0 7
34766: ARRAY
34767: PUSH
34768: LD_INT 2
34770: ARRAY
34771: PPUSH
34772: CALL_OW 488
34776: NOT
34777: IFTRUE 34819
34779: PUSH
34780: LD_VAR 0 12
34784: PUSH
34785: LD_VAR 0 7
34789: ARRAY
34790: PUSH
34791: LD_INT 1
34793: ARRAY
34794: PPUSH
34795: LD_VAR 0 12
34799: PUSH
34800: LD_VAR 0 7
34804: ARRAY
34805: PUSH
34806: LD_INT 2
34808: ARRAY
34809: PPUSH
34810: CALL_OW 428
34814: PUSH
34815: LD_INT 0
34817: GREATER
34818: OR
34819: IFTRUE 34857
34821: PUSH
34822: LD_VAR 0 12
34826: PUSH
34827: LD_VAR 0 7
34831: ARRAY
34832: PUSH
34833: LD_INT 1
34835: ARRAY
34836: PPUSH
34837: LD_VAR 0 12
34841: PUSH
34842: LD_VAR 0 7
34846: ARRAY
34847: PUSH
34848: LD_INT 2
34850: ARRAY
34851: PPUSH
34852: CALL_OW 351
34856: OR
34857: IFFALSE 34863
// exit ;
34859: POP
34860: POP
34861: GO 35167
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34863: LD_ADDR_VAR 0 8
34867: PUSH
34868: LD_VAR 0 12
34872: PUSH
34873: LD_VAR 0 7
34877: ARRAY
34878: PUSH
34879: LD_INT 1
34881: ARRAY
34882: PPUSH
34883: LD_VAR 0 12
34887: PUSH
34888: LD_VAR 0 7
34892: ARRAY
34893: PUSH
34894: LD_INT 2
34896: ARRAY
34897: PPUSH
34898: CALL_OW 546
34902: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34903: LD_VAR 0 8
34907: PUSH
34908: LD_INT 1
34910: ARRAY
34911: IFTRUE 34933
34913: PUSH
34914: LD_VAR 0 8
34918: PUSH
34919: LD_INT 2
34921: ARRAY
34922: PUSH
34923: LD_VAR 0 13
34927: PUSH
34928: LD_INT 2
34930: PLUS
34931: GREATER
34932: OR
34933: IFTRUE 34955
34935: PUSH
34936: LD_VAR 0 8
34940: PUSH
34941: LD_INT 2
34943: ARRAY
34944: PUSH
34945: LD_VAR 0 13
34949: PUSH
34950: LD_INT 2
34952: MINUS
34953: LESS
34954: OR
34955: IFTRUE 35023
34957: PUSH
34958: LD_VAR 0 8
34962: PUSH
34963: LD_INT 3
34965: ARRAY
34966: PUSH
34967: LD_INT 0
34969: PUSH
34970: LD_INT 8
34972: PUSH
34973: LD_INT 9
34975: PUSH
34976: LD_INT 10
34978: PUSH
34979: LD_INT 11
34981: PUSH
34982: LD_INT 12
34984: PUSH
34985: LD_INT 13
34987: PUSH
34988: LD_INT 16
34990: PUSH
34991: LD_INT 17
34993: PUSH
34994: LD_INT 18
34996: PUSH
34997: LD_INT 19
34999: PUSH
35000: LD_INT 20
35002: PUSH
35003: LD_INT 21
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: IN
35021: NOT
35022: OR
35023: IFTRUE 35036
35025: PUSH
35026: LD_VAR 0 8
35030: PUSH
35031: LD_INT 5
35033: ARRAY
35034: NOT
35035: OR
35036: IFTRUE 35076
35038: PUSH
35039: LD_VAR 0 8
35043: PUSH
35044: LD_INT 6
35046: ARRAY
35047: PUSH
35048: LD_INT 1
35050: PUSH
35051: LD_INT 2
35053: PUSH
35054: LD_INT 7
35056: PUSH
35057: LD_INT 9
35059: PUSH
35060: LD_INT 10
35062: PUSH
35063: LD_INT 11
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: IN
35074: NOT
35075: OR
35076: IFFALSE 35082
// exit ;
35078: POP
35079: POP
35080: GO 35167
// end ;
35082: GO 34739
35084: POP
35085: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35086: LD_VAR 0 9
35090: PPUSH
35091: LD_VAR 0 3
35095: PPUSH
35096: LD_VAR 0 4
35100: PPUSH
35101: LD_INT 20
35103: PPUSH
35104: CALL 26986 0 4
35108: PUSH
35109: LD_INT 4
35111: ARRAY
35112: IFFALSE 35116
// exit ;
35114: GO 35167
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35116: LD_VAR 0 2
35120: PUSH
35121: LD_INT 29
35123: PUSH
35124: LD_INT 30
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: IN
35131: IFFALSE 35155
35133: PUSH
35134: LD_VAR 0 3
35138: PPUSH
35139: LD_VAR 0 4
35143: PPUSH
35144: LD_VAR 0 9
35148: PPUSH
35149: CALL_OW 440
35153: NOT
35154: AND
35155: IFFALSE 35159
// exit ;
35157: GO 35167
// result := true ;
35159: LD_ADDR_VAR 0 6
35163: PUSH
35164: LD_INT 1
35166: ST_TO_ADDR
// end ;
35167: LD_VAR 0 6
35171: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35172: LD_INT 0
35174: PPUSH
35175: PPUSH
35176: PPUSH
35177: PPUSH
35178: PPUSH
35179: PPUSH
35180: PPUSH
35181: PPUSH
35182: PPUSH
35183: PPUSH
35184: PPUSH
35185: PPUSH
35186: PPUSH
35187: PPUSH
35188: PPUSH
35189: PPUSH
35190: PPUSH
35191: PPUSH
35192: PPUSH
35193: PPUSH
35194: PPUSH
35195: PPUSH
35196: PPUSH
35197: PPUSH
35198: PPUSH
35199: PPUSH
35200: PPUSH
35201: PPUSH
35202: PPUSH
35203: PPUSH
35204: PPUSH
35205: PPUSH
35206: PPUSH
35207: PPUSH
35208: PPUSH
35209: PPUSH
35210: PPUSH
35211: PPUSH
35212: PPUSH
35213: PPUSH
35214: PPUSH
35215: PPUSH
35216: PPUSH
35217: PPUSH
35218: PPUSH
35219: PPUSH
35220: PPUSH
35221: PPUSH
35222: PPUSH
35223: PPUSH
35224: PPUSH
35225: PPUSH
35226: PPUSH
35227: PPUSH
35228: PPUSH
35229: PPUSH
35230: PPUSH
35231: PPUSH
// result = [ ] ;
35232: LD_ADDR_VAR 0 7
35236: PUSH
35237: EMPTY
35238: ST_TO_ADDR
// temp_list = [ ] ;
35239: LD_ADDR_VAR 0 9
35243: PUSH
35244: EMPTY
35245: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35246: LD_VAR 0 4
35250: PUSH
35251: LD_INT 0
35253: PUSH
35254: LD_INT 1
35256: PUSH
35257: LD_INT 2
35259: PUSH
35260: LD_INT 3
35262: PUSH
35263: LD_INT 4
35265: PUSH
35266: LD_INT 5
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: IN
35277: NOT
35278: IFTRUE 35321
35280: PUSH
35281: LD_VAR 0 1
35285: PUSH
35286: LD_INT 0
35288: PUSH
35289: LD_INT 1
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: IN
35296: IFFALSE 35320
35298: PUSH
35299: LD_VAR 0 5
35303: PUSH
35304: LD_INT 1
35306: PUSH
35307: LD_INT 2
35309: PUSH
35310: LD_INT 3
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: LIST
35317: IN
35318: NOT
35319: AND
35320: OR
35321: IFFALSE 35325
// exit ;
35323: GO 53724
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35325: LD_VAR 0 1
35329: PUSH
35330: LD_INT 6
35332: PUSH
35333: LD_INT 7
35335: PUSH
35336: LD_INT 8
35338: PUSH
35339: LD_INT 13
35341: PUSH
35342: LD_INT 12
35344: PUSH
35345: LD_INT 15
35347: PUSH
35348: LD_INT 11
35350: PUSH
35351: LD_INT 14
35353: PUSH
35354: LD_INT 10
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: IN
35368: IFFALSE 35378
// btype = b_lab ;
35370: LD_ADDR_VAR 0 1
35374: PUSH
35375: LD_INT 6
35377: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35378: LD_VAR 0 6
35382: PUSH
35383: LD_INT 0
35385: PUSH
35386: LD_INT 1
35388: PUSH
35389: LD_INT 2
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: LIST
35396: IN
35397: NOT
35398: IFTRUE 35466
35400: PUSH
35401: LD_VAR 0 1
35405: PUSH
35406: LD_INT 0
35408: PUSH
35409: LD_INT 1
35411: PUSH
35412: LD_INT 2
35414: PUSH
35415: LD_INT 3
35417: PUSH
35418: LD_INT 6
35420: PUSH
35421: LD_INT 36
35423: PUSH
35424: LD_INT 4
35426: PUSH
35427: LD_INT 5
35429: PUSH
35430: LD_INT 31
35432: PUSH
35433: LD_INT 32
35435: PUSH
35436: LD_INT 33
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: LIST
35443: LIST
35444: LIST
35445: LIST
35446: LIST
35447: LIST
35448: LIST
35449: LIST
35450: LIST
35451: IN
35452: NOT
35453: IFFALSE 35465
35455: PUSH
35456: LD_VAR 0 6
35460: PUSH
35461: LD_INT 1
35463: EQUAL
35464: AND
35465: OR
35466: IFTRUE 35498
35468: PUSH
35469: LD_VAR 0 1
35473: PUSH
35474: LD_INT 2
35476: PUSH
35477: LD_INT 3
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: IN
35484: NOT
35485: IFFALSE 35497
35487: PUSH
35488: LD_VAR 0 6
35492: PUSH
35493: LD_INT 2
35495: EQUAL
35496: AND
35497: OR
35498: IFFALSE 35508
// mode = 0 ;
35500: LD_ADDR_VAR 0 6
35504: PUSH
35505: LD_INT 0
35507: ST_TO_ADDR
// case mode of 0 :
35508: LD_VAR 0 6
35512: PUSH
35513: LD_INT 0
35515: DOUBLE
35516: EQUAL
35517: IFTRUE 35521
35519: GO 46974
35521: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35522: LD_ADDR_VAR 0 11
35526: PUSH
35527: LD_INT 0
35529: PUSH
35530: LD_INT 0
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PUSH
35537: LD_INT 0
35539: PUSH
35540: LD_INT 1
35542: NEG
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: LD_INT 1
35550: PUSH
35551: LD_INT 0
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: LD_INT 1
35560: PUSH
35561: LD_INT 1
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: LD_INT 0
35570: PUSH
35571: LD_INT 1
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 1
35580: NEG
35581: PUSH
35582: LD_INT 0
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 1
35591: NEG
35592: PUSH
35593: LD_INT 1
35595: NEG
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 1
35603: NEG
35604: PUSH
35605: LD_INT 2
35607: NEG
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: LD_INT 0
35615: PUSH
35616: LD_INT 2
35618: NEG
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: LD_INT 1
35626: PUSH
35627: LD_INT 1
35629: NEG
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 1
35637: PUSH
35638: LD_INT 2
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: LD_INT 0
35647: PUSH
35648: LD_INT 2
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: PUSH
35655: LD_INT 1
35657: NEG
35658: PUSH
35659: LD_INT 1
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 1
35668: PUSH
35669: LD_INT 3
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 0
35678: PUSH
35679: LD_INT 3
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 1
35688: NEG
35689: PUSH
35690: LD_INT 2
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35715: LD_ADDR_VAR 0 12
35719: PUSH
35720: LD_INT 0
35722: PUSH
35723: LD_INT 0
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 0
35732: PUSH
35733: LD_INT 1
35735: NEG
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 1
35743: PUSH
35744: LD_INT 0
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PUSH
35751: LD_INT 1
35753: PUSH
35754: LD_INT 1
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: PUSH
35761: LD_INT 0
35763: PUSH
35764: LD_INT 1
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PUSH
35771: LD_INT 1
35773: NEG
35774: PUSH
35775: LD_INT 0
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: LD_INT 1
35784: NEG
35785: PUSH
35786: LD_INT 1
35788: NEG
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 1
35796: PUSH
35797: LD_INT 1
35799: NEG
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: LD_INT 2
35807: PUSH
35808: LD_INT 0
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: PUSH
35815: LD_INT 2
35817: PUSH
35818: LD_INT 1
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PUSH
35825: LD_INT 1
35827: NEG
35828: PUSH
35829: LD_INT 1
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: PUSH
35836: LD_INT 2
35838: NEG
35839: PUSH
35840: LD_INT 0
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 2
35849: NEG
35850: PUSH
35851: LD_INT 1
35853: NEG
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: LD_INT 2
35861: NEG
35862: PUSH
35863: LD_INT 1
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: PUSH
35870: LD_INT 3
35872: NEG
35873: PUSH
35874: LD_INT 0
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PUSH
35881: LD_INT 3
35883: NEG
35884: PUSH
35885: LD_INT 1
35887: NEG
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35911: LD_ADDR_VAR 0 13
35915: PUSH
35916: LD_INT 0
35918: PUSH
35919: LD_INT 0
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 0
35928: PUSH
35929: LD_INT 1
35931: NEG
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 1
35939: PUSH
35940: LD_INT 0
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 1
35949: PUSH
35950: LD_INT 1
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: PUSH
35957: LD_INT 0
35959: PUSH
35960: LD_INT 1
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: PUSH
35967: LD_INT 1
35969: NEG
35970: PUSH
35971: LD_INT 0
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: LD_INT 1
35980: NEG
35981: PUSH
35982: LD_INT 1
35984: NEG
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: LD_INT 1
35992: NEG
35993: PUSH
35994: LD_INT 2
35996: NEG
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 2
36004: PUSH
36005: LD_INT 1
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: PUSH
36012: LD_INT 2
36014: PUSH
36015: LD_INT 2
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 1
36024: PUSH
36025: LD_INT 2
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: LD_INT 2
36034: NEG
36035: PUSH
36036: LD_INT 1
36038: NEG
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: LD_INT 2
36046: NEG
36047: PUSH
36048: LD_INT 2
36050: NEG
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: LD_INT 2
36058: NEG
36059: PUSH
36060: LD_INT 3
36062: NEG
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: LD_INT 3
36070: NEG
36071: PUSH
36072: LD_INT 2
36074: NEG
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 3
36082: NEG
36083: PUSH
36084: LD_INT 3
36086: NEG
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: LIST
36108: LIST
36109: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36110: LD_ADDR_VAR 0 14
36114: PUSH
36115: LD_INT 0
36117: PUSH
36118: LD_INT 0
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: PUSH
36125: LD_INT 0
36127: PUSH
36128: LD_INT 1
36130: NEG
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: PUSH
36136: LD_INT 1
36138: PUSH
36139: LD_INT 0
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: PUSH
36146: LD_INT 1
36148: PUSH
36149: LD_INT 1
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: LD_INT 0
36158: PUSH
36159: LD_INT 1
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: LD_INT 1
36168: NEG
36169: PUSH
36170: LD_INT 0
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: PUSH
36177: LD_INT 1
36179: NEG
36180: PUSH
36181: LD_INT 1
36183: NEG
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PUSH
36189: LD_INT 1
36191: NEG
36192: PUSH
36193: LD_INT 2
36195: NEG
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: LD_INT 0
36203: PUSH
36204: LD_INT 2
36206: NEG
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PUSH
36212: LD_INT 1
36214: PUSH
36215: LD_INT 1
36217: NEG
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: LD_INT 1
36225: PUSH
36226: LD_INT 2
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: PUSH
36233: LD_INT 0
36235: PUSH
36236: LD_INT 2
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: PUSH
36243: LD_INT 1
36245: NEG
36246: PUSH
36247: LD_INT 1
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: LD_INT 1
36256: NEG
36257: PUSH
36258: LD_INT 3
36260: NEG
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: LD_INT 0
36268: PUSH
36269: LD_INT 3
36271: NEG
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: LD_INT 1
36279: PUSH
36280: LD_INT 2
36282: NEG
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: LIST
36292: LIST
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36306: LD_ADDR_VAR 0 15
36310: PUSH
36311: LD_INT 0
36313: PUSH
36314: LD_INT 0
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 0
36323: PUSH
36324: LD_INT 1
36326: NEG
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 1
36334: PUSH
36335: LD_INT 0
36337: PUSH
36338: EMPTY
36339: LIST
36340: LIST
36341: PUSH
36342: LD_INT 1
36344: PUSH
36345: LD_INT 1
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: LD_INT 0
36354: PUSH
36355: LD_INT 1
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: LD_INT 1
36364: NEG
36365: PUSH
36366: LD_INT 0
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: PUSH
36373: LD_INT 1
36375: NEG
36376: PUSH
36377: LD_INT 1
36379: NEG
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: LD_INT 1
36387: PUSH
36388: LD_INT 1
36390: NEG
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_INT 2
36398: PUSH
36399: LD_INT 0
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 2
36408: PUSH
36409: LD_INT 1
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 1
36418: NEG
36419: PUSH
36420: LD_INT 1
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: PUSH
36427: LD_INT 2
36429: NEG
36430: PUSH
36431: LD_INT 0
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: LD_INT 2
36440: NEG
36441: PUSH
36442: LD_INT 1
36444: NEG
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: LD_INT 2
36452: PUSH
36453: LD_INT 1
36455: NEG
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: LD_INT 3
36463: PUSH
36464: LD_INT 0
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 3
36473: PUSH
36474: LD_INT 1
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: LIST
36496: LIST
36497: LIST
36498: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36499: LD_ADDR_VAR 0 16
36503: PUSH
36504: LD_INT 0
36506: PUSH
36507: LD_INT 0
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: PUSH
36514: LD_INT 0
36516: PUSH
36517: LD_INT 1
36519: NEG
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: PUSH
36525: LD_INT 1
36527: PUSH
36528: LD_INT 0
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: PUSH
36535: LD_INT 1
36537: PUSH
36538: LD_INT 1
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: PUSH
36545: LD_INT 0
36547: PUSH
36548: LD_INT 1
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: PUSH
36555: LD_INT 1
36557: NEG
36558: PUSH
36559: LD_INT 0
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 1
36568: NEG
36569: PUSH
36570: LD_INT 1
36572: NEG
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: LD_INT 1
36580: NEG
36581: PUSH
36582: LD_INT 2
36584: NEG
36585: PUSH
36586: EMPTY
36587: LIST
36588: LIST
36589: PUSH
36590: LD_INT 2
36592: PUSH
36593: LD_INT 1
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: LD_INT 2
36602: PUSH
36603: LD_INT 2
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: PUSH
36610: LD_INT 1
36612: PUSH
36613: LD_INT 2
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: PUSH
36620: LD_INT 2
36622: NEG
36623: PUSH
36624: LD_INT 1
36626: NEG
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: LD_INT 2
36634: NEG
36635: PUSH
36636: LD_INT 2
36638: NEG
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: PUSH
36644: LD_INT 3
36646: PUSH
36647: LD_INT 2
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: PUSH
36654: LD_INT 3
36656: PUSH
36657: LD_INT 3
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: PUSH
36664: LD_INT 2
36666: PUSH
36667: LD_INT 3
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36692: LD_ADDR_VAR 0 17
36696: PUSH
36697: LD_INT 0
36699: PUSH
36700: LD_INT 0
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: LD_INT 0
36709: PUSH
36710: LD_INT 1
36712: NEG
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: PUSH
36718: LD_INT 1
36720: PUSH
36721: LD_INT 0
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: LD_INT 1
36730: PUSH
36731: LD_INT 1
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: PUSH
36738: LD_INT 0
36740: PUSH
36741: LD_INT 1
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 1
36750: NEG
36751: PUSH
36752: LD_INT 0
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 1
36761: NEG
36762: PUSH
36763: LD_INT 1
36765: NEG
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 1
36773: NEG
36774: PUSH
36775: LD_INT 2
36777: NEG
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: LD_INT 0
36785: PUSH
36786: LD_INT 2
36788: NEG
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: PUSH
36794: LD_INT 1
36796: PUSH
36797: LD_INT 1
36799: NEG
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 2
36807: PUSH
36808: LD_INT 0
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: LD_INT 2
36817: PUSH
36818: LD_INT 1
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 2
36827: PUSH
36828: LD_INT 2
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: LD_INT 1
36837: PUSH
36838: LD_INT 2
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PUSH
36845: LD_INT 0
36847: PUSH
36848: LD_INT 2
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: PUSH
36855: LD_INT 1
36857: NEG
36858: PUSH
36859: LD_INT 1
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 2
36868: NEG
36869: PUSH
36870: LD_INT 0
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: PUSH
36877: LD_INT 2
36879: NEG
36880: PUSH
36881: LD_INT 1
36883: NEG
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 2
36891: NEG
36892: PUSH
36893: LD_INT 2
36895: NEG
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36922: LD_ADDR_VAR 0 18
36926: PUSH
36927: LD_INT 0
36929: PUSH
36930: LD_INT 0
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: PUSH
36937: LD_INT 0
36939: PUSH
36940: LD_INT 1
36942: NEG
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 1
36950: PUSH
36951: LD_INT 0
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 1
36960: PUSH
36961: LD_INT 1
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 0
36970: PUSH
36971: LD_INT 1
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 1
36980: NEG
36981: PUSH
36982: LD_INT 0
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: LD_INT 1
36991: NEG
36992: PUSH
36993: LD_INT 1
36995: NEG
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 1
37003: NEG
37004: PUSH
37005: LD_INT 2
37007: NEG
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PUSH
37013: LD_INT 0
37015: PUSH
37016: LD_INT 2
37018: NEG
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 1
37026: PUSH
37027: LD_INT 1
37029: NEG
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 2
37037: PUSH
37038: LD_INT 0
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 2
37047: PUSH
37048: LD_INT 1
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 2
37057: PUSH
37058: LD_INT 2
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 1
37067: PUSH
37068: LD_INT 2
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: LD_INT 0
37077: PUSH
37078: LD_INT 2
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: LD_INT 1
37087: NEG
37088: PUSH
37089: LD_INT 1
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: PUSH
37096: LD_INT 2
37098: NEG
37099: PUSH
37100: LD_INT 0
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: LD_INT 2
37109: NEG
37110: PUSH
37111: LD_INT 1
37113: NEG
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 2
37121: NEG
37122: PUSH
37123: LD_INT 2
37125: NEG
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: LIST
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: LIST
37150: LIST
37151: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37152: LD_ADDR_VAR 0 19
37156: PUSH
37157: LD_INT 0
37159: PUSH
37160: LD_INT 0
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: LD_INT 0
37169: PUSH
37170: LD_INT 1
37172: NEG
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: PUSH
37178: LD_INT 1
37180: PUSH
37181: LD_INT 0
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 1
37190: PUSH
37191: LD_INT 1
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: LD_INT 0
37200: PUSH
37201: LD_INT 1
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 1
37210: NEG
37211: PUSH
37212: LD_INT 0
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: LD_INT 1
37221: NEG
37222: PUSH
37223: LD_INT 1
37225: NEG
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: LD_INT 1
37233: NEG
37234: PUSH
37235: LD_INT 2
37237: NEG
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PUSH
37243: LD_INT 0
37245: PUSH
37246: LD_INT 2
37248: NEG
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 1
37256: PUSH
37257: LD_INT 1
37259: NEG
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 2
37267: PUSH
37268: LD_INT 0
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 2
37277: PUSH
37278: LD_INT 1
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 2
37287: PUSH
37288: LD_INT 2
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 1
37297: PUSH
37298: LD_INT 2
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 0
37307: PUSH
37308: LD_INT 2
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 1
37317: NEG
37318: PUSH
37319: LD_INT 1
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: LD_INT 2
37328: NEG
37329: PUSH
37330: LD_INT 0
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: PUSH
37337: LD_INT 2
37339: NEG
37340: PUSH
37341: LD_INT 1
37343: NEG
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 2
37351: NEG
37352: PUSH
37353: LD_INT 2
37355: NEG
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37382: LD_ADDR_VAR 0 20
37386: PUSH
37387: LD_INT 0
37389: PUSH
37390: LD_INT 0
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 0
37399: PUSH
37400: LD_INT 1
37402: NEG
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PUSH
37408: LD_INT 1
37410: PUSH
37411: LD_INT 0
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 1
37420: PUSH
37421: LD_INT 1
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: LD_INT 0
37430: PUSH
37431: LD_INT 1
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: LD_INT 1
37440: NEG
37441: PUSH
37442: LD_INT 0
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: LD_INT 1
37451: NEG
37452: PUSH
37453: LD_INT 1
37455: NEG
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 1
37463: NEG
37464: PUSH
37465: LD_INT 2
37467: NEG
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: LD_INT 0
37475: PUSH
37476: LD_INT 2
37478: NEG
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: PUSH
37484: LD_INT 1
37486: PUSH
37487: LD_INT 1
37489: NEG
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PUSH
37495: LD_INT 2
37497: PUSH
37498: LD_INT 0
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: LD_INT 2
37507: PUSH
37508: LD_INT 1
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PUSH
37515: LD_INT 2
37517: PUSH
37518: LD_INT 2
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 1
37527: PUSH
37528: LD_INT 2
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 0
37537: PUSH
37538: LD_INT 2
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 1
37547: NEG
37548: PUSH
37549: LD_INT 1
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: PUSH
37556: LD_INT 2
37558: NEG
37559: PUSH
37560: LD_INT 0
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 2
37569: NEG
37570: PUSH
37571: LD_INT 1
37573: NEG
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: LD_INT 2
37581: NEG
37582: PUSH
37583: LD_INT 2
37585: NEG
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37612: LD_ADDR_VAR 0 21
37616: PUSH
37617: LD_INT 0
37619: PUSH
37620: LD_INT 0
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 0
37629: PUSH
37630: LD_INT 1
37632: NEG
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PUSH
37638: LD_INT 1
37640: PUSH
37641: LD_INT 0
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 1
37650: PUSH
37651: LD_INT 1
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: PUSH
37658: LD_INT 0
37660: PUSH
37661: LD_INT 1
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 1
37670: NEG
37671: PUSH
37672: LD_INT 0
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: LD_INT 1
37681: NEG
37682: PUSH
37683: LD_INT 1
37685: NEG
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 1
37693: NEG
37694: PUSH
37695: LD_INT 2
37697: NEG
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 0
37705: PUSH
37706: LD_INT 2
37708: NEG
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 1
37716: PUSH
37717: LD_INT 1
37719: NEG
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: PUSH
37725: LD_INT 2
37727: PUSH
37728: LD_INT 0
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: LD_INT 2
37737: PUSH
37738: LD_INT 1
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 2
37747: PUSH
37748: LD_INT 2
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PUSH
37755: LD_INT 1
37757: PUSH
37758: LD_INT 2
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_INT 0
37767: PUSH
37768: LD_INT 2
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 1
37777: NEG
37778: PUSH
37779: LD_INT 1
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 2
37788: NEG
37789: PUSH
37790: LD_INT 0
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 2
37799: NEG
37800: PUSH
37801: LD_INT 1
37803: NEG
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 2
37811: NEG
37812: PUSH
37813: LD_INT 2
37815: NEG
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37842: LD_ADDR_VAR 0 22
37846: PUSH
37847: LD_INT 0
37849: PUSH
37850: LD_INT 0
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: LD_INT 0
37859: PUSH
37860: LD_INT 1
37862: NEG
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: PUSH
37868: LD_INT 1
37870: PUSH
37871: LD_INT 0
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: LD_INT 1
37880: PUSH
37881: LD_INT 1
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: LD_INT 0
37890: PUSH
37891: LD_INT 1
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PUSH
37898: LD_INT 1
37900: NEG
37901: PUSH
37902: LD_INT 0
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: LD_INT 1
37911: NEG
37912: PUSH
37913: LD_INT 1
37915: NEG
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 1
37923: NEG
37924: PUSH
37925: LD_INT 2
37927: NEG
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 0
37935: PUSH
37936: LD_INT 2
37938: NEG
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: LD_INT 1
37946: PUSH
37947: LD_INT 1
37949: NEG
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 2
37957: PUSH
37958: LD_INT 0
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 2
37967: PUSH
37968: LD_INT 1
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 2
37977: PUSH
37978: LD_INT 2
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 1
37987: PUSH
37988: LD_INT 2
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 0
37997: PUSH
37998: LD_INT 2
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 1
38007: NEG
38008: PUSH
38009: LD_INT 1
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 2
38018: NEG
38019: PUSH
38020: LD_INT 0
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 2
38029: NEG
38030: PUSH
38031: LD_INT 1
38033: NEG
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 2
38041: NEG
38042: PUSH
38043: LD_INT 2
38045: NEG
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38072: LD_ADDR_VAR 0 23
38076: PUSH
38077: LD_INT 0
38079: PUSH
38080: LD_INT 0
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: PUSH
38087: LD_INT 0
38089: PUSH
38090: LD_INT 1
38092: NEG
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PUSH
38098: LD_INT 1
38100: PUSH
38101: LD_INT 0
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: PUSH
38108: LD_INT 1
38110: PUSH
38111: LD_INT 1
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PUSH
38118: LD_INT 0
38120: PUSH
38121: LD_INT 1
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: PUSH
38128: LD_INT 1
38130: NEG
38131: PUSH
38132: LD_INT 0
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: PUSH
38139: LD_INT 1
38141: NEG
38142: PUSH
38143: LD_INT 1
38145: NEG
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 1
38153: NEG
38154: PUSH
38155: LD_INT 2
38157: NEG
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PUSH
38163: LD_INT 0
38165: PUSH
38166: LD_INT 2
38168: NEG
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 1
38176: PUSH
38177: LD_INT 1
38179: NEG
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: LD_INT 2
38187: PUSH
38188: LD_INT 0
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: LD_INT 2
38197: PUSH
38198: LD_INT 1
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 2
38207: PUSH
38208: LD_INT 2
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: PUSH
38215: LD_INT 1
38217: PUSH
38218: LD_INT 2
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 0
38227: PUSH
38228: LD_INT 2
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 1
38237: NEG
38238: PUSH
38239: LD_INT 1
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: LD_INT 2
38248: NEG
38249: PUSH
38250: LD_INT 0
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 2
38259: NEG
38260: PUSH
38261: LD_INT 1
38263: NEG
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: LD_INT 2
38271: NEG
38272: PUSH
38273: LD_INT 2
38275: NEG
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: PUSH
38281: LD_INT 2
38283: NEG
38284: PUSH
38285: LD_INT 3
38287: NEG
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 1
38295: NEG
38296: PUSH
38297: LD_INT 3
38299: NEG
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: PUSH
38305: LD_INT 1
38307: PUSH
38308: LD_INT 2
38310: NEG
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: LD_INT 2
38318: PUSH
38319: LD_INT 1
38321: NEG
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: LIST
38331: LIST
38332: LIST
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: LIST
38338: LIST
38339: LIST
38340: LIST
38341: LIST
38342: LIST
38343: LIST
38344: LIST
38345: LIST
38346: LIST
38347: LIST
38348: LIST
38349: LIST
38350: LIST
38351: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38352: LD_ADDR_VAR 0 24
38356: PUSH
38357: LD_INT 0
38359: PUSH
38360: LD_INT 0
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: LD_INT 0
38369: PUSH
38370: LD_INT 1
38372: NEG
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: LD_INT 1
38380: PUSH
38381: LD_INT 0
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: PUSH
38388: LD_INT 1
38390: PUSH
38391: LD_INT 1
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PUSH
38398: LD_INT 0
38400: PUSH
38401: LD_INT 1
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: PUSH
38408: LD_INT 1
38410: NEG
38411: PUSH
38412: LD_INT 0
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: LD_INT 1
38421: NEG
38422: PUSH
38423: LD_INT 1
38425: NEG
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 1
38433: NEG
38434: PUSH
38435: LD_INT 2
38437: NEG
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 0
38445: PUSH
38446: LD_INT 2
38448: NEG
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: PUSH
38454: LD_INT 1
38456: PUSH
38457: LD_INT 1
38459: NEG
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: LD_INT 2
38467: PUSH
38468: LD_INT 0
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 2
38477: PUSH
38478: LD_INT 1
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 2
38487: PUSH
38488: LD_INT 2
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: PUSH
38495: LD_INT 1
38497: PUSH
38498: LD_INT 2
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: LD_INT 0
38507: PUSH
38508: LD_INT 2
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: LD_INT 1
38517: NEG
38518: PUSH
38519: LD_INT 1
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 2
38528: NEG
38529: PUSH
38530: LD_INT 0
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: PUSH
38537: LD_INT 2
38539: NEG
38540: PUSH
38541: LD_INT 1
38543: NEG
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 2
38551: NEG
38552: PUSH
38553: LD_INT 2
38555: NEG
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: LD_INT 1
38563: PUSH
38564: LD_INT 2
38566: NEG
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 2
38574: PUSH
38575: LD_INT 1
38577: NEG
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 3
38585: PUSH
38586: LD_INT 1
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 3
38595: PUSH
38596: LD_INT 2
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38628: LD_ADDR_VAR 0 25
38632: PUSH
38633: LD_INT 0
38635: PUSH
38636: LD_INT 0
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 0
38645: PUSH
38646: LD_INT 1
38648: NEG
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 1
38656: PUSH
38657: LD_INT 0
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: LD_INT 1
38666: PUSH
38667: LD_INT 1
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 0
38676: PUSH
38677: LD_INT 1
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 1
38686: NEG
38687: PUSH
38688: LD_INT 0
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: LD_INT 1
38697: NEG
38698: PUSH
38699: LD_INT 1
38701: NEG
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 1
38709: NEG
38710: PUSH
38711: LD_INT 2
38713: NEG
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 0
38721: PUSH
38722: LD_INT 2
38724: NEG
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 1
38732: PUSH
38733: LD_INT 1
38735: NEG
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: LD_INT 2
38743: PUSH
38744: LD_INT 0
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 2
38753: PUSH
38754: LD_INT 1
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 2
38763: PUSH
38764: LD_INT 2
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 1
38773: PUSH
38774: LD_INT 2
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 0
38783: PUSH
38784: LD_INT 2
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 1
38793: NEG
38794: PUSH
38795: LD_INT 1
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 2
38804: NEG
38805: PUSH
38806: LD_INT 0
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 2
38815: NEG
38816: PUSH
38817: LD_INT 1
38819: NEG
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 2
38827: NEG
38828: PUSH
38829: LD_INT 2
38831: NEG
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 3
38839: PUSH
38840: LD_INT 1
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 3
38849: PUSH
38850: LD_INT 2
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 2
38859: PUSH
38860: LD_INT 3
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 1
38869: PUSH
38870: LD_INT 3
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38902: LD_ADDR_VAR 0 26
38906: PUSH
38907: LD_INT 0
38909: PUSH
38910: LD_INT 0
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 0
38919: PUSH
38920: LD_INT 1
38922: NEG
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 1
38930: PUSH
38931: LD_INT 0
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 1
38940: PUSH
38941: LD_INT 1
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 0
38950: PUSH
38951: LD_INT 1
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 1
38960: NEG
38961: PUSH
38962: LD_INT 0
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 1
38971: NEG
38972: PUSH
38973: LD_INT 1
38975: NEG
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: LD_INT 1
38983: NEG
38984: PUSH
38985: LD_INT 2
38987: NEG
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 0
38995: PUSH
38996: LD_INT 2
38998: NEG
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 1
39006: PUSH
39007: LD_INT 1
39009: NEG
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 2
39017: PUSH
39018: LD_INT 0
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: PUSH
39025: LD_INT 2
39027: PUSH
39028: LD_INT 1
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 2
39037: PUSH
39038: LD_INT 2
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: LD_INT 1
39047: PUSH
39048: LD_INT 2
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 0
39057: PUSH
39058: LD_INT 2
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 1
39067: NEG
39068: PUSH
39069: LD_INT 1
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 2
39078: NEG
39079: PUSH
39080: LD_INT 0
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 2
39089: NEG
39090: PUSH
39091: LD_INT 1
39093: NEG
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 2
39101: NEG
39102: PUSH
39103: LD_INT 2
39105: NEG
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 2
39113: PUSH
39114: LD_INT 3
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 1
39123: PUSH
39124: LD_INT 3
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 1
39133: NEG
39134: PUSH
39135: LD_INT 2
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 2
39144: NEG
39145: PUSH
39146: LD_INT 1
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39178: LD_ADDR_VAR 0 27
39182: PUSH
39183: LD_INT 0
39185: PUSH
39186: LD_INT 0
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 0
39195: PUSH
39196: LD_INT 1
39198: NEG
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 1
39206: PUSH
39207: LD_INT 0
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 1
39216: PUSH
39217: LD_INT 1
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 0
39226: PUSH
39227: LD_INT 1
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 1
39236: NEG
39237: PUSH
39238: LD_INT 0
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: PUSH
39245: LD_INT 1
39247: NEG
39248: PUSH
39249: LD_INT 1
39251: NEG
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 1
39259: NEG
39260: PUSH
39261: LD_INT 2
39263: NEG
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 0
39271: PUSH
39272: LD_INT 2
39274: NEG
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 1
39282: PUSH
39283: LD_INT 1
39285: NEG
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 2
39293: PUSH
39294: LD_INT 0
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 2
39303: PUSH
39304: LD_INT 1
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 2
39313: PUSH
39314: LD_INT 2
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 1
39323: PUSH
39324: LD_INT 2
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 0
39333: PUSH
39334: LD_INT 2
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 1
39343: NEG
39344: PUSH
39345: LD_INT 1
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 2
39354: NEG
39355: PUSH
39356: LD_INT 0
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: LD_INT 2
39365: NEG
39366: PUSH
39367: LD_INT 1
39369: NEG
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 2
39377: NEG
39378: PUSH
39379: LD_INT 2
39381: NEG
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 1
39389: NEG
39390: PUSH
39391: LD_INT 2
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 2
39400: NEG
39401: PUSH
39402: LD_INT 1
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 3
39411: NEG
39412: PUSH
39413: LD_INT 1
39415: NEG
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 3
39423: NEG
39424: PUSH
39425: LD_INT 2
39427: NEG
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: LIST
39437: LIST
39438: LIST
39439: LIST
39440: LIST
39441: LIST
39442: LIST
39443: LIST
39444: LIST
39445: LIST
39446: LIST
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39458: LD_ADDR_VAR 0 28
39462: PUSH
39463: LD_INT 0
39465: PUSH
39466: LD_INT 0
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 0
39475: PUSH
39476: LD_INT 1
39478: NEG
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 1
39486: PUSH
39487: LD_INT 0
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 1
39496: PUSH
39497: LD_INT 1
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 0
39506: PUSH
39507: LD_INT 1
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 1
39516: NEG
39517: PUSH
39518: LD_INT 0
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 1
39527: NEG
39528: PUSH
39529: LD_INT 1
39531: NEG
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 1
39539: NEG
39540: PUSH
39541: LD_INT 2
39543: NEG
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 0
39551: PUSH
39552: LD_INT 2
39554: NEG
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 1
39562: PUSH
39563: LD_INT 1
39565: NEG
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: LD_INT 2
39573: PUSH
39574: LD_INT 0
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 2
39583: PUSH
39584: LD_INT 1
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 2
39593: PUSH
39594: LD_INT 2
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 1
39603: PUSH
39604: LD_INT 2
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 0
39613: PUSH
39614: LD_INT 2
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 1
39623: NEG
39624: PUSH
39625: LD_INT 1
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 2
39634: NEG
39635: PUSH
39636: LD_INT 0
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 2
39645: NEG
39646: PUSH
39647: LD_INT 1
39649: NEG
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 2
39657: NEG
39658: PUSH
39659: LD_INT 2
39661: NEG
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 2
39669: NEG
39670: PUSH
39671: LD_INT 3
39673: NEG
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 1
39681: NEG
39682: PUSH
39683: LD_INT 3
39685: NEG
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 3
39693: NEG
39694: PUSH
39695: LD_INT 1
39697: NEG
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 3
39705: NEG
39706: PUSH
39707: LD_INT 2
39709: NEG
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39740: LD_ADDR_VAR 0 29
39744: PUSH
39745: LD_INT 0
39747: PUSH
39748: LD_INT 0
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 0
39757: PUSH
39758: LD_INT 1
39760: NEG
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 1
39768: PUSH
39769: LD_INT 0
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 1
39778: PUSH
39779: LD_INT 1
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 0
39788: PUSH
39789: LD_INT 1
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 1
39798: NEG
39799: PUSH
39800: LD_INT 0
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 1
39809: NEG
39810: PUSH
39811: LD_INT 1
39813: NEG
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: PUSH
39819: LD_INT 1
39821: NEG
39822: PUSH
39823: LD_INT 2
39825: NEG
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 0
39833: PUSH
39834: LD_INT 2
39836: NEG
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 1
39844: PUSH
39845: LD_INT 1
39847: NEG
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 2
39855: PUSH
39856: LD_INT 0
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: LD_INT 2
39865: PUSH
39866: LD_INT 1
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: PUSH
39873: LD_INT 1
39875: PUSH
39876: LD_INT 2
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 0
39885: PUSH
39886: LD_INT 2
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 1
39895: NEG
39896: PUSH
39897: LD_INT 1
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 2
39906: NEG
39907: PUSH
39908: LD_INT 1
39910: NEG
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 2
39918: NEG
39919: PUSH
39920: LD_INT 2
39922: NEG
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 2
39930: NEG
39931: PUSH
39932: LD_INT 3
39934: NEG
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 2
39942: PUSH
39943: LD_INT 1
39945: NEG
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 3
39953: PUSH
39954: LD_INT 1
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 1
39963: PUSH
39964: LD_INT 3
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: LD_INT 1
39973: NEG
39974: PUSH
39975: LD_INT 2
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 3
39984: NEG
39985: PUSH
39986: LD_INT 2
39988: NEG
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40019: LD_ADDR_VAR 0 30
40023: PUSH
40024: LD_INT 0
40026: PUSH
40027: LD_INT 0
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 0
40036: PUSH
40037: LD_INT 1
40039: NEG
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 1
40047: PUSH
40048: LD_INT 0
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 1
40057: PUSH
40058: LD_INT 1
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 0
40067: PUSH
40068: LD_INT 1
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 1
40077: NEG
40078: PUSH
40079: LD_INT 0
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 1
40088: NEG
40089: PUSH
40090: LD_INT 1
40092: NEG
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 1
40100: NEG
40101: PUSH
40102: LD_INT 2
40104: NEG
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 0
40112: PUSH
40113: LD_INT 2
40115: NEG
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 1
40123: PUSH
40124: LD_INT 1
40126: NEG
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 2
40134: PUSH
40135: LD_INT 0
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 2
40144: PUSH
40145: LD_INT 1
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 2
40154: PUSH
40155: LD_INT 2
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 1
40164: PUSH
40165: LD_INT 2
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 1
40174: NEG
40175: PUSH
40176: LD_INT 1
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 2
40185: NEG
40186: PUSH
40187: LD_INT 0
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 2
40196: NEG
40197: PUSH
40198: LD_INT 1
40200: NEG
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 1
40208: NEG
40209: PUSH
40210: LD_INT 3
40212: NEG
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 1
40220: PUSH
40221: LD_INT 2
40223: NEG
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 3
40231: PUSH
40232: LD_INT 2
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 2
40241: PUSH
40242: LD_INT 3
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 2
40251: NEG
40252: PUSH
40253: LD_INT 1
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 3
40262: NEG
40263: PUSH
40264: LD_INT 1
40266: NEG
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40297: LD_ADDR_VAR 0 31
40301: PUSH
40302: LD_INT 0
40304: PUSH
40305: LD_INT 0
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 0
40314: PUSH
40315: LD_INT 1
40317: NEG
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 1
40325: PUSH
40326: LD_INT 0
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 1
40335: PUSH
40336: LD_INT 1
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 0
40345: PUSH
40346: LD_INT 1
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 1
40355: NEG
40356: PUSH
40357: LD_INT 0
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 1
40366: NEG
40367: PUSH
40368: LD_INT 1
40370: NEG
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 1
40378: NEG
40379: PUSH
40380: LD_INT 2
40382: NEG
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 1
40390: PUSH
40391: LD_INT 1
40393: NEG
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 2
40401: PUSH
40402: LD_INT 0
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 2
40411: PUSH
40412: LD_INT 1
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 2
40421: PUSH
40422: LD_INT 2
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 1
40431: PUSH
40432: LD_INT 2
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 0
40441: PUSH
40442: LD_INT 2
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: LD_INT 1
40451: NEG
40452: PUSH
40453: LD_INT 1
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 2
40462: NEG
40463: PUSH
40464: LD_INT 1
40466: NEG
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 2
40474: NEG
40475: PUSH
40476: LD_INT 2
40478: NEG
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 2
40486: NEG
40487: PUSH
40488: LD_INT 3
40490: NEG
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 2
40498: PUSH
40499: LD_INT 1
40501: NEG
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 3
40509: PUSH
40510: LD_INT 1
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 1
40519: PUSH
40520: LD_INT 3
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 1
40529: NEG
40530: PUSH
40531: LD_INT 2
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 3
40540: NEG
40541: PUSH
40542: LD_INT 2
40544: NEG
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40575: LD_ADDR_VAR 0 32
40579: PUSH
40580: LD_INT 0
40582: PUSH
40583: LD_INT 0
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 0
40592: PUSH
40593: LD_INT 1
40595: NEG
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 1
40603: PUSH
40604: LD_INT 0
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 1
40613: PUSH
40614: LD_INT 1
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 0
40623: PUSH
40624: LD_INT 1
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 1
40633: NEG
40634: PUSH
40635: LD_INT 0
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 1
40644: NEG
40645: PUSH
40646: LD_INT 1
40648: NEG
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 1
40656: NEG
40657: PUSH
40658: LD_INT 2
40660: NEG
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 0
40668: PUSH
40669: LD_INT 2
40671: NEG
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 1
40679: PUSH
40680: LD_INT 1
40682: NEG
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 2
40690: PUSH
40691: LD_INT 1
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 2
40700: PUSH
40701: LD_INT 2
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 1
40710: PUSH
40711: LD_INT 2
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 0
40720: PUSH
40721: LD_INT 2
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 1
40730: NEG
40731: PUSH
40732: LD_INT 1
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 2
40741: NEG
40742: PUSH
40743: LD_INT 0
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 2
40752: NEG
40753: PUSH
40754: LD_INT 1
40756: NEG
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 1
40764: NEG
40765: PUSH
40766: LD_INT 3
40768: NEG
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 1
40776: PUSH
40777: LD_INT 2
40779: NEG
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 3
40787: PUSH
40788: LD_INT 2
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 2
40797: PUSH
40798: LD_INT 3
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 2
40807: NEG
40808: PUSH
40809: LD_INT 1
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 3
40818: NEG
40819: PUSH
40820: LD_INT 1
40822: NEG
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40853: LD_ADDR_VAR 0 33
40857: PUSH
40858: LD_INT 0
40860: PUSH
40861: LD_INT 0
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 0
40870: PUSH
40871: LD_INT 1
40873: NEG
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: LD_INT 1
40881: PUSH
40882: LD_INT 0
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 1
40891: PUSH
40892: LD_INT 1
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 0
40901: PUSH
40902: LD_INT 1
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 1
40911: NEG
40912: PUSH
40913: LD_INT 0
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 1
40922: NEG
40923: PUSH
40924: LD_INT 1
40926: NEG
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 1
40934: NEG
40935: PUSH
40936: LD_INT 2
40938: NEG
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 1
40946: PUSH
40947: LD_INT 1
40949: NEG
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 2
40957: PUSH
40958: LD_INT 0
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 2
40967: PUSH
40968: LD_INT 1
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: LD_INT 1
40977: PUSH
40978: LD_INT 2
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_INT 0
40987: PUSH
40988: LD_INT 2
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 1
40997: NEG
40998: PUSH
40999: LD_INT 1
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 2
41008: NEG
41009: PUSH
41010: LD_INT 0
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 2
41019: NEG
41020: PUSH
41021: LD_INT 1
41023: NEG
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 2
41031: NEG
41032: PUSH
41033: LD_INT 2
41035: NEG
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 2
41043: NEG
41044: PUSH
41045: LD_INT 3
41047: NEG
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: LD_INT 2
41055: PUSH
41056: LD_INT 1
41058: NEG
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 3
41066: PUSH
41067: LD_INT 1
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 1
41076: PUSH
41077: LD_INT 3
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 1
41086: NEG
41087: PUSH
41088: LD_INT 2
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 3
41097: NEG
41098: PUSH
41099: LD_INT 2
41101: NEG
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41132: LD_ADDR_VAR 0 34
41136: PUSH
41137: LD_INT 0
41139: PUSH
41140: LD_INT 0
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 0
41149: PUSH
41150: LD_INT 1
41152: NEG
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 1
41160: PUSH
41161: LD_INT 0
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: LD_INT 1
41170: PUSH
41171: LD_INT 1
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: PUSH
41178: LD_INT 0
41180: PUSH
41181: LD_INT 1
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: LD_INT 1
41190: NEG
41191: PUSH
41192: LD_INT 0
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 1
41201: NEG
41202: PUSH
41203: LD_INT 1
41205: NEG
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 1
41213: NEG
41214: PUSH
41215: LD_INT 2
41217: NEG
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 0
41225: PUSH
41226: LD_INT 2
41228: NEG
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 1
41236: PUSH
41237: LD_INT 1
41239: NEG
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 2
41247: PUSH
41248: LD_INT 1
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: LD_INT 2
41257: PUSH
41258: LD_INT 2
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: LD_INT 1
41267: PUSH
41268: LD_INT 2
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 1
41277: NEG
41278: PUSH
41279: LD_INT 1
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 2
41288: NEG
41289: PUSH
41290: LD_INT 0
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 2
41299: NEG
41300: PUSH
41301: LD_INT 1
41303: NEG
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 2
41311: NEG
41312: PUSH
41313: LD_INT 2
41315: NEG
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 1
41323: NEG
41324: PUSH
41325: LD_INT 3
41327: NEG
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 1
41335: PUSH
41336: LD_INT 2
41338: NEG
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 3
41346: PUSH
41347: LD_INT 2
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 2
41356: PUSH
41357: LD_INT 3
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 2
41366: NEG
41367: PUSH
41368: LD_INT 1
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 3
41377: NEG
41378: PUSH
41379: LD_INT 1
41381: NEG
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41412: LD_ADDR_VAR 0 35
41416: PUSH
41417: LD_INT 0
41419: PUSH
41420: LD_INT 0
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 0
41429: PUSH
41430: LD_INT 1
41432: NEG
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 1
41440: PUSH
41441: LD_INT 0
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 1
41450: PUSH
41451: LD_INT 1
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 0
41460: PUSH
41461: LD_INT 1
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 1
41470: NEG
41471: PUSH
41472: LD_INT 0
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 1
41481: NEG
41482: PUSH
41483: LD_INT 1
41485: NEG
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: PUSH
41491: LD_INT 2
41493: PUSH
41494: LD_INT 1
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 2
41503: NEG
41504: PUSH
41505: LD_INT 1
41507: NEG
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41524: LD_ADDR_VAR 0 36
41528: PUSH
41529: LD_INT 0
41531: PUSH
41532: LD_INT 0
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 0
41541: PUSH
41542: LD_INT 1
41544: NEG
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 1
41552: PUSH
41553: LD_INT 0
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 1
41562: PUSH
41563: LD_INT 1
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 0
41572: PUSH
41573: LD_INT 1
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 1
41582: NEG
41583: PUSH
41584: LD_INT 0
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 1
41593: NEG
41594: PUSH
41595: LD_INT 1
41597: NEG
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 1
41605: NEG
41606: PUSH
41607: LD_INT 2
41609: NEG
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 1
41617: PUSH
41618: LD_INT 2
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41636: LD_ADDR_VAR 0 37
41640: PUSH
41641: LD_INT 0
41643: PUSH
41644: LD_INT 0
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 0
41653: PUSH
41654: LD_INT 1
41656: NEG
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 1
41664: PUSH
41665: LD_INT 0
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 1
41674: PUSH
41675: LD_INT 1
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 0
41684: PUSH
41685: LD_INT 1
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: LD_INT 1
41694: NEG
41695: PUSH
41696: LD_INT 0
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 1
41705: NEG
41706: PUSH
41707: LD_INT 1
41709: NEG
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 1
41717: PUSH
41718: LD_INT 1
41720: NEG
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 1
41728: NEG
41729: PUSH
41730: LD_INT 1
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41748: LD_ADDR_VAR 0 38
41752: PUSH
41753: LD_INT 0
41755: PUSH
41756: LD_INT 0
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 0
41765: PUSH
41766: LD_INT 1
41768: NEG
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 1
41776: PUSH
41777: LD_INT 0
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 1
41786: PUSH
41787: LD_INT 1
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 0
41796: PUSH
41797: LD_INT 1
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 1
41806: NEG
41807: PUSH
41808: LD_INT 0
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 1
41817: NEG
41818: PUSH
41819: LD_INT 1
41821: NEG
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 2
41829: PUSH
41830: LD_INT 1
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 2
41839: NEG
41840: PUSH
41841: LD_INT 1
41843: NEG
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41860: LD_ADDR_VAR 0 39
41864: PUSH
41865: LD_INT 0
41867: PUSH
41868: LD_INT 0
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 0
41877: PUSH
41878: LD_INT 1
41880: NEG
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 1
41888: PUSH
41889: LD_INT 0
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: LD_INT 1
41898: PUSH
41899: LD_INT 1
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 0
41908: PUSH
41909: LD_INT 1
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: LD_INT 1
41918: NEG
41919: PUSH
41920: LD_INT 0
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 1
41929: NEG
41930: PUSH
41931: LD_INT 1
41933: NEG
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 1
41941: NEG
41942: PUSH
41943: LD_INT 2
41945: NEG
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 1
41953: PUSH
41954: LD_INT 2
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: LIST
41965: LIST
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41972: LD_ADDR_VAR 0 40
41976: PUSH
41977: LD_INT 0
41979: PUSH
41980: LD_INT 0
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 0
41989: PUSH
41990: LD_INT 1
41992: NEG
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 1
42000: PUSH
42001: LD_INT 0
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: LD_INT 1
42010: PUSH
42011: LD_INT 1
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 0
42020: PUSH
42021: LD_INT 1
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 1
42030: NEG
42031: PUSH
42032: LD_INT 0
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 1
42041: NEG
42042: PUSH
42043: LD_INT 1
42045: NEG
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 1
42053: PUSH
42054: LD_INT 1
42056: NEG
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 1
42064: NEG
42065: PUSH
42066: LD_INT 1
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42084: LD_ADDR_VAR 0 41
42088: PUSH
42089: LD_INT 0
42091: PUSH
42092: LD_INT 0
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 0
42101: PUSH
42102: LD_INT 1
42104: NEG
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 1
42112: PUSH
42113: LD_INT 0
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 1
42122: PUSH
42123: LD_INT 1
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 0
42132: PUSH
42133: LD_INT 1
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 1
42142: NEG
42143: PUSH
42144: LD_INT 0
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 1
42153: NEG
42154: PUSH
42155: LD_INT 1
42157: NEG
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 1
42165: NEG
42166: PUSH
42167: LD_INT 2
42169: NEG
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: LD_INT 1
42177: PUSH
42178: LD_INT 1
42180: NEG
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_INT 2
42188: PUSH
42189: LD_INT 0
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: LD_INT 2
42198: PUSH
42199: LD_INT 1
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 2
42208: PUSH
42209: LD_INT 2
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 1
42218: PUSH
42219: LD_INT 2
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 1
42228: NEG
42229: PUSH
42230: LD_INT 1
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 2
42239: NEG
42240: PUSH
42241: LD_INT 0
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 2
42250: NEG
42251: PUSH
42252: LD_INT 1
42254: NEG
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 2
42262: NEG
42263: PUSH
42264: LD_INT 2
42266: NEG
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 2
42274: NEG
42275: PUSH
42276: LD_INT 3
42278: NEG
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 2
42286: PUSH
42287: LD_INT 1
42289: NEG
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 3
42297: PUSH
42298: LD_INT 0
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 3
42307: PUSH
42308: LD_INT 1
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 3
42317: PUSH
42318: LD_INT 2
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 3
42327: PUSH
42328: LD_INT 3
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 2
42337: PUSH
42338: LD_INT 3
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 2
42347: NEG
42348: PUSH
42349: LD_INT 1
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 3
42358: NEG
42359: PUSH
42360: LD_INT 0
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 3
42369: NEG
42370: PUSH
42371: LD_INT 1
42373: NEG
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 3
42381: NEG
42382: PUSH
42383: LD_INT 2
42385: NEG
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 3
42393: NEG
42394: PUSH
42395: LD_INT 3
42397: NEG
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42434: LD_ADDR_VAR 0 42
42438: PUSH
42439: LD_INT 0
42441: PUSH
42442: LD_INT 0
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 0
42451: PUSH
42452: LD_INT 1
42454: NEG
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 1
42462: PUSH
42463: LD_INT 0
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 1
42472: PUSH
42473: LD_INT 1
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 0
42482: PUSH
42483: LD_INT 1
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 1
42492: NEG
42493: PUSH
42494: LD_INT 0
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 1
42503: NEG
42504: PUSH
42505: LD_INT 1
42507: NEG
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 1
42515: NEG
42516: PUSH
42517: LD_INT 2
42519: NEG
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 0
42527: PUSH
42528: LD_INT 2
42530: NEG
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 1
42538: PUSH
42539: LD_INT 1
42541: NEG
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 2
42549: PUSH
42550: LD_INT 1
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 2
42559: PUSH
42560: LD_INT 2
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 1
42569: PUSH
42570: LD_INT 2
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 0
42579: PUSH
42580: LD_INT 2
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 1
42589: NEG
42590: PUSH
42591: LD_INT 1
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 2
42600: NEG
42601: PUSH
42602: LD_INT 1
42604: NEG
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 2
42612: NEG
42613: PUSH
42614: LD_INT 2
42616: NEG
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 2
42624: NEG
42625: PUSH
42626: LD_INT 3
42628: NEG
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 1
42636: NEG
42637: PUSH
42638: LD_INT 3
42640: NEG
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 0
42648: PUSH
42649: LD_INT 3
42651: NEG
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 1
42659: PUSH
42660: LD_INT 2
42662: NEG
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 3
42670: PUSH
42671: LD_INT 2
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 3
42680: PUSH
42681: LD_INT 3
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 2
42690: PUSH
42691: LD_INT 3
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 1
42700: PUSH
42701: LD_INT 3
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 0
42710: PUSH
42711: LD_INT 3
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 1
42720: NEG
42721: PUSH
42722: LD_INT 2
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 3
42731: NEG
42732: PUSH
42733: LD_INT 2
42735: NEG
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 3
42743: NEG
42744: PUSH
42745: LD_INT 3
42747: NEG
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42784: LD_ADDR_VAR 0 43
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: LD_INT 0
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 0
42801: PUSH
42802: LD_INT 1
42804: NEG
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 1
42812: PUSH
42813: LD_INT 0
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 1
42822: PUSH
42823: LD_INT 1
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 0
42832: PUSH
42833: LD_INT 1
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 1
42842: NEG
42843: PUSH
42844: LD_INT 0
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 1
42853: NEG
42854: PUSH
42855: LD_INT 1
42857: NEG
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 1
42865: NEG
42866: PUSH
42867: LD_INT 2
42869: NEG
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 0
42877: PUSH
42878: LD_INT 2
42880: NEG
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 1
42888: PUSH
42889: LD_INT 1
42891: NEG
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 2
42899: PUSH
42900: LD_INT 0
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 2
42909: PUSH
42910: LD_INT 1
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 1
42919: PUSH
42920: LD_INT 2
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 0
42929: PUSH
42930: LD_INT 2
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 1
42939: NEG
42940: PUSH
42941: LD_INT 1
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 2
42950: NEG
42951: PUSH
42952: LD_INT 0
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 2
42961: NEG
42962: PUSH
42963: LD_INT 1
42965: NEG
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 1
42973: NEG
42974: PUSH
42975: LD_INT 3
42977: NEG
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 0
42985: PUSH
42986: LD_INT 3
42988: NEG
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 1
42996: PUSH
42997: LD_INT 2
42999: NEG
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 2
43007: PUSH
43008: LD_INT 1
43010: NEG
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 3
43018: PUSH
43019: LD_INT 0
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 3
43028: PUSH
43029: LD_INT 1
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 1
43038: PUSH
43039: LD_INT 3
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 0
43048: PUSH
43049: LD_INT 3
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 1
43058: NEG
43059: PUSH
43060: LD_INT 2
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 2
43069: NEG
43070: PUSH
43071: LD_INT 1
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 3
43080: NEG
43081: PUSH
43082: LD_INT 0
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 3
43091: NEG
43092: PUSH
43093: LD_INT 1
43095: NEG
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43132: LD_ADDR_VAR 0 44
43136: PUSH
43137: LD_INT 0
43139: PUSH
43140: LD_INT 0
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 0
43149: PUSH
43150: LD_INT 1
43152: NEG
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 1
43160: PUSH
43161: LD_INT 0
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 1
43170: PUSH
43171: LD_INT 1
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 0
43180: PUSH
43181: LD_INT 1
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 1
43190: NEG
43191: PUSH
43192: LD_INT 0
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 1
43201: NEG
43202: PUSH
43203: LD_INT 1
43205: NEG
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 1
43213: NEG
43214: PUSH
43215: LD_INT 2
43217: NEG
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 1
43225: PUSH
43226: LD_INT 1
43228: NEG
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 2
43236: PUSH
43237: LD_INT 0
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 2
43246: PUSH
43247: LD_INT 1
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 2
43256: PUSH
43257: LD_INT 2
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 1
43266: PUSH
43267: LD_INT 2
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 1
43276: NEG
43277: PUSH
43278: LD_INT 1
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 2
43287: NEG
43288: PUSH
43289: LD_INT 0
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 2
43298: NEG
43299: PUSH
43300: LD_INT 1
43302: NEG
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 2
43310: NEG
43311: PUSH
43312: LD_INT 2
43314: NEG
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 2
43322: NEG
43323: PUSH
43324: LD_INT 3
43326: NEG
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 2
43334: PUSH
43335: LD_INT 1
43337: NEG
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 3
43345: PUSH
43346: LD_INT 0
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 3
43355: PUSH
43356: LD_INT 1
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 3
43365: PUSH
43366: LD_INT 2
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 3
43375: PUSH
43376: LD_INT 3
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 2
43385: PUSH
43386: LD_INT 3
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 2
43395: NEG
43396: PUSH
43397: LD_INT 1
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 3
43406: NEG
43407: PUSH
43408: LD_INT 0
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 3
43417: NEG
43418: PUSH
43419: LD_INT 1
43421: NEG
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 3
43429: NEG
43430: PUSH
43431: LD_INT 2
43433: NEG
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 3
43441: NEG
43442: PUSH
43443: LD_INT 3
43445: NEG
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43482: LD_ADDR_VAR 0 45
43486: PUSH
43487: LD_INT 0
43489: PUSH
43490: LD_INT 0
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: LD_INT 0
43499: PUSH
43500: LD_INT 1
43502: NEG
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 1
43510: PUSH
43511: LD_INT 0
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 1
43520: PUSH
43521: LD_INT 1
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 0
43530: PUSH
43531: LD_INT 1
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 1
43540: NEG
43541: PUSH
43542: LD_INT 0
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: LD_INT 1
43551: NEG
43552: PUSH
43553: LD_INT 1
43555: NEG
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 1
43563: NEG
43564: PUSH
43565: LD_INT 2
43567: NEG
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 0
43575: PUSH
43576: LD_INT 2
43578: NEG
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 1
43586: PUSH
43587: LD_INT 1
43589: NEG
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 2
43597: PUSH
43598: LD_INT 1
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 2
43607: PUSH
43608: LD_INT 2
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 1
43617: PUSH
43618: LD_INT 2
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 0
43627: PUSH
43628: LD_INT 2
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 1
43637: NEG
43638: PUSH
43639: LD_INT 1
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 2
43648: NEG
43649: PUSH
43650: LD_INT 1
43652: NEG
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 2
43660: NEG
43661: PUSH
43662: LD_INT 2
43664: NEG
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 2
43672: NEG
43673: PUSH
43674: LD_INT 3
43676: NEG
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 1
43684: NEG
43685: PUSH
43686: LD_INT 3
43688: NEG
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 0
43696: PUSH
43697: LD_INT 3
43699: NEG
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 1
43707: PUSH
43708: LD_INT 2
43710: NEG
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 3
43718: PUSH
43719: LD_INT 2
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 3
43728: PUSH
43729: LD_INT 3
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 2
43738: PUSH
43739: LD_INT 3
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 1
43748: PUSH
43749: LD_INT 3
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 0
43758: PUSH
43759: LD_INT 3
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 1
43768: NEG
43769: PUSH
43770: LD_INT 2
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 3
43779: NEG
43780: PUSH
43781: LD_INT 2
43783: NEG
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 3
43791: NEG
43792: PUSH
43793: LD_INT 3
43795: NEG
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43832: LD_ADDR_VAR 0 46
43836: PUSH
43837: LD_INT 0
43839: PUSH
43840: LD_INT 0
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: LD_INT 0
43849: PUSH
43850: LD_INT 1
43852: NEG
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 1
43860: PUSH
43861: LD_INT 0
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 1
43870: PUSH
43871: LD_INT 1
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 0
43880: PUSH
43881: LD_INT 1
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 1
43890: NEG
43891: PUSH
43892: LD_INT 0
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 1
43901: NEG
43902: PUSH
43903: LD_INT 1
43905: NEG
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 1
43913: NEG
43914: PUSH
43915: LD_INT 2
43917: NEG
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 0
43925: PUSH
43926: LD_INT 2
43928: NEG
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 1
43936: PUSH
43937: LD_INT 1
43939: NEG
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 2
43947: PUSH
43948: LD_INT 0
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 2
43957: PUSH
43958: LD_INT 1
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: LD_INT 1
43967: PUSH
43968: LD_INT 2
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 0
43977: PUSH
43978: LD_INT 2
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 1
43987: NEG
43988: PUSH
43989: LD_INT 1
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 2
43998: NEG
43999: PUSH
44000: LD_INT 0
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 2
44009: NEG
44010: PUSH
44011: LD_INT 1
44013: NEG
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 1
44021: NEG
44022: PUSH
44023: LD_INT 3
44025: NEG
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 0
44033: PUSH
44034: LD_INT 3
44036: NEG
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 1
44044: PUSH
44045: LD_INT 2
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 2
44055: PUSH
44056: LD_INT 1
44058: NEG
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 3
44066: PUSH
44067: LD_INT 0
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 3
44076: PUSH
44077: LD_INT 1
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 1
44086: PUSH
44087: LD_INT 3
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 0
44096: PUSH
44097: LD_INT 3
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 1
44106: NEG
44107: PUSH
44108: LD_INT 2
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 2
44117: NEG
44118: PUSH
44119: LD_INT 1
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 3
44128: NEG
44129: PUSH
44130: LD_INT 0
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 3
44139: NEG
44140: PUSH
44141: LD_INT 1
44143: NEG
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44180: LD_ADDR_VAR 0 47
44184: PUSH
44185: LD_INT 0
44187: PUSH
44188: LD_INT 0
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: LD_INT 1
44200: NEG
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 1
44208: PUSH
44209: LD_INT 0
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 1
44218: PUSH
44219: LD_INT 1
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 0
44228: PUSH
44229: LD_INT 1
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 1
44238: NEG
44239: PUSH
44240: LD_INT 0
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 1
44249: NEG
44250: PUSH
44251: LD_INT 1
44253: NEG
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 1
44261: NEG
44262: PUSH
44263: LD_INT 2
44265: NEG
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 0
44273: PUSH
44274: LD_INT 2
44276: NEG
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: LD_INT 1
44284: PUSH
44285: LD_INT 1
44287: NEG
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 2
44295: NEG
44296: PUSH
44297: LD_INT 1
44299: NEG
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 2
44307: NEG
44308: PUSH
44309: LD_INT 2
44311: NEG
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44331: LD_ADDR_VAR 0 48
44335: PUSH
44336: LD_INT 0
44338: PUSH
44339: LD_INT 0
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 0
44348: PUSH
44349: LD_INT 1
44351: NEG
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 1
44359: PUSH
44360: LD_INT 0
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 1
44369: PUSH
44370: LD_INT 1
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 0
44379: PUSH
44380: LD_INT 1
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 1
44389: NEG
44390: PUSH
44391: LD_INT 0
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 1
44400: NEG
44401: PUSH
44402: LD_INT 1
44404: NEG
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 1
44412: NEG
44413: PUSH
44414: LD_INT 2
44416: NEG
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 0
44424: PUSH
44425: LD_INT 2
44427: NEG
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 1
44435: PUSH
44436: LD_INT 1
44438: NEG
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 2
44446: PUSH
44447: LD_INT 0
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 2
44456: PUSH
44457: LD_INT 1
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44478: LD_ADDR_VAR 0 49
44482: PUSH
44483: LD_INT 0
44485: PUSH
44486: LD_INT 0
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 0
44495: PUSH
44496: LD_INT 1
44498: NEG
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 1
44506: PUSH
44507: LD_INT 0
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 1
44516: PUSH
44517: LD_INT 1
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 0
44526: PUSH
44527: LD_INT 1
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 1
44536: NEG
44537: PUSH
44538: LD_INT 0
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 1
44547: NEG
44548: PUSH
44549: LD_INT 1
44551: NEG
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 1
44559: PUSH
44560: LD_INT 1
44562: NEG
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 2
44570: PUSH
44571: LD_INT 0
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 2
44580: PUSH
44581: LD_INT 1
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 2
44590: PUSH
44591: LD_INT 2
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 1
44600: PUSH
44601: LD_INT 2
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44622: LD_ADDR_VAR 0 50
44626: PUSH
44627: LD_INT 0
44629: PUSH
44630: LD_INT 0
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 0
44639: PUSH
44640: LD_INT 1
44642: NEG
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 1
44650: PUSH
44651: LD_INT 0
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 1
44660: PUSH
44661: LD_INT 1
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 0
44670: PUSH
44671: LD_INT 1
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 1
44680: NEG
44681: PUSH
44682: LD_INT 0
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 1
44691: NEG
44692: PUSH
44693: LD_INT 1
44695: NEG
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 2
44703: PUSH
44704: LD_INT 1
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 2
44713: PUSH
44714: LD_INT 2
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 1
44723: PUSH
44724: LD_INT 2
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 0
44733: PUSH
44734: LD_INT 2
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 1
44743: NEG
44744: PUSH
44745: LD_INT 1
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44766: LD_ADDR_VAR 0 51
44770: PUSH
44771: LD_INT 0
44773: PUSH
44774: LD_INT 0
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 0
44783: PUSH
44784: LD_INT 1
44786: NEG
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 1
44794: PUSH
44795: LD_INT 0
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 1
44804: PUSH
44805: LD_INT 1
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 0
44814: PUSH
44815: LD_INT 1
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 1
44824: NEG
44825: PUSH
44826: LD_INT 0
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 1
44835: NEG
44836: PUSH
44837: LD_INT 1
44839: NEG
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 1
44847: PUSH
44848: LD_INT 2
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 0
44857: PUSH
44858: LD_INT 2
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 1
44867: NEG
44868: PUSH
44869: LD_INT 1
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 2
44878: NEG
44879: PUSH
44880: LD_INT 0
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 2
44889: NEG
44890: PUSH
44891: LD_INT 1
44893: NEG
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44913: LD_ADDR_VAR 0 52
44917: PUSH
44918: LD_INT 0
44920: PUSH
44921: LD_INT 0
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 0
44930: PUSH
44931: LD_INT 1
44933: NEG
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 1
44941: PUSH
44942: LD_INT 0
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 1
44951: PUSH
44952: LD_INT 1
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 0
44961: PUSH
44962: LD_INT 1
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 1
44971: NEG
44972: PUSH
44973: LD_INT 0
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 1
44982: NEG
44983: PUSH
44984: LD_INT 1
44986: NEG
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 1
44994: NEG
44995: PUSH
44996: LD_INT 2
44998: NEG
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 1
45006: NEG
45007: PUSH
45008: LD_INT 1
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 2
45017: NEG
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 2
45028: NEG
45029: PUSH
45030: LD_INT 1
45032: NEG
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 2
45040: NEG
45041: PUSH
45042: LD_INT 2
45044: NEG
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45064: LD_ADDR_VAR 0 53
45068: PUSH
45069: LD_INT 0
45071: PUSH
45072: LD_INT 0
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 0
45081: PUSH
45082: LD_INT 1
45084: NEG
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 1
45092: PUSH
45093: LD_INT 0
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 1
45102: PUSH
45103: LD_INT 1
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 0
45112: PUSH
45113: LD_INT 1
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 1
45122: NEG
45123: PUSH
45124: LD_INT 0
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 1
45133: NEG
45134: PUSH
45135: LD_INT 1
45137: NEG
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 1
45145: NEG
45146: PUSH
45147: LD_INT 2
45149: NEG
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 0
45157: PUSH
45158: LD_INT 2
45160: NEG
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 1
45168: PUSH
45169: LD_INT 1
45171: NEG
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 2
45179: PUSH
45180: LD_INT 0
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 2
45189: PUSH
45190: LD_INT 1
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 2
45199: PUSH
45200: LD_INT 2
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 1
45209: PUSH
45210: LD_INT 2
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 0
45219: PUSH
45220: LD_INT 2
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 1
45229: NEG
45230: PUSH
45231: LD_INT 1
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 2
45240: NEG
45241: PUSH
45242: LD_INT 0
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 2
45251: NEG
45252: PUSH
45253: LD_INT 1
45255: NEG
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 2
45263: NEG
45264: PUSH
45265: LD_INT 2
45267: NEG
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45294: LD_ADDR_VAR 0 54
45298: PUSH
45299: LD_INT 0
45301: PUSH
45302: LD_INT 0
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 0
45311: PUSH
45312: LD_INT 1
45314: NEG
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 1
45322: PUSH
45323: LD_INT 0
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 1
45332: PUSH
45333: LD_INT 1
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 0
45342: PUSH
45343: LD_INT 1
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 1
45352: NEG
45353: PUSH
45354: LD_INT 0
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 1
45363: NEG
45364: PUSH
45365: LD_INT 1
45367: NEG
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 1
45375: NEG
45376: PUSH
45377: LD_INT 2
45379: NEG
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 0
45387: PUSH
45388: LD_INT 2
45390: NEG
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 1
45398: PUSH
45399: LD_INT 1
45401: NEG
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 2
45409: PUSH
45410: LD_INT 0
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 2
45419: PUSH
45420: LD_INT 1
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 2
45429: PUSH
45430: LD_INT 2
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 1
45439: PUSH
45440: LD_INT 2
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 0
45449: PUSH
45450: LD_INT 2
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 1
45459: NEG
45460: PUSH
45461: LD_INT 1
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 2
45470: NEG
45471: PUSH
45472: LD_INT 0
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 2
45481: NEG
45482: PUSH
45483: LD_INT 1
45485: NEG
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 2
45493: NEG
45494: PUSH
45495: LD_INT 2
45497: NEG
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45524: LD_ADDR_VAR 0 55
45528: PUSH
45529: LD_INT 0
45531: PUSH
45532: LD_INT 0
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: LD_INT 1
45544: NEG
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 1
45552: PUSH
45553: LD_INT 0
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 1
45562: PUSH
45563: LD_INT 1
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 0
45572: PUSH
45573: LD_INT 1
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 1
45582: NEG
45583: PUSH
45584: LD_INT 0
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 1
45593: NEG
45594: PUSH
45595: LD_INT 1
45597: NEG
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 1
45605: NEG
45606: PUSH
45607: LD_INT 2
45609: NEG
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 0
45617: PUSH
45618: LD_INT 2
45620: NEG
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 1
45628: PUSH
45629: LD_INT 1
45631: NEG
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 2
45639: PUSH
45640: LD_INT 0
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 2
45649: PUSH
45650: LD_INT 1
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 2
45659: PUSH
45660: LD_INT 2
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 1
45669: PUSH
45670: LD_INT 2
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 0
45679: PUSH
45680: LD_INT 2
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 1
45689: NEG
45690: PUSH
45691: LD_INT 1
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 2
45700: NEG
45701: PUSH
45702: LD_INT 0
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 2
45711: NEG
45712: PUSH
45713: LD_INT 1
45715: NEG
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 2
45723: NEG
45724: PUSH
45725: LD_INT 2
45727: NEG
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45754: LD_ADDR_VAR 0 56
45758: PUSH
45759: LD_INT 0
45761: PUSH
45762: LD_INT 0
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: LD_INT 1
45774: NEG
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 1
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 1
45792: PUSH
45793: LD_INT 1
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 0
45802: PUSH
45803: LD_INT 1
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 1
45812: NEG
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 1
45823: NEG
45824: PUSH
45825: LD_INT 1
45827: NEG
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 1
45835: NEG
45836: PUSH
45837: LD_INT 2
45839: NEG
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 0
45847: PUSH
45848: LD_INT 2
45850: NEG
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 1
45858: PUSH
45859: LD_INT 1
45861: NEG
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 2
45869: PUSH
45870: LD_INT 0
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 2
45879: PUSH
45880: LD_INT 1
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 2
45889: PUSH
45890: LD_INT 2
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 1
45899: PUSH
45900: LD_INT 2
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 0
45909: PUSH
45910: LD_INT 2
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 1
45919: NEG
45920: PUSH
45921: LD_INT 1
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 2
45930: NEG
45931: PUSH
45932: LD_INT 0
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 2
45941: NEG
45942: PUSH
45943: LD_INT 1
45945: NEG
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 2
45953: NEG
45954: PUSH
45955: LD_INT 2
45957: NEG
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45984: LD_ADDR_VAR 0 57
45988: PUSH
45989: LD_INT 0
45991: PUSH
45992: LD_INT 0
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 0
46001: PUSH
46002: LD_INT 1
46004: NEG
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 1
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 1
46022: PUSH
46023: LD_INT 1
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 0
46032: PUSH
46033: LD_INT 1
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 1
46042: NEG
46043: PUSH
46044: LD_INT 0
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 1
46053: NEG
46054: PUSH
46055: LD_INT 1
46057: NEG
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 1
46065: NEG
46066: PUSH
46067: LD_INT 2
46069: NEG
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 0
46077: PUSH
46078: LD_INT 2
46080: NEG
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: LD_INT 1
46091: NEG
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 2
46099: PUSH
46100: LD_INT 0
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 2
46109: PUSH
46110: LD_INT 1
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 2
46119: PUSH
46120: LD_INT 2
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 1
46129: PUSH
46130: LD_INT 2
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 0
46139: PUSH
46140: LD_INT 2
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 1
46149: NEG
46150: PUSH
46151: LD_INT 1
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 2
46160: NEG
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 2
46171: NEG
46172: PUSH
46173: LD_INT 1
46175: NEG
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 2
46183: NEG
46184: PUSH
46185: LD_INT 2
46187: NEG
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46214: LD_ADDR_VAR 0 58
46218: PUSH
46219: LD_INT 0
46221: PUSH
46222: LD_INT 0
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 0
46231: PUSH
46232: LD_INT 1
46234: NEG
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 1
46242: PUSH
46243: LD_INT 0
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 1
46252: PUSH
46253: LD_INT 1
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 0
46262: PUSH
46263: LD_INT 1
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 1
46272: NEG
46273: PUSH
46274: LD_INT 0
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 1
46283: NEG
46284: PUSH
46285: LD_INT 1
46287: NEG
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 1
46295: NEG
46296: PUSH
46297: LD_INT 2
46299: NEG
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 0
46307: PUSH
46308: LD_INT 2
46310: NEG
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 1
46318: PUSH
46319: LD_INT 1
46321: NEG
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 2
46329: PUSH
46330: LD_INT 0
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 2
46339: PUSH
46340: LD_INT 1
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 2
46349: PUSH
46350: LD_INT 2
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 1
46359: PUSH
46360: LD_INT 2
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 0
46369: PUSH
46370: LD_INT 2
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 1
46379: NEG
46380: PUSH
46381: LD_INT 1
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 2
46390: NEG
46391: PUSH
46392: LD_INT 0
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 2
46401: NEG
46402: PUSH
46403: LD_INT 1
46405: NEG
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 2
46413: NEG
46414: PUSH
46415: LD_INT 2
46417: NEG
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46444: LD_ADDR_VAR 0 59
46448: PUSH
46449: LD_INT 0
46451: PUSH
46452: LD_INT 0
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 0
46461: PUSH
46462: LD_INT 1
46464: NEG
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 1
46472: PUSH
46473: LD_INT 0
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 1
46482: PUSH
46483: LD_INT 1
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 0
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 1
46502: NEG
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 1
46513: NEG
46514: PUSH
46515: LD_INT 1
46517: NEG
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46532: LD_ADDR_VAR 0 60
46536: PUSH
46537: LD_INT 0
46539: PUSH
46540: LD_INT 0
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 0
46549: PUSH
46550: LD_INT 1
46552: NEG
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 1
46560: PUSH
46561: LD_INT 0
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 1
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 0
46580: PUSH
46581: LD_INT 1
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 1
46590: NEG
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 1
46601: NEG
46602: PUSH
46603: LD_INT 1
46605: NEG
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46620: LD_ADDR_VAR 0 61
46624: PUSH
46625: LD_INT 0
46627: PUSH
46628: LD_INT 0
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 0
46637: PUSH
46638: LD_INT 1
46640: NEG
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 1
46648: PUSH
46649: LD_INT 0
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 1
46658: PUSH
46659: LD_INT 1
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 0
46668: PUSH
46669: LD_INT 1
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 1
46678: NEG
46679: PUSH
46680: LD_INT 0
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 1
46689: NEG
46690: PUSH
46691: LD_INT 1
46693: NEG
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46708: LD_ADDR_VAR 0 62
46712: PUSH
46713: LD_INT 0
46715: PUSH
46716: LD_INT 0
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 0
46725: PUSH
46726: LD_INT 1
46728: NEG
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 1
46736: PUSH
46737: LD_INT 0
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 1
46746: PUSH
46747: LD_INT 1
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 0
46756: PUSH
46757: LD_INT 1
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 1
46766: NEG
46767: PUSH
46768: LD_INT 0
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 1
46777: NEG
46778: PUSH
46779: LD_INT 1
46781: NEG
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46796: LD_ADDR_VAR 0 63
46800: PUSH
46801: LD_INT 0
46803: PUSH
46804: LD_INT 0
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 0
46813: PUSH
46814: LD_INT 1
46816: NEG
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 1
46824: PUSH
46825: LD_INT 0
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 1
46834: PUSH
46835: LD_INT 1
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 0
46844: PUSH
46845: LD_INT 1
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 1
46854: NEG
46855: PUSH
46856: LD_INT 0
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 1
46865: NEG
46866: PUSH
46867: LD_INT 1
46869: NEG
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46884: LD_ADDR_VAR 0 64
46888: PUSH
46889: LD_INT 0
46891: PUSH
46892: LD_INT 0
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 0
46901: PUSH
46902: LD_INT 1
46904: NEG
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 1
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 1
46922: PUSH
46923: LD_INT 1
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 0
46932: PUSH
46933: LD_INT 1
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 1
46942: NEG
46943: PUSH
46944: LD_INT 0
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 1
46953: NEG
46954: PUSH
46955: LD_INT 1
46957: NEG
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: ST_TO_ADDR
// end ; 1 :
46972: GO 52869
46974: LD_INT 1
46976: DOUBLE
46977: EQUAL
46978: IFTRUE 46982
46980: GO 49605
46982: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46983: LD_ADDR_VAR 0 11
46987: PUSH
46988: LD_INT 1
46990: NEG
46991: PUSH
46992: LD_INT 3
46994: NEG
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 0
47002: PUSH
47003: LD_INT 3
47005: NEG
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 1
47013: PUSH
47014: LD_INT 2
47016: NEG
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: LIST
47026: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47027: LD_ADDR_VAR 0 12
47031: PUSH
47032: LD_INT 2
47034: PUSH
47035: LD_INT 1
47037: NEG
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 3
47045: PUSH
47046: LD_INT 0
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 3
47055: PUSH
47056: LD_INT 1
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: LIST
47067: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47068: LD_ADDR_VAR 0 13
47072: PUSH
47073: LD_INT 3
47075: PUSH
47076: LD_INT 2
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 3
47085: PUSH
47086: LD_INT 3
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 2
47095: PUSH
47096: LD_INT 3
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: LIST
47107: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47108: LD_ADDR_VAR 0 14
47112: PUSH
47113: LD_INT 1
47115: PUSH
47116: LD_INT 3
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 0
47125: PUSH
47126: LD_INT 3
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 1
47135: NEG
47136: PUSH
47137: LD_INT 2
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: LIST
47148: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47149: LD_ADDR_VAR 0 15
47153: PUSH
47154: LD_INT 2
47156: NEG
47157: PUSH
47158: LD_INT 1
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 3
47167: NEG
47168: PUSH
47169: LD_INT 0
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 3
47178: NEG
47179: PUSH
47180: LD_INT 1
47182: NEG
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: LIST
47192: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47193: LD_ADDR_VAR 0 16
47197: PUSH
47198: LD_INT 2
47200: NEG
47201: PUSH
47202: LD_INT 3
47204: NEG
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 3
47212: NEG
47213: PUSH
47214: LD_INT 2
47216: NEG
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 3
47224: NEG
47225: PUSH
47226: LD_INT 3
47228: NEG
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: LIST
47238: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47239: LD_ADDR_VAR 0 17
47243: PUSH
47244: LD_INT 1
47246: NEG
47247: PUSH
47248: LD_INT 3
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 0
47258: PUSH
47259: LD_INT 3
47261: NEG
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 1
47269: PUSH
47270: LD_INT 2
47272: NEG
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: LIST
47282: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47283: LD_ADDR_VAR 0 18
47287: PUSH
47288: LD_INT 2
47290: PUSH
47291: LD_INT 1
47293: NEG
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 3
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 3
47311: PUSH
47312: LD_INT 1
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: LIST
47323: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47324: LD_ADDR_VAR 0 19
47328: PUSH
47329: LD_INT 3
47331: PUSH
47332: LD_INT 2
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 3
47341: PUSH
47342: LD_INT 3
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 2
47351: PUSH
47352: LD_INT 3
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: LIST
47363: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47364: LD_ADDR_VAR 0 20
47368: PUSH
47369: LD_INT 1
47371: PUSH
47372: LD_INT 3
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 0
47381: PUSH
47382: LD_INT 3
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 1
47391: NEG
47392: PUSH
47393: LD_INT 2
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: LIST
47404: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47405: LD_ADDR_VAR 0 21
47409: PUSH
47410: LD_INT 2
47412: NEG
47413: PUSH
47414: LD_INT 1
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 3
47423: NEG
47424: PUSH
47425: LD_INT 0
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 3
47434: NEG
47435: PUSH
47436: LD_INT 1
47438: NEG
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: LIST
47448: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47449: LD_ADDR_VAR 0 22
47453: PUSH
47454: LD_INT 2
47456: NEG
47457: PUSH
47458: LD_INT 3
47460: NEG
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 3
47468: NEG
47469: PUSH
47470: LD_INT 2
47472: NEG
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 3
47480: NEG
47481: PUSH
47482: LD_INT 3
47484: NEG
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: LIST
47494: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47495: LD_ADDR_VAR 0 23
47499: PUSH
47500: LD_INT 0
47502: PUSH
47503: LD_INT 3
47505: NEG
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 1
47513: NEG
47514: PUSH
47515: LD_INT 4
47517: NEG
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 1
47525: PUSH
47526: LD_INT 3
47528: NEG
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: LIST
47538: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47539: LD_ADDR_VAR 0 24
47543: PUSH
47544: LD_INT 3
47546: PUSH
47547: LD_INT 0
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 3
47556: PUSH
47557: LD_INT 1
47559: NEG
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 4
47567: PUSH
47568: LD_INT 1
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: LIST
47579: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47580: LD_ADDR_VAR 0 25
47584: PUSH
47585: LD_INT 3
47587: PUSH
47588: LD_INT 3
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 4
47597: PUSH
47598: LD_INT 3
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 3
47607: PUSH
47608: LD_INT 4
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: LIST
47619: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47620: LD_ADDR_VAR 0 26
47624: PUSH
47625: LD_INT 0
47627: PUSH
47628: LD_INT 3
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 1
47637: PUSH
47638: LD_INT 4
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 1
47647: NEG
47648: PUSH
47649: LD_INT 3
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: LIST
47660: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47661: LD_ADDR_VAR 0 27
47665: PUSH
47666: LD_INT 3
47668: NEG
47669: PUSH
47670: LD_INT 0
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 3
47679: NEG
47680: PUSH
47681: LD_INT 1
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 4
47690: NEG
47691: PUSH
47692: LD_INT 1
47694: NEG
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: LIST
47704: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47705: LD_ADDR_VAR 0 28
47709: PUSH
47710: LD_INT 3
47712: NEG
47713: PUSH
47714: LD_INT 3
47716: NEG
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 3
47724: NEG
47725: PUSH
47726: LD_INT 4
47728: NEG
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 4
47736: NEG
47737: PUSH
47738: LD_INT 3
47740: NEG
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: LIST
47750: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47751: LD_ADDR_VAR 0 29
47755: PUSH
47756: LD_INT 1
47758: NEG
47759: PUSH
47760: LD_INT 3
47762: NEG
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 0
47770: PUSH
47771: LD_INT 3
47773: NEG
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 1
47781: PUSH
47782: LD_INT 2
47784: NEG
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 1
47792: NEG
47793: PUSH
47794: LD_INT 4
47796: NEG
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 0
47804: PUSH
47805: LD_INT 4
47807: NEG
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 1
47815: PUSH
47816: LD_INT 3
47818: NEG
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 1
47826: NEG
47827: PUSH
47828: LD_INT 5
47830: NEG
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: LD_INT 5
47841: NEG
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 1
47849: PUSH
47850: LD_INT 4
47852: NEG
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 1
47860: NEG
47861: PUSH
47862: LD_INT 6
47864: NEG
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 0
47872: PUSH
47873: LD_INT 6
47875: NEG
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 1
47883: PUSH
47884: LD_INT 5
47886: NEG
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47906: LD_ADDR_VAR 0 30
47910: PUSH
47911: LD_INT 2
47913: PUSH
47914: LD_INT 1
47916: NEG
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 3
47924: PUSH
47925: LD_INT 0
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 3
47934: PUSH
47935: LD_INT 1
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 3
47944: PUSH
47945: LD_INT 1
47947: NEG
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 4
47955: PUSH
47956: LD_INT 0
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 4
47965: PUSH
47966: LD_INT 1
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 4
47975: PUSH
47976: LD_INT 1
47978: NEG
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 5
47986: PUSH
47987: LD_INT 0
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 5
47996: PUSH
47997: LD_INT 1
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 5
48006: PUSH
48007: LD_INT 1
48009: NEG
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 6
48017: PUSH
48018: LD_INT 0
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 6
48027: PUSH
48028: LD_INT 1
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48049: LD_ADDR_VAR 0 31
48053: PUSH
48054: LD_INT 3
48056: PUSH
48057: LD_INT 2
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 3
48066: PUSH
48067: LD_INT 3
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 2
48076: PUSH
48077: LD_INT 3
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 4
48086: PUSH
48087: LD_INT 3
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 4
48096: PUSH
48097: LD_INT 4
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 3
48106: PUSH
48107: LD_INT 4
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 5
48116: PUSH
48117: LD_INT 4
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 5
48126: PUSH
48127: LD_INT 5
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 4
48136: PUSH
48137: LD_INT 5
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 6
48146: PUSH
48147: LD_INT 5
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 6
48156: PUSH
48157: LD_INT 6
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 5
48166: PUSH
48167: LD_INT 6
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48188: LD_ADDR_VAR 0 32
48192: PUSH
48193: LD_INT 1
48195: PUSH
48196: LD_INT 3
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 0
48205: PUSH
48206: LD_INT 3
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 1
48215: NEG
48216: PUSH
48217: LD_INT 2
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 1
48226: PUSH
48227: LD_INT 4
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 0
48236: PUSH
48237: LD_INT 4
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 1
48246: NEG
48247: PUSH
48248: LD_INT 3
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 1
48257: PUSH
48258: LD_INT 5
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 0
48267: PUSH
48268: LD_INT 5
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 1
48277: NEG
48278: PUSH
48279: LD_INT 4
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 1
48288: PUSH
48289: LD_INT 6
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 0
48298: PUSH
48299: LD_INT 6
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 1
48308: NEG
48309: PUSH
48310: LD_INT 5
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48331: LD_ADDR_VAR 0 33
48335: PUSH
48336: LD_INT 2
48338: NEG
48339: PUSH
48340: LD_INT 1
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 3
48349: NEG
48350: PUSH
48351: LD_INT 0
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 3
48360: NEG
48361: PUSH
48362: LD_INT 1
48364: NEG
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 3
48372: NEG
48373: PUSH
48374: LD_INT 1
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 4
48383: NEG
48384: PUSH
48385: LD_INT 0
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 4
48394: NEG
48395: PUSH
48396: LD_INT 1
48398: NEG
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 4
48406: NEG
48407: PUSH
48408: LD_INT 1
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 5
48417: NEG
48418: PUSH
48419: LD_INT 0
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 5
48428: NEG
48429: PUSH
48430: LD_INT 1
48432: NEG
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 5
48440: NEG
48441: PUSH
48442: LD_INT 1
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 6
48451: NEG
48452: PUSH
48453: LD_INT 0
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 6
48462: NEG
48463: PUSH
48464: LD_INT 1
48466: NEG
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48486: LD_ADDR_VAR 0 34
48490: PUSH
48491: LD_INT 2
48493: NEG
48494: PUSH
48495: LD_INT 3
48497: NEG
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 3
48505: NEG
48506: PUSH
48507: LD_INT 2
48509: NEG
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 3
48517: NEG
48518: PUSH
48519: LD_INT 3
48521: NEG
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 3
48529: NEG
48530: PUSH
48531: LD_INT 4
48533: NEG
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 4
48541: NEG
48542: PUSH
48543: LD_INT 3
48545: NEG
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 4
48553: NEG
48554: PUSH
48555: LD_INT 4
48557: NEG
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 4
48565: NEG
48566: PUSH
48567: LD_INT 5
48569: NEG
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 5
48577: NEG
48578: PUSH
48579: LD_INT 4
48581: NEG
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 5
48589: NEG
48590: PUSH
48591: LD_INT 5
48593: NEG
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 5
48601: NEG
48602: PUSH
48603: LD_INT 6
48605: NEG
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 6
48613: NEG
48614: PUSH
48615: LD_INT 5
48617: NEG
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 6
48625: NEG
48626: PUSH
48627: LD_INT 6
48629: NEG
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48649: LD_ADDR_VAR 0 41
48653: PUSH
48654: LD_INT 0
48656: PUSH
48657: LD_INT 2
48659: NEG
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 1
48667: NEG
48668: PUSH
48669: LD_INT 3
48671: NEG
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 1
48679: PUSH
48680: LD_INT 2
48682: NEG
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: LIST
48692: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48693: LD_ADDR_VAR 0 42
48697: PUSH
48698: LD_INT 2
48700: PUSH
48701: LD_INT 0
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 2
48710: PUSH
48711: LD_INT 1
48713: NEG
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 3
48721: PUSH
48722: LD_INT 1
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: LIST
48733: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48734: LD_ADDR_VAR 0 43
48738: PUSH
48739: LD_INT 2
48741: PUSH
48742: LD_INT 2
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 3
48751: PUSH
48752: LD_INT 2
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 2
48761: PUSH
48762: LD_INT 3
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: LIST
48773: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48774: LD_ADDR_VAR 0 44
48778: PUSH
48779: LD_INT 0
48781: PUSH
48782: LD_INT 2
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 1
48791: PUSH
48792: LD_INT 3
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 1
48801: NEG
48802: PUSH
48803: LD_INT 2
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: LIST
48814: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48815: LD_ADDR_VAR 0 45
48819: PUSH
48820: LD_INT 2
48822: NEG
48823: PUSH
48824: LD_INT 0
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 2
48833: NEG
48834: PUSH
48835: LD_INT 1
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 3
48844: NEG
48845: PUSH
48846: LD_INT 1
48848: NEG
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: LIST
48858: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48859: LD_ADDR_VAR 0 46
48863: PUSH
48864: LD_INT 2
48866: NEG
48867: PUSH
48868: LD_INT 2
48870: NEG
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 2
48878: NEG
48879: PUSH
48880: LD_INT 3
48882: NEG
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 3
48890: NEG
48891: PUSH
48892: LD_INT 2
48894: NEG
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: LIST
48904: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48905: LD_ADDR_VAR 0 47
48909: PUSH
48910: LD_INT 2
48912: NEG
48913: PUSH
48914: LD_INT 3
48916: NEG
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 1
48924: NEG
48925: PUSH
48926: LD_INT 3
48928: NEG
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48938: LD_ADDR_VAR 0 48
48942: PUSH
48943: LD_INT 1
48945: PUSH
48946: LD_INT 2
48948: NEG
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 2
48956: PUSH
48957: LD_INT 1
48959: NEG
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48969: LD_ADDR_VAR 0 49
48973: PUSH
48974: LD_INT 3
48976: PUSH
48977: LD_INT 1
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 3
48986: PUSH
48987: LD_INT 2
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48998: LD_ADDR_VAR 0 50
49002: PUSH
49003: LD_INT 2
49005: PUSH
49006: LD_INT 3
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 1
49015: PUSH
49016: LD_INT 3
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49027: LD_ADDR_VAR 0 51
49031: PUSH
49032: LD_INT 1
49034: NEG
49035: PUSH
49036: LD_INT 2
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 2
49045: NEG
49046: PUSH
49047: LD_INT 1
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49058: LD_ADDR_VAR 0 52
49062: PUSH
49063: LD_INT 3
49065: NEG
49066: PUSH
49067: LD_INT 1
49069: NEG
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 3
49077: NEG
49078: PUSH
49079: LD_INT 2
49081: NEG
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49091: LD_ADDR_VAR 0 53
49095: PUSH
49096: LD_INT 1
49098: NEG
49099: PUSH
49100: LD_INT 3
49102: NEG
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 0
49110: PUSH
49111: LD_INT 3
49113: NEG
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 1
49121: PUSH
49122: LD_INT 2
49124: NEG
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: LIST
49134: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49135: LD_ADDR_VAR 0 54
49139: PUSH
49140: LD_INT 2
49142: PUSH
49143: LD_INT 1
49145: NEG
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 3
49153: PUSH
49154: LD_INT 0
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 3
49163: PUSH
49164: LD_INT 1
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: LIST
49175: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49176: LD_ADDR_VAR 0 55
49180: PUSH
49181: LD_INT 3
49183: PUSH
49184: LD_INT 2
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 3
49193: PUSH
49194: LD_INT 3
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 2
49203: PUSH
49204: LD_INT 3
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: LIST
49215: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49216: LD_ADDR_VAR 0 56
49220: PUSH
49221: LD_INT 1
49223: PUSH
49224: LD_INT 3
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 0
49233: PUSH
49234: LD_INT 3
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 1
49243: NEG
49244: PUSH
49245: LD_INT 2
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: LIST
49256: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49257: LD_ADDR_VAR 0 57
49261: PUSH
49262: LD_INT 2
49264: NEG
49265: PUSH
49266: LD_INT 1
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 3
49275: NEG
49276: PUSH
49277: LD_INT 0
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 3
49286: NEG
49287: PUSH
49288: LD_INT 1
49290: NEG
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: LIST
49300: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49301: LD_ADDR_VAR 0 58
49305: PUSH
49306: LD_INT 2
49308: NEG
49309: PUSH
49310: LD_INT 3
49312: NEG
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 3
49320: NEG
49321: PUSH
49322: LD_INT 2
49324: NEG
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 3
49332: NEG
49333: PUSH
49334: LD_INT 3
49336: NEG
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: LIST
49346: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49347: LD_ADDR_VAR 0 59
49351: PUSH
49352: LD_INT 1
49354: NEG
49355: PUSH
49356: LD_INT 2
49358: NEG
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 0
49366: PUSH
49367: LD_INT 2
49369: NEG
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 1
49377: PUSH
49378: LD_INT 1
49380: NEG
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: LIST
49390: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49391: LD_ADDR_VAR 0 60
49395: PUSH
49396: LD_INT 1
49398: PUSH
49399: LD_INT 1
49401: NEG
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 2
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 2
49419: PUSH
49420: LD_INT 1
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: LIST
49431: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49432: LD_ADDR_VAR 0 61
49436: PUSH
49437: LD_INT 2
49439: PUSH
49440: LD_INT 1
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 2
49449: PUSH
49450: LD_INT 2
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 1
49459: PUSH
49460: LD_INT 2
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: LIST
49471: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49472: LD_ADDR_VAR 0 62
49476: PUSH
49477: LD_INT 1
49479: PUSH
49480: LD_INT 2
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 0
49489: PUSH
49490: LD_INT 2
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 1
49499: NEG
49500: PUSH
49501: LD_INT 1
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: LIST
49512: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49513: LD_ADDR_VAR 0 63
49517: PUSH
49518: LD_INT 1
49520: NEG
49521: PUSH
49522: LD_INT 1
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 2
49531: NEG
49532: PUSH
49533: LD_INT 0
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 2
49542: NEG
49543: PUSH
49544: LD_INT 1
49546: NEG
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: LIST
49556: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49557: LD_ADDR_VAR 0 64
49561: PUSH
49562: LD_INT 1
49564: NEG
49565: PUSH
49566: LD_INT 2
49568: NEG
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 2
49576: NEG
49577: PUSH
49578: LD_INT 1
49580: NEG
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 2
49588: NEG
49589: PUSH
49590: LD_INT 2
49592: NEG
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: LIST
49602: ST_TO_ADDR
// end ; 2 :
49603: GO 52869
49605: LD_INT 2
49607: DOUBLE
49608: EQUAL
49609: IFTRUE 49613
49611: GO 52868
49613: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49614: LD_ADDR_VAR 0 29
49618: PUSH
49619: LD_INT 4
49621: PUSH
49622: LD_INT 0
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 4
49631: PUSH
49632: LD_INT 1
49634: NEG
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 5
49642: PUSH
49643: LD_INT 0
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 5
49652: PUSH
49653: LD_INT 1
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 4
49662: PUSH
49663: LD_INT 1
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 3
49672: PUSH
49673: LD_INT 0
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 3
49682: PUSH
49683: LD_INT 1
49685: NEG
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 3
49693: PUSH
49694: LD_INT 2
49696: NEG
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 5
49704: PUSH
49705: LD_INT 2
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 3
49714: PUSH
49715: LD_INT 3
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 3
49724: PUSH
49725: LD_INT 2
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 4
49734: PUSH
49735: LD_INT 3
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 4
49744: PUSH
49745: LD_INT 4
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 3
49754: PUSH
49755: LD_INT 4
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 2
49764: PUSH
49765: LD_INT 3
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 2
49774: PUSH
49775: LD_INT 2
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 4
49784: PUSH
49785: LD_INT 2
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 2
49794: PUSH
49795: LD_INT 4
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 0
49804: PUSH
49805: LD_INT 4
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 0
49814: PUSH
49815: LD_INT 3
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 1
49824: PUSH
49825: LD_INT 4
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 1
49834: PUSH
49835: LD_INT 5
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 0
49844: PUSH
49845: LD_INT 5
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 1
49854: NEG
49855: PUSH
49856: LD_INT 4
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 1
49865: NEG
49866: PUSH
49867: LD_INT 3
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 2
49876: PUSH
49877: LD_INT 5
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 2
49886: NEG
49887: PUSH
49888: LD_INT 3
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 3
49897: NEG
49898: PUSH
49899: LD_INT 0
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 3
49908: NEG
49909: PUSH
49910: LD_INT 1
49912: NEG
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 2
49920: NEG
49921: PUSH
49922: LD_INT 0
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 2
49931: NEG
49932: PUSH
49933: LD_INT 1
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 3
49942: NEG
49943: PUSH
49944: LD_INT 1
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 4
49953: NEG
49954: PUSH
49955: LD_INT 0
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 4
49964: NEG
49965: PUSH
49966: LD_INT 1
49968: NEG
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 4
49976: NEG
49977: PUSH
49978: LD_INT 2
49980: NEG
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 2
49988: NEG
49989: PUSH
49990: LD_INT 2
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 4
49999: NEG
50000: PUSH
50001: LD_INT 4
50003: NEG
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 4
50011: NEG
50012: PUSH
50013: LD_INT 5
50015: NEG
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 3
50023: NEG
50024: PUSH
50025: LD_INT 4
50027: NEG
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 3
50035: NEG
50036: PUSH
50037: LD_INT 3
50039: NEG
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 4
50047: NEG
50048: PUSH
50049: LD_INT 3
50051: NEG
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 5
50059: NEG
50060: PUSH
50061: LD_INT 4
50063: NEG
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 5
50071: NEG
50072: PUSH
50073: LD_INT 5
50075: NEG
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 3
50083: NEG
50084: PUSH
50085: LD_INT 5
50087: NEG
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 5
50095: NEG
50096: PUSH
50097: LD_INT 3
50099: NEG
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50152: LD_ADDR_VAR 0 30
50156: PUSH
50157: LD_INT 4
50159: PUSH
50160: LD_INT 4
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 4
50169: PUSH
50170: LD_INT 3
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 5
50179: PUSH
50180: LD_INT 4
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 5
50189: PUSH
50190: LD_INT 5
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 4
50199: PUSH
50200: LD_INT 5
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 3
50209: PUSH
50210: LD_INT 4
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 3
50219: PUSH
50220: LD_INT 3
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 5
50229: PUSH
50230: LD_INT 3
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 3
50239: PUSH
50240: LD_INT 5
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 0
50249: PUSH
50250: LD_INT 3
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: LD_INT 2
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 1
50269: PUSH
50270: LD_INT 3
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 1
50279: PUSH
50280: LD_INT 4
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 0
50289: PUSH
50290: LD_INT 4
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 1
50299: NEG
50300: PUSH
50301: LD_INT 3
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 1
50310: NEG
50311: PUSH
50312: LD_INT 2
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 2
50321: PUSH
50322: LD_INT 4
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 2
50331: NEG
50332: PUSH
50333: LD_INT 2
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 4
50342: NEG
50343: PUSH
50344: LD_INT 0
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 4
50353: NEG
50354: PUSH
50355: LD_INT 1
50357: NEG
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 3
50365: NEG
50366: PUSH
50367: LD_INT 0
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 3
50376: NEG
50377: PUSH
50378: LD_INT 1
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 4
50387: NEG
50388: PUSH
50389: LD_INT 1
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 5
50398: NEG
50399: PUSH
50400: LD_INT 0
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 5
50409: NEG
50410: PUSH
50411: LD_INT 1
50413: NEG
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 5
50421: NEG
50422: PUSH
50423: LD_INT 2
50425: NEG
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 3
50433: NEG
50434: PUSH
50435: LD_INT 2
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 3
50444: NEG
50445: PUSH
50446: LD_INT 3
50448: NEG
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 3
50456: NEG
50457: PUSH
50458: LD_INT 4
50460: NEG
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 2
50468: NEG
50469: PUSH
50470: LD_INT 3
50472: NEG
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 2
50480: NEG
50481: PUSH
50482: LD_INT 2
50484: NEG
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 3
50492: NEG
50493: PUSH
50494: LD_INT 2
50496: NEG
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 4
50504: NEG
50505: PUSH
50506: LD_INT 3
50508: NEG
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 4
50516: NEG
50517: PUSH
50518: LD_INT 4
50520: NEG
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 2
50528: NEG
50529: PUSH
50530: LD_INT 4
50532: NEG
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 4
50540: NEG
50541: PUSH
50542: LD_INT 2
50544: NEG
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 0
50552: PUSH
50553: LD_INT 4
50555: NEG
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 0
50563: PUSH
50564: LD_INT 5
50566: NEG
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 1
50574: PUSH
50575: LD_INT 4
50577: NEG
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 1
50585: PUSH
50586: LD_INT 3
50588: NEG
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 0
50596: PUSH
50597: LD_INT 3
50599: NEG
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 1
50607: NEG
50608: PUSH
50609: LD_INT 4
50611: NEG
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 1
50619: NEG
50620: PUSH
50621: LD_INT 5
50623: NEG
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 2
50631: PUSH
50632: LD_INT 3
50634: NEG
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 2
50642: NEG
50643: PUSH
50644: LD_INT 5
50646: NEG
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50699: LD_ADDR_VAR 0 31
50703: PUSH
50704: LD_INT 0
50706: PUSH
50707: LD_INT 4
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 0
50716: PUSH
50717: LD_INT 3
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 1
50726: PUSH
50727: LD_INT 4
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 1
50736: PUSH
50737: LD_INT 5
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 0
50746: PUSH
50747: LD_INT 5
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 1
50756: NEG
50757: PUSH
50758: LD_INT 4
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 1
50767: NEG
50768: PUSH
50769: LD_INT 3
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 2
50778: PUSH
50779: LD_INT 5
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 2
50788: NEG
50789: PUSH
50790: LD_INT 3
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 3
50799: NEG
50800: PUSH
50801: LD_INT 0
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 3
50810: NEG
50811: PUSH
50812: LD_INT 1
50814: NEG
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 2
50822: NEG
50823: PUSH
50824: LD_INT 0
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 2
50833: NEG
50834: PUSH
50835: LD_INT 1
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 3
50844: NEG
50845: PUSH
50846: LD_INT 1
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 4
50855: NEG
50856: PUSH
50857: LD_INT 0
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 4
50866: NEG
50867: PUSH
50868: LD_INT 1
50870: NEG
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 4
50878: NEG
50879: PUSH
50880: LD_INT 2
50882: NEG
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 2
50890: NEG
50891: PUSH
50892: LD_INT 2
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 4
50901: NEG
50902: PUSH
50903: LD_INT 4
50905: NEG
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 4
50913: NEG
50914: PUSH
50915: LD_INT 5
50917: NEG
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 3
50925: NEG
50926: PUSH
50927: LD_INT 4
50929: NEG
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 3
50937: NEG
50938: PUSH
50939: LD_INT 3
50941: NEG
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 4
50949: NEG
50950: PUSH
50951: LD_INT 3
50953: NEG
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 5
50961: NEG
50962: PUSH
50963: LD_INT 4
50965: NEG
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 5
50973: NEG
50974: PUSH
50975: LD_INT 5
50977: NEG
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 3
50985: NEG
50986: PUSH
50987: LD_INT 5
50989: NEG
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 5
50997: NEG
50998: PUSH
50999: LD_INT 3
51001: NEG
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 0
51009: PUSH
51010: LD_INT 3
51012: NEG
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 0
51020: PUSH
51021: LD_INT 4
51023: NEG
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 1
51031: PUSH
51032: LD_INT 3
51034: NEG
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 1
51042: PUSH
51043: LD_INT 2
51045: NEG
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 0
51053: PUSH
51054: LD_INT 2
51056: NEG
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 1
51064: NEG
51065: PUSH
51066: LD_INT 3
51068: NEG
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 1
51076: NEG
51077: PUSH
51078: LD_INT 4
51080: NEG
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 2
51088: PUSH
51089: LD_INT 2
51091: NEG
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 2
51099: NEG
51100: PUSH
51101: LD_INT 4
51103: NEG
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 4
51111: PUSH
51112: LD_INT 0
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 4
51121: PUSH
51122: LD_INT 1
51124: NEG
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 5
51132: PUSH
51133: LD_INT 0
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 5
51142: PUSH
51143: LD_INT 1
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 4
51152: PUSH
51153: LD_INT 1
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 3
51162: PUSH
51163: LD_INT 0
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 3
51172: PUSH
51173: LD_INT 1
51175: NEG
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: LD_INT 3
51183: PUSH
51184: LD_INT 2
51186: NEG
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 5
51194: PUSH
51195: LD_INT 2
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51249: LD_ADDR_VAR 0 32
51253: PUSH
51254: LD_INT 4
51256: NEG
51257: PUSH
51258: LD_INT 0
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 4
51267: NEG
51268: PUSH
51269: LD_INT 1
51271: NEG
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 3
51279: NEG
51280: PUSH
51281: LD_INT 0
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 3
51290: NEG
51291: PUSH
51292: LD_INT 1
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 4
51301: NEG
51302: PUSH
51303: LD_INT 1
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 5
51312: NEG
51313: PUSH
51314: LD_INT 0
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 5
51323: NEG
51324: PUSH
51325: LD_INT 1
51327: NEG
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 5
51335: NEG
51336: PUSH
51337: LD_INT 2
51339: NEG
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 3
51347: NEG
51348: PUSH
51349: LD_INT 2
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 3
51358: NEG
51359: PUSH
51360: LD_INT 3
51362: NEG
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 3
51370: NEG
51371: PUSH
51372: LD_INT 4
51374: NEG
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 2
51382: NEG
51383: PUSH
51384: LD_INT 3
51386: NEG
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 2
51394: NEG
51395: PUSH
51396: LD_INT 2
51398: NEG
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 3
51406: NEG
51407: PUSH
51408: LD_INT 2
51410: NEG
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 4
51418: NEG
51419: PUSH
51420: LD_INT 3
51422: NEG
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 4
51430: NEG
51431: PUSH
51432: LD_INT 4
51434: NEG
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 2
51442: NEG
51443: PUSH
51444: LD_INT 4
51446: NEG
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 4
51454: NEG
51455: PUSH
51456: LD_INT 2
51458: NEG
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 0
51466: PUSH
51467: LD_INT 4
51469: NEG
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 0
51477: PUSH
51478: LD_INT 5
51480: NEG
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 1
51488: PUSH
51489: LD_INT 4
51491: NEG
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 1
51499: PUSH
51500: LD_INT 3
51502: NEG
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 0
51510: PUSH
51511: LD_INT 3
51513: NEG
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 1
51521: NEG
51522: PUSH
51523: LD_INT 4
51525: NEG
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 1
51533: NEG
51534: PUSH
51535: LD_INT 5
51537: NEG
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 2
51545: PUSH
51546: LD_INT 3
51548: NEG
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 2
51556: NEG
51557: PUSH
51558: LD_INT 5
51560: NEG
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 3
51568: PUSH
51569: LD_INT 0
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 3
51578: PUSH
51579: LD_INT 1
51581: NEG
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 4
51589: PUSH
51590: LD_INT 0
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 4
51599: PUSH
51600: LD_INT 1
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 3
51609: PUSH
51610: LD_INT 1
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 2
51619: PUSH
51620: LD_INT 0
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 2
51629: PUSH
51630: LD_INT 1
51632: NEG
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 2
51640: PUSH
51641: LD_INT 2
51643: NEG
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 4
51651: PUSH
51652: LD_INT 2
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 4
51661: PUSH
51662: LD_INT 4
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 4
51671: PUSH
51672: LD_INT 3
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 5
51681: PUSH
51682: LD_INT 4
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 5
51691: PUSH
51692: LD_INT 5
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 4
51701: PUSH
51702: LD_INT 5
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 3
51711: PUSH
51712: LD_INT 4
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 3
51721: PUSH
51722: LD_INT 3
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 5
51731: PUSH
51732: LD_INT 3
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 3
51741: PUSH
51742: LD_INT 5
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51796: LD_ADDR_VAR 0 33
51800: PUSH
51801: LD_INT 4
51803: NEG
51804: PUSH
51805: LD_INT 4
51807: NEG
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 4
51815: NEG
51816: PUSH
51817: LD_INT 5
51819: NEG
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 3
51827: NEG
51828: PUSH
51829: LD_INT 4
51831: NEG
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 3
51839: NEG
51840: PUSH
51841: LD_INT 3
51843: NEG
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 4
51851: NEG
51852: PUSH
51853: LD_INT 3
51855: NEG
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 5
51863: NEG
51864: PUSH
51865: LD_INT 4
51867: NEG
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 5
51875: NEG
51876: PUSH
51877: LD_INT 5
51879: NEG
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 3
51887: NEG
51888: PUSH
51889: LD_INT 5
51891: NEG
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 5
51899: NEG
51900: PUSH
51901: LD_INT 3
51903: NEG
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 0
51911: PUSH
51912: LD_INT 3
51914: NEG
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 0
51922: PUSH
51923: LD_INT 4
51925: NEG
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 1
51933: PUSH
51934: LD_INT 3
51936: NEG
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 1
51944: PUSH
51945: LD_INT 2
51947: NEG
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 0
51955: PUSH
51956: LD_INT 2
51958: NEG
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 1
51966: NEG
51967: PUSH
51968: LD_INT 3
51970: NEG
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 1
51978: NEG
51979: PUSH
51980: LD_INT 4
51982: NEG
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 2
51990: PUSH
51991: LD_INT 2
51993: NEG
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 2
52001: NEG
52002: PUSH
52003: LD_INT 4
52005: NEG
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 4
52013: PUSH
52014: LD_INT 0
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 4
52023: PUSH
52024: LD_INT 1
52026: NEG
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 5
52034: PUSH
52035: LD_INT 0
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 5
52044: PUSH
52045: LD_INT 1
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 4
52054: PUSH
52055: LD_INT 1
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 3
52064: PUSH
52065: LD_INT 0
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 3
52074: PUSH
52075: LD_INT 1
52077: NEG
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 3
52085: PUSH
52086: LD_INT 2
52088: NEG
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 5
52096: PUSH
52097: LD_INT 2
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 3
52106: PUSH
52107: LD_INT 3
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 3
52116: PUSH
52117: LD_INT 2
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 4
52126: PUSH
52127: LD_INT 3
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 4
52136: PUSH
52137: LD_INT 4
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 3
52146: PUSH
52147: LD_INT 4
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 2
52156: PUSH
52157: LD_INT 3
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 2
52166: PUSH
52167: LD_INT 2
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 4
52176: PUSH
52177: LD_INT 2
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 2
52186: PUSH
52187: LD_INT 4
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 0
52196: PUSH
52197: LD_INT 4
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: LD_INT 3
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 1
52216: PUSH
52217: LD_INT 4
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 1
52226: PUSH
52227: LD_INT 5
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 0
52236: PUSH
52237: LD_INT 5
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 1
52246: NEG
52247: PUSH
52248: LD_INT 4
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 1
52257: NEG
52258: PUSH
52259: LD_INT 3
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 2
52268: PUSH
52269: LD_INT 5
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 2
52278: NEG
52279: PUSH
52280: LD_INT 3
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52334: LD_ADDR_VAR 0 34
52338: PUSH
52339: LD_INT 0
52341: PUSH
52342: LD_INT 4
52344: NEG
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 0
52352: PUSH
52353: LD_INT 5
52355: NEG
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 1
52363: PUSH
52364: LD_INT 4
52366: NEG
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 1
52374: PUSH
52375: LD_INT 3
52377: NEG
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 0
52385: PUSH
52386: LD_INT 3
52388: NEG
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 1
52396: NEG
52397: PUSH
52398: LD_INT 4
52400: NEG
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 1
52408: NEG
52409: PUSH
52410: LD_INT 5
52412: NEG
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 2
52420: PUSH
52421: LD_INT 3
52423: NEG
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 2
52431: NEG
52432: PUSH
52433: LD_INT 5
52435: NEG
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 3
52443: PUSH
52444: LD_INT 0
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 3
52453: PUSH
52454: LD_INT 1
52456: NEG
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 4
52464: PUSH
52465: LD_INT 0
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 4
52474: PUSH
52475: LD_INT 1
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 3
52484: PUSH
52485: LD_INT 1
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 2
52494: PUSH
52495: LD_INT 0
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 2
52504: PUSH
52505: LD_INT 1
52507: NEG
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 2
52515: PUSH
52516: LD_INT 2
52518: NEG
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 4
52526: PUSH
52527: LD_INT 2
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 4
52536: PUSH
52537: LD_INT 4
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 4
52546: PUSH
52547: LD_INT 3
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 5
52556: PUSH
52557: LD_INT 4
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 5
52566: PUSH
52567: LD_INT 5
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 4
52576: PUSH
52577: LD_INT 5
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 3
52586: PUSH
52587: LD_INT 4
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 3
52596: PUSH
52597: LD_INT 3
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 5
52606: PUSH
52607: LD_INT 3
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 3
52616: PUSH
52617: LD_INT 5
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 0
52626: PUSH
52627: LD_INT 3
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 0
52636: PUSH
52637: LD_INT 2
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 1
52646: PUSH
52647: LD_INT 3
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 1
52656: PUSH
52657: LD_INT 4
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 0
52666: PUSH
52667: LD_INT 4
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 1
52676: NEG
52677: PUSH
52678: LD_INT 3
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 1
52687: NEG
52688: PUSH
52689: LD_INT 2
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 2
52698: PUSH
52699: LD_INT 4
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 2
52708: NEG
52709: PUSH
52710: LD_INT 2
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 4
52719: NEG
52720: PUSH
52721: LD_INT 0
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 4
52730: NEG
52731: PUSH
52732: LD_INT 1
52734: NEG
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 3
52742: NEG
52743: PUSH
52744: LD_INT 0
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 3
52753: NEG
52754: PUSH
52755: LD_INT 1
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 4
52764: NEG
52765: PUSH
52766: LD_INT 1
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 5
52775: NEG
52776: PUSH
52777: LD_INT 0
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 5
52786: NEG
52787: PUSH
52788: LD_INT 1
52790: NEG
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 5
52798: NEG
52799: PUSH
52800: LD_INT 2
52802: NEG
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 3
52810: NEG
52811: PUSH
52812: LD_INT 2
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: ST_TO_ADDR
// end ; end ;
52866: GO 52869
52868: POP
// case btype of b_depot , b_warehouse :
52869: LD_VAR 0 1
52873: PUSH
52874: LD_INT 0
52876: DOUBLE
52877: EQUAL
52878: IFTRUE 52888
52880: LD_INT 1
52882: DOUBLE
52883: EQUAL
52884: IFTRUE 52888
52886: GO 53089
52888: POP
// case nation of nation_american :
52889: LD_VAR 0 5
52893: PUSH
52894: LD_INT 1
52896: DOUBLE
52897: EQUAL
52898: IFTRUE 52902
52900: GO 52958
52902: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
52903: LD_ADDR_VAR 0 9
52907: PUSH
52908: LD_VAR 0 11
52912: PUSH
52913: LD_VAR 0 12
52917: PUSH
52918: LD_VAR 0 13
52922: PUSH
52923: LD_VAR 0 14
52927: PUSH
52928: LD_VAR 0 15
52932: PUSH
52933: LD_VAR 0 16
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: PUSH
52946: LD_VAR 0 4
52950: PUSH
52951: LD_INT 1
52953: PLUS
52954: ARRAY
52955: ST_TO_ADDR
52956: GO 53087
52958: LD_INT 2
52960: DOUBLE
52961: EQUAL
52962: IFTRUE 52966
52964: GO 53022
52966: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
52967: LD_ADDR_VAR 0 9
52971: PUSH
52972: LD_VAR 0 17
52976: PUSH
52977: LD_VAR 0 18
52981: PUSH
52982: LD_VAR 0 19
52986: PUSH
52987: LD_VAR 0 20
52991: PUSH
52992: LD_VAR 0 21
52996: PUSH
52997: LD_VAR 0 22
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: PUSH
53010: LD_VAR 0 4
53014: PUSH
53015: LD_INT 1
53017: PLUS
53018: ARRAY
53019: ST_TO_ADDR
53020: GO 53087
53022: LD_INT 3
53024: DOUBLE
53025: EQUAL
53026: IFTRUE 53030
53028: GO 53086
53030: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53031: LD_ADDR_VAR 0 9
53035: PUSH
53036: LD_VAR 0 23
53040: PUSH
53041: LD_VAR 0 24
53045: PUSH
53046: LD_VAR 0 25
53050: PUSH
53051: LD_VAR 0 26
53055: PUSH
53056: LD_VAR 0 27
53060: PUSH
53061: LD_VAR 0 28
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: PUSH
53074: LD_VAR 0 4
53078: PUSH
53079: LD_INT 1
53081: PLUS
53082: ARRAY
53083: ST_TO_ADDR
53084: GO 53087
53086: POP
53087: GO 53642
53089: LD_INT 2
53091: DOUBLE
53092: EQUAL
53093: IFTRUE 53103
53095: LD_INT 3
53097: DOUBLE
53098: EQUAL
53099: IFTRUE 53103
53101: GO 53159
53103: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53104: LD_ADDR_VAR 0 9
53108: PUSH
53109: LD_VAR 0 29
53113: PUSH
53114: LD_VAR 0 30
53118: PUSH
53119: LD_VAR 0 31
53123: PUSH
53124: LD_VAR 0 32
53128: PUSH
53129: LD_VAR 0 33
53133: PUSH
53134: LD_VAR 0 34
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: PUSH
53147: LD_VAR 0 4
53151: PUSH
53152: LD_INT 1
53154: PLUS
53155: ARRAY
53156: ST_TO_ADDR
53157: GO 53642
53159: LD_INT 16
53161: DOUBLE
53162: EQUAL
53163: IFTRUE 53221
53165: LD_INT 17
53167: DOUBLE
53168: EQUAL
53169: IFTRUE 53221
53171: LD_INT 18
53173: DOUBLE
53174: EQUAL
53175: IFTRUE 53221
53177: LD_INT 19
53179: DOUBLE
53180: EQUAL
53181: IFTRUE 53221
53183: LD_INT 22
53185: DOUBLE
53186: EQUAL
53187: IFTRUE 53221
53189: LD_INT 20
53191: DOUBLE
53192: EQUAL
53193: IFTRUE 53221
53195: LD_INT 21
53197: DOUBLE
53198: EQUAL
53199: IFTRUE 53221
53201: LD_INT 23
53203: DOUBLE
53204: EQUAL
53205: IFTRUE 53221
53207: LD_INT 24
53209: DOUBLE
53210: EQUAL
53211: IFTRUE 53221
53213: LD_INT 25
53215: DOUBLE
53216: EQUAL
53217: IFTRUE 53221
53219: GO 53277
53221: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53222: LD_ADDR_VAR 0 9
53226: PUSH
53227: LD_VAR 0 35
53231: PUSH
53232: LD_VAR 0 36
53236: PUSH
53237: LD_VAR 0 37
53241: PUSH
53242: LD_VAR 0 38
53246: PUSH
53247: LD_VAR 0 39
53251: PUSH
53252: LD_VAR 0 40
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: PUSH
53265: LD_VAR 0 4
53269: PUSH
53270: LD_INT 1
53272: PLUS
53273: ARRAY
53274: ST_TO_ADDR
53275: GO 53642
53277: LD_INT 6
53279: DOUBLE
53280: EQUAL
53281: IFTRUE 53333
53283: LD_INT 7
53285: DOUBLE
53286: EQUAL
53287: IFTRUE 53333
53289: LD_INT 8
53291: DOUBLE
53292: EQUAL
53293: IFTRUE 53333
53295: LD_INT 13
53297: DOUBLE
53298: EQUAL
53299: IFTRUE 53333
53301: LD_INT 12
53303: DOUBLE
53304: EQUAL
53305: IFTRUE 53333
53307: LD_INT 15
53309: DOUBLE
53310: EQUAL
53311: IFTRUE 53333
53313: LD_INT 11
53315: DOUBLE
53316: EQUAL
53317: IFTRUE 53333
53319: LD_INT 14
53321: DOUBLE
53322: EQUAL
53323: IFTRUE 53333
53325: LD_INT 10
53327: DOUBLE
53328: EQUAL
53329: IFTRUE 53333
53331: GO 53389
53333: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53334: LD_ADDR_VAR 0 9
53338: PUSH
53339: LD_VAR 0 41
53343: PUSH
53344: LD_VAR 0 42
53348: PUSH
53349: LD_VAR 0 43
53353: PUSH
53354: LD_VAR 0 44
53358: PUSH
53359: LD_VAR 0 45
53363: PUSH
53364: LD_VAR 0 46
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: PUSH
53377: LD_VAR 0 4
53381: PUSH
53382: LD_INT 1
53384: PLUS
53385: ARRAY
53386: ST_TO_ADDR
53387: GO 53642
53389: LD_INT 36
53391: DOUBLE
53392: EQUAL
53393: IFTRUE 53397
53395: GO 53453
53397: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53398: LD_ADDR_VAR 0 9
53402: PUSH
53403: LD_VAR 0 47
53407: PUSH
53408: LD_VAR 0 48
53412: PUSH
53413: LD_VAR 0 49
53417: PUSH
53418: LD_VAR 0 50
53422: PUSH
53423: LD_VAR 0 51
53427: PUSH
53428: LD_VAR 0 52
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: PUSH
53441: LD_VAR 0 4
53445: PUSH
53446: LD_INT 1
53448: PLUS
53449: ARRAY
53450: ST_TO_ADDR
53451: GO 53642
53453: LD_INT 4
53455: DOUBLE
53456: EQUAL
53457: IFTRUE 53479
53459: LD_INT 5
53461: DOUBLE
53462: EQUAL
53463: IFTRUE 53479
53465: LD_INT 34
53467: DOUBLE
53468: EQUAL
53469: IFTRUE 53479
53471: LD_INT 37
53473: DOUBLE
53474: EQUAL
53475: IFTRUE 53479
53477: GO 53535
53479: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53480: LD_ADDR_VAR 0 9
53484: PUSH
53485: LD_VAR 0 53
53489: PUSH
53490: LD_VAR 0 54
53494: PUSH
53495: LD_VAR 0 55
53499: PUSH
53500: LD_VAR 0 56
53504: PUSH
53505: LD_VAR 0 57
53509: PUSH
53510: LD_VAR 0 58
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: PUSH
53523: LD_VAR 0 4
53527: PUSH
53528: LD_INT 1
53530: PLUS
53531: ARRAY
53532: ST_TO_ADDR
53533: GO 53642
53535: LD_INT 31
53537: DOUBLE
53538: EQUAL
53539: IFTRUE 53585
53541: LD_INT 32
53543: DOUBLE
53544: EQUAL
53545: IFTRUE 53585
53547: LD_INT 33
53549: DOUBLE
53550: EQUAL
53551: IFTRUE 53585
53553: LD_INT 27
53555: DOUBLE
53556: EQUAL
53557: IFTRUE 53585
53559: LD_INT 26
53561: DOUBLE
53562: EQUAL
53563: IFTRUE 53585
53565: LD_INT 28
53567: DOUBLE
53568: EQUAL
53569: IFTRUE 53585
53571: LD_INT 29
53573: DOUBLE
53574: EQUAL
53575: IFTRUE 53585
53577: LD_INT 30
53579: DOUBLE
53580: EQUAL
53581: IFTRUE 53585
53583: GO 53641
53585: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
53586: LD_ADDR_VAR 0 9
53590: PUSH
53591: LD_VAR 0 59
53595: PUSH
53596: LD_VAR 0 60
53600: PUSH
53601: LD_VAR 0 61
53605: PUSH
53606: LD_VAR 0 62
53610: PUSH
53611: LD_VAR 0 63
53615: PUSH
53616: LD_VAR 0 64
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: PUSH
53629: LD_VAR 0 4
53633: PUSH
53634: LD_INT 1
53636: PLUS
53637: ARRAY
53638: ST_TO_ADDR
53639: GO 53642
53641: POP
// temp_list2 = [ ] ;
53642: LD_ADDR_VAR 0 10
53646: PUSH
53647: EMPTY
53648: ST_TO_ADDR
// for i in temp_list do
53649: LD_ADDR_VAR 0 8
53653: PUSH
53654: LD_VAR 0 9
53658: PUSH
53659: FOR_IN
53660: IFFALSE 53712
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53662: LD_ADDR_VAR 0 10
53666: PUSH
53667: LD_VAR 0 10
53671: PUSH
53672: LD_VAR 0 8
53676: PUSH
53677: LD_INT 1
53679: ARRAY
53680: PUSH
53681: LD_VAR 0 2
53685: PLUS
53686: PUSH
53687: LD_VAR 0 8
53691: PUSH
53692: LD_INT 2
53694: ARRAY
53695: PUSH
53696: LD_VAR 0 3
53700: PLUS
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: EMPTY
53707: LIST
53708: ADD
53709: ST_TO_ADDR
53710: GO 53659
53712: POP
53713: POP
// result = temp_list2 ;
53714: LD_ADDR_VAR 0 7
53718: PUSH
53719: LD_VAR 0 10
53723: ST_TO_ADDR
// end ;
53724: LD_VAR 0 7
53728: RET
// export function EnemyInRange ( unit , dist ) ; begin
53729: LD_INT 0
53731: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53732: LD_ADDR_VAR 0 3
53736: PUSH
53737: LD_VAR 0 1
53741: PPUSH
53742: CALL_OW 255
53746: PPUSH
53747: LD_VAR 0 1
53751: PPUSH
53752: CALL_OW 250
53756: PPUSH
53757: LD_VAR 0 1
53761: PPUSH
53762: CALL_OW 251
53766: PPUSH
53767: LD_VAR 0 2
53771: PPUSH
53772: CALL 26986 0 4
53776: PUSH
53777: LD_INT 4
53779: ARRAY
53780: ST_TO_ADDR
// end ;
53781: LD_VAR 0 3
53785: RET
// export function PlayerSeeMe ( unit ) ; begin
53786: LD_INT 0
53788: PPUSH
// result := See ( your_side , unit ) ;
53789: LD_ADDR_VAR 0 2
53793: PUSH
53794: LD_OWVAR 2
53798: PPUSH
53799: LD_VAR 0 1
53803: PPUSH
53804: CALL_OW 292
53808: ST_TO_ADDR
// end ;
53809: LD_VAR 0 2
53813: RET
// export function ReverseDir ( unit ) ; begin
53814: LD_INT 0
53816: PPUSH
// if not unit then
53817: LD_VAR 0 1
53821: NOT
53822: IFFALSE 53826
// exit ;
53824: GO 53849
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53826: LD_ADDR_VAR 0 2
53830: PUSH
53831: LD_VAR 0 1
53835: PPUSH
53836: CALL_OW 254
53840: PUSH
53841: LD_INT 3
53843: PLUS
53844: PUSH
53845: LD_INT 6
53847: MOD
53848: ST_TO_ADDR
// end ;
53849: LD_VAR 0 2
53853: RET
// export function ReverseArray ( array ) ; var i ; begin
53854: LD_INT 0
53856: PPUSH
53857: PPUSH
// if not array then
53858: LD_VAR 0 1
53862: NOT
53863: IFFALSE 53867
// exit ;
53865: GO 53922
// result := [ ] ;
53867: LD_ADDR_VAR 0 2
53871: PUSH
53872: EMPTY
53873: ST_TO_ADDR
// for i := array downto 1 do
53874: LD_ADDR_VAR 0 3
53878: PUSH
53879: DOUBLE
53880: LD_VAR 0 1
53884: INC
53885: ST_TO_ADDR
53886: LD_INT 1
53888: PUSH
53889: FOR_DOWNTO
53890: IFFALSE 53920
// result := Join ( result , array [ i ] ) ;
53892: LD_ADDR_VAR 0 2
53896: PUSH
53897: LD_VAR 0 2
53901: PPUSH
53902: LD_VAR 0 1
53906: PUSH
53907: LD_VAR 0 3
53911: ARRAY
53912: PPUSH
53913: CALL 58774 0 2
53917: ST_TO_ADDR
53918: GO 53889
53920: POP
53921: POP
// end ;
53922: LD_VAR 0 2
53926: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
53927: LD_INT 0
53929: PPUSH
53930: PPUSH
53931: PPUSH
53932: PPUSH
53933: PPUSH
53934: PPUSH
// if not unit or not hexes then
53935: LD_VAR 0 1
53939: NOT
53940: IFTRUE 53949
53942: PUSH
53943: LD_VAR 0 2
53947: NOT
53948: OR
53949: IFFALSE 53953
// exit ;
53951: GO 54076
// dist := 9999 ;
53953: LD_ADDR_VAR 0 5
53957: PUSH
53958: LD_INT 9999
53960: ST_TO_ADDR
// for i = 1 to hexes do
53961: LD_ADDR_VAR 0 4
53965: PUSH
53966: DOUBLE
53967: LD_INT 1
53969: DEC
53970: ST_TO_ADDR
53971: LD_VAR 0 2
53975: PUSH
53976: FOR_TO
53977: IFFALSE 54064
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53979: LD_ADDR_VAR 0 6
53983: PUSH
53984: LD_VAR 0 1
53988: PPUSH
53989: LD_VAR 0 2
53993: PUSH
53994: LD_VAR 0 4
53998: ARRAY
53999: PUSH
54000: LD_INT 1
54002: ARRAY
54003: PPUSH
54004: LD_VAR 0 2
54008: PUSH
54009: LD_VAR 0 4
54013: ARRAY
54014: PUSH
54015: LD_INT 2
54017: ARRAY
54018: PPUSH
54019: CALL_OW 297
54023: ST_TO_ADDR
// if tdist < dist then
54024: LD_VAR 0 6
54028: PUSH
54029: LD_VAR 0 5
54033: LESS
54034: IFFALSE 54062
// begin hex := hexes [ i ] ;
54036: LD_ADDR_VAR 0 8
54040: PUSH
54041: LD_VAR 0 2
54045: PUSH
54046: LD_VAR 0 4
54050: ARRAY
54051: ST_TO_ADDR
// dist := tdist ;
54052: LD_ADDR_VAR 0 5
54056: PUSH
54057: LD_VAR 0 6
54061: ST_TO_ADDR
// end ; end ;
54062: GO 53976
54064: POP
54065: POP
// result := hex ;
54066: LD_ADDR_VAR 0 3
54070: PUSH
54071: LD_VAR 0 8
54075: ST_TO_ADDR
// end ;
54076: LD_VAR 0 3
54080: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54081: LD_INT 0
54083: PPUSH
54084: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54085: LD_VAR 0 1
54089: NOT
54090: IFTRUE 54129
54092: PUSH
54093: LD_VAR 0 1
54097: PUSH
54098: LD_INT 21
54100: PUSH
54101: LD_INT 2
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 23
54110: PUSH
54111: LD_INT 2
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PPUSH
54122: CALL_OW 69
54126: IN
54127: NOT
54128: OR
54129: IFFALSE 54133
// exit ;
54131: GO 54180
// for i = 1 to 3 do
54133: LD_ADDR_VAR 0 3
54137: PUSH
54138: DOUBLE
54139: LD_INT 1
54141: DEC
54142: ST_TO_ADDR
54143: LD_INT 3
54145: PUSH
54146: FOR_TO
54147: IFFALSE 54178
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54149: LD_VAR 0 1
54153: PPUSH
54154: CALL_OW 250
54158: PPUSH
54159: LD_VAR 0 1
54163: PPUSH
54164: CALL_OW 251
54168: PPUSH
54169: LD_INT 1
54171: PPUSH
54172: CALL_OW 453
54176: GO 54146
54178: POP
54179: POP
// end ;
54180: LD_VAR 0 2
54184: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54185: LD_INT 0
54187: PPUSH
54188: PPUSH
54189: PPUSH
54190: PPUSH
54191: PPUSH
54192: PPUSH
// if not unit or not enemy_unit then
54193: LD_VAR 0 1
54197: NOT
54198: IFTRUE 54207
54200: PUSH
54201: LD_VAR 0 2
54205: NOT
54206: OR
54207: IFFALSE 54211
// exit ;
54209: GO 54692
// if GetLives ( i ) < 250 then
54211: LD_VAR 0 4
54215: PPUSH
54216: CALL_OW 256
54220: PUSH
54221: LD_INT 250
54223: LESS
54224: IFFALSE 54237
// begin ComAutodestruct ( i ) ;
54226: LD_VAR 0 4
54230: PPUSH
54231: CALL 54081 0 1
// exit ;
54235: GO 54692
// end ; x := GetX ( enemy_unit ) ;
54237: LD_ADDR_VAR 0 7
54241: PUSH
54242: LD_VAR 0 2
54246: PPUSH
54247: CALL_OW 250
54251: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54252: LD_ADDR_VAR 0 8
54256: PUSH
54257: LD_VAR 0 2
54261: PPUSH
54262: CALL_OW 251
54266: ST_TO_ADDR
// if not x or not y then
54267: LD_VAR 0 7
54271: NOT
54272: IFTRUE 54281
54274: PUSH
54275: LD_VAR 0 8
54279: NOT
54280: OR
54281: IFFALSE 54285
// exit ;
54283: GO 54692
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54285: LD_ADDR_VAR 0 6
54289: PUSH
54290: LD_VAR 0 7
54294: PPUSH
54295: LD_INT 0
54297: PPUSH
54298: LD_INT 4
54300: PPUSH
54301: CALL_OW 272
54305: PUSH
54306: LD_VAR 0 8
54310: PPUSH
54311: LD_INT 0
54313: PPUSH
54314: LD_INT 4
54316: PPUSH
54317: CALL_OW 273
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_VAR 0 7
54330: PPUSH
54331: LD_INT 1
54333: PPUSH
54334: LD_INT 4
54336: PPUSH
54337: CALL_OW 272
54341: PUSH
54342: LD_VAR 0 8
54346: PPUSH
54347: LD_INT 1
54349: PPUSH
54350: LD_INT 4
54352: PPUSH
54353: CALL_OW 273
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_VAR 0 7
54366: PPUSH
54367: LD_INT 2
54369: PPUSH
54370: LD_INT 4
54372: PPUSH
54373: CALL_OW 272
54377: PUSH
54378: LD_VAR 0 8
54382: PPUSH
54383: LD_INT 2
54385: PPUSH
54386: LD_INT 4
54388: PPUSH
54389: CALL_OW 273
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_VAR 0 7
54402: PPUSH
54403: LD_INT 3
54405: PPUSH
54406: LD_INT 4
54408: PPUSH
54409: CALL_OW 272
54413: PUSH
54414: LD_VAR 0 8
54418: PPUSH
54419: LD_INT 3
54421: PPUSH
54422: LD_INT 4
54424: PPUSH
54425: CALL_OW 273
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_VAR 0 7
54438: PPUSH
54439: LD_INT 4
54441: PPUSH
54442: LD_INT 4
54444: PPUSH
54445: CALL_OW 272
54449: PUSH
54450: LD_VAR 0 8
54454: PPUSH
54455: LD_INT 4
54457: PPUSH
54458: LD_INT 4
54460: PPUSH
54461: CALL_OW 273
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_VAR 0 7
54474: PPUSH
54475: LD_INT 5
54477: PPUSH
54478: LD_INT 4
54480: PPUSH
54481: CALL_OW 272
54485: PUSH
54486: LD_VAR 0 8
54490: PPUSH
54491: LD_INT 5
54493: PPUSH
54494: LD_INT 4
54496: PPUSH
54497: CALL_OW 273
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: ST_TO_ADDR
// for i = tmp downto 1 do
54514: LD_ADDR_VAR 0 4
54518: PUSH
54519: DOUBLE
54520: LD_VAR 0 6
54524: INC
54525: ST_TO_ADDR
54526: LD_INT 1
54528: PUSH
54529: FOR_DOWNTO
54530: IFFALSE 54633
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54532: LD_VAR 0 6
54536: PUSH
54537: LD_VAR 0 4
54541: ARRAY
54542: PUSH
54543: LD_INT 1
54545: ARRAY
54546: PPUSH
54547: LD_VAR 0 6
54551: PUSH
54552: LD_VAR 0 4
54556: ARRAY
54557: PUSH
54558: LD_INT 2
54560: ARRAY
54561: PPUSH
54562: CALL_OW 488
54566: NOT
54567: IFTRUE 54609
54569: PUSH
54570: LD_VAR 0 6
54574: PUSH
54575: LD_VAR 0 4
54579: ARRAY
54580: PUSH
54581: LD_INT 1
54583: ARRAY
54584: PPUSH
54585: LD_VAR 0 6
54589: PUSH
54590: LD_VAR 0 4
54594: ARRAY
54595: PUSH
54596: LD_INT 2
54598: ARRAY
54599: PPUSH
54600: CALL_OW 428
54604: PUSH
54605: LD_INT 0
54607: NONEQUAL
54608: OR
54609: IFFALSE 54631
// tmp := Delete ( tmp , i ) ;
54611: LD_ADDR_VAR 0 6
54615: PUSH
54616: LD_VAR 0 6
54620: PPUSH
54621: LD_VAR 0 4
54625: PPUSH
54626: CALL_OW 3
54630: ST_TO_ADDR
54631: GO 54529
54633: POP
54634: POP
// j := GetClosestHex ( unit , tmp ) ;
54635: LD_ADDR_VAR 0 5
54639: PUSH
54640: LD_VAR 0 1
54644: PPUSH
54645: LD_VAR 0 6
54649: PPUSH
54650: CALL 53927 0 2
54654: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54655: LD_VAR 0 1
54659: PPUSH
54660: LD_VAR 0 5
54664: PUSH
54665: LD_INT 1
54667: ARRAY
54668: PPUSH
54669: LD_VAR 0 5
54673: PUSH
54674: LD_INT 2
54676: ARRAY
54677: PPUSH
54678: CALL_OW 111
// result := j ;
54682: LD_ADDR_VAR 0 3
54686: PUSH
54687: LD_VAR 0 5
54691: ST_TO_ADDR
// end ;
54692: LD_VAR 0 3
54696: RET
// export function PrepareApemanSoldier ( ) ; begin
54697: LD_INT 0
54699: PPUSH
// uc_nation := 0 ;
54700: LD_ADDR_OWVAR 21
54704: PUSH
54705: LD_INT 0
54707: ST_TO_ADDR
// hc_sex := sex_male ;
54708: LD_ADDR_OWVAR 27
54712: PUSH
54713: LD_INT 1
54715: ST_TO_ADDR
// hc_name :=  ;
54716: LD_ADDR_OWVAR 26
54720: PUSH
54721: LD_STRING 
54723: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
54724: LD_ADDR_OWVAR 28
54728: PUSH
54729: LD_INT 15
54731: ST_TO_ADDR
// hc_gallery :=  ;
54732: LD_ADDR_OWVAR 33
54736: PUSH
54737: LD_STRING 
54739: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54740: LD_ADDR_OWVAR 31
54744: PUSH
54745: LD_INT 0
54747: PPUSH
54748: LD_INT 3
54750: PPUSH
54751: CALL_OW 12
54755: PUSH
54756: LD_INT 0
54758: PPUSH
54759: LD_INT 3
54761: PPUSH
54762: CALL_OW 12
54766: PUSH
54767: LD_INT 0
54769: PUSH
54770: LD_INT 0
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
54779: LD_ADDR_OWVAR 29
54783: PUSH
54784: LD_INT 10
54786: PUSH
54787: LD_INT 12
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: ST_TO_ADDR
// end ;
54794: LD_VAR 0 1
54798: RET
// export function PrepareApemanEngineer ( ) ; begin
54799: LD_INT 0
54801: PPUSH
// uc_nation := 0 ;
54802: LD_ADDR_OWVAR 21
54806: PUSH
54807: LD_INT 0
54809: ST_TO_ADDR
// hc_sex := sex_male ;
54810: LD_ADDR_OWVAR 27
54814: PUSH
54815: LD_INT 1
54817: ST_TO_ADDR
// hc_name :=  ;
54818: LD_ADDR_OWVAR 26
54822: PUSH
54823: LD_STRING 
54825: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
54826: LD_ADDR_OWVAR 28
54830: PUSH
54831: LD_INT 16
54833: ST_TO_ADDR
// hc_gallery :=  ;
54834: LD_ADDR_OWVAR 33
54838: PUSH
54839: LD_STRING 
54841: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54842: LD_ADDR_OWVAR 31
54846: PUSH
54847: LD_INT 0
54849: PPUSH
54850: LD_INT 3
54852: PPUSH
54853: CALL_OW 12
54857: PUSH
54858: LD_INT 0
54860: PPUSH
54861: LD_INT 3
54863: PPUSH
54864: CALL_OW 12
54868: PUSH
54869: LD_INT 0
54871: PUSH
54872: LD_INT 0
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
54881: LD_ADDR_OWVAR 29
54885: PUSH
54886: LD_INT 10
54888: PUSH
54889: LD_INT 12
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: ST_TO_ADDR
// end ;
54896: LD_VAR 0 1
54900: RET
// export function PrepareApeman ( agressivity ) ; begin
54901: LD_INT 0
54903: PPUSH
// uc_side := 0 ;
54904: LD_ADDR_OWVAR 20
54908: PUSH
54909: LD_INT 0
54911: ST_TO_ADDR
// uc_nation := 0 ;
54912: LD_ADDR_OWVAR 21
54916: PUSH
54917: LD_INT 0
54919: ST_TO_ADDR
// hc_sex := sex_male ;
54920: LD_ADDR_OWVAR 27
54924: PUSH
54925: LD_INT 1
54927: ST_TO_ADDR
// hc_class := class_apeman ;
54928: LD_ADDR_OWVAR 28
54932: PUSH
54933: LD_INT 12
54935: ST_TO_ADDR
// hc_gallery :=  ;
54936: LD_ADDR_OWVAR 33
54940: PUSH
54941: LD_STRING 
54943: ST_TO_ADDR
// hc_name :=  ;
54944: LD_ADDR_OWVAR 26
54948: PUSH
54949: LD_STRING 
54951: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
54952: LD_ADDR_OWVAR 29
54956: PUSH
54957: LD_INT 10
54959: PUSH
54960: LD_INT 12
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: ST_TO_ADDR
// if agressivity = 0 then
54967: LD_VAR 0 1
54971: PUSH
54972: LD_INT 0
54974: EQUAL
54975: IFFALSE 54987
// hc_agressivity := 0 else
54977: LD_ADDR_OWVAR 35
54981: PUSH
54982: LD_INT 0
54984: ST_TO_ADDR
54985: GO 55008
// hc_agressivity := rand ( - agressivity , agressivity ) ;
54987: LD_ADDR_OWVAR 35
54991: PUSH
54992: LD_VAR 0 1
54996: NEG
54997: PPUSH
54998: LD_VAR 0 1
55002: PPUSH
55003: CALL_OW 12
55007: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55008: LD_ADDR_OWVAR 31
55012: PUSH
55013: LD_INT 0
55015: PPUSH
55016: LD_INT 3
55018: PPUSH
55019: CALL_OW 12
55023: PUSH
55024: LD_INT 0
55026: PPUSH
55027: LD_INT 3
55029: PPUSH
55030: CALL_OW 12
55034: PUSH
55035: LD_INT 0
55037: PUSH
55038: LD_INT 0
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: ST_TO_ADDR
// end ;
55047: LD_VAR 0 2
55051: RET
// export function PrepareTiger ( agressivity ) ; begin
55052: LD_INT 0
55054: PPUSH
// uc_side := 0 ;
55055: LD_ADDR_OWVAR 20
55059: PUSH
55060: LD_INT 0
55062: ST_TO_ADDR
// uc_nation := 0 ;
55063: LD_ADDR_OWVAR 21
55067: PUSH
55068: LD_INT 0
55070: ST_TO_ADDR
// InitHc ;
55071: CALL_OW 19
// hc_class := class_tiger ;
55075: LD_ADDR_OWVAR 28
55079: PUSH
55080: LD_INT 14
55082: ST_TO_ADDR
// hc_gallery :=  ;
55083: LD_ADDR_OWVAR 33
55087: PUSH
55088: LD_STRING 
55090: ST_TO_ADDR
// hc_name :=  ;
55091: LD_ADDR_OWVAR 26
55095: PUSH
55096: LD_STRING 
55098: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55099: LD_ADDR_OWVAR 35
55103: PUSH
55104: LD_VAR 0 1
55108: NEG
55109: PPUSH
55110: LD_VAR 0 1
55114: PPUSH
55115: CALL_OW 12
55119: ST_TO_ADDR
// end ;
55120: LD_VAR 0 2
55124: RET
// export function PrepareEnchidna ( ) ; begin
55125: LD_INT 0
55127: PPUSH
// uc_side := 0 ;
55128: LD_ADDR_OWVAR 20
55132: PUSH
55133: LD_INT 0
55135: ST_TO_ADDR
// uc_nation := 0 ;
55136: LD_ADDR_OWVAR 21
55140: PUSH
55141: LD_INT 0
55143: ST_TO_ADDR
// InitHc ;
55144: CALL_OW 19
// hc_class := class_baggie ;
55148: LD_ADDR_OWVAR 28
55152: PUSH
55153: LD_INT 13
55155: ST_TO_ADDR
// hc_gallery :=  ;
55156: LD_ADDR_OWVAR 33
55160: PUSH
55161: LD_STRING 
55163: ST_TO_ADDR
// hc_name :=  ;
55164: LD_ADDR_OWVAR 26
55168: PUSH
55169: LD_STRING 
55171: ST_TO_ADDR
// end ;
55172: LD_VAR 0 1
55176: RET
// export function PrepareFrog ( ) ; begin
55177: LD_INT 0
55179: PPUSH
// uc_side := 0 ;
55180: LD_ADDR_OWVAR 20
55184: PUSH
55185: LD_INT 0
55187: ST_TO_ADDR
// uc_nation := 0 ;
55188: LD_ADDR_OWVAR 21
55192: PUSH
55193: LD_INT 0
55195: ST_TO_ADDR
// InitHc ;
55196: CALL_OW 19
// hc_class := class_frog ;
55200: LD_ADDR_OWVAR 28
55204: PUSH
55205: LD_INT 19
55207: ST_TO_ADDR
// hc_gallery :=  ;
55208: LD_ADDR_OWVAR 33
55212: PUSH
55213: LD_STRING 
55215: ST_TO_ADDR
// hc_name :=  ;
55216: LD_ADDR_OWVAR 26
55220: PUSH
55221: LD_STRING 
55223: ST_TO_ADDR
// end ;
55224: LD_VAR 0 1
55228: RET
// export function PrepareFish ( ) ; begin
55229: LD_INT 0
55231: PPUSH
// uc_side := 0 ;
55232: LD_ADDR_OWVAR 20
55236: PUSH
55237: LD_INT 0
55239: ST_TO_ADDR
// uc_nation := 0 ;
55240: LD_ADDR_OWVAR 21
55244: PUSH
55245: LD_INT 0
55247: ST_TO_ADDR
// InitHc ;
55248: CALL_OW 19
// hc_class := class_fish ;
55252: LD_ADDR_OWVAR 28
55256: PUSH
55257: LD_INT 20
55259: ST_TO_ADDR
// hc_gallery :=  ;
55260: LD_ADDR_OWVAR 33
55264: PUSH
55265: LD_STRING 
55267: ST_TO_ADDR
// hc_name :=  ;
55268: LD_ADDR_OWVAR 26
55272: PUSH
55273: LD_STRING 
55275: ST_TO_ADDR
// end ;
55276: LD_VAR 0 1
55280: RET
// export function PrepareBird ( ) ; begin
55281: LD_INT 0
55283: PPUSH
// uc_side := 0 ;
55284: LD_ADDR_OWVAR 20
55288: PUSH
55289: LD_INT 0
55291: ST_TO_ADDR
// uc_nation := 0 ;
55292: LD_ADDR_OWVAR 21
55296: PUSH
55297: LD_INT 0
55299: ST_TO_ADDR
// InitHc ;
55300: CALL_OW 19
// hc_class := class_phororhacos ;
55304: LD_ADDR_OWVAR 28
55308: PUSH
55309: LD_INT 18
55311: ST_TO_ADDR
// hc_gallery :=  ;
55312: LD_ADDR_OWVAR 33
55316: PUSH
55317: LD_STRING 
55319: ST_TO_ADDR
// hc_name :=  ;
55320: LD_ADDR_OWVAR 26
55324: PUSH
55325: LD_STRING 
55327: ST_TO_ADDR
// end ;
55328: LD_VAR 0 1
55332: RET
// export function PrepareHorse ( ) ; begin
55333: LD_INT 0
55335: PPUSH
// uc_side := 0 ;
55336: LD_ADDR_OWVAR 20
55340: PUSH
55341: LD_INT 0
55343: ST_TO_ADDR
// uc_nation := 0 ;
55344: LD_ADDR_OWVAR 21
55348: PUSH
55349: LD_INT 0
55351: ST_TO_ADDR
// InitHc ;
55352: CALL_OW 19
// hc_class := class_horse ;
55356: LD_ADDR_OWVAR 28
55360: PUSH
55361: LD_INT 21
55363: ST_TO_ADDR
// hc_gallery :=  ;
55364: LD_ADDR_OWVAR 33
55368: PUSH
55369: LD_STRING 
55371: ST_TO_ADDR
// hc_name :=  ;
55372: LD_ADDR_OWVAR 26
55376: PUSH
55377: LD_STRING 
55379: ST_TO_ADDR
// end ;
55380: LD_VAR 0 1
55384: RET
// export function PrepareMastodont ( ) ; begin
55385: LD_INT 0
55387: PPUSH
// uc_side := 0 ;
55388: LD_ADDR_OWVAR 20
55392: PUSH
55393: LD_INT 0
55395: ST_TO_ADDR
// uc_nation := 0 ;
55396: LD_ADDR_OWVAR 21
55400: PUSH
55401: LD_INT 0
55403: ST_TO_ADDR
// vc_chassis := class_mastodont ;
55404: LD_ADDR_OWVAR 37
55408: PUSH
55409: LD_INT 31
55411: ST_TO_ADDR
// vc_control := control_rider ;
55412: LD_ADDR_OWVAR 38
55416: PUSH
55417: LD_INT 4
55419: ST_TO_ADDR
// end ;
55420: LD_VAR 0 1
55424: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55425: LD_INT 0
55427: PPUSH
55428: PPUSH
55429: PPUSH
// uc_side = 0 ;
55430: LD_ADDR_OWVAR 20
55434: PUSH
55435: LD_INT 0
55437: ST_TO_ADDR
// uc_nation = 0 ;
55438: LD_ADDR_OWVAR 21
55442: PUSH
55443: LD_INT 0
55445: ST_TO_ADDR
// InitHc_All ( ) ;
55446: CALL_OW 584
// InitVc ;
55450: CALL_OW 20
// if mastodonts then
55454: LD_VAR 0 6
55458: IFFALSE 55525
// for i = 1 to mastodonts do
55460: LD_ADDR_VAR 0 11
55464: PUSH
55465: DOUBLE
55466: LD_INT 1
55468: DEC
55469: ST_TO_ADDR
55470: LD_VAR 0 6
55474: PUSH
55475: FOR_TO
55476: IFFALSE 55523
// begin vc_chassis := 31 ;
55478: LD_ADDR_OWVAR 37
55482: PUSH
55483: LD_INT 31
55485: ST_TO_ADDR
// vc_control := control_rider ;
55486: LD_ADDR_OWVAR 38
55490: PUSH
55491: LD_INT 4
55493: ST_TO_ADDR
// animal := CreateVehicle ;
55494: LD_ADDR_VAR 0 12
55498: PUSH
55499: CALL_OW 45
55503: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55504: LD_VAR 0 12
55508: PPUSH
55509: LD_VAR 0 8
55513: PPUSH
55514: LD_INT 0
55516: PPUSH
55517: CALL 57667 0 3
// end ;
55521: GO 55475
55523: POP
55524: POP
// if horses then
55525: LD_VAR 0 5
55529: IFFALSE 55596
// for i = 1 to horses do
55531: LD_ADDR_VAR 0 11
55535: PUSH
55536: DOUBLE
55537: LD_INT 1
55539: DEC
55540: ST_TO_ADDR
55541: LD_VAR 0 5
55545: PUSH
55546: FOR_TO
55547: IFFALSE 55594
// begin hc_class := 21 ;
55549: LD_ADDR_OWVAR 28
55553: PUSH
55554: LD_INT 21
55556: ST_TO_ADDR
// hc_gallery :=  ;
55557: LD_ADDR_OWVAR 33
55561: PUSH
55562: LD_STRING 
55564: ST_TO_ADDR
// animal := CreateHuman ;
55565: LD_ADDR_VAR 0 12
55569: PUSH
55570: CALL_OW 44
55574: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55575: LD_VAR 0 12
55579: PPUSH
55580: LD_VAR 0 8
55584: PPUSH
55585: LD_INT 0
55587: PPUSH
55588: CALL 57667 0 3
// end ;
55592: GO 55546
55594: POP
55595: POP
// if birds then
55596: LD_VAR 0 1
55600: IFFALSE 55667
// for i = 1 to birds do
55602: LD_ADDR_VAR 0 11
55606: PUSH
55607: DOUBLE
55608: LD_INT 1
55610: DEC
55611: ST_TO_ADDR
55612: LD_VAR 0 1
55616: PUSH
55617: FOR_TO
55618: IFFALSE 55665
// begin hc_class := 18 ;
55620: LD_ADDR_OWVAR 28
55624: PUSH
55625: LD_INT 18
55627: ST_TO_ADDR
// hc_gallery =  ;
55628: LD_ADDR_OWVAR 33
55632: PUSH
55633: LD_STRING 
55635: ST_TO_ADDR
// animal := CreateHuman ;
55636: LD_ADDR_VAR 0 12
55640: PUSH
55641: CALL_OW 44
55645: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55646: LD_VAR 0 12
55650: PPUSH
55651: LD_VAR 0 8
55655: PPUSH
55656: LD_INT 0
55658: PPUSH
55659: CALL 57667 0 3
// end ;
55663: GO 55617
55665: POP
55666: POP
// if tigers then
55667: LD_VAR 0 2
55671: IFFALSE 55755
// for i = 1 to tigers do
55673: LD_ADDR_VAR 0 11
55677: PUSH
55678: DOUBLE
55679: LD_INT 1
55681: DEC
55682: ST_TO_ADDR
55683: LD_VAR 0 2
55687: PUSH
55688: FOR_TO
55689: IFFALSE 55753
// begin hc_class = class_tiger ;
55691: LD_ADDR_OWVAR 28
55695: PUSH
55696: LD_INT 14
55698: ST_TO_ADDR
// hc_gallery =  ;
55699: LD_ADDR_OWVAR 33
55703: PUSH
55704: LD_STRING 
55706: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55707: LD_ADDR_OWVAR 35
55711: PUSH
55712: LD_INT 7
55714: NEG
55715: PPUSH
55716: LD_INT 7
55718: PPUSH
55719: CALL_OW 12
55723: ST_TO_ADDR
// animal := CreateHuman ;
55724: LD_ADDR_VAR 0 12
55728: PUSH
55729: CALL_OW 44
55733: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55734: LD_VAR 0 12
55738: PPUSH
55739: LD_VAR 0 8
55743: PPUSH
55744: LD_INT 0
55746: PPUSH
55747: CALL 57667 0 3
// end ;
55751: GO 55688
55753: POP
55754: POP
// if apemans then
55755: LD_VAR 0 3
55759: IFFALSE 55882
// for i = 1 to apemans do
55761: LD_ADDR_VAR 0 11
55765: PUSH
55766: DOUBLE
55767: LD_INT 1
55769: DEC
55770: ST_TO_ADDR
55771: LD_VAR 0 3
55775: PUSH
55776: FOR_TO
55777: IFFALSE 55880
// begin hc_class = class_apeman ;
55779: LD_ADDR_OWVAR 28
55783: PUSH
55784: LD_INT 12
55786: ST_TO_ADDR
// hc_gallery =  ;
55787: LD_ADDR_OWVAR 33
55791: PUSH
55792: LD_STRING 
55794: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
55795: LD_ADDR_OWVAR 35
55799: PUSH
55800: LD_INT 2
55802: NEG
55803: PPUSH
55804: LD_INT 2
55806: PPUSH
55807: CALL_OW 12
55811: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
55812: LD_ADDR_OWVAR 31
55816: PUSH
55817: LD_INT 1
55819: PPUSH
55820: LD_INT 3
55822: PPUSH
55823: CALL_OW 12
55827: PUSH
55828: LD_INT 1
55830: PPUSH
55831: LD_INT 3
55833: PPUSH
55834: CALL_OW 12
55838: PUSH
55839: LD_INT 0
55841: PUSH
55842: LD_INT 0
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: ST_TO_ADDR
// animal := CreateHuman ;
55851: LD_ADDR_VAR 0 12
55855: PUSH
55856: CALL_OW 44
55860: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55861: LD_VAR 0 12
55865: PPUSH
55866: LD_VAR 0 8
55870: PPUSH
55871: LD_INT 0
55873: PPUSH
55874: CALL 57667 0 3
// end ;
55878: GO 55776
55880: POP
55881: POP
// if enchidnas then
55882: LD_VAR 0 4
55886: IFFALSE 55953
// for i = 1 to enchidnas do
55888: LD_ADDR_VAR 0 11
55892: PUSH
55893: DOUBLE
55894: LD_INT 1
55896: DEC
55897: ST_TO_ADDR
55898: LD_VAR 0 4
55902: PUSH
55903: FOR_TO
55904: IFFALSE 55951
// begin hc_class = 13 ;
55906: LD_ADDR_OWVAR 28
55910: PUSH
55911: LD_INT 13
55913: ST_TO_ADDR
// hc_gallery =  ;
55914: LD_ADDR_OWVAR 33
55918: PUSH
55919: LD_STRING 
55921: ST_TO_ADDR
// animal := CreateHuman ;
55922: LD_ADDR_VAR 0 12
55926: PUSH
55927: CALL_OW 44
55931: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55932: LD_VAR 0 12
55936: PPUSH
55937: LD_VAR 0 8
55941: PPUSH
55942: LD_INT 0
55944: PPUSH
55945: CALL 57667 0 3
// end ;
55949: GO 55903
55951: POP
55952: POP
// if fishes then
55953: LD_VAR 0 7
55957: IFFALSE 56024
// for i = 1 to fishes do
55959: LD_ADDR_VAR 0 11
55963: PUSH
55964: DOUBLE
55965: LD_INT 1
55967: DEC
55968: ST_TO_ADDR
55969: LD_VAR 0 7
55973: PUSH
55974: FOR_TO
55975: IFFALSE 56022
// begin hc_class = 20 ;
55977: LD_ADDR_OWVAR 28
55981: PUSH
55982: LD_INT 20
55984: ST_TO_ADDR
// hc_gallery =  ;
55985: LD_ADDR_OWVAR 33
55989: PUSH
55990: LD_STRING 
55992: ST_TO_ADDR
// animal := CreateHuman ;
55993: LD_ADDR_VAR 0 12
55997: PUSH
55998: CALL_OW 44
56002: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56003: LD_VAR 0 12
56007: PPUSH
56008: LD_VAR 0 9
56012: PPUSH
56013: LD_INT 0
56015: PPUSH
56016: CALL 57667 0 3
// end ;
56020: GO 55974
56022: POP
56023: POP
// end ;
56024: LD_VAR 0 10
56028: RET
// export function WantHeal ( sci , unit ) ; begin
56029: LD_INT 0
56031: PPUSH
// if GetTaskList ( sci ) > 0 then
56032: LD_VAR 0 1
56036: PPUSH
56037: CALL_OW 437
56041: PUSH
56042: LD_INT 0
56044: GREATER
56045: IFFALSE 56117
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56047: LD_VAR 0 1
56051: PPUSH
56052: CALL_OW 437
56056: PUSH
56057: LD_INT 1
56059: ARRAY
56060: PUSH
56061: LD_INT 1
56063: ARRAY
56064: PUSH
56065: LD_STRING l
56067: EQUAL
56068: IFFALSE 56095
56070: PUSH
56071: LD_VAR 0 1
56075: PPUSH
56076: CALL_OW 437
56080: PUSH
56081: LD_INT 1
56083: ARRAY
56084: PUSH
56085: LD_INT 4
56087: ARRAY
56088: PUSH
56089: LD_VAR 0 2
56093: EQUAL
56094: AND
56095: IFFALSE 56107
// result := true else
56097: LD_ADDR_VAR 0 3
56101: PUSH
56102: LD_INT 1
56104: ST_TO_ADDR
56105: GO 56115
// result := false ;
56107: LD_ADDR_VAR 0 3
56111: PUSH
56112: LD_INT 0
56114: ST_TO_ADDR
// end else
56115: GO 56125
// result := false ;
56117: LD_ADDR_VAR 0 3
56121: PUSH
56122: LD_INT 0
56124: ST_TO_ADDR
// end ;
56125: LD_VAR 0 3
56129: RET
// export function HealTarget ( sci ) ; begin
56130: LD_INT 0
56132: PPUSH
// if not sci then
56133: LD_VAR 0 1
56137: NOT
56138: IFFALSE 56142
// exit ;
56140: GO 56207
// result := 0 ;
56142: LD_ADDR_VAR 0 2
56146: PUSH
56147: LD_INT 0
56149: ST_TO_ADDR
// if GetTaskList ( sci ) then
56150: LD_VAR 0 1
56154: PPUSH
56155: CALL_OW 437
56159: IFFALSE 56207
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56161: LD_VAR 0 1
56165: PPUSH
56166: CALL_OW 437
56170: PUSH
56171: LD_INT 1
56173: ARRAY
56174: PUSH
56175: LD_INT 1
56177: ARRAY
56178: PUSH
56179: LD_STRING l
56181: EQUAL
56182: IFFALSE 56207
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56184: LD_ADDR_VAR 0 2
56188: PUSH
56189: LD_VAR 0 1
56193: PPUSH
56194: CALL_OW 437
56198: PUSH
56199: LD_INT 1
56201: ARRAY
56202: PUSH
56203: LD_INT 4
56205: ARRAY
56206: ST_TO_ADDR
// end ;
56207: LD_VAR 0 2
56211: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56212: LD_INT 0
56214: PPUSH
56215: PPUSH
56216: PPUSH
56217: PPUSH
// if not base_units then
56218: LD_VAR 0 1
56222: NOT
56223: IFFALSE 56227
// exit ;
56225: GO 56314
// result := false ;
56227: LD_ADDR_VAR 0 2
56231: PUSH
56232: LD_INT 0
56234: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56235: LD_ADDR_VAR 0 5
56239: PUSH
56240: LD_VAR 0 1
56244: PPUSH
56245: LD_INT 21
56247: PUSH
56248: LD_INT 3
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PPUSH
56255: CALL_OW 72
56259: ST_TO_ADDR
// if not tmp then
56260: LD_VAR 0 5
56264: NOT
56265: IFFALSE 56269
// exit ;
56267: GO 56314
// for i in tmp do
56269: LD_ADDR_VAR 0 3
56273: PUSH
56274: LD_VAR 0 5
56278: PUSH
56279: FOR_IN
56280: IFFALSE 56312
// begin result := EnemyInRange ( i , 22 ) ;
56282: LD_ADDR_VAR 0 2
56286: PUSH
56287: LD_VAR 0 3
56291: PPUSH
56292: LD_INT 22
56294: PPUSH
56295: CALL 53729 0 2
56299: ST_TO_ADDR
// if result then
56300: LD_VAR 0 2
56304: IFFALSE 56310
// exit ;
56306: POP
56307: POP
56308: GO 56314
// end ;
56310: GO 56279
56312: POP
56313: POP
// end ;
56314: LD_VAR 0 2
56318: RET
// export function FilterByTag ( units , tag ) ; begin
56319: LD_INT 0
56321: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
56322: LD_ADDR_VAR 0 3
56326: PUSH
56327: LD_VAR 0 1
56331: PPUSH
56332: LD_INT 120
56334: PUSH
56335: LD_VAR 0 2
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PPUSH
56344: CALL_OW 72
56348: ST_TO_ADDR
// end ;
56349: LD_VAR 0 3
56353: RET
// export function IsDriver ( un ) ; begin
56354: LD_INT 0
56356: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56357: LD_ADDR_VAR 0 2
56361: PUSH
56362: LD_VAR 0 1
56366: PUSH
56367: LD_INT 55
56369: PUSH
56370: EMPTY
56371: LIST
56372: PPUSH
56373: CALL_OW 69
56377: IN
56378: ST_TO_ADDR
// end ;
56379: LD_VAR 0 2
56383: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56384: LD_INT 0
56386: PPUSH
56387: PPUSH
// list := [ ] ;
56388: LD_ADDR_VAR 0 5
56392: PUSH
56393: EMPTY
56394: ST_TO_ADDR
// case d of 0 :
56395: LD_VAR 0 3
56399: PUSH
56400: LD_INT 0
56402: DOUBLE
56403: EQUAL
56404: IFTRUE 56408
56406: GO 56541
56408: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56409: LD_ADDR_VAR 0 5
56413: PUSH
56414: LD_VAR 0 1
56418: PUSH
56419: LD_INT 4
56421: MINUS
56422: PUSH
56423: LD_VAR 0 2
56427: PUSH
56428: LD_INT 4
56430: MINUS
56431: PUSH
56432: LD_INT 2
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: LIST
56439: PUSH
56440: LD_VAR 0 1
56444: PUSH
56445: LD_INT 3
56447: MINUS
56448: PUSH
56449: LD_VAR 0 2
56453: PUSH
56454: LD_INT 1
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: LIST
56461: PUSH
56462: LD_VAR 0 1
56466: PUSH
56467: LD_INT 4
56469: PLUS
56470: PUSH
56471: LD_VAR 0 2
56475: PUSH
56476: LD_INT 4
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: LIST
56483: PUSH
56484: LD_VAR 0 1
56488: PUSH
56489: LD_INT 3
56491: PLUS
56492: PUSH
56493: LD_VAR 0 2
56497: PUSH
56498: LD_INT 3
56500: PLUS
56501: PUSH
56502: LD_INT 5
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: LIST
56509: PUSH
56510: LD_VAR 0 1
56514: PUSH
56515: LD_VAR 0 2
56519: PUSH
56520: LD_INT 4
56522: PLUS
56523: PUSH
56524: LD_INT 0
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: LIST
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: ST_TO_ADDR
// end ; 1 :
56539: GO 57239
56541: LD_INT 1
56543: DOUBLE
56544: EQUAL
56545: IFTRUE 56549
56547: GO 56682
56549: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56550: LD_ADDR_VAR 0 5
56554: PUSH
56555: LD_VAR 0 1
56559: PUSH
56560: LD_VAR 0 2
56564: PUSH
56565: LD_INT 4
56567: MINUS
56568: PUSH
56569: LD_INT 3
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: LIST
56576: PUSH
56577: LD_VAR 0 1
56581: PUSH
56582: LD_INT 3
56584: MINUS
56585: PUSH
56586: LD_VAR 0 2
56590: PUSH
56591: LD_INT 3
56593: MINUS
56594: PUSH
56595: LD_INT 2
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: LIST
56602: PUSH
56603: LD_VAR 0 1
56607: PUSH
56608: LD_INT 4
56610: MINUS
56611: PUSH
56612: LD_VAR 0 2
56616: PUSH
56617: LD_INT 1
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: LIST
56624: PUSH
56625: LD_VAR 0 1
56629: PUSH
56630: LD_VAR 0 2
56634: PUSH
56635: LD_INT 3
56637: PLUS
56638: PUSH
56639: LD_INT 0
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: LIST
56646: PUSH
56647: LD_VAR 0 1
56651: PUSH
56652: LD_INT 4
56654: PLUS
56655: PUSH
56656: LD_VAR 0 2
56660: PUSH
56661: LD_INT 4
56663: PLUS
56664: PUSH
56665: LD_INT 5
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: LIST
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: ST_TO_ADDR
// end ; 2 :
56680: GO 57239
56682: LD_INT 2
56684: DOUBLE
56685: EQUAL
56686: IFTRUE 56690
56688: GO 56819
56690: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56691: LD_ADDR_VAR 0 5
56695: PUSH
56696: LD_VAR 0 1
56700: PUSH
56701: LD_VAR 0 2
56705: PUSH
56706: LD_INT 3
56708: MINUS
56709: PUSH
56710: LD_INT 3
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: LIST
56717: PUSH
56718: LD_VAR 0 1
56722: PUSH
56723: LD_INT 4
56725: PLUS
56726: PUSH
56727: LD_VAR 0 2
56731: PUSH
56732: LD_INT 4
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: LIST
56739: PUSH
56740: LD_VAR 0 1
56744: PUSH
56745: LD_VAR 0 2
56749: PUSH
56750: LD_INT 4
56752: PLUS
56753: PUSH
56754: LD_INT 0
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: LIST
56761: PUSH
56762: LD_VAR 0 1
56766: PUSH
56767: LD_INT 3
56769: MINUS
56770: PUSH
56771: LD_VAR 0 2
56775: PUSH
56776: LD_INT 1
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: LIST
56783: PUSH
56784: LD_VAR 0 1
56788: PUSH
56789: LD_INT 4
56791: MINUS
56792: PUSH
56793: LD_VAR 0 2
56797: PUSH
56798: LD_INT 4
56800: MINUS
56801: PUSH
56802: LD_INT 2
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: LIST
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: ST_TO_ADDR
// end ; 3 :
56817: GO 57239
56819: LD_INT 3
56821: DOUBLE
56822: EQUAL
56823: IFTRUE 56827
56825: GO 56960
56827: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56828: LD_ADDR_VAR 0 5
56832: PUSH
56833: LD_VAR 0 1
56837: PUSH
56838: LD_INT 3
56840: PLUS
56841: PUSH
56842: LD_VAR 0 2
56846: PUSH
56847: LD_INT 4
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: LIST
56854: PUSH
56855: LD_VAR 0 1
56859: PUSH
56860: LD_INT 4
56862: PLUS
56863: PUSH
56864: LD_VAR 0 2
56868: PUSH
56869: LD_INT 4
56871: PLUS
56872: PUSH
56873: LD_INT 5
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: LIST
56880: PUSH
56881: LD_VAR 0 1
56885: PUSH
56886: LD_INT 4
56888: MINUS
56889: PUSH
56890: LD_VAR 0 2
56894: PUSH
56895: LD_INT 1
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: LIST
56902: PUSH
56903: LD_VAR 0 1
56907: PUSH
56908: LD_VAR 0 2
56912: PUSH
56913: LD_INT 4
56915: MINUS
56916: PUSH
56917: LD_INT 3
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: LIST
56924: PUSH
56925: LD_VAR 0 1
56929: PUSH
56930: LD_INT 3
56932: MINUS
56933: PUSH
56934: LD_VAR 0 2
56938: PUSH
56939: LD_INT 3
56941: MINUS
56942: PUSH
56943: LD_INT 2
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: LIST
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: ST_TO_ADDR
// end ; 4 :
56958: GO 57239
56960: LD_INT 4
56962: DOUBLE
56963: EQUAL
56964: IFTRUE 56968
56966: GO 57101
56968: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
56969: LD_ADDR_VAR 0 5
56973: PUSH
56974: LD_VAR 0 1
56978: PUSH
56979: LD_VAR 0 2
56983: PUSH
56984: LD_INT 4
56986: PLUS
56987: PUSH
56988: LD_INT 0
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: LIST
56995: PUSH
56996: LD_VAR 0 1
57000: PUSH
57001: LD_INT 3
57003: PLUS
57004: PUSH
57005: LD_VAR 0 2
57009: PUSH
57010: LD_INT 3
57012: PLUS
57013: PUSH
57014: LD_INT 5
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: LIST
57021: PUSH
57022: LD_VAR 0 1
57026: PUSH
57027: LD_INT 4
57029: PLUS
57030: PUSH
57031: LD_VAR 0 2
57035: PUSH
57036: LD_INT 4
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: LIST
57043: PUSH
57044: LD_VAR 0 1
57048: PUSH
57049: LD_VAR 0 2
57053: PUSH
57054: LD_INT 3
57056: MINUS
57057: PUSH
57058: LD_INT 3
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: LIST
57065: PUSH
57066: LD_VAR 0 1
57070: PUSH
57071: LD_INT 4
57073: MINUS
57074: PUSH
57075: LD_VAR 0 2
57079: PUSH
57080: LD_INT 4
57082: MINUS
57083: PUSH
57084: LD_INT 2
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: LIST
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: ST_TO_ADDR
// end ; 5 :
57099: GO 57239
57101: LD_INT 5
57103: DOUBLE
57104: EQUAL
57105: IFTRUE 57109
57107: GO 57238
57109: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57110: LD_ADDR_VAR 0 5
57114: PUSH
57115: LD_VAR 0 1
57119: PUSH
57120: LD_INT 4
57122: MINUS
57123: PUSH
57124: LD_VAR 0 2
57128: PUSH
57129: LD_INT 1
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: LIST
57136: PUSH
57137: LD_VAR 0 1
57141: PUSH
57142: LD_VAR 0 2
57146: PUSH
57147: LD_INT 4
57149: MINUS
57150: PUSH
57151: LD_INT 3
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: LIST
57158: PUSH
57159: LD_VAR 0 1
57163: PUSH
57164: LD_INT 4
57166: PLUS
57167: PUSH
57168: LD_VAR 0 2
57172: PUSH
57173: LD_INT 4
57175: PLUS
57176: PUSH
57177: LD_INT 5
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: LIST
57184: PUSH
57185: LD_VAR 0 1
57189: PUSH
57190: LD_INT 3
57192: PLUS
57193: PUSH
57194: LD_VAR 0 2
57198: PUSH
57199: LD_INT 4
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: LIST
57206: PUSH
57207: LD_VAR 0 1
57211: PUSH
57212: LD_VAR 0 2
57216: PUSH
57217: LD_INT 3
57219: PLUS
57220: PUSH
57221: LD_INT 0
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: LIST
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: ST_TO_ADDR
// end ; end ;
57236: GO 57239
57238: POP
// result := list ;
57239: LD_ADDR_VAR 0 4
57243: PUSH
57244: LD_VAR 0 5
57248: ST_TO_ADDR
// end ;
57249: LD_VAR 0 4
57253: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57254: LD_INT 0
57256: PPUSH
57257: PPUSH
57258: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57259: LD_VAR 0 1
57263: NOT
57264: IFTRUE 57292
57266: PUSH
57267: LD_VAR 0 2
57271: PUSH
57272: LD_INT 1
57274: PUSH
57275: LD_INT 2
57277: PUSH
57278: LD_INT 3
57280: PUSH
57281: LD_INT 4
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: IN
57290: NOT
57291: OR
57292: IFFALSE 57296
// exit ;
57294: GO 57379
// tmp := [ ] ;
57296: LD_ADDR_VAR 0 5
57300: PUSH
57301: EMPTY
57302: ST_TO_ADDR
// for i in units do
57303: LD_ADDR_VAR 0 4
57307: PUSH
57308: LD_VAR 0 1
57312: PUSH
57313: FOR_IN
57314: IFFALSE 57348
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
57316: LD_ADDR_VAR 0 5
57320: PUSH
57321: LD_VAR 0 5
57325: PPUSH
57326: LD_VAR 0 4
57330: PPUSH
57331: LD_VAR 0 2
57335: PPUSH
57336: CALL_OW 259
57340: PPUSH
57341: CALL 58774 0 2
57345: ST_TO_ADDR
57346: GO 57313
57348: POP
57349: POP
// if not tmp then
57350: LD_VAR 0 5
57354: NOT
57355: IFFALSE 57359
// exit ;
57357: GO 57379
// result := SortListByListDesc ( units , tmp ) ;
57359: LD_ADDR_VAR 0 3
57363: PUSH
57364: LD_VAR 0 1
57368: PPUSH
57369: LD_VAR 0 5
57373: PPUSH
57374: CALL_OW 77
57378: ST_TO_ADDR
// end ;
57379: LD_VAR 0 3
57383: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57384: LD_INT 0
57386: PPUSH
57387: PPUSH
57388: PPUSH
// result := false ;
57389: LD_ADDR_VAR 0 3
57393: PUSH
57394: LD_INT 0
57396: ST_TO_ADDR
// if not building then
57397: LD_VAR 0 2
57401: NOT
57402: IFFALSE 57406
// exit ;
57404: GO 57550
// x := GetX ( building ) ;
57406: LD_ADDR_VAR 0 4
57410: PUSH
57411: LD_VAR 0 2
57415: PPUSH
57416: CALL_OW 250
57420: ST_TO_ADDR
// y := GetY ( building ) ;
57421: LD_ADDR_VAR 0 5
57425: PUSH
57426: LD_VAR 0 2
57430: PPUSH
57431: CALL_OW 251
57435: ST_TO_ADDR
// if not x or not y then
57436: LD_VAR 0 4
57440: NOT
57441: IFTRUE 57450
57443: PUSH
57444: LD_VAR 0 5
57448: NOT
57449: OR
57450: IFFALSE 57454
// exit ;
57452: GO 57550
// if GetTaskList ( unit ) then
57454: LD_VAR 0 1
57458: PPUSH
57459: CALL_OW 437
57463: IFFALSE 57550
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57465: LD_STRING e
57467: PUSH
57468: LD_VAR 0 1
57472: PPUSH
57473: CALL_OW 437
57477: PUSH
57478: LD_INT 1
57480: ARRAY
57481: PUSH
57482: LD_INT 1
57484: ARRAY
57485: EQUAL
57486: IFFALSE 57513
57488: PUSH
57489: LD_VAR 0 4
57493: PUSH
57494: LD_VAR 0 1
57498: PPUSH
57499: CALL_OW 437
57503: PUSH
57504: LD_INT 1
57506: ARRAY
57507: PUSH
57508: LD_INT 2
57510: ARRAY
57511: EQUAL
57512: AND
57513: IFFALSE 57540
57515: PUSH
57516: LD_VAR 0 5
57520: PUSH
57521: LD_VAR 0 1
57525: PPUSH
57526: CALL_OW 437
57530: PUSH
57531: LD_INT 1
57533: ARRAY
57534: PUSH
57535: LD_INT 3
57537: ARRAY
57538: EQUAL
57539: AND
57540: IFFALSE 57550
// result := true end ;
57542: LD_ADDR_VAR 0 3
57546: PUSH
57547: LD_INT 1
57549: ST_TO_ADDR
// end ;
57550: LD_VAR 0 3
57554: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
57555: LD_INT 0
57557: PPUSH
// result := false ;
57558: LD_ADDR_VAR 0 4
57562: PUSH
57563: LD_INT 0
57565: ST_TO_ADDR
// if GetTaskList ( unit ) then
57566: LD_VAR 0 1
57570: PPUSH
57571: CALL_OW 437
57575: IFFALSE 57662
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57577: LD_STRING M
57579: PUSH
57580: LD_VAR 0 1
57584: PPUSH
57585: CALL_OW 437
57589: PUSH
57590: LD_INT 1
57592: ARRAY
57593: PUSH
57594: LD_INT 1
57596: ARRAY
57597: EQUAL
57598: IFFALSE 57625
57600: PUSH
57601: LD_VAR 0 2
57605: PUSH
57606: LD_VAR 0 1
57610: PPUSH
57611: CALL_OW 437
57615: PUSH
57616: LD_INT 1
57618: ARRAY
57619: PUSH
57620: LD_INT 2
57622: ARRAY
57623: EQUAL
57624: AND
57625: IFFALSE 57652
57627: PUSH
57628: LD_VAR 0 3
57632: PUSH
57633: LD_VAR 0 1
57637: PPUSH
57638: CALL_OW 437
57642: PUSH
57643: LD_INT 1
57645: ARRAY
57646: PUSH
57647: LD_INT 3
57649: ARRAY
57650: EQUAL
57651: AND
57652: IFFALSE 57662
// result := true ;
57654: LD_ADDR_VAR 0 4
57658: PUSH
57659: LD_INT 1
57661: ST_TO_ADDR
// end ; end ;
57662: LD_VAR 0 4
57666: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57667: LD_INT 0
57669: PPUSH
57670: PPUSH
57671: PPUSH
57672: PPUSH
// if not unit or not area then
57673: LD_VAR 0 1
57677: NOT
57678: IFTRUE 57687
57680: PUSH
57681: LD_VAR 0 2
57685: NOT
57686: OR
57687: IFFALSE 57691
// exit ;
57689: GO 57867
// tmp := AreaToList ( area , i ) ;
57691: LD_ADDR_VAR 0 6
57695: PUSH
57696: LD_VAR 0 2
57700: PPUSH
57701: LD_VAR 0 5
57705: PPUSH
57706: CALL_OW 517
57710: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57711: LD_ADDR_VAR 0 5
57715: PUSH
57716: DOUBLE
57717: LD_INT 1
57719: DEC
57720: ST_TO_ADDR
57721: LD_VAR 0 6
57725: PUSH
57726: LD_INT 1
57728: ARRAY
57729: PUSH
57730: FOR_TO
57731: IFFALSE 57865
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57733: LD_ADDR_VAR 0 7
57737: PUSH
57738: LD_VAR 0 6
57742: PUSH
57743: LD_INT 1
57745: ARRAY
57746: PUSH
57747: LD_VAR 0 5
57751: ARRAY
57752: PUSH
57753: LD_VAR 0 6
57757: PUSH
57758: LD_INT 2
57760: ARRAY
57761: PUSH
57762: LD_VAR 0 5
57766: ARRAY
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
57772: LD_INT 92
57774: PUSH
57775: LD_VAR 0 7
57779: PUSH
57780: LD_INT 1
57782: ARRAY
57783: PUSH
57784: LD_VAR 0 7
57788: PUSH
57789: LD_INT 2
57791: ARRAY
57792: PUSH
57793: LD_INT 2
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: PPUSH
57802: CALL_OW 69
57806: PUSH
57807: LD_INT 0
57809: EQUAL
57810: IFFALSE 57863
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
57812: LD_VAR 0 1
57816: PPUSH
57817: LD_VAR 0 7
57821: PUSH
57822: LD_INT 1
57824: ARRAY
57825: PPUSH
57826: LD_VAR 0 7
57830: PUSH
57831: LD_INT 2
57833: ARRAY
57834: PPUSH
57835: LD_VAR 0 3
57839: PPUSH
57840: CALL_OW 48
// result := IsPlaced ( unit ) ;
57844: LD_ADDR_VAR 0 4
57848: PUSH
57849: LD_VAR 0 1
57853: PPUSH
57854: CALL_OW 305
57858: ST_TO_ADDR
// exit ;
57859: POP
57860: POP
57861: GO 57867
// end ; end ;
57863: GO 57730
57865: POP
57866: POP
// end ;
57867: LD_VAR 0 4
57871: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57872: LD_INT 0
57874: PPUSH
57875: PPUSH
57876: PPUSH
// if not side or side > 8 then
57877: LD_VAR 0 1
57881: NOT
57882: IFTRUE 57894
57884: PUSH
57885: LD_VAR 0 1
57889: PUSH
57890: LD_INT 8
57892: GREATER
57893: OR
57894: IFFALSE 57898
// exit ;
57896: GO 58085
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57898: LD_ADDR_VAR 0 4
57902: PUSH
57903: LD_INT 22
57905: PUSH
57906: LD_VAR 0 1
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 21
57917: PUSH
57918: LD_INT 3
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PPUSH
57929: CALL_OW 69
57933: ST_TO_ADDR
// if not tmp then
57934: LD_VAR 0 4
57938: NOT
57939: IFFALSE 57943
// exit ;
57941: GO 58085
// enable_addtolog := true ;
57943: LD_ADDR_OWVAR 81
57947: PUSH
57948: LD_INT 1
57950: ST_TO_ADDR
// AddToLog ( [ ) ;
57951: LD_STRING [
57953: PPUSH
57954: CALL_OW 561
// for i in tmp do
57958: LD_ADDR_VAR 0 3
57962: PUSH
57963: LD_VAR 0 4
57967: PUSH
57968: FOR_IN
57969: IFFALSE 58076
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57971: LD_STRING [
57973: PUSH
57974: LD_VAR 0 3
57978: PPUSH
57979: CALL_OW 266
57983: STR
57984: PUSH
57985: LD_STRING , 
57987: STR
57988: PUSH
57989: LD_VAR 0 3
57993: PPUSH
57994: CALL_OW 250
57998: STR
57999: PUSH
58000: LD_STRING , 
58002: STR
58003: PUSH
58004: LD_VAR 0 3
58008: PPUSH
58009: CALL_OW 251
58013: STR
58014: PUSH
58015: LD_STRING , 
58017: STR
58018: PUSH
58019: LD_VAR 0 3
58023: PPUSH
58024: CALL_OW 254
58028: STR
58029: PUSH
58030: LD_STRING , 
58032: STR
58033: PUSH
58034: LD_VAR 0 3
58038: PPUSH
58039: LD_INT 1
58041: PPUSH
58042: CALL_OW 268
58046: STR
58047: PUSH
58048: LD_STRING , 
58050: STR
58051: PUSH
58052: LD_VAR 0 3
58056: PPUSH
58057: LD_INT 2
58059: PPUSH
58060: CALL_OW 268
58064: STR
58065: PUSH
58066: LD_STRING ],
58068: STR
58069: PPUSH
58070: CALL_OW 561
// end ;
58074: GO 57968
58076: POP
58077: POP
// AddToLog ( ]; ) ;
58078: LD_STRING ];
58080: PPUSH
58081: CALL_OW 561
// end ;
58085: LD_VAR 0 2
58089: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58090: LD_INT 0
58092: PPUSH
58093: PPUSH
58094: PPUSH
58095: PPUSH
58096: PPUSH
// if not area or not rate or not max then
58097: LD_VAR 0 1
58101: NOT
58102: IFTRUE 58111
58104: PUSH
58105: LD_VAR 0 2
58109: NOT
58110: OR
58111: IFTRUE 58120
58113: PUSH
58114: LD_VAR 0 4
58118: NOT
58119: OR
58120: IFFALSE 58124
// exit ;
58122: GO 58313
// while 1 do
58124: LD_INT 1
58126: IFFALSE 58313
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58128: LD_ADDR_VAR 0 9
58132: PUSH
58133: LD_VAR 0 1
58137: PPUSH
58138: LD_INT 1
58140: PPUSH
58141: CALL_OW 287
58145: PUSH
58146: LD_INT 10
58148: MUL
58149: ST_TO_ADDR
// r := rate / 10 ;
58150: LD_ADDR_VAR 0 7
58154: PUSH
58155: LD_VAR 0 2
58159: PUSH
58160: LD_INT 10
58162: DIVREAL
58163: ST_TO_ADDR
// time := 1 1$00 ;
58164: LD_ADDR_VAR 0 8
58168: PUSH
58169: LD_INT 2100
58171: ST_TO_ADDR
// if amount < min then
58172: LD_VAR 0 9
58176: PUSH
58177: LD_VAR 0 3
58181: LESS
58182: IFFALSE 58200
// r := r * 2 else
58184: LD_ADDR_VAR 0 7
58188: PUSH
58189: LD_VAR 0 7
58193: PUSH
58194: LD_INT 2
58196: MUL
58197: ST_TO_ADDR
58198: GO 58226
// if amount > max then
58200: LD_VAR 0 9
58204: PUSH
58205: LD_VAR 0 4
58209: GREATER
58210: IFFALSE 58226
// r := r / 2 ;
58212: LD_ADDR_VAR 0 7
58216: PUSH
58217: LD_VAR 0 7
58221: PUSH
58222: LD_INT 2
58224: DIVREAL
58225: ST_TO_ADDR
// time := time / r ;
58226: LD_ADDR_VAR 0 8
58230: PUSH
58231: LD_VAR 0 8
58235: PUSH
58236: LD_VAR 0 7
58240: DIVREAL
58241: ST_TO_ADDR
// if time < 0 then
58242: LD_VAR 0 8
58246: PUSH
58247: LD_INT 0
58249: LESS
58250: IFFALSE 58267
// time := time * - 1 ;
58252: LD_ADDR_VAR 0 8
58256: PUSH
58257: LD_VAR 0 8
58261: PUSH
58262: LD_INT 1
58264: NEG
58265: MUL
58266: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
58267: LD_VAR 0 8
58271: PUSH
58272: LD_INT 35
58274: PPUSH
58275: LD_INT 875
58277: PPUSH
58278: CALL_OW 12
58282: PLUS
58283: PPUSH
58284: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58288: LD_INT 1
58290: PPUSH
58291: LD_INT 5
58293: PPUSH
58294: CALL_OW 12
58298: PPUSH
58299: LD_VAR 0 1
58303: PPUSH
58304: LD_INT 1
58306: PPUSH
58307: CALL_OW 55
// end ;
58311: GO 58124
// end ;
58313: LD_VAR 0 5
58317: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58318: LD_INT 0
58320: PPUSH
58321: PPUSH
58322: PPUSH
58323: PPUSH
58324: PPUSH
58325: PPUSH
58326: PPUSH
58327: PPUSH
// if not turrets or not factories then
58328: LD_VAR 0 1
58332: NOT
58333: IFTRUE 58342
58335: PUSH
58336: LD_VAR 0 2
58340: NOT
58341: OR
58342: IFFALSE 58346
// exit ;
58344: GO 58653
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58346: LD_ADDR_VAR 0 10
58350: PUSH
58351: LD_INT 5
58353: PUSH
58354: LD_INT 6
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 2
58363: PUSH
58364: LD_INT 4
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 3
58373: PUSH
58374: LD_INT 5
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 24
58388: PUSH
58389: LD_INT 25
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 23
58398: PUSH
58399: LD_INT 27
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 42
58412: PUSH
58413: LD_INT 43
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 44
58422: PUSH
58423: LD_INT 46
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 45
58432: PUSH
58433: LD_INT 47
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: LIST
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: LIST
58449: ST_TO_ADDR
// result := [ ] ;
58450: LD_ADDR_VAR 0 3
58454: PUSH
58455: EMPTY
58456: ST_TO_ADDR
// for i in turrets do
58457: LD_ADDR_VAR 0 4
58461: PUSH
58462: LD_VAR 0 1
58466: PUSH
58467: FOR_IN
58468: IFFALSE 58651
// begin nat := GetNation ( i ) ;
58470: LD_ADDR_VAR 0 7
58474: PUSH
58475: LD_VAR 0 4
58479: PPUSH
58480: CALL_OW 248
58484: ST_TO_ADDR
// weapon := 0 ;
58485: LD_ADDR_VAR 0 8
58489: PUSH
58490: LD_INT 0
58492: ST_TO_ADDR
// if not nat then
58493: LD_VAR 0 7
58497: NOT
58498: IFFALSE 58502
// continue ;
58500: GO 58467
// for j in list [ nat ] do
58502: LD_ADDR_VAR 0 5
58506: PUSH
58507: LD_VAR 0 10
58511: PUSH
58512: LD_VAR 0 7
58516: ARRAY
58517: PUSH
58518: FOR_IN
58519: IFFALSE 58560
// if GetBWeapon ( i ) = j [ 1 ] then
58521: LD_VAR 0 4
58525: PPUSH
58526: CALL_OW 269
58530: PUSH
58531: LD_VAR 0 5
58535: PUSH
58536: LD_INT 1
58538: ARRAY
58539: EQUAL
58540: IFFALSE 58558
// begin weapon := j [ 2 ] ;
58542: LD_ADDR_VAR 0 8
58546: PUSH
58547: LD_VAR 0 5
58551: PUSH
58552: LD_INT 2
58554: ARRAY
58555: ST_TO_ADDR
// break ;
58556: GO 58560
// end ;
58558: GO 58518
58560: POP
58561: POP
// if not weapon then
58562: LD_VAR 0 8
58566: NOT
58567: IFFALSE 58571
// continue ;
58569: GO 58467
// for k in factories do
58571: LD_ADDR_VAR 0 6
58575: PUSH
58576: LD_VAR 0 2
58580: PUSH
58581: FOR_IN
58582: IFFALSE 58647
// begin weapons := AvailableWeaponList ( k ) ;
58584: LD_ADDR_VAR 0 9
58588: PUSH
58589: LD_VAR 0 6
58593: PPUSH
58594: CALL_OW 478
58598: ST_TO_ADDR
// if not weapons then
58599: LD_VAR 0 9
58603: NOT
58604: IFFALSE 58608
// continue ;
58606: GO 58581
// if weapon in weapons then
58608: LD_VAR 0 8
58612: PUSH
58613: LD_VAR 0 9
58617: IN
58618: IFFALSE 58645
// begin result := [ i , weapon ] ;
58620: LD_ADDR_VAR 0 3
58624: PUSH
58625: LD_VAR 0 4
58629: PUSH
58630: LD_VAR 0 8
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: ST_TO_ADDR
// exit ;
58639: POP
58640: POP
58641: POP
58642: POP
58643: GO 58653
// end ; end ;
58645: GO 58581
58647: POP
58648: POP
// end ;
58649: GO 58467
58651: POP
58652: POP
// end ;
58653: LD_VAR 0 3
58657: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58658: LD_INT 0
58660: PPUSH
// if not side or side > 8 then
58661: LD_VAR 0 3
58665: NOT
58666: IFTRUE 58678
58668: PUSH
58669: LD_VAR 0 3
58673: PUSH
58674: LD_INT 8
58676: GREATER
58677: OR
58678: IFFALSE 58682
// exit ;
58680: GO 58741
// if not range then
58682: LD_VAR 0 4
58686: NOT
58687: IFFALSE 58698
// range := - 12 ;
58689: LD_ADDR_VAR 0 4
58693: PUSH
58694: LD_INT 12
58696: NEG
58697: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58698: LD_VAR 0 1
58702: PPUSH
58703: LD_VAR 0 2
58707: PPUSH
58708: LD_VAR 0 3
58712: PPUSH
58713: LD_VAR 0 4
58717: PPUSH
58718: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58722: LD_VAR 0 1
58726: PPUSH
58727: LD_VAR 0 2
58731: PPUSH
58732: LD_VAR 0 3
58736: PPUSH
58737: CALL_OW 331
// end ;
58741: LD_VAR 0 5
58745: RET
// export function Video ( mode ) ; begin
58746: LD_INT 0
58748: PPUSH
// ingame_video = mode ;
58749: LD_ADDR_OWVAR 52
58753: PUSH
58754: LD_VAR 0 1
58758: ST_TO_ADDR
// interface_hidden = mode ;
58759: LD_ADDR_OWVAR 54
58763: PUSH
58764: LD_VAR 0 1
58768: ST_TO_ADDR
// end ;
58769: LD_VAR 0 2
58773: RET
// export function Join ( array , element ) ; begin
58774: LD_INT 0
58776: PPUSH
// result := Replace ( array , array + 1 , element ) ;
58777: LD_ADDR_VAR 0 3
58781: PUSH
58782: LD_VAR 0 1
58786: PPUSH
58787: LD_VAR 0 1
58791: PUSH
58792: LD_INT 1
58794: PLUS
58795: PPUSH
58796: LD_VAR 0 2
58800: PPUSH
58801: CALL_OW 1
58805: ST_TO_ADDR
// end ;
58806: LD_VAR 0 3
58810: RET
// export function JoinUnion ( array , element ) ; begin
58811: LD_INT 0
58813: PPUSH
// result := array union element ;
58814: LD_ADDR_VAR 0 3
58818: PUSH
58819: LD_VAR 0 1
58823: PUSH
58824: LD_VAR 0 2
58828: UNION
58829: ST_TO_ADDR
// end ;
58830: LD_VAR 0 3
58834: RET
// export function GetBehemoths ( side ) ; begin
58835: LD_INT 0
58837: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
58838: LD_ADDR_VAR 0 2
58842: PUSH
58843: LD_INT 22
58845: PUSH
58846: LD_VAR 0 1
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 31
58857: PUSH
58858: LD_INT 25
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PPUSH
58869: CALL_OW 69
58873: ST_TO_ADDR
// end ;
58874: LD_VAR 0 2
58878: RET
// export function Shuffle ( array ) ; var i , index ; begin
58879: LD_INT 0
58881: PPUSH
58882: PPUSH
58883: PPUSH
// result := [ ] ;
58884: LD_ADDR_VAR 0 2
58888: PUSH
58889: EMPTY
58890: ST_TO_ADDR
// if not array then
58891: LD_VAR 0 1
58895: NOT
58896: IFFALSE 58900
// exit ;
58898: GO 58999
// Randomize ;
58900: CALL_OW 10
// for i = array downto 1 do
58904: LD_ADDR_VAR 0 3
58908: PUSH
58909: DOUBLE
58910: LD_VAR 0 1
58914: INC
58915: ST_TO_ADDR
58916: LD_INT 1
58918: PUSH
58919: FOR_DOWNTO
58920: IFFALSE 58997
// begin index := rand ( 1 , array ) ;
58922: LD_ADDR_VAR 0 4
58926: PUSH
58927: LD_INT 1
58929: PPUSH
58930: LD_VAR 0 1
58934: PPUSH
58935: CALL_OW 12
58939: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58940: LD_ADDR_VAR 0 2
58944: PUSH
58945: LD_VAR 0 2
58949: PPUSH
58950: LD_VAR 0 2
58954: PUSH
58955: LD_INT 1
58957: PLUS
58958: PPUSH
58959: LD_VAR 0 1
58963: PUSH
58964: LD_VAR 0 4
58968: ARRAY
58969: PPUSH
58970: CALL_OW 2
58974: ST_TO_ADDR
// array := Delete ( array , index ) ;
58975: LD_ADDR_VAR 0 1
58979: PUSH
58980: LD_VAR 0 1
58984: PPUSH
58985: LD_VAR 0 4
58989: PPUSH
58990: CALL_OW 3
58994: ST_TO_ADDR
// end ;
58995: GO 58919
58997: POP
58998: POP
// end ;
58999: LD_VAR 0 2
59003: RET
// export function GetBaseMaterials ( base ) ; begin
59004: LD_INT 0
59006: PPUSH
// result := [ 0 , 0 , 0 ] ;
59007: LD_ADDR_VAR 0 2
59011: PUSH
59012: LD_INT 0
59014: PUSH
59015: LD_INT 0
59017: PUSH
59018: LD_INT 0
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: LIST
59025: ST_TO_ADDR
// if not base then
59026: LD_VAR 0 1
59030: NOT
59031: IFFALSE 59035
// exit ;
59033: GO 59084
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59035: LD_ADDR_VAR 0 2
59039: PUSH
59040: LD_VAR 0 1
59044: PPUSH
59045: LD_INT 1
59047: PPUSH
59048: CALL_OW 275
59052: PUSH
59053: LD_VAR 0 1
59057: PPUSH
59058: LD_INT 2
59060: PPUSH
59061: CALL_OW 275
59065: PUSH
59066: LD_VAR 0 1
59070: PPUSH
59071: LD_INT 3
59073: PPUSH
59074: CALL_OW 275
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: LIST
59083: ST_TO_ADDR
// end ;
59084: LD_VAR 0 2
59088: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59089: LD_INT 0
59091: PPUSH
59092: PPUSH
// result := array ;
59093: LD_ADDR_VAR 0 3
59097: PUSH
59098: LD_VAR 0 1
59102: ST_TO_ADDR
// if size >= result then
59103: LD_VAR 0 2
59107: PUSH
59108: LD_VAR 0 3
59112: GREATEREQUAL
59113: IFFALSE 59117
// exit ;
59115: GO 59167
// if size then
59117: LD_VAR 0 2
59121: IFFALSE 59167
// for i := array downto size do
59123: LD_ADDR_VAR 0 4
59127: PUSH
59128: DOUBLE
59129: LD_VAR 0 1
59133: INC
59134: ST_TO_ADDR
59135: LD_VAR 0 2
59139: PUSH
59140: FOR_DOWNTO
59141: IFFALSE 59165
// result := Delete ( result , result ) ;
59143: LD_ADDR_VAR 0 3
59147: PUSH
59148: LD_VAR 0 3
59152: PPUSH
59153: LD_VAR 0 3
59157: PPUSH
59158: CALL_OW 3
59162: ST_TO_ADDR
59163: GO 59140
59165: POP
59166: POP
// end ;
59167: LD_VAR 0 3
59171: RET
// export function ComExit ( unit ) ; var tmp ; begin
59172: LD_INT 0
59174: PPUSH
59175: PPUSH
// if not IsInUnit ( unit ) then
59176: LD_VAR 0 1
59180: PPUSH
59181: CALL_OW 310
59185: NOT
59186: IFFALSE 59190
// exit ;
59188: GO 59250
// tmp := IsInUnit ( unit ) ;
59190: LD_ADDR_VAR 0 3
59194: PUSH
59195: LD_VAR 0 1
59199: PPUSH
59200: CALL_OW 310
59204: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59205: LD_VAR 0 3
59209: PPUSH
59210: CALL_OW 247
59214: PUSH
59215: LD_INT 2
59217: EQUAL
59218: IFFALSE 59231
// ComExitVehicle ( unit ) else
59220: LD_VAR 0 1
59224: PPUSH
59225: CALL_OW 121
59229: GO 59240
// ComExitBuilding ( unit ) ;
59231: LD_VAR 0 1
59235: PPUSH
59236: CALL_OW 122
// result := tmp ;
59240: LD_ADDR_VAR 0 2
59244: PUSH
59245: LD_VAR 0 3
59249: ST_TO_ADDR
// end ;
59250: LD_VAR 0 2
59254: RET
// export function ComExitAll ( units ) ; var i ; begin
59255: LD_INT 0
59257: PPUSH
59258: PPUSH
// if not units then
59259: LD_VAR 0 1
59263: NOT
59264: IFFALSE 59268
// exit ;
59266: GO 59294
// for i in units do
59268: LD_ADDR_VAR 0 3
59272: PUSH
59273: LD_VAR 0 1
59277: PUSH
59278: FOR_IN
59279: IFFALSE 59292
// ComExit ( i ) ;
59281: LD_VAR 0 3
59285: PPUSH
59286: CALL 59172 0 1
59290: GO 59278
59292: POP
59293: POP
// end ;
59294: LD_VAR 0 2
59298: RET
// export function ResetHc ; begin
59299: LD_INT 0
59301: PPUSH
// InitHc ;
59302: CALL_OW 19
// hc_importance := 0 ;
59306: LD_ADDR_OWVAR 32
59310: PUSH
59311: LD_INT 0
59313: ST_TO_ADDR
// end ;
59314: LD_VAR 0 1
59318: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59319: LD_INT 0
59321: PPUSH
59322: PPUSH
59323: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59324: LD_ADDR_VAR 0 6
59328: PUSH
59329: LD_VAR 0 1
59333: PUSH
59334: LD_VAR 0 3
59338: PLUS
59339: PUSH
59340: LD_INT 2
59342: DIV
59343: ST_TO_ADDR
// if _x < 0 then
59344: LD_VAR 0 6
59348: PUSH
59349: LD_INT 0
59351: LESS
59352: IFFALSE 59369
// _x := _x * - 1 ;
59354: LD_ADDR_VAR 0 6
59358: PUSH
59359: LD_VAR 0 6
59363: PUSH
59364: LD_INT 1
59366: NEG
59367: MUL
59368: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
59369: LD_ADDR_VAR 0 7
59373: PUSH
59374: LD_VAR 0 2
59378: PUSH
59379: LD_VAR 0 4
59383: PLUS
59384: PUSH
59385: LD_INT 2
59387: DIV
59388: ST_TO_ADDR
// if _y < 0 then
59389: LD_VAR 0 7
59393: PUSH
59394: LD_INT 0
59396: LESS
59397: IFFALSE 59414
// _y := _y * - 1 ;
59399: LD_ADDR_VAR 0 7
59403: PUSH
59404: LD_VAR 0 7
59408: PUSH
59409: LD_INT 1
59411: NEG
59412: MUL
59413: ST_TO_ADDR
// result := [ _x , _y ] ;
59414: LD_ADDR_VAR 0 5
59418: PUSH
59419: LD_VAR 0 6
59423: PUSH
59424: LD_VAR 0 7
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: ST_TO_ADDR
// end ;
59433: LD_VAR 0 5
59437: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
59438: LD_INT 0
59440: PPUSH
59441: PPUSH
59442: PPUSH
59443: PPUSH
// task := GetTaskList ( unit ) ;
59444: LD_ADDR_VAR 0 7
59448: PUSH
59449: LD_VAR 0 1
59453: PPUSH
59454: CALL_OW 437
59458: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
59459: LD_VAR 0 7
59463: NOT
59464: IFFALSE 59483
59466: PUSH
59467: LD_VAR 0 1
59471: PPUSH
59472: LD_VAR 0 2
59476: PPUSH
59477: CALL_OW 308
59481: NOT
59482: AND
59483: IFFALSE 59487
// exit ;
59485: GO 59605
// if IsInArea ( unit , area ) then
59487: LD_VAR 0 1
59491: PPUSH
59492: LD_VAR 0 2
59496: PPUSH
59497: CALL_OW 308
59501: IFFALSE 59519
// begin ComMoveToArea ( unit , goAway ) ;
59503: LD_VAR 0 1
59507: PPUSH
59508: LD_VAR 0 3
59512: PPUSH
59513: CALL_OW 113
// exit ;
59517: GO 59605
// end ; if task [ 1 ] [ 1 ] <> M then
59519: LD_VAR 0 7
59523: PUSH
59524: LD_INT 1
59526: ARRAY
59527: PUSH
59528: LD_INT 1
59530: ARRAY
59531: PUSH
59532: LD_STRING M
59534: NONEQUAL
59535: IFFALSE 59539
// exit ;
59537: GO 59605
// x := task [ 1 ] [ 2 ] ;
59539: LD_ADDR_VAR 0 5
59543: PUSH
59544: LD_VAR 0 7
59548: PUSH
59549: LD_INT 1
59551: ARRAY
59552: PUSH
59553: LD_INT 2
59555: ARRAY
59556: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
59557: LD_ADDR_VAR 0 6
59561: PUSH
59562: LD_VAR 0 7
59566: PUSH
59567: LD_INT 1
59569: ARRAY
59570: PUSH
59571: LD_INT 3
59573: ARRAY
59574: ST_TO_ADDR
// if InArea ( x , y , area ) then
59575: LD_VAR 0 5
59579: PPUSH
59580: LD_VAR 0 6
59584: PPUSH
59585: LD_VAR 0 2
59589: PPUSH
59590: CALL_OW 309
59594: IFFALSE 59605
// ComStop ( unit ) ;
59596: LD_VAR 0 1
59600: PPUSH
59601: CALL_OW 141
// end ;
59605: LD_VAR 0 4
59609: RET
// export function Abs ( value ) ; begin
59610: LD_INT 0
59612: PPUSH
// result := value ;
59613: LD_ADDR_VAR 0 2
59617: PUSH
59618: LD_VAR 0 1
59622: ST_TO_ADDR
// if value < 0 then
59623: LD_VAR 0 1
59627: PUSH
59628: LD_INT 0
59630: LESS
59631: IFFALSE 59648
// result := value * - 1 ;
59633: LD_ADDR_VAR 0 2
59637: PUSH
59638: LD_VAR 0 1
59642: PUSH
59643: LD_INT 1
59645: NEG
59646: MUL
59647: ST_TO_ADDR
// end ;
59648: LD_VAR 0 2
59652: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
59653: LD_INT 0
59655: PPUSH
59656: PPUSH
59657: PPUSH
59658: PPUSH
59659: PPUSH
59660: PPUSH
59661: PPUSH
59662: PPUSH
// if not unit or not building then
59663: LD_VAR 0 1
59667: NOT
59668: IFTRUE 59677
59670: PUSH
59671: LD_VAR 0 2
59675: NOT
59676: OR
59677: IFFALSE 59681
// exit ;
59679: GO 59909
// x := GetX ( building ) ;
59681: LD_ADDR_VAR 0 4
59685: PUSH
59686: LD_VAR 0 2
59690: PPUSH
59691: CALL_OW 250
59695: ST_TO_ADDR
// y := GetY ( building ) ;
59696: LD_ADDR_VAR 0 6
59700: PUSH
59701: LD_VAR 0 2
59705: PPUSH
59706: CALL_OW 251
59710: ST_TO_ADDR
// d := GetDir ( building ) ;
59711: LD_ADDR_VAR 0 8
59715: PUSH
59716: LD_VAR 0 2
59720: PPUSH
59721: CALL_OW 254
59725: ST_TO_ADDR
// r := 4 ;
59726: LD_ADDR_VAR 0 9
59730: PUSH
59731: LD_INT 4
59733: ST_TO_ADDR
// for i := 1 to 5 do
59734: LD_ADDR_VAR 0 10
59738: PUSH
59739: DOUBLE
59740: LD_INT 1
59742: DEC
59743: ST_TO_ADDR
59744: LD_INT 5
59746: PUSH
59747: FOR_TO
59748: IFFALSE 59907
// begin _x := ShiftX ( x , d , r + i ) ;
59750: LD_ADDR_VAR 0 5
59754: PUSH
59755: LD_VAR 0 4
59759: PPUSH
59760: LD_VAR 0 8
59764: PPUSH
59765: LD_VAR 0 9
59769: PUSH
59770: LD_VAR 0 10
59774: PLUS
59775: PPUSH
59776: CALL_OW 272
59780: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
59781: LD_ADDR_VAR 0 7
59785: PUSH
59786: LD_VAR 0 6
59790: PPUSH
59791: LD_VAR 0 8
59795: PPUSH
59796: LD_VAR 0 9
59800: PUSH
59801: LD_VAR 0 10
59805: PLUS
59806: PPUSH
59807: CALL_OW 273
59811: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
59812: LD_VAR 0 5
59816: PPUSH
59817: LD_VAR 0 7
59821: PPUSH
59822: CALL_OW 488
59826: IFFALSE 59861
59828: PUSH
59829: LD_VAR 0 5
59833: PPUSH
59834: LD_VAR 0 7
59838: PPUSH
59839: CALL_OW 428
59843: PPUSH
59844: CALL_OW 247
59848: PUSH
59849: LD_INT 3
59851: PUSH
59852: LD_INT 2
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: IN
59859: NOT
59860: AND
59861: IFFALSE 59905
// begin ComMoveXY ( unit , _x , _y ) ;
59863: LD_VAR 0 1
59867: PPUSH
59868: LD_VAR 0 5
59872: PPUSH
59873: LD_VAR 0 7
59877: PPUSH
59878: CALL_OW 111
// result := [ _x , _y ] ;
59882: LD_ADDR_VAR 0 3
59886: PUSH
59887: LD_VAR 0 5
59891: PUSH
59892: LD_VAR 0 7
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: ST_TO_ADDR
// exit ;
59901: POP
59902: POP
59903: GO 59909
// end ; end ;
59905: GO 59747
59907: POP
59908: POP
// end ;
59909: LD_VAR 0 3
59913: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
59914: LD_INT 0
59916: PPUSH
59917: PPUSH
59918: PPUSH
// result := 0 ;
59919: LD_ADDR_VAR 0 3
59923: PUSH
59924: LD_INT 0
59926: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
59927: LD_VAR 0 1
59931: PUSH
59932: LD_INT 0
59934: LESS
59935: IFTRUE 59947
59937: PUSH
59938: LD_VAR 0 1
59942: PUSH
59943: LD_INT 8
59945: GREATER
59946: OR
59947: IFTRUE 59959
59949: PUSH
59950: LD_VAR 0 2
59954: PUSH
59955: LD_INT 0
59957: LESS
59958: OR
59959: IFTRUE 59971
59961: PUSH
59962: LD_VAR 0 2
59966: PUSH
59967: LD_INT 8
59969: GREATER
59970: OR
59971: IFFALSE 59975
// exit ;
59973: GO 60050
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
59975: LD_ADDR_VAR 0 4
59979: PUSH
59980: LD_INT 22
59982: PUSH
59983: LD_VAR 0 2
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PPUSH
59992: CALL_OW 69
59996: PUSH
59997: FOR_IN
59998: IFFALSE 60048
// begin un := UnitShoot ( i ) ;
60000: LD_ADDR_VAR 0 5
60004: PUSH
60005: LD_VAR 0 4
60009: PPUSH
60010: CALL_OW 504
60014: ST_TO_ADDR
// if GetSide ( un ) = side1 then
60015: LD_VAR 0 5
60019: PPUSH
60020: CALL_OW 255
60024: PUSH
60025: LD_VAR 0 1
60029: EQUAL
60030: IFFALSE 60046
// begin result := un ;
60032: LD_ADDR_VAR 0 3
60036: PUSH
60037: LD_VAR 0 5
60041: ST_TO_ADDR
// exit ;
60042: POP
60043: POP
60044: GO 60050
// end ; end ;
60046: GO 59997
60048: POP
60049: POP
// end ;
60050: LD_VAR 0 3
60054: RET
// export function GetCargoBay ( units ) ; begin
60055: LD_INT 0
60057: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
60058: LD_ADDR_VAR 0 2
60062: PUSH
60063: LD_VAR 0 1
60067: PPUSH
60068: LD_INT 2
60070: PUSH
60071: LD_INT 34
60073: PUSH
60074: LD_INT 12
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 34
60083: PUSH
60084: LD_INT 51
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 34
60093: PUSH
60094: LD_INT 32
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 34
60103: PUSH
60104: LD_INT 89
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: PPUSH
60118: CALL_OW 72
60122: ST_TO_ADDR
// end ;
60123: LD_VAR 0 2
60127: RET
// export function Negate ( value ) ; begin
60128: LD_INT 0
60130: PPUSH
// result := not value ;
60131: LD_ADDR_VAR 0 2
60135: PUSH
60136: LD_VAR 0 1
60140: NOT
60141: ST_TO_ADDR
// end ;
60142: LD_VAR 0 2
60146: RET
// export function Inc ( value ) ; begin
60147: LD_INT 0
60149: PPUSH
// result := value + 1 ;
60150: LD_ADDR_VAR 0 2
60154: PUSH
60155: LD_VAR 0 1
60159: PUSH
60160: LD_INT 1
60162: PLUS
60163: ST_TO_ADDR
// end ;
60164: LD_VAR 0 2
60168: RET
// export function Dec ( value ) ; begin
60169: LD_INT 0
60171: PPUSH
// result := value - 1 ;
60172: LD_ADDR_VAR 0 2
60176: PUSH
60177: LD_VAR 0 1
60181: PUSH
60182: LD_INT 1
60184: MINUS
60185: ST_TO_ADDR
// end ;
60186: LD_VAR 0 2
60190: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
60191: LD_INT 0
60193: PPUSH
60194: PPUSH
60195: PPUSH
60196: PPUSH
60197: PPUSH
60198: PPUSH
60199: PPUSH
60200: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
60201: LD_VAR 0 1
60205: PPUSH
60206: LD_VAR 0 2
60210: PPUSH
60211: CALL_OW 488
60215: NOT
60216: IFTRUE 60235
60218: PUSH
60219: LD_VAR 0 3
60223: PPUSH
60224: LD_VAR 0 4
60228: PPUSH
60229: CALL_OW 488
60233: NOT
60234: OR
60235: IFFALSE 60248
// begin result := - 1 ;
60237: LD_ADDR_VAR 0 5
60241: PUSH
60242: LD_INT 1
60244: NEG
60245: ST_TO_ADDR
// exit ;
60246: GO 60483
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
60248: LD_ADDR_VAR 0 12
60252: PUSH
60253: LD_VAR 0 1
60257: PPUSH
60258: LD_VAR 0 2
60262: PPUSH
60263: LD_VAR 0 3
60267: PPUSH
60268: LD_VAR 0 4
60272: PPUSH
60273: CALL 59319 0 4
60277: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
60278: LD_ADDR_VAR 0 11
60282: PUSH
60283: LD_VAR 0 1
60287: PPUSH
60288: LD_VAR 0 2
60292: PPUSH
60293: LD_VAR 0 12
60297: PUSH
60298: LD_INT 1
60300: ARRAY
60301: PPUSH
60302: LD_VAR 0 12
60306: PUSH
60307: LD_INT 2
60309: ARRAY
60310: PPUSH
60311: CALL_OW 298
60315: ST_TO_ADDR
// distance := 9999 ;
60316: LD_ADDR_VAR 0 10
60320: PUSH
60321: LD_INT 9999
60323: ST_TO_ADDR
// for i := 0 to 5 do
60324: LD_ADDR_VAR 0 6
60328: PUSH
60329: DOUBLE
60330: LD_INT 0
60332: DEC
60333: ST_TO_ADDR
60334: LD_INT 5
60336: PUSH
60337: FOR_TO
60338: IFFALSE 60481
// begin _x := ShiftX ( x1 , i , centerDist ) ;
60340: LD_ADDR_VAR 0 7
60344: PUSH
60345: LD_VAR 0 1
60349: PPUSH
60350: LD_VAR 0 6
60354: PPUSH
60355: LD_VAR 0 11
60359: PPUSH
60360: CALL_OW 272
60364: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
60365: LD_ADDR_VAR 0 8
60369: PUSH
60370: LD_VAR 0 2
60374: PPUSH
60375: LD_VAR 0 6
60379: PPUSH
60380: LD_VAR 0 11
60384: PPUSH
60385: CALL_OW 273
60389: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60390: LD_VAR 0 7
60394: PPUSH
60395: LD_VAR 0 8
60399: PPUSH
60400: CALL_OW 488
60404: NOT
60405: IFFALSE 60409
// continue ;
60407: GO 60337
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
60409: LD_ADDR_VAR 0 9
60413: PUSH
60414: LD_VAR 0 12
60418: PUSH
60419: LD_INT 1
60421: ARRAY
60422: PPUSH
60423: LD_VAR 0 12
60427: PUSH
60428: LD_INT 2
60430: ARRAY
60431: PPUSH
60432: LD_VAR 0 7
60436: PPUSH
60437: LD_VAR 0 8
60441: PPUSH
60442: CALL_OW 298
60446: ST_TO_ADDR
// if tmp < distance then
60447: LD_VAR 0 9
60451: PUSH
60452: LD_VAR 0 10
60456: LESS
60457: IFFALSE 60479
// begin result := i ;
60459: LD_ADDR_VAR 0 5
60463: PUSH
60464: LD_VAR 0 6
60468: ST_TO_ADDR
// distance := tmp ;
60469: LD_ADDR_VAR 0 10
60473: PUSH
60474: LD_VAR 0 9
60478: ST_TO_ADDR
// end ; end ;
60479: GO 60337
60481: POP
60482: POP
// end ;
60483: LD_VAR 0 5
60487: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60488: LD_INT 0
60490: PPUSH
60491: PPUSH
// if not driver or not IsInUnit ( driver ) then
60492: LD_VAR 0 1
60496: NOT
60497: IFTRUE 60511
60499: PUSH
60500: LD_VAR 0 1
60504: PPUSH
60505: CALL_OW 310
60509: NOT
60510: OR
60511: IFFALSE 60515
// exit ;
60513: GO 60605
// vehicle := IsInUnit ( driver ) ;
60515: LD_ADDR_VAR 0 3
60519: PUSH
60520: LD_VAR 0 1
60524: PPUSH
60525: CALL_OW 310
60529: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60530: LD_VAR 0 1
60534: PPUSH
60535: LD_STRING \
60537: PUSH
60538: LD_INT 0
60540: PUSH
60541: LD_INT 0
60543: PUSH
60544: LD_INT 0
60546: PUSH
60547: LD_INT 0
60549: PUSH
60550: LD_INT 0
60552: PUSH
60553: LD_INT 0
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: PUSH
60565: LD_STRING E
60567: PUSH
60568: LD_INT 0
60570: PUSH
60571: LD_INT 0
60573: PUSH
60574: LD_VAR 0 3
60578: PUSH
60579: LD_INT 0
60581: PUSH
60582: LD_INT 0
60584: PUSH
60585: LD_INT 0
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PPUSH
60601: CALL_OW 446
// end ;
60605: LD_VAR 0 2
60609: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60610: LD_INT 0
60612: PPUSH
60613: PPUSH
// if not driver or not IsInUnit ( driver ) then
60614: LD_VAR 0 1
60618: NOT
60619: IFTRUE 60633
60621: PUSH
60622: LD_VAR 0 1
60626: PPUSH
60627: CALL_OW 310
60631: NOT
60632: OR
60633: IFFALSE 60637
// exit ;
60635: GO 60727
// vehicle := IsInUnit ( driver ) ;
60637: LD_ADDR_VAR 0 3
60641: PUSH
60642: LD_VAR 0 1
60646: PPUSH
60647: CALL_OW 310
60651: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60652: LD_VAR 0 1
60656: PPUSH
60657: LD_STRING \
60659: PUSH
60660: LD_INT 0
60662: PUSH
60663: LD_INT 0
60665: PUSH
60666: LD_INT 0
60668: PUSH
60669: LD_INT 0
60671: PUSH
60672: LD_INT 0
60674: PUSH
60675: LD_INT 0
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: PUSH
60687: LD_STRING E
60689: PUSH
60690: LD_INT 0
60692: PUSH
60693: LD_INT 0
60695: PUSH
60696: LD_VAR 0 3
60700: PUSH
60701: LD_INT 0
60703: PUSH
60704: LD_INT 0
60706: PUSH
60707: LD_INT 0
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PPUSH
60723: CALL_OW 447
// end ;
60727: LD_VAR 0 2
60731: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
60732: LD_INT 0
60734: PPUSH
60735: PPUSH
60736: PPUSH
// tmp := [ ] ;
60737: LD_ADDR_VAR 0 5
60741: PUSH
60742: EMPTY
60743: ST_TO_ADDR
// for i in units do
60744: LD_ADDR_VAR 0 4
60748: PUSH
60749: LD_VAR 0 1
60753: PUSH
60754: FOR_IN
60755: IFFALSE 60793
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
60757: LD_ADDR_VAR 0 5
60761: PUSH
60762: LD_VAR 0 5
60766: PPUSH
60767: LD_VAR 0 5
60771: PUSH
60772: LD_INT 1
60774: PLUS
60775: PPUSH
60776: LD_VAR 0 4
60780: PPUSH
60781: CALL_OW 256
60785: PPUSH
60786: CALL_OW 2
60790: ST_TO_ADDR
60791: GO 60754
60793: POP
60794: POP
// if not tmp then
60795: LD_VAR 0 5
60799: NOT
60800: IFFALSE 60804
// exit ;
60802: GO 60852
// if asc then
60804: LD_VAR 0 2
60808: IFFALSE 60832
// result := SortListByListAsc ( units , tmp ) else
60810: LD_ADDR_VAR 0 3
60814: PUSH
60815: LD_VAR 0 1
60819: PPUSH
60820: LD_VAR 0 5
60824: PPUSH
60825: CALL_OW 76
60829: ST_TO_ADDR
60830: GO 60852
// result := SortListByListDesc ( units , tmp ) ;
60832: LD_ADDR_VAR 0 3
60836: PUSH
60837: LD_VAR 0 1
60841: PPUSH
60842: LD_VAR 0 5
60846: PPUSH
60847: CALL_OW 77
60851: ST_TO_ADDR
// end ;
60852: LD_VAR 0 3
60856: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
60857: LD_INT 0
60859: PPUSH
60860: PPUSH
// task := GetTaskList ( mech ) ;
60861: LD_ADDR_VAR 0 4
60865: PUSH
60866: LD_VAR 0 1
60870: PPUSH
60871: CALL_OW 437
60875: ST_TO_ADDR
// if not task then
60876: LD_VAR 0 4
60880: NOT
60881: IFFALSE 60885
// exit ;
60883: GO 60929
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
60885: LD_ADDR_VAR 0 3
60889: PUSH
60890: LD_VAR 0 4
60894: PUSH
60895: LD_INT 1
60897: ARRAY
60898: PUSH
60899: LD_INT 1
60901: ARRAY
60902: PUSH
60903: LD_STRING r
60905: EQUAL
60906: IFFALSE 60928
60908: PUSH
60909: LD_VAR 0 4
60913: PUSH
60914: LD_INT 1
60916: ARRAY
60917: PUSH
60918: LD_INT 4
60920: ARRAY
60921: PUSH
60922: LD_VAR 0 2
60926: EQUAL
60927: AND
60928: ST_TO_ADDR
// end ;
60929: LD_VAR 0 3
60933: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
60934: LD_INT 0
60936: PPUSH
// SetDir ( unit , d ) ;
60937: LD_VAR 0 1
60941: PPUSH
60942: LD_VAR 0 4
60946: PPUSH
60947: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
60951: LD_ADDR_VAR 0 6
60955: PUSH
60956: LD_VAR 0 1
60960: PPUSH
60961: LD_VAR 0 2
60965: PPUSH
60966: LD_VAR 0 3
60970: PPUSH
60971: LD_VAR 0 5
60975: PPUSH
60976: CALL_OW 48
60980: ST_TO_ADDR
// end ;
60981: LD_VAR 0 6
60985: RET
// export function ToNaturalNumber ( number ) ; begin
60986: LD_INT 0
60988: PPUSH
// result := number div 1 ;
60989: LD_ADDR_VAR 0 2
60993: PUSH
60994: LD_VAR 0 1
60998: PUSH
60999: LD_INT 1
61001: DIV
61002: ST_TO_ADDR
// if number < 0 then
61003: LD_VAR 0 1
61007: PUSH
61008: LD_INT 0
61010: LESS
61011: IFFALSE 61021
// result := 0 ;
61013: LD_ADDR_VAR 0 2
61017: PUSH
61018: LD_INT 0
61020: ST_TO_ADDR
// end ;
61021: LD_VAR 0 2
61025: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
61026: LD_INT 0
61028: PPUSH
61029: PPUSH
61030: PPUSH
// if not buildings then
61031: LD_VAR 0 1
61035: NOT
61036: IFFALSE 61040
// exit ;
61038: GO 61155
// tmp := [ ] ;
61040: LD_ADDR_VAR 0 5
61044: PUSH
61045: EMPTY
61046: ST_TO_ADDR
// for b in buildings do
61047: LD_ADDR_VAR 0 4
61051: PUSH
61052: LD_VAR 0 1
61056: PUSH
61057: FOR_IN
61058: IFFALSE 61096
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
61060: LD_ADDR_VAR 0 5
61064: PUSH
61065: LD_VAR 0 5
61069: PPUSH
61070: LD_VAR 0 5
61074: PUSH
61075: LD_INT 1
61077: PLUS
61078: PPUSH
61079: LD_VAR 0 4
61083: PPUSH
61084: CALL_OW 266
61088: PPUSH
61089: CALL_OW 1
61093: ST_TO_ADDR
61094: GO 61057
61096: POP
61097: POP
// if not tmp then
61098: LD_VAR 0 5
61102: NOT
61103: IFFALSE 61107
// exit ;
61105: GO 61155
// if asc then
61107: LD_VAR 0 2
61111: IFFALSE 61135
// result := SortListByListAsc ( buildings , tmp ) else
61113: LD_ADDR_VAR 0 3
61117: PUSH
61118: LD_VAR 0 1
61122: PPUSH
61123: LD_VAR 0 5
61127: PPUSH
61128: CALL_OW 76
61132: ST_TO_ADDR
61133: GO 61155
// result := SortListByListDesc ( buildings , tmp ) ;
61135: LD_ADDR_VAR 0 3
61139: PUSH
61140: LD_VAR 0 1
61144: PPUSH
61145: LD_VAR 0 5
61149: PPUSH
61150: CALL_OW 77
61154: ST_TO_ADDR
// end ;
61155: LD_VAR 0 3
61159: RET
// export function SortByClass ( units , class ) ; var un ; begin
61160: LD_INT 0
61162: PPUSH
61163: PPUSH
// if not units or not class then
61164: LD_VAR 0 1
61168: NOT
61169: IFTRUE 61178
61171: PUSH
61172: LD_VAR 0 2
61176: NOT
61177: OR
61178: IFFALSE 61182
// exit ;
61180: GO 61277
// result := [ ] ;
61182: LD_ADDR_VAR 0 3
61186: PUSH
61187: EMPTY
61188: ST_TO_ADDR
// for un in units do
61189: LD_ADDR_VAR 0 4
61193: PUSH
61194: LD_VAR 0 1
61198: PUSH
61199: FOR_IN
61200: IFFALSE 61275
// if GetClass ( un ) = class then
61202: LD_VAR 0 4
61206: PPUSH
61207: CALL_OW 257
61211: PUSH
61212: LD_VAR 0 2
61216: EQUAL
61217: IFFALSE 61244
// result := Insert ( result , 1 , un ) else
61219: LD_ADDR_VAR 0 3
61223: PUSH
61224: LD_VAR 0 3
61228: PPUSH
61229: LD_INT 1
61231: PPUSH
61232: LD_VAR 0 4
61236: PPUSH
61237: CALL_OW 2
61241: ST_TO_ADDR
61242: GO 61273
// result := Replace ( result , result + 1 , un ) ;
61244: LD_ADDR_VAR 0 3
61248: PUSH
61249: LD_VAR 0 3
61253: PPUSH
61254: LD_VAR 0 3
61258: PUSH
61259: LD_INT 1
61261: PLUS
61262: PPUSH
61263: LD_VAR 0 4
61267: PPUSH
61268: CALL_OW 1
61272: ST_TO_ADDR
61273: GO 61199
61275: POP
61276: POP
// end ;
61277: LD_VAR 0 3
61281: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
61282: LD_INT 0
61284: PPUSH
61285: PPUSH
61286: PPUSH
61287: PPUSH
61288: PPUSH
61289: PPUSH
61290: PPUSH
// result := [ ] ;
61291: LD_ADDR_VAR 0 4
61295: PUSH
61296: EMPTY
61297: ST_TO_ADDR
// if x - r < 0 then
61298: LD_VAR 0 1
61302: PUSH
61303: LD_VAR 0 3
61307: MINUS
61308: PUSH
61309: LD_INT 0
61311: LESS
61312: IFFALSE 61324
// min_x := 0 else
61314: LD_ADDR_VAR 0 8
61318: PUSH
61319: LD_INT 0
61321: ST_TO_ADDR
61322: GO 61340
// min_x := x - r ;
61324: LD_ADDR_VAR 0 8
61328: PUSH
61329: LD_VAR 0 1
61333: PUSH
61334: LD_VAR 0 3
61338: MINUS
61339: ST_TO_ADDR
// if y - r < 0 then
61340: LD_VAR 0 2
61344: PUSH
61345: LD_VAR 0 3
61349: MINUS
61350: PUSH
61351: LD_INT 0
61353: LESS
61354: IFFALSE 61366
// min_y := 0 else
61356: LD_ADDR_VAR 0 7
61360: PUSH
61361: LD_INT 0
61363: ST_TO_ADDR
61364: GO 61382
// min_y := y - r ;
61366: LD_ADDR_VAR 0 7
61370: PUSH
61371: LD_VAR 0 2
61375: PUSH
61376: LD_VAR 0 3
61380: MINUS
61381: ST_TO_ADDR
// max_x := x + r ;
61382: LD_ADDR_VAR 0 9
61386: PUSH
61387: LD_VAR 0 1
61391: PUSH
61392: LD_VAR 0 3
61396: PLUS
61397: ST_TO_ADDR
// max_y := y + r ;
61398: LD_ADDR_VAR 0 10
61402: PUSH
61403: LD_VAR 0 2
61407: PUSH
61408: LD_VAR 0 3
61412: PLUS
61413: ST_TO_ADDR
// for _x = min_x to max_x do
61414: LD_ADDR_VAR 0 5
61418: PUSH
61419: DOUBLE
61420: LD_VAR 0 8
61424: DEC
61425: ST_TO_ADDR
61426: LD_VAR 0 9
61430: PUSH
61431: FOR_TO
61432: IFFALSE 61533
// for _y = min_y to max_y do
61434: LD_ADDR_VAR 0 6
61438: PUSH
61439: DOUBLE
61440: LD_VAR 0 7
61444: DEC
61445: ST_TO_ADDR
61446: LD_VAR 0 10
61450: PUSH
61451: FOR_TO
61452: IFFALSE 61529
// begin if not ValidHex ( _x , _y ) then
61454: LD_VAR 0 5
61458: PPUSH
61459: LD_VAR 0 6
61463: PPUSH
61464: CALL_OW 488
61468: NOT
61469: IFFALSE 61473
// continue ;
61471: GO 61451
// if GetResourceTypeXY ( _x , _y ) then
61473: LD_VAR 0 5
61477: PPUSH
61478: LD_VAR 0 6
61482: PPUSH
61483: CALL_OW 283
61487: IFFALSE 61527
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
61489: LD_ADDR_VAR 0 4
61493: PUSH
61494: LD_VAR 0 4
61498: PPUSH
61499: LD_VAR 0 4
61503: PUSH
61504: LD_INT 1
61506: PLUS
61507: PPUSH
61508: LD_VAR 0 5
61512: PUSH
61513: LD_VAR 0 6
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PPUSH
61522: CALL_OW 1
61526: ST_TO_ADDR
// end ;
61527: GO 61451
61529: POP
61530: POP
61531: GO 61431
61533: POP
61534: POP
// end ;
61535: LD_VAR 0 4
61539: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
61540: LD_INT 0
61542: PPUSH
61543: PPUSH
61544: PPUSH
61545: PPUSH
61546: PPUSH
61547: PPUSH
61548: PPUSH
61549: PPUSH
// if not units then
61550: LD_VAR 0 1
61554: NOT
61555: IFFALSE 61559
// exit ;
61557: GO 62091
// result := UnitFilter ( units , [ f_ok ] ) ;
61559: LD_ADDR_VAR 0 3
61563: PUSH
61564: LD_VAR 0 1
61568: PPUSH
61569: LD_INT 50
61571: PUSH
61572: EMPTY
61573: LIST
61574: PPUSH
61575: CALL_OW 72
61579: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
61580: LD_ADDR_VAR 0 8
61584: PUSH
61585: LD_VAR 0 1
61589: PUSH
61590: LD_INT 1
61592: ARRAY
61593: PPUSH
61594: CALL_OW 255
61598: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
61599: LD_ADDR_VAR 0 10
61603: PUSH
61604: LD_INT 29
61606: PUSH
61607: LD_INT 91
61609: PUSH
61610: LD_INT 49
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: LIST
61617: ST_TO_ADDR
// if not result then
61618: LD_VAR 0 3
61622: NOT
61623: IFFALSE 61627
// exit ;
61625: GO 62091
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
61627: LD_ADDR_VAR 0 5
61631: PUSH
61632: LD_INT 81
61634: PUSH
61635: LD_VAR 0 8
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PPUSH
61644: CALL_OW 69
61648: ST_TO_ADDR
// for i in result do
61649: LD_ADDR_VAR 0 4
61653: PUSH
61654: LD_VAR 0 3
61658: PUSH
61659: FOR_IN
61660: IFFALSE 62089
// begin tag := GetTag ( i ) + 1 ;
61662: LD_ADDR_VAR 0 9
61666: PUSH
61667: LD_VAR 0 4
61671: PPUSH
61672: CALL_OW 110
61676: PUSH
61677: LD_INT 1
61679: PLUS
61680: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
61681: LD_ADDR_VAR 0 7
61685: PUSH
61686: LD_VAR 0 4
61690: PPUSH
61691: CALL_OW 250
61695: PPUSH
61696: LD_VAR 0 4
61700: PPUSH
61701: CALL_OW 251
61705: PPUSH
61706: LD_INT 4
61708: PPUSH
61709: CALL 61282 0 3
61713: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
61714: LD_VAR 0 4
61718: PPUSH
61719: CALL_OW 247
61723: PUSH
61724: LD_INT 2
61726: EQUAL
61727: IFFALSE 61739
61729: PUSH
61730: LD_VAR 0 7
61734: PUSH
61735: LD_INT 2
61737: GREATER
61738: AND
61739: IFFALSE 61759
61741: PUSH
61742: LD_VAR 0 4
61746: PPUSH
61747: CALL_OW 264
61751: PUSH
61752: LD_VAR 0 10
61756: IN
61757: NOT
61758: AND
61759: IFFALSE 61798
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
61761: LD_VAR 0 4
61765: PPUSH
61766: LD_VAR 0 7
61770: PUSH
61771: LD_INT 1
61773: ARRAY
61774: PUSH
61775: LD_INT 1
61777: ARRAY
61778: PPUSH
61779: LD_VAR 0 7
61783: PUSH
61784: LD_INT 1
61786: ARRAY
61787: PUSH
61788: LD_INT 2
61790: ARRAY
61791: PPUSH
61792: CALL_OW 116
61796: GO 62087
// if path > tag then
61798: LD_VAR 0 2
61802: PUSH
61803: LD_VAR 0 9
61807: GREATER
61808: IFFALSE 62016
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
61810: LD_ADDR_VAR 0 6
61814: PUSH
61815: LD_VAR 0 5
61819: PPUSH
61820: LD_INT 91
61822: PUSH
61823: LD_VAR 0 4
61827: PUSH
61828: LD_INT 8
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: LIST
61835: PPUSH
61836: CALL_OW 72
61840: ST_TO_ADDR
// if nearEnemy then
61841: LD_VAR 0 6
61845: IFFALSE 61914
// begin if GetWeapon ( i ) = ru_time_lapser then
61847: LD_VAR 0 4
61851: PPUSH
61852: CALL_OW 264
61856: PUSH
61857: LD_INT 49
61859: EQUAL
61860: IFFALSE 61888
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
61862: LD_VAR 0 4
61866: PPUSH
61867: LD_VAR 0 6
61871: PPUSH
61872: LD_VAR 0 4
61876: PPUSH
61877: CALL_OW 74
61881: PPUSH
61882: CALL_OW 112
61886: GO 61912
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
61888: LD_VAR 0 4
61892: PPUSH
61893: LD_VAR 0 6
61897: PPUSH
61898: LD_VAR 0 4
61902: PPUSH
61903: CALL_OW 74
61907: PPUSH
61908: CALL 63172 0 2
// end else
61912: GO 62014
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
61914: LD_VAR 0 4
61918: PPUSH
61919: LD_VAR 0 2
61923: PUSH
61924: LD_VAR 0 9
61928: ARRAY
61929: PUSH
61930: LD_INT 1
61932: ARRAY
61933: PPUSH
61934: LD_VAR 0 2
61938: PUSH
61939: LD_VAR 0 9
61943: ARRAY
61944: PUSH
61945: LD_INT 2
61947: ARRAY
61948: PPUSH
61949: CALL_OW 297
61953: PUSH
61954: LD_INT 6
61956: GREATER
61957: IFFALSE 62000
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
61959: LD_VAR 0 4
61963: PPUSH
61964: LD_VAR 0 2
61968: PUSH
61969: LD_VAR 0 9
61973: ARRAY
61974: PUSH
61975: LD_INT 1
61977: ARRAY
61978: PPUSH
61979: LD_VAR 0 2
61983: PUSH
61984: LD_VAR 0 9
61988: ARRAY
61989: PUSH
61990: LD_INT 2
61992: ARRAY
61993: PPUSH
61994: CALL_OW 114
61998: GO 62014
// SetTag ( i , tag ) ;
62000: LD_VAR 0 4
62004: PPUSH
62005: LD_VAR 0 9
62009: PPUSH
62010: CALL_OW 109
// end else
62014: GO 62087
// if enemy then
62016: LD_VAR 0 5
62020: IFFALSE 62087
// begin if GetWeapon ( i ) = ru_time_lapser then
62022: LD_VAR 0 4
62026: PPUSH
62027: CALL_OW 264
62031: PUSH
62032: LD_INT 49
62034: EQUAL
62035: IFFALSE 62063
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
62037: LD_VAR 0 4
62041: PPUSH
62042: LD_VAR 0 5
62046: PPUSH
62047: LD_VAR 0 4
62051: PPUSH
62052: CALL_OW 74
62056: PPUSH
62057: CALL_OW 112
62061: GO 62087
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
62063: LD_VAR 0 4
62067: PPUSH
62068: LD_VAR 0 5
62072: PPUSH
62073: LD_VAR 0 4
62077: PPUSH
62078: CALL_OW 74
62082: PPUSH
62083: CALL 63172 0 2
// end ; end ;
62087: GO 61659
62089: POP
62090: POP
// end ;
62091: LD_VAR 0 3
62095: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
62096: LD_INT 0
62098: PPUSH
62099: PPUSH
62100: PPUSH
// if not unit or IsInUnit ( unit ) then
62101: LD_VAR 0 1
62105: NOT
62106: IFTRUE 62119
62108: PUSH
62109: LD_VAR 0 1
62113: PPUSH
62114: CALL_OW 310
62118: OR
62119: IFFALSE 62123
// exit ;
62121: GO 62214
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
62123: LD_ADDR_VAR 0 4
62127: PUSH
62128: LD_VAR 0 1
62132: PPUSH
62133: CALL_OW 250
62137: PPUSH
62138: LD_VAR 0 2
62142: PPUSH
62143: LD_INT 1
62145: PPUSH
62146: CALL_OW 272
62150: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
62151: LD_ADDR_VAR 0 5
62155: PUSH
62156: LD_VAR 0 1
62160: PPUSH
62161: CALL_OW 251
62165: PPUSH
62166: LD_VAR 0 2
62170: PPUSH
62171: LD_INT 1
62173: PPUSH
62174: CALL_OW 273
62178: ST_TO_ADDR
// if ValidHex ( x , y ) then
62179: LD_VAR 0 4
62183: PPUSH
62184: LD_VAR 0 5
62188: PPUSH
62189: CALL_OW 488
62193: IFFALSE 62214
// ComTurnXY ( unit , x , y ) ;
62195: LD_VAR 0 1
62199: PPUSH
62200: LD_VAR 0 4
62204: PPUSH
62205: LD_VAR 0 5
62209: PPUSH
62210: CALL_OW 118
// end ;
62214: LD_VAR 0 3
62218: RET
// export function SeeUnits ( side , units ) ; var i ; begin
62219: LD_INT 0
62221: PPUSH
62222: PPUSH
// result := false ;
62223: LD_ADDR_VAR 0 3
62227: PUSH
62228: LD_INT 0
62230: ST_TO_ADDR
// if not units then
62231: LD_VAR 0 2
62235: NOT
62236: IFFALSE 62240
// exit ;
62238: GO 62285
// for i in units do
62240: LD_ADDR_VAR 0 4
62244: PUSH
62245: LD_VAR 0 2
62249: PUSH
62250: FOR_IN
62251: IFFALSE 62283
// if See ( side , i ) then
62253: LD_VAR 0 1
62257: PPUSH
62258: LD_VAR 0 4
62262: PPUSH
62263: CALL_OW 292
62267: IFFALSE 62281
// begin result := true ;
62269: LD_ADDR_VAR 0 3
62273: PUSH
62274: LD_INT 1
62276: ST_TO_ADDR
// exit ;
62277: POP
62278: POP
62279: GO 62285
// end ;
62281: GO 62250
62283: POP
62284: POP
// end ;
62285: LD_VAR 0 3
62289: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
62290: LD_INT 0
62292: PPUSH
62293: PPUSH
62294: PPUSH
62295: PPUSH
// if not unit or not points then
62296: LD_VAR 0 1
62300: NOT
62301: IFTRUE 62310
62303: PUSH
62304: LD_VAR 0 2
62308: NOT
62309: OR
62310: IFFALSE 62314
// exit ;
62312: GO 62404
// dist := 99999 ;
62314: LD_ADDR_VAR 0 5
62318: PUSH
62319: LD_INT 99999
62321: ST_TO_ADDR
// for i in points do
62322: LD_ADDR_VAR 0 4
62326: PUSH
62327: LD_VAR 0 2
62331: PUSH
62332: FOR_IN
62333: IFFALSE 62402
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
62335: LD_ADDR_VAR 0 6
62339: PUSH
62340: LD_VAR 0 1
62344: PPUSH
62345: LD_VAR 0 4
62349: PUSH
62350: LD_INT 1
62352: ARRAY
62353: PPUSH
62354: LD_VAR 0 4
62358: PUSH
62359: LD_INT 2
62361: ARRAY
62362: PPUSH
62363: CALL_OW 297
62367: ST_TO_ADDR
// if tmpDist < dist then
62368: LD_VAR 0 6
62372: PUSH
62373: LD_VAR 0 5
62377: LESS
62378: IFFALSE 62400
// begin result := i ;
62380: LD_ADDR_VAR 0 3
62384: PUSH
62385: LD_VAR 0 4
62389: ST_TO_ADDR
// dist := tmpDist ;
62390: LD_ADDR_VAR 0 5
62394: PUSH
62395: LD_VAR 0 6
62399: ST_TO_ADDR
// end ; end ;
62400: GO 62332
62402: POP
62403: POP
// end ;
62404: LD_VAR 0 3
62408: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
62409: LD_INT 0
62411: PPUSH
// uc_side := side ;
62412: LD_ADDR_OWVAR 20
62416: PUSH
62417: LD_VAR 0 1
62421: ST_TO_ADDR
// uc_nation := 3 ;
62422: LD_ADDR_OWVAR 21
62426: PUSH
62427: LD_INT 3
62429: ST_TO_ADDR
// vc_chassis := 25 ;
62430: LD_ADDR_OWVAR 37
62434: PUSH
62435: LD_INT 25
62437: ST_TO_ADDR
// vc_engine := engine_siberite ;
62438: LD_ADDR_OWVAR 39
62442: PUSH
62443: LD_INT 3
62445: ST_TO_ADDR
// vc_control := control_computer ;
62446: LD_ADDR_OWVAR 38
62450: PUSH
62451: LD_INT 3
62453: ST_TO_ADDR
// vc_weapon := 59 ;
62454: LD_ADDR_OWVAR 40
62458: PUSH
62459: LD_INT 59
62461: ST_TO_ADDR
// result := CreateVehicle ;
62462: LD_ADDR_VAR 0 5
62466: PUSH
62467: CALL_OW 45
62471: ST_TO_ADDR
// SetDir ( result , d ) ;
62472: LD_VAR 0 5
62476: PPUSH
62477: LD_VAR 0 4
62481: PPUSH
62482: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
62486: LD_VAR 0 5
62490: PPUSH
62491: LD_VAR 0 2
62495: PPUSH
62496: LD_VAR 0 3
62500: PPUSH
62501: LD_INT 0
62503: PPUSH
62504: CALL_OW 48
// end ;
62508: LD_VAR 0 5
62512: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
62513: LD_INT 0
62515: PPUSH
62516: PPUSH
62517: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
62518: LD_ADDR_VAR 0 2
62522: PUSH
62523: LD_INT 0
62525: PUSH
62526: LD_INT 0
62528: PUSH
62529: LD_INT 0
62531: PUSH
62532: LD_INT 0
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
62541: LD_VAR 0 1
62545: NOT
62546: IFTRUE 62579
62548: PUSH
62549: LD_VAR 0 1
62553: PPUSH
62554: CALL_OW 264
62558: PUSH
62559: LD_INT 12
62561: PUSH
62562: LD_INT 51
62564: PUSH
62565: LD_INT 32
62567: PUSH
62568: LD_INT 89
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: IN
62577: NOT
62578: OR
62579: IFFALSE 62583
// exit ;
62581: GO 62681
// for i := 1 to 3 do
62583: LD_ADDR_VAR 0 3
62587: PUSH
62588: DOUBLE
62589: LD_INT 1
62591: DEC
62592: ST_TO_ADDR
62593: LD_INT 3
62595: PUSH
62596: FOR_TO
62597: IFFALSE 62679
// begin tmp := GetCargo ( cargo , i ) ;
62599: LD_ADDR_VAR 0 4
62603: PUSH
62604: LD_VAR 0 1
62608: PPUSH
62609: LD_VAR 0 3
62613: PPUSH
62614: CALL_OW 289
62618: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
62619: LD_ADDR_VAR 0 2
62623: PUSH
62624: LD_VAR 0 2
62628: PPUSH
62629: LD_VAR 0 3
62633: PPUSH
62634: LD_VAR 0 4
62638: PPUSH
62639: CALL_OW 1
62643: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
62644: LD_ADDR_VAR 0 2
62648: PUSH
62649: LD_VAR 0 2
62653: PPUSH
62654: LD_INT 4
62656: PPUSH
62657: LD_VAR 0 2
62661: PUSH
62662: LD_INT 4
62664: ARRAY
62665: PUSH
62666: LD_VAR 0 4
62670: PLUS
62671: PPUSH
62672: CALL_OW 1
62676: ST_TO_ADDR
// end ;
62677: GO 62596
62679: POP
62680: POP
// end ;
62681: LD_VAR 0 2
62685: RET
// export function Length ( array ) ; begin
62686: LD_INT 0
62688: PPUSH
// result := array + 0 ;
62689: LD_ADDR_VAR 0 2
62693: PUSH
62694: LD_VAR 0 1
62698: PUSH
62699: LD_INT 0
62701: PLUS
62702: ST_TO_ADDR
// end ;
62703: LD_VAR 0 2
62707: RET
// export function PrepareArray ( array ) ; begin
62708: LD_INT 0
62710: PPUSH
// result := array diff 0 ;
62711: LD_ADDR_VAR 0 2
62715: PUSH
62716: LD_VAR 0 1
62720: PUSH
62721: LD_INT 0
62723: DIFF
62724: ST_TO_ADDR
// if not result [ 1 ] then
62725: LD_VAR 0 2
62729: PUSH
62730: LD_INT 1
62732: ARRAY
62733: NOT
62734: IFFALSE 62754
// result := Delete ( result , 1 ) ;
62736: LD_ADDR_VAR 0 2
62740: PUSH
62741: LD_VAR 0 2
62745: PPUSH
62746: LD_INT 1
62748: PPUSH
62749: CALL_OW 3
62753: ST_TO_ADDR
// end ;
62754: LD_VAR 0 2
62758: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
62759: LD_INT 0
62761: PPUSH
62762: PPUSH
62763: PPUSH
62764: PPUSH
// sibRocketRange := 25 ;
62765: LD_ADDR_VAR 0 6
62769: PUSH
62770: LD_INT 25
62772: ST_TO_ADDR
// result := false ;
62773: LD_ADDR_VAR 0 4
62777: PUSH
62778: LD_INT 0
62780: ST_TO_ADDR
// for i := 0 to 5 do
62781: LD_ADDR_VAR 0 5
62785: PUSH
62786: DOUBLE
62787: LD_INT 0
62789: DEC
62790: ST_TO_ADDR
62791: LD_INT 5
62793: PUSH
62794: FOR_TO
62795: IFFALSE 62862
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
62797: LD_VAR 0 1
62801: PPUSH
62802: LD_VAR 0 5
62806: PPUSH
62807: LD_VAR 0 6
62811: PPUSH
62812: CALL_OW 272
62816: PPUSH
62817: LD_VAR 0 2
62821: PPUSH
62822: LD_VAR 0 5
62826: PPUSH
62827: LD_VAR 0 6
62831: PPUSH
62832: CALL_OW 273
62836: PPUSH
62837: LD_VAR 0 3
62841: PPUSH
62842: CALL_OW 309
62846: IFFALSE 62860
// begin result := true ;
62848: LD_ADDR_VAR 0 4
62852: PUSH
62853: LD_INT 1
62855: ST_TO_ADDR
// exit ;
62856: POP
62857: POP
62858: GO 62864
// end ;
62860: GO 62794
62862: POP
62863: POP
// end ;
62864: LD_VAR 0 4
62868: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
62869: LD_INT 0
62871: PPUSH
62872: PPUSH
62873: PPUSH
// if btype = b_depot then
62874: LD_VAR 0 2
62878: PUSH
62879: LD_INT 0
62881: EQUAL
62882: IFFALSE 62894
// begin result := true ;
62884: LD_ADDR_VAR 0 3
62888: PUSH
62889: LD_INT 1
62891: ST_TO_ADDR
// exit ;
62892: GO 63014
// end ; pom := GetBase ( depot ) ;
62894: LD_ADDR_VAR 0 4
62898: PUSH
62899: LD_VAR 0 1
62903: PPUSH
62904: CALL_OW 274
62908: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
62909: LD_ADDR_VAR 0 5
62913: PUSH
62914: LD_VAR 0 2
62918: PPUSH
62919: LD_VAR 0 1
62923: PPUSH
62924: CALL_OW 248
62928: PPUSH
62929: CALL_OW 450
62933: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
62934: LD_ADDR_VAR 0 3
62938: PUSH
62939: LD_VAR 0 4
62943: PPUSH
62944: LD_INT 1
62946: PPUSH
62947: CALL_OW 275
62951: PUSH
62952: LD_VAR 0 5
62956: PUSH
62957: LD_INT 1
62959: ARRAY
62960: GREATEREQUAL
62961: IFFALSE 62987
62963: PUSH
62964: LD_VAR 0 4
62968: PPUSH
62969: LD_INT 2
62971: PPUSH
62972: CALL_OW 275
62976: PUSH
62977: LD_VAR 0 5
62981: PUSH
62982: LD_INT 2
62984: ARRAY
62985: GREATEREQUAL
62986: AND
62987: IFFALSE 63013
62989: PUSH
62990: LD_VAR 0 4
62994: PPUSH
62995: LD_INT 3
62997: PPUSH
62998: CALL_OW 275
63002: PUSH
63003: LD_VAR 0 5
63007: PUSH
63008: LD_INT 3
63010: ARRAY
63011: GREATEREQUAL
63012: AND
63013: ST_TO_ADDR
// end ;
63014: LD_VAR 0 3
63018: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
63019: LD_INT 0
63021: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
63022: LD_VAR 0 1
63026: PPUSH
63027: LD_VAR 0 2
63031: PPUSH
63032: LD_INT 0
63034: PPUSH
63035: LD_INT 0
63037: PPUSH
63038: LD_INT 1
63040: PPUSH
63041: LD_INT 0
63043: PPUSH
63044: CALL_OW 587
// end ;
63048: LD_VAR 0 3
63052: RET
// export function CenterOnNow ( unit ) ; begin
63053: LD_INT 0
63055: PPUSH
// result := IsInUnit ( unit ) ;
63056: LD_ADDR_VAR 0 2
63060: PUSH
63061: LD_VAR 0 1
63065: PPUSH
63066: CALL_OW 310
63070: ST_TO_ADDR
// if not result then
63071: LD_VAR 0 2
63075: NOT
63076: IFFALSE 63088
// result := unit ;
63078: LD_ADDR_VAR 0 2
63082: PUSH
63083: LD_VAR 0 1
63087: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
63088: LD_VAR 0 1
63092: PPUSH
63093: CALL_OW 87
// end ;
63097: LD_VAR 0 2
63101: RET
// export function ComMoveHex ( unit , hex ) ; begin
63102: LD_INT 0
63104: PPUSH
// if not hex then
63105: LD_VAR 0 2
63109: NOT
63110: IFFALSE 63114
// exit ;
63112: GO 63167
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
63114: LD_VAR 0 2
63118: PUSH
63119: LD_INT 1
63121: ARRAY
63122: PPUSH
63123: LD_VAR 0 2
63127: PUSH
63128: LD_INT 2
63130: ARRAY
63131: PPUSH
63132: CALL_OW 428
63136: IFFALSE 63140
// exit ;
63138: GO 63167
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
63140: LD_VAR 0 1
63144: PPUSH
63145: LD_VAR 0 2
63149: PUSH
63150: LD_INT 1
63152: ARRAY
63153: PPUSH
63154: LD_VAR 0 2
63158: PUSH
63159: LD_INT 2
63161: ARRAY
63162: PPUSH
63163: CALL_OW 111
// end ;
63167: LD_VAR 0 3
63171: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
63172: LD_INT 0
63174: PPUSH
63175: PPUSH
63176: PPUSH
// if not unit or not enemy then
63177: LD_VAR 0 1
63181: NOT
63182: IFTRUE 63191
63184: PUSH
63185: LD_VAR 0 2
63189: NOT
63190: OR
63191: IFFALSE 63195
// exit ;
63193: GO 63321
// x := GetX ( enemy ) ;
63195: LD_ADDR_VAR 0 4
63199: PUSH
63200: LD_VAR 0 2
63204: PPUSH
63205: CALL_OW 250
63209: ST_TO_ADDR
// y := GetY ( enemy ) ;
63210: LD_ADDR_VAR 0 5
63214: PUSH
63215: LD_VAR 0 2
63219: PPUSH
63220: CALL_OW 251
63224: ST_TO_ADDR
// if ValidHex ( x , y ) then
63225: LD_VAR 0 4
63229: PPUSH
63230: LD_VAR 0 5
63234: PPUSH
63235: CALL_OW 488
63239: IFFALSE 63321
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
63241: LD_VAR 0 2
63245: PPUSH
63246: CALL_OW 247
63250: PUSH
63251: LD_INT 3
63253: PUSH
63254: LD_INT 2
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: IN
63261: IFTRUE 63284
63263: PUSH
63264: LD_VAR 0 1
63268: PPUSH
63269: CALL_OW 255
63273: PPUSH
63274: LD_VAR 0 2
63278: PPUSH
63279: CALL_OW 292
63283: OR
63284: IFFALSE 63302
// ComAttackUnit ( unit , enemy ) else
63286: LD_VAR 0 1
63290: PPUSH
63291: LD_VAR 0 2
63295: PPUSH
63296: CALL_OW 115
63300: GO 63321
// ComAgressiveMove ( unit , x , y ) ;
63302: LD_VAR 0 1
63306: PPUSH
63307: LD_VAR 0 4
63311: PPUSH
63312: LD_VAR 0 5
63316: PPUSH
63317: CALL_OW 114
// end ;
63321: LD_VAR 0 3
63325: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
63326: LD_INT 0
63328: PPUSH
63329: PPUSH
63330: PPUSH
// list := AreaToList ( area , 0 ) ;
63331: LD_ADDR_VAR 0 5
63335: PUSH
63336: LD_VAR 0 1
63340: PPUSH
63341: LD_INT 0
63343: PPUSH
63344: CALL_OW 517
63348: ST_TO_ADDR
// if not list then
63349: LD_VAR 0 5
63353: NOT
63354: IFFALSE 63358
// exit ;
63356: GO 63488
// if all then
63358: LD_VAR 0 2
63362: IFFALSE 63450
// begin for i := 1 to list [ 1 ] do
63364: LD_ADDR_VAR 0 4
63368: PUSH
63369: DOUBLE
63370: LD_INT 1
63372: DEC
63373: ST_TO_ADDR
63374: LD_VAR 0 5
63378: PUSH
63379: LD_INT 1
63381: ARRAY
63382: PUSH
63383: FOR_TO
63384: IFFALSE 63446
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
63386: LD_ADDR_VAR 0 3
63390: PUSH
63391: LD_VAR 0 3
63395: PPUSH
63396: LD_VAR 0 3
63400: PUSH
63401: LD_INT 1
63403: PLUS
63404: PPUSH
63405: LD_VAR 0 5
63409: PUSH
63410: LD_INT 1
63412: ARRAY
63413: PUSH
63414: LD_VAR 0 4
63418: ARRAY
63419: PUSH
63420: LD_VAR 0 5
63424: PUSH
63425: LD_INT 2
63427: ARRAY
63428: PUSH
63429: LD_VAR 0 4
63433: ARRAY
63434: PUSH
63435: EMPTY
63436: LIST
63437: LIST
63438: PPUSH
63439: CALL_OW 1
63443: ST_TO_ADDR
63444: GO 63383
63446: POP
63447: POP
// exit ;
63448: GO 63488
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
63450: LD_ADDR_VAR 0 3
63454: PUSH
63455: LD_VAR 0 5
63459: PUSH
63460: LD_INT 1
63462: ARRAY
63463: PUSH
63464: LD_INT 1
63466: ARRAY
63467: PUSH
63468: LD_VAR 0 5
63472: PUSH
63473: LD_INT 2
63475: ARRAY
63476: PUSH
63477: LD_INT 1
63479: ARRAY
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: PUSH
63485: EMPTY
63486: LIST
63487: ST_TO_ADDR
// end ;
63488: LD_VAR 0 3
63492: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
63493: LD_INT 0
63495: PPUSH
63496: PPUSH
// list := AreaToList ( area , 0 ) ;
63497: LD_ADDR_VAR 0 4
63501: PUSH
63502: LD_VAR 0 1
63506: PPUSH
63507: LD_INT 0
63509: PPUSH
63510: CALL_OW 517
63514: ST_TO_ADDR
// if not list then
63515: LD_VAR 0 4
63519: NOT
63520: IFFALSE 63524
// exit ;
63522: GO 63565
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
63524: LD_ADDR_VAR 0 3
63528: PUSH
63529: LD_VAR 0 4
63533: PUSH
63534: LD_INT 1
63536: ARRAY
63537: PUSH
63538: LD_INT 1
63540: ARRAY
63541: PUSH
63542: LD_VAR 0 4
63546: PUSH
63547: LD_INT 2
63549: ARRAY
63550: PUSH
63551: LD_INT 1
63553: ARRAY
63554: PUSH
63555: LD_VAR 0 2
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: LIST
63564: ST_TO_ADDR
// end ;
63565: LD_VAR 0 3
63569: RET
// export function First ( array ) ; begin
63570: LD_INT 0
63572: PPUSH
// if not array then
63573: LD_VAR 0 1
63577: NOT
63578: IFFALSE 63582
// exit ;
63580: GO 63596
// result := array [ 1 ] ;
63582: LD_ADDR_VAR 0 2
63586: PUSH
63587: LD_VAR 0 1
63591: PUSH
63592: LD_INT 1
63594: ARRAY
63595: ST_TO_ADDR
// end ;
63596: LD_VAR 0 2
63600: RET
// export function Last ( array ) ; begin
63601: LD_INT 0
63603: PPUSH
// if not array then
63604: LD_VAR 0 1
63608: NOT
63609: IFFALSE 63613
// exit ;
63611: GO 63629
// result := array [ array ] ;
63613: LD_ADDR_VAR 0 2
63617: PUSH
63618: LD_VAR 0 1
63622: PUSH
63623: LD_VAR 0 1
63627: ARRAY
63628: ST_TO_ADDR
// end ;
63629: LD_VAR 0 2
63633: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
63634: LD_INT 0
63636: PPUSH
63637: PPUSH
// result := [ ] ;
63638: LD_ADDR_VAR 0 5
63642: PUSH
63643: EMPTY
63644: ST_TO_ADDR
// if not array then
63645: LD_VAR 0 1
63649: NOT
63650: IFFALSE 63654
// exit ;
63652: GO 63766
// for i := 1 to array do
63654: LD_ADDR_VAR 0 6
63658: PUSH
63659: DOUBLE
63660: LD_INT 1
63662: DEC
63663: ST_TO_ADDR
63664: LD_VAR 0 1
63668: PUSH
63669: FOR_TO
63670: IFFALSE 63764
// if array [ i ] [ index ] = value then
63672: LD_VAR 0 1
63676: PUSH
63677: LD_VAR 0 6
63681: ARRAY
63682: PUSH
63683: LD_VAR 0 2
63687: ARRAY
63688: PUSH
63689: LD_VAR 0 3
63693: EQUAL
63694: IFFALSE 63762
// begin if indexColumn then
63696: LD_VAR 0 4
63700: IFFALSE 63736
// result := Join ( result , array [ i ] [ indexColumn ] ) else
63702: LD_ADDR_VAR 0 5
63706: PUSH
63707: LD_VAR 0 5
63711: PPUSH
63712: LD_VAR 0 1
63716: PUSH
63717: LD_VAR 0 6
63721: ARRAY
63722: PUSH
63723: LD_VAR 0 4
63727: ARRAY
63728: PPUSH
63729: CALL 58774 0 2
63733: ST_TO_ADDR
63734: GO 63762
// result := Join ( result , array [ i ] ) ;
63736: LD_ADDR_VAR 0 5
63740: PUSH
63741: LD_VAR 0 5
63745: PPUSH
63746: LD_VAR 0 1
63750: PUSH
63751: LD_VAR 0 6
63755: ARRAY
63756: PPUSH
63757: CALL 58774 0 2
63761: ST_TO_ADDR
// end ;
63762: GO 63669
63764: POP
63765: POP
// end ;
63766: LD_VAR 0 5
63770: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
63771: LD_INT 0
63773: PPUSH
// if not vehicles or not parkingPoint then
63774: LD_VAR 0 1
63778: NOT
63779: IFTRUE 63788
63781: PUSH
63782: LD_VAR 0 2
63786: NOT
63787: OR
63788: IFFALSE 63792
// exit ;
63790: GO 63890
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
63792: LD_ADDR_VAR 0 1
63796: PUSH
63797: LD_VAR 0 1
63801: PPUSH
63802: LD_INT 50
63804: PUSH
63805: EMPTY
63806: LIST
63807: PUSH
63808: LD_INT 3
63810: PUSH
63811: LD_INT 92
63813: PUSH
63814: LD_VAR 0 2
63818: PUSH
63819: LD_INT 1
63821: ARRAY
63822: PUSH
63823: LD_VAR 0 2
63827: PUSH
63828: LD_INT 2
63830: ARRAY
63831: PUSH
63832: LD_INT 8
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: LIST
63839: LIST
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PPUSH
63849: CALL_OW 72
63853: ST_TO_ADDR
// if not vehicles then
63854: LD_VAR 0 1
63858: NOT
63859: IFFALSE 63863
// exit ;
63861: GO 63890
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
63863: LD_VAR 0 1
63867: PPUSH
63868: LD_VAR 0 2
63872: PUSH
63873: LD_INT 1
63875: ARRAY
63876: PPUSH
63877: LD_VAR 0 2
63881: PUSH
63882: LD_INT 2
63884: ARRAY
63885: PPUSH
63886: CALL_OW 111
// end ;
63890: LD_VAR 0 3
63894: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
63895: LD_INT 0
63897: PPUSH
63898: PPUSH
63899: PPUSH
// if not side or not area then
63900: LD_VAR 0 1
63904: NOT
63905: IFTRUE 63914
63907: PUSH
63908: LD_VAR 0 2
63912: NOT
63913: OR
63914: IFFALSE 63918
// exit ;
63916: GO 64037
// tmp := AreaToList ( area , 0 ) ;
63918: LD_ADDR_VAR 0 5
63922: PUSH
63923: LD_VAR 0 2
63927: PPUSH
63928: LD_INT 0
63930: PPUSH
63931: CALL_OW 517
63935: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
63936: LD_ADDR_VAR 0 4
63940: PUSH
63941: DOUBLE
63942: LD_INT 1
63944: DEC
63945: ST_TO_ADDR
63946: LD_VAR 0 5
63950: PUSH
63951: LD_INT 1
63953: ARRAY
63954: PUSH
63955: FOR_TO
63956: IFFALSE 64035
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
63958: LD_VAR 0 5
63962: PUSH
63963: LD_INT 1
63965: ARRAY
63966: PUSH
63967: LD_VAR 0 4
63971: ARRAY
63972: PPUSH
63973: LD_VAR 0 5
63977: PUSH
63978: LD_INT 2
63980: ARRAY
63981: PUSH
63982: LD_VAR 0 4
63986: ARRAY
63987: PPUSH
63988: CALL_OW 351
63992: IFFALSE 64033
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
63994: LD_VAR 0 5
63998: PUSH
63999: LD_INT 1
64001: ARRAY
64002: PUSH
64003: LD_VAR 0 4
64007: ARRAY
64008: PPUSH
64009: LD_VAR 0 5
64013: PUSH
64014: LD_INT 2
64016: ARRAY
64017: PUSH
64018: LD_VAR 0 4
64022: ARRAY
64023: PPUSH
64024: LD_VAR 0 1
64028: PPUSH
64029: CALL_OW 244
// end ;
64033: GO 63955
64035: POP
64036: POP
// end ;
64037: LD_VAR 0 3
64041: RET
// export function UniqueArray ( array ) ; var i ; begin
64042: LD_INT 0
64044: PPUSH
64045: PPUSH
// result := [ ] ;
64046: LD_ADDR_VAR 0 2
64050: PUSH
64051: EMPTY
64052: ST_TO_ADDR
// if not array then
64053: LD_VAR 0 1
64057: NOT
64058: IFFALSE 64062
// exit ;
64060: GO 64123
// for i := 1 to array do
64062: LD_ADDR_VAR 0 3
64066: PUSH
64067: DOUBLE
64068: LD_INT 1
64070: DEC
64071: ST_TO_ADDR
64072: LD_VAR 0 1
64076: PUSH
64077: FOR_TO
64078: IFFALSE 64121
// if not array [ i ] in result then
64080: LD_VAR 0 1
64084: PUSH
64085: LD_VAR 0 3
64089: ARRAY
64090: PUSH
64091: LD_VAR 0 2
64095: IN
64096: NOT
64097: IFFALSE 64119
// result := Join ( result , i ) ;
64099: LD_ADDR_VAR 0 2
64103: PUSH
64104: LD_VAR 0 2
64108: PPUSH
64109: LD_VAR 0 3
64113: PPUSH
64114: CALL 58774 0 2
64118: ST_TO_ADDR
64119: GO 64077
64121: POP
64122: POP
// end ; end_of_file
64123: LD_VAR 0 2
64127: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
64128: PPOPN 6
64130: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
64131: LD_INT 0
64133: PPUSH
// begin if not units then
64134: LD_VAR 0 1
64138: NOT
64139: IFFALSE 64143
// exit ;
64141: GO 64177
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
64143: LD_VAR 0 1
64147: PPUSH
64148: LD_VAR 0 2
64152: PPUSH
64153: LD_VAR 0 3
64157: PPUSH
64158: LD_VAR 0 4
64162: PPUSH
64163: LD_VAR 0 5
64167: PPUSH
64168: LD_VAR 0 6
64172: PPUSH
64173: CALL 19096 0 6
// end ;
64177: PPOPN 7
64179: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
64180: LD_EXP 5
64184: PUSH
64185: LD_INT 4
64187: EQUAL
64188: IFFALSE 64224
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
64190: LD_STRING setGameDifficulty(
64192: PUSH
64193: LD_OWVAR 67
64197: STR
64198: PUSH
64199: LD_STRING )
64201: STR
64202: PPUSH
64203: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
64207: LD_STRING displayDifficulty(
64209: PUSH
64210: LD_OWVAR 67
64214: STR
64215: PUSH
64216: LD_STRING )
64218: STR
64219: PPUSH
64220: CALL_OW 559
// end ; SOS_MapStart ( ) ;
64224: CALL 19145 0 0
// end ; end_of_file end_of_file
64228: PPOPN 1
64230: END
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
64231: LD_EXP 41
64235: IFFALSE 64576
64237: GO 64239
64239: DISABLE
64240: LD_INT 0
64242: PPUSH
64243: PPUSH
64244: PPUSH
// begin mpKingPoints := [ ] ;
64245: LD_ADDR_EXP 66
64249: PUSH
64250: EMPTY
64251: ST_TO_ADDR
// if mpTeamGame then
64252: LD_EXP 13
64256: IFFALSE 64310
// begin for i := 1 to Count ( mpTeams ) do
64258: LD_ADDR_VAR 0 1
64262: PUSH
64263: DOUBLE
64264: LD_INT 1
64266: DEC
64267: ST_TO_ADDR
64268: LD_EXP 12
64272: PPUSH
64273: CALL 22798 0 1
64277: PUSH
64278: FOR_TO
64279: IFFALSE 64306
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
64281: LD_ADDR_EXP 66
64285: PUSH
64286: LD_EXP 66
64290: PPUSH
64291: LD_VAR 0 1
64295: PPUSH
64296: LD_INT 0
64298: PPUSH
64299: CALL_OW 1
64303: ST_TO_ADDR
64304: GO 64278
64306: POP
64307: POP
// end else
64308: GO 64353
// begin for i := 1 to 8 do
64310: LD_ADDR_VAR 0 1
64314: PUSH
64315: DOUBLE
64316: LD_INT 1
64318: DEC
64319: ST_TO_ADDR
64320: LD_INT 8
64322: PUSH
64323: FOR_TO
64324: IFFALSE 64351
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
64326: LD_ADDR_EXP 66
64330: PUSH
64331: LD_EXP 66
64335: PPUSH
64336: LD_VAR 0 1
64340: PPUSH
64341: LD_INT 0
64343: PPUSH
64344: CALL_OW 1
64348: ST_TO_ADDR
64349: GO 64323
64351: POP
64352: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
64353: LD_ADDR_VAR 0 3
64357: PUSH
64358: LD_EXP 2
64362: PPUSH
64363: LD_INT 0
64365: PPUSH
64366: CALL_OW 517
64370: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
64371: LD_ADDR_VAR 0 1
64375: PUSH
64376: DOUBLE
64377: LD_INT 1
64379: DEC
64380: ST_TO_ADDR
64381: LD_VAR 0 3
64385: PUSH
64386: LD_INT 1
64388: ARRAY
64389: PUSH
64390: FOR_TO
64391: IFFALSE 64458
// for j := 1 to 8 do
64393: LD_ADDR_VAR 0 2
64397: PUSH
64398: DOUBLE
64399: LD_INT 1
64401: DEC
64402: ST_TO_ADDR
64403: LD_INT 8
64405: PUSH
64406: FOR_TO
64407: IFFALSE 64454
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
64409: LD_VAR 0 3
64413: PUSH
64414: LD_INT 1
64416: ARRAY
64417: PUSH
64418: LD_VAR 0 1
64422: ARRAY
64423: PPUSH
64424: LD_VAR 0 3
64428: PUSH
64429: LD_INT 2
64431: ARRAY
64432: PUSH
64433: LD_VAR 0 1
64437: ARRAY
64438: PPUSH
64439: LD_VAR 0 2
64443: PPUSH
64444: LD_INT 12
64446: NEG
64447: PPUSH
64448: CALL_OW 330
64452: GO 64406
64454: POP
64455: POP
64456: GO 64390
64458: POP
64459: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
64460: LD_EXP 36
64464: PPUSH
64465: LD_INT 1
64467: PPUSH
64468: CALL_OW 424
// UpdateCounter ;
64472: CALL 65082 0 0
// repeat wait ( 0 0$1 ) ;
64476: LD_INT 35
64478: PPUSH
64479: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
64483: LD_ADDR_VAR 0 3
64487: PUSH
64488: LD_EXP 36
64492: PPUSH
64493: LD_INT 3
64495: PUSH
64496: LD_INT 57
64498: PUSH
64499: EMPTY
64500: LIST
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: PUSH
64506: LD_INT 50
64508: PUSH
64509: EMPTY
64510: LIST
64511: PUSH
64512: LD_INT 2
64514: PUSH
64515: LD_INT 30
64517: PUSH
64518: LD_INT 0
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: LD_INT 30
64527: PUSH
64528: LD_INT 1
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: LIST
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: LIST
64544: PPUSH
64545: CALL_OW 70
64549: ST_TO_ADDR
// if not tmp then
64550: LD_VAR 0 3
64554: NOT
64555: IFFALSE 64559
// continue ;
64557: GO 64476
// AddPoints ( tmp ) ;
64559: LD_VAR 0 3
64563: PPUSH
64564: CALL 64760 0 1
// UpdateCounter ;
64568: CALL 65082 0 0
// until false ;
64572: LD_INT 0
64574: IFFALSE 64476
// end ;
64576: PPOPN 3
64578: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
64579: LD_EXP 41
64583: IFFALSE 64591
64585: PUSH
64586: LD_EXP 39
64590: AND
64591: IFFALSE 64757
64593: GO 64595
64595: DISABLE
64596: LD_INT 0
64598: PPUSH
64599: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
64600: LD_ADDR_VAR 0 2
64604: PUSH
64605: LD_EXP 2
64609: PPUSH
64610: LD_INT 0
64612: PPUSH
64613: CALL_OW 517
64617: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
64618: LD_ADDR_VAR 0 1
64622: PUSH
64623: DOUBLE
64624: LD_INT 1
64626: DEC
64627: ST_TO_ADDR
64628: LD_VAR 0 2
64632: PUSH
64633: LD_INT 1
64635: ARRAY
64636: PUSH
64637: FOR_TO
64638: IFFALSE 64679
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
64640: LD_VAR 0 2
64644: PUSH
64645: LD_INT 1
64647: ARRAY
64648: PUSH
64649: LD_VAR 0 1
64653: ARRAY
64654: PPUSH
64655: LD_VAR 0 2
64659: PUSH
64660: LD_INT 2
64662: ARRAY
64663: PUSH
64664: LD_VAR 0 1
64668: ARRAY
64669: PPUSH
64670: LD_INT 125
64672: PPUSH
64673: CALL_OW 495
64677: GO 64637
64679: POP
64680: POP
// repeat wait ( mpEmissions ) ;
64681: LD_EXP 39
64685: PPUSH
64686: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
64690: LD_ADDR_VAR 0 1
64694: PUSH
64695: DOUBLE
64696: LD_INT 1
64698: DEC
64699: ST_TO_ADDR
64700: LD_VAR 0 2
64704: PUSH
64705: LD_INT 1
64707: ARRAY
64708: PUSH
64709: FOR_TO
64710: IFFALSE 64751
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
64712: LD_VAR 0 2
64716: PUSH
64717: LD_INT 1
64719: ARRAY
64720: PUSH
64721: LD_VAR 0 1
64725: ARRAY
64726: PPUSH
64727: LD_VAR 0 2
64731: PUSH
64732: LD_INT 2
64734: ARRAY
64735: PUSH
64736: LD_VAR 0 1
64740: ARRAY
64741: PPUSH
64742: LD_INT 15
64744: PPUSH
64745: CALL_OW 495
64749: GO 64709
64751: POP
64752: POP
// until false ;
64753: LD_INT 0
64755: IFFALSE 64681
// end ;
64757: PPOPN 2
64759: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
64760: LD_INT 0
64762: PPUSH
64763: PPUSH
64764: PPUSH
64765: PPUSH
64766: PPUSH
// if mpTeamGame then
64767: LD_EXP 13
64771: IFFALSE 64968
// begin first := depots [ 1 ] ;
64773: LD_ADDR_VAR 0 4
64777: PUSH
64778: LD_VAR 0 1
64782: PUSH
64783: LD_INT 1
64785: ARRAY
64786: ST_TO_ADDR
// side := GetSide ( first ) ;
64787: LD_ADDR_VAR 0 6
64791: PUSH
64792: LD_VAR 0 4
64796: PPUSH
64797: CALL_OW 255
64801: ST_TO_ADDR
// for i := 1 to mpTeams do
64802: LD_ADDR_VAR 0 3
64806: PUSH
64807: DOUBLE
64808: LD_INT 1
64810: DEC
64811: ST_TO_ADDR
64812: LD_EXP 12
64816: PUSH
64817: FOR_TO
64818: IFFALSE 64852
// if side in mpTeams [ i ] then
64820: LD_VAR 0 6
64824: PUSH
64825: LD_EXP 12
64829: PUSH
64830: LD_VAR 0 3
64834: ARRAY
64835: IN
64836: IFFALSE 64850
// begin team := i ;
64838: LD_ADDR_VAR 0 5
64842: PUSH
64843: LD_VAR 0 3
64847: ST_TO_ADDR
// break ;
64848: GO 64852
// end ;
64850: GO 64817
64852: POP
64853: POP
// if not team then
64854: LD_VAR 0 5
64858: NOT
64859: IFFALSE 64863
// exit ;
64861: GO 65077
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
64863: LD_EXP 36
64867: PPUSH
64868: LD_INT 81
64870: PUSH
64871: LD_VAR 0 6
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PPUSH
64880: CALL_OW 70
64884: IFFALSE 64888
// exit ;
64886: GO 65077
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
64888: LD_ADDR_EXP 66
64892: PUSH
64893: LD_EXP 66
64897: PPUSH
64898: LD_VAR 0 5
64902: PPUSH
64903: LD_EXP 66
64907: PUSH
64908: LD_VAR 0 5
64912: ARRAY
64913: PUSH
64914: LD_INT 1
64916: PLUS
64917: PPUSH
64918: CALL_OW 1
64922: ST_TO_ADDR
// for i in mpTeams [ team ] do
64923: LD_ADDR_VAR 0 3
64927: PUSH
64928: LD_EXP 12
64932: PUSH
64933: LD_VAR 0 5
64937: ARRAY
64938: PUSH
64939: FOR_IN
64940: IFFALSE 64964
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
64942: LD_VAR 0 3
64946: PPUSH
64947: LD_EXP 66
64951: PUSH
64952: LD_VAR 0 5
64956: ARRAY
64957: PPUSH
64958: CALL_OW 506
64962: GO 64939
64964: POP
64965: POP
// end else
64966: GO 65077
// begin first := depots [ 1 ] ;
64968: LD_ADDR_VAR 0 4
64972: PUSH
64973: LD_VAR 0 1
64977: PUSH
64978: LD_INT 1
64980: ARRAY
64981: ST_TO_ADDR
// side := GetSide ( first ) ;
64982: LD_ADDR_VAR 0 6
64986: PUSH
64987: LD_VAR 0 4
64991: PPUSH
64992: CALL_OW 255
64996: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
64997: LD_EXP 36
65001: PPUSH
65002: LD_INT 81
65004: PUSH
65005: LD_VAR 0 6
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PPUSH
65014: CALL_OW 70
65018: IFFALSE 65022
// exit ;
65020: GO 65077
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
65022: LD_ADDR_EXP 66
65026: PUSH
65027: LD_EXP 66
65031: PPUSH
65032: LD_VAR 0 6
65036: PPUSH
65037: LD_EXP 66
65041: PUSH
65042: LD_VAR 0 6
65046: ARRAY
65047: PUSH
65048: LD_INT 1
65050: PLUS
65051: PPUSH
65052: CALL_OW 1
65056: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
65057: LD_VAR 0 6
65061: PPUSH
65062: LD_EXP 66
65066: PUSH
65067: LD_VAR 0 6
65071: ARRAY
65072: PPUSH
65073: CALL_OW 506
// end ; end ;
65077: LD_VAR 0 2
65081: RET
// function UpdateCounter ; var i ; begin
65082: LD_INT 0
65084: PPUSH
65085: PPUSH
// result := [ ] ;
65086: LD_ADDR_VAR 0 1
65090: PUSH
65091: EMPTY
65092: ST_TO_ADDR
// if mpTeamGame then
65093: LD_EXP 13
65097: IFFALSE 65164
// begin for i := 1 to mpTeams do
65099: LD_ADDR_VAR 0 2
65103: PUSH
65104: DOUBLE
65105: LD_INT 1
65107: DEC
65108: ST_TO_ADDR
65109: LD_EXP 12
65113: PUSH
65114: FOR_TO
65115: IFFALSE 65160
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
65117: LD_ADDR_VAR 0 1
65121: PUSH
65122: LD_VAR 0 1
65126: PUSH
65127: LD_STRING #KingoftheHill-Team
65129: PUSH
65130: LD_VAR 0 2
65134: PUSH
65135: LD_EXP 66
65139: PUSH
65140: LD_VAR 0 2
65144: ARRAY
65145: PUSH
65146: LD_EXP 37
65150: PUSH
65151: EMPTY
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: ADD
65157: ST_TO_ADDR
65158: GO 65114
65160: POP
65161: POP
// end else
65162: GO 65237
// begin for i := 1 to 8 do
65164: LD_ADDR_VAR 0 2
65168: PUSH
65169: DOUBLE
65170: LD_INT 1
65172: DEC
65173: ST_TO_ADDR
65174: LD_INT 8
65176: PUSH
65177: FOR_TO
65178: IFFALSE 65235
// if mpSidePositions [ i ] then
65180: LD_EXP 9
65184: PUSH
65185: LD_VAR 0 2
65189: ARRAY
65190: IFFALSE 65233
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
65192: LD_ADDR_VAR 0 1
65196: PUSH
65197: LD_VAR 0 1
65201: PUSH
65202: LD_STRING #KingoftheHill-Player
65204: PUSH
65205: LD_VAR 0 2
65209: PUSH
65210: LD_EXP 66
65214: PUSH
65215: LD_VAR 0 2
65219: ARRAY
65220: PUSH
65221: LD_EXP 37
65225: PUSH
65226: EMPTY
65227: LIST
65228: LIST
65229: LIST
65230: LIST
65231: ADD
65232: ST_TO_ADDR
65233: GO 65177
65235: POP
65236: POP
// end ; mpDisplayStrings := result ;
65237: LD_ADDR_EXP 40
65241: PUSH
65242: LD_VAR 0 1
65246: ST_TO_ADDR
// end ;
65247: LD_VAR 0 1
65251: RET
// export function HowMuchPointsKing ( side ) ; begin
65252: LD_INT 0
65254: PPUSH
// result := HowMuchPoints ( side ) ;
65255: LD_ADDR_VAR 0 2
65259: PUSH
65260: LD_VAR 0 1
65264: PPUSH
65265: CALL 65275 0 1
65269: ST_TO_ADDR
// end ;
65270: LD_VAR 0 2
65274: RET
// function HowMuchPoints ( side ) ; var i ; begin
65275: LD_INT 0
65277: PPUSH
65278: PPUSH
// if mpTeamGame then
65279: LD_EXP 13
65283: IFFALSE 65352
// begin for i := 1 to Count ( mpTeams ) do
65285: LD_ADDR_VAR 0 3
65289: PUSH
65290: DOUBLE
65291: LD_INT 1
65293: DEC
65294: ST_TO_ADDR
65295: LD_EXP 12
65299: PPUSH
65300: CALL 22798 0 1
65304: PUSH
65305: FOR_TO
65306: IFFALSE 65348
// begin if side in mpTeams [ i ] then
65308: LD_VAR 0 1
65312: PUSH
65313: LD_EXP 12
65317: PUSH
65318: LD_VAR 0 3
65322: ARRAY
65323: IN
65324: IFFALSE 65346
// begin result := mpKingPoints [ i ] ;
65326: LD_ADDR_VAR 0 2
65330: PUSH
65331: LD_EXP 66
65335: PUSH
65336: LD_VAR 0 3
65340: ARRAY
65341: ST_TO_ADDR
// exit ;
65342: POP
65343: POP
65344: GO 65368
// end ; end ;
65346: GO 65305
65348: POP
65349: POP
// end else
65350: GO 65368
// result := mpKingPoints [ side ] ;
65352: LD_ADDR_VAR 0 2
65356: PUSH
65357: LD_EXP 66
65361: PUSH
65362: LD_VAR 0 1
65366: ARRAY
65367: ST_TO_ADDR
// end ;
65368: LD_VAR 0 2
65372: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
65373: LD_EXP 41
65377: IFFALSE 65385
65379: PUSH
65380: CALL 65797 0 0
65384: AND
65385: IFFALSE 65393
65387: PUSH
65388: LD_OWVAR 4
65392: AND
65393: IFFALSE 65646
65395: GO 65397
65397: DISABLE
65398: LD_INT 0
65400: PPUSH
65401: PPUSH
// begin canWin := false ;
65402: LD_ADDR_VAR 0 2
65406: PUSH
65407: LD_INT 0
65409: ST_TO_ADDR
// if not HasPower ( your_side ) then
65410: LD_OWVAR 2
65414: PPUSH
65415: CALL 65839 0 1
65419: NOT
65420: IFFALSE 65431
// begin Multiplayer_Loose_Message ;
65422: CALL_OW 521
// enable ( mpLose ) ;
65426: LD_INT 102
65428: ENABLE_MARKED
// end else
65429: GO 65646
// begin if not EnemiesInGame then
65431: CALL 65649 0 0
65435: NOT
65436: IFFALSE 65443
// begin enable ( mpWin ) ;
65438: LD_INT 101
65440: ENABLE_MARKED
// exit ;
65441: GO 65646
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
65443: LD_ADDR_VAR 0 2
65447: PUSH
65448: LD_OWVAR 2
65452: PPUSH
65453: CALL 65275 0 1
65457: PUSH
65458: LD_EXP 37
65462: GREATEREQUAL
65463: IFFALSE 65476
65465: PUSH
65466: LD_OWVAR 2
65470: PPUSH
65471: CALL 65839 0 1
65475: AND
65476: ST_TO_ADDR
// for i := 1 to 8 do
65477: LD_ADDR_VAR 0 1
65481: PUSH
65482: DOUBLE
65483: LD_INT 1
65485: DEC
65486: ST_TO_ADDR
65487: LD_INT 8
65489: PUSH
65490: FOR_TO
65491: IFFALSE 65632
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
65493: LD_EXP 9
65497: PUSH
65498: LD_VAR 0 1
65502: ARRAY
65503: IFFALSE 65516
65505: PUSH
65506: LD_VAR 0 1
65510: PPUSH
65511: CALL_OW 108
65515: AND
65516: IFFALSE 65530
65518: PUSH
65519: LD_VAR 0 1
65523: PUSH
65524: LD_OWVAR 2
65528: NONEQUAL
65529: AND
65530: IFFALSE 65630
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
65532: LD_EXP 10
65536: PUSH
65537: LD_VAR 0 1
65541: ARRAY
65542: NOT
65543: IFTRUE 65591
65545: PUSH
65546: LD_EXP 10
65550: PUSH
65551: LD_VAR 0 1
65555: ARRAY
65556: PUSH
65557: LD_EXP 10
65561: PUSH
65562: LD_OWVAR 2
65566: ARRAY
65567: NONEQUAL
65568: IFFALSE 65590
65570: PUSH
65571: LD_OWVAR 2
65575: PPUSH
65576: LD_VAR 0 1
65580: PPUSH
65581: CALL_OW 81
65585: PUSH
65586: LD_INT 1
65588: NONEQUAL
65589: AND
65590: OR
65591: IFFALSE 65630
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
65593: LD_VAR 0 1
65597: PPUSH
65598: CALL 65275 0 1
65602: PUSH
65603: LD_EXP 37
65607: GREATEREQUAL
65608: IFFALSE 65621
65610: PUSH
65611: LD_VAR 0 1
65615: PPUSH
65616: CALL 65839 0 1
65620: AND
65621: IFFALSE 65630
// begin enable ( mpLose ) ;
65623: LD_INT 102
65625: ENABLE_MARKED
// exit ;
65626: POP
65627: POP
65628: GO 65646
// end ;
65630: GO 65490
65632: POP
65633: POP
// if canWin then
65634: LD_VAR 0 2
65638: IFFALSE 65645
// enable ( mpWin ) else
65640: LD_INT 101
65642: ENABLE_MARKED
65643: GO 65646
// enable ;
65645: ENABLE
// end ; end ;
65646: PPOPN 2
65648: END
// function EnemiesInGame ; var i ; begin
65649: LD_INT 0
65651: PPUSH
65652: PPUSH
// result := false ;
65653: LD_ADDR_VAR 0 1
65657: PUSH
65658: LD_INT 0
65660: ST_TO_ADDR
// for i := 1 to 8 do
65661: LD_ADDR_VAR 0 2
65665: PUSH
65666: DOUBLE
65667: LD_INT 1
65669: DEC
65670: ST_TO_ADDR
65671: LD_INT 8
65673: PUSH
65674: FOR_TO
65675: IFFALSE 65790
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
65677: LD_VAR 0 2
65681: PUSH
65682: LD_OWVAR 2
65686: NONEQUAL
65687: IFFALSE 65700
65689: PUSH
65690: LD_VAR 0 2
65694: PPUSH
65695: CALL 65839 0 1
65699: AND
65700: IFFALSE 65713
65702: PUSH
65703: LD_VAR 0 2
65707: PPUSH
65708: CALL_OW 108
65712: AND
65713: IFFALSE 65788
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
65715: LD_EXP 10
65719: PUSH
65720: LD_VAR 0 2
65724: ARRAY
65725: NOT
65726: IFTRUE 65774
65728: PUSH
65729: LD_EXP 10
65733: PUSH
65734: LD_VAR 0 2
65738: ARRAY
65739: PUSH
65740: LD_EXP 10
65744: PUSH
65745: LD_OWVAR 2
65749: ARRAY
65750: NONEQUAL
65751: IFFALSE 65773
65753: PUSH
65754: LD_OWVAR 2
65758: PPUSH
65759: LD_VAR 0 2
65763: PPUSH
65764: CALL_OW 81
65768: PUSH
65769: LD_INT 1
65771: NONEQUAL
65772: AND
65773: OR
65774: IFFALSE 65788
// begin result := true ;
65776: LD_ADDR_VAR 0 1
65780: PUSH
65781: LD_INT 1
65783: ST_TO_ADDR
// exit ;
65784: POP
65785: POP
65786: GO 65792
// end ;
65788: GO 65674
65790: POP
65791: POP
// end ;
65792: LD_VAR 0 1
65796: RET
// function CanWinLoose ; begin
65797: LD_INT 0
65799: PPUSH
// result := true ;
65800: LD_ADDR_VAR 0 1
65804: PUSH
65805: LD_INT 1
65807: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
65808: CALL_OW 531
65812: IFFALSE 65824
65814: PUSH
65815: CALL_OW 519
65819: PUSH
65820: LD_INT 1
65822: GREATER
65823: AND
65824: IFFALSE 65834
// result := false ;
65826: LD_ADDR_VAR 0 1
65830: PUSH
65831: LD_INT 0
65833: ST_TO_ADDR
// end ;
65834: LD_VAR 0 1
65838: RET
// function HasPower ( i ) ; begin
65839: LD_INT 0
65841: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
65842: LD_ADDR_VAR 0 2
65846: PUSH
65847: LD_INT 22
65849: PUSH
65850: LD_VAR 0 1
65854: PUSH
65855: EMPTY
65856: LIST
65857: LIST
65858: PUSH
65859: LD_INT 2
65861: PUSH
65862: LD_INT 21
65864: PUSH
65865: LD_INT 1
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: LD_INT 33
65874: PUSH
65875: LD_INT 3
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: PUSH
65882: LD_INT 33
65884: PUSH
65885: LD_INT 5
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PPUSH
65902: CALL_OW 69
65906: ST_TO_ADDR
// end ;
65907: LD_VAR 0 2
65911: RET
