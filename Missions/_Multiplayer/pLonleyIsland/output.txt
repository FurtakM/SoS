// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 6650 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 7073 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 0 , 1 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 ] ;
  20: LD_ADDR_EXP 13
  24: PUSH
  25: LD_INT 0
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 0
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 0
  42: PUSH
  43: LD_INT 0
  45: PUSH
  46: LD_INT 0
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 0
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 0
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 1
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 1
  81: PUSH
  82: LD_INT 1
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 1 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ 30 , 50 , 100 ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ 0 , 1 ] , [ 0 , 1 ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] , ] ;
 111: LD_ADDR_EXP 14
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 1
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: LD_INT 30
 409: PUSH
 410: LD_INT 50
 412: PUSH
 413: LD_INT 100
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: LIST
 420: PUSH
 421: EMPTY
 422: PUSH
 423: LD_INT 0
 425: PUSH
 426: LD_INT 1
 428: PUSH
 429: LD_INT 31500
 431: PUSH
 432: LD_INT 52500
 434: PUSH
 435: LD_INT 63000
 437: PUSH
 438: LD_INT 94500
 440: PUSH
 441: LD_INT 126000
 443: PUSH
 444: LD_INT 189000
 446: PUSH
 447: LD_INT 210000
 449: PUSH
 450: LD_INT 252000
 452: PUSH
 453: LD_INT 378000
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: LIST
 460: LIST
 461: LIST
 462: LIST
 463: LIST
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_INT 0
 471: PUSH
 472: LD_INT 1
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: PUSH
 479: LD_INT 0
 481: PUSH
 482: LD_INT 1
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: PUSH
 489: LD_INT 0
 491: PUSH
 492: LD_INT 6300
 494: PUSH
 495: LD_INT 10500
 497: PUSH
 498: LD_INT 16800
 500: PUSH
 501: LD_INT 21000
 503: PUSH
 504: LD_INT 25200
 506: PUSH
 507: LD_INT 31500
 509: PUSH
 510: LD_INT 42000
 512: PUSH
 513: LD_INT 63000
 515: PUSH
 516: EMPTY
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: LIST
 534: LIST
 535: LIST
 536: LIST
 537: LIST
 538: LIST
 539: LIST
 540: LIST
 541: LIST
 542: LIST
 543: LIST
 544: LIST
 545: LIST
 546: LIST
 547: LIST
 548: LIST
 549: ST_TO_ADDR
// mpGameSettings := [ 0 , 15 , 4 , [ 0 , 0 , 0 ] , 3 , 0 , 0 , 0 , 1 , 0 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 30 , 0 , 15 15$0 , 1 , 1 , 0 ] ;
 550: LD_ADDR_EXP 15
 554: PUSH
 555: LD_INT 0
 557: PUSH
 558: LD_INT 15
 560: PUSH
 561: LD_INT 4
 563: PUSH
 564: LD_INT 0
 566: PUSH
 567: LD_INT 0
 569: PUSH
 570: LD_INT 0
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: LIST
 577: PUSH
 578: LD_INT 3
 580: PUSH
 581: LD_INT 0
 583: PUSH
 584: LD_INT 0
 586: PUSH
 587: LD_INT 0
 589: PUSH
 590: LD_INT 1
 592: PUSH
 593: LD_INT 0
 595: PUSH
 596: LD_INT 1
 598: PUSH
 599: LD_INT 700
 601: PUSH
 602: LD_INT 1
 604: PUSH
 605: LD_INT 700
 607: PUSH
 608: LD_INT 3
 610: PUSH
 611: LD_INT 30
 613: PUSH
 614: LD_INT 0
 616: PUSH
 617: LD_INT 31500
 619: PUSH
 620: LD_INT 1
 622: PUSH
 623: LD_INT 1
 625: PUSH
 626: LD_INT 0
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: LIST
 636: LIST
 637: LIST
 638: LIST
 639: LIST
 640: LIST
 641: LIST
 642: LIST
 643: LIST
 644: LIST
 645: LIST
 646: LIST
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: ST_TO_ADDR
// mpGameType := GameTypeFamine ;
 652: LD_ADDR_EXP 12
 656: PUSH
 657: LD_INT 5
 659: ST_TO_ADDR
// your_side := 1 ;
 660: LD_ADDR_OWVAR 2
 664: PUSH
 665: LD_INT 1
 667: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 0 , 0 , 0 , 6 , 7 , 0 ] ;
 668: LD_ADDR_EXP 16
 672: PUSH
 673: LD_INT 1
 675: PUSH
 676: LD_INT 2
 678: PUSH
 679: LD_INT 0
 681: PUSH
 682: LD_INT 0
 684: PUSH
 685: LD_INT 0
 687: PUSH
 688: LD_INT 6
 690: PUSH
 691: LD_INT 7
 693: PUSH
 694: LD_INT 0
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: LIST
 703: LIST
 704: LIST
 705: LIST
 706: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 0 , 0 , 0 , 2 , 2 , 0 ] ;
 707: LD_ADDR_EXP 17
 711: PUSH
 712: LD_INT 1
 714: PUSH
 715: LD_INT 2
 717: PUSH
 718: LD_INT 0
 720: PUSH
 721: LD_INT 0
 723: PUSH
 724: LD_INT 0
 726: PUSH
 727: LD_INT 2
 729: PUSH
 730: LD_INT 2
 732: PUSH
 733: LD_INT 0
 735: PUSH
 736: EMPTY
 737: LIST
 738: LIST
 739: LIST
 740: LIST
 741: LIST
 742: LIST
 743: LIST
 744: LIST
 745: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 0 , 0 , 0 , 3 , 1 , 0 ] ;
 746: LD_ADDR_EXP 18
 750: PUSH
 751: LD_INT 1
 753: PUSH
 754: LD_INT 2
 756: PUSH
 757: LD_INT 0
 759: PUSH
 760: LD_INT 0
 762: PUSH
 763: LD_INT 0
 765: PUSH
 766: LD_INT 3
 768: PUSH
 769: LD_INT 1
 771: PUSH
 772: LD_INT 0
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: LIST
 779: LIST
 780: LIST
 781: LIST
 782: LIST
 783: LIST
 784: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 ] , [ 6 , 7 ] ] ;
 785: LD_ADDR_EXP 19
 789: PUSH
 790: LD_INT 1
 792: PUSH
 793: LD_INT 2
 795: PUSH
 796: EMPTY
 797: LIST
 798: LIST
 799: PUSH
 800: LD_INT 6
 802: PUSH
 803: LD_INT 7
 805: PUSH
 806: EMPTY
 807: LIST
 808: LIST
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: ST_TO_ADDR
// mpTeamGame := false ;
 814: LD_ADDR_EXP 20
 818: PUSH
 819: LD_INT 0
 821: ST_TO_ADDR
// mpMapSize := [ 240 , 270 ] ;
 822: LD_ADDR_EXP 38
 826: PUSH
 827: LD_INT 240
 829: PUSH
 830: LD_INT 270
 832: PUSH
 833: EMPTY
 834: LIST
 835: LIST
 836: ST_TO_ADDR
// end ;
 837: LD_VAR 0 1
 841: RET
// export BuildUpEscape , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , t , all , depositsValue , startPos ; begin
 842: LD_INT 0
 844: PPUSH
 845: PPUSH
 846: PPUSH
 847: PPUSH
 848: PPUSH
 849: PPUSH
// BuildUpEscape := 0 ;
 850: LD_ADDR_EXP 1
 854: PUSH
 855: LD_INT 0
 857: ST_TO_ADDR
// kingCamArea := 0 ;
 858: LD_ADDR_EXP 2
 862: PUSH
 863: LD_INT 0
 865: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 866: LD_ADDR_EXP 33
 870: PUSH
 871: LD_EXP 15
 875: PUSH
 876: LD_INT 2
 878: ARRAY
 879: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 880: LD_ADDR_EXP 34
 884: PUSH
 885: LD_EXP 15
 889: PUSH
 890: LD_INT 3
 892: ARRAY
 893: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 894: LD_ADDR_EXP 36
 898: PUSH
 899: LD_EXP 15
 903: PUSH
 904: LD_INT 5
 906: ARRAY
 907: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
 908: LD_EXP 15
 912: PUSH
 913: LD_INT 9
 915: ARRAY
 916: IFFALSE 1105
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ] ] ] ;
 918: LD_ADDR_EXP 45
 922: PUSH
 923: LD_INT 1
 925: PUSH
 926: LD_INT 1
 928: PUSH
 929: LD_INT 1
 931: PUSH
 932: LD_INT 2
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 1
 943: PUSH
 944: LD_INT 1
 946: PUSH
 947: LD_INT 1
 949: PUSH
 950: LD_INT 3
 952: PUSH
 953: EMPTY
 954: LIST
 955: LIST
 956: LIST
 957: LIST
 958: PUSH
 959: LD_INT 2
 961: PUSH
 962: LD_INT 1
 964: PUSH
 965: LD_INT 1
 967: PUSH
 968: LD_INT 12
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: LIST
 981: PUSH
 982: LD_INT 12
 984: PUSH
 985: LD_INT 1
 987: PUSH
 988: LD_INT 1
 990: PUSH
 991: LD_INT 24
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: PUSH
1000: LD_INT 12
1002: PUSH
1003: LD_INT 1
1005: PUSH
1006: LD_INT 1
1008: PUSH
1009: LD_INT 23
1011: PUSH
1012: EMPTY
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 13
1020: PUSH
1021: LD_INT 1
1023: PUSH
1024: LD_INT 1
1026: PUSH
1027: LD_INT 32
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: LIST
1040: PUSH
1041: LD_INT 21
1043: PUSH
1044: LD_INT 1
1046: PUSH
1047: LD_INT 1
1049: PUSH
1050: LD_INT 42
1052: PUSH
1053: EMPTY
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: PUSH
1059: LD_INT 21
1061: PUSH
1062: LD_INT 1
1064: PUSH
1065: LD_INT 1
1067: PUSH
1068: LD_INT 42
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: LIST
1075: LIST
1076: PUSH
1077: LD_INT 21
1079: PUSH
1080: LD_INT 1
1082: PUSH
1083: LD_INT 1
1085: PUSH
1086: LD_INT 51
1088: PUSH
1089: EMPTY
1090: LIST
1091: LIST
1092: LIST
1093: LIST
1094: PUSH
1095: EMPTY
1096: LIST
1097: LIST
1098: LIST
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: LIST
1104: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1105: LD_ADDR_EXP 25
1109: PUSH
1110: LD_EXP 15
1114: PUSH
1115: LD_INT 11
1117: ARRAY
1118: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1119: LD_ADDR_EXP 35
1123: PUSH
1124: LD_EXP 15
1128: PUSH
1129: LD_INT 13
1131: ARRAY
1132: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1133: LD_ADDR_EXP 42
1137: PUSH
1138: LD_EXP 15
1142: PUSH
1143: LD_INT 14
1145: ARRAY
1146: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1147: LD_ADDR_EXP 39
1151: PUSH
1152: LD_EXP 15
1156: PUSH
1157: LD_INT 15
1159: ARRAY
1160: ST_TO_ADDR
// depositsValue := mpGameSettings [ 16 ] ;
1161: LD_ADDR_VAR 0 6
1165: PUSH
1166: LD_EXP 15
1170: PUSH
1171: LD_INT 16
1173: ARRAY
1174: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1175: LD_ADDR_EXP 37
1179: PUSH
1180: LD_EXP 15
1184: PUSH
1185: LD_INT 18
1187: ARRAY
1188: ST_TO_ADDR
// mpArtifacts := mpGameSettings [ 19 ] ;
1189: LD_ADDR_EXP 54
1193: PUSH
1194: LD_EXP 15
1198: PUSH
1199: LD_INT 19
1201: ARRAY
1202: ST_TO_ADDR
// mpTeleports := mpGameSettings [ 20 ] ;
1203: LD_ADDR_EXP 53
1207: PUSH
1208: LD_EXP 15
1212: PUSH
1213: LD_INT 20
1215: ARRAY
1216: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1217: LD_ADDR_EXP 40
1221: PUSH
1222: LD_INT 7
1224: PUSH
1225: LD_INT 8
1227: PUSH
1228: LD_INT 9
1230: PUSH
1231: LD_INT 10
1233: PUSH
1234: LD_INT 11
1236: PUSH
1237: LD_INT 12
1239: PUSH
1240: LD_INT 13
1242: PUSH
1243: LD_INT 14
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: LIST
1255: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 0 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 1 ) , GetBuildingFromArea ( depotArea4 , 2 ) , GetBuildingFromArea ( depotArea5 , 3 ) , GetBuildingFromArea ( depotArea6 , 4 ) , GetBuildingFromArea ( depotArea7 , 4 ) , GetBuildingFromArea ( depotArea8 , 5 ) ] ;
1256: LD_ADDR_VAR 0 7
1260: PUSH
1261: LD_INT 15
1263: PPUSH
1264: LD_INT 0
1266: PPUSH
1267: CALL 67099 0 2
1271: PUSH
1272: LD_INT 16
1274: PPUSH
1275: LD_INT 1
1277: PPUSH
1278: CALL 67099 0 2
1282: PUSH
1283: LD_INT 17
1285: PPUSH
1286: LD_INT 1
1288: PPUSH
1289: CALL 67099 0 2
1293: PUSH
1294: LD_INT 18
1296: PPUSH
1297: LD_INT 2
1299: PPUSH
1300: CALL 67099 0 2
1304: PUSH
1305: LD_INT 19
1307: PPUSH
1308: LD_INT 3
1310: PPUSH
1311: CALL 67099 0 2
1315: PUSH
1316: LD_INT 20
1318: PPUSH
1319: LD_INT 4
1321: PPUSH
1322: CALL 67099 0 2
1326: PUSH
1327: LD_INT 21
1329: PPUSH
1330: LD_INT 4
1332: PPUSH
1333: CALL 67099 0 2
1337: PUSH
1338: LD_INT 22
1340: PPUSH
1341: LD_INT 5
1343: PPUSH
1344: CALL 67099 0 2
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1359: LD_ADDR_VAR 0 3
1363: PUSH
1364: DOUBLE
1365: LD_INT 1
1367: DEC
1368: ST_TO_ADDR
1369: LD_VAR 0 7
1373: PPUSH
1374: CALL 26404 0 1
1378: PUSH
1379: FOR_TO
1380: IFFALSE 1484
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1382: LD_ADDR_EXP 30
1386: PUSH
1387: LD_EXP 30
1391: PPUSH
1392: LD_VAR 0 3
1396: PPUSH
1397: LD_VAR 0 7
1401: PUSH
1402: LD_VAR 0 3
1406: ARRAY
1407: PUSH
1408: LD_INT 1
1410: ARRAY
1411: PPUSH
1412: LD_VAR 0 7
1416: PUSH
1417: LD_VAR 0 3
1421: ARRAY
1422: PUSH
1423: LD_INT 3
1425: ARRAY
1426: PPUSH
1427: LD_INT 10
1429: PPUSH
1430: CALL_OW 272
1434: PUSH
1435: LD_VAR 0 7
1439: PUSH
1440: LD_VAR 0 3
1444: ARRAY
1445: PUSH
1446: LD_INT 2
1448: ARRAY
1449: PPUSH
1450: LD_VAR 0 7
1454: PUSH
1455: LD_VAR 0 3
1459: ARRAY
1460: PUSH
1461: LD_INT 3
1463: ARRAY
1464: PPUSH
1465: LD_INT 10
1467: PPUSH
1468: CALL_OW 273
1472: PUSH
1473: EMPTY
1474: LIST
1475: LIST
1476: PPUSH
1477: CALL_OW 1
1481: ST_TO_ADDR
1482: GO 1379
1484: POP
1485: POP
// if mpGameType = GameTypeFamine then
1486: LD_EXP 12
1490: PUSH
1491: LD_INT 5
1493: EQUAL
1494: IFFALSE 1604
// begin FamineDeposits ( [ oilBasicArea , oilMediumArea , oilHardArea ] , [ 3 * depositsValue , 5 * depositsValue , 15 * depositsValue ] , mat_oil ) ;
1496: LD_INT 44
1498: PUSH
1499: LD_INT 46
1501: PUSH
1502: LD_INT 48
1504: PUSH
1505: EMPTY
1506: LIST
1507: LIST
1508: LIST
1509: PPUSH
1510: LD_INT 3
1512: PUSH
1513: LD_VAR 0 6
1517: MUL
1518: PUSH
1519: LD_INT 5
1521: PUSH
1522: LD_VAR 0 6
1526: MUL
1527: PUSH
1528: LD_INT 15
1530: PUSH
1531: LD_VAR 0 6
1535: MUL
1536: PUSH
1537: EMPTY
1538: LIST
1539: LIST
1540: LIST
1541: PPUSH
1542: LD_INT 2
1544: PPUSH
1545: CALL 68071 0 3
// FamineDeposits ( [ sibBasicArea , sibMediumArea , sibHardArea ] , [ 1 * depositsValue , 2.5 * depositsValue , 7.5 * depositsValue ] , mat_siberit ) ;
1549: LD_INT 45
1551: PUSH
1552: LD_INT 47
1554: PUSH
1555: LD_INT 49
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: PPUSH
1563: LD_INT 1
1565: PUSH
1566: LD_VAR 0 6
1570: MUL
1571: PUSH
1572: LD_REAL  2.50000000000000E+0000
1575: PUSH
1576: LD_VAR 0 6
1580: MUL
1581: PUSH
1582: LD_REAL  7.50000000000000E+0000
1585: PUSH
1586: LD_VAR 0 6
1590: MUL
1591: PUSH
1592: EMPTY
1593: LIST
1594: LIST
1595: LIST
1596: PPUSH
1597: LD_INT 3
1599: PPUSH
1600: CALL 68071 0 3
// end ; if mpArtifacts then
1604: LD_EXP 54
1608: IFFALSE 1614
// InitArtifact ;
1610: CALL 2882 0 0
// for i := 1 to 8 do
1614: LD_ADDR_VAR 0 3
1618: PUSH
1619: DOUBLE
1620: LD_INT 1
1622: DEC
1623: ST_TO_ADDR
1624: LD_INT 8
1626: PUSH
1627: FOR_TO
1628: IFFALSE 1671
// for t in [ tech_SolEng , tech_SolPow ] do
1630: LD_ADDR_VAR 0 4
1634: PUSH
1635: LD_INT 45
1637: PUSH
1638: LD_INT 35
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: PUSH
1645: FOR_IN
1646: IFFALSE 1667
// SetTech ( t , i , state_disabled ) ;
1648: LD_VAR 0 4
1652: PPUSH
1653: LD_VAR 0 3
1657: PPUSH
1658: LD_INT 0
1660: PPUSH
1661: CALL_OW 322
1665: GO 1645
1667: POP
1668: POP
1669: GO 1627
1671: POP
1672: POP
// end ;
1673: LD_VAR 0 2
1677: RET
// every 0 0$2 marked mpActive do var i , j , x , phase , additionalSpawnPhase , f , tmp , areas , areasPhase , time , normalTime , delayTime , maxTime ;
1678: GO 1680
1680: DISABLE
1681: LD_INT 0
1683: PPUSH
1684: PPUSH
1685: PPUSH
1686: PPUSH
1687: PPUSH
1688: PPUSH
1689: PPUSH
1690: PPUSH
1691: PPUSH
1692: PPUSH
1693: PPUSH
1694: PPUSH
1695: PPUSH
// begin if not mpShipments then
1696: LD_EXP 36
1700: NOT
1701: IFFALSE 1705
// exit ;
1703: GO 2464
// case mpShipments of 1 :
1705: LD_EXP 36
1709: PUSH
1710: LD_INT 1
1712: DOUBLE
1713: EQUAL
1714: IFTRUE 1718
1716: GO 1761
1718: POP
// begin time := 0 0$30 ;
1719: LD_ADDR_VAR 0 10
1723: PUSH
1724: LD_INT 1050
1726: ST_TO_ADDR
// normalTime := 0 0$30 ;
1727: LD_ADDR_VAR 0 11
1731: PUSH
1732: LD_INT 1050
1734: ST_TO_ADDR
// maxTime := 1 1$20 ;
1735: LD_ADDR_VAR 0 13
1739: PUSH
1740: LD_INT 2800
1742: ST_TO_ADDR
// delayTime := 0 0$5 ;
1743: LD_ADDR_VAR 0 12
1747: PUSH
1748: LD_INT 175
1750: ST_TO_ADDR
// additionalSpawnPhase := 10 ;
1751: LD_ADDR_VAR 0 5
1755: PUSH
1756: LD_INT 10
1758: ST_TO_ADDR
// end ; 2 :
1759: GO 1915
1761: LD_INT 2
1763: DOUBLE
1764: EQUAL
1765: IFTRUE 1769
1767: GO 1812
1769: POP
// begin time := 0 0$25 ;
1770: LD_ADDR_VAR 0 10
1774: PUSH
1775: LD_INT 875
1777: ST_TO_ADDR
// normalTime := 0 0$25 ;
1778: LD_ADDR_VAR 0 11
1782: PUSH
1783: LD_INT 875
1785: ST_TO_ADDR
// maxTime := 1 1$10 ;
1786: LD_ADDR_VAR 0 13
1790: PUSH
1791: LD_INT 2450
1793: ST_TO_ADDR
// delayTime := 0 0$4 ;
1794: LD_ADDR_VAR 0 12
1798: PUSH
1799: LD_INT 140
1801: ST_TO_ADDR
// additionalSpawnPhase := 8 ;
1802: LD_ADDR_VAR 0 5
1806: PUSH
1807: LD_INT 8
1809: ST_TO_ADDR
// end ; 3 :
1810: GO 1915
1812: LD_INT 3
1814: DOUBLE
1815: EQUAL
1816: IFTRUE 1820
1818: GO 1863
1820: POP
// begin time := 0 0$20 ;
1821: LD_ADDR_VAR 0 10
1825: PUSH
1826: LD_INT 700
1828: ST_TO_ADDR
// normalTime := 0 0$20 ;
1829: LD_ADDR_VAR 0 11
1833: PUSH
1834: LD_INT 700
1836: ST_TO_ADDR
// maxTime := 1 1$00 ;
1837: LD_ADDR_VAR 0 13
1841: PUSH
1842: LD_INT 2100
1844: ST_TO_ADDR
// delayTime := 0 0$3 ;
1845: LD_ADDR_VAR 0 12
1849: PUSH
1850: LD_INT 105
1852: ST_TO_ADDR
// additionalSpawnPhase := 6 ;
1853: LD_ADDR_VAR 0 5
1857: PUSH
1858: LD_INT 6
1860: ST_TO_ADDR
// end ; 4 :
1861: GO 1915
1863: LD_INT 4
1865: DOUBLE
1866: EQUAL
1867: IFTRUE 1871
1869: GO 1914
1871: POP
// begin time := 0 0$15 ;
1872: LD_ADDR_VAR 0 10
1876: PUSH
1877: LD_INT 525
1879: ST_TO_ADDR
// normalTime := 0 0$15 ;
1880: LD_ADDR_VAR 0 11
1884: PUSH
1885: LD_INT 525
1887: ST_TO_ADDR
// maxTime := 0 0$55 ;
1888: LD_ADDR_VAR 0 13
1892: PUSH
1893: LD_INT 1925
1895: ST_TO_ADDR
// delayTime := 0 0$2 ;
1896: LD_ADDR_VAR 0 12
1900: PUSH
1901: LD_INT 70
1903: ST_TO_ADDR
// additionalSpawnPhase := 5 ;
1904: LD_ADDR_VAR 0 5
1908: PUSH
1909: LD_INT 5
1911: ST_TO_ADDR
// end ; end ;
1912: GO 1915
1914: POP
// areas := [ IslandArea1 , IslandArea2 ] ;
1915: LD_ADDR_VAR 0 8
1919: PUSH
1920: LD_INT 23
1922: PUSH
1923: LD_INT 24
1925: PUSH
1926: EMPTY
1927: LIST
1928: LIST
1929: ST_TO_ADDR
// areasPhase := [ [ ] , [ ] ] ;
1930: LD_ADDR_VAR 0 9
1934: PUSH
1935: EMPTY
1936: PUSH
1937: EMPTY
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: ST_TO_ADDR
// tmp := [ [ CR1Phase1 , CR2Phase1 , CR3Phase1 , CR4Phase1 , CR5Phase1 , CR6Phase1 , CR7Phase1 , CR8Phase1 ] , [ CR1Phase2 , CR2Phase2 , CR3Phase2 , CR4Phase2 , CR5Phase2 , CR6Phase2 , CR7Phase2 , CR8Phase2 ] ] ;
1943: LD_ADDR_VAR 0 7
1947: PUSH
1948: LD_INT 28
1950: PUSH
1951: LD_INT 29
1953: PUSH
1954: LD_INT 30
1956: PUSH
1957: LD_INT 31
1959: PUSH
1960: LD_INT 32
1962: PUSH
1963: LD_INT 33
1965: PUSH
1966: LD_INT 34
1968: PUSH
1969: LD_INT 35
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: PUSH
1982: LD_INT 36
1984: PUSH
1985: LD_INT 37
1987: PUSH
1988: LD_INT 38
1990: PUSH
1991: LD_INT 39
1993: PUSH
1994: LD_INT 40
1996: PUSH
1997: LD_INT 41
1999: PUSH
2000: LD_INT 42
2002: PUSH
2003: LD_INT 43
2005: PUSH
2006: EMPTY
2007: LIST
2008: LIST
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: LIST
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: ST_TO_ADDR
// for i := 1 to 8 do
2020: LD_ADDR_VAR 0 1
2024: PUSH
2025: DOUBLE
2026: LD_INT 1
2028: DEC
2029: ST_TO_ADDR
2030: LD_INT 8
2032: PUSH
2033: FOR_TO
2034: IFFALSE 2147
// begin if not mpSidePositions [ i ] then
2036: LD_EXP 16
2040: PUSH
2041: LD_VAR 0 1
2045: ARRAY
2046: NOT
2047: IFFALSE 2051
// continue ;
2049: GO 2033
// for j := 1 to 2 do
2051: LD_ADDR_VAR 0 2
2055: PUSH
2056: DOUBLE
2057: LD_INT 1
2059: DEC
2060: ST_TO_ADDR
2061: LD_INT 2
2063: PUSH
2064: FOR_TO
2065: IFFALSE 2143
// areasPhase := Replace ( areasPhase , j , Replace ( areasPhase [ j ] , areasPhase [ j ] + 1 , tmp [ j ] [ mpSidePositions [ i ] ] ) ) ;
2067: LD_ADDR_VAR 0 9
2071: PUSH
2072: LD_VAR 0 9
2076: PPUSH
2077: LD_VAR 0 2
2081: PPUSH
2082: LD_VAR 0 9
2086: PUSH
2087: LD_VAR 0 2
2091: ARRAY
2092: PPUSH
2093: LD_VAR 0 9
2097: PUSH
2098: LD_VAR 0 2
2102: ARRAY
2103: PUSH
2104: LD_INT 1
2106: PLUS
2107: PPUSH
2108: LD_VAR 0 7
2112: PUSH
2113: LD_VAR 0 2
2117: ARRAY
2118: PUSH
2119: LD_EXP 16
2123: PUSH
2124: LD_VAR 0 1
2128: ARRAY
2129: ARRAY
2130: PPUSH
2131: CALL_OW 1
2135: PPUSH
2136: CALL_OW 1
2140: ST_TO_ADDR
2141: GO 2064
2143: POP
2144: POP
// end ;
2145: GO 2033
2147: POP
2148: POP
// x := 1 ;
2149: LD_ADDR_VAR 0 3
2153: PUSH
2154: LD_INT 1
2156: ST_TO_ADDR
// phase := 1 ;
2157: LD_ADDR_VAR 0 4
2161: PUSH
2162: LD_INT 1
2164: ST_TO_ADDR
// repeat wait ( time ) ;
2165: LD_VAR 0 10
2169: PPUSH
2170: CALL_OW 67
// x := Inc ( x ) ;
2174: LD_ADDR_VAR 0 3
2178: PUSH
2179: LD_VAR 0 3
2183: PPUSH
2184: CALL 63753 0 1
2188: ST_TO_ADDR
// f := Inc ( f ) ;
2189: LD_ADDR_VAR 0 6
2193: PUSH
2194: LD_VAR 0 6
2198: PPUSH
2199: CALL 63753 0 1
2203: ST_TO_ADDR
// if x > 5 then
2204: LD_VAR 0 3
2208: PUSH
2209: LD_INT 5
2211: GREATER
2212: IFFALSE 2222
// x := 1 ;
2214: LD_ADDR_VAR 0 3
2218: PUSH
2219: LD_INT 1
2221: ST_TO_ADDR
// if f mod 20 = 0 then
2222: LD_VAR 0 6
2226: PUSH
2227: LD_INT 20
2229: MOD
2230: PUSH
2231: LD_INT 0
2233: EQUAL
2234: IFFALSE 2251
// phase := Inc ( phase ) ;
2236: LD_ADDR_VAR 0 4
2240: PUSH
2241: LD_VAR 0 4
2245: PPUSH
2246: CALL 63753 0 1
2250: ST_TO_ADDR
// if f mod additionalSpawnPhase = 0 then
2251: LD_VAR 0 6
2255: PUSH
2256: LD_VAR 0 5
2260: MOD
2261: PUSH
2262: LD_INT 0
2264: EQUAL
2265: IFFALSE 2282
// CreateCratesArea ( x , worldCratesArea , true ) ;
2267: LD_VAR 0 3
2271: PPUSH
2272: LD_INT 61
2274: PPUSH
2275: LD_INT 1
2277: PPUSH
2278: CALL_OW 55
// if phase > 2 then
2282: LD_VAR 0 4
2286: PUSH
2287: LD_INT 2
2289: GREATER
2290: IFFALSE 2300
// phase := 1 ;
2292: LD_ADDR_VAR 0 4
2296: PUSH
2297: LD_INT 1
2299: ST_TO_ADDR
// for i in areas do
2300: LD_ADDR_VAR 0 1
2304: PUSH
2305: LD_VAR 0 8
2309: PUSH
2310: FOR_IN
2311: IFFALSE 2362
// begin if GetResourceArea ( i , mat_cans ) < 15 and phase = 2 then
2313: LD_VAR 0 1
2317: PPUSH
2318: LD_INT 1
2320: PPUSH
2321: CALL_OW 287
2325: PUSH
2326: LD_INT 15
2328: LESS
2329: IFFALSE 2341
2331: PUSH
2332: LD_VAR 0 4
2336: PUSH
2337: LD_INT 2
2339: EQUAL
2340: AND
2341: IFFALSE 2360
// begin CreateCratesArea ( x , i , true ) ;
2343: LD_VAR 0 3
2347: PPUSH
2348: LD_VAR 0 1
2352: PPUSH
2353: LD_INT 1
2355: PPUSH
2356: CALL_OW 55
// end ; end ;
2360: GO 2310
2362: POP
2363: POP
// for i in areasPhase [ phase ] do
2364: LD_ADDR_VAR 0 1
2368: PUSH
2369: LD_VAR 0 9
2373: PUSH
2374: LD_VAR 0 4
2378: ARRAY
2379: PUSH
2380: FOR_IN
2381: IFFALSE 2420
// begin if GetResourceArea ( i , mat_cans ) < 25 then
2383: LD_VAR 0 1
2387: PPUSH
2388: LD_INT 1
2390: PPUSH
2391: CALL_OW 287
2395: PUSH
2396: LD_INT 25
2398: LESS
2399: IFFALSE 2418
// begin CreateCratesArea ( x , i , true ) ;
2401: LD_VAR 0 3
2405: PPUSH
2406: LD_VAR 0 1
2410: PPUSH
2411: LD_INT 1
2413: PPUSH
2414: CALL_OW 55
// end ; end ;
2418: GO 2380
2420: POP
2421: POP
// time := time + delayTime ;
2422: LD_ADDR_VAR 0 10
2426: PUSH
2427: LD_VAR 0 10
2431: PUSH
2432: LD_VAR 0 12
2436: PLUS
2437: ST_TO_ADDR
// if time > maxTime then
2438: LD_VAR 0 10
2442: PUSH
2443: LD_VAR 0 13
2447: GREATER
2448: IFFALSE 2460
// time := normalTime ;
2450: LD_ADDR_VAR 0 10
2454: PUSH
2455: LD_VAR 0 11
2459: ST_TO_ADDR
// until false ;
2460: LD_INT 0
2462: IFFALSE 2165
// end ;
2464: PPOPN 13
2466: END
// every 0 0$2 trigger mpTeleports do var i , tmp ;
2467: LD_EXP 53
2471: IFFALSE 2665
2473: GO 2475
2475: DISABLE
2476: LD_INT 0
2478: PPUSH
2479: PPUSH
// begin enable ;
2480: ENABLE
// tmp := [ [ T1TeleportArea , T4TeleportExitArea ] , [ T2TeleportArea , T3TeleportExitArea ] , [ T3TeleportArea , T2TeleportExitArea ] , [ T4TeleportArea , T1TeleportExitArea ] , [ T5TeleportArea , T6TeleportExitArea ] , [ T6TeleportArea , T5TeleportExitArea ] , [ T7TeleportArea , IslandArea1 ] , [ T8TeleportArea , IslandArea1 ] , [ T9TeleportArea , IslandArea1 ] , [ T10TeleportArea , IslandArea1 ] ] ;
2481: LD_ADDR_VAR 0 2
2485: PUSH
2486: LD_INT 1
2488: PUSH
2489: LD_INT 53
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: PUSH
2496: LD_INT 2
2498: PUSH
2499: LD_INT 52
2501: PUSH
2502: EMPTY
2503: LIST
2504: LIST
2505: PUSH
2506: LD_INT 3
2508: PUSH
2509: LD_INT 51
2511: PUSH
2512: EMPTY
2513: LIST
2514: LIST
2515: PUSH
2516: LD_INT 4
2518: PUSH
2519: LD_INT 50
2521: PUSH
2522: EMPTY
2523: LIST
2524: LIST
2525: PUSH
2526: LD_INT 5
2528: PUSH
2529: LD_INT 55
2531: PUSH
2532: EMPTY
2533: LIST
2534: LIST
2535: PUSH
2536: LD_INT 6
2538: PUSH
2539: LD_INT 54
2541: PUSH
2542: EMPTY
2543: LIST
2544: LIST
2545: PUSH
2546: LD_INT 57
2548: PUSH
2549: LD_INT 23
2551: PUSH
2552: EMPTY
2553: LIST
2554: LIST
2555: PUSH
2556: LD_INT 58
2558: PUSH
2559: LD_INT 23
2561: PUSH
2562: EMPTY
2563: LIST
2564: LIST
2565: PUSH
2566: LD_INT 59
2568: PUSH
2569: LD_INT 23
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PUSH
2576: LD_INT 60
2578: PUSH
2579: LD_INT 23
2581: PUSH
2582: EMPTY
2583: LIST
2584: LIST
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: LIST
2593: LIST
2594: LIST
2595: LIST
2596: LIST
2597: ST_TO_ADDR
// for i in tmp do
2598: LD_ADDR_VAR 0 1
2602: PUSH
2603: LD_VAR 0 2
2607: PUSH
2608: FOR_IN
2609: IFFALSE 2663
// CheckBuildUpArea ( i [ 1 ] , i [ 2 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
2611: LD_VAR 0 1
2615: PUSH
2616: LD_INT 1
2618: ARRAY
2619: PPUSH
2620: LD_VAR 0 1
2624: PUSH
2625: LD_INT 2
2627: ARRAY
2628: PPUSH
2629: LD_INT 2
2631: PUSH
2632: LD_INT 21
2634: PUSH
2635: LD_INT 1
2637: PUSH
2638: EMPTY
2639: LIST
2640: LIST
2641: PUSH
2642: LD_INT 21
2644: PUSH
2645: LD_INT 2
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: LIST
2656: PPUSH
2657: CALL_OW 513
2661: GO 2608
2663: POP
2664: POP
// end ; end_of_file
2665: PPOPN 2
2667: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2668: LD_VAR 0 1
2672: PPUSH
2673: CALL 17706 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2677: LD_VAR 0 1
2681: PPUSH
2682: CALL 12198 0 1
// end ;
2686: PPOPN 1
2688: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2689: LD_VAR 0 1
2693: PPUSH
2694: CALL 17723 0 1
// end ;
2698: PPOPN 1
2700: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2701: LD_VAR 0 1
2705: PPUSH
2706: CALL 13251 0 1
2710: PPOPN 1
2712: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2713: LD_VAR 0 1
2717: PPUSH
2718: LD_VAR 0 2
2722: PPUSH
2723: CALL 17764 0 2
2727: PPOPN 2
2729: END
// on VehicleConstruction_ApeConsumed ( factory , un ) do Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ;
2730: LD_VAR 0 1
2734: PPUSH
2735: LD_VAR 0 2
2739: PPUSH
2740: CALL 13004 0 2
2744: PPOPN 2
2746: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2747: LD_VAR 0 1
2751: PPUSH
2752: LD_VAR 0 2
2756: PPUSH
2757: LD_VAR 0 3
2761: PPUSH
2762: CALL 13304 0 3
2766: PPOPN 3
2768: END
// on OilExtracted ( building , side , base , amount ) do Multiplayer_OilExtracted ( building , side , base , amount ) ;
2769: LD_VAR 0 1
2773: PPUSH
2774: LD_VAR 0 2
2778: PPUSH
2779: LD_VAR 0 3
2783: PPUSH
2784: LD_VAR 0 4
2788: PPUSH
2789: CALL 13476 0 4
2793: PPOPN 4
2795: END
// on SibExtracted ( building , side , base , amount ) do Multiplayer_SibExtracted ( building , side , base , amount ) ;
2796: LD_VAR 0 1
2800: PPUSH
2801: LD_VAR 0 2
2805: PPUSH
2806: LD_VAR 0 3
2810: PPUSH
2811: LD_VAR 0 4
2815: PPUSH
2816: CALL 13732 0 4
2820: PPOPN 4
2822: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
2823: LD_VAR 0 1
2827: PPUSH
2828: LD_VAR 0 2
2832: PPUSH
2833: LD_VAR 0 3
2837: PPUSH
2838: LD_VAR 0 4
2842: PPUSH
2843: LD_VAR 0 5
2847: PPUSH
2848: CALL 13988 0 5
2852: PPOPN 5
2854: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
2855: LD_VAR 0 1
2859: PPUSH
2860: LD_VAR 0 2
2864: PPUSH
2865: LD_VAR 0 3
2869: PPUSH
2870: LD_VAR 0 4
2874: PPUSH
2875: CALL 14091 0 4
2879: PPOPN 4
2881: END
// export artifactsPos , artifactsRecharge , artifactsSibCost , artifactsResearched , artifactsReady ; export artifactsResDifficulty , artifactsResProgress , artifactsButtons , artifactsLabsWorking ; export function InitArtifact ; var i ; begin
2882: LD_INT 0
2884: PPUSH
2885: PPUSH
// for i := 1 to 8 do
2886: LD_ADDR_VAR 0 2
2890: PUSH
2891: DOUBLE
2892: LD_INT 1
2894: DEC
2895: ST_TO_ADDR
2896: LD_INT 8
2898: PUSH
2899: FOR_TO
2900: IFFALSE 2916
// SetArtifactRes ( i , true ) ;
2902: LD_VAR 0 2
2906: PPUSH
2907: LD_INT 1
2909: PPUSH
2910: CALL_OW 467
2914: GO 2899
2916: POP
2917: POP
// CreateResourcesArea ( mat_artifact , 3 , ArtifactArea1 , false ) ;
2918: LD_INT 4
2920: PPUSH
2921: LD_INT 3
2923: PPUSH
2924: LD_INT 25
2926: PPUSH
2927: LD_INT 0
2929: PPUSH
2930: CALL_OW 59
// CreateResourcesArea ( mat_artifact , 4 , ArtifactArea2 , false ) ;
2934: LD_INT 4
2936: PPUSH
2937: LD_INT 4
2939: PPUSH
2940: LD_INT 26
2942: PPUSH
2943: LD_INT 0
2945: PPUSH
2946: CALL_OW 59
// CreateResourcesArea ( mat_artifact , 5 , ArtifactArea3 , false ) ;
2950: LD_INT 4
2952: PPUSH
2953: LD_INT 5
2955: PPUSH
2956: LD_INT 27
2958: PPUSH
2959: LD_INT 0
2961: PPUSH
2962: CALL_OW 59
// artifactsPos := [ [ ] , [ ] , [ ] ] ;
2966: LD_ADDR_EXP 3
2970: PUSH
2971: EMPTY
2972: PUSH
2973: EMPTY
2974: PUSH
2975: EMPTY
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: LIST
2981: ST_TO_ADDR
// artifactsRecharge := [ 0 0$30 , 1 1$20 , 5 5$00 ] ;
2982: LD_ADDR_EXP 4
2986: PUSH
2987: LD_INT 1050
2989: PUSH
2990: LD_INT 2800
2992: PUSH
2993: LD_INT 10500
2995: PUSH
2996: EMPTY
2997: LIST
2998: LIST
2999: LIST
3000: ST_TO_ADDR
// artifactsSibCost := [ 10 , 35 , 100 ] ;
3001: LD_ADDR_EXP 5
3005: PUSH
3006: LD_INT 10
3008: PUSH
3009: LD_INT 35
3011: PUSH
3012: LD_INT 100
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: LIST
3019: ST_TO_ADDR
// artifactsResDifficulty := [ 300 , 500 , 800 ] ;
3020: LD_ADDR_EXP 8
3024: PUSH
3025: LD_INT 300
3027: PUSH
3028: LD_INT 500
3030: PUSH
3031: LD_INT 800
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: LIST
3038: ST_TO_ADDR
// artifactsLabsWorking := [ [ ] , [ ] , [ ] ] ;
3039: LD_ADDR_EXP 11
3043: PUSH
3044: EMPTY
3045: PUSH
3046: EMPTY
3047: PUSH
3048: EMPTY
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: LIST
3054: ST_TO_ADDR
// artifactsResearched := [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] ;
3055: LD_ADDR_EXP 6
3059: PUSH
3060: LD_INT 0
3062: PUSH
3063: LD_INT 0
3065: PUSH
3066: LD_INT 0
3068: PUSH
3069: EMPTY
3070: LIST
3071: LIST
3072: LIST
3073: PUSH
3074: LD_INT 0
3076: PUSH
3077: LD_INT 0
3079: PUSH
3080: LD_INT 0
3082: PUSH
3083: EMPTY
3084: LIST
3085: LIST
3086: LIST
3087: PUSH
3088: LD_INT 0
3090: PUSH
3091: LD_INT 0
3093: PUSH
3094: LD_INT 0
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: LIST
3101: PUSH
3102: LD_INT 0
3104: PUSH
3105: LD_INT 0
3107: PUSH
3108: LD_INT 0
3110: PUSH
3111: EMPTY
3112: LIST
3113: LIST
3114: LIST
3115: PUSH
3116: LD_INT 0
3118: PUSH
3119: LD_INT 0
3121: PUSH
3122: LD_INT 0
3124: PUSH
3125: EMPTY
3126: LIST
3127: LIST
3128: LIST
3129: PUSH
3130: LD_INT 0
3132: PUSH
3133: LD_INT 0
3135: PUSH
3136: LD_INT 0
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: LIST
3143: PUSH
3144: LD_INT 0
3146: PUSH
3147: LD_INT 0
3149: PUSH
3150: LD_INT 0
3152: PUSH
3153: EMPTY
3154: LIST
3155: LIST
3156: LIST
3157: PUSH
3158: LD_INT 0
3160: PUSH
3161: LD_INT 0
3163: PUSH
3164: LD_INT 0
3166: PUSH
3167: EMPTY
3168: LIST
3169: LIST
3170: LIST
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: LIST
3176: LIST
3177: LIST
3178: LIST
3179: LIST
3180: LIST
3181: ST_TO_ADDR
// artifactsResProgress := [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] ;
3182: LD_ADDR_EXP 9
3186: PUSH
3187: LD_INT 0
3189: PUSH
3190: LD_INT 0
3192: PUSH
3193: LD_INT 0
3195: PUSH
3196: EMPTY
3197: LIST
3198: LIST
3199: LIST
3200: PUSH
3201: LD_INT 0
3203: PUSH
3204: LD_INT 0
3206: PUSH
3207: LD_INT 0
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: LIST
3214: PUSH
3215: LD_INT 0
3217: PUSH
3218: LD_INT 0
3220: PUSH
3221: LD_INT 0
3223: PUSH
3224: EMPTY
3225: LIST
3226: LIST
3227: LIST
3228: PUSH
3229: LD_INT 0
3231: PUSH
3232: LD_INT 0
3234: PUSH
3235: LD_INT 0
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: LIST
3242: PUSH
3243: LD_INT 0
3245: PUSH
3246: LD_INT 0
3248: PUSH
3249: LD_INT 0
3251: PUSH
3252: EMPTY
3253: LIST
3254: LIST
3255: LIST
3256: PUSH
3257: LD_INT 0
3259: PUSH
3260: LD_INT 0
3262: PUSH
3263: LD_INT 0
3265: PUSH
3266: EMPTY
3267: LIST
3268: LIST
3269: LIST
3270: PUSH
3271: LD_INT 0
3273: PUSH
3274: LD_INT 0
3276: PUSH
3277: LD_INT 0
3279: PUSH
3280: EMPTY
3281: LIST
3282: LIST
3283: LIST
3284: PUSH
3285: LD_INT 0
3287: PUSH
3288: LD_INT 0
3290: PUSH
3291: LD_INT 0
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: LIST
3298: PUSH
3299: EMPTY
3300: LIST
3301: LIST
3302: LIST
3303: LIST
3304: LIST
3305: LIST
3306: LIST
3307: LIST
3308: ST_TO_ADDR
// artifactsReady := [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] ;
3309: LD_ADDR_EXP 7
3313: PUSH
3314: LD_INT 0
3316: PUSH
3317: LD_INT 0
3319: PUSH
3320: LD_INT 0
3322: PUSH
3323: EMPTY
3324: LIST
3325: LIST
3326: LIST
3327: PUSH
3328: LD_INT 0
3330: PUSH
3331: LD_INT 0
3333: PUSH
3334: LD_INT 0
3336: PUSH
3337: EMPTY
3338: LIST
3339: LIST
3340: LIST
3341: PUSH
3342: LD_INT 0
3344: PUSH
3345: LD_INT 0
3347: PUSH
3348: LD_INT 0
3350: PUSH
3351: EMPTY
3352: LIST
3353: LIST
3354: LIST
3355: PUSH
3356: LD_INT 0
3358: PUSH
3359: LD_INT 0
3361: PUSH
3362: LD_INT 0
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: LIST
3369: PUSH
3370: LD_INT 0
3372: PUSH
3373: LD_INT 0
3375: PUSH
3376: LD_INT 0
3378: PUSH
3379: EMPTY
3380: LIST
3381: LIST
3382: LIST
3383: PUSH
3384: LD_INT 0
3386: PUSH
3387: LD_INT 0
3389: PUSH
3390: LD_INT 0
3392: PUSH
3393: EMPTY
3394: LIST
3395: LIST
3396: LIST
3397: PUSH
3398: LD_INT 0
3400: PUSH
3401: LD_INT 0
3403: PUSH
3404: LD_INT 0
3406: PUSH
3407: EMPTY
3408: LIST
3409: LIST
3410: LIST
3411: PUSH
3412: LD_INT 0
3414: PUSH
3415: LD_INT 0
3417: PUSH
3418: LD_INT 0
3420: PUSH
3421: EMPTY
3422: LIST
3423: LIST
3424: LIST
3425: PUSH
3426: EMPTY
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: LIST
3435: ST_TO_ADDR
// artifactsButtons := [ [ art_use_eye , art_place , art_exp_left ] , [ art_use_sibexplosion , art_unit , art_exp_mid ] , [ art_use_atom , art_place , art_exp_right ] ] ;
3436: LD_ADDR_EXP 10
3440: PUSH
3441: LD_INT 4
3443: PUSH
3444: LD_INT 3
3446: PUSH
3447: LD_INT 1
3449: PUSH
3450: EMPTY
3451: LIST
3452: LIST
3453: LIST
3454: PUSH
3455: LD_INT 5
3457: PUSH
3458: LD_INT 4
3460: PUSH
3461: LD_INT 2
3463: PUSH
3464: EMPTY
3465: LIST
3466: LIST
3467: LIST
3468: PUSH
3469: LD_INT 7
3471: PUSH
3472: LD_INT 3
3474: PUSH
3475: LD_INT 3
3477: PUSH
3478: EMPTY
3479: LIST
3480: LIST
3481: LIST
3482: PUSH
3483: EMPTY
3484: LIST
3485: LIST
3486: LIST
3487: ST_TO_ADDR
// end ;
3488: LD_VAR 0 1
3492: RET
// function TeleportArtefact ( number , area ) ; var i , hex , tmp , cargo ; begin
3493: LD_INT 0
3495: PPUSH
3496: PPUSH
3497: PPUSH
3498: PPUSH
3499: PPUSH
// if not number in [ 3 , 4 , 5 ] then
3500: LD_VAR 0 1
3504: PUSH
3505: LD_INT 3
3507: PUSH
3508: LD_INT 4
3510: PUSH
3511: LD_INT 5
3513: PUSH
3514: EMPTY
3515: LIST
3516: LIST
3517: LIST
3518: IN
3519: NOT
3520: IFFALSE 3524
// exit ;
3522: GO 3938
// hex := FindArtifact ( number ) ;
3524: LD_ADDR_VAR 0 5
3528: PUSH
3529: LD_VAR 0 1
3533: PPUSH
3534: CALL_OW 469
3538: ST_TO_ADDR
// if hex then
3539: LD_VAR 0 5
3543: IFFALSE 3814
// begin if InArea ( hex [ 1 ] , hex [ 2 ] , area ) then
3545: LD_VAR 0 5
3549: PUSH
3550: LD_INT 1
3552: ARRAY
3553: PPUSH
3554: LD_VAR 0 5
3558: PUSH
3559: LD_INT 2
3561: ARRAY
3562: PPUSH
3563: LD_VAR 0 2
3567: PPUSH
3568: CALL_OW 309
3572: IFFALSE 3576
// exit ;
3574: GO 3938
// if artifactsLabsWorking [ number - 2 ] then
3576: LD_EXP 11
3580: PUSH
3581: LD_VAR 0 1
3585: PUSH
3586: LD_INT 2
3588: MINUS
3589: ARRAY
3590: IFFALSE 3695
// begin for i in artifactsLabsWorking [ number - 2 ] do
3592: LD_ADDR_VAR 0 4
3596: PUSH
3597: LD_EXP 11
3601: PUSH
3602: LD_VAR 0 1
3606: PUSH
3607: LD_INT 2
3609: MINUS
3610: ARRAY
3611: PUSH
3612: FOR_IN
3613: IFFALSE 3667
// begin SetArtifactUse ( GetSide ( i ) , artifactsButtons [ number - 2 ] [ 3 ] , art_no , i ) ;
3615: LD_VAR 0 4
3619: PPUSH
3620: CALL_OW 255
3624: PPUSH
3625: LD_EXP 10
3629: PUSH
3630: LD_VAR 0 1
3634: PUSH
3635: LD_INT 2
3637: MINUS
3638: ARRAY
3639: PUSH
3640: LD_INT 3
3642: ARRAY
3643: PPUSH
3644: LD_INT 0
3646: PPUSH
3647: LD_VAR 0 4
3651: PPUSH
3652: CALL_OW 468
// ComCancel ( i ) ;
3656: LD_VAR 0 4
3660: PPUSH
3661: CALL_OW 127
// end ;
3665: GO 3612
3667: POP
3668: POP
// artifactsLabsWorking := Replace ( artifactsLabsWorking , number - 2 , [ ] ) ;
3669: LD_ADDR_EXP 11
3673: PUSH
3674: LD_EXP 11
3678: PPUSH
3679: LD_VAR 0 1
3683: PUSH
3684: LD_INT 2
3686: MINUS
3687: PPUSH
3688: EMPTY
3689: PPUSH
3690: CALL_OW 1
3694: ST_TO_ADDR
// end ; tmp := FilterUnitsInArea ( area , [ f_placed ] ) ;
3695: LD_ADDR_VAR 0 6
3699: PUSH
3700: LD_VAR 0 2
3704: PPUSH
3705: LD_INT 52
3707: PUSH
3708: EMPTY
3709: LIST
3710: PPUSH
3711: CALL_OW 70
3715: ST_TO_ADDR
// if tmp then
3716: LD_VAR 0 6
3720: IFFALSE 3748
// for i in tmp do
3722: LD_ADDR_VAR 0 4
3726: PUSH
3727: LD_VAR 0 6
3731: PUSH
3732: FOR_IN
3733: IFFALSE 3746
// DestroyUnit ( i ) ;
3735: LD_VAR 0 4
3739: PPUSH
3740: CALL_OW 65
3744: GO 3732
3746: POP
3747: POP
// MoveAreaXY ( artifactTeleportArea , hex [ 1 ] , hex [ 2 ] ) ;
3748: LD_INT 56
3750: PPUSH
3751: LD_VAR 0 5
3755: PUSH
3756: LD_INT 1
3758: ARRAY
3759: PPUSH
3760: LD_VAR 0 5
3764: PUSH
3765: LD_INT 2
3767: ARRAY
3768: PPUSH
3769: CALL_OW 425
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
3773: LD_VAR 0 5
3777: PUSH
3778: LD_INT 1
3780: ARRAY
3781: PPUSH
3782: LD_VAR 0 5
3786: PUSH
3787: LD_INT 2
3789: ARRAY
3790: PPUSH
3791: CALL_OW 494
// wait ( 30 ) ;
3795: LD_INT 30
3797: PPUSH
3798: CALL_OW 67
// EraseResourceArea ( artifactTeleportArea , mat_artefact ) ;
3802: LD_INT 56
3804: PPUSH
3805: LD_INT 4
3807: PPUSH
3808: CALL_OW 286
// end else
3812: GO 3918
// begin cargo := FilterAllUnits ( [ [ f_tag , number ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
3814: LD_ADDR_VAR 0 7
3818: PUSH
3819: LD_INT 120
3821: PUSH
3822: LD_VAR 0 1
3826: PUSH
3827: EMPTY
3828: LIST
3829: LIST
3830: PUSH
3831: LD_INT 2
3833: PUSH
3834: LD_INT 34
3836: PUSH
3837: LD_INT 12
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: PUSH
3844: LD_INT 34
3846: PUSH
3847: LD_INT 32
3849: PUSH
3850: EMPTY
3851: LIST
3852: LIST
3853: PUSH
3854: LD_INT 34
3856: PUSH
3857: LD_INT 51
3859: PUSH
3860: EMPTY
3861: LIST
3862: LIST
3863: PUSH
3864: LD_INT 34
3866: PUSH
3867: LD_INT 89
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: PUSH
3874: EMPTY
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: PUSH
3881: EMPTY
3882: LIST
3883: LIST
3884: PPUSH
3885: CALL_OW 69
3889: ST_TO_ADDR
// if not cargo then
3890: LD_VAR 0 7
3894: NOT
3895: IFFALSE 3899
// exit ;
3897: GO 3938
// SetCargo ( cargo [ 1 ] , mat_artifact , 0 ) ;
3899: LD_VAR 0 7
3903: PUSH
3904: LD_INT 1
3906: ARRAY
3907: PPUSH
3908: LD_INT 4
3910: PPUSH
3911: LD_INT 0
3913: PPUSH
3914: CALL_OW 290
// end ; CreateResourcesArea ( mat_artifact , number , area , false ) ;
3918: LD_INT 4
3920: PPUSH
3921: LD_VAR 0 1
3925: PPUSH
3926: LD_VAR 0 2
3930: PPUSH
3931: LD_INT 0
3933: PPUSH
3934: CALL_OW 59
// end ;
3938: LD_VAR 0 3
3942: RET
// every 8 8$30 trigger mpArtifacts do
3943: LD_EXP 54
3947: IFFALSE 3963
3949: GO 3951
3951: DISABLE
// begin enable ;
3952: ENABLE
// TeleportArtefact ( 3 , ArtifactArea1 ) ;
3953: LD_INT 3
3955: PPUSH
3956: LD_INT 25
3958: PPUSH
3959: CALL 3493 0 2
// end ;
3963: END
// every 6 6$10 trigger mpArtifacts do
3964: LD_EXP 54
3968: IFFALSE 3984
3970: GO 3972
3972: DISABLE
// begin enable ;
3973: ENABLE
// TeleportArtefact ( 4 , ArtifactArea2 ) ;
3974: LD_INT 4
3976: PPUSH
3977: LD_INT 26
3979: PPUSH
3980: CALL 3493 0 2
// end ;
3984: END
// every 4 4$10 trigger mpArtifacts do
3985: LD_EXP 54
3989: IFFALSE 4005
3991: GO 3993
3993: DISABLE
// begin enable ;
3994: ENABLE
// TeleportArtefact ( 5 , ArtifactArea3 ) ;
3995: LD_INT 5
3997: PPUSH
3998: LD_INT 27
4000: PPUSH
4001: CALL 3493 0 2
// end ;
4005: END
// every 0 0$1 trigger mpArtifacts do var i , pos , j , side , labs , nearestLab ;
4006: LD_EXP 54
4010: IFFALSE 4910
4012: GO 4014
4014: DISABLE
4015: LD_INT 0
4017: PPUSH
4018: PPUSH
4019: PPUSH
4020: PPUSH
4021: PPUSH
4022: PPUSH
// begin enable ;
4023: ENABLE
// for i := 1 to 3 do
4024: LD_ADDR_VAR 0 1
4028: PUSH
4029: DOUBLE
4030: LD_INT 1
4032: DEC
4033: ST_TO_ADDR
4034: LD_INT 3
4036: PUSH
4037: FOR_TO
4038: IFFALSE 4908
// begin pos := FindArtifact ( i + 2 ) ;
4040: LD_ADDR_VAR 0 2
4044: PUSH
4045: LD_VAR 0 1
4049: PUSH
4050: LD_INT 2
4052: PLUS
4053: PPUSH
4054: CALL_OW 469
4058: ST_TO_ADDR
// artifactsPos := Replace ( artifactsPos , i , pos ) ;
4059: LD_ADDR_EXP 3
4063: PUSH
4064: LD_EXP 3
4068: PPUSH
4069: LD_VAR 0 1
4073: PPUSH
4074: LD_VAR 0 2
4078: PPUSH
4079: CALL_OW 1
4083: ST_TO_ADDR
// labs := FilterAllUnits ( [ f_lab , b_lab_siberium ] ) ;
4084: LD_ADDR_VAR 0 5
4088: PUSH
4089: LD_INT 63
4091: PUSH
4092: LD_INT 11
4094: PUSH
4095: EMPTY
4096: LIST
4097: LIST
4098: PPUSH
4099: CALL_OW 69
4103: ST_TO_ADDR
// if not labs then
4104: LD_VAR 0 5
4108: NOT
4109: IFFALSE 4115
// exit ;
4111: POP
4112: POP
4113: GO 4910
// if pos then
4115: LD_VAR 0 2
4119: IFFALSE 4746
// begin if not labs then
4121: LD_VAR 0 5
4125: NOT
4126: IFFALSE 4130
// continue ;
4128: GO 4037
// nearestLab := NearestUnitToXY ( labs , artifactsPos [ i ] [ 1 ] , artifactsPos [ i ] [ 2 ] ) ;
4130: LD_ADDR_VAR 0 6
4134: PUSH
4135: LD_VAR 0 5
4139: PPUSH
4140: LD_EXP 3
4144: PUSH
4145: LD_VAR 0 1
4149: ARRAY
4150: PUSH
4151: LD_INT 1
4153: ARRAY
4154: PPUSH
4155: LD_EXP 3
4159: PUSH
4160: LD_VAR 0 1
4164: ARRAY
4165: PUSH
4166: LD_INT 2
4168: ARRAY
4169: PPUSH
4170: CALL_OW 73
4174: ST_TO_ADDR
// if not nearestLab then
4175: LD_VAR 0 6
4179: NOT
4180: IFFALSE 4280
// begin for j in labs do
4182: LD_ADDR_VAR 0 3
4186: PUSH
4187: LD_VAR 0 5
4191: PUSH
4192: FOR_IN
4193: IFFALSE 4276
// begin side := GetSide ( j ) ;
4195: LD_ADDR_VAR 0 4
4199: PUSH
4200: LD_VAR 0 3
4204: PPUSH
4205: CALL_OW 255
4209: ST_TO_ADDR
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_no , j ) ;
4210: LD_VAR 0 4
4214: PPUSH
4215: LD_EXP 10
4219: PUSH
4220: LD_VAR 0 1
4224: ARRAY
4225: PUSH
4226: LD_INT 3
4228: ARRAY
4229: PPUSH
4230: LD_INT 0
4232: PPUSH
4233: LD_VAR 0 3
4237: PPUSH
4238: CALL_OW 468
// SetArtifactUse ( side , artifactsButtons [ i ] [ 1 ] , art_no , j ) ;
4242: LD_VAR 0 4
4246: PPUSH
4247: LD_EXP 10
4251: PUSH
4252: LD_VAR 0 1
4256: ARRAY
4257: PUSH
4258: LD_INT 1
4260: ARRAY
4261: PPUSH
4262: LD_INT 0
4264: PPUSH
4265: LD_VAR 0 3
4269: PPUSH
4270: CALL_OW 468
// end ;
4274: GO 4192
4276: POP
4277: POP
// continue ;
4278: GO 4037
// end ; if GetDistUnitXY ( nearestLab , artifactsPos [ i ] [ 1 ] , artifactsPos [ i ] [ 2 ] ) < 8 and GetTech ( tech_artifact , GetSide ( nearestLab ) ) = state_researched then
4280: LD_VAR 0 6
4284: PPUSH
4285: LD_EXP 3
4289: PUSH
4290: LD_VAR 0 1
4294: ARRAY
4295: PUSH
4296: LD_INT 1
4298: ARRAY
4299: PPUSH
4300: LD_EXP 3
4304: PUSH
4305: LD_VAR 0 1
4309: ARRAY
4310: PUSH
4311: LD_INT 2
4313: ARRAY
4314: PPUSH
4315: CALL_OW 297
4319: PUSH
4320: LD_INT 8
4322: LESS
4323: IFFALSE 4348
4325: PUSH
4326: LD_INT 24
4328: PPUSH
4329: LD_VAR 0 6
4333: PPUSH
4334: CALL_OW 255
4338: PPUSH
4339: CALL_OW 321
4343: PUSH
4344: LD_INT 2
4346: EQUAL
4347: AND
4348: IFFALSE 4582
// begin side := GetSide ( nearestLab ) ;
4350: LD_ADDR_VAR 0 4
4354: PUSH
4355: LD_VAR 0 6
4359: PPUSH
4360: CALL_OW 255
4364: ST_TO_ADDR
// if not artifactsResearched [ side ] [ i ] then
4365: LD_EXP 6
4369: PUSH
4370: LD_VAR 0 4
4374: ARRAY
4375: PUSH
4376: LD_VAR 0 1
4380: ARRAY
4381: NOT
4382: IFFALSE 4467
// begin if BuildingStatus ( nearestLab ) = bs_idle then
4384: LD_VAR 0 6
4388: PPUSH
4389: CALL_OW 461
4393: PUSH
4394: LD_INT 2
4396: EQUAL
4397: IFFALSE 4433
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_instant , nearestLab ) else
4399: LD_VAR 0 4
4403: PPUSH
4404: LD_EXP 10
4408: PUSH
4409: LD_VAR 0 1
4413: ARRAY
4414: PUSH
4415: LD_INT 3
4417: ARRAY
4418: PPUSH
4419: LD_INT 2
4421: PPUSH
4422: LD_VAR 0 6
4426: PPUSH
4427: CALL_OW 468
4431: GO 4465
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_gray , nearestLab ) ;
4433: LD_VAR 0 4
4437: PPUSH
4438: LD_EXP 10
4442: PUSH
4443: LD_VAR 0 1
4447: ARRAY
4448: PUSH
4449: LD_INT 3
4451: ARRAY
4452: PPUSH
4453: LD_INT 1
4455: PPUSH
4456: LD_VAR 0 6
4460: PPUSH
4461: CALL_OW 468
// end else
4465: GO 4580
// begin if BuildingStatus ( nearestLab ) = bs_idle and artifactsReady [ side ] [ i ] then
4467: LD_VAR 0 6
4471: PPUSH
4472: CALL_OW 461
4476: PUSH
4477: LD_INT 2
4479: EQUAL
4480: IFFALSE 4500
4482: PUSH
4483: LD_EXP 7
4487: PUSH
4488: LD_VAR 0 4
4492: ARRAY
4493: PUSH
4494: LD_VAR 0 1
4498: ARRAY
4499: AND
4500: IFFALSE 4548
// SetArtifactUse ( side , artifactsButtons [ i ] [ 1 ] , artifactsButtons [ i ] [ 2 ] , nearestLab ) else
4502: LD_VAR 0 4
4506: PPUSH
4507: LD_EXP 10
4511: PUSH
4512: LD_VAR 0 1
4516: ARRAY
4517: PUSH
4518: LD_INT 1
4520: ARRAY
4521: PPUSH
4522: LD_EXP 10
4526: PUSH
4527: LD_VAR 0 1
4531: ARRAY
4532: PUSH
4533: LD_INT 2
4535: ARRAY
4536: PPUSH
4537: LD_VAR 0 6
4541: PPUSH
4542: CALL_OW 468
4546: GO 4580
// SetArtifactUse ( side , artifactsButtons [ i ] [ 1 ] , art_gray , nearestLab ) end ;
4548: LD_VAR 0 4
4552: PPUSH
4553: LD_EXP 10
4557: PUSH
4558: LD_VAR 0 1
4562: ARRAY
4563: PUSH
4564: LD_INT 1
4566: ARRAY
4567: PPUSH
4568: LD_INT 1
4570: PPUSH
4571: LD_VAR 0 6
4575: PPUSH
4576: CALL_OW 468
// end else
4580: GO 4744
// begin for j in labs do
4582: LD_ADDR_VAR 0 3
4586: PUSH
4587: LD_VAR 0 5
4591: PUSH
4592: FOR_IN
4593: IFFALSE 4742
// begin if GetDistUnitXY ( j , artifactsPos [ i ] [ 1 ] , artifactsPos [ i ] [ 2 ] ) >= 8 then
4595: LD_VAR 0 3
4599: PPUSH
4600: LD_EXP 3
4604: PUSH
4605: LD_VAR 0 1
4609: ARRAY
4610: PUSH
4611: LD_INT 1
4613: ARRAY
4614: PPUSH
4615: LD_EXP 3
4619: PUSH
4620: LD_VAR 0 1
4624: ARRAY
4625: PUSH
4626: LD_INT 2
4628: ARRAY
4629: PPUSH
4630: CALL_OW 297
4634: PUSH
4635: LD_INT 8
4637: GREATEREQUAL
4638: IFFALSE 4740
// begin side := GetSide ( j ) ;
4640: LD_ADDR_VAR 0 4
4644: PUSH
4645: LD_VAR 0 3
4649: PPUSH
4650: CALL_OW 255
4654: ST_TO_ADDR
// if not artifactsResearched [ side ] [ i ] then
4655: LD_EXP 6
4659: PUSH
4660: LD_VAR 0 4
4664: ARRAY
4665: PUSH
4666: LD_VAR 0 1
4670: ARRAY
4671: NOT
4672: IFFALSE 4708
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_no , j ) else
4674: LD_VAR 0 4
4678: PPUSH
4679: LD_EXP 10
4683: PUSH
4684: LD_VAR 0 1
4688: ARRAY
4689: PUSH
4690: LD_INT 3
4692: ARRAY
4693: PPUSH
4694: LD_INT 0
4696: PPUSH
4697: LD_VAR 0 3
4701: PPUSH
4702: CALL_OW 468
4706: GO 4740
// SetArtifactUse ( side , artifactsButtons [ i ] [ 1 ] , art_no , j ) ;
4708: LD_VAR 0 4
4712: PPUSH
4713: LD_EXP 10
4717: PUSH
4718: LD_VAR 0 1
4722: ARRAY
4723: PUSH
4724: LD_INT 1
4726: ARRAY
4727: PPUSH
4728: LD_INT 0
4730: PPUSH
4731: LD_VAR 0 3
4735: PPUSH
4736: CALL_OW 468
// end ; end ;
4740: GO 4592
4742: POP
4743: POP
// end ; end else
4744: GO 4906
// begin for j in labs do
4746: LD_ADDR_VAR 0 3
4750: PUSH
4751: LD_VAR 0 5
4755: PUSH
4756: FOR_IN
4757: IFFALSE 4904
// begin side := GetSide ( j ) ;
4759: LD_ADDR_VAR 0 4
4763: PUSH
4764: LD_VAR 0 3
4768: PPUSH
4769: CALL_OW 255
4773: ST_TO_ADDR
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_no , j ) ;
4774: LD_VAR 0 4
4778: PPUSH
4779: LD_EXP 10
4783: PUSH
4784: LD_VAR 0 1
4788: ARRAY
4789: PUSH
4790: LD_INT 3
4792: ARRAY
4793: PPUSH
4794: LD_INT 0
4796: PPUSH
4797: LD_VAR 0 3
4801: PPUSH
4802: CALL_OW 468
// SetArtifactUse ( side , artifactsButtons [ i ] [ 1 ] , art_no , j ) ;
4806: LD_VAR 0 4
4810: PPUSH
4811: LD_EXP 10
4815: PUSH
4816: LD_VAR 0 1
4820: ARRAY
4821: PUSH
4822: LD_INT 1
4824: ARRAY
4825: PPUSH
4826: LD_INT 0
4828: PPUSH
4829: LD_VAR 0 3
4833: PPUSH
4834: CALL_OW 468
// if j in artifactsLabsWorking [ i ] then
4838: LD_VAR 0 3
4842: PUSH
4843: LD_EXP 11
4847: PUSH
4848: LD_VAR 0 1
4852: ARRAY
4853: IN
4854: IFFALSE 4902
// begin artifactsLabsWorking := Replace ( artifactsLabsWorking , i , artifactsLabsWorking [ i ] diff j ) ;
4856: LD_ADDR_EXP 11
4860: PUSH
4861: LD_EXP 11
4865: PPUSH
4866: LD_VAR 0 1
4870: PPUSH
4871: LD_EXP 11
4875: PUSH
4876: LD_VAR 0 1
4880: ARRAY
4881: PUSH
4882: LD_VAR 0 3
4886: DIFF
4887: PPUSH
4888: CALL_OW 1
4892: ST_TO_ADDR
// ComCancel ( j ) ;
4893: LD_VAR 0 3
4897: PPUSH
4898: CALL_OW 127
// end ; end ;
4902: GO 4756
4904: POP
4905: POP
// end ; end ;
4906: GO 4037
4908: POP
4909: POP
// end ;
4910: PPOPN 6
4912: END
// on ArtifactUsed ( side , icon , x , y ) do var i , labs , lab , base , time ;
4913: LD_INT 0
4915: PPUSH
4916: PPUSH
4917: PPUSH
4918: PPUSH
4919: PPUSH
// begin labs := FilterAllUnits ( [ [ f_side , side ] , [ f_lab , b_lab_siberium ] ] ) ;
4920: LD_ADDR_VAR 0 6
4924: PUSH
4925: LD_INT 22
4927: PUSH
4928: LD_VAR 0 1
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: PUSH
4937: LD_INT 63
4939: PUSH
4940: LD_INT 11
4942: PUSH
4943: EMPTY
4944: LIST
4945: LIST
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PPUSH
4951: CALL_OW 69
4955: ST_TO_ADDR
// for i := 1 to 3 do
4956: LD_ADDR_VAR 0 5
4960: PUSH
4961: DOUBLE
4962: LD_INT 1
4964: DEC
4965: ST_TO_ADDR
4966: LD_INT 3
4968: PUSH
4969: FOR_TO
4970: IFFALSE 5200
// begin if icon = artifactsButtons [ i ] [ 3 ] then
4972: LD_VAR 0 2
4976: PUSH
4977: LD_EXP 10
4981: PUSH
4982: LD_VAR 0 5
4986: ARRAY
4987: PUSH
4988: LD_INT 3
4990: ARRAY
4991: EQUAL
4992: IFFALSE 5198
// begin lab := NearestUnitToXY ( labs , artifactsPos [ i ] [ 1 ] , artifactsPos [ i ] [ 2 ] ) ;
4994: LD_ADDR_VAR 0 7
4998: PUSH
4999: LD_VAR 0 6
5003: PPUSH
5004: LD_EXP 3
5008: PUSH
5009: LD_VAR 0 5
5013: ARRAY
5014: PUSH
5015: LD_INT 1
5017: ARRAY
5018: PPUSH
5019: LD_EXP 3
5023: PUSH
5024: LD_VAR 0 5
5028: ARRAY
5029: PUSH
5030: LD_INT 2
5032: ARRAY
5033: PPUSH
5034: CALL_OW 73
5038: ST_TO_ADDR
// if not lab then
5039: LD_VAR 0 7
5043: NOT
5044: IFFALSE 5048
// continue ;
5046: GO 4969
// SetSpecResearch ( lab , artifactsResDifficulty [ i ] , true ) ;
5048: LD_VAR 0 7
5052: PPUSH
5053: LD_EXP 8
5057: PUSH
5058: LD_VAR 0 5
5062: ARRAY
5063: PPUSH
5064: LD_INT 1
5066: PPUSH
5067: CALL_OW 486
// SetTag ( lab , i ) ;
5071: LD_VAR 0 7
5075: PPUSH
5076: LD_VAR 0 5
5080: PPUSH
5081: CALL_OW 109
// if artifactsResProgress [ side ] [ i ] then
5085: LD_EXP 9
5089: PUSH
5090: LD_VAR 0 1
5094: ARRAY
5095: PUSH
5096: LD_VAR 0 5
5100: ARRAY
5101: IFFALSE 5129
// SetWorkingProgress ( lab , artifactsResProgress [ side ] [ i ] ) ;
5103: LD_VAR 0 7
5107: PPUSH
5108: LD_EXP 9
5112: PUSH
5113: LD_VAR 0 1
5117: ARRAY
5118: PUSH
5119: LD_VAR 0 5
5123: ARRAY
5124: PPUSH
5125: CALL_OW 329
// artifactsLabsWorking := Replace ( artifactsLabsWorking , i , artifactsLabsWorking [ i ] union lab ) ;
5129: LD_ADDR_EXP 11
5133: PUSH
5134: LD_EXP 11
5138: PPUSH
5139: LD_VAR 0 5
5143: PPUSH
5144: LD_EXP 11
5148: PUSH
5149: LD_VAR 0 5
5153: ARRAY
5154: PUSH
5155: LD_VAR 0 7
5159: UNION
5160: PPUSH
5161: CALL_OW 1
5165: ST_TO_ADDR
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_no , lab ) ;
5166: LD_VAR 0 1
5170: PPUSH
5171: LD_EXP 10
5175: PUSH
5176: LD_VAR 0 5
5180: ARRAY
5181: PUSH
5182: LD_INT 3
5184: ARRAY
5185: PPUSH
5186: LD_INT 0
5188: PPUSH
5189: LD_VAR 0 7
5193: PPUSH
5194: CALL_OW 468
// end ; end ;
5198: GO 4969
5200: POP
5201: POP
// if icon = artifactsButtons [ 1 ] [ 1 ] then
5202: LD_VAR 0 2
5206: PUSH
5207: LD_EXP 10
5211: PUSH
5212: LD_INT 1
5214: ARRAY
5215: PUSH
5216: LD_INT 1
5218: ARRAY
5219: EQUAL
5220: IFFALSE 5491
// begin lab := NearestUnitToXY ( labs , artifactsPos [ 1 ] [ 1 ] , artifactsPos [ 1 ] [ 2 ] ) ;
5222: LD_ADDR_VAR 0 7
5226: PUSH
5227: LD_VAR 0 6
5231: PPUSH
5232: LD_EXP 3
5236: PUSH
5237: LD_INT 1
5239: ARRAY
5240: PUSH
5241: LD_INT 1
5243: ARRAY
5244: PPUSH
5245: LD_EXP 3
5249: PUSH
5250: LD_INT 1
5252: ARRAY
5253: PUSH
5254: LD_INT 2
5256: ARRAY
5257: PPUSH
5258: CALL_OW 73
5262: ST_TO_ADDR
// base := GetBase ( lab ) ;
5263: LD_ADDR_VAR 0 8
5267: PUSH
5268: LD_VAR 0 7
5272: PPUSH
5273: CALL_OW 274
5277: ST_TO_ADDR
// if GetBaseMaterials ( GetBase ( lab ) ) [ 3 ] < artifactsSibCost [ 1 ] then
5278: LD_VAR 0 7
5282: PPUSH
5283: CALL_OW 274
5287: PPUSH
5288: CALL 62610 0 1
5292: PUSH
5293: LD_INT 3
5295: ARRAY
5296: PUSH
5297: LD_EXP 5
5301: PUSH
5302: LD_INT 1
5304: ARRAY
5305: LESS
5306: IFFALSE 5310
// begin exit ;
5308: GO 6257
// end ; SetResourceType ( base , mat_siberit , ( GetResourceType ( base , mat_siberit ) - artifactsSibCost [ 1 ] ) ) ;
5310: LD_VAR 0 8
5314: PPUSH
5315: LD_INT 3
5317: PPUSH
5318: LD_VAR 0 8
5322: PPUSH
5323: LD_INT 3
5325: PPUSH
5326: CALL_OW 275
5330: PUSH
5331: LD_EXP 5
5335: PUSH
5336: LD_INT 1
5338: ARRAY
5339: MINUS
5340: PPUSH
5341: CALL_OW 277
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 1 , false ) ) ;
5345: LD_ADDR_EXP 7
5349: PUSH
5350: LD_EXP 7
5354: PPUSH
5355: LD_VAR 0 1
5359: PPUSH
5360: LD_EXP 7
5364: PUSH
5365: LD_VAR 0 1
5369: ARRAY
5370: PPUSH
5371: LD_INT 1
5373: PPUSH
5374: LD_INT 0
5376: PPUSH
5377: CALL_OW 1
5381: PPUSH
5382: CALL_OW 1
5386: ST_TO_ADDR
// PlaceSeeing ( x , y , side , - 12 ) ;
5387: LD_VAR 0 3
5391: PPUSH
5392: LD_VAR 0 4
5396: PPUSH
5397: LD_VAR 0 1
5401: PPUSH
5402: LD_INT 12
5404: NEG
5405: PPUSH
5406: CALL_OW 330
// wait ( 0 0$30 ) ;
5410: LD_INT 1050
5412: PPUSH
5413: CALL_OW 67
// RemoveSeeing ( x , y , side ) ;
5417: LD_VAR 0 3
5421: PPUSH
5422: LD_VAR 0 4
5426: PPUSH
5427: LD_VAR 0 1
5431: PPUSH
5432: CALL_OW 331
// wait ( artifactsRecharge [ 1 ] ) ;
5436: LD_EXP 4
5440: PUSH
5441: LD_INT 1
5443: ARRAY
5444: PPUSH
5445: CALL_OW 67
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 1 , true ) ) ;
5449: LD_ADDR_EXP 7
5453: PUSH
5454: LD_EXP 7
5458: PPUSH
5459: LD_VAR 0 1
5463: PPUSH
5464: LD_EXP 7
5468: PUSH
5469: LD_VAR 0 1
5473: ARRAY
5474: PPUSH
5475: LD_INT 1
5477: PPUSH
5478: LD_INT 1
5480: PPUSH
5481: CALL_OW 1
5485: PPUSH
5486: CALL_OW 1
5490: ST_TO_ADDR
// end ; if icon = artifactsButtons [ 2 ] [ 1 ] then
5491: LD_VAR 0 2
5495: PUSH
5496: LD_EXP 10
5500: PUSH
5501: LD_INT 2
5503: ARRAY
5504: PUSH
5505: LD_INT 1
5507: ARRAY
5508: EQUAL
5509: IFFALSE 6005
// begin lab := NearestUnitToXY ( labs , artifactsPos [ 2 ] [ 1 ] , artifactsPos [ 2 ] [ 2 ] ) ;
5511: LD_ADDR_VAR 0 7
5515: PUSH
5516: LD_VAR 0 6
5520: PPUSH
5521: LD_EXP 3
5525: PUSH
5526: LD_INT 2
5528: ARRAY
5529: PUSH
5530: LD_INT 1
5532: ARRAY
5533: PPUSH
5534: LD_EXP 3
5538: PUSH
5539: LD_INT 2
5541: ARRAY
5542: PUSH
5543: LD_INT 2
5545: ARRAY
5546: PPUSH
5547: CALL_OW 73
5551: ST_TO_ADDR
// base := GetBase ( lab ) ;
5552: LD_ADDR_VAR 0 8
5556: PUSH
5557: LD_VAR 0 7
5561: PPUSH
5562: CALL_OW 274
5566: ST_TO_ADDR
// if not x in FilterAllUnits ( [ [ f_enemy , side ] , [ f_or , [ f_engine , engine_siberite ] , [ f_btype , b_siberite_power ] , [ f_btype , b_siberite_mine ] , [ f_bweapon , ru_time_lapser ] , [ f_weapon , ru_time_lapser ] , [ f_weapon , us_double_laser ] , [ f_bweapon , us_double_laser ] , [ f_weapon , ar_bio_bomb ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_btype , b_ext_siberium ] , [ f_weapon , us_siberium_rocket ] , [ f_weapon , ru_siberium_rocket ] , [ f_chassis , ru_behemoth ] , [ f_bweapon , us_siberium_rocket ] , [ f_bweapon , ru_siberium_rocket ] ] ] ) then
5567: LD_VAR 0 3
5571: PUSH
5572: LD_INT 81
5574: PUSH
5575: LD_VAR 0 1
5579: PUSH
5580: EMPTY
5581: LIST
5582: LIST
5583: PUSH
5584: LD_INT 2
5586: PUSH
5587: LD_INT 32
5589: PUSH
5590: LD_INT 3
5592: PUSH
5593: EMPTY
5594: LIST
5595: LIST
5596: PUSH
5597: LD_INT 30
5599: PUSH
5600: LD_INT 28
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: PUSH
5607: LD_INT 30
5609: PUSH
5610: LD_INT 30
5612: PUSH
5613: EMPTY
5614: LIST
5615: LIST
5616: PUSH
5617: LD_INT 35
5619: PUSH
5620: LD_INT 49
5622: PUSH
5623: EMPTY
5624: LIST
5625: LIST
5626: PUSH
5627: LD_INT 34
5629: PUSH
5630: LD_INT 49
5632: PUSH
5633: EMPTY
5634: LIST
5635: LIST
5636: PUSH
5637: LD_INT 34
5639: PUSH
5640: LD_INT 10
5642: PUSH
5643: EMPTY
5644: LIST
5645: LIST
5646: PUSH
5647: LD_INT 35
5649: PUSH
5650: LD_INT 10
5652: PUSH
5653: EMPTY
5654: LIST
5655: LIST
5656: PUSH
5657: LD_INT 34
5659: PUSH
5660: LD_INT 91
5662: PUSH
5663: EMPTY
5664: LIST
5665: LIST
5666: PUSH
5667: LD_INT 34
5669: PUSH
5670: LD_INT 29
5672: PUSH
5673: EMPTY
5674: LIST
5675: LIST
5676: PUSH
5677: LD_INT 30
5679: PUSH
5680: LD_INT 21
5682: PUSH
5683: EMPTY
5684: LIST
5685: LIST
5686: PUSH
5687: LD_INT 34
5689: PUSH
5690: LD_INT 8
5692: PUSH
5693: EMPTY
5694: LIST
5695: LIST
5696: PUSH
5697: LD_INT 34
5699: PUSH
5700: LD_INT 48
5702: PUSH
5703: EMPTY
5704: LIST
5705: LIST
5706: PUSH
5707: LD_INT 31
5709: PUSH
5710: LD_INT 25
5712: PUSH
5713: EMPTY
5714: LIST
5715: LIST
5716: PUSH
5717: LD_INT 35
5719: PUSH
5720: LD_INT 8
5722: PUSH
5723: EMPTY
5724: LIST
5725: LIST
5726: PUSH
5727: LD_INT 35
5729: PUSH
5730: LD_INT 48
5732: PUSH
5733: EMPTY
5734: LIST
5735: LIST
5736: PUSH
5737: EMPTY
5738: LIST
5739: LIST
5740: LIST
5741: LIST
5742: LIST
5743: LIST
5744: LIST
5745: LIST
5746: LIST
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: LIST
5752: LIST
5753: LIST
5754: PUSH
5755: EMPTY
5756: LIST
5757: LIST
5758: PPUSH
5759: CALL_OW 69
5763: IN
5764: NOT
5765: IFFALSE 5769
// exit ;
5767: GO 6257
// if GetBaseMaterials ( GetBase ( lab ) ) [ 3 ] < artifactsSibCost [ 2 ] then
5769: LD_VAR 0 7
5773: PPUSH
5774: CALL_OW 274
5778: PPUSH
5779: CALL 62610 0 1
5783: PUSH
5784: LD_INT 3
5786: ARRAY
5787: PUSH
5788: LD_EXP 5
5792: PUSH
5793: LD_INT 2
5795: ARRAY
5796: LESS
5797: IFFALSE 5801
// begin exit ;
5799: GO 6257
// end ; SetResourceType ( base , mat_siberit , ( GetResourceType ( base , mat_siberit ) - artifactsSibCost [ 2 ] ) ) ;
5801: LD_VAR 0 8
5805: PPUSH
5806: LD_INT 3
5808: PPUSH
5809: LD_VAR 0 8
5813: PPUSH
5814: LD_INT 3
5816: PPUSH
5817: CALL_OW 275
5821: PUSH
5822: LD_EXP 5
5826: PUSH
5827: LD_INT 2
5829: ARRAY
5830: MINUS
5831: PPUSH
5832: CALL_OW 277
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 2 , false ) ) ;
5836: LD_ADDR_EXP 7
5840: PUSH
5841: LD_EXP 7
5845: PPUSH
5846: LD_VAR 0 1
5850: PPUSH
5851: LD_EXP 7
5855: PUSH
5856: LD_VAR 0 1
5860: ARRAY
5861: PPUSH
5862: LD_INT 2
5864: PPUSH
5865: LD_INT 0
5867: PPUSH
5868: CALL_OW 1
5872: PPUSH
5873: CALL_OW 1
5877: ST_TO_ADDR
// KillUnit ( x ) ;
5878: LD_VAR 0 3
5882: PPUSH
5883: CALL_OW 66
// if GetWeapon ( x ) in [ us_siberium_rocket , ru_siberium_rocket ] or GetBWeapon ( x ) in [ us_siberium_rocket , ru_siberium_rocket ] then
5887: LD_VAR 0 3
5891: PPUSH
5892: CALL_OW 264
5896: PUSH
5897: LD_INT 8
5899: PUSH
5900: LD_INT 48
5902: PUSH
5903: EMPTY
5904: LIST
5905: LIST
5906: IN
5907: IFTRUE 5931
5909: PUSH
5910: LD_VAR 0 3
5914: PPUSH
5915: CALL_OW 269
5919: PUSH
5920: LD_INT 8
5922: PUSH
5923: LD_INT 48
5925: PUSH
5926: EMPTY
5927: LIST
5928: LIST
5929: IN
5930: OR
5931: IFFALSE 5950
// begin ArtContamination ( x , y , 50 ) ;
5933: LD_VAR 0 3
5937: PPUSH
5938: LD_VAR 0 4
5942: PPUSH
5943: LD_INT 50
5945: PPUSH
5946: CALL_OW 495
// end ; wait ( artifactsRecharge [ 2 ] ) ;
5950: LD_EXP 4
5954: PUSH
5955: LD_INT 2
5957: ARRAY
5958: PPUSH
5959: CALL_OW 67
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 2 , true ) ) ;
5963: LD_ADDR_EXP 7
5967: PUSH
5968: LD_EXP 7
5972: PPUSH
5973: LD_VAR 0 1
5977: PPUSH
5978: LD_EXP 7
5982: PUSH
5983: LD_VAR 0 1
5987: ARRAY
5988: PPUSH
5989: LD_INT 2
5991: PPUSH
5992: LD_INT 1
5994: PPUSH
5995: CALL_OW 1
5999: PPUSH
6000: CALL_OW 1
6004: ST_TO_ADDR
// end ; if icon = artifactsButtons [ 3 ] [ 1 ] then
6005: LD_VAR 0 2
6009: PUSH
6010: LD_EXP 10
6014: PUSH
6015: LD_INT 3
6017: ARRAY
6018: PUSH
6019: LD_INT 1
6021: ARRAY
6022: EQUAL
6023: IFFALSE 6257
// begin lab := NearestUnitToXY ( labs , artifactsPos [ 3 ] [ 1 ] , artifactsPos [ 3 ] [ 2 ] ) ;
6025: LD_ADDR_VAR 0 7
6029: PUSH
6030: LD_VAR 0 6
6034: PPUSH
6035: LD_EXP 3
6039: PUSH
6040: LD_INT 3
6042: ARRAY
6043: PUSH
6044: LD_INT 1
6046: ARRAY
6047: PPUSH
6048: LD_EXP 3
6052: PUSH
6053: LD_INT 3
6055: ARRAY
6056: PUSH
6057: LD_INT 2
6059: ARRAY
6060: PPUSH
6061: CALL_OW 73
6065: ST_TO_ADDR
// base := GetBase ( lab ) ;
6066: LD_ADDR_VAR 0 8
6070: PUSH
6071: LD_VAR 0 7
6075: PPUSH
6076: CALL_OW 274
6080: ST_TO_ADDR
// if GetBaseMaterials ( base ) [ 3 ] < artifactsSibCost [ 3 ] then
6081: LD_VAR 0 8
6085: PPUSH
6086: CALL 62610 0 1
6090: PUSH
6091: LD_INT 3
6093: ARRAY
6094: PUSH
6095: LD_EXP 5
6099: PUSH
6100: LD_INT 3
6102: ARRAY
6103: LESS
6104: IFFALSE 6108
// begin exit ;
6106: GO 6257
// end ; SetResourceType ( base , mat_siberit , ( GetResourceType ( base , mat_siberit ) - artifactsSibCost [ 3 ] ) ) ;
6108: LD_VAR 0 8
6112: PPUSH
6113: LD_INT 3
6115: PPUSH
6116: LD_VAR 0 8
6120: PPUSH
6121: LD_INT 3
6123: PPUSH
6124: CALL_OW 275
6128: PUSH
6129: LD_EXP 5
6133: PUSH
6134: LD_INT 3
6136: ARRAY
6137: MINUS
6138: PPUSH
6139: CALL_OW 277
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 3 , false ) ) ;
6143: LD_ADDR_EXP 7
6147: PUSH
6148: LD_EXP 7
6152: PPUSH
6153: LD_VAR 0 1
6157: PPUSH
6158: LD_EXP 7
6162: PUSH
6163: LD_VAR 0 1
6167: ARRAY
6168: PPUSH
6169: LD_INT 3
6171: PPUSH
6172: LD_INT 0
6174: PPUSH
6175: CALL_OW 1
6179: PPUSH
6180: CALL_OW 1
6184: ST_TO_ADDR
// ArtContamination ( x , y , 50 ) ;
6185: LD_VAR 0 3
6189: PPUSH
6190: LD_VAR 0 4
6194: PPUSH
6195: LD_INT 50
6197: PPUSH
6198: CALL_OW 495
// wait ( artifactsRecharge [ 3 ] ) ;
6202: LD_EXP 4
6206: PUSH
6207: LD_INT 3
6209: ARRAY
6210: PPUSH
6211: CALL_OW 67
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 3 , true ) ) ;
6215: LD_ADDR_EXP 7
6219: PUSH
6220: LD_EXP 7
6224: PPUSH
6225: LD_VAR 0 1
6229: PPUSH
6230: LD_EXP 7
6234: PUSH
6235: LD_VAR 0 1
6239: ARRAY
6240: PPUSH
6241: LD_INT 3
6243: PPUSH
6244: LD_INT 1
6246: PPUSH
6247: CALL_OW 1
6251: PPUSH
6252: CALL_OW 1
6256: ST_TO_ADDR
// end ; end ;
6257: PPOPN 9
6259: END
// on SpecResearchCancel ( lab , progress ) do var side , tag ;
6260: LD_INT 0
6262: PPUSH
6263: PPUSH
// begin tag := GetTag ( lab ) ;
6264: LD_ADDR_VAR 0 4
6268: PUSH
6269: LD_VAR 0 1
6273: PPUSH
6274: CALL_OW 110
6278: ST_TO_ADDR
// side := GetSide ( lab ) ;
6279: LD_ADDR_VAR 0 3
6283: PUSH
6284: LD_VAR 0 1
6288: PPUSH
6289: CALL_OW 255
6293: ST_TO_ADDR
// SetArtifactUse ( side , artifactsButtons [ tag ] [ 3 ] , art_instant , lab ) ;
6294: LD_VAR 0 3
6298: PPUSH
6299: LD_EXP 10
6303: PUSH
6304: LD_VAR 0 4
6308: ARRAY
6309: PUSH
6310: LD_INT 3
6312: ARRAY
6313: PPUSH
6314: LD_INT 2
6316: PPUSH
6317: LD_VAR 0 1
6321: PPUSH
6322: CALL_OW 468
// artifactsResProgress := Replace ( artifactsResProgress , side , Replace ( artifactsResProgress [ side ] , tag , progress ) ) ;
6326: LD_ADDR_EXP 9
6330: PUSH
6331: LD_EXP 9
6335: PPUSH
6336: LD_VAR 0 3
6340: PPUSH
6341: LD_EXP 9
6345: PUSH
6346: LD_VAR 0 3
6350: ARRAY
6351: PPUSH
6352: LD_VAR 0 4
6356: PPUSH
6357: LD_VAR 0 2
6361: PPUSH
6362: CALL_OW 1
6366: PPUSH
6367: CALL_OW 1
6371: ST_TO_ADDR
// artifactsLabsWorking := Replace ( artifactsLabsWorking , tag , artifactsLabsWorking [ tag ] diff lab ) ;
6372: LD_ADDR_EXP 11
6376: PUSH
6377: LD_EXP 11
6381: PPUSH
6382: LD_VAR 0 4
6386: PPUSH
6387: LD_EXP 11
6391: PUSH
6392: LD_VAR 0 4
6396: ARRAY
6397: PUSH
6398: LD_VAR 0 1
6402: DIFF
6403: PPUSH
6404: CALL_OW 1
6408: ST_TO_ADDR
// SetTag ( lab , 0 ) ;
6409: LD_VAR 0 1
6413: PPUSH
6414: LD_INT 0
6416: PPUSH
6417: CALL_OW 109
// end ;
6421: PPOPN 4
6423: END
// on SpecResearchComplete ( lab ) do var side , tag ;
6424: LD_INT 0
6426: PPUSH
6427: PPUSH
// begin tag := GetTag ( lab ) ;
6428: LD_ADDR_VAR 0 3
6432: PUSH
6433: LD_VAR 0 1
6437: PPUSH
6438: CALL_OW 110
6442: ST_TO_ADDR
// side := GetSide ( lab ) ;
6443: LD_ADDR_VAR 0 2
6447: PUSH
6448: LD_VAR 0 1
6452: PPUSH
6453: CALL_OW 255
6457: ST_TO_ADDR
// SetArtifactUse ( side , artifactsButtons [ tag ] [ 3 ] , art_no , lab ) ;
6458: LD_VAR 0 2
6462: PPUSH
6463: LD_EXP 10
6467: PUSH
6468: LD_VAR 0 3
6472: ARRAY
6473: PUSH
6474: LD_INT 3
6476: ARRAY
6477: PPUSH
6478: LD_INT 0
6480: PPUSH
6481: LD_VAR 0 1
6485: PPUSH
6486: CALL_OW 468
// artifactsResearched := Replace ( artifactsResearched , side , Replace ( artifactsResearched [ side ] , tag , 1 ) ) ;
6490: LD_ADDR_EXP 6
6494: PUSH
6495: LD_EXP 6
6499: PPUSH
6500: LD_VAR 0 2
6504: PPUSH
6505: LD_EXP 6
6509: PUSH
6510: LD_VAR 0 2
6514: ARRAY
6515: PPUSH
6516: LD_VAR 0 3
6520: PPUSH
6521: LD_INT 1
6523: PPUSH
6524: CALL_OW 1
6528: PPUSH
6529: CALL_OW 1
6533: ST_TO_ADDR
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , tag , 1 ) ) ;
6534: LD_ADDR_EXP 7
6538: PUSH
6539: LD_EXP 7
6543: PPUSH
6544: LD_VAR 0 2
6548: PPUSH
6549: LD_EXP 7
6553: PUSH
6554: LD_VAR 0 2
6558: ARRAY
6559: PPUSH
6560: LD_VAR 0 3
6564: PPUSH
6565: LD_INT 1
6567: PPUSH
6568: CALL_OW 1
6572: PPUSH
6573: CALL_OW 1
6577: ST_TO_ADDR
// artifactsLabsWorking := Replace ( artifactsLabsWorking , tag , artifactsLabsWorking [ tag ] diff lab ) ;
6578: LD_ADDR_EXP 11
6582: PUSH
6583: LD_EXP 11
6587: PPUSH
6588: LD_VAR 0 3
6592: PPUSH
6593: LD_EXP 11
6597: PUSH
6598: LD_VAR 0 3
6602: ARRAY
6603: PUSH
6604: LD_VAR 0 1
6608: DIFF
6609: PPUSH
6610: CALL_OW 1
6614: ST_TO_ADDR
// end ;
6615: PPOPN 3
6617: END
// on ArtifactLoaded ( cargo , artifact ) do begin SetTag ( cargo , artifact ) ;
6618: LD_VAR 0 1
6622: PPUSH
6623: LD_VAR 0 2
6627: PPUSH
6628: CALL_OW 109
// end ;
6632: PPOPN 2
6634: END
// on ArtifactUnloaded ( cargo , artifact ) do begin SetTag ( cargo , 0 ) ;
6635: LD_VAR 0 1
6639: PPUSH
6640: LD_INT 0
6642: PPUSH
6643: CALL_OW 109
// end ; end_of_file end_of_file
6647: PPOPN 2
6649: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpCommanders , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
6650: LD_INT 0
6652: PPUSH
6653: PPUSH
// disable ( mpActive ) ;
6654: LD_INT 100
6656: DISABLE_MARKED
// disable ( mpWin ) ;
6657: LD_INT 101
6659: DISABLE_MARKED
// disable ( mpLose ) ;
6660: LD_INT 102
6662: DISABLE_MARKED
// mpGameType := 0 ;
6663: LD_ADDR_EXP 12
6667: PUSH
6668: LD_INT 0
6670: ST_TO_ADDR
// mpGameSettings := [ ] ;
6671: LD_ADDR_EXP 15
6675: PUSH
6676: EMPTY
6677: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
6678: LD_ADDR_EXP 13
6682: PUSH
6683: EMPTY
6684: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
6685: LD_ADDR_EXP 14
6689: PUSH
6690: EMPTY
6691: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
6692: LD_ADDR_EXP 38
6696: PUSH
6697: LD_INT 2
6699: PUSH
6700: LD_INT 2
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: ST_TO_ADDR
// mpOilDeposits := [ ] ;
6707: LD_ADDR_EXP 21
6711: PUSH
6712: EMPTY
6713: ST_TO_ADDR
// mpSibDeposits := [ ] ;
6714: LD_ADDR_EXP 22
6718: PUSH
6719: EMPTY
6720: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
6721: LD_ADDR_EXP 51
6725: PUSH
6726: EMPTY
6727: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
6728: LD_ADDR_EXP 52
6732: PUSH
6733: EMPTY
6734: ST_TO_ADDR
// mpDepots := [ ] ;
6735: LD_ADDR_EXP 23
6739: PUSH
6740: EMPTY
6741: ST_TO_ADDR
// mpBuildings := [ ] ;
6742: LD_ADDR_EXP 26
6746: PUSH
6747: EMPTY
6748: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
6749: LD_ADDR_EXP 27
6753: PUSH
6754: EMPTY
6755: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
6756: LD_ADDR_EXP 28
6760: PUSH
6761: EMPTY
6762: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
6763: LD_ADDR_EXP 29
6767: PUSH
6768: EMPTY
6769: ST_TO_ADDR
// mpStartingResources := [ ] ;
6770: LD_ADDR_EXP 24
6774: PUSH
6775: EMPTY
6776: ST_TO_ADDR
// mpStartPos := [ ] ;
6777: LD_ADDR_EXP 30
6781: PUSH
6782: EMPTY
6783: ST_TO_ADDR
// mpBattleFlag := - 1 ;
6784: LD_ADDR_EXP 31
6788: PUSH
6789: LD_INT 1
6791: NEG
6792: ST_TO_ADDR
// mpBattleFlags := [ ] ;
6793: LD_ADDR_EXP 32
6797: PUSH
6798: EMPTY
6799: ST_TO_ADDR
// mpApemans := [ ] ;
6800: LD_ADDR_EXP 39
6804: PUSH
6805: EMPTY
6806: ST_TO_ADDR
// mpApemansArea := [ ] ;
6807: LD_ADDR_EXP 40
6811: PUSH
6812: EMPTY
6813: ST_TO_ADDR
// mpRespawn := [ ] ;
6814: LD_ADDR_EXP 42
6818: PUSH
6819: EMPTY
6820: ST_TO_ADDR
// mpKingArea := 0 ;
6821: LD_ADDR_EXP 43
6825: PUSH
6826: LD_INT 0
6828: ST_TO_ADDR
// mpPoints := [ ] ;
6829: LD_ADDR_EXP 44
6833: PUSH
6834: EMPTY
6835: ST_TO_ADDR
// mpVehicles := 0 ;
6836: LD_ADDR_EXP 45
6840: PUSH
6841: LD_INT 0
6843: ST_TO_ADDR
// mpShipments := 0 ;
6844: LD_ADDR_EXP 36
6848: PUSH
6849: LD_INT 0
6851: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
6852: LD_ADDR_EXP 49
6856: PUSH
6857: EMPTY
6858: PUSH
6859: EMPTY
6860: PUSH
6861: EMPTY
6862: PUSH
6863: EMPTY
6864: PUSH
6865: EMPTY
6866: PUSH
6867: EMPTY
6868: PUSH
6869: EMPTY
6870: PUSH
6871: EMPTY
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: LIST
6882: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
6883: LD_ADDR_EXP 41
6887: PUSH
6888: EMPTY
6889: PUSH
6890: EMPTY
6891: PUSH
6892: EMPTY
6893: PUSH
6894: EMPTY
6895: PUSH
6896: EMPTY
6897: PUSH
6898: EMPTY
6899: PUSH
6900: EMPTY
6901: PUSH
6902: EMPTY
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: ST_TO_ADDR
// mpCommanders := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6914: LD_ADDR_EXP 50
6918: PUSH
6919: LD_INT 0
6921: PUSH
6922: LD_INT 0
6924: PUSH
6925: LD_INT 0
6927: PUSH
6928: LD_INT 0
6930: PUSH
6931: LD_INT 0
6933: PUSH
6934: LD_INT 0
6936: PUSH
6937: LD_INT 0
6939: PUSH
6940: LD_INT 0
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: ST_TO_ADDR
// mpEmissions := 0 ;
6953: LD_ADDR_EXP 46
6957: PUSH
6958: LD_INT 0
6960: ST_TO_ADDR
// mpTeleports := 0 ;
6961: LD_ADDR_EXP 53
6965: PUSH
6966: LD_INT 0
6968: ST_TO_ADDR
// mpArtifacts := 0 ;
6969: LD_ADDR_EXP 54
6973: PUSH
6974: LD_INT 0
6976: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
6977: LD_ADDR_EXP 55
6981: PUSH
6982: LD_INT 0
6984: ST_TO_ADDR
// mpPeopleSkill := 3 ;
6985: LD_ADDR_EXP 34
6989: PUSH
6990: LD_INT 3
6992: ST_TO_ADDR
// mpPeopleAmount := 15 ;
6993: LD_ADDR_EXP 33
6997: PUSH
6998: LD_INT 15
7000: ST_TO_ADDR
// mpDisplayStrings := 0 ;
7001: LD_ADDR_EXP 47
7005: PUSH
7006: LD_INT 0
7008: ST_TO_ADDR
// mpGameActive := false ;
7009: LD_ADDR_EXP 48
7013: PUSH
7014: LD_INT 0
7016: ST_TO_ADDR
// mpBlockRespThread := false ;
7017: LD_ADDR_EXP 56
7021: PUSH
7022: LD_INT 0
7024: ST_TO_ADDR
// for i := 1 to 32 do
7025: LD_ADDR_VAR 0 2
7029: PUSH
7030: DOUBLE
7031: LD_INT 1
7033: DEC
7034: ST_TO_ADDR
7035: LD_INT 32
7037: PUSH
7038: FOR_TO
7039: IFFALSE 7066
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
7041: LD_ADDR_EXP 15
7045: PUSH
7046: LD_EXP 15
7050: PPUSH
7051: LD_VAR 0 2
7055: PPUSH
7056: LD_INT 0
7058: PPUSH
7059: CALL_OW 1
7063: ST_TO_ADDR
7064: GO 7038
7066: POP
7067: POP
// end ;
7068: LD_VAR 0 1
7072: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
7073: LD_INT 0
7075: PPUSH
7076: PPUSH
7077: PPUSH
7078: PPUSH
7079: PPUSH
7080: PPUSH
7081: PPUSH
7082: PPUSH
7083: PPUSH
7084: PPUSH
7085: PPUSH
7086: PPUSH
7087: PPUSH
7088: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , GameTypeSurvivalHardcore ] ;
7089: LD_ADDR_VAR 0 14
7093: PUSH
7094: LD_INT 1
7096: PUSH
7097: LD_INT 2
7099: PUSH
7100: LD_INT 3
7102: PUSH
7103: LD_INT 5
7105: PUSH
7106: LD_INT 6
7108: PUSH
7109: LD_INT 7
7111: PUSH
7112: LD_INT 8
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: LIST
7119: LIST
7120: LIST
7121: LIST
7122: LIST
7123: ST_TO_ADDR
// for i in gameTypes do
7124: LD_ADDR_VAR 0 2
7128: PUSH
7129: LD_VAR 0 14
7133: PUSH
7134: FOR_IN
7135: IFFALSE 7144
// disable ( i ) ;
7137: LD_VAR 0 2
7141: DISABLE_MARKED
7142: GO 7134
7144: POP
7145: POP
// if Multiplayer then
7146: LD_OWVAR 4
7150: IFFALSE 7334
// begin mpGameType := mp_game_type ;
7152: LD_ADDR_EXP 12
7156: PUSH
7157: LD_OWVAR 6
7161: ST_TO_ADDR
// your_side := mp_player_side ;
7162: LD_ADDR_OWVAR 2
7166: PUSH
7167: LD_OWVAR 7
7171: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
7172: LD_ADDR_EXP 16
7176: PUSH
7177: LD_OWVAR 17
7181: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
7182: LD_ADDR_EXP 17
7186: PUSH
7187: LD_OWVAR 15
7191: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
7192: LD_ADDR_EXP 18
7196: PUSH
7197: LD_OWVAR 16
7201: ST_TO_ADDR
// mpTeams := mp_teams ;
7202: LD_ADDR_EXP 19
7206: PUSH
7207: LD_OWVAR 12
7211: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
7212: LD_ADDR_VAR 0 2
7216: PUSH
7217: DOUBLE
7218: LD_INT 1
7220: DEC
7221: ST_TO_ADDR
7222: LD_EXP 13
7226: PPUSH
7227: CALL 26404 0 1
7231: PUSH
7232: FOR_TO
7233: IFFALSE 7309
// begin setting := mpGameSettingsKeys [ i ] ;
7235: LD_ADDR_VAR 0 12
7239: PUSH
7240: LD_EXP 13
7244: PUSH
7245: LD_VAR 0 2
7249: ARRAY
7250: ST_TO_ADDR
// if setting then
7251: LD_VAR 0 12
7255: IFFALSE 7307
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
7257: LD_ADDR_EXP 15
7261: PUSH
7262: LD_EXP 15
7266: PPUSH
7267: LD_VAR 0 2
7271: PPUSH
7272: LD_EXP 14
7276: PUSH
7277: LD_VAR 0 2
7281: ARRAY
7282: PUSH
7283: LD_VAR 0 2
7287: PUSH
7288: LD_INT 1
7290: MINUS
7291: PPUSH
7292: CALL_OW 426
7296: PUSH
7297: LD_INT 1
7299: PLUS
7300: ARRAY
7301: PPUSH
7302: CALL_OW 1
7306: ST_TO_ADDR
// end ;
7307: GO 7232
7309: POP
7310: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
7311: LD_ADDR_EXP 20
7315: PUSH
7316: LD_EXP 17
7320: PUSH
7321: LD_INT 0
7323: PUSH
7324: EMPTY
7325: LIST
7326: DIFF
7327: PUSH
7328: LD_INT 1
7330: GREATER
7331: ST_TO_ADDR
// end else
7332: GO 7334
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
7334: LD_EXP 12
7338: PPUSH
7339: CALL 842 0 1
// if Count ( mpMarkedAreas ) then
7343: LD_EXP 27
7347: PPUSH
7348: CALL 26404 0 1
7352: IFFALSE 7383
// begin for i in mpMarkedAreas do
7354: LD_ADDR_VAR 0 2
7358: PUSH
7359: LD_EXP 27
7363: PUSH
7364: FOR_IN
7365: IFFALSE 7381
// SetAreaMapShow ( i , 0 ) ;
7367: LD_VAR 0 2
7371: PPUSH
7372: LD_INT 0
7374: PPUSH
7375: CALL_OW 424
7379: GO 7364
7381: POP
7382: POP
// end ; for i := 1 to 8 do
7383: LD_ADDR_VAR 0 2
7387: PUSH
7388: DOUBLE
7389: LD_INT 1
7391: DEC
7392: ST_TO_ADDR
7393: LD_INT 8
7395: PUSH
7396: FOR_TO
7397: IFFALSE 8856
// begin if not mpSidePositions [ i ] then
7399: LD_EXP 16
7403: PUSH
7404: LD_VAR 0 2
7408: ARRAY
7409: NOT
7410: IFFALSE 7414
// continue ;
7412: GO 7396
// side := i ;
7414: LD_ADDR_VAR 0 7
7418: PUSH
7419: LD_VAR 0 2
7423: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
7424: LD_ADDR_VAR 0 9
7428: PUSH
7429: LD_EXP 18
7433: PUSH
7434: LD_VAR 0 2
7438: ARRAY
7439: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
7440: LD_ADDR_VAR 0 8
7444: PUSH
7445: LD_EXP 16
7449: PUSH
7450: LD_VAR 0 2
7454: ARRAY
7455: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
7456: LD_EXP 21
7460: PPUSH
7461: CALL 26404 0 1
7465: IFFALSE 7542
// begin for j in mpOilDeposits [ pos ] do
7467: LD_ADDR_VAR 0 3
7471: PUSH
7472: LD_EXP 21
7476: PUSH
7477: LD_VAR 0 8
7481: ARRAY
7482: PUSH
7483: FOR_IN
7484: IFFALSE 7540
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
7486: LD_VAR 0 3
7490: PUSH
7491: LD_INT 1
7493: ARRAY
7494: PPUSH
7495: LD_VAR 0 3
7499: PUSH
7500: LD_INT 2
7502: ARRAY
7503: PPUSH
7504: LD_INT 2
7506: PPUSH
7507: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
7511: LD_VAR 0 3
7515: PUSH
7516: LD_INT 1
7518: ARRAY
7519: PPUSH
7520: LD_VAR 0 3
7524: PUSH
7525: LD_INT 2
7527: ARRAY
7528: PPUSH
7529: LD_VAR 0 7
7533: PPUSH
7534: CALL_OW 441
// end ;
7538: GO 7483
7540: POP
7541: POP
// end ; if Count ( mpSibDeposits ) then
7542: LD_EXP 22
7546: PPUSH
7547: CALL 26404 0 1
7551: IFFALSE 7628
// begin for j in mpSibDeposits [ pos ] do
7553: LD_ADDR_VAR 0 3
7557: PUSH
7558: LD_EXP 22
7562: PUSH
7563: LD_VAR 0 8
7567: ARRAY
7568: PUSH
7569: FOR_IN
7570: IFFALSE 7626
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
7572: LD_VAR 0 3
7576: PUSH
7577: LD_INT 1
7579: ARRAY
7580: PPUSH
7581: LD_VAR 0 3
7585: PUSH
7586: LD_INT 2
7588: ARRAY
7589: PPUSH
7590: LD_INT 3
7592: PPUSH
7593: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
7597: LD_VAR 0 3
7601: PUSH
7602: LD_INT 1
7604: ARRAY
7605: PPUSH
7606: LD_VAR 0 3
7610: PUSH
7611: LD_INT 2
7613: ARRAY
7614: PPUSH
7615: LD_VAR 0 7
7619: PPUSH
7620: CALL_OW 441
// end ;
7624: GO 7569
7626: POP
7627: POP
// end ; InitBc ;
7628: CALL_OW 21
// InitUc ;
7632: CALL_OW 18
// uc_side := side ;
7636: LD_ADDR_OWVAR 20
7640: PUSH
7641: LD_VAR 0 7
7645: ST_TO_ADDR
// uc_nation := nation ;
7646: LD_ADDR_OWVAR 21
7650: PUSH
7651: LD_VAR 0 9
7655: ST_TO_ADDR
// if mpBattleFlag > - 1 then
7656: LD_EXP 31
7660: PUSH
7661: LD_INT 1
7663: NEG
7664: GREATER
7665: IFFALSE 7824
// begin x := mpStartPos [ pos ] [ 1 ] ;
7667: LD_ADDR_VAR 0 5
7671: PUSH
7672: LD_EXP 30
7676: PUSH
7677: LD_VAR 0 8
7681: ARRAY
7682: PUSH
7683: LD_INT 1
7685: ARRAY
7686: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
7687: LD_ADDR_VAR 0 6
7691: PUSH
7692: LD_EXP 30
7696: PUSH
7697: LD_VAR 0 8
7701: ARRAY
7702: PUSH
7703: LD_INT 2
7705: ARRAY
7706: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
7707: LD_VAR 0 5
7711: PPUSH
7712: LD_VAR 0 6
7716: PPUSH
7717: LD_INT 12
7719: PPUSH
7720: LD_INT 2
7722: PPUSH
7723: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
7727: LD_ADDR_EXP 32
7731: PUSH
7732: LD_EXP 32
7736: PPUSH
7737: LD_VAR 0 7
7741: PPUSH
7742: LD_VAR 0 7
7746: PPUSH
7747: LD_VAR 0 5
7751: PPUSH
7752: LD_VAR 0 6
7756: PPUSH
7757: LD_INT 1
7759: PUSH
7760: LD_INT 100
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: PUSH
7767: LD_INT 2
7769: PUSH
7770: LD_INT 70
7772: PUSH
7773: EMPTY
7774: LIST
7775: LIST
7776: PUSH
7777: LD_INT 3
7779: PUSH
7780: LD_INT 40
7782: PUSH
7783: EMPTY
7784: LIST
7785: LIST
7786: PUSH
7787: LD_INT 10
7789: PUSH
7790: LD_INT 25
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: PUSH
7797: LD_INT 20
7799: PUSH
7800: LD_INT 100
7802: PUSH
7803: EMPTY
7804: LIST
7805: LIST
7806: PUSH
7807: EMPTY
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: PPUSH
7814: CALL_OW 418
7818: PPUSH
7819: CALL_OW 1
7823: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
7824: LD_EXP 23
7828: PPUSH
7829: CALL 26404 0 1
7833: IFFALSE 8032
// begin if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore , GameTypeArmsRace , GameTypeArmsArtifact ] then
7835: LD_EXP 12
7839: PUSH
7840: LD_INT 2
7842: PUSH
7843: LD_INT 8
7845: PUSH
7846: LD_INT 6
7848: PUSH
7849: LD_INT 7
7851: PUSH
7852: EMPTY
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: IN
7858: IFFALSE 7878
// begin bc_level := 10 ;
7860: LD_ADDR_OWVAR 43
7864: PUSH
7865: LD_INT 10
7867: ST_TO_ADDR
// bc_type := b_warehouse ;
7868: LD_ADDR_OWVAR 42
7872: PUSH
7873: LD_INT 1
7875: ST_TO_ADDR
// end else
7876: GO 7894
// begin bc_level := 0 ;
7878: LD_ADDR_OWVAR 43
7882: PUSH
7883: LD_INT 0
7885: ST_TO_ADDR
// bc_type := b_depot ;
7886: LD_ADDR_OWVAR 42
7890: PUSH
7891: LD_INT 0
7893: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
7894: LD_ADDR_VAR 0 4
7898: PUSH
7899: LD_EXP 23
7903: PUSH
7904: LD_VAR 0 8
7908: ARRAY
7909: PUSH
7910: LD_INT 1
7912: ARRAY
7913: PPUSH
7914: LD_EXP 23
7918: PUSH
7919: LD_VAR 0 8
7923: ARRAY
7924: PUSH
7925: LD_INT 2
7927: ARRAY
7928: PPUSH
7929: LD_EXP 23
7933: PUSH
7934: LD_VAR 0 8
7938: ARRAY
7939: PUSH
7940: LD_INT 3
7942: ARRAY
7943: PPUSH
7944: CALL_OW 47
7948: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
7949: LD_VAR 0 4
7953: PPUSH
7954: LD_STRING @
7956: PUSH
7957: LD_VAR 0 7
7961: STR
7962: PPUSH
7963: CALL_OW 500
// if Count ( mpStartingResources ) then
7967: LD_EXP 24
7971: PPUSH
7972: CALL 26404 0 1
7976: IFFALSE 8030
// begin for j := 1 to mpStartingResources do
7978: LD_ADDR_VAR 0 3
7982: PUSH
7983: DOUBLE
7984: LD_INT 1
7986: DEC
7987: ST_TO_ADDR
7988: LD_EXP 24
7992: PUSH
7993: FOR_TO
7994: IFFALSE 8028
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
7996: LD_VAR 0 4
8000: PPUSH
8001: CALL_OW 274
8005: PPUSH
8006: LD_VAR 0 3
8010: PPUSH
8011: LD_EXP 24
8015: PUSH
8016: LD_VAR 0 3
8020: ARRAY
8021: PPUSH
8022: CALL_OW 277
8026: GO 7993
8028: POP
8029: POP
// end ; end else
8030: GO 8239
// if Count ( mpStartingResources ) then
8032: LD_EXP 24
8036: PPUSH
8037: CALL 26404 0 1
8041: IFFALSE 8239
// begin x := mpStartPos [ pos ] [ 1 ] ;
8043: LD_ADDR_VAR 0 5
8047: PUSH
8048: LD_EXP 30
8052: PUSH
8053: LD_VAR 0 8
8057: ARRAY
8058: PUSH
8059: LD_INT 1
8061: ARRAY
8062: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
8063: LD_ADDR_VAR 0 6
8067: PUSH
8068: LD_EXP 30
8072: PUSH
8073: LD_VAR 0 8
8077: ARRAY
8078: PUSH
8079: LD_INT 2
8081: ARRAY
8082: ST_TO_ADDR
// for j := 1 to mpStartingResources do
8083: LD_ADDR_VAR 0 3
8087: PUSH
8088: DOUBLE
8089: LD_INT 1
8091: DEC
8092: ST_TO_ADDR
8093: LD_EXP 24
8097: PUSH
8098: FOR_TO
8099: IFFALSE 8237
// begin resources := mpStartingResources [ j ] ;
8101: LD_ADDR_VAR 0 13
8105: PUSH
8106: LD_EXP 24
8110: PUSH
8111: LD_VAR 0 3
8115: ARRAY
8116: ST_TO_ADDR
// if resources = 0 then
8117: LD_VAR 0 13
8121: PUSH
8122: LD_INT 0
8124: EQUAL
8125: IFFALSE 8129
// continue ;
8127: GO 8098
// repeat if resources >= 50 then
8129: LD_VAR 0 13
8133: PUSH
8134: LD_INT 50
8136: GREATEREQUAL
8137: IFFALSE 8183
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
8139: LD_VAR 0 3
8143: PPUSH
8144: LD_INT 5
8146: PPUSH
8147: LD_VAR 0 5
8151: PPUSH
8152: LD_VAR 0 6
8156: PPUSH
8157: LD_INT 6
8159: PPUSH
8160: LD_INT 0
8162: PPUSH
8163: CALL_OW 60
// resources := resources - 50 ;
8167: LD_ADDR_VAR 0 13
8171: PUSH
8172: LD_VAR 0 13
8176: PUSH
8177: LD_INT 50
8179: MINUS
8180: ST_TO_ADDR
// end else
8181: GO 8225
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
8183: LD_VAR 0 3
8187: PPUSH
8188: LD_VAR 0 13
8192: PUSH
8193: LD_INT 10
8195: DIV
8196: PPUSH
8197: LD_VAR 0 5
8201: PPUSH
8202: LD_VAR 0 6
8206: PPUSH
8207: LD_INT 6
8209: PPUSH
8210: LD_INT 0
8212: PPUSH
8213: CALL_OW 60
// resources := 0 ;
8217: LD_ADDR_VAR 0 13
8221: PUSH
8222: LD_INT 0
8224: ST_TO_ADDR
// end ; until resources <= 0 ;
8225: LD_VAR 0 13
8229: PUSH
8230: LD_INT 0
8232: LESSEQUAL
8233: IFFALSE 8129
// end ;
8235: GO 8098
8237: POP
8238: POP
// end ; if Count ( mpBuildings ) and not mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] then
8239: LD_EXP 26
8243: PPUSH
8244: CALL 26404 0 1
8248: IFFALSE 8268
8250: PUSH
8251: LD_EXP 12
8255: PUSH
8256: LD_INT 2
8258: PUSH
8259: LD_INT 8
8261: PUSH
8262: EMPTY
8263: LIST
8264: LIST
8265: IN
8266: NOT
8267: AND
8268: IFFALSE 8346
// begin for j in mpBuildings [ pos ] do
8270: LD_ADDR_VAR 0 3
8274: PUSH
8275: LD_EXP 26
8279: PUSH
8280: LD_VAR 0 8
8284: ARRAY
8285: PUSH
8286: FOR_IN
8287: IFFALSE 8344
// begin bc_level := 0 ;
8289: LD_ADDR_OWVAR 43
8293: PUSH
8294: LD_INT 0
8296: ST_TO_ADDR
// bc_type := j [ 1 ] ;
8297: LD_ADDR_OWVAR 42
8301: PUSH
8302: LD_VAR 0 3
8306: PUSH
8307: LD_INT 1
8309: ARRAY
8310: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
8311: LD_VAR 0 3
8315: PUSH
8316: LD_INT 2
8318: ARRAY
8319: PPUSH
8320: LD_VAR 0 3
8324: PUSH
8325: LD_INT 3
8327: ARRAY
8328: PPUSH
8329: LD_VAR 0 3
8333: PUSH
8334: LD_INT 4
8336: ARRAY
8337: PPUSH
8338: CALL_OW 47
// end ;
8342: GO 8286
8344: POP
8345: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
8346: LD_EXP 35
8350: IFFALSE 8370
8352: PUSH
8353: LD_INT 20
8355: PPUSH
8356: LD_VAR 0 7
8360: PPUSH
8361: CALL_OW 321
8365: PUSH
8366: LD_INT 1
8368: EQUAL
8369: AND
8370: IFFALSE 8387
// SetTech ( tech_SibDet , side , state_researched ) ;
8372: LD_INT 20
8374: PPUSH
8375: LD_VAR 0 7
8379: PPUSH
8380: LD_INT 2
8382: PPUSH
8383: CALL_OW 322
// if not mpArtifacts then
8387: LD_EXP 54
8391: NOT
8392: IFFALSE 8409
// SetTech ( tech_artifact , side , state_disabled ) ;
8394: LD_INT 24
8396: PPUSH
8397: LD_VAR 0 7
8401: PPUSH
8402: LD_INT 0
8404: PPUSH
8405: CALL_OW 322
// if mpSibBomb = 1 then
8409: LD_EXP 37
8413: PUSH
8414: LD_INT 1
8416: EQUAL
8417: IFFALSE 8436
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
8419: LD_INT 25
8421: PPUSH
8422: LD_VAR 0 7
8426: PPUSH
8427: LD_INT 1
8429: PPUSH
8430: CALL_OW 322
// end else
8434: GO 8451
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
8436: LD_INT 25
8438: PPUSH
8439: LD_VAR 0 7
8443: PPUSH
8444: LD_INT 0
8446: PPUSH
8447: CALL_OW 322
// end ; if mpVehicles then
8451: LD_EXP 45
8455: IFFALSE 8554
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
8457: LD_ADDR_VAR 0 3
8461: PUSH
8462: LD_VAR 0 7
8466: PPUSH
8467: LD_VAR 0 9
8471: PPUSH
8472: LD_EXP 45
8476: PPUSH
8477: CALL 9813 0 3
8481: PUSH
8482: FOR_IN
8483: IFFALSE 8552
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
8485: LD_VAR 0 3
8489: PPUSH
8490: LD_INT 0
8492: PPUSH
8493: LD_INT 5
8495: PPUSH
8496: CALL_OW 12
8500: PPUSH
8501: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
8505: LD_VAR 0 3
8509: PPUSH
8510: LD_EXP 30
8514: PUSH
8515: LD_VAR 0 8
8519: ARRAY
8520: PUSH
8521: LD_INT 1
8523: ARRAY
8524: PPUSH
8525: LD_EXP 30
8529: PUSH
8530: LD_VAR 0 8
8534: ARRAY
8535: PUSH
8536: LD_INT 2
8538: ARRAY
8539: PPUSH
8540: LD_INT 12
8542: PPUSH
8543: LD_INT 0
8545: PPUSH
8546: CALL_OW 50
// end ;
8550: GO 8482
8552: POP
8553: POP
// end ; uc_nation := nation ;
8554: LD_ADDR_OWVAR 21
8558: PUSH
8559: LD_VAR 0 9
8563: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
8564: LD_EXP 12
8568: PUSH
8569: LD_INT 6
8571: PUSH
8572: LD_INT 7
8574: PUSH
8575: EMPTY
8576: LIST
8577: LIST
8578: IN
8579: IFFALSE 8604
8581: PUSH
8582: LD_EXP 16
8586: PUSH
8587: LD_VAR 0 2
8591: ARRAY
8592: PUSH
8593: LD_INT 1
8595: PUSH
8596: LD_INT 2
8598: PUSH
8599: EMPTY
8600: LIST
8601: LIST
8602: IN
8603: AND
8604: IFFALSE 8652
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
8606: LD_ADDR_VAR 0 11
8610: PUSH
8611: LD_VAR 0 7
8615: PPUSH
8616: LD_VAR 0 9
8620: PPUSH
8621: LD_EXP 33
8625: PUSH
8626: LD_EXP 33
8630: PUSH
8631: LD_INT 2
8633: DIV
8634: PLUS
8635: PPUSH
8636: LD_EXP 34
8640: PUSH
8641: LD_INT 1
8643: PLUS
8644: PPUSH
8645: CALL 9268 0 4
8649: ST_TO_ADDR
8650: GO 8682
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
8652: LD_ADDR_VAR 0 11
8656: PUSH
8657: LD_VAR 0 7
8661: PPUSH
8662: LD_VAR 0 9
8666: PPUSH
8667: LD_EXP 33
8671: PPUSH
8672: LD_EXP 34
8676: PPUSH
8677: CALL 9268 0 4
8681: ST_TO_ADDR
// for j in team do
8682: LD_ADDR_VAR 0 3
8686: PUSH
8687: LD_VAR 0 11
8691: PUSH
8692: FOR_IN
8693: IFFALSE 8742
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
8695: LD_VAR 0 3
8699: PPUSH
8700: LD_EXP 30
8704: PUSH
8705: LD_VAR 0 8
8709: ARRAY
8710: PUSH
8711: LD_INT 1
8713: ARRAY
8714: PPUSH
8715: LD_EXP 30
8719: PUSH
8720: LD_VAR 0 8
8724: ARRAY
8725: PUSH
8726: LD_INT 2
8728: ARRAY
8729: PPUSH
8730: LD_INT 12
8732: PPUSH
8733: LD_INT 0
8735: PPUSH
8736: CALL_OW 50
8740: GO 8692
8742: POP
8743: POP
// if mpApemans then
8744: LD_EXP 39
8748: IFFALSE 8854
// begin for j := 1 to mpApemans do
8750: LD_ADDR_VAR 0 3
8754: PUSH
8755: DOUBLE
8756: LD_INT 1
8758: DEC
8759: ST_TO_ADDR
8760: LD_EXP 39
8764: PUSH
8765: FOR_TO
8766: IFFALSE 8852
// begin PrepareApeman ( - 5 ) ;
8768: LD_INT 5
8770: NEG
8771: PPUSH
8772: CALL 58507 0 1
// ape := CreateHuman ;
8776: LD_ADDR_VAR 0 10
8780: PUSH
8781: CALL_OW 44
8785: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
8786: LD_ADDR_EXP 41
8790: PUSH
8791: LD_EXP 41
8795: PPUSH
8796: LD_VAR 0 8
8800: PPUSH
8801: LD_EXP 41
8805: PUSH
8806: LD_VAR 0 8
8810: ARRAY
8811: PPUSH
8812: LD_VAR 0 10
8816: PPUSH
8817: CALL 62380 0 2
8821: PPUSH
8822: CALL_OW 1
8826: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
8827: LD_VAR 0 10
8831: PPUSH
8832: LD_EXP 40
8836: PUSH
8837: LD_VAR 0 8
8841: ARRAY
8842: PPUSH
8843: LD_INT 0
8845: PPUSH
8846: CALL_OW 49
// end ;
8850: GO 8765
8852: POP
8853: POP
// end ; end ;
8854: GO 7396
8856: POP
8857: POP
// if not mpTeamGame then
8858: LD_EXP 20
8862: NOT
8863: IFFALSE 8961
// begin for i := 1 to 8 do
8865: LD_ADDR_VAR 0 2
8869: PUSH
8870: DOUBLE
8871: LD_INT 1
8873: DEC
8874: ST_TO_ADDR
8875: LD_INT 8
8877: PUSH
8878: FOR_TO
8879: IFFALSE 8957
// for j := 1 to 8 do
8881: LD_ADDR_VAR 0 3
8885: PUSH
8886: DOUBLE
8887: LD_INT 1
8889: DEC
8890: ST_TO_ADDR
8891: LD_INT 8
8893: PUSH
8894: FOR_TO
8895: IFFALSE 8953
// if i <> j then
8897: LD_VAR 0 2
8901: PUSH
8902: LD_VAR 0 3
8906: NONEQUAL
8907: IFFALSE 8931
// SetAttitude ( i , j , att_neutral , true ) else
8909: LD_VAR 0 2
8913: PPUSH
8914: LD_VAR 0 3
8918: PPUSH
8919: LD_INT 0
8921: PPUSH
8922: LD_INT 1
8924: PPUSH
8925: CALL_OW 80
8929: GO 8951
// SetAttitude ( i , j , att_friend , true ) ;
8931: LD_VAR 0 2
8935: PPUSH
8936: LD_VAR 0 3
8940: PPUSH
8941: LD_INT 1
8943: PPUSH
8944: LD_INT 1
8946: PPUSH
8947: CALL_OW 80
8951: GO 8894
8953: POP
8954: POP
8955: GO 8878
8957: POP
8958: POP
// end else
8959: GO 9136
// begin if mpSharedVision then
8961: LD_EXP 25
8965: IFFALSE 9030
// begin for i in mpTeams do
8967: LD_ADDR_VAR 0 2
8971: PUSH
8972: LD_EXP 19
8976: PUSH
8977: FOR_IN
8978: IFFALSE 9028
// for j := 2 to i do
8980: LD_ADDR_VAR 0 3
8984: PUSH
8985: DOUBLE
8986: LD_INT 2
8988: DEC
8989: ST_TO_ADDR
8990: LD_VAR 0 2
8994: PUSH
8995: FOR_TO
8996: IFFALSE 9024
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
8998: LD_VAR 0 2
9002: PUSH
9003: LD_VAR 0 3
9007: ARRAY
9008: PPUSH
9009: LD_VAR 0 2
9013: PUSH
9014: LD_INT 1
9016: ARRAY
9017: PPUSH
9018: CALL_OW 343
9022: GO 8995
9024: POP
9025: POP
9026: GO 8977
9028: POP
9029: POP
// end ; for i := 1 to 8 do
9030: LD_ADDR_VAR 0 2
9034: PUSH
9035: DOUBLE
9036: LD_INT 1
9038: DEC
9039: ST_TO_ADDR
9040: LD_INT 8
9042: PUSH
9043: FOR_TO
9044: IFFALSE 9134
// for j := 1 to 8 do
9046: LD_ADDR_VAR 0 3
9050: PUSH
9051: DOUBLE
9052: LD_INT 1
9054: DEC
9055: ST_TO_ADDR
9056: LD_INT 8
9058: PUSH
9059: FOR_TO
9060: IFFALSE 9130
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
9062: LD_EXP 17
9066: PUSH
9067: LD_VAR 0 2
9071: ARRAY
9072: PUSH
9073: LD_EXP 17
9077: PUSH
9078: LD_VAR 0 3
9082: ARRAY
9083: EQUAL
9084: IFFALSE 9108
// SetAttitude ( i , j , att_friend , true ) else
9086: LD_VAR 0 2
9090: PPUSH
9091: LD_VAR 0 3
9095: PPUSH
9096: LD_INT 1
9098: PPUSH
9099: LD_INT 1
9101: PPUSH
9102: CALL_OW 80
9106: GO 9128
// SetAttitude ( i , j , att_enemy , true ) ;
9108: LD_VAR 0 2
9112: PPUSH
9113: LD_VAR 0 3
9117: PPUSH
9118: LD_INT 2
9120: PPUSH
9121: LD_INT 1
9123: PPUSH
9124: CALL_OW 80
9128: GO 9059
9130: POP
9131: POP
9132: GO 9043
9134: POP
9135: POP
// end ; music_nat := mpSideNations [ your_side ] ;
9136: LD_ADDR_OWVAR 71
9140: PUSH
9141: LD_EXP 18
9145: PUSH
9146: LD_OWVAR 2
9150: ARRAY
9151: ST_TO_ADDR
// if IAmSpec then
9152: CALL_OW 531
9156: IFFALSE 9197
// begin FogOff ( true ) ;
9158: LD_INT 1
9160: PPUSH
9161: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
9165: LD_EXP 38
9169: PUSH
9170: LD_INT 1
9172: ARRAY
9173: PUSH
9174: LD_INT 2
9176: DIV
9177: PPUSH
9178: LD_EXP 38
9182: PUSH
9183: LD_INT 2
9185: ARRAY
9186: PUSH
9187: LD_INT 2
9189: DIV
9190: PPUSH
9191: CALL_OW 86
// end else
9195: GO 9243
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
9197: LD_EXP 30
9201: PUSH
9202: LD_EXP 16
9206: PUSH
9207: LD_OWVAR 2
9211: ARRAY
9212: ARRAY
9213: PUSH
9214: LD_INT 1
9216: ARRAY
9217: PPUSH
9218: LD_EXP 30
9222: PUSH
9223: LD_EXP 16
9227: PUSH
9228: LD_OWVAR 2
9232: ARRAY
9233: ARRAY
9234: PUSH
9235: LD_INT 2
9237: ARRAY
9238: PPUSH
9239: CALL_OW 86
// end ; BeginBuildUp ;
9243: CALL 10346 0 0
// enable ( mpActive ) ;
9247: LD_INT 100
9249: ENABLE_MARKED
// enable ( mpGameType ) ;
9250: LD_EXP 12
9254: ENABLE_MARKED
// mpGameActive := true ;
9255: LD_ADDR_EXP 48
9259: PUSH
9260: LD_INT 1
9262: ST_TO_ADDR
// end ;
9263: LD_VAR 0 1
9267: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class , commander ; begin
9268: LD_INT 0
9270: PPUSH
9271: PPUSH
9272: PPUSH
9273: PPUSH
9274: PPUSH
// result := [ ] ;
9275: LD_ADDR_VAR 0 5
9279: PUSH
9280: EMPTY
9281: ST_TO_ADDR
// class := class_soldier ;
9282: LD_ADDR_VAR 0 8
9286: PUSH
9287: LD_INT 1
9289: ST_TO_ADDR
// uc_side := side ;
9290: LD_ADDR_OWVAR 20
9294: PUSH
9295: LD_VAR 0 1
9299: ST_TO_ADDR
// uc_nation := nation ;
9300: LD_ADDR_OWVAR 21
9304: PUSH
9305: LD_VAR 0 2
9309: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
9310: LD_ADDR_OWVAR 26
9314: PUSH
9315: LD_OWVAR 19
9319: PUSH
9320: LD_VAR 0 1
9324: ARRAY
9325: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
9326: LD_INT 1
9328: PPUSH
9329: LD_INT 2
9331: PPUSH
9332: CALL_OW 12
9336: PPUSH
9337: LD_VAR 0 8
9341: PPUSH
9342: LD_VAR 0 4
9346: PUSH
9347: LD_INT 2
9349: PLUS
9350: PPUSH
9351: CALL_OW 380
// hc_importance := 105 ;
9355: LD_ADDR_OWVAR 32
9359: PUSH
9360: LD_INT 105
9362: ST_TO_ADDR
// if Multiplayer then
9363: LD_OWVAR 4
9367: IFFALSE 9407
// begin hc_gallery := MULTIAVATARS ;
9369: LD_ADDR_OWVAR 33
9373: PUSH
9374: LD_STRING MULTIAVATARS
9376: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
9377: LD_ADDR_OWVAR 34
9381: PUSH
9382: LD_VAR 0 1
9386: PPUSH
9387: CALL_OW 525
9391: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
9392: LD_ADDR_OWVAR 27
9396: PUSH
9397: LD_VAR 0 1
9401: PPUSH
9402: CALL_OW 526
9406: ST_TO_ADDR
// end ; commander := CreateHuman ;
9407: LD_ADDR_VAR 0 9
9411: PUSH
9412: CALL_OW 44
9416: ST_TO_ADDR
// result := Join ( result , commander ) ;
9417: LD_ADDR_VAR 0 5
9421: PUSH
9422: LD_VAR 0 5
9426: PPUSH
9427: LD_VAR 0 9
9431: PPUSH
9432: CALL 62380 0 2
9436: ST_TO_ADDR
// mpCommanders := Replace ( mpCommanders , side , commander ) ;
9437: LD_ADDR_EXP 50
9441: PUSH
9442: LD_EXP 50
9446: PPUSH
9447: LD_VAR 0 1
9451: PPUSH
9452: LD_VAR 0 9
9456: PPUSH
9457: CALL_OW 1
9461: ST_TO_ADDR
// if mpTeamPreset then
9462: LD_LOC 1
9466: IFFALSE 9562
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
9468: LD_LOC 1
9472: PUSH
9473: LD_INT 1
9475: ARRAY
9476: PPUSH
9477: LD_VAR 0 5
9481: PUSH
9482: LD_VAR 0 5
9486: ARRAY
9487: PPUSH
9488: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
9492: LD_VAR 0 5
9496: PUSH
9497: LD_VAR 0 5
9501: ARRAY
9502: PPUSH
9503: LD_INT 1
9505: PPUSH
9506: LD_LOC 1
9510: PUSH
9511: LD_INT 1
9513: ARRAY
9514: PPUSH
9515: LD_INT 1
9517: PPUSH
9518: CALL_OW 260
9522: PPUSH
9523: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
9527: LD_VAR 0 5
9531: PUSH
9532: LD_VAR 0 5
9536: ARRAY
9537: PPUSH
9538: LD_INT 2
9540: PPUSH
9541: LD_LOC 1
9545: PUSH
9546: LD_INT 1
9548: ARRAY
9549: PPUSH
9550: LD_INT 2
9552: PPUSH
9553: CALL_OW 260
9557: PPUSH
9558: CALL_OW 239
// end ; InitHc_All ( ) ;
9562: CALL_OW 584
// class := 2 ;
9566: LD_ADDR_VAR 0 8
9570: PUSH
9571: LD_INT 2
9573: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
9574: LD_ADDR_VAR 0 6
9578: PUSH
9579: DOUBLE
9580: LD_INT 1
9582: DEC
9583: ST_TO_ADDR
9584: LD_VAR 0 3
9588: PUSH
9589: LD_INT 1
9591: MINUS
9592: PUSH
9593: FOR_TO
9594: IFFALSE 9789
// begin PrepareHuman ( false , class , skill ) ;
9596: LD_INT 0
9598: PPUSH
9599: LD_VAR 0 8
9603: PPUSH
9604: LD_VAR 0 4
9608: PPUSH
9609: CALL_OW 380
// un := CreateHuman ;
9613: LD_ADDR_VAR 0 7
9617: PUSH
9618: CALL_OW 44
9622: ST_TO_ADDR
// result := Join ( result , un ) ;
9623: LD_ADDR_VAR 0 5
9627: PUSH
9628: LD_VAR 0 5
9632: PPUSH
9633: LD_VAR 0 7
9637: PPUSH
9638: CALL 62380 0 2
9642: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
9643: LD_LOC 1
9647: PPUSH
9648: CALL 26404 0 1
9652: PUSH
9653: LD_VAR 0 3
9657: GREATEREQUAL
9658: IFFALSE 9754
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
9660: LD_LOC 1
9664: PUSH
9665: LD_VAR 0 6
9669: PUSH
9670: LD_INT 1
9672: PLUS
9673: ARRAY
9674: PPUSH
9675: LD_VAR 0 7
9679: PPUSH
9680: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
9684: LD_VAR 0 7
9688: PPUSH
9689: LD_INT 1
9691: PPUSH
9692: LD_LOC 1
9696: PUSH
9697: LD_VAR 0 6
9701: PUSH
9702: LD_INT 1
9704: PLUS
9705: ARRAY
9706: PPUSH
9707: LD_INT 1
9709: PPUSH
9710: CALL_OW 260
9714: PPUSH
9715: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
9719: LD_VAR 0 7
9723: PPUSH
9724: LD_INT 2
9726: PPUSH
9727: LD_LOC 1
9731: PUSH
9732: LD_VAR 0 6
9736: PUSH
9737: LD_INT 1
9739: PLUS
9740: ARRAY
9741: PPUSH
9742: LD_INT 2
9744: PPUSH
9745: CALL_OW 260
9749: PPUSH
9750: CALL_OW 239
// end ; class := Inc ( class ) ;
9754: LD_ADDR_VAR 0 8
9758: PUSH
9759: LD_VAR 0 8
9763: PPUSH
9764: CALL 63753 0 1
9768: ST_TO_ADDR
// if class = 5 then
9769: LD_VAR 0 8
9773: PUSH
9774: LD_INT 5
9776: EQUAL
9777: IFFALSE 9787
// class := 1 ;
9779: LD_ADDR_VAR 0 8
9783: PUSH
9784: LD_INT 1
9786: ST_TO_ADDR
// end ;
9787: GO 9593
9789: POP
9790: POP
// if not mpTeamPreset then
9791: LD_LOC 1
9795: NOT
9796: IFFALSE 9808
// mpTeamPreset := result ;
9798: LD_ADDR_LOC 1
9802: PUSH
9803: LD_VAR 0 5
9807: ST_TO_ADDR
// end ;
9808: LD_VAR 0 5
9812: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
9813: LD_INT 0
9815: PPUSH
9816: PPUSH
// result := [ ] ;
9817: LD_ADDR_VAR 0 4
9821: PUSH
9822: EMPTY
9823: ST_TO_ADDR
// if not vehicles then
9824: LD_VAR 0 3
9828: NOT
9829: IFFALSE 9833
// exit ;
9831: GO 10047
// for i := 1 to vehicles [ nation ] do
9833: LD_ADDR_VAR 0 5
9837: PUSH
9838: DOUBLE
9839: LD_INT 1
9841: DEC
9842: ST_TO_ADDR
9843: LD_VAR 0 3
9847: PUSH
9848: LD_VAR 0 2
9852: ARRAY
9853: PUSH
9854: FOR_TO
9855: IFFALSE 10045
// begin uc_side := side ;
9857: LD_ADDR_OWVAR 20
9861: PUSH
9862: LD_VAR 0 1
9866: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
9867: LD_VAR 0 3
9871: PUSH
9872: LD_VAR 0 2
9876: ARRAY
9877: PUSH
9878: LD_VAR 0 5
9882: ARRAY
9883: PPUSH
9884: CALL 26404 0 1
9888: PUSH
9889: LD_INT 4
9891: GREATER
9892: IFFALSE 9922
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
9894: LD_ADDR_OWVAR 21
9898: PUSH
9899: LD_VAR 0 3
9903: PUSH
9904: LD_VAR 0 2
9908: ARRAY
9909: PUSH
9910: LD_VAR 0 5
9914: ARRAY
9915: PUSH
9916: LD_INT 5
9918: ARRAY
9919: ST_TO_ADDR
9920: GO 9932
// uc_nation := nation ;
9922: LD_ADDR_OWVAR 21
9926: PUSH
9927: LD_VAR 0 2
9931: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
9932: LD_VAR 0 3
9936: PUSH
9937: LD_VAR 0 2
9941: ARRAY
9942: PUSH
9943: LD_VAR 0 5
9947: ARRAY
9948: PUSH
9949: LD_INT 1
9951: ARRAY
9952: PPUSH
9953: LD_VAR 0 3
9957: PUSH
9958: LD_VAR 0 2
9962: ARRAY
9963: PUSH
9964: LD_VAR 0 5
9968: ARRAY
9969: PUSH
9970: LD_INT 2
9972: ARRAY
9973: PPUSH
9974: LD_VAR 0 3
9978: PUSH
9979: LD_VAR 0 2
9983: ARRAY
9984: PUSH
9985: LD_VAR 0 5
9989: ARRAY
9990: PUSH
9991: LD_INT 3
9993: ARRAY
9994: PPUSH
9995: LD_VAR 0 3
9999: PUSH
10000: LD_VAR 0 2
10004: ARRAY
10005: PUSH
10006: LD_VAR 0 5
10010: ARRAY
10011: PUSH
10012: LD_INT 4
10014: ARRAY
10015: PPUSH
10016: LD_INT 80
10018: PPUSH
10019: CALL 29200 0 5
// result := Join ( result , CreateVehicle ) ;
10023: LD_ADDR_VAR 0 4
10027: PUSH
10028: LD_VAR 0 4
10032: PPUSH
10033: CALL_OW 45
10037: PPUSH
10038: CALL 62380 0 2
10042: ST_TO_ADDR
// end ;
10043: GO 9854
10045: POP
10046: POP
// end ;
10047: LD_VAR 0 4
10051: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
10052: LD_INT 0
10054: PPUSH
10055: PPUSH
// for i in mpBattleFlags do
10056: LD_ADDR_VAR 0 3
10060: PUSH
10061: LD_EXP 32
10065: PUSH
10066: FOR_IN
10067: IFFALSE 10144
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
10069: LD_VAR 0 3
10073: PPUSH
10074: LD_INT 1
10076: PUSH
10077: LD_VAR 0 1
10081: PUSH
10082: EMPTY
10083: LIST
10084: LIST
10085: PUSH
10086: LD_INT 2
10088: PUSH
10089: LD_VAR 0 1
10093: PUSH
10094: LD_REAL  7.00000000000000E-0001
10097: MUL
10098: PUSH
10099: EMPTY
10100: LIST
10101: LIST
10102: PUSH
10103: LD_INT 3
10105: PUSH
10106: LD_VAR 0 1
10110: PUSH
10111: LD_REAL  4.00000000000000E-0001
10114: MUL
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: PUSH
10120: LD_INT 20
10122: PUSH
10123: LD_VAR 0 1
10127: PUSH
10128: EMPTY
10129: LIST
10130: LIST
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: PPUSH
10138: CALL_OW 423
10142: GO 10066
10144: POP
10145: POP
// end ;
10146: LD_VAR 0 2
10150: RET
// every 0 0$1 trigger mpActive do var i , strength ;
10151: LD_INT 100
10153: IFFALSE 10248
10155: GO 10157
10157: DISABLE
10158: LD_INT 0
10160: PPUSH
10161: PPUSH
// begin if mpBattleFlag <= 0 then
10162: LD_EXP 31
10166: PUSH
10167: LD_INT 0
10169: LESSEQUAL
10170: IFFALSE 10174
// exit ;
10172: GO 10248
// strength := 100 ;
10174: LD_ADDR_VAR 0 2
10178: PUSH
10179: LD_INT 100
10181: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
10182: LD_EXP 31
10186: PPUSH
10187: CALL_OW 67
// strength := Dec ( strength ) ;
10191: LD_ADDR_VAR 0 2
10195: PUSH
10196: LD_VAR 0 2
10200: PPUSH
10201: CALL 63775 0 1
10205: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
10206: LD_VAR 0 2
10210: PPUSH
10211: CALL 10052 0 1
// until not strength ;
10215: LD_VAR 0 2
10219: NOT
10220: IFFALSE 10182
// for i in mpBattleFlags do
10222: LD_ADDR_VAR 0 1
10226: PUSH
10227: LD_EXP 32
10231: PUSH
10232: FOR_IN
10233: IFFALSE 10246
// KillBattleFlag ( i ) ;
10235: LD_VAR 0 1
10239: PPUSH
10240: CALL_OW 419
10244: GO 10232
10246: POP
10247: POP
// end ;
10248: PPOPN 2
10250: END
// every 0 0$1 marked mpActive do var side , tmp ;
10251: GO 10253
10253: DISABLE
10254: LD_INT 0
10256: PPUSH
10257: PPUSH
// begin if mpSibBomb <= 1 then
10258: LD_EXP 37
10262: PUSH
10263: LD_INT 1
10265: LESSEQUAL
10266: IFFALSE 10270
// exit ;
10268: GO 10343
// tmp := mpSibBomb ;
10270: LD_ADDR_VAR 0 2
10274: PUSH
10275: LD_EXP 37
10279: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10280: LD_INT 35
10282: PPUSH
10283: CALL_OW 67
// tmp := tmp - 0 0$1 ;
10287: LD_ADDR_VAR 0 2
10291: PUSH
10292: LD_VAR 0 2
10296: PUSH
10297: LD_INT 35
10299: MINUS
10300: ST_TO_ADDR
// until not tmp ;
10301: LD_VAR 0 2
10305: NOT
10306: IFFALSE 10280
// for side := 1 to 8 do
10308: LD_ADDR_VAR 0 1
10312: PUSH
10313: DOUBLE
10314: LD_INT 1
10316: DEC
10317: ST_TO_ADDR
10318: LD_INT 8
10320: PUSH
10321: FOR_TO
10322: IFFALSE 10341
// SetTech ( tech_SibFiss , side , state_enabled ) ;
10324: LD_INT 25
10326: PPUSH
10327: LD_VAR 0 1
10331: PPUSH
10332: LD_INT 1
10334: PPUSH
10335: CALL_OW 322
10339: GO 10321
10341: POP
10342: POP
// end ;
10343: PPOPN 2
10345: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
10346: LD_INT 0
10348: PPUSH
10349: PPUSH
10350: PPUSH
// mpBuildUpTimeDelay := 0 ;
10351: LD_ADDR_EXP 57
10355: PUSH
10356: LD_INT 0
10358: ST_TO_ADDR
// if not mpBuildUpTime then
10359: LD_EXP 29
10363: NOT
10364: IFFALSE 10368
// exit ;
10366: GO 10557
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
10368: LD_ADDR_EXP 57
10372: PUSH
10373: LD_INT 8400
10375: PUSH
10376: LD_INT 2100
10378: PUSH
10379: LD_EXP 29
10383: MUL
10384: PLUS
10385: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
10386: LD_ADDR_EXP 58
10390: PUSH
10391: LD_INT 1
10393: ST_TO_ADDR
// for i := 1 to 8 do
10394: LD_ADDR_VAR 0 2
10398: PUSH
10399: DOUBLE
10400: LD_INT 1
10402: DEC
10403: ST_TO_ADDR
10404: LD_INT 8
10406: PUSH
10407: FOR_TO
10408: IFFALSE 10555
// if mpSidePositions [ i ] then
10410: LD_EXP 16
10414: PUSH
10415: LD_VAR 0 2
10419: ARRAY
10420: IFFALSE 10553
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
10422: LD_EXP 28
10426: PUSH
10427: LD_EXP 16
10431: PUSH
10432: LD_VAR 0 2
10436: ARRAY
10437: ARRAY
10438: PPUSH
10439: LD_INT 5
10441: PPUSH
10442: CALL_OW 424
// for j := 1 to 8 do
10446: LD_ADDR_VAR 0 3
10450: PUSH
10451: DOUBLE
10452: LD_INT 1
10454: DEC
10455: ST_TO_ADDR
10456: LD_INT 8
10458: PUSH
10459: FOR_TO
10460: IFFALSE 10551
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
10462: LD_EXP 16
10466: PUSH
10467: LD_VAR 0 3
10471: ARRAY
10472: IFFALSE 10521
10474: PUSH
10475: LD_EXP 17
10479: PUSH
10480: LD_VAR 0 2
10484: ARRAY
10485: PUSH
10486: LD_EXP 17
10490: PUSH
10491: LD_VAR 0 3
10495: ARRAY
10496: NONEQUAL
10497: IFTRUE 10520
10499: PUSH
10500: LD_EXP 20
10504: NOT
10505: IFFALSE 10519
10507: PUSH
10508: LD_VAR 0 2
10512: PUSH
10513: LD_VAR 0 3
10517: NONEQUAL
10518: AND
10519: OR
10520: AND
10521: IFFALSE 10549
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
10523: LD_VAR 0 3
10527: PPUSH
10528: LD_EXP 28
10532: PUSH
10533: LD_EXP 16
10537: PUSH
10538: LD_VAR 0 2
10542: ARRAY
10543: ARRAY
10544: PPUSH
10545: CALL_OW 333
10549: GO 10459
10551: POP
10552: POP
// end ;
10553: GO 10407
10555: POP
10556: POP
// end ;
10557: LD_VAR 0 1
10561: RET
// function EndBuildUp ; var i , j ; begin
10562: LD_INT 0
10564: PPUSH
10565: PPUSH
10566: PPUSH
// mpBuildUpTimeActive := false ;
10567: LD_ADDR_EXP 58
10571: PUSH
10572: LD_INT 0
10574: ST_TO_ADDR
// for i := 1 to 8 do
10575: LD_ADDR_VAR 0 2
10579: PUSH
10580: DOUBLE
10581: LD_INT 1
10583: DEC
10584: ST_TO_ADDR
10585: LD_INT 8
10587: PUSH
10588: FOR_TO
10589: IFFALSE 10736
// if mpSidePositions [ i ] then
10591: LD_EXP 16
10595: PUSH
10596: LD_VAR 0 2
10600: ARRAY
10601: IFFALSE 10734
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
10603: LD_EXP 28
10607: PUSH
10608: LD_EXP 16
10612: PUSH
10613: LD_VAR 0 2
10617: ARRAY
10618: ARRAY
10619: PPUSH
10620: LD_INT 0
10622: PPUSH
10623: CALL_OW 424
// for j := 1 to 8 do
10627: LD_ADDR_VAR 0 3
10631: PUSH
10632: DOUBLE
10633: LD_INT 1
10635: DEC
10636: ST_TO_ADDR
10637: LD_INT 8
10639: PUSH
10640: FOR_TO
10641: IFFALSE 10732
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
10643: LD_EXP 16
10647: PUSH
10648: LD_VAR 0 3
10652: ARRAY
10653: IFFALSE 10702
10655: PUSH
10656: LD_EXP 17
10660: PUSH
10661: LD_VAR 0 2
10665: ARRAY
10666: PUSH
10667: LD_EXP 17
10671: PUSH
10672: LD_VAR 0 3
10676: ARRAY
10677: NONEQUAL
10678: IFTRUE 10701
10680: PUSH
10681: LD_EXP 20
10685: NOT
10686: IFFALSE 10700
10688: PUSH
10689: LD_VAR 0 2
10693: PUSH
10694: LD_VAR 0 3
10698: NONEQUAL
10699: AND
10700: OR
10701: AND
10702: IFFALSE 10730
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
10704: LD_VAR 0 3
10708: PPUSH
10709: LD_EXP 28
10713: PUSH
10714: LD_EXP 16
10718: PUSH
10719: LD_VAR 0 2
10723: ARRAY
10724: ARRAY
10725: PPUSH
10726: CALL_OW 334
10730: GO 10640
10732: POP
10733: POP
// end ;
10734: GO 10588
10736: POP
10737: POP
// end ;
10738: LD_VAR 0 1
10742: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
10743: LD_EXP 58
10747: IFFALSE 10928
10749: GO 10751
10751: DISABLE
10752: LD_INT 0
10754: PPUSH
10755: PPUSH
// begin for i := 1 to 8 do
10756: LD_ADDR_VAR 0 1
10760: PUSH
10761: DOUBLE
10762: LD_INT 1
10764: DEC
10765: ST_TO_ADDR
10766: LD_INT 8
10768: PUSH
10769: FOR_TO
10770: IFFALSE 10925
// if mpSidePositions [ i ] then
10772: LD_EXP 16
10776: PUSH
10777: LD_VAR 0 1
10781: ARRAY
10782: IFFALSE 10923
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
10784: LD_ADDR_VAR 0 2
10788: PUSH
10789: LD_EXP 28
10793: PUSH
10794: LD_EXP 16
10798: PUSH
10799: LD_VAR 0 1
10803: ARRAY
10804: ARRAY
10805: PPUSH
10806: LD_INT 2
10808: PUSH
10809: LD_INT 21
10811: PUSH
10812: LD_INT 1
10814: PUSH
10815: EMPTY
10816: LIST
10817: LIST
10818: PUSH
10819: LD_INT 21
10821: PUSH
10822: LD_INT 2
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: LIST
10833: PUSH
10834: LD_INT 22
10836: PUSH
10837: LD_OWVAR 2
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PPUSH
10850: CALL_OW 70
10854: PUSH
10855: FOR_IN
10856: IFFALSE 10921
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
10858: LD_EXP 17
10862: PUSH
10863: LD_VAR 0 1
10867: ARRAY
10868: PUSH
10869: LD_EXP 17
10873: PUSH
10874: LD_OWVAR 2
10878: ARRAY
10879: NONEQUAL
10880: IFTRUE 10903
10882: PUSH
10883: LD_EXP 20
10887: NOT
10888: IFFALSE 10902
10890: PUSH
10891: LD_VAR 0 1
10895: PUSH
10896: LD_OWVAR 2
10900: NONEQUAL
10901: AND
10902: OR
10903: IFFALSE 10919
// ComMoveToArea ( un , BuildUpEscape ) ;
10905: LD_VAR 0 2
10909: PPUSH
10910: LD_EXP 1
10914: PPUSH
10915: CALL_OW 113
10919: GO 10855
10921: POP
10922: POP
10923: GO 10769
10925: POP
10926: POP
// enable ;
10927: ENABLE
// end ;
10928: PPOPN 2
10930: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
10931: LD_EXP 29
10935: IFFALSE 10985
10937: GO 10939
10939: DISABLE
10940: LD_INT 0
10942: PPUSH
// begin tmp := mpBuildUpTime ;
10943: LD_ADDR_VAR 0 1
10947: PUSH
10948: LD_EXP 29
10952: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10953: LD_INT 35
10955: PPUSH
10956: CALL_OW 67
// tmp := tmp - 0 0$1 ;
10960: LD_ADDR_VAR 0 1
10964: PUSH
10965: LD_VAR 0 1
10969: PUSH
10970: LD_INT 35
10972: MINUS
10973: ST_TO_ADDR
// until not tmp ;
10974: LD_VAR 0 1
10978: NOT
10979: IFFALSE 10953
// EndBuildUp ;
10981: CALL 10562 0 0
// end ;
10985: PPOPN 1
10987: END
// every 0 0$1 trigger mpActive marked mpWin do
10988: LD_INT 100
10990: IFFALSE 11024
10992: GO 10994
10994: DISABLE
// begin if IAmServer then
10995: CALL_OW 518
10999: IFFALSE 11008
// wait ( 0 0$3 ) ;
11001: LD_INT 105
11003: PPUSH
11004: CALL_OW 67
// if Multiplayer then
11008: LD_OWVAR 4
11012: IFFALSE 11020
// YouWinInMultiplayer else
11014: CALL_OW 106
11018: GO 11024
// YouWin ;
11020: CALL_OW 103
// end ;
11024: END
// export function HasPowerByGameType ( gameType , side ) ; begin
11025: LD_INT 0
11027: PPUSH
// result := false ;
11028: LD_ADDR_VAR 0 3
11032: PUSH
11033: LD_INT 0
11035: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
11036: LD_VAR 0 1
11040: PUSH
11041: LD_INT 1
11043: DOUBLE
11044: EQUAL
11045: IFTRUE 11067
11047: LD_INT 5
11049: DOUBLE
11050: EQUAL
11051: IFTRUE 11067
11053: LD_INT 6
11055: DOUBLE
11056: EQUAL
11057: IFTRUE 11067
11059: LD_INT 7
11061: DOUBLE
11062: EQUAL
11063: IFTRUE 11067
11065: GO 11140
11067: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
11068: LD_ADDR_VAR 0 3
11072: PUSH
11073: LD_INT 22
11075: PUSH
11076: LD_VAR 0 2
11080: PUSH
11081: EMPTY
11082: LIST
11083: LIST
11084: PUSH
11085: LD_INT 2
11087: PUSH
11088: LD_INT 21
11090: PUSH
11091: LD_INT 1
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: PUSH
11098: LD_INT 33
11100: PUSH
11101: LD_INT 3
11103: PUSH
11104: EMPTY
11105: LIST
11106: LIST
11107: PUSH
11108: LD_INT 33
11110: PUSH
11111: LD_INT 5
11113: PUSH
11114: EMPTY
11115: LIST
11116: LIST
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: PUSH
11124: EMPTY
11125: LIST
11126: LIST
11127: PPUSH
11128: CALL_OW 69
11132: PPUSH
11133: CALL 26404 0 1
11137: ST_TO_ADDR
// end ; GameTypeSurvival :
11138: GO 11536
11140: LD_INT 2
11142: DOUBLE
11143: EQUAL
11144: IFTRUE 11148
11146: GO 11278
11148: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
11149: LD_ADDR_VAR 0 3
11153: PUSH
11154: LD_INT 22
11156: PUSH
11157: LD_VAR 0 2
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: PUSH
11166: LD_INT 2
11168: PUSH
11169: LD_INT 30
11171: PUSH
11172: LD_INT 0
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: PUSH
11179: LD_INT 30
11181: PUSH
11182: LD_INT 1
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: LIST
11193: PUSH
11194: EMPTY
11195: LIST
11196: LIST
11197: PPUSH
11198: CALL_OW 69
11202: PPUSH
11203: CALL 26404 0 1
11207: IFFALSE 11275
11209: PUSH
11210: LD_INT 22
11212: PUSH
11213: LD_VAR 0 2
11217: PUSH
11218: EMPTY
11219: LIST
11220: LIST
11221: PUSH
11222: LD_INT 2
11224: PUSH
11225: LD_INT 21
11227: PUSH
11228: LD_INT 1
11230: PUSH
11231: EMPTY
11232: LIST
11233: LIST
11234: PUSH
11235: LD_INT 33
11237: PUSH
11238: LD_INT 3
11240: PUSH
11241: EMPTY
11242: LIST
11243: LIST
11244: PUSH
11245: LD_INT 33
11247: PUSH
11248: LD_INT 5
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PPUSH
11265: CALL_OW 69
11269: PPUSH
11270: CALL 26404 0 1
11274: AND
11275: ST_TO_ADDR
// end ; GameTypeSurvivalHardcore :
11276: GO 11536
11278: LD_INT 8
11280: DOUBLE
11281: EQUAL
11282: IFTRUE 11286
11284: GO 11435
11286: POP
// begin result := IsLive ( mpCommanders [ side ] ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
11287: LD_ADDR_VAR 0 3
11291: PUSH
11292: LD_EXP 50
11296: PUSH
11297: LD_VAR 0 2
11301: ARRAY
11302: PPUSH
11303: CALL_OW 300
11307: IFFALSE 11364
11309: PUSH
11310: LD_INT 22
11312: PUSH
11313: LD_VAR 0 2
11317: PUSH
11318: EMPTY
11319: LIST
11320: LIST
11321: PUSH
11322: LD_INT 2
11324: PUSH
11325: LD_INT 30
11327: PUSH
11328: LD_INT 0
11330: PUSH
11331: EMPTY
11332: LIST
11333: LIST
11334: PUSH
11335: LD_INT 30
11337: PUSH
11338: LD_INT 1
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: LIST
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: PPUSH
11354: CALL_OW 69
11358: PPUSH
11359: CALL 26404 0 1
11363: AND
11364: IFFALSE 11432
11366: PUSH
11367: LD_INT 22
11369: PUSH
11370: LD_VAR 0 2
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: PUSH
11379: LD_INT 2
11381: PUSH
11382: LD_INT 21
11384: PUSH
11385: LD_INT 1
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: PUSH
11392: LD_INT 33
11394: PUSH
11395: LD_INT 3
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PUSH
11402: LD_INT 33
11404: PUSH
11405: LD_INT 5
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: PPUSH
11422: CALL_OW 69
11426: PPUSH
11427: CALL 26404 0 1
11431: AND
11432: ST_TO_ADDR
// end ; GameTypeKing :
11433: GO 11536
11435: LD_INT 3
11437: DOUBLE
11438: EQUAL
11439: IFTRUE 11443
11441: GO 11535
11443: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
11444: LD_ADDR_VAR 0 3
11448: PUSH
11449: LD_INT 22
11451: PUSH
11452: LD_VAR 0 2
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: PUSH
11461: LD_INT 2
11463: PUSH
11464: LD_INT 21
11466: PUSH
11467: LD_INT 1
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: PUSH
11474: LD_INT 33
11476: PUSH
11477: LD_INT 3
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: PUSH
11484: LD_INT 33
11486: PUSH
11487: LD_INT 5
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: PPUSH
11504: CALL_OW 69
11508: PPUSH
11509: CALL 26404 0 1
11513: IFFALSE 11532
11515: PUSH
11516: LD_VAR 0 2
11520: PPUSH
11521: CALL 15432 0 1
11525: PUSH
11526: LD_EXP 44
11530: LESS
11531: AND
11532: ST_TO_ADDR
// end ; end ;
11533: GO 11536
11535: POP
// end ;
11536: LD_VAR 0 3
11540: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
11541: LD_INT 100
11543: IFFALSE 11773
11545: GO 11547
11547: DISABLE
11548: LD_INT 0
11550: PPUSH
11551: PPUSH
// begin if Multiplayer then
11552: LD_OWVAR 4
11556: IFFALSE 11564
// SetPlayerSpectator ( ) else
11558: CALL_OW 572
11562: GO 11573
// FogOff ( your_side ) ;
11564: LD_OWVAR 2
11568: PPUSH
11569: CALL_OW 344
// repeat gameIsOn := false ;
11573: LD_ADDR_VAR 0 1
11577: PUSH
11578: LD_INT 0
11580: ST_TO_ADDR
// for i := 1 to 8 do
11581: LD_ADDR_VAR 0 2
11585: PUSH
11586: DOUBLE
11587: LD_INT 1
11589: DEC
11590: ST_TO_ADDR
11591: LD_INT 8
11593: PUSH
11594: FOR_TO
11595: IFFALSE 11725
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
11597: LD_EXP 16
11601: PUSH
11602: LD_VAR 0 2
11606: ARRAY
11607: IFFALSE 11620
11609: PUSH
11610: LD_VAR 0 2
11614: PPUSH
11615: CALL_OW 108
11619: AND
11620: IFFALSE 11634
11622: PUSH
11623: LD_VAR 0 2
11627: PUSH
11628: LD_OWVAR 2
11632: NONEQUAL
11633: AND
11634: IFFALSE 11723
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
11636: LD_EXP 17
11640: PUSH
11641: LD_VAR 0 2
11645: ARRAY
11646: NOT
11647: IFTRUE 11695
11649: PUSH
11650: LD_EXP 17
11654: PUSH
11655: LD_VAR 0 2
11659: ARRAY
11660: PUSH
11661: LD_EXP 17
11665: PUSH
11666: LD_OWVAR 2
11670: ARRAY
11671: NONEQUAL
11672: IFFALSE 11694
11674: PUSH
11675: LD_OWVAR 2
11679: PPUSH
11680: LD_VAR 0 2
11684: PPUSH
11685: CALL_OW 81
11689: PUSH
11690: LD_INT 1
11692: NONEQUAL
11693: AND
11694: OR
11695: IFFALSE 11723
// if HasPowerByGameType ( mpGameType , i ) then
11697: LD_EXP 12
11701: PPUSH
11702: LD_VAR 0 2
11706: PPUSH
11707: CALL 11025 0 2
11711: IFFALSE 11723
// begin gameIsOn := true ;
11713: LD_ADDR_VAR 0 1
11717: PUSH
11718: LD_INT 1
11720: ST_TO_ADDR
// break ;
11721: GO 11725
// end ;
11723: GO 11594
11725: POP
11726: POP
// wait ( 100 ) ;
11727: LD_INT 100
11729: PPUSH
11730: CALL_OW 67
// until not gameIsOn ;
11734: LD_VAR 0 1
11738: NOT
11739: IFFALSE 11573
// if IAmServer then
11741: CALL_OW 518
11745: IFFALSE 11754
// wait ( 0 0$3 ) ;
11747: LD_INT 105
11749: PPUSH
11750: CALL_OW 67
// if Multiplayer then
11754: LD_OWVAR 4
11758: IFFALSE 11766
// YouLostInMultiplayer else
11760: CALL_OW 107
11764: GO 11773
// YouLost (  ) ;
11766: LD_STRING 
11768: PPUSH
11769: CALL_OW 104
// end ;
11773: PPOPN 2
11775: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
11776: LD_EXP 42
11780: IFFALSE 12164
11782: GO 11784
11784: DISABLE
11785: LD_INT 0
11787: PPUSH
11788: PPUSH
11789: PPUSH
11790: PPUSH
11791: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
11792: LD_ADDR_VAR 0 5
11796: PUSH
11797: LD_INT 1
11799: PUSH
11800: LD_INT 2
11802: PUSH
11803: LD_INT 3
11805: PUSH
11806: LD_INT 4
11808: PUSH
11809: LD_INT 5
11811: PUSH
11812: LD_INT 6
11814: PUSH
11815: LD_INT 7
11817: PUSH
11818: LD_INT 8
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
11831: LD_INT 350
11833: PPUSH
11834: CALL_OW 67
// for i := 1 to 8 do
11838: LD_ADDR_VAR 0 1
11842: PUSH
11843: DOUBLE
11844: LD_INT 1
11846: DEC
11847: ST_TO_ADDR
11848: LD_INT 8
11850: PUSH
11851: FOR_TO
11852: IFFALSE 12134
// begin j := sides [ i ] ;
11854: LD_ADDR_VAR 0 2
11858: PUSH
11859: LD_VAR 0 5
11863: PUSH
11864: LD_VAR 0 1
11868: ARRAY
11869: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
11870: LD_EXP 49
11874: PUSH
11875: LD_VAR 0 2
11879: ARRAY
11880: PPUSH
11881: CALL 26404 0 1
11885: IFFALSE 11898
11887: PUSH
11888: LD_VAR 0 2
11892: PPUSH
11893: CALL_OW 108
11897: AND
11898: IFFALSE 11916
11900: PUSH
11901: LD_EXP 12
11905: PPUSH
11906: LD_VAR 0 2
11910: PPUSH
11911: CALL 11025 0 2
11915: AND
11916: IFFALSE 12132
// begin wait ( mpRespawn div 2 ) ;
11918: LD_EXP 42
11922: PUSH
11923: LD_INT 2
11925: DIV
11926: PPUSH
11927: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11931: LD_ADDR_VAR 0 3
11935: PUSH
11936: LD_INT 22
11938: PUSH
11939: LD_VAR 0 2
11943: PUSH
11944: EMPTY
11945: LIST
11946: LIST
11947: PUSH
11948: LD_INT 50
11950: PUSH
11951: EMPTY
11952: LIST
11953: PUSH
11954: LD_INT 2
11956: PUSH
11957: LD_INT 30
11959: PUSH
11960: LD_INT 0
11962: PUSH
11963: EMPTY
11964: LIST
11965: LIST
11966: PUSH
11967: LD_INT 30
11969: PUSH
11970: LD_INT 1
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: LIST
11981: PUSH
11982: EMPTY
11983: LIST
11984: LIST
11985: LIST
11986: PPUSH
11987: CALL_OW 69
11991: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
11992: LD_VAR 0 3
11996: NOT
11997: IFTRUE 12011
11999: PUSH
12000: LD_VAR 0 2
12004: PPUSH
12005: CALL_OW 108
12009: NOT
12010: OR
12011: IFTRUE 12030
12013: PUSH
12014: LD_EXP 12
12018: PPUSH
12019: LD_VAR 0 2
12023: PPUSH
12024: CALL 11025 0 2
12028: NOT
12029: OR
12030: IFFALSE 12034
// continue ;
12032: GO 11851
// spawn := tmp [ 1 ] ;
12034: LD_ADDR_VAR 0 4
12038: PUSH
12039: LD_VAR 0 3
12043: PUSH
12044: LD_INT 1
12046: ARRAY
12047: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
12048: LD_EXP 49
12052: PUSH
12053: LD_VAR 0 2
12057: ARRAY
12058: PUSH
12059: LD_INT 1
12061: ARRAY
12062: PPUSH
12063: LD_VAR 0 4
12067: PPUSH
12068: CALL_OW 250
12072: PPUSH
12073: LD_VAR 0 4
12077: PPUSH
12078: CALL_OW 251
12082: PPUSH
12083: LD_INT 32
12085: PPUSH
12086: LD_INT 1
12088: PPUSH
12089: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
12093: LD_ADDR_EXP 49
12097: PUSH
12098: LD_EXP 49
12102: PPUSH
12103: LD_VAR 0 2
12107: PPUSH
12108: LD_EXP 49
12112: PUSH
12113: LD_VAR 0 2
12117: ARRAY
12118: PPUSH
12119: LD_INT 1
12121: PPUSH
12122: CALL_OW 3
12126: PPUSH
12127: CALL_OW 1
12131: ST_TO_ADDR
// end ; end ;
12132: GO 11851
12134: POP
12135: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
12136: LD_ADDR_VAR 0 5
12140: PUSH
12141: LD_VAR 0 5
12145: PPUSH
12146: LD_INT 1
12148: PPUSH
12149: LD_INT 8
12151: PPUSH
12152: LD_INT 1
12154: PPUSH
12155: CALL 28730 0 4
12159: ST_TO_ADDR
// until false ;
12160: LD_INT 0
12162: IFFALSE 11831
// end ;
12164: PPOPN 5
12166: END
// every 0 0$1 marked mpActive do
12167: GO 12169
12169: DISABLE
// begin enable ;
12170: ENABLE
// if not mpDisplayStrings then
12171: LD_EXP 47
12175: NOT
12176: IFFALSE 12187
// begin display_strings := [ ] ;
12178: LD_ADDR_OWVAR 47
12182: PUSH
12183: EMPTY
12184: ST_TO_ADDR
// exit ;
12185: GO 12197
// end ; display_strings := mpDisplayStrings ;
12187: LD_ADDR_OWVAR 47
12191: PUSH
12192: LD_EXP 47
12196: ST_TO_ADDR
// end ; end_of_file
12197: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
12198: LD_INT 0
12200: PPUSH
12201: PPUSH
12202: PPUSH
12203: PPUSH
12204: PPUSH
12205: PPUSH
12206: PPUSH
12207: PPUSH
12208: PPUSH
// if GetType ( un ) = unit_vehicle then
12209: LD_VAR 0 1
12213: PPUSH
12214: CALL_OW 247
12218: PUSH
12219: LD_INT 2
12221: EQUAL
12222: IFFALSE 12226
// exit ;
12224: GO 12999
// side := GetSide ( un ) ;
12226: LD_ADDR_VAR 0 9
12230: PUSH
12231: LD_VAR 0 1
12235: PPUSH
12236: CALL_OW 255
12240: ST_TO_ADDR
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] then
12241: LD_EXP 12
12245: PUSH
12246: LD_INT 2
12248: PUSH
12249: LD_INT 8
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: IN
12256: IFFALSE 12350
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
12258: LD_VAR 0 1
12262: PPUSH
12263: CALL_OW 266
12267: PUSH
12268: LD_INT 0
12270: PUSH
12271: LD_INT 1
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: IN
12278: IFFALSE 12350
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
12280: LD_ADDR_VAR 0 3
12284: PUSH
12285: LD_INT 22
12287: PUSH
12288: LD_VAR 0 9
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: PUSH
12297: LD_INT 2
12299: PUSH
12300: LD_INT 21
12302: PUSH
12303: LD_INT 1
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: PUSH
12310: LD_INT 33
12312: PUSH
12313: LD_INT 3
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: LIST
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: PPUSH
12329: CALL_OW 69
12333: PUSH
12334: FOR_IN
12335: IFFALSE 12348
// KillUnit ( i ) ;
12337: LD_VAR 0 3
12341: PPUSH
12342: CALL_OW 66
12346: GO 12334
12348: POP
12349: POP
// end ; if mpGameType = GameTypeSurvivalHardcore then
12350: LD_EXP 12
12354: PUSH
12355: LD_INT 8
12357: EQUAL
12358: IFFALSE 12442
// if un in mpCommanders then
12360: LD_VAR 0 1
12364: PUSH
12365: LD_EXP 50
12369: IN
12370: IFFALSE 12442
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
12372: LD_ADDR_VAR 0 3
12376: PUSH
12377: LD_INT 22
12379: PUSH
12380: LD_VAR 0 9
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: PUSH
12389: LD_INT 2
12391: PUSH
12392: LD_INT 21
12394: PUSH
12395: LD_INT 1
12397: PUSH
12398: EMPTY
12399: LIST
12400: LIST
12401: PUSH
12402: LD_INT 33
12404: PUSH
12405: LD_INT 3
12407: PUSH
12408: EMPTY
12409: LIST
12410: LIST
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: LIST
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: PPUSH
12421: CALL_OW 69
12425: PUSH
12426: FOR_IN
12427: IFFALSE 12440
// KillUnit ( i ) ;
12429: LD_VAR 0 3
12433: PPUSH
12434: CALL_OW 66
12438: GO 12426
12440: POP
12441: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
12442: LD_VAR 0 1
12446: PPUSH
12447: CALL_OW 257
12451: PUSH
12452: LD_INT 12
12454: PUSH
12455: LD_INT 17
12457: PUSH
12458: LD_INT 15
12460: PUSH
12461: LD_INT 16
12463: PUSH
12464: EMPTY
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: IN
12470: IFTRUE 12487
12472: PUSH
12473: LD_VAR 0 1
12477: PPUSH
12478: CALL_OW 263
12482: PUSH
12483: LD_INT 5
12485: EQUAL
12486: OR
12487: IFFALSE 12724
// begin tag := 0 ;
12489: LD_ADDR_VAR 0 5
12493: PUSH
12494: LD_INT 0
12496: ST_TO_ADDR
// for i := 1 to 8 do
12497: LD_ADDR_VAR 0 3
12501: PUSH
12502: DOUBLE
12503: LD_INT 1
12505: DEC
12506: ST_TO_ADDR
12507: LD_INT 8
12509: PUSH
12510: FOR_TO
12511: IFFALSE 12545
// if un in mpApePosIndex [ i ] then
12513: LD_VAR 0 1
12517: PUSH
12518: LD_EXP 41
12522: PUSH
12523: LD_VAR 0 3
12527: ARRAY
12528: IN
12529: IFFALSE 12543
// begin tag := i ;
12531: LD_ADDR_VAR 0 5
12535: PUSH
12536: LD_VAR 0 3
12540: ST_TO_ADDR
// break ;
12541: GO 12545
// end ;
12543: GO 12510
12545: POP
12546: POP
// if not tag then
12547: LD_VAR 0 5
12551: NOT
12552: IFFALSE 12556
// exit ;
12554: GO 12999
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
12556: LD_ADDR_VAR 0 7
12560: PUSH
12561: LD_EXP 40
12565: PUSH
12566: LD_EXP 16
12570: PUSH
12571: LD_VAR 0 5
12575: ARRAY
12576: ARRAY
12577: ST_TO_ADDR
// if not area then
12578: LD_VAR 0 7
12582: NOT
12583: IFFALSE 12587
// exit ;
12585: GO 12999
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
12587: LD_INT 14700
12589: PUSH
12590: LD_VAR 0 1
12594: PUSH
12595: LD_INT 5
12597: MOD
12598: PUSH
12599: LD_INT 1
12601: PLUS
12602: PUSH
12603: LD_INT 700
12605: MUL
12606: PLUS
12607: PPUSH
12608: CALL_OW 67
// repeat wait ( 10 ) ;
12612: LD_INT 10
12614: PPUSH
12615: CALL_OW 67
// until not mpBlockRespThread ;
12619: LD_EXP 56
12623: NOT
12624: IFFALSE 12612
// mpBlockRespThread := true ;
12626: LD_ADDR_EXP 56
12630: PUSH
12631: LD_INT 1
12633: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
12634: LD_INT 0
12636: PPUSH
12637: CALL 58507 0 1
// ape := CreateHuman ;
12641: LD_ADDR_VAR 0 4
12645: PUSH
12646: CALL_OW 44
12650: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
12651: LD_ADDR_EXP 41
12655: PUSH
12656: LD_EXP 41
12660: PPUSH
12661: LD_VAR 0 5
12665: PPUSH
12666: LD_EXP 41
12670: PUSH
12671: LD_VAR 0 5
12675: ARRAY
12676: PPUSH
12677: LD_VAR 0 4
12681: PPUSH
12682: CALL 62380 0 2
12686: PPUSH
12687: CALL_OW 1
12691: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
12692: LD_VAR 0 4
12696: PPUSH
12697: LD_VAR 0 7
12701: PPUSH
12702: LD_INT 0
12704: PPUSH
12705: CALL_OW 49
// wait ( 10 ) ;
12709: LD_INT 10
12711: PPUSH
12712: CALL_OW 67
// mpBlockRespThread := false ;
12716: LD_ADDR_EXP 56
12720: PUSH
12721: LD_INT 0
12723: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
12724: LD_VAR 0 1
12728: PPUSH
12729: CALL_OW 247
12733: PUSH
12734: LD_INT 1
12736: EQUAL
12737: IFFALSE 12754
12739: PUSH
12740: LD_VAR 0 1
12744: PPUSH
12745: CALL_OW 248
12749: PUSH
12750: LD_INT 0
12752: GREATER
12753: AND
12754: IFFALSE 12999
// begin if not mpRespawn then
12756: LD_EXP 42
12760: NOT
12761: IFFALSE 12765
// exit ;
12763: GO 12999
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
12765: LD_VAR 0 9
12769: PPUSH
12770: CALL_OW 108
12774: NOT
12775: IFFALSE 12794
12777: PUSH
12778: LD_EXP 12
12782: PPUSH
12783: LD_VAR 0 9
12787: PPUSH
12788: CALL 11025 0 2
12792: NOT
12793: AND
12794: IFFALSE 12798
// exit ;
12796: GO 12999
// side := GetSide ( un ) ;
12798: LD_ADDR_VAR 0 9
12802: PUSH
12803: LD_VAR 0 1
12807: PPUSH
12808: CALL_OW 255
12812: ST_TO_ADDR
// nation := GetNation ( un ) ;
12813: LD_ADDR_VAR 0 8
12817: PUSH
12818: LD_VAR 0 1
12822: PPUSH
12823: CALL_OW 248
12827: ST_TO_ADDR
// class := GetClass ( un ) ;
12828: LD_ADDR_VAR 0 6
12832: PUSH
12833: LD_VAR 0 1
12837: PPUSH
12838: CALL_OW 257
12842: ST_TO_ADDR
// if class > 4 then
12843: LD_VAR 0 6
12847: PUSH
12848: LD_INT 4
12850: GREATER
12851: IFFALSE 12861
// class := 1 ;
12853: LD_ADDR_VAR 0 6
12857: PUSH
12858: LD_INT 1
12860: ST_TO_ADDR
// repeat wait ( 10 ) ;
12861: LD_INT 10
12863: PPUSH
12864: CALL_OW 67
// until not mpBlockRespThread ;
12868: LD_EXP 56
12872: NOT
12873: IFFALSE 12861
// mpBlockRespThread := true ;
12875: LD_ADDR_EXP 56
12879: PUSH
12880: LD_INT 1
12882: ST_TO_ADDR
// uc_side := side ;
12883: LD_ADDR_OWVAR 20
12887: PUSH
12888: LD_VAR 0 9
12892: ST_TO_ADDR
// uc_nation := nation ;
12893: LD_ADDR_OWVAR 21
12897: PUSH
12898: LD_VAR 0 8
12902: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
12903: LD_INT 0
12905: PPUSH
12906: LD_VAR 0 6
12910: PPUSH
12911: LD_INT 2
12913: PPUSH
12914: CALL_OW 380
// un := CreateHuman ;
12918: LD_ADDR_VAR 0 1
12922: PUSH
12923: CALL_OW 44
12927: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
12928: LD_ADDR_EXP 49
12932: PUSH
12933: LD_EXP 49
12937: PPUSH
12938: LD_VAR 0 9
12942: PPUSH
12943: LD_EXP 49
12947: PUSH
12948: LD_VAR 0 9
12952: ARRAY
12953: PPUSH
12954: LD_EXP 49
12958: PUSH
12959: LD_VAR 0 9
12963: ARRAY
12964: PUSH
12965: LD_INT 1
12967: PLUS
12968: PPUSH
12969: LD_VAR 0 1
12973: PPUSH
12974: CALL_OW 1
12978: PPUSH
12979: CALL_OW 1
12983: ST_TO_ADDR
// wait ( 10 ) ;
12984: LD_INT 10
12986: PPUSH
12987: CALL_OW 67
// mpBlockRespThread := false ;
12991: LD_ADDR_EXP 56
12995: PUSH
12996: LD_INT 0
12998: ST_TO_ADDR
// end ; end ;
12999: LD_VAR 0 2
13003: RET
// export function Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ; var i , tag , area , ape ; begin
13004: LD_INT 0
13006: PPUSH
13007: PPUSH
13008: PPUSH
13009: PPUSH
13010: PPUSH
// tag := 0 ;
13011: LD_ADDR_VAR 0 5
13015: PUSH
13016: LD_INT 0
13018: ST_TO_ADDR
// for i := 1 to 8 do
13019: LD_ADDR_VAR 0 4
13023: PUSH
13024: DOUBLE
13025: LD_INT 1
13027: DEC
13028: ST_TO_ADDR
13029: LD_INT 8
13031: PUSH
13032: FOR_TO
13033: IFFALSE 13067
// if un in mpApePosIndex [ i ] then
13035: LD_VAR 0 2
13039: PUSH
13040: LD_EXP 41
13044: PUSH
13045: LD_VAR 0 4
13049: ARRAY
13050: IN
13051: IFFALSE 13065
// begin tag := i ;
13053: LD_ADDR_VAR 0 5
13057: PUSH
13058: LD_VAR 0 4
13062: ST_TO_ADDR
// break ;
13063: GO 13067
// end ;
13065: GO 13032
13067: POP
13068: POP
// if not tag then
13069: LD_VAR 0 5
13073: NOT
13074: IFFALSE 13078
// exit ;
13076: GO 13246
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
13078: LD_ADDR_VAR 0 6
13082: PUSH
13083: LD_EXP 40
13087: PUSH
13088: LD_EXP 16
13092: PUSH
13093: LD_VAR 0 5
13097: ARRAY
13098: ARRAY
13099: ST_TO_ADDR
// if not area then
13100: LD_VAR 0 6
13104: NOT
13105: IFFALSE 13109
// exit ;
13107: GO 13246
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
13109: LD_INT 14700
13111: PUSH
13112: LD_VAR 0 2
13116: PUSH
13117: LD_INT 5
13119: MOD
13120: PUSH
13121: LD_INT 1
13123: PLUS
13124: PUSH
13125: LD_INT 700
13127: MUL
13128: PLUS
13129: PPUSH
13130: CALL_OW 67
// repeat wait ( 10 ) ;
13134: LD_INT 10
13136: PPUSH
13137: CALL_OW 67
// until not mpBlockRespThread ;
13141: LD_EXP 56
13145: NOT
13146: IFFALSE 13134
// mpBlockRespThread := true ;
13148: LD_ADDR_EXP 56
13152: PUSH
13153: LD_INT 1
13155: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
13156: LD_INT 0
13158: PPUSH
13159: CALL 58507 0 1
// ape := CreateHuman ;
13163: LD_ADDR_VAR 0 7
13167: PUSH
13168: CALL_OW 44
13172: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
13173: LD_ADDR_EXP 41
13177: PUSH
13178: LD_EXP 41
13182: PPUSH
13183: LD_VAR 0 5
13187: PPUSH
13188: LD_EXP 41
13192: PUSH
13193: LD_VAR 0 5
13197: ARRAY
13198: PPUSH
13199: LD_VAR 0 7
13203: PPUSH
13204: CALL 62380 0 2
13208: PPUSH
13209: CALL_OW 1
13213: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
13214: LD_VAR 0 7
13218: PPUSH
13219: LD_VAR 0 6
13223: PPUSH
13224: LD_INT 0
13226: PPUSH
13227: CALL_OW 49
// wait ( 10 ) ;
13231: LD_INT 10
13233: PPUSH
13234: CALL_OW 67
// mpBlockRespThread := false ;
13238: LD_ADDR_EXP 56
13242: PUSH
13243: LD_INT 0
13245: ST_TO_ADDR
// end ;
13246: LD_VAR 0 3
13250: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
13251: LD_INT 0
13253: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
13254: LD_VAR 0 1
13258: PPUSH
13259: CALL_OW 266
13263: PUSH
13264: LD_INT 0
13266: PUSH
13267: LD_INT 1
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: IN
13274: IFFALSE 13299
// SetBName ( building , @ & GetSide ( building ) ) ;
13276: LD_VAR 0 1
13280: PPUSH
13281: LD_STRING @
13283: PUSH
13284: LD_VAR 0 1
13288: PPUSH
13289: CALL_OW 255
13293: STR
13294: PPUSH
13295: CALL_OW 500
// end ;
13299: LD_VAR 0 2
13303: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
13304: LD_INT 0
13306: PPUSH
13307: PPUSH
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalHardcore ] and GetBType ( building ) in [ b_depot , b_warehouse ] then
13308: LD_EXP 12
13312: PUSH
13313: LD_INT 2
13315: PUSH
13316: LD_INT 8
13318: PUSH
13319: EMPTY
13320: LIST
13321: LIST
13322: IN
13323: IFFALSE 13347
13325: PUSH
13326: LD_VAR 0 1
13330: PPUSH
13331: CALL_OW 266
13335: PUSH
13336: LD_INT 0
13338: PUSH
13339: LD_INT 1
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: IN
13346: AND
13347: IFFALSE 13426
// begin SetSide ( building , oldSide ) ;
13349: LD_VAR 0 1
13353: PPUSH
13354: LD_VAR 0 2
13358: PPUSH
13359: CALL_OW 235
// KillUnit ( building ) ;
13363: LD_VAR 0 1
13367: PPUSH
13368: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
13372: LD_ADDR_VAR 0 5
13376: PUSH
13377: LD_INT 22
13379: PUSH
13380: LD_VAR 0 2
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PUSH
13389: LD_INT 21
13391: PUSH
13392: LD_INT 1
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: PUSH
13399: EMPTY
13400: LIST
13401: LIST
13402: PPUSH
13403: CALL_OW 69
13407: PUSH
13408: FOR_IN
13409: IFFALSE 13422
// KillUnit ( i ) ;
13411: LD_VAR 0 5
13415: PPUSH
13416: CALL_OW 66
13420: GO 13408
13422: POP
13423: POP
// exit ;
13424: GO 13471
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
13426: LD_VAR 0 1
13430: PPUSH
13431: CALL_OW 266
13435: PUSH
13436: LD_INT 0
13438: PUSH
13439: LD_INT 1
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: IN
13446: IFFALSE 13471
// SetBName ( building , @ & GetSide ( building ) ) ;
13448: LD_VAR 0 1
13452: PPUSH
13453: LD_STRING @
13455: PUSH
13456: LD_VAR 0 1
13460: PPUSH
13461: CALL_OW 255
13465: STR
13466: PPUSH
13467: CALL_OW 500
// end ;
13471: LD_VAR 0 4
13475: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
13476: LD_INT 0
13478: PPUSH
13479: PPUSH
13480: PPUSH
// if mpGameType <> GameTypeFamine then
13481: LD_EXP 12
13485: PUSH
13486: LD_INT 5
13488: NONEQUAL
13489: IFFALSE 13493
// exit ;
13491: GO 13727
// for i := 1 to mpGlobalOilDeposits do
13493: LD_ADDR_VAR 0 6
13497: PUSH
13498: DOUBLE
13499: LD_INT 1
13501: DEC
13502: ST_TO_ADDR
13503: LD_EXP 51
13507: PUSH
13508: FOR_TO
13509: IFFALSE 13725
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
13511: LD_EXP 51
13515: PUSH
13516: LD_VAR 0 6
13520: ARRAY
13521: PUSH
13522: LD_INT 1
13524: ARRAY
13525: PPUSH
13526: LD_EXP 51
13530: PUSH
13531: LD_VAR 0 6
13535: ARRAY
13536: PUSH
13537: LD_INT 2
13539: ARRAY
13540: PPUSH
13541: CALL_OW 428
13545: PUSH
13546: LD_VAR 0 1
13550: EQUAL
13551: IFFALSE 13723
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
13553: LD_ADDR_VAR 0 7
13557: PUSH
13558: LD_EXP 51
13562: PUSH
13563: LD_VAR 0 6
13567: ARRAY
13568: PUSH
13569: LD_INT 3
13571: ARRAY
13572: ST_TO_ADDR
// value := value - amount ;
13573: LD_ADDR_VAR 0 7
13577: PUSH
13578: LD_VAR 0 7
13582: PUSH
13583: LD_VAR 0 4
13587: MINUS
13588: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
13589: LD_ADDR_EXP 51
13593: PUSH
13594: LD_EXP 51
13598: PPUSH
13599: LD_VAR 0 6
13603: PPUSH
13604: LD_EXP 51
13608: PUSH
13609: LD_VAR 0 6
13613: ARRAY
13614: PPUSH
13615: LD_INT 3
13617: PPUSH
13618: LD_VAR 0 7
13622: PPUSH
13623: CALL_OW 1
13627: PPUSH
13628: CALL_OW 1
13632: ST_TO_ADDR
// if side in [ your_side , 9 ] then
13633: LD_VAR 0 2
13637: PUSH
13638: LD_OWVAR 2
13642: PUSH
13643: LD_INT 9
13645: PUSH
13646: EMPTY
13647: LIST
13648: LIST
13649: IN
13650: IFFALSE 13666
// SetUnitDisplayNumber ( building , value ) ;
13652: LD_VAR 0 1
13656: PPUSH
13657: LD_VAR 0 7
13661: PPUSH
13662: CALL_OW 505
// if value <= 0 then
13666: LD_VAR 0 7
13670: PUSH
13671: LD_INT 0
13673: LESSEQUAL
13674: IFFALSE 13723
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
13676: LD_EXP 51
13680: PUSH
13681: LD_VAR 0 6
13685: ARRAY
13686: PUSH
13687: LD_INT 1
13689: ARRAY
13690: PPUSH
13691: LD_EXP 51
13695: PUSH
13696: LD_VAR 0 6
13700: ARRAY
13701: PUSH
13702: LD_INT 2
13704: ARRAY
13705: PPUSH
13706: CALL_OW 63
// KillUnit ( building ) ;
13710: LD_VAR 0 1
13714: PPUSH
13715: CALL_OW 66
// exit ;
13719: POP
13720: POP
13721: GO 13727
// end ; end ; end ;
13723: GO 13508
13725: POP
13726: POP
// end ;
13727: LD_VAR 0 5
13731: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
13732: LD_INT 0
13734: PPUSH
13735: PPUSH
13736: PPUSH
// if mpGameType <> GameTypeFamine then
13737: LD_EXP 12
13741: PUSH
13742: LD_INT 5
13744: NONEQUAL
13745: IFFALSE 13749
// exit ;
13747: GO 13983
// for i := 1 to mpGlobalSibDeposits do
13749: LD_ADDR_VAR 0 6
13753: PUSH
13754: DOUBLE
13755: LD_INT 1
13757: DEC
13758: ST_TO_ADDR
13759: LD_EXP 52
13763: PUSH
13764: FOR_TO
13765: IFFALSE 13981
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
13767: LD_EXP 52
13771: PUSH
13772: LD_VAR 0 6
13776: ARRAY
13777: PUSH
13778: LD_INT 1
13780: ARRAY
13781: PPUSH
13782: LD_EXP 52
13786: PUSH
13787: LD_VAR 0 6
13791: ARRAY
13792: PUSH
13793: LD_INT 2
13795: ARRAY
13796: PPUSH
13797: CALL_OW 428
13801: PUSH
13802: LD_VAR 0 1
13806: EQUAL
13807: IFFALSE 13979
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
13809: LD_ADDR_VAR 0 7
13813: PUSH
13814: LD_EXP 52
13818: PUSH
13819: LD_VAR 0 6
13823: ARRAY
13824: PUSH
13825: LD_INT 3
13827: ARRAY
13828: ST_TO_ADDR
// value := value - amount ;
13829: LD_ADDR_VAR 0 7
13833: PUSH
13834: LD_VAR 0 7
13838: PUSH
13839: LD_VAR 0 4
13843: MINUS
13844: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
13845: LD_ADDR_EXP 52
13849: PUSH
13850: LD_EXP 52
13854: PPUSH
13855: LD_VAR 0 6
13859: PPUSH
13860: LD_EXP 52
13864: PUSH
13865: LD_VAR 0 6
13869: ARRAY
13870: PPUSH
13871: LD_INT 3
13873: PPUSH
13874: LD_VAR 0 7
13878: PPUSH
13879: CALL_OW 1
13883: PPUSH
13884: CALL_OW 1
13888: ST_TO_ADDR
// if side in [ your_side , 9 ] then
13889: LD_VAR 0 2
13893: PUSH
13894: LD_OWVAR 2
13898: PUSH
13899: LD_INT 9
13901: PUSH
13902: EMPTY
13903: LIST
13904: LIST
13905: IN
13906: IFFALSE 13922
// SetUnitDisplayNumber ( building , value ) ;
13908: LD_VAR 0 1
13912: PPUSH
13913: LD_VAR 0 7
13917: PPUSH
13918: CALL_OW 505
// if value <= 0 then
13922: LD_VAR 0 7
13926: PUSH
13927: LD_INT 0
13929: LESSEQUAL
13930: IFFALSE 13979
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
13932: LD_EXP 52
13936: PUSH
13937: LD_VAR 0 6
13941: ARRAY
13942: PUSH
13943: LD_INT 1
13945: ARRAY
13946: PPUSH
13947: LD_EXP 52
13951: PUSH
13952: LD_VAR 0 6
13956: ARRAY
13957: PUSH
13958: LD_INT 2
13960: ARRAY
13961: PPUSH
13962: CALL_OW 63
// KillUnit ( building ) ;
13966: LD_VAR 0 1
13970: PPUSH
13971: CALL_OW 66
// exit ;
13975: POP
13976: POP
13977: GO 13983
// end ; end ; end ;
13979: GO 13764
13981: POP
13982: POP
// end ;
13983: LD_VAR 0 5
13987: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
13988: LD_INT 0
13990: PPUSH
13991: PPUSH
// side := GetSide ( factory ) ;
13992: LD_ADDR_VAR 0 7
13996: PUSH
13997: LD_VAR 0 1
14001: PPUSH
14002: CALL_OW 255
14006: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
14007: LD_VAR 0 5
14011: PUSH
14012: LD_INT 81
14014: EQUAL
14015: IFFALSE 14053
14017: PUSH
14018: LD_INT 22
14020: PUSH
14021: LD_VAR 0 7
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: PUSH
14030: LD_INT 34
14032: PUSH
14033: LD_INT 81
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: PPUSH
14044: CALL_OW 69
14048: PUSH
14049: LD_INT 0
14051: GREATER
14052: AND
14053: IFFALSE 14086
// begin ComCancel ( factory ) ;
14055: LD_VAR 0 1
14059: PPUSH
14060: CALL_OW 127
// if side = your_side then
14064: LD_VAR 0 7
14068: PUSH
14069: LD_OWVAR 2
14073: EQUAL
14074: IFFALSE 14086
// HintSpec ( VehLimit , 2 ) ;
14076: LD_STRING VehLimit
14078: PPUSH
14079: LD_INT 2
14081: PPUSH
14082: CALL_OW 338
// end ; end ;
14086: LD_VAR 0 6
14090: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
14091: LD_INT 0
14093: PPUSH
14094: PPUSH
14095: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
14096: LD_VAR 0 1
14100: PPUSH
14101: CALL_OW 264
14105: PUSH
14106: LD_INT 81
14108: EQUAL
14109: IFFALSE 14126
14111: PUSH
14112: LD_VAR 0 1
14116: PPUSH
14117: CALL_OW 263
14121: PUSH
14122: LD_INT 1
14124: EQUAL
14125: AND
14126: IFFALSE 14406
// begin for i := 1 to Count ( minersList ) do
14128: LD_ADDR_VAR 0 6
14132: PUSH
14133: DOUBLE
14134: LD_INT 1
14136: DEC
14137: ST_TO_ADDR
14138: LD_EXP 71
14142: PPUSH
14143: CALL 26404 0 1
14147: PUSH
14148: FOR_TO
14149: IFFALSE 14267
// begin if minersList [ i ] = oldId then
14151: LD_EXP 71
14155: PUSH
14156: LD_VAR 0 6
14160: ARRAY
14161: PUSH
14162: LD_VAR 0 2
14166: EQUAL
14167: IFFALSE 14265
// begin for j := 1 to minerMinesList [ i ] do
14169: LD_ADDR_VAR 0 7
14173: PUSH
14174: DOUBLE
14175: LD_INT 1
14177: DEC
14178: ST_TO_ADDR
14179: LD_EXP 72
14183: PUSH
14184: LD_VAR 0 6
14188: ARRAY
14189: PUSH
14190: FOR_TO
14191: IFFALSE 14241
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
14193: LD_EXP 72
14197: PUSH
14198: LD_VAR 0 6
14202: ARRAY
14203: PUSH
14204: LD_VAR 0 7
14208: ARRAY
14209: PUSH
14210: LD_INT 1
14212: ARRAY
14213: PPUSH
14214: LD_EXP 72
14218: PUSH
14219: LD_VAR 0 6
14223: ARRAY
14224: PUSH
14225: LD_VAR 0 7
14229: ARRAY
14230: PUSH
14231: LD_INT 2
14233: ARRAY
14234: PPUSH
14235: CALL_OW 612
14239: GO 14190
14241: POP
14242: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
14243: LD_ADDR_EXP 72
14247: PUSH
14248: LD_EXP 72
14252: PPUSH
14253: LD_VAR 0 6
14257: PPUSH
14258: CALL_OW 3
14262: ST_TO_ADDR
// break ;
14263: GO 14267
// end ; end ;
14265: GO 14148
14267: POP
14268: POP
// minersList := minersList diff oldId ;
14269: LD_ADDR_EXP 71
14273: PUSH
14274: LD_EXP 71
14278: PUSH
14279: LD_VAR 0 2
14283: DIFF
14284: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
14285: LD_INT 22
14287: PUSH
14288: LD_VAR 0 4
14292: PPUSH
14293: CALL_OW 255
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: PUSH
14302: LD_INT 34
14304: PUSH
14305: LD_INT 81
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PPUSH
14316: CALL_OW 69
14320: PUSH
14321: LD_INT 1
14323: GREATER
14324: IFFALSE 14351
// begin ComExit ( unit ) ;
14326: LD_VAR 0 4
14330: PPUSH
14331: CALL 62778 0 1
// SetSide ( newId , oldSide ) ;
14335: LD_VAR 0 1
14339: PPUSH
14340: LD_VAR 0 3
14344: PPUSH
14345: CALL_OW 235
// exit ;
14349: GO 14406
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
14351: LD_ADDR_EXP 71
14355: PUSH
14356: LD_EXP 71
14360: PPUSH
14361: LD_EXP 71
14365: PUSH
14366: LD_INT 1
14368: PLUS
14369: PPUSH
14370: LD_VAR 0 1
14374: PPUSH
14375: CALL_OW 1
14379: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
14380: LD_ADDR_EXP 72
14384: PUSH
14385: LD_EXP 72
14389: PPUSH
14390: LD_EXP 72
14394: PUSH
14395: LD_INT 1
14397: PLUS
14398: PPUSH
14399: EMPTY
14400: PPUSH
14401: CALL_OW 1
14405: ST_TO_ADDR
// end ; end ; end_of_file
14406: LD_VAR 0 5
14410: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
14411: LD_EXP 48
14415: IFFALSE 14756
14417: GO 14419
14419: DISABLE
14420: LD_INT 0
14422: PPUSH
14423: PPUSH
14424: PPUSH
// begin mpKingPoints := [ ] ;
14425: LD_ADDR_EXP 59
14429: PUSH
14430: EMPTY
14431: ST_TO_ADDR
// if mpTeamGame then
14432: LD_EXP 20
14436: IFFALSE 14490
// begin for i := 1 to Count ( mpTeams ) do
14438: LD_ADDR_VAR 0 1
14442: PUSH
14443: DOUBLE
14444: LD_INT 1
14446: DEC
14447: ST_TO_ADDR
14448: LD_EXP 19
14452: PPUSH
14453: CALL 26404 0 1
14457: PUSH
14458: FOR_TO
14459: IFFALSE 14486
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
14461: LD_ADDR_EXP 59
14465: PUSH
14466: LD_EXP 59
14470: PPUSH
14471: LD_VAR 0 1
14475: PPUSH
14476: LD_INT 0
14478: PPUSH
14479: CALL_OW 1
14483: ST_TO_ADDR
14484: GO 14458
14486: POP
14487: POP
// end else
14488: GO 14533
// begin for i := 1 to 8 do
14490: LD_ADDR_VAR 0 1
14494: PUSH
14495: DOUBLE
14496: LD_INT 1
14498: DEC
14499: ST_TO_ADDR
14500: LD_INT 8
14502: PUSH
14503: FOR_TO
14504: IFFALSE 14531
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
14506: LD_ADDR_EXP 59
14510: PUSH
14511: LD_EXP 59
14515: PPUSH
14516: LD_VAR 0 1
14520: PPUSH
14521: LD_INT 0
14523: PPUSH
14524: CALL_OW 1
14528: ST_TO_ADDR
14529: GO 14503
14531: POP
14532: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
14533: LD_ADDR_VAR 0 3
14537: PUSH
14538: LD_EXP 2
14542: PPUSH
14543: LD_INT 0
14545: PPUSH
14546: CALL_OW 517
14550: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
14551: LD_ADDR_VAR 0 1
14555: PUSH
14556: DOUBLE
14557: LD_INT 1
14559: DEC
14560: ST_TO_ADDR
14561: LD_VAR 0 3
14565: PUSH
14566: LD_INT 1
14568: ARRAY
14569: PUSH
14570: FOR_TO
14571: IFFALSE 14638
// for j := 1 to 8 do
14573: LD_ADDR_VAR 0 2
14577: PUSH
14578: DOUBLE
14579: LD_INT 1
14581: DEC
14582: ST_TO_ADDR
14583: LD_INT 8
14585: PUSH
14586: FOR_TO
14587: IFFALSE 14634
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
14589: LD_VAR 0 3
14593: PUSH
14594: LD_INT 1
14596: ARRAY
14597: PUSH
14598: LD_VAR 0 1
14602: ARRAY
14603: PPUSH
14604: LD_VAR 0 3
14608: PUSH
14609: LD_INT 2
14611: ARRAY
14612: PUSH
14613: LD_VAR 0 1
14617: ARRAY
14618: PPUSH
14619: LD_VAR 0 2
14623: PPUSH
14624: LD_INT 12
14626: NEG
14627: PPUSH
14628: CALL_OW 330
14632: GO 14586
14634: POP
14635: POP
14636: GO 14570
14638: POP
14639: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
14640: LD_EXP 43
14644: PPUSH
14645: LD_INT 1
14647: PPUSH
14648: CALL_OW 424
// UpdateCounter ;
14652: CALL 15262 0 0
// repeat wait ( 0 0$1 ) ;
14656: LD_INT 35
14658: PPUSH
14659: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14663: LD_ADDR_VAR 0 3
14667: PUSH
14668: LD_EXP 43
14672: PPUSH
14673: LD_INT 3
14675: PUSH
14676: LD_INT 57
14678: PUSH
14679: EMPTY
14680: LIST
14681: PUSH
14682: EMPTY
14683: LIST
14684: LIST
14685: PUSH
14686: LD_INT 50
14688: PUSH
14689: EMPTY
14690: LIST
14691: PUSH
14692: LD_INT 2
14694: PUSH
14695: LD_INT 30
14697: PUSH
14698: LD_INT 0
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: PUSH
14705: LD_INT 30
14707: PUSH
14708: LD_INT 1
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: PUSH
14715: EMPTY
14716: LIST
14717: LIST
14718: LIST
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: LIST
14724: PPUSH
14725: CALL_OW 70
14729: ST_TO_ADDR
// if not tmp then
14730: LD_VAR 0 3
14734: NOT
14735: IFFALSE 14739
// continue ;
14737: GO 14656
// AddPoints ( tmp ) ;
14739: LD_VAR 0 3
14743: PPUSH
14744: CALL 14940 0 1
// UpdateCounter ;
14748: CALL 15262 0 0
// until false ;
14752: LD_INT 0
14754: IFFALSE 14656
// end ;
14756: PPOPN 3
14758: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
14759: LD_EXP 48
14763: IFFALSE 14771
14765: PUSH
14766: LD_EXP 46
14770: AND
14771: IFFALSE 14937
14773: GO 14775
14775: DISABLE
14776: LD_INT 0
14778: PPUSH
14779: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
14780: LD_ADDR_VAR 0 2
14784: PUSH
14785: LD_EXP 2
14789: PPUSH
14790: LD_INT 0
14792: PPUSH
14793: CALL_OW 517
14797: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
14798: LD_ADDR_VAR 0 1
14802: PUSH
14803: DOUBLE
14804: LD_INT 1
14806: DEC
14807: ST_TO_ADDR
14808: LD_VAR 0 2
14812: PUSH
14813: LD_INT 1
14815: ARRAY
14816: PUSH
14817: FOR_TO
14818: IFFALSE 14859
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
14820: LD_VAR 0 2
14824: PUSH
14825: LD_INT 1
14827: ARRAY
14828: PUSH
14829: LD_VAR 0 1
14833: ARRAY
14834: PPUSH
14835: LD_VAR 0 2
14839: PUSH
14840: LD_INT 2
14842: ARRAY
14843: PUSH
14844: LD_VAR 0 1
14848: ARRAY
14849: PPUSH
14850: LD_INT 125
14852: PPUSH
14853: CALL_OW 495
14857: GO 14817
14859: POP
14860: POP
// repeat wait ( mpEmissions ) ;
14861: LD_EXP 46
14865: PPUSH
14866: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
14870: LD_ADDR_VAR 0 1
14874: PUSH
14875: DOUBLE
14876: LD_INT 1
14878: DEC
14879: ST_TO_ADDR
14880: LD_VAR 0 2
14884: PUSH
14885: LD_INT 1
14887: ARRAY
14888: PUSH
14889: FOR_TO
14890: IFFALSE 14931
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
14892: LD_VAR 0 2
14896: PUSH
14897: LD_INT 1
14899: ARRAY
14900: PUSH
14901: LD_VAR 0 1
14905: ARRAY
14906: PPUSH
14907: LD_VAR 0 2
14911: PUSH
14912: LD_INT 2
14914: ARRAY
14915: PUSH
14916: LD_VAR 0 1
14920: ARRAY
14921: PPUSH
14922: LD_INT 15
14924: PPUSH
14925: CALL_OW 495
14929: GO 14889
14931: POP
14932: POP
// until false ;
14933: LD_INT 0
14935: IFFALSE 14861
// end ;
14937: PPOPN 2
14939: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
14940: LD_INT 0
14942: PPUSH
14943: PPUSH
14944: PPUSH
14945: PPUSH
14946: PPUSH
// if mpTeamGame then
14947: LD_EXP 20
14951: IFFALSE 15148
// begin first := depots [ 1 ] ;
14953: LD_ADDR_VAR 0 4
14957: PUSH
14958: LD_VAR 0 1
14962: PUSH
14963: LD_INT 1
14965: ARRAY
14966: ST_TO_ADDR
// side := GetSide ( first ) ;
14967: LD_ADDR_VAR 0 6
14971: PUSH
14972: LD_VAR 0 4
14976: PPUSH
14977: CALL_OW 255
14981: ST_TO_ADDR
// for i := 1 to mpTeams do
14982: LD_ADDR_VAR 0 3
14986: PUSH
14987: DOUBLE
14988: LD_INT 1
14990: DEC
14991: ST_TO_ADDR
14992: LD_EXP 19
14996: PUSH
14997: FOR_TO
14998: IFFALSE 15032
// if side in mpTeams [ i ] then
15000: LD_VAR 0 6
15004: PUSH
15005: LD_EXP 19
15009: PUSH
15010: LD_VAR 0 3
15014: ARRAY
15015: IN
15016: IFFALSE 15030
// begin team := i ;
15018: LD_ADDR_VAR 0 5
15022: PUSH
15023: LD_VAR 0 3
15027: ST_TO_ADDR
// break ;
15028: GO 15032
// end ;
15030: GO 14997
15032: POP
15033: POP
// if not team then
15034: LD_VAR 0 5
15038: NOT
15039: IFFALSE 15043
// exit ;
15041: GO 15257
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
15043: LD_EXP 43
15047: PPUSH
15048: LD_INT 81
15050: PUSH
15051: LD_VAR 0 6
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: PPUSH
15060: CALL_OW 70
15064: IFFALSE 15068
// exit ;
15066: GO 15257
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
15068: LD_ADDR_EXP 59
15072: PUSH
15073: LD_EXP 59
15077: PPUSH
15078: LD_VAR 0 5
15082: PPUSH
15083: LD_EXP 59
15087: PUSH
15088: LD_VAR 0 5
15092: ARRAY
15093: PUSH
15094: LD_INT 1
15096: PLUS
15097: PPUSH
15098: CALL_OW 1
15102: ST_TO_ADDR
// for i in mpTeams [ team ] do
15103: LD_ADDR_VAR 0 3
15107: PUSH
15108: LD_EXP 19
15112: PUSH
15113: LD_VAR 0 5
15117: ARRAY
15118: PUSH
15119: FOR_IN
15120: IFFALSE 15144
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
15122: LD_VAR 0 3
15126: PPUSH
15127: LD_EXP 59
15131: PUSH
15132: LD_VAR 0 5
15136: ARRAY
15137: PPUSH
15138: CALL_OW 506
15142: GO 15119
15144: POP
15145: POP
// end else
15146: GO 15257
// begin first := depots [ 1 ] ;
15148: LD_ADDR_VAR 0 4
15152: PUSH
15153: LD_VAR 0 1
15157: PUSH
15158: LD_INT 1
15160: ARRAY
15161: ST_TO_ADDR
// side := GetSide ( first ) ;
15162: LD_ADDR_VAR 0 6
15166: PUSH
15167: LD_VAR 0 4
15171: PPUSH
15172: CALL_OW 255
15176: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
15177: LD_EXP 43
15181: PPUSH
15182: LD_INT 81
15184: PUSH
15185: LD_VAR 0 6
15189: PUSH
15190: EMPTY
15191: LIST
15192: LIST
15193: PPUSH
15194: CALL_OW 70
15198: IFFALSE 15202
// exit ;
15200: GO 15257
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
15202: LD_ADDR_EXP 59
15206: PUSH
15207: LD_EXP 59
15211: PPUSH
15212: LD_VAR 0 6
15216: PPUSH
15217: LD_EXP 59
15221: PUSH
15222: LD_VAR 0 6
15226: ARRAY
15227: PUSH
15228: LD_INT 1
15230: PLUS
15231: PPUSH
15232: CALL_OW 1
15236: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
15237: LD_VAR 0 6
15241: PPUSH
15242: LD_EXP 59
15246: PUSH
15247: LD_VAR 0 6
15251: ARRAY
15252: PPUSH
15253: CALL_OW 506
// end ; end ;
15257: LD_VAR 0 2
15261: RET
// function UpdateCounter ; var i ; begin
15262: LD_INT 0
15264: PPUSH
15265: PPUSH
// result := [ ] ;
15266: LD_ADDR_VAR 0 1
15270: PUSH
15271: EMPTY
15272: ST_TO_ADDR
// if mpTeamGame then
15273: LD_EXP 20
15277: IFFALSE 15344
// begin for i := 1 to mpTeams do
15279: LD_ADDR_VAR 0 2
15283: PUSH
15284: DOUBLE
15285: LD_INT 1
15287: DEC
15288: ST_TO_ADDR
15289: LD_EXP 19
15293: PUSH
15294: FOR_TO
15295: IFFALSE 15340
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
15297: LD_ADDR_VAR 0 1
15301: PUSH
15302: LD_VAR 0 1
15306: PUSH
15307: LD_STRING #KingoftheHill-Team
15309: PUSH
15310: LD_VAR 0 2
15314: PUSH
15315: LD_EXP 59
15319: PUSH
15320: LD_VAR 0 2
15324: ARRAY
15325: PUSH
15326: LD_EXP 44
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: ADD
15337: ST_TO_ADDR
15338: GO 15294
15340: POP
15341: POP
// end else
15342: GO 15417
// begin for i := 1 to 8 do
15344: LD_ADDR_VAR 0 2
15348: PUSH
15349: DOUBLE
15350: LD_INT 1
15352: DEC
15353: ST_TO_ADDR
15354: LD_INT 8
15356: PUSH
15357: FOR_TO
15358: IFFALSE 15415
// if mpSidePositions [ i ] then
15360: LD_EXP 16
15364: PUSH
15365: LD_VAR 0 2
15369: ARRAY
15370: IFFALSE 15413
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
15372: LD_ADDR_VAR 0 1
15376: PUSH
15377: LD_VAR 0 1
15381: PUSH
15382: LD_STRING #KingoftheHill-Player
15384: PUSH
15385: LD_VAR 0 2
15389: PUSH
15390: LD_EXP 59
15394: PUSH
15395: LD_VAR 0 2
15399: ARRAY
15400: PUSH
15401: LD_EXP 44
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: ADD
15412: ST_TO_ADDR
15413: GO 15357
15415: POP
15416: POP
// end ; mpDisplayStrings := result ;
15417: LD_ADDR_EXP 47
15421: PUSH
15422: LD_VAR 0 1
15426: ST_TO_ADDR
// end ;
15427: LD_VAR 0 1
15431: RET
// export function HowMuchPointsKing ( side ) ; begin
15432: LD_INT 0
15434: PPUSH
// result := HowMuchPoints ( side ) ;
15435: LD_ADDR_VAR 0 2
15439: PUSH
15440: LD_VAR 0 1
15444: PPUSH
15445: CALL 15455 0 1
15449: ST_TO_ADDR
// end ;
15450: LD_VAR 0 2
15454: RET
// function HowMuchPoints ( side ) ; var i ; begin
15455: LD_INT 0
15457: PPUSH
15458: PPUSH
// if mpTeamGame then
15459: LD_EXP 20
15463: IFFALSE 15532
// begin for i := 1 to Count ( mpTeams ) do
15465: LD_ADDR_VAR 0 3
15469: PUSH
15470: DOUBLE
15471: LD_INT 1
15473: DEC
15474: ST_TO_ADDR
15475: LD_EXP 19
15479: PPUSH
15480: CALL 26404 0 1
15484: PUSH
15485: FOR_TO
15486: IFFALSE 15528
// begin if side in mpTeams [ i ] then
15488: LD_VAR 0 1
15492: PUSH
15493: LD_EXP 19
15497: PUSH
15498: LD_VAR 0 3
15502: ARRAY
15503: IN
15504: IFFALSE 15526
// begin result := mpKingPoints [ i ] ;
15506: LD_ADDR_VAR 0 2
15510: PUSH
15511: LD_EXP 59
15515: PUSH
15516: LD_VAR 0 3
15520: ARRAY
15521: ST_TO_ADDR
// exit ;
15522: POP
15523: POP
15524: GO 15548
// end ; end ;
15526: GO 15485
15528: POP
15529: POP
// end else
15530: GO 15548
// result := mpKingPoints [ side ] ;
15532: LD_ADDR_VAR 0 2
15536: PUSH
15537: LD_EXP 59
15541: PUSH
15542: LD_VAR 0 1
15546: ARRAY
15547: ST_TO_ADDR
// end ;
15548: LD_VAR 0 2
15552: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
15553: LD_EXP 48
15557: IFFALSE 15565
15559: PUSH
15560: CALL 15977 0 0
15564: AND
15565: IFFALSE 15573
15567: PUSH
15568: LD_OWVAR 4
15572: AND
15573: IFFALSE 15826
15575: GO 15577
15577: DISABLE
15578: LD_INT 0
15580: PPUSH
15581: PPUSH
// begin canWin := false ;
15582: LD_ADDR_VAR 0 2
15586: PUSH
15587: LD_INT 0
15589: ST_TO_ADDR
// if not HasPower ( your_side ) then
15590: LD_OWVAR 2
15594: PPUSH
15595: CALL 16019 0 1
15599: NOT
15600: IFFALSE 15611
// begin Multiplayer_Loose_Message ;
15602: CALL_OW 521
// enable ( mpLose ) ;
15606: LD_INT 102
15608: ENABLE_MARKED
// end else
15609: GO 15826
// begin if not EnemiesInGame then
15611: CALL 15829 0 0
15615: NOT
15616: IFFALSE 15623
// begin enable ( mpWin ) ;
15618: LD_INT 101
15620: ENABLE_MARKED
// exit ;
15621: GO 15826
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
15623: LD_ADDR_VAR 0 2
15627: PUSH
15628: LD_OWVAR 2
15632: PPUSH
15633: CALL 15455 0 1
15637: PUSH
15638: LD_EXP 44
15642: GREATEREQUAL
15643: IFFALSE 15656
15645: PUSH
15646: LD_OWVAR 2
15650: PPUSH
15651: CALL 16019 0 1
15655: AND
15656: ST_TO_ADDR
// for i := 1 to 8 do
15657: LD_ADDR_VAR 0 1
15661: PUSH
15662: DOUBLE
15663: LD_INT 1
15665: DEC
15666: ST_TO_ADDR
15667: LD_INT 8
15669: PUSH
15670: FOR_TO
15671: IFFALSE 15812
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
15673: LD_EXP 16
15677: PUSH
15678: LD_VAR 0 1
15682: ARRAY
15683: IFFALSE 15696
15685: PUSH
15686: LD_VAR 0 1
15690: PPUSH
15691: CALL_OW 108
15695: AND
15696: IFFALSE 15710
15698: PUSH
15699: LD_VAR 0 1
15703: PUSH
15704: LD_OWVAR 2
15708: NONEQUAL
15709: AND
15710: IFFALSE 15810
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
15712: LD_EXP 17
15716: PUSH
15717: LD_VAR 0 1
15721: ARRAY
15722: NOT
15723: IFTRUE 15771
15725: PUSH
15726: LD_EXP 17
15730: PUSH
15731: LD_VAR 0 1
15735: ARRAY
15736: PUSH
15737: LD_EXP 17
15741: PUSH
15742: LD_OWVAR 2
15746: ARRAY
15747: NONEQUAL
15748: IFFALSE 15770
15750: PUSH
15751: LD_OWVAR 2
15755: PPUSH
15756: LD_VAR 0 1
15760: PPUSH
15761: CALL_OW 81
15765: PUSH
15766: LD_INT 1
15768: NONEQUAL
15769: AND
15770: OR
15771: IFFALSE 15810
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
15773: LD_VAR 0 1
15777: PPUSH
15778: CALL 15455 0 1
15782: PUSH
15783: LD_EXP 44
15787: GREATEREQUAL
15788: IFFALSE 15801
15790: PUSH
15791: LD_VAR 0 1
15795: PPUSH
15796: CALL 16019 0 1
15800: AND
15801: IFFALSE 15810
// begin enable ( mpLose ) ;
15803: LD_INT 102
15805: ENABLE_MARKED
// exit ;
15806: POP
15807: POP
15808: GO 15826
// end ;
15810: GO 15670
15812: POP
15813: POP
// if canWin then
15814: LD_VAR 0 2
15818: IFFALSE 15825
// enable ( mpWin ) else
15820: LD_INT 101
15822: ENABLE_MARKED
15823: GO 15826
// enable ;
15825: ENABLE
// end ; end ;
15826: PPOPN 2
15828: END
// function EnemiesInGame ; var i ; begin
15829: LD_INT 0
15831: PPUSH
15832: PPUSH
// result := false ;
15833: LD_ADDR_VAR 0 1
15837: PUSH
15838: LD_INT 0
15840: ST_TO_ADDR
// for i := 1 to 8 do
15841: LD_ADDR_VAR 0 2
15845: PUSH
15846: DOUBLE
15847: LD_INT 1
15849: DEC
15850: ST_TO_ADDR
15851: LD_INT 8
15853: PUSH
15854: FOR_TO
15855: IFFALSE 15970
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
15857: LD_VAR 0 2
15861: PUSH
15862: LD_OWVAR 2
15866: NONEQUAL
15867: IFFALSE 15880
15869: PUSH
15870: LD_VAR 0 2
15874: PPUSH
15875: CALL 16019 0 1
15879: AND
15880: IFFALSE 15893
15882: PUSH
15883: LD_VAR 0 2
15887: PPUSH
15888: CALL_OW 108
15892: AND
15893: IFFALSE 15968
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
15895: LD_EXP 17
15899: PUSH
15900: LD_VAR 0 2
15904: ARRAY
15905: NOT
15906: IFTRUE 15954
15908: PUSH
15909: LD_EXP 17
15913: PUSH
15914: LD_VAR 0 2
15918: ARRAY
15919: PUSH
15920: LD_EXP 17
15924: PUSH
15925: LD_OWVAR 2
15929: ARRAY
15930: NONEQUAL
15931: IFFALSE 15953
15933: PUSH
15934: LD_OWVAR 2
15938: PPUSH
15939: LD_VAR 0 2
15943: PPUSH
15944: CALL_OW 81
15948: PUSH
15949: LD_INT 1
15951: NONEQUAL
15952: AND
15953: OR
15954: IFFALSE 15968
// begin result := true ;
15956: LD_ADDR_VAR 0 1
15960: PUSH
15961: LD_INT 1
15963: ST_TO_ADDR
// exit ;
15964: POP
15965: POP
15966: GO 15972
// end ;
15968: GO 15854
15970: POP
15971: POP
// end ;
15972: LD_VAR 0 1
15976: RET
// function CanWinLoose ; begin
15977: LD_INT 0
15979: PPUSH
// result := true ;
15980: LD_ADDR_VAR 0 1
15984: PUSH
15985: LD_INT 1
15987: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
15988: CALL_OW 531
15992: IFFALSE 16004
15994: PUSH
15995: CALL_OW 519
15999: PUSH
16000: LD_INT 1
16002: GREATER
16003: AND
16004: IFFALSE 16014
// result := false ;
16006: LD_ADDR_VAR 0 1
16010: PUSH
16011: LD_INT 0
16013: ST_TO_ADDR
// end ;
16014: LD_VAR 0 1
16018: RET
// function HasPower ( i ) ; begin
16019: LD_INT 0
16021: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
16022: LD_ADDR_VAR 0 2
16026: PUSH
16027: LD_INT 22
16029: PUSH
16030: LD_VAR 0 1
16034: PUSH
16035: EMPTY
16036: LIST
16037: LIST
16038: PUSH
16039: LD_INT 2
16041: PUSH
16042: LD_INT 21
16044: PUSH
16045: LD_INT 1
16047: PUSH
16048: EMPTY
16049: LIST
16050: LIST
16051: PUSH
16052: LD_INT 33
16054: PUSH
16055: LD_INT 3
16057: PUSH
16058: EMPTY
16059: LIST
16060: LIST
16061: PUSH
16062: LD_INT 33
16064: PUSH
16065: LD_INT 5
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: PUSH
16078: EMPTY
16079: LIST
16080: LIST
16081: PPUSH
16082: CALL_OW 69
16086: ST_TO_ADDR
// end ; end_of_file
16087: LD_VAR 0 2
16091: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
16092: LD_VAR 0 1
16096: PUSH
16097: LD_INT 200
16099: DOUBLE
16100: GREATEREQUAL
16101: IFFALSE 16109
16103: LD_INT 299
16105: DOUBLE
16106: LESSEQUAL
16107: IFTRUE 16111
16109: GO 16143
16111: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
16112: LD_VAR 0 1
16116: PPUSH
16117: LD_VAR 0 2
16121: PPUSH
16122: LD_VAR 0 3
16126: PPUSH
16127: LD_VAR 0 4
16131: PPUSH
16132: LD_VAR 0 5
16136: PPUSH
16137: CALL 18456 0 5
16141: GO 16220
16143: LD_INT 300
16145: DOUBLE
16146: GREATEREQUAL
16147: IFFALSE 16155
16149: LD_INT 399
16151: DOUBLE
16152: LESSEQUAL
16153: IFTRUE 16157
16155: GO 16219
16157: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
16158: LD_VAR 0 1
16162: PPUSH
16163: LD_VAR 0 2
16167: PPUSH
16168: LD_VAR 0 3
16172: PPUSH
16173: LD_VAR 0 4
16177: PPUSH
16178: LD_VAR 0 5
16182: PPUSH
16183: LD_VAR 0 6
16187: PPUSH
16188: LD_VAR 0 7
16192: PPUSH
16193: LD_VAR 0 8
16197: PPUSH
16198: LD_VAR 0 9
16202: PPUSH
16203: LD_VAR 0 10
16207: PPUSH
16208: LD_VAR 0 11
16212: PPUSH
16213: CALL 16856 0 11
16217: GO 16220
16219: POP
// end ;
16220: PPOPN 11
16222: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
16223: LD_VAR 0 1
16227: PPUSH
16228: LD_VAR 0 2
16232: PPUSH
16233: LD_VAR 0 3
16237: PPUSH
16238: LD_VAR 0 4
16242: PPUSH
16243: LD_VAR 0 5
16247: PPUSH
16248: CALL 17756 0 5
// end ; end_of_file
16252: PPOPN 5
16254: END
// every 0 0$1 do
16255: GO 16257
16257: DISABLE
// begin enable ;
16258: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
16259: LD_STRING updateTimer(
16261: PUSH
16262: LD_OWVAR 1
16266: STR
16267: PUSH
16268: LD_STRING );
16270: STR
16271: PPUSH
16272: CALL_OW 559
// end ;
16276: END
// export function SOS_MapStart ( ) ; begin
16277: LD_INT 0
16279: PPUSH
// UpdateFactoryWaypoints ( ) ;
16280: CALL 17218 0 0
// UpdateWarehouseGatheringPoints ( ) ;
16284: CALL 17470 0 0
// ParseMultiDataToLua ( ) ;
16288: CALL 17617 0 0
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
16292: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
16294: PPUSH
16295: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
16299: LD_STRING setSpecLogoNumber(
16301: PUSH
16302: LD_INT 2
16304: STR
16305: PUSH
16306: LD_STRING ,
16308: STR
16309: PUSH
16310: LD_INT 1
16312: STR
16313: PUSH
16314: LD_STRING )
16316: STR
16317: PPUSH
16318: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
16322: LD_STRING setSpecLogoNumber(
16324: PUSH
16325: LD_INT 3
16327: STR
16328: PUSH
16329: LD_STRING ,
16331: STR
16332: PUSH
16333: LD_INT 2
16335: STR
16336: PUSH
16337: LD_STRING )
16339: STR
16340: PPUSH
16341: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
16345: LD_STRING setSpecLogoNumber(
16347: PUSH
16348: LD_INT 4
16350: STR
16351: PUSH
16352: LD_STRING ,
16354: STR
16355: PUSH
16356: LD_INT 3
16358: STR
16359: PUSH
16360: LD_STRING )
16362: STR
16363: PPUSH
16364: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
16368: LD_STRING setSpecLogoNumber(
16370: PUSH
16371: LD_INT 5
16373: STR
16374: PUSH
16375: LD_STRING ,
16377: STR
16378: PUSH
16379: LD_INT 4
16381: STR
16382: PUSH
16383: LD_STRING )
16385: STR
16386: PPUSH
16387: CALL_OW 559
// end ;
16391: LD_VAR 0 1
16395: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
16396: LD_INT 0
16398: PPUSH
16399: PPUSH
16400: PPUSH
16401: PPUSH
16402: PPUSH
16403: PPUSH
16404: PPUSH
16405: PPUSH
16406: PPUSH
// for i := 1 to 8 do
16407: LD_ADDR_VAR 0 2
16411: PUSH
16412: DOUBLE
16413: LD_INT 1
16415: DEC
16416: ST_TO_ADDR
16417: LD_INT 8
16419: PUSH
16420: FOR_TO
16421: IFFALSE 16806
// begin if mpSidePositions [ i ] then
16423: LD_EXP 16
16427: PUSH
16428: LD_VAR 0 2
16432: ARRAY
16433: IFFALSE 16804
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
16435: LD_ADDR_VAR 0 7
16439: PUSH
16440: LD_INT 22
16442: PUSH
16443: LD_VAR 0 2
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PUSH
16452: LD_INT 21
16454: PUSH
16455: LD_INT 1
16457: PUSH
16458: EMPTY
16459: LIST
16460: LIST
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: PPUSH
16466: CALL_OW 69
16470: PPUSH
16471: CALL 26404 0 1
16475: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16476: LD_ADDR_VAR 0 9
16480: PUSH
16481: LD_INT 22
16483: PUSH
16484: LD_VAR 0 2
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: PUSH
16493: LD_INT 2
16495: PUSH
16496: LD_INT 30
16498: PUSH
16499: LD_INT 0
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: PUSH
16506: LD_INT 30
16508: PUSH
16509: LD_INT 1
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: LIST
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: PPUSH
16525: CALL_OW 69
16529: ST_TO_ADDR
// crates := 0 ;
16530: LD_ADDR_VAR 0 4
16534: PUSH
16535: LD_INT 0
16537: ST_TO_ADDR
// oil := 0 ;
16538: LD_ADDR_VAR 0 5
16542: PUSH
16543: LD_INT 0
16545: ST_TO_ADDR
// sib := 0 ;
16546: LD_ADDR_VAR 0 6
16550: PUSH
16551: LD_INT 0
16553: ST_TO_ADDR
// if bases then
16554: LD_VAR 0 9
16558: IFFALSE 16664
// begin for j in bases do
16560: LD_ADDR_VAR 0 3
16564: PUSH
16565: LD_VAR 0 9
16569: PUSH
16570: FOR_IN
16571: IFFALSE 16662
// begin base := GetBase ( j ) ;
16573: LD_ADDR_VAR 0 8
16577: PUSH
16578: LD_VAR 0 3
16582: PPUSH
16583: CALL_OW 274
16587: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
16588: LD_ADDR_VAR 0 4
16592: PUSH
16593: LD_VAR 0 4
16597: PUSH
16598: LD_VAR 0 8
16602: PPUSH
16603: LD_INT 1
16605: PPUSH
16606: CALL_OW 275
16610: PLUS
16611: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
16612: LD_ADDR_VAR 0 5
16616: PUSH
16617: LD_VAR 0 5
16621: PUSH
16622: LD_VAR 0 8
16626: PPUSH
16627: LD_INT 2
16629: PPUSH
16630: CALL_OW 275
16634: PLUS
16635: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
16636: LD_ADDR_VAR 0 6
16640: PUSH
16641: LD_VAR 0 6
16645: PUSH
16646: LD_VAR 0 8
16650: PPUSH
16651: LD_INT 3
16653: PPUSH
16654: CALL_OW 275
16658: PLUS
16659: ST_TO_ADDR
// end ;
16660: GO 16570
16662: POP
16663: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
16664: LD_STRING setSpecText(
16666: PUSH
16667: LD_VAR 0 2
16671: STR
16672: PUSH
16673: LD_STRING ,
16675: STR
16676: PUSH
16677: LD_INT 2
16679: STR
16680: PUSH
16681: LD_STRING ,
16683: STR
16684: PUSH
16685: LD_VAR 0 4
16689: STR
16690: PUSH
16691: LD_STRING )
16693: STR
16694: PPUSH
16695: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
16699: LD_STRING setSpecText(
16701: PUSH
16702: LD_VAR 0 2
16706: STR
16707: PUSH
16708: LD_STRING ,
16710: STR
16711: PUSH
16712: LD_INT 3
16714: STR
16715: PUSH
16716: LD_STRING ,
16718: STR
16719: PUSH
16720: LD_VAR 0 5
16724: STR
16725: PUSH
16726: LD_STRING )
16728: STR
16729: PPUSH
16730: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
16734: LD_STRING setSpecText(
16736: PUSH
16737: LD_VAR 0 2
16741: STR
16742: PUSH
16743: LD_STRING ,
16745: STR
16746: PUSH
16747: LD_INT 4
16749: STR
16750: PUSH
16751: LD_STRING ,
16753: STR
16754: PUSH
16755: LD_VAR 0 6
16759: STR
16760: PUSH
16761: LD_STRING )
16763: STR
16764: PPUSH
16765: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
16769: LD_STRING setSpecText(
16771: PUSH
16772: LD_VAR 0 2
16776: STR
16777: PUSH
16778: LD_STRING ,
16780: STR
16781: PUSH
16782: LD_INT 5
16784: STR
16785: PUSH
16786: LD_STRING ,
16788: STR
16789: PUSH
16790: LD_VAR 0 7
16794: STR
16795: PUSH
16796: LD_STRING )
16798: STR
16799: PPUSH
16800: CALL_OW 559
// end ; end ;
16804: GO 16420
16806: POP
16807: POP
// end ;
16808: LD_VAR 0 1
16812: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
16813: LD_INT 2
16815: PUSH
16816: LD_INT 30
16818: PUSH
16819: LD_INT 0
16821: PUSH
16822: EMPTY
16823: LIST
16824: LIST
16825: PUSH
16826: LD_INT 30
16828: PUSH
16829: LD_INT 1
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: PUSH
16836: EMPTY
16837: LIST
16838: LIST
16839: LIST
16840: PPUSH
16841: CALL_OW 69
16845: IFFALSE 16855
16847: GO 16849
16849: DISABLE
// begin enable ;
16850: ENABLE
// UpdateSpectatorBar ;
16851: CALL 16396 0 0
// end ;
16855: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16856: LD_INT 0
16858: PPUSH
// end ;
16859: LD_VAR 0 12
16863: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
16864: LD_INT 0
16866: PPUSH
16867: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
16868: LD_VAR 0 1
16872: NOT
16873: IFTRUE 16892
16875: PUSH
16876: LD_VAR 0 2
16880: PPUSH
16881: LD_VAR 0 3
16885: PPUSH
16886: CALL_OW 488
16890: NOT
16891: OR
16892: IFTRUE 16927
16894: PUSH
16895: LD_VAR 0 1
16899: PPUSH
16900: CALL_OW 266
16904: PUSH
16905: LD_INT 3
16907: NONEQUAL
16908: IFFALSE 16926
16910: PUSH
16911: LD_VAR 0 1
16915: PPUSH
16916: CALL_OW 247
16920: PUSH
16921: LD_INT 1
16923: EQUAL
16924: NOT
16925: AND
16926: OR
16927: IFFALSE 16931
// exit ;
16929: GO 17213
// if GetType ( factory ) = unit_human then
16931: LD_VAR 0 1
16935: PPUSH
16936: CALL_OW 247
16940: PUSH
16941: LD_INT 1
16943: EQUAL
16944: IFFALSE 16961
// factory := IsInUnit ( factory ) ;
16946: LD_ADDR_VAR 0 1
16950: PUSH
16951: LD_VAR 0 1
16955: PPUSH
16956: CALL_OW 310
16960: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
16961: LD_VAR 0 1
16965: PPUSH
16966: CALL_OW 266
16970: PUSH
16971: LD_INT 3
16973: NONEQUAL
16974: IFFALSE 16978
// exit ;
16976: GO 17213
// for i := 1 to Count ( factoryWaypoints ) do
16978: LD_ADDR_VAR 0 5
16982: PUSH
16983: DOUBLE
16984: LD_INT 1
16986: DEC
16987: ST_TO_ADDR
16988: LD_EXP 60
16992: PPUSH
16993: CALL 26404 0 1
16997: PUSH
16998: FOR_TO
16999: IFFALSE 17161
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
17001: LD_VAR 0 2
17005: PPUSH
17006: LD_VAR 0 3
17010: PPUSH
17011: CALL_OW 428
17015: PUSH
17016: LD_EXP 60
17020: PUSH
17021: LD_VAR 0 5
17025: ARRAY
17026: PUSH
17027: LD_INT 2
17029: ARRAY
17030: EQUAL
17031: IFFALSE 17063
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
17033: LD_ADDR_EXP 60
17037: PUSH
17038: LD_EXP 60
17042: PPUSH
17043: LD_VAR 0 5
17047: PPUSH
17048: CALL_OW 3
17052: ST_TO_ADDR
// UpdateFactoryWaypoints ;
17053: CALL 17218 0 0
// exit ;
17057: POP
17058: POP
17059: GO 17213
// end else
17061: GO 17159
// if factory = factoryWaypoints [ i ] [ 2 ] then
17063: LD_VAR 0 1
17067: PUSH
17068: LD_EXP 60
17072: PUSH
17073: LD_VAR 0 5
17077: ARRAY
17078: PUSH
17079: LD_INT 2
17081: ARRAY
17082: EQUAL
17083: IFFALSE 17159
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
17085: LD_ADDR_EXP 60
17089: PUSH
17090: LD_EXP 60
17094: PPUSH
17095: LD_VAR 0 5
17099: PPUSH
17100: CALL_OW 3
17104: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
17105: LD_ADDR_EXP 60
17109: PUSH
17110: LD_EXP 60
17114: PPUSH
17115: LD_VAR 0 1
17119: PPUSH
17120: CALL_OW 255
17124: PUSH
17125: LD_VAR 0 1
17129: PUSH
17130: LD_VAR 0 2
17134: PUSH
17135: LD_VAR 0 3
17139: PUSH
17140: EMPTY
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: PPUSH
17146: CALL 62380 0 2
17150: ST_TO_ADDR
// UpdateFactoryWaypoints ;
17151: CALL 17218 0 0
// exit ;
17155: POP
17156: POP
17157: GO 17213
// end ; end ;
17159: GO 16998
17161: POP
17162: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
17163: LD_ADDR_EXP 60
17167: PUSH
17168: LD_EXP 60
17172: PPUSH
17173: LD_VAR 0 1
17177: PPUSH
17178: CALL_OW 255
17182: PUSH
17183: LD_VAR 0 1
17187: PUSH
17188: LD_VAR 0 2
17192: PUSH
17193: LD_VAR 0 3
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: PPUSH
17204: CALL 62380 0 2
17208: ST_TO_ADDR
// UpdateFactoryWaypoints ;
17209: CALL 17218 0 0
// end ;
17213: LD_VAR 0 4
17217: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
17218: LD_INT 0
17220: PPUSH
17221: PPUSH
17222: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
17223: LD_STRING resetFactoryWaypoint();
17225: PPUSH
17226: CALL_OW 559
// if factoryWaypoints then
17230: LD_EXP 60
17234: IFFALSE 17355
// begin list := factoryWaypoints ;
17236: LD_ADDR_VAR 0 3
17240: PUSH
17241: LD_EXP 60
17245: ST_TO_ADDR
// for i := 1 to list do
17246: LD_ADDR_VAR 0 2
17250: PUSH
17251: DOUBLE
17252: LD_INT 1
17254: DEC
17255: ST_TO_ADDR
17256: LD_VAR 0 3
17260: PUSH
17261: FOR_TO
17262: IFFALSE 17353
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
17264: LD_STRING setFactoryWaypointXY(
17266: PUSH
17267: LD_VAR 0 3
17271: PUSH
17272: LD_VAR 0 2
17276: ARRAY
17277: PUSH
17278: LD_INT 1
17280: ARRAY
17281: STR
17282: PUSH
17283: LD_STRING ,
17285: STR
17286: PUSH
17287: LD_VAR 0 3
17291: PUSH
17292: LD_VAR 0 2
17296: ARRAY
17297: PUSH
17298: LD_INT 2
17300: ARRAY
17301: STR
17302: PUSH
17303: LD_STRING ,
17305: STR
17306: PUSH
17307: LD_VAR 0 3
17311: PUSH
17312: LD_VAR 0 2
17316: ARRAY
17317: PUSH
17318: LD_INT 3
17320: ARRAY
17321: STR
17322: PUSH
17323: LD_STRING ,
17325: STR
17326: PUSH
17327: LD_VAR 0 3
17331: PUSH
17332: LD_VAR 0 2
17336: ARRAY
17337: PUSH
17338: LD_INT 4
17340: ARRAY
17341: STR
17342: PUSH
17343: LD_STRING )
17345: STR
17346: PPUSH
17347: CALL_OW 559
17351: GO 17261
17353: POP
17354: POP
// end ; end ;
17355: LD_VAR 0 1
17359: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
17360: LD_INT 0
17362: PPUSH
// if HexInfo ( x , y ) = warehouse then
17363: LD_VAR 0 2
17367: PPUSH
17368: LD_VAR 0 3
17372: PPUSH
17373: CALL_OW 428
17377: PUSH
17378: LD_VAR 0 1
17382: EQUAL
17383: IFFALSE 17410
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
17385: LD_ADDR_EXP 62
17389: PUSH
17390: LD_EXP 62
17394: PPUSH
17395: LD_VAR 0 1
17399: PPUSH
17400: LD_INT 0
17402: PPUSH
17403: CALL_OW 1
17407: ST_TO_ADDR
17408: GO 17461
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
17410: LD_ADDR_EXP 62
17414: PUSH
17415: LD_EXP 62
17419: PPUSH
17420: LD_VAR 0 1
17424: PPUSH
17425: LD_VAR 0 1
17429: PPUSH
17430: CALL_OW 255
17434: PUSH
17435: LD_VAR 0 1
17439: PUSH
17440: LD_VAR 0 2
17444: PUSH
17445: LD_VAR 0 3
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: PPUSH
17456: CALL_OW 1
17460: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
17461: CALL 17470 0 0
// end ;
17465: LD_VAR 0 4
17469: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
17470: LD_INT 0
17472: PPUSH
17473: PPUSH
17474: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
17475: LD_STRING resetWarehouseGatheringPoints();
17477: PPUSH
17478: CALL_OW 559
// if warehouseGatheringPoints then
17482: LD_EXP 62
17486: IFFALSE 17612
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
17488: LD_ADDR_VAR 0 3
17492: PUSH
17493: LD_EXP 62
17497: PPUSH
17498: CALL 66314 0 1
17502: ST_TO_ADDR
// for i := 1 to list do
17503: LD_ADDR_VAR 0 2
17507: PUSH
17508: DOUBLE
17509: LD_INT 1
17511: DEC
17512: ST_TO_ADDR
17513: LD_VAR 0 3
17517: PUSH
17518: FOR_TO
17519: IFFALSE 17610
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
17521: LD_STRING setWarehouseGatheringPointXY(
17523: PUSH
17524: LD_VAR 0 3
17528: PUSH
17529: LD_VAR 0 2
17533: ARRAY
17534: PUSH
17535: LD_INT 1
17537: ARRAY
17538: STR
17539: PUSH
17540: LD_STRING ,
17542: STR
17543: PUSH
17544: LD_VAR 0 3
17548: PUSH
17549: LD_VAR 0 2
17553: ARRAY
17554: PUSH
17555: LD_INT 2
17557: ARRAY
17558: STR
17559: PUSH
17560: LD_STRING ,
17562: STR
17563: PUSH
17564: LD_VAR 0 3
17568: PUSH
17569: LD_VAR 0 2
17573: ARRAY
17574: PUSH
17575: LD_INT 3
17577: ARRAY
17578: STR
17579: PUSH
17580: LD_STRING ,
17582: STR
17583: PUSH
17584: LD_VAR 0 3
17588: PUSH
17589: LD_VAR 0 2
17593: ARRAY
17594: PUSH
17595: LD_INT 4
17597: ARRAY
17598: STR
17599: PUSH
17600: LD_STRING )
17602: STR
17603: PPUSH
17604: CALL_OW 559
17608: GO 17518
17610: POP
17611: POP
// end ; end ;
17612: LD_VAR 0 1
17616: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
17617: LD_INT 0
17619: PPUSH
17620: PPUSH
// if not mpSidePositions then
17621: LD_EXP 16
17625: NOT
17626: IFFALSE 17630
// exit ;
17628: GO 17701
// result :=  ;
17630: LD_ADDR_VAR 0 1
17634: PUSH
17635: LD_STRING 
17637: ST_TO_ADDR
// for i := 1 to 8 do
17638: LD_ADDR_VAR 0 2
17642: PUSH
17643: DOUBLE
17644: LD_INT 1
17646: DEC
17647: ST_TO_ADDR
17648: LD_INT 8
17650: PUSH
17651: FOR_TO
17652: IFFALSE 17682
// begin result := result & mpSidePositions [ i ] & ; ;
17654: LD_ADDR_VAR 0 1
17658: PUSH
17659: LD_VAR 0 1
17663: PUSH
17664: LD_EXP 16
17668: PUSH
17669: LD_VAR 0 2
17673: ARRAY
17674: STR
17675: PUSH
17676: LD_STRING ;
17678: STR
17679: ST_TO_ADDR
// end ;
17680: GO 17651
17682: POP
17683: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
17684: LD_STRING setMultiplayerRealPosition("
17686: PUSH
17687: LD_VAR 0 1
17691: STR
17692: PUSH
17693: LD_STRING ");
17695: STR
17696: PPUSH
17697: CALL_OW 559
// end ; end_of_file
17701: LD_VAR 0 1
17705: RET
// export function SOS_UnitDestroyed ( un ) ; begin
17706: LD_INT 0
17708: PPUSH
// ComRadiation ( un ) ;
17709: LD_VAR 0 1
17713: PPUSH
17714: CALL 18876 0 1
// end ;
17718: LD_VAR 0 2
17722: RET
// export function SOS_UnitKamikazed ( un ) ; begin
17723: LD_INT 0
17725: PPUSH
// ComRadiation ( un ) ;
17726: LD_VAR 0 1
17730: PPUSH
17731: CALL 18876 0 1
// end ;
17735: LD_VAR 0 2
17739: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17740: LD_INT 0
17742: PPUSH
// end ;
17743: LD_VAR 0 4
17747: RET
// export function SOS_Command ( cmd ) ; begin
17748: LD_INT 0
17750: PPUSH
// end ;
17751: LD_VAR 0 2
17755: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
17756: LD_INT 0
17758: PPUSH
// end ;
17759: LD_VAR 0 6
17763: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
17764: LD_INT 0
17766: PPUSH
17767: PPUSH
17768: PPUSH
17769: PPUSH
17770: PPUSH
// if not vehicle or not factory then
17771: LD_VAR 0 1
17775: NOT
17776: IFTRUE 17785
17778: PUSH
17779: LD_VAR 0 2
17783: NOT
17784: OR
17785: IFFALSE 17789
// exit ;
17787: GO 18451
// weapon := GetWeapon ( vehicle ) ;
17789: LD_ADDR_VAR 0 7
17793: PUSH
17794: LD_VAR 0 1
17798: PPUSH
17799: CALL_OW 264
17803: ST_TO_ADDR
// if weapon = ar_miner then
17804: LD_VAR 0 7
17808: PUSH
17809: LD_INT 81
17811: EQUAL
17812: IFFALSE 17869
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
17814: LD_ADDR_EXP 71
17818: PUSH
17819: LD_EXP 71
17823: PPUSH
17824: LD_EXP 71
17828: PUSH
17829: LD_INT 1
17831: PLUS
17832: PPUSH
17833: LD_VAR 0 1
17837: PPUSH
17838: CALL_OW 1
17842: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
17843: LD_ADDR_EXP 72
17847: PUSH
17848: LD_EXP 72
17852: PPUSH
17853: LD_EXP 72
17857: PUSH
17858: LD_INT 1
17860: PLUS
17861: PPUSH
17862: EMPTY
17863: PPUSH
17864: CALL_OW 1
17868: ST_TO_ADDR
// end ; if not factoryWaypoints then
17869: LD_EXP 60
17873: NOT
17874: IFFALSE 17878
// exit ;
17876: GO 18451
// for i := 1 to Count ( factoryWaypoints ) do
17878: LD_ADDR_VAR 0 4
17882: PUSH
17883: DOUBLE
17884: LD_INT 1
17886: DEC
17887: ST_TO_ADDR
17888: LD_EXP 60
17892: PPUSH
17893: CALL 26404 0 1
17897: PUSH
17898: FOR_TO
17899: IFFALSE 18449
// if factoryWaypoints [ i ] [ 2 ] = factory then
17901: LD_EXP 60
17905: PUSH
17906: LD_VAR 0 4
17910: ARRAY
17911: PUSH
17912: LD_INT 2
17914: ARRAY
17915: PUSH
17916: LD_VAR 0 2
17920: EQUAL
17921: IFFALSE 18447
// begin if GetControl ( vehicle ) = control_manual then
17923: LD_VAR 0 1
17927: PPUSH
17928: CALL_OW 263
17932: PUSH
17933: LD_INT 1
17935: EQUAL
17936: IFFALSE 18300
// begin driver := IsDrivenBy ( vehicle ) ;
17938: LD_ADDR_VAR 0 5
17942: PUSH
17943: LD_VAR 0 1
17947: PPUSH
17948: CALL_OW 311
17952: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
17953: LD_VAR 0 5
17957: PUSH
17958: LD_EXP 61
17962: IN
17963: IFTRUE 17977
17965: PUSH
17966: LD_VAR 0 1
17970: PUSH
17971: LD_EXP 61
17975: IN
17976: OR
17977: IFFALSE 17983
// exit ;
17979: POP
17980: POP
17981: GO 18451
// if not HasTask ( driver ) then
17983: LD_VAR 0 5
17987: PPUSH
17988: CALL_OW 314
17992: NOT
17993: IFFALSE 18298
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
17995: LD_ADDR_EXP 61
17999: PUSH
18000: LD_EXP 61
18004: PPUSH
18005: LD_VAR 0 5
18009: PPUSH
18010: CALL 62380 0 2
18014: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
18015: LD_ADDR_EXP 61
18019: PUSH
18020: LD_EXP 61
18024: PPUSH
18025: LD_VAR 0 1
18029: PPUSH
18030: CALL 62380 0 2
18034: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
18035: LD_ADDR_VAR 0 6
18039: PUSH
18040: LD_EXP 60
18044: PUSH
18045: LD_VAR 0 4
18049: ARRAY
18050: PUSH
18051: LD_INT 3
18053: ARRAY
18054: PPUSH
18055: LD_EXP 60
18059: PUSH
18060: LD_VAR 0 4
18064: ARRAY
18065: PUSH
18066: LD_INT 4
18068: ARRAY
18069: PPUSH
18070: CALL_OW 428
18074: ST_TO_ADDR
// if hex then
18075: LD_VAR 0 6
18079: IFFALSE 18097
// ComMoveUnit ( driver , hex ) else
18081: LD_VAR 0 5
18085: PPUSH
18086: LD_VAR 0 6
18090: PPUSH
18091: CALL_OW 112
18095: GO 18181
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
18097: LD_VAR 0 1
18101: PPUSH
18102: LD_EXP 60
18106: PUSH
18107: LD_VAR 0 4
18111: ARRAY
18112: PUSH
18113: LD_INT 3
18115: ARRAY
18116: PPUSH
18117: LD_EXP 60
18121: PUSH
18122: LD_VAR 0 4
18126: ARRAY
18127: PUSH
18128: LD_INT 4
18130: ARRAY
18131: PPUSH
18132: CALL_OW 297
18136: PUSH
18137: LD_INT 0
18139: GREATER
18140: IFFALSE 18181
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
18142: LD_VAR 0 5
18146: PPUSH
18147: LD_EXP 60
18151: PUSH
18152: LD_VAR 0 4
18156: ARRAY
18157: PUSH
18158: LD_INT 3
18160: ARRAY
18161: PPUSH
18162: LD_EXP 60
18166: PUSH
18167: LD_VAR 0 4
18171: ARRAY
18172: PUSH
18173: LD_INT 4
18175: ARRAY
18176: PPUSH
18177: CALL_OW 111
// AddComExitVehicle ( driver ) ;
18181: LD_VAR 0 5
18185: PPUSH
18186: CALL_OW 181
// if Multiplayer then
18190: LD_OWVAR 4
18194: IFFALSE 18243
// begin repeat wait ( 10 ) ;
18196: LD_INT 10
18198: PPUSH
18199: CALL_OW 67
// until not IsInUnit ( driver ) ;
18203: LD_VAR 0 5
18207: PPUSH
18208: CALL_OW 310
18212: NOT
18213: IFFALSE 18196
// if not HasTask ( driver ) then
18215: LD_VAR 0 5
18219: PPUSH
18220: CALL_OW 314
18224: NOT
18225: IFFALSE 18241
// ComEnterUnit ( driver , factory ) ;
18227: LD_VAR 0 5
18231: PPUSH
18232: LD_VAR 0 2
18236: PPUSH
18237: CALL_OW 120
// end else
18241: GO 18257
// AddComEnterUnit ( driver , factory ) ;
18243: LD_VAR 0 5
18247: PPUSH
18248: LD_VAR 0 2
18252: PPUSH
18253: CALL_OW 180
// wait ( 0 0$1 ) ;
18257: LD_INT 35
18259: PPUSH
18260: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
18264: LD_ADDR_EXP 61
18268: PUSH
18269: LD_EXP 61
18273: PUSH
18274: LD_VAR 0 5
18278: DIFF
18279: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
18280: LD_ADDR_EXP 61
18284: PUSH
18285: LD_EXP 61
18289: PUSH
18290: LD_VAR 0 1
18294: DIFF
18295: ST_TO_ADDR
// break ;
18296: GO 18449
// end ; end else
18298: GO 18447
// if GetControl ( vehicle ) = control_remote then
18300: LD_VAR 0 1
18304: PPUSH
18305: CALL_OW 263
18309: PUSH
18310: LD_INT 2
18312: EQUAL
18313: IFFALSE 18399
// begin wait ( 0 0$2 ) ;
18315: LD_INT 70
18317: PPUSH
18318: CALL_OW 67
// repeat wait ( 10 ) ;
18322: LD_INT 10
18324: PPUSH
18325: CALL_OW 67
// Connect ( vehicle ) ;
18329: LD_VAR 0 1
18333: PPUSH
18334: CALL 32682 0 1
// until IsControledBy ( vehicle ) ;
18338: LD_VAR 0 1
18342: PPUSH
18343: CALL_OW 312
18347: IFFALSE 18322
// wait ( 10 ) ;
18349: LD_INT 10
18351: PPUSH
18352: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
18356: LD_VAR 0 1
18360: PPUSH
18361: LD_EXP 60
18365: PUSH
18366: LD_VAR 0 4
18370: ARRAY
18371: PUSH
18372: LD_INT 3
18374: ARRAY
18375: PPUSH
18376: LD_EXP 60
18380: PUSH
18381: LD_VAR 0 4
18385: ARRAY
18386: PUSH
18387: LD_INT 4
18389: ARRAY
18390: PPUSH
18391: CALL_OW 111
// break ;
18395: GO 18449
// end else
18397: GO 18447
// begin wait ( 0 0$3 ) ;
18399: LD_INT 105
18401: PPUSH
18402: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
18406: LD_VAR 0 1
18410: PPUSH
18411: LD_EXP 60
18415: PUSH
18416: LD_VAR 0 4
18420: ARRAY
18421: PUSH
18422: LD_INT 3
18424: ARRAY
18425: PPUSH
18426: LD_EXP 60
18430: PUSH
18431: LD_VAR 0 4
18435: ARRAY
18436: PUSH
18437: LD_INT 4
18439: ARRAY
18440: PPUSH
18441: CALL_OW 111
// break ;
18445: GO 18449
// end ; end ;
18447: GO 17898
18449: POP
18450: POP
// end ;
18451: LD_VAR 0 3
18455: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
18456: LD_INT 0
18458: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
18459: LD_VAR 0 1
18463: PUSH
18464: LD_INT 250
18466: EQUAL
18467: IFFALSE 18484
18469: PUSH
18470: LD_VAR 0 2
18474: PPUSH
18475: CALL_OW 264
18479: PUSH
18480: LD_INT 81
18482: EQUAL
18483: AND
18484: IFFALSE 18505
// MinerPlaceMine ( unit , x , y ) ;
18486: LD_VAR 0 2
18490: PPUSH
18491: LD_VAR 0 4
18495: PPUSH
18496: LD_VAR 0 5
18500: PPUSH
18501: CALL 21851 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
18505: LD_VAR 0 1
18509: PUSH
18510: LD_INT 251
18512: EQUAL
18513: IFFALSE 18530
18515: PUSH
18516: LD_VAR 0 2
18520: PPUSH
18521: CALL_OW 264
18525: PUSH
18526: LD_INT 81
18528: EQUAL
18529: AND
18530: IFFALSE 18551
// MinerDetonateMine ( unit , x , y ) ;
18532: LD_VAR 0 2
18536: PPUSH
18537: LD_VAR 0 4
18541: PPUSH
18542: LD_VAR 0 5
18546: PPUSH
18547: CALL 22258 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
18551: LD_VAR 0 1
18555: PUSH
18556: LD_INT 252
18558: EQUAL
18559: IFFALSE 18576
18561: PUSH
18562: LD_VAR 0 2
18566: PPUSH
18567: CALL_OW 264
18571: PUSH
18572: LD_INT 81
18574: EQUAL
18575: AND
18576: IFFALSE 18597
// MinerCreateMinefield ( unit , x , y ) ;
18578: LD_VAR 0 2
18582: PPUSH
18583: LD_VAR 0 4
18587: PPUSH
18588: LD_VAR 0 5
18592: PPUSH
18593: CALL 22490 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
18597: LD_VAR 0 1
18601: PUSH
18602: LD_INT 253
18604: EQUAL
18605: IFFALSE 18622
18607: PUSH
18608: LD_VAR 0 2
18612: PPUSH
18613: CALL_OW 257
18617: PUSH
18618: LD_INT 5
18620: EQUAL
18621: AND
18622: IFFALSE 18643
// ComBinocular ( unit , x , y ) ;
18624: LD_VAR 0 2
18628: PPUSH
18629: LD_VAR 0 4
18633: PPUSH
18634: LD_VAR 0 5
18638: PPUSH
18639: CALL 22865 0 3
// if selectedUnit then
18643: LD_VAR 0 3
18647: IFFALSE 18707
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18649: LD_VAR 0 1
18653: PUSH
18654: LD_INT 254
18656: EQUAL
18657: IFFALSE 18674
18659: PUSH
18660: LD_VAR 0 2
18664: PPUSH
18665: CALL_OW 264
18669: PUSH
18670: LD_INT 99
18672: EQUAL
18673: AND
18674: IFFALSE 18691
18676: PUSH
18677: LD_VAR 0 3
18681: PPUSH
18682: CALL_OW 263
18686: PUSH
18687: LD_INT 3
18689: EQUAL
18690: AND
18691: IFFALSE 18707
// HackDestroyVehicle ( unit , selectedUnit ) ;
18693: LD_VAR 0 2
18697: PPUSH
18698: LD_VAR 0 3
18702: PPUSH
18703: CALL 21041 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18707: LD_VAR 0 1
18711: PUSH
18712: LD_INT 255
18714: EQUAL
18715: IFFALSE 18739
18717: PUSH
18718: LD_VAR 0 2
18722: PPUSH
18723: CALL_OW 264
18727: PUSH
18728: LD_INT 14
18730: PUSH
18731: LD_INT 53
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: IN
18738: AND
18739: IFFALSE 18757
18741: PUSH
18742: LD_VAR 0 4
18746: PPUSH
18747: LD_VAR 0 5
18751: PPUSH
18752: CALL_OW 488
18756: AND
18757: IFFALSE 18781
// CutTreeXYR ( unit , x , y , 12 ) ;
18759: LD_VAR 0 2
18763: PPUSH
18764: LD_VAR 0 4
18768: PPUSH
18769: LD_VAR 0 5
18773: PPUSH
18774: LD_INT 12
18776: PPUSH
18777: CALL 18972 0 4
// if cmd = 256 then
18781: LD_VAR 0 1
18785: PUSH
18786: LD_INT 256
18788: EQUAL
18789: IFFALSE 18810
// SetFactoryWaypoint ( unit , x , y ) ;
18791: LD_VAR 0 2
18795: PPUSH
18796: LD_VAR 0 4
18800: PPUSH
18801: LD_VAR 0 5
18805: PPUSH
18806: CALL 16864 0 3
// if cmd = 257 then
18810: LD_VAR 0 1
18814: PUSH
18815: LD_INT 257
18817: EQUAL
18818: IFFALSE 18839
// SetWarehouseGatheringPoint ( unit , x , y ) ;
18820: LD_VAR 0 2
18824: PPUSH
18825: LD_VAR 0 4
18829: PPUSH
18830: LD_VAR 0 5
18834: PPUSH
18835: CALL 17360 0 3
// if cmd = 258 then
18839: LD_VAR 0 1
18843: PUSH
18844: LD_INT 258
18846: EQUAL
18847: IFFALSE 18871
// BurnTreeXYR ( unit , x , y , 8 ) ;
18849: LD_VAR 0 2
18853: PPUSH
18854: LD_VAR 0 4
18858: PPUSH
18859: LD_VAR 0 5
18863: PPUSH
18864: LD_INT 8
18866: PPUSH
18867: CALL 19394 0 4
// end ;
18871: LD_VAR 0 6
18875: RET
// export function ComRadiation ( un ) ; var eff ; begin
18876: LD_INT 0
18878: PPUSH
18879: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
18880: LD_VAR 0 1
18884: PPUSH
18885: CALL_OW 264
18889: PUSH
18890: LD_INT 91
18892: NONEQUAL
18893: IFFALSE 18897
// exit ;
18895: GO 18967
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
18897: LD_INT 68
18899: PPUSH
18900: LD_VAR 0 1
18904: PPUSH
18905: CALL_OW 255
18909: PPUSH
18910: CALL_OW 321
18914: PUSH
18915: LD_INT 2
18917: EQUAL
18918: IFFALSE 18930
// eff := 50 else
18920: LD_ADDR_VAR 0 3
18924: PUSH
18925: LD_INT 50
18927: ST_TO_ADDR
18928: GO 18938
// eff := 25 ;
18930: LD_ADDR_VAR 0 3
18934: PUSH
18935: LD_INT 25
18937: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
18938: LD_VAR 0 1
18942: PPUSH
18943: CALL_OW 250
18947: PPUSH
18948: LD_VAR 0 1
18952: PPUSH
18953: CALL_OW 251
18957: PPUSH
18958: LD_VAR 0 3
18962: PPUSH
18963: CALL_OW 495
// end ;
18967: LD_VAR 0 2
18971: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18972: LD_INT 0
18974: PPUSH
18975: PPUSH
18976: PPUSH
18977: PPUSH
18978: PPUSH
18979: PPUSH
18980: PPUSH
18981: PPUSH
18982: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
18983: LD_VAR 0 1
18987: PPUSH
18988: CALL_OW 302
18992: NOT
18993: IFTRUE 19012
18995: PUSH
18996: LD_VAR 0 2
19000: PPUSH
19001: LD_VAR 0 3
19005: PPUSH
19006: CALL_OW 488
19010: NOT
19011: OR
19012: IFTRUE 19021
19014: PUSH
19015: LD_VAR 0 4
19019: NOT
19020: OR
19021: IFFALSE 19025
// exit ;
19023: GO 19389
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
19025: LD_VAR 0 1
19029: PPUSH
19030: CALL_OW 437
19034: PPUSH
19035: CALL 26404 0 1
19039: PUSH
19040: LD_INT 10
19042: GREATER
19043: IFFALSE 19047
// exit ;
19045: GO 19389
// list := [ ] ;
19047: LD_ADDR_VAR 0 13
19051: PUSH
19052: EMPTY
19053: ST_TO_ADDR
// if x - r < 0 then
19054: LD_VAR 0 2
19058: PUSH
19059: LD_VAR 0 4
19063: MINUS
19064: PUSH
19065: LD_INT 0
19067: LESS
19068: IFFALSE 19080
// min_x := 0 else
19070: LD_ADDR_VAR 0 7
19074: PUSH
19075: LD_INT 0
19077: ST_TO_ADDR
19078: GO 19096
// min_x := x - r ;
19080: LD_ADDR_VAR 0 7
19084: PUSH
19085: LD_VAR 0 2
19089: PUSH
19090: LD_VAR 0 4
19094: MINUS
19095: ST_TO_ADDR
// if y - r < 0 then
19096: LD_VAR 0 3
19100: PUSH
19101: LD_VAR 0 4
19105: MINUS
19106: PUSH
19107: LD_INT 0
19109: LESS
19110: IFFALSE 19122
// min_y := 0 else
19112: LD_ADDR_VAR 0 8
19116: PUSH
19117: LD_INT 0
19119: ST_TO_ADDR
19120: GO 19138
// min_y := y - r ;
19122: LD_ADDR_VAR 0 8
19126: PUSH
19127: LD_VAR 0 3
19131: PUSH
19132: LD_VAR 0 4
19136: MINUS
19137: ST_TO_ADDR
// max_x := x + r ;
19138: LD_ADDR_VAR 0 9
19142: PUSH
19143: LD_VAR 0 2
19147: PUSH
19148: LD_VAR 0 4
19152: PLUS
19153: ST_TO_ADDR
// max_y := y + r ;
19154: LD_ADDR_VAR 0 10
19158: PUSH
19159: LD_VAR 0 3
19163: PUSH
19164: LD_VAR 0 4
19168: PLUS
19169: ST_TO_ADDR
// for _x = min_x to max_x do
19170: LD_ADDR_VAR 0 11
19174: PUSH
19175: DOUBLE
19176: LD_VAR 0 7
19180: DEC
19181: ST_TO_ADDR
19182: LD_VAR 0 9
19186: PUSH
19187: FOR_TO
19188: IFFALSE 19307
// for _y = min_y to max_y do
19190: LD_ADDR_VAR 0 12
19194: PUSH
19195: DOUBLE
19196: LD_VAR 0 8
19200: DEC
19201: ST_TO_ADDR
19202: LD_VAR 0 10
19206: PUSH
19207: FOR_TO
19208: IFFALSE 19303
// begin if not ValidHex ( _x , _y ) then
19210: LD_VAR 0 11
19214: PPUSH
19215: LD_VAR 0 12
19219: PPUSH
19220: CALL_OW 488
19224: NOT
19225: IFFALSE 19229
// continue ;
19227: GO 19207
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
19229: LD_VAR 0 11
19233: PPUSH
19234: LD_VAR 0 12
19238: PPUSH
19239: CALL_OW 351
19243: IFFALSE 19261
19245: PUSH
19246: LD_VAR 0 11
19250: PPUSH
19251: LD_VAR 0 12
19255: PPUSH
19256: CALL_OW 554
19260: AND
19261: IFFALSE 19301
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
19263: LD_ADDR_VAR 0 13
19267: PUSH
19268: LD_VAR 0 13
19272: PPUSH
19273: LD_VAR 0 13
19277: PUSH
19278: LD_INT 1
19280: PLUS
19281: PPUSH
19282: LD_VAR 0 11
19286: PUSH
19287: LD_VAR 0 12
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: PPUSH
19296: CALL_OW 2
19300: ST_TO_ADDR
// end ;
19301: GO 19207
19303: POP
19304: POP
19305: GO 19187
19307: POP
19308: POP
// if not list then
19309: LD_VAR 0 13
19313: NOT
19314: IFFALSE 19318
// exit ;
19316: GO 19389
// for i in list do
19318: LD_ADDR_VAR 0 6
19322: PUSH
19323: LD_VAR 0 13
19327: PUSH
19328: FOR_IN
19329: IFFALSE 19387
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
19331: LD_VAR 0 1
19335: PPUSH
19336: LD_STRING M
19338: PUSH
19339: LD_VAR 0 6
19343: PUSH
19344: LD_INT 1
19346: ARRAY
19347: PUSH
19348: LD_VAR 0 6
19352: PUSH
19353: LD_INT 2
19355: ARRAY
19356: PUSH
19357: LD_INT 0
19359: PUSH
19360: LD_INT 0
19362: PUSH
19363: LD_INT 0
19365: PUSH
19366: LD_INT 0
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: PUSH
19378: EMPTY
19379: LIST
19380: PPUSH
19381: CALL_OW 447
19385: GO 19328
19387: POP
19388: POP
// end ;
19389: LD_VAR 0 5
19393: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
19394: LD_INT 0
19396: PPUSH
19397: PPUSH
19398: PPUSH
19399: PPUSH
19400: PPUSH
19401: PPUSH
19402: PPUSH
19403: PPUSH
19404: PPUSH
19405: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
19406: LD_VAR 0 1
19410: PPUSH
19411: CALL_OW 302
19415: NOT
19416: IFTRUE 19435
19418: PUSH
19419: LD_VAR 0 2
19423: PPUSH
19424: LD_VAR 0 3
19428: PPUSH
19429: CALL_OW 488
19433: NOT
19434: OR
19435: IFTRUE 19444
19437: PUSH
19438: LD_VAR 0 4
19442: NOT
19443: OR
19444: IFFALSE 19448
// exit ;
19446: GO 19987
// if Count ( GetTaskList ( flame ) ) > 10 then
19448: LD_VAR 0 1
19452: PPUSH
19453: CALL_OW 437
19457: PPUSH
19458: CALL 26404 0 1
19462: PUSH
19463: LD_INT 10
19465: GREATER
19466: IFFALSE 19470
// exit ;
19468: GO 19987
// list := [ ] ;
19470: LD_ADDR_VAR 0 13
19474: PUSH
19475: EMPTY
19476: ST_TO_ADDR
// if x - r < 0 then
19477: LD_VAR 0 2
19481: PUSH
19482: LD_VAR 0 4
19486: MINUS
19487: PUSH
19488: LD_INT 0
19490: LESS
19491: IFFALSE 19503
// min_x := 0 else
19493: LD_ADDR_VAR 0 7
19497: PUSH
19498: LD_INT 0
19500: ST_TO_ADDR
19501: GO 19519
// min_x := x - r ;
19503: LD_ADDR_VAR 0 7
19507: PUSH
19508: LD_VAR 0 2
19512: PUSH
19513: LD_VAR 0 4
19517: MINUS
19518: ST_TO_ADDR
// if y - r < 0 then
19519: LD_VAR 0 3
19523: PUSH
19524: LD_VAR 0 4
19528: MINUS
19529: PUSH
19530: LD_INT 0
19532: LESS
19533: IFFALSE 19545
// min_y := 0 else
19535: LD_ADDR_VAR 0 8
19539: PUSH
19540: LD_INT 0
19542: ST_TO_ADDR
19543: GO 19561
// min_y := y - r ;
19545: LD_ADDR_VAR 0 8
19549: PUSH
19550: LD_VAR 0 3
19554: PUSH
19555: LD_VAR 0 4
19559: MINUS
19560: ST_TO_ADDR
// max_x := x + r ;
19561: LD_ADDR_VAR 0 9
19565: PUSH
19566: LD_VAR 0 2
19570: PUSH
19571: LD_VAR 0 4
19575: PLUS
19576: ST_TO_ADDR
// max_y := y + r ;
19577: LD_ADDR_VAR 0 10
19581: PUSH
19582: LD_VAR 0 3
19586: PUSH
19587: LD_VAR 0 4
19591: PLUS
19592: ST_TO_ADDR
// for _x = min_x to max_x do
19593: LD_ADDR_VAR 0 11
19597: PUSH
19598: DOUBLE
19599: LD_VAR 0 7
19603: DEC
19604: ST_TO_ADDR
19605: LD_VAR 0 9
19609: PUSH
19610: FOR_TO
19611: IFFALSE 19730
// for _y = min_y to max_y do
19613: LD_ADDR_VAR 0 12
19617: PUSH
19618: DOUBLE
19619: LD_VAR 0 8
19623: DEC
19624: ST_TO_ADDR
19625: LD_VAR 0 10
19629: PUSH
19630: FOR_TO
19631: IFFALSE 19726
// begin if not ValidHex ( _x , _y ) then
19633: LD_VAR 0 11
19637: PPUSH
19638: LD_VAR 0 12
19642: PPUSH
19643: CALL_OW 488
19647: NOT
19648: IFFALSE 19652
// continue ;
19650: GO 19630
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
19652: LD_VAR 0 11
19656: PPUSH
19657: LD_VAR 0 12
19661: PPUSH
19662: CALL_OW 351
19666: IFFALSE 19684
19668: PUSH
19669: LD_VAR 0 11
19673: PPUSH
19674: LD_VAR 0 12
19678: PPUSH
19679: CALL_OW 554
19683: AND
19684: IFFALSE 19724
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
19686: LD_ADDR_VAR 0 13
19690: PUSH
19691: LD_VAR 0 13
19695: PPUSH
19696: LD_VAR 0 13
19700: PUSH
19701: LD_INT 1
19703: PLUS
19704: PPUSH
19705: LD_VAR 0 11
19709: PUSH
19710: LD_VAR 0 12
19714: PUSH
19715: EMPTY
19716: LIST
19717: LIST
19718: PPUSH
19719: CALL_OW 2
19723: ST_TO_ADDR
// end ;
19724: GO 19630
19726: POP
19727: POP
19728: GO 19610
19730: POP
19731: POP
// if not list then
19732: LD_VAR 0 13
19736: NOT
19737: IFFALSE 19741
// exit ;
19739: GO 19987
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
19741: LD_ADDR_VAR 0 13
19745: PUSH
19746: LD_VAR 0 1
19750: PPUSH
19751: LD_VAR 0 13
19755: PPUSH
19756: LD_INT 1
19758: PPUSH
19759: LD_INT 1
19761: PPUSH
19762: CALL 29810 0 4
19766: ST_TO_ADDR
// ComStop ( flame ) ;
19767: LD_VAR 0 1
19771: PPUSH
19772: CALL_OW 141
// for i in list do
19776: LD_ADDR_VAR 0 6
19780: PUSH
19781: LD_VAR 0 13
19785: PUSH
19786: FOR_IN
19787: IFFALSE 19818
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
19789: LD_VAR 0 1
19793: PPUSH
19794: LD_VAR 0 6
19798: PUSH
19799: LD_INT 1
19801: ARRAY
19802: PPUSH
19803: LD_VAR 0 6
19807: PUSH
19808: LD_INT 2
19810: ARRAY
19811: PPUSH
19812: CALL_OW 176
19816: GO 19786
19818: POP
19819: POP
// repeat wait ( 0 0$1 ) ;
19820: LD_INT 35
19822: PPUSH
19823: CALL_OW 67
// task := GetTaskList ( flame ) ;
19827: LD_ADDR_VAR 0 14
19831: PUSH
19832: LD_VAR 0 1
19836: PPUSH
19837: CALL_OW 437
19841: ST_TO_ADDR
// if not task then
19842: LD_VAR 0 14
19846: NOT
19847: IFFALSE 19851
// exit ;
19849: GO 19987
// if task [ 1 ] [ 1 ] <> | then
19851: LD_VAR 0 14
19855: PUSH
19856: LD_INT 1
19858: ARRAY
19859: PUSH
19860: LD_INT 1
19862: ARRAY
19863: PUSH
19864: LD_STRING |
19866: NONEQUAL
19867: IFFALSE 19871
// exit ;
19869: GO 19987
// _x := task [ 1 ] [ 2 ] ;
19871: LD_ADDR_VAR 0 11
19875: PUSH
19876: LD_VAR 0 14
19880: PUSH
19881: LD_INT 1
19883: ARRAY
19884: PUSH
19885: LD_INT 2
19887: ARRAY
19888: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
19889: LD_ADDR_VAR 0 12
19893: PUSH
19894: LD_VAR 0 14
19898: PUSH
19899: LD_INT 1
19901: ARRAY
19902: PUSH
19903: LD_INT 3
19905: ARRAY
19906: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
19907: LD_VAR 0 11
19911: PPUSH
19912: LD_VAR 0 12
19916: PPUSH
19917: CALL_OW 351
19921: NOT
19922: IFTRUE 19941
19924: PUSH
19925: LD_VAR 0 11
19929: PPUSH
19930: LD_VAR 0 12
19934: PPUSH
19935: CALL_OW 554
19939: NOT
19940: OR
19941: IFFALSE 19975
// begin task := Delete ( task , 1 ) ;
19943: LD_ADDR_VAR 0 14
19947: PUSH
19948: LD_VAR 0 14
19952: PPUSH
19953: LD_INT 1
19955: PPUSH
19956: CALL_OW 3
19960: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
19961: LD_VAR 0 1
19965: PPUSH
19966: LD_VAR 0 14
19970: PPUSH
19971: CALL_OW 446
// end ; until not HasTask ( flame ) ;
19975: LD_VAR 0 1
19979: PPUSH
19980: CALL_OW 314
19984: NOT
19985: IFFALSE 19820
// end ;
19987: LD_VAR 0 5
19991: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
19992: LD_EXP 64
19996: NOT
19997: IFFALSE 20047
19999: GO 20001
20001: DISABLE
// begin initHack := true ;
20002: LD_ADDR_EXP 64
20006: PUSH
20007: LD_INT 1
20009: ST_TO_ADDR
// hackTanks := [ ] ;
20010: LD_ADDR_EXP 65
20014: PUSH
20015: EMPTY
20016: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
20017: LD_ADDR_EXP 66
20021: PUSH
20022: EMPTY
20023: ST_TO_ADDR
// hackLimit := 3 ;
20024: LD_ADDR_EXP 67
20028: PUSH
20029: LD_INT 3
20031: ST_TO_ADDR
// hackDist := 12 ;
20032: LD_ADDR_EXP 68
20036: PUSH
20037: LD_INT 12
20039: ST_TO_ADDR
// hackCounter := [ ] ;
20040: LD_ADDR_EXP 69
20044: PUSH
20045: EMPTY
20046: ST_TO_ADDR
// end ;
20047: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
20048: LD_EXP 64
20052: IFFALSE 20070
20054: PUSH
20055: LD_INT 34
20057: PUSH
20058: LD_INT 99
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: PPUSH
20065: CALL_OW 69
20069: AND
20070: IFFALSE 20323
20072: GO 20074
20074: DISABLE
20075: LD_INT 0
20077: PPUSH
20078: PPUSH
// begin enable ;
20079: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
20080: LD_ADDR_VAR 0 1
20084: PUSH
20085: LD_INT 34
20087: PUSH
20088: LD_INT 99
20090: PUSH
20091: EMPTY
20092: LIST
20093: LIST
20094: PPUSH
20095: CALL_OW 69
20099: PUSH
20100: FOR_IN
20101: IFFALSE 20321
// begin if not i in hackTanks then
20103: LD_VAR 0 1
20107: PUSH
20108: LD_EXP 65
20112: IN
20113: NOT
20114: IFFALSE 20197
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
20116: LD_ADDR_EXP 65
20120: PUSH
20121: LD_EXP 65
20125: PPUSH
20126: LD_EXP 65
20130: PUSH
20131: LD_INT 1
20133: PLUS
20134: PPUSH
20135: LD_VAR 0 1
20139: PPUSH
20140: CALL_OW 1
20144: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
20145: LD_ADDR_EXP 66
20149: PUSH
20150: LD_EXP 66
20154: PPUSH
20155: LD_EXP 66
20159: PUSH
20160: LD_INT 1
20162: PLUS
20163: PPUSH
20164: EMPTY
20165: PPUSH
20166: CALL_OW 1
20170: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
20171: LD_ADDR_EXP 69
20175: PUSH
20176: LD_EXP 69
20180: PPUSH
20181: LD_EXP 69
20185: PUSH
20186: LD_INT 1
20188: PLUS
20189: PPUSH
20190: EMPTY
20191: PPUSH
20192: CALL_OW 1
20196: ST_TO_ADDR
// end ; if not IsOk ( i ) then
20197: LD_VAR 0 1
20201: PPUSH
20202: CALL_OW 302
20206: NOT
20207: IFFALSE 20220
// begin HackUnlinkAll ( i ) ;
20209: LD_VAR 0 1
20213: PPUSH
20214: CALL 20326 0 1
// continue ;
20218: GO 20100
// end ; HackCheckCapturedStatus ( i ) ;
20220: LD_VAR 0 1
20224: PPUSH
20225: CALL 20771 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
20229: LD_ADDR_VAR 0 2
20233: PUSH
20234: LD_INT 81
20236: PUSH
20237: LD_VAR 0 1
20241: PPUSH
20242: CALL_OW 255
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: PUSH
20251: LD_INT 33
20253: PUSH
20254: LD_INT 3
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: PUSH
20261: LD_INT 91
20263: PUSH
20264: LD_VAR 0 1
20268: PUSH
20269: LD_EXP 68
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: LIST
20278: PUSH
20279: LD_INT 50
20281: PUSH
20282: EMPTY
20283: LIST
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: PPUSH
20291: CALL_OW 69
20295: ST_TO_ADDR
// if not tmp then
20296: LD_VAR 0 2
20300: NOT
20301: IFFALSE 20305
// continue ;
20303: GO 20100
// HackLink ( i , tmp ) ;
20305: LD_VAR 0 1
20309: PPUSH
20310: LD_VAR 0 2
20314: PPUSH
20315: CALL 20462 0 2
// end ;
20319: GO 20100
20321: POP
20322: POP
// end ;
20323: PPOPN 2
20325: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
20326: LD_INT 0
20328: PPUSH
20329: PPUSH
20330: PPUSH
// if not hack in hackTanks then
20331: LD_VAR 0 1
20335: PUSH
20336: LD_EXP 65
20340: IN
20341: NOT
20342: IFFALSE 20346
// exit ;
20344: GO 20457
// index := GetElementIndex ( hackTanks , hack ) ;
20346: LD_ADDR_VAR 0 4
20350: PUSH
20351: LD_EXP 65
20355: PPUSH
20356: LD_VAR 0 1
20360: PPUSH
20361: CALL 29105 0 2
20365: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
20366: LD_EXP 66
20370: PUSH
20371: LD_VAR 0 4
20375: ARRAY
20376: IFFALSE 20457
// begin for i in hackTanksCaptured [ index ] do
20378: LD_ADDR_VAR 0 3
20382: PUSH
20383: LD_EXP 66
20387: PUSH
20388: LD_VAR 0 4
20392: ARRAY
20393: PUSH
20394: FOR_IN
20395: IFFALSE 20421
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
20397: LD_VAR 0 3
20401: PUSH
20402: LD_INT 1
20404: ARRAY
20405: PPUSH
20406: LD_VAR 0 3
20410: PUSH
20411: LD_INT 2
20413: ARRAY
20414: PPUSH
20415: CALL_OW 235
20419: GO 20394
20421: POP
20422: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
20423: LD_ADDR_EXP 66
20427: PUSH
20428: LD_EXP 66
20432: PPUSH
20433: LD_VAR 0 4
20437: PPUSH
20438: EMPTY
20439: PPUSH
20440: CALL_OW 1
20444: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
20445: LD_VAR 0 1
20449: PPUSH
20450: LD_INT 0
20452: PPUSH
20453: CALL_OW 505
// end ; end ;
20457: LD_VAR 0 2
20461: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
20462: LD_INT 0
20464: PPUSH
20465: PPUSH
20466: PPUSH
// if not hack in hackTanks or not vehicles then
20467: LD_VAR 0 1
20471: PUSH
20472: LD_EXP 65
20476: IN
20477: NOT
20478: IFTRUE 20487
20480: PUSH
20481: LD_VAR 0 2
20485: NOT
20486: OR
20487: IFFALSE 20491
// exit ;
20489: GO 20766
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
20491: LD_ADDR_VAR 0 2
20495: PUSH
20496: LD_VAR 0 1
20500: PPUSH
20501: LD_VAR 0 2
20505: PPUSH
20506: LD_INT 1
20508: PPUSH
20509: LD_INT 1
20511: PPUSH
20512: CALL 29757 0 4
20516: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
20517: LD_ADDR_VAR 0 5
20521: PUSH
20522: LD_EXP 65
20526: PPUSH
20527: LD_VAR 0 1
20531: PPUSH
20532: CALL 29105 0 2
20536: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
20537: LD_EXP 66
20541: PUSH
20542: LD_VAR 0 5
20546: ARRAY
20547: PUSH
20548: LD_EXP 67
20552: LESS
20553: IFFALSE 20742
// begin for i := 1 to vehicles do
20555: LD_ADDR_VAR 0 4
20559: PUSH
20560: DOUBLE
20561: LD_INT 1
20563: DEC
20564: ST_TO_ADDR
20565: LD_VAR 0 2
20569: PUSH
20570: FOR_TO
20571: IFFALSE 20740
// begin if hackTanksCaptured [ index ] = hackLimit then
20573: LD_EXP 66
20577: PUSH
20578: LD_VAR 0 5
20582: ARRAY
20583: PUSH
20584: LD_EXP 67
20588: EQUAL
20589: IFFALSE 20593
// break ;
20591: GO 20740
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
20593: LD_ADDR_EXP 69
20597: PUSH
20598: LD_EXP 69
20602: PPUSH
20603: LD_VAR 0 5
20607: PPUSH
20608: LD_EXP 69
20612: PUSH
20613: LD_VAR 0 5
20617: ARRAY
20618: PUSH
20619: LD_INT 1
20621: PLUS
20622: PPUSH
20623: CALL_OW 1
20627: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
20628: LD_ADDR_EXP 66
20632: PUSH
20633: LD_EXP 66
20637: PPUSH
20638: LD_VAR 0 5
20642: PUSH
20643: LD_EXP 66
20647: PUSH
20648: LD_VAR 0 5
20652: ARRAY
20653: PUSH
20654: LD_INT 1
20656: PLUS
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: PPUSH
20662: LD_VAR 0 2
20666: PUSH
20667: LD_VAR 0 4
20671: ARRAY
20672: PUSH
20673: LD_VAR 0 2
20677: PUSH
20678: LD_VAR 0 4
20682: ARRAY
20683: PPUSH
20684: CALL_OW 255
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PPUSH
20693: CALL 29322 0 3
20697: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
20698: LD_VAR 0 2
20702: PUSH
20703: LD_VAR 0 4
20707: ARRAY
20708: PPUSH
20709: LD_VAR 0 1
20713: PPUSH
20714: CALL_OW 255
20718: PPUSH
20719: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
20723: LD_VAR 0 2
20727: PUSH
20728: LD_VAR 0 4
20732: ARRAY
20733: PPUSH
20734: CALL_OW 141
// end ;
20738: GO 20570
20740: POP
20741: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20742: LD_VAR 0 1
20746: PPUSH
20747: LD_EXP 66
20751: PUSH
20752: LD_VAR 0 5
20756: ARRAY
20757: PUSH
20758: LD_INT 0
20760: PLUS
20761: PPUSH
20762: CALL_OW 505
// end ;
20766: LD_VAR 0 3
20770: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
20771: LD_INT 0
20773: PPUSH
20774: PPUSH
20775: PPUSH
20776: PPUSH
// if not hack in hackTanks then
20777: LD_VAR 0 1
20781: PUSH
20782: LD_EXP 65
20786: IN
20787: NOT
20788: IFFALSE 20792
// exit ;
20790: GO 21036
// index := GetElementIndex ( hackTanks , hack ) ;
20792: LD_ADDR_VAR 0 4
20796: PUSH
20797: LD_EXP 65
20801: PPUSH
20802: LD_VAR 0 1
20806: PPUSH
20807: CALL 29105 0 2
20811: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
20812: LD_ADDR_VAR 0 3
20816: PUSH
20817: DOUBLE
20818: LD_EXP 66
20822: PUSH
20823: LD_VAR 0 4
20827: ARRAY
20828: INC
20829: ST_TO_ADDR
20830: LD_INT 1
20832: PUSH
20833: FOR_DOWNTO
20834: IFFALSE 21010
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
20836: LD_ADDR_VAR 0 5
20840: PUSH
20841: LD_EXP 66
20845: PUSH
20846: LD_VAR 0 4
20850: ARRAY
20851: PUSH
20852: LD_VAR 0 3
20856: ARRAY
20857: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
20858: LD_VAR 0 5
20862: PUSH
20863: LD_INT 1
20865: ARRAY
20866: PPUSH
20867: CALL_OW 302
20871: NOT
20872: IFTRUE 20900
20874: PUSH
20875: LD_VAR 0 5
20879: PUSH
20880: LD_INT 1
20882: ARRAY
20883: PPUSH
20884: CALL_OW 255
20888: PUSH
20889: LD_VAR 0 1
20893: PPUSH
20894: CALL_OW 255
20898: NONEQUAL
20899: OR
20900: IFFALSE 21008
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
20902: LD_VAR 0 5
20906: PUSH
20907: LD_INT 1
20909: ARRAY
20910: PPUSH
20911: CALL_OW 305
20915: IFFALSE 20943
20917: PUSH
20918: LD_VAR 0 5
20922: PUSH
20923: LD_INT 1
20925: ARRAY
20926: PPUSH
20927: CALL_OW 255
20931: PUSH
20932: LD_VAR 0 1
20936: PPUSH
20937: CALL_OW 255
20941: EQUAL
20942: AND
20943: IFFALSE 20967
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
20945: LD_VAR 0 5
20949: PUSH
20950: LD_INT 1
20952: ARRAY
20953: PPUSH
20954: LD_VAR 0 5
20958: PUSH
20959: LD_INT 2
20961: ARRAY
20962: PPUSH
20963: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
20967: LD_ADDR_EXP 66
20971: PUSH
20972: LD_EXP 66
20976: PPUSH
20977: LD_VAR 0 4
20981: PPUSH
20982: LD_EXP 66
20986: PUSH
20987: LD_VAR 0 4
20991: ARRAY
20992: PPUSH
20993: LD_VAR 0 3
20997: PPUSH
20998: CALL_OW 3
21002: PPUSH
21003: CALL_OW 1
21007: ST_TO_ADDR
// end ; end ;
21008: GO 20833
21010: POP
21011: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21012: LD_VAR 0 1
21016: PPUSH
21017: LD_EXP 66
21021: PUSH
21022: LD_VAR 0 4
21026: ARRAY
21027: PUSH
21028: LD_INT 0
21030: PLUS
21031: PPUSH
21032: CALL_OW 505
// end ;
21036: LD_VAR 0 2
21040: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
21041: LD_INT 0
21043: PPUSH
21044: PPUSH
21045: PPUSH
21046: PPUSH
// if not hack in hackTanks then
21047: LD_VAR 0 1
21051: PUSH
21052: LD_EXP 65
21056: IN
21057: NOT
21058: IFFALSE 21062
// exit ;
21060: GO 21147
// index := GetElementIndex ( hackTanks , hack ) ;
21062: LD_ADDR_VAR 0 5
21066: PUSH
21067: LD_EXP 65
21071: PPUSH
21072: LD_VAR 0 1
21076: PPUSH
21077: CALL 29105 0 2
21081: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
21082: LD_ADDR_VAR 0 4
21086: PUSH
21087: DOUBLE
21088: LD_INT 1
21090: DEC
21091: ST_TO_ADDR
21092: LD_EXP 66
21096: PUSH
21097: LD_VAR 0 5
21101: ARRAY
21102: PUSH
21103: FOR_TO
21104: IFFALSE 21145
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
21106: LD_EXP 66
21110: PUSH
21111: LD_VAR 0 5
21115: ARRAY
21116: PUSH
21117: LD_VAR 0 4
21121: ARRAY
21122: PUSH
21123: LD_INT 1
21125: ARRAY
21126: PUSH
21127: LD_VAR 0 2
21131: EQUAL
21132: IFFALSE 21143
// KillUnit ( vehicle ) ;
21134: LD_VAR 0 2
21138: PPUSH
21139: CALL_OW 66
21143: GO 21103
21145: POP
21146: POP
// end ;
21147: LD_VAR 0 3
21151: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
21152: LD_EXP 70
21156: NOT
21157: IFFALSE 21290
21159: GO 21161
21161: DISABLE
21162: LD_INT 0
21164: PPUSH
// begin initMiner := true ;
21165: LD_ADDR_EXP 70
21169: PUSH
21170: LD_INT 1
21172: ST_TO_ADDR
// minersList := [ ] ;
21173: LD_ADDR_EXP 71
21177: PUSH
21178: EMPTY
21179: ST_TO_ADDR
// minerMinesList := [ ] ;
21180: LD_ADDR_EXP 72
21184: PUSH
21185: EMPTY
21186: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
21187: LD_ADDR_EXP 73
21191: PUSH
21192: LD_INT 10
21194: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
21195: LD_ADDR_VAR 0 1
21199: PUSH
21200: LD_INT 34
21202: PUSH
21203: LD_INT 81
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PPUSH
21210: CALL_OW 69
21214: PUSH
21215: FOR_IN
21216: IFFALSE 21288
// begin if not i in minersList then
21218: LD_VAR 0 1
21222: PUSH
21223: LD_EXP 71
21227: IN
21228: NOT
21229: IFFALSE 21286
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
21231: LD_ADDR_EXP 71
21235: PUSH
21236: LD_EXP 71
21240: PPUSH
21241: LD_EXP 71
21245: PUSH
21246: LD_INT 1
21248: PLUS
21249: PPUSH
21250: LD_VAR 0 1
21254: PPUSH
21255: CALL_OW 1
21259: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
21260: LD_ADDR_EXP 72
21264: PUSH
21265: LD_EXP 72
21269: PPUSH
21270: LD_EXP 72
21274: PUSH
21275: LD_INT 1
21277: PLUS
21278: PPUSH
21279: EMPTY
21280: PPUSH
21281: CALL_OW 1
21285: ST_TO_ADDR
// end end ;
21286: GO 21215
21288: POP
21289: POP
// end ;
21290: PPOPN 1
21292: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
21293: LD_EXP 70
21297: IFFALSE 21328
21299: PUSH
21300: LD_EXP 72
21304: PPUSH
21305: CALL 26404 0 1
21309: IFTRUE 21327
21311: PUSH
21312: LD_INT 34
21314: PUSH
21315: LD_INT 81
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: PPUSH
21322: CALL_OW 69
21326: OR
21327: AND
21328: IFFALSE 21848
21330: GO 21332
21332: DISABLE
21333: LD_INT 0
21335: PPUSH
21336: PPUSH
21337: PPUSH
21338: PPUSH
// begin enable ;
21339: ENABLE
// for i := minerMinesList downto 1 do
21340: LD_ADDR_VAR 0 1
21344: PUSH
21345: DOUBLE
21346: LD_EXP 72
21350: INC
21351: ST_TO_ADDR
21352: LD_INT 1
21354: PUSH
21355: FOR_DOWNTO
21356: IFFALSE 21846
// begin side := GetSide ( minersList [ i ] ) ;
21358: LD_ADDR_VAR 0 3
21362: PUSH
21363: LD_EXP 71
21367: PUSH
21368: LD_VAR 0 1
21372: ARRAY
21373: PPUSH
21374: CALL_OW 255
21378: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
21379: LD_EXP 71
21383: PUSH
21384: LD_VAR 0 1
21388: ARRAY
21389: PPUSH
21390: CALL_OW 300
21394: IFFALSE 21415
21396: PUSH
21397: LD_VAR 0 3
21401: PUSH
21402: LD_OWVAR 2
21406: PUSH
21407: LD_INT 9
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: IN
21414: AND
21415: IFFALSE 21448
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
21417: LD_EXP 71
21421: PUSH
21422: LD_VAR 0 1
21426: ARRAY
21427: PPUSH
21428: LD_EXP 72
21432: PUSH
21433: LD_VAR 0 1
21437: ARRAY
21438: PPUSH
21439: CALL 26404 0 1
21443: PPUSH
21444: CALL_OW 505
// if not minerMinesList [ i ] then
21448: LD_EXP 72
21452: PUSH
21453: LD_VAR 0 1
21457: ARRAY
21458: NOT
21459: IFFALSE 21463
// continue ;
21461: GO 21355
// for j := minerMinesList [ i ] downto 1 do
21463: LD_ADDR_VAR 0 2
21467: PUSH
21468: DOUBLE
21469: LD_EXP 72
21473: PUSH
21474: LD_VAR 0 1
21478: ARRAY
21479: INC
21480: ST_TO_ADDR
21481: LD_INT 1
21483: PUSH
21484: FOR_DOWNTO
21485: IFFALSE 21842
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
21487: LD_EXP 71
21491: PUSH
21492: LD_VAR 0 1
21496: ARRAY
21497: PPUSH
21498: CALL_OW 301
21502: IFTRUE 21522
21504: PUSH
21505: LD_EXP 71
21509: PUSH
21510: LD_VAR 0 1
21514: ARRAY
21515: PPUSH
21516: CALL_OW 305
21520: NOT
21521: OR
21522: IFFALSE 21613
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
21524: LD_EXP 72
21528: PUSH
21529: LD_VAR 0 1
21533: ARRAY
21534: PUSH
21535: LD_VAR 0 2
21539: ARRAY
21540: PUSH
21541: LD_INT 1
21543: ARRAY
21544: PPUSH
21545: LD_EXP 72
21549: PUSH
21550: LD_VAR 0 1
21554: ARRAY
21555: PUSH
21556: LD_VAR 0 2
21560: ARRAY
21561: PUSH
21562: LD_INT 2
21564: ARRAY
21565: PPUSH
21566: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
21570: LD_ADDR_EXP 72
21574: PUSH
21575: LD_EXP 72
21579: PPUSH
21580: LD_VAR 0 1
21584: PPUSH
21585: LD_EXP 72
21589: PUSH
21590: LD_VAR 0 1
21594: ARRAY
21595: PPUSH
21596: LD_VAR 0 2
21600: PPUSH
21601: CALL_OW 3
21605: PPUSH
21606: CALL_OW 1
21610: ST_TO_ADDR
// continue ;
21611: GO 21484
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
21613: LD_ADDR_VAR 0 4
21617: PUSH
21618: LD_EXP 72
21622: PUSH
21623: LD_VAR 0 1
21627: ARRAY
21628: PUSH
21629: LD_VAR 0 2
21633: ARRAY
21634: PUSH
21635: LD_INT 1
21637: ARRAY
21638: PPUSH
21639: LD_EXP 72
21643: PUSH
21644: LD_VAR 0 1
21648: ARRAY
21649: PUSH
21650: LD_VAR 0 2
21654: ARRAY
21655: PUSH
21656: LD_INT 2
21658: ARRAY
21659: PPUSH
21660: CALL_OW 428
21664: ST_TO_ADDR
// if not tmp then
21665: LD_VAR 0 4
21669: NOT
21670: IFFALSE 21674
// continue ;
21672: GO 21484
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
21674: LD_VAR 0 4
21678: PUSH
21679: LD_INT 81
21681: PUSH
21682: LD_VAR 0 3
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PPUSH
21691: CALL_OW 69
21695: IN
21696: IFFALSE 21746
21698: PUSH
21699: LD_EXP 72
21703: PUSH
21704: LD_VAR 0 1
21708: ARRAY
21709: PUSH
21710: LD_VAR 0 2
21714: ARRAY
21715: PUSH
21716: LD_INT 1
21718: ARRAY
21719: PPUSH
21720: LD_EXP 72
21724: PUSH
21725: LD_VAR 0 1
21729: ARRAY
21730: PUSH
21731: LD_VAR 0 2
21735: ARRAY
21736: PUSH
21737: LD_INT 2
21739: ARRAY
21740: PPUSH
21741: CALL_OW 458
21745: AND
21746: IFFALSE 21840
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
21748: LD_EXP 72
21752: PUSH
21753: LD_VAR 0 1
21757: ARRAY
21758: PUSH
21759: LD_VAR 0 2
21763: ARRAY
21764: PUSH
21765: LD_INT 1
21767: ARRAY
21768: PPUSH
21769: LD_EXP 72
21773: PUSH
21774: LD_VAR 0 1
21778: ARRAY
21779: PUSH
21780: LD_VAR 0 2
21784: ARRAY
21785: PUSH
21786: LD_INT 2
21788: ARRAY
21789: PPUSH
21790: LD_VAR 0 3
21794: PPUSH
21795: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
21799: LD_ADDR_EXP 72
21803: PUSH
21804: LD_EXP 72
21808: PPUSH
21809: LD_VAR 0 1
21813: PPUSH
21814: LD_EXP 72
21818: PUSH
21819: LD_VAR 0 1
21823: ARRAY
21824: PPUSH
21825: LD_VAR 0 2
21829: PPUSH
21830: CALL_OW 3
21834: PPUSH
21835: CALL_OW 1
21839: ST_TO_ADDR
// end ; end ;
21840: GO 21484
21842: POP
21843: POP
// end ;
21844: GO 21355
21846: POP
21847: POP
// end ;
21848: PPOPN 4
21850: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
21851: LD_INT 0
21853: PPUSH
21854: PPUSH
21855: PPUSH
21856: PPUSH
// result := false ;
21857: LD_ADDR_VAR 0 4
21861: PUSH
21862: LD_INT 0
21864: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
21865: LD_VAR 0 1
21869: PPUSH
21870: CALL_OW 264
21874: PUSH
21875: LD_INT 81
21877: EQUAL
21878: NOT
21879: IFFALSE 21883
// exit ;
21881: GO 22253
// side := GetSide ( unit ) ;
21883: LD_ADDR_VAR 0 6
21887: PUSH
21888: LD_VAR 0 1
21892: PPUSH
21893: CALL_OW 255
21897: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
21898: LD_ADDR_VAR 0 5
21902: PUSH
21903: LD_EXP 71
21907: PPUSH
21908: LD_VAR 0 1
21912: PPUSH
21913: CALL 29105 0 2
21917: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
21918: LD_EXP 72
21922: PUSH
21923: LD_VAR 0 5
21927: ARRAY
21928: PUSH
21929: LD_EXP 73
21933: GREATEREQUAL
21934: IFFALSE 21938
// exit ;
21936: GO 22253
// ComMoveXY ( unit , x , y ) ;
21938: LD_VAR 0 1
21942: PPUSH
21943: LD_VAR 0 2
21947: PPUSH
21948: LD_VAR 0 3
21952: PPUSH
21953: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21957: LD_INT 35
21959: PPUSH
21960: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
21964: LD_VAR 0 1
21968: PPUSH
21969: LD_VAR 0 2
21973: PPUSH
21974: LD_VAR 0 3
21978: PPUSH
21979: CALL 61161 0 3
21983: NOT
21984: IFFALSE 21997
21986: PUSH
21987: LD_VAR 0 1
21991: PPUSH
21992: CALL_OW 314
21996: AND
21997: IFFALSE 22001
// exit ;
21999: GO 22253
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
22001: LD_VAR 0 2
22005: PPUSH
22006: LD_VAR 0 3
22010: PPUSH
22011: CALL_OW 428
22015: PUSH
22016: LD_VAR 0 1
22020: EQUAL
22021: IFFALSE 22035
22023: PUSH
22024: LD_VAR 0 1
22028: PPUSH
22029: CALL_OW 314
22033: NOT
22034: AND
22035: IFFALSE 21957
// if MineAtPos ( x , y ) then
22037: LD_VAR 0 2
22041: PPUSH
22042: LD_VAR 0 3
22046: PPUSH
22047: CALL_OW 458
22051: IFFALSE 22055
// exit ;
22053: GO 22253
// if your_side = side then
22055: LD_OWVAR 2
22059: PUSH
22060: LD_VAR 0 6
22064: EQUAL
22065: IFFALSE 22084
// PlaySoundXY ( x , y , PlantMine ) ;
22067: LD_VAR 0 2
22071: PPUSH
22072: LD_VAR 0 3
22076: PPUSH
22077: LD_STRING PlantMine
22079: PPUSH
22080: CALL_OW 366
// repeat wait ( 1 ) ;
22084: LD_INT 1
22086: PPUSH
22087: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
22091: LD_VAR 0 2
22095: PPUSH
22096: LD_VAR 0 3
22100: PPUSH
22101: LD_VAR 0 6
22105: PPUSH
22106: LD_INT 0
22108: PPUSH
22109: CALL_OW 454
22113: IFFALSE 22084
// if MineAtPos ( x , y ) then
22115: LD_VAR 0 2
22119: PPUSH
22120: LD_VAR 0 3
22124: PPUSH
22125: CALL_OW 458
22129: IFFALSE 22245
// begin for i in minerMinesList [ index ] do
22131: LD_ADDR_VAR 0 7
22135: PUSH
22136: LD_EXP 72
22140: PUSH
22141: LD_VAR 0 5
22145: ARRAY
22146: PUSH
22147: FOR_IN
22148: IFFALSE 22190
// if i [ 1 ] = x and i [ 2 ] = y then
22150: LD_VAR 0 7
22154: PUSH
22155: LD_INT 1
22157: ARRAY
22158: PUSH
22159: LD_VAR 0 2
22163: EQUAL
22164: IFFALSE 22182
22166: PUSH
22167: LD_VAR 0 7
22171: PUSH
22172: LD_INT 2
22174: ARRAY
22175: PUSH
22176: LD_VAR 0 3
22180: EQUAL
22181: AND
22182: IFFALSE 22188
// exit ;
22184: POP
22185: POP
22186: GO 22253
22188: GO 22147
22190: POP
22191: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
22192: LD_ADDR_EXP 72
22196: PUSH
22197: LD_EXP 72
22201: PPUSH
22202: LD_VAR 0 5
22206: PUSH
22207: LD_EXP 72
22211: PUSH
22212: LD_VAR 0 5
22216: ARRAY
22217: PUSH
22218: LD_INT 1
22220: PLUS
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: PPUSH
22226: LD_VAR 0 2
22230: PUSH
22231: LD_VAR 0 3
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: PPUSH
22240: CALL 29322 0 3
22244: ST_TO_ADDR
// end ; result := true ;
22245: LD_ADDR_VAR 0 4
22249: PUSH
22250: LD_INT 1
22252: ST_TO_ADDR
// end ;
22253: LD_VAR 0 4
22257: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
22258: LD_INT 0
22260: PPUSH
22261: PPUSH
22262: PPUSH
// if not unit in minersList then
22263: LD_VAR 0 1
22267: PUSH
22268: LD_EXP 71
22272: IN
22273: NOT
22274: IFFALSE 22278
// exit ;
22276: GO 22485
// index := GetElementIndex ( minersList , unit ) ;
22278: LD_ADDR_VAR 0 6
22282: PUSH
22283: LD_EXP 71
22287: PPUSH
22288: LD_VAR 0 1
22292: PPUSH
22293: CALL 29105 0 2
22297: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
22298: LD_ADDR_VAR 0 5
22302: PUSH
22303: DOUBLE
22304: LD_EXP 72
22308: PUSH
22309: LD_VAR 0 6
22313: ARRAY
22314: INC
22315: ST_TO_ADDR
22316: LD_INT 1
22318: PUSH
22319: FOR_DOWNTO
22320: IFFALSE 22483
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
22322: LD_EXP 72
22326: PUSH
22327: LD_VAR 0 6
22331: ARRAY
22332: PUSH
22333: LD_VAR 0 5
22337: ARRAY
22338: PUSH
22339: LD_INT 1
22341: ARRAY
22342: PPUSH
22343: LD_EXP 72
22347: PUSH
22348: LD_VAR 0 6
22352: ARRAY
22353: PUSH
22354: LD_VAR 0 5
22358: ARRAY
22359: PUSH
22360: LD_INT 2
22362: ARRAY
22363: PPUSH
22364: LD_VAR 0 2
22368: PPUSH
22369: LD_VAR 0 3
22373: PPUSH
22374: CALL_OW 298
22378: PUSH
22379: LD_INT 6
22381: LESS
22382: IFFALSE 22481
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22384: LD_EXP 72
22388: PUSH
22389: LD_VAR 0 6
22393: ARRAY
22394: PUSH
22395: LD_VAR 0 5
22399: ARRAY
22400: PUSH
22401: LD_INT 1
22403: ARRAY
22404: PPUSH
22405: LD_EXP 72
22409: PUSH
22410: LD_VAR 0 6
22414: ARRAY
22415: PUSH
22416: LD_VAR 0 5
22420: ARRAY
22421: PUSH
22422: LD_INT 2
22424: ARRAY
22425: PPUSH
22426: LD_VAR 0 1
22430: PPUSH
22431: CALL_OW 255
22435: PPUSH
22436: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22440: LD_ADDR_EXP 72
22444: PUSH
22445: LD_EXP 72
22449: PPUSH
22450: LD_VAR 0 6
22454: PPUSH
22455: LD_EXP 72
22459: PUSH
22460: LD_VAR 0 6
22464: ARRAY
22465: PPUSH
22466: LD_VAR 0 5
22470: PPUSH
22471: CALL_OW 3
22475: PPUSH
22476: CALL_OW 1
22480: ST_TO_ADDR
// end ; end ;
22481: GO 22319
22483: POP
22484: POP
// end ;
22485: LD_VAR 0 4
22489: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
22490: LD_INT 0
22492: PPUSH
22493: PPUSH
22494: PPUSH
22495: PPUSH
22496: PPUSH
22497: PPUSH
22498: PPUSH
22499: PPUSH
22500: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
22501: LD_VAR 0 1
22505: PPUSH
22506: CALL_OW 264
22510: PUSH
22511: LD_INT 81
22513: EQUAL
22514: NOT
22515: IFTRUE 22530
22517: PUSH
22518: LD_VAR 0 1
22522: PUSH
22523: LD_EXP 71
22527: IN
22528: NOT
22529: OR
22530: IFFALSE 22534
// exit ;
22532: GO 22860
// index := GetElementIndex ( minersList , unit ) ;
22534: LD_ADDR_VAR 0 6
22538: PUSH
22539: LD_EXP 71
22543: PPUSH
22544: LD_VAR 0 1
22548: PPUSH
22549: CALL 29105 0 2
22553: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
22554: LD_ADDR_VAR 0 8
22558: PUSH
22559: LD_EXP 73
22563: PUSH
22564: LD_EXP 72
22568: PUSH
22569: LD_VAR 0 6
22573: ARRAY
22574: MINUS
22575: ST_TO_ADDR
// if not minesFreeAmount then
22576: LD_VAR 0 8
22580: NOT
22581: IFFALSE 22585
// exit ;
22583: GO 22860
// tmp := [ ] ;
22585: LD_ADDR_VAR 0 7
22589: PUSH
22590: EMPTY
22591: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
22592: LD_ADDR_VAR 0 5
22596: PUSH
22597: DOUBLE
22598: LD_INT 1
22600: DEC
22601: ST_TO_ADDR
22602: LD_VAR 0 8
22606: PUSH
22607: FOR_TO
22608: IFFALSE 22807
// begin _d := rand ( 0 , 5 ) ;
22610: LD_ADDR_VAR 0 11
22614: PUSH
22615: LD_INT 0
22617: PPUSH
22618: LD_INT 5
22620: PPUSH
22621: CALL_OW 12
22625: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
22626: LD_ADDR_VAR 0 12
22630: PUSH
22631: LD_INT 2
22633: PPUSH
22634: LD_INT 6
22636: PPUSH
22637: CALL_OW 12
22641: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
22642: LD_ADDR_VAR 0 9
22646: PUSH
22647: LD_VAR 0 2
22651: PPUSH
22652: LD_VAR 0 11
22656: PPUSH
22657: LD_VAR 0 12
22661: PPUSH
22662: CALL_OW 272
22666: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
22667: LD_ADDR_VAR 0 10
22671: PUSH
22672: LD_VAR 0 3
22676: PPUSH
22677: LD_VAR 0 11
22681: PPUSH
22682: LD_VAR 0 12
22686: PPUSH
22687: CALL_OW 273
22691: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
22692: LD_VAR 0 9
22696: PPUSH
22697: LD_VAR 0 10
22701: PPUSH
22702: CALL_OW 488
22706: IFFALSE 22730
22708: PUSH
22709: LD_VAR 0 9
22713: PUSH
22714: LD_VAR 0 10
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: PUSH
22723: LD_VAR 0 7
22727: IN
22728: NOT
22729: AND
22730: IFFALSE 22749
22732: PUSH
22733: LD_VAR 0 9
22737: PPUSH
22738: LD_VAR 0 10
22742: PPUSH
22743: CALL_OW 458
22747: NOT
22748: AND
22749: IFFALSE 22791
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
22751: LD_ADDR_VAR 0 7
22755: PUSH
22756: LD_VAR 0 7
22760: PPUSH
22761: LD_VAR 0 7
22765: PUSH
22766: LD_INT 1
22768: PLUS
22769: PPUSH
22770: LD_VAR 0 9
22774: PUSH
22775: LD_VAR 0 10
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: PPUSH
22784: CALL_OW 1
22788: ST_TO_ADDR
22789: GO 22805
// i := i - 1 ;
22791: LD_ADDR_VAR 0 5
22795: PUSH
22796: LD_VAR 0 5
22800: PUSH
22801: LD_INT 1
22803: MINUS
22804: ST_TO_ADDR
// end ;
22805: GO 22607
22807: POP
22808: POP
// for i in tmp do
22809: LD_ADDR_VAR 0 5
22813: PUSH
22814: LD_VAR 0 7
22818: PUSH
22819: FOR_IN
22820: IFFALSE 22858
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
22822: LD_VAR 0 1
22826: PPUSH
22827: LD_VAR 0 5
22831: PUSH
22832: LD_INT 1
22834: ARRAY
22835: PPUSH
22836: LD_VAR 0 5
22840: PUSH
22841: LD_INT 2
22843: ARRAY
22844: PPUSH
22845: CALL 21851 0 3
22849: NOT
22850: IFFALSE 22856
// exit ;
22852: POP
22853: POP
22854: GO 22860
22856: GO 22819
22858: POP
22859: POP
// end ;
22860: LD_VAR 0 4
22864: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
22865: LD_INT 0
22867: PPUSH
22868: PPUSH
22869: PPUSH
22870: PPUSH
22871: PPUSH
22872: PPUSH
22873: PPUSH
22874: PPUSH
22875: PPUSH
// if GetClass ( unit ) <> class_sniper then
22876: LD_VAR 0 1
22880: PPUSH
22881: CALL_OW 257
22885: PUSH
22886: LD_INT 5
22888: NONEQUAL
22889: IFFALSE 22893
// exit ;
22891: GO 23363
// dist := 8 ;
22893: LD_ADDR_VAR 0 5
22897: PUSH
22898: LD_INT 8
22900: ST_TO_ADDR
// viewRange := 12 ;
22901: LD_ADDR_VAR 0 8
22905: PUSH
22906: LD_INT 12
22908: ST_TO_ADDR
// side := GetSide ( unit ) ;
22909: LD_ADDR_VAR 0 6
22913: PUSH
22914: LD_VAR 0 1
22918: PPUSH
22919: CALL_OW 255
22923: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
22924: LD_INT 61
22926: PPUSH
22927: LD_VAR 0 6
22931: PPUSH
22932: CALL_OW 321
22936: PUSH
22937: LD_INT 2
22939: EQUAL
22940: IFFALSE 22950
// viewRange := 16 ;
22942: LD_ADDR_VAR 0 8
22946: PUSH
22947: LD_INT 16
22949: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
22950: LD_VAR 0 1
22954: PPUSH
22955: LD_VAR 0 2
22959: PPUSH
22960: LD_VAR 0 3
22964: PPUSH
22965: CALL_OW 297
22969: PUSH
22970: LD_VAR 0 5
22974: GREATER
22975: IFFALSE 23054
// begin ComMoveXY ( unit , x , y ) ;
22977: LD_VAR 0 1
22981: PPUSH
22982: LD_VAR 0 2
22986: PPUSH
22987: LD_VAR 0 3
22991: PPUSH
22992: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22996: LD_INT 35
22998: PPUSH
22999: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
23003: LD_VAR 0 1
23007: PPUSH
23008: LD_VAR 0 2
23012: PPUSH
23013: LD_VAR 0 3
23017: PPUSH
23018: CALL 61161 0 3
23022: NOT
23023: IFFALSE 23027
// exit ;
23025: GO 23363
// until GetDistUnitXY ( unit , x , y ) < dist ;
23027: LD_VAR 0 1
23031: PPUSH
23032: LD_VAR 0 2
23036: PPUSH
23037: LD_VAR 0 3
23041: PPUSH
23042: CALL_OW 297
23046: PUSH
23047: LD_VAR 0 5
23051: LESS
23052: IFFALSE 22996
// end ; ComTurnXY ( unit , x , y ) ;
23054: LD_VAR 0 1
23058: PPUSH
23059: LD_VAR 0 2
23063: PPUSH
23064: LD_VAR 0 3
23068: PPUSH
23069: CALL_OW 118
// repeat if Multiplayer then
23073: LD_OWVAR 4
23077: IFFALSE 23088
// wait ( 35 ) else
23079: LD_INT 35
23081: PPUSH
23082: CALL_OW 67
23086: GO 23095
// wait ( 5 ) ;
23088: LD_INT 5
23090: PPUSH
23091: CALL_OW 67
// _d := GetDir ( unit ) ;
23095: LD_ADDR_VAR 0 11
23099: PUSH
23100: LD_VAR 0 1
23104: PPUSH
23105: CALL_OW 254
23109: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
23110: LD_ADDR_VAR 0 7
23114: PUSH
23115: LD_VAR 0 1
23119: PPUSH
23120: CALL_OW 250
23124: PPUSH
23125: LD_VAR 0 1
23129: PPUSH
23130: CALL_OW 251
23134: PPUSH
23135: LD_VAR 0 2
23139: PPUSH
23140: LD_VAR 0 3
23144: PPUSH
23145: CALL 63797 0 4
23149: ST_TO_ADDR
// until dir = _d ;
23150: LD_VAR 0 7
23154: PUSH
23155: LD_VAR 0 11
23159: EQUAL
23160: IFFALSE 23073
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
23162: LD_ADDR_VAR 0 9
23166: PUSH
23167: LD_VAR 0 1
23171: PPUSH
23172: CALL_OW 250
23176: PPUSH
23177: LD_VAR 0 7
23181: PPUSH
23182: LD_VAR 0 5
23186: PPUSH
23187: CALL_OW 272
23191: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
23192: LD_ADDR_VAR 0 10
23196: PUSH
23197: LD_VAR 0 1
23201: PPUSH
23202: CALL_OW 251
23206: PPUSH
23207: LD_VAR 0 7
23211: PPUSH
23212: LD_VAR 0 5
23216: PPUSH
23217: CALL_OW 273
23221: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23222: LD_VAR 0 9
23226: PPUSH
23227: LD_VAR 0 10
23231: PPUSH
23232: CALL_OW 488
23236: NOT
23237: IFFALSE 23241
// exit ;
23239: GO 23363
// ComAnimCustom ( unit , 1 ) ;
23241: LD_VAR 0 1
23245: PPUSH
23246: LD_INT 1
23248: PPUSH
23249: CALL_OW 592
// p := 0 ;
23253: LD_ADDR_VAR 0 12
23257: PUSH
23258: LD_INT 0
23260: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
23261: LD_VAR 0 9
23265: PPUSH
23266: LD_VAR 0 10
23270: PPUSH
23271: LD_VAR 0 6
23275: PPUSH
23276: LD_VAR 0 8
23280: PPUSH
23281: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
23285: LD_INT 35
23287: PPUSH
23288: CALL_OW 67
// p := Inc ( p ) ;
23292: LD_ADDR_VAR 0 12
23296: PUSH
23297: LD_VAR 0 12
23301: PPUSH
23302: CALL 63753 0 1
23306: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
23307: LD_VAR 0 12
23311: PUSH
23312: LD_INT 3
23314: EQUAL
23315: IFTRUE 23329
23317: PUSH
23318: LD_VAR 0 1
23322: PPUSH
23323: CALL_OW 302
23327: NOT
23328: OR
23329: IFTRUE 23342
23331: PUSH
23332: LD_VAR 0 1
23336: PPUSH
23337: CALL_OW 301
23341: OR
23342: IFFALSE 23285
// RemoveSeeing ( _x , _y , side ) ;
23344: LD_VAR 0 9
23348: PPUSH
23349: LD_VAR 0 10
23353: PPUSH
23354: LD_VAR 0 6
23358: PPUSH
23359: CALL_OW 331
// end ;
23363: LD_VAR 0 4
23367: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
23368: LD_INT 0
23370: PPUSH
23371: PPUSH
23372: PPUSH
23373: PPUSH
23374: PPUSH
23375: PPUSH
23376: PPUSH
23377: PPUSH
23378: PPUSH
23379: PPUSH
23380: PPUSH
// if not unit then
23381: LD_VAR 0 1
23385: NOT
23386: IFFALSE 23390
// exit ;
23388: GO 23661
// side := GetSide ( unit ) ;
23390: LD_ADDR_VAR 0 3
23394: PUSH
23395: LD_VAR 0 1
23399: PPUSH
23400: CALL_OW 255
23404: ST_TO_ADDR
// x := GetX ( unit ) ;
23405: LD_ADDR_VAR 0 5
23409: PUSH
23410: LD_VAR 0 1
23414: PPUSH
23415: CALL_OW 250
23419: ST_TO_ADDR
// y := GetY ( unit ) ;
23420: LD_ADDR_VAR 0 6
23424: PUSH
23425: LD_VAR 0 1
23429: PPUSH
23430: CALL_OW 251
23434: ST_TO_ADDR
// r := 8 ;
23435: LD_ADDR_VAR 0 4
23439: PUSH
23440: LD_INT 8
23442: ST_TO_ADDR
// if x - r < 0 then
23443: LD_VAR 0 5
23447: PUSH
23448: LD_VAR 0 4
23452: MINUS
23453: PUSH
23454: LD_INT 0
23456: LESS
23457: IFFALSE 23469
// min_x := 0 else
23459: LD_ADDR_VAR 0 7
23463: PUSH
23464: LD_INT 0
23466: ST_TO_ADDR
23467: GO 23485
// min_x := x - r ;
23469: LD_ADDR_VAR 0 7
23473: PUSH
23474: LD_VAR 0 5
23478: PUSH
23479: LD_VAR 0 4
23483: MINUS
23484: ST_TO_ADDR
// if y - r < 0 then
23485: LD_VAR 0 6
23489: PUSH
23490: LD_VAR 0 4
23494: MINUS
23495: PUSH
23496: LD_INT 0
23498: LESS
23499: IFFALSE 23511
// min_y := 0 else
23501: LD_ADDR_VAR 0 8
23505: PUSH
23506: LD_INT 0
23508: ST_TO_ADDR
23509: GO 23527
// min_y := y - r ;
23511: LD_ADDR_VAR 0 8
23515: PUSH
23516: LD_VAR 0 6
23520: PUSH
23521: LD_VAR 0 4
23525: MINUS
23526: ST_TO_ADDR
// max_x := x + r ;
23527: LD_ADDR_VAR 0 9
23531: PUSH
23532: LD_VAR 0 5
23536: PUSH
23537: LD_VAR 0 4
23541: PLUS
23542: ST_TO_ADDR
// max_y := y + r ;
23543: LD_ADDR_VAR 0 10
23547: PUSH
23548: LD_VAR 0 6
23552: PUSH
23553: LD_VAR 0 4
23557: PLUS
23558: ST_TO_ADDR
// for _x = min_x to max_x do
23559: LD_ADDR_VAR 0 11
23563: PUSH
23564: DOUBLE
23565: LD_VAR 0 7
23569: DEC
23570: ST_TO_ADDR
23571: LD_VAR 0 9
23575: PUSH
23576: FOR_TO
23577: IFFALSE 23659
// for _y = min_y to max_y do
23579: LD_ADDR_VAR 0 12
23583: PUSH
23584: DOUBLE
23585: LD_VAR 0 8
23589: DEC
23590: ST_TO_ADDR
23591: LD_VAR 0 10
23595: PUSH
23596: FOR_TO
23597: IFFALSE 23655
// begin if not ValidHex ( _x , _y ) then
23599: LD_VAR 0 11
23603: PPUSH
23604: LD_VAR 0 12
23608: PPUSH
23609: CALL_OW 488
23613: NOT
23614: IFFALSE 23618
// continue ;
23616: GO 23596
// if MineAtPos ( _x , _y ) then
23618: LD_VAR 0 11
23622: PPUSH
23623: LD_VAR 0 12
23627: PPUSH
23628: CALL_OW 458
23632: IFFALSE 23653
// ViewMineAtPos ( _x , _y , side ) ;
23634: LD_VAR 0 11
23638: PPUSH
23639: LD_VAR 0 12
23643: PPUSH
23644: LD_VAR 0 3
23648: PPUSH
23649: CALL_OW 457
// end ;
23653: GO 23596
23655: POP
23656: POP
23657: GO 23576
23659: POP
23660: POP
// end ;
23661: LD_VAR 0 2
23665: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
23666: LD_INT 0
23668: PPUSH
23669: PPUSH
23670: PPUSH
23671: PPUSH
23672: PPUSH
23673: PPUSH
23674: PPUSH
// if not units then
23675: LD_VAR 0 1
23679: NOT
23680: IFFALSE 23684
// exit ;
23682: GO 24148
// scaners := [ ] ;
23684: LD_ADDR_VAR 0 6
23688: PUSH
23689: EMPTY
23690: ST_TO_ADDR
// for i in units do
23691: LD_ADDR_VAR 0 3
23695: PUSH
23696: LD_VAR 0 1
23700: PUSH
23701: FOR_IN
23702: IFFALSE 23859
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
23704: LD_VAR 0 3
23708: PPUSH
23709: CALL_OW 264
23713: PUSH
23714: LD_INT 11
23716: NONEQUAL
23717: IFTRUE 23731
23719: PUSH
23720: LD_VAR 0 3
23724: PPUSH
23725: CALL_OW 302
23729: NOT
23730: OR
23731: IFTRUE 23748
23733: PUSH
23734: LD_VAR 0 3
23738: PPUSH
23739: CALL_OW 110
23743: PUSH
23744: LD_INT 502
23746: EQUAL
23747: OR
23748: IFFALSE 23752
// continue ;
23750: GO 23701
// ComStop ( i ) ;
23752: LD_VAR 0 3
23756: PPUSH
23757: CALL_OW 141
// x := GetX ( i ) ;
23761: LD_ADDR_VAR 0 4
23765: PUSH
23766: LD_VAR 0 3
23770: PPUSH
23771: CALL_OW 250
23775: ST_TO_ADDR
// y := GetY ( i ) ;
23776: LD_ADDR_VAR 0 5
23780: PUSH
23781: LD_VAR 0 3
23785: PPUSH
23786: CALL_OW 251
23790: ST_TO_ADDR
// if GetSide ( i ) = your_side then
23791: LD_VAR 0 3
23795: PPUSH
23796: CALL_OW 255
23800: PUSH
23801: LD_OWVAR 2
23805: EQUAL
23806: IFFALSE 23825
// PlaySoundXY ( x , y , mineDetector ) ;
23808: LD_VAR 0 4
23812: PPUSH
23813: LD_VAR 0 5
23817: PPUSH
23818: LD_STRING mineDetector
23820: PPUSH
23821: CALL_OW 366
// scaners := Join ( scaners , i ) ;
23825: LD_ADDR_VAR 0 6
23829: PUSH
23830: LD_VAR 0 6
23834: PPUSH
23835: LD_VAR 0 3
23839: PPUSH
23840: CALL 62380 0 2
23844: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
23845: LD_VAR 0 3
23849: PPUSH
23850: LD_INT 502
23852: PPUSH
23853: CALL_OW 109
// end ;
23857: GO 23701
23859: POP
23860: POP
// if not scaners then
23861: LD_VAR 0 6
23865: NOT
23866: IFFALSE 23870
// exit ;
23868: GO 24148
// wait ( 3 ) ;
23870: LD_INT 3
23872: PPUSH
23873: CALL_OW 67
// timer := 6 ;
23877: LD_ADDR_VAR 0 7
23881: PUSH
23882: LD_INT 6
23884: ST_TO_ADDR
// repeat for i in scaners do
23885: LD_ADDR_VAR 0 3
23889: PUSH
23890: LD_VAR 0 6
23894: PUSH
23895: FOR_IN
23896: IFFALSE 24046
// begin side := GetSide ( i ) ;
23898: LD_ADDR_VAR 0 8
23902: PUSH
23903: LD_VAR 0 3
23907: PPUSH
23908: CALL_OW 255
23912: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
23913: LD_VAR 0 3
23917: PPUSH
23918: CALL_OW 302
23922: NOT
23923: IFTRUE 23936
23925: PUSH
23926: LD_VAR 0 3
23930: PPUSH
23931: CALL_OW 314
23935: OR
23936: IFTRUE 23967
23938: PUSH
23939: LD_VAR 0 3
23943: PPUSH
23944: CALL_OW 263
23948: PUSH
23949: LD_INT 1
23951: EQUAL
23952: IFFALSE 23966
23954: PUSH
23955: LD_VAR 0 3
23959: PPUSH
23960: CALL_OW 311
23964: NOT
23965: AND
23966: OR
23967: IFFALSE 24011
// begin SetUnitDisplayNumber ( i , 0 ) ;
23969: LD_VAR 0 3
23973: PPUSH
23974: LD_INT 0
23976: PPUSH
23977: CALL_OW 505
// SetTag ( i , 0 ) ;
23981: LD_VAR 0 3
23985: PPUSH
23986: LD_INT 0
23988: PPUSH
23989: CALL_OW 109
// scaners := scaners diff i ;
23993: LD_ADDR_VAR 0 6
23997: PUSH
23998: LD_VAR 0 6
24002: PUSH
24003: LD_VAR 0 3
24007: DIFF
24008: ST_TO_ADDR
// continue ;
24009: GO 23895
// end ; if side in [ your_side , 9 ] then
24011: LD_VAR 0 8
24015: PUSH
24016: LD_OWVAR 2
24020: PUSH
24021: LD_INT 9
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: IN
24028: IFFALSE 24044
// SetUnitDisplayNumber ( i , timer ) ;
24030: LD_VAR 0 3
24034: PPUSH
24035: LD_VAR 0 7
24039: PPUSH
24040: CALL_OW 505
// end ;
24044: GO 23895
24046: POP
24047: POP
// if not scaners then
24048: LD_VAR 0 6
24052: NOT
24053: IFFALSE 24057
// exit ;
24055: GO 24148
// timer := Dec ( timer ) ;
24057: LD_ADDR_VAR 0 7
24061: PUSH
24062: LD_VAR 0 7
24066: PPUSH
24067: CALL 63775 0 1
24071: ST_TO_ADDR
// wait ( 0 0$1 ) ;
24072: LD_INT 35
24074: PPUSH
24075: CALL_OW 67
// until timer = 0 ;
24079: LD_VAR 0 7
24083: PUSH
24084: LD_INT 0
24086: EQUAL
24087: IFFALSE 23885
// if not scaners then
24089: LD_VAR 0 6
24093: NOT
24094: IFFALSE 24098
// exit ;
24096: GO 24148
// for i in scaners do
24098: LD_ADDR_VAR 0 3
24102: PUSH
24103: LD_VAR 0 6
24107: PUSH
24108: FOR_IN
24109: IFFALSE 24146
// begin SetUnitDisplayNumber ( i , 0 ) ;
24111: LD_VAR 0 3
24115: PPUSH
24116: LD_INT 0
24118: PPUSH
24119: CALL_OW 505
// SetTag ( i , 0 ) ;
24123: LD_VAR 0 3
24127: PPUSH
24128: LD_INT 0
24130: PPUSH
24131: CALL_OW 109
// RevealDetectorMine ( i ) ;
24135: LD_VAR 0 3
24139: PPUSH
24140: CALL 23368 0 1
// end ;
24144: GO 24108
24146: POP
24147: POP
// end ;
24148: LD_VAR 0 2
24152: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
24153: LD_INT 0
24155: PPUSH
// if p1 = mine_detector_mode then
24156: LD_VAR 0 2
24160: PUSH
24161: LD_INT 103
24163: EQUAL
24164: IFFALSE 24175
// DetectMine ( units ) ;
24166: LD_VAR 0 1
24170: PPUSH
24171: CALL 23666 0 1
// end ; end_of_file
24175: LD_VAR 0 7
24179: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24180: LD_INT 0
24182: PPUSH
24183: PPUSH
// if exist_mode then
24184: LD_VAR 0 2
24188: IFFALSE 24234
// begin unit := CreateCharacter ( prefix & ident ) ;
24190: LD_ADDR_VAR 0 5
24194: PUSH
24195: LD_VAR 0 3
24199: PUSH
24200: LD_VAR 0 1
24204: STR
24205: PPUSH
24206: CALL_OW 34
24210: ST_TO_ADDR
// if unit then
24211: LD_VAR 0 5
24215: IFFALSE 24232
// DeleteCharacters ( prefix & ident ) ;
24217: LD_VAR 0 3
24221: PUSH
24222: LD_VAR 0 1
24226: STR
24227: PPUSH
24228: CALL_OW 40
// end else
24232: GO 24249
// unit := NewCharacter ( ident ) ;
24234: LD_ADDR_VAR 0 5
24238: PUSH
24239: LD_VAR 0 1
24243: PPUSH
24244: CALL_OW 25
24248: ST_TO_ADDR
// result := unit ;
24249: LD_ADDR_VAR 0 4
24253: PUSH
24254: LD_VAR 0 5
24258: ST_TO_ADDR
// end ;
24259: LD_VAR 0 4
24263: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
24264: LD_INT 0
24266: PPUSH
24267: PPUSH
// if exist_mode then
24268: LD_VAR 0 2
24272: IFFALSE 24297
// unit := CreateCharacter ( prefix & ident ) else
24274: LD_ADDR_VAR 0 5
24278: PUSH
24279: LD_VAR 0 3
24283: PUSH
24284: LD_VAR 0 1
24288: STR
24289: PPUSH
24290: CALL_OW 34
24294: ST_TO_ADDR
24295: GO 24312
// unit := NewCharacter ( ident ) ;
24297: LD_ADDR_VAR 0 5
24301: PUSH
24302: LD_VAR 0 1
24306: PPUSH
24307: CALL_OW 25
24311: ST_TO_ADDR
// result := unit ;
24312: LD_ADDR_VAR 0 4
24316: PUSH
24317: LD_VAR 0 5
24321: ST_TO_ADDR
// end ;
24322: LD_VAR 0 4
24326: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24327: LD_INT 0
24329: PPUSH
24330: PPUSH
// if not side or not nation then
24331: LD_VAR 0 1
24335: NOT
24336: IFTRUE 24345
24338: PUSH
24339: LD_VAR 0 2
24343: NOT
24344: OR
24345: IFFALSE 24349
// exit ;
24347: GO 25143
// case nation of nation_american :
24349: LD_VAR 0 2
24353: PUSH
24354: LD_INT 1
24356: DOUBLE
24357: EQUAL
24358: IFTRUE 24362
24360: GO 24584
24362: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
24363: LD_ADDR_VAR 0 4
24367: PUSH
24368: LD_INT 35
24370: PUSH
24371: LD_INT 45
24373: PUSH
24374: LD_INT 46
24376: PUSH
24377: LD_INT 47
24379: PUSH
24380: LD_INT 82
24382: PUSH
24383: LD_INT 83
24385: PUSH
24386: LD_INT 84
24388: PUSH
24389: LD_INT 85
24391: PUSH
24392: LD_INT 86
24394: PUSH
24395: LD_INT 1
24397: PUSH
24398: LD_INT 2
24400: PUSH
24401: LD_INT 6
24403: PUSH
24404: LD_INT 15
24406: PUSH
24407: LD_INT 16
24409: PUSH
24410: LD_INT 7
24412: PUSH
24413: LD_INT 12
24415: PUSH
24416: LD_INT 13
24418: PUSH
24419: LD_INT 10
24421: PUSH
24422: LD_INT 14
24424: PUSH
24425: LD_INT 20
24427: PUSH
24428: LD_INT 21
24430: PUSH
24431: LD_INT 22
24433: PUSH
24434: LD_INT 25
24436: PUSH
24437: LD_INT 32
24439: PUSH
24440: LD_INT 27
24442: PUSH
24443: LD_INT 36
24445: PUSH
24446: LD_INT 69
24448: PUSH
24449: LD_INT 39
24451: PUSH
24452: LD_INT 34
24454: PUSH
24455: LD_INT 40
24457: PUSH
24458: LD_INT 48
24460: PUSH
24461: LD_INT 49
24463: PUSH
24464: LD_INT 50
24466: PUSH
24467: LD_INT 51
24469: PUSH
24470: LD_INT 52
24472: PUSH
24473: LD_INT 53
24475: PUSH
24476: LD_INT 54
24478: PUSH
24479: LD_INT 55
24481: PUSH
24482: LD_INT 56
24484: PUSH
24485: LD_INT 57
24487: PUSH
24488: LD_INT 58
24490: PUSH
24491: LD_INT 59
24493: PUSH
24494: LD_INT 60
24496: PUSH
24497: LD_INT 61
24499: PUSH
24500: LD_INT 62
24502: PUSH
24503: LD_INT 80
24505: PUSH
24506: LD_INT 82
24508: PUSH
24509: LD_INT 83
24511: PUSH
24512: LD_INT 84
24514: PUSH
24515: LD_INT 85
24517: PUSH
24518: LD_INT 86
24520: PUSH
24521: LD_INT 90
24523: PUSH
24524: LD_INT 93
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: ST_TO_ADDR
24582: GO 25065
24584: LD_INT 2
24586: DOUBLE
24587: EQUAL
24588: IFTRUE 24592
24590: GO 24826
24592: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
24593: LD_ADDR_VAR 0 4
24597: PUSH
24598: LD_INT 35
24600: PUSH
24601: LD_INT 45
24603: PUSH
24604: LD_INT 46
24606: PUSH
24607: LD_INT 47
24609: PUSH
24610: LD_INT 82
24612: PUSH
24613: LD_INT 83
24615: PUSH
24616: LD_INT 84
24618: PUSH
24619: LD_INT 85
24621: PUSH
24622: LD_INT 87
24624: PUSH
24625: LD_INT 70
24627: PUSH
24628: LD_INT 1
24630: PUSH
24631: LD_INT 11
24633: PUSH
24634: LD_INT 3
24636: PUSH
24637: LD_INT 4
24639: PUSH
24640: LD_INT 5
24642: PUSH
24643: LD_INT 6
24645: PUSH
24646: LD_INT 15
24648: PUSH
24649: LD_INT 18
24651: PUSH
24652: LD_INT 7
24654: PUSH
24655: LD_INT 17
24657: PUSH
24658: LD_INT 8
24660: PUSH
24661: LD_INT 20
24663: PUSH
24664: LD_INT 21
24666: PUSH
24667: LD_INT 22
24669: PUSH
24670: LD_INT 72
24672: PUSH
24673: LD_INT 26
24675: PUSH
24676: LD_INT 69
24678: PUSH
24679: LD_INT 39
24681: PUSH
24682: LD_INT 40
24684: PUSH
24685: LD_INT 41
24687: PUSH
24688: LD_INT 42
24690: PUSH
24691: LD_INT 43
24693: PUSH
24694: LD_INT 48
24696: PUSH
24697: LD_INT 49
24699: PUSH
24700: LD_INT 50
24702: PUSH
24703: LD_INT 51
24705: PUSH
24706: LD_INT 52
24708: PUSH
24709: LD_INT 53
24711: PUSH
24712: LD_INT 54
24714: PUSH
24715: LD_INT 55
24717: PUSH
24718: LD_INT 56
24720: PUSH
24721: LD_INT 60
24723: PUSH
24724: LD_INT 61
24726: PUSH
24727: LD_INT 62
24729: PUSH
24730: LD_INT 66
24732: PUSH
24733: LD_INT 67
24735: PUSH
24736: LD_INT 68
24738: PUSH
24739: LD_INT 81
24741: PUSH
24742: LD_INT 82
24744: PUSH
24745: LD_INT 83
24747: PUSH
24748: LD_INT 84
24750: PUSH
24751: LD_INT 85
24753: PUSH
24754: LD_INT 87
24756: PUSH
24757: LD_INT 88
24759: PUSH
24760: LD_INT 92
24762: PUSH
24763: LD_INT 94
24765: PUSH
24766: EMPTY
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: ST_TO_ADDR
24824: GO 25065
24826: LD_INT 3
24828: DOUBLE
24829: EQUAL
24830: IFTRUE 24834
24832: GO 25064
24834: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
24835: LD_ADDR_VAR 0 4
24839: PUSH
24840: LD_INT 46
24842: PUSH
24843: LD_INT 47
24845: PUSH
24846: LD_INT 1
24848: PUSH
24849: LD_INT 2
24851: PUSH
24852: LD_INT 82
24854: PUSH
24855: LD_INT 83
24857: PUSH
24858: LD_INT 84
24860: PUSH
24861: LD_INT 85
24863: PUSH
24864: LD_INT 86
24866: PUSH
24867: LD_INT 11
24869: PUSH
24870: LD_INT 9
24872: PUSH
24873: LD_INT 20
24875: PUSH
24876: LD_INT 19
24878: PUSH
24879: LD_INT 21
24881: PUSH
24882: LD_INT 24
24884: PUSH
24885: LD_INT 22
24887: PUSH
24888: LD_INT 25
24890: PUSH
24891: LD_INT 28
24893: PUSH
24894: LD_INT 29
24896: PUSH
24897: LD_INT 30
24899: PUSH
24900: LD_INT 31
24902: PUSH
24903: LD_INT 37
24905: PUSH
24906: LD_INT 38
24908: PUSH
24909: LD_INT 32
24911: PUSH
24912: LD_INT 27
24914: PUSH
24915: LD_INT 33
24917: PUSH
24918: LD_INT 69
24920: PUSH
24921: LD_INT 39
24923: PUSH
24924: LD_INT 34
24926: PUSH
24927: LD_INT 40
24929: PUSH
24930: LD_INT 71
24932: PUSH
24933: LD_INT 23
24935: PUSH
24936: LD_INT 44
24938: PUSH
24939: LD_INT 48
24941: PUSH
24942: LD_INT 49
24944: PUSH
24945: LD_INT 50
24947: PUSH
24948: LD_INT 51
24950: PUSH
24951: LD_INT 52
24953: PUSH
24954: LD_INT 53
24956: PUSH
24957: LD_INT 54
24959: PUSH
24960: LD_INT 55
24962: PUSH
24963: LD_INT 56
24965: PUSH
24966: LD_INT 57
24968: PUSH
24969: LD_INT 58
24971: PUSH
24972: LD_INT 59
24974: PUSH
24975: LD_INT 63
24977: PUSH
24978: LD_INT 64
24980: PUSH
24981: LD_INT 65
24983: PUSH
24984: LD_INT 82
24986: PUSH
24987: LD_INT 83
24989: PUSH
24990: LD_INT 84
24992: PUSH
24993: LD_INT 85
24995: PUSH
24996: LD_INT 86
24998: PUSH
24999: LD_INT 89
25001: PUSH
25002: LD_INT 91
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: ST_TO_ADDR
25062: GO 25065
25064: POP
// if state > - 1 and state < 3 then
25065: LD_VAR 0 3
25069: PUSH
25070: LD_INT 1
25072: NEG
25073: GREATER
25074: IFFALSE 25086
25076: PUSH
25077: LD_VAR 0 3
25081: PUSH
25082: LD_INT 3
25084: LESS
25085: AND
25086: IFFALSE 25143
// for i in result do
25088: LD_ADDR_VAR 0 5
25092: PUSH
25093: LD_VAR 0 4
25097: PUSH
25098: FOR_IN
25099: IFFALSE 25141
// if GetTech ( i , side ) <> state then
25101: LD_VAR 0 5
25105: PPUSH
25106: LD_VAR 0 1
25110: PPUSH
25111: CALL_OW 321
25115: PUSH
25116: LD_VAR 0 3
25120: NONEQUAL
25121: IFFALSE 25139
// result := result diff i ;
25123: LD_ADDR_VAR 0 4
25127: PUSH
25128: LD_VAR 0 4
25132: PUSH
25133: LD_VAR 0 5
25137: DIFF
25138: ST_TO_ADDR
25139: GO 25098
25141: POP
25142: POP
// end ;
25143: LD_VAR 0 4
25147: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25148: LD_INT 0
25150: PPUSH
25151: PPUSH
25152: PPUSH
// result := true ;
25153: LD_ADDR_VAR 0 3
25157: PUSH
25158: LD_INT 1
25160: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25161: LD_ADDR_VAR 0 5
25165: PUSH
25166: LD_VAR 0 2
25170: PPUSH
25171: CALL_OW 480
25175: ST_TO_ADDR
// if not tmp then
25176: LD_VAR 0 5
25180: NOT
25181: IFFALSE 25185
// exit ;
25183: GO 25234
// for i in tmp do
25185: LD_ADDR_VAR 0 4
25189: PUSH
25190: LD_VAR 0 5
25194: PUSH
25195: FOR_IN
25196: IFFALSE 25232
// if GetTech ( i , side ) <> state_researched then
25198: LD_VAR 0 4
25202: PPUSH
25203: LD_VAR 0 1
25207: PPUSH
25208: CALL_OW 321
25212: PUSH
25213: LD_INT 2
25215: NONEQUAL
25216: IFFALSE 25230
// begin result := false ;
25218: LD_ADDR_VAR 0 3
25222: PUSH
25223: LD_INT 0
25225: ST_TO_ADDR
// exit ;
25226: POP
25227: POP
25228: GO 25234
// end ;
25230: GO 25195
25232: POP
25233: POP
// end ;
25234: LD_VAR 0 3
25238: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25239: LD_INT 0
25241: PPUSH
25242: PPUSH
25243: PPUSH
25244: PPUSH
25245: PPUSH
25246: PPUSH
25247: PPUSH
25248: PPUSH
25249: PPUSH
25250: PPUSH
25251: PPUSH
25252: PPUSH
25253: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25254: LD_VAR 0 1
25258: NOT
25259: IFTRUE 25276
25261: PUSH
25262: LD_VAR 0 1
25266: PPUSH
25267: CALL_OW 257
25271: PUSH
25272: LD_INT 9
25274: NONEQUAL
25275: OR
25276: IFFALSE 25280
// exit ;
25278: GO 25859
// side := GetSide ( unit ) ;
25280: LD_ADDR_VAR 0 9
25284: PUSH
25285: LD_VAR 0 1
25289: PPUSH
25290: CALL_OW 255
25294: ST_TO_ADDR
// tech_space := tech_spacanom ;
25295: LD_ADDR_VAR 0 12
25299: PUSH
25300: LD_INT 29
25302: ST_TO_ADDR
// tech_time := tech_taurad ;
25303: LD_ADDR_VAR 0 13
25307: PUSH
25308: LD_INT 28
25310: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25311: LD_ADDR_VAR 0 11
25315: PUSH
25316: LD_VAR 0 1
25320: PPUSH
25321: CALL_OW 310
25325: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25326: LD_VAR 0 11
25330: PPUSH
25331: CALL_OW 247
25335: PUSH
25336: LD_INT 2
25338: EQUAL
25339: IFFALSE 25343
// exit ;
25341: GO 25859
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25343: LD_ADDR_VAR 0 8
25347: PUSH
25348: LD_INT 81
25350: PUSH
25351: LD_VAR 0 9
25355: PUSH
25356: EMPTY
25357: LIST
25358: LIST
25359: PUSH
25360: LD_INT 3
25362: PUSH
25363: LD_INT 21
25365: PUSH
25366: LD_INT 3
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PPUSH
25381: CALL_OW 69
25385: ST_TO_ADDR
// if not tmp then
25386: LD_VAR 0 8
25390: NOT
25391: IFFALSE 25395
// exit ;
25393: GO 25859
// if in_unit then
25395: LD_VAR 0 11
25399: IFFALSE 25423
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25401: LD_ADDR_VAR 0 10
25405: PUSH
25406: LD_VAR 0 8
25410: PPUSH
25411: LD_VAR 0 11
25415: PPUSH
25416: CALL_OW 74
25420: ST_TO_ADDR
25421: GO 25443
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25423: LD_ADDR_VAR 0 10
25427: PUSH
25428: LD_VAR 0 8
25432: PPUSH
25433: LD_VAR 0 1
25437: PPUSH
25438: CALL_OW 74
25442: ST_TO_ADDR
// if not enemy then
25443: LD_VAR 0 10
25447: NOT
25448: IFFALSE 25452
// exit ;
25450: GO 25859
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25452: LD_VAR 0 11
25456: IFFALSE 25478
25458: PUSH
25459: LD_VAR 0 11
25463: PPUSH
25464: LD_VAR 0 10
25468: PPUSH
25469: CALL_OW 296
25473: PUSH
25474: LD_INT 13
25476: GREATER
25477: AND
25478: IFTRUE 25500
25480: PUSH
25481: LD_VAR 0 1
25485: PPUSH
25486: LD_VAR 0 10
25490: PPUSH
25491: CALL_OW 296
25495: PUSH
25496: LD_INT 12
25498: GREATER
25499: OR
25500: IFFALSE 25504
// exit ;
25502: GO 25859
// missile := [ 1 ] ;
25504: LD_ADDR_VAR 0 14
25508: PUSH
25509: LD_INT 1
25511: PUSH
25512: EMPTY
25513: LIST
25514: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25515: LD_VAR 0 9
25519: PPUSH
25520: LD_VAR 0 12
25524: PPUSH
25525: CALL_OW 325
25529: IFFALSE 25558
// missile := Replace ( missile , missile + 1 , 2 ) ;
25531: LD_ADDR_VAR 0 14
25535: PUSH
25536: LD_VAR 0 14
25540: PPUSH
25541: LD_VAR 0 14
25545: PUSH
25546: LD_INT 1
25548: PLUS
25549: PPUSH
25550: LD_INT 2
25552: PPUSH
25553: CALL_OW 1
25557: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25558: LD_VAR 0 9
25562: PPUSH
25563: LD_VAR 0 13
25567: PPUSH
25568: CALL_OW 325
25572: IFFALSE 25596
25574: PUSH
25575: LD_VAR 0 10
25579: PPUSH
25580: CALL_OW 255
25584: PPUSH
25585: LD_VAR 0 13
25589: PPUSH
25590: CALL_OW 325
25594: NOT
25595: AND
25596: IFFALSE 25625
// missile := Replace ( missile , missile + 1 , 3 ) ;
25598: LD_ADDR_VAR 0 14
25602: PUSH
25603: LD_VAR 0 14
25607: PPUSH
25608: LD_VAR 0 14
25612: PUSH
25613: LD_INT 1
25615: PLUS
25616: PPUSH
25617: LD_INT 3
25619: PPUSH
25620: CALL_OW 1
25624: ST_TO_ADDR
// if missile < 2 then
25625: LD_VAR 0 14
25629: PUSH
25630: LD_INT 2
25632: LESS
25633: IFFALSE 25637
// exit ;
25635: GO 25859
// x := GetX ( enemy ) ;
25637: LD_ADDR_VAR 0 4
25641: PUSH
25642: LD_VAR 0 10
25646: PPUSH
25647: CALL_OW 250
25651: ST_TO_ADDR
// y := GetY ( enemy ) ;
25652: LD_ADDR_VAR 0 5
25656: PUSH
25657: LD_VAR 0 10
25661: PPUSH
25662: CALL_OW 251
25666: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25667: LD_ADDR_VAR 0 6
25671: PUSH
25672: LD_VAR 0 4
25676: PUSH
25677: LD_INT 1
25679: NEG
25680: PPUSH
25681: LD_INT 1
25683: PPUSH
25684: CALL_OW 12
25688: PLUS
25689: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25690: LD_ADDR_VAR 0 7
25694: PUSH
25695: LD_VAR 0 5
25699: PUSH
25700: LD_INT 1
25702: NEG
25703: PPUSH
25704: LD_INT 1
25706: PPUSH
25707: CALL_OW 12
25711: PLUS
25712: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25713: LD_VAR 0 6
25717: PPUSH
25718: LD_VAR 0 7
25722: PPUSH
25723: CALL_OW 488
25727: NOT
25728: IFFALSE 25750
// begin _x := x ;
25730: LD_ADDR_VAR 0 6
25734: PUSH
25735: LD_VAR 0 4
25739: ST_TO_ADDR
// _y := y ;
25740: LD_ADDR_VAR 0 7
25744: PUSH
25745: LD_VAR 0 5
25749: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25750: LD_ADDR_VAR 0 3
25754: PUSH
25755: LD_INT 1
25757: PPUSH
25758: LD_VAR 0 14
25762: PPUSH
25763: CALL_OW 12
25767: ST_TO_ADDR
// case i of 1 :
25768: LD_VAR 0 3
25772: PUSH
25773: LD_INT 1
25775: DOUBLE
25776: EQUAL
25777: IFTRUE 25781
25779: GO 25798
25781: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25782: LD_VAR 0 1
25786: PPUSH
25787: LD_VAR 0 10
25791: PPUSH
25792: CALL_OW 115
25796: GO 25859
25798: LD_INT 2
25800: DOUBLE
25801: EQUAL
25802: IFTRUE 25806
25804: GO 25828
25806: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25807: LD_VAR 0 1
25811: PPUSH
25812: LD_VAR 0 6
25816: PPUSH
25817: LD_VAR 0 7
25821: PPUSH
25822: CALL_OW 153
25826: GO 25859
25828: LD_INT 3
25830: DOUBLE
25831: EQUAL
25832: IFTRUE 25836
25834: GO 25858
25836: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25837: LD_VAR 0 1
25841: PPUSH
25842: LD_VAR 0 6
25846: PPUSH
25847: LD_VAR 0 7
25851: PPUSH
25852: CALL_OW 154
25856: GO 25859
25858: POP
// end ;
25859: LD_VAR 0 2
25863: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25864: LD_INT 0
25866: PPUSH
25867: PPUSH
25868: PPUSH
25869: PPUSH
25870: PPUSH
25871: PPUSH
// if not unit or not building then
25872: LD_VAR 0 1
25876: NOT
25877: IFTRUE 25886
25879: PUSH
25880: LD_VAR 0 2
25884: NOT
25885: OR
25886: IFFALSE 25890
// exit ;
25888: GO 26048
// x := GetX ( building ) ;
25890: LD_ADDR_VAR 0 5
25894: PUSH
25895: LD_VAR 0 2
25899: PPUSH
25900: CALL_OW 250
25904: ST_TO_ADDR
// y := GetY ( building ) ;
25905: LD_ADDR_VAR 0 6
25909: PUSH
25910: LD_VAR 0 2
25914: PPUSH
25915: CALL_OW 251
25919: ST_TO_ADDR
// for i := 0 to 5 do
25920: LD_ADDR_VAR 0 4
25924: PUSH
25925: DOUBLE
25926: LD_INT 0
25928: DEC
25929: ST_TO_ADDR
25930: LD_INT 5
25932: PUSH
25933: FOR_TO
25934: IFFALSE 26046
// begin _x := ShiftX ( x , i , 3 ) ;
25936: LD_ADDR_VAR 0 7
25940: PUSH
25941: LD_VAR 0 5
25945: PPUSH
25946: LD_VAR 0 4
25950: PPUSH
25951: LD_INT 3
25953: PPUSH
25954: CALL_OW 272
25958: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25959: LD_ADDR_VAR 0 8
25963: PUSH
25964: LD_VAR 0 6
25968: PPUSH
25969: LD_VAR 0 4
25973: PPUSH
25974: LD_INT 3
25976: PPUSH
25977: CALL_OW 273
25981: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25982: LD_VAR 0 7
25986: PPUSH
25987: LD_VAR 0 8
25991: PPUSH
25992: CALL_OW 488
25996: NOT
25997: IFFALSE 26001
// continue ;
25999: GO 25933
// if HexInfo ( _x , _y ) = 0 then
26001: LD_VAR 0 7
26005: PPUSH
26006: LD_VAR 0 8
26010: PPUSH
26011: CALL_OW 428
26015: PUSH
26016: LD_INT 0
26018: EQUAL
26019: IFFALSE 26044
// begin ComMoveXY ( unit , _x , _y ) ;
26021: LD_VAR 0 1
26025: PPUSH
26026: LD_VAR 0 7
26030: PPUSH
26031: LD_VAR 0 8
26035: PPUSH
26036: CALL_OW 111
// exit ;
26040: POP
26041: POP
26042: GO 26048
// end ; end ;
26044: GO 25933
26046: POP
26047: POP
// end ;
26048: LD_VAR 0 3
26052: RET
// export function ScanBase ( side , base_area ) ; begin
26053: LD_INT 0
26055: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26056: LD_ADDR_VAR 0 3
26060: PUSH
26061: LD_VAR 0 2
26065: PPUSH
26066: LD_INT 81
26068: PUSH
26069: LD_VAR 0 1
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: PPUSH
26078: CALL_OW 70
26082: ST_TO_ADDR
// end ;
26083: LD_VAR 0 3
26087: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26088: LD_INT 0
26090: PPUSH
26091: PPUSH
26092: PPUSH
26093: PPUSH
// result := false ;
26094: LD_ADDR_VAR 0 2
26098: PUSH
26099: LD_INT 0
26101: ST_TO_ADDR
// side := GetSide ( unit ) ;
26102: LD_ADDR_VAR 0 3
26106: PUSH
26107: LD_VAR 0 1
26111: PPUSH
26112: CALL_OW 255
26116: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26117: LD_ADDR_VAR 0 4
26121: PUSH
26122: LD_VAR 0 1
26126: PPUSH
26127: CALL_OW 248
26131: ST_TO_ADDR
// case nat of 1 :
26132: LD_VAR 0 4
26136: PUSH
26137: LD_INT 1
26139: DOUBLE
26140: EQUAL
26141: IFTRUE 26145
26143: GO 26156
26145: POP
// tech := tech_lassight ; 2 :
26146: LD_ADDR_VAR 0 5
26150: PUSH
26151: LD_INT 12
26153: ST_TO_ADDR
26154: GO 26195
26156: LD_INT 2
26158: DOUBLE
26159: EQUAL
26160: IFTRUE 26164
26162: GO 26175
26164: POP
// tech := tech_mortar ; 3 :
26165: LD_ADDR_VAR 0 5
26169: PUSH
26170: LD_INT 41
26172: ST_TO_ADDR
26173: GO 26195
26175: LD_INT 3
26177: DOUBLE
26178: EQUAL
26179: IFTRUE 26183
26181: GO 26194
26183: POP
// tech := tech_bazooka ; end ;
26184: LD_ADDR_VAR 0 5
26188: PUSH
26189: LD_INT 44
26191: ST_TO_ADDR
26192: GO 26195
26194: POP
// if Researched ( side , tech ) then
26195: LD_VAR 0 3
26199: PPUSH
26200: LD_VAR 0 5
26204: PPUSH
26205: CALL_OW 325
26209: IFFALSE 26236
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26211: LD_ADDR_VAR 0 2
26215: PUSH
26216: LD_INT 5
26218: PUSH
26219: LD_INT 8
26221: PUSH
26222: LD_INT 9
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: LIST
26229: PUSH
26230: LD_VAR 0 4
26234: ARRAY
26235: ST_TO_ADDR
// end ;
26236: LD_VAR 0 2
26240: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26241: LD_INT 0
26243: PPUSH
26244: PPUSH
26245: PPUSH
// if not mines then
26246: LD_VAR 0 2
26250: NOT
26251: IFFALSE 26255
// exit ;
26253: GO 26399
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26255: LD_ADDR_VAR 0 5
26259: PUSH
26260: LD_INT 81
26262: PUSH
26263: LD_VAR 0 1
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: LD_INT 3
26274: PUSH
26275: LD_INT 21
26277: PUSH
26278: LD_INT 3
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PPUSH
26293: CALL_OW 69
26297: ST_TO_ADDR
// for i in mines do
26298: LD_ADDR_VAR 0 4
26302: PUSH
26303: LD_VAR 0 2
26307: PUSH
26308: FOR_IN
26309: IFFALSE 26397
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26311: LD_VAR 0 4
26315: PUSH
26316: LD_INT 1
26318: ARRAY
26319: PPUSH
26320: LD_VAR 0 4
26324: PUSH
26325: LD_INT 2
26327: ARRAY
26328: PPUSH
26329: CALL_OW 458
26333: NOT
26334: IFFALSE 26338
// continue ;
26336: GO 26308
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26338: LD_VAR 0 4
26342: PUSH
26343: LD_INT 1
26345: ARRAY
26346: PPUSH
26347: LD_VAR 0 4
26351: PUSH
26352: LD_INT 2
26354: ARRAY
26355: PPUSH
26356: CALL_OW 428
26360: PUSH
26361: LD_VAR 0 5
26365: IN
26366: IFFALSE 26395
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26368: LD_VAR 0 4
26372: PUSH
26373: LD_INT 1
26375: ARRAY
26376: PPUSH
26377: LD_VAR 0 4
26381: PUSH
26382: LD_INT 2
26384: ARRAY
26385: PPUSH
26386: LD_VAR 0 1
26390: PPUSH
26391: CALL_OW 456
// end ;
26395: GO 26308
26397: POP
26398: POP
// end ;
26399: LD_VAR 0 3
26403: RET
// export function Count ( array ) ; begin
26404: LD_INT 0
26406: PPUSH
// result := array + 0 ;
26407: LD_ADDR_VAR 0 2
26411: PUSH
26412: LD_VAR 0 1
26416: PUSH
26417: LD_INT 0
26419: PLUS
26420: ST_TO_ADDR
// end ;
26421: LD_VAR 0 2
26425: RET
// export function IsEmpty ( building ) ; begin
26426: LD_INT 0
26428: PPUSH
// if not building then
26429: LD_VAR 0 1
26433: NOT
26434: IFFALSE 26438
// exit ;
26436: GO 26481
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26438: LD_ADDR_VAR 0 2
26442: PUSH
26443: LD_VAR 0 1
26447: PUSH
26448: LD_INT 22
26450: PUSH
26451: LD_VAR 0 1
26455: PPUSH
26456: CALL_OW 255
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: LD_INT 58
26467: PUSH
26468: EMPTY
26469: LIST
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PPUSH
26475: CALL_OW 69
26479: IN
26480: ST_TO_ADDR
// end ;
26481: LD_VAR 0 2
26485: RET
// export function IsNotFull ( building ) ; var places ; begin
26486: LD_INT 0
26488: PPUSH
26489: PPUSH
// if not building then
26490: LD_VAR 0 1
26494: NOT
26495: IFFALSE 26499
// exit ;
26497: GO 26527
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
26499: LD_ADDR_VAR 0 2
26503: PUSH
26504: LD_VAR 0 1
26508: PPUSH
26509: LD_INT 3
26511: PUSH
26512: LD_INT 62
26514: PUSH
26515: EMPTY
26516: LIST
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PPUSH
26522: CALL_OW 72
26526: ST_TO_ADDR
// end ;
26527: LD_VAR 0 2
26531: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26532: LD_INT 0
26534: PPUSH
26535: PPUSH
26536: PPUSH
26537: PPUSH
// tmp := [ ] ;
26538: LD_ADDR_VAR 0 3
26542: PUSH
26543: EMPTY
26544: ST_TO_ADDR
// list := [ ] ;
26545: LD_ADDR_VAR 0 5
26549: PUSH
26550: EMPTY
26551: ST_TO_ADDR
// for i = 16 to 25 do
26552: LD_ADDR_VAR 0 4
26556: PUSH
26557: DOUBLE
26558: LD_INT 16
26560: DEC
26561: ST_TO_ADDR
26562: LD_INT 25
26564: PUSH
26565: FOR_TO
26566: IFFALSE 26639
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26568: LD_ADDR_VAR 0 3
26572: PUSH
26573: LD_VAR 0 3
26577: PUSH
26578: LD_INT 22
26580: PUSH
26581: LD_VAR 0 1
26585: PPUSH
26586: CALL_OW 255
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: LD_INT 91
26597: PUSH
26598: LD_VAR 0 1
26602: PUSH
26603: LD_INT 6
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 30
26613: PUSH
26614: LD_VAR 0 4
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: LIST
26627: PUSH
26628: EMPTY
26629: LIST
26630: PPUSH
26631: CALL_OW 69
26635: ADD
26636: ST_TO_ADDR
26637: GO 26565
26639: POP
26640: POP
// for i = 1 to tmp do
26641: LD_ADDR_VAR 0 4
26645: PUSH
26646: DOUBLE
26647: LD_INT 1
26649: DEC
26650: ST_TO_ADDR
26651: LD_VAR 0 3
26655: PUSH
26656: FOR_TO
26657: IFFALSE 26745
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26659: LD_ADDR_VAR 0 5
26663: PUSH
26664: LD_VAR 0 5
26668: PUSH
26669: LD_VAR 0 3
26673: PUSH
26674: LD_VAR 0 4
26678: ARRAY
26679: PPUSH
26680: CALL_OW 266
26684: PUSH
26685: LD_VAR 0 3
26689: PUSH
26690: LD_VAR 0 4
26694: ARRAY
26695: PPUSH
26696: CALL_OW 250
26700: PUSH
26701: LD_VAR 0 3
26705: PUSH
26706: LD_VAR 0 4
26710: ARRAY
26711: PPUSH
26712: CALL_OW 251
26716: PUSH
26717: LD_VAR 0 3
26721: PUSH
26722: LD_VAR 0 4
26726: ARRAY
26727: PPUSH
26728: CALL_OW 254
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: PUSH
26739: EMPTY
26740: LIST
26741: ADD
26742: ST_TO_ADDR
26743: GO 26656
26745: POP
26746: POP
// result := list ;
26747: LD_ADDR_VAR 0 2
26751: PUSH
26752: LD_VAR 0 5
26756: ST_TO_ADDR
// end ;
26757: LD_VAR 0 2
26761: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26762: LD_INT 0
26764: PPUSH
26765: PPUSH
26766: PPUSH
26767: PPUSH
26768: PPUSH
26769: PPUSH
26770: PPUSH
// if not factory then
26771: LD_VAR 0 1
26775: NOT
26776: IFFALSE 26780
// exit ;
26778: GO 27383
// if control = control_apeman then
26780: LD_VAR 0 4
26784: PUSH
26785: LD_INT 5
26787: EQUAL
26788: IFFALSE 26897
// begin tmp := UnitsInside ( factory ) ;
26790: LD_ADDR_VAR 0 8
26794: PUSH
26795: LD_VAR 0 1
26799: PPUSH
26800: CALL_OW 313
26804: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26805: LD_VAR 0 8
26809: PPUSH
26810: LD_INT 25
26812: PUSH
26813: LD_INT 12
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PPUSH
26820: CALL_OW 72
26824: NOT
26825: IFFALSE 26835
// control := control_manual ;
26827: LD_ADDR_VAR 0 4
26831: PUSH
26832: LD_INT 1
26834: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26835: LD_ADDR_VAR 0 8
26839: PUSH
26840: LD_VAR 0 1
26844: PPUSH
26845: CALL 26532 0 1
26849: ST_TO_ADDR
// if tmp then
26850: LD_VAR 0 8
26854: IFFALSE 26897
// begin for i in tmp do
26856: LD_ADDR_VAR 0 7
26860: PUSH
26861: LD_VAR 0 8
26865: PUSH
26866: FOR_IN
26867: IFFALSE 26895
// if i [ 1 ] = b_ext_radio then
26869: LD_VAR 0 7
26873: PUSH
26874: LD_INT 1
26876: ARRAY
26877: PUSH
26878: LD_INT 22
26880: EQUAL
26881: IFFALSE 26893
// begin control := control_remote ;
26883: LD_ADDR_VAR 0 4
26887: PUSH
26888: LD_INT 2
26890: ST_TO_ADDR
// break ;
26891: GO 26895
// end ;
26893: GO 26866
26895: POP
26896: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26897: LD_VAR 0 1
26901: PPUSH
26902: LD_VAR 0 2
26906: PPUSH
26907: LD_VAR 0 3
26911: PPUSH
26912: LD_VAR 0 4
26916: PPUSH
26917: LD_VAR 0 5
26921: PPUSH
26922: CALL_OW 448
26926: IFFALSE 26961
// begin result := [ chassis , engine , control , weapon ] ;
26928: LD_ADDR_VAR 0 6
26932: PUSH
26933: LD_VAR 0 2
26937: PUSH
26938: LD_VAR 0 3
26942: PUSH
26943: LD_VAR 0 4
26947: PUSH
26948: LD_VAR 0 5
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: ST_TO_ADDR
// exit ;
26959: GO 27383
// end ; _chassis := AvailableChassisList ( factory ) ;
26961: LD_ADDR_VAR 0 9
26965: PUSH
26966: LD_VAR 0 1
26970: PPUSH
26971: CALL_OW 475
26975: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26976: LD_ADDR_VAR 0 11
26980: PUSH
26981: LD_VAR 0 1
26985: PPUSH
26986: CALL_OW 476
26990: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26991: LD_ADDR_VAR 0 12
26995: PUSH
26996: LD_VAR 0 1
27000: PPUSH
27001: CALL_OW 477
27005: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27006: LD_ADDR_VAR 0 10
27010: PUSH
27011: LD_VAR 0 1
27015: PPUSH
27016: CALL_OW 478
27020: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27021: LD_VAR 0 9
27025: NOT
27026: IFTRUE 27035
27028: PUSH
27029: LD_VAR 0 11
27033: NOT
27034: OR
27035: IFTRUE 27044
27037: PUSH
27038: LD_VAR 0 12
27042: NOT
27043: OR
27044: IFTRUE 27053
27046: PUSH
27047: LD_VAR 0 10
27051: NOT
27052: OR
27053: IFFALSE 27088
// begin result := [ chassis , engine , control , weapon ] ;
27055: LD_ADDR_VAR 0 6
27059: PUSH
27060: LD_VAR 0 2
27064: PUSH
27065: LD_VAR 0 3
27069: PUSH
27070: LD_VAR 0 4
27074: PUSH
27075: LD_VAR 0 5
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: LIST
27084: LIST
27085: ST_TO_ADDR
// exit ;
27086: GO 27383
// end ; if not chassis in _chassis then
27088: LD_VAR 0 2
27092: PUSH
27093: LD_VAR 0 9
27097: IN
27098: NOT
27099: IFFALSE 27125
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27101: LD_ADDR_VAR 0 2
27105: PUSH
27106: LD_VAR 0 9
27110: PUSH
27111: LD_INT 1
27113: PPUSH
27114: LD_VAR 0 9
27118: PPUSH
27119: CALL_OW 12
27123: ARRAY
27124: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27125: LD_VAR 0 2
27129: PPUSH
27130: LD_VAR 0 3
27134: PPUSH
27135: CALL 27388 0 2
27139: NOT
27140: IFFALSE 27201
// repeat engine := _engine [ 1 ] ;
27142: LD_ADDR_VAR 0 3
27146: PUSH
27147: LD_VAR 0 11
27151: PUSH
27152: LD_INT 1
27154: ARRAY
27155: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27156: LD_ADDR_VAR 0 11
27160: PUSH
27161: LD_VAR 0 11
27165: PPUSH
27166: LD_INT 1
27168: PPUSH
27169: CALL_OW 3
27173: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27174: LD_VAR 0 2
27178: PPUSH
27179: LD_VAR 0 3
27183: PPUSH
27184: CALL 27388 0 2
27188: IFTRUE 27199
27190: PUSH
27191: LD_VAR 0 11
27195: PUSH
27196: EMPTY
27197: EQUAL
27198: OR
27199: IFFALSE 27142
// if not control in _control then
27201: LD_VAR 0 4
27205: PUSH
27206: LD_VAR 0 12
27210: IN
27211: NOT
27212: IFFALSE 27238
// control := _control [ rand ( 1 , _control ) ] ;
27214: LD_ADDR_VAR 0 4
27218: PUSH
27219: LD_VAR 0 12
27223: PUSH
27224: LD_INT 1
27226: PPUSH
27227: LD_VAR 0 12
27231: PPUSH
27232: CALL_OW 12
27236: ARRAY
27237: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27238: LD_VAR 0 2
27242: PPUSH
27243: LD_VAR 0 5
27247: PPUSH
27248: CALL 27610 0 2
27252: NOT
27253: IFFALSE 27314
// repeat weapon := _weapon [ 1 ] ;
27255: LD_ADDR_VAR 0 5
27259: PUSH
27260: LD_VAR 0 10
27264: PUSH
27265: LD_INT 1
27267: ARRAY
27268: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27269: LD_ADDR_VAR 0 10
27273: PUSH
27274: LD_VAR 0 10
27278: PPUSH
27279: LD_INT 1
27281: PPUSH
27282: CALL_OW 3
27286: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27287: LD_VAR 0 2
27291: PPUSH
27292: LD_VAR 0 5
27296: PPUSH
27297: CALL 27610 0 2
27301: IFTRUE 27312
27303: PUSH
27304: LD_VAR 0 10
27308: PUSH
27309: EMPTY
27310: EQUAL
27311: OR
27312: IFFALSE 27255
// result := [ ] ;
27314: LD_ADDR_VAR 0 6
27318: PUSH
27319: EMPTY
27320: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27321: LD_VAR 0 1
27325: PPUSH
27326: LD_VAR 0 2
27330: PPUSH
27331: LD_VAR 0 3
27335: PPUSH
27336: LD_VAR 0 4
27340: PPUSH
27341: LD_VAR 0 5
27345: PPUSH
27346: CALL_OW 448
27350: IFFALSE 27383
// result := [ chassis , engine , control , weapon ] ;
27352: LD_ADDR_VAR 0 6
27356: PUSH
27357: LD_VAR 0 2
27361: PUSH
27362: LD_VAR 0 3
27366: PUSH
27367: LD_VAR 0 4
27371: PUSH
27372: LD_VAR 0 5
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: ST_TO_ADDR
// end ;
27383: LD_VAR 0 6
27387: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27388: LD_INT 0
27390: PPUSH
// if not chassis or not engine then
27391: LD_VAR 0 1
27395: NOT
27396: IFTRUE 27405
27398: PUSH
27399: LD_VAR 0 2
27403: NOT
27404: OR
27405: IFFALSE 27409
// exit ;
27407: GO 27605
// case engine of engine_solar :
27409: LD_VAR 0 2
27413: PUSH
27414: LD_INT 2
27416: DOUBLE
27417: EQUAL
27418: IFTRUE 27422
27420: GO 27460
27422: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27423: LD_ADDR_VAR 0 3
27427: PUSH
27428: LD_INT 11
27430: PUSH
27431: LD_INT 12
27433: PUSH
27434: LD_INT 13
27436: PUSH
27437: LD_INT 14
27439: PUSH
27440: LD_INT 1
27442: PUSH
27443: LD_INT 2
27445: PUSH
27446: LD_INT 3
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: ST_TO_ADDR
27458: GO 27589
27460: LD_INT 1
27462: DOUBLE
27463: EQUAL
27464: IFTRUE 27468
27466: GO 27530
27468: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27469: LD_ADDR_VAR 0 3
27473: PUSH
27474: LD_INT 11
27476: PUSH
27477: LD_INT 12
27479: PUSH
27480: LD_INT 13
27482: PUSH
27483: LD_INT 14
27485: PUSH
27486: LD_INT 1
27488: PUSH
27489: LD_INT 2
27491: PUSH
27492: LD_INT 3
27494: PUSH
27495: LD_INT 4
27497: PUSH
27498: LD_INT 5
27500: PUSH
27501: LD_INT 21
27503: PUSH
27504: LD_INT 23
27506: PUSH
27507: LD_INT 22
27509: PUSH
27510: LD_INT 24
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: ST_TO_ADDR
27528: GO 27589
27530: LD_INT 3
27532: DOUBLE
27533: EQUAL
27534: IFTRUE 27538
27536: GO 27588
27538: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27539: LD_ADDR_VAR 0 3
27543: PUSH
27544: LD_INT 13
27546: PUSH
27547: LD_INT 14
27549: PUSH
27550: LD_INT 2
27552: PUSH
27553: LD_INT 3
27555: PUSH
27556: LD_INT 4
27558: PUSH
27559: LD_INT 5
27561: PUSH
27562: LD_INT 21
27564: PUSH
27565: LD_INT 22
27567: PUSH
27568: LD_INT 23
27570: PUSH
27571: LD_INT 24
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: ST_TO_ADDR
27586: GO 27589
27588: POP
// result := ( chassis in result ) ;
27589: LD_ADDR_VAR 0 3
27593: PUSH
27594: LD_VAR 0 1
27598: PUSH
27599: LD_VAR 0 3
27603: IN
27604: ST_TO_ADDR
// end ;
27605: LD_VAR 0 3
27609: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27610: LD_INT 0
27612: PPUSH
// if not chassis or not weapon then
27613: LD_VAR 0 1
27617: NOT
27618: IFTRUE 27627
27620: PUSH
27621: LD_VAR 0 2
27625: NOT
27626: OR
27627: IFFALSE 27631
// exit ;
27629: GO 28725
// case weapon of us_machine_gun :
27631: LD_VAR 0 2
27635: PUSH
27636: LD_INT 2
27638: DOUBLE
27639: EQUAL
27640: IFTRUE 27644
27642: GO 27674
27644: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27645: LD_ADDR_VAR 0 3
27649: PUSH
27650: LD_INT 1
27652: PUSH
27653: LD_INT 2
27655: PUSH
27656: LD_INT 3
27658: PUSH
27659: LD_INT 4
27661: PUSH
27662: LD_INT 5
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: ST_TO_ADDR
27672: GO 28709
27674: LD_INT 3
27676: DOUBLE
27677: EQUAL
27678: IFTRUE 27682
27680: GO 27712
27682: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27683: LD_ADDR_VAR 0 3
27687: PUSH
27688: LD_INT 1
27690: PUSH
27691: LD_INT 2
27693: PUSH
27694: LD_INT 3
27696: PUSH
27697: LD_INT 4
27699: PUSH
27700: LD_INT 5
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: ST_TO_ADDR
27710: GO 28709
27712: LD_INT 11
27714: DOUBLE
27715: EQUAL
27716: IFTRUE 27720
27718: GO 27750
27720: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27721: LD_ADDR_VAR 0 3
27725: PUSH
27726: LD_INT 1
27728: PUSH
27729: LD_INT 2
27731: PUSH
27732: LD_INT 3
27734: PUSH
27735: LD_INT 4
27737: PUSH
27738: LD_INT 5
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: ST_TO_ADDR
27748: GO 28709
27750: LD_INT 4
27752: DOUBLE
27753: EQUAL
27754: IFTRUE 27758
27756: GO 27784
27758: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27759: LD_ADDR_VAR 0 3
27763: PUSH
27764: LD_INT 2
27766: PUSH
27767: LD_INT 3
27769: PUSH
27770: LD_INT 4
27772: PUSH
27773: LD_INT 5
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: ST_TO_ADDR
27782: GO 28709
27784: LD_INT 5
27786: DOUBLE
27787: EQUAL
27788: IFTRUE 27792
27790: GO 27818
27792: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27793: LD_ADDR_VAR 0 3
27797: PUSH
27798: LD_INT 2
27800: PUSH
27801: LD_INT 3
27803: PUSH
27804: LD_INT 4
27806: PUSH
27807: LD_INT 5
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: ST_TO_ADDR
27816: GO 28709
27818: LD_INT 9
27820: DOUBLE
27821: EQUAL
27822: IFTRUE 27826
27824: GO 27852
27826: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27827: LD_ADDR_VAR 0 3
27831: PUSH
27832: LD_INT 2
27834: PUSH
27835: LD_INT 3
27837: PUSH
27838: LD_INT 4
27840: PUSH
27841: LD_INT 5
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: LIST
27848: LIST
27849: ST_TO_ADDR
27850: GO 28709
27852: LD_INT 7
27854: DOUBLE
27855: EQUAL
27856: IFTRUE 27860
27858: GO 27886
27860: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27861: LD_ADDR_VAR 0 3
27865: PUSH
27866: LD_INT 2
27868: PUSH
27869: LD_INT 3
27871: PUSH
27872: LD_INT 4
27874: PUSH
27875: LD_INT 5
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: ST_TO_ADDR
27884: GO 28709
27886: LD_INT 12
27888: DOUBLE
27889: EQUAL
27890: IFTRUE 27894
27892: GO 27920
27894: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27895: LD_ADDR_VAR 0 3
27899: PUSH
27900: LD_INT 2
27902: PUSH
27903: LD_INT 3
27905: PUSH
27906: LD_INT 4
27908: PUSH
27909: LD_INT 5
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: ST_TO_ADDR
27918: GO 28709
27920: LD_INT 13
27922: DOUBLE
27923: EQUAL
27924: IFTRUE 27928
27926: GO 27954
27928: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27929: LD_ADDR_VAR 0 3
27933: PUSH
27934: LD_INT 2
27936: PUSH
27937: LD_INT 3
27939: PUSH
27940: LD_INT 4
27942: PUSH
27943: LD_INT 5
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: LIST
27950: LIST
27951: ST_TO_ADDR
27952: GO 28709
27954: LD_INT 14
27956: DOUBLE
27957: EQUAL
27958: IFTRUE 27962
27960: GO 27980
27962: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27963: LD_ADDR_VAR 0 3
27967: PUSH
27968: LD_INT 4
27970: PUSH
27971: LD_INT 5
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: ST_TO_ADDR
27978: GO 28709
27980: LD_INT 6
27982: DOUBLE
27983: EQUAL
27984: IFTRUE 27988
27986: GO 28006
27988: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27989: LD_ADDR_VAR 0 3
27993: PUSH
27994: LD_INT 4
27996: PUSH
27997: LD_INT 5
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: ST_TO_ADDR
28004: GO 28709
28006: LD_INT 10
28008: DOUBLE
28009: EQUAL
28010: IFTRUE 28014
28012: GO 28032
28014: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28015: LD_ADDR_VAR 0 3
28019: PUSH
28020: LD_INT 4
28022: PUSH
28023: LD_INT 5
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: ST_TO_ADDR
28030: GO 28709
28032: LD_INT 22
28034: DOUBLE
28035: EQUAL
28036: IFTRUE 28040
28038: GO 28066
28040: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28041: LD_ADDR_VAR 0 3
28045: PUSH
28046: LD_INT 11
28048: PUSH
28049: LD_INT 12
28051: PUSH
28052: LD_INT 13
28054: PUSH
28055: LD_INT 14
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: ST_TO_ADDR
28064: GO 28709
28066: LD_INT 23
28068: DOUBLE
28069: EQUAL
28070: IFTRUE 28074
28072: GO 28100
28074: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28075: LD_ADDR_VAR 0 3
28079: PUSH
28080: LD_INT 11
28082: PUSH
28083: LD_INT 12
28085: PUSH
28086: LD_INT 13
28088: PUSH
28089: LD_INT 14
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: ST_TO_ADDR
28098: GO 28709
28100: LD_INT 24
28102: DOUBLE
28103: EQUAL
28104: IFTRUE 28108
28106: GO 28134
28108: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28109: LD_ADDR_VAR 0 3
28113: PUSH
28114: LD_INT 11
28116: PUSH
28117: LD_INT 12
28119: PUSH
28120: LD_INT 13
28122: PUSH
28123: LD_INT 14
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: LIST
28130: LIST
28131: ST_TO_ADDR
28132: GO 28709
28134: LD_INT 30
28136: DOUBLE
28137: EQUAL
28138: IFTRUE 28142
28140: GO 28168
28142: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28143: LD_ADDR_VAR 0 3
28147: PUSH
28148: LD_INT 11
28150: PUSH
28151: LD_INT 12
28153: PUSH
28154: LD_INT 13
28156: PUSH
28157: LD_INT 14
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: ST_TO_ADDR
28166: GO 28709
28168: LD_INT 25
28170: DOUBLE
28171: EQUAL
28172: IFTRUE 28176
28174: GO 28194
28176: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28177: LD_ADDR_VAR 0 3
28181: PUSH
28182: LD_INT 13
28184: PUSH
28185: LD_INT 14
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: ST_TO_ADDR
28192: GO 28709
28194: LD_INT 27
28196: DOUBLE
28197: EQUAL
28198: IFTRUE 28202
28200: GO 28220
28202: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28203: LD_ADDR_VAR 0 3
28207: PUSH
28208: LD_INT 13
28210: PUSH
28211: LD_INT 14
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: ST_TO_ADDR
28218: GO 28709
28220: LD_INT 92
28222: DOUBLE
28223: EQUAL
28224: IFTRUE 28228
28226: GO 28254
28228: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28229: LD_ADDR_VAR 0 3
28233: PUSH
28234: LD_INT 11
28236: PUSH
28237: LD_INT 12
28239: PUSH
28240: LD_INT 13
28242: PUSH
28243: LD_INT 14
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: LIST
28250: LIST
28251: ST_TO_ADDR
28252: GO 28709
28254: LD_INT 28
28256: DOUBLE
28257: EQUAL
28258: IFTRUE 28262
28260: GO 28280
28262: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28263: LD_ADDR_VAR 0 3
28267: PUSH
28268: LD_INT 13
28270: PUSH
28271: LD_INT 14
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: ST_TO_ADDR
28278: GO 28709
28280: LD_INT 29
28282: DOUBLE
28283: EQUAL
28284: IFTRUE 28288
28286: GO 28306
28288: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28289: LD_ADDR_VAR 0 3
28293: PUSH
28294: LD_INT 13
28296: PUSH
28297: LD_INT 14
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: ST_TO_ADDR
28304: GO 28709
28306: LD_INT 31
28308: DOUBLE
28309: EQUAL
28310: IFTRUE 28314
28312: GO 28332
28314: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28315: LD_ADDR_VAR 0 3
28319: PUSH
28320: LD_INT 13
28322: PUSH
28323: LD_INT 14
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: ST_TO_ADDR
28330: GO 28709
28332: LD_INT 26
28334: DOUBLE
28335: EQUAL
28336: IFTRUE 28340
28338: GO 28358
28340: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28341: LD_ADDR_VAR 0 3
28345: PUSH
28346: LD_INT 13
28348: PUSH
28349: LD_INT 14
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: ST_TO_ADDR
28356: GO 28709
28358: LD_INT 42
28360: DOUBLE
28361: EQUAL
28362: IFTRUE 28366
28364: GO 28392
28366: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28367: LD_ADDR_VAR 0 3
28371: PUSH
28372: LD_INT 21
28374: PUSH
28375: LD_INT 22
28377: PUSH
28378: LD_INT 23
28380: PUSH
28381: LD_INT 24
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: ST_TO_ADDR
28390: GO 28709
28392: LD_INT 43
28394: DOUBLE
28395: EQUAL
28396: IFTRUE 28400
28398: GO 28426
28400: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28401: LD_ADDR_VAR 0 3
28405: PUSH
28406: LD_INT 21
28408: PUSH
28409: LD_INT 22
28411: PUSH
28412: LD_INT 23
28414: PUSH
28415: LD_INT 24
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: LIST
28422: LIST
28423: ST_TO_ADDR
28424: GO 28709
28426: LD_INT 44
28428: DOUBLE
28429: EQUAL
28430: IFTRUE 28434
28432: GO 28460
28434: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28435: LD_ADDR_VAR 0 3
28439: PUSH
28440: LD_INT 21
28442: PUSH
28443: LD_INT 22
28445: PUSH
28446: LD_INT 23
28448: PUSH
28449: LD_INT 24
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: LIST
28456: LIST
28457: ST_TO_ADDR
28458: GO 28709
28460: LD_INT 45
28462: DOUBLE
28463: EQUAL
28464: IFTRUE 28468
28466: GO 28494
28468: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28469: LD_ADDR_VAR 0 3
28473: PUSH
28474: LD_INT 21
28476: PUSH
28477: LD_INT 22
28479: PUSH
28480: LD_INT 23
28482: PUSH
28483: LD_INT 24
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: ST_TO_ADDR
28492: GO 28709
28494: LD_INT 49
28496: DOUBLE
28497: EQUAL
28498: IFTRUE 28502
28500: GO 28528
28502: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28503: LD_ADDR_VAR 0 3
28507: PUSH
28508: LD_INT 21
28510: PUSH
28511: LD_INT 22
28513: PUSH
28514: LD_INT 23
28516: PUSH
28517: LD_INT 24
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: ST_TO_ADDR
28526: GO 28709
28528: LD_INT 51
28530: DOUBLE
28531: EQUAL
28532: IFTRUE 28536
28534: GO 28562
28536: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28537: LD_ADDR_VAR 0 3
28541: PUSH
28542: LD_INT 21
28544: PUSH
28545: LD_INT 22
28547: PUSH
28548: LD_INT 23
28550: PUSH
28551: LD_INT 24
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: ST_TO_ADDR
28560: GO 28709
28562: LD_INT 52
28564: DOUBLE
28565: EQUAL
28566: IFTRUE 28570
28568: GO 28596
28570: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28571: LD_ADDR_VAR 0 3
28575: PUSH
28576: LD_INT 21
28578: PUSH
28579: LD_INT 22
28581: PUSH
28582: LD_INT 23
28584: PUSH
28585: LD_INT 24
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: ST_TO_ADDR
28594: GO 28709
28596: LD_INT 53
28598: DOUBLE
28599: EQUAL
28600: IFTRUE 28604
28602: GO 28622
28604: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28605: LD_ADDR_VAR 0 3
28609: PUSH
28610: LD_INT 23
28612: PUSH
28613: LD_INT 24
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: ST_TO_ADDR
28620: GO 28709
28622: LD_INT 46
28624: DOUBLE
28625: EQUAL
28626: IFTRUE 28630
28628: GO 28648
28630: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28631: LD_ADDR_VAR 0 3
28635: PUSH
28636: LD_INT 23
28638: PUSH
28639: LD_INT 24
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: ST_TO_ADDR
28646: GO 28709
28648: LD_INT 47
28650: DOUBLE
28651: EQUAL
28652: IFTRUE 28656
28654: GO 28674
28656: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
28657: LD_ADDR_VAR 0 3
28661: PUSH
28662: LD_INT 23
28664: PUSH
28665: LD_INT 24
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: ST_TO_ADDR
28672: GO 28709
28674: LD_INT 98
28676: DOUBLE
28677: EQUAL
28678: IFTRUE 28682
28680: GO 28708
28682: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28683: LD_ADDR_VAR 0 3
28687: PUSH
28688: LD_INT 21
28690: PUSH
28691: LD_INT 22
28693: PUSH
28694: LD_INT 23
28696: PUSH
28697: LD_INT 24
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: LIST
28704: LIST
28705: ST_TO_ADDR
28706: GO 28709
28708: POP
// result := ( chassis in result ) ;
28709: LD_ADDR_VAR 0 3
28713: PUSH
28714: LD_VAR 0 1
28718: PUSH
28719: LD_VAR 0 3
28723: IN
28724: ST_TO_ADDR
// end ;
28725: LD_VAR 0 3
28729: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28730: LD_INT 0
28732: PPUSH
28733: PPUSH
28734: PPUSH
28735: PPUSH
28736: PPUSH
28737: PPUSH
28738: PPUSH
// result := array ;
28739: LD_ADDR_VAR 0 5
28743: PUSH
28744: LD_VAR 0 1
28748: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28749: LD_VAR 0 1
28753: NOT
28754: IFTRUE 28763
28756: PUSH
28757: LD_VAR 0 2
28761: NOT
28762: OR
28763: IFTRUE 28772
28765: PUSH
28766: LD_VAR 0 3
28770: NOT
28771: OR
28772: IFTRUE 28786
28774: PUSH
28775: LD_VAR 0 2
28779: PUSH
28780: LD_VAR 0 1
28784: GREATER
28785: OR
28786: IFTRUE 28800
28788: PUSH
28789: LD_VAR 0 3
28793: PUSH
28794: LD_VAR 0 1
28798: GREATER
28799: OR
28800: IFFALSE 28804
// exit ;
28802: GO 29100
// if direction then
28804: LD_VAR 0 4
28808: IFFALSE 28872
// begin d := 1 ;
28810: LD_ADDR_VAR 0 9
28814: PUSH
28815: LD_INT 1
28817: ST_TO_ADDR
// if i_from > i_to then
28818: LD_VAR 0 2
28822: PUSH
28823: LD_VAR 0 3
28827: GREATER
28828: IFFALSE 28854
// length := ( array - i_from ) + i_to else
28830: LD_ADDR_VAR 0 11
28834: PUSH
28835: LD_VAR 0 1
28839: PUSH
28840: LD_VAR 0 2
28844: MINUS
28845: PUSH
28846: LD_VAR 0 3
28850: PLUS
28851: ST_TO_ADDR
28852: GO 28870
// length := i_to - i_from ;
28854: LD_ADDR_VAR 0 11
28858: PUSH
28859: LD_VAR 0 3
28863: PUSH
28864: LD_VAR 0 2
28868: MINUS
28869: ST_TO_ADDR
// end else
28870: GO 28933
// begin d := - 1 ;
28872: LD_ADDR_VAR 0 9
28876: PUSH
28877: LD_INT 1
28879: NEG
28880: ST_TO_ADDR
// if i_from > i_to then
28881: LD_VAR 0 2
28885: PUSH
28886: LD_VAR 0 3
28890: GREATER
28891: IFFALSE 28911
// length := i_from - i_to else
28893: LD_ADDR_VAR 0 11
28897: PUSH
28898: LD_VAR 0 2
28902: PUSH
28903: LD_VAR 0 3
28907: MINUS
28908: ST_TO_ADDR
28909: GO 28933
// length := ( array - i_to ) + i_from ;
28911: LD_ADDR_VAR 0 11
28915: PUSH
28916: LD_VAR 0 1
28920: PUSH
28921: LD_VAR 0 3
28925: MINUS
28926: PUSH
28927: LD_VAR 0 2
28931: PLUS
28932: ST_TO_ADDR
// end ; if not length then
28933: LD_VAR 0 11
28937: NOT
28938: IFFALSE 28942
// exit ;
28940: GO 29100
// tmp := array ;
28942: LD_ADDR_VAR 0 10
28946: PUSH
28947: LD_VAR 0 1
28951: ST_TO_ADDR
// for i = 1 to length do
28952: LD_ADDR_VAR 0 6
28956: PUSH
28957: DOUBLE
28958: LD_INT 1
28960: DEC
28961: ST_TO_ADDR
28962: LD_VAR 0 11
28966: PUSH
28967: FOR_TO
28968: IFFALSE 29088
// begin for j = 1 to array do
28970: LD_ADDR_VAR 0 7
28974: PUSH
28975: DOUBLE
28976: LD_INT 1
28978: DEC
28979: ST_TO_ADDR
28980: LD_VAR 0 1
28984: PUSH
28985: FOR_TO
28986: IFFALSE 29074
// begin k := j + d ;
28988: LD_ADDR_VAR 0 8
28992: PUSH
28993: LD_VAR 0 7
28997: PUSH
28998: LD_VAR 0 9
29002: PLUS
29003: ST_TO_ADDR
// if k > array then
29004: LD_VAR 0 8
29008: PUSH
29009: LD_VAR 0 1
29013: GREATER
29014: IFFALSE 29024
// k := 1 ;
29016: LD_ADDR_VAR 0 8
29020: PUSH
29021: LD_INT 1
29023: ST_TO_ADDR
// if not k then
29024: LD_VAR 0 8
29028: NOT
29029: IFFALSE 29041
// k := array ;
29031: LD_ADDR_VAR 0 8
29035: PUSH
29036: LD_VAR 0 1
29040: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29041: LD_ADDR_VAR 0 10
29045: PUSH
29046: LD_VAR 0 10
29050: PPUSH
29051: LD_VAR 0 8
29055: PPUSH
29056: LD_VAR 0 1
29060: PUSH
29061: LD_VAR 0 7
29065: ARRAY
29066: PPUSH
29067: CALL_OW 1
29071: ST_TO_ADDR
// end ;
29072: GO 28985
29074: POP
29075: POP
// array := tmp ;
29076: LD_ADDR_VAR 0 1
29080: PUSH
29081: LD_VAR 0 10
29085: ST_TO_ADDR
// end ;
29086: GO 28967
29088: POP
29089: POP
// result := array ;
29090: LD_ADDR_VAR 0 5
29094: PUSH
29095: LD_VAR 0 1
29099: ST_TO_ADDR
// end ;
29100: LD_VAR 0 5
29104: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29105: LD_INT 0
29107: PPUSH
29108: PPUSH
// result := 0 ;
29109: LD_ADDR_VAR 0 3
29113: PUSH
29114: LD_INT 0
29116: ST_TO_ADDR
// if not array or not value in array then
29117: LD_VAR 0 1
29121: NOT
29122: IFTRUE 29137
29124: PUSH
29125: LD_VAR 0 2
29129: PUSH
29130: LD_VAR 0 1
29134: IN
29135: NOT
29136: OR
29137: IFFALSE 29141
// exit ;
29139: GO 29195
// for i = 1 to array do
29141: LD_ADDR_VAR 0 4
29145: PUSH
29146: DOUBLE
29147: LD_INT 1
29149: DEC
29150: ST_TO_ADDR
29151: LD_VAR 0 1
29155: PUSH
29156: FOR_TO
29157: IFFALSE 29193
// if value = array [ i ] then
29159: LD_VAR 0 2
29163: PUSH
29164: LD_VAR 0 1
29168: PUSH
29169: LD_VAR 0 4
29173: ARRAY
29174: EQUAL
29175: IFFALSE 29191
// begin result := i ;
29177: LD_ADDR_VAR 0 3
29181: PUSH
29182: LD_VAR 0 4
29186: ST_TO_ADDR
// exit ;
29187: POP
29188: POP
29189: GO 29195
// end ;
29191: GO 29156
29193: POP
29194: POP
// end ;
29195: LD_VAR 0 3
29199: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29200: LD_INT 0
29202: PPUSH
// vc_chassis := chassis ;
29203: LD_ADDR_OWVAR 37
29207: PUSH
29208: LD_VAR 0 1
29212: ST_TO_ADDR
// vc_engine := engine ;
29213: LD_ADDR_OWVAR 39
29217: PUSH
29218: LD_VAR 0 2
29222: ST_TO_ADDR
// vc_control := control ;
29223: LD_ADDR_OWVAR 38
29227: PUSH
29228: LD_VAR 0 3
29232: ST_TO_ADDR
// vc_weapon := weapon ;
29233: LD_ADDR_OWVAR 40
29237: PUSH
29238: LD_VAR 0 4
29242: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29243: LD_ADDR_OWVAR 41
29247: PUSH
29248: LD_VAR 0 5
29252: ST_TO_ADDR
// end ;
29253: LD_VAR 0 6
29257: RET
// export function WantPlant ( unit ) ; var task ; begin
29258: LD_INT 0
29260: PPUSH
29261: PPUSH
// result := false ;
29262: LD_ADDR_VAR 0 2
29266: PUSH
29267: LD_INT 0
29269: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29270: LD_ADDR_VAR 0 3
29274: PUSH
29275: LD_VAR 0 1
29279: PPUSH
29280: CALL_OW 437
29284: ST_TO_ADDR
// if task then
29285: LD_VAR 0 3
29289: IFFALSE 29317
// if task [ 1 ] [ 1 ] = p then
29291: LD_VAR 0 3
29295: PUSH
29296: LD_INT 1
29298: ARRAY
29299: PUSH
29300: LD_INT 1
29302: ARRAY
29303: PUSH
29304: LD_STRING p
29306: EQUAL
29307: IFFALSE 29317
// result := true ;
29309: LD_ADDR_VAR 0 2
29313: PUSH
29314: LD_INT 1
29316: ST_TO_ADDR
// end ;
29317: LD_VAR 0 2
29321: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29322: LD_INT 0
29324: PPUSH
29325: PPUSH
29326: PPUSH
29327: PPUSH
// if pos < 1 then
29328: LD_VAR 0 2
29332: PUSH
29333: LD_INT 1
29335: LESS
29336: IFFALSE 29340
// exit ;
29338: GO 29643
// if pos = 1 then
29340: LD_VAR 0 2
29344: PUSH
29345: LD_INT 1
29347: EQUAL
29348: IFFALSE 29381
// result := Replace ( arr , pos [ 1 ] , value ) else
29350: LD_ADDR_VAR 0 4
29354: PUSH
29355: LD_VAR 0 1
29359: PPUSH
29360: LD_VAR 0 2
29364: PUSH
29365: LD_INT 1
29367: ARRAY
29368: PPUSH
29369: LD_VAR 0 3
29373: PPUSH
29374: CALL_OW 1
29378: ST_TO_ADDR
29379: GO 29643
// begin tmp := arr ;
29381: LD_ADDR_VAR 0 6
29385: PUSH
29386: LD_VAR 0 1
29390: ST_TO_ADDR
// s_arr := [ tmp ] ;
29391: LD_ADDR_VAR 0 7
29395: PUSH
29396: LD_VAR 0 6
29400: PUSH
29401: EMPTY
29402: LIST
29403: ST_TO_ADDR
// for i = 1 to pos - 1 do
29404: LD_ADDR_VAR 0 5
29408: PUSH
29409: DOUBLE
29410: LD_INT 1
29412: DEC
29413: ST_TO_ADDR
29414: LD_VAR 0 2
29418: PUSH
29419: LD_INT 1
29421: MINUS
29422: PUSH
29423: FOR_TO
29424: IFFALSE 29469
// begin tmp := tmp [ pos [ i ] ] ;
29426: LD_ADDR_VAR 0 6
29430: PUSH
29431: LD_VAR 0 6
29435: PUSH
29436: LD_VAR 0 2
29440: PUSH
29441: LD_VAR 0 5
29445: ARRAY
29446: ARRAY
29447: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29448: LD_ADDR_VAR 0 7
29452: PUSH
29453: LD_VAR 0 7
29457: PUSH
29458: LD_VAR 0 6
29462: PUSH
29463: EMPTY
29464: LIST
29465: ADD
29466: ST_TO_ADDR
// end ;
29467: GO 29423
29469: POP
29470: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29471: LD_ADDR_VAR 0 6
29475: PUSH
29476: LD_VAR 0 6
29480: PPUSH
29481: LD_VAR 0 2
29485: PUSH
29486: LD_VAR 0 2
29490: ARRAY
29491: PPUSH
29492: LD_VAR 0 3
29496: PPUSH
29497: CALL_OW 1
29501: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29502: LD_ADDR_VAR 0 7
29506: PUSH
29507: LD_VAR 0 7
29511: PPUSH
29512: LD_VAR 0 7
29516: PPUSH
29517: LD_VAR 0 6
29521: PPUSH
29522: CALL_OW 1
29526: ST_TO_ADDR
// for i = s_arr downto 2 do
29527: LD_ADDR_VAR 0 5
29531: PUSH
29532: DOUBLE
29533: LD_VAR 0 7
29537: INC
29538: ST_TO_ADDR
29539: LD_INT 2
29541: PUSH
29542: FOR_DOWNTO
29543: IFFALSE 29627
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29545: LD_ADDR_VAR 0 6
29549: PUSH
29550: LD_VAR 0 7
29554: PUSH
29555: LD_VAR 0 5
29559: PUSH
29560: LD_INT 1
29562: MINUS
29563: ARRAY
29564: PPUSH
29565: LD_VAR 0 2
29569: PUSH
29570: LD_VAR 0 5
29574: PUSH
29575: LD_INT 1
29577: MINUS
29578: ARRAY
29579: PPUSH
29580: LD_VAR 0 7
29584: PUSH
29585: LD_VAR 0 5
29589: ARRAY
29590: PPUSH
29591: CALL_OW 1
29595: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29596: LD_ADDR_VAR 0 7
29600: PUSH
29601: LD_VAR 0 7
29605: PPUSH
29606: LD_VAR 0 5
29610: PUSH
29611: LD_INT 1
29613: MINUS
29614: PPUSH
29615: LD_VAR 0 6
29619: PPUSH
29620: CALL_OW 1
29624: ST_TO_ADDR
// end ;
29625: GO 29542
29627: POP
29628: POP
// result := s_arr [ 1 ] ;
29629: LD_ADDR_VAR 0 4
29633: PUSH
29634: LD_VAR 0 7
29638: PUSH
29639: LD_INT 1
29641: ARRAY
29642: ST_TO_ADDR
// end ; end ;
29643: LD_VAR 0 4
29647: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29648: LD_INT 0
29650: PPUSH
29651: PPUSH
// if not list then
29652: LD_VAR 0 1
29656: NOT
29657: IFFALSE 29661
// exit ;
29659: GO 29752
// i := list [ pos1 ] ;
29661: LD_ADDR_VAR 0 5
29665: PUSH
29666: LD_VAR 0 1
29670: PUSH
29671: LD_VAR 0 2
29675: ARRAY
29676: ST_TO_ADDR
// if not i then
29677: LD_VAR 0 5
29681: NOT
29682: IFFALSE 29686
// exit ;
29684: GO 29752
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29686: LD_ADDR_VAR 0 1
29690: PUSH
29691: LD_VAR 0 1
29695: PPUSH
29696: LD_VAR 0 2
29700: PPUSH
29701: LD_VAR 0 1
29705: PUSH
29706: LD_VAR 0 3
29710: ARRAY
29711: PPUSH
29712: CALL_OW 1
29716: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29717: LD_ADDR_VAR 0 1
29721: PUSH
29722: LD_VAR 0 1
29726: PPUSH
29727: LD_VAR 0 3
29731: PPUSH
29732: LD_VAR 0 5
29736: PPUSH
29737: CALL_OW 1
29741: ST_TO_ADDR
// result := list ;
29742: LD_ADDR_VAR 0 4
29746: PUSH
29747: LD_VAR 0 1
29751: ST_TO_ADDR
// end ;
29752: LD_VAR 0 4
29756: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29757: LD_INT 0
29759: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29760: LD_ADDR_VAR 0 5
29764: PUSH
29765: LD_VAR 0 1
29769: PPUSH
29770: CALL_OW 250
29774: PPUSH
29775: LD_VAR 0 1
29779: PPUSH
29780: CALL_OW 251
29784: PPUSH
29785: LD_VAR 0 2
29789: PPUSH
29790: LD_VAR 0 3
29794: PPUSH
29795: LD_VAR 0 4
29799: PPUSH
29800: CALL 30182 0 5
29804: ST_TO_ADDR
// end ;
29805: LD_VAR 0 5
29809: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
29810: LD_INT 0
29812: PPUSH
29813: PPUSH
29814: PPUSH
29815: PPUSH
// if not list or not unit then
29816: LD_VAR 0 2
29820: NOT
29821: IFTRUE 29830
29823: PUSH
29824: LD_VAR 0 1
29828: NOT
29829: OR
29830: IFFALSE 29834
// exit ;
29832: GO 30177
// result := [ ] ;
29834: LD_ADDR_VAR 0 5
29838: PUSH
29839: EMPTY
29840: ST_TO_ADDR
// for i in list do
29841: LD_ADDR_VAR 0 6
29845: PUSH
29846: LD_VAR 0 2
29850: PUSH
29851: FOR_IN
29852: IFFALSE 30070
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
29854: LD_ADDR_VAR 0 8
29858: PUSH
29859: LD_VAR 0 1
29863: PPUSH
29864: LD_VAR 0 6
29868: PUSH
29869: LD_INT 1
29871: ARRAY
29872: PPUSH
29873: LD_VAR 0 6
29877: PUSH
29878: LD_INT 2
29880: ARRAY
29881: PPUSH
29882: CALL_OW 297
29886: ST_TO_ADDR
// if not Count ( result ) then
29887: LD_VAR 0 5
29891: PPUSH
29892: CALL 26404 0 1
29896: NOT
29897: IFFALSE 29930
// begin result := Join ( result , [ i , tmp ] ) ;
29899: LD_ADDR_VAR 0 5
29903: PUSH
29904: LD_VAR 0 5
29908: PPUSH
29909: LD_VAR 0 6
29913: PUSH
29914: LD_VAR 0 8
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PPUSH
29923: CALL 62380 0 2
29927: ST_TO_ADDR
// continue ;
29928: GO 29851
// end ; if result [ result ] [ 2 ] <= tmp then
29930: LD_VAR 0 5
29934: PUSH
29935: LD_VAR 0 5
29939: ARRAY
29940: PUSH
29941: LD_INT 2
29943: ARRAY
29944: PUSH
29945: LD_VAR 0 8
29949: LESSEQUAL
29950: IFFALSE 29983
// result := Join ( result , [ i , tmp ] ) else
29952: LD_ADDR_VAR 0 5
29956: PUSH
29957: LD_VAR 0 5
29961: PPUSH
29962: LD_VAR 0 6
29966: PUSH
29967: LD_VAR 0 8
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PPUSH
29976: CALL 62380 0 2
29980: ST_TO_ADDR
29981: GO 30068
// begin for j := 1 to Count ( result ) do
29983: LD_ADDR_VAR 0 7
29987: PUSH
29988: DOUBLE
29989: LD_INT 1
29991: DEC
29992: ST_TO_ADDR
29993: LD_VAR 0 5
29997: PPUSH
29998: CALL 26404 0 1
30002: PUSH
30003: FOR_TO
30004: IFFALSE 30066
// begin if tmp < result [ j ] [ 2 ] then
30006: LD_VAR 0 8
30010: PUSH
30011: LD_VAR 0 5
30015: PUSH
30016: LD_VAR 0 7
30020: ARRAY
30021: PUSH
30022: LD_INT 2
30024: ARRAY
30025: LESS
30026: IFFALSE 30064
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30028: LD_ADDR_VAR 0 5
30032: PUSH
30033: LD_VAR 0 5
30037: PPUSH
30038: LD_VAR 0 7
30042: PPUSH
30043: LD_VAR 0 6
30047: PUSH
30048: LD_VAR 0 8
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PPUSH
30057: CALL_OW 2
30061: ST_TO_ADDR
// break ;
30062: GO 30066
// end ; end ;
30064: GO 30003
30066: POP
30067: POP
// end ; end ;
30068: GO 29851
30070: POP
30071: POP
// if result and not asc then
30072: LD_VAR 0 5
30076: IFFALSE 30085
30078: PUSH
30079: LD_VAR 0 3
30083: NOT
30084: AND
30085: IFFALSE 30102
// result := ReverseArray ( result ) ;
30087: LD_ADDR_VAR 0 5
30091: PUSH
30092: LD_VAR 0 5
30096: PPUSH
30097: CALL 57460 0 1
30101: ST_TO_ADDR
// tmp := [ ] ;
30102: LD_ADDR_VAR 0 8
30106: PUSH
30107: EMPTY
30108: ST_TO_ADDR
// if mode then
30109: LD_VAR 0 4
30113: IFFALSE 30177
// begin for i := 1 to result do
30115: LD_ADDR_VAR 0 6
30119: PUSH
30120: DOUBLE
30121: LD_INT 1
30123: DEC
30124: ST_TO_ADDR
30125: LD_VAR 0 5
30129: PUSH
30130: FOR_TO
30131: IFFALSE 30165
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
30133: LD_ADDR_VAR 0 8
30137: PUSH
30138: LD_VAR 0 8
30142: PPUSH
30143: LD_VAR 0 5
30147: PUSH
30148: LD_VAR 0 6
30152: ARRAY
30153: PUSH
30154: LD_INT 1
30156: ARRAY
30157: PPUSH
30158: CALL 62380 0 2
30162: ST_TO_ADDR
30163: GO 30130
30165: POP
30166: POP
// result := tmp ;
30167: LD_ADDR_VAR 0 5
30171: PUSH
30172: LD_VAR 0 8
30176: ST_TO_ADDR
// end ; end ;
30177: LD_VAR 0 5
30181: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30182: LD_INT 0
30184: PPUSH
30185: PPUSH
30186: PPUSH
30187: PPUSH
// if not list then
30188: LD_VAR 0 3
30192: NOT
30193: IFFALSE 30197
// exit ;
30195: GO 30587
// result := [ ] ;
30197: LD_ADDR_VAR 0 6
30201: PUSH
30202: EMPTY
30203: ST_TO_ADDR
// for i in list do
30204: LD_ADDR_VAR 0 7
30208: PUSH
30209: LD_VAR 0 3
30213: PUSH
30214: FOR_IN
30215: IFFALSE 30417
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30217: LD_ADDR_VAR 0 9
30221: PUSH
30222: LD_VAR 0 7
30226: PPUSH
30227: LD_VAR 0 1
30231: PPUSH
30232: LD_VAR 0 2
30236: PPUSH
30237: CALL_OW 297
30241: ST_TO_ADDR
// if not result then
30242: LD_VAR 0 6
30246: NOT
30247: IFFALSE 30273
// result := [ [ i , tmp ] ] else
30249: LD_ADDR_VAR 0 6
30253: PUSH
30254: LD_VAR 0 7
30258: PUSH
30259: LD_VAR 0 9
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: EMPTY
30269: LIST
30270: ST_TO_ADDR
30271: GO 30415
// begin if result [ result ] [ 2 ] <= tmp then
30273: LD_VAR 0 6
30277: PUSH
30278: LD_VAR 0 6
30282: ARRAY
30283: PUSH
30284: LD_INT 2
30286: ARRAY
30287: PUSH
30288: LD_VAR 0 9
30292: LESSEQUAL
30293: IFFALSE 30335
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30295: LD_ADDR_VAR 0 6
30299: PUSH
30300: LD_VAR 0 6
30304: PPUSH
30305: LD_VAR 0 6
30309: PUSH
30310: LD_INT 1
30312: PLUS
30313: PPUSH
30314: LD_VAR 0 7
30318: PUSH
30319: LD_VAR 0 9
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PPUSH
30328: CALL_OW 2
30332: ST_TO_ADDR
30333: GO 30415
// for j := 1 to result do
30335: LD_ADDR_VAR 0 8
30339: PUSH
30340: DOUBLE
30341: LD_INT 1
30343: DEC
30344: ST_TO_ADDR
30345: LD_VAR 0 6
30349: PUSH
30350: FOR_TO
30351: IFFALSE 30413
// begin if tmp < result [ j ] [ 2 ] then
30353: LD_VAR 0 9
30357: PUSH
30358: LD_VAR 0 6
30362: PUSH
30363: LD_VAR 0 8
30367: ARRAY
30368: PUSH
30369: LD_INT 2
30371: ARRAY
30372: LESS
30373: IFFALSE 30411
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30375: LD_ADDR_VAR 0 6
30379: PUSH
30380: LD_VAR 0 6
30384: PPUSH
30385: LD_VAR 0 8
30389: PPUSH
30390: LD_VAR 0 7
30394: PUSH
30395: LD_VAR 0 9
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PPUSH
30404: CALL_OW 2
30408: ST_TO_ADDR
// break ;
30409: GO 30413
// end ; end ;
30411: GO 30350
30413: POP
30414: POP
// end ; end ;
30415: GO 30214
30417: POP
30418: POP
// if result and not asc then
30419: LD_VAR 0 6
30423: IFFALSE 30432
30425: PUSH
30426: LD_VAR 0 4
30430: NOT
30431: AND
30432: IFFALSE 30507
// begin tmp := result ;
30434: LD_ADDR_VAR 0 9
30438: PUSH
30439: LD_VAR 0 6
30443: ST_TO_ADDR
// for i = tmp downto 1 do
30444: LD_ADDR_VAR 0 7
30448: PUSH
30449: DOUBLE
30450: LD_VAR 0 9
30454: INC
30455: ST_TO_ADDR
30456: LD_INT 1
30458: PUSH
30459: FOR_DOWNTO
30460: IFFALSE 30505
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30462: LD_ADDR_VAR 0 6
30466: PUSH
30467: LD_VAR 0 6
30471: PPUSH
30472: LD_VAR 0 9
30476: PUSH
30477: LD_VAR 0 7
30481: MINUS
30482: PUSH
30483: LD_INT 1
30485: PLUS
30486: PPUSH
30487: LD_VAR 0 9
30491: PUSH
30492: LD_VAR 0 7
30496: ARRAY
30497: PPUSH
30498: CALL_OW 1
30502: ST_TO_ADDR
30503: GO 30459
30505: POP
30506: POP
// end ; tmp := [ ] ;
30507: LD_ADDR_VAR 0 9
30511: PUSH
30512: EMPTY
30513: ST_TO_ADDR
// if mode then
30514: LD_VAR 0 5
30518: IFFALSE 30587
// begin for i = 1 to result do
30520: LD_ADDR_VAR 0 7
30524: PUSH
30525: DOUBLE
30526: LD_INT 1
30528: DEC
30529: ST_TO_ADDR
30530: LD_VAR 0 6
30534: PUSH
30535: FOR_TO
30536: IFFALSE 30575
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30538: LD_ADDR_VAR 0 9
30542: PUSH
30543: LD_VAR 0 9
30547: PPUSH
30548: LD_VAR 0 7
30552: PPUSH
30553: LD_VAR 0 6
30557: PUSH
30558: LD_VAR 0 7
30562: ARRAY
30563: PUSH
30564: LD_INT 1
30566: ARRAY
30567: PPUSH
30568: CALL_OW 1
30572: ST_TO_ADDR
30573: GO 30535
30575: POP
30576: POP
// result := tmp ;
30577: LD_ADDR_VAR 0 6
30581: PUSH
30582: LD_VAR 0 9
30586: ST_TO_ADDR
// end ; end ;
30587: LD_VAR 0 6
30591: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30592: LD_INT 0
30594: PPUSH
30595: PPUSH
30596: PPUSH
30597: PPUSH
30598: PPUSH
30599: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30600: LD_ADDR_VAR 0 5
30604: PUSH
30605: LD_INT 0
30607: PUSH
30608: LD_INT 0
30610: PUSH
30611: LD_INT 0
30613: PUSH
30614: EMPTY
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: ST_TO_ADDR
// if not x or not y then
30622: LD_VAR 0 2
30626: NOT
30627: IFTRUE 30636
30629: PUSH
30630: LD_VAR 0 3
30634: NOT
30635: OR
30636: IFFALSE 30640
// exit ;
30638: GO 32296
// if not range then
30640: LD_VAR 0 4
30644: NOT
30645: IFFALSE 30655
// range := 10 ;
30647: LD_ADDR_VAR 0 4
30651: PUSH
30652: LD_INT 10
30654: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30655: LD_ADDR_VAR 0 8
30659: PUSH
30660: LD_INT 81
30662: PUSH
30663: LD_VAR 0 1
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: LD_INT 92
30674: PUSH
30675: LD_VAR 0 2
30679: PUSH
30680: LD_VAR 0 3
30684: PUSH
30685: LD_VAR 0 4
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: PUSH
30696: LD_INT 3
30698: PUSH
30699: LD_INT 21
30701: PUSH
30702: LD_INT 3
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: LIST
30717: PPUSH
30718: CALL_OW 69
30722: ST_TO_ADDR
// if not tmp then
30723: LD_VAR 0 8
30727: NOT
30728: IFFALSE 30732
// exit ;
30730: GO 32296
// for i in tmp do
30732: LD_ADDR_VAR 0 6
30736: PUSH
30737: LD_VAR 0 8
30741: PUSH
30742: FOR_IN
30743: IFFALSE 32271
// begin points := [ 0 , 0 , 0 ] ;
30745: LD_ADDR_VAR 0 9
30749: PUSH
30750: LD_INT 0
30752: PUSH
30753: LD_INT 0
30755: PUSH
30756: LD_INT 0
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: LIST
30763: ST_TO_ADDR
// bpoints := 1 ;
30764: LD_ADDR_VAR 0 10
30768: PUSH
30769: LD_INT 1
30771: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30772: LD_VAR 0 6
30776: PPUSH
30777: CALL_OW 247
30781: PUSH
30782: LD_INT 1
30784: DOUBLE
30785: EQUAL
30786: IFTRUE 30790
30788: GO 31372
30790: POP
// begin if GetClass ( i ) = 1 then
30791: LD_VAR 0 6
30795: PPUSH
30796: CALL_OW 257
30800: PUSH
30801: LD_INT 1
30803: EQUAL
30804: IFFALSE 30825
// points := [ 10 , 5 , 3 ] ;
30806: LD_ADDR_VAR 0 9
30810: PUSH
30811: LD_INT 10
30813: PUSH
30814: LD_INT 5
30816: PUSH
30817: LD_INT 3
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: LIST
30824: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30825: LD_VAR 0 6
30829: PPUSH
30830: CALL_OW 257
30834: PUSH
30835: LD_INT 2
30837: PUSH
30838: LD_INT 3
30840: PUSH
30841: LD_INT 4
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: LIST
30848: IN
30849: IFFALSE 30870
// points := [ 3 , 2 , 1 ] ;
30851: LD_ADDR_VAR 0 9
30855: PUSH
30856: LD_INT 3
30858: PUSH
30859: LD_INT 2
30861: PUSH
30862: LD_INT 1
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: LIST
30869: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30870: LD_VAR 0 6
30874: PPUSH
30875: CALL_OW 257
30879: PUSH
30880: LD_INT 5
30882: EQUAL
30883: IFFALSE 30904
// points := [ 130 , 5 , 2 ] ;
30885: LD_ADDR_VAR 0 9
30889: PUSH
30890: LD_INT 130
30892: PUSH
30893: LD_INT 5
30895: PUSH
30896: LD_INT 2
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: LIST
30903: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30904: LD_VAR 0 6
30908: PPUSH
30909: CALL_OW 257
30913: PUSH
30914: LD_INT 8
30916: EQUAL
30917: IFFALSE 30938
// points := [ 35 , 35 , 30 ] ;
30919: LD_ADDR_VAR 0 9
30923: PUSH
30924: LD_INT 35
30926: PUSH
30927: LD_INT 35
30929: PUSH
30930: LD_INT 30
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: LIST
30937: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30938: LD_VAR 0 6
30942: PPUSH
30943: CALL_OW 257
30947: PUSH
30948: LD_INT 9
30950: EQUAL
30951: IFFALSE 30972
// points := [ 20 , 55 , 40 ] ;
30953: LD_ADDR_VAR 0 9
30957: PUSH
30958: LD_INT 20
30960: PUSH
30961: LD_INT 55
30963: PUSH
30964: LD_INT 40
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: LIST
30971: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30972: LD_VAR 0 6
30976: PPUSH
30977: CALL_OW 257
30981: PUSH
30982: LD_INT 12
30984: PUSH
30985: LD_INT 16
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: IN
30992: IFFALSE 31013
// points := [ 5 , 3 , 2 ] ;
30994: LD_ADDR_VAR 0 9
30998: PUSH
30999: LD_INT 5
31001: PUSH
31002: LD_INT 3
31004: PUSH
31005: LD_INT 2
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: LIST
31012: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31013: LD_VAR 0 6
31017: PPUSH
31018: CALL_OW 257
31022: PUSH
31023: LD_INT 17
31025: EQUAL
31026: IFFALSE 31047
// points := [ 100 , 50 , 75 ] ;
31028: LD_ADDR_VAR 0 9
31032: PUSH
31033: LD_INT 100
31035: PUSH
31036: LD_INT 50
31038: PUSH
31039: LD_INT 75
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: LIST
31046: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31047: LD_VAR 0 6
31051: PPUSH
31052: CALL_OW 257
31056: PUSH
31057: LD_INT 15
31059: EQUAL
31060: IFFALSE 31081
// points := [ 10 , 5 , 3 ] ;
31062: LD_ADDR_VAR 0 9
31066: PUSH
31067: LD_INT 10
31069: PUSH
31070: LD_INT 5
31072: PUSH
31073: LD_INT 3
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: LIST
31080: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31081: LD_VAR 0 6
31085: PPUSH
31086: CALL_OW 257
31090: PUSH
31091: LD_INT 14
31093: EQUAL
31094: IFFALSE 31115
// points := [ 10 , 0 , 0 ] ;
31096: LD_ADDR_VAR 0 9
31100: PUSH
31101: LD_INT 10
31103: PUSH
31104: LD_INT 0
31106: PUSH
31107: LD_INT 0
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: LIST
31114: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31115: LD_VAR 0 6
31119: PPUSH
31120: CALL_OW 257
31124: PUSH
31125: LD_INT 11
31127: EQUAL
31128: IFFALSE 31149
// points := [ 30 , 10 , 5 ] ;
31130: LD_ADDR_VAR 0 9
31134: PUSH
31135: LD_INT 30
31137: PUSH
31138: LD_INT 10
31140: PUSH
31141: LD_INT 5
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: LIST
31148: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31149: LD_VAR 0 1
31153: PPUSH
31154: LD_INT 5
31156: PPUSH
31157: CALL_OW 321
31161: PUSH
31162: LD_INT 2
31164: EQUAL
31165: IFFALSE 31182
// bpoints := bpoints * 1.8 ;
31167: LD_ADDR_VAR 0 10
31171: PUSH
31172: LD_VAR 0 10
31176: PUSH
31177: LD_REAL  1.80000000000000E+0000
31180: MUL
31181: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31182: LD_VAR 0 6
31186: PPUSH
31187: CALL_OW 257
31191: PUSH
31192: LD_INT 1
31194: PUSH
31195: LD_INT 2
31197: PUSH
31198: LD_INT 3
31200: PUSH
31201: LD_INT 4
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: IN
31210: IFFALSE 31230
31212: PUSH
31213: LD_VAR 0 1
31217: PPUSH
31218: LD_INT 51
31220: PPUSH
31221: CALL_OW 321
31225: PUSH
31226: LD_INT 2
31228: EQUAL
31229: AND
31230: IFFALSE 31247
// bpoints := bpoints * 1.2 ;
31232: LD_ADDR_VAR 0 10
31236: PUSH
31237: LD_VAR 0 10
31241: PUSH
31242: LD_REAL  1.20000000000000E+0000
31245: MUL
31246: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31247: LD_VAR 0 6
31251: PPUSH
31252: CALL_OW 257
31256: PUSH
31257: LD_INT 5
31259: PUSH
31260: LD_INT 7
31262: PUSH
31263: LD_INT 9
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: LIST
31270: IN
31271: IFFALSE 31291
31273: PUSH
31274: LD_VAR 0 1
31278: PPUSH
31279: LD_INT 52
31281: PPUSH
31282: CALL_OW 321
31286: PUSH
31287: LD_INT 2
31289: EQUAL
31290: AND
31291: IFFALSE 31308
// bpoints := bpoints * 1.5 ;
31293: LD_ADDR_VAR 0 10
31297: PUSH
31298: LD_VAR 0 10
31302: PUSH
31303: LD_REAL  1.50000000000000E+0000
31306: MUL
31307: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31308: LD_VAR 0 1
31312: PPUSH
31313: LD_INT 66
31315: PPUSH
31316: CALL_OW 321
31320: PUSH
31321: LD_INT 2
31323: EQUAL
31324: IFFALSE 31341
// bpoints := bpoints * 1.1 ;
31326: LD_ADDR_VAR 0 10
31330: PUSH
31331: LD_VAR 0 10
31335: PUSH
31336: LD_REAL  1.10000000000000E+0000
31339: MUL
31340: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31341: LD_ADDR_VAR 0 10
31345: PUSH
31346: LD_VAR 0 10
31350: PUSH
31351: LD_VAR 0 6
31355: PPUSH
31356: LD_INT 1
31358: PPUSH
31359: CALL_OW 259
31363: PUSH
31364: LD_REAL  1.15000000000000E+0000
31367: MUL
31368: MUL
31369: ST_TO_ADDR
// end ; unit_vehicle :
31370: GO 32200
31372: LD_INT 2
31374: DOUBLE
31375: EQUAL
31376: IFTRUE 31380
31378: GO 32188
31380: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31381: LD_VAR 0 6
31385: PPUSH
31386: CALL_OW 264
31390: PUSH
31391: LD_INT 2
31393: PUSH
31394: LD_INT 42
31396: PUSH
31397: LD_INT 24
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: LIST
31404: IN
31405: IFFALSE 31426
// points := [ 25 , 5 , 3 ] ;
31407: LD_ADDR_VAR 0 9
31411: PUSH
31412: LD_INT 25
31414: PUSH
31415: LD_INT 5
31417: PUSH
31418: LD_INT 3
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: LIST
31425: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31426: LD_VAR 0 6
31430: PPUSH
31431: CALL_OW 264
31435: PUSH
31436: LD_INT 4
31438: PUSH
31439: LD_INT 43
31441: PUSH
31442: LD_INT 25
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: LIST
31449: IN
31450: IFFALSE 31471
// points := [ 40 , 15 , 5 ] ;
31452: LD_ADDR_VAR 0 9
31456: PUSH
31457: LD_INT 40
31459: PUSH
31460: LD_INT 15
31462: PUSH
31463: LD_INT 5
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: LIST
31470: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31471: LD_VAR 0 6
31475: PPUSH
31476: CALL_OW 264
31480: PUSH
31481: LD_INT 3
31483: PUSH
31484: LD_INT 23
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: IN
31491: IFFALSE 31512
// points := [ 7 , 25 , 8 ] ;
31493: LD_ADDR_VAR 0 9
31497: PUSH
31498: LD_INT 7
31500: PUSH
31501: LD_INT 25
31503: PUSH
31504: LD_INT 8
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: LIST
31511: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31512: LD_VAR 0 6
31516: PPUSH
31517: CALL_OW 264
31521: PUSH
31522: LD_INT 5
31524: PUSH
31525: LD_INT 27
31527: PUSH
31528: LD_INT 44
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: LIST
31535: IN
31536: IFFALSE 31557
// points := [ 14 , 50 , 16 ] ;
31538: LD_ADDR_VAR 0 9
31542: PUSH
31543: LD_INT 14
31545: PUSH
31546: LD_INT 50
31548: PUSH
31549: LD_INT 16
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: LIST
31556: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31557: LD_VAR 0 6
31561: PPUSH
31562: CALL_OW 264
31566: PUSH
31567: LD_INT 6
31569: PUSH
31570: LD_INT 46
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: IN
31577: IFFALSE 31598
// points := [ 32 , 120 , 70 ] ;
31579: LD_ADDR_VAR 0 9
31583: PUSH
31584: LD_INT 32
31586: PUSH
31587: LD_INT 120
31589: PUSH
31590: LD_INT 70
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: LIST
31597: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31598: LD_VAR 0 6
31602: PPUSH
31603: CALL_OW 264
31607: PUSH
31608: LD_INT 7
31610: PUSH
31611: LD_INT 28
31613: PUSH
31614: LD_INT 45
31616: PUSH
31617: LD_INT 92
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: IN
31626: IFFALSE 31647
// points := [ 35 , 20 , 45 ] ;
31628: LD_ADDR_VAR 0 9
31632: PUSH
31633: LD_INT 35
31635: PUSH
31636: LD_INT 20
31638: PUSH
31639: LD_INT 45
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: LIST
31646: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31647: LD_VAR 0 6
31651: PPUSH
31652: CALL_OW 264
31656: PUSH
31657: LD_INT 47
31659: PUSH
31660: EMPTY
31661: LIST
31662: IN
31663: IFFALSE 31684
// points := [ 67 , 45 , 75 ] ;
31665: LD_ADDR_VAR 0 9
31669: PUSH
31670: LD_INT 67
31672: PUSH
31673: LD_INT 45
31675: PUSH
31676: LD_INT 75
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: LIST
31683: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31684: LD_VAR 0 6
31688: PPUSH
31689: CALL_OW 264
31693: PUSH
31694: LD_INT 26
31696: PUSH
31697: EMPTY
31698: LIST
31699: IN
31700: IFFALSE 31721
// points := [ 120 , 30 , 80 ] ;
31702: LD_ADDR_VAR 0 9
31706: PUSH
31707: LD_INT 120
31709: PUSH
31710: LD_INT 30
31712: PUSH
31713: LD_INT 80
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: LIST
31720: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31721: LD_VAR 0 6
31725: PPUSH
31726: CALL_OW 264
31730: PUSH
31731: LD_INT 22
31733: PUSH
31734: EMPTY
31735: LIST
31736: IN
31737: IFFALSE 31758
// points := [ 40 , 1 , 1 ] ;
31739: LD_ADDR_VAR 0 9
31743: PUSH
31744: LD_INT 40
31746: PUSH
31747: LD_INT 1
31749: PUSH
31750: LD_INT 1
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: LIST
31757: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31758: LD_VAR 0 6
31762: PPUSH
31763: CALL_OW 264
31767: PUSH
31768: LD_INT 29
31770: PUSH
31771: EMPTY
31772: LIST
31773: IN
31774: IFFALSE 31795
// points := [ 70 , 200 , 400 ] ;
31776: LD_ADDR_VAR 0 9
31780: PUSH
31781: LD_INT 70
31783: PUSH
31784: LD_INT 200
31786: PUSH
31787: LD_INT 400
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: LIST
31794: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31795: LD_VAR 0 6
31799: PPUSH
31800: CALL_OW 264
31804: PUSH
31805: LD_INT 14
31807: PUSH
31808: LD_INT 53
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: IN
31815: IFFALSE 31836
// points := [ 40 , 10 , 20 ] ;
31817: LD_ADDR_VAR 0 9
31821: PUSH
31822: LD_INT 40
31824: PUSH
31825: LD_INT 10
31827: PUSH
31828: LD_INT 20
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: LIST
31835: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31836: LD_VAR 0 6
31840: PPUSH
31841: CALL_OW 264
31845: PUSH
31846: LD_INT 9
31848: PUSH
31849: EMPTY
31850: LIST
31851: IN
31852: IFFALSE 31873
// points := [ 5 , 70 , 20 ] ;
31854: LD_ADDR_VAR 0 9
31858: PUSH
31859: LD_INT 5
31861: PUSH
31862: LD_INT 70
31864: PUSH
31865: LD_INT 20
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: LIST
31872: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31873: LD_VAR 0 6
31877: PPUSH
31878: CALL_OW 264
31882: PUSH
31883: LD_INT 10
31885: PUSH
31886: EMPTY
31887: LIST
31888: IN
31889: IFFALSE 31910
// points := [ 35 , 110 , 70 ] ;
31891: LD_ADDR_VAR 0 9
31895: PUSH
31896: LD_INT 35
31898: PUSH
31899: LD_INT 110
31901: PUSH
31902: LD_INT 70
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: LIST
31909: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31910: LD_VAR 0 6
31914: PPUSH
31915: CALL_OW 265
31919: PUSH
31920: LD_INT 25
31922: EQUAL
31923: IFFALSE 31944
// points := [ 80 , 65 , 100 ] ;
31925: LD_ADDR_VAR 0 9
31929: PUSH
31930: LD_INT 80
31932: PUSH
31933: LD_INT 65
31935: PUSH
31936: LD_INT 100
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: LIST
31943: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31944: LD_VAR 0 6
31948: PPUSH
31949: CALL_OW 263
31953: PUSH
31954: LD_INT 1
31956: EQUAL
31957: IFFALSE 31992
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31959: LD_ADDR_VAR 0 10
31963: PUSH
31964: LD_VAR 0 10
31968: PUSH
31969: LD_VAR 0 6
31973: PPUSH
31974: CALL_OW 311
31978: PPUSH
31979: LD_INT 3
31981: PPUSH
31982: CALL_OW 259
31986: PUSH
31987: LD_INT 4
31989: MUL
31990: MUL
31991: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31992: LD_VAR 0 6
31996: PPUSH
31997: CALL_OW 263
32001: PUSH
32002: LD_INT 2
32004: EQUAL
32005: IFFALSE 32056
// begin j := IsControledBy ( i ) ;
32007: LD_ADDR_VAR 0 7
32011: PUSH
32012: LD_VAR 0 6
32016: PPUSH
32017: CALL_OW 312
32021: ST_TO_ADDR
// if j then
32022: LD_VAR 0 7
32026: IFFALSE 32056
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32028: LD_ADDR_VAR 0 10
32032: PUSH
32033: LD_VAR 0 10
32037: PUSH
32038: LD_VAR 0 7
32042: PPUSH
32043: LD_INT 3
32045: PPUSH
32046: CALL_OW 259
32050: PUSH
32051: LD_INT 3
32053: MUL
32054: MUL
32055: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32056: LD_VAR 0 6
32060: PPUSH
32061: CALL_OW 264
32065: PUSH
32066: LD_INT 5
32068: PUSH
32069: LD_INT 6
32071: PUSH
32072: LD_INT 46
32074: PUSH
32075: LD_INT 44
32077: PUSH
32078: LD_INT 47
32080: PUSH
32081: LD_INT 45
32083: PUSH
32084: LD_INT 28
32086: PUSH
32087: LD_INT 7
32089: PUSH
32090: LD_INT 27
32092: PUSH
32093: LD_INT 29
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: IN
32108: IFFALSE 32128
32110: PUSH
32111: LD_VAR 0 1
32115: PPUSH
32116: LD_INT 52
32118: PPUSH
32119: CALL_OW 321
32123: PUSH
32124: LD_INT 2
32126: EQUAL
32127: AND
32128: IFFALSE 32145
// bpoints := bpoints * 1.2 ;
32130: LD_ADDR_VAR 0 10
32134: PUSH
32135: LD_VAR 0 10
32139: PUSH
32140: LD_REAL  1.20000000000000E+0000
32143: MUL
32144: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32145: LD_VAR 0 6
32149: PPUSH
32150: CALL_OW 264
32154: PUSH
32155: LD_INT 6
32157: PUSH
32158: LD_INT 46
32160: PUSH
32161: LD_INT 47
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: LIST
32168: IN
32169: IFFALSE 32186
// bpoints := bpoints * 1.2 ;
32171: LD_ADDR_VAR 0 10
32175: PUSH
32176: LD_VAR 0 10
32180: PUSH
32181: LD_REAL  1.20000000000000E+0000
32184: MUL
32185: ST_TO_ADDR
// end ; unit_building :
32186: GO 32200
32188: LD_INT 3
32190: DOUBLE
32191: EQUAL
32192: IFTRUE 32196
32194: GO 32199
32196: POP
// ; end ;
32197: GO 32200
32199: POP
// for j = 1 to 3 do
32200: LD_ADDR_VAR 0 7
32204: PUSH
32205: DOUBLE
32206: LD_INT 1
32208: DEC
32209: ST_TO_ADDR
32210: LD_INT 3
32212: PUSH
32213: FOR_TO
32214: IFFALSE 32267
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32216: LD_ADDR_VAR 0 5
32220: PUSH
32221: LD_VAR 0 5
32225: PPUSH
32226: LD_VAR 0 7
32230: PPUSH
32231: LD_VAR 0 5
32235: PUSH
32236: LD_VAR 0 7
32240: ARRAY
32241: PUSH
32242: LD_VAR 0 9
32246: PUSH
32247: LD_VAR 0 7
32251: ARRAY
32252: PUSH
32253: LD_VAR 0 10
32257: MUL
32258: PLUS
32259: PPUSH
32260: CALL_OW 1
32264: ST_TO_ADDR
32265: GO 32213
32267: POP
32268: POP
// end ;
32269: GO 30742
32271: POP
32272: POP
// result := Replace ( result , 4 , tmp ) ;
32273: LD_ADDR_VAR 0 5
32277: PUSH
32278: LD_VAR 0 5
32282: PPUSH
32283: LD_INT 4
32285: PPUSH
32286: LD_VAR 0 8
32290: PPUSH
32291: CALL_OW 1
32295: ST_TO_ADDR
// end ;
32296: LD_VAR 0 5
32300: RET
// export function DangerAtRange ( unit , range ) ; begin
32301: LD_INT 0
32303: PPUSH
// if not unit then
32304: LD_VAR 0 1
32308: NOT
32309: IFFALSE 32313
// exit ;
32311: GO 32358
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32313: LD_ADDR_VAR 0 3
32317: PUSH
32318: LD_VAR 0 1
32322: PPUSH
32323: CALL_OW 255
32327: PPUSH
32328: LD_VAR 0 1
32332: PPUSH
32333: CALL_OW 250
32337: PPUSH
32338: LD_VAR 0 1
32342: PPUSH
32343: CALL_OW 251
32347: PPUSH
32348: LD_VAR 0 2
32352: PPUSH
32353: CALL 30592 0 4
32357: ST_TO_ADDR
// end ;
32358: LD_VAR 0 3
32362: RET
// export function DangerInArea ( side , area ) ; begin
32363: LD_INT 0
32365: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32366: LD_ADDR_VAR 0 3
32370: PUSH
32371: LD_VAR 0 2
32375: PPUSH
32376: LD_INT 81
32378: PUSH
32379: LD_VAR 0 1
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PPUSH
32388: CALL_OW 70
32392: ST_TO_ADDR
// end ;
32393: LD_VAR 0 3
32397: RET
// export function IsExtension ( b ) ; begin
32398: LD_INT 0
32400: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32401: LD_ADDR_VAR 0 2
32405: PUSH
32406: LD_VAR 0 1
32410: PUSH
32411: LD_INT 23
32413: PUSH
32414: LD_INT 20
32416: PUSH
32417: LD_INT 22
32419: PUSH
32420: LD_INT 17
32422: PUSH
32423: LD_INT 24
32425: PUSH
32426: LD_INT 21
32428: PUSH
32429: LD_INT 19
32431: PUSH
32432: LD_INT 16
32434: PUSH
32435: LD_INT 25
32437: PUSH
32438: LD_INT 18
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: IN
32453: ST_TO_ADDR
// end ;
32454: LD_VAR 0 2
32458: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32459: LD_INT 0
32461: PPUSH
32462: PPUSH
32463: PPUSH
// result := [ ] ;
32464: LD_ADDR_VAR 0 4
32468: PUSH
32469: EMPTY
32470: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32471: LD_ADDR_VAR 0 5
32475: PUSH
32476: LD_VAR 0 2
32480: PPUSH
32481: LD_INT 21
32483: PUSH
32484: LD_INT 3
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PPUSH
32491: CALL_OW 70
32495: ST_TO_ADDR
// if not tmp then
32496: LD_VAR 0 5
32500: NOT
32501: IFFALSE 32505
// exit ;
32503: GO 32569
// if checkLink then
32505: LD_VAR 0 3
32509: IFFALSE 32559
// begin for i in tmp do
32511: LD_ADDR_VAR 0 6
32515: PUSH
32516: LD_VAR 0 5
32520: PUSH
32521: FOR_IN
32522: IFFALSE 32557
// if GetBase ( i ) <> base then
32524: LD_VAR 0 6
32528: PPUSH
32529: CALL_OW 274
32533: PUSH
32534: LD_VAR 0 1
32538: NONEQUAL
32539: IFFALSE 32555
// ComLinkToBase ( base , i ) ;
32541: LD_VAR 0 1
32545: PPUSH
32546: LD_VAR 0 6
32550: PPUSH
32551: CALL_OW 169
32555: GO 32521
32557: POP
32558: POP
// end ; result := tmp ;
32559: LD_ADDR_VAR 0 4
32563: PUSH
32564: LD_VAR 0 5
32568: ST_TO_ADDR
// end ;
32569: LD_VAR 0 4
32573: RET
// export function ComComplete ( units , b ) ; var i ; begin
32574: LD_INT 0
32576: PPUSH
32577: PPUSH
// if not units then
32578: LD_VAR 0 1
32582: NOT
32583: IFFALSE 32587
// exit ;
32585: GO 32677
// for i in units do
32587: LD_ADDR_VAR 0 4
32591: PUSH
32592: LD_VAR 0 1
32596: PUSH
32597: FOR_IN
32598: IFFALSE 32675
// if BuildingStatus ( b ) = bs_build then
32600: LD_VAR 0 2
32604: PPUSH
32605: CALL_OW 461
32609: PUSH
32610: LD_INT 1
32612: EQUAL
32613: IFFALSE 32673
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32615: LD_VAR 0 4
32619: PPUSH
32620: LD_STRING h
32622: PUSH
32623: LD_VAR 0 2
32627: PPUSH
32628: CALL_OW 250
32632: PUSH
32633: LD_VAR 0 2
32637: PPUSH
32638: CALL_OW 251
32642: PUSH
32643: LD_VAR 0 2
32647: PUSH
32648: LD_INT 0
32650: PUSH
32651: LD_INT 0
32653: PUSH
32654: LD_INT 0
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: PUSH
32666: EMPTY
32667: LIST
32668: PPUSH
32669: CALL_OW 446
32673: GO 32597
32675: POP
32676: POP
// end ;
32677: LD_VAR 0 3
32681: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32682: LD_INT 0
32684: PPUSH
32685: PPUSH
32686: PPUSH
32687: PPUSH
32688: PPUSH
32689: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32690: LD_VAR 0 1
32694: NOT
32695: IFTRUE 32712
32697: PUSH
32698: LD_VAR 0 1
32702: PPUSH
32703: CALL_OW 263
32707: PUSH
32708: LD_INT 2
32710: NONEQUAL
32711: OR
32712: IFFALSE 32716
// exit ;
32714: GO 33032
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32716: LD_ADDR_VAR 0 6
32720: PUSH
32721: LD_INT 22
32723: PUSH
32724: LD_VAR 0 1
32728: PPUSH
32729: CALL_OW 255
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 2
32740: PUSH
32741: LD_INT 30
32743: PUSH
32744: LD_INT 36
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 34
32753: PUSH
32754: LD_INT 31
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: LIST
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PPUSH
32770: CALL_OW 69
32774: ST_TO_ADDR
// if not tmp then
32775: LD_VAR 0 6
32779: NOT
32780: IFFALSE 32784
// exit ;
32782: GO 33032
// result := [ ] ;
32784: LD_ADDR_VAR 0 2
32788: PUSH
32789: EMPTY
32790: ST_TO_ADDR
// for i in tmp do
32791: LD_ADDR_VAR 0 3
32795: PUSH
32796: LD_VAR 0 6
32800: PUSH
32801: FOR_IN
32802: IFFALSE 32873
// begin t := UnitsInside ( i ) ;
32804: LD_ADDR_VAR 0 4
32808: PUSH
32809: LD_VAR 0 3
32813: PPUSH
32814: CALL_OW 313
32818: ST_TO_ADDR
// if t then
32819: LD_VAR 0 4
32823: IFFALSE 32871
// for j in t do
32825: LD_ADDR_VAR 0 7
32829: PUSH
32830: LD_VAR 0 4
32834: PUSH
32835: FOR_IN
32836: IFFALSE 32869
// result := Replace ( result , result + 1 , j ) ;
32838: LD_ADDR_VAR 0 2
32842: PUSH
32843: LD_VAR 0 2
32847: PPUSH
32848: LD_VAR 0 2
32852: PUSH
32853: LD_INT 1
32855: PLUS
32856: PPUSH
32857: LD_VAR 0 7
32861: PPUSH
32862: CALL_OW 1
32866: ST_TO_ADDR
32867: GO 32835
32869: POP
32870: POP
// end ;
32871: GO 32801
32873: POP
32874: POP
// if not result then
32875: LD_VAR 0 2
32879: NOT
32880: IFFALSE 32884
// exit ;
32882: GO 33032
// mech := result [ 1 ] ;
32884: LD_ADDR_VAR 0 5
32888: PUSH
32889: LD_VAR 0 2
32893: PUSH
32894: LD_INT 1
32896: ARRAY
32897: ST_TO_ADDR
// if result > 1 then
32898: LD_VAR 0 2
32902: PUSH
32903: LD_INT 1
32905: GREATER
32906: IFFALSE 33018
// begin for i = 2 to result do
32908: LD_ADDR_VAR 0 3
32912: PUSH
32913: DOUBLE
32914: LD_INT 2
32916: DEC
32917: ST_TO_ADDR
32918: LD_VAR 0 2
32922: PUSH
32923: FOR_TO
32924: IFFALSE 33016
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32926: LD_ADDR_VAR 0 4
32930: PUSH
32931: LD_VAR 0 2
32935: PUSH
32936: LD_VAR 0 3
32940: ARRAY
32941: PPUSH
32942: LD_INT 3
32944: PPUSH
32945: CALL_OW 259
32949: PUSH
32950: LD_VAR 0 2
32954: PUSH
32955: LD_VAR 0 3
32959: ARRAY
32960: PPUSH
32961: CALL_OW 432
32965: MINUS
32966: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32967: LD_VAR 0 4
32971: PUSH
32972: LD_VAR 0 5
32976: PPUSH
32977: LD_INT 3
32979: PPUSH
32980: CALL_OW 259
32984: PUSH
32985: LD_VAR 0 5
32989: PPUSH
32990: CALL_OW 432
32994: MINUS
32995: GREATEREQUAL
32996: IFFALSE 33014
// mech := result [ i ] ;
32998: LD_ADDR_VAR 0 5
33002: PUSH
33003: LD_VAR 0 2
33007: PUSH
33008: LD_VAR 0 3
33012: ARRAY
33013: ST_TO_ADDR
// end ;
33014: GO 32923
33016: POP
33017: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33018: LD_VAR 0 1
33022: PPUSH
33023: LD_VAR 0 5
33027: PPUSH
33028: CALL_OW 135
// end ;
33032: LD_VAR 0 2
33036: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33037: LD_INT 0
33039: PPUSH
33040: PPUSH
33041: PPUSH
33042: PPUSH
33043: PPUSH
33044: PPUSH
33045: PPUSH
33046: PPUSH
33047: PPUSH
33048: PPUSH
33049: PPUSH
33050: PPUSH
33051: PPUSH
// result := [ ] ;
33052: LD_ADDR_VAR 0 7
33056: PUSH
33057: EMPTY
33058: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33059: LD_VAR 0 1
33063: PPUSH
33064: CALL_OW 266
33068: PUSH
33069: LD_INT 0
33071: PUSH
33072: LD_INT 1
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: IN
33079: NOT
33080: IFFALSE 33084
// exit ;
33082: GO 34724
// if name then
33084: LD_VAR 0 3
33088: IFFALSE 33104
// SetBName ( base_dep , name ) ;
33090: LD_VAR 0 1
33094: PPUSH
33095: LD_VAR 0 3
33099: PPUSH
33100: CALL_OW 500
// base := GetBase ( base_dep ) ;
33104: LD_ADDR_VAR 0 15
33108: PUSH
33109: LD_VAR 0 1
33113: PPUSH
33114: CALL_OW 274
33118: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33119: LD_ADDR_VAR 0 16
33123: PUSH
33124: LD_VAR 0 1
33128: PPUSH
33129: CALL_OW 255
33133: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33134: LD_ADDR_VAR 0 17
33138: PUSH
33139: LD_VAR 0 1
33143: PPUSH
33144: CALL_OW 248
33148: ST_TO_ADDR
// if sources then
33149: LD_VAR 0 5
33153: IFFALSE 33200
// for i = 1 to 3 do
33155: LD_ADDR_VAR 0 8
33159: PUSH
33160: DOUBLE
33161: LD_INT 1
33163: DEC
33164: ST_TO_ADDR
33165: LD_INT 3
33167: PUSH
33168: FOR_TO
33169: IFFALSE 33198
// AddResourceType ( base , i , sources [ i ] ) ;
33171: LD_VAR 0 15
33175: PPUSH
33176: LD_VAR 0 8
33180: PPUSH
33181: LD_VAR 0 5
33185: PUSH
33186: LD_VAR 0 8
33190: ARRAY
33191: PPUSH
33192: CALL_OW 276
33196: GO 33168
33198: POP
33199: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33200: LD_ADDR_VAR 0 18
33204: PUSH
33205: LD_VAR 0 15
33209: PPUSH
33210: LD_VAR 0 2
33214: PPUSH
33215: LD_INT 1
33217: PPUSH
33218: CALL 32459 0 3
33222: ST_TO_ADDR
// InitHc ;
33223: CALL_OW 19
// InitUc ;
33227: CALL_OW 18
// uc_side := side ;
33231: LD_ADDR_OWVAR 20
33235: PUSH
33236: LD_VAR 0 16
33240: ST_TO_ADDR
// uc_nation := nation ;
33241: LD_ADDR_OWVAR 21
33245: PUSH
33246: LD_VAR 0 17
33250: ST_TO_ADDR
// if buildings then
33251: LD_VAR 0 18
33255: IFFALSE 34583
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33257: LD_ADDR_VAR 0 19
33261: PUSH
33262: LD_VAR 0 18
33266: PPUSH
33267: LD_INT 2
33269: PUSH
33270: LD_INT 30
33272: PUSH
33273: LD_INT 29
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PUSH
33280: LD_INT 30
33282: PUSH
33283: LD_INT 30
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: LIST
33294: PPUSH
33295: CALL_OW 72
33299: ST_TO_ADDR
// if tmp then
33300: LD_VAR 0 19
33304: IFFALSE 33352
// for i in tmp do
33306: LD_ADDR_VAR 0 8
33310: PUSH
33311: LD_VAR 0 19
33315: PUSH
33316: FOR_IN
33317: IFFALSE 33350
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33319: LD_VAR 0 8
33323: PPUSH
33324: CALL_OW 250
33328: PPUSH
33329: LD_VAR 0 8
33333: PPUSH
33334: CALL_OW 251
33338: PPUSH
33339: LD_VAR 0 16
33343: PPUSH
33344: CALL_OW 441
33348: GO 33316
33350: POP
33351: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33352: LD_VAR 0 18
33356: PPUSH
33357: LD_INT 2
33359: PUSH
33360: LD_INT 30
33362: PUSH
33363: LD_INT 32
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 30
33372: PUSH
33373: LD_INT 33
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: LIST
33384: PPUSH
33385: CALL_OW 72
33389: IFFALSE 33477
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33391: LD_ADDR_VAR 0 8
33395: PUSH
33396: LD_VAR 0 18
33400: PPUSH
33401: LD_INT 2
33403: PUSH
33404: LD_INT 30
33406: PUSH
33407: LD_INT 32
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PUSH
33414: LD_INT 30
33416: PUSH
33417: LD_INT 33
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: LIST
33428: PPUSH
33429: CALL_OW 72
33433: PUSH
33434: FOR_IN
33435: IFFALSE 33475
// begin if not GetBWeapon ( i ) then
33437: LD_VAR 0 8
33441: PPUSH
33442: CALL_OW 269
33446: NOT
33447: IFFALSE 33473
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33449: LD_VAR 0 8
33453: PPUSH
33454: LD_VAR 0 8
33458: PPUSH
33459: LD_VAR 0 2
33463: PPUSH
33464: CALL 34729 0 2
33468: PPUSH
33469: CALL_OW 431
// end ;
33473: GO 33434
33475: POP
33476: POP
// end ; for i = 1 to personel do
33477: LD_ADDR_VAR 0 8
33481: PUSH
33482: DOUBLE
33483: LD_INT 1
33485: DEC
33486: ST_TO_ADDR
33487: LD_VAR 0 6
33491: PUSH
33492: FOR_TO
33493: IFFALSE 34563
// begin if i > 4 then
33495: LD_VAR 0 8
33499: PUSH
33500: LD_INT 4
33502: GREATER
33503: IFFALSE 33507
// break ;
33505: GO 34563
// case i of 1 :
33507: LD_VAR 0 8
33511: PUSH
33512: LD_INT 1
33514: DOUBLE
33515: EQUAL
33516: IFTRUE 33520
33518: GO 33600
33520: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33521: LD_ADDR_VAR 0 12
33525: PUSH
33526: LD_VAR 0 18
33530: PPUSH
33531: LD_INT 22
33533: PUSH
33534: LD_VAR 0 16
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 58
33545: PUSH
33546: EMPTY
33547: LIST
33548: PUSH
33549: LD_INT 2
33551: PUSH
33552: LD_INT 30
33554: PUSH
33555: LD_INT 32
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: PUSH
33562: LD_INT 30
33564: PUSH
33565: LD_INT 4
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: PUSH
33572: LD_INT 30
33574: PUSH
33575: LD_INT 5
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: LIST
33592: PPUSH
33593: CALL_OW 72
33597: ST_TO_ADDR
33598: GO 33822
33600: LD_INT 2
33602: DOUBLE
33603: EQUAL
33604: IFTRUE 33608
33606: GO 33670
33608: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33609: LD_ADDR_VAR 0 12
33613: PUSH
33614: LD_VAR 0 18
33618: PPUSH
33619: LD_INT 22
33621: PUSH
33622: LD_VAR 0 16
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: PUSH
33631: LD_INT 2
33633: PUSH
33634: LD_INT 30
33636: PUSH
33637: LD_INT 0
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 30
33646: PUSH
33647: LD_INT 1
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: LIST
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PPUSH
33663: CALL_OW 72
33667: ST_TO_ADDR
33668: GO 33822
33670: LD_INT 3
33672: DOUBLE
33673: EQUAL
33674: IFTRUE 33678
33676: GO 33740
33678: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33679: LD_ADDR_VAR 0 12
33683: PUSH
33684: LD_VAR 0 18
33688: PPUSH
33689: LD_INT 22
33691: PUSH
33692: LD_VAR 0 16
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 2
33703: PUSH
33704: LD_INT 30
33706: PUSH
33707: LD_INT 2
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 30
33716: PUSH
33717: LD_INT 3
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: LIST
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: PPUSH
33733: CALL_OW 72
33737: ST_TO_ADDR
33738: GO 33822
33740: LD_INT 4
33742: DOUBLE
33743: EQUAL
33744: IFTRUE 33748
33746: GO 33821
33748: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33749: LD_ADDR_VAR 0 12
33753: PUSH
33754: LD_VAR 0 18
33758: PPUSH
33759: LD_INT 22
33761: PUSH
33762: LD_VAR 0 16
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: PUSH
33771: LD_INT 2
33773: PUSH
33774: LD_INT 30
33776: PUSH
33777: LD_INT 6
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: PUSH
33784: LD_INT 30
33786: PUSH
33787: LD_INT 7
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: PUSH
33794: LD_INT 30
33796: PUSH
33797: LD_INT 8
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PPUSH
33814: CALL_OW 72
33818: ST_TO_ADDR
33819: GO 33822
33821: POP
// if i = 1 then
33822: LD_VAR 0 8
33826: PUSH
33827: LD_INT 1
33829: EQUAL
33830: IFFALSE 33941
// begin tmp := [ ] ;
33832: LD_ADDR_VAR 0 19
33836: PUSH
33837: EMPTY
33838: ST_TO_ADDR
// for j in f do
33839: LD_ADDR_VAR 0 9
33843: PUSH
33844: LD_VAR 0 12
33848: PUSH
33849: FOR_IN
33850: IFFALSE 33923
// if GetBType ( j ) = b_bunker then
33852: LD_VAR 0 9
33856: PPUSH
33857: CALL_OW 266
33861: PUSH
33862: LD_INT 32
33864: EQUAL
33865: IFFALSE 33892
// tmp := Insert ( tmp , 1 , j ) else
33867: LD_ADDR_VAR 0 19
33871: PUSH
33872: LD_VAR 0 19
33876: PPUSH
33877: LD_INT 1
33879: PPUSH
33880: LD_VAR 0 9
33884: PPUSH
33885: CALL_OW 2
33889: ST_TO_ADDR
33890: GO 33921
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33892: LD_ADDR_VAR 0 19
33896: PUSH
33897: LD_VAR 0 19
33901: PPUSH
33902: LD_VAR 0 19
33906: PUSH
33907: LD_INT 1
33909: PLUS
33910: PPUSH
33911: LD_VAR 0 9
33915: PPUSH
33916: CALL_OW 2
33920: ST_TO_ADDR
33921: GO 33849
33923: POP
33924: POP
// if tmp then
33925: LD_VAR 0 19
33929: IFFALSE 33941
// f := tmp ;
33931: LD_ADDR_VAR 0 12
33935: PUSH
33936: LD_VAR 0 19
33940: ST_TO_ADDR
// end ; x := personel [ i ] ;
33941: LD_ADDR_VAR 0 13
33945: PUSH
33946: LD_VAR 0 6
33950: PUSH
33951: LD_VAR 0 8
33955: ARRAY
33956: ST_TO_ADDR
// if x = - 1 then
33957: LD_VAR 0 13
33961: PUSH
33962: LD_INT 1
33964: NEG
33965: EQUAL
33966: IFFALSE 34177
// begin for j in f do
33968: LD_ADDR_VAR 0 9
33972: PUSH
33973: LD_VAR 0 12
33977: PUSH
33978: FOR_IN
33979: IFFALSE 34173
// repeat InitHc ;
33981: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33985: LD_VAR 0 9
33989: PPUSH
33990: CALL_OW 266
33994: PUSH
33995: LD_INT 5
33997: EQUAL
33998: IFFALSE 34068
// begin if UnitsInside ( j ) < 3 then
34000: LD_VAR 0 9
34004: PPUSH
34005: CALL_OW 313
34009: PUSH
34010: LD_INT 3
34012: LESS
34013: IFFALSE 34049
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34015: LD_INT 0
34017: PPUSH
34018: LD_INT 5
34020: PUSH
34021: LD_INT 8
34023: PUSH
34024: LD_INT 9
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: LIST
34031: PUSH
34032: LD_VAR 0 17
34036: ARRAY
34037: PPUSH
34038: LD_VAR 0 4
34042: PPUSH
34043: CALL_OW 380
34047: GO 34066
// PrepareHuman ( false , i , skill ) ;
34049: LD_INT 0
34051: PPUSH
34052: LD_VAR 0 8
34056: PPUSH
34057: LD_VAR 0 4
34061: PPUSH
34062: CALL_OW 380
// end else
34066: GO 34085
// PrepareHuman ( false , i , skill ) ;
34068: LD_INT 0
34070: PPUSH
34071: LD_VAR 0 8
34075: PPUSH
34076: LD_VAR 0 4
34080: PPUSH
34081: CALL_OW 380
// un := CreateHuman ;
34085: LD_ADDR_VAR 0 14
34089: PUSH
34090: CALL_OW 44
34094: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34095: LD_ADDR_VAR 0 7
34099: PUSH
34100: LD_VAR 0 7
34104: PPUSH
34105: LD_INT 1
34107: PPUSH
34108: LD_VAR 0 14
34112: PPUSH
34113: CALL_OW 2
34117: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34118: LD_VAR 0 14
34122: PPUSH
34123: LD_VAR 0 9
34127: PPUSH
34128: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34132: LD_VAR 0 9
34136: PPUSH
34137: CALL_OW 313
34141: PUSH
34142: LD_INT 6
34144: EQUAL
34145: IFTRUE 34169
34147: PUSH
34148: LD_VAR 0 9
34152: PPUSH
34153: CALL_OW 266
34157: PUSH
34158: LD_INT 32
34160: PUSH
34161: LD_INT 31
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: IN
34168: OR
34169: IFFALSE 33981
34171: GO 33978
34173: POP
34174: POP
// end else
34175: GO 34561
// for j = 1 to x do
34177: LD_ADDR_VAR 0 9
34181: PUSH
34182: DOUBLE
34183: LD_INT 1
34185: DEC
34186: ST_TO_ADDR
34187: LD_VAR 0 13
34191: PUSH
34192: FOR_TO
34193: IFFALSE 34559
// begin InitHc ;
34195: CALL_OW 19
// if not f then
34199: LD_VAR 0 12
34203: NOT
34204: IFFALSE 34293
// begin PrepareHuman ( false , i , skill ) ;
34206: LD_INT 0
34208: PPUSH
34209: LD_VAR 0 8
34213: PPUSH
34214: LD_VAR 0 4
34218: PPUSH
34219: CALL_OW 380
// un := CreateHuman ;
34223: LD_ADDR_VAR 0 14
34227: PUSH
34228: CALL_OW 44
34232: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34233: LD_ADDR_VAR 0 7
34237: PUSH
34238: LD_VAR 0 7
34242: PPUSH
34243: LD_INT 1
34245: PPUSH
34246: LD_VAR 0 14
34250: PPUSH
34251: CALL_OW 2
34255: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34256: LD_VAR 0 14
34260: PPUSH
34261: LD_VAR 0 1
34265: PPUSH
34266: CALL_OW 250
34270: PPUSH
34271: LD_VAR 0 1
34275: PPUSH
34276: CALL_OW 251
34280: PPUSH
34281: LD_INT 10
34283: PPUSH
34284: LD_INT 0
34286: PPUSH
34287: CALL_OW 50
// continue ;
34291: GO 34192
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34293: LD_VAR 0 12
34297: PUSH
34298: LD_INT 1
34300: ARRAY
34301: PPUSH
34302: CALL_OW 313
34306: IFFALSE 34334
34308: PUSH
34309: LD_VAR 0 12
34313: PUSH
34314: LD_INT 1
34316: ARRAY
34317: PPUSH
34318: CALL_OW 266
34322: PUSH
34323: LD_INT 32
34325: PUSH
34326: LD_INT 31
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: IN
34333: AND
34334: IFTRUE 34355
34336: PUSH
34337: LD_VAR 0 12
34341: PUSH
34342: LD_INT 1
34344: ARRAY
34345: PPUSH
34346: CALL_OW 313
34350: PUSH
34351: LD_INT 6
34353: EQUAL
34354: OR
34355: IFFALSE 34375
// f := Delete ( f , 1 ) ;
34357: LD_ADDR_VAR 0 12
34361: PUSH
34362: LD_VAR 0 12
34366: PPUSH
34367: LD_INT 1
34369: PPUSH
34370: CALL_OW 3
34374: ST_TO_ADDR
// if not f then
34375: LD_VAR 0 12
34379: NOT
34380: IFFALSE 34398
// begin x := x + 2 ;
34382: LD_ADDR_VAR 0 13
34386: PUSH
34387: LD_VAR 0 13
34391: PUSH
34392: LD_INT 2
34394: PLUS
34395: ST_TO_ADDR
// continue ;
34396: GO 34192
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34398: LD_VAR 0 12
34402: PUSH
34403: LD_INT 1
34405: ARRAY
34406: PPUSH
34407: CALL_OW 266
34411: PUSH
34412: LD_INT 5
34414: EQUAL
34415: IFFALSE 34489
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34417: LD_VAR 0 12
34421: PUSH
34422: LD_INT 1
34424: ARRAY
34425: PPUSH
34426: CALL_OW 313
34430: PUSH
34431: LD_INT 3
34433: LESS
34434: IFFALSE 34470
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34436: LD_INT 0
34438: PPUSH
34439: LD_INT 5
34441: PUSH
34442: LD_INT 8
34444: PUSH
34445: LD_INT 9
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: LIST
34452: PUSH
34453: LD_VAR 0 17
34457: ARRAY
34458: PPUSH
34459: LD_VAR 0 4
34463: PPUSH
34464: CALL_OW 380
34468: GO 34487
// PrepareHuman ( false , i , skill ) ;
34470: LD_INT 0
34472: PPUSH
34473: LD_VAR 0 8
34477: PPUSH
34478: LD_VAR 0 4
34482: PPUSH
34483: CALL_OW 380
// end else
34487: GO 34506
// PrepareHuman ( false , i , skill ) ;
34489: LD_INT 0
34491: PPUSH
34492: LD_VAR 0 8
34496: PPUSH
34497: LD_VAR 0 4
34501: PPUSH
34502: CALL_OW 380
// un := CreateHuman ;
34506: LD_ADDR_VAR 0 14
34510: PUSH
34511: CALL_OW 44
34515: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34516: LD_ADDR_VAR 0 7
34520: PUSH
34521: LD_VAR 0 7
34525: PPUSH
34526: LD_INT 1
34528: PPUSH
34529: LD_VAR 0 14
34533: PPUSH
34534: CALL_OW 2
34538: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34539: LD_VAR 0 14
34543: PPUSH
34544: LD_VAR 0 12
34548: PUSH
34549: LD_INT 1
34551: ARRAY
34552: PPUSH
34553: CALL_OW 52
// end ;
34557: GO 34192
34559: POP
34560: POP
// end ;
34561: GO 33492
34563: POP
34564: POP
// result := result ^ buildings ;
34565: LD_ADDR_VAR 0 7
34569: PUSH
34570: LD_VAR 0 7
34574: PUSH
34575: LD_VAR 0 18
34579: ADD
34580: ST_TO_ADDR
// end else
34581: GO 34724
// begin for i = 1 to personel do
34583: LD_ADDR_VAR 0 8
34587: PUSH
34588: DOUBLE
34589: LD_INT 1
34591: DEC
34592: ST_TO_ADDR
34593: LD_VAR 0 6
34597: PUSH
34598: FOR_TO
34599: IFFALSE 34722
// begin if i > 4 then
34601: LD_VAR 0 8
34605: PUSH
34606: LD_INT 4
34608: GREATER
34609: IFFALSE 34613
// break ;
34611: GO 34722
// x := personel [ i ] ;
34613: LD_ADDR_VAR 0 13
34617: PUSH
34618: LD_VAR 0 6
34622: PUSH
34623: LD_VAR 0 8
34627: ARRAY
34628: ST_TO_ADDR
// if x = - 1 then
34629: LD_VAR 0 13
34633: PUSH
34634: LD_INT 1
34636: NEG
34637: EQUAL
34638: IFFALSE 34642
// continue ;
34640: GO 34598
// PrepareHuman ( false , i , skill ) ;
34642: LD_INT 0
34644: PPUSH
34645: LD_VAR 0 8
34649: PPUSH
34650: LD_VAR 0 4
34654: PPUSH
34655: CALL_OW 380
// un := CreateHuman ;
34659: LD_ADDR_VAR 0 14
34663: PUSH
34664: CALL_OW 44
34668: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34669: LD_VAR 0 14
34673: PPUSH
34674: LD_VAR 0 1
34678: PPUSH
34679: CALL_OW 250
34683: PPUSH
34684: LD_VAR 0 1
34688: PPUSH
34689: CALL_OW 251
34693: PPUSH
34694: LD_INT 10
34696: PPUSH
34697: LD_INT 0
34699: PPUSH
34700: CALL_OW 50
// result := result ^ un ;
34704: LD_ADDR_VAR 0 7
34708: PUSH
34709: LD_VAR 0 7
34713: PUSH
34714: LD_VAR 0 14
34718: ADD
34719: ST_TO_ADDR
// end ;
34720: GO 34598
34722: POP
34723: POP
// end ; end ;
34724: LD_VAR 0 7
34728: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34729: LD_INT 0
34731: PPUSH
34732: PPUSH
34733: PPUSH
34734: PPUSH
34735: PPUSH
34736: PPUSH
34737: PPUSH
34738: PPUSH
34739: PPUSH
34740: PPUSH
34741: PPUSH
34742: PPUSH
34743: PPUSH
34744: PPUSH
34745: PPUSH
34746: PPUSH
// result := false ;
34747: LD_ADDR_VAR 0 3
34751: PUSH
34752: LD_INT 0
34754: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34755: LD_VAR 0 1
34759: NOT
34760: IFTRUE 34785
34762: PUSH
34763: LD_VAR 0 1
34767: PPUSH
34768: CALL_OW 266
34772: PUSH
34773: LD_INT 32
34775: PUSH
34776: LD_INT 33
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: IN
34783: NOT
34784: OR
34785: IFFALSE 34789
// exit ;
34787: GO 35924
// nat := GetNation ( tower ) ;
34789: LD_ADDR_VAR 0 12
34793: PUSH
34794: LD_VAR 0 1
34798: PPUSH
34799: CALL_OW 248
34803: ST_TO_ADDR
// side := GetSide ( tower ) ;
34804: LD_ADDR_VAR 0 16
34808: PUSH
34809: LD_VAR 0 1
34813: PPUSH
34814: CALL_OW 255
34818: ST_TO_ADDR
// x := GetX ( tower ) ;
34819: LD_ADDR_VAR 0 10
34823: PUSH
34824: LD_VAR 0 1
34828: PPUSH
34829: CALL_OW 250
34833: ST_TO_ADDR
// y := GetY ( tower ) ;
34834: LD_ADDR_VAR 0 11
34838: PUSH
34839: LD_VAR 0 1
34843: PPUSH
34844: CALL_OW 251
34848: ST_TO_ADDR
// if not x or not y then
34849: LD_VAR 0 10
34853: NOT
34854: IFTRUE 34863
34856: PUSH
34857: LD_VAR 0 11
34861: NOT
34862: OR
34863: IFFALSE 34867
// exit ;
34865: GO 35924
// weapon := 0 ;
34867: LD_ADDR_VAR 0 18
34871: PUSH
34872: LD_INT 0
34874: ST_TO_ADDR
// fac_list := [ ] ;
34875: LD_ADDR_VAR 0 17
34879: PUSH
34880: EMPTY
34881: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34882: LD_ADDR_VAR 0 6
34886: PUSH
34887: LD_VAR 0 1
34891: PPUSH
34892: CALL_OW 274
34896: PPUSH
34897: LD_VAR 0 2
34901: PPUSH
34902: LD_INT 0
34904: PPUSH
34905: CALL 32459 0 3
34909: PPUSH
34910: LD_INT 30
34912: PUSH
34913: LD_INT 3
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: PPUSH
34920: CALL_OW 72
34924: ST_TO_ADDR
// if not factories then
34925: LD_VAR 0 6
34929: NOT
34930: IFFALSE 34934
// exit ;
34932: GO 35924
// for i in factories do
34934: LD_ADDR_VAR 0 8
34938: PUSH
34939: LD_VAR 0 6
34943: PUSH
34944: FOR_IN
34945: IFFALSE 34970
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34947: LD_ADDR_VAR 0 17
34951: PUSH
34952: LD_VAR 0 17
34956: PUSH
34957: LD_VAR 0 8
34961: PPUSH
34962: CALL_OW 478
34966: UNION
34967: ST_TO_ADDR
34968: GO 34944
34970: POP
34971: POP
// if not fac_list then
34972: LD_VAR 0 17
34976: NOT
34977: IFFALSE 34981
// exit ;
34979: GO 35924
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34981: LD_ADDR_VAR 0 5
34985: PUSH
34986: LD_INT 4
34988: PUSH
34989: LD_INT 5
34991: PUSH
34992: LD_INT 9
34994: PUSH
34995: LD_INT 10
34997: PUSH
34998: LD_INT 6
35000: PUSH
35001: LD_INT 7
35003: PUSH
35004: LD_INT 11
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: PUSH
35016: LD_INT 27
35018: PUSH
35019: LD_INT 28
35021: PUSH
35022: LD_INT 26
35024: PUSH
35025: LD_INT 30
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: PUSH
35034: LD_INT 43
35036: PUSH
35037: LD_INT 44
35039: PUSH
35040: LD_INT 46
35042: PUSH
35043: LD_INT 45
35045: PUSH
35046: LD_INT 47
35048: PUSH
35049: LD_INT 49
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: LIST
35064: PUSH
35065: LD_VAR 0 12
35069: ARRAY
35070: ST_TO_ADDR
// list := list isect fac_list ;
35071: LD_ADDR_VAR 0 5
35075: PUSH
35076: LD_VAR 0 5
35080: PUSH
35081: LD_VAR 0 17
35085: ISECT
35086: ST_TO_ADDR
// if not list then
35087: LD_VAR 0 5
35091: NOT
35092: IFFALSE 35096
// exit ;
35094: GO 35924
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35096: LD_VAR 0 12
35100: PUSH
35101: LD_INT 3
35103: EQUAL
35104: IFFALSE 35116
35106: PUSH
35107: LD_INT 49
35109: PUSH
35110: LD_VAR 0 5
35114: IN
35115: AND
35116: IFFALSE 35136
35118: PUSH
35119: LD_INT 31
35121: PPUSH
35122: LD_VAR 0 16
35126: PPUSH
35127: CALL_OW 321
35131: PUSH
35132: LD_INT 2
35134: EQUAL
35135: AND
35136: IFFALSE 35196
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35138: LD_INT 22
35140: PUSH
35141: LD_VAR 0 16
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: PUSH
35150: LD_INT 35
35152: PUSH
35153: LD_INT 49
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: LD_INT 91
35162: PUSH
35163: LD_VAR 0 1
35167: PUSH
35168: LD_INT 10
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: LIST
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: LIST
35180: PPUSH
35181: CALL_OW 69
35185: NOT
35186: IFFALSE 35196
// weapon := ru_time_lapser ;
35188: LD_ADDR_VAR 0 18
35192: PUSH
35193: LD_INT 49
35195: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35196: LD_VAR 0 12
35200: PUSH
35201: LD_INT 1
35203: PUSH
35204: LD_INT 2
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: IN
35211: IFFALSE 35235
35213: PUSH
35214: LD_INT 11
35216: PUSH
35217: LD_VAR 0 5
35221: IN
35222: IFTRUE 35234
35224: PUSH
35225: LD_INT 30
35227: PUSH
35228: LD_VAR 0 5
35232: IN
35233: OR
35234: AND
35235: IFFALSE 35255
35237: PUSH
35238: LD_INT 6
35240: PPUSH
35241: LD_VAR 0 16
35245: PPUSH
35246: CALL_OW 321
35250: PUSH
35251: LD_INT 2
35253: EQUAL
35254: AND
35255: IFFALSE 35422
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35257: LD_INT 22
35259: PUSH
35260: LD_VAR 0 16
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_INT 2
35271: PUSH
35272: LD_INT 35
35274: PUSH
35275: LD_INT 11
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: LD_INT 35
35284: PUSH
35285: LD_INT 30
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: LIST
35296: PUSH
35297: LD_INT 91
35299: PUSH
35300: LD_VAR 0 1
35304: PUSH
35305: LD_INT 18
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: LIST
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: LIST
35317: PPUSH
35318: CALL_OW 69
35322: NOT
35323: IFFALSE 35399
35325: PUSH
35326: LD_INT 22
35328: PUSH
35329: LD_VAR 0 16
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PUSH
35338: LD_INT 2
35340: PUSH
35341: LD_INT 30
35343: PUSH
35344: LD_INT 32
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: PUSH
35351: LD_INT 30
35353: PUSH
35354: LD_INT 33
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: LIST
35365: PUSH
35366: LD_INT 91
35368: PUSH
35369: LD_VAR 0 1
35373: PUSH
35374: LD_INT 12
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: LIST
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: LIST
35386: PUSH
35387: EMPTY
35388: LIST
35389: PPUSH
35390: CALL_OW 69
35394: PUSH
35395: LD_INT 2
35397: GREATER
35398: AND
35399: IFFALSE 35422
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35401: LD_ADDR_VAR 0 18
35405: PUSH
35406: LD_INT 11
35408: PUSH
35409: LD_INT 30
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: PUSH
35416: LD_VAR 0 12
35420: ARRAY
35421: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35422: LD_VAR 0 18
35426: NOT
35427: IFFALSE 35447
35429: PUSH
35430: LD_INT 40
35432: PPUSH
35433: LD_VAR 0 16
35437: PPUSH
35438: CALL_OW 321
35442: PUSH
35443: LD_INT 2
35445: EQUAL
35446: AND
35447: IFFALSE 35483
35449: PUSH
35450: LD_INT 7
35452: PUSH
35453: LD_VAR 0 5
35457: IN
35458: IFTRUE 35470
35460: PUSH
35461: LD_INT 28
35463: PUSH
35464: LD_VAR 0 5
35468: IN
35469: OR
35470: IFTRUE 35482
35472: PUSH
35473: LD_INT 45
35475: PUSH
35476: LD_VAR 0 5
35480: IN
35481: OR
35482: AND
35483: IFFALSE 35737
// begin hex := GetHexInfo ( x , y ) ;
35485: LD_ADDR_VAR 0 4
35489: PUSH
35490: LD_VAR 0 10
35494: PPUSH
35495: LD_VAR 0 11
35499: PPUSH
35500: CALL_OW 546
35504: ST_TO_ADDR
// if hex [ 1 ] then
35505: LD_VAR 0 4
35509: PUSH
35510: LD_INT 1
35512: ARRAY
35513: IFFALSE 35517
// exit ;
35515: GO 35924
// height := hex [ 2 ] ;
35517: LD_ADDR_VAR 0 15
35521: PUSH
35522: LD_VAR 0 4
35526: PUSH
35527: LD_INT 2
35529: ARRAY
35530: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35531: LD_ADDR_VAR 0 14
35535: PUSH
35536: LD_INT 0
35538: PUSH
35539: LD_INT 2
35541: PUSH
35542: LD_INT 3
35544: PUSH
35545: LD_INT 5
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: ST_TO_ADDR
// for i in tmp do
35554: LD_ADDR_VAR 0 8
35558: PUSH
35559: LD_VAR 0 14
35563: PUSH
35564: FOR_IN
35565: IFFALSE 35735
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35567: LD_ADDR_VAR 0 9
35571: PUSH
35572: LD_VAR 0 10
35576: PPUSH
35577: LD_VAR 0 8
35581: PPUSH
35582: LD_INT 5
35584: PPUSH
35585: CALL_OW 272
35589: PUSH
35590: LD_VAR 0 11
35594: PPUSH
35595: LD_VAR 0 8
35599: PPUSH
35600: LD_INT 5
35602: PPUSH
35603: CALL_OW 273
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35612: LD_VAR 0 9
35616: PUSH
35617: LD_INT 1
35619: ARRAY
35620: PPUSH
35621: LD_VAR 0 9
35625: PUSH
35626: LD_INT 2
35628: ARRAY
35629: PPUSH
35630: CALL_OW 488
35634: IFFALSE 35733
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35636: LD_ADDR_VAR 0 4
35640: PUSH
35641: LD_VAR 0 9
35645: PUSH
35646: LD_INT 1
35648: ARRAY
35649: PPUSH
35650: LD_VAR 0 9
35654: PUSH
35655: LD_INT 2
35657: ARRAY
35658: PPUSH
35659: CALL_OW 546
35663: ST_TO_ADDR
// if hex [ 1 ] then
35664: LD_VAR 0 4
35668: PUSH
35669: LD_INT 1
35671: ARRAY
35672: IFFALSE 35676
// continue ;
35674: GO 35564
// h := hex [ 2 ] ;
35676: LD_ADDR_VAR 0 13
35680: PUSH
35681: LD_VAR 0 4
35685: PUSH
35686: LD_INT 2
35688: ARRAY
35689: ST_TO_ADDR
// if h + 7 < height then
35690: LD_VAR 0 13
35694: PUSH
35695: LD_INT 7
35697: PLUS
35698: PUSH
35699: LD_VAR 0 15
35703: LESS
35704: IFFALSE 35733
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35706: LD_ADDR_VAR 0 18
35710: PUSH
35711: LD_INT 7
35713: PUSH
35714: LD_INT 28
35716: PUSH
35717: LD_INT 45
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: LIST
35724: PUSH
35725: LD_VAR 0 12
35729: ARRAY
35730: ST_TO_ADDR
// break ;
35731: GO 35735
// end ; end ; end ;
35733: GO 35564
35735: POP
35736: POP
// end ; if not weapon then
35737: LD_VAR 0 18
35741: NOT
35742: IFFALSE 35802
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35744: LD_ADDR_VAR 0 5
35748: PUSH
35749: LD_VAR 0 5
35753: PUSH
35754: LD_INT 11
35756: PUSH
35757: LD_INT 30
35759: PUSH
35760: LD_INT 49
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: LIST
35767: DIFF
35768: ST_TO_ADDR
// if not list then
35769: LD_VAR 0 5
35773: NOT
35774: IFFALSE 35778
// exit ;
35776: GO 35924
// weapon := list [ rand ( 1 , list ) ] ;
35778: LD_ADDR_VAR 0 18
35782: PUSH
35783: LD_VAR 0 5
35787: PUSH
35788: LD_INT 1
35790: PPUSH
35791: LD_VAR 0 5
35795: PPUSH
35796: CALL_OW 12
35800: ARRAY
35801: ST_TO_ADDR
// end ; if weapon then
35802: LD_VAR 0 18
35806: IFFALSE 35924
// begin tmp := CostOfWeapon ( weapon ) ;
35808: LD_ADDR_VAR 0 14
35812: PUSH
35813: LD_VAR 0 18
35817: PPUSH
35818: CALL_OW 451
35822: ST_TO_ADDR
// j := GetBase ( tower ) ;
35823: LD_ADDR_VAR 0 9
35827: PUSH
35828: LD_VAR 0 1
35832: PPUSH
35833: CALL_OW 274
35837: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35838: LD_VAR 0 9
35842: PPUSH
35843: LD_INT 1
35845: PPUSH
35846: CALL_OW 275
35850: PUSH
35851: LD_VAR 0 14
35855: PUSH
35856: LD_INT 1
35858: ARRAY
35859: GREATEREQUAL
35860: IFFALSE 35886
35862: PUSH
35863: LD_VAR 0 9
35867: PPUSH
35868: LD_INT 2
35870: PPUSH
35871: CALL_OW 275
35875: PUSH
35876: LD_VAR 0 14
35880: PUSH
35881: LD_INT 2
35883: ARRAY
35884: GREATEREQUAL
35885: AND
35886: IFFALSE 35912
35888: PUSH
35889: LD_VAR 0 9
35893: PPUSH
35894: LD_INT 3
35896: PPUSH
35897: CALL_OW 275
35901: PUSH
35902: LD_VAR 0 14
35906: PUSH
35907: LD_INT 3
35909: ARRAY
35910: GREATEREQUAL
35911: AND
35912: IFFALSE 35924
// result := weapon ;
35914: LD_ADDR_VAR 0 3
35918: PUSH
35919: LD_VAR 0 18
35923: ST_TO_ADDR
// end ; end ;
35924: LD_VAR 0 3
35928: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35929: LD_INT 0
35931: PPUSH
35932: PPUSH
// result := true ;
35933: LD_ADDR_VAR 0 3
35937: PUSH
35938: LD_INT 1
35940: ST_TO_ADDR
// if array1 = array2 then
35941: LD_VAR 0 1
35945: PUSH
35946: LD_VAR 0 2
35950: EQUAL
35951: IFFALSE 36011
// begin for i = 1 to array1 do
35953: LD_ADDR_VAR 0 4
35957: PUSH
35958: DOUBLE
35959: LD_INT 1
35961: DEC
35962: ST_TO_ADDR
35963: LD_VAR 0 1
35967: PUSH
35968: FOR_TO
35969: IFFALSE 36007
// if array1 [ i ] <> array2 [ i ] then
35971: LD_VAR 0 1
35975: PUSH
35976: LD_VAR 0 4
35980: ARRAY
35981: PUSH
35982: LD_VAR 0 2
35986: PUSH
35987: LD_VAR 0 4
35991: ARRAY
35992: NONEQUAL
35993: IFFALSE 36005
// begin result := false ;
35995: LD_ADDR_VAR 0 3
35999: PUSH
36000: LD_INT 0
36002: ST_TO_ADDR
// break ;
36003: GO 36007
// end ;
36005: GO 35968
36007: POP
36008: POP
// end else
36009: GO 36019
// result := false ;
36011: LD_ADDR_VAR 0 3
36015: PUSH
36016: LD_INT 0
36018: ST_TO_ADDR
// end ;
36019: LD_VAR 0 3
36023: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36024: LD_INT 0
36026: PPUSH
36027: PPUSH
// if not array1 or not array2 then
36028: LD_VAR 0 1
36032: NOT
36033: IFTRUE 36042
36035: PUSH
36036: LD_VAR 0 2
36040: NOT
36041: OR
36042: IFFALSE 36046
// exit ;
36044: GO 36110
// result := true ;
36046: LD_ADDR_VAR 0 3
36050: PUSH
36051: LD_INT 1
36053: ST_TO_ADDR
// for i = 1 to array1 do
36054: LD_ADDR_VAR 0 4
36058: PUSH
36059: DOUBLE
36060: LD_INT 1
36062: DEC
36063: ST_TO_ADDR
36064: LD_VAR 0 1
36068: PUSH
36069: FOR_TO
36070: IFFALSE 36108
// if array1 [ i ] <> array2 [ i ] then
36072: LD_VAR 0 1
36076: PUSH
36077: LD_VAR 0 4
36081: ARRAY
36082: PUSH
36083: LD_VAR 0 2
36087: PUSH
36088: LD_VAR 0 4
36092: ARRAY
36093: NONEQUAL
36094: IFFALSE 36106
// begin result := false ;
36096: LD_ADDR_VAR 0 3
36100: PUSH
36101: LD_INT 0
36103: ST_TO_ADDR
// break ;
36104: GO 36108
// end ;
36106: GO 36069
36108: POP
36109: POP
// end ;
36110: LD_VAR 0 3
36114: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36115: LD_INT 0
36117: PPUSH
36118: PPUSH
36119: PPUSH
// pom := GetBase ( fac ) ;
36120: LD_ADDR_VAR 0 5
36124: PUSH
36125: LD_VAR 0 1
36129: PPUSH
36130: CALL_OW 274
36134: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36135: LD_ADDR_VAR 0 4
36139: PUSH
36140: LD_VAR 0 2
36144: PUSH
36145: LD_INT 1
36147: ARRAY
36148: PPUSH
36149: LD_VAR 0 2
36153: PUSH
36154: LD_INT 2
36156: ARRAY
36157: PPUSH
36158: LD_VAR 0 2
36162: PUSH
36163: LD_INT 3
36165: ARRAY
36166: PPUSH
36167: LD_VAR 0 2
36171: PUSH
36172: LD_INT 4
36174: ARRAY
36175: PPUSH
36176: CALL_OW 449
36180: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36181: LD_ADDR_VAR 0 3
36185: PUSH
36186: LD_VAR 0 5
36190: PPUSH
36191: LD_INT 1
36193: PPUSH
36194: CALL_OW 275
36198: PUSH
36199: LD_VAR 0 4
36203: PUSH
36204: LD_INT 1
36206: ARRAY
36207: GREATEREQUAL
36208: IFFALSE 36234
36210: PUSH
36211: LD_VAR 0 5
36215: PPUSH
36216: LD_INT 2
36218: PPUSH
36219: CALL_OW 275
36223: PUSH
36224: LD_VAR 0 4
36228: PUSH
36229: LD_INT 2
36231: ARRAY
36232: GREATEREQUAL
36233: AND
36234: IFFALSE 36260
36236: PUSH
36237: LD_VAR 0 5
36241: PPUSH
36242: LD_INT 3
36244: PPUSH
36245: CALL_OW 275
36249: PUSH
36250: LD_VAR 0 4
36254: PUSH
36255: LD_INT 3
36257: ARRAY
36258: GREATEREQUAL
36259: AND
36260: ST_TO_ADDR
// end ;
36261: LD_VAR 0 3
36265: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36266: LD_INT 0
36268: PPUSH
36269: PPUSH
36270: PPUSH
36271: PPUSH
// pom := GetBase ( building ) ;
36272: LD_ADDR_VAR 0 3
36276: PUSH
36277: LD_VAR 0 1
36281: PPUSH
36282: CALL_OW 274
36286: ST_TO_ADDR
// if not pom then
36287: LD_VAR 0 3
36291: NOT
36292: IFFALSE 36296
// exit ;
36294: GO 36470
// btype := GetBType ( building ) ;
36296: LD_ADDR_VAR 0 5
36300: PUSH
36301: LD_VAR 0 1
36305: PPUSH
36306: CALL_OW 266
36310: ST_TO_ADDR
// if btype = b_armoury then
36311: LD_VAR 0 5
36315: PUSH
36316: LD_INT 4
36318: EQUAL
36319: IFFALSE 36329
// btype := b_barracks ;
36321: LD_ADDR_VAR 0 5
36325: PUSH
36326: LD_INT 5
36328: ST_TO_ADDR
// if btype = b_depot then
36329: LD_VAR 0 5
36333: PUSH
36334: LD_INT 0
36336: EQUAL
36337: IFFALSE 36347
// btype := b_warehouse ;
36339: LD_ADDR_VAR 0 5
36343: PUSH
36344: LD_INT 1
36346: ST_TO_ADDR
// if btype = b_workshop then
36347: LD_VAR 0 5
36351: PUSH
36352: LD_INT 2
36354: EQUAL
36355: IFFALSE 36365
// btype := b_factory ;
36357: LD_ADDR_VAR 0 5
36361: PUSH
36362: LD_INT 3
36364: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36365: LD_ADDR_VAR 0 4
36369: PUSH
36370: LD_VAR 0 5
36374: PPUSH
36375: LD_VAR 0 1
36379: PPUSH
36380: CALL_OW 248
36384: PPUSH
36385: CALL_OW 450
36389: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36390: LD_ADDR_VAR 0 2
36394: PUSH
36395: LD_VAR 0 3
36399: PPUSH
36400: LD_INT 1
36402: PPUSH
36403: CALL_OW 275
36407: PUSH
36408: LD_VAR 0 4
36412: PUSH
36413: LD_INT 1
36415: ARRAY
36416: GREATEREQUAL
36417: IFFALSE 36443
36419: PUSH
36420: LD_VAR 0 3
36424: PPUSH
36425: LD_INT 2
36427: PPUSH
36428: CALL_OW 275
36432: PUSH
36433: LD_VAR 0 4
36437: PUSH
36438: LD_INT 2
36440: ARRAY
36441: GREATEREQUAL
36442: AND
36443: IFFALSE 36469
36445: PUSH
36446: LD_VAR 0 3
36450: PPUSH
36451: LD_INT 3
36453: PPUSH
36454: CALL_OW 275
36458: PUSH
36459: LD_VAR 0 4
36463: PUSH
36464: LD_INT 3
36466: ARRAY
36467: GREATEREQUAL
36468: AND
36469: ST_TO_ADDR
// end ;
36470: LD_VAR 0 2
36474: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36475: LD_INT 0
36477: PPUSH
36478: PPUSH
36479: PPUSH
// pom := GetBase ( building ) ;
36480: LD_ADDR_VAR 0 4
36484: PUSH
36485: LD_VAR 0 1
36489: PPUSH
36490: CALL_OW 274
36494: ST_TO_ADDR
// if not pom then
36495: LD_VAR 0 4
36499: NOT
36500: IFFALSE 36504
// exit ;
36502: GO 36609
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36504: LD_ADDR_VAR 0 5
36508: PUSH
36509: LD_VAR 0 2
36513: PPUSH
36514: LD_VAR 0 1
36518: PPUSH
36519: CALL_OW 248
36523: PPUSH
36524: CALL_OW 450
36528: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36529: LD_ADDR_VAR 0 3
36533: PUSH
36534: LD_VAR 0 4
36538: PPUSH
36539: LD_INT 1
36541: PPUSH
36542: CALL_OW 275
36546: PUSH
36547: LD_VAR 0 5
36551: PUSH
36552: LD_INT 1
36554: ARRAY
36555: GREATEREQUAL
36556: IFFALSE 36582
36558: PUSH
36559: LD_VAR 0 4
36563: PPUSH
36564: LD_INT 2
36566: PPUSH
36567: CALL_OW 275
36571: PUSH
36572: LD_VAR 0 5
36576: PUSH
36577: LD_INT 2
36579: ARRAY
36580: GREATEREQUAL
36581: AND
36582: IFFALSE 36608
36584: PUSH
36585: LD_VAR 0 4
36589: PPUSH
36590: LD_INT 3
36592: PPUSH
36593: CALL_OW 275
36597: PUSH
36598: LD_VAR 0 5
36602: PUSH
36603: LD_INT 3
36605: ARRAY
36606: GREATEREQUAL
36607: AND
36608: ST_TO_ADDR
// end ;
36609: LD_VAR 0 3
36613: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36614: LD_INT 0
36616: PPUSH
36617: PPUSH
36618: PPUSH
36619: PPUSH
36620: PPUSH
36621: PPUSH
36622: PPUSH
36623: PPUSH
36624: PPUSH
36625: PPUSH
36626: PPUSH
// result := false ;
36627: LD_ADDR_VAR 0 8
36631: PUSH
36632: LD_INT 0
36634: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36635: LD_VAR 0 5
36639: NOT
36640: IFTRUE 36649
36642: PUSH
36643: LD_VAR 0 1
36647: NOT
36648: OR
36649: IFTRUE 36658
36651: PUSH
36652: LD_VAR 0 2
36656: NOT
36657: OR
36658: IFTRUE 36667
36660: PUSH
36661: LD_VAR 0 3
36665: NOT
36666: OR
36667: IFFALSE 36671
// exit ;
36669: GO 37497
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36671: LD_ADDR_VAR 0 14
36675: PUSH
36676: LD_VAR 0 1
36680: PPUSH
36681: LD_VAR 0 2
36685: PPUSH
36686: LD_VAR 0 3
36690: PPUSH
36691: LD_VAR 0 4
36695: PPUSH
36696: LD_VAR 0 5
36700: PUSH
36701: LD_INT 1
36703: ARRAY
36704: PPUSH
36705: CALL_OW 248
36709: PPUSH
36710: LD_INT 0
36712: PPUSH
36713: CALL 38778 0 6
36717: ST_TO_ADDR
// if not hexes then
36718: LD_VAR 0 14
36722: NOT
36723: IFFALSE 36727
// exit ;
36725: GO 37497
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36727: LD_ADDR_VAR 0 17
36731: PUSH
36732: LD_VAR 0 5
36736: PPUSH
36737: LD_INT 22
36739: PUSH
36740: LD_VAR 0 13
36744: PPUSH
36745: CALL_OW 255
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: PUSH
36754: LD_INT 2
36756: PUSH
36757: LD_INT 30
36759: PUSH
36760: LD_INT 0
36762: PUSH
36763: EMPTY
36764: LIST
36765: LIST
36766: PUSH
36767: LD_INT 30
36769: PUSH
36770: LD_INT 1
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: LIST
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PPUSH
36786: CALL_OW 72
36790: ST_TO_ADDR
// for i = 1 to hexes do
36791: LD_ADDR_VAR 0 9
36795: PUSH
36796: DOUBLE
36797: LD_INT 1
36799: DEC
36800: ST_TO_ADDR
36801: LD_VAR 0 14
36805: PUSH
36806: FOR_TO
36807: IFFALSE 37495
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36809: LD_ADDR_VAR 0 13
36813: PUSH
36814: LD_VAR 0 14
36818: PUSH
36819: LD_VAR 0 9
36823: ARRAY
36824: PUSH
36825: LD_INT 1
36827: ARRAY
36828: PPUSH
36829: LD_VAR 0 14
36833: PUSH
36834: LD_VAR 0 9
36838: ARRAY
36839: PUSH
36840: LD_INT 2
36842: ARRAY
36843: PPUSH
36844: CALL_OW 428
36848: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36849: LD_VAR 0 14
36853: PUSH
36854: LD_VAR 0 9
36858: ARRAY
36859: PUSH
36860: LD_INT 1
36862: ARRAY
36863: PPUSH
36864: LD_VAR 0 14
36868: PUSH
36869: LD_VAR 0 9
36873: ARRAY
36874: PUSH
36875: LD_INT 2
36877: ARRAY
36878: PPUSH
36879: CALL_OW 351
36883: IFTRUE 36922
36885: PUSH
36886: LD_VAR 0 14
36890: PUSH
36891: LD_VAR 0 9
36895: ARRAY
36896: PUSH
36897: LD_INT 1
36899: ARRAY
36900: PPUSH
36901: LD_VAR 0 14
36905: PUSH
36906: LD_VAR 0 9
36910: ARRAY
36911: PUSH
36912: LD_INT 2
36914: ARRAY
36915: PPUSH
36916: CALL_OW 488
36920: NOT
36921: OR
36922: IFTRUE 36939
36924: PUSH
36925: LD_VAR 0 13
36929: PPUSH
36930: CALL_OW 247
36934: PUSH
36935: LD_INT 3
36937: EQUAL
36938: OR
36939: IFFALSE 36945
// exit ;
36941: POP
36942: POP
36943: GO 37497
// if not tmp then
36945: LD_VAR 0 13
36949: NOT
36950: IFFALSE 36954
// continue ;
36952: GO 36806
// result := true ;
36954: LD_ADDR_VAR 0 8
36958: PUSH
36959: LD_INT 1
36961: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36962: LD_VAR 0 6
36966: IFFALSE 36983
36968: PUSH
36969: LD_VAR 0 13
36973: PPUSH
36974: CALL_OW 247
36978: PUSH
36979: LD_INT 2
36981: EQUAL
36982: AND
36983: IFFALSE 37000
36985: PUSH
36986: LD_VAR 0 13
36990: PPUSH
36991: CALL_OW 263
36995: PUSH
36996: LD_INT 1
36998: EQUAL
36999: AND
37000: IFFALSE 37164
// begin if IsDrivenBy ( tmp ) then
37002: LD_VAR 0 13
37006: PPUSH
37007: CALL_OW 311
37011: IFFALSE 37015
// continue ;
37013: GO 36806
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37015: LD_VAR 0 6
37019: PPUSH
37020: LD_INT 3
37022: PUSH
37023: LD_INT 60
37025: PUSH
37026: EMPTY
37027: LIST
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: LD_INT 3
37035: PUSH
37036: LD_INT 55
37038: PUSH
37039: EMPTY
37040: LIST
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PPUSH
37050: CALL_OW 72
37054: IFFALSE 37162
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37056: LD_ADDR_VAR 0 18
37060: PUSH
37061: LD_VAR 0 6
37065: PPUSH
37066: LD_INT 3
37068: PUSH
37069: LD_INT 60
37071: PUSH
37072: EMPTY
37073: LIST
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 3
37081: PUSH
37082: LD_INT 55
37084: PUSH
37085: EMPTY
37086: LIST
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: PPUSH
37096: CALL_OW 72
37100: PUSH
37101: LD_INT 1
37103: ARRAY
37104: ST_TO_ADDR
// if IsInUnit ( driver ) then
37105: LD_VAR 0 18
37109: PPUSH
37110: CALL_OW 310
37114: IFFALSE 37125
// ComExit ( driver ) ;
37116: LD_VAR 0 18
37120: PPUSH
37121: CALL 62778 0 1
// AddComEnterUnit ( driver , tmp ) ;
37125: LD_VAR 0 18
37129: PPUSH
37130: LD_VAR 0 13
37134: PPUSH
37135: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37139: LD_VAR 0 18
37143: PPUSH
37144: LD_VAR 0 7
37148: PPUSH
37149: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37153: LD_VAR 0 18
37157: PPUSH
37158: CALL_OW 181
// end ; continue ;
37162: GO 36806
// end ; if not cleaners or not tmp in cleaners then
37164: LD_VAR 0 6
37168: NOT
37169: IFTRUE 37184
37171: PUSH
37172: LD_VAR 0 13
37176: PUSH
37177: LD_VAR 0 6
37181: IN
37182: NOT
37183: OR
37184: IFFALSE 37493
// begin if dep then
37186: LD_VAR 0 17
37190: IFFALSE 37326
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37192: LD_ADDR_VAR 0 16
37196: PUSH
37197: LD_VAR 0 17
37201: PUSH
37202: LD_INT 1
37204: ARRAY
37205: PPUSH
37206: CALL_OW 250
37210: PPUSH
37211: LD_VAR 0 17
37215: PUSH
37216: LD_INT 1
37218: ARRAY
37219: PPUSH
37220: CALL_OW 254
37224: PPUSH
37225: LD_INT 5
37227: PPUSH
37228: CALL_OW 272
37232: PUSH
37233: LD_VAR 0 17
37237: PUSH
37238: LD_INT 1
37240: ARRAY
37241: PPUSH
37242: CALL_OW 251
37246: PPUSH
37247: LD_VAR 0 17
37251: PUSH
37252: LD_INT 1
37254: ARRAY
37255: PPUSH
37256: CALL_OW 254
37260: PPUSH
37261: LD_INT 5
37263: PPUSH
37264: CALL_OW 273
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37273: LD_VAR 0 16
37277: PUSH
37278: LD_INT 1
37280: ARRAY
37281: PPUSH
37282: LD_VAR 0 16
37286: PUSH
37287: LD_INT 2
37289: ARRAY
37290: PPUSH
37291: CALL_OW 488
37295: IFFALSE 37326
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37297: LD_VAR 0 13
37301: PPUSH
37302: LD_VAR 0 16
37306: PUSH
37307: LD_INT 1
37309: ARRAY
37310: PPUSH
37311: LD_VAR 0 16
37315: PUSH
37316: LD_INT 2
37318: ARRAY
37319: PPUSH
37320: CALL_OW 111
// continue ;
37324: GO 36806
// end ; end ; r := GetDir ( tmp ) ;
37326: LD_ADDR_VAR 0 15
37330: PUSH
37331: LD_VAR 0 13
37335: PPUSH
37336: CALL_OW 254
37340: ST_TO_ADDR
// if r = 5 then
37341: LD_VAR 0 15
37345: PUSH
37346: LD_INT 5
37348: EQUAL
37349: IFFALSE 37359
// r := 0 ;
37351: LD_ADDR_VAR 0 15
37355: PUSH
37356: LD_INT 0
37358: ST_TO_ADDR
// for j = r to 5 do
37359: LD_ADDR_VAR 0 10
37363: PUSH
37364: DOUBLE
37365: LD_VAR 0 15
37369: DEC
37370: ST_TO_ADDR
37371: LD_INT 5
37373: PUSH
37374: FOR_TO
37375: IFFALSE 37491
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37377: LD_ADDR_VAR 0 11
37381: PUSH
37382: LD_VAR 0 13
37386: PPUSH
37387: CALL_OW 250
37391: PPUSH
37392: LD_VAR 0 10
37396: PPUSH
37397: LD_INT 2
37399: PPUSH
37400: CALL_OW 272
37404: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37405: LD_ADDR_VAR 0 12
37409: PUSH
37410: LD_VAR 0 13
37414: PPUSH
37415: CALL_OW 251
37419: PPUSH
37420: LD_VAR 0 10
37424: PPUSH
37425: LD_INT 2
37427: PPUSH
37428: CALL_OW 273
37432: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37433: LD_VAR 0 11
37437: PPUSH
37438: LD_VAR 0 12
37442: PPUSH
37443: CALL_OW 488
37447: IFFALSE 37466
37449: PUSH
37450: LD_VAR 0 11
37454: PPUSH
37455: LD_VAR 0 12
37459: PPUSH
37460: CALL_OW 428
37464: NOT
37465: AND
37466: IFFALSE 37489
// begin ComMoveXY ( tmp , _x , _y ) ;
37468: LD_VAR 0 13
37472: PPUSH
37473: LD_VAR 0 11
37477: PPUSH
37478: LD_VAR 0 12
37482: PPUSH
37483: CALL_OW 111
// break ;
37487: GO 37491
// end ; end ;
37489: GO 37374
37491: POP
37492: POP
// end ; end ;
37493: GO 36806
37495: POP
37496: POP
// end ;
37497: LD_VAR 0 8
37501: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37502: LD_INT 0
37504: PPUSH
// result := true ;
37505: LD_ADDR_VAR 0 3
37509: PUSH
37510: LD_INT 1
37512: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37513: LD_VAR 0 2
37517: PUSH
37518: LD_INT 24
37520: DOUBLE
37521: EQUAL
37522: IFTRUE 37532
37524: LD_INT 33
37526: DOUBLE
37527: EQUAL
37528: IFTRUE 37532
37530: GO 37557
37532: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37533: LD_ADDR_VAR 0 3
37537: PUSH
37538: LD_INT 32
37540: PPUSH
37541: LD_VAR 0 1
37545: PPUSH
37546: CALL_OW 321
37550: PUSH
37551: LD_INT 2
37553: EQUAL
37554: ST_TO_ADDR
37555: GO 37873
37557: LD_INT 20
37559: DOUBLE
37560: EQUAL
37561: IFTRUE 37565
37563: GO 37590
37565: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37566: LD_ADDR_VAR 0 3
37570: PUSH
37571: LD_INT 6
37573: PPUSH
37574: LD_VAR 0 1
37578: PPUSH
37579: CALL_OW 321
37583: PUSH
37584: LD_INT 2
37586: EQUAL
37587: ST_TO_ADDR
37588: GO 37873
37590: LD_INT 22
37592: DOUBLE
37593: EQUAL
37594: IFTRUE 37604
37596: LD_INT 36
37598: DOUBLE
37599: EQUAL
37600: IFTRUE 37604
37602: GO 37629
37604: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37605: LD_ADDR_VAR 0 3
37609: PUSH
37610: LD_INT 15
37612: PPUSH
37613: LD_VAR 0 1
37617: PPUSH
37618: CALL_OW 321
37622: PUSH
37623: LD_INT 2
37625: EQUAL
37626: ST_TO_ADDR
37627: GO 37873
37629: LD_INT 30
37631: DOUBLE
37632: EQUAL
37633: IFTRUE 37637
37635: GO 37662
37637: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37638: LD_ADDR_VAR 0 3
37642: PUSH
37643: LD_INT 20
37645: PPUSH
37646: LD_VAR 0 1
37650: PPUSH
37651: CALL_OW 321
37655: PUSH
37656: LD_INT 2
37658: EQUAL
37659: ST_TO_ADDR
37660: GO 37873
37662: LD_INT 28
37664: DOUBLE
37665: EQUAL
37666: IFTRUE 37676
37668: LD_INT 21
37670: DOUBLE
37671: EQUAL
37672: IFTRUE 37676
37674: GO 37701
37676: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37677: LD_ADDR_VAR 0 3
37681: PUSH
37682: LD_INT 21
37684: PPUSH
37685: LD_VAR 0 1
37689: PPUSH
37690: CALL_OW 321
37694: PUSH
37695: LD_INT 2
37697: EQUAL
37698: ST_TO_ADDR
37699: GO 37873
37701: LD_INT 16
37703: DOUBLE
37704: EQUAL
37705: IFTRUE 37709
37707: GO 37734
37709: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37710: LD_ADDR_VAR 0 3
37714: PUSH
37715: LD_INT 84
37717: PPUSH
37718: LD_VAR 0 1
37722: PPUSH
37723: CALL_OW 321
37727: PUSH
37728: LD_INT 2
37730: EQUAL
37731: ST_TO_ADDR
37732: GO 37873
37734: LD_INT 19
37736: DOUBLE
37737: EQUAL
37738: IFTRUE 37748
37740: LD_INT 23
37742: DOUBLE
37743: EQUAL
37744: IFTRUE 37748
37746: GO 37773
37748: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37749: LD_ADDR_VAR 0 3
37753: PUSH
37754: LD_INT 83
37756: PPUSH
37757: LD_VAR 0 1
37761: PPUSH
37762: CALL_OW 321
37766: PUSH
37767: LD_INT 2
37769: EQUAL
37770: ST_TO_ADDR
37771: GO 37873
37773: LD_INT 17
37775: DOUBLE
37776: EQUAL
37777: IFTRUE 37781
37779: GO 37806
37781: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37782: LD_ADDR_VAR 0 3
37786: PUSH
37787: LD_INT 39
37789: PPUSH
37790: LD_VAR 0 1
37794: PPUSH
37795: CALL_OW 321
37799: PUSH
37800: LD_INT 2
37802: EQUAL
37803: ST_TO_ADDR
37804: GO 37873
37806: LD_INT 18
37808: DOUBLE
37809: EQUAL
37810: IFTRUE 37814
37812: GO 37839
37814: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37815: LD_ADDR_VAR 0 3
37819: PUSH
37820: LD_INT 40
37822: PPUSH
37823: LD_VAR 0 1
37827: PPUSH
37828: CALL_OW 321
37832: PUSH
37833: LD_INT 2
37835: EQUAL
37836: ST_TO_ADDR
37837: GO 37873
37839: LD_INT 27
37841: DOUBLE
37842: EQUAL
37843: IFTRUE 37847
37845: GO 37872
37847: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37848: LD_ADDR_VAR 0 3
37852: PUSH
37853: LD_INT 35
37855: PPUSH
37856: LD_VAR 0 1
37860: PPUSH
37861: CALL_OW 321
37865: PUSH
37866: LD_INT 2
37868: EQUAL
37869: ST_TO_ADDR
37870: GO 37873
37872: POP
// end ;
37873: LD_VAR 0 3
37877: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
37878: LD_INT 0
37880: PPUSH
37881: PPUSH
37882: PPUSH
37883: PPUSH
37884: PPUSH
37885: PPUSH
37886: PPUSH
37887: PPUSH
37888: PPUSH
37889: PPUSH
37890: PPUSH
// result := false ;
37891: LD_ADDR_VAR 0 6
37895: PUSH
37896: LD_INT 0
37898: ST_TO_ADDR
// if btype = b_depot then
37899: LD_VAR 0 2
37903: PUSH
37904: LD_INT 0
37906: EQUAL
37907: IFFALSE 37919
// begin result := true ;
37909: LD_ADDR_VAR 0 6
37913: PUSH
37914: LD_INT 1
37916: ST_TO_ADDR
// exit ;
37917: GO 38773
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37919: LD_VAR 0 1
37923: NOT
37924: IFTRUE 37949
37926: PUSH
37927: LD_VAR 0 1
37931: PPUSH
37932: CALL_OW 266
37936: PUSH
37937: LD_INT 0
37939: PUSH
37940: LD_INT 1
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: IN
37947: NOT
37948: OR
37949: IFTRUE 37958
37951: PUSH
37952: LD_VAR 0 2
37956: NOT
37957: OR
37958: IFTRUE 37994
37960: PUSH
37961: LD_VAR 0 5
37965: PUSH
37966: LD_INT 0
37968: PUSH
37969: LD_INT 1
37971: PUSH
37972: LD_INT 2
37974: PUSH
37975: LD_INT 3
37977: PUSH
37978: LD_INT 4
37980: PUSH
37981: LD_INT 5
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: LIST
37988: LIST
37989: LIST
37990: LIST
37991: IN
37992: NOT
37993: OR
37994: IFTRUE 38013
37996: PUSH
37997: LD_VAR 0 3
38001: PPUSH
38002: LD_VAR 0 4
38006: PPUSH
38007: CALL_OW 488
38011: NOT
38012: OR
38013: IFFALSE 38017
// exit ;
38015: GO 38773
// side := GetSide ( depot ) ;
38017: LD_ADDR_VAR 0 9
38021: PUSH
38022: LD_VAR 0 1
38026: PPUSH
38027: CALL_OW 255
38031: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38032: LD_VAR 0 9
38036: PPUSH
38037: LD_VAR 0 2
38041: PPUSH
38042: CALL 37502 0 2
38046: NOT
38047: IFFALSE 38051
// exit ;
38049: GO 38773
// pom := GetBase ( depot ) ;
38051: LD_ADDR_VAR 0 10
38055: PUSH
38056: LD_VAR 0 1
38060: PPUSH
38061: CALL_OW 274
38065: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38066: LD_ADDR_VAR 0 11
38070: PUSH
38071: LD_VAR 0 2
38075: PPUSH
38076: LD_VAR 0 1
38080: PPUSH
38081: CALL_OW 248
38085: PPUSH
38086: CALL_OW 450
38090: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38091: LD_VAR 0 10
38095: PPUSH
38096: LD_INT 1
38098: PPUSH
38099: CALL_OW 275
38103: PUSH
38104: LD_VAR 0 11
38108: PUSH
38109: LD_INT 1
38111: ARRAY
38112: GREATEREQUAL
38113: IFFALSE 38139
38115: PUSH
38116: LD_VAR 0 10
38120: PPUSH
38121: LD_INT 2
38123: PPUSH
38124: CALL_OW 275
38128: PUSH
38129: LD_VAR 0 11
38133: PUSH
38134: LD_INT 2
38136: ARRAY
38137: GREATEREQUAL
38138: AND
38139: IFFALSE 38165
38141: PUSH
38142: LD_VAR 0 10
38146: PPUSH
38147: LD_INT 3
38149: PPUSH
38150: CALL_OW 275
38154: PUSH
38155: LD_VAR 0 11
38159: PUSH
38160: LD_INT 3
38162: ARRAY
38163: GREATEREQUAL
38164: AND
38165: NOT
38166: IFFALSE 38170
// exit ;
38168: GO 38773
// if GetBType ( depot ) = b_depot then
38170: LD_VAR 0 1
38174: PPUSH
38175: CALL_OW 266
38179: PUSH
38180: LD_INT 0
38182: EQUAL
38183: IFFALSE 38195
// dist := 28 else
38185: LD_ADDR_VAR 0 14
38189: PUSH
38190: LD_INT 28
38192: ST_TO_ADDR
38193: GO 38203
// dist := 36 ;
38195: LD_ADDR_VAR 0 14
38199: PUSH
38200: LD_INT 36
38202: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38203: LD_VAR 0 1
38207: PPUSH
38208: LD_VAR 0 3
38212: PPUSH
38213: LD_VAR 0 4
38217: PPUSH
38218: CALL_OW 297
38222: PUSH
38223: LD_VAR 0 14
38227: GREATER
38228: IFFALSE 38232
// exit ;
38230: GO 38773
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38232: LD_ADDR_VAR 0 12
38236: PUSH
38237: LD_VAR 0 2
38241: PPUSH
38242: LD_VAR 0 3
38246: PPUSH
38247: LD_VAR 0 4
38251: PPUSH
38252: LD_VAR 0 5
38256: PPUSH
38257: LD_VAR 0 1
38261: PPUSH
38262: CALL_OW 248
38266: PPUSH
38267: LD_INT 0
38269: PPUSH
38270: CALL 38778 0 6
38274: ST_TO_ADDR
// if not hexes then
38275: LD_VAR 0 12
38279: NOT
38280: IFFALSE 38284
// exit ;
38282: GO 38773
// hex := GetHexInfo ( x , y ) ;
38284: LD_ADDR_VAR 0 15
38288: PUSH
38289: LD_VAR 0 3
38293: PPUSH
38294: LD_VAR 0 4
38298: PPUSH
38299: CALL_OW 546
38303: ST_TO_ADDR
// if hex [ 1 ] then
38304: LD_VAR 0 15
38308: PUSH
38309: LD_INT 1
38311: ARRAY
38312: IFFALSE 38316
// exit ;
38314: GO 38773
// height := hex [ 2 ] ;
38316: LD_ADDR_VAR 0 13
38320: PUSH
38321: LD_VAR 0 15
38325: PUSH
38326: LD_INT 2
38328: ARRAY
38329: ST_TO_ADDR
// for i = 1 to hexes do
38330: LD_ADDR_VAR 0 7
38334: PUSH
38335: DOUBLE
38336: LD_INT 1
38338: DEC
38339: ST_TO_ADDR
38340: LD_VAR 0 12
38344: PUSH
38345: FOR_TO
38346: IFFALSE 38690
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38348: LD_VAR 0 12
38352: PUSH
38353: LD_VAR 0 7
38357: ARRAY
38358: PUSH
38359: LD_INT 1
38361: ARRAY
38362: PPUSH
38363: LD_VAR 0 12
38367: PUSH
38368: LD_VAR 0 7
38372: ARRAY
38373: PUSH
38374: LD_INT 2
38376: ARRAY
38377: PPUSH
38378: CALL_OW 488
38382: NOT
38383: IFTRUE 38425
38385: PUSH
38386: LD_VAR 0 12
38390: PUSH
38391: LD_VAR 0 7
38395: ARRAY
38396: PUSH
38397: LD_INT 1
38399: ARRAY
38400: PPUSH
38401: LD_VAR 0 12
38405: PUSH
38406: LD_VAR 0 7
38410: ARRAY
38411: PUSH
38412: LD_INT 2
38414: ARRAY
38415: PPUSH
38416: CALL_OW 428
38420: PUSH
38421: LD_INT 0
38423: GREATER
38424: OR
38425: IFTRUE 38463
38427: PUSH
38428: LD_VAR 0 12
38432: PUSH
38433: LD_VAR 0 7
38437: ARRAY
38438: PUSH
38439: LD_INT 1
38441: ARRAY
38442: PPUSH
38443: LD_VAR 0 12
38447: PUSH
38448: LD_VAR 0 7
38452: ARRAY
38453: PUSH
38454: LD_INT 2
38456: ARRAY
38457: PPUSH
38458: CALL_OW 351
38462: OR
38463: IFFALSE 38469
// exit ;
38465: POP
38466: POP
38467: GO 38773
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38469: LD_ADDR_VAR 0 8
38473: PUSH
38474: LD_VAR 0 12
38478: PUSH
38479: LD_VAR 0 7
38483: ARRAY
38484: PUSH
38485: LD_INT 1
38487: ARRAY
38488: PPUSH
38489: LD_VAR 0 12
38493: PUSH
38494: LD_VAR 0 7
38498: ARRAY
38499: PUSH
38500: LD_INT 2
38502: ARRAY
38503: PPUSH
38504: CALL_OW 546
38508: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38509: LD_VAR 0 8
38513: PUSH
38514: LD_INT 1
38516: ARRAY
38517: IFTRUE 38539
38519: PUSH
38520: LD_VAR 0 8
38524: PUSH
38525: LD_INT 2
38527: ARRAY
38528: PUSH
38529: LD_VAR 0 13
38533: PUSH
38534: LD_INT 2
38536: PLUS
38537: GREATER
38538: OR
38539: IFTRUE 38561
38541: PUSH
38542: LD_VAR 0 8
38546: PUSH
38547: LD_INT 2
38549: ARRAY
38550: PUSH
38551: LD_VAR 0 13
38555: PUSH
38556: LD_INT 2
38558: MINUS
38559: LESS
38560: OR
38561: IFTRUE 38629
38563: PUSH
38564: LD_VAR 0 8
38568: PUSH
38569: LD_INT 3
38571: ARRAY
38572: PUSH
38573: LD_INT 0
38575: PUSH
38576: LD_INT 8
38578: PUSH
38579: LD_INT 9
38581: PUSH
38582: LD_INT 10
38584: PUSH
38585: LD_INT 11
38587: PUSH
38588: LD_INT 12
38590: PUSH
38591: LD_INT 13
38593: PUSH
38594: LD_INT 16
38596: PUSH
38597: LD_INT 17
38599: PUSH
38600: LD_INT 18
38602: PUSH
38603: LD_INT 19
38605: PUSH
38606: LD_INT 20
38608: PUSH
38609: LD_INT 21
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: IN
38627: NOT
38628: OR
38629: IFTRUE 38642
38631: PUSH
38632: LD_VAR 0 8
38636: PUSH
38637: LD_INT 5
38639: ARRAY
38640: NOT
38641: OR
38642: IFTRUE 38682
38644: PUSH
38645: LD_VAR 0 8
38649: PUSH
38650: LD_INT 6
38652: ARRAY
38653: PUSH
38654: LD_INT 1
38656: PUSH
38657: LD_INT 2
38659: PUSH
38660: LD_INT 7
38662: PUSH
38663: LD_INT 9
38665: PUSH
38666: LD_INT 10
38668: PUSH
38669: LD_INT 11
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: IN
38680: NOT
38681: OR
38682: IFFALSE 38688
// exit ;
38684: POP
38685: POP
38686: GO 38773
// end ;
38688: GO 38345
38690: POP
38691: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38692: LD_VAR 0 9
38696: PPUSH
38697: LD_VAR 0 3
38701: PPUSH
38702: LD_VAR 0 4
38706: PPUSH
38707: LD_INT 20
38709: PPUSH
38710: CALL 30592 0 4
38714: PUSH
38715: LD_INT 4
38717: ARRAY
38718: IFFALSE 38722
// exit ;
38720: GO 38773
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38722: LD_VAR 0 2
38726: PUSH
38727: LD_INT 29
38729: PUSH
38730: LD_INT 30
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: IN
38737: IFFALSE 38761
38739: PUSH
38740: LD_VAR 0 3
38744: PPUSH
38745: LD_VAR 0 4
38749: PPUSH
38750: LD_VAR 0 9
38754: PPUSH
38755: CALL_OW 440
38759: NOT
38760: AND
38761: IFFALSE 38765
// exit ;
38763: GO 38773
// result := true ;
38765: LD_ADDR_VAR 0 6
38769: PUSH
38770: LD_INT 1
38772: ST_TO_ADDR
// end ;
38773: LD_VAR 0 6
38777: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38778: LD_INT 0
38780: PPUSH
38781: PPUSH
38782: PPUSH
38783: PPUSH
38784: PPUSH
38785: PPUSH
38786: PPUSH
38787: PPUSH
38788: PPUSH
38789: PPUSH
38790: PPUSH
38791: PPUSH
38792: PPUSH
38793: PPUSH
38794: PPUSH
38795: PPUSH
38796: PPUSH
38797: PPUSH
38798: PPUSH
38799: PPUSH
38800: PPUSH
38801: PPUSH
38802: PPUSH
38803: PPUSH
38804: PPUSH
38805: PPUSH
38806: PPUSH
38807: PPUSH
38808: PPUSH
38809: PPUSH
38810: PPUSH
38811: PPUSH
38812: PPUSH
38813: PPUSH
38814: PPUSH
38815: PPUSH
38816: PPUSH
38817: PPUSH
38818: PPUSH
38819: PPUSH
38820: PPUSH
38821: PPUSH
38822: PPUSH
38823: PPUSH
38824: PPUSH
38825: PPUSH
38826: PPUSH
38827: PPUSH
38828: PPUSH
38829: PPUSH
38830: PPUSH
38831: PPUSH
38832: PPUSH
38833: PPUSH
38834: PPUSH
38835: PPUSH
38836: PPUSH
38837: PPUSH
// result = [ ] ;
38838: LD_ADDR_VAR 0 7
38842: PUSH
38843: EMPTY
38844: ST_TO_ADDR
// temp_list = [ ] ;
38845: LD_ADDR_VAR 0 9
38849: PUSH
38850: EMPTY
38851: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38852: LD_VAR 0 4
38856: PUSH
38857: LD_INT 0
38859: PUSH
38860: LD_INT 1
38862: PUSH
38863: LD_INT 2
38865: PUSH
38866: LD_INT 3
38868: PUSH
38869: LD_INT 4
38871: PUSH
38872: LD_INT 5
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: IN
38883: NOT
38884: IFTRUE 38927
38886: PUSH
38887: LD_VAR 0 1
38891: PUSH
38892: LD_INT 0
38894: PUSH
38895: LD_INT 1
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: IN
38902: IFFALSE 38926
38904: PUSH
38905: LD_VAR 0 5
38909: PUSH
38910: LD_INT 1
38912: PUSH
38913: LD_INT 2
38915: PUSH
38916: LD_INT 3
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: LIST
38923: IN
38924: NOT
38925: AND
38926: OR
38927: IFFALSE 38931
// exit ;
38929: GO 57330
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38931: LD_VAR 0 1
38935: PUSH
38936: LD_INT 6
38938: PUSH
38939: LD_INT 7
38941: PUSH
38942: LD_INT 8
38944: PUSH
38945: LD_INT 13
38947: PUSH
38948: LD_INT 12
38950: PUSH
38951: LD_INT 15
38953: PUSH
38954: LD_INT 11
38956: PUSH
38957: LD_INT 14
38959: PUSH
38960: LD_INT 10
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: IN
38974: IFFALSE 38984
// btype = b_lab ;
38976: LD_ADDR_VAR 0 1
38980: PUSH
38981: LD_INT 6
38983: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38984: LD_VAR 0 6
38988: PUSH
38989: LD_INT 0
38991: PUSH
38992: LD_INT 1
38994: PUSH
38995: LD_INT 2
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: LIST
39002: IN
39003: NOT
39004: IFTRUE 39072
39006: PUSH
39007: LD_VAR 0 1
39011: PUSH
39012: LD_INT 0
39014: PUSH
39015: LD_INT 1
39017: PUSH
39018: LD_INT 2
39020: PUSH
39021: LD_INT 3
39023: PUSH
39024: LD_INT 6
39026: PUSH
39027: LD_INT 36
39029: PUSH
39030: LD_INT 4
39032: PUSH
39033: LD_INT 5
39035: PUSH
39036: LD_INT 31
39038: PUSH
39039: LD_INT 32
39041: PUSH
39042: LD_INT 33
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: IN
39058: NOT
39059: IFFALSE 39071
39061: PUSH
39062: LD_VAR 0 6
39066: PUSH
39067: LD_INT 1
39069: EQUAL
39070: AND
39071: OR
39072: IFTRUE 39104
39074: PUSH
39075: LD_VAR 0 1
39079: PUSH
39080: LD_INT 2
39082: PUSH
39083: LD_INT 3
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: IN
39090: NOT
39091: IFFALSE 39103
39093: PUSH
39094: LD_VAR 0 6
39098: PUSH
39099: LD_INT 2
39101: EQUAL
39102: AND
39103: OR
39104: IFFALSE 39114
// mode = 0 ;
39106: LD_ADDR_VAR 0 6
39110: PUSH
39111: LD_INT 0
39113: ST_TO_ADDR
// case mode of 0 :
39114: LD_VAR 0 6
39118: PUSH
39119: LD_INT 0
39121: DOUBLE
39122: EQUAL
39123: IFTRUE 39127
39125: GO 50580
39127: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39128: LD_ADDR_VAR 0 11
39132: PUSH
39133: LD_INT 0
39135: PUSH
39136: LD_INT 0
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 0
39145: PUSH
39146: LD_INT 1
39148: NEG
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 1
39156: PUSH
39157: LD_INT 0
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 1
39166: PUSH
39167: LD_INT 1
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 0
39176: PUSH
39177: LD_INT 1
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 1
39186: NEG
39187: PUSH
39188: LD_INT 0
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: LD_INT 1
39197: NEG
39198: PUSH
39199: LD_INT 1
39201: NEG
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: PUSH
39207: LD_INT 1
39209: NEG
39210: PUSH
39211: LD_INT 2
39213: NEG
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: LD_INT 0
39221: PUSH
39222: LD_INT 2
39224: NEG
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 1
39232: PUSH
39233: LD_INT 1
39235: NEG
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 1
39243: PUSH
39244: LD_INT 2
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 0
39253: PUSH
39254: LD_INT 2
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 1
39263: NEG
39264: PUSH
39265: LD_INT 1
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 1
39274: PUSH
39275: LD_INT 3
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 0
39284: PUSH
39285: LD_INT 3
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 1
39294: NEG
39295: PUSH
39296: LD_INT 2
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39321: LD_ADDR_VAR 0 12
39325: PUSH
39326: LD_INT 0
39328: PUSH
39329: LD_INT 0
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 0
39338: PUSH
39339: LD_INT 1
39341: NEG
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: LD_INT 1
39349: PUSH
39350: LD_INT 0
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: PUSH
39357: LD_INT 1
39359: PUSH
39360: LD_INT 1
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 0
39369: PUSH
39370: LD_INT 1
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 1
39379: NEG
39380: PUSH
39381: LD_INT 0
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 1
39390: NEG
39391: PUSH
39392: LD_INT 1
39394: NEG
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 1
39402: PUSH
39403: LD_INT 1
39405: NEG
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: PUSH
39411: LD_INT 2
39413: PUSH
39414: LD_INT 0
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 2
39423: PUSH
39424: LD_INT 1
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 1
39433: NEG
39434: PUSH
39435: LD_INT 1
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 2
39444: NEG
39445: PUSH
39446: LD_INT 0
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 2
39455: NEG
39456: PUSH
39457: LD_INT 1
39459: NEG
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 2
39467: NEG
39468: PUSH
39469: LD_INT 1
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 3
39478: NEG
39479: PUSH
39480: LD_INT 0
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 3
39489: NEG
39490: PUSH
39491: LD_INT 1
39493: NEG
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39517: LD_ADDR_VAR 0 13
39521: PUSH
39522: LD_INT 0
39524: PUSH
39525: LD_INT 0
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 0
39534: PUSH
39535: LD_INT 1
39537: NEG
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 1
39545: PUSH
39546: LD_INT 0
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 1
39555: PUSH
39556: LD_INT 1
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 0
39565: PUSH
39566: LD_INT 1
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 1
39575: NEG
39576: PUSH
39577: LD_INT 0
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 1
39586: NEG
39587: PUSH
39588: LD_INT 1
39590: NEG
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 1
39598: NEG
39599: PUSH
39600: LD_INT 2
39602: NEG
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PUSH
39608: LD_INT 2
39610: PUSH
39611: LD_INT 1
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 2
39620: PUSH
39621: LD_INT 2
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 1
39630: PUSH
39631: LD_INT 2
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 2
39640: NEG
39641: PUSH
39642: LD_INT 1
39644: NEG
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 2
39652: NEG
39653: PUSH
39654: LD_INT 2
39656: NEG
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 2
39664: NEG
39665: PUSH
39666: LD_INT 3
39668: NEG
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: LD_INT 3
39676: NEG
39677: PUSH
39678: LD_INT 2
39680: NEG
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 3
39688: NEG
39689: PUSH
39690: LD_INT 3
39692: NEG
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39716: LD_ADDR_VAR 0 14
39720: PUSH
39721: LD_INT 0
39723: PUSH
39724: LD_INT 0
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 0
39733: PUSH
39734: LD_INT 1
39736: NEG
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 1
39744: PUSH
39745: LD_INT 0
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 1
39754: PUSH
39755: LD_INT 1
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 0
39764: PUSH
39765: LD_INT 1
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 1
39774: NEG
39775: PUSH
39776: LD_INT 0
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 1
39785: NEG
39786: PUSH
39787: LD_INT 1
39789: NEG
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 1
39797: NEG
39798: PUSH
39799: LD_INT 2
39801: NEG
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 0
39809: PUSH
39810: LD_INT 2
39812: NEG
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 1
39820: PUSH
39821: LD_INT 1
39823: NEG
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 1
39831: PUSH
39832: LD_INT 2
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 0
39841: PUSH
39842: LD_INT 2
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 1
39851: NEG
39852: PUSH
39853: LD_INT 1
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 1
39862: NEG
39863: PUSH
39864: LD_INT 3
39866: NEG
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 0
39874: PUSH
39875: LD_INT 3
39877: NEG
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 1
39885: PUSH
39886: LD_INT 2
39888: NEG
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: LIST
39908: LIST
39909: LIST
39910: LIST
39911: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39912: LD_ADDR_VAR 0 15
39916: PUSH
39917: LD_INT 0
39919: PUSH
39920: LD_INT 0
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 0
39929: PUSH
39930: LD_INT 1
39932: NEG
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 1
39940: PUSH
39941: LD_INT 0
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: PUSH
39948: LD_INT 1
39950: PUSH
39951: LD_INT 1
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 0
39960: PUSH
39961: LD_INT 1
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 1
39970: NEG
39971: PUSH
39972: LD_INT 0
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 1
39981: NEG
39982: PUSH
39983: LD_INT 1
39985: NEG
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 1
39993: PUSH
39994: LD_INT 1
39996: NEG
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PUSH
40002: LD_INT 2
40004: PUSH
40005: LD_INT 0
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: LD_INT 2
40014: PUSH
40015: LD_INT 1
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 1
40024: NEG
40025: PUSH
40026: LD_INT 1
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 2
40035: NEG
40036: PUSH
40037: LD_INT 0
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 2
40046: NEG
40047: PUSH
40048: LD_INT 1
40050: NEG
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 2
40058: PUSH
40059: LD_INT 1
40061: NEG
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: LD_INT 3
40069: PUSH
40070: LD_INT 0
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 3
40079: PUSH
40080: LD_INT 1
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40105: LD_ADDR_VAR 0 16
40109: PUSH
40110: LD_INT 0
40112: PUSH
40113: LD_INT 0
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 0
40122: PUSH
40123: LD_INT 1
40125: NEG
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 1
40133: PUSH
40134: LD_INT 0
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 1
40143: PUSH
40144: LD_INT 1
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 0
40153: PUSH
40154: LD_INT 1
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 1
40163: NEG
40164: PUSH
40165: LD_INT 0
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 1
40174: NEG
40175: PUSH
40176: LD_INT 1
40178: NEG
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 1
40186: NEG
40187: PUSH
40188: LD_INT 2
40190: NEG
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 2
40198: PUSH
40199: LD_INT 1
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 2
40208: PUSH
40209: LD_INT 2
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 1
40218: PUSH
40219: LD_INT 2
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: LD_INT 2
40228: NEG
40229: PUSH
40230: LD_INT 1
40232: NEG
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 2
40240: NEG
40241: PUSH
40242: LD_INT 2
40244: NEG
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PUSH
40250: LD_INT 3
40252: PUSH
40253: LD_INT 2
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 3
40262: PUSH
40263: LD_INT 3
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 2
40272: PUSH
40273: LD_INT 3
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40298: LD_ADDR_VAR 0 17
40302: PUSH
40303: LD_INT 0
40305: PUSH
40306: LD_INT 0
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 0
40315: PUSH
40316: LD_INT 1
40318: NEG
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 1
40326: PUSH
40327: LD_INT 0
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 1
40336: PUSH
40337: LD_INT 1
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 0
40346: PUSH
40347: LD_INT 1
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 1
40356: NEG
40357: PUSH
40358: LD_INT 0
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 1
40367: NEG
40368: PUSH
40369: LD_INT 1
40371: NEG
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 1
40379: NEG
40380: PUSH
40381: LD_INT 2
40383: NEG
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 0
40391: PUSH
40392: LD_INT 2
40394: NEG
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 1
40402: PUSH
40403: LD_INT 1
40405: NEG
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 2
40413: PUSH
40414: LD_INT 0
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 2
40423: PUSH
40424: LD_INT 1
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 2
40433: PUSH
40434: LD_INT 2
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 1
40443: PUSH
40444: LD_INT 2
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 0
40453: PUSH
40454: LD_INT 2
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_INT 1
40463: NEG
40464: PUSH
40465: LD_INT 1
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 2
40474: NEG
40475: PUSH
40476: LD_INT 0
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 2
40485: NEG
40486: PUSH
40487: LD_INT 1
40489: NEG
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 2
40497: NEG
40498: PUSH
40499: LD_INT 2
40501: NEG
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40528: LD_ADDR_VAR 0 18
40532: PUSH
40533: LD_INT 0
40535: PUSH
40536: LD_INT 0
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 0
40545: PUSH
40546: LD_INT 1
40548: NEG
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 1
40556: PUSH
40557: LD_INT 0
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 1
40566: PUSH
40567: LD_INT 1
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 0
40576: PUSH
40577: LD_INT 1
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 1
40586: NEG
40587: PUSH
40588: LD_INT 0
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 1
40597: NEG
40598: PUSH
40599: LD_INT 1
40601: NEG
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 1
40609: NEG
40610: PUSH
40611: LD_INT 2
40613: NEG
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 0
40621: PUSH
40622: LD_INT 2
40624: NEG
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 1
40632: PUSH
40633: LD_INT 1
40635: NEG
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 2
40643: PUSH
40644: LD_INT 0
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: LD_INT 2
40653: PUSH
40654: LD_INT 1
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 2
40663: PUSH
40664: LD_INT 2
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 1
40673: PUSH
40674: LD_INT 2
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 0
40683: PUSH
40684: LD_INT 2
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 1
40693: NEG
40694: PUSH
40695: LD_INT 1
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 2
40704: NEG
40705: PUSH
40706: LD_INT 0
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 2
40715: NEG
40716: PUSH
40717: LD_INT 1
40719: NEG
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 2
40727: NEG
40728: PUSH
40729: LD_INT 2
40731: NEG
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40758: LD_ADDR_VAR 0 19
40762: PUSH
40763: LD_INT 0
40765: PUSH
40766: LD_INT 0
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 0
40775: PUSH
40776: LD_INT 1
40778: NEG
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 1
40786: PUSH
40787: LD_INT 0
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 1
40796: PUSH
40797: LD_INT 1
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 0
40806: PUSH
40807: LD_INT 1
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 1
40816: NEG
40817: PUSH
40818: LD_INT 0
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 1
40827: NEG
40828: PUSH
40829: LD_INT 1
40831: NEG
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 1
40839: NEG
40840: PUSH
40841: LD_INT 2
40843: NEG
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 0
40851: PUSH
40852: LD_INT 2
40854: NEG
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 1
40862: PUSH
40863: LD_INT 1
40865: NEG
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 2
40873: PUSH
40874: LD_INT 0
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 2
40883: PUSH
40884: LD_INT 1
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 2
40893: PUSH
40894: LD_INT 2
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 1
40903: PUSH
40904: LD_INT 2
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 0
40913: PUSH
40914: LD_INT 2
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 1
40923: NEG
40924: PUSH
40925: LD_INT 1
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 2
40934: NEG
40935: PUSH
40936: LD_INT 0
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 2
40945: NEG
40946: PUSH
40947: LD_INT 1
40949: NEG
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 2
40957: NEG
40958: PUSH
40959: LD_INT 2
40961: NEG
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40988: LD_ADDR_VAR 0 20
40992: PUSH
40993: LD_INT 0
40995: PUSH
40996: LD_INT 0
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 0
41005: PUSH
41006: LD_INT 1
41008: NEG
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 1
41016: PUSH
41017: LD_INT 0
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 1
41026: PUSH
41027: LD_INT 1
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 0
41036: PUSH
41037: LD_INT 1
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 1
41046: NEG
41047: PUSH
41048: LD_INT 0
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 1
41057: NEG
41058: PUSH
41059: LD_INT 1
41061: NEG
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 1
41069: NEG
41070: PUSH
41071: LD_INT 2
41073: NEG
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 0
41081: PUSH
41082: LD_INT 2
41084: NEG
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 1
41092: PUSH
41093: LD_INT 1
41095: NEG
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 2
41103: PUSH
41104: LD_INT 0
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 2
41113: PUSH
41114: LD_INT 1
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 2
41123: PUSH
41124: LD_INT 2
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 1
41133: PUSH
41134: LD_INT 2
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 0
41143: PUSH
41144: LD_INT 2
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 1
41153: NEG
41154: PUSH
41155: LD_INT 1
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 2
41164: NEG
41165: PUSH
41166: LD_INT 0
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 2
41175: NEG
41176: PUSH
41177: LD_INT 1
41179: NEG
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 2
41187: NEG
41188: PUSH
41189: LD_INT 2
41191: NEG
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41218: LD_ADDR_VAR 0 21
41222: PUSH
41223: LD_INT 0
41225: PUSH
41226: LD_INT 0
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 0
41235: PUSH
41236: LD_INT 1
41238: NEG
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 1
41246: PUSH
41247: LD_INT 0
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 1
41256: PUSH
41257: LD_INT 1
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 0
41266: PUSH
41267: LD_INT 1
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 1
41276: NEG
41277: PUSH
41278: LD_INT 0
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 1
41287: NEG
41288: PUSH
41289: LD_INT 1
41291: NEG
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 1
41299: NEG
41300: PUSH
41301: LD_INT 2
41303: NEG
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 0
41311: PUSH
41312: LD_INT 2
41314: NEG
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 1
41322: PUSH
41323: LD_INT 1
41325: NEG
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 2
41333: PUSH
41334: LD_INT 0
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 2
41343: PUSH
41344: LD_INT 1
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 2
41353: PUSH
41354: LD_INT 2
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 1
41363: PUSH
41364: LD_INT 2
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 0
41373: PUSH
41374: LD_INT 2
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 1
41383: NEG
41384: PUSH
41385: LD_INT 1
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 2
41394: NEG
41395: PUSH
41396: LD_INT 0
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 2
41405: NEG
41406: PUSH
41407: LD_INT 1
41409: NEG
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 2
41417: NEG
41418: PUSH
41419: LD_INT 2
41421: NEG
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41448: LD_ADDR_VAR 0 22
41452: PUSH
41453: LD_INT 0
41455: PUSH
41456: LD_INT 0
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 0
41465: PUSH
41466: LD_INT 1
41468: NEG
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 1
41476: PUSH
41477: LD_INT 0
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 1
41486: PUSH
41487: LD_INT 1
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 0
41496: PUSH
41497: LD_INT 1
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 1
41506: NEG
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 1
41517: NEG
41518: PUSH
41519: LD_INT 1
41521: NEG
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 1
41529: NEG
41530: PUSH
41531: LD_INT 2
41533: NEG
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 0
41541: PUSH
41542: LD_INT 2
41544: NEG
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 1
41552: PUSH
41553: LD_INT 1
41555: NEG
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 2
41563: PUSH
41564: LD_INT 0
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 2
41573: PUSH
41574: LD_INT 1
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 2
41583: PUSH
41584: LD_INT 2
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 1
41593: PUSH
41594: LD_INT 2
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 0
41603: PUSH
41604: LD_INT 2
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 1
41613: NEG
41614: PUSH
41615: LD_INT 1
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 2
41624: NEG
41625: PUSH
41626: LD_INT 0
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 2
41635: NEG
41636: PUSH
41637: LD_INT 1
41639: NEG
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 2
41647: NEG
41648: PUSH
41649: LD_INT 2
41651: NEG
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41678: LD_ADDR_VAR 0 23
41682: PUSH
41683: LD_INT 0
41685: PUSH
41686: LD_INT 0
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 0
41695: PUSH
41696: LD_INT 1
41698: NEG
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 1
41706: PUSH
41707: LD_INT 0
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 1
41716: PUSH
41717: LD_INT 1
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 0
41726: PUSH
41727: LD_INT 1
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 1
41736: NEG
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 1
41747: NEG
41748: PUSH
41749: LD_INT 1
41751: NEG
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 1
41759: NEG
41760: PUSH
41761: LD_INT 2
41763: NEG
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 0
41771: PUSH
41772: LD_INT 2
41774: NEG
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 1
41782: PUSH
41783: LD_INT 1
41785: NEG
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 2
41793: PUSH
41794: LD_INT 0
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 2
41803: PUSH
41804: LD_INT 1
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 2
41813: PUSH
41814: LD_INT 2
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 1
41823: PUSH
41824: LD_INT 2
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 0
41833: PUSH
41834: LD_INT 2
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 1
41843: NEG
41844: PUSH
41845: LD_INT 1
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 2
41854: NEG
41855: PUSH
41856: LD_INT 0
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 2
41865: NEG
41866: PUSH
41867: LD_INT 1
41869: NEG
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 2
41877: NEG
41878: PUSH
41879: LD_INT 2
41881: NEG
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 2
41889: NEG
41890: PUSH
41891: LD_INT 3
41893: NEG
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 1
41901: NEG
41902: PUSH
41903: LD_INT 3
41905: NEG
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 1
41913: PUSH
41914: LD_INT 2
41916: NEG
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 2
41924: PUSH
41925: LD_INT 1
41927: NEG
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41958: LD_ADDR_VAR 0 24
41962: PUSH
41963: LD_INT 0
41965: PUSH
41966: LD_INT 0
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 0
41975: PUSH
41976: LD_INT 1
41978: NEG
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 1
41986: PUSH
41987: LD_INT 0
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 1
41996: PUSH
41997: LD_INT 1
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 0
42006: PUSH
42007: LD_INT 1
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 1
42016: NEG
42017: PUSH
42018: LD_INT 0
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 1
42027: NEG
42028: PUSH
42029: LD_INT 1
42031: NEG
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 1
42039: NEG
42040: PUSH
42041: LD_INT 2
42043: NEG
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 0
42051: PUSH
42052: LD_INT 2
42054: NEG
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 1
42062: PUSH
42063: LD_INT 1
42065: NEG
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 2
42073: PUSH
42074: LD_INT 0
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 2
42083: PUSH
42084: LD_INT 1
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 2
42093: PUSH
42094: LD_INT 2
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 1
42103: PUSH
42104: LD_INT 2
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 0
42113: PUSH
42114: LD_INT 2
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 1
42123: NEG
42124: PUSH
42125: LD_INT 1
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 2
42134: NEG
42135: PUSH
42136: LD_INT 0
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 2
42145: NEG
42146: PUSH
42147: LD_INT 1
42149: NEG
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 2
42157: NEG
42158: PUSH
42159: LD_INT 2
42161: NEG
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 1
42169: PUSH
42170: LD_INT 2
42172: NEG
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 2
42180: PUSH
42181: LD_INT 1
42183: NEG
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 3
42191: PUSH
42192: LD_INT 1
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 3
42201: PUSH
42202: LD_INT 2
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42234: LD_ADDR_VAR 0 25
42238: PUSH
42239: LD_INT 0
42241: PUSH
42242: LD_INT 0
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 0
42251: PUSH
42252: LD_INT 1
42254: NEG
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 1
42262: PUSH
42263: LD_INT 0
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 1
42272: PUSH
42273: LD_INT 1
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 0
42282: PUSH
42283: LD_INT 1
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 1
42292: NEG
42293: PUSH
42294: LD_INT 0
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 1
42303: NEG
42304: PUSH
42305: LD_INT 1
42307: NEG
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 1
42315: NEG
42316: PUSH
42317: LD_INT 2
42319: NEG
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 0
42327: PUSH
42328: LD_INT 2
42330: NEG
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 1
42338: PUSH
42339: LD_INT 1
42341: NEG
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 2
42349: PUSH
42350: LD_INT 0
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 2
42359: PUSH
42360: LD_INT 1
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 2
42369: PUSH
42370: LD_INT 2
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 1
42379: PUSH
42380: LD_INT 2
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 0
42389: PUSH
42390: LD_INT 2
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 1
42399: NEG
42400: PUSH
42401: LD_INT 1
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 2
42410: NEG
42411: PUSH
42412: LD_INT 0
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 2
42421: NEG
42422: PUSH
42423: LD_INT 1
42425: NEG
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 2
42433: NEG
42434: PUSH
42435: LD_INT 2
42437: NEG
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 3
42445: PUSH
42446: LD_INT 1
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 3
42455: PUSH
42456: LD_INT 2
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 2
42465: PUSH
42466: LD_INT 3
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 1
42475: PUSH
42476: LD_INT 3
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42508: LD_ADDR_VAR 0 26
42512: PUSH
42513: LD_INT 0
42515: PUSH
42516: LD_INT 0
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 0
42525: PUSH
42526: LD_INT 1
42528: NEG
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 1
42536: PUSH
42537: LD_INT 0
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 1
42546: PUSH
42547: LD_INT 1
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 0
42556: PUSH
42557: LD_INT 1
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 1
42566: NEG
42567: PUSH
42568: LD_INT 0
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 1
42577: NEG
42578: PUSH
42579: LD_INT 1
42581: NEG
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 1
42589: NEG
42590: PUSH
42591: LD_INT 2
42593: NEG
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 0
42601: PUSH
42602: LD_INT 2
42604: NEG
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 1
42612: PUSH
42613: LD_INT 1
42615: NEG
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 2
42623: PUSH
42624: LD_INT 0
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 2
42633: PUSH
42634: LD_INT 1
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 2
42643: PUSH
42644: LD_INT 2
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 1
42653: PUSH
42654: LD_INT 2
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 0
42663: PUSH
42664: LD_INT 2
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 1
42673: NEG
42674: PUSH
42675: LD_INT 1
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 2
42684: NEG
42685: PUSH
42686: LD_INT 0
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 2
42695: NEG
42696: PUSH
42697: LD_INT 1
42699: NEG
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 2
42707: NEG
42708: PUSH
42709: LD_INT 2
42711: NEG
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 2
42719: PUSH
42720: LD_INT 3
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 1
42729: PUSH
42730: LD_INT 3
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 1
42739: NEG
42740: PUSH
42741: LD_INT 2
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 2
42750: NEG
42751: PUSH
42752: LD_INT 1
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42784: LD_ADDR_VAR 0 27
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: LD_INT 0
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 0
42801: PUSH
42802: LD_INT 1
42804: NEG
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 1
42812: PUSH
42813: LD_INT 0
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 1
42822: PUSH
42823: LD_INT 1
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 0
42832: PUSH
42833: LD_INT 1
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 1
42842: NEG
42843: PUSH
42844: LD_INT 0
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 1
42853: NEG
42854: PUSH
42855: LD_INT 1
42857: NEG
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 1
42865: NEG
42866: PUSH
42867: LD_INT 2
42869: NEG
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 0
42877: PUSH
42878: LD_INT 2
42880: NEG
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 1
42888: PUSH
42889: LD_INT 1
42891: NEG
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 2
42899: PUSH
42900: LD_INT 0
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 2
42909: PUSH
42910: LD_INT 1
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 2
42919: PUSH
42920: LD_INT 2
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 1
42929: PUSH
42930: LD_INT 2
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 0
42939: PUSH
42940: LD_INT 2
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 1
42949: NEG
42950: PUSH
42951: LD_INT 1
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 2
42960: NEG
42961: PUSH
42962: LD_INT 0
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 2
42971: NEG
42972: PUSH
42973: LD_INT 1
42975: NEG
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: LD_INT 2
42983: NEG
42984: PUSH
42985: LD_INT 2
42987: NEG
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 1
42995: NEG
42996: PUSH
42997: LD_INT 2
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 2
43006: NEG
43007: PUSH
43008: LD_INT 1
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 3
43017: NEG
43018: PUSH
43019: LD_INT 1
43021: NEG
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 3
43029: NEG
43030: PUSH
43031: LD_INT 2
43033: NEG
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43064: LD_ADDR_VAR 0 28
43068: PUSH
43069: LD_INT 0
43071: PUSH
43072: LD_INT 0
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 0
43081: PUSH
43082: LD_INT 1
43084: NEG
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 1
43092: PUSH
43093: LD_INT 0
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 1
43102: PUSH
43103: LD_INT 1
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 0
43112: PUSH
43113: LD_INT 1
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 1
43122: NEG
43123: PUSH
43124: LD_INT 0
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 1
43133: NEG
43134: PUSH
43135: LD_INT 1
43137: NEG
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 1
43145: NEG
43146: PUSH
43147: LD_INT 2
43149: NEG
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: LD_INT 0
43157: PUSH
43158: LD_INT 2
43160: NEG
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 1
43168: PUSH
43169: LD_INT 1
43171: NEG
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 2
43179: PUSH
43180: LD_INT 0
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 2
43189: PUSH
43190: LD_INT 1
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 2
43199: PUSH
43200: LD_INT 2
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 1
43209: PUSH
43210: LD_INT 2
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 0
43219: PUSH
43220: LD_INT 2
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 1
43229: NEG
43230: PUSH
43231: LD_INT 1
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 2
43240: NEG
43241: PUSH
43242: LD_INT 0
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 2
43251: NEG
43252: PUSH
43253: LD_INT 1
43255: NEG
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 2
43263: NEG
43264: PUSH
43265: LD_INT 2
43267: NEG
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 2
43275: NEG
43276: PUSH
43277: LD_INT 3
43279: NEG
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 1
43287: NEG
43288: PUSH
43289: LD_INT 3
43291: NEG
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 3
43299: NEG
43300: PUSH
43301: LD_INT 1
43303: NEG
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 3
43311: NEG
43312: PUSH
43313: LD_INT 2
43315: NEG
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43346: LD_ADDR_VAR 0 29
43350: PUSH
43351: LD_INT 0
43353: PUSH
43354: LD_INT 0
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 0
43363: PUSH
43364: LD_INT 1
43366: NEG
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 1
43374: PUSH
43375: LD_INT 0
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 1
43384: PUSH
43385: LD_INT 1
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 0
43394: PUSH
43395: LD_INT 1
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 1
43404: NEG
43405: PUSH
43406: LD_INT 0
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 1
43415: NEG
43416: PUSH
43417: LD_INT 1
43419: NEG
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 1
43427: NEG
43428: PUSH
43429: LD_INT 2
43431: NEG
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 0
43439: PUSH
43440: LD_INT 2
43442: NEG
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 1
43450: PUSH
43451: LD_INT 1
43453: NEG
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 2
43461: PUSH
43462: LD_INT 0
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 2
43471: PUSH
43472: LD_INT 1
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 1
43481: PUSH
43482: LD_INT 2
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 0
43491: PUSH
43492: LD_INT 2
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 1
43501: NEG
43502: PUSH
43503: LD_INT 1
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 2
43512: NEG
43513: PUSH
43514: LD_INT 1
43516: NEG
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 2
43524: NEG
43525: PUSH
43526: LD_INT 2
43528: NEG
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 2
43536: NEG
43537: PUSH
43538: LD_INT 3
43540: NEG
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 2
43548: PUSH
43549: LD_INT 1
43551: NEG
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 3
43559: PUSH
43560: LD_INT 1
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 1
43569: PUSH
43570: LD_INT 3
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 1
43579: NEG
43580: PUSH
43581: LD_INT 2
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 3
43590: NEG
43591: PUSH
43592: LD_INT 2
43594: NEG
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43625: LD_ADDR_VAR 0 30
43629: PUSH
43630: LD_INT 0
43632: PUSH
43633: LD_INT 0
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 0
43642: PUSH
43643: LD_INT 1
43645: NEG
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 1
43653: PUSH
43654: LD_INT 0
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 1
43663: PUSH
43664: LD_INT 1
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 0
43673: PUSH
43674: LD_INT 1
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 1
43683: NEG
43684: PUSH
43685: LD_INT 0
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 1
43694: NEG
43695: PUSH
43696: LD_INT 1
43698: NEG
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 1
43706: NEG
43707: PUSH
43708: LD_INT 2
43710: NEG
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 0
43718: PUSH
43719: LD_INT 2
43721: NEG
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 1
43729: PUSH
43730: LD_INT 1
43732: NEG
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 2
43740: PUSH
43741: LD_INT 0
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 2
43750: PUSH
43751: LD_INT 1
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 2
43760: PUSH
43761: LD_INT 2
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 1
43770: PUSH
43771: LD_INT 2
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 1
43780: NEG
43781: PUSH
43782: LD_INT 1
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 2
43791: NEG
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 2
43802: NEG
43803: PUSH
43804: LD_INT 1
43806: NEG
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 1
43814: NEG
43815: PUSH
43816: LD_INT 3
43818: NEG
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 1
43826: PUSH
43827: LD_INT 2
43829: NEG
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 3
43837: PUSH
43838: LD_INT 2
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 2
43847: PUSH
43848: LD_INT 3
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 2
43857: NEG
43858: PUSH
43859: LD_INT 1
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 3
43868: NEG
43869: PUSH
43870: LD_INT 1
43872: NEG
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43903: LD_ADDR_VAR 0 31
43907: PUSH
43908: LD_INT 0
43910: PUSH
43911: LD_INT 0
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 0
43920: PUSH
43921: LD_INT 1
43923: NEG
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 1
43931: PUSH
43932: LD_INT 0
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 1
43941: PUSH
43942: LD_INT 1
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 0
43951: PUSH
43952: LD_INT 1
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 1
43961: NEG
43962: PUSH
43963: LD_INT 0
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 1
43972: NEG
43973: PUSH
43974: LD_INT 1
43976: NEG
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 1
43984: NEG
43985: PUSH
43986: LD_INT 2
43988: NEG
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 1
43996: PUSH
43997: LD_INT 1
43999: NEG
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 2
44007: PUSH
44008: LD_INT 0
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 2
44017: PUSH
44018: LD_INT 1
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 2
44027: PUSH
44028: LD_INT 2
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 1
44037: PUSH
44038: LD_INT 2
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 0
44047: PUSH
44048: LD_INT 2
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 1
44057: NEG
44058: PUSH
44059: LD_INT 1
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 2
44068: NEG
44069: PUSH
44070: LD_INT 1
44072: NEG
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 2
44080: NEG
44081: PUSH
44082: LD_INT 2
44084: NEG
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 2
44092: NEG
44093: PUSH
44094: LD_INT 3
44096: NEG
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 2
44104: PUSH
44105: LD_INT 1
44107: NEG
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 3
44115: PUSH
44116: LD_INT 1
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 1
44125: PUSH
44126: LD_INT 3
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 1
44135: NEG
44136: PUSH
44137: LD_INT 2
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 3
44146: NEG
44147: PUSH
44148: LD_INT 2
44150: NEG
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44181: LD_ADDR_VAR 0 32
44185: PUSH
44186: LD_INT 0
44188: PUSH
44189: LD_INT 0
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 0
44198: PUSH
44199: LD_INT 1
44201: NEG
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 1
44209: PUSH
44210: LD_INT 0
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 1
44219: PUSH
44220: LD_INT 1
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 0
44229: PUSH
44230: LD_INT 1
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 1
44239: NEG
44240: PUSH
44241: LD_INT 0
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 1
44250: NEG
44251: PUSH
44252: LD_INT 1
44254: NEG
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 1
44262: NEG
44263: PUSH
44264: LD_INT 2
44266: NEG
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 0
44274: PUSH
44275: LD_INT 2
44277: NEG
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 1
44285: PUSH
44286: LD_INT 1
44288: NEG
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 2
44296: PUSH
44297: LD_INT 1
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 2
44306: PUSH
44307: LD_INT 2
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 1
44316: PUSH
44317: LD_INT 2
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 0
44326: PUSH
44327: LD_INT 2
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 1
44336: NEG
44337: PUSH
44338: LD_INT 1
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 2
44347: NEG
44348: PUSH
44349: LD_INT 0
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 2
44358: NEG
44359: PUSH
44360: LD_INT 1
44362: NEG
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 1
44370: NEG
44371: PUSH
44372: LD_INT 3
44374: NEG
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 1
44382: PUSH
44383: LD_INT 2
44385: NEG
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 3
44393: PUSH
44394: LD_INT 2
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 2
44403: PUSH
44404: LD_INT 3
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 2
44413: NEG
44414: PUSH
44415: LD_INT 1
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 3
44424: NEG
44425: PUSH
44426: LD_INT 1
44428: NEG
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44459: LD_ADDR_VAR 0 33
44463: PUSH
44464: LD_INT 0
44466: PUSH
44467: LD_INT 0
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 0
44476: PUSH
44477: LD_INT 1
44479: NEG
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 1
44487: PUSH
44488: LD_INT 0
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 1
44497: PUSH
44498: LD_INT 1
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 0
44507: PUSH
44508: LD_INT 1
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 1
44517: NEG
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 1
44528: NEG
44529: PUSH
44530: LD_INT 1
44532: NEG
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 1
44540: NEG
44541: PUSH
44542: LD_INT 2
44544: NEG
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 1
44552: PUSH
44553: LD_INT 1
44555: NEG
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 2
44563: PUSH
44564: LD_INT 0
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 2
44573: PUSH
44574: LD_INT 1
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 1
44583: PUSH
44584: LD_INT 2
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 0
44593: PUSH
44594: LD_INT 2
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 1
44603: NEG
44604: PUSH
44605: LD_INT 1
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 2
44614: NEG
44615: PUSH
44616: LD_INT 0
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 2
44625: NEG
44626: PUSH
44627: LD_INT 1
44629: NEG
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 2
44637: NEG
44638: PUSH
44639: LD_INT 2
44641: NEG
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 2
44649: NEG
44650: PUSH
44651: LD_INT 3
44653: NEG
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 2
44661: PUSH
44662: LD_INT 1
44664: NEG
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 3
44672: PUSH
44673: LD_INT 1
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 1
44682: PUSH
44683: LD_INT 3
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 1
44692: NEG
44693: PUSH
44694: LD_INT 2
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 3
44703: NEG
44704: PUSH
44705: LD_INT 2
44707: NEG
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44738: LD_ADDR_VAR 0 34
44742: PUSH
44743: LD_INT 0
44745: PUSH
44746: LD_INT 0
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 0
44755: PUSH
44756: LD_INT 1
44758: NEG
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 1
44766: PUSH
44767: LD_INT 0
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 1
44776: PUSH
44777: LD_INT 1
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 0
44786: PUSH
44787: LD_INT 1
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 1
44796: NEG
44797: PUSH
44798: LD_INT 0
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 1
44807: NEG
44808: PUSH
44809: LD_INT 1
44811: NEG
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 1
44819: NEG
44820: PUSH
44821: LD_INT 2
44823: NEG
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 0
44831: PUSH
44832: LD_INT 2
44834: NEG
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 1
44842: PUSH
44843: LD_INT 1
44845: NEG
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 2
44853: PUSH
44854: LD_INT 1
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 2
44863: PUSH
44864: LD_INT 2
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 1
44873: PUSH
44874: LD_INT 2
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 1
44883: NEG
44884: PUSH
44885: LD_INT 1
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 2
44894: NEG
44895: PUSH
44896: LD_INT 0
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 2
44905: NEG
44906: PUSH
44907: LD_INT 1
44909: NEG
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 2
44917: NEG
44918: PUSH
44919: LD_INT 2
44921: NEG
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 1
44929: NEG
44930: PUSH
44931: LD_INT 3
44933: NEG
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 1
44941: PUSH
44942: LD_INT 2
44944: NEG
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 3
44952: PUSH
44953: LD_INT 2
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 2
44962: PUSH
44963: LD_INT 3
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 2
44972: NEG
44973: PUSH
44974: LD_INT 1
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 3
44983: NEG
44984: PUSH
44985: LD_INT 1
44987: NEG
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45018: LD_ADDR_VAR 0 35
45022: PUSH
45023: LD_INT 0
45025: PUSH
45026: LD_INT 0
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 0
45035: PUSH
45036: LD_INT 1
45038: NEG
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 1
45046: PUSH
45047: LD_INT 0
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 1
45056: PUSH
45057: LD_INT 1
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 0
45066: PUSH
45067: LD_INT 1
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 1
45076: NEG
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 1
45087: NEG
45088: PUSH
45089: LD_INT 1
45091: NEG
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 2
45099: PUSH
45100: LD_INT 1
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 2
45109: NEG
45110: PUSH
45111: LD_INT 1
45113: NEG
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45130: LD_ADDR_VAR 0 36
45134: PUSH
45135: LD_INT 0
45137: PUSH
45138: LD_INT 0
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 0
45147: PUSH
45148: LD_INT 1
45150: NEG
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 1
45158: PUSH
45159: LD_INT 0
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 1
45168: PUSH
45169: LD_INT 1
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 0
45178: PUSH
45179: LD_INT 1
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 1
45188: NEG
45189: PUSH
45190: LD_INT 0
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 1
45199: NEG
45200: PUSH
45201: LD_INT 1
45203: NEG
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 1
45211: NEG
45212: PUSH
45213: LD_INT 2
45215: NEG
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 1
45223: PUSH
45224: LD_INT 2
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45242: LD_ADDR_VAR 0 37
45246: PUSH
45247: LD_INT 0
45249: PUSH
45250: LD_INT 0
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 0
45259: PUSH
45260: LD_INT 1
45262: NEG
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 1
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 1
45280: PUSH
45281: LD_INT 1
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 0
45290: PUSH
45291: LD_INT 1
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 1
45300: NEG
45301: PUSH
45302: LD_INT 0
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 1
45311: NEG
45312: PUSH
45313: LD_INT 1
45315: NEG
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 1
45323: PUSH
45324: LD_INT 1
45326: NEG
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 1
45334: NEG
45335: PUSH
45336: LD_INT 1
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45354: LD_ADDR_VAR 0 38
45358: PUSH
45359: LD_INT 0
45361: PUSH
45362: LD_INT 0
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 0
45371: PUSH
45372: LD_INT 1
45374: NEG
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 1
45382: PUSH
45383: LD_INT 0
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 1
45392: PUSH
45393: LD_INT 1
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 0
45402: PUSH
45403: LD_INT 1
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 1
45412: NEG
45413: PUSH
45414: LD_INT 0
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 1
45423: NEG
45424: PUSH
45425: LD_INT 1
45427: NEG
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 2
45435: PUSH
45436: LD_INT 1
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 2
45445: NEG
45446: PUSH
45447: LD_INT 1
45449: NEG
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45466: LD_ADDR_VAR 0 39
45470: PUSH
45471: LD_INT 0
45473: PUSH
45474: LD_INT 0
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 0
45483: PUSH
45484: LD_INT 1
45486: NEG
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 1
45494: PUSH
45495: LD_INT 0
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 1
45504: PUSH
45505: LD_INT 1
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 0
45514: PUSH
45515: LD_INT 1
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 1
45524: NEG
45525: PUSH
45526: LD_INT 0
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 1
45535: NEG
45536: PUSH
45537: LD_INT 1
45539: NEG
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 1
45547: NEG
45548: PUSH
45549: LD_INT 2
45551: NEG
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 1
45559: PUSH
45560: LD_INT 2
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45578: LD_ADDR_VAR 0 40
45582: PUSH
45583: LD_INT 0
45585: PUSH
45586: LD_INT 0
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 0
45595: PUSH
45596: LD_INT 1
45598: NEG
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 1
45606: PUSH
45607: LD_INT 0
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 1
45616: PUSH
45617: LD_INT 1
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 0
45626: PUSH
45627: LD_INT 1
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 1
45636: NEG
45637: PUSH
45638: LD_INT 0
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 1
45647: NEG
45648: PUSH
45649: LD_INT 1
45651: NEG
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 1
45659: PUSH
45660: LD_INT 1
45662: NEG
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 1
45670: NEG
45671: PUSH
45672: LD_INT 1
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45690: LD_ADDR_VAR 0 41
45694: PUSH
45695: LD_INT 0
45697: PUSH
45698: LD_INT 0
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 0
45707: PUSH
45708: LD_INT 1
45710: NEG
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 1
45718: PUSH
45719: LD_INT 0
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 1
45728: PUSH
45729: LD_INT 1
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 0
45738: PUSH
45739: LD_INT 1
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 1
45748: NEG
45749: PUSH
45750: LD_INT 0
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 1
45759: NEG
45760: PUSH
45761: LD_INT 1
45763: NEG
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 1
45771: NEG
45772: PUSH
45773: LD_INT 2
45775: NEG
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 1
45783: PUSH
45784: LD_INT 1
45786: NEG
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 2
45794: PUSH
45795: LD_INT 0
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 2
45804: PUSH
45805: LD_INT 1
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 2
45814: PUSH
45815: LD_INT 2
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 1
45824: PUSH
45825: LD_INT 2
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 1
45834: NEG
45835: PUSH
45836: LD_INT 1
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 2
45845: NEG
45846: PUSH
45847: LD_INT 0
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 2
45856: NEG
45857: PUSH
45858: LD_INT 1
45860: NEG
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 2
45868: NEG
45869: PUSH
45870: LD_INT 2
45872: NEG
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 2
45880: NEG
45881: PUSH
45882: LD_INT 3
45884: NEG
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 2
45892: PUSH
45893: LD_INT 1
45895: NEG
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 3
45903: PUSH
45904: LD_INT 0
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 3
45913: PUSH
45914: LD_INT 1
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 3
45923: PUSH
45924: LD_INT 2
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 3
45933: PUSH
45934: LD_INT 3
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 2
45943: PUSH
45944: LD_INT 3
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 2
45953: NEG
45954: PUSH
45955: LD_INT 1
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 3
45964: NEG
45965: PUSH
45966: LD_INT 0
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 3
45975: NEG
45976: PUSH
45977: LD_INT 1
45979: NEG
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 3
45987: NEG
45988: PUSH
45989: LD_INT 2
45991: NEG
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 3
45999: NEG
46000: PUSH
46001: LD_INT 3
46003: NEG
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46040: LD_ADDR_VAR 0 42
46044: PUSH
46045: LD_INT 0
46047: PUSH
46048: LD_INT 0
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 0
46057: PUSH
46058: LD_INT 1
46060: NEG
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 1
46068: PUSH
46069: LD_INT 0
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 1
46078: PUSH
46079: LD_INT 1
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: LD_INT 1
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 1
46098: NEG
46099: PUSH
46100: LD_INT 0
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 1
46109: NEG
46110: PUSH
46111: LD_INT 1
46113: NEG
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 1
46121: NEG
46122: PUSH
46123: LD_INT 2
46125: NEG
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 0
46133: PUSH
46134: LD_INT 2
46136: NEG
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 1
46144: PUSH
46145: LD_INT 1
46147: NEG
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 2
46155: PUSH
46156: LD_INT 1
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 2
46165: PUSH
46166: LD_INT 2
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 1
46175: PUSH
46176: LD_INT 2
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 0
46185: PUSH
46186: LD_INT 2
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 1
46195: NEG
46196: PUSH
46197: LD_INT 1
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 2
46206: NEG
46207: PUSH
46208: LD_INT 1
46210: NEG
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 2
46218: NEG
46219: PUSH
46220: LD_INT 2
46222: NEG
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 2
46230: NEG
46231: PUSH
46232: LD_INT 3
46234: NEG
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 1
46242: NEG
46243: PUSH
46244: LD_INT 3
46246: NEG
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 0
46254: PUSH
46255: LD_INT 3
46257: NEG
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 1
46265: PUSH
46266: LD_INT 2
46268: NEG
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 3
46276: PUSH
46277: LD_INT 2
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 3
46286: PUSH
46287: LD_INT 3
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 2
46296: PUSH
46297: LD_INT 3
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 1
46306: PUSH
46307: LD_INT 3
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 0
46316: PUSH
46317: LD_INT 3
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 1
46326: NEG
46327: PUSH
46328: LD_INT 2
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 3
46337: NEG
46338: PUSH
46339: LD_INT 2
46341: NEG
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 3
46349: NEG
46350: PUSH
46351: LD_INT 3
46353: NEG
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46390: LD_ADDR_VAR 0 43
46394: PUSH
46395: LD_INT 0
46397: PUSH
46398: LD_INT 0
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 0
46407: PUSH
46408: LD_INT 1
46410: NEG
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 1
46418: PUSH
46419: LD_INT 0
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 1
46428: PUSH
46429: LD_INT 1
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 0
46438: PUSH
46439: LD_INT 1
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 1
46448: NEG
46449: PUSH
46450: LD_INT 0
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 1
46459: NEG
46460: PUSH
46461: LD_INT 1
46463: NEG
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 1
46471: NEG
46472: PUSH
46473: LD_INT 2
46475: NEG
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 0
46483: PUSH
46484: LD_INT 2
46486: NEG
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 1
46494: PUSH
46495: LD_INT 1
46497: NEG
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 2
46505: PUSH
46506: LD_INT 0
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 2
46515: PUSH
46516: LD_INT 1
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 1
46525: PUSH
46526: LD_INT 2
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 0
46535: PUSH
46536: LD_INT 2
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 1
46545: NEG
46546: PUSH
46547: LD_INT 1
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 2
46556: NEG
46557: PUSH
46558: LD_INT 0
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 2
46567: NEG
46568: PUSH
46569: LD_INT 1
46571: NEG
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 1
46579: NEG
46580: PUSH
46581: LD_INT 3
46583: NEG
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 0
46591: PUSH
46592: LD_INT 3
46594: NEG
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 1
46602: PUSH
46603: LD_INT 2
46605: NEG
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 2
46613: PUSH
46614: LD_INT 1
46616: NEG
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 3
46624: PUSH
46625: LD_INT 0
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 3
46634: PUSH
46635: LD_INT 1
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 1
46644: PUSH
46645: LD_INT 3
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 0
46654: PUSH
46655: LD_INT 3
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 1
46664: NEG
46665: PUSH
46666: LD_INT 2
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 2
46675: NEG
46676: PUSH
46677: LD_INT 1
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 3
46686: NEG
46687: PUSH
46688: LD_INT 0
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 3
46697: NEG
46698: PUSH
46699: LD_INT 1
46701: NEG
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46738: LD_ADDR_VAR 0 44
46742: PUSH
46743: LD_INT 0
46745: PUSH
46746: LD_INT 0
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 0
46755: PUSH
46756: LD_INT 1
46758: NEG
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 1
46766: PUSH
46767: LD_INT 0
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 1
46776: PUSH
46777: LD_INT 1
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 0
46786: PUSH
46787: LD_INT 1
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 1
46796: NEG
46797: PUSH
46798: LD_INT 0
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 1
46807: NEG
46808: PUSH
46809: LD_INT 1
46811: NEG
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 1
46819: NEG
46820: PUSH
46821: LD_INT 2
46823: NEG
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 1
46831: PUSH
46832: LD_INT 1
46834: NEG
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 2
46842: PUSH
46843: LD_INT 0
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 2
46852: PUSH
46853: LD_INT 1
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 2
46862: PUSH
46863: LD_INT 2
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 1
46872: PUSH
46873: LD_INT 2
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 1
46882: NEG
46883: PUSH
46884: LD_INT 1
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 2
46893: NEG
46894: PUSH
46895: LD_INT 0
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 2
46904: NEG
46905: PUSH
46906: LD_INT 1
46908: NEG
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 2
46916: NEG
46917: PUSH
46918: LD_INT 2
46920: NEG
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 2
46928: NEG
46929: PUSH
46930: LD_INT 3
46932: NEG
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 2
46940: PUSH
46941: LD_INT 1
46943: NEG
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 3
46951: PUSH
46952: LD_INT 0
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 3
46961: PUSH
46962: LD_INT 1
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 3
46971: PUSH
46972: LD_INT 2
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 3
46981: PUSH
46982: LD_INT 3
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 2
46991: PUSH
46992: LD_INT 3
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 2
47001: NEG
47002: PUSH
47003: LD_INT 1
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 3
47012: NEG
47013: PUSH
47014: LD_INT 0
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 3
47023: NEG
47024: PUSH
47025: LD_INT 1
47027: NEG
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 3
47035: NEG
47036: PUSH
47037: LD_INT 2
47039: NEG
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 3
47047: NEG
47048: PUSH
47049: LD_INT 3
47051: NEG
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47088: LD_ADDR_VAR 0 45
47092: PUSH
47093: LD_INT 0
47095: PUSH
47096: LD_INT 0
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: LD_INT 1
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 1
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 1
47126: PUSH
47127: LD_INT 1
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 0
47136: PUSH
47137: LD_INT 1
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 1
47146: NEG
47147: PUSH
47148: LD_INT 0
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 1
47157: NEG
47158: PUSH
47159: LD_INT 1
47161: NEG
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 1
47169: NEG
47170: PUSH
47171: LD_INT 2
47173: NEG
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 0
47181: PUSH
47182: LD_INT 2
47184: NEG
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 1
47192: PUSH
47193: LD_INT 1
47195: NEG
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 2
47203: PUSH
47204: LD_INT 1
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 2
47213: PUSH
47214: LD_INT 2
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: LD_INT 2
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 0
47233: PUSH
47234: LD_INT 2
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 1
47243: NEG
47244: PUSH
47245: LD_INT 1
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 2
47254: NEG
47255: PUSH
47256: LD_INT 1
47258: NEG
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 2
47266: NEG
47267: PUSH
47268: LD_INT 2
47270: NEG
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 2
47278: NEG
47279: PUSH
47280: LD_INT 3
47282: NEG
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 1
47290: NEG
47291: PUSH
47292: LD_INT 3
47294: NEG
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 0
47302: PUSH
47303: LD_INT 3
47305: NEG
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 1
47313: PUSH
47314: LD_INT 2
47316: NEG
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 3
47324: PUSH
47325: LD_INT 2
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 3
47334: PUSH
47335: LD_INT 3
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 2
47344: PUSH
47345: LD_INT 3
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 1
47354: PUSH
47355: LD_INT 3
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 0
47364: PUSH
47365: LD_INT 3
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 1
47374: NEG
47375: PUSH
47376: LD_INT 2
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 3
47385: NEG
47386: PUSH
47387: LD_INT 2
47389: NEG
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 3
47397: NEG
47398: PUSH
47399: LD_INT 3
47401: NEG
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47438: LD_ADDR_VAR 0 46
47442: PUSH
47443: LD_INT 0
47445: PUSH
47446: LD_INT 0
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 0
47455: PUSH
47456: LD_INT 1
47458: NEG
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 1
47466: PUSH
47467: LD_INT 0
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 1
47476: PUSH
47477: LD_INT 1
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 0
47486: PUSH
47487: LD_INT 1
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 1
47496: NEG
47497: PUSH
47498: LD_INT 0
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 1
47507: NEG
47508: PUSH
47509: LD_INT 1
47511: NEG
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 1
47519: NEG
47520: PUSH
47521: LD_INT 2
47523: NEG
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 0
47531: PUSH
47532: LD_INT 2
47534: NEG
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 1
47542: PUSH
47543: LD_INT 1
47545: NEG
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 2
47553: PUSH
47554: LD_INT 0
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 2
47563: PUSH
47564: LD_INT 1
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 1
47573: PUSH
47574: LD_INT 2
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 0
47583: PUSH
47584: LD_INT 2
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 1
47593: NEG
47594: PUSH
47595: LD_INT 1
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 2
47604: NEG
47605: PUSH
47606: LD_INT 0
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 2
47615: NEG
47616: PUSH
47617: LD_INT 1
47619: NEG
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 1
47627: NEG
47628: PUSH
47629: LD_INT 3
47631: NEG
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 0
47639: PUSH
47640: LD_INT 3
47642: NEG
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 1
47650: PUSH
47651: LD_INT 2
47653: NEG
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 2
47661: PUSH
47662: LD_INT 1
47664: NEG
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 3
47672: PUSH
47673: LD_INT 0
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 3
47682: PUSH
47683: LD_INT 1
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 1
47692: PUSH
47693: LD_INT 3
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 0
47702: PUSH
47703: LD_INT 3
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 1
47712: NEG
47713: PUSH
47714: LD_INT 2
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 2
47723: NEG
47724: PUSH
47725: LD_INT 1
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 3
47734: NEG
47735: PUSH
47736: LD_INT 0
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 3
47745: NEG
47746: PUSH
47747: LD_INT 1
47749: NEG
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47786: LD_ADDR_VAR 0 47
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: LD_INT 0
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 0
47803: PUSH
47804: LD_INT 1
47806: NEG
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: PUSH
47815: LD_INT 0
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 1
47824: PUSH
47825: LD_INT 1
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 0
47834: PUSH
47835: LD_INT 1
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 1
47844: NEG
47845: PUSH
47846: LD_INT 0
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 1
47855: NEG
47856: PUSH
47857: LD_INT 1
47859: NEG
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 1
47867: NEG
47868: PUSH
47869: LD_INT 2
47871: NEG
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 0
47879: PUSH
47880: LD_INT 2
47882: NEG
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 1
47890: PUSH
47891: LD_INT 1
47893: NEG
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 2
47901: NEG
47902: PUSH
47903: LD_INT 1
47905: NEG
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 2
47913: NEG
47914: PUSH
47915: LD_INT 2
47917: NEG
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47937: LD_ADDR_VAR 0 48
47941: PUSH
47942: LD_INT 0
47944: PUSH
47945: LD_INT 0
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 0
47954: PUSH
47955: LD_INT 1
47957: NEG
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 1
47965: PUSH
47966: LD_INT 0
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 1
47975: PUSH
47976: LD_INT 1
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 0
47985: PUSH
47986: LD_INT 1
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 1
47995: NEG
47996: PUSH
47997: LD_INT 0
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 1
48006: NEG
48007: PUSH
48008: LD_INT 1
48010: NEG
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: LD_INT 2
48022: NEG
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 0
48030: PUSH
48031: LD_INT 2
48033: NEG
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 1
48041: PUSH
48042: LD_INT 1
48044: NEG
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 2
48052: PUSH
48053: LD_INT 0
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 2
48062: PUSH
48063: LD_INT 1
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48084: LD_ADDR_VAR 0 49
48088: PUSH
48089: LD_INT 0
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 1
48112: PUSH
48113: LD_INT 0
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 1
48122: PUSH
48123: LD_INT 1
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 0
48132: PUSH
48133: LD_INT 1
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 1
48142: NEG
48143: PUSH
48144: LD_INT 0
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 1
48153: NEG
48154: PUSH
48155: LD_INT 1
48157: NEG
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 1
48165: PUSH
48166: LD_INT 1
48168: NEG
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 2
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 2
48186: PUSH
48187: LD_INT 1
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 2
48196: PUSH
48197: LD_INT 2
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 1
48206: PUSH
48207: LD_INT 2
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48228: LD_ADDR_VAR 0 50
48232: PUSH
48233: LD_INT 0
48235: PUSH
48236: LD_INT 0
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 0
48245: PUSH
48246: LD_INT 1
48248: NEG
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 1
48256: PUSH
48257: LD_INT 0
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 1
48266: PUSH
48267: LD_INT 1
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 0
48276: PUSH
48277: LD_INT 1
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 1
48286: NEG
48287: PUSH
48288: LD_INT 0
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 1
48297: NEG
48298: PUSH
48299: LD_INT 1
48301: NEG
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 2
48309: PUSH
48310: LD_INT 1
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 2
48319: PUSH
48320: LD_INT 2
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 1
48329: PUSH
48330: LD_INT 2
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 0
48339: PUSH
48340: LD_INT 2
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 1
48349: NEG
48350: PUSH
48351: LD_INT 1
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48372: LD_ADDR_VAR 0 51
48376: PUSH
48377: LD_INT 0
48379: PUSH
48380: LD_INT 0
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 0
48389: PUSH
48390: LD_INT 1
48392: NEG
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 1
48400: PUSH
48401: LD_INT 0
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 1
48410: PUSH
48411: LD_INT 1
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 0
48420: PUSH
48421: LD_INT 1
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 1
48430: NEG
48431: PUSH
48432: LD_INT 0
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 1
48441: NEG
48442: PUSH
48443: LD_INT 1
48445: NEG
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 1
48453: PUSH
48454: LD_INT 2
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 0
48463: PUSH
48464: LD_INT 2
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 1
48473: NEG
48474: PUSH
48475: LD_INT 1
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 2
48484: NEG
48485: PUSH
48486: LD_INT 0
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 2
48495: NEG
48496: PUSH
48497: LD_INT 1
48499: NEG
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48519: LD_ADDR_VAR 0 52
48523: PUSH
48524: LD_INT 0
48526: PUSH
48527: LD_INT 0
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 0
48536: PUSH
48537: LD_INT 1
48539: NEG
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 1
48547: PUSH
48548: LD_INT 0
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 1
48557: PUSH
48558: LD_INT 1
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 0
48567: PUSH
48568: LD_INT 1
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 1
48577: NEG
48578: PUSH
48579: LD_INT 0
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 1
48588: NEG
48589: PUSH
48590: LD_INT 1
48592: NEG
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 1
48600: NEG
48601: PUSH
48602: LD_INT 2
48604: NEG
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 1
48612: NEG
48613: PUSH
48614: LD_INT 1
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 2
48623: NEG
48624: PUSH
48625: LD_INT 0
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 2
48634: NEG
48635: PUSH
48636: LD_INT 1
48638: NEG
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 2
48646: NEG
48647: PUSH
48648: LD_INT 2
48650: NEG
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48670: LD_ADDR_VAR 0 53
48674: PUSH
48675: LD_INT 0
48677: PUSH
48678: LD_INT 0
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 0
48687: PUSH
48688: LD_INT 1
48690: NEG
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 1
48698: PUSH
48699: LD_INT 0
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 1
48708: PUSH
48709: LD_INT 1
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 0
48718: PUSH
48719: LD_INT 1
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 1
48728: NEG
48729: PUSH
48730: LD_INT 0
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 1
48739: NEG
48740: PUSH
48741: LD_INT 1
48743: NEG
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 1
48751: NEG
48752: PUSH
48753: LD_INT 2
48755: NEG
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 0
48763: PUSH
48764: LD_INT 2
48766: NEG
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 1
48774: PUSH
48775: LD_INT 1
48777: NEG
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 2
48785: PUSH
48786: LD_INT 0
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 2
48795: PUSH
48796: LD_INT 1
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 2
48805: PUSH
48806: LD_INT 2
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 1
48815: PUSH
48816: LD_INT 2
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 0
48825: PUSH
48826: LD_INT 2
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 1
48835: NEG
48836: PUSH
48837: LD_INT 1
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 2
48846: NEG
48847: PUSH
48848: LD_INT 0
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 2
48857: NEG
48858: PUSH
48859: LD_INT 1
48861: NEG
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 2
48869: NEG
48870: PUSH
48871: LD_INT 2
48873: NEG
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48900: LD_ADDR_VAR 0 54
48904: PUSH
48905: LD_INT 0
48907: PUSH
48908: LD_INT 0
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 0
48917: PUSH
48918: LD_INT 1
48920: NEG
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 1
48928: PUSH
48929: LD_INT 0
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 1
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 0
48948: PUSH
48949: LD_INT 1
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 1
48958: NEG
48959: PUSH
48960: LD_INT 0
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 1
48969: NEG
48970: PUSH
48971: LD_INT 1
48973: NEG
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 1
48981: NEG
48982: PUSH
48983: LD_INT 2
48985: NEG
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 0
48993: PUSH
48994: LD_INT 2
48996: NEG
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 1
49004: PUSH
49005: LD_INT 1
49007: NEG
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 2
49015: PUSH
49016: LD_INT 0
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 2
49025: PUSH
49026: LD_INT 1
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 2
49035: PUSH
49036: LD_INT 2
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 1
49045: PUSH
49046: LD_INT 2
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 0
49055: PUSH
49056: LD_INT 2
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 1
49065: NEG
49066: PUSH
49067: LD_INT 1
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 2
49076: NEG
49077: PUSH
49078: LD_INT 0
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 2
49087: NEG
49088: PUSH
49089: LD_INT 1
49091: NEG
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 2
49099: NEG
49100: PUSH
49101: LD_INT 2
49103: NEG
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49130: LD_ADDR_VAR 0 55
49134: PUSH
49135: LD_INT 0
49137: PUSH
49138: LD_INT 0
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 0
49147: PUSH
49148: LD_INT 1
49150: NEG
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 1
49158: PUSH
49159: LD_INT 0
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 1
49168: PUSH
49169: LD_INT 1
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: LD_INT 1
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 1
49188: NEG
49189: PUSH
49190: LD_INT 0
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 1
49199: NEG
49200: PUSH
49201: LD_INT 1
49203: NEG
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 1
49211: NEG
49212: PUSH
49213: LD_INT 2
49215: NEG
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 0
49223: PUSH
49224: LD_INT 2
49226: NEG
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 1
49234: PUSH
49235: LD_INT 1
49237: NEG
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 2
49245: PUSH
49246: LD_INT 0
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 2
49255: PUSH
49256: LD_INT 1
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 2
49265: PUSH
49266: LD_INT 2
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 1
49275: PUSH
49276: LD_INT 2
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 0
49285: PUSH
49286: LD_INT 2
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 1
49295: NEG
49296: PUSH
49297: LD_INT 1
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 2
49306: NEG
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 2
49317: NEG
49318: PUSH
49319: LD_INT 1
49321: NEG
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 2
49329: NEG
49330: PUSH
49331: LD_INT 2
49333: NEG
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49360: LD_ADDR_VAR 0 56
49364: PUSH
49365: LD_INT 0
49367: PUSH
49368: LD_INT 0
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 0
49377: PUSH
49378: LD_INT 1
49380: NEG
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 1
49388: PUSH
49389: LD_INT 0
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 1
49398: PUSH
49399: LD_INT 1
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: LD_INT 1
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 1
49418: NEG
49419: PUSH
49420: LD_INT 0
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: NEG
49430: PUSH
49431: LD_INT 1
49433: NEG
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 1
49441: NEG
49442: PUSH
49443: LD_INT 2
49445: NEG
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 0
49453: PUSH
49454: LD_INT 2
49456: NEG
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 1
49464: PUSH
49465: LD_INT 1
49467: NEG
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 2
49475: PUSH
49476: LD_INT 0
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 2
49485: PUSH
49486: LD_INT 1
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 2
49495: PUSH
49496: LD_INT 2
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 1
49505: PUSH
49506: LD_INT 2
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 0
49515: PUSH
49516: LD_INT 2
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 1
49525: NEG
49526: PUSH
49527: LD_INT 1
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 2
49536: NEG
49537: PUSH
49538: LD_INT 0
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 2
49547: NEG
49548: PUSH
49549: LD_INT 1
49551: NEG
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 2
49559: NEG
49560: PUSH
49561: LD_INT 2
49563: NEG
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49590: LD_ADDR_VAR 0 57
49594: PUSH
49595: LD_INT 0
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 0
49607: PUSH
49608: LD_INT 1
49610: NEG
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 1
49618: PUSH
49619: LD_INT 0
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 1
49628: PUSH
49629: LD_INT 1
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 0
49638: PUSH
49639: LD_INT 1
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 1
49648: NEG
49649: PUSH
49650: LD_INT 0
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 1
49659: NEG
49660: PUSH
49661: LD_INT 1
49663: NEG
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 1
49671: NEG
49672: PUSH
49673: LD_INT 2
49675: NEG
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 0
49683: PUSH
49684: LD_INT 2
49686: NEG
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 1
49694: PUSH
49695: LD_INT 1
49697: NEG
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 2
49705: PUSH
49706: LD_INT 0
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 2
49715: PUSH
49716: LD_INT 1
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 2
49725: PUSH
49726: LD_INT 2
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 1
49735: PUSH
49736: LD_INT 2
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 0
49745: PUSH
49746: LD_INT 2
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 1
49755: NEG
49756: PUSH
49757: LD_INT 1
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 2
49766: NEG
49767: PUSH
49768: LD_INT 0
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 2
49777: NEG
49778: PUSH
49779: LD_INT 1
49781: NEG
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 2
49789: NEG
49790: PUSH
49791: LD_INT 2
49793: NEG
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49820: LD_ADDR_VAR 0 58
49824: PUSH
49825: LD_INT 0
49827: PUSH
49828: LD_INT 0
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 0
49837: PUSH
49838: LD_INT 1
49840: NEG
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 1
49848: PUSH
49849: LD_INT 0
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 1
49858: PUSH
49859: LD_INT 1
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 0
49868: PUSH
49869: LD_INT 1
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 1
49878: NEG
49879: PUSH
49880: LD_INT 0
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 1
49889: NEG
49890: PUSH
49891: LD_INT 1
49893: NEG
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 1
49901: NEG
49902: PUSH
49903: LD_INT 2
49905: NEG
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 0
49913: PUSH
49914: LD_INT 2
49916: NEG
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 1
49924: PUSH
49925: LD_INT 1
49927: NEG
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 2
49935: PUSH
49936: LD_INT 0
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 2
49945: PUSH
49946: LD_INT 1
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 2
49955: PUSH
49956: LD_INT 2
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 1
49965: PUSH
49966: LD_INT 2
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 0
49975: PUSH
49976: LD_INT 2
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 1
49985: NEG
49986: PUSH
49987: LD_INT 1
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 2
49996: NEG
49997: PUSH
49998: LD_INT 0
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 2
50007: NEG
50008: PUSH
50009: LD_INT 1
50011: NEG
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 2
50019: NEG
50020: PUSH
50021: LD_INT 2
50023: NEG
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50050: LD_ADDR_VAR 0 59
50054: PUSH
50055: LD_INT 0
50057: PUSH
50058: LD_INT 0
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 0
50067: PUSH
50068: LD_INT 1
50070: NEG
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 1
50078: PUSH
50079: LD_INT 0
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 1
50088: PUSH
50089: LD_INT 1
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 0
50098: PUSH
50099: LD_INT 1
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 1
50108: NEG
50109: PUSH
50110: LD_INT 0
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 1
50119: NEG
50120: PUSH
50121: LD_INT 1
50123: NEG
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50138: LD_ADDR_VAR 0 60
50142: PUSH
50143: LD_INT 0
50145: PUSH
50146: LD_INT 0
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 0
50155: PUSH
50156: LD_INT 1
50158: NEG
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 1
50166: PUSH
50167: LD_INT 0
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 1
50176: PUSH
50177: LD_INT 1
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 0
50186: PUSH
50187: LD_INT 1
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 1
50196: NEG
50197: PUSH
50198: LD_INT 0
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 1
50207: NEG
50208: PUSH
50209: LD_INT 1
50211: NEG
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50226: LD_ADDR_VAR 0 61
50230: PUSH
50231: LD_INT 0
50233: PUSH
50234: LD_INT 0
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 0
50243: PUSH
50244: LD_INT 1
50246: NEG
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 1
50254: PUSH
50255: LD_INT 0
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 1
50264: PUSH
50265: LD_INT 1
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 0
50274: PUSH
50275: LD_INT 1
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 1
50284: NEG
50285: PUSH
50286: LD_INT 0
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 1
50295: NEG
50296: PUSH
50297: LD_INT 1
50299: NEG
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50314: LD_ADDR_VAR 0 62
50318: PUSH
50319: LD_INT 0
50321: PUSH
50322: LD_INT 0
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 0
50331: PUSH
50332: LD_INT 1
50334: NEG
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 1
50342: PUSH
50343: LD_INT 0
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 1
50352: PUSH
50353: LD_INT 1
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 0
50362: PUSH
50363: LD_INT 1
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 1
50372: NEG
50373: PUSH
50374: LD_INT 0
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 1
50383: NEG
50384: PUSH
50385: LD_INT 1
50387: NEG
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50402: LD_ADDR_VAR 0 63
50406: PUSH
50407: LD_INT 0
50409: PUSH
50410: LD_INT 0
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 0
50419: PUSH
50420: LD_INT 1
50422: NEG
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 1
50430: PUSH
50431: LD_INT 0
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 1
50440: PUSH
50441: LD_INT 1
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 0
50450: PUSH
50451: LD_INT 1
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 1
50460: NEG
50461: PUSH
50462: LD_INT 0
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 1
50471: NEG
50472: PUSH
50473: LD_INT 1
50475: NEG
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50490: LD_ADDR_VAR 0 64
50494: PUSH
50495: LD_INT 0
50497: PUSH
50498: LD_INT 0
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 0
50507: PUSH
50508: LD_INT 1
50510: NEG
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 1
50518: PUSH
50519: LD_INT 0
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 1
50528: PUSH
50529: LD_INT 1
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 0
50538: PUSH
50539: LD_INT 1
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 1
50548: NEG
50549: PUSH
50550: LD_INT 0
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 1
50559: NEG
50560: PUSH
50561: LD_INT 1
50563: NEG
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: ST_TO_ADDR
// end ; 1 :
50578: GO 56475
50580: LD_INT 1
50582: DOUBLE
50583: EQUAL
50584: IFTRUE 50588
50586: GO 53211
50588: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50589: LD_ADDR_VAR 0 11
50593: PUSH
50594: LD_INT 1
50596: NEG
50597: PUSH
50598: LD_INT 3
50600: NEG
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 0
50608: PUSH
50609: LD_INT 3
50611: NEG
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 1
50619: PUSH
50620: LD_INT 2
50622: NEG
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: LIST
50632: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50633: LD_ADDR_VAR 0 12
50637: PUSH
50638: LD_INT 2
50640: PUSH
50641: LD_INT 1
50643: NEG
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 3
50651: PUSH
50652: LD_INT 0
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 3
50661: PUSH
50662: LD_INT 1
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: LIST
50673: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50674: LD_ADDR_VAR 0 13
50678: PUSH
50679: LD_INT 3
50681: PUSH
50682: LD_INT 2
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 3
50691: PUSH
50692: LD_INT 3
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 2
50701: PUSH
50702: LD_INT 3
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: LIST
50713: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50714: LD_ADDR_VAR 0 14
50718: PUSH
50719: LD_INT 1
50721: PUSH
50722: LD_INT 3
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 0
50731: PUSH
50732: LD_INT 3
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 1
50741: NEG
50742: PUSH
50743: LD_INT 2
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: LIST
50754: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50755: LD_ADDR_VAR 0 15
50759: PUSH
50760: LD_INT 2
50762: NEG
50763: PUSH
50764: LD_INT 1
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 3
50773: NEG
50774: PUSH
50775: LD_INT 0
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 3
50784: NEG
50785: PUSH
50786: LD_INT 1
50788: NEG
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: LIST
50798: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50799: LD_ADDR_VAR 0 16
50803: PUSH
50804: LD_INT 2
50806: NEG
50807: PUSH
50808: LD_INT 3
50810: NEG
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 3
50818: NEG
50819: PUSH
50820: LD_INT 2
50822: NEG
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 3
50830: NEG
50831: PUSH
50832: LD_INT 3
50834: NEG
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: LIST
50844: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50845: LD_ADDR_VAR 0 17
50849: PUSH
50850: LD_INT 1
50852: NEG
50853: PUSH
50854: LD_INT 3
50856: NEG
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 0
50864: PUSH
50865: LD_INT 3
50867: NEG
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 1
50875: PUSH
50876: LD_INT 2
50878: NEG
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: LIST
50888: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50889: LD_ADDR_VAR 0 18
50893: PUSH
50894: LD_INT 2
50896: PUSH
50897: LD_INT 1
50899: NEG
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 3
50907: PUSH
50908: LD_INT 0
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 3
50917: PUSH
50918: LD_INT 1
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: LIST
50929: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50930: LD_ADDR_VAR 0 19
50934: PUSH
50935: LD_INT 3
50937: PUSH
50938: LD_INT 2
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 3
50947: PUSH
50948: LD_INT 3
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 2
50957: PUSH
50958: LD_INT 3
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: LIST
50969: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50970: LD_ADDR_VAR 0 20
50974: PUSH
50975: LD_INT 1
50977: PUSH
50978: LD_INT 3
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 0
50987: PUSH
50988: LD_INT 3
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 1
50997: NEG
50998: PUSH
50999: LD_INT 2
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: LIST
51010: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51011: LD_ADDR_VAR 0 21
51015: PUSH
51016: LD_INT 2
51018: NEG
51019: PUSH
51020: LD_INT 1
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 3
51029: NEG
51030: PUSH
51031: LD_INT 0
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 3
51040: NEG
51041: PUSH
51042: LD_INT 1
51044: NEG
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: LIST
51054: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51055: LD_ADDR_VAR 0 22
51059: PUSH
51060: LD_INT 2
51062: NEG
51063: PUSH
51064: LD_INT 3
51066: NEG
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 3
51074: NEG
51075: PUSH
51076: LD_INT 2
51078: NEG
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 3
51086: NEG
51087: PUSH
51088: LD_INT 3
51090: NEG
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: LIST
51100: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51101: LD_ADDR_VAR 0 23
51105: PUSH
51106: LD_INT 0
51108: PUSH
51109: LD_INT 3
51111: NEG
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 1
51119: NEG
51120: PUSH
51121: LD_INT 4
51123: NEG
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: LD_INT 3
51134: NEG
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: LIST
51144: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51145: LD_ADDR_VAR 0 24
51149: PUSH
51150: LD_INT 3
51152: PUSH
51153: LD_INT 0
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 3
51162: PUSH
51163: LD_INT 1
51165: NEG
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 4
51173: PUSH
51174: LD_INT 1
51176: PUSH
51177: EMPTY
51178: LIST
51179: LIST
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: LIST
51185: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51186: LD_ADDR_VAR 0 25
51190: PUSH
51191: LD_INT 3
51193: PUSH
51194: LD_INT 3
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 4
51203: PUSH
51204: LD_INT 3
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 3
51213: PUSH
51214: LD_INT 4
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: LIST
51225: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51226: LD_ADDR_VAR 0 26
51230: PUSH
51231: LD_INT 0
51233: PUSH
51234: LD_INT 3
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 1
51243: PUSH
51244: LD_INT 4
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 1
51253: NEG
51254: PUSH
51255: LD_INT 3
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: LIST
51266: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51267: LD_ADDR_VAR 0 27
51271: PUSH
51272: LD_INT 3
51274: NEG
51275: PUSH
51276: LD_INT 0
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 3
51285: NEG
51286: PUSH
51287: LD_INT 1
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 4
51296: NEG
51297: PUSH
51298: LD_INT 1
51300: NEG
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: LIST
51310: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51311: LD_ADDR_VAR 0 28
51315: PUSH
51316: LD_INT 3
51318: NEG
51319: PUSH
51320: LD_INT 3
51322: NEG
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 3
51330: NEG
51331: PUSH
51332: LD_INT 4
51334: NEG
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 4
51342: NEG
51343: PUSH
51344: LD_INT 3
51346: NEG
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: LIST
51356: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51357: LD_ADDR_VAR 0 29
51361: PUSH
51362: LD_INT 1
51364: NEG
51365: PUSH
51366: LD_INT 3
51368: NEG
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 0
51376: PUSH
51377: LD_INT 3
51379: NEG
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 1
51387: PUSH
51388: LD_INT 2
51390: NEG
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 1
51398: NEG
51399: PUSH
51400: LD_INT 4
51402: NEG
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 0
51410: PUSH
51411: LD_INT 4
51413: NEG
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 1
51421: PUSH
51422: LD_INT 3
51424: NEG
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 1
51432: NEG
51433: PUSH
51434: LD_INT 5
51436: NEG
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 0
51444: PUSH
51445: LD_INT 5
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 1
51455: PUSH
51456: LD_INT 4
51458: NEG
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 1
51466: NEG
51467: PUSH
51468: LD_INT 6
51470: NEG
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 0
51478: PUSH
51479: LD_INT 6
51481: NEG
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 1
51489: PUSH
51490: LD_INT 5
51492: NEG
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51512: LD_ADDR_VAR 0 30
51516: PUSH
51517: LD_INT 2
51519: PUSH
51520: LD_INT 1
51522: NEG
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 3
51530: PUSH
51531: LD_INT 0
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 3
51540: PUSH
51541: LD_INT 1
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 3
51550: PUSH
51551: LD_INT 1
51553: NEG
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 4
51561: PUSH
51562: LD_INT 0
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 4
51571: PUSH
51572: LD_INT 1
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 4
51581: PUSH
51582: LD_INT 1
51584: NEG
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 5
51592: PUSH
51593: LD_INT 0
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 5
51602: PUSH
51603: LD_INT 1
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 5
51612: PUSH
51613: LD_INT 1
51615: NEG
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 6
51623: PUSH
51624: LD_INT 0
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 6
51633: PUSH
51634: LD_INT 1
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51655: LD_ADDR_VAR 0 31
51659: PUSH
51660: LD_INT 3
51662: PUSH
51663: LD_INT 2
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 3
51672: PUSH
51673: LD_INT 3
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 2
51682: PUSH
51683: LD_INT 3
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 4
51692: PUSH
51693: LD_INT 3
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 4
51702: PUSH
51703: LD_INT 4
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 3
51712: PUSH
51713: LD_INT 4
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 5
51722: PUSH
51723: LD_INT 4
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 5
51732: PUSH
51733: LD_INT 5
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 4
51742: PUSH
51743: LD_INT 5
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 6
51752: PUSH
51753: LD_INT 5
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 6
51762: PUSH
51763: LD_INT 6
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 5
51772: PUSH
51773: LD_INT 6
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51794: LD_ADDR_VAR 0 32
51798: PUSH
51799: LD_INT 1
51801: PUSH
51802: LD_INT 3
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 0
51811: PUSH
51812: LD_INT 3
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 1
51821: NEG
51822: PUSH
51823: LD_INT 2
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 1
51832: PUSH
51833: LD_INT 4
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 0
51842: PUSH
51843: LD_INT 4
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 1
51852: NEG
51853: PUSH
51854: LD_INT 3
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 1
51863: PUSH
51864: LD_INT 5
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 0
51873: PUSH
51874: LD_INT 5
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 1
51883: NEG
51884: PUSH
51885: LD_INT 4
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 1
51894: PUSH
51895: LD_INT 6
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 0
51904: PUSH
51905: LD_INT 6
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 1
51914: NEG
51915: PUSH
51916: LD_INT 5
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51937: LD_ADDR_VAR 0 33
51941: PUSH
51942: LD_INT 2
51944: NEG
51945: PUSH
51946: LD_INT 1
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 3
51955: NEG
51956: PUSH
51957: LD_INT 0
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 3
51966: NEG
51967: PUSH
51968: LD_INT 1
51970: NEG
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 3
51978: NEG
51979: PUSH
51980: LD_INT 1
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 4
51989: NEG
51990: PUSH
51991: LD_INT 0
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 4
52000: NEG
52001: PUSH
52002: LD_INT 1
52004: NEG
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 4
52012: NEG
52013: PUSH
52014: LD_INT 1
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 5
52023: NEG
52024: PUSH
52025: LD_INT 0
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 5
52034: NEG
52035: PUSH
52036: LD_INT 1
52038: NEG
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 5
52046: NEG
52047: PUSH
52048: LD_INT 1
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 6
52057: NEG
52058: PUSH
52059: LD_INT 0
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 6
52068: NEG
52069: PUSH
52070: LD_INT 1
52072: NEG
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52092: LD_ADDR_VAR 0 34
52096: PUSH
52097: LD_INT 2
52099: NEG
52100: PUSH
52101: LD_INT 3
52103: NEG
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 3
52111: NEG
52112: PUSH
52113: LD_INT 2
52115: NEG
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 3
52123: NEG
52124: PUSH
52125: LD_INT 3
52127: NEG
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 3
52135: NEG
52136: PUSH
52137: LD_INT 4
52139: NEG
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 4
52147: NEG
52148: PUSH
52149: LD_INT 3
52151: NEG
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 4
52159: NEG
52160: PUSH
52161: LD_INT 4
52163: NEG
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 4
52171: NEG
52172: PUSH
52173: LD_INT 5
52175: NEG
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 5
52183: NEG
52184: PUSH
52185: LD_INT 4
52187: NEG
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 5
52195: NEG
52196: PUSH
52197: LD_INT 5
52199: NEG
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 5
52207: NEG
52208: PUSH
52209: LD_INT 6
52211: NEG
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 6
52219: NEG
52220: PUSH
52221: LD_INT 5
52223: NEG
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 6
52231: NEG
52232: PUSH
52233: LD_INT 6
52235: NEG
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52255: LD_ADDR_VAR 0 41
52259: PUSH
52260: LD_INT 0
52262: PUSH
52263: LD_INT 2
52265: NEG
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 1
52273: NEG
52274: PUSH
52275: LD_INT 3
52277: NEG
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 1
52285: PUSH
52286: LD_INT 2
52288: NEG
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: LIST
52298: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52299: LD_ADDR_VAR 0 42
52303: PUSH
52304: LD_INT 2
52306: PUSH
52307: LD_INT 0
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 2
52316: PUSH
52317: LD_INT 1
52319: NEG
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 3
52327: PUSH
52328: LD_INT 1
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: LIST
52339: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52340: LD_ADDR_VAR 0 43
52344: PUSH
52345: LD_INT 2
52347: PUSH
52348: LD_INT 2
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 3
52357: PUSH
52358: LD_INT 2
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 2
52367: PUSH
52368: LD_INT 3
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: LIST
52379: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52380: LD_ADDR_VAR 0 44
52384: PUSH
52385: LD_INT 0
52387: PUSH
52388: LD_INT 2
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 1
52397: PUSH
52398: LD_INT 3
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 1
52407: NEG
52408: PUSH
52409: LD_INT 2
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: LIST
52420: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52421: LD_ADDR_VAR 0 45
52425: PUSH
52426: LD_INT 2
52428: NEG
52429: PUSH
52430: LD_INT 0
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 2
52439: NEG
52440: PUSH
52441: LD_INT 1
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 3
52450: NEG
52451: PUSH
52452: LD_INT 1
52454: NEG
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: LIST
52464: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52465: LD_ADDR_VAR 0 46
52469: PUSH
52470: LD_INT 2
52472: NEG
52473: PUSH
52474: LD_INT 2
52476: NEG
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 2
52484: NEG
52485: PUSH
52486: LD_INT 3
52488: NEG
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 3
52496: NEG
52497: PUSH
52498: LD_INT 2
52500: NEG
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: LIST
52510: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52511: LD_ADDR_VAR 0 47
52515: PUSH
52516: LD_INT 2
52518: NEG
52519: PUSH
52520: LD_INT 3
52522: NEG
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 1
52530: NEG
52531: PUSH
52532: LD_INT 3
52534: NEG
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52544: LD_ADDR_VAR 0 48
52548: PUSH
52549: LD_INT 1
52551: PUSH
52552: LD_INT 2
52554: NEG
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 2
52562: PUSH
52563: LD_INT 1
52565: NEG
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52575: LD_ADDR_VAR 0 49
52579: PUSH
52580: LD_INT 3
52582: PUSH
52583: LD_INT 1
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 3
52592: PUSH
52593: LD_INT 2
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52604: LD_ADDR_VAR 0 50
52608: PUSH
52609: LD_INT 2
52611: PUSH
52612: LD_INT 3
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 1
52621: PUSH
52622: LD_INT 3
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52633: LD_ADDR_VAR 0 51
52637: PUSH
52638: LD_INT 1
52640: NEG
52641: PUSH
52642: LD_INT 2
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 2
52651: NEG
52652: PUSH
52653: LD_INT 1
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52664: LD_ADDR_VAR 0 52
52668: PUSH
52669: LD_INT 3
52671: NEG
52672: PUSH
52673: LD_INT 1
52675: NEG
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 3
52683: NEG
52684: PUSH
52685: LD_INT 2
52687: NEG
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52697: LD_ADDR_VAR 0 53
52701: PUSH
52702: LD_INT 1
52704: NEG
52705: PUSH
52706: LD_INT 3
52708: NEG
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 0
52716: PUSH
52717: LD_INT 3
52719: NEG
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 1
52727: PUSH
52728: LD_INT 2
52730: NEG
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: LIST
52740: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52741: LD_ADDR_VAR 0 54
52745: PUSH
52746: LD_INT 2
52748: PUSH
52749: LD_INT 1
52751: NEG
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 3
52759: PUSH
52760: LD_INT 0
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 3
52769: PUSH
52770: LD_INT 1
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: LIST
52781: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52782: LD_ADDR_VAR 0 55
52786: PUSH
52787: LD_INT 3
52789: PUSH
52790: LD_INT 2
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 3
52799: PUSH
52800: LD_INT 3
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 2
52809: PUSH
52810: LD_INT 3
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: LIST
52821: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52822: LD_ADDR_VAR 0 56
52826: PUSH
52827: LD_INT 1
52829: PUSH
52830: LD_INT 3
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 0
52839: PUSH
52840: LD_INT 3
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 1
52849: NEG
52850: PUSH
52851: LD_INT 2
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: LIST
52862: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52863: LD_ADDR_VAR 0 57
52867: PUSH
52868: LD_INT 2
52870: NEG
52871: PUSH
52872: LD_INT 1
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 3
52881: NEG
52882: PUSH
52883: LD_INT 0
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 3
52892: NEG
52893: PUSH
52894: LD_INT 1
52896: NEG
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: LIST
52906: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52907: LD_ADDR_VAR 0 58
52911: PUSH
52912: LD_INT 2
52914: NEG
52915: PUSH
52916: LD_INT 3
52918: NEG
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 3
52926: NEG
52927: PUSH
52928: LD_INT 2
52930: NEG
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 3
52938: NEG
52939: PUSH
52940: LD_INT 3
52942: NEG
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: LIST
52952: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52953: LD_ADDR_VAR 0 59
52957: PUSH
52958: LD_INT 1
52960: NEG
52961: PUSH
52962: LD_INT 2
52964: NEG
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 0
52972: PUSH
52973: LD_INT 2
52975: NEG
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 1
52983: PUSH
52984: LD_INT 1
52986: NEG
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: LIST
52996: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52997: LD_ADDR_VAR 0 60
53001: PUSH
53002: LD_INT 1
53004: PUSH
53005: LD_INT 1
53007: NEG
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 2
53015: PUSH
53016: LD_INT 0
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 2
53025: PUSH
53026: LD_INT 1
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: LIST
53037: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53038: LD_ADDR_VAR 0 61
53042: PUSH
53043: LD_INT 2
53045: PUSH
53046: LD_INT 1
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 2
53055: PUSH
53056: LD_INT 2
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 1
53065: PUSH
53066: LD_INT 2
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: LIST
53077: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53078: LD_ADDR_VAR 0 62
53082: PUSH
53083: LD_INT 1
53085: PUSH
53086: LD_INT 2
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 0
53095: PUSH
53096: LD_INT 2
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 1
53105: NEG
53106: PUSH
53107: LD_INT 1
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: LIST
53118: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53119: LD_ADDR_VAR 0 63
53123: PUSH
53124: LD_INT 1
53126: NEG
53127: PUSH
53128: LD_INT 1
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 2
53137: NEG
53138: PUSH
53139: LD_INT 0
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 2
53148: NEG
53149: PUSH
53150: LD_INT 1
53152: NEG
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: LIST
53162: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53163: LD_ADDR_VAR 0 64
53167: PUSH
53168: LD_INT 1
53170: NEG
53171: PUSH
53172: LD_INT 2
53174: NEG
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 2
53182: NEG
53183: PUSH
53184: LD_INT 1
53186: NEG
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 2
53194: NEG
53195: PUSH
53196: LD_INT 2
53198: NEG
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: LIST
53208: ST_TO_ADDR
// end ; 2 :
53209: GO 56475
53211: LD_INT 2
53213: DOUBLE
53214: EQUAL
53215: IFTRUE 53219
53217: GO 56474
53219: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53220: LD_ADDR_VAR 0 29
53224: PUSH
53225: LD_INT 4
53227: PUSH
53228: LD_INT 0
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 4
53237: PUSH
53238: LD_INT 1
53240: NEG
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 5
53248: PUSH
53249: LD_INT 0
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 5
53258: PUSH
53259: LD_INT 1
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 4
53268: PUSH
53269: LD_INT 1
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 3
53278: PUSH
53279: LD_INT 0
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 3
53288: PUSH
53289: LD_INT 1
53291: NEG
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 3
53299: PUSH
53300: LD_INT 2
53302: NEG
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 5
53310: PUSH
53311: LD_INT 2
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 3
53320: PUSH
53321: LD_INT 3
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 3
53330: PUSH
53331: LD_INT 2
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 4
53340: PUSH
53341: LD_INT 3
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 4
53350: PUSH
53351: LD_INT 4
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 3
53360: PUSH
53361: LD_INT 4
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 2
53370: PUSH
53371: LD_INT 3
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 2
53380: PUSH
53381: LD_INT 2
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 4
53390: PUSH
53391: LD_INT 2
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 2
53400: PUSH
53401: LD_INT 4
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 0
53410: PUSH
53411: LD_INT 4
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 0
53420: PUSH
53421: LD_INT 3
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 1
53430: PUSH
53431: LD_INT 4
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 1
53440: PUSH
53441: LD_INT 5
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 0
53450: PUSH
53451: LD_INT 5
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 1
53460: NEG
53461: PUSH
53462: LD_INT 4
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 1
53471: NEG
53472: PUSH
53473: LD_INT 3
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 2
53482: PUSH
53483: LD_INT 5
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 2
53492: NEG
53493: PUSH
53494: LD_INT 3
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 3
53503: NEG
53504: PUSH
53505: LD_INT 0
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 3
53514: NEG
53515: PUSH
53516: LD_INT 1
53518: NEG
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 2
53526: NEG
53527: PUSH
53528: LD_INT 0
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 2
53537: NEG
53538: PUSH
53539: LD_INT 1
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 3
53548: NEG
53549: PUSH
53550: LD_INT 1
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 4
53559: NEG
53560: PUSH
53561: LD_INT 0
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 4
53570: NEG
53571: PUSH
53572: LD_INT 1
53574: NEG
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 4
53582: NEG
53583: PUSH
53584: LD_INT 2
53586: NEG
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 2
53594: NEG
53595: PUSH
53596: LD_INT 2
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 4
53605: NEG
53606: PUSH
53607: LD_INT 4
53609: NEG
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 4
53617: NEG
53618: PUSH
53619: LD_INT 5
53621: NEG
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 3
53629: NEG
53630: PUSH
53631: LD_INT 4
53633: NEG
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 3
53641: NEG
53642: PUSH
53643: LD_INT 3
53645: NEG
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 4
53653: NEG
53654: PUSH
53655: LD_INT 3
53657: NEG
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 5
53665: NEG
53666: PUSH
53667: LD_INT 4
53669: NEG
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 5
53677: NEG
53678: PUSH
53679: LD_INT 5
53681: NEG
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 3
53689: NEG
53690: PUSH
53691: LD_INT 5
53693: NEG
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 5
53701: NEG
53702: PUSH
53703: LD_INT 3
53705: NEG
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53758: LD_ADDR_VAR 0 30
53762: PUSH
53763: LD_INT 4
53765: PUSH
53766: LD_INT 4
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 4
53775: PUSH
53776: LD_INT 3
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 5
53785: PUSH
53786: LD_INT 4
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 5
53795: PUSH
53796: LD_INT 5
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 4
53805: PUSH
53806: LD_INT 5
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: LD_INT 3
53815: PUSH
53816: LD_INT 4
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 3
53825: PUSH
53826: LD_INT 3
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 5
53835: PUSH
53836: LD_INT 3
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 3
53845: PUSH
53846: LD_INT 5
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 0
53855: PUSH
53856: LD_INT 3
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 0
53865: PUSH
53866: LD_INT 2
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 1
53875: PUSH
53876: LD_INT 3
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 1
53885: PUSH
53886: LD_INT 4
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: LD_INT 4
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 1
53905: NEG
53906: PUSH
53907: LD_INT 3
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 1
53916: NEG
53917: PUSH
53918: LD_INT 2
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 2
53927: PUSH
53928: LD_INT 4
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 2
53937: NEG
53938: PUSH
53939: LD_INT 2
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 4
53948: NEG
53949: PUSH
53950: LD_INT 0
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 4
53959: NEG
53960: PUSH
53961: LD_INT 1
53963: NEG
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 3
53971: NEG
53972: PUSH
53973: LD_INT 0
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 3
53982: NEG
53983: PUSH
53984: LD_INT 1
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 4
53993: NEG
53994: PUSH
53995: LD_INT 1
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 5
54004: NEG
54005: PUSH
54006: LD_INT 0
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 5
54015: NEG
54016: PUSH
54017: LD_INT 1
54019: NEG
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 5
54027: NEG
54028: PUSH
54029: LD_INT 2
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 3
54039: NEG
54040: PUSH
54041: LD_INT 2
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 3
54050: NEG
54051: PUSH
54052: LD_INT 3
54054: NEG
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 3
54062: NEG
54063: PUSH
54064: LD_INT 4
54066: NEG
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 2
54074: NEG
54075: PUSH
54076: LD_INT 3
54078: NEG
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 2
54086: NEG
54087: PUSH
54088: LD_INT 2
54090: NEG
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 3
54098: NEG
54099: PUSH
54100: LD_INT 2
54102: NEG
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 4
54110: NEG
54111: PUSH
54112: LD_INT 3
54114: NEG
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 4
54122: NEG
54123: PUSH
54124: LD_INT 4
54126: NEG
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 2
54134: NEG
54135: PUSH
54136: LD_INT 4
54138: NEG
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 4
54146: NEG
54147: PUSH
54148: LD_INT 2
54150: NEG
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 0
54158: PUSH
54159: LD_INT 4
54161: NEG
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 0
54169: PUSH
54170: LD_INT 5
54172: NEG
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 1
54180: PUSH
54181: LD_INT 4
54183: NEG
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 1
54191: PUSH
54192: LD_INT 3
54194: NEG
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 0
54202: PUSH
54203: LD_INT 3
54205: NEG
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 1
54213: NEG
54214: PUSH
54215: LD_INT 4
54217: NEG
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 1
54225: NEG
54226: PUSH
54227: LD_INT 5
54229: NEG
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 2
54237: PUSH
54238: LD_INT 3
54240: NEG
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 2
54248: NEG
54249: PUSH
54250: LD_INT 5
54252: NEG
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54305: LD_ADDR_VAR 0 31
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: LD_INT 4
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 0
54322: PUSH
54323: LD_INT 3
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 1
54332: PUSH
54333: LD_INT 4
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 1
54342: PUSH
54343: LD_INT 5
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 0
54352: PUSH
54353: LD_INT 5
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 1
54362: NEG
54363: PUSH
54364: LD_INT 4
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 1
54373: NEG
54374: PUSH
54375: LD_INT 3
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 2
54384: PUSH
54385: LD_INT 5
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 2
54394: NEG
54395: PUSH
54396: LD_INT 3
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 3
54405: NEG
54406: PUSH
54407: LD_INT 0
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 3
54416: NEG
54417: PUSH
54418: LD_INT 1
54420: NEG
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 2
54428: NEG
54429: PUSH
54430: LD_INT 0
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 2
54439: NEG
54440: PUSH
54441: LD_INT 1
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 3
54450: NEG
54451: PUSH
54452: LD_INT 1
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 4
54461: NEG
54462: PUSH
54463: LD_INT 0
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 4
54472: NEG
54473: PUSH
54474: LD_INT 1
54476: NEG
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 4
54484: NEG
54485: PUSH
54486: LD_INT 2
54488: NEG
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 2
54496: NEG
54497: PUSH
54498: LD_INT 2
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 4
54507: NEG
54508: PUSH
54509: LD_INT 4
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 4
54519: NEG
54520: PUSH
54521: LD_INT 5
54523: NEG
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 3
54531: NEG
54532: PUSH
54533: LD_INT 4
54535: NEG
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 3
54543: NEG
54544: PUSH
54545: LD_INT 3
54547: NEG
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 4
54555: NEG
54556: PUSH
54557: LD_INT 3
54559: NEG
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 5
54567: NEG
54568: PUSH
54569: LD_INT 4
54571: NEG
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 5
54579: NEG
54580: PUSH
54581: LD_INT 5
54583: NEG
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 3
54591: NEG
54592: PUSH
54593: LD_INT 5
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 5
54603: NEG
54604: PUSH
54605: LD_INT 3
54607: NEG
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 0
54615: PUSH
54616: LD_INT 3
54618: NEG
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 0
54626: PUSH
54627: LD_INT 4
54629: NEG
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 1
54637: PUSH
54638: LD_INT 3
54640: NEG
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 1
54648: PUSH
54649: LD_INT 2
54651: NEG
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 0
54659: PUSH
54660: LD_INT 2
54662: NEG
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 1
54670: NEG
54671: PUSH
54672: LD_INT 3
54674: NEG
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 1
54682: NEG
54683: PUSH
54684: LD_INT 4
54686: NEG
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 2
54694: PUSH
54695: LD_INT 2
54697: NEG
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 2
54705: NEG
54706: PUSH
54707: LD_INT 4
54709: NEG
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 4
54717: PUSH
54718: LD_INT 0
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 4
54727: PUSH
54728: LD_INT 1
54730: NEG
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 5
54738: PUSH
54739: LD_INT 0
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 5
54748: PUSH
54749: LD_INT 1
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 4
54758: PUSH
54759: LD_INT 1
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 3
54768: PUSH
54769: LD_INT 0
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 3
54778: PUSH
54779: LD_INT 1
54781: NEG
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 3
54789: PUSH
54790: LD_INT 2
54792: NEG
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 5
54800: PUSH
54801: LD_INT 2
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54855: LD_ADDR_VAR 0 32
54859: PUSH
54860: LD_INT 4
54862: NEG
54863: PUSH
54864: LD_INT 0
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 4
54873: NEG
54874: PUSH
54875: LD_INT 1
54877: NEG
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 3
54885: NEG
54886: PUSH
54887: LD_INT 0
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 3
54896: NEG
54897: PUSH
54898: LD_INT 1
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 4
54907: NEG
54908: PUSH
54909: LD_INT 1
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 5
54918: NEG
54919: PUSH
54920: LD_INT 0
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 5
54929: NEG
54930: PUSH
54931: LD_INT 1
54933: NEG
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 5
54941: NEG
54942: PUSH
54943: LD_INT 2
54945: NEG
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 3
54953: NEG
54954: PUSH
54955: LD_INT 2
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 3
54964: NEG
54965: PUSH
54966: LD_INT 3
54968: NEG
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 3
54976: NEG
54977: PUSH
54978: LD_INT 4
54980: NEG
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 2
54988: NEG
54989: PUSH
54990: LD_INT 3
54992: NEG
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 2
55000: NEG
55001: PUSH
55002: LD_INT 2
55004: NEG
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 3
55012: NEG
55013: PUSH
55014: LD_INT 2
55016: NEG
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 4
55024: NEG
55025: PUSH
55026: LD_INT 3
55028: NEG
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 4
55036: NEG
55037: PUSH
55038: LD_INT 4
55040: NEG
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 2
55048: NEG
55049: PUSH
55050: LD_INT 4
55052: NEG
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 4
55060: NEG
55061: PUSH
55062: LD_INT 2
55064: NEG
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 0
55072: PUSH
55073: LD_INT 4
55075: NEG
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 0
55083: PUSH
55084: LD_INT 5
55086: NEG
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 1
55094: PUSH
55095: LD_INT 4
55097: NEG
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 1
55105: PUSH
55106: LD_INT 3
55108: NEG
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 0
55116: PUSH
55117: LD_INT 3
55119: NEG
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 1
55127: NEG
55128: PUSH
55129: LD_INT 4
55131: NEG
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 1
55139: NEG
55140: PUSH
55141: LD_INT 5
55143: NEG
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 2
55151: PUSH
55152: LD_INT 3
55154: NEG
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 2
55162: NEG
55163: PUSH
55164: LD_INT 5
55166: NEG
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 3
55174: PUSH
55175: LD_INT 0
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 3
55184: PUSH
55185: LD_INT 1
55187: NEG
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 4
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 4
55205: PUSH
55206: LD_INT 1
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 3
55215: PUSH
55216: LD_INT 1
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 2
55225: PUSH
55226: LD_INT 0
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 2
55235: PUSH
55236: LD_INT 1
55238: NEG
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 2
55246: PUSH
55247: LD_INT 2
55249: NEG
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 4
55257: PUSH
55258: LD_INT 2
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 4
55267: PUSH
55268: LD_INT 4
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 4
55277: PUSH
55278: LD_INT 3
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 5
55287: PUSH
55288: LD_INT 4
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 5
55297: PUSH
55298: LD_INT 5
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 4
55307: PUSH
55308: LD_INT 5
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 3
55317: PUSH
55318: LD_INT 4
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 3
55327: PUSH
55328: LD_INT 3
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 5
55337: PUSH
55338: LD_INT 3
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 3
55347: PUSH
55348: LD_INT 5
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55402: LD_ADDR_VAR 0 33
55406: PUSH
55407: LD_INT 4
55409: NEG
55410: PUSH
55411: LD_INT 4
55413: NEG
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 4
55421: NEG
55422: PUSH
55423: LD_INT 5
55425: NEG
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 3
55433: NEG
55434: PUSH
55435: LD_INT 4
55437: NEG
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 3
55445: NEG
55446: PUSH
55447: LD_INT 3
55449: NEG
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 4
55457: NEG
55458: PUSH
55459: LD_INT 3
55461: NEG
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 5
55469: NEG
55470: PUSH
55471: LD_INT 4
55473: NEG
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 5
55481: NEG
55482: PUSH
55483: LD_INT 5
55485: NEG
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 3
55493: NEG
55494: PUSH
55495: LD_INT 5
55497: NEG
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 5
55505: NEG
55506: PUSH
55507: LD_INT 3
55509: NEG
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: LD_INT 3
55520: NEG
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 0
55528: PUSH
55529: LD_INT 4
55531: NEG
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 1
55539: PUSH
55540: LD_INT 3
55542: NEG
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 1
55550: PUSH
55551: LD_INT 2
55553: NEG
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 0
55561: PUSH
55562: LD_INT 2
55564: NEG
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 1
55572: NEG
55573: PUSH
55574: LD_INT 3
55576: NEG
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 1
55584: NEG
55585: PUSH
55586: LD_INT 4
55588: NEG
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 2
55596: PUSH
55597: LD_INT 2
55599: NEG
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 2
55607: NEG
55608: PUSH
55609: LD_INT 4
55611: NEG
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 4
55619: PUSH
55620: LD_INT 0
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 4
55629: PUSH
55630: LD_INT 1
55632: NEG
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 5
55640: PUSH
55641: LD_INT 0
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 5
55650: PUSH
55651: LD_INT 1
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 4
55660: PUSH
55661: LD_INT 1
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 3
55670: PUSH
55671: LD_INT 0
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 3
55680: PUSH
55681: LD_INT 1
55683: NEG
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 3
55691: PUSH
55692: LD_INT 2
55694: NEG
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 5
55702: PUSH
55703: LD_INT 2
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 3
55712: PUSH
55713: LD_INT 3
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 3
55722: PUSH
55723: LD_INT 2
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 4
55732: PUSH
55733: LD_INT 3
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 4
55742: PUSH
55743: LD_INT 4
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 3
55752: PUSH
55753: LD_INT 4
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 2
55762: PUSH
55763: LD_INT 3
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 2
55772: PUSH
55773: LD_INT 2
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 4
55782: PUSH
55783: LD_INT 2
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 2
55792: PUSH
55793: LD_INT 4
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 0
55802: PUSH
55803: LD_INT 4
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 0
55812: PUSH
55813: LD_INT 3
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 1
55822: PUSH
55823: LD_INT 4
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 1
55832: PUSH
55833: LD_INT 5
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 0
55842: PUSH
55843: LD_INT 5
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 1
55852: NEG
55853: PUSH
55854: LD_INT 4
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 1
55863: NEG
55864: PUSH
55865: LD_INT 3
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 2
55874: PUSH
55875: LD_INT 5
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 2
55884: NEG
55885: PUSH
55886: LD_INT 3
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55940: LD_ADDR_VAR 0 34
55944: PUSH
55945: LD_INT 0
55947: PUSH
55948: LD_INT 4
55950: NEG
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 0
55958: PUSH
55959: LD_INT 5
55961: NEG
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 1
55969: PUSH
55970: LD_INT 4
55972: NEG
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 1
55980: PUSH
55981: LD_INT 3
55983: NEG
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 0
55991: PUSH
55992: LD_INT 3
55994: NEG
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 1
56002: NEG
56003: PUSH
56004: LD_INT 4
56006: NEG
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: LD_INT 5
56018: NEG
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 2
56026: PUSH
56027: LD_INT 3
56029: NEG
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 2
56037: NEG
56038: PUSH
56039: LD_INT 5
56041: NEG
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 3
56049: PUSH
56050: LD_INT 0
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 3
56059: PUSH
56060: LD_INT 1
56062: NEG
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 4
56070: PUSH
56071: LD_INT 0
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 4
56080: PUSH
56081: LD_INT 1
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 3
56090: PUSH
56091: LD_INT 1
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 2
56100: PUSH
56101: LD_INT 0
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 2
56110: PUSH
56111: LD_INT 1
56113: NEG
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 2
56121: PUSH
56122: LD_INT 2
56124: NEG
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 4
56132: PUSH
56133: LD_INT 2
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 4
56142: PUSH
56143: LD_INT 4
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 4
56152: PUSH
56153: LD_INT 3
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 5
56162: PUSH
56163: LD_INT 4
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 5
56172: PUSH
56173: LD_INT 5
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 4
56182: PUSH
56183: LD_INT 5
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 3
56192: PUSH
56193: LD_INT 4
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 3
56202: PUSH
56203: LD_INT 3
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 5
56212: PUSH
56213: LD_INT 3
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 3
56222: PUSH
56223: LD_INT 5
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 0
56232: PUSH
56233: LD_INT 3
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 0
56242: PUSH
56243: LD_INT 2
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 1
56252: PUSH
56253: LD_INT 3
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 1
56262: PUSH
56263: LD_INT 4
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 0
56272: PUSH
56273: LD_INT 4
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 1
56282: NEG
56283: PUSH
56284: LD_INT 3
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 1
56293: NEG
56294: PUSH
56295: LD_INT 2
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 2
56304: PUSH
56305: LD_INT 4
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 2
56314: NEG
56315: PUSH
56316: LD_INT 2
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 4
56325: NEG
56326: PUSH
56327: LD_INT 0
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 4
56336: NEG
56337: PUSH
56338: LD_INT 1
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 3
56348: NEG
56349: PUSH
56350: LD_INT 0
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 3
56359: NEG
56360: PUSH
56361: LD_INT 1
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 4
56370: NEG
56371: PUSH
56372: LD_INT 1
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 5
56381: NEG
56382: PUSH
56383: LD_INT 0
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 5
56392: NEG
56393: PUSH
56394: LD_INT 1
56396: NEG
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 5
56404: NEG
56405: PUSH
56406: LD_INT 2
56408: NEG
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 3
56416: NEG
56417: PUSH
56418: LD_INT 2
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: ST_TO_ADDR
// end ; end ;
56472: GO 56475
56474: POP
// case btype of b_depot , b_warehouse :
56475: LD_VAR 0 1
56479: PUSH
56480: LD_INT 0
56482: DOUBLE
56483: EQUAL
56484: IFTRUE 56494
56486: LD_INT 1
56488: DOUBLE
56489: EQUAL
56490: IFTRUE 56494
56492: GO 56695
56494: POP
// case nation of nation_american :
56495: LD_VAR 0 5
56499: PUSH
56500: LD_INT 1
56502: DOUBLE
56503: EQUAL
56504: IFTRUE 56508
56506: GO 56564
56508: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56509: LD_ADDR_VAR 0 9
56513: PUSH
56514: LD_VAR 0 11
56518: PUSH
56519: LD_VAR 0 12
56523: PUSH
56524: LD_VAR 0 13
56528: PUSH
56529: LD_VAR 0 14
56533: PUSH
56534: LD_VAR 0 15
56538: PUSH
56539: LD_VAR 0 16
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: PUSH
56552: LD_VAR 0 4
56556: PUSH
56557: LD_INT 1
56559: PLUS
56560: ARRAY
56561: ST_TO_ADDR
56562: GO 56693
56564: LD_INT 2
56566: DOUBLE
56567: EQUAL
56568: IFTRUE 56572
56570: GO 56628
56572: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56573: LD_ADDR_VAR 0 9
56577: PUSH
56578: LD_VAR 0 17
56582: PUSH
56583: LD_VAR 0 18
56587: PUSH
56588: LD_VAR 0 19
56592: PUSH
56593: LD_VAR 0 20
56597: PUSH
56598: LD_VAR 0 21
56602: PUSH
56603: LD_VAR 0 22
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: PUSH
56616: LD_VAR 0 4
56620: PUSH
56621: LD_INT 1
56623: PLUS
56624: ARRAY
56625: ST_TO_ADDR
56626: GO 56693
56628: LD_INT 3
56630: DOUBLE
56631: EQUAL
56632: IFTRUE 56636
56634: GO 56692
56636: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56637: LD_ADDR_VAR 0 9
56641: PUSH
56642: LD_VAR 0 23
56646: PUSH
56647: LD_VAR 0 24
56651: PUSH
56652: LD_VAR 0 25
56656: PUSH
56657: LD_VAR 0 26
56661: PUSH
56662: LD_VAR 0 27
56666: PUSH
56667: LD_VAR 0 28
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: PUSH
56680: LD_VAR 0 4
56684: PUSH
56685: LD_INT 1
56687: PLUS
56688: ARRAY
56689: ST_TO_ADDR
56690: GO 56693
56692: POP
56693: GO 57248
56695: LD_INT 2
56697: DOUBLE
56698: EQUAL
56699: IFTRUE 56709
56701: LD_INT 3
56703: DOUBLE
56704: EQUAL
56705: IFTRUE 56709
56707: GO 56765
56709: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56710: LD_ADDR_VAR 0 9
56714: PUSH
56715: LD_VAR 0 29
56719: PUSH
56720: LD_VAR 0 30
56724: PUSH
56725: LD_VAR 0 31
56729: PUSH
56730: LD_VAR 0 32
56734: PUSH
56735: LD_VAR 0 33
56739: PUSH
56740: LD_VAR 0 34
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: PUSH
56753: LD_VAR 0 4
56757: PUSH
56758: LD_INT 1
56760: PLUS
56761: ARRAY
56762: ST_TO_ADDR
56763: GO 57248
56765: LD_INT 16
56767: DOUBLE
56768: EQUAL
56769: IFTRUE 56827
56771: LD_INT 17
56773: DOUBLE
56774: EQUAL
56775: IFTRUE 56827
56777: LD_INT 18
56779: DOUBLE
56780: EQUAL
56781: IFTRUE 56827
56783: LD_INT 19
56785: DOUBLE
56786: EQUAL
56787: IFTRUE 56827
56789: LD_INT 22
56791: DOUBLE
56792: EQUAL
56793: IFTRUE 56827
56795: LD_INT 20
56797: DOUBLE
56798: EQUAL
56799: IFTRUE 56827
56801: LD_INT 21
56803: DOUBLE
56804: EQUAL
56805: IFTRUE 56827
56807: LD_INT 23
56809: DOUBLE
56810: EQUAL
56811: IFTRUE 56827
56813: LD_INT 24
56815: DOUBLE
56816: EQUAL
56817: IFTRUE 56827
56819: LD_INT 25
56821: DOUBLE
56822: EQUAL
56823: IFTRUE 56827
56825: GO 56883
56827: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56828: LD_ADDR_VAR 0 9
56832: PUSH
56833: LD_VAR 0 35
56837: PUSH
56838: LD_VAR 0 36
56842: PUSH
56843: LD_VAR 0 37
56847: PUSH
56848: LD_VAR 0 38
56852: PUSH
56853: LD_VAR 0 39
56857: PUSH
56858: LD_VAR 0 40
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: PUSH
56871: LD_VAR 0 4
56875: PUSH
56876: LD_INT 1
56878: PLUS
56879: ARRAY
56880: ST_TO_ADDR
56881: GO 57248
56883: LD_INT 6
56885: DOUBLE
56886: EQUAL
56887: IFTRUE 56939
56889: LD_INT 7
56891: DOUBLE
56892: EQUAL
56893: IFTRUE 56939
56895: LD_INT 8
56897: DOUBLE
56898: EQUAL
56899: IFTRUE 56939
56901: LD_INT 13
56903: DOUBLE
56904: EQUAL
56905: IFTRUE 56939
56907: LD_INT 12
56909: DOUBLE
56910: EQUAL
56911: IFTRUE 56939
56913: LD_INT 15
56915: DOUBLE
56916: EQUAL
56917: IFTRUE 56939
56919: LD_INT 11
56921: DOUBLE
56922: EQUAL
56923: IFTRUE 56939
56925: LD_INT 14
56927: DOUBLE
56928: EQUAL
56929: IFTRUE 56939
56931: LD_INT 10
56933: DOUBLE
56934: EQUAL
56935: IFTRUE 56939
56937: GO 56995
56939: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56940: LD_ADDR_VAR 0 9
56944: PUSH
56945: LD_VAR 0 41
56949: PUSH
56950: LD_VAR 0 42
56954: PUSH
56955: LD_VAR 0 43
56959: PUSH
56960: LD_VAR 0 44
56964: PUSH
56965: LD_VAR 0 45
56969: PUSH
56970: LD_VAR 0 46
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: PUSH
56983: LD_VAR 0 4
56987: PUSH
56988: LD_INT 1
56990: PLUS
56991: ARRAY
56992: ST_TO_ADDR
56993: GO 57248
56995: LD_INT 36
56997: DOUBLE
56998: EQUAL
56999: IFTRUE 57003
57001: GO 57059
57003: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57004: LD_ADDR_VAR 0 9
57008: PUSH
57009: LD_VAR 0 47
57013: PUSH
57014: LD_VAR 0 48
57018: PUSH
57019: LD_VAR 0 49
57023: PUSH
57024: LD_VAR 0 50
57028: PUSH
57029: LD_VAR 0 51
57033: PUSH
57034: LD_VAR 0 52
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: PUSH
57047: LD_VAR 0 4
57051: PUSH
57052: LD_INT 1
57054: PLUS
57055: ARRAY
57056: ST_TO_ADDR
57057: GO 57248
57059: LD_INT 4
57061: DOUBLE
57062: EQUAL
57063: IFTRUE 57085
57065: LD_INT 5
57067: DOUBLE
57068: EQUAL
57069: IFTRUE 57085
57071: LD_INT 34
57073: DOUBLE
57074: EQUAL
57075: IFTRUE 57085
57077: LD_INT 37
57079: DOUBLE
57080: EQUAL
57081: IFTRUE 57085
57083: GO 57141
57085: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57086: LD_ADDR_VAR 0 9
57090: PUSH
57091: LD_VAR 0 53
57095: PUSH
57096: LD_VAR 0 54
57100: PUSH
57101: LD_VAR 0 55
57105: PUSH
57106: LD_VAR 0 56
57110: PUSH
57111: LD_VAR 0 57
57115: PUSH
57116: LD_VAR 0 58
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: PUSH
57129: LD_VAR 0 4
57133: PUSH
57134: LD_INT 1
57136: PLUS
57137: ARRAY
57138: ST_TO_ADDR
57139: GO 57248
57141: LD_INT 31
57143: DOUBLE
57144: EQUAL
57145: IFTRUE 57191
57147: LD_INT 32
57149: DOUBLE
57150: EQUAL
57151: IFTRUE 57191
57153: LD_INT 33
57155: DOUBLE
57156: EQUAL
57157: IFTRUE 57191
57159: LD_INT 27
57161: DOUBLE
57162: EQUAL
57163: IFTRUE 57191
57165: LD_INT 26
57167: DOUBLE
57168: EQUAL
57169: IFTRUE 57191
57171: LD_INT 28
57173: DOUBLE
57174: EQUAL
57175: IFTRUE 57191
57177: LD_INT 29
57179: DOUBLE
57180: EQUAL
57181: IFTRUE 57191
57183: LD_INT 30
57185: DOUBLE
57186: EQUAL
57187: IFTRUE 57191
57189: GO 57247
57191: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57192: LD_ADDR_VAR 0 9
57196: PUSH
57197: LD_VAR 0 59
57201: PUSH
57202: LD_VAR 0 60
57206: PUSH
57207: LD_VAR 0 61
57211: PUSH
57212: LD_VAR 0 62
57216: PUSH
57217: LD_VAR 0 63
57221: PUSH
57222: LD_VAR 0 64
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: PUSH
57235: LD_VAR 0 4
57239: PUSH
57240: LD_INT 1
57242: PLUS
57243: ARRAY
57244: ST_TO_ADDR
57245: GO 57248
57247: POP
// temp_list2 = [ ] ;
57248: LD_ADDR_VAR 0 10
57252: PUSH
57253: EMPTY
57254: ST_TO_ADDR
// for i in temp_list do
57255: LD_ADDR_VAR 0 8
57259: PUSH
57260: LD_VAR 0 9
57264: PUSH
57265: FOR_IN
57266: IFFALSE 57318
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57268: LD_ADDR_VAR 0 10
57272: PUSH
57273: LD_VAR 0 10
57277: PUSH
57278: LD_VAR 0 8
57282: PUSH
57283: LD_INT 1
57285: ARRAY
57286: PUSH
57287: LD_VAR 0 2
57291: PLUS
57292: PUSH
57293: LD_VAR 0 8
57297: PUSH
57298: LD_INT 2
57300: ARRAY
57301: PUSH
57302: LD_VAR 0 3
57306: PLUS
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: EMPTY
57313: LIST
57314: ADD
57315: ST_TO_ADDR
57316: GO 57265
57318: POP
57319: POP
// result = temp_list2 ;
57320: LD_ADDR_VAR 0 7
57324: PUSH
57325: LD_VAR 0 10
57329: ST_TO_ADDR
// end ;
57330: LD_VAR 0 7
57334: RET
// export function EnemyInRange ( unit , dist ) ; begin
57335: LD_INT 0
57337: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57338: LD_ADDR_VAR 0 3
57342: PUSH
57343: LD_VAR 0 1
57347: PPUSH
57348: CALL_OW 255
57352: PPUSH
57353: LD_VAR 0 1
57357: PPUSH
57358: CALL_OW 250
57362: PPUSH
57363: LD_VAR 0 1
57367: PPUSH
57368: CALL_OW 251
57372: PPUSH
57373: LD_VAR 0 2
57377: PPUSH
57378: CALL 30592 0 4
57382: PUSH
57383: LD_INT 4
57385: ARRAY
57386: ST_TO_ADDR
// end ;
57387: LD_VAR 0 3
57391: RET
// export function PlayerSeeMe ( unit ) ; begin
57392: LD_INT 0
57394: PPUSH
// result := See ( your_side , unit ) ;
57395: LD_ADDR_VAR 0 2
57399: PUSH
57400: LD_OWVAR 2
57404: PPUSH
57405: LD_VAR 0 1
57409: PPUSH
57410: CALL_OW 292
57414: ST_TO_ADDR
// end ;
57415: LD_VAR 0 2
57419: RET
// export function ReverseDir ( unit ) ; begin
57420: LD_INT 0
57422: PPUSH
// if not unit then
57423: LD_VAR 0 1
57427: NOT
57428: IFFALSE 57432
// exit ;
57430: GO 57455
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57432: LD_ADDR_VAR 0 2
57436: PUSH
57437: LD_VAR 0 1
57441: PPUSH
57442: CALL_OW 254
57446: PUSH
57447: LD_INT 3
57449: PLUS
57450: PUSH
57451: LD_INT 6
57453: MOD
57454: ST_TO_ADDR
// end ;
57455: LD_VAR 0 2
57459: RET
// export function ReverseArray ( array ) ; var i ; begin
57460: LD_INT 0
57462: PPUSH
57463: PPUSH
// if not array then
57464: LD_VAR 0 1
57468: NOT
57469: IFFALSE 57473
// exit ;
57471: GO 57528
// result := [ ] ;
57473: LD_ADDR_VAR 0 2
57477: PUSH
57478: EMPTY
57479: ST_TO_ADDR
// for i := array downto 1 do
57480: LD_ADDR_VAR 0 3
57484: PUSH
57485: DOUBLE
57486: LD_VAR 0 1
57490: INC
57491: ST_TO_ADDR
57492: LD_INT 1
57494: PUSH
57495: FOR_DOWNTO
57496: IFFALSE 57526
// result := Join ( result , array [ i ] ) ;
57498: LD_ADDR_VAR 0 2
57502: PUSH
57503: LD_VAR 0 2
57507: PPUSH
57508: LD_VAR 0 1
57512: PUSH
57513: LD_VAR 0 3
57517: ARRAY
57518: PPUSH
57519: CALL 62380 0 2
57523: ST_TO_ADDR
57524: GO 57495
57526: POP
57527: POP
// end ;
57528: LD_VAR 0 2
57532: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
57533: LD_INT 0
57535: PPUSH
57536: PPUSH
57537: PPUSH
57538: PPUSH
57539: PPUSH
57540: PPUSH
// if not unit or not hexes then
57541: LD_VAR 0 1
57545: NOT
57546: IFTRUE 57555
57548: PUSH
57549: LD_VAR 0 2
57553: NOT
57554: OR
57555: IFFALSE 57559
// exit ;
57557: GO 57682
// dist := 9999 ;
57559: LD_ADDR_VAR 0 5
57563: PUSH
57564: LD_INT 9999
57566: ST_TO_ADDR
// for i = 1 to hexes do
57567: LD_ADDR_VAR 0 4
57571: PUSH
57572: DOUBLE
57573: LD_INT 1
57575: DEC
57576: ST_TO_ADDR
57577: LD_VAR 0 2
57581: PUSH
57582: FOR_TO
57583: IFFALSE 57670
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57585: LD_ADDR_VAR 0 6
57589: PUSH
57590: LD_VAR 0 1
57594: PPUSH
57595: LD_VAR 0 2
57599: PUSH
57600: LD_VAR 0 4
57604: ARRAY
57605: PUSH
57606: LD_INT 1
57608: ARRAY
57609: PPUSH
57610: LD_VAR 0 2
57614: PUSH
57615: LD_VAR 0 4
57619: ARRAY
57620: PUSH
57621: LD_INT 2
57623: ARRAY
57624: PPUSH
57625: CALL_OW 297
57629: ST_TO_ADDR
// if tdist < dist then
57630: LD_VAR 0 6
57634: PUSH
57635: LD_VAR 0 5
57639: LESS
57640: IFFALSE 57668
// begin hex := hexes [ i ] ;
57642: LD_ADDR_VAR 0 8
57646: PUSH
57647: LD_VAR 0 2
57651: PUSH
57652: LD_VAR 0 4
57656: ARRAY
57657: ST_TO_ADDR
// dist := tdist ;
57658: LD_ADDR_VAR 0 5
57662: PUSH
57663: LD_VAR 0 6
57667: ST_TO_ADDR
// end ; end ;
57668: GO 57582
57670: POP
57671: POP
// result := hex ;
57672: LD_ADDR_VAR 0 3
57676: PUSH
57677: LD_VAR 0 8
57681: ST_TO_ADDR
// end ;
57682: LD_VAR 0 3
57686: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57687: LD_INT 0
57689: PPUSH
57690: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57691: LD_VAR 0 1
57695: NOT
57696: IFTRUE 57735
57698: PUSH
57699: LD_VAR 0 1
57703: PUSH
57704: LD_INT 21
57706: PUSH
57707: LD_INT 2
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 23
57716: PUSH
57717: LD_INT 2
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PPUSH
57728: CALL_OW 69
57732: IN
57733: NOT
57734: OR
57735: IFFALSE 57739
// exit ;
57737: GO 57786
// for i = 1 to 3 do
57739: LD_ADDR_VAR 0 3
57743: PUSH
57744: DOUBLE
57745: LD_INT 1
57747: DEC
57748: ST_TO_ADDR
57749: LD_INT 3
57751: PUSH
57752: FOR_TO
57753: IFFALSE 57784
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57755: LD_VAR 0 1
57759: PPUSH
57760: CALL_OW 250
57764: PPUSH
57765: LD_VAR 0 1
57769: PPUSH
57770: CALL_OW 251
57774: PPUSH
57775: LD_INT 1
57777: PPUSH
57778: CALL_OW 453
57782: GO 57752
57784: POP
57785: POP
// end ;
57786: LD_VAR 0 2
57790: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57791: LD_INT 0
57793: PPUSH
57794: PPUSH
57795: PPUSH
57796: PPUSH
57797: PPUSH
57798: PPUSH
// if not unit or not enemy_unit then
57799: LD_VAR 0 1
57803: NOT
57804: IFTRUE 57813
57806: PUSH
57807: LD_VAR 0 2
57811: NOT
57812: OR
57813: IFFALSE 57817
// exit ;
57815: GO 58298
// if GetLives ( i ) < 250 then
57817: LD_VAR 0 4
57821: PPUSH
57822: CALL_OW 256
57826: PUSH
57827: LD_INT 250
57829: LESS
57830: IFFALSE 57843
// begin ComAutodestruct ( i ) ;
57832: LD_VAR 0 4
57836: PPUSH
57837: CALL 57687 0 1
// exit ;
57841: GO 58298
// end ; x := GetX ( enemy_unit ) ;
57843: LD_ADDR_VAR 0 7
57847: PUSH
57848: LD_VAR 0 2
57852: PPUSH
57853: CALL_OW 250
57857: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57858: LD_ADDR_VAR 0 8
57862: PUSH
57863: LD_VAR 0 2
57867: PPUSH
57868: CALL_OW 251
57872: ST_TO_ADDR
// if not x or not y then
57873: LD_VAR 0 7
57877: NOT
57878: IFTRUE 57887
57880: PUSH
57881: LD_VAR 0 8
57885: NOT
57886: OR
57887: IFFALSE 57891
// exit ;
57889: GO 58298
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57891: LD_ADDR_VAR 0 6
57895: PUSH
57896: LD_VAR 0 7
57900: PPUSH
57901: LD_INT 0
57903: PPUSH
57904: LD_INT 4
57906: PPUSH
57907: CALL_OW 272
57911: PUSH
57912: LD_VAR 0 8
57916: PPUSH
57917: LD_INT 0
57919: PPUSH
57920: LD_INT 4
57922: PPUSH
57923: CALL_OW 273
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_VAR 0 7
57936: PPUSH
57937: LD_INT 1
57939: PPUSH
57940: LD_INT 4
57942: PPUSH
57943: CALL_OW 272
57947: PUSH
57948: LD_VAR 0 8
57952: PPUSH
57953: LD_INT 1
57955: PPUSH
57956: LD_INT 4
57958: PPUSH
57959: CALL_OW 273
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_VAR 0 7
57972: PPUSH
57973: LD_INT 2
57975: PPUSH
57976: LD_INT 4
57978: PPUSH
57979: CALL_OW 272
57983: PUSH
57984: LD_VAR 0 8
57988: PPUSH
57989: LD_INT 2
57991: PPUSH
57992: LD_INT 4
57994: PPUSH
57995: CALL_OW 273
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_VAR 0 7
58008: PPUSH
58009: LD_INT 3
58011: PPUSH
58012: LD_INT 4
58014: PPUSH
58015: CALL_OW 272
58019: PUSH
58020: LD_VAR 0 8
58024: PPUSH
58025: LD_INT 3
58027: PPUSH
58028: LD_INT 4
58030: PPUSH
58031: CALL_OW 273
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_VAR 0 7
58044: PPUSH
58045: LD_INT 4
58047: PPUSH
58048: LD_INT 4
58050: PPUSH
58051: CALL_OW 272
58055: PUSH
58056: LD_VAR 0 8
58060: PPUSH
58061: LD_INT 4
58063: PPUSH
58064: LD_INT 4
58066: PPUSH
58067: CALL_OW 273
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_VAR 0 7
58080: PPUSH
58081: LD_INT 5
58083: PPUSH
58084: LD_INT 4
58086: PPUSH
58087: CALL_OW 272
58091: PUSH
58092: LD_VAR 0 8
58096: PPUSH
58097: LD_INT 5
58099: PPUSH
58100: LD_INT 4
58102: PPUSH
58103: CALL_OW 273
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: ST_TO_ADDR
// for i = tmp downto 1 do
58120: LD_ADDR_VAR 0 4
58124: PUSH
58125: DOUBLE
58126: LD_VAR 0 6
58130: INC
58131: ST_TO_ADDR
58132: LD_INT 1
58134: PUSH
58135: FOR_DOWNTO
58136: IFFALSE 58239
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58138: LD_VAR 0 6
58142: PUSH
58143: LD_VAR 0 4
58147: ARRAY
58148: PUSH
58149: LD_INT 1
58151: ARRAY
58152: PPUSH
58153: LD_VAR 0 6
58157: PUSH
58158: LD_VAR 0 4
58162: ARRAY
58163: PUSH
58164: LD_INT 2
58166: ARRAY
58167: PPUSH
58168: CALL_OW 488
58172: NOT
58173: IFTRUE 58215
58175: PUSH
58176: LD_VAR 0 6
58180: PUSH
58181: LD_VAR 0 4
58185: ARRAY
58186: PUSH
58187: LD_INT 1
58189: ARRAY
58190: PPUSH
58191: LD_VAR 0 6
58195: PUSH
58196: LD_VAR 0 4
58200: ARRAY
58201: PUSH
58202: LD_INT 2
58204: ARRAY
58205: PPUSH
58206: CALL_OW 428
58210: PUSH
58211: LD_INT 0
58213: NONEQUAL
58214: OR
58215: IFFALSE 58237
// tmp := Delete ( tmp , i ) ;
58217: LD_ADDR_VAR 0 6
58221: PUSH
58222: LD_VAR 0 6
58226: PPUSH
58227: LD_VAR 0 4
58231: PPUSH
58232: CALL_OW 3
58236: ST_TO_ADDR
58237: GO 58135
58239: POP
58240: POP
// j := GetClosestHex ( unit , tmp ) ;
58241: LD_ADDR_VAR 0 5
58245: PUSH
58246: LD_VAR 0 1
58250: PPUSH
58251: LD_VAR 0 6
58255: PPUSH
58256: CALL 57533 0 2
58260: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58261: LD_VAR 0 1
58265: PPUSH
58266: LD_VAR 0 5
58270: PUSH
58271: LD_INT 1
58273: ARRAY
58274: PPUSH
58275: LD_VAR 0 5
58279: PUSH
58280: LD_INT 2
58282: ARRAY
58283: PPUSH
58284: CALL_OW 111
// result := j ;
58288: LD_ADDR_VAR 0 3
58292: PUSH
58293: LD_VAR 0 5
58297: ST_TO_ADDR
// end ;
58298: LD_VAR 0 3
58302: RET
// export function PrepareApemanSoldier ( ) ; begin
58303: LD_INT 0
58305: PPUSH
// uc_nation := 0 ;
58306: LD_ADDR_OWVAR 21
58310: PUSH
58311: LD_INT 0
58313: ST_TO_ADDR
// hc_sex := sex_male ;
58314: LD_ADDR_OWVAR 27
58318: PUSH
58319: LD_INT 1
58321: ST_TO_ADDR
// hc_name :=  ;
58322: LD_ADDR_OWVAR 26
58326: PUSH
58327: LD_STRING 
58329: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
58330: LD_ADDR_OWVAR 28
58334: PUSH
58335: LD_INT 15
58337: ST_TO_ADDR
// hc_gallery :=  ;
58338: LD_ADDR_OWVAR 33
58342: PUSH
58343: LD_STRING 
58345: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58346: LD_ADDR_OWVAR 31
58350: PUSH
58351: LD_INT 0
58353: PPUSH
58354: LD_INT 3
58356: PPUSH
58357: CALL_OW 12
58361: PUSH
58362: LD_INT 0
58364: PPUSH
58365: LD_INT 3
58367: PPUSH
58368: CALL_OW 12
58372: PUSH
58373: LD_INT 0
58375: PUSH
58376: LD_INT 0
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
58385: LD_ADDR_OWVAR 29
58389: PUSH
58390: LD_INT 10
58392: PUSH
58393: LD_INT 12
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: ST_TO_ADDR
// end ;
58400: LD_VAR 0 1
58404: RET
// export function PrepareApemanEngineer ( ) ; begin
58405: LD_INT 0
58407: PPUSH
// uc_nation := 0 ;
58408: LD_ADDR_OWVAR 21
58412: PUSH
58413: LD_INT 0
58415: ST_TO_ADDR
// hc_sex := sex_male ;
58416: LD_ADDR_OWVAR 27
58420: PUSH
58421: LD_INT 1
58423: ST_TO_ADDR
// hc_name :=  ;
58424: LD_ADDR_OWVAR 26
58428: PUSH
58429: LD_STRING 
58431: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
58432: LD_ADDR_OWVAR 28
58436: PUSH
58437: LD_INT 16
58439: ST_TO_ADDR
// hc_gallery :=  ;
58440: LD_ADDR_OWVAR 33
58444: PUSH
58445: LD_STRING 
58447: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58448: LD_ADDR_OWVAR 31
58452: PUSH
58453: LD_INT 0
58455: PPUSH
58456: LD_INT 3
58458: PPUSH
58459: CALL_OW 12
58463: PUSH
58464: LD_INT 0
58466: PPUSH
58467: LD_INT 3
58469: PPUSH
58470: CALL_OW 12
58474: PUSH
58475: LD_INT 0
58477: PUSH
58478: LD_INT 0
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
58487: LD_ADDR_OWVAR 29
58491: PUSH
58492: LD_INT 10
58494: PUSH
58495: LD_INT 12
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: ST_TO_ADDR
// end ;
58502: LD_VAR 0 1
58506: RET
// export function PrepareApeman ( agressivity ) ; begin
58507: LD_INT 0
58509: PPUSH
// uc_side := 0 ;
58510: LD_ADDR_OWVAR 20
58514: PUSH
58515: LD_INT 0
58517: ST_TO_ADDR
// uc_nation := 0 ;
58518: LD_ADDR_OWVAR 21
58522: PUSH
58523: LD_INT 0
58525: ST_TO_ADDR
// hc_sex := sex_male ;
58526: LD_ADDR_OWVAR 27
58530: PUSH
58531: LD_INT 1
58533: ST_TO_ADDR
// hc_class := class_apeman ;
58534: LD_ADDR_OWVAR 28
58538: PUSH
58539: LD_INT 12
58541: ST_TO_ADDR
// hc_gallery :=  ;
58542: LD_ADDR_OWVAR 33
58546: PUSH
58547: LD_STRING 
58549: ST_TO_ADDR
// hc_name :=  ;
58550: LD_ADDR_OWVAR 26
58554: PUSH
58555: LD_STRING 
58557: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
58558: LD_ADDR_OWVAR 29
58562: PUSH
58563: LD_INT 10
58565: PUSH
58566: LD_INT 12
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: ST_TO_ADDR
// if agressivity = 0 then
58573: LD_VAR 0 1
58577: PUSH
58578: LD_INT 0
58580: EQUAL
58581: IFFALSE 58593
// hc_agressivity := 0 else
58583: LD_ADDR_OWVAR 35
58587: PUSH
58588: LD_INT 0
58590: ST_TO_ADDR
58591: GO 58614
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58593: LD_ADDR_OWVAR 35
58597: PUSH
58598: LD_VAR 0 1
58602: NEG
58603: PPUSH
58604: LD_VAR 0 1
58608: PPUSH
58609: CALL_OW 12
58613: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58614: LD_ADDR_OWVAR 31
58618: PUSH
58619: LD_INT 0
58621: PPUSH
58622: LD_INT 3
58624: PPUSH
58625: CALL_OW 12
58629: PUSH
58630: LD_INT 0
58632: PPUSH
58633: LD_INT 3
58635: PPUSH
58636: CALL_OW 12
58640: PUSH
58641: LD_INT 0
58643: PUSH
58644: LD_INT 0
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: ST_TO_ADDR
// end ;
58653: LD_VAR 0 2
58657: RET
// export function PrepareTiger ( agressivity ) ; begin
58658: LD_INT 0
58660: PPUSH
// uc_side := 0 ;
58661: LD_ADDR_OWVAR 20
58665: PUSH
58666: LD_INT 0
58668: ST_TO_ADDR
// uc_nation := 0 ;
58669: LD_ADDR_OWVAR 21
58673: PUSH
58674: LD_INT 0
58676: ST_TO_ADDR
// InitHc ;
58677: CALL_OW 19
// hc_class := class_tiger ;
58681: LD_ADDR_OWVAR 28
58685: PUSH
58686: LD_INT 14
58688: ST_TO_ADDR
// hc_gallery :=  ;
58689: LD_ADDR_OWVAR 33
58693: PUSH
58694: LD_STRING 
58696: ST_TO_ADDR
// hc_name :=  ;
58697: LD_ADDR_OWVAR 26
58701: PUSH
58702: LD_STRING 
58704: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58705: LD_ADDR_OWVAR 35
58709: PUSH
58710: LD_VAR 0 1
58714: NEG
58715: PPUSH
58716: LD_VAR 0 1
58720: PPUSH
58721: CALL_OW 12
58725: ST_TO_ADDR
// end ;
58726: LD_VAR 0 2
58730: RET
// export function PrepareEnchidna ( ) ; begin
58731: LD_INT 0
58733: PPUSH
// uc_side := 0 ;
58734: LD_ADDR_OWVAR 20
58738: PUSH
58739: LD_INT 0
58741: ST_TO_ADDR
// uc_nation := 0 ;
58742: LD_ADDR_OWVAR 21
58746: PUSH
58747: LD_INT 0
58749: ST_TO_ADDR
// InitHc ;
58750: CALL_OW 19
// hc_class := class_baggie ;
58754: LD_ADDR_OWVAR 28
58758: PUSH
58759: LD_INT 13
58761: ST_TO_ADDR
// hc_gallery :=  ;
58762: LD_ADDR_OWVAR 33
58766: PUSH
58767: LD_STRING 
58769: ST_TO_ADDR
// hc_name :=  ;
58770: LD_ADDR_OWVAR 26
58774: PUSH
58775: LD_STRING 
58777: ST_TO_ADDR
// end ;
58778: LD_VAR 0 1
58782: RET
// export function PrepareFrog ( ) ; begin
58783: LD_INT 0
58785: PPUSH
// uc_side := 0 ;
58786: LD_ADDR_OWVAR 20
58790: PUSH
58791: LD_INT 0
58793: ST_TO_ADDR
// uc_nation := 0 ;
58794: LD_ADDR_OWVAR 21
58798: PUSH
58799: LD_INT 0
58801: ST_TO_ADDR
// InitHc ;
58802: CALL_OW 19
// hc_class := class_frog ;
58806: LD_ADDR_OWVAR 28
58810: PUSH
58811: LD_INT 19
58813: ST_TO_ADDR
// hc_gallery :=  ;
58814: LD_ADDR_OWVAR 33
58818: PUSH
58819: LD_STRING 
58821: ST_TO_ADDR
// hc_name :=  ;
58822: LD_ADDR_OWVAR 26
58826: PUSH
58827: LD_STRING 
58829: ST_TO_ADDR
// end ;
58830: LD_VAR 0 1
58834: RET
// export function PrepareFish ( ) ; begin
58835: LD_INT 0
58837: PPUSH
// uc_side := 0 ;
58838: LD_ADDR_OWVAR 20
58842: PUSH
58843: LD_INT 0
58845: ST_TO_ADDR
// uc_nation := 0 ;
58846: LD_ADDR_OWVAR 21
58850: PUSH
58851: LD_INT 0
58853: ST_TO_ADDR
// InitHc ;
58854: CALL_OW 19
// hc_class := class_fish ;
58858: LD_ADDR_OWVAR 28
58862: PUSH
58863: LD_INT 20
58865: ST_TO_ADDR
// hc_gallery :=  ;
58866: LD_ADDR_OWVAR 33
58870: PUSH
58871: LD_STRING 
58873: ST_TO_ADDR
// hc_name :=  ;
58874: LD_ADDR_OWVAR 26
58878: PUSH
58879: LD_STRING 
58881: ST_TO_ADDR
// end ;
58882: LD_VAR 0 1
58886: RET
// export function PrepareBird ( ) ; begin
58887: LD_INT 0
58889: PPUSH
// uc_side := 0 ;
58890: LD_ADDR_OWVAR 20
58894: PUSH
58895: LD_INT 0
58897: ST_TO_ADDR
// uc_nation := 0 ;
58898: LD_ADDR_OWVAR 21
58902: PUSH
58903: LD_INT 0
58905: ST_TO_ADDR
// InitHc ;
58906: CALL_OW 19
// hc_class := class_phororhacos ;
58910: LD_ADDR_OWVAR 28
58914: PUSH
58915: LD_INT 18
58917: ST_TO_ADDR
// hc_gallery :=  ;
58918: LD_ADDR_OWVAR 33
58922: PUSH
58923: LD_STRING 
58925: ST_TO_ADDR
// hc_name :=  ;
58926: LD_ADDR_OWVAR 26
58930: PUSH
58931: LD_STRING 
58933: ST_TO_ADDR
// end ;
58934: LD_VAR 0 1
58938: RET
// export function PrepareHorse ( ) ; begin
58939: LD_INT 0
58941: PPUSH
// uc_side := 0 ;
58942: LD_ADDR_OWVAR 20
58946: PUSH
58947: LD_INT 0
58949: ST_TO_ADDR
// uc_nation := 0 ;
58950: LD_ADDR_OWVAR 21
58954: PUSH
58955: LD_INT 0
58957: ST_TO_ADDR
// InitHc ;
58958: CALL_OW 19
// hc_class := class_horse ;
58962: LD_ADDR_OWVAR 28
58966: PUSH
58967: LD_INT 21
58969: ST_TO_ADDR
// hc_gallery :=  ;
58970: LD_ADDR_OWVAR 33
58974: PUSH
58975: LD_STRING 
58977: ST_TO_ADDR
// hc_name :=  ;
58978: LD_ADDR_OWVAR 26
58982: PUSH
58983: LD_STRING 
58985: ST_TO_ADDR
// end ;
58986: LD_VAR 0 1
58990: RET
// export function PrepareMastodont ( ) ; begin
58991: LD_INT 0
58993: PPUSH
// uc_side := 0 ;
58994: LD_ADDR_OWVAR 20
58998: PUSH
58999: LD_INT 0
59001: ST_TO_ADDR
// uc_nation := 0 ;
59002: LD_ADDR_OWVAR 21
59006: PUSH
59007: LD_INT 0
59009: ST_TO_ADDR
// vc_chassis := class_mastodont ;
59010: LD_ADDR_OWVAR 37
59014: PUSH
59015: LD_INT 31
59017: ST_TO_ADDR
// vc_control := control_rider ;
59018: LD_ADDR_OWVAR 38
59022: PUSH
59023: LD_INT 4
59025: ST_TO_ADDR
// end ;
59026: LD_VAR 0 1
59030: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59031: LD_INT 0
59033: PPUSH
59034: PPUSH
59035: PPUSH
// uc_side = 0 ;
59036: LD_ADDR_OWVAR 20
59040: PUSH
59041: LD_INT 0
59043: ST_TO_ADDR
// uc_nation = 0 ;
59044: LD_ADDR_OWVAR 21
59048: PUSH
59049: LD_INT 0
59051: ST_TO_ADDR
// InitHc_All ( ) ;
59052: CALL_OW 584
// InitVc ;
59056: CALL_OW 20
// if mastodonts then
59060: LD_VAR 0 6
59064: IFFALSE 59131
// for i = 1 to mastodonts do
59066: LD_ADDR_VAR 0 11
59070: PUSH
59071: DOUBLE
59072: LD_INT 1
59074: DEC
59075: ST_TO_ADDR
59076: LD_VAR 0 6
59080: PUSH
59081: FOR_TO
59082: IFFALSE 59129
// begin vc_chassis := 31 ;
59084: LD_ADDR_OWVAR 37
59088: PUSH
59089: LD_INT 31
59091: ST_TO_ADDR
// vc_control := control_rider ;
59092: LD_ADDR_OWVAR 38
59096: PUSH
59097: LD_INT 4
59099: ST_TO_ADDR
// animal := CreateVehicle ;
59100: LD_ADDR_VAR 0 12
59104: PUSH
59105: CALL_OW 45
59109: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59110: LD_VAR 0 12
59114: PPUSH
59115: LD_VAR 0 8
59119: PPUSH
59120: LD_INT 0
59122: PPUSH
59123: CALL 61273 0 3
// end ;
59127: GO 59081
59129: POP
59130: POP
// if horses then
59131: LD_VAR 0 5
59135: IFFALSE 59202
// for i = 1 to horses do
59137: LD_ADDR_VAR 0 11
59141: PUSH
59142: DOUBLE
59143: LD_INT 1
59145: DEC
59146: ST_TO_ADDR
59147: LD_VAR 0 5
59151: PUSH
59152: FOR_TO
59153: IFFALSE 59200
// begin hc_class := 21 ;
59155: LD_ADDR_OWVAR 28
59159: PUSH
59160: LD_INT 21
59162: ST_TO_ADDR
// hc_gallery :=  ;
59163: LD_ADDR_OWVAR 33
59167: PUSH
59168: LD_STRING 
59170: ST_TO_ADDR
// animal := CreateHuman ;
59171: LD_ADDR_VAR 0 12
59175: PUSH
59176: CALL_OW 44
59180: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59181: LD_VAR 0 12
59185: PPUSH
59186: LD_VAR 0 8
59190: PPUSH
59191: LD_INT 0
59193: PPUSH
59194: CALL 61273 0 3
// end ;
59198: GO 59152
59200: POP
59201: POP
// if birds then
59202: LD_VAR 0 1
59206: IFFALSE 59273
// for i = 1 to birds do
59208: LD_ADDR_VAR 0 11
59212: PUSH
59213: DOUBLE
59214: LD_INT 1
59216: DEC
59217: ST_TO_ADDR
59218: LD_VAR 0 1
59222: PUSH
59223: FOR_TO
59224: IFFALSE 59271
// begin hc_class := 18 ;
59226: LD_ADDR_OWVAR 28
59230: PUSH
59231: LD_INT 18
59233: ST_TO_ADDR
// hc_gallery =  ;
59234: LD_ADDR_OWVAR 33
59238: PUSH
59239: LD_STRING 
59241: ST_TO_ADDR
// animal := CreateHuman ;
59242: LD_ADDR_VAR 0 12
59246: PUSH
59247: CALL_OW 44
59251: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59252: LD_VAR 0 12
59256: PPUSH
59257: LD_VAR 0 8
59261: PPUSH
59262: LD_INT 0
59264: PPUSH
59265: CALL 61273 0 3
// end ;
59269: GO 59223
59271: POP
59272: POP
// if tigers then
59273: LD_VAR 0 2
59277: IFFALSE 59361
// for i = 1 to tigers do
59279: LD_ADDR_VAR 0 11
59283: PUSH
59284: DOUBLE
59285: LD_INT 1
59287: DEC
59288: ST_TO_ADDR
59289: LD_VAR 0 2
59293: PUSH
59294: FOR_TO
59295: IFFALSE 59359
// begin hc_class = class_tiger ;
59297: LD_ADDR_OWVAR 28
59301: PUSH
59302: LD_INT 14
59304: ST_TO_ADDR
// hc_gallery =  ;
59305: LD_ADDR_OWVAR 33
59309: PUSH
59310: LD_STRING 
59312: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59313: LD_ADDR_OWVAR 35
59317: PUSH
59318: LD_INT 7
59320: NEG
59321: PPUSH
59322: LD_INT 7
59324: PPUSH
59325: CALL_OW 12
59329: ST_TO_ADDR
// animal := CreateHuman ;
59330: LD_ADDR_VAR 0 12
59334: PUSH
59335: CALL_OW 44
59339: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59340: LD_VAR 0 12
59344: PPUSH
59345: LD_VAR 0 8
59349: PPUSH
59350: LD_INT 0
59352: PPUSH
59353: CALL 61273 0 3
// end ;
59357: GO 59294
59359: POP
59360: POP
// if apemans then
59361: LD_VAR 0 3
59365: IFFALSE 59488
// for i = 1 to apemans do
59367: LD_ADDR_VAR 0 11
59371: PUSH
59372: DOUBLE
59373: LD_INT 1
59375: DEC
59376: ST_TO_ADDR
59377: LD_VAR 0 3
59381: PUSH
59382: FOR_TO
59383: IFFALSE 59486
// begin hc_class = class_apeman ;
59385: LD_ADDR_OWVAR 28
59389: PUSH
59390: LD_INT 12
59392: ST_TO_ADDR
// hc_gallery =  ;
59393: LD_ADDR_OWVAR 33
59397: PUSH
59398: LD_STRING 
59400: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59401: LD_ADDR_OWVAR 35
59405: PUSH
59406: LD_INT 2
59408: NEG
59409: PPUSH
59410: LD_INT 2
59412: PPUSH
59413: CALL_OW 12
59417: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59418: LD_ADDR_OWVAR 31
59422: PUSH
59423: LD_INT 1
59425: PPUSH
59426: LD_INT 3
59428: PPUSH
59429: CALL_OW 12
59433: PUSH
59434: LD_INT 1
59436: PPUSH
59437: LD_INT 3
59439: PPUSH
59440: CALL_OW 12
59444: PUSH
59445: LD_INT 0
59447: PUSH
59448: LD_INT 0
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: ST_TO_ADDR
// animal := CreateHuman ;
59457: LD_ADDR_VAR 0 12
59461: PUSH
59462: CALL_OW 44
59466: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59467: LD_VAR 0 12
59471: PPUSH
59472: LD_VAR 0 8
59476: PPUSH
59477: LD_INT 0
59479: PPUSH
59480: CALL 61273 0 3
// end ;
59484: GO 59382
59486: POP
59487: POP
// if enchidnas then
59488: LD_VAR 0 4
59492: IFFALSE 59559
// for i = 1 to enchidnas do
59494: LD_ADDR_VAR 0 11
59498: PUSH
59499: DOUBLE
59500: LD_INT 1
59502: DEC
59503: ST_TO_ADDR
59504: LD_VAR 0 4
59508: PUSH
59509: FOR_TO
59510: IFFALSE 59557
// begin hc_class = 13 ;
59512: LD_ADDR_OWVAR 28
59516: PUSH
59517: LD_INT 13
59519: ST_TO_ADDR
// hc_gallery =  ;
59520: LD_ADDR_OWVAR 33
59524: PUSH
59525: LD_STRING 
59527: ST_TO_ADDR
// animal := CreateHuman ;
59528: LD_ADDR_VAR 0 12
59532: PUSH
59533: CALL_OW 44
59537: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59538: LD_VAR 0 12
59542: PPUSH
59543: LD_VAR 0 8
59547: PPUSH
59548: LD_INT 0
59550: PPUSH
59551: CALL 61273 0 3
// end ;
59555: GO 59509
59557: POP
59558: POP
// if fishes then
59559: LD_VAR 0 7
59563: IFFALSE 59630
// for i = 1 to fishes do
59565: LD_ADDR_VAR 0 11
59569: PUSH
59570: DOUBLE
59571: LD_INT 1
59573: DEC
59574: ST_TO_ADDR
59575: LD_VAR 0 7
59579: PUSH
59580: FOR_TO
59581: IFFALSE 59628
// begin hc_class = 20 ;
59583: LD_ADDR_OWVAR 28
59587: PUSH
59588: LD_INT 20
59590: ST_TO_ADDR
// hc_gallery =  ;
59591: LD_ADDR_OWVAR 33
59595: PUSH
59596: LD_STRING 
59598: ST_TO_ADDR
// animal := CreateHuman ;
59599: LD_ADDR_VAR 0 12
59603: PUSH
59604: CALL_OW 44
59608: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59609: LD_VAR 0 12
59613: PPUSH
59614: LD_VAR 0 9
59618: PPUSH
59619: LD_INT 0
59621: PPUSH
59622: CALL 61273 0 3
// end ;
59626: GO 59580
59628: POP
59629: POP
// end ;
59630: LD_VAR 0 10
59634: RET
// export function WantHeal ( sci , unit ) ; begin
59635: LD_INT 0
59637: PPUSH
// if GetTaskList ( sci ) > 0 then
59638: LD_VAR 0 1
59642: PPUSH
59643: CALL_OW 437
59647: PUSH
59648: LD_INT 0
59650: GREATER
59651: IFFALSE 59723
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59653: LD_VAR 0 1
59657: PPUSH
59658: CALL_OW 437
59662: PUSH
59663: LD_INT 1
59665: ARRAY
59666: PUSH
59667: LD_INT 1
59669: ARRAY
59670: PUSH
59671: LD_STRING l
59673: EQUAL
59674: IFFALSE 59701
59676: PUSH
59677: LD_VAR 0 1
59681: PPUSH
59682: CALL_OW 437
59686: PUSH
59687: LD_INT 1
59689: ARRAY
59690: PUSH
59691: LD_INT 4
59693: ARRAY
59694: PUSH
59695: LD_VAR 0 2
59699: EQUAL
59700: AND
59701: IFFALSE 59713
// result := true else
59703: LD_ADDR_VAR 0 3
59707: PUSH
59708: LD_INT 1
59710: ST_TO_ADDR
59711: GO 59721
// result := false ;
59713: LD_ADDR_VAR 0 3
59717: PUSH
59718: LD_INT 0
59720: ST_TO_ADDR
// end else
59721: GO 59731
// result := false ;
59723: LD_ADDR_VAR 0 3
59727: PUSH
59728: LD_INT 0
59730: ST_TO_ADDR
// end ;
59731: LD_VAR 0 3
59735: RET
// export function HealTarget ( sci ) ; begin
59736: LD_INT 0
59738: PPUSH
// if not sci then
59739: LD_VAR 0 1
59743: NOT
59744: IFFALSE 59748
// exit ;
59746: GO 59813
// result := 0 ;
59748: LD_ADDR_VAR 0 2
59752: PUSH
59753: LD_INT 0
59755: ST_TO_ADDR
// if GetTaskList ( sci ) then
59756: LD_VAR 0 1
59760: PPUSH
59761: CALL_OW 437
59765: IFFALSE 59813
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59767: LD_VAR 0 1
59771: PPUSH
59772: CALL_OW 437
59776: PUSH
59777: LD_INT 1
59779: ARRAY
59780: PUSH
59781: LD_INT 1
59783: ARRAY
59784: PUSH
59785: LD_STRING l
59787: EQUAL
59788: IFFALSE 59813
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59790: LD_ADDR_VAR 0 2
59794: PUSH
59795: LD_VAR 0 1
59799: PPUSH
59800: CALL_OW 437
59804: PUSH
59805: LD_INT 1
59807: ARRAY
59808: PUSH
59809: LD_INT 4
59811: ARRAY
59812: ST_TO_ADDR
// end ;
59813: LD_VAR 0 2
59817: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59818: LD_INT 0
59820: PPUSH
59821: PPUSH
59822: PPUSH
59823: PPUSH
// if not base_units then
59824: LD_VAR 0 1
59828: NOT
59829: IFFALSE 59833
// exit ;
59831: GO 59920
// result := false ;
59833: LD_ADDR_VAR 0 2
59837: PUSH
59838: LD_INT 0
59840: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59841: LD_ADDR_VAR 0 5
59845: PUSH
59846: LD_VAR 0 1
59850: PPUSH
59851: LD_INT 21
59853: PUSH
59854: LD_INT 3
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PPUSH
59861: CALL_OW 72
59865: ST_TO_ADDR
// if not tmp then
59866: LD_VAR 0 5
59870: NOT
59871: IFFALSE 59875
// exit ;
59873: GO 59920
// for i in tmp do
59875: LD_ADDR_VAR 0 3
59879: PUSH
59880: LD_VAR 0 5
59884: PUSH
59885: FOR_IN
59886: IFFALSE 59918
// begin result := EnemyInRange ( i , 22 ) ;
59888: LD_ADDR_VAR 0 2
59892: PUSH
59893: LD_VAR 0 3
59897: PPUSH
59898: LD_INT 22
59900: PPUSH
59901: CALL 57335 0 2
59905: ST_TO_ADDR
// if result then
59906: LD_VAR 0 2
59910: IFFALSE 59916
// exit ;
59912: POP
59913: POP
59914: GO 59920
// end ;
59916: GO 59885
59918: POP
59919: POP
// end ;
59920: LD_VAR 0 2
59924: RET
// export function FilterByTag ( units , tag ) ; begin
59925: LD_INT 0
59927: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
59928: LD_ADDR_VAR 0 3
59932: PUSH
59933: LD_VAR 0 1
59937: PPUSH
59938: LD_INT 120
59940: PUSH
59941: LD_VAR 0 2
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PPUSH
59950: CALL_OW 72
59954: ST_TO_ADDR
// end ;
59955: LD_VAR 0 3
59959: RET
// export function IsDriver ( un ) ; begin
59960: LD_INT 0
59962: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59963: LD_ADDR_VAR 0 2
59967: PUSH
59968: LD_VAR 0 1
59972: PUSH
59973: LD_INT 55
59975: PUSH
59976: EMPTY
59977: LIST
59978: PPUSH
59979: CALL_OW 69
59983: IN
59984: ST_TO_ADDR
// end ;
59985: LD_VAR 0 2
59989: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59990: LD_INT 0
59992: PPUSH
59993: PPUSH
// list := [ ] ;
59994: LD_ADDR_VAR 0 5
59998: PUSH
59999: EMPTY
60000: ST_TO_ADDR
// case d of 0 :
60001: LD_VAR 0 3
60005: PUSH
60006: LD_INT 0
60008: DOUBLE
60009: EQUAL
60010: IFTRUE 60014
60012: GO 60147
60014: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60015: LD_ADDR_VAR 0 5
60019: PUSH
60020: LD_VAR 0 1
60024: PUSH
60025: LD_INT 4
60027: MINUS
60028: PUSH
60029: LD_VAR 0 2
60033: PUSH
60034: LD_INT 4
60036: MINUS
60037: PUSH
60038: LD_INT 2
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: LIST
60045: PUSH
60046: LD_VAR 0 1
60050: PUSH
60051: LD_INT 3
60053: MINUS
60054: PUSH
60055: LD_VAR 0 2
60059: PUSH
60060: LD_INT 1
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: LIST
60067: PUSH
60068: LD_VAR 0 1
60072: PUSH
60073: LD_INT 4
60075: PLUS
60076: PUSH
60077: LD_VAR 0 2
60081: PUSH
60082: LD_INT 4
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: LIST
60089: PUSH
60090: LD_VAR 0 1
60094: PUSH
60095: LD_INT 3
60097: PLUS
60098: PUSH
60099: LD_VAR 0 2
60103: PUSH
60104: LD_INT 3
60106: PLUS
60107: PUSH
60108: LD_INT 5
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: LIST
60115: PUSH
60116: LD_VAR 0 1
60120: PUSH
60121: LD_VAR 0 2
60125: PUSH
60126: LD_INT 4
60128: PLUS
60129: PUSH
60130: LD_INT 0
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: LIST
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: ST_TO_ADDR
// end ; 1 :
60145: GO 60845
60147: LD_INT 1
60149: DOUBLE
60150: EQUAL
60151: IFTRUE 60155
60153: GO 60288
60155: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60156: LD_ADDR_VAR 0 5
60160: PUSH
60161: LD_VAR 0 1
60165: PUSH
60166: LD_VAR 0 2
60170: PUSH
60171: LD_INT 4
60173: MINUS
60174: PUSH
60175: LD_INT 3
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: LIST
60182: PUSH
60183: LD_VAR 0 1
60187: PUSH
60188: LD_INT 3
60190: MINUS
60191: PUSH
60192: LD_VAR 0 2
60196: PUSH
60197: LD_INT 3
60199: MINUS
60200: PUSH
60201: LD_INT 2
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: LIST
60208: PUSH
60209: LD_VAR 0 1
60213: PUSH
60214: LD_INT 4
60216: MINUS
60217: PUSH
60218: LD_VAR 0 2
60222: PUSH
60223: LD_INT 1
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: LIST
60230: PUSH
60231: LD_VAR 0 1
60235: PUSH
60236: LD_VAR 0 2
60240: PUSH
60241: LD_INT 3
60243: PLUS
60244: PUSH
60245: LD_INT 0
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: LIST
60252: PUSH
60253: LD_VAR 0 1
60257: PUSH
60258: LD_INT 4
60260: PLUS
60261: PUSH
60262: LD_VAR 0 2
60266: PUSH
60267: LD_INT 4
60269: PLUS
60270: PUSH
60271: LD_INT 5
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: LIST
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: ST_TO_ADDR
// end ; 2 :
60286: GO 60845
60288: LD_INT 2
60290: DOUBLE
60291: EQUAL
60292: IFTRUE 60296
60294: GO 60425
60296: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60297: LD_ADDR_VAR 0 5
60301: PUSH
60302: LD_VAR 0 1
60306: PUSH
60307: LD_VAR 0 2
60311: PUSH
60312: LD_INT 3
60314: MINUS
60315: PUSH
60316: LD_INT 3
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: LIST
60323: PUSH
60324: LD_VAR 0 1
60328: PUSH
60329: LD_INT 4
60331: PLUS
60332: PUSH
60333: LD_VAR 0 2
60337: PUSH
60338: LD_INT 4
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: LIST
60345: PUSH
60346: LD_VAR 0 1
60350: PUSH
60351: LD_VAR 0 2
60355: PUSH
60356: LD_INT 4
60358: PLUS
60359: PUSH
60360: LD_INT 0
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: LIST
60367: PUSH
60368: LD_VAR 0 1
60372: PUSH
60373: LD_INT 3
60375: MINUS
60376: PUSH
60377: LD_VAR 0 2
60381: PUSH
60382: LD_INT 1
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: LIST
60389: PUSH
60390: LD_VAR 0 1
60394: PUSH
60395: LD_INT 4
60397: MINUS
60398: PUSH
60399: LD_VAR 0 2
60403: PUSH
60404: LD_INT 4
60406: MINUS
60407: PUSH
60408: LD_INT 2
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: LIST
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: ST_TO_ADDR
// end ; 3 :
60423: GO 60845
60425: LD_INT 3
60427: DOUBLE
60428: EQUAL
60429: IFTRUE 60433
60431: GO 60566
60433: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60434: LD_ADDR_VAR 0 5
60438: PUSH
60439: LD_VAR 0 1
60443: PUSH
60444: LD_INT 3
60446: PLUS
60447: PUSH
60448: LD_VAR 0 2
60452: PUSH
60453: LD_INT 4
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: LIST
60460: PUSH
60461: LD_VAR 0 1
60465: PUSH
60466: LD_INT 4
60468: PLUS
60469: PUSH
60470: LD_VAR 0 2
60474: PUSH
60475: LD_INT 4
60477: PLUS
60478: PUSH
60479: LD_INT 5
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: LIST
60486: PUSH
60487: LD_VAR 0 1
60491: PUSH
60492: LD_INT 4
60494: MINUS
60495: PUSH
60496: LD_VAR 0 2
60500: PUSH
60501: LD_INT 1
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: LIST
60508: PUSH
60509: LD_VAR 0 1
60513: PUSH
60514: LD_VAR 0 2
60518: PUSH
60519: LD_INT 4
60521: MINUS
60522: PUSH
60523: LD_INT 3
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: LIST
60530: PUSH
60531: LD_VAR 0 1
60535: PUSH
60536: LD_INT 3
60538: MINUS
60539: PUSH
60540: LD_VAR 0 2
60544: PUSH
60545: LD_INT 3
60547: MINUS
60548: PUSH
60549: LD_INT 2
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: LIST
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: ST_TO_ADDR
// end ; 4 :
60564: GO 60845
60566: LD_INT 4
60568: DOUBLE
60569: EQUAL
60570: IFTRUE 60574
60572: GO 60707
60574: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60575: LD_ADDR_VAR 0 5
60579: PUSH
60580: LD_VAR 0 1
60584: PUSH
60585: LD_VAR 0 2
60589: PUSH
60590: LD_INT 4
60592: PLUS
60593: PUSH
60594: LD_INT 0
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: LIST
60601: PUSH
60602: LD_VAR 0 1
60606: PUSH
60607: LD_INT 3
60609: PLUS
60610: PUSH
60611: LD_VAR 0 2
60615: PUSH
60616: LD_INT 3
60618: PLUS
60619: PUSH
60620: LD_INT 5
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: LIST
60627: PUSH
60628: LD_VAR 0 1
60632: PUSH
60633: LD_INT 4
60635: PLUS
60636: PUSH
60637: LD_VAR 0 2
60641: PUSH
60642: LD_INT 4
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: LIST
60649: PUSH
60650: LD_VAR 0 1
60654: PUSH
60655: LD_VAR 0 2
60659: PUSH
60660: LD_INT 3
60662: MINUS
60663: PUSH
60664: LD_INT 3
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: LIST
60671: PUSH
60672: LD_VAR 0 1
60676: PUSH
60677: LD_INT 4
60679: MINUS
60680: PUSH
60681: LD_VAR 0 2
60685: PUSH
60686: LD_INT 4
60688: MINUS
60689: PUSH
60690: LD_INT 2
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: LIST
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: ST_TO_ADDR
// end ; 5 :
60705: GO 60845
60707: LD_INT 5
60709: DOUBLE
60710: EQUAL
60711: IFTRUE 60715
60713: GO 60844
60715: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60716: LD_ADDR_VAR 0 5
60720: PUSH
60721: LD_VAR 0 1
60725: PUSH
60726: LD_INT 4
60728: MINUS
60729: PUSH
60730: LD_VAR 0 2
60734: PUSH
60735: LD_INT 1
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: LIST
60742: PUSH
60743: LD_VAR 0 1
60747: PUSH
60748: LD_VAR 0 2
60752: PUSH
60753: LD_INT 4
60755: MINUS
60756: PUSH
60757: LD_INT 3
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: LIST
60764: PUSH
60765: LD_VAR 0 1
60769: PUSH
60770: LD_INT 4
60772: PLUS
60773: PUSH
60774: LD_VAR 0 2
60778: PUSH
60779: LD_INT 4
60781: PLUS
60782: PUSH
60783: LD_INT 5
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: LIST
60790: PUSH
60791: LD_VAR 0 1
60795: PUSH
60796: LD_INT 3
60798: PLUS
60799: PUSH
60800: LD_VAR 0 2
60804: PUSH
60805: LD_INT 4
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: LIST
60812: PUSH
60813: LD_VAR 0 1
60817: PUSH
60818: LD_VAR 0 2
60822: PUSH
60823: LD_INT 3
60825: PLUS
60826: PUSH
60827: LD_INT 0
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: LIST
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: ST_TO_ADDR
// end ; end ;
60842: GO 60845
60844: POP
// result := list ;
60845: LD_ADDR_VAR 0 4
60849: PUSH
60850: LD_VAR 0 5
60854: ST_TO_ADDR
// end ;
60855: LD_VAR 0 4
60859: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60860: LD_INT 0
60862: PPUSH
60863: PPUSH
60864: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60865: LD_VAR 0 1
60869: NOT
60870: IFTRUE 60898
60872: PUSH
60873: LD_VAR 0 2
60877: PUSH
60878: LD_INT 1
60880: PUSH
60881: LD_INT 2
60883: PUSH
60884: LD_INT 3
60886: PUSH
60887: LD_INT 4
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: IN
60896: NOT
60897: OR
60898: IFFALSE 60902
// exit ;
60900: GO 60985
// tmp := [ ] ;
60902: LD_ADDR_VAR 0 5
60906: PUSH
60907: EMPTY
60908: ST_TO_ADDR
// for i in units do
60909: LD_ADDR_VAR 0 4
60913: PUSH
60914: LD_VAR 0 1
60918: PUSH
60919: FOR_IN
60920: IFFALSE 60954
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
60922: LD_ADDR_VAR 0 5
60926: PUSH
60927: LD_VAR 0 5
60931: PPUSH
60932: LD_VAR 0 4
60936: PPUSH
60937: LD_VAR 0 2
60941: PPUSH
60942: CALL_OW 259
60946: PPUSH
60947: CALL 62380 0 2
60951: ST_TO_ADDR
60952: GO 60919
60954: POP
60955: POP
// if not tmp then
60956: LD_VAR 0 5
60960: NOT
60961: IFFALSE 60965
// exit ;
60963: GO 60985
// result := SortListByListDesc ( units , tmp ) ;
60965: LD_ADDR_VAR 0 3
60969: PUSH
60970: LD_VAR 0 1
60974: PPUSH
60975: LD_VAR 0 5
60979: PPUSH
60980: CALL_OW 77
60984: ST_TO_ADDR
// end ;
60985: LD_VAR 0 3
60989: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60990: LD_INT 0
60992: PPUSH
60993: PPUSH
60994: PPUSH
// result := false ;
60995: LD_ADDR_VAR 0 3
60999: PUSH
61000: LD_INT 0
61002: ST_TO_ADDR
// if not building then
61003: LD_VAR 0 2
61007: NOT
61008: IFFALSE 61012
// exit ;
61010: GO 61156
// x := GetX ( building ) ;
61012: LD_ADDR_VAR 0 4
61016: PUSH
61017: LD_VAR 0 2
61021: PPUSH
61022: CALL_OW 250
61026: ST_TO_ADDR
// y := GetY ( building ) ;
61027: LD_ADDR_VAR 0 5
61031: PUSH
61032: LD_VAR 0 2
61036: PPUSH
61037: CALL_OW 251
61041: ST_TO_ADDR
// if not x or not y then
61042: LD_VAR 0 4
61046: NOT
61047: IFTRUE 61056
61049: PUSH
61050: LD_VAR 0 5
61054: NOT
61055: OR
61056: IFFALSE 61060
// exit ;
61058: GO 61156
// if GetTaskList ( unit ) then
61060: LD_VAR 0 1
61064: PPUSH
61065: CALL_OW 437
61069: IFFALSE 61156
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61071: LD_STRING e
61073: PUSH
61074: LD_VAR 0 1
61078: PPUSH
61079: CALL_OW 437
61083: PUSH
61084: LD_INT 1
61086: ARRAY
61087: PUSH
61088: LD_INT 1
61090: ARRAY
61091: EQUAL
61092: IFFALSE 61119
61094: PUSH
61095: LD_VAR 0 4
61099: PUSH
61100: LD_VAR 0 1
61104: PPUSH
61105: CALL_OW 437
61109: PUSH
61110: LD_INT 1
61112: ARRAY
61113: PUSH
61114: LD_INT 2
61116: ARRAY
61117: EQUAL
61118: AND
61119: IFFALSE 61146
61121: PUSH
61122: LD_VAR 0 5
61126: PUSH
61127: LD_VAR 0 1
61131: PPUSH
61132: CALL_OW 437
61136: PUSH
61137: LD_INT 1
61139: ARRAY
61140: PUSH
61141: LD_INT 3
61143: ARRAY
61144: EQUAL
61145: AND
61146: IFFALSE 61156
// result := true end ;
61148: LD_ADDR_VAR 0 3
61152: PUSH
61153: LD_INT 1
61155: ST_TO_ADDR
// end ;
61156: LD_VAR 0 3
61160: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61161: LD_INT 0
61163: PPUSH
// result := false ;
61164: LD_ADDR_VAR 0 4
61168: PUSH
61169: LD_INT 0
61171: ST_TO_ADDR
// if GetTaskList ( unit ) then
61172: LD_VAR 0 1
61176: PPUSH
61177: CALL_OW 437
61181: IFFALSE 61268
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61183: LD_STRING M
61185: PUSH
61186: LD_VAR 0 1
61190: PPUSH
61191: CALL_OW 437
61195: PUSH
61196: LD_INT 1
61198: ARRAY
61199: PUSH
61200: LD_INT 1
61202: ARRAY
61203: EQUAL
61204: IFFALSE 61231
61206: PUSH
61207: LD_VAR 0 2
61211: PUSH
61212: LD_VAR 0 1
61216: PPUSH
61217: CALL_OW 437
61221: PUSH
61222: LD_INT 1
61224: ARRAY
61225: PUSH
61226: LD_INT 2
61228: ARRAY
61229: EQUAL
61230: AND
61231: IFFALSE 61258
61233: PUSH
61234: LD_VAR 0 3
61238: PUSH
61239: LD_VAR 0 1
61243: PPUSH
61244: CALL_OW 437
61248: PUSH
61249: LD_INT 1
61251: ARRAY
61252: PUSH
61253: LD_INT 3
61255: ARRAY
61256: EQUAL
61257: AND
61258: IFFALSE 61268
// result := true ;
61260: LD_ADDR_VAR 0 4
61264: PUSH
61265: LD_INT 1
61267: ST_TO_ADDR
// end ; end ;
61268: LD_VAR 0 4
61272: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61273: LD_INT 0
61275: PPUSH
61276: PPUSH
61277: PPUSH
61278: PPUSH
// if not unit or not area then
61279: LD_VAR 0 1
61283: NOT
61284: IFTRUE 61293
61286: PUSH
61287: LD_VAR 0 2
61291: NOT
61292: OR
61293: IFFALSE 61297
// exit ;
61295: GO 61473
// tmp := AreaToList ( area , i ) ;
61297: LD_ADDR_VAR 0 6
61301: PUSH
61302: LD_VAR 0 2
61306: PPUSH
61307: LD_VAR 0 5
61311: PPUSH
61312: CALL_OW 517
61316: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61317: LD_ADDR_VAR 0 5
61321: PUSH
61322: DOUBLE
61323: LD_INT 1
61325: DEC
61326: ST_TO_ADDR
61327: LD_VAR 0 6
61331: PUSH
61332: LD_INT 1
61334: ARRAY
61335: PUSH
61336: FOR_TO
61337: IFFALSE 61471
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61339: LD_ADDR_VAR 0 7
61343: PUSH
61344: LD_VAR 0 6
61348: PUSH
61349: LD_INT 1
61351: ARRAY
61352: PUSH
61353: LD_VAR 0 5
61357: ARRAY
61358: PUSH
61359: LD_VAR 0 6
61363: PUSH
61364: LD_INT 2
61366: ARRAY
61367: PUSH
61368: LD_VAR 0 5
61372: ARRAY
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
61378: LD_INT 92
61380: PUSH
61381: LD_VAR 0 7
61385: PUSH
61386: LD_INT 1
61388: ARRAY
61389: PUSH
61390: LD_VAR 0 7
61394: PUSH
61395: LD_INT 2
61397: ARRAY
61398: PUSH
61399: LD_INT 2
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: PPUSH
61408: CALL_OW 69
61412: PUSH
61413: LD_INT 0
61415: EQUAL
61416: IFFALSE 61469
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61418: LD_VAR 0 1
61422: PPUSH
61423: LD_VAR 0 7
61427: PUSH
61428: LD_INT 1
61430: ARRAY
61431: PPUSH
61432: LD_VAR 0 7
61436: PUSH
61437: LD_INT 2
61439: ARRAY
61440: PPUSH
61441: LD_VAR 0 3
61445: PPUSH
61446: CALL_OW 48
// result := IsPlaced ( unit ) ;
61450: LD_ADDR_VAR 0 4
61454: PUSH
61455: LD_VAR 0 1
61459: PPUSH
61460: CALL_OW 305
61464: ST_TO_ADDR
// exit ;
61465: POP
61466: POP
61467: GO 61473
// end ; end ;
61469: GO 61336
61471: POP
61472: POP
// end ;
61473: LD_VAR 0 4
61477: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61478: LD_INT 0
61480: PPUSH
61481: PPUSH
61482: PPUSH
// if not side or side > 8 then
61483: LD_VAR 0 1
61487: NOT
61488: IFTRUE 61500
61490: PUSH
61491: LD_VAR 0 1
61495: PUSH
61496: LD_INT 8
61498: GREATER
61499: OR
61500: IFFALSE 61504
// exit ;
61502: GO 61691
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61504: LD_ADDR_VAR 0 4
61508: PUSH
61509: LD_INT 22
61511: PUSH
61512: LD_VAR 0 1
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 21
61523: PUSH
61524: LD_INT 3
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PPUSH
61535: CALL_OW 69
61539: ST_TO_ADDR
// if not tmp then
61540: LD_VAR 0 4
61544: NOT
61545: IFFALSE 61549
// exit ;
61547: GO 61691
// enable_addtolog := true ;
61549: LD_ADDR_OWVAR 81
61553: PUSH
61554: LD_INT 1
61556: ST_TO_ADDR
// AddToLog ( [ ) ;
61557: LD_STRING [
61559: PPUSH
61560: CALL_OW 561
// for i in tmp do
61564: LD_ADDR_VAR 0 3
61568: PUSH
61569: LD_VAR 0 4
61573: PUSH
61574: FOR_IN
61575: IFFALSE 61682
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61577: LD_STRING [
61579: PUSH
61580: LD_VAR 0 3
61584: PPUSH
61585: CALL_OW 266
61589: STR
61590: PUSH
61591: LD_STRING , 
61593: STR
61594: PUSH
61595: LD_VAR 0 3
61599: PPUSH
61600: CALL_OW 250
61604: STR
61605: PUSH
61606: LD_STRING , 
61608: STR
61609: PUSH
61610: LD_VAR 0 3
61614: PPUSH
61615: CALL_OW 251
61619: STR
61620: PUSH
61621: LD_STRING , 
61623: STR
61624: PUSH
61625: LD_VAR 0 3
61629: PPUSH
61630: CALL_OW 254
61634: STR
61635: PUSH
61636: LD_STRING , 
61638: STR
61639: PUSH
61640: LD_VAR 0 3
61644: PPUSH
61645: LD_INT 1
61647: PPUSH
61648: CALL_OW 268
61652: STR
61653: PUSH
61654: LD_STRING , 
61656: STR
61657: PUSH
61658: LD_VAR 0 3
61662: PPUSH
61663: LD_INT 2
61665: PPUSH
61666: CALL_OW 268
61670: STR
61671: PUSH
61672: LD_STRING ],
61674: STR
61675: PPUSH
61676: CALL_OW 561
// end ;
61680: GO 61574
61682: POP
61683: POP
// AddToLog ( ]; ) ;
61684: LD_STRING ];
61686: PPUSH
61687: CALL_OW 561
// end ;
61691: LD_VAR 0 2
61695: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61696: LD_INT 0
61698: PPUSH
61699: PPUSH
61700: PPUSH
61701: PPUSH
61702: PPUSH
// if not area or not rate or not max then
61703: LD_VAR 0 1
61707: NOT
61708: IFTRUE 61717
61710: PUSH
61711: LD_VAR 0 2
61715: NOT
61716: OR
61717: IFTRUE 61726
61719: PUSH
61720: LD_VAR 0 4
61724: NOT
61725: OR
61726: IFFALSE 61730
// exit ;
61728: GO 61919
// while 1 do
61730: LD_INT 1
61732: IFFALSE 61919
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61734: LD_ADDR_VAR 0 9
61738: PUSH
61739: LD_VAR 0 1
61743: PPUSH
61744: LD_INT 1
61746: PPUSH
61747: CALL_OW 287
61751: PUSH
61752: LD_INT 10
61754: MUL
61755: ST_TO_ADDR
// r := rate / 10 ;
61756: LD_ADDR_VAR 0 7
61760: PUSH
61761: LD_VAR 0 2
61765: PUSH
61766: LD_INT 10
61768: DIVREAL
61769: ST_TO_ADDR
// time := 1 1$00 ;
61770: LD_ADDR_VAR 0 8
61774: PUSH
61775: LD_INT 2100
61777: ST_TO_ADDR
// if amount < min then
61778: LD_VAR 0 9
61782: PUSH
61783: LD_VAR 0 3
61787: LESS
61788: IFFALSE 61806
// r := r * 2 else
61790: LD_ADDR_VAR 0 7
61794: PUSH
61795: LD_VAR 0 7
61799: PUSH
61800: LD_INT 2
61802: MUL
61803: ST_TO_ADDR
61804: GO 61832
// if amount > max then
61806: LD_VAR 0 9
61810: PUSH
61811: LD_VAR 0 4
61815: GREATER
61816: IFFALSE 61832
// r := r / 2 ;
61818: LD_ADDR_VAR 0 7
61822: PUSH
61823: LD_VAR 0 7
61827: PUSH
61828: LD_INT 2
61830: DIVREAL
61831: ST_TO_ADDR
// time := time / r ;
61832: LD_ADDR_VAR 0 8
61836: PUSH
61837: LD_VAR 0 8
61841: PUSH
61842: LD_VAR 0 7
61846: DIVREAL
61847: ST_TO_ADDR
// if time < 0 then
61848: LD_VAR 0 8
61852: PUSH
61853: LD_INT 0
61855: LESS
61856: IFFALSE 61873
// time := time * - 1 ;
61858: LD_ADDR_VAR 0 8
61862: PUSH
61863: LD_VAR 0 8
61867: PUSH
61868: LD_INT 1
61870: NEG
61871: MUL
61872: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
61873: LD_VAR 0 8
61877: PUSH
61878: LD_INT 35
61880: PPUSH
61881: LD_INT 875
61883: PPUSH
61884: CALL_OW 12
61888: PLUS
61889: PPUSH
61890: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61894: LD_INT 1
61896: PPUSH
61897: LD_INT 5
61899: PPUSH
61900: CALL_OW 12
61904: PPUSH
61905: LD_VAR 0 1
61909: PPUSH
61910: LD_INT 1
61912: PPUSH
61913: CALL_OW 55
// end ;
61917: GO 61730
// end ;
61919: LD_VAR 0 5
61923: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61924: LD_INT 0
61926: PPUSH
61927: PPUSH
61928: PPUSH
61929: PPUSH
61930: PPUSH
61931: PPUSH
61932: PPUSH
61933: PPUSH
// if not turrets or not factories then
61934: LD_VAR 0 1
61938: NOT
61939: IFTRUE 61948
61941: PUSH
61942: LD_VAR 0 2
61946: NOT
61947: OR
61948: IFFALSE 61952
// exit ;
61950: GO 62259
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61952: LD_ADDR_VAR 0 10
61956: PUSH
61957: LD_INT 5
61959: PUSH
61960: LD_INT 6
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 2
61969: PUSH
61970: LD_INT 4
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 3
61979: PUSH
61980: LD_INT 5
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 24
61994: PUSH
61995: LD_INT 25
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: LD_INT 23
62004: PUSH
62005: LD_INT 27
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 42
62018: PUSH
62019: LD_INT 43
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 44
62028: PUSH
62029: LD_INT 46
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 45
62038: PUSH
62039: LD_INT 47
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: LIST
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: LIST
62055: ST_TO_ADDR
// result := [ ] ;
62056: LD_ADDR_VAR 0 3
62060: PUSH
62061: EMPTY
62062: ST_TO_ADDR
// for i in turrets do
62063: LD_ADDR_VAR 0 4
62067: PUSH
62068: LD_VAR 0 1
62072: PUSH
62073: FOR_IN
62074: IFFALSE 62257
// begin nat := GetNation ( i ) ;
62076: LD_ADDR_VAR 0 7
62080: PUSH
62081: LD_VAR 0 4
62085: PPUSH
62086: CALL_OW 248
62090: ST_TO_ADDR
// weapon := 0 ;
62091: LD_ADDR_VAR 0 8
62095: PUSH
62096: LD_INT 0
62098: ST_TO_ADDR
// if not nat then
62099: LD_VAR 0 7
62103: NOT
62104: IFFALSE 62108
// continue ;
62106: GO 62073
// for j in list [ nat ] do
62108: LD_ADDR_VAR 0 5
62112: PUSH
62113: LD_VAR 0 10
62117: PUSH
62118: LD_VAR 0 7
62122: ARRAY
62123: PUSH
62124: FOR_IN
62125: IFFALSE 62166
// if GetBWeapon ( i ) = j [ 1 ] then
62127: LD_VAR 0 4
62131: PPUSH
62132: CALL_OW 269
62136: PUSH
62137: LD_VAR 0 5
62141: PUSH
62142: LD_INT 1
62144: ARRAY
62145: EQUAL
62146: IFFALSE 62164
// begin weapon := j [ 2 ] ;
62148: LD_ADDR_VAR 0 8
62152: PUSH
62153: LD_VAR 0 5
62157: PUSH
62158: LD_INT 2
62160: ARRAY
62161: ST_TO_ADDR
// break ;
62162: GO 62166
// end ;
62164: GO 62124
62166: POP
62167: POP
// if not weapon then
62168: LD_VAR 0 8
62172: NOT
62173: IFFALSE 62177
// continue ;
62175: GO 62073
// for k in factories do
62177: LD_ADDR_VAR 0 6
62181: PUSH
62182: LD_VAR 0 2
62186: PUSH
62187: FOR_IN
62188: IFFALSE 62253
// begin weapons := AvailableWeaponList ( k ) ;
62190: LD_ADDR_VAR 0 9
62194: PUSH
62195: LD_VAR 0 6
62199: PPUSH
62200: CALL_OW 478
62204: ST_TO_ADDR
// if not weapons then
62205: LD_VAR 0 9
62209: NOT
62210: IFFALSE 62214
// continue ;
62212: GO 62187
// if weapon in weapons then
62214: LD_VAR 0 8
62218: PUSH
62219: LD_VAR 0 9
62223: IN
62224: IFFALSE 62251
// begin result := [ i , weapon ] ;
62226: LD_ADDR_VAR 0 3
62230: PUSH
62231: LD_VAR 0 4
62235: PUSH
62236: LD_VAR 0 8
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: ST_TO_ADDR
// exit ;
62245: POP
62246: POP
62247: POP
62248: POP
62249: GO 62259
// end ; end ;
62251: GO 62187
62253: POP
62254: POP
// end ;
62255: GO 62073
62257: POP
62258: POP
// end ;
62259: LD_VAR 0 3
62263: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62264: LD_INT 0
62266: PPUSH
// if not side or side > 8 then
62267: LD_VAR 0 3
62271: NOT
62272: IFTRUE 62284
62274: PUSH
62275: LD_VAR 0 3
62279: PUSH
62280: LD_INT 8
62282: GREATER
62283: OR
62284: IFFALSE 62288
// exit ;
62286: GO 62347
// if not range then
62288: LD_VAR 0 4
62292: NOT
62293: IFFALSE 62304
// range := - 12 ;
62295: LD_ADDR_VAR 0 4
62299: PUSH
62300: LD_INT 12
62302: NEG
62303: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62304: LD_VAR 0 1
62308: PPUSH
62309: LD_VAR 0 2
62313: PPUSH
62314: LD_VAR 0 3
62318: PPUSH
62319: LD_VAR 0 4
62323: PPUSH
62324: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62328: LD_VAR 0 1
62332: PPUSH
62333: LD_VAR 0 2
62337: PPUSH
62338: LD_VAR 0 3
62342: PPUSH
62343: CALL_OW 331
// end ;
62347: LD_VAR 0 5
62351: RET
// export function Video ( mode ) ; begin
62352: LD_INT 0
62354: PPUSH
// ingame_video = mode ;
62355: LD_ADDR_OWVAR 52
62359: PUSH
62360: LD_VAR 0 1
62364: ST_TO_ADDR
// interface_hidden = mode ;
62365: LD_ADDR_OWVAR 54
62369: PUSH
62370: LD_VAR 0 1
62374: ST_TO_ADDR
// end ;
62375: LD_VAR 0 2
62379: RET
// export function Join ( array , element ) ; begin
62380: LD_INT 0
62382: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62383: LD_ADDR_VAR 0 3
62387: PUSH
62388: LD_VAR 0 1
62392: PPUSH
62393: LD_VAR 0 1
62397: PUSH
62398: LD_INT 1
62400: PLUS
62401: PPUSH
62402: LD_VAR 0 2
62406: PPUSH
62407: CALL_OW 1
62411: ST_TO_ADDR
// end ;
62412: LD_VAR 0 3
62416: RET
// export function JoinUnion ( array , element ) ; begin
62417: LD_INT 0
62419: PPUSH
// result := array union element ;
62420: LD_ADDR_VAR 0 3
62424: PUSH
62425: LD_VAR 0 1
62429: PUSH
62430: LD_VAR 0 2
62434: UNION
62435: ST_TO_ADDR
// end ;
62436: LD_VAR 0 3
62440: RET
// export function GetBehemoths ( side ) ; begin
62441: LD_INT 0
62443: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
62444: LD_ADDR_VAR 0 2
62448: PUSH
62449: LD_INT 22
62451: PUSH
62452: LD_VAR 0 1
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: PUSH
62461: LD_INT 31
62463: PUSH
62464: LD_INT 25
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: PPUSH
62475: CALL_OW 69
62479: ST_TO_ADDR
// end ;
62480: LD_VAR 0 2
62484: RET
// export function Shuffle ( array ) ; var i , index ; begin
62485: LD_INT 0
62487: PPUSH
62488: PPUSH
62489: PPUSH
// result := [ ] ;
62490: LD_ADDR_VAR 0 2
62494: PUSH
62495: EMPTY
62496: ST_TO_ADDR
// if not array then
62497: LD_VAR 0 1
62501: NOT
62502: IFFALSE 62506
// exit ;
62504: GO 62605
// Randomize ;
62506: CALL_OW 10
// for i = array downto 1 do
62510: LD_ADDR_VAR 0 3
62514: PUSH
62515: DOUBLE
62516: LD_VAR 0 1
62520: INC
62521: ST_TO_ADDR
62522: LD_INT 1
62524: PUSH
62525: FOR_DOWNTO
62526: IFFALSE 62603
// begin index := rand ( 1 , array ) ;
62528: LD_ADDR_VAR 0 4
62532: PUSH
62533: LD_INT 1
62535: PPUSH
62536: LD_VAR 0 1
62540: PPUSH
62541: CALL_OW 12
62545: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62546: LD_ADDR_VAR 0 2
62550: PUSH
62551: LD_VAR 0 2
62555: PPUSH
62556: LD_VAR 0 2
62560: PUSH
62561: LD_INT 1
62563: PLUS
62564: PPUSH
62565: LD_VAR 0 1
62569: PUSH
62570: LD_VAR 0 4
62574: ARRAY
62575: PPUSH
62576: CALL_OW 2
62580: ST_TO_ADDR
// array := Delete ( array , index ) ;
62581: LD_ADDR_VAR 0 1
62585: PUSH
62586: LD_VAR 0 1
62590: PPUSH
62591: LD_VAR 0 4
62595: PPUSH
62596: CALL_OW 3
62600: ST_TO_ADDR
// end ;
62601: GO 62525
62603: POP
62604: POP
// end ;
62605: LD_VAR 0 2
62609: RET
// export function GetBaseMaterials ( base ) ; begin
62610: LD_INT 0
62612: PPUSH
// result := [ 0 , 0 , 0 ] ;
62613: LD_ADDR_VAR 0 2
62617: PUSH
62618: LD_INT 0
62620: PUSH
62621: LD_INT 0
62623: PUSH
62624: LD_INT 0
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: LIST
62631: ST_TO_ADDR
// if not base then
62632: LD_VAR 0 1
62636: NOT
62637: IFFALSE 62641
// exit ;
62639: GO 62690
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62641: LD_ADDR_VAR 0 2
62645: PUSH
62646: LD_VAR 0 1
62650: PPUSH
62651: LD_INT 1
62653: PPUSH
62654: CALL_OW 275
62658: PUSH
62659: LD_VAR 0 1
62663: PPUSH
62664: LD_INT 2
62666: PPUSH
62667: CALL_OW 275
62671: PUSH
62672: LD_VAR 0 1
62676: PPUSH
62677: LD_INT 3
62679: PPUSH
62680: CALL_OW 275
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: LIST
62689: ST_TO_ADDR
// end ;
62690: LD_VAR 0 2
62694: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62695: LD_INT 0
62697: PPUSH
62698: PPUSH
// result := array ;
62699: LD_ADDR_VAR 0 3
62703: PUSH
62704: LD_VAR 0 1
62708: ST_TO_ADDR
// if size >= result then
62709: LD_VAR 0 2
62713: PUSH
62714: LD_VAR 0 3
62718: GREATEREQUAL
62719: IFFALSE 62723
// exit ;
62721: GO 62773
// if size then
62723: LD_VAR 0 2
62727: IFFALSE 62773
// for i := array downto size do
62729: LD_ADDR_VAR 0 4
62733: PUSH
62734: DOUBLE
62735: LD_VAR 0 1
62739: INC
62740: ST_TO_ADDR
62741: LD_VAR 0 2
62745: PUSH
62746: FOR_DOWNTO
62747: IFFALSE 62771
// result := Delete ( result , result ) ;
62749: LD_ADDR_VAR 0 3
62753: PUSH
62754: LD_VAR 0 3
62758: PPUSH
62759: LD_VAR 0 3
62763: PPUSH
62764: CALL_OW 3
62768: ST_TO_ADDR
62769: GO 62746
62771: POP
62772: POP
// end ;
62773: LD_VAR 0 3
62777: RET
// export function ComExit ( unit ) ; var tmp ; begin
62778: LD_INT 0
62780: PPUSH
62781: PPUSH
// if not IsInUnit ( unit ) then
62782: LD_VAR 0 1
62786: PPUSH
62787: CALL_OW 310
62791: NOT
62792: IFFALSE 62796
// exit ;
62794: GO 62856
// tmp := IsInUnit ( unit ) ;
62796: LD_ADDR_VAR 0 3
62800: PUSH
62801: LD_VAR 0 1
62805: PPUSH
62806: CALL_OW 310
62810: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62811: LD_VAR 0 3
62815: PPUSH
62816: CALL_OW 247
62820: PUSH
62821: LD_INT 2
62823: EQUAL
62824: IFFALSE 62837
// ComExitVehicle ( unit ) else
62826: LD_VAR 0 1
62830: PPUSH
62831: CALL_OW 121
62835: GO 62846
// ComExitBuilding ( unit ) ;
62837: LD_VAR 0 1
62841: PPUSH
62842: CALL_OW 122
// result := tmp ;
62846: LD_ADDR_VAR 0 2
62850: PUSH
62851: LD_VAR 0 3
62855: ST_TO_ADDR
// end ;
62856: LD_VAR 0 2
62860: RET
// export function ComExitAll ( units ) ; var i ; begin
62861: LD_INT 0
62863: PPUSH
62864: PPUSH
// if not units then
62865: LD_VAR 0 1
62869: NOT
62870: IFFALSE 62874
// exit ;
62872: GO 62900
// for i in units do
62874: LD_ADDR_VAR 0 3
62878: PUSH
62879: LD_VAR 0 1
62883: PUSH
62884: FOR_IN
62885: IFFALSE 62898
// ComExit ( i ) ;
62887: LD_VAR 0 3
62891: PPUSH
62892: CALL 62778 0 1
62896: GO 62884
62898: POP
62899: POP
// end ;
62900: LD_VAR 0 2
62904: RET
// export function ResetHc ; begin
62905: LD_INT 0
62907: PPUSH
// InitHc ;
62908: CALL_OW 19
// hc_importance := 0 ;
62912: LD_ADDR_OWVAR 32
62916: PUSH
62917: LD_INT 0
62919: ST_TO_ADDR
// end ;
62920: LD_VAR 0 1
62924: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62925: LD_INT 0
62927: PPUSH
62928: PPUSH
62929: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62930: LD_ADDR_VAR 0 6
62934: PUSH
62935: LD_VAR 0 1
62939: PUSH
62940: LD_VAR 0 3
62944: PLUS
62945: PUSH
62946: LD_INT 2
62948: DIV
62949: ST_TO_ADDR
// if _x < 0 then
62950: LD_VAR 0 6
62954: PUSH
62955: LD_INT 0
62957: LESS
62958: IFFALSE 62975
// _x := _x * - 1 ;
62960: LD_ADDR_VAR 0 6
62964: PUSH
62965: LD_VAR 0 6
62969: PUSH
62970: LD_INT 1
62972: NEG
62973: MUL
62974: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62975: LD_ADDR_VAR 0 7
62979: PUSH
62980: LD_VAR 0 2
62984: PUSH
62985: LD_VAR 0 4
62989: PLUS
62990: PUSH
62991: LD_INT 2
62993: DIV
62994: ST_TO_ADDR
// if _y < 0 then
62995: LD_VAR 0 7
62999: PUSH
63000: LD_INT 0
63002: LESS
63003: IFFALSE 63020
// _y := _y * - 1 ;
63005: LD_ADDR_VAR 0 7
63009: PUSH
63010: LD_VAR 0 7
63014: PUSH
63015: LD_INT 1
63017: NEG
63018: MUL
63019: ST_TO_ADDR
// result := [ _x , _y ] ;
63020: LD_ADDR_VAR 0 5
63024: PUSH
63025: LD_VAR 0 6
63029: PUSH
63030: LD_VAR 0 7
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: ST_TO_ADDR
// end ;
63039: LD_VAR 0 5
63043: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63044: LD_INT 0
63046: PPUSH
63047: PPUSH
63048: PPUSH
63049: PPUSH
// task := GetTaskList ( unit ) ;
63050: LD_ADDR_VAR 0 7
63054: PUSH
63055: LD_VAR 0 1
63059: PPUSH
63060: CALL_OW 437
63064: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63065: LD_VAR 0 7
63069: NOT
63070: IFFALSE 63089
63072: PUSH
63073: LD_VAR 0 1
63077: PPUSH
63078: LD_VAR 0 2
63082: PPUSH
63083: CALL_OW 308
63087: NOT
63088: AND
63089: IFFALSE 63093
// exit ;
63091: GO 63211
// if IsInArea ( unit , area ) then
63093: LD_VAR 0 1
63097: PPUSH
63098: LD_VAR 0 2
63102: PPUSH
63103: CALL_OW 308
63107: IFFALSE 63125
// begin ComMoveToArea ( unit , goAway ) ;
63109: LD_VAR 0 1
63113: PPUSH
63114: LD_VAR 0 3
63118: PPUSH
63119: CALL_OW 113
// exit ;
63123: GO 63211
// end ; if task [ 1 ] [ 1 ] <> M then
63125: LD_VAR 0 7
63129: PUSH
63130: LD_INT 1
63132: ARRAY
63133: PUSH
63134: LD_INT 1
63136: ARRAY
63137: PUSH
63138: LD_STRING M
63140: NONEQUAL
63141: IFFALSE 63145
// exit ;
63143: GO 63211
// x := task [ 1 ] [ 2 ] ;
63145: LD_ADDR_VAR 0 5
63149: PUSH
63150: LD_VAR 0 7
63154: PUSH
63155: LD_INT 1
63157: ARRAY
63158: PUSH
63159: LD_INT 2
63161: ARRAY
63162: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63163: LD_ADDR_VAR 0 6
63167: PUSH
63168: LD_VAR 0 7
63172: PUSH
63173: LD_INT 1
63175: ARRAY
63176: PUSH
63177: LD_INT 3
63179: ARRAY
63180: ST_TO_ADDR
// if InArea ( x , y , area ) then
63181: LD_VAR 0 5
63185: PPUSH
63186: LD_VAR 0 6
63190: PPUSH
63191: LD_VAR 0 2
63195: PPUSH
63196: CALL_OW 309
63200: IFFALSE 63211
// ComStop ( unit ) ;
63202: LD_VAR 0 1
63206: PPUSH
63207: CALL_OW 141
// end ;
63211: LD_VAR 0 4
63215: RET
// export function Abs ( value ) ; begin
63216: LD_INT 0
63218: PPUSH
// result := value ;
63219: LD_ADDR_VAR 0 2
63223: PUSH
63224: LD_VAR 0 1
63228: ST_TO_ADDR
// if value < 0 then
63229: LD_VAR 0 1
63233: PUSH
63234: LD_INT 0
63236: LESS
63237: IFFALSE 63254
// result := value * - 1 ;
63239: LD_ADDR_VAR 0 2
63243: PUSH
63244: LD_VAR 0 1
63248: PUSH
63249: LD_INT 1
63251: NEG
63252: MUL
63253: ST_TO_ADDR
// end ;
63254: LD_VAR 0 2
63258: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63259: LD_INT 0
63261: PPUSH
63262: PPUSH
63263: PPUSH
63264: PPUSH
63265: PPUSH
63266: PPUSH
63267: PPUSH
63268: PPUSH
// if not unit or not building then
63269: LD_VAR 0 1
63273: NOT
63274: IFTRUE 63283
63276: PUSH
63277: LD_VAR 0 2
63281: NOT
63282: OR
63283: IFFALSE 63287
// exit ;
63285: GO 63515
// x := GetX ( building ) ;
63287: LD_ADDR_VAR 0 4
63291: PUSH
63292: LD_VAR 0 2
63296: PPUSH
63297: CALL_OW 250
63301: ST_TO_ADDR
// y := GetY ( building ) ;
63302: LD_ADDR_VAR 0 6
63306: PUSH
63307: LD_VAR 0 2
63311: PPUSH
63312: CALL_OW 251
63316: ST_TO_ADDR
// d := GetDir ( building ) ;
63317: LD_ADDR_VAR 0 8
63321: PUSH
63322: LD_VAR 0 2
63326: PPUSH
63327: CALL_OW 254
63331: ST_TO_ADDR
// r := 4 ;
63332: LD_ADDR_VAR 0 9
63336: PUSH
63337: LD_INT 4
63339: ST_TO_ADDR
// for i := 1 to 5 do
63340: LD_ADDR_VAR 0 10
63344: PUSH
63345: DOUBLE
63346: LD_INT 1
63348: DEC
63349: ST_TO_ADDR
63350: LD_INT 5
63352: PUSH
63353: FOR_TO
63354: IFFALSE 63513
// begin _x := ShiftX ( x , d , r + i ) ;
63356: LD_ADDR_VAR 0 5
63360: PUSH
63361: LD_VAR 0 4
63365: PPUSH
63366: LD_VAR 0 8
63370: PPUSH
63371: LD_VAR 0 9
63375: PUSH
63376: LD_VAR 0 10
63380: PLUS
63381: PPUSH
63382: CALL_OW 272
63386: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63387: LD_ADDR_VAR 0 7
63391: PUSH
63392: LD_VAR 0 6
63396: PPUSH
63397: LD_VAR 0 8
63401: PPUSH
63402: LD_VAR 0 9
63406: PUSH
63407: LD_VAR 0 10
63411: PLUS
63412: PPUSH
63413: CALL_OW 273
63417: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63418: LD_VAR 0 5
63422: PPUSH
63423: LD_VAR 0 7
63427: PPUSH
63428: CALL_OW 488
63432: IFFALSE 63467
63434: PUSH
63435: LD_VAR 0 5
63439: PPUSH
63440: LD_VAR 0 7
63444: PPUSH
63445: CALL_OW 428
63449: PPUSH
63450: CALL_OW 247
63454: PUSH
63455: LD_INT 3
63457: PUSH
63458: LD_INT 2
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: IN
63465: NOT
63466: AND
63467: IFFALSE 63511
// begin ComMoveXY ( unit , _x , _y ) ;
63469: LD_VAR 0 1
63473: PPUSH
63474: LD_VAR 0 5
63478: PPUSH
63479: LD_VAR 0 7
63483: PPUSH
63484: CALL_OW 111
// result := [ _x , _y ] ;
63488: LD_ADDR_VAR 0 3
63492: PUSH
63493: LD_VAR 0 5
63497: PUSH
63498: LD_VAR 0 7
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: ST_TO_ADDR
// exit ;
63507: POP
63508: POP
63509: GO 63515
// end ; end ;
63511: GO 63353
63513: POP
63514: POP
// end ;
63515: LD_VAR 0 3
63519: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63520: LD_INT 0
63522: PPUSH
63523: PPUSH
63524: PPUSH
// result := 0 ;
63525: LD_ADDR_VAR 0 3
63529: PUSH
63530: LD_INT 0
63532: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63533: LD_VAR 0 1
63537: PUSH
63538: LD_INT 0
63540: LESS
63541: IFTRUE 63553
63543: PUSH
63544: LD_VAR 0 1
63548: PUSH
63549: LD_INT 8
63551: GREATER
63552: OR
63553: IFTRUE 63565
63555: PUSH
63556: LD_VAR 0 2
63560: PUSH
63561: LD_INT 0
63563: LESS
63564: OR
63565: IFTRUE 63577
63567: PUSH
63568: LD_VAR 0 2
63572: PUSH
63573: LD_INT 8
63575: GREATER
63576: OR
63577: IFFALSE 63581
// exit ;
63579: GO 63656
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63581: LD_ADDR_VAR 0 4
63585: PUSH
63586: LD_INT 22
63588: PUSH
63589: LD_VAR 0 2
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PPUSH
63598: CALL_OW 69
63602: PUSH
63603: FOR_IN
63604: IFFALSE 63654
// begin un := UnitShoot ( i ) ;
63606: LD_ADDR_VAR 0 5
63610: PUSH
63611: LD_VAR 0 4
63615: PPUSH
63616: CALL_OW 504
63620: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63621: LD_VAR 0 5
63625: PPUSH
63626: CALL_OW 255
63630: PUSH
63631: LD_VAR 0 1
63635: EQUAL
63636: IFFALSE 63652
// begin result := un ;
63638: LD_ADDR_VAR 0 3
63642: PUSH
63643: LD_VAR 0 5
63647: ST_TO_ADDR
// exit ;
63648: POP
63649: POP
63650: GO 63656
// end ; end ;
63652: GO 63603
63654: POP
63655: POP
// end ;
63656: LD_VAR 0 3
63660: RET
// export function GetCargoBay ( units ) ; begin
63661: LD_INT 0
63663: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63664: LD_ADDR_VAR 0 2
63668: PUSH
63669: LD_VAR 0 1
63673: PPUSH
63674: LD_INT 2
63676: PUSH
63677: LD_INT 34
63679: PUSH
63680: LD_INT 12
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 34
63689: PUSH
63690: LD_INT 51
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PUSH
63697: LD_INT 34
63699: PUSH
63700: LD_INT 32
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: LD_INT 34
63709: PUSH
63710: LD_INT 89
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: LIST
63721: LIST
63722: LIST
63723: PPUSH
63724: CALL_OW 72
63728: ST_TO_ADDR
// end ;
63729: LD_VAR 0 2
63733: RET
// export function Negate ( value ) ; begin
63734: LD_INT 0
63736: PPUSH
// result := not value ;
63737: LD_ADDR_VAR 0 2
63741: PUSH
63742: LD_VAR 0 1
63746: NOT
63747: ST_TO_ADDR
// end ;
63748: LD_VAR 0 2
63752: RET
// export function Inc ( value ) ; begin
63753: LD_INT 0
63755: PPUSH
// result := value + 1 ;
63756: LD_ADDR_VAR 0 2
63760: PUSH
63761: LD_VAR 0 1
63765: PUSH
63766: LD_INT 1
63768: PLUS
63769: ST_TO_ADDR
// end ;
63770: LD_VAR 0 2
63774: RET
// export function Dec ( value ) ; begin
63775: LD_INT 0
63777: PPUSH
// result := value - 1 ;
63778: LD_ADDR_VAR 0 2
63782: PUSH
63783: LD_VAR 0 1
63787: PUSH
63788: LD_INT 1
63790: MINUS
63791: ST_TO_ADDR
// end ;
63792: LD_VAR 0 2
63796: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63797: LD_INT 0
63799: PPUSH
63800: PPUSH
63801: PPUSH
63802: PPUSH
63803: PPUSH
63804: PPUSH
63805: PPUSH
63806: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63807: LD_VAR 0 1
63811: PPUSH
63812: LD_VAR 0 2
63816: PPUSH
63817: CALL_OW 488
63821: NOT
63822: IFTRUE 63841
63824: PUSH
63825: LD_VAR 0 3
63829: PPUSH
63830: LD_VAR 0 4
63834: PPUSH
63835: CALL_OW 488
63839: NOT
63840: OR
63841: IFFALSE 63854
// begin result := - 1 ;
63843: LD_ADDR_VAR 0 5
63847: PUSH
63848: LD_INT 1
63850: NEG
63851: ST_TO_ADDR
// exit ;
63852: GO 64089
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63854: LD_ADDR_VAR 0 12
63858: PUSH
63859: LD_VAR 0 1
63863: PPUSH
63864: LD_VAR 0 2
63868: PPUSH
63869: LD_VAR 0 3
63873: PPUSH
63874: LD_VAR 0 4
63878: PPUSH
63879: CALL 62925 0 4
63883: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63884: LD_ADDR_VAR 0 11
63888: PUSH
63889: LD_VAR 0 1
63893: PPUSH
63894: LD_VAR 0 2
63898: PPUSH
63899: LD_VAR 0 12
63903: PUSH
63904: LD_INT 1
63906: ARRAY
63907: PPUSH
63908: LD_VAR 0 12
63912: PUSH
63913: LD_INT 2
63915: ARRAY
63916: PPUSH
63917: CALL_OW 298
63921: ST_TO_ADDR
// distance := 9999 ;
63922: LD_ADDR_VAR 0 10
63926: PUSH
63927: LD_INT 9999
63929: ST_TO_ADDR
// for i := 0 to 5 do
63930: LD_ADDR_VAR 0 6
63934: PUSH
63935: DOUBLE
63936: LD_INT 0
63938: DEC
63939: ST_TO_ADDR
63940: LD_INT 5
63942: PUSH
63943: FOR_TO
63944: IFFALSE 64087
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63946: LD_ADDR_VAR 0 7
63950: PUSH
63951: LD_VAR 0 1
63955: PPUSH
63956: LD_VAR 0 6
63960: PPUSH
63961: LD_VAR 0 11
63965: PPUSH
63966: CALL_OW 272
63970: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63971: LD_ADDR_VAR 0 8
63975: PUSH
63976: LD_VAR 0 2
63980: PPUSH
63981: LD_VAR 0 6
63985: PPUSH
63986: LD_VAR 0 11
63990: PPUSH
63991: CALL_OW 273
63995: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63996: LD_VAR 0 7
64000: PPUSH
64001: LD_VAR 0 8
64005: PPUSH
64006: CALL_OW 488
64010: NOT
64011: IFFALSE 64015
// continue ;
64013: GO 63943
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64015: LD_ADDR_VAR 0 9
64019: PUSH
64020: LD_VAR 0 12
64024: PUSH
64025: LD_INT 1
64027: ARRAY
64028: PPUSH
64029: LD_VAR 0 12
64033: PUSH
64034: LD_INT 2
64036: ARRAY
64037: PPUSH
64038: LD_VAR 0 7
64042: PPUSH
64043: LD_VAR 0 8
64047: PPUSH
64048: CALL_OW 298
64052: ST_TO_ADDR
// if tmp < distance then
64053: LD_VAR 0 9
64057: PUSH
64058: LD_VAR 0 10
64062: LESS
64063: IFFALSE 64085
// begin result := i ;
64065: LD_ADDR_VAR 0 5
64069: PUSH
64070: LD_VAR 0 6
64074: ST_TO_ADDR
// distance := tmp ;
64075: LD_ADDR_VAR 0 10
64079: PUSH
64080: LD_VAR 0 9
64084: ST_TO_ADDR
// end ; end ;
64085: GO 63943
64087: POP
64088: POP
// end ;
64089: LD_VAR 0 5
64093: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64094: LD_INT 0
64096: PPUSH
64097: PPUSH
// if not driver or not IsInUnit ( driver ) then
64098: LD_VAR 0 1
64102: NOT
64103: IFTRUE 64117
64105: PUSH
64106: LD_VAR 0 1
64110: PPUSH
64111: CALL_OW 310
64115: NOT
64116: OR
64117: IFFALSE 64121
// exit ;
64119: GO 64211
// vehicle := IsInUnit ( driver ) ;
64121: LD_ADDR_VAR 0 3
64125: PUSH
64126: LD_VAR 0 1
64130: PPUSH
64131: CALL_OW 310
64135: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64136: LD_VAR 0 1
64140: PPUSH
64141: LD_STRING \
64143: PUSH
64144: LD_INT 0
64146: PUSH
64147: LD_INT 0
64149: PUSH
64150: LD_INT 0
64152: PUSH
64153: LD_INT 0
64155: PUSH
64156: LD_INT 0
64158: PUSH
64159: LD_INT 0
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: PUSH
64171: LD_STRING E
64173: PUSH
64174: LD_INT 0
64176: PUSH
64177: LD_INT 0
64179: PUSH
64180: LD_VAR 0 3
64184: PUSH
64185: LD_INT 0
64187: PUSH
64188: LD_INT 0
64190: PUSH
64191: LD_INT 0
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PPUSH
64207: CALL_OW 446
// end ;
64211: LD_VAR 0 2
64215: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64216: LD_INT 0
64218: PPUSH
64219: PPUSH
// if not driver or not IsInUnit ( driver ) then
64220: LD_VAR 0 1
64224: NOT
64225: IFTRUE 64239
64227: PUSH
64228: LD_VAR 0 1
64232: PPUSH
64233: CALL_OW 310
64237: NOT
64238: OR
64239: IFFALSE 64243
// exit ;
64241: GO 64333
// vehicle := IsInUnit ( driver ) ;
64243: LD_ADDR_VAR 0 3
64247: PUSH
64248: LD_VAR 0 1
64252: PPUSH
64253: CALL_OW 310
64257: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64258: LD_VAR 0 1
64262: PPUSH
64263: LD_STRING \
64265: PUSH
64266: LD_INT 0
64268: PUSH
64269: LD_INT 0
64271: PUSH
64272: LD_INT 0
64274: PUSH
64275: LD_INT 0
64277: PUSH
64278: LD_INT 0
64280: PUSH
64281: LD_INT 0
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: LIST
64288: LIST
64289: LIST
64290: LIST
64291: LIST
64292: PUSH
64293: LD_STRING E
64295: PUSH
64296: LD_INT 0
64298: PUSH
64299: LD_INT 0
64301: PUSH
64302: LD_VAR 0 3
64306: PUSH
64307: LD_INT 0
64309: PUSH
64310: LD_INT 0
64312: PUSH
64313: LD_INT 0
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: LIST
64320: LIST
64321: LIST
64322: LIST
64323: LIST
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PPUSH
64329: CALL_OW 447
// end ;
64333: LD_VAR 0 2
64337: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
64338: LD_INT 0
64340: PPUSH
64341: PPUSH
64342: PPUSH
// tmp := [ ] ;
64343: LD_ADDR_VAR 0 5
64347: PUSH
64348: EMPTY
64349: ST_TO_ADDR
// for i in units do
64350: LD_ADDR_VAR 0 4
64354: PUSH
64355: LD_VAR 0 1
64359: PUSH
64360: FOR_IN
64361: IFFALSE 64399
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
64363: LD_ADDR_VAR 0 5
64367: PUSH
64368: LD_VAR 0 5
64372: PPUSH
64373: LD_VAR 0 5
64377: PUSH
64378: LD_INT 1
64380: PLUS
64381: PPUSH
64382: LD_VAR 0 4
64386: PPUSH
64387: CALL_OW 256
64391: PPUSH
64392: CALL_OW 2
64396: ST_TO_ADDR
64397: GO 64360
64399: POP
64400: POP
// if not tmp then
64401: LD_VAR 0 5
64405: NOT
64406: IFFALSE 64410
// exit ;
64408: GO 64458
// if asc then
64410: LD_VAR 0 2
64414: IFFALSE 64438
// result := SortListByListAsc ( units , tmp ) else
64416: LD_ADDR_VAR 0 3
64420: PUSH
64421: LD_VAR 0 1
64425: PPUSH
64426: LD_VAR 0 5
64430: PPUSH
64431: CALL_OW 76
64435: ST_TO_ADDR
64436: GO 64458
// result := SortListByListDesc ( units , tmp ) ;
64438: LD_ADDR_VAR 0 3
64442: PUSH
64443: LD_VAR 0 1
64447: PPUSH
64448: LD_VAR 0 5
64452: PPUSH
64453: CALL_OW 77
64457: ST_TO_ADDR
// end ;
64458: LD_VAR 0 3
64462: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64463: LD_INT 0
64465: PPUSH
64466: PPUSH
// task := GetTaskList ( mech ) ;
64467: LD_ADDR_VAR 0 4
64471: PUSH
64472: LD_VAR 0 1
64476: PPUSH
64477: CALL_OW 437
64481: ST_TO_ADDR
// if not task then
64482: LD_VAR 0 4
64486: NOT
64487: IFFALSE 64491
// exit ;
64489: GO 64535
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64491: LD_ADDR_VAR 0 3
64495: PUSH
64496: LD_VAR 0 4
64500: PUSH
64501: LD_INT 1
64503: ARRAY
64504: PUSH
64505: LD_INT 1
64507: ARRAY
64508: PUSH
64509: LD_STRING r
64511: EQUAL
64512: IFFALSE 64534
64514: PUSH
64515: LD_VAR 0 4
64519: PUSH
64520: LD_INT 1
64522: ARRAY
64523: PUSH
64524: LD_INT 4
64526: ARRAY
64527: PUSH
64528: LD_VAR 0 2
64532: EQUAL
64533: AND
64534: ST_TO_ADDR
// end ;
64535: LD_VAR 0 3
64539: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
64540: LD_INT 0
64542: PPUSH
// SetDir ( unit , d ) ;
64543: LD_VAR 0 1
64547: PPUSH
64548: LD_VAR 0 4
64552: PPUSH
64553: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
64557: LD_ADDR_VAR 0 6
64561: PUSH
64562: LD_VAR 0 1
64566: PPUSH
64567: LD_VAR 0 2
64571: PPUSH
64572: LD_VAR 0 3
64576: PPUSH
64577: LD_VAR 0 5
64581: PPUSH
64582: CALL_OW 48
64586: ST_TO_ADDR
// end ;
64587: LD_VAR 0 6
64591: RET
// export function ToNaturalNumber ( number ) ; begin
64592: LD_INT 0
64594: PPUSH
// result := number div 1 ;
64595: LD_ADDR_VAR 0 2
64599: PUSH
64600: LD_VAR 0 1
64604: PUSH
64605: LD_INT 1
64607: DIV
64608: ST_TO_ADDR
// if number < 0 then
64609: LD_VAR 0 1
64613: PUSH
64614: LD_INT 0
64616: LESS
64617: IFFALSE 64627
// result := 0 ;
64619: LD_ADDR_VAR 0 2
64623: PUSH
64624: LD_INT 0
64626: ST_TO_ADDR
// end ;
64627: LD_VAR 0 2
64631: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
64632: LD_INT 0
64634: PPUSH
64635: PPUSH
64636: PPUSH
// if not buildings then
64637: LD_VAR 0 1
64641: NOT
64642: IFFALSE 64646
// exit ;
64644: GO 64761
// tmp := [ ] ;
64646: LD_ADDR_VAR 0 5
64650: PUSH
64651: EMPTY
64652: ST_TO_ADDR
// for b in buildings do
64653: LD_ADDR_VAR 0 4
64657: PUSH
64658: LD_VAR 0 1
64662: PUSH
64663: FOR_IN
64664: IFFALSE 64702
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
64666: LD_ADDR_VAR 0 5
64670: PUSH
64671: LD_VAR 0 5
64675: PPUSH
64676: LD_VAR 0 5
64680: PUSH
64681: LD_INT 1
64683: PLUS
64684: PPUSH
64685: LD_VAR 0 4
64689: PPUSH
64690: CALL_OW 266
64694: PPUSH
64695: CALL_OW 1
64699: ST_TO_ADDR
64700: GO 64663
64702: POP
64703: POP
// if not tmp then
64704: LD_VAR 0 5
64708: NOT
64709: IFFALSE 64713
// exit ;
64711: GO 64761
// if asc then
64713: LD_VAR 0 2
64717: IFFALSE 64741
// result := SortListByListAsc ( buildings , tmp ) else
64719: LD_ADDR_VAR 0 3
64723: PUSH
64724: LD_VAR 0 1
64728: PPUSH
64729: LD_VAR 0 5
64733: PPUSH
64734: CALL_OW 76
64738: ST_TO_ADDR
64739: GO 64761
// result := SortListByListDesc ( buildings , tmp ) ;
64741: LD_ADDR_VAR 0 3
64745: PUSH
64746: LD_VAR 0 1
64750: PPUSH
64751: LD_VAR 0 5
64755: PPUSH
64756: CALL_OW 77
64760: ST_TO_ADDR
// end ;
64761: LD_VAR 0 3
64765: RET
// export function SortByClass ( units , class ) ; var un ; begin
64766: LD_INT 0
64768: PPUSH
64769: PPUSH
// if not units or not class then
64770: LD_VAR 0 1
64774: NOT
64775: IFTRUE 64784
64777: PUSH
64778: LD_VAR 0 2
64782: NOT
64783: OR
64784: IFFALSE 64788
// exit ;
64786: GO 64883
// result := [ ] ;
64788: LD_ADDR_VAR 0 3
64792: PUSH
64793: EMPTY
64794: ST_TO_ADDR
// for un in units do
64795: LD_ADDR_VAR 0 4
64799: PUSH
64800: LD_VAR 0 1
64804: PUSH
64805: FOR_IN
64806: IFFALSE 64881
// if GetClass ( un ) = class then
64808: LD_VAR 0 4
64812: PPUSH
64813: CALL_OW 257
64817: PUSH
64818: LD_VAR 0 2
64822: EQUAL
64823: IFFALSE 64850
// result := Insert ( result , 1 , un ) else
64825: LD_ADDR_VAR 0 3
64829: PUSH
64830: LD_VAR 0 3
64834: PPUSH
64835: LD_INT 1
64837: PPUSH
64838: LD_VAR 0 4
64842: PPUSH
64843: CALL_OW 2
64847: ST_TO_ADDR
64848: GO 64879
// result := Replace ( result , result + 1 , un ) ;
64850: LD_ADDR_VAR 0 3
64854: PUSH
64855: LD_VAR 0 3
64859: PPUSH
64860: LD_VAR 0 3
64864: PUSH
64865: LD_INT 1
64867: PLUS
64868: PPUSH
64869: LD_VAR 0 4
64873: PPUSH
64874: CALL_OW 1
64878: ST_TO_ADDR
64879: GO 64805
64881: POP
64882: POP
// end ;
64883: LD_VAR 0 3
64887: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64888: LD_INT 0
64890: PPUSH
64891: PPUSH
64892: PPUSH
64893: PPUSH
64894: PPUSH
64895: PPUSH
64896: PPUSH
// result := [ ] ;
64897: LD_ADDR_VAR 0 4
64901: PUSH
64902: EMPTY
64903: ST_TO_ADDR
// if x - r < 0 then
64904: LD_VAR 0 1
64908: PUSH
64909: LD_VAR 0 3
64913: MINUS
64914: PUSH
64915: LD_INT 0
64917: LESS
64918: IFFALSE 64930
// min_x := 0 else
64920: LD_ADDR_VAR 0 8
64924: PUSH
64925: LD_INT 0
64927: ST_TO_ADDR
64928: GO 64946
// min_x := x - r ;
64930: LD_ADDR_VAR 0 8
64934: PUSH
64935: LD_VAR 0 1
64939: PUSH
64940: LD_VAR 0 3
64944: MINUS
64945: ST_TO_ADDR
// if y - r < 0 then
64946: LD_VAR 0 2
64950: PUSH
64951: LD_VAR 0 3
64955: MINUS
64956: PUSH
64957: LD_INT 0
64959: LESS
64960: IFFALSE 64972
// min_y := 0 else
64962: LD_ADDR_VAR 0 7
64966: PUSH
64967: LD_INT 0
64969: ST_TO_ADDR
64970: GO 64988
// min_y := y - r ;
64972: LD_ADDR_VAR 0 7
64976: PUSH
64977: LD_VAR 0 2
64981: PUSH
64982: LD_VAR 0 3
64986: MINUS
64987: ST_TO_ADDR
// max_x := x + r ;
64988: LD_ADDR_VAR 0 9
64992: PUSH
64993: LD_VAR 0 1
64997: PUSH
64998: LD_VAR 0 3
65002: PLUS
65003: ST_TO_ADDR
// max_y := y + r ;
65004: LD_ADDR_VAR 0 10
65008: PUSH
65009: LD_VAR 0 2
65013: PUSH
65014: LD_VAR 0 3
65018: PLUS
65019: ST_TO_ADDR
// for _x = min_x to max_x do
65020: LD_ADDR_VAR 0 5
65024: PUSH
65025: DOUBLE
65026: LD_VAR 0 8
65030: DEC
65031: ST_TO_ADDR
65032: LD_VAR 0 9
65036: PUSH
65037: FOR_TO
65038: IFFALSE 65139
// for _y = min_y to max_y do
65040: LD_ADDR_VAR 0 6
65044: PUSH
65045: DOUBLE
65046: LD_VAR 0 7
65050: DEC
65051: ST_TO_ADDR
65052: LD_VAR 0 10
65056: PUSH
65057: FOR_TO
65058: IFFALSE 65135
// begin if not ValidHex ( _x , _y ) then
65060: LD_VAR 0 5
65064: PPUSH
65065: LD_VAR 0 6
65069: PPUSH
65070: CALL_OW 488
65074: NOT
65075: IFFALSE 65079
// continue ;
65077: GO 65057
// if GetResourceTypeXY ( _x , _y ) then
65079: LD_VAR 0 5
65083: PPUSH
65084: LD_VAR 0 6
65088: PPUSH
65089: CALL_OW 283
65093: IFFALSE 65133
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65095: LD_ADDR_VAR 0 4
65099: PUSH
65100: LD_VAR 0 4
65104: PPUSH
65105: LD_VAR 0 4
65109: PUSH
65110: LD_INT 1
65112: PLUS
65113: PPUSH
65114: LD_VAR 0 5
65118: PUSH
65119: LD_VAR 0 6
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PPUSH
65128: CALL_OW 1
65132: ST_TO_ADDR
// end ;
65133: GO 65057
65135: POP
65136: POP
65137: GO 65037
65139: POP
65140: POP
// end ;
65141: LD_VAR 0 4
65145: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65146: LD_INT 0
65148: PPUSH
65149: PPUSH
65150: PPUSH
65151: PPUSH
65152: PPUSH
65153: PPUSH
65154: PPUSH
65155: PPUSH
// if not units then
65156: LD_VAR 0 1
65160: NOT
65161: IFFALSE 65165
// exit ;
65163: GO 65697
// result := UnitFilter ( units , [ f_ok ] ) ;
65165: LD_ADDR_VAR 0 3
65169: PUSH
65170: LD_VAR 0 1
65174: PPUSH
65175: LD_INT 50
65177: PUSH
65178: EMPTY
65179: LIST
65180: PPUSH
65181: CALL_OW 72
65185: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65186: LD_ADDR_VAR 0 8
65190: PUSH
65191: LD_VAR 0 1
65195: PUSH
65196: LD_INT 1
65198: ARRAY
65199: PPUSH
65200: CALL_OW 255
65204: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
65205: LD_ADDR_VAR 0 10
65209: PUSH
65210: LD_INT 29
65212: PUSH
65213: LD_INT 91
65215: PUSH
65216: LD_INT 49
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: LIST
65223: ST_TO_ADDR
// if not result then
65224: LD_VAR 0 3
65228: NOT
65229: IFFALSE 65233
// exit ;
65231: GO 65697
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65233: LD_ADDR_VAR 0 5
65237: PUSH
65238: LD_INT 81
65240: PUSH
65241: LD_VAR 0 8
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: PPUSH
65250: CALL_OW 69
65254: ST_TO_ADDR
// for i in result do
65255: LD_ADDR_VAR 0 4
65259: PUSH
65260: LD_VAR 0 3
65264: PUSH
65265: FOR_IN
65266: IFFALSE 65695
// begin tag := GetTag ( i ) + 1 ;
65268: LD_ADDR_VAR 0 9
65272: PUSH
65273: LD_VAR 0 4
65277: PPUSH
65278: CALL_OW 110
65282: PUSH
65283: LD_INT 1
65285: PLUS
65286: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
65287: LD_ADDR_VAR 0 7
65291: PUSH
65292: LD_VAR 0 4
65296: PPUSH
65297: CALL_OW 250
65301: PPUSH
65302: LD_VAR 0 4
65306: PPUSH
65307: CALL_OW 251
65311: PPUSH
65312: LD_INT 4
65314: PPUSH
65315: CALL 64888 0 3
65319: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
65320: LD_VAR 0 4
65324: PPUSH
65325: CALL_OW 247
65329: PUSH
65330: LD_INT 2
65332: EQUAL
65333: IFFALSE 65345
65335: PUSH
65336: LD_VAR 0 7
65340: PUSH
65341: LD_INT 2
65343: GREATER
65344: AND
65345: IFFALSE 65365
65347: PUSH
65348: LD_VAR 0 4
65352: PPUSH
65353: CALL_OW 264
65357: PUSH
65358: LD_VAR 0 10
65362: IN
65363: NOT
65364: AND
65365: IFFALSE 65404
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65367: LD_VAR 0 4
65371: PPUSH
65372: LD_VAR 0 7
65376: PUSH
65377: LD_INT 1
65379: ARRAY
65380: PUSH
65381: LD_INT 1
65383: ARRAY
65384: PPUSH
65385: LD_VAR 0 7
65389: PUSH
65390: LD_INT 1
65392: ARRAY
65393: PUSH
65394: LD_INT 2
65396: ARRAY
65397: PPUSH
65398: CALL_OW 116
65402: GO 65693
// if path > tag then
65404: LD_VAR 0 2
65408: PUSH
65409: LD_VAR 0 9
65413: GREATER
65414: IFFALSE 65622
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
65416: LD_ADDR_VAR 0 6
65420: PUSH
65421: LD_VAR 0 5
65425: PPUSH
65426: LD_INT 91
65428: PUSH
65429: LD_VAR 0 4
65433: PUSH
65434: LD_INT 8
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: LIST
65441: PPUSH
65442: CALL_OW 72
65446: ST_TO_ADDR
// if nearEnemy then
65447: LD_VAR 0 6
65451: IFFALSE 65520
// begin if GetWeapon ( i ) = ru_time_lapser then
65453: LD_VAR 0 4
65457: PPUSH
65458: CALL_OW 264
65462: PUSH
65463: LD_INT 49
65465: EQUAL
65466: IFFALSE 65494
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65468: LD_VAR 0 4
65472: PPUSH
65473: LD_VAR 0 6
65477: PPUSH
65478: LD_VAR 0 4
65482: PPUSH
65483: CALL_OW 74
65487: PPUSH
65488: CALL_OW 112
65492: GO 65518
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
65494: LD_VAR 0 4
65498: PPUSH
65499: LD_VAR 0 6
65503: PPUSH
65504: LD_VAR 0 4
65508: PPUSH
65509: CALL_OW 74
65513: PPUSH
65514: CALL 66778 0 2
// end else
65518: GO 65620
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
65520: LD_VAR 0 4
65524: PPUSH
65525: LD_VAR 0 2
65529: PUSH
65530: LD_VAR 0 9
65534: ARRAY
65535: PUSH
65536: LD_INT 1
65538: ARRAY
65539: PPUSH
65540: LD_VAR 0 2
65544: PUSH
65545: LD_VAR 0 9
65549: ARRAY
65550: PUSH
65551: LD_INT 2
65553: ARRAY
65554: PPUSH
65555: CALL_OW 297
65559: PUSH
65560: LD_INT 6
65562: GREATER
65563: IFFALSE 65606
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
65565: LD_VAR 0 4
65569: PPUSH
65570: LD_VAR 0 2
65574: PUSH
65575: LD_VAR 0 9
65579: ARRAY
65580: PUSH
65581: LD_INT 1
65583: ARRAY
65584: PPUSH
65585: LD_VAR 0 2
65589: PUSH
65590: LD_VAR 0 9
65594: ARRAY
65595: PUSH
65596: LD_INT 2
65598: ARRAY
65599: PPUSH
65600: CALL_OW 114
65604: GO 65620
// SetTag ( i , tag ) ;
65606: LD_VAR 0 4
65610: PPUSH
65611: LD_VAR 0 9
65615: PPUSH
65616: CALL_OW 109
// end else
65620: GO 65693
// if enemy then
65622: LD_VAR 0 5
65626: IFFALSE 65693
// begin if GetWeapon ( i ) = ru_time_lapser then
65628: LD_VAR 0 4
65632: PPUSH
65633: CALL_OW 264
65637: PUSH
65638: LD_INT 49
65640: EQUAL
65641: IFFALSE 65669
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
65643: LD_VAR 0 4
65647: PPUSH
65648: LD_VAR 0 5
65652: PPUSH
65653: LD_VAR 0 4
65657: PPUSH
65658: CALL_OW 74
65662: PPUSH
65663: CALL_OW 112
65667: GO 65693
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
65669: LD_VAR 0 4
65673: PPUSH
65674: LD_VAR 0 5
65678: PPUSH
65679: LD_VAR 0 4
65683: PPUSH
65684: CALL_OW 74
65688: PPUSH
65689: CALL 66778 0 2
// end ; end ;
65693: GO 65265
65695: POP
65696: POP
// end ;
65697: LD_VAR 0 3
65701: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
65702: LD_INT 0
65704: PPUSH
65705: PPUSH
65706: PPUSH
// if not unit or IsInUnit ( unit ) then
65707: LD_VAR 0 1
65711: NOT
65712: IFTRUE 65725
65714: PUSH
65715: LD_VAR 0 1
65719: PPUSH
65720: CALL_OW 310
65724: OR
65725: IFFALSE 65729
// exit ;
65727: GO 65820
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
65729: LD_ADDR_VAR 0 4
65733: PUSH
65734: LD_VAR 0 1
65738: PPUSH
65739: CALL_OW 250
65743: PPUSH
65744: LD_VAR 0 2
65748: PPUSH
65749: LD_INT 1
65751: PPUSH
65752: CALL_OW 272
65756: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
65757: LD_ADDR_VAR 0 5
65761: PUSH
65762: LD_VAR 0 1
65766: PPUSH
65767: CALL_OW 251
65771: PPUSH
65772: LD_VAR 0 2
65776: PPUSH
65777: LD_INT 1
65779: PPUSH
65780: CALL_OW 273
65784: ST_TO_ADDR
// if ValidHex ( x , y ) then
65785: LD_VAR 0 4
65789: PPUSH
65790: LD_VAR 0 5
65794: PPUSH
65795: CALL_OW 488
65799: IFFALSE 65820
// ComTurnXY ( unit , x , y ) ;
65801: LD_VAR 0 1
65805: PPUSH
65806: LD_VAR 0 4
65810: PPUSH
65811: LD_VAR 0 5
65815: PPUSH
65816: CALL_OW 118
// end ;
65820: LD_VAR 0 3
65824: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65825: LD_INT 0
65827: PPUSH
65828: PPUSH
// result := false ;
65829: LD_ADDR_VAR 0 3
65833: PUSH
65834: LD_INT 0
65836: ST_TO_ADDR
// if not units then
65837: LD_VAR 0 2
65841: NOT
65842: IFFALSE 65846
// exit ;
65844: GO 65891
// for i in units do
65846: LD_ADDR_VAR 0 4
65850: PUSH
65851: LD_VAR 0 2
65855: PUSH
65856: FOR_IN
65857: IFFALSE 65889
// if See ( side , i ) then
65859: LD_VAR 0 1
65863: PPUSH
65864: LD_VAR 0 4
65868: PPUSH
65869: CALL_OW 292
65873: IFFALSE 65887
// begin result := true ;
65875: LD_ADDR_VAR 0 3
65879: PUSH
65880: LD_INT 1
65882: ST_TO_ADDR
// exit ;
65883: POP
65884: POP
65885: GO 65891
// end ;
65887: GO 65856
65889: POP
65890: POP
// end ;
65891: LD_VAR 0 3
65895: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
65896: LD_INT 0
65898: PPUSH
65899: PPUSH
65900: PPUSH
65901: PPUSH
// if not unit or not points then
65902: LD_VAR 0 1
65906: NOT
65907: IFTRUE 65916
65909: PUSH
65910: LD_VAR 0 2
65914: NOT
65915: OR
65916: IFFALSE 65920
// exit ;
65918: GO 66010
// dist := 99999 ;
65920: LD_ADDR_VAR 0 5
65924: PUSH
65925: LD_INT 99999
65927: ST_TO_ADDR
// for i in points do
65928: LD_ADDR_VAR 0 4
65932: PUSH
65933: LD_VAR 0 2
65937: PUSH
65938: FOR_IN
65939: IFFALSE 66008
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
65941: LD_ADDR_VAR 0 6
65945: PUSH
65946: LD_VAR 0 1
65950: PPUSH
65951: LD_VAR 0 4
65955: PUSH
65956: LD_INT 1
65958: ARRAY
65959: PPUSH
65960: LD_VAR 0 4
65964: PUSH
65965: LD_INT 2
65967: ARRAY
65968: PPUSH
65969: CALL_OW 297
65973: ST_TO_ADDR
// if tmpDist < dist then
65974: LD_VAR 0 6
65978: PUSH
65979: LD_VAR 0 5
65983: LESS
65984: IFFALSE 66006
// begin result := i ;
65986: LD_ADDR_VAR 0 3
65990: PUSH
65991: LD_VAR 0 4
65995: ST_TO_ADDR
// dist := tmpDist ;
65996: LD_ADDR_VAR 0 5
66000: PUSH
66001: LD_VAR 0 6
66005: ST_TO_ADDR
// end ; end ;
66006: GO 65938
66008: POP
66009: POP
// end ;
66010: LD_VAR 0 3
66014: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66015: LD_INT 0
66017: PPUSH
// uc_side := side ;
66018: LD_ADDR_OWVAR 20
66022: PUSH
66023: LD_VAR 0 1
66027: ST_TO_ADDR
// uc_nation := 3 ;
66028: LD_ADDR_OWVAR 21
66032: PUSH
66033: LD_INT 3
66035: ST_TO_ADDR
// vc_chassis := 25 ;
66036: LD_ADDR_OWVAR 37
66040: PUSH
66041: LD_INT 25
66043: ST_TO_ADDR
// vc_engine := engine_siberite ;
66044: LD_ADDR_OWVAR 39
66048: PUSH
66049: LD_INT 3
66051: ST_TO_ADDR
// vc_control := control_computer ;
66052: LD_ADDR_OWVAR 38
66056: PUSH
66057: LD_INT 3
66059: ST_TO_ADDR
// vc_weapon := 59 ;
66060: LD_ADDR_OWVAR 40
66064: PUSH
66065: LD_INT 59
66067: ST_TO_ADDR
// result := CreateVehicle ;
66068: LD_ADDR_VAR 0 5
66072: PUSH
66073: CALL_OW 45
66077: ST_TO_ADDR
// SetDir ( result , d ) ;
66078: LD_VAR 0 5
66082: PPUSH
66083: LD_VAR 0 4
66087: PPUSH
66088: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66092: LD_VAR 0 5
66096: PPUSH
66097: LD_VAR 0 2
66101: PPUSH
66102: LD_VAR 0 3
66106: PPUSH
66107: LD_INT 0
66109: PPUSH
66110: CALL_OW 48
// end ;
66114: LD_VAR 0 5
66118: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66119: LD_INT 0
66121: PPUSH
66122: PPUSH
66123: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66124: LD_ADDR_VAR 0 2
66128: PUSH
66129: LD_INT 0
66131: PUSH
66132: LD_INT 0
66134: PUSH
66135: LD_INT 0
66137: PUSH
66138: LD_INT 0
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
66147: LD_VAR 0 1
66151: NOT
66152: IFTRUE 66185
66154: PUSH
66155: LD_VAR 0 1
66159: PPUSH
66160: CALL_OW 264
66164: PUSH
66165: LD_INT 12
66167: PUSH
66168: LD_INT 51
66170: PUSH
66171: LD_INT 32
66173: PUSH
66174: LD_INT 89
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: LIST
66181: LIST
66182: IN
66183: NOT
66184: OR
66185: IFFALSE 66189
// exit ;
66187: GO 66287
// for i := 1 to 3 do
66189: LD_ADDR_VAR 0 3
66193: PUSH
66194: DOUBLE
66195: LD_INT 1
66197: DEC
66198: ST_TO_ADDR
66199: LD_INT 3
66201: PUSH
66202: FOR_TO
66203: IFFALSE 66285
// begin tmp := GetCargo ( cargo , i ) ;
66205: LD_ADDR_VAR 0 4
66209: PUSH
66210: LD_VAR 0 1
66214: PPUSH
66215: LD_VAR 0 3
66219: PPUSH
66220: CALL_OW 289
66224: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
66225: LD_ADDR_VAR 0 2
66229: PUSH
66230: LD_VAR 0 2
66234: PPUSH
66235: LD_VAR 0 3
66239: PPUSH
66240: LD_VAR 0 4
66244: PPUSH
66245: CALL_OW 1
66249: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
66250: LD_ADDR_VAR 0 2
66254: PUSH
66255: LD_VAR 0 2
66259: PPUSH
66260: LD_INT 4
66262: PPUSH
66263: LD_VAR 0 2
66267: PUSH
66268: LD_INT 4
66270: ARRAY
66271: PUSH
66272: LD_VAR 0 4
66276: PLUS
66277: PPUSH
66278: CALL_OW 1
66282: ST_TO_ADDR
// end ;
66283: GO 66202
66285: POP
66286: POP
// end ;
66287: LD_VAR 0 2
66291: RET
// export function Length ( array ) ; begin
66292: LD_INT 0
66294: PPUSH
// result := array + 0 ;
66295: LD_ADDR_VAR 0 2
66299: PUSH
66300: LD_VAR 0 1
66304: PUSH
66305: LD_INT 0
66307: PLUS
66308: ST_TO_ADDR
// end ;
66309: LD_VAR 0 2
66313: RET
// export function PrepareArray ( array ) ; begin
66314: LD_INT 0
66316: PPUSH
// result := array diff 0 ;
66317: LD_ADDR_VAR 0 2
66321: PUSH
66322: LD_VAR 0 1
66326: PUSH
66327: LD_INT 0
66329: DIFF
66330: ST_TO_ADDR
// if not result [ 1 ] then
66331: LD_VAR 0 2
66335: PUSH
66336: LD_INT 1
66338: ARRAY
66339: NOT
66340: IFFALSE 66360
// result := Delete ( result , 1 ) ;
66342: LD_ADDR_VAR 0 2
66346: PUSH
66347: LD_VAR 0 2
66351: PPUSH
66352: LD_INT 1
66354: PPUSH
66355: CALL_OW 3
66359: ST_TO_ADDR
// end ;
66360: LD_VAR 0 2
66364: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
66365: LD_INT 0
66367: PPUSH
66368: PPUSH
66369: PPUSH
66370: PPUSH
// sibRocketRange := 25 ;
66371: LD_ADDR_VAR 0 6
66375: PUSH
66376: LD_INT 25
66378: ST_TO_ADDR
// result := false ;
66379: LD_ADDR_VAR 0 4
66383: PUSH
66384: LD_INT 0
66386: ST_TO_ADDR
// for i := 0 to 5 do
66387: LD_ADDR_VAR 0 5
66391: PUSH
66392: DOUBLE
66393: LD_INT 0
66395: DEC
66396: ST_TO_ADDR
66397: LD_INT 5
66399: PUSH
66400: FOR_TO
66401: IFFALSE 66468
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
66403: LD_VAR 0 1
66407: PPUSH
66408: LD_VAR 0 5
66412: PPUSH
66413: LD_VAR 0 6
66417: PPUSH
66418: CALL_OW 272
66422: PPUSH
66423: LD_VAR 0 2
66427: PPUSH
66428: LD_VAR 0 5
66432: PPUSH
66433: LD_VAR 0 6
66437: PPUSH
66438: CALL_OW 273
66442: PPUSH
66443: LD_VAR 0 3
66447: PPUSH
66448: CALL_OW 309
66452: IFFALSE 66466
// begin result := true ;
66454: LD_ADDR_VAR 0 4
66458: PUSH
66459: LD_INT 1
66461: ST_TO_ADDR
// exit ;
66462: POP
66463: POP
66464: GO 66470
// end ;
66466: GO 66400
66468: POP
66469: POP
// end ;
66470: LD_VAR 0 4
66474: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
66475: LD_INT 0
66477: PPUSH
66478: PPUSH
66479: PPUSH
// if btype = b_depot then
66480: LD_VAR 0 2
66484: PUSH
66485: LD_INT 0
66487: EQUAL
66488: IFFALSE 66500
// begin result := true ;
66490: LD_ADDR_VAR 0 3
66494: PUSH
66495: LD_INT 1
66497: ST_TO_ADDR
// exit ;
66498: GO 66620
// end ; pom := GetBase ( depot ) ;
66500: LD_ADDR_VAR 0 4
66504: PUSH
66505: LD_VAR 0 1
66509: PPUSH
66510: CALL_OW 274
66514: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
66515: LD_ADDR_VAR 0 5
66519: PUSH
66520: LD_VAR 0 2
66524: PPUSH
66525: LD_VAR 0 1
66529: PPUSH
66530: CALL_OW 248
66534: PPUSH
66535: CALL_OW 450
66539: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
66540: LD_ADDR_VAR 0 3
66544: PUSH
66545: LD_VAR 0 4
66549: PPUSH
66550: LD_INT 1
66552: PPUSH
66553: CALL_OW 275
66557: PUSH
66558: LD_VAR 0 5
66562: PUSH
66563: LD_INT 1
66565: ARRAY
66566: GREATEREQUAL
66567: IFFALSE 66593
66569: PUSH
66570: LD_VAR 0 4
66574: PPUSH
66575: LD_INT 2
66577: PPUSH
66578: CALL_OW 275
66582: PUSH
66583: LD_VAR 0 5
66587: PUSH
66588: LD_INT 2
66590: ARRAY
66591: GREATEREQUAL
66592: AND
66593: IFFALSE 66619
66595: PUSH
66596: LD_VAR 0 4
66600: PPUSH
66601: LD_INT 3
66603: PPUSH
66604: CALL_OW 275
66608: PUSH
66609: LD_VAR 0 5
66613: PUSH
66614: LD_INT 3
66616: ARRAY
66617: GREATEREQUAL
66618: AND
66619: ST_TO_ADDR
// end ;
66620: LD_VAR 0 3
66624: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
66625: LD_INT 0
66627: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
66628: LD_VAR 0 1
66632: PPUSH
66633: LD_VAR 0 2
66637: PPUSH
66638: LD_INT 0
66640: PPUSH
66641: LD_INT 0
66643: PPUSH
66644: LD_INT 1
66646: PPUSH
66647: LD_INT 0
66649: PPUSH
66650: CALL_OW 587
// end ;
66654: LD_VAR 0 3
66658: RET
// export function CenterOnNow ( unit ) ; begin
66659: LD_INT 0
66661: PPUSH
// result := IsInUnit ( unit ) ;
66662: LD_ADDR_VAR 0 2
66666: PUSH
66667: LD_VAR 0 1
66671: PPUSH
66672: CALL_OW 310
66676: ST_TO_ADDR
// if not result then
66677: LD_VAR 0 2
66681: NOT
66682: IFFALSE 66694
// result := unit ;
66684: LD_ADDR_VAR 0 2
66688: PUSH
66689: LD_VAR 0 1
66693: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
66694: LD_VAR 0 1
66698: PPUSH
66699: CALL_OW 87
// end ;
66703: LD_VAR 0 2
66707: RET
// export function ComMoveHex ( unit , hex ) ; begin
66708: LD_INT 0
66710: PPUSH
// if not hex then
66711: LD_VAR 0 2
66715: NOT
66716: IFFALSE 66720
// exit ;
66718: GO 66773
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
66720: LD_VAR 0 2
66724: PUSH
66725: LD_INT 1
66727: ARRAY
66728: PPUSH
66729: LD_VAR 0 2
66733: PUSH
66734: LD_INT 2
66736: ARRAY
66737: PPUSH
66738: CALL_OW 428
66742: IFFALSE 66746
// exit ;
66744: GO 66773
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
66746: LD_VAR 0 1
66750: PPUSH
66751: LD_VAR 0 2
66755: PUSH
66756: LD_INT 1
66758: ARRAY
66759: PPUSH
66760: LD_VAR 0 2
66764: PUSH
66765: LD_INT 2
66767: ARRAY
66768: PPUSH
66769: CALL_OW 111
// end ;
66773: LD_VAR 0 3
66777: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
66778: LD_INT 0
66780: PPUSH
66781: PPUSH
66782: PPUSH
// if not unit or not enemy then
66783: LD_VAR 0 1
66787: NOT
66788: IFTRUE 66797
66790: PUSH
66791: LD_VAR 0 2
66795: NOT
66796: OR
66797: IFFALSE 66801
// exit ;
66799: GO 66927
// x := GetX ( enemy ) ;
66801: LD_ADDR_VAR 0 4
66805: PUSH
66806: LD_VAR 0 2
66810: PPUSH
66811: CALL_OW 250
66815: ST_TO_ADDR
// y := GetY ( enemy ) ;
66816: LD_ADDR_VAR 0 5
66820: PUSH
66821: LD_VAR 0 2
66825: PPUSH
66826: CALL_OW 251
66830: ST_TO_ADDR
// if ValidHex ( x , y ) then
66831: LD_VAR 0 4
66835: PPUSH
66836: LD_VAR 0 5
66840: PPUSH
66841: CALL_OW 488
66845: IFFALSE 66927
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
66847: LD_VAR 0 2
66851: PPUSH
66852: CALL_OW 247
66856: PUSH
66857: LD_INT 3
66859: PUSH
66860: LD_INT 2
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: IN
66867: IFTRUE 66890
66869: PUSH
66870: LD_VAR 0 1
66874: PPUSH
66875: CALL_OW 255
66879: PPUSH
66880: LD_VAR 0 2
66884: PPUSH
66885: CALL_OW 292
66889: OR
66890: IFFALSE 66908
// ComAttackUnit ( unit , enemy ) else
66892: LD_VAR 0 1
66896: PPUSH
66897: LD_VAR 0 2
66901: PPUSH
66902: CALL_OW 115
66906: GO 66927
// ComAgressiveMove ( unit , x , y ) ;
66908: LD_VAR 0 1
66912: PPUSH
66913: LD_VAR 0 4
66917: PPUSH
66918: LD_VAR 0 5
66922: PPUSH
66923: CALL_OW 114
// end ;
66927: LD_VAR 0 3
66931: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
66932: LD_INT 0
66934: PPUSH
66935: PPUSH
66936: PPUSH
// list := AreaToList ( area , 0 ) ;
66937: LD_ADDR_VAR 0 5
66941: PUSH
66942: LD_VAR 0 1
66946: PPUSH
66947: LD_INT 0
66949: PPUSH
66950: CALL_OW 517
66954: ST_TO_ADDR
// if not list then
66955: LD_VAR 0 5
66959: NOT
66960: IFFALSE 66964
// exit ;
66962: GO 67094
// if all then
66964: LD_VAR 0 2
66968: IFFALSE 67056
// begin for i := 1 to list [ 1 ] do
66970: LD_ADDR_VAR 0 4
66974: PUSH
66975: DOUBLE
66976: LD_INT 1
66978: DEC
66979: ST_TO_ADDR
66980: LD_VAR 0 5
66984: PUSH
66985: LD_INT 1
66987: ARRAY
66988: PUSH
66989: FOR_TO
66990: IFFALSE 67052
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
66992: LD_ADDR_VAR 0 3
66996: PUSH
66997: LD_VAR 0 3
67001: PPUSH
67002: LD_VAR 0 3
67006: PUSH
67007: LD_INT 1
67009: PLUS
67010: PPUSH
67011: LD_VAR 0 5
67015: PUSH
67016: LD_INT 1
67018: ARRAY
67019: PUSH
67020: LD_VAR 0 4
67024: ARRAY
67025: PUSH
67026: LD_VAR 0 5
67030: PUSH
67031: LD_INT 2
67033: ARRAY
67034: PUSH
67035: LD_VAR 0 4
67039: ARRAY
67040: PUSH
67041: EMPTY
67042: LIST
67043: LIST
67044: PPUSH
67045: CALL_OW 1
67049: ST_TO_ADDR
67050: GO 66989
67052: POP
67053: POP
// exit ;
67054: GO 67094
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
67056: LD_ADDR_VAR 0 3
67060: PUSH
67061: LD_VAR 0 5
67065: PUSH
67066: LD_INT 1
67068: ARRAY
67069: PUSH
67070: LD_INT 1
67072: ARRAY
67073: PUSH
67074: LD_VAR 0 5
67078: PUSH
67079: LD_INT 2
67081: ARRAY
67082: PUSH
67083: LD_INT 1
67085: ARRAY
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PUSH
67091: EMPTY
67092: LIST
67093: ST_TO_ADDR
// end ;
67094: LD_VAR 0 3
67098: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
67099: LD_INT 0
67101: PPUSH
67102: PPUSH
// list := AreaToList ( area , 0 ) ;
67103: LD_ADDR_VAR 0 4
67107: PUSH
67108: LD_VAR 0 1
67112: PPUSH
67113: LD_INT 0
67115: PPUSH
67116: CALL_OW 517
67120: ST_TO_ADDR
// if not list then
67121: LD_VAR 0 4
67125: NOT
67126: IFFALSE 67130
// exit ;
67128: GO 67171
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
67130: LD_ADDR_VAR 0 3
67134: PUSH
67135: LD_VAR 0 4
67139: PUSH
67140: LD_INT 1
67142: ARRAY
67143: PUSH
67144: LD_INT 1
67146: ARRAY
67147: PUSH
67148: LD_VAR 0 4
67152: PUSH
67153: LD_INT 2
67155: ARRAY
67156: PUSH
67157: LD_INT 1
67159: ARRAY
67160: PUSH
67161: LD_VAR 0 2
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: LIST
67170: ST_TO_ADDR
// end ;
67171: LD_VAR 0 3
67175: RET
// export function First ( array ) ; begin
67176: LD_INT 0
67178: PPUSH
// if not array then
67179: LD_VAR 0 1
67183: NOT
67184: IFFALSE 67188
// exit ;
67186: GO 67202
// result := array [ 1 ] ;
67188: LD_ADDR_VAR 0 2
67192: PUSH
67193: LD_VAR 0 1
67197: PUSH
67198: LD_INT 1
67200: ARRAY
67201: ST_TO_ADDR
// end ;
67202: LD_VAR 0 2
67206: RET
// export function Last ( array ) ; begin
67207: LD_INT 0
67209: PPUSH
// if not array then
67210: LD_VAR 0 1
67214: NOT
67215: IFFALSE 67219
// exit ;
67217: GO 67235
// result := array [ array ] ;
67219: LD_ADDR_VAR 0 2
67223: PUSH
67224: LD_VAR 0 1
67228: PUSH
67229: LD_VAR 0 1
67233: ARRAY
67234: ST_TO_ADDR
// end ;
67235: LD_VAR 0 2
67239: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
67240: LD_INT 0
67242: PPUSH
67243: PPUSH
// result := [ ] ;
67244: LD_ADDR_VAR 0 5
67248: PUSH
67249: EMPTY
67250: ST_TO_ADDR
// if not array then
67251: LD_VAR 0 1
67255: NOT
67256: IFFALSE 67260
// exit ;
67258: GO 67372
// for i := 1 to array do
67260: LD_ADDR_VAR 0 6
67264: PUSH
67265: DOUBLE
67266: LD_INT 1
67268: DEC
67269: ST_TO_ADDR
67270: LD_VAR 0 1
67274: PUSH
67275: FOR_TO
67276: IFFALSE 67370
// if array [ i ] [ index ] = value then
67278: LD_VAR 0 1
67282: PUSH
67283: LD_VAR 0 6
67287: ARRAY
67288: PUSH
67289: LD_VAR 0 2
67293: ARRAY
67294: PUSH
67295: LD_VAR 0 3
67299: EQUAL
67300: IFFALSE 67368
// begin if indexColumn then
67302: LD_VAR 0 4
67306: IFFALSE 67342
// result := Join ( result , array [ i ] [ indexColumn ] ) else
67308: LD_ADDR_VAR 0 5
67312: PUSH
67313: LD_VAR 0 5
67317: PPUSH
67318: LD_VAR 0 1
67322: PUSH
67323: LD_VAR 0 6
67327: ARRAY
67328: PUSH
67329: LD_VAR 0 4
67333: ARRAY
67334: PPUSH
67335: CALL 62380 0 2
67339: ST_TO_ADDR
67340: GO 67368
// result := Join ( result , array [ i ] ) ;
67342: LD_ADDR_VAR 0 5
67346: PUSH
67347: LD_VAR 0 5
67351: PPUSH
67352: LD_VAR 0 1
67356: PUSH
67357: LD_VAR 0 6
67361: ARRAY
67362: PPUSH
67363: CALL 62380 0 2
67367: ST_TO_ADDR
// end ;
67368: GO 67275
67370: POP
67371: POP
// end ;
67372: LD_VAR 0 5
67376: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
67377: LD_INT 0
67379: PPUSH
// if not vehicles or not parkingPoint then
67380: LD_VAR 0 1
67384: NOT
67385: IFTRUE 67394
67387: PUSH
67388: LD_VAR 0 2
67392: NOT
67393: OR
67394: IFFALSE 67398
// exit ;
67396: GO 67496
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
67398: LD_ADDR_VAR 0 1
67402: PUSH
67403: LD_VAR 0 1
67407: PPUSH
67408: LD_INT 50
67410: PUSH
67411: EMPTY
67412: LIST
67413: PUSH
67414: LD_INT 3
67416: PUSH
67417: LD_INT 92
67419: PUSH
67420: LD_VAR 0 2
67424: PUSH
67425: LD_INT 1
67427: ARRAY
67428: PUSH
67429: LD_VAR 0 2
67433: PUSH
67434: LD_INT 2
67436: ARRAY
67437: PUSH
67438: LD_INT 8
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: LIST
67445: LIST
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: PPUSH
67455: CALL_OW 72
67459: ST_TO_ADDR
// if not vehicles then
67460: LD_VAR 0 1
67464: NOT
67465: IFFALSE 67469
// exit ;
67467: GO 67496
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
67469: LD_VAR 0 1
67473: PPUSH
67474: LD_VAR 0 2
67478: PUSH
67479: LD_INT 1
67481: ARRAY
67482: PPUSH
67483: LD_VAR 0 2
67487: PUSH
67488: LD_INT 2
67490: ARRAY
67491: PPUSH
67492: CALL_OW 111
// end ;
67496: LD_VAR 0 3
67500: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
67501: LD_INT 0
67503: PPUSH
67504: PPUSH
67505: PPUSH
// if not side or not area then
67506: LD_VAR 0 1
67510: NOT
67511: IFTRUE 67520
67513: PUSH
67514: LD_VAR 0 2
67518: NOT
67519: OR
67520: IFFALSE 67524
// exit ;
67522: GO 67643
// tmp := AreaToList ( area , 0 ) ;
67524: LD_ADDR_VAR 0 5
67528: PUSH
67529: LD_VAR 0 2
67533: PPUSH
67534: LD_INT 0
67536: PPUSH
67537: CALL_OW 517
67541: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
67542: LD_ADDR_VAR 0 4
67546: PUSH
67547: DOUBLE
67548: LD_INT 1
67550: DEC
67551: ST_TO_ADDR
67552: LD_VAR 0 5
67556: PUSH
67557: LD_INT 1
67559: ARRAY
67560: PUSH
67561: FOR_TO
67562: IFFALSE 67641
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
67564: LD_VAR 0 5
67568: PUSH
67569: LD_INT 1
67571: ARRAY
67572: PUSH
67573: LD_VAR 0 4
67577: ARRAY
67578: PPUSH
67579: LD_VAR 0 5
67583: PUSH
67584: LD_INT 2
67586: ARRAY
67587: PUSH
67588: LD_VAR 0 4
67592: ARRAY
67593: PPUSH
67594: CALL_OW 351
67598: IFFALSE 67639
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
67600: LD_VAR 0 5
67604: PUSH
67605: LD_INT 1
67607: ARRAY
67608: PUSH
67609: LD_VAR 0 4
67613: ARRAY
67614: PPUSH
67615: LD_VAR 0 5
67619: PUSH
67620: LD_INT 2
67622: ARRAY
67623: PUSH
67624: LD_VAR 0 4
67628: ARRAY
67629: PPUSH
67630: LD_VAR 0 1
67634: PPUSH
67635: CALL_OW 244
// end ;
67639: GO 67561
67641: POP
67642: POP
// end ;
67643: LD_VAR 0 3
67647: RET
// export function UniqueArray ( array ) ; var i ; begin
67648: LD_INT 0
67650: PPUSH
67651: PPUSH
// result := [ ] ;
67652: LD_ADDR_VAR 0 2
67656: PUSH
67657: EMPTY
67658: ST_TO_ADDR
// if not array then
67659: LD_VAR 0 1
67663: NOT
67664: IFFALSE 67668
// exit ;
67666: GO 67729
// for i := 1 to array do
67668: LD_ADDR_VAR 0 3
67672: PUSH
67673: DOUBLE
67674: LD_INT 1
67676: DEC
67677: ST_TO_ADDR
67678: LD_VAR 0 1
67682: PUSH
67683: FOR_TO
67684: IFFALSE 67727
// if not array [ i ] in result then
67686: LD_VAR 0 1
67690: PUSH
67691: LD_VAR 0 3
67695: ARRAY
67696: PUSH
67697: LD_VAR 0 2
67701: IN
67702: NOT
67703: IFFALSE 67725
// result := Join ( result , i ) ;
67705: LD_ADDR_VAR 0 2
67709: PUSH
67710: LD_VAR 0 2
67714: PPUSH
67715: LD_VAR 0 3
67719: PPUSH
67720: CALL 62380 0 2
67724: ST_TO_ADDR
67725: GO 67683
67727: POP
67728: POP
// end ; end_of_file
67729: LD_VAR 0 2
67733: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeFamine do var i , canWin ;
67734: LD_EXP 48
67738: IFFALSE 67746
67740: PUSH
67741: CALL 67956 0 0
67745: AND
67746: IFFALSE 67754
67748: PUSH
67749: LD_OWVAR 4
67753: AND
67754: IFFALSE 67953
67756: GO 67758
67758: DISABLE
67759: LD_INT 0
67761: PPUSH
67762: PPUSH
// begin canWin := false ;
67763: LD_ADDR_VAR 0 2
67767: PUSH
67768: LD_INT 0
67770: ST_TO_ADDR
// if not HasPower ( your_side ) then
67771: LD_OWVAR 2
67775: PPUSH
67776: CALL 67998 0 1
67780: NOT
67781: IFFALSE 67792
// begin Multiplayer_Loose_Message ;
67783: CALL_OW 521
// enable ( mpLose ) ;
67787: LD_INT 102
67789: ENABLE_MARKED
// end else
67790: GO 67953
// begin canWin := true ;
67792: LD_ADDR_VAR 0 2
67796: PUSH
67797: LD_INT 1
67799: ST_TO_ADDR
// for i := 1 to 8 do
67800: LD_ADDR_VAR 0 1
67804: PUSH
67805: DOUBLE
67806: LD_INT 1
67808: DEC
67809: ST_TO_ADDR
67810: LD_INT 8
67812: PUSH
67813: FOR_TO
67814: IFFALSE 67939
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
67816: LD_EXP 16
67820: PUSH
67821: LD_VAR 0 1
67825: ARRAY
67826: IFFALSE 67839
67828: PUSH
67829: LD_VAR 0 1
67833: PPUSH
67834: CALL_OW 108
67838: AND
67839: IFFALSE 67853
67841: PUSH
67842: LD_VAR 0 1
67846: PUSH
67847: LD_OWVAR 2
67851: NONEQUAL
67852: AND
67853: IFFALSE 67937
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
67855: LD_EXP 17
67859: PUSH
67860: LD_VAR 0 1
67864: ARRAY
67865: NOT
67866: IFTRUE 67914
67868: PUSH
67869: LD_EXP 17
67873: PUSH
67874: LD_VAR 0 1
67878: ARRAY
67879: PUSH
67880: LD_EXP 17
67884: PUSH
67885: LD_OWVAR 2
67889: ARRAY
67890: NONEQUAL
67891: IFFALSE 67913
67893: PUSH
67894: LD_OWVAR 2
67898: PPUSH
67899: LD_VAR 0 1
67903: PPUSH
67904: CALL_OW 81
67908: PUSH
67909: LD_INT 1
67911: NONEQUAL
67912: AND
67913: OR
67914: IFFALSE 67937
// if HasPower ( i ) then
67916: LD_VAR 0 1
67920: PPUSH
67921: CALL 67998 0 1
67925: IFFALSE 67937
// begin canWin := false ;
67927: LD_ADDR_VAR 0 2
67931: PUSH
67932: LD_INT 0
67934: ST_TO_ADDR
// break ;
67935: GO 67939
// end ;
67937: GO 67813
67939: POP
67940: POP
// if canWin then
67941: LD_VAR 0 2
67945: IFFALSE 67952
// enable ( mpWin ) else
67947: LD_INT 101
67949: ENABLE_MARKED
67950: GO 67953
// enable ;
67952: ENABLE
// end ; end ;
67953: PPOPN 2
67955: END
// function CanWinLoose ; begin
67956: LD_INT 0
67958: PPUSH
// result := true ;
67959: LD_ADDR_VAR 0 1
67963: PUSH
67964: LD_INT 1
67966: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
67967: CALL_OW 531
67971: IFFALSE 67983
67973: PUSH
67974: CALL_OW 519
67978: PUSH
67979: LD_INT 1
67981: GREATER
67982: AND
67983: IFFALSE 67993
// result := false ;
67985: LD_ADDR_VAR 0 1
67989: PUSH
67990: LD_INT 0
67992: ST_TO_ADDR
// end ;
67993: LD_VAR 0 1
67997: RET
// function HasPower ( i ) ; begin
67998: LD_INT 0
68000: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
68001: LD_ADDR_VAR 0 2
68005: PUSH
68006: LD_INT 22
68008: PUSH
68009: LD_VAR 0 1
68013: PUSH
68014: EMPTY
68015: LIST
68016: LIST
68017: PUSH
68018: LD_INT 2
68020: PUSH
68021: LD_INT 21
68023: PUSH
68024: LD_INT 1
68026: PUSH
68027: EMPTY
68028: LIST
68029: LIST
68030: PUSH
68031: LD_INT 33
68033: PUSH
68034: LD_INT 3
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: PUSH
68041: LD_INT 33
68043: PUSH
68044: LD_INT 5
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: PUSH
68051: EMPTY
68052: LIST
68053: LIST
68054: LIST
68055: LIST
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: PPUSH
68061: CALL_OW 69
68065: ST_TO_ADDR
// end ;
68066: LD_VAR 0 2
68070: RET
// export function FamineDeposits ( areas , values , type ) ; var i , j , list ; begin
68071: LD_INT 0
68073: PPUSH
68074: PPUSH
68075: PPUSH
68076: PPUSH
// if not areas or not values or not type in [ mat_oil , mat_siberit ] then
68077: LD_VAR 0 1
68081: NOT
68082: IFTRUE 68091
68084: PUSH
68085: LD_VAR 0 2
68089: NOT
68090: OR
68091: IFTRUE 68111
68093: PUSH
68094: LD_VAR 0 3
68098: PUSH
68099: LD_INT 2
68101: PUSH
68102: LD_INT 3
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: IN
68109: NOT
68110: OR
68111: IFFALSE 68115
// exit ;
68113: GO 68365
// for i := 1 to Count ( areas ) do
68115: LD_ADDR_VAR 0 5
68119: PUSH
68120: DOUBLE
68121: LD_INT 1
68123: DEC
68124: ST_TO_ADDR
68125: LD_VAR 0 1
68129: PPUSH
68130: CALL 26404 0 1
68134: PUSH
68135: FOR_TO
68136: IFFALSE 68363
// begin list := AreaToList ( areas [ i ] , 0 ) ;
68138: LD_ADDR_VAR 0 7
68142: PUSH
68143: LD_VAR 0 1
68147: PUSH
68148: LD_VAR 0 5
68152: ARRAY
68153: PPUSH
68154: LD_INT 0
68156: PPUSH
68157: CALL_OW 517
68161: ST_TO_ADDR
// for j := 1 to list [ 1 ] do
68162: LD_ADDR_VAR 0 6
68166: PUSH
68167: DOUBLE
68168: LD_INT 1
68170: DEC
68171: ST_TO_ADDR
68172: LD_VAR 0 7
68176: PUSH
68177: LD_INT 1
68179: ARRAY
68180: PUSH
68181: FOR_TO
68182: IFFALSE 68359
// begin CreateDepositXY ( list [ 1 ] [ j ] , list [ 2 ] [ j ] , type ) ;
68184: LD_VAR 0 7
68188: PUSH
68189: LD_INT 1
68191: ARRAY
68192: PUSH
68193: LD_VAR 0 6
68197: ARRAY
68198: PPUSH
68199: LD_VAR 0 7
68203: PUSH
68204: LD_INT 2
68206: ARRAY
68207: PUSH
68208: LD_VAR 0 6
68212: ARRAY
68213: PPUSH
68214: LD_VAR 0 3
68218: PPUSH
68219: CALL_OW 62
// if type = mat_oil then
68223: LD_VAR 0 3
68227: PUSH
68228: LD_INT 2
68230: EQUAL
68231: IFFALSE 68296
// mpGlobalOilDeposits := Join ( mpGlobalOilDeposits , [ list [ 1 ] [ j ] , list [ 2 ] [ j ] , values [ i ] ] ) else
68233: LD_ADDR_EXP 51
68237: PUSH
68238: LD_EXP 51
68242: PPUSH
68243: LD_VAR 0 7
68247: PUSH
68248: LD_INT 1
68250: ARRAY
68251: PUSH
68252: LD_VAR 0 6
68256: ARRAY
68257: PUSH
68258: LD_VAR 0 7
68262: PUSH
68263: LD_INT 2
68265: ARRAY
68266: PUSH
68267: LD_VAR 0 6
68271: ARRAY
68272: PUSH
68273: LD_VAR 0 2
68277: PUSH
68278: LD_VAR 0 5
68282: ARRAY
68283: PUSH
68284: EMPTY
68285: LIST
68286: LIST
68287: LIST
68288: PPUSH
68289: CALL 62380 0 2
68293: ST_TO_ADDR
68294: GO 68357
// mpGlobalSibDeposits := Join ( mpGlobalSibDeposits , [ list [ 1 ] [ j ] , list [ 2 ] [ j ] , values [ i ] ] ) end ;
68296: LD_ADDR_EXP 52
68300: PUSH
68301: LD_EXP 52
68305: PPUSH
68306: LD_VAR 0 7
68310: PUSH
68311: LD_INT 1
68313: ARRAY
68314: PUSH
68315: LD_VAR 0 6
68319: ARRAY
68320: PUSH
68321: LD_VAR 0 7
68325: PUSH
68326: LD_INT 2
68328: ARRAY
68329: PUSH
68330: LD_VAR 0 6
68334: ARRAY
68335: PUSH
68336: LD_VAR 0 2
68340: PUSH
68341: LD_VAR 0 5
68345: ARRAY
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: LIST
68351: PPUSH
68352: CALL 62380 0 2
68356: ST_TO_ADDR
68357: GO 68181
68359: POP
68360: POP
// end ;
68361: GO 68135
68363: POP
68364: POP
// end ; end_of_file
68365: LD_VAR 0 4
68369: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
68370: PPOPN 6
68372: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
68373: LD_INT 0
68375: PPUSH
// begin if not units then
68376: LD_VAR 0 1
68380: NOT
68381: IFFALSE 68385
// exit ;
68383: GO 68419
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
68385: LD_VAR 0 1
68389: PPUSH
68390: LD_VAR 0 2
68394: PPUSH
68395: LD_VAR 0 3
68399: PPUSH
68400: LD_VAR 0 4
68404: PPUSH
68405: LD_VAR 0 5
68409: PPUSH
68410: LD_VAR 0 6
68414: PPUSH
68415: CALL 24153 0 6
// end ;
68419: PPOPN 7
68421: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
68422: LD_EXP 12
68426: PUSH
68427: LD_INT 4
68429: EQUAL
68430: IFFALSE 68466
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
68432: LD_STRING setGameDifficulty(
68434: PUSH
68435: LD_OWVAR 67
68439: STR
68440: PUSH
68441: LD_STRING )
68443: STR
68444: PPUSH
68445: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
68449: LD_STRING displayDifficulty(
68451: PUSH
68452: LD_OWVAR 67
68456: STR
68457: PUSH
68458: LD_STRING )
68460: STR
68461: PPUSH
68462: CALL_OW 559
// end ; SOS_MapStart ( ) ;
68466: CALL 16277 0 0
// end ;
68470: PPOPN 1
68472: END
