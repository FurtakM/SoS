// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 6650 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 7073 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 0 , 1 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 ] ;
  20: LD_ADDR_EXP 13
  24: PUSH
  25: LD_INT 0
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 0
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 0
  42: PUSH
  43: LD_INT 0
  45: PUSH
  46: LD_INT 0
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 0
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 0
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 1
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 1
  81: PUSH
  82: LD_INT 1
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 1 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ 30 , 50 , 100 ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ 0 , 1 ] , [ 0 , 1 ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] , ] ;
 111: LD_ADDR_EXP 14
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 1
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: LD_INT 30
 409: PUSH
 410: LD_INT 50
 412: PUSH
 413: LD_INT 100
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: LIST
 420: PUSH
 421: EMPTY
 422: PUSH
 423: LD_INT 0
 425: PUSH
 426: LD_INT 1
 428: PUSH
 429: LD_INT 31500
 431: PUSH
 432: LD_INT 52500
 434: PUSH
 435: LD_INT 63000
 437: PUSH
 438: LD_INT 94500
 440: PUSH
 441: LD_INT 126000
 443: PUSH
 444: LD_INT 189000
 446: PUSH
 447: LD_INT 210000
 449: PUSH
 450: LD_INT 252000
 452: PUSH
 453: LD_INT 378000
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: LIST
 460: LIST
 461: LIST
 462: LIST
 463: LIST
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_INT 0
 471: PUSH
 472: LD_INT 1
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: PUSH
 479: LD_INT 0
 481: PUSH
 482: LD_INT 1
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: PUSH
 489: LD_INT 0
 491: PUSH
 492: LD_INT 6300
 494: PUSH
 495: LD_INT 10500
 497: PUSH
 498: LD_INT 16800
 500: PUSH
 501: LD_INT 21000
 503: PUSH
 504: LD_INT 25200
 506: PUSH
 507: LD_INT 31500
 509: PUSH
 510: LD_INT 42000
 512: PUSH
 513: LD_INT 63000
 515: PUSH
 516: EMPTY
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: LIST
 534: LIST
 535: LIST
 536: LIST
 537: LIST
 538: LIST
 539: LIST
 540: LIST
 541: LIST
 542: LIST
 543: LIST
 544: LIST
 545: LIST
 546: LIST
 547: LIST
 548: LIST
 549: ST_TO_ADDR
// mpGameSettings := [ 0 , 15 , 4 , [ 0 , 0 , 0 ] , 3 , 0 , 0 , 0 , 1 , 0 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 30 , 0 , 15 15$0 , 1 , 1 , 0 ] ;
 550: LD_ADDR_EXP 15
 554: PUSH
 555: LD_INT 0
 557: PUSH
 558: LD_INT 15
 560: PUSH
 561: LD_INT 4
 563: PUSH
 564: LD_INT 0
 566: PUSH
 567: LD_INT 0
 569: PUSH
 570: LD_INT 0
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: LIST
 577: PUSH
 578: LD_INT 3
 580: PUSH
 581: LD_INT 0
 583: PUSH
 584: LD_INT 0
 586: PUSH
 587: LD_INT 0
 589: PUSH
 590: LD_INT 1
 592: PUSH
 593: LD_INT 0
 595: PUSH
 596: LD_INT 1
 598: PUSH
 599: LD_INT 700
 601: PUSH
 602: LD_INT 1
 604: PUSH
 605: LD_INT 700
 607: PUSH
 608: LD_INT 3
 610: PUSH
 611: LD_INT 30
 613: PUSH
 614: LD_INT 0
 616: PUSH
 617: LD_INT 31500
 619: PUSH
 620: LD_INT 1
 622: PUSH
 623: LD_INT 1
 625: PUSH
 626: LD_INT 0
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: LIST
 636: LIST
 637: LIST
 638: LIST
 639: LIST
 640: LIST
 641: LIST
 642: LIST
 643: LIST
 644: LIST
 645: LIST
 646: LIST
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: ST_TO_ADDR
// mpGameType := GameTypeFamine ;
 652: LD_ADDR_EXP 12
 656: PUSH
 657: LD_INT 5
 659: ST_TO_ADDR
// your_side := 1 ;
 660: LD_ADDR_OWVAR 2
 664: PUSH
 665: LD_INT 1
 667: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 0 , 0 , 0 , 6 , 7 , 0 ] ;
 668: LD_ADDR_EXP 16
 672: PUSH
 673: LD_INT 1
 675: PUSH
 676: LD_INT 2
 678: PUSH
 679: LD_INT 0
 681: PUSH
 682: LD_INT 0
 684: PUSH
 685: LD_INT 0
 687: PUSH
 688: LD_INT 6
 690: PUSH
 691: LD_INT 7
 693: PUSH
 694: LD_INT 0
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: LIST
 703: LIST
 704: LIST
 705: LIST
 706: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 0 , 0 , 0 , 2 , 2 , 0 ] ;
 707: LD_ADDR_EXP 17
 711: PUSH
 712: LD_INT 1
 714: PUSH
 715: LD_INT 2
 717: PUSH
 718: LD_INT 0
 720: PUSH
 721: LD_INT 0
 723: PUSH
 724: LD_INT 0
 726: PUSH
 727: LD_INT 2
 729: PUSH
 730: LD_INT 2
 732: PUSH
 733: LD_INT 0
 735: PUSH
 736: EMPTY
 737: LIST
 738: LIST
 739: LIST
 740: LIST
 741: LIST
 742: LIST
 743: LIST
 744: LIST
 745: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 0 , 0 , 0 , 3 , 1 , 0 ] ;
 746: LD_ADDR_EXP 18
 750: PUSH
 751: LD_INT 1
 753: PUSH
 754: LD_INT 2
 756: PUSH
 757: LD_INT 0
 759: PUSH
 760: LD_INT 0
 762: PUSH
 763: LD_INT 0
 765: PUSH
 766: LD_INT 3
 768: PUSH
 769: LD_INT 1
 771: PUSH
 772: LD_INT 0
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: LIST
 779: LIST
 780: LIST
 781: LIST
 782: LIST
 783: LIST
 784: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 ] , [ 6 , 7 ] ] ;
 785: LD_ADDR_EXP 19
 789: PUSH
 790: LD_INT 1
 792: PUSH
 793: LD_INT 2
 795: PUSH
 796: EMPTY
 797: LIST
 798: LIST
 799: PUSH
 800: LD_INT 6
 802: PUSH
 803: LD_INT 7
 805: PUSH
 806: EMPTY
 807: LIST
 808: LIST
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: ST_TO_ADDR
// mpTeamGame := false ;
 814: LD_ADDR_EXP 20
 818: PUSH
 819: LD_INT 0
 821: ST_TO_ADDR
// mpMapSize := [ 240 , 270 ] ;
 822: LD_ADDR_EXP 38
 826: PUSH
 827: LD_INT 240
 829: PUSH
 830: LD_INT 270
 832: PUSH
 833: EMPTY
 834: LIST
 835: LIST
 836: ST_TO_ADDR
// end ;
 837: LD_VAR 0 1
 841: RET
// export BuildUpEscape , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , t , all , depositsValue , startPos ; begin
 842: LD_INT 0
 844: PPUSH
 845: PPUSH
 846: PPUSH
 847: PPUSH
 848: PPUSH
 849: PPUSH
// BuildUpEscape := 0 ;
 850: LD_ADDR_EXP 1
 854: PUSH
 855: LD_INT 0
 857: ST_TO_ADDR
// kingCamArea := 0 ;
 858: LD_ADDR_EXP 2
 862: PUSH
 863: LD_INT 0
 865: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 866: LD_ADDR_EXP 33
 870: PUSH
 871: LD_EXP 15
 875: PUSH
 876: LD_INT 2
 878: ARRAY
 879: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 880: LD_ADDR_EXP 34
 884: PUSH
 885: LD_EXP 15
 889: PUSH
 890: LD_INT 3
 892: ARRAY
 893: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 894: LD_ADDR_EXP 36
 898: PUSH
 899: LD_EXP 15
 903: PUSH
 904: LD_INT 5
 906: ARRAY
 907: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
 908: LD_EXP 15
 912: PUSH
 913: LD_INT 9
 915: ARRAY
 916: IFFALSE 1105
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ] ] ] ;
 918: LD_ADDR_EXP 45
 922: PUSH
 923: LD_INT 1
 925: PUSH
 926: LD_INT 1
 928: PUSH
 929: LD_INT 1
 931: PUSH
 932: LD_INT 2
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 1
 943: PUSH
 944: LD_INT 1
 946: PUSH
 947: LD_INT 1
 949: PUSH
 950: LD_INT 3
 952: PUSH
 953: EMPTY
 954: LIST
 955: LIST
 956: LIST
 957: LIST
 958: PUSH
 959: LD_INT 2
 961: PUSH
 962: LD_INT 1
 964: PUSH
 965: LD_INT 1
 967: PUSH
 968: LD_INT 12
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: LIST
 981: PUSH
 982: LD_INT 12
 984: PUSH
 985: LD_INT 1
 987: PUSH
 988: LD_INT 1
 990: PUSH
 991: LD_INT 24
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: PUSH
1000: LD_INT 12
1002: PUSH
1003: LD_INT 1
1005: PUSH
1006: LD_INT 1
1008: PUSH
1009: LD_INT 23
1011: PUSH
1012: EMPTY
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 13
1020: PUSH
1021: LD_INT 1
1023: PUSH
1024: LD_INT 1
1026: PUSH
1027: LD_INT 32
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: LIST
1040: PUSH
1041: LD_INT 21
1043: PUSH
1044: LD_INT 1
1046: PUSH
1047: LD_INT 1
1049: PUSH
1050: LD_INT 42
1052: PUSH
1053: EMPTY
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: PUSH
1059: LD_INT 21
1061: PUSH
1062: LD_INT 1
1064: PUSH
1065: LD_INT 1
1067: PUSH
1068: LD_INT 42
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: LIST
1075: LIST
1076: PUSH
1077: LD_INT 21
1079: PUSH
1080: LD_INT 1
1082: PUSH
1083: LD_INT 1
1085: PUSH
1086: LD_INT 51
1088: PUSH
1089: EMPTY
1090: LIST
1091: LIST
1092: LIST
1093: LIST
1094: PUSH
1095: EMPTY
1096: LIST
1097: LIST
1098: LIST
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: LIST
1104: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1105: LD_ADDR_EXP 25
1109: PUSH
1110: LD_EXP 15
1114: PUSH
1115: LD_INT 11
1117: ARRAY
1118: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1119: LD_ADDR_EXP 35
1123: PUSH
1124: LD_EXP 15
1128: PUSH
1129: LD_INT 13
1131: ARRAY
1132: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1133: LD_ADDR_EXP 42
1137: PUSH
1138: LD_EXP 15
1142: PUSH
1143: LD_INT 14
1145: ARRAY
1146: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1147: LD_ADDR_EXP 39
1151: PUSH
1152: LD_EXP 15
1156: PUSH
1157: LD_INT 15
1159: ARRAY
1160: ST_TO_ADDR
// depositsValue := mpGameSettings [ 16 ] ;
1161: LD_ADDR_VAR 0 6
1165: PUSH
1166: LD_EXP 15
1170: PUSH
1171: LD_INT 16
1173: ARRAY
1174: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1175: LD_ADDR_EXP 37
1179: PUSH
1180: LD_EXP 15
1184: PUSH
1185: LD_INT 18
1187: ARRAY
1188: ST_TO_ADDR
// mpArtifacts := mpGameSettings [ 19 ] ;
1189: LD_ADDR_EXP 54
1193: PUSH
1194: LD_EXP 15
1198: PUSH
1199: LD_INT 19
1201: ARRAY
1202: ST_TO_ADDR
// mpTeleports := mpGameSettings [ 20 ] ;
1203: LD_ADDR_EXP 53
1207: PUSH
1208: LD_EXP 15
1212: PUSH
1213: LD_INT 20
1215: ARRAY
1216: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1217: LD_ADDR_EXP 40
1221: PUSH
1222: LD_INT 7
1224: PUSH
1225: LD_INT 8
1227: PUSH
1228: LD_INT 9
1230: PUSH
1231: LD_INT 10
1233: PUSH
1234: LD_INT 11
1236: PUSH
1237: LD_INT 12
1239: PUSH
1240: LD_INT 13
1242: PUSH
1243: LD_INT 14
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: LIST
1255: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 0 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 1 ) , GetBuildingFromArea ( depotArea4 , 2 ) , GetBuildingFromArea ( depotArea5 , 3 ) , GetBuildingFromArea ( depotArea6 , 4 ) , GetBuildingFromArea ( depotArea7 , 4 ) , GetBuildingFromArea ( depotArea8 , 5 ) ] ;
1256: LD_ADDR_VAR 0 7
1260: PUSH
1261: LD_INT 15
1263: PPUSH
1264: LD_INT 0
1266: PPUSH
1267: CALL 67092 0 2
1271: PUSH
1272: LD_INT 16
1274: PPUSH
1275: LD_INT 1
1277: PPUSH
1278: CALL 67092 0 2
1282: PUSH
1283: LD_INT 17
1285: PPUSH
1286: LD_INT 1
1288: PPUSH
1289: CALL 67092 0 2
1293: PUSH
1294: LD_INT 18
1296: PPUSH
1297: LD_INT 2
1299: PPUSH
1300: CALL 67092 0 2
1304: PUSH
1305: LD_INT 19
1307: PPUSH
1308: LD_INT 3
1310: PPUSH
1311: CALL 67092 0 2
1315: PUSH
1316: LD_INT 20
1318: PPUSH
1319: LD_INT 4
1321: PPUSH
1322: CALL 67092 0 2
1326: PUSH
1327: LD_INT 21
1329: PPUSH
1330: LD_INT 4
1332: PPUSH
1333: CALL 67092 0 2
1337: PUSH
1338: LD_INT 22
1340: PPUSH
1341: LD_INT 5
1343: PPUSH
1344: CALL 67092 0 2
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1359: LD_ADDR_VAR 0 3
1363: PUSH
1364: DOUBLE
1365: LD_INT 1
1367: DEC
1368: ST_TO_ADDR
1369: LD_VAR 0 7
1373: PPUSH
1374: CALL 26397 0 1
1378: PUSH
1379: FOR_TO
1380: IFFALSE 1484
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1382: LD_ADDR_EXP 30
1386: PUSH
1387: LD_EXP 30
1391: PPUSH
1392: LD_VAR 0 3
1396: PPUSH
1397: LD_VAR 0 7
1401: PUSH
1402: LD_VAR 0 3
1406: ARRAY
1407: PUSH
1408: LD_INT 1
1410: ARRAY
1411: PPUSH
1412: LD_VAR 0 7
1416: PUSH
1417: LD_VAR 0 3
1421: ARRAY
1422: PUSH
1423: LD_INT 3
1425: ARRAY
1426: PPUSH
1427: LD_INT 10
1429: PPUSH
1430: CALL_OW 272
1434: PUSH
1435: LD_VAR 0 7
1439: PUSH
1440: LD_VAR 0 3
1444: ARRAY
1445: PUSH
1446: LD_INT 2
1448: ARRAY
1449: PPUSH
1450: LD_VAR 0 7
1454: PUSH
1455: LD_VAR 0 3
1459: ARRAY
1460: PUSH
1461: LD_INT 3
1463: ARRAY
1464: PPUSH
1465: LD_INT 10
1467: PPUSH
1468: CALL_OW 273
1472: PUSH
1473: EMPTY
1474: LIST
1475: LIST
1476: PPUSH
1477: CALL_OW 1
1481: ST_TO_ADDR
1482: GO 1379
1484: POP
1485: POP
// if mpGameType = GameTypeFamine then
1486: LD_EXP 12
1490: PUSH
1491: LD_INT 5
1493: EQUAL
1494: IFFALSE 1604
// begin FamineDeposits ( [ oilBasicArea , oilMediumArea , oilHardArea ] , [ 3 * depositsValue , 5 * depositsValue , 15 * depositsValue ] , mat_oil ) ;
1496: LD_INT 44
1498: PUSH
1499: LD_INT 46
1501: PUSH
1502: LD_INT 48
1504: PUSH
1505: EMPTY
1506: LIST
1507: LIST
1508: LIST
1509: PPUSH
1510: LD_INT 3
1512: PUSH
1513: LD_VAR 0 6
1517: MUL
1518: PUSH
1519: LD_INT 5
1521: PUSH
1522: LD_VAR 0 6
1526: MUL
1527: PUSH
1528: LD_INT 15
1530: PUSH
1531: LD_VAR 0 6
1535: MUL
1536: PUSH
1537: EMPTY
1538: LIST
1539: LIST
1540: LIST
1541: PPUSH
1542: LD_INT 2
1544: PPUSH
1545: CALL 68064 0 3
// FamineDeposits ( [ sibBasicArea , sibMediumArea , sibHardArea ] , [ 1 * depositsValue , 2.5 * depositsValue , 7.5 * depositsValue ] , mat_siberit ) ;
1549: LD_INT 45
1551: PUSH
1552: LD_INT 47
1554: PUSH
1555: LD_INT 49
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: PPUSH
1563: LD_INT 1
1565: PUSH
1566: LD_VAR 0 6
1570: MUL
1571: PUSH
1572: LD_REAL  2.50000000000000E+0000
1575: PUSH
1576: LD_VAR 0 6
1580: MUL
1581: PUSH
1582: LD_REAL  7.50000000000000E+0000
1585: PUSH
1586: LD_VAR 0 6
1590: MUL
1591: PUSH
1592: EMPTY
1593: LIST
1594: LIST
1595: LIST
1596: PPUSH
1597: LD_INT 3
1599: PPUSH
1600: CALL 68064 0 3
// end ; if mpArtifacts then
1604: LD_EXP 54
1608: IFFALSE 1614
// InitArtifact ;
1610: CALL 2882 0 0
// for i := 1 to 8 do
1614: LD_ADDR_VAR 0 3
1618: PUSH
1619: DOUBLE
1620: LD_INT 1
1622: DEC
1623: ST_TO_ADDR
1624: LD_INT 8
1626: PUSH
1627: FOR_TO
1628: IFFALSE 1671
// for t in [ tech_SolEng , tech_SolPow ] do
1630: LD_ADDR_VAR 0 4
1634: PUSH
1635: LD_INT 45
1637: PUSH
1638: LD_INT 35
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: PUSH
1645: FOR_IN
1646: IFFALSE 1667
// SetTech ( t , i , state_disabled ) ;
1648: LD_VAR 0 4
1652: PPUSH
1653: LD_VAR 0 3
1657: PPUSH
1658: LD_INT 0
1660: PPUSH
1661: CALL_OW 322
1665: GO 1645
1667: POP
1668: POP
1669: GO 1627
1671: POP
1672: POP
// end ;
1673: LD_VAR 0 2
1677: RET
// every 0 0$2 marked mpActive do var i , j , x , phase , additionalSpawnPhase , f , tmp , areas , areasPhase , time , normalTime , delayTime , maxTime ;
1678: GO 1680
1680: DISABLE
1681: LD_INT 0
1683: PPUSH
1684: PPUSH
1685: PPUSH
1686: PPUSH
1687: PPUSH
1688: PPUSH
1689: PPUSH
1690: PPUSH
1691: PPUSH
1692: PPUSH
1693: PPUSH
1694: PPUSH
1695: PPUSH
// begin if not mpShipments then
1696: LD_EXP 36
1700: NOT
1701: IFFALSE 1705
// exit ;
1703: GO 2464
// case mpShipments of 1 :
1705: LD_EXP 36
1709: PUSH
1710: LD_INT 1
1712: DOUBLE
1713: EQUAL
1714: IFTRUE 1718
1716: GO 1761
1718: POP
// begin time := 0 0$30 ;
1719: LD_ADDR_VAR 0 10
1723: PUSH
1724: LD_INT 1050
1726: ST_TO_ADDR
// normalTime := 0 0$30 ;
1727: LD_ADDR_VAR 0 11
1731: PUSH
1732: LD_INT 1050
1734: ST_TO_ADDR
// maxTime := 1 1$20 ;
1735: LD_ADDR_VAR 0 13
1739: PUSH
1740: LD_INT 2800
1742: ST_TO_ADDR
// delayTime := 0 0$5 ;
1743: LD_ADDR_VAR 0 12
1747: PUSH
1748: LD_INT 175
1750: ST_TO_ADDR
// additionalSpawnPhase := 10 ;
1751: LD_ADDR_VAR 0 5
1755: PUSH
1756: LD_INT 10
1758: ST_TO_ADDR
// end ; 2 :
1759: GO 1915
1761: LD_INT 2
1763: DOUBLE
1764: EQUAL
1765: IFTRUE 1769
1767: GO 1812
1769: POP
// begin time := 0 0$25 ;
1770: LD_ADDR_VAR 0 10
1774: PUSH
1775: LD_INT 875
1777: ST_TO_ADDR
// normalTime := 0 0$25 ;
1778: LD_ADDR_VAR 0 11
1782: PUSH
1783: LD_INT 875
1785: ST_TO_ADDR
// maxTime := 1 1$10 ;
1786: LD_ADDR_VAR 0 13
1790: PUSH
1791: LD_INT 2450
1793: ST_TO_ADDR
// delayTime := 0 0$4 ;
1794: LD_ADDR_VAR 0 12
1798: PUSH
1799: LD_INT 140
1801: ST_TO_ADDR
// additionalSpawnPhase := 8 ;
1802: LD_ADDR_VAR 0 5
1806: PUSH
1807: LD_INT 8
1809: ST_TO_ADDR
// end ; 3 :
1810: GO 1915
1812: LD_INT 3
1814: DOUBLE
1815: EQUAL
1816: IFTRUE 1820
1818: GO 1863
1820: POP
// begin time := 0 0$20 ;
1821: LD_ADDR_VAR 0 10
1825: PUSH
1826: LD_INT 700
1828: ST_TO_ADDR
// normalTime := 0 0$20 ;
1829: LD_ADDR_VAR 0 11
1833: PUSH
1834: LD_INT 700
1836: ST_TO_ADDR
// maxTime := 1 1$00 ;
1837: LD_ADDR_VAR 0 13
1841: PUSH
1842: LD_INT 2100
1844: ST_TO_ADDR
// delayTime := 0 0$3 ;
1845: LD_ADDR_VAR 0 12
1849: PUSH
1850: LD_INT 105
1852: ST_TO_ADDR
// additionalSpawnPhase := 6 ;
1853: LD_ADDR_VAR 0 5
1857: PUSH
1858: LD_INT 6
1860: ST_TO_ADDR
// end ; 4 :
1861: GO 1915
1863: LD_INT 4
1865: DOUBLE
1866: EQUAL
1867: IFTRUE 1871
1869: GO 1914
1871: POP
// begin time := 0 0$15 ;
1872: LD_ADDR_VAR 0 10
1876: PUSH
1877: LD_INT 525
1879: ST_TO_ADDR
// normalTime := 0 0$15 ;
1880: LD_ADDR_VAR 0 11
1884: PUSH
1885: LD_INT 525
1887: ST_TO_ADDR
// maxTime := 0 0$55 ;
1888: LD_ADDR_VAR 0 13
1892: PUSH
1893: LD_INT 1925
1895: ST_TO_ADDR
// delayTime := 0 0$2 ;
1896: LD_ADDR_VAR 0 12
1900: PUSH
1901: LD_INT 70
1903: ST_TO_ADDR
// additionalSpawnPhase := 5 ;
1904: LD_ADDR_VAR 0 5
1908: PUSH
1909: LD_INT 5
1911: ST_TO_ADDR
// end ; end ;
1912: GO 1915
1914: POP
// areas := [ IslandArea1 , IslandArea2 ] ;
1915: LD_ADDR_VAR 0 8
1919: PUSH
1920: LD_INT 23
1922: PUSH
1923: LD_INT 24
1925: PUSH
1926: EMPTY
1927: LIST
1928: LIST
1929: ST_TO_ADDR
// areasPhase := [ [ ] , [ ] ] ;
1930: LD_ADDR_VAR 0 9
1934: PUSH
1935: EMPTY
1936: PUSH
1937: EMPTY
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: ST_TO_ADDR
// tmp := [ [ CR1Phase1 , CR2Phase1 , CR3Phase1 , CR4Phase1 , CR5Phase1 , CR6Phase1 , CR7Phase1 , CR8Phase1 ] , [ CR1Phase2 , CR2Phase2 , CR3Phase2 , CR4Phase2 , CR5Phase2 , CR6Phase2 , CR7Phase2 , CR8Phase2 ] ] ;
1943: LD_ADDR_VAR 0 7
1947: PUSH
1948: LD_INT 28
1950: PUSH
1951: LD_INT 29
1953: PUSH
1954: LD_INT 30
1956: PUSH
1957: LD_INT 31
1959: PUSH
1960: LD_INT 32
1962: PUSH
1963: LD_INT 33
1965: PUSH
1966: LD_INT 34
1968: PUSH
1969: LD_INT 35
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: PUSH
1982: LD_INT 36
1984: PUSH
1985: LD_INT 37
1987: PUSH
1988: LD_INT 38
1990: PUSH
1991: LD_INT 39
1993: PUSH
1994: LD_INT 40
1996: PUSH
1997: LD_INT 41
1999: PUSH
2000: LD_INT 42
2002: PUSH
2003: LD_INT 43
2005: PUSH
2006: EMPTY
2007: LIST
2008: LIST
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: LIST
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: ST_TO_ADDR
// for i := 1 to 8 do
2020: LD_ADDR_VAR 0 1
2024: PUSH
2025: DOUBLE
2026: LD_INT 1
2028: DEC
2029: ST_TO_ADDR
2030: LD_INT 8
2032: PUSH
2033: FOR_TO
2034: IFFALSE 2147
// begin if not mpSidePositions [ i ] then
2036: LD_EXP 16
2040: PUSH
2041: LD_VAR 0 1
2045: ARRAY
2046: NOT
2047: IFFALSE 2051
// continue ;
2049: GO 2033
// for j := 1 to 2 do
2051: LD_ADDR_VAR 0 2
2055: PUSH
2056: DOUBLE
2057: LD_INT 1
2059: DEC
2060: ST_TO_ADDR
2061: LD_INT 2
2063: PUSH
2064: FOR_TO
2065: IFFALSE 2143
// areasPhase := Replace ( areasPhase , j , Replace ( areasPhase [ j ] , areasPhase [ j ] + 1 , tmp [ j ] [ mpSidePositions [ i ] ] ) ) ;
2067: LD_ADDR_VAR 0 9
2071: PUSH
2072: LD_VAR 0 9
2076: PPUSH
2077: LD_VAR 0 2
2081: PPUSH
2082: LD_VAR 0 9
2086: PUSH
2087: LD_VAR 0 2
2091: ARRAY
2092: PPUSH
2093: LD_VAR 0 9
2097: PUSH
2098: LD_VAR 0 2
2102: ARRAY
2103: PUSH
2104: LD_INT 1
2106: PLUS
2107: PPUSH
2108: LD_VAR 0 7
2112: PUSH
2113: LD_VAR 0 2
2117: ARRAY
2118: PUSH
2119: LD_EXP 16
2123: PUSH
2124: LD_VAR 0 1
2128: ARRAY
2129: ARRAY
2130: PPUSH
2131: CALL_OW 1
2135: PPUSH
2136: CALL_OW 1
2140: ST_TO_ADDR
2141: GO 2064
2143: POP
2144: POP
// end ;
2145: GO 2033
2147: POP
2148: POP
// x := 1 ;
2149: LD_ADDR_VAR 0 3
2153: PUSH
2154: LD_INT 1
2156: ST_TO_ADDR
// phase := 1 ;
2157: LD_ADDR_VAR 0 4
2161: PUSH
2162: LD_INT 1
2164: ST_TO_ADDR
// repeat wait ( time ) ;
2165: LD_VAR 0 10
2169: PPUSH
2170: CALL_OW 67
// x := Inc ( x ) ;
2174: LD_ADDR_VAR 0 3
2178: PUSH
2179: LD_VAR 0 3
2183: PPUSH
2184: CALL 63746 0 1
2188: ST_TO_ADDR
// f := Inc ( f ) ;
2189: LD_ADDR_VAR 0 6
2193: PUSH
2194: LD_VAR 0 6
2198: PPUSH
2199: CALL 63746 0 1
2203: ST_TO_ADDR
// if x > 5 then
2204: LD_VAR 0 3
2208: PUSH
2209: LD_INT 5
2211: GREATER
2212: IFFALSE 2222
// x := 1 ;
2214: LD_ADDR_VAR 0 3
2218: PUSH
2219: LD_INT 1
2221: ST_TO_ADDR
// if f mod 20 = 0 then
2222: LD_VAR 0 6
2226: PUSH
2227: LD_INT 20
2229: MOD
2230: PUSH
2231: LD_INT 0
2233: EQUAL
2234: IFFALSE 2251
// phase := Inc ( phase ) ;
2236: LD_ADDR_VAR 0 4
2240: PUSH
2241: LD_VAR 0 4
2245: PPUSH
2246: CALL 63746 0 1
2250: ST_TO_ADDR
// if f mod additionalSpawnPhase = 0 then
2251: LD_VAR 0 6
2255: PUSH
2256: LD_VAR 0 5
2260: MOD
2261: PUSH
2262: LD_INT 0
2264: EQUAL
2265: IFFALSE 2282
// CreateCratesArea ( x , worldCratesArea , true ) ;
2267: LD_VAR 0 3
2271: PPUSH
2272: LD_INT 61
2274: PPUSH
2275: LD_INT 1
2277: PPUSH
2278: CALL_OW 55
// if phase > 2 then
2282: LD_VAR 0 4
2286: PUSH
2287: LD_INT 2
2289: GREATER
2290: IFFALSE 2300
// phase := 1 ;
2292: LD_ADDR_VAR 0 4
2296: PUSH
2297: LD_INT 1
2299: ST_TO_ADDR
// for i in areas do
2300: LD_ADDR_VAR 0 1
2304: PUSH
2305: LD_VAR 0 8
2309: PUSH
2310: FOR_IN
2311: IFFALSE 2362
// begin if GetResourceArea ( i , mat_cans ) < 15 and phase = 2 then
2313: LD_VAR 0 1
2317: PPUSH
2318: LD_INT 1
2320: PPUSH
2321: CALL_OW 287
2325: PUSH
2326: LD_INT 15
2328: LESS
2329: IFFALSE 2341
2331: PUSH
2332: LD_VAR 0 4
2336: PUSH
2337: LD_INT 2
2339: EQUAL
2340: AND
2341: IFFALSE 2360
// begin CreateCratesArea ( x , i , true ) ;
2343: LD_VAR 0 3
2347: PPUSH
2348: LD_VAR 0 1
2352: PPUSH
2353: LD_INT 1
2355: PPUSH
2356: CALL_OW 55
// end ; end ;
2360: GO 2310
2362: POP
2363: POP
// for i in areasPhase [ phase ] do
2364: LD_ADDR_VAR 0 1
2368: PUSH
2369: LD_VAR 0 9
2373: PUSH
2374: LD_VAR 0 4
2378: ARRAY
2379: PUSH
2380: FOR_IN
2381: IFFALSE 2420
// begin if GetResourceArea ( i , mat_cans ) < 25 then
2383: LD_VAR 0 1
2387: PPUSH
2388: LD_INT 1
2390: PPUSH
2391: CALL_OW 287
2395: PUSH
2396: LD_INT 25
2398: LESS
2399: IFFALSE 2418
// begin CreateCratesArea ( x , i , true ) ;
2401: LD_VAR 0 3
2405: PPUSH
2406: LD_VAR 0 1
2410: PPUSH
2411: LD_INT 1
2413: PPUSH
2414: CALL_OW 55
// end ; end ;
2418: GO 2380
2420: POP
2421: POP
// time := time + delayTime ;
2422: LD_ADDR_VAR 0 10
2426: PUSH
2427: LD_VAR 0 10
2431: PUSH
2432: LD_VAR 0 12
2436: PLUS
2437: ST_TO_ADDR
// if time > maxTime then
2438: LD_VAR 0 10
2442: PUSH
2443: LD_VAR 0 13
2447: GREATER
2448: IFFALSE 2460
// time := normalTime ;
2450: LD_ADDR_VAR 0 10
2454: PUSH
2455: LD_VAR 0 11
2459: ST_TO_ADDR
// until false ;
2460: LD_INT 0
2462: IFFALSE 2165
// end ;
2464: PPOPN 13
2466: END
// every 0 0$2 trigger mpTeleports do var i , tmp ;
2467: LD_EXP 53
2471: IFFALSE 2665
2473: GO 2475
2475: DISABLE
2476: LD_INT 0
2478: PPUSH
2479: PPUSH
// begin enable ;
2480: ENABLE
// tmp := [ [ T1TeleportArea , T4TeleportExitArea ] , [ T2TeleportArea , T3TeleportExitArea ] , [ T3TeleportArea , T2TeleportExitArea ] , [ T4TeleportArea , T1TeleportExitArea ] , [ T5TeleportArea , T6TeleportExitArea ] , [ T6TeleportArea , T5TeleportExitArea ] , [ T7TeleportArea , IslandArea1 ] , [ T8TeleportArea , IslandArea1 ] , [ T9TeleportArea , IslandArea1 ] , [ T10TeleportArea , IslandArea1 ] ] ;
2481: LD_ADDR_VAR 0 2
2485: PUSH
2486: LD_INT 1
2488: PUSH
2489: LD_INT 53
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: PUSH
2496: LD_INT 2
2498: PUSH
2499: LD_INT 52
2501: PUSH
2502: EMPTY
2503: LIST
2504: LIST
2505: PUSH
2506: LD_INT 3
2508: PUSH
2509: LD_INT 51
2511: PUSH
2512: EMPTY
2513: LIST
2514: LIST
2515: PUSH
2516: LD_INT 4
2518: PUSH
2519: LD_INT 50
2521: PUSH
2522: EMPTY
2523: LIST
2524: LIST
2525: PUSH
2526: LD_INT 5
2528: PUSH
2529: LD_INT 55
2531: PUSH
2532: EMPTY
2533: LIST
2534: LIST
2535: PUSH
2536: LD_INT 6
2538: PUSH
2539: LD_INT 54
2541: PUSH
2542: EMPTY
2543: LIST
2544: LIST
2545: PUSH
2546: LD_INT 57
2548: PUSH
2549: LD_INT 23
2551: PUSH
2552: EMPTY
2553: LIST
2554: LIST
2555: PUSH
2556: LD_INT 58
2558: PUSH
2559: LD_INT 23
2561: PUSH
2562: EMPTY
2563: LIST
2564: LIST
2565: PUSH
2566: LD_INT 59
2568: PUSH
2569: LD_INT 23
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PUSH
2576: LD_INT 60
2578: PUSH
2579: LD_INT 23
2581: PUSH
2582: EMPTY
2583: LIST
2584: LIST
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: LIST
2593: LIST
2594: LIST
2595: LIST
2596: LIST
2597: ST_TO_ADDR
// for i in tmp do
2598: LD_ADDR_VAR 0 1
2602: PUSH
2603: LD_VAR 0 2
2607: PUSH
2608: FOR_IN
2609: IFFALSE 2663
// CheckBuildUpArea ( i [ 1 ] , i [ 2 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
2611: LD_VAR 0 1
2615: PUSH
2616: LD_INT 1
2618: ARRAY
2619: PPUSH
2620: LD_VAR 0 1
2624: PUSH
2625: LD_INT 2
2627: ARRAY
2628: PPUSH
2629: LD_INT 2
2631: PUSH
2632: LD_INT 21
2634: PUSH
2635: LD_INT 1
2637: PUSH
2638: EMPTY
2639: LIST
2640: LIST
2641: PUSH
2642: LD_INT 21
2644: PUSH
2645: LD_INT 2
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: LIST
2656: PPUSH
2657: CALL_OW 513
2661: GO 2608
2663: POP
2664: POP
// end ; end_of_file
2665: PPOPN 2
2667: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2668: LD_VAR 0 1
2672: PPUSH
2673: CALL 17699 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2677: LD_VAR 0 1
2681: PPUSH
2682: CALL 12198 0 1
// end ;
2686: PPOPN 1
2688: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2689: LD_VAR 0 1
2693: PPUSH
2694: CALL 17716 0 1
// end ;
2698: PPOPN 1
2700: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2701: LD_VAR 0 1
2705: PPUSH
2706: CALL 13251 0 1
2710: PPOPN 1
2712: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2713: LD_VAR 0 1
2717: PPUSH
2718: LD_VAR 0 2
2722: PPUSH
2723: CALL 17757 0 2
2727: PPOPN 2
2729: END
// on VehicleConstruction_ApeConsumed ( factory , un ) do Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ;
2730: LD_VAR 0 1
2734: PPUSH
2735: LD_VAR 0 2
2739: PPUSH
2740: CALL 13004 0 2
2744: PPOPN 2
2746: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2747: LD_VAR 0 1
2751: PPUSH
2752: LD_VAR 0 2
2756: PPUSH
2757: LD_VAR 0 3
2761: PPUSH
2762: CALL 13304 0 3
2766: PPOPN 3
2768: END
// on OilExtracted ( building , side , base , amount ) do Multiplayer_OilExtracted ( building , side , base , amount ) ;
2769: LD_VAR 0 1
2773: PPUSH
2774: LD_VAR 0 2
2778: PPUSH
2779: LD_VAR 0 3
2783: PPUSH
2784: LD_VAR 0 4
2788: PPUSH
2789: CALL 13476 0 4
2793: PPOPN 4
2795: END
// on SibExtracted ( building , side , base , amount ) do Multiplayer_SibExtracted ( building , side , base , amount ) ;
2796: LD_VAR 0 1
2800: PPUSH
2801: LD_VAR 0 2
2805: PPUSH
2806: LD_VAR 0 3
2810: PPUSH
2811: LD_VAR 0 4
2815: PPUSH
2816: CALL 13732 0 4
2820: PPOPN 4
2822: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
2823: LD_VAR 0 1
2827: PPUSH
2828: LD_VAR 0 2
2832: PPUSH
2833: LD_VAR 0 3
2837: PPUSH
2838: LD_VAR 0 4
2842: PPUSH
2843: LD_VAR 0 5
2847: PPUSH
2848: CALL 13988 0 5
2852: PPOPN 5
2854: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
2855: LD_VAR 0 1
2859: PPUSH
2860: LD_VAR 0 2
2864: PPUSH
2865: LD_VAR 0 3
2869: PPUSH
2870: LD_VAR 0 4
2874: PPUSH
2875: CALL 14091 0 4
2879: PPOPN 4
2881: END
// export artifactsPos , artifactsRecharge , artifactsSibCost , artifactsResearched , artifactsReady ; export artifactsResDifficulty , artifactsResProgress , artifactsButtons , artifactsLabsWorking ; export function InitArtifact ; var i ; begin
2882: LD_INT 0
2884: PPUSH
2885: PPUSH
// for i := 1 to 8 do
2886: LD_ADDR_VAR 0 2
2890: PUSH
2891: DOUBLE
2892: LD_INT 1
2894: DEC
2895: ST_TO_ADDR
2896: LD_INT 8
2898: PUSH
2899: FOR_TO
2900: IFFALSE 2916
// SetArtifactRes ( i , true ) ;
2902: LD_VAR 0 2
2906: PPUSH
2907: LD_INT 1
2909: PPUSH
2910: CALL_OW 467
2914: GO 2899
2916: POP
2917: POP
// CreateResourcesArea ( mat_artifact , 3 , ArtifactArea1 , false ) ;
2918: LD_INT 4
2920: PPUSH
2921: LD_INT 3
2923: PPUSH
2924: LD_INT 25
2926: PPUSH
2927: LD_INT 0
2929: PPUSH
2930: CALL_OW 59
// CreateResourcesArea ( mat_artifact , 4 , ArtifactArea2 , false ) ;
2934: LD_INT 4
2936: PPUSH
2937: LD_INT 4
2939: PPUSH
2940: LD_INT 26
2942: PPUSH
2943: LD_INT 0
2945: PPUSH
2946: CALL_OW 59
// CreateResourcesArea ( mat_artifact , 5 , ArtifactArea3 , false ) ;
2950: LD_INT 4
2952: PPUSH
2953: LD_INT 5
2955: PPUSH
2956: LD_INT 27
2958: PPUSH
2959: LD_INT 0
2961: PPUSH
2962: CALL_OW 59
// artifactsPos := [ [ ] , [ ] , [ ] ] ;
2966: LD_ADDR_EXP 3
2970: PUSH
2971: EMPTY
2972: PUSH
2973: EMPTY
2974: PUSH
2975: EMPTY
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: LIST
2981: ST_TO_ADDR
// artifactsRecharge := [ 0 0$30 , 1 1$20 , 5 5$00 ] ;
2982: LD_ADDR_EXP 4
2986: PUSH
2987: LD_INT 1050
2989: PUSH
2990: LD_INT 2800
2992: PUSH
2993: LD_INT 10500
2995: PUSH
2996: EMPTY
2997: LIST
2998: LIST
2999: LIST
3000: ST_TO_ADDR
// artifactsSibCost := [ 10 , 35 , 100 ] ;
3001: LD_ADDR_EXP 5
3005: PUSH
3006: LD_INT 10
3008: PUSH
3009: LD_INT 35
3011: PUSH
3012: LD_INT 100
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: LIST
3019: ST_TO_ADDR
// artifactsResDifficulty := [ 300 , 500 , 800 ] ;
3020: LD_ADDR_EXP 8
3024: PUSH
3025: LD_INT 300
3027: PUSH
3028: LD_INT 500
3030: PUSH
3031: LD_INT 800
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: LIST
3038: ST_TO_ADDR
// artifactsLabsWorking := [ [ ] , [ ] , [ ] ] ;
3039: LD_ADDR_EXP 11
3043: PUSH
3044: EMPTY
3045: PUSH
3046: EMPTY
3047: PUSH
3048: EMPTY
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: LIST
3054: ST_TO_ADDR
// artifactsResearched := [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] ;
3055: LD_ADDR_EXP 6
3059: PUSH
3060: LD_INT 0
3062: PUSH
3063: LD_INT 0
3065: PUSH
3066: LD_INT 0
3068: PUSH
3069: EMPTY
3070: LIST
3071: LIST
3072: LIST
3073: PUSH
3074: LD_INT 0
3076: PUSH
3077: LD_INT 0
3079: PUSH
3080: LD_INT 0
3082: PUSH
3083: EMPTY
3084: LIST
3085: LIST
3086: LIST
3087: PUSH
3088: LD_INT 0
3090: PUSH
3091: LD_INT 0
3093: PUSH
3094: LD_INT 0
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: LIST
3101: PUSH
3102: LD_INT 0
3104: PUSH
3105: LD_INT 0
3107: PUSH
3108: LD_INT 0
3110: PUSH
3111: EMPTY
3112: LIST
3113: LIST
3114: LIST
3115: PUSH
3116: LD_INT 0
3118: PUSH
3119: LD_INT 0
3121: PUSH
3122: LD_INT 0
3124: PUSH
3125: EMPTY
3126: LIST
3127: LIST
3128: LIST
3129: PUSH
3130: LD_INT 0
3132: PUSH
3133: LD_INT 0
3135: PUSH
3136: LD_INT 0
3138: PUSH
3139: EMPTY
3140: LIST
3141: LIST
3142: LIST
3143: PUSH
3144: LD_INT 0
3146: PUSH
3147: LD_INT 0
3149: PUSH
3150: LD_INT 0
3152: PUSH
3153: EMPTY
3154: LIST
3155: LIST
3156: LIST
3157: PUSH
3158: LD_INT 0
3160: PUSH
3161: LD_INT 0
3163: PUSH
3164: LD_INT 0
3166: PUSH
3167: EMPTY
3168: LIST
3169: LIST
3170: LIST
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: LIST
3176: LIST
3177: LIST
3178: LIST
3179: LIST
3180: LIST
3181: ST_TO_ADDR
// artifactsResProgress := [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] ;
3182: LD_ADDR_EXP 9
3186: PUSH
3187: LD_INT 0
3189: PUSH
3190: LD_INT 0
3192: PUSH
3193: LD_INT 0
3195: PUSH
3196: EMPTY
3197: LIST
3198: LIST
3199: LIST
3200: PUSH
3201: LD_INT 0
3203: PUSH
3204: LD_INT 0
3206: PUSH
3207: LD_INT 0
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: LIST
3214: PUSH
3215: LD_INT 0
3217: PUSH
3218: LD_INT 0
3220: PUSH
3221: LD_INT 0
3223: PUSH
3224: EMPTY
3225: LIST
3226: LIST
3227: LIST
3228: PUSH
3229: LD_INT 0
3231: PUSH
3232: LD_INT 0
3234: PUSH
3235: LD_INT 0
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: LIST
3242: PUSH
3243: LD_INT 0
3245: PUSH
3246: LD_INT 0
3248: PUSH
3249: LD_INT 0
3251: PUSH
3252: EMPTY
3253: LIST
3254: LIST
3255: LIST
3256: PUSH
3257: LD_INT 0
3259: PUSH
3260: LD_INT 0
3262: PUSH
3263: LD_INT 0
3265: PUSH
3266: EMPTY
3267: LIST
3268: LIST
3269: LIST
3270: PUSH
3271: LD_INT 0
3273: PUSH
3274: LD_INT 0
3276: PUSH
3277: LD_INT 0
3279: PUSH
3280: EMPTY
3281: LIST
3282: LIST
3283: LIST
3284: PUSH
3285: LD_INT 0
3287: PUSH
3288: LD_INT 0
3290: PUSH
3291: LD_INT 0
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: LIST
3298: PUSH
3299: EMPTY
3300: LIST
3301: LIST
3302: LIST
3303: LIST
3304: LIST
3305: LIST
3306: LIST
3307: LIST
3308: ST_TO_ADDR
// artifactsReady := [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] ;
3309: LD_ADDR_EXP 7
3313: PUSH
3314: LD_INT 0
3316: PUSH
3317: LD_INT 0
3319: PUSH
3320: LD_INT 0
3322: PUSH
3323: EMPTY
3324: LIST
3325: LIST
3326: LIST
3327: PUSH
3328: LD_INT 0
3330: PUSH
3331: LD_INT 0
3333: PUSH
3334: LD_INT 0
3336: PUSH
3337: EMPTY
3338: LIST
3339: LIST
3340: LIST
3341: PUSH
3342: LD_INT 0
3344: PUSH
3345: LD_INT 0
3347: PUSH
3348: LD_INT 0
3350: PUSH
3351: EMPTY
3352: LIST
3353: LIST
3354: LIST
3355: PUSH
3356: LD_INT 0
3358: PUSH
3359: LD_INT 0
3361: PUSH
3362: LD_INT 0
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: LIST
3369: PUSH
3370: LD_INT 0
3372: PUSH
3373: LD_INT 0
3375: PUSH
3376: LD_INT 0
3378: PUSH
3379: EMPTY
3380: LIST
3381: LIST
3382: LIST
3383: PUSH
3384: LD_INT 0
3386: PUSH
3387: LD_INT 0
3389: PUSH
3390: LD_INT 0
3392: PUSH
3393: EMPTY
3394: LIST
3395: LIST
3396: LIST
3397: PUSH
3398: LD_INT 0
3400: PUSH
3401: LD_INT 0
3403: PUSH
3404: LD_INT 0
3406: PUSH
3407: EMPTY
3408: LIST
3409: LIST
3410: LIST
3411: PUSH
3412: LD_INT 0
3414: PUSH
3415: LD_INT 0
3417: PUSH
3418: LD_INT 0
3420: PUSH
3421: EMPTY
3422: LIST
3423: LIST
3424: LIST
3425: PUSH
3426: EMPTY
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: LIST
3435: ST_TO_ADDR
// artifactsButtons := [ [ art_use_eye , art_place , art_exp_left ] , [ art_use_sibexplosion , art_unit , art_exp_mid ] , [ art_use_atom , art_place , art_exp_right ] ] ;
3436: LD_ADDR_EXP 10
3440: PUSH
3441: LD_INT 4
3443: PUSH
3444: LD_INT 3
3446: PUSH
3447: LD_INT 1
3449: PUSH
3450: EMPTY
3451: LIST
3452: LIST
3453: LIST
3454: PUSH
3455: LD_INT 5
3457: PUSH
3458: LD_INT 4
3460: PUSH
3461: LD_INT 2
3463: PUSH
3464: EMPTY
3465: LIST
3466: LIST
3467: LIST
3468: PUSH
3469: LD_INT 7
3471: PUSH
3472: LD_INT 3
3474: PUSH
3475: LD_INT 3
3477: PUSH
3478: EMPTY
3479: LIST
3480: LIST
3481: LIST
3482: PUSH
3483: EMPTY
3484: LIST
3485: LIST
3486: LIST
3487: ST_TO_ADDR
// end ;
3488: LD_VAR 0 1
3492: RET
// function TeleportArtefact ( number , area ) ; var i , hex , tmp , cargo ; begin
3493: LD_INT 0
3495: PPUSH
3496: PPUSH
3497: PPUSH
3498: PPUSH
3499: PPUSH
// if not number in [ 3 , 4 , 5 ] then
3500: LD_VAR 0 1
3504: PUSH
3505: LD_INT 3
3507: PUSH
3508: LD_INT 4
3510: PUSH
3511: LD_INT 5
3513: PUSH
3514: EMPTY
3515: LIST
3516: LIST
3517: LIST
3518: IN
3519: NOT
3520: IFFALSE 3524
// exit ;
3522: GO 3938
// hex := FindArtifact ( number ) ;
3524: LD_ADDR_VAR 0 5
3528: PUSH
3529: LD_VAR 0 1
3533: PPUSH
3534: CALL_OW 469
3538: ST_TO_ADDR
// if hex then
3539: LD_VAR 0 5
3543: IFFALSE 3814
// begin if InArea ( hex [ 1 ] , hex [ 2 ] , area ) then
3545: LD_VAR 0 5
3549: PUSH
3550: LD_INT 1
3552: ARRAY
3553: PPUSH
3554: LD_VAR 0 5
3558: PUSH
3559: LD_INT 2
3561: ARRAY
3562: PPUSH
3563: LD_VAR 0 2
3567: PPUSH
3568: CALL_OW 309
3572: IFFALSE 3576
// exit ;
3574: GO 3938
// if artifactsLabsWorking [ number - 2 ] then
3576: LD_EXP 11
3580: PUSH
3581: LD_VAR 0 1
3585: PUSH
3586: LD_INT 2
3588: MINUS
3589: ARRAY
3590: IFFALSE 3695
// begin for i in artifactsLabsWorking [ number - 2 ] do
3592: LD_ADDR_VAR 0 4
3596: PUSH
3597: LD_EXP 11
3601: PUSH
3602: LD_VAR 0 1
3606: PUSH
3607: LD_INT 2
3609: MINUS
3610: ARRAY
3611: PUSH
3612: FOR_IN
3613: IFFALSE 3667
// begin SetArtifactUse ( GetSide ( i ) , artifactsButtons [ number - 2 ] [ 3 ] , art_no , i ) ;
3615: LD_VAR 0 4
3619: PPUSH
3620: CALL_OW 255
3624: PPUSH
3625: LD_EXP 10
3629: PUSH
3630: LD_VAR 0 1
3634: PUSH
3635: LD_INT 2
3637: MINUS
3638: ARRAY
3639: PUSH
3640: LD_INT 3
3642: ARRAY
3643: PPUSH
3644: LD_INT 0
3646: PPUSH
3647: LD_VAR 0 4
3651: PPUSH
3652: CALL_OW 468
// ComCancel ( i ) ;
3656: LD_VAR 0 4
3660: PPUSH
3661: CALL_OW 127
// end ;
3665: GO 3612
3667: POP
3668: POP
// artifactsLabsWorking := Replace ( artifactsLabsWorking , number - 2 , [ ] ) ;
3669: LD_ADDR_EXP 11
3673: PUSH
3674: LD_EXP 11
3678: PPUSH
3679: LD_VAR 0 1
3683: PUSH
3684: LD_INT 2
3686: MINUS
3687: PPUSH
3688: EMPTY
3689: PPUSH
3690: CALL_OW 1
3694: ST_TO_ADDR
// end ; tmp := FilterUnitsInArea ( area , [ f_placed ] ) ;
3695: LD_ADDR_VAR 0 6
3699: PUSH
3700: LD_VAR 0 2
3704: PPUSH
3705: LD_INT 52
3707: PUSH
3708: EMPTY
3709: LIST
3710: PPUSH
3711: CALL_OW 70
3715: ST_TO_ADDR
// if tmp then
3716: LD_VAR 0 6
3720: IFFALSE 3748
// for i in tmp do
3722: LD_ADDR_VAR 0 4
3726: PUSH
3727: LD_VAR 0 6
3731: PUSH
3732: FOR_IN
3733: IFFALSE 3746
// DestroyUnit ( i ) ;
3735: LD_VAR 0 4
3739: PPUSH
3740: CALL_OW 65
3744: GO 3732
3746: POP
3747: POP
// MoveAreaXY ( artifactTeleportArea , hex [ 1 ] , hex [ 2 ] ) ;
3748: LD_INT 56
3750: PPUSH
3751: LD_VAR 0 5
3755: PUSH
3756: LD_INT 1
3758: ARRAY
3759: PPUSH
3760: LD_VAR 0 5
3764: PUSH
3765: LD_INT 2
3767: ARRAY
3768: PPUSH
3769: CALL_OW 425
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
3773: LD_VAR 0 5
3777: PUSH
3778: LD_INT 1
3780: ARRAY
3781: PPUSH
3782: LD_VAR 0 5
3786: PUSH
3787: LD_INT 2
3789: ARRAY
3790: PPUSH
3791: CALL_OW 494
// wait ( 30 ) ;
3795: LD_INT 30
3797: PPUSH
3798: CALL_OW 67
// EraseResourceArea ( artifactTeleportArea , mat_artefact ) ;
3802: LD_INT 56
3804: PPUSH
3805: LD_INT 4
3807: PPUSH
3808: CALL_OW 286
// end else
3812: GO 3918
// begin cargo := FilterAllUnits ( [ [ f_tag , number ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
3814: LD_ADDR_VAR 0 7
3818: PUSH
3819: LD_INT 120
3821: PUSH
3822: LD_VAR 0 1
3826: PUSH
3827: EMPTY
3828: LIST
3829: LIST
3830: PUSH
3831: LD_INT 2
3833: PUSH
3834: LD_INT 34
3836: PUSH
3837: LD_INT 12
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: PUSH
3844: LD_INT 34
3846: PUSH
3847: LD_INT 32
3849: PUSH
3850: EMPTY
3851: LIST
3852: LIST
3853: PUSH
3854: LD_INT 34
3856: PUSH
3857: LD_INT 51
3859: PUSH
3860: EMPTY
3861: LIST
3862: LIST
3863: PUSH
3864: LD_INT 34
3866: PUSH
3867: LD_INT 89
3869: PUSH
3870: EMPTY
3871: LIST
3872: LIST
3873: PUSH
3874: EMPTY
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: PUSH
3881: EMPTY
3882: LIST
3883: LIST
3884: PPUSH
3885: CALL_OW 69
3889: ST_TO_ADDR
// if not cargo then
3890: LD_VAR 0 7
3894: NOT
3895: IFFALSE 3899
// exit ;
3897: GO 3938
// SetCargo ( cargo [ 1 ] , mat_artifact , 0 ) ;
3899: LD_VAR 0 7
3903: PUSH
3904: LD_INT 1
3906: ARRAY
3907: PPUSH
3908: LD_INT 4
3910: PPUSH
3911: LD_INT 0
3913: PPUSH
3914: CALL_OW 290
// end ; CreateResourcesArea ( mat_artifact , number , area , false ) ;
3918: LD_INT 4
3920: PPUSH
3921: LD_VAR 0 1
3925: PPUSH
3926: LD_VAR 0 2
3930: PPUSH
3931: LD_INT 0
3933: PPUSH
3934: CALL_OW 59
// end ;
3938: LD_VAR 0 3
3942: RET
// every 8 8$30 trigger mpArtifacts do
3943: LD_EXP 54
3947: IFFALSE 3963
3949: GO 3951
3951: DISABLE
// begin enable ;
3952: ENABLE
// TeleportArtefact ( 3 , ArtifactArea1 ) ;
3953: LD_INT 3
3955: PPUSH
3956: LD_INT 25
3958: PPUSH
3959: CALL 3493 0 2
// end ;
3963: END
// every 6 6$10 trigger mpArtifacts do
3964: LD_EXP 54
3968: IFFALSE 3984
3970: GO 3972
3972: DISABLE
// begin enable ;
3973: ENABLE
// TeleportArtefact ( 4 , ArtifactArea2 ) ;
3974: LD_INT 4
3976: PPUSH
3977: LD_INT 26
3979: PPUSH
3980: CALL 3493 0 2
// end ;
3984: END
// every 4 4$10 trigger mpArtifacts do
3985: LD_EXP 54
3989: IFFALSE 4005
3991: GO 3993
3993: DISABLE
// begin enable ;
3994: ENABLE
// TeleportArtefact ( 5 , ArtifactArea3 ) ;
3995: LD_INT 5
3997: PPUSH
3998: LD_INT 27
4000: PPUSH
4001: CALL 3493 0 2
// end ;
4005: END
// every 0 0$1 trigger mpArtifacts do var i , pos , j , side , labs , nearestLab ;
4006: LD_EXP 54
4010: IFFALSE 4910
4012: GO 4014
4014: DISABLE
4015: LD_INT 0
4017: PPUSH
4018: PPUSH
4019: PPUSH
4020: PPUSH
4021: PPUSH
4022: PPUSH
// begin enable ;
4023: ENABLE
// for i := 1 to 3 do
4024: LD_ADDR_VAR 0 1
4028: PUSH
4029: DOUBLE
4030: LD_INT 1
4032: DEC
4033: ST_TO_ADDR
4034: LD_INT 3
4036: PUSH
4037: FOR_TO
4038: IFFALSE 4908
// begin pos := FindArtifact ( i + 2 ) ;
4040: LD_ADDR_VAR 0 2
4044: PUSH
4045: LD_VAR 0 1
4049: PUSH
4050: LD_INT 2
4052: PLUS
4053: PPUSH
4054: CALL_OW 469
4058: ST_TO_ADDR
// artifactsPos := Replace ( artifactsPos , i , pos ) ;
4059: LD_ADDR_EXP 3
4063: PUSH
4064: LD_EXP 3
4068: PPUSH
4069: LD_VAR 0 1
4073: PPUSH
4074: LD_VAR 0 2
4078: PPUSH
4079: CALL_OW 1
4083: ST_TO_ADDR
// labs := FilterAllUnits ( [ f_lab , b_lab_siberium ] ) ;
4084: LD_ADDR_VAR 0 5
4088: PUSH
4089: LD_INT 63
4091: PUSH
4092: LD_INT 11
4094: PUSH
4095: EMPTY
4096: LIST
4097: LIST
4098: PPUSH
4099: CALL_OW 69
4103: ST_TO_ADDR
// if not labs then
4104: LD_VAR 0 5
4108: NOT
4109: IFFALSE 4115
// exit ;
4111: POP
4112: POP
4113: GO 4910
// if pos then
4115: LD_VAR 0 2
4119: IFFALSE 4746
// begin if not labs then
4121: LD_VAR 0 5
4125: NOT
4126: IFFALSE 4130
// continue ;
4128: GO 4037
// nearestLab := NearestUnitToXY ( labs , artifactsPos [ i ] [ 1 ] , artifactsPos [ i ] [ 2 ] ) ;
4130: LD_ADDR_VAR 0 6
4134: PUSH
4135: LD_VAR 0 5
4139: PPUSH
4140: LD_EXP 3
4144: PUSH
4145: LD_VAR 0 1
4149: ARRAY
4150: PUSH
4151: LD_INT 1
4153: ARRAY
4154: PPUSH
4155: LD_EXP 3
4159: PUSH
4160: LD_VAR 0 1
4164: ARRAY
4165: PUSH
4166: LD_INT 2
4168: ARRAY
4169: PPUSH
4170: CALL_OW 73
4174: ST_TO_ADDR
// if not nearestLab then
4175: LD_VAR 0 6
4179: NOT
4180: IFFALSE 4280
// begin for j in labs do
4182: LD_ADDR_VAR 0 3
4186: PUSH
4187: LD_VAR 0 5
4191: PUSH
4192: FOR_IN
4193: IFFALSE 4276
// begin side := GetSide ( j ) ;
4195: LD_ADDR_VAR 0 4
4199: PUSH
4200: LD_VAR 0 3
4204: PPUSH
4205: CALL_OW 255
4209: ST_TO_ADDR
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_no , j ) ;
4210: LD_VAR 0 4
4214: PPUSH
4215: LD_EXP 10
4219: PUSH
4220: LD_VAR 0 1
4224: ARRAY
4225: PUSH
4226: LD_INT 3
4228: ARRAY
4229: PPUSH
4230: LD_INT 0
4232: PPUSH
4233: LD_VAR 0 3
4237: PPUSH
4238: CALL_OW 468
// SetArtifactUse ( side , artifactsButtons [ i ] [ 1 ] , art_no , j ) ;
4242: LD_VAR 0 4
4246: PPUSH
4247: LD_EXP 10
4251: PUSH
4252: LD_VAR 0 1
4256: ARRAY
4257: PUSH
4258: LD_INT 1
4260: ARRAY
4261: PPUSH
4262: LD_INT 0
4264: PPUSH
4265: LD_VAR 0 3
4269: PPUSH
4270: CALL_OW 468
// end ;
4274: GO 4192
4276: POP
4277: POP
// continue ;
4278: GO 4037
// end ; if GetDistUnitXY ( nearestLab , artifactsPos [ i ] [ 1 ] , artifactsPos [ i ] [ 2 ] ) < 8 and GetTech ( tech_artifact , GetSide ( nearestLab ) ) = state_researched then
4280: LD_VAR 0 6
4284: PPUSH
4285: LD_EXP 3
4289: PUSH
4290: LD_VAR 0 1
4294: ARRAY
4295: PUSH
4296: LD_INT 1
4298: ARRAY
4299: PPUSH
4300: LD_EXP 3
4304: PUSH
4305: LD_VAR 0 1
4309: ARRAY
4310: PUSH
4311: LD_INT 2
4313: ARRAY
4314: PPUSH
4315: CALL_OW 297
4319: PUSH
4320: LD_INT 8
4322: LESS
4323: IFFALSE 4348
4325: PUSH
4326: LD_INT 24
4328: PPUSH
4329: LD_VAR 0 6
4333: PPUSH
4334: CALL_OW 255
4338: PPUSH
4339: CALL_OW 321
4343: PUSH
4344: LD_INT 2
4346: EQUAL
4347: AND
4348: IFFALSE 4582
// begin side := GetSide ( nearestLab ) ;
4350: LD_ADDR_VAR 0 4
4354: PUSH
4355: LD_VAR 0 6
4359: PPUSH
4360: CALL_OW 255
4364: ST_TO_ADDR
// if not artifactsResearched [ side ] [ i ] then
4365: LD_EXP 6
4369: PUSH
4370: LD_VAR 0 4
4374: ARRAY
4375: PUSH
4376: LD_VAR 0 1
4380: ARRAY
4381: NOT
4382: IFFALSE 4467
// begin if BuildingStatus ( nearestLab ) = bs_idle then
4384: LD_VAR 0 6
4388: PPUSH
4389: CALL_OW 461
4393: PUSH
4394: LD_INT 2
4396: EQUAL
4397: IFFALSE 4433
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_instant , nearestLab ) else
4399: LD_VAR 0 4
4403: PPUSH
4404: LD_EXP 10
4408: PUSH
4409: LD_VAR 0 1
4413: ARRAY
4414: PUSH
4415: LD_INT 3
4417: ARRAY
4418: PPUSH
4419: LD_INT 2
4421: PPUSH
4422: LD_VAR 0 6
4426: PPUSH
4427: CALL_OW 468
4431: GO 4465
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_gray , nearestLab ) ;
4433: LD_VAR 0 4
4437: PPUSH
4438: LD_EXP 10
4442: PUSH
4443: LD_VAR 0 1
4447: ARRAY
4448: PUSH
4449: LD_INT 3
4451: ARRAY
4452: PPUSH
4453: LD_INT 1
4455: PPUSH
4456: LD_VAR 0 6
4460: PPUSH
4461: CALL_OW 468
// end else
4465: GO 4580
// begin if BuildingStatus ( nearestLab ) = bs_idle and artifactsReady [ side ] [ i ] then
4467: LD_VAR 0 6
4471: PPUSH
4472: CALL_OW 461
4476: PUSH
4477: LD_INT 2
4479: EQUAL
4480: IFFALSE 4500
4482: PUSH
4483: LD_EXP 7
4487: PUSH
4488: LD_VAR 0 4
4492: ARRAY
4493: PUSH
4494: LD_VAR 0 1
4498: ARRAY
4499: AND
4500: IFFALSE 4548
// SetArtifactUse ( side , artifactsButtons [ i ] [ 1 ] , artifactsButtons [ i ] [ 2 ] , nearestLab ) else
4502: LD_VAR 0 4
4506: PPUSH
4507: LD_EXP 10
4511: PUSH
4512: LD_VAR 0 1
4516: ARRAY
4517: PUSH
4518: LD_INT 1
4520: ARRAY
4521: PPUSH
4522: LD_EXP 10
4526: PUSH
4527: LD_VAR 0 1
4531: ARRAY
4532: PUSH
4533: LD_INT 2
4535: ARRAY
4536: PPUSH
4537: LD_VAR 0 6
4541: PPUSH
4542: CALL_OW 468
4546: GO 4580
// SetArtifactUse ( side , artifactsButtons [ i ] [ 1 ] , art_gray , nearestLab ) end ;
4548: LD_VAR 0 4
4552: PPUSH
4553: LD_EXP 10
4557: PUSH
4558: LD_VAR 0 1
4562: ARRAY
4563: PUSH
4564: LD_INT 1
4566: ARRAY
4567: PPUSH
4568: LD_INT 1
4570: PPUSH
4571: LD_VAR 0 6
4575: PPUSH
4576: CALL_OW 468
// end else
4580: GO 4744
// begin for j in labs do
4582: LD_ADDR_VAR 0 3
4586: PUSH
4587: LD_VAR 0 5
4591: PUSH
4592: FOR_IN
4593: IFFALSE 4742
// begin if GetDistUnitXY ( j , artifactsPos [ i ] [ 1 ] , artifactsPos [ i ] [ 2 ] ) >= 8 then
4595: LD_VAR 0 3
4599: PPUSH
4600: LD_EXP 3
4604: PUSH
4605: LD_VAR 0 1
4609: ARRAY
4610: PUSH
4611: LD_INT 1
4613: ARRAY
4614: PPUSH
4615: LD_EXP 3
4619: PUSH
4620: LD_VAR 0 1
4624: ARRAY
4625: PUSH
4626: LD_INT 2
4628: ARRAY
4629: PPUSH
4630: CALL_OW 297
4634: PUSH
4635: LD_INT 8
4637: GREATEREQUAL
4638: IFFALSE 4740
// begin side := GetSide ( j ) ;
4640: LD_ADDR_VAR 0 4
4644: PUSH
4645: LD_VAR 0 3
4649: PPUSH
4650: CALL_OW 255
4654: ST_TO_ADDR
// if not artifactsResearched [ side ] [ i ] then
4655: LD_EXP 6
4659: PUSH
4660: LD_VAR 0 4
4664: ARRAY
4665: PUSH
4666: LD_VAR 0 1
4670: ARRAY
4671: NOT
4672: IFFALSE 4708
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_no , j ) else
4674: LD_VAR 0 4
4678: PPUSH
4679: LD_EXP 10
4683: PUSH
4684: LD_VAR 0 1
4688: ARRAY
4689: PUSH
4690: LD_INT 3
4692: ARRAY
4693: PPUSH
4694: LD_INT 0
4696: PPUSH
4697: LD_VAR 0 3
4701: PPUSH
4702: CALL_OW 468
4706: GO 4740
// SetArtifactUse ( side , artifactsButtons [ i ] [ 1 ] , art_no , j ) ;
4708: LD_VAR 0 4
4712: PPUSH
4713: LD_EXP 10
4717: PUSH
4718: LD_VAR 0 1
4722: ARRAY
4723: PUSH
4724: LD_INT 1
4726: ARRAY
4727: PPUSH
4728: LD_INT 0
4730: PPUSH
4731: LD_VAR 0 3
4735: PPUSH
4736: CALL_OW 468
// end ; end ;
4740: GO 4592
4742: POP
4743: POP
// end ; end else
4744: GO 4906
// begin for j in labs do
4746: LD_ADDR_VAR 0 3
4750: PUSH
4751: LD_VAR 0 5
4755: PUSH
4756: FOR_IN
4757: IFFALSE 4904
// begin side := GetSide ( j ) ;
4759: LD_ADDR_VAR 0 4
4763: PUSH
4764: LD_VAR 0 3
4768: PPUSH
4769: CALL_OW 255
4773: ST_TO_ADDR
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_no , j ) ;
4774: LD_VAR 0 4
4778: PPUSH
4779: LD_EXP 10
4783: PUSH
4784: LD_VAR 0 1
4788: ARRAY
4789: PUSH
4790: LD_INT 3
4792: ARRAY
4793: PPUSH
4794: LD_INT 0
4796: PPUSH
4797: LD_VAR 0 3
4801: PPUSH
4802: CALL_OW 468
// SetArtifactUse ( side , artifactsButtons [ i ] [ 1 ] , art_no , j ) ;
4806: LD_VAR 0 4
4810: PPUSH
4811: LD_EXP 10
4815: PUSH
4816: LD_VAR 0 1
4820: ARRAY
4821: PUSH
4822: LD_INT 1
4824: ARRAY
4825: PPUSH
4826: LD_INT 0
4828: PPUSH
4829: LD_VAR 0 3
4833: PPUSH
4834: CALL_OW 468
// if j in artifactsLabsWorking [ i ] then
4838: LD_VAR 0 3
4842: PUSH
4843: LD_EXP 11
4847: PUSH
4848: LD_VAR 0 1
4852: ARRAY
4853: IN
4854: IFFALSE 4902
// begin artifactsLabsWorking := Replace ( artifactsLabsWorking , i , artifactsLabsWorking [ i ] diff j ) ;
4856: LD_ADDR_EXP 11
4860: PUSH
4861: LD_EXP 11
4865: PPUSH
4866: LD_VAR 0 1
4870: PPUSH
4871: LD_EXP 11
4875: PUSH
4876: LD_VAR 0 1
4880: ARRAY
4881: PUSH
4882: LD_VAR 0 3
4886: DIFF
4887: PPUSH
4888: CALL_OW 1
4892: ST_TO_ADDR
// ComCancel ( j ) ;
4893: LD_VAR 0 3
4897: PPUSH
4898: CALL_OW 127
// end ; end ;
4902: GO 4756
4904: POP
4905: POP
// end ; end ;
4906: GO 4037
4908: POP
4909: POP
// end ;
4910: PPOPN 6
4912: END
// on ArtifactUsed ( side , icon , x , y ) do var i , labs , lab , base , time ;
4913: LD_INT 0
4915: PPUSH
4916: PPUSH
4917: PPUSH
4918: PPUSH
4919: PPUSH
// begin labs := FilterAllUnits ( [ [ f_side , side ] , [ f_lab , b_lab_siberium ] ] ) ;
4920: LD_ADDR_VAR 0 6
4924: PUSH
4925: LD_INT 22
4927: PUSH
4928: LD_VAR 0 1
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: PUSH
4937: LD_INT 63
4939: PUSH
4940: LD_INT 11
4942: PUSH
4943: EMPTY
4944: LIST
4945: LIST
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PPUSH
4951: CALL_OW 69
4955: ST_TO_ADDR
// for i := 1 to 3 do
4956: LD_ADDR_VAR 0 5
4960: PUSH
4961: DOUBLE
4962: LD_INT 1
4964: DEC
4965: ST_TO_ADDR
4966: LD_INT 3
4968: PUSH
4969: FOR_TO
4970: IFFALSE 5200
// begin if icon = artifactsButtons [ i ] [ 3 ] then
4972: LD_VAR 0 2
4976: PUSH
4977: LD_EXP 10
4981: PUSH
4982: LD_VAR 0 5
4986: ARRAY
4987: PUSH
4988: LD_INT 3
4990: ARRAY
4991: EQUAL
4992: IFFALSE 5198
// begin lab := NearestUnitToXY ( labs , artifactsPos [ i ] [ 1 ] , artifactsPos [ i ] [ 2 ] ) ;
4994: LD_ADDR_VAR 0 7
4998: PUSH
4999: LD_VAR 0 6
5003: PPUSH
5004: LD_EXP 3
5008: PUSH
5009: LD_VAR 0 5
5013: ARRAY
5014: PUSH
5015: LD_INT 1
5017: ARRAY
5018: PPUSH
5019: LD_EXP 3
5023: PUSH
5024: LD_VAR 0 5
5028: ARRAY
5029: PUSH
5030: LD_INT 2
5032: ARRAY
5033: PPUSH
5034: CALL_OW 73
5038: ST_TO_ADDR
// if not lab then
5039: LD_VAR 0 7
5043: NOT
5044: IFFALSE 5048
// continue ;
5046: GO 4969
// SetSpecResearch ( lab , artifactsResDifficulty [ i ] , true ) ;
5048: LD_VAR 0 7
5052: PPUSH
5053: LD_EXP 8
5057: PUSH
5058: LD_VAR 0 5
5062: ARRAY
5063: PPUSH
5064: LD_INT 1
5066: PPUSH
5067: CALL_OW 486
// SetTag ( lab , i ) ;
5071: LD_VAR 0 7
5075: PPUSH
5076: LD_VAR 0 5
5080: PPUSH
5081: CALL_OW 109
// if artifactsResProgress [ side ] [ i ] then
5085: LD_EXP 9
5089: PUSH
5090: LD_VAR 0 1
5094: ARRAY
5095: PUSH
5096: LD_VAR 0 5
5100: ARRAY
5101: IFFALSE 5129
// SetWorkingProgress ( lab , artifactsResProgress [ side ] [ i ] ) ;
5103: LD_VAR 0 7
5107: PPUSH
5108: LD_EXP 9
5112: PUSH
5113: LD_VAR 0 1
5117: ARRAY
5118: PUSH
5119: LD_VAR 0 5
5123: ARRAY
5124: PPUSH
5125: CALL_OW 329
// artifactsLabsWorking := Replace ( artifactsLabsWorking , i , artifactsLabsWorking [ i ] union lab ) ;
5129: LD_ADDR_EXP 11
5133: PUSH
5134: LD_EXP 11
5138: PPUSH
5139: LD_VAR 0 5
5143: PPUSH
5144: LD_EXP 11
5148: PUSH
5149: LD_VAR 0 5
5153: ARRAY
5154: PUSH
5155: LD_VAR 0 7
5159: UNION
5160: PPUSH
5161: CALL_OW 1
5165: ST_TO_ADDR
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_no , lab ) ;
5166: LD_VAR 0 1
5170: PPUSH
5171: LD_EXP 10
5175: PUSH
5176: LD_VAR 0 5
5180: ARRAY
5181: PUSH
5182: LD_INT 3
5184: ARRAY
5185: PPUSH
5186: LD_INT 0
5188: PPUSH
5189: LD_VAR 0 7
5193: PPUSH
5194: CALL_OW 468
// end ; end ;
5198: GO 4969
5200: POP
5201: POP
// if icon = artifactsButtons [ 1 ] [ 1 ] then
5202: LD_VAR 0 2
5206: PUSH
5207: LD_EXP 10
5211: PUSH
5212: LD_INT 1
5214: ARRAY
5215: PUSH
5216: LD_INT 1
5218: ARRAY
5219: EQUAL
5220: IFFALSE 5491
// begin lab := NearestUnitToXY ( labs , artifactsPos [ 1 ] [ 1 ] , artifactsPos [ 1 ] [ 2 ] ) ;
5222: LD_ADDR_VAR 0 7
5226: PUSH
5227: LD_VAR 0 6
5231: PPUSH
5232: LD_EXP 3
5236: PUSH
5237: LD_INT 1
5239: ARRAY
5240: PUSH
5241: LD_INT 1
5243: ARRAY
5244: PPUSH
5245: LD_EXP 3
5249: PUSH
5250: LD_INT 1
5252: ARRAY
5253: PUSH
5254: LD_INT 2
5256: ARRAY
5257: PPUSH
5258: CALL_OW 73
5262: ST_TO_ADDR
// base := GetBase ( lab ) ;
5263: LD_ADDR_VAR 0 8
5267: PUSH
5268: LD_VAR 0 7
5272: PPUSH
5273: CALL_OW 274
5277: ST_TO_ADDR
// if GetBaseMaterials ( GetBase ( lab ) ) [ 3 ] < artifactsSibCost [ 1 ] then
5278: LD_VAR 0 7
5282: PPUSH
5283: CALL_OW 274
5287: PPUSH
5288: CALL 62603 0 1
5292: PUSH
5293: LD_INT 3
5295: ARRAY
5296: PUSH
5297: LD_EXP 5
5301: PUSH
5302: LD_INT 1
5304: ARRAY
5305: LESS
5306: IFFALSE 5310
// begin exit ;
5308: GO 6257
// end ; SetResourceType ( base , mat_siberit , ( GetResourceType ( base , mat_siberit ) - artifactsSibCost [ 1 ] ) ) ;
5310: LD_VAR 0 8
5314: PPUSH
5315: LD_INT 3
5317: PPUSH
5318: LD_VAR 0 8
5322: PPUSH
5323: LD_INT 3
5325: PPUSH
5326: CALL_OW 275
5330: PUSH
5331: LD_EXP 5
5335: PUSH
5336: LD_INT 1
5338: ARRAY
5339: MINUS
5340: PPUSH
5341: CALL_OW 277
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 1 , false ) ) ;
5345: LD_ADDR_EXP 7
5349: PUSH
5350: LD_EXP 7
5354: PPUSH
5355: LD_VAR 0 1
5359: PPUSH
5360: LD_EXP 7
5364: PUSH
5365: LD_VAR 0 1
5369: ARRAY
5370: PPUSH
5371: LD_INT 1
5373: PPUSH
5374: LD_INT 0
5376: PPUSH
5377: CALL_OW 1
5381: PPUSH
5382: CALL_OW 1
5386: ST_TO_ADDR
// PlaceSeeing ( x , y , side , - 12 ) ;
5387: LD_VAR 0 3
5391: PPUSH
5392: LD_VAR 0 4
5396: PPUSH
5397: LD_VAR 0 1
5401: PPUSH
5402: LD_INT 12
5404: NEG
5405: PPUSH
5406: CALL_OW 330
// wait ( 0 0$30 ) ;
5410: LD_INT 1050
5412: PPUSH
5413: CALL_OW 67
// RemoveSeeing ( x , y , side ) ;
5417: LD_VAR 0 3
5421: PPUSH
5422: LD_VAR 0 4
5426: PPUSH
5427: LD_VAR 0 1
5431: PPUSH
5432: CALL_OW 331
// wait ( artifactsRecharge [ 1 ] ) ;
5436: LD_EXP 4
5440: PUSH
5441: LD_INT 1
5443: ARRAY
5444: PPUSH
5445: CALL_OW 67
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 1 , true ) ) ;
5449: LD_ADDR_EXP 7
5453: PUSH
5454: LD_EXP 7
5458: PPUSH
5459: LD_VAR 0 1
5463: PPUSH
5464: LD_EXP 7
5468: PUSH
5469: LD_VAR 0 1
5473: ARRAY
5474: PPUSH
5475: LD_INT 1
5477: PPUSH
5478: LD_INT 1
5480: PPUSH
5481: CALL_OW 1
5485: PPUSH
5486: CALL_OW 1
5490: ST_TO_ADDR
// end ; if icon = artifactsButtons [ 2 ] [ 1 ] then
5491: LD_VAR 0 2
5495: PUSH
5496: LD_EXP 10
5500: PUSH
5501: LD_INT 2
5503: ARRAY
5504: PUSH
5505: LD_INT 1
5507: ARRAY
5508: EQUAL
5509: IFFALSE 6005
// begin lab := NearestUnitToXY ( labs , artifactsPos [ 2 ] [ 1 ] , artifactsPos [ 2 ] [ 2 ] ) ;
5511: LD_ADDR_VAR 0 7
5515: PUSH
5516: LD_VAR 0 6
5520: PPUSH
5521: LD_EXP 3
5525: PUSH
5526: LD_INT 2
5528: ARRAY
5529: PUSH
5530: LD_INT 1
5532: ARRAY
5533: PPUSH
5534: LD_EXP 3
5538: PUSH
5539: LD_INT 2
5541: ARRAY
5542: PUSH
5543: LD_INT 2
5545: ARRAY
5546: PPUSH
5547: CALL_OW 73
5551: ST_TO_ADDR
// base := GetBase ( lab ) ;
5552: LD_ADDR_VAR 0 8
5556: PUSH
5557: LD_VAR 0 7
5561: PPUSH
5562: CALL_OW 274
5566: ST_TO_ADDR
// if not x in FilterAllUnits ( [ [ f_enemy , side ] , [ f_or , [ f_engine , engine_siberite ] , [ f_btype , b_siberite_power ] , [ f_btype , b_siberite_mine ] , [ f_bweapon , ru_time_lapser ] , [ f_weapon , ru_time_lapser ] , [ f_weapon , us_double_laser ] , [ f_bweapon , us_double_laser ] , [ f_weapon , ar_bio_bomb ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_btype , b_ext_siberium ] , [ f_weapon , us_siberium_rocket ] , [ f_weapon , ru_siberium_rocket ] , [ f_chassis , ru_behemoth ] , [ f_bweapon , us_siberium_rocket ] , [ f_bweapon , ru_siberium_rocket ] ] ] ) then
5567: LD_VAR 0 3
5571: PUSH
5572: LD_INT 81
5574: PUSH
5575: LD_VAR 0 1
5579: PUSH
5580: EMPTY
5581: LIST
5582: LIST
5583: PUSH
5584: LD_INT 2
5586: PUSH
5587: LD_INT 32
5589: PUSH
5590: LD_INT 3
5592: PUSH
5593: EMPTY
5594: LIST
5595: LIST
5596: PUSH
5597: LD_INT 30
5599: PUSH
5600: LD_INT 28
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: PUSH
5607: LD_INT 30
5609: PUSH
5610: LD_INT 30
5612: PUSH
5613: EMPTY
5614: LIST
5615: LIST
5616: PUSH
5617: LD_INT 35
5619: PUSH
5620: LD_INT 49
5622: PUSH
5623: EMPTY
5624: LIST
5625: LIST
5626: PUSH
5627: LD_INT 34
5629: PUSH
5630: LD_INT 49
5632: PUSH
5633: EMPTY
5634: LIST
5635: LIST
5636: PUSH
5637: LD_INT 34
5639: PUSH
5640: LD_INT 10
5642: PUSH
5643: EMPTY
5644: LIST
5645: LIST
5646: PUSH
5647: LD_INT 35
5649: PUSH
5650: LD_INT 10
5652: PUSH
5653: EMPTY
5654: LIST
5655: LIST
5656: PUSH
5657: LD_INT 34
5659: PUSH
5660: LD_INT 91
5662: PUSH
5663: EMPTY
5664: LIST
5665: LIST
5666: PUSH
5667: LD_INT 34
5669: PUSH
5670: LD_INT 29
5672: PUSH
5673: EMPTY
5674: LIST
5675: LIST
5676: PUSH
5677: LD_INT 30
5679: PUSH
5680: LD_INT 21
5682: PUSH
5683: EMPTY
5684: LIST
5685: LIST
5686: PUSH
5687: LD_INT 34
5689: PUSH
5690: LD_INT 8
5692: PUSH
5693: EMPTY
5694: LIST
5695: LIST
5696: PUSH
5697: LD_INT 34
5699: PUSH
5700: LD_INT 48
5702: PUSH
5703: EMPTY
5704: LIST
5705: LIST
5706: PUSH
5707: LD_INT 31
5709: PUSH
5710: LD_INT 25
5712: PUSH
5713: EMPTY
5714: LIST
5715: LIST
5716: PUSH
5717: LD_INT 35
5719: PUSH
5720: LD_INT 8
5722: PUSH
5723: EMPTY
5724: LIST
5725: LIST
5726: PUSH
5727: LD_INT 35
5729: PUSH
5730: LD_INT 48
5732: PUSH
5733: EMPTY
5734: LIST
5735: LIST
5736: PUSH
5737: EMPTY
5738: LIST
5739: LIST
5740: LIST
5741: LIST
5742: LIST
5743: LIST
5744: LIST
5745: LIST
5746: LIST
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: LIST
5752: LIST
5753: LIST
5754: PUSH
5755: EMPTY
5756: LIST
5757: LIST
5758: PPUSH
5759: CALL_OW 69
5763: IN
5764: NOT
5765: IFFALSE 5769
// exit ;
5767: GO 6257
// if GetBaseMaterials ( GetBase ( lab ) ) [ 3 ] < artifactsSibCost [ 2 ] then
5769: LD_VAR 0 7
5773: PPUSH
5774: CALL_OW 274
5778: PPUSH
5779: CALL 62603 0 1
5783: PUSH
5784: LD_INT 3
5786: ARRAY
5787: PUSH
5788: LD_EXP 5
5792: PUSH
5793: LD_INT 2
5795: ARRAY
5796: LESS
5797: IFFALSE 5801
// begin exit ;
5799: GO 6257
// end ; SetResourceType ( base , mat_siberit , ( GetResourceType ( base , mat_siberit ) - artifactsSibCost [ 2 ] ) ) ;
5801: LD_VAR 0 8
5805: PPUSH
5806: LD_INT 3
5808: PPUSH
5809: LD_VAR 0 8
5813: PPUSH
5814: LD_INT 3
5816: PPUSH
5817: CALL_OW 275
5821: PUSH
5822: LD_EXP 5
5826: PUSH
5827: LD_INT 2
5829: ARRAY
5830: MINUS
5831: PPUSH
5832: CALL_OW 277
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 2 , false ) ) ;
5836: LD_ADDR_EXP 7
5840: PUSH
5841: LD_EXP 7
5845: PPUSH
5846: LD_VAR 0 1
5850: PPUSH
5851: LD_EXP 7
5855: PUSH
5856: LD_VAR 0 1
5860: ARRAY
5861: PPUSH
5862: LD_INT 2
5864: PPUSH
5865: LD_INT 0
5867: PPUSH
5868: CALL_OW 1
5872: PPUSH
5873: CALL_OW 1
5877: ST_TO_ADDR
// KillUnit ( x ) ;
5878: LD_VAR 0 3
5882: PPUSH
5883: CALL_OW 66
// if GetWeapon ( x ) in [ us_siberium_rocket , ru_siberium_rocket ] or GetBWeapon ( x ) in [ us_siberium_rocket , ru_siberium_rocket ] then
5887: LD_VAR 0 3
5891: PPUSH
5892: CALL_OW 264
5896: PUSH
5897: LD_INT 8
5899: PUSH
5900: LD_INT 48
5902: PUSH
5903: EMPTY
5904: LIST
5905: LIST
5906: IN
5907: IFTRUE 5931
5909: PUSH
5910: LD_VAR 0 3
5914: PPUSH
5915: CALL_OW 269
5919: PUSH
5920: LD_INT 8
5922: PUSH
5923: LD_INT 48
5925: PUSH
5926: EMPTY
5927: LIST
5928: LIST
5929: IN
5930: OR
5931: IFFALSE 5950
// begin ArtContamination ( x , y , 50 ) ;
5933: LD_VAR 0 3
5937: PPUSH
5938: LD_VAR 0 4
5942: PPUSH
5943: LD_INT 50
5945: PPUSH
5946: CALL_OW 495
// end ; wait ( artifactsRecharge [ 2 ] ) ;
5950: LD_EXP 4
5954: PUSH
5955: LD_INT 2
5957: ARRAY
5958: PPUSH
5959: CALL_OW 67
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 2 , true ) ) ;
5963: LD_ADDR_EXP 7
5967: PUSH
5968: LD_EXP 7
5972: PPUSH
5973: LD_VAR 0 1
5977: PPUSH
5978: LD_EXP 7
5982: PUSH
5983: LD_VAR 0 1
5987: ARRAY
5988: PPUSH
5989: LD_INT 2
5991: PPUSH
5992: LD_INT 1
5994: PPUSH
5995: CALL_OW 1
5999: PPUSH
6000: CALL_OW 1
6004: ST_TO_ADDR
// end ; if icon = artifactsButtons [ 3 ] [ 1 ] then
6005: LD_VAR 0 2
6009: PUSH
6010: LD_EXP 10
6014: PUSH
6015: LD_INT 3
6017: ARRAY
6018: PUSH
6019: LD_INT 1
6021: ARRAY
6022: EQUAL
6023: IFFALSE 6257
// begin lab := NearestUnitToXY ( labs , artifactsPos [ 3 ] [ 1 ] , artifactsPos [ 3 ] [ 2 ] ) ;
6025: LD_ADDR_VAR 0 7
6029: PUSH
6030: LD_VAR 0 6
6034: PPUSH
6035: LD_EXP 3
6039: PUSH
6040: LD_INT 3
6042: ARRAY
6043: PUSH
6044: LD_INT 1
6046: ARRAY
6047: PPUSH
6048: LD_EXP 3
6052: PUSH
6053: LD_INT 3
6055: ARRAY
6056: PUSH
6057: LD_INT 2
6059: ARRAY
6060: PPUSH
6061: CALL_OW 73
6065: ST_TO_ADDR
// base := GetBase ( lab ) ;
6066: LD_ADDR_VAR 0 8
6070: PUSH
6071: LD_VAR 0 7
6075: PPUSH
6076: CALL_OW 274
6080: ST_TO_ADDR
// if GetBaseMaterials ( base ) [ 3 ] < artifactsSibCost [ 3 ] then
6081: LD_VAR 0 8
6085: PPUSH
6086: CALL 62603 0 1
6090: PUSH
6091: LD_INT 3
6093: ARRAY
6094: PUSH
6095: LD_EXP 5
6099: PUSH
6100: LD_INT 3
6102: ARRAY
6103: LESS
6104: IFFALSE 6108
// begin exit ;
6106: GO 6257
// end ; SetResourceType ( base , mat_siberit , ( GetResourceType ( base , mat_siberit ) - artifactsSibCost [ 3 ] ) ) ;
6108: LD_VAR 0 8
6112: PPUSH
6113: LD_INT 3
6115: PPUSH
6116: LD_VAR 0 8
6120: PPUSH
6121: LD_INT 3
6123: PPUSH
6124: CALL_OW 275
6128: PUSH
6129: LD_EXP 5
6133: PUSH
6134: LD_INT 3
6136: ARRAY
6137: MINUS
6138: PPUSH
6139: CALL_OW 277
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 3 , false ) ) ;
6143: LD_ADDR_EXP 7
6147: PUSH
6148: LD_EXP 7
6152: PPUSH
6153: LD_VAR 0 1
6157: PPUSH
6158: LD_EXP 7
6162: PUSH
6163: LD_VAR 0 1
6167: ARRAY
6168: PPUSH
6169: LD_INT 3
6171: PPUSH
6172: LD_INT 0
6174: PPUSH
6175: CALL_OW 1
6179: PPUSH
6180: CALL_OW 1
6184: ST_TO_ADDR
// ArtContamination ( x , y , 50 ) ;
6185: LD_VAR 0 3
6189: PPUSH
6190: LD_VAR 0 4
6194: PPUSH
6195: LD_INT 50
6197: PPUSH
6198: CALL_OW 495
// wait ( artifactsRecharge [ 3 ] ) ;
6202: LD_EXP 4
6206: PUSH
6207: LD_INT 3
6209: ARRAY
6210: PPUSH
6211: CALL_OW 67
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 3 , true ) ) ;
6215: LD_ADDR_EXP 7
6219: PUSH
6220: LD_EXP 7
6224: PPUSH
6225: LD_VAR 0 1
6229: PPUSH
6230: LD_EXP 7
6234: PUSH
6235: LD_VAR 0 1
6239: ARRAY
6240: PPUSH
6241: LD_INT 3
6243: PPUSH
6244: LD_INT 1
6246: PPUSH
6247: CALL_OW 1
6251: PPUSH
6252: CALL_OW 1
6256: ST_TO_ADDR
// end ; end ;
6257: PPOPN 9
6259: END
// on SpecResearchCancel ( lab , progress ) do var side , tag ;
6260: LD_INT 0
6262: PPUSH
6263: PPUSH
// begin tag := GetTag ( lab ) ;
6264: LD_ADDR_VAR 0 4
6268: PUSH
6269: LD_VAR 0 1
6273: PPUSH
6274: CALL_OW 110
6278: ST_TO_ADDR
// side := GetSide ( lab ) ;
6279: LD_ADDR_VAR 0 3
6283: PUSH
6284: LD_VAR 0 1
6288: PPUSH
6289: CALL_OW 255
6293: ST_TO_ADDR
// SetArtifactUse ( side , artifactsButtons [ tag ] [ 3 ] , art_instant , lab ) ;
6294: LD_VAR 0 3
6298: PPUSH
6299: LD_EXP 10
6303: PUSH
6304: LD_VAR 0 4
6308: ARRAY
6309: PUSH
6310: LD_INT 3
6312: ARRAY
6313: PPUSH
6314: LD_INT 2
6316: PPUSH
6317: LD_VAR 0 1
6321: PPUSH
6322: CALL_OW 468
// artifactsResProgress := Replace ( artifactsResProgress , side , Replace ( artifactsResProgress [ side ] , tag , progress ) ) ;
6326: LD_ADDR_EXP 9
6330: PUSH
6331: LD_EXP 9
6335: PPUSH
6336: LD_VAR 0 3
6340: PPUSH
6341: LD_EXP 9
6345: PUSH
6346: LD_VAR 0 3
6350: ARRAY
6351: PPUSH
6352: LD_VAR 0 4
6356: PPUSH
6357: LD_VAR 0 2
6361: PPUSH
6362: CALL_OW 1
6366: PPUSH
6367: CALL_OW 1
6371: ST_TO_ADDR
// artifactsLabsWorking := Replace ( artifactsLabsWorking , tag , artifactsLabsWorking [ tag ] diff lab ) ;
6372: LD_ADDR_EXP 11
6376: PUSH
6377: LD_EXP 11
6381: PPUSH
6382: LD_VAR 0 4
6386: PPUSH
6387: LD_EXP 11
6391: PUSH
6392: LD_VAR 0 4
6396: ARRAY
6397: PUSH
6398: LD_VAR 0 1
6402: DIFF
6403: PPUSH
6404: CALL_OW 1
6408: ST_TO_ADDR
// SetTag ( lab , 0 ) ;
6409: LD_VAR 0 1
6413: PPUSH
6414: LD_INT 0
6416: PPUSH
6417: CALL_OW 109
// end ;
6421: PPOPN 4
6423: END
// on SpecResearchComplete ( lab ) do var side , tag ;
6424: LD_INT 0
6426: PPUSH
6427: PPUSH
// begin tag := GetTag ( lab ) ;
6428: LD_ADDR_VAR 0 3
6432: PUSH
6433: LD_VAR 0 1
6437: PPUSH
6438: CALL_OW 110
6442: ST_TO_ADDR
// side := GetSide ( lab ) ;
6443: LD_ADDR_VAR 0 2
6447: PUSH
6448: LD_VAR 0 1
6452: PPUSH
6453: CALL_OW 255
6457: ST_TO_ADDR
// SetArtifactUse ( side , artifactsButtons [ tag ] [ 3 ] , art_no , lab ) ;
6458: LD_VAR 0 2
6462: PPUSH
6463: LD_EXP 10
6467: PUSH
6468: LD_VAR 0 3
6472: ARRAY
6473: PUSH
6474: LD_INT 3
6476: ARRAY
6477: PPUSH
6478: LD_INT 0
6480: PPUSH
6481: LD_VAR 0 1
6485: PPUSH
6486: CALL_OW 468
// artifactsResearched := Replace ( artifactsResearched , side , Replace ( artifactsResearched [ side ] , tag , 1 ) ) ;
6490: LD_ADDR_EXP 6
6494: PUSH
6495: LD_EXP 6
6499: PPUSH
6500: LD_VAR 0 2
6504: PPUSH
6505: LD_EXP 6
6509: PUSH
6510: LD_VAR 0 2
6514: ARRAY
6515: PPUSH
6516: LD_VAR 0 3
6520: PPUSH
6521: LD_INT 1
6523: PPUSH
6524: CALL_OW 1
6528: PPUSH
6529: CALL_OW 1
6533: ST_TO_ADDR
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , tag , 1 ) ) ;
6534: LD_ADDR_EXP 7
6538: PUSH
6539: LD_EXP 7
6543: PPUSH
6544: LD_VAR 0 2
6548: PPUSH
6549: LD_EXP 7
6553: PUSH
6554: LD_VAR 0 2
6558: ARRAY
6559: PPUSH
6560: LD_VAR 0 3
6564: PPUSH
6565: LD_INT 1
6567: PPUSH
6568: CALL_OW 1
6572: PPUSH
6573: CALL_OW 1
6577: ST_TO_ADDR
// artifactsLabsWorking := Replace ( artifactsLabsWorking , tag , artifactsLabsWorking [ tag ] diff lab ) ;
6578: LD_ADDR_EXP 11
6582: PUSH
6583: LD_EXP 11
6587: PPUSH
6588: LD_VAR 0 3
6592: PPUSH
6593: LD_EXP 11
6597: PUSH
6598: LD_VAR 0 3
6602: ARRAY
6603: PUSH
6604: LD_VAR 0 1
6608: DIFF
6609: PPUSH
6610: CALL_OW 1
6614: ST_TO_ADDR
// end ;
6615: PPOPN 3
6617: END
// on ArtifactLoaded ( cargo , artifact ) do begin SetTag ( cargo , artifact ) ;
6618: LD_VAR 0 1
6622: PPUSH
6623: LD_VAR 0 2
6627: PPUSH
6628: CALL_OW 109
// end ;
6632: PPOPN 2
6634: END
// on ArtifactUnloaded ( cargo , artifact ) do begin SetTag ( cargo , 0 ) ;
6635: LD_VAR 0 1
6639: PPUSH
6640: LD_INT 0
6642: PPUSH
6643: CALL_OW 109
// end ; end_of_file end_of_file
6647: PPOPN 2
6649: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpCommanders , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
6650: LD_INT 0
6652: PPUSH
6653: PPUSH
// disable ( mpActive ) ;
6654: LD_INT 100
6656: DISABLE_MARKED
// disable ( mpWin ) ;
6657: LD_INT 101
6659: DISABLE_MARKED
// disable ( mpLose ) ;
6660: LD_INT 102
6662: DISABLE_MARKED
// mpGameType := 0 ;
6663: LD_ADDR_EXP 12
6667: PUSH
6668: LD_INT 0
6670: ST_TO_ADDR
// mpGameSettings := [ ] ;
6671: LD_ADDR_EXP 15
6675: PUSH
6676: EMPTY
6677: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
6678: LD_ADDR_EXP 13
6682: PUSH
6683: EMPTY
6684: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
6685: LD_ADDR_EXP 14
6689: PUSH
6690: EMPTY
6691: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
6692: LD_ADDR_EXP 38
6696: PUSH
6697: LD_INT 2
6699: PUSH
6700: LD_INT 2
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: ST_TO_ADDR
// mpOilDeposits := [ ] ;
6707: LD_ADDR_EXP 21
6711: PUSH
6712: EMPTY
6713: ST_TO_ADDR
// mpSibDeposits := [ ] ;
6714: LD_ADDR_EXP 22
6718: PUSH
6719: EMPTY
6720: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
6721: LD_ADDR_EXP 51
6725: PUSH
6726: EMPTY
6727: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
6728: LD_ADDR_EXP 52
6732: PUSH
6733: EMPTY
6734: ST_TO_ADDR
// mpDepots := [ ] ;
6735: LD_ADDR_EXP 23
6739: PUSH
6740: EMPTY
6741: ST_TO_ADDR
// mpBuildings := [ ] ;
6742: LD_ADDR_EXP 26
6746: PUSH
6747: EMPTY
6748: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
6749: LD_ADDR_EXP 27
6753: PUSH
6754: EMPTY
6755: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
6756: LD_ADDR_EXP 28
6760: PUSH
6761: EMPTY
6762: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
6763: LD_ADDR_EXP 29
6767: PUSH
6768: EMPTY
6769: ST_TO_ADDR
// mpStartingResources := [ ] ;
6770: LD_ADDR_EXP 24
6774: PUSH
6775: EMPTY
6776: ST_TO_ADDR
// mpStartPos := [ ] ;
6777: LD_ADDR_EXP 30
6781: PUSH
6782: EMPTY
6783: ST_TO_ADDR
// mpBattleFlag := - 1 ;
6784: LD_ADDR_EXP 31
6788: PUSH
6789: LD_INT 1
6791: NEG
6792: ST_TO_ADDR
// mpBattleFlags := [ ] ;
6793: LD_ADDR_EXP 32
6797: PUSH
6798: EMPTY
6799: ST_TO_ADDR
// mpApemans := [ ] ;
6800: LD_ADDR_EXP 39
6804: PUSH
6805: EMPTY
6806: ST_TO_ADDR
// mpApemansArea := [ ] ;
6807: LD_ADDR_EXP 40
6811: PUSH
6812: EMPTY
6813: ST_TO_ADDR
// mpRespawn := [ ] ;
6814: LD_ADDR_EXP 42
6818: PUSH
6819: EMPTY
6820: ST_TO_ADDR
// mpKingArea := 0 ;
6821: LD_ADDR_EXP 43
6825: PUSH
6826: LD_INT 0
6828: ST_TO_ADDR
// mpPoints := [ ] ;
6829: LD_ADDR_EXP 44
6833: PUSH
6834: EMPTY
6835: ST_TO_ADDR
// mpVehicles := 0 ;
6836: LD_ADDR_EXP 45
6840: PUSH
6841: LD_INT 0
6843: ST_TO_ADDR
// mpShipments := 0 ;
6844: LD_ADDR_EXP 36
6848: PUSH
6849: LD_INT 0
6851: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
6852: LD_ADDR_EXP 49
6856: PUSH
6857: EMPTY
6858: PUSH
6859: EMPTY
6860: PUSH
6861: EMPTY
6862: PUSH
6863: EMPTY
6864: PUSH
6865: EMPTY
6866: PUSH
6867: EMPTY
6868: PUSH
6869: EMPTY
6870: PUSH
6871: EMPTY
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: LIST
6882: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
6883: LD_ADDR_EXP 41
6887: PUSH
6888: EMPTY
6889: PUSH
6890: EMPTY
6891: PUSH
6892: EMPTY
6893: PUSH
6894: EMPTY
6895: PUSH
6896: EMPTY
6897: PUSH
6898: EMPTY
6899: PUSH
6900: EMPTY
6901: PUSH
6902: EMPTY
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: ST_TO_ADDR
// mpCommanders := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
6914: LD_ADDR_EXP 50
6918: PUSH
6919: LD_INT 0
6921: PUSH
6922: LD_INT 0
6924: PUSH
6925: LD_INT 0
6927: PUSH
6928: LD_INT 0
6930: PUSH
6931: LD_INT 0
6933: PUSH
6934: LD_INT 0
6936: PUSH
6937: LD_INT 0
6939: PUSH
6940: LD_INT 0
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: ST_TO_ADDR
// mpEmissions := 0 ;
6953: LD_ADDR_EXP 46
6957: PUSH
6958: LD_INT 0
6960: ST_TO_ADDR
// mpTeleports := 0 ;
6961: LD_ADDR_EXP 53
6965: PUSH
6966: LD_INT 0
6968: ST_TO_ADDR
// mpArtifacts := 0 ;
6969: LD_ADDR_EXP 54
6973: PUSH
6974: LD_INT 0
6976: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
6977: LD_ADDR_EXP 55
6981: PUSH
6982: LD_INT 0
6984: ST_TO_ADDR
// mpPeopleSkill := 3 ;
6985: LD_ADDR_EXP 34
6989: PUSH
6990: LD_INT 3
6992: ST_TO_ADDR
// mpPeopleAmount := 15 ;
6993: LD_ADDR_EXP 33
6997: PUSH
6998: LD_INT 15
7000: ST_TO_ADDR
// mpDisplayStrings := 0 ;
7001: LD_ADDR_EXP 47
7005: PUSH
7006: LD_INT 0
7008: ST_TO_ADDR
// mpGameActive := false ;
7009: LD_ADDR_EXP 48
7013: PUSH
7014: LD_INT 0
7016: ST_TO_ADDR
// mpBlockRespThread := false ;
7017: LD_ADDR_EXP 56
7021: PUSH
7022: LD_INT 0
7024: ST_TO_ADDR
// for i := 1 to 32 do
7025: LD_ADDR_VAR 0 2
7029: PUSH
7030: DOUBLE
7031: LD_INT 1
7033: DEC
7034: ST_TO_ADDR
7035: LD_INT 32
7037: PUSH
7038: FOR_TO
7039: IFFALSE 7066
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
7041: LD_ADDR_EXP 15
7045: PUSH
7046: LD_EXP 15
7050: PPUSH
7051: LD_VAR 0 2
7055: PPUSH
7056: LD_INT 0
7058: PPUSH
7059: CALL_OW 1
7063: ST_TO_ADDR
7064: GO 7038
7066: POP
7067: POP
// end ;
7068: LD_VAR 0 1
7072: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
7073: LD_INT 0
7075: PPUSH
7076: PPUSH
7077: PPUSH
7078: PPUSH
7079: PPUSH
7080: PPUSH
7081: PPUSH
7082: PPUSH
7083: PPUSH
7084: PPUSH
7085: PPUSH
7086: PPUSH
7087: PPUSH
7088: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , GameTypeSurvivalH ] ;
7089: LD_ADDR_VAR 0 14
7093: PUSH
7094: LD_INT 1
7096: PUSH
7097: LD_INT 2
7099: PUSH
7100: LD_INT 3
7102: PUSH
7103: LD_INT 5
7105: PUSH
7106: LD_INT 6
7108: PUSH
7109: LD_INT 7
7111: PUSH
7112: LD_INT 8
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: LIST
7119: LIST
7120: LIST
7121: LIST
7122: LIST
7123: ST_TO_ADDR
// for i in gameTypes do
7124: LD_ADDR_VAR 0 2
7128: PUSH
7129: LD_VAR 0 14
7133: PUSH
7134: FOR_IN
7135: IFFALSE 7144
// disable ( i ) ;
7137: LD_VAR 0 2
7141: DISABLE_MARKED
7142: GO 7134
7144: POP
7145: POP
// if Multiplayer then
7146: LD_OWVAR 4
7150: IFFALSE 7334
// begin mpGameType := mp_game_type ;
7152: LD_ADDR_EXP 12
7156: PUSH
7157: LD_OWVAR 6
7161: ST_TO_ADDR
// your_side := mp_player_side ;
7162: LD_ADDR_OWVAR 2
7166: PUSH
7167: LD_OWVAR 7
7171: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
7172: LD_ADDR_EXP 16
7176: PUSH
7177: LD_OWVAR 17
7181: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
7182: LD_ADDR_EXP 17
7186: PUSH
7187: LD_OWVAR 15
7191: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
7192: LD_ADDR_EXP 18
7196: PUSH
7197: LD_OWVAR 16
7201: ST_TO_ADDR
// mpTeams := mp_teams ;
7202: LD_ADDR_EXP 19
7206: PUSH
7207: LD_OWVAR 12
7211: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
7212: LD_ADDR_VAR 0 2
7216: PUSH
7217: DOUBLE
7218: LD_INT 1
7220: DEC
7221: ST_TO_ADDR
7222: LD_EXP 13
7226: PPUSH
7227: CALL 26397 0 1
7231: PUSH
7232: FOR_TO
7233: IFFALSE 7309
// begin setting := mpGameSettingsKeys [ i ] ;
7235: LD_ADDR_VAR 0 12
7239: PUSH
7240: LD_EXP 13
7244: PUSH
7245: LD_VAR 0 2
7249: ARRAY
7250: ST_TO_ADDR
// if setting then
7251: LD_VAR 0 12
7255: IFFALSE 7307
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
7257: LD_ADDR_EXP 15
7261: PUSH
7262: LD_EXP 15
7266: PPUSH
7267: LD_VAR 0 2
7271: PPUSH
7272: LD_EXP 14
7276: PUSH
7277: LD_VAR 0 2
7281: ARRAY
7282: PUSH
7283: LD_VAR 0 2
7287: PUSH
7288: LD_INT 1
7290: MINUS
7291: PPUSH
7292: CALL_OW 426
7296: PUSH
7297: LD_INT 1
7299: PLUS
7300: ARRAY
7301: PPUSH
7302: CALL_OW 1
7306: ST_TO_ADDR
// end ;
7307: GO 7232
7309: POP
7310: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
7311: LD_ADDR_EXP 20
7315: PUSH
7316: LD_EXP 17
7320: PUSH
7321: LD_INT 0
7323: PUSH
7324: EMPTY
7325: LIST
7326: DIFF
7327: PUSH
7328: LD_INT 1
7330: GREATER
7331: ST_TO_ADDR
// end else
7332: GO 7334
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
7334: LD_EXP 12
7338: PPUSH
7339: CALL 842 0 1
// if Count ( mpMarkedAreas ) then
7343: LD_EXP 27
7347: PPUSH
7348: CALL 26397 0 1
7352: IFFALSE 7383
// begin for i in mpMarkedAreas do
7354: LD_ADDR_VAR 0 2
7358: PUSH
7359: LD_EXP 27
7363: PUSH
7364: FOR_IN
7365: IFFALSE 7381
// SetAreaMapShow ( i , 0 ) ;
7367: LD_VAR 0 2
7371: PPUSH
7372: LD_INT 0
7374: PPUSH
7375: CALL_OW 424
7379: GO 7364
7381: POP
7382: POP
// end ; for i := 1 to 8 do
7383: LD_ADDR_VAR 0 2
7387: PUSH
7388: DOUBLE
7389: LD_INT 1
7391: DEC
7392: ST_TO_ADDR
7393: LD_INT 8
7395: PUSH
7396: FOR_TO
7397: IFFALSE 8856
// begin if not mpSidePositions [ i ] then
7399: LD_EXP 16
7403: PUSH
7404: LD_VAR 0 2
7408: ARRAY
7409: NOT
7410: IFFALSE 7414
// continue ;
7412: GO 7396
// side := i ;
7414: LD_ADDR_VAR 0 7
7418: PUSH
7419: LD_VAR 0 2
7423: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
7424: LD_ADDR_VAR 0 9
7428: PUSH
7429: LD_EXP 18
7433: PUSH
7434: LD_VAR 0 2
7438: ARRAY
7439: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
7440: LD_ADDR_VAR 0 8
7444: PUSH
7445: LD_EXP 16
7449: PUSH
7450: LD_VAR 0 2
7454: ARRAY
7455: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
7456: LD_EXP 21
7460: PPUSH
7461: CALL 26397 0 1
7465: IFFALSE 7542
// begin for j in mpOilDeposits [ pos ] do
7467: LD_ADDR_VAR 0 3
7471: PUSH
7472: LD_EXP 21
7476: PUSH
7477: LD_VAR 0 8
7481: ARRAY
7482: PUSH
7483: FOR_IN
7484: IFFALSE 7540
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
7486: LD_VAR 0 3
7490: PUSH
7491: LD_INT 1
7493: ARRAY
7494: PPUSH
7495: LD_VAR 0 3
7499: PUSH
7500: LD_INT 2
7502: ARRAY
7503: PPUSH
7504: LD_INT 2
7506: PPUSH
7507: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
7511: LD_VAR 0 3
7515: PUSH
7516: LD_INT 1
7518: ARRAY
7519: PPUSH
7520: LD_VAR 0 3
7524: PUSH
7525: LD_INT 2
7527: ARRAY
7528: PPUSH
7529: LD_VAR 0 7
7533: PPUSH
7534: CALL_OW 441
// end ;
7538: GO 7483
7540: POP
7541: POP
// end ; if Count ( mpSibDeposits ) then
7542: LD_EXP 22
7546: PPUSH
7547: CALL 26397 0 1
7551: IFFALSE 7628
// begin for j in mpSibDeposits [ pos ] do
7553: LD_ADDR_VAR 0 3
7557: PUSH
7558: LD_EXP 22
7562: PUSH
7563: LD_VAR 0 8
7567: ARRAY
7568: PUSH
7569: FOR_IN
7570: IFFALSE 7626
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
7572: LD_VAR 0 3
7576: PUSH
7577: LD_INT 1
7579: ARRAY
7580: PPUSH
7581: LD_VAR 0 3
7585: PUSH
7586: LD_INT 2
7588: ARRAY
7589: PPUSH
7590: LD_INT 3
7592: PPUSH
7593: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
7597: LD_VAR 0 3
7601: PUSH
7602: LD_INT 1
7604: ARRAY
7605: PPUSH
7606: LD_VAR 0 3
7610: PUSH
7611: LD_INT 2
7613: ARRAY
7614: PPUSH
7615: LD_VAR 0 7
7619: PPUSH
7620: CALL_OW 441
// end ;
7624: GO 7569
7626: POP
7627: POP
// end ; InitBc ;
7628: CALL_OW 21
// InitUc ;
7632: CALL_OW 18
// uc_side := side ;
7636: LD_ADDR_OWVAR 20
7640: PUSH
7641: LD_VAR 0 7
7645: ST_TO_ADDR
// uc_nation := nation ;
7646: LD_ADDR_OWVAR 21
7650: PUSH
7651: LD_VAR 0 9
7655: ST_TO_ADDR
// if mpBattleFlag > - 1 then
7656: LD_EXP 31
7660: PUSH
7661: LD_INT 1
7663: NEG
7664: GREATER
7665: IFFALSE 7824
// begin x := mpStartPos [ pos ] [ 1 ] ;
7667: LD_ADDR_VAR 0 5
7671: PUSH
7672: LD_EXP 30
7676: PUSH
7677: LD_VAR 0 8
7681: ARRAY
7682: PUSH
7683: LD_INT 1
7685: ARRAY
7686: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
7687: LD_ADDR_VAR 0 6
7691: PUSH
7692: LD_EXP 30
7696: PUSH
7697: LD_VAR 0 8
7701: ARRAY
7702: PUSH
7703: LD_INT 2
7705: ARRAY
7706: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
7707: LD_VAR 0 5
7711: PPUSH
7712: LD_VAR 0 6
7716: PPUSH
7717: LD_INT 12
7719: PPUSH
7720: LD_INT 2
7722: PPUSH
7723: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
7727: LD_ADDR_EXP 32
7731: PUSH
7732: LD_EXP 32
7736: PPUSH
7737: LD_VAR 0 7
7741: PPUSH
7742: LD_VAR 0 7
7746: PPUSH
7747: LD_VAR 0 5
7751: PPUSH
7752: LD_VAR 0 6
7756: PPUSH
7757: LD_INT 1
7759: PUSH
7760: LD_INT 100
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: PUSH
7767: LD_INT 2
7769: PUSH
7770: LD_INT 70
7772: PUSH
7773: EMPTY
7774: LIST
7775: LIST
7776: PUSH
7777: LD_INT 3
7779: PUSH
7780: LD_INT 40
7782: PUSH
7783: EMPTY
7784: LIST
7785: LIST
7786: PUSH
7787: LD_INT 10
7789: PUSH
7790: LD_INT 25
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: PUSH
7797: LD_INT 20
7799: PUSH
7800: LD_INT 100
7802: PUSH
7803: EMPTY
7804: LIST
7805: LIST
7806: PUSH
7807: EMPTY
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: PPUSH
7814: CALL_OW 418
7818: PPUSH
7819: CALL_OW 1
7823: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
7824: LD_EXP 23
7828: PPUSH
7829: CALL 26397 0 1
7833: IFFALSE 8032
// begin if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH , GameTypeArmsRace , GameTypeArmsArtifact ] then
7835: LD_EXP 12
7839: PUSH
7840: LD_INT 2
7842: PUSH
7843: LD_INT 8
7845: PUSH
7846: LD_INT 6
7848: PUSH
7849: LD_INT 7
7851: PUSH
7852: EMPTY
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: IN
7858: IFFALSE 7878
// begin bc_level := 10 ;
7860: LD_ADDR_OWVAR 43
7864: PUSH
7865: LD_INT 10
7867: ST_TO_ADDR
// bc_type := b_warehouse ;
7868: LD_ADDR_OWVAR 42
7872: PUSH
7873: LD_INT 1
7875: ST_TO_ADDR
// end else
7876: GO 7894
// begin bc_level := 0 ;
7878: LD_ADDR_OWVAR 43
7882: PUSH
7883: LD_INT 0
7885: ST_TO_ADDR
// bc_type := b_depot ;
7886: LD_ADDR_OWVAR 42
7890: PUSH
7891: LD_INT 0
7893: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
7894: LD_ADDR_VAR 0 4
7898: PUSH
7899: LD_EXP 23
7903: PUSH
7904: LD_VAR 0 8
7908: ARRAY
7909: PUSH
7910: LD_INT 1
7912: ARRAY
7913: PPUSH
7914: LD_EXP 23
7918: PUSH
7919: LD_VAR 0 8
7923: ARRAY
7924: PUSH
7925: LD_INT 2
7927: ARRAY
7928: PPUSH
7929: LD_EXP 23
7933: PUSH
7934: LD_VAR 0 8
7938: ARRAY
7939: PUSH
7940: LD_INT 3
7942: ARRAY
7943: PPUSH
7944: CALL_OW 47
7948: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
7949: LD_VAR 0 4
7953: PPUSH
7954: LD_STRING @
7956: PUSH
7957: LD_VAR 0 7
7961: STR
7962: PPUSH
7963: CALL_OW 500
// if Count ( mpStartingResources ) then
7967: LD_EXP 24
7971: PPUSH
7972: CALL 26397 0 1
7976: IFFALSE 8030
// begin for j := 1 to mpStartingResources do
7978: LD_ADDR_VAR 0 3
7982: PUSH
7983: DOUBLE
7984: LD_INT 1
7986: DEC
7987: ST_TO_ADDR
7988: LD_EXP 24
7992: PUSH
7993: FOR_TO
7994: IFFALSE 8028
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
7996: LD_VAR 0 4
8000: PPUSH
8001: CALL_OW 274
8005: PPUSH
8006: LD_VAR 0 3
8010: PPUSH
8011: LD_EXP 24
8015: PUSH
8016: LD_VAR 0 3
8020: ARRAY
8021: PPUSH
8022: CALL_OW 277
8026: GO 7993
8028: POP
8029: POP
// end ; end else
8030: GO 8239
// if Count ( mpStartingResources ) then
8032: LD_EXP 24
8036: PPUSH
8037: CALL 26397 0 1
8041: IFFALSE 8239
// begin x := mpStartPos [ pos ] [ 1 ] ;
8043: LD_ADDR_VAR 0 5
8047: PUSH
8048: LD_EXP 30
8052: PUSH
8053: LD_VAR 0 8
8057: ARRAY
8058: PUSH
8059: LD_INT 1
8061: ARRAY
8062: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
8063: LD_ADDR_VAR 0 6
8067: PUSH
8068: LD_EXP 30
8072: PUSH
8073: LD_VAR 0 8
8077: ARRAY
8078: PUSH
8079: LD_INT 2
8081: ARRAY
8082: ST_TO_ADDR
// for j := 1 to mpStartingResources do
8083: LD_ADDR_VAR 0 3
8087: PUSH
8088: DOUBLE
8089: LD_INT 1
8091: DEC
8092: ST_TO_ADDR
8093: LD_EXP 24
8097: PUSH
8098: FOR_TO
8099: IFFALSE 8237
// begin resources := mpStartingResources [ j ] ;
8101: LD_ADDR_VAR 0 13
8105: PUSH
8106: LD_EXP 24
8110: PUSH
8111: LD_VAR 0 3
8115: ARRAY
8116: ST_TO_ADDR
// if resources = 0 then
8117: LD_VAR 0 13
8121: PUSH
8122: LD_INT 0
8124: EQUAL
8125: IFFALSE 8129
// continue ;
8127: GO 8098
// repeat if resources >= 50 then
8129: LD_VAR 0 13
8133: PUSH
8134: LD_INT 50
8136: GREATEREQUAL
8137: IFFALSE 8183
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
8139: LD_VAR 0 3
8143: PPUSH
8144: LD_INT 5
8146: PPUSH
8147: LD_VAR 0 5
8151: PPUSH
8152: LD_VAR 0 6
8156: PPUSH
8157: LD_INT 6
8159: PPUSH
8160: LD_INT 0
8162: PPUSH
8163: CALL_OW 60
// resources := resources - 50 ;
8167: LD_ADDR_VAR 0 13
8171: PUSH
8172: LD_VAR 0 13
8176: PUSH
8177: LD_INT 50
8179: MINUS
8180: ST_TO_ADDR
// end else
8181: GO 8225
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
8183: LD_VAR 0 3
8187: PPUSH
8188: LD_VAR 0 13
8192: PUSH
8193: LD_INT 10
8195: DIV
8196: PPUSH
8197: LD_VAR 0 5
8201: PPUSH
8202: LD_VAR 0 6
8206: PPUSH
8207: LD_INT 6
8209: PPUSH
8210: LD_INT 0
8212: PPUSH
8213: CALL_OW 60
// resources := 0 ;
8217: LD_ADDR_VAR 0 13
8221: PUSH
8222: LD_INT 0
8224: ST_TO_ADDR
// end ; until resources <= 0 ;
8225: LD_VAR 0 13
8229: PUSH
8230: LD_INT 0
8232: LESSEQUAL
8233: IFFALSE 8129
// end ;
8235: GO 8098
8237: POP
8238: POP
// end ; if Count ( mpBuildings ) and not mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] then
8239: LD_EXP 26
8243: PPUSH
8244: CALL 26397 0 1
8248: IFFALSE 8268
8250: PUSH
8251: LD_EXP 12
8255: PUSH
8256: LD_INT 2
8258: PUSH
8259: LD_INT 8
8261: PUSH
8262: EMPTY
8263: LIST
8264: LIST
8265: IN
8266: NOT
8267: AND
8268: IFFALSE 8346
// begin for j in mpBuildings [ pos ] do
8270: LD_ADDR_VAR 0 3
8274: PUSH
8275: LD_EXP 26
8279: PUSH
8280: LD_VAR 0 8
8284: ARRAY
8285: PUSH
8286: FOR_IN
8287: IFFALSE 8344
// begin bc_level := 0 ;
8289: LD_ADDR_OWVAR 43
8293: PUSH
8294: LD_INT 0
8296: ST_TO_ADDR
// bc_type := j [ 1 ] ;
8297: LD_ADDR_OWVAR 42
8301: PUSH
8302: LD_VAR 0 3
8306: PUSH
8307: LD_INT 1
8309: ARRAY
8310: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
8311: LD_VAR 0 3
8315: PUSH
8316: LD_INT 2
8318: ARRAY
8319: PPUSH
8320: LD_VAR 0 3
8324: PUSH
8325: LD_INT 3
8327: ARRAY
8328: PPUSH
8329: LD_VAR 0 3
8333: PUSH
8334: LD_INT 4
8336: ARRAY
8337: PPUSH
8338: CALL_OW 47
// end ;
8342: GO 8286
8344: POP
8345: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
8346: LD_EXP 35
8350: IFFALSE 8370
8352: PUSH
8353: LD_INT 20
8355: PPUSH
8356: LD_VAR 0 7
8360: PPUSH
8361: CALL_OW 321
8365: PUSH
8366: LD_INT 1
8368: EQUAL
8369: AND
8370: IFFALSE 8387
// SetTech ( tech_SibDet , side , state_researched ) ;
8372: LD_INT 20
8374: PPUSH
8375: LD_VAR 0 7
8379: PPUSH
8380: LD_INT 2
8382: PPUSH
8383: CALL_OW 322
// if not mpArtifacts then
8387: LD_EXP 54
8391: NOT
8392: IFFALSE 8409
// SetTech ( tech_artifact , side , state_disabled ) ;
8394: LD_INT 24
8396: PPUSH
8397: LD_VAR 0 7
8401: PPUSH
8402: LD_INT 0
8404: PPUSH
8405: CALL_OW 322
// if mpSibBomb = 1 then
8409: LD_EXP 37
8413: PUSH
8414: LD_INT 1
8416: EQUAL
8417: IFFALSE 8436
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
8419: LD_INT 25
8421: PPUSH
8422: LD_VAR 0 7
8426: PPUSH
8427: LD_INT 1
8429: PPUSH
8430: CALL_OW 322
// end else
8434: GO 8451
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
8436: LD_INT 25
8438: PPUSH
8439: LD_VAR 0 7
8443: PPUSH
8444: LD_INT 0
8446: PPUSH
8447: CALL_OW 322
// end ; if mpVehicles then
8451: LD_EXP 45
8455: IFFALSE 8554
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
8457: LD_ADDR_VAR 0 3
8461: PUSH
8462: LD_VAR 0 7
8466: PPUSH
8467: LD_VAR 0 9
8471: PPUSH
8472: LD_EXP 45
8476: PPUSH
8477: CALL 9813 0 3
8481: PUSH
8482: FOR_IN
8483: IFFALSE 8552
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
8485: LD_VAR 0 3
8489: PPUSH
8490: LD_INT 0
8492: PPUSH
8493: LD_INT 5
8495: PPUSH
8496: CALL_OW 12
8500: PPUSH
8501: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
8505: LD_VAR 0 3
8509: PPUSH
8510: LD_EXP 30
8514: PUSH
8515: LD_VAR 0 8
8519: ARRAY
8520: PUSH
8521: LD_INT 1
8523: ARRAY
8524: PPUSH
8525: LD_EXP 30
8529: PUSH
8530: LD_VAR 0 8
8534: ARRAY
8535: PUSH
8536: LD_INT 2
8538: ARRAY
8539: PPUSH
8540: LD_INT 12
8542: PPUSH
8543: LD_INT 0
8545: PPUSH
8546: CALL_OW 50
// end ;
8550: GO 8482
8552: POP
8553: POP
// end ; uc_nation := nation ;
8554: LD_ADDR_OWVAR 21
8558: PUSH
8559: LD_VAR 0 9
8563: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
8564: LD_EXP 12
8568: PUSH
8569: LD_INT 6
8571: PUSH
8572: LD_INT 7
8574: PUSH
8575: EMPTY
8576: LIST
8577: LIST
8578: IN
8579: IFFALSE 8604
8581: PUSH
8582: LD_EXP 16
8586: PUSH
8587: LD_VAR 0 2
8591: ARRAY
8592: PUSH
8593: LD_INT 1
8595: PUSH
8596: LD_INT 2
8598: PUSH
8599: EMPTY
8600: LIST
8601: LIST
8602: IN
8603: AND
8604: IFFALSE 8652
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
8606: LD_ADDR_VAR 0 11
8610: PUSH
8611: LD_VAR 0 7
8615: PPUSH
8616: LD_VAR 0 9
8620: PPUSH
8621: LD_EXP 33
8625: PUSH
8626: LD_EXP 33
8630: PUSH
8631: LD_INT 2
8633: DIV
8634: PLUS
8635: PPUSH
8636: LD_EXP 34
8640: PUSH
8641: LD_INT 1
8643: PLUS
8644: PPUSH
8645: CALL 9268 0 4
8649: ST_TO_ADDR
8650: GO 8682
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
8652: LD_ADDR_VAR 0 11
8656: PUSH
8657: LD_VAR 0 7
8661: PPUSH
8662: LD_VAR 0 9
8666: PPUSH
8667: LD_EXP 33
8671: PPUSH
8672: LD_EXP 34
8676: PPUSH
8677: CALL 9268 0 4
8681: ST_TO_ADDR
// for j in team do
8682: LD_ADDR_VAR 0 3
8686: PUSH
8687: LD_VAR 0 11
8691: PUSH
8692: FOR_IN
8693: IFFALSE 8742
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
8695: LD_VAR 0 3
8699: PPUSH
8700: LD_EXP 30
8704: PUSH
8705: LD_VAR 0 8
8709: ARRAY
8710: PUSH
8711: LD_INT 1
8713: ARRAY
8714: PPUSH
8715: LD_EXP 30
8719: PUSH
8720: LD_VAR 0 8
8724: ARRAY
8725: PUSH
8726: LD_INT 2
8728: ARRAY
8729: PPUSH
8730: LD_INT 12
8732: PPUSH
8733: LD_INT 0
8735: PPUSH
8736: CALL_OW 50
8740: GO 8692
8742: POP
8743: POP
// if mpApemans then
8744: LD_EXP 39
8748: IFFALSE 8854
// begin for j := 1 to mpApemans do
8750: LD_ADDR_VAR 0 3
8754: PUSH
8755: DOUBLE
8756: LD_INT 1
8758: DEC
8759: ST_TO_ADDR
8760: LD_EXP 39
8764: PUSH
8765: FOR_TO
8766: IFFALSE 8852
// begin PrepareApeman ( - 5 ) ;
8768: LD_INT 5
8770: NEG
8771: PPUSH
8772: CALL 58500 0 1
// ape := CreateHuman ;
8776: LD_ADDR_VAR 0 10
8780: PUSH
8781: CALL_OW 44
8785: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
8786: LD_ADDR_EXP 41
8790: PUSH
8791: LD_EXP 41
8795: PPUSH
8796: LD_VAR 0 8
8800: PPUSH
8801: LD_EXP 41
8805: PUSH
8806: LD_VAR 0 8
8810: ARRAY
8811: PPUSH
8812: LD_VAR 0 10
8816: PPUSH
8817: CALL 62373 0 2
8821: PPUSH
8822: CALL_OW 1
8826: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
8827: LD_VAR 0 10
8831: PPUSH
8832: LD_EXP 40
8836: PUSH
8837: LD_VAR 0 8
8841: ARRAY
8842: PPUSH
8843: LD_INT 0
8845: PPUSH
8846: CALL_OW 49
// end ;
8850: GO 8765
8852: POP
8853: POP
// end ; end ;
8854: GO 7396
8856: POP
8857: POP
// if not mpTeamGame then
8858: LD_EXP 20
8862: NOT
8863: IFFALSE 8961
// begin for i := 1 to 8 do
8865: LD_ADDR_VAR 0 2
8869: PUSH
8870: DOUBLE
8871: LD_INT 1
8873: DEC
8874: ST_TO_ADDR
8875: LD_INT 8
8877: PUSH
8878: FOR_TO
8879: IFFALSE 8957
// for j := 1 to 8 do
8881: LD_ADDR_VAR 0 3
8885: PUSH
8886: DOUBLE
8887: LD_INT 1
8889: DEC
8890: ST_TO_ADDR
8891: LD_INT 8
8893: PUSH
8894: FOR_TO
8895: IFFALSE 8953
// if i <> j then
8897: LD_VAR 0 2
8901: PUSH
8902: LD_VAR 0 3
8906: NONEQUAL
8907: IFFALSE 8931
// SetAttitude ( i , j , att_neutral , true ) else
8909: LD_VAR 0 2
8913: PPUSH
8914: LD_VAR 0 3
8918: PPUSH
8919: LD_INT 0
8921: PPUSH
8922: LD_INT 1
8924: PPUSH
8925: CALL_OW 80
8929: GO 8951
// SetAttitude ( i , j , att_friend , true ) ;
8931: LD_VAR 0 2
8935: PPUSH
8936: LD_VAR 0 3
8940: PPUSH
8941: LD_INT 1
8943: PPUSH
8944: LD_INT 1
8946: PPUSH
8947: CALL_OW 80
8951: GO 8894
8953: POP
8954: POP
8955: GO 8878
8957: POP
8958: POP
// end else
8959: GO 9136
// begin if mpSharedVision then
8961: LD_EXP 25
8965: IFFALSE 9030
// begin for i in mpTeams do
8967: LD_ADDR_VAR 0 2
8971: PUSH
8972: LD_EXP 19
8976: PUSH
8977: FOR_IN
8978: IFFALSE 9028
// for j := 2 to i do
8980: LD_ADDR_VAR 0 3
8984: PUSH
8985: DOUBLE
8986: LD_INT 2
8988: DEC
8989: ST_TO_ADDR
8990: LD_VAR 0 2
8994: PUSH
8995: FOR_TO
8996: IFFALSE 9024
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
8998: LD_VAR 0 2
9002: PUSH
9003: LD_VAR 0 3
9007: ARRAY
9008: PPUSH
9009: LD_VAR 0 2
9013: PUSH
9014: LD_INT 1
9016: ARRAY
9017: PPUSH
9018: CALL_OW 343
9022: GO 8995
9024: POP
9025: POP
9026: GO 8977
9028: POP
9029: POP
// end ; for i := 1 to 8 do
9030: LD_ADDR_VAR 0 2
9034: PUSH
9035: DOUBLE
9036: LD_INT 1
9038: DEC
9039: ST_TO_ADDR
9040: LD_INT 8
9042: PUSH
9043: FOR_TO
9044: IFFALSE 9134
// for j := 1 to 8 do
9046: LD_ADDR_VAR 0 3
9050: PUSH
9051: DOUBLE
9052: LD_INT 1
9054: DEC
9055: ST_TO_ADDR
9056: LD_INT 8
9058: PUSH
9059: FOR_TO
9060: IFFALSE 9130
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
9062: LD_EXP 17
9066: PUSH
9067: LD_VAR 0 2
9071: ARRAY
9072: PUSH
9073: LD_EXP 17
9077: PUSH
9078: LD_VAR 0 3
9082: ARRAY
9083: EQUAL
9084: IFFALSE 9108
// SetAttitude ( i , j , att_friend , true ) else
9086: LD_VAR 0 2
9090: PPUSH
9091: LD_VAR 0 3
9095: PPUSH
9096: LD_INT 1
9098: PPUSH
9099: LD_INT 1
9101: PPUSH
9102: CALL_OW 80
9106: GO 9128
// SetAttitude ( i , j , att_enemy , true ) ;
9108: LD_VAR 0 2
9112: PPUSH
9113: LD_VAR 0 3
9117: PPUSH
9118: LD_INT 2
9120: PPUSH
9121: LD_INT 1
9123: PPUSH
9124: CALL_OW 80
9128: GO 9059
9130: POP
9131: POP
9132: GO 9043
9134: POP
9135: POP
// end ; music_nat := mpSideNations [ your_side ] ;
9136: LD_ADDR_OWVAR 71
9140: PUSH
9141: LD_EXP 18
9145: PUSH
9146: LD_OWVAR 2
9150: ARRAY
9151: ST_TO_ADDR
// if IAmSpec then
9152: CALL_OW 531
9156: IFFALSE 9197
// begin FogOff ( true ) ;
9158: LD_INT 1
9160: PPUSH
9161: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
9165: LD_EXP 38
9169: PUSH
9170: LD_INT 1
9172: ARRAY
9173: PUSH
9174: LD_INT 2
9176: DIV
9177: PPUSH
9178: LD_EXP 38
9182: PUSH
9183: LD_INT 2
9185: ARRAY
9186: PUSH
9187: LD_INT 2
9189: DIV
9190: PPUSH
9191: CALL_OW 86
// end else
9195: GO 9243
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
9197: LD_EXP 30
9201: PUSH
9202: LD_EXP 16
9206: PUSH
9207: LD_OWVAR 2
9211: ARRAY
9212: ARRAY
9213: PUSH
9214: LD_INT 1
9216: ARRAY
9217: PPUSH
9218: LD_EXP 30
9222: PUSH
9223: LD_EXP 16
9227: PUSH
9228: LD_OWVAR 2
9232: ARRAY
9233: ARRAY
9234: PUSH
9235: LD_INT 2
9237: ARRAY
9238: PPUSH
9239: CALL_OW 86
// end ; BeginBuildUp ;
9243: CALL 10346 0 0
// enable ( mpActive ) ;
9247: LD_INT 100
9249: ENABLE_MARKED
// enable ( mpGameType ) ;
9250: LD_EXP 12
9254: ENABLE_MARKED
// mpGameActive := true ;
9255: LD_ADDR_EXP 48
9259: PUSH
9260: LD_INT 1
9262: ST_TO_ADDR
// end ;
9263: LD_VAR 0 1
9267: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class , commander ; begin
9268: LD_INT 0
9270: PPUSH
9271: PPUSH
9272: PPUSH
9273: PPUSH
9274: PPUSH
// result := [ ] ;
9275: LD_ADDR_VAR 0 5
9279: PUSH
9280: EMPTY
9281: ST_TO_ADDR
// class := class_soldier ;
9282: LD_ADDR_VAR 0 8
9286: PUSH
9287: LD_INT 1
9289: ST_TO_ADDR
// uc_side := side ;
9290: LD_ADDR_OWVAR 20
9294: PUSH
9295: LD_VAR 0 1
9299: ST_TO_ADDR
// uc_nation := nation ;
9300: LD_ADDR_OWVAR 21
9304: PUSH
9305: LD_VAR 0 2
9309: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
9310: LD_ADDR_OWVAR 26
9314: PUSH
9315: LD_OWVAR 19
9319: PUSH
9320: LD_VAR 0 1
9324: ARRAY
9325: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
9326: LD_INT 1
9328: PPUSH
9329: LD_INT 2
9331: PPUSH
9332: CALL_OW 12
9336: PPUSH
9337: LD_VAR 0 8
9341: PPUSH
9342: LD_VAR 0 4
9346: PUSH
9347: LD_INT 2
9349: PLUS
9350: PPUSH
9351: CALL_OW 380
// hc_importance := 105 ;
9355: LD_ADDR_OWVAR 32
9359: PUSH
9360: LD_INT 105
9362: ST_TO_ADDR
// if Multiplayer then
9363: LD_OWVAR 4
9367: IFFALSE 9407
// begin hc_gallery := MULTIAVATARS ;
9369: LD_ADDR_OWVAR 33
9373: PUSH
9374: LD_STRING MULTIAVATARS
9376: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
9377: LD_ADDR_OWVAR 34
9381: PUSH
9382: LD_VAR 0 1
9386: PPUSH
9387: CALL_OW 525
9391: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
9392: LD_ADDR_OWVAR 27
9396: PUSH
9397: LD_VAR 0 1
9401: PPUSH
9402: CALL_OW 526
9406: ST_TO_ADDR
// end ; commander := CreateHuman ;
9407: LD_ADDR_VAR 0 9
9411: PUSH
9412: CALL_OW 44
9416: ST_TO_ADDR
// result := Join ( result , commander ) ;
9417: LD_ADDR_VAR 0 5
9421: PUSH
9422: LD_VAR 0 5
9426: PPUSH
9427: LD_VAR 0 9
9431: PPUSH
9432: CALL 62373 0 2
9436: ST_TO_ADDR
// mpCommanders := Replace ( mpCommanders , side , commander ) ;
9437: LD_ADDR_EXP 50
9441: PUSH
9442: LD_EXP 50
9446: PPUSH
9447: LD_VAR 0 1
9451: PPUSH
9452: LD_VAR 0 9
9456: PPUSH
9457: CALL_OW 1
9461: ST_TO_ADDR
// if mpTeamPreset then
9462: LD_LOC 1
9466: IFFALSE 9562
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
9468: LD_LOC 1
9472: PUSH
9473: LD_INT 1
9475: ARRAY
9476: PPUSH
9477: LD_VAR 0 5
9481: PUSH
9482: LD_VAR 0 5
9486: ARRAY
9487: PPUSH
9488: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
9492: LD_VAR 0 5
9496: PUSH
9497: LD_VAR 0 5
9501: ARRAY
9502: PPUSH
9503: LD_INT 1
9505: PPUSH
9506: LD_LOC 1
9510: PUSH
9511: LD_INT 1
9513: ARRAY
9514: PPUSH
9515: LD_INT 1
9517: PPUSH
9518: CALL_OW 260
9522: PPUSH
9523: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
9527: LD_VAR 0 5
9531: PUSH
9532: LD_VAR 0 5
9536: ARRAY
9537: PPUSH
9538: LD_INT 2
9540: PPUSH
9541: LD_LOC 1
9545: PUSH
9546: LD_INT 1
9548: ARRAY
9549: PPUSH
9550: LD_INT 2
9552: PPUSH
9553: CALL_OW 260
9557: PPUSH
9558: CALL_OW 239
// end ; InitHc_All ( ) ;
9562: CALL_OW 584
// class := 2 ;
9566: LD_ADDR_VAR 0 8
9570: PUSH
9571: LD_INT 2
9573: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
9574: LD_ADDR_VAR 0 6
9578: PUSH
9579: DOUBLE
9580: LD_INT 1
9582: DEC
9583: ST_TO_ADDR
9584: LD_VAR 0 3
9588: PUSH
9589: LD_INT 1
9591: MINUS
9592: PUSH
9593: FOR_TO
9594: IFFALSE 9789
// begin PrepareHuman ( false , class , skill ) ;
9596: LD_INT 0
9598: PPUSH
9599: LD_VAR 0 8
9603: PPUSH
9604: LD_VAR 0 4
9608: PPUSH
9609: CALL_OW 380
// un := CreateHuman ;
9613: LD_ADDR_VAR 0 7
9617: PUSH
9618: CALL_OW 44
9622: ST_TO_ADDR
// result := Join ( result , un ) ;
9623: LD_ADDR_VAR 0 5
9627: PUSH
9628: LD_VAR 0 5
9632: PPUSH
9633: LD_VAR 0 7
9637: PPUSH
9638: CALL 62373 0 2
9642: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
9643: LD_LOC 1
9647: PPUSH
9648: CALL 26397 0 1
9652: PUSH
9653: LD_VAR 0 3
9657: GREATEREQUAL
9658: IFFALSE 9754
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
9660: LD_LOC 1
9664: PUSH
9665: LD_VAR 0 6
9669: PUSH
9670: LD_INT 1
9672: PLUS
9673: ARRAY
9674: PPUSH
9675: LD_VAR 0 7
9679: PPUSH
9680: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
9684: LD_VAR 0 7
9688: PPUSH
9689: LD_INT 1
9691: PPUSH
9692: LD_LOC 1
9696: PUSH
9697: LD_VAR 0 6
9701: PUSH
9702: LD_INT 1
9704: PLUS
9705: ARRAY
9706: PPUSH
9707: LD_INT 1
9709: PPUSH
9710: CALL_OW 260
9714: PPUSH
9715: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
9719: LD_VAR 0 7
9723: PPUSH
9724: LD_INT 2
9726: PPUSH
9727: LD_LOC 1
9731: PUSH
9732: LD_VAR 0 6
9736: PUSH
9737: LD_INT 1
9739: PLUS
9740: ARRAY
9741: PPUSH
9742: LD_INT 2
9744: PPUSH
9745: CALL_OW 260
9749: PPUSH
9750: CALL_OW 239
// end ; class := Inc ( class ) ;
9754: LD_ADDR_VAR 0 8
9758: PUSH
9759: LD_VAR 0 8
9763: PPUSH
9764: CALL 63746 0 1
9768: ST_TO_ADDR
// if class = 5 then
9769: LD_VAR 0 8
9773: PUSH
9774: LD_INT 5
9776: EQUAL
9777: IFFALSE 9787
// class := 1 ;
9779: LD_ADDR_VAR 0 8
9783: PUSH
9784: LD_INT 1
9786: ST_TO_ADDR
// end ;
9787: GO 9593
9789: POP
9790: POP
// if not mpTeamPreset then
9791: LD_LOC 1
9795: NOT
9796: IFFALSE 9808
// mpTeamPreset := result ;
9798: LD_ADDR_LOC 1
9802: PUSH
9803: LD_VAR 0 5
9807: ST_TO_ADDR
// end ;
9808: LD_VAR 0 5
9812: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
9813: LD_INT 0
9815: PPUSH
9816: PPUSH
// result := [ ] ;
9817: LD_ADDR_VAR 0 4
9821: PUSH
9822: EMPTY
9823: ST_TO_ADDR
// if not vehicles then
9824: LD_VAR 0 3
9828: NOT
9829: IFFALSE 9833
// exit ;
9831: GO 10047
// for i := 1 to vehicles [ nation ] do
9833: LD_ADDR_VAR 0 5
9837: PUSH
9838: DOUBLE
9839: LD_INT 1
9841: DEC
9842: ST_TO_ADDR
9843: LD_VAR 0 3
9847: PUSH
9848: LD_VAR 0 2
9852: ARRAY
9853: PUSH
9854: FOR_TO
9855: IFFALSE 10045
// begin uc_side := side ;
9857: LD_ADDR_OWVAR 20
9861: PUSH
9862: LD_VAR 0 1
9866: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
9867: LD_VAR 0 3
9871: PUSH
9872: LD_VAR 0 2
9876: ARRAY
9877: PUSH
9878: LD_VAR 0 5
9882: ARRAY
9883: PPUSH
9884: CALL 26397 0 1
9888: PUSH
9889: LD_INT 4
9891: GREATER
9892: IFFALSE 9922
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
9894: LD_ADDR_OWVAR 21
9898: PUSH
9899: LD_VAR 0 3
9903: PUSH
9904: LD_VAR 0 2
9908: ARRAY
9909: PUSH
9910: LD_VAR 0 5
9914: ARRAY
9915: PUSH
9916: LD_INT 5
9918: ARRAY
9919: ST_TO_ADDR
9920: GO 9932
// uc_nation := nation ;
9922: LD_ADDR_OWVAR 21
9926: PUSH
9927: LD_VAR 0 2
9931: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
9932: LD_VAR 0 3
9936: PUSH
9937: LD_VAR 0 2
9941: ARRAY
9942: PUSH
9943: LD_VAR 0 5
9947: ARRAY
9948: PUSH
9949: LD_INT 1
9951: ARRAY
9952: PPUSH
9953: LD_VAR 0 3
9957: PUSH
9958: LD_VAR 0 2
9962: ARRAY
9963: PUSH
9964: LD_VAR 0 5
9968: ARRAY
9969: PUSH
9970: LD_INT 2
9972: ARRAY
9973: PPUSH
9974: LD_VAR 0 3
9978: PUSH
9979: LD_VAR 0 2
9983: ARRAY
9984: PUSH
9985: LD_VAR 0 5
9989: ARRAY
9990: PUSH
9991: LD_INT 3
9993: ARRAY
9994: PPUSH
9995: LD_VAR 0 3
9999: PUSH
10000: LD_VAR 0 2
10004: ARRAY
10005: PUSH
10006: LD_VAR 0 5
10010: ARRAY
10011: PUSH
10012: LD_INT 4
10014: ARRAY
10015: PPUSH
10016: LD_INT 80
10018: PPUSH
10019: CALL 29193 0 5
// result := Join ( result , CreateVehicle ) ;
10023: LD_ADDR_VAR 0 4
10027: PUSH
10028: LD_VAR 0 4
10032: PPUSH
10033: CALL_OW 45
10037: PPUSH
10038: CALL 62373 0 2
10042: ST_TO_ADDR
// end ;
10043: GO 9854
10045: POP
10046: POP
// end ;
10047: LD_VAR 0 4
10051: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
10052: LD_INT 0
10054: PPUSH
10055: PPUSH
// for i in mpBattleFlags do
10056: LD_ADDR_VAR 0 3
10060: PUSH
10061: LD_EXP 32
10065: PUSH
10066: FOR_IN
10067: IFFALSE 10144
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
10069: LD_VAR 0 3
10073: PPUSH
10074: LD_INT 1
10076: PUSH
10077: LD_VAR 0 1
10081: PUSH
10082: EMPTY
10083: LIST
10084: LIST
10085: PUSH
10086: LD_INT 2
10088: PUSH
10089: LD_VAR 0 1
10093: PUSH
10094: LD_REAL  7.00000000000000E-0001
10097: MUL
10098: PUSH
10099: EMPTY
10100: LIST
10101: LIST
10102: PUSH
10103: LD_INT 3
10105: PUSH
10106: LD_VAR 0 1
10110: PUSH
10111: LD_REAL  4.00000000000000E-0001
10114: MUL
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: PUSH
10120: LD_INT 20
10122: PUSH
10123: LD_VAR 0 1
10127: PUSH
10128: EMPTY
10129: LIST
10130: LIST
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: PPUSH
10138: CALL_OW 423
10142: GO 10066
10144: POP
10145: POP
// end ;
10146: LD_VAR 0 2
10150: RET
// every 0 0$1 trigger mpActive do var i , strength ;
10151: LD_INT 100
10153: IFFALSE 10248
10155: GO 10157
10157: DISABLE
10158: LD_INT 0
10160: PPUSH
10161: PPUSH
// begin if mpBattleFlag <= 0 then
10162: LD_EXP 31
10166: PUSH
10167: LD_INT 0
10169: LESSEQUAL
10170: IFFALSE 10174
// exit ;
10172: GO 10248
// strength := 100 ;
10174: LD_ADDR_VAR 0 2
10178: PUSH
10179: LD_INT 100
10181: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
10182: LD_EXP 31
10186: PPUSH
10187: CALL_OW 67
// strength := Dec ( strength ) ;
10191: LD_ADDR_VAR 0 2
10195: PUSH
10196: LD_VAR 0 2
10200: PPUSH
10201: CALL 63768 0 1
10205: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
10206: LD_VAR 0 2
10210: PPUSH
10211: CALL 10052 0 1
// until not strength ;
10215: LD_VAR 0 2
10219: NOT
10220: IFFALSE 10182
// for i in mpBattleFlags do
10222: LD_ADDR_VAR 0 1
10226: PUSH
10227: LD_EXP 32
10231: PUSH
10232: FOR_IN
10233: IFFALSE 10246
// KillBattleFlag ( i ) ;
10235: LD_VAR 0 1
10239: PPUSH
10240: CALL_OW 419
10244: GO 10232
10246: POP
10247: POP
// end ;
10248: PPOPN 2
10250: END
// every 0 0$1 marked mpActive do var side , tmp ;
10251: GO 10253
10253: DISABLE
10254: LD_INT 0
10256: PPUSH
10257: PPUSH
// begin if mpSibBomb <= 1 then
10258: LD_EXP 37
10262: PUSH
10263: LD_INT 1
10265: LESSEQUAL
10266: IFFALSE 10270
// exit ;
10268: GO 10343
// tmp := mpSibBomb ;
10270: LD_ADDR_VAR 0 2
10274: PUSH
10275: LD_EXP 37
10279: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10280: LD_INT 35
10282: PPUSH
10283: CALL_OW 67
// tmp := tmp - 0 0$1 ;
10287: LD_ADDR_VAR 0 2
10291: PUSH
10292: LD_VAR 0 2
10296: PUSH
10297: LD_INT 35
10299: MINUS
10300: ST_TO_ADDR
// until not tmp ;
10301: LD_VAR 0 2
10305: NOT
10306: IFFALSE 10280
// for side := 1 to 8 do
10308: LD_ADDR_VAR 0 1
10312: PUSH
10313: DOUBLE
10314: LD_INT 1
10316: DEC
10317: ST_TO_ADDR
10318: LD_INT 8
10320: PUSH
10321: FOR_TO
10322: IFFALSE 10341
// SetTech ( tech_SibFiss , side , state_enabled ) ;
10324: LD_INT 25
10326: PPUSH
10327: LD_VAR 0 1
10331: PPUSH
10332: LD_INT 1
10334: PPUSH
10335: CALL_OW 322
10339: GO 10321
10341: POP
10342: POP
// end ;
10343: PPOPN 2
10345: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
10346: LD_INT 0
10348: PPUSH
10349: PPUSH
10350: PPUSH
// mpBuildUpTimeDelay := 0 ;
10351: LD_ADDR_EXP 57
10355: PUSH
10356: LD_INT 0
10358: ST_TO_ADDR
// if not mpBuildUpTime then
10359: LD_EXP 29
10363: NOT
10364: IFFALSE 10368
// exit ;
10366: GO 10557
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
10368: LD_ADDR_EXP 57
10372: PUSH
10373: LD_INT 8400
10375: PUSH
10376: LD_INT 2100
10378: PUSH
10379: LD_EXP 29
10383: MUL
10384: PLUS
10385: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
10386: LD_ADDR_EXP 58
10390: PUSH
10391: LD_INT 1
10393: ST_TO_ADDR
// for i := 1 to 8 do
10394: LD_ADDR_VAR 0 2
10398: PUSH
10399: DOUBLE
10400: LD_INT 1
10402: DEC
10403: ST_TO_ADDR
10404: LD_INT 8
10406: PUSH
10407: FOR_TO
10408: IFFALSE 10555
// if mpSidePositions [ i ] then
10410: LD_EXP 16
10414: PUSH
10415: LD_VAR 0 2
10419: ARRAY
10420: IFFALSE 10553
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
10422: LD_EXP 28
10426: PUSH
10427: LD_EXP 16
10431: PUSH
10432: LD_VAR 0 2
10436: ARRAY
10437: ARRAY
10438: PPUSH
10439: LD_INT 5
10441: PPUSH
10442: CALL_OW 424
// for j := 1 to 8 do
10446: LD_ADDR_VAR 0 3
10450: PUSH
10451: DOUBLE
10452: LD_INT 1
10454: DEC
10455: ST_TO_ADDR
10456: LD_INT 8
10458: PUSH
10459: FOR_TO
10460: IFFALSE 10551
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
10462: LD_EXP 16
10466: PUSH
10467: LD_VAR 0 3
10471: ARRAY
10472: IFFALSE 10521
10474: PUSH
10475: LD_EXP 17
10479: PUSH
10480: LD_VAR 0 2
10484: ARRAY
10485: PUSH
10486: LD_EXP 17
10490: PUSH
10491: LD_VAR 0 3
10495: ARRAY
10496: NONEQUAL
10497: IFTRUE 10520
10499: PUSH
10500: LD_EXP 20
10504: NOT
10505: IFFALSE 10519
10507: PUSH
10508: LD_VAR 0 2
10512: PUSH
10513: LD_VAR 0 3
10517: NONEQUAL
10518: AND
10519: OR
10520: AND
10521: IFFALSE 10549
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
10523: LD_VAR 0 3
10527: PPUSH
10528: LD_EXP 28
10532: PUSH
10533: LD_EXP 16
10537: PUSH
10538: LD_VAR 0 2
10542: ARRAY
10543: ARRAY
10544: PPUSH
10545: CALL_OW 333
10549: GO 10459
10551: POP
10552: POP
// end ;
10553: GO 10407
10555: POP
10556: POP
// end ;
10557: LD_VAR 0 1
10561: RET
// function EndBuildUp ; var i , j ; begin
10562: LD_INT 0
10564: PPUSH
10565: PPUSH
10566: PPUSH
// mpBuildUpTimeActive := false ;
10567: LD_ADDR_EXP 58
10571: PUSH
10572: LD_INT 0
10574: ST_TO_ADDR
// for i := 1 to 8 do
10575: LD_ADDR_VAR 0 2
10579: PUSH
10580: DOUBLE
10581: LD_INT 1
10583: DEC
10584: ST_TO_ADDR
10585: LD_INT 8
10587: PUSH
10588: FOR_TO
10589: IFFALSE 10736
// if mpSidePositions [ i ] then
10591: LD_EXP 16
10595: PUSH
10596: LD_VAR 0 2
10600: ARRAY
10601: IFFALSE 10734
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
10603: LD_EXP 28
10607: PUSH
10608: LD_EXP 16
10612: PUSH
10613: LD_VAR 0 2
10617: ARRAY
10618: ARRAY
10619: PPUSH
10620: LD_INT 0
10622: PPUSH
10623: CALL_OW 424
// for j := 1 to 8 do
10627: LD_ADDR_VAR 0 3
10631: PUSH
10632: DOUBLE
10633: LD_INT 1
10635: DEC
10636: ST_TO_ADDR
10637: LD_INT 8
10639: PUSH
10640: FOR_TO
10641: IFFALSE 10732
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
10643: LD_EXP 16
10647: PUSH
10648: LD_VAR 0 3
10652: ARRAY
10653: IFFALSE 10702
10655: PUSH
10656: LD_EXP 17
10660: PUSH
10661: LD_VAR 0 2
10665: ARRAY
10666: PUSH
10667: LD_EXP 17
10671: PUSH
10672: LD_VAR 0 3
10676: ARRAY
10677: NONEQUAL
10678: IFTRUE 10701
10680: PUSH
10681: LD_EXP 20
10685: NOT
10686: IFFALSE 10700
10688: PUSH
10689: LD_VAR 0 2
10693: PUSH
10694: LD_VAR 0 3
10698: NONEQUAL
10699: AND
10700: OR
10701: AND
10702: IFFALSE 10730
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
10704: LD_VAR 0 3
10708: PPUSH
10709: LD_EXP 28
10713: PUSH
10714: LD_EXP 16
10718: PUSH
10719: LD_VAR 0 2
10723: ARRAY
10724: ARRAY
10725: PPUSH
10726: CALL_OW 334
10730: GO 10640
10732: POP
10733: POP
// end ;
10734: GO 10588
10736: POP
10737: POP
// end ;
10738: LD_VAR 0 1
10742: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
10743: LD_EXP 58
10747: IFFALSE 10928
10749: GO 10751
10751: DISABLE
10752: LD_INT 0
10754: PPUSH
10755: PPUSH
// begin for i := 1 to 8 do
10756: LD_ADDR_VAR 0 1
10760: PUSH
10761: DOUBLE
10762: LD_INT 1
10764: DEC
10765: ST_TO_ADDR
10766: LD_INT 8
10768: PUSH
10769: FOR_TO
10770: IFFALSE 10925
// if mpSidePositions [ i ] then
10772: LD_EXP 16
10776: PUSH
10777: LD_VAR 0 1
10781: ARRAY
10782: IFFALSE 10923
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
10784: LD_ADDR_VAR 0 2
10788: PUSH
10789: LD_EXP 28
10793: PUSH
10794: LD_EXP 16
10798: PUSH
10799: LD_VAR 0 1
10803: ARRAY
10804: ARRAY
10805: PPUSH
10806: LD_INT 2
10808: PUSH
10809: LD_INT 21
10811: PUSH
10812: LD_INT 1
10814: PUSH
10815: EMPTY
10816: LIST
10817: LIST
10818: PUSH
10819: LD_INT 21
10821: PUSH
10822: LD_INT 2
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: LIST
10833: PUSH
10834: LD_INT 22
10836: PUSH
10837: LD_OWVAR 2
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PPUSH
10850: CALL_OW 70
10854: PUSH
10855: FOR_IN
10856: IFFALSE 10921
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
10858: LD_EXP 17
10862: PUSH
10863: LD_VAR 0 1
10867: ARRAY
10868: PUSH
10869: LD_EXP 17
10873: PUSH
10874: LD_OWVAR 2
10878: ARRAY
10879: NONEQUAL
10880: IFTRUE 10903
10882: PUSH
10883: LD_EXP 20
10887: NOT
10888: IFFALSE 10902
10890: PUSH
10891: LD_VAR 0 1
10895: PUSH
10896: LD_OWVAR 2
10900: NONEQUAL
10901: AND
10902: OR
10903: IFFALSE 10919
// ComMoveToArea ( un , BuildUpEscape ) ;
10905: LD_VAR 0 2
10909: PPUSH
10910: LD_EXP 1
10914: PPUSH
10915: CALL_OW 113
10919: GO 10855
10921: POP
10922: POP
10923: GO 10769
10925: POP
10926: POP
// enable ;
10927: ENABLE
// end ;
10928: PPOPN 2
10930: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
10931: LD_EXP 29
10935: IFFALSE 10985
10937: GO 10939
10939: DISABLE
10940: LD_INT 0
10942: PPUSH
// begin tmp := mpBuildUpTime ;
10943: LD_ADDR_VAR 0 1
10947: PUSH
10948: LD_EXP 29
10952: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10953: LD_INT 35
10955: PPUSH
10956: CALL_OW 67
// tmp := tmp - 0 0$1 ;
10960: LD_ADDR_VAR 0 1
10964: PUSH
10965: LD_VAR 0 1
10969: PUSH
10970: LD_INT 35
10972: MINUS
10973: ST_TO_ADDR
// until not tmp ;
10974: LD_VAR 0 1
10978: NOT
10979: IFFALSE 10953
// EndBuildUp ;
10981: CALL 10562 0 0
// end ;
10985: PPOPN 1
10987: END
// every 0 0$1 trigger mpActive marked mpWin do
10988: LD_INT 100
10990: IFFALSE 11024
10992: GO 10994
10994: DISABLE
// begin if IAmServer then
10995: CALL_OW 518
10999: IFFALSE 11008
// wait ( 0 0$3 ) ;
11001: LD_INT 105
11003: PPUSH
11004: CALL_OW 67
// if Multiplayer then
11008: LD_OWVAR 4
11012: IFFALSE 11020
// YouWinInMultiplayer else
11014: CALL_OW 106
11018: GO 11024
// YouWin ;
11020: CALL_OW 103
// end ;
11024: END
// export function HasPowerByGameType ( gameType , side ) ; begin
11025: LD_INT 0
11027: PPUSH
// result := false ;
11028: LD_ADDR_VAR 0 3
11032: PUSH
11033: LD_INT 0
11035: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
11036: LD_VAR 0 1
11040: PUSH
11041: LD_INT 1
11043: DOUBLE
11044: EQUAL
11045: IFTRUE 11067
11047: LD_INT 5
11049: DOUBLE
11050: EQUAL
11051: IFTRUE 11067
11053: LD_INT 6
11055: DOUBLE
11056: EQUAL
11057: IFTRUE 11067
11059: LD_INT 7
11061: DOUBLE
11062: EQUAL
11063: IFTRUE 11067
11065: GO 11140
11067: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
11068: LD_ADDR_VAR 0 3
11072: PUSH
11073: LD_INT 22
11075: PUSH
11076: LD_VAR 0 2
11080: PUSH
11081: EMPTY
11082: LIST
11083: LIST
11084: PUSH
11085: LD_INT 2
11087: PUSH
11088: LD_INT 21
11090: PUSH
11091: LD_INT 1
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: PUSH
11098: LD_INT 33
11100: PUSH
11101: LD_INT 3
11103: PUSH
11104: EMPTY
11105: LIST
11106: LIST
11107: PUSH
11108: LD_INT 33
11110: PUSH
11111: LD_INT 5
11113: PUSH
11114: EMPTY
11115: LIST
11116: LIST
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: PUSH
11124: EMPTY
11125: LIST
11126: LIST
11127: PPUSH
11128: CALL_OW 69
11132: PPUSH
11133: CALL 26397 0 1
11137: ST_TO_ADDR
// end ; GameTypeSurvival :
11138: GO 11536
11140: LD_INT 2
11142: DOUBLE
11143: EQUAL
11144: IFTRUE 11148
11146: GO 11278
11148: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
11149: LD_ADDR_VAR 0 3
11153: PUSH
11154: LD_INT 22
11156: PUSH
11157: LD_VAR 0 2
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: PUSH
11166: LD_INT 2
11168: PUSH
11169: LD_INT 30
11171: PUSH
11172: LD_INT 0
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: PUSH
11179: LD_INT 30
11181: PUSH
11182: LD_INT 1
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: LIST
11193: PUSH
11194: EMPTY
11195: LIST
11196: LIST
11197: PPUSH
11198: CALL_OW 69
11202: PPUSH
11203: CALL 26397 0 1
11207: IFFALSE 11275
11209: PUSH
11210: LD_INT 22
11212: PUSH
11213: LD_VAR 0 2
11217: PUSH
11218: EMPTY
11219: LIST
11220: LIST
11221: PUSH
11222: LD_INT 2
11224: PUSH
11225: LD_INT 21
11227: PUSH
11228: LD_INT 1
11230: PUSH
11231: EMPTY
11232: LIST
11233: LIST
11234: PUSH
11235: LD_INT 33
11237: PUSH
11238: LD_INT 3
11240: PUSH
11241: EMPTY
11242: LIST
11243: LIST
11244: PUSH
11245: LD_INT 33
11247: PUSH
11248: LD_INT 5
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PPUSH
11265: CALL_OW 69
11269: PPUSH
11270: CALL 26397 0 1
11274: AND
11275: ST_TO_ADDR
// end ; GameTypeSurvivalH :
11276: GO 11536
11278: LD_INT 8
11280: DOUBLE
11281: EQUAL
11282: IFTRUE 11286
11284: GO 11435
11286: POP
// begin result := IsLive ( mpCommanders [ side ] ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
11287: LD_ADDR_VAR 0 3
11291: PUSH
11292: LD_EXP 50
11296: PUSH
11297: LD_VAR 0 2
11301: ARRAY
11302: PPUSH
11303: CALL_OW 300
11307: IFFALSE 11364
11309: PUSH
11310: LD_INT 22
11312: PUSH
11313: LD_VAR 0 2
11317: PUSH
11318: EMPTY
11319: LIST
11320: LIST
11321: PUSH
11322: LD_INT 2
11324: PUSH
11325: LD_INT 30
11327: PUSH
11328: LD_INT 0
11330: PUSH
11331: EMPTY
11332: LIST
11333: LIST
11334: PUSH
11335: LD_INT 30
11337: PUSH
11338: LD_INT 1
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: LIST
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: PPUSH
11354: CALL_OW 69
11358: PPUSH
11359: CALL 26397 0 1
11363: AND
11364: IFFALSE 11432
11366: PUSH
11367: LD_INT 22
11369: PUSH
11370: LD_VAR 0 2
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: PUSH
11379: LD_INT 2
11381: PUSH
11382: LD_INT 21
11384: PUSH
11385: LD_INT 1
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: PUSH
11392: LD_INT 33
11394: PUSH
11395: LD_INT 3
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PUSH
11402: LD_INT 33
11404: PUSH
11405: LD_INT 5
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: PPUSH
11422: CALL_OW 69
11426: PPUSH
11427: CALL 26397 0 1
11431: AND
11432: ST_TO_ADDR
// end ; GameTypeKing :
11433: GO 11536
11435: LD_INT 3
11437: DOUBLE
11438: EQUAL
11439: IFTRUE 11443
11441: GO 11535
11443: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
11444: LD_ADDR_VAR 0 3
11448: PUSH
11449: LD_INT 22
11451: PUSH
11452: LD_VAR 0 2
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: PUSH
11461: LD_INT 2
11463: PUSH
11464: LD_INT 21
11466: PUSH
11467: LD_INT 1
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: PUSH
11474: LD_INT 33
11476: PUSH
11477: LD_INT 3
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: PUSH
11484: LD_INT 33
11486: PUSH
11487: LD_INT 5
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: PPUSH
11504: CALL_OW 69
11508: PPUSH
11509: CALL 26397 0 1
11513: IFFALSE 11532
11515: PUSH
11516: LD_VAR 0 2
11520: PPUSH
11521: CALL 15432 0 1
11525: PUSH
11526: LD_EXP 44
11530: LESS
11531: AND
11532: ST_TO_ADDR
// end ; end ;
11533: GO 11536
11535: POP
// end ;
11536: LD_VAR 0 3
11540: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
11541: LD_INT 100
11543: IFFALSE 11773
11545: GO 11547
11547: DISABLE
11548: LD_INT 0
11550: PPUSH
11551: PPUSH
// begin if Multiplayer then
11552: LD_OWVAR 4
11556: IFFALSE 11564
// SetPlayerSpectator ( ) else
11558: CALL_OW 572
11562: GO 11573
// FogOff ( your_side ) ;
11564: LD_OWVAR 2
11568: PPUSH
11569: CALL_OW 344
// repeat gameIsOn := false ;
11573: LD_ADDR_VAR 0 1
11577: PUSH
11578: LD_INT 0
11580: ST_TO_ADDR
// for i := 1 to 8 do
11581: LD_ADDR_VAR 0 2
11585: PUSH
11586: DOUBLE
11587: LD_INT 1
11589: DEC
11590: ST_TO_ADDR
11591: LD_INT 8
11593: PUSH
11594: FOR_TO
11595: IFFALSE 11725
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
11597: LD_EXP 16
11601: PUSH
11602: LD_VAR 0 2
11606: ARRAY
11607: IFFALSE 11620
11609: PUSH
11610: LD_VAR 0 2
11614: PPUSH
11615: CALL_OW 108
11619: AND
11620: IFFALSE 11634
11622: PUSH
11623: LD_VAR 0 2
11627: PUSH
11628: LD_OWVAR 2
11632: NONEQUAL
11633: AND
11634: IFFALSE 11723
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
11636: LD_EXP 17
11640: PUSH
11641: LD_VAR 0 2
11645: ARRAY
11646: NOT
11647: IFTRUE 11695
11649: PUSH
11650: LD_EXP 17
11654: PUSH
11655: LD_VAR 0 2
11659: ARRAY
11660: PUSH
11661: LD_EXP 17
11665: PUSH
11666: LD_OWVAR 2
11670: ARRAY
11671: NONEQUAL
11672: IFFALSE 11694
11674: PUSH
11675: LD_OWVAR 2
11679: PPUSH
11680: LD_VAR 0 2
11684: PPUSH
11685: CALL_OW 81
11689: PUSH
11690: LD_INT 1
11692: NONEQUAL
11693: AND
11694: OR
11695: IFFALSE 11723
// if HasPowerByGameType ( mpGameType , i ) then
11697: LD_EXP 12
11701: PPUSH
11702: LD_VAR 0 2
11706: PPUSH
11707: CALL 11025 0 2
11711: IFFALSE 11723
// begin gameIsOn := true ;
11713: LD_ADDR_VAR 0 1
11717: PUSH
11718: LD_INT 1
11720: ST_TO_ADDR
// break ;
11721: GO 11725
// end ;
11723: GO 11594
11725: POP
11726: POP
// wait ( 100 ) ;
11727: LD_INT 100
11729: PPUSH
11730: CALL_OW 67
// until not gameIsOn ;
11734: LD_VAR 0 1
11738: NOT
11739: IFFALSE 11573
// if IAmServer then
11741: CALL_OW 518
11745: IFFALSE 11754
// wait ( 0 0$3 ) ;
11747: LD_INT 105
11749: PPUSH
11750: CALL_OW 67
// if Multiplayer then
11754: LD_OWVAR 4
11758: IFFALSE 11766
// YouLostInMultiplayer else
11760: CALL_OW 107
11764: GO 11773
// YouLost (  ) ;
11766: LD_STRING 
11768: PPUSH
11769: CALL_OW 104
// end ;
11773: PPOPN 2
11775: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
11776: LD_EXP 42
11780: IFFALSE 12164
11782: GO 11784
11784: DISABLE
11785: LD_INT 0
11787: PPUSH
11788: PPUSH
11789: PPUSH
11790: PPUSH
11791: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
11792: LD_ADDR_VAR 0 5
11796: PUSH
11797: LD_INT 1
11799: PUSH
11800: LD_INT 2
11802: PUSH
11803: LD_INT 3
11805: PUSH
11806: LD_INT 4
11808: PUSH
11809: LD_INT 5
11811: PUSH
11812: LD_INT 6
11814: PUSH
11815: LD_INT 7
11817: PUSH
11818: LD_INT 8
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
11831: LD_INT 350
11833: PPUSH
11834: CALL_OW 67
// for i := 1 to 8 do
11838: LD_ADDR_VAR 0 1
11842: PUSH
11843: DOUBLE
11844: LD_INT 1
11846: DEC
11847: ST_TO_ADDR
11848: LD_INT 8
11850: PUSH
11851: FOR_TO
11852: IFFALSE 12134
// begin j := sides [ i ] ;
11854: LD_ADDR_VAR 0 2
11858: PUSH
11859: LD_VAR 0 5
11863: PUSH
11864: LD_VAR 0 1
11868: ARRAY
11869: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
11870: LD_EXP 49
11874: PUSH
11875: LD_VAR 0 2
11879: ARRAY
11880: PPUSH
11881: CALL 26397 0 1
11885: IFFALSE 11898
11887: PUSH
11888: LD_VAR 0 2
11892: PPUSH
11893: CALL_OW 108
11897: AND
11898: IFFALSE 11916
11900: PUSH
11901: LD_EXP 12
11905: PPUSH
11906: LD_VAR 0 2
11910: PPUSH
11911: CALL 11025 0 2
11915: AND
11916: IFFALSE 12132
// begin wait ( mpRespawn div 2 ) ;
11918: LD_EXP 42
11922: PUSH
11923: LD_INT 2
11925: DIV
11926: PPUSH
11927: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11931: LD_ADDR_VAR 0 3
11935: PUSH
11936: LD_INT 22
11938: PUSH
11939: LD_VAR 0 2
11943: PUSH
11944: EMPTY
11945: LIST
11946: LIST
11947: PUSH
11948: LD_INT 50
11950: PUSH
11951: EMPTY
11952: LIST
11953: PUSH
11954: LD_INT 2
11956: PUSH
11957: LD_INT 30
11959: PUSH
11960: LD_INT 0
11962: PUSH
11963: EMPTY
11964: LIST
11965: LIST
11966: PUSH
11967: LD_INT 30
11969: PUSH
11970: LD_INT 1
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: LIST
11981: PUSH
11982: EMPTY
11983: LIST
11984: LIST
11985: LIST
11986: PPUSH
11987: CALL_OW 69
11991: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
11992: LD_VAR 0 3
11996: NOT
11997: IFTRUE 12011
11999: PUSH
12000: LD_VAR 0 2
12004: PPUSH
12005: CALL_OW 108
12009: NOT
12010: OR
12011: IFTRUE 12030
12013: PUSH
12014: LD_EXP 12
12018: PPUSH
12019: LD_VAR 0 2
12023: PPUSH
12024: CALL 11025 0 2
12028: NOT
12029: OR
12030: IFFALSE 12034
// continue ;
12032: GO 11851
// spawn := tmp [ 1 ] ;
12034: LD_ADDR_VAR 0 4
12038: PUSH
12039: LD_VAR 0 3
12043: PUSH
12044: LD_INT 1
12046: ARRAY
12047: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
12048: LD_EXP 49
12052: PUSH
12053: LD_VAR 0 2
12057: ARRAY
12058: PUSH
12059: LD_INT 1
12061: ARRAY
12062: PPUSH
12063: LD_VAR 0 4
12067: PPUSH
12068: CALL_OW 250
12072: PPUSH
12073: LD_VAR 0 4
12077: PPUSH
12078: CALL_OW 251
12082: PPUSH
12083: LD_INT 32
12085: PPUSH
12086: LD_INT 1
12088: PPUSH
12089: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
12093: LD_ADDR_EXP 49
12097: PUSH
12098: LD_EXP 49
12102: PPUSH
12103: LD_VAR 0 2
12107: PPUSH
12108: LD_EXP 49
12112: PUSH
12113: LD_VAR 0 2
12117: ARRAY
12118: PPUSH
12119: LD_INT 1
12121: PPUSH
12122: CALL_OW 3
12126: PPUSH
12127: CALL_OW 1
12131: ST_TO_ADDR
// end ; end ;
12132: GO 11851
12134: POP
12135: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
12136: LD_ADDR_VAR 0 5
12140: PUSH
12141: LD_VAR 0 5
12145: PPUSH
12146: LD_INT 1
12148: PPUSH
12149: LD_INT 8
12151: PPUSH
12152: LD_INT 1
12154: PPUSH
12155: CALL 28723 0 4
12159: ST_TO_ADDR
// until false ;
12160: LD_INT 0
12162: IFFALSE 11831
// end ;
12164: PPOPN 5
12166: END
// every 0 0$1 marked mpActive do
12167: GO 12169
12169: DISABLE
// begin enable ;
12170: ENABLE
// if not mpDisplayStrings then
12171: LD_EXP 47
12175: NOT
12176: IFFALSE 12187
// begin display_strings := [ ] ;
12178: LD_ADDR_OWVAR 47
12182: PUSH
12183: EMPTY
12184: ST_TO_ADDR
// exit ;
12185: GO 12197
// end ; display_strings := mpDisplayStrings ;
12187: LD_ADDR_OWVAR 47
12191: PUSH
12192: LD_EXP 47
12196: ST_TO_ADDR
// end ; end_of_file
12197: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
12198: LD_INT 0
12200: PPUSH
12201: PPUSH
12202: PPUSH
12203: PPUSH
12204: PPUSH
12205: PPUSH
12206: PPUSH
12207: PPUSH
12208: PPUSH
// if GetType ( un ) = unit_vehicle then
12209: LD_VAR 0 1
12213: PPUSH
12214: CALL_OW 247
12218: PUSH
12219: LD_INT 2
12221: EQUAL
12222: IFFALSE 12226
// exit ;
12224: GO 12999
// side := GetSide ( un ) ;
12226: LD_ADDR_VAR 0 9
12230: PUSH
12231: LD_VAR 0 1
12235: PPUSH
12236: CALL_OW 255
12240: ST_TO_ADDR
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] then
12241: LD_EXP 12
12245: PUSH
12246: LD_INT 2
12248: PUSH
12249: LD_INT 8
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: IN
12256: IFFALSE 12350
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
12258: LD_VAR 0 1
12262: PPUSH
12263: CALL_OW 266
12267: PUSH
12268: LD_INT 0
12270: PUSH
12271: LD_INT 1
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: IN
12278: IFFALSE 12350
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
12280: LD_ADDR_VAR 0 3
12284: PUSH
12285: LD_INT 22
12287: PUSH
12288: LD_VAR 0 9
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: PUSH
12297: LD_INT 2
12299: PUSH
12300: LD_INT 21
12302: PUSH
12303: LD_INT 1
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: PUSH
12310: LD_INT 33
12312: PUSH
12313: LD_INT 3
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: LIST
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: PPUSH
12329: CALL_OW 69
12333: PUSH
12334: FOR_IN
12335: IFFALSE 12348
// KillUnit ( i ) ;
12337: LD_VAR 0 3
12341: PPUSH
12342: CALL_OW 66
12346: GO 12334
12348: POP
12349: POP
// end ; if mpGameType = GameTypeSurvivalH then
12350: LD_EXP 12
12354: PUSH
12355: LD_INT 8
12357: EQUAL
12358: IFFALSE 12442
// if un in mpCommanders then
12360: LD_VAR 0 1
12364: PUSH
12365: LD_EXP 50
12369: IN
12370: IFFALSE 12442
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
12372: LD_ADDR_VAR 0 3
12376: PUSH
12377: LD_INT 22
12379: PUSH
12380: LD_VAR 0 9
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: PUSH
12389: LD_INT 2
12391: PUSH
12392: LD_INT 21
12394: PUSH
12395: LD_INT 1
12397: PUSH
12398: EMPTY
12399: LIST
12400: LIST
12401: PUSH
12402: LD_INT 33
12404: PUSH
12405: LD_INT 3
12407: PUSH
12408: EMPTY
12409: LIST
12410: LIST
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: LIST
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: PPUSH
12421: CALL_OW 69
12425: PUSH
12426: FOR_IN
12427: IFFALSE 12440
// KillUnit ( i ) ;
12429: LD_VAR 0 3
12433: PPUSH
12434: CALL_OW 66
12438: GO 12426
12440: POP
12441: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
12442: LD_VAR 0 1
12446: PPUSH
12447: CALL_OW 257
12451: PUSH
12452: LD_INT 12
12454: PUSH
12455: LD_INT 17
12457: PUSH
12458: LD_INT 15
12460: PUSH
12461: LD_INT 16
12463: PUSH
12464: EMPTY
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: IN
12470: IFTRUE 12487
12472: PUSH
12473: LD_VAR 0 1
12477: PPUSH
12478: CALL_OW 263
12482: PUSH
12483: LD_INT 5
12485: EQUAL
12486: OR
12487: IFFALSE 12724
// begin tag := 0 ;
12489: LD_ADDR_VAR 0 5
12493: PUSH
12494: LD_INT 0
12496: ST_TO_ADDR
// for i := 1 to 8 do
12497: LD_ADDR_VAR 0 3
12501: PUSH
12502: DOUBLE
12503: LD_INT 1
12505: DEC
12506: ST_TO_ADDR
12507: LD_INT 8
12509: PUSH
12510: FOR_TO
12511: IFFALSE 12545
// if un in mpApePosIndex [ i ] then
12513: LD_VAR 0 1
12517: PUSH
12518: LD_EXP 41
12522: PUSH
12523: LD_VAR 0 3
12527: ARRAY
12528: IN
12529: IFFALSE 12543
// begin tag := i ;
12531: LD_ADDR_VAR 0 5
12535: PUSH
12536: LD_VAR 0 3
12540: ST_TO_ADDR
// break ;
12541: GO 12545
// end ;
12543: GO 12510
12545: POP
12546: POP
// if not tag then
12547: LD_VAR 0 5
12551: NOT
12552: IFFALSE 12556
// exit ;
12554: GO 12999
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
12556: LD_ADDR_VAR 0 7
12560: PUSH
12561: LD_EXP 40
12565: PUSH
12566: LD_EXP 16
12570: PUSH
12571: LD_VAR 0 5
12575: ARRAY
12576: ARRAY
12577: ST_TO_ADDR
// if not area then
12578: LD_VAR 0 7
12582: NOT
12583: IFFALSE 12587
// exit ;
12585: GO 12999
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
12587: LD_INT 14700
12589: PUSH
12590: LD_VAR 0 1
12594: PUSH
12595: LD_INT 5
12597: MOD
12598: PUSH
12599: LD_INT 1
12601: PLUS
12602: PUSH
12603: LD_INT 700
12605: MUL
12606: PLUS
12607: PPUSH
12608: CALL_OW 67
// repeat wait ( 10 ) ;
12612: LD_INT 10
12614: PPUSH
12615: CALL_OW 67
// until not mpBlockRespThread ;
12619: LD_EXP 56
12623: NOT
12624: IFFALSE 12612
// mpBlockRespThread := true ;
12626: LD_ADDR_EXP 56
12630: PUSH
12631: LD_INT 1
12633: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
12634: LD_INT 0
12636: PPUSH
12637: CALL 58500 0 1
// ape := CreateHuman ;
12641: LD_ADDR_VAR 0 4
12645: PUSH
12646: CALL_OW 44
12650: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
12651: LD_ADDR_EXP 41
12655: PUSH
12656: LD_EXP 41
12660: PPUSH
12661: LD_VAR 0 5
12665: PPUSH
12666: LD_EXP 41
12670: PUSH
12671: LD_VAR 0 5
12675: ARRAY
12676: PPUSH
12677: LD_VAR 0 4
12681: PPUSH
12682: CALL 62373 0 2
12686: PPUSH
12687: CALL_OW 1
12691: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
12692: LD_VAR 0 4
12696: PPUSH
12697: LD_VAR 0 7
12701: PPUSH
12702: LD_INT 0
12704: PPUSH
12705: CALL_OW 49
// wait ( 10 ) ;
12709: LD_INT 10
12711: PPUSH
12712: CALL_OW 67
// mpBlockRespThread := false ;
12716: LD_ADDR_EXP 56
12720: PUSH
12721: LD_INT 0
12723: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
12724: LD_VAR 0 1
12728: PPUSH
12729: CALL_OW 247
12733: PUSH
12734: LD_INT 1
12736: EQUAL
12737: IFFALSE 12754
12739: PUSH
12740: LD_VAR 0 1
12744: PPUSH
12745: CALL_OW 248
12749: PUSH
12750: LD_INT 0
12752: GREATER
12753: AND
12754: IFFALSE 12999
// begin if not mpRespawn then
12756: LD_EXP 42
12760: NOT
12761: IFFALSE 12765
// exit ;
12763: GO 12999
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
12765: LD_VAR 0 9
12769: PPUSH
12770: CALL_OW 108
12774: NOT
12775: IFFALSE 12794
12777: PUSH
12778: LD_EXP 12
12782: PPUSH
12783: LD_VAR 0 9
12787: PPUSH
12788: CALL 11025 0 2
12792: NOT
12793: AND
12794: IFFALSE 12798
// exit ;
12796: GO 12999
// side := GetSide ( un ) ;
12798: LD_ADDR_VAR 0 9
12802: PUSH
12803: LD_VAR 0 1
12807: PPUSH
12808: CALL_OW 255
12812: ST_TO_ADDR
// nation := GetNation ( un ) ;
12813: LD_ADDR_VAR 0 8
12817: PUSH
12818: LD_VAR 0 1
12822: PPUSH
12823: CALL_OW 248
12827: ST_TO_ADDR
// class := GetClass ( un ) ;
12828: LD_ADDR_VAR 0 6
12832: PUSH
12833: LD_VAR 0 1
12837: PPUSH
12838: CALL_OW 257
12842: ST_TO_ADDR
// if class > 4 then
12843: LD_VAR 0 6
12847: PUSH
12848: LD_INT 4
12850: GREATER
12851: IFFALSE 12861
// class := 1 ;
12853: LD_ADDR_VAR 0 6
12857: PUSH
12858: LD_INT 1
12860: ST_TO_ADDR
// repeat wait ( 10 ) ;
12861: LD_INT 10
12863: PPUSH
12864: CALL_OW 67
// until not mpBlockRespThread ;
12868: LD_EXP 56
12872: NOT
12873: IFFALSE 12861
// mpBlockRespThread := true ;
12875: LD_ADDR_EXP 56
12879: PUSH
12880: LD_INT 1
12882: ST_TO_ADDR
// uc_side := side ;
12883: LD_ADDR_OWVAR 20
12887: PUSH
12888: LD_VAR 0 9
12892: ST_TO_ADDR
// uc_nation := nation ;
12893: LD_ADDR_OWVAR 21
12897: PUSH
12898: LD_VAR 0 8
12902: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
12903: LD_INT 0
12905: PPUSH
12906: LD_VAR 0 6
12910: PPUSH
12911: LD_INT 2
12913: PPUSH
12914: CALL_OW 380
// un := CreateHuman ;
12918: LD_ADDR_VAR 0 1
12922: PUSH
12923: CALL_OW 44
12927: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
12928: LD_ADDR_EXP 49
12932: PUSH
12933: LD_EXP 49
12937: PPUSH
12938: LD_VAR 0 9
12942: PPUSH
12943: LD_EXP 49
12947: PUSH
12948: LD_VAR 0 9
12952: ARRAY
12953: PPUSH
12954: LD_EXP 49
12958: PUSH
12959: LD_VAR 0 9
12963: ARRAY
12964: PUSH
12965: LD_INT 1
12967: PLUS
12968: PPUSH
12969: LD_VAR 0 1
12973: PPUSH
12974: CALL_OW 1
12978: PPUSH
12979: CALL_OW 1
12983: ST_TO_ADDR
// wait ( 10 ) ;
12984: LD_INT 10
12986: PPUSH
12987: CALL_OW 67
// mpBlockRespThread := false ;
12991: LD_ADDR_EXP 56
12995: PUSH
12996: LD_INT 0
12998: ST_TO_ADDR
// end ; end ;
12999: LD_VAR 0 2
13003: RET
// export function Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ; var i , tag , area , ape ; begin
13004: LD_INT 0
13006: PPUSH
13007: PPUSH
13008: PPUSH
13009: PPUSH
13010: PPUSH
// tag := 0 ;
13011: LD_ADDR_VAR 0 5
13015: PUSH
13016: LD_INT 0
13018: ST_TO_ADDR
// for i := 1 to 8 do
13019: LD_ADDR_VAR 0 4
13023: PUSH
13024: DOUBLE
13025: LD_INT 1
13027: DEC
13028: ST_TO_ADDR
13029: LD_INT 8
13031: PUSH
13032: FOR_TO
13033: IFFALSE 13067
// if un in mpApePosIndex [ i ] then
13035: LD_VAR 0 2
13039: PUSH
13040: LD_EXP 41
13044: PUSH
13045: LD_VAR 0 4
13049: ARRAY
13050: IN
13051: IFFALSE 13065
// begin tag := i ;
13053: LD_ADDR_VAR 0 5
13057: PUSH
13058: LD_VAR 0 4
13062: ST_TO_ADDR
// break ;
13063: GO 13067
// end ;
13065: GO 13032
13067: POP
13068: POP
// if not tag then
13069: LD_VAR 0 5
13073: NOT
13074: IFFALSE 13078
// exit ;
13076: GO 13246
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
13078: LD_ADDR_VAR 0 6
13082: PUSH
13083: LD_EXP 40
13087: PUSH
13088: LD_EXP 16
13092: PUSH
13093: LD_VAR 0 5
13097: ARRAY
13098: ARRAY
13099: ST_TO_ADDR
// if not area then
13100: LD_VAR 0 6
13104: NOT
13105: IFFALSE 13109
// exit ;
13107: GO 13246
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
13109: LD_INT 14700
13111: PUSH
13112: LD_VAR 0 2
13116: PUSH
13117: LD_INT 5
13119: MOD
13120: PUSH
13121: LD_INT 1
13123: PLUS
13124: PUSH
13125: LD_INT 700
13127: MUL
13128: PLUS
13129: PPUSH
13130: CALL_OW 67
// repeat wait ( 10 ) ;
13134: LD_INT 10
13136: PPUSH
13137: CALL_OW 67
// until not mpBlockRespThread ;
13141: LD_EXP 56
13145: NOT
13146: IFFALSE 13134
// mpBlockRespThread := true ;
13148: LD_ADDR_EXP 56
13152: PUSH
13153: LD_INT 1
13155: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
13156: LD_INT 0
13158: PPUSH
13159: CALL 58500 0 1
// ape := CreateHuman ;
13163: LD_ADDR_VAR 0 7
13167: PUSH
13168: CALL_OW 44
13172: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
13173: LD_ADDR_EXP 41
13177: PUSH
13178: LD_EXP 41
13182: PPUSH
13183: LD_VAR 0 5
13187: PPUSH
13188: LD_EXP 41
13192: PUSH
13193: LD_VAR 0 5
13197: ARRAY
13198: PPUSH
13199: LD_VAR 0 7
13203: PPUSH
13204: CALL 62373 0 2
13208: PPUSH
13209: CALL_OW 1
13213: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
13214: LD_VAR 0 7
13218: PPUSH
13219: LD_VAR 0 6
13223: PPUSH
13224: LD_INT 0
13226: PPUSH
13227: CALL_OW 49
// wait ( 10 ) ;
13231: LD_INT 10
13233: PPUSH
13234: CALL_OW 67
// mpBlockRespThread := false ;
13238: LD_ADDR_EXP 56
13242: PUSH
13243: LD_INT 0
13245: ST_TO_ADDR
// end ;
13246: LD_VAR 0 3
13250: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
13251: LD_INT 0
13253: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
13254: LD_VAR 0 1
13258: PPUSH
13259: CALL_OW 266
13263: PUSH
13264: LD_INT 0
13266: PUSH
13267: LD_INT 1
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: IN
13274: IFFALSE 13299
// SetBName ( building , @ & GetSide ( building ) ) ;
13276: LD_VAR 0 1
13280: PPUSH
13281: LD_STRING @
13283: PUSH
13284: LD_VAR 0 1
13288: PPUSH
13289: CALL_OW 255
13293: STR
13294: PPUSH
13295: CALL_OW 500
// end ;
13299: LD_VAR 0 2
13303: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
13304: LD_INT 0
13306: PPUSH
13307: PPUSH
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] and GetBType ( building ) in [ b_depot , b_warehouse ] then
13308: LD_EXP 12
13312: PUSH
13313: LD_INT 2
13315: PUSH
13316: LD_INT 8
13318: PUSH
13319: EMPTY
13320: LIST
13321: LIST
13322: IN
13323: IFFALSE 13347
13325: PUSH
13326: LD_VAR 0 1
13330: PPUSH
13331: CALL_OW 266
13335: PUSH
13336: LD_INT 0
13338: PUSH
13339: LD_INT 1
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: IN
13346: AND
13347: IFFALSE 13426
// begin SetSide ( building , oldSide ) ;
13349: LD_VAR 0 1
13353: PPUSH
13354: LD_VAR 0 2
13358: PPUSH
13359: CALL_OW 235
// KillUnit ( building ) ;
13363: LD_VAR 0 1
13367: PPUSH
13368: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
13372: LD_ADDR_VAR 0 5
13376: PUSH
13377: LD_INT 22
13379: PUSH
13380: LD_VAR 0 2
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PUSH
13389: LD_INT 21
13391: PUSH
13392: LD_INT 1
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: PUSH
13399: EMPTY
13400: LIST
13401: LIST
13402: PPUSH
13403: CALL_OW 69
13407: PUSH
13408: FOR_IN
13409: IFFALSE 13422
// KillUnit ( i ) ;
13411: LD_VAR 0 5
13415: PPUSH
13416: CALL_OW 66
13420: GO 13408
13422: POP
13423: POP
// exit ;
13424: GO 13471
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
13426: LD_VAR 0 1
13430: PPUSH
13431: CALL_OW 266
13435: PUSH
13436: LD_INT 0
13438: PUSH
13439: LD_INT 1
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: IN
13446: IFFALSE 13471
// SetBName ( building , @ & GetSide ( building ) ) ;
13448: LD_VAR 0 1
13452: PPUSH
13453: LD_STRING @
13455: PUSH
13456: LD_VAR 0 1
13460: PPUSH
13461: CALL_OW 255
13465: STR
13466: PPUSH
13467: CALL_OW 500
// end ;
13471: LD_VAR 0 4
13475: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
13476: LD_INT 0
13478: PPUSH
13479: PPUSH
13480: PPUSH
// if mpGameType <> GameTypeFamine then
13481: LD_EXP 12
13485: PUSH
13486: LD_INT 5
13488: NONEQUAL
13489: IFFALSE 13493
// exit ;
13491: GO 13727
// for i := 1 to mpGlobalOilDeposits do
13493: LD_ADDR_VAR 0 6
13497: PUSH
13498: DOUBLE
13499: LD_INT 1
13501: DEC
13502: ST_TO_ADDR
13503: LD_EXP 51
13507: PUSH
13508: FOR_TO
13509: IFFALSE 13725
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
13511: LD_EXP 51
13515: PUSH
13516: LD_VAR 0 6
13520: ARRAY
13521: PUSH
13522: LD_INT 1
13524: ARRAY
13525: PPUSH
13526: LD_EXP 51
13530: PUSH
13531: LD_VAR 0 6
13535: ARRAY
13536: PUSH
13537: LD_INT 2
13539: ARRAY
13540: PPUSH
13541: CALL_OW 428
13545: PUSH
13546: LD_VAR 0 1
13550: EQUAL
13551: IFFALSE 13723
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
13553: LD_ADDR_VAR 0 7
13557: PUSH
13558: LD_EXP 51
13562: PUSH
13563: LD_VAR 0 6
13567: ARRAY
13568: PUSH
13569: LD_INT 3
13571: ARRAY
13572: ST_TO_ADDR
// value := value - amount ;
13573: LD_ADDR_VAR 0 7
13577: PUSH
13578: LD_VAR 0 7
13582: PUSH
13583: LD_VAR 0 4
13587: MINUS
13588: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
13589: LD_ADDR_EXP 51
13593: PUSH
13594: LD_EXP 51
13598: PPUSH
13599: LD_VAR 0 6
13603: PPUSH
13604: LD_EXP 51
13608: PUSH
13609: LD_VAR 0 6
13613: ARRAY
13614: PPUSH
13615: LD_INT 3
13617: PPUSH
13618: LD_VAR 0 7
13622: PPUSH
13623: CALL_OW 1
13627: PPUSH
13628: CALL_OW 1
13632: ST_TO_ADDR
// if side in [ your_side , 9 ] then
13633: LD_VAR 0 2
13637: PUSH
13638: LD_OWVAR 2
13642: PUSH
13643: LD_INT 9
13645: PUSH
13646: EMPTY
13647: LIST
13648: LIST
13649: IN
13650: IFFALSE 13666
// SetUnitDisplayNumber ( building , value ) ;
13652: LD_VAR 0 1
13656: PPUSH
13657: LD_VAR 0 7
13661: PPUSH
13662: CALL_OW 505
// if value <= 0 then
13666: LD_VAR 0 7
13670: PUSH
13671: LD_INT 0
13673: LESSEQUAL
13674: IFFALSE 13723
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
13676: LD_EXP 51
13680: PUSH
13681: LD_VAR 0 6
13685: ARRAY
13686: PUSH
13687: LD_INT 1
13689: ARRAY
13690: PPUSH
13691: LD_EXP 51
13695: PUSH
13696: LD_VAR 0 6
13700: ARRAY
13701: PUSH
13702: LD_INT 2
13704: ARRAY
13705: PPUSH
13706: CALL_OW 63
// KillUnit ( building ) ;
13710: LD_VAR 0 1
13714: PPUSH
13715: CALL_OW 66
// exit ;
13719: POP
13720: POP
13721: GO 13727
// end ; end ; end ;
13723: GO 13508
13725: POP
13726: POP
// end ;
13727: LD_VAR 0 5
13731: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
13732: LD_INT 0
13734: PPUSH
13735: PPUSH
13736: PPUSH
// if mpGameType <> GameTypeFamine then
13737: LD_EXP 12
13741: PUSH
13742: LD_INT 5
13744: NONEQUAL
13745: IFFALSE 13749
// exit ;
13747: GO 13983
// for i := 1 to mpGlobalSibDeposits do
13749: LD_ADDR_VAR 0 6
13753: PUSH
13754: DOUBLE
13755: LD_INT 1
13757: DEC
13758: ST_TO_ADDR
13759: LD_EXP 52
13763: PUSH
13764: FOR_TO
13765: IFFALSE 13981
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
13767: LD_EXP 52
13771: PUSH
13772: LD_VAR 0 6
13776: ARRAY
13777: PUSH
13778: LD_INT 1
13780: ARRAY
13781: PPUSH
13782: LD_EXP 52
13786: PUSH
13787: LD_VAR 0 6
13791: ARRAY
13792: PUSH
13793: LD_INT 2
13795: ARRAY
13796: PPUSH
13797: CALL_OW 428
13801: PUSH
13802: LD_VAR 0 1
13806: EQUAL
13807: IFFALSE 13979
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
13809: LD_ADDR_VAR 0 7
13813: PUSH
13814: LD_EXP 52
13818: PUSH
13819: LD_VAR 0 6
13823: ARRAY
13824: PUSH
13825: LD_INT 3
13827: ARRAY
13828: ST_TO_ADDR
// value := value - amount ;
13829: LD_ADDR_VAR 0 7
13833: PUSH
13834: LD_VAR 0 7
13838: PUSH
13839: LD_VAR 0 4
13843: MINUS
13844: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
13845: LD_ADDR_EXP 52
13849: PUSH
13850: LD_EXP 52
13854: PPUSH
13855: LD_VAR 0 6
13859: PPUSH
13860: LD_EXP 52
13864: PUSH
13865: LD_VAR 0 6
13869: ARRAY
13870: PPUSH
13871: LD_INT 3
13873: PPUSH
13874: LD_VAR 0 7
13878: PPUSH
13879: CALL_OW 1
13883: PPUSH
13884: CALL_OW 1
13888: ST_TO_ADDR
// if side in [ your_side , 9 ] then
13889: LD_VAR 0 2
13893: PUSH
13894: LD_OWVAR 2
13898: PUSH
13899: LD_INT 9
13901: PUSH
13902: EMPTY
13903: LIST
13904: LIST
13905: IN
13906: IFFALSE 13922
// SetUnitDisplayNumber ( building , value ) ;
13908: LD_VAR 0 1
13912: PPUSH
13913: LD_VAR 0 7
13917: PPUSH
13918: CALL_OW 505
// if value <= 0 then
13922: LD_VAR 0 7
13926: PUSH
13927: LD_INT 0
13929: LESSEQUAL
13930: IFFALSE 13979
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
13932: LD_EXP 52
13936: PUSH
13937: LD_VAR 0 6
13941: ARRAY
13942: PUSH
13943: LD_INT 1
13945: ARRAY
13946: PPUSH
13947: LD_EXP 52
13951: PUSH
13952: LD_VAR 0 6
13956: ARRAY
13957: PUSH
13958: LD_INT 2
13960: ARRAY
13961: PPUSH
13962: CALL_OW 63
// KillUnit ( building ) ;
13966: LD_VAR 0 1
13970: PPUSH
13971: CALL_OW 66
// exit ;
13975: POP
13976: POP
13977: GO 13983
// end ; end ; end ;
13979: GO 13764
13981: POP
13982: POP
// end ;
13983: LD_VAR 0 5
13987: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
13988: LD_INT 0
13990: PPUSH
13991: PPUSH
// side := GetSide ( factory ) ;
13992: LD_ADDR_VAR 0 7
13996: PUSH
13997: LD_VAR 0 1
14001: PPUSH
14002: CALL_OW 255
14006: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
14007: LD_VAR 0 5
14011: PUSH
14012: LD_INT 81
14014: EQUAL
14015: IFFALSE 14053
14017: PUSH
14018: LD_INT 22
14020: PUSH
14021: LD_VAR 0 7
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: PUSH
14030: LD_INT 34
14032: PUSH
14033: LD_INT 81
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: PPUSH
14044: CALL_OW 69
14048: PUSH
14049: LD_INT 0
14051: GREATER
14052: AND
14053: IFFALSE 14086
// begin ComCancel ( factory ) ;
14055: LD_VAR 0 1
14059: PPUSH
14060: CALL_OW 127
// if side = your_side then
14064: LD_VAR 0 7
14068: PUSH
14069: LD_OWVAR 2
14073: EQUAL
14074: IFFALSE 14086
// HintSpec ( VehLimit , 2 ) ;
14076: LD_STRING VehLimit
14078: PPUSH
14079: LD_INT 2
14081: PPUSH
14082: CALL_OW 338
// end ; end ;
14086: LD_VAR 0 6
14090: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
14091: LD_INT 0
14093: PPUSH
14094: PPUSH
14095: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
14096: LD_VAR 0 1
14100: PPUSH
14101: CALL_OW 264
14105: PUSH
14106: LD_INT 81
14108: EQUAL
14109: IFFALSE 14126
14111: PUSH
14112: LD_VAR 0 1
14116: PPUSH
14117: CALL_OW 263
14121: PUSH
14122: LD_INT 1
14124: EQUAL
14125: AND
14126: IFFALSE 14406
// begin for i := 1 to Count ( minersList ) do
14128: LD_ADDR_VAR 0 6
14132: PUSH
14133: DOUBLE
14134: LD_INT 1
14136: DEC
14137: ST_TO_ADDR
14138: LD_EXP 71
14142: PPUSH
14143: CALL 26397 0 1
14147: PUSH
14148: FOR_TO
14149: IFFALSE 14267
// begin if minersList [ i ] = oldId then
14151: LD_EXP 71
14155: PUSH
14156: LD_VAR 0 6
14160: ARRAY
14161: PUSH
14162: LD_VAR 0 2
14166: EQUAL
14167: IFFALSE 14265
// begin for j := 1 to minerMinesList [ i ] do
14169: LD_ADDR_VAR 0 7
14173: PUSH
14174: DOUBLE
14175: LD_INT 1
14177: DEC
14178: ST_TO_ADDR
14179: LD_EXP 72
14183: PUSH
14184: LD_VAR 0 6
14188: ARRAY
14189: PUSH
14190: FOR_TO
14191: IFFALSE 14241
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
14193: LD_EXP 72
14197: PUSH
14198: LD_VAR 0 6
14202: ARRAY
14203: PUSH
14204: LD_VAR 0 7
14208: ARRAY
14209: PUSH
14210: LD_INT 1
14212: ARRAY
14213: PPUSH
14214: LD_EXP 72
14218: PUSH
14219: LD_VAR 0 6
14223: ARRAY
14224: PUSH
14225: LD_VAR 0 7
14229: ARRAY
14230: PUSH
14231: LD_INT 2
14233: ARRAY
14234: PPUSH
14235: CALL_OW 612
14239: GO 14190
14241: POP
14242: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
14243: LD_ADDR_EXP 72
14247: PUSH
14248: LD_EXP 72
14252: PPUSH
14253: LD_VAR 0 6
14257: PPUSH
14258: CALL_OW 3
14262: ST_TO_ADDR
// break ;
14263: GO 14267
// end ; end ;
14265: GO 14148
14267: POP
14268: POP
// minersList := minersList diff oldId ;
14269: LD_ADDR_EXP 71
14273: PUSH
14274: LD_EXP 71
14278: PUSH
14279: LD_VAR 0 2
14283: DIFF
14284: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
14285: LD_INT 22
14287: PUSH
14288: LD_VAR 0 4
14292: PPUSH
14293: CALL_OW 255
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: PUSH
14302: LD_INT 34
14304: PUSH
14305: LD_INT 81
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PPUSH
14316: CALL_OW 69
14320: PUSH
14321: LD_INT 1
14323: GREATER
14324: IFFALSE 14351
// begin ComExit ( unit ) ;
14326: LD_VAR 0 4
14330: PPUSH
14331: CALL 62771 0 1
// SetSide ( newId , oldSide ) ;
14335: LD_VAR 0 1
14339: PPUSH
14340: LD_VAR 0 3
14344: PPUSH
14345: CALL_OW 235
// exit ;
14349: GO 14406
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
14351: LD_ADDR_EXP 71
14355: PUSH
14356: LD_EXP 71
14360: PPUSH
14361: LD_EXP 71
14365: PUSH
14366: LD_INT 1
14368: PLUS
14369: PPUSH
14370: LD_VAR 0 1
14374: PPUSH
14375: CALL_OW 1
14379: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
14380: LD_ADDR_EXP 72
14384: PUSH
14385: LD_EXP 72
14389: PPUSH
14390: LD_EXP 72
14394: PUSH
14395: LD_INT 1
14397: PLUS
14398: PPUSH
14399: EMPTY
14400: PPUSH
14401: CALL_OW 1
14405: ST_TO_ADDR
// end ; end ; end_of_file
14406: LD_VAR 0 5
14410: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
14411: LD_EXP 48
14415: IFFALSE 14756
14417: GO 14419
14419: DISABLE
14420: LD_INT 0
14422: PPUSH
14423: PPUSH
14424: PPUSH
// begin mpKingPoints := [ ] ;
14425: LD_ADDR_EXP 59
14429: PUSH
14430: EMPTY
14431: ST_TO_ADDR
// if mpTeamGame then
14432: LD_EXP 20
14436: IFFALSE 14490
// begin for i := 1 to Count ( mpTeams ) do
14438: LD_ADDR_VAR 0 1
14442: PUSH
14443: DOUBLE
14444: LD_INT 1
14446: DEC
14447: ST_TO_ADDR
14448: LD_EXP 19
14452: PPUSH
14453: CALL 26397 0 1
14457: PUSH
14458: FOR_TO
14459: IFFALSE 14486
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
14461: LD_ADDR_EXP 59
14465: PUSH
14466: LD_EXP 59
14470: PPUSH
14471: LD_VAR 0 1
14475: PPUSH
14476: LD_INT 0
14478: PPUSH
14479: CALL_OW 1
14483: ST_TO_ADDR
14484: GO 14458
14486: POP
14487: POP
// end else
14488: GO 14533
// begin for i := 1 to 8 do
14490: LD_ADDR_VAR 0 1
14494: PUSH
14495: DOUBLE
14496: LD_INT 1
14498: DEC
14499: ST_TO_ADDR
14500: LD_INT 8
14502: PUSH
14503: FOR_TO
14504: IFFALSE 14531
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
14506: LD_ADDR_EXP 59
14510: PUSH
14511: LD_EXP 59
14515: PPUSH
14516: LD_VAR 0 1
14520: PPUSH
14521: LD_INT 0
14523: PPUSH
14524: CALL_OW 1
14528: ST_TO_ADDR
14529: GO 14503
14531: POP
14532: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
14533: LD_ADDR_VAR 0 3
14537: PUSH
14538: LD_EXP 2
14542: PPUSH
14543: LD_INT 0
14545: PPUSH
14546: CALL_OW 517
14550: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
14551: LD_ADDR_VAR 0 1
14555: PUSH
14556: DOUBLE
14557: LD_INT 1
14559: DEC
14560: ST_TO_ADDR
14561: LD_VAR 0 3
14565: PUSH
14566: LD_INT 1
14568: ARRAY
14569: PUSH
14570: FOR_TO
14571: IFFALSE 14638
// for j := 1 to 8 do
14573: LD_ADDR_VAR 0 2
14577: PUSH
14578: DOUBLE
14579: LD_INT 1
14581: DEC
14582: ST_TO_ADDR
14583: LD_INT 8
14585: PUSH
14586: FOR_TO
14587: IFFALSE 14634
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
14589: LD_VAR 0 3
14593: PUSH
14594: LD_INT 1
14596: ARRAY
14597: PUSH
14598: LD_VAR 0 1
14602: ARRAY
14603: PPUSH
14604: LD_VAR 0 3
14608: PUSH
14609: LD_INT 2
14611: ARRAY
14612: PUSH
14613: LD_VAR 0 1
14617: ARRAY
14618: PPUSH
14619: LD_VAR 0 2
14623: PPUSH
14624: LD_INT 12
14626: NEG
14627: PPUSH
14628: CALL_OW 330
14632: GO 14586
14634: POP
14635: POP
14636: GO 14570
14638: POP
14639: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
14640: LD_EXP 43
14644: PPUSH
14645: LD_INT 1
14647: PPUSH
14648: CALL_OW 424
// UpdateCounter ;
14652: CALL 15262 0 0
// repeat wait ( 0 0$1 ) ;
14656: LD_INT 35
14658: PPUSH
14659: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14663: LD_ADDR_VAR 0 3
14667: PUSH
14668: LD_EXP 43
14672: PPUSH
14673: LD_INT 3
14675: PUSH
14676: LD_INT 57
14678: PUSH
14679: EMPTY
14680: LIST
14681: PUSH
14682: EMPTY
14683: LIST
14684: LIST
14685: PUSH
14686: LD_INT 50
14688: PUSH
14689: EMPTY
14690: LIST
14691: PUSH
14692: LD_INT 2
14694: PUSH
14695: LD_INT 30
14697: PUSH
14698: LD_INT 0
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: PUSH
14705: LD_INT 30
14707: PUSH
14708: LD_INT 1
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: PUSH
14715: EMPTY
14716: LIST
14717: LIST
14718: LIST
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: LIST
14724: PPUSH
14725: CALL_OW 70
14729: ST_TO_ADDR
// if not tmp then
14730: LD_VAR 0 3
14734: NOT
14735: IFFALSE 14739
// continue ;
14737: GO 14656
// AddPoints ( tmp ) ;
14739: LD_VAR 0 3
14743: PPUSH
14744: CALL 14940 0 1
// UpdateCounter ;
14748: CALL 15262 0 0
// until false ;
14752: LD_INT 0
14754: IFFALSE 14656
// end ;
14756: PPOPN 3
14758: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
14759: LD_EXP 48
14763: IFFALSE 14771
14765: PUSH
14766: LD_EXP 46
14770: AND
14771: IFFALSE 14937
14773: GO 14775
14775: DISABLE
14776: LD_INT 0
14778: PPUSH
14779: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
14780: LD_ADDR_VAR 0 2
14784: PUSH
14785: LD_EXP 2
14789: PPUSH
14790: LD_INT 0
14792: PPUSH
14793: CALL_OW 517
14797: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
14798: LD_ADDR_VAR 0 1
14802: PUSH
14803: DOUBLE
14804: LD_INT 1
14806: DEC
14807: ST_TO_ADDR
14808: LD_VAR 0 2
14812: PUSH
14813: LD_INT 1
14815: ARRAY
14816: PUSH
14817: FOR_TO
14818: IFFALSE 14859
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
14820: LD_VAR 0 2
14824: PUSH
14825: LD_INT 1
14827: ARRAY
14828: PUSH
14829: LD_VAR 0 1
14833: ARRAY
14834: PPUSH
14835: LD_VAR 0 2
14839: PUSH
14840: LD_INT 2
14842: ARRAY
14843: PUSH
14844: LD_VAR 0 1
14848: ARRAY
14849: PPUSH
14850: LD_INT 125
14852: PPUSH
14853: CALL_OW 495
14857: GO 14817
14859: POP
14860: POP
// repeat wait ( mpEmissions ) ;
14861: LD_EXP 46
14865: PPUSH
14866: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
14870: LD_ADDR_VAR 0 1
14874: PUSH
14875: DOUBLE
14876: LD_INT 1
14878: DEC
14879: ST_TO_ADDR
14880: LD_VAR 0 2
14884: PUSH
14885: LD_INT 1
14887: ARRAY
14888: PUSH
14889: FOR_TO
14890: IFFALSE 14931
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
14892: LD_VAR 0 2
14896: PUSH
14897: LD_INT 1
14899: ARRAY
14900: PUSH
14901: LD_VAR 0 1
14905: ARRAY
14906: PPUSH
14907: LD_VAR 0 2
14911: PUSH
14912: LD_INT 2
14914: ARRAY
14915: PUSH
14916: LD_VAR 0 1
14920: ARRAY
14921: PPUSH
14922: LD_INT 15
14924: PPUSH
14925: CALL_OW 495
14929: GO 14889
14931: POP
14932: POP
// until false ;
14933: LD_INT 0
14935: IFFALSE 14861
// end ;
14937: PPOPN 2
14939: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
14940: LD_INT 0
14942: PPUSH
14943: PPUSH
14944: PPUSH
14945: PPUSH
14946: PPUSH
// if mpTeamGame then
14947: LD_EXP 20
14951: IFFALSE 15148
// begin first := depots [ 1 ] ;
14953: LD_ADDR_VAR 0 4
14957: PUSH
14958: LD_VAR 0 1
14962: PUSH
14963: LD_INT 1
14965: ARRAY
14966: ST_TO_ADDR
// side := GetSide ( first ) ;
14967: LD_ADDR_VAR 0 6
14971: PUSH
14972: LD_VAR 0 4
14976: PPUSH
14977: CALL_OW 255
14981: ST_TO_ADDR
// for i := 1 to mpTeams do
14982: LD_ADDR_VAR 0 3
14986: PUSH
14987: DOUBLE
14988: LD_INT 1
14990: DEC
14991: ST_TO_ADDR
14992: LD_EXP 19
14996: PUSH
14997: FOR_TO
14998: IFFALSE 15032
// if side in mpTeams [ i ] then
15000: LD_VAR 0 6
15004: PUSH
15005: LD_EXP 19
15009: PUSH
15010: LD_VAR 0 3
15014: ARRAY
15015: IN
15016: IFFALSE 15030
// begin team := i ;
15018: LD_ADDR_VAR 0 5
15022: PUSH
15023: LD_VAR 0 3
15027: ST_TO_ADDR
// break ;
15028: GO 15032
// end ;
15030: GO 14997
15032: POP
15033: POP
// if not team then
15034: LD_VAR 0 5
15038: NOT
15039: IFFALSE 15043
// exit ;
15041: GO 15257
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
15043: LD_EXP 43
15047: PPUSH
15048: LD_INT 81
15050: PUSH
15051: LD_VAR 0 6
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: PPUSH
15060: CALL_OW 70
15064: IFFALSE 15068
// exit ;
15066: GO 15257
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
15068: LD_ADDR_EXP 59
15072: PUSH
15073: LD_EXP 59
15077: PPUSH
15078: LD_VAR 0 5
15082: PPUSH
15083: LD_EXP 59
15087: PUSH
15088: LD_VAR 0 5
15092: ARRAY
15093: PUSH
15094: LD_INT 1
15096: PLUS
15097: PPUSH
15098: CALL_OW 1
15102: ST_TO_ADDR
// for i in mpTeams [ team ] do
15103: LD_ADDR_VAR 0 3
15107: PUSH
15108: LD_EXP 19
15112: PUSH
15113: LD_VAR 0 5
15117: ARRAY
15118: PUSH
15119: FOR_IN
15120: IFFALSE 15144
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
15122: LD_VAR 0 3
15126: PPUSH
15127: LD_EXP 59
15131: PUSH
15132: LD_VAR 0 5
15136: ARRAY
15137: PPUSH
15138: CALL_OW 506
15142: GO 15119
15144: POP
15145: POP
// end else
15146: GO 15257
// begin first := depots [ 1 ] ;
15148: LD_ADDR_VAR 0 4
15152: PUSH
15153: LD_VAR 0 1
15157: PUSH
15158: LD_INT 1
15160: ARRAY
15161: ST_TO_ADDR
// side := GetSide ( first ) ;
15162: LD_ADDR_VAR 0 6
15166: PUSH
15167: LD_VAR 0 4
15171: PPUSH
15172: CALL_OW 255
15176: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
15177: LD_EXP 43
15181: PPUSH
15182: LD_INT 81
15184: PUSH
15185: LD_VAR 0 6
15189: PUSH
15190: EMPTY
15191: LIST
15192: LIST
15193: PPUSH
15194: CALL_OW 70
15198: IFFALSE 15202
// exit ;
15200: GO 15257
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
15202: LD_ADDR_EXP 59
15206: PUSH
15207: LD_EXP 59
15211: PPUSH
15212: LD_VAR 0 6
15216: PPUSH
15217: LD_EXP 59
15221: PUSH
15222: LD_VAR 0 6
15226: ARRAY
15227: PUSH
15228: LD_INT 1
15230: PLUS
15231: PPUSH
15232: CALL_OW 1
15236: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
15237: LD_VAR 0 6
15241: PPUSH
15242: LD_EXP 59
15246: PUSH
15247: LD_VAR 0 6
15251: ARRAY
15252: PPUSH
15253: CALL_OW 506
// end ; end ;
15257: LD_VAR 0 2
15261: RET
// function UpdateCounter ; var i ; begin
15262: LD_INT 0
15264: PPUSH
15265: PPUSH
// result := [ ] ;
15266: LD_ADDR_VAR 0 1
15270: PUSH
15271: EMPTY
15272: ST_TO_ADDR
// if mpTeamGame then
15273: LD_EXP 20
15277: IFFALSE 15344
// begin for i := 1 to mpTeams do
15279: LD_ADDR_VAR 0 2
15283: PUSH
15284: DOUBLE
15285: LD_INT 1
15287: DEC
15288: ST_TO_ADDR
15289: LD_EXP 19
15293: PUSH
15294: FOR_TO
15295: IFFALSE 15340
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
15297: LD_ADDR_VAR 0 1
15301: PUSH
15302: LD_VAR 0 1
15306: PUSH
15307: LD_STRING #KingoftheHill-Team
15309: PUSH
15310: LD_VAR 0 2
15314: PUSH
15315: LD_EXP 59
15319: PUSH
15320: LD_VAR 0 2
15324: ARRAY
15325: PUSH
15326: LD_EXP 44
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: ADD
15337: ST_TO_ADDR
15338: GO 15294
15340: POP
15341: POP
// end else
15342: GO 15417
// begin for i := 1 to 8 do
15344: LD_ADDR_VAR 0 2
15348: PUSH
15349: DOUBLE
15350: LD_INT 1
15352: DEC
15353: ST_TO_ADDR
15354: LD_INT 8
15356: PUSH
15357: FOR_TO
15358: IFFALSE 15415
// if mpSidePositions [ i ] then
15360: LD_EXP 16
15364: PUSH
15365: LD_VAR 0 2
15369: ARRAY
15370: IFFALSE 15413
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
15372: LD_ADDR_VAR 0 1
15376: PUSH
15377: LD_VAR 0 1
15381: PUSH
15382: LD_STRING #KingoftheHill-Player
15384: PUSH
15385: LD_VAR 0 2
15389: PUSH
15390: LD_EXP 59
15394: PUSH
15395: LD_VAR 0 2
15399: ARRAY
15400: PUSH
15401: LD_EXP 44
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: ADD
15412: ST_TO_ADDR
15413: GO 15357
15415: POP
15416: POP
// end ; mpDisplayStrings := result ;
15417: LD_ADDR_EXP 47
15421: PUSH
15422: LD_VAR 0 1
15426: ST_TO_ADDR
// end ;
15427: LD_VAR 0 1
15431: RET
// export function HowMuchPointsKing ( side ) ; begin
15432: LD_INT 0
15434: PPUSH
// result := HowMuchPoints ( side ) ;
15435: LD_ADDR_VAR 0 2
15439: PUSH
15440: LD_VAR 0 1
15444: PPUSH
15445: CALL 15455 0 1
15449: ST_TO_ADDR
// end ;
15450: LD_VAR 0 2
15454: RET
// function HowMuchPoints ( side ) ; var i ; begin
15455: LD_INT 0
15457: PPUSH
15458: PPUSH
// if mpTeamGame then
15459: LD_EXP 20
15463: IFFALSE 15532
// begin for i := 1 to Count ( mpTeams ) do
15465: LD_ADDR_VAR 0 3
15469: PUSH
15470: DOUBLE
15471: LD_INT 1
15473: DEC
15474: ST_TO_ADDR
15475: LD_EXP 19
15479: PPUSH
15480: CALL 26397 0 1
15484: PUSH
15485: FOR_TO
15486: IFFALSE 15528
// begin if side in mpTeams [ i ] then
15488: LD_VAR 0 1
15492: PUSH
15493: LD_EXP 19
15497: PUSH
15498: LD_VAR 0 3
15502: ARRAY
15503: IN
15504: IFFALSE 15526
// begin result := mpKingPoints [ i ] ;
15506: LD_ADDR_VAR 0 2
15510: PUSH
15511: LD_EXP 59
15515: PUSH
15516: LD_VAR 0 3
15520: ARRAY
15521: ST_TO_ADDR
// exit ;
15522: POP
15523: POP
15524: GO 15548
// end ; end ;
15526: GO 15485
15528: POP
15529: POP
// end else
15530: GO 15548
// result := mpKingPoints [ side ] ;
15532: LD_ADDR_VAR 0 2
15536: PUSH
15537: LD_EXP 59
15541: PUSH
15542: LD_VAR 0 1
15546: ARRAY
15547: ST_TO_ADDR
// end ;
15548: LD_VAR 0 2
15552: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
15553: LD_EXP 48
15557: IFFALSE 15565
15559: PUSH
15560: CALL 15977 0 0
15564: AND
15565: IFFALSE 15573
15567: PUSH
15568: LD_OWVAR 4
15572: AND
15573: IFFALSE 15826
15575: GO 15577
15577: DISABLE
15578: LD_INT 0
15580: PPUSH
15581: PPUSH
// begin canWin := false ;
15582: LD_ADDR_VAR 0 2
15586: PUSH
15587: LD_INT 0
15589: ST_TO_ADDR
// if not HasPower ( your_side ) then
15590: LD_OWVAR 2
15594: PPUSH
15595: CALL 16019 0 1
15599: NOT
15600: IFFALSE 15611
// begin Multiplayer_Loose_Message ;
15602: CALL_OW 521
// enable ( mpLose ) ;
15606: LD_INT 102
15608: ENABLE_MARKED
// end else
15609: GO 15826
// begin if not EnemiesInGame then
15611: CALL 15829 0 0
15615: NOT
15616: IFFALSE 15623
// begin enable ( mpWin ) ;
15618: LD_INT 101
15620: ENABLE_MARKED
// exit ;
15621: GO 15826
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
15623: LD_ADDR_VAR 0 2
15627: PUSH
15628: LD_OWVAR 2
15632: PPUSH
15633: CALL 15455 0 1
15637: PUSH
15638: LD_EXP 44
15642: GREATEREQUAL
15643: IFFALSE 15656
15645: PUSH
15646: LD_OWVAR 2
15650: PPUSH
15651: CALL 16019 0 1
15655: AND
15656: ST_TO_ADDR
// for i := 1 to 8 do
15657: LD_ADDR_VAR 0 1
15661: PUSH
15662: DOUBLE
15663: LD_INT 1
15665: DEC
15666: ST_TO_ADDR
15667: LD_INT 8
15669: PUSH
15670: FOR_TO
15671: IFFALSE 15812
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
15673: LD_EXP 16
15677: PUSH
15678: LD_VAR 0 1
15682: ARRAY
15683: IFFALSE 15696
15685: PUSH
15686: LD_VAR 0 1
15690: PPUSH
15691: CALL_OW 108
15695: AND
15696: IFFALSE 15710
15698: PUSH
15699: LD_VAR 0 1
15703: PUSH
15704: LD_OWVAR 2
15708: NONEQUAL
15709: AND
15710: IFFALSE 15810
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
15712: LD_EXP 17
15716: PUSH
15717: LD_VAR 0 1
15721: ARRAY
15722: NOT
15723: IFTRUE 15771
15725: PUSH
15726: LD_EXP 17
15730: PUSH
15731: LD_VAR 0 1
15735: ARRAY
15736: PUSH
15737: LD_EXP 17
15741: PUSH
15742: LD_OWVAR 2
15746: ARRAY
15747: NONEQUAL
15748: IFFALSE 15770
15750: PUSH
15751: LD_OWVAR 2
15755: PPUSH
15756: LD_VAR 0 1
15760: PPUSH
15761: CALL_OW 81
15765: PUSH
15766: LD_INT 1
15768: NONEQUAL
15769: AND
15770: OR
15771: IFFALSE 15810
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
15773: LD_VAR 0 1
15777: PPUSH
15778: CALL 15455 0 1
15782: PUSH
15783: LD_EXP 44
15787: GREATEREQUAL
15788: IFFALSE 15801
15790: PUSH
15791: LD_VAR 0 1
15795: PPUSH
15796: CALL 16019 0 1
15800: AND
15801: IFFALSE 15810
// begin enable ( mpLose ) ;
15803: LD_INT 102
15805: ENABLE_MARKED
// exit ;
15806: POP
15807: POP
15808: GO 15826
// end ;
15810: GO 15670
15812: POP
15813: POP
// if canWin then
15814: LD_VAR 0 2
15818: IFFALSE 15825
// enable ( mpWin ) else
15820: LD_INT 101
15822: ENABLE_MARKED
15823: GO 15826
// enable ;
15825: ENABLE
// end ; end ;
15826: PPOPN 2
15828: END
// function EnemiesInGame ; var i ; begin
15829: LD_INT 0
15831: PPUSH
15832: PPUSH
// result := false ;
15833: LD_ADDR_VAR 0 1
15837: PUSH
15838: LD_INT 0
15840: ST_TO_ADDR
// for i := 1 to 8 do
15841: LD_ADDR_VAR 0 2
15845: PUSH
15846: DOUBLE
15847: LD_INT 1
15849: DEC
15850: ST_TO_ADDR
15851: LD_INT 8
15853: PUSH
15854: FOR_TO
15855: IFFALSE 15970
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
15857: LD_VAR 0 2
15861: PUSH
15862: LD_OWVAR 2
15866: NONEQUAL
15867: IFFALSE 15880
15869: PUSH
15870: LD_VAR 0 2
15874: PPUSH
15875: CALL 16019 0 1
15879: AND
15880: IFFALSE 15893
15882: PUSH
15883: LD_VAR 0 2
15887: PPUSH
15888: CALL_OW 108
15892: AND
15893: IFFALSE 15968
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
15895: LD_EXP 17
15899: PUSH
15900: LD_VAR 0 2
15904: ARRAY
15905: NOT
15906: IFTRUE 15954
15908: PUSH
15909: LD_EXP 17
15913: PUSH
15914: LD_VAR 0 2
15918: ARRAY
15919: PUSH
15920: LD_EXP 17
15924: PUSH
15925: LD_OWVAR 2
15929: ARRAY
15930: NONEQUAL
15931: IFFALSE 15953
15933: PUSH
15934: LD_OWVAR 2
15938: PPUSH
15939: LD_VAR 0 2
15943: PPUSH
15944: CALL_OW 81
15948: PUSH
15949: LD_INT 1
15951: NONEQUAL
15952: AND
15953: OR
15954: IFFALSE 15968
// begin result := true ;
15956: LD_ADDR_VAR 0 1
15960: PUSH
15961: LD_INT 1
15963: ST_TO_ADDR
// exit ;
15964: POP
15965: POP
15966: GO 15972
// end ;
15968: GO 15854
15970: POP
15971: POP
// end ;
15972: LD_VAR 0 1
15976: RET
// function CanWinLoose ; begin
15977: LD_INT 0
15979: PPUSH
// result := true ;
15980: LD_ADDR_VAR 0 1
15984: PUSH
15985: LD_INT 1
15987: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
15988: CALL_OW 531
15992: IFFALSE 16004
15994: PUSH
15995: CALL_OW 519
15999: PUSH
16000: LD_INT 1
16002: GREATER
16003: AND
16004: IFFALSE 16014
// result := false ;
16006: LD_ADDR_VAR 0 1
16010: PUSH
16011: LD_INT 0
16013: ST_TO_ADDR
// end ;
16014: LD_VAR 0 1
16018: RET
// function HasPower ( i ) ; begin
16019: LD_INT 0
16021: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
16022: LD_ADDR_VAR 0 2
16026: PUSH
16027: LD_INT 22
16029: PUSH
16030: LD_VAR 0 1
16034: PUSH
16035: EMPTY
16036: LIST
16037: LIST
16038: PUSH
16039: LD_INT 2
16041: PUSH
16042: LD_INT 21
16044: PUSH
16045: LD_INT 1
16047: PUSH
16048: EMPTY
16049: LIST
16050: LIST
16051: PUSH
16052: LD_INT 33
16054: PUSH
16055: LD_INT 3
16057: PUSH
16058: EMPTY
16059: LIST
16060: LIST
16061: PUSH
16062: LD_INT 33
16064: PUSH
16065: LD_INT 5
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: PUSH
16078: EMPTY
16079: LIST
16080: LIST
16081: PPUSH
16082: CALL_OW 69
16086: ST_TO_ADDR
// end ; end_of_file
16087: LD_VAR 0 2
16091: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
16092: LD_VAR 0 1
16096: PUSH
16097: LD_INT 200
16099: DOUBLE
16100: GREATEREQUAL
16101: IFFALSE 16109
16103: LD_INT 299
16105: DOUBLE
16106: LESSEQUAL
16107: IFTRUE 16111
16109: GO 16143
16111: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
16112: LD_VAR 0 1
16116: PPUSH
16117: LD_VAR 0 2
16121: PPUSH
16122: LD_VAR 0 3
16126: PPUSH
16127: LD_VAR 0 4
16131: PPUSH
16132: LD_VAR 0 5
16136: PPUSH
16137: CALL 18449 0 5
16141: GO 16220
16143: LD_INT 300
16145: DOUBLE
16146: GREATEREQUAL
16147: IFFALSE 16155
16149: LD_INT 399
16151: DOUBLE
16152: LESSEQUAL
16153: IFTRUE 16157
16155: GO 16219
16157: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
16158: LD_VAR 0 1
16162: PPUSH
16163: LD_VAR 0 2
16167: PPUSH
16168: LD_VAR 0 3
16172: PPUSH
16173: LD_VAR 0 4
16177: PPUSH
16178: LD_VAR 0 5
16182: PPUSH
16183: LD_VAR 0 6
16187: PPUSH
16188: LD_VAR 0 7
16192: PPUSH
16193: LD_VAR 0 8
16197: PPUSH
16198: LD_VAR 0 9
16202: PPUSH
16203: LD_VAR 0 10
16207: PPUSH
16208: LD_VAR 0 11
16212: PPUSH
16213: CALL 16849 0 11
16217: GO 16220
16219: POP
// end ;
16220: PPOPN 11
16222: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
16223: LD_VAR 0 1
16227: PPUSH
16228: LD_VAR 0 2
16232: PPUSH
16233: LD_VAR 0 3
16237: PPUSH
16238: LD_VAR 0 4
16242: PPUSH
16243: LD_VAR 0 5
16247: PPUSH
16248: CALL 17749 0 5
// end ; end_of_file
16252: PPOPN 5
16254: END
// every 0 0$1 do
16255: GO 16257
16257: DISABLE
// begin enable ;
16258: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
16259: LD_STRING updateTimer(
16261: PUSH
16262: LD_OWVAR 1
16266: STR
16267: PUSH
16268: LD_STRING );
16270: STR
16271: PPUSH
16272: CALL_OW 559
// end ;
16276: END
// export function SOS_MapStart ( ) ; begin
16277: LD_INT 0
16279: PPUSH
// UpdateFactoryWaypoints ( ) ;
16280: CALL 17211 0 0
// UpdateWarehouseGatheringPoints ( ) ;
16284: CALL 17463 0 0
// ParseMultiDataToLua ( ) ;
16288: CALL 17610 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
16292: LD_STRING setSpecLogoNumber(
16294: PUSH
16295: LD_INT 2
16297: STR
16298: PUSH
16299: LD_STRING ,
16301: STR
16302: PUSH
16303: LD_INT 1
16305: STR
16306: PUSH
16307: LD_STRING )
16309: STR
16310: PPUSH
16311: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
16315: LD_STRING setSpecLogoNumber(
16317: PUSH
16318: LD_INT 3
16320: STR
16321: PUSH
16322: LD_STRING ,
16324: STR
16325: PUSH
16326: LD_INT 2
16328: STR
16329: PUSH
16330: LD_STRING )
16332: STR
16333: PPUSH
16334: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
16338: LD_STRING setSpecLogoNumber(
16340: PUSH
16341: LD_INT 4
16343: STR
16344: PUSH
16345: LD_STRING ,
16347: STR
16348: PUSH
16349: LD_INT 3
16351: STR
16352: PUSH
16353: LD_STRING )
16355: STR
16356: PPUSH
16357: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
16361: LD_STRING setSpecLogoNumber(
16363: PUSH
16364: LD_INT 5
16366: STR
16367: PUSH
16368: LD_STRING ,
16370: STR
16371: PUSH
16372: LD_INT 4
16374: STR
16375: PUSH
16376: LD_STRING )
16378: STR
16379: PPUSH
16380: CALL_OW 559
// end ;
16384: LD_VAR 0 1
16388: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
16389: LD_INT 0
16391: PPUSH
16392: PPUSH
16393: PPUSH
16394: PPUSH
16395: PPUSH
16396: PPUSH
16397: PPUSH
16398: PPUSH
16399: PPUSH
// for i := 1 to 8 do
16400: LD_ADDR_VAR 0 2
16404: PUSH
16405: DOUBLE
16406: LD_INT 1
16408: DEC
16409: ST_TO_ADDR
16410: LD_INT 8
16412: PUSH
16413: FOR_TO
16414: IFFALSE 16799
// begin if mpSidePositions [ i ] then
16416: LD_EXP 16
16420: PUSH
16421: LD_VAR 0 2
16425: ARRAY
16426: IFFALSE 16797
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
16428: LD_ADDR_VAR 0 7
16432: PUSH
16433: LD_INT 22
16435: PUSH
16436: LD_VAR 0 2
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: PUSH
16445: LD_INT 21
16447: PUSH
16448: LD_INT 1
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PPUSH
16459: CALL_OW 69
16463: PPUSH
16464: CALL 26397 0 1
16468: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16469: LD_ADDR_VAR 0 9
16473: PUSH
16474: LD_INT 22
16476: PUSH
16477: LD_VAR 0 2
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 2
16488: PUSH
16489: LD_INT 30
16491: PUSH
16492: LD_INT 0
16494: PUSH
16495: EMPTY
16496: LIST
16497: LIST
16498: PUSH
16499: LD_INT 30
16501: PUSH
16502: LD_INT 1
16504: PUSH
16505: EMPTY
16506: LIST
16507: LIST
16508: PUSH
16509: EMPTY
16510: LIST
16511: LIST
16512: LIST
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: PPUSH
16518: CALL_OW 69
16522: ST_TO_ADDR
// crates := 0 ;
16523: LD_ADDR_VAR 0 4
16527: PUSH
16528: LD_INT 0
16530: ST_TO_ADDR
// oil := 0 ;
16531: LD_ADDR_VAR 0 5
16535: PUSH
16536: LD_INT 0
16538: ST_TO_ADDR
// sib := 0 ;
16539: LD_ADDR_VAR 0 6
16543: PUSH
16544: LD_INT 0
16546: ST_TO_ADDR
// if bases then
16547: LD_VAR 0 9
16551: IFFALSE 16657
// begin for j in bases do
16553: LD_ADDR_VAR 0 3
16557: PUSH
16558: LD_VAR 0 9
16562: PUSH
16563: FOR_IN
16564: IFFALSE 16655
// begin base := GetBase ( j ) ;
16566: LD_ADDR_VAR 0 8
16570: PUSH
16571: LD_VAR 0 3
16575: PPUSH
16576: CALL_OW 274
16580: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
16581: LD_ADDR_VAR 0 4
16585: PUSH
16586: LD_VAR 0 4
16590: PUSH
16591: LD_VAR 0 8
16595: PPUSH
16596: LD_INT 1
16598: PPUSH
16599: CALL_OW 275
16603: PLUS
16604: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
16605: LD_ADDR_VAR 0 5
16609: PUSH
16610: LD_VAR 0 5
16614: PUSH
16615: LD_VAR 0 8
16619: PPUSH
16620: LD_INT 2
16622: PPUSH
16623: CALL_OW 275
16627: PLUS
16628: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
16629: LD_ADDR_VAR 0 6
16633: PUSH
16634: LD_VAR 0 6
16638: PUSH
16639: LD_VAR 0 8
16643: PPUSH
16644: LD_INT 3
16646: PPUSH
16647: CALL_OW 275
16651: PLUS
16652: ST_TO_ADDR
// end ;
16653: GO 16563
16655: POP
16656: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
16657: LD_STRING setSpecText(
16659: PUSH
16660: LD_VAR 0 2
16664: STR
16665: PUSH
16666: LD_STRING ,
16668: STR
16669: PUSH
16670: LD_INT 2
16672: STR
16673: PUSH
16674: LD_STRING ,
16676: STR
16677: PUSH
16678: LD_VAR 0 4
16682: STR
16683: PUSH
16684: LD_STRING )
16686: STR
16687: PPUSH
16688: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
16692: LD_STRING setSpecText(
16694: PUSH
16695: LD_VAR 0 2
16699: STR
16700: PUSH
16701: LD_STRING ,
16703: STR
16704: PUSH
16705: LD_INT 3
16707: STR
16708: PUSH
16709: LD_STRING ,
16711: STR
16712: PUSH
16713: LD_VAR 0 5
16717: STR
16718: PUSH
16719: LD_STRING )
16721: STR
16722: PPUSH
16723: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
16727: LD_STRING setSpecText(
16729: PUSH
16730: LD_VAR 0 2
16734: STR
16735: PUSH
16736: LD_STRING ,
16738: STR
16739: PUSH
16740: LD_INT 4
16742: STR
16743: PUSH
16744: LD_STRING ,
16746: STR
16747: PUSH
16748: LD_VAR 0 6
16752: STR
16753: PUSH
16754: LD_STRING )
16756: STR
16757: PPUSH
16758: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
16762: LD_STRING setSpecText(
16764: PUSH
16765: LD_VAR 0 2
16769: STR
16770: PUSH
16771: LD_STRING ,
16773: STR
16774: PUSH
16775: LD_INT 5
16777: STR
16778: PUSH
16779: LD_STRING ,
16781: STR
16782: PUSH
16783: LD_VAR 0 7
16787: STR
16788: PUSH
16789: LD_STRING )
16791: STR
16792: PPUSH
16793: CALL_OW 559
// end ; end ;
16797: GO 16413
16799: POP
16800: POP
// end ;
16801: LD_VAR 0 1
16805: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
16806: LD_INT 2
16808: PUSH
16809: LD_INT 30
16811: PUSH
16812: LD_INT 0
16814: PUSH
16815: EMPTY
16816: LIST
16817: LIST
16818: PUSH
16819: LD_INT 30
16821: PUSH
16822: LD_INT 1
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: PUSH
16829: EMPTY
16830: LIST
16831: LIST
16832: LIST
16833: PPUSH
16834: CALL_OW 69
16838: IFFALSE 16848
16840: GO 16842
16842: DISABLE
// begin enable ;
16843: ENABLE
// UpdateSpectatorBar ;
16844: CALL 16389 0 0
// end ;
16848: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16849: LD_INT 0
16851: PPUSH
// end ;
16852: LD_VAR 0 12
16856: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
16857: LD_INT 0
16859: PPUSH
16860: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
16861: LD_VAR 0 1
16865: NOT
16866: IFTRUE 16885
16868: PUSH
16869: LD_VAR 0 2
16873: PPUSH
16874: LD_VAR 0 3
16878: PPUSH
16879: CALL_OW 488
16883: NOT
16884: OR
16885: IFTRUE 16920
16887: PUSH
16888: LD_VAR 0 1
16892: PPUSH
16893: CALL_OW 266
16897: PUSH
16898: LD_INT 3
16900: NONEQUAL
16901: IFFALSE 16919
16903: PUSH
16904: LD_VAR 0 1
16908: PPUSH
16909: CALL_OW 247
16913: PUSH
16914: LD_INT 1
16916: EQUAL
16917: NOT
16918: AND
16919: OR
16920: IFFALSE 16924
// exit ;
16922: GO 17206
// if GetType ( factory ) = unit_human then
16924: LD_VAR 0 1
16928: PPUSH
16929: CALL_OW 247
16933: PUSH
16934: LD_INT 1
16936: EQUAL
16937: IFFALSE 16954
// factory := IsInUnit ( factory ) ;
16939: LD_ADDR_VAR 0 1
16943: PUSH
16944: LD_VAR 0 1
16948: PPUSH
16949: CALL_OW 310
16953: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
16954: LD_VAR 0 1
16958: PPUSH
16959: CALL_OW 266
16963: PUSH
16964: LD_INT 3
16966: NONEQUAL
16967: IFFALSE 16971
// exit ;
16969: GO 17206
// for i := 1 to Count ( factoryWaypoints ) do
16971: LD_ADDR_VAR 0 5
16975: PUSH
16976: DOUBLE
16977: LD_INT 1
16979: DEC
16980: ST_TO_ADDR
16981: LD_EXP 60
16985: PPUSH
16986: CALL 26397 0 1
16990: PUSH
16991: FOR_TO
16992: IFFALSE 17154
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
16994: LD_VAR 0 2
16998: PPUSH
16999: LD_VAR 0 3
17003: PPUSH
17004: CALL_OW 428
17008: PUSH
17009: LD_EXP 60
17013: PUSH
17014: LD_VAR 0 5
17018: ARRAY
17019: PUSH
17020: LD_INT 2
17022: ARRAY
17023: EQUAL
17024: IFFALSE 17056
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
17026: LD_ADDR_EXP 60
17030: PUSH
17031: LD_EXP 60
17035: PPUSH
17036: LD_VAR 0 5
17040: PPUSH
17041: CALL_OW 3
17045: ST_TO_ADDR
// UpdateFactoryWaypoints ;
17046: CALL 17211 0 0
// exit ;
17050: POP
17051: POP
17052: GO 17206
// end else
17054: GO 17152
// if factory = factoryWaypoints [ i ] [ 2 ] then
17056: LD_VAR 0 1
17060: PUSH
17061: LD_EXP 60
17065: PUSH
17066: LD_VAR 0 5
17070: ARRAY
17071: PUSH
17072: LD_INT 2
17074: ARRAY
17075: EQUAL
17076: IFFALSE 17152
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
17078: LD_ADDR_EXP 60
17082: PUSH
17083: LD_EXP 60
17087: PPUSH
17088: LD_VAR 0 5
17092: PPUSH
17093: CALL_OW 3
17097: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
17098: LD_ADDR_EXP 60
17102: PUSH
17103: LD_EXP 60
17107: PPUSH
17108: LD_VAR 0 1
17112: PPUSH
17113: CALL_OW 255
17117: PUSH
17118: LD_VAR 0 1
17122: PUSH
17123: LD_VAR 0 2
17127: PUSH
17128: LD_VAR 0 3
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: LIST
17137: LIST
17138: PPUSH
17139: CALL 62373 0 2
17143: ST_TO_ADDR
// UpdateFactoryWaypoints ;
17144: CALL 17211 0 0
// exit ;
17148: POP
17149: POP
17150: GO 17206
// end ; end ;
17152: GO 16991
17154: POP
17155: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
17156: LD_ADDR_EXP 60
17160: PUSH
17161: LD_EXP 60
17165: PPUSH
17166: LD_VAR 0 1
17170: PPUSH
17171: CALL_OW 255
17175: PUSH
17176: LD_VAR 0 1
17180: PUSH
17181: LD_VAR 0 2
17185: PUSH
17186: LD_VAR 0 3
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: PPUSH
17197: CALL 62373 0 2
17201: ST_TO_ADDR
// UpdateFactoryWaypoints ;
17202: CALL 17211 0 0
// end ;
17206: LD_VAR 0 4
17210: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
17211: LD_INT 0
17213: PPUSH
17214: PPUSH
17215: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
17216: LD_STRING resetFactoryWaypoint();
17218: PPUSH
17219: CALL_OW 559
// if factoryWaypoints then
17223: LD_EXP 60
17227: IFFALSE 17348
// begin list := factoryWaypoints ;
17229: LD_ADDR_VAR 0 3
17233: PUSH
17234: LD_EXP 60
17238: ST_TO_ADDR
// for i := 1 to list do
17239: LD_ADDR_VAR 0 2
17243: PUSH
17244: DOUBLE
17245: LD_INT 1
17247: DEC
17248: ST_TO_ADDR
17249: LD_VAR 0 3
17253: PUSH
17254: FOR_TO
17255: IFFALSE 17346
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
17257: LD_STRING setFactoryWaypointXY(
17259: PUSH
17260: LD_VAR 0 3
17264: PUSH
17265: LD_VAR 0 2
17269: ARRAY
17270: PUSH
17271: LD_INT 1
17273: ARRAY
17274: STR
17275: PUSH
17276: LD_STRING ,
17278: STR
17279: PUSH
17280: LD_VAR 0 3
17284: PUSH
17285: LD_VAR 0 2
17289: ARRAY
17290: PUSH
17291: LD_INT 2
17293: ARRAY
17294: STR
17295: PUSH
17296: LD_STRING ,
17298: STR
17299: PUSH
17300: LD_VAR 0 3
17304: PUSH
17305: LD_VAR 0 2
17309: ARRAY
17310: PUSH
17311: LD_INT 3
17313: ARRAY
17314: STR
17315: PUSH
17316: LD_STRING ,
17318: STR
17319: PUSH
17320: LD_VAR 0 3
17324: PUSH
17325: LD_VAR 0 2
17329: ARRAY
17330: PUSH
17331: LD_INT 4
17333: ARRAY
17334: STR
17335: PUSH
17336: LD_STRING )
17338: STR
17339: PPUSH
17340: CALL_OW 559
17344: GO 17254
17346: POP
17347: POP
// end ; end ;
17348: LD_VAR 0 1
17352: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
17353: LD_INT 0
17355: PPUSH
// if HexInfo ( x , y ) = warehouse then
17356: LD_VAR 0 2
17360: PPUSH
17361: LD_VAR 0 3
17365: PPUSH
17366: CALL_OW 428
17370: PUSH
17371: LD_VAR 0 1
17375: EQUAL
17376: IFFALSE 17403
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
17378: LD_ADDR_EXP 62
17382: PUSH
17383: LD_EXP 62
17387: PPUSH
17388: LD_VAR 0 1
17392: PPUSH
17393: LD_INT 0
17395: PPUSH
17396: CALL_OW 1
17400: ST_TO_ADDR
17401: GO 17454
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
17403: LD_ADDR_EXP 62
17407: PUSH
17408: LD_EXP 62
17412: PPUSH
17413: LD_VAR 0 1
17417: PPUSH
17418: LD_VAR 0 1
17422: PPUSH
17423: CALL_OW 255
17427: PUSH
17428: LD_VAR 0 1
17432: PUSH
17433: LD_VAR 0 2
17437: PUSH
17438: LD_VAR 0 3
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: PPUSH
17449: CALL_OW 1
17453: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
17454: CALL 17463 0 0
// end ;
17458: LD_VAR 0 4
17462: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
17463: LD_INT 0
17465: PPUSH
17466: PPUSH
17467: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
17468: LD_STRING resetWarehouseGatheringPoints();
17470: PPUSH
17471: CALL_OW 559
// if warehouseGatheringPoints then
17475: LD_EXP 62
17479: IFFALSE 17605
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
17481: LD_ADDR_VAR 0 3
17485: PUSH
17486: LD_EXP 62
17490: PPUSH
17491: CALL 66307 0 1
17495: ST_TO_ADDR
// for i := 1 to list do
17496: LD_ADDR_VAR 0 2
17500: PUSH
17501: DOUBLE
17502: LD_INT 1
17504: DEC
17505: ST_TO_ADDR
17506: LD_VAR 0 3
17510: PUSH
17511: FOR_TO
17512: IFFALSE 17603
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
17514: LD_STRING setWarehouseGatheringPointXY(
17516: PUSH
17517: LD_VAR 0 3
17521: PUSH
17522: LD_VAR 0 2
17526: ARRAY
17527: PUSH
17528: LD_INT 1
17530: ARRAY
17531: STR
17532: PUSH
17533: LD_STRING ,
17535: STR
17536: PUSH
17537: LD_VAR 0 3
17541: PUSH
17542: LD_VAR 0 2
17546: ARRAY
17547: PUSH
17548: LD_INT 2
17550: ARRAY
17551: STR
17552: PUSH
17553: LD_STRING ,
17555: STR
17556: PUSH
17557: LD_VAR 0 3
17561: PUSH
17562: LD_VAR 0 2
17566: ARRAY
17567: PUSH
17568: LD_INT 3
17570: ARRAY
17571: STR
17572: PUSH
17573: LD_STRING ,
17575: STR
17576: PUSH
17577: LD_VAR 0 3
17581: PUSH
17582: LD_VAR 0 2
17586: ARRAY
17587: PUSH
17588: LD_INT 4
17590: ARRAY
17591: STR
17592: PUSH
17593: LD_STRING )
17595: STR
17596: PPUSH
17597: CALL_OW 559
17601: GO 17511
17603: POP
17604: POP
// end ; end ;
17605: LD_VAR 0 1
17609: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
17610: LD_INT 0
17612: PPUSH
17613: PPUSH
// if not mpSidePositions then
17614: LD_EXP 16
17618: NOT
17619: IFFALSE 17623
// exit ;
17621: GO 17694
// result :=  ;
17623: LD_ADDR_VAR 0 1
17627: PUSH
17628: LD_STRING 
17630: ST_TO_ADDR
// for i := 1 to 8 do
17631: LD_ADDR_VAR 0 2
17635: PUSH
17636: DOUBLE
17637: LD_INT 1
17639: DEC
17640: ST_TO_ADDR
17641: LD_INT 8
17643: PUSH
17644: FOR_TO
17645: IFFALSE 17675
// begin result := result & mpSidePositions [ i ] & ; ;
17647: LD_ADDR_VAR 0 1
17651: PUSH
17652: LD_VAR 0 1
17656: PUSH
17657: LD_EXP 16
17661: PUSH
17662: LD_VAR 0 2
17666: ARRAY
17667: STR
17668: PUSH
17669: LD_STRING ;
17671: STR
17672: ST_TO_ADDR
// end ;
17673: GO 17644
17675: POP
17676: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
17677: LD_STRING setMultiplayerRealPosition("
17679: PUSH
17680: LD_VAR 0 1
17684: STR
17685: PUSH
17686: LD_STRING ");
17688: STR
17689: PPUSH
17690: CALL_OW 559
// end ; end_of_file
17694: LD_VAR 0 1
17698: RET
// export function SOS_UnitDestroyed ( un ) ; begin
17699: LD_INT 0
17701: PPUSH
// ComRadiation ( un ) ;
17702: LD_VAR 0 1
17706: PPUSH
17707: CALL 18869 0 1
// end ;
17711: LD_VAR 0 2
17715: RET
// export function SOS_UnitKamikazed ( un ) ; begin
17716: LD_INT 0
17718: PPUSH
// ComRadiation ( un ) ;
17719: LD_VAR 0 1
17723: PPUSH
17724: CALL 18869 0 1
// end ;
17728: LD_VAR 0 2
17732: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17733: LD_INT 0
17735: PPUSH
// end ;
17736: LD_VAR 0 4
17740: RET
// export function SOS_Command ( cmd ) ; begin
17741: LD_INT 0
17743: PPUSH
// end ;
17744: LD_VAR 0 2
17748: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
17749: LD_INT 0
17751: PPUSH
// end ;
17752: LD_VAR 0 6
17756: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
17757: LD_INT 0
17759: PPUSH
17760: PPUSH
17761: PPUSH
17762: PPUSH
17763: PPUSH
// if not vehicle or not factory then
17764: LD_VAR 0 1
17768: NOT
17769: IFTRUE 17778
17771: PUSH
17772: LD_VAR 0 2
17776: NOT
17777: OR
17778: IFFALSE 17782
// exit ;
17780: GO 18444
// weapon := GetWeapon ( vehicle ) ;
17782: LD_ADDR_VAR 0 7
17786: PUSH
17787: LD_VAR 0 1
17791: PPUSH
17792: CALL_OW 264
17796: ST_TO_ADDR
// if weapon = ar_miner then
17797: LD_VAR 0 7
17801: PUSH
17802: LD_INT 81
17804: EQUAL
17805: IFFALSE 17862
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
17807: LD_ADDR_EXP 71
17811: PUSH
17812: LD_EXP 71
17816: PPUSH
17817: LD_EXP 71
17821: PUSH
17822: LD_INT 1
17824: PLUS
17825: PPUSH
17826: LD_VAR 0 1
17830: PPUSH
17831: CALL_OW 1
17835: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
17836: LD_ADDR_EXP 72
17840: PUSH
17841: LD_EXP 72
17845: PPUSH
17846: LD_EXP 72
17850: PUSH
17851: LD_INT 1
17853: PLUS
17854: PPUSH
17855: EMPTY
17856: PPUSH
17857: CALL_OW 1
17861: ST_TO_ADDR
// end ; if not factoryWaypoints then
17862: LD_EXP 60
17866: NOT
17867: IFFALSE 17871
// exit ;
17869: GO 18444
// for i := 1 to Count ( factoryWaypoints ) do
17871: LD_ADDR_VAR 0 4
17875: PUSH
17876: DOUBLE
17877: LD_INT 1
17879: DEC
17880: ST_TO_ADDR
17881: LD_EXP 60
17885: PPUSH
17886: CALL 26397 0 1
17890: PUSH
17891: FOR_TO
17892: IFFALSE 18442
// if factoryWaypoints [ i ] [ 2 ] = factory then
17894: LD_EXP 60
17898: PUSH
17899: LD_VAR 0 4
17903: ARRAY
17904: PUSH
17905: LD_INT 2
17907: ARRAY
17908: PUSH
17909: LD_VAR 0 2
17913: EQUAL
17914: IFFALSE 18440
// begin if GetControl ( vehicle ) = control_manual then
17916: LD_VAR 0 1
17920: PPUSH
17921: CALL_OW 263
17925: PUSH
17926: LD_INT 1
17928: EQUAL
17929: IFFALSE 18293
// begin driver := IsDrivenBy ( vehicle ) ;
17931: LD_ADDR_VAR 0 5
17935: PUSH
17936: LD_VAR 0 1
17940: PPUSH
17941: CALL_OW 311
17945: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
17946: LD_VAR 0 5
17950: PUSH
17951: LD_EXP 61
17955: IN
17956: IFTRUE 17970
17958: PUSH
17959: LD_VAR 0 1
17963: PUSH
17964: LD_EXP 61
17968: IN
17969: OR
17970: IFFALSE 17976
// exit ;
17972: POP
17973: POP
17974: GO 18444
// if not HasTask ( driver ) then
17976: LD_VAR 0 5
17980: PPUSH
17981: CALL_OW 314
17985: NOT
17986: IFFALSE 18291
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
17988: LD_ADDR_EXP 61
17992: PUSH
17993: LD_EXP 61
17997: PPUSH
17998: LD_VAR 0 5
18002: PPUSH
18003: CALL 62373 0 2
18007: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
18008: LD_ADDR_EXP 61
18012: PUSH
18013: LD_EXP 61
18017: PPUSH
18018: LD_VAR 0 1
18022: PPUSH
18023: CALL 62373 0 2
18027: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
18028: LD_ADDR_VAR 0 6
18032: PUSH
18033: LD_EXP 60
18037: PUSH
18038: LD_VAR 0 4
18042: ARRAY
18043: PUSH
18044: LD_INT 3
18046: ARRAY
18047: PPUSH
18048: LD_EXP 60
18052: PUSH
18053: LD_VAR 0 4
18057: ARRAY
18058: PUSH
18059: LD_INT 4
18061: ARRAY
18062: PPUSH
18063: CALL_OW 428
18067: ST_TO_ADDR
// if hex then
18068: LD_VAR 0 6
18072: IFFALSE 18090
// ComMoveUnit ( driver , hex ) else
18074: LD_VAR 0 5
18078: PPUSH
18079: LD_VAR 0 6
18083: PPUSH
18084: CALL_OW 112
18088: GO 18174
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
18090: LD_VAR 0 1
18094: PPUSH
18095: LD_EXP 60
18099: PUSH
18100: LD_VAR 0 4
18104: ARRAY
18105: PUSH
18106: LD_INT 3
18108: ARRAY
18109: PPUSH
18110: LD_EXP 60
18114: PUSH
18115: LD_VAR 0 4
18119: ARRAY
18120: PUSH
18121: LD_INT 4
18123: ARRAY
18124: PPUSH
18125: CALL_OW 297
18129: PUSH
18130: LD_INT 0
18132: GREATER
18133: IFFALSE 18174
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
18135: LD_VAR 0 5
18139: PPUSH
18140: LD_EXP 60
18144: PUSH
18145: LD_VAR 0 4
18149: ARRAY
18150: PUSH
18151: LD_INT 3
18153: ARRAY
18154: PPUSH
18155: LD_EXP 60
18159: PUSH
18160: LD_VAR 0 4
18164: ARRAY
18165: PUSH
18166: LD_INT 4
18168: ARRAY
18169: PPUSH
18170: CALL_OW 111
// AddComExitVehicle ( driver ) ;
18174: LD_VAR 0 5
18178: PPUSH
18179: CALL_OW 181
// if Multiplayer then
18183: LD_OWVAR 4
18187: IFFALSE 18236
// begin repeat wait ( 10 ) ;
18189: LD_INT 10
18191: PPUSH
18192: CALL_OW 67
// until not IsInUnit ( driver ) ;
18196: LD_VAR 0 5
18200: PPUSH
18201: CALL_OW 310
18205: NOT
18206: IFFALSE 18189
// if not HasTask ( driver ) then
18208: LD_VAR 0 5
18212: PPUSH
18213: CALL_OW 314
18217: NOT
18218: IFFALSE 18234
// ComEnterUnit ( driver , factory ) ;
18220: LD_VAR 0 5
18224: PPUSH
18225: LD_VAR 0 2
18229: PPUSH
18230: CALL_OW 120
// end else
18234: GO 18250
// AddComEnterUnit ( driver , factory ) ;
18236: LD_VAR 0 5
18240: PPUSH
18241: LD_VAR 0 2
18245: PPUSH
18246: CALL_OW 180
// wait ( 0 0$1 ) ;
18250: LD_INT 35
18252: PPUSH
18253: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
18257: LD_ADDR_EXP 61
18261: PUSH
18262: LD_EXP 61
18266: PUSH
18267: LD_VAR 0 5
18271: DIFF
18272: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
18273: LD_ADDR_EXP 61
18277: PUSH
18278: LD_EXP 61
18282: PUSH
18283: LD_VAR 0 1
18287: DIFF
18288: ST_TO_ADDR
// break ;
18289: GO 18442
// end ; end else
18291: GO 18440
// if GetControl ( vehicle ) = control_remote then
18293: LD_VAR 0 1
18297: PPUSH
18298: CALL_OW 263
18302: PUSH
18303: LD_INT 2
18305: EQUAL
18306: IFFALSE 18392
// begin wait ( 0 0$2 ) ;
18308: LD_INT 70
18310: PPUSH
18311: CALL_OW 67
// repeat wait ( 10 ) ;
18315: LD_INT 10
18317: PPUSH
18318: CALL_OW 67
// Connect ( vehicle ) ;
18322: LD_VAR 0 1
18326: PPUSH
18327: CALL 32675 0 1
// until IsControledBy ( vehicle ) ;
18331: LD_VAR 0 1
18335: PPUSH
18336: CALL_OW 312
18340: IFFALSE 18315
// wait ( 10 ) ;
18342: LD_INT 10
18344: PPUSH
18345: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
18349: LD_VAR 0 1
18353: PPUSH
18354: LD_EXP 60
18358: PUSH
18359: LD_VAR 0 4
18363: ARRAY
18364: PUSH
18365: LD_INT 3
18367: ARRAY
18368: PPUSH
18369: LD_EXP 60
18373: PUSH
18374: LD_VAR 0 4
18378: ARRAY
18379: PUSH
18380: LD_INT 4
18382: ARRAY
18383: PPUSH
18384: CALL_OW 111
// break ;
18388: GO 18442
// end else
18390: GO 18440
// begin wait ( 0 0$3 ) ;
18392: LD_INT 105
18394: PPUSH
18395: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
18399: LD_VAR 0 1
18403: PPUSH
18404: LD_EXP 60
18408: PUSH
18409: LD_VAR 0 4
18413: ARRAY
18414: PUSH
18415: LD_INT 3
18417: ARRAY
18418: PPUSH
18419: LD_EXP 60
18423: PUSH
18424: LD_VAR 0 4
18428: ARRAY
18429: PUSH
18430: LD_INT 4
18432: ARRAY
18433: PPUSH
18434: CALL_OW 111
// break ;
18438: GO 18442
// end ; end ;
18440: GO 17891
18442: POP
18443: POP
// end ;
18444: LD_VAR 0 3
18448: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
18449: LD_INT 0
18451: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
18452: LD_VAR 0 1
18456: PUSH
18457: LD_INT 250
18459: EQUAL
18460: IFFALSE 18477
18462: PUSH
18463: LD_VAR 0 2
18467: PPUSH
18468: CALL_OW 264
18472: PUSH
18473: LD_INT 81
18475: EQUAL
18476: AND
18477: IFFALSE 18498
// MinerPlaceMine ( unit , x , y ) ;
18479: LD_VAR 0 2
18483: PPUSH
18484: LD_VAR 0 4
18488: PPUSH
18489: LD_VAR 0 5
18493: PPUSH
18494: CALL 21844 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
18498: LD_VAR 0 1
18502: PUSH
18503: LD_INT 251
18505: EQUAL
18506: IFFALSE 18523
18508: PUSH
18509: LD_VAR 0 2
18513: PPUSH
18514: CALL_OW 264
18518: PUSH
18519: LD_INT 81
18521: EQUAL
18522: AND
18523: IFFALSE 18544
// MinerDetonateMine ( unit , x , y ) ;
18525: LD_VAR 0 2
18529: PPUSH
18530: LD_VAR 0 4
18534: PPUSH
18535: LD_VAR 0 5
18539: PPUSH
18540: CALL 22251 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
18544: LD_VAR 0 1
18548: PUSH
18549: LD_INT 252
18551: EQUAL
18552: IFFALSE 18569
18554: PUSH
18555: LD_VAR 0 2
18559: PPUSH
18560: CALL_OW 264
18564: PUSH
18565: LD_INT 81
18567: EQUAL
18568: AND
18569: IFFALSE 18590
// MinerCreateMinefield ( unit , x , y ) ;
18571: LD_VAR 0 2
18575: PPUSH
18576: LD_VAR 0 4
18580: PPUSH
18581: LD_VAR 0 5
18585: PPUSH
18586: CALL 22483 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
18590: LD_VAR 0 1
18594: PUSH
18595: LD_INT 253
18597: EQUAL
18598: IFFALSE 18615
18600: PUSH
18601: LD_VAR 0 2
18605: PPUSH
18606: CALL_OW 257
18610: PUSH
18611: LD_INT 5
18613: EQUAL
18614: AND
18615: IFFALSE 18636
// ComBinocular ( unit , x , y ) ;
18617: LD_VAR 0 2
18621: PPUSH
18622: LD_VAR 0 4
18626: PPUSH
18627: LD_VAR 0 5
18631: PPUSH
18632: CALL 22858 0 3
// if selectedUnit then
18636: LD_VAR 0 3
18640: IFFALSE 18700
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18642: LD_VAR 0 1
18646: PUSH
18647: LD_INT 254
18649: EQUAL
18650: IFFALSE 18667
18652: PUSH
18653: LD_VAR 0 2
18657: PPUSH
18658: CALL_OW 264
18662: PUSH
18663: LD_INT 99
18665: EQUAL
18666: AND
18667: IFFALSE 18684
18669: PUSH
18670: LD_VAR 0 3
18674: PPUSH
18675: CALL_OW 263
18679: PUSH
18680: LD_INT 3
18682: EQUAL
18683: AND
18684: IFFALSE 18700
// HackDestroyVehicle ( unit , selectedUnit ) ;
18686: LD_VAR 0 2
18690: PPUSH
18691: LD_VAR 0 3
18695: PPUSH
18696: CALL 21034 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18700: LD_VAR 0 1
18704: PUSH
18705: LD_INT 255
18707: EQUAL
18708: IFFALSE 18732
18710: PUSH
18711: LD_VAR 0 2
18715: PPUSH
18716: CALL_OW 264
18720: PUSH
18721: LD_INT 14
18723: PUSH
18724: LD_INT 53
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: IN
18731: AND
18732: IFFALSE 18750
18734: PUSH
18735: LD_VAR 0 4
18739: PPUSH
18740: LD_VAR 0 5
18744: PPUSH
18745: CALL_OW 488
18749: AND
18750: IFFALSE 18774
// CutTreeXYR ( unit , x , y , 12 ) ;
18752: LD_VAR 0 2
18756: PPUSH
18757: LD_VAR 0 4
18761: PPUSH
18762: LD_VAR 0 5
18766: PPUSH
18767: LD_INT 12
18769: PPUSH
18770: CALL 18965 0 4
// if cmd = 256 then
18774: LD_VAR 0 1
18778: PUSH
18779: LD_INT 256
18781: EQUAL
18782: IFFALSE 18803
// SetFactoryWaypoint ( unit , x , y ) ;
18784: LD_VAR 0 2
18788: PPUSH
18789: LD_VAR 0 4
18793: PPUSH
18794: LD_VAR 0 5
18798: PPUSH
18799: CALL 16857 0 3
// if cmd = 257 then
18803: LD_VAR 0 1
18807: PUSH
18808: LD_INT 257
18810: EQUAL
18811: IFFALSE 18832
// SetWarehouseGatheringPoint ( unit , x , y ) ;
18813: LD_VAR 0 2
18817: PPUSH
18818: LD_VAR 0 4
18822: PPUSH
18823: LD_VAR 0 5
18827: PPUSH
18828: CALL 17353 0 3
// if cmd = 258 then
18832: LD_VAR 0 1
18836: PUSH
18837: LD_INT 258
18839: EQUAL
18840: IFFALSE 18864
// BurnTreeXYR ( unit , x , y , 8 ) ;
18842: LD_VAR 0 2
18846: PPUSH
18847: LD_VAR 0 4
18851: PPUSH
18852: LD_VAR 0 5
18856: PPUSH
18857: LD_INT 8
18859: PPUSH
18860: CALL 19387 0 4
// end ;
18864: LD_VAR 0 6
18868: RET
// export function ComRadiation ( un ) ; var eff ; begin
18869: LD_INT 0
18871: PPUSH
18872: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
18873: LD_VAR 0 1
18877: PPUSH
18878: CALL_OW 264
18882: PUSH
18883: LD_INT 91
18885: NONEQUAL
18886: IFFALSE 18890
// exit ;
18888: GO 18960
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
18890: LD_INT 68
18892: PPUSH
18893: LD_VAR 0 1
18897: PPUSH
18898: CALL_OW 255
18902: PPUSH
18903: CALL_OW 321
18907: PUSH
18908: LD_INT 2
18910: EQUAL
18911: IFFALSE 18923
// eff := 50 else
18913: LD_ADDR_VAR 0 3
18917: PUSH
18918: LD_INT 50
18920: ST_TO_ADDR
18921: GO 18931
// eff := 25 ;
18923: LD_ADDR_VAR 0 3
18927: PUSH
18928: LD_INT 25
18930: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
18931: LD_VAR 0 1
18935: PPUSH
18936: CALL_OW 250
18940: PPUSH
18941: LD_VAR 0 1
18945: PPUSH
18946: CALL_OW 251
18950: PPUSH
18951: LD_VAR 0 3
18955: PPUSH
18956: CALL_OW 495
// end ;
18960: LD_VAR 0 2
18964: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18965: LD_INT 0
18967: PPUSH
18968: PPUSH
18969: PPUSH
18970: PPUSH
18971: PPUSH
18972: PPUSH
18973: PPUSH
18974: PPUSH
18975: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
18976: LD_VAR 0 1
18980: PPUSH
18981: CALL_OW 302
18985: NOT
18986: IFTRUE 19005
18988: PUSH
18989: LD_VAR 0 2
18993: PPUSH
18994: LD_VAR 0 3
18998: PPUSH
18999: CALL_OW 488
19003: NOT
19004: OR
19005: IFTRUE 19014
19007: PUSH
19008: LD_VAR 0 4
19012: NOT
19013: OR
19014: IFFALSE 19018
// exit ;
19016: GO 19382
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
19018: LD_VAR 0 1
19022: PPUSH
19023: CALL_OW 437
19027: PPUSH
19028: CALL 26397 0 1
19032: PUSH
19033: LD_INT 10
19035: GREATER
19036: IFFALSE 19040
// exit ;
19038: GO 19382
// list := [ ] ;
19040: LD_ADDR_VAR 0 13
19044: PUSH
19045: EMPTY
19046: ST_TO_ADDR
// if x - r < 0 then
19047: LD_VAR 0 2
19051: PUSH
19052: LD_VAR 0 4
19056: MINUS
19057: PUSH
19058: LD_INT 0
19060: LESS
19061: IFFALSE 19073
// min_x := 0 else
19063: LD_ADDR_VAR 0 7
19067: PUSH
19068: LD_INT 0
19070: ST_TO_ADDR
19071: GO 19089
// min_x := x - r ;
19073: LD_ADDR_VAR 0 7
19077: PUSH
19078: LD_VAR 0 2
19082: PUSH
19083: LD_VAR 0 4
19087: MINUS
19088: ST_TO_ADDR
// if y - r < 0 then
19089: LD_VAR 0 3
19093: PUSH
19094: LD_VAR 0 4
19098: MINUS
19099: PUSH
19100: LD_INT 0
19102: LESS
19103: IFFALSE 19115
// min_y := 0 else
19105: LD_ADDR_VAR 0 8
19109: PUSH
19110: LD_INT 0
19112: ST_TO_ADDR
19113: GO 19131
// min_y := y - r ;
19115: LD_ADDR_VAR 0 8
19119: PUSH
19120: LD_VAR 0 3
19124: PUSH
19125: LD_VAR 0 4
19129: MINUS
19130: ST_TO_ADDR
// max_x := x + r ;
19131: LD_ADDR_VAR 0 9
19135: PUSH
19136: LD_VAR 0 2
19140: PUSH
19141: LD_VAR 0 4
19145: PLUS
19146: ST_TO_ADDR
// max_y := y + r ;
19147: LD_ADDR_VAR 0 10
19151: PUSH
19152: LD_VAR 0 3
19156: PUSH
19157: LD_VAR 0 4
19161: PLUS
19162: ST_TO_ADDR
// for _x = min_x to max_x do
19163: LD_ADDR_VAR 0 11
19167: PUSH
19168: DOUBLE
19169: LD_VAR 0 7
19173: DEC
19174: ST_TO_ADDR
19175: LD_VAR 0 9
19179: PUSH
19180: FOR_TO
19181: IFFALSE 19300
// for _y = min_y to max_y do
19183: LD_ADDR_VAR 0 12
19187: PUSH
19188: DOUBLE
19189: LD_VAR 0 8
19193: DEC
19194: ST_TO_ADDR
19195: LD_VAR 0 10
19199: PUSH
19200: FOR_TO
19201: IFFALSE 19296
// begin if not ValidHex ( _x , _y ) then
19203: LD_VAR 0 11
19207: PPUSH
19208: LD_VAR 0 12
19212: PPUSH
19213: CALL_OW 488
19217: NOT
19218: IFFALSE 19222
// continue ;
19220: GO 19200
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
19222: LD_VAR 0 11
19226: PPUSH
19227: LD_VAR 0 12
19231: PPUSH
19232: CALL_OW 351
19236: IFFALSE 19254
19238: PUSH
19239: LD_VAR 0 11
19243: PPUSH
19244: LD_VAR 0 12
19248: PPUSH
19249: CALL_OW 554
19253: AND
19254: IFFALSE 19294
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
19256: LD_ADDR_VAR 0 13
19260: PUSH
19261: LD_VAR 0 13
19265: PPUSH
19266: LD_VAR 0 13
19270: PUSH
19271: LD_INT 1
19273: PLUS
19274: PPUSH
19275: LD_VAR 0 11
19279: PUSH
19280: LD_VAR 0 12
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: PPUSH
19289: CALL_OW 2
19293: ST_TO_ADDR
// end ;
19294: GO 19200
19296: POP
19297: POP
19298: GO 19180
19300: POP
19301: POP
// if not list then
19302: LD_VAR 0 13
19306: NOT
19307: IFFALSE 19311
// exit ;
19309: GO 19382
// for i in list do
19311: LD_ADDR_VAR 0 6
19315: PUSH
19316: LD_VAR 0 13
19320: PUSH
19321: FOR_IN
19322: IFFALSE 19380
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
19324: LD_VAR 0 1
19328: PPUSH
19329: LD_STRING M
19331: PUSH
19332: LD_VAR 0 6
19336: PUSH
19337: LD_INT 1
19339: ARRAY
19340: PUSH
19341: LD_VAR 0 6
19345: PUSH
19346: LD_INT 2
19348: ARRAY
19349: PUSH
19350: LD_INT 0
19352: PUSH
19353: LD_INT 0
19355: PUSH
19356: LD_INT 0
19358: PUSH
19359: LD_INT 0
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: PUSH
19371: EMPTY
19372: LIST
19373: PPUSH
19374: CALL_OW 447
19378: GO 19321
19380: POP
19381: POP
// end ;
19382: LD_VAR 0 5
19386: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
19387: LD_INT 0
19389: PPUSH
19390: PPUSH
19391: PPUSH
19392: PPUSH
19393: PPUSH
19394: PPUSH
19395: PPUSH
19396: PPUSH
19397: PPUSH
19398: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
19399: LD_VAR 0 1
19403: PPUSH
19404: CALL_OW 302
19408: NOT
19409: IFTRUE 19428
19411: PUSH
19412: LD_VAR 0 2
19416: PPUSH
19417: LD_VAR 0 3
19421: PPUSH
19422: CALL_OW 488
19426: NOT
19427: OR
19428: IFTRUE 19437
19430: PUSH
19431: LD_VAR 0 4
19435: NOT
19436: OR
19437: IFFALSE 19441
// exit ;
19439: GO 19980
// if Count ( GetTaskList ( flame ) ) > 10 then
19441: LD_VAR 0 1
19445: PPUSH
19446: CALL_OW 437
19450: PPUSH
19451: CALL 26397 0 1
19455: PUSH
19456: LD_INT 10
19458: GREATER
19459: IFFALSE 19463
// exit ;
19461: GO 19980
// list := [ ] ;
19463: LD_ADDR_VAR 0 13
19467: PUSH
19468: EMPTY
19469: ST_TO_ADDR
// if x - r < 0 then
19470: LD_VAR 0 2
19474: PUSH
19475: LD_VAR 0 4
19479: MINUS
19480: PUSH
19481: LD_INT 0
19483: LESS
19484: IFFALSE 19496
// min_x := 0 else
19486: LD_ADDR_VAR 0 7
19490: PUSH
19491: LD_INT 0
19493: ST_TO_ADDR
19494: GO 19512
// min_x := x - r ;
19496: LD_ADDR_VAR 0 7
19500: PUSH
19501: LD_VAR 0 2
19505: PUSH
19506: LD_VAR 0 4
19510: MINUS
19511: ST_TO_ADDR
// if y - r < 0 then
19512: LD_VAR 0 3
19516: PUSH
19517: LD_VAR 0 4
19521: MINUS
19522: PUSH
19523: LD_INT 0
19525: LESS
19526: IFFALSE 19538
// min_y := 0 else
19528: LD_ADDR_VAR 0 8
19532: PUSH
19533: LD_INT 0
19535: ST_TO_ADDR
19536: GO 19554
// min_y := y - r ;
19538: LD_ADDR_VAR 0 8
19542: PUSH
19543: LD_VAR 0 3
19547: PUSH
19548: LD_VAR 0 4
19552: MINUS
19553: ST_TO_ADDR
// max_x := x + r ;
19554: LD_ADDR_VAR 0 9
19558: PUSH
19559: LD_VAR 0 2
19563: PUSH
19564: LD_VAR 0 4
19568: PLUS
19569: ST_TO_ADDR
// max_y := y + r ;
19570: LD_ADDR_VAR 0 10
19574: PUSH
19575: LD_VAR 0 3
19579: PUSH
19580: LD_VAR 0 4
19584: PLUS
19585: ST_TO_ADDR
// for _x = min_x to max_x do
19586: LD_ADDR_VAR 0 11
19590: PUSH
19591: DOUBLE
19592: LD_VAR 0 7
19596: DEC
19597: ST_TO_ADDR
19598: LD_VAR 0 9
19602: PUSH
19603: FOR_TO
19604: IFFALSE 19723
// for _y = min_y to max_y do
19606: LD_ADDR_VAR 0 12
19610: PUSH
19611: DOUBLE
19612: LD_VAR 0 8
19616: DEC
19617: ST_TO_ADDR
19618: LD_VAR 0 10
19622: PUSH
19623: FOR_TO
19624: IFFALSE 19719
// begin if not ValidHex ( _x , _y ) then
19626: LD_VAR 0 11
19630: PPUSH
19631: LD_VAR 0 12
19635: PPUSH
19636: CALL_OW 488
19640: NOT
19641: IFFALSE 19645
// continue ;
19643: GO 19623
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
19645: LD_VAR 0 11
19649: PPUSH
19650: LD_VAR 0 12
19654: PPUSH
19655: CALL_OW 351
19659: IFFALSE 19677
19661: PUSH
19662: LD_VAR 0 11
19666: PPUSH
19667: LD_VAR 0 12
19671: PPUSH
19672: CALL_OW 554
19676: AND
19677: IFFALSE 19717
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
19679: LD_ADDR_VAR 0 13
19683: PUSH
19684: LD_VAR 0 13
19688: PPUSH
19689: LD_VAR 0 13
19693: PUSH
19694: LD_INT 1
19696: PLUS
19697: PPUSH
19698: LD_VAR 0 11
19702: PUSH
19703: LD_VAR 0 12
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: PPUSH
19712: CALL_OW 2
19716: ST_TO_ADDR
// end ;
19717: GO 19623
19719: POP
19720: POP
19721: GO 19603
19723: POP
19724: POP
// if not list then
19725: LD_VAR 0 13
19729: NOT
19730: IFFALSE 19734
// exit ;
19732: GO 19980
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
19734: LD_ADDR_VAR 0 13
19738: PUSH
19739: LD_VAR 0 1
19743: PPUSH
19744: LD_VAR 0 13
19748: PPUSH
19749: LD_INT 1
19751: PPUSH
19752: LD_INT 1
19754: PPUSH
19755: CALL 29803 0 4
19759: ST_TO_ADDR
// ComStop ( flame ) ;
19760: LD_VAR 0 1
19764: PPUSH
19765: CALL_OW 141
// for i in list do
19769: LD_ADDR_VAR 0 6
19773: PUSH
19774: LD_VAR 0 13
19778: PUSH
19779: FOR_IN
19780: IFFALSE 19811
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
19782: LD_VAR 0 1
19786: PPUSH
19787: LD_VAR 0 6
19791: PUSH
19792: LD_INT 1
19794: ARRAY
19795: PPUSH
19796: LD_VAR 0 6
19800: PUSH
19801: LD_INT 2
19803: ARRAY
19804: PPUSH
19805: CALL_OW 176
19809: GO 19779
19811: POP
19812: POP
// repeat wait ( 0 0$1 ) ;
19813: LD_INT 35
19815: PPUSH
19816: CALL_OW 67
// task := GetTaskList ( flame ) ;
19820: LD_ADDR_VAR 0 14
19824: PUSH
19825: LD_VAR 0 1
19829: PPUSH
19830: CALL_OW 437
19834: ST_TO_ADDR
// if not task then
19835: LD_VAR 0 14
19839: NOT
19840: IFFALSE 19844
// exit ;
19842: GO 19980
// if task [ 1 ] [ 1 ] <> | then
19844: LD_VAR 0 14
19848: PUSH
19849: LD_INT 1
19851: ARRAY
19852: PUSH
19853: LD_INT 1
19855: ARRAY
19856: PUSH
19857: LD_STRING |
19859: NONEQUAL
19860: IFFALSE 19864
// exit ;
19862: GO 19980
// _x := task [ 1 ] [ 2 ] ;
19864: LD_ADDR_VAR 0 11
19868: PUSH
19869: LD_VAR 0 14
19873: PUSH
19874: LD_INT 1
19876: ARRAY
19877: PUSH
19878: LD_INT 2
19880: ARRAY
19881: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
19882: LD_ADDR_VAR 0 12
19886: PUSH
19887: LD_VAR 0 14
19891: PUSH
19892: LD_INT 1
19894: ARRAY
19895: PUSH
19896: LD_INT 3
19898: ARRAY
19899: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
19900: LD_VAR 0 11
19904: PPUSH
19905: LD_VAR 0 12
19909: PPUSH
19910: CALL_OW 351
19914: NOT
19915: IFTRUE 19934
19917: PUSH
19918: LD_VAR 0 11
19922: PPUSH
19923: LD_VAR 0 12
19927: PPUSH
19928: CALL_OW 554
19932: NOT
19933: OR
19934: IFFALSE 19968
// begin task := Delete ( task , 1 ) ;
19936: LD_ADDR_VAR 0 14
19940: PUSH
19941: LD_VAR 0 14
19945: PPUSH
19946: LD_INT 1
19948: PPUSH
19949: CALL_OW 3
19953: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
19954: LD_VAR 0 1
19958: PPUSH
19959: LD_VAR 0 14
19963: PPUSH
19964: CALL_OW 446
// end ; until not HasTask ( flame ) ;
19968: LD_VAR 0 1
19972: PPUSH
19973: CALL_OW 314
19977: NOT
19978: IFFALSE 19813
// end ;
19980: LD_VAR 0 5
19984: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
19985: LD_EXP 64
19989: NOT
19990: IFFALSE 20040
19992: GO 19994
19994: DISABLE
// begin initHack := true ;
19995: LD_ADDR_EXP 64
19999: PUSH
20000: LD_INT 1
20002: ST_TO_ADDR
// hackTanks := [ ] ;
20003: LD_ADDR_EXP 65
20007: PUSH
20008: EMPTY
20009: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
20010: LD_ADDR_EXP 66
20014: PUSH
20015: EMPTY
20016: ST_TO_ADDR
// hackLimit := 3 ;
20017: LD_ADDR_EXP 67
20021: PUSH
20022: LD_INT 3
20024: ST_TO_ADDR
// hackDist := 12 ;
20025: LD_ADDR_EXP 68
20029: PUSH
20030: LD_INT 12
20032: ST_TO_ADDR
// hackCounter := [ ] ;
20033: LD_ADDR_EXP 69
20037: PUSH
20038: EMPTY
20039: ST_TO_ADDR
// end ;
20040: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
20041: LD_EXP 64
20045: IFFALSE 20063
20047: PUSH
20048: LD_INT 34
20050: PUSH
20051: LD_INT 99
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: PPUSH
20058: CALL_OW 69
20062: AND
20063: IFFALSE 20316
20065: GO 20067
20067: DISABLE
20068: LD_INT 0
20070: PPUSH
20071: PPUSH
// begin enable ;
20072: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
20073: LD_ADDR_VAR 0 1
20077: PUSH
20078: LD_INT 34
20080: PUSH
20081: LD_INT 99
20083: PUSH
20084: EMPTY
20085: LIST
20086: LIST
20087: PPUSH
20088: CALL_OW 69
20092: PUSH
20093: FOR_IN
20094: IFFALSE 20314
// begin if not i in hackTanks then
20096: LD_VAR 0 1
20100: PUSH
20101: LD_EXP 65
20105: IN
20106: NOT
20107: IFFALSE 20190
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
20109: LD_ADDR_EXP 65
20113: PUSH
20114: LD_EXP 65
20118: PPUSH
20119: LD_EXP 65
20123: PUSH
20124: LD_INT 1
20126: PLUS
20127: PPUSH
20128: LD_VAR 0 1
20132: PPUSH
20133: CALL_OW 1
20137: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
20138: LD_ADDR_EXP 66
20142: PUSH
20143: LD_EXP 66
20147: PPUSH
20148: LD_EXP 66
20152: PUSH
20153: LD_INT 1
20155: PLUS
20156: PPUSH
20157: EMPTY
20158: PPUSH
20159: CALL_OW 1
20163: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
20164: LD_ADDR_EXP 69
20168: PUSH
20169: LD_EXP 69
20173: PPUSH
20174: LD_EXP 69
20178: PUSH
20179: LD_INT 1
20181: PLUS
20182: PPUSH
20183: EMPTY
20184: PPUSH
20185: CALL_OW 1
20189: ST_TO_ADDR
// end ; if not IsOk ( i ) then
20190: LD_VAR 0 1
20194: PPUSH
20195: CALL_OW 302
20199: NOT
20200: IFFALSE 20213
// begin HackUnlinkAll ( i ) ;
20202: LD_VAR 0 1
20206: PPUSH
20207: CALL 20319 0 1
// continue ;
20211: GO 20093
// end ; HackCheckCapturedStatus ( i ) ;
20213: LD_VAR 0 1
20217: PPUSH
20218: CALL 20764 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
20222: LD_ADDR_VAR 0 2
20226: PUSH
20227: LD_INT 81
20229: PUSH
20230: LD_VAR 0 1
20234: PPUSH
20235: CALL_OW 255
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PUSH
20244: LD_INT 33
20246: PUSH
20247: LD_INT 3
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: PUSH
20254: LD_INT 91
20256: PUSH
20257: LD_VAR 0 1
20261: PUSH
20262: LD_EXP 68
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: LIST
20271: PUSH
20272: LD_INT 50
20274: PUSH
20275: EMPTY
20276: LIST
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: PPUSH
20284: CALL_OW 69
20288: ST_TO_ADDR
// if not tmp then
20289: LD_VAR 0 2
20293: NOT
20294: IFFALSE 20298
// continue ;
20296: GO 20093
// HackLink ( i , tmp ) ;
20298: LD_VAR 0 1
20302: PPUSH
20303: LD_VAR 0 2
20307: PPUSH
20308: CALL 20455 0 2
// end ;
20312: GO 20093
20314: POP
20315: POP
// end ;
20316: PPOPN 2
20318: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
20319: LD_INT 0
20321: PPUSH
20322: PPUSH
20323: PPUSH
// if not hack in hackTanks then
20324: LD_VAR 0 1
20328: PUSH
20329: LD_EXP 65
20333: IN
20334: NOT
20335: IFFALSE 20339
// exit ;
20337: GO 20450
// index := GetElementIndex ( hackTanks , hack ) ;
20339: LD_ADDR_VAR 0 4
20343: PUSH
20344: LD_EXP 65
20348: PPUSH
20349: LD_VAR 0 1
20353: PPUSH
20354: CALL 29098 0 2
20358: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
20359: LD_EXP 66
20363: PUSH
20364: LD_VAR 0 4
20368: ARRAY
20369: IFFALSE 20450
// begin for i in hackTanksCaptured [ index ] do
20371: LD_ADDR_VAR 0 3
20375: PUSH
20376: LD_EXP 66
20380: PUSH
20381: LD_VAR 0 4
20385: ARRAY
20386: PUSH
20387: FOR_IN
20388: IFFALSE 20414
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
20390: LD_VAR 0 3
20394: PUSH
20395: LD_INT 1
20397: ARRAY
20398: PPUSH
20399: LD_VAR 0 3
20403: PUSH
20404: LD_INT 2
20406: ARRAY
20407: PPUSH
20408: CALL_OW 235
20412: GO 20387
20414: POP
20415: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
20416: LD_ADDR_EXP 66
20420: PUSH
20421: LD_EXP 66
20425: PPUSH
20426: LD_VAR 0 4
20430: PPUSH
20431: EMPTY
20432: PPUSH
20433: CALL_OW 1
20437: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
20438: LD_VAR 0 1
20442: PPUSH
20443: LD_INT 0
20445: PPUSH
20446: CALL_OW 505
// end ; end ;
20450: LD_VAR 0 2
20454: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
20455: LD_INT 0
20457: PPUSH
20458: PPUSH
20459: PPUSH
// if not hack in hackTanks or not vehicles then
20460: LD_VAR 0 1
20464: PUSH
20465: LD_EXP 65
20469: IN
20470: NOT
20471: IFTRUE 20480
20473: PUSH
20474: LD_VAR 0 2
20478: NOT
20479: OR
20480: IFFALSE 20484
// exit ;
20482: GO 20759
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
20484: LD_ADDR_VAR 0 2
20488: PUSH
20489: LD_VAR 0 1
20493: PPUSH
20494: LD_VAR 0 2
20498: PPUSH
20499: LD_INT 1
20501: PPUSH
20502: LD_INT 1
20504: PPUSH
20505: CALL 29750 0 4
20509: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
20510: LD_ADDR_VAR 0 5
20514: PUSH
20515: LD_EXP 65
20519: PPUSH
20520: LD_VAR 0 1
20524: PPUSH
20525: CALL 29098 0 2
20529: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
20530: LD_EXP 66
20534: PUSH
20535: LD_VAR 0 5
20539: ARRAY
20540: PUSH
20541: LD_EXP 67
20545: LESS
20546: IFFALSE 20735
// begin for i := 1 to vehicles do
20548: LD_ADDR_VAR 0 4
20552: PUSH
20553: DOUBLE
20554: LD_INT 1
20556: DEC
20557: ST_TO_ADDR
20558: LD_VAR 0 2
20562: PUSH
20563: FOR_TO
20564: IFFALSE 20733
// begin if hackTanksCaptured [ index ] = hackLimit then
20566: LD_EXP 66
20570: PUSH
20571: LD_VAR 0 5
20575: ARRAY
20576: PUSH
20577: LD_EXP 67
20581: EQUAL
20582: IFFALSE 20586
// break ;
20584: GO 20733
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
20586: LD_ADDR_EXP 69
20590: PUSH
20591: LD_EXP 69
20595: PPUSH
20596: LD_VAR 0 5
20600: PPUSH
20601: LD_EXP 69
20605: PUSH
20606: LD_VAR 0 5
20610: ARRAY
20611: PUSH
20612: LD_INT 1
20614: PLUS
20615: PPUSH
20616: CALL_OW 1
20620: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
20621: LD_ADDR_EXP 66
20625: PUSH
20626: LD_EXP 66
20630: PPUSH
20631: LD_VAR 0 5
20635: PUSH
20636: LD_EXP 66
20640: PUSH
20641: LD_VAR 0 5
20645: ARRAY
20646: PUSH
20647: LD_INT 1
20649: PLUS
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PPUSH
20655: LD_VAR 0 2
20659: PUSH
20660: LD_VAR 0 4
20664: ARRAY
20665: PUSH
20666: LD_VAR 0 2
20670: PUSH
20671: LD_VAR 0 4
20675: ARRAY
20676: PPUSH
20677: CALL_OW 255
20681: PUSH
20682: EMPTY
20683: LIST
20684: LIST
20685: PPUSH
20686: CALL 29315 0 3
20690: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
20691: LD_VAR 0 2
20695: PUSH
20696: LD_VAR 0 4
20700: ARRAY
20701: PPUSH
20702: LD_VAR 0 1
20706: PPUSH
20707: CALL_OW 255
20711: PPUSH
20712: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
20716: LD_VAR 0 2
20720: PUSH
20721: LD_VAR 0 4
20725: ARRAY
20726: PPUSH
20727: CALL_OW 141
// end ;
20731: GO 20563
20733: POP
20734: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20735: LD_VAR 0 1
20739: PPUSH
20740: LD_EXP 66
20744: PUSH
20745: LD_VAR 0 5
20749: ARRAY
20750: PUSH
20751: LD_INT 0
20753: PLUS
20754: PPUSH
20755: CALL_OW 505
// end ;
20759: LD_VAR 0 3
20763: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
20764: LD_INT 0
20766: PPUSH
20767: PPUSH
20768: PPUSH
20769: PPUSH
// if not hack in hackTanks then
20770: LD_VAR 0 1
20774: PUSH
20775: LD_EXP 65
20779: IN
20780: NOT
20781: IFFALSE 20785
// exit ;
20783: GO 21029
// index := GetElementIndex ( hackTanks , hack ) ;
20785: LD_ADDR_VAR 0 4
20789: PUSH
20790: LD_EXP 65
20794: PPUSH
20795: LD_VAR 0 1
20799: PPUSH
20800: CALL 29098 0 2
20804: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
20805: LD_ADDR_VAR 0 3
20809: PUSH
20810: DOUBLE
20811: LD_EXP 66
20815: PUSH
20816: LD_VAR 0 4
20820: ARRAY
20821: INC
20822: ST_TO_ADDR
20823: LD_INT 1
20825: PUSH
20826: FOR_DOWNTO
20827: IFFALSE 21003
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
20829: LD_ADDR_VAR 0 5
20833: PUSH
20834: LD_EXP 66
20838: PUSH
20839: LD_VAR 0 4
20843: ARRAY
20844: PUSH
20845: LD_VAR 0 3
20849: ARRAY
20850: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
20851: LD_VAR 0 5
20855: PUSH
20856: LD_INT 1
20858: ARRAY
20859: PPUSH
20860: CALL_OW 302
20864: NOT
20865: IFTRUE 20893
20867: PUSH
20868: LD_VAR 0 5
20872: PUSH
20873: LD_INT 1
20875: ARRAY
20876: PPUSH
20877: CALL_OW 255
20881: PUSH
20882: LD_VAR 0 1
20886: PPUSH
20887: CALL_OW 255
20891: NONEQUAL
20892: OR
20893: IFFALSE 21001
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
20895: LD_VAR 0 5
20899: PUSH
20900: LD_INT 1
20902: ARRAY
20903: PPUSH
20904: CALL_OW 305
20908: IFFALSE 20936
20910: PUSH
20911: LD_VAR 0 5
20915: PUSH
20916: LD_INT 1
20918: ARRAY
20919: PPUSH
20920: CALL_OW 255
20924: PUSH
20925: LD_VAR 0 1
20929: PPUSH
20930: CALL_OW 255
20934: EQUAL
20935: AND
20936: IFFALSE 20960
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
20938: LD_VAR 0 5
20942: PUSH
20943: LD_INT 1
20945: ARRAY
20946: PPUSH
20947: LD_VAR 0 5
20951: PUSH
20952: LD_INT 2
20954: ARRAY
20955: PPUSH
20956: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
20960: LD_ADDR_EXP 66
20964: PUSH
20965: LD_EXP 66
20969: PPUSH
20970: LD_VAR 0 4
20974: PPUSH
20975: LD_EXP 66
20979: PUSH
20980: LD_VAR 0 4
20984: ARRAY
20985: PPUSH
20986: LD_VAR 0 3
20990: PPUSH
20991: CALL_OW 3
20995: PPUSH
20996: CALL_OW 1
21000: ST_TO_ADDR
// end ; end ;
21001: GO 20826
21003: POP
21004: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21005: LD_VAR 0 1
21009: PPUSH
21010: LD_EXP 66
21014: PUSH
21015: LD_VAR 0 4
21019: ARRAY
21020: PUSH
21021: LD_INT 0
21023: PLUS
21024: PPUSH
21025: CALL_OW 505
// end ;
21029: LD_VAR 0 2
21033: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
21034: LD_INT 0
21036: PPUSH
21037: PPUSH
21038: PPUSH
21039: PPUSH
// if not hack in hackTanks then
21040: LD_VAR 0 1
21044: PUSH
21045: LD_EXP 65
21049: IN
21050: NOT
21051: IFFALSE 21055
// exit ;
21053: GO 21140
// index := GetElementIndex ( hackTanks , hack ) ;
21055: LD_ADDR_VAR 0 5
21059: PUSH
21060: LD_EXP 65
21064: PPUSH
21065: LD_VAR 0 1
21069: PPUSH
21070: CALL 29098 0 2
21074: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
21075: LD_ADDR_VAR 0 4
21079: PUSH
21080: DOUBLE
21081: LD_INT 1
21083: DEC
21084: ST_TO_ADDR
21085: LD_EXP 66
21089: PUSH
21090: LD_VAR 0 5
21094: ARRAY
21095: PUSH
21096: FOR_TO
21097: IFFALSE 21138
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
21099: LD_EXP 66
21103: PUSH
21104: LD_VAR 0 5
21108: ARRAY
21109: PUSH
21110: LD_VAR 0 4
21114: ARRAY
21115: PUSH
21116: LD_INT 1
21118: ARRAY
21119: PUSH
21120: LD_VAR 0 2
21124: EQUAL
21125: IFFALSE 21136
// KillUnit ( vehicle ) ;
21127: LD_VAR 0 2
21131: PPUSH
21132: CALL_OW 66
21136: GO 21096
21138: POP
21139: POP
// end ;
21140: LD_VAR 0 3
21144: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
21145: LD_EXP 70
21149: NOT
21150: IFFALSE 21283
21152: GO 21154
21154: DISABLE
21155: LD_INT 0
21157: PPUSH
// begin initMiner := true ;
21158: LD_ADDR_EXP 70
21162: PUSH
21163: LD_INT 1
21165: ST_TO_ADDR
// minersList := [ ] ;
21166: LD_ADDR_EXP 71
21170: PUSH
21171: EMPTY
21172: ST_TO_ADDR
// minerMinesList := [ ] ;
21173: LD_ADDR_EXP 72
21177: PUSH
21178: EMPTY
21179: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
21180: LD_ADDR_EXP 73
21184: PUSH
21185: LD_INT 10
21187: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
21188: LD_ADDR_VAR 0 1
21192: PUSH
21193: LD_INT 34
21195: PUSH
21196: LD_INT 81
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PPUSH
21203: CALL_OW 69
21207: PUSH
21208: FOR_IN
21209: IFFALSE 21281
// begin if not i in minersList then
21211: LD_VAR 0 1
21215: PUSH
21216: LD_EXP 71
21220: IN
21221: NOT
21222: IFFALSE 21279
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
21224: LD_ADDR_EXP 71
21228: PUSH
21229: LD_EXP 71
21233: PPUSH
21234: LD_EXP 71
21238: PUSH
21239: LD_INT 1
21241: PLUS
21242: PPUSH
21243: LD_VAR 0 1
21247: PPUSH
21248: CALL_OW 1
21252: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
21253: LD_ADDR_EXP 72
21257: PUSH
21258: LD_EXP 72
21262: PPUSH
21263: LD_EXP 72
21267: PUSH
21268: LD_INT 1
21270: PLUS
21271: PPUSH
21272: EMPTY
21273: PPUSH
21274: CALL_OW 1
21278: ST_TO_ADDR
// end end ;
21279: GO 21208
21281: POP
21282: POP
// end ;
21283: PPOPN 1
21285: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
21286: LD_EXP 70
21290: IFFALSE 21321
21292: PUSH
21293: LD_EXP 72
21297: PPUSH
21298: CALL 26397 0 1
21302: IFTRUE 21320
21304: PUSH
21305: LD_INT 34
21307: PUSH
21308: LD_INT 81
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: PPUSH
21315: CALL_OW 69
21319: OR
21320: AND
21321: IFFALSE 21841
21323: GO 21325
21325: DISABLE
21326: LD_INT 0
21328: PPUSH
21329: PPUSH
21330: PPUSH
21331: PPUSH
// begin enable ;
21332: ENABLE
// for i := minerMinesList downto 1 do
21333: LD_ADDR_VAR 0 1
21337: PUSH
21338: DOUBLE
21339: LD_EXP 72
21343: INC
21344: ST_TO_ADDR
21345: LD_INT 1
21347: PUSH
21348: FOR_DOWNTO
21349: IFFALSE 21839
// begin side := GetSide ( minersList [ i ] ) ;
21351: LD_ADDR_VAR 0 3
21355: PUSH
21356: LD_EXP 71
21360: PUSH
21361: LD_VAR 0 1
21365: ARRAY
21366: PPUSH
21367: CALL_OW 255
21371: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
21372: LD_EXP 71
21376: PUSH
21377: LD_VAR 0 1
21381: ARRAY
21382: PPUSH
21383: CALL_OW 300
21387: IFFALSE 21408
21389: PUSH
21390: LD_VAR 0 3
21394: PUSH
21395: LD_OWVAR 2
21399: PUSH
21400: LD_INT 9
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: IN
21407: AND
21408: IFFALSE 21441
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
21410: LD_EXP 71
21414: PUSH
21415: LD_VAR 0 1
21419: ARRAY
21420: PPUSH
21421: LD_EXP 72
21425: PUSH
21426: LD_VAR 0 1
21430: ARRAY
21431: PPUSH
21432: CALL 26397 0 1
21436: PPUSH
21437: CALL_OW 505
// if not minerMinesList [ i ] then
21441: LD_EXP 72
21445: PUSH
21446: LD_VAR 0 1
21450: ARRAY
21451: NOT
21452: IFFALSE 21456
// continue ;
21454: GO 21348
// for j := minerMinesList [ i ] downto 1 do
21456: LD_ADDR_VAR 0 2
21460: PUSH
21461: DOUBLE
21462: LD_EXP 72
21466: PUSH
21467: LD_VAR 0 1
21471: ARRAY
21472: INC
21473: ST_TO_ADDR
21474: LD_INT 1
21476: PUSH
21477: FOR_DOWNTO
21478: IFFALSE 21835
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
21480: LD_EXP 71
21484: PUSH
21485: LD_VAR 0 1
21489: ARRAY
21490: PPUSH
21491: CALL_OW 301
21495: IFTRUE 21515
21497: PUSH
21498: LD_EXP 71
21502: PUSH
21503: LD_VAR 0 1
21507: ARRAY
21508: PPUSH
21509: CALL_OW 305
21513: NOT
21514: OR
21515: IFFALSE 21606
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
21517: LD_EXP 72
21521: PUSH
21522: LD_VAR 0 1
21526: ARRAY
21527: PUSH
21528: LD_VAR 0 2
21532: ARRAY
21533: PUSH
21534: LD_INT 1
21536: ARRAY
21537: PPUSH
21538: LD_EXP 72
21542: PUSH
21543: LD_VAR 0 1
21547: ARRAY
21548: PUSH
21549: LD_VAR 0 2
21553: ARRAY
21554: PUSH
21555: LD_INT 2
21557: ARRAY
21558: PPUSH
21559: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
21563: LD_ADDR_EXP 72
21567: PUSH
21568: LD_EXP 72
21572: PPUSH
21573: LD_VAR 0 1
21577: PPUSH
21578: LD_EXP 72
21582: PUSH
21583: LD_VAR 0 1
21587: ARRAY
21588: PPUSH
21589: LD_VAR 0 2
21593: PPUSH
21594: CALL_OW 3
21598: PPUSH
21599: CALL_OW 1
21603: ST_TO_ADDR
// continue ;
21604: GO 21477
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
21606: LD_ADDR_VAR 0 4
21610: PUSH
21611: LD_EXP 72
21615: PUSH
21616: LD_VAR 0 1
21620: ARRAY
21621: PUSH
21622: LD_VAR 0 2
21626: ARRAY
21627: PUSH
21628: LD_INT 1
21630: ARRAY
21631: PPUSH
21632: LD_EXP 72
21636: PUSH
21637: LD_VAR 0 1
21641: ARRAY
21642: PUSH
21643: LD_VAR 0 2
21647: ARRAY
21648: PUSH
21649: LD_INT 2
21651: ARRAY
21652: PPUSH
21653: CALL_OW 428
21657: ST_TO_ADDR
// if not tmp then
21658: LD_VAR 0 4
21662: NOT
21663: IFFALSE 21667
// continue ;
21665: GO 21477
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
21667: LD_VAR 0 4
21671: PUSH
21672: LD_INT 81
21674: PUSH
21675: LD_VAR 0 3
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: PPUSH
21684: CALL_OW 69
21688: IN
21689: IFFALSE 21739
21691: PUSH
21692: LD_EXP 72
21696: PUSH
21697: LD_VAR 0 1
21701: ARRAY
21702: PUSH
21703: LD_VAR 0 2
21707: ARRAY
21708: PUSH
21709: LD_INT 1
21711: ARRAY
21712: PPUSH
21713: LD_EXP 72
21717: PUSH
21718: LD_VAR 0 1
21722: ARRAY
21723: PUSH
21724: LD_VAR 0 2
21728: ARRAY
21729: PUSH
21730: LD_INT 2
21732: ARRAY
21733: PPUSH
21734: CALL_OW 458
21738: AND
21739: IFFALSE 21833
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
21741: LD_EXP 72
21745: PUSH
21746: LD_VAR 0 1
21750: ARRAY
21751: PUSH
21752: LD_VAR 0 2
21756: ARRAY
21757: PUSH
21758: LD_INT 1
21760: ARRAY
21761: PPUSH
21762: LD_EXP 72
21766: PUSH
21767: LD_VAR 0 1
21771: ARRAY
21772: PUSH
21773: LD_VAR 0 2
21777: ARRAY
21778: PUSH
21779: LD_INT 2
21781: ARRAY
21782: PPUSH
21783: LD_VAR 0 3
21787: PPUSH
21788: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
21792: LD_ADDR_EXP 72
21796: PUSH
21797: LD_EXP 72
21801: PPUSH
21802: LD_VAR 0 1
21806: PPUSH
21807: LD_EXP 72
21811: PUSH
21812: LD_VAR 0 1
21816: ARRAY
21817: PPUSH
21818: LD_VAR 0 2
21822: PPUSH
21823: CALL_OW 3
21827: PPUSH
21828: CALL_OW 1
21832: ST_TO_ADDR
// end ; end ;
21833: GO 21477
21835: POP
21836: POP
// end ;
21837: GO 21348
21839: POP
21840: POP
// end ;
21841: PPOPN 4
21843: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
21844: LD_INT 0
21846: PPUSH
21847: PPUSH
21848: PPUSH
21849: PPUSH
// result := false ;
21850: LD_ADDR_VAR 0 4
21854: PUSH
21855: LD_INT 0
21857: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
21858: LD_VAR 0 1
21862: PPUSH
21863: CALL_OW 264
21867: PUSH
21868: LD_INT 81
21870: EQUAL
21871: NOT
21872: IFFALSE 21876
// exit ;
21874: GO 22246
// side := GetSide ( unit ) ;
21876: LD_ADDR_VAR 0 6
21880: PUSH
21881: LD_VAR 0 1
21885: PPUSH
21886: CALL_OW 255
21890: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
21891: LD_ADDR_VAR 0 5
21895: PUSH
21896: LD_EXP 71
21900: PPUSH
21901: LD_VAR 0 1
21905: PPUSH
21906: CALL 29098 0 2
21910: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
21911: LD_EXP 72
21915: PUSH
21916: LD_VAR 0 5
21920: ARRAY
21921: PUSH
21922: LD_EXP 73
21926: GREATEREQUAL
21927: IFFALSE 21931
// exit ;
21929: GO 22246
// ComMoveXY ( unit , x , y ) ;
21931: LD_VAR 0 1
21935: PPUSH
21936: LD_VAR 0 2
21940: PPUSH
21941: LD_VAR 0 3
21945: PPUSH
21946: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21950: LD_INT 35
21952: PPUSH
21953: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
21957: LD_VAR 0 1
21961: PPUSH
21962: LD_VAR 0 2
21966: PPUSH
21967: LD_VAR 0 3
21971: PPUSH
21972: CALL 61154 0 3
21976: NOT
21977: IFFALSE 21990
21979: PUSH
21980: LD_VAR 0 1
21984: PPUSH
21985: CALL_OW 314
21989: AND
21990: IFFALSE 21994
// exit ;
21992: GO 22246
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
21994: LD_VAR 0 2
21998: PPUSH
21999: LD_VAR 0 3
22003: PPUSH
22004: CALL_OW 428
22008: PUSH
22009: LD_VAR 0 1
22013: EQUAL
22014: IFFALSE 22028
22016: PUSH
22017: LD_VAR 0 1
22021: PPUSH
22022: CALL_OW 314
22026: NOT
22027: AND
22028: IFFALSE 21950
// if MineAtPos ( x , y ) then
22030: LD_VAR 0 2
22034: PPUSH
22035: LD_VAR 0 3
22039: PPUSH
22040: CALL_OW 458
22044: IFFALSE 22048
// exit ;
22046: GO 22246
// if your_side = side then
22048: LD_OWVAR 2
22052: PUSH
22053: LD_VAR 0 6
22057: EQUAL
22058: IFFALSE 22077
// PlaySoundXY ( x , y , PlantMine ) ;
22060: LD_VAR 0 2
22064: PPUSH
22065: LD_VAR 0 3
22069: PPUSH
22070: LD_STRING PlantMine
22072: PPUSH
22073: CALL_OW 366
// repeat wait ( 1 ) ;
22077: LD_INT 1
22079: PPUSH
22080: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
22084: LD_VAR 0 2
22088: PPUSH
22089: LD_VAR 0 3
22093: PPUSH
22094: LD_VAR 0 6
22098: PPUSH
22099: LD_INT 0
22101: PPUSH
22102: CALL_OW 454
22106: IFFALSE 22077
// if MineAtPos ( x , y ) then
22108: LD_VAR 0 2
22112: PPUSH
22113: LD_VAR 0 3
22117: PPUSH
22118: CALL_OW 458
22122: IFFALSE 22238
// begin for i in minerMinesList [ index ] do
22124: LD_ADDR_VAR 0 7
22128: PUSH
22129: LD_EXP 72
22133: PUSH
22134: LD_VAR 0 5
22138: ARRAY
22139: PUSH
22140: FOR_IN
22141: IFFALSE 22183
// if i [ 1 ] = x and i [ 2 ] = y then
22143: LD_VAR 0 7
22147: PUSH
22148: LD_INT 1
22150: ARRAY
22151: PUSH
22152: LD_VAR 0 2
22156: EQUAL
22157: IFFALSE 22175
22159: PUSH
22160: LD_VAR 0 7
22164: PUSH
22165: LD_INT 2
22167: ARRAY
22168: PUSH
22169: LD_VAR 0 3
22173: EQUAL
22174: AND
22175: IFFALSE 22181
// exit ;
22177: POP
22178: POP
22179: GO 22246
22181: GO 22140
22183: POP
22184: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
22185: LD_ADDR_EXP 72
22189: PUSH
22190: LD_EXP 72
22194: PPUSH
22195: LD_VAR 0 5
22199: PUSH
22200: LD_EXP 72
22204: PUSH
22205: LD_VAR 0 5
22209: ARRAY
22210: PUSH
22211: LD_INT 1
22213: PLUS
22214: PUSH
22215: EMPTY
22216: LIST
22217: LIST
22218: PPUSH
22219: LD_VAR 0 2
22223: PUSH
22224: LD_VAR 0 3
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PPUSH
22233: CALL 29315 0 3
22237: ST_TO_ADDR
// end ; result := true ;
22238: LD_ADDR_VAR 0 4
22242: PUSH
22243: LD_INT 1
22245: ST_TO_ADDR
// end ;
22246: LD_VAR 0 4
22250: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
22251: LD_INT 0
22253: PPUSH
22254: PPUSH
22255: PPUSH
// if not unit in minersList then
22256: LD_VAR 0 1
22260: PUSH
22261: LD_EXP 71
22265: IN
22266: NOT
22267: IFFALSE 22271
// exit ;
22269: GO 22478
// index := GetElementIndex ( minersList , unit ) ;
22271: LD_ADDR_VAR 0 6
22275: PUSH
22276: LD_EXP 71
22280: PPUSH
22281: LD_VAR 0 1
22285: PPUSH
22286: CALL 29098 0 2
22290: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
22291: LD_ADDR_VAR 0 5
22295: PUSH
22296: DOUBLE
22297: LD_EXP 72
22301: PUSH
22302: LD_VAR 0 6
22306: ARRAY
22307: INC
22308: ST_TO_ADDR
22309: LD_INT 1
22311: PUSH
22312: FOR_DOWNTO
22313: IFFALSE 22476
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
22315: LD_EXP 72
22319: PUSH
22320: LD_VAR 0 6
22324: ARRAY
22325: PUSH
22326: LD_VAR 0 5
22330: ARRAY
22331: PUSH
22332: LD_INT 1
22334: ARRAY
22335: PPUSH
22336: LD_EXP 72
22340: PUSH
22341: LD_VAR 0 6
22345: ARRAY
22346: PUSH
22347: LD_VAR 0 5
22351: ARRAY
22352: PUSH
22353: LD_INT 2
22355: ARRAY
22356: PPUSH
22357: LD_VAR 0 2
22361: PPUSH
22362: LD_VAR 0 3
22366: PPUSH
22367: CALL_OW 298
22371: PUSH
22372: LD_INT 6
22374: LESS
22375: IFFALSE 22474
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22377: LD_EXP 72
22381: PUSH
22382: LD_VAR 0 6
22386: ARRAY
22387: PUSH
22388: LD_VAR 0 5
22392: ARRAY
22393: PUSH
22394: LD_INT 1
22396: ARRAY
22397: PPUSH
22398: LD_EXP 72
22402: PUSH
22403: LD_VAR 0 6
22407: ARRAY
22408: PUSH
22409: LD_VAR 0 5
22413: ARRAY
22414: PUSH
22415: LD_INT 2
22417: ARRAY
22418: PPUSH
22419: LD_VAR 0 1
22423: PPUSH
22424: CALL_OW 255
22428: PPUSH
22429: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22433: LD_ADDR_EXP 72
22437: PUSH
22438: LD_EXP 72
22442: PPUSH
22443: LD_VAR 0 6
22447: PPUSH
22448: LD_EXP 72
22452: PUSH
22453: LD_VAR 0 6
22457: ARRAY
22458: PPUSH
22459: LD_VAR 0 5
22463: PPUSH
22464: CALL_OW 3
22468: PPUSH
22469: CALL_OW 1
22473: ST_TO_ADDR
// end ; end ;
22474: GO 22312
22476: POP
22477: POP
// end ;
22478: LD_VAR 0 4
22482: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
22483: LD_INT 0
22485: PPUSH
22486: PPUSH
22487: PPUSH
22488: PPUSH
22489: PPUSH
22490: PPUSH
22491: PPUSH
22492: PPUSH
22493: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
22494: LD_VAR 0 1
22498: PPUSH
22499: CALL_OW 264
22503: PUSH
22504: LD_INT 81
22506: EQUAL
22507: NOT
22508: IFTRUE 22523
22510: PUSH
22511: LD_VAR 0 1
22515: PUSH
22516: LD_EXP 71
22520: IN
22521: NOT
22522: OR
22523: IFFALSE 22527
// exit ;
22525: GO 22853
// index := GetElementIndex ( minersList , unit ) ;
22527: LD_ADDR_VAR 0 6
22531: PUSH
22532: LD_EXP 71
22536: PPUSH
22537: LD_VAR 0 1
22541: PPUSH
22542: CALL 29098 0 2
22546: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
22547: LD_ADDR_VAR 0 8
22551: PUSH
22552: LD_EXP 73
22556: PUSH
22557: LD_EXP 72
22561: PUSH
22562: LD_VAR 0 6
22566: ARRAY
22567: MINUS
22568: ST_TO_ADDR
// if not minesFreeAmount then
22569: LD_VAR 0 8
22573: NOT
22574: IFFALSE 22578
// exit ;
22576: GO 22853
// tmp := [ ] ;
22578: LD_ADDR_VAR 0 7
22582: PUSH
22583: EMPTY
22584: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
22585: LD_ADDR_VAR 0 5
22589: PUSH
22590: DOUBLE
22591: LD_INT 1
22593: DEC
22594: ST_TO_ADDR
22595: LD_VAR 0 8
22599: PUSH
22600: FOR_TO
22601: IFFALSE 22800
// begin _d := rand ( 0 , 5 ) ;
22603: LD_ADDR_VAR 0 11
22607: PUSH
22608: LD_INT 0
22610: PPUSH
22611: LD_INT 5
22613: PPUSH
22614: CALL_OW 12
22618: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
22619: LD_ADDR_VAR 0 12
22623: PUSH
22624: LD_INT 2
22626: PPUSH
22627: LD_INT 6
22629: PPUSH
22630: CALL_OW 12
22634: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
22635: LD_ADDR_VAR 0 9
22639: PUSH
22640: LD_VAR 0 2
22644: PPUSH
22645: LD_VAR 0 11
22649: PPUSH
22650: LD_VAR 0 12
22654: PPUSH
22655: CALL_OW 272
22659: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
22660: LD_ADDR_VAR 0 10
22664: PUSH
22665: LD_VAR 0 3
22669: PPUSH
22670: LD_VAR 0 11
22674: PPUSH
22675: LD_VAR 0 12
22679: PPUSH
22680: CALL_OW 273
22684: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
22685: LD_VAR 0 9
22689: PPUSH
22690: LD_VAR 0 10
22694: PPUSH
22695: CALL_OW 488
22699: IFFALSE 22723
22701: PUSH
22702: LD_VAR 0 9
22706: PUSH
22707: LD_VAR 0 10
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: LD_VAR 0 7
22720: IN
22721: NOT
22722: AND
22723: IFFALSE 22742
22725: PUSH
22726: LD_VAR 0 9
22730: PPUSH
22731: LD_VAR 0 10
22735: PPUSH
22736: CALL_OW 458
22740: NOT
22741: AND
22742: IFFALSE 22784
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
22744: LD_ADDR_VAR 0 7
22748: PUSH
22749: LD_VAR 0 7
22753: PPUSH
22754: LD_VAR 0 7
22758: PUSH
22759: LD_INT 1
22761: PLUS
22762: PPUSH
22763: LD_VAR 0 9
22767: PUSH
22768: LD_VAR 0 10
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: PPUSH
22777: CALL_OW 1
22781: ST_TO_ADDR
22782: GO 22798
// i := i - 1 ;
22784: LD_ADDR_VAR 0 5
22788: PUSH
22789: LD_VAR 0 5
22793: PUSH
22794: LD_INT 1
22796: MINUS
22797: ST_TO_ADDR
// end ;
22798: GO 22600
22800: POP
22801: POP
// for i in tmp do
22802: LD_ADDR_VAR 0 5
22806: PUSH
22807: LD_VAR 0 7
22811: PUSH
22812: FOR_IN
22813: IFFALSE 22851
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
22815: LD_VAR 0 1
22819: PPUSH
22820: LD_VAR 0 5
22824: PUSH
22825: LD_INT 1
22827: ARRAY
22828: PPUSH
22829: LD_VAR 0 5
22833: PUSH
22834: LD_INT 2
22836: ARRAY
22837: PPUSH
22838: CALL 21844 0 3
22842: NOT
22843: IFFALSE 22849
// exit ;
22845: POP
22846: POP
22847: GO 22853
22849: GO 22812
22851: POP
22852: POP
// end ;
22853: LD_VAR 0 4
22857: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
22858: LD_INT 0
22860: PPUSH
22861: PPUSH
22862: PPUSH
22863: PPUSH
22864: PPUSH
22865: PPUSH
22866: PPUSH
22867: PPUSH
22868: PPUSH
// if GetClass ( unit ) <> class_sniper then
22869: LD_VAR 0 1
22873: PPUSH
22874: CALL_OW 257
22878: PUSH
22879: LD_INT 5
22881: NONEQUAL
22882: IFFALSE 22886
// exit ;
22884: GO 23356
// dist := 8 ;
22886: LD_ADDR_VAR 0 5
22890: PUSH
22891: LD_INT 8
22893: ST_TO_ADDR
// viewRange := 12 ;
22894: LD_ADDR_VAR 0 8
22898: PUSH
22899: LD_INT 12
22901: ST_TO_ADDR
// side := GetSide ( unit ) ;
22902: LD_ADDR_VAR 0 6
22906: PUSH
22907: LD_VAR 0 1
22911: PPUSH
22912: CALL_OW 255
22916: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
22917: LD_INT 61
22919: PPUSH
22920: LD_VAR 0 6
22924: PPUSH
22925: CALL_OW 321
22929: PUSH
22930: LD_INT 2
22932: EQUAL
22933: IFFALSE 22943
// viewRange := 16 ;
22935: LD_ADDR_VAR 0 8
22939: PUSH
22940: LD_INT 16
22942: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
22943: LD_VAR 0 1
22947: PPUSH
22948: LD_VAR 0 2
22952: PPUSH
22953: LD_VAR 0 3
22957: PPUSH
22958: CALL_OW 297
22962: PUSH
22963: LD_VAR 0 5
22967: GREATER
22968: IFFALSE 23047
// begin ComMoveXY ( unit , x , y ) ;
22970: LD_VAR 0 1
22974: PPUSH
22975: LD_VAR 0 2
22979: PPUSH
22980: LD_VAR 0 3
22984: PPUSH
22985: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22989: LD_INT 35
22991: PPUSH
22992: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
22996: LD_VAR 0 1
23000: PPUSH
23001: LD_VAR 0 2
23005: PPUSH
23006: LD_VAR 0 3
23010: PPUSH
23011: CALL 61154 0 3
23015: NOT
23016: IFFALSE 23020
// exit ;
23018: GO 23356
// until GetDistUnitXY ( unit , x , y ) < dist ;
23020: LD_VAR 0 1
23024: PPUSH
23025: LD_VAR 0 2
23029: PPUSH
23030: LD_VAR 0 3
23034: PPUSH
23035: CALL_OW 297
23039: PUSH
23040: LD_VAR 0 5
23044: LESS
23045: IFFALSE 22989
// end ; ComTurnXY ( unit , x , y ) ;
23047: LD_VAR 0 1
23051: PPUSH
23052: LD_VAR 0 2
23056: PPUSH
23057: LD_VAR 0 3
23061: PPUSH
23062: CALL_OW 118
// repeat if Multiplayer then
23066: LD_OWVAR 4
23070: IFFALSE 23081
// wait ( 35 ) else
23072: LD_INT 35
23074: PPUSH
23075: CALL_OW 67
23079: GO 23088
// wait ( 5 ) ;
23081: LD_INT 5
23083: PPUSH
23084: CALL_OW 67
// _d := GetDir ( unit ) ;
23088: LD_ADDR_VAR 0 11
23092: PUSH
23093: LD_VAR 0 1
23097: PPUSH
23098: CALL_OW 254
23102: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
23103: LD_ADDR_VAR 0 7
23107: PUSH
23108: LD_VAR 0 1
23112: PPUSH
23113: CALL_OW 250
23117: PPUSH
23118: LD_VAR 0 1
23122: PPUSH
23123: CALL_OW 251
23127: PPUSH
23128: LD_VAR 0 2
23132: PPUSH
23133: LD_VAR 0 3
23137: PPUSH
23138: CALL 63790 0 4
23142: ST_TO_ADDR
// until dir = _d ;
23143: LD_VAR 0 7
23147: PUSH
23148: LD_VAR 0 11
23152: EQUAL
23153: IFFALSE 23066
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
23155: LD_ADDR_VAR 0 9
23159: PUSH
23160: LD_VAR 0 1
23164: PPUSH
23165: CALL_OW 250
23169: PPUSH
23170: LD_VAR 0 7
23174: PPUSH
23175: LD_VAR 0 5
23179: PPUSH
23180: CALL_OW 272
23184: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
23185: LD_ADDR_VAR 0 10
23189: PUSH
23190: LD_VAR 0 1
23194: PPUSH
23195: CALL_OW 251
23199: PPUSH
23200: LD_VAR 0 7
23204: PPUSH
23205: LD_VAR 0 5
23209: PPUSH
23210: CALL_OW 273
23214: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23215: LD_VAR 0 9
23219: PPUSH
23220: LD_VAR 0 10
23224: PPUSH
23225: CALL_OW 488
23229: NOT
23230: IFFALSE 23234
// exit ;
23232: GO 23356
// ComAnimCustom ( unit , 1 ) ;
23234: LD_VAR 0 1
23238: PPUSH
23239: LD_INT 1
23241: PPUSH
23242: CALL_OW 592
// p := 0 ;
23246: LD_ADDR_VAR 0 12
23250: PUSH
23251: LD_INT 0
23253: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
23254: LD_VAR 0 9
23258: PPUSH
23259: LD_VAR 0 10
23263: PPUSH
23264: LD_VAR 0 6
23268: PPUSH
23269: LD_VAR 0 8
23273: PPUSH
23274: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
23278: LD_INT 35
23280: PPUSH
23281: CALL_OW 67
// p := Inc ( p ) ;
23285: LD_ADDR_VAR 0 12
23289: PUSH
23290: LD_VAR 0 12
23294: PPUSH
23295: CALL 63746 0 1
23299: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
23300: LD_VAR 0 12
23304: PUSH
23305: LD_INT 3
23307: EQUAL
23308: IFTRUE 23322
23310: PUSH
23311: LD_VAR 0 1
23315: PPUSH
23316: CALL_OW 302
23320: NOT
23321: OR
23322: IFTRUE 23335
23324: PUSH
23325: LD_VAR 0 1
23329: PPUSH
23330: CALL_OW 301
23334: OR
23335: IFFALSE 23278
// RemoveSeeing ( _x , _y , side ) ;
23337: LD_VAR 0 9
23341: PPUSH
23342: LD_VAR 0 10
23346: PPUSH
23347: LD_VAR 0 6
23351: PPUSH
23352: CALL_OW 331
// end ;
23356: LD_VAR 0 4
23360: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
23361: LD_INT 0
23363: PPUSH
23364: PPUSH
23365: PPUSH
23366: PPUSH
23367: PPUSH
23368: PPUSH
23369: PPUSH
23370: PPUSH
23371: PPUSH
23372: PPUSH
23373: PPUSH
// if not unit then
23374: LD_VAR 0 1
23378: NOT
23379: IFFALSE 23383
// exit ;
23381: GO 23654
// side := GetSide ( unit ) ;
23383: LD_ADDR_VAR 0 3
23387: PUSH
23388: LD_VAR 0 1
23392: PPUSH
23393: CALL_OW 255
23397: ST_TO_ADDR
// x := GetX ( unit ) ;
23398: LD_ADDR_VAR 0 5
23402: PUSH
23403: LD_VAR 0 1
23407: PPUSH
23408: CALL_OW 250
23412: ST_TO_ADDR
// y := GetY ( unit ) ;
23413: LD_ADDR_VAR 0 6
23417: PUSH
23418: LD_VAR 0 1
23422: PPUSH
23423: CALL_OW 251
23427: ST_TO_ADDR
// r := 8 ;
23428: LD_ADDR_VAR 0 4
23432: PUSH
23433: LD_INT 8
23435: ST_TO_ADDR
// if x - r < 0 then
23436: LD_VAR 0 5
23440: PUSH
23441: LD_VAR 0 4
23445: MINUS
23446: PUSH
23447: LD_INT 0
23449: LESS
23450: IFFALSE 23462
// min_x := 0 else
23452: LD_ADDR_VAR 0 7
23456: PUSH
23457: LD_INT 0
23459: ST_TO_ADDR
23460: GO 23478
// min_x := x - r ;
23462: LD_ADDR_VAR 0 7
23466: PUSH
23467: LD_VAR 0 5
23471: PUSH
23472: LD_VAR 0 4
23476: MINUS
23477: ST_TO_ADDR
// if y - r < 0 then
23478: LD_VAR 0 6
23482: PUSH
23483: LD_VAR 0 4
23487: MINUS
23488: PUSH
23489: LD_INT 0
23491: LESS
23492: IFFALSE 23504
// min_y := 0 else
23494: LD_ADDR_VAR 0 8
23498: PUSH
23499: LD_INT 0
23501: ST_TO_ADDR
23502: GO 23520
// min_y := y - r ;
23504: LD_ADDR_VAR 0 8
23508: PUSH
23509: LD_VAR 0 6
23513: PUSH
23514: LD_VAR 0 4
23518: MINUS
23519: ST_TO_ADDR
// max_x := x + r ;
23520: LD_ADDR_VAR 0 9
23524: PUSH
23525: LD_VAR 0 5
23529: PUSH
23530: LD_VAR 0 4
23534: PLUS
23535: ST_TO_ADDR
// max_y := y + r ;
23536: LD_ADDR_VAR 0 10
23540: PUSH
23541: LD_VAR 0 6
23545: PUSH
23546: LD_VAR 0 4
23550: PLUS
23551: ST_TO_ADDR
// for _x = min_x to max_x do
23552: LD_ADDR_VAR 0 11
23556: PUSH
23557: DOUBLE
23558: LD_VAR 0 7
23562: DEC
23563: ST_TO_ADDR
23564: LD_VAR 0 9
23568: PUSH
23569: FOR_TO
23570: IFFALSE 23652
// for _y = min_y to max_y do
23572: LD_ADDR_VAR 0 12
23576: PUSH
23577: DOUBLE
23578: LD_VAR 0 8
23582: DEC
23583: ST_TO_ADDR
23584: LD_VAR 0 10
23588: PUSH
23589: FOR_TO
23590: IFFALSE 23648
// begin if not ValidHex ( _x , _y ) then
23592: LD_VAR 0 11
23596: PPUSH
23597: LD_VAR 0 12
23601: PPUSH
23602: CALL_OW 488
23606: NOT
23607: IFFALSE 23611
// continue ;
23609: GO 23589
// if MineAtPos ( _x , _y ) then
23611: LD_VAR 0 11
23615: PPUSH
23616: LD_VAR 0 12
23620: PPUSH
23621: CALL_OW 458
23625: IFFALSE 23646
// ViewMineAtPos ( _x , _y , side ) ;
23627: LD_VAR 0 11
23631: PPUSH
23632: LD_VAR 0 12
23636: PPUSH
23637: LD_VAR 0 3
23641: PPUSH
23642: CALL_OW 457
// end ;
23646: GO 23589
23648: POP
23649: POP
23650: GO 23569
23652: POP
23653: POP
// end ;
23654: LD_VAR 0 2
23658: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
23659: LD_INT 0
23661: PPUSH
23662: PPUSH
23663: PPUSH
23664: PPUSH
23665: PPUSH
23666: PPUSH
23667: PPUSH
// if not units then
23668: LD_VAR 0 1
23672: NOT
23673: IFFALSE 23677
// exit ;
23675: GO 24141
// scaners := [ ] ;
23677: LD_ADDR_VAR 0 6
23681: PUSH
23682: EMPTY
23683: ST_TO_ADDR
// for i in units do
23684: LD_ADDR_VAR 0 3
23688: PUSH
23689: LD_VAR 0 1
23693: PUSH
23694: FOR_IN
23695: IFFALSE 23852
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
23697: LD_VAR 0 3
23701: PPUSH
23702: CALL_OW 264
23706: PUSH
23707: LD_INT 11
23709: NONEQUAL
23710: IFTRUE 23724
23712: PUSH
23713: LD_VAR 0 3
23717: PPUSH
23718: CALL_OW 302
23722: NOT
23723: OR
23724: IFTRUE 23741
23726: PUSH
23727: LD_VAR 0 3
23731: PPUSH
23732: CALL_OW 110
23736: PUSH
23737: LD_INT 502
23739: EQUAL
23740: OR
23741: IFFALSE 23745
// continue ;
23743: GO 23694
// ComStop ( i ) ;
23745: LD_VAR 0 3
23749: PPUSH
23750: CALL_OW 141
// x := GetX ( i ) ;
23754: LD_ADDR_VAR 0 4
23758: PUSH
23759: LD_VAR 0 3
23763: PPUSH
23764: CALL_OW 250
23768: ST_TO_ADDR
// y := GetY ( i ) ;
23769: LD_ADDR_VAR 0 5
23773: PUSH
23774: LD_VAR 0 3
23778: PPUSH
23779: CALL_OW 251
23783: ST_TO_ADDR
// if GetSide ( i ) = your_side then
23784: LD_VAR 0 3
23788: PPUSH
23789: CALL_OW 255
23793: PUSH
23794: LD_OWVAR 2
23798: EQUAL
23799: IFFALSE 23818
// PlaySoundXY ( x , y , mineDetector ) ;
23801: LD_VAR 0 4
23805: PPUSH
23806: LD_VAR 0 5
23810: PPUSH
23811: LD_STRING mineDetector
23813: PPUSH
23814: CALL_OW 366
// scaners := Join ( scaners , i ) ;
23818: LD_ADDR_VAR 0 6
23822: PUSH
23823: LD_VAR 0 6
23827: PPUSH
23828: LD_VAR 0 3
23832: PPUSH
23833: CALL 62373 0 2
23837: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
23838: LD_VAR 0 3
23842: PPUSH
23843: LD_INT 502
23845: PPUSH
23846: CALL_OW 109
// end ;
23850: GO 23694
23852: POP
23853: POP
// if not scaners then
23854: LD_VAR 0 6
23858: NOT
23859: IFFALSE 23863
// exit ;
23861: GO 24141
// wait ( 3 ) ;
23863: LD_INT 3
23865: PPUSH
23866: CALL_OW 67
// timer := 6 ;
23870: LD_ADDR_VAR 0 7
23874: PUSH
23875: LD_INT 6
23877: ST_TO_ADDR
// repeat for i in scaners do
23878: LD_ADDR_VAR 0 3
23882: PUSH
23883: LD_VAR 0 6
23887: PUSH
23888: FOR_IN
23889: IFFALSE 24039
// begin side := GetSide ( i ) ;
23891: LD_ADDR_VAR 0 8
23895: PUSH
23896: LD_VAR 0 3
23900: PPUSH
23901: CALL_OW 255
23905: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
23906: LD_VAR 0 3
23910: PPUSH
23911: CALL_OW 302
23915: NOT
23916: IFTRUE 23929
23918: PUSH
23919: LD_VAR 0 3
23923: PPUSH
23924: CALL_OW 314
23928: OR
23929: IFTRUE 23960
23931: PUSH
23932: LD_VAR 0 3
23936: PPUSH
23937: CALL_OW 263
23941: PUSH
23942: LD_INT 1
23944: EQUAL
23945: IFFALSE 23959
23947: PUSH
23948: LD_VAR 0 3
23952: PPUSH
23953: CALL_OW 311
23957: NOT
23958: AND
23959: OR
23960: IFFALSE 24004
// begin SetUnitDisplayNumber ( i , 0 ) ;
23962: LD_VAR 0 3
23966: PPUSH
23967: LD_INT 0
23969: PPUSH
23970: CALL_OW 505
// SetTag ( i , 0 ) ;
23974: LD_VAR 0 3
23978: PPUSH
23979: LD_INT 0
23981: PPUSH
23982: CALL_OW 109
// scaners := scaners diff i ;
23986: LD_ADDR_VAR 0 6
23990: PUSH
23991: LD_VAR 0 6
23995: PUSH
23996: LD_VAR 0 3
24000: DIFF
24001: ST_TO_ADDR
// continue ;
24002: GO 23888
// end ; if side in [ your_side , 9 ] then
24004: LD_VAR 0 8
24008: PUSH
24009: LD_OWVAR 2
24013: PUSH
24014: LD_INT 9
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: IN
24021: IFFALSE 24037
// SetUnitDisplayNumber ( i , timer ) ;
24023: LD_VAR 0 3
24027: PPUSH
24028: LD_VAR 0 7
24032: PPUSH
24033: CALL_OW 505
// end ;
24037: GO 23888
24039: POP
24040: POP
// if not scaners then
24041: LD_VAR 0 6
24045: NOT
24046: IFFALSE 24050
// exit ;
24048: GO 24141
// timer := Dec ( timer ) ;
24050: LD_ADDR_VAR 0 7
24054: PUSH
24055: LD_VAR 0 7
24059: PPUSH
24060: CALL 63768 0 1
24064: ST_TO_ADDR
// wait ( 0 0$1 ) ;
24065: LD_INT 35
24067: PPUSH
24068: CALL_OW 67
// until timer = 0 ;
24072: LD_VAR 0 7
24076: PUSH
24077: LD_INT 0
24079: EQUAL
24080: IFFALSE 23878
// if not scaners then
24082: LD_VAR 0 6
24086: NOT
24087: IFFALSE 24091
// exit ;
24089: GO 24141
// for i in scaners do
24091: LD_ADDR_VAR 0 3
24095: PUSH
24096: LD_VAR 0 6
24100: PUSH
24101: FOR_IN
24102: IFFALSE 24139
// begin SetUnitDisplayNumber ( i , 0 ) ;
24104: LD_VAR 0 3
24108: PPUSH
24109: LD_INT 0
24111: PPUSH
24112: CALL_OW 505
// SetTag ( i , 0 ) ;
24116: LD_VAR 0 3
24120: PPUSH
24121: LD_INT 0
24123: PPUSH
24124: CALL_OW 109
// RevealDetectorMine ( i ) ;
24128: LD_VAR 0 3
24132: PPUSH
24133: CALL 23361 0 1
// end ;
24137: GO 24101
24139: POP
24140: POP
// end ;
24141: LD_VAR 0 2
24145: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
24146: LD_INT 0
24148: PPUSH
// if p1 = mine_detector_mode then
24149: LD_VAR 0 2
24153: PUSH
24154: LD_INT 103
24156: EQUAL
24157: IFFALSE 24168
// DetectMine ( units ) ;
24159: LD_VAR 0 1
24163: PPUSH
24164: CALL 23659 0 1
// end ; end_of_file
24168: LD_VAR 0 7
24172: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24173: LD_INT 0
24175: PPUSH
24176: PPUSH
// if exist_mode then
24177: LD_VAR 0 2
24181: IFFALSE 24227
// begin unit := CreateCharacter ( prefix & ident ) ;
24183: LD_ADDR_VAR 0 5
24187: PUSH
24188: LD_VAR 0 3
24192: PUSH
24193: LD_VAR 0 1
24197: STR
24198: PPUSH
24199: CALL_OW 34
24203: ST_TO_ADDR
// if unit then
24204: LD_VAR 0 5
24208: IFFALSE 24225
// DeleteCharacters ( prefix & ident ) ;
24210: LD_VAR 0 3
24214: PUSH
24215: LD_VAR 0 1
24219: STR
24220: PPUSH
24221: CALL_OW 40
// end else
24225: GO 24242
// unit := NewCharacter ( ident ) ;
24227: LD_ADDR_VAR 0 5
24231: PUSH
24232: LD_VAR 0 1
24236: PPUSH
24237: CALL_OW 25
24241: ST_TO_ADDR
// result := unit ;
24242: LD_ADDR_VAR 0 4
24246: PUSH
24247: LD_VAR 0 5
24251: ST_TO_ADDR
// end ;
24252: LD_VAR 0 4
24256: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
24257: LD_INT 0
24259: PPUSH
24260: PPUSH
// if exist_mode then
24261: LD_VAR 0 2
24265: IFFALSE 24290
// unit := CreateCharacter ( prefix & ident ) else
24267: LD_ADDR_VAR 0 5
24271: PUSH
24272: LD_VAR 0 3
24276: PUSH
24277: LD_VAR 0 1
24281: STR
24282: PPUSH
24283: CALL_OW 34
24287: ST_TO_ADDR
24288: GO 24305
// unit := NewCharacter ( ident ) ;
24290: LD_ADDR_VAR 0 5
24294: PUSH
24295: LD_VAR 0 1
24299: PPUSH
24300: CALL_OW 25
24304: ST_TO_ADDR
// result := unit ;
24305: LD_ADDR_VAR 0 4
24309: PUSH
24310: LD_VAR 0 5
24314: ST_TO_ADDR
// end ;
24315: LD_VAR 0 4
24319: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24320: LD_INT 0
24322: PPUSH
24323: PPUSH
// if not side or not nation then
24324: LD_VAR 0 1
24328: NOT
24329: IFTRUE 24338
24331: PUSH
24332: LD_VAR 0 2
24336: NOT
24337: OR
24338: IFFALSE 24342
// exit ;
24340: GO 25136
// case nation of nation_american :
24342: LD_VAR 0 2
24346: PUSH
24347: LD_INT 1
24349: DOUBLE
24350: EQUAL
24351: IFTRUE 24355
24353: GO 24577
24355: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
24356: LD_ADDR_VAR 0 4
24360: PUSH
24361: LD_INT 35
24363: PUSH
24364: LD_INT 45
24366: PUSH
24367: LD_INT 46
24369: PUSH
24370: LD_INT 47
24372: PUSH
24373: LD_INT 82
24375: PUSH
24376: LD_INT 83
24378: PUSH
24379: LD_INT 84
24381: PUSH
24382: LD_INT 85
24384: PUSH
24385: LD_INT 86
24387: PUSH
24388: LD_INT 1
24390: PUSH
24391: LD_INT 2
24393: PUSH
24394: LD_INT 6
24396: PUSH
24397: LD_INT 15
24399: PUSH
24400: LD_INT 16
24402: PUSH
24403: LD_INT 7
24405: PUSH
24406: LD_INT 12
24408: PUSH
24409: LD_INT 13
24411: PUSH
24412: LD_INT 10
24414: PUSH
24415: LD_INT 14
24417: PUSH
24418: LD_INT 20
24420: PUSH
24421: LD_INT 21
24423: PUSH
24424: LD_INT 22
24426: PUSH
24427: LD_INT 25
24429: PUSH
24430: LD_INT 32
24432: PUSH
24433: LD_INT 27
24435: PUSH
24436: LD_INT 36
24438: PUSH
24439: LD_INT 69
24441: PUSH
24442: LD_INT 39
24444: PUSH
24445: LD_INT 34
24447: PUSH
24448: LD_INT 40
24450: PUSH
24451: LD_INT 48
24453: PUSH
24454: LD_INT 49
24456: PUSH
24457: LD_INT 50
24459: PUSH
24460: LD_INT 51
24462: PUSH
24463: LD_INT 52
24465: PUSH
24466: LD_INT 53
24468: PUSH
24469: LD_INT 54
24471: PUSH
24472: LD_INT 55
24474: PUSH
24475: LD_INT 56
24477: PUSH
24478: LD_INT 57
24480: PUSH
24481: LD_INT 58
24483: PUSH
24484: LD_INT 59
24486: PUSH
24487: LD_INT 60
24489: PUSH
24490: LD_INT 61
24492: PUSH
24493: LD_INT 62
24495: PUSH
24496: LD_INT 80
24498: PUSH
24499: LD_INT 82
24501: PUSH
24502: LD_INT 83
24504: PUSH
24505: LD_INT 84
24507: PUSH
24508: LD_INT 85
24510: PUSH
24511: LD_INT 86
24513: PUSH
24514: LD_INT 90
24516: PUSH
24517: LD_INT 93
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: ST_TO_ADDR
24575: GO 25058
24577: LD_INT 2
24579: DOUBLE
24580: EQUAL
24581: IFTRUE 24585
24583: GO 24819
24585: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
24586: LD_ADDR_VAR 0 4
24590: PUSH
24591: LD_INT 35
24593: PUSH
24594: LD_INT 45
24596: PUSH
24597: LD_INT 46
24599: PUSH
24600: LD_INT 47
24602: PUSH
24603: LD_INT 82
24605: PUSH
24606: LD_INT 83
24608: PUSH
24609: LD_INT 84
24611: PUSH
24612: LD_INT 85
24614: PUSH
24615: LD_INT 87
24617: PUSH
24618: LD_INT 70
24620: PUSH
24621: LD_INT 1
24623: PUSH
24624: LD_INT 11
24626: PUSH
24627: LD_INT 3
24629: PUSH
24630: LD_INT 4
24632: PUSH
24633: LD_INT 5
24635: PUSH
24636: LD_INT 6
24638: PUSH
24639: LD_INT 15
24641: PUSH
24642: LD_INT 18
24644: PUSH
24645: LD_INT 7
24647: PUSH
24648: LD_INT 17
24650: PUSH
24651: LD_INT 8
24653: PUSH
24654: LD_INT 20
24656: PUSH
24657: LD_INT 21
24659: PUSH
24660: LD_INT 22
24662: PUSH
24663: LD_INT 72
24665: PUSH
24666: LD_INT 26
24668: PUSH
24669: LD_INT 69
24671: PUSH
24672: LD_INT 39
24674: PUSH
24675: LD_INT 40
24677: PUSH
24678: LD_INT 41
24680: PUSH
24681: LD_INT 42
24683: PUSH
24684: LD_INT 43
24686: PUSH
24687: LD_INT 48
24689: PUSH
24690: LD_INT 49
24692: PUSH
24693: LD_INT 50
24695: PUSH
24696: LD_INT 51
24698: PUSH
24699: LD_INT 52
24701: PUSH
24702: LD_INT 53
24704: PUSH
24705: LD_INT 54
24707: PUSH
24708: LD_INT 55
24710: PUSH
24711: LD_INT 56
24713: PUSH
24714: LD_INT 60
24716: PUSH
24717: LD_INT 61
24719: PUSH
24720: LD_INT 62
24722: PUSH
24723: LD_INT 66
24725: PUSH
24726: LD_INT 67
24728: PUSH
24729: LD_INT 68
24731: PUSH
24732: LD_INT 81
24734: PUSH
24735: LD_INT 82
24737: PUSH
24738: LD_INT 83
24740: PUSH
24741: LD_INT 84
24743: PUSH
24744: LD_INT 85
24746: PUSH
24747: LD_INT 87
24749: PUSH
24750: LD_INT 88
24752: PUSH
24753: LD_INT 92
24755: PUSH
24756: LD_INT 94
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: ST_TO_ADDR
24817: GO 25058
24819: LD_INT 3
24821: DOUBLE
24822: EQUAL
24823: IFTRUE 24827
24825: GO 25057
24827: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
24828: LD_ADDR_VAR 0 4
24832: PUSH
24833: LD_INT 46
24835: PUSH
24836: LD_INT 47
24838: PUSH
24839: LD_INT 1
24841: PUSH
24842: LD_INT 2
24844: PUSH
24845: LD_INT 82
24847: PUSH
24848: LD_INT 83
24850: PUSH
24851: LD_INT 84
24853: PUSH
24854: LD_INT 85
24856: PUSH
24857: LD_INT 86
24859: PUSH
24860: LD_INT 11
24862: PUSH
24863: LD_INT 9
24865: PUSH
24866: LD_INT 20
24868: PUSH
24869: LD_INT 19
24871: PUSH
24872: LD_INT 21
24874: PUSH
24875: LD_INT 24
24877: PUSH
24878: LD_INT 22
24880: PUSH
24881: LD_INT 25
24883: PUSH
24884: LD_INT 28
24886: PUSH
24887: LD_INT 29
24889: PUSH
24890: LD_INT 30
24892: PUSH
24893: LD_INT 31
24895: PUSH
24896: LD_INT 37
24898: PUSH
24899: LD_INT 38
24901: PUSH
24902: LD_INT 32
24904: PUSH
24905: LD_INT 27
24907: PUSH
24908: LD_INT 33
24910: PUSH
24911: LD_INT 69
24913: PUSH
24914: LD_INT 39
24916: PUSH
24917: LD_INT 34
24919: PUSH
24920: LD_INT 40
24922: PUSH
24923: LD_INT 71
24925: PUSH
24926: LD_INT 23
24928: PUSH
24929: LD_INT 44
24931: PUSH
24932: LD_INT 48
24934: PUSH
24935: LD_INT 49
24937: PUSH
24938: LD_INT 50
24940: PUSH
24941: LD_INT 51
24943: PUSH
24944: LD_INT 52
24946: PUSH
24947: LD_INT 53
24949: PUSH
24950: LD_INT 54
24952: PUSH
24953: LD_INT 55
24955: PUSH
24956: LD_INT 56
24958: PUSH
24959: LD_INT 57
24961: PUSH
24962: LD_INT 58
24964: PUSH
24965: LD_INT 59
24967: PUSH
24968: LD_INT 63
24970: PUSH
24971: LD_INT 64
24973: PUSH
24974: LD_INT 65
24976: PUSH
24977: LD_INT 82
24979: PUSH
24980: LD_INT 83
24982: PUSH
24983: LD_INT 84
24985: PUSH
24986: LD_INT 85
24988: PUSH
24989: LD_INT 86
24991: PUSH
24992: LD_INT 89
24994: PUSH
24995: LD_INT 91
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: ST_TO_ADDR
25055: GO 25058
25057: POP
// if state > - 1 and state < 3 then
25058: LD_VAR 0 3
25062: PUSH
25063: LD_INT 1
25065: NEG
25066: GREATER
25067: IFFALSE 25079
25069: PUSH
25070: LD_VAR 0 3
25074: PUSH
25075: LD_INT 3
25077: LESS
25078: AND
25079: IFFALSE 25136
// for i in result do
25081: LD_ADDR_VAR 0 5
25085: PUSH
25086: LD_VAR 0 4
25090: PUSH
25091: FOR_IN
25092: IFFALSE 25134
// if GetTech ( i , side ) <> state then
25094: LD_VAR 0 5
25098: PPUSH
25099: LD_VAR 0 1
25103: PPUSH
25104: CALL_OW 321
25108: PUSH
25109: LD_VAR 0 3
25113: NONEQUAL
25114: IFFALSE 25132
// result := result diff i ;
25116: LD_ADDR_VAR 0 4
25120: PUSH
25121: LD_VAR 0 4
25125: PUSH
25126: LD_VAR 0 5
25130: DIFF
25131: ST_TO_ADDR
25132: GO 25091
25134: POP
25135: POP
// end ;
25136: LD_VAR 0 4
25140: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25141: LD_INT 0
25143: PPUSH
25144: PPUSH
25145: PPUSH
// result := true ;
25146: LD_ADDR_VAR 0 3
25150: PUSH
25151: LD_INT 1
25153: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25154: LD_ADDR_VAR 0 5
25158: PUSH
25159: LD_VAR 0 2
25163: PPUSH
25164: CALL_OW 480
25168: ST_TO_ADDR
// if not tmp then
25169: LD_VAR 0 5
25173: NOT
25174: IFFALSE 25178
// exit ;
25176: GO 25227
// for i in tmp do
25178: LD_ADDR_VAR 0 4
25182: PUSH
25183: LD_VAR 0 5
25187: PUSH
25188: FOR_IN
25189: IFFALSE 25225
// if GetTech ( i , side ) <> state_researched then
25191: LD_VAR 0 4
25195: PPUSH
25196: LD_VAR 0 1
25200: PPUSH
25201: CALL_OW 321
25205: PUSH
25206: LD_INT 2
25208: NONEQUAL
25209: IFFALSE 25223
// begin result := false ;
25211: LD_ADDR_VAR 0 3
25215: PUSH
25216: LD_INT 0
25218: ST_TO_ADDR
// exit ;
25219: POP
25220: POP
25221: GO 25227
// end ;
25223: GO 25188
25225: POP
25226: POP
// end ;
25227: LD_VAR 0 3
25231: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25232: LD_INT 0
25234: PPUSH
25235: PPUSH
25236: PPUSH
25237: PPUSH
25238: PPUSH
25239: PPUSH
25240: PPUSH
25241: PPUSH
25242: PPUSH
25243: PPUSH
25244: PPUSH
25245: PPUSH
25246: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25247: LD_VAR 0 1
25251: NOT
25252: IFTRUE 25269
25254: PUSH
25255: LD_VAR 0 1
25259: PPUSH
25260: CALL_OW 257
25264: PUSH
25265: LD_INT 9
25267: NONEQUAL
25268: OR
25269: IFFALSE 25273
// exit ;
25271: GO 25852
// side := GetSide ( unit ) ;
25273: LD_ADDR_VAR 0 9
25277: PUSH
25278: LD_VAR 0 1
25282: PPUSH
25283: CALL_OW 255
25287: ST_TO_ADDR
// tech_space := tech_spacanom ;
25288: LD_ADDR_VAR 0 12
25292: PUSH
25293: LD_INT 29
25295: ST_TO_ADDR
// tech_time := tech_taurad ;
25296: LD_ADDR_VAR 0 13
25300: PUSH
25301: LD_INT 28
25303: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25304: LD_ADDR_VAR 0 11
25308: PUSH
25309: LD_VAR 0 1
25313: PPUSH
25314: CALL_OW 310
25318: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25319: LD_VAR 0 11
25323: PPUSH
25324: CALL_OW 247
25328: PUSH
25329: LD_INT 2
25331: EQUAL
25332: IFFALSE 25336
// exit ;
25334: GO 25852
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25336: LD_ADDR_VAR 0 8
25340: PUSH
25341: LD_INT 81
25343: PUSH
25344: LD_VAR 0 9
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: LD_INT 3
25355: PUSH
25356: LD_INT 21
25358: PUSH
25359: LD_INT 3
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PPUSH
25374: CALL_OW 69
25378: ST_TO_ADDR
// if not tmp then
25379: LD_VAR 0 8
25383: NOT
25384: IFFALSE 25388
// exit ;
25386: GO 25852
// if in_unit then
25388: LD_VAR 0 11
25392: IFFALSE 25416
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25394: LD_ADDR_VAR 0 10
25398: PUSH
25399: LD_VAR 0 8
25403: PPUSH
25404: LD_VAR 0 11
25408: PPUSH
25409: CALL_OW 74
25413: ST_TO_ADDR
25414: GO 25436
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25416: LD_ADDR_VAR 0 10
25420: PUSH
25421: LD_VAR 0 8
25425: PPUSH
25426: LD_VAR 0 1
25430: PPUSH
25431: CALL_OW 74
25435: ST_TO_ADDR
// if not enemy then
25436: LD_VAR 0 10
25440: NOT
25441: IFFALSE 25445
// exit ;
25443: GO 25852
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25445: LD_VAR 0 11
25449: IFFALSE 25471
25451: PUSH
25452: LD_VAR 0 11
25456: PPUSH
25457: LD_VAR 0 10
25461: PPUSH
25462: CALL_OW 296
25466: PUSH
25467: LD_INT 13
25469: GREATER
25470: AND
25471: IFTRUE 25493
25473: PUSH
25474: LD_VAR 0 1
25478: PPUSH
25479: LD_VAR 0 10
25483: PPUSH
25484: CALL_OW 296
25488: PUSH
25489: LD_INT 12
25491: GREATER
25492: OR
25493: IFFALSE 25497
// exit ;
25495: GO 25852
// missile := [ 1 ] ;
25497: LD_ADDR_VAR 0 14
25501: PUSH
25502: LD_INT 1
25504: PUSH
25505: EMPTY
25506: LIST
25507: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25508: LD_VAR 0 9
25512: PPUSH
25513: LD_VAR 0 12
25517: PPUSH
25518: CALL_OW 325
25522: IFFALSE 25551
// missile := Replace ( missile , missile + 1 , 2 ) ;
25524: LD_ADDR_VAR 0 14
25528: PUSH
25529: LD_VAR 0 14
25533: PPUSH
25534: LD_VAR 0 14
25538: PUSH
25539: LD_INT 1
25541: PLUS
25542: PPUSH
25543: LD_INT 2
25545: PPUSH
25546: CALL_OW 1
25550: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25551: LD_VAR 0 9
25555: PPUSH
25556: LD_VAR 0 13
25560: PPUSH
25561: CALL_OW 325
25565: IFFALSE 25589
25567: PUSH
25568: LD_VAR 0 10
25572: PPUSH
25573: CALL_OW 255
25577: PPUSH
25578: LD_VAR 0 13
25582: PPUSH
25583: CALL_OW 325
25587: NOT
25588: AND
25589: IFFALSE 25618
// missile := Replace ( missile , missile + 1 , 3 ) ;
25591: LD_ADDR_VAR 0 14
25595: PUSH
25596: LD_VAR 0 14
25600: PPUSH
25601: LD_VAR 0 14
25605: PUSH
25606: LD_INT 1
25608: PLUS
25609: PPUSH
25610: LD_INT 3
25612: PPUSH
25613: CALL_OW 1
25617: ST_TO_ADDR
// if missile < 2 then
25618: LD_VAR 0 14
25622: PUSH
25623: LD_INT 2
25625: LESS
25626: IFFALSE 25630
// exit ;
25628: GO 25852
// x := GetX ( enemy ) ;
25630: LD_ADDR_VAR 0 4
25634: PUSH
25635: LD_VAR 0 10
25639: PPUSH
25640: CALL_OW 250
25644: ST_TO_ADDR
// y := GetY ( enemy ) ;
25645: LD_ADDR_VAR 0 5
25649: PUSH
25650: LD_VAR 0 10
25654: PPUSH
25655: CALL_OW 251
25659: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25660: LD_ADDR_VAR 0 6
25664: PUSH
25665: LD_VAR 0 4
25669: PUSH
25670: LD_INT 1
25672: NEG
25673: PPUSH
25674: LD_INT 1
25676: PPUSH
25677: CALL_OW 12
25681: PLUS
25682: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25683: LD_ADDR_VAR 0 7
25687: PUSH
25688: LD_VAR 0 5
25692: PUSH
25693: LD_INT 1
25695: NEG
25696: PPUSH
25697: LD_INT 1
25699: PPUSH
25700: CALL_OW 12
25704: PLUS
25705: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25706: LD_VAR 0 6
25710: PPUSH
25711: LD_VAR 0 7
25715: PPUSH
25716: CALL_OW 488
25720: NOT
25721: IFFALSE 25743
// begin _x := x ;
25723: LD_ADDR_VAR 0 6
25727: PUSH
25728: LD_VAR 0 4
25732: ST_TO_ADDR
// _y := y ;
25733: LD_ADDR_VAR 0 7
25737: PUSH
25738: LD_VAR 0 5
25742: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25743: LD_ADDR_VAR 0 3
25747: PUSH
25748: LD_INT 1
25750: PPUSH
25751: LD_VAR 0 14
25755: PPUSH
25756: CALL_OW 12
25760: ST_TO_ADDR
// case i of 1 :
25761: LD_VAR 0 3
25765: PUSH
25766: LD_INT 1
25768: DOUBLE
25769: EQUAL
25770: IFTRUE 25774
25772: GO 25791
25774: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25775: LD_VAR 0 1
25779: PPUSH
25780: LD_VAR 0 10
25784: PPUSH
25785: CALL_OW 115
25789: GO 25852
25791: LD_INT 2
25793: DOUBLE
25794: EQUAL
25795: IFTRUE 25799
25797: GO 25821
25799: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25800: LD_VAR 0 1
25804: PPUSH
25805: LD_VAR 0 6
25809: PPUSH
25810: LD_VAR 0 7
25814: PPUSH
25815: CALL_OW 153
25819: GO 25852
25821: LD_INT 3
25823: DOUBLE
25824: EQUAL
25825: IFTRUE 25829
25827: GO 25851
25829: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25830: LD_VAR 0 1
25834: PPUSH
25835: LD_VAR 0 6
25839: PPUSH
25840: LD_VAR 0 7
25844: PPUSH
25845: CALL_OW 154
25849: GO 25852
25851: POP
// end ;
25852: LD_VAR 0 2
25856: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25857: LD_INT 0
25859: PPUSH
25860: PPUSH
25861: PPUSH
25862: PPUSH
25863: PPUSH
25864: PPUSH
// if not unit or not building then
25865: LD_VAR 0 1
25869: NOT
25870: IFTRUE 25879
25872: PUSH
25873: LD_VAR 0 2
25877: NOT
25878: OR
25879: IFFALSE 25883
// exit ;
25881: GO 26041
// x := GetX ( building ) ;
25883: LD_ADDR_VAR 0 5
25887: PUSH
25888: LD_VAR 0 2
25892: PPUSH
25893: CALL_OW 250
25897: ST_TO_ADDR
// y := GetY ( building ) ;
25898: LD_ADDR_VAR 0 6
25902: PUSH
25903: LD_VAR 0 2
25907: PPUSH
25908: CALL_OW 251
25912: ST_TO_ADDR
// for i := 0 to 5 do
25913: LD_ADDR_VAR 0 4
25917: PUSH
25918: DOUBLE
25919: LD_INT 0
25921: DEC
25922: ST_TO_ADDR
25923: LD_INT 5
25925: PUSH
25926: FOR_TO
25927: IFFALSE 26039
// begin _x := ShiftX ( x , i , 3 ) ;
25929: LD_ADDR_VAR 0 7
25933: PUSH
25934: LD_VAR 0 5
25938: PPUSH
25939: LD_VAR 0 4
25943: PPUSH
25944: LD_INT 3
25946: PPUSH
25947: CALL_OW 272
25951: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25952: LD_ADDR_VAR 0 8
25956: PUSH
25957: LD_VAR 0 6
25961: PPUSH
25962: LD_VAR 0 4
25966: PPUSH
25967: LD_INT 3
25969: PPUSH
25970: CALL_OW 273
25974: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25975: LD_VAR 0 7
25979: PPUSH
25980: LD_VAR 0 8
25984: PPUSH
25985: CALL_OW 488
25989: NOT
25990: IFFALSE 25994
// continue ;
25992: GO 25926
// if HexInfo ( _x , _y ) = 0 then
25994: LD_VAR 0 7
25998: PPUSH
25999: LD_VAR 0 8
26003: PPUSH
26004: CALL_OW 428
26008: PUSH
26009: LD_INT 0
26011: EQUAL
26012: IFFALSE 26037
// begin ComMoveXY ( unit , _x , _y ) ;
26014: LD_VAR 0 1
26018: PPUSH
26019: LD_VAR 0 7
26023: PPUSH
26024: LD_VAR 0 8
26028: PPUSH
26029: CALL_OW 111
// exit ;
26033: POP
26034: POP
26035: GO 26041
// end ; end ;
26037: GO 25926
26039: POP
26040: POP
// end ;
26041: LD_VAR 0 3
26045: RET
// export function ScanBase ( side , base_area ) ; begin
26046: LD_INT 0
26048: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26049: LD_ADDR_VAR 0 3
26053: PUSH
26054: LD_VAR 0 2
26058: PPUSH
26059: LD_INT 81
26061: PUSH
26062: LD_VAR 0 1
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PPUSH
26071: CALL_OW 70
26075: ST_TO_ADDR
// end ;
26076: LD_VAR 0 3
26080: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26081: LD_INT 0
26083: PPUSH
26084: PPUSH
26085: PPUSH
26086: PPUSH
// result := false ;
26087: LD_ADDR_VAR 0 2
26091: PUSH
26092: LD_INT 0
26094: ST_TO_ADDR
// side := GetSide ( unit ) ;
26095: LD_ADDR_VAR 0 3
26099: PUSH
26100: LD_VAR 0 1
26104: PPUSH
26105: CALL_OW 255
26109: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26110: LD_ADDR_VAR 0 4
26114: PUSH
26115: LD_VAR 0 1
26119: PPUSH
26120: CALL_OW 248
26124: ST_TO_ADDR
// case nat of 1 :
26125: LD_VAR 0 4
26129: PUSH
26130: LD_INT 1
26132: DOUBLE
26133: EQUAL
26134: IFTRUE 26138
26136: GO 26149
26138: POP
// tech := tech_lassight ; 2 :
26139: LD_ADDR_VAR 0 5
26143: PUSH
26144: LD_INT 12
26146: ST_TO_ADDR
26147: GO 26188
26149: LD_INT 2
26151: DOUBLE
26152: EQUAL
26153: IFTRUE 26157
26155: GO 26168
26157: POP
// tech := tech_mortar ; 3 :
26158: LD_ADDR_VAR 0 5
26162: PUSH
26163: LD_INT 41
26165: ST_TO_ADDR
26166: GO 26188
26168: LD_INT 3
26170: DOUBLE
26171: EQUAL
26172: IFTRUE 26176
26174: GO 26187
26176: POP
// tech := tech_bazooka ; end ;
26177: LD_ADDR_VAR 0 5
26181: PUSH
26182: LD_INT 44
26184: ST_TO_ADDR
26185: GO 26188
26187: POP
// if Researched ( side , tech ) then
26188: LD_VAR 0 3
26192: PPUSH
26193: LD_VAR 0 5
26197: PPUSH
26198: CALL_OW 325
26202: IFFALSE 26229
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26204: LD_ADDR_VAR 0 2
26208: PUSH
26209: LD_INT 5
26211: PUSH
26212: LD_INT 8
26214: PUSH
26215: LD_INT 9
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: LIST
26222: PUSH
26223: LD_VAR 0 4
26227: ARRAY
26228: ST_TO_ADDR
// end ;
26229: LD_VAR 0 2
26233: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26234: LD_INT 0
26236: PPUSH
26237: PPUSH
26238: PPUSH
// if not mines then
26239: LD_VAR 0 2
26243: NOT
26244: IFFALSE 26248
// exit ;
26246: GO 26392
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26248: LD_ADDR_VAR 0 5
26252: PUSH
26253: LD_INT 81
26255: PUSH
26256: LD_VAR 0 1
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 3
26267: PUSH
26268: LD_INT 21
26270: PUSH
26271: LD_INT 3
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PPUSH
26286: CALL_OW 69
26290: ST_TO_ADDR
// for i in mines do
26291: LD_ADDR_VAR 0 4
26295: PUSH
26296: LD_VAR 0 2
26300: PUSH
26301: FOR_IN
26302: IFFALSE 26390
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26304: LD_VAR 0 4
26308: PUSH
26309: LD_INT 1
26311: ARRAY
26312: PPUSH
26313: LD_VAR 0 4
26317: PUSH
26318: LD_INT 2
26320: ARRAY
26321: PPUSH
26322: CALL_OW 458
26326: NOT
26327: IFFALSE 26331
// continue ;
26329: GO 26301
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26331: LD_VAR 0 4
26335: PUSH
26336: LD_INT 1
26338: ARRAY
26339: PPUSH
26340: LD_VAR 0 4
26344: PUSH
26345: LD_INT 2
26347: ARRAY
26348: PPUSH
26349: CALL_OW 428
26353: PUSH
26354: LD_VAR 0 5
26358: IN
26359: IFFALSE 26388
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26361: LD_VAR 0 4
26365: PUSH
26366: LD_INT 1
26368: ARRAY
26369: PPUSH
26370: LD_VAR 0 4
26374: PUSH
26375: LD_INT 2
26377: ARRAY
26378: PPUSH
26379: LD_VAR 0 1
26383: PPUSH
26384: CALL_OW 456
// end ;
26388: GO 26301
26390: POP
26391: POP
// end ;
26392: LD_VAR 0 3
26396: RET
// export function Count ( array ) ; begin
26397: LD_INT 0
26399: PPUSH
// result := array + 0 ;
26400: LD_ADDR_VAR 0 2
26404: PUSH
26405: LD_VAR 0 1
26409: PUSH
26410: LD_INT 0
26412: PLUS
26413: ST_TO_ADDR
// end ;
26414: LD_VAR 0 2
26418: RET
// export function IsEmpty ( building ) ; begin
26419: LD_INT 0
26421: PPUSH
// if not building then
26422: LD_VAR 0 1
26426: NOT
26427: IFFALSE 26431
// exit ;
26429: GO 26474
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26431: LD_ADDR_VAR 0 2
26435: PUSH
26436: LD_VAR 0 1
26440: PUSH
26441: LD_INT 22
26443: PUSH
26444: LD_VAR 0 1
26448: PPUSH
26449: CALL_OW 255
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 58
26460: PUSH
26461: EMPTY
26462: LIST
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PPUSH
26468: CALL_OW 69
26472: IN
26473: ST_TO_ADDR
// end ;
26474: LD_VAR 0 2
26478: RET
// export function IsNotFull ( building ) ; var places ; begin
26479: LD_INT 0
26481: PPUSH
26482: PPUSH
// if not building then
26483: LD_VAR 0 1
26487: NOT
26488: IFFALSE 26492
// exit ;
26490: GO 26520
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
26492: LD_ADDR_VAR 0 2
26496: PUSH
26497: LD_VAR 0 1
26501: PPUSH
26502: LD_INT 3
26504: PUSH
26505: LD_INT 62
26507: PUSH
26508: EMPTY
26509: LIST
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PPUSH
26515: CALL_OW 72
26519: ST_TO_ADDR
// end ;
26520: LD_VAR 0 2
26524: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26525: LD_INT 0
26527: PPUSH
26528: PPUSH
26529: PPUSH
26530: PPUSH
// tmp := [ ] ;
26531: LD_ADDR_VAR 0 3
26535: PUSH
26536: EMPTY
26537: ST_TO_ADDR
// list := [ ] ;
26538: LD_ADDR_VAR 0 5
26542: PUSH
26543: EMPTY
26544: ST_TO_ADDR
// for i = 16 to 25 do
26545: LD_ADDR_VAR 0 4
26549: PUSH
26550: DOUBLE
26551: LD_INT 16
26553: DEC
26554: ST_TO_ADDR
26555: LD_INT 25
26557: PUSH
26558: FOR_TO
26559: IFFALSE 26632
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26561: LD_ADDR_VAR 0 3
26565: PUSH
26566: LD_VAR 0 3
26570: PUSH
26571: LD_INT 22
26573: PUSH
26574: LD_VAR 0 1
26578: PPUSH
26579: CALL_OW 255
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: PUSH
26588: LD_INT 91
26590: PUSH
26591: LD_VAR 0 1
26595: PUSH
26596: LD_INT 6
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: LIST
26603: PUSH
26604: LD_INT 30
26606: PUSH
26607: LD_VAR 0 4
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: LIST
26620: PUSH
26621: EMPTY
26622: LIST
26623: PPUSH
26624: CALL_OW 69
26628: ADD
26629: ST_TO_ADDR
26630: GO 26558
26632: POP
26633: POP
// for i = 1 to tmp do
26634: LD_ADDR_VAR 0 4
26638: PUSH
26639: DOUBLE
26640: LD_INT 1
26642: DEC
26643: ST_TO_ADDR
26644: LD_VAR 0 3
26648: PUSH
26649: FOR_TO
26650: IFFALSE 26738
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26652: LD_ADDR_VAR 0 5
26656: PUSH
26657: LD_VAR 0 5
26661: PUSH
26662: LD_VAR 0 3
26666: PUSH
26667: LD_VAR 0 4
26671: ARRAY
26672: PPUSH
26673: CALL_OW 266
26677: PUSH
26678: LD_VAR 0 3
26682: PUSH
26683: LD_VAR 0 4
26687: ARRAY
26688: PPUSH
26689: CALL_OW 250
26693: PUSH
26694: LD_VAR 0 3
26698: PUSH
26699: LD_VAR 0 4
26703: ARRAY
26704: PPUSH
26705: CALL_OW 251
26709: PUSH
26710: LD_VAR 0 3
26714: PUSH
26715: LD_VAR 0 4
26719: ARRAY
26720: PPUSH
26721: CALL_OW 254
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: PUSH
26732: EMPTY
26733: LIST
26734: ADD
26735: ST_TO_ADDR
26736: GO 26649
26738: POP
26739: POP
// result := list ;
26740: LD_ADDR_VAR 0 2
26744: PUSH
26745: LD_VAR 0 5
26749: ST_TO_ADDR
// end ;
26750: LD_VAR 0 2
26754: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26755: LD_INT 0
26757: PPUSH
26758: PPUSH
26759: PPUSH
26760: PPUSH
26761: PPUSH
26762: PPUSH
26763: PPUSH
// if not factory then
26764: LD_VAR 0 1
26768: NOT
26769: IFFALSE 26773
// exit ;
26771: GO 27376
// if control = control_apeman then
26773: LD_VAR 0 4
26777: PUSH
26778: LD_INT 5
26780: EQUAL
26781: IFFALSE 26890
// begin tmp := UnitsInside ( factory ) ;
26783: LD_ADDR_VAR 0 8
26787: PUSH
26788: LD_VAR 0 1
26792: PPUSH
26793: CALL_OW 313
26797: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26798: LD_VAR 0 8
26802: PPUSH
26803: LD_INT 25
26805: PUSH
26806: LD_INT 12
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PPUSH
26813: CALL_OW 72
26817: NOT
26818: IFFALSE 26828
// control := control_manual ;
26820: LD_ADDR_VAR 0 4
26824: PUSH
26825: LD_INT 1
26827: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26828: LD_ADDR_VAR 0 8
26832: PUSH
26833: LD_VAR 0 1
26837: PPUSH
26838: CALL 26525 0 1
26842: ST_TO_ADDR
// if tmp then
26843: LD_VAR 0 8
26847: IFFALSE 26890
// begin for i in tmp do
26849: LD_ADDR_VAR 0 7
26853: PUSH
26854: LD_VAR 0 8
26858: PUSH
26859: FOR_IN
26860: IFFALSE 26888
// if i [ 1 ] = b_ext_radio then
26862: LD_VAR 0 7
26866: PUSH
26867: LD_INT 1
26869: ARRAY
26870: PUSH
26871: LD_INT 22
26873: EQUAL
26874: IFFALSE 26886
// begin control := control_remote ;
26876: LD_ADDR_VAR 0 4
26880: PUSH
26881: LD_INT 2
26883: ST_TO_ADDR
// break ;
26884: GO 26888
// end ;
26886: GO 26859
26888: POP
26889: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26890: LD_VAR 0 1
26894: PPUSH
26895: LD_VAR 0 2
26899: PPUSH
26900: LD_VAR 0 3
26904: PPUSH
26905: LD_VAR 0 4
26909: PPUSH
26910: LD_VAR 0 5
26914: PPUSH
26915: CALL_OW 448
26919: IFFALSE 26954
// begin result := [ chassis , engine , control , weapon ] ;
26921: LD_ADDR_VAR 0 6
26925: PUSH
26926: LD_VAR 0 2
26930: PUSH
26931: LD_VAR 0 3
26935: PUSH
26936: LD_VAR 0 4
26940: PUSH
26941: LD_VAR 0 5
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: ST_TO_ADDR
// exit ;
26952: GO 27376
// end ; _chassis := AvailableChassisList ( factory ) ;
26954: LD_ADDR_VAR 0 9
26958: PUSH
26959: LD_VAR 0 1
26963: PPUSH
26964: CALL_OW 475
26968: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26969: LD_ADDR_VAR 0 11
26973: PUSH
26974: LD_VAR 0 1
26978: PPUSH
26979: CALL_OW 476
26983: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26984: LD_ADDR_VAR 0 12
26988: PUSH
26989: LD_VAR 0 1
26993: PPUSH
26994: CALL_OW 477
26998: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26999: LD_ADDR_VAR 0 10
27003: PUSH
27004: LD_VAR 0 1
27008: PPUSH
27009: CALL_OW 478
27013: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27014: LD_VAR 0 9
27018: NOT
27019: IFTRUE 27028
27021: PUSH
27022: LD_VAR 0 11
27026: NOT
27027: OR
27028: IFTRUE 27037
27030: PUSH
27031: LD_VAR 0 12
27035: NOT
27036: OR
27037: IFTRUE 27046
27039: PUSH
27040: LD_VAR 0 10
27044: NOT
27045: OR
27046: IFFALSE 27081
// begin result := [ chassis , engine , control , weapon ] ;
27048: LD_ADDR_VAR 0 6
27052: PUSH
27053: LD_VAR 0 2
27057: PUSH
27058: LD_VAR 0 3
27062: PUSH
27063: LD_VAR 0 4
27067: PUSH
27068: LD_VAR 0 5
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: ST_TO_ADDR
// exit ;
27079: GO 27376
// end ; if not chassis in _chassis then
27081: LD_VAR 0 2
27085: PUSH
27086: LD_VAR 0 9
27090: IN
27091: NOT
27092: IFFALSE 27118
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27094: LD_ADDR_VAR 0 2
27098: PUSH
27099: LD_VAR 0 9
27103: PUSH
27104: LD_INT 1
27106: PPUSH
27107: LD_VAR 0 9
27111: PPUSH
27112: CALL_OW 12
27116: ARRAY
27117: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27118: LD_VAR 0 2
27122: PPUSH
27123: LD_VAR 0 3
27127: PPUSH
27128: CALL 27381 0 2
27132: NOT
27133: IFFALSE 27194
// repeat engine := _engine [ 1 ] ;
27135: LD_ADDR_VAR 0 3
27139: PUSH
27140: LD_VAR 0 11
27144: PUSH
27145: LD_INT 1
27147: ARRAY
27148: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27149: LD_ADDR_VAR 0 11
27153: PUSH
27154: LD_VAR 0 11
27158: PPUSH
27159: LD_INT 1
27161: PPUSH
27162: CALL_OW 3
27166: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27167: LD_VAR 0 2
27171: PPUSH
27172: LD_VAR 0 3
27176: PPUSH
27177: CALL 27381 0 2
27181: IFTRUE 27192
27183: PUSH
27184: LD_VAR 0 11
27188: PUSH
27189: EMPTY
27190: EQUAL
27191: OR
27192: IFFALSE 27135
// if not control in _control then
27194: LD_VAR 0 4
27198: PUSH
27199: LD_VAR 0 12
27203: IN
27204: NOT
27205: IFFALSE 27231
// control := _control [ rand ( 1 , _control ) ] ;
27207: LD_ADDR_VAR 0 4
27211: PUSH
27212: LD_VAR 0 12
27216: PUSH
27217: LD_INT 1
27219: PPUSH
27220: LD_VAR 0 12
27224: PPUSH
27225: CALL_OW 12
27229: ARRAY
27230: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27231: LD_VAR 0 2
27235: PPUSH
27236: LD_VAR 0 5
27240: PPUSH
27241: CALL 27603 0 2
27245: NOT
27246: IFFALSE 27307
// repeat weapon := _weapon [ 1 ] ;
27248: LD_ADDR_VAR 0 5
27252: PUSH
27253: LD_VAR 0 10
27257: PUSH
27258: LD_INT 1
27260: ARRAY
27261: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27262: LD_ADDR_VAR 0 10
27266: PUSH
27267: LD_VAR 0 10
27271: PPUSH
27272: LD_INT 1
27274: PPUSH
27275: CALL_OW 3
27279: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27280: LD_VAR 0 2
27284: PPUSH
27285: LD_VAR 0 5
27289: PPUSH
27290: CALL 27603 0 2
27294: IFTRUE 27305
27296: PUSH
27297: LD_VAR 0 10
27301: PUSH
27302: EMPTY
27303: EQUAL
27304: OR
27305: IFFALSE 27248
// result := [ ] ;
27307: LD_ADDR_VAR 0 6
27311: PUSH
27312: EMPTY
27313: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27314: LD_VAR 0 1
27318: PPUSH
27319: LD_VAR 0 2
27323: PPUSH
27324: LD_VAR 0 3
27328: PPUSH
27329: LD_VAR 0 4
27333: PPUSH
27334: LD_VAR 0 5
27338: PPUSH
27339: CALL_OW 448
27343: IFFALSE 27376
// result := [ chassis , engine , control , weapon ] ;
27345: LD_ADDR_VAR 0 6
27349: PUSH
27350: LD_VAR 0 2
27354: PUSH
27355: LD_VAR 0 3
27359: PUSH
27360: LD_VAR 0 4
27364: PUSH
27365: LD_VAR 0 5
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: ST_TO_ADDR
// end ;
27376: LD_VAR 0 6
27380: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27381: LD_INT 0
27383: PPUSH
// if not chassis or not engine then
27384: LD_VAR 0 1
27388: NOT
27389: IFTRUE 27398
27391: PUSH
27392: LD_VAR 0 2
27396: NOT
27397: OR
27398: IFFALSE 27402
// exit ;
27400: GO 27598
// case engine of engine_solar :
27402: LD_VAR 0 2
27406: PUSH
27407: LD_INT 2
27409: DOUBLE
27410: EQUAL
27411: IFTRUE 27415
27413: GO 27453
27415: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27416: LD_ADDR_VAR 0 3
27420: PUSH
27421: LD_INT 11
27423: PUSH
27424: LD_INT 12
27426: PUSH
27427: LD_INT 13
27429: PUSH
27430: LD_INT 14
27432: PUSH
27433: LD_INT 1
27435: PUSH
27436: LD_INT 2
27438: PUSH
27439: LD_INT 3
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: ST_TO_ADDR
27451: GO 27582
27453: LD_INT 1
27455: DOUBLE
27456: EQUAL
27457: IFTRUE 27461
27459: GO 27523
27461: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27462: LD_ADDR_VAR 0 3
27466: PUSH
27467: LD_INT 11
27469: PUSH
27470: LD_INT 12
27472: PUSH
27473: LD_INT 13
27475: PUSH
27476: LD_INT 14
27478: PUSH
27479: LD_INT 1
27481: PUSH
27482: LD_INT 2
27484: PUSH
27485: LD_INT 3
27487: PUSH
27488: LD_INT 4
27490: PUSH
27491: LD_INT 5
27493: PUSH
27494: LD_INT 21
27496: PUSH
27497: LD_INT 23
27499: PUSH
27500: LD_INT 22
27502: PUSH
27503: LD_INT 24
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: ST_TO_ADDR
27521: GO 27582
27523: LD_INT 3
27525: DOUBLE
27526: EQUAL
27527: IFTRUE 27531
27529: GO 27581
27531: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27532: LD_ADDR_VAR 0 3
27536: PUSH
27537: LD_INT 13
27539: PUSH
27540: LD_INT 14
27542: PUSH
27543: LD_INT 2
27545: PUSH
27546: LD_INT 3
27548: PUSH
27549: LD_INT 4
27551: PUSH
27552: LD_INT 5
27554: PUSH
27555: LD_INT 21
27557: PUSH
27558: LD_INT 22
27560: PUSH
27561: LD_INT 23
27563: PUSH
27564: LD_INT 24
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: ST_TO_ADDR
27579: GO 27582
27581: POP
// result := ( chassis in result ) ;
27582: LD_ADDR_VAR 0 3
27586: PUSH
27587: LD_VAR 0 1
27591: PUSH
27592: LD_VAR 0 3
27596: IN
27597: ST_TO_ADDR
// end ;
27598: LD_VAR 0 3
27602: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27603: LD_INT 0
27605: PPUSH
// if not chassis or not weapon then
27606: LD_VAR 0 1
27610: NOT
27611: IFTRUE 27620
27613: PUSH
27614: LD_VAR 0 2
27618: NOT
27619: OR
27620: IFFALSE 27624
// exit ;
27622: GO 28718
// case weapon of us_machine_gun :
27624: LD_VAR 0 2
27628: PUSH
27629: LD_INT 2
27631: DOUBLE
27632: EQUAL
27633: IFTRUE 27637
27635: GO 27667
27637: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27638: LD_ADDR_VAR 0 3
27642: PUSH
27643: LD_INT 1
27645: PUSH
27646: LD_INT 2
27648: PUSH
27649: LD_INT 3
27651: PUSH
27652: LD_INT 4
27654: PUSH
27655: LD_INT 5
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: ST_TO_ADDR
27665: GO 28702
27667: LD_INT 3
27669: DOUBLE
27670: EQUAL
27671: IFTRUE 27675
27673: GO 27705
27675: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27676: LD_ADDR_VAR 0 3
27680: PUSH
27681: LD_INT 1
27683: PUSH
27684: LD_INT 2
27686: PUSH
27687: LD_INT 3
27689: PUSH
27690: LD_INT 4
27692: PUSH
27693: LD_INT 5
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: ST_TO_ADDR
27703: GO 28702
27705: LD_INT 11
27707: DOUBLE
27708: EQUAL
27709: IFTRUE 27713
27711: GO 27743
27713: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27714: LD_ADDR_VAR 0 3
27718: PUSH
27719: LD_INT 1
27721: PUSH
27722: LD_INT 2
27724: PUSH
27725: LD_INT 3
27727: PUSH
27728: LD_INT 4
27730: PUSH
27731: LD_INT 5
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: ST_TO_ADDR
27741: GO 28702
27743: LD_INT 4
27745: DOUBLE
27746: EQUAL
27747: IFTRUE 27751
27749: GO 27777
27751: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27752: LD_ADDR_VAR 0 3
27756: PUSH
27757: LD_INT 2
27759: PUSH
27760: LD_INT 3
27762: PUSH
27763: LD_INT 4
27765: PUSH
27766: LD_INT 5
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: ST_TO_ADDR
27775: GO 28702
27777: LD_INT 5
27779: DOUBLE
27780: EQUAL
27781: IFTRUE 27785
27783: GO 27811
27785: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27786: LD_ADDR_VAR 0 3
27790: PUSH
27791: LD_INT 2
27793: PUSH
27794: LD_INT 3
27796: PUSH
27797: LD_INT 4
27799: PUSH
27800: LD_INT 5
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: ST_TO_ADDR
27809: GO 28702
27811: LD_INT 9
27813: DOUBLE
27814: EQUAL
27815: IFTRUE 27819
27817: GO 27845
27819: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27820: LD_ADDR_VAR 0 3
27824: PUSH
27825: LD_INT 2
27827: PUSH
27828: LD_INT 3
27830: PUSH
27831: LD_INT 4
27833: PUSH
27834: LD_INT 5
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: LIST
27841: LIST
27842: ST_TO_ADDR
27843: GO 28702
27845: LD_INT 7
27847: DOUBLE
27848: EQUAL
27849: IFTRUE 27853
27851: GO 27879
27853: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27854: LD_ADDR_VAR 0 3
27858: PUSH
27859: LD_INT 2
27861: PUSH
27862: LD_INT 3
27864: PUSH
27865: LD_INT 4
27867: PUSH
27868: LD_INT 5
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: ST_TO_ADDR
27877: GO 28702
27879: LD_INT 12
27881: DOUBLE
27882: EQUAL
27883: IFTRUE 27887
27885: GO 27913
27887: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27888: LD_ADDR_VAR 0 3
27892: PUSH
27893: LD_INT 2
27895: PUSH
27896: LD_INT 3
27898: PUSH
27899: LD_INT 4
27901: PUSH
27902: LD_INT 5
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: ST_TO_ADDR
27911: GO 28702
27913: LD_INT 13
27915: DOUBLE
27916: EQUAL
27917: IFTRUE 27921
27919: GO 27947
27921: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27922: LD_ADDR_VAR 0 3
27926: PUSH
27927: LD_INT 2
27929: PUSH
27930: LD_INT 3
27932: PUSH
27933: LD_INT 4
27935: PUSH
27936: LD_INT 5
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: ST_TO_ADDR
27945: GO 28702
27947: LD_INT 14
27949: DOUBLE
27950: EQUAL
27951: IFTRUE 27955
27953: GO 27973
27955: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27956: LD_ADDR_VAR 0 3
27960: PUSH
27961: LD_INT 4
27963: PUSH
27964: LD_INT 5
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: ST_TO_ADDR
27971: GO 28702
27973: LD_INT 6
27975: DOUBLE
27976: EQUAL
27977: IFTRUE 27981
27979: GO 27999
27981: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27982: LD_ADDR_VAR 0 3
27986: PUSH
27987: LD_INT 4
27989: PUSH
27990: LD_INT 5
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: ST_TO_ADDR
27997: GO 28702
27999: LD_INT 10
28001: DOUBLE
28002: EQUAL
28003: IFTRUE 28007
28005: GO 28025
28007: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28008: LD_ADDR_VAR 0 3
28012: PUSH
28013: LD_INT 4
28015: PUSH
28016: LD_INT 5
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: ST_TO_ADDR
28023: GO 28702
28025: LD_INT 22
28027: DOUBLE
28028: EQUAL
28029: IFTRUE 28033
28031: GO 28059
28033: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28034: LD_ADDR_VAR 0 3
28038: PUSH
28039: LD_INT 11
28041: PUSH
28042: LD_INT 12
28044: PUSH
28045: LD_INT 13
28047: PUSH
28048: LD_INT 14
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: ST_TO_ADDR
28057: GO 28702
28059: LD_INT 23
28061: DOUBLE
28062: EQUAL
28063: IFTRUE 28067
28065: GO 28093
28067: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28068: LD_ADDR_VAR 0 3
28072: PUSH
28073: LD_INT 11
28075: PUSH
28076: LD_INT 12
28078: PUSH
28079: LD_INT 13
28081: PUSH
28082: LD_INT 14
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: ST_TO_ADDR
28091: GO 28702
28093: LD_INT 24
28095: DOUBLE
28096: EQUAL
28097: IFTRUE 28101
28099: GO 28127
28101: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28102: LD_ADDR_VAR 0 3
28106: PUSH
28107: LD_INT 11
28109: PUSH
28110: LD_INT 12
28112: PUSH
28113: LD_INT 13
28115: PUSH
28116: LD_INT 14
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: ST_TO_ADDR
28125: GO 28702
28127: LD_INT 30
28129: DOUBLE
28130: EQUAL
28131: IFTRUE 28135
28133: GO 28161
28135: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28136: LD_ADDR_VAR 0 3
28140: PUSH
28141: LD_INT 11
28143: PUSH
28144: LD_INT 12
28146: PUSH
28147: LD_INT 13
28149: PUSH
28150: LD_INT 14
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: LIST
28157: LIST
28158: ST_TO_ADDR
28159: GO 28702
28161: LD_INT 25
28163: DOUBLE
28164: EQUAL
28165: IFTRUE 28169
28167: GO 28187
28169: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28170: LD_ADDR_VAR 0 3
28174: PUSH
28175: LD_INT 13
28177: PUSH
28178: LD_INT 14
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: ST_TO_ADDR
28185: GO 28702
28187: LD_INT 27
28189: DOUBLE
28190: EQUAL
28191: IFTRUE 28195
28193: GO 28213
28195: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28196: LD_ADDR_VAR 0 3
28200: PUSH
28201: LD_INT 13
28203: PUSH
28204: LD_INT 14
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: ST_TO_ADDR
28211: GO 28702
28213: LD_INT 92
28215: DOUBLE
28216: EQUAL
28217: IFTRUE 28221
28219: GO 28247
28221: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28222: LD_ADDR_VAR 0 3
28226: PUSH
28227: LD_INT 11
28229: PUSH
28230: LD_INT 12
28232: PUSH
28233: LD_INT 13
28235: PUSH
28236: LD_INT 14
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: LIST
28243: LIST
28244: ST_TO_ADDR
28245: GO 28702
28247: LD_INT 28
28249: DOUBLE
28250: EQUAL
28251: IFTRUE 28255
28253: GO 28273
28255: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28256: LD_ADDR_VAR 0 3
28260: PUSH
28261: LD_INT 13
28263: PUSH
28264: LD_INT 14
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: ST_TO_ADDR
28271: GO 28702
28273: LD_INT 29
28275: DOUBLE
28276: EQUAL
28277: IFTRUE 28281
28279: GO 28299
28281: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28282: LD_ADDR_VAR 0 3
28286: PUSH
28287: LD_INT 13
28289: PUSH
28290: LD_INT 14
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: ST_TO_ADDR
28297: GO 28702
28299: LD_INT 31
28301: DOUBLE
28302: EQUAL
28303: IFTRUE 28307
28305: GO 28325
28307: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28308: LD_ADDR_VAR 0 3
28312: PUSH
28313: LD_INT 13
28315: PUSH
28316: LD_INT 14
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: ST_TO_ADDR
28323: GO 28702
28325: LD_INT 26
28327: DOUBLE
28328: EQUAL
28329: IFTRUE 28333
28331: GO 28351
28333: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28334: LD_ADDR_VAR 0 3
28338: PUSH
28339: LD_INT 13
28341: PUSH
28342: LD_INT 14
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: ST_TO_ADDR
28349: GO 28702
28351: LD_INT 42
28353: DOUBLE
28354: EQUAL
28355: IFTRUE 28359
28357: GO 28385
28359: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28360: LD_ADDR_VAR 0 3
28364: PUSH
28365: LD_INT 21
28367: PUSH
28368: LD_INT 22
28370: PUSH
28371: LD_INT 23
28373: PUSH
28374: LD_INT 24
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: ST_TO_ADDR
28383: GO 28702
28385: LD_INT 43
28387: DOUBLE
28388: EQUAL
28389: IFTRUE 28393
28391: GO 28419
28393: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28394: LD_ADDR_VAR 0 3
28398: PUSH
28399: LD_INT 21
28401: PUSH
28402: LD_INT 22
28404: PUSH
28405: LD_INT 23
28407: PUSH
28408: LD_INT 24
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: LIST
28415: LIST
28416: ST_TO_ADDR
28417: GO 28702
28419: LD_INT 44
28421: DOUBLE
28422: EQUAL
28423: IFTRUE 28427
28425: GO 28453
28427: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28428: LD_ADDR_VAR 0 3
28432: PUSH
28433: LD_INT 21
28435: PUSH
28436: LD_INT 22
28438: PUSH
28439: LD_INT 23
28441: PUSH
28442: LD_INT 24
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: LIST
28449: LIST
28450: ST_TO_ADDR
28451: GO 28702
28453: LD_INT 45
28455: DOUBLE
28456: EQUAL
28457: IFTRUE 28461
28459: GO 28487
28461: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28462: LD_ADDR_VAR 0 3
28466: PUSH
28467: LD_INT 21
28469: PUSH
28470: LD_INT 22
28472: PUSH
28473: LD_INT 23
28475: PUSH
28476: LD_INT 24
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: LIST
28483: LIST
28484: ST_TO_ADDR
28485: GO 28702
28487: LD_INT 49
28489: DOUBLE
28490: EQUAL
28491: IFTRUE 28495
28493: GO 28521
28495: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28496: LD_ADDR_VAR 0 3
28500: PUSH
28501: LD_INT 21
28503: PUSH
28504: LD_INT 22
28506: PUSH
28507: LD_INT 23
28509: PUSH
28510: LD_INT 24
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: ST_TO_ADDR
28519: GO 28702
28521: LD_INT 51
28523: DOUBLE
28524: EQUAL
28525: IFTRUE 28529
28527: GO 28555
28529: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28530: LD_ADDR_VAR 0 3
28534: PUSH
28535: LD_INT 21
28537: PUSH
28538: LD_INT 22
28540: PUSH
28541: LD_INT 23
28543: PUSH
28544: LD_INT 24
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: LIST
28551: LIST
28552: ST_TO_ADDR
28553: GO 28702
28555: LD_INT 52
28557: DOUBLE
28558: EQUAL
28559: IFTRUE 28563
28561: GO 28589
28563: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28564: LD_ADDR_VAR 0 3
28568: PUSH
28569: LD_INT 21
28571: PUSH
28572: LD_INT 22
28574: PUSH
28575: LD_INT 23
28577: PUSH
28578: LD_INT 24
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: ST_TO_ADDR
28587: GO 28702
28589: LD_INT 53
28591: DOUBLE
28592: EQUAL
28593: IFTRUE 28597
28595: GO 28615
28597: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28598: LD_ADDR_VAR 0 3
28602: PUSH
28603: LD_INT 23
28605: PUSH
28606: LD_INT 24
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: ST_TO_ADDR
28613: GO 28702
28615: LD_INT 46
28617: DOUBLE
28618: EQUAL
28619: IFTRUE 28623
28621: GO 28641
28623: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28624: LD_ADDR_VAR 0 3
28628: PUSH
28629: LD_INT 23
28631: PUSH
28632: LD_INT 24
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: ST_TO_ADDR
28639: GO 28702
28641: LD_INT 47
28643: DOUBLE
28644: EQUAL
28645: IFTRUE 28649
28647: GO 28667
28649: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
28650: LD_ADDR_VAR 0 3
28654: PUSH
28655: LD_INT 23
28657: PUSH
28658: LD_INT 24
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: ST_TO_ADDR
28665: GO 28702
28667: LD_INT 98
28669: DOUBLE
28670: EQUAL
28671: IFTRUE 28675
28673: GO 28701
28675: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28676: LD_ADDR_VAR 0 3
28680: PUSH
28681: LD_INT 21
28683: PUSH
28684: LD_INT 22
28686: PUSH
28687: LD_INT 23
28689: PUSH
28690: LD_INT 24
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: LIST
28697: LIST
28698: ST_TO_ADDR
28699: GO 28702
28701: POP
// result := ( chassis in result ) ;
28702: LD_ADDR_VAR 0 3
28706: PUSH
28707: LD_VAR 0 1
28711: PUSH
28712: LD_VAR 0 3
28716: IN
28717: ST_TO_ADDR
// end ;
28718: LD_VAR 0 3
28722: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28723: LD_INT 0
28725: PPUSH
28726: PPUSH
28727: PPUSH
28728: PPUSH
28729: PPUSH
28730: PPUSH
28731: PPUSH
// result := array ;
28732: LD_ADDR_VAR 0 5
28736: PUSH
28737: LD_VAR 0 1
28741: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28742: LD_VAR 0 1
28746: NOT
28747: IFTRUE 28756
28749: PUSH
28750: LD_VAR 0 2
28754: NOT
28755: OR
28756: IFTRUE 28765
28758: PUSH
28759: LD_VAR 0 3
28763: NOT
28764: OR
28765: IFTRUE 28779
28767: PUSH
28768: LD_VAR 0 2
28772: PUSH
28773: LD_VAR 0 1
28777: GREATER
28778: OR
28779: IFTRUE 28793
28781: PUSH
28782: LD_VAR 0 3
28786: PUSH
28787: LD_VAR 0 1
28791: GREATER
28792: OR
28793: IFFALSE 28797
// exit ;
28795: GO 29093
// if direction then
28797: LD_VAR 0 4
28801: IFFALSE 28865
// begin d := 1 ;
28803: LD_ADDR_VAR 0 9
28807: PUSH
28808: LD_INT 1
28810: ST_TO_ADDR
// if i_from > i_to then
28811: LD_VAR 0 2
28815: PUSH
28816: LD_VAR 0 3
28820: GREATER
28821: IFFALSE 28847
// length := ( array - i_from ) + i_to else
28823: LD_ADDR_VAR 0 11
28827: PUSH
28828: LD_VAR 0 1
28832: PUSH
28833: LD_VAR 0 2
28837: MINUS
28838: PUSH
28839: LD_VAR 0 3
28843: PLUS
28844: ST_TO_ADDR
28845: GO 28863
// length := i_to - i_from ;
28847: LD_ADDR_VAR 0 11
28851: PUSH
28852: LD_VAR 0 3
28856: PUSH
28857: LD_VAR 0 2
28861: MINUS
28862: ST_TO_ADDR
// end else
28863: GO 28926
// begin d := - 1 ;
28865: LD_ADDR_VAR 0 9
28869: PUSH
28870: LD_INT 1
28872: NEG
28873: ST_TO_ADDR
// if i_from > i_to then
28874: LD_VAR 0 2
28878: PUSH
28879: LD_VAR 0 3
28883: GREATER
28884: IFFALSE 28904
// length := i_from - i_to else
28886: LD_ADDR_VAR 0 11
28890: PUSH
28891: LD_VAR 0 2
28895: PUSH
28896: LD_VAR 0 3
28900: MINUS
28901: ST_TO_ADDR
28902: GO 28926
// length := ( array - i_to ) + i_from ;
28904: LD_ADDR_VAR 0 11
28908: PUSH
28909: LD_VAR 0 1
28913: PUSH
28914: LD_VAR 0 3
28918: MINUS
28919: PUSH
28920: LD_VAR 0 2
28924: PLUS
28925: ST_TO_ADDR
// end ; if not length then
28926: LD_VAR 0 11
28930: NOT
28931: IFFALSE 28935
// exit ;
28933: GO 29093
// tmp := array ;
28935: LD_ADDR_VAR 0 10
28939: PUSH
28940: LD_VAR 0 1
28944: ST_TO_ADDR
// for i = 1 to length do
28945: LD_ADDR_VAR 0 6
28949: PUSH
28950: DOUBLE
28951: LD_INT 1
28953: DEC
28954: ST_TO_ADDR
28955: LD_VAR 0 11
28959: PUSH
28960: FOR_TO
28961: IFFALSE 29081
// begin for j = 1 to array do
28963: LD_ADDR_VAR 0 7
28967: PUSH
28968: DOUBLE
28969: LD_INT 1
28971: DEC
28972: ST_TO_ADDR
28973: LD_VAR 0 1
28977: PUSH
28978: FOR_TO
28979: IFFALSE 29067
// begin k := j + d ;
28981: LD_ADDR_VAR 0 8
28985: PUSH
28986: LD_VAR 0 7
28990: PUSH
28991: LD_VAR 0 9
28995: PLUS
28996: ST_TO_ADDR
// if k > array then
28997: LD_VAR 0 8
29001: PUSH
29002: LD_VAR 0 1
29006: GREATER
29007: IFFALSE 29017
// k := 1 ;
29009: LD_ADDR_VAR 0 8
29013: PUSH
29014: LD_INT 1
29016: ST_TO_ADDR
// if not k then
29017: LD_VAR 0 8
29021: NOT
29022: IFFALSE 29034
// k := array ;
29024: LD_ADDR_VAR 0 8
29028: PUSH
29029: LD_VAR 0 1
29033: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29034: LD_ADDR_VAR 0 10
29038: PUSH
29039: LD_VAR 0 10
29043: PPUSH
29044: LD_VAR 0 8
29048: PPUSH
29049: LD_VAR 0 1
29053: PUSH
29054: LD_VAR 0 7
29058: ARRAY
29059: PPUSH
29060: CALL_OW 1
29064: ST_TO_ADDR
// end ;
29065: GO 28978
29067: POP
29068: POP
// array := tmp ;
29069: LD_ADDR_VAR 0 1
29073: PUSH
29074: LD_VAR 0 10
29078: ST_TO_ADDR
// end ;
29079: GO 28960
29081: POP
29082: POP
// result := array ;
29083: LD_ADDR_VAR 0 5
29087: PUSH
29088: LD_VAR 0 1
29092: ST_TO_ADDR
// end ;
29093: LD_VAR 0 5
29097: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29098: LD_INT 0
29100: PPUSH
29101: PPUSH
// result := 0 ;
29102: LD_ADDR_VAR 0 3
29106: PUSH
29107: LD_INT 0
29109: ST_TO_ADDR
// if not array or not value in array then
29110: LD_VAR 0 1
29114: NOT
29115: IFTRUE 29130
29117: PUSH
29118: LD_VAR 0 2
29122: PUSH
29123: LD_VAR 0 1
29127: IN
29128: NOT
29129: OR
29130: IFFALSE 29134
// exit ;
29132: GO 29188
// for i = 1 to array do
29134: LD_ADDR_VAR 0 4
29138: PUSH
29139: DOUBLE
29140: LD_INT 1
29142: DEC
29143: ST_TO_ADDR
29144: LD_VAR 0 1
29148: PUSH
29149: FOR_TO
29150: IFFALSE 29186
// if value = array [ i ] then
29152: LD_VAR 0 2
29156: PUSH
29157: LD_VAR 0 1
29161: PUSH
29162: LD_VAR 0 4
29166: ARRAY
29167: EQUAL
29168: IFFALSE 29184
// begin result := i ;
29170: LD_ADDR_VAR 0 3
29174: PUSH
29175: LD_VAR 0 4
29179: ST_TO_ADDR
// exit ;
29180: POP
29181: POP
29182: GO 29188
// end ;
29184: GO 29149
29186: POP
29187: POP
// end ;
29188: LD_VAR 0 3
29192: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29193: LD_INT 0
29195: PPUSH
// vc_chassis := chassis ;
29196: LD_ADDR_OWVAR 37
29200: PUSH
29201: LD_VAR 0 1
29205: ST_TO_ADDR
// vc_engine := engine ;
29206: LD_ADDR_OWVAR 39
29210: PUSH
29211: LD_VAR 0 2
29215: ST_TO_ADDR
// vc_control := control ;
29216: LD_ADDR_OWVAR 38
29220: PUSH
29221: LD_VAR 0 3
29225: ST_TO_ADDR
// vc_weapon := weapon ;
29226: LD_ADDR_OWVAR 40
29230: PUSH
29231: LD_VAR 0 4
29235: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29236: LD_ADDR_OWVAR 41
29240: PUSH
29241: LD_VAR 0 5
29245: ST_TO_ADDR
// end ;
29246: LD_VAR 0 6
29250: RET
// export function WantPlant ( unit ) ; var task ; begin
29251: LD_INT 0
29253: PPUSH
29254: PPUSH
// result := false ;
29255: LD_ADDR_VAR 0 2
29259: PUSH
29260: LD_INT 0
29262: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29263: LD_ADDR_VAR 0 3
29267: PUSH
29268: LD_VAR 0 1
29272: PPUSH
29273: CALL_OW 437
29277: ST_TO_ADDR
// if task then
29278: LD_VAR 0 3
29282: IFFALSE 29310
// if task [ 1 ] [ 1 ] = p then
29284: LD_VAR 0 3
29288: PUSH
29289: LD_INT 1
29291: ARRAY
29292: PUSH
29293: LD_INT 1
29295: ARRAY
29296: PUSH
29297: LD_STRING p
29299: EQUAL
29300: IFFALSE 29310
// result := true ;
29302: LD_ADDR_VAR 0 2
29306: PUSH
29307: LD_INT 1
29309: ST_TO_ADDR
// end ;
29310: LD_VAR 0 2
29314: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29315: LD_INT 0
29317: PPUSH
29318: PPUSH
29319: PPUSH
29320: PPUSH
// if pos < 1 then
29321: LD_VAR 0 2
29325: PUSH
29326: LD_INT 1
29328: LESS
29329: IFFALSE 29333
// exit ;
29331: GO 29636
// if pos = 1 then
29333: LD_VAR 0 2
29337: PUSH
29338: LD_INT 1
29340: EQUAL
29341: IFFALSE 29374
// result := Replace ( arr , pos [ 1 ] , value ) else
29343: LD_ADDR_VAR 0 4
29347: PUSH
29348: LD_VAR 0 1
29352: PPUSH
29353: LD_VAR 0 2
29357: PUSH
29358: LD_INT 1
29360: ARRAY
29361: PPUSH
29362: LD_VAR 0 3
29366: PPUSH
29367: CALL_OW 1
29371: ST_TO_ADDR
29372: GO 29636
// begin tmp := arr ;
29374: LD_ADDR_VAR 0 6
29378: PUSH
29379: LD_VAR 0 1
29383: ST_TO_ADDR
// s_arr := [ tmp ] ;
29384: LD_ADDR_VAR 0 7
29388: PUSH
29389: LD_VAR 0 6
29393: PUSH
29394: EMPTY
29395: LIST
29396: ST_TO_ADDR
// for i = 1 to pos - 1 do
29397: LD_ADDR_VAR 0 5
29401: PUSH
29402: DOUBLE
29403: LD_INT 1
29405: DEC
29406: ST_TO_ADDR
29407: LD_VAR 0 2
29411: PUSH
29412: LD_INT 1
29414: MINUS
29415: PUSH
29416: FOR_TO
29417: IFFALSE 29462
// begin tmp := tmp [ pos [ i ] ] ;
29419: LD_ADDR_VAR 0 6
29423: PUSH
29424: LD_VAR 0 6
29428: PUSH
29429: LD_VAR 0 2
29433: PUSH
29434: LD_VAR 0 5
29438: ARRAY
29439: ARRAY
29440: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29441: LD_ADDR_VAR 0 7
29445: PUSH
29446: LD_VAR 0 7
29450: PUSH
29451: LD_VAR 0 6
29455: PUSH
29456: EMPTY
29457: LIST
29458: ADD
29459: ST_TO_ADDR
// end ;
29460: GO 29416
29462: POP
29463: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29464: LD_ADDR_VAR 0 6
29468: PUSH
29469: LD_VAR 0 6
29473: PPUSH
29474: LD_VAR 0 2
29478: PUSH
29479: LD_VAR 0 2
29483: ARRAY
29484: PPUSH
29485: LD_VAR 0 3
29489: PPUSH
29490: CALL_OW 1
29494: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29495: LD_ADDR_VAR 0 7
29499: PUSH
29500: LD_VAR 0 7
29504: PPUSH
29505: LD_VAR 0 7
29509: PPUSH
29510: LD_VAR 0 6
29514: PPUSH
29515: CALL_OW 1
29519: ST_TO_ADDR
// for i = s_arr downto 2 do
29520: LD_ADDR_VAR 0 5
29524: PUSH
29525: DOUBLE
29526: LD_VAR 0 7
29530: INC
29531: ST_TO_ADDR
29532: LD_INT 2
29534: PUSH
29535: FOR_DOWNTO
29536: IFFALSE 29620
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29538: LD_ADDR_VAR 0 6
29542: PUSH
29543: LD_VAR 0 7
29547: PUSH
29548: LD_VAR 0 5
29552: PUSH
29553: LD_INT 1
29555: MINUS
29556: ARRAY
29557: PPUSH
29558: LD_VAR 0 2
29562: PUSH
29563: LD_VAR 0 5
29567: PUSH
29568: LD_INT 1
29570: MINUS
29571: ARRAY
29572: PPUSH
29573: LD_VAR 0 7
29577: PUSH
29578: LD_VAR 0 5
29582: ARRAY
29583: PPUSH
29584: CALL_OW 1
29588: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29589: LD_ADDR_VAR 0 7
29593: PUSH
29594: LD_VAR 0 7
29598: PPUSH
29599: LD_VAR 0 5
29603: PUSH
29604: LD_INT 1
29606: MINUS
29607: PPUSH
29608: LD_VAR 0 6
29612: PPUSH
29613: CALL_OW 1
29617: ST_TO_ADDR
// end ;
29618: GO 29535
29620: POP
29621: POP
// result := s_arr [ 1 ] ;
29622: LD_ADDR_VAR 0 4
29626: PUSH
29627: LD_VAR 0 7
29631: PUSH
29632: LD_INT 1
29634: ARRAY
29635: ST_TO_ADDR
// end ; end ;
29636: LD_VAR 0 4
29640: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29641: LD_INT 0
29643: PPUSH
29644: PPUSH
// if not list then
29645: LD_VAR 0 1
29649: NOT
29650: IFFALSE 29654
// exit ;
29652: GO 29745
// i := list [ pos1 ] ;
29654: LD_ADDR_VAR 0 5
29658: PUSH
29659: LD_VAR 0 1
29663: PUSH
29664: LD_VAR 0 2
29668: ARRAY
29669: ST_TO_ADDR
// if not i then
29670: LD_VAR 0 5
29674: NOT
29675: IFFALSE 29679
// exit ;
29677: GO 29745
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29679: LD_ADDR_VAR 0 1
29683: PUSH
29684: LD_VAR 0 1
29688: PPUSH
29689: LD_VAR 0 2
29693: PPUSH
29694: LD_VAR 0 1
29698: PUSH
29699: LD_VAR 0 3
29703: ARRAY
29704: PPUSH
29705: CALL_OW 1
29709: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29710: LD_ADDR_VAR 0 1
29714: PUSH
29715: LD_VAR 0 1
29719: PPUSH
29720: LD_VAR 0 3
29724: PPUSH
29725: LD_VAR 0 5
29729: PPUSH
29730: CALL_OW 1
29734: ST_TO_ADDR
// result := list ;
29735: LD_ADDR_VAR 0 4
29739: PUSH
29740: LD_VAR 0 1
29744: ST_TO_ADDR
// end ;
29745: LD_VAR 0 4
29749: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29750: LD_INT 0
29752: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29753: LD_ADDR_VAR 0 5
29757: PUSH
29758: LD_VAR 0 1
29762: PPUSH
29763: CALL_OW 250
29767: PPUSH
29768: LD_VAR 0 1
29772: PPUSH
29773: CALL_OW 251
29777: PPUSH
29778: LD_VAR 0 2
29782: PPUSH
29783: LD_VAR 0 3
29787: PPUSH
29788: LD_VAR 0 4
29792: PPUSH
29793: CALL 30175 0 5
29797: ST_TO_ADDR
// end ;
29798: LD_VAR 0 5
29802: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
29803: LD_INT 0
29805: PPUSH
29806: PPUSH
29807: PPUSH
29808: PPUSH
// if not list or not unit then
29809: LD_VAR 0 2
29813: NOT
29814: IFTRUE 29823
29816: PUSH
29817: LD_VAR 0 1
29821: NOT
29822: OR
29823: IFFALSE 29827
// exit ;
29825: GO 30170
// result := [ ] ;
29827: LD_ADDR_VAR 0 5
29831: PUSH
29832: EMPTY
29833: ST_TO_ADDR
// for i in list do
29834: LD_ADDR_VAR 0 6
29838: PUSH
29839: LD_VAR 0 2
29843: PUSH
29844: FOR_IN
29845: IFFALSE 30063
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
29847: LD_ADDR_VAR 0 8
29851: PUSH
29852: LD_VAR 0 1
29856: PPUSH
29857: LD_VAR 0 6
29861: PUSH
29862: LD_INT 1
29864: ARRAY
29865: PPUSH
29866: LD_VAR 0 6
29870: PUSH
29871: LD_INT 2
29873: ARRAY
29874: PPUSH
29875: CALL_OW 297
29879: ST_TO_ADDR
// if not Count ( result ) then
29880: LD_VAR 0 5
29884: PPUSH
29885: CALL 26397 0 1
29889: NOT
29890: IFFALSE 29923
// begin result := Join ( result , [ i , tmp ] ) ;
29892: LD_ADDR_VAR 0 5
29896: PUSH
29897: LD_VAR 0 5
29901: PPUSH
29902: LD_VAR 0 6
29906: PUSH
29907: LD_VAR 0 8
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PPUSH
29916: CALL 62373 0 2
29920: ST_TO_ADDR
// continue ;
29921: GO 29844
// end ; if result [ result ] [ 2 ] <= tmp then
29923: LD_VAR 0 5
29927: PUSH
29928: LD_VAR 0 5
29932: ARRAY
29933: PUSH
29934: LD_INT 2
29936: ARRAY
29937: PUSH
29938: LD_VAR 0 8
29942: LESSEQUAL
29943: IFFALSE 29976
// result := Join ( result , [ i , tmp ] ) else
29945: LD_ADDR_VAR 0 5
29949: PUSH
29950: LD_VAR 0 5
29954: PPUSH
29955: LD_VAR 0 6
29959: PUSH
29960: LD_VAR 0 8
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PPUSH
29969: CALL 62373 0 2
29973: ST_TO_ADDR
29974: GO 30061
// begin for j := 1 to Count ( result ) do
29976: LD_ADDR_VAR 0 7
29980: PUSH
29981: DOUBLE
29982: LD_INT 1
29984: DEC
29985: ST_TO_ADDR
29986: LD_VAR 0 5
29990: PPUSH
29991: CALL 26397 0 1
29995: PUSH
29996: FOR_TO
29997: IFFALSE 30059
// begin if tmp < result [ j ] [ 2 ] then
29999: LD_VAR 0 8
30003: PUSH
30004: LD_VAR 0 5
30008: PUSH
30009: LD_VAR 0 7
30013: ARRAY
30014: PUSH
30015: LD_INT 2
30017: ARRAY
30018: LESS
30019: IFFALSE 30057
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30021: LD_ADDR_VAR 0 5
30025: PUSH
30026: LD_VAR 0 5
30030: PPUSH
30031: LD_VAR 0 7
30035: PPUSH
30036: LD_VAR 0 6
30040: PUSH
30041: LD_VAR 0 8
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PPUSH
30050: CALL_OW 2
30054: ST_TO_ADDR
// break ;
30055: GO 30059
// end ; end ;
30057: GO 29996
30059: POP
30060: POP
// end ; end ;
30061: GO 29844
30063: POP
30064: POP
// if result and not asc then
30065: LD_VAR 0 5
30069: IFFALSE 30078
30071: PUSH
30072: LD_VAR 0 3
30076: NOT
30077: AND
30078: IFFALSE 30095
// result := ReverseArray ( result ) ;
30080: LD_ADDR_VAR 0 5
30084: PUSH
30085: LD_VAR 0 5
30089: PPUSH
30090: CALL 57453 0 1
30094: ST_TO_ADDR
// tmp := [ ] ;
30095: LD_ADDR_VAR 0 8
30099: PUSH
30100: EMPTY
30101: ST_TO_ADDR
// if mode then
30102: LD_VAR 0 4
30106: IFFALSE 30170
// begin for i := 1 to result do
30108: LD_ADDR_VAR 0 6
30112: PUSH
30113: DOUBLE
30114: LD_INT 1
30116: DEC
30117: ST_TO_ADDR
30118: LD_VAR 0 5
30122: PUSH
30123: FOR_TO
30124: IFFALSE 30158
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
30126: LD_ADDR_VAR 0 8
30130: PUSH
30131: LD_VAR 0 8
30135: PPUSH
30136: LD_VAR 0 5
30140: PUSH
30141: LD_VAR 0 6
30145: ARRAY
30146: PUSH
30147: LD_INT 1
30149: ARRAY
30150: PPUSH
30151: CALL 62373 0 2
30155: ST_TO_ADDR
30156: GO 30123
30158: POP
30159: POP
// result := tmp ;
30160: LD_ADDR_VAR 0 5
30164: PUSH
30165: LD_VAR 0 8
30169: ST_TO_ADDR
// end ; end ;
30170: LD_VAR 0 5
30174: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30175: LD_INT 0
30177: PPUSH
30178: PPUSH
30179: PPUSH
30180: PPUSH
// if not list then
30181: LD_VAR 0 3
30185: NOT
30186: IFFALSE 30190
// exit ;
30188: GO 30580
// result := [ ] ;
30190: LD_ADDR_VAR 0 6
30194: PUSH
30195: EMPTY
30196: ST_TO_ADDR
// for i in list do
30197: LD_ADDR_VAR 0 7
30201: PUSH
30202: LD_VAR 0 3
30206: PUSH
30207: FOR_IN
30208: IFFALSE 30410
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30210: LD_ADDR_VAR 0 9
30214: PUSH
30215: LD_VAR 0 7
30219: PPUSH
30220: LD_VAR 0 1
30224: PPUSH
30225: LD_VAR 0 2
30229: PPUSH
30230: CALL_OW 297
30234: ST_TO_ADDR
// if not result then
30235: LD_VAR 0 6
30239: NOT
30240: IFFALSE 30266
// result := [ [ i , tmp ] ] else
30242: LD_ADDR_VAR 0 6
30246: PUSH
30247: LD_VAR 0 7
30251: PUSH
30252: LD_VAR 0 9
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: EMPTY
30262: LIST
30263: ST_TO_ADDR
30264: GO 30408
// begin if result [ result ] [ 2 ] <= tmp then
30266: LD_VAR 0 6
30270: PUSH
30271: LD_VAR 0 6
30275: ARRAY
30276: PUSH
30277: LD_INT 2
30279: ARRAY
30280: PUSH
30281: LD_VAR 0 9
30285: LESSEQUAL
30286: IFFALSE 30328
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30288: LD_ADDR_VAR 0 6
30292: PUSH
30293: LD_VAR 0 6
30297: PPUSH
30298: LD_VAR 0 6
30302: PUSH
30303: LD_INT 1
30305: PLUS
30306: PPUSH
30307: LD_VAR 0 7
30311: PUSH
30312: LD_VAR 0 9
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PPUSH
30321: CALL_OW 2
30325: ST_TO_ADDR
30326: GO 30408
// for j := 1 to result do
30328: LD_ADDR_VAR 0 8
30332: PUSH
30333: DOUBLE
30334: LD_INT 1
30336: DEC
30337: ST_TO_ADDR
30338: LD_VAR 0 6
30342: PUSH
30343: FOR_TO
30344: IFFALSE 30406
// begin if tmp < result [ j ] [ 2 ] then
30346: LD_VAR 0 9
30350: PUSH
30351: LD_VAR 0 6
30355: PUSH
30356: LD_VAR 0 8
30360: ARRAY
30361: PUSH
30362: LD_INT 2
30364: ARRAY
30365: LESS
30366: IFFALSE 30404
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30368: LD_ADDR_VAR 0 6
30372: PUSH
30373: LD_VAR 0 6
30377: PPUSH
30378: LD_VAR 0 8
30382: PPUSH
30383: LD_VAR 0 7
30387: PUSH
30388: LD_VAR 0 9
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PPUSH
30397: CALL_OW 2
30401: ST_TO_ADDR
// break ;
30402: GO 30406
// end ; end ;
30404: GO 30343
30406: POP
30407: POP
// end ; end ;
30408: GO 30207
30410: POP
30411: POP
// if result and not asc then
30412: LD_VAR 0 6
30416: IFFALSE 30425
30418: PUSH
30419: LD_VAR 0 4
30423: NOT
30424: AND
30425: IFFALSE 30500
// begin tmp := result ;
30427: LD_ADDR_VAR 0 9
30431: PUSH
30432: LD_VAR 0 6
30436: ST_TO_ADDR
// for i = tmp downto 1 do
30437: LD_ADDR_VAR 0 7
30441: PUSH
30442: DOUBLE
30443: LD_VAR 0 9
30447: INC
30448: ST_TO_ADDR
30449: LD_INT 1
30451: PUSH
30452: FOR_DOWNTO
30453: IFFALSE 30498
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30455: LD_ADDR_VAR 0 6
30459: PUSH
30460: LD_VAR 0 6
30464: PPUSH
30465: LD_VAR 0 9
30469: PUSH
30470: LD_VAR 0 7
30474: MINUS
30475: PUSH
30476: LD_INT 1
30478: PLUS
30479: PPUSH
30480: LD_VAR 0 9
30484: PUSH
30485: LD_VAR 0 7
30489: ARRAY
30490: PPUSH
30491: CALL_OW 1
30495: ST_TO_ADDR
30496: GO 30452
30498: POP
30499: POP
// end ; tmp := [ ] ;
30500: LD_ADDR_VAR 0 9
30504: PUSH
30505: EMPTY
30506: ST_TO_ADDR
// if mode then
30507: LD_VAR 0 5
30511: IFFALSE 30580
// begin for i = 1 to result do
30513: LD_ADDR_VAR 0 7
30517: PUSH
30518: DOUBLE
30519: LD_INT 1
30521: DEC
30522: ST_TO_ADDR
30523: LD_VAR 0 6
30527: PUSH
30528: FOR_TO
30529: IFFALSE 30568
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30531: LD_ADDR_VAR 0 9
30535: PUSH
30536: LD_VAR 0 9
30540: PPUSH
30541: LD_VAR 0 7
30545: PPUSH
30546: LD_VAR 0 6
30550: PUSH
30551: LD_VAR 0 7
30555: ARRAY
30556: PUSH
30557: LD_INT 1
30559: ARRAY
30560: PPUSH
30561: CALL_OW 1
30565: ST_TO_ADDR
30566: GO 30528
30568: POP
30569: POP
// result := tmp ;
30570: LD_ADDR_VAR 0 6
30574: PUSH
30575: LD_VAR 0 9
30579: ST_TO_ADDR
// end ; end ;
30580: LD_VAR 0 6
30584: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30585: LD_INT 0
30587: PPUSH
30588: PPUSH
30589: PPUSH
30590: PPUSH
30591: PPUSH
30592: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30593: LD_ADDR_VAR 0 5
30597: PUSH
30598: LD_INT 0
30600: PUSH
30601: LD_INT 0
30603: PUSH
30604: LD_INT 0
30606: PUSH
30607: EMPTY
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: ST_TO_ADDR
// if not x or not y then
30615: LD_VAR 0 2
30619: NOT
30620: IFTRUE 30629
30622: PUSH
30623: LD_VAR 0 3
30627: NOT
30628: OR
30629: IFFALSE 30633
// exit ;
30631: GO 32289
// if not range then
30633: LD_VAR 0 4
30637: NOT
30638: IFFALSE 30648
// range := 10 ;
30640: LD_ADDR_VAR 0 4
30644: PUSH
30645: LD_INT 10
30647: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30648: LD_ADDR_VAR 0 8
30652: PUSH
30653: LD_INT 81
30655: PUSH
30656: LD_VAR 0 1
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 92
30667: PUSH
30668: LD_VAR 0 2
30672: PUSH
30673: LD_VAR 0 3
30677: PUSH
30678: LD_VAR 0 4
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: PUSH
30689: LD_INT 3
30691: PUSH
30692: LD_INT 21
30694: PUSH
30695: LD_INT 3
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: LIST
30710: PPUSH
30711: CALL_OW 69
30715: ST_TO_ADDR
// if not tmp then
30716: LD_VAR 0 8
30720: NOT
30721: IFFALSE 30725
// exit ;
30723: GO 32289
// for i in tmp do
30725: LD_ADDR_VAR 0 6
30729: PUSH
30730: LD_VAR 0 8
30734: PUSH
30735: FOR_IN
30736: IFFALSE 32264
// begin points := [ 0 , 0 , 0 ] ;
30738: LD_ADDR_VAR 0 9
30742: PUSH
30743: LD_INT 0
30745: PUSH
30746: LD_INT 0
30748: PUSH
30749: LD_INT 0
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: LIST
30756: ST_TO_ADDR
// bpoints := 1 ;
30757: LD_ADDR_VAR 0 10
30761: PUSH
30762: LD_INT 1
30764: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30765: LD_VAR 0 6
30769: PPUSH
30770: CALL_OW 247
30774: PUSH
30775: LD_INT 1
30777: DOUBLE
30778: EQUAL
30779: IFTRUE 30783
30781: GO 31365
30783: POP
// begin if GetClass ( i ) = 1 then
30784: LD_VAR 0 6
30788: PPUSH
30789: CALL_OW 257
30793: PUSH
30794: LD_INT 1
30796: EQUAL
30797: IFFALSE 30818
// points := [ 10 , 5 , 3 ] ;
30799: LD_ADDR_VAR 0 9
30803: PUSH
30804: LD_INT 10
30806: PUSH
30807: LD_INT 5
30809: PUSH
30810: LD_INT 3
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: LIST
30817: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30818: LD_VAR 0 6
30822: PPUSH
30823: CALL_OW 257
30827: PUSH
30828: LD_INT 2
30830: PUSH
30831: LD_INT 3
30833: PUSH
30834: LD_INT 4
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: LIST
30841: IN
30842: IFFALSE 30863
// points := [ 3 , 2 , 1 ] ;
30844: LD_ADDR_VAR 0 9
30848: PUSH
30849: LD_INT 3
30851: PUSH
30852: LD_INT 2
30854: PUSH
30855: LD_INT 1
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: LIST
30862: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30863: LD_VAR 0 6
30867: PPUSH
30868: CALL_OW 257
30872: PUSH
30873: LD_INT 5
30875: EQUAL
30876: IFFALSE 30897
// points := [ 130 , 5 , 2 ] ;
30878: LD_ADDR_VAR 0 9
30882: PUSH
30883: LD_INT 130
30885: PUSH
30886: LD_INT 5
30888: PUSH
30889: LD_INT 2
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: LIST
30896: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30897: LD_VAR 0 6
30901: PPUSH
30902: CALL_OW 257
30906: PUSH
30907: LD_INT 8
30909: EQUAL
30910: IFFALSE 30931
// points := [ 35 , 35 , 30 ] ;
30912: LD_ADDR_VAR 0 9
30916: PUSH
30917: LD_INT 35
30919: PUSH
30920: LD_INT 35
30922: PUSH
30923: LD_INT 30
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: LIST
30930: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30931: LD_VAR 0 6
30935: PPUSH
30936: CALL_OW 257
30940: PUSH
30941: LD_INT 9
30943: EQUAL
30944: IFFALSE 30965
// points := [ 20 , 55 , 40 ] ;
30946: LD_ADDR_VAR 0 9
30950: PUSH
30951: LD_INT 20
30953: PUSH
30954: LD_INT 55
30956: PUSH
30957: LD_INT 40
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: LIST
30964: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30965: LD_VAR 0 6
30969: PPUSH
30970: CALL_OW 257
30974: PUSH
30975: LD_INT 12
30977: PUSH
30978: LD_INT 16
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: IN
30985: IFFALSE 31006
// points := [ 5 , 3 , 2 ] ;
30987: LD_ADDR_VAR 0 9
30991: PUSH
30992: LD_INT 5
30994: PUSH
30995: LD_INT 3
30997: PUSH
30998: LD_INT 2
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: LIST
31005: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31006: LD_VAR 0 6
31010: PPUSH
31011: CALL_OW 257
31015: PUSH
31016: LD_INT 17
31018: EQUAL
31019: IFFALSE 31040
// points := [ 100 , 50 , 75 ] ;
31021: LD_ADDR_VAR 0 9
31025: PUSH
31026: LD_INT 100
31028: PUSH
31029: LD_INT 50
31031: PUSH
31032: LD_INT 75
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: LIST
31039: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31040: LD_VAR 0 6
31044: PPUSH
31045: CALL_OW 257
31049: PUSH
31050: LD_INT 15
31052: EQUAL
31053: IFFALSE 31074
// points := [ 10 , 5 , 3 ] ;
31055: LD_ADDR_VAR 0 9
31059: PUSH
31060: LD_INT 10
31062: PUSH
31063: LD_INT 5
31065: PUSH
31066: LD_INT 3
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: LIST
31073: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31074: LD_VAR 0 6
31078: PPUSH
31079: CALL_OW 257
31083: PUSH
31084: LD_INT 14
31086: EQUAL
31087: IFFALSE 31108
// points := [ 10 , 0 , 0 ] ;
31089: LD_ADDR_VAR 0 9
31093: PUSH
31094: LD_INT 10
31096: PUSH
31097: LD_INT 0
31099: PUSH
31100: LD_INT 0
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: LIST
31107: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31108: LD_VAR 0 6
31112: PPUSH
31113: CALL_OW 257
31117: PUSH
31118: LD_INT 11
31120: EQUAL
31121: IFFALSE 31142
// points := [ 30 , 10 , 5 ] ;
31123: LD_ADDR_VAR 0 9
31127: PUSH
31128: LD_INT 30
31130: PUSH
31131: LD_INT 10
31133: PUSH
31134: LD_INT 5
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: LIST
31141: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31142: LD_VAR 0 1
31146: PPUSH
31147: LD_INT 5
31149: PPUSH
31150: CALL_OW 321
31154: PUSH
31155: LD_INT 2
31157: EQUAL
31158: IFFALSE 31175
// bpoints := bpoints * 1.8 ;
31160: LD_ADDR_VAR 0 10
31164: PUSH
31165: LD_VAR 0 10
31169: PUSH
31170: LD_REAL  1.80000000000000E+0000
31173: MUL
31174: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31175: LD_VAR 0 6
31179: PPUSH
31180: CALL_OW 257
31184: PUSH
31185: LD_INT 1
31187: PUSH
31188: LD_INT 2
31190: PUSH
31191: LD_INT 3
31193: PUSH
31194: LD_INT 4
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: IN
31203: IFFALSE 31223
31205: PUSH
31206: LD_VAR 0 1
31210: PPUSH
31211: LD_INT 51
31213: PPUSH
31214: CALL_OW 321
31218: PUSH
31219: LD_INT 2
31221: EQUAL
31222: AND
31223: IFFALSE 31240
// bpoints := bpoints * 1.2 ;
31225: LD_ADDR_VAR 0 10
31229: PUSH
31230: LD_VAR 0 10
31234: PUSH
31235: LD_REAL  1.20000000000000E+0000
31238: MUL
31239: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31240: LD_VAR 0 6
31244: PPUSH
31245: CALL_OW 257
31249: PUSH
31250: LD_INT 5
31252: PUSH
31253: LD_INT 7
31255: PUSH
31256: LD_INT 9
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: LIST
31263: IN
31264: IFFALSE 31284
31266: PUSH
31267: LD_VAR 0 1
31271: PPUSH
31272: LD_INT 52
31274: PPUSH
31275: CALL_OW 321
31279: PUSH
31280: LD_INT 2
31282: EQUAL
31283: AND
31284: IFFALSE 31301
// bpoints := bpoints * 1.5 ;
31286: LD_ADDR_VAR 0 10
31290: PUSH
31291: LD_VAR 0 10
31295: PUSH
31296: LD_REAL  1.50000000000000E+0000
31299: MUL
31300: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31301: LD_VAR 0 1
31305: PPUSH
31306: LD_INT 66
31308: PPUSH
31309: CALL_OW 321
31313: PUSH
31314: LD_INT 2
31316: EQUAL
31317: IFFALSE 31334
// bpoints := bpoints * 1.1 ;
31319: LD_ADDR_VAR 0 10
31323: PUSH
31324: LD_VAR 0 10
31328: PUSH
31329: LD_REAL  1.10000000000000E+0000
31332: MUL
31333: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31334: LD_ADDR_VAR 0 10
31338: PUSH
31339: LD_VAR 0 10
31343: PUSH
31344: LD_VAR 0 6
31348: PPUSH
31349: LD_INT 1
31351: PPUSH
31352: CALL_OW 259
31356: PUSH
31357: LD_REAL  1.15000000000000E+0000
31360: MUL
31361: MUL
31362: ST_TO_ADDR
// end ; unit_vehicle :
31363: GO 32193
31365: LD_INT 2
31367: DOUBLE
31368: EQUAL
31369: IFTRUE 31373
31371: GO 32181
31373: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31374: LD_VAR 0 6
31378: PPUSH
31379: CALL_OW 264
31383: PUSH
31384: LD_INT 2
31386: PUSH
31387: LD_INT 42
31389: PUSH
31390: LD_INT 24
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: LIST
31397: IN
31398: IFFALSE 31419
// points := [ 25 , 5 , 3 ] ;
31400: LD_ADDR_VAR 0 9
31404: PUSH
31405: LD_INT 25
31407: PUSH
31408: LD_INT 5
31410: PUSH
31411: LD_INT 3
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: LIST
31418: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31419: LD_VAR 0 6
31423: PPUSH
31424: CALL_OW 264
31428: PUSH
31429: LD_INT 4
31431: PUSH
31432: LD_INT 43
31434: PUSH
31435: LD_INT 25
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: LIST
31442: IN
31443: IFFALSE 31464
// points := [ 40 , 15 , 5 ] ;
31445: LD_ADDR_VAR 0 9
31449: PUSH
31450: LD_INT 40
31452: PUSH
31453: LD_INT 15
31455: PUSH
31456: LD_INT 5
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: LIST
31463: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31464: LD_VAR 0 6
31468: PPUSH
31469: CALL_OW 264
31473: PUSH
31474: LD_INT 3
31476: PUSH
31477: LD_INT 23
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: IN
31484: IFFALSE 31505
// points := [ 7 , 25 , 8 ] ;
31486: LD_ADDR_VAR 0 9
31490: PUSH
31491: LD_INT 7
31493: PUSH
31494: LD_INT 25
31496: PUSH
31497: LD_INT 8
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: LIST
31504: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31505: LD_VAR 0 6
31509: PPUSH
31510: CALL_OW 264
31514: PUSH
31515: LD_INT 5
31517: PUSH
31518: LD_INT 27
31520: PUSH
31521: LD_INT 44
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: LIST
31528: IN
31529: IFFALSE 31550
// points := [ 14 , 50 , 16 ] ;
31531: LD_ADDR_VAR 0 9
31535: PUSH
31536: LD_INT 14
31538: PUSH
31539: LD_INT 50
31541: PUSH
31542: LD_INT 16
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: LIST
31549: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31550: LD_VAR 0 6
31554: PPUSH
31555: CALL_OW 264
31559: PUSH
31560: LD_INT 6
31562: PUSH
31563: LD_INT 46
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: IN
31570: IFFALSE 31591
// points := [ 32 , 120 , 70 ] ;
31572: LD_ADDR_VAR 0 9
31576: PUSH
31577: LD_INT 32
31579: PUSH
31580: LD_INT 120
31582: PUSH
31583: LD_INT 70
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: LIST
31590: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31591: LD_VAR 0 6
31595: PPUSH
31596: CALL_OW 264
31600: PUSH
31601: LD_INT 7
31603: PUSH
31604: LD_INT 28
31606: PUSH
31607: LD_INT 45
31609: PUSH
31610: LD_INT 92
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: IN
31619: IFFALSE 31640
// points := [ 35 , 20 , 45 ] ;
31621: LD_ADDR_VAR 0 9
31625: PUSH
31626: LD_INT 35
31628: PUSH
31629: LD_INT 20
31631: PUSH
31632: LD_INT 45
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: LIST
31639: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31640: LD_VAR 0 6
31644: PPUSH
31645: CALL_OW 264
31649: PUSH
31650: LD_INT 47
31652: PUSH
31653: EMPTY
31654: LIST
31655: IN
31656: IFFALSE 31677
// points := [ 67 , 45 , 75 ] ;
31658: LD_ADDR_VAR 0 9
31662: PUSH
31663: LD_INT 67
31665: PUSH
31666: LD_INT 45
31668: PUSH
31669: LD_INT 75
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: LIST
31676: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31677: LD_VAR 0 6
31681: PPUSH
31682: CALL_OW 264
31686: PUSH
31687: LD_INT 26
31689: PUSH
31690: EMPTY
31691: LIST
31692: IN
31693: IFFALSE 31714
// points := [ 120 , 30 , 80 ] ;
31695: LD_ADDR_VAR 0 9
31699: PUSH
31700: LD_INT 120
31702: PUSH
31703: LD_INT 30
31705: PUSH
31706: LD_INT 80
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: LIST
31713: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31714: LD_VAR 0 6
31718: PPUSH
31719: CALL_OW 264
31723: PUSH
31724: LD_INT 22
31726: PUSH
31727: EMPTY
31728: LIST
31729: IN
31730: IFFALSE 31751
// points := [ 40 , 1 , 1 ] ;
31732: LD_ADDR_VAR 0 9
31736: PUSH
31737: LD_INT 40
31739: PUSH
31740: LD_INT 1
31742: PUSH
31743: LD_INT 1
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: LIST
31750: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31751: LD_VAR 0 6
31755: PPUSH
31756: CALL_OW 264
31760: PUSH
31761: LD_INT 29
31763: PUSH
31764: EMPTY
31765: LIST
31766: IN
31767: IFFALSE 31788
// points := [ 70 , 200 , 400 ] ;
31769: LD_ADDR_VAR 0 9
31773: PUSH
31774: LD_INT 70
31776: PUSH
31777: LD_INT 200
31779: PUSH
31780: LD_INT 400
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: LIST
31787: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31788: LD_VAR 0 6
31792: PPUSH
31793: CALL_OW 264
31797: PUSH
31798: LD_INT 14
31800: PUSH
31801: LD_INT 53
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: IN
31808: IFFALSE 31829
// points := [ 40 , 10 , 20 ] ;
31810: LD_ADDR_VAR 0 9
31814: PUSH
31815: LD_INT 40
31817: PUSH
31818: LD_INT 10
31820: PUSH
31821: LD_INT 20
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: LIST
31828: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31829: LD_VAR 0 6
31833: PPUSH
31834: CALL_OW 264
31838: PUSH
31839: LD_INT 9
31841: PUSH
31842: EMPTY
31843: LIST
31844: IN
31845: IFFALSE 31866
// points := [ 5 , 70 , 20 ] ;
31847: LD_ADDR_VAR 0 9
31851: PUSH
31852: LD_INT 5
31854: PUSH
31855: LD_INT 70
31857: PUSH
31858: LD_INT 20
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: LIST
31865: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31866: LD_VAR 0 6
31870: PPUSH
31871: CALL_OW 264
31875: PUSH
31876: LD_INT 10
31878: PUSH
31879: EMPTY
31880: LIST
31881: IN
31882: IFFALSE 31903
// points := [ 35 , 110 , 70 ] ;
31884: LD_ADDR_VAR 0 9
31888: PUSH
31889: LD_INT 35
31891: PUSH
31892: LD_INT 110
31894: PUSH
31895: LD_INT 70
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: LIST
31902: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31903: LD_VAR 0 6
31907: PPUSH
31908: CALL_OW 265
31912: PUSH
31913: LD_INT 25
31915: EQUAL
31916: IFFALSE 31937
// points := [ 80 , 65 , 100 ] ;
31918: LD_ADDR_VAR 0 9
31922: PUSH
31923: LD_INT 80
31925: PUSH
31926: LD_INT 65
31928: PUSH
31929: LD_INT 100
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: LIST
31936: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31937: LD_VAR 0 6
31941: PPUSH
31942: CALL_OW 263
31946: PUSH
31947: LD_INT 1
31949: EQUAL
31950: IFFALSE 31985
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31952: LD_ADDR_VAR 0 10
31956: PUSH
31957: LD_VAR 0 10
31961: PUSH
31962: LD_VAR 0 6
31966: PPUSH
31967: CALL_OW 311
31971: PPUSH
31972: LD_INT 3
31974: PPUSH
31975: CALL_OW 259
31979: PUSH
31980: LD_INT 4
31982: MUL
31983: MUL
31984: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31985: LD_VAR 0 6
31989: PPUSH
31990: CALL_OW 263
31994: PUSH
31995: LD_INT 2
31997: EQUAL
31998: IFFALSE 32049
// begin j := IsControledBy ( i ) ;
32000: LD_ADDR_VAR 0 7
32004: PUSH
32005: LD_VAR 0 6
32009: PPUSH
32010: CALL_OW 312
32014: ST_TO_ADDR
// if j then
32015: LD_VAR 0 7
32019: IFFALSE 32049
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32021: LD_ADDR_VAR 0 10
32025: PUSH
32026: LD_VAR 0 10
32030: PUSH
32031: LD_VAR 0 7
32035: PPUSH
32036: LD_INT 3
32038: PPUSH
32039: CALL_OW 259
32043: PUSH
32044: LD_INT 3
32046: MUL
32047: MUL
32048: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32049: LD_VAR 0 6
32053: PPUSH
32054: CALL_OW 264
32058: PUSH
32059: LD_INT 5
32061: PUSH
32062: LD_INT 6
32064: PUSH
32065: LD_INT 46
32067: PUSH
32068: LD_INT 44
32070: PUSH
32071: LD_INT 47
32073: PUSH
32074: LD_INT 45
32076: PUSH
32077: LD_INT 28
32079: PUSH
32080: LD_INT 7
32082: PUSH
32083: LD_INT 27
32085: PUSH
32086: LD_INT 29
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: IN
32101: IFFALSE 32121
32103: PUSH
32104: LD_VAR 0 1
32108: PPUSH
32109: LD_INT 52
32111: PPUSH
32112: CALL_OW 321
32116: PUSH
32117: LD_INT 2
32119: EQUAL
32120: AND
32121: IFFALSE 32138
// bpoints := bpoints * 1.2 ;
32123: LD_ADDR_VAR 0 10
32127: PUSH
32128: LD_VAR 0 10
32132: PUSH
32133: LD_REAL  1.20000000000000E+0000
32136: MUL
32137: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32138: LD_VAR 0 6
32142: PPUSH
32143: CALL_OW 264
32147: PUSH
32148: LD_INT 6
32150: PUSH
32151: LD_INT 46
32153: PUSH
32154: LD_INT 47
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: LIST
32161: IN
32162: IFFALSE 32179
// bpoints := bpoints * 1.2 ;
32164: LD_ADDR_VAR 0 10
32168: PUSH
32169: LD_VAR 0 10
32173: PUSH
32174: LD_REAL  1.20000000000000E+0000
32177: MUL
32178: ST_TO_ADDR
// end ; unit_building :
32179: GO 32193
32181: LD_INT 3
32183: DOUBLE
32184: EQUAL
32185: IFTRUE 32189
32187: GO 32192
32189: POP
// ; end ;
32190: GO 32193
32192: POP
// for j = 1 to 3 do
32193: LD_ADDR_VAR 0 7
32197: PUSH
32198: DOUBLE
32199: LD_INT 1
32201: DEC
32202: ST_TO_ADDR
32203: LD_INT 3
32205: PUSH
32206: FOR_TO
32207: IFFALSE 32260
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32209: LD_ADDR_VAR 0 5
32213: PUSH
32214: LD_VAR 0 5
32218: PPUSH
32219: LD_VAR 0 7
32223: PPUSH
32224: LD_VAR 0 5
32228: PUSH
32229: LD_VAR 0 7
32233: ARRAY
32234: PUSH
32235: LD_VAR 0 9
32239: PUSH
32240: LD_VAR 0 7
32244: ARRAY
32245: PUSH
32246: LD_VAR 0 10
32250: MUL
32251: PLUS
32252: PPUSH
32253: CALL_OW 1
32257: ST_TO_ADDR
32258: GO 32206
32260: POP
32261: POP
// end ;
32262: GO 30735
32264: POP
32265: POP
// result := Replace ( result , 4 , tmp ) ;
32266: LD_ADDR_VAR 0 5
32270: PUSH
32271: LD_VAR 0 5
32275: PPUSH
32276: LD_INT 4
32278: PPUSH
32279: LD_VAR 0 8
32283: PPUSH
32284: CALL_OW 1
32288: ST_TO_ADDR
// end ;
32289: LD_VAR 0 5
32293: RET
// export function DangerAtRange ( unit , range ) ; begin
32294: LD_INT 0
32296: PPUSH
// if not unit then
32297: LD_VAR 0 1
32301: NOT
32302: IFFALSE 32306
// exit ;
32304: GO 32351
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32306: LD_ADDR_VAR 0 3
32310: PUSH
32311: LD_VAR 0 1
32315: PPUSH
32316: CALL_OW 255
32320: PPUSH
32321: LD_VAR 0 1
32325: PPUSH
32326: CALL_OW 250
32330: PPUSH
32331: LD_VAR 0 1
32335: PPUSH
32336: CALL_OW 251
32340: PPUSH
32341: LD_VAR 0 2
32345: PPUSH
32346: CALL 30585 0 4
32350: ST_TO_ADDR
// end ;
32351: LD_VAR 0 3
32355: RET
// export function DangerInArea ( side , area ) ; begin
32356: LD_INT 0
32358: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32359: LD_ADDR_VAR 0 3
32363: PUSH
32364: LD_VAR 0 2
32368: PPUSH
32369: LD_INT 81
32371: PUSH
32372: LD_VAR 0 1
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PPUSH
32381: CALL_OW 70
32385: ST_TO_ADDR
// end ;
32386: LD_VAR 0 3
32390: RET
// export function IsExtension ( b ) ; begin
32391: LD_INT 0
32393: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32394: LD_ADDR_VAR 0 2
32398: PUSH
32399: LD_VAR 0 1
32403: PUSH
32404: LD_INT 23
32406: PUSH
32407: LD_INT 20
32409: PUSH
32410: LD_INT 22
32412: PUSH
32413: LD_INT 17
32415: PUSH
32416: LD_INT 24
32418: PUSH
32419: LD_INT 21
32421: PUSH
32422: LD_INT 19
32424: PUSH
32425: LD_INT 16
32427: PUSH
32428: LD_INT 25
32430: PUSH
32431: LD_INT 18
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: IN
32446: ST_TO_ADDR
// end ;
32447: LD_VAR 0 2
32451: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32452: LD_INT 0
32454: PPUSH
32455: PPUSH
32456: PPUSH
// result := [ ] ;
32457: LD_ADDR_VAR 0 4
32461: PUSH
32462: EMPTY
32463: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32464: LD_ADDR_VAR 0 5
32468: PUSH
32469: LD_VAR 0 2
32473: PPUSH
32474: LD_INT 21
32476: PUSH
32477: LD_INT 3
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: PPUSH
32484: CALL_OW 70
32488: ST_TO_ADDR
// if not tmp then
32489: LD_VAR 0 5
32493: NOT
32494: IFFALSE 32498
// exit ;
32496: GO 32562
// if checkLink then
32498: LD_VAR 0 3
32502: IFFALSE 32552
// begin for i in tmp do
32504: LD_ADDR_VAR 0 6
32508: PUSH
32509: LD_VAR 0 5
32513: PUSH
32514: FOR_IN
32515: IFFALSE 32550
// if GetBase ( i ) <> base then
32517: LD_VAR 0 6
32521: PPUSH
32522: CALL_OW 274
32526: PUSH
32527: LD_VAR 0 1
32531: NONEQUAL
32532: IFFALSE 32548
// ComLinkToBase ( base , i ) ;
32534: LD_VAR 0 1
32538: PPUSH
32539: LD_VAR 0 6
32543: PPUSH
32544: CALL_OW 169
32548: GO 32514
32550: POP
32551: POP
// end ; result := tmp ;
32552: LD_ADDR_VAR 0 4
32556: PUSH
32557: LD_VAR 0 5
32561: ST_TO_ADDR
// end ;
32562: LD_VAR 0 4
32566: RET
// export function ComComplete ( units , b ) ; var i ; begin
32567: LD_INT 0
32569: PPUSH
32570: PPUSH
// if not units then
32571: LD_VAR 0 1
32575: NOT
32576: IFFALSE 32580
// exit ;
32578: GO 32670
// for i in units do
32580: LD_ADDR_VAR 0 4
32584: PUSH
32585: LD_VAR 0 1
32589: PUSH
32590: FOR_IN
32591: IFFALSE 32668
// if BuildingStatus ( b ) = bs_build then
32593: LD_VAR 0 2
32597: PPUSH
32598: CALL_OW 461
32602: PUSH
32603: LD_INT 1
32605: EQUAL
32606: IFFALSE 32666
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32608: LD_VAR 0 4
32612: PPUSH
32613: LD_STRING h
32615: PUSH
32616: LD_VAR 0 2
32620: PPUSH
32621: CALL_OW 250
32625: PUSH
32626: LD_VAR 0 2
32630: PPUSH
32631: CALL_OW 251
32635: PUSH
32636: LD_VAR 0 2
32640: PUSH
32641: LD_INT 0
32643: PUSH
32644: LD_INT 0
32646: PUSH
32647: LD_INT 0
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: PUSH
32659: EMPTY
32660: LIST
32661: PPUSH
32662: CALL_OW 446
32666: GO 32590
32668: POP
32669: POP
// end ;
32670: LD_VAR 0 3
32674: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32675: LD_INT 0
32677: PPUSH
32678: PPUSH
32679: PPUSH
32680: PPUSH
32681: PPUSH
32682: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32683: LD_VAR 0 1
32687: NOT
32688: IFTRUE 32705
32690: PUSH
32691: LD_VAR 0 1
32695: PPUSH
32696: CALL_OW 263
32700: PUSH
32701: LD_INT 2
32703: NONEQUAL
32704: OR
32705: IFFALSE 32709
// exit ;
32707: GO 33025
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32709: LD_ADDR_VAR 0 6
32713: PUSH
32714: LD_INT 22
32716: PUSH
32717: LD_VAR 0 1
32721: PPUSH
32722: CALL_OW 255
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: PUSH
32731: LD_INT 2
32733: PUSH
32734: LD_INT 30
32736: PUSH
32737: LD_INT 36
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: LD_INT 34
32746: PUSH
32747: LD_INT 31
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: LIST
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PPUSH
32763: CALL_OW 69
32767: ST_TO_ADDR
// if not tmp then
32768: LD_VAR 0 6
32772: NOT
32773: IFFALSE 32777
// exit ;
32775: GO 33025
// result := [ ] ;
32777: LD_ADDR_VAR 0 2
32781: PUSH
32782: EMPTY
32783: ST_TO_ADDR
// for i in tmp do
32784: LD_ADDR_VAR 0 3
32788: PUSH
32789: LD_VAR 0 6
32793: PUSH
32794: FOR_IN
32795: IFFALSE 32866
// begin t := UnitsInside ( i ) ;
32797: LD_ADDR_VAR 0 4
32801: PUSH
32802: LD_VAR 0 3
32806: PPUSH
32807: CALL_OW 313
32811: ST_TO_ADDR
// if t then
32812: LD_VAR 0 4
32816: IFFALSE 32864
// for j in t do
32818: LD_ADDR_VAR 0 7
32822: PUSH
32823: LD_VAR 0 4
32827: PUSH
32828: FOR_IN
32829: IFFALSE 32862
// result := Replace ( result , result + 1 , j ) ;
32831: LD_ADDR_VAR 0 2
32835: PUSH
32836: LD_VAR 0 2
32840: PPUSH
32841: LD_VAR 0 2
32845: PUSH
32846: LD_INT 1
32848: PLUS
32849: PPUSH
32850: LD_VAR 0 7
32854: PPUSH
32855: CALL_OW 1
32859: ST_TO_ADDR
32860: GO 32828
32862: POP
32863: POP
// end ;
32864: GO 32794
32866: POP
32867: POP
// if not result then
32868: LD_VAR 0 2
32872: NOT
32873: IFFALSE 32877
// exit ;
32875: GO 33025
// mech := result [ 1 ] ;
32877: LD_ADDR_VAR 0 5
32881: PUSH
32882: LD_VAR 0 2
32886: PUSH
32887: LD_INT 1
32889: ARRAY
32890: ST_TO_ADDR
// if result > 1 then
32891: LD_VAR 0 2
32895: PUSH
32896: LD_INT 1
32898: GREATER
32899: IFFALSE 33011
// begin for i = 2 to result do
32901: LD_ADDR_VAR 0 3
32905: PUSH
32906: DOUBLE
32907: LD_INT 2
32909: DEC
32910: ST_TO_ADDR
32911: LD_VAR 0 2
32915: PUSH
32916: FOR_TO
32917: IFFALSE 33009
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32919: LD_ADDR_VAR 0 4
32923: PUSH
32924: LD_VAR 0 2
32928: PUSH
32929: LD_VAR 0 3
32933: ARRAY
32934: PPUSH
32935: LD_INT 3
32937: PPUSH
32938: CALL_OW 259
32942: PUSH
32943: LD_VAR 0 2
32947: PUSH
32948: LD_VAR 0 3
32952: ARRAY
32953: PPUSH
32954: CALL_OW 432
32958: MINUS
32959: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32960: LD_VAR 0 4
32964: PUSH
32965: LD_VAR 0 5
32969: PPUSH
32970: LD_INT 3
32972: PPUSH
32973: CALL_OW 259
32977: PUSH
32978: LD_VAR 0 5
32982: PPUSH
32983: CALL_OW 432
32987: MINUS
32988: GREATEREQUAL
32989: IFFALSE 33007
// mech := result [ i ] ;
32991: LD_ADDR_VAR 0 5
32995: PUSH
32996: LD_VAR 0 2
33000: PUSH
33001: LD_VAR 0 3
33005: ARRAY
33006: ST_TO_ADDR
// end ;
33007: GO 32916
33009: POP
33010: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33011: LD_VAR 0 1
33015: PPUSH
33016: LD_VAR 0 5
33020: PPUSH
33021: CALL_OW 135
// end ;
33025: LD_VAR 0 2
33029: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33030: LD_INT 0
33032: PPUSH
33033: PPUSH
33034: PPUSH
33035: PPUSH
33036: PPUSH
33037: PPUSH
33038: PPUSH
33039: PPUSH
33040: PPUSH
33041: PPUSH
33042: PPUSH
33043: PPUSH
33044: PPUSH
// result := [ ] ;
33045: LD_ADDR_VAR 0 7
33049: PUSH
33050: EMPTY
33051: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33052: LD_VAR 0 1
33056: PPUSH
33057: CALL_OW 266
33061: PUSH
33062: LD_INT 0
33064: PUSH
33065: LD_INT 1
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: IN
33072: NOT
33073: IFFALSE 33077
// exit ;
33075: GO 34717
// if name then
33077: LD_VAR 0 3
33081: IFFALSE 33097
// SetBName ( base_dep , name ) ;
33083: LD_VAR 0 1
33087: PPUSH
33088: LD_VAR 0 3
33092: PPUSH
33093: CALL_OW 500
// base := GetBase ( base_dep ) ;
33097: LD_ADDR_VAR 0 15
33101: PUSH
33102: LD_VAR 0 1
33106: PPUSH
33107: CALL_OW 274
33111: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33112: LD_ADDR_VAR 0 16
33116: PUSH
33117: LD_VAR 0 1
33121: PPUSH
33122: CALL_OW 255
33126: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33127: LD_ADDR_VAR 0 17
33131: PUSH
33132: LD_VAR 0 1
33136: PPUSH
33137: CALL_OW 248
33141: ST_TO_ADDR
// if sources then
33142: LD_VAR 0 5
33146: IFFALSE 33193
// for i = 1 to 3 do
33148: LD_ADDR_VAR 0 8
33152: PUSH
33153: DOUBLE
33154: LD_INT 1
33156: DEC
33157: ST_TO_ADDR
33158: LD_INT 3
33160: PUSH
33161: FOR_TO
33162: IFFALSE 33191
// AddResourceType ( base , i , sources [ i ] ) ;
33164: LD_VAR 0 15
33168: PPUSH
33169: LD_VAR 0 8
33173: PPUSH
33174: LD_VAR 0 5
33178: PUSH
33179: LD_VAR 0 8
33183: ARRAY
33184: PPUSH
33185: CALL_OW 276
33189: GO 33161
33191: POP
33192: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33193: LD_ADDR_VAR 0 18
33197: PUSH
33198: LD_VAR 0 15
33202: PPUSH
33203: LD_VAR 0 2
33207: PPUSH
33208: LD_INT 1
33210: PPUSH
33211: CALL 32452 0 3
33215: ST_TO_ADDR
// InitHc ;
33216: CALL_OW 19
// InitUc ;
33220: CALL_OW 18
// uc_side := side ;
33224: LD_ADDR_OWVAR 20
33228: PUSH
33229: LD_VAR 0 16
33233: ST_TO_ADDR
// uc_nation := nation ;
33234: LD_ADDR_OWVAR 21
33238: PUSH
33239: LD_VAR 0 17
33243: ST_TO_ADDR
// if buildings then
33244: LD_VAR 0 18
33248: IFFALSE 34576
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33250: LD_ADDR_VAR 0 19
33254: PUSH
33255: LD_VAR 0 18
33259: PPUSH
33260: LD_INT 2
33262: PUSH
33263: LD_INT 30
33265: PUSH
33266: LD_INT 29
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: LD_INT 30
33275: PUSH
33276: LD_INT 30
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: LIST
33287: PPUSH
33288: CALL_OW 72
33292: ST_TO_ADDR
// if tmp then
33293: LD_VAR 0 19
33297: IFFALSE 33345
// for i in tmp do
33299: LD_ADDR_VAR 0 8
33303: PUSH
33304: LD_VAR 0 19
33308: PUSH
33309: FOR_IN
33310: IFFALSE 33343
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33312: LD_VAR 0 8
33316: PPUSH
33317: CALL_OW 250
33321: PPUSH
33322: LD_VAR 0 8
33326: PPUSH
33327: CALL_OW 251
33331: PPUSH
33332: LD_VAR 0 16
33336: PPUSH
33337: CALL_OW 441
33341: GO 33309
33343: POP
33344: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33345: LD_VAR 0 18
33349: PPUSH
33350: LD_INT 2
33352: PUSH
33353: LD_INT 30
33355: PUSH
33356: LD_INT 32
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 30
33365: PUSH
33366: LD_INT 33
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: LIST
33377: PPUSH
33378: CALL_OW 72
33382: IFFALSE 33470
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33384: LD_ADDR_VAR 0 8
33388: PUSH
33389: LD_VAR 0 18
33393: PPUSH
33394: LD_INT 2
33396: PUSH
33397: LD_INT 30
33399: PUSH
33400: LD_INT 32
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_INT 30
33409: PUSH
33410: LD_INT 33
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: LIST
33421: PPUSH
33422: CALL_OW 72
33426: PUSH
33427: FOR_IN
33428: IFFALSE 33468
// begin if not GetBWeapon ( i ) then
33430: LD_VAR 0 8
33434: PPUSH
33435: CALL_OW 269
33439: NOT
33440: IFFALSE 33466
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33442: LD_VAR 0 8
33446: PPUSH
33447: LD_VAR 0 8
33451: PPUSH
33452: LD_VAR 0 2
33456: PPUSH
33457: CALL 34722 0 2
33461: PPUSH
33462: CALL_OW 431
// end ;
33466: GO 33427
33468: POP
33469: POP
// end ; for i = 1 to personel do
33470: LD_ADDR_VAR 0 8
33474: PUSH
33475: DOUBLE
33476: LD_INT 1
33478: DEC
33479: ST_TO_ADDR
33480: LD_VAR 0 6
33484: PUSH
33485: FOR_TO
33486: IFFALSE 34556
// begin if i > 4 then
33488: LD_VAR 0 8
33492: PUSH
33493: LD_INT 4
33495: GREATER
33496: IFFALSE 33500
// break ;
33498: GO 34556
// case i of 1 :
33500: LD_VAR 0 8
33504: PUSH
33505: LD_INT 1
33507: DOUBLE
33508: EQUAL
33509: IFTRUE 33513
33511: GO 33593
33513: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33514: LD_ADDR_VAR 0 12
33518: PUSH
33519: LD_VAR 0 18
33523: PPUSH
33524: LD_INT 22
33526: PUSH
33527: LD_VAR 0 16
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 58
33538: PUSH
33539: EMPTY
33540: LIST
33541: PUSH
33542: LD_INT 2
33544: PUSH
33545: LD_INT 30
33547: PUSH
33548: LD_INT 32
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: LD_INT 30
33557: PUSH
33558: LD_INT 4
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 30
33567: PUSH
33568: LD_INT 5
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: LIST
33585: PPUSH
33586: CALL_OW 72
33590: ST_TO_ADDR
33591: GO 33815
33593: LD_INT 2
33595: DOUBLE
33596: EQUAL
33597: IFTRUE 33601
33599: GO 33663
33601: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33602: LD_ADDR_VAR 0 12
33606: PUSH
33607: LD_VAR 0 18
33611: PPUSH
33612: LD_INT 22
33614: PUSH
33615: LD_VAR 0 16
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 2
33626: PUSH
33627: LD_INT 30
33629: PUSH
33630: LD_INT 0
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 30
33639: PUSH
33640: LD_INT 1
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: LIST
33651: PUSH
33652: EMPTY
33653: LIST
33654: LIST
33655: PPUSH
33656: CALL_OW 72
33660: ST_TO_ADDR
33661: GO 33815
33663: LD_INT 3
33665: DOUBLE
33666: EQUAL
33667: IFTRUE 33671
33669: GO 33733
33671: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33672: LD_ADDR_VAR 0 12
33676: PUSH
33677: LD_VAR 0 18
33681: PPUSH
33682: LD_INT 22
33684: PUSH
33685: LD_VAR 0 16
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_INT 2
33696: PUSH
33697: LD_INT 30
33699: PUSH
33700: LD_INT 2
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 30
33709: PUSH
33710: LD_INT 3
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: LIST
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PPUSH
33726: CALL_OW 72
33730: ST_TO_ADDR
33731: GO 33815
33733: LD_INT 4
33735: DOUBLE
33736: EQUAL
33737: IFTRUE 33741
33739: GO 33814
33741: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33742: LD_ADDR_VAR 0 12
33746: PUSH
33747: LD_VAR 0 18
33751: PPUSH
33752: LD_INT 22
33754: PUSH
33755: LD_VAR 0 16
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: PUSH
33764: LD_INT 2
33766: PUSH
33767: LD_INT 30
33769: PUSH
33770: LD_INT 6
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: LD_INT 30
33779: PUSH
33780: LD_INT 7
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 30
33789: PUSH
33790: LD_INT 8
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PPUSH
33807: CALL_OW 72
33811: ST_TO_ADDR
33812: GO 33815
33814: POP
// if i = 1 then
33815: LD_VAR 0 8
33819: PUSH
33820: LD_INT 1
33822: EQUAL
33823: IFFALSE 33934
// begin tmp := [ ] ;
33825: LD_ADDR_VAR 0 19
33829: PUSH
33830: EMPTY
33831: ST_TO_ADDR
// for j in f do
33832: LD_ADDR_VAR 0 9
33836: PUSH
33837: LD_VAR 0 12
33841: PUSH
33842: FOR_IN
33843: IFFALSE 33916
// if GetBType ( j ) = b_bunker then
33845: LD_VAR 0 9
33849: PPUSH
33850: CALL_OW 266
33854: PUSH
33855: LD_INT 32
33857: EQUAL
33858: IFFALSE 33885
// tmp := Insert ( tmp , 1 , j ) else
33860: LD_ADDR_VAR 0 19
33864: PUSH
33865: LD_VAR 0 19
33869: PPUSH
33870: LD_INT 1
33872: PPUSH
33873: LD_VAR 0 9
33877: PPUSH
33878: CALL_OW 2
33882: ST_TO_ADDR
33883: GO 33914
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33885: LD_ADDR_VAR 0 19
33889: PUSH
33890: LD_VAR 0 19
33894: PPUSH
33895: LD_VAR 0 19
33899: PUSH
33900: LD_INT 1
33902: PLUS
33903: PPUSH
33904: LD_VAR 0 9
33908: PPUSH
33909: CALL_OW 2
33913: ST_TO_ADDR
33914: GO 33842
33916: POP
33917: POP
// if tmp then
33918: LD_VAR 0 19
33922: IFFALSE 33934
// f := tmp ;
33924: LD_ADDR_VAR 0 12
33928: PUSH
33929: LD_VAR 0 19
33933: ST_TO_ADDR
// end ; x := personel [ i ] ;
33934: LD_ADDR_VAR 0 13
33938: PUSH
33939: LD_VAR 0 6
33943: PUSH
33944: LD_VAR 0 8
33948: ARRAY
33949: ST_TO_ADDR
// if x = - 1 then
33950: LD_VAR 0 13
33954: PUSH
33955: LD_INT 1
33957: NEG
33958: EQUAL
33959: IFFALSE 34170
// begin for j in f do
33961: LD_ADDR_VAR 0 9
33965: PUSH
33966: LD_VAR 0 12
33970: PUSH
33971: FOR_IN
33972: IFFALSE 34166
// repeat InitHc ;
33974: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33978: LD_VAR 0 9
33982: PPUSH
33983: CALL_OW 266
33987: PUSH
33988: LD_INT 5
33990: EQUAL
33991: IFFALSE 34061
// begin if UnitsInside ( j ) < 3 then
33993: LD_VAR 0 9
33997: PPUSH
33998: CALL_OW 313
34002: PUSH
34003: LD_INT 3
34005: LESS
34006: IFFALSE 34042
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34008: LD_INT 0
34010: PPUSH
34011: LD_INT 5
34013: PUSH
34014: LD_INT 8
34016: PUSH
34017: LD_INT 9
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: LIST
34024: PUSH
34025: LD_VAR 0 17
34029: ARRAY
34030: PPUSH
34031: LD_VAR 0 4
34035: PPUSH
34036: CALL_OW 380
34040: GO 34059
// PrepareHuman ( false , i , skill ) ;
34042: LD_INT 0
34044: PPUSH
34045: LD_VAR 0 8
34049: PPUSH
34050: LD_VAR 0 4
34054: PPUSH
34055: CALL_OW 380
// end else
34059: GO 34078
// PrepareHuman ( false , i , skill ) ;
34061: LD_INT 0
34063: PPUSH
34064: LD_VAR 0 8
34068: PPUSH
34069: LD_VAR 0 4
34073: PPUSH
34074: CALL_OW 380
// un := CreateHuman ;
34078: LD_ADDR_VAR 0 14
34082: PUSH
34083: CALL_OW 44
34087: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34088: LD_ADDR_VAR 0 7
34092: PUSH
34093: LD_VAR 0 7
34097: PPUSH
34098: LD_INT 1
34100: PPUSH
34101: LD_VAR 0 14
34105: PPUSH
34106: CALL_OW 2
34110: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34111: LD_VAR 0 14
34115: PPUSH
34116: LD_VAR 0 9
34120: PPUSH
34121: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34125: LD_VAR 0 9
34129: PPUSH
34130: CALL_OW 313
34134: PUSH
34135: LD_INT 6
34137: EQUAL
34138: IFTRUE 34162
34140: PUSH
34141: LD_VAR 0 9
34145: PPUSH
34146: CALL_OW 266
34150: PUSH
34151: LD_INT 32
34153: PUSH
34154: LD_INT 31
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: IN
34161: OR
34162: IFFALSE 33974
34164: GO 33971
34166: POP
34167: POP
// end else
34168: GO 34554
// for j = 1 to x do
34170: LD_ADDR_VAR 0 9
34174: PUSH
34175: DOUBLE
34176: LD_INT 1
34178: DEC
34179: ST_TO_ADDR
34180: LD_VAR 0 13
34184: PUSH
34185: FOR_TO
34186: IFFALSE 34552
// begin InitHc ;
34188: CALL_OW 19
// if not f then
34192: LD_VAR 0 12
34196: NOT
34197: IFFALSE 34286
// begin PrepareHuman ( false , i , skill ) ;
34199: LD_INT 0
34201: PPUSH
34202: LD_VAR 0 8
34206: PPUSH
34207: LD_VAR 0 4
34211: PPUSH
34212: CALL_OW 380
// un := CreateHuman ;
34216: LD_ADDR_VAR 0 14
34220: PUSH
34221: CALL_OW 44
34225: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34226: LD_ADDR_VAR 0 7
34230: PUSH
34231: LD_VAR 0 7
34235: PPUSH
34236: LD_INT 1
34238: PPUSH
34239: LD_VAR 0 14
34243: PPUSH
34244: CALL_OW 2
34248: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34249: LD_VAR 0 14
34253: PPUSH
34254: LD_VAR 0 1
34258: PPUSH
34259: CALL_OW 250
34263: PPUSH
34264: LD_VAR 0 1
34268: PPUSH
34269: CALL_OW 251
34273: PPUSH
34274: LD_INT 10
34276: PPUSH
34277: LD_INT 0
34279: PPUSH
34280: CALL_OW 50
// continue ;
34284: GO 34185
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34286: LD_VAR 0 12
34290: PUSH
34291: LD_INT 1
34293: ARRAY
34294: PPUSH
34295: CALL_OW 313
34299: IFFALSE 34327
34301: PUSH
34302: LD_VAR 0 12
34306: PUSH
34307: LD_INT 1
34309: ARRAY
34310: PPUSH
34311: CALL_OW 266
34315: PUSH
34316: LD_INT 32
34318: PUSH
34319: LD_INT 31
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: IN
34326: AND
34327: IFTRUE 34348
34329: PUSH
34330: LD_VAR 0 12
34334: PUSH
34335: LD_INT 1
34337: ARRAY
34338: PPUSH
34339: CALL_OW 313
34343: PUSH
34344: LD_INT 6
34346: EQUAL
34347: OR
34348: IFFALSE 34368
// f := Delete ( f , 1 ) ;
34350: LD_ADDR_VAR 0 12
34354: PUSH
34355: LD_VAR 0 12
34359: PPUSH
34360: LD_INT 1
34362: PPUSH
34363: CALL_OW 3
34367: ST_TO_ADDR
// if not f then
34368: LD_VAR 0 12
34372: NOT
34373: IFFALSE 34391
// begin x := x + 2 ;
34375: LD_ADDR_VAR 0 13
34379: PUSH
34380: LD_VAR 0 13
34384: PUSH
34385: LD_INT 2
34387: PLUS
34388: ST_TO_ADDR
// continue ;
34389: GO 34185
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34391: LD_VAR 0 12
34395: PUSH
34396: LD_INT 1
34398: ARRAY
34399: PPUSH
34400: CALL_OW 266
34404: PUSH
34405: LD_INT 5
34407: EQUAL
34408: IFFALSE 34482
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34410: LD_VAR 0 12
34414: PUSH
34415: LD_INT 1
34417: ARRAY
34418: PPUSH
34419: CALL_OW 313
34423: PUSH
34424: LD_INT 3
34426: LESS
34427: IFFALSE 34463
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34429: LD_INT 0
34431: PPUSH
34432: LD_INT 5
34434: PUSH
34435: LD_INT 8
34437: PUSH
34438: LD_INT 9
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: LIST
34445: PUSH
34446: LD_VAR 0 17
34450: ARRAY
34451: PPUSH
34452: LD_VAR 0 4
34456: PPUSH
34457: CALL_OW 380
34461: GO 34480
// PrepareHuman ( false , i , skill ) ;
34463: LD_INT 0
34465: PPUSH
34466: LD_VAR 0 8
34470: PPUSH
34471: LD_VAR 0 4
34475: PPUSH
34476: CALL_OW 380
// end else
34480: GO 34499
// PrepareHuman ( false , i , skill ) ;
34482: LD_INT 0
34484: PPUSH
34485: LD_VAR 0 8
34489: PPUSH
34490: LD_VAR 0 4
34494: PPUSH
34495: CALL_OW 380
// un := CreateHuman ;
34499: LD_ADDR_VAR 0 14
34503: PUSH
34504: CALL_OW 44
34508: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34509: LD_ADDR_VAR 0 7
34513: PUSH
34514: LD_VAR 0 7
34518: PPUSH
34519: LD_INT 1
34521: PPUSH
34522: LD_VAR 0 14
34526: PPUSH
34527: CALL_OW 2
34531: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34532: LD_VAR 0 14
34536: PPUSH
34537: LD_VAR 0 12
34541: PUSH
34542: LD_INT 1
34544: ARRAY
34545: PPUSH
34546: CALL_OW 52
// end ;
34550: GO 34185
34552: POP
34553: POP
// end ;
34554: GO 33485
34556: POP
34557: POP
// result := result ^ buildings ;
34558: LD_ADDR_VAR 0 7
34562: PUSH
34563: LD_VAR 0 7
34567: PUSH
34568: LD_VAR 0 18
34572: ADD
34573: ST_TO_ADDR
// end else
34574: GO 34717
// begin for i = 1 to personel do
34576: LD_ADDR_VAR 0 8
34580: PUSH
34581: DOUBLE
34582: LD_INT 1
34584: DEC
34585: ST_TO_ADDR
34586: LD_VAR 0 6
34590: PUSH
34591: FOR_TO
34592: IFFALSE 34715
// begin if i > 4 then
34594: LD_VAR 0 8
34598: PUSH
34599: LD_INT 4
34601: GREATER
34602: IFFALSE 34606
// break ;
34604: GO 34715
// x := personel [ i ] ;
34606: LD_ADDR_VAR 0 13
34610: PUSH
34611: LD_VAR 0 6
34615: PUSH
34616: LD_VAR 0 8
34620: ARRAY
34621: ST_TO_ADDR
// if x = - 1 then
34622: LD_VAR 0 13
34626: PUSH
34627: LD_INT 1
34629: NEG
34630: EQUAL
34631: IFFALSE 34635
// continue ;
34633: GO 34591
// PrepareHuman ( false , i , skill ) ;
34635: LD_INT 0
34637: PPUSH
34638: LD_VAR 0 8
34642: PPUSH
34643: LD_VAR 0 4
34647: PPUSH
34648: CALL_OW 380
// un := CreateHuman ;
34652: LD_ADDR_VAR 0 14
34656: PUSH
34657: CALL_OW 44
34661: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34662: LD_VAR 0 14
34666: PPUSH
34667: LD_VAR 0 1
34671: PPUSH
34672: CALL_OW 250
34676: PPUSH
34677: LD_VAR 0 1
34681: PPUSH
34682: CALL_OW 251
34686: PPUSH
34687: LD_INT 10
34689: PPUSH
34690: LD_INT 0
34692: PPUSH
34693: CALL_OW 50
// result := result ^ un ;
34697: LD_ADDR_VAR 0 7
34701: PUSH
34702: LD_VAR 0 7
34706: PUSH
34707: LD_VAR 0 14
34711: ADD
34712: ST_TO_ADDR
// end ;
34713: GO 34591
34715: POP
34716: POP
// end ; end ;
34717: LD_VAR 0 7
34721: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34722: LD_INT 0
34724: PPUSH
34725: PPUSH
34726: PPUSH
34727: PPUSH
34728: PPUSH
34729: PPUSH
34730: PPUSH
34731: PPUSH
34732: PPUSH
34733: PPUSH
34734: PPUSH
34735: PPUSH
34736: PPUSH
34737: PPUSH
34738: PPUSH
34739: PPUSH
// result := false ;
34740: LD_ADDR_VAR 0 3
34744: PUSH
34745: LD_INT 0
34747: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34748: LD_VAR 0 1
34752: NOT
34753: IFTRUE 34778
34755: PUSH
34756: LD_VAR 0 1
34760: PPUSH
34761: CALL_OW 266
34765: PUSH
34766: LD_INT 32
34768: PUSH
34769: LD_INT 33
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: IN
34776: NOT
34777: OR
34778: IFFALSE 34782
// exit ;
34780: GO 35917
// nat := GetNation ( tower ) ;
34782: LD_ADDR_VAR 0 12
34786: PUSH
34787: LD_VAR 0 1
34791: PPUSH
34792: CALL_OW 248
34796: ST_TO_ADDR
// side := GetSide ( tower ) ;
34797: LD_ADDR_VAR 0 16
34801: PUSH
34802: LD_VAR 0 1
34806: PPUSH
34807: CALL_OW 255
34811: ST_TO_ADDR
// x := GetX ( tower ) ;
34812: LD_ADDR_VAR 0 10
34816: PUSH
34817: LD_VAR 0 1
34821: PPUSH
34822: CALL_OW 250
34826: ST_TO_ADDR
// y := GetY ( tower ) ;
34827: LD_ADDR_VAR 0 11
34831: PUSH
34832: LD_VAR 0 1
34836: PPUSH
34837: CALL_OW 251
34841: ST_TO_ADDR
// if not x or not y then
34842: LD_VAR 0 10
34846: NOT
34847: IFTRUE 34856
34849: PUSH
34850: LD_VAR 0 11
34854: NOT
34855: OR
34856: IFFALSE 34860
// exit ;
34858: GO 35917
// weapon := 0 ;
34860: LD_ADDR_VAR 0 18
34864: PUSH
34865: LD_INT 0
34867: ST_TO_ADDR
// fac_list := [ ] ;
34868: LD_ADDR_VAR 0 17
34872: PUSH
34873: EMPTY
34874: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34875: LD_ADDR_VAR 0 6
34879: PUSH
34880: LD_VAR 0 1
34884: PPUSH
34885: CALL_OW 274
34889: PPUSH
34890: LD_VAR 0 2
34894: PPUSH
34895: LD_INT 0
34897: PPUSH
34898: CALL 32452 0 3
34902: PPUSH
34903: LD_INT 30
34905: PUSH
34906: LD_INT 3
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PPUSH
34913: CALL_OW 72
34917: ST_TO_ADDR
// if not factories then
34918: LD_VAR 0 6
34922: NOT
34923: IFFALSE 34927
// exit ;
34925: GO 35917
// for i in factories do
34927: LD_ADDR_VAR 0 8
34931: PUSH
34932: LD_VAR 0 6
34936: PUSH
34937: FOR_IN
34938: IFFALSE 34963
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34940: LD_ADDR_VAR 0 17
34944: PUSH
34945: LD_VAR 0 17
34949: PUSH
34950: LD_VAR 0 8
34954: PPUSH
34955: CALL_OW 478
34959: UNION
34960: ST_TO_ADDR
34961: GO 34937
34963: POP
34964: POP
// if not fac_list then
34965: LD_VAR 0 17
34969: NOT
34970: IFFALSE 34974
// exit ;
34972: GO 35917
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34974: LD_ADDR_VAR 0 5
34978: PUSH
34979: LD_INT 4
34981: PUSH
34982: LD_INT 5
34984: PUSH
34985: LD_INT 9
34987: PUSH
34988: LD_INT 10
34990: PUSH
34991: LD_INT 6
34993: PUSH
34994: LD_INT 7
34996: PUSH
34997: LD_INT 11
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: PUSH
35009: LD_INT 27
35011: PUSH
35012: LD_INT 28
35014: PUSH
35015: LD_INT 26
35017: PUSH
35018: LD_INT 30
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: PUSH
35027: LD_INT 43
35029: PUSH
35030: LD_INT 44
35032: PUSH
35033: LD_INT 46
35035: PUSH
35036: LD_INT 45
35038: PUSH
35039: LD_INT 47
35041: PUSH
35042: LD_INT 49
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: LIST
35057: PUSH
35058: LD_VAR 0 12
35062: ARRAY
35063: ST_TO_ADDR
// list := list isect fac_list ;
35064: LD_ADDR_VAR 0 5
35068: PUSH
35069: LD_VAR 0 5
35073: PUSH
35074: LD_VAR 0 17
35078: ISECT
35079: ST_TO_ADDR
// if not list then
35080: LD_VAR 0 5
35084: NOT
35085: IFFALSE 35089
// exit ;
35087: GO 35917
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35089: LD_VAR 0 12
35093: PUSH
35094: LD_INT 3
35096: EQUAL
35097: IFFALSE 35109
35099: PUSH
35100: LD_INT 49
35102: PUSH
35103: LD_VAR 0 5
35107: IN
35108: AND
35109: IFFALSE 35129
35111: PUSH
35112: LD_INT 31
35114: PPUSH
35115: LD_VAR 0 16
35119: PPUSH
35120: CALL_OW 321
35124: PUSH
35125: LD_INT 2
35127: EQUAL
35128: AND
35129: IFFALSE 35189
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35131: LD_INT 22
35133: PUSH
35134: LD_VAR 0 16
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 35
35145: PUSH
35146: LD_INT 49
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 91
35155: PUSH
35156: LD_VAR 0 1
35160: PUSH
35161: LD_INT 10
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: LIST
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: LIST
35173: PPUSH
35174: CALL_OW 69
35178: NOT
35179: IFFALSE 35189
// weapon := ru_time_lapser ;
35181: LD_ADDR_VAR 0 18
35185: PUSH
35186: LD_INT 49
35188: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35189: LD_VAR 0 12
35193: PUSH
35194: LD_INT 1
35196: PUSH
35197: LD_INT 2
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: IN
35204: IFFALSE 35228
35206: PUSH
35207: LD_INT 11
35209: PUSH
35210: LD_VAR 0 5
35214: IN
35215: IFTRUE 35227
35217: PUSH
35218: LD_INT 30
35220: PUSH
35221: LD_VAR 0 5
35225: IN
35226: OR
35227: AND
35228: IFFALSE 35248
35230: PUSH
35231: LD_INT 6
35233: PPUSH
35234: LD_VAR 0 16
35238: PPUSH
35239: CALL_OW 321
35243: PUSH
35244: LD_INT 2
35246: EQUAL
35247: AND
35248: IFFALSE 35415
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35250: LD_INT 22
35252: PUSH
35253: LD_VAR 0 16
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: LD_INT 2
35264: PUSH
35265: LD_INT 35
35267: PUSH
35268: LD_INT 11
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PUSH
35275: LD_INT 35
35277: PUSH
35278: LD_INT 30
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 91
35292: PUSH
35293: LD_VAR 0 1
35297: PUSH
35298: LD_INT 18
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: LIST
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: LIST
35310: PPUSH
35311: CALL_OW 69
35315: NOT
35316: IFFALSE 35392
35318: PUSH
35319: LD_INT 22
35321: PUSH
35322: LD_VAR 0 16
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: PUSH
35331: LD_INT 2
35333: PUSH
35334: LD_INT 30
35336: PUSH
35337: LD_INT 32
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PUSH
35344: LD_INT 30
35346: PUSH
35347: LD_INT 33
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: LIST
35358: PUSH
35359: LD_INT 91
35361: PUSH
35362: LD_VAR 0 1
35366: PUSH
35367: LD_INT 12
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: LIST
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: LIST
35379: PUSH
35380: EMPTY
35381: LIST
35382: PPUSH
35383: CALL_OW 69
35387: PUSH
35388: LD_INT 2
35390: GREATER
35391: AND
35392: IFFALSE 35415
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35394: LD_ADDR_VAR 0 18
35398: PUSH
35399: LD_INT 11
35401: PUSH
35402: LD_INT 30
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: PUSH
35409: LD_VAR 0 12
35413: ARRAY
35414: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35415: LD_VAR 0 18
35419: NOT
35420: IFFALSE 35440
35422: PUSH
35423: LD_INT 40
35425: PPUSH
35426: LD_VAR 0 16
35430: PPUSH
35431: CALL_OW 321
35435: PUSH
35436: LD_INT 2
35438: EQUAL
35439: AND
35440: IFFALSE 35476
35442: PUSH
35443: LD_INT 7
35445: PUSH
35446: LD_VAR 0 5
35450: IN
35451: IFTRUE 35463
35453: PUSH
35454: LD_INT 28
35456: PUSH
35457: LD_VAR 0 5
35461: IN
35462: OR
35463: IFTRUE 35475
35465: PUSH
35466: LD_INT 45
35468: PUSH
35469: LD_VAR 0 5
35473: IN
35474: OR
35475: AND
35476: IFFALSE 35730
// begin hex := GetHexInfo ( x , y ) ;
35478: LD_ADDR_VAR 0 4
35482: PUSH
35483: LD_VAR 0 10
35487: PPUSH
35488: LD_VAR 0 11
35492: PPUSH
35493: CALL_OW 546
35497: ST_TO_ADDR
// if hex [ 1 ] then
35498: LD_VAR 0 4
35502: PUSH
35503: LD_INT 1
35505: ARRAY
35506: IFFALSE 35510
// exit ;
35508: GO 35917
// height := hex [ 2 ] ;
35510: LD_ADDR_VAR 0 15
35514: PUSH
35515: LD_VAR 0 4
35519: PUSH
35520: LD_INT 2
35522: ARRAY
35523: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35524: LD_ADDR_VAR 0 14
35528: PUSH
35529: LD_INT 0
35531: PUSH
35532: LD_INT 2
35534: PUSH
35535: LD_INT 3
35537: PUSH
35538: LD_INT 5
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: LIST
35545: LIST
35546: ST_TO_ADDR
// for i in tmp do
35547: LD_ADDR_VAR 0 8
35551: PUSH
35552: LD_VAR 0 14
35556: PUSH
35557: FOR_IN
35558: IFFALSE 35728
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35560: LD_ADDR_VAR 0 9
35564: PUSH
35565: LD_VAR 0 10
35569: PPUSH
35570: LD_VAR 0 8
35574: PPUSH
35575: LD_INT 5
35577: PPUSH
35578: CALL_OW 272
35582: PUSH
35583: LD_VAR 0 11
35587: PPUSH
35588: LD_VAR 0 8
35592: PPUSH
35593: LD_INT 5
35595: PPUSH
35596: CALL_OW 273
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35605: LD_VAR 0 9
35609: PUSH
35610: LD_INT 1
35612: ARRAY
35613: PPUSH
35614: LD_VAR 0 9
35618: PUSH
35619: LD_INT 2
35621: ARRAY
35622: PPUSH
35623: CALL_OW 488
35627: IFFALSE 35726
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35629: LD_ADDR_VAR 0 4
35633: PUSH
35634: LD_VAR 0 9
35638: PUSH
35639: LD_INT 1
35641: ARRAY
35642: PPUSH
35643: LD_VAR 0 9
35647: PUSH
35648: LD_INT 2
35650: ARRAY
35651: PPUSH
35652: CALL_OW 546
35656: ST_TO_ADDR
// if hex [ 1 ] then
35657: LD_VAR 0 4
35661: PUSH
35662: LD_INT 1
35664: ARRAY
35665: IFFALSE 35669
// continue ;
35667: GO 35557
// h := hex [ 2 ] ;
35669: LD_ADDR_VAR 0 13
35673: PUSH
35674: LD_VAR 0 4
35678: PUSH
35679: LD_INT 2
35681: ARRAY
35682: ST_TO_ADDR
// if h + 7 < height then
35683: LD_VAR 0 13
35687: PUSH
35688: LD_INT 7
35690: PLUS
35691: PUSH
35692: LD_VAR 0 15
35696: LESS
35697: IFFALSE 35726
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35699: LD_ADDR_VAR 0 18
35703: PUSH
35704: LD_INT 7
35706: PUSH
35707: LD_INT 28
35709: PUSH
35710: LD_INT 45
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: LIST
35717: PUSH
35718: LD_VAR 0 12
35722: ARRAY
35723: ST_TO_ADDR
// break ;
35724: GO 35728
// end ; end ; end ;
35726: GO 35557
35728: POP
35729: POP
// end ; if not weapon then
35730: LD_VAR 0 18
35734: NOT
35735: IFFALSE 35795
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35737: LD_ADDR_VAR 0 5
35741: PUSH
35742: LD_VAR 0 5
35746: PUSH
35747: LD_INT 11
35749: PUSH
35750: LD_INT 30
35752: PUSH
35753: LD_INT 49
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: LIST
35760: DIFF
35761: ST_TO_ADDR
// if not list then
35762: LD_VAR 0 5
35766: NOT
35767: IFFALSE 35771
// exit ;
35769: GO 35917
// weapon := list [ rand ( 1 , list ) ] ;
35771: LD_ADDR_VAR 0 18
35775: PUSH
35776: LD_VAR 0 5
35780: PUSH
35781: LD_INT 1
35783: PPUSH
35784: LD_VAR 0 5
35788: PPUSH
35789: CALL_OW 12
35793: ARRAY
35794: ST_TO_ADDR
// end ; if weapon then
35795: LD_VAR 0 18
35799: IFFALSE 35917
// begin tmp := CostOfWeapon ( weapon ) ;
35801: LD_ADDR_VAR 0 14
35805: PUSH
35806: LD_VAR 0 18
35810: PPUSH
35811: CALL_OW 451
35815: ST_TO_ADDR
// j := GetBase ( tower ) ;
35816: LD_ADDR_VAR 0 9
35820: PUSH
35821: LD_VAR 0 1
35825: PPUSH
35826: CALL_OW 274
35830: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35831: LD_VAR 0 9
35835: PPUSH
35836: LD_INT 1
35838: PPUSH
35839: CALL_OW 275
35843: PUSH
35844: LD_VAR 0 14
35848: PUSH
35849: LD_INT 1
35851: ARRAY
35852: GREATEREQUAL
35853: IFFALSE 35879
35855: PUSH
35856: LD_VAR 0 9
35860: PPUSH
35861: LD_INT 2
35863: PPUSH
35864: CALL_OW 275
35868: PUSH
35869: LD_VAR 0 14
35873: PUSH
35874: LD_INT 2
35876: ARRAY
35877: GREATEREQUAL
35878: AND
35879: IFFALSE 35905
35881: PUSH
35882: LD_VAR 0 9
35886: PPUSH
35887: LD_INT 3
35889: PPUSH
35890: CALL_OW 275
35894: PUSH
35895: LD_VAR 0 14
35899: PUSH
35900: LD_INT 3
35902: ARRAY
35903: GREATEREQUAL
35904: AND
35905: IFFALSE 35917
// result := weapon ;
35907: LD_ADDR_VAR 0 3
35911: PUSH
35912: LD_VAR 0 18
35916: ST_TO_ADDR
// end ; end ;
35917: LD_VAR 0 3
35921: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35922: LD_INT 0
35924: PPUSH
35925: PPUSH
// result := true ;
35926: LD_ADDR_VAR 0 3
35930: PUSH
35931: LD_INT 1
35933: ST_TO_ADDR
// if array1 = array2 then
35934: LD_VAR 0 1
35938: PUSH
35939: LD_VAR 0 2
35943: EQUAL
35944: IFFALSE 36004
// begin for i = 1 to array1 do
35946: LD_ADDR_VAR 0 4
35950: PUSH
35951: DOUBLE
35952: LD_INT 1
35954: DEC
35955: ST_TO_ADDR
35956: LD_VAR 0 1
35960: PUSH
35961: FOR_TO
35962: IFFALSE 36000
// if array1 [ i ] <> array2 [ i ] then
35964: LD_VAR 0 1
35968: PUSH
35969: LD_VAR 0 4
35973: ARRAY
35974: PUSH
35975: LD_VAR 0 2
35979: PUSH
35980: LD_VAR 0 4
35984: ARRAY
35985: NONEQUAL
35986: IFFALSE 35998
// begin result := false ;
35988: LD_ADDR_VAR 0 3
35992: PUSH
35993: LD_INT 0
35995: ST_TO_ADDR
// break ;
35996: GO 36000
// end ;
35998: GO 35961
36000: POP
36001: POP
// end else
36002: GO 36012
// result := false ;
36004: LD_ADDR_VAR 0 3
36008: PUSH
36009: LD_INT 0
36011: ST_TO_ADDR
// end ;
36012: LD_VAR 0 3
36016: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36017: LD_INT 0
36019: PPUSH
36020: PPUSH
// if not array1 or not array2 then
36021: LD_VAR 0 1
36025: NOT
36026: IFTRUE 36035
36028: PUSH
36029: LD_VAR 0 2
36033: NOT
36034: OR
36035: IFFALSE 36039
// exit ;
36037: GO 36103
// result := true ;
36039: LD_ADDR_VAR 0 3
36043: PUSH
36044: LD_INT 1
36046: ST_TO_ADDR
// for i = 1 to array1 do
36047: LD_ADDR_VAR 0 4
36051: PUSH
36052: DOUBLE
36053: LD_INT 1
36055: DEC
36056: ST_TO_ADDR
36057: LD_VAR 0 1
36061: PUSH
36062: FOR_TO
36063: IFFALSE 36101
// if array1 [ i ] <> array2 [ i ] then
36065: LD_VAR 0 1
36069: PUSH
36070: LD_VAR 0 4
36074: ARRAY
36075: PUSH
36076: LD_VAR 0 2
36080: PUSH
36081: LD_VAR 0 4
36085: ARRAY
36086: NONEQUAL
36087: IFFALSE 36099
// begin result := false ;
36089: LD_ADDR_VAR 0 3
36093: PUSH
36094: LD_INT 0
36096: ST_TO_ADDR
// break ;
36097: GO 36101
// end ;
36099: GO 36062
36101: POP
36102: POP
// end ;
36103: LD_VAR 0 3
36107: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36108: LD_INT 0
36110: PPUSH
36111: PPUSH
36112: PPUSH
// pom := GetBase ( fac ) ;
36113: LD_ADDR_VAR 0 5
36117: PUSH
36118: LD_VAR 0 1
36122: PPUSH
36123: CALL_OW 274
36127: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36128: LD_ADDR_VAR 0 4
36132: PUSH
36133: LD_VAR 0 2
36137: PUSH
36138: LD_INT 1
36140: ARRAY
36141: PPUSH
36142: LD_VAR 0 2
36146: PUSH
36147: LD_INT 2
36149: ARRAY
36150: PPUSH
36151: LD_VAR 0 2
36155: PUSH
36156: LD_INT 3
36158: ARRAY
36159: PPUSH
36160: LD_VAR 0 2
36164: PUSH
36165: LD_INT 4
36167: ARRAY
36168: PPUSH
36169: CALL_OW 449
36173: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36174: LD_ADDR_VAR 0 3
36178: PUSH
36179: LD_VAR 0 5
36183: PPUSH
36184: LD_INT 1
36186: PPUSH
36187: CALL_OW 275
36191: PUSH
36192: LD_VAR 0 4
36196: PUSH
36197: LD_INT 1
36199: ARRAY
36200: GREATEREQUAL
36201: IFFALSE 36227
36203: PUSH
36204: LD_VAR 0 5
36208: PPUSH
36209: LD_INT 2
36211: PPUSH
36212: CALL_OW 275
36216: PUSH
36217: LD_VAR 0 4
36221: PUSH
36222: LD_INT 2
36224: ARRAY
36225: GREATEREQUAL
36226: AND
36227: IFFALSE 36253
36229: PUSH
36230: LD_VAR 0 5
36234: PPUSH
36235: LD_INT 3
36237: PPUSH
36238: CALL_OW 275
36242: PUSH
36243: LD_VAR 0 4
36247: PUSH
36248: LD_INT 3
36250: ARRAY
36251: GREATEREQUAL
36252: AND
36253: ST_TO_ADDR
// end ;
36254: LD_VAR 0 3
36258: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36259: LD_INT 0
36261: PPUSH
36262: PPUSH
36263: PPUSH
36264: PPUSH
// pom := GetBase ( building ) ;
36265: LD_ADDR_VAR 0 3
36269: PUSH
36270: LD_VAR 0 1
36274: PPUSH
36275: CALL_OW 274
36279: ST_TO_ADDR
// if not pom then
36280: LD_VAR 0 3
36284: NOT
36285: IFFALSE 36289
// exit ;
36287: GO 36463
// btype := GetBType ( building ) ;
36289: LD_ADDR_VAR 0 5
36293: PUSH
36294: LD_VAR 0 1
36298: PPUSH
36299: CALL_OW 266
36303: ST_TO_ADDR
// if btype = b_armoury then
36304: LD_VAR 0 5
36308: PUSH
36309: LD_INT 4
36311: EQUAL
36312: IFFALSE 36322
// btype := b_barracks ;
36314: LD_ADDR_VAR 0 5
36318: PUSH
36319: LD_INT 5
36321: ST_TO_ADDR
// if btype = b_depot then
36322: LD_VAR 0 5
36326: PUSH
36327: LD_INT 0
36329: EQUAL
36330: IFFALSE 36340
// btype := b_warehouse ;
36332: LD_ADDR_VAR 0 5
36336: PUSH
36337: LD_INT 1
36339: ST_TO_ADDR
// if btype = b_workshop then
36340: LD_VAR 0 5
36344: PUSH
36345: LD_INT 2
36347: EQUAL
36348: IFFALSE 36358
// btype := b_factory ;
36350: LD_ADDR_VAR 0 5
36354: PUSH
36355: LD_INT 3
36357: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36358: LD_ADDR_VAR 0 4
36362: PUSH
36363: LD_VAR 0 5
36367: PPUSH
36368: LD_VAR 0 1
36372: PPUSH
36373: CALL_OW 248
36377: PPUSH
36378: CALL_OW 450
36382: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36383: LD_ADDR_VAR 0 2
36387: PUSH
36388: LD_VAR 0 3
36392: PPUSH
36393: LD_INT 1
36395: PPUSH
36396: CALL_OW 275
36400: PUSH
36401: LD_VAR 0 4
36405: PUSH
36406: LD_INT 1
36408: ARRAY
36409: GREATEREQUAL
36410: IFFALSE 36436
36412: PUSH
36413: LD_VAR 0 3
36417: PPUSH
36418: LD_INT 2
36420: PPUSH
36421: CALL_OW 275
36425: PUSH
36426: LD_VAR 0 4
36430: PUSH
36431: LD_INT 2
36433: ARRAY
36434: GREATEREQUAL
36435: AND
36436: IFFALSE 36462
36438: PUSH
36439: LD_VAR 0 3
36443: PPUSH
36444: LD_INT 3
36446: PPUSH
36447: CALL_OW 275
36451: PUSH
36452: LD_VAR 0 4
36456: PUSH
36457: LD_INT 3
36459: ARRAY
36460: GREATEREQUAL
36461: AND
36462: ST_TO_ADDR
// end ;
36463: LD_VAR 0 2
36467: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36468: LD_INT 0
36470: PPUSH
36471: PPUSH
36472: PPUSH
// pom := GetBase ( building ) ;
36473: LD_ADDR_VAR 0 4
36477: PUSH
36478: LD_VAR 0 1
36482: PPUSH
36483: CALL_OW 274
36487: ST_TO_ADDR
// if not pom then
36488: LD_VAR 0 4
36492: NOT
36493: IFFALSE 36497
// exit ;
36495: GO 36602
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36497: LD_ADDR_VAR 0 5
36501: PUSH
36502: LD_VAR 0 2
36506: PPUSH
36507: LD_VAR 0 1
36511: PPUSH
36512: CALL_OW 248
36516: PPUSH
36517: CALL_OW 450
36521: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36522: LD_ADDR_VAR 0 3
36526: PUSH
36527: LD_VAR 0 4
36531: PPUSH
36532: LD_INT 1
36534: PPUSH
36535: CALL_OW 275
36539: PUSH
36540: LD_VAR 0 5
36544: PUSH
36545: LD_INT 1
36547: ARRAY
36548: GREATEREQUAL
36549: IFFALSE 36575
36551: PUSH
36552: LD_VAR 0 4
36556: PPUSH
36557: LD_INT 2
36559: PPUSH
36560: CALL_OW 275
36564: PUSH
36565: LD_VAR 0 5
36569: PUSH
36570: LD_INT 2
36572: ARRAY
36573: GREATEREQUAL
36574: AND
36575: IFFALSE 36601
36577: PUSH
36578: LD_VAR 0 4
36582: PPUSH
36583: LD_INT 3
36585: PPUSH
36586: CALL_OW 275
36590: PUSH
36591: LD_VAR 0 5
36595: PUSH
36596: LD_INT 3
36598: ARRAY
36599: GREATEREQUAL
36600: AND
36601: ST_TO_ADDR
// end ;
36602: LD_VAR 0 3
36606: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36607: LD_INT 0
36609: PPUSH
36610: PPUSH
36611: PPUSH
36612: PPUSH
36613: PPUSH
36614: PPUSH
36615: PPUSH
36616: PPUSH
36617: PPUSH
36618: PPUSH
36619: PPUSH
// result := false ;
36620: LD_ADDR_VAR 0 8
36624: PUSH
36625: LD_INT 0
36627: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36628: LD_VAR 0 5
36632: NOT
36633: IFTRUE 36642
36635: PUSH
36636: LD_VAR 0 1
36640: NOT
36641: OR
36642: IFTRUE 36651
36644: PUSH
36645: LD_VAR 0 2
36649: NOT
36650: OR
36651: IFTRUE 36660
36653: PUSH
36654: LD_VAR 0 3
36658: NOT
36659: OR
36660: IFFALSE 36664
// exit ;
36662: GO 37490
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36664: LD_ADDR_VAR 0 14
36668: PUSH
36669: LD_VAR 0 1
36673: PPUSH
36674: LD_VAR 0 2
36678: PPUSH
36679: LD_VAR 0 3
36683: PPUSH
36684: LD_VAR 0 4
36688: PPUSH
36689: LD_VAR 0 5
36693: PUSH
36694: LD_INT 1
36696: ARRAY
36697: PPUSH
36698: CALL_OW 248
36702: PPUSH
36703: LD_INT 0
36705: PPUSH
36706: CALL 38771 0 6
36710: ST_TO_ADDR
// if not hexes then
36711: LD_VAR 0 14
36715: NOT
36716: IFFALSE 36720
// exit ;
36718: GO 37490
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36720: LD_ADDR_VAR 0 17
36724: PUSH
36725: LD_VAR 0 5
36729: PPUSH
36730: LD_INT 22
36732: PUSH
36733: LD_VAR 0 13
36737: PPUSH
36738: CALL_OW 255
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 2
36749: PUSH
36750: LD_INT 30
36752: PUSH
36753: LD_INT 0
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 30
36762: PUSH
36763: LD_INT 1
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: LIST
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: PPUSH
36779: CALL_OW 72
36783: ST_TO_ADDR
// for i = 1 to hexes do
36784: LD_ADDR_VAR 0 9
36788: PUSH
36789: DOUBLE
36790: LD_INT 1
36792: DEC
36793: ST_TO_ADDR
36794: LD_VAR 0 14
36798: PUSH
36799: FOR_TO
36800: IFFALSE 37488
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36802: LD_ADDR_VAR 0 13
36806: PUSH
36807: LD_VAR 0 14
36811: PUSH
36812: LD_VAR 0 9
36816: ARRAY
36817: PUSH
36818: LD_INT 1
36820: ARRAY
36821: PPUSH
36822: LD_VAR 0 14
36826: PUSH
36827: LD_VAR 0 9
36831: ARRAY
36832: PUSH
36833: LD_INT 2
36835: ARRAY
36836: PPUSH
36837: CALL_OW 428
36841: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36842: LD_VAR 0 14
36846: PUSH
36847: LD_VAR 0 9
36851: ARRAY
36852: PUSH
36853: LD_INT 1
36855: ARRAY
36856: PPUSH
36857: LD_VAR 0 14
36861: PUSH
36862: LD_VAR 0 9
36866: ARRAY
36867: PUSH
36868: LD_INT 2
36870: ARRAY
36871: PPUSH
36872: CALL_OW 351
36876: IFTRUE 36915
36878: PUSH
36879: LD_VAR 0 14
36883: PUSH
36884: LD_VAR 0 9
36888: ARRAY
36889: PUSH
36890: LD_INT 1
36892: ARRAY
36893: PPUSH
36894: LD_VAR 0 14
36898: PUSH
36899: LD_VAR 0 9
36903: ARRAY
36904: PUSH
36905: LD_INT 2
36907: ARRAY
36908: PPUSH
36909: CALL_OW 488
36913: NOT
36914: OR
36915: IFTRUE 36932
36917: PUSH
36918: LD_VAR 0 13
36922: PPUSH
36923: CALL_OW 247
36927: PUSH
36928: LD_INT 3
36930: EQUAL
36931: OR
36932: IFFALSE 36938
// exit ;
36934: POP
36935: POP
36936: GO 37490
// if not tmp then
36938: LD_VAR 0 13
36942: NOT
36943: IFFALSE 36947
// continue ;
36945: GO 36799
// result := true ;
36947: LD_ADDR_VAR 0 8
36951: PUSH
36952: LD_INT 1
36954: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36955: LD_VAR 0 6
36959: IFFALSE 36976
36961: PUSH
36962: LD_VAR 0 13
36966: PPUSH
36967: CALL_OW 247
36971: PUSH
36972: LD_INT 2
36974: EQUAL
36975: AND
36976: IFFALSE 36993
36978: PUSH
36979: LD_VAR 0 13
36983: PPUSH
36984: CALL_OW 263
36988: PUSH
36989: LD_INT 1
36991: EQUAL
36992: AND
36993: IFFALSE 37157
// begin if IsDrivenBy ( tmp ) then
36995: LD_VAR 0 13
36999: PPUSH
37000: CALL_OW 311
37004: IFFALSE 37008
// continue ;
37006: GO 36799
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37008: LD_VAR 0 6
37012: PPUSH
37013: LD_INT 3
37015: PUSH
37016: LD_INT 60
37018: PUSH
37019: EMPTY
37020: LIST
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 3
37028: PUSH
37029: LD_INT 55
37031: PUSH
37032: EMPTY
37033: LIST
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PPUSH
37043: CALL_OW 72
37047: IFFALSE 37155
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37049: LD_ADDR_VAR 0 18
37053: PUSH
37054: LD_VAR 0 6
37058: PPUSH
37059: LD_INT 3
37061: PUSH
37062: LD_INT 60
37064: PUSH
37065: EMPTY
37066: LIST
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: PUSH
37072: LD_INT 3
37074: PUSH
37075: LD_INT 55
37077: PUSH
37078: EMPTY
37079: LIST
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: PPUSH
37089: CALL_OW 72
37093: PUSH
37094: LD_INT 1
37096: ARRAY
37097: ST_TO_ADDR
// if IsInUnit ( driver ) then
37098: LD_VAR 0 18
37102: PPUSH
37103: CALL_OW 310
37107: IFFALSE 37118
// ComExit ( driver ) ;
37109: LD_VAR 0 18
37113: PPUSH
37114: CALL 62771 0 1
// AddComEnterUnit ( driver , tmp ) ;
37118: LD_VAR 0 18
37122: PPUSH
37123: LD_VAR 0 13
37127: PPUSH
37128: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37132: LD_VAR 0 18
37136: PPUSH
37137: LD_VAR 0 7
37141: PPUSH
37142: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37146: LD_VAR 0 18
37150: PPUSH
37151: CALL_OW 181
// end ; continue ;
37155: GO 36799
// end ; if not cleaners or not tmp in cleaners then
37157: LD_VAR 0 6
37161: NOT
37162: IFTRUE 37177
37164: PUSH
37165: LD_VAR 0 13
37169: PUSH
37170: LD_VAR 0 6
37174: IN
37175: NOT
37176: OR
37177: IFFALSE 37486
// begin if dep then
37179: LD_VAR 0 17
37183: IFFALSE 37319
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37185: LD_ADDR_VAR 0 16
37189: PUSH
37190: LD_VAR 0 17
37194: PUSH
37195: LD_INT 1
37197: ARRAY
37198: PPUSH
37199: CALL_OW 250
37203: PPUSH
37204: LD_VAR 0 17
37208: PUSH
37209: LD_INT 1
37211: ARRAY
37212: PPUSH
37213: CALL_OW 254
37217: PPUSH
37218: LD_INT 5
37220: PPUSH
37221: CALL_OW 272
37225: PUSH
37226: LD_VAR 0 17
37230: PUSH
37231: LD_INT 1
37233: ARRAY
37234: PPUSH
37235: CALL_OW 251
37239: PPUSH
37240: LD_VAR 0 17
37244: PUSH
37245: LD_INT 1
37247: ARRAY
37248: PPUSH
37249: CALL_OW 254
37253: PPUSH
37254: LD_INT 5
37256: PPUSH
37257: CALL_OW 273
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37266: LD_VAR 0 16
37270: PUSH
37271: LD_INT 1
37273: ARRAY
37274: PPUSH
37275: LD_VAR 0 16
37279: PUSH
37280: LD_INT 2
37282: ARRAY
37283: PPUSH
37284: CALL_OW 488
37288: IFFALSE 37319
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37290: LD_VAR 0 13
37294: PPUSH
37295: LD_VAR 0 16
37299: PUSH
37300: LD_INT 1
37302: ARRAY
37303: PPUSH
37304: LD_VAR 0 16
37308: PUSH
37309: LD_INT 2
37311: ARRAY
37312: PPUSH
37313: CALL_OW 111
// continue ;
37317: GO 36799
// end ; end ; r := GetDir ( tmp ) ;
37319: LD_ADDR_VAR 0 15
37323: PUSH
37324: LD_VAR 0 13
37328: PPUSH
37329: CALL_OW 254
37333: ST_TO_ADDR
// if r = 5 then
37334: LD_VAR 0 15
37338: PUSH
37339: LD_INT 5
37341: EQUAL
37342: IFFALSE 37352
// r := 0 ;
37344: LD_ADDR_VAR 0 15
37348: PUSH
37349: LD_INT 0
37351: ST_TO_ADDR
// for j = r to 5 do
37352: LD_ADDR_VAR 0 10
37356: PUSH
37357: DOUBLE
37358: LD_VAR 0 15
37362: DEC
37363: ST_TO_ADDR
37364: LD_INT 5
37366: PUSH
37367: FOR_TO
37368: IFFALSE 37484
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37370: LD_ADDR_VAR 0 11
37374: PUSH
37375: LD_VAR 0 13
37379: PPUSH
37380: CALL_OW 250
37384: PPUSH
37385: LD_VAR 0 10
37389: PPUSH
37390: LD_INT 2
37392: PPUSH
37393: CALL_OW 272
37397: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37398: LD_ADDR_VAR 0 12
37402: PUSH
37403: LD_VAR 0 13
37407: PPUSH
37408: CALL_OW 251
37412: PPUSH
37413: LD_VAR 0 10
37417: PPUSH
37418: LD_INT 2
37420: PPUSH
37421: CALL_OW 273
37425: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37426: LD_VAR 0 11
37430: PPUSH
37431: LD_VAR 0 12
37435: PPUSH
37436: CALL_OW 488
37440: IFFALSE 37459
37442: PUSH
37443: LD_VAR 0 11
37447: PPUSH
37448: LD_VAR 0 12
37452: PPUSH
37453: CALL_OW 428
37457: NOT
37458: AND
37459: IFFALSE 37482
// begin ComMoveXY ( tmp , _x , _y ) ;
37461: LD_VAR 0 13
37465: PPUSH
37466: LD_VAR 0 11
37470: PPUSH
37471: LD_VAR 0 12
37475: PPUSH
37476: CALL_OW 111
// break ;
37480: GO 37484
// end ; end ;
37482: GO 37367
37484: POP
37485: POP
// end ; end ;
37486: GO 36799
37488: POP
37489: POP
// end ;
37490: LD_VAR 0 8
37494: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37495: LD_INT 0
37497: PPUSH
// result := true ;
37498: LD_ADDR_VAR 0 3
37502: PUSH
37503: LD_INT 1
37505: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37506: LD_VAR 0 2
37510: PUSH
37511: LD_INT 24
37513: DOUBLE
37514: EQUAL
37515: IFTRUE 37525
37517: LD_INT 33
37519: DOUBLE
37520: EQUAL
37521: IFTRUE 37525
37523: GO 37550
37525: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37526: LD_ADDR_VAR 0 3
37530: PUSH
37531: LD_INT 32
37533: PPUSH
37534: LD_VAR 0 1
37538: PPUSH
37539: CALL_OW 321
37543: PUSH
37544: LD_INT 2
37546: EQUAL
37547: ST_TO_ADDR
37548: GO 37866
37550: LD_INT 20
37552: DOUBLE
37553: EQUAL
37554: IFTRUE 37558
37556: GO 37583
37558: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37559: LD_ADDR_VAR 0 3
37563: PUSH
37564: LD_INT 6
37566: PPUSH
37567: LD_VAR 0 1
37571: PPUSH
37572: CALL_OW 321
37576: PUSH
37577: LD_INT 2
37579: EQUAL
37580: ST_TO_ADDR
37581: GO 37866
37583: LD_INT 22
37585: DOUBLE
37586: EQUAL
37587: IFTRUE 37597
37589: LD_INT 36
37591: DOUBLE
37592: EQUAL
37593: IFTRUE 37597
37595: GO 37622
37597: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37598: LD_ADDR_VAR 0 3
37602: PUSH
37603: LD_INT 15
37605: PPUSH
37606: LD_VAR 0 1
37610: PPUSH
37611: CALL_OW 321
37615: PUSH
37616: LD_INT 2
37618: EQUAL
37619: ST_TO_ADDR
37620: GO 37866
37622: LD_INT 30
37624: DOUBLE
37625: EQUAL
37626: IFTRUE 37630
37628: GO 37655
37630: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37631: LD_ADDR_VAR 0 3
37635: PUSH
37636: LD_INT 20
37638: PPUSH
37639: LD_VAR 0 1
37643: PPUSH
37644: CALL_OW 321
37648: PUSH
37649: LD_INT 2
37651: EQUAL
37652: ST_TO_ADDR
37653: GO 37866
37655: LD_INT 28
37657: DOUBLE
37658: EQUAL
37659: IFTRUE 37669
37661: LD_INT 21
37663: DOUBLE
37664: EQUAL
37665: IFTRUE 37669
37667: GO 37694
37669: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37670: LD_ADDR_VAR 0 3
37674: PUSH
37675: LD_INT 21
37677: PPUSH
37678: LD_VAR 0 1
37682: PPUSH
37683: CALL_OW 321
37687: PUSH
37688: LD_INT 2
37690: EQUAL
37691: ST_TO_ADDR
37692: GO 37866
37694: LD_INT 16
37696: DOUBLE
37697: EQUAL
37698: IFTRUE 37702
37700: GO 37727
37702: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37703: LD_ADDR_VAR 0 3
37707: PUSH
37708: LD_INT 84
37710: PPUSH
37711: LD_VAR 0 1
37715: PPUSH
37716: CALL_OW 321
37720: PUSH
37721: LD_INT 2
37723: EQUAL
37724: ST_TO_ADDR
37725: GO 37866
37727: LD_INT 19
37729: DOUBLE
37730: EQUAL
37731: IFTRUE 37741
37733: LD_INT 23
37735: DOUBLE
37736: EQUAL
37737: IFTRUE 37741
37739: GO 37766
37741: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37742: LD_ADDR_VAR 0 3
37746: PUSH
37747: LD_INT 83
37749: PPUSH
37750: LD_VAR 0 1
37754: PPUSH
37755: CALL_OW 321
37759: PUSH
37760: LD_INT 2
37762: EQUAL
37763: ST_TO_ADDR
37764: GO 37866
37766: LD_INT 17
37768: DOUBLE
37769: EQUAL
37770: IFTRUE 37774
37772: GO 37799
37774: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37775: LD_ADDR_VAR 0 3
37779: PUSH
37780: LD_INT 39
37782: PPUSH
37783: LD_VAR 0 1
37787: PPUSH
37788: CALL_OW 321
37792: PUSH
37793: LD_INT 2
37795: EQUAL
37796: ST_TO_ADDR
37797: GO 37866
37799: LD_INT 18
37801: DOUBLE
37802: EQUAL
37803: IFTRUE 37807
37805: GO 37832
37807: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37808: LD_ADDR_VAR 0 3
37812: PUSH
37813: LD_INT 40
37815: PPUSH
37816: LD_VAR 0 1
37820: PPUSH
37821: CALL_OW 321
37825: PUSH
37826: LD_INT 2
37828: EQUAL
37829: ST_TO_ADDR
37830: GO 37866
37832: LD_INT 27
37834: DOUBLE
37835: EQUAL
37836: IFTRUE 37840
37838: GO 37865
37840: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37841: LD_ADDR_VAR 0 3
37845: PUSH
37846: LD_INT 35
37848: PPUSH
37849: LD_VAR 0 1
37853: PPUSH
37854: CALL_OW 321
37858: PUSH
37859: LD_INT 2
37861: EQUAL
37862: ST_TO_ADDR
37863: GO 37866
37865: POP
// end ;
37866: LD_VAR 0 3
37870: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
37871: LD_INT 0
37873: PPUSH
37874: PPUSH
37875: PPUSH
37876: PPUSH
37877: PPUSH
37878: PPUSH
37879: PPUSH
37880: PPUSH
37881: PPUSH
37882: PPUSH
37883: PPUSH
// result := false ;
37884: LD_ADDR_VAR 0 6
37888: PUSH
37889: LD_INT 0
37891: ST_TO_ADDR
// if btype = b_depot then
37892: LD_VAR 0 2
37896: PUSH
37897: LD_INT 0
37899: EQUAL
37900: IFFALSE 37912
// begin result := true ;
37902: LD_ADDR_VAR 0 6
37906: PUSH
37907: LD_INT 1
37909: ST_TO_ADDR
// exit ;
37910: GO 38766
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37912: LD_VAR 0 1
37916: NOT
37917: IFTRUE 37942
37919: PUSH
37920: LD_VAR 0 1
37924: PPUSH
37925: CALL_OW 266
37929: PUSH
37930: LD_INT 0
37932: PUSH
37933: LD_INT 1
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: IN
37940: NOT
37941: OR
37942: IFTRUE 37951
37944: PUSH
37945: LD_VAR 0 2
37949: NOT
37950: OR
37951: IFTRUE 37987
37953: PUSH
37954: LD_VAR 0 5
37958: PUSH
37959: LD_INT 0
37961: PUSH
37962: LD_INT 1
37964: PUSH
37965: LD_INT 2
37967: PUSH
37968: LD_INT 3
37970: PUSH
37971: LD_INT 4
37973: PUSH
37974: LD_INT 5
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: LIST
37981: LIST
37982: LIST
37983: LIST
37984: IN
37985: NOT
37986: OR
37987: IFTRUE 38006
37989: PUSH
37990: LD_VAR 0 3
37994: PPUSH
37995: LD_VAR 0 4
37999: PPUSH
38000: CALL_OW 488
38004: NOT
38005: OR
38006: IFFALSE 38010
// exit ;
38008: GO 38766
// side := GetSide ( depot ) ;
38010: LD_ADDR_VAR 0 9
38014: PUSH
38015: LD_VAR 0 1
38019: PPUSH
38020: CALL_OW 255
38024: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38025: LD_VAR 0 9
38029: PPUSH
38030: LD_VAR 0 2
38034: PPUSH
38035: CALL 37495 0 2
38039: NOT
38040: IFFALSE 38044
// exit ;
38042: GO 38766
// pom := GetBase ( depot ) ;
38044: LD_ADDR_VAR 0 10
38048: PUSH
38049: LD_VAR 0 1
38053: PPUSH
38054: CALL_OW 274
38058: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38059: LD_ADDR_VAR 0 11
38063: PUSH
38064: LD_VAR 0 2
38068: PPUSH
38069: LD_VAR 0 1
38073: PPUSH
38074: CALL_OW 248
38078: PPUSH
38079: CALL_OW 450
38083: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38084: LD_VAR 0 10
38088: PPUSH
38089: LD_INT 1
38091: PPUSH
38092: CALL_OW 275
38096: PUSH
38097: LD_VAR 0 11
38101: PUSH
38102: LD_INT 1
38104: ARRAY
38105: GREATEREQUAL
38106: IFFALSE 38132
38108: PUSH
38109: LD_VAR 0 10
38113: PPUSH
38114: LD_INT 2
38116: PPUSH
38117: CALL_OW 275
38121: PUSH
38122: LD_VAR 0 11
38126: PUSH
38127: LD_INT 2
38129: ARRAY
38130: GREATEREQUAL
38131: AND
38132: IFFALSE 38158
38134: PUSH
38135: LD_VAR 0 10
38139: PPUSH
38140: LD_INT 3
38142: PPUSH
38143: CALL_OW 275
38147: PUSH
38148: LD_VAR 0 11
38152: PUSH
38153: LD_INT 3
38155: ARRAY
38156: GREATEREQUAL
38157: AND
38158: NOT
38159: IFFALSE 38163
// exit ;
38161: GO 38766
// if GetBType ( depot ) = b_depot then
38163: LD_VAR 0 1
38167: PPUSH
38168: CALL_OW 266
38172: PUSH
38173: LD_INT 0
38175: EQUAL
38176: IFFALSE 38188
// dist := 28 else
38178: LD_ADDR_VAR 0 14
38182: PUSH
38183: LD_INT 28
38185: ST_TO_ADDR
38186: GO 38196
// dist := 36 ;
38188: LD_ADDR_VAR 0 14
38192: PUSH
38193: LD_INT 36
38195: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38196: LD_VAR 0 1
38200: PPUSH
38201: LD_VAR 0 3
38205: PPUSH
38206: LD_VAR 0 4
38210: PPUSH
38211: CALL_OW 297
38215: PUSH
38216: LD_VAR 0 14
38220: GREATER
38221: IFFALSE 38225
// exit ;
38223: GO 38766
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38225: LD_ADDR_VAR 0 12
38229: PUSH
38230: LD_VAR 0 2
38234: PPUSH
38235: LD_VAR 0 3
38239: PPUSH
38240: LD_VAR 0 4
38244: PPUSH
38245: LD_VAR 0 5
38249: PPUSH
38250: LD_VAR 0 1
38254: PPUSH
38255: CALL_OW 248
38259: PPUSH
38260: LD_INT 0
38262: PPUSH
38263: CALL 38771 0 6
38267: ST_TO_ADDR
// if not hexes then
38268: LD_VAR 0 12
38272: NOT
38273: IFFALSE 38277
// exit ;
38275: GO 38766
// hex := GetHexInfo ( x , y ) ;
38277: LD_ADDR_VAR 0 15
38281: PUSH
38282: LD_VAR 0 3
38286: PPUSH
38287: LD_VAR 0 4
38291: PPUSH
38292: CALL_OW 546
38296: ST_TO_ADDR
// if hex [ 1 ] then
38297: LD_VAR 0 15
38301: PUSH
38302: LD_INT 1
38304: ARRAY
38305: IFFALSE 38309
// exit ;
38307: GO 38766
// height := hex [ 2 ] ;
38309: LD_ADDR_VAR 0 13
38313: PUSH
38314: LD_VAR 0 15
38318: PUSH
38319: LD_INT 2
38321: ARRAY
38322: ST_TO_ADDR
// for i = 1 to hexes do
38323: LD_ADDR_VAR 0 7
38327: PUSH
38328: DOUBLE
38329: LD_INT 1
38331: DEC
38332: ST_TO_ADDR
38333: LD_VAR 0 12
38337: PUSH
38338: FOR_TO
38339: IFFALSE 38683
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38341: LD_VAR 0 12
38345: PUSH
38346: LD_VAR 0 7
38350: ARRAY
38351: PUSH
38352: LD_INT 1
38354: ARRAY
38355: PPUSH
38356: LD_VAR 0 12
38360: PUSH
38361: LD_VAR 0 7
38365: ARRAY
38366: PUSH
38367: LD_INT 2
38369: ARRAY
38370: PPUSH
38371: CALL_OW 488
38375: NOT
38376: IFTRUE 38418
38378: PUSH
38379: LD_VAR 0 12
38383: PUSH
38384: LD_VAR 0 7
38388: ARRAY
38389: PUSH
38390: LD_INT 1
38392: ARRAY
38393: PPUSH
38394: LD_VAR 0 12
38398: PUSH
38399: LD_VAR 0 7
38403: ARRAY
38404: PUSH
38405: LD_INT 2
38407: ARRAY
38408: PPUSH
38409: CALL_OW 428
38413: PUSH
38414: LD_INT 0
38416: GREATER
38417: OR
38418: IFTRUE 38456
38420: PUSH
38421: LD_VAR 0 12
38425: PUSH
38426: LD_VAR 0 7
38430: ARRAY
38431: PUSH
38432: LD_INT 1
38434: ARRAY
38435: PPUSH
38436: LD_VAR 0 12
38440: PUSH
38441: LD_VAR 0 7
38445: ARRAY
38446: PUSH
38447: LD_INT 2
38449: ARRAY
38450: PPUSH
38451: CALL_OW 351
38455: OR
38456: IFFALSE 38462
// exit ;
38458: POP
38459: POP
38460: GO 38766
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38462: LD_ADDR_VAR 0 8
38466: PUSH
38467: LD_VAR 0 12
38471: PUSH
38472: LD_VAR 0 7
38476: ARRAY
38477: PUSH
38478: LD_INT 1
38480: ARRAY
38481: PPUSH
38482: LD_VAR 0 12
38486: PUSH
38487: LD_VAR 0 7
38491: ARRAY
38492: PUSH
38493: LD_INT 2
38495: ARRAY
38496: PPUSH
38497: CALL_OW 546
38501: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38502: LD_VAR 0 8
38506: PUSH
38507: LD_INT 1
38509: ARRAY
38510: IFTRUE 38532
38512: PUSH
38513: LD_VAR 0 8
38517: PUSH
38518: LD_INT 2
38520: ARRAY
38521: PUSH
38522: LD_VAR 0 13
38526: PUSH
38527: LD_INT 2
38529: PLUS
38530: GREATER
38531: OR
38532: IFTRUE 38554
38534: PUSH
38535: LD_VAR 0 8
38539: PUSH
38540: LD_INT 2
38542: ARRAY
38543: PUSH
38544: LD_VAR 0 13
38548: PUSH
38549: LD_INT 2
38551: MINUS
38552: LESS
38553: OR
38554: IFTRUE 38622
38556: PUSH
38557: LD_VAR 0 8
38561: PUSH
38562: LD_INT 3
38564: ARRAY
38565: PUSH
38566: LD_INT 0
38568: PUSH
38569: LD_INT 8
38571: PUSH
38572: LD_INT 9
38574: PUSH
38575: LD_INT 10
38577: PUSH
38578: LD_INT 11
38580: PUSH
38581: LD_INT 12
38583: PUSH
38584: LD_INT 13
38586: PUSH
38587: LD_INT 16
38589: PUSH
38590: LD_INT 17
38592: PUSH
38593: LD_INT 18
38595: PUSH
38596: LD_INT 19
38598: PUSH
38599: LD_INT 20
38601: PUSH
38602: LD_INT 21
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: IN
38620: NOT
38621: OR
38622: IFTRUE 38635
38624: PUSH
38625: LD_VAR 0 8
38629: PUSH
38630: LD_INT 5
38632: ARRAY
38633: NOT
38634: OR
38635: IFTRUE 38675
38637: PUSH
38638: LD_VAR 0 8
38642: PUSH
38643: LD_INT 6
38645: ARRAY
38646: PUSH
38647: LD_INT 1
38649: PUSH
38650: LD_INT 2
38652: PUSH
38653: LD_INT 7
38655: PUSH
38656: LD_INT 9
38658: PUSH
38659: LD_INT 10
38661: PUSH
38662: LD_INT 11
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: IN
38673: NOT
38674: OR
38675: IFFALSE 38681
// exit ;
38677: POP
38678: POP
38679: GO 38766
// end ;
38681: GO 38338
38683: POP
38684: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38685: LD_VAR 0 9
38689: PPUSH
38690: LD_VAR 0 3
38694: PPUSH
38695: LD_VAR 0 4
38699: PPUSH
38700: LD_INT 20
38702: PPUSH
38703: CALL 30585 0 4
38707: PUSH
38708: LD_INT 4
38710: ARRAY
38711: IFFALSE 38715
// exit ;
38713: GO 38766
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38715: LD_VAR 0 2
38719: PUSH
38720: LD_INT 29
38722: PUSH
38723: LD_INT 30
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: IN
38730: IFFALSE 38754
38732: PUSH
38733: LD_VAR 0 3
38737: PPUSH
38738: LD_VAR 0 4
38742: PPUSH
38743: LD_VAR 0 9
38747: PPUSH
38748: CALL_OW 440
38752: NOT
38753: AND
38754: IFFALSE 38758
// exit ;
38756: GO 38766
// result := true ;
38758: LD_ADDR_VAR 0 6
38762: PUSH
38763: LD_INT 1
38765: ST_TO_ADDR
// end ;
38766: LD_VAR 0 6
38770: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38771: LD_INT 0
38773: PPUSH
38774: PPUSH
38775: PPUSH
38776: PPUSH
38777: PPUSH
38778: PPUSH
38779: PPUSH
38780: PPUSH
38781: PPUSH
38782: PPUSH
38783: PPUSH
38784: PPUSH
38785: PPUSH
38786: PPUSH
38787: PPUSH
38788: PPUSH
38789: PPUSH
38790: PPUSH
38791: PPUSH
38792: PPUSH
38793: PPUSH
38794: PPUSH
38795: PPUSH
38796: PPUSH
38797: PPUSH
38798: PPUSH
38799: PPUSH
38800: PPUSH
38801: PPUSH
38802: PPUSH
38803: PPUSH
38804: PPUSH
38805: PPUSH
38806: PPUSH
38807: PPUSH
38808: PPUSH
38809: PPUSH
38810: PPUSH
38811: PPUSH
38812: PPUSH
38813: PPUSH
38814: PPUSH
38815: PPUSH
38816: PPUSH
38817: PPUSH
38818: PPUSH
38819: PPUSH
38820: PPUSH
38821: PPUSH
38822: PPUSH
38823: PPUSH
38824: PPUSH
38825: PPUSH
38826: PPUSH
38827: PPUSH
38828: PPUSH
38829: PPUSH
38830: PPUSH
// result = [ ] ;
38831: LD_ADDR_VAR 0 7
38835: PUSH
38836: EMPTY
38837: ST_TO_ADDR
// temp_list = [ ] ;
38838: LD_ADDR_VAR 0 9
38842: PUSH
38843: EMPTY
38844: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38845: LD_VAR 0 4
38849: PUSH
38850: LD_INT 0
38852: PUSH
38853: LD_INT 1
38855: PUSH
38856: LD_INT 2
38858: PUSH
38859: LD_INT 3
38861: PUSH
38862: LD_INT 4
38864: PUSH
38865: LD_INT 5
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: IN
38876: NOT
38877: IFTRUE 38920
38879: PUSH
38880: LD_VAR 0 1
38884: PUSH
38885: LD_INT 0
38887: PUSH
38888: LD_INT 1
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: IN
38895: IFFALSE 38919
38897: PUSH
38898: LD_VAR 0 5
38902: PUSH
38903: LD_INT 1
38905: PUSH
38906: LD_INT 2
38908: PUSH
38909: LD_INT 3
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: LIST
38916: IN
38917: NOT
38918: AND
38919: OR
38920: IFFALSE 38924
// exit ;
38922: GO 57323
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38924: LD_VAR 0 1
38928: PUSH
38929: LD_INT 6
38931: PUSH
38932: LD_INT 7
38934: PUSH
38935: LD_INT 8
38937: PUSH
38938: LD_INT 13
38940: PUSH
38941: LD_INT 12
38943: PUSH
38944: LD_INT 15
38946: PUSH
38947: LD_INT 11
38949: PUSH
38950: LD_INT 14
38952: PUSH
38953: LD_INT 10
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: IN
38967: IFFALSE 38977
// btype = b_lab ;
38969: LD_ADDR_VAR 0 1
38973: PUSH
38974: LD_INT 6
38976: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38977: LD_VAR 0 6
38981: PUSH
38982: LD_INT 0
38984: PUSH
38985: LD_INT 1
38987: PUSH
38988: LD_INT 2
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: LIST
38995: IN
38996: NOT
38997: IFTRUE 39065
38999: PUSH
39000: LD_VAR 0 1
39004: PUSH
39005: LD_INT 0
39007: PUSH
39008: LD_INT 1
39010: PUSH
39011: LD_INT 2
39013: PUSH
39014: LD_INT 3
39016: PUSH
39017: LD_INT 6
39019: PUSH
39020: LD_INT 36
39022: PUSH
39023: LD_INT 4
39025: PUSH
39026: LD_INT 5
39028: PUSH
39029: LD_INT 31
39031: PUSH
39032: LD_INT 32
39034: PUSH
39035: LD_INT 33
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: IN
39051: NOT
39052: IFFALSE 39064
39054: PUSH
39055: LD_VAR 0 6
39059: PUSH
39060: LD_INT 1
39062: EQUAL
39063: AND
39064: OR
39065: IFTRUE 39097
39067: PUSH
39068: LD_VAR 0 1
39072: PUSH
39073: LD_INT 2
39075: PUSH
39076: LD_INT 3
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: IN
39083: NOT
39084: IFFALSE 39096
39086: PUSH
39087: LD_VAR 0 6
39091: PUSH
39092: LD_INT 2
39094: EQUAL
39095: AND
39096: OR
39097: IFFALSE 39107
// mode = 0 ;
39099: LD_ADDR_VAR 0 6
39103: PUSH
39104: LD_INT 0
39106: ST_TO_ADDR
// case mode of 0 :
39107: LD_VAR 0 6
39111: PUSH
39112: LD_INT 0
39114: DOUBLE
39115: EQUAL
39116: IFTRUE 39120
39118: GO 50573
39120: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39121: LD_ADDR_VAR 0 11
39125: PUSH
39126: LD_INT 0
39128: PUSH
39129: LD_INT 0
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 0
39138: PUSH
39139: LD_INT 1
39141: NEG
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 1
39149: PUSH
39150: LD_INT 0
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 1
39159: PUSH
39160: LD_INT 1
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 0
39169: PUSH
39170: LD_INT 1
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 1
39179: NEG
39180: PUSH
39181: LD_INT 0
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: LD_INT 1
39190: NEG
39191: PUSH
39192: LD_INT 1
39194: NEG
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 1
39202: NEG
39203: PUSH
39204: LD_INT 2
39206: NEG
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 0
39214: PUSH
39215: LD_INT 2
39217: NEG
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: LD_INT 1
39225: PUSH
39226: LD_INT 1
39228: NEG
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 1
39236: PUSH
39237: LD_INT 2
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 0
39246: PUSH
39247: LD_INT 2
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 1
39256: NEG
39257: PUSH
39258: LD_INT 1
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 1
39267: PUSH
39268: LD_INT 3
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 0
39277: PUSH
39278: LD_INT 3
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 1
39287: NEG
39288: PUSH
39289: LD_INT 2
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39314: LD_ADDR_VAR 0 12
39318: PUSH
39319: LD_INT 0
39321: PUSH
39322: LD_INT 0
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 0
39331: PUSH
39332: LD_INT 1
39334: NEG
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 1
39342: PUSH
39343: LD_INT 0
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 1
39352: PUSH
39353: LD_INT 1
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 0
39362: PUSH
39363: LD_INT 1
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 1
39372: NEG
39373: PUSH
39374: LD_INT 0
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: LD_INT 1
39383: NEG
39384: PUSH
39385: LD_INT 1
39387: NEG
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: LD_INT 1
39395: PUSH
39396: LD_INT 1
39398: NEG
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: LD_INT 2
39406: PUSH
39407: LD_INT 0
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 2
39416: PUSH
39417: LD_INT 1
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 1
39426: NEG
39427: PUSH
39428: LD_INT 1
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PUSH
39435: LD_INT 2
39437: NEG
39438: PUSH
39439: LD_INT 0
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: LD_INT 2
39448: NEG
39449: PUSH
39450: LD_INT 1
39452: NEG
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 2
39460: NEG
39461: PUSH
39462: LD_INT 1
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 3
39471: NEG
39472: PUSH
39473: LD_INT 0
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 3
39482: NEG
39483: PUSH
39484: LD_INT 1
39486: NEG
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39510: LD_ADDR_VAR 0 13
39514: PUSH
39515: LD_INT 0
39517: PUSH
39518: LD_INT 0
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 0
39527: PUSH
39528: LD_INT 1
39530: NEG
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 1
39538: PUSH
39539: LD_INT 0
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 1
39548: PUSH
39549: LD_INT 1
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: LD_INT 0
39558: PUSH
39559: LD_INT 1
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 1
39568: NEG
39569: PUSH
39570: LD_INT 0
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 1
39579: NEG
39580: PUSH
39581: LD_INT 1
39583: NEG
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 1
39591: NEG
39592: PUSH
39593: LD_INT 2
39595: NEG
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 2
39603: PUSH
39604: LD_INT 1
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 2
39613: PUSH
39614: LD_INT 2
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 1
39623: PUSH
39624: LD_INT 2
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_INT 2
39633: NEG
39634: PUSH
39635: LD_INT 1
39637: NEG
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 2
39645: NEG
39646: PUSH
39647: LD_INT 2
39649: NEG
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 2
39657: NEG
39658: PUSH
39659: LD_INT 3
39661: NEG
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 3
39669: NEG
39670: PUSH
39671: LD_INT 2
39673: NEG
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 3
39681: NEG
39682: PUSH
39683: LD_INT 3
39685: NEG
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39709: LD_ADDR_VAR 0 14
39713: PUSH
39714: LD_INT 0
39716: PUSH
39717: LD_INT 0
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 0
39726: PUSH
39727: LD_INT 1
39729: NEG
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 1
39737: PUSH
39738: LD_INT 0
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 1
39747: PUSH
39748: LD_INT 1
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 0
39757: PUSH
39758: LD_INT 1
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 1
39767: NEG
39768: PUSH
39769: LD_INT 0
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 1
39778: NEG
39779: PUSH
39780: LD_INT 1
39782: NEG
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 1
39790: NEG
39791: PUSH
39792: LD_INT 2
39794: NEG
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 0
39802: PUSH
39803: LD_INT 2
39805: NEG
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 1
39813: PUSH
39814: LD_INT 1
39816: NEG
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 1
39824: PUSH
39825: LD_INT 2
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 0
39834: PUSH
39835: LD_INT 2
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 1
39844: NEG
39845: PUSH
39846: LD_INT 1
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 1
39855: NEG
39856: PUSH
39857: LD_INT 3
39859: NEG
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 0
39867: PUSH
39868: LD_INT 3
39870: NEG
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 1
39878: PUSH
39879: LD_INT 2
39881: NEG
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39905: LD_ADDR_VAR 0 15
39909: PUSH
39910: LD_INT 0
39912: PUSH
39913: LD_INT 0
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 0
39922: PUSH
39923: LD_INT 1
39925: NEG
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 1
39933: PUSH
39934: LD_INT 0
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 1
39943: PUSH
39944: LD_INT 1
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 0
39953: PUSH
39954: LD_INT 1
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 1
39963: NEG
39964: PUSH
39965: LD_INT 0
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: LD_INT 1
39974: NEG
39975: PUSH
39976: LD_INT 1
39978: NEG
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 1
39986: PUSH
39987: LD_INT 1
39989: NEG
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 2
39997: PUSH
39998: LD_INT 0
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 2
40007: PUSH
40008: LD_INT 1
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 1
40017: NEG
40018: PUSH
40019: LD_INT 1
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: LD_INT 2
40028: NEG
40029: PUSH
40030: LD_INT 0
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 2
40039: NEG
40040: PUSH
40041: LD_INT 1
40043: NEG
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 2
40051: PUSH
40052: LD_INT 1
40054: NEG
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 3
40062: PUSH
40063: LD_INT 0
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 3
40072: PUSH
40073: LD_INT 1
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40098: LD_ADDR_VAR 0 16
40102: PUSH
40103: LD_INT 0
40105: PUSH
40106: LD_INT 0
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: PUSH
40113: LD_INT 0
40115: PUSH
40116: LD_INT 1
40118: NEG
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 1
40126: PUSH
40127: LD_INT 0
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 1
40136: PUSH
40137: LD_INT 1
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: LD_INT 0
40146: PUSH
40147: LD_INT 1
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 1
40156: NEG
40157: PUSH
40158: LD_INT 0
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 1
40167: NEG
40168: PUSH
40169: LD_INT 1
40171: NEG
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 1
40179: NEG
40180: PUSH
40181: LD_INT 2
40183: NEG
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 2
40191: PUSH
40192: LD_INT 1
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 2
40201: PUSH
40202: LD_INT 2
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 1
40211: PUSH
40212: LD_INT 2
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 2
40221: NEG
40222: PUSH
40223: LD_INT 1
40225: NEG
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 2
40233: NEG
40234: PUSH
40235: LD_INT 2
40237: NEG
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 3
40245: PUSH
40246: LD_INT 2
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 3
40255: PUSH
40256: LD_INT 3
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 2
40265: PUSH
40266: LD_INT 3
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40291: LD_ADDR_VAR 0 17
40295: PUSH
40296: LD_INT 0
40298: PUSH
40299: LD_INT 0
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 0
40308: PUSH
40309: LD_INT 1
40311: NEG
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 1
40319: PUSH
40320: LD_INT 0
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 1
40329: PUSH
40330: LD_INT 1
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 0
40339: PUSH
40340: LD_INT 1
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 1
40349: NEG
40350: PUSH
40351: LD_INT 0
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 1
40360: NEG
40361: PUSH
40362: LD_INT 1
40364: NEG
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 1
40372: NEG
40373: PUSH
40374: LD_INT 2
40376: NEG
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: LD_INT 0
40384: PUSH
40385: LD_INT 2
40387: NEG
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 1
40395: PUSH
40396: LD_INT 1
40398: NEG
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 2
40406: PUSH
40407: LD_INT 0
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 2
40416: PUSH
40417: LD_INT 1
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 2
40426: PUSH
40427: LD_INT 2
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 1
40436: PUSH
40437: LD_INT 2
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 0
40446: PUSH
40447: LD_INT 2
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 1
40456: NEG
40457: PUSH
40458: LD_INT 1
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 2
40467: NEG
40468: PUSH
40469: LD_INT 0
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 2
40478: NEG
40479: PUSH
40480: LD_INT 1
40482: NEG
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 2
40490: NEG
40491: PUSH
40492: LD_INT 2
40494: NEG
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40521: LD_ADDR_VAR 0 18
40525: PUSH
40526: LD_INT 0
40528: PUSH
40529: LD_INT 0
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 0
40538: PUSH
40539: LD_INT 1
40541: NEG
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 1
40549: PUSH
40550: LD_INT 0
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 1
40559: PUSH
40560: LD_INT 1
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: LD_INT 0
40569: PUSH
40570: LD_INT 1
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 1
40579: NEG
40580: PUSH
40581: LD_INT 0
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 1
40590: NEG
40591: PUSH
40592: LD_INT 1
40594: NEG
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 1
40602: NEG
40603: PUSH
40604: LD_INT 2
40606: NEG
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: LD_INT 0
40614: PUSH
40615: LD_INT 2
40617: NEG
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 1
40625: PUSH
40626: LD_INT 1
40628: NEG
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 2
40636: PUSH
40637: LD_INT 0
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 2
40646: PUSH
40647: LD_INT 1
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 2
40656: PUSH
40657: LD_INT 2
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 1
40666: PUSH
40667: LD_INT 2
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 0
40676: PUSH
40677: LD_INT 2
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 1
40686: NEG
40687: PUSH
40688: LD_INT 1
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PUSH
40695: LD_INT 2
40697: NEG
40698: PUSH
40699: LD_INT 0
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 2
40708: NEG
40709: PUSH
40710: LD_INT 1
40712: NEG
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 2
40720: NEG
40721: PUSH
40722: LD_INT 2
40724: NEG
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40751: LD_ADDR_VAR 0 19
40755: PUSH
40756: LD_INT 0
40758: PUSH
40759: LD_INT 0
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 0
40768: PUSH
40769: LD_INT 1
40771: NEG
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 1
40779: PUSH
40780: LD_INT 0
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 1
40789: PUSH
40790: LD_INT 1
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 0
40799: PUSH
40800: LD_INT 1
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 1
40809: NEG
40810: PUSH
40811: LD_INT 0
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 1
40820: NEG
40821: PUSH
40822: LD_INT 1
40824: NEG
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 1
40832: NEG
40833: PUSH
40834: LD_INT 2
40836: NEG
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 0
40844: PUSH
40845: LD_INT 2
40847: NEG
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: PUSH
40853: LD_INT 1
40855: PUSH
40856: LD_INT 1
40858: NEG
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 2
40866: PUSH
40867: LD_INT 0
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 2
40876: PUSH
40877: LD_INT 1
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 2
40886: PUSH
40887: LD_INT 2
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 1
40896: PUSH
40897: LD_INT 2
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 0
40906: PUSH
40907: LD_INT 2
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 1
40916: NEG
40917: PUSH
40918: LD_INT 1
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 2
40927: NEG
40928: PUSH
40929: LD_INT 0
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 2
40938: NEG
40939: PUSH
40940: LD_INT 1
40942: NEG
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 2
40950: NEG
40951: PUSH
40952: LD_INT 2
40954: NEG
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40981: LD_ADDR_VAR 0 20
40985: PUSH
40986: LD_INT 0
40988: PUSH
40989: LD_INT 0
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 0
40998: PUSH
40999: LD_INT 1
41001: NEG
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 1
41009: PUSH
41010: LD_INT 0
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 1
41019: PUSH
41020: LD_INT 1
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 0
41029: PUSH
41030: LD_INT 1
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: LD_INT 1
41039: NEG
41040: PUSH
41041: LD_INT 0
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 1
41050: NEG
41051: PUSH
41052: LD_INT 1
41054: NEG
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 1
41062: NEG
41063: PUSH
41064: LD_INT 2
41066: NEG
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 0
41074: PUSH
41075: LD_INT 2
41077: NEG
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 1
41085: PUSH
41086: LD_INT 1
41088: NEG
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 2
41096: PUSH
41097: LD_INT 0
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 2
41106: PUSH
41107: LD_INT 1
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 2
41116: PUSH
41117: LD_INT 2
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 1
41126: PUSH
41127: LD_INT 2
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 0
41136: PUSH
41137: LD_INT 2
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 1
41146: NEG
41147: PUSH
41148: LD_INT 1
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 2
41157: NEG
41158: PUSH
41159: LD_INT 0
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 2
41168: NEG
41169: PUSH
41170: LD_INT 1
41172: NEG
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: PUSH
41178: LD_INT 2
41180: NEG
41181: PUSH
41182: LD_INT 2
41184: NEG
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41211: LD_ADDR_VAR 0 21
41215: PUSH
41216: LD_INT 0
41218: PUSH
41219: LD_INT 0
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 0
41228: PUSH
41229: LD_INT 1
41231: NEG
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 1
41239: PUSH
41240: LD_INT 0
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 1
41249: PUSH
41250: LD_INT 1
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 0
41259: PUSH
41260: LD_INT 1
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 1
41269: NEG
41270: PUSH
41271: LD_INT 0
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 1
41280: NEG
41281: PUSH
41282: LD_INT 1
41284: NEG
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 1
41292: NEG
41293: PUSH
41294: LD_INT 2
41296: NEG
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 0
41304: PUSH
41305: LD_INT 2
41307: NEG
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 1
41315: PUSH
41316: LD_INT 1
41318: NEG
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 2
41326: PUSH
41327: LD_INT 0
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 2
41336: PUSH
41337: LD_INT 1
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 2
41346: PUSH
41347: LD_INT 2
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 1
41356: PUSH
41357: LD_INT 2
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 0
41366: PUSH
41367: LD_INT 2
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 1
41376: NEG
41377: PUSH
41378: LD_INT 1
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 2
41387: NEG
41388: PUSH
41389: LD_INT 0
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 2
41398: NEG
41399: PUSH
41400: LD_INT 1
41402: NEG
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 2
41410: NEG
41411: PUSH
41412: LD_INT 2
41414: NEG
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41441: LD_ADDR_VAR 0 22
41445: PUSH
41446: LD_INT 0
41448: PUSH
41449: LD_INT 0
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 0
41458: PUSH
41459: LD_INT 1
41461: NEG
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 1
41469: PUSH
41470: LD_INT 0
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 1
41479: PUSH
41480: LD_INT 1
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: LD_INT 0
41489: PUSH
41490: LD_INT 1
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 1
41499: NEG
41500: PUSH
41501: LD_INT 0
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 1
41510: NEG
41511: PUSH
41512: LD_INT 1
41514: NEG
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 1
41522: NEG
41523: PUSH
41524: LD_INT 2
41526: NEG
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 0
41534: PUSH
41535: LD_INT 2
41537: NEG
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 1
41545: PUSH
41546: LD_INT 1
41548: NEG
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 2
41556: PUSH
41557: LD_INT 0
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 2
41566: PUSH
41567: LD_INT 1
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 2
41576: PUSH
41577: LD_INT 2
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 1
41586: PUSH
41587: LD_INT 2
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 0
41596: PUSH
41597: LD_INT 2
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 1
41606: NEG
41607: PUSH
41608: LD_INT 1
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 2
41617: NEG
41618: PUSH
41619: LD_INT 0
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 2
41628: NEG
41629: PUSH
41630: LD_INT 1
41632: NEG
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: LD_INT 2
41640: NEG
41641: PUSH
41642: LD_INT 2
41644: NEG
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41671: LD_ADDR_VAR 0 23
41675: PUSH
41676: LD_INT 0
41678: PUSH
41679: LD_INT 0
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: LD_INT 0
41688: PUSH
41689: LD_INT 1
41691: NEG
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 1
41699: PUSH
41700: LD_INT 0
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 1
41709: PUSH
41710: LD_INT 1
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 0
41719: PUSH
41720: LD_INT 1
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 1
41729: NEG
41730: PUSH
41731: LD_INT 0
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 1
41740: NEG
41741: PUSH
41742: LD_INT 1
41744: NEG
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 1
41752: NEG
41753: PUSH
41754: LD_INT 2
41756: NEG
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 0
41764: PUSH
41765: LD_INT 2
41767: NEG
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 1
41775: PUSH
41776: LD_INT 1
41778: NEG
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 2
41786: PUSH
41787: LD_INT 0
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 2
41796: PUSH
41797: LD_INT 1
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 2
41806: PUSH
41807: LD_INT 2
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 1
41816: PUSH
41817: LD_INT 2
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 0
41826: PUSH
41827: LD_INT 2
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 1
41836: NEG
41837: PUSH
41838: LD_INT 1
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 2
41847: NEG
41848: PUSH
41849: LD_INT 0
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 2
41858: NEG
41859: PUSH
41860: LD_INT 1
41862: NEG
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 2
41870: NEG
41871: PUSH
41872: LD_INT 2
41874: NEG
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 2
41882: NEG
41883: PUSH
41884: LD_INT 3
41886: NEG
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 1
41894: NEG
41895: PUSH
41896: LD_INT 3
41898: NEG
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 1
41906: PUSH
41907: LD_INT 2
41909: NEG
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 2
41917: PUSH
41918: LD_INT 1
41920: NEG
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41951: LD_ADDR_VAR 0 24
41955: PUSH
41956: LD_INT 0
41958: PUSH
41959: LD_INT 0
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 0
41968: PUSH
41969: LD_INT 1
41971: NEG
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 1
41979: PUSH
41980: LD_INT 0
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 1
41989: PUSH
41990: LD_INT 1
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 0
41999: PUSH
42000: LD_INT 1
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 1
42009: NEG
42010: PUSH
42011: LD_INT 0
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 1
42020: NEG
42021: PUSH
42022: LD_INT 1
42024: NEG
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 1
42032: NEG
42033: PUSH
42034: LD_INT 2
42036: NEG
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 0
42044: PUSH
42045: LD_INT 2
42047: NEG
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 1
42055: PUSH
42056: LD_INT 1
42058: NEG
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 2
42066: PUSH
42067: LD_INT 0
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 2
42076: PUSH
42077: LD_INT 1
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 2
42086: PUSH
42087: LD_INT 2
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 1
42096: PUSH
42097: LD_INT 2
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 0
42106: PUSH
42107: LD_INT 2
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 1
42116: NEG
42117: PUSH
42118: LD_INT 1
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 2
42127: NEG
42128: PUSH
42129: LD_INT 0
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 2
42138: NEG
42139: PUSH
42140: LD_INT 1
42142: NEG
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 2
42150: NEG
42151: PUSH
42152: LD_INT 2
42154: NEG
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 1
42162: PUSH
42163: LD_INT 2
42165: NEG
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 2
42173: PUSH
42174: LD_INT 1
42176: NEG
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 3
42184: PUSH
42185: LD_INT 1
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 3
42194: PUSH
42195: LD_INT 2
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42227: LD_ADDR_VAR 0 25
42231: PUSH
42232: LD_INT 0
42234: PUSH
42235: LD_INT 0
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 0
42244: PUSH
42245: LD_INT 1
42247: NEG
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 1
42255: PUSH
42256: LD_INT 0
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 1
42265: PUSH
42266: LD_INT 1
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 0
42275: PUSH
42276: LD_INT 1
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 1
42285: NEG
42286: PUSH
42287: LD_INT 0
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 1
42296: NEG
42297: PUSH
42298: LD_INT 1
42300: NEG
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 1
42308: NEG
42309: PUSH
42310: LD_INT 2
42312: NEG
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: LD_INT 0
42320: PUSH
42321: LD_INT 2
42323: NEG
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 1
42331: PUSH
42332: LD_INT 1
42334: NEG
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 2
42342: PUSH
42343: LD_INT 0
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 2
42352: PUSH
42353: LD_INT 1
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 2
42362: PUSH
42363: LD_INT 2
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 1
42372: PUSH
42373: LD_INT 2
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 0
42382: PUSH
42383: LD_INT 2
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 1
42392: NEG
42393: PUSH
42394: LD_INT 1
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 2
42403: NEG
42404: PUSH
42405: LD_INT 0
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 2
42414: NEG
42415: PUSH
42416: LD_INT 1
42418: NEG
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 2
42426: NEG
42427: PUSH
42428: LD_INT 2
42430: NEG
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 3
42438: PUSH
42439: LD_INT 1
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 3
42448: PUSH
42449: LD_INT 2
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 2
42458: PUSH
42459: LD_INT 3
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 1
42468: PUSH
42469: LD_INT 3
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42501: LD_ADDR_VAR 0 26
42505: PUSH
42506: LD_INT 0
42508: PUSH
42509: LD_INT 0
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 0
42518: PUSH
42519: LD_INT 1
42521: NEG
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 1
42529: PUSH
42530: LD_INT 0
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 1
42539: PUSH
42540: LD_INT 1
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 0
42549: PUSH
42550: LD_INT 1
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 1
42559: NEG
42560: PUSH
42561: LD_INT 0
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 1
42570: NEG
42571: PUSH
42572: LD_INT 1
42574: NEG
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 1
42582: NEG
42583: PUSH
42584: LD_INT 2
42586: NEG
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 0
42594: PUSH
42595: LD_INT 2
42597: NEG
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 1
42605: PUSH
42606: LD_INT 1
42608: NEG
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 2
42616: PUSH
42617: LD_INT 0
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 2
42626: PUSH
42627: LD_INT 1
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 2
42636: PUSH
42637: LD_INT 2
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 1
42646: PUSH
42647: LD_INT 2
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: LD_INT 2
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 1
42666: NEG
42667: PUSH
42668: LD_INT 1
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 2
42677: NEG
42678: PUSH
42679: LD_INT 0
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 2
42688: NEG
42689: PUSH
42690: LD_INT 1
42692: NEG
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 2
42700: NEG
42701: PUSH
42702: LD_INT 2
42704: NEG
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 2
42712: PUSH
42713: LD_INT 3
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 1
42722: PUSH
42723: LD_INT 3
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 1
42732: NEG
42733: PUSH
42734: LD_INT 2
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 2
42743: NEG
42744: PUSH
42745: LD_INT 1
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42777: LD_ADDR_VAR 0 27
42781: PUSH
42782: LD_INT 0
42784: PUSH
42785: LD_INT 0
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 0
42794: PUSH
42795: LD_INT 1
42797: NEG
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 1
42805: PUSH
42806: LD_INT 0
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 1
42815: PUSH
42816: LD_INT 1
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 0
42825: PUSH
42826: LD_INT 1
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 1
42835: NEG
42836: PUSH
42837: LD_INT 0
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 1
42846: NEG
42847: PUSH
42848: LD_INT 1
42850: NEG
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 1
42858: NEG
42859: PUSH
42860: LD_INT 2
42862: NEG
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 0
42870: PUSH
42871: LD_INT 2
42873: NEG
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 1
42881: PUSH
42882: LD_INT 1
42884: NEG
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 2
42892: PUSH
42893: LD_INT 0
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 2
42902: PUSH
42903: LD_INT 1
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 2
42912: PUSH
42913: LD_INT 2
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 1
42922: PUSH
42923: LD_INT 2
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 0
42932: PUSH
42933: LD_INT 2
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 1
42942: NEG
42943: PUSH
42944: LD_INT 1
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 2
42953: NEG
42954: PUSH
42955: LD_INT 0
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 2
42964: NEG
42965: PUSH
42966: LD_INT 1
42968: NEG
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 2
42976: NEG
42977: PUSH
42978: LD_INT 2
42980: NEG
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 1
42988: NEG
42989: PUSH
42990: LD_INT 2
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 2
42999: NEG
43000: PUSH
43001: LD_INT 1
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 3
43010: NEG
43011: PUSH
43012: LD_INT 1
43014: NEG
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 3
43022: NEG
43023: PUSH
43024: LD_INT 2
43026: NEG
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43057: LD_ADDR_VAR 0 28
43061: PUSH
43062: LD_INT 0
43064: PUSH
43065: LD_INT 0
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 0
43074: PUSH
43075: LD_INT 1
43077: NEG
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 1
43085: PUSH
43086: LD_INT 0
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 1
43095: PUSH
43096: LD_INT 1
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 0
43105: PUSH
43106: LD_INT 1
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 1
43115: NEG
43116: PUSH
43117: LD_INT 0
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 1
43126: NEG
43127: PUSH
43128: LD_INT 1
43130: NEG
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 1
43138: NEG
43139: PUSH
43140: LD_INT 2
43142: NEG
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 0
43150: PUSH
43151: LD_INT 2
43153: NEG
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 1
43161: PUSH
43162: LD_INT 1
43164: NEG
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 2
43172: PUSH
43173: LD_INT 0
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 2
43182: PUSH
43183: LD_INT 1
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 2
43192: PUSH
43193: LD_INT 2
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 1
43202: PUSH
43203: LD_INT 2
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 0
43212: PUSH
43213: LD_INT 2
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 1
43222: NEG
43223: PUSH
43224: LD_INT 1
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 2
43233: NEG
43234: PUSH
43235: LD_INT 0
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 2
43244: NEG
43245: PUSH
43246: LD_INT 1
43248: NEG
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 2
43256: NEG
43257: PUSH
43258: LD_INT 2
43260: NEG
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 2
43268: NEG
43269: PUSH
43270: LD_INT 3
43272: NEG
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 1
43280: NEG
43281: PUSH
43282: LD_INT 3
43284: NEG
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 3
43292: NEG
43293: PUSH
43294: LD_INT 1
43296: NEG
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 3
43304: NEG
43305: PUSH
43306: LD_INT 2
43308: NEG
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43339: LD_ADDR_VAR 0 29
43343: PUSH
43344: LD_INT 0
43346: PUSH
43347: LD_INT 0
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 0
43356: PUSH
43357: LD_INT 1
43359: NEG
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 1
43367: PUSH
43368: LD_INT 0
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 1
43377: PUSH
43378: LD_INT 1
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 0
43387: PUSH
43388: LD_INT 1
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 1
43397: NEG
43398: PUSH
43399: LD_INT 0
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 1
43408: NEG
43409: PUSH
43410: LD_INT 1
43412: NEG
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 1
43420: NEG
43421: PUSH
43422: LD_INT 2
43424: NEG
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 0
43432: PUSH
43433: LD_INT 2
43435: NEG
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 1
43443: PUSH
43444: LD_INT 1
43446: NEG
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 2
43454: PUSH
43455: LD_INT 0
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 2
43464: PUSH
43465: LD_INT 1
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 1
43474: PUSH
43475: LD_INT 2
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 0
43484: PUSH
43485: LD_INT 2
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 1
43494: NEG
43495: PUSH
43496: LD_INT 1
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 2
43505: NEG
43506: PUSH
43507: LD_INT 1
43509: NEG
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 2
43517: NEG
43518: PUSH
43519: LD_INT 2
43521: NEG
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 2
43529: NEG
43530: PUSH
43531: LD_INT 3
43533: NEG
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 2
43541: PUSH
43542: LD_INT 1
43544: NEG
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 3
43552: PUSH
43553: LD_INT 1
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 1
43562: PUSH
43563: LD_INT 3
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 1
43572: NEG
43573: PUSH
43574: LD_INT 2
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 3
43583: NEG
43584: PUSH
43585: LD_INT 2
43587: NEG
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43618: LD_ADDR_VAR 0 30
43622: PUSH
43623: LD_INT 0
43625: PUSH
43626: LD_INT 0
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 0
43635: PUSH
43636: LD_INT 1
43638: NEG
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 1
43646: PUSH
43647: LD_INT 0
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 1
43656: PUSH
43657: LD_INT 1
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 0
43666: PUSH
43667: LD_INT 1
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: LD_INT 1
43676: NEG
43677: PUSH
43678: LD_INT 0
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 1
43687: NEG
43688: PUSH
43689: LD_INT 1
43691: NEG
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 1
43699: NEG
43700: PUSH
43701: LD_INT 2
43703: NEG
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 0
43711: PUSH
43712: LD_INT 2
43714: NEG
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 1
43722: PUSH
43723: LD_INT 1
43725: NEG
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 2
43733: PUSH
43734: LD_INT 0
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 2
43743: PUSH
43744: LD_INT 1
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 2
43753: PUSH
43754: LD_INT 2
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 1
43763: PUSH
43764: LD_INT 2
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 1
43773: NEG
43774: PUSH
43775: LD_INT 1
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 2
43784: NEG
43785: PUSH
43786: LD_INT 0
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 2
43795: NEG
43796: PUSH
43797: LD_INT 1
43799: NEG
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 1
43807: NEG
43808: PUSH
43809: LD_INT 3
43811: NEG
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 1
43819: PUSH
43820: LD_INT 2
43822: NEG
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 3
43830: PUSH
43831: LD_INT 2
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 2
43840: PUSH
43841: LD_INT 3
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 2
43850: NEG
43851: PUSH
43852: LD_INT 1
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 3
43861: NEG
43862: PUSH
43863: LD_INT 1
43865: NEG
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43896: LD_ADDR_VAR 0 31
43900: PUSH
43901: LD_INT 0
43903: PUSH
43904: LD_INT 0
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 0
43913: PUSH
43914: LD_INT 1
43916: NEG
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 1
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 1
43934: PUSH
43935: LD_INT 1
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 0
43944: PUSH
43945: LD_INT 1
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 1
43954: NEG
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 1
43965: NEG
43966: PUSH
43967: LD_INT 1
43969: NEG
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 1
43977: NEG
43978: PUSH
43979: LD_INT 2
43981: NEG
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 1
43989: PUSH
43990: LD_INT 1
43992: NEG
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 2
44000: PUSH
44001: LD_INT 0
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 2
44010: PUSH
44011: LD_INT 1
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 2
44020: PUSH
44021: LD_INT 2
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 1
44030: PUSH
44031: LD_INT 2
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 0
44040: PUSH
44041: LD_INT 2
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 1
44050: NEG
44051: PUSH
44052: LD_INT 1
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 2
44061: NEG
44062: PUSH
44063: LD_INT 1
44065: NEG
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 2
44073: NEG
44074: PUSH
44075: LD_INT 2
44077: NEG
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 2
44085: NEG
44086: PUSH
44087: LD_INT 3
44089: NEG
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 2
44097: PUSH
44098: LD_INT 1
44100: NEG
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 3
44108: PUSH
44109: LD_INT 1
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 1
44118: PUSH
44119: LD_INT 3
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 1
44128: NEG
44129: PUSH
44130: LD_INT 2
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 3
44139: NEG
44140: PUSH
44141: LD_INT 2
44143: NEG
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44174: LD_ADDR_VAR 0 32
44178: PUSH
44179: LD_INT 0
44181: PUSH
44182: LD_INT 0
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 0
44191: PUSH
44192: LD_INT 1
44194: NEG
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 1
44202: PUSH
44203: LD_INT 0
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 1
44212: PUSH
44213: LD_INT 1
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 0
44222: PUSH
44223: LD_INT 1
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 1
44232: NEG
44233: PUSH
44234: LD_INT 0
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 1
44243: NEG
44244: PUSH
44245: LD_INT 1
44247: NEG
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 1
44255: NEG
44256: PUSH
44257: LD_INT 2
44259: NEG
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 0
44267: PUSH
44268: LD_INT 2
44270: NEG
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 1
44278: PUSH
44279: LD_INT 1
44281: NEG
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 2
44289: PUSH
44290: LD_INT 1
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 2
44299: PUSH
44300: LD_INT 2
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 1
44309: PUSH
44310: LD_INT 2
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 0
44319: PUSH
44320: LD_INT 2
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 1
44329: NEG
44330: PUSH
44331: LD_INT 1
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 2
44340: NEG
44341: PUSH
44342: LD_INT 0
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 2
44351: NEG
44352: PUSH
44353: LD_INT 1
44355: NEG
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 1
44363: NEG
44364: PUSH
44365: LD_INT 3
44367: NEG
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 1
44375: PUSH
44376: LD_INT 2
44378: NEG
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 3
44386: PUSH
44387: LD_INT 2
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 2
44396: PUSH
44397: LD_INT 3
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 2
44406: NEG
44407: PUSH
44408: LD_INT 1
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 3
44417: NEG
44418: PUSH
44419: LD_INT 1
44421: NEG
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44452: LD_ADDR_VAR 0 33
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: LD_INT 0
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 0
44469: PUSH
44470: LD_INT 1
44472: NEG
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 1
44480: PUSH
44481: LD_INT 0
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 1
44490: PUSH
44491: LD_INT 1
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 0
44500: PUSH
44501: LD_INT 1
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 1
44510: NEG
44511: PUSH
44512: LD_INT 0
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 1
44521: NEG
44522: PUSH
44523: LD_INT 1
44525: NEG
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 1
44533: NEG
44534: PUSH
44535: LD_INT 2
44537: NEG
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 1
44545: PUSH
44546: LD_INT 1
44548: NEG
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 2
44556: PUSH
44557: LD_INT 0
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 2
44566: PUSH
44567: LD_INT 1
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 1
44576: PUSH
44577: LD_INT 2
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 0
44586: PUSH
44587: LD_INT 2
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 1
44596: NEG
44597: PUSH
44598: LD_INT 1
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 2
44607: NEG
44608: PUSH
44609: LD_INT 0
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 2
44618: NEG
44619: PUSH
44620: LD_INT 1
44622: NEG
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 2
44630: NEG
44631: PUSH
44632: LD_INT 2
44634: NEG
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 2
44642: NEG
44643: PUSH
44644: LD_INT 3
44646: NEG
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 2
44654: PUSH
44655: LD_INT 1
44657: NEG
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 3
44665: PUSH
44666: LD_INT 1
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 1
44675: PUSH
44676: LD_INT 3
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 1
44685: NEG
44686: PUSH
44687: LD_INT 2
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 3
44696: NEG
44697: PUSH
44698: LD_INT 2
44700: NEG
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44731: LD_ADDR_VAR 0 34
44735: PUSH
44736: LD_INT 0
44738: PUSH
44739: LD_INT 0
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 0
44748: PUSH
44749: LD_INT 1
44751: NEG
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 1
44759: PUSH
44760: LD_INT 0
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 1
44769: PUSH
44770: LD_INT 1
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 0
44779: PUSH
44780: LD_INT 1
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 1
44789: NEG
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 1
44800: NEG
44801: PUSH
44802: LD_INT 1
44804: NEG
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 1
44812: NEG
44813: PUSH
44814: LD_INT 2
44816: NEG
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 0
44824: PUSH
44825: LD_INT 2
44827: NEG
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 1
44835: PUSH
44836: LD_INT 1
44838: NEG
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 2
44846: PUSH
44847: LD_INT 1
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 2
44856: PUSH
44857: LD_INT 2
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 1
44866: PUSH
44867: LD_INT 2
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 1
44876: NEG
44877: PUSH
44878: LD_INT 1
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 2
44887: NEG
44888: PUSH
44889: LD_INT 0
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 2
44898: NEG
44899: PUSH
44900: LD_INT 1
44902: NEG
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 2
44910: NEG
44911: PUSH
44912: LD_INT 2
44914: NEG
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 1
44922: NEG
44923: PUSH
44924: LD_INT 3
44926: NEG
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 1
44934: PUSH
44935: LD_INT 2
44937: NEG
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 3
44945: PUSH
44946: LD_INT 2
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 2
44955: PUSH
44956: LD_INT 3
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 2
44965: NEG
44966: PUSH
44967: LD_INT 1
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 3
44976: NEG
44977: PUSH
44978: LD_INT 1
44980: NEG
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45011: LD_ADDR_VAR 0 35
45015: PUSH
45016: LD_INT 0
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 0
45028: PUSH
45029: LD_INT 1
45031: NEG
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 1
45039: PUSH
45040: LD_INT 0
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 1
45049: PUSH
45050: LD_INT 1
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 0
45059: PUSH
45060: LD_INT 1
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 1
45069: NEG
45070: PUSH
45071: LD_INT 0
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 1
45080: NEG
45081: PUSH
45082: LD_INT 1
45084: NEG
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 2
45092: PUSH
45093: LD_INT 1
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 2
45102: NEG
45103: PUSH
45104: LD_INT 1
45106: NEG
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45123: LD_ADDR_VAR 0 36
45127: PUSH
45128: LD_INT 0
45130: PUSH
45131: LD_INT 0
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 0
45140: PUSH
45141: LD_INT 1
45143: NEG
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 1
45151: PUSH
45152: LD_INT 0
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 1
45161: PUSH
45162: LD_INT 1
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 0
45171: PUSH
45172: LD_INT 1
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 1
45181: NEG
45182: PUSH
45183: LD_INT 0
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 1
45192: NEG
45193: PUSH
45194: LD_INT 1
45196: NEG
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 1
45204: NEG
45205: PUSH
45206: LD_INT 2
45208: NEG
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 1
45216: PUSH
45217: LD_INT 2
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45235: LD_ADDR_VAR 0 37
45239: PUSH
45240: LD_INT 0
45242: PUSH
45243: LD_INT 0
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 0
45252: PUSH
45253: LD_INT 1
45255: NEG
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 1
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 1
45273: PUSH
45274: LD_INT 1
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 0
45283: PUSH
45284: LD_INT 1
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 1
45293: NEG
45294: PUSH
45295: LD_INT 0
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 1
45304: NEG
45305: PUSH
45306: LD_INT 1
45308: NEG
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 1
45316: PUSH
45317: LD_INT 1
45319: NEG
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 1
45327: NEG
45328: PUSH
45329: LD_INT 1
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45347: LD_ADDR_VAR 0 38
45351: PUSH
45352: LD_INT 0
45354: PUSH
45355: LD_INT 0
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 0
45364: PUSH
45365: LD_INT 1
45367: NEG
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 1
45375: PUSH
45376: LD_INT 0
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 1
45385: PUSH
45386: LD_INT 1
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 0
45395: PUSH
45396: LD_INT 1
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 1
45405: NEG
45406: PUSH
45407: LD_INT 0
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 1
45416: NEG
45417: PUSH
45418: LD_INT 1
45420: NEG
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 2
45428: PUSH
45429: LD_INT 1
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 2
45438: NEG
45439: PUSH
45440: LD_INT 1
45442: NEG
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45459: LD_ADDR_VAR 0 39
45463: PUSH
45464: LD_INT 0
45466: PUSH
45467: LD_INT 0
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 0
45476: PUSH
45477: LD_INT 1
45479: NEG
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 1
45487: PUSH
45488: LD_INT 0
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 1
45497: PUSH
45498: LD_INT 1
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 0
45507: PUSH
45508: LD_INT 1
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 1
45517: NEG
45518: PUSH
45519: LD_INT 0
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 1
45528: NEG
45529: PUSH
45530: LD_INT 1
45532: NEG
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 1
45540: NEG
45541: PUSH
45542: LD_INT 2
45544: NEG
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 1
45552: PUSH
45553: LD_INT 2
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45571: LD_ADDR_VAR 0 40
45575: PUSH
45576: LD_INT 0
45578: PUSH
45579: LD_INT 0
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 0
45588: PUSH
45589: LD_INT 1
45591: NEG
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 1
45599: PUSH
45600: LD_INT 0
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 1
45609: PUSH
45610: LD_INT 1
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 0
45619: PUSH
45620: LD_INT 1
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 1
45629: NEG
45630: PUSH
45631: LD_INT 0
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 1
45640: NEG
45641: PUSH
45642: LD_INT 1
45644: NEG
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 1
45652: PUSH
45653: LD_INT 1
45655: NEG
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 1
45663: NEG
45664: PUSH
45665: LD_INT 1
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45683: LD_ADDR_VAR 0 41
45687: PUSH
45688: LD_INT 0
45690: PUSH
45691: LD_INT 0
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 0
45700: PUSH
45701: LD_INT 1
45703: NEG
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 1
45711: PUSH
45712: LD_INT 0
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 1
45721: PUSH
45722: LD_INT 1
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 0
45731: PUSH
45732: LD_INT 1
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 1
45741: NEG
45742: PUSH
45743: LD_INT 0
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 1
45752: NEG
45753: PUSH
45754: LD_INT 1
45756: NEG
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 1
45764: NEG
45765: PUSH
45766: LD_INT 2
45768: NEG
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 1
45776: PUSH
45777: LD_INT 1
45779: NEG
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 2
45787: PUSH
45788: LD_INT 0
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 2
45797: PUSH
45798: LD_INT 1
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 2
45807: PUSH
45808: LD_INT 2
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 1
45817: PUSH
45818: LD_INT 2
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 1
45827: NEG
45828: PUSH
45829: LD_INT 1
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 2
45838: NEG
45839: PUSH
45840: LD_INT 0
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 2
45849: NEG
45850: PUSH
45851: LD_INT 1
45853: NEG
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 2
45861: NEG
45862: PUSH
45863: LD_INT 2
45865: NEG
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 2
45873: NEG
45874: PUSH
45875: LD_INT 3
45877: NEG
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 2
45885: PUSH
45886: LD_INT 1
45888: NEG
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 3
45896: PUSH
45897: LD_INT 0
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 3
45906: PUSH
45907: LD_INT 1
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 3
45916: PUSH
45917: LD_INT 2
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 3
45926: PUSH
45927: LD_INT 3
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 2
45936: PUSH
45937: LD_INT 3
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 2
45946: NEG
45947: PUSH
45948: LD_INT 1
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 3
45957: NEG
45958: PUSH
45959: LD_INT 0
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 3
45968: NEG
45969: PUSH
45970: LD_INT 1
45972: NEG
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 3
45980: NEG
45981: PUSH
45982: LD_INT 2
45984: NEG
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 3
45992: NEG
45993: PUSH
45994: LD_INT 3
45996: NEG
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46033: LD_ADDR_VAR 0 42
46037: PUSH
46038: LD_INT 0
46040: PUSH
46041: LD_INT 0
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 0
46050: PUSH
46051: LD_INT 1
46053: NEG
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 1
46061: PUSH
46062: LD_INT 0
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 1
46071: PUSH
46072: LD_INT 1
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: LD_INT 1
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 1
46091: NEG
46092: PUSH
46093: LD_INT 0
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 1
46102: NEG
46103: PUSH
46104: LD_INT 1
46106: NEG
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 1
46114: NEG
46115: PUSH
46116: LD_INT 2
46118: NEG
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: PUSH
46124: LD_INT 0
46126: PUSH
46127: LD_INT 2
46129: NEG
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 1
46137: PUSH
46138: LD_INT 1
46140: NEG
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 2
46148: PUSH
46149: LD_INT 1
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 2
46158: PUSH
46159: LD_INT 2
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: LD_INT 2
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 0
46178: PUSH
46179: LD_INT 2
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 1
46188: NEG
46189: PUSH
46190: LD_INT 1
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 2
46199: NEG
46200: PUSH
46201: LD_INT 1
46203: NEG
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 2
46211: NEG
46212: PUSH
46213: LD_INT 2
46215: NEG
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 2
46223: NEG
46224: PUSH
46225: LD_INT 3
46227: NEG
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 1
46235: NEG
46236: PUSH
46237: LD_INT 3
46239: NEG
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 0
46247: PUSH
46248: LD_INT 3
46250: NEG
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 1
46258: PUSH
46259: LD_INT 2
46261: NEG
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 3
46269: PUSH
46270: LD_INT 2
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 3
46279: PUSH
46280: LD_INT 3
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 2
46289: PUSH
46290: LD_INT 3
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 1
46299: PUSH
46300: LD_INT 3
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 0
46309: PUSH
46310: LD_INT 3
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 1
46319: NEG
46320: PUSH
46321: LD_INT 2
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 3
46330: NEG
46331: PUSH
46332: LD_INT 2
46334: NEG
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 3
46342: NEG
46343: PUSH
46344: LD_INT 3
46346: NEG
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46383: LD_ADDR_VAR 0 43
46387: PUSH
46388: LD_INT 0
46390: PUSH
46391: LD_INT 0
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 0
46400: PUSH
46401: LD_INT 1
46403: NEG
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 1
46411: PUSH
46412: LD_INT 0
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 1
46421: PUSH
46422: LD_INT 1
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 0
46431: PUSH
46432: LD_INT 1
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 1
46441: NEG
46442: PUSH
46443: LD_INT 0
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 1
46452: NEG
46453: PUSH
46454: LD_INT 1
46456: NEG
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 1
46464: NEG
46465: PUSH
46466: LD_INT 2
46468: NEG
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 0
46476: PUSH
46477: LD_INT 2
46479: NEG
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 1
46487: PUSH
46488: LD_INT 1
46490: NEG
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 2
46498: PUSH
46499: LD_INT 0
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 2
46508: PUSH
46509: LD_INT 1
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 1
46518: PUSH
46519: LD_INT 2
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 0
46528: PUSH
46529: LD_INT 2
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 1
46538: NEG
46539: PUSH
46540: LD_INT 1
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 2
46549: NEG
46550: PUSH
46551: LD_INT 0
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 2
46560: NEG
46561: PUSH
46562: LD_INT 1
46564: NEG
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 1
46572: NEG
46573: PUSH
46574: LD_INT 3
46576: NEG
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 0
46584: PUSH
46585: LD_INT 3
46587: NEG
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 1
46595: PUSH
46596: LD_INT 2
46598: NEG
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 2
46606: PUSH
46607: LD_INT 1
46609: NEG
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 3
46617: PUSH
46618: LD_INT 0
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 3
46627: PUSH
46628: LD_INT 1
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 1
46637: PUSH
46638: LD_INT 3
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 0
46647: PUSH
46648: LD_INT 3
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 1
46657: NEG
46658: PUSH
46659: LD_INT 2
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 2
46668: NEG
46669: PUSH
46670: LD_INT 1
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 3
46679: NEG
46680: PUSH
46681: LD_INT 0
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 3
46690: NEG
46691: PUSH
46692: LD_INT 1
46694: NEG
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46731: LD_ADDR_VAR 0 44
46735: PUSH
46736: LD_INT 0
46738: PUSH
46739: LD_INT 0
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 0
46748: PUSH
46749: LD_INT 1
46751: NEG
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 1
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 1
46769: PUSH
46770: LD_INT 1
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 0
46779: PUSH
46780: LD_INT 1
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 1
46789: NEG
46790: PUSH
46791: LD_INT 0
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 1
46800: NEG
46801: PUSH
46802: LD_INT 1
46804: NEG
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 1
46812: NEG
46813: PUSH
46814: LD_INT 2
46816: NEG
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 1
46824: PUSH
46825: LD_INT 1
46827: NEG
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 2
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 2
46845: PUSH
46846: LD_INT 1
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 2
46855: PUSH
46856: LD_INT 2
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 1
46865: PUSH
46866: LD_INT 2
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 1
46875: NEG
46876: PUSH
46877: LD_INT 1
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 2
46886: NEG
46887: PUSH
46888: LD_INT 0
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 2
46897: NEG
46898: PUSH
46899: LD_INT 1
46901: NEG
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 2
46909: NEG
46910: PUSH
46911: LD_INT 2
46913: NEG
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 2
46921: NEG
46922: PUSH
46923: LD_INT 3
46925: NEG
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 2
46933: PUSH
46934: LD_INT 1
46936: NEG
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 3
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 3
46954: PUSH
46955: LD_INT 1
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 3
46964: PUSH
46965: LD_INT 2
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 3
46974: PUSH
46975: LD_INT 3
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 2
46984: PUSH
46985: LD_INT 3
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 2
46994: NEG
46995: PUSH
46996: LD_INT 1
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 3
47005: NEG
47006: PUSH
47007: LD_INT 0
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 3
47016: NEG
47017: PUSH
47018: LD_INT 1
47020: NEG
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 3
47028: NEG
47029: PUSH
47030: LD_INT 2
47032: NEG
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 3
47040: NEG
47041: PUSH
47042: LD_INT 3
47044: NEG
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47081: LD_ADDR_VAR 0 45
47085: PUSH
47086: LD_INT 0
47088: PUSH
47089: LD_INT 0
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 0
47098: PUSH
47099: LD_INT 1
47101: NEG
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 1
47109: PUSH
47110: LD_INT 0
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 1
47119: PUSH
47120: LD_INT 1
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 0
47129: PUSH
47130: LD_INT 1
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 1
47139: NEG
47140: PUSH
47141: LD_INT 0
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 1
47150: NEG
47151: PUSH
47152: LD_INT 1
47154: NEG
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 1
47162: NEG
47163: PUSH
47164: LD_INT 2
47166: NEG
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 0
47174: PUSH
47175: LD_INT 2
47177: NEG
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 1
47185: PUSH
47186: LD_INT 1
47188: NEG
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 2
47196: PUSH
47197: LD_INT 1
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 2
47206: PUSH
47207: LD_INT 2
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: LD_INT 2
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 0
47226: PUSH
47227: LD_INT 2
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 1
47236: NEG
47237: PUSH
47238: LD_INT 1
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 2
47247: NEG
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 2
47259: NEG
47260: PUSH
47261: LD_INT 2
47263: NEG
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 2
47271: NEG
47272: PUSH
47273: LD_INT 3
47275: NEG
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 1
47283: NEG
47284: PUSH
47285: LD_INT 3
47287: NEG
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 0
47295: PUSH
47296: LD_INT 3
47298: NEG
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 1
47306: PUSH
47307: LD_INT 2
47309: NEG
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 3
47317: PUSH
47318: LD_INT 2
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 3
47327: PUSH
47328: LD_INT 3
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 2
47337: PUSH
47338: LD_INT 3
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 1
47347: PUSH
47348: LD_INT 3
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 0
47357: PUSH
47358: LD_INT 3
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 1
47367: NEG
47368: PUSH
47369: LD_INT 2
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 3
47378: NEG
47379: PUSH
47380: LD_INT 2
47382: NEG
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 3
47390: NEG
47391: PUSH
47392: LD_INT 3
47394: NEG
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47431: LD_ADDR_VAR 0 46
47435: PUSH
47436: LD_INT 0
47438: PUSH
47439: LD_INT 0
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 0
47448: PUSH
47449: LD_INT 1
47451: NEG
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 1
47459: PUSH
47460: LD_INT 0
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 1
47469: PUSH
47470: LD_INT 1
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 0
47479: PUSH
47480: LD_INT 1
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 1
47489: NEG
47490: PUSH
47491: LD_INT 0
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 1
47500: NEG
47501: PUSH
47502: LD_INT 1
47504: NEG
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 1
47512: NEG
47513: PUSH
47514: LD_INT 2
47516: NEG
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 0
47524: PUSH
47525: LD_INT 2
47527: NEG
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 1
47535: PUSH
47536: LD_INT 1
47538: NEG
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 2
47546: PUSH
47547: LD_INT 0
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 2
47556: PUSH
47557: LD_INT 1
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 1
47566: PUSH
47567: LD_INT 2
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: LD_INT 2
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 1
47586: NEG
47587: PUSH
47588: LD_INT 1
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 2
47597: NEG
47598: PUSH
47599: LD_INT 0
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 2
47608: NEG
47609: PUSH
47610: LD_INT 1
47612: NEG
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 1
47620: NEG
47621: PUSH
47622: LD_INT 3
47624: NEG
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 0
47632: PUSH
47633: LD_INT 3
47635: NEG
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 1
47643: PUSH
47644: LD_INT 2
47646: NEG
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 2
47654: PUSH
47655: LD_INT 1
47657: NEG
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 3
47665: PUSH
47666: LD_INT 0
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 3
47675: PUSH
47676: LD_INT 1
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 1
47685: PUSH
47686: LD_INT 3
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 0
47695: PUSH
47696: LD_INT 3
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 1
47705: NEG
47706: PUSH
47707: LD_INT 2
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 2
47716: NEG
47717: PUSH
47718: LD_INT 1
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 3
47727: NEG
47728: PUSH
47729: LD_INT 0
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 3
47738: NEG
47739: PUSH
47740: LD_INT 1
47742: NEG
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47779: LD_ADDR_VAR 0 47
47783: PUSH
47784: LD_INT 0
47786: PUSH
47787: LD_INT 0
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 0
47796: PUSH
47797: LD_INT 1
47799: NEG
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 1
47807: PUSH
47808: LD_INT 0
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 1
47817: PUSH
47818: LD_INT 1
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 0
47827: PUSH
47828: LD_INT 1
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 1
47837: NEG
47838: PUSH
47839: LD_INT 0
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 1
47848: NEG
47849: PUSH
47850: LD_INT 1
47852: NEG
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 1
47860: NEG
47861: PUSH
47862: LD_INT 2
47864: NEG
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 0
47872: PUSH
47873: LD_INT 2
47875: NEG
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 1
47883: PUSH
47884: LD_INT 1
47886: NEG
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 2
47894: NEG
47895: PUSH
47896: LD_INT 1
47898: NEG
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 2
47906: NEG
47907: PUSH
47908: LD_INT 2
47910: NEG
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47930: LD_ADDR_VAR 0 48
47934: PUSH
47935: LD_INT 0
47937: PUSH
47938: LD_INT 0
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 0
47947: PUSH
47948: LD_INT 1
47950: NEG
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 1
47958: PUSH
47959: LD_INT 0
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 1
47968: PUSH
47969: LD_INT 1
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 0
47978: PUSH
47979: LD_INT 1
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 1
47988: NEG
47989: PUSH
47990: LD_INT 0
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 1
47999: NEG
48000: PUSH
48001: LD_INT 1
48003: NEG
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 1
48011: NEG
48012: PUSH
48013: LD_INT 2
48015: NEG
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 0
48023: PUSH
48024: LD_INT 2
48026: NEG
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 1
48034: PUSH
48035: LD_INT 1
48037: NEG
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 2
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 2
48055: PUSH
48056: LD_INT 1
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48077: LD_ADDR_VAR 0 49
48081: PUSH
48082: LD_INT 0
48084: PUSH
48085: LD_INT 0
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: LD_INT 1
48097: NEG
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 1
48105: PUSH
48106: LD_INT 0
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 1
48115: PUSH
48116: LD_INT 1
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 0
48125: PUSH
48126: LD_INT 1
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 1
48135: NEG
48136: PUSH
48137: LD_INT 0
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 1
48146: NEG
48147: PUSH
48148: LD_INT 1
48150: NEG
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 1
48158: PUSH
48159: LD_INT 1
48161: NEG
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 2
48169: PUSH
48170: LD_INT 0
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 2
48179: PUSH
48180: LD_INT 1
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 2
48189: PUSH
48190: LD_INT 2
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 1
48199: PUSH
48200: LD_INT 2
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48221: LD_ADDR_VAR 0 50
48225: PUSH
48226: LD_INT 0
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 0
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 1
48249: PUSH
48250: LD_INT 0
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 1
48259: PUSH
48260: LD_INT 1
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 0
48269: PUSH
48270: LD_INT 1
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 1
48279: NEG
48280: PUSH
48281: LD_INT 0
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 1
48290: NEG
48291: PUSH
48292: LD_INT 1
48294: NEG
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 2
48302: PUSH
48303: LD_INT 1
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 2
48312: PUSH
48313: LD_INT 2
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 1
48322: PUSH
48323: LD_INT 2
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 0
48332: PUSH
48333: LD_INT 2
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 1
48342: NEG
48343: PUSH
48344: LD_INT 1
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48365: LD_ADDR_VAR 0 51
48369: PUSH
48370: LD_INT 0
48372: PUSH
48373: LD_INT 0
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 0
48382: PUSH
48383: LD_INT 1
48385: NEG
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 1
48393: PUSH
48394: LD_INT 0
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 1
48403: PUSH
48404: LD_INT 1
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 0
48413: PUSH
48414: LD_INT 1
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 1
48423: NEG
48424: PUSH
48425: LD_INT 0
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 1
48434: NEG
48435: PUSH
48436: LD_INT 1
48438: NEG
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 1
48446: PUSH
48447: LD_INT 2
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 0
48456: PUSH
48457: LD_INT 2
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 1
48466: NEG
48467: PUSH
48468: LD_INT 1
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 2
48477: NEG
48478: PUSH
48479: LD_INT 0
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 2
48488: NEG
48489: PUSH
48490: LD_INT 1
48492: NEG
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48512: LD_ADDR_VAR 0 52
48516: PUSH
48517: LD_INT 0
48519: PUSH
48520: LD_INT 0
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 0
48529: PUSH
48530: LD_INT 1
48532: NEG
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 1
48540: PUSH
48541: LD_INT 0
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 1
48550: PUSH
48551: LD_INT 1
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 0
48560: PUSH
48561: LD_INT 1
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 1
48570: NEG
48571: PUSH
48572: LD_INT 0
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 1
48581: NEG
48582: PUSH
48583: LD_INT 1
48585: NEG
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 1
48593: NEG
48594: PUSH
48595: LD_INT 2
48597: NEG
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 1
48605: NEG
48606: PUSH
48607: LD_INT 1
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 2
48616: NEG
48617: PUSH
48618: LD_INT 0
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 2
48627: NEG
48628: PUSH
48629: LD_INT 1
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 2
48639: NEG
48640: PUSH
48641: LD_INT 2
48643: NEG
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48663: LD_ADDR_VAR 0 53
48667: PUSH
48668: LD_INT 0
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 0
48680: PUSH
48681: LD_INT 1
48683: NEG
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 1
48691: PUSH
48692: LD_INT 0
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 1
48701: PUSH
48702: LD_INT 1
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 0
48711: PUSH
48712: LD_INT 1
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 1
48721: NEG
48722: PUSH
48723: LD_INT 0
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 1
48732: NEG
48733: PUSH
48734: LD_INT 1
48736: NEG
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 1
48744: NEG
48745: PUSH
48746: LD_INT 2
48748: NEG
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 0
48756: PUSH
48757: LD_INT 2
48759: NEG
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 1
48767: PUSH
48768: LD_INT 1
48770: NEG
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 2
48778: PUSH
48779: LD_INT 0
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 2
48788: PUSH
48789: LD_INT 1
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 2
48798: PUSH
48799: LD_INT 2
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 1
48808: PUSH
48809: LD_INT 2
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 0
48818: PUSH
48819: LD_INT 2
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 1
48828: NEG
48829: PUSH
48830: LD_INT 1
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 2
48839: NEG
48840: PUSH
48841: LD_INT 0
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 2
48850: NEG
48851: PUSH
48852: LD_INT 1
48854: NEG
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 2
48862: NEG
48863: PUSH
48864: LD_INT 2
48866: NEG
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48893: LD_ADDR_VAR 0 54
48897: PUSH
48898: LD_INT 0
48900: PUSH
48901: LD_INT 0
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 0
48910: PUSH
48911: LD_INT 1
48913: NEG
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 1
48921: PUSH
48922: LD_INT 0
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 1
48931: PUSH
48932: LD_INT 1
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 0
48941: PUSH
48942: LD_INT 1
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 1
48951: NEG
48952: PUSH
48953: LD_INT 0
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 1
48962: NEG
48963: PUSH
48964: LD_INT 1
48966: NEG
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 1
48974: NEG
48975: PUSH
48976: LD_INT 2
48978: NEG
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 0
48986: PUSH
48987: LD_INT 2
48989: NEG
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 1
48997: PUSH
48998: LD_INT 1
49000: NEG
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 2
49008: PUSH
49009: LD_INT 0
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 2
49018: PUSH
49019: LD_INT 1
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 2
49028: PUSH
49029: LD_INT 2
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 1
49038: PUSH
49039: LD_INT 2
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 0
49048: PUSH
49049: LD_INT 2
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 1
49058: NEG
49059: PUSH
49060: LD_INT 1
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 2
49069: NEG
49070: PUSH
49071: LD_INT 0
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 2
49080: NEG
49081: PUSH
49082: LD_INT 1
49084: NEG
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 2
49092: NEG
49093: PUSH
49094: LD_INT 2
49096: NEG
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49123: LD_ADDR_VAR 0 55
49127: PUSH
49128: LD_INT 0
49130: PUSH
49131: LD_INT 0
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 0
49140: PUSH
49141: LD_INT 1
49143: NEG
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 1
49151: PUSH
49152: LD_INT 0
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 1
49161: PUSH
49162: LD_INT 1
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 0
49171: PUSH
49172: LD_INT 1
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 1
49181: NEG
49182: PUSH
49183: LD_INT 0
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 1
49192: NEG
49193: PUSH
49194: LD_INT 1
49196: NEG
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 1
49204: NEG
49205: PUSH
49206: LD_INT 2
49208: NEG
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 0
49216: PUSH
49217: LD_INT 2
49219: NEG
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 1
49227: PUSH
49228: LD_INT 1
49230: NEG
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: LD_INT 2
49238: PUSH
49239: LD_INT 0
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 2
49248: PUSH
49249: LD_INT 1
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 2
49258: PUSH
49259: LD_INT 2
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 1
49268: PUSH
49269: LD_INT 2
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 0
49278: PUSH
49279: LD_INT 2
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 1
49288: NEG
49289: PUSH
49290: LD_INT 1
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 2
49299: NEG
49300: PUSH
49301: LD_INT 0
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 2
49310: NEG
49311: PUSH
49312: LD_INT 1
49314: NEG
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 2
49322: NEG
49323: PUSH
49324: LD_INT 2
49326: NEG
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49353: LD_ADDR_VAR 0 56
49357: PUSH
49358: LD_INT 0
49360: PUSH
49361: LD_INT 0
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 0
49370: PUSH
49371: LD_INT 1
49373: NEG
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 1
49381: PUSH
49382: LD_INT 0
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 1
49391: PUSH
49392: LD_INT 1
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 0
49401: PUSH
49402: LD_INT 1
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 1
49411: NEG
49412: PUSH
49413: LD_INT 0
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 1
49422: NEG
49423: PUSH
49424: LD_INT 1
49426: NEG
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 1
49434: NEG
49435: PUSH
49436: LD_INT 2
49438: NEG
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 0
49446: PUSH
49447: LD_INT 2
49449: NEG
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 1
49457: PUSH
49458: LD_INT 1
49460: NEG
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 2
49468: PUSH
49469: LD_INT 0
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 2
49478: PUSH
49479: LD_INT 1
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 2
49488: PUSH
49489: LD_INT 2
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 1
49498: PUSH
49499: LD_INT 2
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 0
49508: PUSH
49509: LD_INT 2
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 1
49518: NEG
49519: PUSH
49520: LD_INT 1
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 2
49529: NEG
49530: PUSH
49531: LD_INT 0
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 2
49540: NEG
49541: PUSH
49542: LD_INT 1
49544: NEG
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 2
49552: NEG
49553: PUSH
49554: LD_INT 2
49556: NEG
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49583: LD_ADDR_VAR 0 57
49587: PUSH
49588: LD_INT 0
49590: PUSH
49591: LD_INT 0
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: LD_INT 1
49603: NEG
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 1
49611: PUSH
49612: LD_INT 0
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 1
49621: PUSH
49622: LD_INT 1
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 0
49631: PUSH
49632: LD_INT 1
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 1
49641: NEG
49642: PUSH
49643: LD_INT 0
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 1
49652: NEG
49653: PUSH
49654: LD_INT 1
49656: NEG
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 1
49664: NEG
49665: PUSH
49666: LD_INT 2
49668: NEG
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 0
49676: PUSH
49677: LD_INT 2
49679: NEG
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 1
49687: PUSH
49688: LD_INT 1
49690: NEG
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 2
49698: PUSH
49699: LD_INT 0
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 2
49708: PUSH
49709: LD_INT 1
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 2
49718: PUSH
49719: LD_INT 2
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 1
49728: PUSH
49729: LD_INT 2
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: LD_INT 2
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 1
49748: NEG
49749: PUSH
49750: LD_INT 1
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 2
49759: NEG
49760: PUSH
49761: LD_INT 0
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 2
49770: NEG
49771: PUSH
49772: LD_INT 1
49774: NEG
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 2
49782: NEG
49783: PUSH
49784: LD_INT 2
49786: NEG
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49813: LD_ADDR_VAR 0 58
49817: PUSH
49818: LD_INT 0
49820: PUSH
49821: LD_INT 0
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 0
49830: PUSH
49831: LD_INT 1
49833: NEG
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 1
49841: PUSH
49842: LD_INT 0
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 1
49851: PUSH
49852: LD_INT 1
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 0
49861: PUSH
49862: LD_INT 1
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 1
49871: NEG
49872: PUSH
49873: LD_INT 0
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 1
49882: NEG
49883: PUSH
49884: LD_INT 1
49886: NEG
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 1
49894: NEG
49895: PUSH
49896: LD_INT 2
49898: NEG
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 0
49906: PUSH
49907: LD_INT 2
49909: NEG
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 1
49917: PUSH
49918: LD_INT 1
49920: NEG
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 2
49928: PUSH
49929: LD_INT 0
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 2
49938: PUSH
49939: LD_INT 1
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 2
49948: PUSH
49949: LD_INT 2
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 1
49958: PUSH
49959: LD_INT 2
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 0
49968: PUSH
49969: LD_INT 2
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 1
49978: NEG
49979: PUSH
49980: LD_INT 1
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 2
49989: NEG
49990: PUSH
49991: LD_INT 0
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 2
50000: NEG
50001: PUSH
50002: LD_INT 1
50004: NEG
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 2
50012: NEG
50013: PUSH
50014: LD_INT 2
50016: NEG
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50043: LD_ADDR_VAR 0 59
50047: PUSH
50048: LD_INT 0
50050: PUSH
50051: LD_INT 0
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 0
50060: PUSH
50061: LD_INT 1
50063: NEG
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 1
50071: PUSH
50072: LD_INT 0
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 1
50081: PUSH
50082: LD_INT 1
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 0
50091: PUSH
50092: LD_INT 1
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 1
50101: NEG
50102: PUSH
50103: LD_INT 0
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 1
50112: NEG
50113: PUSH
50114: LD_INT 1
50116: NEG
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50131: LD_ADDR_VAR 0 60
50135: PUSH
50136: LD_INT 0
50138: PUSH
50139: LD_INT 0
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 0
50148: PUSH
50149: LD_INT 1
50151: NEG
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 1
50159: PUSH
50160: LD_INT 0
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 1
50169: PUSH
50170: LD_INT 1
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 0
50179: PUSH
50180: LD_INT 1
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 1
50189: NEG
50190: PUSH
50191: LD_INT 0
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 1
50200: NEG
50201: PUSH
50202: LD_INT 1
50204: NEG
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50219: LD_ADDR_VAR 0 61
50223: PUSH
50224: LD_INT 0
50226: PUSH
50227: LD_INT 0
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 0
50236: PUSH
50237: LD_INT 1
50239: NEG
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 1
50247: PUSH
50248: LD_INT 0
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 1
50257: PUSH
50258: LD_INT 1
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 0
50267: PUSH
50268: LD_INT 1
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 1
50277: NEG
50278: PUSH
50279: LD_INT 0
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 1
50288: NEG
50289: PUSH
50290: LD_INT 1
50292: NEG
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50307: LD_ADDR_VAR 0 62
50311: PUSH
50312: LD_INT 0
50314: PUSH
50315: LD_INT 0
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 0
50324: PUSH
50325: LD_INT 1
50327: NEG
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 1
50335: PUSH
50336: LD_INT 0
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 1
50345: PUSH
50346: LD_INT 1
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 0
50355: PUSH
50356: LD_INT 1
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 1
50365: NEG
50366: PUSH
50367: LD_INT 0
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 1
50376: NEG
50377: PUSH
50378: LD_INT 1
50380: NEG
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50395: LD_ADDR_VAR 0 63
50399: PUSH
50400: LD_INT 0
50402: PUSH
50403: LD_INT 0
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 0
50412: PUSH
50413: LD_INT 1
50415: NEG
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 1
50423: PUSH
50424: LD_INT 0
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 1
50433: PUSH
50434: LD_INT 1
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 0
50443: PUSH
50444: LD_INT 1
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 1
50453: NEG
50454: PUSH
50455: LD_INT 0
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 1
50464: NEG
50465: PUSH
50466: LD_INT 1
50468: NEG
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50483: LD_ADDR_VAR 0 64
50487: PUSH
50488: LD_INT 0
50490: PUSH
50491: LD_INT 0
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 0
50500: PUSH
50501: LD_INT 1
50503: NEG
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 1
50511: PUSH
50512: LD_INT 0
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 1
50521: PUSH
50522: LD_INT 1
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 0
50531: PUSH
50532: LD_INT 1
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 1
50541: NEG
50542: PUSH
50543: LD_INT 0
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 1
50552: NEG
50553: PUSH
50554: LD_INT 1
50556: NEG
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: ST_TO_ADDR
// end ; 1 :
50571: GO 56468
50573: LD_INT 1
50575: DOUBLE
50576: EQUAL
50577: IFTRUE 50581
50579: GO 53204
50581: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50582: LD_ADDR_VAR 0 11
50586: PUSH
50587: LD_INT 1
50589: NEG
50590: PUSH
50591: LD_INT 3
50593: NEG
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 0
50601: PUSH
50602: LD_INT 3
50604: NEG
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 1
50612: PUSH
50613: LD_INT 2
50615: NEG
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: LIST
50625: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50626: LD_ADDR_VAR 0 12
50630: PUSH
50631: LD_INT 2
50633: PUSH
50634: LD_INT 1
50636: NEG
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 3
50644: PUSH
50645: LD_INT 0
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 3
50654: PUSH
50655: LD_INT 1
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: LIST
50666: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50667: LD_ADDR_VAR 0 13
50671: PUSH
50672: LD_INT 3
50674: PUSH
50675: LD_INT 2
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 3
50684: PUSH
50685: LD_INT 3
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 2
50694: PUSH
50695: LD_INT 3
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: LIST
50706: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50707: LD_ADDR_VAR 0 14
50711: PUSH
50712: LD_INT 1
50714: PUSH
50715: LD_INT 3
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 0
50724: PUSH
50725: LD_INT 3
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 1
50734: NEG
50735: PUSH
50736: LD_INT 2
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: LIST
50747: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50748: LD_ADDR_VAR 0 15
50752: PUSH
50753: LD_INT 2
50755: NEG
50756: PUSH
50757: LD_INT 1
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 3
50766: NEG
50767: PUSH
50768: LD_INT 0
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 3
50777: NEG
50778: PUSH
50779: LD_INT 1
50781: NEG
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: LIST
50791: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50792: LD_ADDR_VAR 0 16
50796: PUSH
50797: LD_INT 2
50799: NEG
50800: PUSH
50801: LD_INT 3
50803: NEG
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 3
50811: NEG
50812: PUSH
50813: LD_INT 2
50815: NEG
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 3
50823: NEG
50824: PUSH
50825: LD_INT 3
50827: NEG
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: LIST
50837: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50838: LD_ADDR_VAR 0 17
50842: PUSH
50843: LD_INT 1
50845: NEG
50846: PUSH
50847: LD_INT 3
50849: NEG
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: LD_INT 3
50860: NEG
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 1
50868: PUSH
50869: LD_INT 2
50871: NEG
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: LIST
50881: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50882: LD_ADDR_VAR 0 18
50886: PUSH
50887: LD_INT 2
50889: PUSH
50890: LD_INT 1
50892: NEG
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 3
50900: PUSH
50901: LD_INT 0
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 3
50910: PUSH
50911: LD_INT 1
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: LIST
50922: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50923: LD_ADDR_VAR 0 19
50927: PUSH
50928: LD_INT 3
50930: PUSH
50931: LD_INT 2
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 3
50940: PUSH
50941: LD_INT 3
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 2
50950: PUSH
50951: LD_INT 3
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: LIST
50962: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50963: LD_ADDR_VAR 0 20
50967: PUSH
50968: LD_INT 1
50970: PUSH
50971: LD_INT 3
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 0
50980: PUSH
50981: LD_INT 3
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 1
50990: NEG
50991: PUSH
50992: LD_INT 2
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: LIST
51003: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51004: LD_ADDR_VAR 0 21
51008: PUSH
51009: LD_INT 2
51011: NEG
51012: PUSH
51013: LD_INT 1
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 3
51022: NEG
51023: PUSH
51024: LD_INT 0
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 3
51033: NEG
51034: PUSH
51035: LD_INT 1
51037: NEG
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: LIST
51047: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51048: LD_ADDR_VAR 0 22
51052: PUSH
51053: LD_INT 2
51055: NEG
51056: PUSH
51057: LD_INT 3
51059: NEG
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 3
51067: NEG
51068: PUSH
51069: LD_INT 2
51071: NEG
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 3
51079: NEG
51080: PUSH
51081: LD_INT 3
51083: NEG
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: LIST
51093: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51094: LD_ADDR_VAR 0 23
51098: PUSH
51099: LD_INT 0
51101: PUSH
51102: LD_INT 3
51104: NEG
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 1
51112: NEG
51113: PUSH
51114: LD_INT 4
51116: NEG
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 1
51124: PUSH
51125: LD_INT 3
51127: NEG
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: LIST
51137: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51138: LD_ADDR_VAR 0 24
51142: PUSH
51143: LD_INT 3
51145: PUSH
51146: LD_INT 0
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 3
51155: PUSH
51156: LD_INT 1
51158: NEG
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 4
51166: PUSH
51167: LD_INT 1
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: LIST
51178: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51179: LD_ADDR_VAR 0 25
51183: PUSH
51184: LD_INT 3
51186: PUSH
51187: LD_INT 3
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 4
51196: PUSH
51197: LD_INT 3
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 3
51206: PUSH
51207: LD_INT 4
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: LIST
51218: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51219: LD_ADDR_VAR 0 26
51223: PUSH
51224: LD_INT 0
51226: PUSH
51227: LD_INT 3
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 1
51236: PUSH
51237: LD_INT 4
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 1
51246: NEG
51247: PUSH
51248: LD_INT 3
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: LIST
51259: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51260: LD_ADDR_VAR 0 27
51264: PUSH
51265: LD_INT 3
51267: NEG
51268: PUSH
51269: LD_INT 0
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 3
51278: NEG
51279: PUSH
51280: LD_INT 1
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 4
51289: NEG
51290: PUSH
51291: LD_INT 1
51293: NEG
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: LIST
51303: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51304: LD_ADDR_VAR 0 28
51308: PUSH
51309: LD_INT 3
51311: NEG
51312: PUSH
51313: LD_INT 3
51315: NEG
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 3
51323: NEG
51324: PUSH
51325: LD_INT 4
51327: NEG
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 4
51335: NEG
51336: PUSH
51337: LD_INT 3
51339: NEG
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: LIST
51349: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51350: LD_ADDR_VAR 0 29
51354: PUSH
51355: LD_INT 1
51357: NEG
51358: PUSH
51359: LD_INT 3
51361: NEG
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 0
51369: PUSH
51370: LD_INT 3
51372: NEG
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 1
51380: PUSH
51381: LD_INT 2
51383: NEG
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 1
51391: NEG
51392: PUSH
51393: LD_INT 4
51395: NEG
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 0
51403: PUSH
51404: LD_INT 4
51406: NEG
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 1
51414: PUSH
51415: LD_INT 3
51417: NEG
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 1
51425: NEG
51426: PUSH
51427: LD_INT 5
51429: NEG
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 0
51437: PUSH
51438: LD_INT 5
51440: NEG
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 1
51448: PUSH
51449: LD_INT 4
51451: NEG
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 1
51459: NEG
51460: PUSH
51461: LD_INT 6
51463: NEG
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 0
51471: PUSH
51472: LD_INT 6
51474: NEG
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 1
51482: PUSH
51483: LD_INT 5
51485: NEG
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51505: LD_ADDR_VAR 0 30
51509: PUSH
51510: LD_INT 2
51512: PUSH
51513: LD_INT 1
51515: NEG
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 3
51523: PUSH
51524: LD_INT 0
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 3
51533: PUSH
51534: LD_INT 1
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 3
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 4
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 4
51564: PUSH
51565: LD_INT 1
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 4
51574: PUSH
51575: LD_INT 1
51577: NEG
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 5
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 5
51595: PUSH
51596: LD_INT 1
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 5
51605: PUSH
51606: LD_INT 1
51608: NEG
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 6
51616: PUSH
51617: LD_INT 0
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 6
51626: PUSH
51627: LD_INT 1
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51648: LD_ADDR_VAR 0 31
51652: PUSH
51653: LD_INT 3
51655: PUSH
51656: LD_INT 2
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 3
51665: PUSH
51666: LD_INT 3
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 2
51675: PUSH
51676: LD_INT 3
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 4
51685: PUSH
51686: LD_INT 3
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 4
51695: PUSH
51696: LD_INT 4
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 3
51705: PUSH
51706: LD_INT 4
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 5
51715: PUSH
51716: LD_INT 4
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 5
51725: PUSH
51726: LD_INT 5
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 4
51735: PUSH
51736: LD_INT 5
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 6
51745: PUSH
51746: LD_INT 5
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 6
51755: PUSH
51756: LD_INT 6
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 5
51765: PUSH
51766: LD_INT 6
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51787: LD_ADDR_VAR 0 32
51791: PUSH
51792: LD_INT 1
51794: PUSH
51795: LD_INT 3
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 0
51804: PUSH
51805: LD_INT 3
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 1
51814: NEG
51815: PUSH
51816: LD_INT 2
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 1
51825: PUSH
51826: LD_INT 4
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 0
51835: PUSH
51836: LD_INT 4
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 1
51845: NEG
51846: PUSH
51847: LD_INT 3
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 1
51856: PUSH
51857: LD_INT 5
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 0
51866: PUSH
51867: LD_INT 5
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 1
51876: NEG
51877: PUSH
51878: LD_INT 4
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 1
51887: PUSH
51888: LD_INT 6
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 0
51897: PUSH
51898: LD_INT 6
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 1
51907: NEG
51908: PUSH
51909: LD_INT 5
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51930: LD_ADDR_VAR 0 33
51934: PUSH
51935: LD_INT 2
51937: NEG
51938: PUSH
51939: LD_INT 1
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 3
51948: NEG
51949: PUSH
51950: LD_INT 0
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 3
51959: NEG
51960: PUSH
51961: LD_INT 1
51963: NEG
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 3
51971: NEG
51972: PUSH
51973: LD_INT 1
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 4
51982: NEG
51983: PUSH
51984: LD_INT 0
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 4
51993: NEG
51994: PUSH
51995: LD_INT 1
51997: NEG
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 4
52005: NEG
52006: PUSH
52007: LD_INT 1
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 5
52016: NEG
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 5
52027: NEG
52028: PUSH
52029: LD_INT 1
52031: NEG
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 5
52039: NEG
52040: PUSH
52041: LD_INT 1
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 6
52050: NEG
52051: PUSH
52052: LD_INT 0
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 6
52061: NEG
52062: PUSH
52063: LD_INT 1
52065: NEG
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52085: LD_ADDR_VAR 0 34
52089: PUSH
52090: LD_INT 2
52092: NEG
52093: PUSH
52094: LD_INT 3
52096: NEG
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 3
52104: NEG
52105: PUSH
52106: LD_INT 2
52108: NEG
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 3
52116: NEG
52117: PUSH
52118: LD_INT 3
52120: NEG
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 3
52128: NEG
52129: PUSH
52130: LD_INT 4
52132: NEG
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 4
52140: NEG
52141: PUSH
52142: LD_INT 3
52144: NEG
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 4
52152: NEG
52153: PUSH
52154: LD_INT 4
52156: NEG
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 4
52164: NEG
52165: PUSH
52166: LD_INT 5
52168: NEG
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 5
52176: NEG
52177: PUSH
52178: LD_INT 4
52180: NEG
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 5
52188: NEG
52189: PUSH
52190: LD_INT 5
52192: NEG
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 5
52200: NEG
52201: PUSH
52202: LD_INT 6
52204: NEG
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 6
52212: NEG
52213: PUSH
52214: LD_INT 5
52216: NEG
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 6
52224: NEG
52225: PUSH
52226: LD_INT 6
52228: NEG
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52248: LD_ADDR_VAR 0 41
52252: PUSH
52253: LD_INT 0
52255: PUSH
52256: LD_INT 2
52258: NEG
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 1
52266: NEG
52267: PUSH
52268: LD_INT 3
52270: NEG
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 1
52278: PUSH
52279: LD_INT 2
52281: NEG
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: LIST
52291: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52292: LD_ADDR_VAR 0 42
52296: PUSH
52297: LD_INT 2
52299: PUSH
52300: LD_INT 0
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 2
52309: PUSH
52310: LD_INT 1
52312: NEG
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 3
52320: PUSH
52321: LD_INT 1
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: LIST
52332: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52333: LD_ADDR_VAR 0 43
52337: PUSH
52338: LD_INT 2
52340: PUSH
52341: LD_INT 2
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 3
52350: PUSH
52351: LD_INT 2
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 2
52360: PUSH
52361: LD_INT 3
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: LIST
52372: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52373: LD_ADDR_VAR 0 44
52377: PUSH
52378: LD_INT 0
52380: PUSH
52381: LD_INT 2
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 1
52390: PUSH
52391: LD_INT 3
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 1
52400: NEG
52401: PUSH
52402: LD_INT 2
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: LIST
52413: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52414: LD_ADDR_VAR 0 45
52418: PUSH
52419: LD_INT 2
52421: NEG
52422: PUSH
52423: LD_INT 0
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 2
52432: NEG
52433: PUSH
52434: LD_INT 1
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 3
52443: NEG
52444: PUSH
52445: LD_INT 1
52447: NEG
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: LIST
52457: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52458: LD_ADDR_VAR 0 46
52462: PUSH
52463: LD_INT 2
52465: NEG
52466: PUSH
52467: LD_INT 2
52469: NEG
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 2
52477: NEG
52478: PUSH
52479: LD_INT 3
52481: NEG
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 3
52489: NEG
52490: PUSH
52491: LD_INT 2
52493: NEG
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: LIST
52503: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52504: LD_ADDR_VAR 0 47
52508: PUSH
52509: LD_INT 2
52511: NEG
52512: PUSH
52513: LD_INT 3
52515: NEG
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 1
52523: NEG
52524: PUSH
52525: LD_INT 3
52527: NEG
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52537: LD_ADDR_VAR 0 48
52541: PUSH
52542: LD_INT 1
52544: PUSH
52545: LD_INT 2
52547: NEG
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 2
52555: PUSH
52556: LD_INT 1
52558: NEG
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52568: LD_ADDR_VAR 0 49
52572: PUSH
52573: LD_INT 3
52575: PUSH
52576: LD_INT 1
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 3
52585: PUSH
52586: LD_INT 2
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52597: LD_ADDR_VAR 0 50
52601: PUSH
52602: LD_INT 2
52604: PUSH
52605: LD_INT 3
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 1
52614: PUSH
52615: LD_INT 3
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52626: LD_ADDR_VAR 0 51
52630: PUSH
52631: LD_INT 1
52633: NEG
52634: PUSH
52635: LD_INT 2
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 2
52644: NEG
52645: PUSH
52646: LD_INT 1
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52657: LD_ADDR_VAR 0 52
52661: PUSH
52662: LD_INT 3
52664: NEG
52665: PUSH
52666: LD_INT 1
52668: NEG
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 3
52676: NEG
52677: PUSH
52678: LD_INT 2
52680: NEG
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52690: LD_ADDR_VAR 0 53
52694: PUSH
52695: LD_INT 1
52697: NEG
52698: PUSH
52699: LD_INT 3
52701: NEG
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 0
52709: PUSH
52710: LD_INT 3
52712: NEG
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 1
52720: PUSH
52721: LD_INT 2
52723: NEG
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: LIST
52733: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52734: LD_ADDR_VAR 0 54
52738: PUSH
52739: LD_INT 2
52741: PUSH
52742: LD_INT 1
52744: NEG
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 3
52752: PUSH
52753: LD_INT 0
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 3
52762: PUSH
52763: LD_INT 1
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: LIST
52774: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52775: LD_ADDR_VAR 0 55
52779: PUSH
52780: LD_INT 3
52782: PUSH
52783: LD_INT 2
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 3
52792: PUSH
52793: LD_INT 3
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 2
52802: PUSH
52803: LD_INT 3
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: LIST
52814: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52815: LD_ADDR_VAR 0 56
52819: PUSH
52820: LD_INT 1
52822: PUSH
52823: LD_INT 3
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 0
52832: PUSH
52833: LD_INT 3
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 1
52842: NEG
52843: PUSH
52844: LD_INT 2
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: LIST
52855: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52856: LD_ADDR_VAR 0 57
52860: PUSH
52861: LD_INT 2
52863: NEG
52864: PUSH
52865: LD_INT 1
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 3
52874: NEG
52875: PUSH
52876: LD_INT 0
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 3
52885: NEG
52886: PUSH
52887: LD_INT 1
52889: NEG
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: LIST
52899: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52900: LD_ADDR_VAR 0 58
52904: PUSH
52905: LD_INT 2
52907: NEG
52908: PUSH
52909: LD_INT 3
52911: NEG
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 3
52919: NEG
52920: PUSH
52921: LD_INT 2
52923: NEG
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 3
52931: NEG
52932: PUSH
52933: LD_INT 3
52935: NEG
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: LIST
52945: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52946: LD_ADDR_VAR 0 59
52950: PUSH
52951: LD_INT 1
52953: NEG
52954: PUSH
52955: LD_INT 2
52957: NEG
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 0
52965: PUSH
52966: LD_INT 2
52968: NEG
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 1
52976: PUSH
52977: LD_INT 1
52979: NEG
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: LIST
52989: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52990: LD_ADDR_VAR 0 60
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: LD_INT 1
53000: NEG
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 2
53008: PUSH
53009: LD_INT 0
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 2
53018: PUSH
53019: LD_INT 1
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: LIST
53030: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53031: LD_ADDR_VAR 0 61
53035: PUSH
53036: LD_INT 2
53038: PUSH
53039: LD_INT 1
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 2
53048: PUSH
53049: LD_INT 2
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 1
53058: PUSH
53059: LD_INT 2
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: LIST
53070: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53071: LD_ADDR_VAR 0 62
53075: PUSH
53076: LD_INT 1
53078: PUSH
53079: LD_INT 2
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 0
53088: PUSH
53089: LD_INT 2
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 1
53098: NEG
53099: PUSH
53100: LD_INT 1
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: LIST
53111: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53112: LD_ADDR_VAR 0 63
53116: PUSH
53117: LD_INT 1
53119: NEG
53120: PUSH
53121: LD_INT 1
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 2
53130: NEG
53131: PUSH
53132: LD_INT 0
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 2
53141: NEG
53142: PUSH
53143: LD_INT 1
53145: NEG
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: LIST
53155: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53156: LD_ADDR_VAR 0 64
53160: PUSH
53161: LD_INT 1
53163: NEG
53164: PUSH
53165: LD_INT 2
53167: NEG
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 2
53175: NEG
53176: PUSH
53177: LD_INT 1
53179: NEG
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 2
53187: NEG
53188: PUSH
53189: LD_INT 2
53191: NEG
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: LIST
53201: ST_TO_ADDR
// end ; 2 :
53202: GO 56468
53204: LD_INT 2
53206: DOUBLE
53207: EQUAL
53208: IFTRUE 53212
53210: GO 56467
53212: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53213: LD_ADDR_VAR 0 29
53217: PUSH
53218: LD_INT 4
53220: PUSH
53221: LD_INT 0
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 4
53230: PUSH
53231: LD_INT 1
53233: NEG
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 5
53241: PUSH
53242: LD_INT 0
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 5
53251: PUSH
53252: LD_INT 1
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 4
53261: PUSH
53262: LD_INT 1
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 3
53271: PUSH
53272: LD_INT 0
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 3
53281: PUSH
53282: LD_INT 1
53284: NEG
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 3
53292: PUSH
53293: LD_INT 2
53295: NEG
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 5
53303: PUSH
53304: LD_INT 2
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 3
53313: PUSH
53314: LD_INT 3
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 3
53323: PUSH
53324: LD_INT 2
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 4
53333: PUSH
53334: LD_INT 3
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 4
53343: PUSH
53344: LD_INT 4
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 3
53353: PUSH
53354: LD_INT 4
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 2
53363: PUSH
53364: LD_INT 3
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 2
53373: PUSH
53374: LD_INT 2
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 4
53383: PUSH
53384: LD_INT 2
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 2
53393: PUSH
53394: LD_INT 4
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 0
53403: PUSH
53404: LD_INT 4
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 0
53413: PUSH
53414: LD_INT 3
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 1
53423: PUSH
53424: LD_INT 4
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 1
53433: PUSH
53434: LD_INT 5
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 0
53443: PUSH
53444: LD_INT 5
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 1
53453: NEG
53454: PUSH
53455: LD_INT 4
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 1
53464: NEG
53465: PUSH
53466: LD_INT 3
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 2
53475: PUSH
53476: LD_INT 5
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 2
53485: NEG
53486: PUSH
53487: LD_INT 3
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 3
53496: NEG
53497: PUSH
53498: LD_INT 0
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 3
53507: NEG
53508: PUSH
53509: LD_INT 1
53511: NEG
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 2
53519: NEG
53520: PUSH
53521: LD_INT 0
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 2
53530: NEG
53531: PUSH
53532: LD_INT 1
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 3
53541: NEG
53542: PUSH
53543: LD_INT 1
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 4
53552: NEG
53553: PUSH
53554: LD_INT 0
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 4
53563: NEG
53564: PUSH
53565: LD_INT 1
53567: NEG
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 4
53575: NEG
53576: PUSH
53577: LD_INT 2
53579: NEG
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 2
53587: NEG
53588: PUSH
53589: LD_INT 2
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 4
53598: NEG
53599: PUSH
53600: LD_INT 4
53602: NEG
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 4
53610: NEG
53611: PUSH
53612: LD_INT 5
53614: NEG
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 3
53622: NEG
53623: PUSH
53624: LD_INT 4
53626: NEG
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 3
53634: NEG
53635: PUSH
53636: LD_INT 3
53638: NEG
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 4
53646: NEG
53647: PUSH
53648: LD_INT 3
53650: NEG
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 5
53658: NEG
53659: PUSH
53660: LD_INT 4
53662: NEG
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 5
53670: NEG
53671: PUSH
53672: LD_INT 5
53674: NEG
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 3
53682: NEG
53683: PUSH
53684: LD_INT 5
53686: NEG
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 5
53694: NEG
53695: PUSH
53696: LD_INT 3
53698: NEG
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53751: LD_ADDR_VAR 0 30
53755: PUSH
53756: LD_INT 4
53758: PUSH
53759: LD_INT 4
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 4
53768: PUSH
53769: LD_INT 3
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 5
53778: PUSH
53779: LD_INT 4
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 5
53788: PUSH
53789: LD_INT 5
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 4
53798: PUSH
53799: LD_INT 5
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 3
53808: PUSH
53809: LD_INT 4
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 3
53818: PUSH
53819: LD_INT 3
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 5
53828: PUSH
53829: LD_INT 3
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 3
53838: PUSH
53839: LD_INT 5
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 0
53848: PUSH
53849: LD_INT 3
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 0
53858: PUSH
53859: LD_INT 2
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 1
53868: PUSH
53869: LD_INT 3
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 1
53878: PUSH
53879: LD_INT 4
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 0
53888: PUSH
53889: LD_INT 4
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 1
53898: NEG
53899: PUSH
53900: LD_INT 3
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 1
53909: NEG
53910: PUSH
53911: LD_INT 2
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 2
53920: PUSH
53921: LD_INT 4
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 2
53930: NEG
53931: PUSH
53932: LD_INT 2
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 4
53941: NEG
53942: PUSH
53943: LD_INT 0
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 4
53952: NEG
53953: PUSH
53954: LD_INT 1
53956: NEG
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 3
53964: NEG
53965: PUSH
53966: LD_INT 0
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 3
53975: NEG
53976: PUSH
53977: LD_INT 1
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 4
53986: NEG
53987: PUSH
53988: LD_INT 1
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 5
53997: NEG
53998: PUSH
53999: LD_INT 0
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 5
54008: NEG
54009: PUSH
54010: LD_INT 1
54012: NEG
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 5
54020: NEG
54021: PUSH
54022: LD_INT 2
54024: NEG
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 3
54032: NEG
54033: PUSH
54034: LD_INT 2
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 3
54043: NEG
54044: PUSH
54045: LD_INT 3
54047: NEG
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 3
54055: NEG
54056: PUSH
54057: LD_INT 4
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 2
54067: NEG
54068: PUSH
54069: LD_INT 3
54071: NEG
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 2
54079: NEG
54080: PUSH
54081: LD_INT 2
54083: NEG
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 3
54091: NEG
54092: PUSH
54093: LD_INT 2
54095: NEG
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 4
54103: NEG
54104: PUSH
54105: LD_INT 3
54107: NEG
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 4
54115: NEG
54116: PUSH
54117: LD_INT 4
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 2
54127: NEG
54128: PUSH
54129: LD_INT 4
54131: NEG
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 4
54139: NEG
54140: PUSH
54141: LD_INT 2
54143: NEG
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 0
54151: PUSH
54152: LD_INT 4
54154: NEG
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 0
54162: PUSH
54163: LD_INT 5
54165: NEG
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 1
54173: PUSH
54174: LD_INT 4
54176: NEG
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 1
54184: PUSH
54185: LD_INT 3
54187: NEG
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 0
54195: PUSH
54196: LD_INT 3
54198: NEG
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 1
54206: NEG
54207: PUSH
54208: LD_INT 4
54210: NEG
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 1
54218: NEG
54219: PUSH
54220: LD_INT 5
54222: NEG
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 2
54230: PUSH
54231: LD_INT 3
54233: NEG
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 2
54241: NEG
54242: PUSH
54243: LD_INT 5
54245: NEG
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54298: LD_ADDR_VAR 0 31
54302: PUSH
54303: LD_INT 0
54305: PUSH
54306: LD_INT 4
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 0
54315: PUSH
54316: LD_INT 3
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 1
54325: PUSH
54326: LD_INT 4
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 1
54335: PUSH
54336: LD_INT 5
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 0
54345: PUSH
54346: LD_INT 5
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 1
54355: NEG
54356: PUSH
54357: LD_INT 4
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 1
54366: NEG
54367: PUSH
54368: LD_INT 3
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 2
54377: PUSH
54378: LD_INT 5
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 2
54387: NEG
54388: PUSH
54389: LD_INT 3
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 3
54398: NEG
54399: PUSH
54400: LD_INT 0
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 3
54409: NEG
54410: PUSH
54411: LD_INT 1
54413: NEG
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 2
54421: NEG
54422: PUSH
54423: LD_INT 0
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 2
54432: NEG
54433: PUSH
54434: LD_INT 1
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 3
54443: NEG
54444: PUSH
54445: LD_INT 1
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 4
54454: NEG
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 4
54465: NEG
54466: PUSH
54467: LD_INT 1
54469: NEG
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 4
54477: NEG
54478: PUSH
54479: LD_INT 2
54481: NEG
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 2
54489: NEG
54490: PUSH
54491: LD_INT 2
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 4
54500: NEG
54501: PUSH
54502: LD_INT 4
54504: NEG
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 4
54512: NEG
54513: PUSH
54514: LD_INT 5
54516: NEG
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 3
54524: NEG
54525: PUSH
54526: LD_INT 4
54528: NEG
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 3
54536: NEG
54537: PUSH
54538: LD_INT 3
54540: NEG
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 4
54548: NEG
54549: PUSH
54550: LD_INT 3
54552: NEG
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 5
54560: NEG
54561: PUSH
54562: LD_INT 4
54564: NEG
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 5
54572: NEG
54573: PUSH
54574: LD_INT 5
54576: NEG
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 3
54584: NEG
54585: PUSH
54586: LD_INT 5
54588: NEG
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 5
54596: NEG
54597: PUSH
54598: LD_INT 3
54600: NEG
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 0
54608: PUSH
54609: LD_INT 3
54611: NEG
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 0
54619: PUSH
54620: LD_INT 4
54622: NEG
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 1
54630: PUSH
54631: LD_INT 3
54633: NEG
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 1
54641: PUSH
54642: LD_INT 2
54644: NEG
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 0
54652: PUSH
54653: LD_INT 2
54655: NEG
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 1
54663: NEG
54664: PUSH
54665: LD_INT 3
54667: NEG
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 1
54675: NEG
54676: PUSH
54677: LD_INT 4
54679: NEG
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 2
54687: PUSH
54688: LD_INT 2
54690: NEG
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 2
54698: NEG
54699: PUSH
54700: LD_INT 4
54702: NEG
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 4
54710: PUSH
54711: LD_INT 0
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 4
54720: PUSH
54721: LD_INT 1
54723: NEG
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 5
54731: PUSH
54732: LD_INT 0
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 5
54741: PUSH
54742: LD_INT 1
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 4
54751: PUSH
54752: LD_INT 1
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 3
54761: PUSH
54762: LD_INT 0
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 3
54771: PUSH
54772: LD_INT 1
54774: NEG
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 3
54782: PUSH
54783: LD_INT 2
54785: NEG
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 5
54793: PUSH
54794: LD_INT 2
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54848: LD_ADDR_VAR 0 32
54852: PUSH
54853: LD_INT 4
54855: NEG
54856: PUSH
54857: LD_INT 0
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 4
54866: NEG
54867: PUSH
54868: LD_INT 1
54870: NEG
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 3
54878: NEG
54879: PUSH
54880: LD_INT 0
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 3
54889: NEG
54890: PUSH
54891: LD_INT 1
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 4
54900: NEG
54901: PUSH
54902: LD_INT 1
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 5
54911: NEG
54912: PUSH
54913: LD_INT 0
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 5
54922: NEG
54923: PUSH
54924: LD_INT 1
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 5
54934: NEG
54935: PUSH
54936: LD_INT 2
54938: NEG
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 3
54946: NEG
54947: PUSH
54948: LD_INT 2
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 3
54957: NEG
54958: PUSH
54959: LD_INT 3
54961: NEG
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 3
54969: NEG
54970: PUSH
54971: LD_INT 4
54973: NEG
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 2
54981: NEG
54982: PUSH
54983: LD_INT 3
54985: NEG
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 2
54993: NEG
54994: PUSH
54995: LD_INT 2
54997: NEG
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 3
55005: NEG
55006: PUSH
55007: LD_INT 2
55009: NEG
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 4
55017: NEG
55018: PUSH
55019: LD_INT 3
55021: NEG
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 4
55029: NEG
55030: PUSH
55031: LD_INT 4
55033: NEG
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 2
55041: NEG
55042: PUSH
55043: LD_INT 4
55045: NEG
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 4
55053: NEG
55054: PUSH
55055: LD_INT 2
55057: NEG
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 0
55065: PUSH
55066: LD_INT 4
55068: NEG
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 0
55076: PUSH
55077: LD_INT 5
55079: NEG
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 1
55087: PUSH
55088: LD_INT 4
55090: NEG
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 1
55098: PUSH
55099: LD_INT 3
55101: NEG
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 0
55109: PUSH
55110: LD_INT 3
55112: NEG
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 1
55120: NEG
55121: PUSH
55122: LD_INT 4
55124: NEG
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 1
55132: NEG
55133: PUSH
55134: LD_INT 5
55136: NEG
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 2
55144: PUSH
55145: LD_INT 3
55147: NEG
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 2
55155: NEG
55156: PUSH
55157: LD_INT 5
55159: NEG
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 3
55167: PUSH
55168: LD_INT 0
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 3
55177: PUSH
55178: LD_INT 1
55180: NEG
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 4
55188: PUSH
55189: LD_INT 0
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 4
55198: PUSH
55199: LD_INT 1
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 3
55208: PUSH
55209: LD_INT 1
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 2
55218: PUSH
55219: LD_INT 0
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 2
55228: PUSH
55229: LD_INT 1
55231: NEG
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 2
55239: PUSH
55240: LD_INT 2
55242: NEG
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 4
55250: PUSH
55251: LD_INT 2
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 4
55260: PUSH
55261: LD_INT 4
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 4
55270: PUSH
55271: LD_INT 3
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 5
55280: PUSH
55281: LD_INT 4
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 5
55290: PUSH
55291: LD_INT 5
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 4
55300: PUSH
55301: LD_INT 5
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 3
55310: PUSH
55311: LD_INT 4
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 3
55320: PUSH
55321: LD_INT 3
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 5
55330: PUSH
55331: LD_INT 3
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 3
55340: PUSH
55341: LD_INT 5
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55395: LD_ADDR_VAR 0 33
55399: PUSH
55400: LD_INT 4
55402: NEG
55403: PUSH
55404: LD_INT 4
55406: NEG
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 4
55414: NEG
55415: PUSH
55416: LD_INT 5
55418: NEG
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 3
55426: NEG
55427: PUSH
55428: LD_INT 4
55430: NEG
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 3
55438: NEG
55439: PUSH
55440: LD_INT 3
55442: NEG
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 4
55450: NEG
55451: PUSH
55452: LD_INT 3
55454: NEG
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 5
55462: NEG
55463: PUSH
55464: LD_INT 4
55466: NEG
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 5
55474: NEG
55475: PUSH
55476: LD_INT 5
55478: NEG
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 3
55486: NEG
55487: PUSH
55488: LD_INT 5
55490: NEG
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 5
55498: NEG
55499: PUSH
55500: LD_INT 3
55502: NEG
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 0
55510: PUSH
55511: LD_INT 3
55513: NEG
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 0
55521: PUSH
55522: LD_INT 4
55524: NEG
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 1
55532: PUSH
55533: LD_INT 3
55535: NEG
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 1
55543: PUSH
55544: LD_INT 2
55546: NEG
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 0
55554: PUSH
55555: LD_INT 2
55557: NEG
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 1
55565: NEG
55566: PUSH
55567: LD_INT 3
55569: NEG
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 1
55577: NEG
55578: PUSH
55579: LD_INT 4
55581: NEG
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 2
55589: PUSH
55590: LD_INT 2
55592: NEG
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 2
55600: NEG
55601: PUSH
55602: LD_INT 4
55604: NEG
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 4
55612: PUSH
55613: LD_INT 0
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 4
55622: PUSH
55623: LD_INT 1
55625: NEG
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 5
55633: PUSH
55634: LD_INT 0
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 5
55643: PUSH
55644: LD_INT 1
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 4
55653: PUSH
55654: LD_INT 1
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 3
55663: PUSH
55664: LD_INT 0
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 3
55673: PUSH
55674: LD_INT 1
55676: NEG
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 3
55684: PUSH
55685: LD_INT 2
55687: NEG
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 5
55695: PUSH
55696: LD_INT 2
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 3
55705: PUSH
55706: LD_INT 3
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 3
55715: PUSH
55716: LD_INT 2
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 4
55725: PUSH
55726: LD_INT 3
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 4
55735: PUSH
55736: LD_INT 4
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 3
55745: PUSH
55746: LD_INT 4
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 2
55755: PUSH
55756: LD_INT 3
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 2
55765: PUSH
55766: LD_INT 2
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 4
55775: PUSH
55776: LD_INT 2
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 2
55785: PUSH
55786: LD_INT 4
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 0
55795: PUSH
55796: LD_INT 4
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 0
55805: PUSH
55806: LD_INT 3
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 1
55815: PUSH
55816: LD_INT 4
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 1
55825: PUSH
55826: LD_INT 5
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 0
55835: PUSH
55836: LD_INT 5
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 1
55845: NEG
55846: PUSH
55847: LD_INT 4
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 1
55856: NEG
55857: PUSH
55858: LD_INT 3
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 2
55867: PUSH
55868: LD_INT 5
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 2
55877: NEG
55878: PUSH
55879: LD_INT 3
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55933: LD_ADDR_VAR 0 34
55937: PUSH
55938: LD_INT 0
55940: PUSH
55941: LD_INT 4
55943: NEG
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 0
55951: PUSH
55952: LD_INT 5
55954: NEG
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 1
55962: PUSH
55963: LD_INT 4
55965: NEG
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 1
55973: PUSH
55974: LD_INT 3
55976: NEG
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 0
55984: PUSH
55985: LD_INT 3
55987: NEG
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 1
55995: NEG
55996: PUSH
55997: LD_INT 4
55999: NEG
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 1
56007: NEG
56008: PUSH
56009: LD_INT 5
56011: NEG
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 2
56019: PUSH
56020: LD_INT 3
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 2
56030: NEG
56031: PUSH
56032: LD_INT 5
56034: NEG
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 3
56042: PUSH
56043: LD_INT 0
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 3
56052: PUSH
56053: LD_INT 1
56055: NEG
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 4
56063: PUSH
56064: LD_INT 0
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 4
56073: PUSH
56074: LD_INT 1
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 3
56083: PUSH
56084: LD_INT 1
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 2
56093: PUSH
56094: LD_INT 0
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 2
56103: PUSH
56104: LD_INT 1
56106: NEG
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 2
56114: PUSH
56115: LD_INT 2
56117: NEG
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 4
56125: PUSH
56126: LD_INT 2
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 4
56135: PUSH
56136: LD_INT 4
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 4
56145: PUSH
56146: LD_INT 3
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 5
56155: PUSH
56156: LD_INT 4
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 5
56165: PUSH
56166: LD_INT 5
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 4
56175: PUSH
56176: LD_INT 5
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 3
56185: PUSH
56186: LD_INT 4
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 3
56195: PUSH
56196: LD_INT 3
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 5
56205: PUSH
56206: LD_INT 3
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 3
56215: PUSH
56216: LD_INT 5
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 0
56225: PUSH
56226: LD_INT 3
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 0
56235: PUSH
56236: LD_INT 2
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 1
56245: PUSH
56246: LD_INT 3
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 1
56255: PUSH
56256: LD_INT 4
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 0
56265: PUSH
56266: LD_INT 4
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 1
56275: NEG
56276: PUSH
56277: LD_INT 3
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 1
56286: NEG
56287: PUSH
56288: LD_INT 2
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 2
56297: PUSH
56298: LD_INT 4
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 2
56307: NEG
56308: PUSH
56309: LD_INT 2
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 4
56318: NEG
56319: PUSH
56320: LD_INT 0
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 4
56329: NEG
56330: PUSH
56331: LD_INT 1
56333: NEG
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 3
56341: NEG
56342: PUSH
56343: LD_INT 0
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 3
56352: NEG
56353: PUSH
56354: LD_INT 1
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 4
56363: NEG
56364: PUSH
56365: LD_INT 1
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 5
56374: NEG
56375: PUSH
56376: LD_INT 0
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 5
56385: NEG
56386: PUSH
56387: LD_INT 1
56389: NEG
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 5
56397: NEG
56398: PUSH
56399: LD_INT 2
56401: NEG
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 3
56409: NEG
56410: PUSH
56411: LD_INT 2
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: ST_TO_ADDR
// end ; end ;
56465: GO 56468
56467: POP
// case btype of b_depot , b_warehouse :
56468: LD_VAR 0 1
56472: PUSH
56473: LD_INT 0
56475: DOUBLE
56476: EQUAL
56477: IFTRUE 56487
56479: LD_INT 1
56481: DOUBLE
56482: EQUAL
56483: IFTRUE 56487
56485: GO 56688
56487: POP
// case nation of nation_american :
56488: LD_VAR 0 5
56492: PUSH
56493: LD_INT 1
56495: DOUBLE
56496: EQUAL
56497: IFTRUE 56501
56499: GO 56557
56501: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56502: LD_ADDR_VAR 0 9
56506: PUSH
56507: LD_VAR 0 11
56511: PUSH
56512: LD_VAR 0 12
56516: PUSH
56517: LD_VAR 0 13
56521: PUSH
56522: LD_VAR 0 14
56526: PUSH
56527: LD_VAR 0 15
56531: PUSH
56532: LD_VAR 0 16
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: PUSH
56545: LD_VAR 0 4
56549: PUSH
56550: LD_INT 1
56552: PLUS
56553: ARRAY
56554: ST_TO_ADDR
56555: GO 56686
56557: LD_INT 2
56559: DOUBLE
56560: EQUAL
56561: IFTRUE 56565
56563: GO 56621
56565: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56566: LD_ADDR_VAR 0 9
56570: PUSH
56571: LD_VAR 0 17
56575: PUSH
56576: LD_VAR 0 18
56580: PUSH
56581: LD_VAR 0 19
56585: PUSH
56586: LD_VAR 0 20
56590: PUSH
56591: LD_VAR 0 21
56595: PUSH
56596: LD_VAR 0 22
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: PUSH
56609: LD_VAR 0 4
56613: PUSH
56614: LD_INT 1
56616: PLUS
56617: ARRAY
56618: ST_TO_ADDR
56619: GO 56686
56621: LD_INT 3
56623: DOUBLE
56624: EQUAL
56625: IFTRUE 56629
56627: GO 56685
56629: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56630: LD_ADDR_VAR 0 9
56634: PUSH
56635: LD_VAR 0 23
56639: PUSH
56640: LD_VAR 0 24
56644: PUSH
56645: LD_VAR 0 25
56649: PUSH
56650: LD_VAR 0 26
56654: PUSH
56655: LD_VAR 0 27
56659: PUSH
56660: LD_VAR 0 28
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: PUSH
56673: LD_VAR 0 4
56677: PUSH
56678: LD_INT 1
56680: PLUS
56681: ARRAY
56682: ST_TO_ADDR
56683: GO 56686
56685: POP
56686: GO 57241
56688: LD_INT 2
56690: DOUBLE
56691: EQUAL
56692: IFTRUE 56702
56694: LD_INT 3
56696: DOUBLE
56697: EQUAL
56698: IFTRUE 56702
56700: GO 56758
56702: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56703: LD_ADDR_VAR 0 9
56707: PUSH
56708: LD_VAR 0 29
56712: PUSH
56713: LD_VAR 0 30
56717: PUSH
56718: LD_VAR 0 31
56722: PUSH
56723: LD_VAR 0 32
56727: PUSH
56728: LD_VAR 0 33
56732: PUSH
56733: LD_VAR 0 34
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: PUSH
56746: LD_VAR 0 4
56750: PUSH
56751: LD_INT 1
56753: PLUS
56754: ARRAY
56755: ST_TO_ADDR
56756: GO 57241
56758: LD_INT 16
56760: DOUBLE
56761: EQUAL
56762: IFTRUE 56820
56764: LD_INT 17
56766: DOUBLE
56767: EQUAL
56768: IFTRUE 56820
56770: LD_INT 18
56772: DOUBLE
56773: EQUAL
56774: IFTRUE 56820
56776: LD_INT 19
56778: DOUBLE
56779: EQUAL
56780: IFTRUE 56820
56782: LD_INT 22
56784: DOUBLE
56785: EQUAL
56786: IFTRUE 56820
56788: LD_INT 20
56790: DOUBLE
56791: EQUAL
56792: IFTRUE 56820
56794: LD_INT 21
56796: DOUBLE
56797: EQUAL
56798: IFTRUE 56820
56800: LD_INT 23
56802: DOUBLE
56803: EQUAL
56804: IFTRUE 56820
56806: LD_INT 24
56808: DOUBLE
56809: EQUAL
56810: IFTRUE 56820
56812: LD_INT 25
56814: DOUBLE
56815: EQUAL
56816: IFTRUE 56820
56818: GO 56876
56820: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56821: LD_ADDR_VAR 0 9
56825: PUSH
56826: LD_VAR 0 35
56830: PUSH
56831: LD_VAR 0 36
56835: PUSH
56836: LD_VAR 0 37
56840: PUSH
56841: LD_VAR 0 38
56845: PUSH
56846: LD_VAR 0 39
56850: PUSH
56851: LD_VAR 0 40
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: PUSH
56864: LD_VAR 0 4
56868: PUSH
56869: LD_INT 1
56871: PLUS
56872: ARRAY
56873: ST_TO_ADDR
56874: GO 57241
56876: LD_INT 6
56878: DOUBLE
56879: EQUAL
56880: IFTRUE 56932
56882: LD_INT 7
56884: DOUBLE
56885: EQUAL
56886: IFTRUE 56932
56888: LD_INT 8
56890: DOUBLE
56891: EQUAL
56892: IFTRUE 56932
56894: LD_INT 13
56896: DOUBLE
56897: EQUAL
56898: IFTRUE 56932
56900: LD_INT 12
56902: DOUBLE
56903: EQUAL
56904: IFTRUE 56932
56906: LD_INT 15
56908: DOUBLE
56909: EQUAL
56910: IFTRUE 56932
56912: LD_INT 11
56914: DOUBLE
56915: EQUAL
56916: IFTRUE 56932
56918: LD_INT 14
56920: DOUBLE
56921: EQUAL
56922: IFTRUE 56932
56924: LD_INT 10
56926: DOUBLE
56927: EQUAL
56928: IFTRUE 56932
56930: GO 56988
56932: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56933: LD_ADDR_VAR 0 9
56937: PUSH
56938: LD_VAR 0 41
56942: PUSH
56943: LD_VAR 0 42
56947: PUSH
56948: LD_VAR 0 43
56952: PUSH
56953: LD_VAR 0 44
56957: PUSH
56958: LD_VAR 0 45
56962: PUSH
56963: LD_VAR 0 46
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: PUSH
56976: LD_VAR 0 4
56980: PUSH
56981: LD_INT 1
56983: PLUS
56984: ARRAY
56985: ST_TO_ADDR
56986: GO 57241
56988: LD_INT 36
56990: DOUBLE
56991: EQUAL
56992: IFTRUE 56996
56994: GO 57052
56996: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56997: LD_ADDR_VAR 0 9
57001: PUSH
57002: LD_VAR 0 47
57006: PUSH
57007: LD_VAR 0 48
57011: PUSH
57012: LD_VAR 0 49
57016: PUSH
57017: LD_VAR 0 50
57021: PUSH
57022: LD_VAR 0 51
57026: PUSH
57027: LD_VAR 0 52
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: PUSH
57040: LD_VAR 0 4
57044: PUSH
57045: LD_INT 1
57047: PLUS
57048: ARRAY
57049: ST_TO_ADDR
57050: GO 57241
57052: LD_INT 4
57054: DOUBLE
57055: EQUAL
57056: IFTRUE 57078
57058: LD_INT 5
57060: DOUBLE
57061: EQUAL
57062: IFTRUE 57078
57064: LD_INT 34
57066: DOUBLE
57067: EQUAL
57068: IFTRUE 57078
57070: LD_INT 37
57072: DOUBLE
57073: EQUAL
57074: IFTRUE 57078
57076: GO 57134
57078: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57079: LD_ADDR_VAR 0 9
57083: PUSH
57084: LD_VAR 0 53
57088: PUSH
57089: LD_VAR 0 54
57093: PUSH
57094: LD_VAR 0 55
57098: PUSH
57099: LD_VAR 0 56
57103: PUSH
57104: LD_VAR 0 57
57108: PUSH
57109: LD_VAR 0 58
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: PUSH
57122: LD_VAR 0 4
57126: PUSH
57127: LD_INT 1
57129: PLUS
57130: ARRAY
57131: ST_TO_ADDR
57132: GO 57241
57134: LD_INT 31
57136: DOUBLE
57137: EQUAL
57138: IFTRUE 57184
57140: LD_INT 32
57142: DOUBLE
57143: EQUAL
57144: IFTRUE 57184
57146: LD_INT 33
57148: DOUBLE
57149: EQUAL
57150: IFTRUE 57184
57152: LD_INT 27
57154: DOUBLE
57155: EQUAL
57156: IFTRUE 57184
57158: LD_INT 26
57160: DOUBLE
57161: EQUAL
57162: IFTRUE 57184
57164: LD_INT 28
57166: DOUBLE
57167: EQUAL
57168: IFTRUE 57184
57170: LD_INT 29
57172: DOUBLE
57173: EQUAL
57174: IFTRUE 57184
57176: LD_INT 30
57178: DOUBLE
57179: EQUAL
57180: IFTRUE 57184
57182: GO 57240
57184: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57185: LD_ADDR_VAR 0 9
57189: PUSH
57190: LD_VAR 0 59
57194: PUSH
57195: LD_VAR 0 60
57199: PUSH
57200: LD_VAR 0 61
57204: PUSH
57205: LD_VAR 0 62
57209: PUSH
57210: LD_VAR 0 63
57214: PUSH
57215: LD_VAR 0 64
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: PUSH
57228: LD_VAR 0 4
57232: PUSH
57233: LD_INT 1
57235: PLUS
57236: ARRAY
57237: ST_TO_ADDR
57238: GO 57241
57240: POP
// temp_list2 = [ ] ;
57241: LD_ADDR_VAR 0 10
57245: PUSH
57246: EMPTY
57247: ST_TO_ADDR
// for i in temp_list do
57248: LD_ADDR_VAR 0 8
57252: PUSH
57253: LD_VAR 0 9
57257: PUSH
57258: FOR_IN
57259: IFFALSE 57311
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57261: LD_ADDR_VAR 0 10
57265: PUSH
57266: LD_VAR 0 10
57270: PUSH
57271: LD_VAR 0 8
57275: PUSH
57276: LD_INT 1
57278: ARRAY
57279: PUSH
57280: LD_VAR 0 2
57284: PLUS
57285: PUSH
57286: LD_VAR 0 8
57290: PUSH
57291: LD_INT 2
57293: ARRAY
57294: PUSH
57295: LD_VAR 0 3
57299: PLUS
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: EMPTY
57306: LIST
57307: ADD
57308: ST_TO_ADDR
57309: GO 57258
57311: POP
57312: POP
// result = temp_list2 ;
57313: LD_ADDR_VAR 0 7
57317: PUSH
57318: LD_VAR 0 10
57322: ST_TO_ADDR
// end ;
57323: LD_VAR 0 7
57327: RET
// export function EnemyInRange ( unit , dist ) ; begin
57328: LD_INT 0
57330: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57331: LD_ADDR_VAR 0 3
57335: PUSH
57336: LD_VAR 0 1
57340: PPUSH
57341: CALL_OW 255
57345: PPUSH
57346: LD_VAR 0 1
57350: PPUSH
57351: CALL_OW 250
57355: PPUSH
57356: LD_VAR 0 1
57360: PPUSH
57361: CALL_OW 251
57365: PPUSH
57366: LD_VAR 0 2
57370: PPUSH
57371: CALL 30585 0 4
57375: PUSH
57376: LD_INT 4
57378: ARRAY
57379: ST_TO_ADDR
// end ;
57380: LD_VAR 0 3
57384: RET
// export function PlayerSeeMe ( unit ) ; begin
57385: LD_INT 0
57387: PPUSH
// result := See ( your_side , unit ) ;
57388: LD_ADDR_VAR 0 2
57392: PUSH
57393: LD_OWVAR 2
57397: PPUSH
57398: LD_VAR 0 1
57402: PPUSH
57403: CALL_OW 292
57407: ST_TO_ADDR
// end ;
57408: LD_VAR 0 2
57412: RET
// export function ReverseDir ( unit ) ; begin
57413: LD_INT 0
57415: PPUSH
// if not unit then
57416: LD_VAR 0 1
57420: NOT
57421: IFFALSE 57425
// exit ;
57423: GO 57448
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57425: LD_ADDR_VAR 0 2
57429: PUSH
57430: LD_VAR 0 1
57434: PPUSH
57435: CALL_OW 254
57439: PUSH
57440: LD_INT 3
57442: PLUS
57443: PUSH
57444: LD_INT 6
57446: MOD
57447: ST_TO_ADDR
// end ;
57448: LD_VAR 0 2
57452: RET
// export function ReverseArray ( array ) ; var i ; begin
57453: LD_INT 0
57455: PPUSH
57456: PPUSH
// if not array then
57457: LD_VAR 0 1
57461: NOT
57462: IFFALSE 57466
// exit ;
57464: GO 57521
// result := [ ] ;
57466: LD_ADDR_VAR 0 2
57470: PUSH
57471: EMPTY
57472: ST_TO_ADDR
// for i := array downto 1 do
57473: LD_ADDR_VAR 0 3
57477: PUSH
57478: DOUBLE
57479: LD_VAR 0 1
57483: INC
57484: ST_TO_ADDR
57485: LD_INT 1
57487: PUSH
57488: FOR_DOWNTO
57489: IFFALSE 57519
// result := Join ( result , array [ i ] ) ;
57491: LD_ADDR_VAR 0 2
57495: PUSH
57496: LD_VAR 0 2
57500: PPUSH
57501: LD_VAR 0 1
57505: PUSH
57506: LD_VAR 0 3
57510: ARRAY
57511: PPUSH
57512: CALL 62373 0 2
57516: ST_TO_ADDR
57517: GO 57488
57519: POP
57520: POP
// end ;
57521: LD_VAR 0 2
57525: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
57526: LD_INT 0
57528: PPUSH
57529: PPUSH
57530: PPUSH
57531: PPUSH
57532: PPUSH
57533: PPUSH
// if not unit or not hexes then
57534: LD_VAR 0 1
57538: NOT
57539: IFTRUE 57548
57541: PUSH
57542: LD_VAR 0 2
57546: NOT
57547: OR
57548: IFFALSE 57552
// exit ;
57550: GO 57675
// dist := 9999 ;
57552: LD_ADDR_VAR 0 5
57556: PUSH
57557: LD_INT 9999
57559: ST_TO_ADDR
// for i = 1 to hexes do
57560: LD_ADDR_VAR 0 4
57564: PUSH
57565: DOUBLE
57566: LD_INT 1
57568: DEC
57569: ST_TO_ADDR
57570: LD_VAR 0 2
57574: PUSH
57575: FOR_TO
57576: IFFALSE 57663
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57578: LD_ADDR_VAR 0 6
57582: PUSH
57583: LD_VAR 0 1
57587: PPUSH
57588: LD_VAR 0 2
57592: PUSH
57593: LD_VAR 0 4
57597: ARRAY
57598: PUSH
57599: LD_INT 1
57601: ARRAY
57602: PPUSH
57603: LD_VAR 0 2
57607: PUSH
57608: LD_VAR 0 4
57612: ARRAY
57613: PUSH
57614: LD_INT 2
57616: ARRAY
57617: PPUSH
57618: CALL_OW 297
57622: ST_TO_ADDR
// if tdist < dist then
57623: LD_VAR 0 6
57627: PUSH
57628: LD_VAR 0 5
57632: LESS
57633: IFFALSE 57661
// begin hex := hexes [ i ] ;
57635: LD_ADDR_VAR 0 8
57639: PUSH
57640: LD_VAR 0 2
57644: PUSH
57645: LD_VAR 0 4
57649: ARRAY
57650: ST_TO_ADDR
// dist := tdist ;
57651: LD_ADDR_VAR 0 5
57655: PUSH
57656: LD_VAR 0 6
57660: ST_TO_ADDR
// end ; end ;
57661: GO 57575
57663: POP
57664: POP
// result := hex ;
57665: LD_ADDR_VAR 0 3
57669: PUSH
57670: LD_VAR 0 8
57674: ST_TO_ADDR
// end ;
57675: LD_VAR 0 3
57679: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57680: LD_INT 0
57682: PPUSH
57683: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57684: LD_VAR 0 1
57688: NOT
57689: IFTRUE 57728
57691: PUSH
57692: LD_VAR 0 1
57696: PUSH
57697: LD_INT 21
57699: PUSH
57700: LD_INT 2
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 23
57709: PUSH
57710: LD_INT 2
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PPUSH
57721: CALL_OW 69
57725: IN
57726: NOT
57727: OR
57728: IFFALSE 57732
// exit ;
57730: GO 57779
// for i = 1 to 3 do
57732: LD_ADDR_VAR 0 3
57736: PUSH
57737: DOUBLE
57738: LD_INT 1
57740: DEC
57741: ST_TO_ADDR
57742: LD_INT 3
57744: PUSH
57745: FOR_TO
57746: IFFALSE 57777
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57748: LD_VAR 0 1
57752: PPUSH
57753: CALL_OW 250
57757: PPUSH
57758: LD_VAR 0 1
57762: PPUSH
57763: CALL_OW 251
57767: PPUSH
57768: LD_INT 1
57770: PPUSH
57771: CALL_OW 453
57775: GO 57745
57777: POP
57778: POP
// end ;
57779: LD_VAR 0 2
57783: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57784: LD_INT 0
57786: PPUSH
57787: PPUSH
57788: PPUSH
57789: PPUSH
57790: PPUSH
57791: PPUSH
// if not unit or not enemy_unit then
57792: LD_VAR 0 1
57796: NOT
57797: IFTRUE 57806
57799: PUSH
57800: LD_VAR 0 2
57804: NOT
57805: OR
57806: IFFALSE 57810
// exit ;
57808: GO 58291
// if GetLives ( i ) < 250 then
57810: LD_VAR 0 4
57814: PPUSH
57815: CALL_OW 256
57819: PUSH
57820: LD_INT 250
57822: LESS
57823: IFFALSE 57836
// begin ComAutodestruct ( i ) ;
57825: LD_VAR 0 4
57829: PPUSH
57830: CALL 57680 0 1
// exit ;
57834: GO 58291
// end ; x := GetX ( enemy_unit ) ;
57836: LD_ADDR_VAR 0 7
57840: PUSH
57841: LD_VAR 0 2
57845: PPUSH
57846: CALL_OW 250
57850: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57851: LD_ADDR_VAR 0 8
57855: PUSH
57856: LD_VAR 0 2
57860: PPUSH
57861: CALL_OW 251
57865: ST_TO_ADDR
// if not x or not y then
57866: LD_VAR 0 7
57870: NOT
57871: IFTRUE 57880
57873: PUSH
57874: LD_VAR 0 8
57878: NOT
57879: OR
57880: IFFALSE 57884
// exit ;
57882: GO 58291
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57884: LD_ADDR_VAR 0 6
57888: PUSH
57889: LD_VAR 0 7
57893: PPUSH
57894: LD_INT 0
57896: PPUSH
57897: LD_INT 4
57899: PPUSH
57900: CALL_OW 272
57904: PUSH
57905: LD_VAR 0 8
57909: PPUSH
57910: LD_INT 0
57912: PPUSH
57913: LD_INT 4
57915: PPUSH
57916: CALL_OW 273
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_VAR 0 7
57929: PPUSH
57930: LD_INT 1
57932: PPUSH
57933: LD_INT 4
57935: PPUSH
57936: CALL_OW 272
57940: PUSH
57941: LD_VAR 0 8
57945: PPUSH
57946: LD_INT 1
57948: PPUSH
57949: LD_INT 4
57951: PPUSH
57952: CALL_OW 273
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_VAR 0 7
57965: PPUSH
57966: LD_INT 2
57968: PPUSH
57969: LD_INT 4
57971: PPUSH
57972: CALL_OW 272
57976: PUSH
57977: LD_VAR 0 8
57981: PPUSH
57982: LD_INT 2
57984: PPUSH
57985: LD_INT 4
57987: PPUSH
57988: CALL_OW 273
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_VAR 0 7
58001: PPUSH
58002: LD_INT 3
58004: PPUSH
58005: LD_INT 4
58007: PPUSH
58008: CALL_OW 272
58012: PUSH
58013: LD_VAR 0 8
58017: PPUSH
58018: LD_INT 3
58020: PPUSH
58021: LD_INT 4
58023: PPUSH
58024: CALL_OW 273
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_VAR 0 7
58037: PPUSH
58038: LD_INT 4
58040: PPUSH
58041: LD_INT 4
58043: PPUSH
58044: CALL_OW 272
58048: PUSH
58049: LD_VAR 0 8
58053: PPUSH
58054: LD_INT 4
58056: PPUSH
58057: LD_INT 4
58059: PPUSH
58060: CALL_OW 273
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_VAR 0 7
58073: PPUSH
58074: LD_INT 5
58076: PPUSH
58077: LD_INT 4
58079: PPUSH
58080: CALL_OW 272
58084: PUSH
58085: LD_VAR 0 8
58089: PPUSH
58090: LD_INT 5
58092: PPUSH
58093: LD_INT 4
58095: PPUSH
58096: CALL_OW 273
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: ST_TO_ADDR
// for i = tmp downto 1 do
58113: LD_ADDR_VAR 0 4
58117: PUSH
58118: DOUBLE
58119: LD_VAR 0 6
58123: INC
58124: ST_TO_ADDR
58125: LD_INT 1
58127: PUSH
58128: FOR_DOWNTO
58129: IFFALSE 58232
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58131: LD_VAR 0 6
58135: PUSH
58136: LD_VAR 0 4
58140: ARRAY
58141: PUSH
58142: LD_INT 1
58144: ARRAY
58145: PPUSH
58146: LD_VAR 0 6
58150: PUSH
58151: LD_VAR 0 4
58155: ARRAY
58156: PUSH
58157: LD_INT 2
58159: ARRAY
58160: PPUSH
58161: CALL_OW 488
58165: NOT
58166: IFTRUE 58208
58168: PUSH
58169: LD_VAR 0 6
58173: PUSH
58174: LD_VAR 0 4
58178: ARRAY
58179: PUSH
58180: LD_INT 1
58182: ARRAY
58183: PPUSH
58184: LD_VAR 0 6
58188: PUSH
58189: LD_VAR 0 4
58193: ARRAY
58194: PUSH
58195: LD_INT 2
58197: ARRAY
58198: PPUSH
58199: CALL_OW 428
58203: PUSH
58204: LD_INT 0
58206: NONEQUAL
58207: OR
58208: IFFALSE 58230
// tmp := Delete ( tmp , i ) ;
58210: LD_ADDR_VAR 0 6
58214: PUSH
58215: LD_VAR 0 6
58219: PPUSH
58220: LD_VAR 0 4
58224: PPUSH
58225: CALL_OW 3
58229: ST_TO_ADDR
58230: GO 58128
58232: POP
58233: POP
// j := GetClosestHex ( unit , tmp ) ;
58234: LD_ADDR_VAR 0 5
58238: PUSH
58239: LD_VAR 0 1
58243: PPUSH
58244: LD_VAR 0 6
58248: PPUSH
58249: CALL 57526 0 2
58253: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58254: LD_VAR 0 1
58258: PPUSH
58259: LD_VAR 0 5
58263: PUSH
58264: LD_INT 1
58266: ARRAY
58267: PPUSH
58268: LD_VAR 0 5
58272: PUSH
58273: LD_INT 2
58275: ARRAY
58276: PPUSH
58277: CALL_OW 111
// result := j ;
58281: LD_ADDR_VAR 0 3
58285: PUSH
58286: LD_VAR 0 5
58290: ST_TO_ADDR
// end ;
58291: LD_VAR 0 3
58295: RET
// export function PrepareApemanSoldier ( ) ; begin
58296: LD_INT 0
58298: PPUSH
// uc_nation := 0 ;
58299: LD_ADDR_OWVAR 21
58303: PUSH
58304: LD_INT 0
58306: ST_TO_ADDR
// hc_sex := sex_male ;
58307: LD_ADDR_OWVAR 27
58311: PUSH
58312: LD_INT 1
58314: ST_TO_ADDR
// hc_name :=  ;
58315: LD_ADDR_OWVAR 26
58319: PUSH
58320: LD_STRING 
58322: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
58323: LD_ADDR_OWVAR 28
58327: PUSH
58328: LD_INT 15
58330: ST_TO_ADDR
// hc_gallery :=  ;
58331: LD_ADDR_OWVAR 33
58335: PUSH
58336: LD_STRING 
58338: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58339: LD_ADDR_OWVAR 31
58343: PUSH
58344: LD_INT 0
58346: PPUSH
58347: LD_INT 3
58349: PPUSH
58350: CALL_OW 12
58354: PUSH
58355: LD_INT 0
58357: PPUSH
58358: LD_INT 3
58360: PPUSH
58361: CALL_OW 12
58365: PUSH
58366: LD_INT 0
58368: PUSH
58369: LD_INT 0
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
58378: LD_ADDR_OWVAR 29
58382: PUSH
58383: LD_INT 10
58385: PUSH
58386: LD_INT 12
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: ST_TO_ADDR
// end ;
58393: LD_VAR 0 1
58397: RET
// export function PrepareApemanEngineer ( ) ; begin
58398: LD_INT 0
58400: PPUSH
// uc_nation := 0 ;
58401: LD_ADDR_OWVAR 21
58405: PUSH
58406: LD_INT 0
58408: ST_TO_ADDR
// hc_sex := sex_male ;
58409: LD_ADDR_OWVAR 27
58413: PUSH
58414: LD_INT 1
58416: ST_TO_ADDR
// hc_name :=  ;
58417: LD_ADDR_OWVAR 26
58421: PUSH
58422: LD_STRING 
58424: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
58425: LD_ADDR_OWVAR 28
58429: PUSH
58430: LD_INT 16
58432: ST_TO_ADDR
// hc_gallery :=  ;
58433: LD_ADDR_OWVAR 33
58437: PUSH
58438: LD_STRING 
58440: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58441: LD_ADDR_OWVAR 31
58445: PUSH
58446: LD_INT 0
58448: PPUSH
58449: LD_INT 3
58451: PPUSH
58452: CALL_OW 12
58456: PUSH
58457: LD_INT 0
58459: PPUSH
58460: LD_INT 3
58462: PPUSH
58463: CALL_OW 12
58467: PUSH
58468: LD_INT 0
58470: PUSH
58471: LD_INT 0
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
58480: LD_ADDR_OWVAR 29
58484: PUSH
58485: LD_INT 10
58487: PUSH
58488: LD_INT 12
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: ST_TO_ADDR
// end ;
58495: LD_VAR 0 1
58499: RET
// export function PrepareApeman ( agressivity ) ; begin
58500: LD_INT 0
58502: PPUSH
// uc_side := 0 ;
58503: LD_ADDR_OWVAR 20
58507: PUSH
58508: LD_INT 0
58510: ST_TO_ADDR
// uc_nation := 0 ;
58511: LD_ADDR_OWVAR 21
58515: PUSH
58516: LD_INT 0
58518: ST_TO_ADDR
// hc_sex := sex_male ;
58519: LD_ADDR_OWVAR 27
58523: PUSH
58524: LD_INT 1
58526: ST_TO_ADDR
// hc_class := class_apeman ;
58527: LD_ADDR_OWVAR 28
58531: PUSH
58532: LD_INT 12
58534: ST_TO_ADDR
// hc_gallery :=  ;
58535: LD_ADDR_OWVAR 33
58539: PUSH
58540: LD_STRING 
58542: ST_TO_ADDR
// hc_name :=  ;
58543: LD_ADDR_OWVAR 26
58547: PUSH
58548: LD_STRING 
58550: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
58551: LD_ADDR_OWVAR 29
58555: PUSH
58556: LD_INT 10
58558: PUSH
58559: LD_INT 12
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: ST_TO_ADDR
// if agressivity = 0 then
58566: LD_VAR 0 1
58570: PUSH
58571: LD_INT 0
58573: EQUAL
58574: IFFALSE 58586
// hc_agressivity := 0 else
58576: LD_ADDR_OWVAR 35
58580: PUSH
58581: LD_INT 0
58583: ST_TO_ADDR
58584: GO 58607
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58586: LD_ADDR_OWVAR 35
58590: PUSH
58591: LD_VAR 0 1
58595: NEG
58596: PPUSH
58597: LD_VAR 0 1
58601: PPUSH
58602: CALL_OW 12
58606: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58607: LD_ADDR_OWVAR 31
58611: PUSH
58612: LD_INT 0
58614: PPUSH
58615: LD_INT 3
58617: PPUSH
58618: CALL_OW 12
58622: PUSH
58623: LD_INT 0
58625: PPUSH
58626: LD_INT 3
58628: PPUSH
58629: CALL_OW 12
58633: PUSH
58634: LD_INT 0
58636: PUSH
58637: LD_INT 0
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: ST_TO_ADDR
// end ;
58646: LD_VAR 0 2
58650: RET
// export function PrepareTiger ( agressivity ) ; begin
58651: LD_INT 0
58653: PPUSH
// uc_side := 0 ;
58654: LD_ADDR_OWVAR 20
58658: PUSH
58659: LD_INT 0
58661: ST_TO_ADDR
// uc_nation := 0 ;
58662: LD_ADDR_OWVAR 21
58666: PUSH
58667: LD_INT 0
58669: ST_TO_ADDR
// InitHc ;
58670: CALL_OW 19
// hc_class := class_tiger ;
58674: LD_ADDR_OWVAR 28
58678: PUSH
58679: LD_INT 14
58681: ST_TO_ADDR
// hc_gallery :=  ;
58682: LD_ADDR_OWVAR 33
58686: PUSH
58687: LD_STRING 
58689: ST_TO_ADDR
// hc_name :=  ;
58690: LD_ADDR_OWVAR 26
58694: PUSH
58695: LD_STRING 
58697: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58698: LD_ADDR_OWVAR 35
58702: PUSH
58703: LD_VAR 0 1
58707: NEG
58708: PPUSH
58709: LD_VAR 0 1
58713: PPUSH
58714: CALL_OW 12
58718: ST_TO_ADDR
// end ;
58719: LD_VAR 0 2
58723: RET
// export function PrepareEnchidna ( ) ; begin
58724: LD_INT 0
58726: PPUSH
// uc_side := 0 ;
58727: LD_ADDR_OWVAR 20
58731: PUSH
58732: LD_INT 0
58734: ST_TO_ADDR
// uc_nation := 0 ;
58735: LD_ADDR_OWVAR 21
58739: PUSH
58740: LD_INT 0
58742: ST_TO_ADDR
// InitHc ;
58743: CALL_OW 19
// hc_class := class_baggie ;
58747: LD_ADDR_OWVAR 28
58751: PUSH
58752: LD_INT 13
58754: ST_TO_ADDR
// hc_gallery :=  ;
58755: LD_ADDR_OWVAR 33
58759: PUSH
58760: LD_STRING 
58762: ST_TO_ADDR
// hc_name :=  ;
58763: LD_ADDR_OWVAR 26
58767: PUSH
58768: LD_STRING 
58770: ST_TO_ADDR
// end ;
58771: LD_VAR 0 1
58775: RET
// export function PrepareFrog ( ) ; begin
58776: LD_INT 0
58778: PPUSH
// uc_side := 0 ;
58779: LD_ADDR_OWVAR 20
58783: PUSH
58784: LD_INT 0
58786: ST_TO_ADDR
// uc_nation := 0 ;
58787: LD_ADDR_OWVAR 21
58791: PUSH
58792: LD_INT 0
58794: ST_TO_ADDR
// InitHc ;
58795: CALL_OW 19
// hc_class := class_frog ;
58799: LD_ADDR_OWVAR 28
58803: PUSH
58804: LD_INT 19
58806: ST_TO_ADDR
// hc_gallery :=  ;
58807: LD_ADDR_OWVAR 33
58811: PUSH
58812: LD_STRING 
58814: ST_TO_ADDR
// hc_name :=  ;
58815: LD_ADDR_OWVAR 26
58819: PUSH
58820: LD_STRING 
58822: ST_TO_ADDR
// end ;
58823: LD_VAR 0 1
58827: RET
// export function PrepareFish ( ) ; begin
58828: LD_INT 0
58830: PPUSH
// uc_side := 0 ;
58831: LD_ADDR_OWVAR 20
58835: PUSH
58836: LD_INT 0
58838: ST_TO_ADDR
// uc_nation := 0 ;
58839: LD_ADDR_OWVAR 21
58843: PUSH
58844: LD_INT 0
58846: ST_TO_ADDR
// InitHc ;
58847: CALL_OW 19
// hc_class := class_fish ;
58851: LD_ADDR_OWVAR 28
58855: PUSH
58856: LD_INT 20
58858: ST_TO_ADDR
// hc_gallery :=  ;
58859: LD_ADDR_OWVAR 33
58863: PUSH
58864: LD_STRING 
58866: ST_TO_ADDR
// hc_name :=  ;
58867: LD_ADDR_OWVAR 26
58871: PUSH
58872: LD_STRING 
58874: ST_TO_ADDR
// end ;
58875: LD_VAR 0 1
58879: RET
// export function PrepareBird ( ) ; begin
58880: LD_INT 0
58882: PPUSH
// uc_side := 0 ;
58883: LD_ADDR_OWVAR 20
58887: PUSH
58888: LD_INT 0
58890: ST_TO_ADDR
// uc_nation := 0 ;
58891: LD_ADDR_OWVAR 21
58895: PUSH
58896: LD_INT 0
58898: ST_TO_ADDR
// InitHc ;
58899: CALL_OW 19
// hc_class := class_phororhacos ;
58903: LD_ADDR_OWVAR 28
58907: PUSH
58908: LD_INT 18
58910: ST_TO_ADDR
// hc_gallery :=  ;
58911: LD_ADDR_OWVAR 33
58915: PUSH
58916: LD_STRING 
58918: ST_TO_ADDR
// hc_name :=  ;
58919: LD_ADDR_OWVAR 26
58923: PUSH
58924: LD_STRING 
58926: ST_TO_ADDR
// end ;
58927: LD_VAR 0 1
58931: RET
// export function PrepareHorse ( ) ; begin
58932: LD_INT 0
58934: PPUSH
// uc_side := 0 ;
58935: LD_ADDR_OWVAR 20
58939: PUSH
58940: LD_INT 0
58942: ST_TO_ADDR
// uc_nation := 0 ;
58943: LD_ADDR_OWVAR 21
58947: PUSH
58948: LD_INT 0
58950: ST_TO_ADDR
// InitHc ;
58951: CALL_OW 19
// hc_class := class_horse ;
58955: LD_ADDR_OWVAR 28
58959: PUSH
58960: LD_INT 21
58962: ST_TO_ADDR
// hc_gallery :=  ;
58963: LD_ADDR_OWVAR 33
58967: PUSH
58968: LD_STRING 
58970: ST_TO_ADDR
// hc_name :=  ;
58971: LD_ADDR_OWVAR 26
58975: PUSH
58976: LD_STRING 
58978: ST_TO_ADDR
// end ;
58979: LD_VAR 0 1
58983: RET
// export function PrepareMastodont ( ) ; begin
58984: LD_INT 0
58986: PPUSH
// uc_side := 0 ;
58987: LD_ADDR_OWVAR 20
58991: PUSH
58992: LD_INT 0
58994: ST_TO_ADDR
// uc_nation := 0 ;
58995: LD_ADDR_OWVAR 21
58999: PUSH
59000: LD_INT 0
59002: ST_TO_ADDR
// vc_chassis := class_mastodont ;
59003: LD_ADDR_OWVAR 37
59007: PUSH
59008: LD_INT 31
59010: ST_TO_ADDR
// vc_control := control_rider ;
59011: LD_ADDR_OWVAR 38
59015: PUSH
59016: LD_INT 4
59018: ST_TO_ADDR
// end ;
59019: LD_VAR 0 1
59023: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59024: LD_INT 0
59026: PPUSH
59027: PPUSH
59028: PPUSH
// uc_side = 0 ;
59029: LD_ADDR_OWVAR 20
59033: PUSH
59034: LD_INT 0
59036: ST_TO_ADDR
// uc_nation = 0 ;
59037: LD_ADDR_OWVAR 21
59041: PUSH
59042: LD_INT 0
59044: ST_TO_ADDR
// InitHc_All ( ) ;
59045: CALL_OW 584
// InitVc ;
59049: CALL_OW 20
// if mastodonts then
59053: LD_VAR 0 6
59057: IFFALSE 59124
// for i = 1 to mastodonts do
59059: LD_ADDR_VAR 0 11
59063: PUSH
59064: DOUBLE
59065: LD_INT 1
59067: DEC
59068: ST_TO_ADDR
59069: LD_VAR 0 6
59073: PUSH
59074: FOR_TO
59075: IFFALSE 59122
// begin vc_chassis := 31 ;
59077: LD_ADDR_OWVAR 37
59081: PUSH
59082: LD_INT 31
59084: ST_TO_ADDR
// vc_control := control_rider ;
59085: LD_ADDR_OWVAR 38
59089: PUSH
59090: LD_INT 4
59092: ST_TO_ADDR
// animal := CreateVehicle ;
59093: LD_ADDR_VAR 0 12
59097: PUSH
59098: CALL_OW 45
59102: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59103: LD_VAR 0 12
59107: PPUSH
59108: LD_VAR 0 8
59112: PPUSH
59113: LD_INT 0
59115: PPUSH
59116: CALL 61266 0 3
// end ;
59120: GO 59074
59122: POP
59123: POP
// if horses then
59124: LD_VAR 0 5
59128: IFFALSE 59195
// for i = 1 to horses do
59130: LD_ADDR_VAR 0 11
59134: PUSH
59135: DOUBLE
59136: LD_INT 1
59138: DEC
59139: ST_TO_ADDR
59140: LD_VAR 0 5
59144: PUSH
59145: FOR_TO
59146: IFFALSE 59193
// begin hc_class := 21 ;
59148: LD_ADDR_OWVAR 28
59152: PUSH
59153: LD_INT 21
59155: ST_TO_ADDR
// hc_gallery :=  ;
59156: LD_ADDR_OWVAR 33
59160: PUSH
59161: LD_STRING 
59163: ST_TO_ADDR
// animal := CreateHuman ;
59164: LD_ADDR_VAR 0 12
59168: PUSH
59169: CALL_OW 44
59173: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59174: LD_VAR 0 12
59178: PPUSH
59179: LD_VAR 0 8
59183: PPUSH
59184: LD_INT 0
59186: PPUSH
59187: CALL 61266 0 3
// end ;
59191: GO 59145
59193: POP
59194: POP
// if birds then
59195: LD_VAR 0 1
59199: IFFALSE 59266
// for i = 1 to birds do
59201: LD_ADDR_VAR 0 11
59205: PUSH
59206: DOUBLE
59207: LD_INT 1
59209: DEC
59210: ST_TO_ADDR
59211: LD_VAR 0 1
59215: PUSH
59216: FOR_TO
59217: IFFALSE 59264
// begin hc_class := 18 ;
59219: LD_ADDR_OWVAR 28
59223: PUSH
59224: LD_INT 18
59226: ST_TO_ADDR
// hc_gallery =  ;
59227: LD_ADDR_OWVAR 33
59231: PUSH
59232: LD_STRING 
59234: ST_TO_ADDR
// animal := CreateHuman ;
59235: LD_ADDR_VAR 0 12
59239: PUSH
59240: CALL_OW 44
59244: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59245: LD_VAR 0 12
59249: PPUSH
59250: LD_VAR 0 8
59254: PPUSH
59255: LD_INT 0
59257: PPUSH
59258: CALL 61266 0 3
// end ;
59262: GO 59216
59264: POP
59265: POP
// if tigers then
59266: LD_VAR 0 2
59270: IFFALSE 59354
// for i = 1 to tigers do
59272: LD_ADDR_VAR 0 11
59276: PUSH
59277: DOUBLE
59278: LD_INT 1
59280: DEC
59281: ST_TO_ADDR
59282: LD_VAR 0 2
59286: PUSH
59287: FOR_TO
59288: IFFALSE 59352
// begin hc_class = class_tiger ;
59290: LD_ADDR_OWVAR 28
59294: PUSH
59295: LD_INT 14
59297: ST_TO_ADDR
// hc_gallery =  ;
59298: LD_ADDR_OWVAR 33
59302: PUSH
59303: LD_STRING 
59305: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59306: LD_ADDR_OWVAR 35
59310: PUSH
59311: LD_INT 7
59313: NEG
59314: PPUSH
59315: LD_INT 7
59317: PPUSH
59318: CALL_OW 12
59322: ST_TO_ADDR
// animal := CreateHuman ;
59323: LD_ADDR_VAR 0 12
59327: PUSH
59328: CALL_OW 44
59332: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59333: LD_VAR 0 12
59337: PPUSH
59338: LD_VAR 0 8
59342: PPUSH
59343: LD_INT 0
59345: PPUSH
59346: CALL 61266 0 3
// end ;
59350: GO 59287
59352: POP
59353: POP
// if apemans then
59354: LD_VAR 0 3
59358: IFFALSE 59481
// for i = 1 to apemans do
59360: LD_ADDR_VAR 0 11
59364: PUSH
59365: DOUBLE
59366: LD_INT 1
59368: DEC
59369: ST_TO_ADDR
59370: LD_VAR 0 3
59374: PUSH
59375: FOR_TO
59376: IFFALSE 59479
// begin hc_class = class_apeman ;
59378: LD_ADDR_OWVAR 28
59382: PUSH
59383: LD_INT 12
59385: ST_TO_ADDR
// hc_gallery =  ;
59386: LD_ADDR_OWVAR 33
59390: PUSH
59391: LD_STRING 
59393: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59394: LD_ADDR_OWVAR 35
59398: PUSH
59399: LD_INT 2
59401: NEG
59402: PPUSH
59403: LD_INT 2
59405: PPUSH
59406: CALL_OW 12
59410: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59411: LD_ADDR_OWVAR 31
59415: PUSH
59416: LD_INT 1
59418: PPUSH
59419: LD_INT 3
59421: PPUSH
59422: CALL_OW 12
59426: PUSH
59427: LD_INT 1
59429: PPUSH
59430: LD_INT 3
59432: PPUSH
59433: CALL_OW 12
59437: PUSH
59438: LD_INT 0
59440: PUSH
59441: LD_INT 0
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: ST_TO_ADDR
// animal := CreateHuman ;
59450: LD_ADDR_VAR 0 12
59454: PUSH
59455: CALL_OW 44
59459: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59460: LD_VAR 0 12
59464: PPUSH
59465: LD_VAR 0 8
59469: PPUSH
59470: LD_INT 0
59472: PPUSH
59473: CALL 61266 0 3
// end ;
59477: GO 59375
59479: POP
59480: POP
// if enchidnas then
59481: LD_VAR 0 4
59485: IFFALSE 59552
// for i = 1 to enchidnas do
59487: LD_ADDR_VAR 0 11
59491: PUSH
59492: DOUBLE
59493: LD_INT 1
59495: DEC
59496: ST_TO_ADDR
59497: LD_VAR 0 4
59501: PUSH
59502: FOR_TO
59503: IFFALSE 59550
// begin hc_class = 13 ;
59505: LD_ADDR_OWVAR 28
59509: PUSH
59510: LD_INT 13
59512: ST_TO_ADDR
// hc_gallery =  ;
59513: LD_ADDR_OWVAR 33
59517: PUSH
59518: LD_STRING 
59520: ST_TO_ADDR
// animal := CreateHuman ;
59521: LD_ADDR_VAR 0 12
59525: PUSH
59526: CALL_OW 44
59530: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59531: LD_VAR 0 12
59535: PPUSH
59536: LD_VAR 0 8
59540: PPUSH
59541: LD_INT 0
59543: PPUSH
59544: CALL 61266 0 3
// end ;
59548: GO 59502
59550: POP
59551: POP
// if fishes then
59552: LD_VAR 0 7
59556: IFFALSE 59623
// for i = 1 to fishes do
59558: LD_ADDR_VAR 0 11
59562: PUSH
59563: DOUBLE
59564: LD_INT 1
59566: DEC
59567: ST_TO_ADDR
59568: LD_VAR 0 7
59572: PUSH
59573: FOR_TO
59574: IFFALSE 59621
// begin hc_class = 20 ;
59576: LD_ADDR_OWVAR 28
59580: PUSH
59581: LD_INT 20
59583: ST_TO_ADDR
// hc_gallery =  ;
59584: LD_ADDR_OWVAR 33
59588: PUSH
59589: LD_STRING 
59591: ST_TO_ADDR
// animal := CreateHuman ;
59592: LD_ADDR_VAR 0 12
59596: PUSH
59597: CALL_OW 44
59601: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59602: LD_VAR 0 12
59606: PPUSH
59607: LD_VAR 0 9
59611: PPUSH
59612: LD_INT 0
59614: PPUSH
59615: CALL 61266 0 3
// end ;
59619: GO 59573
59621: POP
59622: POP
// end ;
59623: LD_VAR 0 10
59627: RET
// export function WantHeal ( sci , unit ) ; begin
59628: LD_INT 0
59630: PPUSH
// if GetTaskList ( sci ) > 0 then
59631: LD_VAR 0 1
59635: PPUSH
59636: CALL_OW 437
59640: PUSH
59641: LD_INT 0
59643: GREATER
59644: IFFALSE 59716
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59646: LD_VAR 0 1
59650: PPUSH
59651: CALL_OW 437
59655: PUSH
59656: LD_INT 1
59658: ARRAY
59659: PUSH
59660: LD_INT 1
59662: ARRAY
59663: PUSH
59664: LD_STRING l
59666: EQUAL
59667: IFFALSE 59694
59669: PUSH
59670: LD_VAR 0 1
59674: PPUSH
59675: CALL_OW 437
59679: PUSH
59680: LD_INT 1
59682: ARRAY
59683: PUSH
59684: LD_INT 4
59686: ARRAY
59687: PUSH
59688: LD_VAR 0 2
59692: EQUAL
59693: AND
59694: IFFALSE 59706
// result := true else
59696: LD_ADDR_VAR 0 3
59700: PUSH
59701: LD_INT 1
59703: ST_TO_ADDR
59704: GO 59714
// result := false ;
59706: LD_ADDR_VAR 0 3
59710: PUSH
59711: LD_INT 0
59713: ST_TO_ADDR
// end else
59714: GO 59724
// result := false ;
59716: LD_ADDR_VAR 0 3
59720: PUSH
59721: LD_INT 0
59723: ST_TO_ADDR
// end ;
59724: LD_VAR 0 3
59728: RET
// export function HealTarget ( sci ) ; begin
59729: LD_INT 0
59731: PPUSH
// if not sci then
59732: LD_VAR 0 1
59736: NOT
59737: IFFALSE 59741
// exit ;
59739: GO 59806
// result := 0 ;
59741: LD_ADDR_VAR 0 2
59745: PUSH
59746: LD_INT 0
59748: ST_TO_ADDR
// if GetTaskList ( sci ) then
59749: LD_VAR 0 1
59753: PPUSH
59754: CALL_OW 437
59758: IFFALSE 59806
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59760: LD_VAR 0 1
59764: PPUSH
59765: CALL_OW 437
59769: PUSH
59770: LD_INT 1
59772: ARRAY
59773: PUSH
59774: LD_INT 1
59776: ARRAY
59777: PUSH
59778: LD_STRING l
59780: EQUAL
59781: IFFALSE 59806
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59783: LD_ADDR_VAR 0 2
59787: PUSH
59788: LD_VAR 0 1
59792: PPUSH
59793: CALL_OW 437
59797: PUSH
59798: LD_INT 1
59800: ARRAY
59801: PUSH
59802: LD_INT 4
59804: ARRAY
59805: ST_TO_ADDR
// end ;
59806: LD_VAR 0 2
59810: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59811: LD_INT 0
59813: PPUSH
59814: PPUSH
59815: PPUSH
59816: PPUSH
// if not base_units then
59817: LD_VAR 0 1
59821: NOT
59822: IFFALSE 59826
// exit ;
59824: GO 59913
// result := false ;
59826: LD_ADDR_VAR 0 2
59830: PUSH
59831: LD_INT 0
59833: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59834: LD_ADDR_VAR 0 5
59838: PUSH
59839: LD_VAR 0 1
59843: PPUSH
59844: LD_INT 21
59846: PUSH
59847: LD_INT 3
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PPUSH
59854: CALL_OW 72
59858: ST_TO_ADDR
// if not tmp then
59859: LD_VAR 0 5
59863: NOT
59864: IFFALSE 59868
// exit ;
59866: GO 59913
// for i in tmp do
59868: LD_ADDR_VAR 0 3
59872: PUSH
59873: LD_VAR 0 5
59877: PUSH
59878: FOR_IN
59879: IFFALSE 59911
// begin result := EnemyInRange ( i , 22 ) ;
59881: LD_ADDR_VAR 0 2
59885: PUSH
59886: LD_VAR 0 3
59890: PPUSH
59891: LD_INT 22
59893: PPUSH
59894: CALL 57328 0 2
59898: ST_TO_ADDR
// if result then
59899: LD_VAR 0 2
59903: IFFALSE 59909
// exit ;
59905: POP
59906: POP
59907: GO 59913
// end ;
59909: GO 59878
59911: POP
59912: POP
// end ;
59913: LD_VAR 0 2
59917: RET
// export function FilterByTag ( units , tag ) ; begin
59918: LD_INT 0
59920: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
59921: LD_ADDR_VAR 0 3
59925: PUSH
59926: LD_VAR 0 1
59930: PPUSH
59931: LD_INT 120
59933: PUSH
59934: LD_VAR 0 2
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PPUSH
59943: CALL_OW 72
59947: ST_TO_ADDR
// end ;
59948: LD_VAR 0 3
59952: RET
// export function IsDriver ( un ) ; begin
59953: LD_INT 0
59955: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59956: LD_ADDR_VAR 0 2
59960: PUSH
59961: LD_VAR 0 1
59965: PUSH
59966: LD_INT 55
59968: PUSH
59969: EMPTY
59970: LIST
59971: PPUSH
59972: CALL_OW 69
59976: IN
59977: ST_TO_ADDR
// end ;
59978: LD_VAR 0 2
59982: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59983: LD_INT 0
59985: PPUSH
59986: PPUSH
// list := [ ] ;
59987: LD_ADDR_VAR 0 5
59991: PUSH
59992: EMPTY
59993: ST_TO_ADDR
// case d of 0 :
59994: LD_VAR 0 3
59998: PUSH
59999: LD_INT 0
60001: DOUBLE
60002: EQUAL
60003: IFTRUE 60007
60005: GO 60140
60007: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60008: LD_ADDR_VAR 0 5
60012: PUSH
60013: LD_VAR 0 1
60017: PUSH
60018: LD_INT 4
60020: MINUS
60021: PUSH
60022: LD_VAR 0 2
60026: PUSH
60027: LD_INT 4
60029: MINUS
60030: PUSH
60031: LD_INT 2
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: LIST
60038: PUSH
60039: LD_VAR 0 1
60043: PUSH
60044: LD_INT 3
60046: MINUS
60047: PUSH
60048: LD_VAR 0 2
60052: PUSH
60053: LD_INT 1
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: LIST
60060: PUSH
60061: LD_VAR 0 1
60065: PUSH
60066: LD_INT 4
60068: PLUS
60069: PUSH
60070: LD_VAR 0 2
60074: PUSH
60075: LD_INT 4
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: LIST
60082: PUSH
60083: LD_VAR 0 1
60087: PUSH
60088: LD_INT 3
60090: PLUS
60091: PUSH
60092: LD_VAR 0 2
60096: PUSH
60097: LD_INT 3
60099: PLUS
60100: PUSH
60101: LD_INT 5
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: LIST
60108: PUSH
60109: LD_VAR 0 1
60113: PUSH
60114: LD_VAR 0 2
60118: PUSH
60119: LD_INT 4
60121: PLUS
60122: PUSH
60123: LD_INT 0
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: LIST
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: ST_TO_ADDR
// end ; 1 :
60138: GO 60838
60140: LD_INT 1
60142: DOUBLE
60143: EQUAL
60144: IFTRUE 60148
60146: GO 60281
60148: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60149: LD_ADDR_VAR 0 5
60153: PUSH
60154: LD_VAR 0 1
60158: PUSH
60159: LD_VAR 0 2
60163: PUSH
60164: LD_INT 4
60166: MINUS
60167: PUSH
60168: LD_INT 3
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: LIST
60175: PUSH
60176: LD_VAR 0 1
60180: PUSH
60181: LD_INT 3
60183: MINUS
60184: PUSH
60185: LD_VAR 0 2
60189: PUSH
60190: LD_INT 3
60192: MINUS
60193: PUSH
60194: LD_INT 2
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: LIST
60201: PUSH
60202: LD_VAR 0 1
60206: PUSH
60207: LD_INT 4
60209: MINUS
60210: PUSH
60211: LD_VAR 0 2
60215: PUSH
60216: LD_INT 1
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: LIST
60223: PUSH
60224: LD_VAR 0 1
60228: PUSH
60229: LD_VAR 0 2
60233: PUSH
60234: LD_INT 3
60236: PLUS
60237: PUSH
60238: LD_INT 0
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: LIST
60245: PUSH
60246: LD_VAR 0 1
60250: PUSH
60251: LD_INT 4
60253: PLUS
60254: PUSH
60255: LD_VAR 0 2
60259: PUSH
60260: LD_INT 4
60262: PLUS
60263: PUSH
60264: LD_INT 5
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: LIST
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: ST_TO_ADDR
// end ; 2 :
60279: GO 60838
60281: LD_INT 2
60283: DOUBLE
60284: EQUAL
60285: IFTRUE 60289
60287: GO 60418
60289: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60290: LD_ADDR_VAR 0 5
60294: PUSH
60295: LD_VAR 0 1
60299: PUSH
60300: LD_VAR 0 2
60304: PUSH
60305: LD_INT 3
60307: MINUS
60308: PUSH
60309: LD_INT 3
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: LIST
60316: PUSH
60317: LD_VAR 0 1
60321: PUSH
60322: LD_INT 4
60324: PLUS
60325: PUSH
60326: LD_VAR 0 2
60330: PUSH
60331: LD_INT 4
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: LIST
60338: PUSH
60339: LD_VAR 0 1
60343: PUSH
60344: LD_VAR 0 2
60348: PUSH
60349: LD_INT 4
60351: PLUS
60352: PUSH
60353: LD_INT 0
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: LIST
60360: PUSH
60361: LD_VAR 0 1
60365: PUSH
60366: LD_INT 3
60368: MINUS
60369: PUSH
60370: LD_VAR 0 2
60374: PUSH
60375: LD_INT 1
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: LIST
60382: PUSH
60383: LD_VAR 0 1
60387: PUSH
60388: LD_INT 4
60390: MINUS
60391: PUSH
60392: LD_VAR 0 2
60396: PUSH
60397: LD_INT 4
60399: MINUS
60400: PUSH
60401: LD_INT 2
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: LIST
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: ST_TO_ADDR
// end ; 3 :
60416: GO 60838
60418: LD_INT 3
60420: DOUBLE
60421: EQUAL
60422: IFTRUE 60426
60424: GO 60559
60426: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60427: LD_ADDR_VAR 0 5
60431: PUSH
60432: LD_VAR 0 1
60436: PUSH
60437: LD_INT 3
60439: PLUS
60440: PUSH
60441: LD_VAR 0 2
60445: PUSH
60446: LD_INT 4
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: LIST
60453: PUSH
60454: LD_VAR 0 1
60458: PUSH
60459: LD_INT 4
60461: PLUS
60462: PUSH
60463: LD_VAR 0 2
60467: PUSH
60468: LD_INT 4
60470: PLUS
60471: PUSH
60472: LD_INT 5
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: LIST
60479: PUSH
60480: LD_VAR 0 1
60484: PUSH
60485: LD_INT 4
60487: MINUS
60488: PUSH
60489: LD_VAR 0 2
60493: PUSH
60494: LD_INT 1
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: LIST
60501: PUSH
60502: LD_VAR 0 1
60506: PUSH
60507: LD_VAR 0 2
60511: PUSH
60512: LD_INT 4
60514: MINUS
60515: PUSH
60516: LD_INT 3
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: LIST
60523: PUSH
60524: LD_VAR 0 1
60528: PUSH
60529: LD_INT 3
60531: MINUS
60532: PUSH
60533: LD_VAR 0 2
60537: PUSH
60538: LD_INT 3
60540: MINUS
60541: PUSH
60542: LD_INT 2
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: LIST
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: ST_TO_ADDR
// end ; 4 :
60557: GO 60838
60559: LD_INT 4
60561: DOUBLE
60562: EQUAL
60563: IFTRUE 60567
60565: GO 60700
60567: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60568: LD_ADDR_VAR 0 5
60572: PUSH
60573: LD_VAR 0 1
60577: PUSH
60578: LD_VAR 0 2
60582: PUSH
60583: LD_INT 4
60585: PLUS
60586: PUSH
60587: LD_INT 0
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: LIST
60594: PUSH
60595: LD_VAR 0 1
60599: PUSH
60600: LD_INT 3
60602: PLUS
60603: PUSH
60604: LD_VAR 0 2
60608: PUSH
60609: LD_INT 3
60611: PLUS
60612: PUSH
60613: LD_INT 5
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: LIST
60620: PUSH
60621: LD_VAR 0 1
60625: PUSH
60626: LD_INT 4
60628: PLUS
60629: PUSH
60630: LD_VAR 0 2
60634: PUSH
60635: LD_INT 4
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: LIST
60642: PUSH
60643: LD_VAR 0 1
60647: PUSH
60648: LD_VAR 0 2
60652: PUSH
60653: LD_INT 3
60655: MINUS
60656: PUSH
60657: LD_INT 3
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: LIST
60664: PUSH
60665: LD_VAR 0 1
60669: PUSH
60670: LD_INT 4
60672: MINUS
60673: PUSH
60674: LD_VAR 0 2
60678: PUSH
60679: LD_INT 4
60681: MINUS
60682: PUSH
60683: LD_INT 2
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: LIST
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: ST_TO_ADDR
// end ; 5 :
60698: GO 60838
60700: LD_INT 5
60702: DOUBLE
60703: EQUAL
60704: IFTRUE 60708
60706: GO 60837
60708: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60709: LD_ADDR_VAR 0 5
60713: PUSH
60714: LD_VAR 0 1
60718: PUSH
60719: LD_INT 4
60721: MINUS
60722: PUSH
60723: LD_VAR 0 2
60727: PUSH
60728: LD_INT 1
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: LIST
60735: PUSH
60736: LD_VAR 0 1
60740: PUSH
60741: LD_VAR 0 2
60745: PUSH
60746: LD_INT 4
60748: MINUS
60749: PUSH
60750: LD_INT 3
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: LIST
60757: PUSH
60758: LD_VAR 0 1
60762: PUSH
60763: LD_INT 4
60765: PLUS
60766: PUSH
60767: LD_VAR 0 2
60771: PUSH
60772: LD_INT 4
60774: PLUS
60775: PUSH
60776: LD_INT 5
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: LIST
60783: PUSH
60784: LD_VAR 0 1
60788: PUSH
60789: LD_INT 3
60791: PLUS
60792: PUSH
60793: LD_VAR 0 2
60797: PUSH
60798: LD_INT 4
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: LIST
60805: PUSH
60806: LD_VAR 0 1
60810: PUSH
60811: LD_VAR 0 2
60815: PUSH
60816: LD_INT 3
60818: PLUS
60819: PUSH
60820: LD_INT 0
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: LIST
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: ST_TO_ADDR
// end ; end ;
60835: GO 60838
60837: POP
// result := list ;
60838: LD_ADDR_VAR 0 4
60842: PUSH
60843: LD_VAR 0 5
60847: ST_TO_ADDR
// end ;
60848: LD_VAR 0 4
60852: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60853: LD_INT 0
60855: PPUSH
60856: PPUSH
60857: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60858: LD_VAR 0 1
60862: NOT
60863: IFTRUE 60891
60865: PUSH
60866: LD_VAR 0 2
60870: PUSH
60871: LD_INT 1
60873: PUSH
60874: LD_INT 2
60876: PUSH
60877: LD_INT 3
60879: PUSH
60880: LD_INT 4
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: IN
60889: NOT
60890: OR
60891: IFFALSE 60895
// exit ;
60893: GO 60978
// tmp := [ ] ;
60895: LD_ADDR_VAR 0 5
60899: PUSH
60900: EMPTY
60901: ST_TO_ADDR
// for i in units do
60902: LD_ADDR_VAR 0 4
60906: PUSH
60907: LD_VAR 0 1
60911: PUSH
60912: FOR_IN
60913: IFFALSE 60947
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
60915: LD_ADDR_VAR 0 5
60919: PUSH
60920: LD_VAR 0 5
60924: PPUSH
60925: LD_VAR 0 4
60929: PPUSH
60930: LD_VAR 0 2
60934: PPUSH
60935: CALL_OW 259
60939: PPUSH
60940: CALL 62373 0 2
60944: ST_TO_ADDR
60945: GO 60912
60947: POP
60948: POP
// if not tmp then
60949: LD_VAR 0 5
60953: NOT
60954: IFFALSE 60958
// exit ;
60956: GO 60978
// result := SortListByListDesc ( units , tmp ) ;
60958: LD_ADDR_VAR 0 3
60962: PUSH
60963: LD_VAR 0 1
60967: PPUSH
60968: LD_VAR 0 5
60972: PPUSH
60973: CALL_OW 77
60977: ST_TO_ADDR
// end ;
60978: LD_VAR 0 3
60982: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60983: LD_INT 0
60985: PPUSH
60986: PPUSH
60987: PPUSH
// result := false ;
60988: LD_ADDR_VAR 0 3
60992: PUSH
60993: LD_INT 0
60995: ST_TO_ADDR
// if not building then
60996: LD_VAR 0 2
61000: NOT
61001: IFFALSE 61005
// exit ;
61003: GO 61149
// x := GetX ( building ) ;
61005: LD_ADDR_VAR 0 4
61009: PUSH
61010: LD_VAR 0 2
61014: PPUSH
61015: CALL_OW 250
61019: ST_TO_ADDR
// y := GetY ( building ) ;
61020: LD_ADDR_VAR 0 5
61024: PUSH
61025: LD_VAR 0 2
61029: PPUSH
61030: CALL_OW 251
61034: ST_TO_ADDR
// if not x or not y then
61035: LD_VAR 0 4
61039: NOT
61040: IFTRUE 61049
61042: PUSH
61043: LD_VAR 0 5
61047: NOT
61048: OR
61049: IFFALSE 61053
// exit ;
61051: GO 61149
// if GetTaskList ( unit ) then
61053: LD_VAR 0 1
61057: PPUSH
61058: CALL_OW 437
61062: IFFALSE 61149
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61064: LD_STRING e
61066: PUSH
61067: LD_VAR 0 1
61071: PPUSH
61072: CALL_OW 437
61076: PUSH
61077: LD_INT 1
61079: ARRAY
61080: PUSH
61081: LD_INT 1
61083: ARRAY
61084: EQUAL
61085: IFFALSE 61112
61087: PUSH
61088: LD_VAR 0 4
61092: PUSH
61093: LD_VAR 0 1
61097: PPUSH
61098: CALL_OW 437
61102: PUSH
61103: LD_INT 1
61105: ARRAY
61106: PUSH
61107: LD_INT 2
61109: ARRAY
61110: EQUAL
61111: AND
61112: IFFALSE 61139
61114: PUSH
61115: LD_VAR 0 5
61119: PUSH
61120: LD_VAR 0 1
61124: PPUSH
61125: CALL_OW 437
61129: PUSH
61130: LD_INT 1
61132: ARRAY
61133: PUSH
61134: LD_INT 3
61136: ARRAY
61137: EQUAL
61138: AND
61139: IFFALSE 61149
// result := true end ;
61141: LD_ADDR_VAR 0 3
61145: PUSH
61146: LD_INT 1
61148: ST_TO_ADDR
// end ;
61149: LD_VAR 0 3
61153: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61154: LD_INT 0
61156: PPUSH
// result := false ;
61157: LD_ADDR_VAR 0 4
61161: PUSH
61162: LD_INT 0
61164: ST_TO_ADDR
// if GetTaskList ( unit ) then
61165: LD_VAR 0 1
61169: PPUSH
61170: CALL_OW 437
61174: IFFALSE 61261
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61176: LD_STRING M
61178: PUSH
61179: LD_VAR 0 1
61183: PPUSH
61184: CALL_OW 437
61188: PUSH
61189: LD_INT 1
61191: ARRAY
61192: PUSH
61193: LD_INT 1
61195: ARRAY
61196: EQUAL
61197: IFFALSE 61224
61199: PUSH
61200: LD_VAR 0 2
61204: PUSH
61205: LD_VAR 0 1
61209: PPUSH
61210: CALL_OW 437
61214: PUSH
61215: LD_INT 1
61217: ARRAY
61218: PUSH
61219: LD_INT 2
61221: ARRAY
61222: EQUAL
61223: AND
61224: IFFALSE 61251
61226: PUSH
61227: LD_VAR 0 3
61231: PUSH
61232: LD_VAR 0 1
61236: PPUSH
61237: CALL_OW 437
61241: PUSH
61242: LD_INT 1
61244: ARRAY
61245: PUSH
61246: LD_INT 3
61248: ARRAY
61249: EQUAL
61250: AND
61251: IFFALSE 61261
// result := true ;
61253: LD_ADDR_VAR 0 4
61257: PUSH
61258: LD_INT 1
61260: ST_TO_ADDR
// end ; end ;
61261: LD_VAR 0 4
61265: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61266: LD_INT 0
61268: PPUSH
61269: PPUSH
61270: PPUSH
61271: PPUSH
// if not unit or not area then
61272: LD_VAR 0 1
61276: NOT
61277: IFTRUE 61286
61279: PUSH
61280: LD_VAR 0 2
61284: NOT
61285: OR
61286: IFFALSE 61290
// exit ;
61288: GO 61466
// tmp := AreaToList ( area , i ) ;
61290: LD_ADDR_VAR 0 6
61294: PUSH
61295: LD_VAR 0 2
61299: PPUSH
61300: LD_VAR 0 5
61304: PPUSH
61305: CALL_OW 517
61309: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61310: LD_ADDR_VAR 0 5
61314: PUSH
61315: DOUBLE
61316: LD_INT 1
61318: DEC
61319: ST_TO_ADDR
61320: LD_VAR 0 6
61324: PUSH
61325: LD_INT 1
61327: ARRAY
61328: PUSH
61329: FOR_TO
61330: IFFALSE 61464
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61332: LD_ADDR_VAR 0 7
61336: PUSH
61337: LD_VAR 0 6
61341: PUSH
61342: LD_INT 1
61344: ARRAY
61345: PUSH
61346: LD_VAR 0 5
61350: ARRAY
61351: PUSH
61352: LD_VAR 0 6
61356: PUSH
61357: LD_INT 2
61359: ARRAY
61360: PUSH
61361: LD_VAR 0 5
61365: ARRAY
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
61371: LD_INT 92
61373: PUSH
61374: LD_VAR 0 7
61378: PUSH
61379: LD_INT 1
61381: ARRAY
61382: PUSH
61383: LD_VAR 0 7
61387: PUSH
61388: LD_INT 2
61390: ARRAY
61391: PUSH
61392: LD_INT 2
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: PPUSH
61401: CALL_OW 69
61405: PUSH
61406: LD_INT 0
61408: EQUAL
61409: IFFALSE 61462
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61411: LD_VAR 0 1
61415: PPUSH
61416: LD_VAR 0 7
61420: PUSH
61421: LD_INT 1
61423: ARRAY
61424: PPUSH
61425: LD_VAR 0 7
61429: PUSH
61430: LD_INT 2
61432: ARRAY
61433: PPUSH
61434: LD_VAR 0 3
61438: PPUSH
61439: CALL_OW 48
// result := IsPlaced ( unit ) ;
61443: LD_ADDR_VAR 0 4
61447: PUSH
61448: LD_VAR 0 1
61452: PPUSH
61453: CALL_OW 305
61457: ST_TO_ADDR
// exit ;
61458: POP
61459: POP
61460: GO 61466
// end ; end ;
61462: GO 61329
61464: POP
61465: POP
// end ;
61466: LD_VAR 0 4
61470: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61471: LD_INT 0
61473: PPUSH
61474: PPUSH
61475: PPUSH
// if not side or side > 8 then
61476: LD_VAR 0 1
61480: NOT
61481: IFTRUE 61493
61483: PUSH
61484: LD_VAR 0 1
61488: PUSH
61489: LD_INT 8
61491: GREATER
61492: OR
61493: IFFALSE 61497
// exit ;
61495: GO 61684
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61497: LD_ADDR_VAR 0 4
61501: PUSH
61502: LD_INT 22
61504: PUSH
61505: LD_VAR 0 1
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 21
61516: PUSH
61517: LD_INT 3
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PPUSH
61528: CALL_OW 69
61532: ST_TO_ADDR
// if not tmp then
61533: LD_VAR 0 4
61537: NOT
61538: IFFALSE 61542
// exit ;
61540: GO 61684
// enable_addtolog := true ;
61542: LD_ADDR_OWVAR 81
61546: PUSH
61547: LD_INT 1
61549: ST_TO_ADDR
// AddToLog ( [ ) ;
61550: LD_STRING [
61552: PPUSH
61553: CALL_OW 561
// for i in tmp do
61557: LD_ADDR_VAR 0 3
61561: PUSH
61562: LD_VAR 0 4
61566: PUSH
61567: FOR_IN
61568: IFFALSE 61675
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61570: LD_STRING [
61572: PUSH
61573: LD_VAR 0 3
61577: PPUSH
61578: CALL_OW 266
61582: STR
61583: PUSH
61584: LD_STRING , 
61586: STR
61587: PUSH
61588: LD_VAR 0 3
61592: PPUSH
61593: CALL_OW 250
61597: STR
61598: PUSH
61599: LD_STRING , 
61601: STR
61602: PUSH
61603: LD_VAR 0 3
61607: PPUSH
61608: CALL_OW 251
61612: STR
61613: PUSH
61614: LD_STRING , 
61616: STR
61617: PUSH
61618: LD_VAR 0 3
61622: PPUSH
61623: CALL_OW 254
61627: STR
61628: PUSH
61629: LD_STRING , 
61631: STR
61632: PUSH
61633: LD_VAR 0 3
61637: PPUSH
61638: LD_INT 1
61640: PPUSH
61641: CALL_OW 268
61645: STR
61646: PUSH
61647: LD_STRING , 
61649: STR
61650: PUSH
61651: LD_VAR 0 3
61655: PPUSH
61656: LD_INT 2
61658: PPUSH
61659: CALL_OW 268
61663: STR
61664: PUSH
61665: LD_STRING ],
61667: STR
61668: PPUSH
61669: CALL_OW 561
// end ;
61673: GO 61567
61675: POP
61676: POP
// AddToLog ( ]; ) ;
61677: LD_STRING ];
61679: PPUSH
61680: CALL_OW 561
// end ;
61684: LD_VAR 0 2
61688: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61689: LD_INT 0
61691: PPUSH
61692: PPUSH
61693: PPUSH
61694: PPUSH
61695: PPUSH
// if not area or not rate or not max then
61696: LD_VAR 0 1
61700: NOT
61701: IFTRUE 61710
61703: PUSH
61704: LD_VAR 0 2
61708: NOT
61709: OR
61710: IFTRUE 61719
61712: PUSH
61713: LD_VAR 0 4
61717: NOT
61718: OR
61719: IFFALSE 61723
// exit ;
61721: GO 61912
// while 1 do
61723: LD_INT 1
61725: IFFALSE 61912
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61727: LD_ADDR_VAR 0 9
61731: PUSH
61732: LD_VAR 0 1
61736: PPUSH
61737: LD_INT 1
61739: PPUSH
61740: CALL_OW 287
61744: PUSH
61745: LD_INT 10
61747: MUL
61748: ST_TO_ADDR
// r := rate / 10 ;
61749: LD_ADDR_VAR 0 7
61753: PUSH
61754: LD_VAR 0 2
61758: PUSH
61759: LD_INT 10
61761: DIVREAL
61762: ST_TO_ADDR
// time := 1 1$00 ;
61763: LD_ADDR_VAR 0 8
61767: PUSH
61768: LD_INT 2100
61770: ST_TO_ADDR
// if amount < min then
61771: LD_VAR 0 9
61775: PUSH
61776: LD_VAR 0 3
61780: LESS
61781: IFFALSE 61799
// r := r * 2 else
61783: LD_ADDR_VAR 0 7
61787: PUSH
61788: LD_VAR 0 7
61792: PUSH
61793: LD_INT 2
61795: MUL
61796: ST_TO_ADDR
61797: GO 61825
// if amount > max then
61799: LD_VAR 0 9
61803: PUSH
61804: LD_VAR 0 4
61808: GREATER
61809: IFFALSE 61825
// r := r / 2 ;
61811: LD_ADDR_VAR 0 7
61815: PUSH
61816: LD_VAR 0 7
61820: PUSH
61821: LD_INT 2
61823: DIVREAL
61824: ST_TO_ADDR
// time := time / r ;
61825: LD_ADDR_VAR 0 8
61829: PUSH
61830: LD_VAR 0 8
61834: PUSH
61835: LD_VAR 0 7
61839: DIVREAL
61840: ST_TO_ADDR
// if time < 0 then
61841: LD_VAR 0 8
61845: PUSH
61846: LD_INT 0
61848: LESS
61849: IFFALSE 61866
// time := time * - 1 ;
61851: LD_ADDR_VAR 0 8
61855: PUSH
61856: LD_VAR 0 8
61860: PUSH
61861: LD_INT 1
61863: NEG
61864: MUL
61865: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
61866: LD_VAR 0 8
61870: PUSH
61871: LD_INT 35
61873: PPUSH
61874: LD_INT 875
61876: PPUSH
61877: CALL_OW 12
61881: PLUS
61882: PPUSH
61883: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61887: LD_INT 1
61889: PPUSH
61890: LD_INT 5
61892: PPUSH
61893: CALL_OW 12
61897: PPUSH
61898: LD_VAR 0 1
61902: PPUSH
61903: LD_INT 1
61905: PPUSH
61906: CALL_OW 55
// end ;
61910: GO 61723
// end ;
61912: LD_VAR 0 5
61916: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61917: LD_INT 0
61919: PPUSH
61920: PPUSH
61921: PPUSH
61922: PPUSH
61923: PPUSH
61924: PPUSH
61925: PPUSH
61926: PPUSH
// if not turrets or not factories then
61927: LD_VAR 0 1
61931: NOT
61932: IFTRUE 61941
61934: PUSH
61935: LD_VAR 0 2
61939: NOT
61940: OR
61941: IFFALSE 61945
// exit ;
61943: GO 62252
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61945: LD_ADDR_VAR 0 10
61949: PUSH
61950: LD_INT 5
61952: PUSH
61953: LD_INT 6
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 2
61962: PUSH
61963: LD_INT 4
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 3
61972: PUSH
61973: LD_INT 5
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 24
61987: PUSH
61988: LD_INT 25
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 23
61997: PUSH
61998: LD_INT 27
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 42
62011: PUSH
62012: LD_INT 43
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 44
62021: PUSH
62022: LD_INT 46
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 45
62031: PUSH
62032: LD_INT 47
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: LIST
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: LIST
62048: ST_TO_ADDR
// result := [ ] ;
62049: LD_ADDR_VAR 0 3
62053: PUSH
62054: EMPTY
62055: ST_TO_ADDR
// for i in turrets do
62056: LD_ADDR_VAR 0 4
62060: PUSH
62061: LD_VAR 0 1
62065: PUSH
62066: FOR_IN
62067: IFFALSE 62250
// begin nat := GetNation ( i ) ;
62069: LD_ADDR_VAR 0 7
62073: PUSH
62074: LD_VAR 0 4
62078: PPUSH
62079: CALL_OW 248
62083: ST_TO_ADDR
// weapon := 0 ;
62084: LD_ADDR_VAR 0 8
62088: PUSH
62089: LD_INT 0
62091: ST_TO_ADDR
// if not nat then
62092: LD_VAR 0 7
62096: NOT
62097: IFFALSE 62101
// continue ;
62099: GO 62066
// for j in list [ nat ] do
62101: LD_ADDR_VAR 0 5
62105: PUSH
62106: LD_VAR 0 10
62110: PUSH
62111: LD_VAR 0 7
62115: ARRAY
62116: PUSH
62117: FOR_IN
62118: IFFALSE 62159
// if GetBWeapon ( i ) = j [ 1 ] then
62120: LD_VAR 0 4
62124: PPUSH
62125: CALL_OW 269
62129: PUSH
62130: LD_VAR 0 5
62134: PUSH
62135: LD_INT 1
62137: ARRAY
62138: EQUAL
62139: IFFALSE 62157
// begin weapon := j [ 2 ] ;
62141: LD_ADDR_VAR 0 8
62145: PUSH
62146: LD_VAR 0 5
62150: PUSH
62151: LD_INT 2
62153: ARRAY
62154: ST_TO_ADDR
// break ;
62155: GO 62159
// end ;
62157: GO 62117
62159: POP
62160: POP
// if not weapon then
62161: LD_VAR 0 8
62165: NOT
62166: IFFALSE 62170
// continue ;
62168: GO 62066
// for k in factories do
62170: LD_ADDR_VAR 0 6
62174: PUSH
62175: LD_VAR 0 2
62179: PUSH
62180: FOR_IN
62181: IFFALSE 62246
// begin weapons := AvailableWeaponList ( k ) ;
62183: LD_ADDR_VAR 0 9
62187: PUSH
62188: LD_VAR 0 6
62192: PPUSH
62193: CALL_OW 478
62197: ST_TO_ADDR
// if not weapons then
62198: LD_VAR 0 9
62202: NOT
62203: IFFALSE 62207
// continue ;
62205: GO 62180
// if weapon in weapons then
62207: LD_VAR 0 8
62211: PUSH
62212: LD_VAR 0 9
62216: IN
62217: IFFALSE 62244
// begin result := [ i , weapon ] ;
62219: LD_ADDR_VAR 0 3
62223: PUSH
62224: LD_VAR 0 4
62228: PUSH
62229: LD_VAR 0 8
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: ST_TO_ADDR
// exit ;
62238: POP
62239: POP
62240: POP
62241: POP
62242: GO 62252
// end ; end ;
62244: GO 62180
62246: POP
62247: POP
// end ;
62248: GO 62066
62250: POP
62251: POP
// end ;
62252: LD_VAR 0 3
62256: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62257: LD_INT 0
62259: PPUSH
// if not side or side > 8 then
62260: LD_VAR 0 3
62264: NOT
62265: IFTRUE 62277
62267: PUSH
62268: LD_VAR 0 3
62272: PUSH
62273: LD_INT 8
62275: GREATER
62276: OR
62277: IFFALSE 62281
// exit ;
62279: GO 62340
// if not range then
62281: LD_VAR 0 4
62285: NOT
62286: IFFALSE 62297
// range := - 12 ;
62288: LD_ADDR_VAR 0 4
62292: PUSH
62293: LD_INT 12
62295: NEG
62296: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62297: LD_VAR 0 1
62301: PPUSH
62302: LD_VAR 0 2
62306: PPUSH
62307: LD_VAR 0 3
62311: PPUSH
62312: LD_VAR 0 4
62316: PPUSH
62317: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62321: LD_VAR 0 1
62325: PPUSH
62326: LD_VAR 0 2
62330: PPUSH
62331: LD_VAR 0 3
62335: PPUSH
62336: CALL_OW 331
// end ;
62340: LD_VAR 0 5
62344: RET
// export function Video ( mode ) ; begin
62345: LD_INT 0
62347: PPUSH
// ingame_video = mode ;
62348: LD_ADDR_OWVAR 52
62352: PUSH
62353: LD_VAR 0 1
62357: ST_TO_ADDR
// interface_hidden = mode ;
62358: LD_ADDR_OWVAR 54
62362: PUSH
62363: LD_VAR 0 1
62367: ST_TO_ADDR
// end ;
62368: LD_VAR 0 2
62372: RET
// export function Join ( array , element ) ; begin
62373: LD_INT 0
62375: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62376: LD_ADDR_VAR 0 3
62380: PUSH
62381: LD_VAR 0 1
62385: PPUSH
62386: LD_VAR 0 1
62390: PUSH
62391: LD_INT 1
62393: PLUS
62394: PPUSH
62395: LD_VAR 0 2
62399: PPUSH
62400: CALL_OW 1
62404: ST_TO_ADDR
// end ;
62405: LD_VAR 0 3
62409: RET
// export function JoinUnion ( array , element ) ; begin
62410: LD_INT 0
62412: PPUSH
// result := array union element ;
62413: LD_ADDR_VAR 0 3
62417: PUSH
62418: LD_VAR 0 1
62422: PUSH
62423: LD_VAR 0 2
62427: UNION
62428: ST_TO_ADDR
// end ;
62429: LD_VAR 0 3
62433: RET
// export function GetBehemoths ( side ) ; begin
62434: LD_INT 0
62436: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
62437: LD_ADDR_VAR 0 2
62441: PUSH
62442: LD_INT 22
62444: PUSH
62445: LD_VAR 0 1
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 31
62456: PUSH
62457: LD_INT 25
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PPUSH
62468: CALL_OW 69
62472: ST_TO_ADDR
// end ;
62473: LD_VAR 0 2
62477: RET
// export function Shuffle ( array ) ; var i , index ; begin
62478: LD_INT 0
62480: PPUSH
62481: PPUSH
62482: PPUSH
// result := [ ] ;
62483: LD_ADDR_VAR 0 2
62487: PUSH
62488: EMPTY
62489: ST_TO_ADDR
// if not array then
62490: LD_VAR 0 1
62494: NOT
62495: IFFALSE 62499
// exit ;
62497: GO 62598
// Randomize ;
62499: CALL_OW 10
// for i = array downto 1 do
62503: LD_ADDR_VAR 0 3
62507: PUSH
62508: DOUBLE
62509: LD_VAR 0 1
62513: INC
62514: ST_TO_ADDR
62515: LD_INT 1
62517: PUSH
62518: FOR_DOWNTO
62519: IFFALSE 62596
// begin index := rand ( 1 , array ) ;
62521: LD_ADDR_VAR 0 4
62525: PUSH
62526: LD_INT 1
62528: PPUSH
62529: LD_VAR 0 1
62533: PPUSH
62534: CALL_OW 12
62538: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62539: LD_ADDR_VAR 0 2
62543: PUSH
62544: LD_VAR 0 2
62548: PPUSH
62549: LD_VAR 0 2
62553: PUSH
62554: LD_INT 1
62556: PLUS
62557: PPUSH
62558: LD_VAR 0 1
62562: PUSH
62563: LD_VAR 0 4
62567: ARRAY
62568: PPUSH
62569: CALL_OW 2
62573: ST_TO_ADDR
// array := Delete ( array , index ) ;
62574: LD_ADDR_VAR 0 1
62578: PUSH
62579: LD_VAR 0 1
62583: PPUSH
62584: LD_VAR 0 4
62588: PPUSH
62589: CALL_OW 3
62593: ST_TO_ADDR
// end ;
62594: GO 62518
62596: POP
62597: POP
// end ;
62598: LD_VAR 0 2
62602: RET
// export function GetBaseMaterials ( base ) ; begin
62603: LD_INT 0
62605: PPUSH
// result := [ 0 , 0 , 0 ] ;
62606: LD_ADDR_VAR 0 2
62610: PUSH
62611: LD_INT 0
62613: PUSH
62614: LD_INT 0
62616: PUSH
62617: LD_INT 0
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: LIST
62624: ST_TO_ADDR
// if not base then
62625: LD_VAR 0 1
62629: NOT
62630: IFFALSE 62634
// exit ;
62632: GO 62683
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62634: LD_ADDR_VAR 0 2
62638: PUSH
62639: LD_VAR 0 1
62643: PPUSH
62644: LD_INT 1
62646: PPUSH
62647: CALL_OW 275
62651: PUSH
62652: LD_VAR 0 1
62656: PPUSH
62657: LD_INT 2
62659: PPUSH
62660: CALL_OW 275
62664: PUSH
62665: LD_VAR 0 1
62669: PPUSH
62670: LD_INT 3
62672: PPUSH
62673: CALL_OW 275
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: LIST
62682: ST_TO_ADDR
// end ;
62683: LD_VAR 0 2
62687: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62688: LD_INT 0
62690: PPUSH
62691: PPUSH
// result := array ;
62692: LD_ADDR_VAR 0 3
62696: PUSH
62697: LD_VAR 0 1
62701: ST_TO_ADDR
// if size >= result then
62702: LD_VAR 0 2
62706: PUSH
62707: LD_VAR 0 3
62711: GREATEREQUAL
62712: IFFALSE 62716
// exit ;
62714: GO 62766
// if size then
62716: LD_VAR 0 2
62720: IFFALSE 62766
// for i := array downto size do
62722: LD_ADDR_VAR 0 4
62726: PUSH
62727: DOUBLE
62728: LD_VAR 0 1
62732: INC
62733: ST_TO_ADDR
62734: LD_VAR 0 2
62738: PUSH
62739: FOR_DOWNTO
62740: IFFALSE 62764
// result := Delete ( result , result ) ;
62742: LD_ADDR_VAR 0 3
62746: PUSH
62747: LD_VAR 0 3
62751: PPUSH
62752: LD_VAR 0 3
62756: PPUSH
62757: CALL_OW 3
62761: ST_TO_ADDR
62762: GO 62739
62764: POP
62765: POP
// end ;
62766: LD_VAR 0 3
62770: RET
// export function ComExit ( unit ) ; var tmp ; begin
62771: LD_INT 0
62773: PPUSH
62774: PPUSH
// if not IsInUnit ( unit ) then
62775: LD_VAR 0 1
62779: PPUSH
62780: CALL_OW 310
62784: NOT
62785: IFFALSE 62789
// exit ;
62787: GO 62849
// tmp := IsInUnit ( unit ) ;
62789: LD_ADDR_VAR 0 3
62793: PUSH
62794: LD_VAR 0 1
62798: PPUSH
62799: CALL_OW 310
62803: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62804: LD_VAR 0 3
62808: PPUSH
62809: CALL_OW 247
62813: PUSH
62814: LD_INT 2
62816: EQUAL
62817: IFFALSE 62830
// ComExitVehicle ( unit ) else
62819: LD_VAR 0 1
62823: PPUSH
62824: CALL_OW 121
62828: GO 62839
// ComExitBuilding ( unit ) ;
62830: LD_VAR 0 1
62834: PPUSH
62835: CALL_OW 122
// result := tmp ;
62839: LD_ADDR_VAR 0 2
62843: PUSH
62844: LD_VAR 0 3
62848: ST_TO_ADDR
// end ;
62849: LD_VAR 0 2
62853: RET
// export function ComExitAll ( units ) ; var i ; begin
62854: LD_INT 0
62856: PPUSH
62857: PPUSH
// if not units then
62858: LD_VAR 0 1
62862: NOT
62863: IFFALSE 62867
// exit ;
62865: GO 62893
// for i in units do
62867: LD_ADDR_VAR 0 3
62871: PUSH
62872: LD_VAR 0 1
62876: PUSH
62877: FOR_IN
62878: IFFALSE 62891
// ComExit ( i ) ;
62880: LD_VAR 0 3
62884: PPUSH
62885: CALL 62771 0 1
62889: GO 62877
62891: POP
62892: POP
// end ;
62893: LD_VAR 0 2
62897: RET
// export function ResetHc ; begin
62898: LD_INT 0
62900: PPUSH
// InitHc ;
62901: CALL_OW 19
// hc_importance := 0 ;
62905: LD_ADDR_OWVAR 32
62909: PUSH
62910: LD_INT 0
62912: ST_TO_ADDR
// end ;
62913: LD_VAR 0 1
62917: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62918: LD_INT 0
62920: PPUSH
62921: PPUSH
62922: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62923: LD_ADDR_VAR 0 6
62927: PUSH
62928: LD_VAR 0 1
62932: PUSH
62933: LD_VAR 0 3
62937: PLUS
62938: PUSH
62939: LD_INT 2
62941: DIV
62942: ST_TO_ADDR
// if _x < 0 then
62943: LD_VAR 0 6
62947: PUSH
62948: LD_INT 0
62950: LESS
62951: IFFALSE 62968
// _x := _x * - 1 ;
62953: LD_ADDR_VAR 0 6
62957: PUSH
62958: LD_VAR 0 6
62962: PUSH
62963: LD_INT 1
62965: NEG
62966: MUL
62967: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62968: LD_ADDR_VAR 0 7
62972: PUSH
62973: LD_VAR 0 2
62977: PUSH
62978: LD_VAR 0 4
62982: PLUS
62983: PUSH
62984: LD_INT 2
62986: DIV
62987: ST_TO_ADDR
// if _y < 0 then
62988: LD_VAR 0 7
62992: PUSH
62993: LD_INT 0
62995: LESS
62996: IFFALSE 63013
// _y := _y * - 1 ;
62998: LD_ADDR_VAR 0 7
63002: PUSH
63003: LD_VAR 0 7
63007: PUSH
63008: LD_INT 1
63010: NEG
63011: MUL
63012: ST_TO_ADDR
// result := [ _x , _y ] ;
63013: LD_ADDR_VAR 0 5
63017: PUSH
63018: LD_VAR 0 6
63022: PUSH
63023: LD_VAR 0 7
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: ST_TO_ADDR
// end ;
63032: LD_VAR 0 5
63036: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63037: LD_INT 0
63039: PPUSH
63040: PPUSH
63041: PPUSH
63042: PPUSH
// task := GetTaskList ( unit ) ;
63043: LD_ADDR_VAR 0 7
63047: PUSH
63048: LD_VAR 0 1
63052: PPUSH
63053: CALL_OW 437
63057: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63058: LD_VAR 0 7
63062: NOT
63063: IFFALSE 63082
63065: PUSH
63066: LD_VAR 0 1
63070: PPUSH
63071: LD_VAR 0 2
63075: PPUSH
63076: CALL_OW 308
63080: NOT
63081: AND
63082: IFFALSE 63086
// exit ;
63084: GO 63204
// if IsInArea ( unit , area ) then
63086: LD_VAR 0 1
63090: PPUSH
63091: LD_VAR 0 2
63095: PPUSH
63096: CALL_OW 308
63100: IFFALSE 63118
// begin ComMoveToArea ( unit , goAway ) ;
63102: LD_VAR 0 1
63106: PPUSH
63107: LD_VAR 0 3
63111: PPUSH
63112: CALL_OW 113
// exit ;
63116: GO 63204
// end ; if task [ 1 ] [ 1 ] <> M then
63118: LD_VAR 0 7
63122: PUSH
63123: LD_INT 1
63125: ARRAY
63126: PUSH
63127: LD_INT 1
63129: ARRAY
63130: PUSH
63131: LD_STRING M
63133: NONEQUAL
63134: IFFALSE 63138
// exit ;
63136: GO 63204
// x := task [ 1 ] [ 2 ] ;
63138: LD_ADDR_VAR 0 5
63142: PUSH
63143: LD_VAR 0 7
63147: PUSH
63148: LD_INT 1
63150: ARRAY
63151: PUSH
63152: LD_INT 2
63154: ARRAY
63155: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63156: LD_ADDR_VAR 0 6
63160: PUSH
63161: LD_VAR 0 7
63165: PUSH
63166: LD_INT 1
63168: ARRAY
63169: PUSH
63170: LD_INT 3
63172: ARRAY
63173: ST_TO_ADDR
// if InArea ( x , y , area ) then
63174: LD_VAR 0 5
63178: PPUSH
63179: LD_VAR 0 6
63183: PPUSH
63184: LD_VAR 0 2
63188: PPUSH
63189: CALL_OW 309
63193: IFFALSE 63204
// ComStop ( unit ) ;
63195: LD_VAR 0 1
63199: PPUSH
63200: CALL_OW 141
// end ;
63204: LD_VAR 0 4
63208: RET
// export function Abs ( value ) ; begin
63209: LD_INT 0
63211: PPUSH
// result := value ;
63212: LD_ADDR_VAR 0 2
63216: PUSH
63217: LD_VAR 0 1
63221: ST_TO_ADDR
// if value < 0 then
63222: LD_VAR 0 1
63226: PUSH
63227: LD_INT 0
63229: LESS
63230: IFFALSE 63247
// result := value * - 1 ;
63232: LD_ADDR_VAR 0 2
63236: PUSH
63237: LD_VAR 0 1
63241: PUSH
63242: LD_INT 1
63244: NEG
63245: MUL
63246: ST_TO_ADDR
// end ;
63247: LD_VAR 0 2
63251: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63252: LD_INT 0
63254: PPUSH
63255: PPUSH
63256: PPUSH
63257: PPUSH
63258: PPUSH
63259: PPUSH
63260: PPUSH
63261: PPUSH
// if not unit or not building then
63262: LD_VAR 0 1
63266: NOT
63267: IFTRUE 63276
63269: PUSH
63270: LD_VAR 0 2
63274: NOT
63275: OR
63276: IFFALSE 63280
// exit ;
63278: GO 63508
// x := GetX ( building ) ;
63280: LD_ADDR_VAR 0 4
63284: PUSH
63285: LD_VAR 0 2
63289: PPUSH
63290: CALL_OW 250
63294: ST_TO_ADDR
// y := GetY ( building ) ;
63295: LD_ADDR_VAR 0 6
63299: PUSH
63300: LD_VAR 0 2
63304: PPUSH
63305: CALL_OW 251
63309: ST_TO_ADDR
// d := GetDir ( building ) ;
63310: LD_ADDR_VAR 0 8
63314: PUSH
63315: LD_VAR 0 2
63319: PPUSH
63320: CALL_OW 254
63324: ST_TO_ADDR
// r := 4 ;
63325: LD_ADDR_VAR 0 9
63329: PUSH
63330: LD_INT 4
63332: ST_TO_ADDR
// for i := 1 to 5 do
63333: LD_ADDR_VAR 0 10
63337: PUSH
63338: DOUBLE
63339: LD_INT 1
63341: DEC
63342: ST_TO_ADDR
63343: LD_INT 5
63345: PUSH
63346: FOR_TO
63347: IFFALSE 63506
// begin _x := ShiftX ( x , d , r + i ) ;
63349: LD_ADDR_VAR 0 5
63353: PUSH
63354: LD_VAR 0 4
63358: PPUSH
63359: LD_VAR 0 8
63363: PPUSH
63364: LD_VAR 0 9
63368: PUSH
63369: LD_VAR 0 10
63373: PLUS
63374: PPUSH
63375: CALL_OW 272
63379: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63380: LD_ADDR_VAR 0 7
63384: PUSH
63385: LD_VAR 0 6
63389: PPUSH
63390: LD_VAR 0 8
63394: PPUSH
63395: LD_VAR 0 9
63399: PUSH
63400: LD_VAR 0 10
63404: PLUS
63405: PPUSH
63406: CALL_OW 273
63410: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63411: LD_VAR 0 5
63415: PPUSH
63416: LD_VAR 0 7
63420: PPUSH
63421: CALL_OW 488
63425: IFFALSE 63460
63427: PUSH
63428: LD_VAR 0 5
63432: PPUSH
63433: LD_VAR 0 7
63437: PPUSH
63438: CALL_OW 428
63442: PPUSH
63443: CALL_OW 247
63447: PUSH
63448: LD_INT 3
63450: PUSH
63451: LD_INT 2
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: IN
63458: NOT
63459: AND
63460: IFFALSE 63504
// begin ComMoveXY ( unit , _x , _y ) ;
63462: LD_VAR 0 1
63466: PPUSH
63467: LD_VAR 0 5
63471: PPUSH
63472: LD_VAR 0 7
63476: PPUSH
63477: CALL_OW 111
// result := [ _x , _y ] ;
63481: LD_ADDR_VAR 0 3
63485: PUSH
63486: LD_VAR 0 5
63490: PUSH
63491: LD_VAR 0 7
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: ST_TO_ADDR
// exit ;
63500: POP
63501: POP
63502: GO 63508
// end ; end ;
63504: GO 63346
63506: POP
63507: POP
// end ;
63508: LD_VAR 0 3
63512: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63513: LD_INT 0
63515: PPUSH
63516: PPUSH
63517: PPUSH
// result := 0 ;
63518: LD_ADDR_VAR 0 3
63522: PUSH
63523: LD_INT 0
63525: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63526: LD_VAR 0 1
63530: PUSH
63531: LD_INT 0
63533: LESS
63534: IFTRUE 63546
63536: PUSH
63537: LD_VAR 0 1
63541: PUSH
63542: LD_INT 8
63544: GREATER
63545: OR
63546: IFTRUE 63558
63548: PUSH
63549: LD_VAR 0 2
63553: PUSH
63554: LD_INT 0
63556: LESS
63557: OR
63558: IFTRUE 63570
63560: PUSH
63561: LD_VAR 0 2
63565: PUSH
63566: LD_INT 8
63568: GREATER
63569: OR
63570: IFFALSE 63574
// exit ;
63572: GO 63649
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63574: LD_ADDR_VAR 0 4
63578: PUSH
63579: LD_INT 22
63581: PUSH
63582: LD_VAR 0 2
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PPUSH
63591: CALL_OW 69
63595: PUSH
63596: FOR_IN
63597: IFFALSE 63647
// begin un := UnitShoot ( i ) ;
63599: LD_ADDR_VAR 0 5
63603: PUSH
63604: LD_VAR 0 4
63608: PPUSH
63609: CALL_OW 504
63613: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63614: LD_VAR 0 5
63618: PPUSH
63619: CALL_OW 255
63623: PUSH
63624: LD_VAR 0 1
63628: EQUAL
63629: IFFALSE 63645
// begin result := un ;
63631: LD_ADDR_VAR 0 3
63635: PUSH
63636: LD_VAR 0 5
63640: ST_TO_ADDR
// exit ;
63641: POP
63642: POP
63643: GO 63649
// end ; end ;
63645: GO 63596
63647: POP
63648: POP
// end ;
63649: LD_VAR 0 3
63653: RET
// export function GetCargoBay ( units ) ; begin
63654: LD_INT 0
63656: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63657: LD_ADDR_VAR 0 2
63661: PUSH
63662: LD_VAR 0 1
63666: PPUSH
63667: LD_INT 2
63669: PUSH
63670: LD_INT 34
63672: PUSH
63673: LD_INT 12
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 34
63682: PUSH
63683: LD_INT 51
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 34
63692: PUSH
63693: LD_INT 32
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: LD_INT 34
63702: PUSH
63703: LD_INT 89
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: PPUSH
63717: CALL_OW 72
63721: ST_TO_ADDR
// end ;
63722: LD_VAR 0 2
63726: RET
// export function Negate ( value ) ; begin
63727: LD_INT 0
63729: PPUSH
// result := not value ;
63730: LD_ADDR_VAR 0 2
63734: PUSH
63735: LD_VAR 0 1
63739: NOT
63740: ST_TO_ADDR
// end ;
63741: LD_VAR 0 2
63745: RET
// export function Inc ( value ) ; begin
63746: LD_INT 0
63748: PPUSH
// result := value + 1 ;
63749: LD_ADDR_VAR 0 2
63753: PUSH
63754: LD_VAR 0 1
63758: PUSH
63759: LD_INT 1
63761: PLUS
63762: ST_TO_ADDR
// end ;
63763: LD_VAR 0 2
63767: RET
// export function Dec ( value ) ; begin
63768: LD_INT 0
63770: PPUSH
// result := value - 1 ;
63771: LD_ADDR_VAR 0 2
63775: PUSH
63776: LD_VAR 0 1
63780: PUSH
63781: LD_INT 1
63783: MINUS
63784: ST_TO_ADDR
// end ;
63785: LD_VAR 0 2
63789: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63790: LD_INT 0
63792: PPUSH
63793: PPUSH
63794: PPUSH
63795: PPUSH
63796: PPUSH
63797: PPUSH
63798: PPUSH
63799: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63800: LD_VAR 0 1
63804: PPUSH
63805: LD_VAR 0 2
63809: PPUSH
63810: CALL_OW 488
63814: NOT
63815: IFTRUE 63834
63817: PUSH
63818: LD_VAR 0 3
63822: PPUSH
63823: LD_VAR 0 4
63827: PPUSH
63828: CALL_OW 488
63832: NOT
63833: OR
63834: IFFALSE 63847
// begin result := - 1 ;
63836: LD_ADDR_VAR 0 5
63840: PUSH
63841: LD_INT 1
63843: NEG
63844: ST_TO_ADDR
// exit ;
63845: GO 64082
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63847: LD_ADDR_VAR 0 12
63851: PUSH
63852: LD_VAR 0 1
63856: PPUSH
63857: LD_VAR 0 2
63861: PPUSH
63862: LD_VAR 0 3
63866: PPUSH
63867: LD_VAR 0 4
63871: PPUSH
63872: CALL 62918 0 4
63876: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63877: LD_ADDR_VAR 0 11
63881: PUSH
63882: LD_VAR 0 1
63886: PPUSH
63887: LD_VAR 0 2
63891: PPUSH
63892: LD_VAR 0 12
63896: PUSH
63897: LD_INT 1
63899: ARRAY
63900: PPUSH
63901: LD_VAR 0 12
63905: PUSH
63906: LD_INT 2
63908: ARRAY
63909: PPUSH
63910: CALL_OW 298
63914: ST_TO_ADDR
// distance := 9999 ;
63915: LD_ADDR_VAR 0 10
63919: PUSH
63920: LD_INT 9999
63922: ST_TO_ADDR
// for i := 0 to 5 do
63923: LD_ADDR_VAR 0 6
63927: PUSH
63928: DOUBLE
63929: LD_INT 0
63931: DEC
63932: ST_TO_ADDR
63933: LD_INT 5
63935: PUSH
63936: FOR_TO
63937: IFFALSE 64080
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63939: LD_ADDR_VAR 0 7
63943: PUSH
63944: LD_VAR 0 1
63948: PPUSH
63949: LD_VAR 0 6
63953: PPUSH
63954: LD_VAR 0 11
63958: PPUSH
63959: CALL_OW 272
63963: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63964: LD_ADDR_VAR 0 8
63968: PUSH
63969: LD_VAR 0 2
63973: PPUSH
63974: LD_VAR 0 6
63978: PPUSH
63979: LD_VAR 0 11
63983: PPUSH
63984: CALL_OW 273
63988: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63989: LD_VAR 0 7
63993: PPUSH
63994: LD_VAR 0 8
63998: PPUSH
63999: CALL_OW 488
64003: NOT
64004: IFFALSE 64008
// continue ;
64006: GO 63936
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64008: LD_ADDR_VAR 0 9
64012: PUSH
64013: LD_VAR 0 12
64017: PUSH
64018: LD_INT 1
64020: ARRAY
64021: PPUSH
64022: LD_VAR 0 12
64026: PUSH
64027: LD_INT 2
64029: ARRAY
64030: PPUSH
64031: LD_VAR 0 7
64035: PPUSH
64036: LD_VAR 0 8
64040: PPUSH
64041: CALL_OW 298
64045: ST_TO_ADDR
// if tmp < distance then
64046: LD_VAR 0 9
64050: PUSH
64051: LD_VAR 0 10
64055: LESS
64056: IFFALSE 64078
// begin result := i ;
64058: LD_ADDR_VAR 0 5
64062: PUSH
64063: LD_VAR 0 6
64067: ST_TO_ADDR
// distance := tmp ;
64068: LD_ADDR_VAR 0 10
64072: PUSH
64073: LD_VAR 0 9
64077: ST_TO_ADDR
// end ; end ;
64078: GO 63936
64080: POP
64081: POP
// end ;
64082: LD_VAR 0 5
64086: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64087: LD_INT 0
64089: PPUSH
64090: PPUSH
// if not driver or not IsInUnit ( driver ) then
64091: LD_VAR 0 1
64095: NOT
64096: IFTRUE 64110
64098: PUSH
64099: LD_VAR 0 1
64103: PPUSH
64104: CALL_OW 310
64108: NOT
64109: OR
64110: IFFALSE 64114
// exit ;
64112: GO 64204
// vehicle := IsInUnit ( driver ) ;
64114: LD_ADDR_VAR 0 3
64118: PUSH
64119: LD_VAR 0 1
64123: PPUSH
64124: CALL_OW 310
64128: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64129: LD_VAR 0 1
64133: PPUSH
64134: LD_STRING \
64136: PUSH
64137: LD_INT 0
64139: PUSH
64140: LD_INT 0
64142: PUSH
64143: LD_INT 0
64145: PUSH
64146: LD_INT 0
64148: PUSH
64149: LD_INT 0
64151: PUSH
64152: LD_INT 0
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: PUSH
64164: LD_STRING E
64166: PUSH
64167: LD_INT 0
64169: PUSH
64170: LD_INT 0
64172: PUSH
64173: LD_VAR 0 3
64177: PUSH
64178: LD_INT 0
64180: PUSH
64181: LD_INT 0
64183: PUSH
64184: LD_INT 0
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PPUSH
64200: CALL_OW 446
// end ;
64204: LD_VAR 0 2
64208: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64209: LD_INT 0
64211: PPUSH
64212: PPUSH
// if not driver or not IsInUnit ( driver ) then
64213: LD_VAR 0 1
64217: NOT
64218: IFTRUE 64232
64220: PUSH
64221: LD_VAR 0 1
64225: PPUSH
64226: CALL_OW 310
64230: NOT
64231: OR
64232: IFFALSE 64236
// exit ;
64234: GO 64326
// vehicle := IsInUnit ( driver ) ;
64236: LD_ADDR_VAR 0 3
64240: PUSH
64241: LD_VAR 0 1
64245: PPUSH
64246: CALL_OW 310
64250: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64251: LD_VAR 0 1
64255: PPUSH
64256: LD_STRING \
64258: PUSH
64259: LD_INT 0
64261: PUSH
64262: LD_INT 0
64264: PUSH
64265: LD_INT 0
64267: PUSH
64268: LD_INT 0
64270: PUSH
64271: LD_INT 0
64273: PUSH
64274: LD_INT 0
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: LIST
64281: LIST
64282: LIST
64283: LIST
64284: LIST
64285: PUSH
64286: LD_STRING E
64288: PUSH
64289: LD_INT 0
64291: PUSH
64292: LD_INT 0
64294: PUSH
64295: LD_VAR 0 3
64299: PUSH
64300: LD_INT 0
64302: PUSH
64303: LD_INT 0
64305: PUSH
64306: LD_INT 0
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: LIST
64313: LIST
64314: LIST
64315: LIST
64316: LIST
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PPUSH
64322: CALL_OW 447
// end ;
64326: LD_VAR 0 2
64330: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
64331: LD_INT 0
64333: PPUSH
64334: PPUSH
64335: PPUSH
// tmp := [ ] ;
64336: LD_ADDR_VAR 0 5
64340: PUSH
64341: EMPTY
64342: ST_TO_ADDR
// for i in units do
64343: LD_ADDR_VAR 0 4
64347: PUSH
64348: LD_VAR 0 1
64352: PUSH
64353: FOR_IN
64354: IFFALSE 64392
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
64356: LD_ADDR_VAR 0 5
64360: PUSH
64361: LD_VAR 0 5
64365: PPUSH
64366: LD_VAR 0 5
64370: PUSH
64371: LD_INT 1
64373: PLUS
64374: PPUSH
64375: LD_VAR 0 4
64379: PPUSH
64380: CALL_OW 256
64384: PPUSH
64385: CALL_OW 2
64389: ST_TO_ADDR
64390: GO 64353
64392: POP
64393: POP
// if not tmp then
64394: LD_VAR 0 5
64398: NOT
64399: IFFALSE 64403
// exit ;
64401: GO 64451
// if asc then
64403: LD_VAR 0 2
64407: IFFALSE 64431
// result := SortListByListAsc ( units , tmp ) else
64409: LD_ADDR_VAR 0 3
64413: PUSH
64414: LD_VAR 0 1
64418: PPUSH
64419: LD_VAR 0 5
64423: PPUSH
64424: CALL_OW 76
64428: ST_TO_ADDR
64429: GO 64451
// result := SortListByListDesc ( units , tmp ) ;
64431: LD_ADDR_VAR 0 3
64435: PUSH
64436: LD_VAR 0 1
64440: PPUSH
64441: LD_VAR 0 5
64445: PPUSH
64446: CALL_OW 77
64450: ST_TO_ADDR
// end ;
64451: LD_VAR 0 3
64455: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64456: LD_INT 0
64458: PPUSH
64459: PPUSH
// task := GetTaskList ( mech ) ;
64460: LD_ADDR_VAR 0 4
64464: PUSH
64465: LD_VAR 0 1
64469: PPUSH
64470: CALL_OW 437
64474: ST_TO_ADDR
// if not task then
64475: LD_VAR 0 4
64479: NOT
64480: IFFALSE 64484
// exit ;
64482: GO 64528
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64484: LD_ADDR_VAR 0 3
64488: PUSH
64489: LD_VAR 0 4
64493: PUSH
64494: LD_INT 1
64496: ARRAY
64497: PUSH
64498: LD_INT 1
64500: ARRAY
64501: PUSH
64502: LD_STRING r
64504: EQUAL
64505: IFFALSE 64527
64507: PUSH
64508: LD_VAR 0 4
64512: PUSH
64513: LD_INT 1
64515: ARRAY
64516: PUSH
64517: LD_INT 4
64519: ARRAY
64520: PUSH
64521: LD_VAR 0 2
64525: EQUAL
64526: AND
64527: ST_TO_ADDR
// end ;
64528: LD_VAR 0 3
64532: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
64533: LD_INT 0
64535: PPUSH
// SetDir ( unit , d ) ;
64536: LD_VAR 0 1
64540: PPUSH
64541: LD_VAR 0 4
64545: PPUSH
64546: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
64550: LD_ADDR_VAR 0 6
64554: PUSH
64555: LD_VAR 0 1
64559: PPUSH
64560: LD_VAR 0 2
64564: PPUSH
64565: LD_VAR 0 3
64569: PPUSH
64570: LD_VAR 0 5
64574: PPUSH
64575: CALL_OW 48
64579: ST_TO_ADDR
// end ;
64580: LD_VAR 0 6
64584: RET
// export function ToNaturalNumber ( number ) ; begin
64585: LD_INT 0
64587: PPUSH
// result := number div 1 ;
64588: LD_ADDR_VAR 0 2
64592: PUSH
64593: LD_VAR 0 1
64597: PUSH
64598: LD_INT 1
64600: DIV
64601: ST_TO_ADDR
// if number < 0 then
64602: LD_VAR 0 1
64606: PUSH
64607: LD_INT 0
64609: LESS
64610: IFFALSE 64620
// result := 0 ;
64612: LD_ADDR_VAR 0 2
64616: PUSH
64617: LD_INT 0
64619: ST_TO_ADDR
// end ;
64620: LD_VAR 0 2
64624: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
64625: LD_INT 0
64627: PPUSH
64628: PPUSH
64629: PPUSH
// if not buildings then
64630: LD_VAR 0 1
64634: NOT
64635: IFFALSE 64639
// exit ;
64637: GO 64754
// tmp := [ ] ;
64639: LD_ADDR_VAR 0 5
64643: PUSH
64644: EMPTY
64645: ST_TO_ADDR
// for b in buildings do
64646: LD_ADDR_VAR 0 4
64650: PUSH
64651: LD_VAR 0 1
64655: PUSH
64656: FOR_IN
64657: IFFALSE 64695
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
64659: LD_ADDR_VAR 0 5
64663: PUSH
64664: LD_VAR 0 5
64668: PPUSH
64669: LD_VAR 0 5
64673: PUSH
64674: LD_INT 1
64676: PLUS
64677: PPUSH
64678: LD_VAR 0 4
64682: PPUSH
64683: CALL_OW 266
64687: PPUSH
64688: CALL_OW 1
64692: ST_TO_ADDR
64693: GO 64656
64695: POP
64696: POP
// if not tmp then
64697: LD_VAR 0 5
64701: NOT
64702: IFFALSE 64706
// exit ;
64704: GO 64754
// if asc then
64706: LD_VAR 0 2
64710: IFFALSE 64734
// result := SortListByListAsc ( buildings , tmp ) else
64712: LD_ADDR_VAR 0 3
64716: PUSH
64717: LD_VAR 0 1
64721: PPUSH
64722: LD_VAR 0 5
64726: PPUSH
64727: CALL_OW 76
64731: ST_TO_ADDR
64732: GO 64754
// result := SortListByListDesc ( buildings , tmp ) ;
64734: LD_ADDR_VAR 0 3
64738: PUSH
64739: LD_VAR 0 1
64743: PPUSH
64744: LD_VAR 0 5
64748: PPUSH
64749: CALL_OW 77
64753: ST_TO_ADDR
// end ;
64754: LD_VAR 0 3
64758: RET
// export function SortByClass ( units , class ) ; var un ; begin
64759: LD_INT 0
64761: PPUSH
64762: PPUSH
// if not units or not class then
64763: LD_VAR 0 1
64767: NOT
64768: IFTRUE 64777
64770: PUSH
64771: LD_VAR 0 2
64775: NOT
64776: OR
64777: IFFALSE 64781
// exit ;
64779: GO 64876
// result := [ ] ;
64781: LD_ADDR_VAR 0 3
64785: PUSH
64786: EMPTY
64787: ST_TO_ADDR
// for un in units do
64788: LD_ADDR_VAR 0 4
64792: PUSH
64793: LD_VAR 0 1
64797: PUSH
64798: FOR_IN
64799: IFFALSE 64874
// if GetClass ( un ) = class then
64801: LD_VAR 0 4
64805: PPUSH
64806: CALL_OW 257
64810: PUSH
64811: LD_VAR 0 2
64815: EQUAL
64816: IFFALSE 64843
// result := Insert ( result , 1 , un ) else
64818: LD_ADDR_VAR 0 3
64822: PUSH
64823: LD_VAR 0 3
64827: PPUSH
64828: LD_INT 1
64830: PPUSH
64831: LD_VAR 0 4
64835: PPUSH
64836: CALL_OW 2
64840: ST_TO_ADDR
64841: GO 64872
// result := Replace ( result , result + 1 , un ) ;
64843: LD_ADDR_VAR 0 3
64847: PUSH
64848: LD_VAR 0 3
64852: PPUSH
64853: LD_VAR 0 3
64857: PUSH
64858: LD_INT 1
64860: PLUS
64861: PPUSH
64862: LD_VAR 0 4
64866: PPUSH
64867: CALL_OW 1
64871: ST_TO_ADDR
64872: GO 64798
64874: POP
64875: POP
// end ;
64876: LD_VAR 0 3
64880: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64881: LD_INT 0
64883: PPUSH
64884: PPUSH
64885: PPUSH
64886: PPUSH
64887: PPUSH
64888: PPUSH
64889: PPUSH
// result := [ ] ;
64890: LD_ADDR_VAR 0 4
64894: PUSH
64895: EMPTY
64896: ST_TO_ADDR
// if x - r < 0 then
64897: LD_VAR 0 1
64901: PUSH
64902: LD_VAR 0 3
64906: MINUS
64907: PUSH
64908: LD_INT 0
64910: LESS
64911: IFFALSE 64923
// min_x := 0 else
64913: LD_ADDR_VAR 0 8
64917: PUSH
64918: LD_INT 0
64920: ST_TO_ADDR
64921: GO 64939
// min_x := x - r ;
64923: LD_ADDR_VAR 0 8
64927: PUSH
64928: LD_VAR 0 1
64932: PUSH
64933: LD_VAR 0 3
64937: MINUS
64938: ST_TO_ADDR
// if y - r < 0 then
64939: LD_VAR 0 2
64943: PUSH
64944: LD_VAR 0 3
64948: MINUS
64949: PUSH
64950: LD_INT 0
64952: LESS
64953: IFFALSE 64965
// min_y := 0 else
64955: LD_ADDR_VAR 0 7
64959: PUSH
64960: LD_INT 0
64962: ST_TO_ADDR
64963: GO 64981
// min_y := y - r ;
64965: LD_ADDR_VAR 0 7
64969: PUSH
64970: LD_VAR 0 2
64974: PUSH
64975: LD_VAR 0 3
64979: MINUS
64980: ST_TO_ADDR
// max_x := x + r ;
64981: LD_ADDR_VAR 0 9
64985: PUSH
64986: LD_VAR 0 1
64990: PUSH
64991: LD_VAR 0 3
64995: PLUS
64996: ST_TO_ADDR
// max_y := y + r ;
64997: LD_ADDR_VAR 0 10
65001: PUSH
65002: LD_VAR 0 2
65006: PUSH
65007: LD_VAR 0 3
65011: PLUS
65012: ST_TO_ADDR
// for _x = min_x to max_x do
65013: LD_ADDR_VAR 0 5
65017: PUSH
65018: DOUBLE
65019: LD_VAR 0 8
65023: DEC
65024: ST_TO_ADDR
65025: LD_VAR 0 9
65029: PUSH
65030: FOR_TO
65031: IFFALSE 65132
// for _y = min_y to max_y do
65033: LD_ADDR_VAR 0 6
65037: PUSH
65038: DOUBLE
65039: LD_VAR 0 7
65043: DEC
65044: ST_TO_ADDR
65045: LD_VAR 0 10
65049: PUSH
65050: FOR_TO
65051: IFFALSE 65128
// begin if not ValidHex ( _x , _y ) then
65053: LD_VAR 0 5
65057: PPUSH
65058: LD_VAR 0 6
65062: PPUSH
65063: CALL_OW 488
65067: NOT
65068: IFFALSE 65072
// continue ;
65070: GO 65050
// if GetResourceTypeXY ( _x , _y ) then
65072: LD_VAR 0 5
65076: PPUSH
65077: LD_VAR 0 6
65081: PPUSH
65082: CALL_OW 283
65086: IFFALSE 65126
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65088: LD_ADDR_VAR 0 4
65092: PUSH
65093: LD_VAR 0 4
65097: PPUSH
65098: LD_VAR 0 4
65102: PUSH
65103: LD_INT 1
65105: PLUS
65106: PPUSH
65107: LD_VAR 0 5
65111: PUSH
65112: LD_VAR 0 6
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PPUSH
65121: CALL_OW 1
65125: ST_TO_ADDR
// end ;
65126: GO 65050
65128: POP
65129: POP
65130: GO 65030
65132: POP
65133: POP
// end ;
65134: LD_VAR 0 4
65138: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65139: LD_INT 0
65141: PPUSH
65142: PPUSH
65143: PPUSH
65144: PPUSH
65145: PPUSH
65146: PPUSH
65147: PPUSH
65148: PPUSH
// if not units then
65149: LD_VAR 0 1
65153: NOT
65154: IFFALSE 65158
// exit ;
65156: GO 65690
// result := UnitFilter ( units , [ f_ok ] ) ;
65158: LD_ADDR_VAR 0 3
65162: PUSH
65163: LD_VAR 0 1
65167: PPUSH
65168: LD_INT 50
65170: PUSH
65171: EMPTY
65172: LIST
65173: PPUSH
65174: CALL_OW 72
65178: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65179: LD_ADDR_VAR 0 8
65183: PUSH
65184: LD_VAR 0 1
65188: PUSH
65189: LD_INT 1
65191: ARRAY
65192: PPUSH
65193: CALL_OW 255
65197: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
65198: LD_ADDR_VAR 0 10
65202: PUSH
65203: LD_INT 29
65205: PUSH
65206: LD_INT 91
65208: PUSH
65209: LD_INT 49
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: LIST
65216: ST_TO_ADDR
// if not result then
65217: LD_VAR 0 3
65221: NOT
65222: IFFALSE 65226
// exit ;
65224: GO 65690
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65226: LD_ADDR_VAR 0 5
65230: PUSH
65231: LD_INT 81
65233: PUSH
65234: LD_VAR 0 8
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PPUSH
65243: CALL_OW 69
65247: ST_TO_ADDR
// for i in result do
65248: LD_ADDR_VAR 0 4
65252: PUSH
65253: LD_VAR 0 3
65257: PUSH
65258: FOR_IN
65259: IFFALSE 65688
// begin tag := GetTag ( i ) + 1 ;
65261: LD_ADDR_VAR 0 9
65265: PUSH
65266: LD_VAR 0 4
65270: PPUSH
65271: CALL_OW 110
65275: PUSH
65276: LD_INT 1
65278: PLUS
65279: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
65280: LD_ADDR_VAR 0 7
65284: PUSH
65285: LD_VAR 0 4
65289: PPUSH
65290: CALL_OW 250
65294: PPUSH
65295: LD_VAR 0 4
65299: PPUSH
65300: CALL_OW 251
65304: PPUSH
65305: LD_INT 4
65307: PPUSH
65308: CALL 64881 0 3
65312: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
65313: LD_VAR 0 4
65317: PPUSH
65318: CALL_OW 247
65322: PUSH
65323: LD_INT 2
65325: EQUAL
65326: IFFALSE 65338
65328: PUSH
65329: LD_VAR 0 7
65333: PUSH
65334: LD_INT 2
65336: GREATER
65337: AND
65338: IFFALSE 65358
65340: PUSH
65341: LD_VAR 0 4
65345: PPUSH
65346: CALL_OW 264
65350: PUSH
65351: LD_VAR 0 10
65355: IN
65356: NOT
65357: AND
65358: IFFALSE 65397
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65360: LD_VAR 0 4
65364: PPUSH
65365: LD_VAR 0 7
65369: PUSH
65370: LD_INT 1
65372: ARRAY
65373: PUSH
65374: LD_INT 1
65376: ARRAY
65377: PPUSH
65378: LD_VAR 0 7
65382: PUSH
65383: LD_INT 1
65385: ARRAY
65386: PUSH
65387: LD_INT 2
65389: ARRAY
65390: PPUSH
65391: CALL_OW 116
65395: GO 65686
// if path > tag then
65397: LD_VAR 0 2
65401: PUSH
65402: LD_VAR 0 9
65406: GREATER
65407: IFFALSE 65615
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
65409: LD_ADDR_VAR 0 6
65413: PUSH
65414: LD_VAR 0 5
65418: PPUSH
65419: LD_INT 91
65421: PUSH
65422: LD_VAR 0 4
65426: PUSH
65427: LD_INT 8
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: LIST
65434: PPUSH
65435: CALL_OW 72
65439: ST_TO_ADDR
// if nearEnemy then
65440: LD_VAR 0 6
65444: IFFALSE 65513
// begin if GetWeapon ( i ) = ru_time_lapser then
65446: LD_VAR 0 4
65450: PPUSH
65451: CALL_OW 264
65455: PUSH
65456: LD_INT 49
65458: EQUAL
65459: IFFALSE 65487
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65461: LD_VAR 0 4
65465: PPUSH
65466: LD_VAR 0 6
65470: PPUSH
65471: LD_VAR 0 4
65475: PPUSH
65476: CALL_OW 74
65480: PPUSH
65481: CALL_OW 112
65485: GO 65511
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
65487: LD_VAR 0 4
65491: PPUSH
65492: LD_VAR 0 6
65496: PPUSH
65497: LD_VAR 0 4
65501: PPUSH
65502: CALL_OW 74
65506: PPUSH
65507: CALL 66771 0 2
// end else
65511: GO 65613
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
65513: LD_VAR 0 4
65517: PPUSH
65518: LD_VAR 0 2
65522: PUSH
65523: LD_VAR 0 9
65527: ARRAY
65528: PUSH
65529: LD_INT 1
65531: ARRAY
65532: PPUSH
65533: LD_VAR 0 2
65537: PUSH
65538: LD_VAR 0 9
65542: ARRAY
65543: PUSH
65544: LD_INT 2
65546: ARRAY
65547: PPUSH
65548: CALL_OW 297
65552: PUSH
65553: LD_INT 6
65555: GREATER
65556: IFFALSE 65599
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
65558: LD_VAR 0 4
65562: PPUSH
65563: LD_VAR 0 2
65567: PUSH
65568: LD_VAR 0 9
65572: ARRAY
65573: PUSH
65574: LD_INT 1
65576: ARRAY
65577: PPUSH
65578: LD_VAR 0 2
65582: PUSH
65583: LD_VAR 0 9
65587: ARRAY
65588: PUSH
65589: LD_INT 2
65591: ARRAY
65592: PPUSH
65593: CALL_OW 114
65597: GO 65613
// SetTag ( i , tag ) ;
65599: LD_VAR 0 4
65603: PPUSH
65604: LD_VAR 0 9
65608: PPUSH
65609: CALL_OW 109
// end else
65613: GO 65686
// if enemy then
65615: LD_VAR 0 5
65619: IFFALSE 65686
// begin if GetWeapon ( i ) = ru_time_lapser then
65621: LD_VAR 0 4
65625: PPUSH
65626: CALL_OW 264
65630: PUSH
65631: LD_INT 49
65633: EQUAL
65634: IFFALSE 65662
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
65636: LD_VAR 0 4
65640: PPUSH
65641: LD_VAR 0 5
65645: PPUSH
65646: LD_VAR 0 4
65650: PPUSH
65651: CALL_OW 74
65655: PPUSH
65656: CALL_OW 112
65660: GO 65686
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
65662: LD_VAR 0 4
65666: PPUSH
65667: LD_VAR 0 5
65671: PPUSH
65672: LD_VAR 0 4
65676: PPUSH
65677: CALL_OW 74
65681: PPUSH
65682: CALL 66771 0 2
// end ; end ;
65686: GO 65258
65688: POP
65689: POP
// end ;
65690: LD_VAR 0 3
65694: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
65695: LD_INT 0
65697: PPUSH
65698: PPUSH
65699: PPUSH
// if not unit or IsInUnit ( unit ) then
65700: LD_VAR 0 1
65704: NOT
65705: IFTRUE 65718
65707: PUSH
65708: LD_VAR 0 1
65712: PPUSH
65713: CALL_OW 310
65717: OR
65718: IFFALSE 65722
// exit ;
65720: GO 65813
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
65722: LD_ADDR_VAR 0 4
65726: PUSH
65727: LD_VAR 0 1
65731: PPUSH
65732: CALL_OW 250
65736: PPUSH
65737: LD_VAR 0 2
65741: PPUSH
65742: LD_INT 1
65744: PPUSH
65745: CALL_OW 272
65749: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
65750: LD_ADDR_VAR 0 5
65754: PUSH
65755: LD_VAR 0 1
65759: PPUSH
65760: CALL_OW 251
65764: PPUSH
65765: LD_VAR 0 2
65769: PPUSH
65770: LD_INT 1
65772: PPUSH
65773: CALL_OW 273
65777: ST_TO_ADDR
// if ValidHex ( x , y ) then
65778: LD_VAR 0 4
65782: PPUSH
65783: LD_VAR 0 5
65787: PPUSH
65788: CALL_OW 488
65792: IFFALSE 65813
// ComTurnXY ( unit , x , y ) ;
65794: LD_VAR 0 1
65798: PPUSH
65799: LD_VAR 0 4
65803: PPUSH
65804: LD_VAR 0 5
65808: PPUSH
65809: CALL_OW 118
// end ;
65813: LD_VAR 0 3
65817: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65818: LD_INT 0
65820: PPUSH
65821: PPUSH
// result := false ;
65822: LD_ADDR_VAR 0 3
65826: PUSH
65827: LD_INT 0
65829: ST_TO_ADDR
// if not units then
65830: LD_VAR 0 2
65834: NOT
65835: IFFALSE 65839
// exit ;
65837: GO 65884
// for i in units do
65839: LD_ADDR_VAR 0 4
65843: PUSH
65844: LD_VAR 0 2
65848: PUSH
65849: FOR_IN
65850: IFFALSE 65882
// if See ( side , i ) then
65852: LD_VAR 0 1
65856: PPUSH
65857: LD_VAR 0 4
65861: PPUSH
65862: CALL_OW 292
65866: IFFALSE 65880
// begin result := true ;
65868: LD_ADDR_VAR 0 3
65872: PUSH
65873: LD_INT 1
65875: ST_TO_ADDR
// exit ;
65876: POP
65877: POP
65878: GO 65884
// end ;
65880: GO 65849
65882: POP
65883: POP
// end ;
65884: LD_VAR 0 3
65888: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
65889: LD_INT 0
65891: PPUSH
65892: PPUSH
65893: PPUSH
65894: PPUSH
// if not unit or not points then
65895: LD_VAR 0 1
65899: NOT
65900: IFTRUE 65909
65902: PUSH
65903: LD_VAR 0 2
65907: NOT
65908: OR
65909: IFFALSE 65913
// exit ;
65911: GO 66003
// dist := 99999 ;
65913: LD_ADDR_VAR 0 5
65917: PUSH
65918: LD_INT 99999
65920: ST_TO_ADDR
// for i in points do
65921: LD_ADDR_VAR 0 4
65925: PUSH
65926: LD_VAR 0 2
65930: PUSH
65931: FOR_IN
65932: IFFALSE 66001
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
65934: LD_ADDR_VAR 0 6
65938: PUSH
65939: LD_VAR 0 1
65943: PPUSH
65944: LD_VAR 0 4
65948: PUSH
65949: LD_INT 1
65951: ARRAY
65952: PPUSH
65953: LD_VAR 0 4
65957: PUSH
65958: LD_INT 2
65960: ARRAY
65961: PPUSH
65962: CALL_OW 297
65966: ST_TO_ADDR
// if tmpDist < dist then
65967: LD_VAR 0 6
65971: PUSH
65972: LD_VAR 0 5
65976: LESS
65977: IFFALSE 65999
// begin result := i ;
65979: LD_ADDR_VAR 0 3
65983: PUSH
65984: LD_VAR 0 4
65988: ST_TO_ADDR
// dist := tmpDist ;
65989: LD_ADDR_VAR 0 5
65993: PUSH
65994: LD_VAR 0 6
65998: ST_TO_ADDR
// end ; end ;
65999: GO 65931
66001: POP
66002: POP
// end ;
66003: LD_VAR 0 3
66007: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66008: LD_INT 0
66010: PPUSH
// uc_side := side ;
66011: LD_ADDR_OWVAR 20
66015: PUSH
66016: LD_VAR 0 1
66020: ST_TO_ADDR
// uc_nation := 3 ;
66021: LD_ADDR_OWVAR 21
66025: PUSH
66026: LD_INT 3
66028: ST_TO_ADDR
// vc_chassis := 25 ;
66029: LD_ADDR_OWVAR 37
66033: PUSH
66034: LD_INT 25
66036: ST_TO_ADDR
// vc_engine := engine_siberite ;
66037: LD_ADDR_OWVAR 39
66041: PUSH
66042: LD_INT 3
66044: ST_TO_ADDR
// vc_control := control_computer ;
66045: LD_ADDR_OWVAR 38
66049: PUSH
66050: LD_INT 3
66052: ST_TO_ADDR
// vc_weapon := 59 ;
66053: LD_ADDR_OWVAR 40
66057: PUSH
66058: LD_INT 59
66060: ST_TO_ADDR
// result := CreateVehicle ;
66061: LD_ADDR_VAR 0 5
66065: PUSH
66066: CALL_OW 45
66070: ST_TO_ADDR
// SetDir ( result , d ) ;
66071: LD_VAR 0 5
66075: PPUSH
66076: LD_VAR 0 4
66080: PPUSH
66081: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66085: LD_VAR 0 5
66089: PPUSH
66090: LD_VAR 0 2
66094: PPUSH
66095: LD_VAR 0 3
66099: PPUSH
66100: LD_INT 0
66102: PPUSH
66103: CALL_OW 48
// end ;
66107: LD_VAR 0 5
66111: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66112: LD_INT 0
66114: PPUSH
66115: PPUSH
66116: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66117: LD_ADDR_VAR 0 2
66121: PUSH
66122: LD_INT 0
66124: PUSH
66125: LD_INT 0
66127: PUSH
66128: LD_INT 0
66130: PUSH
66131: LD_INT 0
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
66140: LD_VAR 0 1
66144: NOT
66145: IFTRUE 66178
66147: PUSH
66148: LD_VAR 0 1
66152: PPUSH
66153: CALL_OW 264
66157: PUSH
66158: LD_INT 12
66160: PUSH
66161: LD_INT 51
66163: PUSH
66164: LD_INT 32
66166: PUSH
66167: LD_INT 89
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: LIST
66174: LIST
66175: IN
66176: NOT
66177: OR
66178: IFFALSE 66182
// exit ;
66180: GO 66280
// for i := 1 to 3 do
66182: LD_ADDR_VAR 0 3
66186: PUSH
66187: DOUBLE
66188: LD_INT 1
66190: DEC
66191: ST_TO_ADDR
66192: LD_INT 3
66194: PUSH
66195: FOR_TO
66196: IFFALSE 66278
// begin tmp := GetCargo ( cargo , i ) ;
66198: LD_ADDR_VAR 0 4
66202: PUSH
66203: LD_VAR 0 1
66207: PPUSH
66208: LD_VAR 0 3
66212: PPUSH
66213: CALL_OW 289
66217: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
66218: LD_ADDR_VAR 0 2
66222: PUSH
66223: LD_VAR 0 2
66227: PPUSH
66228: LD_VAR 0 3
66232: PPUSH
66233: LD_VAR 0 4
66237: PPUSH
66238: CALL_OW 1
66242: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
66243: LD_ADDR_VAR 0 2
66247: PUSH
66248: LD_VAR 0 2
66252: PPUSH
66253: LD_INT 4
66255: PPUSH
66256: LD_VAR 0 2
66260: PUSH
66261: LD_INT 4
66263: ARRAY
66264: PUSH
66265: LD_VAR 0 4
66269: PLUS
66270: PPUSH
66271: CALL_OW 1
66275: ST_TO_ADDR
// end ;
66276: GO 66195
66278: POP
66279: POP
// end ;
66280: LD_VAR 0 2
66284: RET
// export function Length ( array ) ; begin
66285: LD_INT 0
66287: PPUSH
// result := array + 0 ;
66288: LD_ADDR_VAR 0 2
66292: PUSH
66293: LD_VAR 0 1
66297: PUSH
66298: LD_INT 0
66300: PLUS
66301: ST_TO_ADDR
// end ;
66302: LD_VAR 0 2
66306: RET
// export function PrepareArray ( array ) ; begin
66307: LD_INT 0
66309: PPUSH
// result := array diff 0 ;
66310: LD_ADDR_VAR 0 2
66314: PUSH
66315: LD_VAR 0 1
66319: PUSH
66320: LD_INT 0
66322: DIFF
66323: ST_TO_ADDR
// if not result [ 1 ] then
66324: LD_VAR 0 2
66328: PUSH
66329: LD_INT 1
66331: ARRAY
66332: NOT
66333: IFFALSE 66353
// result := Delete ( result , 1 ) ;
66335: LD_ADDR_VAR 0 2
66339: PUSH
66340: LD_VAR 0 2
66344: PPUSH
66345: LD_INT 1
66347: PPUSH
66348: CALL_OW 3
66352: ST_TO_ADDR
// end ;
66353: LD_VAR 0 2
66357: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
66358: LD_INT 0
66360: PPUSH
66361: PPUSH
66362: PPUSH
66363: PPUSH
// sibRocketRange := 25 ;
66364: LD_ADDR_VAR 0 6
66368: PUSH
66369: LD_INT 25
66371: ST_TO_ADDR
// result := false ;
66372: LD_ADDR_VAR 0 4
66376: PUSH
66377: LD_INT 0
66379: ST_TO_ADDR
// for i := 0 to 5 do
66380: LD_ADDR_VAR 0 5
66384: PUSH
66385: DOUBLE
66386: LD_INT 0
66388: DEC
66389: ST_TO_ADDR
66390: LD_INT 5
66392: PUSH
66393: FOR_TO
66394: IFFALSE 66461
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
66396: LD_VAR 0 1
66400: PPUSH
66401: LD_VAR 0 5
66405: PPUSH
66406: LD_VAR 0 6
66410: PPUSH
66411: CALL_OW 272
66415: PPUSH
66416: LD_VAR 0 2
66420: PPUSH
66421: LD_VAR 0 5
66425: PPUSH
66426: LD_VAR 0 6
66430: PPUSH
66431: CALL_OW 273
66435: PPUSH
66436: LD_VAR 0 3
66440: PPUSH
66441: CALL_OW 309
66445: IFFALSE 66459
// begin result := true ;
66447: LD_ADDR_VAR 0 4
66451: PUSH
66452: LD_INT 1
66454: ST_TO_ADDR
// exit ;
66455: POP
66456: POP
66457: GO 66463
// end ;
66459: GO 66393
66461: POP
66462: POP
// end ;
66463: LD_VAR 0 4
66467: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
66468: LD_INT 0
66470: PPUSH
66471: PPUSH
66472: PPUSH
// if btype = b_depot then
66473: LD_VAR 0 2
66477: PUSH
66478: LD_INT 0
66480: EQUAL
66481: IFFALSE 66493
// begin result := true ;
66483: LD_ADDR_VAR 0 3
66487: PUSH
66488: LD_INT 1
66490: ST_TO_ADDR
// exit ;
66491: GO 66613
// end ; pom := GetBase ( depot ) ;
66493: LD_ADDR_VAR 0 4
66497: PUSH
66498: LD_VAR 0 1
66502: PPUSH
66503: CALL_OW 274
66507: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
66508: LD_ADDR_VAR 0 5
66512: PUSH
66513: LD_VAR 0 2
66517: PPUSH
66518: LD_VAR 0 1
66522: PPUSH
66523: CALL_OW 248
66527: PPUSH
66528: CALL_OW 450
66532: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
66533: LD_ADDR_VAR 0 3
66537: PUSH
66538: LD_VAR 0 4
66542: PPUSH
66543: LD_INT 1
66545: PPUSH
66546: CALL_OW 275
66550: PUSH
66551: LD_VAR 0 5
66555: PUSH
66556: LD_INT 1
66558: ARRAY
66559: GREATEREQUAL
66560: IFFALSE 66586
66562: PUSH
66563: LD_VAR 0 4
66567: PPUSH
66568: LD_INT 2
66570: PPUSH
66571: CALL_OW 275
66575: PUSH
66576: LD_VAR 0 5
66580: PUSH
66581: LD_INT 2
66583: ARRAY
66584: GREATEREQUAL
66585: AND
66586: IFFALSE 66612
66588: PUSH
66589: LD_VAR 0 4
66593: PPUSH
66594: LD_INT 3
66596: PPUSH
66597: CALL_OW 275
66601: PUSH
66602: LD_VAR 0 5
66606: PUSH
66607: LD_INT 3
66609: ARRAY
66610: GREATEREQUAL
66611: AND
66612: ST_TO_ADDR
// end ;
66613: LD_VAR 0 3
66617: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
66618: LD_INT 0
66620: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
66621: LD_VAR 0 1
66625: PPUSH
66626: LD_VAR 0 2
66630: PPUSH
66631: LD_INT 0
66633: PPUSH
66634: LD_INT 0
66636: PPUSH
66637: LD_INT 1
66639: PPUSH
66640: LD_INT 0
66642: PPUSH
66643: CALL_OW 587
// end ;
66647: LD_VAR 0 3
66651: RET
// export function CenterOnNow ( unit ) ; begin
66652: LD_INT 0
66654: PPUSH
// result := IsInUnit ( unit ) ;
66655: LD_ADDR_VAR 0 2
66659: PUSH
66660: LD_VAR 0 1
66664: PPUSH
66665: CALL_OW 310
66669: ST_TO_ADDR
// if not result then
66670: LD_VAR 0 2
66674: NOT
66675: IFFALSE 66687
// result := unit ;
66677: LD_ADDR_VAR 0 2
66681: PUSH
66682: LD_VAR 0 1
66686: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
66687: LD_VAR 0 1
66691: PPUSH
66692: CALL_OW 87
// end ;
66696: LD_VAR 0 2
66700: RET
// export function ComMoveHex ( unit , hex ) ; begin
66701: LD_INT 0
66703: PPUSH
// if not hex then
66704: LD_VAR 0 2
66708: NOT
66709: IFFALSE 66713
// exit ;
66711: GO 66766
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
66713: LD_VAR 0 2
66717: PUSH
66718: LD_INT 1
66720: ARRAY
66721: PPUSH
66722: LD_VAR 0 2
66726: PUSH
66727: LD_INT 2
66729: ARRAY
66730: PPUSH
66731: CALL_OW 428
66735: IFFALSE 66739
// exit ;
66737: GO 66766
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
66739: LD_VAR 0 1
66743: PPUSH
66744: LD_VAR 0 2
66748: PUSH
66749: LD_INT 1
66751: ARRAY
66752: PPUSH
66753: LD_VAR 0 2
66757: PUSH
66758: LD_INT 2
66760: ARRAY
66761: PPUSH
66762: CALL_OW 111
// end ;
66766: LD_VAR 0 3
66770: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
66771: LD_INT 0
66773: PPUSH
66774: PPUSH
66775: PPUSH
// if not unit or not enemy then
66776: LD_VAR 0 1
66780: NOT
66781: IFTRUE 66790
66783: PUSH
66784: LD_VAR 0 2
66788: NOT
66789: OR
66790: IFFALSE 66794
// exit ;
66792: GO 66920
// x := GetX ( enemy ) ;
66794: LD_ADDR_VAR 0 4
66798: PUSH
66799: LD_VAR 0 2
66803: PPUSH
66804: CALL_OW 250
66808: ST_TO_ADDR
// y := GetY ( enemy ) ;
66809: LD_ADDR_VAR 0 5
66813: PUSH
66814: LD_VAR 0 2
66818: PPUSH
66819: CALL_OW 251
66823: ST_TO_ADDR
// if ValidHex ( x , y ) then
66824: LD_VAR 0 4
66828: PPUSH
66829: LD_VAR 0 5
66833: PPUSH
66834: CALL_OW 488
66838: IFFALSE 66920
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
66840: LD_VAR 0 2
66844: PPUSH
66845: CALL_OW 247
66849: PUSH
66850: LD_INT 3
66852: PUSH
66853: LD_INT 2
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: IN
66860: IFTRUE 66883
66862: PUSH
66863: LD_VAR 0 1
66867: PPUSH
66868: CALL_OW 255
66872: PPUSH
66873: LD_VAR 0 2
66877: PPUSH
66878: CALL_OW 292
66882: OR
66883: IFFALSE 66901
// ComAttackUnit ( unit , enemy ) else
66885: LD_VAR 0 1
66889: PPUSH
66890: LD_VAR 0 2
66894: PPUSH
66895: CALL_OW 115
66899: GO 66920
// ComAgressiveMove ( unit , x , y ) ;
66901: LD_VAR 0 1
66905: PPUSH
66906: LD_VAR 0 4
66910: PPUSH
66911: LD_VAR 0 5
66915: PPUSH
66916: CALL_OW 114
// end ;
66920: LD_VAR 0 3
66924: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
66925: LD_INT 0
66927: PPUSH
66928: PPUSH
66929: PPUSH
// list := AreaToList ( area , 0 ) ;
66930: LD_ADDR_VAR 0 5
66934: PUSH
66935: LD_VAR 0 1
66939: PPUSH
66940: LD_INT 0
66942: PPUSH
66943: CALL_OW 517
66947: ST_TO_ADDR
// if not list then
66948: LD_VAR 0 5
66952: NOT
66953: IFFALSE 66957
// exit ;
66955: GO 67087
// if all then
66957: LD_VAR 0 2
66961: IFFALSE 67049
// begin for i := 1 to list [ 1 ] do
66963: LD_ADDR_VAR 0 4
66967: PUSH
66968: DOUBLE
66969: LD_INT 1
66971: DEC
66972: ST_TO_ADDR
66973: LD_VAR 0 5
66977: PUSH
66978: LD_INT 1
66980: ARRAY
66981: PUSH
66982: FOR_TO
66983: IFFALSE 67045
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
66985: LD_ADDR_VAR 0 3
66989: PUSH
66990: LD_VAR 0 3
66994: PPUSH
66995: LD_VAR 0 3
66999: PUSH
67000: LD_INT 1
67002: PLUS
67003: PPUSH
67004: LD_VAR 0 5
67008: PUSH
67009: LD_INT 1
67011: ARRAY
67012: PUSH
67013: LD_VAR 0 4
67017: ARRAY
67018: PUSH
67019: LD_VAR 0 5
67023: PUSH
67024: LD_INT 2
67026: ARRAY
67027: PUSH
67028: LD_VAR 0 4
67032: ARRAY
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PPUSH
67038: CALL_OW 1
67042: ST_TO_ADDR
67043: GO 66982
67045: POP
67046: POP
// exit ;
67047: GO 67087
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
67049: LD_ADDR_VAR 0 3
67053: PUSH
67054: LD_VAR 0 5
67058: PUSH
67059: LD_INT 1
67061: ARRAY
67062: PUSH
67063: LD_INT 1
67065: ARRAY
67066: PUSH
67067: LD_VAR 0 5
67071: PUSH
67072: LD_INT 2
67074: ARRAY
67075: PUSH
67076: LD_INT 1
67078: ARRAY
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: EMPTY
67085: LIST
67086: ST_TO_ADDR
// end ;
67087: LD_VAR 0 3
67091: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
67092: LD_INT 0
67094: PPUSH
67095: PPUSH
// list := AreaToList ( area , 0 ) ;
67096: LD_ADDR_VAR 0 4
67100: PUSH
67101: LD_VAR 0 1
67105: PPUSH
67106: LD_INT 0
67108: PPUSH
67109: CALL_OW 517
67113: ST_TO_ADDR
// if not list then
67114: LD_VAR 0 4
67118: NOT
67119: IFFALSE 67123
// exit ;
67121: GO 67164
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
67123: LD_ADDR_VAR 0 3
67127: PUSH
67128: LD_VAR 0 4
67132: PUSH
67133: LD_INT 1
67135: ARRAY
67136: PUSH
67137: LD_INT 1
67139: ARRAY
67140: PUSH
67141: LD_VAR 0 4
67145: PUSH
67146: LD_INT 2
67148: ARRAY
67149: PUSH
67150: LD_INT 1
67152: ARRAY
67153: PUSH
67154: LD_VAR 0 2
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: LIST
67163: ST_TO_ADDR
// end ;
67164: LD_VAR 0 3
67168: RET
// export function First ( array ) ; begin
67169: LD_INT 0
67171: PPUSH
// if not array then
67172: LD_VAR 0 1
67176: NOT
67177: IFFALSE 67181
// exit ;
67179: GO 67195
// result := array [ 1 ] ;
67181: LD_ADDR_VAR 0 2
67185: PUSH
67186: LD_VAR 0 1
67190: PUSH
67191: LD_INT 1
67193: ARRAY
67194: ST_TO_ADDR
// end ;
67195: LD_VAR 0 2
67199: RET
// export function Last ( array ) ; begin
67200: LD_INT 0
67202: PPUSH
// if not array then
67203: LD_VAR 0 1
67207: NOT
67208: IFFALSE 67212
// exit ;
67210: GO 67228
// result := array [ array ] ;
67212: LD_ADDR_VAR 0 2
67216: PUSH
67217: LD_VAR 0 1
67221: PUSH
67222: LD_VAR 0 1
67226: ARRAY
67227: ST_TO_ADDR
// end ;
67228: LD_VAR 0 2
67232: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
67233: LD_INT 0
67235: PPUSH
67236: PPUSH
// result := [ ] ;
67237: LD_ADDR_VAR 0 5
67241: PUSH
67242: EMPTY
67243: ST_TO_ADDR
// if not array then
67244: LD_VAR 0 1
67248: NOT
67249: IFFALSE 67253
// exit ;
67251: GO 67365
// for i := 1 to array do
67253: LD_ADDR_VAR 0 6
67257: PUSH
67258: DOUBLE
67259: LD_INT 1
67261: DEC
67262: ST_TO_ADDR
67263: LD_VAR 0 1
67267: PUSH
67268: FOR_TO
67269: IFFALSE 67363
// if array [ i ] [ index ] = value then
67271: LD_VAR 0 1
67275: PUSH
67276: LD_VAR 0 6
67280: ARRAY
67281: PUSH
67282: LD_VAR 0 2
67286: ARRAY
67287: PUSH
67288: LD_VAR 0 3
67292: EQUAL
67293: IFFALSE 67361
// begin if indexColumn then
67295: LD_VAR 0 4
67299: IFFALSE 67335
// result := Join ( result , array [ i ] [ indexColumn ] ) else
67301: LD_ADDR_VAR 0 5
67305: PUSH
67306: LD_VAR 0 5
67310: PPUSH
67311: LD_VAR 0 1
67315: PUSH
67316: LD_VAR 0 6
67320: ARRAY
67321: PUSH
67322: LD_VAR 0 4
67326: ARRAY
67327: PPUSH
67328: CALL 62373 0 2
67332: ST_TO_ADDR
67333: GO 67361
// result := Join ( result , array [ i ] ) ;
67335: LD_ADDR_VAR 0 5
67339: PUSH
67340: LD_VAR 0 5
67344: PPUSH
67345: LD_VAR 0 1
67349: PUSH
67350: LD_VAR 0 6
67354: ARRAY
67355: PPUSH
67356: CALL 62373 0 2
67360: ST_TO_ADDR
// end ;
67361: GO 67268
67363: POP
67364: POP
// end ;
67365: LD_VAR 0 5
67369: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
67370: LD_INT 0
67372: PPUSH
// if not vehicles or not parkingPoint then
67373: LD_VAR 0 1
67377: NOT
67378: IFTRUE 67387
67380: PUSH
67381: LD_VAR 0 2
67385: NOT
67386: OR
67387: IFFALSE 67391
// exit ;
67389: GO 67489
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
67391: LD_ADDR_VAR 0 1
67395: PUSH
67396: LD_VAR 0 1
67400: PPUSH
67401: LD_INT 50
67403: PUSH
67404: EMPTY
67405: LIST
67406: PUSH
67407: LD_INT 3
67409: PUSH
67410: LD_INT 92
67412: PUSH
67413: LD_VAR 0 2
67417: PUSH
67418: LD_INT 1
67420: ARRAY
67421: PUSH
67422: LD_VAR 0 2
67426: PUSH
67427: LD_INT 2
67429: ARRAY
67430: PUSH
67431: LD_INT 8
67433: PUSH
67434: EMPTY
67435: LIST
67436: LIST
67437: LIST
67438: LIST
67439: PUSH
67440: EMPTY
67441: LIST
67442: LIST
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PPUSH
67448: CALL_OW 72
67452: ST_TO_ADDR
// if not vehicles then
67453: LD_VAR 0 1
67457: NOT
67458: IFFALSE 67462
// exit ;
67460: GO 67489
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
67462: LD_VAR 0 1
67466: PPUSH
67467: LD_VAR 0 2
67471: PUSH
67472: LD_INT 1
67474: ARRAY
67475: PPUSH
67476: LD_VAR 0 2
67480: PUSH
67481: LD_INT 2
67483: ARRAY
67484: PPUSH
67485: CALL_OW 111
// end ;
67489: LD_VAR 0 3
67493: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
67494: LD_INT 0
67496: PPUSH
67497: PPUSH
67498: PPUSH
// if not side or not area then
67499: LD_VAR 0 1
67503: NOT
67504: IFTRUE 67513
67506: PUSH
67507: LD_VAR 0 2
67511: NOT
67512: OR
67513: IFFALSE 67517
// exit ;
67515: GO 67636
// tmp := AreaToList ( area , 0 ) ;
67517: LD_ADDR_VAR 0 5
67521: PUSH
67522: LD_VAR 0 2
67526: PPUSH
67527: LD_INT 0
67529: PPUSH
67530: CALL_OW 517
67534: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
67535: LD_ADDR_VAR 0 4
67539: PUSH
67540: DOUBLE
67541: LD_INT 1
67543: DEC
67544: ST_TO_ADDR
67545: LD_VAR 0 5
67549: PUSH
67550: LD_INT 1
67552: ARRAY
67553: PUSH
67554: FOR_TO
67555: IFFALSE 67634
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
67557: LD_VAR 0 5
67561: PUSH
67562: LD_INT 1
67564: ARRAY
67565: PUSH
67566: LD_VAR 0 4
67570: ARRAY
67571: PPUSH
67572: LD_VAR 0 5
67576: PUSH
67577: LD_INT 2
67579: ARRAY
67580: PUSH
67581: LD_VAR 0 4
67585: ARRAY
67586: PPUSH
67587: CALL_OW 351
67591: IFFALSE 67632
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
67593: LD_VAR 0 5
67597: PUSH
67598: LD_INT 1
67600: ARRAY
67601: PUSH
67602: LD_VAR 0 4
67606: ARRAY
67607: PPUSH
67608: LD_VAR 0 5
67612: PUSH
67613: LD_INT 2
67615: ARRAY
67616: PUSH
67617: LD_VAR 0 4
67621: ARRAY
67622: PPUSH
67623: LD_VAR 0 1
67627: PPUSH
67628: CALL_OW 244
// end ;
67632: GO 67554
67634: POP
67635: POP
// end ;
67636: LD_VAR 0 3
67640: RET
// export function UniqueArray ( array ) ; var i ; begin
67641: LD_INT 0
67643: PPUSH
67644: PPUSH
// result := [ ] ;
67645: LD_ADDR_VAR 0 2
67649: PUSH
67650: EMPTY
67651: ST_TO_ADDR
// if not array then
67652: LD_VAR 0 1
67656: NOT
67657: IFFALSE 67661
// exit ;
67659: GO 67722
// for i := 1 to array do
67661: LD_ADDR_VAR 0 3
67665: PUSH
67666: DOUBLE
67667: LD_INT 1
67669: DEC
67670: ST_TO_ADDR
67671: LD_VAR 0 1
67675: PUSH
67676: FOR_TO
67677: IFFALSE 67720
// if not array [ i ] in result then
67679: LD_VAR 0 1
67683: PUSH
67684: LD_VAR 0 3
67688: ARRAY
67689: PUSH
67690: LD_VAR 0 2
67694: IN
67695: NOT
67696: IFFALSE 67718
// result := Join ( result , i ) ;
67698: LD_ADDR_VAR 0 2
67702: PUSH
67703: LD_VAR 0 2
67707: PPUSH
67708: LD_VAR 0 3
67712: PPUSH
67713: CALL 62373 0 2
67717: ST_TO_ADDR
67718: GO 67676
67720: POP
67721: POP
// end ; end_of_file
67722: LD_VAR 0 2
67726: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeFamine do var i , canWin ;
67727: LD_EXP 48
67731: IFFALSE 67739
67733: PUSH
67734: CALL 67949 0 0
67738: AND
67739: IFFALSE 67747
67741: PUSH
67742: LD_OWVAR 4
67746: AND
67747: IFFALSE 67946
67749: GO 67751
67751: DISABLE
67752: LD_INT 0
67754: PPUSH
67755: PPUSH
// begin canWin := false ;
67756: LD_ADDR_VAR 0 2
67760: PUSH
67761: LD_INT 0
67763: ST_TO_ADDR
// if not HasPower ( your_side ) then
67764: LD_OWVAR 2
67768: PPUSH
67769: CALL 67991 0 1
67773: NOT
67774: IFFALSE 67785
// begin Multiplayer_Loose_Message ;
67776: CALL_OW 521
// enable ( mpLose ) ;
67780: LD_INT 102
67782: ENABLE_MARKED
// end else
67783: GO 67946
// begin canWin := true ;
67785: LD_ADDR_VAR 0 2
67789: PUSH
67790: LD_INT 1
67792: ST_TO_ADDR
// for i := 1 to 8 do
67793: LD_ADDR_VAR 0 1
67797: PUSH
67798: DOUBLE
67799: LD_INT 1
67801: DEC
67802: ST_TO_ADDR
67803: LD_INT 8
67805: PUSH
67806: FOR_TO
67807: IFFALSE 67932
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
67809: LD_EXP 16
67813: PUSH
67814: LD_VAR 0 1
67818: ARRAY
67819: IFFALSE 67832
67821: PUSH
67822: LD_VAR 0 1
67826: PPUSH
67827: CALL_OW 108
67831: AND
67832: IFFALSE 67846
67834: PUSH
67835: LD_VAR 0 1
67839: PUSH
67840: LD_OWVAR 2
67844: NONEQUAL
67845: AND
67846: IFFALSE 67930
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
67848: LD_EXP 17
67852: PUSH
67853: LD_VAR 0 1
67857: ARRAY
67858: NOT
67859: IFTRUE 67907
67861: PUSH
67862: LD_EXP 17
67866: PUSH
67867: LD_VAR 0 1
67871: ARRAY
67872: PUSH
67873: LD_EXP 17
67877: PUSH
67878: LD_OWVAR 2
67882: ARRAY
67883: NONEQUAL
67884: IFFALSE 67906
67886: PUSH
67887: LD_OWVAR 2
67891: PPUSH
67892: LD_VAR 0 1
67896: PPUSH
67897: CALL_OW 81
67901: PUSH
67902: LD_INT 1
67904: NONEQUAL
67905: AND
67906: OR
67907: IFFALSE 67930
// if HasPower ( i ) then
67909: LD_VAR 0 1
67913: PPUSH
67914: CALL 67991 0 1
67918: IFFALSE 67930
// begin canWin := false ;
67920: LD_ADDR_VAR 0 2
67924: PUSH
67925: LD_INT 0
67927: ST_TO_ADDR
// break ;
67928: GO 67932
// end ;
67930: GO 67806
67932: POP
67933: POP
// if canWin then
67934: LD_VAR 0 2
67938: IFFALSE 67945
// enable ( mpWin ) else
67940: LD_INT 101
67942: ENABLE_MARKED
67943: GO 67946
// enable ;
67945: ENABLE
// end ; end ;
67946: PPOPN 2
67948: END
// function CanWinLoose ; begin
67949: LD_INT 0
67951: PPUSH
// result := true ;
67952: LD_ADDR_VAR 0 1
67956: PUSH
67957: LD_INT 1
67959: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
67960: CALL_OW 531
67964: IFFALSE 67976
67966: PUSH
67967: CALL_OW 519
67971: PUSH
67972: LD_INT 1
67974: GREATER
67975: AND
67976: IFFALSE 67986
// result := false ;
67978: LD_ADDR_VAR 0 1
67982: PUSH
67983: LD_INT 0
67985: ST_TO_ADDR
// end ;
67986: LD_VAR 0 1
67990: RET
// function HasPower ( i ) ; begin
67991: LD_INT 0
67993: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
67994: LD_ADDR_VAR 0 2
67998: PUSH
67999: LD_INT 22
68001: PUSH
68002: LD_VAR 0 1
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: PUSH
68011: LD_INT 2
68013: PUSH
68014: LD_INT 21
68016: PUSH
68017: LD_INT 1
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: LD_INT 33
68026: PUSH
68027: LD_INT 3
68029: PUSH
68030: EMPTY
68031: LIST
68032: LIST
68033: PUSH
68034: LD_INT 33
68036: PUSH
68037: LD_INT 5
68039: PUSH
68040: EMPTY
68041: LIST
68042: LIST
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: LIST
68048: LIST
68049: PUSH
68050: EMPTY
68051: LIST
68052: LIST
68053: PPUSH
68054: CALL_OW 69
68058: ST_TO_ADDR
// end ;
68059: LD_VAR 0 2
68063: RET
// export function FamineDeposits ( areas , values , type ) ; var i , j , list ; begin
68064: LD_INT 0
68066: PPUSH
68067: PPUSH
68068: PPUSH
68069: PPUSH
// if not areas or not values or not type in [ mat_oil , mat_siberit ] then
68070: LD_VAR 0 1
68074: NOT
68075: IFTRUE 68084
68077: PUSH
68078: LD_VAR 0 2
68082: NOT
68083: OR
68084: IFTRUE 68104
68086: PUSH
68087: LD_VAR 0 3
68091: PUSH
68092: LD_INT 2
68094: PUSH
68095: LD_INT 3
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: IN
68102: NOT
68103: OR
68104: IFFALSE 68108
// exit ;
68106: GO 68358
// for i := 1 to Count ( areas ) do
68108: LD_ADDR_VAR 0 5
68112: PUSH
68113: DOUBLE
68114: LD_INT 1
68116: DEC
68117: ST_TO_ADDR
68118: LD_VAR 0 1
68122: PPUSH
68123: CALL 26397 0 1
68127: PUSH
68128: FOR_TO
68129: IFFALSE 68356
// begin list := AreaToList ( areas [ i ] , 0 ) ;
68131: LD_ADDR_VAR 0 7
68135: PUSH
68136: LD_VAR 0 1
68140: PUSH
68141: LD_VAR 0 5
68145: ARRAY
68146: PPUSH
68147: LD_INT 0
68149: PPUSH
68150: CALL_OW 517
68154: ST_TO_ADDR
// for j := 1 to list [ 1 ] do
68155: LD_ADDR_VAR 0 6
68159: PUSH
68160: DOUBLE
68161: LD_INT 1
68163: DEC
68164: ST_TO_ADDR
68165: LD_VAR 0 7
68169: PUSH
68170: LD_INT 1
68172: ARRAY
68173: PUSH
68174: FOR_TO
68175: IFFALSE 68352
// begin CreateDepositXY ( list [ 1 ] [ j ] , list [ 2 ] [ j ] , type ) ;
68177: LD_VAR 0 7
68181: PUSH
68182: LD_INT 1
68184: ARRAY
68185: PUSH
68186: LD_VAR 0 6
68190: ARRAY
68191: PPUSH
68192: LD_VAR 0 7
68196: PUSH
68197: LD_INT 2
68199: ARRAY
68200: PUSH
68201: LD_VAR 0 6
68205: ARRAY
68206: PPUSH
68207: LD_VAR 0 3
68211: PPUSH
68212: CALL_OW 62
// if type = mat_oil then
68216: LD_VAR 0 3
68220: PUSH
68221: LD_INT 2
68223: EQUAL
68224: IFFALSE 68289
// mpGlobalOilDeposits := Join ( mpGlobalOilDeposits , [ list [ 1 ] [ j ] , list [ 2 ] [ j ] , values [ i ] ] ) else
68226: LD_ADDR_EXP 51
68230: PUSH
68231: LD_EXP 51
68235: PPUSH
68236: LD_VAR 0 7
68240: PUSH
68241: LD_INT 1
68243: ARRAY
68244: PUSH
68245: LD_VAR 0 6
68249: ARRAY
68250: PUSH
68251: LD_VAR 0 7
68255: PUSH
68256: LD_INT 2
68258: ARRAY
68259: PUSH
68260: LD_VAR 0 6
68264: ARRAY
68265: PUSH
68266: LD_VAR 0 2
68270: PUSH
68271: LD_VAR 0 5
68275: ARRAY
68276: PUSH
68277: EMPTY
68278: LIST
68279: LIST
68280: LIST
68281: PPUSH
68282: CALL 62373 0 2
68286: ST_TO_ADDR
68287: GO 68350
// mpGlobalSibDeposits := Join ( mpGlobalSibDeposits , [ list [ 1 ] [ j ] , list [ 2 ] [ j ] , values [ i ] ] ) end ;
68289: LD_ADDR_EXP 52
68293: PUSH
68294: LD_EXP 52
68298: PPUSH
68299: LD_VAR 0 7
68303: PUSH
68304: LD_INT 1
68306: ARRAY
68307: PUSH
68308: LD_VAR 0 6
68312: ARRAY
68313: PUSH
68314: LD_VAR 0 7
68318: PUSH
68319: LD_INT 2
68321: ARRAY
68322: PUSH
68323: LD_VAR 0 6
68327: ARRAY
68328: PUSH
68329: LD_VAR 0 2
68333: PUSH
68334: LD_VAR 0 5
68338: ARRAY
68339: PUSH
68340: EMPTY
68341: LIST
68342: LIST
68343: LIST
68344: PPUSH
68345: CALL 62373 0 2
68349: ST_TO_ADDR
68350: GO 68174
68352: POP
68353: POP
// end ;
68354: GO 68128
68356: POP
68357: POP
// end ; end_of_file
68358: LD_VAR 0 4
68362: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
68363: PPOPN 6
68365: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
68366: LD_INT 0
68368: PPUSH
// begin if not units then
68369: LD_VAR 0 1
68373: NOT
68374: IFFALSE 68378
// exit ;
68376: GO 68412
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
68378: LD_VAR 0 1
68382: PPUSH
68383: LD_VAR 0 2
68387: PPUSH
68388: LD_VAR 0 3
68392: PPUSH
68393: LD_VAR 0 4
68397: PPUSH
68398: LD_VAR 0 5
68402: PPUSH
68403: LD_VAR 0 6
68407: PPUSH
68408: CALL 24146 0 6
// end ;
68412: PPOPN 7
68414: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
68415: LD_EXP 12
68419: PUSH
68420: LD_INT 4
68422: EQUAL
68423: IFFALSE 68459
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
68425: LD_STRING setGameDifficulty(
68427: PUSH
68428: LD_OWVAR 67
68432: STR
68433: PUSH
68434: LD_STRING )
68436: STR
68437: PPUSH
68438: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
68442: LD_STRING displayDifficulty(
68444: PUSH
68445: LD_OWVAR 67
68449: STR
68450: PUSH
68451: LD_STRING )
68453: STR
68454: PPUSH
68455: CALL_OW 559
// end ; SOS_MapStart ( ) ;
68459: CALL 16277 0 0
// end ;
68463: PPOPN 1
68465: END
