// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 6633 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 7017 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 0 , 1 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 ] ;
  20: LD_ADDR_EXP 13
  24: PUSH
  25: LD_INT 0
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 0
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 0
  42: PUSH
  43: LD_INT 0
  45: PUSH
  46: LD_INT 0
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 0
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 0
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 1
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 1
  81: PUSH
  82: LD_INT 1
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 1 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ 30 , 50 , 100 ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ 0 , 1 ] , [ 0 , 1 ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] , ] ;
 111: LD_ADDR_EXP 14
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 1
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: LD_INT 30
 409: PUSH
 410: LD_INT 50
 412: PUSH
 413: LD_INT 100
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: LIST
 420: PUSH
 421: EMPTY
 422: PUSH
 423: LD_INT 0
 425: PUSH
 426: LD_INT 1
 428: PUSH
 429: LD_INT 31500
 431: PUSH
 432: LD_INT 52500
 434: PUSH
 435: LD_INT 63000
 437: PUSH
 438: LD_INT 94500
 440: PUSH
 441: LD_INT 126000
 443: PUSH
 444: LD_INT 189000
 446: PUSH
 447: LD_INT 210000
 449: PUSH
 450: LD_INT 252000
 452: PUSH
 453: LD_INT 378000
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: LIST
 460: LIST
 461: LIST
 462: LIST
 463: LIST
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_INT 0
 471: PUSH
 472: LD_INT 1
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: PUSH
 479: LD_INT 0
 481: PUSH
 482: LD_INT 1
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: PUSH
 489: LD_INT 0
 491: PUSH
 492: LD_INT 6300
 494: PUSH
 495: LD_INT 10500
 497: PUSH
 498: LD_INT 16800
 500: PUSH
 501: LD_INT 21000
 503: PUSH
 504: LD_INT 25200
 506: PUSH
 507: LD_INT 31500
 509: PUSH
 510: LD_INT 42000
 512: PUSH
 513: LD_INT 63000
 515: PUSH
 516: EMPTY
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: LIST
 534: LIST
 535: LIST
 536: LIST
 537: LIST
 538: LIST
 539: LIST
 540: LIST
 541: LIST
 542: LIST
 543: LIST
 544: LIST
 545: LIST
 546: LIST
 547: LIST
 548: LIST
 549: ST_TO_ADDR
// mpGameSettings := [ 0 , 15 , 4 , [ 0 , 0 , 0 ] , 3 , 0 , 0 , 0 , 1 , 0 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 30 , 0 , 15 15$0 , 1 , 1 , 0 ] ;
 550: LD_ADDR_EXP 15
 554: PUSH
 555: LD_INT 0
 557: PUSH
 558: LD_INT 15
 560: PUSH
 561: LD_INT 4
 563: PUSH
 564: LD_INT 0
 566: PUSH
 567: LD_INT 0
 569: PUSH
 570: LD_INT 0
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: LIST
 577: PUSH
 578: LD_INT 3
 580: PUSH
 581: LD_INT 0
 583: PUSH
 584: LD_INT 0
 586: PUSH
 587: LD_INT 0
 589: PUSH
 590: LD_INT 1
 592: PUSH
 593: LD_INT 0
 595: PUSH
 596: LD_INT 1
 598: PUSH
 599: LD_INT 700
 601: PUSH
 602: LD_INT 1
 604: PUSH
 605: LD_INT 700
 607: PUSH
 608: LD_INT 3
 610: PUSH
 611: LD_INT 30
 613: PUSH
 614: LD_INT 0
 616: PUSH
 617: LD_INT 31500
 619: PUSH
 620: LD_INT 1
 622: PUSH
 623: LD_INT 1
 625: PUSH
 626: LD_INT 0
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: LIST
 636: LIST
 637: LIST
 638: LIST
 639: LIST
 640: LIST
 641: LIST
 642: LIST
 643: LIST
 644: LIST
 645: LIST
 646: LIST
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: ST_TO_ADDR
// mpGameType := GameTypeFamine ;
 652: LD_ADDR_EXP 12
 656: PUSH
 657: LD_INT 5
 659: ST_TO_ADDR
// your_side := 1 ;
 660: LD_ADDR_OWVAR 2
 664: PUSH
 665: LD_INT 1
 667: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 0 , 0 , 0 , 6 , 7 , 0 ] ;
 668: LD_ADDR_EXP 16
 672: PUSH
 673: LD_INT 1
 675: PUSH
 676: LD_INT 2
 678: PUSH
 679: LD_INT 0
 681: PUSH
 682: LD_INT 0
 684: PUSH
 685: LD_INT 0
 687: PUSH
 688: LD_INT 6
 690: PUSH
 691: LD_INT 7
 693: PUSH
 694: LD_INT 0
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: LIST
 703: LIST
 704: LIST
 705: LIST
 706: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 0 , 0 , 0 , 2 , 2 , 0 ] ;
 707: LD_ADDR_EXP 17
 711: PUSH
 712: LD_INT 1
 714: PUSH
 715: LD_INT 2
 717: PUSH
 718: LD_INT 0
 720: PUSH
 721: LD_INT 0
 723: PUSH
 724: LD_INT 0
 726: PUSH
 727: LD_INT 2
 729: PUSH
 730: LD_INT 2
 732: PUSH
 733: LD_INT 0
 735: PUSH
 736: EMPTY
 737: LIST
 738: LIST
 739: LIST
 740: LIST
 741: LIST
 742: LIST
 743: LIST
 744: LIST
 745: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 0 , 0 , 0 , 3 , 1 , 0 ] ;
 746: LD_ADDR_EXP 18
 750: PUSH
 751: LD_INT 1
 753: PUSH
 754: LD_INT 2
 756: PUSH
 757: LD_INT 0
 759: PUSH
 760: LD_INT 0
 762: PUSH
 763: LD_INT 0
 765: PUSH
 766: LD_INT 3
 768: PUSH
 769: LD_INT 1
 771: PUSH
 772: LD_INT 0
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: LIST
 779: LIST
 780: LIST
 781: LIST
 782: LIST
 783: LIST
 784: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 ] , [ 6 , 7 ] ] ;
 785: LD_ADDR_EXP 19
 789: PUSH
 790: LD_INT 1
 792: PUSH
 793: LD_INT 2
 795: PUSH
 796: EMPTY
 797: LIST
 798: LIST
 799: PUSH
 800: LD_INT 6
 802: PUSH
 803: LD_INT 7
 805: PUSH
 806: EMPTY
 807: LIST
 808: LIST
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: ST_TO_ADDR
// mpTeamGame := false ;
 814: LD_ADDR_EXP 20
 818: PUSH
 819: LD_INT 0
 821: ST_TO_ADDR
// mpMapSize := [ 240 , 270 ] ;
 822: LD_ADDR_EXP 38
 826: PUSH
 827: LD_INT 240
 829: PUSH
 830: LD_INT 270
 832: PUSH
 833: EMPTY
 834: LIST
 835: LIST
 836: ST_TO_ADDR
// end ;
 837: LD_VAR 0 1
 841: RET
// export BuildUpEscape , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , t , all , depositsValue , startPos ; begin
 842: LD_INT 0
 844: PPUSH
 845: PPUSH
 846: PPUSH
 847: PPUSH
 848: PPUSH
 849: PPUSH
// BuildUpEscape := 0 ;
 850: LD_ADDR_EXP 1
 854: PUSH
 855: LD_INT 0
 857: ST_TO_ADDR
// kingCamArea := 0 ;
 858: LD_ADDR_EXP 2
 862: PUSH
 863: LD_INT 0
 865: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 866: LD_ADDR_EXP 33
 870: PUSH
 871: LD_EXP 15
 875: PUSH
 876: LD_INT 2
 878: ARRAY
 879: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 880: LD_ADDR_EXP 34
 884: PUSH
 885: LD_EXP 15
 889: PUSH
 890: LD_INT 3
 892: ARRAY
 893: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 894: LD_ADDR_EXP 36
 898: PUSH
 899: LD_EXP 15
 903: PUSH
 904: LD_INT 5
 906: ARRAY
 907: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
 908: LD_EXP 15
 912: PUSH
 913: LD_INT 9
 915: ARRAY
 916: IFFALSE 1105
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ] ] ] ;
 918: LD_ADDR_EXP 45
 922: PUSH
 923: LD_INT 1
 925: PUSH
 926: LD_INT 1
 928: PUSH
 929: LD_INT 1
 931: PUSH
 932: LD_INT 2
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 1
 943: PUSH
 944: LD_INT 1
 946: PUSH
 947: LD_INT 1
 949: PUSH
 950: LD_INT 3
 952: PUSH
 953: EMPTY
 954: LIST
 955: LIST
 956: LIST
 957: LIST
 958: PUSH
 959: LD_INT 2
 961: PUSH
 962: LD_INT 1
 964: PUSH
 965: LD_INT 1
 967: PUSH
 968: LD_INT 12
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: LIST
 981: PUSH
 982: LD_INT 12
 984: PUSH
 985: LD_INT 1
 987: PUSH
 988: LD_INT 1
 990: PUSH
 991: LD_INT 24
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: PUSH
1000: LD_INT 12
1002: PUSH
1003: LD_INT 1
1005: PUSH
1006: LD_INT 1
1008: PUSH
1009: LD_INT 23
1011: PUSH
1012: EMPTY
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 13
1020: PUSH
1021: LD_INT 1
1023: PUSH
1024: LD_INT 1
1026: PUSH
1027: LD_INT 32
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: LIST
1040: PUSH
1041: LD_INT 21
1043: PUSH
1044: LD_INT 1
1046: PUSH
1047: LD_INT 1
1049: PUSH
1050: LD_INT 42
1052: PUSH
1053: EMPTY
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: PUSH
1059: LD_INT 21
1061: PUSH
1062: LD_INT 1
1064: PUSH
1065: LD_INT 1
1067: PUSH
1068: LD_INT 42
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: LIST
1075: LIST
1076: PUSH
1077: LD_INT 21
1079: PUSH
1080: LD_INT 1
1082: PUSH
1083: LD_INT 1
1085: PUSH
1086: LD_INT 51
1088: PUSH
1089: EMPTY
1090: LIST
1091: LIST
1092: LIST
1093: LIST
1094: PUSH
1095: EMPTY
1096: LIST
1097: LIST
1098: LIST
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: LIST
1104: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1105: LD_ADDR_EXP 25
1109: PUSH
1110: LD_EXP 15
1114: PUSH
1115: LD_INT 11
1117: ARRAY
1118: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1119: LD_ADDR_EXP 35
1123: PUSH
1124: LD_EXP 15
1128: PUSH
1129: LD_INT 13
1131: ARRAY
1132: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1133: LD_ADDR_EXP 42
1137: PUSH
1138: LD_EXP 15
1142: PUSH
1143: LD_INT 14
1145: ARRAY
1146: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1147: LD_ADDR_EXP 39
1151: PUSH
1152: LD_EXP 15
1156: PUSH
1157: LD_INT 15
1159: ARRAY
1160: ST_TO_ADDR
// depositsValue := mpGameSettings [ 16 ] ;
1161: LD_ADDR_VAR 0 6
1165: PUSH
1166: LD_EXP 15
1170: PUSH
1171: LD_INT 16
1173: ARRAY
1174: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1175: LD_ADDR_EXP 37
1179: PUSH
1180: LD_EXP 15
1184: PUSH
1185: LD_INT 18
1187: ARRAY
1188: ST_TO_ADDR
// mpArtifacts := mpGameSettings [ 19 ] ;
1189: LD_ADDR_EXP 53
1193: PUSH
1194: LD_EXP 15
1198: PUSH
1199: LD_INT 19
1201: ARRAY
1202: ST_TO_ADDR
// mpTeleports := mpGameSettings [ 20 ] ;
1203: LD_ADDR_EXP 52
1207: PUSH
1208: LD_EXP 15
1212: PUSH
1213: LD_INT 20
1215: ARRAY
1216: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1217: LD_ADDR_EXP 40
1221: PUSH
1222: LD_INT 7
1224: PUSH
1225: LD_INT 8
1227: PUSH
1228: LD_INT 9
1230: PUSH
1231: LD_INT 10
1233: PUSH
1234: LD_INT 11
1236: PUSH
1237: LD_INT 12
1239: PUSH
1240: LD_INT 13
1242: PUSH
1243: LD_INT 14
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: LIST
1255: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 0 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 1 ) , GetBuildingFromArea ( depotArea4 , 2 ) , GetBuildingFromArea ( depotArea5 , 3 ) , GetBuildingFromArea ( depotArea6 , 4 ) , GetBuildingFromArea ( depotArea7 , 4 ) , GetBuildingFromArea ( depotArea8 , 5 ) ] ;
1256: LD_ADDR_VAR 0 7
1260: PUSH
1261: LD_INT 15
1263: PPUSH
1264: LD_INT 0
1266: PPUSH
1267: CALL 66314 0 2
1271: PUSH
1272: LD_INT 16
1274: PPUSH
1275: LD_INT 1
1277: PPUSH
1278: CALL 66314 0 2
1282: PUSH
1283: LD_INT 17
1285: PPUSH
1286: LD_INT 1
1288: PPUSH
1289: CALL 66314 0 2
1293: PUSH
1294: LD_INT 18
1296: PPUSH
1297: LD_INT 2
1299: PPUSH
1300: CALL 66314 0 2
1304: PUSH
1305: LD_INT 19
1307: PPUSH
1308: LD_INT 3
1310: PPUSH
1311: CALL 66314 0 2
1315: PUSH
1316: LD_INT 20
1318: PPUSH
1319: LD_INT 4
1321: PPUSH
1322: CALL 66314 0 2
1326: PUSH
1327: LD_INT 21
1329: PPUSH
1330: LD_INT 4
1332: PPUSH
1333: CALL 66314 0 2
1337: PUSH
1338: LD_INT 22
1340: PPUSH
1341: LD_INT 5
1343: PPUSH
1344: CALL 66314 0 2
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1359: LD_ADDR_VAR 0 3
1363: PUSH
1364: DOUBLE
1365: LD_INT 1
1367: DEC
1368: ST_TO_ADDR
1369: LD_VAR 0 7
1373: PPUSH
1374: CALL 25629 0 1
1378: PUSH
1379: FOR_TO
1380: IFFALSE 1484
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1382: LD_ADDR_EXP 30
1386: PUSH
1387: LD_EXP 30
1391: PPUSH
1392: LD_VAR 0 3
1396: PPUSH
1397: LD_VAR 0 7
1401: PUSH
1402: LD_VAR 0 3
1406: ARRAY
1407: PUSH
1408: LD_INT 1
1410: ARRAY
1411: PPUSH
1412: LD_VAR 0 7
1416: PUSH
1417: LD_VAR 0 3
1421: ARRAY
1422: PUSH
1423: LD_INT 3
1425: ARRAY
1426: PPUSH
1427: LD_INT 10
1429: PPUSH
1430: CALL_OW 272
1434: PUSH
1435: LD_VAR 0 7
1439: PUSH
1440: LD_VAR 0 3
1444: ARRAY
1445: PUSH
1446: LD_INT 2
1448: ARRAY
1449: PPUSH
1450: LD_VAR 0 7
1454: PUSH
1455: LD_VAR 0 3
1459: ARRAY
1460: PUSH
1461: LD_INT 3
1463: ARRAY
1464: PPUSH
1465: LD_INT 10
1467: PPUSH
1468: CALL_OW 273
1472: PUSH
1473: EMPTY
1474: LIST
1475: LIST
1476: PPUSH
1477: CALL_OW 1
1481: ST_TO_ADDR
1482: GO 1379
1484: POP
1485: POP
// if mpGameType = GameTypeFamine then
1486: LD_EXP 12
1490: PUSH
1491: LD_INT 5
1493: EQUAL
1494: IFFALSE 1604
// begin FamineDeposits ( [ oilBasicArea , oilMediumArea , oilHardArea ] , [ 3 * depositsValue , 5 * depositsValue , 15 * depositsValue ] , mat_oil ) ;
1496: LD_INT 44
1498: PUSH
1499: LD_INT 46
1501: PUSH
1502: LD_INT 48
1504: PUSH
1505: EMPTY
1506: LIST
1507: LIST
1508: LIST
1509: PPUSH
1510: LD_INT 3
1512: PUSH
1513: LD_VAR 0 6
1517: MUL
1518: PUSH
1519: LD_INT 5
1521: PUSH
1522: LD_VAR 0 6
1526: MUL
1527: PUSH
1528: LD_INT 15
1530: PUSH
1531: LD_VAR 0 6
1535: MUL
1536: PUSH
1537: EMPTY
1538: LIST
1539: LIST
1540: LIST
1541: PPUSH
1542: LD_INT 2
1544: PPUSH
1545: CALL 67286 0 3
// FamineDeposits ( [ sibBasicArea , sibMediumArea , sibHardArea ] , [ 1 * depositsValue , 2.5 * depositsValue , 7.5 * depositsValue ] , mat_siberit ) ;
1549: LD_INT 45
1551: PUSH
1552: LD_INT 47
1554: PUSH
1555: LD_INT 49
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: PPUSH
1563: LD_INT 1
1565: PUSH
1566: LD_VAR 0 6
1570: MUL
1571: PUSH
1572: LD_REAL  2.50000000000000E+0000
1575: PUSH
1576: LD_VAR 0 6
1580: MUL
1581: PUSH
1582: LD_REAL  7.50000000000000E+0000
1585: PUSH
1586: LD_VAR 0 6
1590: MUL
1591: PUSH
1592: EMPTY
1593: LIST
1594: LIST
1595: LIST
1596: PPUSH
1597: LD_INT 3
1599: PPUSH
1600: CALL 67286 0 3
// end ; if mpArtifacts then
1604: LD_EXP 53
1608: IFFALSE 1614
// InitArtifact ;
1610: CALL 2865 0 0
// for i := 1 to 8 do
1614: LD_ADDR_VAR 0 3
1618: PUSH
1619: DOUBLE
1620: LD_INT 1
1622: DEC
1623: ST_TO_ADDR
1624: LD_INT 8
1626: PUSH
1627: FOR_TO
1628: IFFALSE 1671
// for t in [ tech_SolEng , tech_SolPow ] do
1630: LD_ADDR_VAR 0 4
1634: PUSH
1635: LD_INT 45
1637: PUSH
1638: LD_INT 35
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: PUSH
1645: FOR_IN
1646: IFFALSE 1667
// SetTech ( t , i , state_disabled ) ;
1648: LD_VAR 0 4
1652: PPUSH
1653: LD_VAR 0 3
1657: PPUSH
1658: LD_INT 0
1660: PPUSH
1661: CALL_OW 322
1665: GO 1645
1667: POP
1668: POP
1669: GO 1627
1671: POP
1672: POP
// end ;
1673: LD_VAR 0 2
1677: RET
// every 0 0$2 marked mpActive do var i , j , x , phase , additionalSpawnPhase , f , tmp , areas , areasPhase , time , normalTime , delayTime , maxTime ;
1678: GO 1680
1680: DISABLE
1681: LD_INT 0
1683: PPUSH
1684: PPUSH
1685: PPUSH
1686: PPUSH
1687: PPUSH
1688: PPUSH
1689: PPUSH
1690: PPUSH
1691: PPUSH
1692: PPUSH
1693: PPUSH
1694: PPUSH
1695: PPUSH
// begin if not mpShipments then
1696: LD_EXP 36
1700: NOT
1701: IFFALSE 1705
// exit ;
1703: GO 2464
// case mpShipments of 1 :
1705: LD_EXP 36
1709: PUSH
1710: LD_INT 1
1712: DOUBLE
1713: EQUAL
1714: IFTRUE 1718
1716: GO 1761
1718: POP
// begin time := 0 0$30 ;
1719: LD_ADDR_VAR 0 10
1723: PUSH
1724: LD_INT 1050
1726: ST_TO_ADDR
// normalTime := 0 0$30 ;
1727: LD_ADDR_VAR 0 11
1731: PUSH
1732: LD_INT 1050
1734: ST_TO_ADDR
// maxTime := 1 1$20 ;
1735: LD_ADDR_VAR 0 13
1739: PUSH
1740: LD_INT 2800
1742: ST_TO_ADDR
// delayTime := 0 0$5 ;
1743: LD_ADDR_VAR 0 12
1747: PUSH
1748: LD_INT 175
1750: ST_TO_ADDR
// additionalSpawnPhase := 10 ;
1751: LD_ADDR_VAR 0 5
1755: PUSH
1756: LD_INT 10
1758: ST_TO_ADDR
// end ; 2 :
1759: GO 1915
1761: LD_INT 2
1763: DOUBLE
1764: EQUAL
1765: IFTRUE 1769
1767: GO 1812
1769: POP
// begin time := 0 0$25 ;
1770: LD_ADDR_VAR 0 10
1774: PUSH
1775: LD_INT 875
1777: ST_TO_ADDR
// normalTime := 0 0$25 ;
1778: LD_ADDR_VAR 0 11
1782: PUSH
1783: LD_INT 875
1785: ST_TO_ADDR
// maxTime := 1 1$10 ;
1786: LD_ADDR_VAR 0 13
1790: PUSH
1791: LD_INT 2450
1793: ST_TO_ADDR
// delayTime := 0 0$4 ;
1794: LD_ADDR_VAR 0 12
1798: PUSH
1799: LD_INT 140
1801: ST_TO_ADDR
// additionalSpawnPhase := 8 ;
1802: LD_ADDR_VAR 0 5
1806: PUSH
1807: LD_INT 8
1809: ST_TO_ADDR
// end ; 3 :
1810: GO 1915
1812: LD_INT 3
1814: DOUBLE
1815: EQUAL
1816: IFTRUE 1820
1818: GO 1863
1820: POP
// begin time := 0 0$20 ;
1821: LD_ADDR_VAR 0 10
1825: PUSH
1826: LD_INT 700
1828: ST_TO_ADDR
// normalTime := 0 0$20 ;
1829: LD_ADDR_VAR 0 11
1833: PUSH
1834: LD_INT 700
1836: ST_TO_ADDR
// maxTime := 1 1$00 ;
1837: LD_ADDR_VAR 0 13
1841: PUSH
1842: LD_INT 2100
1844: ST_TO_ADDR
// delayTime := 0 0$3 ;
1845: LD_ADDR_VAR 0 12
1849: PUSH
1850: LD_INT 105
1852: ST_TO_ADDR
// additionalSpawnPhase := 6 ;
1853: LD_ADDR_VAR 0 5
1857: PUSH
1858: LD_INT 6
1860: ST_TO_ADDR
// end ; 4 :
1861: GO 1915
1863: LD_INT 4
1865: DOUBLE
1866: EQUAL
1867: IFTRUE 1871
1869: GO 1914
1871: POP
// begin time := 0 0$15 ;
1872: LD_ADDR_VAR 0 10
1876: PUSH
1877: LD_INT 525
1879: ST_TO_ADDR
// normalTime := 0 0$15 ;
1880: LD_ADDR_VAR 0 11
1884: PUSH
1885: LD_INT 525
1887: ST_TO_ADDR
// maxTime := 0 0$55 ;
1888: LD_ADDR_VAR 0 13
1892: PUSH
1893: LD_INT 1925
1895: ST_TO_ADDR
// delayTime := 0 0$2 ;
1896: LD_ADDR_VAR 0 12
1900: PUSH
1901: LD_INT 70
1903: ST_TO_ADDR
// additionalSpawnPhase := 5 ;
1904: LD_ADDR_VAR 0 5
1908: PUSH
1909: LD_INT 5
1911: ST_TO_ADDR
// end ; end ;
1912: GO 1915
1914: POP
// areas := [ IslandArea1 , IslandArea2 ] ;
1915: LD_ADDR_VAR 0 8
1919: PUSH
1920: LD_INT 23
1922: PUSH
1923: LD_INT 24
1925: PUSH
1926: EMPTY
1927: LIST
1928: LIST
1929: ST_TO_ADDR
// areasPhase := [ [ ] , [ ] ] ;
1930: LD_ADDR_VAR 0 9
1934: PUSH
1935: EMPTY
1936: PUSH
1937: EMPTY
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: ST_TO_ADDR
// tmp := [ [ CR1Phase1 , CR2Phase1 , CR3Phase1 , CR4Phase1 , CR5Phase1 , CR6Phase1 , CR7Phase1 , CR8Phase1 ] , [ CR1Phase2 , CR2Phase2 , CR3Phase2 , CR4Phase2 , CR5Phase2 , CR6Phase2 , CR7Phase2 , CR8Phase2 ] ] ;
1943: LD_ADDR_VAR 0 7
1947: PUSH
1948: LD_INT 28
1950: PUSH
1951: LD_INT 29
1953: PUSH
1954: LD_INT 30
1956: PUSH
1957: LD_INT 31
1959: PUSH
1960: LD_INT 32
1962: PUSH
1963: LD_INT 33
1965: PUSH
1966: LD_INT 34
1968: PUSH
1969: LD_INT 35
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: PUSH
1982: LD_INT 36
1984: PUSH
1985: LD_INT 37
1987: PUSH
1988: LD_INT 38
1990: PUSH
1991: LD_INT 39
1993: PUSH
1994: LD_INT 40
1996: PUSH
1997: LD_INT 41
1999: PUSH
2000: LD_INT 42
2002: PUSH
2003: LD_INT 43
2005: PUSH
2006: EMPTY
2007: LIST
2008: LIST
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: LIST
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: ST_TO_ADDR
// for i := 1 to 8 do
2020: LD_ADDR_VAR 0 1
2024: PUSH
2025: DOUBLE
2026: LD_INT 1
2028: DEC
2029: ST_TO_ADDR
2030: LD_INT 8
2032: PUSH
2033: FOR_TO
2034: IFFALSE 2147
// begin if not mpSidePositions [ i ] then
2036: LD_EXP 16
2040: PUSH
2041: LD_VAR 0 1
2045: ARRAY
2046: NOT
2047: IFFALSE 2051
// continue ;
2049: GO 2033
// for j := 1 to 2 do
2051: LD_ADDR_VAR 0 2
2055: PUSH
2056: DOUBLE
2057: LD_INT 1
2059: DEC
2060: ST_TO_ADDR
2061: LD_INT 2
2063: PUSH
2064: FOR_TO
2065: IFFALSE 2143
// areasPhase := Replace ( areasPhase , j , Replace ( areasPhase [ j ] , areasPhase [ j ] + 1 , tmp [ j ] [ mpSidePositions [ i ] ] ) ) ;
2067: LD_ADDR_VAR 0 9
2071: PUSH
2072: LD_VAR 0 9
2076: PPUSH
2077: LD_VAR 0 2
2081: PPUSH
2082: LD_VAR 0 9
2086: PUSH
2087: LD_VAR 0 2
2091: ARRAY
2092: PPUSH
2093: LD_VAR 0 9
2097: PUSH
2098: LD_VAR 0 2
2102: ARRAY
2103: PUSH
2104: LD_INT 1
2106: PLUS
2107: PPUSH
2108: LD_VAR 0 7
2112: PUSH
2113: LD_VAR 0 2
2117: ARRAY
2118: PUSH
2119: LD_EXP 16
2123: PUSH
2124: LD_VAR 0 1
2128: ARRAY
2129: ARRAY
2130: PPUSH
2131: CALL_OW 1
2135: PPUSH
2136: CALL_OW 1
2140: ST_TO_ADDR
2141: GO 2064
2143: POP
2144: POP
// end ;
2145: GO 2033
2147: POP
2148: POP
// x := 1 ;
2149: LD_ADDR_VAR 0 3
2153: PUSH
2154: LD_INT 1
2156: ST_TO_ADDR
// phase := 1 ;
2157: LD_ADDR_VAR 0 4
2161: PUSH
2162: LD_INT 1
2164: ST_TO_ADDR
// repeat wait ( time ) ;
2165: LD_VAR 0 10
2169: PPUSH
2170: CALL_OW 67
// x := Inc ( x ) ;
2174: LD_ADDR_VAR 0 3
2178: PUSH
2179: LD_VAR 0 3
2183: PPUSH
2184: CALL 62968 0 1
2188: ST_TO_ADDR
// f := Inc ( f ) ;
2189: LD_ADDR_VAR 0 6
2193: PUSH
2194: LD_VAR 0 6
2198: PPUSH
2199: CALL 62968 0 1
2203: ST_TO_ADDR
// if x > 5 then
2204: LD_VAR 0 3
2208: PUSH
2209: LD_INT 5
2211: GREATER
2212: IFFALSE 2222
// x := 1 ;
2214: LD_ADDR_VAR 0 3
2218: PUSH
2219: LD_INT 1
2221: ST_TO_ADDR
// if f mod 20 = 0 then
2222: LD_VAR 0 6
2226: PUSH
2227: LD_INT 20
2229: MOD
2230: PUSH
2231: LD_INT 0
2233: EQUAL
2234: IFFALSE 2251
// phase := Inc ( phase ) ;
2236: LD_ADDR_VAR 0 4
2240: PUSH
2241: LD_VAR 0 4
2245: PPUSH
2246: CALL 62968 0 1
2250: ST_TO_ADDR
// if f mod additionalSpawnPhase = 0 then
2251: LD_VAR 0 6
2255: PUSH
2256: LD_VAR 0 5
2260: MOD
2261: PUSH
2262: LD_INT 0
2264: EQUAL
2265: IFFALSE 2282
// CreateCratesArea ( x , worldCratesArea , true ) ;
2267: LD_VAR 0 3
2271: PPUSH
2272: LD_INT 61
2274: PPUSH
2275: LD_INT 1
2277: PPUSH
2278: CALL_OW 55
// if phase > 2 then
2282: LD_VAR 0 4
2286: PUSH
2287: LD_INT 2
2289: GREATER
2290: IFFALSE 2300
// phase := 1 ;
2292: LD_ADDR_VAR 0 4
2296: PUSH
2297: LD_INT 1
2299: ST_TO_ADDR
// for i in areas do
2300: LD_ADDR_VAR 0 1
2304: PUSH
2305: LD_VAR 0 8
2309: PUSH
2310: FOR_IN
2311: IFFALSE 2362
// begin if GetResourceArea ( i , mat_cans ) < 15 and phase = 2 then
2313: LD_VAR 0 1
2317: PPUSH
2318: LD_INT 1
2320: PPUSH
2321: CALL_OW 287
2325: PUSH
2326: LD_INT 15
2328: LESS
2329: IFFALSE 2341
2331: PUSH
2332: LD_VAR 0 4
2336: PUSH
2337: LD_INT 2
2339: EQUAL
2340: AND
2341: IFFALSE 2360
// begin CreateCratesArea ( x , i , true ) ;
2343: LD_VAR 0 3
2347: PPUSH
2348: LD_VAR 0 1
2352: PPUSH
2353: LD_INT 1
2355: PPUSH
2356: CALL_OW 55
// end ; end ;
2360: GO 2310
2362: POP
2363: POP
// for i in areasPhase [ phase ] do
2364: LD_ADDR_VAR 0 1
2368: PUSH
2369: LD_VAR 0 9
2373: PUSH
2374: LD_VAR 0 4
2378: ARRAY
2379: PUSH
2380: FOR_IN
2381: IFFALSE 2420
// begin if GetResourceArea ( i , mat_cans ) < 25 then
2383: LD_VAR 0 1
2387: PPUSH
2388: LD_INT 1
2390: PPUSH
2391: CALL_OW 287
2395: PUSH
2396: LD_INT 25
2398: LESS
2399: IFFALSE 2418
// begin CreateCratesArea ( x , i , true ) ;
2401: LD_VAR 0 3
2405: PPUSH
2406: LD_VAR 0 1
2410: PPUSH
2411: LD_INT 1
2413: PPUSH
2414: CALL_OW 55
// end ; end ;
2418: GO 2380
2420: POP
2421: POP
// time := time + delayTime ;
2422: LD_ADDR_VAR 0 10
2426: PUSH
2427: LD_VAR 0 10
2431: PUSH
2432: LD_VAR 0 12
2436: PLUS
2437: ST_TO_ADDR
// if time > maxTime then
2438: LD_VAR 0 10
2442: PUSH
2443: LD_VAR 0 13
2447: GREATER
2448: IFFALSE 2460
// time := normalTime ;
2450: LD_ADDR_VAR 0 10
2454: PUSH
2455: LD_VAR 0 11
2459: ST_TO_ADDR
// until false ;
2460: LD_INT 0
2462: IFFALSE 2165
// end ;
2464: PPOPN 13
2466: END
// every 0 0$2 trigger mpTeleports do var i , tmp ;
2467: LD_EXP 52
2471: IFFALSE 2665
2473: GO 2475
2475: DISABLE
2476: LD_INT 0
2478: PPUSH
2479: PPUSH
// begin enable ;
2480: ENABLE
// tmp := [ [ T1TeleportArea , T4TeleportExitArea ] , [ T2TeleportArea , T3TeleportExitArea ] , [ T3TeleportArea , T2TeleportExitArea ] , [ T4TeleportArea , T1TeleportExitArea ] , [ T5TeleportArea , T6TeleportExitArea ] , [ T6TeleportArea , T5TeleportExitArea ] , [ T7TeleportArea , IslandArea1 ] , [ T8TeleportArea , IslandArea1 ] , [ T9TeleportArea , IslandArea1 ] , [ T10TeleportArea , IslandArea1 ] ] ;
2481: LD_ADDR_VAR 0 2
2485: PUSH
2486: LD_INT 1
2488: PUSH
2489: LD_INT 53
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: PUSH
2496: LD_INT 2
2498: PUSH
2499: LD_INT 52
2501: PUSH
2502: EMPTY
2503: LIST
2504: LIST
2505: PUSH
2506: LD_INT 3
2508: PUSH
2509: LD_INT 51
2511: PUSH
2512: EMPTY
2513: LIST
2514: LIST
2515: PUSH
2516: LD_INT 4
2518: PUSH
2519: LD_INT 50
2521: PUSH
2522: EMPTY
2523: LIST
2524: LIST
2525: PUSH
2526: LD_INT 5
2528: PUSH
2529: LD_INT 55
2531: PUSH
2532: EMPTY
2533: LIST
2534: LIST
2535: PUSH
2536: LD_INT 6
2538: PUSH
2539: LD_INT 54
2541: PUSH
2542: EMPTY
2543: LIST
2544: LIST
2545: PUSH
2546: LD_INT 57
2548: PUSH
2549: LD_INT 23
2551: PUSH
2552: EMPTY
2553: LIST
2554: LIST
2555: PUSH
2556: LD_INT 58
2558: PUSH
2559: LD_INT 23
2561: PUSH
2562: EMPTY
2563: LIST
2564: LIST
2565: PUSH
2566: LD_INT 59
2568: PUSH
2569: LD_INT 23
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PUSH
2576: LD_INT 60
2578: PUSH
2579: LD_INT 23
2581: PUSH
2582: EMPTY
2583: LIST
2584: LIST
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: LIST
2593: LIST
2594: LIST
2595: LIST
2596: LIST
2597: ST_TO_ADDR
// for i in tmp do
2598: LD_ADDR_VAR 0 1
2602: PUSH
2603: LD_VAR 0 2
2607: PUSH
2608: FOR_IN
2609: IFFALSE 2663
// CheckBuildUpArea ( i [ 1 ] , i [ 2 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
2611: LD_VAR 0 1
2615: PUSH
2616: LD_INT 1
2618: ARRAY
2619: PPUSH
2620: LD_VAR 0 1
2624: PUSH
2625: LD_INT 2
2627: ARRAY
2628: PPUSH
2629: LD_INT 2
2631: PUSH
2632: LD_INT 21
2634: PUSH
2635: LD_INT 1
2637: PUSH
2638: EMPTY
2639: LIST
2640: LIST
2641: PUSH
2642: LD_INT 21
2644: PUSH
2645: LD_INT 2
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: LIST
2656: PPUSH
2657: CALL_OW 513
2661: GO 2608
2663: POP
2664: POP
// end ; end_of_file
2665: PPOPN 2
2667: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2668: LD_VAR 0 1
2672: PPUSH
2673: CALL 17031 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2677: LD_VAR 0 1
2681: PPUSH
2682: CALL 11921 0 1
// end ;
2686: PPOPN 1
2688: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2689: LD_VAR 0 1
2693: PPUSH
2694: CALL 17048 0 1
// end ;
2698: PPOPN 1
2700: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2701: LD_VAR 0 1
2705: PPUSH
2706: CALL 12628 0 1
2710: PPOPN 1
2712: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2713: LD_VAR 0 1
2717: PPUSH
2718: LD_VAR 0 2
2722: PPUSH
2723: CALL 17089 0 2
2727: PPOPN 2
2729: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2730: LD_VAR 0 1
2734: PPUSH
2735: LD_VAR 0 2
2739: PPUSH
2740: LD_VAR 0 3
2744: PPUSH
2745: CALL 12681 0 3
2749: PPOPN 3
2751: END
// on OilExtracted ( building , side , base , amount ) do Multiplayer_OilExtracted ( building , side , base , amount ) ;
2752: LD_VAR 0 1
2756: PPUSH
2757: LD_VAR 0 2
2761: PPUSH
2762: LD_VAR 0 3
2766: PPUSH
2767: LD_VAR 0 4
2771: PPUSH
2772: CALL 12846 0 4
2776: PPOPN 4
2778: END
// on SibExtracted ( building , side , base , amount ) do Multiplayer_SibExtracted ( building , side , base , amount ) ;
2779: LD_VAR 0 1
2783: PPUSH
2784: LD_VAR 0 2
2788: PPUSH
2789: LD_VAR 0 3
2793: PPUSH
2794: LD_VAR 0 4
2798: PPUSH
2799: CALL 13083 0 4
2803: PPOPN 4
2805: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
2806: LD_VAR 0 1
2810: PPUSH
2811: LD_VAR 0 2
2815: PPUSH
2816: LD_VAR 0 3
2820: PPUSH
2821: LD_VAR 0 4
2825: PPUSH
2826: LD_VAR 0 5
2830: PPUSH
2831: CALL 13320 0 5
2835: PPOPN 5
2837: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
2838: LD_VAR 0 1
2842: PPUSH
2843: LD_VAR 0 2
2847: PPUSH
2848: LD_VAR 0 3
2852: PPUSH
2853: LD_VAR 0 4
2857: PPUSH
2858: CALL 13423 0 4
2862: PPOPN 4
2864: END
// export artifactsPos , artifactsRecharge , artifactsSibCost , artifactsResearched , artifactsReady ; export artifactsResDifficulty , artifactsResProgress , artifactsButtons , artifactsLabsWorking ; export function InitArtifact ; var i ; begin
2865: LD_INT 0
2867: PPUSH
2868: PPUSH
// for i := 1 to 8 do
2869: LD_ADDR_VAR 0 2
2873: PUSH
2874: DOUBLE
2875: LD_INT 1
2877: DEC
2878: ST_TO_ADDR
2879: LD_INT 8
2881: PUSH
2882: FOR_TO
2883: IFFALSE 2899
// SetArtifactRes ( i , true ) ;
2885: LD_VAR 0 2
2889: PPUSH
2890: LD_INT 1
2892: PPUSH
2893: CALL_OW 467
2897: GO 2882
2899: POP
2900: POP
// CreateResourcesArea ( mat_artifact , 3 , ArtifactArea1 , false ) ;
2901: LD_INT 4
2903: PPUSH
2904: LD_INT 3
2906: PPUSH
2907: LD_INT 25
2909: PPUSH
2910: LD_INT 0
2912: PPUSH
2913: CALL_OW 59
// CreateResourcesArea ( mat_artifact , 4 , ArtifactArea2 , false ) ;
2917: LD_INT 4
2919: PPUSH
2920: LD_INT 4
2922: PPUSH
2923: LD_INT 26
2925: PPUSH
2926: LD_INT 0
2928: PPUSH
2929: CALL_OW 59
// CreateResourcesArea ( mat_artifact , 5 , ArtifactArea3 , false ) ;
2933: LD_INT 4
2935: PPUSH
2936: LD_INT 5
2938: PPUSH
2939: LD_INT 27
2941: PPUSH
2942: LD_INT 0
2944: PPUSH
2945: CALL_OW 59
// artifactsPos := [ [ ] , [ ] , [ ] ] ;
2949: LD_ADDR_EXP 3
2953: PUSH
2954: EMPTY
2955: PUSH
2956: EMPTY
2957: PUSH
2958: EMPTY
2959: PUSH
2960: EMPTY
2961: LIST
2962: LIST
2963: LIST
2964: ST_TO_ADDR
// artifactsRecharge := [ 0 0$30 , 1 1$20 , 5 5$00 ] ;
2965: LD_ADDR_EXP 4
2969: PUSH
2970: LD_INT 1050
2972: PUSH
2973: LD_INT 2800
2975: PUSH
2976: LD_INT 10500
2978: PUSH
2979: EMPTY
2980: LIST
2981: LIST
2982: LIST
2983: ST_TO_ADDR
// artifactsSibCost := [ 10 , 35 , 100 ] ;
2984: LD_ADDR_EXP 5
2988: PUSH
2989: LD_INT 10
2991: PUSH
2992: LD_INT 35
2994: PUSH
2995: LD_INT 100
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: LIST
3002: ST_TO_ADDR
// artifactsResDifficulty := [ 300 , 500 , 800 ] ;
3003: LD_ADDR_EXP 8
3007: PUSH
3008: LD_INT 300
3010: PUSH
3011: LD_INT 500
3013: PUSH
3014: LD_INT 800
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: LIST
3021: ST_TO_ADDR
// artifactsLabsWorking := [ [ ] , [ ] , [ ] ] ;
3022: LD_ADDR_EXP 11
3026: PUSH
3027: EMPTY
3028: PUSH
3029: EMPTY
3030: PUSH
3031: EMPTY
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: LIST
3037: ST_TO_ADDR
// artifactsResearched := [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] ;
3038: LD_ADDR_EXP 6
3042: PUSH
3043: LD_INT 0
3045: PUSH
3046: LD_INT 0
3048: PUSH
3049: LD_INT 0
3051: PUSH
3052: EMPTY
3053: LIST
3054: LIST
3055: LIST
3056: PUSH
3057: LD_INT 0
3059: PUSH
3060: LD_INT 0
3062: PUSH
3063: LD_INT 0
3065: PUSH
3066: EMPTY
3067: LIST
3068: LIST
3069: LIST
3070: PUSH
3071: LD_INT 0
3073: PUSH
3074: LD_INT 0
3076: PUSH
3077: LD_INT 0
3079: PUSH
3080: EMPTY
3081: LIST
3082: LIST
3083: LIST
3084: PUSH
3085: LD_INT 0
3087: PUSH
3088: LD_INT 0
3090: PUSH
3091: LD_INT 0
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: LIST
3098: PUSH
3099: LD_INT 0
3101: PUSH
3102: LD_INT 0
3104: PUSH
3105: LD_INT 0
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: LIST
3112: PUSH
3113: LD_INT 0
3115: PUSH
3116: LD_INT 0
3118: PUSH
3119: LD_INT 0
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: LIST
3126: PUSH
3127: LD_INT 0
3129: PUSH
3130: LD_INT 0
3132: PUSH
3133: LD_INT 0
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: LIST
3140: PUSH
3141: LD_INT 0
3143: PUSH
3144: LD_INT 0
3146: PUSH
3147: LD_INT 0
3149: PUSH
3150: EMPTY
3151: LIST
3152: LIST
3153: LIST
3154: PUSH
3155: EMPTY
3156: LIST
3157: LIST
3158: LIST
3159: LIST
3160: LIST
3161: LIST
3162: LIST
3163: LIST
3164: ST_TO_ADDR
// artifactsResProgress := [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] ;
3165: LD_ADDR_EXP 9
3169: PUSH
3170: LD_INT 0
3172: PUSH
3173: LD_INT 0
3175: PUSH
3176: LD_INT 0
3178: PUSH
3179: EMPTY
3180: LIST
3181: LIST
3182: LIST
3183: PUSH
3184: LD_INT 0
3186: PUSH
3187: LD_INT 0
3189: PUSH
3190: LD_INT 0
3192: PUSH
3193: EMPTY
3194: LIST
3195: LIST
3196: LIST
3197: PUSH
3198: LD_INT 0
3200: PUSH
3201: LD_INT 0
3203: PUSH
3204: LD_INT 0
3206: PUSH
3207: EMPTY
3208: LIST
3209: LIST
3210: LIST
3211: PUSH
3212: LD_INT 0
3214: PUSH
3215: LD_INT 0
3217: PUSH
3218: LD_INT 0
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: LIST
3225: PUSH
3226: LD_INT 0
3228: PUSH
3229: LD_INT 0
3231: PUSH
3232: LD_INT 0
3234: PUSH
3235: EMPTY
3236: LIST
3237: LIST
3238: LIST
3239: PUSH
3240: LD_INT 0
3242: PUSH
3243: LD_INT 0
3245: PUSH
3246: LD_INT 0
3248: PUSH
3249: EMPTY
3250: LIST
3251: LIST
3252: LIST
3253: PUSH
3254: LD_INT 0
3256: PUSH
3257: LD_INT 0
3259: PUSH
3260: LD_INT 0
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: LIST
3267: PUSH
3268: LD_INT 0
3270: PUSH
3271: LD_INT 0
3273: PUSH
3274: LD_INT 0
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: LIST
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: LIST
3286: LIST
3287: LIST
3288: LIST
3289: LIST
3290: LIST
3291: ST_TO_ADDR
// artifactsReady := [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] ;
3292: LD_ADDR_EXP 7
3296: PUSH
3297: LD_INT 0
3299: PUSH
3300: LD_INT 0
3302: PUSH
3303: LD_INT 0
3305: PUSH
3306: EMPTY
3307: LIST
3308: LIST
3309: LIST
3310: PUSH
3311: LD_INT 0
3313: PUSH
3314: LD_INT 0
3316: PUSH
3317: LD_INT 0
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: LIST
3324: PUSH
3325: LD_INT 0
3327: PUSH
3328: LD_INT 0
3330: PUSH
3331: LD_INT 0
3333: PUSH
3334: EMPTY
3335: LIST
3336: LIST
3337: LIST
3338: PUSH
3339: LD_INT 0
3341: PUSH
3342: LD_INT 0
3344: PUSH
3345: LD_INT 0
3347: PUSH
3348: EMPTY
3349: LIST
3350: LIST
3351: LIST
3352: PUSH
3353: LD_INT 0
3355: PUSH
3356: LD_INT 0
3358: PUSH
3359: LD_INT 0
3361: PUSH
3362: EMPTY
3363: LIST
3364: LIST
3365: LIST
3366: PUSH
3367: LD_INT 0
3369: PUSH
3370: LD_INT 0
3372: PUSH
3373: LD_INT 0
3375: PUSH
3376: EMPTY
3377: LIST
3378: LIST
3379: LIST
3380: PUSH
3381: LD_INT 0
3383: PUSH
3384: LD_INT 0
3386: PUSH
3387: LD_INT 0
3389: PUSH
3390: EMPTY
3391: LIST
3392: LIST
3393: LIST
3394: PUSH
3395: LD_INT 0
3397: PUSH
3398: LD_INT 0
3400: PUSH
3401: LD_INT 0
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: LIST
3408: PUSH
3409: EMPTY
3410: LIST
3411: LIST
3412: LIST
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: ST_TO_ADDR
// artifactsButtons := [ [ art_use_eye , art_place , art_exp_left ] , [ art_use_sibexplosion , art_unit , art_exp_mid ] , [ art_use_atom , art_place , art_exp_right ] ] ;
3419: LD_ADDR_EXP 10
3423: PUSH
3424: LD_INT 4
3426: PUSH
3427: LD_INT 3
3429: PUSH
3430: LD_INT 1
3432: PUSH
3433: EMPTY
3434: LIST
3435: LIST
3436: LIST
3437: PUSH
3438: LD_INT 5
3440: PUSH
3441: LD_INT 4
3443: PUSH
3444: LD_INT 2
3446: PUSH
3447: EMPTY
3448: LIST
3449: LIST
3450: LIST
3451: PUSH
3452: LD_INT 7
3454: PUSH
3455: LD_INT 3
3457: PUSH
3458: LD_INT 3
3460: PUSH
3461: EMPTY
3462: LIST
3463: LIST
3464: LIST
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: LIST
3470: ST_TO_ADDR
// end ;
3471: LD_VAR 0 1
3475: RET
// function TeleportArtefact ( number , area ) ; var i , hex , tmp , cargo ; begin
3476: LD_INT 0
3478: PPUSH
3479: PPUSH
3480: PPUSH
3481: PPUSH
3482: PPUSH
// if not number in [ 3 , 4 , 5 ] then
3483: LD_VAR 0 1
3487: PUSH
3488: LD_INT 3
3490: PUSH
3491: LD_INT 4
3493: PUSH
3494: LD_INT 5
3496: PUSH
3497: EMPTY
3498: LIST
3499: LIST
3500: LIST
3501: IN
3502: NOT
3503: IFFALSE 3507
// exit ;
3505: GO 3921
// hex := FindArtifact ( number ) ;
3507: LD_ADDR_VAR 0 5
3511: PUSH
3512: LD_VAR 0 1
3516: PPUSH
3517: CALL_OW 469
3521: ST_TO_ADDR
// if hex then
3522: LD_VAR 0 5
3526: IFFALSE 3797
// begin if InArea ( hex [ 1 ] , hex [ 2 ] , area ) then
3528: LD_VAR 0 5
3532: PUSH
3533: LD_INT 1
3535: ARRAY
3536: PPUSH
3537: LD_VAR 0 5
3541: PUSH
3542: LD_INT 2
3544: ARRAY
3545: PPUSH
3546: LD_VAR 0 2
3550: PPUSH
3551: CALL_OW 309
3555: IFFALSE 3559
// exit ;
3557: GO 3921
// if artifactsLabsWorking [ number - 2 ] then
3559: LD_EXP 11
3563: PUSH
3564: LD_VAR 0 1
3568: PUSH
3569: LD_INT 2
3571: MINUS
3572: ARRAY
3573: IFFALSE 3678
// begin for i in artifactsLabsWorking [ number - 2 ] do
3575: LD_ADDR_VAR 0 4
3579: PUSH
3580: LD_EXP 11
3584: PUSH
3585: LD_VAR 0 1
3589: PUSH
3590: LD_INT 2
3592: MINUS
3593: ARRAY
3594: PUSH
3595: FOR_IN
3596: IFFALSE 3650
// begin SetArtifactUse ( GetSide ( i ) , artifactsButtons [ number - 2 ] [ 3 ] , art_no , i ) ;
3598: LD_VAR 0 4
3602: PPUSH
3603: CALL_OW 255
3607: PPUSH
3608: LD_EXP 10
3612: PUSH
3613: LD_VAR 0 1
3617: PUSH
3618: LD_INT 2
3620: MINUS
3621: ARRAY
3622: PUSH
3623: LD_INT 3
3625: ARRAY
3626: PPUSH
3627: LD_INT 0
3629: PPUSH
3630: LD_VAR 0 4
3634: PPUSH
3635: CALL_OW 468
// ComCancel ( i ) ;
3639: LD_VAR 0 4
3643: PPUSH
3644: CALL_OW 127
// end ;
3648: GO 3595
3650: POP
3651: POP
// artifactsLabsWorking := Replace ( artifactsLabsWorking , number - 2 , [ ] ) ;
3652: LD_ADDR_EXP 11
3656: PUSH
3657: LD_EXP 11
3661: PPUSH
3662: LD_VAR 0 1
3666: PUSH
3667: LD_INT 2
3669: MINUS
3670: PPUSH
3671: EMPTY
3672: PPUSH
3673: CALL_OW 1
3677: ST_TO_ADDR
// end ; tmp := FilterUnitsInArea ( area , [ f_placed ] ) ;
3678: LD_ADDR_VAR 0 6
3682: PUSH
3683: LD_VAR 0 2
3687: PPUSH
3688: LD_INT 52
3690: PUSH
3691: EMPTY
3692: LIST
3693: PPUSH
3694: CALL_OW 70
3698: ST_TO_ADDR
// if tmp then
3699: LD_VAR 0 6
3703: IFFALSE 3731
// for i in tmp do
3705: LD_ADDR_VAR 0 4
3709: PUSH
3710: LD_VAR 0 6
3714: PUSH
3715: FOR_IN
3716: IFFALSE 3729
// DestroyUnit ( i ) ;
3718: LD_VAR 0 4
3722: PPUSH
3723: CALL_OW 65
3727: GO 3715
3729: POP
3730: POP
// MoveAreaXY ( artifactTeleportArea , hex [ 1 ] , hex [ 2 ] ) ;
3731: LD_INT 56
3733: PPUSH
3734: LD_VAR 0 5
3738: PUSH
3739: LD_INT 1
3741: ARRAY
3742: PPUSH
3743: LD_VAR 0 5
3747: PUSH
3748: LD_INT 2
3750: ARRAY
3751: PPUSH
3752: CALL_OW 425
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
3756: LD_VAR 0 5
3760: PUSH
3761: LD_INT 1
3763: ARRAY
3764: PPUSH
3765: LD_VAR 0 5
3769: PUSH
3770: LD_INT 2
3772: ARRAY
3773: PPUSH
3774: CALL_OW 494
// wait ( 30 ) ;
3778: LD_INT 30
3780: PPUSH
3781: CALL_OW 67
// EraseResourceArea ( artifactTeleportArea , mat_artefact ) ;
3785: LD_INT 56
3787: PPUSH
3788: LD_INT 4
3790: PPUSH
3791: CALL_OW 286
// end else
3795: GO 3901
// begin cargo := FilterAllUnits ( [ [ f_tag , number ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
3797: LD_ADDR_VAR 0 7
3801: PUSH
3802: LD_INT 120
3804: PUSH
3805: LD_VAR 0 1
3809: PUSH
3810: EMPTY
3811: LIST
3812: LIST
3813: PUSH
3814: LD_INT 2
3816: PUSH
3817: LD_INT 34
3819: PUSH
3820: LD_INT 12
3822: PUSH
3823: EMPTY
3824: LIST
3825: LIST
3826: PUSH
3827: LD_INT 34
3829: PUSH
3830: LD_INT 32
3832: PUSH
3833: EMPTY
3834: LIST
3835: LIST
3836: PUSH
3837: LD_INT 34
3839: PUSH
3840: LD_INT 51
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: PUSH
3847: LD_INT 34
3849: PUSH
3850: LD_INT 89
3852: PUSH
3853: EMPTY
3854: LIST
3855: LIST
3856: PUSH
3857: EMPTY
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: PUSH
3864: EMPTY
3865: LIST
3866: LIST
3867: PPUSH
3868: CALL_OW 69
3872: ST_TO_ADDR
// if not cargo then
3873: LD_VAR 0 7
3877: NOT
3878: IFFALSE 3882
// exit ;
3880: GO 3921
// SetCargo ( cargo [ 1 ] , mat_artifact , 0 ) ;
3882: LD_VAR 0 7
3886: PUSH
3887: LD_INT 1
3889: ARRAY
3890: PPUSH
3891: LD_INT 4
3893: PPUSH
3894: LD_INT 0
3896: PPUSH
3897: CALL_OW 290
// end ; CreateResourcesArea ( mat_artifact , number , area , false ) ;
3901: LD_INT 4
3903: PPUSH
3904: LD_VAR 0 1
3908: PPUSH
3909: LD_VAR 0 2
3913: PPUSH
3914: LD_INT 0
3916: PPUSH
3917: CALL_OW 59
// end ;
3921: LD_VAR 0 3
3925: RET
// every 8 8$30 trigger mpArtifacts do
3926: LD_EXP 53
3930: IFFALSE 3946
3932: GO 3934
3934: DISABLE
// begin enable ;
3935: ENABLE
// TeleportArtefact ( 3 , ArtifactArea1 ) ;
3936: LD_INT 3
3938: PPUSH
3939: LD_INT 25
3941: PPUSH
3942: CALL 3476 0 2
// end ;
3946: END
// every 6 6$10 trigger mpArtifacts do
3947: LD_EXP 53
3951: IFFALSE 3967
3953: GO 3955
3955: DISABLE
// begin enable ;
3956: ENABLE
// TeleportArtefact ( 4 , ArtifactArea2 ) ;
3957: LD_INT 4
3959: PPUSH
3960: LD_INT 26
3962: PPUSH
3963: CALL 3476 0 2
// end ;
3967: END
// every 4 4$10 trigger mpArtifacts do
3968: LD_EXP 53
3972: IFFALSE 3988
3974: GO 3976
3976: DISABLE
// begin enable ;
3977: ENABLE
// TeleportArtefact ( 5 , ArtifactArea3 ) ;
3978: LD_INT 5
3980: PPUSH
3981: LD_INT 27
3983: PPUSH
3984: CALL 3476 0 2
// end ;
3988: END
// every 0 0$1 trigger mpArtifacts do var i , pos , j , side , labs , nearestLab ;
3989: LD_EXP 53
3993: IFFALSE 4893
3995: GO 3997
3997: DISABLE
3998: LD_INT 0
4000: PPUSH
4001: PPUSH
4002: PPUSH
4003: PPUSH
4004: PPUSH
4005: PPUSH
// begin enable ;
4006: ENABLE
// for i := 1 to 3 do
4007: LD_ADDR_VAR 0 1
4011: PUSH
4012: DOUBLE
4013: LD_INT 1
4015: DEC
4016: ST_TO_ADDR
4017: LD_INT 3
4019: PUSH
4020: FOR_TO
4021: IFFALSE 4891
// begin pos := FindArtifact ( i + 2 ) ;
4023: LD_ADDR_VAR 0 2
4027: PUSH
4028: LD_VAR 0 1
4032: PUSH
4033: LD_INT 2
4035: PLUS
4036: PPUSH
4037: CALL_OW 469
4041: ST_TO_ADDR
// artifactsPos := Replace ( artifactsPos , i , pos ) ;
4042: LD_ADDR_EXP 3
4046: PUSH
4047: LD_EXP 3
4051: PPUSH
4052: LD_VAR 0 1
4056: PPUSH
4057: LD_VAR 0 2
4061: PPUSH
4062: CALL_OW 1
4066: ST_TO_ADDR
// labs := FilterAllUnits ( [ f_lab , b_lab_siberium ] ) ;
4067: LD_ADDR_VAR 0 5
4071: PUSH
4072: LD_INT 63
4074: PUSH
4075: LD_INT 11
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: PPUSH
4082: CALL_OW 69
4086: ST_TO_ADDR
// if not labs then
4087: LD_VAR 0 5
4091: NOT
4092: IFFALSE 4098
// exit ;
4094: POP
4095: POP
4096: GO 4893
// if pos then
4098: LD_VAR 0 2
4102: IFFALSE 4729
// begin if not labs then
4104: LD_VAR 0 5
4108: NOT
4109: IFFALSE 4113
// continue ;
4111: GO 4020
// nearestLab := NearestUnitToXY ( labs , artifactsPos [ i ] [ 1 ] , artifactsPos [ i ] [ 2 ] ) ;
4113: LD_ADDR_VAR 0 6
4117: PUSH
4118: LD_VAR 0 5
4122: PPUSH
4123: LD_EXP 3
4127: PUSH
4128: LD_VAR 0 1
4132: ARRAY
4133: PUSH
4134: LD_INT 1
4136: ARRAY
4137: PPUSH
4138: LD_EXP 3
4142: PUSH
4143: LD_VAR 0 1
4147: ARRAY
4148: PUSH
4149: LD_INT 2
4151: ARRAY
4152: PPUSH
4153: CALL_OW 73
4157: ST_TO_ADDR
// if not nearestLab then
4158: LD_VAR 0 6
4162: NOT
4163: IFFALSE 4263
// begin for j in labs do
4165: LD_ADDR_VAR 0 3
4169: PUSH
4170: LD_VAR 0 5
4174: PUSH
4175: FOR_IN
4176: IFFALSE 4259
// begin side := GetSide ( j ) ;
4178: LD_ADDR_VAR 0 4
4182: PUSH
4183: LD_VAR 0 3
4187: PPUSH
4188: CALL_OW 255
4192: ST_TO_ADDR
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_no , j ) ;
4193: LD_VAR 0 4
4197: PPUSH
4198: LD_EXP 10
4202: PUSH
4203: LD_VAR 0 1
4207: ARRAY
4208: PUSH
4209: LD_INT 3
4211: ARRAY
4212: PPUSH
4213: LD_INT 0
4215: PPUSH
4216: LD_VAR 0 3
4220: PPUSH
4221: CALL_OW 468
// SetArtifactUse ( side , artifactsButtons [ i ] [ 1 ] , art_no , j ) ;
4225: LD_VAR 0 4
4229: PPUSH
4230: LD_EXP 10
4234: PUSH
4235: LD_VAR 0 1
4239: ARRAY
4240: PUSH
4241: LD_INT 1
4243: ARRAY
4244: PPUSH
4245: LD_INT 0
4247: PPUSH
4248: LD_VAR 0 3
4252: PPUSH
4253: CALL_OW 468
// end ;
4257: GO 4175
4259: POP
4260: POP
// continue ;
4261: GO 4020
// end ; if GetDistUnitXY ( nearestLab , artifactsPos [ i ] [ 1 ] , artifactsPos [ i ] [ 2 ] ) < 8 and GetTech ( tech_artifact , GetSide ( nearestLab ) ) = state_researched then
4263: LD_VAR 0 6
4267: PPUSH
4268: LD_EXP 3
4272: PUSH
4273: LD_VAR 0 1
4277: ARRAY
4278: PUSH
4279: LD_INT 1
4281: ARRAY
4282: PPUSH
4283: LD_EXP 3
4287: PUSH
4288: LD_VAR 0 1
4292: ARRAY
4293: PUSH
4294: LD_INT 2
4296: ARRAY
4297: PPUSH
4298: CALL_OW 297
4302: PUSH
4303: LD_INT 8
4305: LESS
4306: IFFALSE 4331
4308: PUSH
4309: LD_INT 24
4311: PPUSH
4312: LD_VAR 0 6
4316: PPUSH
4317: CALL_OW 255
4321: PPUSH
4322: CALL_OW 321
4326: PUSH
4327: LD_INT 2
4329: EQUAL
4330: AND
4331: IFFALSE 4565
// begin side := GetSide ( nearestLab ) ;
4333: LD_ADDR_VAR 0 4
4337: PUSH
4338: LD_VAR 0 6
4342: PPUSH
4343: CALL_OW 255
4347: ST_TO_ADDR
// if not artifactsResearched [ side ] [ i ] then
4348: LD_EXP 6
4352: PUSH
4353: LD_VAR 0 4
4357: ARRAY
4358: PUSH
4359: LD_VAR 0 1
4363: ARRAY
4364: NOT
4365: IFFALSE 4450
// begin if BuildingStatus ( nearestLab ) = bs_idle then
4367: LD_VAR 0 6
4371: PPUSH
4372: CALL_OW 461
4376: PUSH
4377: LD_INT 2
4379: EQUAL
4380: IFFALSE 4416
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_instant , nearestLab ) else
4382: LD_VAR 0 4
4386: PPUSH
4387: LD_EXP 10
4391: PUSH
4392: LD_VAR 0 1
4396: ARRAY
4397: PUSH
4398: LD_INT 3
4400: ARRAY
4401: PPUSH
4402: LD_INT 2
4404: PPUSH
4405: LD_VAR 0 6
4409: PPUSH
4410: CALL_OW 468
4414: GO 4448
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_gray , nearestLab ) ;
4416: LD_VAR 0 4
4420: PPUSH
4421: LD_EXP 10
4425: PUSH
4426: LD_VAR 0 1
4430: ARRAY
4431: PUSH
4432: LD_INT 3
4434: ARRAY
4435: PPUSH
4436: LD_INT 1
4438: PPUSH
4439: LD_VAR 0 6
4443: PPUSH
4444: CALL_OW 468
// end else
4448: GO 4563
// begin if BuildingStatus ( nearestLab ) = bs_idle and artifactsReady [ side ] [ i ] then
4450: LD_VAR 0 6
4454: PPUSH
4455: CALL_OW 461
4459: PUSH
4460: LD_INT 2
4462: EQUAL
4463: IFFALSE 4483
4465: PUSH
4466: LD_EXP 7
4470: PUSH
4471: LD_VAR 0 4
4475: ARRAY
4476: PUSH
4477: LD_VAR 0 1
4481: ARRAY
4482: AND
4483: IFFALSE 4531
// SetArtifactUse ( side , artifactsButtons [ i ] [ 1 ] , artifactsButtons [ i ] [ 2 ] , nearestLab ) else
4485: LD_VAR 0 4
4489: PPUSH
4490: LD_EXP 10
4494: PUSH
4495: LD_VAR 0 1
4499: ARRAY
4500: PUSH
4501: LD_INT 1
4503: ARRAY
4504: PPUSH
4505: LD_EXP 10
4509: PUSH
4510: LD_VAR 0 1
4514: ARRAY
4515: PUSH
4516: LD_INT 2
4518: ARRAY
4519: PPUSH
4520: LD_VAR 0 6
4524: PPUSH
4525: CALL_OW 468
4529: GO 4563
// SetArtifactUse ( side , artifactsButtons [ i ] [ 1 ] , art_gray , nearestLab ) end ;
4531: LD_VAR 0 4
4535: PPUSH
4536: LD_EXP 10
4540: PUSH
4541: LD_VAR 0 1
4545: ARRAY
4546: PUSH
4547: LD_INT 1
4549: ARRAY
4550: PPUSH
4551: LD_INT 1
4553: PPUSH
4554: LD_VAR 0 6
4558: PPUSH
4559: CALL_OW 468
// end else
4563: GO 4727
// begin for j in labs do
4565: LD_ADDR_VAR 0 3
4569: PUSH
4570: LD_VAR 0 5
4574: PUSH
4575: FOR_IN
4576: IFFALSE 4725
// begin if GetDistUnitXY ( j , artifactsPos [ i ] [ 1 ] , artifactsPos [ i ] [ 2 ] ) >= 8 then
4578: LD_VAR 0 3
4582: PPUSH
4583: LD_EXP 3
4587: PUSH
4588: LD_VAR 0 1
4592: ARRAY
4593: PUSH
4594: LD_INT 1
4596: ARRAY
4597: PPUSH
4598: LD_EXP 3
4602: PUSH
4603: LD_VAR 0 1
4607: ARRAY
4608: PUSH
4609: LD_INT 2
4611: ARRAY
4612: PPUSH
4613: CALL_OW 297
4617: PUSH
4618: LD_INT 8
4620: GREATEREQUAL
4621: IFFALSE 4723
// begin side := GetSide ( j ) ;
4623: LD_ADDR_VAR 0 4
4627: PUSH
4628: LD_VAR 0 3
4632: PPUSH
4633: CALL_OW 255
4637: ST_TO_ADDR
// if not artifactsResearched [ side ] [ i ] then
4638: LD_EXP 6
4642: PUSH
4643: LD_VAR 0 4
4647: ARRAY
4648: PUSH
4649: LD_VAR 0 1
4653: ARRAY
4654: NOT
4655: IFFALSE 4691
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_no , j ) else
4657: LD_VAR 0 4
4661: PPUSH
4662: LD_EXP 10
4666: PUSH
4667: LD_VAR 0 1
4671: ARRAY
4672: PUSH
4673: LD_INT 3
4675: ARRAY
4676: PPUSH
4677: LD_INT 0
4679: PPUSH
4680: LD_VAR 0 3
4684: PPUSH
4685: CALL_OW 468
4689: GO 4723
// SetArtifactUse ( side , artifactsButtons [ i ] [ 1 ] , art_no , j ) ;
4691: LD_VAR 0 4
4695: PPUSH
4696: LD_EXP 10
4700: PUSH
4701: LD_VAR 0 1
4705: ARRAY
4706: PUSH
4707: LD_INT 1
4709: ARRAY
4710: PPUSH
4711: LD_INT 0
4713: PPUSH
4714: LD_VAR 0 3
4718: PPUSH
4719: CALL_OW 468
// end ; end ;
4723: GO 4575
4725: POP
4726: POP
// end ; end else
4727: GO 4889
// begin for j in labs do
4729: LD_ADDR_VAR 0 3
4733: PUSH
4734: LD_VAR 0 5
4738: PUSH
4739: FOR_IN
4740: IFFALSE 4887
// begin side := GetSide ( j ) ;
4742: LD_ADDR_VAR 0 4
4746: PUSH
4747: LD_VAR 0 3
4751: PPUSH
4752: CALL_OW 255
4756: ST_TO_ADDR
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_no , j ) ;
4757: LD_VAR 0 4
4761: PPUSH
4762: LD_EXP 10
4766: PUSH
4767: LD_VAR 0 1
4771: ARRAY
4772: PUSH
4773: LD_INT 3
4775: ARRAY
4776: PPUSH
4777: LD_INT 0
4779: PPUSH
4780: LD_VAR 0 3
4784: PPUSH
4785: CALL_OW 468
// SetArtifactUse ( side , artifactsButtons [ i ] [ 1 ] , art_no , j ) ;
4789: LD_VAR 0 4
4793: PPUSH
4794: LD_EXP 10
4798: PUSH
4799: LD_VAR 0 1
4803: ARRAY
4804: PUSH
4805: LD_INT 1
4807: ARRAY
4808: PPUSH
4809: LD_INT 0
4811: PPUSH
4812: LD_VAR 0 3
4816: PPUSH
4817: CALL_OW 468
// if j in artifactsLabsWorking [ i ] then
4821: LD_VAR 0 3
4825: PUSH
4826: LD_EXP 11
4830: PUSH
4831: LD_VAR 0 1
4835: ARRAY
4836: IN
4837: IFFALSE 4885
// begin artifactsLabsWorking := Replace ( artifactsLabsWorking , i , artifactsLabsWorking [ i ] diff j ) ;
4839: LD_ADDR_EXP 11
4843: PUSH
4844: LD_EXP 11
4848: PPUSH
4849: LD_VAR 0 1
4853: PPUSH
4854: LD_EXP 11
4858: PUSH
4859: LD_VAR 0 1
4863: ARRAY
4864: PUSH
4865: LD_VAR 0 3
4869: DIFF
4870: PPUSH
4871: CALL_OW 1
4875: ST_TO_ADDR
// ComCancel ( j ) ;
4876: LD_VAR 0 3
4880: PPUSH
4881: CALL_OW 127
// end ; end ;
4885: GO 4739
4887: POP
4888: POP
// end ; end ;
4889: GO 4020
4891: POP
4892: POP
// end ;
4893: PPOPN 6
4895: END
// on ArtifactUsed ( side , icon , x , y ) do var i , labs , lab , base , time ;
4896: LD_INT 0
4898: PPUSH
4899: PPUSH
4900: PPUSH
4901: PPUSH
4902: PPUSH
// begin labs := FilterAllUnits ( [ [ f_side , side ] , [ f_lab , b_lab_siberium ] ] ) ;
4903: LD_ADDR_VAR 0 6
4907: PUSH
4908: LD_INT 22
4910: PUSH
4911: LD_VAR 0 1
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: PUSH
4920: LD_INT 63
4922: PUSH
4923: LD_INT 11
4925: PUSH
4926: EMPTY
4927: LIST
4928: LIST
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PPUSH
4934: CALL_OW 69
4938: ST_TO_ADDR
// for i := 1 to 3 do
4939: LD_ADDR_VAR 0 5
4943: PUSH
4944: DOUBLE
4945: LD_INT 1
4947: DEC
4948: ST_TO_ADDR
4949: LD_INT 3
4951: PUSH
4952: FOR_TO
4953: IFFALSE 5183
// begin if icon = artifactsButtons [ i ] [ 3 ] then
4955: LD_VAR 0 2
4959: PUSH
4960: LD_EXP 10
4964: PUSH
4965: LD_VAR 0 5
4969: ARRAY
4970: PUSH
4971: LD_INT 3
4973: ARRAY
4974: EQUAL
4975: IFFALSE 5181
// begin lab := NearestUnitToXY ( labs , artifactsPos [ i ] [ 1 ] , artifactsPos [ i ] [ 2 ] ) ;
4977: LD_ADDR_VAR 0 7
4981: PUSH
4982: LD_VAR 0 6
4986: PPUSH
4987: LD_EXP 3
4991: PUSH
4992: LD_VAR 0 5
4996: ARRAY
4997: PUSH
4998: LD_INT 1
5000: ARRAY
5001: PPUSH
5002: LD_EXP 3
5006: PUSH
5007: LD_VAR 0 5
5011: ARRAY
5012: PUSH
5013: LD_INT 2
5015: ARRAY
5016: PPUSH
5017: CALL_OW 73
5021: ST_TO_ADDR
// if not lab then
5022: LD_VAR 0 7
5026: NOT
5027: IFFALSE 5031
// continue ;
5029: GO 4952
// SetSpecResearch ( lab , artifactsResDifficulty [ i ] , true ) ;
5031: LD_VAR 0 7
5035: PPUSH
5036: LD_EXP 8
5040: PUSH
5041: LD_VAR 0 5
5045: ARRAY
5046: PPUSH
5047: LD_INT 1
5049: PPUSH
5050: CALL_OW 486
// SetTag ( lab , i ) ;
5054: LD_VAR 0 7
5058: PPUSH
5059: LD_VAR 0 5
5063: PPUSH
5064: CALL_OW 109
// if artifactsResProgress [ side ] [ i ] then
5068: LD_EXP 9
5072: PUSH
5073: LD_VAR 0 1
5077: ARRAY
5078: PUSH
5079: LD_VAR 0 5
5083: ARRAY
5084: IFFALSE 5112
// SetWorkingProgress ( lab , artifactsResProgress [ side ] [ i ] ) ;
5086: LD_VAR 0 7
5090: PPUSH
5091: LD_EXP 9
5095: PUSH
5096: LD_VAR 0 1
5100: ARRAY
5101: PUSH
5102: LD_VAR 0 5
5106: ARRAY
5107: PPUSH
5108: CALL_OW 329
// artifactsLabsWorking := Replace ( artifactsLabsWorking , i , artifactsLabsWorking [ i ] union lab ) ;
5112: LD_ADDR_EXP 11
5116: PUSH
5117: LD_EXP 11
5121: PPUSH
5122: LD_VAR 0 5
5126: PPUSH
5127: LD_EXP 11
5131: PUSH
5132: LD_VAR 0 5
5136: ARRAY
5137: PUSH
5138: LD_VAR 0 7
5142: UNION
5143: PPUSH
5144: CALL_OW 1
5148: ST_TO_ADDR
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_no , lab ) ;
5149: LD_VAR 0 1
5153: PPUSH
5154: LD_EXP 10
5158: PUSH
5159: LD_VAR 0 5
5163: ARRAY
5164: PUSH
5165: LD_INT 3
5167: ARRAY
5168: PPUSH
5169: LD_INT 0
5171: PPUSH
5172: LD_VAR 0 7
5176: PPUSH
5177: CALL_OW 468
// end ; end ;
5181: GO 4952
5183: POP
5184: POP
// if icon = artifactsButtons [ 1 ] [ 1 ] then
5185: LD_VAR 0 2
5189: PUSH
5190: LD_EXP 10
5194: PUSH
5195: LD_INT 1
5197: ARRAY
5198: PUSH
5199: LD_INT 1
5201: ARRAY
5202: EQUAL
5203: IFFALSE 5474
// begin lab := NearestUnitToXY ( labs , artifactsPos [ 1 ] [ 1 ] , artifactsPos [ 1 ] [ 2 ] ) ;
5205: LD_ADDR_VAR 0 7
5209: PUSH
5210: LD_VAR 0 6
5214: PPUSH
5215: LD_EXP 3
5219: PUSH
5220: LD_INT 1
5222: ARRAY
5223: PUSH
5224: LD_INT 1
5226: ARRAY
5227: PPUSH
5228: LD_EXP 3
5232: PUSH
5233: LD_INT 1
5235: ARRAY
5236: PUSH
5237: LD_INT 2
5239: ARRAY
5240: PPUSH
5241: CALL_OW 73
5245: ST_TO_ADDR
// base := GetBase ( lab ) ;
5246: LD_ADDR_VAR 0 8
5250: PUSH
5251: LD_VAR 0 7
5255: PPUSH
5256: CALL_OW 274
5260: ST_TO_ADDR
// if GetBaseMaterials ( GetBase ( lab ) ) [ 3 ] < artifactsSibCost [ 1 ] then
5261: LD_VAR 0 7
5265: PPUSH
5266: CALL_OW 274
5270: PPUSH
5271: CALL 61825 0 1
5275: PUSH
5276: LD_INT 3
5278: ARRAY
5279: PUSH
5280: LD_EXP 5
5284: PUSH
5285: LD_INT 1
5287: ARRAY
5288: LESS
5289: IFFALSE 5293
// begin exit ;
5291: GO 6240
// end ; SetResourceType ( base , mat_siberit , ( GetResourceType ( base , mat_siberit ) - artifactsSibCost [ 1 ] ) ) ;
5293: LD_VAR 0 8
5297: PPUSH
5298: LD_INT 3
5300: PPUSH
5301: LD_VAR 0 8
5305: PPUSH
5306: LD_INT 3
5308: PPUSH
5309: CALL_OW 275
5313: PUSH
5314: LD_EXP 5
5318: PUSH
5319: LD_INT 1
5321: ARRAY
5322: MINUS
5323: PPUSH
5324: CALL_OW 277
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 1 , false ) ) ;
5328: LD_ADDR_EXP 7
5332: PUSH
5333: LD_EXP 7
5337: PPUSH
5338: LD_VAR 0 1
5342: PPUSH
5343: LD_EXP 7
5347: PUSH
5348: LD_VAR 0 1
5352: ARRAY
5353: PPUSH
5354: LD_INT 1
5356: PPUSH
5357: LD_INT 0
5359: PPUSH
5360: CALL_OW 1
5364: PPUSH
5365: CALL_OW 1
5369: ST_TO_ADDR
// PlaceSeeing ( x , y , side , - 12 ) ;
5370: LD_VAR 0 3
5374: PPUSH
5375: LD_VAR 0 4
5379: PPUSH
5380: LD_VAR 0 1
5384: PPUSH
5385: LD_INT 12
5387: NEG
5388: PPUSH
5389: CALL_OW 330
// wait ( 0 0$30 ) ;
5393: LD_INT 1050
5395: PPUSH
5396: CALL_OW 67
// RemoveSeeing ( x , y , side ) ;
5400: LD_VAR 0 3
5404: PPUSH
5405: LD_VAR 0 4
5409: PPUSH
5410: LD_VAR 0 1
5414: PPUSH
5415: CALL_OW 331
// wait ( artifactsRecharge [ 1 ] ) ;
5419: LD_EXP 4
5423: PUSH
5424: LD_INT 1
5426: ARRAY
5427: PPUSH
5428: CALL_OW 67
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 1 , true ) ) ;
5432: LD_ADDR_EXP 7
5436: PUSH
5437: LD_EXP 7
5441: PPUSH
5442: LD_VAR 0 1
5446: PPUSH
5447: LD_EXP 7
5451: PUSH
5452: LD_VAR 0 1
5456: ARRAY
5457: PPUSH
5458: LD_INT 1
5460: PPUSH
5461: LD_INT 1
5463: PPUSH
5464: CALL_OW 1
5468: PPUSH
5469: CALL_OW 1
5473: ST_TO_ADDR
// end ; if icon = artifactsButtons [ 2 ] [ 1 ] then
5474: LD_VAR 0 2
5478: PUSH
5479: LD_EXP 10
5483: PUSH
5484: LD_INT 2
5486: ARRAY
5487: PUSH
5488: LD_INT 1
5490: ARRAY
5491: EQUAL
5492: IFFALSE 5988
// begin lab := NearestUnitToXY ( labs , artifactsPos [ 2 ] [ 1 ] , artifactsPos [ 2 ] [ 2 ] ) ;
5494: LD_ADDR_VAR 0 7
5498: PUSH
5499: LD_VAR 0 6
5503: PPUSH
5504: LD_EXP 3
5508: PUSH
5509: LD_INT 2
5511: ARRAY
5512: PUSH
5513: LD_INT 1
5515: ARRAY
5516: PPUSH
5517: LD_EXP 3
5521: PUSH
5522: LD_INT 2
5524: ARRAY
5525: PUSH
5526: LD_INT 2
5528: ARRAY
5529: PPUSH
5530: CALL_OW 73
5534: ST_TO_ADDR
// base := GetBase ( lab ) ;
5535: LD_ADDR_VAR 0 8
5539: PUSH
5540: LD_VAR 0 7
5544: PPUSH
5545: CALL_OW 274
5549: ST_TO_ADDR
// if not x in FilterAllUnits ( [ [ f_enemy , side ] , [ f_or , [ f_engine , engine_siberite ] , [ f_btype , b_siberite_power ] , [ f_btype , b_siberite_mine ] , [ f_bweapon , ru_time_lapser ] , [ f_weapon , ru_time_lapser ] , [ f_weapon , us_double_laser ] , [ f_bweapon , us_double_laser ] , [ f_weapon , ar_bio_bomb ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_btype , b_ext_siberium ] , [ f_weapon , us_siberium_rocket ] , [ f_weapon , ru_siberium_rocket ] , [ f_chassis , ru_behemoth ] , [ f_bweapon , us_siberium_rocket ] , [ f_bweapon , ru_siberium_rocket ] ] ] ) then
5550: LD_VAR 0 3
5554: PUSH
5555: LD_INT 81
5557: PUSH
5558: LD_VAR 0 1
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: PUSH
5567: LD_INT 2
5569: PUSH
5570: LD_INT 32
5572: PUSH
5573: LD_INT 3
5575: PUSH
5576: EMPTY
5577: LIST
5578: LIST
5579: PUSH
5580: LD_INT 30
5582: PUSH
5583: LD_INT 28
5585: PUSH
5586: EMPTY
5587: LIST
5588: LIST
5589: PUSH
5590: LD_INT 30
5592: PUSH
5593: LD_INT 30
5595: PUSH
5596: EMPTY
5597: LIST
5598: LIST
5599: PUSH
5600: LD_INT 35
5602: PUSH
5603: LD_INT 49
5605: PUSH
5606: EMPTY
5607: LIST
5608: LIST
5609: PUSH
5610: LD_INT 34
5612: PUSH
5613: LD_INT 49
5615: PUSH
5616: EMPTY
5617: LIST
5618: LIST
5619: PUSH
5620: LD_INT 34
5622: PUSH
5623: LD_INT 10
5625: PUSH
5626: EMPTY
5627: LIST
5628: LIST
5629: PUSH
5630: LD_INT 35
5632: PUSH
5633: LD_INT 10
5635: PUSH
5636: EMPTY
5637: LIST
5638: LIST
5639: PUSH
5640: LD_INT 34
5642: PUSH
5643: LD_INT 91
5645: PUSH
5646: EMPTY
5647: LIST
5648: LIST
5649: PUSH
5650: LD_INT 34
5652: PUSH
5653: LD_INT 29
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: PUSH
5660: LD_INT 30
5662: PUSH
5663: LD_INT 21
5665: PUSH
5666: EMPTY
5667: LIST
5668: LIST
5669: PUSH
5670: LD_INT 34
5672: PUSH
5673: LD_INT 8
5675: PUSH
5676: EMPTY
5677: LIST
5678: LIST
5679: PUSH
5680: LD_INT 34
5682: PUSH
5683: LD_INT 48
5685: PUSH
5686: EMPTY
5687: LIST
5688: LIST
5689: PUSH
5690: LD_INT 31
5692: PUSH
5693: LD_INT 25
5695: PUSH
5696: EMPTY
5697: LIST
5698: LIST
5699: PUSH
5700: LD_INT 35
5702: PUSH
5703: LD_INT 8
5705: PUSH
5706: EMPTY
5707: LIST
5708: LIST
5709: PUSH
5710: LD_INT 35
5712: PUSH
5713: LD_INT 48
5715: PUSH
5716: EMPTY
5717: LIST
5718: LIST
5719: PUSH
5720: EMPTY
5721: LIST
5722: LIST
5723: LIST
5724: LIST
5725: LIST
5726: LIST
5727: LIST
5728: LIST
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: LIST
5734: LIST
5735: LIST
5736: LIST
5737: PUSH
5738: EMPTY
5739: LIST
5740: LIST
5741: PPUSH
5742: CALL_OW 69
5746: IN
5747: NOT
5748: IFFALSE 5752
// exit ;
5750: GO 6240
// if GetBaseMaterials ( GetBase ( lab ) ) [ 3 ] < artifactsSibCost [ 2 ] then
5752: LD_VAR 0 7
5756: PPUSH
5757: CALL_OW 274
5761: PPUSH
5762: CALL 61825 0 1
5766: PUSH
5767: LD_INT 3
5769: ARRAY
5770: PUSH
5771: LD_EXP 5
5775: PUSH
5776: LD_INT 2
5778: ARRAY
5779: LESS
5780: IFFALSE 5784
// begin exit ;
5782: GO 6240
// end ; SetResourceType ( base , mat_siberit , ( GetResourceType ( base , mat_siberit ) - artifactsSibCost [ 2 ] ) ) ;
5784: LD_VAR 0 8
5788: PPUSH
5789: LD_INT 3
5791: PPUSH
5792: LD_VAR 0 8
5796: PPUSH
5797: LD_INT 3
5799: PPUSH
5800: CALL_OW 275
5804: PUSH
5805: LD_EXP 5
5809: PUSH
5810: LD_INT 2
5812: ARRAY
5813: MINUS
5814: PPUSH
5815: CALL_OW 277
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 2 , false ) ) ;
5819: LD_ADDR_EXP 7
5823: PUSH
5824: LD_EXP 7
5828: PPUSH
5829: LD_VAR 0 1
5833: PPUSH
5834: LD_EXP 7
5838: PUSH
5839: LD_VAR 0 1
5843: ARRAY
5844: PPUSH
5845: LD_INT 2
5847: PPUSH
5848: LD_INT 0
5850: PPUSH
5851: CALL_OW 1
5855: PPUSH
5856: CALL_OW 1
5860: ST_TO_ADDR
// KillUnit ( x ) ;
5861: LD_VAR 0 3
5865: PPUSH
5866: CALL_OW 66
// if GetWeapon ( x ) in [ us_siberium_rocket , ru_siberium_rocket ] or GetBWeapon ( x ) in [ us_siberium_rocket , ru_siberium_rocket ] then
5870: LD_VAR 0 3
5874: PPUSH
5875: CALL_OW 264
5879: PUSH
5880: LD_INT 8
5882: PUSH
5883: LD_INT 48
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: IN
5890: IFTRUE 5914
5892: PUSH
5893: LD_VAR 0 3
5897: PPUSH
5898: CALL_OW 269
5902: PUSH
5903: LD_INT 8
5905: PUSH
5906: LD_INT 48
5908: PUSH
5909: EMPTY
5910: LIST
5911: LIST
5912: IN
5913: OR
5914: IFFALSE 5933
// begin ArtContamination ( x , y , 50 ) ;
5916: LD_VAR 0 3
5920: PPUSH
5921: LD_VAR 0 4
5925: PPUSH
5926: LD_INT 50
5928: PPUSH
5929: CALL_OW 495
// end ; wait ( artifactsRecharge [ 2 ] ) ;
5933: LD_EXP 4
5937: PUSH
5938: LD_INT 2
5940: ARRAY
5941: PPUSH
5942: CALL_OW 67
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 2 , true ) ) ;
5946: LD_ADDR_EXP 7
5950: PUSH
5951: LD_EXP 7
5955: PPUSH
5956: LD_VAR 0 1
5960: PPUSH
5961: LD_EXP 7
5965: PUSH
5966: LD_VAR 0 1
5970: ARRAY
5971: PPUSH
5972: LD_INT 2
5974: PPUSH
5975: LD_INT 1
5977: PPUSH
5978: CALL_OW 1
5982: PPUSH
5983: CALL_OW 1
5987: ST_TO_ADDR
// end ; if icon = artifactsButtons [ 3 ] [ 1 ] then
5988: LD_VAR 0 2
5992: PUSH
5993: LD_EXP 10
5997: PUSH
5998: LD_INT 3
6000: ARRAY
6001: PUSH
6002: LD_INT 1
6004: ARRAY
6005: EQUAL
6006: IFFALSE 6240
// begin lab := NearestUnitToXY ( labs , artifactsPos [ 3 ] [ 1 ] , artifactsPos [ 3 ] [ 2 ] ) ;
6008: LD_ADDR_VAR 0 7
6012: PUSH
6013: LD_VAR 0 6
6017: PPUSH
6018: LD_EXP 3
6022: PUSH
6023: LD_INT 3
6025: ARRAY
6026: PUSH
6027: LD_INT 1
6029: ARRAY
6030: PPUSH
6031: LD_EXP 3
6035: PUSH
6036: LD_INT 3
6038: ARRAY
6039: PUSH
6040: LD_INT 2
6042: ARRAY
6043: PPUSH
6044: CALL_OW 73
6048: ST_TO_ADDR
// base := GetBase ( lab ) ;
6049: LD_ADDR_VAR 0 8
6053: PUSH
6054: LD_VAR 0 7
6058: PPUSH
6059: CALL_OW 274
6063: ST_TO_ADDR
// if GetBaseMaterials ( base ) [ 3 ] < artifactsSibCost [ 3 ] then
6064: LD_VAR 0 8
6068: PPUSH
6069: CALL 61825 0 1
6073: PUSH
6074: LD_INT 3
6076: ARRAY
6077: PUSH
6078: LD_EXP 5
6082: PUSH
6083: LD_INT 3
6085: ARRAY
6086: LESS
6087: IFFALSE 6091
// begin exit ;
6089: GO 6240
// end ; SetResourceType ( base , mat_siberit , ( GetResourceType ( base , mat_siberit ) - artifactsSibCost [ 3 ] ) ) ;
6091: LD_VAR 0 8
6095: PPUSH
6096: LD_INT 3
6098: PPUSH
6099: LD_VAR 0 8
6103: PPUSH
6104: LD_INT 3
6106: PPUSH
6107: CALL_OW 275
6111: PUSH
6112: LD_EXP 5
6116: PUSH
6117: LD_INT 3
6119: ARRAY
6120: MINUS
6121: PPUSH
6122: CALL_OW 277
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 3 , false ) ) ;
6126: LD_ADDR_EXP 7
6130: PUSH
6131: LD_EXP 7
6135: PPUSH
6136: LD_VAR 0 1
6140: PPUSH
6141: LD_EXP 7
6145: PUSH
6146: LD_VAR 0 1
6150: ARRAY
6151: PPUSH
6152: LD_INT 3
6154: PPUSH
6155: LD_INT 0
6157: PPUSH
6158: CALL_OW 1
6162: PPUSH
6163: CALL_OW 1
6167: ST_TO_ADDR
// ArtContamination ( x , y , 50 ) ;
6168: LD_VAR 0 3
6172: PPUSH
6173: LD_VAR 0 4
6177: PPUSH
6178: LD_INT 50
6180: PPUSH
6181: CALL_OW 495
// wait ( artifactsRecharge [ 3 ] ) ;
6185: LD_EXP 4
6189: PUSH
6190: LD_INT 3
6192: ARRAY
6193: PPUSH
6194: CALL_OW 67
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 3 , true ) ) ;
6198: LD_ADDR_EXP 7
6202: PUSH
6203: LD_EXP 7
6207: PPUSH
6208: LD_VAR 0 1
6212: PPUSH
6213: LD_EXP 7
6217: PUSH
6218: LD_VAR 0 1
6222: ARRAY
6223: PPUSH
6224: LD_INT 3
6226: PPUSH
6227: LD_INT 1
6229: PPUSH
6230: CALL_OW 1
6234: PPUSH
6235: CALL_OW 1
6239: ST_TO_ADDR
// end ; end ;
6240: PPOPN 9
6242: END
// on SpecResearchCancel ( lab , progress ) do var side , tag ;
6243: LD_INT 0
6245: PPUSH
6246: PPUSH
// begin tag := GetTag ( lab ) ;
6247: LD_ADDR_VAR 0 4
6251: PUSH
6252: LD_VAR 0 1
6256: PPUSH
6257: CALL_OW 110
6261: ST_TO_ADDR
// side := GetSide ( lab ) ;
6262: LD_ADDR_VAR 0 3
6266: PUSH
6267: LD_VAR 0 1
6271: PPUSH
6272: CALL_OW 255
6276: ST_TO_ADDR
// SetArtifactUse ( side , artifactsButtons [ tag ] [ 3 ] , art_instant , lab ) ;
6277: LD_VAR 0 3
6281: PPUSH
6282: LD_EXP 10
6286: PUSH
6287: LD_VAR 0 4
6291: ARRAY
6292: PUSH
6293: LD_INT 3
6295: ARRAY
6296: PPUSH
6297: LD_INT 2
6299: PPUSH
6300: LD_VAR 0 1
6304: PPUSH
6305: CALL_OW 468
// artifactsResProgress := Replace ( artifactsResProgress , side , Replace ( artifactsResProgress [ side ] , tag , progress ) ) ;
6309: LD_ADDR_EXP 9
6313: PUSH
6314: LD_EXP 9
6318: PPUSH
6319: LD_VAR 0 3
6323: PPUSH
6324: LD_EXP 9
6328: PUSH
6329: LD_VAR 0 3
6333: ARRAY
6334: PPUSH
6335: LD_VAR 0 4
6339: PPUSH
6340: LD_VAR 0 2
6344: PPUSH
6345: CALL_OW 1
6349: PPUSH
6350: CALL_OW 1
6354: ST_TO_ADDR
// artifactsLabsWorking := Replace ( artifactsLabsWorking , tag , artifactsLabsWorking [ tag ] diff lab ) ;
6355: LD_ADDR_EXP 11
6359: PUSH
6360: LD_EXP 11
6364: PPUSH
6365: LD_VAR 0 4
6369: PPUSH
6370: LD_EXP 11
6374: PUSH
6375: LD_VAR 0 4
6379: ARRAY
6380: PUSH
6381: LD_VAR 0 1
6385: DIFF
6386: PPUSH
6387: CALL_OW 1
6391: ST_TO_ADDR
// SetTag ( lab , 0 ) ;
6392: LD_VAR 0 1
6396: PPUSH
6397: LD_INT 0
6399: PPUSH
6400: CALL_OW 109
// end ;
6404: PPOPN 4
6406: END
// on SpecResearchComplete ( lab ) do var side , tag ;
6407: LD_INT 0
6409: PPUSH
6410: PPUSH
// begin tag := GetTag ( lab ) ;
6411: LD_ADDR_VAR 0 3
6415: PUSH
6416: LD_VAR 0 1
6420: PPUSH
6421: CALL_OW 110
6425: ST_TO_ADDR
// side := GetSide ( lab ) ;
6426: LD_ADDR_VAR 0 2
6430: PUSH
6431: LD_VAR 0 1
6435: PPUSH
6436: CALL_OW 255
6440: ST_TO_ADDR
// SetArtifactUse ( side , artifactsButtons [ tag ] [ 3 ] , art_no , lab ) ;
6441: LD_VAR 0 2
6445: PPUSH
6446: LD_EXP 10
6450: PUSH
6451: LD_VAR 0 3
6455: ARRAY
6456: PUSH
6457: LD_INT 3
6459: ARRAY
6460: PPUSH
6461: LD_INT 0
6463: PPUSH
6464: LD_VAR 0 1
6468: PPUSH
6469: CALL_OW 468
// artifactsResearched := Replace ( artifactsResearched , side , Replace ( artifactsResearched [ side ] , tag , 1 ) ) ;
6473: LD_ADDR_EXP 6
6477: PUSH
6478: LD_EXP 6
6482: PPUSH
6483: LD_VAR 0 2
6487: PPUSH
6488: LD_EXP 6
6492: PUSH
6493: LD_VAR 0 2
6497: ARRAY
6498: PPUSH
6499: LD_VAR 0 3
6503: PPUSH
6504: LD_INT 1
6506: PPUSH
6507: CALL_OW 1
6511: PPUSH
6512: CALL_OW 1
6516: ST_TO_ADDR
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , tag , 1 ) ) ;
6517: LD_ADDR_EXP 7
6521: PUSH
6522: LD_EXP 7
6526: PPUSH
6527: LD_VAR 0 2
6531: PPUSH
6532: LD_EXP 7
6536: PUSH
6537: LD_VAR 0 2
6541: ARRAY
6542: PPUSH
6543: LD_VAR 0 3
6547: PPUSH
6548: LD_INT 1
6550: PPUSH
6551: CALL_OW 1
6555: PPUSH
6556: CALL_OW 1
6560: ST_TO_ADDR
// artifactsLabsWorking := Replace ( artifactsLabsWorking , tag , artifactsLabsWorking [ tag ] diff lab ) ;
6561: LD_ADDR_EXP 11
6565: PUSH
6566: LD_EXP 11
6570: PPUSH
6571: LD_VAR 0 3
6575: PPUSH
6576: LD_EXP 11
6580: PUSH
6581: LD_VAR 0 3
6585: ARRAY
6586: PUSH
6587: LD_VAR 0 1
6591: DIFF
6592: PPUSH
6593: CALL_OW 1
6597: ST_TO_ADDR
// end ;
6598: PPOPN 3
6600: END
// on ArtifactLoaded ( cargo , artifact ) do begin SetTag ( cargo , artifact ) ;
6601: LD_VAR 0 1
6605: PPUSH
6606: LD_VAR 0 2
6610: PPUSH
6611: CALL_OW 109
// end ;
6615: PPOPN 2
6617: END
// on ArtifactUnloaded ( cargo , artifact ) do begin SetTag ( cargo , 0 ) ;
6618: LD_VAR 0 1
6622: PPUSH
6623: LD_INT 0
6625: PPUSH
6626: CALL_OW 109
// end ; end_of_file end_of_file
6630: PPOPN 2
6632: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
6633: LD_INT 0
6635: PPUSH
6636: PPUSH
// disable ( mpActive ) ;
6637: LD_INT 100
6639: DISABLE_MARKED
// disable ( mpWin ) ;
6640: LD_INT 101
6642: DISABLE_MARKED
// disable ( mpLose ) ;
6643: LD_INT 102
6645: DISABLE_MARKED
// mpGameType := 0 ;
6646: LD_ADDR_EXP 12
6650: PUSH
6651: LD_INT 0
6653: ST_TO_ADDR
// mpGameSettings := [ ] ;
6654: LD_ADDR_EXP 15
6658: PUSH
6659: EMPTY
6660: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
6661: LD_ADDR_EXP 13
6665: PUSH
6666: EMPTY
6667: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
6668: LD_ADDR_EXP 14
6672: PUSH
6673: EMPTY
6674: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
6675: LD_ADDR_EXP 38
6679: PUSH
6680: LD_INT 2
6682: PUSH
6683: LD_INT 2
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: ST_TO_ADDR
// mpOilDeposits := [ ] ;
6690: LD_ADDR_EXP 21
6694: PUSH
6695: EMPTY
6696: ST_TO_ADDR
// mpSibDeposits := [ ] ;
6697: LD_ADDR_EXP 22
6701: PUSH
6702: EMPTY
6703: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
6704: LD_ADDR_EXP 50
6708: PUSH
6709: EMPTY
6710: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
6711: LD_ADDR_EXP 51
6715: PUSH
6716: EMPTY
6717: ST_TO_ADDR
// mpDepots := [ ] ;
6718: LD_ADDR_EXP 23
6722: PUSH
6723: EMPTY
6724: ST_TO_ADDR
// mpBuildings := [ ] ;
6725: LD_ADDR_EXP 26
6729: PUSH
6730: EMPTY
6731: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
6732: LD_ADDR_EXP 27
6736: PUSH
6737: EMPTY
6738: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
6739: LD_ADDR_EXP 28
6743: PUSH
6744: EMPTY
6745: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
6746: LD_ADDR_EXP 29
6750: PUSH
6751: EMPTY
6752: ST_TO_ADDR
// mpStartingResources := [ ] ;
6753: LD_ADDR_EXP 24
6757: PUSH
6758: EMPTY
6759: ST_TO_ADDR
// mpStartPos := [ ] ;
6760: LD_ADDR_EXP 30
6764: PUSH
6765: EMPTY
6766: ST_TO_ADDR
// mpBattleFlag := - 1 ;
6767: LD_ADDR_EXP 31
6771: PUSH
6772: LD_INT 1
6774: NEG
6775: ST_TO_ADDR
// mpBattleFlags := [ ] ;
6776: LD_ADDR_EXP 32
6780: PUSH
6781: EMPTY
6782: ST_TO_ADDR
// mpApemans := [ ] ;
6783: LD_ADDR_EXP 39
6787: PUSH
6788: EMPTY
6789: ST_TO_ADDR
// mpApemansArea := [ ] ;
6790: LD_ADDR_EXP 40
6794: PUSH
6795: EMPTY
6796: ST_TO_ADDR
// mpRespawn := [ ] ;
6797: LD_ADDR_EXP 42
6801: PUSH
6802: EMPTY
6803: ST_TO_ADDR
// mpKingArea := 0 ;
6804: LD_ADDR_EXP 43
6808: PUSH
6809: LD_INT 0
6811: ST_TO_ADDR
// mpPoints := [ ] ;
6812: LD_ADDR_EXP 44
6816: PUSH
6817: EMPTY
6818: ST_TO_ADDR
// mpVehicles := 0 ;
6819: LD_ADDR_EXP 45
6823: PUSH
6824: LD_INT 0
6826: ST_TO_ADDR
// mpShipments := 0 ;
6827: LD_ADDR_EXP 36
6831: PUSH
6832: LD_INT 0
6834: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
6835: LD_ADDR_EXP 49
6839: PUSH
6840: EMPTY
6841: PUSH
6842: EMPTY
6843: PUSH
6844: EMPTY
6845: PUSH
6846: EMPTY
6847: PUSH
6848: EMPTY
6849: PUSH
6850: EMPTY
6851: PUSH
6852: EMPTY
6853: PUSH
6854: EMPTY
6855: PUSH
6856: EMPTY
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: LIST
6864: LIST
6865: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
6866: LD_ADDR_EXP 41
6870: PUSH
6871: EMPTY
6872: PUSH
6873: EMPTY
6874: PUSH
6875: EMPTY
6876: PUSH
6877: EMPTY
6878: PUSH
6879: EMPTY
6880: PUSH
6881: EMPTY
6882: PUSH
6883: EMPTY
6884: PUSH
6885: EMPTY
6886: PUSH
6887: EMPTY
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: LIST
6895: LIST
6896: ST_TO_ADDR
// mpEmissions := 0 ;
6897: LD_ADDR_EXP 46
6901: PUSH
6902: LD_INT 0
6904: ST_TO_ADDR
// mpTeleports := 0 ;
6905: LD_ADDR_EXP 52
6909: PUSH
6910: LD_INT 0
6912: ST_TO_ADDR
// mpArtifacts := 0 ;
6913: LD_ADDR_EXP 53
6917: PUSH
6918: LD_INT 0
6920: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
6921: LD_ADDR_EXP 54
6925: PUSH
6926: LD_INT 0
6928: ST_TO_ADDR
// mpPeopleSkill := 3 ;
6929: LD_ADDR_EXP 34
6933: PUSH
6934: LD_INT 3
6936: ST_TO_ADDR
// mpPeopleAmount := 15 ;
6937: LD_ADDR_EXP 33
6941: PUSH
6942: LD_INT 15
6944: ST_TO_ADDR
// mpDisplayStrings := 0 ;
6945: LD_ADDR_EXP 47
6949: PUSH
6950: LD_INT 0
6952: ST_TO_ADDR
// mpGameActive := false ;
6953: LD_ADDR_EXP 48
6957: PUSH
6958: LD_INT 0
6960: ST_TO_ADDR
// mpBlockRespThread := false ;
6961: LD_ADDR_EXP 55
6965: PUSH
6966: LD_INT 0
6968: ST_TO_ADDR
// for i := 1 to 32 do
6969: LD_ADDR_VAR 0 2
6973: PUSH
6974: DOUBLE
6975: LD_INT 1
6977: DEC
6978: ST_TO_ADDR
6979: LD_INT 32
6981: PUSH
6982: FOR_TO
6983: IFFALSE 7010
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
6985: LD_ADDR_EXP 15
6989: PUSH
6990: LD_EXP 15
6994: PPUSH
6995: LD_VAR 0 2
6999: PPUSH
7000: LD_INT 0
7002: PPUSH
7003: CALL_OW 1
7007: ST_TO_ADDR
7008: GO 6982
7010: POP
7011: POP
// end ;
7012: LD_VAR 0 1
7016: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
7017: LD_INT 0
7019: PPUSH
7020: PPUSH
7021: PPUSH
7022: PPUSH
7023: PPUSH
7024: PPUSH
7025: PPUSH
7026: PPUSH
7027: PPUSH
7028: PPUSH
7029: PPUSH
7030: PPUSH
7031: PPUSH
7032: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , ] ;
7033: LD_ADDR_VAR 0 14
7037: PUSH
7038: LD_INT 1
7040: PUSH
7041: LD_INT 2
7043: PUSH
7044: LD_INT 3
7046: PUSH
7047: LD_INT 5
7049: PUSH
7050: LD_INT 6
7052: PUSH
7053: LD_INT 7
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: LIST
7060: LIST
7061: LIST
7062: LIST
7063: ST_TO_ADDR
// for i in gameTypes do
7064: LD_ADDR_VAR 0 2
7068: PUSH
7069: LD_VAR 0 14
7073: PUSH
7074: FOR_IN
7075: IFFALSE 7084
// disable ( i ) ;
7077: LD_VAR 0 2
7081: DISABLE_MARKED
7082: GO 7074
7084: POP
7085: POP
// if Multiplayer then
7086: LD_OWVAR 4
7090: IFFALSE 7274
// begin mpGameType := mp_game_type ;
7092: LD_ADDR_EXP 12
7096: PUSH
7097: LD_OWVAR 6
7101: ST_TO_ADDR
// your_side := mp_player_side ;
7102: LD_ADDR_OWVAR 2
7106: PUSH
7107: LD_OWVAR 7
7111: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
7112: LD_ADDR_EXP 16
7116: PUSH
7117: LD_OWVAR 17
7121: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
7122: LD_ADDR_EXP 17
7126: PUSH
7127: LD_OWVAR 15
7131: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
7132: LD_ADDR_EXP 18
7136: PUSH
7137: LD_OWVAR 16
7141: ST_TO_ADDR
// mpTeams := mp_teams ;
7142: LD_ADDR_EXP 19
7146: PUSH
7147: LD_OWVAR 12
7151: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
7152: LD_ADDR_VAR 0 2
7156: PUSH
7157: DOUBLE
7158: LD_INT 1
7160: DEC
7161: ST_TO_ADDR
7162: LD_EXP 13
7166: PPUSH
7167: CALL 25629 0 1
7171: PUSH
7172: FOR_TO
7173: IFFALSE 7249
// begin setting := mpGameSettingsKeys [ i ] ;
7175: LD_ADDR_VAR 0 12
7179: PUSH
7180: LD_EXP 13
7184: PUSH
7185: LD_VAR 0 2
7189: ARRAY
7190: ST_TO_ADDR
// if setting then
7191: LD_VAR 0 12
7195: IFFALSE 7247
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
7197: LD_ADDR_EXP 15
7201: PUSH
7202: LD_EXP 15
7206: PPUSH
7207: LD_VAR 0 2
7211: PPUSH
7212: LD_EXP 14
7216: PUSH
7217: LD_VAR 0 2
7221: ARRAY
7222: PUSH
7223: LD_VAR 0 2
7227: PUSH
7228: LD_INT 1
7230: MINUS
7231: PPUSH
7232: CALL_OW 426
7236: PUSH
7237: LD_INT 1
7239: PLUS
7240: ARRAY
7241: PPUSH
7242: CALL_OW 1
7246: ST_TO_ADDR
// end ;
7247: GO 7172
7249: POP
7250: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
7251: LD_ADDR_EXP 20
7255: PUSH
7256: LD_EXP 17
7260: PUSH
7261: LD_INT 0
7263: PUSH
7264: EMPTY
7265: LIST
7266: DIFF
7267: PUSH
7268: LD_INT 1
7270: GREATER
7271: ST_TO_ADDR
// end else
7272: GO 7274
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
7274: LD_EXP 12
7278: PPUSH
7279: CALL 842 0 1
// if Count ( mpMarkedAreas ) then
7283: LD_EXP 27
7287: PPUSH
7288: CALL 25629 0 1
7292: IFFALSE 7323
// begin for i in mpMarkedAreas do
7294: LD_ADDR_VAR 0 2
7298: PUSH
7299: LD_EXP 27
7303: PUSH
7304: FOR_IN
7305: IFFALSE 7321
// SetAreaMapShow ( i , 0 ) ;
7307: LD_VAR 0 2
7311: PPUSH
7312: LD_INT 0
7314: PPUSH
7315: CALL_OW 424
7319: GO 7304
7321: POP
7322: POP
// end ; for i := 1 to 8 do
7323: LD_ADDR_VAR 0 2
7327: PUSH
7328: DOUBLE
7329: LD_INT 1
7331: DEC
7332: ST_TO_ADDR
7333: LD_INT 8
7335: PUSH
7336: FOR_TO
7337: IFFALSE 8772
// begin if not mpSidePositions [ i ] then
7339: LD_EXP 16
7343: PUSH
7344: LD_VAR 0 2
7348: ARRAY
7349: NOT
7350: IFFALSE 7354
// continue ;
7352: GO 7336
// side := i ;
7354: LD_ADDR_VAR 0 7
7358: PUSH
7359: LD_VAR 0 2
7363: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
7364: LD_ADDR_VAR 0 9
7368: PUSH
7369: LD_EXP 18
7373: PUSH
7374: LD_VAR 0 2
7378: ARRAY
7379: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
7380: LD_ADDR_VAR 0 8
7384: PUSH
7385: LD_EXP 16
7389: PUSH
7390: LD_VAR 0 2
7394: ARRAY
7395: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
7396: LD_EXP 21
7400: PPUSH
7401: CALL 25629 0 1
7405: IFFALSE 7482
// begin for j in mpOilDeposits [ pos ] do
7407: LD_ADDR_VAR 0 3
7411: PUSH
7412: LD_EXP 21
7416: PUSH
7417: LD_VAR 0 8
7421: ARRAY
7422: PUSH
7423: FOR_IN
7424: IFFALSE 7480
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
7426: LD_VAR 0 3
7430: PUSH
7431: LD_INT 1
7433: ARRAY
7434: PPUSH
7435: LD_VAR 0 3
7439: PUSH
7440: LD_INT 2
7442: ARRAY
7443: PPUSH
7444: LD_INT 2
7446: PPUSH
7447: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
7451: LD_VAR 0 3
7455: PUSH
7456: LD_INT 1
7458: ARRAY
7459: PPUSH
7460: LD_VAR 0 3
7464: PUSH
7465: LD_INT 2
7467: ARRAY
7468: PPUSH
7469: LD_VAR 0 7
7473: PPUSH
7474: CALL_OW 441
// end ;
7478: GO 7423
7480: POP
7481: POP
// end ; if Count ( mpSibDeposits ) then
7482: LD_EXP 22
7486: PPUSH
7487: CALL 25629 0 1
7491: IFFALSE 7568
// begin for j in mpSibDeposits [ pos ] do
7493: LD_ADDR_VAR 0 3
7497: PUSH
7498: LD_EXP 22
7502: PUSH
7503: LD_VAR 0 8
7507: ARRAY
7508: PUSH
7509: FOR_IN
7510: IFFALSE 7566
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
7512: LD_VAR 0 3
7516: PUSH
7517: LD_INT 1
7519: ARRAY
7520: PPUSH
7521: LD_VAR 0 3
7525: PUSH
7526: LD_INT 2
7528: ARRAY
7529: PPUSH
7530: LD_INT 3
7532: PPUSH
7533: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
7537: LD_VAR 0 3
7541: PUSH
7542: LD_INT 1
7544: ARRAY
7545: PPUSH
7546: LD_VAR 0 3
7550: PUSH
7551: LD_INT 2
7553: ARRAY
7554: PPUSH
7555: LD_VAR 0 7
7559: PPUSH
7560: CALL_OW 441
// end ;
7564: GO 7509
7566: POP
7567: POP
// end ; InitBc ;
7568: CALL_OW 21
// InitUc ;
7572: CALL_OW 18
// uc_side := side ;
7576: LD_ADDR_OWVAR 20
7580: PUSH
7581: LD_VAR 0 7
7585: ST_TO_ADDR
// uc_nation := nation ;
7586: LD_ADDR_OWVAR 21
7590: PUSH
7591: LD_VAR 0 9
7595: ST_TO_ADDR
// if mpBattleFlag > - 1 then
7596: LD_EXP 31
7600: PUSH
7601: LD_INT 1
7603: NEG
7604: GREATER
7605: IFFALSE 7764
// begin x := mpStartPos [ pos ] [ 1 ] ;
7607: LD_ADDR_VAR 0 5
7611: PUSH
7612: LD_EXP 30
7616: PUSH
7617: LD_VAR 0 8
7621: ARRAY
7622: PUSH
7623: LD_INT 1
7625: ARRAY
7626: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
7627: LD_ADDR_VAR 0 6
7631: PUSH
7632: LD_EXP 30
7636: PUSH
7637: LD_VAR 0 8
7641: ARRAY
7642: PUSH
7643: LD_INT 2
7645: ARRAY
7646: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
7647: LD_VAR 0 5
7651: PPUSH
7652: LD_VAR 0 6
7656: PPUSH
7657: LD_INT 12
7659: PPUSH
7660: LD_INT 2
7662: PPUSH
7663: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
7667: LD_ADDR_EXP 32
7671: PUSH
7672: LD_EXP 32
7676: PPUSH
7677: LD_VAR 0 7
7681: PPUSH
7682: LD_VAR 0 7
7686: PPUSH
7687: LD_VAR 0 5
7691: PPUSH
7692: LD_VAR 0 6
7696: PPUSH
7697: LD_INT 1
7699: PUSH
7700: LD_INT 100
7702: PUSH
7703: EMPTY
7704: LIST
7705: LIST
7706: PUSH
7707: LD_INT 2
7709: PUSH
7710: LD_INT 70
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: PUSH
7717: LD_INT 3
7719: PUSH
7720: LD_INT 40
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: PUSH
7727: LD_INT 10
7729: PUSH
7730: LD_INT 25
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: PUSH
7737: LD_INT 20
7739: PUSH
7740: LD_INT 100
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: LIST
7751: LIST
7752: LIST
7753: PPUSH
7754: CALL_OW 418
7758: PPUSH
7759: CALL_OW 1
7763: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
7764: LD_EXP 23
7768: PPUSH
7769: CALL 25629 0 1
7773: IFFALSE 7968
// begin if mpGameType in [ GameTypeSurvival , GameTypeArmsRace , GameTypeArmsArtifact ] then
7775: LD_EXP 12
7779: PUSH
7780: LD_INT 2
7782: PUSH
7783: LD_INT 6
7785: PUSH
7786: LD_INT 7
7788: PUSH
7789: EMPTY
7790: LIST
7791: LIST
7792: LIST
7793: IN
7794: IFFALSE 7814
// begin bc_level := 10 ;
7796: LD_ADDR_OWVAR 43
7800: PUSH
7801: LD_INT 10
7803: ST_TO_ADDR
// bc_type := b_warehouse ;
7804: LD_ADDR_OWVAR 42
7808: PUSH
7809: LD_INT 1
7811: ST_TO_ADDR
// end else
7812: GO 7830
// begin bc_level := 0 ;
7814: LD_ADDR_OWVAR 43
7818: PUSH
7819: LD_INT 0
7821: ST_TO_ADDR
// bc_type := b_depot ;
7822: LD_ADDR_OWVAR 42
7826: PUSH
7827: LD_INT 0
7829: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
7830: LD_ADDR_VAR 0 4
7834: PUSH
7835: LD_EXP 23
7839: PUSH
7840: LD_VAR 0 8
7844: ARRAY
7845: PUSH
7846: LD_INT 1
7848: ARRAY
7849: PPUSH
7850: LD_EXP 23
7854: PUSH
7855: LD_VAR 0 8
7859: ARRAY
7860: PUSH
7861: LD_INT 2
7863: ARRAY
7864: PPUSH
7865: LD_EXP 23
7869: PUSH
7870: LD_VAR 0 8
7874: ARRAY
7875: PUSH
7876: LD_INT 3
7878: ARRAY
7879: PPUSH
7880: CALL_OW 47
7884: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
7885: LD_VAR 0 4
7889: PPUSH
7890: LD_STRING @
7892: PUSH
7893: LD_VAR 0 7
7897: STR
7898: PPUSH
7899: CALL_OW 500
// if Count ( mpStartingResources ) then
7903: LD_EXP 24
7907: PPUSH
7908: CALL 25629 0 1
7912: IFFALSE 7966
// begin for j := 1 to mpStartingResources do
7914: LD_ADDR_VAR 0 3
7918: PUSH
7919: DOUBLE
7920: LD_INT 1
7922: DEC
7923: ST_TO_ADDR
7924: LD_EXP 24
7928: PUSH
7929: FOR_TO
7930: IFFALSE 7964
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
7932: LD_VAR 0 4
7936: PPUSH
7937: CALL_OW 274
7941: PPUSH
7942: LD_VAR 0 3
7946: PPUSH
7947: LD_EXP 24
7951: PUSH
7952: LD_VAR 0 3
7956: ARRAY
7957: PPUSH
7958: CALL_OW 277
7962: GO 7929
7964: POP
7965: POP
// end ; end else
7966: GO 8175
// if Count ( mpStartingResources ) then
7968: LD_EXP 24
7972: PPUSH
7973: CALL 25629 0 1
7977: IFFALSE 8175
// begin x := mpStartPos [ pos ] [ 1 ] ;
7979: LD_ADDR_VAR 0 5
7983: PUSH
7984: LD_EXP 30
7988: PUSH
7989: LD_VAR 0 8
7993: ARRAY
7994: PUSH
7995: LD_INT 1
7997: ARRAY
7998: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
7999: LD_ADDR_VAR 0 6
8003: PUSH
8004: LD_EXP 30
8008: PUSH
8009: LD_VAR 0 8
8013: ARRAY
8014: PUSH
8015: LD_INT 2
8017: ARRAY
8018: ST_TO_ADDR
// for j := 1 to mpStartingResources do
8019: LD_ADDR_VAR 0 3
8023: PUSH
8024: DOUBLE
8025: LD_INT 1
8027: DEC
8028: ST_TO_ADDR
8029: LD_EXP 24
8033: PUSH
8034: FOR_TO
8035: IFFALSE 8173
// begin resources := mpStartingResources [ j ] ;
8037: LD_ADDR_VAR 0 13
8041: PUSH
8042: LD_EXP 24
8046: PUSH
8047: LD_VAR 0 3
8051: ARRAY
8052: ST_TO_ADDR
// if resources = 0 then
8053: LD_VAR 0 13
8057: PUSH
8058: LD_INT 0
8060: EQUAL
8061: IFFALSE 8065
// continue ;
8063: GO 8034
// repeat if resources >= 50 then
8065: LD_VAR 0 13
8069: PUSH
8070: LD_INT 50
8072: GREATEREQUAL
8073: IFFALSE 8119
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
8075: LD_VAR 0 3
8079: PPUSH
8080: LD_INT 5
8082: PPUSH
8083: LD_VAR 0 5
8087: PPUSH
8088: LD_VAR 0 6
8092: PPUSH
8093: LD_INT 6
8095: PPUSH
8096: LD_INT 0
8098: PPUSH
8099: CALL_OW 60
// resources := resources - 50 ;
8103: LD_ADDR_VAR 0 13
8107: PUSH
8108: LD_VAR 0 13
8112: PUSH
8113: LD_INT 50
8115: MINUS
8116: ST_TO_ADDR
// end else
8117: GO 8161
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
8119: LD_VAR 0 3
8123: PPUSH
8124: LD_VAR 0 13
8128: PUSH
8129: LD_INT 10
8131: DIV
8132: PPUSH
8133: LD_VAR 0 5
8137: PPUSH
8138: LD_VAR 0 6
8142: PPUSH
8143: LD_INT 6
8145: PPUSH
8146: LD_INT 0
8148: PPUSH
8149: CALL_OW 60
// resources := 0 ;
8153: LD_ADDR_VAR 0 13
8157: PUSH
8158: LD_INT 0
8160: ST_TO_ADDR
// end ; until resources <= 0 ;
8161: LD_VAR 0 13
8165: PUSH
8166: LD_INT 0
8168: LESSEQUAL
8169: IFFALSE 8065
// end ;
8171: GO 8034
8173: POP
8174: POP
// end ; if Count ( mpBuildings ) then
8175: LD_EXP 26
8179: PPUSH
8180: CALL 25629 0 1
8184: IFFALSE 8262
// begin for j in mpBuildings [ pos ] do
8186: LD_ADDR_VAR 0 3
8190: PUSH
8191: LD_EXP 26
8195: PUSH
8196: LD_VAR 0 8
8200: ARRAY
8201: PUSH
8202: FOR_IN
8203: IFFALSE 8260
// begin bc_level := 0 ;
8205: LD_ADDR_OWVAR 43
8209: PUSH
8210: LD_INT 0
8212: ST_TO_ADDR
// bc_type := j [ 1 ] ;
8213: LD_ADDR_OWVAR 42
8217: PUSH
8218: LD_VAR 0 3
8222: PUSH
8223: LD_INT 1
8225: ARRAY
8226: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
8227: LD_VAR 0 3
8231: PUSH
8232: LD_INT 2
8234: ARRAY
8235: PPUSH
8236: LD_VAR 0 3
8240: PUSH
8241: LD_INT 3
8243: ARRAY
8244: PPUSH
8245: LD_VAR 0 3
8249: PUSH
8250: LD_INT 4
8252: ARRAY
8253: PPUSH
8254: CALL_OW 47
// end ;
8258: GO 8202
8260: POP
8261: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
8262: LD_EXP 35
8266: IFFALSE 8286
8268: PUSH
8269: LD_INT 20
8271: PPUSH
8272: LD_VAR 0 7
8276: PPUSH
8277: CALL_OW 321
8281: PUSH
8282: LD_INT 1
8284: EQUAL
8285: AND
8286: IFFALSE 8303
// SetTech ( tech_SibDet , side , state_researched ) ;
8288: LD_INT 20
8290: PPUSH
8291: LD_VAR 0 7
8295: PPUSH
8296: LD_INT 2
8298: PPUSH
8299: CALL_OW 322
// if not mpArtifacts then
8303: LD_EXP 53
8307: NOT
8308: IFFALSE 8325
// SetTech ( tech_artifact , side , state_disabled ) ;
8310: LD_INT 24
8312: PPUSH
8313: LD_VAR 0 7
8317: PPUSH
8318: LD_INT 0
8320: PPUSH
8321: CALL_OW 322
// if mpSibBomb = 1 then
8325: LD_EXP 37
8329: PUSH
8330: LD_INT 1
8332: EQUAL
8333: IFFALSE 8352
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
8335: LD_INT 25
8337: PPUSH
8338: LD_VAR 0 7
8342: PPUSH
8343: LD_INT 1
8345: PPUSH
8346: CALL_OW 322
// end else
8350: GO 8367
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
8352: LD_INT 25
8354: PPUSH
8355: LD_VAR 0 7
8359: PPUSH
8360: LD_INT 0
8362: PPUSH
8363: CALL_OW 322
// end ; if mpVehicles then
8367: LD_EXP 45
8371: IFFALSE 8470
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
8373: LD_ADDR_VAR 0 3
8377: PUSH
8378: LD_VAR 0 7
8382: PPUSH
8383: LD_VAR 0 9
8387: PPUSH
8388: LD_EXP 45
8392: PPUSH
8393: CALL 9693 0 3
8397: PUSH
8398: FOR_IN
8399: IFFALSE 8468
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
8401: LD_VAR 0 3
8405: PPUSH
8406: LD_INT 0
8408: PPUSH
8409: LD_INT 5
8411: PPUSH
8412: CALL_OW 12
8416: PPUSH
8417: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
8421: LD_VAR 0 3
8425: PPUSH
8426: LD_EXP 30
8430: PUSH
8431: LD_VAR 0 8
8435: ARRAY
8436: PUSH
8437: LD_INT 1
8439: ARRAY
8440: PPUSH
8441: LD_EXP 30
8445: PUSH
8446: LD_VAR 0 8
8450: ARRAY
8451: PUSH
8452: LD_INT 2
8454: ARRAY
8455: PPUSH
8456: LD_INT 12
8458: PPUSH
8459: LD_INT 0
8461: PPUSH
8462: CALL_OW 50
// end ;
8466: GO 8398
8468: POP
8469: POP
// end ; uc_nation := nation ;
8470: LD_ADDR_OWVAR 21
8474: PUSH
8475: LD_VAR 0 9
8479: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
8480: LD_EXP 12
8484: PUSH
8485: LD_INT 6
8487: PUSH
8488: LD_INT 7
8490: PUSH
8491: EMPTY
8492: LIST
8493: LIST
8494: IN
8495: IFFALSE 8520
8497: PUSH
8498: LD_EXP 16
8502: PUSH
8503: LD_VAR 0 2
8507: ARRAY
8508: PUSH
8509: LD_INT 1
8511: PUSH
8512: LD_INT 2
8514: PUSH
8515: EMPTY
8516: LIST
8517: LIST
8518: IN
8519: AND
8520: IFFALSE 8568
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
8522: LD_ADDR_VAR 0 11
8526: PUSH
8527: LD_VAR 0 7
8531: PPUSH
8532: LD_VAR 0 9
8536: PPUSH
8537: LD_EXP 33
8541: PUSH
8542: LD_EXP 33
8546: PUSH
8547: LD_INT 2
8549: DIV
8550: PLUS
8551: PPUSH
8552: LD_EXP 34
8556: PUSH
8557: LD_INT 1
8559: PLUS
8560: PPUSH
8561: CALL 9184 0 4
8565: ST_TO_ADDR
8566: GO 8598
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
8568: LD_ADDR_VAR 0 11
8572: PUSH
8573: LD_VAR 0 7
8577: PPUSH
8578: LD_VAR 0 9
8582: PPUSH
8583: LD_EXP 33
8587: PPUSH
8588: LD_EXP 34
8592: PPUSH
8593: CALL 9184 0 4
8597: ST_TO_ADDR
// for j in team do
8598: LD_ADDR_VAR 0 3
8602: PUSH
8603: LD_VAR 0 11
8607: PUSH
8608: FOR_IN
8609: IFFALSE 8658
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
8611: LD_VAR 0 3
8615: PPUSH
8616: LD_EXP 30
8620: PUSH
8621: LD_VAR 0 8
8625: ARRAY
8626: PUSH
8627: LD_INT 1
8629: ARRAY
8630: PPUSH
8631: LD_EXP 30
8635: PUSH
8636: LD_VAR 0 8
8640: ARRAY
8641: PUSH
8642: LD_INT 2
8644: ARRAY
8645: PPUSH
8646: LD_INT 12
8648: PPUSH
8649: LD_INT 0
8651: PPUSH
8652: CALL_OW 50
8656: GO 8608
8658: POP
8659: POP
// if mpApemans then
8660: LD_EXP 39
8664: IFFALSE 8770
// begin for j := 1 to mpApemans do
8666: LD_ADDR_VAR 0 3
8670: PUSH
8671: DOUBLE
8672: LD_INT 1
8674: DEC
8675: ST_TO_ADDR
8676: LD_EXP 39
8680: PUSH
8681: FOR_TO
8682: IFFALSE 8768
// begin PrepareApeman ( - 5 ) ;
8684: LD_INT 5
8686: NEG
8687: PPUSH
8688: CALL 57722 0 1
// ape := CreateHuman ;
8692: LD_ADDR_VAR 0 10
8696: PUSH
8697: CALL_OW 44
8701: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
8702: LD_ADDR_EXP 41
8706: PUSH
8707: LD_EXP 41
8711: PPUSH
8712: LD_VAR 0 8
8716: PPUSH
8717: LD_EXP 41
8721: PUSH
8722: LD_VAR 0 8
8726: ARRAY
8727: PPUSH
8728: LD_VAR 0 10
8732: PPUSH
8733: CALL 61595 0 2
8737: PPUSH
8738: CALL_OW 1
8742: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
8743: LD_VAR 0 10
8747: PPUSH
8748: LD_EXP 40
8752: PUSH
8753: LD_VAR 0 8
8757: ARRAY
8758: PPUSH
8759: LD_INT 0
8761: PPUSH
8762: CALL_OW 49
// end ;
8766: GO 8681
8768: POP
8769: POP
// end ; end ;
8770: GO 7336
8772: POP
8773: POP
// if not mpTeamGame then
8774: LD_EXP 20
8778: NOT
8779: IFFALSE 8877
// begin for i := 1 to 8 do
8781: LD_ADDR_VAR 0 2
8785: PUSH
8786: DOUBLE
8787: LD_INT 1
8789: DEC
8790: ST_TO_ADDR
8791: LD_INT 8
8793: PUSH
8794: FOR_TO
8795: IFFALSE 8873
// for j := 1 to 8 do
8797: LD_ADDR_VAR 0 3
8801: PUSH
8802: DOUBLE
8803: LD_INT 1
8805: DEC
8806: ST_TO_ADDR
8807: LD_INT 8
8809: PUSH
8810: FOR_TO
8811: IFFALSE 8869
// if i <> j then
8813: LD_VAR 0 2
8817: PUSH
8818: LD_VAR 0 3
8822: NONEQUAL
8823: IFFALSE 8847
// SetAttitude ( i , j , att_neutral , true ) else
8825: LD_VAR 0 2
8829: PPUSH
8830: LD_VAR 0 3
8834: PPUSH
8835: LD_INT 0
8837: PPUSH
8838: LD_INT 1
8840: PPUSH
8841: CALL_OW 80
8845: GO 8867
// SetAttitude ( i , j , att_friend , true ) ;
8847: LD_VAR 0 2
8851: PPUSH
8852: LD_VAR 0 3
8856: PPUSH
8857: LD_INT 1
8859: PPUSH
8860: LD_INT 1
8862: PPUSH
8863: CALL_OW 80
8867: GO 8810
8869: POP
8870: POP
8871: GO 8794
8873: POP
8874: POP
// end else
8875: GO 9052
// begin if mpSharedVision then
8877: LD_EXP 25
8881: IFFALSE 8946
// begin for i in mpTeams do
8883: LD_ADDR_VAR 0 2
8887: PUSH
8888: LD_EXP 19
8892: PUSH
8893: FOR_IN
8894: IFFALSE 8944
// for j := 2 to i do
8896: LD_ADDR_VAR 0 3
8900: PUSH
8901: DOUBLE
8902: LD_INT 2
8904: DEC
8905: ST_TO_ADDR
8906: LD_VAR 0 2
8910: PUSH
8911: FOR_TO
8912: IFFALSE 8940
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
8914: LD_VAR 0 2
8918: PUSH
8919: LD_VAR 0 3
8923: ARRAY
8924: PPUSH
8925: LD_VAR 0 2
8929: PUSH
8930: LD_INT 1
8932: ARRAY
8933: PPUSH
8934: CALL_OW 343
8938: GO 8911
8940: POP
8941: POP
8942: GO 8893
8944: POP
8945: POP
// end ; for i := 1 to 8 do
8946: LD_ADDR_VAR 0 2
8950: PUSH
8951: DOUBLE
8952: LD_INT 1
8954: DEC
8955: ST_TO_ADDR
8956: LD_INT 8
8958: PUSH
8959: FOR_TO
8960: IFFALSE 9050
// for j := 1 to 8 do
8962: LD_ADDR_VAR 0 3
8966: PUSH
8967: DOUBLE
8968: LD_INT 1
8970: DEC
8971: ST_TO_ADDR
8972: LD_INT 8
8974: PUSH
8975: FOR_TO
8976: IFFALSE 9046
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
8978: LD_EXP 17
8982: PUSH
8983: LD_VAR 0 2
8987: ARRAY
8988: PUSH
8989: LD_EXP 17
8993: PUSH
8994: LD_VAR 0 3
8998: ARRAY
8999: EQUAL
9000: IFFALSE 9024
// SetAttitude ( i , j , att_friend , true ) else
9002: LD_VAR 0 2
9006: PPUSH
9007: LD_VAR 0 3
9011: PPUSH
9012: LD_INT 1
9014: PPUSH
9015: LD_INT 1
9017: PPUSH
9018: CALL_OW 80
9022: GO 9044
// SetAttitude ( i , j , att_enemy , true ) ;
9024: LD_VAR 0 2
9028: PPUSH
9029: LD_VAR 0 3
9033: PPUSH
9034: LD_INT 2
9036: PPUSH
9037: LD_INT 1
9039: PPUSH
9040: CALL_OW 80
9044: GO 8975
9046: POP
9047: POP
9048: GO 8959
9050: POP
9051: POP
// end ; music_nat := mpSideNations [ your_side ] ;
9052: LD_ADDR_OWVAR 71
9056: PUSH
9057: LD_EXP 18
9061: PUSH
9062: LD_OWVAR 2
9066: ARRAY
9067: ST_TO_ADDR
// if IAmSpec then
9068: CALL_OW 531
9072: IFFALSE 9113
// begin FogOff ( true ) ;
9074: LD_INT 1
9076: PPUSH
9077: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
9081: LD_EXP 38
9085: PUSH
9086: LD_INT 1
9088: ARRAY
9089: PUSH
9090: LD_INT 2
9092: DIV
9093: PPUSH
9094: LD_EXP 38
9098: PUSH
9099: LD_INT 2
9101: ARRAY
9102: PUSH
9103: LD_INT 2
9105: DIV
9106: PPUSH
9107: CALL_OW 86
// end else
9111: GO 9159
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
9113: LD_EXP 30
9117: PUSH
9118: LD_EXP 16
9122: PUSH
9123: LD_OWVAR 2
9127: ARRAY
9128: ARRAY
9129: PUSH
9130: LD_INT 1
9132: ARRAY
9133: PPUSH
9134: LD_EXP 30
9138: PUSH
9139: LD_EXP 16
9143: PUSH
9144: LD_OWVAR 2
9148: ARRAY
9149: ARRAY
9150: PUSH
9151: LD_INT 2
9153: ARRAY
9154: PPUSH
9155: CALL_OW 86
// end ; BeginBuildUp ;
9159: CALL 10226 0 0
// enable ( mpActive ) ;
9163: LD_INT 100
9165: ENABLE_MARKED
// enable ( mpGameType ) ;
9166: LD_EXP 12
9170: ENABLE_MARKED
// mpGameActive := true ;
9171: LD_ADDR_EXP 48
9175: PUSH
9176: LD_INT 1
9178: ST_TO_ADDR
// end ;
9179: LD_VAR 0 1
9183: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
9184: LD_INT 0
9186: PPUSH
9187: PPUSH
9188: PPUSH
9189: PPUSH
// result := [ ] ;
9190: LD_ADDR_VAR 0 5
9194: PUSH
9195: EMPTY
9196: ST_TO_ADDR
// class := class_soldier ;
9197: LD_ADDR_VAR 0 8
9201: PUSH
9202: LD_INT 1
9204: ST_TO_ADDR
// uc_side := side ;
9205: LD_ADDR_OWVAR 20
9209: PUSH
9210: LD_VAR 0 1
9214: ST_TO_ADDR
// uc_nation := nation ;
9215: LD_ADDR_OWVAR 21
9219: PUSH
9220: LD_VAR 0 2
9224: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
9225: LD_ADDR_OWVAR 26
9229: PUSH
9230: LD_OWVAR 19
9234: PUSH
9235: LD_VAR 0 1
9239: ARRAY
9240: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
9241: LD_INT 1
9243: PPUSH
9244: LD_INT 2
9246: PPUSH
9247: CALL_OW 12
9251: PPUSH
9252: LD_VAR 0 8
9256: PPUSH
9257: LD_VAR 0 4
9261: PUSH
9262: LD_INT 2
9264: PLUS
9265: PPUSH
9266: CALL_OW 380
// hc_importance := 105 ;
9270: LD_ADDR_OWVAR 32
9274: PUSH
9275: LD_INT 105
9277: ST_TO_ADDR
// if Multiplayer then
9278: LD_OWVAR 4
9282: IFFALSE 9322
// begin hc_gallery := MULTIAVATARS ;
9284: LD_ADDR_OWVAR 33
9288: PUSH
9289: LD_STRING MULTIAVATARS
9291: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
9292: LD_ADDR_OWVAR 34
9296: PUSH
9297: LD_VAR 0 1
9301: PPUSH
9302: CALL_OW 525
9306: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
9307: LD_ADDR_OWVAR 27
9311: PUSH
9312: LD_VAR 0 1
9316: PPUSH
9317: CALL_OW 526
9321: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
9322: LD_ADDR_VAR 0 5
9326: PUSH
9327: LD_VAR 0 5
9331: PPUSH
9332: CALL_OW 44
9336: PPUSH
9337: CALL 61595 0 2
9341: ST_TO_ADDR
// if mpTeamPreset then
9342: LD_LOC 1
9346: IFFALSE 9442
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
9348: LD_LOC 1
9352: PUSH
9353: LD_INT 1
9355: ARRAY
9356: PPUSH
9357: LD_VAR 0 5
9361: PUSH
9362: LD_VAR 0 5
9366: ARRAY
9367: PPUSH
9368: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
9372: LD_VAR 0 5
9376: PUSH
9377: LD_VAR 0 5
9381: ARRAY
9382: PPUSH
9383: LD_INT 1
9385: PPUSH
9386: LD_LOC 1
9390: PUSH
9391: LD_INT 1
9393: ARRAY
9394: PPUSH
9395: LD_INT 1
9397: PPUSH
9398: CALL_OW 260
9402: PPUSH
9403: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
9407: LD_VAR 0 5
9411: PUSH
9412: LD_VAR 0 5
9416: ARRAY
9417: PPUSH
9418: LD_INT 2
9420: PPUSH
9421: LD_LOC 1
9425: PUSH
9426: LD_INT 1
9428: ARRAY
9429: PPUSH
9430: LD_INT 2
9432: PPUSH
9433: CALL_OW 260
9437: PPUSH
9438: CALL_OW 239
// end ; InitHc_All ( ) ;
9442: CALL_OW 584
// class := 2 ;
9446: LD_ADDR_VAR 0 8
9450: PUSH
9451: LD_INT 2
9453: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
9454: LD_ADDR_VAR 0 6
9458: PUSH
9459: DOUBLE
9460: LD_INT 1
9462: DEC
9463: ST_TO_ADDR
9464: LD_VAR 0 3
9468: PUSH
9469: LD_INT 1
9471: MINUS
9472: PUSH
9473: FOR_TO
9474: IFFALSE 9669
// begin PrepareHuman ( false , class , skill ) ;
9476: LD_INT 0
9478: PPUSH
9479: LD_VAR 0 8
9483: PPUSH
9484: LD_VAR 0 4
9488: PPUSH
9489: CALL_OW 380
// un := CreateHuman ;
9493: LD_ADDR_VAR 0 7
9497: PUSH
9498: CALL_OW 44
9502: ST_TO_ADDR
// result := Join ( result , un ) ;
9503: LD_ADDR_VAR 0 5
9507: PUSH
9508: LD_VAR 0 5
9512: PPUSH
9513: LD_VAR 0 7
9517: PPUSH
9518: CALL 61595 0 2
9522: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
9523: LD_LOC 1
9527: PPUSH
9528: CALL 25629 0 1
9532: PUSH
9533: LD_VAR 0 3
9537: GREATEREQUAL
9538: IFFALSE 9634
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
9540: LD_LOC 1
9544: PUSH
9545: LD_VAR 0 6
9549: PUSH
9550: LD_INT 1
9552: PLUS
9553: ARRAY
9554: PPUSH
9555: LD_VAR 0 7
9559: PPUSH
9560: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
9564: LD_VAR 0 7
9568: PPUSH
9569: LD_INT 1
9571: PPUSH
9572: LD_LOC 1
9576: PUSH
9577: LD_VAR 0 6
9581: PUSH
9582: LD_INT 1
9584: PLUS
9585: ARRAY
9586: PPUSH
9587: LD_INT 1
9589: PPUSH
9590: CALL_OW 260
9594: PPUSH
9595: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
9599: LD_VAR 0 7
9603: PPUSH
9604: LD_INT 2
9606: PPUSH
9607: LD_LOC 1
9611: PUSH
9612: LD_VAR 0 6
9616: PUSH
9617: LD_INT 1
9619: PLUS
9620: ARRAY
9621: PPUSH
9622: LD_INT 2
9624: PPUSH
9625: CALL_OW 260
9629: PPUSH
9630: CALL_OW 239
// end ; class := Inc ( class ) ;
9634: LD_ADDR_VAR 0 8
9638: PUSH
9639: LD_VAR 0 8
9643: PPUSH
9644: CALL 62968 0 1
9648: ST_TO_ADDR
// if class = 5 then
9649: LD_VAR 0 8
9653: PUSH
9654: LD_INT 5
9656: EQUAL
9657: IFFALSE 9667
// class := 1 ;
9659: LD_ADDR_VAR 0 8
9663: PUSH
9664: LD_INT 1
9666: ST_TO_ADDR
// end ;
9667: GO 9473
9669: POP
9670: POP
// if not mpTeamPreset then
9671: LD_LOC 1
9675: NOT
9676: IFFALSE 9688
// mpTeamPreset := result ;
9678: LD_ADDR_LOC 1
9682: PUSH
9683: LD_VAR 0 5
9687: ST_TO_ADDR
// end ;
9688: LD_VAR 0 5
9692: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
9693: LD_INT 0
9695: PPUSH
9696: PPUSH
// result := [ ] ;
9697: LD_ADDR_VAR 0 4
9701: PUSH
9702: EMPTY
9703: ST_TO_ADDR
// if not vehicles then
9704: LD_VAR 0 3
9708: NOT
9709: IFFALSE 9713
// exit ;
9711: GO 9927
// for i := 1 to vehicles [ nation ] do
9713: LD_ADDR_VAR 0 5
9717: PUSH
9718: DOUBLE
9719: LD_INT 1
9721: DEC
9722: ST_TO_ADDR
9723: LD_VAR 0 3
9727: PUSH
9728: LD_VAR 0 2
9732: ARRAY
9733: PUSH
9734: FOR_TO
9735: IFFALSE 9925
// begin uc_side := side ;
9737: LD_ADDR_OWVAR 20
9741: PUSH
9742: LD_VAR 0 1
9746: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
9747: LD_VAR 0 3
9751: PUSH
9752: LD_VAR 0 2
9756: ARRAY
9757: PUSH
9758: LD_VAR 0 5
9762: ARRAY
9763: PPUSH
9764: CALL 25629 0 1
9768: PUSH
9769: LD_INT 4
9771: GREATER
9772: IFFALSE 9802
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
9774: LD_ADDR_OWVAR 21
9778: PUSH
9779: LD_VAR 0 3
9783: PUSH
9784: LD_VAR 0 2
9788: ARRAY
9789: PUSH
9790: LD_VAR 0 5
9794: ARRAY
9795: PUSH
9796: LD_INT 5
9798: ARRAY
9799: ST_TO_ADDR
9800: GO 9812
// uc_nation := nation ;
9802: LD_ADDR_OWVAR 21
9806: PUSH
9807: LD_VAR 0 2
9811: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
9812: LD_VAR 0 3
9816: PUSH
9817: LD_VAR 0 2
9821: ARRAY
9822: PUSH
9823: LD_VAR 0 5
9827: ARRAY
9828: PUSH
9829: LD_INT 1
9831: ARRAY
9832: PPUSH
9833: LD_VAR 0 3
9837: PUSH
9838: LD_VAR 0 2
9842: ARRAY
9843: PUSH
9844: LD_VAR 0 5
9848: ARRAY
9849: PUSH
9850: LD_INT 2
9852: ARRAY
9853: PPUSH
9854: LD_VAR 0 3
9858: PUSH
9859: LD_VAR 0 2
9863: ARRAY
9864: PUSH
9865: LD_VAR 0 5
9869: ARRAY
9870: PUSH
9871: LD_INT 3
9873: ARRAY
9874: PPUSH
9875: LD_VAR 0 3
9879: PUSH
9880: LD_VAR 0 2
9884: ARRAY
9885: PUSH
9886: LD_VAR 0 5
9890: ARRAY
9891: PUSH
9892: LD_INT 4
9894: ARRAY
9895: PPUSH
9896: LD_INT 80
9898: PPUSH
9899: CALL 28425 0 5
// result := Join ( result , CreateVehicle ) ;
9903: LD_ADDR_VAR 0 4
9907: PUSH
9908: LD_VAR 0 4
9912: PPUSH
9913: CALL_OW 45
9917: PPUSH
9918: CALL 61595 0 2
9922: ST_TO_ADDR
// end ;
9923: GO 9734
9925: POP
9926: POP
// end ;
9927: LD_VAR 0 4
9931: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
9932: LD_INT 0
9934: PPUSH
9935: PPUSH
// for i in mpBattleFlags do
9936: LD_ADDR_VAR 0 3
9940: PUSH
9941: LD_EXP 32
9945: PUSH
9946: FOR_IN
9947: IFFALSE 10024
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
9949: LD_VAR 0 3
9953: PPUSH
9954: LD_INT 1
9956: PUSH
9957: LD_VAR 0 1
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: PUSH
9966: LD_INT 2
9968: PUSH
9969: LD_VAR 0 1
9973: PUSH
9974: LD_REAL  7.00000000000000E-0001
9977: MUL
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: PUSH
9983: LD_INT 3
9985: PUSH
9986: LD_VAR 0 1
9990: PUSH
9991: LD_REAL  4.00000000000000E-0001
9994: MUL
9995: PUSH
9996: EMPTY
9997: LIST
9998: LIST
9999: PUSH
10000: LD_INT 20
10002: PUSH
10003: LD_VAR 0 1
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: PPUSH
10018: CALL_OW 423
10022: GO 9946
10024: POP
10025: POP
// end ;
10026: LD_VAR 0 2
10030: RET
// every 0 0$1 trigger mpActive do var i , strength ;
10031: LD_INT 100
10033: IFFALSE 10128
10035: GO 10037
10037: DISABLE
10038: LD_INT 0
10040: PPUSH
10041: PPUSH
// begin if mpBattleFlag <= 0 then
10042: LD_EXP 31
10046: PUSH
10047: LD_INT 0
10049: LESSEQUAL
10050: IFFALSE 10054
// exit ;
10052: GO 10128
// strength := 100 ;
10054: LD_ADDR_VAR 0 2
10058: PUSH
10059: LD_INT 100
10061: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
10062: LD_EXP 31
10066: PPUSH
10067: CALL_OW 67
// strength := Dec ( strength ) ;
10071: LD_ADDR_VAR 0 2
10075: PUSH
10076: LD_VAR 0 2
10080: PPUSH
10081: CALL 62990 0 1
10085: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
10086: LD_VAR 0 2
10090: PPUSH
10091: CALL 9932 0 1
// until not strength ;
10095: LD_VAR 0 2
10099: NOT
10100: IFFALSE 10062
// for i in mpBattleFlags do
10102: LD_ADDR_VAR 0 1
10106: PUSH
10107: LD_EXP 32
10111: PUSH
10112: FOR_IN
10113: IFFALSE 10126
// KillBattleFlag ( i ) ;
10115: LD_VAR 0 1
10119: PPUSH
10120: CALL_OW 419
10124: GO 10112
10126: POP
10127: POP
// end ;
10128: PPOPN 2
10130: END
// every 0 0$1 marked mpActive do var side , tmp ;
10131: GO 10133
10133: DISABLE
10134: LD_INT 0
10136: PPUSH
10137: PPUSH
// begin if mpSibBomb <= 1 then
10138: LD_EXP 37
10142: PUSH
10143: LD_INT 1
10145: LESSEQUAL
10146: IFFALSE 10150
// exit ;
10148: GO 10223
// tmp := mpSibBomb ;
10150: LD_ADDR_VAR 0 2
10154: PUSH
10155: LD_EXP 37
10159: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10160: LD_INT 35
10162: PPUSH
10163: CALL_OW 67
// tmp := tmp - 0 0$1 ;
10167: LD_ADDR_VAR 0 2
10171: PUSH
10172: LD_VAR 0 2
10176: PUSH
10177: LD_INT 35
10179: MINUS
10180: ST_TO_ADDR
// until not tmp ;
10181: LD_VAR 0 2
10185: NOT
10186: IFFALSE 10160
// for side := 1 to 8 do
10188: LD_ADDR_VAR 0 1
10192: PUSH
10193: DOUBLE
10194: LD_INT 1
10196: DEC
10197: ST_TO_ADDR
10198: LD_INT 8
10200: PUSH
10201: FOR_TO
10202: IFFALSE 10221
// SetTech ( tech_SibFiss , side , state_enabled ) ;
10204: LD_INT 25
10206: PPUSH
10207: LD_VAR 0 1
10211: PPUSH
10212: LD_INT 1
10214: PPUSH
10215: CALL_OW 322
10219: GO 10201
10221: POP
10222: POP
// end ;
10223: PPOPN 2
10225: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
10226: LD_INT 0
10228: PPUSH
10229: PPUSH
10230: PPUSH
// mpBuildUpTimeDelay := 0 ;
10231: LD_ADDR_EXP 56
10235: PUSH
10236: LD_INT 0
10238: ST_TO_ADDR
// if not mpBuildUpTime then
10239: LD_EXP 29
10243: NOT
10244: IFFALSE 10248
// exit ;
10246: GO 10437
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
10248: LD_ADDR_EXP 56
10252: PUSH
10253: LD_INT 8400
10255: PUSH
10256: LD_INT 2100
10258: PUSH
10259: LD_EXP 29
10263: MUL
10264: PLUS
10265: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
10266: LD_ADDR_EXP 57
10270: PUSH
10271: LD_INT 1
10273: ST_TO_ADDR
// for i := 1 to 8 do
10274: LD_ADDR_VAR 0 2
10278: PUSH
10279: DOUBLE
10280: LD_INT 1
10282: DEC
10283: ST_TO_ADDR
10284: LD_INT 8
10286: PUSH
10287: FOR_TO
10288: IFFALSE 10435
// if mpSidePositions [ i ] then
10290: LD_EXP 16
10294: PUSH
10295: LD_VAR 0 2
10299: ARRAY
10300: IFFALSE 10433
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
10302: LD_EXP 28
10306: PUSH
10307: LD_EXP 16
10311: PUSH
10312: LD_VAR 0 2
10316: ARRAY
10317: ARRAY
10318: PPUSH
10319: LD_INT 5
10321: PPUSH
10322: CALL_OW 424
// for j := 1 to 8 do
10326: LD_ADDR_VAR 0 3
10330: PUSH
10331: DOUBLE
10332: LD_INT 1
10334: DEC
10335: ST_TO_ADDR
10336: LD_INT 8
10338: PUSH
10339: FOR_TO
10340: IFFALSE 10431
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
10342: LD_EXP 16
10346: PUSH
10347: LD_VAR 0 3
10351: ARRAY
10352: IFFALSE 10401
10354: PUSH
10355: LD_EXP 17
10359: PUSH
10360: LD_VAR 0 2
10364: ARRAY
10365: PUSH
10366: LD_EXP 17
10370: PUSH
10371: LD_VAR 0 3
10375: ARRAY
10376: NONEQUAL
10377: IFTRUE 10400
10379: PUSH
10380: LD_EXP 20
10384: NOT
10385: IFFALSE 10399
10387: PUSH
10388: LD_VAR 0 2
10392: PUSH
10393: LD_VAR 0 3
10397: NONEQUAL
10398: AND
10399: OR
10400: AND
10401: IFFALSE 10429
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
10403: LD_VAR 0 3
10407: PPUSH
10408: LD_EXP 28
10412: PUSH
10413: LD_EXP 16
10417: PUSH
10418: LD_VAR 0 2
10422: ARRAY
10423: ARRAY
10424: PPUSH
10425: CALL_OW 333
10429: GO 10339
10431: POP
10432: POP
// end ;
10433: GO 10287
10435: POP
10436: POP
// end ;
10437: LD_VAR 0 1
10441: RET
// function EndBuildUp ; var i , j ; begin
10442: LD_INT 0
10444: PPUSH
10445: PPUSH
10446: PPUSH
// mpBuildUpTimeActive := false ;
10447: LD_ADDR_EXP 57
10451: PUSH
10452: LD_INT 0
10454: ST_TO_ADDR
// for i := 1 to 8 do
10455: LD_ADDR_VAR 0 2
10459: PUSH
10460: DOUBLE
10461: LD_INT 1
10463: DEC
10464: ST_TO_ADDR
10465: LD_INT 8
10467: PUSH
10468: FOR_TO
10469: IFFALSE 10616
// if mpSidePositions [ i ] then
10471: LD_EXP 16
10475: PUSH
10476: LD_VAR 0 2
10480: ARRAY
10481: IFFALSE 10614
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
10483: LD_EXP 28
10487: PUSH
10488: LD_EXP 16
10492: PUSH
10493: LD_VAR 0 2
10497: ARRAY
10498: ARRAY
10499: PPUSH
10500: LD_INT 0
10502: PPUSH
10503: CALL_OW 424
// for j := 1 to 8 do
10507: LD_ADDR_VAR 0 3
10511: PUSH
10512: DOUBLE
10513: LD_INT 1
10515: DEC
10516: ST_TO_ADDR
10517: LD_INT 8
10519: PUSH
10520: FOR_TO
10521: IFFALSE 10612
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
10523: LD_EXP 16
10527: PUSH
10528: LD_VAR 0 3
10532: ARRAY
10533: IFFALSE 10582
10535: PUSH
10536: LD_EXP 17
10540: PUSH
10541: LD_VAR 0 2
10545: ARRAY
10546: PUSH
10547: LD_EXP 17
10551: PUSH
10552: LD_VAR 0 3
10556: ARRAY
10557: NONEQUAL
10558: IFTRUE 10581
10560: PUSH
10561: LD_EXP 20
10565: NOT
10566: IFFALSE 10580
10568: PUSH
10569: LD_VAR 0 2
10573: PUSH
10574: LD_VAR 0 3
10578: NONEQUAL
10579: AND
10580: OR
10581: AND
10582: IFFALSE 10610
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
10584: LD_VAR 0 3
10588: PPUSH
10589: LD_EXP 28
10593: PUSH
10594: LD_EXP 16
10598: PUSH
10599: LD_VAR 0 2
10603: ARRAY
10604: ARRAY
10605: PPUSH
10606: CALL_OW 334
10610: GO 10520
10612: POP
10613: POP
// end ;
10614: GO 10468
10616: POP
10617: POP
// end ;
10618: LD_VAR 0 1
10622: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
10623: LD_EXP 57
10627: IFFALSE 10808
10629: GO 10631
10631: DISABLE
10632: LD_INT 0
10634: PPUSH
10635: PPUSH
// begin for i := 1 to 8 do
10636: LD_ADDR_VAR 0 1
10640: PUSH
10641: DOUBLE
10642: LD_INT 1
10644: DEC
10645: ST_TO_ADDR
10646: LD_INT 8
10648: PUSH
10649: FOR_TO
10650: IFFALSE 10805
// if mpSidePositions [ i ] then
10652: LD_EXP 16
10656: PUSH
10657: LD_VAR 0 1
10661: ARRAY
10662: IFFALSE 10803
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
10664: LD_ADDR_VAR 0 2
10668: PUSH
10669: LD_EXP 28
10673: PUSH
10674: LD_EXP 16
10678: PUSH
10679: LD_VAR 0 1
10683: ARRAY
10684: ARRAY
10685: PPUSH
10686: LD_INT 2
10688: PUSH
10689: LD_INT 21
10691: PUSH
10692: LD_INT 1
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: PUSH
10699: LD_INT 21
10701: PUSH
10702: LD_INT 2
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: LIST
10713: PUSH
10714: LD_INT 22
10716: PUSH
10717: LD_OWVAR 2
10721: PUSH
10722: EMPTY
10723: LIST
10724: LIST
10725: PUSH
10726: EMPTY
10727: LIST
10728: LIST
10729: PPUSH
10730: CALL_OW 70
10734: PUSH
10735: FOR_IN
10736: IFFALSE 10801
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
10738: LD_EXP 17
10742: PUSH
10743: LD_VAR 0 1
10747: ARRAY
10748: PUSH
10749: LD_EXP 17
10753: PUSH
10754: LD_OWVAR 2
10758: ARRAY
10759: NONEQUAL
10760: IFTRUE 10783
10762: PUSH
10763: LD_EXP 20
10767: NOT
10768: IFFALSE 10782
10770: PUSH
10771: LD_VAR 0 1
10775: PUSH
10776: LD_OWVAR 2
10780: NONEQUAL
10781: AND
10782: OR
10783: IFFALSE 10799
// ComMoveToArea ( un , BuildUpEscape ) ;
10785: LD_VAR 0 2
10789: PPUSH
10790: LD_EXP 1
10794: PPUSH
10795: CALL_OW 113
10799: GO 10735
10801: POP
10802: POP
10803: GO 10649
10805: POP
10806: POP
// enable ;
10807: ENABLE
// end ;
10808: PPOPN 2
10810: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
10811: LD_EXP 29
10815: IFFALSE 10865
10817: GO 10819
10819: DISABLE
10820: LD_INT 0
10822: PPUSH
// begin tmp := mpBuildUpTime ;
10823: LD_ADDR_VAR 0 1
10827: PUSH
10828: LD_EXP 29
10832: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10833: LD_INT 35
10835: PPUSH
10836: CALL_OW 67
// tmp := tmp - 0 0$1 ;
10840: LD_ADDR_VAR 0 1
10844: PUSH
10845: LD_VAR 0 1
10849: PUSH
10850: LD_INT 35
10852: MINUS
10853: ST_TO_ADDR
// until not tmp ;
10854: LD_VAR 0 1
10858: NOT
10859: IFFALSE 10833
// EndBuildUp ;
10861: CALL 10442 0 0
// end ;
10865: PPOPN 1
10867: END
// every 0 0$1 trigger mpActive marked mpWin do
10868: LD_INT 100
10870: IFFALSE 10904
10872: GO 10874
10874: DISABLE
// begin if IAmServer then
10875: CALL_OW 518
10879: IFFALSE 10888
// wait ( 0 0$3 ) ;
10881: LD_INT 105
10883: PPUSH
10884: CALL_OW 67
// if Multiplayer then
10888: LD_OWVAR 4
10892: IFFALSE 10900
// YouWinInMultiplayer else
10894: CALL_OW 106
10898: GO 10904
// YouWin ;
10900: CALL_OW 103
// end ;
10904: END
// export function HasPowerByGameType ( gameType , side ) ; begin
10905: LD_INT 0
10907: PPUSH
// result := false ;
10908: LD_ADDR_VAR 0 3
10912: PUSH
10913: LD_INT 0
10915: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
10916: LD_VAR 0 1
10920: PUSH
10921: LD_INT 1
10923: DOUBLE
10924: EQUAL
10925: IFTRUE 10947
10927: LD_INT 5
10929: DOUBLE
10930: EQUAL
10931: IFTRUE 10947
10933: LD_INT 6
10935: DOUBLE
10936: EQUAL
10937: IFTRUE 10947
10939: LD_INT 7
10941: DOUBLE
10942: EQUAL
10943: IFTRUE 10947
10945: GO 11020
10947: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
10948: LD_ADDR_VAR 0 3
10952: PUSH
10953: LD_INT 22
10955: PUSH
10956: LD_VAR 0 2
10960: PUSH
10961: EMPTY
10962: LIST
10963: LIST
10964: PUSH
10965: LD_INT 2
10967: PUSH
10968: LD_INT 21
10970: PUSH
10971: LD_INT 1
10973: PUSH
10974: EMPTY
10975: LIST
10976: LIST
10977: PUSH
10978: LD_INT 33
10980: PUSH
10981: LD_INT 3
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: PUSH
10988: LD_INT 33
10990: PUSH
10991: LD_INT 5
10993: PUSH
10994: EMPTY
10995: LIST
10996: LIST
10997: PUSH
10998: EMPTY
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: PPUSH
11008: CALL_OW 69
11012: PPUSH
11013: CALL 25629 0 1
11017: ST_TO_ADDR
// end ; GameTypeSurvival :
11018: GO 11259
11020: LD_INT 2
11022: DOUBLE
11023: EQUAL
11024: IFTRUE 11028
11026: GO 11158
11028: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
11029: LD_ADDR_VAR 0 3
11033: PUSH
11034: LD_INT 22
11036: PUSH
11037: LD_VAR 0 2
11041: PUSH
11042: EMPTY
11043: LIST
11044: LIST
11045: PUSH
11046: LD_INT 2
11048: PUSH
11049: LD_INT 30
11051: PUSH
11052: LD_INT 0
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: PUSH
11059: LD_INT 30
11061: PUSH
11062: LD_INT 1
11064: PUSH
11065: EMPTY
11066: LIST
11067: LIST
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: LIST
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PPUSH
11078: CALL_OW 69
11082: PPUSH
11083: CALL 25629 0 1
11087: IFFALSE 11155
11089: PUSH
11090: LD_INT 22
11092: PUSH
11093: LD_VAR 0 2
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: PUSH
11102: LD_INT 2
11104: PUSH
11105: LD_INT 21
11107: PUSH
11108: LD_INT 1
11110: PUSH
11111: EMPTY
11112: LIST
11113: LIST
11114: PUSH
11115: LD_INT 33
11117: PUSH
11118: LD_INT 3
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: PUSH
11125: LD_INT 33
11127: PUSH
11128: LD_INT 5
11130: PUSH
11131: EMPTY
11132: LIST
11133: LIST
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: PUSH
11141: EMPTY
11142: LIST
11143: LIST
11144: PPUSH
11145: CALL_OW 69
11149: PPUSH
11150: CALL 25629 0 1
11154: AND
11155: ST_TO_ADDR
// end ; GameTypeKing :
11156: GO 11259
11158: LD_INT 3
11160: DOUBLE
11161: EQUAL
11162: IFTRUE 11166
11164: GO 11258
11166: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
11167: LD_ADDR_VAR 0 3
11171: PUSH
11172: LD_INT 22
11174: PUSH
11175: LD_VAR 0 2
11179: PUSH
11180: EMPTY
11181: LIST
11182: LIST
11183: PUSH
11184: LD_INT 2
11186: PUSH
11187: LD_INT 21
11189: PUSH
11190: LD_INT 1
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: PUSH
11197: LD_INT 33
11199: PUSH
11200: LD_INT 3
11202: PUSH
11203: EMPTY
11204: LIST
11205: LIST
11206: PUSH
11207: LD_INT 33
11209: PUSH
11210: LD_INT 5
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PPUSH
11227: CALL_OW 69
11231: PPUSH
11232: CALL 25629 0 1
11236: IFFALSE 11255
11238: PUSH
11239: LD_VAR 0 2
11243: PPUSH
11244: CALL 14764 0 1
11248: PUSH
11249: LD_EXP 44
11253: LESS
11254: AND
11255: ST_TO_ADDR
// end ; end ;
11256: GO 11259
11258: POP
// end ;
11259: LD_VAR 0 3
11263: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
11264: LD_INT 100
11266: IFFALSE 11496
11268: GO 11270
11270: DISABLE
11271: LD_INT 0
11273: PPUSH
11274: PPUSH
// begin if Multiplayer then
11275: LD_OWVAR 4
11279: IFFALSE 11287
// SetPlayerSpectator ( ) else
11281: CALL_OW 572
11285: GO 11296
// FogOff ( your_side ) ;
11287: LD_OWVAR 2
11291: PPUSH
11292: CALL_OW 344
// repeat gameIsOn := false ;
11296: LD_ADDR_VAR 0 1
11300: PUSH
11301: LD_INT 0
11303: ST_TO_ADDR
// for i := 1 to 8 do
11304: LD_ADDR_VAR 0 2
11308: PUSH
11309: DOUBLE
11310: LD_INT 1
11312: DEC
11313: ST_TO_ADDR
11314: LD_INT 8
11316: PUSH
11317: FOR_TO
11318: IFFALSE 11448
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
11320: LD_EXP 16
11324: PUSH
11325: LD_VAR 0 2
11329: ARRAY
11330: IFFALSE 11343
11332: PUSH
11333: LD_VAR 0 2
11337: PPUSH
11338: CALL_OW 108
11342: AND
11343: IFFALSE 11357
11345: PUSH
11346: LD_VAR 0 2
11350: PUSH
11351: LD_OWVAR 2
11355: NONEQUAL
11356: AND
11357: IFFALSE 11446
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
11359: LD_EXP 17
11363: PUSH
11364: LD_VAR 0 2
11368: ARRAY
11369: NOT
11370: IFTRUE 11418
11372: PUSH
11373: LD_EXP 17
11377: PUSH
11378: LD_VAR 0 2
11382: ARRAY
11383: PUSH
11384: LD_EXP 17
11388: PUSH
11389: LD_OWVAR 2
11393: ARRAY
11394: NONEQUAL
11395: IFFALSE 11417
11397: PUSH
11398: LD_OWVAR 2
11402: PPUSH
11403: LD_VAR 0 2
11407: PPUSH
11408: CALL_OW 81
11412: PUSH
11413: LD_INT 1
11415: NONEQUAL
11416: AND
11417: OR
11418: IFFALSE 11446
// if HasPowerByGameType ( mpGameType , i ) then
11420: LD_EXP 12
11424: PPUSH
11425: LD_VAR 0 2
11429: PPUSH
11430: CALL 10905 0 2
11434: IFFALSE 11446
// begin gameIsOn := true ;
11436: LD_ADDR_VAR 0 1
11440: PUSH
11441: LD_INT 1
11443: ST_TO_ADDR
// break ;
11444: GO 11448
// end ;
11446: GO 11317
11448: POP
11449: POP
// wait ( 100 ) ;
11450: LD_INT 100
11452: PPUSH
11453: CALL_OW 67
// until not gameIsOn ;
11457: LD_VAR 0 1
11461: NOT
11462: IFFALSE 11296
// if IAmServer then
11464: CALL_OW 518
11468: IFFALSE 11477
// wait ( 0 0$3 ) ;
11470: LD_INT 105
11472: PPUSH
11473: CALL_OW 67
// if Multiplayer then
11477: LD_OWVAR 4
11481: IFFALSE 11489
// YouLostInMultiplayer else
11483: CALL_OW 107
11487: GO 11496
// YouLost (  ) ;
11489: LD_STRING 
11491: PPUSH
11492: CALL_OW 104
// end ;
11496: PPOPN 2
11498: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
11499: LD_EXP 42
11503: IFFALSE 11887
11505: GO 11507
11507: DISABLE
11508: LD_INT 0
11510: PPUSH
11511: PPUSH
11512: PPUSH
11513: PPUSH
11514: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
11515: LD_ADDR_VAR 0 5
11519: PUSH
11520: LD_INT 1
11522: PUSH
11523: LD_INT 2
11525: PUSH
11526: LD_INT 3
11528: PUSH
11529: LD_INT 4
11531: PUSH
11532: LD_INT 5
11534: PUSH
11535: LD_INT 6
11537: PUSH
11538: LD_INT 7
11540: PUSH
11541: LD_INT 8
11543: PUSH
11544: EMPTY
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
11554: LD_INT 350
11556: PPUSH
11557: CALL_OW 67
// for i := 1 to 8 do
11561: LD_ADDR_VAR 0 1
11565: PUSH
11566: DOUBLE
11567: LD_INT 1
11569: DEC
11570: ST_TO_ADDR
11571: LD_INT 8
11573: PUSH
11574: FOR_TO
11575: IFFALSE 11857
// begin j := sides [ i ] ;
11577: LD_ADDR_VAR 0 2
11581: PUSH
11582: LD_VAR 0 5
11586: PUSH
11587: LD_VAR 0 1
11591: ARRAY
11592: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
11593: LD_EXP 49
11597: PUSH
11598: LD_VAR 0 2
11602: ARRAY
11603: PPUSH
11604: CALL 25629 0 1
11608: IFFALSE 11621
11610: PUSH
11611: LD_VAR 0 2
11615: PPUSH
11616: CALL_OW 108
11620: AND
11621: IFFALSE 11639
11623: PUSH
11624: LD_EXP 12
11628: PPUSH
11629: LD_VAR 0 2
11633: PPUSH
11634: CALL 10905 0 2
11638: AND
11639: IFFALSE 11855
// begin wait ( mpRespawn div 2 ) ;
11641: LD_EXP 42
11645: PUSH
11646: LD_INT 2
11648: DIV
11649: PPUSH
11650: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11654: LD_ADDR_VAR 0 3
11658: PUSH
11659: LD_INT 22
11661: PUSH
11662: LD_VAR 0 2
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: PUSH
11671: LD_INT 50
11673: PUSH
11674: EMPTY
11675: LIST
11676: PUSH
11677: LD_INT 2
11679: PUSH
11680: LD_INT 30
11682: PUSH
11683: LD_INT 0
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: PUSH
11690: LD_INT 30
11692: PUSH
11693: LD_INT 1
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: LIST
11704: PUSH
11705: EMPTY
11706: LIST
11707: LIST
11708: LIST
11709: PPUSH
11710: CALL_OW 69
11714: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
11715: LD_VAR 0 3
11719: NOT
11720: IFTRUE 11734
11722: PUSH
11723: LD_VAR 0 2
11727: PPUSH
11728: CALL_OW 108
11732: NOT
11733: OR
11734: IFTRUE 11753
11736: PUSH
11737: LD_EXP 12
11741: PPUSH
11742: LD_VAR 0 2
11746: PPUSH
11747: CALL 10905 0 2
11751: NOT
11752: OR
11753: IFFALSE 11757
// continue ;
11755: GO 11574
// spawn := tmp [ 1 ] ;
11757: LD_ADDR_VAR 0 4
11761: PUSH
11762: LD_VAR 0 3
11766: PUSH
11767: LD_INT 1
11769: ARRAY
11770: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
11771: LD_EXP 49
11775: PUSH
11776: LD_VAR 0 2
11780: ARRAY
11781: PUSH
11782: LD_INT 1
11784: ARRAY
11785: PPUSH
11786: LD_VAR 0 4
11790: PPUSH
11791: CALL_OW 250
11795: PPUSH
11796: LD_VAR 0 4
11800: PPUSH
11801: CALL_OW 251
11805: PPUSH
11806: LD_INT 32
11808: PPUSH
11809: LD_INT 1
11811: PPUSH
11812: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
11816: LD_ADDR_EXP 49
11820: PUSH
11821: LD_EXP 49
11825: PPUSH
11826: LD_VAR 0 2
11830: PPUSH
11831: LD_EXP 49
11835: PUSH
11836: LD_VAR 0 2
11840: ARRAY
11841: PPUSH
11842: LD_INT 1
11844: PPUSH
11845: CALL_OW 3
11849: PPUSH
11850: CALL_OW 1
11854: ST_TO_ADDR
// end ; end ;
11855: GO 11574
11857: POP
11858: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
11859: LD_ADDR_VAR 0 5
11863: PUSH
11864: LD_VAR 0 5
11868: PPUSH
11869: LD_INT 1
11871: PPUSH
11872: LD_INT 8
11874: PPUSH
11875: LD_INT 1
11877: PPUSH
11878: CALL 27955 0 4
11882: ST_TO_ADDR
// until false ;
11883: LD_INT 0
11885: IFFALSE 11554
// end ;
11887: PPOPN 5
11889: END
// every 0 0$1 marked mpActive do
11890: GO 11892
11892: DISABLE
// begin enable ;
11893: ENABLE
// if not mpDisplayStrings then
11894: LD_EXP 47
11898: NOT
11899: IFFALSE 11910
// begin display_strings := [ ] ;
11901: LD_ADDR_OWVAR 47
11905: PUSH
11906: EMPTY
11907: ST_TO_ADDR
// exit ;
11908: GO 11920
// end ; display_strings := mpDisplayStrings ;
11910: LD_ADDR_OWVAR 47
11914: PUSH
11915: LD_EXP 47
11919: ST_TO_ADDR
// end ; end_of_file
11920: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
11921: LD_INT 0
11923: PPUSH
11924: PPUSH
11925: PPUSH
11926: PPUSH
11927: PPUSH
11928: PPUSH
11929: PPUSH
11930: PPUSH
11931: PPUSH
// if GetType ( un ) = unit_vehicle then
11932: LD_VAR 0 1
11936: PPUSH
11937: CALL_OW 247
11941: PUSH
11942: LD_INT 2
11944: EQUAL
11945: IFFALSE 11949
// exit ;
11947: GO 12623
// side := GetSide ( un ) ;
11949: LD_ADDR_VAR 0 9
11953: PUSH
11954: LD_VAR 0 1
11958: PPUSH
11959: CALL_OW 255
11963: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
11964: LD_EXP 12
11968: PUSH
11969: LD_INT 2
11971: EQUAL
11972: IFFALSE 12066
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
11974: LD_VAR 0 1
11978: PPUSH
11979: CALL_OW 266
11983: PUSH
11984: LD_INT 0
11986: PUSH
11987: LD_INT 1
11989: PUSH
11990: EMPTY
11991: LIST
11992: LIST
11993: IN
11994: IFFALSE 12066
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
11996: LD_ADDR_VAR 0 3
12000: PUSH
12001: LD_INT 22
12003: PUSH
12004: LD_VAR 0 9
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: PUSH
12013: LD_INT 2
12015: PUSH
12016: LD_INT 21
12018: PUSH
12019: LD_INT 1
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: PUSH
12026: LD_INT 33
12028: PUSH
12029: LD_INT 3
12031: PUSH
12032: EMPTY
12033: LIST
12034: LIST
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: LIST
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: PPUSH
12045: CALL_OW 69
12049: PUSH
12050: FOR_IN
12051: IFFALSE 12064
// KillUnit ( i ) ;
12053: LD_VAR 0 3
12057: PPUSH
12058: CALL_OW 66
12062: GO 12050
12064: POP
12065: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
12066: LD_VAR 0 1
12070: PPUSH
12071: CALL_OW 257
12075: PUSH
12076: LD_INT 12
12078: PUSH
12079: LD_INT 17
12081: PUSH
12082: LD_INT 15
12084: PUSH
12085: LD_INT 16
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: IN
12094: IFTRUE 12111
12096: PUSH
12097: LD_VAR 0 1
12101: PPUSH
12102: CALL_OW 263
12106: PUSH
12107: LD_INT 5
12109: EQUAL
12110: OR
12111: IFFALSE 12348
// begin tag := 0 ;
12113: LD_ADDR_VAR 0 5
12117: PUSH
12118: LD_INT 0
12120: ST_TO_ADDR
// for i := 1 to 8 do
12121: LD_ADDR_VAR 0 3
12125: PUSH
12126: DOUBLE
12127: LD_INT 1
12129: DEC
12130: ST_TO_ADDR
12131: LD_INT 8
12133: PUSH
12134: FOR_TO
12135: IFFALSE 12169
// if un in mpApePosIndex [ i ] then
12137: LD_VAR 0 1
12141: PUSH
12142: LD_EXP 41
12146: PUSH
12147: LD_VAR 0 3
12151: ARRAY
12152: IN
12153: IFFALSE 12167
// begin tag := i ;
12155: LD_ADDR_VAR 0 5
12159: PUSH
12160: LD_VAR 0 3
12164: ST_TO_ADDR
// break ;
12165: GO 12169
// end ;
12167: GO 12134
12169: POP
12170: POP
// if not tag then
12171: LD_VAR 0 5
12175: NOT
12176: IFFALSE 12180
// exit ;
12178: GO 12623
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
12180: LD_ADDR_VAR 0 7
12184: PUSH
12185: LD_EXP 40
12189: PUSH
12190: LD_EXP 16
12194: PUSH
12195: LD_VAR 0 5
12199: ARRAY
12200: ARRAY
12201: ST_TO_ADDR
// if not area then
12202: LD_VAR 0 7
12206: NOT
12207: IFFALSE 12211
// exit ;
12209: GO 12623
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
12211: LD_INT 14700
12213: PUSH
12214: LD_VAR 0 1
12218: PUSH
12219: LD_INT 5
12221: MOD
12222: PUSH
12223: LD_INT 1
12225: PLUS
12226: PUSH
12227: LD_INT 700
12229: MUL
12230: PLUS
12231: PPUSH
12232: CALL_OW 67
// repeat wait ( 10 ) ;
12236: LD_INT 10
12238: PPUSH
12239: CALL_OW 67
// until not mpBlockRespThread ;
12243: LD_EXP 55
12247: NOT
12248: IFFALSE 12236
// mpBlockRespThread := true ;
12250: LD_ADDR_EXP 55
12254: PUSH
12255: LD_INT 1
12257: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
12258: LD_INT 0
12260: PPUSH
12261: CALL 57722 0 1
// ape := CreateHuman ;
12265: LD_ADDR_VAR 0 4
12269: PUSH
12270: CALL_OW 44
12274: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
12275: LD_ADDR_EXP 41
12279: PUSH
12280: LD_EXP 41
12284: PPUSH
12285: LD_VAR 0 5
12289: PPUSH
12290: LD_EXP 41
12294: PUSH
12295: LD_VAR 0 5
12299: ARRAY
12300: PPUSH
12301: LD_VAR 0 4
12305: PPUSH
12306: CALL 61595 0 2
12310: PPUSH
12311: CALL_OW 1
12315: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
12316: LD_VAR 0 4
12320: PPUSH
12321: LD_VAR 0 7
12325: PPUSH
12326: LD_INT 0
12328: PPUSH
12329: CALL_OW 49
// wait ( 10 ) ;
12333: LD_INT 10
12335: PPUSH
12336: CALL_OW 67
// mpBlockRespThread := false ;
12340: LD_ADDR_EXP 55
12344: PUSH
12345: LD_INT 0
12347: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
12348: LD_VAR 0 1
12352: PPUSH
12353: CALL_OW 247
12357: PUSH
12358: LD_INT 1
12360: EQUAL
12361: IFFALSE 12378
12363: PUSH
12364: LD_VAR 0 1
12368: PPUSH
12369: CALL_OW 248
12373: PUSH
12374: LD_INT 0
12376: GREATER
12377: AND
12378: IFFALSE 12623
// begin if not mpRespawn then
12380: LD_EXP 42
12384: NOT
12385: IFFALSE 12389
// exit ;
12387: GO 12623
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
12389: LD_VAR 0 9
12393: PPUSH
12394: CALL_OW 108
12398: NOT
12399: IFFALSE 12418
12401: PUSH
12402: LD_EXP 12
12406: PPUSH
12407: LD_VAR 0 9
12411: PPUSH
12412: CALL 10905 0 2
12416: NOT
12417: AND
12418: IFFALSE 12422
// exit ;
12420: GO 12623
// side := GetSide ( un ) ;
12422: LD_ADDR_VAR 0 9
12426: PUSH
12427: LD_VAR 0 1
12431: PPUSH
12432: CALL_OW 255
12436: ST_TO_ADDR
// nation := GetNation ( un ) ;
12437: LD_ADDR_VAR 0 8
12441: PUSH
12442: LD_VAR 0 1
12446: PPUSH
12447: CALL_OW 248
12451: ST_TO_ADDR
// class := GetClass ( un ) ;
12452: LD_ADDR_VAR 0 6
12456: PUSH
12457: LD_VAR 0 1
12461: PPUSH
12462: CALL_OW 257
12466: ST_TO_ADDR
// if class > 4 then
12467: LD_VAR 0 6
12471: PUSH
12472: LD_INT 4
12474: GREATER
12475: IFFALSE 12485
// class := 1 ;
12477: LD_ADDR_VAR 0 6
12481: PUSH
12482: LD_INT 1
12484: ST_TO_ADDR
// repeat wait ( 10 ) ;
12485: LD_INT 10
12487: PPUSH
12488: CALL_OW 67
// until not mpBlockRespThread ;
12492: LD_EXP 55
12496: NOT
12497: IFFALSE 12485
// mpBlockRespThread := true ;
12499: LD_ADDR_EXP 55
12503: PUSH
12504: LD_INT 1
12506: ST_TO_ADDR
// uc_side := side ;
12507: LD_ADDR_OWVAR 20
12511: PUSH
12512: LD_VAR 0 9
12516: ST_TO_ADDR
// uc_nation := nation ;
12517: LD_ADDR_OWVAR 21
12521: PUSH
12522: LD_VAR 0 8
12526: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
12527: LD_INT 0
12529: PPUSH
12530: LD_VAR 0 6
12534: PPUSH
12535: LD_INT 2
12537: PPUSH
12538: CALL_OW 380
// un := CreateHuman ;
12542: LD_ADDR_VAR 0 1
12546: PUSH
12547: CALL_OW 44
12551: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
12552: LD_ADDR_EXP 49
12556: PUSH
12557: LD_EXP 49
12561: PPUSH
12562: LD_VAR 0 9
12566: PPUSH
12567: LD_EXP 49
12571: PUSH
12572: LD_VAR 0 9
12576: ARRAY
12577: PPUSH
12578: LD_EXP 49
12582: PUSH
12583: LD_VAR 0 9
12587: ARRAY
12588: PUSH
12589: LD_INT 1
12591: PLUS
12592: PPUSH
12593: LD_VAR 0 1
12597: PPUSH
12598: CALL_OW 1
12602: PPUSH
12603: CALL_OW 1
12607: ST_TO_ADDR
// wait ( 10 ) ;
12608: LD_INT 10
12610: PPUSH
12611: CALL_OW 67
// mpBlockRespThread := false ;
12615: LD_ADDR_EXP 55
12619: PUSH
12620: LD_INT 0
12622: ST_TO_ADDR
// end ; end ;
12623: LD_VAR 0 2
12627: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
12628: LD_INT 0
12630: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
12631: LD_VAR 0 1
12635: PPUSH
12636: CALL_OW 266
12640: PUSH
12641: LD_INT 0
12643: PUSH
12644: LD_INT 1
12646: PUSH
12647: EMPTY
12648: LIST
12649: LIST
12650: IN
12651: IFFALSE 12676
// SetBName ( building , @ & GetSide ( building ) ) ;
12653: LD_VAR 0 1
12657: PPUSH
12658: LD_STRING @
12660: PUSH
12661: LD_VAR 0 1
12665: PPUSH
12666: CALL_OW 255
12670: STR
12671: PPUSH
12672: CALL_OW 500
// end ;
12676: LD_VAR 0 2
12680: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
12681: LD_INT 0
12683: PPUSH
12684: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
12685: LD_EXP 12
12689: PUSH
12690: LD_INT 2
12692: EQUAL
12693: IFFALSE 12717
12695: PUSH
12696: LD_VAR 0 1
12700: PPUSH
12701: CALL_OW 266
12705: PUSH
12706: LD_INT 0
12708: PUSH
12709: LD_INT 1
12711: PUSH
12712: EMPTY
12713: LIST
12714: LIST
12715: IN
12716: AND
12717: IFFALSE 12796
// begin SetSide ( building , oldSide ) ;
12719: LD_VAR 0 1
12723: PPUSH
12724: LD_VAR 0 2
12728: PPUSH
12729: CALL_OW 235
// KillUnit ( building ) ;
12733: LD_VAR 0 1
12737: PPUSH
12738: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
12742: LD_ADDR_VAR 0 5
12746: PUSH
12747: LD_INT 22
12749: PUSH
12750: LD_VAR 0 2
12754: PUSH
12755: EMPTY
12756: LIST
12757: LIST
12758: PUSH
12759: LD_INT 21
12761: PUSH
12762: LD_INT 1
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: PPUSH
12773: CALL_OW 69
12777: PUSH
12778: FOR_IN
12779: IFFALSE 12792
// KillUnit ( i ) ;
12781: LD_VAR 0 5
12785: PPUSH
12786: CALL_OW 66
12790: GO 12778
12792: POP
12793: POP
// exit ;
12794: GO 12841
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
12796: LD_VAR 0 1
12800: PPUSH
12801: CALL_OW 266
12805: PUSH
12806: LD_INT 0
12808: PUSH
12809: LD_INT 1
12811: PUSH
12812: EMPTY
12813: LIST
12814: LIST
12815: IN
12816: IFFALSE 12841
// SetBName ( building , @ & GetSide ( building ) ) ;
12818: LD_VAR 0 1
12822: PPUSH
12823: LD_STRING @
12825: PUSH
12826: LD_VAR 0 1
12830: PPUSH
12831: CALL_OW 255
12835: STR
12836: PPUSH
12837: CALL_OW 500
// end ;
12841: LD_VAR 0 4
12845: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
12846: LD_INT 0
12848: PPUSH
12849: PPUSH
12850: PPUSH
// if mpGameType <> GameTypeFamine then
12851: LD_EXP 12
12855: PUSH
12856: LD_INT 5
12858: NONEQUAL
12859: IFFALSE 12863
// exit ;
12861: GO 13078
// for i := 1 to mpGlobalOilDeposits do
12863: LD_ADDR_VAR 0 6
12867: PUSH
12868: DOUBLE
12869: LD_INT 1
12871: DEC
12872: ST_TO_ADDR
12873: LD_EXP 50
12877: PUSH
12878: FOR_TO
12879: IFFALSE 13076
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
12881: LD_EXP 50
12885: PUSH
12886: LD_VAR 0 6
12890: ARRAY
12891: PUSH
12892: LD_INT 1
12894: ARRAY
12895: PPUSH
12896: LD_EXP 50
12900: PUSH
12901: LD_VAR 0 6
12905: ARRAY
12906: PUSH
12907: LD_INT 2
12909: ARRAY
12910: PPUSH
12911: CALL_OW 428
12915: PUSH
12916: LD_VAR 0 1
12920: EQUAL
12921: IFFALSE 13074
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
12923: LD_ADDR_VAR 0 7
12927: PUSH
12928: LD_EXP 50
12932: PUSH
12933: LD_VAR 0 6
12937: ARRAY
12938: PUSH
12939: LD_INT 3
12941: ARRAY
12942: ST_TO_ADDR
// value := value - amount ;
12943: LD_ADDR_VAR 0 7
12947: PUSH
12948: LD_VAR 0 7
12952: PUSH
12953: LD_VAR 0 4
12957: MINUS
12958: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
12959: LD_ADDR_EXP 50
12963: PUSH
12964: LD_EXP 50
12968: PPUSH
12969: LD_VAR 0 6
12973: PPUSH
12974: LD_EXP 50
12978: PUSH
12979: LD_VAR 0 6
12983: ARRAY
12984: PPUSH
12985: LD_INT 3
12987: PPUSH
12988: LD_VAR 0 7
12992: PPUSH
12993: CALL_OW 1
12997: PPUSH
12998: CALL_OW 1
13002: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
13003: LD_VAR 0 1
13007: PPUSH
13008: LD_VAR 0 7
13012: PPUSH
13013: CALL_OW 505
// if value <= 0 then
13017: LD_VAR 0 7
13021: PUSH
13022: LD_INT 0
13024: LESSEQUAL
13025: IFFALSE 13074
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
13027: LD_EXP 50
13031: PUSH
13032: LD_VAR 0 6
13036: ARRAY
13037: PUSH
13038: LD_INT 1
13040: ARRAY
13041: PPUSH
13042: LD_EXP 50
13046: PUSH
13047: LD_VAR 0 6
13051: ARRAY
13052: PUSH
13053: LD_INT 2
13055: ARRAY
13056: PPUSH
13057: CALL_OW 63
// KillUnit ( building ) ;
13061: LD_VAR 0 1
13065: PPUSH
13066: CALL_OW 66
// exit ;
13070: POP
13071: POP
13072: GO 13078
// end ; end ; end ;
13074: GO 12878
13076: POP
13077: POP
// end ;
13078: LD_VAR 0 5
13082: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
13083: LD_INT 0
13085: PPUSH
13086: PPUSH
13087: PPUSH
// if mpGameType <> GameTypeFamine then
13088: LD_EXP 12
13092: PUSH
13093: LD_INT 5
13095: NONEQUAL
13096: IFFALSE 13100
// exit ;
13098: GO 13315
// for i := 1 to mpGlobalSibDeposits do
13100: LD_ADDR_VAR 0 6
13104: PUSH
13105: DOUBLE
13106: LD_INT 1
13108: DEC
13109: ST_TO_ADDR
13110: LD_EXP 51
13114: PUSH
13115: FOR_TO
13116: IFFALSE 13313
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
13118: LD_EXP 51
13122: PUSH
13123: LD_VAR 0 6
13127: ARRAY
13128: PUSH
13129: LD_INT 1
13131: ARRAY
13132: PPUSH
13133: LD_EXP 51
13137: PUSH
13138: LD_VAR 0 6
13142: ARRAY
13143: PUSH
13144: LD_INT 2
13146: ARRAY
13147: PPUSH
13148: CALL_OW 428
13152: PUSH
13153: LD_VAR 0 1
13157: EQUAL
13158: IFFALSE 13311
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
13160: LD_ADDR_VAR 0 7
13164: PUSH
13165: LD_EXP 51
13169: PUSH
13170: LD_VAR 0 6
13174: ARRAY
13175: PUSH
13176: LD_INT 3
13178: ARRAY
13179: ST_TO_ADDR
// value := value - amount ;
13180: LD_ADDR_VAR 0 7
13184: PUSH
13185: LD_VAR 0 7
13189: PUSH
13190: LD_VAR 0 4
13194: MINUS
13195: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
13196: LD_ADDR_EXP 51
13200: PUSH
13201: LD_EXP 51
13205: PPUSH
13206: LD_VAR 0 6
13210: PPUSH
13211: LD_EXP 51
13215: PUSH
13216: LD_VAR 0 6
13220: ARRAY
13221: PPUSH
13222: LD_INT 3
13224: PPUSH
13225: LD_VAR 0 7
13229: PPUSH
13230: CALL_OW 1
13234: PPUSH
13235: CALL_OW 1
13239: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
13240: LD_VAR 0 1
13244: PPUSH
13245: LD_VAR 0 7
13249: PPUSH
13250: CALL_OW 505
// if value <= 0 then
13254: LD_VAR 0 7
13258: PUSH
13259: LD_INT 0
13261: LESSEQUAL
13262: IFFALSE 13311
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
13264: LD_EXP 51
13268: PUSH
13269: LD_VAR 0 6
13273: ARRAY
13274: PUSH
13275: LD_INT 1
13277: ARRAY
13278: PPUSH
13279: LD_EXP 51
13283: PUSH
13284: LD_VAR 0 6
13288: ARRAY
13289: PUSH
13290: LD_INT 2
13292: ARRAY
13293: PPUSH
13294: CALL_OW 63
// KillUnit ( building ) ;
13298: LD_VAR 0 1
13302: PPUSH
13303: CALL_OW 66
// exit ;
13307: POP
13308: POP
13309: GO 13315
// end ; end ; end ;
13311: GO 13115
13313: POP
13314: POP
// end ;
13315: LD_VAR 0 5
13319: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
13320: LD_INT 0
13322: PPUSH
13323: PPUSH
// side := GetSide ( factory ) ;
13324: LD_ADDR_VAR 0 7
13328: PUSH
13329: LD_VAR 0 1
13333: PPUSH
13334: CALL_OW 255
13338: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
13339: LD_VAR 0 5
13343: PUSH
13344: LD_INT 81
13346: EQUAL
13347: IFFALSE 13385
13349: PUSH
13350: LD_INT 22
13352: PUSH
13353: LD_VAR 0 7
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: PUSH
13362: LD_INT 34
13364: PUSH
13365: LD_INT 81
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PPUSH
13376: CALL_OW 69
13380: PUSH
13381: LD_INT 0
13383: GREATER
13384: AND
13385: IFFALSE 13418
// begin ComCancel ( factory ) ;
13387: LD_VAR 0 1
13391: PPUSH
13392: CALL_OW 127
// if side = your_side then
13396: LD_VAR 0 7
13400: PUSH
13401: LD_OWVAR 2
13405: EQUAL
13406: IFFALSE 13418
// HintSpec ( VehLimit , 2 ) ;
13408: LD_STRING VehLimit
13410: PPUSH
13411: LD_INT 2
13413: PPUSH
13414: CALL_OW 338
// end ; end ;
13418: LD_VAR 0 6
13422: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
13423: LD_INT 0
13425: PPUSH
13426: PPUSH
13427: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
13428: LD_VAR 0 1
13432: PPUSH
13433: CALL_OW 264
13437: PUSH
13438: LD_INT 81
13440: EQUAL
13441: IFFALSE 13458
13443: PUSH
13444: LD_VAR 0 1
13448: PPUSH
13449: CALL_OW 263
13453: PUSH
13454: LD_INT 1
13456: EQUAL
13457: AND
13458: IFFALSE 13738
// begin for i := 1 to Count ( minersList ) do
13460: LD_ADDR_VAR 0 6
13464: PUSH
13465: DOUBLE
13466: LD_INT 1
13468: DEC
13469: ST_TO_ADDR
13470: LD_EXP 70
13474: PPUSH
13475: CALL 25629 0 1
13479: PUSH
13480: FOR_TO
13481: IFFALSE 13599
// begin if minersList [ i ] = oldId then
13483: LD_EXP 70
13487: PUSH
13488: LD_VAR 0 6
13492: ARRAY
13493: PUSH
13494: LD_VAR 0 2
13498: EQUAL
13499: IFFALSE 13597
// begin for j := 1 to minerMinesList [ i ] do
13501: LD_ADDR_VAR 0 7
13505: PUSH
13506: DOUBLE
13507: LD_INT 1
13509: DEC
13510: ST_TO_ADDR
13511: LD_EXP 71
13515: PUSH
13516: LD_VAR 0 6
13520: ARRAY
13521: PUSH
13522: FOR_TO
13523: IFFALSE 13573
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
13525: LD_EXP 71
13529: PUSH
13530: LD_VAR 0 6
13534: ARRAY
13535: PUSH
13536: LD_VAR 0 7
13540: ARRAY
13541: PUSH
13542: LD_INT 1
13544: ARRAY
13545: PPUSH
13546: LD_EXP 71
13550: PUSH
13551: LD_VAR 0 6
13555: ARRAY
13556: PUSH
13557: LD_VAR 0 7
13561: ARRAY
13562: PUSH
13563: LD_INT 2
13565: ARRAY
13566: PPUSH
13567: CALL_OW 612
13571: GO 13522
13573: POP
13574: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
13575: LD_ADDR_EXP 71
13579: PUSH
13580: LD_EXP 71
13584: PPUSH
13585: LD_VAR 0 6
13589: PPUSH
13590: CALL_OW 3
13594: ST_TO_ADDR
// break ;
13595: GO 13599
// end ; end ;
13597: GO 13480
13599: POP
13600: POP
// minersList := minersList diff oldId ;
13601: LD_ADDR_EXP 70
13605: PUSH
13606: LD_EXP 70
13610: PUSH
13611: LD_VAR 0 2
13615: DIFF
13616: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
13617: LD_INT 22
13619: PUSH
13620: LD_VAR 0 4
13624: PPUSH
13625: CALL_OW 255
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: PUSH
13634: LD_INT 34
13636: PUSH
13637: LD_INT 81
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: PUSH
13644: EMPTY
13645: LIST
13646: LIST
13647: PPUSH
13648: CALL_OW 69
13652: PUSH
13653: LD_INT 1
13655: GREATER
13656: IFFALSE 13683
// begin ComExit ( unit ) ;
13658: LD_VAR 0 4
13662: PPUSH
13663: CALL 61993 0 1
// SetSide ( newId , oldSide ) ;
13667: LD_VAR 0 1
13671: PPUSH
13672: LD_VAR 0 3
13676: PPUSH
13677: CALL_OW 235
// exit ;
13681: GO 13738
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
13683: LD_ADDR_EXP 70
13687: PUSH
13688: LD_EXP 70
13692: PPUSH
13693: LD_EXP 70
13697: PUSH
13698: LD_INT 1
13700: PLUS
13701: PPUSH
13702: LD_VAR 0 1
13706: PPUSH
13707: CALL_OW 1
13711: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
13712: LD_ADDR_EXP 71
13716: PUSH
13717: LD_EXP 71
13721: PPUSH
13722: LD_EXP 71
13726: PUSH
13727: LD_INT 1
13729: PLUS
13730: PPUSH
13731: EMPTY
13732: PPUSH
13733: CALL_OW 1
13737: ST_TO_ADDR
// end ; end ; end_of_file
13738: LD_VAR 0 5
13742: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
13743: LD_EXP 48
13747: IFFALSE 14088
13749: GO 13751
13751: DISABLE
13752: LD_INT 0
13754: PPUSH
13755: PPUSH
13756: PPUSH
// begin mpKingPoints := [ ] ;
13757: LD_ADDR_EXP 58
13761: PUSH
13762: EMPTY
13763: ST_TO_ADDR
// if mpTeamGame then
13764: LD_EXP 20
13768: IFFALSE 13822
// begin for i := 1 to Count ( mpTeams ) do
13770: LD_ADDR_VAR 0 1
13774: PUSH
13775: DOUBLE
13776: LD_INT 1
13778: DEC
13779: ST_TO_ADDR
13780: LD_EXP 19
13784: PPUSH
13785: CALL 25629 0 1
13789: PUSH
13790: FOR_TO
13791: IFFALSE 13818
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
13793: LD_ADDR_EXP 58
13797: PUSH
13798: LD_EXP 58
13802: PPUSH
13803: LD_VAR 0 1
13807: PPUSH
13808: LD_INT 0
13810: PPUSH
13811: CALL_OW 1
13815: ST_TO_ADDR
13816: GO 13790
13818: POP
13819: POP
// end else
13820: GO 13865
// begin for i := 1 to 8 do
13822: LD_ADDR_VAR 0 1
13826: PUSH
13827: DOUBLE
13828: LD_INT 1
13830: DEC
13831: ST_TO_ADDR
13832: LD_INT 8
13834: PUSH
13835: FOR_TO
13836: IFFALSE 13863
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
13838: LD_ADDR_EXP 58
13842: PUSH
13843: LD_EXP 58
13847: PPUSH
13848: LD_VAR 0 1
13852: PPUSH
13853: LD_INT 0
13855: PPUSH
13856: CALL_OW 1
13860: ST_TO_ADDR
13861: GO 13835
13863: POP
13864: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
13865: LD_ADDR_VAR 0 3
13869: PUSH
13870: LD_EXP 2
13874: PPUSH
13875: LD_INT 0
13877: PPUSH
13878: CALL_OW 517
13882: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
13883: LD_ADDR_VAR 0 1
13887: PUSH
13888: DOUBLE
13889: LD_INT 1
13891: DEC
13892: ST_TO_ADDR
13893: LD_VAR 0 3
13897: PUSH
13898: LD_INT 1
13900: ARRAY
13901: PUSH
13902: FOR_TO
13903: IFFALSE 13970
// for j := 1 to 8 do
13905: LD_ADDR_VAR 0 2
13909: PUSH
13910: DOUBLE
13911: LD_INT 1
13913: DEC
13914: ST_TO_ADDR
13915: LD_INT 8
13917: PUSH
13918: FOR_TO
13919: IFFALSE 13966
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
13921: LD_VAR 0 3
13925: PUSH
13926: LD_INT 1
13928: ARRAY
13929: PUSH
13930: LD_VAR 0 1
13934: ARRAY
13935: PPUSH
13936: LD_VAR 0 3
13940: PUSH
13941: LD_INT 2
13943: ARRAY
13944: PUSH
13945: LD_VAR 0 1
13949: ARRAY
13950: PPUSH
13951: LD_VAR 0 2
13955: PPUSH
13956: LD_INT 12
13958: NEG
13959: PPUSH
13960: CALL_OW 330
13964: GO 13918
13966: POP
13967: POP
13968: GO 13902
13970: POP
13971: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
13972: LD_EXP 43
13976: PPUSH
13977: LD_INT 1
13979: PPUSH
13980: CALL_OW 424
// UpdateCounter ;
13984: CALL 14594 0 0
// repeat wait ( 0 0$1 ) ;
13988: LD_INT 35
13990: PPUSH
13991: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13995: LD_ADDR_VAR 0 3
13999: PUSH
14000: LD_EXP 43
14004: PPUSH
14005: LD_INT 3
14007: PUSH
14008: LD_INT 57
14010: PUSH
14011: EMPTY
14012: LIST
14013: PUSH
14014: EMPTY
14015: LIST
14016: LIST
14017: PUSH
14018: LD_INT 50
14020: PUSH
14021: EMPTY
14022: LIST
14023: PUSH
14024: LD_INT 2
14026: PUSH
14027: LD_INT 30
14029: PUSH
14030: LD_INT 0
14032: PUSH
14033: EMPTY
14034: LIST
14035: LIST
14036: PUSH
14037: LD_INT 30
14039: PUSH
14040: LD_INT 1
14042: PUSH
14043: EMPTY
14044: LIST
14045: LIST
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: LIST
14051: PUSH
14052: EMPTY
14053: LIST
14054: LIST
14055: LIST
14056: PPUSH
14057: CALL_OW 70
14061: ST_TO_ADDR
// if not tmp then
14062: LD_VAR 0 3
14066: NOT
14067: IFFALSE 14071
// continue ;
14069: GO 13988
// AddPoints ( tmp ) ;
14071: LD_VAR 0 3
14075: PPUSH
14076: CALL 14272 0 1
// UpdateCounter ;
14080: CALL 14594 0 0
// until false ;
14084: LD_INT 0
14086: IFFALSE 13988
// end ;
14088: PPOPN 3
14090: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
14091: LD_EXP 48
14095: IFFALSE 14103
14097: PUSH
14098: LD_EXP 46
14102: AND
14103: IFFALSE 14269
14105: GO 14107
14107: DISABLE
14108: LD_INT 0
14110: PPUSH
14111: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
14112: LD_ADDR_VAR 0 2
14116: PUSH
14117: LD_EXP 2
14121: PPUSH
14122: LD_INT 0
14124: PPUSH
14125: CALL_OW 517
14129: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
14130: LD_ADDR_VAR 0 1
14134: PUSH
14135: DOUBLE
14136: LD_INT 1
14138: DEC
14139: ST_TO_ADDR
14140: LD_VAR 0 2
14144: PUSH
14145: LD_INT 1
14147: ARRAY
14148: PUSH
14149: FOR_TO
14150: IFFALSE 14191
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
14152: LD_VAR 0 2
14156: PUSH
14157: LD_INT 1
14159: ARRAY
14160: PUSH
14161: LD_VAR 0 1
14165: ARRAY
14166: PPUSH
14167: LD_VAR 0 2
14171: PUSH
14172: LD_INT 2
14174: ARRAY
14175: PUSH
14176: LD_VAR 0 1
14180: ARRAY
14181: PPUSH
14182: LD_INT 125
14184: PPUSH
14185: CALL_OW 495
14189: GO 14149
14191: POP
14192: POP
// repeat wait ( mpEmissions ) ;
14193: LD_EXP 46
14197: PPUSH
14198: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
14202: LD_ADDR_VAR 0 1
14206: PUSH
14207: DOUBLE
14208: LD_INT 1
14210: DEC
14211: ST_TO_ADDR
14212: LD_VAR 0 2
14216: PUSH
14217: LD_INT 1
14219: ARRAY
14220: PUSH
14221: FOR_TO
14222: IFFALSE 14263
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
14224: LD_VAR 0 2
14228: PUSH
14229: LD_INT 1
14231: ARRAY
14232: PUSH
14233: LD_VAR 0 1
14237: ARRAY
14238: PPUSH
14239: LD_VAR 0 2
14243: PUSH
14244: LD_INT 2
14246: ARRAY
14247: PUSH
14248: LD_VAR 0 1
14252: ARRAY
14253: PPUSH
14254: LD_INT 15
14256: PPUSH
14257: CALL_OW 495
14261: GO 14221
14263: POP
14264: POP
// until false ;
14265: LD_INT 0
14267: IFFALSE 14193
// end ;
14269: PPOPN 2
14271: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
14272: LD_INT 0
14274: PPUSH
14275: PPUSH
14276: PPUSH
14277: PPUSH
14278: PPUSH
// if mpTeamGame then
14279: LD_EXP 20
14283: IFFALSE 14480
// begin first := depots [ 1 ] ;
14285: LD_ADDR_VAR 0 4
14289: PUSH
14290: LD_VAR 0 1
14294: PUSH
14295: LD_INT 1
14297: ARRAY
14298: ST_TO_ADDR
// side := GetSide ( first ) ;
14299: LD_ADDR_VAR 0 6
14303: PUSH
14304: LD_VAR 0 4
14308: PPUSH
14309: CALL_OW 255
14313: ST_TO_ADDR
// for i := 1 to mpTeams do
14314: LD_ADDR_VAR 0 3
14318: PUSH
14319: DOUBLE
14320: LD_INT 1
14322: DEC
14323: ST_TO_ADDR
14324: LD_EXP 19
14328: PUSH
14329: FOR_TO
14330: IFFALSE 14364
// if side in mpTeams [ i ] then
14332: LD_VAR 0 6
14336: PUSH
14337: LD_EXP 19
14341: PUSH
14342: LD_VAR 0 3
14346: ARRAY
14347: IN
14348: IFFALSE 14362
// begin team := i ;
14350: LD_ADDR_VAR 0 5
14354: PUSH
14355: LD_VAR 0 3
14359: ST_TO_ADDR
// break ;
14360: GO 14364
// end ;
14362: GO 14329
14364: POP
14365: POP
// if not team then
14366: LD_VAR 0 5
14370: NOT
14371: IFFALSE 14375
// exit ;
14373: GO 14589
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
14375: LD_EXP 43
14379: PPUSH
14380: LD_INT 81
14382: PUSH
14383: LD_VAR 0 6
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: PPUSH
14392: CALL_OW 70
14396: IFFALSE 14400
// exit ;
14398: GO 14589
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
14400: LD_ADDR_EXP 58
14404: PUSH
14405: LD_EXP 58
14409: PPUSH
14410: LD_VAR 0 5
14414: PPUSH
14415: LD_EXP 58
14419: PUSH
14420: LD_VAR 0 5
14424: ARRAY
14425: PUSH
14426: LD_INT 1
14428: PLUS
14429: PPUSH
14430: CALL_OW 1
14434: ST_TO_ADDR
// for i in mpTeams [ team ] do
14435: LD_ADDR_VAR 0 3
14439: PUSH
14440: LD_EXP 19
14444: PUSH
14445: LD_VAR 0 5
14449: ARRAY
14450: PUSH
14451: FOR_IN
14452: IFFALSE 14476
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
14454: LD_VAR 0 3
14458: PPUSH
14459: LD_EXP 58
14463: PUSH
14464: LD_VAR 0 5
14468: ARRAY
14469: PPUSH
14470: CALL_OW 506
14474: GO 14451
14476: POP
14477: POP
// end else
14478: GO 14589
// begin first := depots [ 1 ] ;
14480: LD_ADDR_VAR 0 4
14484: PUSH
14485: LD_VAR 0 1
14489: PUSH
14490: LD_INT 1
14492: ARRAY
14493: ST_TO_ADDR
// side := GetSide ( first ) ;
14494: LD_ADDR_VAR 0 6
14498: PUSH
14499: LD_VAR 0 4
14503: PPUSH
14504: CALL_OW 255
14508: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
14509: LD_EXP 43
14513: PPUSH
14514: LD_INT 81
14516: PUSH
14517: LD_VAR 0 6
14521: PUSH
14522: EMPTY
14523: LIST
14524: LIST
14525: PPUSH
14526: CALL_OW 70
14530: IFFALSE 14534
// exit ;
14532: GO 14589
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
14534: LD_ADDR_EXP 58
14538: PUSH
14539: LD_EXP 58
14543: PPUSH
14544: LD_VAR 0 6
14548: PPUSH
14549: LD_EXP 58
14553: PUSH
14554: LD_VAR 0 6
14558: ARRAY
14559: PUSH
14560: LD_INT 1
14562: PLUS
14563: PPUSH
14564: CALL_OW 1
14568: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
14569: LD_VAR 0 6
14573: PPUSH
14574: LD_EXP 58
14578: PUSH
14579: LD_VAR 0 6
14583: ARRAY
14584: PPUSH
14585: CALL_OW 506
// end ; end ;
14589: LD_VAR 0 2
14593: RET
// function UpdateCounter ; var i ; begin
14594: LD_INT 0
14596: PPUSH
14597: PPUSH
// result := [ ] ;
14598: LD_ADDR_VAR 0 1
14602: PUSH
14603: EMPTY
14604: ST_TO_ADDR
// if mpTeamGame then
14605: LD_EXP 20
14609: IFFALSE 14676
// begin for i := 1 to mpTeams do
14611: LD_ADDR_VAR 0 2
14615: PUSH
14616: DOUBLE
14617: LD_INT 1
14619: DEC
14620: ST_TO_ADDR
14621: LD_EXP 19
14625: PUSH
14626: FOR_TO
14627: IFFALSE 14672
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
14629: LD_ADDR_VAR 0 1
14633: PUSH
14634: LD_VAR 0 1
14638: PUSH
14639: LD_STRING #KingoftheHill-Team
14641: PUSH
14642: LD_VAR 0 2
14646: PUSH
14647: LD_EXP 58
14651: PUSH
14652: LD_VAR 0 2
14656: ARRAY
14657: PUSH
14658: LD_EXP 44
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: ADD
14669: ST_TO_ADDR
14670: GO 14626
14672: POP
14673: POP
// end else
14674: GO 14749
// begin for i := 1 to 8 do
14676: LD_ADDR_VAR 0 2
14680: PUSH
14681: DOUBLE
14682: LD_INT 1
14684: DEC
14685: ST_TO_ADDR
14686: LD_INT 8
14688: PUSH
14689: FOR_TO
14690: IFFALSE 14747
// if mpSidePositions [ i ] then
14692: LD_EXP 16
14696: PUSH
14697: LD_VAR 0 2
14701: ARRAY
14702: IFFALSE 14745
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
14704: LD_ADDR_VAR 0 1
14708: PUSH
14709: LD_VAR 0 1
14713: PUSH
14714: LD_STRING #KingoftheHill-Player
14716: PUSH
14717: LD_VAR 0 2
14721: PUSH
14722: LD_EXP 58
14726: PUSH
14727: LD_VAR 0 2
14731: ARRAY
14732: PUSH
14733: LD_EXP 44
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: ADD
14744: ST_TO_ADDR
14745: GO 14689
14747: POP
14748: POP
// end ; mpDisplayStrings := result ;
14749: LD_ADDR_EXP 47
14753: PUSH
14754: LD_VAR 0 1
14758: ST_TO_ADDR
// end ;
14759: LD_VAR 0 1
14763: RET
// export function HowMuchPointsKing ( side ) ; begin
14764: LD_INT 0
14766: PPUSH
// result := HowMuchPoints ( side ) ;
14767: LD_ADDR_VAR 0 2
14771: PUSH
14772: LD_VAR 0 1
14776: PPUSH
14777: CALL 14787 0 1
14781: ST_TO_ADDR
// end ;
14782: LD_VAR 0 2
14786: RET
// function HowMuchPoints ( side ) ; var i ; begin
14787: LD_INT 0
14789: PPUSH
14790: PPUSH
// if mpTeamGame then
14791: LD_EXP 20
14795: IFFALSE 14864
// begin for i := 1 to Count ( mpTeams ) do
14797: LD_ADDR_VAR 0 3
14801: PUSH
14802: DOUBLE
14803: LD_INT 1
14805: DEC
14806: ST_TO_ADDR
14807: LD_EXP 19
14811: PPUSH
14812: CALL 25629 0 1
14816: PUSH
14817: FOR_TO
14818: IFFALSE 14860
// begin if side in mpTeams [ i ] then
14820: LD_VAR 0 1
14824: PUSH
14825: LD_EXP 19
14829: PUSH
14830: LD_VAR 0 3
14834: ARRAY
14835: IN
14836: IFFALSE 14858
// begin result := mpKingPoints [ i ] ;
14838: LD_ADDR_VAR 0 2
14842: PUSH
14843: LD_EXP 58
14847: PUSH
14848: LD_VAR 0 3
14852: ARRAY
14853: ST_TO_ADDR
// exit ;
14854: POP
14855: POP
14856: GO 14880
// end ; end ;
14858: GO 14817
14860: POP
14861: POP
// end else
14862: GO 14880
// result := mpKingPoints [ side ] ;
14864: LD_ADDR_VAR 0 2
14868: PUSH
14869: LD_EXP 58
14873: PUSH
14874: LD_VAR 0 1
14878: ARRAY
14879: ST_TO_ADDR
// end ;
14880: LD_VAR 0 2
14884: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
14885: LD_EXP 48
14889: IFFALSE 14897
14891: PUSH
14892: CALL 15309 0 0
14896: AND
14897: IFFALSE 14905
14899: PUSH
14900: LD_OWVAR 4
14904: AND
14905: IFFALSE 15158
14907: GO 14909
14909: DISABLE
14910: LD_INT 0
14912: PPUSH
14913: PPUSH
// begin canWin := false ;
14914: LD_ADDR_VAR 0 2
14918: PUSH
14919: LD_INT 0
14921: ST_TO_ADDR
// if not HasPower ( your_side ) then
14922: LD_OWVAR 2
14926: PPUSH
14927: CALL 15351 0 1
14931: NOT
14932: IFFALSE 14943
// begin Multiplayer_Loose_Message ;
14934: CALL_OW 521
// enable ( mpLose ) ;
14938: LD_INT 102
14940: ENABLE_MARKED
// end else
14941: GO 15158
// begin if not EnemiesInGame then
14943: CALL 15161 0 0
14947: NOT
14948: IFFALSE 14955
// begin enable ( mpWin ) ;
14950: LD_INT 101
14952: ENABLE_MARKED
// exit ;
14953: GO 15158
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
14955: LD_ADDR_VAR 0 2
14959: PUSH
14960: LD_OWVAR 2
14964: PPUSH
14965: CALL 14787 0 1
14969: PUSH
14970: LD_EXP 44
14974: GREATEREQUAL
14975: IFFALSE 14988
14977: PUSH
14978: LD_OWVAR 2
14982: PPUSH
14983: CALL 15351 0 1
14987: AND
14988: ST_TO_ADDR
// for i := 1 to 8 do
14989: LD_ADDR_VAR 0 1
14993: PUSH
14994: DOUBLE
14995: LD_INT 1
14997: DEC
14998: ST_TO_ADDR
14999: LD_INT 8
15001: PUSH
15002: FOR_TO
15003: IFFALSE 15144
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
15005: LD_EXP 16
15009: PUSH
15010: LD_VAR 0 1
15014: ARRAY
15015: IFFALSE 15028
15017: PUSH
15018: LD_VAR 0 1
15022: PPUSH
15023: CALL_OW 108
15027: AND
15028: IFFALSE 15042
15030: PUSH
15031: LD_VAR 0 1
15035: PUSH
15036: LD_OWVAR 2
15040: NONEQUAL
15041: AND
15042: IFFALSE 15142
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
15044: LD_EXP 17
15048: PUSH
15049: LD_VAR 0 1
15053: ARRAY
15054: NOT
15055: IFTRUE 15103
15057: PUSH
15058: LD_EXP 17
15062: PUSH
15063: LD_VAR 0 1
15067: ARRAY
15068: PUSH
15069: LD_EXP 17
15073: PUSH
15074: LD_OWVAR 2
15078: ARRAY
15079: NONEQUAL
15080: IFFALSE 15102
15082: PUSH
15083: LD_OWVAR 2
15087: PPUSH
15088: LD_VAR 0 1
15092: PPUSH
15093: CALL_OW 81
15097: PUSH
15098: LD_INT 1
15100: NONEQUAL
15101: AND
15102: OR
15103: IFFALSE 15142
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
15105: LD_VAR 0 1
15109: PPUSH
15110: CALL 14787 0 1
15114: PUSH
15115: LD_EXP 44
15119: GREATEREQUAL
15120: IFFALSE 15133
15122: PUSH
15123: LD_VAR 0 1
15127: PPUSH
15128: CALL 15351 0 1
15132: AND
15133: IFFALSE 15142
// begin enable ( mpLose ) ;
15135: LD_INT 102
15137: ENABLE_MARKED
// exit ;
15138: POP
15139: POP
15140: GO 15158
// end ;
15142: GO 15002
15144: POP
15145: POP
// if canWin then
15146: LD_VAR 0 2
15150: IFFALSE 15157
// enable ( mpWin ) else
15152: LD_INT 101
15154: ENABLE_MARKED
15155: GO 15158
// enable ;
15157: ENABLE
// end ; end ;
15158: PPOPN 2
15160: END
// function EnemiesInGame ; var i ; begin
15161: LD_INT 0
15163: PPUSH
15164: PPUSH
// result := false ;
15165: LD_ADDR_VAR 0 1
15169: PUSH
15170: LD_INT 0
15172: ST_TO_ADDR
// for i := 1 to 8 do
15173: LD_ADDR_VAR 0 2
15177: PUSH
15178: DOUBLE
15179: LD_INT 1
15181: DEC
15182: ST_TO_ADDR
15183: LD_INT 8
15185: PUSH
15186: FOR_TO
15187: IFFALSE 15302
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
15189: LD_VAR 0 2
15193: PUSH
15194: LD_OWVAR 2
15198: NONEQUAL
15199: IFFALSE 15212
15201: PUSH
15202: LD_VAR 0 2
15206: PPUSH
15207: CALL 15351 0 1
15211: AND
15212: IFFALSE 15225
15214: PUSH
15215: LD_VAR 0 2
15219: PPUSH
15220: CALL_OW 108
15224: AND
15225: IFFALSE 15300
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
15227: LD_EXP 17
15231: PUSH
15232: LD_VAR 0 2
15236: ARRAY
15237: NOT
15238: IFTRUE 15286
15240: PUSH
15241: LD_EXP 17
15245: PUSH
15246: LD_VAR 0 2
15250: ARRAY
15251: PUSH
15252: LD_EXP 17
15256: PUSH
15257: LD_OWVAR 2
15261: ARRAY
15262: NONEQUAL
15263: IFFALSE 15285
15265: PUSH
15266: LD_OWVAR 2
15270: PPUSH
15271: LD_VAR 0 2
15275: PPUSH
15276: CALL_OW 81
15280: PUSH
15281: LD_INT 1
15283: NONEQUAL
15284: AND
15285: OR
15286: IFFALSE 15300
// begin result := true ;
15288: LD_ADDR_VAR 0 1
15292: PUSH
15293: LD_INT 1
15295: ST_TO_ADDR
// exit ;
15296: POP
15297: POP
15298: GO 15304
// end ;
15300: GO 15186
15302: POP
15303: POP
// end ;
15304: LD_VAR 0 1
15308: RET
// function CanWinLoose ; begin
15309: LD_INT 0
15311: PPUSH
// result := true ;
15312: LD_ADDR_VAR 0 1
15316: PUSH
15317: LD_INT 1
15319: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
15320: CALL_OW 531
15324: IFFALSE 15336
15326: PUSH
15327: CALL_OW 519
15331: PUSH
15332: LD_INT 1
15334: GREATER
15335: AND
15336: IFFALSE 15346
// result := false ;
15338: LD_ADDR_VAR 0 1
15342: PUSH
15343: LD_INT 0
15345: ST_TO_ADDR
// end ;
15346: LD_VAR 0 1
15350: RET
// function HasPower ( i ) ; begin
15351: LD_INT 0
15353: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
15354: LD_ADDR_VAR 0 2
15358: PUSH
15359: LD_INT 22
15361: PUSH
15362: LD_VAR 0 1
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: PUSH
15371: LD_INT 2
15373: PUSH
15374: LD_INT 21
15376: PUSH
15377: LD_INT 1
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: PUSH
15384: LD_INT 33
15386: PUSH
15387: LD_INT 3
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: PUSH
15394: LD_INT 33
15396: PUSH
15397: LD_INT 5
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: PPUSH
15414: CALL_OW 69
15418: ST_TO_ADDR
// end ; end_of_file
15419: LD_VAR 0 2
15423: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
15424: LD_VAR 0 1
15428: PUSH
15429: LD_INT 200
15431: DOUBLE
15432: GREATEREQUAL
15433: IFFALSE 15441
15435: LD_INT 299
15437: DOUBLE
15438: LESSEQUAL
15439: IFTRUE 15443
15441: GO 15475
15443: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
15444: LD_VAR 0 1
15448: PPUSH
15449: LD_VAR 0 2
15453: PPUSH
15454: LD_VAR 0 3
15458: PPUSH
15459: LD_VAR 0 4
15463: PPUSH
15464: LD_VAR 0 5
15468: PPUSH
15469: CALL 17781 0 5
15473: GO 15552
15475: LD_INT 300
15477: DOUBLE
15478: GREATEREQUAL
15479: IFFALSE 15487
15481: LD_INT 399
15483: DOUBLE
15484: LESSEQUAL
15485: IFTRUE 15489
15487: GO 15551
15489: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
15490: LD_VAR 0 1
15494: PPUSH
15495: LD_VAR 0 2
15499: PPUSH
15500: LD_VAR 0 3
15504: PPUSH
15505: LD_VAR 0 4
15509: PPUSH
15510: LD_VAR 0 5
15514: PPUSH
15515: LD_VAR 0 6
15519: PPUSH
15520: LD_VAR 0 7
15524: PPUSH
15525: LD_VAR 0 8
15529: PPUSH
15530: LD_VAR 0 9
15534: PPUSH
15535: LD_VAR 0 10
15539: PPUSH
15540: LD_VAR 0 11
15544: PPUSH
15545: CALL 16181 0 11
15549: GO 15552
15551: POP
// end ;
15552: PPOPN 11
15554: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
15555: LD_VAR 0 1
15559: PPUSH
15560: LD_VAR 0 2
15564: PPUSH
15565: LD_VAR 0 3
15569: PPUSH
15570: LD_VAR 0 4
15574: PPUSH
15575: LD_VAR 0 5
15579: PPUSH
15580: CALL 17081 0 5
// end ; end_of_file
15584: PPOPN 5
15586: END
// every 0 0$1 do
15587: GO 15589
15589: DISABLE
// begin enable ;
15590: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15591: LD_STRING updateTimer(
15593: PUSH
15594: LD_OWVAR 1
15598: STR
15599: PUSH
15600: LD_STRING );
15602: STR
15603: PPUSH
15604: CALL_OW 559
// end ;
15608: END
// export function SOS_MapStart ( ) ; begin
15609: LD_INT 0
15611: PPUSH
// UpdateFactoryWaypoints ( ) ;
15612: CALL 16543 0 0
// UpdateWarehouseGatheringPoints ( ) ;
15616: CALL 16795 0 0
// ParseMultiDataToLua ( ) ;
15620: CALL 16942 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
15624: LD_STRING setSpecLogoNumber(
15626: PUSH
15627: LD_INT 2
15629: STR
15630: PUSH
15631: LD_STRING ,
15633: STR
15634: PUSH
15635: LD_INT 1
15637: STR
15638: PUSH
15639: LD_STRING )
15641: STR
15642: PPUSH
15643: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
15647: LD_STRING setSpecLogoNumber(
15649: PUSH
15650: LD_INT 3
15652: STR
15653: PUSH
15654: LD_STRING ,
15656: STR
15657: PUSH
15658: LD_INT 2
15660: STR
15661: PUSH
15662: LD_STRING )
15664: STR
15665: PPUSH
15666: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
15670: LD_STRING setSpecLogoNumber(
15672: PUSH
15673: LD_INT 4
15675: STR
15676: PUSH
15677: LD_STRING ,
15679: STR
15680: PUSH
15681: LD_INT 3
15683: STR
15684: PUSH
15685: LD_STRING )
15687: STR
15688: PPUSH
15689: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
15693: LD_STRING setSpecLogoNumber(
15695: PUSH
15696: LD_INT 5
15698: STR
15699: PUSH
15700: LD_STRING ,
15702: STR
15703: PUSH
15704: LD_INT 4
15706: STR
15707: PUSH
15708: LD_STRING )
15710: STR
15711: PPUSH
15712: CALL_OW 559
// end ;
15716: LD_VAR 0 1
15720: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
15721: LD_INT 0
15723: PPUSH
15724: PPUSH
15725: PPUSH
15726: PPUSH
15727: PPUSH
15728: PPUSH
15729: PPUSH
15730: PPUSH
15731: PPUSH
// for i := 1 to 8 do
15732: LD_ADDR_VAR 0 2
15736: PUSH
15737: DOUBLE
15738: LD_INT 1
15740: DEC
15741: ST_TO_ADDR
15742: LD_INT 8
15744: PUSH
15745: FOR_TO
15746: IFFALSE 16131
// begin if mpSidePositions [ i ] then
15748: LD_EXP 16
15752: PUSH
15753: LD_VAR 0 2
15757: ARRAY
15758: IFFALSE 16129
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
15760: LD_ADDR_VAR 0 7
15764: PUSH
15765: LD_INT 22
15767: PUSH
15768: LD_VAR 0 2
15772: PUSH
15773: EMPTY
15774: LIST
15775: LIST
15776: PUSH
15777: LD_INT 21
15779: PUSH
15780: LD_INT 1
15782: PUSH
15783: EMPTY
15784: LIST
15785: LIST
15786: PUSH
15787: EMPTY
15788: LIST
15789: LIST
15790: PPUSH
15791: CALL_OW 69
15795: PPUSH
15796: CALL 25629 0 1
15800: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15801: LD_ADDR_VAR 0 9
15805: PUSH
15806: LD_INT 22
15808: PUSH
15809: LD_VAR 0 2
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: PUSH
15818: LD_INT 2
15820: PUSH
15821: LD_INT 30
15823: PUSH
15824: LD_INT 0
15826: PUSH
15827: EMPTY
15828: LIST
15829: LIST
15830: PUSH
15831: LD_INT 30
15833: PUSH
15834: LD_INT 1
15836: PUSH
15837: EMPTY
15838: LIST
15839: LIST
15840: PUSH
15841: EMPTY
15842: LIST
15843: LIST
15844: LIST
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: PPUSH
15850: CALL_OW 69
15854: ST_TO_ADDR
// crates := 0 ;
15855: LD_ADDR_VAR 0 4
15859: PUSH
15860: LD_INT 0
15862: ST_TO_ADDR
// oil := 0 ;
15863: LD_ADDR_VAR 0 5
15867: PUSH
15868: LD_INT 0
15870: ST_TO_ADDR
// sib := 0 ;
15871: LD_ADDR_VAR 0 6
15875: PUSH
15876: LD_INT 0
15878: ST_TO_ADDR
// if bases then
15879: LD_VAR 0 9
15883: IFFALSE 15989
// begin for j in bases do
15885: LD_ADDR_VAR 0 3
15889: PUSH
15890: LD_VAR 0 9
15894: PUSH
15895: FOR_IN
15896: IFFALSE 15987
// begin base := GetBase ( j ) ;
15898: LD_ADDR_VAR 0 8
15902: PUSH
15903: LD_VAR 0 3
15907: PPUSH
15908: CALL_OW 274
15912: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
15913: LD_ADDR_VAR 0 4
15917: PUSH
15918: LD_VAR 0 4
15922: PUSH
15923: LD_VAR 0 8
15927: PPUSH
15928: LD_INT 1
15930: PPUSH
15931: CALL_OW 275
15935: PLUS
15936: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
15937: LD_ADDR_VAR 0 5
15941: PUSH
15942: LD_VAR 0 5
15946: PUSH
15947: LD_VAR 0 8
15951: PPUSH
15952: LD_INT 2
15954: PPUSH
15955: CALL_OW 275
15959: PLUS
15960: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
15961: LD_ADDR_VAR 0 6
15965: PUSH
15966: LD_VAR 0 6
15970: PUSH
15971: LD_VAR 0 8
15975: PPUSH
15976: LD_INT 3
15978: PPUSH
15979: CALL_OW 275
15983: PLUS
15984: ST_TO_ADDR
// end ;
15985: GO 15895
15987: POP
15988: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
15989: LD_STRING setSpecText(
15991: PUSH
15992: LD_VAR 0 2
15996: STR
15997: PUSH
15998: LD_STRING ,
16000: STR
16001: PUSH
16002: LD_INT 2
16004: STR
16005: PUSH
16006: LD_STRING ,
16008: STR
16009: PUSH
16010: LD_VAR 0 4
16014: STR
16015: PUSH
16016: LD_STRING )
16018: STR
16019: PPUSH
16020: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
16024: LD_STRING setSpecText(
16026: PUSH
16027: LD_VAR 0 2
16031: STR
16032: PUSH
16033: LD_STRING ,
16035: STR
16036: PUSH
16037: LD_INT 3
16039: STR
16040: PUSH
16041: LD_STRING ,
16043: STR
16044: PUSH
16045: LD_VAR 0 5
16049: STR
16050: PUSH
16051: LD_STRING )
16053: STR
16054: PPUSH
16055: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
16059: LD_STRING setSpecText(
16061: PUSH
16062: LD_VAR 0 2
16066: STR
16067: PUSH
16068: LD_STRING ,
16070: STR
16071: PUSH
16072: LD_INT 4
16074: STR
16075: PUSH
16076: LD_STRING ,
16078: STR
16079: PUSH
16080: LD_VAR 0 6
16084: STR
16085: PUSH
16086: LD_STRING )
16088: STR
16089: PPUSH
16090: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
16094: LD_STRING setSpecText(
16096: PUSH
16097: LD_VAR 0 2
16101: STR
16102: PUSH
16103: LD_STRING ,
16105: STR
16106: PUSH
16107: LD_INT 5
16109: STR
16110: PUSH
16111: LD_STRING ,
16113: STR
16114: PUSH
16115: LD_VAR 0 7
16119: STR
16120: PUSH
16121: LD_STRING )
16123: STR
16124: PPUSH
16125: CALL_OW 559
// end ; end ;
16129: GO 15745
16131: POP
16132: POP
// end ;
16133: LD_VAR 0 1
16137: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
16138: LD_INT 2
16140: PUSH
16141: LD_INT 30
16143: PUSH
16144: LD_INT 0
16146: PUSH
16147: EMPTY
16148: LIST
16149: LIST
16150: PUSH
16151: LD_INT 30
16153: PUSH
16154: LD_INT 1
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: LIST
16165: PPUSH
16166: CALL_OW 69
16170: IFFALSE 16180
16172: GO 16174
16174: DISABLE
// begin enable ;
16175: ENABLE
// UpdateSpectatorBar ;
16176: CALL 15721 0 0
// end ;
16180: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16181: LD_INT 0
16183: PPUSH
// end ;
16184: LD_VAR 0 12
16188: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
16189: LD_INT 0
16191: PPUSH
16192: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
16193: LD_VAR 0 1
16197: NOT
16198: IFTRUE 16217
16200: PUSH
16201: LD_VAR 0 2
16205: PPUSH
16206: LD_VAR 0 3
16210: PPUSH
16211: CALL_OW 488
16215: NOT
16216: OR
16217: IFTRUE 16252
16219: PUSH
16220: LD_VAR 0 1
16224: PPUSH
16225: CALL_OW 266
16229: PUSH
16230: LD_INT 3
16232: NONEQUAL
16233: IFFALSE 16251
16235: PUSH
16236: LD_VAR 0 1
16240: PPUSH
16241: CALL_OW 247
16245: PUSH
16246: LD_INT 1
16248: EQUAL
16249: NOT
16250: AND
16251: OR
16252: IFFALSE 16256
// exit ;
16254: GO 16538
// if GetType ( factory ) = unit_human then
16256: LD_VAR 0 1
16260: PPUSH
16261: CALL_OW 247
16265: PUSH
16266: LD_INT 1
16268: EQUAL
16269: IFFALSE 16286
// factory := IsInUnit ( factory ) ;
16271: LD_ADDR_VAR 0 1
16275: PUSH
16276: LD_VAR 0 1
16280: PPUSH
16281: CALL_OW 310
16285: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
16286: LD_VAR 0 1
16290: PPUSH
16291: CALL_OW 266
16295: PUSH
16296: LD_INT 3
16298: NONEQUAL
16299: IFFALSE 16303
// exit ;
16301: GO 16538
// for i := 1 to Count ( factoryWaypoints ) do
16303: LD_ADDR_VAR 0 5
16307: PUSH
16308: DOUBLE
16309: LD_INT 1
16311: DEC
16312: ST_TO_ADDR
16313: LD_EXP 59
16317: PPUSH
16318: CALL 25629 0 1
16322: PUSH
16323: FOR_TO
16324: IFFALSE 16486
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
16326: LD_VAR 0 2
16330: PPUSH
16331: LD_VAR 0 3
16335: PPUSH
16336: CALL_OW 428
16340: PUSH
16341: LD_EXP 59
16345: PUSH
16346: LD_VAR 0 5
16350: ARRAY
16351: PUSH
16352: LD_INT 2
16354: ARRAY
16355: EQUAL
16356: IFFALSE 16388
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
16358: LD_ADDR_EXP 59
16362: PUSH
16363: LD_EXP 59
16367: PPUSH
16368: LD_VAR 0 5
16372: PPUSH
16373: CALL_OW 3
16377: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16378: CALL 16543 0 0
// exit ;
16382: POP
16383: POP
16384: GO 16538
// end else
16386: GO 16484
// if factory = factoryWaypoints [ i ] [ 2 ] then
16388: LD_VAR 0 1
16392: PUSH
16393: LD_EXP 59
16397: PUSH
16398: LD_VAR 0 5
16402: ARRAY
16403: PUSH
16404: LD_INT 2
16406: ARRAY
16407: EQUAL
16408: IFFALSE 16484
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
16410: LD_ADDR_EXP 59
16414: PUSH
16415: LD_EXP 59
16419: PPUSH
16420: LD_VAR 0 5
16424: PPUSH
16425: CALL_OW 3
16429: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
16430: LD_ADDR_EXP 59
16434: PUSH
16435: LD_EXP 59
16439: PPUSH
16440: LD_VAR 0 1
16444: PPUSH
16445: CALL_OW 255
16449: PUSH
16450: LD_VAR 0 1
16454: PUSH
16455: LD_VAR 0 2
16459: PUSH
16460: LD_VAR 0 3
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: LIST
16469: LIST
16470: PPUSH
16471: CALL 61595 0 2
16475: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16476: CALL 16543 0 0
// exit ;
16480: POP
16481: POP
16482: GO 16538
// end ; end ;
16484: GO 16323
16486: POP
16487: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
16488: LD_ADDR_EXP 59
16492: PUSH
16493: LD_EXP 59
16497: PPUSH
16498: LD_VAR 0 1
16502: PPUSH
16503: CALL_OW 255
16507: PUSH
16508: LD_VAR 0 1
16512: PUSH
16513: LD_VAR 0 2
16517: PUSH
16518: LD_VAR 0 3
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: PPUSH
16529: CALL 61595 0 2
16533: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16534: CALL 16543 0 0
// end ;
16538: LD_VAR 0 4
16542: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
16543: LD_INT 0
16545: PPUSH
16546: PPUSH
16547: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
16548: LD_STRING resetFactoryWaypoint();
16550: PPUSH
16551: CALL_OW 559
// if factoryWaypoints then
16555: LD_EXP 59
16559: IFFALSE 16680
// begin list := factoryWaypoints ;
16561: LD_ADDR_VAR 0 3
16565: PUSH
16566: LD_EXP 59
16570: ST_TO_ADDR
// for i := 1 to list do
16571: LD_ADDR_VAR 0 2
16575: PUSH
16576: DOUBLE
16577: LD_INT 1
16579: DEC
16580: ST_TO_ADDR
16581: LD_VAR 0 3
16585: PUSH
16586: FOR_TO
16587: IFFALSE 16678
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16589: LD_STRING setFactoryWaypointXY(
16591: PUSH
16592: LD_VAR 0 3
16596: PUSH
16597: LD_VAR 0 2
16601: ARRAY
16602: PUSH
16603: LD_INT 1
16605: ARRAY
16606: STR
16607: PUSH
16608: LD_STRING ,
16610: STR
16611: PUSH
16612: LD_VAR 0 3
16616: PUSH
16617: LD_VAR 0 2
16621: ARRAY
16622: PUSH
16623: LD_INT 2
16625: ARRAY
16626: STR
16627: PUSH
16628: LD_STRING ,
16630: STR
16631: PUSH
16632: LD_VAR 0 3
16636: PUSH
16637: LD_VAR 0 2
16641: ARRAY
16642: PUSH
16643: LD_INT 3
16645: ARRAY
16646: STR
16647: PUSH
16648: LD_STRING ,
16650: STR
16651: PUSH
16652: LD_VAR 0 3
16656: PUSH
16657: LD_VAR 0 2
16661: ARRAY
16662: PUSH
16663: LD_INT 4
16665: ARRAY
16666: STR
16667: PUSH
16668: LD_STRING )
16670: STR
16671: PPUSH
16672: CALL_OW 559
16676: GO 16586
16678: POP
16679: POP
// end ; end ;
16680: LD_VAR 0 1
16684: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
16685: LD_INT 0
16687: PPUSH
// if HexInfo ( x , y ) = warehouse then
16688: LD_VAR 0 2
16692: PPUSH
16693: LD_VAR 0 3
16697: PPUSH
16698: CALL_OW 428
16702: PUSH
16703: LD_VAR 0 1
16707: EQUAL
16708: IFFALSE 16735
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
16710: LD_ADDR_EXP 61
16714: PUSH
16715: LD_EXP 61
16719: PPUSH
16720: LD_VAR 0 1
16724: PPUSH
16725: LD_INT 0
16727: PPUSH
16728: CALL_OW 1
16732: ST_TO_ADDR
16733: GO 16786
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
16735: LD_ADDR_EXP 61
16739: PUSH
16740: LD_EXP 61
16744: PPUSH
16745: LD_VAR 0 1
16749: PPUSH
16750: LD_VAR 0 1
16754: PPUSH
16755: CALL_OW 255
16759: PUSH
16760: LD_VAR 0 1
16764: PUSH
16765: LD_VAR 0 2
16769: PUSH
16770: LD_VAR 0 3
16774: PUSH
16775: EMPTY
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: PPUSH
16781: CALL_OW 1
16785: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
16786: CALL 16795 0 0
// end ;
16790: LD_VAR 0 4
16794: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
16795: LD_INT 0
16797: PPUSH
16798: PPUSH
16799: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
16800: LD_STRING resetWarehouseGatheringPoints();
16802: PPUSH
16803: CALL_OW 559
// if warehouseGatheringPoints then
16807: LD_EXP 61
16811: IFFALSE 16937
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
16813: LD_ADDR_VAR 0 3
16817: PUSH
16818: LD_EXP 61
16822: PPUSH
16823: CALL 65529 0 1
16827: ST_TO_ADDR
// for i := 1 to list do
16828: LD_ADDR_VAR 0 2
16832: PUSH
16833: DOUBLE
16834: LD_INT 1
16836: DEC
16837: ST_TO_ADDR
16838: LD_VAR 0 3
16842: PUSH
16843: FOR_TO
16844: IFFALSE 16935
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16846: LD_STRING setWarehouseGatheringPointXY(
16848: PUSH
16849: LD_VAR 0 3
16853: PUSH
16854: LD_VAR 0 2
16858: ARRAY
16859: PUSH
16860: LD_INT 1
16862: ARRAY
16863: STR
16864: PUSH
16865: LD_STRING ,
16867: STR
16868: PUSH
16869: LD_VAR 0 3
16873: PUSH
16874: LD_VAR 0 2
16878: ARRAY
16879: PUSH
16880: LD_INT 2
16882: ARRAY
16883: STR
16884: PUSH
16885: LD_STRING ,
16887: STR
16888: PUSH
16889: LD_VAR 0 3
16893: PUSH
16894: LD_VAR 0 2
16898: ARRAY
16899: PUSH
16900: LD_INT 3
16902: ARRAY
16903: STR
16904: PUSH
16905: LD_STRING ,
16907: STR
16908: PUSH
16909: LD_VAR 0 3
16913: PUSH
16914: LD_VAR 0 2
16918: ARRAY
16919: PUSH
16920: LD_INT 4
16922: ARRAY
16923: STR
16924: PUSH
16925: LD_STRING )
16927: STR
16928: PPUSH
16929: CALL_OW 559
16933: GO 16843
16935: POP
16936: POP
// end ; end ;
16937: LD_VAR 0 1
16941: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
16942: LD_INT 0
16944: PPUSH
16945: PPUSH
// if not mpSidePositions then
16946: LD_EXP 16
16950: NOT
16951: IFFALSE 16955
// exit ;
16953: GO 17026
// result :=  ;
16955: LD_ADDR_VAR 0 1
16959: PUSH
16960: LD_STRING 
16962: ST_TO_ADDR
// for i := 1 to 8 do
16963: LD_ADDR_VAR 0 2
16967: PUSH
16968: DOUBLE
16969: LD_INT 1
16971: DEC
16972: ST_TO_ADDR
16973: LD_INT 8
16975: PUSH
16976: FOR_TO
16977: IFFALSE 17007
// begin result := result & mpSidePositions [ i ] & ; ;
16979: LD_ADDR_VAR 0 1
16983: PUSH
16984: LD_VAR 0 1
16988: PUSH
16989: LD_EXP 16
16993: PUSH
16994: LD_VAR 0 2
16998: ARRAY
16999: STR
17000: PUSH
17001: LD_STRING ;
17003: STR
17004: ST_TO_ADDR
// end ;
17005: GO 16976
17007: POP
17008: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
17009: LD_STRING setMultiplayerRealPosition("
17011: PUSH
17012: LD_VAR 0 1
17016: STR
17017: PUSH
17018: LD_STRING ");
17020: STR
17021: PPUSH
17022: CALL_OW 559
// end ; end_of_file
17026: LD_VAR 0 1
17030: RET
// export function SOS_UnitDestroyed ( un ) ; begin
17031: LD_INT 0
17033: PPUSH
// ComRadiation ( un ) ;
17034: LD_VAR 0 1
17038: PPUSH
17039: CALL 18201 0 1
// end ;
17043: LD_VAR 0 2
17047: RET
// export function SOS_UnitKamikazed ( un ) ; begin
17048: LD_INT 0
17050: PPUSH
// ComRadiation ( un ) ;
17051: LD_VAR 0 1
17055: PPUSH
17056: CALL 18201 0 1
// end ;
17060: LD_VAR 0 2
17064: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17065: LD_INT 0
17067: PPUSH
// end ;
17068: LD_VAR 0 4
17072: RET
// export function SOS_Command ( cmd ) ; begin
17073: LD_INT 0
17075: PPUSH
// end ;
17076: LD_VAR 0 2
17080: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
17081: LD_INT 0
17083: PPUSH
// end ;
17084: LD_VAR 0 6
17088: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
17089: LD_INT 0
17091: PPUSH
17092: PPUSH
17093: PPUSH
17094: PPUSH
17095: PPUSH
// if not vehicle or not factory then
17096: LD_VAR 0 1
17100: NOT
17101: IFTRUE 17110
17103: PUSH
17104: LD_VAR 0 2
17108: NOT
17109: OR
17110: IFFALSE 17114
// exit ;
17112: GO 17776
// weapon := GetWeapon ( vehicle ) ;
17114: LD_ADDR_VAR 0 7
17118: PUSH
17119: LD_VAR 0 1
17123: PPUSH
17124: CALL_OW 264
17128: ST_TO_ADDR
// if weapon = ar_miner then
17129: LD_VAR 0 7
17133: PUSH
17134: LD_INT 81
17136: EQUAL
17137: IFFALSE 17194
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
17139: LD_ADDR_EXP 70
17143: PUSH
17144: LD_EXP 70
17148: PPUSH
17149: LD_EXP 70
17153: PUSH
17154: LD_INT 1
17156: PLUS
17157: PPUSH
17158: LD_VAR 0 1
17162: PPUSH
17163: CALL_OW 1
17167: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
17168: LD_ADDR_EXP 71
17172: PUSH
17173: LD_EXP 71
17177: PPUSH
17178: LD_EXP 71
17182: PUSH
17183: LD_INT 1
17185: PLUS
17186: PPUSH
17187: EMPTY
17188: PPUSH
17189: CALL_OW 1
17193: ST_TO_ADDR
// end ; if not factoryWaypoints then
17194: LD_EXP 59
17198: NOT
17199: IFFALSE 17203
// exit ;
17201: GO 17776
// for i := 1 to Count ( factoryWaypoints ) do
17203: LD_ADDR_VAR 0 4
17207: PUSH
17208: DOUBLE
17209: LD_INT 1
17211: DEC
17212: ST_TO_ADDR
17213: LD_EXP 59
17217: PPUSH
17218: CALL 25629 0 1
17222: PUSH
17223: FOR_TO
17224: IFFALSE 17774
// if factoryWaypoints [ i ] [ 2 ] = factory then
17226: LD_EXP 59
17230: PUSH
17231: LD_VAR 0 4
17235: ARRAY
17236: PUSH
17237: LD_INT 2
17239: ARRAY
17240: PUSH
17241: LD_VAR 0 2
17245: EQUAL
17246: IFFALSE 17772
// begin if GetControl ( vehicle ) = control_manual then
17248: LD_VAR 0 1
17252: PPUSH
17253: CALL_OW 263
17257: PUSH
17258: LD_INT 1
17260: EQUAL
17261: IFFALSE 17625
// begin driver := IsDrivenBy ( vehicle ) ;
17263: LD_ADDR_VAR 0 5
17267: PUSH
17268: LD_VAR 0 1
17272: PPUSH
17273: CALL_OW 311
17277: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
17278: LD_VAR 0 5
17282: PUSH
17283: LD_EXP 60
17287: IN
17288: IFTRUE 17302
17290: PUSH
17291: LD_VAR 0 1
17295: PUSH
17296: LD_EXP 60
17300: IN
17301: OR
17302: IFFALSE 17308
// exit ;
17304: POP
17305: POP
17306: GO 17776
// if not HasTask ( driver ) then
17308: LD_VAR 0 5
17312: PPUSH
17313: CALL_OW 314
17317: NOT
17318: IFFALSE 17623
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
17320: LD_ADDR_EXP 60
17324: PUSH
17325: LD_EXP 60
17329: PPUSH
17330: LD_VAR 0 5
17334: PPUSH
17335: CALL 61595 0 2
17339: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
17340: LD_ADDR_EXP 60
17344: PUSH
17345: LD_EXP 60
17349: PPUSH
17350: LD_VAR 0 1
17354: PPUSH
17355: CALL 61595 0 2
17359: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
17360: LD_ADDR_VAR 0 6
17364: PUSH
17365: LD_EXP 59
17369: PUSH
17370: LD_VAR 0 4
17374: ARRAY
17375: PUSH
17376: LD_INT 3
17378: ARRAY
17379: PPUSH
17380: LD_EXP 59
17384: PUSH
17385: LD_VAR 0 4
17389: ARRAY
17390: PUSH
17391: LD_INT 4
17393: ARRAY
17394: PPUSH
17395: CALL_OW 428
17399: ST_TO_ADDR
// if hex then
17400: LD_VAR 0 6
17404: IFFALSE 17422
// ComMoveUnit ( driver , hex ) else
17406: LD_VAR 0 5
17410: PPUSH
17411: LD_VAR 0 6
17415: PPUSH
17416: CALL_OW 112
17420: GO 17506
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
17422: LD_VAR 0 1
17426: PPUSH
17427: LD_EXP 59
17431: PUSH
17432: LD_VAR 0 4
17436: ARRAY
17437: PUSH
17438: LD_INT 3
17440: ARRAY
17441: PPUSH
17442: LD_EXP 59
17446: PUSH
17447: LD_VAR 0 4
17451: ARRAY
17452: PUSH
17453: LD_INT 4
17455: ARRAY
17456: PPUSH
17457: CALL_OW 297
17461: PUSH
17462: LD_INT 0
17464: GREATER
17465: IFFALSE 17506
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
17467: LD_VAR 0 5
17471: PPUSH
17472: LD_EXP 59
17476: PUSH
17477: LD_VAR 0 4
17481: ARRAY
17482: PUSH
17483: LD_INT 3
17485: ARRAY
17486: PPUSH
17487: LD_EXP 59
17491: PUSH
17492: LD_VAR 0 4
17496: ARRAY
17497: PUSH
17498: LD_INT 4
17500: ARRAY
17501: PPUSH
17502: CALL_OW 111
// AddComExitVehicle ( driver ) ;
17506: LD_VAR 0 5
17510: PPUSH
17511: CALL_OW 181
// if Multiplayer then
17515: LD_OWVAR 4
17519: IFFALSE 17568
// begin repeat wait ( 10 ) ;
17521: LD_INT 10
17523: PPUSH
17524: CALL_OW 67
// until not IsInUnit ( driver ) ;
17528: LD_VAR 0 5
17532: PPUSH
17533: CALL_OW 310
17537: NOT
17538: IFFALSE 17521
// if not HasTask ( driver ) then
17540: LD_VAR 0 5
17544: PPUSH
17545: CALL_OW 314
17549: NOT
17550: IFFALSE 17566
// ComEnterUnit ( driver , factory ) ;
17552: LD_VAR 0 5
17556: PPUSH
17557: LD_VAR 0 2
17561: PPUSH
17562: CALL_OW 120
// end else
17566: GO 17582
// AddComEnterUnit ( driver , factory ) ;
17568: LD_VAR 0 5
17572: PPUSH
17573: LD_VAR 0 2
17577: PPUSH
17578: CALL_OW 180
// wait ( 0 0$1 ) ;
17582: LD_INT 35
17584: PPUSH
17585: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
17589: LD_ADDR_EXP 60
17593: PUSH
17594: LD_EXP 60
17598: PUSH
17599: LD_VAR 0 5
17603: DIFF
17604: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
17605: LD_ADDR_EXP 60
17609: PUSH
17610: LD_EXP 60
17614: PUSH
17615: LD_VAR 0 1
17619: DIFF
17620: ST_TO_ADDR
// break ;
17621: GO 17774
// end ; end else
17623: GO 17772
// if GetControl ( vehicle ) = control_remote then
17625: LD_VAR 0 1
17629: PPUSH
17630: CALL_OW 263
17634: PUSH
17635: LD_INT 2
17637: EQUAL
17638: IFFALSE 17724
// begin wait ( 0 0$2 ) ;
17640: LD_INT 70
17642: PPUSH
17643: CALL_OW 67
// repeat wait ( 10 ) ;
17647: LD_INT 10
17649: PPUSH
17650: CALL_OW 67
// Connect ( vehicle ) ;
17654: LD_VAR 0 1
17658: PPUSH
17659: CALL 31907 0 1
// until IsControledBy ( vehicle ) ;
17663: LD_VAR 0 1
17667: PPUSH
17668: CALL_OW 312
17672: IFFALSE 17647
// wait ( 10 ) ;
17674: LD_INT 10
17676: PPUSH
17677: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
17681: LD_VAR 0 1
17685: PPUSH
17686: LD_EXP 59
17690: PUSH
17691: LD_VAR 0 4
17695: ARRAY
17696: PUSH
17697: LD_INT 3
17699: ARRAY
17700: PPUSH
17701: LD_EXP 59
17705: PUSH
17706: LD_VAR 0 4
17710: ARRAY
17711: PUSH
17712: LD_INT 4
17714: ARRAY
17715: PPUSH
17716: CALL_OW 111
// break ;
17720: GO 17774
// end else
17722: GO 17772
// begin wait ( 0 0$3 ) ;
17724: LD_INT 105
17726: PPUSH
17727: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
17731: LD_VAR 0 1
17735: PPUSH
17736: LD_EXP 59
17740: PUSH
17741: LD_VAR 0 4
17745: ARRAY
17746: PUSH
17747: LD_INT 3
17749: ARRAY
17750: PPUSH
17751: LD_EXP 59
17755: PUSH
17756: LD_VAR 0 4
17760: ARRAY
17761: PUSH
17762: LD_INT 4
17764: ARRAY
17765: PPUSH
17766: CALL_OW 111
// break ;
17770: GO 17774
// end ; end ;
17772: GO 17223
17774: POP
17775: POP
// end ;
17776: LD_VAR 0 3
17780: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
17781: LD_INT 0
17783: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
17784: LD_VAR 0 1
17788: PUSH
17789: LD_INT 250
17791: EQUAL
17792: IFFALSE 17809
17794: PUSH
17795: LD_VAR 0 2
17799: PPUSH
17800: CALL_OW 264
17804: PUSH
17805: LD_INT 81
17807: EQUAL
17808: AND
17809: IFFALSE 17830
// MinerPlaceMine ( unit , x , y ) ;
17811: LD_VAR 0 2
17815: PPUSH
17816: LD_VAR 0 4
17820: PPUSH
17821: LD_VAR 0 5
17825: PPUSH
17826: CALL 21111 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
17830: LD_VAR 0 1
17834: PUSH
17835: LD_INT 251
17837: EQUAL
17838: IFFALSE 17855
17840: PUSH
17841: LD_VAR 0 2
17845: PPUSH
17846: CALL_OW 264
17850: PUSH
17851: LD_INT 81
17853: EQUAL
17854: AND
17855: IFFALSE 17876
// MinerDetonateMine ( unit , x , y ) ;
17857: LD_VAR 0 2
17861: PPUSH
17862: LD_VAR 0 4
17866: PPUSH
17867: LD_VAR 0 5
17871: PPUSH
17872: CALL 21518 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
17876: LD_VAR 0 1
17880: PUSH
17881: LD_INT 252
17883: EQUAL
17884: IFFALSE 17901
17886: PUSH
17887: LD_VAR 0 2
17891: PPUSH
17892: CALL_OW 264
17896: PUSH
17897: LD_INT 81
17899: EQUAL
17900: AND
17901: IFFALSE 17922
// MinerCreateMinefield ( unit , x , y ) ;
17903: LD_VAR 0 2
17907: PPUSH
17908: LD_VAR 0 4
17912: PPUSH
17913: LD_VAR 0 5
17917: PPUSH
17918: CALL 21750 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
17922: LD_VAR 0 1
17926: PUSH
17927: LD_INT 253
17929: EQUAL
17930: IFFALSE 17947
17932: PUSH
17933: LD_VAR 0 2
17937: PPUSH
17938: CALL_OW 257
17942: PUSH
17943: LD_INT 5
17945: EQUAL
17946: AND
17947: IFFALSE 17968
// ComBinocular ( unit , x , y ) ;
17949: LD_VAR 0 2
17953: PPUSH
17954: LD_VAR 0 4
17958: PPUSH
17959: LD_VAR 0 5
17963: PPUSH
17964: CALL 22125 0 3
// if selectedUnit then
17968: LD_VAR 0 3
17972: IFFALSE 18032
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
17974: LD_VAR 0 1
17978: PUSH
17979: LD_INT 254
17981: EQUAL
17982: IFFALSE 17999
17984: PUSH
17985: LD_VAR 0 2
17989: PPUSH
17990: CALL_OW 264
17994: PUSH
17995: LD_INT 99
17997: EQUAL
17998: AND
17999: IFFALSE 18016
18001: PUSH
18002: LD_VAR 0 3
18006: PPUSH
18007: CALL_OW 263
18011: PUSH
18012: LD_INT 3
18014: EQUAL
18015: AND
18016: IFFALSE 18032
// HackDestroyVehicle ( unit , selectedUnit ) ;
18018: LD_VAR 0 2
18022: PPUSH
18023: LD_VAR 0 3
18027: PPUSH
18028: CALL 20322 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18032: LD_VAR 0 1
18036: PUSH
18037: LD_INT 255
18039: EQUAL
18040: IFFALSE 18064
18042: PUSH
18043: LD_VAR 0 2
18047: PPUSH
18048: CALL_OW 264
18052: PUSH
18053: LD_INT 14
18055: PUSH
18056: LD_INT 53
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: IN
18063: AND
18064: IFFALSE 18082
18066: PUSH
18067: LD_VAR 0 4
18071: PPUSH
18072: LD_VAR 0 5
18076: PPUSH
18077: CALL_OW 488
18081: AND
18082: IFFALSE 18106
// CutTreeXYR ( unit , x , y , 12 ) ;
18084: LD_VAR 0 2
18088: PPUSH
18089: LD_VAR 0 4
18093: PPUSH
18094: LD_VAR 0 5
18098: PPUSH
18099: LD_INT 12
18101: PPUSH
18102: CALL 18297 0 4
// if cmd = 256 then
18106: LD_VAR 0 1
18110: PUSH
18111: LD_INT 256
18113: EQUAL
18114: IFFALSE 18135
// SetFactoryWaypoint ( unit , x , y ) ;
18116: LD_VAR 0 2
18120: PPUSH
18121: LD_VAR 0 4
18125: PPUSH
18126: LD_VAR 0 5
18130: PPUSH
18131: CALL 16189 0 3
// if cmd = 257 then
18135: LD_VAR 0 1
18139: PUSH
18140: LD_INT 257
18142: EQUAL
18143: IFFALSE 18164
// SetWarehouseGatheringPoint ( unit , x , y ) ;
18145: LD_VAR 0 2
18149: PPUSH
18150: LD_VAR 0 4
18154: PPUSH
18155: LD_VAR 0 5
18159: PPUSH
18160: CALL 16685 0 3
// if cmd = 258 then
18164: LD_VAR 0 1
18168: PUSH
18169: LD_INT 258
18171: EQUAL
18172: IFFALSE 18196
// BurnTreeXYR ( unit , x , y , 8 ) ;
18174: LD_VAR 0 2
18178: PPUSH
18179: LD_VAR 0 4
18183: PPUSH
18184: LD_VAR 0 5
18188: PPUSH
18189: LD_INT 8
18191: PPUSH
18192: CALL 18697 0 4
// end ;
18196: LD_VAR 0 6
18200: RET
// export function ComRadiation ( un ) ; var eff ; begin
18201: LD_INT 0
18203: PPUSH
18204: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
18205: LD_VAR 0 1
18209: PPUSH
18210: CALL_OW 264
18214: PUSH
18215: LD_INT 91
18217: NONEQUAL
18218: IFFALSE 18222
// exit ;
18220: GO 18292
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
18222: LD_INT 68
18224: PPUSH
18225: LD_VAR 0 1
18229: PPUSH
18230: CALL_OW 255
18234: PPUSH
18235: CALL_OW 321
18239: PUSH
18240: LD_INT 2
18242: EQUAL
18243: IFFALSE 18255
// eff := 50 else
18245: LD_ADDR_VAR 0 3
18249: PUSH
18250: LD_INT 50
18252: ST_TO_ADDR
18253: GO 18263
// eff := 25 ;
18255: LD_ADDR_VAR 0 3
18259: PUSH
18260: LD_INT 25
18262: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
18263: LD_VAR 0 1
18267: PPUSH
18268: CALL_OW 250
18272: PPUSH
18273: LD_VAR 0 1
18277: PPUSH
18278: CALL_OW 251
18282: PPUSH
18283: LD_VAR 0 3
18287: PPUSH
18288: CALL_OW 495
// end ;
18292: LD_VAR 0 2
18296: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18297: LD_INT 0
18299: PPUSH
18300: PPUSH
18301: PPUSH
18302: PPUSH
18303: PPUSH
18304: PPUSH
18305: PPUSH
18306: PPUSH
18307: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
18308: LD_VAR 0 1
18312: PPUSH
18313: CALL_OW 302
18317: NOT
18318: IFTRUE 18337
18320: PUSH
18321: LD_VAR 0 2
18325: PPUSH
18326: LD_VAR 0 3
18330: PPUSH
18331: CALL_OW 488
18335: NOT
18336: OR
18337: IFTRUE 18346
18339: PUSH
18340: LD_VAR 0 4
18344: NOT
18345: OR
18346: IFFALSE 18350
// exit ;
18348: GO 18692
// list := [ ] ;
18350: LD_ADDR_VAR 0 13
18354: PUSH
18355: EMPTY
18356: ST_TO_ADDR
// if x - r < 0 then
18357: LD_VAR 0 2
18361: PUSH
18362: LD_VAR 0 4
18366: MINUS
18367: PUSH
18368: LD_INT 0
18370: LESS
18371: IFFALSE 18383
// min_x := 0 else
18373: LD_ADDR_VAR 0 7
18377: PUSH
18378: LD_INT 0
18380: ST_TO_ADDR
18381: GO 18399
// min_x := x - r ;
18383: LD_ADDR_VAR 0 7
18387: PUSH
18388: LD_VAR 0 2
18392: PUSH
18393: LD_VAR 0 4
18397: MINUS
18398: ST_TO_ADDR
// if y - r < 0 then
18399: LD_VAR 0 3
18403: PUSH
18404: LD_VAR 0 4
18408: MINUS
18409: PUSH
18410: LD_INT 0
18412: LESS
18413: IFFALSE 18425
// min_y := 0 else
18415: LD_ADDR_VAR 0 8
18419: PUSH
18420: LD_INT 0
18422: ST_TO_ADDR
18423: GO 18441
// min_y := y - r ;
18425: LD_ADDR_VAR 0 8
18429: PUSH
18430: LD_VAR 0 3
18434: PUSH
18435: LD_VAR 0 4
18439: MINUS
18440: ST_TO_ADDR
// max_x := x + r ;
18441: LD_ADDR_VAR 0 9
18445: PUSH
18446: LD_VAR 0 2
18450: PUSH
18451: LD_VAR 0 4
18455: PLUS
18456: ST_TO_ADDR
// max_y := y + r ;
18457: LD_ADDR_VAR 0 10
18461: PUSH
18462: LD_VAR 0 3
18466: PUSH
18467: LD_VAR 0 4
18471: PLUS
18472: ST_TO_ADDR
// for _x = min_x to max_x do
18473: LD_ADDR_VAR 0 11
18477: PUSH
18478: DOUBLE
18479: LD_VAR 0 7
18483: DEC
18484: ST_TO_ADDR
18485: LD_VAR 0 9
18489: PUSH
18490: FOR_TO
18491: IFFALSE 18610
// for _y = min_y to max_y do
18493: LD_ADDR_VAR 0 12
18497: PUSH
18498: DOUBLE
18499: LD_VAR 0 8
18503: DEC
18504: ST_TO_ADDR
18505: LD_VAR 0 10
18509: PUSH
18510: FOR_TO
18511: IFFALSE 18606
// begin if not ValidHex ( _x , _y ) then
18513: LD_VAR 0 11
18517: PPUSH
18518: LD_VAR 0 12
18522: PPUSH
18523: CALL_OW 488
18527: NOT
18528: IFFALSE 18532
// continue ;
18530: GO 18510
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18532: LD_VAR 0 11
18536: PPUSH
18537: LD_VAR 0 12
18541: PPUSH
18542: CALL_OW 351
18546: IFFALSE 18564
18548: PUSH
18549: LD_VAR 0 11
18553: PPUSH
18554: LD_VAR 0 12
18558: PPUSH
18559: CALL_OW 554
18563: AND
18564: IFFALSE 18604
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18566: LD_ADDR_VAR 0 13
18570: PUSH
18571: LD_VAR 0 13
18575: PPUSH
18576: LD_VAR 0 13
18580: PUSH
18581: LD_INT 1
18583: PLUS
18584: PPUSH
18585: LD_VAR 0 11
18589: PUSH
18590: LD_VAR 0 12
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: PPUSH
18599: CALL_OW 2
18603: ST_TO_ADDR
// end ;
18604: GO 18510
18606: POP
18607: POP
18608: GO 18490
18610: POP
18611: POP
// if not list then
18612: LD_VAR 0 13
18616: NOT
18617: IFFALSE 18621
// exit ;
18619: GO 18692
// for i in list do
18621: LD_ADDR_VAR 0 6
18625: PUSH
18626: LD_VAR 0 13
18630: PUSH
18631: FOR_IN
18632: IFFALSE 18690
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18634: LD_VAR 0 1
18638: PPUSH
18639: LD_STRING M
18641: PUSH
18642: LD_VAR 0 6
18646: PUSH
18647: LD_INT 1
18649: ARRAY
18650: PUSH
18651: LD_VAR 0 6
18655: PUSH
18656: LD_INT 2
18658: ARRAY
18659: PUSH
18660: LD_INT 0
18662: PUSH
18663: LD_INT 0
18665: PUSH
18666: LD_INT 0
18668: PUSH
18669: LD_INT 0
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: PUSH
18681: EMPTY
18682: LIST
18683: PPUSH
18684: CALL_OW 447
18688: GO 18631
18690: POP
18691: POP
// end ;
18692: LD_VAR 0 5
18696: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
18697: LD_INT 0
18699: PPUSH
18700: PPUSH
18701: PPUSH
18702: PPUSH
18703: PPUSH
18704: PPUSH
18705: PPUSH
18706: PPUSH
18707: PPUSH
18708: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
18709: LD_VAR 0 1
18713: PPUSH
18714: CALL_OW 302
18718: NOT
18719: IFTRUE 18738
18721: PUSH
18722: LD_VAR 0 2
18726: PPUSH
18727: LD_VAR 0 3
18731: PPUSH
18732: CALL_OW 488
18736: NOT
18737: OR
18738: IFTRUE 18747
18740: PUSH
18741: LD_VAR 0 4
18745: NOT
18746: OR
18747: IFFALSE 18751
// exit ;
18749: GO 19268
// list := [ ] ;
18751: LD_ADDR_VAR 0 13
18755: PUSH
18756: EMPTY
18757: ST_TO_ADDR
// if x - r < 0 then
18758: LD_VAR 0 2
18762: PUSH
18763: LD_VAR 0 4
18767: MINUS
18768: PUSH
18769: LD_INT 0
18771: LESS
18772: IFFALSE 18784
// min_x := 0 else
18774: LD_ADDR_VAR 0 7
18778: PUSH
18779: LD_INT 0
18781: ST_TO_ADDR
18782: GO 18800
// min_x := x - r ;
18784: LD_ADDR_VAR 0 7
18788: PUSH
18789: LD_VAR 0 2
18793: PUSH
18794: LD_VAR 0 4
18798: MINUS
18799: ST_TO_ADDR
// if y - r < 0 then
18800: LD_VAR 0 3
18804: PUSH
18805: LD_VAR 0 4
18809: MINUS
18810: PUSH
18811: LD_INT 0
18813: LESS
18814: IFFALSE 18826
// min_y := 0 else
18816: LD_ADDR_VAR 0 8
18820: PUSH
18821: LD_INT 0
18823: ST_TO_ADDR
18824: GO 18842
// min_y := y - r ;
18826: LD_ADDR_VAR 0 8
18830: PUSH
18831: LD_VAR 0 3
18835: PUSH
18836: LD_VAR 0 4
18840: MINUS
18841: ST_TO_ADDR
// max_x := x + r ;
18842: LD_ADDR_VAR 0 9
18846: PUSH
18847: LD_VAR 0 2
18851: PUSH
18852: LD_VAR 0 4
18856: PLUS
18857: ST_TO_ADDR
// max_y := y + r ;
18858: LD_ADDR_VAR 0 10
18862: PUSH
18863: LD_VAR 0 3
18867: PUSH
18868: LD_VAR 0 4
18872: PLUS
18873: ST_TO_ADDR
// for _x = min_x to max_x do
18874: LD_ADDR_VAR 0 11
18878: PUSH
18879: DOUBLE
18880: LD_VAR 0 7
18884: DEC
18885: ST_TO_ADDR
18886: LD_VAR 0 9
18890: PUSH
18891: FOR_TO
18892: IFFALSE 19011
// for _y = min_y to max_y do
18894: LD_ADDR_VAR 0 12
18898: PUSH
18899: DOUBLE
18900: LD_VAR 0 8
18904: DEC
18905: ST_TO_ADDR
18906: LD_VAR 0 10
18910: PUSH
18911: FOR_TO
18912: IFFALSE 19007
// begin if not ValidHex ( _x , _y ) then
18914: LD_VAR 0 11
18918: PPUSH
18919: LD_VAR 0 12
18923: PPUSH
18924: CALL_OW 488
18928: NOT
18929: IFFALSE 18933
// continue ;
18931: GO 18911
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18933: LD_VAR 0 11
18937: PPUSH
18938: LD_VAR 0 12
18942: PPUSH
18943: CALL_OW 351
18947: IFFALSE 18965
18949: PUSH
18950: LD_VAR 0 11
18954: PPUSH
18955: LD_VAR 0 12
18959: PPUSH
18960: CALL_OW 554
18964: AND
18965: IFFALSE 19005
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18967: LD_ADDR_VAR 0 13
18971: PUSH
18972: LD_VAR 0 13
18976: PPUSH
18977: LD_VAR 0 13
18981: PUSH
18982: LD_INT 1
18984: PLUS
18985: PPUSH
18986: LD_VAR 0 11
18990: PUSH
18991: LD_VAR 0 12
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: PPUSH
19000: CALL_OW 2
19004: ST_TO_ADDR
// end ;
19005: GO 18911
19007: POP
19008: POP
19009: GO 18891
19011: POP
19012: POP
// if not list then
19013: LD_VAR 0 13
19017: NOT
19018: IFFALSE 19022
// exit ;
19020: GO 19268
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
19022: LD_ADDR_VAR 0 13
19026: PUSH
19027: LD_VAR 0 1
19031: PPUSH
19032: LD_VAR 0 13
19036: PPUSH
19037: LD_INT 1
19039: PPUSH
19040: LD_INT 1
19042: PPUSH
19043: CALL 29035 0 4
19047: ST_TO_ADDR
// ComStop ( flame ) ;
19048: LD_VAR 0 1
19052: PPUSH
19053: CALL_OW 141
// for i in list do
19057: LD_ADDR_VAR 0 6
19061: PUSH
19062: LD_VAR 0 13
19066: PUSH
19067: FOR_IN
19068: IFFALSE 19099
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
19070: LD_VAR 0 1
19074: PPUSH
19075: LD_VAR 0 6
19079: PUSH
19080: LD_INT 1
19082: ARRAY
19083: PPUSH
19084: LD_VAR 0 6
19088: PUSH
19089: LD_INT 2
19091: ARRAY
19092: PPUSH
19093: CALL_OW 176
19097: GO 19067
19099: POP
19100: POP
// repeat wait ( 0 0$1 ) ;
19101: LD_INT 35
19103: PPUSH
19104: CALL_OW 67
// task := GetTaskList ( flame ) ;
19108: LD_ADDR_VAR 0 14
19112: PUSH
19113: LD_VAR 0 1
19117: PPUSH
19118: CALL_OW 437
19122: ST_TO_ADDR
// if not task then
19123: LD_VAR 0 14
19127: NOT
19128: IFFALSE 19132
// exit ;
19130: GO 19268
// if task [ 1 ] [ 1 ] <> | then
19132: LD_VAR 0 14
19136: PUSH
19137: LD_INT 1
19139: ARRAY
19140: PUSH
19141: LD_INT 1
19143: ARRAY
19144: PUSH
19145: LD_STRING |
19147: NONEQUAL
19148: IFFALSE 19152
// exit ;
19150: GO 19268
// _x := task [ 1 ] [ 2 ] ;
19152: LD_ADDR_VAR 0 11
19156: PUSH
19157: LD_VAR 0 14
19161: PUSH
19162: LD_INT 1
19164: ARRAY
19165: PUSH
19166: LD_INT 2
19168: ARRAY
19169: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
19170: LD_ADDR_VAR 0 12
19174: PUSH
19175: LD_VAR 0 14
19179: PUSH
19180: LD_INT 1
19182: ARRAY
19183: PUSH
19184: LD_INT 3
19186: ARRAY
19187: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
19188: LD_VAR 0 11
19192: PPUSH
19193: LD_VAR 0 12
19197: PPUSH
19198: CALL_OW 351
19202: NOT
19203: IFTRUE 19222
19205: PUSH
19206: LD_VAR 0 11
19210: PPUSH
19211: LD_VAR 0 12
19215: PPUSH
19216: CALL_OW 554
19220: NOT
19221: OR
19222: IFFALSE 19256
// begin task := Delete ( task , 1 ) ;
19224: LD_ADDR_VAR 0 14
19228: PUSH
19229: LD_VAR 0 14
19233: PPUSH
19234: LD_INT 1
19236: PPUSH
19237: CALL_OW 3
19241: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
19242: LD_VAR 0 1
19246: PPUSH
19247: LD_VAR 0 14
19251: PPUSH
19252: CALL_OW 446
// end ; until not HasTask ( flame ) ;
19256: LD_VAR 0 1
19260: PPUSH
19261: CALL_OW 314
19265: NOT
19266: IFFALSE 19101
// end ;
19268: LD_VAR 0 5
19272: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
19273: LD_EXP 63
19277: NOT
19278: IFFALSE 19328
19280: GO 19282
19282: DISABLE
// begin initHack := true ;
19283: LD_ADDR_EXP 63
19287: PUSH
19288: LD_INT 1
19290: ST_TO_ADDR
// hackTanks := [ ] ;
19291: LD_ADDR_EXP 64
19295: PUSH
19296: EMPTY
19297: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
19298: LD_ADDR_EXP 65
19302: PUSH
19303: EMPTY
19304: ST_TO_ADDR
// hackLimit := 3 ;
19305: LD_ADDR_EXP 66
19309: PUSH
19310: LD_INT 3
19312: ST_TO_ADDR
// hackDist := 12 ;
19313: LD_ADDR_EXP 67
19317: PUSH
19318: LD_INT 12
19320: ST_TO_ADDR
// hackCounter := [ ] ;
19321: LD_ADDR_EXP 68
19325: PUSH
19326: EMPTY
19327: ST_TO_ADDR
// end ;
19328: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
19329: LD_EXP 63
19333: IFFALSE 19351
19335: PUSH
19336: LD_INT 34
19338: PUSH
19339: LD_INT 99
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: PPUSH
19346: CALL_OW 69
19350: AND
19351: IFFALSE 19604
19353: GO 19355
19355: DISABLE
19356: LD_INT 0
19358: PPUSH
19359: PPUSH
// begin enable ;
19360: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
19361: LD_ADDR_VAR 0 1
19365: PUSH
19366: LD_INT 34
19368: PUSH
19369: LD_INT 99
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PPUSH
19376: CALL_OW 69
19380: PUSH
19381: FOR_IN
19382: IFFALSE 19602
// begin if not i in hackTanks then
19384: LD_VAR 0 1
19388: PUSH
19389: LD_EXP 64
19393: IN
19394: NOT
19395: IFFALSE 19478
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
19397: LD_ADDR_EXP 64
19401: PUSH
19402: LD_EXP 64
19406: PPUSH
19407: LD_EXP 64
19411: PUSH
19412: LD_INT 1
19414: PLUS
19415: PPUSH
19416: LD_VAR 0 1
19420: PPUSH
19421: CALL_OW 1
19425: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
19426: LD_ADDR_EXP 65
19430: PUSH
19431: LD_EXP 65
19435: PPUSH
19436: LD_EXP 65
19440: PUSH
19441: LD_INT 1
19443: PLUS
19444: PPUSH
19445: EMPTY
19446: PPUSH
19447: CALL_OW 1
19451: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
19452: LD_ADDR_EXP 68
19456: PUSH
19457: LD_EXP 68
19461: PPUSH
19462: LD_EXP 68
19466: PUSH
19467: LD_INT 1
19469: PLUS
19470: PPUSH
19471: EMPTY
19472: PPUSH
19473: CALL_OW 1
19477: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19478: LD_VAR 0 1
19482: PPUSH
19483: CALL_OW 302
19487: NOT
19488: IFFALSE 19501
// begin HackUnlinkAll ( i ) ;
19490: LD_VAR 0 1
19494: PPUSH
19495: CALL 19607 0 1
// continue ;
19499: GO 19381
// end ; HackCheckCapturedStatus ( i ) ;
19501: LD_VAR 0 1
19505: PPUSH
19506: CALL 20052 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19510: LD_ADDR_VAR 0 2
19514: PUSH
19515: LD_INT 81
19517: PUSH
19518: LD_VAR 0 1
19522: PPUSH
19523: CALL_OW 255
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: PUSH
19532: LD_INT 33
19534: PUSH
19535: LD_INT 3
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: PUSH
19542: LD_INT 91
19544: PUSH
19545: LD_VAR 0 1
19549: PUSH
19550: LD_EXP 67
19554: PUSH
19555: EMPTY
19556: LIST
19557: LIST
19558: LIST
19559: PUSH
19560: LD_INT 50
19562: PUSH
19563: EMPTY
19564: LIST
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: PPUSH
19572: CALL_OW 69
19576: ST_TO_ADDR
// if not tmp then
19577: LD_VAR 0 2
19581: NOT
19582: IFFALSE 19586
// continue ;
19584: GO 19381
// HackLink ( i , tmp ) ;
19586: LD_VAR 0 1
19590: PPUSH
19591: LD_VAR 0 2
19595: PPUSH
19596: CALL 19743 0 2
// end ;
19600: GO 19381
19602: POP
19603: POP
// end ;
19604: PPOPN 2
19606: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19607: LD_INT 0
19609: PPUSH
19610: PPUSH
19611: PPUSH
// if not hack in hackTanks then
19612: LD_VAR 0 1
19616: PUSH
19617: LD_EXP 64
19621: IN
19622: NOT
19623: IFFALSE 19627
// exit ;
19625: GO 19738
// index := GetElementIndex ( hackTanks , hack ) ;
19627: LD_ADDR_VAR 0 4
19631: PUSH
19632: LD_EXP 64
19636: PPUSH
19637: LD_VAR 0 1
19641: PPUSH
19642: CALL 28330 0 2
19646: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19647: LD_EXP 65
19651: PUSH
19652: LD_VAR 0 4
19656: ARRAY
19657: IFFALSE 19738
// begin for i in hackTanksCaptured [ index ] do
19659: LD_ADDR_VAR 0 3
19663: PUSH
19664: LD_EXP 65
19668: PUSH
19669: LD_VAR 0 4
19673: ARRAY
19674: PUSH
19675: FOR_IN
19676: IFFALSE 19702
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
19678: LD_VAR 0 3
19682: PUSH
19683: LD_INT 1
19685: ARRAY
19686: PPUSH
19687: LD_VAR 0 3
19691: PUSH
19692: LD_INT 2
19694: ARRAY
19695: PPUSH
19696: CALL_OW 235
19700: GO 19675
19702: POP
19703: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
19704: LD_ADDR_EXP 65
19708: PUSH
19709: LD_EXP 65
19713: PPUSH
19714: LD_VAR 0 4
19718: PPUSH
19719: EMPTY
19720: PPUSH
19721: CALL_OW 1
19725: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
19726: LD_VAR 0 1
19730: PPUSH
19731: LD_INT 0
19733: PPUSH
19734: CALL_OW 505
// end ; end ;
19738: LD_VAR 0 2
19742: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
19743: LD_INT 0
19745: PPUSH
19746: PPUSH
19747: PPUSH
// if not hack in hackTanks or not vehicles then
19748: LD_VAR 0 1
19752: PUSH
19753: LD_EXP 64
19757: IN
19758: NOT
19759: IFTRUE 19768
19761: PUSH
19762: LD_VAR 0 2
19766: NOT
19767: OR
19768: IFFALSE 19772
// exit ;
19770: GO 20047
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
19772: LD_ADDR_VAR 0 2
19776: PUSH
19777: LD_VAR 0 1
19781: PPUSH
19782: LD_VAR 0 2
19786: PPUSH
19787: LD_INT 1
19789: PPUSH
19790: LD_INT 1
19792: PPUSH
19793: CALL 28982 0 4
19797: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
19798: LD_ADDR_VAR 0 5
19802: PUSH
19803: LD_EXP 64
19807: PPUSH
19808: LD_VAR 0 1
19812: PPUSH
19813: CALL 28330 0 2
19817: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19818: LD_EXP 65
19822: PUSH
19823: LD_VAR 0 5
19827: ARRAY
19828: PUSH
19829: LD_EXP 66
19833: LESS
19834: IFFALSE 20023
// begin for i := 1 to vehicles do
19836: LD_ADDR_VAR 0 4
19840: PUSH
19841: DOUBLE
19842: LD_INT 1
19844: DEC
19845: ST_TO_ADDR
19846: LD_VAR 0 2
19850: PUSH
19851: FOR_TO
19852: IFFALSE 20021
// begin if hackTanksCaptured [ index ] = hackLimit then
19854: LD_EXP 65
19858: PUSH
19859: LD_VAR 0 5
19863: ARRAY
19864: PUSH
19865: LD_EXP 66
19869: EQUAL
19870: IFFALSE 19874
// break ;
19872: GO 20021
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
19874: LD_ADDR_EXP 68
19878: PUSH
19879: LD_EXP 68
19883: PPUSH
19884: LD_VAR 0 5
19888: PPUSH
19889: LD_EXP 68
19893: PUSH
19894: LD_VAR 0 5
19898: ARRAY
19899: PUSH
19900: LD_INT 1
19902: PLUS
19903: PPUSH
19904: CALL_OW 1
19908: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
19909: LD_ADDR_EXP 65
19913: PUSH
19914: LD_EXP 65
19918: PPUSH
19919: LD_VAR 0 5
19923: PUSH
19924: LD_EXP 65
19928: PUSH
19929: LD_VAR 0 5
19933: ARRAY
19934: PUSH
19935: LD_INT 1
19937: PLUS
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: PPUSH
19943: LD_VAR 0 2
19947: PUSH
19948: LD_VAR 0 4
19952: ARRAY
19953: PUSH
19954: LD_VAR 0 2
19958: PUSH
19959: LD_VAR 0 4
19963: ARRAY
19964: PPUSH
19965: CALL_OW 255
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: PPUSH
19974: CALL 28547 0 3
19978: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19979: LD_VAR 0 2
19983: PUSH
19984: LD_VAR 0 4
19988: ARRAY
19989: PPUSH
19990: LD_VAR 0 1
19994: PPUSH
19995: CALL_OW 255
19999: PPUSH
20000: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
20004: LD_VAR 0 2
20008: PUSH
20009: LD_VAR 0 4
20013: ARRAY
20014: PPUSH
20015: CALL_OW 141
// end ;
20019: GO 19851
20021: POP
20022: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20023: LD_VAR 0 1
20027: PPUSH
20028: LD_EXP 65
20032: PUSH
20033: LD_VAR 0 5
20037: ARRAY
20038: PUSH
20039: LD_INT 0
20041: PLUS
20042: PPUSH
20043: CALL_OW 505
// end ;
20047: LD_VAR 0 3
20051: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
20052: LD_INT 0
20054: PPUSH
20055: PPUSH
20056: PPUSH
20057: PPUSH
// if not hack in hackTanks then
20058: LD_VAR 0 1
20062: PUSH
20063: LD_EXP 64
20067: IN
20068: NOT
20069: IFFALSE 20073
// exit ;
20071: GO 20317
// index := GetElementIndex ( hackTanks , hack ) ;
20073: LD_ADDR_VAR 0 4
20077: PUSH
20078: LD_EXP 64
20082: PPUSH
20083: LD_VAR 0 1
20087: PPUSH
20088: CALL 28330 0 2
20092: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
20093: LD_ADDR_VAR 0 3
20097: PUSH
20098: DOUBLE
20099: LD_EXP 65
20103: PUSH
20104: LD_VAR 0 4
20108: ARRAY
20109: INC
20110: ST_TO_ADDR
20111: LD_INT 1
20113: PUSH
20114: FOR_DOWNTO
20115: IFFALSE 20291
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
20117: LD_ADDR_VAR 0 5
20121: PUSH
20122: LD_EXP 65
20126: PUSH
20127: LD_VAR 0 4
20131: ARRAY
20132: PUSH
20133: LD_VAR 0 3
20137: ARRAY
20138: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
20139: LD_VAR 0 5
20143: PUSH
20144: LD_INT 1
20146: ARRAY
20147: PPUSH
20148: CALL_OW 302
20152: NOT
20153: IFTRUE 20181
20155: PUSH
20156: LD_VAR 0 5
20160: PUSH
20161: LD_INT 1
20163: ARRAY
20164: PPUSH
20165: CALL_OW 255
20169: PUSH
20170: LD_VAR 0 1
20174: PPUSH
20175: CALL_OW 255
20179: NONEQUAL
20180: OR
20181: IFFALSE 20289
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
20183: LD_VAR 0 5
20187: PUSH
20188: LD_INT 1
20190: ARRAY
20191: PPUSH
20192: CALL_OW 305
20196: IFFALSE 20224
20198: PUSH
20199: LD_VAR 0 5
20203: PUSH
20204: LD_INT 1
20206: ARRAY
20207: PPUSH
20208: CALL_OW 255
20212: PUSH
20213: LD_VAR 0 1
20217: PPUSH
20218: CALL_OW 255
20222: EQUAL
20223: AND
20224: IFFALSE 20248
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
20226: LD_VAR 0 5
20230: PUSH
20231: LD_INT 1
20233: ARRAY
20234: PPUSH
20235: LD_VAR 0 5
20239: PUSH
20240: LD_INT 2
20242: ARRAY
20243: PPUSH
20244: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
20248: LD_ADDR_EXP 65
20252: PUSH
20253: LD_EXP 65
20257: PPUSH
20258: LD_VAR 0 4
20262: PPUSH
20263: LD_EXP 65
20267: PUSH
20268: LD_VAR 0 4
20272: ARRAY
20273: PPUSH
20274: LD_VAR 0 3
20278: PPUSH
20279: CALL_OW 3
20283: PPUSH
20284: CALL_OW 1
20288: ST_TO_ADDR
// end ; end ;
20289: GO 20114
20291: POP
20292: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20293: LD_VAR 0 1
20297: PPUSH
20298: LD_EXP 65
20302: PUSH
20303: LD_VAR 0 4
20307: ARRAY
20308: PUSH
20309: LD_INT 0
20311: PLUS
20312: PPUSH
20313: CALL_OW 505
// end ;
20317: LD_VAR 0 2
20321: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
20322: LD_INT 0
20324: PPUSH
20325: PPUSH
20326: PPUSH
20327: PPUSH
// if not hack in hackTanks then
20328: LD_VAR 0 1
20332: PUSH
20333: LD_EXP 64
20337: IN
20338: NOT
20339: IFFALSE 20343
// exit ;
20341: GO 20428
// index := GetElementIndex ( hackTanks , hack ) ;
20343: LD_ADDR_VAR 0 5
20347: PUSH
20348: LD_EXP 64
20352: PPUSH
20353: LD_VAR 0 1
20357: PPUSH
20358: CALL 28330 0 2
20362: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
20363: LD_ADDR_VAR 0 4
20367: PUSH
20368: DOUBLE
20369: LD_INT 1
20371: DEC
20372: ST_TO_ADDR
20373: LD_EXP 65
20377: PUSH
20378: LD_VAR 0 5
20382: ARRAY
20383: PUSH
20384: FOR_TO
20385: IFFALSE 20426
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
20387: LD_EXP 65
20391: PUSH
20392: LD_VAR 0 5
20396: ARRAY
20397: PUSH
20398: LD_VAR 0 4
20402: ARRAY
20403: PUSH
20404: LD_INT 1
20406: ARRAY
20407: PUSH
20408: LD_VAR 0 2
20412: EQUAL
20413: IFFALSE 20424
// KillUnit ( vehicle ) ;
20415: LD_VAR 0 2
20419: PPUSH
20420: CALL_OW 66
20424: GO 20384
20426: POP
20427: POP
// end ;
20428: LD_VAR 0 3
20432: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
20433: LD_EXP 69
20437: NOT
20438: IFFALSE 20571
20440: GO 20442
20442: DISABLE
20443: LD_INT 0
20445: PPUSH
// begin initMiner := true ;
20446: LD_ADDR_EXP 69
20450: PUSH
20451: LD_INT 1
20453: ST_TO_ADDR
// minersList := [ ] ;
20454: LD_ADDR_EXP 70
20458: PUSH
20459: EMPTY
20460: ST_TO_ADDR
// minerMinesList := [ ] ;
20461: LD_ADDR_EXP 71
20465: PUSH
20466: EMPTY
20467: ST_TO_ADDR
// minesLimitPerVehicle := 6 ;
20468: LD_ADDR_EXP 72
20472: PUSH
20473: LD_INT 6
20475: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
20476: LD_ADDR_VAR 0 1
20480: PUSH
20481: LD_INT 34
20483: PUSH
20484: LD_INT 81
20486: PUSH
20487: EMPTY
20488: LIST
20489: LIST
20490: PPUSH
20491: CALL_OW 69
20495: PUSH
20496: FOR_IN
20497: IFFALSE 20569
// begin if not i in minersList then
20499: LD_VAR 0 1
20503: PUSH
20504: LD_EXP 70
20508: IN
20509: NOT
20510: IFFALSE 20567
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
20512: LD_ADDR_EXP 70
20516: PUSH
20517: LD_EXP 70
20521: PPUSH
20522: LD_EXP 70
20526: PUSH
20527: LD_INT 1
20529: PLUS
20530: PPUSH
20531: LD_VAR 0 1
20535: PPUSH
20536: CALL_OW 1
20540: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20541: LD_ADDR_EXP 71
20545: PUSH
20546: LD_EXP 71
20550: PPUSH
20551: LD_EXP 71
20555: PUSH
20556: LD_INT 1
20558: PLUS
20559: PPUSH
20560: EMPTY
20561: PPUSH
20562: CALL_OW 1
20566: ST_TO_ADDR
// end end ;
20567: GO 20496
20569: POP
20570: POP
// end ;
20571: PPOPN 1
20573: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
20574: LD_EXP 69
20578: IFFALSE 20609
20580: PUSH
20581: LD_EXP 71
20585: PPUSH
20586: CALL 25629 0 1
20590: IFTRUE 20608
20592: PUSH
20593: LD_INT 34
20595: PUSH
20596: LD_INT 81
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PPUSH
20603: CALL_OW 69
20607: OR
20608: AND
20609: IFFALSE 21108
20611: GO 20613
20613: DISABLE
20614: LD_INT 0
20616: PPUSH
20617: PPUSH
20618: PPUSH
20619: PPUSH
// begin enable ;
20620: ENABLE
// for i := minerMinesList downto 1 do
20621: LD_ADDR_VAR 0 1
20625: PUSH
20626: DOUBLE
20627: LD_EXP 71
20631: INC
20632: ST_TO_ADDR
20633: LD_INT 1
20635: PUSH
20636: FOR_DOWNTO
20637: IFFALSE 21106
// begin if IsLive ( minersList [ i ] ) then
20639: LD_EXP 70
20643: PUSH
20644: LD_VAR 0 1
20648: ARRAY
20649: PPUSH
20650: CALL_OW 300
20654: IFFALSE 20687
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
20656: LD_EXP 70
20660: PUSH
20661: LD_VAR 0 1
20665: ARRAY
20666: PPUSH
20667: LD_EXP 71
20671: PUSH
20672: LD_VAR 0 1
20676: ARRAY
20677: PPUSH
20678: CALL 25629 0 1
20682: PPUSH
20683: CALL_OW 505
// if not minerMinesList [ i ] then
20687: LD_EXP 71
20691: PUSH
20692: LD_VAR 0 1
20696: ARRAY
20697: NOT
20698: IFFALSE 20702
// continue ;
20700: GO 20636
// for j := minerMinesList [ i ] downto 1 do
20702: LD_ADDR_VAR 0 2
20706: PUSH
20707: DOUBLE
20708: LD_EXP 71
20712: PUSH
20713: LD_VAR 0 1
20717: ARRAY
20718: INC
20719: ST_TO_ADDR
20720: LD_INT 1
20722: PUSH
20723: FOR_DOWNTO
20724: IFFALSE 21102
// begin side := GetSide ( minersList [ i ] ) ;
20726: LD_ADDR_VAR 0 3
20730: PUSH
20731: LD_EXP 70
20735: PUSH
20736: LD_VAR 0 1
20740: ARRAY
20741: PPUSH
20742: CALL_OW 255
20746: ST_TO_ADDR
// if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
20747: LD_EXP 70
20751: PUSH
20752: LD_VAR 0 1
20756: ARRAY
20757: PPUSH
20758: CALL_OW 301
20762: IFTRUE 20782
20764: PUSH
20765: LD_EXP 70
20769: PUSH
20770: LD_VAR 0 1
20774: ARRAY
20775: PPUSH
20776: CALL_OW 305
20780: NOT
20781: OR
20782: IFFALSE 20873
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
20784: LD_EXP 71
20788: PUSH
20789: LD_VAR 0 1
20793: ARRAY
20794: PUSH
20795: LD_VAR 0 2
20799: ARRAY
20800: PUSH
20801: LD_INT 1
20803: ARRAY
20804: PPUSH
20805: LD_EXP 71
20809: PUSH
20810: LD_VAR 0 1
20814: ARRAY
20815: PUSH
20816: LD_VAR 0 2
20820: ARRAY
20821: PUSH
20822: LD_INT 2
20824: ARRAY
20825: PPUSH
20826: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
20830: LD_ADDR_EXP 71
20834: PUSH
20835: LD_EXP 71
20839: PPUSH
20840: LD_VAR 0 1
20844: PPUSH
20845: LD_EXP 71
20849: PUSH
20850: LD_VAR 0 1
20854: ARRAY
20855: PPUSH
20856: LD_VAR 0 2
20860: PPUSH
20861: CALL_OW 3
20865: PPUSH
20866: CALL_OW 1
20870: ST_TO_ADDR
// continue ;
20871: GO 20723
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
20873: LD_ADDR_VAR 0 4
20877: PUSH
20878: LD_EXP 71
20882: PUSH
20883: LD_VAR 0 1
20887: ARRAY
20888: PUSH
20889: LD_VAR 0 2
20893: ARRAY
20894: PUSH
20895: LD_INT 1
20897: ARRAY
20898: PPUSH
20899: LD_EXP 71
20903: PUSH
20904: LD_VAR 0 1
20908: ARRAY
20909: PUSH
20910: LD_VAR 0 2
20914: ARRAY
20915: PUSH
20916: LD_INT 2
20918: ARRAY
20919: PPUSH
20920: CALL_OW 428
20924: ST_TO_ADDR
// if not tmp then
20925: LD_VAR 0 4
20929: NOT
20930: IFFALSE 20934
// continue ;
20932: GO 20723
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
20934: LD_VAR 0 4
20938: PUSH
20939: LD_INT 81
20941: PUSH
20942: LD_VAR 0 3
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PPUSH
20951: CALL_OW 69
20955: IN
20956: IFFALSE 21006
20958: PUSH
20959: LD_EXP 71
20963: PUSH
20964: LD_VAR 0 1
20968: ARRAY
20969: PUSH
20970: LD_VAR 0 2
20974: ARRAY
20975: PUSH
20976: LD_INT 1
20978: ARRAY
20979: PPUSH
20980: LD_EXP 71
20984: PUSH
20985: LD_VAR 0 1
20989: ARRAY
20990: PUSH
20991: LD_VAR 0 2
20995: ARRAY
20996: PUSH
20997: LD_INT 2
20999: ARRAY
21000: PPUSH
21001: CALL_OW 458
21005: AND
21006: IFFALSE 21100
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
21008: LD_EXP 71
21012: PUSH
21013: LD_VAR 0 1
21017: ARRAY
21018: PUSH
21019: LD_VAR 0 2
21023: ARRAY
21024: PUSH
21025: LD_INT 1
21027: ARRAY
21028: PPUSH
21029: LD_EXP 71
21033: PUSH
21034: LD_VAR 0 1
21038: ARRAY
21039: PUSH
21040: LD_VAR 0 2
21044: ARRAY
21045: PUSH
21046: LD_INT 2
21048: ARRAY
21049: PPUSH
21050: LD_VAR 0 3
21054: PPUSH
21055: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
21059: LD_ADDR_EXP 71
21063: PUSH
21064: LD_EXP 71
21068: PPUSH
21069: LD_VAR 0 1
21073: PPUSH
21074: LD_EXP 71
21078: PUSH
21079: LD_VAR 0 1
21083: ARRAY
21084: PPUSH
21085: LD_VAR 0 2
21089: PPUSH
21090: CALL_OW 3
21094: PPUSH
21095: CALL_OW 1
21099: ST_TO_ADDR
// end ; end ;
21100: GO 20723
21102: POP
21103: POP
// end ;
21104: GO 20636
21106: POP
21107: POP
// end ;
21108: PPOPN 4
21110: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
21111: LD_INT 0
21113: PPUSH
21114: PPUSH
21115: PPUSH
21116: PPUSH
// result := false ;
21117: LD_ADDR_VAR 0 4
21121: PUSH
21122: LD_INT 0
21124: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
21125: LD_VAR 0 1
21129: PPUSH
21130: CALL_OW 264
21134: PUSH
21135: LD_INT 81
21137: EQUAL
21138: NOT
21139: IFFALSE 21143
// exit ;
21141: GO 21513
// side := GetSide ( unit ) ;
21143: LD_ADDR_VAR 0 6
21147: PUSH
21148: LD_VAR 0 1
21152: PPUSH
21153: CALL_OW 255
21157: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
21158: LD_ADDR_VAR 0 5
21162: PUSH
21163: LD_EXP 70
21167: PPUSH
21168: LD_VAR 0 1
21172: PPUSH
21173: CALL 28330 0 2
21177: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
21178: LD_EXP 71
21182: PUSH
21183: LD_VAR 0 5
21187: ARRAY
21188: PUSH
21189: LD_EXP 72
21193: GREATEREQUAL
21194: IFFALSE 21198
// exit ;
21196: GO 21513
// ComMoveXY ( unit , x , y ) ;
21198: LD_VAR 0 1
21202: PPUSH
21203: LD_VAR 0 2
21207: PPUSH
21208: LD_VAR 0 3
21212: PPUSH
21213: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21217: LD_INT 35
21219: PPUSH
21220: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
21224: LD_VAR 0 1
21228: PPUSH
21229: LD_VAR 0 2
21233: PPUSH
21234: LD_VAR 0 3
21238: PPUSH
21239: CALL 60376 0 3
21243: NOT
21244: IFFALSE 21257
21246: PUSH
21247: LD_VAR 0 1
21251: PPUSH
21252: CALL_OW 314
21256: AND
21257: IFFALSE 21261
// exit ;
21259: GO 21513
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
21261: LD_VAR 0 2
21265: PPUSH
21266: LD_VAR 0 3
21270: PPUSH
21271: CALL_OW 428
21275: PUSH
21276: LD_VAR 0 1
21280: EQUAL
21281: IFFALSE 21295
21283: PUSH
21284: LD_VAR 0 1
21288: PPUSH
21289: CALL_OW 314
21293: NOT
21294: AND
21295: IFFALSE 21217
// if MineAtPos ( x , y ) then
21297: LD_VAR 0 2
21301: PPUSH
21302: LD_VAR 0 3
21306: PPUSH
21307: CALL_OW 458
21311: IFFALSE 21315
// exit ;
21313: GO 21513
// if your_side = side then
21315: LD_OWVAR 2
21319: PUSH
21320: LD_VAR 0 6
21324: EQUAL
21325: IFFALSE 21344
// PlaySoundXY ( x , y , PlantMine ) ;
21327: LD_VAR 0 2
21331: PPUSH
21332: LD_VAR 0 3
21336: PPUSH
21337: LD_STRING PlantMine
21339: PPUSH
21340: CALL_OW 366
// repeat wait ( 1 ) ;
21344: LD_INT 1
21346: PPUSH
21347: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
21351: LD_VAR 0 2
21355: PPUSH
21356: LD_VAR 0 3
21360: PPUSH
21361: LD_VAR 0 6
21365: PPUSH
21366: LD_INT 0
21368: PPUSH
21369: CALL_OW 454
21373: IFFALSE 21344
// if MineAtPos ( x , y ) then
21375: LD_VAR 0 2
21379: PPUSH
21380: LD_VAR 0 3
21384: PPUSH
21385: CALL_OW 458
21389: IFFALSE 21505
// begin for i in minerMinesList [ index ] do
21391: LD_ADDR_VAR 0 7
21395: PUSH
21396: LD_EXP 71
21400: PUSH
21401: LD_VAR 0 5
21405: ARRAY
21406: PUSH
21407: FOR_IN
21408: IFFALSE 21450
// if i [ 1 ] = x and i [ 2 ] = y then
21410: LD_VAR 0 7
21414: PUSH
21415: LD_INT 1
21417: ARRAY
21418: PUSH
21419: LD_VAR 0 2
21423: EQUAL
21424: IFFALSE 21442
21426: PUSH
21427: LD_VAR 0 7
21431: PUSH
21432: LD_INT 2
21434: ARRAY
21435: PUSH
21436: LD_VAR 0 3
21440: EQUAL
21441: AND
21442: IFFALSE 21448
// exit ;
21444: POP
21445: POP
21446: GO 21513
21448: GO 21407
21450: POP
21451: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
21452: LD_ADDR_EXP 71
21456: PUSH
21457: LD_EXP 71
21461: PPUSH
21462: LD_VAR 0 5
21466: PUSH
21467: LD_EXP 71
21471: PUSH
21472: LD_VAR 0 5
21476: ARRAY
21477: PUSH
21478: LD_INT 1
21480: PLUS
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: PPUSH
21486: LD_VAR 0 2
21490: PUSH
21491: LD_VAR 0 3
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: PPUSH
21500: CALL 28547 0 3
21504: ST_TO_ADDR
// end ; result := true ;
21505: LD_ADDR_VAR 0 4
21509: PUSH
21510: LD_INT 1
21512: ST_TO_ADDR
// end ;
21513: LD_VAR 0 4
21517: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
21518: LD_INT 0
21520: PPUSH
21521: PPUSH
21522: PPUSH
// if not unit in minersList then
21523: LD_VAR 0 1
21527: PUSH
21528: LD_EXP 70
21532: IN
21533: NOT
21534: IFFALSE 21538
// exit ;
21536: GO 21745
// index := GetElementIndex ( minersList , unit ) ;
21538: LD_ADDR_VAR 0 6
21542: PUSH
21543: LD_EXP 70
21547: PPUSH
21548: LD_VAR 0 1
21552: PPUSH
21553: CALL 28330 0 2
21557: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
21558: LD_ADDR_VAR 0 5
21562: PUSH
21563: DOUBLE
21564: LD_EXP 71
21568: PUSH
21569: LD_VAR 0 6
21573: ARRAY
21574: INC
21575: ST_TO_ADDR
21576: LD_INT 1
21578: PUSH
21579: FOR_DOWNTO
21580: IFFALSE 21743
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
21582: LD_EXP 71
21586: PUSH
21587: LD_VAR 0 6
21591: ARRAY
21592: PUSH
21593: LD_VAR 0 5
21597: ARRAY
21598: PUSH
21599: LD_INT 1
21601: ARRAY
21602: PPUSH
21603: LD_EXP 71
21607: PUSH
21608: LD_VAR 0 6
21612: ARRAY
21613: PUSH
21614: LD_VAR 0 5
21618: ARRAY
21619: PUSH
21620: LD_INT 2
21622: ARRAY
21623: PPUSH
21624: LD_VAR 0 2
21628: PPUSH
21629: LD_VAR 0 3
21633: PPUSH
21634: CALL_OW 298
21638: PUSH
21639: LD_INT 6
21641: LESS
21642: IFFALSE 21741
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21644: LD_EXP 71
21648: PUSH
21649: LD_VAR 0 6
21653: ARRAY
21654: PUSH
21655: LD_VAR 0 5
21659: ARRAY
21660: PUSH
21661: LD_INT 1
21663: ARRAY
21664: PPUSH
21665: LD_EXP 71
21669: PUSH
21670: LD_VAR 0 6
21674: ARRAY
21675: PUSH
21676: LD_VAR 0 5
21680: ARRAY
21681: PUSH
21682: LD_INT 2
21684: ARRAY
21685: PPUSH
21686: LD_VAR 0 1
21690: PPUSH
21691: CALL_OW 255
21695: PPUSH
21696: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21700: LD_ADDR_EXP 71
21704: PUSH
21705: LD_EXP 71
21709: PPUSH
21710: LD_VAR 0 6
21714: PPUSH
21715: LD_EXP 71
21719: PUSH
21720: LD_VAR 0 6
21724: ARRAY
21725: PPUSH
21726: LD_VAR 0 5
21730: PPUSH
21731: CALL_OW 3
21735: PPUSH
21736: CALL_OW 1
21740: ST_TO_ADDR
// end ; end ;
21741: GO 21579
21743: POP
21744: POP
// end ;
21745: LD_VAR 0 4
21749: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
21750: LD_INT 0
21752: PPUSH
21753: PPUSH
21754: PPUSH
21755: PPUSH
21756: PPUSH
21757: PPUSH
21758: PPUSH
21759: PPUSH
21760: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
21761: LD_VAR 0 1
21765: PPUSH
21766: CALL_OW 264
21770: PUSH
21771: LD_INT 81
21773: EQUAL
21774: NOT
21775: IFTRUE 21790
21777: PUSH
21778: LD_VAR 0 1
21782: PUSH
21783: LD_EXP 70
21787: IN
21788: NOT
21789: OR
21790: IFFALSE 21794
// exit ;
21792: GO 22120
// index := GetElementIndex ( minersList , unit ) ;
21794: LD_ADDR_VAR 0 6
21798: PUSH
21799: LD_EXP 70
21803: PPUSH
21804: LD_VAR 0 1
21808: PPUSH
21809: CALL 28330 0 2
21813: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
21814: LD_ADDR_VAR 0 8
21818: PUSH
21819: LD_EXP 72
21823: PUSH
21824: LD_EXP 71
21828: PUSH
21829: LD_VAR 0 6
21833: ARRAY
21834: MINUS
21835: ST_TO_ADDR
// if not minesFreeAmount then
21836: LD_VAR 0 8
21840: NOT
21841: IFFALSE 21845
// exit ;
21843: GO 22120
// tmp := [ ] ;
21845: LD_ADDR_VAR 0 7
21849: PUSH
21850: EMPTY
21851: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
21852: LD_ADDR_VAR 0 5
21856: PUSH
21857: DOUBLE
21858: LD_INT 1
21860: DEC
21861: ST_TO_ADDR
21862: LD_VAR 0 8
21866: PUSH
21867: FOR_TO
21868: IFFALSE 22067
// begin _d := rand ( 0 , 5 ) ;
21870: LD_ADDR_VAR 0 11
21874: PUSH
21875: LD_INT 0
21877: PPUSH
21878: LD_INT 5
21880: PPUSH
21881: CALL_OW 12
21885: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
21886: LD_ADDR_VAR 0 12
21890: PUSH
21891: LD_INT 2
21893: PPUSH
21894: LD_INT 6
21896: PPUSH
21897: CALL_OW 12
21901: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
21902: LD_ADDR_VAR 0 9
21906: PUSH
21907: LD_VAR 0 2
21911: PPUSH
21912: LD_VAR 0 11
21916: PPUSH
21917: LD_VAR 0 12
21921: PPUSH
21922: CALL_OW 272
21926: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
21927: LD_ADDR_VAR 0 10
21931: PUSH
21932: LD_VAR 0 3
21936: PPUSH
21937: LD_VAR 0 11
21941: PPUSH
21942: LD_VAR 0 12
21946: PPUSH
21947: CALL_OW 273
21951: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
21952: LD_VAR 0 9
21956: PPUSH
21957: LD_VAR 0 10
21961: PPUSH
21962: CALL_OW 488
21966: IFFALSE 21990
21968: PUSH
21969: LD_VAR 0 9
21973: PUSH
21974: LD_VAR 0 10
21978: PUSH
21979: EMPTY
21980: LIST
21981: LIST
21982: PUSH
21983: LD_VAR 0 7
21987: IN
21988: NOT
21989: AND
21990: IFFALSE 22009
21992: PUSH
21993: LD_VAR 0 9
21997: PPUSH
21998: LD_VAR 0 10
22002: PPUSH
22003: CALL_OW 458
22007: NOT
22008: AND
22009: IFFALSE 22051
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
22011: LD_ADDR_VAR 0 7
22015: PUSH
22016: LD_VAR 0 7
22020: PPUSH
22021: LD_VAR 0 7
22025: PUSH
22026: LD_INT 1
22028: PLUS
22029: PPUSH
22030: LD_VAR 0 9
22034: PUSH
22035: LD_VAR 0 10
22039: PUSH
22040: EMPTY
22041: LIST
22042: LIST
22043: PPUSH
22044: CALL_OW 1
22048: ST_TO_ADDR
22049: GO 22065
// i := i - 1 ;
22051: LD_ADDR_VAR 0 5
22055: PUSH
22056: LD_VAR 0 5
22060: PUSH
22061: LD_INT 1
22063: MINUS
22064: ST_TO_ADDR
// end ;
22065: GO 21867
22067: POP
22068: POP
// for i in tmp do
22069: LD_ADDR_VAR 0 5
22073: PUSH
22074: LD_VAR 0 7
22078: PUSH
22079: FOR_IN
22080: IFFALSE 22118
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
22082: LD_VAR 0 1
22086: PPUSH
22087: LD_VAR 0 5
22091: PUSH
22092: LD_INT 1
22094: ARRAY
22095: PPUSH
22096: LD_VAR 0 5
22100: PUSH
22101: LD_INT 2
22103: ARRAY
22104: PPUSH
22105: CALL 21111 0 3
22109: NOT
22110: IFFALSE 22116
// exit ;
22112: POP
22113: POP
22114: GO 22120
22116: GO 22079
22118: POP
22119: POP
// end ;
22120: LD_VAR 0 4
22124: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
22125: LD_INT 0
22127: PPUSH
22128: PPUSH
22129: PPUSH
22130: PPUSH
22131: PPUSH
22132: PPUSH
22133: PPUSH
22134: PPUSH
22135: PPUSH
// if GetClass ( unit ) <> class_sniper then
22136: LD_VAR 0 1
22140: PPUSH
22141: CALL_OW 257
22145: PUSH
22146: LD_INT 5
22148: NONEQUAL
22149: IFFALSE 22153
// exit ;
22151: GO 22623
// dist := 8 ;
22153: LD_ADDR_VAR 0 5
22157: PUSH
22158: LD_INT 8
22160: ST_TO_ADDR
// viewRange := 12 ;
22161: LD_ADDR_VAR 0 8
22165: PUSH
22166: LD_INT 12
22168: ST_TO_ADDR
// side := GetSide ( unit ) ;
22169: LD_ADDR_VAR 0 6
22173: PUSH
22174: LD_VAR 0 1
22178: PPUSH
22179: CALL_OW 255
22183: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
22184: LD_INT 61
22186: PPUSH
22187: LD_VAR 0 6
22191: PPUSH
22192: CALL_OW 321
22196: PUSH
22197: LD_INT 2
22199: EQUAL
22200: IFFALSE 22210
// viewRange := 16 ;
22202: LD_ADDR_VAR 0 8
22206: PUSH
22207: LD_INT 16
22209: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
22210: LD_VAR 0 1
22214: PPUSH
22215: LD_VAR 0 2
22219: PPUSH
22220: LD_VAR 0 3
22224: PPUSH
22225: CALL_OW 297
22229: PUSH
22230: LD_VAR 0 5
22234: GREATER
22235: IFFALSE 22314
// begin ComMoveXY ( unit , x , y ) ;
22237: LD_VAR 0 1
22241: PPUSH
22242: LD_VAR 0 2
22246: PPUSH
22247: LD_VAR 0 3
22251: PPUSH
22252: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22256: LD_INT 35
22258: PPUSH
22259: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
22263: LD_VAR 0 1
22267: PPUSH
22268: LD_VAR 0 2
22272: PPUSH
22273: LD_VAR 0 3
22277: PPUSH
22278: CALL 60376 0 3
22282: NOT
22283: IFFALSE 22287
// exit ;
22285: GO 22623
// until GetDistUnitXY ( unit , x , y ) < dist ;
22287: LD_VAR 0 1
22291: PPUSH
22292: LD_VAR 0 2
22296: PPUSH
22297: LD_VAR 0 3
22301: PPUSH
22302: CALL_OW 297
22306: PUSH
22307: LD_VAR 0 5
22311: LESS
22312: IFFALSE 22256
// end ; ComTurnXY ( unit , x , y ) ;
22314: LD_VAR 0 1
22318: PPUSH
22319: LD_VAR 0 2
22323: PPUSH
22324: LD_VAR 0 3
22328: PPUSH
22329: CALL_OW 118
// repeat if Multiplayer then
22333: LD_OWVAR 4
22337: IFFALSE 22348
// wait ( 35 ) else
22339: LD_INT 35
22341: PPUSH
22342: CALL_OW 67
22346: GO 22355
// wait ( 5 ) ;
22348: LD_INT 5
22350: PPUSH
22351: CALL_OW 67
// _d := GetDir ( unit ) ;
22355: LD_ADDR_VAR 0 11
22359: PUSH
22360: LD_VAR 0 1
22364: PPUSH
22365: CALL_OW 254
22369: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
22370: LD_ADDR_VAR 0 7
22374: PUSH
22375: LD_VAR 0 1
22379: PPUSH
22380: CALL_OW 250
22384: PPUSH
22385: LD_VAR 0 1
22389: PPUSH
22390: CALL_OW 251
22394: PPUSH
22395: LD_VAR 0 2
22399: PPUSH
22400: LD_VAR 0 3
22404: PPUSH
22405: CALL 63012 0 4
22409: ST_TO_ADDR
// until dir = _d ;
22410: LD_VAR 0 7
22414: PUSH
22415: LD_VAR 0 11
22419: EQUAL
22420: IFFALSE 22333
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
22422: LD_ADDR_VAR 0 9
22426: PUSH
22427: LD_VAR 0 1
22431: PPUSH
22432: CALL_OW 250
22436: PPUSH
22437: LD_VAR 0 7
22441: PPUSH
22442: LD_VAR 0 5
22446: PPUSH
22447: CALL_OW 272
22451: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
22452: LD_ADDR_VAR 0 10
22456: PUSH
22457: LD_VAR 0 1
22461: PPUSH
22462: CALL_OW 251
22466: PPUSH
22467: LD_VAR 0 7
22471: PPUSH
22472: LD_VAR 0 5
22476: PPUSH
22477: CALL_OW 273
22481: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22482: LD_VAR 0 9
22486: PPUSH
22487: LD_VAR 0 10
22491: PPUSH
22492: CALL_OW 488
22496: NOT
22497: IFFALSE 22501
// exit ;
22499: GO 22623
// ComAnimCustom ( unit , 1 ) ;
22501: LD_VAR 0 1
22505: PPUSH
22506: LD_INT 1
22508: PPUSH
22509: CALL_OW 592
// p := 0 ;
22513: LD_ADDR_VAR 0 12
22517: PUSH
22518: LD_INT 0
22520: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
22521: LD_VAR 0 9
22525: PPUSH
22526: LD_VAR 0 10
22530: PPUSH
22531: LD_VAR 0 6
22535: PPUSH
22536: LD_VAR 0 8
22540: PPUSH
22541: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
22545: LD_INT 35
22547: PPUSH
22548: CALL_OW 67
// p := Inc ( p ) ;
22552: LD_ADDR_VAR 0 12
22556: PUSH
22557: LD_VAR 0 12
22561: PPUSH
22562: CALL 62968 0 1
22566: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
22567: LD_VAR 0 12
22571: PUSH
22572: LD_INT 3
22574: EQUAL
22575: IFTRUE 22589
22577: PUSH
22578: LD_VAR 0 1
22582: PPUSH
22583: CALL_OW 302
22587: NOT
22588: OR
22589: IFTRUE 22602
22591: PUSH
22592: LD_VAR 0 1
22596: PPUSH
22597: CALL_OW 301
22601: OR
22602: IFFALSE 22545
// RemoveSeeing ( _x , _y , side ) ;
22604: LD_VAR 0 9
22608: PPUSH
22609: LD_VAR 0 10
22613: PPUSH
22614: LD_VAR 0 6
22618: PPUSH
22619: CALL_OW 331
// end ;
22623: LD_VAR 0 4
22627: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
22628: LD_INT 0
22630: PPUSH
22631: PPUSH
22632: PPUSH
22633: PPUSH
22634: PPUSH
22635: PPUSH
22636: PPUSH
22637: PPUSH
22638: PPUSH
22639: PPUSH
22640: PPUSH
// if not unit then
22641: LD_VAR 0 1
22645: NOT
22646: IFFALSE 22650
// exit ;
22648: GO 22921
// side := GetSide ( unit ) ;
22650: LD_ADDR_VAR 0 3
22654: PUSH
22655: LD_VAR 0 1
22659: PPUSH
22660: CALL_OW 255
22664: ST_TO_ADDR
// x := GetX ( unit ) ;
22665: LD_ADDR_VAR 0 5
22669: PUSH
22670: LD_VAR 0 1
22674: PPUSH
22675: CALL_OW 250
22679: ST_TO_ADDR
// y := GetY ( unit ) ;
22680: LD_ADDR_VAR 0 6
22684: PUSH
22685: LD_VAR 0 1
22689: PPUSH
22690: CALL_OW 251
22694: ST_TO_ADDR
// r := 8 ;
22695: LD_ADDR_VAR 0 4
22699: PUSH
22700: LD_INT 8
22702: ST_TO_ADDR
// if x - r < 0 then
22703: LD_VAR 0 5
22707: PUSH
22708: LD_VAR 0 4
22712: MINUS
22713: PUSH
22714: LD_INT 0
22716: LESS
22717: IFFALSE 22729
// min_x := 0 else
22719: LD_ADDR_VAR 0 7
22723: PUSH
22724: LD_INT 0
22726: ST_TO_ADDR
22727: GO 22745
// min_x := x - r ;
22729: LD_ADDR_VAR 0 7
22733: PUSH
22734: LD_VAR 0 5
22738: PUSH
22739: LD_VAR 0 4
22743: MINUS
22744: ST_TO_ADDR
// if y - r < 0 then
22745: LD_VAR 0 6
22749: PUSH
22750: LD_VAR 0 4
22754: MINUS
22755: PUSH
22756: LD_INT 0
22758: LESS
22759: IFFALSE 22771
// min_y := 0 else
22761: LD_ADDR_VAR 0 8
22765: PUSH
22766: LD_INT 0
22768: ST_TO_ADDR
22769: GO 22787
// min_y := y - r ;
22771: LD_ADDR_VAR 0 8
22775: PUSH
22776: LD_VAR 0 6
22780: PUSH
22781: LD_VAR 0 4
22785: MINUS
22786: ST_TO_ADDR
// max_x := x + r ;
22787: LD_ADDR_VAR 0 9
22791: PUSH
22792: LD_VAR 0 5
22796: PUSH
22797: LD_VAR 0 4
22801: PLUS
22802: ST_TO_ADDR
// max_y := y + r ;
22803: LD_ADDR_VAR 0 10
22807: PUSH
22808: LD_VAR 0 6
22812: PUSH
22813: LD_VAR 0 4
22817: PLUS
22818: ST_TO_ADDR
// for _x = min_x to max_x do
22819: LD_ADDR_VAR 0 11
22823: PUSH
22824: DOUBLE
22825: LD_VAR 0 7
22829: DEC
22830: ST_TO_ADDR
22831: LD_VAR 0 9
22835: PUSH
22836: FOR_TO
22837: IFFALSE 22919
// for _y = min_y to max_y do
22839: LD_ADDR_VAR 0 12
22843: PUSH
22844: DOUBLE
22845: LD_VAR 0 8
22849: DEC
22850: ST_TO_ADDR
22851: LD_VAR 0 10
22855: PUSH
22856: FOR_TO
22857: IFFALSE 22915
// begin if not ValidHex ( _x , _y ) then
22859: LD_VAR 0 11
22863: PPUSH
22864: LD_VAR 0 12
22868: PPUSH
22869: CALL_OW 488
22873: NOT
22874: IFFALSE 22878
// continue ;
22876: GO 22856
// if MineAtPos ( _x , _y ) then
22878: LD_VAR 0 11
22882: PPUSH
22883: LD_VAR 0 12
22887: PPUSH
22888: CALL_OW 458
22892: IFFALSE 22913
// ViewMineAtPos ( _x , _y , side ) ;
22894: LD_VAR 0 11
22898: PPUSH
22899: LD_VAR 0 12
22903: PPUSH
22904: LD_VAR 0 3
22908: PPUSH
22909: CALL_OW 457
// end ;
22913: GO 22856
22915: POP
22916: POP
22917: GO 22836
22919: POP
22920: POP
// end ;
22921: LD_VAR 0 2
22925: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
22926: LD_INT 0
22928: PPUSH
22929: PPUSH
22930: PPUSH
22931: PPUSH
22932: PPUSH
22933: PPUSH
// if not units then
22934: LD_VAR 0 1
22938: NOT
22939: IFFALSE 22943
// exit ;
22941: GO 23373
// scaners := [ ] ;
22943: LD_ADDR_VAR 0 6
22947: PUSH
22948: EMPTY
22949: ST_TO_ADDR
// for i in units do
22950: LD_ADDR_VAR 0 3
22954: PUSH
22955: LD_VAR 0 1
22959: PUSH
22960: FOR_IN
22961: IFFALSE 23118
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
22963: LD_VAR 0 3
22967: PPUSH
22968: CALL_OW 264
22972: PUSH
22973: LD_INT 11
22975: NONEQUAL
22976: IFTRUE 22990
22978: PUSH
22979: LD_VAR 0 3
22983: PPUSH
22984: CALL_OW 302
22988: NOT
22989: OR
22990: IFTRUE 23007
22992: PUSH
22993: LD_VAR 0 3
22997: PPUSH
22998: CALL_OW 110
23002: PUSH
23003: LD_INT 502
23005: EQUAL
23006: OR
23007: IFFALSE 23011
// continue ;
23009: GO 22960
// ComStop ( i ) ;
23011: LD_VAR 0 3
23015: PPUSH
23016: CALL_OW 141
// x := GetX ( i ) ;
23020: LD_ADDR_VAR 0 4
23024: PUSH
23025: LD_VAR 0 3
23029: PPUSH
23030: CALL_OW 250
23034: ST_TO_ADDR
// y := GetY ( i ) ;
23035: LD_ADDR_VAR 0 5
23039: PUSH
23040: LD_VAR 0 3
23044: PPUSH
23045: CALL_OW 251
23049: ST_TO_ADDR
// if GetSide ( i ) = your_side then
23050: LD_VAR 0 3
23054: PPUSH
23055: CALL_OW 255
23059: PUSH
23060: LD_OWVAR 2
23064: EQUAL
23065: IFFALSE 23084
// PlaySoundXY ( x , y , mineDetector ) ;
23067: LD_VAR 0 4
23071: PPUSH
23072: LD_VAR 0 5
23076: PPUSH
23077: LD_STRING mineDetector
23079: PPUSH
23080: CALL_OW 366
// scaners := Join ( scaners , i ) ;
23084: LD_ADDR_VAR 0 6
23088: PUSH
23089: LD_VAR 0 6
23093: PPUSH
23094: LD_VAR 0 3
23098: PPUSH
23099: CALL 61595 0 2
23103: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
23104: LD_VAR 0 3
23108: PPUSH
23109: LD_INT 502
23111: PPUSH
23112: CALL_OW 109
// end ;
23116: GO 22960
23118: POP
23119: POP
// if not scaners then
23120: LD_VAR 0 6
23124: NOT
23125: IFFALSE 23129
// exit ;
23127: GO 23373
// wait ( 3 ) ;
23129: LD_INT 3
23131: PPUSH
23132: CALL_OW 67
// timer := 6 ;
23136: LD_ADDR_VAR 0 7
23140: PUSH
23141: LD_INT 6
23143: ST_TO_ADDR
// repeat for i in scaners do
23144: LD_ADDR_VAR 0 3
23148: PUSH
23149: LD_VAR 0 6
23153: PUSH
23154: FOR_IN
23155: IFFALSE 23271
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
23157: LD_VAR 0 3
23161: PPUSH
23162: CALL_OW 302
23166: NOT
23167: IFTRUE 23180
23169: PUSH
23170: LD_VAR 0 3
23174: PPUSH
23175: CALL_OW 314
23179: OR
23180: IFTRUE 23211
23182: PUSH
23183: LD_VAR 0 3
23187: PPUSH
23188: CALL_OW 263
23192: PUSH
23193: LD_INT 1
23195: EQUAL
23196: IFFALSE 23210
23198: PUSH
23199: LD_VAR 0 3
23203: PPUSH
23204: CALL_OW 311
23208: NOT
23209: AND
23210: OR
23211: IFFALSE 23255
// begin SetUnitDisplayNumber ( i , 0 ) ;
23213: LD_VAR 0 3
23217: PPUSH
23218: LD_INT 0
23220: PPUSH
23221: CALL_OW 505
// SetTag ( i , 0 ) ;
23225: LD_VAR 0 3
23229: PPUSH
23230: LD_INT 0
23232: PPUSH
23233: CALL_OW 109
// scaners := scaners diff i ;
23237: LD_ADDR_VAR 0 6
23241: PUSH
23242: LD_VAR 0 6
23246: PUSH
23247: LD_VAR 0 3
23251: DIFF
23252: ST_TO_ADDR
// continue ;
23253: GO 23154
// end ; SetUnitDisplayNumber ( i , timer ) ;
23255: LD_VAR 0 3
23259: PPUSH
23260: LD_VAR 0 7
23264: PPUSH
23265: CALL_OW 505
// end ;
23269: GO 23154
23271: POP
23272: POP
// if not scaners then
23273: LD_VAR 0 6
23277: NOT
23278: IFFALSE 23282
// exit ;
23280: GO 23373
// timer := Dec ( timer ) ;
23282: LD_ADDR_VAR 0 7
23286: PUSH
23287: LD_VAR 0 7
23291: PPUSH
23292: CALL 62990 0 1
23296: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23297: LD_INT 35
23299: PPUSH
23300: CALL_OW 67
// until timer = 0 ;
23304: LD_VAR 0 7
23308: PUSH
23309: LD_INT 0
23311: EQUAL
23312: IFFALSE 23144
// if not scaners then
23314: LD_VAR 0 6
23318: NOT
23319: IFFALSE 23323
// exit ;
23321: GO 23373
// for i in scaners do
23323: LD_ADDR_VAR 0 3
23327: PUSH
23328: LD_VAR 0 6
23332: PUSH
23333: FOR_IN
23334: IFFALSE 23371
// begin SetUnitDisplayNumber ( i , 0 ) ;
23336: LD_VAR 0 3
23340: PPUSH
23341: LD_INT 0
23343: PPUSH
23344: CALL_OW 505
// SetTag ( i , 0 ) ;
23348: LD_VAR 0 3
23352: PPUSH
23353: LD_INT 0
23355: PPUSH
23356: CALL_OW 109
// RevealDetectorMine ( i ) ;
23360: LD_VAR 0 3
23364: PPUSH
23365: CALL 22628 0 1
// end ;
23369: GO 23333
23371: POP
23372: POP
// end ;
23373: LD_VAR 0 2
23377: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
23378: LD_INT 0
23380: PPUSH
// if p1 = mine_detector_mode then
23381: LD_VAR 0 2
23385: PUSH
23386: LD_INT 103
23388: EQUAL
23389: IFFALSE 23400
// DetectMine ( units ) ;
23391: LD_VAR 0 1
23395: PPUSH
23396: CALL 22926 0 1
// end ; end_of_file
23400: LD_VAR 0 7
23404: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
23405: LD_INT 0
23407: PPUSH
23408: PPUSH
// if exist_mode then
23409: LD_VAR 0 2
23413: IFFALSE 23459
// begin unit := CreateCharacter ( prefix & ident ) ;
23415: LD_ADDR_VAR 0 5
23419: PUSH
23420: LD_VAR 0 3
23424: PUSH
23425: LD_VAR 0 1
23429: STR
23430: PPUSH
23431: CALL_OW 34
23435: ST_TO_ADDR
// if unit then
23436: LD_VAR 0 5
23440: IFFALSE 23457
// DeleteCharacters ( prefix & ident ) ;
23442: LD_VAR 0 3
23446: PUSH
23447: LD_VAR 0 1
23451: STR
23452: PPUSH
23453: CALL_OW 40
// end else
23457: GO 23474
// unit := NewCharacter ( ident ) ;
23459: LD_ADDR_VAR 0 5
23463: PUSH
23464: LD_VAR 0 1
23468: PPUSH
23469: CALL_OW 25
23473: ST_TO_ADDR
// result := unit ;
23474: LD_ADDR_VAR 0 4
23478: PUSH
23479: LD_VAR 0 5
23483: ST_TO_ADDR
// end ;
23484: LD_VAR 0 4
23488: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
23489: LD_INT 0
23491: PPUSH
23492: PPUSH
// if exist_mode then
23493: LD_VAR 0 2
23497: IFFALSE 23522
// unit := CreateCharacter ( prefix & ident ) else
23499: LD_ADDR_VAR 0 5
23503: PUSH
23504: LD_VAR 0 3
23508: PUSH
23509: LD_VAR 0 1
23513: STR
23514: PPUSH
23515: CALL_OW 34
23519: ST_TO_ADDR
23520: GO 23537
// unit := NewCharacter ( ident ) ;
23522: LD_ADDR_VAR 0 5
23526: PUSH
23527: LD_VAR 0 1
23531: PPUSH
23532: CALL_OW 25
23536: ST_TO_ADDR
// result := unit ;
23537: LD_ADDR_VAR 0 4
23541: PUSH
23542: LD_VAR 0 5
23546: ST_TO_ADDR
// end ;
23547: LD_VAR 0 4
23551: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
23552: LD_INT 0
23554: PPUSH
23555: PPUSH
// if not side or not nation then
23556: LD_VAR 0 1
23560: NOT
23561: IFTRUE 23570
23563: PUSH
23564: LD_VAR 0 2
23568: NOT
23569: OR
23570: IFFALSE 23574
// exit ;
23572: GO 24368
// case nation of nation_american :
23574: LD_VAR 0 2
23578: PUSH
23579: LD_INT 1
23581: DOUBLE
23582: EQUAL
23583: IFTRUE 23587
23585: GO 23809
23587: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
23588: LD_ADDR_VAR 0 4
23592: PUSH
23593: LD_INT 35
23595: PUSH
23596: LD_INT 45
23598: PUSH
23599: LD_INT 46
23601: PUSH
23602: LD_INT 47
23604: PUSH
23605: LD_INT 82
23607: PUSH
23608: LD_INT 83
23610: PUSH
23611: LD_INT 84
23613: PUSH
23614: LD_INT 85
23616: PUSH
23617: LD_INT 86
23619: PUSH
23620: LD_INT 1
23622: PUSH
23623: LD_INT 2
23625: PUSH
23626: LD_INT 6
23628: PUSH
23629: LD_INT 15
23631: PUSH
23632: LD_INT 16
23634: PUSH
23635: LD_INT 7
23637: PUSH
23638: LD_INT 12
23640: PUSH
23641: LD_INT 13
23643: PUSH
23644: LD_INT 10
23646: PUSH
23647: LD_INT 14
23649: PUSH
23650: LD_INT 20
23652: PUSH
23653: LD_INT 21
23655: PUSH
23656: LD_INT 22
23658: PUSH
23659: LD_INT 25
23661: PUSH
23662: LD_INT 32
23664: PUSH
23665: LD_INT 27
23667: PUSH
23668: LD_INT 36
23670: PUSH
23671: LD_INT 69
23673: PUSH
23674: LD_INT 39
23676: PUSH
23677: LD_INT 34
23679: PUSH
23680: LD_INT 40
23682: PUSH
23683: LD_INT 48
23685: PUSH
23686: LD_INT 49
23688: PUSH
23689: LD_INT 50
23691: PUSH
23692: LD_INT 51
23694: PUSH
23695: LD_INT 52
23697: PUSH
23698: LD_INT 53
23700: PUSH
23701: LD_INT 54
23703: PUSH
23704: LD_INT 55
23706: PUSH
23707: LD_INT 56
23709: PUSH
23710: LD_INT 57
23712: PUSH
23713: LD_INT 58
23715: PUSH
23716: LD_INT 59
23718: PUSH
23719: LD_INT 60
23721: PUSH
23722: LD_INT 61
23724: PUSH
23725: LD_INT 62
23727: PUSH
23728: LD_INT 80
23730: PUSH
23731: LD_INT 82
23733: PUSH
23734: LD_INT 83
23736: PUSH
23737: LD_INT 84
23739: PUSH
23740: LD_INT 85
23742: PUSH
23743: LD_INT 86
23745: PUSH
23746: LD_INT 90
23748: PUSH
23749: LD_INT 93
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: ST_TO_ADDR
23807: GO 24290
23809: LD_INT 2
23811: DOUBLE
23812: EQUAL
23813: IFTRUE 23817
23815: GO 24051
23817: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
23818: LD_ADDR_VAR 0 4
23822: PUSH
23823: LD_INT 35
23825: PUSH
23826: LD_INT 45
23828: PUSH
23829: LD_INT 46
23831: PUSH
23832: LD_INT 47
23834: PUSH
23835: LD_INT 82
23837: PUSH
23838: LD_INT 83
23840: PUSH
23841: LD_INT 84
23843: PUSH
23844: LD_INT 85
23846: PUSH
23847: LD_INT 87
23849: PUSH
23850: LD_INT 70
23852: PUSH
23853: LD_INT 1
23855: PUSH
23856: LD_INT 11
23858: PUSH
23859: LD_INT 3
23861: PUSH
23862: LD_INT 4
23864: PUSH
23865: LD_INT 5
23867: PUSH
23868: LD_INT 6
23870: PUSH
23871: LD_INT 15
23873: PUSH
23874: LD_INT 18
23876: PUSH
23877: LD_INT 7
23879: PUSH
23880: LD_INT 17
23882: PUSH
23883: LD_INT 8
23885: PUSH
23886: LD_INT 20
23888: PUSH
23889: LD_INT 21
23891: PUSH
23892: LD_INT 22
23894: PUSH
23895: LD_INT 72
23897: PUSH
23898: LD_INT 26
23900: PUSH
23901: LD_INT 69
23903: PUSH
23904: LD_INT 39
23906: PUSH
23907: LD_INT 40
23909: PUSH
23910: LD_INT 41
23912: PUSH
23913: LD_INT 42
23915: PUSH
23916: LD_INT 43
23918: PUSH
23919: LD_INT 48
23921: PUSH
23922: LD_INT 49
23924: PUSH
23925: LD_INT 50
23927: PUSH
23928: LD_INT 51
23930: PUSH
23931: LD_INT 52
23933: PUSH
23934: LD_INT 53
23936: PUSH
23937: LD_INT 54
23939: PUSH
23940: LD_INT 55
23942: PUSH
23943: LD_INT 56
23945: PUSH
23946: LD_INT 60
23948: PUSH
23949: LD_INT 61
23951: PUSH
23952: LD_INT 62
23954: PUSH
23955: LD_INT 66
23957: PUSH
23958: LD_INT 67
23960: PUSH
23961: LD_INT 68
23963: PUSH
23964: LD_INT 81
23966: PUSH
23967: LD_INT 82
23969: PUSH
23970: LD_INT 83
23972: PUSH
23973: LD_INT 84
23975: PUSH
23976: LD_INT 85
23978: PUSH
23979: LD_INT 87
23981: PUSH
23982: LD_INT 88
23984: PUSH
23985: LD_INT 92
23987: PUSH
23988: LD_INT 94
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: ST_TO_ADDR
24049: GO 24290
24051: LD_INT 3
24053: DOUBLE
24054: EQUAL
24055: IFTRUE 24059
24057: GO 24289
24059: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
24060: LD_ADDR_VAR 0 4
24064: PUSH
24065: LD_INT 46
24067: PUSH
24068: LD_INT 47
24070: PUSH
24071: LD_INT 1
24073: PUSH
24074: LD_INT 2
24076: PUSH
24077: LD_INT 82
24079: PUSH
24080: LD_INT 83
24082: PUSH
24083: LD_INT 84
24085: PUSH
24086: LD_INT 85
24088: PUSH
24089: LD_INT 86
24091: PUSH
24092: LD_INT 11
24094: PUSH
24095: LD_INT 9
24097: PUSH
24098: LD_INT 20
24100: PUSH
24101: LD_INT 19
24103: PUSH
24104: LD_INT 21
24106: PUSH
24107: LD_INT 24
24109: PUSH
24110: LD_INT 22
24112: PUSH
24113: LD_INT 25
24115: PUSH
24116: LD_INT 28
24118: PUSH
24119: LD_INT 29
24121: PUSH
24122: LD_INT 30
24124: PUSH
24125: LD_INT 31
24127: PUSH
24128: LD_INT 37
24130: PUSH
24131: LD_INT 38
24133: PUSH
24134: LD_INT 32
24136: PUSH
24137: LD_INT 27
24139: PUSH
24140: LD_INT 33
24142: PUSH
24143: LD_INT 69
24145: PUSH
24146: LD_INT 39
24148: PUSH
24149: LD_INT 34
24151: PUSH
24152: LD_INT 40
24154: PUSH
24155: LD_INT 71
24157: PUSH
24158: LD_INT 23
24160: PUSH
24161: LD_INT 44
24163: PUSH
24164: LD_INT 48
24166: PUSH
24167: LD_INT 49
24169: PUSH
24170: LD_INT 50
24172: PUSH
24173: LD_INT 51
24175: PUSH
24176: LD_INT 52
24178: PUSH
24179: LD_INT 53
24181: PUSH
24182: LD_INT 54
24184: PUSH
24185: LD_INT 55
24187: PUSH
24188: LD_INT 56
24190: PUSH
24191: LD_INT 57
24193: PUSH
24194: LD_INT 58
24196: PUSH
24197: LD_INT 59
24199: PUSH
24200: LD_INT 63
24202: PUSH
24203: LD_INT 64
24205: PUSH
24206: LD_INT 65
24208: PUSH
24209: LD_INT 82
24211: PUSH
24212: LD_INT 83
24214: PUSH
24215: LD_INT 84
24217: PUSH
24218: LD_INT 85
24220: PUSH
24221: LD_INT 86
24223: PUSH
24224: LD_INT 89
24226: PUSH
24227: LD_INT 91
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: ST_TO_ADDR
24287: GO 24290
24289: POP
// if state > - 1 and state < 3 then
24290: LD_VAR 0 3
24294: PUSH
24295: LD_INT 1
24297: NEG
24298: GREATER
24299: IFFALSE 24311
24301: PUSH
24302: LD_VAR 0 3
24306: PUSH
24307: LD_INT 3
24309: LESS
24310: AND
24311: IFFALSE 24368
// for i in result do
24313: LD_ADDR_VAR 0 5
24317: PUSH
24318: LD_VAR 0 4
24322: PUSH
24323: FOR_IN
24324: IFFALSE 24366
// if GetTech ( i , side ) <> state then
24326: LD_VAR 0 5
24330: PPUSH
24331: LD_VAR 0 1
24335: PPUSH
24336: CALL_OW 321
24340: PUSH
24341: LD_VAR 0 3
24345: NONEQUAL
24346: IFFALSE 24364
// result := result diff i ;
24348: LD_ADDR_VAR 0 4
24352: PUSH
24353: LD_VAR 0 4
24357: PUSH
24358: LD_VAR 0 5
24362: DIFF
24363: ST_TO_ADDR
24364: GO 24323
24366: POP
24367: POP
// end ;
24368: LD_VAR 0 4
24372: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24373: LD_INT 0
24375: PPUSH
24376: PPUSH
24377: PPUSH
// result := true ;
24378: LD_ADDR_VAR 0 3
24382: PUSH
24383: LD_INT 1
24385: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24386: LD_ADDR_VAR 0 5
24390: PUSH
24391: LD_VAR 0 2
24395: PPUSH
24396: CALL_OW 480
24400: ST_TO_ADDR
// if not tmp then
24401: LD_VAR 0 5
24405: NOT
24406: IFFALSE 24410
// exit ;
24408: GO 24459
// for i in tmp do
24410: LD_ADDR_VAR 0 4
24414: PUSH
24415: LD_VAR 0 5
24419: PUSH
24420: FOR_IN
24421: IFFALSE 24457
// if GetTech ( i , side ) <> state_researched then
24423: LD_VAR 0 4
24427: PPUSH
24428: LD_VAR 0 1
24432: PPUSH
24433: CALL_OW 321
24437: PUSH
24438: LD_INT 2
24440: NONEQUAL
24441: IFFALSE 24455
// begin result := false ;
24443: LD_ADDR_VAR 0 3
24447: PUSH
24448: LD_INT 0
24450: ST_TO_ADDR
// exit ;
24451: POP
24452: POP
24453: GO 24459
// end ;
24455: GO 24420
24457: POP
24458: POP
// end ;
24459: LD_VAR 0 3
24463: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24464: LD_INT 0
24466: PPUSH
24467: PPUSH
24468: PPUSH
24469: PPUSH
24470: PPUSH
24471: PPUSH
24472: PPUSH
24473: PPUSH
24474: PPUSH
24475: PPUSH
24476: PPUSH
24477: PPUSH
24478: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24479: LD_VAR 0 1
24483: NOT
24484: IFTRUE 24501
24486: PUSH
24487: LD_VAR 0 1
24491: PPUSH
24492: CALL_OW 257
24496: PUSH
24497: LD_INT 9
24499: NONEQUAL
24500: OR
24501: IFFALSE 24505
// exit ;
24503: GO 25084
// side := GetSide ( unit ) ;
24505: LD_ADDR_VAR 0 9
24509: PUSH
24510: LD_VAR 0 1
24514: PPUSH
24515: CALL_OW 255
24519: ST_TO_ADDR
// tech_space := tech_spacanom ;
24520: LD_ADDR_VAR 0 12
24524: PUSH
24525: LD_INT 29
24527: ST_TO_ADDR
// tech_time := tech_taurad ;
24528: LD_ADDR_VAR 0 13
24532: PUSH
24533: LD_INT 28
24535: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
24536: LD_ADDR_VAR 0 11
24540: PUSH
24541: LD_VAR 0 1
24545: PPUSH
24546: CALL_OW 310
24550: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
24551: LD_VAR 0 11
24555: PPUSH
24556: CALL_OW 247
24560: PUSH
24561: LD_INT 2
24563: EQUAL
24564: IFFALSE 24568
// exit ;
24566: GO 25084
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24568: LD_ADDR_VAR 0 8
24572: PUSH
24573: LD_INT 81
24575: PUSH
24576: LD_VAR 0 9
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: PUSH
24585: LD_INT 3
24587: PUSH
24588: LD_INT 21
24590: PUSH
24591: LD_INT 3
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: PPUSH
24606: CALL_OW 69
24610: ST_TO_ADDR
// if not tmp then
24611: LD_VAR 0 8
24615: NOT
24616: IFFALSE 24620
// exit ;
24618: GO 25084
// if in_unit then
24620: LD_VAR 0 11
24624: IFFALSE 24648
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
24626: LD_ADDR_VAR 0 10
24630: PUSH
24631: LD_VAR 0 8
24635: PPUSH
24636: LD_VAR 0 11
24640: PPUSH
24641: CALL_OW 74
24645: ST_TO_ADDR
24646: GO 24668
// enemy := NearestUnitToUnit ( tmp , unit ) ;
24648: LD_ADDR_VAR 0 10
24652: PUSH
24653: LD_VAR 0 8
24657: PPUSH
24658: LD_VAR 0 1
24662: PPUSH
24663: CALL_OW 74
24667: ST_TO_ADDR
// if not enemy then
24668: LD_VAR 0 10
24672: NOT
24673: IFFALSE 24677
// exit ;
24675: GO 25084
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
24677: LD_VAR 0 11
24681: IFFALSE 24703
24683: PUSH
24684: LD_VAR 0 11
24688: PPUSH
24689: LD_VAR 0 10
24693: PPUSH
24694: CALL_OW 296
24698: PUSH
24699: LD_INT 13
24701: GREATER
24702: AND
24703: IFTRUE 24725
24705: PUSH
24706: LD_VAR 0 1
24710: PPUSH
24711: LD_VAR 0 10
24715: PPUSH
24716: CALL_OW 296
24720: PUSH
24721: LD_INT 12
24723: GREATER
24724: OR
24725: IFFALSE 24729
// exit ;
24727: GO 25084
// missile := [ 1 ] ;
24729: LD_ADDR_VAR 0 14
24733: PUSH
24734: LD_INT 1
24736: PUSH
24737: EMPTY
24738: LIST
24739: ST_TO_ADDR
// if Researched ( side , tech_space ) then
24740: LD_VAR 0 9
24744: PPUSH
24745: LD_VAR 0 12
24749: PPUSH
24750: CALL_OW 325
24754: IFFALSE 24783
// missile := Replace ( missile , missile + 1 , 2 ) ;
24756: LD_ADDR_VAR 0 14
24760: PUSH
24761: LD_VAR 0 14
24765: PPUSH
24766: LD_VAR 0 14
24770: PUSH
24771: LD_INT 1
24773: PLUS
24774: PPUSH
24775: LD_INT 2
24777: PPUSH
24778: CALL_OW 1
24782: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
24783: LD_VAR 0 9
24787: PPUSH
24788: LD_VAR 0 13
24792: PPUSH
24793: CALL_OW 325
24797: IFFALSE 24821
24799: PUSH
24800: LD_VAR 0 10
24804: PPUSH
24805: CALL_OW 255
24809: PPUSH
24810: LD_VAR 0 13
24814: PPUSH
24815: CALL_OW 325
24819: NOT
24820: AND
24821: IFFALSE 24850
// missile := Replace ( missile , missile + 1 , 3 ) ;
24823: LD_ADDR_VAR 0 14
24827: PUSH
24828: LD_VAR 0 14
24832: PPUSH
24833: LD_VAR 0 14
24837: PUSH
24838: LD_INT 1
24840: PLUS
24841: PPUSH
24842: LD_INT 3
24844: PPUSH
24845: CALL_OW 1
24849: ST_TO_ADDR
// if missile < 2 then
24850: LD_VAR 0 14
24854: PUSH
24855: LD_INT 2
24857: LESS
24858: IFFALSE 24862
// exit ;
24860: GO 25084
// x := GetX ( enemy ) ;
24862: LD_ADDR_VAR 0 4
24866: PUSH
24867: LD_VAR 0 10
24871: PPUSH
24872: CALL_OW 250
24876: ST_TO_ADDR
// y := GetY ( enemy ) ;
24877: LD_ADDR_VAR 0 5
24881: PUSH
24882: LD_VAR 0 10
24886: PPUSH
24887: CALL_OW 251
24891: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
24892: LD_ADDR_VAR 0 6
24896: PUSH
24897: LD_VAR 0 4
24901: PUSH
24902: LD_INT 1
24904: NEG
24905: PPUSH
24906: LD_INT 1
24908: PPUSH
24909: CALL_OW 12
24913: PLUS
24914: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
24915: LD_ADDR_VAR 0 7
24919: PUSH
24920: LD_VAR 0 5
24924: PUSH
24925: LD_INT 1
24927: NEG
24928: PPUSH
24929: LD_INT 1
24931: PPUSH
24932: CALL_OW 12
24936: PLUS
24937: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24938: LD_VAR 0 6
24942: PPUSH
24943: LD_VAR 0 7
24947: PPUSH
24948: CALL_OW 488
24952: NOT
24953: IFFALSE 24975
// begin _x := x ;
24955: LD_ADDR_VAR 0 6
24959: PUSH
24960: LD_VAR 0 4
24964: ST_TO_ADDR
// _y := y ;
24965: LD_ADDR_VAR 0 7
24969: PUSH
24970: LD_VAR 0 5
24974: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
24975: LD_ADDR_VAR 0 3
24979: PUSH
24980: LD_INT 1
24982: PPUSH
24983: LD_VAR 0 14
24987: PPUSH
24988: CALL_OW 12
24992: ST_TO_ADDR
// case i of 1 :
24993: LD_VAR 0 3
24997: PUSH
24998: LD_INT 1
25000: DOUBLE
25001: EQUAL
25002: IFTRUE 25006
25004: GO 25023
25006: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25007: LD_VAR 0 1
25011: PPUSH
25012: LD_VAR 0 10
25016: PPUSH
25017: CALL_OW 115
25021: GO 25084
25023: LD_INT 2
25025: DOUBLE
25026: EQUAL
25027: IFTRUE 25031
25029: GO 25053
25031: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25032: LD_VAR 0 1
25036: PPUSH
25037: LD_VAR 0 6
25041: PPUSH
25042: LD_VAR 0 7
25046: PPUSH
25047: CALL_OW 153
25051: GO 25084
25053: LD_INT 3
25055: DOUBLE
25056: EQUAL
25057: IFTRUE 25061
25059: GO 25083
25061: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25062: LD_VAR 0 1
25066: PPUSH
25067: LD_VAR 0 6
25071: PPUSH
25072: LD_VAR 0 7
25076: PPUSH
25077: CALL_OW 154
25081: GO 25084
25083: POP
// end ;
25084: LD_VAR 0 2
25088: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25089: LD_INT 0
25091: PPUSH
25092: PPUSH
25093: PPUSH
25094: PPUSH
25095: PPUSH
25096: PPUSH
// if not unit or not building then
25097: LD_VAR 0 1
25101: NOT
25102: IFTRUE 25111
25104: PUSH
25105: LD_VAR 0 2
25109: NOT
25110: OR
25111: IFFALSE 25115
// exit ;
25113: GO 25273
// x := GetX ( building ) ;
25115: LD_ADDR_VAR 0 5
25119: PUSH
25120: LD_VAR 0 2
25124: PPUSH
25125: CALL_OW 250
25129: ST_TO_ADDR
// y := GetY ( building ) ;
25130: LD_ADDR_VAR 0 6
25134: PUSH
25135: LD_VAR 0 2
25139: PPUSH
25140: CALL_OW 251
25144: ST_TO_ADDR
// for i := 0 to 5 do
25145: LD_ADDR_VAR 0 4
25149: PUSH
25150: DOUBLE
25151: LD_INT 0
25153: DEC
25154: ST_TO_ADDR
25155: LD_INT 5
25157: PUSH
25158: FOR_TO
25159: IFFALSE 25271
// begin _x := ShiftX ( x , i , 3 ) ;
25161: LD_ADDR_VAR 0 7
25165: PUSH
25166: LD_VAR 0 5
25170: PPUSH
25171: LD_VAR 0 4
25175: PPUSH
25176: LD_INT 3
25178: PPUSH
25179: CALL_OW 272
25183: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25184: LD_ADDR_VAR 0 8
25188: PUSH
25189: LD_VAR 0 6
25193: PPUSH
25194: LD_VAR 0 4
25198: PPUSH
25199: LD_INT 3
25201: PPUSH
25202: CALL_OW 273
25206: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25207: LD_VAR 0 7
25211: PPUSH
25212: LD_VAR 0 8
25216: PPUSH
25217: CALL_OW 488
25221: NOT
25222: IFFALSE 25226
// continue ;
25224: GO 25158
// if HexInfo ( _x , _y ) = 0 then
25226: LD_VAR 0 7
25230: PPUSH
25231: LD_VAR 0 8
25235: PPUSH
25236: CALL_OW 428
25240: PUSH
25241: LD_INT 0
25243: EQUAL
25244: IFFALSE 25269
// begin ComMoveXY ( unit , _x , _y ) ;
25246: LD_VAR 0 1
25250: PPUSH
25251: LD_VAR 0 7
25255: PPUSH
25256: LD_VAR 0 8
25260: PPUSH
25261: CALL_OW 111
// exit ;
25265: POP
25266: POP
25267: GO 25273
// end ; end ;
25269: GO 25158
25271: POP
25272: POP
// end ;
25273: LD_VAR 0 3
25277: RET
// export function ScanBase ( side , base_area ) ; begin
25278: LD_INT 0
25280: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25281: LD_ADDR_VAR 0 3
25285: PUSH
25286: LD_VAR 0 2
25290: PPUSH
25291: LD_INT 81
25293: PUSH
25294: LD_VAR 0 1
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PPUSH
25303: CALL_OW 70
25307: ST_TO_ADDR
// end ;
25308: LD_VAR 0 3
25312: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25313: LD_INT 0
25315: PPUSH
25316: PPUSH
25317: PPUSH
25318: PPUSH
// result := false ;
25319: LD_ADDR_VAR 0 2
25323: PUSH
25324: LD_INT 0
25326: ST_TO_ADDR
// side := GetSide ( unit ) ;
25327: LD_ADDR_VAR 0 3
25331: PUSH
25332: LD_VAR 0 1
25336: PPUSH
25337: CALL_OW 255
25341: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25342: LD_ADDR_VAR 0 4
25346: PUSH
25347: LD_VAR 0 1
25351: PPUSH
25352: CALL_OW 248
25356: ST_TO_ADDR
// case nat of 1 :
25357: LD_VAR 0 4
25361: PUSH
25362: LD_INT 1
25364: DOUBLE
25365: EQUAL
25366: IFTRUE 25370
25368: GO 25381
25370: POP
// tech := tech_lassight ; 2 :
25371: LD_ADDR_VAR 0 5
25375: PUSH
25376: LD_INT 12
25378: ST_TO_ADDR
25379: GO 25420
25381: LD_INT 2
25383: DOUBLE
25384: EQUAL
25385: IFTRUE 25389
25387: GO 25400
25389: POP
// tech := tech_mortar ; 3 :
25390: LD_ADDR_VAR 0 5
25394: PUSH
25395: LD_INT 41
25397: ST_TO_ADDR
25398: GO 25420
25400: LD_INT 3
25402: DOUBLE
25403: EQUAL
25404: IFTRUE 25408
25406: GO 25419
25408: POP
// tech := tech_bazooka ; end ;
25409: LD_ADDR_VAR 0 5
25413: PUSH
25414: LD_INT 44
25416: ST_TO_ADDR
25417: GO 25420
25419: POP
// if Researched ( side , tech ) then
25420: LD_VAR 0 3
25424: PPUSH
25425: LD_VAR 0 5
25429: PPUSH
25430: CALL_OW 325
25434: IFFALSE 25461
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25436: LD_ADDR_VAR 0 2
25440: PUSH
25441: LD_INT 5
25443: PUSH
25444: LD_INT 8
25446: PUSH
25447: LD_INT 9
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: LIST
25454: PUSH
25455: LD_VAR 0 4
25459: ARRAY
25460: ST_TO_ADDR
// end ;
25461: LD_VAR 0 2
25465: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25466: LD_INT 0
25468: PPUSH
25469: PPUSH
25470: PPUSH
// if not mines then
25471: LD_VAR 0 2
25475: NOT
25476: IFFALSE 25480
// exit ;
25478: GO 25624
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25480: LD_ADDR_VAR 0 5
25484: PUSH
25485: LD_INT 81
25487: PUSH
25488: LD_VAR 0 1
25492: PUSH
25493: EMPTY
25494: LIST
25495: LIST
25496: PUSH
25497: LD_INT 3
25499: PUSH
25500: LD_INT 21
25502: PUSH
25503: LD_INT 3
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: PPUSH
25518: CALL_OW 69
25522: ST_TO_ADDR
// for i in mines do
25523: LD_ADDR_VAR 0 4
25527: PUSH
25528: LD_VAR 0 2
25532: PUSH
25533: FOR_IN
25534: IFFALSE 25622
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
25536: LD_VAR 0 4
25540: PUSH
25541: LD_INT 1
25543: ARRAY
25544: PPUSH
25545: LD_VAR 0 4
25549: PUSH
25550: LD_INT 2
25552: ARRAY
25553: PPUSH
25554: CALL_OW 458
25558: NOT
25559: IFFALSE 25563
// continue ;
25561: GO 25533
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
25563: LD_VAR 0 4
25567: PUSH
25568: LD_INT 1
25570: ARRAY
25571: PPUSH
25572: LD_VAR 0 4
25576: PUSH
25577: LD_INT 2
25579: ARRAY
25580: PPUSH
25581: CALL_OW 428
25585: PUSH
25586: LD_VAR 0 5
25590: IN
25591: IFFALSE 25620
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
25593: LD_VAR 0 4
25597: PUSH
25598: LD_INT 1
25600: ARRAY
25601: PPUSH
25602: LD_VAR 0 4
25606: PUSH
25607: LD_INT 2
25609: ARRAY
25610: PPUSH
25611: LD_VAR 0 1
25615: PPUSH
25616: CALL_OW 456
// end ;
25620: GO 25533
25622: POP
25623: POP
// end ;
25624: LD_VAR 0 3
25628: RET
// export function Count ( array ) ; begin
25629: LD_INT 0
25631: PPUSH
// result := array + 0 ;
25632: LD_ADDR_VAR 0 2
25636: PUSH
25637: LD_VAR 0 1
25641: PUSH
25642: LD_INT 0
25644: PLUS
25645: ST_TO_ADDR
// end ;
25646: LD_VAR 0 2
25650: RET
// export function IsEmpty ( building ) ; begin
25651: LD_INT 0
25653: PPUSH
// if not building then
25654: LD_VAR 0 1
25658: NOT
25659: IFFALSE 25663
// exit ;
25661: GO 25706
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
25663: LD_ADDR_VAR 0 2
25667: PUSH
25668: LD_VAR 0 1
25672: PUSH
25673: LD_INT 22
25675: PUSH
25676: LD_VAR 0 1
25680: PPUSH
25681: CALL_OW 255
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: PUSH
25690: LD_INT 58
25692: PUSH
25693: EMPTY
25694: LIST
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: PPUSH
25700: CALL_OW 69
25704: IN
25705: ST_TO_ADDR
// end ;
25706: LD_VAR 0 2
25710: RET
// export function IsNotFull ( building ) ; var places ; begin
25711: LD_INT 0
25713: PPUSH
25714: PPUSH
// if not building then
25715: LD_VAR 0 1
25719: NOT
25720: IFFALSE 25724
// exit ;
25722: GO 25752
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
25724: LD_ADDR_VAR 0 2
25728: PUSH
25729: LD_VAR 0 1
25733: PPUSH
25734: LD_INT 3
25736: PUSH
25737: LD_INT 62
25739: PUSH
25740: EMPTY
25741: LIST
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: PPUSH
25747: CALL_OW 72
25751: ST_TO_ADDR
// end ;
25752: LD_VAR 0 2
25756: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
25757: LD_INT 0
25759: PPUSH
25760: PPUSH
25761: PPUSH
25762: PPUSH
// tmp := [ ] ;
25763: LD_ADDR_VAR 0 3
25767: PUSH
25768: EMPTY
25769: ST_TO_ADDR
// list := [ ] ;
25770: LD_ADDR_VAR 0 5
25774: PUSH
25775: EMPTY
25776: ST_TO_ADDR
// for i = 16 to 25 do
25777: LD_ADDR_VAR 0 4
25781: PUSH
25782: DOUBLE
25783: LD_INT 16
25785: DEC
25786: ST_TO_ADDR
25787: LD_INT 25
25789: PUSH
25790: FOR_TO
25791: IFFALSE 25864
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
25793: LD_ADDR_VAR 0 3
25797: PUSH
25798: LD_VAR 0 3
25802: PUSH
25803: LD_INT 22
25805: PUSH
25806: LD_VAR 0 1
25810: PPUSH
25811: CALL_OW 255
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: PUSH
25820: LD_INT 91
25822: PUSH
25823: LD_VAR 0 1
25827: PUSH
25828: LD_INT 6
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: LIST
25835: PUSH
25836: LD_INT 30
25838: PUSH
25839: LD_VAR 0 4
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: LIST
25852: PUSH
25853: EMPTY
25854: LIST
25855: PPUSH
25856: CALL_OW 69
25860: ADD
25861: ST_TO_ADDR
25862: GO 25790
25864: POP
25865: POP
// for i = 1 to tmp do
25866: LD_ADDR_VAR 0 4
25870: PUSH
25871: DOUBLE
25872: LD_INT 1
25874: DEC
25875: ST_TO_ADDR
25876: LD_VAR 0 3
25880: PUSH
25881: FOR_TO
25882: IFFALSE 25970
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
25884: LD_ADDR_VAR 0 5
25888: PUSH
25889: LD_VAR 0 5
25893: PUSH
25894: LD_VAR 0 3
25898: PUSH
25899: LD_VAR 0 4
25903: ARRAY
25904: PPUSH
25905: CALL_OW 266
25909: PUSH
25910: LD_VAR 0 3
25914: PUSH
25915: LD_VAR 0 4
25919: ARRAY
25920: PPUSH
25921: CALL_OW 250
25925: PUSH
25926: LD_VAR 0 3
25930: PUSH
25931: LD_VAR 0 4
25935: ARRAY
25936: PPUSH
25937: CALL_OW 251
25941: PUSH
25942: LD_VAR 0 3
25946: PUSH
25947: LD_VAR 0 4
25951: ARRAY
25952: PPUSH
25953: CALL_OW 254
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: PUSH
25964: EMPTY
25965: LIST
25966: ADD
25967: ST_TO_ADDR
25968: GO 25881
25970: POP
25971: POP
// result := list ;
25972: LD_ADDR_VAR 0 2
25976: PUSH
25977: LD_VAR 0 5
25981: ST_TO_ADDR
// end ;
25982: LD_VAR 0 2
25986: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
25987: LD_INT 0
25989: PPUSH
25990: PPUSH
25991: PPUSH
25992: PPUSH
25993: PPUSH
25994: PPUSH
25995: PPUSH
// if not factory then
25996: LD_VAR 0 1
26000: NOT
26001: IFFALSE 26005
// exit ;
26003: GO 26608
// if control = control_apeman then
26005: LD_VAR 0 4
26009: PUSH
26010: LD_INT 5
26012: EQUAL
26013: IFFALSE 26122
// begin tmp := UnitsInside ( factory ) ;
26015: LD_ADDR_VAR 0 8
26019: PUSH
26020: LD_VAR 0 1
26024: PPUSH
26025: CALL_OW 313
26029: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26030: LD_VAR 0 8
26034: PPUSH
26035: LD_INT 25
26037: PUSH
26038: LD_INT 12
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: PPUSH
26045: CALL_OW 72
26049: NOT
26050: IFFALSE 26060
// control := control_manual ;
26052: LD_ADDR_VAR 0 4
26056: PUSH
26057: LD_INT 1
26059: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26060: LD_ADDR_VAR 0 8
26064: PUSH
26065: LD_VAR 0 1
26069: PPUSH
26070: CALL 25757 0 1
26074: ST_TO_ADDR
// if tmp then
26075: LD_VAR 0 8
26079: IFFALSE 26122
// begin for i in tmp do
26081: LD_ADDR_VAR 0 7
26085: PUSH
26086: LD_VAR 0 8
26090: PUSH
26091: FOR_IN
26092: IFFALSE 26120
// if i [ 1 ] = b_ext_radio then
26094: LD_VAR 0 7
26098: PUSH
26099: LD_INT 1
26101: ARRAY
26102: PUSH
26103: LD_INT 22
26105: EQUAL
26106: IFFALSE 26118
// begin control := control_remote ;
26108: LD_ADDR_VAR 0 4
26112: PUSH
26113: LD_INT 2
26115: ST_TO_ADDR
// break ;
26116: GO 26120
// end ;
26118: GO 26091
26120: POP
26121: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26122: LD_VAR 0 1
26126: PPUSH
26127: LD_VAR 0 2
26131: PPUSH
26132: LD_VAR 0 3
26136: PPUSH
26137: LD_VAR 0 4
26141: PPUSH
26142: LD_VAR 0 5
26146: PPUSH
26147: CALL_OW 448
26151: IFFALSE 26186
// begin result := [ chassis , engine , control , weapon ] ;
26153: LD_ADDR_VAR 0 6
26157: PUSH
26158: LD_VAR 0 2
26162: PUSH
26163: LD_VAR 0 3
26167: PUSH
26168: LD_VAR 0 4
26172: PUSH
26173: LD_VAR 0 5
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: ST_TO_ADDR
// exit ;
26184: GO 26608
// end ; _chassis := AvailableChassisList ( factory ) ;
26186: LD_ADDR_VAR 0 9
26190: PUSH
26191: LD_VAR 0 1
26195: PPUSH
26196: CALL_OW 475
26200: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26201: LD_ADDR_VAR 0 11
26205: PUSH
26206: LD_VAR 0 1
26210: PPUSH
26211: CALL_OW 476
26215: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26216: LD_ADDR_VAR 0 12
26220: PUSH
26221: LD_VAR 0 1
26225: PPUSH
26226: CALL_OW 477
26230: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26231: LD_ADDR_VAR 0 10
26235: PUSH
26236: LD_VAR 0 1
26240: PPUSH
26241: CALL_OW 478
26245: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26246: LD_VAR 0 9
26250: NOT
26251: IFTRUE 26260
26253: PUSH
26254: LD_VAR 0 11
26258: NOT
26259: OR
26260: IFTRUE 26269
26262: PUSH
26263: LD_VAR 0 12
26267: NOT
26268: OR
26269: IFTRUE 26278
26271: PUSH
26272: LD_VAR 0 10
26276: NOT
26277: OR
26278: IFFALSE 26313
// begin result := [ chassis , engine , control , weapon ] ;
26280: LD_ADDR_VAR 0 6
26284: PUSH
26285: LD_VAR 0 2
26289: PUSH
26290: LD_VAR 0 3
26294: PUSH
26295: LD_VAR 0 4
26299: PUSH
26300: LD_VAR 0 5
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: ST_TO_ADDR
// exit ;
26311: GO 26608
// end ; if not chassis in _chassis then
26313: LD_VAR 0 2
26317: PUSH
26318: LD_VAR 0 9
26322: IN
26323: NOT
26324: IFFALSE 26350
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26326: LD_ADDR_VAR 0 2
26330: PUSH
26331: LD_VAR 0 9
26335: PUSH
26336: LD_INT 1
26338: PPUSH
26339: LD_VAR 0 9
26343: PPUSH
26344: CALL_OW 12
26348: ARRAY
26349: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26350: LD_VAR 0 2
26354: PPUSH
26355: LD_VAR 0 3
26359: PPUSH
26360: CALL 26613 0 2
26364: NOT
26365: IFFALSE 26426
// repeat engine := _engine [ 1 ] ;
26367: LD_ADDR_VAR 0 3
26371: PUSH
26372: LD_VAR 0 11
26376: PUSH
26377: LD_INT 1
26379: ARRAY
26380: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26381: LD_ADDR_VAR 0 11
26385: PUSH
26386: LD_VAR 0 11
26390: PPUSH
26391: LD_INT 1
26393: PPUSH
26394: CALL_OW 3
26398: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26399: LD_VAR 0 2
26403: PPUSH
26404: LD_VAR 0 3
26408: PPUSH
26409: CALL 26613 0 2
26413: IFTRUE 26424
26415: PUSH
26416: LD_VAR 0 11
26420: PUSH
26421: EMPTY
26422: EQUAL
26423: OR
26424: IFFALSE 26367
// if not control in _control then
26426: LD_VAR 0 4
26430: PUSH
26431: LD_VAR 0 12
26435: IN
26436: NOT
26437: IFFALSE 26463
// control := _control [ rand ( 1 , _control ) ] ;
26439: LD_ADDR_VAR 0 4
26443: PUSH
26444: LD_VAR 0 12
26448: PUSH
26449: LD_INT 1
26451: PPUSH
26452: LD_VAR 0 12
26456: PPUSH
26457: CALL_OW 12
26461: ARRAY
26462: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26463: LD_VAR 0 2
26467: PPUSH
26468: LD_VAR 0 5
26472: PPUSH
26473: CALL 26835 0 2
26477: NOT
26478: IFFALSE 26539
// repeat weapon := _weapon [ 1 ] ;
26480: LD_ADDR_VAR 0 5
26484: PUSH
26485: LD_VAR 0 10
26489: PUSH
26490: LD_INT 1
26492: ARRAY
26493: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
26494: LD_ADDR_VAR 0 10
26498: PUSH
26499: LD_VAR 0 10
26503: PPUSH
26504: LD_INT 1
26506: PPUSH
26507: CALL_OW 3
26511: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
26512: LD_VAR 0 2
26516: PPUSH
26517: LD_VAR 0 5
26521: PPUSH
26522: CALL 26835 0 2
26526: IFTRUE 26537
26528: PUSH
26529: LD_VAR 0 10
26533: PUSH
26534: EMPTY
26535: EQUAL
26536: OR
26537: IFFALSE 26480
// result := [ ] ;
26539: LD_ADDR_VAR 0 6
26543: PUSH
26544: EMPTY
26545: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26546: LD_VAR 0 1
26550: PPUSH
26551: LD_VAR 0 2
26555: PPUSH
26556: LD_VAR 0 3
26560: PPUSH
26561: LD_VAR 0 4
26565: PPUSH
26566: LD_VAR 0 5
26570: PPUSH
26571: CALL_OW 448
26575: IFFALSE 26608
// result := [ chassis , engine , control , weapon ] ;
26577: LD_ADDR_VAR 0 6
26581: PUSH
26582: LD_VAR 0 2
26586: PUSH
26587: LD_VAR 0 3
26591: PUSH
26592: LD_VAR 0 4
26596: PUSH
26597: LD_VAR 0 5
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: ST_TO_ADDR
// end ;
26608: LD_VAR 0 6
26612: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
26613: LD_INT 0
26615: PPUSH
// if not chassis or not engine then
26616: LD_VAR 0 1
26620: NOT
26621: IFTRUE 26630
26623: PUSH
26624: LD_VAR 0 2
26628: NOT
26629: OR
26630: IFFALSE 26634
// exit ;
26632: GO 26830
// case engine of engine_solar :
26634: LD_VAR 0 2
26638: PUSH
26639: LD_INT 2
26641: DOUBLE
26642: EQUAL
26643: IFTRUE 26647
26645: GO 26685
26647: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
26648: LD_ADDR_VAR 0 3
26652: PUSH
26653: LD_INT 11
26655: PUSH
26656: LD_INT 12
26658: PUSH
26659: LD_INT 13
26661: PUSH
26662: LD_INT 14
26664: PUSH
26665: LD_INT 1
26667: PUSH
26668: LD_INT 2
26670: PUSH
26671: LD_INT 3
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: ST_TO_ADDR
26683: GO 26814
26685: LD_INT 1
26687: DOUBLE
26688: EQUAL
26689: IFTRUE 26693
26691: GO 26755
26693: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
26694: LD_ADDR_VAR 0 3
26698: PUSH
26699: LD_INT 11
26701: PUSH
26702: LD_INT 12
26704: PUSH
26705: LD_INT 13
26707: PUSH
26708: LD_INT 14
26710: PUSH
26711: LD_INT 1
26713: PUSH
26714: LD_INT 2
26716: PUSH
26717: LD_INT 3
26719: PUSH
26720: LD_INT 4
26722: PUSH
26723: LD_INT 5
26725: PUSH
26726: LD_INT 21
26728: PUSH
26729: LD_INT 23
26731: PUSH
26732: LD_INT 22
26734: PUSH
26735: LD_INT 24
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: ST_TO_ADDR
26753: GO 26814
26755: LD_INT 3
26757: DOUBLE
26758: EQUAL
26759: IFTRUE 26763
26761: GO 26813
26763: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26764: LD_ADDR_VAR 0 3
26768: PUSH
26769: LD_INT 13
26771: PUSH
26772: LD_INT 14
26774: PUSH
26775: LD_INT 2
26777: PUSH
26778: LD_INT 3
26780: PUSH
26781: LD_INT 4
26783: PUSH
26784: LD_INT 5
26786: PUSH
26787: LD_INT 21
26789: PUSH
26790: LD_INT 22
26792: PUSH
26793: LD_INT 23
26795: PUSH
26796: LD_INT 24
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: ST_TO_ADDR
26811: GO 26814
26813: POP
// result := ( chassis in result ) ;
26814: LD_ADDR_VAR 0 3
26818: PUSH
26819: LD_VAR 0 1
26823: PUSH
26824: LD_VAR 0 3
26828: IN
26829: ST_TO_ADDR
// end ;
26830: LD_VAR 0 3
26834: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
26835: LD_INT 0
26837: PPUSH
// if not chassis or not weapon then
26838: LD_VAR 0 1
26842: NOT
26843: IFTRUE 26852
26845: PUSH
26846: LD_VAR 0 2
26850: NOT
26851: OR
26852: IFFALSE 26856
// exit ;
26854: GO 27950
// case weapon of us_machine_gun :
26856: LD_VAR 0 2
26860: PUSH
26861: LD_INT 2
26863: DOUBLE
26864: EQUAL
26865: IFTRUE 26869
26867: GO 26899
26869: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
26870: LD_ADDR_VAR 0 3
26874: PUSH
26875: LD_INT 1
26877: PUSH
26878: LD_INT 2
26880: PUSH
26881: LD_INT 3
26883: PUSH
26884: LD_INT 4
26886: PUSH
26887: LD_INT 5
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: ST_TO_ADDR
26897: GO 27934
26899: LD_INT 3
26901: DOUBLE
26902: EQUAL
26903: IFTRUE 26907
26905: GO 26937
26907: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
26908: LD_ADDR_VAR 0 3
26912: PUSH
26913: LD_INT 1
26915: PUSH
26916: LD_INT 2
26918: PUSH
26919: LD_INT 3
26921: PUSH
26922: LD_INT 4
26924: PUSH
26925: LD_INT 5
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: ST_TO_ADDR
26935: GO 27934
26937: LD_INT 11
26939: DOUBLE
26940: EQUAL
26941: IFTRUE 26945
26943: GO 26975
26945: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
26946: LD_ADDR_VAR 0 3
26950: PUSH
26951: LD_INT 1
26953: PUSH
26954: LD_INT 2
26956: PUSH
26957: LD_INT 3
26959: PUSH
26960: LD_INT 4
26962: PUSH
26963: LD_INT 5
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: LIST
26972: ST_TO_ADDR
26973: GO 27934
26975: LD_INT 4
26977: DOUBLE
26978: EQUAL
26979: IFTRUE 26983
26981: GO 27009
26983: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
26984: LD_ADDR_VAR 0 3
26988: PUSH
26989: LD_INT 2
26991: PUSH
26992: LD_INT 3
26994: PUSH
26995: LD_INT 4
26997: PUSH
26998: LD_INT 5
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: ST_TO_ADDR
27007: GO 27934
27009: LD_INT 5
27011: DOUBLE
27012: EQUAL
27013: IFTRUE 27017
27015: GO 27043
27017: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27018: LD_ADDR_VAR 0 3
27022: PUSH
27023: LD_INT 2
27025: PUSH
27026: LD_INT 3
27028: PUSH
27029: LD_INT 4
27031: PUSH
27032: LD_INT 5
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: LIST
27039: LIST
27040: ST_TO_ADDR
27041: GO 27934
27043: LD_INT 9
27045: DOUBLE
27046: EQUAL
27047: IFTRUE 27051
27049: GO 27077
27051: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27052: LD_ADDR_VAR 0 3
27056: PUSH
27057: LD_INT 2
27059: PUSH
27060: LD_INT 3
27062: PUSH
27063: LD_INT 4
27065: PUSH
27066: LD_INT 5
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: ST_TO_ADDR
27075: GO 27934
27077: LD_INT 7
27079: DOUBLE
27080: EQUAL
27081: IFTRUE 27085
27083: GO 27111
27085: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27086: LD_ADDR_VAR 0 3
27090: PUSH
27091: LD_INT 2
27093: PUSH
27094: LD_INT 3
27096: PUSH
27097: LD_INT 4
27099: PUSH
27100: LD_INT 5
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: ST_TO_ADDR
27109: GO 27934
27111: LD_INT 12
27113: DOUBLE
27114: EQUAL
27115: IFTRUE 27119
27117: GO 27145
27119: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27120: LD_ADDR_VAR 0 3
27124: PUSH
27125: LD_INT 2
27127: PUSH
27128: LD_INT 3
27130: PUSH
27131: LD_INT 4
27133: PUSH
27134: LD_INT 5
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: ST_TO_ADDR
27143: GO 27934
27145: LD_INT 13
27147: DOUBLE
27148: EQUAL
27149: IFTRUE 27153
27151: GO 27179
27153: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27154: LD_ADDR_VAR 0 3
27158: PUSH
27159: LD_INT 2
27161: PUSH
27162: LD_INT 3
27164: PUSH
27165: LD_INT 4
27167: PUSH
27168: LD_INT 5
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: ST_TO_ADDR
27177: GO 27934
27179: LD_INT 14
27181: DOUBLE
27182: EQUAL
27183: IFTRUE 27187
27185: GO 27205
27187: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27188: LD_ADDR_VAR 0 3
27192: PUSH
27193: LD_INT 4
27195: PUSH
27196: LD_INT 5
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: ST_TO_ADDR
27203: GO 27934
27205: LD_INT 6
27207: DOUBLE
27208: EQUAL
27209: IFTRUE 27213
27211: GO 27231
27213: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27214: LD_ADDR_VAR 0 3
27218: PUSH
27219: LD_INT 4
27221: PUSH
27222: LD_INT 5
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: ST_TO_ADDR
27229: GO 27934
27231: LD_INT 10
27233: DOUBLE
27234: EQUAL
27235: IFTRUE 27239
27237: GO 27257
27239: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27240: LD_ADDR_VAR 0 3
27244: PUSH
27245: LD_INT 4
27247: PUSH
27248: LD_INT 5
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: ST_TO_ADDR
27255: GO 27934
27257: LD_INT 22
27259: DOUBLE
27260: EQUAL
27261: IFTRUE 27265
27263: GO 27291
27265: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27266: LD_ADDR_VAR 0 3
27270: PUSH
27271: LD_INT 11
27273: PUSH
27274: LD_INT 12
27276: PUSH
27277: LD_INT 13
27279: PUSH
27280: LD_INT 14
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: ST_TO_ADDR
27289: GO 27934
27291: LD_INT 23
27293: DOUBLE
27294: EQUAL
27295: IFTRUE 27299
27297: GO 27325
27299: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27300: LD_ADDR_VAR 0 3
27304: PUSH
27305: LD_INT 11
27307: PUSH
27308: LD_INT 12
27310: PUSH
27311: LD_INT 13
27313: PUSH
27314: LD_INT 14
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: LIST
27321: LIST
27322: ST_TO_ADDR
27323: GO 27934
27325: LD_INT 24
27327: DOUBLE
27328: EQUAL
27329: IFTRUE 27333
27331: GO 27359
27333: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27334: LD_ADDR_VAR 0 3
27338: PUSH
27339: LD_INT 11
27341: PUSH
27342: LD_INT 12
27344: PUSH
27345: LD_INT 13
27347: PUSH
27348: LD_INT 14
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: ST_TO_ADDR
27357: GO 27934
27359: LD_INT 30
27361: DOUBLE
27362: EQUAL
27363: IFTRUE 27367
27365: GO 27393
27367: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27368: LD_ADDR_VAR 0 3
27372: PUSH
27373: LD_INT 11
27375: PUSH
27376: LD_INT 12
27378: PUSH
27379: LD_INT 13
27381: PUSH
27382: LD_INT 14
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: ST_TO_ADDR
27391: GO 27934
27393: LD_INT 25
27395: DOUBLE
27396: EQUAL
27397: IFTRUE 27401
27399: GO 27419
27401: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27402: LD_ADDR_VAR 0 3
27406: PUSH
27407: LD_INT 13
27409: PUSH
27410: LD_INT 14
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: ST_TO_ADDR
27417: GO 27934
27419: LD_INT 27
27421: DOUBLE
27422: EQUAL
27423: IFTRUE 27427
27425: GO 27445
27427: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
27428: LD_ADDR_VAR 0 3
27432: PUSH
27433: LD_INT 13
27435: PUSH
27436: LD_INT 14
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: ST_TO_ADDR
27443: GO 27934
27445: LD_INT 92
27447: DOUBLE
27448: EQUAL
27449: IFTRUE 27453
27451: GO 27479
27453: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27454: LD_ADDR_VAR 0 3
27458: PUSH
27459: LD_INT 11
27461: PUSH
27462: LD_INT 12
27464: PUSH
27465: LD_INT 13
27467: PUSH
27468: LD_INT 14
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: ST_TO_ADDR
27477: GO 27934
27479: LD_INT 28
27481: DOUBLE
27482: EQUAL
27483: IFTRUE 27487
27485: GO 27505
27487: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27488: LD_ADDR_VAR 0 3
27492: PUSH
27493: LD_INT 13
27495: PUSH
27496: LD_INT 14
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: ST_TO_ADDR
27503: GO 27934
27505: LD_INT 29
27507: DOUBLE
27508: EQUAL
27509: IFTRUE 27513
27511: GO 27531
27513: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27514: LD_ADDR_VAR 0 3
27518: PUSH
27519: LD_INT 13
27521: PUSH
27522: LD_INT 14
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: ST_TO_ADDR
27529: GO 27934
27531: LD_INT 31
27533: DOUBLE
27534: EQUAL
27535: IFTRUE 27539
27537: GO 27557
27539: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
27540: LD_ADDR_VAR 0 3
27544: PUSH
27545: LD_INT 13
27547: PUSH
27548: LD_INT 14
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: ST_TO_ADDR
27555: GO 27934
27557: LD_INT 26
27559: DOUBLE
27560: EQUAL
27561: IFTRUE 27565
27563: GO 27583
27565: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
27566: LD_ADDR_VAR 0 3
27570: PUSH
27571: LD_INT 13
27573: PUSH
27574: LD_INT 14
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: ST_TO_ADDR
27581: GO 27934
27583: LD_INT 42
27585: DOUBLE
27586: EQUAL
27587: IFTRUE 27591
27589: GO 27617
27591: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
27592: LD_ADDR_VAR 0 3
27596: PUSH
27597: LD_INT 21
27599: PUSH
27600: LD_INT 22
27602: PUSH
27603: LD_INT 23
27605: PUSH
27606: LD_INT 24
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: ST_TO_ADDR
27615: GO 27934
27617: LD_INT 43
27619: DOUBLE
27620: EQUAL
27621: IFTRUE 27625
27623: GO 27651
27625: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
27626: LD_ADDR_VAR 0 3
27630: PUSH
27631: LD_INT 21
27633: PUSH
27634: LD_INT 22
27636: PUSH
27637: LD_INT 23
27639: PUSH
27640: LD_INT 24
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: ST_TO_ADDR
27649: GO 27934
27651: LD_INT 44
27653: DOUBLE
27654: EQUAL
27655: IFTRUE 27659
27657: GO 27685
27659: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
27660: LD_ADDR_VAR 0 3
27664: PUSH
27665: LD_INT 21
27667: PUSH
27668: LD_INT 22
27670: PUSH
27671: LD_INT 23
27673: PUSH
27674: LD_INT 24
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: ST_TO_ADDR
27683: GO 27934
27685: LD_INT 45
27687: DOUBLE
27688: EQUAL
27689: IFTRUE 27693
27691: GO 27719
27693: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
27694: LD_ADDR_VAR 0 3
27698: PUSH
27699: LD_INT 21
27701: PUSH
27702: LD_INT 22
27704: PUSH
27705: LD_INT 23
27707: PUSH
27708: LD_INT 24
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: ST_TO_ADDR
27717: GO 27934
27719: LD_INT 49
27721: DOUBLE
27722: EQUAL
27723: IFTRUE 27727
27725: GO 27753
27727: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
27728: LD_ADDR_VAR 0 3
27732: PUSH
27733: LD_INT 21
27735: PUSH
27736: LD_INT 22
27738: PUSH
27739: LD_INT 23
27741: PUSH
27742: LD_INT 24
27744: PUSH
27745: EMPTY
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: ST_TO_ADDR
27751: GO 27934
27753: LD_INT 51
27755: DOUBLE
27756: EQUAL
27757: IFTRUE 27761
27759: GO 27787
27761: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
27762: LD_ADDR_VAR 0 3
27766: PUSH
27767: LD_INT 21
27769: PUSH
27770: LD_INT 22
27772: PUSH
27773: LD_INT 23
27775: PUSH
27776: LD_INT 24
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: ST_TO_ADDR
27785: GO 27934
27787: LD_INT 52
27789: DOUBLE
27790: EQUAL
27791: IFTRUE 27795
27793: GO 27821
27795: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
27796: LD_ADDR_VAR 0 3
27800: PUSH
27801: LD_INT 21
27803: PUSH
27804: LD_INT 22
27806: PUSH
27807: LD_INT 23
27809: PUSH
27810: LD_INT 24
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: ST_TO_ADDR
27819: GO 27934
27821: LD_INT 53
27823: DOUBLE
27824: EQUAL
27825: IFTRUE 27829
27827: GO 27847
27829: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
27830: LD_ADDR_VAR 0 3
27834: PUSH
27835: LD_INT 23
27837: PUSH
27838: LD_INT 24
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: ST_TO_ADDR
27845: GO 27934
27847: LD_INT 46
27849: DOUBLE
27850: EQUAL
27851: IFTRUE 27855
27853: GO 27873
27855: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
27856: LD_ADDR_VAR 0 3
27860: PUSH
27861: LD_INT 23
27863: PUSH
27864: LD_INT 24
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: ST_TO_ADDR
27871: GO 27934
27873: LD_INT 47
27875: DOUBLE
27876: EQUAL
27877: IFTRUE 27881
27879: GO 27899
27881: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
27882: LD_ADDR_VAR 0 3
27886: PUSH
27887: LD_INT 23
27889: PUSH
27890: LD_INT 24
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: ST_TO_ADDR
27897: GO 27934
27899: LD_INT 98
27901: DOUBLE
27902: EQUAL
27903: IFTRUE 27907
27905: GO 27933
27907: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27908: LD_ADDR_VAR 0 3
27912: PUSH
27913: LD_INT 21
27915: PUSH
27916: LD_INT 22
27918: PUSH
27919: LD_INT 23
27921: PUSH
27922: LD_INT 24
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: ST_TO_ADDR
27931: GO 27934
27933: POP
// result := ( chassis in result ) ;
27934: LD_ADDR_VAR 0 3
27938: PUSH
27939: LD_VAR 0 1
27943: PUSH
27944: LD_VAR 0 3
27948: IN
27949: ST_TO_ADDR
// end ;
27950: LD_VAR 0 3
27954: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
27955: LD_INT 0
27957: PPUSH
27958: PPUSH
27959: PPUSH
27960: PPUSH
27961: PPUSH
27962: PPUSH
27963: PPUSH
// result := array ;
27964: LD_ADDR_VAR 0 5
27968: PUSH
27969: LD_VAR 0 1
27973: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
27974: LD_VAR 0 1
27978: NOT
27979: IFTRUE 27988
27981: PUSH
27982: LD_VAR 0 2
27986: NOT
27987: OR
27988: IFTRUE 27997
27990: PUSH
27991: LD_VAR 0 3
27995: NOT
27996: OR
27997: IFTRUE 28011
27999: PUSH
28000: LD_VAR 0 2
28004: PUSH
28005: LD_VAR 0 1
28009: GREATER
28010: OR
28011: IFTRUE 28025
28013: PUSH
28014: LD_VAR 0 3
28018: PUSH
28019: LD_VAR 0 1
28023: GREATER
28024: OR
28025: IFFALSE 28029
// exit ;
28027: GO 28325
// if direction then
28029: LD_VAR 0 4
28033: IFFALSE 28097
// begin d := 1 ;
28035: LD_ADDR_VAR 0 9
28039: PUSH
28040: LD_INT 1
28042: ST_TO_ADDR
// if i_from > i_to then
28043: LD_VAR 0 2
28047: PUSH
28048: LD_VAR 0 3
28052: GREATER
28053: IFFALSE 28079
// length := ( array - i_from ) + i_to else
28055: LD_ADDR_VAR 0 11
28059: PUSH
28060: LD_VAR 0 1
28064: PUSH
28065: LD_VAR 0 2
28069: MINUS
28070: PUSH
28071: LD_VAR 0 3
28075: PLUS
28076: ST_TO_ADDR
28077: GO 28095
// length := i_to - i_from ;
28079: LD_ADDR_VAR 0 11
28083: PUSH
28084: LD_VAR 0 3
28088: PUSH
28089: LD_VAR 0 2
28093: MINUS
28094: ST_TO_ADDR
// end else
28095: GO 28158
// begin d := - 1 ;
28097: LD_ADDR_VAR 0 9
28101: PUSH
28102: LD_INT 1
28104: NEG
28105: ST_TO_ADDR
// if i_from > i_to then
28106: LD_VAR 0 2
28110: PUSH
28111: LD_VAR 0 3
28115: GREATER
28116: IFFALSE 28136
// length := i_from - i_to else
28118: LD_ADDR_VAR 0 11
28122: PUSH
28123: LD_VAR 0 2
28127: PUSH
28128: LD_VAR 0 3
28132: MINUS
28133: ST_TO_ADDR
28134: GO 28158
// length := ( array - i_to ) + i_from ;
28136: LD_ADDR_VAR 0 11
28140: PUSH
28141: LD_VAR 0 1
28145: PUSH
28146: LD_VAR 0 3
28150: MINUS
28151: PUSH
28152: LD_VAR 0 2
28156: PLUS
28157: ST_TO_ADDR
// end ; if not length then
28158: LD_VAR 0 11
28162: NOT
28163: IFFALSE 28167
// exit ;
28165: GO 28325
// tmp := array ;
28167: LD_ADDR_VAR 0 10
28171: PUSH
28172: LD_VAR 0 1
28176: ST_TO_ADDR
// for i = 1 to length do
28177: LD_ADDR_VAR 0 6
28181: PUSH
28182: DOUBLE
28183: LD_INT 1
28185: DEC
28186: ST_TO_ADDR
28187: LD_VAR 0 11
28191: PUSH
28192: FOR_TO
28193: IFFALSE 28313
// begin for j = 1 to array do
28195: LD_ADDR_VAR 0 7
28199: PUSH
28200: DOUBLE
28201: LD_INT 1
28203: DEC
28204: ST_TO_ADDR
28205: LD_VAR 0 1
28209: PUSH
28210: FOR_TO
28211: IFFALSE 28299
// begin k := j + d ;
28213: LD_ADDR_VAR 0 8
28217: PUSH
28218: LD_VAR 0 7
28222: PUSH
28223: LD_VAR 0 9
28227: PLUS
28228: ST_TO_ADDR
// if k > array then
28229: LD_VAR 0 8
28233: PUSH
28234: LD_VAR 0 1
28238: GREATER
28239: IFFALSE 28249
// k := 1 ;
28241: LD_ADDR_VAR 0 8
28245: PUSH
28246: LD_INT 1
28248: ST_TO_ADDR
// if not k then
28249: LD_VAR 0 8
28253: NOT
28254: IFFALSE 28266
// k := array ;
28256: LD_ADDR_VAR 0 8
28260: PUSH
28261: LD_VAR 0 1
28265: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28266: LD_ADDR_VAR 0 10
28270: PUSH
28271: LD_VAR 0 10
28275: PPUSH
28276: LD_VAR 0 8
28280: PPUSH
28281: LD_VAR 0 1
28285: PUSH
28286: LD_VAR 0 7
28290: ARRAY
28291: PPUSH
28292: CALL_OW 1
28296: ST_TO_ADDR
// end ;
28297: GO 28210
28299: POP
28300: POP
// array := tmp ;
28301: LD_ADDR_VAR 0 1
28305: PUSH
28306: LD_VAR 0 10
28310: ST_TO_ADDR
// end ;
28311: GO 28192
28313: POP
28314: POP
// result := array ;
28315: LD_ADDR_VAR 0 5
28319: PUSH
28320: LD_VAR 0 1
28324: ST_TO_ADDR
// end ;
28325: LD_VAR 0 5
28329: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28330: LD_INT 0
28332: PPUSH
28333: PPUSH
// result := 0 ;
28334: LD_ADDR_VAR 0 3
28338: PUSH
28339: LD_INT 0
28341: ST_TO_ADDR
// if not array or not value in array then
28342: LD_VAR 0 1
28346: NOT
28347: IFTRUE 28362
28349: PUSH
28350: LD_VAR 0 2
28354: PUSH
28355: LD_VAR 0 1
28359: IN
28360: NOT
28361: OR
28362: IFFALSE 28366
// exit ;
28364: GO 28420
// for i = 1 to array do
28366: LD_ADDR_VAR 0 4
28370: PUSH
28371: DOUBLE
28372: LD_INT 1
28374: DEC
28375: ST_TO_ADDR
28376: LD_VAR 0 1
28380: PUSH
28381: FOR_TO
28382: IFFALSE 28418
// if value = array [ i ] then
28384: LD_VAR 0 2
28388: PUSH
28389: LD_VAR 0 1
28393: PUSH
28394: LD_VAR 0 4
28398: ARRAY
28399: EQUAL
28400: IFFALSE 28416
// begin result := i ;
28402: LD_ADDR_VAR 0 3
28406: PUSH
28407: LD_VAR 0 4
28411: ST_TO_ADDR
// exit ;
28412: POP
28413: POP
28414: GO 28420
// end ;
28416: GO 28381
28418: POP
28419: POP
// end ;
28420: LD_VAR 0 3
28424: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28425: LD_INT 0
28427: PPUSH
// vc_chassis := chassis ;
28428: LD_ADDR_OWVAR 37
28432: PUSH
28433: LD_VAR 0 1
28437: ST_TO_ADDR
// vc_engine := engine ;
28438: LD_ADDR_OWVAR 39
28442: PUSH
28443: LD_VAR 0 2
28447: ST_TO_ADDR
// vc_control := control ;
28448: LD_ADDR_OWVAR 38
28452: PUSH
28453: LD_VAR 0 3
28457: ST_TO_ADDR
// vc_weapon := weapon ;
28458: LD_ADDR_OWVAR 40
28462: PUSH
28463: LD_VAR 0 4
28467: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28468: LD_ADDR_OWVAR 41
28472: PUSH
28473: LD_VAR 0 5
28477: ST_TO_ADDR
// end ;
28478: LD_VAR 0 6
28482: RET
// export function WantPlant ( unit ) ; var task ; begin
28483: LD_INT 0
28485: PPUSH
28486: PPUSH
// result := false ;
28487: LD_ADDR_VAR 0 2
28491: PUSH
28492: LD_INT 0
28494: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28495: LD_ADDR_VAR 0 3
28499: PUSH
28500: LD_VAR 0 1
28504: PPUSH
28505: CALL_OW 437
28509: ST_TO_ADDR
// if task then
28510: LD_VAR 0 3
28514: IFFALSE 28542
// if task [ 1 ] [ 1 ] = p then
28516: LD_VAR 0 3
28520: PUSH
28521: LD_INT 1
28523: ARRAY
28524: PUSH
28525: LD_INT 1
28527: ARRAY
28528: PUSH
28529: LD_STRING p
28531: EQUAL
28532: IFFALSE 28542
// result := true ;
28534: LD_ADDR_VAR 0 2
28538: PUSH
28539: LD_INT 1
28541: ST_TO_ADDR
// end ;
28542: LD_VAR 0 2
28546: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28547: LD_INT 0
28549: PPUSH
28550: PPUSH
28551: PPUSH
28552: PPUSH
// if pos < 1 then
28553: LD_VAR 0 2
28557: PUSH
28558: LD_INT 1
28560: LESS
28561: IFFALSE 28565
// exit ;
28563: GO 28868
// if pos = 1 then
28565: LD_VAR 0 2
28569: PUSH
28570: LD_INT 1
28572: EQUAL
28573: IFFALSE 28606
// result := Replace ( arr , pos [ 1 ] , value ) else
28575: LD_ADDR_VAR 0 4
28579: PUSH
28580: LD_VAR 0 1
28584: PPUSH
28585: LD_VAR 0 2
28589: PUSH
28590: LD_INT 1
28592: ARRAY
28593: PPUSH
28594: LD_VAR 0 3
28598: PPUSH
28599: CALL_OW 1
28603: ST_TO_ADDR
28604: GO 28868
// begin tmp := arr ;
28606: LD_ADDR_VAR 0 6
28610: PUSH
28611: LD_VAR 0 1
28615: ST_TO_ADDR
// s_arr := [ tmp ] ;
28616: LD_ADDR_VAR 0 7
28620: PUSH
28621: LD_VAR 0 6
28625: PUSH
28626: EMPTY
28627: LIST
28628: ST_TO_ADDR
// for i = 1 to pos - 1 do
28629: LD_ADDR_VAR 0 5
28633: PUSH
28634: DOUBLE
28635: LD_INT 1
28637: DEC
28638: ST_TO_ADDR
28639: LD_VAR 0 2
28643: PUSH
28644: LD_INT 1
28646: MINUS
28647: PUSH
28648: FOR_TO
28649: IFFALSE 28694
// begin tmp := tmp [ pos [ i ] ] ;
28651: LD_ADDR_VAR 0 6
28655: PUSH
28656: LD_VAR 0 6
28660: PUSH
28661: LD_VAR 0 2
28665: PUSH
28666: LD_VAR 0 5
28670: ARRAY
28671: ARRAY
28672: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
28673: LD_ADDR_VAR 0 7
28677: PUSH
28678: LD_VAR 0 7
28682: PUSH
28683: LD_VAR 0 6
28687: PUSH
28688: EMPTY
28689: LIST
28690: ADD
28691: ST_TO_ADDR
// end ;
28692: GO 28648
28694: POP
28695: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
28696: LD_ADDR_VAR 0 6
28700: PUSH
28701: LD_VAR 0 6
28705: PPUSH
28706: LD_VAR 0 2
28710: PUSH
28711: LD_VAR 0 2
28715: ARRAY
28716: PPUSH
28717: LD_VAR 0 3
28721: PPUSH
28722: CALL_OW 1
28726: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
28727: LD_ADDR_VAR 0 7
28731: PUSH
28732: LD_VAR 0 7
28736: PPUSH
28737: LD_VAR 0 7
28741: PPUSH
28742: LD_VAR 0 6
28746: PPUSH
28747: CALL_OW 1
28751: ST_TO_ADDR
// for i = s_arr downto 2 do
28752: LD_ADDR_VAR 0 5
28756: PUSH
28757: DOUBLE
28758: LD_VAR 0 7
28762: INC
28763: ST_TO_ADDR
28764: LD_INT 2
28766: PUSH
28767: FOR_DOWNTO
28768: IFFALSE 28852
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
28770: LD_ADDR_VAR 0 6
28774: PUSH
28775: LD_VAR 0 7
28779: PUSH
28780: LD_VAR 0 5
28784: PUSH
28785: LD_INT 1
28787: MINUS
28788: ARRAY
28789: PPUSH
28790: LD_VAR 0 2
28794: PUSH
28795: LD_VAR 0 5
28799: PUSH
28800: LD_INT 1
28802: MINUS
28803: ARRAY
28804: PPUSH
28805: LD_VAR 0 7
28809: PUSH
28810: LD_VAR 0 5
28814: ARRAY
28815: PPUSH
28816: CALL_OW 1
28820: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
28821: LD_ADDR_VAR 0 7
28825: PUSH
28826: LD_VAR 0 7
28830: PPUSH
28831: LD_VAR 0 5
28835: PUSH
28836: LD_INT 1
28838: MINUS
28839: PPUSH
28840: LD_VAR 0 6
28844: PPUSH
28845: CALL_OW 1
28849: ST_TO_ADDR
// end ;
28850: GO 28767
28852: POP
28853: POP
// result := s_arr [ 1 ] ;
28854: LD_ADDR_VAR 0 4
28858: PUSH
28859: LD_VAR 0 7
28863: PUSH
28864: LD_INT 1
28866: ARRAY
28867: ST_TO_ADDR
// end ; end ;
28868: LD_VAR 0 4
28872: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
28873: LD_INT 0
28875: PPUSH
28876: PPUSH
// if not list then
28877: LD_VAR 0 1
28881: NOT
28882: IFFALSE 28886
// exit ;
28884: GO 28977
// i := list [ pos1 ] ;
28886: LD_ADDR_VAR 0 5
28890: PUSH
28891: LD_VAR 0 1
28895: PUSH
28896: LD_VAR 0 2
28900: ARRAY
28901: ST_TO_ADDR
// if not i then
28902: LD_VAR 0 5
28906: NOT
28907: IFFALSE 28911
// exit ;
28909: GO 28977
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
28911: LD_ADDR_VAR 0 1
28915: PUSH
28916: LD_VAR 0 1
28920: PPUSH
28921: LD_VAR 0 2
28925: PPUSH
28926: LD_VAR 0 1
28930: PUSH
28931: LD_VAR 0 3
28935: ARRAY
28936: PPUSH
28937: CALL_OW 1
28941: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
28942: LD_ADDR_VAR 0 1
28946: PUSH
28947: LD_VAR 0 1
28951: PPUSH
28952: LD_VAR 0 3
28956: PPUSH
28957: LD_VAR 0 5
28961: PPUSH
28962: CALL_OW 1
28966: ST_TO_ADDR
// result := list ;
28967: LD_ADDR_VAR 0 4
28971: PUSH
28972: LD_VAR 0 1
28976: ST_TO_ADDR
// end ;
28977: LD_VAR 0 4
28981: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
28982: LD_INT 0
28984: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
28985: LD_ADDR_VAR 0 5
28989: PUSH
28990: LD_VAR 0 1
28994: PPUSH
28995: CALL_OW 250
28999: PPUSH
29000: LD_VAR 0 1
29004: PPUSH
29005: CALL_OW 251
29009: PPUSH
29010: LD_VAR 0 2
29014: PPUSH
29015: LD_VAR 0 3
29019: PPUSH
29020: LD_VAR 0 4
29024: PPUSH
29025: CALL 29407 0 5
29029: ST_TO_ADDR
// end ;
29030: LD_VAR 0 5
29034: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
29035: LD_INT 0
29037: PPUSH
29038: PPUSH
29039: PPUSH
29040: PPUSH
// if not list or not unit then
29041: LD_VAR 0 2
29045: NOT
29046: IFTRUE 29055
29048: PUSH
29049: LD_VAR 0 1
29053: NOT
29054: OR
29055: IFFALSE 29059
// exit ;
29057: GO 29402
// result := [ ] ;
29059: LD_ADDR_VAR 0 5
29063: PUSH
29064: EMPTY
29065: ST_TO_ADDR
// for i in list do
29066: LD_ADDR_VAR 0 6
29070: PUSH
29071: LD_VAR 0 2
29075: PUSH
29076: FOR_IN
29077: IFFALSE 29295
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
29079: LD_ADDR_VAR 0 8
29083: PUSH
29084: LD_VAR 0 1
29088: PPUSH
29089: LD_VAR 0 6
29093: PUSH
29094: LD_INT 1
29096: ARRAY
29097: PPUSH
29098: LD_VAR 0 6
29102: PUSH
29103: LD_INT 2
29105: ARRAY
29106: PPUSH
29107: CALL_OW 297
29111: ST_TO_ADDR
// if not Count ( result ) then
29112: LD_VAR 0 5
29116: PPUSH
29117: CALL 25629 0 1
29121: NOT
29122: IFFALSE 29155
// begin result := Join ( result , [ i , tmp ] ) ;
29124: LD_ADDR_VAR 0 5
29128: PUSH
29129: LD_VAR 0 5
29133: PPUSH
29134: LD_VAR 0 6
29138: PUSH
29139: LD_VAR 0 8
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: PPUSH
29148: CALL 61595 0 2
29152: ST_TO_ADDR
// continue ;
29153: GO 29076
// end ; if result [ result ] [ 2 ] <= tmp then
29155: LD_VAR 0 5
29159: PUSH
29160: LD_VAR 0 5
29164: ARRAY
29165: PUSH
29166: LD_INT 2
29168: ARRAY
29169: PUSH
29170: LD_VAR 0 8
29174: LESSEQUAL
29175: IFFALSE 29208
// result := Join ( result , [ i , tmp ] ) else
29177: LD_ADDR_VAR 0 5
29181: PUSH
29182: LD_VAR 0 5
29186: PPUSH
29187: LD_VAR 0 6
29191: PUSH
29192: LD_VAR 0 8
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PPUSH
29201: CALL 61595 0 2
29205: ST_TO_ADDR
29206: GO 29293
// begin for j := 1 to Count ( result ) do
29208: LD_ADDR_VAR 0 7
29212: PUSH
29213: DOUBLE
29214: LD_INT 1
29216: DEC
29217: ST_TO_ADDR
29218: LD_VAR 0 5
29222: PPUSH
29223: CALL 25629 0 1
29227: PUSH
29228: FOR_TO
29229: IFFALSE 29291
// begin if tmp < result [ j ] [ 2 ] then
29231: LD_VAR 0 8
29235: PUSH
29236: LD_VAR 0 5
29240: PUSH
29241: LD_VAR 0 7
29245: ARRAY
29246: PUSH
29247: LD_INT 2
29249: ARRAY
29250: LESS
29251: IFFALSE 29289
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29253: LD_ADDR_VAR 0 5
29257: PUSH
29258: LD_VAR 0 5
29262: PPUSH
29263: LD_VAR 0 7
29267: PPUSH
29268: LD_VAR 0 6
29272: PUSH
29273: LD_VAR 0 8
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PPUSH
29282: CALL_OW 2
29286: ST_TO_ADDR
// break ;
29287: GO 29291
// end ; end ;
29289: GO 29228
29291: POP
29292: POP
// end ; end ;
29293: GO 29076
29295: POP
29296: POP
// if result and not asc then
29297: LD_VAR 0 5
29301: IFFALSE 29310
29303: PUSH
29304: LD_VAR 0 3
29308: NOT
29309: AND
29310: IFFALSE 29327
// result := ReverseArray ( result ) ;
29312: LD_ADDR_VAR 0 5
29316: PUSH
29317: LD_VAR 0 5
29321: PPUSH
29322: CALL 56685 0 1
29326: ST_TO_ADDR
// tmp := [ ] ;
29327: LD_ADDR_VAR 0 8
29331: PUSH
29332: EMPTY
29333: ST_TO_ADDR
// if mode then
29334: LD_VAR 0 4
29338: IFFALSE 29402
// begin for i := 1 to result do
29340: LD_ADDR_VAR 0 6
29344: PUSH
29345: DOUBLE
29346: LD_INT 1
29348: DEC
29349: ST_TO_ADDR
29350: LD_VAR 0 5
29354: PUSH
29355: FOR_TO
29356: IFFALSE 29390
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
29358: LD_ADDR_VAR 0 8
29362: PUSH
29363: LD_VAR 0 8
29367: PPUSH
29368: LD_VAR 0 5
29372: PUSH
29373: LD_VAR 0 6
29377: ARRAY
29378: PUSH
29379: LD_INT 1
29381: ARRAY
29382: PPUSH
29383: CALL 61595 0 2
29387: ST_TO_ADDR
29388: GO 29355
29390: POP
29391: POP
// result := tmp ;
29392: LD_ADDR_VAR 0 5
29396: PUSH
29397: LD_VAR 0 8
29401: ST_TO_ADDR
// end ; end ;
29402: LD_VAR 0 5
29406: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29407: LD_INT 0
29409: PPUSH
29410: PPUSH
29411: PPUSH
29412: PPUSH
// if not list then
29413: LD_VAR 0 3
29417: NOT
29418: IFFALSE 29422
// exit ;
29420: GO 29812
// result := [ ] ;
29422: LD_ADDR_VAR 0 6
29426: PUSH
29427: EMPTY
29428: ST_TO_ADDR
// for i in list do
29429: LD_ADDR_VAR 0 7
29433: PUSH
29434: LD_VAR 0 3
29438: PUSH
29439: FOR_IN
29440: IFFALSE 29642
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29442: LD_ADDR_VAR 0 9
29446: PUSH
29447: LD_VAR 0 7
29451: PPUSH
29452: LD_VAR 0 1
29456: PPUSH
29457: LD_VAR 0 2
29461: PPUSH
29462: CALL_OW 297
29466: ST_TO_ADDR
// if not result then
29467: LD_VAR 0 6
29471: NOT
29472: IFFALSE 29498
// result := [ [ i , tmp ] ] else
29474: LD_ADDR_VAR 0 6
29478: PUSH
29479: LD_VAR 0 7
29483: PUSH
29484: LD_VAR 0 9
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: EMPTY
29494: LIST
29495: ST_TO_ADDR
29496: GO 29640
// begin if result [ result ] [ 2 ] <= tmp then
29498: LD_VAR 0 6
29502: PUSH
29503: LD_VAR 0 6
29507: ARRAY
29508: PUSH
29509: LD_INT 2
29511: ARRAY
29512: PUSH
29513: LD_VAR 0 9
29517: LESSEQUAL
29518: IFFALSE 29560
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29520: LD_ADDR_VAR 0 6
29524: PUSH
29525: LD_VAR 0 6
29529: PPUSH
29530: LD_VAR 0 6
29534: PUSH
29535: LD_INT 1
29537: PLUS
29538: PPUSH
29539: LD_VAR 0 7
29543: PUSH
29544: LD_VAR 0 9
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: PPUSH
29553: CALL_OW 2
29557: ST_TO_ADDR
29558: GO 29640
// for j := 1 to result do
29560: LD_ADDR_VAR 0 8
29564: PUSH
29565: DOUBLE
29566: LD_INT 1
29568: DEC
29569: ST_TO_ADDR
29570: LD_VAR 0 6
29574: PUSH
29575: FOR_TO
29576: IFFALSE 29638
// begin if tmp < result [ j ] [ 2 ] then
29578: LD_VAR 0 9
29582: PUSH
29583: LD_VAR 0 6
29587: PUSH
29588: LD_VAR 0 8
29592: ARRAY
29593: PUSH
29594: LD_INT 2
29596: ARRAY
29597: LESS
29598: IFFALSE 29636
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29600: LD_ADDR_VAR 0 6
29604: PUSH
29605: LD_VAR 0 6
29609: PPUSH
29610: LD_VAR 0 8
29614: PPUSH
29615: LD_VAR 0 7
29619: PUSH
29620: LD_VAR 0 9
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: PPUSH
29629: CALL_OW 2
29633: ST_TO_ADDR
// break ;
29634: GO 29638
// end ; end ;
29636: GO 29575
29638: POP
29639: POP
// end ; end ;
29640: GO 29439
29642: POP
29643: POP
// if result and not asc then
29644: LD_VAR 0 6
29648: IFFALSE 29657
29650: PUSH
29651: LD_VAR 0 4
29655: NOT
29656: AND
29657: IFFALSE 29732
// begin tmp := result ;
29659: LD_ADDR_VAR 0 9
29663: PUSH
29664: LD_VAR 0 6
29668: ST_TO_ADDR
// for i = tmp downto 1 do
29669: LD_ADDR_VAR 0 7
29673: PUSH
29674: DOUBLE
29675: LD_VAR 0 9
29679: INC
29680: ST_TO_ADDR
29681: LD_INT 1
29683: PUSH
29684: FOR_DOWNTO
29685: IFFALSE 29730
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
29687: LD_ADDR_VAR 0 6
29691: PUSH
29692: LD_VAR 0 6
29696: PPUSH
29697: LD_VAR 0 9
29701: PUSH
29702: LD_VAR 0 7
29706: MINUS
29707: PUSH
29708: LD_INT 1
29710: PLUS
29711: PPUSH
29712: LD_VAR 0 9
29716: PUSH
29717: LD_VAR 0 7
29721: ARRAY
29722: PPUSH
29723: CALL_OW 1
29727: ST_TO_ADDR
29728: GO 29684
29730: POP
29731: POP
// end ; tmp := [ ] ;
29732: LD_ADDR_VAR 0 9
29736: PUSH
29737: EMPTY
29738: ST_TO_ADDR
// if mode then
29739: LD_VAR 0 5
29743: IFFALSE 29812
// begin for i = 1 to result do
29745: LD_ADDR_VAR 0 7
29749: PUSH
29750: DOUBLE
29751: LD_INT 1
29753: DEC
29754: ST_TO_ADDR
29755: LD_VAR 0 6
29759: PUSH
29760: FOR_TO
29761: IFFALSE 29800
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
29763: LD_ADDR_VAR 0 9
29767: PUSH
29768: LD_VAR 0 9
29772: PPUSH
29773: LD_VAR 0 7
29777: PPUSH
29778: LD_VAR 0 6
29782: PUSH
29783: LD_VAR 0 7
29787: ARRAY
29788: PUSH
29789: LD_INT 1
29791: ARRAY
29792: PPUSH
29793: CALL_OW 1
29797: ST_TO_ADDR
29798: GO 29760
29800: POP
29801: POP
// result := tmp ;
29802: LD_ADDR_VAR 0 6
29806: PUSH
29807: LD_VAR 0 9
29811: ST_TO_ADDR
// end ; end ;
29812: LD_VAR 0 6
29816: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29817: LD_INT 0
29819: PPUSH
29820: PPUSH
29821: PPUSH
29822: PPUSH
29823: PPUSH
29824: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29825: LD_ADDR_VAR 0 5
29829: PUSH
29830: LD_INT 0
29832: PUSH
29833: LD_INT 0
29835: PUSH
29836: LD_INT 0
29838: PUSH
29839: EMPTY
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: ST_TO_ADDR
// if not x or not y then
29847: LD_VAR 0 2
29851: NOT
29852: IFTRUE 29861
29854: PUSH
29855: LD_VAR 0 3
29859: NOT
29860: OR
29861: IFFALSE 29865
// exit ;
29863: GO 31521
// if not range then
29865: LD_VAR 0 4
29869: NOT
29870: IFFALSE 29880
// range := 10 ;
29872: LD_ADDR_VAR 0 4
29876: PUSH
29877: LD_INT 10
29879: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29880: LD_ADDR_VAR 0 8
29884: PUSH
29885: LD_INT 81
29887: PUSH
29888: LD_VAR 0 1
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 92
29899: PUSH
29900: LD_VAR 0 2
29904: PUSH
29905: LD_VAR 0 3
29909: PUSH
29910: LD_VAR 0 4
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: LIST
29919: LIST
29920: PUSH
29921: LD_INT 3
29923: PUSH
29924: LD_INT 21
29926: PUSH
29927: LD_INT 3
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: LIST
29942: PPUSH
29943: CALL_OW 69
29947: ST_TO_ADDR
// if not tmp then
29948: LD_VAR 0 8
29952: NOT
29953: IFFALSE 29957
// exit ;
29955: GO 31521
// for i in tmp do
29957: LD_ADDR_VAR 0 6
29961: PUSH
29962: LD_VAR 0 8
29966: PUSH
29967: FOR_IN
29968: IFFALSE 31496
// begin points := [ 0 , 0 , 0 ] ;
29970: LD_ADDR_VAR 0 9
29974: PUSH
29975: LD_INT 0
29977: PUSH
29978: LD_INT 0
29980: PUSH
29981: LD_INT 0
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: LIST
29988: ST_TO_ADDR
// bpoints := 1 ;
29989: LD_ADDR_VAR 0 10
29993: PUSH
29994: LD_INT 1
29996: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29997: LD_VAR 0 6
30001: PPUSH
30002: CALL_OW 247
30006: PUSH
30007: LD_INT 1
30009: DOUBLE
30010: EQUAL
30011: IFTRUE 30015
30013: GO 30597
30015: POP
// begin if GetClass ( i ) = 1 then
30016: LD_VAR 0 6
30020: PPUSH
30021: CALL_OW 257
30025: PUSH
30026: LD_INT 1
30028: EQUAL
30029: IFFALSE 30050
// points := [ 10 , 5 , 3 ] ;
30031: LD_ADDR_VAR 0 9
30035: PUSH
30036: LD_INT 10
30038: PUSH
30039: LD_INT 5
30041: PUSH
30042: LD_INT 3
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: LIST
30049: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30050: LD_VAR 0 6
30054: PPUSH
30055: CALL_OW 257
30059: PUSH
30060: LD_INT 2
30062: PUSH
30063: LD_INT 3
30065: PUSH
30066: LD_INT 4
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: LIST
30073: IN
30074: IFFALSE 30095
// points := [ 3 , 2 , 1 ] ;
30076: LD_ADDR_VAR 0 9
30080: PUSH
30081: LD_INT 3
30083: PUSH
30084: LD_INT 2
30086: PUSH
30087: LD_INT 1
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: LIST
30094: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30095: LD_VAR 0 6
30099: PPUSH
30100: CALL_OW 257
30104: PUSH
30105: LD_INT 5
30107: EQUAL
30108: IFFALSE 30129
// points := [ 130 , 5 , 2 ] ;
30110: LD_ADDR_VAR 0 9
30114: PUSH
30115: LD_INT 130
30117: PUSH
30118: LD_INT 5
30120: PUSH
30121: LD_INT 2
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: LIST
30128: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30129: LD_VAR 0 6
30133: PPUSH
30134: CALL_OW 257
30138: PUSH
30139: LD_INT 8
30141: EQUAL
30142: IFFALSE 30163
// points := [ 35 , 35 , 30 ] ;
30144: LD_ADDR_VAR 0 9
30148: PUSH
30149: LD_INT 35
30151: PUSH
30152: LD_INT 35
30154: PUSH
30155: LD_INT 30
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: LIST
30162: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30163: LD_VAR 0 6
30167: PPUSH
30168: CALL_OW 257
30172: PUSH
30173: LD_INT 9
30175: EQUAL
30176: IFFALSE 30197
// points := [ 20 , 55 , 40 ] ;
30178: LD_ADDR_VAR 0 9
30182: PUSH
30183: LD_INT 20
30185: PUSH
30186: LD_INT 55
30188: PUSH
30189: LD_INT 40
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: LIST
30196: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30197: LD_VAR 0 6
30201: PPUSH
30202: CALL_OW 257
30206: PUSH
30207: LD_INT 12
30209: PUSH
30210: LD_INT 16
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: IN
30217: IFFALSE 30238
// points := [ 5 , 3 , 2 ] ;
30219: LD_ADDR_VAR 0 9
30223: PUSH
30224: LD_INT 5
30226: PUSH
30227: LD_INT 3
30229: PUSH
30230: LD_INT 2
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: LIST
30237: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30238: LD_VAR 0 6
30242: PPUSH
30243: CALL_OW 257
30247: PUSH
30248: LD_INT 17
30250: EQUAL
30251: IFFALSE 30272
// points := [ 100 , 50 , 75 ] ;
30253: LD_ADDR_VAR 0 9
30257: PUSH
30258: LD_INT 100
30260: PUSH
30261: LD_INT 50
30263: PUSH
30264: LD_INT 75
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: LIST
30271: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30272: LD_VAR 0 6
30276: PPUSH
30277: CALL_OW 257
30281: PUSH
30282: LD_INT 15
30284: EQUAL
30285: IFFALSE 30306
// points := [ 10 , 5 , 3 ] ;
30287: LD_ADDR_VAR 0 9
30291: PUSH
30292: LD_INT 10
30294: PUSH
30295: LD_INT 5
30297: PUSH
30298: LD_INT 3
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: LIST
30305: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30306: LD_VAR 0 6
30310: PPUSH
30311: CALL_OW 257
30315: PUSH
30316: LD_INT 14
30318: EQUAL
30319: IFFALSE 30340
// points := [ 10 , 0 , 0 ] ;
30321: LD_ADDR_VAR 0 9
30325: PUSH
30326: LD_INT 10
30328: PUSH
30329: LD_INT 0
30331: PUSH
30332: LD_INT 0
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: LIST
30339: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30340: LD_VAR 0 6
30344: PPUSH
30345: CALL_OW 257
30349: PUSH
30350: LD_INT 11
30352: EQUAL
30353: IFFALSE 30374
// points := [ 30 , 10 , 5 ] ;
30355: LD_ADDR_VAR 0 9
30359: PUSH
30360: LD_INT 30
30362: PUSH
30363: LD_INT 10
30365: PUSH
30366: LD_INT 5
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: LIST
30373: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30374: LD_VAR 0 1
30378: PPUSH
30379: LD_INT 5
30381: PPUSH
30382: CALL_OW 321
30386: PUSH
30387: LD_INT 2
30389: EQUAL
30390: IFFALSE 30407
// bpoints := bpoints * 1.8 ;
30392: LD_ADDR_VAR 0 10
30396: PUSH
30397: LD_VAR 0 10
30401: PUSH
30402: LD_REAL  1.80000000000000E+0000
30405: MUL
30406: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30407: LD_VAR 0 6
30411: PPUSH
30412: CALL_OW 257
30416: PUSH
30417: LD_INT 1
30419: PUSH
30420: LD_INT 2
30422: PUSH
30423: LD_INT 3
30425: PUSH
30426: LD_INT 4
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: IN
30435: IFFALSE 30455
30437: PUSH
30438: LD_VAR 0 1
30442: PPUSH
30443: LD_INT 51
30445: PPUSH
30446: CALL_OW 321
30450: PUSH
30451: LD_INT 2
30453: EQUAL
30454: AND
30455: IFFALSE 30472
// bpoints := bpoints * 1.2 ;
30457: LD_ADDR_VAR 0 10
30461: PUSH
30462: LD_VAR 0 10
30466: PUSH
30467: LD_REAL  1.20000000000000E+0000
30470: MUL
30471: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30472: LD_VAR 0 6
30476: PPUSH
30477: CALL_OW 257
30481: PUSH
30482: LD_INT 5
30484: PUSH
30485: LD_INT 7
30487: PUSH
30488: LD_INT 9
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: LIST
30495: IN
30496: IFFALSE 30516
30498: PUSH
30499: LD_VAR 0 1
30503: PPUSH
30504: LD_INT 52
30506: PPUSH
30507: CALL_OW 321
30511: PUSH
30512: LD_INT 2
30514: EQUAL
30515: AND
30516: IFFALSE 30533
// bpoints := bpoints * 1.5 ;
30518: LD_ADDR_VAR 0 10
30522: PUSH
30523: LD_VAR 0 10
30527: PUSH
30528: LD_REAL  1.50000000000000E+0000
30531: MUL
30532: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30533: LD_VAR 0 1
30537: PPUSH
30538: LD_INT 66
30540: PPUSH
30541: CALL_OW 321
30545: PUSH
30546: LD_INT 2
30548: EQUAL
30549: IFFALSE 30566
// bpoints := bpoints * 1.1 ;
30551: LD_ADDR_VAR 0 10
30555: PUSH
30556: LD_VAR 0 10
30560: PUSH
30561: LD_REAL  1.10000000000000E+0000
30564: MUL
30565: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30566: LD_ADDR_VAR 0 10
30570: PUSH
30571: LD_VAR 0 10
30575: PUSH
30576: LD_VAR 0 6
30580: PPUSH
30581: LD_INT 1
30583: PPUSH
30584: CALL_OW 259
30588: PUSH
30589: LD_REAL  1.15000000000000E+0000
30592: MUL
30593: MUL
30594: ST_TO_ADDR
// end ; unit_vehicle :
30595: GO 31425
30597: LD_INT 2
30599: DOUBLE
30600: EQUAL
30601: IFTRUE 30605
30603: GO 31413
30605: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
30606: LD_VAR 0 6
30610: PPUSH
30611: CALL_OW 264
30615: PUSH
30616: LD_INT 2
30618: PUSH
30619: LD_INT 42
30621: PUSH
30622: LD_INT 24
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: LIST
30629: IN
30630: IFFALSE 30651
// points := [ 25 , 5 , 3 ] ;
30632: LD_ADDR_VAR 0 9
30636: PUSH
30637: LD_INT 25
30639: PUSH
30640: LD_INT 5
30642: PUSH
30643: LD_INT 3
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: LIST
30650: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
30651: LD_VAR 0 6
30655: PPUSH
30656: CALL_OW 264
30660: PUSH
30661: LD_INT 4
30663: PUSH
30664: LD_INT 43
30666: PUSH
30667: LD_INT 25
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: LIST
30674: IN
30675: IFFALSE 30696
// points := [ 40 , 15 , 5 ] ;
30677: LD_ADDR_VAR 0 9
30681: PUSH
30682: LD_INT 40
30684: PUSH
30685: LD_INT 15
30687: PUSH
30688: LD_INT 5
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: LIST
30695: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
30696: LD_VAR 0 6
30700: PPUSH
30701: CALL_OW 264
30705: PUSH
30706: LD_INT 3
30708: PUSH
30709: LD_INT 23
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: IN
30716: IFFALSE 30737
// points := [ 7 , 25 , 8 ] ;
30718: LD_ADDR_VAR 0 9
30722: PUSH
30723: LD_INT 7
30725: PUSH
30726: LD_INT 25
30728: PUSH
30729: LD_INT 8
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: LIST
30736: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
30737: LD_VAR 0 6
30741: PPUSH
30742: CALL_OW 264
30746: PUSH
30747: LD_INT 5
30749: PUSH
30750: LD_INT 27
30752: PUSH
30753: LD_INT 44
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: LIST
30760: IN
30761: IFFALSE 30782
// points := [ 14 , 50 , 16 ] ;
30763: LD_ADDR_VAR 0 9
30767: PUSH
30768: LD_INT 14
30770: PUSH
30771: LD_INT 50
30773: PUSH
30774: LD_INT 16
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: LIST
30781: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
30782: LD_VAR 0 6
30786: PPUSH
30787: CALL_OW 264
30791: PUSH
30792: LD_INT 6
30794: PUSH
30795: LD_INT 46
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: IN
30802: IFFALSE 30823
// points := [ 32 , 120 , 70 ] ;
30804: LD_ADDR_VAR 0 9
30808: PUSH
30809: LD_INT 32
30811: PUSH
30812: LD_INT 120
30814: PUSH
30815: LD_INT 70
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: LIST
30822: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
30823: LD_VAR 0 6
30827: PPUSH
30828: CALL_OW 264
30832: PUSH
30833: LD_INT 7
30835: PUSH
30836: LD_INT 28
30838: PUSH
30839: LD_INT 45
30841: PUSH
30842: LD_INT 92
30844: PUSH
30845: EMPTY
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: IN
30851: IFFALSE 30872
// points := [ 35 , 20 , 45 ] ;
30853: LD_ADDR_VAR 0 9
30857: PUSH
30858: LD_INT 35
30860: PUSH
30861: LD_INT 20
30863: PUSH
30864: LD_INT 45
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: LIST
30871: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30872: LD_VAR 0 6
30876: PPUSH
30877: CALL_OW 264
30881: PUSH
30882: LD_INT 47
30884: PUSH
30885: EMPTY
30886: LIST
30887: IN
30888: IFFALSE 30909
// points := [ 67 , 45 , 75 ] ;
30890: LD_ADDR_VAR 0 9
30894: PUSH
30895: LD_INT 67
30897: PUSH
30898: LD_INT 45
30900: PUSH
30901: LD_INT 75
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: LIST
30908: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30909: LD_VAR 0 6
30913: PPUSH
30914: CALL_OW 264
30918: PUSH
30919: LD_INT 26
30921: PUSH
30922: EMPTY
30923: LIST
30924: IN
30925: IFFALSE 30946
// points := [ 120 , 30 , 80 ] ;
30927: LD_ADDR_VAR 0 9
30931: PUSH
30932: LD_INT 120
30934: PUSH
30935: LD_INT 30
30937: PUSH
30938: LD_INT 80
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: LIST
30945: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30946: LD_VAR 0 6
30950: PPUSH
30951: CALL_OW 264
30955: PUSH
30956: LD_INT 22
30958: PUSH
30959: EMPTY
30960: LIST
30961: IN
30962: IFFALSE 30983
// points := [ 40 , 1 , 1 ] ;
30964: LD_ADDR_VAR 0 9
30968: PUSH
30969: LD_INT 40
30971: PUSH
30972: LD_INT 1
30974: PUSH
30975: LD_INT 1
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: LIST
30982: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30983: LD_VAR 0 6
30987: PPUSH
30988: CALL_OW 264
30992: PUSH
30993: LD_INT 29
30995: PUSH
30996: EMPTY
30997: LIST
30998: IN
30999: IFFALSE 31020
// points := [ 70 , 200 , 400 ] ;
31001: LD_ADDR_VAR 0 9
31005: PUSH
31006: LD_INT 70
31008: PUSH
31009: LD_INT 200
31011: PUSH
31012: LD_INT 400
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: LIST
31019: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31020: LD_VAR 0 6
31024: PPUSH
31025: CALL_OW 264
31029: PUSH
31030: LD_INT 14
31032: PUSH
31033: LD_INT 53
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: IN
31040: IFFALSE 31061
// points := [ 40 , 10 , 20 ] ;
31042: LD_ADDR_VAR 0 9
31046: PUSH
31047: LD_INT 40
31049: PUSH
31050: LD_INT 10
31052: PUSH
31053: LD_INT 20
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: LIST
31060: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31061: LD_VAR 0 6
31065: PPUSH
31066: CALL_OW 264
31070: PUSH
31071: LD_INT 9
31073: PUSH
31074: EMPTY
31075: LIST
31076: IN
31077: IFFALSE 31098
// points := [ 5 , 70 , 20 ] ;
31079: LD_ADDR_VAR 0 9
31083: PUSH
31084: LD_INT 5
31086: PUSH
31087: LD_INT 70
31089: PUSH
31090: LD_INT 20
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: LIST
31097: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31098: LD_VAR 0 6
31102: PPUSH
31103: CALL_OW 264
31107: PUSH
31108: LD_INT 10
31110: PUSH
31111: EMPTY
31112: LIST
31113: IN
31114: IFFALSE 31135
// points := [ 35 , 110 , 70 ] ;
31116: LD_ADDR_VAR 0 9
31120: PUSH
31121: LD_INT 35
31123: PUSH
31124: LD_INT 110
31126: PUSH
31127: LD_INT 70
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: LIST
31134: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31135: LD_VAR 0 6
31139: PPUSH
31140: CALL_OW 265
31144: PUSH
31145: LD_INT 25
31147: EQUAL
31148: IFFALSE 31169
// points := [ 80 , 65 , 100 ] ;
31150: LD_ADDR_VAR 0 9
31154: PUSH
31155: LD_INT 80
31157: PUSH
31158: LD_INT 65
31160: PUSH
31161: LD_INT 100
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: LIST
31168: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31169: LD_VAR 0 6
31173: PPUSH
31174: CALL_OW 263
31178: PUSH
31179: LD_INT 1
31181: EQUAL
31182: IFFALSE 31217
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31184: LD_ADDR_VAR 0 10
31188: PUSH
31189: LD_VAR 0 10
31193: PUSH
31194: LD_VAR 0 6
31198: PPUSH
31199: CALL_OW 311
31203: PPUSH
31204: LD_INT 3
31206: PPUSH
31207: CALL_OW 259
31211: PUSH
31212: LD_INT 4
31214: MUL
31215: MUL
31216: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31217: LD_VAR 0 6
31221: PPUSH
31222: CALL_OW 263
31226: PUSH
31227: LD_INT 2
31229: EQUAL
31230: IFFALSE 31281
// begin j := IsControledBy ( i ) ;
31232: LD_ADDR_VAR 0 7
31236: PUSH
31237: LD_VAR 0 6
31241: PPUSH
31242: CALL_OW 312
31246: ST_TO_ADDR
// if j then
31247: LD_VAR 0 7
31251: IFFALSE 31281
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31253: LD_ADDR_VAR 0 10
31257: PUSH
31258: LD_VAR 0 10
31262: PUSH
31263: LD_VAR 0 7
31267: PPUSH
31268: LD_INT 3
31270: PPUSH
31271: CALL_OW 259
31275: PUSH
31276: LD_INT 3
31278: MUL
31279: MUL
31280: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31281: LD_VAR 0 6
31285: PPUSH
31286: CALL_OW 264
31290: PUSH
31291: LD_INT 5
31293: PUSH
31294: LD_INT 6
31296: PUSH
31297: LD_INT 46
31299: PUSH
31300: LD_INT 44
31302: PUSH
31303: LD_INT 47
31305: PUSH
31306: LD_INT 45
31308: PUSH
31309: LD_INT 28
31311: PUSH
31312: LD_INT 7
31314: PUSH
31315: LD_INT 27
31317: PUSH
31318: LD_INT 29
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: IN
31333: IFFALSE 31353
31335: PUSH
31336: LD_VAR 0 1
31340: PPUSH
31341: LD_INT 52
31343: PPUSH
31344: CALL_OW 321
31348: PUSH
31349: LD_INT 2
31351: EQUAL
31352: AND
31353: IFFALSE 31370
// bpoints := bpoints * 1.2 ;
31355: LD_ADDR_VAR 0 10
31359: PUSH
31360: LD_VAR 0 10
31364: PUSH
31365: LD_REAL  1.20000000000000E+0000
31368: MUL
31369: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31370: LD_VAR 0 6
31374: PPUSH
31375: CALL_OW 264
31379: PUSH
31380: LD_INT 6
31382: PUSH
31383: LD_INT 46
31385: PUSH
31386: LD_INT 47
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: LIST
31393: IN
31394: IFFALSE 31411
// bpoints := bpoints * 1.2 ;
31396: LD_ADDR_VAR 0 10
31400: PUSH
31401: LD_VAR 0 10
31405: PUSH
31406: LD_REAL  1.20000000000000E+0000
31409: MUL
31410: ST_TO_ADDR
// end ; unit_building :
31411: GO 31425
31413: LD_INT 3
31415: DOUBLE
31416: EQUAL
31417: IFTRUE 31421
31419: GO 31424
31421: POP
// ; end ;
31422: GO 31425
31424: POP
// for j = 1 to 3 do
31425: LD_ADDR_VAR 0 7
31429: PUSH
31430: DOUBLE
31431: LD_INT 1
31433: DEC
31434: ST_TO_ADDR
31435: LD_INT 3
31437: PUSH
31438: FOR_TO
31439: IFFALSE 31492
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31441: LD_ADDR_VAR 0 5
31445: PUSH
31446: LD_VAR 0 5
31450: PPUSH
31451: LD_VAR 0 7
31455: PPUSH
31456: LD_VAR 0 5
31460: PUSH
31461: LD_VAR 0 7
31465: ARRAY
31466: PUSH
31467: LD_VAR 0 9
31471: PUSH
31472: LD_VAR 0 7
31476: ARRAY
31477: PUSH
31478: LD_VAR 0 10
31482: MUL
31483: PLUS
31484: PPUSH
31485: CALL_OW 1
31489: ST_TO_ADDR
31490: GO 31438
31492: POP
31493: POP
// end ;
31494: GO 29967
31496: POP
31497: POP
// result := Replace ( result , 4 , tmp ) ;
31498: LD_ADDR_VAR 0 5
31502: PUSH
31503: LD_VAR 0 5
31507: PPUSH
31508: LD_INT 4
31510: PPUSH
31511: LD_VAR 0 8
31515: PPUSH
31516: CALL_OW 1
31520: ST_TO_ADDR
// end ;
31521: LD_VAR 0 5
31525: RET
// export function DangerAtRange ( unit , range ) ; begin
31526: LD_INT 0
31528: PPUSH
// if not unit then
31529: LD_VAR 0 1
31533: NOT
31534: IFFALSE 31538
// exit ;
31536: GO 31583
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31538: LD_ADDR_VAR 0 3
31542: PUSH
31543: LD_VAR 0 1
31547: PPUSH
31548: CALL_OW 255
31552: PPUSH
31553: LD_VAR 0 1
31557: PPUSH
31558: CALL_OW 250
31562: PPUSH
31563: LD_VAR 0 1
31567: PPUSH
31568: CALL_OW 251
31572: PPUSH
31573: LD_VAR 0 2
31577: PPUSH
31578: CALL 29817 0 4
31582: ST_TO_ADDR
// end ;
31583: LD_VAR 0 3
31587: RET
// export function DangerInArea ( side , area ) ; begin
31588: LD_INT 0
31590: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
31591: LD_ADDR_VAR 0 3
31595: PUSH
31596: LD_VAR 0 2
31600: PPUSH
31601: LD_INT 81
31603: PUSH
31604: LD_VAR 0 1
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PPUSH
31613: CALL_OW 70
31617: ST_TO_ADDR
// end ;
31618: LD_VAR 0 3
31622: RET
// export function IsExtension ( b ) ; begin
31623: LD_INT 0
31625: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
31626: LD_ADDR_VAR 0 2
31630: PUSH
31631: LD_VAR 0 1
31635: PUSH
31636: LD_INT 23
31638: PUSH
31639: LD_INT 20
31641: PUSH
31642: LD_INT 22
31644: PUSH
31645: LD_INT 17
31647: PUSH
31648: LD_INT 24
31650: PUSH
31651: LD_INT 21
31653: PUSH
31654: LD_INT 19
31656: PUSH
31657: LD_INT 16
31659: PUSH
31660: LD_INT 25
31662: PUSH
31663: LD_INT 18
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: IN
31678: ST_TO_ADDR
// end ;
31679: LD_VAR 0 2
31683: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
31684: LD_INT 0
31686: PPUSH
31687: PPUSH
31688: PPUSH
// result := [ ] ;
31689: LD_ADDR_VAR 0 4
31693: PUSH
31694: EMPTY
31695: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
31696: LD_ADDR_VAR 0 5
31700: PUSH
31701: LD_VAR 0 2
31705: PPUSH
31706: LD_INT 21
31708: PUSH
31709: LD_INT 3
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PPUSH
31716: CALL_OW 70
31720: ST_TO_ADDR
// if not tmp then
31721: LD_VAR 0 5
31725: NOT
31726: IFFALSE 31730
// exit ;
31728: GO 31794
// if checkLink then
31730: LD_VAR 0 3
31734: IFFALSE 31784
// begin for i in tmp do
31736: LD_ADDR_VAR 0 6
31740: PUSH
31741: LD_VAR 0 5
31745: PUSH
31746: FOR_IN
31747: IFFALSE 31782
// if GetBase ( i ) <> base then
31749: LD_VAR 0 6
31753: PPUSH
31754: CALL_OW 274
31758: PUSH
31759: LD_VAR 0 1
31763: NONEQUAL
31764: IFFALSE 31780
// ComLinkToBase ( base , i ) ;
31766: LD_VAR 0 1
31770: PPUSH
31771: LD_VAR 0 6
31775: PPUSH
31776: CALL_OW 169
31780: GO 31746
31782: POP
31783: POP
// end ; result := tmp ;
31784: LD_ADDR_VAR 0 4
31788: PUSH
31789: LD_VAR 0 5
31793: ST_TO_ADDR
// end ;
31794: LD_VAR 0 4
31798: RET
// export function ComComplete ( units , b ) ; var i ; begin
31799: LD_INT 0
31801: PPUSH
31802: PPUSH
// if not units then
31803: LD_VAR 0 1
31807: NOT
31808: IFFALSE 31812
// exit ;
31810: GO 31902
// for i in units do
31812: LD_ADDR_VAR 0 4
31816: PUSH
31817: LD_VAR 0 1
31821: PUSH
31822: FOR_IN
31823: IFFALSE 31900
// if BuildingStatus ( b ) = bs_build then
31825: LD_VAR 0 2
31829: PPUSH
31830: CALL_OW 461
31834: PUSH
31835: LD_INT 1
31837: EQUAL
31838: IFFALSE 31898
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31840: LD_VAR 0 4
31844: PPUSH
31845: LD_STRING h
31847: PUSH
31848: LD_VAR 0 2
31852: PPUSH
31853: CALL_OW 250
31857: PUSH
31858: LD_VAR 0 2
31862: PPUSH
31863: CALL_OW 251
31867: PUSH
31868: LD_VAR 0 2
31872: PUSH
31873: LD_INT 0
31875: PUSH
31876: LD_INT 0
31878: PUSH
31879: LD_INT 0
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: PUSH
31891: EMPTY
31892: LIST
31893: PPUSH
31894: CALL_OW 446
31898: GO 31822
31900: POP
31901: POP
// end ;
31902: LD_VAR 0 3
31906: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31907: LD_INT 0
31909: PPUSH
31910: PPUSH
31911: PPUSH
31912: PPUSH
31913: PPUSH
31914: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
31915: LD_VAR 0 1
31919: NOT
31920: IFTRUE 31937
31922: PUSH
31923: LD_VAR 0 1
31927: PPUSH
31928: CALL_OW 263
31932: PUSH
31933: LD_INT 2
31935: NONEQUAL
31936: OR
31937: IFFALSE 31941
// exit ;
31939: GO 32257
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31941: LD_ADDR_VAR 0 6
31945: PUSH
31946: LD_INT 22
31948: PUSH
31949: LD_VAR 0 1
31953: PPUSH
31954: CALL_OW 255
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 2
31965: PUSH
31966: LD_INT 30
31968: PUSH
31969: LD_INT 36
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: PUSH
31976: LD_INT 34
31978: PUSH
31979: LD_INT 31
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: LIST
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PPUSH
31995: CALL_OW 69
31999: ST_TO_ADDR
// if not tmp then
32000: LD_VAR 0 6
32004: NOT
32005: IFFALSE 32009
// exit ;
32007: GO 32257
// result := [ ] ;
32009: LD_ADDR_VAR 0 2
32013: PUSH
32014: EMPTY
32015: ST_TO_ADDR
// for i in tmp do
32016: LD_ADDR_VAR 0 3
32020: PUSH
32021: LD_VAR 0 6
32025: PUSH
32026: FOR_IN
32027: IFFALSE 32098
// begin t := UnitsInside ( i ) ;
32029: LD_ADDR_VAR 0 4
32033: PUSH
32034: LD_VAR 0 3
32038: PPUSH
32039: CALL_OW 313
32043: ST_TO_ADDR
// if t then
32044: LD_VAR 0 4
32048: IFFALSE 32096
// for j in t do
32050: LD_ADDR_VAR 0 7
32054: PUSH
32055: LD_VAR 0 4
32059: PUSH
32060: FOR_IN
32061: IFFALSE 32094
// result := Replace ( result , result + 1 , j ) ;
32063: LD_ADDR_VAR 0 2
32067: PUSH
32068: LD_VAR 0 2
32072: PPUSH
32073: LD_VAR 0 2
32077: PUSH
32078: LD_INT 1
32080: PLUS
32081: PPUSH
32082: LD_VAR 0 7
32086: PPUSH
32087: CALL_OW 1
32091: ST_TO_ADDR
32092: GO 32060
32094: POP
32095: POP
// end ;
32096: GO 32026
32098: POP
32099: POP
// if not result then
32100: LD_VAR 0 2
32104: NOT
32105: IFFALSE 32109
// exit ;
32107: GO 32257
// mech := result [ 1 ] ;
32109: LD_ADDR_VAR 0 5
32113: PUSH
32114: LD_VAR 0 2
32118: PUSH
32119: LD_INT 1
32121: ARRAY
32122: ST_TO_ADDR
// if result > 1 then
32123: LD_VAR 0 2
32127: PUSH
32128: LD_INT 1
32130: GREATER
32131: IFFALSE 32243
// begin for i = 2 to result do
32133: LD_ADDR_VAR 0 3
32137: PUSH
32138: DOUBLE
32139: LD_INT 2
32141: DEC
32142: ST_TO_ADDR
32143: LD_VAR 0 2
32147: PUSH
32148: FOR_TO
32149: IFFALSE 32241
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32151: LD_ADDR_VAR 0 4
32155: PUSH
32156: LD_VAR 0 2
32160: PUSH
32161: LD_VAR 0 3
32165: ARRAY
32166: PPUSH
32167: LD_INT 3
32169: PPUSH
32170: CALL_OW 259
32174: PUSH
32175: LD_VAR 0 2
32179: PUSH
32180: LD_VAR 0 3
32184: ARRAY
32185: PPUSH
32186: CALL_OW 432
32190: MINUS
32191: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32192: LD_VAR 0 4
32196: PUSH
32197: LD_VAR 0 5
32201: PPUSH
32202: LD_INT 3
32204: PPUSH
32205: CALL_OW 259
32209: PUSH
32210: LD_VAR 0 5
32214: PPUSH
32215: CALL_OW 432
32219: MINUS
32220: GREATEREQUAL
32221: IFFALSE 32239
// mech := result [ i ] ;
32223: LD_ADDR_VAR 0 5
32227: PUSH
32228: LD_VAR 0 2
32232: PUSH
32233: LD_VAR 0 3
32237: ARRAY
32238: ST_TO_ADDR
// end ;
32239: GO 32148
32241: POP
32242: POP
// end ; ComLinkTo ( vehicle , mech ) ;
32243: LD_VAR 0 1
32247: PPUSH
32248: LD_VAR 0 5
32252: PPUSH
32253: CALL_OW 135
// end ;
32257: LD_VAR 0 2
32261: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32262: LD_INT 0
32264: PPUSH
32265: PPUSH
32266: PPUSH
32267: PPUSH
32268: PPUSH
32269: PPUSH
32270: PPUSH
32271: PPUSH
32272: PPUSH
32273: PPUSH
32274: PPUSH
32275: PPUSH
32276: PPUSH
// result := [ ] ;
32277: LD_ADDR_VAR 0 7
32281: PUSH
32282: EMPTY
32283: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32284: LD_VAR 0 1
32288: PPUSH
32289: CALL_OW 266
32293: PUSH
32294: LD_INT 0
32296: PUSH
32297: LD_INT 1
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: IN
32304: NOT
32305: IFFALSE 32309
// exit ;
32307: GO 33949
// if name then
32309: LD_VAR 0 3
32313: IFFALSE 32329
// SetBName ( base_dep , name ) ;
32315: LD_VAR 0 1
32319: PPUSH
32320: LD_VAR 0 3
32324: PPUSH
32325: CALL_OW 500
// base := GetBase ( base_dep ) ;
32329: LD_ADDR_VAR 0 15
32333: PUSH
32334: LD_VAR 0 1
32338: PPUSH
32339: CALL_OW 274
32343: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32344: LD_ADDR_VAR 0 16
32348: PUSH
32349: LD_VAR 0 1
32353: PPUSH
32354: CALL_OW 255
32358: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32359: LD_ADDR_VAR 0 17
32363: PUSH
32364: LD_VAR 0 1
32368: PPUSH
32369: CALL_OW 248
32373: ST_TO_ADDR
// if sources then
32374: LD_VAR 0 5
32378: IFFALSE 32425
// for i = 1 to 3 do
32380: LD_ADDR_VAR 0 8
32384: PUSH
32385: DOUBLE
32386: LD_INT 1
32388: DEC
32389: ST_TO_ADDR
32390: LD_INT 3
32392: PUSH
32393: FOR_TO
32394: IFFALSE 32423
// AddResourceType ( base , i , sources [ i ] ) ;
32396: LD_VAR 0 15
32400: PPUSH
32401: LD_VAR 0 8
32405: PPUSH
32406: LD_VAR 0 5
32410: PUSH
32411: LD_VAR 0 8
32415: ARRAY
32416: PPUSH
32417: CALL_OW 276
32421: GO 32393
32423: POP
32424: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
32425: LD_ADDR_VAR 0 18
32429: PUSH
32430: LD_VAR 0 15
32434: PPUSH
32435: LD_VAR 0 2
32439: PPUSH
32440: LD_INT 1
32442: PPUSH
32443: CALL 31684 0 3
32447: ST_TO_ADDR
// InitHc ;
32448: CALL_OW 19
// InitUc ;
32452: CALL_OW 18
// uc_side := side ;
32456: LD_ADDR_OWVAR 20
32460: PUSH
32461: LD_VAR 0 16
32465: ST_TO_ADDR
// uc_nation := nation ;
32466: LD_ADDR_OWVAR 21
32470: PUSH
32471: LD_VAR 0 17
32475: ST_TO_ADDR
// if buildings then
32476: LD_VAR 0 18
32480: IFFALSE 33808
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32482: LD_ADDR_VAR 0 19
32486: PUSH
32487: LD_VAR 0 18
32491: PPUSH
32492: LD_INT 2
32494: PUSH
32495: LD_INT 30
32497: PUSH
32498: LD_INT 29
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PUSH
32505: LD_INT 30
32507: PUSH
32508: LD_INT 30
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: LIST
32519: PPUSH
32520: CALL_OW 72
32524: ST_TO_ADDR
// if tmp then
32525: LD_VAR 0 19
32529: IFFALSE 32577
// for i in tmp do
32531: LD_ADDR_VAR 0 8
32535: PUSH
32536: LD_VAR 0 19
32540: PUSH
32541: FOR_IN
32542: IFFALSE 32575
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32544: LD_VAR 0 8
32548: PPUSH
32549: CALL_OW 250
32553: PPUSH
32554: LD_VAR 0 8
32558: PPUSH
32559: CALL_OW 251
32563: PPUSH
32564: LD_VAR 0 16
32568: PPUSH
32569: CALL_OW 441
32573: GO 32541
32575: POP
32576: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32577: LD_VAR 0 18
32581: PPUSH
32582: LD_INT 2
32584: PUSH
32585: LD_INT 30
32587: PUSH
32588: LD_INT 32
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 30
32597: PUSH
32598: LD_INT 33
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: LIST
32609: PPUSH
32610: CALL_OW 72
32614: IFFALSE 32702
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
32616: LD_ADDR_VAR 0 8
32620: PUSH
32621: LD_VAR 0 18
32625: PPUSH
32626: LD_INT 2
32628: PUSH
32629: LD_INT 30
32631: PUSH
32632: LD_INT 32
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 30
32641: PUSH
32642: LD_INT 33
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: LIST
32653: PPUSH
32654: CALL_OW 72
32658: PUSH
32659: FOR_IN
32660: IFFALSE 32700
// begin if not GetBWeapon ( i ) then
32662: LD_VAR 0 8
32666: PPUSH
32667: CALL_OW 269
32671: NOT
32672: IFFALSE 32698
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
32674: LD_VAR 0 8
32678: PPUSH
32679: LD_VAR 0 8
32683: PPUSH
32684: LD_VAR 0 2
32688: PPUSH
32689: CALL 33954 0 2
32693: PPUSH
32694: CALL_OW 431
// end ;
32698: GO 32659
32700: POP
32701: POP
// end ; for i = 1 to personel do
32702: LD_ADDR_VAR 0 8
32706: PUSH
32707: DOUBLE
32708: LD_INT 1
32710: DEC
32711: ST_TO_ADDR
32712: LD_VAR 0 6
32716: PUSH
32717: FOR_TO
32718: IFFALSE 33788
// begin if i > 4 then
32720: LD_VAR 0 8
32724: PUSH
32725: LD_INT 4
32727: GREATER
32728: IFFALSE 32732
// break ;
32730: GO 33788
// case i of 1 :
32732: LD_VAR 0 8
32736: PUSH
32737: LD_INT 1
32739: DOUBLE
32740: EQUAL
32741: IFTRUE 32745
32743: GO 32825
32745: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
32746: LD_ADDR_VAR 0 12
32750: PUSH
32751: LD_VAR 0 18
32755: PPUSH
32756: LD_INT 22
32758: PUSH
32759: LD_VAR 0 16
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PUSH
32768: LD_INT 58
32770: PUSH
32771: EMPTY
32772: LIST
32773: PUSH
32774: LD_INT 2
32776: PUSH
32777: LD_INT 30
32779: PUSH
32780: LD_INT 32
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 30
32789: PUSH
32790: LD_INT 4
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: LD_INT 30
32799: PUSH
32800: LD_INT 5
32802: PUSH
32803: EMPTY
32804: LIST
32805: LIST
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: LIST
32817: PPUSH
32818: CALL_OW 72
32822: ST_TO_ADDR
32823: GO 33047
32825: LD_INT 2
32827: DOUBLE
32828: EQUAL
32829: IFTRUE 32833
32831: GO 32895
32833: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
32834: LD_ADDR_VAR 0 12
32838: PUSH
32839: LD_VAR 0 18
32843: PPUSH
32844: LD_INT 22
32846: PUSH
32847: LD_VAR 0 16
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: LD_INT 2
32858: PUSH
32859: LD_INT 30
32861: PUSH
32862: LD_INT 0
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: LD_INT 30
32871: PUSH
32872: LD_INT 1
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: LIST
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PPUSH
32888: CALL_OW 72
32892: ST_TO_ADDR
32893: GO 33047
32895: LD_INT 3
32897: DOUBLE
32898: EQUAL
32899: IFTRUE 32903
32901: GO 32965
32903: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32904: LD_ADDR_VAR 0 12
32908: PUSH
32909: LD_VAR 0 18
32913: PPUSH
32914: LD_INT 22
32916: PUSH
32917: LD_VAR 0 16
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 2
32928: PUSH
32929: LD_INT 30
32931: PUSH
32932: LD_INT 2
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: PUSH
32939: LD_INT 30
32941: PUSH
32942: LD_INT 3
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: LIST
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PPUSH
32958: CALL_OW 72
32962: ST_TO_ADDR
32963: GO 33047
32965: LD_INT 4
32967: DOUBLE
32968: EQUAL
32969: IFTRUE 32973
32971: GO 33046
32973: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32974: LD_ADDR_VAR 0 12
32978: PUSH
32979: LD_VAR 0 18
32983: PPUSH
32984: LD_INT 22
32986: PUSH
32987: LD_VAR 0 16
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: LD_INT 2
32998: PUSH
32999: LD_INT 30
33001: PUSH
33002: LD_INT 6
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 30
33011: PUSH
33012: LD_INT 7
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 30
33021: PUSH
33022: LD_INT 8
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PPUSH
33039: CALL_OW 72
33043: ST_TO_ADDR
33044: GO 33047
33046: POP
// if i = 1 then
33047: LD_VAR 0 8
33051: PUSH
33052: LD_INT 1
33054: EQUAL
33055: IFFALSE 33166
// begin tmp := [ ] ;
33057: LD_ADDR_VAR 0 19
33061: PUSH
33062: EMPTY
33063: ST_TO_ADDR
// for j in f do
33064: LD_ADDR_VAR 0 9
33068: PUSH
33069: LD_VAR 0 12
33073: PUSH
33074: FOR_IN
33075: IFFALSE 33148
// if GetBType ( j ) = b_bunker then
33077: LD_VAR 0 9
33081: PPUSH
33082: CALL_OW 266
33086: PUSH
33087: LD_INT 32
33089: EQUAL
33090: IFFALSE 33117
// tmp := Insert ( tmp , 1 , j ) else
33092: LD_ADDR_VAR 0 19
33096: PUSH
33097: LD_VAR 0 19
33101: PPUSH
33102: LD_INT 1
33104: PPUSH
33105: LD_VAR 0 9
33109: PPUSH
33110: CALL_OW 2
33114: ST_TO_ADDR
33115: GO 33146
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33117: LD_ADDR_VAR 0 19
33121: PUSH
33122: LD_VAR 0 19
33126: PPUSH
33127: LD_VAR 0 19
33131: PUSH
33132: LD_INT 1
33134: PLUS
33135: PPUSH
33136: LD_VAR 0 9
33140: PPUSH
33141: CALL_OW 2
33145: ST_TO_ADDR
33146: GO 33074
33148: POP
33149: POP
// if tmp then
33150: LD_VAR 0 19
33154: IFFALSE 33166
// f := tmp ;
33156: LD_ADDR_VAR 0 12
33160: PUSH
33161: LD_VAR 0 19
33165: ST_TO_ADDR
// end ; x := personel [ i ] ;
33166: LD_ADDR_VAR 0 13
33170: PUSH
33171: LD_VAR 0 6
33175: PUSH
33176: LD_VAR 0 8
33180: ARRAY
33181: ST_TO_ADDR
// if x = - 1 then
33182: LD_VAR 0 13
33186: PUSH
33187: LD_INT 1
33189: NEG
33190: EQUAL
33191: IFFALSE 33402
// begin for j in f do
33193: LD_ADDR_VAR 0 9
33197: PUSH
33198: LD_VAR 0 12
33202: PUSH
33203: FOR_IN
33204: IFFALSE 33398
// repeat InitHc ;
33206: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33210: LD_VAR 0 9
33214: PPUSH
33215: CALL_OW 266
33219: PUSH
33220: LD_INT 5
33222: EQUAL
33223: IFFALSE 33293
// begin if UnitsInside ( j ) < 3 then
33225: LD_VAR 0 9
33229: PPUSH
33230: CALL_OW 313
33234: PUSH
33235: LD_INT 3
33237: LESS
33238: IFFALSE 33274
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33240: LD_INT 0
33242: PPUSH
33243: LD_INT 5
33245: PUSH
33246: LD_INT 8
33248: PUSH
33249: LD_INT 9
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: LIST
33256: PUSH
33257: LD_VAR 0 17
33261: ARRAY
33262: PPUSH
33263: LD_VAR 0 4
33267: PPUSH
33268: CALL_OW 380
33272: GO 33291
// PrepareHuman ( false , i , skill ) ;
33274: LD_INT 0
33276: PPUSH
33277: LD_VAR 0 8
33281: PPUSH
33282: LD_VAR 0 4
33286: PPUSH
33287: CALL_OW 380
// end else
33291: GO 33310
// PrepareHuman ( false , i , skill ) ;
33293: LD_INT 0
33295: PPUSH
33296: LD_VAR 0 8
33300: PPUSH
33301: LD_VAR 0 4
33305: PPUSH
33306: CALL_OW 380
// un := CreateHuman ;
33310: LD_ADDR_VAR 0 14
33314: PUSH
33315: CALL_OW 44
33319: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33320: LD_ADDR_VAR 0 7
33324: PUSH
33325: LD_VAR 0 7
33329: PPUSH
33330: LD_INT 1
33332: PPUSH
33333: LD_VAR 0 14
33337: PPUSH
33338: CALL_OW 2
33342: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33343: LD_VAR 0 14
33347: PPUSH
33348: LD_VAR 0 9
33352: PPUSH
33353: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33357: LD_VAR 0 9
33361: PPUSH
33362: CALL_OW 313
33366: PUSH
33367: LD_INT 6
33369: EQUAL
33370: IFTRUE 33394
33372: PUSH
33373: LD_VAR 0 9
33377: PPUSH
33378: CALL_OW 266
33382: PUSH
33383: LD_INT 32
33385: PUSH
33386: LD_INT 31
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: IN
33393: OR
33394: IFFALSE 33206
33396: GO 33203
33398: POP
33399: POP
// end else
33400: GO 33786
// for j = 1 to x do
33402: LD_ADDR_VAR 0 9
33406: PUSH
33407: DOUBLE
33408: LD_INT 1
33410: DEC
33411: ST_TO_ADDR
33412: LD_VAR 0 13
33416: PUSH
33417: FOR_TO
33418: IFFALSE 33784
// begin InitHc ;
33420: CALL_OW 19
// if not f then
33424: LD_VAR 0 12
33428: NOT
33429: IFFALSE 33518
// begin PrepareHuman ( false , i , skill ) ;
33431: LD_INT 0
33433: PPUSH
33434: LD_VAR 0 8
33438: PPUSH
33439: LD_VAR 0 4
33443: PPUSH
33444: CALL_OW 380
// un := CreateHuman ;
33448: LD_ADDR_VAR 0 14
33452: PUSH
33453: CALL_OW 44
33457: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33458: LD_ADDR_VAR 0 7
33462: PUSH
33463: LD_VAR 0 7
33467: PPUSH
33468: LD_INT 1
33470: PPUSH
33471: LD_VAR 0 14
33475: PPUSH
33476: CALL_OW 2
33480: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33481: LD_VAR 0 14
33485: PPUSH
33486: LD_VAR 0 1
33490: PPUSH
33491: CALL_OW 250
33495: PPUSH
33496: LD_VAR 0 1
33500: PPUSH
33501: CALL_OW 251
33505: PPUSH
33506: LD_INT 10
33508: PPUSH
33509: LD_INT 0
33511: PPUSH
33512: CALL_OW 50
// continue ;
33516: GO 33417
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33518: LD_VAR 0 12
33522: PUSH
33523: LD_INT 1
33525: ARRAY
33526: PPUSH
33527: CALL_OW 313
33531: IFFALSE 33559
33533: PUSH
33534: LD_VAR 0 12
33538: PUSH
33539: LD_INT 1
33541: ARRAY
33542: PPUSH
33543: CALL_OW 266
33547: PUSH
33548: LD_INT 32
33550: PUSH
33551: LD_INT 31
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: IN
33558: AND
33559: IFTRUE 33580
33561: PUSH
33562: LD_VAR 0 12
33566: PUSH
33567: LD_INT 1
33569: ARRAY
33570: PPUSH
33571: CALL_OW 313
33575: PUSH
33576: LD_INT 6
33578: EQUAL
33579: OR
33580: IFFALSE 33600
// f := Delete ( f , 1 ) ;
33582: LD_ADDR_VAR 0 12
33586: PUSH
33587: LD_VAR 0 12
33591: PPUSH
33592: LD_INT 1
33594: PPUSH
33595: CALL_OW 3
33599: ST_TO_ADDR
// if not f then
33600: LD_VAR 0 12
33604: NOT
33605: IFFALSE 33623
// begin x := x + 2 ;
33607: LD_ADDR_VAR 0 13
33611: PUSH
33612: LD_VAR 0 13
33616: PUSH
33617: LD_INT 2
33619: PLUS
33620: ST_TO_ADDR
// continue ;
33621: GO 33417
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
33623: LD_VAR 0 12
33627: PUSH
33628: LD_INT 1
33630: ARRAY
33631: PPUSH
33632: CALL_OW 266
33636: PUSH
33637: LD_INT 5
33639: EQUAL
33640: IFFALSE 33714
// begin if UnitsInside ( f [ 1 ] ) < 3 then
33642: LD_VAR 0 12
33646: PUSH
33647: LD_INT 1
33649: ARRAY
33650: PPUSH
33651: CALL_OW 313
33655: PUSH
33656: LD_INT 3
33658: LESS
33659: IFFALSE 33695
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33661: LD_INT 0
33663: PPUSH
33664: LD_INT 5
33666: PUSH
33667: LD_INT 8
33669: PUSH
33670: LD_INT 9
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: LIST
33677: PUSH
33678: LD_VAR 0 17
33682: ARRAY
33683: PPUSH
33684: LD_VAR 0 4
33688: PPUSH
33689: CALL_OW 380
33693: GO 33712
// PrepareHuman ( false , i , skill ) ;
33695: LD_INT 0
33697: PPUSH
33698: LD_VAR 0 8
33702: PPUSH
33703: LD_VAR 0 4
33707: PPUSH
33708: CALL_OW 380
// end else
33712: GO 33731
// PrepareHuman ( false , i , skill ) ;
33714: LD_INT 0
33716: PPUSH
33717: LD_VAR 0 8
33721: PPUSH
33722: LD_VAR 0 4
33726: PPUSH
33727: CALL_OW 380
// un := CreateHuman ;
33731: LD_ADDR_VAR 0 14
33735: PUSH
33736: CALL_OW 44
33740: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33741: LD_ADDR_VAR 0 7
33745: PUSH
33746: LD_VAR 0 7
33750: PPUSH
33751: LD_INT 1
33753: PPUSH
33754: LD_VAR 0 14
33758: PPUSH
33759: CALL_OW 2
33763: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
33764: LD_VAR 0 14
33768: PPUSH
33769: LD_VAR 0 12
33773: PUSH
33774: LD_INT 1
33776: ARRAY
33777: PPUSH
33778: CALL_OW 52
// end ;
33782: GO 33417
33784: POP
33785: POP
// end ;
33786: GO 32717
33788: POP
33789: POP
// result := result ^ buildings ;
33790: LD_ADDR_VAR 0 7
33794: PUSH
33795: LD_VAR 0 7
33799: PUSH
33800: LD_VAR 0 18
33804: ADD
33805: ST_TO_ADDR
// end else
33806: GO 33949
// begin for i = 1 to personel do
33808: LD_ADDR_VAR 0 8
33812: PUSH
33813: DOUBLE
33814: LD_INT 1
33816: DEC
33817: ST_TO_ADDR
33818: LD_VAR 0 6
33822: PUSH
33823: FOR_TO
33824: IFFALSE 33947
// begin if i > 4 then
33826: LD_VAR 0 8
33830: PUSH
33831: LD_INT 4
33833: GREATER
33834: IFFALSE 33838
// break ;
33836: GO 33947
// x := personel [ i ] ;
33838: LD_ADDR_VAR 0 13
33842: PUSH
33843: LD_VAR 0 6
33847: PUSH
33848: LD_VAR 0 8
33852: ARRAY
33853: ST_TO_ADDR
// if x = - 1 then
33854: LD_VAR 0 13
33858: PUSH
33859: LD_INT 1
33861: NEG
33862: EQUAL
33863: IFFALSE 33867
// continue ;
33865: GO 33823
// PrepareHuman ( false , i , skill ) ;
33867: LD_INT 0
33869: PPUSH
33870: LD_VAR 0 8
33874: PPUSH
33875: LD_VAR 0 4
33879: PPUSH
33880: CALL_OW 380
// un := CreateHuman ;
33884: LD_ADDR_VAR 0 14
33888: PUSH
33889: CALL_OW 44
33893: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33894: LD_VAR 0 14
33898: PPUSH
33899: LD_VAR 0 1
33903: PPUSH
33904: CALL_OW 250
33908: PPUSH
33909: LD_VAR 0 1
33913: PPUSH
33914: CALL_OW 251
33918: PPUSH
33919: LD_INT 10
33921: PPUSH
33922: LD_INT 0
33924: PPUSH
33925: CALL_OW 50
// result := result ^ un ;
33929: LD_ADDR_VAR 0 7
33933: PUSH
33934: LD_VAR 0 7
33938: PUSH
33939: LD_VAR 0 14
33943: ADD
33944: ST_TO_ADDR
// end ;
33945: GO 33823
33947: POP
33948: POP
// end ; end ;
33949: LD_VAR 0 7
33953: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33954: LD_INT 0
33956: PPUSH
33957: PPUSH
33958: PPUSH
33959: PPUSH
33960: PPUSH
33961: PPUSH
33962: PPUSH
33963: PPUSH
33964: PPUSH
33965: PPUSH
33966: PPUSH
33967: PPUSH
33968: PPUSH
33969: PPUSH
33970: PPUSH
33971: PPUSH
// result := false ;
33972: LD_ADDR_VAR 0 3
33976: PUSH
33977: LD_INT 0
33979: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33980: LD_VAR 0 1
33984: NOT
33985: IFTRUE 34010
33987: PUSH
33988: LD_VAR 0 1
33992: PPUSH
33993: CALL_OW 266
33997: PUSH
33998: LD_INT 32
34000: PUSH
34001: LD_INT 33
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: IN
34008: NOT
34009: OR
34010: IFFALSE 34014
// exit ;
34012: GO 35149
// nat := GetNation ( tower ) ;
34014: LD_ADDR_VAR 0 12
34018: PUSH
34019: LD_VAR 0 1
34023: PPUSH
34024: CALL_OW 248
34028: ST_TO_ADDR
// side := GetSide ( tower ) ;
34029: LD_ADDR_VAR 0 16
34033: PUSH
34034: LD_VAR 0 1
34038: PPUSH
34039: CALL_OW 255
34043: ST_TO_ADDR
// x := GetX ( tower ) ;
34044: LD_ADDR_VAR 0 10
34048: PUSH
34049: LD_VAR 0 1
34053: PPUSH
34054: CALL_OW 250
34058: ST_TO_ADDR
// y := GetY ( tower ) ;
34059: LD_ADDR_VAR 0 11
34063: PUSH
34064: LD_VAR 0 1
34068: PPUSH
34069: CALL_OW 251
34073: ST_TO_ADDR
// if not x or not y then
34074: LD_VAR 0 10
34078: NOT
34079: IFTRUE 34088
34081: PUSH
34082: LD_VAR 0 11
34086: NOT
34087: OR
34088: IFFALSE 34092
// exit ;
34090: GO 35149
// weapon := 0 ;
34092: LD_ADDR_VAR 0 18
34096: PUSH
34097: LD_INT 0
34099: ST_TO_ADDR
// fac_list := [ ] ;
34100: LD_ADDR_VAR 0 17
34104: PUSH
34105: EMPTY
34106: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34107: LD_ADDR_VAR 0 6
34111: PUSH
34112: LD_VAR 0 1
34116: PPUSH
34117: CALL_OW 274
34121: PPUSH
34122: LD_VAR 0 2
34126: PPUSH
34127: LD_INT 0
34129: PPUSH
34130: CALL 31684 0 3
34134: PPUSH
34135: LD_INT 30
34137: PUSH
34138: LD_INT 3
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PPUSH
34145: CALL_OW 72
34149: ST_TO_ADDR
// if not factories then
34150: LD_VAR 0 6
34154: NOT
34155: IFFALSE 34159
// exit ;
34157: GO 35149
// for i in factories do
34159: LD_ADDR_VAR 0 8
34163: PUSH
34164: LD_VAR 0 6
34168: PUSH
34169: FOR_IN
34170: IFFALSE 34195
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34172: LD_ADDR_VAR 0 17
34176: PUSH
34177: LD_VAR 0 17
34181: PUSH
34182: LD_VAR 0 8
34186: PPUSH
34187: CALL_OW 478
34191: UNION
34192: ST_TO_ADDR
34193: GO 34169
34195: POP
34196: POP
// if not fac_list then
34197: LD_VAR 0 17
34201: NOT
34202: IFFALSE 34206
// exit ;
34204: GO 35149
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34206: LD_ADDR_VAR 0 5
34210: PUSH
34211: LD_INT 4
34213: PUSH
34214: LD_INT 5
34216: PUSH
34217: LD_INT 9
34219: PUSH
34220: LD_INT 10
34222: PUSH
34223: LD_INT 6
34225: PUSH
34226: LD_INT 7
34228: PUSH
34229: LD_INT 11
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 27
34243: PUSH
34244: LD_INT 28
34246: PUSH
34247: LD_INT 26
34249: PUSH
34250: LD_INT 30
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: PUSH
34259: LD_INT 43
34261: PUSH
34262: LD_INT 44
34264: PUSH
34265: LD_INT 46
34267: PUSH
34268: LD_INT 45
34270: PUSH
34271: LD_INT 47
34273: PUSH
34274: LD_INT 49
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: LIST
34289: PUSH
34290: LD_VAR 0 12
34294: ARRAY
34295: ST_TO_ADDR
// list := list isect fac_list ;
34296: LD_ADDR_VAR 0 5
34300: PUSH
34301: LD_VAR 0 5
34305: PUSH
34306: LD_VAR 0 17
34310: ISECT
34311: ST_TO_ADDR
// if not list then
34312: LD_VAR 0 5
34316: NOT
34317: IFFALSE 34321
// exit ;
34319: GO 35149
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34321: LD_VAR 0 12
34325: PUSH
34326: LD_INT 3
34328: EQUAL
34329: IFFALSE 34341
34331: PUSH
34332: LD_INT 49
34334: PUSH
34335: LD_VAR 0 5
34339: IN
34340: AND
34341: IFFALSE 34361
34343: PUSH
34344: LD_INT 31
34346: PPUSH
34347: LD_VAR 0 16
34351: PPUSH
34352: CALL_OW 321
34356: PUSH
34357: LD_INT 2
34359: EQUAL
34360: AND
34361: IFFALSE 34421
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34363: LD_INT 22
34365: PUSH
34366: LD_VAR 0 16
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 35
34377: PUSH
34378: LD_INT 49
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PUSH
34385: LD_INT 91
34387: PUSH
34388: LD_VAR 0 1
34392: PUSH
34393: LD_INT 10
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: LIST
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: LIST
34405: PPUSH
34406: CALL_OW 69
34410: NOT
34411: IFFALSE 34421
// weapon := ru_time_lapser ;
34413: LD_ADDR_VAR 0 18
34417: PUSH
34418: LD_INT 49
34420: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34421: LD_VAR 0 12
34425: PUSH
34426: LD_INT 1
34428: PUSH
34429: LD_INT 2
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: IN
34436: IFFALSE 34460
34438: PUSH
34439: LD_INT 11
34441: PUSH
34442: LD_VAR 0 5
34446: IN
34447: IFTRUE 34459
34449: PUSH
34450: LD_INT 30
34452: PUSH
34453: LD_VAR 0 5
34457: IN
34458: OR
34459: AND
34460: IFFALSE 34480
34462: PUSH
34463: LD_INT 6
34465: PPUSH
34466: LD_VAR 0 16
34470: PPUSH
34471: CALL_OW 321
34475: PUSH
34476: LD_INT 2
34478: EQUAL
34479: AND
34480: IFFALSE 34647
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34482: LD_INT 22
34484: PUSH
34485: LD_VAR 0 16
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 2
34496: PUSH
34497: LD_INT 35
34499: PUSH
34500: LD_INT 11
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 35
34509: PUSH
34510: LD_INT 30
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: LIST
34521: PUSH
34522: LD_INT 91
34524: PUSH
34525: LD_VAR 0 1
34529: PUSH
34530: LD_INT 18
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: LIST
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: LIST
34542: PPUSH
34543: CALL_OW 69
34547: NOT
34548: IFFALSE 34624
34550: PUSH
34551: LD_INT 22
34553: PUSH
34554: LD_VAR 0 16
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: PUSH
34563: LD_INT 2
34565: PUSH
34566: LD_INT 30
34568: PUSH
34569: LD_INT 32
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 30
34578: PUSH
34579: LD_INT 33
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 91
34593: PUSH
34594: LD_VAR 0 1
34598: PUSH
34599: LD_INT 12
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: LIST
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: LIST
34611: PUSH
34612: EMPTY
34613: LIST
34614: PPUSH
34615: CALL_OW 69
34619: PUSH
34620: LD_INT 2
34622: GREATER
34623: AND
34624: IFFALSE 34647
// weapon := [ us_radar , ar_radar ] [ nat ] ;
34626: LD_ADDR_VAR 0 18
34630: PUSH
34631: LD_INT 11
34633: PUSH
34634: LD_INT 30
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_VAR 0 12
34645: ARRAY
34646: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
34647: LD_VAR 0 18
34651: NOT
34652: IFFALSE 34672
34654: PUSH
34655: LD_INT 40
34657: PPUSH
34658: LD_VAR 0 16
34662: PPUSH
34663: CALL_OW 321
34667: PUSH
34668: LD_INT 2
34670: EQUAL
34671: AND
34672: IFFALSE 34708
34674: PUSH
34675: LD_INT 7
34677: PUSH
34678: LD_VAR 0 5
34682: IN
34683: IFTRUE 34695
34685: PUSH
34686: LD_INT 28
34688: PUSH
34689: LD_VAR 0 5
34693: IN
34694: OR
34695: IFTRUE 34707
34697: PUSH
34698: LD_INT 45
34700: PUSH
34701: LD_VAR 0 5
34705: IN
34706: OR
34707: AND
34708: IFFALSE 34962
// begin hex := GetHexInfo ( x , y ) ;
34710: LD_ADDR_VAR 0 4
34714: PUSH
34715: LD_VAR 0 10
34719: PPUSH
34720: LD_VAR 0 11
34724: PPUSH
34725: CALL_OW 546
34729: ST_TO_ADDR
// if hex [ 1 ] then
34730: LD_VAR 0 4
34734: PUSH
34735: LD_INT 1
34737: ARRAY
34738: IFFALSE 34742
// exit ;
34740: GO 35149
// height := hex [ 2 ] ;
34742: LD_ADDR_VAR 0 15
34746: PUSH
34747: LD_VAR 0 4
34751: PUSH
34752: LD_INT 2
34754: ARRAY
34755: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
34756: LD_ADDR_VAR 0 14
34760: PUSH
34761: LD_INT 0
34763: PUSH
34764: LD_INT 2
34766: PUSH
34767: LD_INT 3
34769: PUSH
34770: LD_INT 5
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: ST_TO_ADDR
// for i in tmp do
34779: LD_ADDR_VAR 0 8
34783: PUSH
34784: LD_VAR 0 14
34788: PUSH
34789: FOR_IN
34790: IFFALSE 34960
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
34792: LD_ADDR_VAR 0 9
34796: PUSH
34797: LD_VAR 0 10
34801: PPUSH
34802: LD_VAR 0 8
34806: PPUSH
34807: LD_INT 5
34809: PPUSH
34810: CALL_OW 272
34814: PUSH
34815: LD_VAR 0 11
34819: PPUSH
34820: LD_VAR 0 8
34824: PPUSH
34825: LD_INT 5
34827: PPUSH
34828: CALL_OW 273
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34837: LD_VAR 0 9
34841: PUSH
34842: LD_INT 1
34844: ARRAY
34845: PPUSH
34846: LD_VAR 0 9
34850: PUSH
34851: LD_INT 2
34853: ARRAY
34854: PPUSH
34855: CALL_OW 488
34859: IFFALSE 34958
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34861: LD_ADDR_VAR 0 4
34865: PUSH
34866: LD_VAR 0 9
34870: PUSH
34871: LD_INT 1
34873: ARRAY
34874: PPUSH
34875: LD_VAR 0 9
34879: PUSH
34880: LD_INT 2
34882: ARRAY
34883: PPUSH
34884: CALL_OW 546
34888: ST_TO_ADDR
// if hex [ 1 ] then
34889: LD_VAR 0 4
34893: PUSH
34894: LD_INT 1
34896: ARRAY
34897: IFFALSE 34901
// continue ;
34899: GO 34789
// h := hex [ 2 ] ;
34901: LD_ADDR_VAR 0 13
34905: PUSH
34906: LD_VAR 0 4
34910: PUSH
34911: LD_INT 2
34913: ARRAY
34914: ST_TO_ADDR
// if h + 7 < height then
34915: LD_VAR 0 13
34919: PUSH
34920: LD_INT 7
34922: PLUS
34923: PUSH
34924: LD_VAR 0 15
34928: LESS
34929: IFFALSE 34958
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34931: LD_ADDR_VAR 0 18
34935: PUSH
34936: LD_INT 7
34938: PUSH
34939: LD_INT 28
34941: PUSH
34942: LD_INT 45
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: LIST
34949: PUSH
34950: LD_VAR 0 12
34954: ARRAY
34955: ST_TO_ADDR
// break ;
34956: GO 34960
// end ; end ; end ;
34958: GO 34789
34960: POP
34961: POP
// end ; if not weapon then
34962: LD_VAR 0 18
34966: NOT
34967: IFFALSE 35027
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34969: LD_ADDR_VAR 0 5
34973: PUSH
34974: LD_VAR 0 5
34978: PUSH
34979: LD_INT 11
34981: PUSH
34982: LD_INT 30
34984: PUSH
34985: LD_INT 49
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: LIST
34992: DIFF
34993: ST_TO_ADDR
// if not list then
34994: LD_VAR 0 5
34998: NOT
34999: IFFALSE 35003
// exit ;
35001: GO 35149
// weapon := list [ rand ( 1 , list ) ] ;
35003: LD_ADDR_VAR 0 18
35007: PUSH
35008: LD_VAR 0 5
35012: PUSH
35013: LD_INT 1
35015: PPUSH
35016: LD_VAR 0 5
35020: PPUSH
35021: CALL_OW 12
35025: ARRAY
35026: ST_TO_ADDR
// end ; if weapon then
35027: LD_VAR 0 18
35031: IFFALSE 35149
// begin tmp := CostOfWeapon ( weapon ) ;
35033: LD_ADDR_VAR 0 14
35037: PUSH
35038: LD_VAR 0 18
35042: PPUSH
35043: CALL_OW 451
35047: ST_TO_ADDR
// j := GetBase ( tower ) ;
35048: LD_ADDR_VAR 0 9
35052: PUSH
35053: LD_VAR 0 1
35057: PPUSH
35058: CALL_OW 274
35062: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35063: LD_VAR 0 9
35067: PPUSH
35068: LD_INT 1
35070: PPUSH
35071: CALL_OW 275
35075: PUSH
35076: LD_VAR 0 14
35080: PUSH
35081: LD_INT 1
35083: ARRAY
35084: GREATEREQUAL
35085: IFFALSE 35111
35087: PUSH
35088: LD_VAR 0 9
35092: PPUSH
35093: LD_INT 2
35095: PPUSH
35096: CALL_OW 275
35100: PUSH
35101: LD_VAR 0 14
35105: PUSH
35106: LD_INT 2
35108: ARRAY
35109: GREATEREQUAL
35110: AND
35111: IFFALSE 35137
35113: PUSH
35114: LD_VAR 0 9
35118: PPUSH
35119: LD_INT 3
35121: PPUSH
35122: CALL_OW 275
35126: PUSH
35127: LD_VAR 0 14
35131: PUSH
35132: LD_INT 3
35134: ARRAY
35135: GREATEREQUAL
35136: AND
35137: IFFALSE 35149
// result := weapon ;
35139: LD_ADDR_VAR 0 3
35143: PUSH
35144: LD_VAR 0 18
35148: ST_TO_ADDR
// end ; end ;
35149: LD_VAR 0 3
35153: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35154: LD_INT 0
35156: PPUSH
35157: PPUSH
// result := true ;
35158: LD_ADDR_VAR 0 3
35162: PUSH
35163: LD_INT 1
35165: ST_TO_ADDR
// if array1 = array2 then
35166: LD_VAR 0 1
35170: PUSH
35171: LD_VAR 0 2
35175: EQUAL
35176: IFFALSE 35236
// begin for i = 1 to array1 do
35178: LD_ADDR_VAR 0 4
35182: PUSH
35183: DOUBLE
35184: LD_INT 1
35186: DEC
35187: ST_TO_ADDR
35188: LD_VAR 0 1
35192: PUSH
35193: FOR_TO
35194: IFFALSE 35232
// if array1 [ i ] <> array2 [ i ] then
35196: LD_VAR 0 1
35200: PUSH
35201: LD_VAR 0 4
35205: ARRAY
35206: PUSH
35207: LD_VAR 0 2
35211: PUSH
35212: LD_VAR 0 4
35216: ARRAY
35217: NONEQUAL
35218: IFFALSE 35230
// begin result := false ;
35220: LD_ADDR_VAR 0 3
35224: PUSH
35225: LD_INT 0
35227: ST_TO_ADDR
// break ;
35228: GO 35232
// end ;
35230: GO 35193
35232: POP
35233: POP
// end else
35234: GO 35244
// result := false ;
35236: LD_ADDR_VAR 0 3
35240: PUSH
35241: LD_INT 0
35243: ST_TO_ADDR
// end ;
35244: LD_VAR 0 3
35248: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35249: LD_INT 0
35251: PPUSH
35252: PPUSH
// if not array1 or not array2 then
35253: LD_VAR 0 1
35257: NOT
35258: IFTRUE 35267
35260: PUSH
35261: LD_VAR 0 2
35265: NOT
35266: OR
35267: IFFALSE 35271
// exit ;
35269: GO 35335
// result := true ;
35271: LD_ADDR_VAR 0 3
35275: PUSH
35276: LD_INT 1
35278: ST_TO_ADDR
// for i = 1 to array1 do
35279: LD_ADDR_VAR 0 4
35283: PUSH
35284: DOUBLE
35285: LD_INT 1
35287: DEC
35288: ST_TO_ADDR
35289: LD_VAR 0 1
35293: PUSH
35294: FOR_TO
35295: IFFALSE 35333
// if array1 [ i ] <> array2 [ i ] then
35297: LD_VAR 0 1
35301: PUSH
35302: LD_VAR 0 4
35306: ARRAY
35307: PUSH
35308: LD_VAR 0 2
35312: PUSH
35313: LD_VAR 0 4
35317: ARRAY
35318: NONEQUAL
35319: IFFALSE 35331
// begin result := false ;
35321: LD_ADDR_VAR 0 3
35325: PUSH
35326: LD_INT 0
35328: ST_TO_ADDR
// break ;
35329: GO 35333
// end ;
35331: GO 35294
35333: POP
35334: POP
// end ;
35335: LD_VAR 0 3
35339: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35340: LD_INT 0
35342: PPUSH
35343: PPUSH
35344: PPUSH
// pom := GetBase ( fac ) ;
35345: LD_ADDR_VAR 0 5
35349: PUSH
35350: LD_VAR 0 1
35354: PPUSH
35355: CALL_OW 274
35359: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35360: LD_ADDR_VAR 0 4
35364: PUSH
35365: LD_VAR 0 2
35369: PUSH
35370: LD_INT 1
35372: ARRAY
35373: PPUSH
35374: LD_VAR 0 2
35378: PUSH
35379: LD_INT 2
35381: ARRAY
35382: PPUSH
35383: LD_VAR 0 2
35387: PUSH
35388: LD_INT 3
35390: ARRAY
35391: PPUSH
35392: LD_VAR 0 2
35396: PUSH
35397: LD_INT 4
35399: ARRAY
35400: PPUSH
35401: CALL_OW 449
35405: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35406: LD_ADDR_VAR 0 3
35410: PUSH
35411: LD_VAR 0 5
35415: PPUSH
35416: LD_INT 1
35418: PPUSH
35419: CALL_OW 275
35423: PUSH
35424: LD_VAR 0 4
35428: PUSH
35429: LD_INT 1
35431: ARRAY
35432: GREATEREQUAL
35433: IFFALSE 35459
35435: PUSH
35436: LD_VAR 0 5
35440: PPUSH
35441: LD_INT 2
35443: PPUSH
35444: CALL_OW 275
35448: PUSH
35449: LD_VAR 0 4
35453: PUSH
35454: LD_INT 2
35456: ARRAY
35457: GREATEREQUAL
35458: AND
35459: IFFALSE 35485
35461: PUSH
35462: LD_VAR 0 5
35466: PPUSH
35467: LD_INT 3
35469: PPUSH
35470: CALL_OW 275
35474: PUSH
35475: LD_VAR 0 4
35479: PUSH
35480: LD_INT 3
35482: ARRAY
35483: GREATEREQUAL
35484: AND
35485: ST_TO_ADDR
// end ;
35486: LD_VAR 0 3
35490: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35491: LD_INT 0
35493: PPUSH
35494: PPUSH
35495: PPUSH
35496: PPUSH
// pom := GetBase ( building ) ;
35497: LD_ADDR_VAR 0 3
35501: PUSH
35502: LD_VAR 0 1
35506: PPUSH
35507: CALL_OW 274
35511: ST_TO_ADDR
// if not pom then
35512: LD_VAR 0 3
35516: NOT
35517: IFFALSE 35521
// exit ;
35519: GO 35695
// btype := GetBType ( building ) ;
35521: LD_ADDR_VAR 0 5
35525: PUSH
35526: LD_VAR 0 1
35530: PPUSH
35531: CALL_OW 266
35535: ST_TO_ADDR
// if btype = b_armoury then
35536: LD_VAR 0 5
35540: PUSH
35541: LD_INT 4
35543: EQUAL
35544: IFFALSE 35554
// btype := b_barracks ;
35546: LD_ADDR_VAR 0 5
35550: PUSH
35551: LD_INT 5
35553: ST_TO_ADDR
// if btype = b_depot then
35554: LD_VAR 0 5
35558: PUSH
35559: LD_INT 0
35561: EQUAL
35562: IFFALSE 35572
// btype := b_warehouse ;
35564: LD_ADDR_VAR 0 5
35568: PUSH
35569: LD_INT 1
35571: ST_TO_ADDR
// if btype = b_workshop then
35572: LD_VAR 0 5
35576: PUSH
35577: LD_INT 2
35579: EQUAL
35580: IFFALSE 35590
// btype := b_factory ;
35582: LD_ADDR_VAR 0 5
35586: PUSH
35587: LD_INT 3
35589: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35590: LD_ADDR_VAR 0 4
35594: PUSH
35595: LD_VAR 0 5
35599: PPUSH
35600: LD_VAR 0 1
35604: PPUSH
35605: CALL_OW 248
35609: PPUSH
35610: CALL_OW 450
35614: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35615: LD_ADDR_VAR 0 2
35619: PUSH
35620: LD_VAR 0 3
35624: PPUSH
35625: LD_INT 1
35627: PPUSH
35628: CALL_OW 275
35632: PUSH
35633: LD_VAR 0 4
35637: PUSH
35638: LD_INT 1
35640: ARRAY
35641: GREATEREQUAL
35642: IFFALSE 35668
35644: PUSH
35645: LD_VAR 0 3
35649: PPUSH
35650: LD_INT 2
35652: PPUSH
35653: CALL_OW 275
35657: PUSH
35658: LD_VAR 0 4
35662: PUSH
35663: LD_INT 2
35665: ARRAY
35666: GREATEREQUAL
35667: AND
35668: IFFALSE 35694
35670: PUSH
35671: LD_VAR 0 3
35675: PPUSH
35676: LD_INT 3
35678: PPUSH
35679: CALL_OW 275
35683: PUSH
35684: LD_VAR 0 4
35688: PUSH
35689: LD_INT 3
35691: ARRAY
35692: GREATEREQUAL
35693: AND
35694: ST_TO_ADDR
// end ;
35695: LD_VAR 0 2
35699: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
35700: LD_INT 0
35702: PPUSH
35703: PPUSH
35704: PPUSH
// pom := GetBase ( building ) ;
35705: LD_ADDR_VAR 0 4
35709: PUSH
35710: LD_VAR 0 1
35714: PPUSH
35715: CALL_OW 274
35719: ST_TO_ADDR
// if not pom then
35720: LD_VAR 0 4
35724: NOT
35725: IFFALSE 35729
// exit ;
35727: GO 35834
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35729: LD_ADDR_VAR 0 5
35733: PUSH
35734: LD_VAR 0 2
35738: PPUSH
35739: LD_VAR 0 1
35743: PPUSH
35744: CALL_OW 248
35748: PPUSH
35749: CALL_OW 450
35753: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35754: LD_ADDR_VAR 0 3
35758: PUSH
35759: LD_VAR 0 4
35763: PPUSH
35764: LD_INT 1
35766: PPUSH
35767: CALL_OW 275
35771: PUSH
35772: LD_VAR 0 5
35776: PUSH
35777: LD_INT 1
35779: ARRAY
35780: GREATEREQUAL
35781: IFFALSE 35807
35783: PUSH
35784: LD_VAR 0 4
35788: PPUSH
35789: LD_INT 2
35791: PPUSH
35792: CALL_OW 275
35796: PUSH
35797: LD_VAR 0 5
35801: PUSH
35802: LD_INT 2
35804: ARRAY
35805: GREATEREQUAL
35806: AND
35807: IFFALSE 35833
35809: PUSH
35810: LD_VAR 0 4
35814: PPUSH
35815: LD_INT 3
35817: PPUSH
35818: CALL_OW 275
35822: PUSH
35823: LD_VAR 0 5
35827: PUSH
35828: LD_INT 3
35830: ARRAY
35831: GREATEREQUAL
35832: AND
35833: ST_TO_ADDR
// end ;
35834: LD_VAR 0 3
35838: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
35839: LD_INT 0
35841: PPUSH
35842: PPUSH
35843: PPUSH
35844: PPUSH
35845: PPUSH
35846: PPUSH
35847: PPUSH
35848: PPUSH
35849: PPUSH
35850: PPUSH
35851: PPUSH
// result := false ;
35852: LD_ADDR_VAR 0 8
35856: PUSH
35857: LD_INT 0
35859: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
35860: LD_VAR 0 5
35864: NOT
35865: IFTRUE 35874
35867: PUSH
35868: LD_VAR 0 1
35872: NOT
35873: OR
35874: IFTRUE 35883
35876: PUSH
35877: LD_VAR 0 2
35881: NOT
35882: OR
35883: IFTRUE 35892
35885: PUSH
35886: LD_VAR 0 3
35890: NOT
35891: OR
35892: IFFALSE 35896
// exit ;
35894: GO 36722
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
35896: LD_ADDR_VAR 0 14
35900: PUSH
35901: LD_VAR 0 1
35905: PPUSH
35906: LD_VAR 0 2
35910: PPUSH
35911: LD_VAR 0 3
35915: PPUSH
35916: LD_VAR 0 4
35920: PPUSH
35921: LD_VAR 0 5
35925: PUSH
35926: LD_INT 1
35928: ARRAY
35929: PPUSH
35930: CALL_OW 248
35934: PPUSH
35935: LD_INT 0
35937: PPUSH
35938: CALL 38003 0 6
35942: ST_TO_ADDR
// if not hexes then
35943: LD_VAR 0 14
35947: NOT
35948: IFFALSE 35952
// exit ;
35950: GO 36722
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35952: LD_ADDR_VAR 0 17
35956: PUSH
35957: LD_VAR 0 5
35961: PPUSH
35962: LD_INT 22
35964: PUSH
35965: LD_VAR 0 13
35969: PPUSH
35970: CALL_OW 255
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 2
35981: PUSH
35982: LD_INT 30
35984: PUSH
35985: LD_INT 0
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: LD_INT 30
35994: PUSH
35995: LD_INT 1
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: LIST
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PPUSH
36011: CALL_OW 72
36015: ST_TO_ADDR
// for i = 1 to hexes do
36016: LD_ADDR_VAR 0 9
36020: PUSH
36021: DOUBLE
36022: LD_INT 1
36024: DEC
36025: ST_TO_ADDR
36026: LD_VAR 0 14
36030: PUSH
36031: FOR_TO
36032: IFFALSE 36720
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36034: LD_ADDR_VAR 0 13
36038: PUSH
36039: LD_VAR 0 14
36043: PUSH
36044: LD_VAR 0 9
36048: ARRAY
36049: PUSH
36050: LD_INT 1
36052: ARRAY
36053: PPUSH
36054: LD_VAR 0 14
36058: PUSH
36059: LD_VAR 0 9
36063: ARRAY
36064: PUSH
36065: LD_INT 2
36067: ARRAY
36068: PPUSH
36069: CALL_OW 428
36073: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36074: LD_VAR 0 14
36078: PUSH
36079: LD_VAR 0 9
36083: ARRAY
36084: PUSH
36085: LD_INT 1
36087: ARRAY
36088: PPUSH
36089: LD_VAR 0 14
36093: PUSH
36094: LD_VAR 0 9
36098: ARRAY
36099: PUSH
36100: LD_INT 2
36102: ARRAY
36103: PPUSH
36104: CALL_OW 351
36108: IFTRUE 36147
36110: PUSH
36111: LD_VAR 0 14
36115: PUSH
36116: LD_VAR 0 9
36120: ARRAY
36121: PUSH
36122: LD_INT 1
36124: ARRAY
36125: PPUSH
36126: LD_VAR 0 14
36130: PUSH
36131: LD_VAR 0 9
36135: ARRAY
36136: PUSH
36137: LD_INT 2
36139: ARRAY
36140: PPUSH
36141: CALL_OW 488
36145: NOT
36146: OR
36147: IFTRUE 36164
36149: PUSH
36150: LD_VAR 0 13
36154: PPUSH
36155: CALL_OW 247
36159: PUSH
36160: LD_INT 3
36162: EQUAL
36163: OR
36164: IFFALSE 36170
// exit ;
36166: POP
36167: POP
36168: GO 36722
// if not tmp then
36170: LD_VAR 0 13
36174: NOT
36175: IFFALSE 36179
// continue ;
36177: GO 36031
// result := true ;
36179: LD_ADDR_VAR 0 8
36183: PUSH
36184: LD_INT 1
36186: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36187: LD_VAR 0 6
36191: IFFALSE 36208
36193: PUSH
36194: LD_VAR 0 13
36198: PPUSH
36199: CALL_OW 247
36203: PUSH
36204: LD_INT 2
36206: EQUAL
36207: AND
36208: IFFALSE 36225
36210: PUSH
36211: LD_VAR 0 13
36215: PPUSH
36216: CALL_OW 263
36220: PUSH
36221: LD_INT 1
36223: EQUAL
36224: AND
36225: IFFALSE 36389
// begin if IsDrivenBy ( tmp ) then
36227: LD_VAR 0 13
36231: PPUSH
36232: CALL_OW 311
36236: IFFALSE 36240
// continue ;
36238: GO 36031
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36240: LD_VAR 0 6
36244: PPUSH
36245: LD_INT 3
36247: PUSH
36248: LD_INT 60
36250: PUSH
36251: EMPTY
36252: LIST
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 3
36260: PUSH
36261: LD_INT 55
36263: PUSH
36264: EMPTY
36265: LIST
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PPUSH
36275: CALL_OW 72
36279: IFFALSE 36387
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36281: LD_ADDR_VAR 0 18
36285: PUSH
36286: LD_VAR 0 6
36290: PPUSH
36291: LD_INT 3
36293: PUSH
36294: LD_INT 60
36296: PUSH
36297: EMPTY
36298: LIST
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 3
36306: PUSH
36307: LD_INT 55
36309: PUSH
36310: EMPTY
36311: LIST
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PPUSH
36321: CALL_OW 72
36325: PUSH
36326: LD_INT 1
36328: ARRAY
36329: ST_TO_ADDR
// if IsInUnit ( driver ) then
36330: LD_VAR 0 18
36334: PPUSH
36335: CALL_OW 310
36339: IFFALSE 36350
// ComExit ( driver ) ;
36341: LD_VAR 0 18
36345: PPUSH
36346: CALL 61993 0 1
// AddComEnterUnit ( driver , tmp ) ;
36350: LD_VAR 0 18
36354: PPUSH
36355: LD_VAR 0 13
36359: PPUSH
36360: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36364: LD_VAR 0 18
36368: PPUSH
36369: LD_VAR 0 7
36373: PPUSH
36374: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36378: LD_VAR 0 18
36382: PPUSH
36383: CALL_OW 181
// end ; continue ;
36387: GO 36031
// end ; if not cleaners or not tmp in cleaners then
36389: LD_VAR 0 6
36393: NOT
36394: IFTRUE 36409
36396: PUSH
36397: LD_VAR 0 13
36401: PUSH
36402: LD_VAR 0 6
36406: IN
36407: NOT
36408: OR
36409: IFFALSE 36718
// begin if dep then
36411: LD_VAR 0 17
36415: IFFALSE 36551
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36417: LD_ADDR_VAR 0 16
36421: PUSH
36422: LD_VAR 0 17
36426: PUSH
36427: LD_INT 1
36429: ARRAY
36430: PPUSH
36431: CALL_OW 250
36435: PPUSH
36436: LD_VAR 0 17
36440: PUSH
36441: LD_INT 1
36443: ARRAY
36444: PPUSH
36445: CALL_OW 254
36449: PPUSH
36450: LD_INT 5
36452: PPUSH
36453: CALL_OW 272
36457: PUSH
36458: LD_VAR 0 17
36462: PUSH
36463: LD_INT 1
36465: ARRAY
36466: PPUSH
36467: CALL_OW 251
36471: PPUSH
36472: LD_VAR 0 17
36476: PUSH
36477: LD_INT 1
36479: ARRAY
36480: PPUSH
36481: CALL_OW 254
36485: PPUSH
36486: LD_INT 5
36488: PPUSH
36489: CALL_OW 273
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36498: LD_VAR 0 16
36502: PUSH
36503: LD_INT 1
36505: ARRAY
36506: PPUSH
36507: LD_VAR 0 16
36511: PUSH
36512: LD_INT 2
36514: ARRAY
36515: PPUSH
36516: CALL_OW 488
36520: IFFALSE 36551
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36522: LD_VAR 0 13
36526: PPUSH
36527: LD_VAR 0 16
36531: PUSH
36532: LD_INT 1
36534: ARRAY
36535: PPUSH
36536: LD_VAR 0 16
36540: PUSH
36541: LD_INT 2
36543: ARRAY
36544: PPUSH
36545: CALL_OW 111
// continue ;
36549: GO 36031
// end ; end ; r := GetDir ( tmp ) ;
36551: LD_ADDR_VAR 0 15
36555: PUSH
36556: LD_VAR 0 13
36560: PPUSH
36561: CALL_OW 254
36565: ST_TO_ADDR
// if r = 5 then
36566: LD_VAR 0 15
36570: PUSH
36571: LD_INT 5
36573: EQUAL
36574: IFFALSE 36584
// r := 0 ;
36576: LD_ADDR_VAR 0 15
36580: PUSH
36581: LD_INT 0
36583: ST_TO_ADDR
// for j = r to 5 do
36584: LD_ADDR_VAR 0 10
36588: PUSH
36589: DOUBLE
36590: LD_VAR 0 15
36594: DEC
36595: ST_TO_ADDR
36596: LD_INT 5
36598: PUSH
36599: FOR_TO
36600: IFFALSE 36716
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36602: LD_ADDR_VAR 0 11
36606: PUSH
36607: LD_VAR 0 13
36611: PPUSH
36612: CALL_OW 250
36616: PPUSH
36617: LD_VAR 0 10
36621: PPUSH
36622: LD_INT 2
36624: PPUSH
36625: CALL_OW 272
36629: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36630: LD_ADDR_VAR 0 12
36634: PUSH
36635: LD_VAR 0 13
36639: PPUSH
36640: CALL_OW 251
36644: PPUSH
36645: LD_VAR 0 10
36649: PPUSH
36650: LD_INT 2
36652: PPUSH
36653: CALL_OW 273
36657: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36658: LD_VAR 0 11
36662: PPUSH
36663: LD_VAR 0 12
36667: PPUSH
36668: CALL_OW 488
36672: IFFALSE 36691
36674: PUSH
36675: LD_VAR 0 11
36679: PPUSH
36680: LD_VAR 0 12
36684: PPUSH
36685: CALL_OW 428
36689: NOT
36690: AND
36691: IFFALSE 36714
// begin ComMoveXY ( tmp , _x , _y ) ;
36693: LD_VAR 0 13
36697: PPUSH
36698: LD_VAR 0 11
36702: PPUSH
36703: LD_VAR 0 12
36707: PPUSH
36708: CALL_OW 111
// break ;
36712: GO 36716
// end ; end ;
36714: GO 36599
36716: POP
36717: POP
// end ; end ;
36718: GO 36031
36720: POP
36721: POP
// end ;
36722: LD_VAR 0 8
36726: RET
// export function BuildingTechInvented ( side , btype ) ; begin
36727: LD_INT 0
36729: PPUSH
// result := true ;
36730: LD_ADDR_VAR 0 3
36734: PUSH
36735: LD_INT 1
36737: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
36738: LD_VAR 0 2
36742: PUSH
36743: LD_INT 24
36745: DOUBLE
36746: EQUAL
36747: IFTRUE 36757
36749: LD_INT 33
36751: DOUBLE
36752: EQUAL
36753: IFTRUE 36757
36755: GO 36782
36757: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
36758: LD_ADDR_VAR 0 3
36762: PUSH
36763: LD_INT 32
36765: PPUSH
36766: LD_VAR 0 1
36770: PPUSH
36771: CALL_OW 321
36775: PUSH
36776: LD_INT 2
36778: EQUAL
36779: ST_TO_ADDR
36780: GO 37098
36782: LD_INT 20
36784: DOUBLE
36785: EQUAL
36786: IFTRUE 36790
36788: GO 36815
36790: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
36791: LD_ADDR_VAR 0 3
36795: PUSH
36796: LD_INT 6
36798: PPUSH
36799: LD_VAR 0 1
36803: PPUSH
36804: CALL_OW 321
36808: PUSH
36809: LD_INT 2
36811: EQUAL
36812: ST_TO_ADDR
36813: GO 37098
36815: LD_INT 22
36817: DOUBLE
36818: EQUAL
36819: IFTRUE 36829
36821: LD_INT 36
36823: DOUBLE
36824: EQUAL
36825: IFTRUE 36829
36827: GO 36854
36829: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
36830: LD_ADDR_VAR 0 3
36834: PUSH
36835: LD_INT 15
36837: PPUSH
36838: LD_VAR 0 1
36842: PPUSH
36843: CALL_OW 321
36847: PUSH
36848: LD_INT 2
36850: EQUAL
36851: ST_TO_ADDR
36852: GO 37098
36854: LD_INT 30
36856: DOUBLE
36857: EQUAL
36858: IFTRUE 36862
36860: GO 36887
36862: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
36863: LD_ADDR_VAR 0 3
36867: PUSH
36868: LD_INT 20
36870: PPUSH
36871: LD_VAR 0 1
36875: PPUSH
36876: CALL_OW 321
36880: PUSH
36881: LD_INT 2
36883: EQUAL
36884: ST_TO_ADDR
36885: GO 37098
36887: LD_INT 28
36889: DOUBLE
36890: EQUAL
36891: IFTRUE 36901
36893: LD_INT 21
36895: DOUBLE
36896: EQUAL
36897: IFTRUE 36901
36899: GO 36926
36901: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
36902: LD_ADDR_VAR 0 3
36906: PUSH
36907: LD_INT 21
36909: PPUSH
36910: LD_VAR 0 1
36914: PPUSH
36915: CALL_OW 321
36919: PUSH
36920: LD_INT 2
36922: EQUAL
36923: ST_TO_ADDR
36924: GO 37098
36926: LD_INT 16
36928: DOUBLE
36929: EQUAL
36930: IFTRUE 36934
36932: GO 36959
36934: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
36935: LD_ADDR_VAR 0 3
36939: PUSH
36940: LD_INT 84
36942: PPUSH
36943: LD_VAR 0 1
36947: PPUSH
36948: CALL_OW 321
36952: PUSH
36953: LD_INT 2
36955: EQUAL
36956: ST_TO_ADDR
36957: GO 37098
36959: LD_INT 19
36961: DOUBLE
36962: EQUAL
36963: IFTRUE 36973
36965: LD_INT 23
36967: DOUBLE
36968: EQUAL
36969: IFTRUE 36973
36971: GO 36998
36973: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
36974: LD_ADDR_VAR 0 3
36978: PUSH
36979: LD_INT 83
36981: PPUSH
36982: LD_VAR 0 1
36986: PPUSH
36987: CALL_OW 321
36991: PUSH
36992: LD_INT 2
36994: EQUAL
36995: ST_TO_ADDR
36996: GO 37098
36998: LD_INT 17
37000: DOUBLE
37001: EQUAL
37002: IFTRUE 37006
37004: GO 37031
37006: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37007: LD_ADDR_VAR 0 3
37011: PUSH
37012: LD_INT 39
37014: PPUSH
37015: LD_VAR 0 1
37019: PPUSH
37020: CALL_OW 321
37024: PUSH
37025: LD_INT 2
37027: EQUAL
37028: ST_TO_ADDR
37029: GO 37098
37031: LD_INT 18
37033: DOUBLE
37034: EQUAL
37035: IFTRUE 37039
37037: GO 37064
37039: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37040: LD_ADDR_VAR 0 3
37044: PUSH
37045: LD_INT 40
37047: PPUSH
37048: LD_VAR 0 1
37052: PPUSH
37053: CALL_OW 321
37057: PUSH
37058: LD_INT 2
37060: EQUAL
37061: ST_TO_ADDR
37062: GO 37098
37064: LD_INT 27
37066: DOUBLE
37067: EQUAL
37068: IFTRUE 37072
37070: GO 37097
37072: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37073: LD_ADDR_VAR 0 3
37077: PUSH
37078: LD_INT 35
37080: PPUSH
37081: LD_VAR 0 1
37085: PPUSH
37086: CALL_OW 321
37090: PUSH
37091: LD_INT 2
37093: EQUAL
37094: ST_TO_ADDR
37095: GO 37098
37097: POP
// end ;
37098: LD_VAR 0 3
37102: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
37103: LD_INT 0
37105: PPUSH
37106: PPUSH
37107: PPUSH
37108: PPUSH
37109: PPUSH
37110: PPUSH
37111: PPUSH
37112: PPUSH
37113: PPUSH
37114: PPUSH
37115: PPUSH
// result := false ;
37116: LD_ADDR_VAR 0 6
37120: PUSH
37121: LD_INT 0
37123: ST_TO_ADDR
// if btype = b_depot then
37124: LD_VAR 0 2
37128: PUSH
37129: LD_INT 0
37131: EQUAL
37132: IFFALSE 37144
// begin result := true ;
37134: LD_ADDR_VAR 0 6
37138: PUSH
37139: LD_INT 1
37141: ST_TO_ADDR
// exit ;
37142: GO 37998
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37144: LD_VAR 0 1
37148: NOT
37149: IFTRUE 37174
37151: PUSH
37152: LD_VAR 0 1
37156: PPUSH
37157: CALL_OW 266
37161: PUSH
37162: LD_INT 0
37164: PUSH
37165: LD_INT 1
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: IN
37172: NOT
37173: OR
37174: IFTRUE 37183
37176: PUSH
37177: LD_VAR 0 2
37181: NOT
37182: OR
37183: IFTRUE 37219
37185: PUSH
37186: LD_VAR 0 5
37190: PUSH
37191: LD_INT 0
37193: PUSH
37194: LD_INT 1
37196: PUSH
37197: LD_INT 2
37199: PUSH
37200: LD_INT 3
37202: PUSH
37203: LD_INT 4
37205: PUSH
37206: LD_INT 5
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: LIST
37213: LIST
37214: LIST
37215: LIST
37216: IN
37217: NOT
37218: OR
37219: IFTRUE 37238
37221: PUSH
37222: LD_VAR 0 3
37226: PPUSH
37227: LD_VAR 0 4
37231: PPUSH
37232: CALL_OW 488
37236: NOT
37237: OR
37238: IFFALSE 37242
// exit ;
37240: GO 37998
// side := GetSide ( depot ) ;
37242: LD_ADDR_VAR 0 9
37246: PUSH
37247: LD_VAR 0 1
37251: PPUSH
37252: CALL_OW 255
37256: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
37257: LD_VAR 0 9
37261: PPUSH
37262: LD_VAR 0 2
37266: PPUSH
37267: CALL 36727 0 2
37271: NOT
37272: IFFALSE 37276
// exit ;
37274: GO 37998
// pom := GetBase ( depot ) ;
37276: LD_ADDR_VAR 0 10
37280: PUSH
37281: LD_VAR 0 1
37285: PPUSH
37286: CALL_OW 274
37290: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37291: LD_ADDR_VAR 0 11
37295: PUSH
37296: LD_VAR 0 2
37300: PPUSH
37301: LD_VAR 0 1
37305: PPUSH
37306: CALL_OW 248
37310: PPUSH
37311: CALL_OW 450
37315: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37316: LD_VAR 0 10
37320: PPUSH
37321: LD_INT 1
37323: PPUSH
37324: CALL_OW 275
37328: PUSH
37329: LD_VAR 0 11
37333: PUSH
37334: LD_INT 1
37336: ARRAY
37337: GREATEREQUAL
37338: IFFALSE 37364
37340: PUSH
37341: LD_VAR 0 10
37345: PPUSH
37346: LD_INT 2
37348: PPUSH
37349: CALL_OW 275
37353: PUSH
37354: LD_VAR 0 11
37358: PUSH
37359: LD_INT 2
37361: ARRAY
37362: GREATEREQUAL
37363: AND
37364: IFFALSE 37390
37366: PUSH
37367: LD_VAR 0 10
37371: PPUSH
37372: LD_INT 3
37374: PPUSH
37375: CALL_OW 275
37379: PUSH
37380: LD_VAR 0 11
37384: PUSH
37385: LD_INT 3
37387: ARRAY
37388: GREATEREQUAL
37389: AND
37390: NOT
37391: IFFALSE 37395
// exit ;
37393: GO 37998
// if GetBType ( depot ) = b_depot then
37395: LD_VAR 0 1
37399: PPUSH
37400: CALL_OW 266
37404: PUSH
37405: LD_INT 0
37407: EQUAL
37408: IFFALSE 37420
// dist := 28 else
37410: LD_ADDR_VAR 0 14
37414: PUSH
37415: LD_INT 28
37417: ST_TO_ADDR
37418: GO 37428
// dist := 36 ;
37420: LD_ADDR_VAR 0 14
37424: PUSH
37425: LD_INT 36
37427: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37428: LD_VAR 0 1
37432: PPUSH
37433: LD_VAR 0 3
37437: PPUSH
37438: LD_VAR 0 4
37442: PPUSH
37443: CALL_OW 297
37447: PUSH
37448: LD_VAR 0 14
37452: GREATER
37453: IFFALSE 37457
// exit ;
37455: GO 37998
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37457: LD_ADDR_VAR 0 12
37461: PUSH
37462: LD_VAR 0 2
37466: PPUSH
37467: LD_VAR 0 3
37471: PPUSH
37472: LD_VAR 0 4
37476: PPUSH
37477: LD_VAR 0 5
37481: PPUSH
37482: LD_VAR 0 1
37486: PPUSH
37487: CALL_OW 248
37491: PPUSH
37492: LD_INT 0
37494: PPUSH
37495: CALL 38003 0 6
37499: ST_TO_ADDR
// if not hexes then
37500: LD_VAR 0 12
37504: NOT
37505: IFFALSE 37509
// exit ;
37507: GO 37998
// hex := GetHexInfo ( x , y ) ;
37509: LD_ADDR_VAR 0 15
37513: PUSH
37514: LD_VAR 0 3
37518: PPUSH
37519: LD_VAR 0 4
37523: PPUSH
37524: CALL_OW 546
37528: ST_TO_ADDR
// if hex [ 1 ] then
37529: LD_VAR 0 15
37533: PUSH
37534: LD_INT 1
37536: ARRAY
37537: IFFALSE 37541
// exit ;
37539: GO 37998
// height := hex [ 2 ] ;
37541: LD_ADDR_VAR 0 13
37545: PUSH
37546: LD_VAR 0 15
37550: PUSH
37551: LD_INT 2
37553: ARRAY
37554: ST_TO_ADDR
// for i = 1 to hexes do
37555: LD_ADDR_VAR 0 7
37559: PUSH
37560: DOUBLE
37561: LD_INT 1
37563: DEC
37564: ST_TO_ADDR
37565: LD_VAR 0 12
37569: PUSH
37570: FOR_TO
37571: IFFALSE 37915
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37573: LD_VAR 0 12
37577: PUSH
37578: LD_VAR 0 7
37582: ARRAY
37583: PUSH
37584: LD_INT 1
37586: ARRAY
37587: PPUSH
37588: LD_VAR 0 12
37592: PUSH
37593: LD_VAR 0 7
37597: ARRAY
37598: PUSH
37599: LD_INT 2
37601: ARRAY
37602: PPUSH
37603: CALL_OW 488
37607: NOT
37608: IFTRUE 37650
37610: PUSH
37611: LD_VAR 0 12
37615: PUSH
37616: LD_VAR 0 7
37620: ARRAY
37621: PUSH
37622: LD_INT 1
37624: ARRAY
37625: PPUSH
37626: LD_VAR 0 12
37630: PUSH
37631: LD_VAR 0 7
37635: ARRAY
37636: PUSH
37637: LD_INT 2
37639: ARRAY
37640: PPUSH
37641: CALL_OW 428
37645: PUSH
37646: LD_INT 0
37648: GREATER
37649: OR
37650: IFTRUE 37688
37652: PUSH
37653: LD_VAR 0 12
37657: PUSH
37658: LD_VAR 0 7
37662: ARRAY
37663: PUSH
37664: LD_INT 1
37666: ARRAY
37667: PPUSH
37668: LD_VAR 0 12
37672: PUSH
37673: LD_VAR 0 7
37677: ARRAY
37678: PUSH
37679: LD_INT 2
37681: ARRAY
37682: PPUSH
37683: CALL_OW 351
37687: OR
37688: IFFALSE 37694
// exit ;
37690: POP
37691: POP
37692: GO 37998
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37694: LD_ADDR_VAR 0 8
37698: PUSH
37699: LD_VAR 0 12
37703: PUSH
37704: LD_VAR 0 7
37708: ARRAY
37709: PUSH
37710: LD_INT 1
37712: ARRAY
37713: PPUSH
37714: LD_VAR 0 12
37718: PUSH
37719: LD_VAR 0 7
37723: ARRAY
37724: PUSH
37725: LD_INT 2
37727: ARRAY
37728: PPUSH
37729: CALL_OW 546
37733: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
37734: LD_VAR 0 8
37738: PUSH
37739: LD_INT 1
37741: ARRAY
37742: IFTRUE 37764
37744: PUSH
37745: LD_VAR 0 8
37749: PUSH
37750: LD_INT 2
37752: ARRAY
37753: PUSH
37754: LD_VAR 0 13
37758: PUSH
37759: LD_INT 2
37761: PLUS
37762: GREATER
37763: OR
37764: IFTRUE 37786
37766: PUSH
37767: LD_VAR 0 8
37771: PUSH
37772: LD_INT 2
37774: ARRAY
37775: PUSH
37776: LD_VAR 0 13
37780: PUSH
37781: LD_INT 2
37783: MINUS
37784: LESS
37785: OR
37786: IFTRUE 37854
37788: PUSH
37789: LD_VAR 0 8
37793: PUSH
37794: LD_INT 3
37796: ARRAY
37797: PUSH
37798: LD_INT 0
37800: PUSH
37801: LD_INT 8
37803: PUSH
37804: LD_INT 9
37806: PUSH
37807: LD_INT 10
37809: PUSH
37810: LD_INT 11
37812: PUSH
37813: LD_INT 12
37815: PUSH
37816: LD_INT 13
37818: PUSH
37819: LD_INT 16
37821: PUSH
37822: LD_INT 17
37824: PUSH
37825: LD_INT 18
37827: PUSH
37828: LD_INT 19
37830: PUSH
37831: LD_INT 20
37833: PUSH
37834: LD_INT 21
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: IN
37852: NOT
37853: OR
37854: IFTRUE 37867
37856: PUSH
37857: LD_VAR 0 8
37861: PUSH
37862: LD_INT 5
37864: ARRAY
37865: NOT
37866: OR
37867: IFTRUE 37907
37869: PUSH
37870: LD_VAR 0 8
37874: PUSH
37875: LD_INT 6
37877: ARRAY
37878: PUSH
37879: LD_INT 1
37881: PUSH
37882: LD_INT 2
37884: PUSH
37885: LD_INT 7
37887: PUSH
37888: LD_INT 9
37890: PUSH
37891: LD_INT 10
37893: PUSH
37894: LD_INT 11
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: IN
37905: NOT
37906: OR
37907: IFFALSE 37913
// exit ;
37909: POP
37910: POP
37911: GO 37998
// end ;
37913: GO 37570
37915: POP
37916: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
37917: LD_VAR 0 9
37921: PPUSH
37922: LD_VAR 0 3
37926: PPUSH
37927: LD_VAR 0 4
37931: PPUSH
37932: LD_INT 20
37934: PPUSH
37935: CALL 29817 0 4
37939: PUSH
37940: LD_INT 4
37942: ARRAY
37943: IFFALSE 37947
// exit ;
37945: GO 37998
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
37947: LD_VAR 0 2
37951: PUSH
37952: LD_INT 29
37954: PUSH
37955: LD_INT 30
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: IN
37962: IFFALSE 37986
37964: PUSH
37965: LD_VAR 0 3
37969: PPUSH
37970: LD_VAR 0 4
37974: PPUSH
37975: LD_VAR 0 9
37979: PPUSH
37980: CALL_OW 440
37984: NOT
37985: AND
37986: IFFALSE 37990
// exit ;
37988: GO 37998
// result := true ;
37990: LD_ADDR_VAR 0 6
37994: PUSH
37995: LD_INT 1
37997: ST_TO_ADDR
// end ;
37998: LD_VAR 0 6
38002: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38003: LD_INT 0
38005: PPUSH
38006: PPUSH
38007: PPUSH
38008: PPUSH
38009: PPUSH
38010: PPUSH
38011: PPUSH
38012: PPUSH
38013: PPUSH
38014: PPUSH
38015: PPUSH
38016: PPUSH
38017: PPUSH
38018: PPUSH
38019: PPUSH
38020: PPUSH
38021: PPUSH
38022: PPUSH
38023: PPUSH
38024: PPUSH
38025: PPUSH
38026: PPUSH
38027: PPUSH
38028: PPUSH
38029: PPUSH
38030: PPUSH
38031: PPUSH
38032: PPUSH
38033: PPUSH
38034: PPUSH
38035: PPUSH
38036: PPUSH
38037: PPUSH
38038: PPUSH
38039: PPUSH
38040: PPUSH
38041: PPUSH
38042: PPUSH
38043: PPUSH
38044: PPUSH
38045: PPUSH
38046: PPUSH
38047: PPUSH
38048: PPUSH
38049: PPUSH
38050: PPUSH
38051: PPUSH
38052: PPUSH
38053: PPUSH
38054: PPUSH
38055: PPUSH
38056: PPUSH
38057: PPUSH
38058: PPUSH
38059: PPUSH
38060: PPUSH
38061: PPUSH
38062: PPUSH
// result = [ ] ;
38063: LD_ADDR_VAR 0 7
38067: PUSH
38068: EMPTY
38069: ST_TO_ADDR
// temp_list = [ ] ;
38070: LD_ADDR_VAR 0 9
38074: PUSH
38075: EMPTY
38076: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38077: LD_VAR 0 4
38081: PUSH
38082: LD_INT 0
38084: PUSH
38085: LD_INT 1
38087: PUSH
38088: LD_INT 2
38090: PUSH
38091: LD_INT 3
38093: PUSH
38094: LD_INT 4
38096: PUSH
38097: LD_INT 5
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: IN
38108: NOT
38109: IFTRUE 38152
38111: PUSH
38112: LD_VAR 0 1
38116: PUSH
38117: LD_INT 0
38119: PUSH
38120: LD_INT 1
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: IN
38127: IFFALSE 38151
38129: PUSH
38130: LD_VAR 0 5
38134: PUSH
38135: LD_INT 1
38137: PUSH
38138: LD_INT 2
38140: PUSH
38141: LD_INT 3
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: LIST
38148: IN
38149: NOT
38150: AND
38151: OR
38152: IFFALSE 38156
// exit ;
38154: GO 56555
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38156: LD_VAR 0 1
38160: PUSH
38161: LD_INT 6
38163: PUSH
38164: LD_INT 7
38166: PUSH
38167: LD_INT 8
38169: PUSH
38170: LD_INT 13
38172: PUSH
38173: LD_INT 12
38175: PUSH
38176: LD_INT 15
38178: PUSH
38179: LD_INT 11
38181: PUSH
38182: LD_INT 14
38184: PUSH
38185: LD_INT 10
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: IN
38199: IFFALSE 38209
// btype = b_lab ;
38201: LD_ADDR_VAR 0 1
38205: PUSH
38206: LD_INT 6
38208: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38209: LD_VAR 0 6
38213: PUSH
38214: LD_INT 0
38216: PUSH
38217: LD_INT 1
38219: PUSH
38220: LD_INT 2
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: LIST
38227: IN
38228: NOT
38229: IFTRUE 38297
38231: PUSH
38232: LD_VAR 0 1
38236: PUSH
38237: LD_INT 0
38239: PUSH
38240: LD_INT 1
38242: PUSH
38243: LD_INT 2
38245: PUSH
38246: LD_INT 3
38248: PUSH
38249: LD_INT 6
38251: PUSH
38252: LD_INT 36
38254: PUSH
38255: LD_INT 4
38257: PUSH
38258: LD_INT 5
38260: PUSH
38261: LD_INT 31
38263: PUSH
38264: LD_INT 32
38266: PUSH
38267: LD_INT 33
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: LIST
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: IN
38283: NOT
38284: IFFALSE 38296
38286: PUSH
38287: LD_VAR 0 6
38291: PUSH
38292: LD_INT 1
38294: EQUAL
38295: AND
38296: OR
38297: IFTRUE 38329
38299: PUSH
38300: LD_VAR 0 1
38304: PUSH
38305: LD_INT 2
38307: PUSH
38308: LD_INT 3
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: IN
38315: NOT
38316: IFFALSE 38328
38318: PUSH
38319: LD_VAR 0 6
38323: PUSH
38324: LD_INT 2
38326: EQUAL
38327: AND
38328: OR
38329: IFFALSE 38339
// mode = 0 ;
38331: LD_ADDR_VAR 0 6
38335: PUSH
38336: LD_INT 0
38338: ST_TO_ADDR
// case mode of 0 :
38339: LD_VAR 0 6
38343: PUSH
38344: LD_INT 0
38346: DOUBLE
38347: EQUAL
38348: IFTRUE 38352
38350: GO 49805
38352: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38353: LD_ADDR_VAR 0 11
38357: PUSH
38358: LD_INT 0
38360: PUSH
38361: LD_INT 0
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: LD_INT 0
38370: PUSH
38371: LD_INT 1
38373: NEG
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PUSH
38379: LD_INT 1
38381: PUSH
38382: LD_INT 0
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: LD_INT 1
38391: PUSH
38392: LD_INT 1
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: LD_INT 0
38401: PUSH
38402: LD_INT 1
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PUSH
38409: LD_INT 1
38411: NEG
38412: PUSH
38413: LD_INT 0
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: PUSH
38420: LD_INT 1
38422: NEG
38423: PUSH
38424: LD_INT 1
38426: NEG
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: LD_INT 1
38434: NEG
38435: PUSH
38436: LD_INT 2
38438: NEG
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PUSH
38444: LD_INT 0
38446: PUSH
38447: LD_INT 2
38449: NEG
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 1
38457: PUSH
38458: LD_INT 1
38460: NEG
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 1
38468: PUSH
38469: LD_INT 2
38471: PUSH
38472: EMPTY
38473: LIST
38474: LIST
38475: PUSH
38476: LD_INT 0
38478: PUSH
38479: LD_INT 2
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 1
38488: NEG
38489: PUSH
38490: LD_INT 1
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 1
38499: PUSH
38500: LD_INT 3
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 0
38509: PUSH
38510: LD_INT 3
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 1
38519: NEG
38520: PUSH
38521: LD_INT 2
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: LIST
38540: LIST
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38546: LD_ADDR_VAR 0 12
38550: PUSH
38551: LD_INT 0
38553: PUSH
38554: LD_INT 0
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: LD_INT 0
38563: PUSH
38564: LD_INT 1
38566: NEG
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 1
38574: PUSH
38575: LD_INT 0
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PUSH
38582: LD_INT 1
38584: PUSH
38585: LD_INT 1
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 0
38594: PUSH
38595: LD_INT 1
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PUSH
38602: LD_INT 1
38604: NEG
38605: PUSH
38606: LD_INT 0
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 1
38615: NEG
38616: PUSH
38617: LD_INT 1
38619: NEG
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 1
38627: PUSH
38628: LD_INT 1
38630: NEG
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: LD_INT 2
38638: PUSH
38639: LD_INT 0
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PUSH
38646: LD_INT 2
38648: PUSH
38649: LD_INT 1
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 1
38658: NEG
38659: PUSH
38660: LD_INT 1
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 2
38669: NEG
38670: PUSH
38671: LD_INT 0
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 2
38680: NEG
38681: PUSH
38682: LD_INT 1
38684: NEG
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 2
38692: NEG
38693: PUSH
38694: LD_INT 1
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 3
38703: NEG
38704: PUSH
38705: LD_INT 0
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 3
38714: NEG
38715: PUSH
38716: LD_INT 1
38718: NEG
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38742: LD_ADDR_VAR 0 13
38746: PUSH
38747: LD_INT 0
38749: PUSH
38750: LD_INT 0
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 0
38759: PUSH
38760: LD_INT 1
38762: NEG
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 1
38770: PUSH
38771: LD_INT 0
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: LD_INT 1
38780: PUSH
38781: LD_INT 1
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 0
38790: PUSH
38791: LD_INT 1
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: PUSH
38798: LD_INT 1
38800: NEG
38801: PUSH
38802: LD_INT 0
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 1
38811: NEG
38812: PUSH
38813: LD_INT 1
38815: NEG
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 1
38823: NEG
38824: PUSH
38825: LD_INT 2
38827: NEG
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 2
38835: PUSH
38836: LD_INT 1
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: LD_INT 2
38845: PUSH
38846: LD_INT 2
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PUSH
38853: LD_INT 1
38855: PUSH
38856: LD_INT 2
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 2
38865: NEG
38866: PUSH
38867: LD_INT 1
38869: NEG
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 2
38877: NEG
38878: PUSH
38879: LD_INT 2
38881: NEG
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 2
38889: NEG
38890: PUSH
38891: LD_INT 3
38893: NEG
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: LD_INT 3
38901: NEG
38902: PUSH
38903: LD_INT 2
38905: NEG
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PUSH
38911: LD_INT 3
38913: NEG
38914: PUSH
38915: LD_INT 3
38917: NEG
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38941: LD_ADDR_VAR 0 14
38945: PUSH
38946: LD_INT 0
38948: PUSH
38949: LD_INT 0
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 0
38958: PUSH
38959: LD_INT 1
38961: NEG
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 1
38969: PUSH
38970: LD_INT 0
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 1
38979: PUSH
38980: LD_INT 1
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 0
38989: PUSH
38990: LD_INT 1
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: LD_INT 1
38999: NEG
39000: PUSH
39001: LD_INT 0
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 1
39010: NEG
39011: PUSH
39012: LD_INT 1
39014: NEG
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 1
39022: NEG
39023: PUSH
39024: LD_INT 2
39026: NEG
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: LD_INT 0
39034: PUSH
39035: LD_INT 2
39037: NEG
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 1
39045: PUSH
39046: LD_INT 1
39048: NEG
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 1
39056: PUSH
39057: LD_INT 2
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 0
39066: PUSH
39067: LD_INT 2
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 1
39076: NEG
39077: PUSH
39078: LD_INT 1
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: PUSH
39085: LD_INT 1
39087: NEG
39088: PUSH
39089: LD_INT 3
39091: NEG
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 0
39099: PUSH
39100: LD_INT 3
39102: NEG
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 1
39110: PUSH
39111: LD_INT 2
39113: NEG
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39137: LD_ADDR_VAR 0 15
39141: PUSH
39142: LD_INT 0
39144: PUSH
39145: LD_INT 0
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 0
39154: PUSH
39155: LD_INT 1
39157: NEG
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 1
39165: PUSH
39166: LD_INT 0
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 1
39175: PUSH
39176: LD_INT 1
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 0
39185: PUSH
39186: LD_INT 1
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 1
39195: NEG
39196: PUSH
39197: LD_INT 0
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 1
39206: NEG
39207: PUSH
39208: LD_INT 1
39210: NEG
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 1
39218: PUSH
39219: LD_INT 1
39221: NEG
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: LD_INT 2
39229: PUSH
39230: LD_INT 0
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: LD_INT 2
39239: PUSH
39240: LD_INT 1
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 1
39249: NEG
39250: PUSH
39251: LD_INT 1
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 2
39260: NEG
39261: PUSH
39262: LD_INT 0
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 2
39271: NEG
39272: PUSH
39273: LD_INT 1
39275: NEG
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 2
39283: PUSH
39284: LD_INT 1
39286: NEG
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 3
39294: PUSH
39295: LD_INT 0
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 3
39304: PUSH
39305: LD_INT 1
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39330: LD_ADDR_VAR 0 16
39334: PUSH
39335: LD_INT 0
39337: PUSH
39338: LD_INT 0
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 0
39347: PUSH
39348: LD_INT 1
39350: NEG
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 1
39358: PUSH
39359: LD_INT 0
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 1
39368: PUSH
39369: LD_INT 1
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 0
39378: PUSH
39379: LD_INT 1
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 1
39388: NEG
39389: PUSH
39390: LD_INT 0
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 1
39399: NEG
39400: PUSH
39401: LD_INT 1
39403: NEG
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 1
39411: NEG
39412: PUSH
39413: LD_INT 2
39415: NEG
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 2
39423: PUSH
39424: LD_INT 1
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 2
39433: PUSH
39434: LD_INT 2
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 1
39443: PUSH
39444: LD_INT 2
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 2
39453: NEG
39454: PUSH
39455: LD_INT 1
39457: NEG
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 2
39465: NEG
39466: PUSH
39467: LD_INT 2
39469: NEG
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PUSH
39475: LD_INT 3
39477: PUSH
39478: LD_INT 2
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 3
39487: PUSH
39488: LD_INT 3
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 2
39497: PUSH
39498: LD_INT 3
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39523: LD_ADDR_VAR 0 17
39527: PUSH
39528: LD_INT 0
39530: PUSH
39531: LD_INT 0
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_INT 0
39540: PUSH
39541: LD_INT 1
39543: NEG
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 1
39551: PUSH
39552: LD_INT 0
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 1
39561: PUSH
39562: LD_INT 1
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 0
39571: PUSH
39572: LD_INT 1
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 1
39581: NEG
39582: PUSH
39583: LD_INT 0
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 1
39592: NEG
39593: PUSH
39594: LD_INT 1
39596: NEG
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: LD_INT 1
39604: NEG
39605: PUSH
39606: LD_INT 2
39608: NEG
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 0
39616: PUSH
39617: LD_INT 2
39619: NEG
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 1
39627: PUSH
39628: LD_INT 1
39630: NEG
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 2
39638: PUSH
39639: LD_INT 0
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 2
39648: PUSH
39649: LD_INT 1
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 2
39658: PUSH
39659: LD_INT 2
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 1
39668: PUSH
39669: LD_INT 2
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 0
39678: PUSH
39679: LD_INT 2
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 1
39688: NEG
39689: PUSH
39690: LD_INT 1
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 2
39699: NEG
39700: PUSH
39701: LD_INT 0
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 2
39710: NEG
39711: PUSH
39712: LD_INT 1
39714: NEG
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 2
39722: NEG
39723: PUSH
39724: LD_INT 2
39726: NEG
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39753: LD_ADDR_VAR 0 18
39757: PUSH
39758: LD_INT 0
39760: PUSH
39761: LD_INT 0
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 0
39770: PUSH
39771: LD_INT 1
39773: NEG
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 1
39781: PUSH
39782: LD_INT 0
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: LD_INT 1
39791: PUSH
39792: LD_INT 1
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 0
39801: PUSH
39802: LD_INT 1
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: LD_INT 1
39811: NEG
39812: PUSH
39813: LD_INT 0
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 1
39822: NEG
39823: PUSH
39824: LD_INT 1
39826: NEG
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 1
39834: NEG
39835: PUSH
39836: LD_INT 2
39838: NEG
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 0
39846: PUSH
39847: LD_INT 2
39849: NEG
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 1
39857: PUSH
39858: LD_INT 1
39860: NEG
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: LD_INT 2
39868: PUSH
39869: LD_INT 0
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 2
39878: PUSH
39879: LD_INT 1
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 2
39888: PUSH
39889: LD_INT 2
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: LD_INT 1
39898: PUSH
39899: LD_INT 2
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 0
39908: PUSH
39909: LD_INT 2
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 1
39918: NEG
39919: PUSH
39920: LD_INT 1
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 2
39929: NEG
39930: PUSH
39931: LD_INT 0
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 2
39940: NEG
39941: PUSH
39942: LD_INT 1
39944: NEG
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 2
39952: NEG
39953: PUSH
39954: LD_INT 2
39956: NEG
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39983: LD_ADDR_VAR 0 19
39987: PUSH
39988: LD_INT 0
39990: PUSH
39991: LD_INT 0
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 0
40000: PUSH
40001: LD_INT 1
40003: NEG
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 1
40011: PUSH
40012: LD_INT 0
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 1
40021: PUSH
40022: LD_INT 1
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 0
40031: PUSH
40032: LD_INT 1
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 1
40041: NEG
40042: PUSH
40043: LD_INT 0
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 1
40052: NEG
40053: PUSH
40054: LD_INT 1
40056: NEG
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 1
40064: NEG
40065: PUSH
40066: LD_INT 2
40068: NEG
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 0
40076: PUSH
40077: LD_INT 2
40079: NEG
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 1
40087: PUSH
40088: LD_INT 1
40090: NEG
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 2
40098: PUSH
40099: LD_INT 0
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 2
40108: PUSH
40109: LD_INT 1
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 2
40118: PUSH
40119: LD_INT 2
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 1
40128: PUSH
40129: LD_INT 2
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 0
40138: PUSH
40139: LD_INT 2
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 1
40148: NEG
40149: PUSH
40150: LD_INT 1
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 2
40159: NEG
40160: PUSH
40161: LD_INT 0
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 2
40170: NEG
40171: PUSH
40172: LD_INT 1
40174: NEG
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 2
40182: NEG
40183: PUSH
40184: LD_INT 2
40186: NEG
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40213: LD_ADDR_VAR 0 20
40217: PUSH
40218: LD_INT 0
40220: PUSH
40221: LD_INT 0
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 0
40230: PUSH
40231: LD_INT 1
40233: NEG
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 1
40241: PUSH
40242: LD_INT 0
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 1
40251: PUSH
40252: LD_INT 1
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 0
40261: PUSH
40262: LD_INT 1
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: PUSH
40269: LD_INT 1
40271: NEG
40272: PUSH
40273: LD_INT 0
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 1
40282: NEG
40283: PUSH
40284: LD_INT 1
40286: NEG
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 1
40294: NEG
40295: PUSH
40296: LD_INT 2
40298: NEG
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 0
40306: PUSH
40307: LD_INT 2
40309: NEG
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 1
40317: PUSH
40318: LD_INT 1
40320: NEG
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 2
40328: PUSH
40329: LD_INT 0
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 2
40338: PUSH
40339: LD_INT 1
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 2
40348: PUSH
40349: LD_INT 2
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 1
40358: PUSH
40359: LD_INT 2
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: LD_INT 0
40368: PUSH
40369: LD_INT 2
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 1
40378: NEG
40379: PUSH
40380: LD_INT 1
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 2
40389: NEG
40390: PUSH
40391: LD_INT 0
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: PUSH
40398: LD_INT 2
40400: NEG
40401: PUSH
40402: LD_INT 1
40404: NEG
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 2
40412: NEG
40413: PUSH
40414: LD_INT 2
40416: NEG
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40443: LD_ADDR_VAR 0 21
40447: PUSH
40448: LD_INT 0
40450: PUSH
40451: LD_INT 0
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 0
40460: PUSH
40461: LD_INT 1
40463: NEG
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 1
40471: PUSH
40472: LD_INT 0
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 1
40481: PUSH
40482: LD_INT 1
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 0
40491: PUSH
40492: LD_INT 1
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 1
40501: NEG
40502: PUSH
40503: LD_INT 0
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 1
40512: NEG
40513: PUSH
40514: LD_INT 1
40516: NEG
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 1
40524: NEG
40525: PUSH
40526: LD_INT 2
40528: NEG
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 0
40536: PUSH
40537: LD_INT 2
40539: NEG
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 1
40547: PUSH
40548: LD_INT 1
40550: NEG
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 2
40558: PUSH
40559: LD_INT 0
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 2
40568: PUSH
40569: LD_INT 1
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 2
40578: PUSH
40579: LD_INT 2
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 1
40588: PUSH
40589: LD_INT 2
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 0
40598: PUSH
40599: LD_INT 2
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 1
40608: NEG
40609: PUSH
40610: LD_INT 1
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 2
40619: NEG
40620: PUSH
40621: LD_INT 0
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 2
40630: NEG
40631: PUSH
40632: LD_INT 1
40634: NEG
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 2
40642: NEG
40643: PUSH
40644: LD_INT 2
40646: NEG
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40673: LD_ADDR_VAR 0 22
40677: PUSH
40678: LD_INT 0
40680: PUSH
40681: LD_INT 0
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 0
40690: PUSH
40691: LD_INT 1
40693: NEG
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 1
40701: PUSH
40702: LD_INT 0
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 1
40711: PUSH
40712: LD_INT 1
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 0
40721: PUSH
40722: LD_INT 1
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 1
40731: NEG
40732: PUSH
40733: LD_INT 0
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 1
40742: NEG
40743: PUSH
40744: LD_INT 1
40746: NEG
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 1
40754: NEG
40755: PUSH
40756: LD_INT 2
40758: NEG
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 0
40766: PUSH
40767: LD_INT 2
40769: NEG
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 1
40777: PUSH
40778: LD_INT 1
40780: NEG
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 2
40788: PUSH
40789: LD_INT 0
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 2
40798: PUSH
40799: LD_INT 1
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 2
40808: PUSH
40809: LD_INT 2
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 1
40818: PUSH
40819: LD_INT 2
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: LD_INT 0
40828: PUSH
40829: LD_INT 2
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 1
40838: NEG
40839: PUSH
40840: LD_INT 1
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 2
40849: NEG
40850: PUSH
40851: LD_INT 0
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 2
40860: NEG
40861: PUSH
40862: LD_INT 1
40864: NEG
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 2
40872: NEG
40873: PUSH
40874: LD_INT 2
40876: NEG
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40903: LD_ADDR_VAR 0 23
40907: PUSH
40908: LD_INT 0
40910: PUSH
40911: LD_INT 0
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: LD_INT 0
40920: PUSH
40921: LD_INT 1
40923: NEG
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 1
40931: PUSH
40932: LD_INT 0
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 1
40941: PUSH
40942: LD_INT 1
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 0
40951: PUSH
40952: LD_INT 1
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 1
40961: NEG
40962: PUSH
40963: LD_INT 0
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 1
40972: NEG
40973: PUSH
40974: LD_INT 1
40976: NEG
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 1
40984: NEG
40985: PUSH
40986: LD_INT 2
40988: NEG
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 0
40996: PUSH
40997: LD_INT 2
40999: NEG
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 1
41007: PUSH
41008: LD_INT 1
41010: NEG
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 2
41018: PUSH
41019: LD_INT 0
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 2
41028: PUSH
41029: LD_INT 1
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 2
41038: PUSH
41039: LD_INT 2
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 1
41048: PUSH
41049: LD_INT 2
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 0
41058: PUSH
41059: LD_INT 2
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 1
41068: NEG
41069: PUSH
41070: LD_INT 1
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 2
41079: NEG
41080: PUSH
41081: LD_INT 0
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 2
41090: NEG
41091: PUSH
41092: LD_INT 1
41094: NEG
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 2
41102: NEG
41103: PUSH
41104: LD_INT 2
41106: NEG
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 2
41114: NEG
41115: PUSH
41116: LD_INT 3
41118: NEG
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 1
41126: NEG
41127: PUSH
41128: LD_INT 3
41130: NEG
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 1
41138: PUSH
41139: LD_INT 2
41141: NEG
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 2
41149: PUSH
41150: LD_INT 1
41152: NEG
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41183: LD_ADDR_VAR 0 24
41187: PUSH
41188: LD_INT 0
41190: PUSH
41191: LD_INT 0
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 0
41200: PUSH
41201: LD_INT 1
41203: NEG
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 1
41211: PUSH
41212: LD_INT 0
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 1
41221: PUSH
41222: LD_INT 1
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 0
41231: PUSH
41232: LD_INT 1
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 1
41241: NEG
41242: PUSH
41243: LD_INT 0
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 1
41252: NEG
41253: PUSH
41254: LD_INT 1
41256: NEG
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 1
41264: NEG
41265: PUSH
41266: LD_INT 2
41268: NEG
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 0
41276: PUSH
41277: LD_INT 2
41279: NEG
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 1
41287: PUSH
41288: LD_INT 1
41290: NEG
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 2
41298: PUSH
41299: LD_INT 0
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 2
41308: PUSH
41309: LD_INT 1
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PUSH
41316: LD_INT 2
41318: PUSH
41319: LD_INT 2
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 1
41328: PUSH
41329: LD_INT 2
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PUSH
41336: LD_INT 0
41338: PUSH
41339: LD_INT 2
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 1
41348: NEG
41349: PUSH
41350: LD_INT 1
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 2
41359: NEG
41360: PUSH
41361: LD_INT 0
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 2
41370: NEG
41371: PUSH
41372: LD_INT 1
41374: NEG
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 2
41382: NEG
41383: PUSH
41384: LD_INT 2
41386: NEG
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 1
41394: PUSH
41395: LD_INT 2
41397: NEG
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 2
41405: PUSH
41406: LD_INT 1
41408: NEG
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 3
41416: PUSH
41417: LD_INT 1
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: PUSH
41424: LD_INT 3
41426: PUSH
41427: LD_INT 2
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41459: LD_ADDR_VAR 0 25
41463: PUSH
41464: LD_INT 0
41466: PUSH
41467: LD_INT 0
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 0
41476: PUSH
41477: LD_INT 1
41479: NEG
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: LD_INT 1
41487: PUSH
41488: LD_INT 0
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: LD_INT 1
41497: PUSH
41498: LD_INT 1
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 0
41507: PUSH
41508: LD_INT 1
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 1
41517: NEG
41518: PUSH
41519: LD_INT 0
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 1
41528: NEG
41529: PUSH
41530: LD_INT 1
41532: NEG
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 1
41540: NEG
41541: PUSH
41542: LD_INT 2
41544: NEG
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 0
41552: PUSH
41553: LD_INT 2
41555: NEG
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 1
41563: PUSH
41564: LD_INT 1
41566: NEG
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 2
41574: PUSH
41575: LD_INT 0
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 2
41584: PUSH
41585: LD_INT 1
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 2
41594: PUSH
41595: LD_INT 2
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 1
41604: PUSH
41605: LD_INT 2
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 0
41614: PUSH
41615: LD_INT 2
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 1
41624: NEG
41625: PUSH
41626: LD_INT 1
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 2
41635: NEG
41636: PUSH
41637: LD_INT 0
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 2
41646: NEG
41647: PUSH
41648: LD_INT 1
41650: NEG
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 2
41658: NEG
41659: PUSH
41660: LD_INT 2
41662: NEG
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 3
41670: PUSH
41671: LD_INT 1
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 3
41680: PUSH
41681: LD_INT 2
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 2
41690: PUSH
41691: LD_INT 3
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 1
41700: PUSH
41701: LD_INT 3
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41733: LD_ADDR_VAR 0 26
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: LD_INT 0
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 0
41750: PUSH
41751: LD_INT 1
41753: NEG
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 1
41761: PUSH
41762: LD_INT 0
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 1
41771: PUSH
41772: LD_INT 1
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 0
41781: PUSH
41782: LD_INT 1
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 1
41791: NEG
41792: PUSH
41793: LD_INT 0
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 1
41802: NEG
41803: PUSH
41804: LD_INT 1
41806: NEG
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 1
41814: NEG
41815: PUSH
41816: LD_INT 2
41818: NEG
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 0
41826: PUSH
41827: LD_INT 2
41829: NEG
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 1
41837: PUSH
41838: LD_INT 1
41840: NEG
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 2
41848: PUSH
41849: LD_INT 0
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 2
41858: PUSH
41859: LD_INT 1
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 2
41868: PUSH
41869: LD_INT 2
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 1
41878: PUSH
41879: LD_INT 2
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 0
41888: PUSH
41889: LD_INT 2
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: LD_INT 1
41898: NEG
41899: PUSH
41900: LD_INT 1
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 2
41909: NEG
41910: PUSH
41911: LD_INT 0
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 2
41920: NEG
41921: PUSH
41922: LD_INT 1
41924: NEG
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 2
41932: NEG
41933: PUSH
41934: LD_INT 2
41936: NEG
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 2
41944: PUSH
41945: LD_INT 3
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 1
41954: PUSH
41955: LD_INT 3
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 1
41964: NEG
41965: PUSH
41966: LD_INT 2
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 2
41975: NEG
41976: PUSH
41977: LD_INT 1
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42009: LD_ADDR_VAR 0 27
42013: PUSH
42014: LD_INT 0
42016: PUSH
42017: LD_INT 0
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 0
42026: PUSH
42027: LD_INT 1
42029: NEG
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 1
42037: PUSH
42038: LD_INT 0
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PUSH
42045: LD_INT 1
42047: PUSH
42048: LD_INT 1
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 0
42057: PUSH
42058: LD_INT 1
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 1
42067: NEG
42068: PUSH
42069: LD_INT 0
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 1
42078: NEG
42079: PUSH
42080: LD_INT 1
42082: NEG
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 1
42090: NEG
42091: PUSH
42092: LD_INT 2
42094: NEG
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 0
42102: PUSH
42103: LD_INT 2
42105: NEG
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 1
42113: PUSH
42114: LD_INT 1
42116: NEG
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 2
42124: PUSH
42125: LD_INT 0
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 2
42134: PUSH
42135: LD_INT 1
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 2
42144: PUSH
42145: LD_INT 2
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: PUSH
42152: LD_INT 1
42154: PUSH
42155: LD_INT 2
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: LD_INT 0
42164: PUSH
42165: LD_INT 2
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 1
42174: NEG
42175: PUSH
42176: LD_INT 1
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: LD_INT 2
42185: NEG
42186: PUSH
42187: LD_INT 0
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 2
42196: NEG
42197: PUSH
42198: LD_INT 1
42200: NEG
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 2
42208: NEG
42209: PUSH
42210: LD_INT 2
42212: NEG
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 1
42220: NEG
42221: PUSH
42222: LD_INT 2
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 2
42231: NEG
42232: PUSH
42233: LD_INT 1
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 3
42242: NEG
42243: PUSH
42244: LD_INT 1
42246: NEG
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 3
42254: NEG
42255: PUSH
42256: LD_INT 2
42258: NEG
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42289: LD_ADDR_VAR 0 28
42293: PUSH
42294: LD_INT 0
42296: PUSH
42297: LD_INT 0
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 0
42306: PUSH
42307: LD_INT 1
42309: NEG
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 1
42317: PUSH
42318: LD_INT 0
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 1
42327: PUSH
42328: LD_INT 1
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 0
42337: PUSH
42338: LD_INT 1
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 1
42347: NEG
42348: PUSH
42349: LD_INT 0
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 1
42358: NEG
42359: PUSH
42360: LD_INT 1
42362: NEG
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 1
42370: NEG
42371: PUSH
42372: LD_INT 2
42374: NEG
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 0
42382: PUSH
42383: LD_INT 2
42385: NEG
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 1
42393: PUSH
42394: LD_INT 1
42396: NEG
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 2
42404: PUSH
42405: LD_INT 0
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 2
42414: PUSH
42415: LD_INT 1
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 2
42424: PUSH
42425: LD_INT 2
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 1
42434: PUSH
42435: LD_INT 2
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 0
42444: PUSH
42445: LD_INT 2
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: LD_INT 1
42454: NEG
42455: PUSH
42456: LD_INT 1
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 2
42465: NEG
42466: PUSH
42467: LD_INT 0
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 2
42476: NEG
42477: PUSH
42478: LD_INT 1
42480: NEG
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: LD_INT 2
42488: NEG
42489: PUSH
42490: LD_INT 2
42492: NEG
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 2
42500: NEG
42501: PUSH
42502: LD_INT 3
42504: NEG
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 1
42512: NEG
42513: PUSH
42514: LD_INT 3
42516: NEG
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 3
42524: NEG
42525: PUSH
42526: LD_INT 1
42528: NEG
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 3
42536: NEG
42537: PUSH
42538: LD_INT 2
42540: NEG
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42571: LD_ADDR_VAR 0 29
42575: PUSH
42576: LD_INT 0
42578: PUSH
42579: LD_INT 0
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 0
42588: PUSH
42589: LD_INT 1
42591: NEG
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 1
42599: PUSH
42600: LD_INT 0
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 1
42609: PUSH
42610: LD_INT 1
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 0
42619: PUSH
42620: LD_INT 1
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 1
42629: NEG
42630: PUSH
42631: LD_INT 0
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 1
42640: NEG
42641: PUSH
42642: LD_INT 1
42644: NEG
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 1
42652: NEG
42653: PUSH
42654: LD_INT 2
42656: NEG
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 0
42664: PUSH
42665: LD_INT 2
42667: NEG
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 1
42675: PUSH
42676: LD_INT 1
42678: NEG
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 2
42686: PUSH
42687: LD_INT 0
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 2
42696: PUSH
42697: LD_INT 1
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 1
42706: PUSH
42707: LD_INT 2
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 0
42716: PUSH
42717: LD_INT 2
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 1
42726: NEG
42727: PUSH
42728: LD_INT 1
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 2
42737: NEG
42738: PUSH
42739: LD_INT 1
42741: NEG
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 2
42749: NEG
42750: PUSH
42751: LD_INT 2
42753: NEG
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 2
42761: NEG
42762: PUSH
42763: LD_INT 3
42765: NEG
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 2
42773: PUSH
42774: LD_INT 1
42776: NEG
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 3
42784: PUSH
42785: LD_INT 1
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 1
42794: PUSH
42795: LD_INT 3
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 1
42804: NEG
42805: PUSH
42806: LD_INT 2
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 3
42815: NEG
42816: PUSH
42817: LD_INT 2
42819: NEG
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42850: LD_ADDR_VAR 0 30
42854: PUSH
42855: LD_INT 0
42857: PUSH
42858: LD_INT 0
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 0
42867: PUSH
42868: LD_INT 1
42870: NEG
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 1
42878: PUSH
42879: LD_INT 0
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 1
42888: PUSH
42889: LD_INT 1
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 0
42898: PUSH
42899: LD_INT 1
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 1
42908: NEG
42909: PUSH
42910: LD_INT 0
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 1
42919: NEG
42920: PUSH
42921: LD_INT 1
42923: NEG
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 1
42931: NEG
42932: PUSH
42933: LD_INT 2
42935: NEG
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 0
42943: PUSH
42944: LD_INT 2
42946: NEG
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 1
42954: PUSH
42955: LD_INT 1
42957: NEG
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 2
42965: PUSH
42966: LD_INT 0
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: LD_INT 2
42975: PUSH
42976: LD_INT 1
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 2
42985: PUSH
42986: LD_INT 2
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 1
42995: PUSH
42996: LD_INT 2
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 1
43005: NEG
43006: PUSH
43007: LD_INT 1
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 2
43016: NEG
43017: PUSH
43018: LD_INT 0
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 2
43027: NEG
43028: PUSH
43029: LD_INT 1
43031: NEG
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 1
43039: NEG
43040: PUSH
43041: LD_INT 3
43043: NEG
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 1
43051: PUSH
43052: LD_INT 2
43054: NEG
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 3
43062: PUSH
43063: LD_INT 2
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 2
43072: PUSH
43073: LD_INT 3
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 2
43082: NEG
43083: PUSH
43084: LD_INT 1
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 3
43093: NEG
43094: PUSH
43095: LD_INT 1
43097: NEG
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43128: LD_ADDR_VAR 0 31
43132: PUSH
43133: LD_INT 0
43135: PUSH
43136: LD_INT 0
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 0
43145: PUSH
43146: LD_INT 1
43148: NEG
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 1
43156: PUSH
43157: LD_INT 0
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 1
43166: PUSH
43167: LD_INT 1
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 0
43176: PUSH
43177: LD_INT 1
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 1
43186: NEG
43187: PUSH
43188: LD_INT 0
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 1
43197: NEG
43198: PUSH
43199: LD_INT 1
43201: NEG
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 1
43209: NEG
43210: PUSH
43211: LD_INT 2
43213: NEG
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 1
43221: PUSH
43222: LD_INT 1
43224: NEG
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 2
43232: PUSH
43233: LD_INT 0
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 2
43242: PUSH
43243: LD_INT 1
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 2
43252: PUSH
43253: LD_INT 2
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 1
43262: PUSH
43263: LD_INT 2
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 0
43272: PUSH
43273: LD_INT 2
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 1
43282: NEG
43283: PUSH
43284: LD_INT 1
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 2
43293: NEG
43294: PUSH
43295: LD_INT 1
43297: NEG
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 2
43305: NEG
43306: PUSH
43307: LD_INT 2
43309: NEG
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 2
43317: NEG
43318: PUSH
43319: LD_INT 3
43321: NEG
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 2
43329: PUSH
43330: LD_INT 1
43332: NEG
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 3
43340: PUSH
43341: LD_INT 1
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 1
43350: PUSH
43351: LD_INT 3
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 1
43360: NEG
43361: PUSH
43362: LD_INT 2
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 3
43371: NEG
43372: PUSH
43373: LD_INT 2
43375: NEG
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43406: LD_ADDR_VAR 0 32
43410: PUSH
43411: LD_INT 0
43413: PUSH
43414: LD_INT 0
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 0
43423: PUSH
43424: LD_INT 1
43426: NEG
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 1
43434: PUSH
43435: LD_INT 0
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 1
43444: PUSH
43445: LD_INT 1
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 0
43454: PUSH
43455: LD_INT 1
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 1
43464: NEG
43465: PUSH
43466: LD_INT 0
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 1
43475: NEG
43476: PUSH
43477: LD_INT 1
43479: NEG
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 1
43487: NEG
43488: PUSH
43489: LD_INT 2
43491: NEG
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: LD_INT 0
43499: PUSH
43500: LD_INT 2
43502: NEG
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 1
43510: PUSH
43511: LD_INT 1
43513: NEG
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 2
43521: PUSH
43522: LD_INT 1
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 2
43531: PUSH
43532: LD_INT 2
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 1
43541: PUSH
43542: LD_INT 2
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: LD_INT 0
43551: PUSH
43552: LD_INT 2
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 1
43561: NEG
43562: PUSH
43563: LD_INT 1
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 2
43572: NEG
43573: PUSH
43574: LD_INT 0
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 2
43583: NEG
43584: PUSH
43585: LD_INT 1
43587: NEG
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 1
43595: NEG
43596: PUSH
43597: LD_INT 3
43599: NEG
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 1
43607: PUSH
43608: LD_INT 2
43610: NEG
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 3
43618: PUSH
43619: LD_INT 2
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 2
43628: PUSH
43629: LD_INT 3
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 2
43638: NEG
43639: PUSH
43640: LD_INT 1
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 3
43649: NEG
43650: PUSH
43651: LD_INT 1
43653: NEG
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43684: LD_ADDR_VAR 0 33
43688: PUSH
43689: LD_INT 0
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 0
43701: PUSH
43702: LD_INT 1
43704: NEG
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 1
43712: PUSH
43713: LD_INT 0
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 1
43722: PUSH
43723: LD_INT 1
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 0
43732: PUSH
43733: LD_INT 1
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 1
43742: NEG
43743: PUSH
43744: LD_INT 0
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 1
43753: NEG
43754: PUSH
43755: LD_INT 1
43757: NEG
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 1
43765: NEG
43766: PUSH
43767: LD_INT 2
43769: NEG
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 1
43777: PUSH
43778: LD_INT 1
43780: NEG
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 2
43788: PUSH
43789: LD_INT 0
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: LD_INT 2
43798: PUSH
43799: LD_INT 1
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 1
43808: PUSH
43809: LD_INT 2
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 0
43818: PUSH
43819: LD_INT 2
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 1
43828: NEG
43829: PUSH
43830: LD_INT 1
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 2
43839: NEG
43840: PUSH
43841: LD_INT 0
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 2
43850: NEG
43851: PUSH
43852: LD_INT 1
43854: NEG
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 2
43862: NEG
43863: PUSH
43864: LD_INT 2
43866: NEG
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 2
43874: NEG
43875: PUSH
43876: LD_INT 3
43878: NEG
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 2
43886: PUSH
43887: LD_INT 1
43889: NEG
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 3
43897: PUSH
43898: LD_INT 1
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 1
43907: PUSH
43908: LD_INT 3
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 1
43917: NEG
43918: PUSH
43919: LD_INT 2
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 3
43928: NEG
43929: PUSH
43930: LD_INT 2
43932: NEG
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43963: LD_ADDR_VAR 0 34
43967: PUSH
43968: LD_INT 0
43970: PUSH
43971: LD_INT 0
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 0
43980: PUSH
43981: LD_INT 1
43983: NEG
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 1
43991: PUSH
43992: LD_INT 0
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 1
44001: PUSH
44002: LD_INT 1
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 0
44011: PUSH
44012: LD_INT 1
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 1
44021: NEG
44022: PUSH
44023: LD_INT 0
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 1
44032: NEG
44033: PUSH
44034: LD_INT 1
44036: NEG
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 1
44044: NEG
44045: PUSH
44046: LD_INT 2
44048: NEG
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 0
44056: PUSH
44057: LD_INT 2
44059: NEG
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 1
44067: PUSH
44068: LD_INT 1
44070: NEG
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 2
44078: PUSH
44079: LD_INT 1
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 2
44088: PUSH
44089: LD_INT 2
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 1
44098: PUSH
44099: LD_INT 2
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 1
44108: NEG
44109: PUSH
44110: LD_INT 1
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 2
44119: NEG
44120: PUSH
44121: LD_INT 0
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 2
44130: NEG
44131: PUSH
44132: LD_INT 1
44134: NEG
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 2
44142: NEG
44143: PUSH
44144: LD_INT 2
44146: NEG
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 1
44154: NEG
44155: PUSH
44156: LD_INT 3
44158: NEG
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 1
44166: PUSH
44167: LD_INT 2
44169: NEG
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 3
44177: PUSH
44178: LD_INT 2
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 2
44187: PUSH
44188: LD_INT 3
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 2
44197: NEG
44198: PUSH
44199: LD_INT 1
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 3
44208: NEG
44209: PUSH
44210: LD_INT 1
44212: NEG
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44243: LD_ADDR_VAR 0 35
44247: PUSH
44248: LD_INT 0
44250: PUSH
44251: LD_INT 0
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 0
44260: PUSH
44261: LD_INT 1
44263: NEG
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 1
44271: PUSH
44272: LD_INT 0
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 1
44281: PUSH
44282: LD_INT 1
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: PUSH
44289: LD_INT 0
44291: PUSH
44292: LD_INT 1
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 1
44301: NEG
44302: PUSH
44303: LD_INT 0
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 1
44312: NEG
44313: PUSH
44314: LD_INT 1
44316: NEG
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 2
44324: PUSH
44325: LD_INT 1
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 2
44334: NEG
44335: PUSH
44336: LD_INT 1
44338: NEG
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44355: LD_ADDR_VAR 0 36
44359: PUSH
44360: LD_INT 0
44362: PUSH
44363: LD_INT 0
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 0
44372: PUSH
44373: LD_INT 1
44375: NEG
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 1
44383: PUSH
44384: LD_INT 0
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 1
44393: PUSH
44394: LD_INT 1
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 0
44403: PUSH
44404: LD_INT 1
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 1
44413: NEG
44414: PUSH
44415: LD_INT 0
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 1
44424: NEG
44425: PUSH
44426: LD_INT 1
44428: NEG
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 1
44436: NEG
44437: PUSH
44438: LD_INT 2
44440: NEG
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 1
44448: PUSH
44449: LD_INT 2
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44467: LD_ADDR_VAR 0 37
44471: PUSH
44472: LD_INT 0
44474: PUSH
44475: LD_INT 0
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 0
44484: PUSH
44485: LD_INT 1
44487: NEG
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 1
44495: PUSH
44496: LD_INT 0
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 1
44505: PUSH
44506: LD_INT 1
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 0
44515: PUSH
44516: LD_INT 1
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 1
44525: NEG
44526: PUSH
44527: LD_INT 0
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 1
44536: NEG
44537: PUSH
44538: LD_INT 1
44540: NEG
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 1
44548: PUSH
44549: LD_INT 1
44551: NEG
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 1
44559: NEG
44560: PUSH
44561: LD_INT 1
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44579: LD_ADDR_VAR 0 38
44583: PUSH
44584: LD_INT 0
44586: PUSH
44587: LD_INT 0
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 0
44596: PUSH
44597: LD_INT 1
44599: NEG
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 1
44607: PUSH
44608: LD_INT 0
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 1
44617: PUSH
44618: LD_INT 1
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 0
44627: PUSH
44628: LD_INT 1
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 1
44637: NEG
44638: PUSH
44639: LD_INT 0
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 1
44648: NEG
44649: PUSH
44650: LD_INT 1
44652: NEG
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 2
44660: PUSH
44661: LD_INT 1
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 2
44670: NEG
44671: PUSH
44672: LD_INT 1
44674: NEG
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44691: LD_ADDR_VAR 0 39
44695: PUSH
44696: LD_INT 0
44698: PUSH
44699: LD_INT 0
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 0
44708: PUSH
44709: LD_INT 1
44711: NEG
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 1
44719: PUSH
44720: LD_INT 0
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 1
44729: PUSH
44730: LD_INT 1
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 0
44739: PUSH
44740: LD_INT 1
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 1
44749: NEG
44750: PUSH
44751: LD_INT 0
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 1
44760: NEG
44761: PUSH
44762: LD_INT 1
44764: NEG
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 1
44772: NEG
44773: PUSH
44774: LD_INT 2
44776: NEG
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 1
44784: PUSH
44785: LD_INT 2
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44803: LD_ADDR_VAR 0 40
44807: PUSH
44808: LD_INT 0
44810: PUSH
44811: LD_INT 0
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 0
44820: PUSH
44821: LD_INT 1
44823: NEG
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 1
44831: PUSH
44832: LD_INT 0
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 1
44841: PUSH
44842: LD_INT 1
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 0
44851: PUSH
44852: LD_INT 1
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 1
44861: NEG
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 1
44872: NEG
44873: PUSH
44874: LD_INT 1
44876: NEG
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 1
44884: PUSH
44885: LD_INT 1
44887: NEG
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 1
44895: NEG
44896: PUSH
44897: LD_INT 1
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44915: LD_ADDR_VAR 0 41
44919: PUSH
44920: LD_INT 0
44922: PUSH
44923: LD_INT 0
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 0
44932: PUSH
44933: LD_INT 1
44935: NEG
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 1
44943: PUSH
44944: LD_INT 0
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 1
44953: PUSH
44954: LD_INT 1
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 0
44963: PUSH
44964: LD_INT 1
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 1
44973: NEG
44974: PUSH
44975: LD_INT 0
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 1
44984: NEG
44985: PUSH
44986: LD_INT 1
44988: NEG
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 1
44996: NEG
44997: PUSH
44998: LD_INT 2
45000: NEG
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 1
45008: PUSH
45009: LD_INT 1
45011: NEG
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 2
45019: PUSH
45020: LD_INT 0
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 2
45029: PUSH
45030: LD_INT 1
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 2
45039: PUSH
45040: LD_INT 2
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 1
45049: PUSH
45050: LD_INT 2
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 1
45059: NEG
45060: PUSH
45061: LD_INT 1
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 2
45070: NEG
45071: PUSH
45072: LD_INT 0
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 2
45081: NEG
45082: PUSH
45083: LD_INT 1
45085: NEG
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 2
45093: NEG
45094: PUSH
45095: LD_INT 2
45097: NEG
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 2
45105: NEG
45106: PUSH
45107: LD_INT 3
45109: NEG
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 2
45117: PUSH
45118: LD_INT 1
45120: NEG
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 3
45128: PUSH
45129: LD_INT 0
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 3
45138: PUSH
45139: LD_INT 1
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 3
45148: PUSH
45149: LD_INT 2
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 3
45158: PUSH
45159: LD_INT 3
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 2
45168: PUSH
45169: LD_INT 3
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 2
45178: NEG
45179: PUSH
45180: LD_INT 1
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 3
45189: NEG
45190: PUSH
45191: LD_INT 0
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 3
45200: NEG
45201: PUSH
45202: LD_INT 1
45204: NEG
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 3
45212: NEG
45213: PUSH
45214: LD_INT 2
45216: NEG
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 3
45224: NEG
45225: PUSH
45226: LD_INT 3
45228: NEG
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45265: LD_ADDR_VAR 0 42
45269: PUSH
45270: LD_INT 0
45272: PUSH
45273: LD_INT 0
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 0
45282: PUSH
45283: LD_INT 1
45285: NEG
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 1
45293: PUSH
45294: LD_INT 0
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 1
45303: PUSH
45304: LD_INT 1
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 0
45313: PUSH
45314: LD_INT 1
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 1
45323: NEG
45324: PUSH
45325: LD_INT 0
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 1
45334: NEG
45335: PUSH
45336: LD_INT 1
45338: NEG
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 1
45346: NEG
45347: PUSH
45348: LD_INT 2
45350: NEG
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 0
45358: PUSH
45359: LD_INT 2
45361: NEG
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 1
45369: PUSH
45370: LD_INT 1
45372: NEG
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 2
45380: PUSH
45381: LD_INT 1
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 2
45390: PUSH
45391: LD_INT 2
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 1
45400: PUSH
45401: LD_INT 2
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 0
45410: PUSH
45411: LD_INT 2
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 1
45420: NEG
45421: PUSH
45422: LD_INT 1
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 2
45431: NEG
45432: PUSH
45433: LD_INT 1
45435: NEG
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 2
45443: NEG
45444: PUSH
45445: LD_INT 2
45447: NEG
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 2
45455: NEG
45456: PUSH
45457: LD_INT 3
45459: NEG
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 1
45467: NEG
45468: PUSH
45469: LD_INT 3
45471: NEG
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 0
45479: PUSH
45480: LD_INT 3
45482: NEG
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 1
45490: PUSH
45491: LD_INT 2
45493: NEG
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 3
45501: PUSH
45502: LD_INT 2
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 3
45511: PUSH
45512: LD_INT 3
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 2
45521: PUSH
45522: LD_INT 3
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 1
45531: PUSH
45532: LD_INT 3
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: LD_INT 3
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: NEG
45552: PUSH
45553: LD_INT 2
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 3
45562: NEG
45563: PUSH
45564: LD_INT 2
45566: NEG
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 3
45574: NEG
45575: PUSH
45576: LD_INT 3
45578: NEG
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45615: LD_ADDR_VAR 0 43
45619: PUSH
45620: LD_INT 0
45622: PUSH
45623: LD_INT 0
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 0
45632: PUSH
45633: LD_INT 1
45635: NEG
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 1
45643: PUSH
45644: LD_INT 0
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 1
45653: PUSH
45654: LD_INT 1
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 0
45663: PUSH
45664: LD_INT 1
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 1
45673: NEG
45674: PUSH
45675: LD_INT 0
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 1
45684: NEG
45685: PUSH
45686: LD_INT 1
45688: NEG
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 1
45696: NEG
45697: PUSH
45698: LD_INT 2
45700: NEG
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 0
45708: PUSH
45709: LD_INT 2
45711: NEG
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 1
45719: PUSH
45720: LD_INT 1
45722: NEG
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 2
45730: PUSH
45731: LD_INT 0
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 2
45740: PUSH
45741: LD_INT 1
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 1
45750: PUSH
45751: LD_INT 2
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 0
45760: PUSH
45761: LD_INT 2
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 1
45770: NEG
45771: PUSH
45772: LD_INT 1
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 2
45781: NEG
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 2
45792: NEG
45793: PUSH
45794: LD_INT 1
45796: NEG
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 1
45804: NEG
45805: PUSH
45806: LD_INT 3
45808: NEG
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: LD_INT 3
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 1
45827: PUSH
45828: LD_INT 2
45830: NEG
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 2
45838: PUSH
45839: LD_INT 1
45841: NEG
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 3
45849: PUSH
45850: LD_INT 0
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 3
45859: PUSH
45860: LD_INT 1
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 1
45869: PUSH
45870: LD_INT 3
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 0
45879: PUSH
45880: LD_INT 3
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 1
45889: NEG
45890: PUSH
45891: LD_INT 2
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 2
45900: NEG
45901: PUSH
45902: LD_INT 1
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 3
45911: NEG
45912: PUSH
45913: LD_INT 0
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 3
45922: NEG
45923: PUSH
45924: LD_INT 1
45926: NEG
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45963: LD_ADDR_VAR 0 44
45967: PUSH
45968: LD_INT 0
45970: PUSH
45971: LD_INT 0
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 0
45980: PUSH
45981: LD_INT 1
45983: NEG
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 1
45991: PUSH
45992: LD_INT 0
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 1
46001: PUSH
46002: LD_INT 1
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 0
46011: PUSH
46012: LD_INT 1
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 1
46021: NEG
46022: PUSH
46023: LD_INT 0
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 1
46032: NEG
46033: PUSH
46034: LD_INT 1
46036: NEG
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 1
46044: NEG
46045: PUSH
46046: LD_INT 2
46048: NEG
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 1
46056: PUSH
46057: LD_INT 1
46059: NEG
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 2
46067: PUSH
46068: LD_INT 0
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 2
46077: PUSH
46078: LD_INT 1
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 2
46087: PUSH
46088: LD_INT 2
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 1
46097: PUSH
46098: LD_INT 2
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 1
46107: NEG
46108: PUSH
46109: LD_INT 1
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 2
46118: NEG
46119: PUSH
46120: LD_INT 0
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 2
46129: NEG
46130: PUSH
46131: LD_INT 1
46133: NEG
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 2
46141: NEG
46142: PUSH
46143: LD_INT 2
46145: NEG
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 2
46153: NEG
46154: PUSH
46155: LD_INT 3
46157: NEG
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 2
46165: PUSH
46166: LD_INT 1
46168: NEG
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 3
46176: PUSH
46177: LD_INT 0
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 3
46186: PUSH
46187: LD_INT 1
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 3
46196: PUSH
46197: LD_INT 2
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 3
46206: PUSH
46207: LD_INT 3
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 2
46216: PUSH
46217: LD_INT 3
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 2
46226: NEG
46227: PUSH
46228: LD_INT 1
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 3
46237: NEG
46238: PUSH
46239: LD_INT 0
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 3
46248: NEG
46249: PUSH
46250: LD_INT 1
46252: NEG
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 3
46260: NEG
46261: PUSH
46262: LD_INT 2
46264: NEG
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 3
46272: NEG
46273: PUSH
46274: LD_INT 3
46276: NEG
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46313: LD_ADDR_VAR 0 45
46317: PUSH
46318: LD_INT 0
46320: PUSH
46321: LD_INT 0
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 0
46330: PUSH
46331: LD_INT 1
46333: NEG
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 1
46341: PUSH
46342: LD_INT 0
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 1
46351: PUSH
46352: LD_INT 1
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 0
46361: PUSH
46362: LD_INT 1
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 1
46371: NEG
46372: PUSH
46373: LD_INT 0
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 1
46382: NEG
46383: PUSH
46384: LD_INT 1
46386: NEG
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 1
46394: NEG
46395: PUSH
46396: LD_INT 2
46398: NEG
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 0
46406: PUSH
46407: LD_INT 2
46409: NEG
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 1
46417: PUSH
46418: LD_INT 1
46420: NEG
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 2
46428: PUSH
46429: LD_INT 1
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 2
46438: PUSH
46439: LD_INT 2
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 1
46448: PUSH
46449: LD_INT 2
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 0
46458: PUSH
46459: LD_INT 2
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 1
46468: NEG
46469: PUSH
46470: LD_INT 1
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 2
46479: NEG
46480: PUSH
46481: LD_INT 1
46483: NEG
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 2
46491: NEG
46492: PUSH
46493: LD_INT 2
46495: NEG
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 2
46503: NEG
46504: PUSH
46505: LD_INT 3
46507: NEG
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 1
46515: NEG
46516: PUSH
46517: LD_INT 3
46519: NEG
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 0
46527: PUSH
46528: LD_INT 3
46530: NEG
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 1
46538: PUSH
46539: LD_INT 2
46541: NEG
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 3
46549: PUSH
46550: LD_INT 2
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 3
46559: PUSH
46560: LD_INT 3
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 2
46569: PUSH
46570: LD_INT 3
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 1
46579: PUSH
46580: LD_INT 3
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 0
46589: PUSH
46590: LD_INT 3
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 1
46599: NEG
46600: PUSH
46601: LD_INT 2
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 3
46610: NEG
46611: PUSH
46612: LD_INT 2
46614: NEG
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 3
46622: NEG
46623: PUSH
46624: LD_INT 3
46626: NEG
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46663: LD_ADDR_VAR 0 46
46667: PUSH
46668: LD_INT 0
46670: PUSH
46671: LD_INT 0
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 0
46680: PUSH
46681: LD_INT 1
46683: NEG
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 1
46691: PUSH
46692: LD_INT 0
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 1
46701: PUSH
46702: LD_INT 1
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 0
46711: PUSH
46712: LD_INT 1
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 1
46721: NEG
46722: PUSH
46723: LD_INT 0
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 1
46732: NEG
46733: PUSH
46734: LD_INT 1
46736: NEG
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 1
46744: NEG
46745: PUSH
46746: LD_INT 2
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 0
46756: PUSH
46757: LD_INT 2
46759: NEG
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 1
46767: PUSH
46768: LD_INT 1
46770: NEG
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 2
46778: PUSH
46779: LD_INT 0
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 2
46788: PUSH
46789: LD_INT 1
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 1
46798: PUSH
46799: LD_INT 2
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 0
46808: PUSH
46809: LD_INT 2
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 1
46818: NEG
46819: PUSH
46820: LD_INT 1
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 2
46829: NEG
46830: PUSH
46831: LD_INT 0
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 2
46840: NEG
46841: PUSH
46842: LD_INT 1
46844: NEG
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 1
46852: NEG
46853: PUSH
46854: LD_INT 3
46856: NEG
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 0
46864: PUSH
46865: LD_INT 3
46867: NEG
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 1
46875: PUSH
46876: LD_INT 2
46878: NEG
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 2
46886: PUSH
46887: LD_INT 1
46889: NEG
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 3
46897: PUSH
46898: LD_INT 0
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 3
46907: PUSH
46908: LD_INT 1
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 1
46917: PUSH
46918: LD_INT 3
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 0
46927: PUSH
46928: LD_INT 3
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 1
46937: NEG
46938: PUSH
46939: LD_INT 2
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 2
46948: NEG
46949: PUSH
46950: LD_INT 1
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 3
46959: NEG
46960: PUSH
46961: LD_INT 0
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 3
46970: NEG
46971: PUSH
46972: LD_INT 1
46974: NEG
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47011: LD_ADDR_VAR 0 47
47015: PUSH
47016: LD_INT 0
47018: PUSH
47019: LD_INT 0
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 0
47028: PUSH
47029: LD_INT 1
47031: NEG
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 1
47039: PUSH
47040: LD_INT 0
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 1
47049: PUSH
47050: LD_INT 1
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 0
47059: PUSH
47060: LD_INT 1
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 1
47069: NEG
47070: PUSH
47071: LD_INT 0
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 1
47080: NEG
47081: PUSH
47082: LD_INT 1
47084: NEG
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 1
47092: NEG
47093: PUSH
47094: LD_INT 2
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 0
47104: PUSH
47105: LD_INT 2
47107: NEG
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 1
47115: PUSH
47116: LD_INT 1
47118: NEG
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 2
47126: NEG
47127: PUSH
47128: LD_INT 1
47130: NEG
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 2
47138: NEG
47139: PUSH
47140: LD_INT 2
47142: NEG
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47162: LD_ADDR_VAR 0 48
47166: PUSH
47167: LD_INT 0
47169: PUSH
47170: LD_INT 0
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 0
47179: PUSH
47180: LD_INT 1
47182: NEG
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 1
47190: PUSH
47191: LD_INT 0
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 1
47200: PUSH
47201: LD_INT 1
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 0
47210: PUSH
47211: LD_INT 1
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 1
47220: NEG
47221: PUSH
47222: LD_INT 0
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 1
47231: NEG
47232: PUSH
47233: LD_INT 1
47235: NEG
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 1
47243: NEG
47244: PUSH
47245: LD_INT 2
47247: NEG
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 0
47255: PUSH
47256: LD_INT 2
47258: NEG
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 1
47266: PUSH
47267: LD_INT 1
47269: NEG
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 2
47277: PUSH
47278: LD_INT 0
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 2
47287: PUSH
47288: LD_INT 1
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47309: LD_ADDR_VAR 0 49
47313: PUSH
47314: LD_INT 0
47316: PUSH
47317: LD_INT 0
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 0
47326: PUSH
47327: LD_INT 1
47329: NEG
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 1
47337: PUSH
47338: LD_INT 0
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 1
47347: PUSH
47348: LD_INT 1
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 0
47357: PUSH
47358: LD_INT 1
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 1
47367: NEG
47368: PUSH
47369: LD_INT 0
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 1
47378: NEG
47379: PUSH
47380: LD_INT 1
47382: NEG
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 1
47390: PUSH
47391: LD_INT 1
47393: NEG
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 2
47401: PUSH
47402: LD_INT 0
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 2
47411: PUSH
47412: LD_INT 1
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 2
47421: PUSH
47422: LD_INT 2
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 1
47431: PUSH
47432: LD_INT 2
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47453: LD_ADDR_VAR 0 50
47457: PUSH
47458: LD_INT 0
47460: PUSH
47461: LD_INT 0
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 0
47470: PUSH
47471: LD_INT 1
47473: NEG
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 1
47481: PUSH
47482: LD_INT 0
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 1
47491: PUSH
47492: LD_INT 1
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 0
47501: PUSH
47502: LD_INT 1
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 1
47511: NEG
47512: PUSH
47513: LD_INT 0
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 1
47522: NEG
47523: PUSH
47524: LD_INT 1
47526: NEG
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 2
47534: PUSH
47535: LD_INT 1
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 2
47544: PUSH
47545: LD_INT 2
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 1
47554: PUSH
47555: LD_INT 2
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 0
47564: PUSH
47565: LD_INT 2
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 1
47574: NEG
47575: PUSH
47576: LD_INT 1
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47597: LD_ADDR_VAR 0 51
47601: PUSH
47602: LD_INT 0
47604: PUSH
47605: LD_INT 0
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 0
47614: PUSH
47615: LD_INT 1
47617: NEG
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 1
47625: PUSH
47626: LD_INT 0
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 1
47635: PUSH
47636: LD_INT 1
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 0
47645: PUSH
47646: LD_INT 1
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 1
47655: NEG
47656: PUSH
47657: LD_INT 0
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 1
47666: NEG
47667: PUSH
47668: LD_INT 1
47670: NEG
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 1
47678: PUSH
47679: LD_INT 2
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: LD_INT 2
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: LD_INT 1
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 2
47709: NEG
47710: PUSH
47711: LD_INT 0
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 2
47720: NEG
47721: PUSH
47722: LD_INT 1
47724: NEG
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47744: LD_ADDR_VAR 0 52
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: LD_INT 0
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 0
47761: PUSH
47762: LD_INT 1
47764: NEG
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 1
47772: PUSH
47773: LD_INT 0
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 1
47782: PUSH
47783: LD_INT 1
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 0
47792: PUSH
47793: LD_INT 1
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 1
47802: NEG
47803: PUSH
47804: LD_INT 0
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 1
47813: NEG
47814: PUSH
47815: LD_INT 1
47817: NEG
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 1
47825: NEG
47826: PUSH
47827: LD_INT 2
47829: NEG
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 1
47837: NEG
47838: PUSH
47839: LD_INT 1
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 2
47848: NEG
47849: PUSH
47850: LD_INT 0
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 2
47859: NEG
47860: PUSH
47861: LD_INT 1
47863: NEG
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 2
47871: NEG
47872: PUSH
47873: LD_INT 2
47875: NEG
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47895: LD_ADDR_VAR 0 53
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: LD_INT 0
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 0
47912: PUSH
47913: LD_INT 1
47915: NEG
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 1
47923: PUSH
47924: LD_INT 0
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 1
47933: PUSH
47934: LD_INT 1
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 0
47943: PUSH
47944: LD_INT 1
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 1
47953: NEG
47954: PUSH
47955: LD_INT 0
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 1
47964: NEG
47965: PUSH
47966: LD_INT 1
47968: NEG
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 1
47976: NEG
47977: PUSH
47978: LD_INT 2
47980: NEG
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 0
47988: PUSH
47989: LD_INT 2
47991: NEG
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 1
47999: PUSH
48000: LD_INT 1
48002: NEG
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 2
48010: PUSH
48011: LD_INT 0
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 2
48020: PUSH
48021: LD_INT 1
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 2
48030: PUSH
48031: LD_INT 2
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 1
48040: PUSH
48041: LD_INT 2
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 0
48050: PUSH
48051: LD_INT 2
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 1
48060: NEG
48061: PUSH
48062: LD_INT 1
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 2
48071: NEG
48072: PUSH
48073: LD_INT 0
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 2
48082: NEG
48083: PUSH
48084: LD_INT 1
48086: NEG
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 2
48094: NEG
48095: PUSH
48096: LD_INT 2
48098: NEG
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48125: LD_ADDR_VAR 0 54
48129: PUSH
48130: LD_INT 0
48132: PUSH
48133: LD_INT 0
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 0
48142: PUSH
48143: LD_INT 1
48145: NEG
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 1
48153: PUSH
48154: LD_INT 0
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 1
48163: PUSH
48164: LD_INT 1
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 0
48173: PUSH
48174: LD_INT 1
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 1
48183: NEG
48184: PUSH
48185: LD_INT 0
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 1
48194: NEG
48195: PUSH
48196: LD_INT 1
48198: NEG
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 1
48206: NEG
48207: PUSH
48208: LD_INT 2
48210: NEG
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 0
48218: PUSH
48219: LD_INT 2
48221: NEG
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 1
48229: PUSH
48230: LD_INT 1
48232: NEG
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 2
48240: PUSH
48241: LD_INT 0
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 2
48250: PUSH
48251: LD_INT 1
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 2
48260: PUSH
48261: LD_INT 2
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 1
48270: PUSH
48271: LD_INT 2
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 0
48280: PUSH
48281: LD_INT 2
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 1
48290: NEG
48291: PUSH
48292: LD_INT 1
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 2
48301: NEG
48302: PUSH
48303: LD_INT 0
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 2
48312: NEG
48313: PUSH
48314: LD_INT 1
48316: NEG
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 2
48324: NEG
48325: PUSH
48326: LD_INT 2
48328: NEG
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48355: LD_ADDR_VAR 0 55
48359: PUSH
48360: LD_INT 0
48362: PUSH
48363: LD_INT 0
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 0
48372: PUSH
48373: LD_INT 1
48375: NEG
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 1
48383: PUSH
48384: LD_INT 0
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 1
48393: PUSH
48394: LD_INT 1
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 0
48403: PUSH
48404: LD_INT 1
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 1
48413: NEG
48414: PUSH
48415: LD_INT 0
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 1
48424: NEG
48425: PUSH
48426: LD_INT 1
48428: NEG
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 1
48436: NEG
48437: PUSH
48438: LD_INT 2
48440: NEG
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 0
48448: PUSH
48449: LD_INT 2
48451: NEG
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 1
48459: PUSH
48460: LD_INT 1
48462: NEG
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 2
48470: PUSH
48471: LD_INT 0
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 2
48480: PUSH
48481: LD_INT 1
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 2
48490: PUSH
48491: LD_INT 2
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 1
48500: PUSH
48501: LD_INT 2
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 0
48510: PUSH
48511: LD_INT 2
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 1
48520: NEG
48521: PUSH
48522: LD_INT 1
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 2
48531: NEG
48532: PUSH
48533: LD_INT 0
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 2
48542: NEG
48543: PUSH
48544: LD_INT 1
48546: NEG
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 2
48554: NEG
48555: PUSH
48556: LD_INT 2
48558: NEG
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48585: LD_ADDR_VAR 0 56
48589: PUSH
48590: LD_INT 0
48592: PUSH
48593: LD_INT 0
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 0
48602: PUSH
48603: LD_INT 1
48605: NEG
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 1
48613: PUSH
48614: LD_INT 0
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 1
48623: PUSH
48624: LD_INT 1
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 0
48633: PUSH
48634: LD_INT 1
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 1
48643: NEG
48644: PUSH
48645: LD_INT 0
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 1
48654: NEG
48655: PUSH
48656: LD_INT 1
48658: NEG
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 1
48666: NEG
48667: PUSH
48668: LD_INT 2
48670: NEG
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 0
48678: PUSH
48679: LD_INT 2
48681: NEG
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 1
48689: PUSH
48690: LD_INT 1
48692: NEG
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 2
48700: PUSH
48701: LD_INT 0
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 2
48710: PUSH
48711: LD_INT 1
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 2
48720: PUSH
48721: LD_INT 2
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 1
48730: PUSH
48731: LD_INT 2
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 0
48740: PUSH
48741: LD_INT 2
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 1
48750: NEG
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 2
48761: NEG
48762: PUSH
48763: LD_INT 0
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 2
48772: NEG
48773: PUSH
48774: LD_INT 1
48776: NEG
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 2
48784: NEG
48785: PUSH
48786: LD_INT 2
48788: NEG
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48815: LD_ADDR_VAR 0 57
48819: PUSH
48820: LD_INT 0
48822: PUSH
48823: LD_INT 0
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 0
48832: PUSH
48833: LD_INT 1
48835: NEG
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 1
48843: PUSH
48844: LD_INT 0
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 1
48853: PUSH
48854: LD_INT 1
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 0
48863: PUSH
48864: LD_INT 1
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 1
48873: NEG
48874: PUSH
48875: LD_INT 0
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 1
48884: NEG
48885: PUSH
48886: LD_INT 1
48888: NEG
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 1
48896: NEG
48897: PUSH
48898: LD_INT 2
48900: NEG
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 0
48908: PUSH
48909: LD_INT 2
48911: NEG
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 1
48919: PUSH
48920: LD_INT 1
48922: NEG
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 2
48930: PUSH
48931: LD_INT 0
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 2
48940: PUSH
48941: LD_INT 1
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 2
48950: PUSH
48951: LD_INT 2
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 1
48960: PUSH
48961: LD_INT 2
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 0
48970: PUSH
48971: LD_INT 2
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 1
48980: NEG
48981: PUSH
48982: LD_INT 1
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 2
48991: NEG
48992: PUSH
48993: LD_INT 0
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 2
49002: NEG
49003: PUSH
49004: LD_INT 1
49006: NEG
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 2
49014: NEG
49015: PUSH
49016: LD_INT 2
49018: NEG
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49045: LD_ADDR_VAR 0 58
49049: PUSH
49050: LD_INT 0
49052: PUSH
49053: LD_INT 0
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 0
49062: PUSH
49063: LD_INT 1
49065: NEG
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 1
49073: PUSH
49074: LD_INT 0
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 1
49083: PUSH
49084: LD_INT 1
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 0
49093: PUSH
49094: LD_INT 1
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 1
49103: NEG
49104: PUSH
49105: LD_INT 0
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 1
49114: NEG
49115: PUSH
49116: LD_INT 1
49118: NEG
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 1
49126: NEG
49127: PUSH
49128: LD_INT 2
49130: NEG
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 0
49138: PUSH
49139: LD_INT 2
49141: NEG
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 1
49149: PUSH
49150: LD_INT 1
49152: NEG
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 2
49160: PUSH
49161: LD_INT 0
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 2
49170: PUSH
49171: LD_INT 1
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 2
49180: PUSH
49181: LD_INT 2
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 1
49190: PUSH
49191: LD_INT 2
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 0
49200: PUSH
49201: LD_INT 2
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 1
49210: NEG
49211: PUSH
49212: LD_INT 1
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 2
49221: NEG
49222: PUSH
49223: LD_INT 0
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 2
49232: NEG
49233: PUSH
49234: LD_INT 1
49236: NEG
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 2
49244: NEG
49245: PUSH
49246: LD_INT 2
49248: NEG
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49275: LD_ADDR_VAR 0 59
49279: PUSH
49280: LD_INT 0
49282: PUSH
49283: LD_INT 0
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 0
49292: PUSH
49293: LD_INT 1
49295: NEG
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 1
49303: PUSH
49304: LD_INT 0
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 1
49313: PUSH
49314: LD_INT 1
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 0
49323: PUSH
49324: LD_INT 1
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 1
49333: NEG
49334: PUSH
49335: LD_INT 0
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 1
49344: NEG
49345: PUSH
49346: LD_INT 1
49348: NEG
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49363: LD_ADDR_VAR 0 60
49367: PUSH
49368: LD_INT 0
49370: PUSH
49371: LD_INT 0
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 0
49380: PUSH
49381: LD_INT 1
49383: NEG
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 1
49391: PUSH
49392: LD_INT 0
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 1
49401: PUSH
49402: LD_INT 1
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 0
49411: PUSH
49412: LD_INT 1
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 1
49421: NEG
49422: PUSH
49423: LD_INT 0
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 1
49432: NEG
49433: PUSH
49434: LD_INT 1
49436: NEG
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49451: LD_ADDR_VAR 0 61
49455: PUSH
49456: LD_INT 0
49458: PUSH
49459: LD_INT 0
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 0
49468: PUSH
49469: LD_INT 1
49471: NEG
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 1
49479: PUSH
49480: LD_INT 0
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 1
49489: PUSH
49490: LD_INT 1
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 0
49499: PUSH
49500: LD_INT 1
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 1
49509: NEG
49510: PUSH
49511: LD_INT 0
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 1
49520: NEG
49521: PUSH
49522: LD_INT 1
49524: NEG
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49539: LD_ADDR_VAR 0 62
49543: PUSH
49544: LD_INT 0
49546: PUSH
49547: LD_INT 0
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 0
49556: PUSH
49557: LD_INT 1
49559: NEG
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 1
49567: PUSH
49568: LD_INT 0
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 1
49577: PUSH
49578: LD_INT 1
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 0
49587: PUSH
49588: LD_INT 1
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 1
49597: NEG
49598: PUSH
49599: LD_INT 0
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 1
49608: NEG
49609: PUSH
49610: LD_INT 1
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49627: LD_ADDR_VAR 0 63
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: LD_INT 0
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 0
49644: PUSH
49645: LD_INT 1
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 1
49655: PUSH
49656: LD_INT 0
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 1
49665: PUSH
49666: LD_INT 1
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 0
49675: PUSH
49676: LD_INT 1
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 1
49685: NEG
49686: PUSH
49687: LD_INT 0
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 1
49696: NEG
49697: PUSH
49698: LD_INT 1
49700: NEG
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49715: LD_ADDR_VAR 0 64
49719: PUSH
49720: LD_INT 0
49722: PUSH
49723: LD_INT 0
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 0
49732: PUSH
49733: LD_INT 1
49735: NEG
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 1
49743: PUSH
49744: LD_INT 0
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 1
49753: PUSH
49754: LD_INT 1
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 0
49763: PUSH
49764: LD_INT 1
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 1
49773: NEG
49774: PUSH
49775: LD_INT 0
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 1
49784: NEG
49785: PUSH
49786: LD_INT 1
49788: NEG
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: ST_TO_ADDR
// end ; 1 :
49803: GO 55700
49805: LD_INT 1
49807: DOUBLE
49808: EQUAL
49809: IFTRUE 49813
49811: GO 52436
49813: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49814: LD_ADDR_VAR 0 11
49818: PUSH
49819: LD_INT 1
49821: NEG
49822: PUSH
49823: LD_INT 3
49825: NEG
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 0
49833: PUSH
49834: LD_INT 3
49836: NEG
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 1
49844: PUSH
49845: LD_INT 2
49847: NEG
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: LIST
49857: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49858: LD_ADDR_VAR 0 12
49862: PUSH
49863: LD_INT 2
49865: PUSH
49866: LD_INT 1
49868: NEG
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 3
49876: PUSH
49877: LD_INT 0
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 3
49886: PUSH
49887: LD_INT 1
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: LIST
49898: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49899: LD_ADDR_VAR 0 13
49903: PUSH
49904: LD_INT 3
49906: PUSH
49907: LD_INT 2
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 3
49916: PUSH
49917: LD_INT 3
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 2
49926: PUSH
49927: LD_INT 3
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: LIST
49938: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49939: LD_ADDR_VAR 0 14
49943: PUSH
49944: LD_INT 1
49946: PUSH
49947: LD_INT 3
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 0
49956: PUSH
49957: LD_INT 3
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 1
49966: NEG
49967: PUSH
49968: LD_INT 2
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: LIST
49979: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49980: LD_ADDR_VAR 0 15
49984: PUSH
49985: LD_INT 2
49987: NEG
49988: PUSH
49989: LD_INT 1
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 3
49998: NEG
49999: PUSH
50000: LD_INT 0
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 3
50009: NEG
50010: PUSH
50011: LD_INT 1
50013: NEG
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: LIST
50023: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50024: LD_ADDR_VAR 0 16
50028: PUSH
50029: LD_INT 2
50031: NEG
50032: PUSH
50033: LD_INT 3
50035: NEG
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 3
50043: NEG
50044: PUSH
50045: LD_INT 2
50047: NEG
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 3
50055: NEG
50056: PUSH
50057: LD_INT 3
50059: NEG
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: LIST
50069: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50070: LD_ADDR_VAR 0 17
50074: PUSH
50075: LD_INT 1
50077: NEG
50078: PUSH
50079: LD_INT 3
50081: NEG
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 0
50089: PUSH
50090: LD_INT 3
50092: NEG
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 1
50100: PUSH
50101: LD_INT 2
50103: NEG
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: LIST
50113: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50114: LD_ADDR_VAR 0 18
50118: PUSH
50119: LD_INT 2
50121: PUSH
50122: LD_INT 1
50124: NEG
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 3
50132: PUSH
50133: LD_INT 0
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 3
50142: PUSH
50143: LD_INT 1
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: LIST
50154: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50155: LD_ADDR_VAR 0 19
50159: PUSH
50160: LD_INT 3
50162: PUSH
50163: LD_INT 2
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 3
50172: PUSH
50173: LD_INT 3
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 2
50182: PUSH
50183: LD_INT 3
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: LIST
50194: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50195: LD_ADDR_VAR 0 20
50199: PUSH
50200: LD_INT 1
50202: PUSH
50203: LD_INT 3
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 0
50212: PUSH
50213: LD_INT 3
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 1
50222: NEG
50223: PUSH
50224: LD_INT 2
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: LIST
50235: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50236: LD_ADDR_VAR 0 21
50240: PUSH
50241: LD_INT 2
50243: NEG
50244: PUSH
50245: LD_INT 1
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 3
50254: NEG
50255: PUSH
50256: LD_INT 0
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 3
50265: NEG
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: LIST
50279: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50280: LD_ADDR_VAR 0 22
50284: PUSH
50285: LD_INT 2
50287: NEG
50288: PUSH
50289: LD_INT 3
50291: NEG
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 3
50299: NEG
50300: PUSH
50301: LD_INT 2
50303: NEG
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 3
50311: NEG
50312: PUSH
50313: LD_INT 3
50315: NEG
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: LIST
50325: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50326: LD_ADDR_VAR 0 23
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: LD_INT 3
50336: NEG
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 1
50344: NEG
50345: PUSH
50346: LD_INT 4
50348: NEG
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 1
50356: PUSH
50357: LD_INT 3
50359: NEG
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: LIST
50369: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50370: LD_ADDR_VAR 0 24
50374: PUSH
50375: LD_INT 3
50377: PUSH
50378: LD_INT 0
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 3
50387: PUSH
50388: LD_INT 1
50390: NEG
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 4
50398: PUSH
50399: LD_INT 1
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: LIST
50410: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50411: LD_ADDR_VAR 0 25
50415: PUSH
50416: LD_INT 3
50418: PUSH
50419: LD_INT 3
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 4
50428: PUSH
50429: LD_INT 3
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 3
50438: PUSH
50439: LD_INT 4
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: LIST
50450: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50451: LD_ADDR_VAR 0 26
50455: PUSH
50456: LD_INT 0
50458: PUSH
50459: LD_INT 3
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 1
50468: PUSH
50469: LD_INT 4
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 1
50478: NEG
50479: PUSH
50480: LD_INT 3
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: LIST
50491: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50492: LD_ADDR_VAR 0 27
50496: PUSH
50497: LD_INT 3
50499: NEG
50500: PUSH
50501: LD_INT 0
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 3
50510: NEG
50511: PUSH
50512: LD_INT 1
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 4
50521: NEG
50522: PUSH
50523: LD_INT 1
50525: NEG
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: LIST
50535: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50536: LD_ADDR_VAR 0 28
50540: PUSH
50541: LD_INT 3
50543: NEG
50544: PUSH
50545: LD_INT 3
50547: NEG
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 3
50555: NEG
50556: PUSH
50557: LD_INT 4
50559: NEG
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 4
50567: NEG
50568: PUSH
50569: LD_INT 3
50571: NEG
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: LIST
50581: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50582: LD_ADDR_VAR 0 29
50586: PUSH
50587: LD_INT 1
50589: NEG
50590: PUSH
50591: LD_INT 3
50593: NEG
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 0
50601: PUSH
50602: LD_INT 3
50604: NEG
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 1
50612: PUSH
50613: LD_INT 2
50615: NEG
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 1
50623: NEG
50624: PUSH
50625: LD_INT 4
50627: NEG
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 0
50635: PUSH
50636: LD_INT 4
50638: NEG
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 1
50646: PUSH
50647: LD_INT 3
50649: NEG
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 1
50657: NEG
50658: PUSH
50659: LD_INT 5
50661: NEG
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 0
50669: PUSH
50670: LD_INT 5
50672: NEG
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 1
50680: PUSH
50681: LD_INT 4
50683: NEG
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 1
50691: NEG
50692: PUSH
50693: LD_INT 6
50695: NEG
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 0
50703: PUSH
50704: LD_INT 6
50706: NEG
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 1
50714: PUSH
50715: LD_INT 5
50717: NEG
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
50737: LD_ADDR_VAR 0 30
50741: PUSH
50742: LD_INT 2
50744: PUSH
50745: LD_INT 1
50747: NEG
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 3
50755: PUSH
50756: LD_INT 0
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 3
50765: PUSH
50766: LD_INT 1
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 3
50775: PUSH
50776: LD_INT 1
50778: NEG
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 4
50786: PUSH
50787: LD_INT 0
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 4
50796: PUSH
50797: LD_INT 1
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 4
50806: PUSH
50807: LD_INT 1
50809: NEG
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 5
50817: PUSH
50818: LD_INT 0
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 5
50827: PUSH
50828: LD_INT 1
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 5
50837: PUSH
50838: LD_INT 1
50840: NEG
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 6
50848: PUSH
50849: LD_INT 0
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 6
50858: PUSH
50859: LD_INT 1
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
50880: LD_ADDR_VAR 0 31
50884: PUSH
50885: LD_INT 3
50887: PUSH
50888: LD_INT 2
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 3
50897: PUSH
50898: LD_INT 3
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 2
50907: PUSH
50908: LD_INT 3
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 4
50917: PUSH
50918: LD_INT 3
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 4
50927: PUSH
50928: LD_INT 4
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 3
50937: PUSH
50938: LD_INT 4
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 5
50947: PUSH
50948: LD_INT 4
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 5
50957: PUSH
50958: LD_INT 5
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 4
50967: PUSH
50968: LD_INT 5
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 6
50977: PUSH
50978: LD_INT 5
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 6
50987: PUSH
50988: LD_INT 6
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 5
50997: PUSH
50998: LD_INT 6
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51019: LD_ADDR_VAR 0 32
51023: PUSH
51024: LD_INT 1
51026: PUSH
51027: LD_INT 3
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 0
51036: PUSH
51037: LD_INT 3
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 1
51046: NEG
51047: PUSH
51048: LD_INT 2
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 1
51057: PUSH
51058: LD_INT 4
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 0
51067: PUSH
51068: LD_INT 4
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 1
51077: NEG
51078: PUSH
51079: LD_INT 3
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 1
51088: PUSH
51089: LD_INT 5
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 0
51098: PUSH
51099: LD_INT 5
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 1
51108: NEG
51109: PUSH
51110: LD_INT 4
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 1
51119: PUSH
51120: LD_INT 6
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 0
51129: PUSH
51130: LD_INT 6
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 1
51139: NEG
51140: PUSH
51141: LD_INT 5
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51162: LD_ADDR_VAR 0 33
51166: PUSH
51167: LD_INT 2
51169: NEG
51170: PUSH
51171: LD_INT 1
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 3
51180: NEG
51181: PUSH
51182: LD_INT 0
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 3
51191: NEG
51192: PUSH
51193: LD_INT 1
51195: NEG
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 3
51203: NEG
51204: PUSH
51205: LD_INT 1
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 4
51214: NEG
51215: PUSH
51216: LD_INT 0
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 4
51225: NEG
51226: PUSH
51227: LD_INT 1
51229: NEG
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 4
51237: NEG
51238: PUSH
51239: LD_INT 1
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 5
51248: NEG
51249: PUSH
51250: LD_INT 0
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 5
51259: NEG
51260: PUSH
51261: LD_INT 1
51263: NEG
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 5
51271: NEG
51272: PUSH
51273: LD_INT 1
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 6
51282: NEG
51283: PUSH
51284: LD_INT 0
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 6
51293: NEG
51294: PUSH
51295: LD_INT 1
51297: NEG
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51317: LD_ADDR_VAR 0 34
51321: PUSH
51322: LD_INT 2
51324: NEG
51325: PUSH
51326: LD_INT 3
51328: NEG
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 3
51336: NEG
51337: PUSH
51338: LD_INT 2
51340: NEG
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 3
51348: NEG
51349: PUSH
51350: LD_INT 3
51352: NEG
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 3
51360: NEG
51361: PUSH
51362: LD_INT 4
51364: NEG
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 4
51372: NEG
51373: PUSH
51374: LD_INT 3
51376: NEG
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 4
51384: NEG
51385: PUSH
51386: LD_INT 4
51388: NEG
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 4
51396: NEG
51397: PUSH
51398: LD_INT 5
51400: NEG
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 5
51408: NEG
51409: PUSH
51410: LD_INT 4
51412: NEG
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 5
51420: NEG
51421: PUSH
51422: LD_INT 5
51424: NEG
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 5
51432: NEG
51433: PUSH
51434: LD_INT 6
51436: NEG
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 6
51444: NEG
51445: PUSH
51446: LD_INT 5
51448: NEG
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 6
51456: NEG
51457: PUSH
51458: LD_INT 6
51460: NEG
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51480: LD_ADDR_VAR 0 41
51484: PUSH
51485: LD_INT 0
51487: PUSH
51488: LD_INT 2
51490: NEG
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 1
51498: NEG
51499: PUSH
51500: LD_INT 3
51502: NEG
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 1
51510: PUSH
51511: LD_INT 2
51513: NEG
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: LIST
51523: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51524: LD_ADDR_VAR 0 42
51528: PUSH
51529: LD_INT 2
51531: PUSH
51532: LD_INT 0
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 2
51541: PUSH
51542: LD_INT 1
51544: NEG
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 3
51552: PUSH
51553: LD_INT 1
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: LIST
51564: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51565: LD_ADDR_VAR 0 43
51569: PUSH
51570: LD_INT 2
51572: PUSH
51573: LD_INT 2
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 3
51582: PUSH
51583: LD_INT 2
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 2
51592: PUSH
51593: LD_INT 3
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: LIST
51604: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51605: LD_ADDR_VAR 0 44
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: LD_INT 2
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 1
51622: PUSH
51623: LD_INT 3
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 1
51632: NEG
51633: PUSH
51634: LD_INT 2
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: LIST
51645: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51646: LD_ADDR_VAR 0 45
51650: PUSH
51651: LD_INT 2
51653: NEG
51654: PUSH
51655: LD_INT 0
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 2
51664: NEG
51665: PUSH
51666: LD_INT 1
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 3
51675: NEG
51676: PUSH
51677: LD_INT 1
51679: NEG
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: LIST
51689: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51690: LD_ADDR_VAR 0 46
51694: PUSH
51695: LD_INT 2
51697: NEG
51698: PUSH
51699: LD_INT 2
51701: NEG
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 2
51709: NEG
51710: PUSH
51711: LD_INT 3
51713: NEG
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 3
51721: NEG
51722: PUSH
51723: LD_INT 2
51725: NEG
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: LIST
51735: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
51736: LD_ADDR_VAR 0 47
51740: PUSH
51741: LD_INT 2
51743: NEG
51744: PUSH
51745: LD_INT 3
51747: NEG
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 1
51755: NEG
51756: PUSH
51757: LD_INT 3
51759: NEG
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51769: LD_ADDR_VAR 0 48
51773: PUSH
51774: LD_INT 1
51776: PUSH
51777: LD_INT 2
51779: NEG
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 2
51787: PUSH
51788: LD_INT 1
51790: NEG
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
51800: LD_ADDR_VAR 0 49
51804: PUSH
51805: LD_INT 3
51807: PUSH
51808: LD_INT 1
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 3
51817: PUSH
51818: LD_INT 2
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
51829: LD_ADDR_VAR 0 50
51833: PUSH
51834: LD_INT 2
51836: PUSH
51837: LD_INT 3
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 1
51846: PUSH
51847: LD_INT 3
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51858: LD_ADDR_VAR 0 51
51862: PUSH
51863: LD_INT 1
51865: NEG
51866: PUSH
51867: LD_INT 2
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 2
51876: NEG
51877: PUSH
51878: LD_INT 1
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51889: LD_ADDR_VAR 0 52
51893: PUSH
51894: LD_INT 3
51896: NEG
51897: PUSH
51898: LD_INT 1
51900: NEG
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 3
51908: NEG
51909: PUSH
51910: LD_INT 2
51912: NEG
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51922: LD_ADDR_VAR 0 53
51926: PUSH
51927: LD_INT 1
51929: NEG
51930: PUSH
51931: LD_INT 3
51933: NEG
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 0
51941: PUSH
51942: LD_INT 3
51944: NEG
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 1
51952: PUSH
51953: LD_INT 2
51955: NEG
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: LIST
51965: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51966: LD_ADDR_VAR 0 54
51970: PUSH
51971: LD_INT 2
51973: PUSH
51974: LD_INT 1
51976: NEG
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 3
51984: PUSH
51985: LD_INT 0
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 3
51994: PUSH
51995: LD_INT 1
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: LIST
52006: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52007: LD_ADDR_VAR 0 55
52011: PUSH
52012: LD_INT 3
52014: PUSH
52015: LD_INT 2
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 3
52024: PUSH
52025: LD_INT 3
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 2
52034: PUSH
52035: LD_INT 3
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: LIST
52046: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52047: LD_ADDR_VAR 0 56
52051: PUSH
52052: LD_INT 1
52054: PUSH
52055: LD_INT 3
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 0
52064: PUSH
52065: LD_INT 3
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 1
52074: NEG
52075: PUSH
52076: LD_INT 2
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: LIST
52087: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52088: LD_ADDR_VAR 0 57
52092: PUSH
52093: LD_INT 2
52095: NEG
52096: PUSH
52097: LD_INT 1
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 3
52106: NEG
52107: PUSH
52108: LD_INT 0
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 3
52117: NEG
52118: PUSH
52119: LD_INT 1
52121: NEG
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: LIST
52131: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52132: LD_ADDR_VAR 0 58
52136: PUSH
52137: LD_INT 2
52139: NEG
52140: PUSH
52141: LD_INT 3
52143: NEG
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 3
52151: NEG
52152: PUSH
52153: LD_INT 2
52155: NEG
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 3
52163: NEG
52164: PUSH
52165: LD_INT 3
52167: NEG
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: LIST
52177: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52178: LD_ADDR_VAR 0 59
52182: PUSH
52183: LD_INT 1
52185: NEG
52186: PUSH
52187: LD_INT 2
52189: NEG
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 0
52197: PUSH
52198: LD_INT 2
52200: NEG
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 1
52208: PUSH
52209: LD_INT 1
52211: NEG
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: LIST
52221: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52222: LD_ADDR_VAR 0 60
52226: PUSH
52227: LD_INT 1
52229: PUSH
52230: LD_INT 1
52232: NEG
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 2
52240: PUSH
52241: LD_INT 0
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 2
52250: PUSH
52251: LD_INT 1
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: LIST
52262: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52263: LD_ADDR_VAR 0 61
52267: PUSH
52268: LD_INT 2
52270: PUSH
52271: LD_INT 1
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 2
52280: PUSH
52281: LD_INT 2
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 1
52290: PUSH
52291: LD_INT 2
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: LIST
52302: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52303: LD_ADDR_VAR 0 62
52307: PUSH
52308: LD_INT 1
52310: PUSH
52311: LD_INT 2
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 0
52320: PUSH
52321: LD_INT 2
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 1
52330: NEG
52331: PUSH
52332: LD_INT 1
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: LIST
52343: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52344: LD_ADDR_VAR 0 63
52348: PUSH
52349: LD_INT 1
52351: NEG
52352: PUSH
52353: LD_INT 1
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 2
52362: NEG
52363: PUSH
52364: LD_INT 0
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 2
52373: NEG
52374: PUSH
52375: LD_INT 1
52377: NEG
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: LIST
52387: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52388: LD_ADDR_VAR 0 64
52392: PUSH
52393: LD_INT 1
52395: NEG
52396: PUSH
52397: LD_INT 2
52399: NEG
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 2
52407: NEG
52408: PUSH
52409: LD_INT 1
52411: NEG
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 2
52419: NEG
52420: PUSH
52421: LD_INT 2
52423: NEG
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: LIST
52433: ST_TO_ADDR
// end ; 2 :
52434: GO 55700
52436: LD_INT 2
52438: DOUBLE
52439: EQUAL
52440: IFTRUE 52444
52442: GO 55699
52444: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52445: LD_ADDR_VAR 0 29
52449: PUSH
52450: LD_INT 4
52452: PUSH
52453: LD_INT 0
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 4
52462: PUSH
52463: LD_INT 1
52465: NEG
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 5
52473: PUSH
52474: LD_INT 0
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 5
52483: PUSH
52484: LD_INT 1
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 4
52493: PUSH
52494: LD_INT 1
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 3
52503: PUSH
52504: LD_INT 0
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 3
52513: PUSH
52514: LD_INT 1
52516: NEG
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 3
52524: PUSH
52525: LD_INT 2
52527: NEG
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 5
52535: PUSH
52536: LD_INT 2
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 3
52545: PUSH
52546: LD_INT 3
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 3
52555: PUSH
52556: LD_INT 2
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 4
52565: PUSH
52566: LD_INT 3
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 4
52575: PUSH
52576: LD_INT 4
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 3
52585: PUSH
52586: LD_INT 4
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 2
52595: PUSH
52596: LD_INT 3
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 2
52605: PUSH
52606: LD_INT 2
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 4
52615: PUSH
52616: LD_INT 2
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 2
52625: PUSH
52626: LD_INT 4
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 0
52635: PUSH
52636: LD_INT 4
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 0
52645: PUSH
52646: LD_INT 3
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 1
52655: PUSH
52656: LD_INT 4
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 1
52665: PUSH
52666: LD_INT 5
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 0
52675: PUSH
52676: LD_INT 5
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 1
52685: NEG
52686: PUSH
52687: LD_INT 4
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 1
52696: NEG
52697: PUSH
52698: LD_INT 3
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 2
52707: PUSH
52708: LD_INT 5
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 2
52717: NEG
52718: PUSH
52719: LD_INT 3
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 3
52728: NEG
52729: PUSH
52730: LD_INT 0
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 3
52739: NEG
52740: PUSH
52741: LD_INT 1
52743: NEG
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 2
52751: NEG
52752: PUSH
52753: LD_INT 0
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 2
52762: NEG
52763: PUSH
52764: LD_INT 1
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 3
52773: NEG
52774: PUSH
52775: LD_INT 1
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 4
52784: NEG
52785: PUSH
52786: LD_INT 0
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 4
52795: NEG
52796: PUSH
52797: LD_INT 1
52799: NEG
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 4
52807: NEG
52808: PUSH
52809: LD_INT 2
52811: NEG
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 2
52819: NEG
52820: PUSH
52821: LD_INT 2
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 4
52830: NEG
52831: PUSH
52832: LD_INT 4
52834: NEG
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 4
52842: NEG
52843: PUSH
52844: LD_INT 5
52846: NEG
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 3
52854: NEG
52855: PUSH
52856: LD_INT 4
52858: NEG
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 3
52866: NEG
52867: PUSH
52868: LD_INT 3
52870: NEG
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 4
52878: NEG
52879: PUSH
52880: LD_INT 3
52882: NEG
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 5
52890: NEG
52891: PUSH
52892: LD_INT 4
52894: NEG
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 5
52902: NEG
52903: PUSH
52904: LD_INT 5
52906: NEG
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 3
52914: NEG
52915: PUSH
52916: LD_INT 5
52918: NEG
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 5
52926: NEG
52927: PUSH
52928: LD_INT 3
52930: NEG
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
52983: LD_ADDR_VAR 0 30
52987: PUSH
52988: LD_INT 4
52990: PUSH
52991: LD_INT 4
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 4
53000: PUSH
53001: LD_INT 3
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 5
53010: PUSH
53011: LD_INT 4
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 5
53020: PUSH
53021: LD_INT 5
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 4
53030: PUSH
53031: LD_INT 5
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 3
53040: PUSH
53041: LD_INT 4
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 3
53050: PUSH
53051: LD_INT 3
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 5
53060: PUSH
53061: LD_INT 3
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 3
53070: PUSH
53071: LD_INT 5
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 0
53080: PUSH
53081: LD_INT 3
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 0
53090: PUSH
53091: LD_INT 2
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 1
53100: PUSH
53101: LD_INT 3
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 1
53110: PUSH
53111: LD_INT 4
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 0
53120: PUSH
53121: LD_INT 4
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 1
53130: NEG
53131: PUSH
53132: LD_INT 3
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 1
53141: NEG
53142: PUSH
53143: LD_INT 2
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 2
53152: PUSH
53153: LD_INT 4
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 2
53162: NEG
53163: PUSH
53164: LD_INT 2
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 4
53173: NEG
53174: PUSH
53175: LD_INT 0
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 4
53184: NEG
53185: PUSH
53186: LD_INT 1
53188: NEG
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 3
53196: NEG
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 3
53207: NEG
53208: PUSH
53209: LD_INT 1
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 4
53218: NEG
53219: PUSH
53220: LD_INT 1
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 5
53229: NEG
53230: PUSH
53231: LD_INT 0
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 5
53240: NEG
53241: PUSH
53242: LD_INT 1
53244: NEG
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 5
53252: NEG
53253: PUSH
53254: LD_INT 2
53256: NEG
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 3
53264: NEG
53265: PUSH
53266: LD_INT 2
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 3
53275: NEG
53276: PUSH
53277: LD_INT 3
53279: NEG
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 3
53287: NEG
53288: PUSH
53289: LD_INT 4
53291: NEG
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 2
53299: NEG
53300: PUSH
53301: LD_INT 3
53303: NEG
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 2
53311: NEG
53312: PUSH
53313: LD_INT 2
53315: NEG
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 3
53323: NEG
53324: PUSH
53325: LD_INT 2
53327: NEG
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 4
53335: NEG
53336: PUSH
53337: LD_INT 3
53339: NEG
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 4
53347: NEG
53348: PUSH
53349: LD_INT 4
53351: NEG
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 2
53359: NEG
53360: PUSH
53361: LD_INT 4
53363: NEG
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 4
53371: NEG
53372: PUSH
53373: LD_INT 2
53375: NEG
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 0
53383: PUSH
53384: LD_INT 4
53386: NEG
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 0
53394: PUSH
53395: LD_INT 5
53397: NEG
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 1
53405: PUSH
53406: LD_INT 4
53408: NEG
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 1
53416: PUSH
53417: LD_INT 3
53419: NEG
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 0
53427: PUSH
53428: LD_INT 3
53430: NEG
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 1
53438: NEG
53439: PUSH
53440: LD_INT 4
53442: NEG
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 1
53450: NEG
53451: PUSH
53452: LD_INT 5
53454: NEG
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 2
53462: PUSH
53463: LD_INT 3
53465: NEG
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 2
53473: NEG
53474: PUSH
53475: LD_INT 5
53477: NEG
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53530: LD_ADDR_VAR 0 31
53534: PUSH
53535: LD_INT 0
53537: PUSH
53538: LD_INT 4
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 0
53547: PUSH
53548: LD_INT 3
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 1
53557: PUSH
53558: LD_INT 4
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 1
53567: PUSH
53568: LD_INT 5
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 0
53577: PUSH
53578: LD_INT 5
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 1
53587: NEG
53588: PUSH
53589: LD_INT 4
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 1
53598: NEG
53599: PUSH
53600: LD_INT 3
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 2
53609: PUSH
53610: LD_INT 5
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 2
53619: NEG
53620: PUSH
53621: LD_INT 3
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 3
53630: NEG
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 3
53641: NEG
53642: PUSH
53643: LD_INT 1
53645: NEG
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 2
53653: NEG
53654: PUSH
53655: LD_INT 0
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 2
53664: NEG
53665: PUSH
53666: LD_INT 1
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 3
53675: NEG
53676: PUSH
53677: LD_INT 1
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 4
53686: NEG
53687: PUSH
53688: LD_INT 0
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 4
53697: NEG
53698: PUSH
53699: LD_INT 1
53701: NEG
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 4
53709: NEG
53710: PUSH
53711: LD_INT 2
53713: NEG
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 2
53721: NEG
53722: PUSH
53723: LD_INT 2
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 4
53732: NEG
53733: PUSH
53734: LD_INT 4
53736: NEG
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 4
53744: NEG
53745: PUSH
53746: LD_INT 5
53748: NEG
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 3
53756: NEG
53757: PUSH
53758: LD_INT 4
53760: NEG
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 3
53768: NEG
53769: PUSH
53770: LD_INT 3
53772: NEG
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 4
53780: NEG
53781: PUSH
53782: LD_INT 3
53784: NEG
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 5
53792: NEG
53793: PUSH
53794: LD_INT 4
53796: NEG
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 5
53804: NEG
53805: PUSH
53806: LD_INT 5
53808: NEG
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 3
53816: NEG
53817: PUSH
53818: LD_INT 5
53820: NEG
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 5
53828: NEG
53829: PUSH
53830: LD_INT 3
53832: NEG
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 0
53840: PUSH
53841: LD_INT 3
53843: NEG
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 0
53851: PUSH
53852: LD_INT 4
53854: NEG
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 1
53862: PUSH
53863: LD_INT 3
53865: NEG
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 1
53873: PUSH
53874: LD_INT 2
53876: NEG
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 0
53884: PUSH
53885: LD_INT 2
53887: NEG
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 1
53895: NEG
53896: PUSH
53897: LD_INT 3
53899: NEG
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 1
53907: NEG
53908: PUSH
53909: LD_INT 4
53911: NEG
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 2
53919: PUSH
53920: LD_INT 2
53922: NEG
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 2
53930: NEG
53931: PUSH
53932: LD_INT 4
53934: NEG
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 4
53942: PUSH
53943: LD_INT 0
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 4
53952: PUSH
53953: LD_INT 1
53955: NEG
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 5
53963: PUSH
53964: LD_INT 0
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 5
53973: PUSH
53974: LD_INT 1
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 4
53983: PUSH
53984: LD_INT 1
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 3
53993: PUSH
53994: LD_INT 0
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 3
54003: PUSH
54004: LD_INT 1
54006: NEG
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 3
54014: PUSH
54015: LD_INT 2
54017: NEG
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 5
54025: PUSH
54026: LD_INT 2
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54080: LD_ADDR_VAR 0 32
54084: PUSH
54085: LD_INT 4
54087: NEG
54088: PUSH
54089: LD_INT 0
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 4
54098: NEG
54099: PUSH
54100: LD_INT 1
54102: NEG
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 3
54110: NEG
54111: PUSH
54112: LD_INT 0
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 3
54121: NEG
54122: PUSH
54123: LD_INT 1
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 4
54132: NEG
54133: PUSH
54134: LD_INT 1
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 5
54143: NEG
54144: PUSH
54145: LD_INT 0
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 5
54154: NEG
54155: PUSH
54156: LD_INT 1
54158: NEG
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 5
54166: NEG
54167: PUSH
54168: LD_INT 2
54170: NEG
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 3
54178: NEG
54179: PUSH
54180: LD_INT 2
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 3
54189: NEG
54190: PUSH
54191: LD_INT 3
54193: NEG
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 3
54201: NEG
54202: PUSH
54203: LD_INT 4
54205: NEG
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 2
54213: NEG
54214: PUSH
54215: LD_INT 3
54217: NEG
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 2
54225: NEG
54226: PUSH
54227: LD_INT 2
54229: NEG
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 3
54237: NEG
54238: PUSH
54239: LD_INT 2
54241: NEG
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 4
54249: NEG
54250: PUSH
54251: LD_INT 3
54253: NEG
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 4
54261: NEG
54262: PUSH
54263: LD_INT 4
54265: NEG
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 2
54273: NEG
54274: PUSH
54275: LD_INT 4
54277: NEG
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 4
54285: NEG
54286: PUSH
54287: LD_INT 2
54289: NEG
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 0
54297: PUSH
54298: LD_INT 4
54300: NEG
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 0
54308: PUSH
54309: LD_INT 5
54311: NEG
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 1
54319: PUSH
54320: LD_INT 4
54322: NEG
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 1
54330: PUSH
54331: LD_INT 3
54333: NEG
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 0
54341: PUSH
54342: LD_INT 3
54344: NEG
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 1
54352: NEG
54353: PUSH
54354: LD_INT 4
54356: NEG
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 1
54364: NEG
54365: PUSH
54366: LD_INT 5
54368: NEG
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 2
54376: PUSH
54377: LD_INT 3
54379: NEG
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 2
54387: NEG
54388: PUSH
54389: LD_INT 5
54391: NEG
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 3
54399: PUSH
54400: LD_INT 0
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 3
54409: PUSH
54410: LD_INT 1
54412: NEG
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 4
54420: PUSH
54421: LD_INT 0
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 4
54430: PUSH
54431: LD_INT 1
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 3
54440: PUSH
54441: LD_INT 1
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 2
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 2
54460: PUSH
54461: LD_INT 1
54463: NEG
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 2
54471: PUSH
54472: LD_INT 2
54474: NEG
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 4
54482: PUSH
54483: LD_INT 2
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 4
54492: PUSH
54493: LD_INT 4
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 4
54502: PUSH
54503: LD_INT 3
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 5
54512: PUSH
54513: LD_INT 4
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 5
54522: PUSH
54523: LD_INT 5
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 4
54532: PUSH
54533: LD_INT 5
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 3
54542: PUSH
54543: LD_INT 4
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 3
54552: PUSH
54553: LD_INT 3
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 5
54562: PUSH
54563: LD_INT 3
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 3
54572: PUSH
54573: LD_INT 5
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54627: LD_ADDR_VAR 0 33
54631: PUSH
54632: LD_INT 4
54634: NEG
54635: PUSH
54636: LD_INT 4
54638: NEG
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 4
54646: NEG
54647: PUSH
54648: LD_INT 5
54650: NEG
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 3
54658: NEG
54659: PUSH
54660: LD_INT 4
54662: NEG
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 3
54670: NEG
54671: PUSH
54672: LD_INT 3
54674: NEG
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 4
54682: NEG
54683: PUSH
54684: LD_INT 3
54686: NEG
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 5
54694: NEG
54695: PUSH
54696: LD_INT 4
54698: NEG
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 5
54706: NEG
54707: PUSH
54708: LD_INT 5
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 3
54718: NEG
54719: PUSH
54720: LD_INT 5
54722: NEG
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 5
54730: NEG
54731: PUSH
54732: LD_INT 3
54734: NEG
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 0
54742: PUSH
54743: LD_INT 3
54745: NEG
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 0
54753: PUSH
54754: LD_INT 4
54756: NEG
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 1
54764: PUSH
54765: LD_INT 3
54767: NEG
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 1
54775: PUSH
54776: LD_INT 2
54778: NEG
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 0
54786: PUSH
54787: LD_INT 2
54789: NEG
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 1
54797: NEG
54798: PUSH
54799: LD_INT 3
54801: NEG
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 1
54809: NEG
54810: PUSH
54811: LD_INT 4
54813: NEG
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 2
54821: PUSH
54822: LD_INT 2
54824: NEG
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 2
54832: NEG
54833: PUSH
54834: LD_INT 4
54836: NEG
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 4
54844: PUSH
54845: LD_INT 0
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 4
54854: PUSH
54855: LD_INT 1
54857: NEG
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 5
54865: PUSH
54866: LD_INT 0
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 5
54875: PUSH
54876: LD_INT 1
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 4
54885: PUSH
54886: LD_INT 1
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 3
54895: PUSH
54896: LD_INT 0
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 3
54905: PUSH
54906: LD_INT 1
54908: NEG
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 3
54916: PUSH
54917: LD_INT 2
54919: NEG
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 5
54927: PUSH
54928: LD_INT 2
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 3
54937: PUSH
54938: LD_INT 3
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 3
54947: PUSH
54948: LD_INT 2
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 4
54957: PUSH
54958: LD_INT 3
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 4
54967: PUSH
54968: LD_INT 4
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 3
54977: PUSH
54978: LD_INT 4
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 2
54987: PUSH
54988: LD_INT 3
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 2
54997: PUSH
54998: LD_INT 2
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 4
55007: PUSH
55008: LD_INT 2
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 2
55017: PUSH
55018: LD_INT 4
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 0
55027: PUSH
55028: LD_INT 4
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 0
55037: PUSH
55038: LD_INT 3
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 1
55047: PUSH
55048: LD_INT 4
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 1
55057: PUSH
55058: LD_INT 5
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 0
55067: PUSH
55068: LD_INT 5
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 1
55077: NEG
55078: PUSH
55079: LD_INT 4
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 1
55088: NEG
55089: PUSH
55090: LD_INT 3
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 2
55099: PUSH
55100: LD_INT 5
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 2
55109: NEG
55110: PUSH
55111: LD_INT 3
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55165: LD_ADDR_VAR 0 34
55169: PUSH
55170: LD_INT 0
55172: PUSH
55173: LD_INT 4
55175: NEG
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 0
55183: PUSH
55184: LD_INT 5
55186: NEG
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 1
55194: PUSH
55195: LD_INT 4
55197: NEG
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 1
55205: PUSH
55206: LD_INT 3
55208: NEG
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 0
55216: PUSH
55217: LD_INT 3
55219: NEG
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 1
55227: NEG
55228: PUSH
55229: LD_INT 4
55231: NEG
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 1
55239: NEG
55240: PUSH
55241: LD_INT 5
55243: NEG
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 2
55251: PUSH
55252: LD_INT 3
55254: NEG
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 2
55262: NEG
55263: PUSH
55264: LD_INT 5
55266: NEG
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 3
55274: PUSH
55275: LD_INT 0
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 3
55284: PUSH
55285: LD_INT 1
55287: NEG
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 4
55295: PUSH
55296: LD_INT 0
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 4
55305: PUSH
55306: LD_INT 1
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 3
55315: PUSH
55316: LD_INT 1
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 2
55325: PUSH
55326: LD_INT 0
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 2
55335: PUSH
55336: LD_INT 1
55338: NEG
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 2
55346: PUSH
55347: LD_INT 2
55349: NEG
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 4
55357: PUSH
55358: LD_INT 2
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 4
55367: PUSH
55368: LD_INT 4
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 4
55377: PUSH
55378: LD_INT 3
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 5
55387: PUSH
55388: LD_INT 4
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 5
55397: PUSH
55398: LD_INT 5
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 4
55407: PUSH
55408: LD_INT 5
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 3
55417: PUSH
55418: LD_INT 4
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 3
55427: PUSH
55428: LD_INT 3
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 5
55437: PUSH
55438: LD_INT 3
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 3
55447: PUSH
55448: LD_INT 5
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 0
55457: PUSH
55458: LD_INT 3
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 0
55467: PUSH
55468: LD_INT 2
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 1
55477: PUSH
55478: LD_INT 3
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 1
55487: PUSH
55488: LD_INT 4
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 0
55497: PUSH
55498: LD_INT 4
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 1
55507: NEG
55508: PUSH
55509: LD_INT 3
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 1
55518: NEG
55519: PUSH
55520: LD_INT 2
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 2
55529: PUSH
55530: LD_INT 4
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 2
55539: NEG
55540: PUSH
55541: LD_INT 2
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 4
55550: NEG
55551: PUSH
55552: LD_INT 0
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 4
55561: NEG
55562: PUSH
55563: LD_INT 1
55565: NEG
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 3
55573: NEG
55574: PUSH
55575: LD_INT 0
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 3
55584: NEG
55585: PUSH
55586: LD_INT 1
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 4
55595: NEG
55596: PUSH
55597: LD_INT 1
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 5
55606: NEG
55607: PUSH
55608: LD_INT 0
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 5
55617: NEG
55618: PUSH
55619: LD_INT 1
55621: NEG
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 5
55629: NEG
55630: PUSH
55631: LD_INT 2
55633: NEG
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 3
55641: NEG
55642: PUSH
55643: LD_INT 2
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: ST_TO_ADDR
// end ; end ;
55697: GO 55700
55699: POP
// case btype of b_depot , b_warehouse :
55700: LD_VAR 0 1
55704: PUSH
55705: LD_INT 0
55707: DOUBLE
55708: EQUAL
55709: IFTRUE 55719
55711: LD_INT 1
55713: DOUBLE
55714: EQUAL
55715: IFTRUE 55719
55717: GO 55920
55719: POP
// case nation of nation_american :
55720: LD_VAR 0 5
55724: PUSH
55725: LD_INT 1
55727: DOUBLE
55728: EQUAL
55729: IFTRUE 55733
55731: GO 55789
55733: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
55734: LD_ADDR_VAR 0 9
55738: PUSH
55739: LD_VAR 0 11
55743: PUSH
55744: LD_VAR 0 12
55748: PUSH
55749: LD_VAR 0 13
55753: PUSH
55754: LD_VAR 0 14
55758: PUSH
55759: LD_VAR 0 15
55763: PUSH
55764: LD_VAR 0 16
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: PUSH
55777: LD_VAR 0 4
55781: PUSH
55782: LD_INT 1
55784: PLUS
55785: ARRAY
55786: ST_TO_ADDR
55787: GO 55918
55789: LD_INT 2
55791: DOUBLE
55792: EQUAL
55793: IFTRUE 55797
55795: GO 55853
55797: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
55798: LD_ADDR_VAR 0 9
55802: PUSH
55803: LD_VAR 0 17
55807: PUSH
55808: LD_VAR 0 18
55812: PUSH
55813: LD_VAR 0 19
55817: PUSH
55818: LD_VAR 0 20
55822: PUSH
55823: LD_VAR 0 21
55827: PUSH
55828: LD_VAR 0 22
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: PUSH
55841: LD_VAR 0 4
55845: PUSH
55846: LD_INT 1
55848: PLUS
55849: ARRAY
55850: ST_TO_ADDR
55851: GO 55918
55853: LD_INT 3
55855: DOUBLE
55856: EQUAL
55857: IFTRUE 55861
55859: GO 55917
55861: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
55862: LD_ADDR_VAR 0 9
55866: PUSH
55867: LD_VAR 0 23
55871: PUSH
55872: LD_VAR 0 24
55876: PUSH
55877: LD_VAR 0 25
55881: PUSH
55882: LD_VAR 0 26
55886: PUSH
55887: LD_VAR 0 27
55891: PUSH
55892: LD_VAR 0 28
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: PUSH
55905: LD_VAR 0 4
55909: PUSH
55910: LD_INT 1
55912: PLUS
55913: ARRAY
55914: ST_TO_ADDR
55915: GO 55918
55917: POP
55918: GO 56473
55920: LD_INT 2
55922: DOUBLE
55923: EQUAL
55924: IFTRUE 55934
55926: LD_INT 3
55928: DOUBLE
55929: EQUAL
55930: IFTRUE 55934
55932: GO 55990
55934: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
55935: LD_ADDR_VAR 0 9
55939: PUSH
55940: LD_VAR 0 29
55944: PUSH
55945: LD_VAR 0 30
55949: PUSH
55950: LD_VAR 0 31
55954: PUSH
55955: LD_VAR 0 32
55959: PUSH
55960: LD_VAR 0 33
55964: PUSH
55965: LD_VAR 0 34
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: PUSH
55978: LD_VAR 0 4
55982: PUSH
55983: LD_INT 1
55985: PLUS
55986: ARRAY
55987: ST_TO_ADDR
55988: GO 56473
55990: LD_INT 16
55992: DOUBLE
55993: EQUAL
55994: IFTRUE 56052
55996: LD_INT 17
55998: DOUBLE
55999: EQUAL
56000: IFTRUE 56052
56002: LD_INT 18
56004: DOUBLE
56005: EQUAL
56006: IFTRUE 56052
56008: LD_INT 19
56010: DOUBLE
56011: EQUAL
56012: IFTRUE 56052
56014: LD_INT 22
56016: DOUBLE
56017: EQUAL
56018: IFTRUE 56052
56020: LD_INT 20
56022: DOUBLE
56023: EQUAL
56024: IFTRUE 56052
56026: LD_INT 21
56028: DOUBLE
56029: EQUAL
56030: IFTRUE 56052
56032: LD_INT 23
56034: DOUBLE
56035: EQUAL
56036: IFTRUE 56052
56038: LD_INT 24
56040: DOUBLE
56041: EQUAL
56042: IFTRUE 56052
56044: LD_INT 25
56046: DOUBLE
56047: EQUAL
56048: IFTRUE 56052
56050: GO 56108
56052: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56053: LD_ADDR_VAR 0 9
56057: PUSH
56058: LD_VAR 0 35
56062: PUSH
56063: LD_VAR 0 36
56067: PUSH
56068: LD_VAR 0 37
56072: PUSH
56073: LD_VAR 0 38
56077: PUSH
56078: LD_VAR 0 39
56082: PUSH
56083: LD_VAR 0 40
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: PUSH
56096: LD_VAR 0 4
56100: PUSH
56101: LD_INT 1
56103: PLUS
56104: ARRAY
56105: ST_TO_ADDR
56106: GO 56473
56108: LD_INT 6
56110: DOUBLE
56111: EQUAL
56112: IFTRUE 56164
56114: LD_INT 7
56116: DOUBLE
56117: EQUAL
56118: IFTRUE 56164
56120: LD_INT 8
56122: DOUBLE
56123: EQUAL
56124: IFTRUE 56164
56126: LD_INT 13
56128: DOUBLE
56129: EQUAL
56130: IFTRUE 56164
56132: LD_INT 12
56134: DOUBLE
56135: EQUAL
56136: IFTRUE 56164
56138: LD_INT 15
56140: DOUBLE
56141: EQUAL
56142: IFTRUE 56164
56144: LD_INT 11
56146: DOUBLE
56147: EQUAL
56148: IFTRUE 56164
56150: LD_INT 14
56152: DOUBLE
56153: EQUAL
56154: IFTRUE 56164
56156: LD_INT 10
56158: DOUBLE
56159: EQUAL
56160: IFTRUE 56164
56162: GO 56220
56164: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56165: LD_ADDR_VAR 0 9
56169: PUSH
56170: LD_VAR 0 41
56174: PUSH
56175: LD_VAR 0 42
56179: PUSH
56180: LD_VAR 0 43
56184: PUSH
56185: LD_VAR 0 44
56189: PUSH
56190: LD_VAR 0 45
56194: PUSH
56195: LD_VAR 0 46
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: PUSH
56208: LD_VAR 0 4
56212: PUSH
56213: LD_INT 1
56215: PLUS
56216: ARRAY
56217: ST_TO_ADDR
56218: GO 56473
56220: LD_INT 36
56222: DOUBLE
56223: EQUAL
56224: IFTRUE 56228
56226: GO 56284
56228: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56229: LD_ADDR_VAR 0 9
56233: PUSH
56234: LD_VAR 0 47
56238: PUSH
56239: LD_VAR 0 48
56243: PUSH
56244: LD_VAR 0 49
56248: PUSH
56249: LD_VAR 0 50
56253: PUSH
56254: LD_VAR 0 51
56258: PUSH
56259: LD_VAR 0 52
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: PUSH
56272: LD_VAR 0 4
56276: PUSH
56277: LD_INT 1
56279: PLUS
56280: ARRAY
56281: ST_TO_ADDR
56282: GO 56473
56284: LD_INT 4
56286: DOUBLE
56287: EQUAL
56288: IFTRUE 56310
56290: LD_INT 5
56292: DOUBLE
56293: EQUAL
56294: IFTRUE 56310
56296: LD_INT 34
56298: DOUBLE
56299: EQUAL
56300: IFTRUE 56310
56302: LD_INT 37
56304: DOUBLE
56305: EQUAL
56306: IFTRUE 56310
56308: GO 56366
56310: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56311: LD_ADDR_VAR 0 9
56315: PUSH
56316: LD_VAR 0 53
56320: PUSH
56321: LD_VAR 0 54
56325: PUSH
56326: LD_VAR 0 55
56330: PUSH
56331: LD_VAR 0 56
56335: PUSH
56336: LD_VAR 0 57
56340: PUSH
56341: LD_VAR 0 58
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: PUSH
56354: LD_VAR 0 4
56358: PUSH
56359: LD_INT 1
56361: PLUS
56362: ARRAY
56363: ST_TO_ADDR
56364: GO 56473
56366: LD_INT 31
56368: DOUBLE
56369: EQUAL
56370: IFTRUE 56416
56372: LD_INT 32
56374: DOUBLE
56375: EQUAL
56376: IFTRUE 56416
56378: LD_INT 33
56380: DOUBLE
56381: EQUAL
56382: IFTRUE 56416
56384: LD_INT 27
56386: DOUBLE
56387: EQUAL
56388: IFTRUE 56416
56390: LD_INT 26
56392: DOUBLE
56393: EQUAL
56394: IFTRUE 56416
56396: LD_INT 28
56398: DOUBLE
56399: EQUAL
56400: IFTRUE 56416
56402: LD_INT 29
56404: DOUBLE
56405: EQUAL
56406: IFTRUE 56416
56408: LD_INT 30
56410: DOUBLE
56411: EQUAL
56412: IFTRUE 56416
56414: GO 56472
56416: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56417: LD_ADDR_VAR 0 9
56421: PUSH
56422: LD_VAR 0 59
56426: PUSH
56427: LD_VAR 0 60
56431: PUSH
56432: LD_VAR 0 61
56436: PUSH
56437: LD_VAR 0 62
56441: PUSH
56442: LD_VAR 0 63
56446: PUSH
56447: LD_VAR 0 64
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: PUSH
56460: LD_VAR 0 4
56464: PUSH
56465: LD_INT 1
56467: PLUS
56468: ARRAY
56469: ST_TO_ADDR
56470: GO 56473
56472: POP
// temp_list2 = [ ] ;
56473: LD_ADDR_VAR 0 10
56477: PUSH
56478: EMPTY
56479: ST_TO_ADDR
// for i in temp_list do
56480: LD_ADDR_VAR 0 8
56484: PUSH
56485: LD_VAR 0 9
56489: PUSH
56490: FOR_IN
56491: IFFALSE 56543
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56493: LD_ADDR_VAR 0 10
56497: PUSH
56498: LD_VAR 0 10
56502: PUSH
56503: LD_VAR 0 8
56507: PUSH
56508: LD_INT 1
56510: ARRAY
56511: PUSH
56512: LD_VAR 0 2
56516: PLUS
56517: PUSH
56518: LD_VAR 0 8
56522: PUSH
56523: LD_INT 2
56525: ARRAY
56526: PUSH
56527: LD_VAR 0 3
56531: PLUS
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: EMPTY
56538: LIST
56539: ADD
56540: ST_TO_ADDR
56541: GO 56490
56543: POP
56544: POP
// result = temp_list2 ;
56545: LD_ADDR_VAR 0 7
56549: PUSH
56550: LD_VAR 0 10
56554: ST_TO_ADDR
// end ;
56555: LD_VAR 0 7
56559: RET
// export function EnemyInRange ( unit , dist ) ; begin
56560: LD_INT 0
56562: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56563: LD_ADDR_VAR 0 3
56567: PUSH
56568: LD_VAR 0 1
56572: PPUSH
56573: CALL_OW 255
56577: PPUSH
56578: LD_VAR 0 1
56582: PPUSH
56583: CALL_OW 250
56587: PPUSH
56588: LD_VAR 0 1
56592: PPUSH
56593: CALL_OW 251
56597: PPUSH
56598: LD_VAR 0 2
56602: PPUSH
56603: CALL 29817 0 4
56607: PUSH
56608: LD_INT 4
56610: ARRAY
56611: ST_TO_ADDR
// end ;
56612: LD_VAR 0 3
56616: RET
// export function PlayerSeeMe ( unit ) ; begin
56617: LD_INT 0
56619: PPUSH
// result := See ( your_side , unit ) ;
56620: LD_ADDR_VAR 0 2
56624: PUSH
56625: LD_OWVAR 2
56629: PPUSH
56630: LD_VAR 0 1
56634: PPUSH
56635: CALL_OW 292
56639: ST_TO_ADDR
// end ;
56640: LD_VAR 0 2
56644: RET
// export function ReverseDir ( unit ) ; begin
56645: LD_INT 0
56647: PPUSH
// if not unit then
56648: LD_VAR 0 1
56652: NOT
56653: IFFALSE 56657
// exit ;
56655: GO 56680
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56657: LD_ADDR_VAR 0 2
56661: PUSH
56662: LD_VAR 0 1
56666: PPUSH
56667: CALL_OW 254
56671: PUSH
56672: LD_INT 3
56674: PLUS
56675: PUSH
56676: LD_INT 6
56678: MOD
56679: ST_TO_ADDR
// end ;
56680: LD_VAR 0 2
56684: RET
// export function ReverseArray ( array ) ; var i ; begin
56685: LD_INT 0
56687: PPUSH
56688: PPUSH
// if not array then
56689: LD_VAR 0 1
56693: NOT
56694: IFFALSE 56698
// exit ;
56696: GO 56753
// result := [ ] ;
56698: LD_ADDR_VAR 0 2
56702: PUSH
56703: EMPTY
56704: ST_TO_ADDR
// for i := array downto 1 do
56705: LD_ADDR_VAR 0 3
56709: PUSH
56710: DOUBLE
56711: LD_VAR 0 1
56715: INC
56716: ST_TO_ADDR
56717: LD_INT 1
56719: PUSH
56720: FOR_DOWNTO
56721: IFFALSE 56751
// result := Join ( result , array [ i ] ) ;
56723: LD_ADDR_VAR 0 2
56727: PUSH
56728: LD_VAR 0 2
56732: PPUSH
56733: LD_VAR 0 1
56737: PUSH
56738: LD_VAR 0 3
56742: ARRAY
56743: PPUSH
56744: CALL 61595 0 2
56748: ST_TO_ADDR
56749: GO 56720
56751: POP
56752: POP
// end ;
56753: LD_VAR 0 2
56757: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
56758: LD_INT 0
56760: PPUSH
56761: PPUSH
56762: PPUSH
56763: PPUSH
56764: PPUSH
56765: PPUSH
// if not unit or not hexes then
56766: LD_VAR 0 1
56770: NOT
56771: IFTRUE 56780
56773: PUSH
56774: LD_VAR 0 2
56778: NOT
56779: OR
56780: IFFALSE 56784
// exit ;
56782: GO 56907
// dist := 9999 ;
56784: LD_ADDR_VAR 0 5
56788: PUSH
56789: LD_INT 9999
56791: ST_TO_ADDR
// for i = 1 to hexes do
56792: LD_ADDR_VAR 0 4
56796: PUSH
56797: DOUBLE
56798: LD_INT 1
56800: DEC
56801: ST_TO_ADDR
56802: LD_VAR 0 2
56806: PUSH
56807: FOR_TO
56808: IFFALSE 56895
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56810: LD_ADDR_VAR 0 6
56814: PUSH
56815: LD_VAR 0 1
56819: PPUSH
56820: LD_VAR 0 2
56824: PUSH
56825: LD_VAR 0 4
56829: ARRAY
56830: PUSH
56831: LD_INT 1
56833: ARRAY
56834: PPUSH
56835: LD_VAR 0 2
56839: PUSH
56840: LD_VAR 0 4
56844: ARRAY
56845: PUSH
56846: LD_INT 2
56848: ARRAY
56849: PPUSH
56850: CALL_OW 297
56854: ST_TO_ADDR
// if tdist < dist then
56855: LD_VAR 0 6
56859: PUSH
56860: LD_VAR 0 5
56864: LESS
56865: IFFALSE 56893
// begin hex := hexes [ i ] ;
56867: LD_ADDR_VAR 0 8
56871: PUSH
56872: LD_VAR 0 2
56876: PUSH
56877: LD_VAR 0 4
56881: ARRAY
56882: ST_TO_ADDR
// dist := tdist ;
56883: LD_ADDR_VAR 0 5
56887: PUSH
56888: LD_VAR 0 6
56892: ST_TO_ADDR
// end ; end ;
56893: GO 56807
56895: POP
56896: POP
// result := hex ;
56897: LD_ADDR_VAR 0 3
56901: PUSH
56902: LD_VAR 0 8
56906: ST_TO_ADDR
// end ;
56907: LD_VAR 0 3
56911: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
56912: LD_INT 0
56914: PPUSH
56915: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
56916: LD_VAR 0 1
56920: NOT
56921: IFTRUE 56960
56923: PUSH
56924: LD_VAR 0 1
56928: PUSH
56929: LD_INT 21
56931: PUSH
56932: LD_INT 2
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 23
56941: PUSH
56942: LD_INT 2
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PPUSH
56953: CALL_OW 69
56957: IN
56958: NOT
56959: OR
56960: IFFALSE 56964
// exit ;
56962: GO 57011
// for i = 1 to 3 do
56964: LD_ADDR_VAR 0 3
56968: PUSH
56969: DOUBLE
56970: LD_INT 1
56972: DEC
56973: ST_TO_ADDR
56974: LD_INT 3
56976: PUSH
56977: FOR_TO
56978: IFFALSE 57009
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56980: LD_VAR 0 1
56984: PPUSH
56985: CALL_OW 250
56989: PPUSH
56990: LD_VAR 0 1
56994: PPUSH
56995: CALL_OW 251
56999: PPUSH
57000: LD_INT 1
57002: PPUSH
57003: CALL_OW 453
57007: GO 56977
57009: POP
57010: POP
// end ;
57011: LD_VAR 0 2
57015: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57016: LD_INT 0
57018: PPUSH
57019: PPUSH
57020: PPUSH
57021: PPUSH
57022: PPUSH
57023: PPUSH
// if not unit or not enemy_unit then
57024: LD_VAR 0 1
57028: NOT
57029: IFTRUE 57038
57031: PUSH
57032: LD_VAR 0 2
57036: NOT
57037: OR
57038: IFFALSE 57042
// exit ;
57040: GO 57513
// if GetLives ( i ) < 250 then
57042: LD_VAR 0 4
57046: PPUSH
57047: CALL_OW 256
57051: PUSH
57052: LD_INT 250
57054: LESS
57055: IFFALSE 57068
// begin ComAutodestruct ( i ) ;
57057: LD_VAR 0 4
57061: PPUSH
57062: CALL 56912 0 1
// exit ;
57066: GO 57513
// end ; x := GetX ( enemy_unit ) ;
57068: LD_ADDR_VAR 0 7
57072: PUSH
57073: LD_VAR 0 2
57077: PPUSH
57078: CALL_OW 250
57082: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57083: LD_ADDR_VAR 0 8
57087: PUSH
57088: LD_VAR 0 2
57092: PPUSH
57093: CALL_OW 251
57097: ST_TO_ADDR
// if not x or not y then
57098: LD_VAR 0 7
57102: NOT
57103: IFTRUE 57112
57105: PUSH
57106: LD_VAR 0 8
57110: NOT
57111: OR
57112: IFFALSE 57116
// exit ;
57114: GO 57513
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57116: LD_ADDR_VAR 0 6
57120: PUSH
57121: LD_VAR 0 7
57125: PPUSH
57126: LD_INT 0
57128: PPUSH
57129: LD_INT 4
57131: PPUSH
57132: CALL_OW 272
57136: PUSH
57137: LD_VAR 0 8
57141: PPUSH
57142: LD_INT 0
57144: PPUSH
57145: LD_INT 4
57147: PPUSH
57148: CALL_OW 273
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_VAR 0 7
57161: PPUSH
57162: LD_INT 1
57164: PPUSH
57165: LD_INT 4
57167: PPUSH
57168: CALL_OW 272
57172: PUSH
57173: LD_VAR 0 8
57177: PPUSH
57178: LD_INT 1
57180: PPUSH
57181: LD_INT 4
57183: PPUSH
57184: CALL_OW 273
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_VAR 0 7
57197: PPUSH
57198: LD_INT 2
57200: PPUSH
57201: LD_INT 4
57203: PPUSH
57204: CALL_OW 272
57208: PUSH
57209: LD_VAR 0 8
57213: PPUSH
57214: LD_INT 2
57216: PPUSH
57217: LD_INT 4
57219: PPUSH
57220: CALL_OW 273
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_VAR 0 7
57233: PPUSH
57234: LD_INT 3
57236: PPUSH
57237: LD_INT 4
57239: PPUSH
57240: CALL_OW 272
57244: PUSH
57245: LD_VAR 0 8
57249: PPUSH
57250: LD_INT 3
57252: PPUSH
57253: LD_INT 4
57255: PPUSH
57256: CALL_OW 273
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_VAR 0 7
57269: PPUSH
57270: LD_INT 4
57272: PPUSH
57273: LD_INT 4
57275: PPUSH
57276: CALL_OW 272
57280: PUSH
57281: LD_VAR 0 8
57285: PPUSH
57286: LD_INT 4
57288: PPUSH
57289: LD_INT 4
57291: PPUSH
57292: CALL_OW 273
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_VAR 0 7
57305: PPUSH
57306: LD_INT 5
57308: PPUSH
57309: LD_INT 4
57311: PPUSH
57312: CALL_OW 272
57316: PUSH
57317: LD_VAR 0 8
57321: PPUSH
57322: LD_INT 5
57324: PPUSH
57325: LD_INT 4
57327: PPUSH
57328: CALL_OW 273
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: ST_TO_ADDR
// for i = tmp downto 1 do
57345: LD_ADDR_VAR 0 4
57349: PUSH
57350: DOUBLE
57351: LD_VAR 0 6
57355: INC
57356: ST_TO_ADDR
57357: LD_INT 1
57359: PUSH
57360: FOR_DOWNTO
57361: IFFALSE 57464
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57363: LD_VAR 0 6
57367: PUSH
57368: LD_VAR 0 4
57372: ARRAY
57373: PUSH
57374: LD_INT 1
57376: ARRAY
57377: PPUSH
57378: LD_VAR 0 6
57382: PUSH
57383: LD_VAR 0 4
57387: ARRAY
57388: PUSH
57389: LD_INT 2
57391: ARRAY
57392: PPUSH
57393: CALL_OW 488
57397: NOT
57398: IFTRUE 57440
57400: PUSH
57401: LD_VAR 0 6
57405: PUSH
57406: LD_VAR 0 4
57410: ARRAY
57411: PUSH
57412: LD_INT 1
57414: ARRAY
57415: PPUSH
57416: LD_VAR 0 6
57420: PUSH
57421: LD_VAR 0 4
57425: ARRAY
57426: PUSH
57427: LD_INT 2
57429: ARRAY
57430: PPUSH
57431: CALL_OW 428
57435: PUSH
57436: LD_INT 0
57438: NONEQUAL
57439: OR
57440: IFFALSE 57462
// tmp := Delete ( tmp , i ) ;
57442: LD_ADDR_VAR 0 6
57446: PUSH
57447: LD_VAR 0 6
57451: PPUSH
57452: LD_VAR 0 4
57456: PPUSH
57457: CALL_OW 3
57461: ST_TO_ADDR
57462: GO 57360
57464: POP
57465: POP
// j := GetClosestHex ( unit , tmp ) ;
57466: LD_ADDR_VAR 0 5
57470: PUSH
57471: LD_VAR 0 1
57475: PPUSH
57476: LD_VAR 0 6
57480: PPUSH
57481: CALL 56758 0 2
57485: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57486: LD_VAR 0 1
57490: PPUSH
57491: LD_VAR 0 5
57495: PUSH
57496: LD_INT 1
57498: ARRAY
57499: PPUSH
57500: LD_VAR 0 5
57504: PUSH
57505: LD_INT 2
57507: ARRAY
57508: PPUSH
57509: CALL_OW 111
// end ;
57513: LD_VAR 0 3
57517: RET
// export function PrepareApemanSoldier ( ) ; begin
57518: LD_INT 0
57520: PPUSH
// uc_nation := 0 ;
57521: LD_ADDR_OWVAR 21
57525: PUSH
57526: LD_INT 0
57528: ST_TO_ADDR
// hc_sex := sex_male ;
57529: LD_ADDR_OWVAR 27
57533: PUSH
57534: LD_INT 1
57536: ST_TO_ADDR
// hc_name :=  ;
57537: LD_ADDR_OWVAR 26
57541: PUSH
57542: LD_STRING 
57544: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
57545: LD_ADDR_OWVAR 28
57549: PUSH
57550: LD_INT 15
57552: ST_TO_ADDR
// hc_gallery :=  ;
57553: LD_ADDR_OWVAR 33
57557: PUSH
57558: LD_STRING 
57560: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57561: LD_ADDR_OWVAR 31
57565: PUSH
57566: LD_INT 0
57568: PPUSH
57569: LD_INT 3
57571: PPUSH
57572: CALL_OW 12
57576: PUSH
57577: LD_INT 0
57579: PPUSH
57580: LD_INT 3
57582: PPUSH
57583: CALL_OW 12
57587: PUSH
57588: LD_INT 0
57590: PUSH
57591: LD_INT 0
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
57600: LD_ADDR_OWVAR 29
57604: PUSH
57605: LD_INT 12
57607: PUSH
57608: LD_INT 12
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: ST_TO_ADDR
// end ;
57615: LD_VAR 0 1
57619: RET
// export function PrepareApemanEngineer ( ) ; begin
57620: LD_INT 0
57622: PPUSH
// uc_nation := 0 ;
57623: LD_ADDR_OWVAR 21
57627: PUSH
57628: LD_INT 0
57630: ST_TO_ADDR
// hc_sex := sex_male ;
57631: LD_ADDR_OWVAR 27
57635: PUSH
57636: LD_INT 1
57638: ST_TO_ADDR
// hc_name :=  ;
57639: LD_ADDR_OWVAR 26
57643: PUSH
57644: LD_STRING 
57646: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
57647: LD_ADDR_OWVAR 28
57651: PUSH
57652: LD_INT 16
57654: ST_TO_ADDR
// hc_gallery :=  ;
57655: LD_ADDR_OWVAR 33
57659: PUSH
57660: LD_STRING 
57662: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57663: LD_ADDR_OWVAR 31
57667: PUSH
57668: LD_INT 0
57670: PPUSH
57671: LD_INT 3
57673: PPUSH
57674: CALL_OW 12
57678: PUSH
57679: LD_INT 0
57681: PPUSH
57682: LD_INT 3
57684: PPUSH
57685: CALL_OW 12
57689: PUSH
57690: LD_INT 0
57692: PUSH
57693: LD_INT 0
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
57702: LD_ADDR_OWVAR 29
57706: PUSH
57707: LD_INT 12
57709: PUSH
57710: LD_INT 12
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: ST_TO_ADDR
// end ;
57717: LD_VAR 0 1
57721: RET
// export function PrepareApeman ( agressivity ) ; begin
57722: LD_INT 0
57724: PPUSH
// uc_side := 0 ;
57725: LD_ADDR_OWVAR 20
57729: PUSH
57730: LD_INT 0
57732: ST_TO_ADDR
// uc_nation := 0 ;
57733: LD_ADDR_OWVAR 21
57737: PUSH
57738: LD_INT 0
57740: ST_TO_ADDR
// hc_sex := sex_male ;
57741: LD_ADDR_OWVAR 27
57745: PUSH
57746: LD_INT 1
57748: ST_TO_ADDR
// hc_class := class_apeman ;
57749: LD_ADDR_OWVAR 28
57753: PUSH
57754: LD_INT 12
57756: ST_TO_ADDR
// hc_gallery :=  ;
57757: LD_ADDR_OWVAR 33
57761: PUSH
57762: LD_STRING 
57764: ST_TO_ADDR
// hc_name :=  ;
57765: LD_ADDR_OWVAR 26
57769: PUSH
57770: LD_STRING 
57772: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
57773: LD_ADDR_OWVAR 29
57777: PUSH
57778: LD_INT 12
57780: PUSH
57781: LD_INT 12
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: ST_TO_ADDR
// if agressivity = 0 then
57788: LD_VAR 0 1
57792: PUSH
57793: LD_INT 0
57795: EQUAL
57796: IFFALSE 57808
// hc_agressivity := 0 else
57798: LD_ADDR_OWVAR 35
57802: PUSH
57803: LD_INT 0
57805: ST_TO_ADDR
57806: GO 57829
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57808: LD_ADDR_OWVAR 35
57812: PUSH
57813: LD_VAR 0 1
57817: NEG
57818: PPUSH
57819: LD_VAR 0 1
57823: PPUSH
57824: CALL_OW 12
57828: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57829: LD_ADDR_OWVAR 31
57833: PUSH
57834: LD_INT 0
57836: PPUSH
57837: LD_INT 3
57839: PPUSH
57840: CALL_OW 12
57844: PUSH
57845: LD_INT 0
57847: PPUSH
57848: LD_INT 3
57850: PPUSH
57851: CALL_OW 12
57855: PUSH
57856: LD_INT 0
57858: PUSH
57859: LD_INT 0
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: ST_TO_ADDR
// end ;
57868: LD_VAR 0 2
57872: RET
// export function PrepareTiger ( agressivity ) ; begin
57873: LD_INT 0
57875: PPUSH
// uc_side := 0 ;
57876: LD_ADDR_OWVAR 20
57880: PUSH
57881: LD_INT 0
57883: ST_TO_ADDR
// uc_nation := 0 ;
57884: LD_ADDR_OWVAR 21
57888: PUSH
57889: LD_INT 0
57891: ST_TO_ADDR
// InitHc ;
57892: CALL_OW 19
// hc_class := class_tiger ;
57896: LD_ADDR_OWVAR 28
57900: PUSH
57901: LD_INT 14
57903: ST_TO_ADDR
// hc_gallery :=  ;
57904: LD_ADDR_OWVAR 33
57908: PUSH
57909: LD_STRING 
57911: ST_TO_ADDR
// hc_name :=  ;
57912: LD_ADDR_OWVAR 26
57916: PUSH
57917: LD_STRING 
57919: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57920: LD_ADDR_OWVAR 35
57924: PUSH
57925: LD_VAR 0 1
57929: NEG
57930: PPUSH
57931: LD_VAR 0 1
57935: PPUSH
57936: CALL_OW 12
57940: ST_TO_ADDR
// end ;
57941: LD_VAR 0 2
57945: RET
// export function PrepareEnchidna ( ) ; begin
57946: LD_INT 0
57948: PPUSH
// uc_side := 0 ;
57949: LD_ADDR_OWVAR 20
57953: PUSH
57954: LD_INT 0
57956: ST_TO_ADDR
// uc_nation := 0 ;
57957: LD_ADDR_OWVAR 21
57961: PUSH
57962: LD_INT 0
57964: ST_TO_ADDR
// InitHc ;
57965: CALL_OW 19
// hc_class := class_baggie ;
57969: LD_ADDR_OWVAR 28
57973: PUSH
57974: LD_INT 13
57976: ST_TO_ADDR
// hc_gallery :=  ;
57977: LD_ADDR_OWVAR 33
57981: PUSH
57982: LD_STRING 
57984: ST_TO_ADDR
// hc_name :=  ;
57985: LD_ADDR_OWVAR 26
57989: PUSH
57990: LD_STRING 
57992: ST_TO_ADDR
// end ;
57993: LD_VAR 0 1
57997: RET
// export function PrepareFrog ( ) ; begin
57998: LD_INT 0
58000: PPUSH
// uc_side := 0 ;
58001: LD_ADDR_OWVAR 20
58005: PUSH
58006: LD_INT 0
58008: ST_TO_ADDR
// uc_nation := 0 ;
58009: LD_ADDR_OWVAR 21
58013: PUSH
58014: LD_INT 0
58016: ST_TO_ADDR
// InitHc ;
58017: CALL_OW 19
// hc_class := class_frog ;
58021: LD_ADDR_OWVAR 28
58025: PUSH
58026: LD_INT 19
58028: ST_TO_ADDR
// hc_gallery :=  ;
58029: LD_ADDR_OWVAR 33
58033: PUSH
58034: LD_STRING 
58036: ST_TO_ADDR
// hc_name :=  ;
58037: LD_ADDR_OWVAR 26
58041: PUSH
58042: LD_STRING 
58044: ST_TO_ADDR
// end ;
58045: LD_VAR 0 1
58049: RET
// export function PrepareFish ( ) ; begin
58050: LD_INT 0
58052: PPUSH
// uc_side := 0 ;
58053: LD_ADDR_OWVAR 20
58057: PUSH
58058: LD_INT 0
58060: ST_TO_ADDR
// uc_nation := 0 ;
58061: LD_ADDR_OWVAR 21
58065: PUSH
58066: LD_INT 0
58068: ST_TO_ADDR
// InitHc ;
58069: CALL_OW 19
// hc_class := class_fish ;
58073: LD_ADDR_OWVAR 28
58077: PUSH
58078: LD_INT 20
58080: ST_TO_ADDR
// hc_gallery :=  ;
58081: LD_ADDR_OWVAR 33
58085: PUSH
58086: LD_STRING 
58088: ST_TO_ADDR
// hc_name :=  ;
58089: LD_ADDR_OWVAR 26
58093: PUSH
58094: LD_STRING 
58096: ST_TO_ADDR
// end ;
58097: LD_VAR 0 1
58101: RET
// export function PrepareBird ( ) ; begin
58102: LD_INT 0
58104: PPUSH
// uc_side := 0 ;
58105: LD_ADDR_OWVAR 20
58109: PUSH
58110: LD_INT 0
58112: ST_TO_ADDR
// uc_nation := 0 ;
58113: LD_ADDR_OWVAR 21
58117: PUSH
58118: LD_INT 0
58120: ST_TO_ADDR
// InitHc ;
58121: CALL_OW 19
// hc_class := class_phororhacos ;
58125: LD_ADDR_OWVAR 28
58129: PUSH
58130: LD_INT 18
58132: ST_TO_ADDR
// hc_gallery :=  ;
58133: LD_ADDR_OWVAR 33
58137: PUSH
58138: LD_STRING 
58140: ST_TO_ADDR
// hc_name :=  ;
58141: LD_ADDR_OWVAR 26
58145: PUSH
58146: LD_STRING 
58148: ST_TO_ADDR
// end ;
58149: LD_VAR 0 1
58153: RET
// export function PrepareHorse ( ) ; begin
58154: LD_INT 0
58156: PPUSH
// uc_side := 0 ;
58157: LD_ADDR_OWVAR 20
58161: PUSH
58162: LD_INT 0
58164: ST_TO_ADDR
// uc_nation := 0 ;
58165: LD_ADDR_OWVAR 21
58169: PUSH
58170: LD_INT 0
58172: ST_TO_ADDR
// InitHc ;
58173: CALL_OW 19
// hc_class := class_horse ;
58177: LD_ADDR_OWVAR 28
58181: PUSH
58182: LD_INT 21
58184: ST_TO_ADDR
// hc_gallery :=  ;
58185: LD_ADDR_OWVAR 33
58189: PUSH
58190: LD_STRING 
58192: ST_TO_ADDR
// hc_name :=  ;
58193: LD_ADDR_OWVAR 26
58197: PUSH
58198: LD_STRING 
58200: ST_TO_ADDR
// end ;
58201: LD_VAR 0 1
58205: RET
// export function PrepareMastodont ( ) ; begin
58206: LD_INT 0
58208: PPUSH
// uc_side := 0 ;
58209: LD_ADDR_OWVAR 20
58213: PUSH
58214: LD_INT 0
58216: ST_TO_ADDR
// uc_nation := 0 ;
58217: LD_ADDR_OWVAR 21
58221: PUSH
58222: LD_INT 0
58224: ST_TO_ADDR
// vc_chassis := class_mastodont ;
58225: LD_ADDR_OWVAR 37
58229: PUSH
58230: LD_INT 31
58232: ST_TO_ADDR
// vc_control := control_rider ;
58233: LD_ADDR_OWVAR 38
58237: PUSH
58238: LD_INT 4
58240: ST_TO_ADDR
// end ;
58241: LD_VAR 0 1
58245: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58246: LD_INT 0
58248: PPUSH
58249: PPUSH
58250: PPUSH
// uc_side = 0 ;
58251: LD_ADDR_OWVAR 20
58255: PUSH
58256: LD_INT 0
58258: ST_TO_ADDR
// uc_nation = 0 ;
58259: LD_ADDR_OWVAR 21
58263: PUSH
58264: LD_INT 0
58266: ST_TO_ADDR
// InitHc_All ( ) ;
58267: CALL_OW 584
// InitVc ;
58271: CALL_OW 20
// if mastodonts then
58275: LD_VAR 0 6
58279: IFFALSE 58346
// for i = 1 to mastodonts do
58281: LD_ADDR_VAR 0 11
58285: PUSH
58286: DOUBLE
58287: LD_INT 1
58289: DEC
58290: ST_TO_ADDR
58291: LD_VAR 0 6
58295: PUSH
58296: FOR_TO
58297: IFFALSE 58344
// begin vc_chassis := 31 ;
58299: LD_ADDR_OWVAR 37
58303: PUSH
58304: LD_INT 31
58306: ST_TO_ADDR
// vc_control := control_rider ;
58307: LD_ADDR_OWVAR 38
58311: PUSH
58312: LD_INT 4
58314: ST_TO_ADDR
// animal := CreateVehicle ;
58315: LD_ADDR_VAR 0 12
58319: PUSH
58320: CALL_OW 45
58324: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58325: LD_VAR 0 12
58329: PPUSH
58330: LD_VAR 0 8
58334: PPUSH
58335: LD_INT 0
58337: PPUSH
58338: CALL 60488 0 3
// end ;
58342: GO 58296
58344: POP
58345: POP
// if horses then
58346: LD_VAR 0 5
58350: IFFALSE 58417
// for i = 1 to horses do
58352: LD_ADDR_VAR 0 11
58356: PUSH
58357: DOUBLE
58358: LD_INT 1
58360: DEC
58361: ST_TO_ADDR
58362: LD_VAR 0 5
58366: PUSH
58367: FOR_TO
58368: IFFALSE 58415
// begin hc_class := 21 ;
58370: LD_ADDR_OWVAR 28
58374: PUSH
58375: LD_INT 21
58377: ST_TO_ADDR
// hc_gallery :=  ;
58378: LD_ADDR_OWVAR 33
58382: PUSH
58383: LD_STRING 
58385: ST_TO_ADDR
// animal := CreateHuman ;
58386: LD_ADDR_VAR 0 12
58390: PUSH
58391: CALL_OW 44
58395: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58396: LD_VAR 0 12
58400: PPUSH
58401: LD_VAR 0 8
58405: PPUSH
58406: LD_INT 0
58408: PPUSH
58409: CALL 60488 0 3
// end ;
58413: GO 58367
58415: POP
58416: POP
// if birds then
58417: LD_VAR 0 1
58421: IFFALSE 58488
// for i = 1 to birds do
58423: LD_ADDR_VAR 0 11
58427: PUSH
58428: DOUBLE
58429: LD_INT 1
58431: DEC
58432: ST_TO_ADDR
58433: LD_VAR 0 1
58437: PUSH
58438: FOR_TO
58439: IFFALSE 58486
// begin hc_class := 18 ;
58441: LD_ADDR_OWVAR 28
58445: PUSH
58446: LD_INT 18
58448: ST_TO_ADDR
// hc_gallery =  ;
58449: LD_ADDR_OWVAR 33
58453: PUSH
58454: LD_STRING 
58456: ST_TO_ADDR
// animal := CreateHuman ;
58457: LD_ADDR_VAR 0 12
58461: PUSH
58462: CALL_OW 44
58466: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58467: LD_VAR 0 12
58471: PPUSH
58472: LD_VAR 0 8
58476: PPUSH
58477: LD_INT 0
58479: PPUSH
58480: CALL 60488 0 3
// end ;
58484: GO 58438
58486: POP
58487: POP
// if tigers then
58488: LD_VAR 0 2
58492: IFFALSE 58576
// for i = 1 to tigers do
58494: LD_ADDR_VAR 0 11
58498: PUSH
58499: DOUBLE
58500: LD_INT 1
58502: DEC
58503: ST_TO_ADDR
58504: LD_VAR 0 2
58508: PUSH
58509: FOR_TO
58510: IFFALSE 58574
// begin hc_class = class_tiger ;
58512: LD_ADDR_OWVAR 28
58516: PUSH
58517: LD_INT 14
58519: ST_TO_ADDR
// hc_gallery =  ;
58520: LD_ADDR_OWVAR 33
58524: PUSH
58525: LD_STRING 
58527: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58528: LD_ADDR_OWVAR 35
58532: PUSH
58533: LD_INT 7
58535: NEG
58536: PPUSH
58537: LD_INT 7
58539: PPUSH
58540: CALL_OW 12
58544: ST_TO_ADDR
// animal := CreateHuman ;
58545: LD_ADDR_VAR 0 12
58549: PUSH
58550: CALL_OW 44
58554: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58555: LD_VAR 0 12
58559: PPUSH
58560: LD_VAR 0 8
58564: PPUSH
58565: LD_INT 0
58567: PPUSH
58568: CALL 60488 0 3
// end ;
58572: GO 58509
58574: POP
58575: POP
// if apemans then
58576: LD_VAR 0 3
58580: IFFALSE 58703
// for i = 1 to apemans do
58582: LD_ADDR_VAR 0 11
58586: PUSH
58587: DOUBLE
58588: LD_INT 1
58590: DEC
58591: ST_TO_ADDR
58592: LD_VAR 0 3
58596: PUSH
58597: FOR_TO
58598: IFFALSE 58701
// begin hc_class = class_apeman ;
58600: LD_ADDR_OWVAR 28
58604: PUSH
58605: LD_INT 12
58607: ST_TO_ADDR
// hc_gallery =  ;
58608: LD_ADDR_OWVAR 33
58612: PUSH
58613: LD_STRING 
58615: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58616: LD_ADDR_OWVAR 35
58620: PUSH
58621: LD_INT 2
58623: NEG
58624: PPUSH
58625: LD_INT 2
58627: PPUSH
58628: CALL_OW 12
58632: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58633: LD_ADDR_OWVAR 31
58637: PUSH
58638: LD_INT 1
58640: PPUSH
58641: LD_INT 3
58643: PPUSH
58644: CALL_OW 12
58648: PUSH
58649: LD_INT 1
58651: PPUSH
58652: LD_INT 3
58654: PPUSH
58655: CALL_OW 12
58659: PUSH
58660: LD_INT 0
58662: PUSH
58663: LD_INT 0
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: ST_TO_ADDR
// animal := CreateHuman ;
58672: LD_ADDR_VAR 0 12
58676: PUSH
58677: CALL_OW 44
58681: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58682: LD_VAR 0 12
58686: PPUSH
58687: LD_VAR 0 8
58691: PPUSH
58692: LD_INT 0
58694: PPUSH
58695: CALL 60488 0 3
// end ;
58699: GO 58597
58701: POP
58702: POP
// if enchidnas then
58703: LD_VAR 0 4
58707: IFFALSE 58774
// for i = 1 to enchidnas do
58709: LD_ADDR_VAR 0 11
58713: PUSH
58714: DOUBLE
58715: LD_INT 1
58717: DEC
58718: ST_TO_ADDR
58719: LD_VAR 0 4
58723: PUSH
58724: FOR_TO
58725: IFFALSE 58772
// begin hc_class = 13 ;
58727: LD_ADDR_OWVAR 28
58731: PUSH
58732: LD_INT 13
58734: ST_TO_ADDR
// hc_gallery =  ;
58735: LD_ADDR_OWVAR 33
58739: PUSH
58740: LD_STRING 
58742: ST_TO_ADDR
// animal := CreateHuman ;
58743: LD_ADDR_VAR 0 12
58747: PUSH
58748: CALL_OW 44
58752: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58753: LD_VAR 0 12
58757: PPUSH
58758: LD_VAR 0 8
58762: PPUSH
58763: LD_INT 0
58765: PPUSH
58766: CALL 60488 0 3
// end ;
58770: GO 58724
58772: POP
58773: POP
// if fishes then
58774: LD_VAR 0 7
58778: IFFALSE 58845
// for i = 1 to fishes do
58780: LD_ADDR_VAR 0 11
58784: PUSH
58785: DOUBLE
58786: LD_INT 1
58788: DEC
58789: ST_TO_ADDR
58790: LD_VAR 0 7
58794: PUSH
58795: FOR_TO
58796: IFFALSE 58843
// begin hc_class = 20 ;
58798: LD_ADDR_OWVAR 28
58802: PUSH
58803: LD_INT 20
58805: ST_TO_ADDR
// hc_gallery =  ;
58806: LD_ADDR_OWVAR 33
58810: PUSH
58811: LD_STRING 
58813: ST_TO_ADDR
// animal := CreateHuman ;
58814: LD_ADDR_VAR 0 12
58818: PUSH
58819: CALL_OW 44
58823: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58824: LD_VAR 0 12
58828: PPUSH
58829: LD_VAR 0 9
58833: PPUSH
58834: LD_INT 0
58836: PPUSH
58837: CALL 60488 0 3
// end ;
58841: GO 58795
58843: POP
58844: POP
// end ;
58845: LD_VAR 0 10
58849: RET
// export function WantHeal ( sci , unit ) ; begin
58850: LD_INT 0
58852: PPUSH
// if GetTaskList ( sci ) > 0 then
58853: LD_VAR 0 1
58857: PPUSH
58858: CALL_OW 437
58862: PUSH
58863: LD_INT 0
58865: GREATER
58866: IFFALSE 58938
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58868: LD_VAR 0 1
58872: PPUSH
58873: CALL_OW 437
58877: PUSH
58878: LD_INT 1
58880: ARRAY
58881: PUSH
58882: LD_INT 1
58884: ARRAY
58885: PUSH
58886: LD_STRING l
58888: EQUAL
58889: IFFALSE 58916
58891: PUSH
58892: LD_VAR 0 1
58896: PPUSH
58897: CALL_OW 437
58901: PUSH
58902: LD_INT 1
58904: ARRAY
58905: PUSH
58906: LD_INT 4
58908: ARRAY
58909: PUSH
58910: LD_VAR 0 2
58914: EQUAL
58915: AND
58916: IFFALSE 58928
// result := true else
58918: LD_ADDR_VAR 0 3
58922: PUSH
58923: LD_INT 1
58925: ST_TO_ADDR
58926: GO 58936
// result := false ;
58928: LD_ADDR_VAR 0 3
58932: PUSH
58933: LD_INT 0
58935: ST_TO_ADDR
// end else
58936: GO 58946
// result := false ;
58938: LD_ADDR_VAR 0 3
58942: PUSH
58943: LD_INT 0
58945: ST_TO_ADDR
// end ;
58946: LD_VAR 0 3
58950: RET
// export function HealTarget ( sci ) ; begin
58951: LD_INT 0
58953: PPUSH
// if not sci then
58954: LD_VAR 0 1
58958: NOT
58959: IFFALSE 58963
// exit ;
58961: GO 59028
// result := 0 ;
58963: LD_ADDR_VAR 0 2
58967: PUSH
58968: LD_INT 0
58970: ST_TO_ADDR
// if GetTaskList ( sci ) then
58971: LD_VAR 0 1
58975: PPUSH
58976: CALL_OW 437
58980: IFFALSE 59028
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58982: LD_VAR 0 1
58986: PPUSH
58987: CALL_OW 437
58991: PUSH
58992: LD_INT 1
58994: ARRAY
58995: PUSH
58996: LD_INT 1
58998: ARRAY
58999: PUSH
59000: LD_STRING l
59002: EQUAL
59003: IFFALSE 59028
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59005: LD_ADDR_VAR 0 2
59009: PUSH
59010: LD_VAR 0 1
59014: PPUSH
59015: CALL_OW 437
59019: PUSH
59020: LD_INT 1
59022: ARRAY
59023: PUSH
59024: LD_INT 4
59026: ARRAY
59027: ST_TO_ADDR
// end ;
59028: LD_VAR 0 2
59032: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59033: LD_INT 0
59035: PPUSH
59036: PPUSH
59037: PPUSH
59038: PPUSH
// if not base_units then
59039: LD_VAR 0 1
59043: NOT
59044: IFFALSE 59048
// exit ;
59046: GO 59135
// result := false ;
59048: LD_ADDR_VAR 0 2
59052: PUSH
59053: LD_INT 0
59055: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59056: LD_ADDR_VAR 0 5
59060: PUSH
59061: LD_VAR 0 1
59065: PPUSH
59066: LD_INT 21
59068: PUSH
59069: LD_INT 3
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PPUSH
59076: CALL_OW 72
59080: ST_TO_ADDR
// if not tmp then
59081: LD_VAR 0 5
59085: NOT
59086: IFFALSE 59090
// exit ;
59088: GO 59135
// for i in tmp do
59090: LD_ADDR_VAR 0 3
59094: PUSH
59095: LD_VAR 0 5
59099: PUSH
59100: FOR_IN
59101: IFFALSE 59133
// begin result := EnemyInRange ( i , 22 ) ;
59103: LD_ADDR_VAR 0 2
59107: PUSH
59108: LD_VAR 0 3
59112: PPUSH
59113: LD_INT 22
59115: PPUSH
59116: CALL 56560 0 2
59120: ST_TO_ADDR
// if result then
59121: LD_VAR 0 2
59125: IFFALSE 59131
// exit ;
59127: POP
59128: POP
59129: GO 59135
// end ;
59131: GO 59100
59133: POP
59134: POP
// end ;
59135: LD_VAR 0 2
59139: RET
// export function FilterByTag ( units , tag ) ; begin
59140: LD_INT 0
59142: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
59143: LD_ADDR_VAR 0 3
59147: PUSH
59148: LD_VAR 0 1
59152: PPUSH
59153: LD_INT 120
59155: PUSH
59156: LD_VAR 0 2
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PPUSH
59165: CALL_OW 72
59169: ST_TO_ADDR
// end ;
59170: LD_VAR 0 3
59174: RET
// export function IsDriver ( un ) ; begin
59175: LD_INT 0
59177: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59178: LD_ADDR_VAR 0 2
59182: PUSH
59183: LD_VAR 0 1
59187: PUSH
59188: LD_INT 55
59190: PUSH
59191: EMPTY
59192: LIST
59193: PPUSH
59194: CALL_OW 69
59198: IN
59199: ST_TO_ADDR
// end ;
59200: LD_VAR 0 2
59204: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59205: LD_INT 0
59207: PPUSH
59208: PPUSH
// list := [ ] ;
59209: LD_ADDR_VAR 0 5
59213: PUSH
59214: EMPTY
59215: ST_TO_ADDR
// case d of 0 :
59216: LD_VAR 0 3
59220: PUSH
59221: LD_INT 0
59223: DOUBLE
59224: EQUAL
59225: IFTRUE 59229
59227: GO 59362
59229: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59230: LD_ADDR_VAR 0 5
59234: PUSH
59235: LD_VAR 0 1
59239: PUSH
59240: LD_INT 4
59242: MINUS
59243: PUSH
59244: LD_VAR 0 2
59248: PUSH
59249: LD_INT 4
59251: MINUS
59252: PUSH
59253: LD_INT 2
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: LIST
59260: PUSH
59261: LD_VAR 0 1
59265: PUSH
59266: LD_INT 3
59268: MINUS
59269: PUSH
59270: LD_VAR 0 2
59274: PUSH
59275: LD_INT 1
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: LIST
59282: PUSH
59283: LD_VAR 0 1
59287: PUSH
59288: LD_INT 4
59290: PLUS
59291: PUSH
59292: LD_VAR 0 2
59296: PUSH
59297: LD_INT 4
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: LIST
59304: PUSH
59305: LD_VAR 0 1
59309: PUSH
59310: LD_INT 3
59312: PLUS
59313: PUSH
59314: LD_VAR 0 2
59318: PUSH
59319: LD_INT 3
59321: PLUS
59322: PUSH
59323: LD_INT 5
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: LIST
59330: PUSH
59331: LD_VAR 0 1
59335: PUSH
59336: LD_VAR 0 2
59340: PUSH
59341: LD_INT 4
59343: PLUS
59344: PUSH
59345: LD_INT 0
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: LIST
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: ST_TO_ADDR
// end ; 1 :
59360: GO 60060
59362: LD_INT 1
59364: DOUBLE
59365: EQUAL
59366: IFTRUE 59370
59368: GO 59503
59370: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59371: LD_ADDR_VAR 0 5
59375: PUSH
59376: LD_VAR 0 1
59380: PUSH
59381: LD_VAR 0 2
59385: PUSH
59386: LD_INT 4
59388: MINUS
59389: PUSH
59390: LD_INT 3
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: LIST
59397: PUSH
59398: LD_VAR 0 1
59402: PUSH
59403: LD_INT 3
59405: MINUS
59406: PUSH
59407: LD_VAR 0 2
59411: PUSH
59412: LD_INT 3
59414: MINUS
59415: PUSH
59416: LD_INT 2
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: LIST
59423: PUSH
59424: LD_VAR 0 1
59428: PUSH
59429: LD_INT 4
59431: MINUS
59432: PUSH
59433: LD_VAR 0 2
59437: PUSH
59438: LD_INT 1
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: LIST
59445: PUSH
59446: LD_VAR 0 1
59450: PUSH
59451: LD_VAR 0 2
59455: PUSH
59456: LD_INT 3
59458: PLUS
59459: PUSH
59460: LD_INT 0
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: LIST
59467: PUSH
59468: LD_VAR 0 1
59472: PUSH
59473: LD_INT 4
59475: PLUS
59476: PUSH
59477: LD_VAR 0 2
59481: PUSH
59482: LD_INT 4
59484: PLUS
59485: PUSH
59486: LD_INT 5
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: LIST
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: ST_TO_ADDR
// end ; 2 :
59501: GO 60060
59503: LD_INT 2
59505: DOUBLE
59506: EQUAL
59507: IFTRUE 59511
59509: GO 59640
59511: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59512: LD_ADDR_VAR 0 5
59516: PUSH
59517: LD_VAR 0 1
59521: PUSH
59522: LD_VAR 0 2
59526: PUSH
59527: LD_INT 3
59529: MINUS
59530: PUSH
59531: LD_INT 3
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: LIST
59538: PUSH
59539: LD_VAR 0 1
59543: PUSH
59544: LD_INT 4
59546: PLUS
59547: PUSH
59548: LD_VAR 0 2
59552: PUSH
59553: LD_INT 4
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: LIST
59560: PUSH
59561: LD_VAR 0 1
59565: PUSH
59566: LD_VAR 0 2
59570: PUSH
59571: LD_INT 4
59573: PLUS
59574: PUSH
59575: LD_INT 0
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: LIST
59582: PUSH
59583: LD_VAR 0 1
59587: PUSH
59588: LD_INT 3
59590: MINUS
59591: PUSH
59592: LD_VAR 0 2
59596: PUSH
59597: LD_INT 1
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: LIST
59604: PUSH
59605: LD_VAR 0 1
59609: PUSH
59610: LD_INT 4
59612: MINUS
59613: PUSH
59614: LD_VAR 0 2
59618: PUSH
59619: LD_INT 4
59621: MINUS
59622: PUSH
59623: LD_INT 2
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: LIST
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: ST_TO_ADDR
// end ; 3 :
59638: GO 60060
59640: LD_INT 3
59642: DOUBLE
59643: EQUAL
59644: IFTRUE 59648
59646: GO 59781
59648: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59649: LD_ADDR_VAR 0 5
59653: PUSH
59654: LD_VAR 0 1
59658: PUSH
59659: LD_INT 3
59661: PLUS
59662: PUSH
59663: LD_VAR 0 2
59667: PUSH
59668: LD_INT 4
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: LIST
59675: PUSH
59676: LD_VAR 0 1
59680: PUSH
59681: LD_INT 4
59683: PLUS
59684: PUSH
59685: LD_VAR 0 2
59689: PUSH
59690: LD_INT 4
59692: PLUS
59693: PUSH
59694: LD_INT 5
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: LIST
59701: PUSH
59702: LD_VAR 0 1
59706: PUSH
59707: LD_INT 4
59709: MINUS
59710: PUSH
59711: LD_VAR 0 2
59715: PUSH
59716: LD_INT 1
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: LIST
59723: PUSH
59724: LD_VAR 0 1
59728: PUSH
59729: LD_VAR 0 2
59733: PUSH
59734: LD_INT 4
59736: MINUS
59737: PUSH
59738: LD_INT 3
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: LIST
59745: PUSH
59746: LD_VAR 0 1
59750: PUSH
59751: LD_INT 3
59753: MINUS
59754: PUSH
59755: LD_VAR 0 2
59759: PUSH
59760: LD_INT 3
59762: MINUS
59763: PUSH
59764: LD_INT 2
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: LIST
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: ST_TO_ADDR
// end ; 4 :
59779: GO 60060
59781: LD_INT 4
59783: DOUBLE
59784: EQUAL
59785: IFTRUE 59789
59787: GO 59922
59789: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59790: LD_ADDR_VAR 0 5
59794: PUSH
59795: LD_VAR 0 1
59799: PUSH
59800: LD_VAR 0 2
59804: PUSH
59805: LD_INT 4
59807: PLUS
59808: PUSH
59809: LD_INT 0
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: LIST
59816: PUSH
59817: LD_VAR 0 1
59821: PUSH
59822: LD_INT 3
59824: PLUS
59825: PUSH
59826: LD_VAR 0 2
59830: PUSH
59831: LD_INT 3
59833: PLUS
59834: PUSH
59835: LD_INT 5
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: LIST
59842: PUSH
59843: LD_VAR 0 1
59847: PUSH
59848: LD_INT 4
59850: PLUS
59851: PUSH
59852: LD_VAR 0 2
59856: PUSH
59857: LD_INT 4
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: LIST
59864: PUSH
59865: LD_VAR 0 1
59869: PUSH
59870: LD_VAR 0 2
59874: PUSH
59875: LD_INT 3
59877: MINUS
59878: PUSH
59879: LD_INT 3
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: LIST
59886: PUSH
59887: LD_VAR 0 1
59891: PUSH
59892: LD_INT 4
59894: MINUS
59895: PUSH
59896: LD_VAR 0 2
59900: PUSH
59901: LD_INT 4
59903: MINUS
59904: PUSH
59905: LD_INT 2
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: LIST
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: ST_TO_ADDR
// end ; 5 :
59920: GO 60060
59922: LD_INT 5
59924: DOUBLE
59925: EQUAL
59926: IFTRUE 59930
59928: GO 60059
59930: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59931: LD_ADDR_VAR 0 5
59935: PUSH
59936: LD_VAR 0 1
59940: PUSH
59941: LD_INT 4
59943: MINUS
59944: PUSH
59945: LD_VAR 0 2
59949: PUSH
59950: LD_INT 1
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: LIST
59957: PUSH
59958: LD_VAR 0 1
59962: PUSH
59963: LD_VAR 0 2
59967: PUSH
59968: LD_INT 4
59970: MINUS
59971: PUSH
59972: LD_INT 3
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: LIST
59979: PUSH
59980: LD_VAR 0 1
59984: PUSH
59985: LD_INT 4
59987: PLUS
59988: PUSH
59989: LD_VAR 0 2
59993: PUSH
59994: LD_INT 4
59996: PLUS
59997: PUSH
59998: LD_INT 5
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: LIST
60005: PUSH
60006: LD_VAR 0 1
60010: PUSH
60011: LD_INT 3
60013: PLUS
60014: PUSH
60015: LD_VAR 0 2
60019: PUSH
60020: LD_INT 4
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: LIST
60027: PUSH
60028: LD_VAR 0 1
60032: PUSH
60033: LD_VAR 0 2
60037: PUSH
60038: LD_INT 3
60040: PLUS
60041: PUSH
60042: LD_INT 0
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: LIST
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: ST_TO_ADDR
// end ; end ;
60057: GO 60060
60059: POP
// result := list ;
60060: LD_ADDR_VAR 0 4
60064: PUSH
60065: LD_VAR 0 5
60069: ST_TO_ADDR
// end ;
60070: LD_VAR 0 4
60074: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60075: LD_INT 0
60077: PPUSH
60078: PPUSH
60079: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60080: LD_VAR 0 1
60084: NOT
60085: IFTRUE 60113
60087: PUSH
60088: LD_VAR 0 2
60092: PUSH
60093: LD_INT 1
60095: PUSH
60096: LD_INT 2
60098: PUSH
60099: LD_INT 3
60101: PUSH
60102: LD_INT 4
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: IN
60111: NOT
60112: OR
60113: IFFALSE 60117
// exit ;
60115: GO 60200
// tmp := [ ] ;
60117: LD_ADDR_VAR 0 5
60121: PUSH
60122: EMPTY
60123: ST_TO_ADDR
// for i in units do
60124: LD_ADDR_VAR 0 4
60128: PUSH
60129: LD_VAR 0 1
60133: PUSH
60134: FOR_IN
60135: IFFALSE 60169
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
60137: LD_ADDR_VAR 0 5
60141: PUSH
60142: LD_VAR 0 5
60146: PPUSH
60147: LD_VAR 0 4
60151: PPUSH
60152: LD_VAR 0 2
60156: PPUSH
60157: CALL_OW 259
60161: PPUSH
60162: CALL 61595 0 2
60166: ST_TO_ADDR
60167: GO 60134
60169: POP
60170: POP
// if not tmp then
60171: LD_VAR 0 5
60175: NOT
60176: IFFALSE 60180
// exit ;
60178: GO 60200
// result := SortListByListDesc ( units , tmp ) ;
60180: LD_ADDR_VAR 0 3
60184: PUSH
60185: LD_VAR 0 1
60189: PPUSH
60190: LD_VAR 0 5
60194: PPUSH
60195: CALL_OW 77
60199: ST_TO_ADDR
// end ;
60200: LD_VAR 0 3
60204: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60205: LD_INT 0
60207: PPUSH
60208: PPUSH
60209: PPUSH
// result := false ;
60210: LD_ADDR_VAR 0 3
60214: PUSH
60215: LD_INT 0
60217: ST_TO_ADDR
// if not building then
60218: LD_VAR 0 2
60222: NOT
60223: IFFALSE 60227
// exit ;
60225: GO 60371
// x := GetX ( building ) ;
60227: LD_ADDR_VAR 0 4
60231: PUSH
60232: LD_VAR 0 2
60236: PPUSH
60237: CALL_OW 250
60241: ST_TO_ADDR
// y := GetY ( building ) ;
60242: LD_ADDR_VAR 0 5
60246: PUSH
60247: LD_VAR 0 2
60251: PPUSH
60252: CALL_OW 251
60256: ST_TO_ADDR
// if not x or not y then
60257: LD_VAR 0 4
60261: NOT
60262: IFTRUE 60271
60264: PUSH
60265: LD_VAR 0 5
60269: NOT
60270: OR
60271: IFFALSE 60275
// exit ;
60273: GO 60371
// if GetTaskList ( unit ) then
60275: LD_VAR 0 1
60279: PPUSH
60280: CALL_OW 437
60284: IFFALSE 60371
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60286: LD_STRING e
60288: PUSH
60289: LD_VAR 0 1
60293: PPUSH
60294: CALL_OW 437
60298: PUSH
60299: LD_INT 1
60301: ARRAY
60302: PUSH
60303: LD_INT 1
60305: ARRAY
60306: EQUAL
60307: IFFALSE 60334
60309: PUSH
60310: LD_VAR 0 4
60314: PUSH
60315: LD_VAR 0 1
60319: PPUSH
60320: CALL_OW 437
60324: PUSH
60325: LD_INT 1
60327: ARRAY
60328: PUSH
60329: LD_INT 2
60331: ARRAY
60332: EQUAL
60333: AND
60334: IFFALSE 60361
60336: PUSH
60337: LD_VAR 0 5
60341: PUSH
60342: LD_VAR 0 1
60346: PPUSH
60347: CALL_OW 437
60351: PUSH
60352: LD_INT 1
60354: ARRAY
60355: PUSH
60356: LD_INT 3
60358: ARRAY
60359: EQUAL
60360: AND
60361: IFFALSE 60371
// result := true end ;
60363: LD_ADDR_VAR 0 3
60367: PUSH
60368: LD_INT 1
60370: ST_TO_ADDR
// end ;
60371: LD_VAR 0 3
60375: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60376: LD_INT 0
60378: PPUSH
// result := false ;
60379: LD_ADDR_VAR 0 4
60383: PUSH
60384: LD_INT 0
60386: ST_TO_ADDR
// if GetTaskList ( unit ) then
60387: LD_VAR 0 1
60391: PPUSH
60392: CALL_OW 437
60396: IFFALSE 60483
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60398: LD_STRING M
60400: PUSH
60401: LD_VAR 0 1
60405: PPUSH
60406: CALL_OW 437
60410: PUSH
60411: LD_INT 1
60413: ARRAY
60414: PUSH
60415: LD_INT 1
60417: ARRAY
60418: EQUAL
60419: IFFALSE 60446
60421: PUSH
60422: LD_VAR 0 2
60426: PUSH
60427: LD_VAR 0 1
60431: PPUSH
60432: CALL_OW 437
60436: PUSH
60437: LD_INT 1
60439: ARRAY
60440: PUSH
60441: LD_INT 2
60443: ARRAY
60444: EQUAL
60445: AND
60446: IFFALSE 60473
60448: PUSH
60449: LD_VAR 0 3
60453: PUSH
60454: LD_VAR 0 1
60458: PPUSH
60459: CALL_OW 437
60463: PUSH
60464: LD_INT 1
60466: ARRAY
60467: PUSH
60468: LD_INT 3
60470: ARRAY
60471: EQUAL
60472: AND
60473: IFFALSE 60483
// result := true ;
60475: LD_ADDR_VAR 0 4
60479: PUSH
60480: LD_INT 1
60482: ST_TO_ADDR
// end ; end ;
60483: LD_VAR 0 4
60487: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60488: LD_INT 0
60490: PPUSH
60491: PPUSH
60492: PPUSH
60493: PPUSH
// if not unit or not area then
60494: LD_VAR 0 1
60498: NOT
60499: IFTRUE 60508
60501: PUSH
60502: LD_VAR 0 2
60506: NOT
60507: OR
60508: IFFALSE 60512
// exit ;
60510: GO 60688
// tmp := AreaToList ( area , i ) ;
60512: LD_ADDR_VAR 0 6
60516: PUSH
60517: LD_VAR 0 2
60521: PPUSH
60522: LD_VAR 0 5
60526: PPUSH
60527: CALL_OW 517
60531: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60532: LD_ADDR_VAR 0 5
60536: PUSH
60537: DOUBLE
60538: LD_INT 1
60540: DEC
60541: ST_TO_ADDR
60542: LD_VAR 0 6
60546: PUSH
60547: LD_INT 1
60549: ARRAY
60550: PUSH
60551: FOR_TO
60552: IFFALSE 60686
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60554: LD_ADDR_VAR 0 7
60558: PUSH
60559: LD_VAR 0 6
60563: PUSH
60564: LD_INT 1
60566: ARRAY
60567: PUSH
60568: LD_VAR 0 5
60572: ARRAY
60573: PUSH
60574: LD_VAR 0 6
60578: PUSH
60579: LD_INT 2
60581: ARRAY
60582: PUSH
60583: LD_VAR 0 5
60587: ARRAY
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
60593: LD_INT 92
60595: PUSH
60596: LD_VAR 0 7
60600: PUSH
60601: LD_INT 1
60603: ARRAY
60604: PUSH
60605: LD_VAR 0 7
60609: PUSH
60610: LD_INT 2
60612: ARRAY
60613: PUSH
60614: LD_INT 2
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: PPUSH
60623: CALL_OW 69
60627: PUSH
60628: LD_INT 0
60630: EQUAL
60631: IFFALSE 60684
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60633: LD_VAR 0 1
60637: PPUSH
60638: LD_VAR 0 7
60642: PUSH
60643: LD_INT 1
60645: ARRAY
60646: PPUSH
60647: LD_VAR 0 7
60651: PUSH
60652: LD_INT 2
60654: ARRAY
60655: PPUSH
60656: LD_VAR 0 3
60660: PPUSH
60661: CALL_OW 48
// result := IsPlaced ( unit ) ;
60665: LD_ADDR_VAR 0 4
60669: PUSH
60670: LD_VAR 0 1
60674: PPUSH
60675: CALL_OW 305
60679: ST_TO_ADDR
// exit ;
60680: POP
60681: POP
60682: GO 60688
// end ; end ;
60684: GO 60551
60686: POP
60687: POP
// end ;
60688: LD_VAR 0 4
60692: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60693: LD_INT 0
60695: PPUSH
60696: PPUSH
60697: PPUSH
// if not side or side > 8 then
60698: LD_VAR 0 1
60702: NOT
60703: IFTRUE 60715
60705: PUSH
60706: LD_VAR 0 1
60710: PUSH
60711: LD_INT 8
60713: GREATER
60714: OR
60715: IFFALSE 60719
// exit ;
60717: GO 60906
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60719: LD_ADDR_VAR 0 4
60723: PUSH
60724: LD_INT 22
60726: PUSH
60727: LD_VAR 0 1
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 21
60738: PUSH
60739: LD_INT 3
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PPUSH
60750: CALL_OW 69
60754: ST_TO_ADDR
// if not tmp then
60755: LD_VAR 0 4
60759: NOT
60760: IFFALSE 60764
// exit ;
60762: GO 60906
// enable_addtolog := true ;
60764: LD_ADDR_OWVAR 81
60768: PUSH
60769: LD_INT 1
60771: ST_TO_ADDR
// AddToLog ( [ ) ;
60772: LD_STRING [
60774: PPUSH
60775: CALL_OW 561
// for i in tmp do
60779: LD_ADDR_VAR 0 3
60783: PUSH
60784: LD_VAR 0 4
60788: PUSH
60789: FOR_IN
60790: IFFALSE 60897
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60792: LD_STRING [
60794: PUSH
60795: LD_VAR 0 3
60799: PPUSH
60800: CALL_OW 266
60804: STR
60805: PUSH
60806: LD_STRING , 
60808: STR
60809: PUSH
60810: LD_VAR 0 3
60814: PPUSH
60815: CALL_OW 250
60819: STR
60820: PUSH
60821: LD_STRING , 
60823: STR
60824: PUSH
60825: LD_VAR 0 3
60829: PPUSH
60830: CALL_OW 251
60834: STR
60835: PUSH
60836: LD_STRING , 
60838: STR
60839: PUSH
60840: LD_VAR 0 3
60844: PPUSH
60845: CALL_OW 254
60849: STR
60850: PUSH
60851: LD_STRING , 
60853: STR
60854: PUSH
60855: LD_VAR 0 3
60859: PPUSH
60860: LD_INT 1
60862: PPUSH
60863: CALL_OW 268
60867: STR
60868: PUSH
60869: LD_STRING , 
60871: STR
60872: PUSH
60873: LD_VAR 0 3
60877: PPUSH
60878: LD_INT 2
60880: PPUSH
60881: CALL_OW 268
60885: STR
60886: PUSH
60887: LD_STRING ],
60889: STR
60890: PPUSH
60891: CALL_OW 561
// end ;
60895: GO 60789
60897: POP
60898: POP
// AddToLog ( ]; ) ;
60899: LD_STRING ];
60901: PPUSH
60902: CALL_OW 561
// end ;
60906: LD_VAR 0 2
60910: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60911: LD_INT 0
60913: PPUSH
60914: PPUSH
60915: PPUSH
60916: PPUSH
60917: PPUSH
// if not area or not rate or not max then
60918: LD_VAR 0 1
60922: NOT
60923: IFTRUE 60932
60925: PUSH
60926: LD_VAR 0 2
60930: NOT
60931: OR
60932: IFTRUE 60941
60934: PUSH
60935: LD_VAR 0 4
60939: NOT
60940: OR
60941: IFFALSE 60945
// exit ;
60943: GO 61134
// while 1 do
60945: LD_INT 1
60947: IFFALSE 61134
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60949: LD_ADDR_VAR 0 9
60953: PUSH
60954: LD_VAR 0 1
60958: PPUSH
60959: LD_INT 1
60961: PPUSH
60962: CALL_OW 287
60966: PUSH
60967: LD_INT 10
60969: MUL
60970: ST_TO_ADDR
// r := rate / 10 ;
60971: LD_ADDR_VAR 0 7
60975: PUSH
60976: LD_VAR 0 2
60980: PUSH
60981: LD_INT 10
60983: DIVREAL
60984: ST_TO_ADDR
// time := 1 1$00 ;
60985: LD_ADDR_VAR 0 8
60989: PUSH
60990: LD_INT 2100
60992: ST_TO_ADDR
// if amount < min then
60993: LD_VAR 0 9
60997: PUSH
60998: LD_VAR 0 3
61002: LESS
61003: IFFALSE 61021
// r := r * 2 else
61005: LD_ADDR_VAR 0 7
61009: PUSH
61010: LD_VAR 0 7
61014: PUSH
61015: LD_INT 2
61017: MUL
61018: ST_TO_ADDR
61019: GO 61047
// if amount > max then
61021: LD_VAR 0 9
61025: PUSH
61026: LD_VAR 0 4
61030: GREATER
61031: IFFALSE 61047
// r := r / 2 ;
61033: LD_ADDR_VAR 0 7
61037: PUSH
61038: LD_VAR 0 7
61042: PUSH
61043: LD_INT 2
61045: DIVREAL
61046: ST_TO_ADDR
// time := time / r ;
61047: LD_ADDR_VAR 0 8
61051: PUSH
61052: LD_VAR 0 8
61056: PUSH
61057: LD_VAR 0 7
61061: DIVREAL
61062: ST_TO_ADDR
// if time < 0 then
61063: LD_VAR 0 8
61067: PUSH
61068: LD_INT 0
61070: LESS
61071: IFFALSE 61088
// time := time * - 1 ;
61073: LD_ADDR_VAR 0 8
61077: PUSH
61078: LD_VAR 0 8
61082: PUSH
61083: LD_INT 1
61085: NEG
61086: MUL
61087: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
61088: LD_VAR 0 8
61092: PUSH
61093: LD_INT 35
61095: PPUSH
61096: LD_INT 875
61098: PPUSH
61099: CALL_OW 12
61103: PLUS
61104: PPUSH
61105: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61109: LD_INT 1
61111: PPUSH
61112: LD_INT 5
61114: PPUSH
61115: CALL_OW 12
61119: PPUSH
61120: LD_VAR 0 1
61124: PPUSH
61125: LD_INT 1
61127: PPUSH
61128: CALL_OW 55
// end ;
61132: GO 60945
// end ;
61134: LD_VAR 0 5
61138: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61139: LD_INT 0
61141: PPUSH
61142: PPUSH
61143: PPUSH
61144: PPUSH
61145: PPUSH
61146: PPUSH
61147: PPUSH
61148: PPUSH
// if not turrets or not factories then
61149: LD_VAR 0 1
61153: NOT
61154: IFTRUE 61163
61156: PUSH
61157: LD_VAR 0 2
61161: NOT
61162: OR
61163: IFFALSE 61167
// exit ;
61165: GO 61474
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61167: LD_ADDR_VAR 0 10
61171: PUSH
61172: LD_INT 5
61174: PUSH
61175: LD_INT 6
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 2
61184: PUSH
61185: LD_INT 4
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 3
61194: PUSH
61195: LD_INT 5
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 24
61209: PUSH
61210: LD_INT 25
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 23
61219: PUSH
61220: LD_INT 27
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 42
61233: PUSH
61234: LD_INT 43
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 44
61243: PUSH
61244: LD_INT 46
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 45
61253: PUSH
61254: LD_INT 47
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: LIST
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: LIST
61270: ST_TO_ADDR
// result := [ ] ;
61271: LD_ADDR_VAR 0 3
61275: PUSH
61276: EMPTY
61277: ST_TO_ADDR
// for i in turrets do
61278: LD_ADDR_VAR 0 4
61282: PUSH
61283: LD_VAR 0 1
61287: PUSH
61288: FOR_IN
61289: IFFALSE 61472
// begin nat := GetNation ( i ) ;
61291: LD_ADDR_VAR 0 7
61295: PUSH
61296: LD_VAR 0 4
61300: PPUSH
61301: CALL_OW 248
61305: ST_TO_ADDR
// weapon := 0 ;
61306: LD_ADDR_VAR 0 8
61310: PUSH
61311: LD_INT 0
61313: ST_TO_ADDR
// if not nat then
61314: LD_VAR 0 7
61318: NOT
61319: IFFALSE 61323
// continue ;
61321: GO 61288
// for j in list [ nat ] do
61323: LD_ADDR_VAR 0 5
61327: PUSH
61328: LD_VAR 0 10
61332: PUSH
61333: LD_VAR 0 7
61337: ARRAY
61338: PUSH
61339: FOR_IN
61340: IFFALSE 61381
// if GetBWeapon ( i ) = j [ 1 ] then
61342: LD_VAR 0 4
61346: PPUSH
61347: CALL_OW 269
61351: PUSH
61352: LD_VAR 0 5
61356: PUSH
61357: LD_INT 1
61359: ARRAY
61360: EQUAL
61361: IFFALSE 61379
// begin weapon := j [ 2 ] ;
61363: LD_ADDR_VAR 0 8
61367: PUSH
61368: LD_VAR 0 5
61372: PUSH
61373: LD_INT 2
61375: ARRAY
61376: ST_TO_ADDR
// break ;
61377: GO 61381
// end ;
61379: GO 61339
61381: POP
61382: POP
// if not weapon then
61383: LD_VAR 0 8
61387: NOT
61388: IFFALSE 61392
// continue ;
61390: GO 61288
// for k in factories do
61392: LD_ADDR_VAR 0 6
61396: PUSH
61397: LD_VAR 0 2
61401: PUSH
61402: FOR_IN
61403: IFFALSE 61468
// begin weapons := AvailableWeaponList ( k ) ;
61405: LD_ADDR_VAR 0 9
61409: PUSH
61410: LD_VAR 0 6
61414: PPUSH
61415: CALL_OW 478
61419: ST_TO_ADDR
// if not weapons then
61420: LD_VAR 0 9
61424: NOT
61425: IFFALSE 61429
// continue ;
61427: GO 61402
// if weapon in weapons then
61429: LD_VAR 0 8
61433: PUSH
61434: LD_VAR 0 9
61438: IN
61439: IFFALSE 61466
// begin result := [ i , weapon ] ;
61441: LD_ADDR_VAR 0 3
61445: PUSH
61446: LD_VAR 0 4
61450: PUSH
61451: LD_VAR 0 8
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: ST_TO_ADDR
// exit ;
61460: POP
61461: POP
61462: POP
61463: POP
61464: GO 61474
// end ; end ;
61466: GO 61402
61468: POP
61469: POP
// end ;
61470: GO 61288
61472: POP
61473: POP
// end ;
61474: LD_VAR 0 3
61478: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61479: LD_INT 0
61481: PPUSH
// if not side or side > 8 then
61482: LD_VAR 0 3
61486: NOT
61487: IFTRUE 61499
61489: PUSH
61490: LD_VAR 0 3
61494: PUSH
61495: LD_INT 8
61497: GREATER
61498: OR
61499: IFFALSE 61503
// exit ;
61501: GO 61562
// if not range then
61503: LD_VAR 0 4
61507: NOT
61508: IFFALSE 61519
// range := - 12 ;
61510: LD_ADDR_VAR 0 4
61514: PUSH
61515: LD_INT 12
61517: NEG
61518: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61519: LD_VAR 0 1
61523: PPUSH
61524: LD_VAR 0 2
61528: PPUSH
61529: LD_VAR 0 3
61533: PPUSH
61534: LD_VAR 0 4
61538: PPUSH
61539: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61543: LD_VAR 0 1
61547: PPUSH
61548: LD_VAR 0 2
61552: PPUSH
61553: LD_VAR 0 3
61557: PPUSH
61558: CALL_OW 331
// end ;
61562: LD_VAR 0 5
61566: RET
// export function Video ( mode ) ; begin
61567: LD_INT 0
61569: PPUSH
// ingame_video = mode ;
61570: LD_ADDR_OWVAR 52
61574: PUSH
61575: LD_VAR 0 1
61579: ST_TO_ADDR
// interface_hidden = mode ;
61580: LD_ADDR_OWVAR 54
61584: PUSH
61585: LD_VAR 0 1
61589: ST_TO_ADDR
// end ;
61590: LD_VAR 0 2
61594: RET
// export function Join ( array , element ) ; begin
61595: LD_INT 0
61597: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61598: LD_ADDR_VAR 0 3
61602: PUSH
61603: LD_VAR 0 1
61607: PPUSH
61608: LD_VAR 0 1
61612: PUSH
61613: LD_INT 1
61615: PLUS
61616: PPUSH
61617: LD_VAR 0 2
61621: PPUSH
61622: CALL_OW 1
61626: ST_TO_ADDR
// end ;
61627: LD_VAR 0 3
61631: RET
// export function JoinUnion ( array , element ) ; begin
61632: LD_INT 0
61634: PPUSH
// result := array union element ;
61635: LD_ADDR_VAR 0 3
61639: PUSH
61640: LD_VAR 0 1
61644: PUSH
61645: LD_VAR 0 2
61649: UNION
61650: ST_TO_ADDR
// end ;
61651: LD_VAR 0 3
61655: RET
// export function GetBehemoths ( side ) ; begin
61656: LD_INT 0
61658: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
61659: LD_ADDR_VAR 0 2
61663: PUSH
61664: LD_INT 22
61666: PUSH
61667: LD_VAR 0 1
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 31
61678: PUSH
61679: LD_INT 25
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PPUSH
61690: CALL_OW 69
61694: ST_TO_ADDR
// end ;
61695: LD_VAR 0 2
61699: RET
// export function Shuffle ( array ) ; var i , index ; begin
61700: LD_INT 0
61702: PPUSH
61703: PPUSH
61704: PPUSH
// result := [ ] ;
61705: LD_ADDR_VAR 0 2
61709: PUSH
61710: EMPTY
61711: ST_TO_ADDR
// if not array then
61712: LD_VAR 0 1
61716: NOT
61717: IFFALSE 61721
// exit ;
61719: GO 61820
// Randomize ;
61721: CALL_OW 10
// for i = array downto 1 do
61725: LD_ADDR_VAR 0 3
61729: PUSH
61730: DOUBLE
61731: LD_VAR 0 1
61735: INC
61736: ST_TO_ADDR
61737: LD_INT 1
61739: PUSH
61740: FOR_DOWNTO
61741: IFFALSE 61818
// begin index := rand ( 1 , array ) ;
61743: LD_ADDR_VAR 0 4
61747: PUSH
61748: LD_INT 1
61750: PPUSH
61751: LD_VAR 0 1
61755: PPUSH
61756: CALL_OW 12
61760: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61761: LD_ADDR_VAR 0 2
61765: PUSH
61766: LD_VAR 0 2
61770: PPUSH
61771: LD_VAR 0 2
61775: PUSH
61776: LD_INT 1
61778: PLUS
61779: PPUSH
61780: LD_VAR 0 1
61784: PUSH
61785: LD_VAR 0 4
61789: ARRAY
61790: PPUSH
61791: CALL_OW 2
61795: ST_TO_ADDR
// array := Delete ( array , index ) ;
61796: LD_ADDR_VAR 0 1
61800: PUSH
61801: LD_VAR 0 1
61805: PPUSH
61806: LD_VAR 0 4
61810: PPUSH
61811: CALL_OW 3
61815: ST_TO_ADDR
// end ;
61816: GO 61740
61818: POP
61819: POP
// end ;
61820: LD_VAR 0 2
61824: RET
// export function GetBaseMaterials ( base ) ; begin
61825: LD_INT 0
61827: PPUSH
// result := [ 0 , 0 , 0 ] ;
61828: LD_ADDR_VAR 0 2
61832: PUSH
61833: LD_INT 0
61835: PUSH
61836: LD_INT 0
61838: PUSH
61839: LD_INT 0
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: LIST
61846: ST_TO_ADDR
// if not base then
61847: LD_VAR 0 1
61851: NOT
61852: IFFALSE 61856
// exit ;
61854: GO 61905
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61856: LD_ADDR_VAR 0 2
61860: PUSH
61861: LD_VAR 0 1
61865: PPUSH
61866: LD_INT 1
61868: PPUSH
61869: CALL_OW 275
61873: PUSH
61874: LD_VAR 0 1
61878: PPUSH
61879: LD_INT 2
61881: PPUSH
61882: CALL_OW 275
61886: PUSH
61887: LD_VAR 0 1
61891: PPUSH
61892: LD_INT 3
61894: PPUSH
61895: CALL_OW 275
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: LIST
61904: ST_TO_ADDR
// end ;
61905: LD_VAR 0 2
61909: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61910: LD_INT 0
61912: PPUSH
61913: PPUSH
// result := array ;
61914: LD_ADDR_VAR 0 3
61918: PUSH
61919: LD_VAR 0 1
61923: ST_TO_ADDR
// if size >= result then
61924: LD_VAR 0 2
61928: PUSH
61929: LD_VAR 0 3
61933: GREATEREQUAL
61934: IFFALSE 61938
// exit ;
61936: GO 61988
// if size then
61938: LD_VAR 0 2
61942: IFFALSE 61988
// for i := array downto size do
61944: LD_ADDR_VAR 0 4
61948: PUSH
61949: DOUBLE
61950: LD_VAR 0 1
61954: INC
61955: ST_TO_ADDR
61956: LD_VAR 0 2
61960: PUSH
61961: FOR_DOWNTO
61962: IFFALSE 61986
// result := Delete ( result , result ) ;
61964: LD_ADDR_VAR 0 3
61968: PUSH
61969: LD_VAR 0 3
61973: PPUSH
61974: LD_VAR 0 3
61978: PPUSH
61979: CALL_OW 3
61983: ST_TO_ADDR
61984: GO 61961
61986: POP
61987: POP
// end ;
61988: LD_VAR 0 3
61992: RET
// export function ComExit ( unit ) ; var tmp ; begin
61993: LD_INT 0
61995: PPUSH
61996: PPUSH
// if not IsInUnit ( unit ) then
61997: LD_VAR 0 1
62001: PPUSH
62002: CALL_OW 310
62006: NOT
62007: IFFALSE 62011
// exit ;
62009: GO 62071
// tmp := IsInUnit ( unit ) ;
62011: LD_ADDR_VAR 0 3
62015: PUSH
62016: LD_VAR 0 1
62020: PPUSH
62021: CALL_OW 310
62025: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62026: LD_VAR 0 3
62030: PPUSH
62031: CALL_OW 247
62035: PUSH
62036: LD_INT 2
62038: EQUAL
62039: IFFALSE 62052
// ComExitVehicle ( unit ) else
62041: LD_VAR 0 1
62045: PPUSH
62046: CALL_OW 121
62050: GO 62061
// ComExitBuilding ( unit ) ;
62052: LD_VAR 0 1
62056: PPUSH
62057: CALL_OW 122
// result := tmp ;
62061: LD_ADDR_VAR 0 2
62065: PUSH
62066: LD_VAR 0 3
62070: ST_TO_ADDR
// end ;
62071: LD_VAR 0 2
62075: RET
// export function ComExitAll ( units ) ; var i ; begin
62076: LD_INT 0
62078: PPUSH
62079: PPUSH
// if not units then
62080: LD_VAR 0 1
62084: NOT
62085: IFFALSE 62089
// exit ;
62087: GO 62115
// for i in units do
62089: LD_ADDR_VAR 0 3
62093: PUSH
62094: LD_VAR 0 1
62098: PUSH
62099: FOR_IN
62100: IFFALSE 62113
// ComExit ( i ) ;
62102: LD_VAR 0 3
62106: PPUSH
62107: CALL 61993 0 1
62111: GO 62099
62113: POP
62114: POP
// end ;
62115: LD_VAR 0 2
62119: RET
// export function ResetHc ; begin
62120: LD_INT 0
62122: PPUSH
// InitHc ;
62123: CALL_OW 19
// hc_importance := 0 ;
62127: LD_ADDR_OWVAR 32
62131: PUSH
62132: LD_INT 0
62134: ST_TO_ADDR
// end ;
62135: LD_VAR 0 1
62139: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62140: LD_INT 0
62142: PPUSH
62143: PPUSH
62144: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62145: LD_ADDR_VAR 0 6
62149: PUSH
62150: LD_VAR 0 1
62154: PUSH
62155: LD_VAR 0 3
62159: PLUS
62160: PUSH
62161: LD_INT 2
62163: DIV
62164: ST_TO_ADDR
// if _x < 0 then
62165: LD_VAR 0 6
62169: PUSH
62170: LD_INT 0
62172: LESS
62173: IFFALSE 62190
// _x := _x * - 1 ;
62175: LD_ADDR_VAR 0 6
62179: PUSH
62180: LD_VAR 0 6
62184: PUSH
62185: LD_INT 1
62187: NEG
62188: MUL
62189: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62190: LD_ADDR_VAR 0 7
62194: PUSH
62195: LD_VAR 0 2
62199: PUSH
62200: LD_VAR 0 4
62204: PLUS
62205: PUSH
62206: LD_INT 2
62208: DIV
62209: ST_TO_ADDR
// if _y < 0 then
62210: LD_VAR 0 7
62214: PUSH
62215: LD_INT 0
62217: LESS
62218: IFFALSE 62235
// _y := _y * - 1 ;
62220: LD_ADDR_VAR 0 7
62224: PUSH
62225: LD_VAR 0 7
62229: PUSH
62230: LD_INT 1
62232: NEG
62233: MUL
62234: ST_TO_ADDR
// result := [ _x , _y ] ;
62235: LD_ADDR_VAR 0 5
62239: PUSH
62240: LD_VAR 0 6
62244: PUSH
62245: LD_VAR 0 7
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: ST_TO_ADDR
// end ;
62254: LD_VAR 0 5
62258: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62259: LD_INT 0
62261: PPUSH
62262: PPUSH
62263: PPUSH
62264: PPUSH
// task := GetTaskList ( unit ) ;
62265: LD_ADDR_VAR 0 7
62269: PUSH
62270: LD_VAR 0 1
62274: PPUSH
62275: CALL_OW 437
62279: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62280: LD_VAR 0 7
62284: NOT
62285: IFFALSE 62304
62287: PUSH
62288: LD_VAR 0 1
62292: PPUSH
62293: LD_VAR 0 2
62297: PPUSH
62298: CALL_OW 308
62302: NOT
62303: AND
62304: IFFALSE 62308
// exit ;
62306: GO 62426
// if IsInArea ( unit , area ) then
62308: LD_VAR 0 1
62312: PPUSH
62313: LD_VAR 0 2
62317: PPUSH
62318: CALL_OW 308
62322: IFFALSE 62340
// begin ComMoveToArea ( unit , goAway ) ;
62324: LD_VAR 0 1
62328: PPUSH
62329: LD_VAR 0 3
62333: PPUSH
62334: CALL_OW 113
// exit ;
62338: GO 62426
// end ; if task [ 1 ] [ 1 ] <> M then
62340: LD_VAR 0 7
62344: PUSH
62345: LD_INT 1
62347: ARRAY
62348: PUSH
62349: LD_INT 1
62351: ARRAY
62352: PUSH
62353: LD_STRING M
62355: NONEQUAL
62356: IFFALSE 62360
// exit ;
62358: GO 62426
// x := task [ 1 ] [ 2 ] ;
62360: LD_ADDR_VAR 0 5
62364: PUSH
62365: LD_VAR 0 7
62369: PUSH
62370: LD_INT 1
62372: ARRAY
62373: PUSH
62374: LD_INT 2
62376: ARRAY
62377: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62378: LD_ADDR_VAR 0 6
62382: PUSH
62383: LD_VAR 0 7
62387: PUSH
62388: LD_INT 1
62390: ARRAY
62391: PUSH
62392: LD_INT 3
62394: ARRAY
62395: ST_TO_ADDR
// if InArea ( x , y , area ) then
62396: LD_VAR 0 5
62400: PPUSH
62401: LD_VAR 0 6
62405: PPUSH
62406: LD_VAR 0 2
62410: PPUSH
62411: CALL_OW 309
62415: IFFALSE 62426
// ComStop ( unit ) ;
62417: LD_VAR 0 1
62421: PPUSH
62422: CALL_OW 141
// end ;
62426: LD_VAR 0 4
62430: RET
// export function Abs ( value ) ; begin
62431: LD_INT 0
62433: PPUSH
// result := value ;
62434: LD_ADDR_VAR 0 2
62438: PUSH
62439: LD_VAR 0 1
62443: ST_TO_ADDR
// if value < 0 then
62444: LD_VAR 0 1
62448: PUSH
62449: LD_INT 0
62451: LESS
62452: IFFALSE 62469
// result := value * - 1 ;
62454: LD_ADDR_VAR 0 2
62458: PUSH
62459: LD_VAR 0 1
62463: PUSH
62464: LD_INT 1
62466: NEG
62467: MUL
62468: ST_TO_ADDR
// end ;
62469: LD_VAR 0 2
62473: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62474: LD_INT 0
62476: PPUSH
62477: PPUSH
62478: PPUSH
62479: PPUSH
62480: PPUSH
62481: PPUSH
62482: PPUSH
62483: PPUSH
// if not unit or not building then
62484: LD_VAR 0 1
62488: NOT
62489: IFTRUE 62498
62491: PUSH
62492: LD_VAR 0 2
62496: NOT
62497: OR
62498: IFFALSE 62502
// exit ;
62500: GO 62730
// x := GetX ( building ) ;
62502: LD_ADDR_VAR 0 4
62506: PUSH
62507: LD_VAR 0 2
62511: PPUSH
62512: CALL_OW 250
62516: ST_TO_ADDR
// y := GetY ( building ) ;
62517: LD_ADDR_VAR 0 6
62521: PUSH
62522: LD_VAR 0 2
62526: PPUSH
62527: CALL_OW 251
62531: ST_TO_ADDR
// d := GetDir ( building ) ;
62532: LD_ADDR_VAR 0 8
62536: PUSH
62537: LD_VAR 0 2
62541: PPUSH
62542: CALL_OW 254
62546: ST_TO_ADDR
// r := 4 ;
62547: LD_ADDR_VAR 0 9
62551: PUSH
62552: LD_INT 4
62554: ST_TO_ADDR
// for i := 1 to 5 do
62555: LD_ADDR_VAR 0 10
62559: PUSH
62560: DOUBLE
62561: LD_INT 1
62563: DEC
62564: ST_TO_ADDR
62565: LD_INT 5
62567: PUSH
62568: FOR_TO
62569: IFFALSE 62728
// begin _x := ShiftX ( x , d , r + i ) ;
62571: LD_ADDR_VAR 0 5
62575: PUSH
62576: LD_VAR 0 4
62580: PPUSH
62581: LD_VAR 0 8
62585: PPUSH
62586: LD_VAR 0 9
62590: PUSH
62591: LD_VAR 0 10
62595: PLUS
62596: PPUSH
62597: CALL_OW 272
62601: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62602: LD_ADDR_VAR 0 7
62606: PUSH
62607: LD_VAR 0 6
62611: PPUSH
62612: LD_VAR 0 8
62616: PPUSH
62617: LD_VAR 0 9
62621: PUSH
62622: LD_VAR 0 10
62626: PLUS
62627: PPUSH
62628: CALL_OW 273
62632: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62633: LD_VAR 0 5
62637: PPUSH
62638: LD_VAR 0 7
62642: PPUSH
62643: CALL_OW 488
62647: IFFALSE 62682
62649: PUSH
62650: LD_VAR 0 5
62654: PPUSH
62655: LD_VAR 0 7
62659: PPUSH
62660: CALL_OW 428
62664: PPUSH
62665: CALL_OW 247
62669: PUSH
62670: LD_INT 3
62672: PUSH
62673: LD_INT 2
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: IN
62680: NOT
62681: AND
62682: IFFALSE 62726
// begin ComMoveXY ( unit , _x , _y ) ;
62684: LD_VAR 0 1
62688: PPUSH
62689: LD_VAR 0 5
62693: PPUSH
62694: LD_VAR 0 7
62698: PPUSH
62699: CALL_OW 111
// result := [ _x , _y ] ;
62703: LD_ADDR_VAR 0 3
62707: PUSH
62708: LD_VAR 0 5
62712: PUSH
62713: LD_VAR 0 7
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: ST_TO_ADDR
// exit ;
62722: POP
62723: POP
62724: GO 62730
// end ; end ;
62726: GO 62568
62728: POP
62729: POP
// end ;
62730: LD_VAR 0 3
62734: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62735: LD_INT 0
62737: PPUSH
62738: PPUSH
62739: PPUSH
// result := 0 ;
62740: LD_ADDR_VAR 0 3
62744: PUSH
62745: LD_INT 0
62747: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62748: LD_VAR 0 1
62752: PUSH
62753: LD_INT 0
62755: LESS
62756: IFTRUE 62768
62758: PUSH
62759: LD_VAR 0 1
62763: PUSH
62764: LD_INT 8
62766: GREATER
62767: OR
62768: IFTRUE 62780
62770: PUSH
62771: LD_VAR 0 2
62775: PUSH
62776: LD_INT 0
62778: LESS
62779: OR
62780: IFTRUE 62792
62782: PUSH
62783: LD_VAR 0 2
62787: PUSH
62788: LD_INT 8
62790: GREATER
62791: OR
62792: IFFALSE 62796
// exit ;
62794: GO 62871
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62796: LD_ADDR_VAR 0 4
62800: PUSH
62801: LD_INT 22
62803: PUSH
62804: LD_VAR 0 2
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PPUSH
62813: CALL_OW 69
62817: PUSH
62818: FOR_IN
62819: IFFALSE 62869
// begin un := UnitShoot ( i ) ;
62821: LD_ADDR_VAR 0 5
62825: PUSH
62826: LD_VAR 0 4
62830: PPUSH
62831: CALL_OW 504
62835: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62836: LD_VAR 0 5
62840: PPUSH
62841: CALL_OW 255
62845: PUSH
62846: LD_VAR 0 1
62850: EQUAL
62851: IFFALSE 62867
// begin result := un ;
62853: LD_ADDR_VAR 0 3
62857: PUSH
62858: LD_VAR 0 5
62862: ST_TO_ADDR
// exit ;
62863: POP
62864: POP
62865: GO 62871
// end ; end ;
62867: GO 62818
62869: POP
62870: POP
// end ;
62871: LD_VAR 0 3
62875: RET
// export function GetCargoBay ( units ) ; begin
62876: LD_INT 0
62878: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62879: LD_ADDR_VAR 0 2
62883: PUSH
62884: LD_VAR 0 1
62888: PPUSH
62889: LD_INT 2
62891: PUSH
62892: LD_INT 34
62894: PUSH
62895: LD_INT 12
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 34
62904: PUSH
62905: LD_INT 51
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: PUSH
62912: LD_INT 34
62914: PUSH
62915: LD_INT 32
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 34
62924: PUSH
62925: LD_INT 89
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: PPUSH
62939: CALL_OW 72
62943: ST_TO_ADDR
// end ;
62944: LD_VAR 0 2
62948: RET
// export function Negate ( value ) ; begin
62949: LD_INT 0
62951: PPUSH
// result := not value ;
62952: LD_ADDR_VAR 0 2
62956: PUSH
62957: LD_VAR 0 1
62961: NOT
62962: ST_TO_ADDR
// end ;
62963: LD_VAR 0 2
62967: RET
// export function Inc ( value ) ; begin
62968: LD_INT 0
62970: PPUSH
// result := value + 1 ;
62971: LD_ADDR_VAR 0 2
62975: PUSH
62976: LD_VAR 0 1
62980: PUSH
62981: LD_INT 1
62983: PLUS
62984: ST_TO_ADDR
// end ;
62985: LD_VAR 0 2
62989: RET
// export function Dec ( value ) ; begin
62990: LD_INT 0
62992: PPUSH
// result := value - 1 ;
62993: LD_ADDR_VAR 0 2
62997: PUSH
62998: LD_VAR 0 1
63002: PUSH
63003: LD_INT 1
63005: MINUS
63006: ST_TO_ADDR
// end ;
63007: LD_VAR 0 2
63011: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63012: LD_INT 0
63014: PPUSH
63015: PPUSH
63016: PPUSH
63017: PPUSH
63018: PPUSH
63019: PPUSH
63020: PPUSH
63021: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63022: LD_VAR 0 1
63026: PPUSH
63027: LD_VAR 0 2
63031: PPUSH
63032: CALL_OW 488
63036: NOT
63037: IFTRUE 63056
63039: PUSH
63040: LD_VAR 0 3
63044: PPUSH
63045: LD_VAR 0 4
63049: PPUSH
63050: CALL_OW 488
63054: NOT
63055: OR
63056: IFFALSE 63069
// begin result := - 1 ;
63058: LD_ADDR_VAR 0 5
63062: PUSH
63063: LD_INT 1
63065: NEG
63066: ST_TO_ADDR
// exit ;
63067: GO 63304
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63069: LD_ADDR_VAR 0 12
63073: PUSH
63074: LD_VAR 0 1
63078: PPUSH
63079: LD_VAR 0 2
63083: PPUSH
63084: LD_VAR 0 3
63088: PPUSH
63089: LD_VAR 0 4
63093: PPUSH
63094: CALL 62140 0 4
63098: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63099: LD_ADDR_VAR 0 11
63103: PUSH
63104: LD_VAR 0 1
63108: PPUSH
63109: LD_VAR 0 2
63113: PPUSH
63114: LD_VAR 0 12
63118: PUSH
63119: LD_INT 1
63121: ARRAY
63122: PPUSH
63123: LD_VAR 0 12
63127: PUSH
63128: LD_INT 2
63130: ARRAY
63131: PPUSH
63132: CALL_OW 298
63136: ST_TO_ADDR
// distance := 9999 ;
63137: LD_ADDR_VAR 0 10
63141: PUSH
63142: LD_INT 9999
63144: ST_TO_ADDR
// for i := 0 to 5 do
63145: LD_ADDR_VAR 0 6
63149: PUSH
63150: DOUBLE
63151: LD_INT 0
63153: DEC
63154: ST_TO_ADDR
63155: LD_INT 5
63157: PUSH
63158: FOR_TO
63159: IFFALSE 63302
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63161: LD_ADDR_VAR 0 7
63165: PUSH
63166: LD_VAR 0 1
63170: PPUSH
63171: LD_VAR 0 6
63175: PPUSH
63176: LD_VAR 0 11
63180: PPUSH
63181: CALL_OW 272
63185: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63186: LD_ADDR_VAR 0 8
63190: PUSH
63191: LD_VAR 0 2
63195: PPUSH
63196: LD_VAR 0 6
63200: PPUSH
63201: LD_VAR 0 11
63205: PPUSH
63206: CALL_OW 273
63210: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63211: LD_VAR 0 7
63215: PPUSH
63216: LD_VAR 0 8
63220: PPUSH
63221: CALL_OW 488
63225: NOT
63226: IFFALSE 63230
// continue ;
63228: GO 63158
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
63230: LD_ADDR_VAR 0 9
63234: PUSH
63235: LD_VAR 0 12
63239: PUSH
63240: LD_INT 1
63242: ARRAY
63243: PPUSH
63244: LD_VAR 0 12
63248: PUSH
63249: LD_INT 2
63251: ARRAY
63252: PPUSH
63253: LD_VAR 0 7
63257: PPUSH
63258: LD_VAR 0 8
63262: PPUSH
63263: CALL_OW 298
63267: ST_TO_ADDR
// if tmp < distance then
63268: LD_VAR 0 9
63272: PUSH
63273: LD_VAR 0 10
63277: LESS
63278: IFFALSE 63300
// begin result := i ;
63280: LD_ADDR_VAR 0 5
63284: PUSH
63285: LD_VAR 0 6
63289: ST_TO_ADDR
// distance := tmp ;
63290: LD_ADDR_VAR 0 10
63294: PUSH
63295: LD_VAR 0 9
63299: ST_TO_ADDR
// end ; end ;
63300: GO 63158
63302: POP
63303: POP
// end ;
63304: LD_VAR 0 5
63308: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63309: LD_INT 0
63311: PPUSH
63312: PPUSH
// if not driver or not IsInUnit ( driver ) then
63313: LD_VAR 0 1
63317: NOT
63318: IFTRUE 63332
63320: PUSH
63321: LD_VAR 0 1
63325: PPUSH
63326: CALL_OW 310
63330: NOT
63331: OR
63332: IFFALSE 63336
// exit ;
63334: GO 63426
// vehicle := IsInUnit ( driver ) ;
63336: LD_ADDR_VAR 0 3
63340: PUSH
63341: LD_VAR 0 1
63345: PPUSH
63346: CALL_OW 310
63350: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63351: LD_VAR 0 1
63355: PPUSH
63356: LD_STRING \
63358: PUSH
63359: LD_INT 0
63361: PUSH
63362: LD_INT 0
63364: PUSH
63365: LD_INT 0
63367: PUSH
63368: LD_INT 0
63370: PUSH
63371: LD_INT 0
63373: PUSH
63374: LD_INT 0
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: PUSH
63386: LD_STRING E
63388: PUSH
63389: LD_INT 0
63391: PUSH
63392: LD_INT 0
63394: PUSH
63395: LD_VAR 0 3
63399: PUSH
63400: LD_INT 0
63402: PUSH
63403: LD_INT 0
63405: PUSH
63406: LD_INT 0
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PPUSH
63422: CALL_OW 446
// end ;
63426: LD_VAR 0 2
63430: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63431: LD_INT 0
63433: PPUSH
63434: PPUSH
// if not driver or not IsInUnit ( driver ) then
63435: LD_VAR 0 1
63439: NOT
63440: IFTRUE 63454
63442: PUSH
63443: LD_VAR 0 1
63447: PPUSH
63448: CALL_OW 310
63452: NOT
63453: OR
63454: IFFALSE 63458
// exit ;
63456: GO 63548
// vehicle := IsInUnit ( driver ) ;
63458: LD_ADDR_VAR 0 3
63462: PUSH
63463: LD_VAR 0 1
63467: PPUSH
63468: CALL_OW 310
63472: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63473: LD_VAR 0 1
63477: PPUSH
63478: LD_STRING \
63480: PUSH
63481: LD_INT 0
63483: PUSH
63484: LD_INT 0
63486: PUSH
63487: LD_INT 0
63489: PUSH
63490: LD_INT 0
63492: PUSH
63493: LD_INT 0
63495: PUSH
63496: LD_INT 0
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: PUSH
63508: LD_STRING E
63510: PUSH
63511: LD_INT 0
63513: PUSH
63514: LD_INT 0
63516: PUSH
63517: LD_VAR 0 3
63521: PUSH
63522: LD_INT 0
63524: PUSH
63525: LD_INT 0
63527: PUSH
63528: LD_INT 0
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: PPUSH
63544: CALL_OW 447
// end ;
63548: LD_VAR 0 2
63552: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
63553: LD_INT 0
63555: PPUSH
63556: PPUSH
63557: PPUSH
// tmp := [ ] ;
63558: LD_ADDR_VAR 0 5
63562: PUSH
63563: EMPTY
63564: ST_TO_ADDR
// for i in units do
63565: LD_ADDR_VAR 0 4
63569: PUSH
63570: LD_VAR 0 1
63574: PUSH
63575: FOR_IN
63576: IFFALSE 63614
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63578: LD_ADDR_VAR 0 5
63582: PUSH
63583: LD_VAR 0 5
63587: PPUSH
63588: LD_VAR 0 5
63592: PUSH
63593: LD_INT 1
63595: PLUS
63596: PPUSH
63597: LD_VAR 0 4
63601: PPUSH
63602: CALL_OW 256
63606: PPUSH
63607: CALL_OW 2
63611: ST_TO_ADDR
63612: GO 63575
63614: POP
63615: POP
// if not tmp then
63616: LD_VAR 0 5
63620: NOT
63621: IFFALSE 63625
// exit ;
63623: GO 63673
// if asc then
63625: LD_VAR 0 2
63629: IFFALSE 63653
// result := SortListByListAsc ( units , tmp ) else
63631: LD_ADDR_VAR 0 3
63635: PUSH
63636: LD_VAR 0 1
63640: PPUSH
63641: LD_VAR 0 5
63645: PPUSH
63646: CALL_OW 76
63650: ST_TO_ADDR
63651: GO 63673
// result := SortListByListDesc ( units , tmp ) ;
63653: LD_ADDR_VAR 0 3
63657: PUSH
63658: LD_VAR 0 1
63662: PPUSH
63663: LD_VAR 0 5
63667: PPUSH
63668: CALL_OW 77
63672: ST_TO_ADDR
// end ;
63673: LD_VAR 0 3
63677: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63678: LD_INT 0
63680: PPUSH
63681: PPUSH
// task := GetTaskList ( mech ) ;
63682: LD_ADDR_VAR 0 4
63686: PUSH
63687: LD_VAR 0 1
63691: PPUSH
63692: CALL_OW 437
63696: ST_TO_ADDR
// if not task then
63697: LD_VAR 0 4
63701: NOT
63702: IFFALSE 63706
// exit ;
63704: GO 63750
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63706: LD_ADDR_VAR 0 3
63710: PUSH
63711: LD_VAR 0 4
63715: PUSH
63716: LD_INT 1
63718: ARRAY
63719: PUSH
63720: LD_INT 1
63722: ARRAY
63723: PUSH
63724: LD_STRING r
63726: EQUAL
63727: IFFALSE 63749
63729: PUSH
63730: LD_VAR 0 4
63734: PUSH
63735: LD_INT 1
63737: ARRAY
63738: PUSH
63739: LD_INT 4
63741: ARRAY
63742: PUSH
63743: LD_VAR 0 2
63747: EQUAL
63748: AND
63749: ST_TO_ADDR
// end ;
63750: LD_VAR 0 3
63754: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63755: LD_INT 0
63757: PPUSH
// SetDir ( unit , d ) ;
63758: LD_VAR 0 1
63762: PPUSH
63763: LD_VAR 0 4
63767: PPUSH
63768: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
63772: LD_ADDR_VAR 0 6
63776: PUSH
63777: LD_VAR 0 1
63781: PPUSH
63782: LD_VAR 0 2
63786: PPUSH
63787: LD_VAR 0 3
63791: PPUSH
63792: LD_VAR 0 5
63796: PPUSH
63797: CALL_OW 48
63801: ST_TO_ADDR
// end ;
63802: LD_VAR 0 6
63806: RET
// export function ToNaturalNumber ( number ) ; begin
63807: LD_INT 0
63809: PPUSH
// result := number div 1 ;
63810: LD_ADDR_VAR 0 2
63814: PUSH
63815: LD_VAR 0 1
63819: PUSH
63820: LD_INT 1
63822: DIV
63823: ST_TO_ADDR
// if number < 0 then
63824: LD_VAR 0 1
63828: PUSH
63829: LD_INT 0
63831: LESS
63832: IFFALSE 63842
// result := 0 ;
63834: LD_ADDR_VAR 0 2
63838: PUSH
63839: LD_INT 0
63841: ST_TO_ADDR
// end ;
63842: LD_VAR 0 2
63846: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
63847: LD_INT 0
63849: PPUSH
63850: PPUSH
63851: PPUSH
// if not buildings then
63852: LD_VAR 0 1
63856: NOT
63857: IFFALSE 63861
// exit ;
63859: GO 63976
// tmp := [ ] ;
63861: LD_ADDR_VAR 0 5
63865: PUSH
63866: EMPTY
63867: ST_TO_ADDR
// for b in buildings do
63868: LD_ADDR_VAR 0 4
63872: PUSH
63873: LD_VAR 0 1
63877: PUSH
63878: FOR_IN
63879: IFFALSE 63917
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
63881: LD_ADDR_VAR 0 5
63885: PUSH
63886: LD_VAR 0 5
63890: PPUSH
63891: LD_VAR 0 5
63895: PUSH
63896: LD_INT 1
63898: PLUS
63899: PPUSH
63900: LD_VAR 0 4
63904: PPUSH
63905: CALL_OW 266
63909: PPUSH
63910: CALL_OW 1
63914: ST_TO_ADDR
63915: GO 63878
63917: POP
63918: POP
// if not tmp then
63919: LD_VAR 0 5
63923: NOT
63924: IFFALSE 63928
// exit ;
63926: GO 63976
// if asc then
63928: LD_VAR 0 2
63932: IFFALSE 63956
// result := SortListByListAsc ( buildings , tmp ) else
63934: LD_ADDR_VAR 0 3
63938: PUSH
63939: LD_VAR 0 1
63943: PPUSH
63944: LD_VAR 0 5
63948: PPUSH
63949: CALL_OW 76
63953: ST_TO_ADDR
63954: GO 63976
// result := SortListByListDesc ( buildings , tmp ) ;
63956: LD_ADDR_VAR 0 3
63960: PUSH
63961: LD_VAR 0 1
63965: PPUSH
63966: LD_VAR 0 5
63970: PPUSH
63971: CALL_OW 77
63975: ST_TO_ADDR
// end ;
63976: LD_VAR 0 3
63980: RET
// export function SortByClass ( units , class ) ; var un ; begin
63981: LD_INT 0
63983: PPUSH
63984: PPUSH
// if not units or not class then
63985: LD_VAR 0 1
63989: NOT
63990: IFTRUE 63999
63992: PUSH
63993: LD_VAR 0 2
63997: NOT
63998: OR
63999: IFFALSE 64003
// exit ;
64001: GO 64098
// result := [ ] ;
64003: LD_ADDR_VAR 0 3
64007: PUSH
64008: EMPTY
64009: ST_TO_ADDR
// for un in units do
64010: LD_ADDR_VAR 0 4
64014: PUSH
64015: LD_VAR 0 1
64019: PUSH
64020: FOR_IN
64021: IFFALSE 64096
// if GetClass ( un ) = class then
64023: LD_VAR 0 4
64027: PPUSH
64028: CALL_OW 257
64032: PUSH
64033: LD_VAR 0 2
64037: EQUAL
64038: IFFALSE 64065
// result := Insert ( result , 1 , un ) else
64040: LD_ADDR_VAR 0 3
64044: PUSH
64045: LD_VAR 0 3
64049: PPUSH
64050: LD_INT 1
64052: PPUSH
64053: LD_VAR 0 4
64057: PPUSH
64058: CALL_OW 2
64062: ST_TO_ADDR
64063: GO 64094
// result := Replace ( result , result + 1 , un ) ;
64065: LD_ADDR_VAR 0 3
64069: PUSH
64070: LD_VAR 0 3
64074: PPUSH
64075: LD_VAR 0 3
64079: PUSH
64080: LD_INT 1
64082: PLUS
64083: PPUSH
64084: LD_VAR 0 4
64088: PPUSH
64089: CALL_OW 1
64093: ST_TO_ADDR
64094: GO 64020
64096: POP
64097: POP
// end ;
64098: LD_VAR 0 3
64102: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64103: LD_INT 0
64105: PPUSH
64106: PPUSH
64107: PPUSH
64108: PPUSH
64109: PPUSH
64110: PPUSH
64111: PPUSH
// result := [ ] ;
64112: LD_ADDR_VAR 0 4
64116: PUSH
64117: EMPTY
64118: ST_TO_ADDR
// if x - r < 0 then
64119: LD_VAR 0 1
64123: PUSH
64124: LD_VAR 0 3
64128: MINUS
64129: PUSH
64130: LD_INT 0
64132: LESS
64133: IFFALSE 64145
// min_x := 0 else
64135: LD_ADDR_VAR 0 8
64139: PUSH
64140: LD_INT 0
64142: ST_TO_ADDR
64143: GO 64161
// min_x := x - r ;
64145: LD_ADDR_VAR 0 8
64149: PUSH
64150: LD_VAR 0 1
64154: PUSH
64155: LD_VAR 0 3
64159: MINUS
64160: ST_TO_ADDR
// if y - r < 0 then
64161: LD_VAR 0 2
64165: PUSH
64166: LD_VAR 0 3
64170: MINUS
64171: PUSH
64172: LD_INT 0
64174: LESS
64175: IFFALSE 64187
// min_y := 0 else
64177: LD_ADDR_VAR 0 7
64181: PUSH
64182: LD_INT 0
64184: ST_TO_ADDR
64185: GO 64203
// min_y := y - r ;
64187: LD_ADDR_VAR 0 7
64191: PUSH
64192: LD_VAR 0 2
64196: PUSH
64197: LD_VAR 0 3
64201: MINUS
64202: ST_TO_ADDR
// max_x := x + r ;
64203: LD_ADDR_VAR 0 9
64207: PUSH
64208: LD_VAR 0 1
64212: PUSH
64213: LD_VAR 0 3
64217: PLUS
64218: ST_TO_ADDR
// max_y := y + r ;
64219: LD_ADDR_VAR 0 10
64223: PUSH
64224: LD_VAR 0 2
64228: PUSH
64229: LD_VAR 0 3
64233: PLUS
64234: ST_TO_ADDR
// for _x = min_x to max_x do
64235: LD_ADDR_VAR 0 5
64239: PUSH
64240: DOUBLE
64241: LD_VAR 0 8
64245: DEC
64246: ST_TO_ADDR
64247: LD_VAR 0 9
64251: PUSH
64252: FOR_TO
64253: IFFALSE 64354
// for _y = min_y to max_y do
64255: LD_ADDR_VAR 0 6
64259: PUSH
64260: DOUBLE
64261: LD_VAR 0 7
64265: DEC
64266: ST_TO_ADDR
64267: LD_VAR 0 10
64271: PUSH
64272: FOR_TO
64273: IFFALSE 64350
// begin if not ValidHex ( _x , _y ) then
64275: LD_VAR 0 5
64279: PPUSH
64280: LD_VAR 0 6
64284: PPUSH
64285: CALL_OW 488
64289: NOT
64290: IFFALSE 64294
// continue ;
64292: GO 64272
// if GetResourceTypeXY ( _x , _y ) then
64294: LD_VAR 0 5
64298: PPUSH
64299: LD_VAR 0 6
64303: PPUSH
64304: CALL_OW 283
64308: IFFALSE 64348
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64310: LD_ADDR_VAR 0 4
64314: PUSH
64315: LD_VAR 0 4
64319: PPUSH
64320: LD_VAR 0 4
64324: PUSH
64325: LD_INT 1
64327: PLUS
64328: PPUSH
64329: LD_VAR 0 5
64333: PUSH
64334: LD_VAR 0 6
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PPUSH
64343: CALL_OW 1
64347: ST_TO_ADDR
// end ;
64348: GO 64272
64350: POP
64351: POP
64352: GO 64252
64354: POP
64355: POP
// end ;
64356: LD_VAR 0 4
64360: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
64361: LD_INT 0
64363: PPUSH
64364: PPUSH
64365: PPUSH
64366: PPUSH
64367: PPUSH
64368: PPUSH
64369: PPUSH
64370: PPUSH
// if not units then
64371: LD_VAR 0 1
64375: NOT
64376: IFFALSE 64380
// exit ;
64378: GO 64912
// result := UnitFilter ( units , [ f_ok ] ) ;
64380: LD_ADDR_VAR 0 3
64384: PUSH
64385: LD_VAR 0 1
64389: PPUSH
64390: LD_INT 50
64392: PUSH
64393: EMPTY
64394: LIST
64395: PPUSH
64396: CALL_OW 72
64400: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64401: LD_ADDR_VAR 0 8
64405: PUSH
64406: LD_VAR 0 1
64410: PUSH
64411: LD_INT 1
64413: ARRAY
64414: PPUSH
64415: CALL_OW 255
64419: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
64420: LD_ADDR_VAR 0 10
64424: PUSH
64425: LD_INT 29
64427: PUSH
64428: LD_INT 91
64430: PUSH
64431: LD_INT 49
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: LIST
64438: ST_TO_ADDR
// if not result then
64439: LD_VAR 0 3
64443: NOT
64444: IFFALSE 64448
// exit ;
64446: GO 64912
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64448: LD_ADDR_VAR 0 5
64452: PUSH
64453: LD_INT 81
64455: PUSH
64456: LD_VAR 0 8
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PPUSH
64465: CALL_OW 69
64469: ST_TO_ADDR
// for i in result do
64470: LD_ADDR_VAR 0 4
64474: PUSH
64475: LD_VAR 0 3
64479: PUSH
64480: FOR_IN
64481: IFFALSE 64910
// begin tag := GetTag ( i ) + 1 ;
64483: LD_ADDR_VAR 0 9
64487: PUSH
64488: LD_VAR 0 4
64492: PPUSH
64493: CALL_OW 110
64497: PUSH
64498: LD_INT 1
64500: PLUS
64501: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
64502: LD_ADDR_VAR 0 7
64506: PUSH
64507: LD_VAR 0 4
64511: PPUSH
64512: CALL_OW 250
64516: PPUSH
64517: LD_VAR 0 4
64521: PPUSH
64522: CALL_OW 251
64526: PPUSH
64527: LD_INT 4
64529: PPUSH
64530: CALL 64103 0 3
64534: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
64535: LD_VAR 0 4
64539: PPUSH
64540: CALL_OW 247
64544: PUSH
64545: LD_INT 2
64547: EQUAL
64548: IFFALSE 64560
64550: PUSH
64551: LD_VAR 0 7
64555: PUSH
64556: LD_INT 2
64558: GREATER
64559: AND
64560: IFFALSE 64580
64562: PUSH
64563: LD_VAR 0 4
64567: PPUSH
64568: CALL_OW 264
64572: PUSH
64573: LD_VAR 0 10
64577: IN
64578: NOT
64579: AND
64580: IFFALSE 64619
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
64582: LD_VAR 0 4
64586: PPUSH
64587: LD_VAR 0 7
64591: PUSH
64592: LD_INT 1
64594: ARRAY
64595: PUSH
64596: LD_INT 1
64598: ARRAY
64599: PPUSH
64600: LD_VAR 0 7
64604: PUSH
64605: LD_INT 1
64607: ARRAY
64608: PUSH
64609: LD_INT 2
64611: ARRAY
64612: PPUSH
64613: CALL_OW 116
64617: GO 64908
// if path > tag then
64619: LD_VAR 0 2
64623: PUSH
64624: LD_VAR 0 9
64628: GREATER
64629: IFFALSE 64837
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
64631: LD_ADDR_VAR 0 6
64635: PUSH
64636: LD_VAR 0 5
64640: PPUSH
64641: LD_INT 91
64643: PUSH
64644: LD_VAR 0 4
64648: PUSH
64649: LD_INT 8
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: LIST
64656: PPUSH
64657: CALL_OW 72
64661: ST_TO_ADDR
// if nearEnemy then
64662: LD_VAR 0 6
64666: IFFALSE 64735
// begin if GetWeapon ( i ) = ru_time_lapser then
64668: LD_VAR 0 4
64672: PPUSH
64673: CALL_OW 264
64677: PUSH
64678: LD_INT 49
64680: EQUAL
64681: IFFALSE 64709
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
64683: LD_VAR 0 4
64687: PPUSH
64688: LD_VAR 0 6
64692: PPUSH
64693: LD_VAR 0 4
64697: PPUSH
64698: CALL_OW 74
64702: PPUSH
64703: CALL_OW 112
64707: GO 64733
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
64709: LD_VAR 0 4
64713: PPUSH
64714: LD_VAR 0 6
64718: PPUSH
64719: LD_VAR 0 4
64723: PPUSH
64724: CALL_OW 74
64728: PPUSH
64729: CALL 65993 0 2
// end else
64733: GO 64835
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
64735: LD_VAR 0 4
64739: PPUSH
64740: LD_VAR 0 2
64744: PUSH
64745: LD_VAR 0 9
64749: ARRAY
64750: PUSH
64751: LD_INT 1
64753: ARRAY
64754: PPUSH
64755: LD_VAR 0 2
64759: PUSH
64760: LD_VAR 0 9
64764: ARRAY
64765: PUSH
64766: LD_INT 2
64768: ARRAY
64769: PPUSH
64770: CALL_OW 297
64774: PUSH
64775: LD_INT 6
64777: GREATER
64778: IFFALSE 64821
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
64780: LD_VAR 0 4
64784: PPUSH
64785: LD_VAR 0 2
64789: PUSH
64790: LD_VAR 0 9
64794: ARRAY
64795: PUSH
64796: LD_INT 1
64798: ARRAY
64799: PPUSH
64800: LD_VAR 0 2
64804: PUSH
64805: LD_VAR 0 9
64809: ARRAY
64810: PUSH
64811: LD_INT 2
64813: ARRAY
64814: PPUSH
64815: CALL_OW 114
64819: GO 64835
// SetTag ( i , tag ) ;
64821: LD_VAR 0 4
64825: PPUSH
64826: LD_VAR 0 9
64830: PPUSH
64831: CALL_OW 109
// end else
64835: GO 64908
// if enemy then
64837: LD_VAR 0 5
64841: IFFALSE 64908
// begin if GetWeapon ( i ) = ru_time_lapser then
64843: LD_VAR 0 4
64847: PPUSH
64848: CALL_OW 264
64852: PUSH
64853: LD_INT 49
64855: EQUAL
64856: IFFALSE 64884
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
64858: LD_VAR 0 4
64862: PPUSH
64863: LD_VAR 0 5
64867: PPUSH
64868: LD_VAR 0 4
64872: PPUSH
64873: CALL_OW 74
64877: PPUSH
64878: CALL_OW 112
64882: GO 64908
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
64884: LD_VAR 0 4
64888: PPUSH
64889: LD_VAR 0 5
64893: PPUSH
64894: LD_VAR 0 4
64898: PPUSH
64899: CALL_OW 74
64903: PPUSH
64904: CALL 65993 0 2
// end ; end ;
64908: GO 64480
64910: POP
64911: POP
// end ;
64912: LD_VAR 0 3
64916: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
64917: LD_INT 0
64919: PPUSH
64920: PPUSH
64921: PPUSH
// if not unit or IsInUnit ( unit ) then
64922: LD_VAR 0 1
64926: NOT
64927: IFTRUE 64940
64929: PUSH
64930: LD_VAR 0 1
64934: PPUSH
64935: CALL_OW 310
64939: OR
64940: IFFALSE 64944
// exit ;
64942: GO 65035
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
64944: LD_ADDR_VAR 0 4
64948: PUSH
64949: LD_VAR 0 1
64953: PPUSH
64954: CALL_OW 250
64958: PPUSH
64959: LD_VAR 0 2
64963: PPUSH
64964: LD_INT 1
64966: PPUSH
64967: CALL_OW 272
64971: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
64972: LD_ADDR_VAR 0 5
64976: PUSH
64977: LD_VAR 0 1
64981: PPUSH
64982: CALL_OW 251
64986: PPUSH
64987: LD_VAR 0 2
64991: PPUSH
64992: LD_INT 1
64994: PPUSH
64995: CALL_OW 273
64999: ST_TO_ADDR
// if ValidHex ( x , y ) then
65000: LD_VAR 0 4
65004: PPUSH
65005: LD_VAR 0 5
65009: PPUSH
65010: CALL_OW 488
65014: IFFALSE 65035
// ComTurnXY ( unit , x , y ) ;
65016: LD_VAR 0 1
65020: PPUSH
65021: LD_VAR 0 4
65025: PPUSH
65026: LD_VAR 0 5
65030: PPUSH
65031: CALL_OW 118
// end ;
65035: LD_VAR 0 3
65039: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65040: LD_INT 0
65042: PPUSH
65043: PPUSH
// result := false ;
65044: LD_ADDR_VAR 0 3
65048: PUSH
65049: LD_INT 0
65051: ST_TO_ADDR
// if not units then
65052: LD_VAR 0 2
65056: NOT
65057: IFFALSE 65061
// exit ;
65059: GO 65106
// for i in units do
65061: LD_ADDR_VAR 0 4
65065: PUSH
65066: LD_VAR 0 2
65070: PUSH
65071: FOR_IN
65072: IFFALSE 65104
// if See ( side , i ) then
65074: LD_VAR 0 1
65078: PPUSH
65079: LD_VAR 0 4
65083: PPUSH
65084: CALL_OW 292
65088: IFFALSE 65102
// begin result := true ;
65090: LD_ADDR_VAR 0 3
65094: PUSH
65095: LD_INT 1
65097: ST_TO_ADDR
// exit ;
65098: POP
65099: POP
65100: GO 65106
// end ;
65102: GO 65071
65104: POP
65105: POP
// end ;
65106: LD_VAR 0 3
65110: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
65111: LD_INT 0
65113: PPUSH
65114: PPUSH
65115: PPUSH
65116: PPUSH
// if not unit or not points then
65117: LD_VAR 0 1
65121: NOT
65122: IFTRUE 65131
65124: PUSH
65125: LD_VAR 0 2
65129: NOT
65130: OR
65131: IFFALSE 65135
// exit ;
65133: GO 65225
// dist := 99999 ;
65135: LD_ADDR_VAR 0 5
65139: PUSH
65140: LD_INT 99999
65142: ST_TO_ADDR
// for i in points do
65143: LD_ADDR_VAR 0 4
65147: PUSH
65148: LD_VAR 0 2
65152: PUSH
65153: FOR_IN
65154: IFFALSE 65223
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
65156: LD_ADDR_VAR 0 6
65160: PUSH
65161: LD_VAR 0 1
65165: PPUSH
65166: LD_VAR 0 4
65170: PUSH
65171: LD_INT 1
65173: ARRAY
65174: PPUSH
65175: LD_VAR 0 4
65179: PUSH
65180: LD_INT 2
65182: ARRAY
65183: PPUSH
65184: CALL_OW 297
65188: ST_TO_ADDR
// if tmpDist < dist then
65189: LD_VAR 0 6
65193: PUSH
65194: LD_VAR 0 5
65198: LESS
65199: IFFALSE 65221
// begin result := i ;
65201: LD_ADDR_VAR 0 3
65205: PUSH
65206: LD_VAR 0 4
65210: ST_TO_ADDR
// dist := tmpDist ;
65211: LD_ADDR_VAR 0 5
65215: PUSH
65216: LD_VAR 0 6
65220: ST_TO_ADDR
// end ; end ;
65221: GO 65153
65223: POP
65224: POP
// end ;
65225: LD_VAR 0 3
65229: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
65230: LD_INT 0
65232: PPUSH
// uc_side := side ;
65233: LD_ADDR_OWVAR 20
65237: PUSH
65238: LD_VAR 0 1
65242: ST_TO_ADDR
// uc_nation := 3 ;
65243: LD_ADDR_OWVAR 21
65247: PUSH
65248: LD_INT 3
65250: ST_TO_ADDR
// vc_chassis := 25 ;
65251: LD_ADDR_OWVAR 37
65255: PUSH
65256: LD_INT 25
65258: ST_TO_ADDR
// vc_engine := engine_siberite ;
65259: LD_ADDR_OWVAR 39
65263: PUSH
65264: LD_INT 3
65266: ST_TO_ADDR
// vc_control := control_computer ;
65267: LD_ADDR_OWVAR 38
65271: PUSH
65272: LD_INT 3
65274: ST_TO_ADDR
// vc_weapon := 59 ;
65275: LD_ADDR_OWVAR 40
65279: PUSH
65280: LD_INT 59
65282: ST_TO_ADDR
// result := CreateVehicle ;
65283: LD_ADDR_VAR 0 5
65287: PUSH
65288: CALL_OW 45
65292: ST_TO_ADDR
// SetDir ( result , d ) ;
65293: LD_VAR 0 5
65297: PPUSH
65298: LD_VAR 0 4
65302: PPUSH
65303: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
65307: LD_VAR 0 5
65311: PPUSH
65312: LD_VAR 0 2
65316: PPUSH
65317: LD_VAR 0 3
65321: PPUSH
65322: LD_INT 0
65324: PPUSH
65325: CALL_OW 48
// end ;
65329: LD_VAR 0 5
65333: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
65334: LD_INT 0
65336: PPUSH
65337: PPUSH
65338: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
65339: LD_ADDR_VAR 0 2
65343: PUSH
65344: LD_INT 0
65346: PUSH
65347: LD_INT 0
65349: PUSH
65350: LD_INT 0
65352: PUSH
65353: LD_INT 0
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: LIST
65360: LIST
65361: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
65362: LD_VAR 0 1
65366: NOT
65367: IFTRUE 65400
65369: PUSH
65370: LD_VAR 0 1
65374: PPUSH
65375: CALL_OW 264
65379: PUSH
65380: LD_INT 12
65382: PUSH
65383: LD_INT 51
65385: PUSH
65386: LD_INT 32
65388: PUSH
65389: LD_INT 89
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: LIST
65396: LIST
65397: IN
65398: NOT
65399: OR
65400: IFFALSE 65404
// exit ;
65402: GO 65502
// for i := 1 to 3 do
65404: LD_ADDR_VAR 0 3
65408: PUSH
65409: DOUBLE
65410: LD_INT 1
65412: DEC
65413: ST_TO_ADDR
65414: LD_INT 3
65416: PUSH
65417: FOR_TO
65418: IFFALSE 65500
// begin tmp := GetCargo ( cargo , i ) ;
65420: LD_ADDR_VAR 0 4
65424: PUSH
65425: LD_VAR 0 1
65429: PPUSH
65430: LD_VAR 0 3
65434: PPUSH
65435: CALL_OW 289
65439: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
65440: LD_ADDR_VAR 0 2
65444: PUSH
65445: LD_VAR 0 2
65449: PPUSH
65450: LD_VAR 0 3
65454: PPUSH
65455: LD_VAR 0 4
65459: PPUSH
65460: CALL_OW 1
65464: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
65465: LD_ADDR_VAR 0 2
65469: PUSH
65470: LD_VAR 0 2
65474: PPUSH
65475: LD_INT 4
65477: PPUSH
65478: LD_VAR 0 2
65482: PUSH
65483: LD_INT 4
65485: ARRAY
65486: PUSH
65487: LD_VAR 0 4
65491: PLUS
65492: PPUSH
65493: CALL_OW 1
65497: ST_TO_ADDR
// end ;
65498: GO 65417
65500: POP
65501: POP
// end ;
65502: LD_VAR 0 2
65506: RET
// export function Length ( array ) ; begin
65507: LD_INT 0
65509: PPUSH
// result := array + 0 ;
65510: LD_ADDR_VAR 0 2
65514: PUSH
65515: LD_VAR 0 1
65519: PUSH
65520: LD_INT 0
65522: PLUS
65523: ST_TO_ADDR
// end ;
65524: LD_VAR 0 2
65528: RET
// export function PrepareArray ( array ) ; begin
65529: LD_INT 0
65531: PPUSH
// result := array diff 0 ;
65532: LD_ADDR_VAR 0 2
65536: PUSH
65537: LD_VAR 0 1
65541: PUSH
65542: LD_INT 0
65544: DIFF
65545: ST_TO_ADDR
// if not result [ 1 ] then
65546: LD_VAR 0 2
65550: PUSH
65551: LD_INT 1
65553: ARRAY
65554: NOT
65555: IFFALSE 65575
// result := Delete ( result , 1 ) ;
65557: LD_ADDR_VAR 0 2
65561: PUSH
65562: LD_VAR 0 2
65566: PPUSH
65567: LD_INT 1
65569: PPUSH
65570: CALL_OW 3
65574: ST_TO_ADDR
// end ;
65575: LD_VAR 0 2
65579: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
65580: LD_INT 0
65582: PPUSH
65583: PPUSH
65584: PPUSH
65585: PPUSH
// sibRocketRange := 25 ;
65586: LD_ADDR_VAR 0 6
65590: PUSH
65591: LD_INT 25
65593: ST_TO_ADDR
// result := false ;
65594: LD_ADDR_VAR 0 4
65598: PUSH
65599: LD_INT 0
65601: ST_TO_ADDR
// for i := 0 to 5 do
65602: LD_ADDR_VAR 0 5
65606: PUSH
65607: DOUBLE
65608: LD_INT 0
65610: DEC
65611: ST_TO_ADDR
65612: LD_INT 5
65614: PUSH
65615: FOR_TO
65616: IFFALSE 65683
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
65618: LD_VAR 0 1
65622: PPUSH
65623: LD_VAR 0 5
65627: PPUSH
65628: LD_VAR 0 6
65632: PPUSH
65633: CALL_OW 272
65637: PPUSH
65638: LD_VAR 0 2
65642: PPUSH
65643: LD_VAR 0 5
65647: PPUSH
65648: LD_VAR 0 6
65652: PPUSH
65653: CALL_OW 273
65657: PPUSH
65658: LD_VAR 0 3
65662: PPUSH
65663: CALL_OW 309
65667: IFFALSE 65681
// begin result := true ;
65669: LD_ADDR_VAR 0 4
65673: PUSH
65674: LD_INT 1
65676: ST_TO_ADDR
// exit ;
65677: POP
65678: POP
65679: GO 65685
// end ;
65681: GO 65615
65683: POP
65684: POP
// end ;
65685: LD_VAR 0 4
65689: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
65690: LD_INT 0
65692: PPUSH
65693: PPUSH
65694: PPUSH
// if btype = b_depot then
65695: LD_VAR 0 2
65699: PUSH
65700: LD_INT 0
65702: EQUAL
65703: IFFALSE 65715
// begin result := true ;
65705: LD_ADDR_VAR 0 3
65709: PUSH
65710: LD_INT 1
65712: ST_TO_ADDR
// exit ;
65713: GO 65835
// end ; pom := GetBase ( depot ) ;
65715: LD_ADDR_VAR 0 4
65719: PUSH
65720: LD_VAR 0 1
65724: PPUSH
65725: CALL_OW 274
65729: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
65730: LD_ADDR_VAR 0 5
65734: PUSH
65735: LD_VAR 0 2
65739: PPUSH
65740: LD_VAR 0 1
65744: PPUSH
65745: CALL_OW 248
65749: PPUSH
65750: CALL_OW 450
65754: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
65755: LD_ADDR_VAR 0 3
65759: PUSH
65760: LD_VAR 0 4
65764: PPUSH
65765: LD_INT 1
65767: PPUSH
65768: CALL_OW 275
65772: PUSH
65773: LD_VAR 0 5
65777: PUSH
65778: LD_INT 1
65780: ARRAY
65781: GREATEREQUAL
65782: IFFALSE 65808
65784: PUSH
65785: LD_VAR 0 4
65789: PPUSH
65790: LD_INT 2
65792: PPUSH
65793: CALL_OW 275
65797: PUSH
65798: LD_VAR 0 5
65802: PUSH
65803: LD_INT 2
65805: ARRAY
65806: GREATEREQUAL
65807: AND
65808: IFFALSE 65834
65810: PUSH
65811: LD_VAR 0 4
65815: PPUSH
65816: LD_INT 3
65818: PPUSH
65819: CALL_OW 275
65823: PUSH
65824: LD_VAR 0 5
65828: PUSH
65829: LD_INT 3
65831: ARRAY
65832: GREATEREQUAL
65833: AND
65834: ST_TO_ADDR
// end ;
65835: LD_VAR 0 3
65839: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
65840: LD_INT 0
65842: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
65843: LD_VAR 0 1
65847: PPUSH
65848: LD_VAR 0 2
65852: PPUSH
65853: LD_INT 0
65855: PPUSH
65856: LD_INT 0
65858: PPUSH
65859: LD_INT 1
65861: PPUSH
65862: LD_INT 0
65864: PPUSH
65865: CALL_OW 587
// end ;
65869: LD_VAR 0 3
65873: RET
// export function CenterOnNow ( unit ) ; begin
65874: LD_INT 0
65876: PPUSH
// result := IsInUnit ( unit ) ;
65877: LD_ADDR_VAR 0 2
65881: PUSH
65882: LD_VAR 0 1
65886: PPUSH
65887: CALL_OW 310
65891: ST_TO_ADDR
// if not result then
65892: LD_VAR 0 2
65896: NOT
65897: IFFALSE 65909
// result := unit ;
65899: LD_ADDR_VAR 0 2
65903: PUSH
65904: LD_VAR 0 1
65908: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
65909: LD_VAR 0 1
65913: PPUSH
65914: CALL_OW 87
// end ;
65918: LD_VAR 0 2
65922: RET
// export function ComMoveHex ( unit , hex ) ; begin
65923: LD_INT 0
65925: PPUSH
// if not hex then
65926: LD_VAR 0 2
65930: NOT
65931: IFFALSE 65935
// exit ;
65933: GO 65988
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
65935: LD_VAR 0 2
65939: PUSH
65940: LD_INT 1
65942: ARRAY
65943: PPUSH
65944: LD_VAR 0 2
65948: PUSH
65949: LD_INT 2
65951: ARRAY
65952: PPUSH
65953: CALL_OW 428
65957: IFFALSE 65961
// exit ;
65959: GO 65988
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
65961: LD_VAR 0 1
65965: PPUSH
65966: LD_VAR 0 2
65970: PUSH
65971: LD_INT 1
65973: ARRAY
65974: PPUSH
65975: LD_VAR 0 2
65979: PUSH
65980: LD_INT 2
65982: ARRAY
65983: PPUSH
65984: CALL_OW 111
// end ;
65988: LD_VAR 0 3
65992: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
65993: LD_INT 0
65995: PPUSH
65996: PPUSH
65997: PPUSH
// if not unit or not enemy then
65998: LD_VAR 0 1
66002: NOT
66003: IFTRUE 66012
66005: PUSH
66006: LD_VAR 0 2
66010: NOT
66011: OR
66012: IFFALSE 66016
// exit ;
66014: GO 66142
// x := GetX ( enemy ) ;
66016: LD_ADDR_VAR 0 4
66020: PUSH
66021: LD_VAR 0 2
66025: PPUSH
66026: CALL_OW 250
66030: ST_TO_ADDR
// y := GetY ( enemy ) ;
66031: LD_ADDR_VAR 0 5
66035: PUSH
66036: LD_VAR 0 2
66040: PPUSH
66041: CALL_OW 251
66045: ST_TO_ADDR
// if ValidHex ( x , y ) then
66046: LD_VAR 0 4
66050: PPUSH
66051: LD_VAR 0 5
66055: PPUSH
66056: CALL_OW 488
66060: IFFALSE 66142
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
66062: LD_VAR 0 2
66066: PPUSH
66067: CALL_OW 247
66071: PUSH
66072: LD_INT 3
66074: PUSH
66075: LD_INT 2
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: IN
66082: IFTRUE 66105
66084: PUSH
66085: LD_VAR 0 1
66089: PPUSH
66090: CALL_OW 255
66094: PPUSH
66095: LD_VAR 0 2
66099: PPUSH
66100: CALL_OW 292
66104: OR
66105: IFFALSE 66123
// ComAttackUnit ( unit , enemy ) else
66107: LD_VAR 0 1
66111: PPUSH
66112: LD_VAR 0 2
66116: PPUSH
66117: CALL_OW 115
66121: GO 66142
// ComAgressiveMove ( unit , x , y ) ;
66123: LD_VAR 0 1
66127: PPUSH
66128: LD_VAR 0 4
66132: PPUSH
66133: LD_VAR 0 5
66137: PPUSH
66138: CALL_OW 114
// end ;
66142: LD_VAR 0 3
66146: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
66147: LD_INT 0
66149: PPUSH
66150: PPUSH
66151: PPUSH
// list := AreaToList ( area , 0 ) ;
66152: LD_ADDR_VAR 0 5
66156: PUSH
66157: LD_VAR 0 1
66161: PPUSH
66162: LD_INT 0
66164: PPUSH
66165: CALL_OW 517
66169: ST_TO_ADDR
// if not list then
66170: LD_VAR 0 5
66174: NOT
66175: IFFALSE 66179
// exit ;
66177: GO 66309
// if all then
66179: LD_VAR 0 2
66183: IFFALSE 66271
// begin for i := 1 to list [ 1 ] do
66185: LD_ADDR_VAR 0 4
66189: PUSH
66190: DOUBLE
66191: LD_INT 1
66193: DEC
66194: ST_TO_ADDR
66195: LD_VAR 0 5
66199: PUSH
66200: LD_INT 1
66202: ARRAY
66203: PUSH
66204: FOR_TO
66205: IFFALSE 66267
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
66207: LD_ADDR_VAR 0 3
66211: PUSH
66212: LD_VAR 0 3
66216: PPUSH
66217: LD_VAR 0 3
66221: PUSH
66222: LD_INT 1
66224: PLUS
66225: PPUSH
66226: LD_VAR 0 5
66230: PUSH
66231: LD_INT 1
66233: ARRAY
66234: PUSH
66235: LD_VAR 0 4
66239: ARRAY
66240: PUSH
66241: LD_VAR 0 5
66245: PUSH
66246: LD_INT 2
66248: ARRAY
66249: PUSH
66250: LD_VAR 0 4
66254: ARRAY
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PPUSH
66260: CALL_OW 1
66264: ST_TO_ADDR
66265: GO 66204
66267: POP
66268: POP
// exit ;
66269: GO 66309
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
66271: LD_ADDR_VAR 0 3
66275: PUSH
66276: LD_VAR 0 5
66280: PUSH
66281: LD_INT 1
66283: ARRAY
66284: PUSH
66285: LD_INT 1
66287: ARRAY
66288: PUSH
66289: LD_VAR 0 5
66293: PUSH
66294: LD_INT 2
66296: ARRAY
66297: PUSH
66298: LD_INT 1
66300: ARRAY
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: PUSH
66306: EMPTY
66307: LIST
66308: ST_TO_ADDR
// end ;
66309: LD_VAR 0 3
66313: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
66314: LD_INT 0
66316: PPUSH
66317: PPUSH
// list := AreaToList ( area , 0 ) ;
66318: LD_ADDR_VAR 0 4
66322: PUSH
66323: LD_VAR 0 1
66327: PPUSH
66328: LD_INT 0
66330: PPUSH
66331: CALL_OW 517
66335: ST_TO_ADDR
// if not list then
66336: LD_VAR 0 4
66340: NOT
66341: IFFALSE 66345
// exit ;
66343: GO 66386
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
66345: LD_ADDR_VAR 0 3
66349: PUSH
66350: LD_VAR 0 4
66354: PUSH
66355: LD_INT 1
66357: ARRAY
66358: PUSH
66359: LD_INT 1
66361: ARRAY
66362: PUSH
66363: LD_VAR 0 4
66367: PUSH
66368: LD_INT 2
66370: ARRAY
66371: PUSH
66372: LD_INT 1
66374: ARRAY
66375: PUSH
66376: LD_VAR 0 2
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: LIST
66385: ST_TO_ADDR
// end ;
66386: LD_VAR 0 3
66390: RET
// export function First ( array ) ; begin
66391: LD_INT 0
66393: PPUSH
// if not array then
66394: LD_VAR 0 1
66398: NOT
66399: IFFALSE 66403
// exit ;
66401: GO 66417
// result := array [ 1 ] ;
66403: LD_ADDR_VAR 0 2
66407: PUSH
66408: LD_VAR 0 1
66412: PUSH
66413: LD_INT 1
66415: ARRAY
66416: ST_TO_ADDR
// end ;
66417: LD_VAR 0 2
66421: RET
// export function Last ( array ) ; begin
66422: LD_INT 0
66424: PPUSH
// if not array then
66425: LD_VAR 0 1
66429: NOT
66430: IFFALSE 66434
// exit ;
66432: GO 66450
// result := array [ array ] ;
66434: LD_ADDR_VAR 0 2
66438: PUSH
66439: LD_VAR 0 1
66443: PUSH
66444: LD_VAR 0 1
66448: ARRAY
66449: ST_TO_ADDR
// end ;
66450: LD_VAR 0 2
66454: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
66455: LD_INT 0
66457: PPUSH
66458: PPUSH
// result := [ ] ;
66459: LD_ADDR_VAR 0 5
66463: PUSH
66464: EMPTY
66465: ST_TO_ADDR
// if not array then
66466: LD_VAR 0 1
66470: NOT
66471: IFFALSE 66475
// exit ;
66473: GO 66587
// for i := 1 to array do
66475: LD_ADDR_VAR 0 6
66479: PUSH
66480: DOUBLE
66481: LD_INT 1
66483: DEC
66484: ST_TO_ADDR
66485: LD_VAR 0 1
66489: PUSH
66490: FOR_TO
66491: IFFALSE 66585
// if array [ i ] [ index ] = value then
66493: LD_VAR 0 1
66497: PUSH
66498: LD_VAR 0 6
66502: ARRAY
66503: PUSH
66504: LD_VAR 0 2
66508: ARRAY
66509: PUSH
66510: LD_VAR 0 3
66514: EQUAL
66515: IFFALSE 66583
// begin if indexColumn then
66517: LD_VAR 0 4
66521: IFFALSE 66557
// result := Join ( result , array [ i ] [ indexColumn ] ) else
66523: LD_ADDR_VAR 0 5
66527: PUSH
66528: LD_VAR 0 5
66532: PPUSH
66533: LD_VAR 0 1
66537: PUSH
66538: LD_VAR 0 6
66542: ARRAY
66543: PUSH
66544: LD_VAR 0 4
66548: ARRAY
66549: PPUSH
66550: CALL 61595 0 2
66554: ST_TO_ADDR
66555: GO 66583
// result := Join ( result , array [ i ] ) ;
66557: LD_ADDR_VAR 0 5
66561: PUSH
66562: LD_VAR 0 5
66566: PPUSH
66567: LD_VAR 0 1
66571: PUSH
66572: LD_VAR 0 6
66576: ARRAY
66577: PPUSH
66578: CALL 61595 0 2
66582: ST_TO_ADDR
// end ;
66583: GO 66490
66585: POP
66586: POP
// end ;
66587: LD_VAR 0 5
66591: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
66592: LD_INT 0
66594: PPUSH
// if not vehicles or not parkingPoint then
66595: LD_VAR 0 1
66599: NOT
66600: IFTRUE 66609
66602: PUSH
66603: LD_VAR 0 2
66607: NOT
66608: OR
66609: IFFALSE 66613
// exit ;
66611: GO 66711
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
66613: LD_ADDR_VAR 0 1
66617: PUSH
66618: LD_VAR 0 1
66622: PPUSH
66623: LD_INT 50
66625: PUSH
66626: EMPTY
66627: LIST
66628: PUSH
66629: LD_INT 3
66631: PUSH
66632: LD_INT 92
66634: PUSH
66635: LD_VAR 0 2
66639: PUSH
66640: LD_INT 1
66642: ARRAY
66643: PUSH
66644: LD_VAR 0 2
66648: PUSH
66649: LD_INT 2
66651: ARRAY
66652: PUSH
66653: LD_INT 8
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: PPUSH
66670: CALL_OW 72
66674: ST_TO_ADDR
// if not vehicles then
66675: LD_VAR 0 1
66679: NOT
66680: IFFALSE 66684
// exit ;
66682: GO 66711
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
66684: LD_VAR 0 1
66688: PPUSH
66689: LD_VAR 0 2
66693: PUSH
66694: LD_INT 1
66696: ARRAY
66697: PPUSH
66698: LD_VAR 0 2
66702: PUSH
66703: LD_INT 2
66705: ARRAY
66706: PPUSH
66707: CALL_OW 111
// end ;
66711: LD_VAR 0 3
66715: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
66716: LD_INT 0
66718: PPUSH
66719: PPUSH
66720: PPUSH
// if not side or not area then
66721: LD_VAR 0 1
66725: NOT
66726: IFTRUE 66735
66728: PUSH
66729: LD_VAR 0 2
66733: NOT
66734: OR
66735: IFFALSE 66739
// exit ;
66737: GO 66858
// tmp := AreaToList ( area , 0 ) ;
66739: LD_ADDR_VAR 0 5
66743: PUSH
66744: LD_VAR 0 2
66748: PPUSH
66749: LD_INT 0
66751: PPUSH
66752: CALL_OW 517
66756: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
66757: LD_ADDR_VAR 0 4
66761: PUSH
66762: DOUBLE
66763: LD_INT 1
66765: DEC
66766: ST_TO_ADDR
66767: LD_VAR 0 5
66771: PUSH
66772: LD_INT 1
66774: ARRAY
66775: PUSH
66776: FOR_TO
66777: IFFALSE 66856
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
66779: LD_VAR 0 5
66783: PUSH
66784: LD_INT 1
66786: ARRAY
66787: PUSH
66788: LD_VAR 0 4
66792: ARRAY
66793: PPUSH
66794: LD_VAR 0 5
66798: PUSH
66799: LD_INT 2
66801: ARRAY
66802: PUSH
66803: LD_VAR 0 4
66807: ARRAY
66808: PPUSH
66809: CALL_OW 351
66813: IFFALSE 66854
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
66815: LD_VAR 0 5
66819: PUSH
66820: LD_INT 1
66822: ARRAY
66823: PUSH
66824: LD_VAR 0 4
66828: ARRAY
66829: PPUSH
66830: LD_VAR 0 5
66834: PUSH
66835: LD_INT 2
66837: ARRAY
66838: PUSH
66839: LD_VAR 0 4
66843: ARRAY
66844: PPUSH
66845: LD_VAR 0 1
66849: PPUSH
66850: CALL_OW 244
// end ;
66854: GO 66776
66856: POP
66857: POP
// end ;
66858: LD_VAR 0 3
66862: RET
// export function UniqueArray ( array ) ; var i ; begin
66863: LD_INT 0
66865: PPUSH
66866: PPUSH
// result := [ ] ;
66867: LD_ADDR_VAR 0 2
66871: PUSH
66872: EMPTY
66873: ST_TO_ADDR
// if not array then
66874: LD_VAR 0 1
66878: NOT
66879: IFFALSE 66883
// exit ;
66881: GO 66944
// for i := 1 to array do
66883: LD_ADDR_VAR 0 3
66887: PUSH
66888: DOUBLE
66889: LD_INT 1
66891: DEC
66892: ST_TO_ADDR
66893: LD_VAR 0 1
66897: PUSH
66898: FOR_TO
66899: IFFALSE 66942
// if not array [ i ] in result then
66901: LD_VAR 0 1
66905: PUSH
66906: LD_VAR 0 3
66910: ARRAY
66911: PUSH
66912: LD_VAR 0 2
66916: IN
66917: NOT
66918: IFFALSE 66940
// result := Join ( result , i ) ;
66920: LD_ADDR_VAR 0 2
66924: PUSH
66925: LD_VAR 0 2
66929: PPUSH
66930: LD_VAR 0 3
66934: PPUSH
66935: CALL 61595 0 2
66939: ST_TO_ADDR
66940: GO 66898
66942: POP
66943: POP
// end ; end_of_file
66944: LD_VAR 0 2
66948: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeFamine do var i , canWin ;
66949: LD_EXP 48
66953: IFFALSE 66961
66955: PUSH
66956: CALL 67171 0 0
66960: AND
66961: IFFALSE 66969
66963: PUSH
66964: LD_OWVAR 4
66968: AND
66969: IFFALSE 67168
66971: GO 66973
66973: DISABLE
66974: LD_INT 0
66976: PPUSH
66977: PPUSH
// begin canWin := false ;
66978: LD_ADDR_VAR 0 2
66982: PUSH
66983: LD_INT 0
66985: ST_TO_ADDR
// if not HasPower ( your_side ) then
66986: LD_OWVAR 2
66990: PPUSH
66991: CALL 67213 0 1
66995: NOT
66996: IFFALSE 67007
// begin Multiplayer_Loose_Message ;
66998: CALL_OW 521
// enable ( mpLose ) ;
67002: LD_INT 102
67004: ENABLE_MARKED
// end else
67005: GO 67168
// begin canWin := true ;
67007: LD_ADDR_VAR 0 2
67011: PUSH
67012: LD_INT 1
67014: ST_TO_ADDR
// for i := 1 to 8 do
67015: LD_ADDR_VAR 0 1
67019: PUSH
67020: DOUBLE
67021: LD_INT 1
67023: DEC
67024: ST_TO_ADDR
67025: LD_INT 8
67027: PUSH
67028: FOR_TO
67029: IFFALSE 67154
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
67031: LD_EXP 16
67035: PUSH
67036: LD_VAR 0 1
67040: ARRAY
67041: IFFALSE 67054
67043: PUSH
67044: LD_VAR 0 1
67048: PPUSH
67049: CALL_OW 108
67053: AND
67054: IFFALSE 67068
67056: PUSH
67057: LD_VAR 0 1
67061: PUSH
67062: LD_OWVAR 2
67066: NONEQUAL
67067: AND
67068: IFFALSE 67152
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
67070: LD_EXP 17
67074: PUSH
67075: LD_VAR 0 1
67079: ARRAY
67080: NOT
67081: IFTRUE 67129
67083: PUSH
67084: LD_EXP 17
67088: PUSH
67089: LD_VAR 0 1
67093: ARRAY
67094: PUSH
67095: LD_EXP 17
67099: PUSH
67100: LD_OWVAR 2
67104: ARRAY
67105: NONEQUAL
67106: IFFALSE 67128
67108: PUSH
67109: LD_OWVAR 2
67113: PPUSH
67114: LD_VAR 0 1
67118: PPUSH
67119: CALL_OW 81
67123: PUSH
67124: LD_INT 1
67126: NONEQUAL
67127: AND
67128: OR
67129: IFFALSE 67152
// if HasPower ( i ) then
67131: LD_VAR 0 1
67135: PPUSH
67136: CALL 67213 0 1
67140: IFFALSE 67152
// begin canWin := false ;
67142: LD_ADDR_VAR 0 2
67146: PUSH
67147: LD_INT 0
67149: ST_TO_ADDR
// break ;
67150: GO 67154
// end ;
67152: GO 67028
67154: POP
67155: POP
// if canWin then
67156: LD_VAR 0 2
67160: IFFALSE 67167
// enable ( mpWin ) else
67162: LD_INT 101
67164: ENABLE_MARKED
67165: GO 67168
// enable ;
67167: ENABLE
// end ; end ;
67168: PPOPN 2
67170: END
// function CanWinLoose ; begin
67171: LD_INT 0
67173: PPUSH
// result := true ;
67174: LD_ADDR_VAR 0 1
67178: PUSH
67179: LD_INT 1
67181: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
67182: CALL_OW 531
67186: IFFALSE 67198
67188: PUSH
67189: CALL_OW 519
67193: PUSH
67194: LD_INT 1
67196: GREATER
67197: AND
67198: IFFALSE 67208
// result := false ;
67200: LD_ADDR_VAR 0 1
67204: PUSH
67205: LD_INT 0
67207: ST_TO_ADDR
// end ;
67208: LD_VAR 0 1
67212: RET
// function HasPower ( i ) ; begin
67213: LD_INT 0
67215: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
67216: LD_ADDR_VAR 0 2
67220: PUSH
67221: LD_INT 22
67223: PUSH
67224: LD_VAR 0 1
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: LD_INT 2
67235: PUSH
67236: LD_INT 21
67238: PUSH
67239: LD_INT 1
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: LD_INT 33
67248: PUSH
67249: LD_INT 3
67251: PUSH
67252: EMPTY
67253: LIST
67254: LIST
67255: PUSH
67256: LD_INT 33
67258: PUSH
67259: LD_INT 5
67261: PUSH
67262: EMPTY
67263: LIST
67264: LIST
67265: PUSH
67266: EMPTY
67267: LIST
67268: LIST
67269: LIST
67270: LIST
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PPUSH
67276: CALL_OW 69
67280: ST_TO_ADDR
// end ;
67281: LD_VAR 0 2
67285: RET
// export function FamineDeposits ( areas , values , type ) ; var i , j , list ; begin
67286: LD_INT 0
67288: PPUSH
67289: PPUSH
67290: PPUSH
67291: PPUSH
// if not areas or not values or not type in [ mat_oil , mat_siberit ] then
67292: LD_VAR 0 1
67296: NOT
67297: IFTRUE 67306
67299: PUSH
67300: LD_VAR 0 2
67304: NOT
67305: OR
67306: IFTRUE 67326
67308: PUSH
67309: LD_VAR 0 3
67313: PUSH
67314: LD_INT 2
67316: PUSH
67317: LD_INT 3
67319: PUSH
67320: EMPTY
67321: LIST
67322: LIST
67323: IN
67324: NOT
67325: OR
67326: IFFALSE 67330
// exit ;
67328: GO 67580
// for i := 1 to Count ( areas ) do
67330: LD_ADDR_VAR 0 5
67334: PUSH
67335: DOUBLE
67336: LD_INT 1
67338: DEC
67339: ST_TO_ADDR
67340: LD_VAR 0 1
67344: PPUSH
67345: CALL 25629 0 1
67349: PUSH
67350: FOR_TO
67351: IFFALSE 67578
// begin list := AreaToList ( areas [ i ] , 0 ) ;
67353: LD_ADDR_VAR 0 7
67357: PUSH
67358: LD_VAR 0 1
67362: PUSH
67363: LD_VAR 0 5
67367: ARRAY
67368: PPUSH
67369: LD_INT 0
67371: PPUSH
67372: CALL_OW 517
67376: ST_TO_ADDR
// for j := 1 to list [ 1 ] do
67377: LD_ADDR_VAR 0 6
67381: PUSH
67382: DOUBLE
67383: LD_INT 1
67385: DEC
67386: ST_TO_ADDR
67387: LD_VAR 0 7
67391: PUSH
67392: LD_INT 1
67394: ARRAY
67395: PUSH
67396: FOR_TO
67397: IFFALSE 67574
// begin CreateDepositXY ( list [ 1 ] [ j ] , list [ 2 ] [ j ] , type ) ;
67399: LD_VAR 0 7
67403: PUSH
67404: LD_INT 1
67406: ARRAY
67407: PUSH
67408: LD_VAR 0 6
67412: ARRAY
67413: PPUSH
67414: LD_VAR 0 7
67418: PUSH
67419: LD_INT 2
67421: ARRAY
67422: PUSH
67423: LD_VAR 0 6
67427: ARRAY
67428: PPUSH
67429: LD_VAR 0 3
67433: PPUSH
67434: CALL_OW 62
// if type = mat_oil then
67438: LD_VAR 0 3
67442: PUSH
67443: LD_INT 2
67445: EQUAL
67446: IFFALSE 67511
// mpGlobalOilDeposits := Join ( mpGlobalOilDeposits , [ list [ 1 ] [ j ] , list [ 2 ] [ j ] , values [ i ] ] ) else
67448: LD_ADDR_EXP 50
67452: PUSH
67453: LD_EXP 50
67457: PPUSH
67458: LD_VAR 0 7
67462: PUSH
67463: LD_INT 1
67465: ARRAY
67466: PUSH
67467: LD_VAR 0 6
67471: ARRAY
67472: PUSH
67473: LD_VAR 0 7
67477: PUSH
67478: LD_INT 2
67480: ARRAY
67481: PUSH
67482: LD_VAR 0 6
67486: ARRAY
67487: PUSH
67488: LD_VAR 0 2
67492: PUSH
67493: LD_VAR 0 5
67497: ARRAY
67498: PUSH
67499: EMPTY
67500: LIST
67501: LIST
67502: LIST
67503: PPUSH
67504: CALL 61595 0 2
67508: ST_TO_ADDR
67509: GO 67572
// mpGlobalSibDeposits := Join ( mpGlobalSibDeposits , [ list [ 1 ] [ j ] , list [ 2 ] [ j ] , values [ i ] ] ) end ;
67511: LD_ADDR_EXP 51
67515: PUSH
67516: LD_EXP 51
67520: PPUSH
67521: LD_VAR 0 7
67525: PUSH
67526: LD_INT 1
67528: ARRAY
67529: PUSH
67530: LD_VAR 0 6
67534: ARRAY
67535: PUSH
67536: LD_VAR 0 7
67540: PUSH
67541: LD_INT 2
67543: ARRAY
67544: PUSH
67545: LD_VAR 0 6
67549: ARRAY
67550: PUSH
67551: LD_VAR 0 2
67555: PUSH
67556: LD_VAR 0 5
67560: ARRAY
67561: PUSH
67562: EMPTY
67563: LIST
67564: LIST
67565: LIST
67566: PPUSH
67567: CALL 61595 0 2
67571: ST_TO_ADDR
67572: GO 67396
67574: POP
67575: POP
// end ;
67576: GO 67350
67578: POP
67579: POP
// end ; end_of_file
67580: LD_VAR 0 4
67584: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
67585: PPOPN 6
67587: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
67588: LD_INT 0
67590: PPUSH
// begin if not units then
67591: LD_VAR 0 1
67595: NOT
67596: IFFALSE 67600
// exit ;
67598: GO 67634
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
67600: LD_VAR 0 1
67604: PPUSH
67605: LD_VAR 0 2
67609: PPUSH
67610: LD_VAR 0 3
67614: PPUSH
67615: LD_VAR 0 4
67619: PPUSH
67620: LD_VAR 0 5
67624: PPUSH
67625: LD_VAR 0 6
67629: PPUSH
67630: CALL 23378 0 6
// end ;
67634: PPOPN 7
67636: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
67637: LD_EXP 12
67641: PUSH
67642: LD_INT 4
67644: EQUAL
67645: IFFALSE 67681
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
67647: LD_STRING setGameDifficulty(
67649: PUSH
67650: LD_OWVAR 67
67654: STR
67655: PUSH
67656: LD_STRING )
67658: STR
67659: PPUSH
67660: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
67664: LD_STRING displayDifficulty(
67666: PUSH
67667: LD_OWVAR 67
67671: STR
67672: PUSH
67673: LD_STRING )
67675: STR
67676: PPUSH
67677: CALL_OW 559
// end ; SOS_MapStart ( ) ;
67681: CALL 15609 0 0
// end ;
67685: PPOPN 1
67687: END
