// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 6574 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 6950 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 0 , 1 , 1 , 0 , 1 , 0 , 0 , 0 , 1 , 0 , 1 , 0 , 1 , 1 , 1 , 1 , 0 , 1 , 1 , 1 , 1 ] ;
  20: LD_ADDR_EXP 13
  24: PUSH
  25: LD_INT 0
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 0
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 0
  42: PUSH
  43: LD_INT 0
  45: PUSH
  46: LD_INT 0
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 0
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 0
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 1
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 1
  81: PUSH
  82: LD_INT 1
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 1 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ 30 , 50 , 100 ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ 0 , 1 ] , [ 0 , 1 ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] , ] ;
 111: LD_ADDR_EXP 14
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 1
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: LD_INT 30
 409: PUSH
 410: LD_INT 50
 412: PUSH
 413: LD_INT 100
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: LIST
 420: PUSH
 421: EMPTY
 422: PUSH
 423: LD_INT 0
 425: PUSH
 426: LD_INT 1
 428: PUSH
 429: LD_INT 31500
 431: PUSH
 432: LD_INT 52500
 434: PUSH
 435: LD_INT 63000
 437: PUSH
 438: LD_INT 94500
 440: PUSH
 441: LD_INT 126000
 443: PUSH
 444: LD_INT 189000
 446: PUSH
 447: LD_INT 210000
 449: PUSH
 450: LD_INT 252000
 452: PUSH
 453: LD_INT 378000
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: LIST
 460: LIST
 461: LIST
 462: LIST
 463: LIST
 464: LIST
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_INT 0
 471: PUSH
 472: LD_INT 1
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: PUSH
 479: LD_INT 0
 481: PUSH
 482: LD_INT 1
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: PUSH
 489: LD_INT 0
 491: PUSH
 492: LD_INT 6300
 494: PUSH
 495: LD_INT 10500
 497: PUSH
 498: LD_INT 16800
 500: PUSH
 501: LD_INT 21000
 503: PUSH
 504: LD_INT 25200
 506: PUSH
 507: LD_INT 31500
 509: PUSH
 510: LD_INT 42000
 512: PUSH
 513: LD_INT 63000
 515: PUSH
 516: EMPTY
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: LIST
 524: LIST
 525: LIST
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: LIST
 534: LIST
 535: LIST
 536: LIST
 537: LIST
 538: LIST
 539: LIST
 540: LIST
 541: LIST
 542: LIST
 543: LIST
 544: LIST
 545: LIST
 546: LIST
 547: LIST
 548: LIST
 549: ST_TO_ADDR
// mpGameSettings := [ 0 , 15 , 4 , [ 0 , 0 , 0 ] , 3 , 0 , 0 , 0 , 1 , 0 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 30 , 0 , 15 15$0 , 1 , 1 , 0 ] ;
 550: LD_ADDR_EXP 15
 554: PUSH
 555: LD_INT 0
 557: PUSH
 558: LD_INT 15
 560: PUSH
 561: LD_INT 4
 563: PUSH
 564: LD_INT 0
 566: PUSH
 567: LD_INT 0
 569: PUSH
 570: LD_INT 0
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: LIST
 577: PUSH
 578: LD_INT 3
 580: PUSH
 581: LD_INT 0
 583: PUSH
 584: LD_INT 0
 586: PUSH
 587: LD_INT 0
 589: PUSH
 590: LD_INT 1
 592: PUSH
 593: LD_INT 0
 595: PUSH
 596: LD_INT 1
 598: PUSH
 599: LD_INT 700
 601: PUSH
 602: LD_INT 1
 604: PUSH
 605: LD_INT 700
 607: PUSH
 608: LD_INT 3
 610: PUSH
 611: LD_INT 30
 613: PUSH
 614: LD_INT 0
 616: PUSH
 617: LD_INT 31500
 619: PUSH
 620: LD_INT 1
 622: PUSH
 623: LD_INT 1
 625: PUSH
 626: LD_INT 0
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: LIST
 636: LIST
 637: LIST
 638: LIST
 639: LIST
 640: LIST
 641: LIST
 642: LIST
 643: LIST
 644: LIST
 645: LIST
 646: LIST
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: ST_TO_ADDR
// mpGameType := GameTypeFamine ;
 652: LD_ADDR_EXP 12
 656: PUSH
 657: LD_INT 5
 659: ST_TO_ADDR
// your_side := 1 ;
 660: LD_ADDR_OWVAR 2
 664: PUSH
 665: LD_INT 1
 667: ST_TO_ADDR
// mpSidePositions := [ 1 , 2 , 0 , 0 , 0 , 6 , 7 , 0 ] ;
 668: LD_ADDR_EXP 16
 672: PUSH
 673: LD_INT 1
 675: PUSH
 676: LD_INT 2
 678: PUSH
 679: LD_INT 0
 681: PUSH
 682: LD_INT 0
 684: PUSH
 685: LD_INT 0
 687: PUSH
 688: LD_INT 6
 690: PUSH
 691: LD_INT 7
 693: PUSH
 694: LD_INT 0
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: LIST
 703: LIST
 704: LIST
 705: LIST
 706: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 0 , 0 , 0 , 2 , 2 , 0 ] ;
 707: LD_ADDR_EXP 17
 711: PUSH
 712: LD_INT 1
 714: PUSH
 715: LD_INT 2
 717: PUSH
 718: LD_INT 0
 720: PUSH
 721: LD_INT 0
 723: PUSH
 724: LD_INT 0
 726: PUSH
 727: LD_INT 2
 729: PUSH
 730: LD_INT 2
 732: PUSH
 733: LD_INT 0
 735: PUSH
 736: EMPTY
 737: LIST
 738: LIST
 739: LIST
 740: LIST
 741: LIST
 742: LIST
 743: LIST
 744: LIST
 745: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 0 , 0 , 0 , 3 , 1 , 0 ] ;
 746: LD_ADDR_EXP 18
 750: PUSH
 751: LD_INT 1
 753: PUSH
 754: LD_INT 2
 756: PUSH
 757: LD_INT 0
 759: PUSH
 760: LD_INT 0
 762: PUSH
 763: LD_INT 0
 765: PUSH
 766: LD_INT 3
 768: PUSH
 769: LD_INT 1
 771: PUSH
 772: LD_INT 0
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: LIST
 779: LIST
 780: LIST
 781: LIST
 782: LIST
 783: LIST
 784: ST_TO_ADDR
// mpTeams := [ [ 1 , 2 ] , [ 6 , 7 ] ] ;
 785: LD_ADDR_EXP 19
 789: PUSH
 790: LD_INT 1
 792: PUSH
 793: LD_INT 2
 795: PUSH
 796: EMPTY
 797: LIST
 798: LIST
 799: PUSH
 800: LD_INT 6
 802: PUSH
 803: LD_INT 7
 805: PUSH
 806: EMPTY
 807: LIST
 808: LIST
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: ST_TO_ADDR
// mpTeamGame := false ;
 814: LD_ADDR_EXP 20
 818: PUSH
 819: LD_INT 0
 821: ST_TO_ADDR
// mpMapSize := [ 240 , 270 ] ;
 822: LD_ADDR_EXP 38
 826: PUSH
 827: LD_INT 240
 829: PUSH
 830: LD_INT 270
 832: PUSH
 833: EMPTY
 834: LIST
 835: LIST
 836: ST_TO_ADDR
// end ;
 837: LD_VAR 0 1
 841: RET
// export BuildUpEscape , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , t , all , depositsValue , startPos ; begin
 842: LD_INT 0
 844: PPUSH
 845: PPUSH
 846: PPUSH
 847: PPUSH
 848: PPUSH
 849: PPUSH
// BuildUpEscape := 0 ;
 850: LD_ADDR_EXP 1
 854: PUSH
 855: LD_INT 0
 857: ST_TO_ADDR
// kingCamArea := 0 ;
 858: LD_ADDR_EXP 2
 862: PUSH
 863: LD_INT 0
 865: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 866: LD_ADDR_EXP 33
 870: PUSH
 871: LD_EXP 15
 875: PUSH
 876: LD_INT 2
 878: ARRAY
 879: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 880: LD_ADDR_EXP 34
 884: PUSH
 885: LD_EXP 15
 889: PUSH
 890: LD_INT 3
 892: ARRAY
 893: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 894: LD_ADDR_EXP 36
 898: PUSH
 899: LD_EXP 15
 903: PUSH
 904: LD_INT 5
 906: ARRAY
 907: ST_TO_ADDR
// if mpGameSettings [ 9 ] then
 908: LD_EXP 15
 912: PUSH
 913: LD_INT 9
 915: ARRAY
 916: IFFALSE 1105
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] , [ ar_medium_trike , engine_combustion , control_manual , ar_cargo_bay ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ] ] ] ;
 918: LD_ADDR_EXP 45
 922: PUSH
 923: LD_INT 1
 925: PUSH
 926: LD_INT 1
 928: PUSH
 929: LD_INT 1
 931: PUSH
 932: LD_INT 2
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 1
 943: PUSH
 944: LD_INT 1
 946: PUSH
 947: LD_INT 1
 949: PUSH
 950: LD_INT 3
 952: PUSH
 953: EMPTY
 954: LIST
 955: LIST
 956: LIST
 957: LIST
 958: PUSH
 959: LD_INT 2
 961: PUSH
 962: LD_INT 1
 964: PUSH
 965: LD_INT 1
 967: PUSH
 968: LD_INT 12
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: LIST
 975: LIST
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: LIST
 981: PUSH
 982: LD_INT 12
 984: PUSH
 985: LD_INT 1
 987: PUSH
 988: LD_INT 1
 990: PUSH
 991: LD_INT 24
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: PUSH
1000: LD_INT 12
1002: PUSH
1003: LD_INT 1
1005: PUSH
1006: LD_INT 1
1008: PUSH
1009: LD_INT 23
1011: PUSH
1012: EMPTY
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 13
1020: PUSH
1021: LD_INT 1
1023: PUSH
1024: LD_INT 1
1026: PUSH
1027: LD_INT 32
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: LIST
1040: PUSH
1041: LD_INT 21
1043: PUSH
1044: LD_INT 1
1046: PUSH
1047: LD_INT 1
1049: PUSH
1050: LD_INT 42
1052: PUSH
1053: EMPTY
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: PUSH
1059: LD_INT 21
1061: PUSH
1062: LD_INT 1
1064: PUSH
1065: LD_INT 1
1067: PUSH
1068: LD_INT 42
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: LIST
1075: LIST
1076: PUSH
1077: LD_INT 21
1079: PUSH
1080: LD_INT 1
1082: PUSH
1083: LD_INT 1
1085: PUSH
1086: LD_INT 51
1088: PUSH
1089: EMPTY
1090: LIST
1091: LIST
1092: LIST
1093: LIST
1094: PUSH
1095: EMPTY
1096: LIST
1097: LIST
1098: LIST
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: LIST
1104: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1105: LD_ADDR_EXP 25
1109: PUSH
1110: LD_EXP 15
1114: PUSH
1115: LD_INT 11
1117: ARRAY
1118: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1119: LD_ADDR_EXP 35
1123: PUSH
1124: LD_EXP 15
1128: PUSH
1129: LD_INT 13
1131: ARRAY
1132: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1133: LD_ADDR_EXP 42
1137: PUSH
1138: LD_EXP 15
1142: PUSH
1143: LD_INT 14
1145: ARRAY
1146: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1147: LD_ADDR_EXP 39
1151: PUSH
1152: LD_EXP 15
1156: PUSH
1157: LD_INT 15
1159: ARRAY
1160: ST_TO_ADDR
// depositsValue := mpGameSettings [ 16 ] ;
1161: LD_ADDR_VAR 0 6
1165: PUSH
1166: LD_EXP 15
1170: PUSH
1171: LD_INT 16
1173: ARRAY
1174: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1175: LD_ADDR_EXP 37
1179: PUSH
1180: LD_EXP 15
1184: PUSH
1185: LD_INT 18
1187: ARRAY
1188: ST_TO_ADDR
// mpArtifacts := mpGameSettings [ 19 ] ;
1189: LD_ADDR_EXP 53
1193: PUSH
1194: LD_EXP 15
1198: PUSH
1199: LD_INT 19
1201: ARRAY
1202: ST_TO_ADDR
// mpTeleports := mpGameSettings [ 20 ] ;
1203: LD_ADDR_EXP 52
1207: PUSH
1208: LD_EXP 15
1212: PUSH
1213: LD_INT 20
1215: ARRAY
1216: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1217: LD_ADDR_EXP 40
1221: PUSH
1222: LD_INT 7
1224: PUSH
1225: LD_INT 8
1227: PUSH
1228: LD_INT 9
1230: PUSH
1231: LD_INT 10
1233: PUSH
1234: LD_INT 11
1236: PUSH
1237: LD_INT 12
1239: PUSH
1240: LD_INT 13
1242: PUSH
1243: LD_INT 14
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: LIST
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: LIST
1255: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 0 ) , GetBuildingFromArea ( depotArea2 , 1 ) , GetBuildingFromArea ( depotArea3 , 1 ) , GetBuildingFromArea ( depotArea4 , 2 ) , GetBuildingFromArea ( depotArea5 , 3 ) , GetBuildingFromArea ( depotArea6 , 4 ) , GetBuildingFromArea ( depotArea7 , 4 ) , GetBuildingFromArea ( depotArea8 , 5 ) ] ;
1256: LD_ADDR_VAR 0 7
1260: PUSH
1261: LD_INT 15
1263: PPUSH
1264: LD_INT 0
1266: PPUSH
1267: CALL 64686 0 2
1271: PUSH
1272: LD_INT 16
1274: PPUSH
1275: LD_INT 1
1277: PPUSH
1278: CALL 64686 0 2
1282: PUSH
1283: LD_INT 17
1285: PPUSH
1286: LD_INT 1
1288: PPUSH
1289: CALL 64686 0 2
1293: PUSH
1294: LD_INT 18
1296: PPUSH
1297: LD_INT 2
1299: PPUSH
1300: CALL 64686 0 2
1304: PUSH
1305: LD_INT 19
1307: PPUSH
1308: LD_INT 3
1310: PPUSH
1311: CALL 64686 0 2
1315: PUSH
1316: LD_INT 20
1318: PPUSH
1319: LD_INT 4
1321: PPUSH
1322: CALL 64686 0 2
1326: PUSH
1327: LD_INT 21
1329: PPUSH
1330: LD_INT 4
1332: PPUSH
1333: CALL 64686 0 2
1337: PUSH
1338: LD_INT 22
1340: PPUSH
1341: LD_INT 5
1343: PPUSH
1344: CALL 64686 0 2
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1359: LD_ADDR_VAR 0 3
1363: PUSH
1364: DOUBLE
1365: LD_INT 1
1367: DEC
1368: ST_TO_ADDR
1369: LD_VAR 0 7
1373: PPUSH
1374: CALL 24035 0 1
1378: PUSH
1379: FOR_TO
1380: IFFALSE 1484
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1382: LD_ADDR_EXP 30
1386: PUSH
1387: LD_EXP 30
1391: PPUSH
1392: LD_VAR 0 3
1396: PPUSH
1397: LD_VAR 0 7
1401: PUSH
1402: LD_VAR 0 3
1406: ARRAY
1407: PUSH
1408: LD_INT 1
1410: ARRAY
1411: PPUSH
1412: LD_VAR 0 7
1416: PUSH
1417: LD_VAR 0 3
1421: ARRAY
1422: PUSH
1423: LD_INT 3
1425: ARRAY
1426: PPUSH
1427: LD_INT 10
1429: PPUSH
1430: CALL_OW 272
1434: PUSH
1435: LD_VAR 0 7
1439: PUSH
1440: LD_VAR 0 3
1444: ARRAY
1445: PUSH
1446: LD_INT 2
1448: ARRAY
1449: PPUSH
1450: LD_VAR 0 7
1454: PUSH
1455: LD_VAR 0 3
1459: ARRAY
1460: PUSH
1461: LD_INT 3
1463: ARRAY
1464: PPUSH
1465: LD_INT 10
1467: PPUSH
1468: CALL_OW 273
1472: PUSH
1473: EMPTY
1474: LIST
1475: LIST
1476: PPUSH
1477: CALL_OW 1
1481: ST_TO_ADDR
1482: GO 1379
1484: POP
1485: POP
// if mpGameType = GameTypeFamine then
1486: LD_EXP 12
1490: PUSH
1491: LD_INT 5
1493: EQUAL
1494: IFFALSE 1604
// begin FamineDeposits ( [ oilBasicArea , oilMediumArea , oilHardArea ] , [ 3 * depositsValue , 5 * depositsValue , 15 * depositsValue ] , mat_oil ) ;
1496: LD_INT 44
1498: PUSH
1499: LD_INT 46
1501: PUSH
1502: LD_INT 48
1504: PUSH
1505: EMPTY
1506: LIST
1507: LIST
1508: LIST
1509: PPUSH
1510: LD_INT 3
1512: PUSH
1513: LD_VAR 0 6
1517: MUL
1518: PUSH
1519: LD_INT 5
1521: PUSH
1522: LD_VAR 0 6
1526: MUL
1527: PUSH
1528: LD_INT 15
1530: PUSH
1531: LD_VAR 0 6
1535: MUL
1536: PUSH
1537: EMPTY
1538: LIST
1539: LIST
1540: LIST
1541: PPUSH
1542: LD_INT 2
1544: PPUSH
1545: CALL 65658 0 3
// FamineDeposits ( [ sibBasicArea , sibMediumArea , sibHardArea ] , [ 1 * depositsValue , 2.5 * depositsValue , 7.5 * depositsValue ] , mat_siberit ) ;
1549: LD_INT 45
1551: PUSH
1552: LD_INT 47
1554: PUSH
1555: LD_INT 49
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: PPUSH
1563: LD_INT 1
1565: PUSH
1566: LD_VAR 0 6
1570: MUL
1571: PUSH
1572: LD_REAL  2.50000000000000E+0000
1575: PUSH
1576: LD_VAR 0 6
1580: MUL
1581: PUSH
1582: LD_REAL  7.50000000000000E+0000
1585: PUSH
1586: LD_VAR 0 6
1590: MUL
1591: PUSH
1592: EMPTY
1593: LIST
1594: LIST
1595: LIST
1596: PPUSH
1597: LD_INT 3
1599: PPUSH
1600: CALL 65658 0 3
// end ; if mpArtifacts then
1604: LD_EXP 53
1608: IFFALSE 1614
// InitArtifact ;
1610: CALL 2806 0 0
// for i := 1 to 8 do
1614: LD_ADDR_VAR 0 3
1618: PUSH
1619: DOUBLE
1620: LD_INT 1
1622: DEC
1623: ST_TO_ADDR
1624: LD_INT 8
1626: PUSH
1627: FOR_TO
1628: IFFALSE 1671
// for t in [ tech_SolEng , tech_SolPow ] do
1630: LD_ADDR_VAR 0 4
1634: PUSH
1635: LD_INT 45
1637: PUSH
1638: LD_INT 35
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: PUSH
1645: FOR_IN
1646: IFFALSE 1667
// SetTech ( t , i , state_disabled ) ;
1648: LD_VAR 0 4
1652: PPUSH
1653: LD_VAR 0 3
1657: PPUSH
1658: LD_INT 0
1660: PPUSH
1661: CALL_OW 322
1665: GO 1645
1667: POP
1668: POP
1669: GO 1627
1671: POP
1672: POP
// end ;
1673: LD_VAR 0 2
1677: RET
// every 0 0$2 marked mpActive do var i , j , x , phase , additionalSpawnPhase , f , tmp , areas , areasPhase , time , normalTime , delayTime , maxTime ;
1678: GO 1680
1680: DISABLE
1681: LD_INT 0
1683: PPUSH
1684: PPUSH
1685: PPUSH
1686: PPUSH
1687: PPUSH
1688: PPUSH
1689: PPUSH
1690: PPUSH
1691: PPUSH
1692: PPUSH
1693: PPUSH
1694: PPUSH
1695: PPUSH
// begin if not mpShipments then
1696: LD_EXP 36
1700: NOT
1701: IFFALSE 1705
// exit ;
1703: GO 2464
// case mpShipments of 1 :
1705: LD_EXP 36
1709: PUSH
1710: LD_INT 1
1712: DOUBLE
1713: EQUAL
1714: IFTRUE 1718
1716: GO 1761
1718: POP
// begin time := 0 0$30 ;
1719: LD_ADDR_VAR 0 10
1723: PUSH
1724: LD_INT 1050
1726: ST_TO_ADDR
// normalTime := 0 0$30 ;
1727: LD_ADDR_VAR 0 11
1731: PUSH
1732: LD_INT 1050
1734: ST_TO_ADDR
// maxTime := 1 1$20 ;
1735: LD_ADDR_VAR 0 13
1739: PUSH
1740: LD_INT 2800
1742: ST_TO_ADDR
// delayTime := 0 0$5 ;
1743: LD_ADDR_VAR 0 12
1747: PUSH
1748: LD_INT 175
1750: ST_TO_ADDR
// additionalSpawnPhase := 10 ;
1751: LD_ADDR_VAR 0 5
1755: PUSH
1756: LD_INT 10
1758: ST_TO_ADDR
// end ; 2 :
1759: GO 1915
1761: LD_INT 2
1763: DOUBLE
1764: EQUAL
1765: IFTRUE 1769
1767: GO 1812
1769: POP
// begin time := 0 0$25 ;
1770: LD_ADDR_VAR 0 10
1774: PUSH
1775: LD_INT 875
1777: ST_TO_ADDR
// normalTime := 0 0$25 ;
1778: LD_ADDR_VAR 0 11
1782: PUSH
1783: LD_INT 875
1785: ST_TO_ADDR
// maxTime := 1 1$10 ;
1786: LD_ADDR_VAR 0 13
1790: PUSH
1791: LD_INT 2450
1793: ST_TO_ADDR
// delayTime := 0 0$4 ;
1794: LD_ADDR_VAR 0 12
1798: PUSH
1799: LD_INT 140
1801: ST_TO_ADDR
// additionalSpawnPhase := 8 ;
1802: LD_ADDR_VAR 0 5
1806: PUSH
1807: LD_INT 8
1809: ST_TO_ADDR
// end ; 3 :
1810: GO 1915
1812: LD_INT 3
1814: DOUBLE
1815: EQUAL
1816: IFTRUE 1820
1818: GO 1863
1820: POP
// begin time := 0 0$20 ;
1821: LD_ADDR_VAR 0 10
1825: PUSH
1826: LD_INT 700
1828: ST_TO_ADDR
// normalTime := 0 0$20 ;
1829: LD_ADDR_VAR 0 11
1833: PUSH
1834: LD_INT 700
1836: ST_TO_ADDR
// maxTime := 1 1$00 ;
1837: LD_ADDR_VAR 0 13
1841: PUSH
1842: LD_INT 2100
1844: ST_TO_ADDR
// delayTime := 0 0$3 ;
1845: LD_ADDR_VAR 0 12
1849: PUSH
1850: LD_INT 105
1852: ST_TO_ADDR
// additionalSpawnPhase := 6 ;
1853: LD_ADDR_VAR 0 5
1857: PUSH
1858: LD_INT 6
1860: ST_TO_ADDR
// end ; 4 :
1861: GO 1915
1863: LD_INT 4
1865: DOUBLE
1866: EQUAL
1867: IFTRUE 1871
1869: GO 1914
1871: POP
// begin time := 0 0$15 ;
1872: LD_ADDR_VAR 0 10
1876: PUSH
1877: LD_INT 525
1879: ST_TO_ADDR
// normalTime := 0 0$15 ;
1880: LD_ADDR_VAR 0 11
1884: PUSH
1885: LD_INT 525
1887: ST_TO_ADDR
// maxTime := 0 0$55 ;
1888: LD_ADDR_VAR 0 13
1892: PUSH
1893: LD_INT 1925
1895: ST_TO_ADDR
// delayTime := 0 0$2 ;
1896: LD_ADDR_VAR 0 12
1900: PUSH
1901: LD_INT 70
1903: ST_TO_ADDR
// additionalSpawnPhase := 5 ;
1904: LD_ADDR_VAR 0 5
1908: PUSH
1909: LD_INT 5
1911: ST_TO_ADDR
// end ; end ;
1912: GO 1915
1914: POP
// areas := [ IslandArea1 , IslandArea2 ] ;
1915: LD_ADDR_VAR 0 8
1919: PUSH
1920: LD_INT 23
1922: PUSH
1923: LD_INT 24
1925: PUSH
1926: EMPTY
1927: LIST
1928: LIST
1929: ST_TO_ADDR
// areasPhase := [ [ ] , [ ] ] ;
1930: LD_ADDR_VAR 0 9
1934: PUSH
1935: EMPTY
1936: PUSH
1937: EMPTY
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: ST_TO_ADDR
// tmp := [ [ CR1Phase1 , CR2Phase1 , CR3Phase1 , CR4Phase1 , CR5Phase1 , CR6Phase1 , CR7Phase1 , CR8Phase1 ] , [ CR1Phase2 , CR2Phase2 , CR3Phase2 , CR4Phase2 , CR5Phase2 , CR6Phase2 , CR7Phase2 , CR8Phase2 ] ] ;
1943: LD_ADDR_VAR 0 7
1947: PUSH
1948: LD_INT 28
1950: PUSH
1951: LD_INT 29
1953: PUSH
1954: LD_INT 30
1956: PUSH
1957: LD_INT 31
1959: PUSH
1960: LD_INT 32
1962: PUSH
1963: LD_INT 33
1965: PUSH
1966: LD_INT 34
1968: PUSH
1969: LD_INT 35
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: LIST
1976: LIST
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: PUSH
1982: LD_INT 36
1984: PUSH
1985: LD_INT 37
1987: PUSH
1988: LD_INT 38
1990: PUSH
1991: LD_INT 39
1993: PUSH
1994: LD_INT 40
1996: PUSH
1997: LD_INT 41
1999: PUSH
2000: LD_INT 42
2002: PUSH
2003: LD_INT 43
2005: PUSH
2006: EMPTY
2007: LIST
2008: LIST
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: LIST
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: ST_TO_ADDR
// for i := 1 to 8 do
2020: LD_ADDR_VAR 0 1
2024: PUSH
2025: DOUBLE
2026: LD_INT 1
2028: DEC
2029: ST_TO_ADDR
2030: LD_INT 8
2032: PUSH
2033: FOR_TO
2034: IFFALSE 2147
// begin if not mpSidePositions [ i ] then
2036: LD_EXP 16
2040: PUSH
2041: LD_VAR 0 1
2045: ARRAY
2046: NOT
2047: IFFALSE 2051
// continue ;
2049: GO 2033
// for j := 1 to 2 do
2051: LD_ADDR_VAR 0 2
2055: PUSH
2056: DOUBLE
2057: LD_INT 1
2059: DEC
2060: ST_TO_ADDR
2061: LD_INT 2
2063: PUSH
2064: FOR_TO
2065: IFFALSE 2143
// areasPhase := Replace ( areasPhase , j , Replace ( areasPhase [ j ] , areasPhase [ j ] + 1 , tmp [ j ] [ mpSidePositions [ i ] ] ) ) ;
2067: LD_ADDR_VAR 0 9
2071: PUSH
2072: LD_VAR 0 9
2076: PPUSH
2077: LD_VAR 0 2
2081: PPUSH
2082: LD_VAR 0 9
2086: PUSH
2087: LD_VAR 0 2
2091: ARRAY
2092: PPUSH
2093: LD_VAR 0 9
2097: PUSH
2098: LD_VAR 0 2
2102: ARRAY
2103: PUSH
2104: LD_INT 1
2106: PLUS
2107: PPUSH
2108: LD_VAR 0 7
2112: PUSH
2113: LD_VAR 0 2
2117: ARRAY
2118: PUSH
2119: LD_EXP 16
2123: PUSH
2124: LD_VAR 0 1
2128: ARRAY
2129: ARRAY
2130: PPUSH
2131: CALL_OW 1
2135: PPUSH
2136: CALL_OW 1
2140: ST_TO_ADDR
2141: GO 2064
2143: POP
2144: POP
// end ;
2145: GO 2033
2147: POP
2148: POP
// x := 1 ;
2149: LD_ADDR_VAR 0 3
2153: PUSH
2154: LD_INT 1
2156: ST_TO_ADDR
// phase := 1 ;
2157: LD_ADDR_VAR 0 4
2161: PUSH
2162: LD_INT 1
2164: ST_TO_ADDR
// repeat wait ( time ) ;
2165: LD_VAR 0 10
2169: PPUSH
2170: CALL_OW 67
// x := Inc ( x ) ;
2174: LD_ADDR_VAR 0 3
2178: PUSH
2179: LD_VAR 0 3
2183: PPUSH
2184: CALL 61340 0 1
2188: ST_TO_ADDR
// f := Inc ( f ) ;
2189: LD_ADDR_VAR 0 6
2193: PUSH
2194: LD_VAR 0 6
2198: PPUSH
2199: CALL 61340 0 1
2203: ST_TO_ADDR
// if x > 5 then
2204: LD_VAR 0 3
2208: PUSH
2209: LD_INT 5
2211: GREATER
2212: IFFALSE 2222
// x := 1 ;
2214: LD_ADDR_VAR 0 3
2218: PUSH
2219: LD_INT 1
2221: ST_TO_ADDR
// if f mod 20 = 0 then
2222: LD_VAR 0 6
2226: PUSH
2227: LD_INT 20
2229: MOD
2230: PUSH
2231: LD_INT 0
2233: EQUAL
2234: IFFALSE 2251
// phase := Inc ( phase ) ;
2236: LD_ADDR_VAR 0 4
2240: PUSH
2241: LD_VAR 0 4
2245: PPUSH
2246: CALL 61340 0 1
2250: ST_TO_ADDR
// if f mod additionalSpawnPhase = 0 then
2251: LD_VAR 0 6
2255: PUSH
2256: LD_VAR 0 5
2260: MOD
2261: PUSH
2262: LD_INT 0
2264: EQUAL
2265: IFFALSE 2282
// CreateCratesArea ( x , worldCratesArea , true ) ;
2267: LD_VAR 0 3
2271: PPUSH
2272: LD_INT 61
2274: PPUSH
2275: LD_INT 1
2277: PPUSH
2278: CALL_OW 55
// if phase > 2 then
2282: LD_VAR 0 4
2286: PUSH
2287: LD_INT 2
2289: GREATER
2290: IFFALSE 2300
// phase := 1 ;
2292: LD_ADDR_VAR 0 4
2296: PUSH
2297: LD_INT 1
2299: ST_TO_ADDR
// for i in areas do
2300: LD_ADDR_VAR 0 1
2304: PUSH
2305: LD_VAR 0 8
2309: PUSH
2310: FOR_IN
2311: IFFALSE 2362
// begin if GetResourceArea ( i , mat_cans ) < 15 and phase = 2 then
2313: LD_VAR 0 1
2317: PPUSH
2318: LD_INT 1
2320: PPUSH
2321: CALL_OW 287
2325: PUSH
2326: LD_INT 15
2328: LESS
2329: IFFALSE 2341
2331: PUSH
2332: LD_VAR 0 4
2336: PUSH
2337: LD_INT 2
2339: EQUAL
2340: AND
2341: IFFALSE 2360
// begin CreateCratesArea ( x , i , true ) ;
2343: LD_VAR 0 3
2347: PPUSH
2348: LD_VAR 0 1
2352: PPUSH
2353: LD_INT 1
2355: PPUSH
2356: CALL_OW 55
// end ; end ;
2360: GO 2310
2362: POP
2363: POP
// for i in areasPhase [ phase ] do
2364: LD_ADDR_VAR 0 1
2368: PUSH
2369: LD_VAR 0 9
2373: PUSH
2374: LD_VAR 0 4
2378: ARRAY
2379: PUSH
2380: FOR_IN
2381: IFFALSE 2420
// begin if GetResourceArea ( i , mat_cans ) < 25 then
2383: LD_VAR 0 1
2387: PPUSH
2388: LD_INT 1
2390: PPUSH
2391: CALL_OW 287
2395: PUSH
2396: LD_INT 25
2398: LESS
2399: IFFALSE 2418
// begin CreateCratesArea ( x , i , true ) ;
2401: LD_VAR 0 3
2405: PPUSH
2406: LD_VAR 0 1
2410: PPUSH
2411: LD_INT 1
2413: PPUSH
2414: CALL_OW 55
// end ; end ;
2418: GO 2380
2420: POP
2421: POP
// time := time + delayTime ;
2422: LD_ADDR_VAR 0 10
2426: PUSH
2427: LD_VAR 0 10
2431: PUSH
2432: LD_VAR 0 12
2436: PLUS
2437: ST_TO_ADDR
// if time > maxTime then
2438: LD_VAR 0 10
2442: PUSH
2443: LD_VAR 0 13
2447: GREATER
2448: IFFALSE 2460
// time := normalTime ;
2450: LD_ADDR_VAR 0 10
2454: PUSH
2455: LD_VAR 0 11
2459: ST_TO_ADDR
// until false ;
2460: LD_INT 0
2462: IFFALSE 2165
// end ;
2464: PPOPN 13
2466: END
// every 0 0$2 trigger mpTeleports do var i , tmp ;
2467: LD_EXP 52
2471: IFFALSE 2665
2473: GO 2475
2475: DISABLE
2476: LD_INT 0
2478: PPUSH
2479: PPUSH
// begin enable ;
2480: ENABLE
// tmp := [ [ T1TeleportArea , T4TeleportExitArea ] , [ T2TeleportArea , T3TeleportExitArea ] , [ T3TeleportArea , T2TeleportExitArea ] , [ T4TeleportArea , T1TeleportExitArea ] , [ T5TeleportArea , T6TeleportExitArea ] , [ T6TeleportArea , T5TeleportExitArea ] , [ T7TeleportArea , IslandArea1 ] , [ T8TeleportArea , IslandArea1 ] , [ T9TeleportArea , IslandArea1 ] , [ T10TeleportArea , IslandArea1 ] ] ;
2481: LD_ADDR_VAR 0 2
2485: PUSH
2486: LD_INT 1
2488: PUSH
2489: LD_INT 53
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: PUSH
2496: LD_INT 2
2498: PUSH
2499: LD_INT 52
2501: PUSH
2502: EMPTY
2503: LIST
2504: LIST
2505: PUSH
2506: LD_INT 3
2508: PUSH
2509: LD_INT 51
2511: PUSH
2512: EMPTY
2513: LIST
2514: LIST
2515: PUSH
2516: LD_INT 4
2518: PUSH
2519: LD_INT 50
2521: PUSH
2522: EMPTY
2523: LIST
2524: LIST
2525: PUSH
2526: LD_INT 5
2528: PUSH
2529: LD_INT 55
2531: PUSH
2532: EMPTY
2533: LIST
2534: LIST
2535: PUSH
2536: LD_INT 6
2538: PUSH
2539: LD_INT 54
2541: PUSH
2542: EMPTY
2543: LIST
2544: LIST
2545: PUSH
2546: LD_INT 57
2548: PUSH
2549: LD_INT 23
2551: PUSH
2552: EMPTY
2553: LIST
2554: LIST
2555: PUSH
2556: LD_INT 58
2558: PUSH
2559: LD_INT 23
2561: PUSH
2562: EMPTY
2563: LIST
2564: LIST
2565: PUSH
2566: LD_INT 59
2568: PUSH
2569: LD_INT 23
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PUSH
2576: LD_INT 60
2578: PUSH
2579: LD_INT 23
2581: PUSH
2582: EMPTY
2583: LIST
2584: LIST
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: LIST
2593: LIST
2594: LIST
2595: LIST
2596: LIST
2597: ST_TO_ADDR
// for i in tmp do
2598: LD_ADDR_VAR 0 1
2602: PUSH
2603: LD_VAR 0 2
2607: PUSH
2608: FOR_IN
2609: IFFALSE 2663
// CheckBuildUpArea ( i [ 1 ] , i [ 2 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) ;
2611: LD_VAR 0 1
2615: PUSH
2616: LD_INT 1
2618: ARRAY
2619: PPUSH
2620: LD_VAR 0 1
2624: PUSH
2625: LD_INT 2
2627: ARRAY
2628: PPUSH
2629: LD_INT 2
2631: PUSH
2632: LD_INT 21
2634: PUSH
2635: LD_INT 1
2637: PUSH
2638: EMPTY
2639: LIST
2640: LIST
2641: PUSH
2642: LD_INT 21
2644: PUSH
2645: LD_INT 2
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: LIST
2656: PPUSH
2657: CALL_OW 513
2661: GO 2608
2663: POP
2664: POP
// end ; end_of_file
2665: PPOPN 2
2667: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2668: LD_VAR 0 1
2672: PPUSH
2673: CALL 16409 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2677: LD_VAR 0 1
2681: PPUSH
2682: CALL 11724 0 1
// end ;
2686: PPOPN 1
2688: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2689: LD_VAR 0 1
2693: PPUSH
2694: CALL 16426 0 1
// end ;
2698: PPOPN 1
2700: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2701: LD_VAR 0 1
2705: PPUSH
2706: CALL 12431 0 1
2710: PPOPN 1
2712: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2713: LD_VAR 0 1
2717: PPUSH
2718: LD_VAR 0 2
2722: PPUSH
2723: CALL 16467 0 2
2727: PPOPN 2
2729: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2730: LD_VAR 0 1
2734: PPUSH
2735: LD_VAR 0 2
2739: PPUSH
2740: LD_VAR 0 3
2744: PPUSH
2745: CALL 12484 0 3
2749: PPOPN 3
2751: END
// on OilExtracted ( building , side , base , amount ) do Multiplayer_OilExtracted ( building , side , base , amount ) ;
2752: LD_VAR 0 1
2756: PPUSH
2757: LD_VAR 0 2
2761: PPUSH
2762: LD_VAR 0 3
2766: PPUSH
2767: LD_VAR 0 4
2771: PPUSH
2772: CALL 12649 0 4
2776: PPOPN 4
2778: END
// on SibExtracted ( building , side , base , amount ) do Multiplayer_SibExtracted ( building , side , base , amount ) ; end_of_file
2779: LD_VAR 0 1
2783: PPUSH
2784: LD_VAR 0 2
2788: PPUSH
2789: LD_VAR 0 3
2793: PPUSH
2794: LD_VAR 0 4
2798: PPUSH
2799: CALL 12885 0 4
2803: PPOPN 4
2805: END
// export artifactsPos , artifactsRecharge , artifactsSibCost , artifactsResearched , artifactsReady ; export artifactsResDifficulty , artifactsResProgress , artifactsButtons , artifactsLabsWorking ; export function InitArtifact ; var i ; begin
2806: LD_INT 0
2808: PPUSH
2809: PPUSH
// for i := 1 to 8 do
2810: LD_ADDR_VAR 0 2
2814: PUSH
2815: DOUBLE
2816: LD_INT 1
2818: DEC
2819: ST_TO_ADDR
2820: LD_INT 8
2822: PUSH
2823: FOR_TO
2824: IFFALSE 2840
// SetArtifactRes ( i , true ) ;
2826: LD_VAR 0 2
2830: PPUSH
2831: LD_INT 1
2833: PPUSH
2834: CALL_OW 467
2838: GO 2823
2840: POP
2841: POP
// CreateResourcesArea ( mat_artifact , 3 , ArtifactArea1 , false ) ;
2842: LD_INT 4
2844: PPUSH
2845: LD_INT 3
2847: PPUSH
2848: LD_INT 25
2850: PPUSH
2851: LD_INT 0
2853: PPUSH
2854: CALL_OW 59
// CreateResourcesArea ( mat_artifact , 4 , ArtifactArea2 , false ) ;
2858: LD_INT 4
2860: PPUSH
2861: LD_INT 4
2863: PPUSH
2864: LD_INT 26
2866: PPUSH
2867: LD_INT 0
2869: PPUSH
2870: CALL_OW 59
// CreateResourcesArea ( mat_artifact , 5 , ArtifactArea3 , false ) ;
2874: LD_INT 4
2876: PPUSH
2877: LD_INT 5
2879: PPUSH
2880: LD_INT 27
2882: PPUSH
2883: LD_INT 0
2885: PPUSH
2886: CALL_OW 59
// artifactsPos := [ [ ] , [ ] , [ ] ] ;
2890: LD_ADDR_EXP 3
2894: PUSH
2895: EMPTY
2896: PUSH
2897: EMPTY
2898: PUSH
2899: EMPTY
2900: PUSH
2901: EMPTY
2902: LIST
2903: LIST
2904: LIST
2905: ST_TO_ADDR
// artifactsRecharge := [ 0 0$30 , 1 1$20 , 5 5$00 ] ;
2906: LD_ADDR_EXP 4
2910: PUSH
2911: LD_INT 1050
2913: PUSH
2914: LD_INT 2800
2916: PUSH
2917: LD_INT 10500
2919: PUSH
2920: EMPTY
2921: LIST
2922: LIST
2923: LIST
2924: ST_TO_ADDR
// artifactsSibCost := [ 10 , 35 , 100 ] ;
2925: LD_ADDR_EXP 5
2929: PUSH
2930: LD_INT 10
2932: PUSH
2933: LD_INT 35
2935: PUSH
2936: LD_INT 100
2938: PUSH
2939: EMPTY
2940: LIST
2941: LIST
2942: LIST
2943: ST_TO_ADDR
// artifactsResDifficulty := [ 300 , 500 , 800 ] ;
2944: LD_ADDR_EXP 8
2948: PUSH
2949: LD_INT 300
2951: PUSH
2952: LD_INT 500
2954: PUSH
2955: LD_INT 800
2957: PUSH
2958: EMPTY
2959: LIST
2960: LIST
2961: LIST
2962: ST_TO_ADDR
// artifactsLabsWorking := [ [ ] , [ ] , [ ] ] ;
2963: LD_ADDR_EXP 11
2967: PUSH
2968: EMPTY
2969: PUSH
2970: EMPTY
2971: PUSH
2972: EMPTY
2973: PUSH
2974: EMPTY
2975: LIST
2976: LIST
2977: LIST
2978: ST_TO_ADDR
// artifactsResearched := [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] ;
2979: LD_ADDR_EXP 6
2983: PUSH
2984: LD_INT 0
2986: PUSH
2987: LD_INT 0
2989: PUSH
2990: LD_INT 0
2992: PUSH
2993: EMPTY
2994: LIST
2995: LIST
2996: LIST
2997: PUSH
2998: LD_INT 0
3000: PUSH
3001: LD_INT 0
3003: PUSH
3004: LD_INT 0
3006: PUSH
3007: EMPTY
3008: LIST
3009: LIST
3010: LIST
3011: PUSH
3012: LD_INT 0
3014: PUSH
3015: LD_INT 0
3017: PUSH
3018: LD_INT 0
3020: PUSH
3021: EMPTY
3022: LIST
3023: LIST
3024: LIST
3025: PUSH
3026: LD_INT 0
3028: PUSH
3029: LD_INT 0
3031: PUSH
3032: LD_INT 0
3034: PUSH
3035: EMPTY
3036: LIST
3037: LIST
3038: LIST
3039: PUSH
3040: LD_INT 0
3042: PUSH
3043: LD_INT 0
3045: PUSH
3046: LD_INT 0
3048: PUSH
3049: EMPTY
3050: LIST
3051: LIST
3052: LIST
3053: PUSH
3054: LD_INT 0
3056: PUSH
3057: LD_INT 0
3059: PUSH
3060: LD_INT 0
3062: PUSH
3063: EMPTY
3064: LIST
3065: LIST
3066: LIST
3067: PUSH
3068: LD_INT 0
3070: PUSH
3071: LD_INT 0
3073: PUSH
3074: LD_INT 0
3076: PUSH
3077: EMPTY
3078: LIST
3079: LIST
3080: LIST
3081: PUSH
3082: LD_INT 0
3084: PUSH
3085: LD_INT 0
3087: PUSH
3088: LD_INT 0
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: LIST
3095: PUSH
3096: EMPTY
3097: LIST
3098: LIST
3099: LIST
3100: LIST
3101: LIST
3102: LIST
3103: LIST
3104: LIST
3105: ST_TO_ADDR
// artifactsResProgress := [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] ;
3106: LD_ADDR_EXP 9
3110: PUSH
3111: LD_INT 0
3113: PUSH
3114: LD_INT 0
3116: PUSH
3117: LD_INT 0
3119: PUSH
3120: EMPTY
3121: LIST
3122: LIST
3123: LIST
3124: PUSH
3125: LD_INT 0
3127: PUSH
3128: LD_INT 0
3130: PUSH
3131: LD_INT 0
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: LIST
3138: PUSH
3139: LD_INT 0
3141: PUSH
3142: LD_INT 0
3144: PUSH
3145: LD_INT 0
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: LIST
3152: PUSH
3153: LD_INT 0
3155: PUSH
3156: LD_INT 0
3158: PUSH
3159: LD_INT 0
3161: PUSH
3162: EMPTY
3163: LIST
3164: LIST
3165: LIST
3166: PUSH
3167: LD_INT 0
3169: PUSH
3170: LD_INT 0
3172: PUSH
3173: LD_INT 0
3175: PUSH
3176: EMPTY
3177: LIST
3178: LIST
3179: LIST
3180: PUSH
3181: LD_INT 0
3183: PUSH
3184: LD_INT 0
3186: PUSH
3187: LD_INT 0
3189: PUSH
3190: EMPTY
3191: LIST
3192: LIST
3193: LIST
3194: PUSH
3195: LD_INT 0
3197: PUSH
3198: LD_INT 0
3200: PUSH
3201: LD_INT 0
3203: PUSH
3204: EMPTY
3205: LIST
3206: LIST
3207: LIST
3208: PUSH
3209: LD_INT 0
3211: PUSH
3212: LD_INT 0
3214: PUSH
3215: LD_INT 0
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: LIST
3222: PUSH
3223: EMPTY
3224: LIST
3225: LIST
3226: LIST
3227: LIST
3228: LIST
3229: LIST
3230: LIST
3231: LIST
3232: ST_TO_ADDR
// artifactsReady := [ [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] , [ 0 , 0 , 0 ] ] ;
3233: LD_ADDR_EXP 7
3237: PUSH
3238: LD_INT 0
3240: PUSH
3241: LD_INT 0
3243: PUSH
3244: LD_INT 0
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: LIST
3251: PUSH
3252: LD_INT 0
3254: PUSH
3255: LD_INT 0
3257: PUSH
3258: LD_INT 0
3260: PUSH
3261: EMPTY
3262: LIST
3263: LIST
3264: LIST
3265: PUSH
3266: LD_INT 0
3268: PUSH
3269: LD_INT 0
3271: PUSH
3272: LD_INT 0
3274: PUSH
3275: EMPTY
3276: LIST
3277: LIST
3278: LIST
3279: PUSH
3280: LD_INT 0
3282: PUSH
3283: LD_INT 0
3285: PUSH
3286: LD_INT 0
3288: PUSH
3289: EMPTY
3290: LIST
3291: LIST
3292: LIST
3293: PUSH
3294: LD_INT 0
3296: PUSH
3297: LD_INT 0
3299: PUSH
3300: LD_INT 0
3302: PUSH
3303: EMPTY
3304: LIST
3305: LIST
3306: LIST
3307: PUSH
3308: LD_INT 0
3310: PUSH
3311: LD_INT 0
3313: PUSH
3314: LD_INT 0
3316: PUSH
3317: EMPTY
3318: LIST
3319: LIST
3320: LIST
3321: PUSH
3322: LD_INT 0
3324: PUSH
3325: LD_INT 0
3327: PUSH
3328: LD_INT 0
3330: PUSH
3331: EMPTY
3332: LIST
3333: LIST
3334: LIST
3335: PUSH
3336: LD_INT 0
3338: PUSH
3339: LD_INT 0
3341: PUSH
3342: LD_INT 0
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: LIST
3349: PUSH
3350: EMPTY
3351: LIST
3352: LIST
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: ST_TO_ADDR
// artifactsButtons := [ [ art_use_eye , art_place , art_exp_left ] , [ art_use_sibexplosion , art_unit , art_exp_mid ] , [ art_use_atom , art_place , art_exp_right ] ] ;
3360: LD_ADDR_EXP 10
3364: PUSH
3365: LD_INT 4
3367: PUSH
3368: LD_INT 3
3370: PUSH
3371: LD_INT 1
3373: PUSH
3374: EMPTY
3375: LIST
3376: LIST
3377: LIST
3378: PUSH
3379: LD_INT 5
3381: PUSH
3382: LD_INT 4
3384: PUSH
3385: LD_INT 2
3387: PUSH
3388: EMPTY
3389: LIST
3390: LIST
3391: LIST
3392: PUSH
3393: LD_INT 7
3395: PUSH
3396: LD_INT 3
3398: PUSH
3399: LD_INT 3
3401: PUSH
3402: EMPTY
3403: LIST
3404: LIST
3405: LIST
3406: PUSH
3407: EMPTY
3408: LIST
3409: LIST
3410: LIST
3411: ST_TO_ADDR
// end ;
3412: LD_VAR 0 1
3416: RET
// function TeleportArtefact ( number , area ) ; var i , hex , tmp , cargo ; begin
3417: LD_INT 0
3419: PPUSH
3420: PPUSH
3421: PPUSH
3422: PPUSH
3423: PPUSH
// if not number in [ 3 , 4 , 5 ] then
3424: LD_VAR 0 1
3428: PUSH
3429: LD_INT 3
3431: PUSH
3432: LD_INT 4
3434: PUSH
3435: LD_INT 5
3437: PUSH
3438: EMPTY
3439: LIST
3440: LIST
3441: LIST
3442: IN
3443: NOT
3444: IFFALSE 3448
// exit ;
3446: GO 3862
// hex := FindArtifact ( number ) ;
3448: LD_ADDR_VAR 0 5
3452: PUSH
3453: LD_VAR 0 1
3457: PPUSH
3458: CALL_OW 469
3462: ST_TO_ADDR
// if hex then
3463: LD_VAR 0 5
3467: IFFALSE 3738
// begin if InArea ( hex [ 1 ] , hex [ 2 ] , area ) then
3469: LD_VAR 0 5
3473: PUSH
3474: LD_INT 1
3476: ARRAY
3477: PPUSH
3478: LD_VAR 0 5
3482: PUSH
3483: LD_INT 2
3485: ARRAY
3486: PPUSH
3487: LD_VAR 0 2
3491: PPUSH
3492: CALL_OW 309
3496: IFFALSE 3500
// exit ;
3498: GO 3862
// if artifactsLabsWorking [ number - 2 ] then
3500: LD_EXP 11
3504: PUSH
3505: LD_VAR 0 1
3509: PUSH
3510: LD_INT 2
3512: MINUS
3513: ARRAY
3514: IFFALSE 3619
// begin for i in artifactsLabsWorking [ number - 2 ] do
3516: LD_ADDR_VAR 0 4
3520: PUSH
3521: LD_EXP 11
3525: PUSH
3526: LD_VAR 0 1
3530: PUSH
3531: LD_INT 2
3533: MINUS
3534: ARRAY
3535: PUSH
3536: FOR_IN
3537: IFFALSE 3591
// begin SetArtifactUse ( GetSide ( i ) , artifactsButtons [ number - 2 ] [ 3 ] , art_no , i ) ;
3539: LD_VAR 0 4
3543: PPUSH
3544: CALL_OW 255
3548: PPUSH
3549: LD_EXP 10
3553: PUSH
3554: LD_VAR 0 1
3558: PUSH
3559: LD_INT 2
3561: MINUS
3562: ARRAY
3563: PUSH
3564: LD_INT 3
3566: ARRAY
3567: PPUSH
3568: LD_INT 0
3570: PPUSH
3571: LD_VAR 0 4
3575: PPUSH
3576: CALL_OW 468
// ComCancel ( i ) ;
3580: LD_VAR 0 4
3584: PPUSH
3585: CALL_OW 127
// end ;
3589: GO 3536
3591: POP
3592: POP
// artifactsLabsWorking := Replace ( artifactsLabsWorking , number - 2 , [ ] ) ;
3593: LD_ADDR_EXP 11
3597: PUSH
3598: LD_EXP 11
3602: PPUSH
3603: LD_VAR 0 1
3607: PUSH
3608: LD_INT 2
3610: MINUS
3611: PPUSH
3612: EMPTY
3613: PPUSH
3614: CALL_OW 1
3618: ST_TO_ADDR
// end ; tmp := FilterUnitsInArea ( area , [ f_placed ] ) ;
3619: LD_ADDR_VAR 0 6
3623: PUSH
3624: LD_VAR 0 2
3628: PPUSH
3629: LD_INT 52
3631: PUSH
3632: EMPTY
3633: LIST
3634: PPUSH
3635: CALL_OW 70
3639: ST_TO_ADDR
// if tmp then
3640: LD_VAR 0 6
3644: IFFALSE 3672
// for i in tmp do
3646: LD_ADDR_VAR 0 4
3650: PUSH
3651: LD_VAR 0 6
3655: PUSH
3656: FOR_IN
3657: IFFALSE 3670
// DestroyUnit ( i ) ;
3659: LD_VAR 0 4
3663: PPUSH
3664: CALL_OW 65
3668: GO 3656
3670: POP
3671: POP
// MoveAreaXY ( artifactTeleportArea , hex [ 1 ] , hex [ 2 ] ) ;
3672: LD_INT 56
3674: PPUSH
3675: LD_VAR 0 5
3679: PUSH
3680: LD_INT 1
3682: ARRAY
3683: PPUSH
3684: LD_VAR 0 5
3688: PUSH
3689: LD_INT 2
3691: ARRAY
3692: PPUSH
3693: CALL_OW 425
// EffectTeleport ( hex [ 1 ] , hex [ 2 ] ) ;
3697: LD_VAR 0 5
3701: PUSH
3702: LD_INT 1
3704: ARRAY
3705: PPUSH
3706: LD_VAR 0 5
3710: PUSH
3711: LD_INT 2
3713: ARRAY
3714: PPUSH
3715: CALL_OW 494
// wait ( 30 ) ;
3719: LD_INT 30
3721: PPUSH
3722: CALL_OW 67
// EraseResourceArea ( artifactTeleportArea , mat_artefact ) ;
3726: LD_INT 56
3728: PPUSH
3729: LD_INT 4
3731: PPUSH
3732: CALL_OW 286
// end else
3736: GO 3842
// begin cargo := FilterAllUnits ( [ [ f_tag , number ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
3738: LD_ADDR_VAR 0 7
3742: PUSH
3743: LD_INT 120
3745: PUSH
3746: LD_VAR 0 1
3750: PUSH
3751: EMPTY
3752: LIST
3753: LIST
3754: PUSH
3755: LD_INT 2
3757: PUSH
3758: LD_INT 34
3760: PUSH
3761: LD_INT 12
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: PUSH
3768: LD_INT 34
3770: PUSH
3771: LD_INT 32
3773: PUSH
3774: EMPTY
3775: LIST
3776: LIST
3777: PUSH
3778: LD_INT 34
3780: PUSH
3781: LD_INT 51
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PUSH
3788: LD_INT 34
3790: PUSH
3791: LD_INT 89
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: PUSH
3798: EMPTY
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: PUSH
3805: EMPTY
3806: LIST
3807: LIST
3808: PPUSH
3809: CALL_OW 69
3813: ST_TO_ADDR
// if not cargo then
3814: LD_VAR 0 7
3818: NOT
3819: IFFALSE 3823
// exit ;
3821: GO 3862
// SetCargo ( cargo [ 1 ] , mat_artifact , 0 ) ;
3823: LD_VAR 0 7
3827: PUSH
3828: LD_INT 1
3830: ARRAY
3831: PPUSH
3832: LD_INT 4
3834: PPUSH
3835: LD_INT 0
3837: PPUSH
3838: CALL_OW 290
// end ; CreateResourcesArea ( mat_artifact , number , area , false ) ;
3842: LD_INT 4
3844: PPUSH
3845: LD_VAR 0 1
3849: PPUSH
3850: LD_VAR 0 2
3854: PPUSH
3855: LD_INT 0
3857: PPUSH
3858: CALL_OW 59
// end ;
3862: LD_VAR 0 3
3866: RET
// every 8 8$30 trigger mpArtifacts do
3867: LD_EXP 53
3871: IFFALSE 3887
3873: GO 3875
3875: DISABLE
// begin enable ;
3876: ENABLE
// TeleportArtefact ( 3 , ArtifactArea1 ) ;
3877: LD_INT 3
3879: PPUSH
3880: LD_INT 25
3882: PPUSH
3883: CALL 3417 0 2
// end ;
3887: END
// every 6 6$10 trigger mpArtifacts do
3888: LD_EXP 53
3892: IFFALSE 3908
3894: GO 3896
3896: DISABLE
// begin enable ;
3897: ENABLE
// TeleportArtefact ( 4 , ArtifactArea2 ) ;
3898: LD_INT 4
3900: PPUSH
3901: LD_INT 26
3903: PPUSH
3904: CALL 3417 0 2
// end ;
3908: END
// every 4 4$10 trigger mpArtifacts do
3909: LD_EXP 53
3913: IFFALSE 3929
3915: GO 3917
3917: DISABLE
// begin enable ;
3918: ENABLE
// TeleportArtefact ( 5 , ArtifactArea3 ) ;
3919: LD_INT 5
3921: PPUSH
3922: LD_INT 27
3924: PPUSH
3925: CALL 3417 0 2
// end ;
3929: END
// every 0 0$1 trigger mpArtifacts do var i , pos , j , side , labs , nearestLab ;
3930: LD_EXP 53
3934: IFFALSE 4834
3936: GO 3938
3938: DISABLE
3939: LD_INT 0
3941: PPUSH
3942: PPUSH
3943: PPUSH
3944: PPUSH
3945: PPUSH
3946: PPUSH
// begin enable ;
3947: ENABLE
// for i := 1 to 3 do
3948: LD_ADDR_VAR 0 1
3952: PUSH
3953: DOUBLE
3954: LD_INT 1
3956: DEC
3957: ST_TO_ADDR
3958: LD_INT 3
3960: PUSH
3961: FOR_TO
3962: IFFALSE 4832
// begin pos := FindArtifact ( i + 2 ) ;
3964: LD_ADDR_VAR 0 2
3968: PUSH
3969: LD_VAR 0 1
3973: PUSH
3974: LD_INT 2
3976: PLUS
3977: PPUSH
3978: CALL_OW 469
3982: ST_TO_ADDR
// artifactsPos := Replace ( artifactsPos , i , pos ) ;
3983: LD_ADDR_EXP 3
3987: PUSH
3988: LD_EXP 3
3992: PPUSH
3993: LD_VAR 0 1
3997: PPUSH
3998: LD_VAR 0 2
4002: PPUSH
4003: CALL_OW 1
4007: ST_TO_ADDR
// labs := FilterAllUnits ( [ f_lab , b_lab_siberium ] ) ;
4008: LD_ADDR_VAR 0 5
4012: PUSH
4013: LD_INT 63
4015: PUSH
4016: LD_INT 11
4018: PUSH
4019: EMPTY
4020: LIST
4021: LIST
4022: PPUSH
4023: CALL_OW 69
4027: ST_TO_ADDR
// if not labs then
4028: LD_VAR 0 5
4032: NOT
4033: IFFALSE 4039
// exit ;
4035: POP
4036: POP
4037: GO 4834
// if pos then
4039: LD_VAR 0 2
4043: IFFALSE 4670
// begin if not labs then
4045: LD_VAR 0 5
4049: NOT
4050: IFFALSE 4054
// continue ;
4052: GO 3961
// nearestLab := NearestUnitToXY ( labs , artifactsPos [ i ] [ 1 ] , artifactsPos [ i ] [ 2 ] ) ;
4054: LD_ADDR_VAR 0 6
4058: PUSH
4059: LD_VAR 0 5
4063: PPUSH
4064: LD_EXP 3
4068: PUSH
4069: LD_VAR 0 1
4073: ARRAY
4074: PUSH
4075: LD_INT 1
4077: ARRAY
4078: PPUSH
4079: LD_EXP 3
4083: PUSH
4084: LD_VAR 0 1
4088: ARRAY
4089: PUSH
4090: LD_INT 2
4092: ARRAY
4093: PPUSH
4094: CALL_OW 73
4098: ST_TO_ADDR
// if not nearestLab then
4099: LD_VAR 0 6
4103: NOT
4104: IFFALSE 4204
// begin for j in labs do
4106: LD_ADDR_VAR 0 3
4110: PUSH
4111: LD_VAR 0 5
4115: PUSH
4116: FOR_IN
4117: IFFALSE 4200
// begin side := GetSide ( j ) ;
4119: LD_ADDR_VAR 0 4
4123: PUSH
4124: LD_VAR 0 3
4128: PPUSH
4129: CALL_OW 255
4133: ST_TO_ADDR
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_no , j ) ;
4134: LD_VAR 0 4
4138: PPUSH
4139: LD_EXP 10
4143: PUSH
4144: LD_VAR 0 1
4148: ARRAY
4149: PUSH
4150: LD_INT 3
4152: ARRAY
4153: PPUSH
4154: LD_INT 0
4156: PPUSH
4157: LD_VAR 0 3
4161: PPUSH
4162: CALL_OW 468
// SetArtifactUse ( side , artifactsButtons [ i ] [ 1 ] , art_no , j ) ;
4166: LD_VAR 0 4
4170: PPUSH
4171: LD_EXP 10
4175: PUSH
4176: LD_VAR 0 1
4180: ARRAY
4181: PUSH
4182: LD_INT 1
4184: ARRAY
4185: PPUSH
4186: LD_INT 0
4188: PPUSH
4189: LD_VAR 0 3
4193: PPUSH
4194: CALL_OW 468
// end ;
4198: GO 4116
4200: POP
4201: POP
// continue ;
4202: GO 3961
// end ; if GetDistUnitXY ( nearestLab , artifactsPos [ i ] [ 1 ] , artifactsPos [ i ] [ 2 ] ) < 8 and GetTech ( tech_artifact , GetSide ( nearestLab ) ) = state_researched then
4204: LD_VAR 0 6
4208: PPUSH
4209: LD_EXP 3
4213: PUSH
4214: LD_VAR 0 1
4218: ARRAY
4219: PUSH
4220: LD_INT 1
4222: ARRAY
4223: PPUSH
4224: LD_EXP 3
4228: PUSH
4229: LD_VAR 0 1
4233: ARRAY
4234: PUSH
4235: LD_INT 2
4237: ARRAY
4238: PPUSH
4239: CALL_OW 297
4243: PUSH
4244: LD_INT 8
4246: LESS
4247: IFFALSE 4272
4249: PUSH
4250: LD_INT 24
4252: PPUSH
4253: LD_VAR 0 6
4257: PPUSH
4258: CALL_OW 255
4262: PPUSH
4263: CALL_OW 321
4267: PUSH
4268: LD_INT 2
4270: EQUAL
4271: AND
4272: IFFALSE 4506
// begin side := GetSide ( nearestLab ) ;
4274: LD_ADDR_VAR 0 4
4278: PUSH
4279: LD_VAR 0 6
4283: PPUSH
4284: CALL_OW 255
4288: ST_TO_ADDR
// if not artifactsResearched [ side ] [ i ] then
4289: LD_EXP 6
4293: PUSH
4294: LD_VAR 0 4
4298: ARRAY
4299: PUSH
4300: LD_VAR 0 1
4304: ARRAY
4305: NOT
4306: IFFALSE 4391
// begin if BuildingStatus ( nearestLab ) = bs_idle then
4308: LD_VAR 0 6
4312: PPUSH
4313: CALL_OW 461
4317: PUSH
4318: LD_INT 2
4320: EQUAL
4321: IFFALSE 4357
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_instant , nearestLab ) else
4323: LD_VAR 0 4
4327: PPUSH
4328: LD_EXP 10
4332: PUSH
4333: LD_VAR 0 1
4337: ARRAY
4338: PUSH
4339: LD_INT 3
4341: ARRAY
4342: PPUSH
4343: LD_INT 2
4345: PPUSH
4346: LD_VAR 0 6
4350: PPUSH
4351: CALL_OW 468
4355: GO 4389
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_gray , nearestLab ) ;
4357: LD_VAR 0 4
4361: PPUSH
4362: LD_EXP 10
4366: PUSH
4367: LD_VAR 0 1
4371: ARRAY
4372: PUSH
4373: LD_INT 3
4375: ARRAY
4376: PPUSH
4377: LD_INT 1
4379: PPUSH
4380: LD_VAR 0 6
4384: PPUSH
4385: CALL_OW 468
// end else
4389: GO 4504
// begin if BuildingStatus ( nearestLab ) = bs_idle and artifactsReady [ side ] [ i ] then
4391: LD_VAR 0 6
4395: PPUSH
4396: CALL_OW 461
4400: PUSH
4401: LD_INT 2
4403: EQUAL
4404: IFFALSE 4424
4406: PUSH
4407: LD_EXP 7
4411: PUSH
4412: LD_VAR 0 4
4416: ARRAY
4417: PUSH
4418: LD_VAR 0 1
4422: ARRAY
4423: AND
4424: IFFALSE 4472
// SetArtifactUse ( side , artifactsButtons [ i ] [ 1 ] , artifactsButtons [ i ] [ 2 ] , nearestLab ) else
4426: LD_VAR 0 4
4430: PPUSH
4431: LD_EXP 10
4435: PUSH
4436: LD_VAR 0 1
4440: ARRAY
4441: PUSH
4442: LD_INT 1
4444: ARRAY
4445: PPUSH
4446: LD_EXP 10
4450: PUSH
4451: LD_VAR 0 1
4455: ARRAY
4456: PUSH
4457: LD_INT 2
4459: ARRAY
4460: PPUSH
4461: LD_VAR 0 6
4465: PPUSH
4466: CALL_OW 468
4470: GO 4504
// SetArtifactUse ( side , artifactsButtons [ i ] [ 1 ] , art_gray , nearestLab ) end ;
4472: LD_VAR 0 4
4476: PPUSH
4477: LD_EXP 10
4481: PUSH
4482: LD_VAR 0 1
4486: ARRAY
4487: PUSH
4488: LD_INT 1
4490: ARRAY
4491: PPUSH
4492: LD_INT 1
4494: PPUSH
4495: LD_VAR 0 6
4499: PPUSH
4500: CALL_OW 468
// end else
4504: GO 4668
// begin for j in labs do
4506: LD_ADDR_VAR 0 3
4510: PUSH
4511: LD_VAR 0 5
4515: PUSH
4516: FOR_IN
4517: IFFALSE 4666
// begin if GetDistUnitXY ( j , artifactsPos [ i ] [ 1 ] , artifactsPos [ i ] [ 2 ] ) >= 8 then
4519: LD_VAR 0 3
4523: PPUSH
4524: LD_EXP 3
4528: PUSH
4529: LD_VAR 0 1
4533: ARRAY
4534: PUSH
4535: LD_INT 1
4537: ARRAY
4538: PPUSH
4539: LD_EXP 3
4543: PUSH
4544: LD_VAR 0 1
4548: ARRAY
4549: PUSH
4550: LD_INT 2
4552: ARRAY
4553: PPUSH
4554: CALL_OW 297
4558: PUSH
4559: LD_INT 8
4561: GREATEREQUAL
4562: IFFALSE 4664
// begin side := GetSide ( j ) ;
4564: LD_ADDR_VAR 0 4
4568: PUSH
4569: LD_VAR 0 3
4573: PPUSH
4574: CALL_OW 255
4578: ST_TO_ADDR
// if not artifactsResearched [ side ] [ i ] then
4579: LD_EXP 6
4583: PUSH
4584: LD_VAR 0 4
4588: ARRAY
4589: PUSH
4590: LD_VAR 0 1
4594: ARRAY
4595: NOT
4596: IFFALSE 4632
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_no , j ) else
4598: LD_VAR 0 4
4602: PPUSH
4603: LD_EXP 10
4607: PUSH
4608: LD_VAR 0 1
4612: ARRAY
4613: PUSH
4614: LD_INT 3
4616: ARRAY
4617: PPUSH
4618: LD_INT 0
4620: PPUSH
4621: LD_VAR 0 3
4625: PPUSH
4626: CALL_OW 468
4630: GO 4664
// SetArtifactUse ( side , artifactsButtons [ i ] [ 1 ] , art_no , j ) ;
4632: LD_VAR 0 4
4636: PPUSH
4637: LD_EXP 10
4641: PUSH
4642: LD_VAR 0 1
4646: ARRAY
4647: PUSH
4648: LD_INT 1
4650: ARRAY
4651: PPUSH
4652: LD_INT 0
4654: PPUSH
4655: LD_VAR 0 3
4659: PPUSH
4660: CALL_OW 468
// end ; end ;
4664: GO 4516
4666: POP
4667: POP
// end ; end else
4668: GO 4830
// begin for j in labs do
4670: LD_ADDR_VAR 0 3
4674: PUSH
4675: LD_VAR 0 5
4679: PUSH
4680: FOR_IN
4681: IFFALSE 4828
// begin side := GetSide ( j ) ;
4683: LD_ADDR_VAR 0 4
4687: PUSH
4688: LD_VAR 0 3
4692: PPUSH
4693: CALL_OW 255
4697: ST_TO_ADDR
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_no , j ) ;
4698: LD_VAR 0 4
4702: PPUSH
4703: LD_EXP 10
4707: PUSH
4708: LD_VAR 0 1
4712: ARRAY
4713: PUSH
4714: LD_INT 3
4716: ARRAY
4717: PPUSH
4718: LD_INT 0
4720: PPUSH
4721: LD_VAR 0 3
4725: PPUSH
4726: CALL_OW 468
// SetArtifactUse ( side , artifactsButtons [ i ] [ 1 ] , art_no , j ) ;
4730: LD_VAR 0 4
4734: PPUSH
4735: LD_EXP 10
4739: PUSH
4740: LD_VAR 0 1
4744: ARRAY
4745: PUSH
4746: LD_INT 1
4748: ARRAY
4749: PPUSH
4750: LD_INT 0
4752: PPUSH
4753: LD_VAR 0 3
4757: PPUSH
4758: CALL_OW 468
// if j in artifactsLabsWorking [ i ] then
4762: LD_VAR 0 3
4766: PUSH
4767: LD_EXP 11
4771: PUSH
4772: LD_VAR 0 1
4776: ARRAY
4777: IN
4778: IFFALSE 4826
// begin artifactsLabsWorking := Replace ( artifactsLabsWorking , i , artifactsLabsWorking [ i ] diff j ) ;
4780: LD_ADDR_EXP 11
4784: PUSH
4785: LD_EXP 11
4789: PPUSH
4790: LD_VAR 0 1
4794: PPUSH
4795: LD_EXP 11
4799: PUSH
4800: LD_VAR 0 1
4804: ARRAY
4805: PUSH
4806: LD_VAR 0 3
4810: DIFF
4811: PPUSH
4812: CALL_OW 1
4816: ST_TO_ADDR
// ComCancel ( j ) ;
4817: LD_VAR 0 3
4821: PPUSH
4822: CALL_OW 127
// end ; end ;
4826: GO 4680
4828: POP
4829: POP
// end ; end ;
4830: GO 3961
4832: POP
4833: POP
// end ;
4834: PPOPN 6
4836: END
// on ArtifactUsed ( side , icon , x , y ) do var i , labs , lab , base , time ;
4837: LD_INT 0
4839: PPUSH
4840: PPUSH
4841: PPUSH
4842: PPUSH
4843: PPUSH
// begin labs := FilterAllUnits ( [ [ f_side , side ] , [ f_lab , b_lab_siberium ] ] ) ;
4844: LD_ADDR_VAR 0 6
4848: PUSH
4849: LD_INT 22
4851: PUSH
4852: LD_VAR 0 1
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 63
4863: PUSH
4864: LD_INT 11
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: PPUSH
4875: CALL_OW 69
4879: ST_TO_ADDR
// for i := 1 to 3 do
4880: LD_ADDR_VAR 0 5
4884: PUSH
4885: DOUBLE
4886: LD_INT 1
4888: DEC
4889: ST_TO_ADDR
4890: LD_INT 3
4892: PUSH
4893: FOR_TO
4894: IFFALSE 5124
// begin if icon = artifactsButtons [ i ] [ 3 ] then
4896: LD_VAR 0 2
4900: PUSH
4901: LD_EXP 10
4905: PUSH
4906: LD_VAR 0 5
4910: ARRAY
4911: PUSH
4912: LD_INT 3
4914: ARRAY
4915: EQUAL
4916: IFFALSE 5122
// begin lab := NearestUnitToXY ( labs , artifactsPos [ i ] [ 1 ] , artifactsPos [ i ] [ 2 ] ) ;
4918: LD_ADDR_VAR 0 7
4922: PUSH
4923: LD_VAR 0 6
4927: PPUSH
4928: LD_EXP 3
4932: PUSH
4933: LD_VAR 0 5
4937: ARRAY
4938: PUSH
4939: LD_INT 1
4941: ARRAY
4942: PPUSH
4943: LD_EXP 3
4947: PUSH
4948: LD_VAR 0 5
4952: ARRAY
4953: PUSH
4954: LD_INT 2
4956: ARRAY
4957: PPUSH
4958: CALL_OW 73
4962: ST_TO_ADDR
// if not lab then
4963: LD_VAR 0 7
4967: NOT
4968: IFFALSE 4972
// continue ;
4970: GO 4893
// SetSpecResearch ( lab , artifactsResDifficulty [ i ] , true ) ;
4972: LD_VAR 0 7
4976: PPUSH
4977: LD_EXP 8
4981: PUSH
4982: LD_VAR 0 5
4986: ARRAY
4987: PPUSH
4988: LD_INT 1
4990: PPUSH
4991: CALL_OW 486
// SetTag ( lab , i ) ;
4995: LD_VAR 0 7
4999: PPUSH
5000: LD_VAR 0 5
5004: PPUSH
5005: CALL_OW 109
// if artifactsResProgress [ side ] [ i ] then
5009: LD_EXP 9
5013: PUSH
5014: LD_VAR 0 1
5018: ARRAY
5019: PUSH
5020: LD_VAR 0 5
5024: ARRAY
5025: IFFALSE 5053
// SetWorkingProgress ( lab , artifactsResProgress [ side ] [ i ] ) ;
5027: LD_VAR 0 7
5031: PPUSH
5032: LD_EXP 9
5036: PUSH
5037: LD_VAR 0 1
5041: ARRAY
5042: PUSH
5043: LD_VAR 0 5
5047: ARRAY
5048: PPUSH
5049: CALL_OW 329
// artifactsLabsWorking := Replace ( artifactsLabsWorking , i , artifactsLabsWorking [ i ] union lab ) ;
5053: LD_ADDR_EXP 11
5057: PUSH
5058: LD_EXP 11
5062: PPUSH
5063: LD_VAR 0 5
5067: PPUSH
5068: LD_EXP 11
5072: PUSH
5073: LD_VAR 0 5
5077: ARRAY
5078: PUSH
5079: LD_VAR 0 7
5083: UNION
5084: PPUSH
5085: CALL_OW 1
5089: ST_TO_ADDR
// SetArtifactUse ( side , artifactsButtons [ i ] [ 3 ] , art_no , lab ) ;
5090: LD_VAR 0 1
5094: PPUSH
5095: LD_EXP 10
5099: PUSH
5100: LD_VAR 0 5
5104: ARRAY
5105: PUSH
5106: LD_INT 3
5108: ARRAY
5109: PPUSH
5110: LD_INT 0
5112: PPUSH
5113: LD_VAR 0 7
5117: PPUSH
5118: CALL_OW 468
// end ; end ;
5122: GO 4893
5124: POP
5125: POP
// if icon = artifactsButtons [ 1 ] [ 1 ] then
5126: LD_VAR 0 2
5130: PUSH
5131: LD_EXP 10
5135: PUSH
5136: LD_INT 1
5138: ARRAY
5139: PUSH
5140: LD_INT 1
5142: ARRAY
5143: EQUAL
5144: IFFALSE 5415
// begin lab := NearestUnitToXY ( labs , artifactsPos [ 1 ] [ 1 ] , artifactsPos [ 1 ] [ 2 ] ) ;
5146: LD_ADDR_VAR 0 7
5150: PUSH
5151: LD_VAR 0 6
5155: PPUSH
5156: LD_EXP 3
5160: PUSH
5161: LD_INT 1
5163: ARRAY
5164: PUSH
5165: LD_INT 1
5167: ARRAY
5168: PPUSH
5169: LD_EXP 3
5173: PUSH
5174: LD_INT 1
5176: ARRAY
5177: PUSH
5178: LD_INT 2
5180: ARRAY
5181: PPUSH
5182: CALL_OW 73
5186: ST_TO_ADDR
// base := GetBase ( lab ) ;
5187: LD_ADDR_VAR 0 8
5191: PUSH
5192: LD_VAR 0 7
5196: PPUSH
5197: CALL_OW 274
5201: ST_TO_ADDR
// if GetBaseMaterials ( GetBase ( lab ) ) [ 3 ] < artifactsSibCost [ 1 ] then
5202: LD_VAR 0 7
5206: PPUSH
5207: CALL_OW 274
5211: PPUSH
5212: CALL 60197 0 1
5216: PUSH
5217: LD_INT 3
5219: ARRAY
5220: PUSH
5221: LD_EXP 5
5225: PUSH
5226: LD_INT 1
5228: ARRAY
5229: LESS
5230: IFFALSE 5234
// begin exit ;
5232: GO 6181
// end ; SetResourceType ( base , mat_siberit , ( GetResourceType ( base , mat_siberit ) - artifactsSibCost [ 1 ] ) ) ;
5234: LD_VAR 0 8
5238: PPUSH
5239: LD_INT 3
5241: PPUSH
5242: LD_VAR 0 8
5246: PPUSH
5247: LD_INT 3
5249: PPUSH
5250: CALL_OW 275
5254: PUSH
5255: LD_EXP 5
5259: PUSH
5260: LD_INT 1
5262: ARRAY
5263: MINUS
5264: PPUSH
5265: CALL_OW 277
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 1 , false ) ) ;
5269: LD_ADDR_EXP 7
5273: PUSH
5274: LD_EXP 7
5278: PPUSH
5279: LD_VAR 0 1
5283: PPUSH
5284: LD_EXP 7
5288: PUSH
5289: LD_VAR 0 1
5293: ARRAY
5294: PPUSH
5295: LD_INT 1
5297: PPUSH
5298: LD_INT 0
5300: PPUSH
5301: CALL_OW 1
5305: PPUSH
5306: CALL_OW 1
5310: ST_TO_ADDR
// PlaceSeeing ( x , y , side , - 12 ) ;
5311: LD_VAR 0 3
5315: PPUSH
5316: LD_VAR 0 4
5320: PPUSH
5321: LD_VAR 0 1
5325: PPUSH
5326: LD_INT 12
5328: NEG
5329: PPUSH
5330: CALL_OW 330
// wait ( 0 0$30 ) ;
5334: LD_INT 1050
5336: PPUSH
5337: CALL_OW 67
// RemoveSeeing ( x , y , side ) ;
5341: LD_VAR 0 3
5345: PPUSH
5346: LD_VAR 0 4
5350: PPUSH
5351: LD_VAR 0 1
5355: PPUSH
5356: CALL_OW 331
// wait ( artifactsRecharge [ 1 ] ) ;
5360: LD_EXP 4
5364: PUSH
5365: LD_INT 1
5367: ARRAY
5368: PPUSH
5369: CALL_OW 67
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 1 , true ) ) ;
5373: LD_ADDR_EXP 7
5377: PUSH
5378: LD_EXP 7
5382: PPUSH
5383: LD_VAR 0 1
5387: PPUSH
5388: LD_EXP 7
5392: PUSH
5393: LD_VAR 0 1
5397: ARRAY
5398: PPUSH
5399: LD_INT 1
5401: PPUSH
5402: LD_INT 1
5404: PPUSH
5405: CALL_OW 1
5409: PPUSH
5410: CALL_OW 1
5414: ST_TO_ADDR
// end ; if icon = artifactsButtons [ 2 ] [ 1 ] then
5415: LD_VAR 0 2
5419: PUSH
5420: LD_EXP 10
5424: PUSH
5425: LD_INT 2
5427: ARRAY
5428: PUSH
5429: LD_INT 1
5431: ARRAY
5432: EQUAL
5433: IFFALSE 5929
// begin lab := NearestUnitToXY ( labs , artifactsPos [ 2 ] [ 1 ] , artifactsPos [ 2 ] [ 2 ] ) ;
5435: LD_ADDR_VAR 0 7
5439: PUSH
5440: LD_VAR 0 6
5444: PPUSH
5445: LD_EXP 3
5449: PUSH
5450: LD_INT 2
5452: ARRAY
5453: PUSH
5454: LD_INT 1
5456: ARRAY
5457: PPUSH
5458: LD_EXP 3
5462: PUSH
5463: LD_INT 2
5465: ARRAY
5466: PUSH
5467: LD_INT 2
5469: ARRAY
5470: PPUSH
5471: CALL_OW 73
5475: ST_TO_ADDR
// base := GetBase ( lab ) ;
5476: LD_ADDR_VAR 0 8
5480: PUSH
5481: LD_VAR 0 7
5485: PPUSH
5486: CALL_OW 274
5490: ST_TO_ADDR
// if not x in FilterAllUnits ( [ [ f_enemy , side ] , [ f_or , [ f_engine , engine_siberite ] , [ f_btype , b_siberite_power ] , [ f_btype , b_siberite_mine ] , [ f_bweapon , ru_time_lapser ] , [ f_weapon , ru_time_lapser ] , [ f_weapon , us_double_laser ] , [ f_bweapon , us_double_laser ] , [ f_weapon , ar_bio_bomb ] , [ f_weapon , ar_selfpropelled_bomb ] , [ f_btype , b_ext_siberium ] , [ f_weapon , us_siberium_rocket ] , [ f_weapon , ru_siberium_rocket ] , [ f_chassis , ru_behemoth ] , [ f_bweapon , us_siberium_rocket ] , [ f_bweapon , ru_siberium_rocket ] ] ] ) then
5491: LD_VAR 0 3
5495: PUSH
5496: LD_INT 81
5498: PUSH
5499: LD_VAR 0 1
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: PUSH
5508: LD_INT 2
5510: PUSH
5511: LD_INT 32
5513: PUSH
5514: LD_INT 3
5516: PUSH
5517: EMPTY
5518: LIST
5519: LIST
5520: PUSH
5521: LD_INT 30
5523: PUSH
5524: LD_INT 28
5526: PUSH
5527: EMPTY
5528: LIST
5529: LIST
5530: PUSH
5531: LD_INT 30
5533: PUSH
5534: LD_INT 30
5536: PUSH
5537: EMPTY
5538: LIST
5539: LIST
5540: PUSH
5541: LD_INT 35
5543: PUSH
5544: LD_INT 49
5546: PUSH
5547: EMPTY
5548: LIST
5549: LIST
5550: PUSH
5551: LD_INT 34
5553: PUSH
5554: LD_INT 49
5556: PUSH
5557: EMPTY
5558: LIST
5559: LIST
5560: PUSH
5561: LD_INT 34
5563: PUSH
5564: LD_INT 10
5566: PUSH
5567: EMPTY
5568: LIST
5569: LIST
5570: PUSH
5571: LD_INT 35
5573: PUSH
5574: LD_INT 10
5576: PUSH
5577: EMPTY
5578: LIST
5579: LIST
5580: PUSH
5581: LD_INT 34
5583: PUSH
5584: LD_INT 91
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: PUSH
5591: LD_INT 34
5593: PUSH
5594: LD_INT 29
5596: PUSH
5597: EMPTY
5598: LIST
5599: LIST
5600: PUSH
5601: LD_INT 30
5603: PUSH
5604: LD_INT 21
5606: PUSH
5607: EMPTY
5608: LIST
5609: LIST
5610: PUSH
5611: LD_INT 34
5613: PUSH
5614: LD_INT 8
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: PUSH
5621: LD_INT 34
5623: PUSH
5624: LD_INT 48
5626: PUSH
5627: EMPTY
5628: LIST
5629: LIST
5630: PUSH
5631: LD_INT 31
5633: PUSH
5634: LD_INT 25
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: PUSH
5641: LD_INT 35
5643: PUSH
5644: LD_INT 8
5646: PUSH
5647: EMPTY
5648: LIST
5649: LIST
5650: PUSH
5651: LD_INT 35
5653: PUSH
5654: LD_INT 48
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: PUSH
5661: EMPTY
5662: LIST
5663: LIST
5664: LIST
5665: LIST
5666: LIST
5667: LIST
5668: LIST
5669: LIST
5670: LIST
5671: LIST
5672: LIST
5673: LIST
5674: LIST
5675: LIST
5676: LIST
5677: LIST
5678: PUSH
5679: EMPTY
5680: LIST
5681: LIST
5682: PPUSH
5683: CALL_OW 69
5687: IN
5688: NOT
5689: IFFALSE 5693
// exit ;
5691: GO 6181
// if GetBaseMaterials ( GetBase ( lab ) ) [ 3 ] < artifactsSibCost [ 2 ] then
5693: LD_VAR 0 7
5697: PPUSH
5698: CALL_OW 274
5702: PPUSH
5703: CALL 60197 0 1
5707: PUSH
5708: LD_INT 3
5710: ARRAY
5711: PUSH
5712: LD_EXP 5
5716: PUSH
5717: LD_INT 2
5719: ARRAY
5720: LESS
5721: IFFALSE 5725
// begin exit ;
5723: GO 6181
// end ; SetResourceType ( base , mat_siberit , ( GetResourceType ( base , mat_siberit ) - artifactsSibCost [ 2 ] ) ) ;
5725: LD_VAR 0 8
5729: PPUSH
5730: LD_INT 3
5732: PPUSH
5733: LD_VAR 0 8
5737: PPUSH
5738: LD_INT 3
5740: PPUSH
5741: CALL_OW 275
5745: PUSH
5746: LD_EXP 5
5750: PUSH
5751: LD_INT 2
5753: ARRAY
5754: MINUS
5755: PPUSH
5756: CALL_OW 277
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 2 , false ) ) ;
5760: LD_ADDR_EXP 7
5764: PUSH
5765: LD_EXP 7
5769: PPUSH
5770: LD_VAR 0 1
5774: PPUSH
5775: LD_EXP 7
5779: PUSH
5780: LD_VAR 0 1
5784: ARRAY
5785: PPUSH
5786: LD_INT 2
5788: PPUSH
5789: LD_INT 0
5791: PPUSH
5792: CALL_OW 1
5796: PPUSH
5797: CALL_OW 1
5801: ST_TO_ADDR
// KillUnit ( x ) ;
5802: LD_VAR 0 3
5806: PPUSH
5807: CALL_OW 66
// if GetWeapon ( x ) in [ us_siberium_rocket , ru_siberium_rocket ] or GetBWeapon ( x ) in [ us_siberium_rocket , ru_siberium_rocket ] then
5811: LD_VAR 0 3
5815: PPUSH
5816: CALL_OW 264
5820: PUSH
5821: LD_INT 8
5823: PUSH
5824: LD_INT 48
5826: PUSH
5827: EMPTY
5828: LIST
5829: LIST
5830: IN
5831: IFTRUE 5855
5833: PUSH
5834: LD_VAR 0 3
5838: PPUSH
5839: CALL_OW 269
5843: PUSH
5844: LD_INT 8
5846: PUSH
5847: LD_INT 48
5849: PUSH
5850: EMPTY
5851: LIST
5852: LIST
5853: IN
5854: OR
5855: IFFALSE 5874
// begin ArtContamination ( x , y , 50 ) ;
5857: LD_VAR 0 3
5861: PPUSH
5862: LD_VAR 0 4
5866: PPUSH
5867: LD_INT 50
5869: PPUSH
5870: CALL_OW 495
// end ; wait ( artifactsRecharge [ 2 ] ) ;
5874: LD_EXP 4
5878: PUSH
5879: LD_INT 2
5881: ARRAY
5882: PPUSH
5883: CALL_OW 67
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 2 , true ) ) ;
5887: LD_ADDR_EXP 7
5891: PUSH
5892: LD_EXP 7
5896: PPUSH
5897: LD_VAR 0 1
5901: PPUSH
5902: LD_EXP 7
5906: PUSH
5907: LD_VAR 0 1
5911: ARRAY
5912: PPUSH
5913: LD_INT 2
5915: PPUSH
5916: LD_INT 1
5918: PPUSH
5919: CALL_OW 1
5923: PPUSH
5924: CALL_OW 1
5928: ST_TO_ADDR
// end ; if icon = artifactsButtons [ 3 ] [ 1 ] then
5929: LD_VAR 0 2
5933: PUSH
5934: LD_EXP 10
5938: PUSH
5939: LD_INT 3
5941: ARRAY
5942: PUSH
5943: LD_INT 1
5945: ARRAY
5946: EQUAL
5947: IFFALSE 6181
// begin lab := NearestUnitToXY ( labs , artifactsPos [ 3 ] [ 1 ] , artifactsPos [ 3 ] [ 2 ] ) ;
5949: LD_ADDR_VAR 0 7
5953: PUSH
5954: LD_VAR 0 6
5958: PPUSH
5959: LD_EXP 3
5963: PUSH
5964: LD_INT 3
5966: ARRAY
5967: PUSH
5968: LD_INT 1
5970: ARRAY
5971: PPUSH
5972: LD_EXP 3
5976: PUSH
5977: LD_INT 3
5979: ARRAY
5980: PUSH
5981: LD_INT 2
5983: ARRAY
5984: PPUSH
5985: CALL_OW 73
5989: ST_TO_ADDR
// base := GetBase ( lab ) ;
5990: LD_ADDR_VAR 0 8
5994: PUSH
5995: LD_VAR 0 7
5999: PPUSH
6000: CALL_OW 274
6004: ST_TO_ADDR
// if GetBaseMaterials ( base ) [ 3 ] < artifactsSibCost [ 3 ] then
6005: LD_VAR 0 8
6009: PPUSH
6010: CALL 60197 0 1
6014: PUSH
6015: LD_INT 3
6017: ARRAY
6018: PUSH
6019: LD_EXP 5
6023: PUSH
6024: LD_INT 3
6026: ARRAY
6027: LESS
6028: IFFALSE 6032
// begin exit ;
6030: GO 6181
// end ; SetResourceType ( base , mat_siberit , ( GetResourceType ( base , mat_siberit ) - artifactsSibCost [ 3 ] ) ) ;
6032: LD_VAR 0 8
6036: PPUSH
6037: LD_INT 3
6039: PPUSH
6040: LD_VAR 0 8
6044: PPUSH
6045: LD_INT 3
6047: PPUSH
6048: CALL_OW 275
6052: PUSH
6053: LD_EXP 5
6057: PUSH
6058: LD_INT 3
6060: ARRAY
6061: MINUS
6062: PPUSH
6063: CALL_OW 277
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 3 , false ) ) ;
6067: LD_ADDR_EXP 7
6071: PUSH
6072: LD_EXP 7
6076: PPUSH
6077: LD_VAR 0 1
6081: PPUSH
6082: LD_EXP 7
6086: PUSH
6087: LD_VAR 0 1
6091: ARRAY
6092: PPUSH
6093: LD_INT 3
6095: PPUSH
6096: LD_INT 0
6098: PPUSH
6099: CALL_OW 1
6103: PPUSH
6104: CALL_OW 1
6108: ST_TO_ADDR
// ArtContamination ( x , y , 50 ) ;
6109: LD_VAR 0 3
6113: PPUSH
6114: LD_VAR 0 4
6118: PPUSH
6119: LD_INT 50
6121: PPUSH
6122: CALL_OW 495
// wait ( artifactsRecharge [ 3 ] ) ;
6126: LD_EXP 4
6130: PUSH
6131: LD_INT 3
6133: ARRAY
6134: PPUSH
6135: CALL_OW 67
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , 3 , true ) ) ;
6139: LD_ADDR_EXP 7
6143: PUSH
6144: LD_EXP 7
6148: PPUSH
6149: LD_VAR 0 1
6153: PPUSH
6154: LD_EXP 7
6158: PUSH
6159: LD_VAR 0 1
6163: ARRAY
6164: PPUSH
6165: LD_INT 3
6167: PPUSH
6168: LD_INT 1
6170: PPUSH
6171: CALL_OW 1
6175: PPUSH
6176: CALL_OW 1
6180: ST_TO_ADDR
// end ; end ;
6181: PPOPN 9
6183: END
// on SpecResearchCancel ( lab , progress ) do var side , tag ;
6184: LD_INT 0
6186: PPUSH
6187: PPUSH
// begin tag := GetTag ( lab ) ;
6188: LD_ADDR_VAR 0 4
6192: PUSH
6193: LD_VAR 0 1
6197: PPUSH
6198: CALL_OW 110
6202: ST_TO_ADDR
// side := GetSide ( lab ) ;
6203: LD_ADDR_VAR 0 3
6207: PUSH
6208: LD_VAR 0 1
6212: PPUSH
6213: CALL_OW 255
6217: ST_TO_ADDR
// SetArtifactUse ( side , artifactsButtons [ tag ] [ 3 ] , art_instant , lab ) ;
6218: LD_VAR 0 3
6222: PPUSH
6223: LD_EXP 10
6227: PUSH
6228: LD_VAR 0 4
6232: ARRAY
6233: PUSH
6234: LD_INT 3
6236: ARRAY
6237: PPUSH
6238: LD_INT 2
6240: PPUSH
6241: LD_VAR 0 1
6245: PPUSH
6246: CALL_OW 468
// artifactsResProgress := Replace ( artifactsResProgress , side , Replace ( artifactsResProgress [ side ] , tag , progress ) ) ;
6250: LD_ADDR_EXP 9
6254: PUSH
6255: LD_EXP 9
6259: PPUSH
6260: LD_VAR 0 3
6264: PPUSH
6265: LD_EXP 9
6269: PUSH
6270: LD_VAR 0 3
6274: ARRAY
6275: PPUSH
6276: LD_VAR 0 4
6280: PPUSH
6281: LD_VAR 0 2
6285: PPUSH
6286: CALL_OW 1
6290: PPUSH
6291: CALL_OW 1
6295: ST_TO_ADDR
// artifactsLabsWorking := Replace ( artifactsLabsWorking , tag , artifactsLabsWorking [ tag ] diff lab ) ;
6296: LD_ADDR_EXP 11
6300: PUSH
6301: LD_EXP 11
6305: PPUSH
6306: LD_VAR 0 4
6310: PPUSH
6311: LD_EXP 11
6315: PUSH
6316: LD_VAR 0 4
6320: ARRAY
6321: PUSH
6322: LD_VAR 0 1
6326: DIFF
6327: PPUSH
6328: CALL_OW 1
6332: ST_TO_ADDR
// SetTag ( lab , 0 ) ;
6333: LD_VAR 0 1
6337: PPUSH
6338: LD_INT 0
6340: PPUSH
6341: CALL_OW 109
// end ;
6345: PPOPN 4
6347: END
// on SpecResearchComplete ( lab ) do var side , tag ;
6348: LD_INT 0
6350: PPUSH
6351: PPUSH
// begin tag := GetTag ( lab ) ;
6352: LD_ADDR_VAR 0 3
6356: PUSH
6357: LD_VAR 0 1
6361: PPUSH
6362: CALL_OW 110
6366: ST_TO_ADDR
// side := GetSide ( lab ) ;
6367: LD_ADDR_VAR 0 2
6371: PUSH
6372: LD_VAR 0 1
6376: PPUSH
6377: CALL_OW 255
6381: ST_TO_ADDR
// SetArtifactUse ( side , artifactsButtons [ tag ] [ 3 ] , art_no , lab ) ;
6382: LD_VAR 0 2
6386: PPUSH
6387: LD_EXP 10
6391: PUSH
6392: LD_VAR 0 3
6396: ARRAY
6397: PUSH
6398: LD_INT 3
6400: ARRAY
6401: PPUSH
6402: LD_INT 0
6404: PPUSH
6405: LD_VAR 0 1
6409: PPUSH
6410: CALL_OW 468
// artifactsResearched := Replace ( artifactsResearched , side , Replace ( artifactsResearched [ side ] , tag , 1 ) ) ;
6414: LD_ADDR_EXP 6
6418: PUSH
6419: LD_EXP 6
6423: PPUSH
6424: LD_VAR 0 2
6428: PPUSH
6429: LD_EXP 6
6433: PUSH
6434: LD_VAR 0 2
6438: ARRAY
6439: PPUSH
6440: LD_VAR 0 3
6444: PPUSH
6445: LD_INT 1
6447: PPUSH
6448: CALL_OW 1
6452: PPUSH
6453: CALL_OW 1
6457: ST_TO_ADDR
// artifactsReady := Replace ( artifactsReady , side , Replace ( artifactsReady [ side ] , tag , 1 ) ) ;
6458: LD_ADDR_EXP 7
6462: PUSH
6463: LD_EXP 7
6467: PPUSH
6468: LD_VAR 0 2
6472: PPUSH
6473: LD_EXP 7
6477: PUSH
6478: LD_VAR 0 2
6482: ARRAY
6483: PPUSH
6484: LD_VAR 0 3
6488: PPUSH
6489: LD_INT 1
6491: PPUSH
6492: CALL_OW 1
6496: PPUSH
6497: CALL_OW 1
6501: ST_TO_ADDR
// artifactsLabsWorking := Replace ( artifactsLabsWorking , tag , artifactsLabsWorking [ tag ] diff lab ) ;
6502: LD_ADDR_EXP 11
6506: PUSH
6507: LD_EXP 11
6511: PPUSH
6512: LD_VAR 0 3
6516: PPUSH
6517: LD_EXP 11
6521: PUSH
6522: LD_VAR 0 3
6526: ARRAY
6527: PUSH
6528: LD_VAR 0 1
6532: DIFF
6533: PPUSH
6534: CALL_OW 1
6538: ST_TO_ADDR
// end ;
6539: PPOPN 3
6541: END
// on ArtifactLoaded ( cargo , artifact ) do begin SetTag ( cargo , artifact ) ;
6542: LD_VAR 0 1
6546: PPUSH
6547: LD_VAR 0 2
6551: PPUSH
6552: CALL_OW 109
// end ;
6556: PPOPN 2
6558: END
// on ArtifactUnloaded ( cargo , artifact ) do begin SetTag ( cargo , 0 ) ;
6559: LD_VAR 0 1
6563: PPUSH
6564: LD_INT 0
6566: PPUSH
6567: CALL_OW 109
// end ; end_of_file end_of_file
6571: PPOPN 2
6573: END
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
6574: LD_INT 0
6576: PPUSH
6577: PPUSH
// disable ( mpActive ) ;
6578: LD_INT 100
6580: DISABLE_MARKED
// disable ( mpWin ) ;
6581: LD_INT 101
6583: DISABLE_MARKED
// disable ( mpLose ) ;
6584: LD_INT 102
6586: DISABLE_MARKED
// mpGameType := 0 ;
6587: LD_ADDR_EXP 12
6591: PUSH
6592: LD_INT 0
6594: ST_TO_ADDR
// mpGameSettings := [ ] ;
6595: LD_ADDR_EXP 15
6599: PUSH
6600: EMPTY
6601: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
6602: LD_ADDR_EXP 13
6606: PUSH
6607: EMPTY
6608: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
6609: LD_ADDR_EXP 14
6613: PUSH
6614: EMPTY
6615: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
6616: LD_ADDR_EXP 38
6620: PUSH
6621: LD_INT 2
6623: PUSH
6624: LD_INT 2
6626: PUSH
6627: EMPTY
6628: LIST
6629: LIST
6630: ST_TO_ADDR
// mpOilDeposits := [ ] ;
6631: LD_ADDR_EXP 21
6635: PUSH
6636: EMPTY
6637: ST_TO_ADDR
// mpSibDeposits := [ ] ;
6638: LD_ADDR_EXP 22
6642: PUSH
6643: EMPTY
6644: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
6645: LD_ADDR_EXP 50
6649: PUSH
6650: EMPTY
6651: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
6652: LD_ADDR_EXP 51
6656: PUSH
6657: EMPTY
6658: ST_TO_ADDR
// mpDepots := [ ] ;
6659: LD_ADDR_EXP 23
6663: PUSH
6664: EMPTY
6665: ST_TO_ADDR
// mpBuildings := [ ] ;
6666: LD_ADDR_EXP 26
6670: PUSH
6671: EMPTY
6672: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
6673: LD_ADDR_EXP 27
6677: PUSH
6678: EMPTY
6679: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
6680: LD_ADDR_EXP 28
6684: PUSH
6685: EMPTY
6686: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
6687: LD_ADDR_EXP 29
6691: PUSH
6692: EMPTY
6693: ST_TO_ADDR
// mpStartingResources := [ ] ;
6694: LD_ADDR_EXP 24
6698: PUSH
6699: EMPTY
6700: ST_TO_ADDR
// mpStartPos := [ ] ;
6701: LD_ADDR_EXP 30
6705: PUSH
6706: EMPTY
6707: ST_TO_ADDR
// mpBattleFlag := - 1 ;
6708: LD_ADDR_EXP 31
6712: PUSH
6713: LD_INT 1
6715: NEG
6716: ST_TO_ADDR
// mpBattleFlags := [ ] ;
6717: LD_ADDR_EXP 32
6721: PUSH
6722: EMPTY
6723: ST_TO_ADDR
// mpApemans := [ ] ;
6724: LD_ADDR_EXP 39
6728: PUSH
6729: EMPTY
6730: ST_TO_ADDR
// mpApemansArea := [ ] ;
6731: LD_ADDR_EXP 40
6735: PUSH
6736: EMPTY
6737: ST_TO_ADDR
// mpRespawn := [ ] ;
6738: LD_ADDR_EXP 42
6742: PUSH
6743: EMPTY
6744: ST_TO_ADDR
// mpKingArea := 0 ;
6745: LD_ADDR_EXP 43
6749: PUSH
6750: LD_INT 0
6752: ST_TO_ADDR
// mpPoints := [ ] ;
6753: LD_ADDR_EXP 44
6757: PUSH
6758: EMPTY
6759: ST_TO_ADDR
// mpVehicles := 0 ;
6760: LD_ADDR_EXP 45
6764: PUSH
6765: LD_INT 0
6767: ST_TO_ADDR
// mpShipments := 0 ;
6768: LD_ADDR_EXP 36
6772: PUSH
6773: LD_INT 0
6775: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
6776: LD_ADDR_EXP 49
6780: PUSH
6781: EMPTY
6782: PUSH
6783: EMPTY
6784: PUSH
6785: EMPTY
6786: PUSH
6787: EMPTY
6788: PUSH
6789: EMPTY
6790: PUSH
6791: EMPTY
6792: PUSH
6793: EMPTY
6794: PUSH
6795: EMPTY
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: LIST
6801: LIST
6802: LIST
6803: LIST
6804: LIST
6805: LIST
6806: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
6807: LD_ADDR_EXP 41
6811: PUSH
6812: EMPTY
6813: PUSH
6814: EMPTY
6815: PUSH
6816: EMPTY
6817: PUSH
6818: EMPTY
6819: PUSH
6820: EMPTY
6821: PUSH
6822: EMPTY
6823: PUSH
6824: EMPTY
6825: PUSH
6826: EMPTY
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: ST_TO_ADDR
// mpEmissions := 0 ;
6838: LD_ADDR_EXP 46
6842: PUSH
6843: LD_INT 0
6845: ST_TO_ADDR
// mpTeleports := 0 ;
6846: LD_ADDR_EXP 52
6850: PUSH
6851: LD_INT 0
6853: ST_TO_ADDR
// mpArtifacts := 0 ;
6854: LD_ADDR_EXP 53
6858: PUSH
6859: LD_INT 0
6861: ST_TO_ADDR
// mpPeopleSkill := 3 ;
6862: LD_ADDR_EXP 34
6866: PUSH
6867: LD_INT 3
6869: ST_TO_ADDR
// mpPeopleAmount := 15 ;
6870: LD_ADDR_EXP 33
6874: PUSH
6875: LD_INT 15
6877: ST_TO_ADDR
// mpDisplayStrings := 0 ;
6878: LD_ADDR_EXP 47
6882: PUSH
6883: LD_INT 0
6885: ST_TO_ADDR
// mpGameActive := false ;
6886: LD_ADDR_EXP 48
6890: PUSH
6891: LD_INT 0
6893: ST_TO_ADDR
// mpBlockRespThread := false ;
6894: LD_ADDR_EXP 54
6898: PUSH
6899: LD_INT 0
6901: ST_TO_ADDR
// for i := 1 to 32 do
6902: LD_ADDR_VAR 0 2
6906: PUSH
6907: DOUBLE
6908: LD_INT 1
6910: DEC
6911: ST_TO_ADDR
6912: LD_INT 32
6914: PUSH
6915: FOR_TO
6916: IFFALSE 6943
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
6918: LD_ADDR_EXP 15
6922: PUSH
6923: LD_EXP 15
6927: PPUSH
6928: LD_VAR 0 2
6932: PPUSH
6933: LD_INT 0
6935: PPUSH
6936: CALL_OW 1
6940: ST_TO_ADDR
6941: GO 6915
6943: POP
6944: POP
// end ;
6945: LD_VAR 0 1
6949: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
6950: LD_INT 0
6952: PPUSH
6953: PPUSH
6954: PPUSH
6955: PPUSH
6956: PPUSH
6957: PPUSH
6958: PPUSH
6959: PPUSH
6960: PPUSH
6961: PPUSH
6962: PPUSH
6963: PPUSH
6964: PPUSH
6965: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine ] ;
6966: LD_ADDR_VAR 0 14
6970: PUSH
6971: LD_INT 1
6973: PUSH
6974: LD_INT 2
6976: PUSH
6977: LD_INT 3
6979: PUSH
6980: LD_INT 5
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: LIST
6987: LIST
6988: ST_TO_ADDR
// for i in gameTypes do
6989: LD_ADDR_VAR 0 2
6993: PUSH
6994: LD_VAR 0 14
6998: PUSH
6999: FOR_IN
7000: IFFALSE 7009
// disable ( i ) ;
7002: LD_VAR 0 2
7006: DISABLE_MARKED
7007: GO 6999
7009: POP
7010: POP
// if Multiplayer then
7011: LD_OWVAR 4
7015: IFFALSE 7199
// begin mpGameType := mp_game_type ;
7017: LD_ADDR_EXP 12
7021: PUSH
7022: LD_OWVAR 6
7026: ST_TO_ADDR
// your_side := mp_player_side ;
7027: LD_ADDR_OWVAR 2
7031: PUSH
7032: LD_OWVAR 7
7036: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
7037: LD_ADDR_EXP 16
7041: PUSH
7042: LD_OWVAR 17
7046: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
7047: LD_ADDR_EXP 17
7051: PUSH
7052: LD_OWVAR 15
7056: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
7057: LD_ADDR_EXP 18
7061: PUSH
7062: LD_OWVAR 16
7066: ST_TO_ADDR
// mpTeams := mp_teams ;
7067: LD_ADDR_EXP 19
7071: PUSH
7072: LD_OWVAR 12
7076: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
7077: LD_ADDR_VAR 0 2
7081: PUSH
7082: DOUBLE
7083: LD_INT 1
7085: DEC
7086: ST_TO_ADDR
7087: LD_EXP 13
7091: PPUSH
7092: CALL 24035 0 1
7096: PUSH
7097: FOR_TO
7098: IFFALSE 7174
// begin setting := mpGameSettingsKeys [ i ] ;
7100: LD_ADDR_VAR 0 12
7104: PUSH
7105: LD_EXP 13
7109: PUSH
7110: LD_VAR 0 2
7114: ARRAY
7115: ST_TO_ADDR
// if setting then
7116: LD_VAR 0 12
7120: IFFALSE 7172
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
7122: LD_ADDR_EXP 15
7126: PUSH
7127: LD_EXP 15
7131: PPUSH
7132: LD_VAR 0 2
7136: PPUSH
7137: LD_EXP 14
7141: PUSH
7142: LD_VAR 0 2
7146: ARRAY
7147: PUSH
7148: LD_VAR 0 2
7152: PUSH
7153: LD_INT 1
7155: MINUS
7156: PPUSH
7157: CALL_OW 426
7161: PUSH
7162: LD_INT 1
7164: PLUS
7165: ARRAY
7166: PPUSH
7167: CALL_OW 1
7171: ST_TO_ADDR
// end ;
7172: GO 7097
7174: POP
7175: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
7176: LD_ADDR_EXP 20
7180: PUSH
7181: LD_EXP 17
7185: PUSH
7186: LD_INT 0
7188: PUSH
7189: EMPTY
7190: LIST
7191: DIFF
7192: PUSH
7193: LD_INT 1
7195: GREATER
7196: ST_TO_ADDR
// end else
7197: GO 7199
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
7199: LD_EXP 12
7203: PPUSH
7204: CALL 842 0 1
// if Count ( mpMarkedAreas ) then
7208: LD_EXP 27
7212: PPUSH
7213: CALL 24035 0 1
7217: IFFALSE 7248
// begin for i in mpMarkedAreas do
7219: LD_ADDR_VAR 0 2
7223: PUSH
7224: LD_EXP 27
7228: PUSH
7229: FOR_IN
7230: IFFALSE 7246
// SetAreaMapShow ( i , 0 ) ;
7232: LD_VAR 0 2
7236: PPUSH
7237: LD_INT 0
7239: PPUSH
7240: CALL_OW 424
7244: GO 7229
7246: POP
7247: POP
// end ; for i := 1 to 8 do
7248: LD_ADDR_VAR 0 2
7252: PUSH
7253: DOUBLE
7254: LD_INT 1
7256: DEC
7257: ST_TO_ADDR
7258: LD_INT 8
7260: PUSH
7261: FOR_TO
7262: IFFALSE 8598
// begin if not mpSidePositions [ i ] then
7264: LD_EXP 16
7268: PUSH
7269: LD_VAR 0 2
7273: ARRAY
7274: NOT
7275: IFFALSE 7279
// continue ;
7277: GO 7261
// side := i ;
7279: LD_ADDR_VAR 0 7
7283: PUSH
7284: LD_VAR 0 2
7288: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
7289: LD_ADDR_VAR 0 9
7293: PUSH
7294: LD_EXP 18
7298: PUSH
7299: LD_VAR 0 2
7303: ARRAY
7304: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
7305: LD_ADDR_VAR 0 8
7309: PUSH
7310: LD_EXP 16
7314: PUSH
7315: LD_VAR 0 2
7319: ARRAY
7320: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
7321: LD_EXP 21
7325: PPUSH
7326: CALL 24035 0 1
7330: IFFALSE 7407
// begin for j in mpOilDeposits [ pos ] do
7332: LD_ADDR_VAR 0 3
7336: PUSH
7337: LD_EXP 21
7341: PUSH
7342: LD_VAR 0 8
7346: ARRAY
7347: PUSH
7348: FOR_IN
7349: IFFALSE 7405
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
7351: LD_VAR 0 3
7355: PUSH
7356: LD_INT 1
7358: ARRAY
7359: PPUSH
7360: LD_VAR 0 3
7364: PUSH
7365: LD_INT 2
7367: ARRAY
7368: PPUSH
7369: LD_INT 2
7371: PPUSH
7372: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
7376: LD_VAR 0 3
7380: PUSH
7381: LD_INT 1
7383: ARRAY
7384: PPUSH
7385: LD_VAR 0 3
7389: PUSH
7390: LD_INT 2
7392: ARRAY
7393: PPUSH
7394: LD_VAR 0 7
7398: PPUSH
7399: CALL_OW 441
// end ;
7403: GO 7348
7405: POP
7406: POP
// end ; if Count ( mpSibDeposits ) then
7407: LD_EXP 22
7411: PPUSH
7412: CALL 24035 0 1
7416: IFFALSE 7493
// begin for j in mpSibDeposits [ pos ] do
7418: LD_ADDR_VAR 0 3
7422: PUSH
7423: LD_EXP 22
7427: PUSH
7428: LD_VAR 0 8
7432: ARRAY
7433: PUSH
7434: FOR_IN
7435: IFFALSE 7491
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
7437: LD_VAR 0 3
7441: PUSH
7442: LD_INT 1
7444: ARRAY
7445: PPUSH
7446: LD_VAR 0 3
7450: PUSH
7451: LD_INT 2
7453: ARRAY
7454: PPUSH
7455: LD_INT 3
7457: PPUSH
7458: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
7462: LD_VAR 0 3
7466: PUSH
7467: LD_INT 1
7469: ARRAY
7470: PPUSH
7471: LD_VAR 0 3
7475: PUSH
7476: LD_INT 2
7478: ARRAY
7479: PPUSH
7480: LD_VAR 0 7
7484: PPUSH
7485: CALL_OW 441
// end ;
7489: GO 7434
7491: POP
7492: POP
// end ; InitBc ;
7493: CALL_OW 21
// InitUc ;
7497: CALL_OW 18
// uc_side := side ;
7501: LD_ADDR_OWVAR 20
7505: PUSH
7506: LD_VAR 0 7
7510: ST_TO_ADDR
// uc_nation := nation ;
7511: LD_ADDR_OWVAR 21
7515: PUSH
7516: LD_VAR 0 9
7520: ST_TO_ADDR
// if mpBattleFlag > - 1 then
7521: LD_EXP 31
7525: PUSH
7526: LD_INT 1
7528: NEG
7529: GREATER
7530: IFFALSE 7689
// begin x := mpStartPos [ pos ] [ 1 ] ;
7532: LD_ADDR_VAR 0 5
7536: PUSH
7537: LD_EXP 30
7541: PUSH
7542: LD_VAR 0 8
7546: ARRAY
7547: PUSH
7548: LD_INT 1
7550: ARRAY
7551: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
7552: LD_ADDR_VAR 0 6
7556: PUSH
7557: LD_EXP 30
7561: PUSH
7562: LD_VAR 0 8
7566: ARRAY
7567: PUSH
7568: LD_INT 2
7570: ARRAY
7571: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
7572: LD_VAR 0 5
7576: PPUSH
7577: LD_VAR 0 6
7581: PPUSH
7582: LD_INT 12
7584: PPUSH
7585: LD_INT 2
7587: PPUSH
7588: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
7592: LD_ADDR_EXP 32
7596: PUSH
7597: LD_EXP 32
7601: PPUSH
7602: LD_VAR 0 7
7606: PPUSH
7607: LD_VAR 0 7
7611: PPUSH
7612: LD_VAR 0 5
7616: PPUSH
7617: LD_VAR 0 6
7621: PPUSH
7622: LD_INT 1
7624: PUSH
7625: LD_INT 100
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: LD_INT 2
7634: PUSH
7635: LD_INT 70
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: PUSH
7642: LD_INT 3
7644: PUSH
7645: LD_INT 40
7647: PUSH
7648: EMPTY
7649: LIST
7650: LIST
7651: PUSH
7652: LD_INT 10
7654: PUSH
7655: LD_INT 25
7657: PUSH
7658: EMPTY
7659: LIST
7660: LIST
7661: PUSH
7662: LD_INT 20
7664: PUSH
7665: LD_INT 100
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: PPUSH
7679: CALL_OW 418
7683: PPUSH
7684: CALL_OW 1
7688: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
7689: LD_EXP 23
7693: PPUSH
7694: CALL 24035 0 1
7698: IFFALSE 7882
// begin if mpGameType = GameTypeSurvival then
7700: LD_EXP 12
7704: PUSH
7705: LD_INT 2
7707: EQUAL
7708: IFFALSE 7728
// begin bc_level := 10 ;
7710: LD_ADDR_OWVAR 43
7714: PUSH
7715: LD_INT 10
7717: ST_TO_ADDR
// bc_type := b_warehouse ;
7718: LD_ADDR_OWVAR 42
7722: PUSH
7723: LD_INT 1
7725: ST_TO_ADDR
// end else
7726: GO 7744
// begin bc_level := 0 ;
7728: LD_ADDR_OWVAR 43
7732: PUSH
7733: LD_INT 0
7735: ST_TO_ADDR
// bc_type := b_depot ;
7736: LD_ADDR_OWVAR 42
7740: PUSH
7741: LD_INT 0
7743: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
7744: LD_ADDR_VAR 0 4
7748: PUSH
7749: LD_EXP 23
7753: PUSH
7754: LD_VAR 0 8
7758: ARRAY
7759: PUSH
7760: LD_INT 1
7762: ARRAY
7763: PPUSH
7764: LD_EXP 23
7768: PUSH
7769: LD_VAR 0 8
7773: ARRAY
7774: PUSH
7775: LD_INT 2
7777: ARRAY
7778: PPUSH
7779: LD_EXP 23
7783: PUSH
7784: LD_VAR 0 8
7788: ARRAY
7789: PUSH
7790: LD_INT 3
7792: ARRAY
7793: PPUSH
7794: CALL_OW 47
7798: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
7799: LD_VAR 0 4
7803: PPUSH
7804: LD_STRING @
7806: PUSH
7807: LD_VAR 0 7
7811: STR
7812: PPUSH
7813: CALL_OW 500
// if Count ( mpStartingResources ) then
7817: LD_EXP 24
7821: PPUSH
7822: CALL 24035 0 1
7826: IFFALSE 7880
// begin for j := 1 to mpStartingResources do
7828: LD_ADDR_VAR 0 3
7832: PUSH
7833: DOUBLE
7834: LD_INT 1
7836: DEC
7837: ST_TO_ADDR
7838: LD_EXP 24
7842: PUSH
7843: FOR_TO
7844: IFFALSE 7878
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
7846: LD_VAR 0 4
7850: PPUSH
7851: CALL_OW 274
7855: PPUSH
7856: LD_VAR 0 3
7860: PPUSH
7861: LD_EXP 24
7865: PUSH
7866: LD_VAR 0 3
7870: ARRAY
7871: PPUSH
7872: CALL_OW 277
7876: GO 7843
7878: POP
7879: POP
// end ; end else
7880: GO 8089
// if Count ( mpStartingResources ) then
7882: LD_EXP 24
7886: PPUSH
7887: CALL 24035 0 1
7891: IFFALSE 8089
// begin x := mpStartPos [ pos ] [ 1 ] ;
7893: LD_ADDR_VAR 0 5
7897: PUSH
7898: LD_EXP 30
7902: PUSH
7903: LD_VAR 0 8
7907: ARRAY
7908: PUSH
7909: LD_INT 1
7911: ARRAY
7912: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
7913: LD_ADDR_VAR 0 6
7917: PUSH
7918: LD_EXP 30
7922: PUSH
7923: LD_VAR 0 8
7927: ARRAY
7928: PUSH
7929: LD_INT 2
7931: ARRAY
7932: ST_TO_ADDR
// for j := 1 to mpStartingResources do
7933: LD_ADDR_VAR 0 3
7937: PUSH
7938: DOUBLE
7939: LD_INT 1
7941: DEC
7942: ST_TO_ADDR
7943: LD_EXP 24
7947: PUSH
7948: FOR_TO
7949: IFFALSE 8087
// begin resources := mpStartingResources [ j ] ;
7951: LD_ADDR_VAR 0 13
7955: PUSH
7956: LD_EXP 24
7960: PUSH
7961: LD_VAR 0 3
7965: ARRAY
7966: ST_TO_ADDR
// if resources = 0 then
7967: LD_VAR 0 13
7971: PUSH
7972: LD_INT 0
7974: EQUAL
7975: IFFALSE 7979
// continue ;
7977: GO 7948
// repeat if resources >= 50 then
7979: LD_VAR 0 13
7983: PUSH
7984: LD_INT 50
7986: GREATEREQUAL
7987: IFFALSE 8033
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
7989: LD_VAR 0 3
7993: PPUSH
7994: LD_INT 5
7996: PPUSH
7997: LD_VAR 0 5
8001: PPUSH
8002: LD_VAR 0 6
8006: PPUSH
8007: LD_INT 6
8009: PPUSH
8010: LD_INT 0
8012: PPUSH
8013: CALL_OW 60
// resources := resources - 50 ;
8017: LD_ADDR_VAR 0 13
8021: PUSH
8022: LD_VAR 0 13
8026: PUSH
8027: LD_INT 50
8029: MINUS
8030: ST_TO_ADDR
// end else
8031: GO 8075
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
8033: LD_VAR 0 3
8037: PPUSH
8038: LD_VAR 0 13
8042: PUSH
8043: LD_INT 10
8045: DIV
8046: PPUSH
8047: LD_VAR 0 5
8051: PPUSH
8052: LD_VAR 0 6
8056: PPUSH
8057: LD_INT 6
8059: PPUSH
8060: LD_INT 0
8062: PPUSH
8063: CALL_OW 60
// resources := 0 ;
8067: LD_ADDR_VAR 0 13
8071: PUSH
8072: LD_INT 0
8074: ST_TO_ADDR
// end ; until resources <= 0 ;
8075: LD_VAR 0 13
8079: PUSH
8080: LD_INT 0
8082: LESSEQUAL
8083: IFFALSE 7979
// end ;
8085: GO 7948
8087: POP
8088: POP
// end ; if Count ( mpBuildings ) then
8089: LD_EXP 26
8093: PPUSH
8094: CALL 24035 0 1
8098: IFFALSE 8176
// begin for j in mpBuildings [ pos ] do
8100: LD_ADDR_VAR 0 3
8104: PUSH
8105: LD_EXP 26
8109: PUSH
8110: LD_VAR 0 8
8114: ARRAY
8115: PUSH
8116: FOR_IN
8117: IFFALSE 8174
// begin bc_level := 0 ;
8119: LD_ADDR_OWVAR 43
8123: PUSH
8124: LD_INT 0
8126: ST_TO_ADDR
// bc_type := j [ 1 ] ;
8127: LD_ADDR_OWVAR 42
8131: PUSH
8132: LD_VAR 0 3
8136: PUSH
8137: LD_INT 1
8139: ARRAY
8140: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
8141: LD_VAR 0 3
8145: PUSH
8146: LD_INT 2
8148: ARRAY
8149: PPUSH
8150: LD_VAR 0 3
8154: PUSH
8155: LD_INT 3
8157: ARRAY
8158: PPUSH
8159: LD_VAR 0 3
8163: PUSH
8164: LD_INT 4
8166: ARRAY
8167: PPUSH
8168: CALL_OW 47
// end ;
8172: GO 8116
8174: POP
8175: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
8176: LD_EXP 35
8180: IFFALSE 8200
8182: PUSH
8183: LD_INT 20
8185: PPUSH
8186: LD_VAR 0 7
8190: PPUSH
8191: CALL_OW 321
8195: PUSH
8196: LD_INT 1
8198: EQUAL
8199: AND
8200: IFFALSE 8217
// SetTech ( tech_SibDet , side , state_researched ) ;
8202: LD_INT 20
8204: PPUSH
8205: LD_VAR 0 7
8209: PPUSH
8210: LD_INT 2
8212: PPUSH
8213: CALL_OW 322
// if not mpArtifacts then
8217: LD_EXP 53
8221: NOT
8222: IFFALSE 8239
// SetTech ( tech_artifact , side , state_disabled ) ;
8224: LD_INT 24
8226: PPUSH
8227: LD_VAR 0 7
8231: PPUSH
8232: LD_INT 0
8234: PPUSH
8235: CALL_OW 322
// if mpSibBomb = 1 then
8239: LD_EXP 37
8243: PUSH
8244: LD_INT 1
8246: EQUAL
8247: IFFALSE 8266
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
8249: LD_INT 25
8251: PPUSH
8252: LD_VAR 0 7
8256: PPUSH
8257: LD_INT 1
8259: PPUSH
8260: CALL_OW 322
// end else
8264: GO 8281
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
8266: LD_INT 25
8268: PPUSH
8269: LD_VAR 0 7
8273: PPUSH
8274: LD_INT 0
8276: PPUSH
8277: CALL_OW 322
// end ; if mpVehicles then
8281: LD_EXP 45
8285: IFFALSE 8384
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
8287: LD_ADDR_VAR 0 3
8291: PUSH
8292: LD_VAR 0 7
8296: PPUSH
8297: LD_VAR 0 9
8301: PPUSH
8302: LD_EXP 45
8306: PPUSH
8307: CALL 9508 0 3
8311: PUSH
8312: FOR_IN
8313: IFFALSE 8382
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
8315: LD_VAR 0 3
8319: PPUSH
8320: LD_INT 0
8322: PPUSH
8323: LD_INT 5
8325: PPUSH
8326: CALL_OW 12
8330: PPUSH
8331: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
8335: LD_VAR 0 3
8339: PPUSH
8340: LD_EXP 30
8344: PUSH
8345: LD_VAR 0 8
8349: ARRAY
8350: PUSH
8351: LD_INT 1
8353: ARRAY
8354: PPUSH
8355: LD_EXP 30
8359: PUSH
8360: LD_VAR 0 8
8364: ARRAY
8365: PUSH
8366: LD_INT 2
8368: ARRAY
8369: PPUSH
8370: LD_INT 12
8372: PPUSH
8373: LD_INT 0
8375: PPUSH
8376: CALL_OW 50
// end ;
8380: GO 8312
8382: POP
8383: POP
// end ; uc_nation := nation ;
8384: LD_ADDR_OWVAR 21
8388: PUSH
8389: LD_VAR 0 9
8393: ST_TO_ADDR
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
8394: LD_ADDR_VAR 0 11
8398: PUSH
8399: LD_VAR 0 7
8403: PPUSH
8404: LD_VAR 0 9
8408: PPUSH
8409: LD_EXP 33
8413: PPUSH
8414: LD_EXP 34
8418: PPUSH
8419: CALL 9010 0 4
8423: ST_TO_ADDR
// for j in team do
8424: LD_ADDR_VAR 0 3
8428: PUSH
8429: LD_VAR 0 11
8433: PUSH
8434: FOR_IN
8435: IFFALSE 8484
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
8437: LD_VAR 0 3
8441: PPUSH
8442: LD_EXP 30
8446: PUSH
8447: LD_VAR 0 8
8451: ARRAY
8452: PUSH
8453: LD_INT 1
8455: ARRAY
8456: PPUSH
8457: LD_EXP 30
8461: PUSH
8462: LD_VAR 0 8
8466: ARRAY
8467: PUSH
8468: LD_INT 2
8470: ARRAY
8471: PPUSH
8472: LD_INT 12
8474: PPUSH
8475: LD_INT 0
8477: PPUSH
8478: CALL_OW 50
8482: GO 8434
8484: POP
8485: POP
// if mpApemans then
8486: LD_EXP 39
8490: IFFALSE 8596
// begin for j := 1 to mpApemans do
8492: LD_ADDR_VAR 0 3
8496: PUSH
8497: DOUBLE
8498: LD_INT 1
8500: DEC
8501: ST_TO_ADDR
8502: LD_EXP 39
8506: PUSH
8507: FOR_TO
8508: IFFALSE 8594
// begin PrepareApeman ( - 5 ) ;
8510: LD_INT 5
8512: NEG
8513: PPUSH
8514: CALL 56094 0 1
// ape := CreateHuman ;
8518: LD_ADDR_VAR 0 10
8522: PUSH
8523: CALL_OW 44
8527: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
8528: LD_ADDR_EXP 41
8532: PUSH
8533: LD_EXP 41
8537: PPUSH
8538: LD_VAR 0 8
8542: PPUSH
8543: LD_EXP 41
8547: PUSH
8548: LD_VAR 0 8
8552: ARRAY
8553: PPUSH
8554: LD_VAR 0 10
8558: PPUSH
8559: CALL 59967 0 2
8563: PPUSH
8564: CALL_OW 1
8568: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
8569: LD_VAR 0 10
8573: PPUSH
8574: LD_EXP 40
8578: PUSH
8579: LD_VAR 0 8
8583: ARRAY
8584: PPUSH
8585: LD_INT 0
8587: PPUSH
8588: CALL_OW 49
// end ;
8592: GO 8507
8594: POP
8595: POP
// end ; end ;
8596: GO 7261
8598: POP
8599: POP
// if not mpTeamGame then
8600: LD_EXP 20
8604: NOT
8605: IFFALSE 8703
// begin for i := 1 to 8 do
8607: LD_ADDR_VAR 0 2
8611: PUSH
8612: DOUBLE
8613: LD_INT 1
8615: DEC
8616: ST_TO_ADDR
8617: LD_INT 8
8619: PUSH
8620: FOR_TO
8621: IFFALSE 8699
// for j := 1 to 8 do
8623: LD_ADDR_VAR 0 3
8627: PUSH
8628: DOUBLE
8629: LD_INT 1
8631: DEC
8632: ST_TO_ADDR
8633: LD_INT 8
8635: PUSH
8636: FOR_TO
8637: IFFALSE 8695
// if i <> j then
8639: LD_VAR 0 2
8643: PUSH
8644: LD_VAR 0 3
8648: NONEQUAL
8649: IFFALSE 8673
// SetAttitude ( i , j , att_neutral , true ) else
8651: LD_VAR 0 2
8655: PPUSH
8656: LD_VAR 0 3
8660: PPUSH
8661: LD_INT 0
8663: PPUSH
8664: LD_INT 1
8666: PPUSH
8667: CALL_OW 80
8671: GO 8693
// SetAttitude ( i , j , att_friend , true ) ;
8673: LD_VAR 0 2
8677: PPUSH
8678: LD_VAR 0 3
8682: PPUSH
8683: LD_INT 1
8685: PPUSH
8686: LD_INT 1
8688: PPUSH
8689: CALL_OW 80
8693: GO 8636
8695: POP
8696: POP
8697: GO 8620
8699: POP
8700: POP
// end else
8701: GO 8878
// begin if mpSharedVision then
8703: LD_EXP 25
8707: IFFALSE 8772
// begin for i in mpTeams do
8709: LD_ADDR_VAR 0 2
8713: PUSH
8714: LD_EXP 19
8718: PUSH
8719: FOR_IN
8720: IFFALSE 8770
// for j := 2 to i do
8722: LD_ADDR_VAR 0 3
8726: PUSH
8727: DOUBLE
8728: LD_INT 2
8730: DEC
8731: ST_TO_ADDR
8732: LD_VAR 0 2
8736: PUSH
8737: FOR_TO
8738: IFFALSE 8766
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
8740: LD_VAR 0 2
8744: PUSH
8745: LD_VAR 0 3
8749: ARRAY
8750: PPUSH
8751: LD_VAR 0 2
8755: PUSH
8756: LD_INT 1
8758: ARRAY
8759: PPUSH
8760: CALL_OW 343
8764: GO 8737
8766: POP
8767: POP
8768: GO 8719
8770: POP
8771: POP
// end ; for i := 1 to 8 do
8772: LD_ADDR_VAR 0 2
8776: PUSH
8777: DOUBLE
8778: LD_INT 1
8780: DEC
8781: ST_TO_ADDR
8782: LD_INT 8
8784: PUSH
8785: FOR_TO
8786: IFFALSE 8876
// for j := 1 to 8 do
8788: LD_ADDR_VAR 0 3
8792: PUSH
8793: DOUBLE
8794: LD_INT 1
8796: DEC
8797: ST_TO_ADDR
8798: LD_INT 8
8800: PUSH
8801: FOR_TO
8802: IFFALSE 8872
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
8804: LD_EXP 17
8808: PUSH
8809: LD_VAR 0 2
8813: ARRAY
8814: PUSH
8815: LD_EXP 17
8819: PUSH
8820: LD_VAR 0 3
8824: ARRAY
8825: EQUAL
8826: IFFALSE 8850
// SetAttitude ( i , j , att_friend , true ) else
8828: LD_VAR 0 2
8832: PPUSH
8833: LD_VAR 0 3
8837: PPUSH
8838: LD_INT 1
8840: PPUSH
8841: LD_INT 1
8843: PPUSH
8844: CALL_OW 80
8848: GO 8870
// SetAttitude ( i , j , att_enemy , true ) ;
8850: LD_VAR 0 2
8854: PPUSH
8855: LD_VAR 0 3
8859: PPUSH
8860: LD_INT 2
8862: PPUSH
8863: LD_INT 1
8865: PPUSH
8866: CALL_OW 80
8870: GO 8801
8872: POP
8873: POP
8874: GO 8785
8876: POP
8877: POP
// end ; music_nat := mpSideNations [ your_side ] ;
8878: LD_ADDR_OWVAR 71
8882: PUSH
8883: LD_EXP 18
8887: PUSH
8888: LD_OWVAR 2
8892: ARRAY
8893: ST_TO_ADDR
// if IAmSpec then
8894: CALL_OW 531
8898: IFFALSE 8939
// begin FogOff ( true ) ;
8900: LD_INT 1
8902: PPUSH
8903: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
8907: LD_EXP 38
8911: PUSH
8912: LD_INT 1
8914: ARRAY
8915: PUSH
8916: LD_INT 2
8918: DIV
8919: PPUSH
8920: LD_EXP 38
8924: PUSH
8925: LD_INT 2
8927: ARRAY
8928: PUSH
8929: LD_INT 2
8931: DIV
8932: PPUSH
8933: CALL_OW 86
// end else
8937: GO 8985
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
8939: LD_EXP 30
8943: PUSH
8944: LD_EXP 16
8948: PUSH
8949: LD_OWVAR 2
8953: ARRAY
8954: ARRAY
8955: PUSH
8956: LD_INT 1
8958: ARRAY
8959: PPUSH
8960: LD_EXP 30
8964: PUSH
8965: LD_EXP 16
8969: PUSH
8970: LD_OWVAR 2
8974: ARRAY
8975: ARRAY
8976: PUSH
8977: LD_INT 2
8979: ARRAY
8980: PPUSH
8981: CALL_OW 86
// end ; BeginBuildUp ;
8985: CALL 10041 0 0
// enable ( mpActive ) ;
8989: LD_INT 100
8991: ENABLE_MARKED
// enable ( mpGameType ) ;
8992: LD_EXP 12
8996: ENABLE_MARKED
// mpGameActive := true ;
8997: LD_ADDR_EXP 48
9001: PUSH
9002: LD_INT 1
9004: ST_TO_ADDR
// end ;
9005: LD_VAR 0 1
9009: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
9010: LD_INT 0
9012: PPUSH
9013: PPUSH
9014: PPUSH
9015: PPUSH
// result := [ ] ;
9016: LD_ADDR_VAR 0 5
9020: PUSH
9021: EMPTY
9022: ST_TO_ADDR
// class := class_soldier ;
9023: LD_ADDR_VAR 0 8
9027: PUSH
9028: LD_INT 1
9030: ST_TO_ADDR
// uc_side := side ;
9031: LD_ADDR_OWVAR 20
9035: PUSH
9036: LD_VAR 0 1
9040: ST_TO_ADDR
// uc_nation := nation ;
9041: LD_ADDR_OWVAR 21
9045: PUSH
9046: LD_VAR 0 2
9050: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
9051: LD_ADDR_OWVAR 26
9055: PUSH
9056: LD_OWVAR 19
9060: PUSH
9061: LD_VAR 0 1
9065: ARRAY
9066: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
9067: LD_INT 1
9069: PPUSH
9070: LD_INT 2
9072: PPUSH
9073: CALL_OW 12
9077: PPUSH
9078: LD_VAR 0 8
9082: PPUSH
9083: LD_VAR 0 4
9087: PUSH
9088: LD_INT 2
9090: PLUS
9091: PPUSH
9092: CALL_OW 380
// hc_importance := 105 ;
9096: LD_ADDR_OWVAR 32
9100: PUSH
9101: LD_INT 105
9103: ST_TO_ADDR
// if Multiplayer then
9104: LD_OWVAR 4
9108: IFFALSE 9148
// begin hc_gallery := MULTIAVATARS ;
9110: LD_ADDR_OWVAR 33
9114: PUSH
9115: LD_STRING MULTIAVATARS
9117: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
9118: LD_ADDR_OWVAR 34
9122: PUSH
9123: LD_VAR 0 1
9127: PPUSH
9128: CALL_OW 525
9132: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
9133: LD_ADDR_OWVAR 27
9137: PUSH
9138: LD_VAR 0 1
9142: PPUSH
9143: CALL_OW 526
9147: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
9148: LD_ADDR_VAR 0 5
9152: PUSH
9153: LD_VAR 0 5
9157: PPUSH
9158: CALL_OW 44
9162: PPUSH
9163: CALL 59967 0 2
9167: ST_TO_ADDR
// if mpTeamPreset then
9168: LD_LOC 1
9172: IFFALSE 9268
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
9174: LD_LOC 1
9178: PUSH
9179: LD_INT 1
9181: ARRAY
9182: PPUSH
9183: LD_VAR 0 5
9187: PUSH
9188: LD_VAR 0 5
9192: ARRAY
9193: PPUSH
9194: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
9198: LD_VAR 0 5
9202: PUSH
9203: LD_VAR 0 5
9207: ARRAY
9208: PPUSH
9209: LD_INT 1
9211: PPUSH
9212: LD_LOC 1
9216: PUSH
9217: LD_INT 1
9219: ARRAY
9220: PPUSH
9221: LD_INT 1
9223: PPUSH
9224: CALL_OW 260
9228: PPUSH
9229: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
9233: LD_VAR 0 5
9237: PUSH
9238: LD_VAR 0 5
9242: ARRAY
9243: PPUSH
9244: LD_INT 2
9246: PPUSH
9247: LD_LOC 1
9251: PUSH
9252: LD_INT 1
9254: ARRAY
9255: PPUSH
9256: LD_INT 2
9258: PPUSH
9259: CALL_OW 260
9263: PPUSH
9264: CALL_OW 239
// end ; InitHc_All ( ) ;
9268: CALL_OW 584
// class := 2 ;
9272: LD_ADDR_VAR 0 8
9276: PUSH
9277: LD_INT 2
9279: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
9280: LD_ADDR_VAR 0 6
9284: PUSH
9285: DOUBLE
9286: LD_INT 1
9288: DEC
9289: ST_TO_ADDR
9290: LD_VAR 0 3
9294: PUSH
9295: LD_INT 1
9297: MINUS
9298: PUSH
9299: FOR_TO
9300: IFFALSE 9484
// begin PrepareHuman ( false , class , skill ) ;
9302: LD_INT 0
9304: PPUSH
9305: LD_VAR 0 8
9309: PPUSH
9310: LD_VAR 0 4
9314: PPUSH
9315: CALL_OW 380
// un := CreateHuman ;
9319: LD_ADDR_VAR 0 7
9323: PUSH
9324: CALL_OW 44
9328: ST_TO_ADDR
// result := Join ( result , un ) ;
9329: LD_ADDR_VAR 0 5
9333: PUSH
9334: LD_VAR 0 5
9338: PPUSH
9339: LD_VAR 0 7
9343: PPUSH
9344: CALL 59967 0 2
9348: ST_TO_ADDR
// if mpTeamPreset then
9349: LD_LOC 1
9353: IFFALSE 9449
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
9355: LD_LOC 1
9359: PUSH
9360: LD_VAR 0 6
9364: PUSH
9365: LD_INT 1
9367: PLUS
9368: ARRAY
9369: PPUSH
9370: LD_VAR 0 7
9374: PPUSH
9375: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
9379: LD_VAR 0 7
9383: PPUSH
9384: LD_INT 1
9386: PPUSH
9387: LD_LOC 1
9391: PUSH
9392: LD_VAR 0 6
9396: PUSH
9397: LD_INT 1
9399: PLUS
9400: ARRAY
9401: PPUSH
9402: LD_INT 1
9404: PPUSH
9405: CALL_OW 260
9409: PPUSH
9410: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
9414: LD_VAR 0 7
9418: PPUSH
9419: LD_INT 2
9421: PPUSH
9422: LD_LOC 1
9426: PUSH
9427: LD_VAR 0 6
9431: PUSH
9432: LD_INT 1
9434: PLUS
9435: ARRAY
9436: PPUSH
9437: LD_INT 2
9439: PPUSH
9440: CALL_OW 260
9444: PPUSH
9445: CALL_OW 239
// end ; class := Inc ( class ) ;
9449: LD_ADDR_VAR 0 8
9453: PUSH
9454: LD_VAR 0 8
9458: PPUSH
9459: CALL 61340 0 1
9463: ST_TO_ADDR
// if class = 5 then
9464: LD_VAR 0 8
9468: PUSH
9469: LD_INT 5
9471: EQUAL
9472: IFFALSE 9482
// class := 1 ;
9474: LD_ADDR_VAR 0 8
9478: PUSH
9479: LD_INT 1
9481: ST_TO_ADDR
// end ;
9482: GO 9299
9484: POP
9485: POP
// if not mpTeamPreset then
9486: LD_LOC 1
9490: NOT
9491: IFFALSE 9503
// mpTeamPreset := result ;
9493: LD_ADDR_LOC 1
9497: PUSH
9498: LD_VAR 0 5
9502: ST_TO_ADDR
// end ;
9503: LD_VAR 0 5
9507: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
9508: LD_INT 0
9510: PPUSH
9511: PPUSH
// result := [ ] ;
9512: LD_ADDR_VAR 0 4
9516: PUSH
9517: EMPTY
9518: ST_TO_ADDR
// if not vehicles then
9519: LD_VAR 0 3
9523: NOT
9524: IFFALSE 9528
// exit ;
9526: GO 9742
// for i := 1 to vehicles [ nation ] do
9528: LD_ADDR_VAR 0 5
9532: PUSH
9533: DOUBLE
9534: LD_INT 1
9536: DEC
9537: ST_TO_ADDR
9538: LD_VAR 0 3
9542: PUSH
9543: LD_VAR 0 2
9547: ARRAY
9548: PUSH
9549: FOR_TO
9550: IFFALSE 9740
// begin uc_side := side ;
9552: LD_ADDR_OWVAR 20
9556: PUSH
9557: LD_VAR 0 1
9561: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
9562: LD_VAR 0 3
9566: PUSH
9567: LD_VAR 0 2
9571: ARRAY
9572: PUSH
9573: LD_VAR 0 5
9577: ARRAY
9578: PPUSH
9579: CALL 24035 0 1
9583: PUSH
9584: LD_INT 4
9586: GREATER
9587: IFFALSE 9617
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
9589: LD_ADDR_OWVAR 21
9593: PUSH
9594: LD_VAR 0 3
9598: PUSH
9599: LD_VAR 0 2
9603: ARRAY
9604: PUSH
9605: LD_VAR 0 5
9609: ARRAY
9610: PUSH
9611: LD_INT 5
9613: ARRAY
9614: ST_TO_ADDR
9615: GO 9627
// uc_nation := nation ;
9617: LD_ADDR_OWVAR 21
9621: PUSH
9622: LD_VAR 0 2
9626: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
9627: LD_VAR 0 3
9631: PUSH
9632: LD_VAR 0 2
9636: ARRAY
9637: PUSH
9638: LD_VAR 0 5
9642: ARRAY
9643: PUSH
9644: LD_INT 1
9646: ARRAY
9647: PPUSH
9648: LD_VAR 0 3
9652: PUSH
9653: LD_VAR 0 2
9657: ARRAY
9658: PUSH
9659: LD_VAR 0 5
9663: ARRAY
9664: PUSH
9665: LD_INT 2
9667: ARRAY
9668: PPUSH
9669: LD_VAR 0 3
9673: PUSH
9674: LD_VAR 0 2
9678: ARRAY
9679: PUSH
9680: LD_VAR 0 5
9684: ARRAY
9685: PUSH
9686: LD_INT 3
9688: ARRAY
9689: PPUSH
9690: LD_VAR 0 3
9694: PUSH
9695: LD_VAR 0 2
9699: ARRAY
9700: PUSH
9701: LD_VAR 0 5
9705: ARRAY
9706: PUSH
9707: LD_INT 4
9709: ARRAY
9710: PPUSH
9711: LD_INT 80
9713: PPUSH
9714: CALL 26797 0 5
// result := Join ( result , CreateVehicle ) ;
9718: LD_ADDR_VAR 0 4
9722: PUSH
9723: LD_VAR 0 4
9727: PPUSH
9728: CALL_OW 45
9732: PPUSH
9733: CALL 59967 0 2
9737: ST_TO_ADDR
// end ;
9738: GO 9549
9740: POP
9741: POP
// end ;
9742: LD_VAR 0 4
9746: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
9747: LD_INT 0
9749: PPUSH
9750: PPUSH
// for i in mpBattleFlags do
9751: LD_ADDR_VAR 0 3
9755: PUSH
9756: LD_EXP 32
9760: PUSH
9761: FOR_IN
9762: IFFALSE 9839
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
9764: LD_VAR 0 3
9768: PPUSH
9769: LD_INT 1
9771: PUSH
9772: LD_VAR 0 1
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: PUSH
9781: LD_INT 2
9783: PUSH
9784: LD_VAR 0 1
9788: PUSH
9789: LD_REAL  7.00000000000000E-0001
9792: MUL
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: PUSH
9798: LD_INT 3
9800: PUSH
9801: LD_VAR 0 1
9805: PUSH
9806: LD_REAL  4.00000000000000E-0001
9809: MUL
9810: PUSH
9811: EMPTY
9812: LIST
9813: LIST
9814: PUSH
9815: LD_INT 20
9817: PUSH
9818: LD_VAR 0 1
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: PPUSH
9833: CALL_OW 423
9837: GO 9761
9839: POP
9840: POP
// end ;
9841: LD_VAR 0 2
9845: RET
// every 0 0$1 trigger mpActive do var i , strength ;
9846: LD_INT 100
9848: IFFALSE 9943
9850: GO 9852
9852: DISABLE
9853: LD_INT 0
9855: PPUSH
9856: PPUSH
// begin if mpBattleFlag <= 0 then
9857: LD_EXP 31
9861: PUSH
9862: LD_INT 0
9864: LESSEQUAL
9865: IFFALSE 9869
// exit ;
9867: GO 9943
// strength := 100 ;
9869: LD_ADDR_VAR 0 2
9873: PUSH
9874: LD_INT 100
9876: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
9877: LD_EXP 31
9881: PPUSH
9882: CALL_OW 67
// strength := Dec ( strength ) ;
9886: LD_ADDR_VAR 0 2
9890: PUSH
9891: LD_VAR 0 2
9895: PPUSH
9896: CALL 61362 0 1
9900: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
9901: LD_VAR 0 2
9905: PPUSH
9906: CALL 9747 0 1
// until not strength ;
9910: LD_VAR 0 2
9914: NOT
9915: IFFALSE 9877
// for i in mpBattleFlags do
9917: LD_ADDR_VAR 0 1
9921: PUSH
9922: LD_EXP 32
9926: PUSH
9927: FOR_IN
9928: IFFALSE 9941
// KillBattleFlag ( i ) ;
9930: LD_VAR 0 1
9934: PPUSH
9935: CALL_OW 419
9939: GO 9927
9941: POP
9942: POP
// end ;
9943: PPOPN 2
9945: END
// every 0 0$1 marked mpActive do var side , tmp ;
9946: GO 9948
9948: DISABLE
9949: LD_INT 0
9951: PPUSH
9952: PPUSH
// begin if mpSibBomb <= 1 then
9953: LD_EXP 37
9957: PUSH
9958: LD_INT 1
9960: LESSEQUAL
9961: IFFALSE 9965
// exit ;
9963: GO 10038
// tmp := mpSibBomb ;
9965: LD_ADDR_VAR 0 2
9969: PUSH
9970: LD_EXP 37
9974: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
9975: LD_INT 35
9977: PPUSH
9978: CALL_OW 67
// tmp := tmp - 0 0$1 ;
9982: LD_ADDR_VAR 0 2
9986: PUSH
9987: LD_VAR 0 2
9991: PUSH
9992: LD_INT 35
9994: MINUS
9995: ST_TO_ADDR
// until not tmp ;
9996: LD_VAR 0 2
10000: NOT
10001: IFFALSE 9975
// for side := 1 to 8 do
10003: LD_ADDR_VAR 0 1
10007: PUSH
10008: DOUBLE
10009: LD_INT 1
10011: DEC
10012: ST_TO_ADDR
10013: LD_INT 8
10015: PUSH
10016: FOR_TO
10017: IFFALSE 10036
// SetTech ( tech_SibFiss , side , state_enabled ) ;
10019: LD_INT 25
10021: PPUSH
10022: LD_VAR 0 1
10026: PPUSH
10027: LD_INT 1
10029: PPUSH
10030: CALL_OW 322
10034: GO 10016
10036: POP
10037: POP
// end ;
10038: PPOPN 2
10040: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
10041: LD_INT 0
10043: PPUSH
10044: PPUSH
10045: PPUSH
// mpBuildUpTimeDelay := 0 ;
10046: LD_ADDR_EXP 55
10050: PUSH
10051: LD_INT 0
10053: ST_TO_ADDR
// if not mpBuildUpTime then
10054: LD_EXP 29
10058: NOT
10059: IFFALSE 10063
// exit ;
10061: GO 10252
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
10063: LD_ADDR_EXP 55
10067: PUSH
10068: LD_INT 8400
10070: PUSH
10071: LD_INT 2100
10073: PUSH
10074: LD_EXP 29
10078: MUL
10079: PLUS
10080: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
10081: LD_ADDR_EXP 56
10085: PUSH
10086: LD_INT 1
10088: ST_TO_ADDR
// for i := 1 to 8 do
10089: LD_ADDR_VAR 0 2
10093: PUSH
10094: DOUBLE
10095: LD_INT 1
10097: DEC
10098: ST_TO_ADDR
10099: LD_INT 8
10101: PUSH
10102: FOR_TO
10103: IFFALSE 10250
// if mpSidePositions [ i ] then
10105: LD_EXP 16
10109: PUSH
10110: LD_VAR 0 2
10114: ARRAY
10115: IFFALSE 10248
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
10117: LD_EXP 28
10121: PUSH
10122: LD_EXP 16
10126: PUSH
10127: LD_VAR 0 2
10131: ARRAY
10132: ARRAY
10133: PPUSH
10134: LD_INT 5
10136: PPUSH
10137: CALL_OW 424
// for j := 1 to 8 do
10141: LD_ADDR_VAR 0 3
10145: PUSH
10146: DOUBLE
10147: LD_INT 1
10149: DEC
10150: ST_TO_ADDR
10151: LD_INT 8
10153: PUSH
10154: FOR_TO
10155: IFFALSE 10246
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
10157: LD_EXP 16
10161: PUSH
10162: LD_VAR 0 3
10166: ARRAY
10167: IFFALSE 10216
10169: PUSH
10170: LD_EXP 17
10174: PUSH
10175: LD_VAR 0 2
10179: ARRAY
10180: PUSH
10181: LD_EXP 17
10185: PUSH
10186: LD_VAR 0 3
10190: ARRAY
10191: NONEQUAL
10192: IFTRUE 10215
10194: PUSH
10195: LD_EXP 20
10199: NOT
10200: IFFALSE 10214
10202: PUSH
10203: LD_VAR 0 2
10207: PUSH
10208: LD_VAR 0 3
10212: NONEQUAL
10213: AND
10214: OR
10215: AND
10216: IFFALSE 10244
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
10218: LD_VAR 0 3
10222: PPUSH
10223: LD_EXP 28
10227: PUSH
10228: LD_EXP 16
10232: PUSH
10233: LD_VAR 0 2
10237: ARRAY
10238: ARRAY
10239: PPUSH
10240: CALL_OW 333
10244: GO 10154
10246: POP
10247: POP
// end ;
10248: GO 10102
10250: POP
10251: POP
// end ;
10252: LD_VAR 0 1
10256: RET
// function EndBuildUp ; var i , j ; begin
10257: LD_INT 0
10259: PPUSH
10260: PPUSH
10261: PPUSH
// mpBuildUpTimeActive := false ;
10262: LD_ADDR_EXP 56
10266: PUSH
10267: LD_INT 0
10269: ST_TO_ADDR
// for i := 1 to 8 do
10270: LD_ADDR_VAR 0 2
10274: PUSH
10275: DOUBLE
10276: LD_INT 1
10278: DEC
10279: ST_TO_ADDR
10280: LD_INT 8
10282: PUSH
10283: FOR_TO
10284: IFFALSE 10431
// if mpSidePositions [ i ] then
10286: LD_EXP 16
10290: PUSH
10291: LD_VAR 0 2
10295: ARRAY
10296: IFFALSE 10429
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
10298: LD_EXP 28
10302: PUSH
10303: LD_EXP 16
10307: PUSH
10308: LD_VAR 0 2
10312: ARRAY
10313: ARRAY
10314: PPUSH
10315: LD_INT 0
10317: PPUSH
10318: CALL_OW 424
// for j := 1 to 8 do
10322: LD_ADDR_VAR 0 3
10326: PUSH
10327: DOUBLE
10328: LD_INT 1
10330: DEC
10331: ST_TO_ADDR
10332: LD_INT 8
10334: PUSH
10335: FOR_TO
10336: IFFALSE 10427
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
10338: LD_EXP 16
10342: PUSH
10343: LD_VAR 0 3
10347: ARRAY
10348: IFFALSE 10397
10350: PUSH
10351: LD_EXP 17
10355: PUSH
10356: LD_VAR 0 2
10360: ARRAY
10361: PUSH
10362: LD_EXP 17
10366: PUSH
10367: LD_VAR 0 3
10371: ARRAY
10372: NONEQUAL
10373: IFTRUE 10396
10375: PUSH
10376: LD_EXP 20
10380: NOT
10381: IFFALSE 10395
10383: PUSH
10384: LD_VAR 0 2
10388: PUSH
10389: LD_VAR 0 3
10393: NONEQUAL
10394: AND
10395: OR
10396: AND
10397: IFFALSE 10425
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
10399: LD_VAR 0 3
10403: PPUSH
10404: LD_EXP 28
10408: PUSH
10409: LD_EXP 16
10413: PUSH
10414: LD_VAR 0 2
10418: ARRAY
10419: ARRAY
10420: PPUSH
10421: CALL_OW 334
10425: GO 10335
10427: POP
10428: POP
// end ;
10429: GO 10283
10431: POP
10432: POP
// end ;
10433: LD_VAR 0 1
10437: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
10438: LD_EXP 56
10442: IFFALSE 10623
10444: GO 10446
10446: DISABLE
10447: LD_INT 0
10449: PPUSH
10450: PPUSH
// begin for i := 1 to 8 do
10451: LD_ADDR_VAR 0 1
10455: PUSH
10456: DOUBLE
10457: LD_INT 1
10459: DEC
10460: ST_TO_ADDR
10461: LD_INT 8
10463: PUSH
10464: FOR_TO
10465: IFFALSE 10620
// if mpSidePositions [ i ] then
10467: LD_EXP 16
10471: PUSH
10472: LD_VAR 0 1
10476: ARRAY
10477: IFFALSE 10618
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
10479: LD_ADDR_VAR 0 2
10483: PUSH
10484: LD_EXP 28
10488: PUSH
10489: LD_EXP 16
10493: PUSH
10494: LD_VAR 0 1
10498: ARRAY
10499: ARRAY
10500: PPUSH
10501: LD_INT 2
10503: PUSH
10504: LD_INT 21
10506: PUSH
10507: LD_INT 1
10509: PUSH
10510: EMPTY
10511: LIST
10512: LIST
10513: PUSH
10514: LD_INT 21
10516: PUSH
10517: LD_INT 2
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: LIST
10528: PUSH
10529: LD_INT 22
10531: PUSH
10532: LD_OWVAR 2
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: PPUSH
10545: CALL_OW 70
10549: PUSH
10550: FOR_IN
10551: IFFALSE 10616
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
10553: LD_EXP 17
10557: PUSH
10558: LD_VAR 0 1
10562: ARRAY
10563: PUSH
10564: LD_EXP 17
10568: PUSH
10569: LD_OWVAR 2
10573: ARRAY
10574: NONEQUAL
10575: IFTRUE 10598
10577: PUSH
10578: LD_EXP 20
10582: NOT
10583: IFFALSE 10597
10585: PUSH
10586: LD_VAR 0 1
10590: PUSH
10591: LD_OWVAR 2
10595: NONEQUAL
10596: AND
10597: OR
10598: IFFALSE 10614
// ComMoveToArea ( un , BuildUpEscape ) ;
10600: LD_VAR 0 2
10604: PPUSH
10605: LD_EXP 1
10609: PPUSH
10610: CALL_OW 113
10614: GO 10550
10616: POP
10617: POP
10618: GO 10464
10620: POP
10621: POP
// enable ;
10622: ENABLE
// end ;
10623: PPOPN 2
10625: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
10626: LD_EXP 29
10630: IFFALSE 10680
10632: GO 10634
10634: DISABLE
10635: LD_INT 0
10637: PPUSH
// begin tmp := mpBuildUpTime ;
10638: LD_ADDR_VAR 0 1
10642: PUSH
10643: LD_EXP 29
10647: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10648: LD_INT 35
10650: PPUSH
10651: CALL_OW 67
// tmp := tmp - 0 0$1 ;
10655: LD_ADDR_VAR 0 1
10659: PUSH
10660: LD_VAR 0 1
10664: PUSH
10665: LD_INT 35
10667: MINUS
10668: ST_TO_ADDR
// until not tmp ;
10669: LD_VAR 0 1
10673: NOT
10674: IFFALSE 10648
// EndBuildUp ;
10676: CALL 10257 0 0
// end ;
10680: PPOPN 1
10682: END
// every 0 0$1 trigger mpActive marked mpWin do
10683: LD_INT 100
10685: IFFALSE 10719
10687: GO 10689
10689: DISABLE
// begin if IAmServer then
10690: CALL_OW 518
10694: IFFALSE 10703
// wait ( 0 0$3 ) ;
10696: LD_INT 105
10698: PPUSH
10699: CALL_OW 67
// if Multiplayer then
10703: LD_OWVAR 4
10707: IFFALSE 10715
// YouWinInMultiplayer else
10709: CALL_OW 106
10713: GO 10719
// YouWin ;
10715: CALL_OW 103
// end ;
10719: END
// export function HasPowerByGameType ( gameType , side ) ; begin
10720: LD_INT 0
10722: PPUSH
// result := false ;
10723: LD_ADDR_VAR 0 3
10727: PUSH
10728: LD_INT 0
10730: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine :
10731: LD_VAR 0 1
10735: PUSH
10736: LD_INT 1
10738: DOUBLE
10739: EQUAL
10740: IFTRUE 10750
10742: LD_INT 5
10744: DOUBLE
10745: EQUAL
10746: IFTRUE 10750
10748: GO 10823
10750: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
10751: LD_ADDR_VAR 0 3
10755: PUSH
10756: LD_INT 22
10758: PUSH
10759: LD_VAR 0 2
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: PUSH
10768: LD_INT 2
10770: PUSH
10771: LD_INT 21
10773: PUSH
10774: LD_INT 1
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PUSH
10781: LD_INT 33
10783: PUSH
10784: LD_INT 3
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: LD_INT 33
10793: PUSH
10794: LD_INT 5
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: PUSH
10807: EMPTY
10808: LIST
10809: LIST
10810: PPUSH
10811: CALL_OW 69
10815: PPUSH
10816: CALL 24035 0 1
10820: ST_TO_ADDR
// end ; GameTypeSurvival :
10821: GO 11062
10823: LD_INT 2
10825: DOUBLE
10826: EQUAL
10827: IFTRUE 10831
10829: GO 10961
10831: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
10832: LD_ADDR_VAR 0 3
10836: PUSH
10837: LD_INT 22
10839: PUSH
10840: LD_VAR 0 2
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PUSH
10849: LD_INT 2
10851: PUSH
10852: LD_INT 30
10854: PUSH
10855: LD_INT 0
10857: PUSH
10858: EMPTY
10859: LIST
10860: LIST
10861: PUSH
10862: LD_INT 30
10864: PUSH
10865: LD_INT 1
10867: PUSH
10868: EMPTY
10869: LIST
10870: LIST
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: LIST
10876: PUSH
10877: EMPTY
10878: LIST
10879: LIST
10880: PPUSH
10881: CALL_OW 69
10885: PPUSH
10886: CALL 24035 0 1
10890: IFFALSE 10958
10892: PUSH
10893: LD_INT 22
10895: PUSH
10896: LD_VAR 0 2
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: PUSH
10905: LD_INT 2
10907: PUSH
10908: LD_INT 21
10910: PUSH
10911: LD_INT 1
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: PUSH
10918: LD_INT 33
10920: PUSH
10921: LD_INT 3
10923: PUSH
10924: EMPTY
10925: LIST
10926: LIST
10927: PUSH
10928: LD_INT 33
10930: PUSH
10931: LD_INT 5
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: PUSH
10938: EMPTY
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: PUSH
10944: EMPTY
10945: LIST
10946: LIST
10947: PPUSH
10948: CALL_OW 69
10952: PPUSH
10953: CALL 24035 0 1
10957: AND
10958: ST_TO_ADDR
// end ; GameTypeKing :
10959: GO 11062
10961: LD_INT 3
10963: DOUBLE
10964: EQUAL
10965: IFTRUE 10969
10967: GO 11061
10969: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
10970: LD_ADDR_VAR 0 3
10974: PUSH
10975: LD_INT 22
10977: PUSH
10978: LD_VAR 0 2
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: PUSH
10987: LD_INT 2
10989: PUSH
10990: LD_INT 21
10992: PUSH
10993: LD_INT 1
10995: PUSH
10996: EMPTY
10997: LIST
10998: LIST
10999: PUSH
11000: LD_INT 33
11002: PUSH
11003: LD_INT 3
11005: PUSH
11006: EMPTY
11007: LIST
11008: LIST
11009: PUSH
11010: LD_INT 33
11012: PUSH
11013: LD_INT 5
11015: PUSH
11016: EMPTY
11017: LIST
11018: LIST
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: PPUSH
11030: CALL_OW 69
11034: PPUSH
11035: CALL 24035 0 1
11039: IFFALSE 11058
11041: PUSH
11042: LD_VAR 0 2
11046: PPUSH
11047: CALL 14142 0 1
11051: PUSH
11052: LD_EXP 44
11056: LESS
11057: AND
11058: ST_TO_ADDR
// end ; end ;
11059: GO 11062
11061: POP
// end ;
11062: LD_VAR 0 3
11066: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
11067: LD_INT 100
11069: IFFALSE 11299
11071: GO 11073
11073: DISABLE
11074: LD_INT 0
11076: PPUSH
11077: PPUSH
// begin if Multiplayer then
11078: LD_OWVAR 4
11082: IFFALSE 11090
// SetPlayerSpectator ( ) else
11084: CALL_OW 572
11088: GO 11099
// FogOff ( your_side ) ;
11090: LD_OWVAR 2
11094: PPUSH
11095: CALL_OW 344
// repeat gameIsOn := false ;
11099: LD_ADDR_VAR 0 1
11103: PUSH
11104: LD_INT 0
11106: ST_TO_ADDR
// for i := 1 to 8 do
11107: LD_ADDR_VAR 0 2
11111: PUSH
11112: DOUBLE
11113: LD_INT 1
11115: DEC
11116: ST_TO_ADDR
11117: LD_INT 8
11119: PUSH
11120: FOR_TO
11121: IFFALSE 11251
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
11123: LD_EXP 16
11127: PUSH
11128: LD_VAR 0 2
11132: ARRAY
11133: IFFALSE 11146
11135: PUSH
11136: LD_VAR 0 2
11140: PPUSH
11141: CALL_OW 108
11145: AND
11146: IFFALSE 11160
11148: PUSH
11149: LD_VAR 0 2
11153: PUSH
11154: LD_OWVAR 2
11158: NONEQUAL
11159: AND
11160: IFFALSE 11249
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
11162: LD_EXP 17
11166: PUSH
11167: LD_VAR 0 2
11171: ARRAY
11172: NOT
11173: IFTRUE 11221
11175: PUSH
11176: LD_EXP 17
11180: PUSH
11181: LD_VAR 0 2
11185: ARRAY
11186: PUSH
11187: LD_EXP 17
11191: PUSH
11192: LD_OWVAR 2
11196: ARRAY
11197: NONEQUAL
11198: IFFALSE 11220
11200: PUSH
11201: LD_OWVAR 2
11205: PPUSH
11206: LD_VAR 0 2
11210: PPUSH
11211: CALL_OW 81
11215: PUSH
11216: LD_INT 1
11218: NONEQUAL
11219: AND
11220: OR
11221: IFFALSE 11249
// if HasPowerByGameType ( mpGameType , i ) then
11223: LD_EXP 12
11227: PPUSH
11228: LD_VAR 0 2
11232: PPUSH
11233: CALL 10720 0 2
11237: IFFALSE 11249
// begin gameIsOn := true ;
11239: LD_ADDR_VAR 0 1
11243: PUSH
11244: LD_INT 1
11246: ST_TO_ADDR
// break ;
11247: GO 11251
// end ;
11249: GO 11120
11251: POP
11252: POP
// wait ( 100 ) ;
11253: LD_INT 100
11255: PPUSH
11256: CALL_OW 67
// until not gameIsOn ;
11260: LD_VAR 0 1
11264: NOT
11265: IFFALSE 11099
// if IAmServer then
11267: CALL_OW 518
11271: IFFALSE 11280
// wait ( 0 0$3 ) ;
11273: LD_INT 105
11275: PPUSH
11276: CALL_OW 67
// if Multiplayer then
11280: LD_OWVAR 4
11284: IFFALSE 11292
// YouLostInMultiplayer else
11286: CALL_OW 107
11290: GO 11299
// YouLost (  ) ;
11292: LD_STRING 
11294: PPUSH
11295: CALL_OW 104
// end ;
11299: PPOPN 2
11301: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
11302: LD_EXP 42
11306: IFFALSE 11690
11308: GO 11310
11310: DISABLE
11311: LD_INT 0
11313: PPUSH
11314: PPUSH
11315: PPUSH
11316: PPUSH
11317: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
11318: LD_ADDR_VAR 0 5
11322: PUSH
11323: LD_INT 1
11325: PUSH
11326: LD_INT 2
11328: PUSH
11329: LD_INT 3
11331: PUSH
11332: LD_INT 4
11334: PUSH
11335: LD_INT 5
11337: PUSH
11338: LD_INT 6
11340: PUSH
11341: LD_INT 7
11343: PUSH
11344: LD_INT 8
11346: PUSH
11347: EMPTY
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
11357: LD_INT 350
11359: PPUSH
11360: CALL_OW 67
// for i := 1 to 8 do
11364: LD_ADDR_VAR 0 1
11368: PUSH
11369: DOUBLE
11370: LD_INT 1
11372: DEC
11373: ST_TO_ADDR
11374: LD_INT 8
11376: PUSH
11377: FOR_TO
11378: IFFALSE 11660
// begin j := sides [ i ] ;
11380: LD_ADDR_VAR 0 2
11384: PUSH
11385: LD_VAR 0 5
11389: PUSH
11390: LD_VAR 0 1
11394: ARRAY
11395: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
11396: LD_EXP 49
11400: PUSH
11401: LD_VAR 0 2
11405: ARRAY
11406: PPUSH
11407: CALL 24035 0 1
11411: IFFALSE 11424
11413: PUSH
11414: LD_VAR 0 2
11418: PPUSH
11419: CALL_OW 108
11423: AND
11424: IFFALSE 11442
11426: PUSH
11427: LD_EXP 12
11431: PPUSH
11432: LD_VAR 0 2
11436: PPUSH
11437: CALL 10720 0 2
11441: AND
11442: IFFALSE 11658
// begin wait ( mpRespawn div 2 ) ;
11444: LD_EXP 42
11448: PUSH
11449: LD_INT 2
11451: DIV
11452: PPUSH
11453: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11457: LD_ADDR_VAR 0 3
11461: PUSH
11462: LD_INT 22
11464: PUSH
11465: LD_VAR 0 2
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: PUSH
11474: LD_INT 50
11476: PUSH
11477: EMPTY
11478: LIST
11479: PUSH
11480: LD_INT 2
11482: PUSH
11483: LD_INT 30
11485: PUSH
11486: LD_INT 0
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: PUSH
11493: LD_INT 30
11495: PUSH
11496: LD_INT 1
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: LIST
11507: PUSH
11508: EMPTY
11509: LIST
11510: LIST
11511: LIST
11512: PPUSH
11513: CALL_OW 69
11517: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
11518: LD_VAR 0 3
11522: NOT
11523: IFTRUE 11537
11525: PUSH
11526: LD_VAR 0 2
11530: PPUSH
11531: CALL_OW 108
11535: NOT
11536: OR
11537: IFTRUE 11556
11539: PUSH
11540: LD_EXP 12
11544: PPUSH
11545: LD_VAR 0 2
11549: PPUSH
11550: CALL 10720 0 2
11554: NOT
11555: OR
11556: IFFALSE 11560
// continue ;
11558: GO 11377
// spawn := tmp [ 1 ] ;
11560: LD_ADDR_VAR 0 4
11564: PUSH
11565: LD_VAR 0 3
11569: PUSH
11570: LD_INT 1
11572: ARRAY
11573: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
11574: LD_EXP 49
11578: PUSH
11579: LD_VAR 0 2
11583: ARRAY
11584: PUSH
11585: LD_INT 1
11587: ARRAY
11588: PPUSH
11589: LD_VAR 0 4
11593: PPUSH
11594: CALL_OW 250
11598: PPUSH
11599: LD_VAR 0 4
11603: PPUSH
11604: CALL_OW 251
11608: PPUSH
11609: LD_INT 32
11611: PPUSH
11612: LD_INT 1
11614: PPUSH
11615: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
11619: LD_ADDR_EXP 49
11623: PUSH
11624: LD_EXP 49
11628: PPUSH
11629: LD_VAR 0 2
11633: PPUSH
11634: LD_EXP 49
11638: PUSH
11639: LD_VAR 0 2
11643: ARRAY
11644: PPUSH
11645: LD_INT 1
11647: PPUSH
11648: CALL_OW 3
11652: PPUSH
11653: CALL_OW 1
11657: ST_TO_ADDR
// end ; end ;
11658: GO 11377
11660: POP
11661: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
11662: LD_ADDR_VAR 0 5
11666: PUSH
11667: LD_VAR 0 5
11671: PPUSH
11672: LD_INT 1
11674: PPUSH
11675: LD_INT 8
11677: PPUSH
11678: LD_INT 1
11680: PPUSH
11681: CALL 26327 0 4
11685: ST_TO_ADDR
// until false ;
11686: LD_INT 0
11688: IFFALSE 11357
// end ;
11690: PPOPN 5
11692: END
// every 0 0$1 marked mpActive do
11693: GO 11695
11695: DISABLE
// begin enable ;
11696: ENABLE
// if not mpDisplayStrings then
11697: LD_EXP 47
11701: NOT
11702: IFFALSE 11713
// begin display_strings := [ ] ;
11704: LD_ADDR_OWVAR 47
11708: PUSH
11709: EMPTY
11710: ST_TO_ADDR
// exit ;
11711: GO 11723
// end ; display_strings := mpDisplayStrings ;
11713: LD_ADDR_OWVAR 47
11717: PUSH
11718: LD_EXP 47
11722: ST_TO_ADDR
// end ; end_of_file
11723: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
11724: LD_INT 0
11726: PPUSH
11727: PPUSH
11728: PPUSH
11729: PPUSH
11730: PPUSH
11731: PPUSH
11732: PPUSH
11733: PPUSH
11734: PPUSH
// if GetType ( un ) = unit_vehicle then
11735: LD_VAR 0 1
11739: PPUSH
11740: CALL_OW 247
11744: PUSH
11745: LD_INT 2
11747: EQUAL
11748: IFFALSE 11752
// exit ;
11750: GO 12426
// side := GetSide ( un ) ;
11752: LD_ADDR_VAR 0 9
11756: PUSH
11757: LD_VAR 0 1
11761: PPUSH
11762: CALL_OW 255
11766: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
11767: LD_EXP 12
11771: PUSH
11772: LD_INT 2
11774: EQUAL
11775: IFFALSE 11869
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
11777: LD_VAR 0 1
11781: PPUSH
11782: CALL_OW 266
11786: PUSH
11787: LD_INT 0
11789: PUSH
11790: LD_INT 1
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: IN
11797: IFFALSE 11869
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
11799: LD_ADDR_VAR 0 3
11803: PUSH
11804: LD_INT 22
11806: PUSH
11807: LD_VAR 0 9
11811: PUSH
11812: EMPTY
11813: LIST
11814: LIST
11815: PUSH
11816: LD_INT 2
11818: PUSH
11819: LD_INT 21
11821: PUSH
11822: LD_INT 1
11824: PUSH
11825: EMPTY
11826: LIST
11827: LIST
11828: PUSH
11829: LD_INT 33
11831: PUSH
11832: LD_INT 3
11834: PUSH
11835: EMPTY
11836: LIST
11837: LIST
11838: PUSH
11839: EMPTY
11840: LIST
11841: LIST
11842: LIST
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: PPUSH
11848: CALL_OW 69
11852: PUSH
11853: FOR_IN
11854: IFFALSE 11867
// KillUnit ( i ) ;
11856: LD_VAR 0 3
11860: PPUSH
11861: CALL_OW 66
11865: GO 11853
11867: POP
11868: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
11869: LD_VAR 0 1
11873: PPUSH
11874: CALL_OW 257
11878: PUSH
11879: LD_INT 12
11881: PUSH
11882: LD_INT 17
11884: PUSH
11885: LD_INT 15
11887: PUSH
11888: LD_INT 16
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: IN
11897: IFTRUE 11914
11899: PUSH
11900: LD_VAR 0 1
11904: PPUSH
11905: CALL_OW 263
11909: PUSH
11910: LD_INT 5
11912: EQUAL
11913: OR
11914: IFFALSE 12151
// begin tag := 0 ;
11916: LD_ADDR_VAR 0 5
11920: PUSH
11921: LD_INT 0
11923: ST_TO_ADDR
// for i := 1 to 8 do
11924: LD_ADDR_VAR 0 3
11928: PUSH
11929: DOUBLE
11930: LD_INT 1
11932: DEC
11933: ST_TO_ADDR
11934: LD_INT 8
11936: PUSH
11937: FOR_TO
11938: IFFALSE 11972
// if un in mpApePosIndex [ i ] then
11940: LD_VAR 0 1
11944: PUSH
11945: LD_EXP 41
11949: PUSH
11950: LD_VAR 0 3
11954: ARRAY
11955: IN
11956: IFFALSE 11970
// begin tag := i ;
11958: LD_ADDR_VAR 0 5
11962: PUSH
11963: LD_VAR 0 3
11967: ST_TO_ADDR
// break ;
11968: GO 11972
// end ;
11970: GO 11937
11972: POP
11973: POP
// if not tag then
11974: LD_VAR 0 5
11978: NOT
11979: IFFALSE 11983
// exit ;
11981: GO 12426
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
11983: LD_ADDR_VAR 0 7
11987: PUSH
11988: LD_EXP 40
11992: PUSH
11993: LD_EXP 16
11997: PUSH
11998: LD_VAR 0 5
12002: ARRAY
12003: ARRAY
12004: ST_TO_ADDR
// if not area then
12005: LD_VAR 0 7
12009: NOT
12010: IFFALSE 12014
// exit ;
12012: GO 12426
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
12014: LD_INT 14700
12016: PUSH
12017: LD_VAR 0 1
12021: PUSH
12022: LD_INT 5
12024: MOD
12025: PUSH
12026: LD_INT 1
12028: PLUS
12029: PUSH
12030: LD_INT 700
12032: MUL
12033: PLUS
12034: PPUSH
12035: CALL_OW 67
// repeat wait ( 10 ) ;
12039: LD_INT 10
12041: PPUSH
12042: CALL_OW 67
// until not mpBlockRespThread ;
12046: LD_EXP 54
12050: NOT
12051: IFFALSE 12039
// mpBlockRespThread := true ;
12053: LD_ADDR_EXP 54
12057: PUSH
12058: LD_INT 1
12060: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
12061: LD_INT 0
12063: PPUSH
12064: CALL 56094 0 1
// ape := CreateHuman ;
12068: LD_ADDR_VAR 0 4
12072: PUSH
12073: CALL_OW 44
12077: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
12078: LD_ADDR_EXP 41
12082: PUSH
12083: LD_EXP 41
12087: PPUSH
12088: LD_VAR 0 5
12092: PPUSH
12093: LD_EXP 41
12097: PUSH
12098: LD_VAR 0 5
12102: ARRAY
12103: PPUSH
12104: LD_VAR 0 4
12108: PPUSH
12109: CALL 59967 0 2
12113: PPUSH
12114: CALL_OW 1
12118: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
12119: LD_VAR 0 4
12123: PPUSH
12124: LD_VAR 0 7
12128: PPUSH
12129: LD_INT 0
12131: PPUSH
12132: CALL_OW 49
// wait ( 10 ) ;
12136: LD_INT 10
12138: PPUSH
12139: CALL_OW 67
// mpBlockRespThread := false ;
12143: LD_ADDR_EXP 54
12147: PUSH
12148: LD_INT 0
12150: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
12151: LD_VAR 0 1
12155: PPUSH
12156: CALL_OW 247
12160: PUSH
12161: LD_INT 1
12163: EQUAL
12164: IFFALSE 12181
12166: PUSH
12167: LD_VAR 0 1
12171: PPUSH
12172: CALL_OW 248
12176: PUSH
12177: LD_INT 0
12179: GREATER
12180: AND
12181: IFFALSE 12426
// begin if not mpRespawn then
12183: LD_EXP 42
12187: NOT
12188: IFFALSE 12192
// exit ;
12190: GO 12426
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
12192: LD_VAR 0 9
12196: PPUSH
12197: CALL_OW 108
12201: NOT
12202: IFFALSE 12221
12204: PUSH
12205: LD_EXP 12
12209: PPUSH
12210: LD_VAR 0 9
12214: PPUSH
12215: CALL 10720 0 2
12219: NOT
12220: AND
12221: IFFALSE 12225
// exit ;
12223: GO 12426
// side := GetSide ( un ) ;
12225: LD_ADDR_VAR 0 9
12229: PUSH
12230: LD_VAR 0 1
12234: PPUSH
12235: CALL_OW 255
12239: ST_TO_ADDR
// nation := GetNation ( un ) ;
12240: LD_ADDR_VAR 0 8
12244: PUSH
12245: LD_VAR 0 1
12249: PPUSH
12250: CALL_OW 248
12254: ST_TO_ADDR
// class := GetClass ( un ) ;
12255: LD_ADDR_VAR 0 6
12259: PUSH
12260: LD_VAR 0 1
12264: PPUSH
12265: CALL_OW 257
12269: ST_TO_ADDR
// if class > 4 then
12270: LD_VAR 0 6
12274: PUSH
12275: LD_INT 4
12277: GREATER
12278: IFFALSE 12288
// class := 1 ;
12280: LD_ADDR_VAR 0 6
12284: PUSH
12285: LD_INT 1
12287: ST_TO_ADDR
// repeat wait ( 10 ) ;
12288: LD_INT 10
12290: PPUSH
12291: CALL_OW 67
// until not mpBlockRespThread ;
12295: LD_EXP 54
12299: NOT
12300: IFFALSE 12288
// mpBlockRespThread := true ;
12302: LD_ADDR_EXP 54
12306: PUSH
12307: LD_INT 1
12309: ST_TO_ADDR
// uc_side := side ;
12310: LD_ADDR_OWVAR 20
12314: PUSH
12315: LD_VAR 0 9
12319: ST_TO_ADDR
// uc_nation := nation ;
12320: LD_ADDR_OWVAR 21
12324: PUSH
12325: LD_VAR 0 8
12329: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
12330: LD_INT 0
12332: PPUSH
12333: LD_VAR 0 6
12337: PPUSH
12338: LD_INT 2
12340: PPUSH
12341: CALL_OW 380
// un := CreateHuman ;
12345: LD_ADDR_VAR 0 1
12349: PUSH
12350: CALL_OW 44
12354: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
12355: LD_ADDR_EXP 49
12359: PUSH
12360: LD_EXP 49
12364: PPUSH
12365: LD_VAR 0 9
12369: PPUSH
12370: LD_EXP 49
12374: PUSH
12375: LD_VAR 0 9
12379: ARRAY
12380: PPUSH
12381: LD_EXP 49
12385: PUSH
12386: LD_VAR 0 9
12390: ARRAY
12391: PUSH
12392: LD_INT 1
12394: PLUS
12395: PPUSH
12396: LD_VAR 0 1
12400: PPUSH
12401: CALL_OW 1
12405: PPUSH
12406: CALL_OW 1
12410: ST_TO_ADDR
// wait ( 10 ) ;
12411: LD_INT 10
12413: PPUSH
12414: CALL_OW 67
// mpBlockRespThread := false ;
12418: LD_ADDR_EXP 54
12422: PUSH
12423: LD_INT 0
12425: ST_TO_ADDR
// end ; end ;
12426: LD_VAR 0 2
12430: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
12431: LD_INT 0
12433: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
12434: LD_VAR 0 1
12438: PPUSH
12439: CALL_OW 266
12443: PUSH
12444: LD_INT 0
12446: PUSH
12447: LD_INT 1
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: IN
12454: IFFALSE 12479
// SetBName ( building , @ & GetSide ( building ) ) ;
12456: LD_VAR 0 1
12460: PPUSH
12461: LD_STRING @
12463: PUSH
12464: LD_VAR 0 1
12468: PPUSH
12469: CALL_OW 255
12473: STR
12474: PPUSH
12475: CALL_OW 500
// end ;
12479: LD_VAR 0 2
12483: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
12484: LD_INT 0
12486: PPUSH
12487: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
12488: LD_EXP 12
12492: PUSH
12493: LD_INT 2
12495: EQUAL
12496: IFFALSE 12520
12498: PUSH
12499: LD_VAR 0 1
12503: PPUSH
12504: CALL_OW 266
12508: PUSH
12509: LD_INT 0
12511: PUSH
12512: LD_INT 1
12514: PUSH
12515: EMPTY
12516: LIST
12517: LIST
12518: IN
12519: AND
12520: IFFALSE 12599
// begin SetSide ( building , oldSide ) ;
12522: LD_VAR 0 1
12526: PPUSH
12527: LD_VAR 0 2
12531: PPUSH
12532: CALL_OW 235
// KillUnit ( building ) ;
12536: LD_VAR 0 1
12540: PPUSH
12541: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
12545: LD_ADDR_VAR 0 5
12549: PUSH
12550: LD_INT 22
12552: PUSH
12553: LD_VAR 0 2
12557: PUSH
12558: EMPTY
12559: LIST
12560: LIST
12561: PUSH
12562: LD_INT 21
12564: PUSH
12565: LD_INT 1
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: PUSH
12572: EMPTY
12573: LIST
12574: LIST
12575: PPUSH
12576: CALL_OW 69
12580: PUSH
12581: FOR_IN
12582: IFFALSE 12595
// KillUnit ( i ) ;
12584: LD_VAR 0 5
12588: PPUSH
12589: CALL_OW 66
12593: GO 12581
12595: POP
12596: POP
// exit ;
12597: GO 12644
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
12599: LD_VAR 0 1
12603: PPUSH
12604: CALL_OW 266
12608: PUSH
12609: LD_INT 0
12611: PUSH
12612: LD_INT 1
12614: PUSH
12615: EMPTY
12616: LIST
12617: LIST
12618: IN
12619: IFFALSE 12644
// SetBName ( building , @ & GetSide ( building ) ) ;
12621: LD_VAR 0 1
12625: PPUSH
12626: LD_STRING @
12628: PUSH
12629: LD_VAR 0 1
12633: PPUSH
12634: CALL_OW 255
12638: STR
12639: PPUSH
12640: CALL_OW 500
// end ;
12644: LD_VAR 0 4
12648: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
12649: LD_INT 0
12651: PPUSH
12652: PPUSH
12653: PPUSH
// if mpGameType <> GameTypeFamine then
12654: LD_EXP 12
12658: PUSH
12659: LD_INT 5
12661: NONEQUAL
12662: IFFALSE 12666
// exit ;
12664: GO 12880
// for i := 1 to mpGlobalOilDeposits do
12666: LD_ADDR_VAR 0 6
12670: PUSH
12671: DOUBLE
12672: LD_INT 1
12674: DEC
12675: ST_TO_ADDR
12676: LD_EXP 50
12680: PUSH
12681: FOR_TO
12682: IFFALSE 12878
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
12684: LD_EXP 50
12688: PUSH
12689: LD_VAR 0 6
12693: ARRAY
12694: PUSH
12695: LD_INT 1
12697: ARRAY
12698: PPUSH
12699: LD_EXP 50
12703: PUSH
12704: LD_VAR 0 6
12708: ARRAY
12709: PUSH
12710: LD_INT 2
12712: ARRAY
12713: PPUSH
12714: CALL_OW 428
12718: PUSH
12719: LD_VAR 0 1
12723: EQUAL
12724: IFFALSE 12876
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
12726: LD_ADDR_VAR 0 7
12730: PUSH
12731: LD_EXP 50
12735: PUSH
12736: LD_VAR 0 6
12740: ARRAY
12741: PUSH
12742: LD_INT 3
12744: ARRAY
12745: ST_TO_ADDR
// value := Dec ( value ) ;
12746: LD_ADDR_VAR 0 7
12750: PUSH
12751: LD_VAR 0 7
12755: PPUSH
12756: CALL 61362 0 1
12760: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
12761: LD_ADDR_EXP 50
12765: PUSH
12766: LD_EXP 50
12770: PPUSH
12771: LD_VAR 0 6
12775: PPUSH
12776: LD_EXP 50
12780: PUSH
12781: LD_VAR 0 6
12785: ARRAY
12786: PPUSH
12787: LD_INT 3
12789: PPUSH
12790: LD_VAR 0 7
12794: PPUSH
12795: CALL_OW 1
12799: PPUSH
12800: CALL_OW 1
12804: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
12805: LD_VAR 0 1
12809: PPUSH
12810: LD_VAR 0 7
12814: PPUSH
12815: CALL_OW 505
// if value = 0 then
12819: LD_VAR 0 7
12823: PUSH
12824: LD_INT 0
12826: EQUAL
12827: IFFALSE 12876
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
12829: LD_EXP 50
12833: PUSH
12834: LD_VAR 0 6
12838: ARRAY
12839: PUSH
12840: LD_INT 1
12842: ARRAY
12843: PPUSH
12844: LD_EXP 50
12848: PUSH
12849: LD_VAR 0 6
12853: ARRAY
12854: PUSH
12855: LD_INT 2
12857: ARRAY
12858: PPUSH
12859: CALL_OW 63
// KillUnit ( building ) ;
12863: LD_VAR 0 1
12867: PPUSH
12868: CALL_OW 66
// exit ;
12872: POP
12873: POP
12874: GO 12880
// end ; end ; end ;
12876: GO 12681
12878: POP
12879: POP
// end ;
12880: LD_VAR 0 5
12884: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
12885: LD_INT 0
12887: PPUSH
12888: PPUSH
12889: PPUSH
// if mpGameType <> GameTypeFamine then
12890: LD_EXP 12
12894: PUSH
12895: LD_INT 5
12897: NONEQUAL
12898: IFFALSE 12902
// exit ;
12900: GO 13116
// for i := 1 to mpGlobalSibDeposits do
12902: LD_ADDR_VAR 0 6
12906: PUSH
12907: DOUBLE
12908: LD_INT 1
12910: DEC
12911: ST_TO_ADDR
12912: LD_EXP 51
12916: PUSH
12917: FOR_TO
12918: IFFALSE 13114
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
12920: LD_EXP 51
12924: PUSH
12925: LD_VAR 0 6
12929: ARRAY
12930: PUSH
12931: LD_INT 1
12933: ARRAY
12934: PPUSH
12935: LD_EXP 51
12939: PUSH
12940: LD_VAR 0 6
12944: ARRAY
12945: PUSH
12946: LD_INT 2
12948: ARRAY
12949: PPUSH
12950: CALL_OW 428
12954: PUSH
12955: LD_VAR 0 1
12959: EQUAL
12960: IFFALSE 13112
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
12962: LD_ADDR_VAR 0 7
12966: PUSH
12967: LD_EXP 51
12971: PUSH
12972: LD_VAR 0 6
12976: ARRAY
12977: PUSH
12978: LD_INT 3
12980: ARRAY
12981: ST_TO_ADDR
// value := Dec ( value ) ;
12982: LD_ADDR_VAR 0 7
12986: PUSH
12987: LD_VAR 0 7
12991: PPUSH
12992: CALL 61362 0 1
12996: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
12997: LD_ADDR_EXP 51
13001: PUSH
13002: LD_EXP 51
13006: PPUSH
13007: LD_VAR 0 6
13011: PPUSH
13012: LD_EXP 51
13016: PUSH
13017: LD_VAR 0 6
13021: ARRAY
13022: PPUSH
13023: LD_INT 3
13025: PPUSH
13026: LD_VAR 0 7
13030: PPUSH
13031: CALL_OW 1
13035: PPUSH
13036: CALL_OW 1
13040: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
13041: LD_VAR 0 1
13045: PPUSH
13046: LD_VAR 0 7
13050: PPUSH
13051: CALL_OW 505
// if value = 0 then
13055: LD_VAR 0 7
13059: PUSH
13060: LD_INT 0
13062: EQUAL
13063: IFFALSE 13112
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
13065: LD_EXP 51
13069: PUSH
13070: LD_VAR 0 6
13074: ARRAY
13075: PUSH
13076: LD_INT 1
13078: ARRAY
13079: PPUSH
13080: LD_EXP 51
13084: PUSH
13085: LD_VAR 0 6
13089: ARRAY
13090: PUSH
13091: LD_INT 2
13093: ARRAY
13094: PPUSH
13095: CALL_OW 63
// KillUnit ( building ) ;
13099: LD_VAR 0 1
13103: PPUSH
13104: CALL_OW 66
// exit ;
13108: POP
13109: POP
13110: GO 13116
// end ; end ; end ;
13112: GO 12917
13114: POP
13115: POP
// end ; end_of_file
13116: LD_VAR 0 5
13120: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
13121: LD_EXP 48
13125: IFFALSE 13466
13127: GO 13129
13129: DISABLE
13130: LD_INT 0
13132: PPUSH
13133: PPUSH
13134: PPUSH
// begin mpKingPoints := [ ] ;
13135: LD_ADDR_EXP 57
13139: PUSH
13140: EMPTY
13141: ST_TO_ADDR
// if mpTeamGame then
13142: LD_EXP 20
13146: IFFALSE 13200
// begin for i := 1 to Count ( mpTeams ) do
13148: LD_ADDR_VAR 0 1
13152: PUSH
13153: DOUBLE
13154: LD_INT 1
13156: DEC
13157: ST_TO_ADDR
13158: LD_EXP 19
13162: PPUSH
13163: CALL 24035 0 1
13167: PUSH
13168: FOR_TO
13169: IFFALSE 13196
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
13171: LD_ADDR_EXP 57
13175: PUSH
13176: LD_EXP 57
13180: PPUSH
13181: LD_VAR 0 1
13185: PPUSH
13186: LD_INT 0
13188: PPUSH
13189: CALL_OW 1
13193: ST_TO_ADDR
13194: GO 13168
13196: POP
13197: POP
// end else
13198: GO 13243
// begin for i := 1 to 8 do
13200: LD_ADDR_VAR 0 1
13204: PUSH
13205: DOUBLE
13206: LD_INT 1
13208: DEC
13209: ST_TO_ADDR
13210: LD_INT 8
13212: PUSH
13213: FOR_TO
13214: IFFALSE 13241
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
13216: LD_ADDR_EXP 57
13220: PUSH
13221: LD_EXP 57
13225: PPUSH
13226: LD_VAR 0 1
13230: PPUSH
13231: LD_INT 0
13233: PPUSH
13234: CALL_OW 1
13238: ST_TO_ADDR
13239: GO 13213
13241: POP
13242: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
13243: LD_ADDR_VAR 0 3
13247: PUSH
13248: LD_EXP 2
13252: PPUSH
13253: LD_INT 0
13255: PPUSH
13256: CALL_OW 517
13260: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
13261: LD_ADDR_VAR 0 1
13265: PUSH
13266: DOUBLE
13267: LD_INT 1
13269: DEC
13270: ST_TO_ADDR
13271: LD_VAR 0 3
13275: PUSH
13276: LD_INT 1
13278: ARRAY
13279: PUSH
13280: FOR_TO
13281: IFFALSE 13348
// for j := 1 to 8 do
13283: LD_ADDR_VAR 0 2
13287: PUSH
13288: DOUBLE
13289: LD_INT 1
13291: DEC
13292: ST_TO_ADDR
13293: LD_INT 8
13295: PUSH
13296: FOR_TO
13297: IFFALSE 13344
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
13299: LD_VAR 0 3
13303: PUSH
13304: LD_INT 1
13306: ARRAY
13307: PUSH
13308: LD_VAR 0 1
13312: ARRAY
13313: PPUSH
13314: LD_VAR 0 3
13318: PUSH
13319: LD_INT 2
13321: ARRAY
13322: PUSH
13323: LD_VAR 0 1
13327: ARRAY
13328: PPUSH
13329: LD_VAR 0 2
13333: PPUSH
13334: LD_INT 12
13336: NEG
13337: PPUSH
13338: CALL_OW 330
13342: GO 13296
13344: POP
13345: POP
13346: GO 13280
13348: POP
13349: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
13350: LD_EXP 43
13354: PPUSH
13355: LD_INT 1
13357: PPUSH
13358: CALL_OW 424
// UpdateCounter ;
13362: CALL 13972 0 0
// repeat wait ( 0 0$1 ) ;
13366: LD_INT 35
13368: PPUSH
13369: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13373: LD_ADDR_VAR 0 3
13377: PUSH
13378: LD_EXP 43
13382: PPUSH
13383: LD_INT 3
13385: PUSH
13386: LD_INT 57
13388: PUSH
13389: EMPTY
13390: LIST
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: PUSH
13396: LD_INT 50
13398: PUSH
13399: EMPTY
13400: LIST
13401: PUSH
13402: LD_INT 2
13404: PUSH
13405: LD_INT 30
13407: PUSH
13408: LD_INT 0
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 30
13417: PUSH
13418: LD_INT 1
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PUSH
13425: EMPTY
13426: LIST
13427: LIST
13428: LIST
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: LIST
13434: PPUSH
13435: CALL_OW 70
13439: ST_TO_ADDR
// if not tmp then
13440: LD_VAR 0 3
13444: NOT
13445: IFFALSE 13449
// continue ;
13447: GO 13366
// AddPoints ( tmp ) ;
13449: LD_VAR 0 3
13453: PPUSH
13454: CALL 13650 0 1
// UpdateCounter ;
13458: CALL 13972 0 0
// until false ;
13462: LD_INT 0
13464: IFFALSE 13366
// end ;
13466: PPOPN 3
13468: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
13469: LD_EXP 48
13473: IFFALSE 13481
13475: PUSH
13476: LD_EXP 46
13480: AND
13481: IFFALSE 13647
13483: GO 13485
13485: DISABLE
13486: LD_INT 0
13488: PPUSH
13489: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
13490: LD_ADDR_VAR 0 2
13494: PUSH
13495: LD_EXP 2
13499: PPUSH
13500: LD_INT 0
13502: PPUSH
13503: CALL_OW 517
13507: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
13508: LD_ADDR_VAR 0 1
13512: PUSH
13513: DOUBLE
13514: LD_INT 1
13516: DEC
13517: ST_TO_ADDR
13518: LD_VAR 0 2
13522: PUSH
13523: LD_INT 1
13525: ARRAY
13526: PUSH
13527: FOR_TO
13528: IFFALSE 13569
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
13530: LD_VAR 0 2
13534: PUSH
13535: LD_INT 1
13537: ARRAY
13538: PUSH
13539: LD_VAR 0 1
13543: ARRAY
13544: PPUSH
13545: LD_VAR 0 2
13549: PUSH
13550: LD_INT 2
13552: ARRAY
13553: PUSH
13554: LD_VAR 0 1
13558: ARRAY
13559: PPUSH
13560: LD_INT 125
13562: PPUSH
13563: CALL_OW 495
13567: GO 13527
13569: POP
13570: POP
// repeat wait ( mpEmissions ) ;
13571: LD_EXP 46
13575: PPUSH
13576: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
13580: LD_ADDR_VAR 0 1
13584: PUSH
13585: DOUBLE
13586: LD_INT 1
13588: DEC
13589: ST_TO_ADDR
13590: LD_VAR 0 2
13594: PUSH
13595: LD_INT 1
13597: ARRAY
13598: PUSH
13599: FOR_TO
13600: IFFALSE 13641
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
13602: LD_VAR 0 2
13606: PUSH
13607: LD_INT 1
13609: ARRAY
13610: PUSH
13611: LD_VAR 0 1
13615: ARRAY
13616: PPUSH
13617: LD_VAR 0 2
13621: PUSH
13622: LD_INT 2
13624: ARRAY
13625: PUSH
13626: LD_VAR 0 1
13630: ARRAY
13631: PPUSH
13632: LD_INT 15
13634: PPUSH
13635: CALL_OW 495
13639: GO 13599
13641: POP
13642: POP
// until false ;
13643: LD_INT 0
13645: IFFALSE 13571
// end ;
13647: PPOPN 2
13649: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
13650: LD_INT 0
13652: PPUSH
13653: PPUSH
13654: PPUSH
13655: PPUSH
13656: PPUSH
// if mpTeamGame then
13657: LD_EXP 20
13661: IFFALSE 13858
// begin first := depots [ 1 ] ;
13663: LD_ADDR_VAR 0 4
13667: PUSH
13668: LD_VAR 0 1
13672: PUSH
13673: LD_INT 1
13675: ARRAY
13676: ST_TO_ADDR
// side := GetSide ( first ) ;
13677: LD_ADDR_VAR 0 6
13681: PUSH
13682: LD_VAR 0 4
13686: PPUSH
13687: CALL_OW 255
13691: ST_TO_ADDR
// for i := 1 to mpTeams do
13692: LD_ADDR_VAR 0 3
13696: PUSH
13697: DOUBLE
13698: LD_INT 1
13700: DEC
13701: ST_TO_ADDR
13702: LD_EXP 19
13706: PUSH
13707: FOR_TO
13708: IFFALSE 13742
// if side in mpTeams [ i ] then
13710: LD_VAR 0 6
13714: PUSH
13715: LD_EXP 19
13719: PUSH
13720: LD_VAR 0 3
13724: ARRAY
13725: IN
13726: IFFALSE 13740
// begin team := i ;
13728: LD_ADDR_VAR 0 5
13732: PUSH
13733: LD_VAR 0 3
13737: ST_TO_ADDR
// break ;
13738: GO 13742
// end ;
13740: GO 13707
13742: POP
13743: POP
// if not team then
13744: LD_VAR 0 5
13748: NOT
13749: IFFALSE 13753
// exit ;
13751: GO 13967
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
13753: LD_EXP 43
13757: PPUSH
13758: LD_INT 81
13760: PUSH
13761: LD_VAR 0 6
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: PPUSH
13770: CALL_OW 70
13774: IFFALSE 13778
// exit ;
13776: GO 13967
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
13778: LD_ADDR_EXP 57
13782: PUSH
13783: LD_EXP 57
13787: PPUSH
13788: LD_VAR 0 5
13792: PPUSH
13793: LD_EXP 57
13797: PUSH
13798: LD_VAR 0 5
13802: ARRAY
13803: PUSH
13804: LD_INT 1
13806: PLUS
13807: PPUSH
13808: CALL_OW 1
13812: ST_TO_ADDR
// for i in mpTeams [ team ] do
13813: LD_ADDR_VAR 0 3
13817: PUSH
13818: LD_EXP 19
13822: PUSH
13823: LD_VAR 0 5
13827: ARRAY
13828: PUSH
13829: FOR_IN
13830: IFFALSE 13854
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
13832: LD_VAR 0 3
13836: PPUSH
13837: LD_EXP 57
13841: PUSH
13842: LD_VAR 0 5
13846: ARRAY
13847: PPUSH
13848: CALL_OW 506
13852: GO 13829
13854: POP
13855: POP
// end else
13856: GO 13967
// begin first := depots [ 1 ] ;
13858: LD_ADDR_VAR 0 4
13862: PUSH
13863: LD_VAR 0 1
13867: PUSH
13868: LD_INT 1
13870: ARRAY
13871: ST_TO_ADDR
// side := GetSide ( first ) ;
13872: LD_ADDR_VAR 0 6
13876: PUSH
13877: LD_VAR 0 4
13881: PPUSH
13882: CALL_OW 255
13886: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
13887: LD_EXP 43
13891: PPUSH
13892: LD_INT 81
13894: PUSH
13895: LD_VAR 0 6
13899: PUSH
13900: EMPTY
13901: LIST
13902: LIST
13903: PPUSH
13904: CALL_OW 70
13908: IFFALSE 13912
// exit ;
13910: GO 13967
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
13912: LD_ADDR_EXP 57
13916: PUSH
13917: LD_EXP 57
13921: PPUSH
13922: LD_VAR 0 6
13926: PPUSH
13927: LD_EXP 57
13931: PUSH
13932: LD_VAR 0 6
13936: ARRAY
13937: PUSH
13938: LD_INT 1
13940: PLUS
13941: PPUSH
13942: CALL_OW 1
13946: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
13947: LD_VAR 0 6
13951: PPUSH
13952: LD_EXP 57
13956: PUSH
13957: LD_VAR 0 6
13961: ARRAY
13962: PPUSH
13963: CALL_OW 506
// end ; end ;
13967: LD_VAR 0 2
13971: RET
// function UpdateCounter ; var i ; begin
13972: LD_INT 0
13974: PPUSH
13975: PPUSH
// result := [ ] ;
13976: LD_ADDR_VAR 0 1
13980: PUSH
13981: EMPTY
13982: ST_TO_ADDR
// if mpTeamGame then
13983: LD_EXP 20
13987: IFFALSE 14054
// begin for i := 1 to mpTeams do
13989: LD_ADDR_VAR 0 2
13993: PUSH
13994: DOUBLE
13995: LD_INT 1
13997: DEC
13998: ST_TO_ADDR
13999: LD_EXP 19
14003: PUSH
14004: FOR_TO
14005: IFFALSE 14050
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
14007: LD_ADDR_VAR 0 1
14011: PUSH
14012: LD_VAR 0 1
14016: PUSH
14017: LD_STRING #KingoftheHill-Team
14019: PUSH
14020: LD_VAR 0 2
14024: PUSH
14025: LD_EXP 57
14029: PUSH
14030: LD_VAR 0 2
14034: ARRAY
14035: PUSH
14036: LD_EXP 44
14040: PUSH
14041: EMPTY
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: ADD
14047: ST_TO_ADDR
14048: GO 14004
14050: POP
14051: POP
// end else
14052: GO 14127
// begin for i := 1 to 8 do
14054: LD_ADDR_VAR 0 2
14058: PUSH
14059: DOUBLE
14060: LD_INT 1
14062: DEC
14063: ST_TO_ADDR
14064: LD_INT 8
14066: PUSH
14067: FOR_TO
14068: IFFALSE 14125
// if mpSidePositions [ i ] then
14070: LD_EXP 16
14074: PUSH
14075: LD_VAR 0 2
14079: ARRAY
14080: IFFALSE 14123
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
14082: LD_ADDR_VAR 0 1
14086: PUSH
14087: LD_VAR 0 1
14091: PUSH
14092: LD_STRING #KingoftheHill-Player
14094: PUSH
14095: LD_VAR 0 2
14099: PUSH
14100: LD_EXP 57
14104: PUSH
14105: LD_VAR 0 2
14109: ARRAY
14110: PUSH
14111: LD_EXP 44
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: ADD
14122: ST_TO_ADDR
14123: GO 14067
14125: POP
14126: POP
// end ; mpDisplayStrings := result ;
14127: LD_ADDR_EXP 47
14131: PUSH
14132: LD_VAR 0 1
14136: ST_TO_ADDR
// end ;
14137: LD_VAR 0 1
14141: RET
// export function HowMuchPointsKing ( side ) ; begin
14142: LD_INT 0
14144: PPUSH
// result := HowMuchPoints ( side ) ;
14145: LD_ADDR_VAR 0 2
14149: PUSH
14150: LD_VAR 0 1
14154: PPUSH
14155: CALL 14165 0 1
14159: ST_TO_ADDR
// end ;
14160: LD_VAR 0 2
14164: RET
// function HowMuchPoints ( side ) ; var i ; begin
14165: LD_INT 0
14167: PPUSH
14168: PPUSH
// if mpTeamGame then
14169: LD_EXP 20
14173: IFFALSE 14242
// begin for i := 1 to Count ( mpTeams ) do
14175: LD_ADDR_VAR 0 3
14179: PUSH
14180: DOUBLE
14181: LD_INT 1
14183: DEC
14184: ST_TO_ADDR
14185: LD_EXP 19
14189: PPUSH
14190: CALL 24035 0 1
14194: PUSH
14195: FOR_TO
14196: IFFALSE 14238
// begin if side in mpTeams [ i ] then
14198: LD_VAR 0 1
14202: PUSH
14203: LD_EXP 19
14207: PUSH
14208: LD_VAR 0 3
14212: ARRAY
14213: IN
14214: IFFALSE 14236
// begin result := mpKingPoints [ i ] ;
14216: LD_ADDR_VAR 0 2
14220: PUSH
14221: LD_EXP 57
14225: PUSH
14226: LD_VAR 0 3
14230: ARRAY
14231: ST_TO_ADDR
// exit ;
14232: POP
14233: POP
14234: GO 14258
// end ; end ;
14236: GO 14195
14238: POP
14239: POP
// end else
14240: GO 14258
// result := mpKingPoints [ side ] ;
14242: LD_ADDR_VAR 0 2
14246: PUSH
14247: LD_EXP 57
14251: PUSH
14252: LD_VAR 0 1
14256: ARRAY
14257: ST_TO_ADDR
// end ;
14258: LD_VAR 0 2
14262: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
14263: LD_EXP 48
14267: IFFALSE 14275
14269: PUSH
14270: CALL 14687 0 0
14274: AND
14275: IFFALSE 14283
14277: PUSH
14278: LD_OWVAR 4
14282: AND
14283: IFFALSE 14536
14285: GO 14287
14287: DISABLE
14288: LD_INT 0
14290: PPUSH
14291: PPUSH
// begin canWin := false ;
14292: LD_ADDR_VAR 0 2
14296: PUSH
14297: LD_INT 0
14299: ST_TO_ADDR
// if not HasPower ( your_side ) then
14300: LD_OWVAR 2
14304: PPUSH
14305: CALL 14729 0 1
14309: NOT
14310: IFFALSE 14321
// begin Multiplayer_Loose_Message ;
14312: CALL_OW 521
// enable ( mpLose ) ;
14316: LD_INT 102
14318: ENABLE_MARKED
// end else
14319: GO 14536
// begin if not EnemiesInGame then
14321: CALL 14539 0 0
14325: NOT
14326: IFFALSE 14333
// begin enable ( mpWin ) ;
14328: LD_INT 101
14330: ENABLE_MARKED
// exit ;
14331: GO 14536
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
14333: LD_ADDR_VAR 0 2
14337: PUSH
14338: LD_OWVAR 2
14342: PPUSH
14343: CALL 14165 0 1
14347: PUSH
14348: LD_EXP 44
14352: GREATEREQUAL
14353: IFFALSE 14366
14355: PUSH
14356: LD_OWVAR 2
14360: PPUSH
14361: CALL 14729 0 1
14365: AND
14366: ST_TO_ADDR
// for i := 1 to 8 do
14367: LD_ADDR_VAR 0 1
14371: PUSH
14372: DOUBLE
14373: LD_INT 1
14375: DEC
14376: ST_TO_ADDR
14377: LD_INT 8
14379: PUSH
14380: FOR_TO
14381: IFFALSE 14522
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
14383: LD_EXP 16
14387: PUSH
14388: LD_VAR 0 1
14392: ARRAY
14393: IFFALSE 14406
14395: PUSH
14396: LD_VAR 0 1
14400: PPUSH
14401: CALL_OW 108
14405: AND
14406: IFFALSE 14420
14408: PUSH
14409: LD_VAR 0 1
14413: PUSH
14414: LD_OWVAR 2
14418: NONEQUAL
14419: AND
14420: IFFALSE 14520
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
14422: LD_EXP 17
14426: PUSH
14427: LD_VAR 0 1
14431: ARRAY
14432: NOT
14433: IFTRUE 14481
14435: PUSH
14436: LD_EXP 17
14440: PUSH
14441: LD_VAR 0 1
14445: ARRAY
14446: PUSH
14447: LD_EXP 17
14451: PUSH
14452: LD_OWVAR 2
14456: ARRAY
14457: NONEQUAL
14458: IFFALSE 14480
14460: PUSH
14461: LD_OWVAR 2
14465: PPUSH
14466: LD_VAR 0 1
14470: PPUSH
14471: CALL_OW 81
14475: PUSH
14476: LD_INT 1
14478: NONEQUAL
14479: AND
14480: OR
14481: IFFALSE 14520
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
14483: LD_VAR 0 1
14487: PPUSH
14488: CALL 14165 0 1
14492: PUSH
14493: LD_EXP 44
14497: GREATEREQUAL
14498: IFFALSE 14511
14500: PUSH
14501: LD_VAR 0 1
14505: PPUSH
14506: CALL 14729 0 1
14510: AND
14511: IFFALSE 14520
// begin enable ( mpLose ) ;
14513: LD_INT 102
14515: ENABLE_MARKED
// exit ;
14516: POP
14517: POP
14518: GO 14536
// end ;
14520: GO 14380
14522: POP
14523: POP
// if canWin then
14524: LD_VAR 0 2
14528: IFFALSE 14535
// enable ( mpWin ) else
14530: LD_INT 101
14532: ENABLE_MARKED
14533: GO 14536
// enable ;
14535: ENABLE
// end ; end ;
14536: PPOPN 2
14538: END
// function EnemiesInGame ; var i ; begin
14539: LD_INT 0
14541: PPUSH
14542: PPUSH
// result := false ;
14543: LD_ADDR_VAR 0 1
14547: PUSH
14548: LD_INT 0
14550: ST_TO_ADDR
// for i := 1 to 8 do
14551: LD_ADDR_VAR 0 2
14555: PUSH
14556: DOUBLE
14557: LD_INT 1
14559: DEC
14560: ST_TO_ADDR
14561: LD_INT 8
14563: PUSH
14564: FOR_TO
14565: IFFALSE 14680
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
14567: LD_VAR 0 2
14571: PUSH
14572: LD_OWVAR 2
14576: NONEQUAL
14577: IFFALSE 14590
14579: PUSH
14580: LD_VAR 0 2
14584: PPUSH
14585: CALL 14729 0 1
14589: AND
14590: IFFALSE 14603
14592: PUSH
14593: LD_VAR 0 2
14597: PPUSH
14598: CALL_OW 108
14602: AND
14603: IFFALSE 14678
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
14605: LD_EXP 17
14609: PUSH
14610: LD_VAR 0 2
14614: ARRAY
14615: NOT
14616: IFTRUE 14664
14618: PUSH
14619: LD_EXP 17
14623: PUSH
14624: LD_VAR 0 2
14628: ARRAY
14629: PUSH
14630: LD_EXP 17
14634: PUSH
14635: LD_OWVAR 2
14639: ARRAY
14640: NONEQUAL
14641: IFFALSE 14663
14643: PUSH
14644: LD_OWVAR 2
14648: PPUSH
14649: LD_VAR 0 2
14653: PPUSH
14654: CALL_OW 81
14658: PUSH
14659: LD_INT 1
14661: NONEQUAL
14662: AND
14663: OR
14664: IFFALSE 14678
// begin result := true ;
14666: LD_ADDR_VAR 0 1
14670: PUSH
14671: LD_INT 1
14673: ST_TO_ADDR
// exit ;
14674: POP
14675: POP
14676: GO 14682
// end ;
14678: GO 14564
14680: POP
14681: POP
// end ;
14682: LD_VAR 0 1
14686: RET
// function CanWinLoose ; begin
14687: LD_INT 0
14689: PPUSH
// result := true ;
14690: LD_ADDR_VAR 0 1
14694: PUSH
14695: LD_INT 1
14697: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
14698: CALL_OW 531
14702: IFFALSE 14714
14704: PUSH
14705: CALL_OW 519
14709: PUSH
14710: LD_INT 1
14712: GREATER
14713: AND
14714: IFFALSE 14724
// result := false ;
14716: LD_ADDR_VAR 0 1
14720: PUSH
14721: LD_INT 0
14723: ST_TO_ADDR
// end ;
14724: LD_VAR 0 1
14728: RET
// function HasPower ( i ) ; begin
14729: LD_INT 0
14731: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
14732: LD_ADDR_VAR 0 2
14736: PUSH
14737: LD_INT 22
14739: PUSH
14740: LD_VAR 0 1
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: PUSH
14749: LD_INT 2
14751: PUSH
14752: LD_INT 21
14754: PUSH
14755: LD_INT 1
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: PUSH
14762: LD_INT 33
14764: PUSH
14765: LD_INT 3
14767: PUSH
14768: EMPTY
14769: LIST
14770: LIST
14771: PUSH
14772: LD_INT 33
14774: PUSH
14775: LD_INT 5
14777: PUSH
14778: EMPTY
14779: LIST
14780: LIST
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: PUSH
14788: EMPTY
14789: LIST
14790: LIST
14791: PPUSH
14792: CALL_OW 69
14796: ST_TO_ADDR
// end ; end_of_file
14797: LD_VAR 0 2
14801: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
14802: LD_VAR 0 1
14806: PUSH
14807: LD_INT 200
14809: DOUBLE
14810: GREATEREQUAL
14811: IFFALSE 14819
14813: LD_INT 299
14815: DOUBLE
14816: LESSEQUAL
14817: IFTRUE 14821
14819: GO 14853
14821: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
14822: LD_VAR 0 1
14826: PPUSH
14827: LD_VAR 0 2
14831: PPUSH
14832: LD_VAR 0 3
14836: PPUSH
14837: LD_VAR 0 4
14841: PPUSH
14842: LD_VAR 0 5
14846: PPUSH
14847: CALL 17078 0 5
14851: GO 14930
14853: LD_INT 300
14855: DOUBLE
14856: GREATEREQUAL
14857: IFFALSE 14865
14859: LD_INT 399
14861: DOUBLE
14862: LESSEQUAL
14863: IFTRUE 14867
14865: GO 14929
14867: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
14868: LD_VAR 0 1
14872: PPUSH
14873: LD_VAR 0 2
14877: PPUSH
14878: LD_VAR 0 3
14882: PPUSH
14883: LD_VAR 0 4
14887: PPUSH
14888: LD_VAR 0 5
14892: PPUSH
14893: LD_VAR 0 6
14897: PPUSH
14898: LD_VAR 0 7
14902: PPUSH
14903: LD_VAR 0 8
14907: PPUSH
14908: LD_VAR 0 9
14912: PPUSH
14913: LD_VAR 0 10
14917: PPUSH
14918: LD_VAR 0 11
14922: PPUSH
14923: CALL 15559 0 11
14927: GO 14930
14929: POP
// end ;
14930: PPOPN 11
14932: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
14933: LD_VAR 0 1
14937: PPUSH
14938: LD_VAR 0 2
14942: PPUSH
14943: LD_VAR 0 3
14947: PPUSH
14948: LD_VAR 0 4
14952: PPUSH
14953: LD_VAR 0 5
14957: PPUSH
14958: CALL 16459 0 5
// end ; end_of_file
14962: PPOPN 5
14964: END
// every 0 0$1 do
14965: GO 14967
14967: DISABLE
// begin enable ;
14968: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
14969: LD_STRING updateTimer(
14971: PUSH
14972: LD_OWVAR 1
14976: STR
14977: PUSH
14978: LD_STRING );
14980: STR
14981: PPUSH
14982: CALL_OW 559
// end ;
14986: END
// export function SOS_MapStart ( ) ; begin
14987: LD_INT 0
14989: PPUSH
// UpdateFactoryWaypoints ( ) ;
14990: CALL 15921 0 0
// UpdateWarehouseGatheringPoints ( ) ;
14994: CALL 16173 0 0
// ParseMultiDataToLua ( ) ;
14998: CALL 16320 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
15002: LD_STRING setSpecLogoNumber(
15004: PUSH
15005: LD_INT 2
15007: STR
15008: PUSH
15009: LD_STRING ,
15011: STR
15012: PUSH
15013: LD_INT 1
15015: STR
15016: PUSH
15017: LD_STRING )
15019: STR
15020: PPUSH
15021: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
15025: LD_STRING setSpecLogoNumber(
15027: PUSH
15028: LD_INT 3
15030: STR
15031: PUSH
15032: LD_STRING ,
15034: STR
15035: PUSH
15036: LD_INT 2
15038: STR
15039: PUSH
15040: LD_STRING )
15042: STR
15043: PPUSH
15044: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
15048: LD_STRING setSpecLogoNumber(
15050: PUSH
15051: LD_INT 4
15053: STR
15054: PUSH
15055: LD_STRING ,
15057: STR
15058: PUSH
15059: LD_INT 3
15061: STR
15062: PUSH
15063: LD_STRING )
15065: STR
15066: PPUSH
15067: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
15071: LD_STRING setSpecLogoNumber(
15073: PUSH
15074: LD_INT 5
15076: STR
15077: PUSH
15078: LD_STRING ,
15080: STR
15081: PUSH
15082: LD_INT 4
15084: STR
15085: PUSH
15086: LD_STRING )
15088: STR
15089: PPUSH
15090: CALL_OW 559
// end ;
15094: LD_VAR 0 1
15098: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
15099: LD_INT 0
15101: PPUSH
15102: PPUSH
15103: PPUSH
15104: PPUSH
15105: PPUSH
15106: PPUSH
15107: PPUSH
15108: PPUSH
15109: PPUSH
// for i := 1 to 8 do
15110: LD_ADDR_VAR 0 2
15114: PUSH
15115: DOUBLE
15116: LD_INT 1
15118: DEC
15119: ST_TO_ADDR
15120: LD_INT 8
15122: PUSH
15123: FOR_TO
15124: IFFALSE 15509
// begin if mpSidePositions [ i ] then
15126: LD_EXP 16
15130: PUSH
15131: LD_VAR 0 2
15135: ARRAY
15136: IFFALSE 15507
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
15138: LD_ADDR_VAR 0 7
15142: PUSH
15143: LD_INT 22
15145: PUSH
15146: LD_VAR 0 2
15150: PUSH
15151: EMPTY
15152: LIST
15153: LIST
15154: PUSH
15155: LD_INT 21
15157: PUSH
15158: LD_INT 1
15160: PUSH
15161: EMPTY
15162: LIST
15163: LIST
15164: PUSH
15165: EMPTY
15166: LIST
15167: LIST
15168: PPUSH
15169: CALL_OW 69
15173: PPUSH
15174: CALL 24035 0 1
15178: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15179: LD_ADDR_VAR 0 9
15183: PUSH
15184: LD_INT 22
15186: PUSH
15187: LD_VAR 0 2
15191: PUSH
15192: EMPTY
15193: LIST
15194: LIST
15195: PUSH
15196: LD_INT 2
15198: PUSH
15199: LD_INT 30
15201: PUSH
15202: LD_INT 0
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: PUSH
15209: LD_INT 30
15211: PUSH
15212: LD_INT 1
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: PUSH
15219: EMPTY
15220: LIST
15221: LIST
15222: LIST
15223: PUSH
15224: EMPTY
15225: LIST
15226: LIST
15227: PPUSH
15228: CALL_OW 69
15232: ST_TO_ADDR
// crates := 0 ;
15233: LD_ADDR_VAR 0 4
15237: PUSH
15238: LD_INT 0
15240: ST_TO_ADDR
// oil := 0 ;
15241: LD_ADDR_VAR 0 5
15245: PUSH
15246: LD_INT 0
15248: ST_TO_ADDR
// sib := 0 ;
15249: LD_ADDR_VAR 0 6
15253: PUSH
15254: LD_INT 0
15256: ST_TO_ADDR
// if bases then
15257: LD_VAR 0 9
15261: IFFALSE 15367
// begin for j in bases do
15263: LD_ADDR_VAR 0 3
15267: PUSH
15268: LD_VAR 0 9
15272: PUSH
15273: FOR_IN
15274: IFFALSE 15365
// begin base := GetBase ( j ) ;
15276: LD_ADDR_VAR 0 8
15280: PUSH
15281: LD_VAR 0 3
15285: PPUSH
15286: CALL_OW 274
15290: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
15291: LD_ADDR_VAR 0 4
15295: PUSH
15296: LD_VAR 0 4
15300: PUSH
15301: LD_VAR 0 8
15305: PPUSH
15306: LD_INT 1
15308: PPUSH
15309: CALL_OW 275
15313: PLUS
15314: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
15315: LD_ADDR_VAR 0 5
15319: PUSH
15320: LD_VAR 0 5
15324: PUSH
15325: LD_VAR 0 8
15329: PPUSH
15330: LD_INT 2
15332: PPUSH
15333: CALL_OW 275
15337: PLUS
15338: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
15339: LD_ADDR_VAR 0 6
15343: PUSH
15344: LD_VAR 0 6
15348: PUSH
15349: LD_VAR 0 8
15353: PPUSH
15354: LD_INT 3
15356: PPUSH
15357: CALL_OW 275
15361: PLUS
15362: ST_TO_ADDR
// end ;
15363: GO 15273
15365: POP
15366: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
15367: LD_STRING setSpecText(
15369: PUSH
15370: LD_VAR 0 2
15374: STR
15375: PUSH
15376: LD_STRING ,
15378: STR
15379: PUSH
15380: LD_INT 2
15382: STR
15383: PUSH
15384: LD_STRING ,
15386: STR
15387: PUSH
15388: LD_VAR 0 4
15392: STR
15393: PUSH
15394: LD_STRING )
15396: STR
15397: PPUSH
15398: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
15402: LD_STRING setSpecText(
15404: PUSH
15405: LD_VAR 0 2
15409: STR
15410: PUSH
15411: LD_STRING ,
15413: STR
15414: PUSH
15415: LD_INT 3
15417: STR
15418: PUSH
15419: LD_STRING ,
15421: STR
15422: PUSH
15423: LD_VAR 0 5
15427: STR
15428: PUSH
15429: LD_STRING )
15431: STR
15432: PPUSH
15433: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
15437: LD_STRING setSpecText(
15439: PUSH
15440: LD_VAR 0 2
15444: STR
15445: PUSH
15446: LD_STRING ,
15448: STR
15449: PUSH
15450: LD_INT 4
15452: STR
15453: PUSH
15454: LD_STRING ,
15456: STR
15457: PUSH
15458: LD_VAR 0 6
15462: STR
15463: PUSH
15464: LD_STRING )
15466: STR
15467: PPUSH
15468: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
15472: LD_STRING setSpecText(
15474: PUSH
15475: LD_VAR 0 2
15479: STR
15480: PUSH
15481: LD_STRING ,
15483: STR
15484: PUSH
15485: LD_INT 5
15487: STR
15488: PUSH
15489: LD_STRING ,
15491: STR
15492: PUSH
15493: LD_VAR 0 7
15497: STR
15498: PUSH
15499: LD_STRING )
15501: STR
15502: PPUSH
15503: CALL_OW 559
// end ; end ;
15507: GO 15123
15509: POP
15510: POP
// end ;
15511: LD_VAR 0 1
15515: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
15516: LD_INT 2
15518: PUSH
15519: LD_INT 30
15521: PUSH
15522: LD_INT 0
15524: PUSH
15525: EMPTY
15526: LIST
15527: LIST
15528: PUSH
15529: LD_INT 30
15531: PUSH
15532: LD_INT 1
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: PUSH
15539: EMPTY
15540: LIST
15541: LIST
15542: LIST
15543: PPUSH
15544: CALL_OW 69
15548: IFFALSE 15558
15550: GO 15552
15552: DISABLE
// begin enable ;
15553: ENABLE
// UpdateSpectatorBar ;
15554: CALL 15099 0 0
// end ;
15558: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15559: LD_INT 0
15561: PPUSH
// end ;
15562: LD_VAR 0 12
15566: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
15567: LD_INT 0
15569: PPUSH
15570: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
15571: LD_VAR 0 1
15575: NOT
15576: IFTRUE 15595
15578: PUSH
15579: LD_VAR 0 2
15583: PPUSH
15584: LD_VAR 0 3
15588: PPUSH
15589: CALL_OW 488
15593: NOT
15594: OR
15595: IFTRUE 15630
15597: PUSH
15598: LD_VAR 0 1
15602: PPUSH
15603: CALL_OW 266
15607: PUSH
15608: LD_INT 3
15610: NONEQUAL
15611: IFFALSE 15629
15613: PUSH
15614: LD_VAR 0 1
15618: PPUSH
15619: CALL_OW 247
15623: PUSH
15624: LD_INT 1
15626: EQUAL
15627: NOT
15628: AND
15629: OR
15630: IFFALSE 15634
// exit ;
15632: GO 15916
// if GetType ( factory ) = unit_human then
15634: LD_VAR 0 1
15638: PPUSH
15639: CALL_OW 247
15643: PUSH
15644: LD_INT 1
15646: EQUAL
15647: IFFALSE 15664
// factory := IsInUnit ( factory ) ;
15649: LD_ADDR_VAR 0 1
15653: PUSH
15654: LD_VAR 0 1
15658: PPUSH
15659: CALL_OW 310
15663: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
15664: LD_VAR 0 1
15668: PPUSH
15669: CALL_OW 266
15673: PUSH
15674: LD_INT 3
15676: NONEQUAL
15677: IFFALSE 15681
// exit ;
15679: GO 15916
// for i := 1 to Count ( factoryWaypoints ) do
15681: LD_ADDR_VAR 0 5
15685: PUSH
15686: DOUBLE
15687: LD_INT 1
15689: DEC
15690: ST_TO_ADDR
15691: LD_EXP 58
15695: PPUSH
15696: CALL 24035 0 1
15700: PUSH
15701: FOR_TO
15702: IFFALSE 15864
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
15704: LD_VAR 0 2
15708: PPUSH
15709: LD_VAR 0 3
15713: PPUSH
15714: CALL_OW 428
15718: PUSH
15719: LD_EXP 58
15723: PUSH
15724: LD_VAR 0 5
15728: ARRAY
15729: PUSH
15730: LD_INT 2
15732: ARRAY
15733: EQUAL
15734: IFFALSE 15766
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
15736: LD_ADDR_EXP 58
15740: PUSH
15741: LD_EXP 58
15745: PPUSH
15746: LD_VAR 0 5
15750: PPUSH
15751: CALL_OW 3
15755: ST_TO_ADDR
// UpdateFactoryWaypoints ;
15756: CALL 15921 0 0
// exit ;
15760: POP
15761: POP
15762: GO 15916
// end else
15764: GO 15862
// if factory = factoryWaypoints [ i ] [ 2 ] then
15766: LD_VAR 0 1
15770: PUSH
15771: LD_EXP 58
15775: PUSH
15776: LD_VAR 0 5
15780: ARRAY
15781: PUSH
15782: LD_INT 2
15784: ARRAY
15785: EQUAL
15786: IFFALSE 15862
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
15788: LD_ADDR_EXP 58
15792: PUSH
15793: LD_EXP 58
15797: PPUSH
15798: LD_VAR 0 5
15802: PPUSH
15803: CALL_OW 3
15807: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
15808: LD_ADDR_EXP 58
15812: PUSH
15813: LD_EXP 58
15817: PPUSH
15818: LD_VAR 0 1
15822: PPUSH
15823: CALL_OW 255
15827: PUSH
15828: LD_VAR 0 1
15832: PUSH
15833: LD_VAR 0 2
15837: PUSH
15838: LD_VAR 0 3
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: PPUSH
15849: CALL 59967 0 2
15853: ST_TO_ADDR
// UpdateFactoryWaypoints ;
15854: CALL 15921 0 0
// exit ;
15858: POP
15859: POP
15860: GO 15916
// end ; end ;
15862: GO 15701
15864: POP
15865: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
15866: LD_ADDR_EXP 58
15870: PUSH
15871: LD_EXP 58
15875: PPUSH
15876: LD_VAR 0 1
15880: PPUSH
15881: CALL_OW 255
15885: PUSH
15886: LD_VAR 0 1
15890: PUSH
15891: LD_VAR 0 2
15895: PUSH
15896: LD_VAR 0 3
15900: PUSH
15901: EMPTY
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: PPUSH
15907: CALL 59967 0 2
15911: ST_TO_ADDR
// UpdateFactoryWaypoints ;
15912: CALL 15921 0 0
// end ;
15916: LD_VAR 0 4
15920: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
15921: LD_INT 0
15923: PPUSH
15924: PPUSH
15925: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
15926: LD_STRING resetFactoryWaypoint();
15928: PPUSH
15929: CALL_OW 559
// if factoryWaypoints then
15933: LD_EXP 58
15937: IFFALSE 16058
// begin list := factoryWaypoints ;
15939: LD_ADDR_VAR 0 3
15943: PUSH
15944: LD_EXP 58
15948: ST_TO_ADDR
// for i := 1 to list do
15949: LD_ADDR_VAR 0 2
15953: PUSH
15954: DOUBLE
15955: LD_INT 1
15957: DEC
15958: ST_TO_ADDR
15959: LD_VAR 0 3
15963: PUSH
15964: FOR_TO
15965: IFFALSE 16056
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
15967: LD_STRING setFactoryWaypointXY(
15969: PUSH
15970: LD_VAR 0 3
15974: PUSH
15975: LD_VAR 0 2
15979: ARRAY
15980: PUSH
15981: LD_INT 1
15983: ARRAY
15984: STR
15985: PUSH
15986: LD_STRING ,
15988: STR
15989: PUSH
15990: LD_VAR 0 3
15994: PUSH
15995: LD_VAR 0 2
15999: ARRAY
16000: PUSH
16001: LD_INT 2
16003: ARRAY
16004: STR
16005: PUSH
16006: LD_STRING ,
16008: STR
16009: PUSH
16010: LD_VAR 0 3
16014: PUSH
16015: LD_VAR 0 2
16019: ARRAY
16020: PUSH
16021: LD_INT 3
16023: ARRAY
16024: STR
16025: PUSH
16026: LD_STRING ,
16028: STR
16029: PUSH
16030: LD_VAR 0 3
16034: PUSH
16035: LD_VAR 0 2
16039: ARRAY
16040: PUSH
16041: LD_INT 4
16043: ARRAY
16044: STR
16045: PUSH
16046: LD_STRING )
16048: STR
16049: PPUSH
16050: CALL_OW 559
16054: GO 15964
16056: POP
16057: POP
// end ; end ;
16058: LD_VAR 0 1
16062: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
16063: LD_INT 0
16065: PPUSH
// if HexInfo ( x , y ) = warehouse then
16066: LD_VAR 0 2
16070: PPUSH
16071: LD_VAR 0 3
16075: PPUSH
16076: CALL_OW 428
16080: PUSH
16081: LD_VAR 0 1
16085: EQUAL
16086: IFFALSE 16113
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
16088: LD_ADDR_EXP 60
16092: PUSH
16093: LD_EXP 60
16097: PPUSH
16098: LD_VAR 0 1
16102: PPUSH
16103: LD_INT 0
16105: PPUSH
16106: CALL_OW 1
16110: ST_TO_ADDR
16111: GO 16164
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
16113: LD_ADDR_EXP 60
16117: PUSH
16118: LD_EXP 60
16122: PPUSH
16123: LD_VAR 0 1
16127: PPUSH
16128: LD_VAR 0 1
16132: PPUSH
16133: CALL_OW 255
16137: PUSH
16138: LD_VAR 0 1
16142: PUSH
16143: LD_VAR 0 2
16147: PUSH
16148: LD_VAR 0 3
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: PPUSH
16159: CALL_OW 1
16163: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
16164: CALL 16173 0 0
// end ;
16168: LD_VAR 0 4
16172: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
16173: LD_INT 0
16175: PPUSH
16176: PPUSH
16177: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
16178: LD_STRING resetWarehouseGatheringPoints();
16180: PPUSH
16181: CALL_OW 559
// if warehouseGatheringPoints then
16185: LD_EXP 60
16189: IFFALSE 16315
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
16191: LD_ADDR_VAR 0 3
16195: PUSH
16196: LD_EXP 60
16200: PPUSH
16201: CALL 63901 0 1
16205: ST_TO_ADDR
// for i := 1 to list do
16206: LD_ADDR_VAR 0 2
16210: PUSH
16211: DOUBLE
16212: LD_INT 1
16214: DEC
16215: ST_TO_ADDR
16216: LD_VAR 0 3
16220: PUSH
16221: FOR_TO
16222: IFFALSE 16313
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16224: LD_STRING setWarehouseGatheringPointXY(
16226: PUSH
16227: LD_VAR 0 3
16231: PUSH
16232: LD_VAR 0 2
16236: ARRAY
16237: PUSH
16238: LD_INT 1
16240: ARRAY
16241: STR
16242: PUSH
16243: LD_STRING ,
16245: STR
16246: PUSH
16247: LD_VAR 0 3
16251: PUSH
16252: LD_VAR 0 2
16256: ARRAY
16257: PUSH
16258: LD_INT 2
16260: ARRAY
16261: STR
16262: PUSH
16263: LD_STRING ,
16265: STR
16266: PUSH
16267: LD_VAR 0 3
16271: PUSH
16272: LD_VAR 0 2
16276: ARRAY
16277: PUSH
16278: LD_INT 3
16280: ARRAY
16281: STR
16282: PUSH
16283: LD_STRING ,
16285: STR
16286: PUSH
16287: LD_VAR 0 3
16291: PUSH
16292: LD_VAR 0 2
16296: ARRAY
16297: PUSH
16298: LD_INT 4
16300: ARRAY
16301: STR
16302: PUSH
16303: LD_STRING )
16305: STR
16306: PPUSH
16307: CALL_OW 559
16311: GO 16221
16313: POP
16314: POP
// end ; end ;
16315: LD_VAR 0 1
16319: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
16320: LD_INT 0
16322: PPUSH
16323: PPUSH
// if not mpSidePositions then
16324: LD_EXP 16
16328: NOT
16329: IFFALSE 16333
// exit ;
16331: GO 16404
// result :=  ;
16333: LD_ADDR_VAR 0 1
16337: PUSH
16338: LD_STRING 
16340: ST_TO_ADDR
// for i := 1 to 8 do
16341: LD_ADDR_VAR 0 2
16345: PUSH
16346: DOUBLE
16347: LD_INT 1
16349: DEC
16350: ST_TO_ADDR
16351: LD_INT 8
16353: PUSH
16354: FOR_TO
16355: IFFALSE 16385
// begin result := result & mpSidePositions [ i ] & ; ;
16357: LD_ADDR_VAR 0 1
16361: PUSH
16362: LD_VAR 0 1
16366: PUSH
16367: LD_EXP 16
16371: PUSH
16372: LD_VAR 0 2
16376: ARRAY
16377: STR
16378: PUSH
16379: LD_STRING ;
16381: STR
16382: ST_TO_ADDR
// end ;
16383: GO 16354
16385: POP
16386: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
16387: LD_STRING setMultiplayerRealPosition("
16389: PUSH
16390: LD_VAR 0 1
16394: STR
16395: PUSH
16396: LD_STRING ");
16398: STR
16399: PPUSH
16400: CALL_OW 559
// end ; end_of_file
16404: LD_VAR 0 1
16408: RET
// export function SOS_UnitDestroyed ( un ) ; begin
16409: LD_INT 0
16411: PPUSH
// ComRadiation ( un ) ;
16412: LD_VAR 0 1
16416: PPUSH
16417: CALL 17498 0 1
// end ;
16421: LD_VAR 0 2
16425: RET
// export function SOS_UnitKamikazed ( un ) ; begin
16426: LD_INT 0
16428: PPUSH
// ComRadiation ( un ) ;
16429: LD_VAR 0 1
16433: PPUSH
16434: CALL 17498 0 1
// end ;
16438: LD_VAR 0 2
16442: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
16443: LD_INT 0
16445: PPUSH
// end ;
16446: LD_VAR 0 4
16450: RET
// export function SOS_Command ( cmd ) ; begin
16451: LD_INT 0
16453: PPUSH
// end ;
16454: LD_VAR 0 2
16458: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
16459: LD_INT 0
16461: PPUSH
// end ;
16462: LD_VAR 0 6
16466: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
16467: LD_INT 0
16469: PPUSH
16470: PPUSH
16471: PPUSH
16472: PPUSH
// if not vehicle or not factory then
16473: LD_VAR 0 1
16477: NOT
16478: IFTRUE 16487
16480: PUSH
16481: LD_VAR 0 2
16485: NOT
16486: OR
16487: IFFALSE 16491
// exit ;
16489: GO 17073
// if not factoryWaypoints then
16491: LD_EXP 58
16495: NOT
16496: IFFALSE 16500
// exit ;
16498: GO 17073
// for i := 1 to Count ( factoryWaypoints ) do
16500: LD_ADDR_VAR 0 4
16504: PUSH
16505: DOUBLE
16506: LD_INT 1
16508: DEC
16509: ST_TO_ADDR
16510: LD_EXP 58
16514: PPUSH
16515: CALL 24035 0 1
16519: PUSH
16520: FOR_TO
16521: IFFALSE 17071
// if factoryWaypoints [ i ] [ 2 ] = factory then
16523: LD_EXP 58
16527: PUSH
16528: LD_VAR 0 4
16532: ARRAY
16533: PUSH
16534: LD_INT 2
16536: ARRAY
16537: PUSH
16538: LD_VAR 0 2
16542: EQUAL
16543: IFFALSE 17069
// begin if GetControl ( vehicle ) = control_manual then
16545: LD_VAR 0 1
16549: PPUSH
16550: CALL_OW 263
16554: PUSH
16555: LD_INT 1
16557: EQUAL
16558: IFFALSE 16922
// begin driver := IsDrivenBy ( vehicle ) ;
16560: LD_ADDR_VAR 0 5
16564: PUSH
16565: LD_VAR 0 1
16569: PPUSH
16570: CALL_OW 311
16574: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
16575: LD_VAR 0 5
16579: PUSH
16580: LD_EXP 59
16584: IN
16585: IFTRUE 16599
16587: PUSH
16588: LD_VAR 0 1
16592: PUSH
16593: LD_EXP 59
16597: IN
16598: OR
16599: IFFALSE 16605
// exit ;
16601: POP
16602: POP
16603: GO 17073
// if not HasTask ( driver ) then
16605: LD_VAR 0 5
16609: PPUSH
16610: CALL_OW 314
16614: NOT
16615: IFFALSE 16920
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
16617: LD_ADDR_EXP 59
16621: PUSH
16622: LD_EXP 59
16626: PPUSH
16627: LD_VAR 0 5
16631: PPUSH
16632: CALL 59967 0 2
16636: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
16637: LD_ADDR_EXP 59
16641: PUSH
16642: LD_EXP 59
16646: PPUSH
16647: LD_VAR 0 1
16651: PPUSH
16652: CALL 59967 0 2
16656: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
16657: LD_ADDR_VAR 0 6
16661: PUSH
16662: LD_EXP 58
16666: PUSH
16667: LD_VAR 0 4
16671: ARRAY
16672: PUSH
16673: LD_INT 3
16675: ARRAY
16676: PPUSH
16677: LD_EXP 58
16681: PUSH
16682: LD_VAR 0 4
16686: ARRAY
16687: PUSH
16688: LD_INT 4
16690: ARRAY
16691: PPUSH
16692: CALL_OW 428
16696: ST_TO_ADDR
// if hex then
16697: LD_VAR 0 6
16701: IFFALSE 16719
// ComMoveUnit ( driver , hex ) else
16703: LD_VAR 0 5
16707: PPUSH
16708: LD_VAR 0 6
16712: PPUSH
16713: CALL_OW 112
16717: GO 16803
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
16719: LD_VAR 0 1
16723: PPUSH
16724: LD_EXP 58
16728: PUSH
16729: LD_VAR 0 4
16733: ARRAY
16734: PUSH
16735: LD_INT 3
16737: ARRAY
16738: PPUSH
16739: LD_EXP 58
16743: PUSH
16744: LD_VAR 0 4
16748: ARRAY
16749: PUSH
16750: LD_INT 4
16752: ARRAY
16753: PPUSH
16754: CALL_OW 297
16758: PUSH
16759: LD_INT 0
16761: GREATER
16762: IFFALSE 16803
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
16764: LD_VAR 0 5
16768: PPUSH
16769: LD_EXP 58
16773: PUSH
16774: LD_VAR 0 4
16778: ARRAY
16779: PUSH
16780: LD_INT 3
16782: ARRAY
16783: PPUSH
16784: LD_EXP 58
16788: PUSH
16789: LD_VAR 0 4
16793: ARRAY
16794: PUSH
16795: LD_INT 4
16797: ARRAY
16798: PPUSH
16799: CALL_OW 111
// AddComExitVehicle ( driver ) ;
16803: LD_VAR 0 5
16807: PPUSH
16808: CALL_OW 181
// if Multiplayer then
16812: LD_OWVAR 4
16816: IFFALSE 16865
// begin repeat wait ( 10 ) ;
16818: LD_INT 10
16820: PPUSH
16821: CALL_OW 67
// until not IsInUnit ( driver ) ;
16825: LD_VAR 0 5
16829: PPUSH
16830: CALL_OW 310
16834: NOT
16835: IFFALSE 16818
// if not HasTask ( driver ) then
16837: LD_VAR 0 5
16841: PPUSH
16842: CALL_OW 314
16846: NOT
16847: IFFALSE 16863
// ComEnterUnit ( driver , factory ) ;
16849: LD_VAR 0 5
16853: PPUSH
16854: LD_VAR 0 2
16858: PPUSH
16859: CALL_OW 120
// end else
16863: GO 16879
// AddComEnterUnit ( driver , factory ) ;
16865: LD_VAR 0 5
16869: PPUSH
16870: LD_VAR 0 2
16874: PPUSH
16875: CALL_OW 180
// wait ( 0 0$1 ) ;
16879: LD_INT 35
16881: PPUSH
16882: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
16886: LD_ADDR_EXP 59
16890: PUSH
16891: LD_EXP 59
16895: PUSH
16896: LD_VAR 0 5
16900: DIFF
16901: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
16902: LD_ADDR_EXP 59
16906: PUSH
16907: LD_EXP 59
16911: PUSH
16912: LD_VAR 0 1
16916: DIFF
16917: ST_TO_ADDR
// break ;
16918: GO 17071
// end ; end else
16920: GO 17069
// if GetControl ( vehicle ) = control_remote then
16922: LD_VAR 0 1
16926: PPUSH
16927: CALL_OW 263
16931: PUSH
16932: LD_INT 2
16934: EQUAL
16935: IFFALSE 17021
// begin wait ( 0 0$2 ) ;
16937: LD_INT 70
16939: PPUSH
16940: CALL_OW 67
// repeat wait ( 10 ) ;
16944: LD_INT 10
16946: PPUSH
16947: CALL_OW 67
// Connect ( vehicle ) ;
16951: LD_VAR 0 1
16955: PPUSH
16956: CALL 30279 0 1
// until IsControledBy ( vehicle ) ;
16960: LD_VAR 0 1
16964: PPUSH
16965: CALL_OW 312
16969: IFFALSE 16944
// wait ( 10 ) ;
16971: LD_INT 10
16973: PPUSH
16974: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
16978: LD_VAR 0 1
16982: PPUSH
16983: LD_EXP 58
16987: PUSH
16988: LD_VAR 0 4
16992: ARRAY
16993: PUSH
16994: LD_INT 3
16996: ARRAY
16997: PPUSH
16998: LD_EXP 58
17002: PUSH
17003: LD_VAR 0 4
17007: ARRAY
17008: PUSH
17009: LD_INT 4
17011: ARRAY
17012: PPUSH
17013: CALL_OW 111
// break ;
17017: GO 17071
// end else
17019: GO 17069
// begin wait ( 0 0$3 ) ;
17021: LD_INT 105
17023: PPUSH
17024: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
17028: LD_VAR 0 1
17032: PPUSH
17033: LD_EXP 58
17037: PUSH
17038: LD_VAR 0 4
17042: ARRAY
17043: PUSH
17044: LD_INT 3
17046: ARRAY
17047: PPUSH
17048: LD_EXP 58
17052: PUSH
17053: LD_VAR 0 4
17057: ARRAY
17058: PUSH
17059: LD_INT 4
17061: ARRAY
17062: PPUSH
17063: CALL_OW 111
// break ;
17067: GO 17071
// end ; end ;
17069: GO 16520
17071: POP
17072: POP
// end ;
17073: LD_VAR 0 3
17077: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
17078: LD_INT 0
17080: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
17081: LD_VAR 0 1
17085: PUSH
17086: LD_INT 250
17088: EQUAL
17089: IFFALSE 17106
17091: PUSH
17092: LD_VAR 0 2
17096: PPUSH
17097: CALL_OW 264
17101: PUSH
17102: LD_INT 81
17104: EQUAL
17105: AND
17106: IFFALSE 17127
// MinerPlaceMine ( unit , x , y ) ;
17108: LD_VAR 0 2
17112: PPUSH
17113: LD_VAR 0 4
17117: PPUSH
17118: LD_VAR 0 5
17122: PPUSH
17123: CALL 20259 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
17127: LD_VAR 0 1
17131: PUSH
17132: LD_INT 251
17134: EQUAL
17135: IFFALSE 17152
17137: PUSH
17138: LD_VAR 0 2
17142: PPUSH
17143: CALL_OW 264
17147: PUSH
17148: LD_INT 81
17150: EQUAL
17151: AND
17152: IFFALSE 17173
// MinerDetonateMine ( unit , x , y ) ;
17154: LD_VAR 0 2
17158: PPUSH
17159: LD_VAR 0 4
17163: PPUSH
17164: LD_VAR 0 5
17168: PPUSH
17169: CALL 20538 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
17173: LD_VAR 0 1
17177: PUSH
17178: LD_INT 252
17180: EQUAL
17181: IFFALSE 17198
17183: PUSH
17184: LD_VAR 0 2
17188: PPUSH
17189: CALL_OW 264
17193: PUSH
17194: LD_INT 81
17196: EQUAL
17197: AND
17198: IFFALSE 17219
// MinerCreateMinefield ( unit , x , y ) ;
17200: LD_VAR 0 2
17204: PPUSH
17205: LD_VAR 0 4
17209: PPUSH
17210: LD_VAR 0 5
17214: PPUSH
17215: CALL 20957 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
17219: LD_VAR 0 1
17223: PUSH
17224: LD_INT 253
17226: EQUAL
17227: IFFALSE 17244
17229: PUSH
17230: LD_VAR 0 2
17234: PPUSH
17235: CALL_OW 257
17239: PUSH
17240: LD_INT 5
17242: EQUAL
17243: AND
17244: IFFALSE 17265
// ComBinocular ( unit , x , y ) ;
17246: LD_VAR 0 2
17250: PPUSH
17251: LD_VAR 0 4
17255: PPUSH
17256: LD_VAR 0 5
17260: PPUSH
17261: CALL 21332 0 3
// if selectedUnit then
17265: LD_VAR 0 3
17269: IFFALSE 17329
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
17271: LD_VAR 0 1
17275: PUSH
17276: LD_INT 254
17278: EQUAL
17279: IFFALSE 17296
17281: PUSH
17282: LD_VAR 0 2
17286: PPUSH
17287: CALL_OW 264
17291: PUSH
17292: LD_INT 99
17294: EQUAL
17295: AND
17296: IFFALSE 17313
17298: PUSH
17299: LD_VAR 0 3
17303: PPUSH
17304: CALL_OW 263
17308: PUSH
17309: LD_INT 3
17311: EQUAL
17312: AND
17313: IFFALSE 17329
// HackDestroyVehicle ( unit , selectedUnit ) ;
17315: LD_VAR 0 2
17319: PPUSH
17320: LD_VAR 0 3
17324: PPUSH
17325: CALL 19619 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
17329: LD_VAR 0 1
17333: PUSH
17334: LD_INT 255
17336: EQUAL
17337: IFFALSE 17361
17339: PUSH
17340: LD_VAR 0 2
17344: PPUSH
17345: CALL_OW 264
17349: PUSH
17350: LD_INT 14
17352: PUSH
17353: LD_INT 53
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: IN
17360: AND
17361: IFFALSE 17379
17363: PUSH
17364: LD_VAR 0 4
17368: PPUSH
17369: LD_VAR 0 5
17373: PPUSH
17374: CALL_OW 488
17378: AND
17379: IFFALSE 17403
// CutTreeXYR ( unit , x , y , 12 ) ;
17381: LD_VAR 0 2
17385: PPUSH
17386: LD_VAR 0 4
17390: PPUSH
17391: LD_VAR 0 5
17395: PPUSH
17396: LD_INT 12
17398: PPUSH
17399: CALL 17594 0 4
// if cmd = 256 then
17403: LD_VAR 0 1
17407: PUSH
17408: LD_INT 256
17410: EQUAL
17411: IFFALSE 17432
// SetFactoryWaypoint ( unit , x , y ) ;
17413: LD_VAR 0 2
17417: PPUSH
17418: LD_VAR 0 4
17422: PPUSH
17423: LD_VAR 0 5
17427: PPUSH
17428: CALL 15567 0 3
// if cmd = 257 then
17432: LD_VAR 0 1
17436: PUSH
17437: LD_INT 257
17439: EQUAL
17440: IFFALSE 17461
// SetWarehouseGatheringPoint ( unit , x , y ) ;
17442: LD_VAR 0 2
17446: PPUSH
17447: LD_VAR 0 4
17451: PPUSH
17452: LD_VAR 0 5
17456: PPUSH
17457: CALL 16063 0 3
// if cmd = 258 then
17461: LD_VAR 0 1
17465: PUSH
17466: LD_INT 258
17468: EQUAL
17469: IFFALSE 17493
// BurnTreeXYR ( unit , x , y , 8 ) ;
17471: LD_VAR 0 2
17475: PPUSH
17476: LD_VAR 0 4
17480: PPUSH
17481: LD_VAR 0 5
17485: PPUSH
17486: LD_INT 8
17488: PPUSH
17489: CALL 17994 0 4
// end ;
17493: LD_VAR 0 6
17497: RET
// export function ComRadiation ( un ) ; var eff ; begin
17498: LD_INT 0
17500: PPUSH
17501: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
17502: LD_VAR 0 1
17506: PPUSH
17507: CALL_OW 264
17511: PUSH
17512: LD_INT 91
17514: NONEQUAL
17515: IFFALSE 17519
// exit ;
17517: GO 17589
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17519: LD_INT 68
17521: PPUSH
17522: LD_VAR 0 1
17526: PPUSH
17527: CALL_OW 255
17531: PPUSH
17532: CALL_OW 321
17536: PUSH
17537: LD_INT 2
17539: EQUAL
17540: IFFALSE 17552
// eff := 50 else
17542: LD_ADDR_VAR 0 3
17546: PUSH
17547: LD_INT 50
17549: ST_TO_ADDR
17550: GO 17560
// eff := 25 ;
17552: LD_ADDR_VAR 0 3
17556: PUSH
17557: LD_INT 25
17559: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17560: LD_VAR 0 1
17564: PPUSH
17565: CALL_OW 250
17569: PPUSH
17570: LD_VAR 0 1
17574: PPUSH
17575: CALL_OW 251
17579: PPUSH
17580: LD_VAR 0 3
17584: PPUSH
17585: CALL_OW 495
// end ;
17589: LD_VAR 0 2
17593: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
17594: LD_INT 0
17596: PPUSH
17597: PPUSH
17598: PPUSH
17599: PPUSH
17600: PPUSH
17601: PPUSH
17602: PPUSH
17603: PPUSH
17604: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
17605: LD_VAR 0 1
17609: PPUSH
17610: CALL_OW 302
17614: NOT
17615: IFTRUE 17634
17617: PUSH
17618: LD_VAR 0 2
17622: PPUSH
17623: LD_VAR 0 3
17627: PPUSH
17628: CALL_OW 488
17632: NOT
17633: OR
17634: IFTRUE 17643
17636: PUSH
17637: LD_VAR 0 4
17641: NOT
17642: OR
17643: IFFALSE 17647
// exit ;
17645: GO 17989
// list := [ ] ;
17647: LD_ADDR_VAR 0 13
17651: PUSH
17652: EMPTY
17653: ST_TO_ADDR
// if x - r < 0 then
17654: LD_VAR 0 2
17658: PUSH
17659: LD_VAR 0 4
17663: MINUS
17664: PUSH
17665: LD_INT 0
17667: LESS
17668: IFFALSE 17680
// min_x := 0 else
17670: LD_ADDR_VAR 0 7
17674: PUSH
17675: LD_INT 0
17677: ST_TO_ADDR
17678: GO 17696
// min_x := x - r ;
17680: LD_ADDR_VAR 0 7
17684: PUSH
17685: LD_VAR 0 2
17689: PUSH
17690: LD_VAR 0 4
17694: MINUS
17695: ST_TO_ADDR
// if y - r < 0 then
17696: LD_VAR 0 3
17700: PUSH
17701: LD_VAR 0 4
17705: MINUS
17706: PUSH
17707: LD_INT 0
17709: LESS
17710: IFFALSE 17722
// min_y := 0 else
17712: LD_ADDR_VAR 0 8
17716: PUSH
17717: LD_INT 0
17719: ST_TO_ADDR
17720: GO 17738
// min_y := y - r ;
17722: LD_ADDR_VAR 0 8
17726: PUSH
17727: LD_VAR 0 3
17731: PUSH
17732: LD_VAR 0 4
17736: MINUS
17737: ST_TO_ADDR
// max_x := x + r ;
17738: LD_ADDR_VAR 0 9
17742: PUSH
17743: LD_VAR 0 2
17747: PUSH
17748: LD_VAR 0 4
17752: PLUS
17753: ST_TO_ADDR
// max_y := y + r ;
17754: LD_ADDR_VAR 0 10
17758: PUSH
17759: LD_VAR 0 3
17763: PUSH
17764: LD_VAR 0 4
17768: PLUS
17769: ST_TO_ADDR
// for _x = min_x to max_x do
17770: LD_ADDR_VAR 0 11
17774: PUSH
17775: DOUBLE
17776: LD_VAR 0 7
17780: DEC
17781: ST_TO_ADDR
17782: LD_VAR 0 9
17786: PUSH
17787: FOR_TO
17788: IFFALSE 17907
// for _y = min_y to max_y do
17790: LD_ADDR_VAR 0 12
17794: PUSH
17795: DOUBLE
17796: LD_VAR 0 8
17800: DEC
17801: ST_TO_ADDR
17802: LD_VAR 0 10
17806: PUSH
17807: FOR_TO
17808: IFFALSE 17903
// begin if not ValidHex ( _x , _y ) then
17810: LD_VAR 0 11
17814: PPUSH
17815: LD_VAR 0 12
17819: PPUSH
17820: CALL_OW 488
17824: NOT
17825: IFFALSE 17829
// continue ;
17827: GO 17807
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
17829: LD_VAR 0 11
17833: PPUSH
17834: LD_VAR 0 12
17838: PPUSH
17839: CALL_OW 351
17843: IFFALSE 17861
17845: PUSH
17846: LD_VAR 0 11
17850: PPUSH
17851: LD_VAR 0 12
17855: PPUSH
17856: CALL_OW 554
17860: AND
17861: IFFALSE 17901
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
17863: LD_ADDR_VAR 0 13
17867: PUSH
17868: LD_VAR 0 13
17872: PPUSH
17873: LD_VAR 0 13
17877: PUSH
17878: LD_INT 1
17880: PLUS
17881: PPUSH
17882: LD_VAR 0 11
17886: PUSH
17887: LD_VAR 0 12
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PPUSH
17896: CALL_OW 2
17900: ST_TO_ADDR
// end ;
17901: GO 17807
17903: POP
17904: POP
17905: GO 17787
17907: POP
17908: POP
// if not list then
17909: LD_VAR 0 13
17913: NOT
17914: IFFALSE 17918
// exit ;
17916: GO 17989
// for i in list do
17918: LD_ADDR_VAR 0 6
17922: PUSH
17923: LD_VAR 0 13
17927: PUSH
17928: FOR_IN
17929: IFFALSE 17987
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
17931: LD_VAR 0 1
17935: PPUSH
17936: LD_STRING M
17938: PUSH
17939: LD_VAR 0 6
17943: PUSH
17944: LD_INT 1
17946: ARRAY
17947: PUSH
17948: LD_VAR 0 6
17952: PUSH
17953: LD_INT 2
17955: ARRAY
17956: PUSH
17957: LD_INT 0
17959: PUSH
17960: LD_INT 0
17962: PUSH
17963: LD_INT 0
17965: PUSH
17966: LD_INT 0
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: PUSH
17978: EMPTY
17979: LIST
17980: PPUSH
17981: CALL_OW 447
17985: GO 17928
17987: POP
17988: POP
// end ;
17989: LD_VAR 0 5
17993: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
17994: LD_INT 0
17996: PPUSH
17997: PPUSH
17998: PPUSH
17999: PPUSH
18000: PPUSH
18001: PPUSH
18002: PPUSH
18003: PPUSH
18004: PPUSH
18005: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
18006: LD_VAR 0 1
18010: PPUSH
18011: CALL_OW 302
18015: NOT
18016: IFTRUE 18035
18018: PUSH
18019: LD_VAR 0 2
18023: PPUSH
18024: LD_VAR 0 3
18028: PPUSH
18029: CALL_OW 488
18033: NOT
18034: OR
18035: IFTRUE 18044
18037: PUSH
18038: LD_VAR 0 4
18042: NOT
18043: OR
18044: IFFALSE 18048
// exit ;
18046: GO 18565
// list := [ ] ;
18048: LD_ADDR_VAR 0 13
18052: PUSH
18053: EMPTY
18054: ST_TO_ADDR
// if x - r < 0 then
18055: LD_VAR 0 2
18059: PUSH
18060: LD_VAR 0 4
18064: MINUS
18065: PUSH
18066: LD_INT 0
18068: LESS
18069: IFFALSE 18081
// min_x := 0 else
18071: LD_ADDR_VAR 0 7
18075: PUSH
18076: LD_INT 0
18078: ST_TO_ADDR
18079: GO 18097
// min_x := x - r ;
18081: LD_ADDR_VAR 0 7
18085: PUSH
18086: LD_VAR 0 2
18090: PUSH
18091: LD_VAR 0 4
18095: MINUS
18096: ST_TO_ADDR
// if y - r < 0 then
18097: LD_VAR 0 3
18101: PUSH
18102: LD_VAR 0 4
18106: MINUS
18107: PUSH
18108: LD_INT 0
18110: LESS
18111: IFFALSE 18123
// min_y := 0 else
18113: LD_ADDR_VAR 0 8
18117: PUSH
18118: LD_INT 0
18120: ST_TO_ADDR
18121: GO 18139
// min_y := y - r ;
18123: LD_ADDR_VAR 0 8
18127: PUSH
18128: LD_VAR 0 3
18132: PUSH
18133: LD_VAR 0 4
18137: MINUS
18138: ST_TO_ADDR
// max_x := x + r ;
18139: LD_ADDR_VAR 0 9
18143: PUSH
18144: LD_VAR 0 2
18148: PUSH
18149: LD_VAR 0 4
18153: PLUS
18154: ST_TO_ADDR
// max_y := y + r ;
18155: LD_ADDR_VAR 0 10
18159: PUSH
18160: LD_VAR 0 3
18164: PUSH
18165: LD_VAR 0 4
18169: PLUS
18170: ST_TO_ADDR
// for _x = min_x to max_x do
18171: LD_ADDR_VAR 0 11
18175: PUSH
18176: DOUBLE
18177: LD_VAR 0 7
18181: DEC
18182: ST_TO_ADDR
18183: LD_VAR 0 9
18187: PUSH
18188: FOR_TO
18189: IFFALSE 18308
// for _y = min_y to max_y do
18191: LD_ADDR_VAR 0 12
18195: PUSH
18196: DOUBLE
18197: LD_VAR 0 8
18201: DEC
18202: ST_TO_ADDR
18203: LD_VAR 0 10
18207: PUSH
18208: FOR_TO
18209: IFFALSE 18304
// begin if not ValidHex ( _x , _y ) then
18211: LD_VAR 0 11
18215: PPUSH
18216: LD_VAR 0 12
18220: PPUSH
18221: CALL_OW 488
18225: NOT
18226: IFFALSE 18230
// continue ;
18228: GO 18208
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18230: LD_VAR 0 11
18234: PPUSH
18235: LD_VAR 0 12
18239: PPUSH
18240: CALL_OW 351
18244: IFFALSE 18262
18246: PUSH
18247: LD_VAR 0 11
18251: PPUSH
18252: LD_VAR 0 12
18256: PPUSH
18257: CALL_OW 554
18261: AND
18262: IFFALSE 18302
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18264: LD_ADDR_VAR 0 13
18268: PUSH
18269: LD_VAR 0 13
18273: PPUSH
18274: LD_VAR 0 13
18278: PUSH
18279: LD_INT 1
18281: PLUS
18282: PPUSH
18283: LD_VAR 0 11
18287: PUSH
18288: LD_VAR 0 12
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: PPUSH
18297: CALL_OW 2
18301: ST_TO_ADDR
// end ;
18302: GO 18208
18304: POP
18305: POP
18306: GO 18188
18308: POP
18309: POP
// if not list then
18310: LD_VAR 0 13
18314: NOT
18315: IFFALSE 18319
// exit ;
18317: GO 18565
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
18319: LD_ADDR_VAR 0 13
18323: PUSH
18324: LD_VAR 0 1
18328: PPUSH
18329: LD_VAR 0 13
18333: PPUSH
18334: LD_INT 1
18336: PPUSH
18337: LD_INT 1
18339: PPUSH
18340: CALL 27407 0 4
18344: ST_TO_ADDR
// ComStop ( flame ) ;
18345: LD_VAR 0 1
18349: PPUSH
18350: CALL_OW 141
// for i in list do
18354: LD_ADDR_VAR 0 6
18358: PUSH
18359: LD_VAR 0 13
18363: PUSH
18364: FOR_IN
18365: IFFALSE 18396
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
18367: LD_VAR 0 1
18371: PPUSH
18372: LD_VAR 0 6
18376: PUSH
18377: LD_INT 1
18379: ARRAY
18380: PPUSH
18381: LD_VAR 0 6
18385: PUSH
18386: LD_INT 2
18388: ARRAY
18389: PPUSH
18390: CALL_OW 176
18394: GO 18364
18396: POP
18397: POP
// repeat wait ( 0 0$1 ) ;
18398: LD_INT 35
18400: PPUSH
18401: CALL_OW 67
// task := GetTaskList ( flame ) ;
18405: LD_ADDR_VAR 0 14
18409: PUSH
18410: LD_VAR 0 1
18414: PPUSH
18415: CALL_OW 437
18419: ST_TO_ADDR
// if not task then
18420: LD_VAR 0 14
18424: NOT
18425: IFFALSE 18429
// exit ;
18427: GO 18565
// if task [ 1 ] [ 1 ] <> | then
18429: LD_VAR 0 14
18433: PUSH
18434: LD_INT 1
18436: ARRAY
18437: PUSH
18438: LD_INT 1
18440: ARRAY
18441: PUSH
18442: LD_STRING |
18444: NONEQUAL
18445: IFFALSE 18449
// exit ;
18447: GO 18565
// _x := task [ 1 ] [ 2 ] ;
18449: LD_ADDR_VAR 0 11
18453: PUSH
18454: LD_VAR 0 14
18458: PUSH
18459: LD_INT 1
18461: ARRAY
18462: PUSH
18463: LD_INT 2
18465: ARRAY
18466: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
18467: LD_ADDR_VAR 0 12
18471: PUSH
18472: LD_VAR 0 14
18476: PUSH
18477: LD_INT 1
18479: ARRAY
18480: PUSH
18481: LD_INT 3
18483: ARRAY
18484: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
18485: LD_VAR 0 11
18489: PPUSH
18490: LD_VAR 0 12
18494: PPUSH
18495: CALL_OW 351
18499: NOT
18500: IFTRUE 18519
18502: PUSH
18503: LD_VAR 0 11
18507: PPUSH
18508: LD_VAR 0 12
18512: PPUSH
18513: CALL_OW 554
18517: NOT
18518: OR
18519: IFFALSE 18553
// begin task := Delete ( task , 1 ) ;
18521: LD_ADDR_VAR 0 14
18525: PUSH
18526: LD_VAR 0 14
18530: PPUSH
18531: LD_INT 1
18533: PPUSH
18534: CALL_OW 3
18538: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
18539: LD_VAR 0 1
18543: PPUSH
18544: LD_VAR 0 14
18548: PPUSH
18549: CALL_OW 446
// end ; until not HasTask ( flame ) ;
18553: LD_VAR 0 1
18557: PPUSH
18558: CALL_OW 314
18562: NOT
18563: IFFALSE 18398
// end ;
18565: LD_VAR 0 5
18569: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18570: LD_EXP 62
18574: NOT
18575: IFFALSE 18625
18577: GO 18579
18579: DISABLE
// begin initHack := true ;
18580: LD_ADDR_EXP 62
18584: PUSH
18585: LD_INT 1
18587: ST_TO_ADDR
// hackTanks := [ ] ;
18588: LD_ADDR_EXP 63
18592: PUSH
18593: EMPTY
18594: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18595: LD_ADDR_EXP 64
18599: PUSH
18600: EMPTY
18601: ST_TO_ADDR
// hackLimit := 3 ;
18602: LD_ADDR_EXP 65
18606: PUSH
18607: LD_INT 3
18609: ST_TO_ADDR
// hackDist := 12 ;
18610: LD_ADDR_EXP 66
18614: PUSH
18615: LD_INT 12
18617: ST_TO_ADDR
// hackCounter := [ ] ;
18618: LD_ADDR_EXP 67
18622: PUSH
18623: EMPTY
18624: ST_TO_ADDR
// end ;
18625: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18626: LD_EXP 62
18630: IFFALSE 18648
18632: PUSH
18633: LD_INT 34
18635: PUSH
18636: LD_INT 99
18638: PUSH
18639: EMPTY
18640: LIST
18641: LIST
18642: PPUSH
18643: CALL_OW 69
18647: AND
18648: IFFALSE 18901
18650: GO 18652
18652: DISABLE
18653: LD_INT 0
18655: PPUSH
18656: PPUSH
// begin enable ;
18657: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18658: LD_ADDR_VAR 0 1
18662: PUSH
18663: LD_INT 34
18665: PUSH
18666: LD_INT 99
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: PPUSH
18673: CALL_OW 69
18677: PUSH
18678: FOR_IN
18679: IFFALSE 18899
// begin if not i in hackTanks then
18681: LD_VAR 0 1
18685: PUSH
18686: LD_EXP 63
18690: IN
18691: NOT
18692: IFFALSE 18775
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
18694: LD_ADDR_EXP 63
18698: PUSH
18699: LD_EXP 63
18703: PPUSH
18704: LD_EXP 63
18708: PUSH
18709: LD_INT 1
18711: PLUS
18712: PPUSH
18713: LD_VAR 0 1
18717: PPUSH
18718: CALL_OW 1
18722: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
18723: LD_ADDR_EXP 64
18727: PUSH
18728: LD_EXP 64
18732: PPUSH
18733: LD_EXP 64
18737: PUSH
18738: LD_INT 1
18740: PLUS
18741: PPUSH
18742: EMPTY
18743: PPUSH
18744: CALL_OW 1
18748: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
18749: LD_ADDR_EXP 67
18753: PUSH
18754: LD_EXP 67
18758: PPUSH
18759: LD_EXP 67
18763: PUSH
18764: LD_INT 1
18766: PLUS
18767: PPUSH
18768: EMPTY
18769: PPUSH
18770: CALL_OW 1
18774: ST_TO_ADDR
// end ; if not IsOk ( i ) then
18775: LD_VAR 0 1
18779: PPUSH
18780: CALL_OW 302
18784: NOT
18785: IFFALSE 18798
// begin HackUnlinkAll ( i ) ;
18787: LD_VAR 0 1
18791: PPUSH
18792: CALL 18904 0 1
// continue ;
18796: GO 18678
// end ; HackCheckCapturedStatus ( i ) ;
18798: LD_VAR 0 1
18802: PPUSH
18803: CALL 19349 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
18807: LD_ADDR_VAR 0 2
18811: PUSH
18812: LD_INT 81
18814: PUSH
18815: LD_VAR 0 1
18819: PPUSH
18820: CALL_OW 255
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: PUSH
18829: LD_INT 33
18831: PUSH
18832: LD_INT 3
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PUSH
18839: LD_INT 91
18841: PUSH
18842: LD_VAR 0 1
18846: PUSH
18847: LD_EXP 66
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: LIST
18856: PUSH
18857: LD_INT 50
18859: PUSH
18860: EMPTY
18861: LIST
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: PPUSH
18869: CALL_OW 69
18873: ST_TO_ADDR
// if not tmp then
18874: LD_VAR 0 2
18878: NOT
18879: IFFALSE 18883
// continue ;
18881: GO 18678
// HackLink ( i , tmp ) ;
18883: LD_VAR 0 1
18887: PPUSH
18888: LD_VAR 0 2
18892: PPUSH
18893: CALL 19040 0 2
// end ;
18897: GO 18678
18899: POP
18900: POP
// end ;
18901: PPOPN 2
18903: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
18904: LD_INT 0
18906: PPUSH
18907: PPUSH
18908: PPUSH
// if not hack in hackTanks then
18909: LD_VAR 0 1
18913: PUSH
18914: LD_EXP 63
18918: IN
18919: NOT
18920: IFFALSE 18924
// exit ;
18922: GO 19035
// index := GetElementIndex ( hackTanks , hack ) ;
18924: LD_ADDR_VAR 0 4
18928: PUSH
18929: LD_EXP 63
18933: PPUSH
18934: LD_VAR 0 1
18938: PPUSH
18939: CALL 26702 0 2
18943: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
18944: LD_EXP 64
18948: PUSH
18949: LD_VAR 0 4
18953: ARRAY
18954: IFFALSE 19035
// begin for i in hackTanksCaptured [ index ] do
18956: LD_ADDR_VAR 0 3
18960: PUSH
18961: LD_EXP 64
18965: PUSH
18966: LD_VAR 0 4
18970: ARRAY
18971: PUSH
18972: FOR_IN
18973: IFFALSE 18999
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
18975: LD_VAR 0 3
18979: PUSH
18980: LD_INT 1
18982: ARRAY
18983: PPUSH
18984: LD_VAR 0 3
18988: PUSH
18989: LD_INT 2
18991: ARRAY
18992: PPUSH
18993: CALL_OW 235
18997: GO 18972
18999: POP
19000: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
19001: LD_ADDR_EXP 64
19005: PUSH
19006: LD_EXP 64
19010: PPUSH
19011: LD_VAR 0 4
19015: PPUSH
19016: EMPTY
19017: PPUSH
19018: CALL_OW 1
19022: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
19023: LD_VAR 0 1
19027: PPUSH
19028: LD_INT 0
19030: PPUSH
19031: CALL_OW 505
// end ; end ;
19035: LD_VAR 0 2
19039: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
19040: LD_INT 0
19042: PPUSH
19043: PPUSH
19044: PPUSH
// if not hack in hackTanks or not vehicles then
19045: LD_VAR 0 1
19049: PUSH
19050: LD_EXP 63
19054: IN
19055: NOT
19056: IFTRUE 19065
19058: PUSH
19059: LD_VAR 0 2
19063: NOT
19064: OR
19065: IFFALSE 19069
// exit ;
19067: GO 19344
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
19069: LD_ADDR_VAR 0 2
19073: PUSH
19074: LD_VAR 0 1
19078: PPUSH
19079: LD_VAR 0 2
19083: PPUSH
19084: LD_INT 1
19086: PPUSH
19087: LD_INT 1
19089: PPUSH
19090: CALL 27354 0 4
19094: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
19095: LD_ADDR_VAR 0 5
19099: PUSH
19100: LD_EXP 63
19104: PPUSH
19105: LD_VAR 0 1
19109: PPUSH
19110: CALL 26702 0 2
19114: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19115: LD_EXP 64
19119: PUSH
19120: LD_VAR 0 5
19124: ARRAY
19125: PUSH
19126: LD_EXP 65
19130: LESS
19131: IFFALSE 19320
// begin for i := 1 to vehicles do
19133: LD_ADDR_VAR 0 4
19137: PUSH
19138: DOUBLE
19139: LD_INT 1
19141: DEC
19142: ST_TO_ADDR
19143: LD_VAR 0 2
19147: PUSH
19148: FOR_TO
19149: IFFALSE 19318
// begin if hackTanksCaptured [ index ] = hackLimit then
19151: LD_EXP 64
19155: PUSH
19156: LD_VAR 0 5
19160: ARRAY
19161: PUSH
19162: LD_EXP 65
19166: EQUAL
19167: IFFALSE 19171
// break ;
19169: GO 19318
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
19171: LD_ADDR_EXP 67
19175: PUSH
19176: LD_EXP 67
19180: PPUSH
19181: LD_VAR 0 5
19185: PPUSH
19186: LD_EXP 67
19190: PUSH
19191: LD_VAR 0 5
19195: ARRAY
19196: PUSH
19197: LD_INT 1
19199: PLUS
19200: PPUSH
19201: CALL_OW 1
19205: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
19206: LD_ADDR_EXP 64
19210: PUSH
19211: LD_EXP 64
19215: PPUSH
19216: LD_VAR 0 5
19220: PUSH
19221: LD_EXP 64
19225: PUSH
19226: LD_VAR 0 5
19230: ARRAY
19231: PUSH
19232: LD_INT 1
19234: PLUS
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: PPUSH
19240: LD_VAR 0 2
19244: PUSH
19245: LD_VAR 0 4
19249: ARRAY
19250: PUSH
19251: LD_VAR 0 2
19255: PUSH
19256: LD_VAR 0 4
19260: ARRAY
19261: PPUSH
19262: CALL_OW 255
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PPUSH
19271: CALL 26919 0 3
19275: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19276: LD_VAR 0 2
19280: PUSH
19281: LD_VAR 0 4
19285: ARRAY
19286: PPUSH
19287: LD_VAR 0 1
19291: PPUSH
19292: CALL_OW 255
19296: PPUSH
19297: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19301: LD_VAR 0 2
19305: PUSH
19306: LD_VAR 0 4
19310: ARRAY
19311: PPUSH
19312: CALL_OW 141
// end ;
19316: GO 19148
19318: POP
19319: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19320: LD_VAR 0 1
19324: PPUSH
19325: LD_EXP 64
19329: PUSH
19330: LD_VAR 0 5
19334: ARRAY
19335: PUSH
19336: LD_INT 0
19338: PLUS
19339: PPUSH
19340: CALL_OW 505
// end ;
19344: LD_VAR 0 3
19348: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19349: LD_INT 0
19351: PPUSH
19352: PPUSH
19353: PPUSH
19354: PPUSH
// if not hack in hackTanks then
19355: LD_VAR 0 1
19359: PUSH
19360: LD_EXP 63
19364: IN
19365: NOT
19366: IFFALSE 19370
// exit ;
19368: GO 19614
// index := GetElementIndex ( hackTanks , hack ) ;
19370: LD_ADDR_VAR 0 4
19374: PUSH
19375: LD_EXP 63
19379: PPUSH
19380: LD_VAR 0 1
19384: PPUSH
19385: CALL 26702 0 2
19389: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19390: LD_ADDR_VAR 0 3
19394: PUSH
19395: DOUBLE
19396: LD_EXP 64
19400: PUSH
19401: LD_VAR 0 4
19405: ARRAY
19406: INC
19407: ST_TO_ADDR
19408: LD_INT 1
19410: PUSH
19411: FOR_DOWNTO
19412: IFFALSE 19588
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19414: LD_ADDR_VAR 0 5
19418: PUSH
19419: LD_EXP 64
19423: PUSH
19424: LD_VAR 0 4
19428: ARRAY
19429: PUSH
19430: LD_VAR 0 3
19434: ARRAY
19435: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19436: LD_VAR 0 5
19440: PUSH
19441: LD_INT 1
19443: ARRAY
19444: PPUSH
19445: CALL_OW 302
19449: NOT
19450: IFTRUE 19478
19452: PUSH
19453: LD_VAR 0 5
19457: PUSH
19458: LD_INT 1
19460: ARRAY
19461: PPUSH
19462: CALL_OW 255
19466: PUSH
19467: LD_VAR 0 1
19471: PPUSH
19472: CALL_OW 255
19476: NONEQUAL
19477: OR
19478: IFFALSE 19586
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19480: LD_VAR 0 5
19484: PUSH
19485: LD_INT 1
19487: ARRAY
19488: PPUSH
19489: CALL_OW 305
19493: IFFALSE 19521
19495: PUSH
19496: LD_VAR 0 5
19500: PUSH
19501: LD_INT 1
19503: ARRAY
19504: PPUSH
19505: CALL_OW 255
19509: PUSH
19510: LD_VAR 0 1
19514: PPUSH
19515: CALL_OW 255
19519: EQUAL
19520: AND
19521: IFFALSE 19545
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19523: LD_VAR 0 5
19527: PUSH
19528: LD_INT 1
19530: ARRAY
19531: PPUSH
19532: LD_VAR 0 5
19536: PUSH
19537: LD_INT 2
19539: ARRAY
19540: PPUSH
19541: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19545: LD_ADDR_EXP 64
19549: PUSH
19550: LD_EXP 64
19554: PPUSH
19555: LD_VAR 0 4
19559: PPUSH
19560: LD_EXP 64
19564: PUSH
19565: LD_VAR 0 4
19569: ARRAY
19570: PPUSH
19571: LD_VAR 0 3
19575: PPUSH
19576: CALL_OW 3
19580: PPUSH
19581: CALL_OW 1
19585: ST_TO_ADDR
// end ; end ;
19586: GO 19411
19588: POP
19589: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19590: LD_VAR 0 1
19594: PPUSH
19595: LD_EXP 64
19599: PUSH
19600: LD_VAR 0 4
19604: ARRAY
19605: PUSH
19606: LD_INT 0
19608: PLUS
19609: PPUSH
19610: CALL_OW 505
// end ;
19614: LD_VAR 0 2
19618: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19619: LD_INT 0
19621: PPUSH
19622: PPUSH
19623: PPUSH
19624: PPUSH
// if not hack in hackTanks then
19625: LD_VAR 0 1
19629: PUSH
19630: LD_EXP 63
19634: IN
19635: NOT
19636: IFFALSE 19640
// exit ;
19638: GO 19725
// index := GetElementIndex ( hackTanks , hack ) ;
19640: LD_ADDR_VAR 0 5
19644: PUSH
19645: LD_EXP 63
19649: PPUSH
19650: LD_VAR 0 1
19654: PPUSH
19655: CALL 26702 0 2
19659: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19660: LD_ADDR_VAR 0 4
19664: PUSH
19665: DOUBLE
19666: LD_INT 1
19668: DEC
19669: ST_TO_ADDR
19670: LD_EXP 64
19674: PUSH
19675: LD_VAR 0 5
19679: ARRAY
19680: PUSH
19681: FOR_TO
19682: IFFALSE 19723
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19684: LD_EXP 64
19688: PUSH
19689: LD_VAR 0 5
19693: ARRAY
19694: PUSH
19695: LD_VAR 0 4
19699: ARRAY
19700: PUSH
19701: LD_INT 1
19703: ARRAY
19704: PUSH
19705: LD_VAR 0 2
19709: EQUAL
19710: IFFALSE 19721
// KillUnit ( vehicle ) ;
19712: LD_VAR 0 2
19716: PPUSH
19717: CALL_OW 66
19721: GO 19681
19723: POP
19724: POP
// end ;
19725: LD_VAR 0 3
19729: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
19730: LD_EXP 68
19734: NOT
19735: IFFALSE 19770
19737: GO 19739
19739: DISABLE
// begin initMiner := true ;
19740: LD_ADDR_EXP 68
19744: PUSH
19745: LD_INT 1
19747: ST_TO_ADDR
// minersList := [ ] ;
19748: LD_ADDR_EXP 69
19752: PUSH
19753: EMPTY
19754: ST_TO_ADDR
// minerMinesList := [ ] ;
19755: LD_ADDR_EXP 70
19759: PUSH
19760: EMPTY
19761: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
19762: LD_ADDR_EXP 71
19766: PUSH
19767: LD_INT 5
19769: ST_TO_ADDR
// end ;
19770: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
19771: LD_EXP 68
19775: IFFALSE 19793
19777: PUSH
19778: LD_INT 34
19780: PUSH
19781: LD_INT 81
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: PPUSH
19788: CALL_OW 69
19792: AND
19793: IFFALSE 20256
19795: GO 19797
19797: DISABLE
19798: LD_INT 0
19800: PPUSH
19801: PPUSH
19802: PPUSH
19803: PPUSH
// begin enable ;
19804: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
19805: LD_ADDR_VAR 0 1
19809: PUSH
19810: LD_INT 34
19812: PUSH
19813: LD_INT 81
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: PPUSH
19820: CALL_OW 69
19824: PUSH
19825: FOR_IN
19826: IFFALSE 19898
// begin if not i in minersList then
19828: LD_VAR 0 1
19832: PUSH
19833: LD_EXP 69
19837: IN
19838: NOT
19839: IFFALSE 19896
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
19841: LD_ADDR_EXP 69
19845: PUSH
19846: LD_EXP 69
19850: PPUSH
19851: LD_EXP 69
19855: PUSH
19856: LD_INT 1
19858: PLUS
19859: PPUSH
19860: LD_VAR 0 1
19864: PPUSH
19865: CALL_OW 1
19869: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
19870: LD_ADDR_EXP 70
19874: PUSH
19875: LD_EXP 70
19879: PPUSH
19880: LD_EXP 70
19884: PUSH
19885: LD_INT 1
19887: PLUS
19888: PPUSH
19889: EMPTY
19890: PPUSH
19891: CALL_OW 1
19895: ST_TO_ADDR
// end end ;
19896: GO 19825
19898: POP
19899: POP
// for i := minerMinesList downto 1 do
19900: LD_ADDR_VAR 0 1
19904: PUSH
19905: DOUBLE
19906: LD_EXP 70
19910: INC
19911: ST_TO_ADDR
19912: LD_INT 1
19914: PUSH
19915: FOR_DOWNTO
19916: IFFALSE 20254
// begin if IsLive ( minersList [ i ] ) then
19918: LD_EXP 69
19922: PUSH
19923: LD_VAR 0 1
19927: ARRAY
19928: PPUSH
19929: CALL_OW 300
19933: IFFALSE 19961
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
19935: LD_EXP 69
19939: PUSH
19940: LD_VAR 0 1
19944: ARRAY
19945: PPUSH
19946: LD_EXP 70
19950: PUSH
19951: LD_VAR 0 1
19955: ARRAY
19956: PPUSH
19957: CALL_OW 505
// if not minerMinesList [ i ] then
19961: LD_EXP 70
19965: PUSH
19966: LD_VAR 0 1
19970: ARRAY
19971: NOT
19972: IFFALSE 19976
// continue ;
19974: GO 19915
// for j := minerMinesList [ i ] downto 1 do
19976: LD_ADDR_VAR 0 2
19980: PUSH
19981: DOUBLE
19982: LD_EXP 70
19986: PUSH
19987: LD_VAR 0 1
19991: ARRAY
19992: INC
19993: ST_TO_ADDR
19994: LD_INT 1
19996: PUSH
19997: FOR_DOWNTO
19998: IFFALSE 20250
// begin side := GetSide ( minersList [ i ] ) ;
20000: LD_ADDR_VAR 0 3
20004: PUSH
20005: LD_EXP 69
20009: PUSH
20010: LD_VAR 0 1
20014: ARRAY
20015: PPUSH
20016: CALL_OW 255
20020: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
20021: LD_ADDR_VAR 0 4
20025: PUSH
20026: LD_EXP 70
20030: PUSH
20031: LD_VAR 0 1
20035: ARRAY
20036: PUSH
20037: LD_VAR 0 2
20041: ARRAY
20042: PUSH
20043: LD_INT 1
20045: ARRAY
20046: PPUSH
20047: LD_EXP 70
20051: PUSH
20052: LD_VAR 0 1
20056: ARRAY
20057: PUSH
20058: LD_VAR 0 2
20062: ARRAY
20063: PUSH
20064: LD_INT 2
20066: ARRAY
20067: PPUSH
20068: CALL_OW 428
20072: ST_TO_ADDR
// if not tmp then
20073: LD_VAR 0 4
20077: NOT
20078: IFFALSE 20082
// continue ;
20080: GO 19997
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
20082: LD_VAR 0 4
20086: PUSH
20087: LD_INT 81
20089: PUSH
20090: LD_VAR 0 3
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: PPUSH
20099: CALL_OW 69
20103: IN
20104: IFFALSE 20154
20106: PUSH
20107: LD_EXP 70
20111: PUSH
20112: LD_VAR 0 1
20116: ARRAY
20117: PUSH
20118: LD_VAR 0 2
20122: ARRAY
20123: PUSH
20124: LD_INT 1
20126: ARRAY
20127: PPUSH
20128: LD_EXP 70
20132: PUSH
20133: LD_VAR 0 1
20137: ARRAY
20138: PUSH
20139: LD_VAR 0 2
20143: ARRAY
20144: PUSH
20145: LD_INT 2
20147: ARRAY
20148: PPUSH
20149: CALL_OW 458
20153: AND
20154: IFFALSE 20248
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
20156: LD_EXP 70
20160: PUSH
20161: LD_VAR 0 1
20165: ARRAY
20166: PUSH
20167: LD_VAR 0 2
20171: ARRAY
20172: PUSH
20173: LD_INT 1
20175: ARRAY
20176: PPUSH
20177: LD_EXP 70
20181: PUSH
20182: LD_VAR 0 1
20186: ARRAY
20187: PUSH
20188: LD_VAR 0 2
20192: ARRAY
20193: PUSH
20194: LD_INT 2
20196: ARRAY
20197: PPUSH
20198: LD_VAR 0 3
20202: PPUSH
20203: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
20207: LD_ADDR_EXP 70
20211: PUSH
20212: LD_EXP 70
20216: PPUSH
20217: LD_VAR 0 1
20221: PPUSH
20222: LD_EXP 70
20226: PUSH
20227: LD_VAR 0 1
20231: ARRAY
20232: PPUSH
20233: LD_VAR 0 2
20237: PPUSH
20238: CALL_OW 3
20242: PPUSH
20243: CALL_OW 1
20247: ST_TO_ADDR
// end ; end ;
20248: GO 19997
20250: POP
20251: POP
// end ;
20252: GO 19915
20254: POP
20255: POP
// end ;
20256: PPOPN 4
20258: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
20259: LD_INT 0
20261: PPUSH
20262: PPUSH
// result := false ;
20263: LD_ADDR_VAR 0 4
20267: PUSH
20268: LD_INT 0
20270: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
20271: LD_VAR 0 1
20275: PPUSH
20276: CALL_OW 264
20280: PUSH
20281: LD_INT 81
20283: EQUAL
20284: NOT
20285: IFFALSE 20289
// exit ;
20287: GO 20533
// index := GetElementIndex ( minersList , unit ) ;
20289: LD_ADDR_VAR 0 5
20293: PUSH
20294: LD_EXP 69
20298: PPUSH
20299: LD_VAR 0 1
20303: PPUSH
20304: CALL 26702 0 2
20308: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
20309: LD_EXP 70
20313: PUSH
20314: LD_VAR 0 5
20318: ARRAY
20319: PUSH
20320: LD_EXP 71
20324: GREATEREQUAL
20325: IFFALSE 20329
// exit ;
20327: GO 20533
// ComMoveXY ( unit , x , y ) ;
20329: LD_VAR 0 1
20333: PPUSH
20334: LD_VAR 0 2
20338: PPUSH
20339: LD_VAR 0 3
20343: PPUSH
20344: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20348: LD_INT 35
20350: PPUSH
20351: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
20355: LD_VAR 0 1
20359: PPUSH
20360: LD_VAR 0 2
20364: PPUSH
20365: LD_VAR 0 3
20369: PPUSH
20370: CALL 58748 0 3
20374: NOT
20375: IFFALSE 20388
20377: PUSH
20378: LD_VAR 0 1
20382: PPUSH
20383: CALL_OW 314
20387: AND
20388: IFFALSE 20392
// exit ;
20390: GO 20533
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20392: LD_VAR 0 2
20396: PPUSH
20397: LD_VAR 0 3
20401: PPUSH
20402: CALL_OW 428
20406: PUSH
20407: LD_VAR 0 1
20411: EQUAL
20412: IFFALSE 20426
20414: PUSH
20415: LD_VAR 0 1
20419: PPUSH
20420: CALL_OW 314
20424: NOT
20425: AND
20426: IFFALSE 20348
// PlaySoundXY ( x , y , PlantMine ) ;
20428: LD_VAR 0 2
20432: PPUSH
20433: LD_VAR 0 3
20437: PPUSH
20438: LD_STRING PlantMine
20440: PPUSH
20441: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20445: LD_VAR 0 2
20449: PPUSH
20450: LD_VAR 0 3
20454: PPUSH
20455: LD_VAR 0 1
20459: PPUSH
20460: CALL_OW 255
20464: PPUSH
20465: LD_INT 0
20467: PPUSH
20468: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20472: LD_ADDR_EXP 70
20476: PUSH
20477: LD_EXP 70
20481: PPUSH
20482: LD_VAR 0 5
20486: PUSH
20487: LD_EXP 70
20491: PUSH
20492: LD_VAR 0 5
20496: ARRAY
20497: PUSH
20498: LD_INT 1
20500: PLUS
20501: PUSH
20502: EMPTY
20503: LIST
20504: LIST
20505: PPUSH
20506: LD_VAR 0 2
20510: PUSH
20511: LD_VAR 0 3
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: PPUSH
20520: CALL 26919 0 3
20524: ST_TO_ADDR
// result := true ;
20525: LD_ADDR_VAR 0 4
20529: PUSH
20530: LD_INT 1
20532: ST_TO_ADDR
// end ;
20533: LD_VAR 0 4
20537: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20538: LD_INT 0
20540: PPUSH
20541: PPUSH
20542: PPUSH
// if not unit in minersList then
20543: LD_VAR 0 1
20547: PUSH
20548: LD_EXP 69
20552: IN
20553: NOT
20554: IFFALSE 20558
// exit ;
20556: GO 20952
// index := GetElementIndex ( minersList , unit ) ;
20558: LD_ADDR_VAR 0 6
20562: PUSH
20563: LD_EXP 69
20567: PPUSH
20568: LD_VAR 0 1
20572: PPUSH
20573: CALL 26702 0 2
20577: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20578: LD_ADDR_VAR 0 5
20582: PUSH
20583: DOUBLE
20584: LD_EXP 70
20588: PUSH
20589: LD_VAR 0 6
20593: ARRAY
20594: INC
20595: ST_TO_ADDR
20596: LD_INT 1
20598: PUSH
20599: FOR_DOWNTO
20600: IFFALSE 20763
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20602: LD_EXP 70
20606: PUSH
20607: LD_VAR 0 6
20611: ARRAY
20612: PUSH
20613: LD_VAR 0 5
20617: ARRAY
20618: PUSH
20619: LD_INT 1
20621: ARRAY
20622: PUSH
20623: LD_VAR 0 2
20627: EQUAL
20628: IFFALSE 20658
20630: PUSH
20631: LD_EXP 70
20635: PUSH
20636: LD_VAR 0 6
20640: ARRAY
20641: PUSH
20642: LD_VAR 0 5
20646: ARRAY
20647: PUSH
20648: LD_INT 2
20650: ARRAY
20651: PUSH
20652: LD_VAR 0 3
20656: EQUAL
20657: AND
20658: IFFALSE 20761
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20660: LD_EXP 70
20664: PUSH
20665: LD_VAR 0 6
20669: ARRAY
20670: PUSH
20671: LD_VAR 0 5
20675: ARRAY
20676: PUSH
20677: LD_INT 1
20679: ARRAY
20680: PPUSH
20681: LD_EXP 70
20685: PUSH
20686: LD_VAR 0 6
20690: ARRAY
20691: PUSH
20692: LD_VAR 0 5
20696: ARRAY
20697: PUSH
20698: LD_INT 2
20700: ARRAY
20701: PPUSH
20702: LD_VAR 0 1
20706: PPUSH
20707: CALL_OW 255
20711: PPUSH
20712: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20716: LD_ADDR_EXP 70
20720: PUSH
20721: LD_EXP 70
20725: PPUSH
20726: LD_VAR 0 6
20730: PPUSH
20731: LD_EXP 70
20735: PUSH
20736: LD_VAR 0 6
20740: ARRAY
20741: PPUSH
20742: LD_VAR 0 5
20746: PPUSH
20747: CALL_OW 3
20751: PPUSH
20752: CALL_OW 1
20756: ST_TO_ADDR
// exit ;
20757: POP
20758: POP
20759: GO 20952
// end ; end ;
20761: GO 20599
20763: POP
20764: POP
// for i := minerMinesList [ index ] downto 1 do
20765: LD_ADDR_VAR 0 5
20769: PUSH
20770: DOUBLE
20771: LD_EXP 70
20775: PUSH
20776: LD_VAR 0 6
20780: ARRAY
20781: INC
20782: ST_TO_ADDR
20783: LD_INT 1
20785: PUSH
20786: FOR_DOWNTO
20787: IFFALSE 20950
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
20789: LD_EXP 70
20793: PUSH
20794: LD_VAR 0 6
20798: ARRAY
20799: PUSH
20800: LD_VAR 0 5
20804: ARRAY
20805: PUSH
20806: LD_INT 1
20808: ARRAY
20809: PPUSH
20810: LD_EXP 70
20814: PUSH
20815: LD_VAR 0 6
20819: ARRAY
20820: PUSH
20821: LD_VAR 0 5
20825: ARRAY
20826: PUSH
20827: LD_INT 2
20829: ARRAY
20830: PPUSH
20831: LD_VAR 0 2
20835: PPUSH
20836: LD_VAR 0 3
20840: PPUSH
20841: CALL_OW 298
20845: PUSH
20846: LD_INT 6
20848: LESS
20849: IFFALSE 20948
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20851: LD_EXP 70
20855: PUSH
20856: LD_VAR 0 6
20860: ARRAY
20861: PUSH
20862: LD_VAR 0 5
20866: ARRAY
20867: PUSH
20868: LD_INT 1
20870: ARRAY
20871: PPUSH
20872: LD_EXP 70
20876: PUSH
20877: LD_VAR 0 6
20881: ARRAY
20882: PUSH
20883: LD_VAR 0 5
20887: ARRAY
20888: PUSH
20889: LD_INT 2
20891: ARRAY
20892: PPUSH
20893: LD_VAR 0 1
20897: PPUSH
20898: CALL_OW 255
20902: PPUSH
20903: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20907: LD_ADDR_EXP 70
20911: PUSH
20912: LD_EXP 70
20916: PPUSH
20917: LD_VAR 0 6
20921: PPUSH
20922: LD_EXP 70
20926: PUSH
20927: LD_VAR 0 6
20931: ARRAY
20932: PPUSH
20933: LD_VAR 0 5
20937: PPUSH
20938: CALL_OW 3
20942: PPUSH
20943: CALL_OW 1
20947: ST_TO_ADDR
// end ; end ;
20948: GO 20786
20950: POP
20951: POP
// end ;
20952: LD_VAR 0 4
20956: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
20957: LD_INT 0
20959: PPUSH
20960: PPUSH
20961: PPUSH
20962: PPUSH
20963: PPUSH
20964: PPUSH
20965: PPUSH
20966: PPUSH
20967: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
20968: LD_VAR 0 1
20972: PPUSH
20973: CALL_OW 264
20977: PUSH
20978: LD_INT 81
20980: EQUAL
20981: NOT
20982: IFTRUE 20997
20984: PUSH
20985: LD_VAR 0 1
20989: PUSH
20990: LD_EXP 69
20994: IN
20995: NOT
20996: OR
20997: IFFALSE 21001
// exit ;
20999: GO 21327
// index := GetElementIndex ( minersList , unit ) ;
21001: LD_ADDR_VAR 0 6
21005: PUSH
21006: LD_EXP 69
21010: PPUSH
21011: LD_VAR 0 1
21015: PPUSH
21016: CALL 26702 0 2
21020: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
21021: LD_ADDR_VAR 0 8
21025: PUSH
21026: LD_EXP 71
21030: PUSH
21031: LD_EXP 70
21035: PUSH
21036: LD_VAR 0 6
21040: ARRAY
21041: MINUS
21042: ST_TO_ADDR
// if not minesFreeAmount then
21043: LD_VAR 0 8
21047: NOT
21048: IFFALSE 21052
// exit ;
21050: GO 21327
// tmp := [ ] ;
21052: LD_ADDR_VAR 0 7
21056: PUSH
21057: EMPTY
21058: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
21059: LD_ADDR_VAR 0 5
21063: PUSH
21064: DOUBLE
21065: LD_INT 1
21067: DEC
21068: ST_TO_ADDR
21069: LD_VAR 0 8
21073: PUSH
21074: FOR_TO
21075: IFFALSE 21274
// begin _d := rand ( 0 , 5 ) ;
21077: LD_ADDR_VAR 0 11
21081: PUSH
21082: LD_INT 0
21084: PPUSH
21085: LD_INT 5
21087: PPUSH
21088: CALL_OW 12
21092: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
21093: LD_ADDR_VAR 0 12
21097: PUSH
21098: LD_INT 2
21100: PPUSH
21101: LD_INT 6
21103: PPUSH
21104: CALL_OW 12
21108: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
21109: LD_ADDR_VAR 0 9
21113: PUSH
21114: LD_VAR 0 2
21118: PPUSH
21119: LD_VAR 0 11
21123: PPUSH
21124: LD_VAR 0 12
21128: PPUSH
21129: CALL_OW 272
21133: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
21134: LD_ADDR_VAR 0 10
21138: PUSH
21139: LD_VAR 0 3
21143: PPUSH
21144: LD_VAR 0 11
21148: PPUSH
21149: LD_VAR 0 12
21153: PPUSH
21154: CALL_OW 273
21158: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
21159: LD_VAR 0 9
21163: PPUSH
21164: LD_VAR 0 10
21168: PPUSH
21169: CALL_OW 488
21173: IFFALSE 21197
21175: PUSH
21176: LD_VAR 0 9
21180: PUSH
21181: LD_VAR 0 10
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: PUSH
21190: LD_VAR 0 7
21194: IN
21195: NOT
21196: AND
21197: IFFALSE 21216
21199: PUSH
21200: LD_VAR 0 9
21204: PPUSH
21205: LD_VAR 0 10
21209: PPUSH
21210: CALL_OW 458
21214: NOT
21215: AND
21216: IFFALSE 21258
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
21218: LD_ADDR_VAR 0 7
21222: PUSH
21223: LD_VAR 0 7
21227: PPUSH
21228: LD_VAR 0 7
21232: PUSH
21233: LD_INT 1
21235: PLUS
21236: PPUSH
21237: LD_VAR 0 9
21241: PUSH
21242: LD_VAR 0 10
21246: PUSH
21247: EMPTY
21248: LIST
21249: LIST
21250: PPUSH
21251: CALL_OW 1
21255: ST_TO_ADDR
21256: GO 21272
// i := i - 1 ;
21258: LD_ADDR_VAR 0 5
21262: PUSH
21263: LD_VAR 0 5
21267: PUSH
21268: LD_INT 1
21270: MINUS
21271: ST_TO_ADDR
// end ;
21272: GO 21074
21274: POP
21275: POP
// for i in tmp do
21276: LD_ADDR_VAR 0 5
21280: PUSH
21281: LD_VAR 0 7
21285: PUSH
21286: FOR_IN
21287: IFFALSE 21325
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
21289: LD_VAR 0 1
21293: PPUSH
21294: LD_VAR 0 5
21298: PUSH
21299: LD_INT 1
21301: ARRAY
21302: PPUSH
21303: LD_VAR 0 5
21307: PUSH
21308: LD_INT 2
21310: ARRAY
21311: PPUSH
21312: CALL 20259 0 3
21316: NOT
21317: IFFALSE 21323
// exit ;
21319: POP
21320: POP
21321: GO 21327
21323: GO 21286
21325: POP
21326: POP
// end ;
21327: LD_VAR 0 4
21331: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
21332: LD_INT 0
21334: PPUSH
21335: PPUSH
21336: PPUSH
21337: PPUSH
21338: PPUSH
21339: PPUSH
21340: PPUSH
21341: PPUSH
21342: PPUSH
// if GetClass ( unit ) <> class_sniper then
21343: LD_VAR 0 1
21347: PPUSH
21348: CALL_OW 257
21352: PUSH
21353: LD_INT 5
21355: NONEQUAL
21356: IFFALSE 21360
// exit ;
21358: GO 21830
// dist := 8 ;
21360: LD_ADDR_VAR 0 5
21364: PUSH
21365: LD_INT 8
21367: ST_TO_ADDR
// viewRange := 12 ;
21368: LD_ADDR_VAR 0 8
21372: PUSH
21373: LD_INT 12
21375: ST_TO_ADDR
// side := GetSide ( unit ) ;
21376: LD_ADDR_VAR 0 6
21380: PUSH
21381: LD_VAR 0 1
21385: PPUSH
21386: CALL_OW 255
21390: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
21391: LD_INT 61
21393: PPUSH
21394: LD_VAR 0 6
21398: PPUSH
21399: CALL_OW 321
21403: PUSH
21404: LD_INT 2
21406: EQUAL
21407: IFFALSE 21417
// viewRange := 16 ;
21409: LD_ADDR_VAR 0 8
21413: PUSH
21414: LD_INT 16
21416: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
21417: LD_VAR 0 1
21421: PPUSH
21422: LD_VAR 0 2
21426: PPUSH
21427: LD_VAR 0 3
21431: PPUSH
21432: CALL_OW 297
21436: PUSH
21437: LD_VAR 0 5
21441: GREATER
21442: IFFALSE 21521
// begin ComMoveXY ( unit , x , y ) ;
21444: LD_VAR 0 1
21448: PPUSH
21449: LD_VAR 0 2
21453: PPUSH
21454: LD_VAR 0 3
21458: PPUSH
21459: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21463: LD_INT 35
21465: PPUSH
21466: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21470: LD_VAR 0 1
21474: PPUSH
21475: LD_VAR 0 2
21479: PPUSH
21480: LD_VAR 0 3
21484: PPUSH
21485: CALL 58748 0 3
21489: NOT
21490: IFFALSE 21494
// exit ;
21492: GO 21830
// until GetDistUnitXY ( unit , x , y ) < dist ;
21494: LD_VAR 0 1
21498: PPUSH
21499: LD_VAR 0 2
21503: PPUSH
21504: LD_VAR 0 3
21508: PPUSH
21509: CALL_OW 297
21513: PUSH
21514: LD_VAR 0 5
21518: LESS
21519: IFFALSE 21463
// end ; ComTurnXY ( unit , x , y ) ;
21521: LD_VAR 0 1
21525: PPUSH
21526: LD_VAR 0 2
21530: PPUSH
21531: LD_VAR 0 3
21535: PPUSH
21536: CALL_OW 118
// repeat if Multiplayer then
21540: LD_OWVAR 4
21544: IFFALSE 21555
// wait ( 35 ) else
21546: LD_INT 35
21548: PPUSH
21549: CALL_OW 67
21553: GO 21562
// wait ( 5 ) ;
21555: LD_INT 5
21557: PPUSH
21558: CALL_OW 67
// _d := GetDir ( unit ) ;
21562: LD_ADDR_VAR 0 11
21566: PUSH
21567: LD_VAR 0 1
21571: PPUSH
21572: CALL_OW 254
21576: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
21577: LD_ADDR_VAR 0 7
21581: PUSH
21582: LD_VAR 0 1
21586: PPUSH
21587: CALL_OW 250
21591: PPUSH
21592: LD_VAR 0 1
21596: PPUSH
21597: CALL_OW 251
21601: PPUSH
21602: LD_VAR 0 2
21606: PPUSH
21607: LD_VAR 0 3
21611: PPUSH
21612: CALL 61384 0 4
21616: ST_TO_ADDR
// until dir = _d ;
21617: LD_VAR 0 7
21621: PUSH
21622: LD_VAR 0 11
21626: EQUAL
21627: IFFALSE 21540
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
21629: LD_ADDR_VAR 0 9
21633: PUSH
21634: LD_VAR 0 1
21638: PPUSH
21639: CALL_OW 250
21643: PPUSH
21644: LD_VAR 0 7
21648: PPUSH
21649: LD_VAR 0 5
21653: PPUSH
21654: CALL_OW 272
21658: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
21659: LD_ADDR_VAR 0 10
21663: PUSH
21664: LD_VAR 0 1
21668: PPUSH
21669: CALL_OW 251
21673: PPUSH
21674: LD_VAR 0 7
21678: PPUSH
21679: LD_VAR 0 5
21683: PPUSH
21684: CALL_OW 273
21688: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21689: LD_VAR 0 9
21693: PPUSH
21694: LD_VAR 0 10
21698: PPUSH
21699: CALL_OW 488
21703: NOT
21704: IFFALSE 21708
// exit ;
21706: GO 21830
// ComAnimCustom ( unit , 1 ) ;
21708: LD_VAR 0 1
21712: PPUSH
21713: LD_INT 1
21715: PPUSH
21716: CALL_OW 592
// p := 0 ;
21720: LD_ADDR_VAR 0 12
21724: PUSH
21725: LD_INT 0
21727: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
21728: LD_VAR 0 9
21732: PPUSH
21733: LD_VAR 0 10
21737: PPUSH
21738: LD_VAR 0 6
21742: PPUSH
21743: LD_VAR 0 8
21747: PPUSH
21748: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
21752: LD_INT 35
21754: PPUSH
21755: CALL_OW 67
// p := Inc ( p ) ;
21759: LD_ADDR_VAR 0 12
21763: PUSH
21764: LD_VAR 0 12
21768: PPUSH
21769: CALL 61340 0 1
21773: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
21774: LD_VAR 0 12
21778: PUSH
21779: LD_INT 3
21781: EQUAL
21782: IFTRUE 21796
21784: PUSH
21785: LD_VAR 0 1
21789: PPUSH
21790: CALL_OW 302
21794: NOT
21795: OR
21796: IFTRUE 21809
21798: PUSH
21799: LD_VAR 0 1
21803: PPUSH
21804: CALL_OW 301
21808: OR
21809: IFFALSE 21752
// RemoveSeeing ( _x , _y , side ) ;
21811: LD_VAR 0 9
21815: PPUSH
21816: LD_VAR 0 10
21820: PPUSH
21821: LD_VAR 0 6
21825: PPUSH
21826: CALL_OW 331
// end ; end_of_file
21830: LD_VAR 0 4
21834: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21835: LD_INT 0
21837: PPUSH
21838: PPUSH
// if exist_mode then
21839: LD_VAR 0 2
21843: IFFALSE 21889
// begin unit := CreateCharacter ( prefix & ident ) ;
21845: LD_ADDR_VAR 0 5
21849: PUSH
21850: LD_VAR 0 3
21854: PUSH
21855: LD_VAR 0 1
21859: STR
21860: PPUSH
21861: CALL_OW 34
21865: ST_TO_ADDR
// if unit then
21866: LD_VAR 0 5
21870: IFFALSE 21887
// DeleteCharacters ( prefix & ident ) ;
21872: LD_VAR 0 3
21876: PUSH
21877: LD_VAR 0 1
21881: STR
21882: PPUSH
21883: CALL_OW 40
// end else
21887: GO 21904
// unit := NewCharacter ( ident ) ;
21889: LD_ADDR_VAR 0 5
21893: PUSH
21894: LD_VAR 0 1
21898: PPUSH
21899: CALL_OW 25
21903: ST_TO_ADDR
// result := unit ;
21904: LD_ADDR_VAR 0 4
21908: PUSH
21909: LD_VAR 0 5
21913: ST_TO_ADDR
// end ;
21914: LD_VAR 0 4
21918: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
21919: LD_INT 0
21921: PPUSH
21922: PPUSH
// if exist_mode then
21923: LD_VAR 0 2
21927: IFFALSE 21952
// unit := CreateCharacter ( prefix & ident ) else
21929: LD_ADDR_VAR 0 5
21933: PUSH
21934: LD_VAR 0 3
21938: PUSH
21939: LD_VAR 0 1
21943: STR
21944: PPUSH
21945: CALL_OW 34
21949: ST_TO_ADDR
21950: GO 21967
// unit := NewCharacter ( ident ) ;
21952: LD_ADDR_VAR 0 5
21956: PUSH
21957: LD_VAR 0 1
21961: PPUSH
21962: CALL_OW 25
21966: ST_TO_ADDR
// result := unit ;
21967: LD_ADDR_VAR 0 4
21971: PUSH
21972: LD_VAR 0 5
21976: ST_TO_ADDR
// end ;
21977: LD_VAR 0 4
21981: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21982: LD_INT 0
21984: PPUSH
21985: PPUSH
// if not side or not nation then
21986: LD_VAR 0 1
21990: NOT
21991: IFTRUE 22000
21993: PUSH
21994: LD_VAR 0 2
21998: NOT
21999: OR
22000: IFFALSE 22004
// exit ;
22002: GO 22774
// case nation of nation_american :
22004: LD_VAR 0 2
22008: PUSH
22009: LD_INT 1
22011: DOUBLE
22012: EQUAL
22013: IFTRUE 22017
22015: GO 22231
22017: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
22018: LD_ADDR_VAR 0 4
22022: PUSH
22023: LD_INT 35
22025: PUSH
22026: LD_INT 45
22028: PUSH
22029: LD_INT 46
22031: PUSH
22032: LD_INT 47
22034: PUSH
22035: LD_INT 82
22037: PUSH
22038: LD_INT 83
22040: PUSH
22041: LD_INT 84
22043: PUSH
22044: LD_INT 85
22046: PUSH
22047: LD_INT 86
22049: PUSH
22050: LD_INT 1
22052: PUSH
22053: LD_INT 2
22055: PUSH
22056: LD_INT 6
22058: PUSH
22059: LD_INT 15
22061: PUSH
22062: LD_INT 16
22064: PUSH
22065: LD_INT 7
22067: PUSH
22068: LD_INT 12
22070: PUSH
22071: LD_INT 13
22073: PUSH
22074: LD_INT 10
22076: PUSH
22077: LD_INT 14
22079: PUSH
22080: LD_INT 20
22082: PUSH
22083: LD_INT 21
22085: PUSH
22086: LD_INT 22
22088: PUSH
22089: LD_INT 25
22091: PUSH
22092: LD_INT 32
22094: PUSH
22095: LD_INT 27
22097: PUSH
22098: LD_INT 36
22100: PUSH
22101: LD_INT 69
22103: PUSH
22104: LD_INT 39
22106: PUSH
22107: LD_INT 34
22109: PUSH
22110: LD_INT 40
22112: PUSH
22113: LD_INT 48
22115: PUSH
22116: LD_INT 49
22118: PUSH
22119: LD_INT 50
22121: PUSH
22122: LD_INT 51
22124: PUSH
22125: LD_INT 52
22127: PUSH
22128: LD_INT 53
22130: PUSH
22131: LD_INT 54
22133: PUSH
22134: LD_INT 55
22136: PUSH
22137: LD_INT 56
22139: PUSH
22140: LD_INT 57
22142: PUSH
22143: LD_INT 58
22145: PUSH
22146: LD_INT 59
22148: PUSH
22149: LD_INT 60
22151: PUSH
22152: LD_INT 61
22154: PUSH
22155: LD_INT 62
22157: PUSH
22158: LD_INT 80
22160: PUSH
22161: LD_INT 82
22163: PUSH
22164: LD_INT 83
22166: PUSH
22167: LD_INT 84
22169: PUSH
22170: LD_INT 85
22172: PUSH
22173: LD_INT 86
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: ST_TO_ADDR
22229: GO 22696
22231: LD_INT 2
22233: DOUBLE
22234: EQUAL
22235: IFTRUE 22239
22237: GO 22465
22239: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
22240: LD_ADDR_VAR 0 4
22244: PUSH
22245: LD_INT 35
22247: PUSH
22248: LD_INT 45
22250: PUSH
22251: LD_INT 46
22253: PUSH
22254: LD_INT 47
22256: PUSH
22257: LD_INT 82
22259: PUSH
22260: LD_INT 83
22262: PUSH
22263: LD_INT 84
22265: PUSH
22266: LD_INT 85
22268: PUSH
22269: LD_INT 87
22271: PUSH
22272: LD_INT 70
22274: PUSH
22275: LD_INT 1
22277: PUSH
22278: LD_INT 11
22280: PUSH
22281: LD_INT 3
22283: PUSH
22284: LD_INT 4
22286: PUSH
22287: LD_INT 5
22289: PUSH
22290: LD_INT 6
22292: PUSH
22293: LD_INT 15
22295: PUSH
22296: LD_INT 18
22298: PUSH
22299: LD_INT 7
22301: PUSH
22302: LD_INT 17
22304: PUSH
22305: LD_INT 8
22307: PUSH
22308: LD_INT 20
22310: PUSH
22311: LD_INT 21
22313: PUSH
22314: LD_INT 22
22316: PUSH
22317: LD_INT 72
22319: PUSH
22320: LD_INT 26
22322: PUSH
22323: LD_INT 69
22325: PUSH
22326: LD_INT 39
22328: PUSH
22329: LD_INT 40
22331: PUSH
22332: LD_INT 41
22334: PUSH
22335: LD_INT 42
22337: PUSH
22338: LD_INT 43
22340: PUSH
22341: LD_INT 48
22343: PUSH
22344: LD_INT 49
22346: PUSH
22347: LD_INT 50
22349: PUSH
22350: LD_INT 51
22352: PUSH
22353: LD_INT 52
22355: PUSH
22356: LD_INT 53
22358: PUSH
22359: LD_INT 54
22361: PUSH
22362: LD_INT 55
22364: PUSH
22365: LD_INT 56
22367: PUSH
22368: LD_INT 60
22370: PUSH
22371: LD_INT 61
22373: PUSH
22374: LD_INT 62
22376: PUSH
22377: LD_INT 66
22379: PUSH
22380: LD_INT 67
22382: PUSH
22383: LD_INT 68
22385: PUSH
22386: LD_INT 81
22388: PUSH
22389: LD_INT 82
22391: PUSH
22392: LD_INT 83
22394: PUSH
22395: LD_INT 84
22397: PUSH
22398: LD_INT 85
22400: PUSH
22401: LD_INT 87
22403: PUSH
22404: LD_INT 88
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: LIST
22411: LIST
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: ST_TO_ADDR
22463: GO 22696
22465: LD_INT 3
22467: DOUBLE
22468: EQUAL
22469: IFTRUE 22473
22471: GO 22695
22473: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22474: LD_ADDR_VAR 0 4
22478: PUSH
22479: LD_INT 46
22481: PUSH
22482: LD_INT 47
22484: PUSH
22485: LD_INT 1
22487: PUSH
22488: LD_INT 2
22490: PUSH
22491: LD_INT 82
22493: PUSH
22494: LD_INT 83
22496: PUSH
22497: LD_INT 84
22499: PUSH
22500: LD_INT 85
22502: PUSH
22503: LD_INT 86
22505: PUSH
22506: LD_INT 11
22508: PUSH
22509: LD_INT 9
22511: PUSH
22512: LD_INT 20
22514: PUSH
22515: LD_INT 19
22517: PUSH
22518: LD_INT 21
22520: PUSH
22521: LD_INT 24
22523: PUSH
22524: LD_INT 22
22526: PUSH
22527: LD_INT 25
22529: PUSH
22530: LD_INT 28
22532: PUSH
22533: LD_INT 29
22535: PUSH
22536: LD_INT 30
22538: PUSH
22539: LD_INT 31
22541: PUSH
22542: LD_INT 37
22544: PUSH
22545: LD_INT 38
22547: PUSH
22548: LD_INT 32
22550: PUSH
22551: LD_INT 27
22553: PUSH
22554: LD_INT 33
22556: PUSH
22557: LD_INT 69
22559: PUSH
22560: LD_INT 39
22562: PUSH
22563: LD_INT 34
22565: PUSH
22566: LD_INT 40
22568: PUSH
22569: LD_INT 71
22571: PUSH
22572: LD_INT 23
22574: PUSH
22575: LD_INT 44
22577: PUSH
22578: LD_INT 48
22580: PUSH
22581: LD_INT 49
22583: PUSH
22584: LD_INT 50
22586: PUSH
22587: LD_INT 51
22589: PUSH
22590: LD_INT 52
22592: PUSH
22593: LD_INT 53
22595: PUSH
22596: LD_INT 54
22598: PUSH
22599: LD_INT 55
22601: PUSH
22602: LD_INT 56
22604: PUSH
22605: LD_INT 57
22607: PUSH
22608: LD_INT 58
22610: PUSH
22611: LD_INT 59
22613: PUSH
22614: LD_INT 63
22616: PUSH
22617: LD_INT 64
22619: PUSH
22620: LD_INT 65
22622: PUSH
22623: LD_INT 82
22625: PUSH
22626: LD_INT 83
22628: PUSH
22629: LD_INT 84
22631: PUSH
22632: LD_INT 85
22634: PUSH
22635: LD_INT 86
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: ST_TO_ADDR
22693: GO 22696
22695: POP
// if state > - 1 and state < 3 then
22696: LD_VAR 0 3
22700: PUSH
22701: LD_INT 1
22703: NEG
22704: GREATER
22705: IFFALSE 22717
22707: PUSH
22708: LD_VAR 0 3
22712: PUSH
22713: LD_INT 3
22715: LESS
22716: AND
22717: IFFALSE 22774
// for i in result do
22719: LD_ADDR_VAR 0 5
22723: PUSH
22724: LD_VAR 0 4
22728: PUSH
22729: FOR_IN
22730: IFFALSE 22772
// if GetTech ( i , side ) <> state then
22732: LD_VAR 0 5
22736: PPUSH
22737: LD_VAR 0 1
22741: PPUSH
22742: CALL_OW 321
22746: PUSH
22747: LD_VAR 0 3
22751: NONEQUAL
22752: IFFALSE 22770
// result := result diff i ;
22754: LD_ADDR_VAR 0 4
22758: PUSH
22759: LD_VAR 0 4
22763: PUSH
22764: LD_VAR 0 5
22768: DIFF
22769: ST_TO_ADDR
22770: GO 22729
22772: POP
22773: POP
// end ;
22774: LD_VAR 0 4
22778: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22779: LD_INT 0
22781: PPUSH
22782: PPUSH
22783: PPUSH
// result := true ;
22784: LD_ADDR_VAR 0 3
22788: PUSH
22789: LD_INT 1
22791: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22792: LD_ADDR_VAR 0 5
22796: PUSH
22797: LD_VAR 0 2
22801: PPUSH
22802: CALL_OW 480
22806: ST_TO_ADDR
// if not tmp then
22807: LD_VAR 0 5
22811: NOT
22812: IFFALSE 22816
// exit ;
22814: GO 22865
// for i in tmp do
22816: LD_ADDR_VAR 0 4
22820: PUSH
22821: LD_VAR 0 5
22825: PUSH
22826: FOR_IN
22827: IFFALSE 22863
// if GetTech ( i , side ) <> state_researched then
22829: LD_VAR 0 4
22833: PPUSH
22834: LD_VAR 0 1
22838: PPUSH
22839: CALL_OW 321
22843: PUSH
22844: LD_INT 2
22846: NONEQUAL
22847: IFFALSE 22861
// begin result := false ;
22849: LD_ADDR_VAR 0 3
22853: PUSH
22854: LD_INT 0
22856: ST_TO_ADDR
// exit ;
22857: POP
22858: POP
22859: GO 22865
// end ;
22861: GO 22826
22863: POP
22864: POP
// end ;
22865: LD_VAR 0 3
22869: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22870: LD_INT 0
22872: PPUSH
22873: PPUSH
22874: PPUSH
22875: PPUSH
22876: PPUSH
22877: PPUSH
22878: PPUSH
22879: PPUSH
22880: PPUSH
22881: PPUSH
22882: PPUSH
22883: PPUSH
22884: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22885: LD_VAR 0 1
22889: NOT
22890: IFTRUE 22907
22892: PUSH
22893: LD_VAR 0 1
22897: PPUSH
22898: CALL_OW 257
22902: PUSH
22903: LD_INT 9
22905: NONEQUAL
22906: OR
22907: IFFALSE 22911
// exit ;
22909: GO 23490
// side := GetSide ( unit ) ;
22911: LD_ADDR_VAR 0 9
22915: PUSH
22916: LD_VAR 0 1
22920: PPUSH
22921: CALL_OW 255
22925: ST_TO_ADDR
// tech_space := tech_spacanom ;
22926: LD_ADDR_VAR 0 12
22930: PUSH
22931: LD_INT 29
22933: ST_TO_ADDR
// tech_time := tech_taurad ;
22934: LD_ADDR_VAR 0 13
22938: PUSH
22939: LD_INT 28
22941: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22942: LD_ADDR_VAR 0 11
22946: PUSH
22947: LD_VAR 0 1
22951: PPUSH
22952: CALL_OW 310
22956: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22957: LD_VAR 0 11
22961: PPUSH
22962: CALL_OW 247
22966: PUSH
22967: LD_INT 2
22969: EQUAL
22970: IFFALSE 22974
// exit ;
22972: GO 23490
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22974: LD_ADDR_VAR 0 8
22978: PUSH
22979: LD_INT 81
22981: PUSH
22982: LD_VAR 0 9
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: PUSH
22991: LD_INT 3
22993: PUSH
22994: LD_INT 21
22996: PUSH
22997: LD_INT 3
22999: PUSH
23000: EMPTY
23001: LIST
23002: LIST
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: PPUSH
23012: CALL_OW 69
23016: ST_TO_ADDR
// if not tmp then
23017: LD_VAR 0 8
23021: NOT
23022: IFFALSE 23026
// exit ;
23024: GO 23490
// if in_unit then
23026: LD_VAR 0 11
23030: IFFALSE 23054
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23032: LD_ADDR_VAR 0 10
23036: PUSH
23037: LD_VAR 0 8
23041: PPUSH
23042: LD_VAR 0 11
23046: PPUSH
23047: CALL_OW 74
23051: ST_TO_ADDR
23052: GO 23074
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23054: LD_ADDR_VAR 0 10
23058: PUSH
23059: LD_VAR 0 8
23063: PPUSH
23064: LD_VAR 0 1
23068: PPUSH
23069: CALL_OW 74
23073: ST_TO_ADDR
// if not enemy then
23074: LD_VAR 0 10
23078: NOT
23079: IFFALSE 23083
// exit ;
23081: GO 23490
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23083: LD_VAR 0 11
23087: IFFALSE 23109
23089: PUSH
23090: LD_VAR 0 11
23094: PPUSH
23095: LD_VAR 0 10
23099: PPUSH
23100: CALL_OW 296
23104: PUSH
23105: LD_INT 13
23107: GREATER
23108: AND
23109: IFTRUE 23131
23111: PUSH
23112: LD_VAR 0 1
23116: PPUSH
23117: LD_VAR 0 10
23121: PPUSH
23122: CALL_OW 296
23126: PUSH
23127: LD_INT 12
23129: GREATER
23130: OR
23131: IFFALSE 23135
// exit ;
23133: GO 23490
// missile := [ 1 ] ;
23135: LD_ADDR_VAR 0 14
23139: PUSH
23140: LD_INT 1
23142: PUSH
23143: EMPTY
23144: LIST
23145: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23146: LD_VAR 0 9
23150: PPUSH
23151: LD_VAR 0 12
23155: PPUSH
23156: CALL_OW 325
23160: IFFALSE 23189
// missile := Replace ( missile , missile + 1 , 2 ) ;
23162: LD_ADDR_VAR 0 14
23166: PUSH
23167: LD_VAR 0 14
23171: PPUSH
23172: LD_VAR 0 14
23176: PUSH
23177: LD_INT 1
23179: PLUS
23180: PPUSH
23181: LD_INT 2
23183: PPUSH
23184: CALL_OW 1
23188: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23189: LD_VAR 0 9
23193: PPUSH
23194: LD_VAR 0 13
23198: PPUSH
23199: CALL_OW 325
23203: IFFALSE 23227
23205: PUSH
23206: LD_VAR 0 10
23210: PPUSH
23211: CALL_OW 255
23215: PPUSH
23216: LD_VAR 0 13
23220: PPUSH
23221: CALL_OW 325
23225: NOT
23226: AND
23227: IFFALSE 23256
// missile := Replace ( missile , missile + 1 , 3 ) ;
23229: LD_ADDR_VAR 0 14
23233: PUSH
23234: LD_VAR 0 14
23238: PPUSH
23239: LD_VAR 0 14
23243: PUSH
23244: LD_INT 1
23246: PLUS
23247: PPUSH
23248: LD_INT 3
23250: PPUSH
23251: CALL_OW 1
23255: ST_TO_ADDR
// if missile < 2 then
23256: LD_VAR 0 14
23260: PUSH
23261: LD_INT 2
23263: LESS
23264: IFFALSE 23268
// exit ;
23266: GO 23490
// x := GetX ( enemy ) ;
23268: LD_ADDR_VAR 0 4
23272: PUSH
23273: LD_VAR 0 10
23277: PPUSH
23278: CALL_OW 250
23282: ST_TO_ADDR
// y := GetY ( enemy ) ;
23283: LD_ADDR_VAR 0 5
23287: PUSH
23288: LD_VAR 0 10
23292: PPUSH
23293: CALL_OW 251
23297: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23298: LD_ADDR_VAR 0 6
23302: PUSH
23303: LD_VAR 0 4
23307: PUSH
23308: LD_INT 1
23310: NEG
23311: PPUSH
23312: LD_INT 1
23314: PPUSH
23315: CALL_OW 12
23319: PLUS
23320: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23321: LD_ADDR_VAR 0 7
23325: PUSH
23326: LD_VAR 0 5
23330: PUSH
23331: LD_INT 1
23333: NEG
23334: PPUSH
23335: LD_INT 1
23337: PPUSH
23338: CALL_OW 12
23342: PLUS
23343: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23344: LD_VAR 0 6
23348: PPUSH
23349: LD_VAR 0 7
23353: PPUSH
23354: CALL_OW 488
23358: NOT
23359: IFFALSE 23381
// begin _x := x ;
23361: LD_ADDR_VAR 0 6
23365: PUSH
23366: LD_VAR 0 4
23370: ST_TO_ADDR
// _y := y ;
23371: LD_ADDR_VAR 0 7
23375: PUSH
23376: LD_VAR 0 5
23380: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23381: LD_ADDR_VAR 0 3
23385: PUSH
23386: LD_INT 1
23388: PPUSH
23389: LD_VAR 0 14
23393: PPUSH
23394: CALL_OW 12
23398: ST_TO_ADDR
// case i of 1 :
23399: LD_VAR 0 3
23403: PUSH
23404: LD_INT 1
23406: DOUBLE
23407: EQUAL
23408: IFTRUE 23412
23410: GO 23429
23412: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23413: LD_VAR 0 1
23417: PPUSH
23418: LD_VAR 0 10
23422: PPUSH
23423: CALL_OW 115
23427: GO 23490
23429: LD_INT 2
23431: DOUBLE
23432: EQUAL
23433: IFTRUE 23437
23435: GO 23459
23437: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23438: LD_VAR 0 1
23442: PPUSH
23443: LD_VAR 0 6
23447: PPUSH
23448: LD_VAR 0 7
23452: PPUSH
23453: CALL_OW 153
23457: GO 23490
23459: LD_INT 3
23461: DOUBLE
23462: EQUAL
23463: IFTRUE 23467
23465: GO 23489
23467: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23468: LD_VAR 0 1
23472: PPUSH
23473: LD_VAR 0 6
23477: PPUSH
23478: LD_VAR 0 7
23482: PPUSH
23483: CALL_OW 154
23487: GO 23490
23489: POP
// end ;
23490: LD_VAR 0 2
23494: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23495: LD_INT 0
23497: PPUSH
23498: PPUSH
23499: PPUSH
23500: PPUSH
23501: PPUSH
23502: PPUSH
// if not unit or not building then
23503: LD_VAR 0 1
23507: NOT
23508: IFTRUE 23517
23510: PUSH
23511: LD_VAR 0 2
23515: NOT
23516: OR
23517: IFFALSE 23521
// exit ;
23519: GO 23679
// x := GetX ( building ) ;
23521: LD_ADDR_VAR 0 5
23525: PUSH
23526: LD_VAR 0 2
23530: PPUSH
23531: CALL_OW 250
23535: ST_TO_ADDR
// y := GetY ( building ) ;
23536: LD_ADDR_VAR 0 6
23540: PUSH
23541: LD_VAR 0 2
23545: PPUSH
23546: CALL_OW 251
23550: ST_TO_ADDR
// for i := 0 to 5 do
23551: LD_ADDR_VAR 0 4
23555: PUSH
23556: DOUBLE
23557: LD_INT 0
23559: DEC
23560: ST_TO_ADDR
23561: LD_INT 5
23563: PUSH
23564: FOR_TO
23565: IFFALSE 23677
// begin _x := ShiftX ( x , i , 3 ) ;
23567: LD_ADDR_VAR 0 7
23571: PUSH
23572: LD_VAR 0 5
23576: PPUSH
23577: LD_VAR 0 4
23581: PPUSH
23582: LD_INT 3
23584: PPUSH
23585: CALL_OW 272
23589: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23590: LD_ADDR_VAR 0 8
23594: PUSH
23595: LD_VAR 0 6
23599: PPUSH
23600: LD_VAR 0 4
23604: PPUSH
23605: LD_INT 3
23607: PPUSH
23608: CALL_OW 273
23612: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23613: LD_VAR 0 7
23617: PPUSH
23618: LD_VAR 0 8
23622: PPUSH
23623: CALL_OW 488
23627: NOT
23628: IFFALSE 23632
// continue ;
23630: GO 23564
// if HexInfo ( _x , _y ) = 0 then
23632: LD_VAR 0 7
23636: PPUSH
23637: LD_VAR 0 8
23641: PPUSH
23642: CALL_OW 428
23646: PUSH
23647: LD_INT 0
23649: EQUAL
23650: IFFALSE 23675
// begin ComMoveXY ( unit , _x , _y ) ;
23652: LD_VAR 0 1
23656: PPUSH
23657: LD_VAR 0 7
23661: PPUSH
23662: LD_VAR 0 8
23666: PPUSH
23667: CALL_OW 111
// exit ;
23671: POP
23672: POP
23673: GO 23679
// end ; end ;
23675: GO 23564
23677: POP
23678: POP
// end ;
23679: LD_VAR 0 3
23683: RET
// export function ScanBase ( side , base_area ) ; begin
23684: LD_INT 0
23686: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23687: LD_ADDR_VAR 0 3
23691: PUSH
23692: LD_VAR 0 2
23696: PPUSH
23697: LD_INT 81
23699: PUSH
23700: LD_VAR 0 1
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: PPUSH
23709: CALL_OW 70
23713: ST_TO_ADDR
// end ;
23714: LD_VAR 0 3
23718: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23719: LD_INT 0
23721: PPUSH
23722: PPUSH
23723: PPUSH
23724: PPUSH
// result := false ;
23725: LD_ADDR_VAR 0 2
23729: PUSH
23730: LD_INT 0
23732: ST_TO_ADDR
// side := GetSide ( unit ) ;
23733: LD_ADDR_VAR 0 3
23737: PUSH
23738: LD_VAR 0 1
23742: PPUSH
23743: CALL_OW 255
23747: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23748: LD_ADDR_VAR 0 4
23752: PUSH
23753: LD_VAR 0 1
23757: PPUSH
23758: CALL_OW 248
23762: ST_TO_ADDR
// case nat of 1 :
23763: LD_VAR 0 4
23767: PUSH
23768: LD_INT 1
23770: DOUBLE
23771: EQUAL
23772: IFTRUE 23776
23774: GO 23787
23776: POP
// tech := tech_lassight ; 2 :
23777: LD_ADDR_VAR 0 5
23781: PUSH
23782: LD_INT 12
23784: ST_TO_ADDR
23785: GO 23826
23787: LD_INT 2
23789: DOUBLE
23790: EQUAL
23791: IFTRUE 23795
23793: GO 23806
23795: POP
// tech := tech_mortar ; 3 :
23796: LD_ADDR_VAR 0 5
23800: PUSH
23801: LD_INT 41
23803: ST_TO_ADDR
23804: GO 23826
23806: LD_INT 3
23808: DOUBLE
23809: EQUAL
23810: IFTRUE 23814
23812: GO 23825
23814: POP
// tech := tech_bazooka ; end ;
23815: LD_ADDR_VAR 0 5
23819: PUSH
23820: LD_INT 44
23822: ST_TO_ADDR
23823: GO 23826
23825: POP
// if Researched ( side , tech ) then
23826: LD_VAR 0 3
23830: PPUSH
23831: LD_VAR 0 5
23835: PPUSH
23836: CALL_OW 325
23840: IFFALSE 23867
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23842: LD_ADDR_VAR 0 2
23846: PUSH
23847: LD_INT 5
23849: PUSH
23850: LD_INT 8
23852: PUSH
23853: LD_INT 9
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: LIST
23860: PUSH
23861: LD_VAR 0 4
23865: ARRAY
23866: ST_TO_ADDR
// end ;
23867: LD_VAR 0 2
23871: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23872: LD_INT 0
23874: PPUSH
23875: PPUSH
23876: PPUSH
// if not mines then
23877: LD_VAR 0 2
23881: NOT
23882: IFFALSE 23886
// exit ;
23884: GO 24030
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23886: LD_ADDR_VAR 0 5
23890: PUSH
23891: LD_INT 81
23893: PUSH
23894: LD_VAR 0 1
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: PUSH
23903: LD_INT 3
23905: PUSH
23906: LD_INT 21
23908: PUSH
23909: LD_INT 3
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: PPUSH
23924: CALL_OW 69
23928: ST_TO_ADDR
// for i in mines do
23929: LD_ADDR_VAR 0 4
23933: PUSH
23934: LD_VAR 0 2
23938: PUSH
23939: FOR_IN
23940: IFFALSE 24028
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23942: LD_VAR 0 4
23946: PUSH
23947: LD_INT 1
23949: ARRAY
23950: PPUSH
23951: LD_VAR 0 4
23955: PUSH
23956: LD_INT 2
23958: ARRAY
23959: PPUSH
23960: CALL_OW 458
23964: NOT
23965: IFFALSE 23969
// continue ;
23967: GO 23939
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23969: LD_VAR 0 4
23973: PUSH
23974: LD_INT 1
23976: ARRAY
23977: PPUSH
23978: LD_VAR 0 4
23982: PUSH
23983: LD_INT 2
23985: ARRAY
23986: PPUSH
23987: CALL_OW 428
23991: PUSH
23992: LD_VAR 0 5
23996: IN
23997: IFFALSE 24026
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23999: LD_VAR 0 4
24003: PUSH
24004: LD_INT 1
24006: ARRAY
24007: PPUSH
24008: LD_VAR 0 4
24012: PUSH
24013: LD_INT 2
24015: ARRAY
24016: PPUSH
24017: LD_VAR 0 1
24021: PPUSH
24022: CALL_OW 456
// end ;
24026: GO 23939
24028: POP
24029: POP
// end ;
24030: LD_VAR 0 3
24034: RET
// export function Count ( array ) ; begin
24035: LD_INT 0
24037: PPUSH
// result := array + 0 ;
24038: LD_ADDR_VAR 0 2
24042: PUSH
24043: LD_VAR 0 1
24047: PUSH
24048: LD_INT 0
24050: PLUS
24051: ST_TO_ADDR
// end ;
24052: LD_VAR 0 2
24056: RET
// export function IsEmpty ( building ) ; begin
24057: LD_INT 0
24059: PPUSH
// if not building then
24060: LD_VAR 0 1
24064: NOT
24065: IFFALSE 24069
// exit ;
24067: GO 24112
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24069: LD_ADDR_VAR 0 2
24073: PUSH
24074: LD_VAR 0 1
24078: PUSH
24079: LD_INT 22
24081: PUSH
24082: LD_VAR 0 1
24086: PPUSH
24087: CALL_OW 255
24091: PUSH
24092: EMPTY
24093: LIST
24094: LIST
24095: PUSH
24096: LD_INT 58
24098: PUSH
24099: EMPTY
24100: LIST
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: PPUSH
24106: CALL_OW 69
24110: IN
24111: ST_TO_ADDR
// end ;
24112: LD_VAR 0 2
24116: RET
// export function IsNotFull ( building ) ; var places ; begin
24117: LD_INT 0
24119: PPUSH
24120: PPUSH
// if not building then
24121: LD_VAR 0 1
24125: NOT
24126: IFFALSE 24130
// exit ;
24128: GO 24158
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
24130: LD_ADDR_VAR 0 2
24134: PUSH
24135: LD_VAR 0 1
24139: PPUSH
24140: LD_INT 3
24142: PUSH
24143: LD_INT 62
24145: PUSH
24146: EMPTY
24147: LIST
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: PPUSH
24153: CALL_OW 72
24157: ST_TO_ADDR
// end ;
24158: LD_VAR 0 2
24162: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24163: LD_INT 0
24165: PPUSH
24166: PPUSH
24167: PPUSH
24168: PPUSH
// tmp := [ ] ;
24169: LD_ADDR_VAR 0 3
24173: PUSH
24174: EMPTY
24175: ST_TO_ADDR
// list := [ ] ;
24176: LD_ADDR_VAR 0 5
24180: PUSH
24181: EMPTY
24182: ST_TO_ADDR
// for i = 16 to 25 do
24183: LD_ADDR_VAR 0 4
24187: PUSH
24188: DOUBLE
24189: LD_INT 16
24191: DEC
24192: ST_TO_ADDR
24193: LD_INT 25
24195: PUSH
24196: FOR_TO
24197: IFFALSE 24270
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24199: LD_ADDR_VAR 0 3
24203: PUSH
24204: LD_VAR 0 3
24208: PUSH
24209: LD_INT 22
24211: PUSH
24212: LD_VAR 0 1
24216: PPUSH
24217: CALL_OW 255
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: PUSH
24226: LD_INT 91
24228: PUSH
24229: LD_VAR 0 1
24233: PUSH
24234: LD_INT 6
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: LIST
24241: PUSH
24242: LD_INT 30
24244: PUSH
24245: LD_VAR 0 4
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: LIST
24258: PUSH
24259: EMPTY
24260: LIST
24261: PPUSH
24262: CALL_OW 69
24266: ADD
24267: ST_TO_ADDR
24268: GO 24196
24270: POP
24271: POP
// for i = 1 to tmp do
24272: LD_ADDR_VAR 0 4
24276: PUSH
24277: DOUBLE
24278: LD_INT 1
24280: DEC
24281: ST_TO_ADDR
24282: LD_VAR 0 3
24286: PUSH
24287: FOR_TO
24288: IFFALSE 24376
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24290: LD_ADDR_VAR 0 5
24294: PUSH
24295: LD_VAR 0 5
24299: PUSH
24300: LD_VAR 0 3
24304: PUSH
24305: LD_VAR 0 4
24309: ARRAY
24310: PPUSH
24311: CALL_OW 266
24315: PUSH
24316: LD_VAR 0 3
24320: PUSH
24321: LD_VAR 0 4
24325: ARRAY
24326: PPUSH
24327: CALL_OW 250
24331: PUSH
24332: LD_VAR 0 3
24336: PUSH
24337: LD_VAR 0 4
24341: ARRAY
24342: PPUSH
24343: CALL_OW 251
24347: PUSH
24348: LD_VAR 0 3
24352: PUSH
24353: LD_VAR 0 4
24357: ARRAY
24358: PPUSH
24359: CALL_OW 254
24363: PUSH
24364: EMPTY
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: PUSH
24370: EMPTY
24371: LIST
24372: ADD
24373: ST_TO_ADDR
24374: GO 24287
24376: POP
24377: POP
// result := list ;
24378: LD_ADDR_VAR 0 2
24382: PUSH
24383: LD_VAR 0 5
24387: ST_TO_ADDR
// end ;
24388: LD_VAR 0 2
24392: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24393: LD_INT 0
24395: PPUSH
24396: PPUSH
24397: PPUSH
24398: PPUSH
24399: PPUSH
24400: PPUSH
24401: PPUSH
// if not factory then
24402: LD_VAR 0 1
24406: NOT
24407: IFFALSE 24411
// exit ;
24409: GO 25014
// if control = control_apeman then
24411: LD_VAR 0 4
24415: PUSH
24416: LD_INT 5
24418: EQUAL
24419: IFFALSE 24528
// begin tmp := UnitsInside ( factory ) ;
24421: LD_ADDR_VAR 0 8
24425: PUSH
24426: LD_VAR 0 1
24430: PPUSH
24431: CALL_OW 313
24435: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24436: LD_VAR 0 8
24440: PPUSH
24441: LD_INT 25
24443: PUSH
24444: LD_INT 12
24446: PUSH
24447: EMPTY
24448: LIST
24449: LIST
24450: PPUSH
24451: CALL_OW 72
24455: NOT
24456: IFFALSE 24466
// control := control_manual ;
24458: LD_ADDR_VAR 0 4
24462: PUSH
24463: LD_INT 1
24465: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24466: LD_ADDR_VAR 0 8
24470: PUSH
24471: LD_VAR 0 1
24475: PPUSH
24476: CALL 24163 0 1
24480: ST_TO_ADDR
// if tmp then
24481: LD_VAR 0 8
24485: IFFALSE 24528
// begin for i in tmp do
24487: LD_ADDR_VAR 0 7
24491: PUSH
24492: LD_VAR 0 8
24496: PUSH
24497: FOR_IN
24498: IFFALSE 24526
// if i [ 1 ] = b_ext_radio then
24500: LD_VAR 0 7
24504: PUSH
24505: LD_INT 1
24507: ARRAY
24508: PUSH
24509: LD_INT 22
24511: EQUAL
24512: IFFALSE 24524
// begin control := control_remote ;
24514: LD_ADDR_VAR 0 4
24518: PUSH
24519: LD_INT 2
24521: ST_TO_ADDR
// break ;
24522: GO 24526
// end ;
24524: GO 24497
24526: POP
24527: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24528: LD_VAR 0 1
24532: PPUSH
24533: LD_VAR 0 2
24537: PPUSH
24538: LD_VAR 0 3
24542: PPUSH
24543: LD_VAR 0 4
24547: PPUSH
24548: LD_VAR 0 5
24552: PPUSH
24553: CALL_OW 448
24557: IFFALSE 24592
// begin result := [ chassis , engine , control , weapon ] ;
24559: LD_ADDR_VAR 0 6
24563: PUSH
24564: LD_VAR 0 2
24568: PUSH
24569: LD_VAR 0 3
24573: PUSH
24574: LD_VAR 0 4
24578: PUSH
24579: LD_VAR 0 5
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: ST_TO_ADDR
// exit ;
24590: GO 25014
// end ; _chassis := AvailableChassisList ( factory ) ;
24592: LD_ADDR_VAR 0 9
24596: PUSH
24597: LD_VAR 0 1
24601: PPUSH
24602: CALL_OW 475
24606: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24607: LD_ADDR_VAR 0 11
24611: PUSH
24612: LD_VAR 0 1
24616: PPUSH
24617: CALL_OW 476
24621: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24622: LD_ADDR_VAR 0 12
24626: PUSH
24627: LD_VAR 0 1
24631: PPUSH
24632: CALL_OW 477
24636: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24637: LD_ADDR_VAR 0 10
24641: PUSH
24642: LD_VAR 0 1
24646: PPUSH
24647: CALL_OW 478
24651: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24652: LD_VAR 0 9
24656: NOT
24657: IFTRUE 24666
24659: PUSH
24660: LD_VAR 0 11
24664: NOT
24665: OR
24666: IFTRUE 24675
24668: PUSH
24669: LD_VAR 0 12
24673: NOT
24674: OR
24675: IFTRUE 24684
24677: PUSH
24678: LD_VAR 0 10
24682: NOT
24683: OR
24684: IFFALSE 24719
// begin result := [ chassis , engine , control , weapon ] ;
24686: LD_ADDR_VAR 0 6
24690: PUSH
24691: LD_VAR 0 2
24695: PUSH
24696: LD_VAR 0 3
24700: PUSH
24701: LD_VAR 0 4
24705: PUSH
24706: LD_VAR 0 5
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: ST_TO_ADDR
// exit ;
24717: GO 25014
// end ; if not chassis in _chassis then
24719: LD_VAR 0 2
24723: PUSH
24724: LD_VAR 0 9
24728: IN
24729: NOT
24730: IFFALSE 24756
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24732: LD_ADDR_VAR 0 2
24736: PUSH
24737: LD_VAR 0 9
24741: PUSH
24742: LD_INT 1
24744: PPUSH
24745: LD_VAR 0 9
24749: PPUSH
24750: CALL_OW 12
24754: ARRAY
24755: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24756: LD_VAR 0 2
24760: PPUSH
24761: LD_VAR 0 3
24765: PPUSH
24766: CALL 25019 0 2
24770: NOT
24771: IFFALSE 24832
// repeat engine := _engine [ 1 ] ;
24773: LD_ADDR_VAR 0 3
24777: PUSH
24778: LD_VAR 0 11
24782: PUSH
24783: LD_INT 1
24785: ARRAY
24786: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24787: LD_ADDR_VAR 0 11
24791: PUSH
24792: LD_VAR 0 11
24796: PPUSH
24797: LD_INT 1
24799: PPUSH
24800: CALL_OW 3
24804: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24805: LD_VAR 0 2
24809: PPUSH
24810: LD_VAR 0 3
24814: PPUSH
24815: CALL 25019 0 2
24819: IFTRUE 24830
24821: PUSH
24822: LD_VAR 0 11
24826: PUSH
24827: EMPTY
24828: EQUAL
24829: OR
24830: IFFALSE 24773
// if not control in _control then
24832: LD_VAR 0 4
24836: PUSH
24837: LD_VAR 0 12
24841: IN
24842: NOT
24843: IFFALSE 24869
// control := _control [ rand ( 1 , _control ) ] ;
24845: LD_ADDR_VAR 0 4
24849: PUSH
24850: LD_VAR 0 12
24854: PUSH
24855: LD_INT 1
24857: PPUSH
24858: LD_VAR 0 12
24862: PPUSH
24863: CALL_OW 12
24867: ARRAY
24868: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24869: LD_VAR 0 2
24873: PPUSH
24874: LD_VAR 0 5
24878: PPUSH
24879: CALL 25241 0 2
24883: NOT
24884: IFFALSE 24945
// repeat weapon := _weapon [ 1 ] ;
24886: LD_ADDR_VAR 0 5
24890: PUSH
24891: LD_VAR 0 10
24895: PUSH
24896: LD_INT 1
24898: ARRAY
24899: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24900: LD_ADDR_VAR 0 10
24904: PUSH
24905: LD_VAR 0 10
24909: PPUSH
24910: LD_INT 1
24912: PPUSH
24913: CALL_OW 3
24917: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24918: LD_VAR 0 2
24922: PPUSH
24923: LD_VAR 0 5
24927: PPUSH
24928: CALL 25241 0 2
24932: IFTRUE 24943
24934: PUSH
24935: LD_VAR 0 10
24939: PUSH
24940: EMPTY
24941: EQUAL
24942: OR
24943: IFFALSE 24886
// result := [ ] ;
24945: LD_ADDR_VAR 0 6
24949: PUSH
24950: EMPTY
24951: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24952: LD_VAR 0 1
24956: PPUSH
24957: LD_VAR 0 2
24961: PPUSH
24962: LD_VAR 0 3
24966: PPUSH
24967: LD_VAR 0 4
24971: PPUSH
24972: LD_VAR 0 5
24976: PPUSH
24977: CALL_OW 448
24981: IFFALSE 25014
// result := [ chassis , engine , control , weapon ] ;
24983: LD_ADDR_VAR 0 6
24987: PUSH
24988: LD_VAR 0 2
24992: PUSH
24993: LD_VAR 0 3
24997: PUSH
24998: LD_VAR 0 4
25002: PUSH
25003: LD_VAR 0 5
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: ST_TO_ADDR
// end ;
25014: LD_VAR 0 6
25018: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25019: LD_INT 0
25021: PPUSH
// if not chassis or not engine then
25022: LD_VAR 0 1
25026: NOT
25027: IFTRUE 25036
25029: PUSH
25030: LD_VAR 0 2
25034: NOT
25035: OR
25036: IFFALSE 25040
// exit ;
25038: GO 25236
// case engine of engine_solar :
25040: LD_VAR 0 2
25044: PUSH
25045: LD_INT 2
25047: DOUBLE
25048: EQUAL
25049: IFTRUE 25053
25051: GO 25091
25053: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25054: LD_ADDR_VAR 0 3
25058: PUSH
25059: LD_INT 11
25061: PUSH
25062: LD_INT 12
25064: PUSH
25065: LD_INT 13
25067: PUSH
25068: LD_INT 14
25070: PUSH
25071: LD_INT 1
25073: PUSH
25074: LD_INT 2
25076: PUSH
25077: LD_INT 3
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: ST_TO_ADDR
25089: GO 25220
25091: LD_INT 1
25093: DOUBLE
25094: EQUAL
25095: IFTRUE 25099
25097: GO 25161
25099: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25100: LD_ADDR_VAR 0 3
25104: PUSH
25105: LD_INT 11
25107: PUSH
25108: LD_INT 12
25110: PUSH
25111: LD_INT 13
25113: PUSH
25114: LD_INT 14
25116: PUSH
25117: LD_INT 1
25119: PUSH
25120: LD_INT 2
25122: PUSH
25123: LD_INT 3
25125: PUSH
25126: LD_INT 4
25128: PUSH
25129: LD_INT 5
25131: PUSH
25132: LD_INT 21
25134: PUSH
25135: LD_INT 23
25137: PUSH
25138: LD_INT 22
25140: PUSH
25141: LD_INT 24
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: ST_TO_ADDR
25159: GO 25220
25161: LD_INT 3
25163: DOUBLE
25164: EQUAL
25165: IFTRUE 25169
25167: GO 25219
25169: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25170: LD_ADDR_VAR 0 3
25174: PUSH
25175: LD_INT 13
25177: PUSH
25178: LD_INT 14
25180: PUSH
25181: LD_INT 2
25183: PUSH
25184: LD_INT 3
25186: PUSH
25187: LD_INT 4
25189: PUSH
25190: LD_INT 5
25192: PUSH
25193: LD_INT 21
25195: PUSH
25196: LD_INT 22
25198: PUSH
25199: LD_INT 23
25201: PUSH
25202: LD_INT 24
25204: PUSH
25205: EMPTY
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: ST_TO_ADDR
25217: GO 25220
25219: POP
// result := ( chassis in result ) ;
25220: LD_ADDR_VAR 0 3
25224: PUSH
25225: LD_VAR 0 1
25229: PUSH
25230: LD_VAR 0 3
25234: IN
25235: ST_TO_ADDR
// end ;
25236: LD_VAR 0 3
25240: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25241: LD_INT 0
25243: PPUSH
// if not chassis or not weapon then
25244: LD_VAR 0 1
25248: NOT
25249: IFTRUE 25258
25251: PUSH
25252: LD_VAR 0 2
25256: NOT
25257: OR
25258: IFFALSE 25262
// exit ;
25260: GO 26322
// case weapon of us_machine_gun :
25262: LD_VAR 0 2
25266: PUSH
25267: LD_INT 2
25269: DOUBLE
25270: EQUAL
25271: IFTRUE 25275
25273: GO 25305
25275: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25276: LD_ADDR_VAR 0 3
25280: PUSH
25281: LD_INT 1
25283: PUSH
25284: LD_INT 2
25286: PUSH
25287: LD_INT 3
25289: PUSH
25290: LD_INT 4
25292: PUSH
25293: LD_INT 5
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: ST_TO_ADDR
25303: GO 26306
25305: LD_INT 3
25307: DOUBLE
25308: EQUAL
25309: IFTRUE 25313
25311: GO 25343
25313: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25314: LD_ADDR_VAR 0 3
25318: PUSH
25319: LD_INT 1
25321: PUSH
25322: LD_INT 2
25324: PUSH
25325: LD_INT 3
25327: PUSH
25328: LD_INT 4
25330: PUSH
25331: LD_INT 5
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: ST_TO_ADDR
25341: GO 26306
25343: LD_INT 11
25345: DOUBLE
25346: EQUAL
25347: IFTRUE 25351
25349: GO 25381
25351: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25352: LD_ADDR_VAR 0 3
25356: PUSH
25357: LD_INT 1
25359: PUSH
25360: LD_INT 2
25362: PUSH
25363: LD_INT 3
25365: PUSH
25366: LD_INT 4
25368: PUSH
25369: LD_INT 5
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: ST_TO_ADDR
25379: GO 26306
25381: LD_INT 4
25383: DOUBLE
25384: EQUAL
25385: IFTRUE 25389
25387: GO 25415
25389: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25390: LD_ADDR_VAR 0 3
25394: PUSH
25395: LD_INT 2
25397: PUSH
25398: LD_INT 3
25400: PUSH
25401: LD_INT 4
25403: PUSH
25404: LD_INT 5
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: ST_TO_ADDR
25413: GO 26306
25415: LD_INT 5
25417: DOUBLE
25418: EQUAL
25419: IFTRUE 25423
25421: GO 25449
25423: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25424: LD_ADDR_VAR 0 3
25428: PUSH
25429: LD_INT 2
25431: PUSH
25432: LD_INT 3
25434: PUSH
25435: LD_INT 4
25437: PUSH
25438: LD_INT 5
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: ST_TO_ADDR
25447: GO 26306
25449: LD_INT 9
25451: DOUBLE
25452: EQUAL
25453: IFTRUE 25457
25455: GO 25483
25457: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25458: LD_ADDR_VAR 0 3
25462: PUSH
25463: LD_INT 2
25465: PUSH
25466: LD_INT 3
25468: PUSH
25469: LD_INT 4
25471: PUSH
25472: LD_INT 5
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: ST_TO_ADDR
25481: GO 26306
25483: LD_INT 7
25485: DOUBLE
25486: EQUAL
25487: IFTRUE 25491
25489: GO 25517
25491: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25492: LD_ADDR_VAR 0 3
25496: PUSH
25497: LD_INT 2
25499: PUSH
25500: LD_INT 3
25502: PUSH
25503: LD_INT 4
25505: PUSH
25506: LD_INT 5
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: ST_TO_ADDR
25515: GO 26306
25517: LD_INT 12
25519: DOUBLE
25520: EQUAL
25521: IFTRUE 25525
25523: GO 25551
25525: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25526: LD_ADDR_VAR 0 3
25530: PUSH
25531: LD_INT 2
25533: PUSH
25534: LD_INT 3
25536: PUSH
25537: LD_INT 4
25539: PUSH
25540: LD_INT 5
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: ST_TO_ADDR
25549: GO 26306
25551: LD_INT 13
25553: DOUBLE
25554: EQUAL
25555: IFTRUE 25559
25557: GO 25585
25559: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25560: LD_ADDR_VAR 0 3
25564: PUSH
25565: LD_INT 2
25567: PUSH
25568: LD_INT 3
25570: PUSH
25571: LD_INT 4
25573: PUSH
25574: LD_INT 5
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: ST_TO_ADDR
25583: GO 26306
25585: LD_INT 14
25587: DOUBLE
25588: EQUAL
25589: IFTRUE 25593
25591: GO 25611
25593: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25594: LD_ADDR_VAR 0 3
25598: PUSH
25599: LD_INT 4
25601: PUSH
25602: LD_INT 5
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: ST_TO_ADDR
25609: GO 26306
25611: LD_INT 6
25613: DOUBLE
25614: EQUAL
25615: IFTRUE 25619
25617: GO 25637
25619: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25620: LD_ADDR_VAR 0 3
25624: PUSH
25625: LD_INT 4
25627: PUSH
25628: LD_INT 5
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: ST_TO_ADDR
25635: GO 26306
25637: LD_INT 10
25639: DOUBLE
25640: EQUAL
25641: IFTRUE 25645
25643: GO 25663
25645: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25646: LD_ADDR_VAR 0 3
25650: PUSH
25651: LD_INT 4
25653: PUSH
25654: LD_INT 5
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: ST_TO_ADDR
25661: GO 26306
25663: LD_INT 22
25665: DOUBLE
25666: EQUAL
25667: IFTRUE 25671
25669: GO 25697
25671: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25672: LD_ADDR_VAR 0 3
25676: PUSH
25677: LD_INT 11
25679: PUSH
25680: LD_INT 12
25682: PUSH
25683: LD_INT 13
25685: PUSH
25686: LD_INT 14
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: ST_TO_ADDR
25695: GO 26306
25697: LD_INT 23
25699: DOUBLE
25700: EQUAL
25701: IFTRUE 25705
25703: GO 25731
25705: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25706: LD_ADDR_VAR 0 3
25710: PUSH
25711: LD_INT 11
25713: PUSH
25714: LD_INT 12
25716: PUSH
25717: LD_INT 13
25719: PUSH
25720: LD_INT 14
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: ST_TO_ADDR
25729: GO 26306
25731: LD_INT 24
25733: DOUBLE
25734: EQUAL
25735: IFTRUE 25739
25737: GO 25765
25739: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25740: LD_ADDR_VAR 0 3
25744: PUSH
25745: LD_INT 11
25747: PUSH
25748: LD_INT 12
25750: PUSH
25751: LD_INT 13
25753: PUSH
25754: LD_INT 14
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: ST_TO_ADDR
25763: GO 26306
25765: LD_INT 30
25767: DOUBLE
25768: EQUAL
25769: IFTRUE 25773
25771: GO 25799
25773: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25774: LD_ADDR_VAR 0 3
25778: PUSH
25779: LD_INT 11
25781: PUSH
25782: LD_INT 12
25784: PUSH
25785: LD_INT 13
25787: PUSH
25788: LD_INT 14
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: ST_TO_ADDR
25797: GO 26306
25799: LD_INT 25
25801: DOUBLE
25802: EQUAL
25803: IFTRUE 25807
25805: GO 25825
25807: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25808: LD_ADDR_VAR 0 3
25812: PUSH
25813: LD_INT 13
25815: PUSH
25816: LD_INT 14
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: ST_TO_ADDR
25823: GO 26306
25825: LD_INT 27
25827: DOUBLE
25828: EQUAL
25829: IFTRUE 25833
25831: GO 25851
25833: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
25834: LD_ADDR_VAR 0 3
25838: PUSH
25839: LD_INT 13
25841: PUSH
25842: LD_INT 14
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: ST_TO_ADDR
25849: GO 26306
25851: LD_INT 92
25853: DOUBLE
25854: EQUAL
25855: IFTRUE 25859
25857: GO 25885
25859: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25860: LD_ADDR_VAR 0 3
25864: PUSH
25865: LD_INT 11
25867: PUSH
25868: LD_INT 12
25870: PUSH
25871: LD_INT 13
25873: PUSH
25874: LD_INT 14
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: ST_TO_ADDR
25883: GO 26306
25885: LD_INT 28
25887: DOUBLE
25888: EQUAL
25889: IFTRUE 25893
25891: GO 25911
25893: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25894: LD_ADDR_VAR 0 3
25898: PUSH
25899: LD_INT 13
25901: PUSH
25902: LD_INT 14
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: ST_TO_ADDR
25909: GO 26306
25911: LD_INT 29
25913: DOUBLE
25914: EQUAL
25915: IFTRUE 25919
25917: GO 25937
25919: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25920: LD_ADDR_VAR 0 3
25924: PUSH
25925: LD_INT 13
25927: PUSH
25928: LD_INT 14
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: ST_TO_ADDR
25935: GO 26306
25937: LD_INT 31
25939: DOUBLE
25940: EQUAL
25941: IFTRUE 25945
25943: GO 25963
25945: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25946: LD_ADDR_VAR 0 3
25950: PUSH
25951: LD_INT 13
25953: PUSH
25954: LD_INT 14
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: ST_TO_ADDR
25961: GO 26306
25963: LD_INT 26
25965: DOUBLE
25966: EQUAL
25967: IFTRUE 25971
25969: GO 25989
25971: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25972: LD_ADDR_VAR 0 3
25976: PUSH
25977: LD_INT 13
25979: PUSH
25980: LD_INT 14
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: ST_TO_ADDR
25987: GO 26306
25989: LD_INT 42
25991: DOUBLE
25992: EQUAL
25993: IFTRUE 25997
25995: GO 26023
25997: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25998: LD_ADDR_VAR 0 3
26002: PUSH
26003: LD_INT 21
26005: PUSH
26006: LD_INT 22
26008: PUSH
26009: LD_INT 23
26011: PUSH
26012: LD_INT 24
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: ST_TO_ADDR
26021: GO 26306
26023: LD_INT 43
26025: DOUBLE
26026: EQUAL
26027: IFTRUE 26031
26029: GO 26057
26031: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26032: LD_ADDR_VAR 0 3
26036: PUSH
26037: LD_INT 21
26039: PUSH
26040: LD_INT 22
26042: PUSH
26043: LD_INT 23
26045: PUSH
26046: LD_INT 24
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: ST_TO_ADDR
26055: GO 26306
26057: LD_INT 44
26059: DOUBLE
26060: EQUAL
26061: IFTRUE 26065
26063: GO 26091
26065: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26066: LD_ADDR_VAR 0 3
26070: PUSH
26071: LD_INT 21
26073: PUSH
26074: LD_INT 22
26076: PUSH
26077: LD_INT 23
26079: PUSH
26080: LD_INT 24
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: ST_TO_ADDR
26089: GO 26306
26091: LD_INT 45
26093: DOUBLE
26094: EQUAL
26095: IFTRUE 26099
26097: GO 26125
26099: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26100: LD_ADDR_VAR 0 3
26104: PUSH
26105: LD_INT 21
26107: PUSH
26108: LD_INT 22
26110: PUSH
26111: LD_INT 23
26113: PUSH
26114: LD_INT 24
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: ST_TO_ADDR
26123: GO 26306
26125: LD_INT 49
26127: DOUBLE
26128: EQUAL
26129: IFTRUE 26133
26131: GO 26159
26133: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26134: LD_ADDR_VAR 0 3
26138: PUSH
26139: LD_INT 21
26141: PUSH
26142: LD_INT 22
26144: PUSH
26145: LD_INT 23
26147: PUSH
26148: LD_INT 24
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: ST_TO_ADDR
26157: GO 26306
26159: LD_INT 51
26161: DOUBLE
26162: EQUAL
26163: IFTRUE 26167
26165: GO 26193
26167: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26168: LD_ADDR_VAR 0 3
26172: PUSH
26173: LD_INT 21
26175: PUSH
26176: LD_INT 22
26178: PUSH
26179: LD_INT 23
26181: PUSH
26182: LD_INT 24
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: ST_TO_ADDR
26191: GO 26306
26193: LD_INT 52
26195: DOUBLE
26196: EQUAL
26197: IFTRUE 26201
26199: GO 26227
26201: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26202: LD_ADDR_VAR 0 3
26206: PUSH
26207: LD_INT 21
26209: PUSH
26210: LD_INT 22
26212: PUSH
26213: LD_INT 23
26215: PUSH
26216: LD_INT 24
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: ST_TO_ADDR
26225: GO 26306
26227: LD_INT 53
26229: DOUBLE
26230: EQUAL
26231: IFTRUE 26235
26233: GO 26253
26235: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26236: LD_ADDR_VAR 0 3
26240: PUSH
26241: LD_INT 23
26243: PUSH
26244: LD_INT 24
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: ST_TO_ADDR
26251: GO 26306
26253: LD_INT 46
26255: DOUBLE
26256: EQUAL
26257: IFTRUE 26261
26259: GO 26279
26261: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26262: LD_ADDR_VAR 0 3
26266: PUSH
26267: LD_INT 23
26269: PUSH
26270: LD_INT 24
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: ST_TO_ADDR
26277: GO 26306
26279: LD_INT 47
26281: DOUBLE
26282: EQUAL
26283: IFTRUE 26287
26285: GO 26305
26287: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26288: LD_ADDR_VAR 0 3
26292: PUSH
26293: LD_INT 23
26295: PUSH
26296: LD_INT 24
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: ST_TO_ADDR
26303: GO 26306
26305: POP
// result := ( chassis in result ) ;
26306: LD_ADDR_VAR 0 3
26310: PUSH
26311: LD_VAR 0 1
26315: PUSH
26316: LD_VAR 0 3
26320: IN
26321: ST_TO_ADDR
// end ;
26322: LD_VAR 0 3
26326: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26327: LD_INT 0
26329: PPUSH
26330: PPUSH
26331: PPUSH
26332: PPUSH
26333: PPUSH
26334: PPUSH
26335: PPUSH
// result := array ;
26336: LD_ADDR_VAR 0 5
26340: PUSH
26341: LD_VAR 0 1
26345: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26346: LD_VAR 0 1
26350: NOT
26351: IFTRUE 26360
26353: PUSH
26354: LD_VAR 0 2
26358: NOT
26359: OR
26360: IFTRUE 26369
26362: PUSH
26363: LD_VAR 0 3
26367: NOT
26368: OR
26369: IFTRUE 26383
26371: PUSH
26372: LD_VAR 0 2
26376: PUSH
26377: LD_VAR 0 1
26381: GREATER
26382: OR
26383: IFTRUE 26397
26385: PUSH
26386: LD_VAR 0 3
26390: PUSH
26391: LD_VAR 0 1
26395: GREATER
26396: OR
26397: IFFALSE 26401
// exit ;
26399: GO 26697
// if direction then
26401: LD_VAR 0 4
26405: IFFALSE 26469
// begin d := 1 ;
26407: LD_ADDR_VAR 0 9
26411: PUSH
26412: LD_INT 1
26414: ST_TO_ADDR
// if i_from > i_to then
26415: LD_VAR 0 2
26419: PUSH
26420: LD_VAR 0 3
26424: GREATER
26425: IFFALSE 26451
// length := ( array - i_from ) + i_to else
26427: LD_ADDR_VAR 0 11
26431: PUSH
26432: LD_VAR 0 1
26436: PUSH
26437: LD_VAR 0 2
26441: MINUS
26442: PUSH
26443: LD_VAR 0 3
26447: PLUS
26448: ST_TO_ADDR
26449: GO 26467
// length := i_to - i_from ;
26451: LD_ADDR_VAR 0 11
26455: PUSH
26456: LD_VAR 0 3
26460: PUSH
26461: LD_VAR 0 2
26465: MINUS
26466: ST_TO_ADDR
// end else
26467: GO 26530
// begin d := - 1 ;
26469: LD_ADDR_VAR 0 9
26473: PUSH
26474: LD_INT 1
26476: NEG
26477: ST_TO_ADDR
// if i_from > i_to then
26478: LD_VAR 0 2
26482: PUSH
26483: LD_VAR 0 3
26487: GREATER
26488: IFFALSE 26508
// length := i_from - i_to else
26490: LD_ADDR_VAR 0 11
26494: PUSH
26495: LD_VAR 0 2
26499: PUSH
26500: LD_VAR 0 3
26504: MINUS
26505: ST_TO_ADDR
26506: GO 26530
// length := ( array - i_to ) + i_from ;
26508: LD_ADDR_VAR 0 11
26512: PUSH
26513: LD_VAR 0 1
26517: PUSH
26518: LD_VAR 0 3
26522: MINUS
26523: PUSH
26524: LD_VAR 0 2
26528: PLUS
26529: ST_TO_ADDR
// end ; if not length then
26530: LD_VAR 0 11
26534: NOT
26535: IFFALSE 26539
// exit ;
26537: GO 26697
// tmp := array ;
26539: LD_ADDR_VAR 0 10
26543: PUSH
26544: LD_VAR 0 1
26548: ST_TO_ADDR
// for i = 1 to length do
26549: LD_ADDR_VAR 0 6
26553: PUSH
26554: DOUBLE
26555: LD_INT 1
26557: DEC
26558: ST_TO_ADDR
26559: LD_VAR 0 11
26563: PUSH
26564: FOR_TO
26565: IFFALSE 26685
// begin for j = 1 to array do
26567: LD_ADDR_VAR 0 7
26571: PUSH
26572: DOUBLE
26573: LD_INT 1
26575: DEC
26576: ST_TO_ADDR
26577: LD_VAR 0 1
26581: PUSH
26582: FOR_TO
26583: IFFALSE 26671
// begin k := j + d ;
26585: LD_ADDR_VAR 0 8
26589: PUSH
26590: LD_VAR 0 7
26594: PUSH
26595: LD_VAR 0 9
26599: PLUS
26600: ST_TO_ADDR
// if k > array then
26601: LD_VAR 0 8
26605: PUSH
26606: LD_VAR 0 1
26610: GREATER
26611: IFFALSE 26621
// k := 1 ;
26613: LD_ADDR_VAR 0 8
26617: PUSH
26618: LD_INT 1
26620: ST_TO_ADDR
// if not k then
26621: LD_VAR 0 8
26625: NOT
26626: IFFALSE 26638
// k := array ;
26628: LD_ADDR_VAR 0 8
26632: PUSH
26633: LD_VAR 0 1
26637: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26638: LD_ADDR_VAR 0 10
26642: PUSH
26643: LD_VAR 0 10
26647: PPUSH
26648: LD_VAR 0 8
26652: PPUSH
26653: LD_VAR 0 1
26657: PUSH
26658: LD_VAR 0 7
26662: ARRAY
26663: PPUSH
26664: CALL_OW 1
26668: ST_TO_ADDR
// end ;
26669: GO 26582
26671: POP
26672: POP
// array := tmp ;
26673: LD_ADDR_VAR 0 1
26677: PUSH
26678: LD_VAR 0 10
26682: ST_TO_ADDR
// end ;
26683: GO 26564
26685: POP
26686: POP
// result := array ;
26687: LD_ADDR_VAR 0 5
26691: PUSH
26692: LD_VAR 0 1
26696: ST_TO_ADDR
// end ;
26697: LD_VAR 0 5
26701: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26702: LD_INT 0
26704: PPUSH
26705: PPUSH
// result := 0 ;
26706: LD_ADDR_VAR 0 3
26710: PUSH
26711: LD_INT 0
26713: ST_TO_ADDR
// if not array or not value in array then
26714: LD_VAR 0 1
26718: NOT
26719: IFTRUE 26734
26721: PUSH
26722: LD_VAR 0 2
26726: PUSH
26727: LD_VAR 0 1
26731: IN
26732: NOT
26733: OR
26734: IFFALSE 26738
// exit ;
26736: GO 26792
// for i = 1 to array do
26738: LD_ADDR_VAR 0 4
26742: PUSH
26743: DOUBLE
26744: LD_INT 1
26746: DEC
26747: ST_TO_ADDR
26748: LD_VAR 0 1
26752: PUSH
26753: FOR_TO
26754: IFFALSE 26790
// if value = array [ i ] then
26756: LD_VAR 0 2
26760: PUSH
26761: LD_VAR 0 1
26765: PUSH
26766: LD_VAR 0 4
26770: ARRAY
26771: EQUAL
26772: IFFALSE 26788
// begin result := i ;
26774: LD_ADDR_VAR 0 3
26778: PUSH
26779: LD_VAR 0 4
26783: ST_TO_ADDR
// exit ;
26784: POP
26785: POP
26786: GO 26792
// end ;
26788: GO 26753
26790: POP
26791: POP
// end ;
26792: LD_VAR 0 3
26796: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26797: LD_INT 0
26799: PPUSH
// vc_chassis := chassis ;
26800: LD_ADDR_OWVAR 37
26804: PUSH
26805: LD_VAR 0 1
26809: ST_TO_ADDR
// vc_engine := engine ;
26810: LD_ADDR_OWVAR 39
26814: PUSH
26815: LD_VAR 0 2
26819: ST_TO_ADDR
// vc_control := control ;
26820: LD_ADDR_OWVAR 38
26824: PUSH
26825: LD_VAR 0 3
26829: ST_TO_ADDR
// vc_weapon := weapon ;
26830: LD_ADDR_OWVAR 40
26834: PUSH
26835: LD_VAR 0 4
26839: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26840: LD_ADDR_OWVAR 41
26844: PUSH
26845: LD_VAR 0 5
26849: ST_TO_ADDR
// end ;
26850: LD_VAR 0 6
26854: RET
// export function WantPlant ( unit ) ; var task ; begin
26855: LD_INT 0
26857: PPUSH
26858: PPUSH
// result := false ;
26859: LD_ADDR_VAR 0 2
26863: PUSH
26864: LD_INT 0
26866: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26867: LD_ADDR_VAR 0 3
26871: PUSH
26872: LD_VAR 0 1
26876: PPUSH
26877: CALL_OW 437
26881: ST_TO_ADDR
// if task then
26882: LD_VAR 0 3
26886: IFFALSE 26914
// if task [ 1 ] [ 1 ] = p then
26888: LD_VAR 0 3
26892: PUSH
26893: LD_INT 1
26895: ARRAY
26896: PUSH
26897: LD_INT 1
26899: ARRAY
26900: PUSH
26901: LD_STRING p
26903: EQUAL
26904: IFFALSE 26914
// result := true ;
26906: LD_ADDR_VAR 0 2
26910: PUSH
26911: LD_INT 1
26913: ST_TO_ADDR
// end ;
26914: LD_VAR 0 2
26918: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26919: LD_INT 0
26921: PPUSH
26922: PPUSH
26923: PPUSH
26924: PPUSH
// if pos < 1 then
26925: LD_VAR 0 2
26929: PUSH
26930: LD_INT 1
26932: LESS
26933: IFFALSE 26937
// exit ;
26935: GO 27240
// if pos = 1 then
26937: LD_VAR 0 2
26941: PUSH
26942: LD_INT 1
26944: EQUAL
26945: IFFALSE 26978
// result := Replace ( arr , pos [ 1 ] , value ) else
26947: LD_ADDR_VAR 0 4
26951: PUSH
26952: LD_VAR 0 1
26956: PPUSH
26957: LD_VAR 0 2
26961: PUSH
26962: LD_INT 1
26964: ARRAY
26965: PPUSH
26966: LD_VAR 0 3
26970: PPUSH
26971: CALL_OW 1
26975: ST_TO_ADDR
26976: GO 27240
// begin tmp := arr ;
26978: LD_ADDR_VAR 0 6
26982: PUSH
26983: LD_VAR 0 1
26987: ST_TO_ADDR
// s_arr := [ tmp ] ;
26988: LD_ADDR_VAR 0 7
26992: PUSH
26993: LD_VAR 0 6
26997: PUSH
26998: EMPTY
26999: LIST
27000: ST_TO_ADDR
// for i = 1 to pos - 1 do
27001: LD_ADDR_VAR 0 5
27005: PUSH
27006: DOUBLE
27007: LD_INT 1
27009: DEC
27010: ST_TO_ADDR
27011: LD_VAR 0 2
27015: PUSH
27016: LD_INT 1
27018: MINUS
27019: PUSH
27020: FOR_TO
27021: IFFALSE 27066
// begin tmp := tmp [ pos [ i ] ] ;
27023: LD_ADDR_VAR 0 6
27027: PUSH
27028: LD_VAR 0 6
27032: PUSH
27033: LD_VAR 0 2
27037: PUSH
27038: LD_VAR 0 5
27042: ARRAY
27043: ARRAY
27044: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27045: LD_ADDR_VAR 0 7
27049: PUSH
27050: LD_VAR 0 7
27054: PUSH
27055: LD_VAR 0 6
27059: PUSH
27060: EMPTY
27061: LIST
27062: ADD
27063: ST_TO_ADDR
// end ;
27064: GO 27020
27066: POP
27067: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27068: LD_ADDR_VAR 0 6
27072: PUSH
27073: LD_VAR 0 6
27077: PPUSH
27078: LD_VAR 0 2
27082: PUSH
27083: LD_VAR 0 2
27087: ARRAY
27088: PPUSH
27089: LD_VAR 0 3
27093: PPUSH
27094: CALL_OW 1
27098: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27099: LD_ADDR_VAR 0 7
27103: PUSH
27104: LD_VAR 0 7
27108: PPUSH
27109: LD_VAR 0 7
27113: PPUSH
27114: LD_VAR 0 6
27118: PPUSH
27119: CALL_OW 1
27123: ST_TO_ADDR
// for i = s_arr downto 2 do
27124: LD_ADDR_VAR 0 5
27128: PUSH
27129: DOUBLE
27130: LD_VAR 0 7
27134: INC
27135: ST_TO_ADDR
27136: LD_INT 2
27138: PUSH
27139: FOR_DOWNTO
27140: IFFALSE 27224
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27142: LD_ADDR_VAR 0 6
27146: PUSH
27147: LD_VAR 0 7
27151: PUSH
27152: LD_VAR 0 5
27156: PUSH
27157: LD_INT 1
27159: MINUS
27160: ARRAY
27161: PPUSH
27162: LD_VAR 0 2
27166: PUSH
27167: LD_VAR 0 5
27171: PUSH
27172: LD_INT 1
27174: MINUS
27175: ARRAY
27176: PPUSH
27177: LD_VAR 0 7
27181: PUSH
27182: LD_VAR 0 5
27186: ARRAY
27187: PPUSH
27188: CALL_OW 1
27192: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27193: LD_ADDR_VAR 0 7
27197: PUSH
27198: LD_VAR 0 7
27202: PPUSH
27203: LD_VAR 0 5
27207: PUSH
27208: LD_INT 1
27210: MINUS
27211: PPUSH
27212: LD_VAR 0 6
27216: PPUSH
27217: CALL_OW 1
27221: ST_TO_ADDR
// end ;
27222: GO 27139
27224: POP
27225: POP
// result := s_arr [ 1 ] ;
27226: LD_ADDR_VAR 0 4
27230: PUSH
27231: LD_VAR 0 7
27235: PUSH
27236: LD_INT 1
27238: ARRAY
27239: ST_TO_ADDR
// end ; end ;
27240: LD_VAR 0 4
27244: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27245: LD_INT 0
27247: PPUSH
27248: PPUSH
// if not list then
27249: LD_VAR 0 1
27253: NOT
27254: IFFALSE 27258
// exit ;
27256: GO 27349
// i := list [ pos1 ] ;
27258: LD_ADDR_VAR 0 5
27262: PUSH
27263: LD_VAR 0 1
27267: PUSH
27268: LD_VAR 0 2
27272: ARRAY
27273: ST_TO_ADDR
// if not i then
27274: LD_VAR 0 5
27278: NOT
27279: IFFALSE 27283
// exit ;
27281: GO 27349
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27283: LD_ADDR_VAR 0 1
27287: PUSH
27288: LD_VAR 0 1
27292: PPUSH
27293: LD_VAR 0 2
27297: PPUSH
27298: LD_VAR 0 1
27302: PUSH
27303: LD_VAR 0 3
27307: ARRAY
27308: PPUSH
27309: CALL_OW 1
27313: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27314: LD_ADDR_VAR 0 1
27318: PUSH
27319: LD_VAR 0 1
27323: PPUSH
27324: LD_VAR 0 3
27328: PPUSH
27329: LD_VAR 0 5
27333: PPUSH
27334: CALL_OW 1
27338: ST_TO_ADDR
// result := list ;
27339: LD_ADDR_VAR 0 4
27343: PUSH
27344: LD_VAR 0 1
27348: ST_TO_ADDR
// end ;
27349: LD_VAR 0 4
27353: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27354: LD_INT 0
27356: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27357: LD_ADDR_VAR 0 5
27361: PUSH
27362: LD_VAR 0 1
27366: PPUSH
27367: CALL_OW 250
27371: PPUSH
27372: LD_VAR 0 1
27376: PPUSH
27377: CALL_OW 251
27381: PPUSH
27382: LD_VAR 0 2
27386: PPUSH
27387: LD_VAR 0 3
27391: PPUSH
27392: LD_VAR 0 4
27396: PPUSH
27397: CALL 27779 0 5
27401: ST_TO_ADDR
// end ;
27402: LD_VAR 0 5
27406: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
27407: LD_INT 0
27409: PPUSH
27410: PPUSH
27411: PPUSH
27412: PPUSH
// if not list or not unit then
27413: LD_VAR 0 2
27417: NOT
27418: IFTRUE 27427
27420: PUSH
27421: LD_VAR 0 1
27425: NOT
27426: OR
27427: IFFALSE 27431
// exit ;
27429: GO 27774
// result := [ ] ;
27431: LD_ADDR_VAR 0 5
27435: PUSH
27436: EMPTY
27437: ST_TO_ADDR
// for i in list do
27438: LD_ADDR_VAR 0 6
27442: PUSH
27443: LD_VAR 0 2
27447: PUSH
27448: FOR_IN
27449: IFFALSE 27667
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
27451: LD_ADDR_VAR 0 8
27455: PUSH
27456: LD_VAR 0 1
27460: PPUSH
27461: LD_VAR 0 6
27465: PUSH
27466: LD_INT 1
27468: ARRAY
27469: PPUSH
27470: LD_VAR 0 6
27474: PUSH
27475: LD_INT 2
27477: ARRAY
27478: PPUSH
27479: CALL_OW 297
27483: ST_TO_ADDR
// if not Count ( result ) then
27484: LD_VAR 0 5
27488: PPUSH
27489: CALL 24035 0 1
27493: NOT
27494: IFFALSE 27527
// begin result := Join ( result , [ i , tmp ] ) ;
27496: LD_ADDR_VAR 0 5
27500: PUSH
27501: LD_VAR 0 5
27505: PPUSH
27506: LD_VAR 0 6
27510: PUSH
27511: LD_VAR 0 8
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PPUSH
27520: CALL 59967 0 2
27524: ST_TO_ADDR
// continue ;
27525: GO 27448
// end ; if result [ result ] [ 2 ] <= tmp then
27527: LD_VAR 0 5
27531: PUSH
27532: LD_VAR 0 5
27536: ARRAY
27537: PUSH
27538: LD_INT 2
27540: ARRAY
27541: PUSH
27542: LD_VAR 0 8
27546: LESSEQUAL
27547: IFFALSE 27580
// result := Join ( result , [ i , tmp ] ) else
27549: LD_ADDR_VAR 0 5
27553: PUSH
27554: LD_VAR 0 5
27558: PPUSH
27559: LD_VAR 0 6
27563: PUSH
27564: LD_VAR 0 8
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PPUSH
27573: CALL 59967 0 2
27577: ST_TO_ADDR
27578: GO 27665
// begin for j := 1 to Count ( result ) do
27580: LD_ADDR_VAR 0 7
27584: PUSH
27585: DOUBLE
27586: LD_INT 1
27588: DEC
27589: ST_TO_ADDR
27590: LD_VAR 0 5
27594: PPUSH
27595: CALL 24035 0 1
27599: PUSH
27600: FOR_TO
27601: IFFALSE 27663
// begin if tmp < result [ j ] [ 2 ] then
27603: LD_VAR 0 8
27607: PUSH
27608: LD_VAR 0 5
27612: PUSH
27613: LD_VAR 0 7
27617: ARRAY
27618: PUSH
27619: LD_INT 2
27621: ARRAY
27622: LESS
27623: IFFALSE 27661
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27625: LD_ADDR_VAR 0 5
27629: PUSH
27630: LD_VAR 0 5
27634: PPUSH
27635: LD_VAR 0 7
27639: PPUSH
27640: LD_VAR 0 6
27644: PUSH
27645: LD_VAR 0 8
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: PPUSH
27654: CALL_OW 2
27658: ST_TO_ADDR
// break ;
27659: GO 27663
// end ; end ;
27661: GO 27600
27663: POP
27664: POP
// end ; end ;
27665: GO 27448
27667: POP
27668: POP
// if result and not asc then
27669: LD_VAR 0 5
27673: IFFALSE 27682
27675: PUSH
27676: LD_VAR 0 3
27680: NOT
27681: AND
27682: IFFALSE 27699
// result := ReverseArray ( result ) ;
27684: LD_ADDR_VAR 0 5
27688: PUSH
27689: LD_VAR 0 5
27693: PPUSH
27694: CALL 55057 0 1
27698: ST_TO_ADDR
// tmp := [ ] ;
27699: LD_ADDR_VAR 0 8
27703: PUSH
27704: EMPTY
27705: ST_TO_ADDR
// if mode then
27706: LD_VAR 0 4
27710: IFFALSE 27774
// begin for i := 1 to result do
27712: LD_ADDR_VAR 0 6
27716: PUSH
27717: DOUBLE
27718: LD_INT 1
27720: DEC
27721: ST_TO_ADDR
27722: LD_VAR 0 5
27726: PUSH
27727: FOR_TO
27728: IFFALSE 27762
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
27730: LD_ADDR_VAR 0 8
27734: PUSH
27735: LD_VAR 0 8
27739: PPUSH
27740: LD_VAR 0 5
27744: PUSH
27745: LD_VAR 0 6
27749: ARRAY
27750: PUSH
27751: LD_INT 1
27753: ARRAY
27754: PPUSH
27755: CALL 59967 0 2
27759: ST_TO_ADDR
27760: GO 27727
27762: POP
27763: POP
// result := tmp ;
27764: LD_ADDR_VAR 0 5
27768: PUSH
27769: LD_VAR 0 8
27773: ST_TO_ADDR
// end ; end ;
27774: LD_VAR 0 5
27778: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27779: LD_INT 0
27781: PPUSH
27782: PPUSH
27783: PPUSH
27784: PPUSH
// if not list then
27785: LD_VAR 0 3
27789: NOT
27790: IFFALSE 27794
// exit ;
27792: GO 28184
// result := [ ] ;
27794: LD_ADDR_VAR 0 6
27798: PUSH
27799: EMPTY
27800: ST_TO_ADDR
// for i in list do
27801: LD_ADDR_VAR 0 7
27805: PUSH
27806: LD_VAR 0 3
27810: PUSH
27811: FOR_IN
27812: IFFALSE 28014
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27814: LD_ADDR_VAR 0 9
27818: PUSH
27819: LD_VAR 0 7
27823: PPUSH
27824: LD_VAR 0 1
27828: PPUSH
27829: LD_VAR 0 2
27833: PPUSH
27834: CALL_OW 297
27838: ST_TO_ADDR
// if not result then
27839: LD_VAR 0 6
27843: NOT
27844: IFFALSE 27870
// result := [ [ i , tmp ] ] else
27846: LD_ADDR_VAR 0 6
27850: PUSH
27851: LD_VAR 0 7
27855: PUSH
27856: LD_VAR 0 9
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PUSH
27865: EMPTY
27866: LIST
27867: ST_TO_ADDR
27868: GO 28012
// begin if result [ result ] [ 2 ] <= tmp then
27870: LD_VAR 0 6
27874: PUSH
27875: LD_VAR 0 6
27879: ARRAY
27880: PUSH
27881: LD_INT 2
27883: ARRAY
27884: PUSH
27885: LD_VAR 0 9
27889: LESSEQUAL
27890: IFFALSE 27932
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27892: LD_ADDR_VAR 0 6
27896: PUSH
27897: LD_VAR 0 6
27901: PPUSH
27902: LD_VAR 0 6
27906: PUSH
27907: LD_INT 1
27909: PLUS
27910: PPUSH
27911: LD_VAR 0 7
27915: PUSH
27916: LD_VAR 0 9
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PPUSH
27925: CALL_OW 2
27929: ST_TO_ADDR
27930: GO 28012
// for j := 1 to result do
27932: LD_ADDR_VAR 0 8
27936: PUSH
27937: DOUBLE
27938: LD_INT 1
27940: DEC
27941: ST_TO_ADDR
27942: LD_VAR 0 6
27946: PUSH
27947: FOR_TO
27948: IFFALSE 28010
// begin if tmp < result [ j ] [ 2 ] then
27950: LD_VAR 0 9
27954: PUSH
27955: LD_VAR 0 6
27959: PUSH
27960: LD_VAR 0 8
27964: ARRAY
27965: PUSH
27966: LD_INT 2
27968: ARRAY
27969: LESS
27970: IFFALSE 28008
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27972: LD_ADDR_VAR 0 6
27976: PUSH
27977: LD_VAR 0 6
27981: PPUSH
27982: LD_VAR 0 8
27986: PPUSH
27987: LD_VAR 0 7
27991: PUSH
27992: LD_VAR 0 9
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PPUSH
28001: CALL_OW 2
28005: ST_TO_ADDR
// break ;
28006: GO 28010
// end ; end ;
28008: GO 27947
28010: POP
28011: POP
// end ; end ;
28012: GO 27811
28014: POP
28015: POP
// if result and not asc then
28016: LD_VAR 0 6
28020: IFFALSE 28029
28022: PUSH
28023: LD_VAR 0 4
28027: NOT
28028: AND
28029: IFFALSE 28104
// begin tmp := result ;
28031: LD_ADDR_VAR 0 9
28035: PUSH
28036: LD_VAR 0 6
28040: ST_TO_ADDR
// for i = tmp downto 1 do
28041: LD_ADDR_VAR 0 7
28045: PUSH
28046: DOUBLE
28047: LD_VAR 0 9
28051: INC
28052: ST_TO_ADDR
28053: LD_INT 1
28055: PUSH
28056: FOR_DOWNTO
28057: IFFALSE 28102
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
28059: LD_ADDR_VAR 0 6
28063: PUSH
28064: LD_VAR 0 6
28068: PPUSH
28069: LD_VAR 0 9
28073: PUSH
28074: LD_VAR 0 7
28078: MINUS
28079: PUSH
28080: LD_INT 1
28082: PLUS
28083: PPUSH
28084: LD_VAR 0 9
28088: PUSH
28089: LD_VAR 0 7
28093: ARRAY
28094: PPUSH
28095: CALL_OW 1
28099: ST_TO_ADDR
28100: GO 28056
28102: POP
28103: POP
// end ; tmp := [ ] ;
28104: LD_ADDR_VAR 0 9
28108: PUSH
28109: EMPTY
28110: ST_TO_ADDR
// if mode then
28111: LD_VAR 0 5
28115: IFFALSE 28184
// begin for i = 1 to result do
28117: LD_ADDR_VAR 0 7
28121: PUSH
28122: DOUBLE
28123: LD_INT 1
28125: DEC
28126: ST_TO_ADDR
28127: LD_VAR 0 6
28131: PUSH
28132: FOR_TO
28133: IFFALSE 28172
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
28135: LD_ADDR_VAR 0 9
28139: PUSH
28140: LD_VAR 0 9
28144: PPUSH
28145: LD_VAR 0 7
28149: PPUSH
28150: LD_VAR 0 6
28154: PUSH
28155: LD_VAR 0 7
28159: ARRAY
28160: PUSH
28161: LD_INT 1
28163: ARRAY
28164: PPUSH
28165: CALL_OW 1
28169: ST_TO_ADDR
28170: GO 28132
28172: POP
28173: POP
// result := tmp ;
28174: LD_ADDR_VAR 0 6
28178: PUSH
28179: LD_VAR 0 9
28183: ST_TO_ADDR
// end ; end ;
28184: LD_VAR 0 6
28188: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
28189: LD_INT 0
28191: PPUSH
28192: PPUSH
28193: PPUSH
28194: PPUSH
28195: PPUSH
28196: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
28197: LD_ADDR_VAR 0 5
28201: PUSH
28202: LD_INT 0
28204: PUSH
28205: LD_INT 0
28207: PUSH
28208: LD_INT 0
28210: PUSH
28211: EMPTY
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: ST_TO_ADDR
// if not x or not y then
28219: LD_VAR 0 2
28223: NOT
28224: IFTRUE 28233
28226: PUSH
28227: LD_VAR 0 3
28231: NOT
28232: OR
28233: IFFALSE 28237
// exit ;
28235: GO 29893
// if not range then
28237: LD_VAR 0 4
28241: NOT
28242: IFFALSE 28252
// range := 10 ;
28244: LD_ADDR_VAR 0 4
28248: PUSH
28249: LD_INT 10
28251: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28252: LD_ADDR_VAR 0 8
28256: PUSH
28257: LD_INT 81
28259: PUSH
28260: LD_VAR 0 1
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 92
28271: PUSH
28272: LD_VAR 0 2
28276: PUSH
28277: LD_VAR 0 3
28281: PUSH
28282: LD_VAR 0 4
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: PUSH
28293: LD_INT 3
28295: PUSH
28296: LD_INT 21
28298: PUSH
28299: LD_INT 3
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: LIST
28314: PPUSH
28315: CALL_OW 69
28319: ST_TO_ADDR
// if not tmp then
28320: LD_VAR 0 8
28324: NOT
28325: IFFALSE 28329
// exit ;
28327: GO 29893
// for i in tmp do
28329: LD_ADDR_VAR 0 6
28333: PUSH
28334: LD_VAR 0 8
28338: PUSH
28339: FOR_IN
28340: IFFALSE 29868
// begin points := [ 0 , 0 , 0 ] ;
28342: LD_ADDR_VAR 0 9
28346: PUSH
28347: LD_INT 0
28349: PUSH
28350: LD_INT 0
28352: PUSH
28353: LD_INT 0
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: LIST
28360: ST_TO_ADDR
// bpoints := 1 ;
28361: LD_ADDR_VAR 0 10
28365: PUSH
28366: LD_INT 1
28368: ST_TO_ADDR
// case GetType ( i ) of unit_human :
28369: LD_VAR 0 6
28373: PPUSH
28374: CALL_OW 247
28378: PUSH
28379: LD_INT 1
28381: DOUBLE
28382: EQUAL
28383: IFTRUE 28387
28385: GO 28969
28387: POP
// begin if GetClass ( i ) = 1 then
28388: LD_VAR 0 6
28392: PPUSH
28393: CALL_OW 257
28397: PUSH
28398: LD_INT 1
28400: EQUAL
28401: IFFALSE 28422
// points := [ 10 , 5 , 3 ] ;
28403: LD_ADDR_VAR 0 9
28407: PUSH
28408: LD_INT 10
28410: PUSH
28411: LD_INT 5
28413: PUSH
28414: LD_INT 3
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: LIST
28421: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
28422: LD_VAR 0 6
28426: PPUSH
28427: CALL_OW 257
28431: PUSH
28432: LD_INT 2
28434: PUSH
28435: LD_INT 3
28437: PUSH
28438: LD_INT 4
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: LIST
28445: IN
28446: IFFALSE 28467
// points := [ 3 , 2 , 1 ] ;
28448: LD_ADDR_VAR 0 9
28452: PUSH
28453: LD_INT 3
28455: PUSH
28456: LD_INT 2
28458: PUSH
28459: LD_INT 1
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: LIST
28466: ST_TO_ADDR
// if GetClass ( i ) = 5 then
28467: LD_VAR 0 6
28471: PPUSH
28472: CALL_OW 257
28476: PUSH
28477: LD_INT 5
28479: EQUAL
28480: IFFALSE 28501
// points := [ 130 , 5 , 2 ] ;
28482: LD_ADDR_VAR 0 9
28486: PUSH
28487: LD_INT 130
28489: PUSH
28490: LD_INT 5
28492: PUSH
28493: LD_INT 2
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: LIST
28500: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28501: LD_VAR 0 6
28505: PPUSH
28506: CALL_OW 257
28510: PUSH
28511: LD_INT 8
28513: EQUAL
28514: IFFALSE 28535
// points := [ 35 , 35 , 30 ] ;
28516: LD_ADDR_VAR 0 9
28520: PUSH
28521: LD_INT 35
28523: PUSH
28524: LD_INT 35
28526: PUSH
28527: LD_INT 30
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: LIST
28534: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28535: LD_VAR 0 6
28539: PPUSH
28540: CALL_OW 257
28544: PUSH
28545: LD_INT 9
28547: EQUAL
28548: IFFALSE 28569
// points := [ 20 , 55 , 40 ] ;
28550: LD_ADDR_VAR 0 9
28554: PUSH
28555: LD_INT 20
28557: PUSH
28558: LD_INT 55
28560: PUSH
28561: LD_INT 40
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: LIST
28568: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28569: LD_VAR 0 6
28573: PPUSH
28574: CALL_OW 257
28578: PUSH
28579: LD_INT 12
28581: PUSH
28582: LD_INT 16
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: IN
28589: IFFALSE 28610
// points := [ 5 , 3 , 2 ] ;
28591: LD_ADDR_VAR 0 9
28595: PUSH
28596: LD_INT 5
28598: PUSH
28599: LD_INT 3
28601: PUSH
28602: LD_INT 2
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: LIST
28609: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28610: LD_VAR 0 6
28614: PPUSH
28615: CALL_OW 257
28619: PUSH
28620: LD_INT 17
28622: EQUAL
28623: IFFALSE 28644
// points := [ 100 , 50 , 75 ] ;
28625: LD_ADDR_VAR 0 9
28629: PUSH
28630: LD_INT 100
28632: PUSH
28633: LD_INT 50
28635: PUSH
28636: LD_INT 75
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: LIST
28643: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28644: LD_VAR 0 6
28648: PPUSH
28649: CALL_OW 257
28653: PUSH
28654: LD_INT 15
28656: EQUAL
28657: IFFALSE 28678
// points := [ 10 , 5 , 3 ] ;
28659: LD_ADDR_VAR 0 9
28663: PUSH
28664: LD_INT 10
28666: PUSH
28667: LD_INT 5
28669: PUSH
28670: LD_INT 3
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: LIST
28677: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28678: LD_VAR 0 6
28682: PPUSH
28683: CALL_OW 257
28687: PUSH
28688: LD_INT 14
28690: EQUAL
28691: IFFALSE 28712
// points := [ 10 , 0 , 0 ] ;
28693: LD_ADDR_VAR 0 9
28697: PUSH
28698: LD_INT 10
28700: PUSH
28701: LD_INT 0
28703: PUSH
28704: LD_INT 0
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: LIST
28711: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28712: LD_VAR 0 6
28716: PPUSH
28717: CALL_OW 257
28721: PUSH
28722: LD_INT 11
28724: EQUAL
28725: IFFALSE 28746
// points := [ 30 , 10 , 5 ] ;
28727: LD_ADDR_VAR 0 9
28731: PUSH
28732: LD_INT 30
28734: PUSH
28735: LD_INT 10
28737: PUSH
28738: LD_INT 5
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: LIST
28745: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28746: LD_VAR 0 1
28750: PPUSH
28751: LD_INT 5
28753: PPUSH
28754: CALL_OW 321
28758: PUSH
28759: LD_INT 2
28761: EQUAL
28762: IFFALSE 28779
// bpoints := bpoints * 1.8 ;
28764: LD_ADDR_VAR 0 10
28768: PUSH
28769: LD_VAR 0 10
28773: PUSH
28774: LD_REAL  1.80000000000000E+0000
28777: MUL
28778: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28779: LD_VAR 0 6
28783: PPUSH
28784: CALL_OW 257
28788: PUSH
28789: LD_INT 1
28791: PUSH
28792: LD_INT 2
28794: PUSH
28795: LD_INT 3
28797: PUSH
28798: LD_INT 4
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: IN
28807: IFFALSE 28827
28809: PUSH
28810: LD_VAR 0 1
28814: PPUSH
28815: LD_INT 51
28817: PPUSH
28818: CALL_OW 321
28822: PUSH
28823: LD_INT 2
28825: EQUAL
28826: AND
28827: IFFALSE 28844
// bpoints := bpoints * 1.2 ;
28829: LD_ADDR_VAR 0 10
28833: PUSH
28834: LD_VAR 0 10
28838: PUSH
28839: LD_REAL  1.20000000000000E+0000
28842: MUL
28843: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28844: LD_VAR 0 6
28848: PPUSH
28849: CALL_OW 257
28853: PUSH
28854: LD_INT 5
28856: PUSH
28857: LD_INT 7
28859: PUSH
28860: LD_INT 9
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: LIST
28867: IN
28868: IFFALSE 28888
28870: PUSH
28871: LD_VAR 0 1
28875: PPUSH
28876: LD_INT 52
28878: PPUSH
28879: CALL_OW 321
28883: PUSH
28884: LD_INT 2
28886: EQUAL
28887: AND
28888: IFFALSE 28905
// bpoints := bpoints * 1.5 ;
28890: LD_ADDR_VAR 0 10
28894: PUSH
28895: LD_VAR 0 10
28899: PUSH
28900: LD_REAL  1.50000000000000E+0000
28903: MUL
28904: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28905: LD_VAR 0 1
28909: PPUSH
28910: LD_INT 66
28912: PPUSH
28913: CALL_OW 321
28917: PUSH
28918: LD_INT 2
28920: EQUAL
28921: IFFALSE 28938
// bpoints := bpoints * 1.1 ;
28923: LD_ADDR_VAR 0 10
28927: PUSH
28928: LD_VAR 0 10
28932: PUSH
28933: LD_REAL  1.10000000000000E+0000
28936: MUL
28937: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28938: LD_ADDR_VAR 0 10
28942: PUSH
28943: LD_VAR 0 10
28947: PUSH
28948: LD_VAR 0 6
28952: PPUSH
28953: LD_INT 1
28955: PPUSH
28956: CALL_OW 259
28960: PUSH
28961: LD_REAL  1.15000000000000E+0000
28964: MUL
28965: MUL
28966: ST_TO_ADDR
// end ; unit_vehicle :
28967: GO 29797
28969: LD_INT 2
28971: DOUBLE
28972: EQUAL
28973: IFTRUE 28977
28975: GO 29785
28977: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28978: LD_VAR 0 6
28982: PPUSH
28983: CALL_OW 264
28987: PUSH
28988: LD_INT 2
28990: PUSH
28991: LD_INT 42
28993: PUSH
28994: LD_INT 24
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: LIST
29001: IN
29002: IFFALSE 29023
// points := [ 25 , 5 , 3 ] ;
29004: LD_ADDR_VAR 0 9
29008: PUSH
29009: LD_INT 25
29011: PUSH
29012: LD_INT 5
29014: PUSH
29015: LD_INT 3
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: LIST
29022: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
29023: LD_VAR 0 6
29027: PPUSH
29028: CALL_OW 264
29032: PUSH
29033: LD_INT 4
29035: PUSH
29036: LD_INT 43
29038: PUSH
29039: LD_INT 25
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: LIST
29046: IN
29047: IFFALSE 29068
// points := [ 40 , 15 , 5 ] ;
29049: LD_ADDR_VAR 0 9
29053: PUSH
29054: LD_INT 40
29056: PUSH
29057: LD_INT 15
29059: PUSH
29060: LD_INT 5
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: LIST
29067: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
29068: LD_VAR 0 6
29072: PPUSH
29073: CALL_OW 264
29077: PUSH
29078: LD_INT 3
29080: PUSH
29081: LD_INT 23
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: IN
29088: IFFALSE 29109
// points := [ 7 , 25 , 8 ] ;
29090: LD_ADDR_VAR 0 9
29094: PUSH
29095: LD_INT 7
29097: PUSH
29098: LD_INT 25
29100: PUSH
29101: LD_INT 8
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: LIST
29108: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
29109: LD_VAR 0 6
29113: PPUSH
29114: CALL_OW 264
29118: PUSH
29119: LD_INT 5
29121: PUSH
29122: LD_INT 27
29124: PUSH
29125: LD_INT 44
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: LIST
29132: IN
29133: IFFALSE 29154
// points := [ 14 , 50 , 16 ] ;
29135: LD_ADDR_VAR 0 9
29139: PUSH
29140: LD_INT 14
29142: PUSH
29143: LD_INT 50
29145: PUSH
29146: LD_INT 16
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: LIST
29153: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
29154: LD_VAR 0 6
29158: PPUSH
29159: CALL_OW 264
29163: PUSH
29164: LD_INT 6
29166: PUSH
29167: LD_INT 46
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: IN
29174: IFFALSE 29195
// points := [ 32 , 120 , 70 ] ;
29176: LD_ADDR_VAR 0 9
29180: PUSH
29181: LD_INT 32
29183: PUSH
29184: LD_INT 120
29186: PUSH
29187: LD_INT 70
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: LIST
29194: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
29195: LD_VAR 0 6
29199: PPUSH
29200: CALL_OW 264
29204: PUSH
29205: LD_INT 7
29207: PUSH
29208: LD_INT 28
29210: PUSH
29211: LD_INT 45
29213: PUSH
29214: LD_INT 92
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: IN
29223: IFFALSE 29244
// points := [ 35 , 20 , 45 ] ;
29225: LD_ADDR_VAR 0 9
29229: PUSH
29230: LD_INT 35
29232: PUSH
29233: LD_INT 20
29235: PUSH
29236: LD_INT 45
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: LIST
29243: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
29244: LD_VAR 0 6
29248: PPUSH
29249: CALL_OW 264
29253: PUSH
29254: LD_INT 47
29256: PUSH
29257: EMPTY
29258: LIST
29259: IN
29260: IFFALSE 29281
// points := [ 67 , 45 , 75 ] ;
29262: LD_ADDR_VAR 0 9
29266: PUSH
29267: LD_INT 67
29269: PUSH
29270: LD_INT 45
29272: PUSH
29273: LD_INT 75
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: LIST
29280: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
29281: LD_VAR 0 6
29285: PPUSH
29286: CALL_OW 264
29290: PUSH
29291: LD_INT 26
29293: PUSH
29294: EMPTY
29295: LIST
29296: IN
29297: IFFALSE 29318
// points := [ 120 , 30 , 80 ] ;
29299: LD_ADDR_VAR 0 9
29303: PUSH
29304: LD_INT 120
29306: PUSH
29307: LD_INT 30
29309: PUSH
29310: LD_INT 80
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: LIST
29317: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
29318: LD_VAR 0 6
29322: PPUSH
29323: CALL_OW 264
29327: PUSH
29328: LD_INT 22
29330: PUSH
29331: EMPTY
29332: LIST
29333: IN
29334: IFFALSE 29355
// points := [ 40 , 1 , 1 ] ;
29336: LD_ADDR_VAR 0 9
29340: PUSH
29341: LD_INT 40
29343: PUSH
29344: LD_INT 1
29346: PUSH
29347: LD_INT 1
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: LIST
29354: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
29355: LD_VAR 0 6
29359: PPUSH
29360: CALL_OW 264
29364: PUSH
29365: LD_INT 29
29367: PUSH
29368: EMPTY
29369: LIST
29370: IN
29371: IFFALSE 29392
// points := [ 70 , 200 , 400 ] ;
29373: LD_ADDR_VAR 0 9
29377: PUSH
29378: LD_INT 70
29380: PUSH
29381: LD_INT 200
29383: PUSH
29384: LD_INT 400
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: LIST
29391: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
29392: LD_VAR 0 6
29396: PPUSH
29397: CALL_OW 264
29401: PUSH
29402: LD_INT 14
29404: PUSH
29405: LD_INT 53
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: IN
29412: IFFALSE 29433
// points := [ 40 , 10 , 20 ] ;
29414: LD_ADDR_VAR 0 9
29418: PUSH
29419: LD_INT 40
29421: PUSH
29422: LD_INT 10
29424: PUSH
29425: LD_INT 20
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: LIST
29432: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
29433: LD_VAR 0 6
29437: PPUSH
29438: CALL_OW 264
29442: PUSH
29443: LD_INT 9
29445: PUSH
29446: EMPTY
29447: LIST
29448: IN
29449: IFFALSE 29470
// points := [ 5 , 70 , 20 ] ;
29451: LD_ADDR_VAR 0 9
29455: PUSH
29456: LD_INT 5
29458: PUSH
29459: LD_INT 70
29461: PUSH
29462: LD_INT 20
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: LIST
29469: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
29470: LD_VAR 0 6
29474: PPUSH
29475: CALL_OW 264
29479: PUSH
29480: LD_INT 10
29482: PUSH
29483: EMPTY
29484: LIST
29485: IN
29486: IFFALSE 29507
// points := [ 35 , 110 , 70 ] ;
29488: LD_ADDR_VAR 0 9
29492: PUSH
29493: LD_INT 35
29495: PUSH
29496: LD_INT 110
29498: PUSH
29499: LD_INT 70
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: LIST
29506: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29507: LD_VAR 0 6
29511: PPUSH
29512: CALL_OW 265
29516: PUSH
29517: LD_INT 25
29519: EQUAL
29520: IFFALSE 29541
// points := [ 80 , 65 , 100 ] ;
29522: LD_ADDR_VAR 0 9
29526: PUSH
29527: LD_INT 80
29529: PUSH
29530: LD_INT 65
29532: PUSH
29533: LD_INT 100
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: LIST
29540: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29541: LD_VAR 0 6
29545: PPUSH
29546: CALL_OW 263
29550: PUSH
29551: LD_INT 1
29553: EQUAL
29554: IFFALSE 29589
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29556: LD_ADDR_VAR 0 10
29560: PUSH
29561: LD_VAR 0 10
29565: PUSH
29566: LD_VAR 0 6
29570: PPUSH
29571: CALL_OW 311
29575: PPUSH
29576: LD_INT 3
29578: PPUSH
29579: CALL_OW 259
29583: PUSH
29584: LD_INT 4
29586: MUL
29587: MUL
29588: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29589: LD_VAR 0 6
29593: PPUSH
29594: CALL_OW 263
29598: PUSH
29599: LD_INT 2
29601: EQUAL
29602: IFFALSE 29653
// begin j := IsControledBy ( i ) ;
29604: LD_ADDR_VAR 0 7
29608: PUSH
29609: LD_VAR 0 6
29613: PPUSH
29614: CALL_OW 312
29618: ST_TO_ADDR
// if j then
29619: LD_VAR 0 7
29623: IFFALSE 29653
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29625: LD_ADDR_VAR 0 10
29629: PUSH
29630: LD_VAR 0 10
29634: PUSH
29635: LD_VAR 0 7
29639: PPUSH
29640: LD_INT 3
29642: PPUSH
29643: CALL_OW 259
29647: PUSH
29648: LD_INT 3
29650: MUL
29651: MUL
29652: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29653: LD_VAR 0 6
29657: PPUSH
29658: CALL_OW 264
29662: PUSH
29663: LD_INT 5
29665: PUSH
29666: LD_INT 6
29668: PUSH
29669: LD_INT 46
29671: PUSH
29672: LD_INT 44
29674: PUSH
29675: LD_INT 47
29677: PUSH
29678: LD_INT 45
29680: PUSH
29681: LD_INT 28
29683: PUSH
29684: LD_INT 7
29686: PUSH
29687: LD_INT 27
29689: PUSH
29690: LD_INT 29
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: LIST
29697: LIST
29698: LIST
29699: LIST
29700: LIST
29701: LIST
29702: LIST
29703: LIST
29704: IN
29705: IFFALSE 29725
29707: PUSH
29708: LD_VAR 0 1
29712: PPUSH
29713: LD_INT 52
29715: PPUSH
29716: CALL_OW 321
29720: PUSH
29721: LD_INT 2
29723: EQUAL
29724: AND
29725: IFFALSE 29742
// bpoints := bpoints * 1.2 ;
29727: LD_ADDR_VAR 0 10
29731: PUSH
29732: LD_VAR 0 10
29736: PUSH
29737: LD_REAL  1.20000000000000E+0000
29740: MUL
29741: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29742: LD_VAR 0 6
29746: PPUSH
29747: CALL_OW 264
29751: PUSH
29752: LD_INT 6
29754: PUSH
29755: LD_INT 46
29757: PUSH
29758: LD_INT 47
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: LIST
29765: IN
29766: IFFALSE 29783
// bpoints := bpoints * 1.2 ;
29768: LD_ADDR_VAR 0 10
29772: PUSH
29773: LD_VAR 0 10
29777: PUSH
29778: LD_REAL  1.20000000000000E+0000
29781: MUL
29782: ST_TO_ADDR
// end ; unit_building :
29783: GO 29797
29785: LD_INT 3
29787: DOUBLE
29788: EQUAL
29789: IFTRUE 29793
29791: GO 29796
29793: POP
// ; end ;
29794: GO 29797
29796: POP
// for j = 1 to 3 do
29797: LD_ADDR_VAR 0 7
29801: PUSH
29802: DOUBLE
29803: LD_INT 1
29805: DEC
29806: ST_TO_ADDR
29807: LD_INT 3
29809: PUSH
29810: FOR_TO
29811: IFFALSE 29864
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29813: LD_ADDR_VAR 0 5
29817: PUSH
29818: LD_VAR 0 5
29822: PPUSH
29823: LD_VAR 0 7
29827: PPUSH
29828: LD_VAR 0 5
29832: PUSH
29833: LD_VAR 0 7
29837: ARRAY
29838: PUSH
29839: LD_VAR 0 9
29843: PUSH
29844: LD_VAR 0 7
29848: ARRAY
29849: PUSH
29850: LD_VAR 0 10
29854: MUL
29855: PLUS
29856: PPUSH
29857: CALL_OW 1
29861: ST_TO_ADDR
29862: GO 29810
29864: POP
29865: POP
// end ;
29866: GO 28339
29868: POP
29869: POP
// result := Replace ( result , 4 , tmp ) ;
29870: LD_ADDR_VAR 0 5
29874: PUSH
29875: LD_VAR 0 5
29879: PPUSH
29880: LD_INT 4
29882: PPUSH
29883: LD_VAR 0 8
29887: PPUSH
29888: CALL_OW 1
29892: ST_TO_ADDR
// end ;
29893: LD_VAR 0 5
29897: RET
// export function DangerAtRange ( unit , range ) ; begin
29898: LD_INT 0
29900: PPUSH
// if not unit then
29901: LD_VAR 0 1
29905: NOT
29906: IFFALSE 29910
// exit ;
29908: GO 29955
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29910: LD_ADDR_VAR 0 3
29914: PUSH
29915: LD_VAR 0 1
29919: PPUSH
29920: CALL_OW 255
29924: PPUSH
29925: LD_VAR 0 1
29929: PPUSH
29930: CALL_OW 250
29934: PPUSH
29935: LD_VAR 0 1
29939: PPUSH
29940: CALL_OW 251
29944: PPUSH
29945: LD_VAR 0 2
29949: PPUSH
29950: CALL 28189 0 4
29954: ST_TO_ADDR
// end ;
29955: LD_VAR 0 3
29959: RET
// export function DangerInArea ( side , area ) ; begin
29960: LD_INT 0
29962: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29963: LD_ADDR_VAR 0 3
29967: PUSH
29968: LD_VAR 0 2
29972: PPUSH
29973: LD_INT 81
29975: PUSH
29976: LD_VAR 0 1
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PPUSH
29985: CALL_OW 70
29989: ST_TO_ADDR
// end ;
29990: LD_VAR 0 3
29994: RET
// export function IsExtension ( b ) ; begin
29995: LD_INT 0
29997: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29998: LD_ADDR_VAR 0 2
30002: PUSH
30003: LD_VAR 0 1
30007: PUSH
30008: LD_INT 23
30010: PUSH
30011: LD_INT 20
30013: PUSH
30014: LD_INT 22
30016: PUSH
30017: LD_INT 17
30019: PUSH
30020: LD_INT 24
30022: PUSH
30023: LD_INT 21
30025: PUSH
30026: LD_INT 19
30028: PUSH
30029: LD_INT 16
30031: PUSH
30032: LD_INT 25
30034: PUSH
30035: LD_INT 18
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: LIST
30049: IN
30050: ST_TO_ADDR
// end ;
30051: LD_VAR 0 2
30055: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
30056: LD_INT 0
30058: PPUSH
30059: PPUSH
30060: PPUSH
// result := [ ] ;
30061: LD_ADDR_VAR 0 4
30065: PUSH
30066: EMPTY
30067: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
30068: LD_ADDR_VAR 0 5
30072: PUSH
30073: LD_VAR 0 2
30077: PPUSH
30078: LD_INT 21
30080: PUSH
30081: LD_INT 3
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PPUSH
30088: CALL_OW 70
30092: ST_TO_ADDR
// if not tmp then
30093: LD_VAR 0 5
30097: NOT
30098: IFFALSE 30102
// exit ;
30100: GO 30166
// if checkLink then
30102: LD_VAR 0 3
30106: IFFALSE 30156
// begin for i in tmp do
30108: LD_ADDR_VAR 0 6
30112: PUSH
30113: LD_VAR 0 5
30117: PUSH
30118: FOR_IN
30119: IFFALSE 30154
// if GetBase ( i ) <> base then
30121: LD_VAR 0 6
30125: PPUSH
30126: CALL_OW 274
30130: PUSH
30131: LD_VAR 0 1
30135: NONEQUAL
30136: IFFALSE 30152
// ComLinkToBase ( base , i ) ;
30138: LD_VAR 0 1
30142: PPUSH
30143: LD_VAR 0 6
30147: PPUSH
30148: CALL_OW 169
30152: GO 30118
30154: POP
30155: POP
// end ; result := tmp ;
30156: LD_ADDR_VAR 0 4
30160: PUSH
30161: LD_VAR 0 5
30165: ST_TO_ADDR
// end ;
30166: LD_VAR 0 4
30170: RET
// export function ComComplete ( units , b ) ; var i ; begin
30171: LD_INT 0
30173: PPUSH
30174: PPUSH
// if not units then
30175: LD_VAR 0 1
30179: NOT
30180: IFFALSE 30184
// exit ;
30182: GO 30274
// for i in units do
30184: LD_ADDR_VAR 0 4
30188: PUSH
30189: LD_VAR 0 1
30193: PUSH
30194: FOR_IN
30195: IFFALSE 30272
// if BuildingStatus ( b ) = bs_build then
30197: LD_VAR 0 2
30201: PPUSH
30202: CALL_OW 461
30206: PUSH
30207: LD_INT 1
30209: EQUAL
30210: IFFALSE 30270
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
30212: LD_VAR 0 4
30216: PPUSH
30217: LD_STRING h
30219: PUSH
30220: LD_VAR 0 2
30224: PPUSH
30225: CALL_OW 250
30229: PUSH
30230: LD_VAR 0 2
30234: PPUSH
30235: CALL_OW 251
30239: PUSH
30240: LD_VAR 0 2
30244: PUSH
30245: LD_INT 0
30247: PUSH
30248: LD_INT 0
30250: PUSH
30251: LD_INT 0
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: PUSH
30263: EMPTY
30264: LIST
30265: PPUSH
30266: CALL_OW 446
30270: GO 30194
30272: POP
30273: POP
// end ;
30274: LD_VAR 0 3
30278: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
30279: LD_INT 0
30281: PPUSH
30282: PPUSH
30283: PPUSH
30284: PPUSH
30285: PPUSH
30286: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
30287: LD_VAR 0 1
30291: NOT
30292: IFTRUE 30309
30294: PUSH
30295: LD_VAR 0 1
30299: PPUSH
30300: CALL_OW 263
30304: PUSH
30305: LD_INT 2
30307: NONEQUAL
30308: OR
30309: IFFALSE 30313
// exit ;
30311: GO 30629
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
30313: LD_ADDR_VAR 0 6
30317: PUSH
30318: LD_INT 22
30320: PUSH
30321: LD_VAR 0 1
30325: PPUSH
30326: CALL_OW 255
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: LD_INT 2
30337: PUSH
30338: LD_INT 30
30340: PUSH
30341: LD_INT 36
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: LD_INT 34
30350: PUSH
30351: LD_INT 31
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: LIST
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PPUSH
30367: CALL_OW 69
30371: ST_TO_ADDR
// if not tmp then
30372: LD_VAR 0 6
30376: NOT
30377: IFFALSE 30381
// exit ;
30379: GO 30629
// result := [ ] ;
30381: LD_ADDR_VAR 0 2
30385: PUSH
30386: EMPTY
30387: ST_TO_ADDR
// for i in tmp do
30388: LD_ADDR_VAR 0 3
30392: PUSH
30393: LD_VAR 0 6
30397: PUSH
30398: FOR_IN
30399: IFFALSE 30470
// begin t := UnitsInside ( i ) ;
30401: LD_ADDR_VAR 0 4
30405: PUSH
30406: LD_VAR 0 3
30410: PPUSH
30411: CALL_OW 313
30415: ST_TO_ADDR
// if t then
30416: LD_VAR 0 4
30420: IFFALSE 30468
// for j in t do
30422: LD_ADDR_VAR 0 7
30426: PUSH
30427: LD_VAR 0 4
30431: PUSH
30432: FOR_IN
30433: IFFALSE 30466
// result := Replace ( result , result + 1 , j ) ;
30435: LD_ADDR_VAR 0 2
30439: PUSH
30440: LD_VAR 0 2
30444: PPUSH
30445: LD_VAR 0 2
30449: PUSH
30450: LD_INT 1
30452: PLUS
30453: PPUSH
30454: LD_VAR 0 7
30458: PPUSH
30459: CALL_OW 1
30463: ST_TO_ADDR
30464: GO 30432
30466: POP
30467: POP
// end ;
30468: GO 30398
30470: POP
30471: POP
// if not result then
30472: LD_VAR 0 2
30476: NOT
30477: IFFALSE 30481
// exit ;
30479: GO 30629
// mech := result [ 1 ] ;
30481: LD_ADDR_VAR 0 5
30485: PUSH
30486: LD_VAR 0 2
30490: PUSH
30491: LD_INT 1
30493: ARRAY
30494: ST_TO_ADDR
// if result > 1 then
30495: LD_VAR 0 2
30499: PUSH
30500: LD_INT 1
30502: GREATER
30503: IFFALSE 30615
// begin for i = 2 to result do
30505: LD_ADDR_VAR 0 3
30509: PUSH
30510: DOUBLE
30511: LD_INT 2
30513: DEC
30514: ST_TO_ADDR
30515: LD_VAR 0 2
30519: PUSH
30520: FOR_TO
30521: IFFALSE 30613
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30523: LD_ADDR_VAR 0 4
30527: PUSH
30528: LD_VAR 0 2
30532: PUSH
30533: LD_VAR 0 3
30537: ARRAY
30538: PPUSH
30539: LD_INT 3
30541: PPUSH
30542: CALL_OW 259
30546: PUSH
30547: LD_VAR 0 2
30551: PUSH
30552: LD_VAR 0 3
30556: ARRAY
30557: PPUSH
30558: CALL_OW 432
30562: MINUS
30563: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30564: LD_VAR 0 4
30568: PUSH
30569: LD_VAR 0 5
30573: PPUSH
30574: LD_INT 3
30576: PPUSH
30577: CALL_OW 259
30581: PUSH
30582: LD_VAR 0 5
30586: PPUSH
30587: CALL_OW 432
30591: MINUS
30592: GREATEREQUAL
30593: IFFALSE 30611
// mech := result [ i ] ;
30595: LD_ADDR_VAR 0 5
30599: PUSH
30600: LD_VAR 0 2
30604: PUSH
30605: LD_VAR 0 3
30609: ARRAY
30610: ST_TO_ADDR
// end ;
30611: GO 30520
30613: POP
30614: POP
// end ; ComLinkTo ( vehicle , mech ) ;
30615: LD_VAR 0 1
30619: PPUSH
30620: LD_VAR 0 5
30624: PPUSH
30625: CALL_OW 135
// end ;
30629: LD_VAR 0 2
30633: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30634: LD_INT 0
30636: PPUSH
30637: PPUSH
30638: PPUSH
30639: PPUSH
30640: PPUSH
30641: PPUSH
30642: PPUSH
30643: PPUSH
30644: PPUSH
30645: PPUSH
30646: PPUSH
30647: PPUSH
30648: PPUSH
// result := [ ] ;
30649: LD_ADDR_VAR 0 7
30653: PUSH
30654: EMPTY
30655: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30656: LD_VAR 0 1
30660: PPUSH
30661: CALL_OW 266
30665: PUSH
30666: LD_INT 0
30668: PUSH
30669: LD_INT 1
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: IN
30676: NOT
30677: IFFALSE 30681
// exit ;
30679: GO 32321
// if name then
30681: LD_VAR 0 3
30685: IFFALSE 30701
// SetBName ( base_dep , name ) ;
30687: LD_VAR 0 1
30691: PPUSH
30692: LD_VAR 0 3
30696: PPUSH
30697: CALL_OW 500
// base := GetBase ( base_dep ) ;
30701: LD_ADDR_VAR 0 15
30705: PUSH
30706: LD_VAR 0 1
30710: PPUSH
30711: CALL_OW 274
30715: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30716: LD_ADDR_VAR 0 16
30720: PUSH
30721: LD_VAR 0 1
30725: PPUSH
30726: CALL_OW 255
30730: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30731: LD_ADDR_VAR 0 17
30735: PUSH
30736: LD_VAR 0 1
30740: PPUSH
30741: CALL_OW 248
30745: ST_TO_ADDR
// if sources then
30746: LD_VAR 0 5
30750: IFFALSE 30797
// for i = 1 to 3 do
30752: LD_ADDR_VAR 0 8
30756: PUSH
30757: DOUBLE
30758: LD_INT 1
30760: DEC
30761: ST_TO_ADDR
30762: LD_INT 3
30764: PUSH
30765: FOR_TO
30766: IFFALSE 30795
// AddResourceType ( base , i , sources [ i ] ) ;
30768: LD_VAR 0 15
30772: PPUSH
30773: LD_VAR 0 8
30777: PPUSH
30778: LD_VAR 0 5
30782: PUSH
30783: LD_VAR 0 8
30787: ARRAY
30788: PPUSH
30789: CALL_OW 276
30793: GO 30765
30795: POP
30796: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30797: LD_ADDR_VAR 0 18
30801: PUSH
30802: LD_VAR 0 15
30806: PPUSH
30807: LD_VAR 0 2
30811: PPUSH
30812: LD_INT 1
30814: PPUSH
30815: CALL 30056 0 3
30819: ST_TO_ADDR
// InitHc ;
30820: CALL_OW 19
// InitUc ;
30824: CALL_OW 18
// uc_side := side ;
30828: LD_ADDR_OWVAR 20
30832: PUSH
30833: LD_VAR 0 16
30837: ST_TO_ADDR
// uc_nation := nation ;
30838: LD_ADDR_OWVAR 21
30842: PUSH
30843: LD_VAR 0 17
30847: ST_TO_ADDR
// if buildings then
30848: LD_VAR 0 18
30852: IFFALSE 32180
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30854: LD_ADDR_VAR 0 19
30858: PUSH
30859: LD_VAR 0 18
30863: PPUSH
30864: LD_INT 2
30866: PUSH
30867: LD_INT 30
30869: PUSH
30870: LD_INT 29
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 30
30879: PUSH
30880: LD_INT 30
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: LIST
30891: PPUSH
30892: CALL_OW 72
30896: ST_TO_ADDR
// if tmp then
30897: LD_VAR 0 19
30901: IFFALSE 30949
// for i in tmp do
30903: LD_ADDR_VAR 0 8
30907: PUSH
30908: LD_VAR 0 19
30912: PUSH
30913: FOR_IN
30914: IFFALSE 30947
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30916: LD_VAR 0 8
30920: PPUSH
30921: CALL_OW 250
30925: PPUSH
30926: LD_VAR 0 8
30930: PPUSH
30931: CALL_OW 251
30935: PPUSH
30936: LD_VAR 0 16
30940: PPUSH
30941: CALL_OW 441
30945: GO 30913
30947: POP
30948: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30949: LD_VAR 0 18
30953: PPUSH
30954: LD_INT 2
30956: PUSH
30957: LD_INT 30
30959: PUSH
30960: LD_INT 32
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 30
30969: PUSH
30970: LD_INT 33
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: LIST
30981: PPUSH
30982: CALL_OW 72
30986: IFFALSE 31074
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30988: LD_ADDR_VAR 0 8
30992: PUSH
30993: LD_VAR 0 18
30997: PPUSH
30998: LD_INT 2
31000: PUSH
31001: LD_INT 30
31003: PUSH
31004: LD_INT 32
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: PUSH
31011: LD_INT 30
31013: PUSH
31014: LD_INT 33
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: LIST
31025: PPUSH
31026: CALL_OW 72
31030: PUSH
31031: FOR_IN
31032: IFFALSE 31072
// begin if not GetBWeapon ( i ) then
31034: LD_VAR 0 8
31038: PPUSH
31039: CALL_OW 269
31043: NOT
31044: IFFALSE 31070
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
31046: LD_VAR 0 8
31050: PPUSH
31051: LD_VAR 0 8
31055: PPUSH
31056: LD_VAR 0 2
31060: PPUSH
31061: CALL 32326 0 2
31065: PPUSH
31066: CALL_OW 431
// end ;
31070: GO 31031
31072: POP
31073: POP
// end ; for i = 1 to personel do
31074: LD_ADDR_VAR 0 8
31078: PUSH
31079: DOUBLE
31080: LD_INT 1
31082: DEC
31083: ST_TO_ADDR
31084: LD_VAR 0 6
31088: PUSH
31089: FOR_TO
31090: IFFALSE 32160
// begin if i > 4 then
31092: LD_VAR 0 8
31096: PUSH
31097: LD_INT 4
31099: GREATER
31100: IFFALSE 31104
// break ;
31102: GO 32160
// case i of 1 :
31104: LD_VAR 0 8
31108: PUSH
31109: LD_INT 1
31111: DOUBLE
31112: EQUAL
31113: IFTRUE 31117
31115: GO 31197
31117: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
31118: LD_ADDR_VAR 0 12
31122: PUSH
31123: LD_VAR 0 18
31127: PPUSH
31128: LD_INT 22
31130: PUSH
31131: LD_VAR 0 16
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: LD_INT 58
31142: PUSH
31143: EMPTY
31144: LIST
31145: PUSH
31146: LD_INT 2
31148: PUSH
31149: LD_INT 30
31151: PUSH
31152: LD_INT 32
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: PUSH
31159: LD_INT 30
31161: PUSH
31162: LD_INT 4
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: LD_INT 30
31171: PUSH
31172: LD_INT 5
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: LIST
31189: PPUSH
31190: CALL_OW 72
31194: ST_TO_ADDR
31195: GO 31419
31197: LD_INT 2
31199: DOUBLE
31200: EQUAL
31201: IFTRUE 31205
31203: GO 31267
31205: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
31206: LD_ADDR_VAR 0 12
31210: PUSH
31211: LD_VAR 0 18
31215: PPUSH
31216: LD_INT 22
31218: PUSH
31219: LD_VAR 0 16
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 2
31230: PUSH
31231: LD_INT 30
31233: PUSH
31234: LD_INT 0
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 30
31243: PUSH
31244: LD_INT 1
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: LIST
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PPUSH
31260: CALL_OW 72
31264: ST_TO_ADDR
31265: GO 31419
31267: LD_INT 3
31269: DOUBLE
31270: EQUAL
31271: IFTRUE 31275
31273: GO 31337
31275: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
31276: LD_ADDR_VAR 0 12
31280: PUSH
31281: LD_VAR 0 18
31285: PPUSH
31286: LD_INT 22
31288: PUSH
31289: LD_VAR 0 16
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: LD_INT 2
31300: PUSH
31301: LD_INT 30
31303: PUSH
31304: LD_INT 2
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 30
31313: PUSH
31314: LD_INT 3
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: LIST
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: PPUSH
31330: CALL_OW 72
31334: ST_TO_ADDR
31335: GO 31419
31337: LD_INT 4
31339: DOUBLE
31340: EQUAL
31341: IFTRUE 31345
31343: GO 31418
31345: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
31346: LD_ADDR_VAR 0 12
31350: PUSH
31351: LD_VAR 0 18
31355: PPUSH
31356: LD_INT 22
31358: PUSH
31359: LD_VAR 0 16
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: PUSH
31368: LD_INT 2
31370: PUSH
31371: LD_INT 30
31373: PUSH
31374: LD_INT 6
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 30
31383: PUSH
31384: LD_INT 7
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 30
31393: PUSH
31394: LD_INT 8
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PPUSH
31411: CALL_OW 72
31415: ST_TO_ADDR
31416: GO 31419
31418: POP
// if i = 1 then
31419: LD_VAR 0 8
31423: PUSH
31424: LD_INT 1
31426: EQUAL
31427: IFFALSE 31538
// begin tmp := [ ] ;
31429: LD_ADDR_VAR 0 19
31433: PUSH
31434: EMPTY
31435: ST_TO_ADDR
// for j in f do
31436: LD_ADDR_VAR 0 9
31440: PUSH
31441: LD_VAR 0 12
31445: PUSH
31446: FOR_IN
31447: IFFALSE 31520
// if GetBType ( j ) = b_bunker then
31449: LD_VAR 0 9
31453: PPUSH
31454: CALL_OW 266
31458: PUSH
31459: LD_INT 32
31461: EQUAL
31462: IFFALSE 31489
// tmp := Insert ( tmp , 1 , j ) else
31464: LD_ADDR_VAR 0 19
31468: PUSH
31469: LD_VAR 0 19
31473: PPUSH
31474: LD_INT 1
31476: PPUSH
31477: LD_VAR 0 9
31481: PPUSH
31482: CALL_OW 2
31486: ST_TO_ADDR
31487: GO 31518
// tmp := Insert ( tmp , tmp + 1 , j ) ;
31489: LD_ADDR_VAR 0 19
31493: PUSH
31494: LD_VAR 0 19
31498: PPUSH
31499: LD_VAR 0 19
31503: PUSH
31504: LD_INT 1
31506: PLUS
31507: PPUSH
31508: LD_VAR 0 9
31512: PPUSH
31513: CALL_OW 2
31517: ST_TO_ADDR
31518: GO 31446
31520: POP
31521: POP
// if tmp then
31522: LD_VAR 0 19
31526: IFFALSE 31538
// f := tmp ;
31528: LD_ADDR_VAR 0 12
31532: PUSH
31533: LD_VAR 0 19
31537: ST_TO_ADDR
// end ; x := personel [ i ] ;
31538: LD_ADDR_VAR 0 13
31542: PUSH
31543: LD_VAR 0 6
31547: PUSH
31548: LD_VAR 0 8
31552: ARRAY
31553: ST_TO_ADDR
// if x = - 1 then
31554: LD_VAR 0 13
31558: PUSH
31559: LD_INT 1
31561: NEG
31562: EQUAL
31563: IFFALSE 31774
// begin for j in f do
31565: LD_ADDR_VAR 0 9
31569: PUSH
31570: LD_VAR 0 12
31574: PUSH
31575: FOR_IN
31576: IFFALSE 31770
// repeat InitHc ;
31578: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31582: LD_VAR 0 9
31586: PPUSH
31587: CALL_OW 266
31591: PUSH
31592: LD_INT 5
31594: EQUAL
31595: IFFALSE 31665
// begin if UnitsInside ( j ) < 3 then
31597: LD_VAR 0 9
31601: PPUSH
31602: CALL_OW 313
31606: PUSH
31607: LD_INT 3
31609: LESS
31610: IFFALSE 31646
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31612: LD_INT 0
31614: PPUSH
31615: LD_INT 5
31617: PUSH
31618: LD_INT 8
31620: PUSH
31621: LD_INT 9
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: LIST
31628: PUSH
31629: LD_VAR 0 17
31633: ARRAY
31634: PPUSH
31635: LD_VAR 0 4
31639: PPUSH
31640: CALL_OW 380
31644: GO 31663
// PrepareHuman ( false , i , skill ) ;
31646: LD_INT 0
31648: PPUSH
31649: LD_VAR 0 8
31653: PPUSH
31654: LD_VAR 0 4
31658: PPUSH
31659: CALL_OW 380
// end else
31663: GO 31682
// PrepareHuman ( false , i , skill ) ;
31665: LD_INT 0
31667: PPUSH
31668: LD_VAR 0 8
31672: PPUSH
31673: LD_VAR 0 4
31677: PPUSH
31678: CALL_OW 380
// un := CreateHuman ;
31682: LD_ADDR_VAR 0 14
31686: PUSH
31687: CALL_OW 44
31691: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31692: LD_ADDR_VAR 0 7
31696: PUSH
31697: LD_VAR 0 7
31701: PPUSH
31702: LD_INT 1
31704: PPUSH
31705: LD_VAR 0 14
31709: PPUSH
31710: CALL_OW 2
31714: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31715: LD_VAR 0 14
31719: PPUSH
31720: LD_VAR 0 9
31724: PPUSH
31725: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31729: LD_VAR 0 9
31733: PPUSH
31734: CALL_OW 313
31738: PUSH
31739: LD_INT 6
31741: EQUAL
31742: IFTRUE 31766
31744: PUSH
31745: LD_VAR 0 9
31749: PPUSH
31750: CALL_OW 266
31754: PUSH
31755: LD_INT 32
31757: PUSH
31758: LD_INT 31
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: IN
31765: OR
31766: IFFALSE 31578
31768: GO 31575
31770: POP
31771: POP
// end else
31772: GO 32158
// for j = 1 to x do
31774: LD_ADDR_VAR 0 9
31778: PUSH
31779: DOUBLE
31780: LD_INT 1
31782: DEC
31783: ST_TO_ADDR
31784: LD_VAR 0 13
31788: PUSH
31789: FOR_TO
31790: IFFALSE 32156
// begin InitHc ;
31792: CALL_OW 19
// if not f then
31796: LD_VAR 0 12
31800: NOT
31801: IFFALSE 31890
// begin PrepareHuman ( false , i , skill ) ;
31803: LD_INT 0
31805: PPUSH
31806: LD_VAR 0 8
31810: PPUSH
31811: LD_VAR 0 4
31815: PPUSH
31816: CALL_OW 380
// un := CreateHuman ;
31820: LD_ADDR_VAR 0 14
31824: PUSH
31825: CALL_OW 44
31829: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31830: LD_ADDR_VAR 0 7
31834: PUSH
31835: LD_VAR 0 7
31839: PPUSH
31840: LD_INT 1
31842: PPUSH
31843: LD_VAR 0 14
31847: PPUSH
31848: CALL_OW 2
31852: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31853: LD_VAR 0 14
31857: PPUSH
31858: LD_VAR 0 1
31862: PPUSH
31863: CALL_OW 250
31867: PPUSH
31868: LD_VAR 0 1
31872: PPUSH
31873: CALL_OW 251
31877: PPUSH
31878: LD_INT 10
31880: PPUSH
31881: LD_INT 0
31883: PPUSH
31884: CALL_OW 50
// continue ;
31888: GO 31789
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31890: LD_VAR 0 12
31894: PUSH
31895: LD_INT 1
31897: ARRAY
31898: PPUSH
31899: CALL_OW 313
31903: IFFALSE 31931
31905: PUSH
31906: LD_VAR 0 12
31910: PUSH
31911: LD_INT 1
31913: ARRAY
31914: PPUSH
31915: CALL_OW 266
31919: PUSH
31920: LD_INT 32
31922: PUSH
31923: LD_INT 31
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: IN
31930: AND
31931: IFTRUE 31952
31933: PUSH
31934: LD_VAR 0 12
31938: PUSH
31939: LD_INT 1
31941: ARRAY
31942: PPUSH
31943: CALL_OW 313
31947: PUSH
31948: LD_INT 6
31950: EQUAL
31951: OR
31952: IFFALSE 31972
// f := Delete ( f , 1 ) ;
31954: LD_ADDR_VAR 0 12
31958: PUSH
31959: LD_VAR 0 12
31963: PPUSH
31964: LD_INT 1
31966: PPUSH
31967: CALL_OW 3
31971: ST_TO_ADDR
// if not f then
31972: LD_VAR 0 12
31976: NOT
31977: IFFALSE 31995
// begin x := x + 2 ;
31979: LD_ADDR_VAR 0 13
31983: PUSH
31984: LD_VAR 0 13
31988: PUSH
31989: LD_INT 2
31991: PLUS
31992: ST_TO_ADDR
// continue ;
31993: GO 31789
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31995: LD_VAR 0 12
31999: PUSH
32000: LD_INT 1
32002: ARRAY
32003: PPUSH
32004: CALL_OW 266
32008: PUSH
32009: LD_INT 5
32011: EQUAL
32012: IFFALSE 32086
// begin if UnitsInside ( f [ 1 ] ) < 3 then
32014: LD_VAR 0 12
32018: PUSH
32019: LD_INT 1
32021: ARRAY
32022: PPUSH
32023: CALL_OW 313
32027: PUSH
32028: LD_INT 3
32030: LESS
32031: IFFALSE 32067
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32033: LD_INT 0
32035: PPUSH
32036: LD_INT 5
32038: PUSH
32039: LD_INT 8
32041: PUSH
32042: LD_INT 9
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: LIST
32049: PUSH
32050: LD_VAR 0 17
32054: ARRAY
32055: PPUSH
32056: LD_VAR 0 4
32060: PPUSH
32061: CALL_OW 380
32065: GO 32084
// PrepareHuman ( false , i , skill ) ;
32067: LD_INT 0
32069: PPUSH
32070: LD_VAR 0 8
32074: PPUSH
32075: LD_VAR 0 4
32079: PPUSH
32080: CALL_OW 380
// end else
32084: GO 32103
// PrepareHuman ( false , i , skill ) ;
32086: LD_INT 0
32088: PPUSH
32089: LD_VAR 0 8
32093: PPUSH
32094: LD_VAR 0 4
32098: PPUSH
32099: CALL_OW 380
// un := CreateHuman ;
32103: LD_ADDR_VAR 0 14
32107: PUSH
32108: CALL_OW 44
32112: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32113: LD_ADDR_VAR 0 7
32117: PUSH
32118: LD_VAR 0 7
32122: PPUSH
32123: LD_INT 1
32125: PPUSH
32126: LD_VAR 0 14
32130: PPUSH
32131: CALL_OW 2
32135: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
32136: LD_VAR 0 14
32140: PPUSH
32141: LD_VAR 0 12
32145: PUSH
32146: LD_INT 1
32148: ARRAY
32149: PPUSH
32150: CALL_OW 52
// end ;
32154: GO 31789
32156: POP
32157: POP
// end ;
32158: GO 31089
32160: POP
32161: POP
// result := result ^ buildings ;
32162: LD_ADDR_VAR 0 7
32166: PUSH
32167: LD_VAR 0 7
32171: PUSH
32172: LD_VAR 0 18
32176: ADD
32177: ST_TO_ADDR
// end else
32178: GO 32321
// begin for i = 1 to personel do
32180: LD_ADDR_VAR 0 8
32184: PUSH
32185: DOUBLE
32186: LD_INT 1
32188: DEC
32189: ST_TO_ADDR
32190: LD_VAR 0 6
32194: PUSH
32195: FOR_TO
32196: IFFALSE 32319
// begin if i > 4 then
32198: LD_VAR 0 8
32202: PUSH
32203: LD_INT 4
32205: GREATER
32206: IFFALSE 32210
// break ;
32208: GO 32319
// x := personel [ i ] ;
32210: LD_ADDR_VAR 0 13
32214: PUSH
32215: LD_VAR 0 6
32219: PUSH
32220: LD_VAR 0 8
32224: ARRAY
32225: ST_TO_ADDR
// if x = - 1 then
32226: LD_VAR 0 13
32230: PUSH
32231: LD_INT 1
32233: NEG
32234: EQUAL
32235: IFFALSE 32239
// continue ;
32237: GO 32195
// PrepareHuman ( false , i , skill ) ;
32239: LD_INT 0
32241: PPUSH
32242: LD_VAR 0 8
32246: PPUSH
32247: LD_VAR 0 4
32251: PPUSH
32252: CALL_OW 380
// un := CreateHuman ;
32256: LD_ADDR_VAR 0 14
32260: PUSH
32261: CALL_OW 44
32265: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32266: LD_VAR 0 14
32270: PPUSH
32271: LD_VAR 0 1
32275: PPUSH
32276: CALL_OW 250
32280: PPUSH
32281: LD_VAR 0 1
32285: PPUSH
32286: CALL_OW 251
32290: PPUSH
32291: LD_INT 10
32293: PPUSH
32294: LD_INT 0
32296: PPUSH
32297: CALL_OW 50
// result := result ^ un ;
32301: LD_ADDR_VAR 0 7
32305: PUSH
32306: LD_VAR 0 7
32310: PUSH
32311: LD_VAR 0 14
32315: ADD
32316: ST_TO_ADDR
// end ;
32317: GO 32195
32319: POP
32320: POP
// end ; end ;
32321: LD_VAR 0 7
32325: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
32326: LD_INT 0
32328: PPUSH
32329: PPUSH
32330: PPUSH
32331: PPUSH
32332: PPUSH
32333: PPUSH
32334: PPUSH
32335: PPUSH
32336: PPUSH
32337: PPUSH
32338: PPUSH
32339: PPUSH
32340: PPUSH
32341: PPUSH
32342: PPUSH
32343: PPUSH
// result := false ;
32344: LD_ADDR_VAR 0 3
32348: PUSH
32349: LD_INT 0
32351: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
32352: LD_VAR 0 1
32356: NOT
32357: IFTRUE 32382
32359: PUSH
32360: LD_VAR 0 1
32364: PPUSH
32365: CALL_OW 266
32369: PUSH
32370: LD_INT 32
32372: PUSH
32373: LD_INT 33
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: IN
32380: NOT
32381: OR
32382: IFFALSE 32386
// exit ;
32384: GO 33521
// nat := GetNation ( tower ) ;
32386: LD_ADDR_VAR 0 12
32390: PUSH
32391: LD_VAR 0 1
32395: PPUSH
32396: CALL_OW 248
32400: ST_TO_ADDR
// side := GetSide ( tower ) ;
32401: LD_ADDR_VAR 0 16
32405: PUSH
32406: LD_VAR 0 1
32410: PPUSH
32411: CALL_OW 255
32415: ST_TO_ADDR
// x := GetX ( tower ) ;
32416: LD_ADDR_VAR 0 10
32420: PUSH
32421: LD_VAR 0 1
32425: PPUSH
32426: CALL_OW 250
32430: ST_TO_ADDR
// y := GetY ( tower ) ;
32431: LD_ADDR_VAR 0 11
32435: PUSH
32436: LD_VAR 0 1
32440: PPUSH
32441: CALL_OW 251
32445: ST_TO_ADDR
// if not x or not y then
32446: LD_VAR 0 10
32450: NOT
32451: IFTRUE 32460
32453: PUSH
32454: LD_VAR 0 11
32458: NOT
32459: OR
32460: IFFALSE 32464
// exit ;
32462: GO 33521
// weapon := 0 ;
32464: LD_ADDR_VAR 0 18
32468: PUSH
32469: LD_INT 0
32471: ST_TO_ADDR
// fac_list := [ ] ;
32472: LD_ADDR_VAR 0 17
32476: PUSH
32477: EMPTY
32478: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
32479: LD_ADDR_VAR 0 6
32483: PUSH
32484: LD_VAR 0 1
32488: PPUSH
32489: CALL_OW 274
32493: PPUSH
32494: LD_VAR 0 2
32498: PPUSH
32499: LD_INT 0
32501: PPUSH
32502: CALL 30056 0 3
32506: PPUSH
32507: LD_INT 30
32509: PUSH
32510: LD_INT 3
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PPUSH
32517: CALL_OW 72
32521: ST_TO_ADDR
// if not factories then
32522: LD_VAR 0 6
32526: NOT
32527: IFFALSE 32531
// exit ;
32529: GO 33521
// for i in factories do
32531: LD_ADDR_VAR 0 8
32535: PUSH
32536: LD_VAR 0 6
32540: PUSH
32541: FOR_IN
32542: IFFALSE 32567
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32544: LD_ADDR_VAR 0 17
32548: PUSH
32549: LD_VAR 0 17
32553: PUSH
32554: LD_VAR 0 8
32558: PPUSH
32559: CALL_OW 478
32563: UNION
32564: ST_TO_ADDR
32565: GO 32541
32567: POP
32568: POP
// if not fac_list then
32569: LD_VAR 0 17
32573: NOT
32574: IFFALSE 32578
// exit ;
32576: GO 33521
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32578: LD_ADDR_VAR 0 5
32582: PUSH
32583: LD_INT 4
32585: PUSH
32586: LD_INT 5
32588: PUSH
32589: LD_INT 9
32591: PUSH
32592: LD_INT 10
32594: PUSH
32595: LD_INT 6
32597: PUSH
32598: LD_INT 7
32600: PUSH
32601: LD_INT 11
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: PUSH
32613: LD_INT 27
32615: PUSH
32616: LD_INT 28
32618: PUSH
32619: LD_INT 26
32621: PUSH
32622: LD_INT 30
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 43
32633: PUSH
32634: LD_INT 44
32636: PUSH
32637: LD_INT 46
32639: PUSH
32640: LD_INT 45
32642: PUSH
32643: LD_INT 47
32645: PUSH
32646: LD_INT 49
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: LIST
32661: PUSH
32662: LD_VAR 0 12
32666: ARRAY
32667: ST_TO_ADDR
// list := list isect fac_list ;
32668: LD_ADDR_VAR 0 5
32672: PUSH
32673: LD_VAR 0 5
32677: PUSH
32678: LD_VAR 0 17
32682: ISECT
32683: ST_TO_ADDR
// if not list then
32684: LD_VAR 0 5
32688: NOT
32689: IFFALSE 32693
// exit ;
32691: GO 33521
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32693: LD_VAR 0 12
32697: PUSH
32698: LD_INT 3
32700: EQUAL
32701: IFFALSE 32713
32703: PUSH
32704: LD_INT 49
32706: PUSH
32707: LD_VAR 0 5
32711: IN
32712: AND
32713: IFFALSE 32733
32715: PUSH
32716: LD_INT 31
32718: PPUSH
32719: LD_VAR 0 16
32723: PPUSH
32724: CALL_OW 321
32728: PUSH
32729: LD_INT 2
32731: EQUAL
32732: AND
32733: IFFALSE 32793
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32735: LD_INT 22
32737: PUSH
32738: LD_VAR 0 16
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 35
32749: PUSH
32750: LD_INT 49
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 91
32759: PUSH
32760: LD_VAR 0 1
32764: PUSH
32765: LD_INT 10
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: LIST
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: LIST
32777: PPUSH
32778: CALL_OW 69
32782: NOT
32783: IFFALSE 32793
// weapon := ru_time_lapser ;
32785: LD_ADDR_VAR 0 18
32789: PUSH
32790: LD_INT 49
32792: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32793: LD_VAR 0 12
32797: PUSH
32798: LD_INT 1
32800: PUSH
32801: LD_INT 2
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: IN
32808: IFFALSE 32832
32810: PUSH
32811: LD_INT 11
32813: PUSH
32814: LD_VAR 0 5
32818: IN
32819: IFTRUE 32831
32821: PUSH
32822: LD_INT 30
32824: PUSH
32825: LD_VAR 0 5
32829: IN
32830: OR
32831: AND
32832: IFFALSE 32852
32834: PUSH
32835: LD_INT 6
32837: PPUSH
32838: LD_VAR 0 16
32842: PPUSH
32843: CALL_OW 321
32847: PUSH
32848: LD_INT 2
32850: EQUAL
32851: AND
32852: IFFALSE 33019
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32854: LD_INT 22
32856: PUSH
32857: LD_VAR 0 16
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 2
32868: PUSH
32869: LD_INT 35
32871: PUSH
32872: LD_INT 11
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 35
32881: PUSH
32882: LD_INT 30
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 91
32896: PUSH
32897: LD_VAR 0 1
32901: PUSH
32902: LD_INT 18
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: LIST
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: LIST
32914: PPUSH
32915: CALL_OW 69
32919: NOT
32920: IFFALSE 32996
32922: PUSH
32923: LD_INT 22
32925: PUSH
32926: LD_VAR 0 16
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: LD_INT 2
32937: PUSH
32938: LD_INT 30
32940: PUSH
32941: LD_INT 32
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 30
32950: PUSH
32951: LD_INT 33
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: LIST
32962: PUSH
32963: LD_INT 91
32965: PUSH
32966: LD_VAR 0 1
32970: PUSH
32971: LD_INT 12
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: LIST
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: LIST
32983: PUSH
32984: EMPTY
32985: LIST
32986: PPUSH
32987: CALL_OW 69
32991: PUSH
32992: LD_INT 2
32994: GREATER
32995: AND
32996: IFFALSE 33019
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32998: LD_ADDR_VAR 0 18
33002: PUSH
33003: LD_INT 11
33005: PUSH
33006: LD_INT 30
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_VAR 0 12
33017: ARRAY
33018: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
33019: LD_VAR 0 18
33023: NOT
33024: IFFALSE 33044
33026: PUSH
33027: LD_INT 40
33029: PPUSH
33030: LD_VAR 0 16
33034: PPUSH
33035: CALL_OW 321
33039: PUSH
33040: LD_INT 2
33042: EQUAL
33043: AND
33044: IFFALSE 33080
33046: PUSH
33047: LD_INT 7
33049: PUSH
33050: LD_VAR 0 5
33054: IN
33055: IFTRUE 33067
33057: PUSH
33058: LD_INT 28
33060: PUSH
33061: LD_VAR 0 5
33065: IN
33066: OR
33067: IFTRUE 33079
33069: PUSH
33070: LD_INT 45
33072: PUSH
33073: LD_VAR 0 5
33077: IN
33078: OR
33079: AND
33080: IFFALSE 33334
// begin hex := GetHexInfo ( x , y ) ;
33082: LD_ADDR_VAR 0 4
33086: PUSH
33087: LD_VAR 0 10
33091: PPUSH
33092: LD_VAR 0 11
33096: PPUSH
33097: CALL_OW 546
33101: ST_TO_ADDR
// if hex [ 1 ] then
33102: LD_VAR 0 4
33106: PUSH
33107: LD_INT 1
33109: ARRAY
33110: IFFALSE 33114
// exit ;
33112: GO 33521
// height := hex [ 2 ] ;
33114: LD_ADDR_VAR 0 15
33118: PUSH
33119: LD_VAR 0 4
33123: PUSH
33124: LD_INT 2
33126: ARRAY
33127: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
33128: LD_ADDR_VAR 0 14
33132: PUSH
33133: LD_INT 0
33135: PUSH
33136: LD_INT 2
33138: PUSH
33139: LD_INT 3
33141: PUSH
33142: LD_INT 5
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: ST_TO_ADDR
// for i in tmp do
33151: LD_ADDR_VAR 0 8
33155: PUSH
33156: LD_VAR 0 14
33160: PUSH
33161: FOR_IN
33162: IFFALSE 33332
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
33164: LD_ADDR_VAR 0 9
33168: PUSH
33169: LD_VAR 0 10
33173: PPUSH
33174: LD_VAR 0 8
33178: PPUSH
33179: LD_INT 5
33181: PPUSH
33182: CALL_OW 272
33186: PUSH
33187: LD_VAR 0 11
33191: PPUSH
33192: LD_VAR 0 8
33196: PPUSH
33197: LD_INT 5
33199: PPUSH
33200: CALL_OW 273
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
33209: LD_VAR 0 9
33213: PUSH
33214: LD_INT 1
33216: ARRAY
33217: PPUSH
33218: LD_VAR 0 9
33222: PUSH
33223: LD_INT 2
33225: ARRAY
33226: PPUSH
33227: CALL_OW 488
33231: IFFALSE 33330
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
33233: LD_ADDR_VAR 0 4
33237: PUSH
33238: LD_VAR 0 9
33242: PUSH
33243: LD_INT 1
33245: ARRAY
33246: PPUSH
33247: LD_VAR 0 9
33251: PUSH
33252: LD_INT 2
33254: ARRAY
33255: PPUSH
33256: CALL_OW 546
33260: ST_TO_ADDR
// if hex [ 1 ] then
33261: LD_VAR 0 4
33265: PUSH
33266: LD_INT 1
33268: ARRAY
33269: IFFALSE 33273
// continue ;
33271: GO 33161
// h := hex [ 2 ] ;
33273: LD_ADDR_VAR 0 13
33277: PUSH
33278: LD_VAR 0 4
33282: PUSH
33283: LD_INT 2
33285: ARRAY
33286: ST_TO_ADDR
// if h + 7 < height then
33287: LD_VAR 0 13
33291: PUSH
33292: LD_INT 7
33294: PLUS
33295: PUSH
33296: LD_VAR 0 15
33300: LESS
33301: IFFALSE 33330
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
33303: LD_ADDR_VAR 0 18
33307: PUSH
33308: LD_INT 7
33310: PUSH
33311: LD_INT 28
33313: PUSH
33314: LD_INT 45
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: LIST
33321: PUSH
33322: LD_VAR 0 12
33326: ARRAY
33327: ST_TO_ADDR
// break ;
33328: GO 33332
// end ; end ; end ;
33330: GO 33161
33332: POP
33333: POP
// end ; if not weapon then
33334: LD_VAR 0 18
33338: NOT
33339: IFFALSE 33399
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
33341: LD_ADDR_VAR 0 5
33345: PUSH
33346: LD_VAR 0 5
33350: PUSH
33351: LD_INT 11
33353: PUSH
33354: LD_INT 30
33356: PUSH
33357: LD_INT 49
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: LIST
33364: DIFF
33365: ST_TO_ADDR
// if not list then
33366: LD_VAR 0 5
33370: NOT
33371: IFFALSE 33375
// exit ;
33373: GO 33521
// weapon := list [ rand ( 1 , list ) ] ;
33375: LD_ADDR_VAR 0 18
33379: PUSH
33380: LD_VAR 0 5
33384: PUSH
33385: LD_INT 1
33387: PPUSH
33388: LD_VAR 0 5
33392: PPUSH
33393: CALL_OW 12
33397: ARRAY
33398: ST_TO_ADDR
// end ; if weapon then
33399: LD_VAR 0 18
33403: IFFALSE 33521
// begin tmp := CostOfWeapon ( weapon ) ;
33405: LD_ADDR_VAR 0 14
33409: PUSH
33410: LD_VAR 0 18
33414: PPUSH
33415: CALL_OW 451
33419: ST_TO_ADDR
// j := GetBase ( tower ) ;
33420: LD_ADDR_VAR 0 9
33424: PUSH
33425: LD_VAR 0 1
33429: PPUSH
33430: CALL_OW 274
33434: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
33435: LD_VAR 0 9
33439: PPUSH
33440: LD_INT 1
33442: PPUSH
33443: CALL_OW 275
33447: PUSH
33448: LD_VAR 0 14
33452: PUSH
33453: LD_INT 1
33455: ARRAY
33456: GREATEREQUAL
33457: IFFALSE 33483
33459: PUSH
33460: LD_VAR 0 9
33464: PPUSH
33465: LD_INT 2
33467: PPUSH
33468: CALL_OW 275
33472: PUSH
33473: LD_VAR 0 14
33477: PUSH
33478: LD_INT 2
33480: ARRAY
33481: GREATEREQUAL
33482: AND
33483: IFFALSE 33509
33485: PUSH
33486: LD_VAR 0 9
33490: PPUSH
33491: LD_INT 3
33493: PPUSH
33494: CALL_OW 275
33498: PUSH
33499: LD_VAR 0 14
33503: PUSH
33504: LD_INT 3
33506: ARRAY
33507: GREATEREQUAL
33508: AND
33509: IFFALSE 33521
// result := weapon ;
33511: LD_ADDR_VAR 0 3
33515: PUSH
33516: LD_VAR 0 18
33520: ST_TO_ADDR
// end ; end ;
33521: LD_VAR 0 3
33525: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
33526: LD_INT 0
33528: PPUSH
33529: PPUSH
// result := true ;
33530: LD_ADDR_VAR 0 3
33534: PUSH
33535: LD_INT 1
33537: ST_TO_ADDR
// if array1 = array2 then
33538: LD_VAR 0 1
33542: PUSH
33543: LD_VAR 0 2
33547: EQUAL
33548: IFFALSE 33608
// begin for i = 1 to array1 do
33550: LD_ADDR_VAR 0 4
33554: PUSH
33555: DOUBLE
33556: LD_INT 1
33558: DEC
33559: ST_TO_ADDR
33560: LD_VAR 0 1
33564: PUSH
33565: FOR_TO
33566: IFFALSE 33604
// if array1 [ i ] <> array2 [ i ] then
33568: LD_VAR 0 1
33572: PUSH
33573: LD_VAR 0 4
33577: ARRAY
33578: PUSH
33579: LD_VAR 0 2
33583: PUSH
33584: LD_VAR 0 4
33588: ARRAY
33589: NONEQUAL
33590: IFFALSE 33602
// begin result := false ;
33592: LD_ADDR_VAR 0 3
33596: PUSH
33597: LD_INT 0
33599: ST_TO_ADDR
// break ;
33600: GO 33604
// end ;
33602: GO 33565
33604: POP
33605: POP
// end else
33606: GO 33616
// result := false ;
33608: LD_ADDR_VAR 0 3
33612: PUSH
33613: LD_INT 0
33615: ST_TO_ADDR
// end ;
33616: LD_VAR 0 3
33620: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
33621: LD_INT 0
33623: PPUSH
33624: PPUSH
// if not array1 or not array2 then
33625: LD_VAR 0 1
33629: NOT
33630: IFTRUE 33639
33632: PUSH
33633: LD_VAR 0 2
33637: NOT
33638: OR
33639: IFFALSE 33643
// exit ;
33641: GO 33707
// result := true ;
33643: LD_ADDR_VAR 0 3
33647: PUSH
33648: LD_INT 1
33650: ST_TO_ADDR
// for i = 1 to array1 do
33651: LD_ADDR_VAR 0 4
33655: PUSH
33656: DOUBLE
33657: LD_INT 1
33659: DEC
33660: ST_TO_ADDR
33661: LD_VAR 0 1
33665: PUSH
33666: FOR_TO
33667: IFFALSE 33705
// if array1 [ i ] <> array2 [ i ] then
33669: LD_VAR 0 1
33673: PUSH
33674: LD_VAR 0 4
33678: ARRAY
33679: PUSH
33680: LD_VAR 0 2
33684: PUSH
33685: LD_VAR 0 4
33689: ARRAY
33690: NONEQUAL
33691: IFFALSE 33703
// begin result := false ;
33693: LD_ADDR_VAR 0 3
33697: PUSH
33698: LD_INT 0
33700: ST_TO_ADDR
// break ;
33701: GO 33705
// end ;
33703: GO 33666
33705: POP
33706: POP
// end ;
33707: LD_VAR 0 3
33711: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33712: LD_INT 0
33714: PPUSH
33715: PPUSH
33716: PPUSH
// pom := GetBase ( fac ) ;
33717: LD_ADDR_VAR 0 5
33721: PUSH
33722: LD_VAR 0 1
33726: PPUSH
33727: CALL_OW 274
33731: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33732: LD_ADDR_VAR 0 4
33736: PUSH
33737: LD_VAR 0 2
33741: PUSH
33742: LD_INT 1
33744: ARRAY
33745: PPUSH
33746: LD_VAR 0 2
33750: PUSH
33751: LD_INT 2
33753: ARRAY
33754: PPUSH
33755: LD_VAR 0 2
33759: PUSH
33760: LD_INT 3
33762: ARRAY
33763: PPUSH
33764: LD_VAR 0 2
33768: PUSH
33769: LD_INT 4
33771: ARRAY
33772: PPUSH
33773: CALL_OW 449
33777: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33778: LD_ADDR_VAR 0 3
33782: PUSH
33783: LD_VAR 0 5
33787: PPUSH
33788: LD_INT 1
33790: PPUSH
33791: CALL_OW 275
33795: PUSH
33796: LD_VAR 0 4
33800: PUSH
33801: LD_INT 1
33803: ARRAY
33804: GREATEREQUAL
33805: IFFALSE 33831
33807: PUSH
33808: LD_VAR 0 5
33812: PPUSH
33813: LD_INT 2
33815: PPUSH
33816: CALL_OW 275
33820: PUSH
33821: LD_VAR 0 4
33825: PUSH
33826: LD_INT 2
33828: ARRAY
33829: GREATEREQUAL
33830: AND
33831: IFFALSE 33857
33833: PUSH
33834: LD_VAR 0 5
33838: PPUSH
33839: LD_INT 3
33841: PPUSH
33842: CALL_OW 275
33846: PUSH
33847: LD_VAR 0 4
33851: PUSH
33852: LD_INT 3
33854: ARRAY
33855: GREATEREQUAL
33856: AND
33857: ST_TO_ADDR
// end ;
33858: LD_VAR 0 3
33862: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33863: LD_INT 0
33865: PPUSH
33866: PPUSH
33867: PPUSH
33868: PPUSH
// pom := GetBase ( building ) ;
33869: LD_ADDR_VAR 0 3
33873: PUSH
33874: LD_VAR 0 1
33878: PPUSH
33879: CALL_OW 274
33883: ST_TO_ADDR
// if not pom then
33884: LD_VAR 0 3
33888: NOT
33889: IFFALSE 33893
// exit ;
33891: GO 34067
// btype := GetBType ( building ) ;
33893: LD_ADDR_VAR 0 5
33897: PUSH
33898: LD_VAR 0 1
33902: PPUSH
33903: CALL_OW 266
33907: ST_TO_ADDR
// if btype = b_armoury then
33908: LD_VAR 0 5
33912: PUSH
33913: LD_INT 4
33915: EQUAL
33916: IFFALSE 33926
// btype := b_barracks ;
33918: LD_ADDR_VAR 0 5
33922: PUSH
33923: LD_INT 5
33925: ST_TO_ADDR
// if btype = b_depot then
33926: LD_VAR 0 5
33930: PUSH
33931: LD_INT 0
33933: EQUAL
33934: IFFALSE 33944
// btype := b_warehouse ;
33936: LD_ADDR_VAR 0 5
33940: PUSH
33941: LD_INT 1
33943: ST_TO_ADDR
// if btype = b_workshop then
33944: LD_VAR 0 5
33948: PUSH
33949: LD_INT 2
33951: EQUAL
33952: IFFALSE 33962
// btype := b_factory ;
33954: LD_ADDR_VAR 0 5
33958: PUSH
33959: LD_INT 3
33961: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33962: LD_ADDR_VAR 0 4
33966: PUSH
33967: LD_VAR 0 5
33971: PPUSH
33972: LD_VAR 0 1
33976: PPUSH
33977: CALL_OW 248
33981: PPUSH
33982: CALL_OW 450
33986: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33987: LD_ADDR_VAR 0 2
33991: PUSH
33992: LD_VAR 0 3
33996: PPUSH
33997: LD_INT 1
33999: PPUSH
34000: CALL_OW 275
34004: PUSH
34005: LD_VAR 0 4
34009: PUSH
34010: LD_INT 1
34012: ARRAY
34013: GREATEREQUAL
34014: IFFALSE 34040
34016: PUSH
34017: LD_VAR 0 3
34021: PPUSH
34022: LD_INT 2
34024: PPUSH
34025: CALL_OW 275
34029: PUSH
34030: LD_VAR 0 4
34034: PUSH
34035: LD_INT 2
34037: ARRAY
34038: GREATEREQUAL
34039: AND
34040: IFFALSE 34066
34042: PUSH
34043: LD_VAR 0 3
34047: PPUSH
34048: LD_INT 3
34050: PPUSH
34051: CALL_OW 275
34055: PUSH
34056: LD_VAR 0 4
34060: PUSH
34061: LD_INT 3
34063: ARRAY
34064: GREATEREQUAL
34065: AND
34066: ST_TO_ADDR
// end ;
34067: LD_VAR 0 2
34071: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
34072: LD_INT 0
34074: PPUSH
34075: PPUSH
34076: PPUSH
// pom := GetBase ( building ) ;
34077: LD_ADDR_VAR 0 4
34081: PUSH
34082: LD_VAR 0 1
34086: PPUSH
34087: CALL_OW 274
34091: ST_TO_ADDR
// if not pom then
34092: LD_VAR 0 4
34096: NOT
34097: IFFALSE 34101
// exit ;
34099: GO 34206
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34101: LD_ADDR_VAR 0 5
34105: PUSH
34106: LD_VAR 0 2
34110: PPUSH
34111: LD_VAR 0 1
34115: PPUSH
34116: CALL_OW 248
34120: PPUSH
34121: CALL_OW 450
34125: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34126: LD_ADDR_VAR 0 3
34130: PUSH
34131: LD_VAR 0 4
34135: PPUSH
34136: LD_INT 1
34138: PPUSH
34139: CALL_OW 275
34143: PUSH
34144: LD_VAR 0 5
34148: PUSH
34149: LD_INT 1
34151: ARRAY
34152: GREATEREQUAL
34153: IFFALSE 34179
34155: PUSH
34156: LD_VAR 0 4
34160: PPUSH
34161: LD_INT 2
34163: PPUSH
34164: CALL_OW 275
34168: PUSH
34169: LD_VAR 0 5
34173: PUSH
34174: LD_INT 2
34176: ARRAY
34177: GREATEREQUAL
34178: AND
34179: IFFALSE 34205
34181: PUSH
34182: LD_VAR 0 4
34186: PPUSH
34187: LD_INT 3
34189: PPUSH
34190: CALL_OW 275
34194: PUSH
34195: LD_VAR 0 5
34199: PUSH
34200: LD_INT 3
34202: ARRAY
34203: GREATEREQUAL
34204: AND
34205: ST_TO_ADDR
// end ;
34206: LD_VAR 0 3
34210: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
34211: LD_INT 0
34213: PPUSH
34214: PPUSH
34215: PPUSH
34216: PPUSH
34217: PPUSH
34218: PPUSH
34219: PPUSH
34220: PPUSH
34221: PPUSH
34222: PPUSH
34223: PPUSH
// result := false ;
34224: LD_ADDR_VAR 0 8
34228: PUSH
34229: LD_INT 0
34231: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
34232: LD_VAR 0 5
34236: NOT
34237: IFTRUE 34246
34239: PUSH
34240: LD_VAR 0 1
34244: NOT
34245: OR
34246: IFTRUE 34255
34248: PUSH
34249: LD_VAR 0 2
34253: NOT
34254: OR
34255: IFTRUE 34264
34257: PUSH
34258: LD_VAR 0 3
34262: NOT
34263: OR
34264: IFFALSE 34268
// exit ;
34266: GO 35094
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
34268: LD_ADDR_VAR 0 14
34272: PUSH
34273: LD_VAR 0 1
34277: PPUSH
34278: LD_VAR 0 2
34282: PPUSH
34283: LD_VAR 0 3
34287: PPUSH
34288: LD_VAR 0 4
34292: PPUSH
34293: LD_VAR 0 5
34297: PUSH
34298: LD_INT 1
34300: ARRAY
34301: PPUSH
34302: CALL_OW 248
34306: PPUSH
34307: LD_INT 0
34309: PPUSH
34310: CALL 36375 0 6
34314: ST_TO_ADDR
// if not hexes then
34315: LD_VAR 0 14
34319: NOT
34320: IFFALSE 34324
// exit ;
34322: GO 35094
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34324: LD_ADDR_VAR 0 17
34328: PUSH
34329: LD_VAR 0 5
34333: PPUSH
34334: LD_INT 22
34336: PUSH
34337: LD_VAR 0 13
34341: PPUSH
34342: CALL_OW 255
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: PUSH
34351: LD_INT 2
34353: PUSH
34354: LD_INT 30
34356: PUSH
34357: LD_INT 0
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: LD_INT 30
34366: PUSH
34367: LD_INT 1
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: LIST
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PPUSH
34383: CALL_OW 72
34387: ST_TO_ADDR
// for i = 1 to hexes do
34388: LD_ADDR_VAR 0 9
34392: PUSH
34393: DOUBLE
34394: LD_INT 1
34396: DEC
34397: ST_TO_ADDR
34398: LD_VAR 0 14
34402: PUSH
34403: FOR_TO
34404: IFFALSE 35092
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34406: LD_ADDR_VAR 0 13
34410: PUSH
34411: LD_VAR 0 14
34415: PUSH
34416: LD_VAR 0 9
34420: ARRAY
34421: PUSH
34422: LD_INT 1
34424: ARRAY
34425: PPUSH
34426: LD_VAR 0 14
34430: PUSH
34431: LD_VAR 0 9
34435: ARRAY
34436: PUSH
34437: LD_INT 2
34439: ARRAY
34440: PPUSH
34441: CALL_OW 428
34445: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
34446: LD_VAR 0 14
34450: PUSH
34451: LD_VAR 0 9
34455: ARRAY
34456: PUSH
34457: LD_INT 1
34459: ARRAY
34460: PPUSH
34461: LD_VAR 0 14
34465: PUSH
34466: LD_VAR 0 9
34470: ARRAY
34471: PUSH
34472: LD_INT 2
34474: ARRAY
34475: PPUSH
34476: CALL_OW 351
34480: IFTRUE 34519
34482: PUSH
34483: LD_VAR 0 14
34487: PUSH
34488: LD_VAR 0 9
34492: ARRAY
34493: PUSH
34494: LD_INT 1
34496: ARRAY
34497: PPUSH
34498: LD_VAR 0 14
34502: PUSH
34503: LD_VAR 0 9
34507: ARRAY
34508: PUSH
34509: LD_INT 2
34511: ARRAY
34512: PPUSH
34513: CALL_OW 488
34517: NOT
34518: OR
34519: IFTRUE 34536
34521: PUSH
34522: LD_VAR 0 13
34526: PPUSH
34527: CALL_OW 247
34531: PUSH
34532: LD_INT 3
34534: EQUAL
34535: OR
34536: IFFALSE 34542
// exit ;
34538: POP
34539: POP
34540: GO 35094
// if not tmp then
34542: LD_VAR 0 13
34546: NOT
34547: IFFALSE 34551
// continue ;
34549: GO 34403
// result := true ;
34551: LD_ADDR_VAR 0 8
34555: PUSH
34556: LD_INT 1
34558: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
34559: LD_VAR 0 6
34563: IFFALSE 34580
34565: PUSH
34566: LD_VAR 0 13
34570: PPUSH
34571: CALL_OW 247
34575: PUSH
34576: LD_INT 2
34578: EQUAL
34579: AND
34580: IFFALSE 34597
34582: PUSH
34583: LD_VAR 0 13
34587: PPUSH
34588: CALL_OW 263
34592: PUSH
34593: LD_INT 1
34595: EQUAL
34596: AND
34597: IFFALSE 34761
// begin if IsDrivenBy ( tmp ) then
34599: LD_VAR 0 13
34603: PPUSH
34604: CALL_OW 311
34608: IFFALSE 34612
// continue ;
34610: GO 34403
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
34612: LD_VAR 0 6
34616: PPUSH
34617: LD_INT 3
34619: PUSH
34620: LD_INT 60
34622: PUSH
34623: EMPTY
34624: LIST
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 3
34632: PUSH
34633: LD_INT 55
34635: PUSH
34636: EMPTY
34637: LIST
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: PPUSH
34647: CALL_OW 72
34651: IFFALSE 34759
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
34653: LD_ADDR_VAR 0 18
34657: PUSH
34658: LD_VAR 0 6
34662: PPUSH
34663: LD_INT 3
34665: PUSH
34666: LD_INT 60
34668: PUSH
34669: EMPTY
34670: LIST
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PUSH
34676: LD_INT 3
34678: PUSH
34679: LD_INT 55
34681: PUSH
34682: EMPTY
34683: LIST
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PPUSH
34693: CALL_OW 72
34697: PUSH
34698: LD_INT 1
34700: ARRAY
34701: ST_TO_ADDR
// if IsInUnit ( driver ) then
34702: LD_VAR 0 18
34706: PPUSH
34707: CALL_OW 310
34711: IFFALSE 34722
// ComExit ( driver ) ;
34713: LD_VAR 0 18
34717: PPUSH
34718: CALL 60365 0 1
// AddComEnterUnit ( driver , tmp ) ;
34722: LD_VAR 0 18
34726: PPUSH
34727: LD_VAR 0 13
34731: PPUSH
34732: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34736: LD_VAR 0 18
34740: PPUSH
34741: LD_VAR 0 7
34745: PPUSH
34746: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34750: LD_VAR 0 18
34754: PPUSH
34755: CALL_OW 181
// end ; continue ;
34759: GO 34403
// end ; if not cleaners or not tmp in cleaners then
34761: LD_VAR 0 6
34765: NOT
34766: IFTRUE 34781
34768: PUSH
34769: LD_VAR 0 13
34773: PUSH
34774: LD_VAR 0 6
34778: IN
34779: NOT
34780: OR
34781: IFFALSE 35090
// begin if dep then
34783: LD_VAR 0 17
34787: IFFALSE 34923
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34789: LD_ADDR_VAR 0 16
34793: PUSH
34794: LD_VAR 0 17
34798: PUSH
34799: LD_INT 1
34801: ARRAY
34802: PPUSH
34803: CALL_OW 250
34807: PPUSH
34808: LD_VAR 0 17
34812: PUSH
34813: LD_INT 1
34815: ARRAY
34816: PPUSH
34817: CALL_OW 254
34821: PPUSH
34822: LD_INT 5
34824: PPUSH
34825: CALL_OW 272
34829: PUSH
34830: LD_VAR 0 17
34834: PUSH
34835: LD_INT 1
34837: ARRAY
34838: PPUSH
34839: CALL_OW 251
34843: PPUSH
34844: LD_VAR 0 17
34848: PUSH
34849: LD_INT 1
34851: ARRAY
34852: PPUSH
34853: CALL_OW 254
34857: PPUSH
34858: LD_INT 5
34860: PPUSH
34861: CALL_OW 273
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34870: LD_VAR 0 16
34874: PUSH
34875: LD_INT 1
34877: ARRAY
34878: PPUSH
34879: LD_VAR 0 16
34883: PUSH
34884: LD_INT 2
34886: ARRAY
34887: PPUSH
34888: CALL_OW 488
34892: IFFALSE 34923
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34894: LD_VAR 0 13
34898: PPUSH
34899: LD_VAR 0 16
34903: PUSH
34904: LD_INT 1
34906: ARRAY
34907: PPUSH
34908: LD_VAR 0 16
34912: PUSH
34913: LD_INT 2
34915: ARRAY
34916: PPUSH
34917: CALL_OW 111
// continue ;
34921: GO 34403
// end ; end ; r := GetDir ( tmp ) ;
34923: LD_ADDR_VAR 0 15
34927: PUSH
34928: LD_VAR 0 13
34932: PPUSH
34933: CALL_OW 254
34937: ST_TO_ADDR
// if r = 5 then
34938: LD_VAR 0 15
34942: PUSH
34943: LD_INT 5
34945: EQUAL
34946: IFFALSE 34956
// r := 0 ;
34948: LD_ADDR_VAR 0 15
34952: PUSH
34953: LD_INT 0
34955: ST_TO_ADDR
// for j = r to 5 do
34956: LD_ADDR_VAR 0 10
34960: PUSH
34961: DOUBLE
34962: LD_VAR 0 15
34966: DEC
34967: ST_TO_ADDR
34968: LD_INT 5
34970: PUSH
34971: FOR_TO
34972: IFFALSE 35088
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34974: LD_ADDR_VAR 0 11
34978: PUSH
34979: LD_VAR 0 13
34983: PPUSH
34984: CALL_OW 250
34988: PPUSH
34989: LD_VAR 0 10
34993: PPUSH
34994: LD_INT 2
34996: PPUSH
34997: CALL_OW 272
35001: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
35002: LD_ADDR_VAR 0 12
35006: PUSH
35007: LD_VAR 0 13
35011: PPUSH
35012: CALL_OW 251
35016: PPUSH
35017: LD_VAR 0 10
35021: PPUSH
35022: LD_INT 2
35024: PPUSH
35025: CALL_OW 273
35029: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
35030: LD_VAR 0 11
35034: PPUSH
35035: LD_VAR 0 12
35039: PPUSH
35040: CALL_OW 488
35044: IFFALSE 35063
35046: PUSH
35047: LD_VAR 0 11
35051: PPUSH
35052: LD_VAR 0 12
35056: PPUSH
35057: CALL_OW 428
35061: NOT
35062: AND
35063: IFFALSE 35086
// begin ComMoveXY ( tmp , _x , _y ) ;
35065: LD_VAR 0 13
35069: PPUSH
35070: LD_VAR 0 11
35074: PPUSH
35075: LD_VAR 0 12
35079: PPUSH
35080: CALL_OW 111
// break ;
35084: GO 35088
// end ; end ;
35086: GO 34971
35088: POP
35089: POP
// end ; end ;
35090: GO 34403
35092: POP
35093: POP
// end ;
35094: LD_VAR 0 8
35098: RET
// export function BuildingTechInvented ( side , btype ) ; begin
35099: LD_INT 0
35101: PPUSH
// result := true ;
35102: LD_ADDR_VAR 0 3
35106: PUSH
35107: LD_INT 1
35109: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
35110: LD_VAR 0 2
35114: PUSH
35115: LD_INT 24
35117: DOUBLE
35118: EQUAL
35119: IFTRUE 35129
35121: LD_INT 33
35123: DOUBLE
35124: EQUAL
35125: IFTRUE 35129
35127: GO 35154
35129: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
35130: LD_ADDR_VAR 0 3
35134: PUSH
35135: LD_INT 32
35137: PPUSH
35138: LD_VAR 0 1
35142: PPUSH
35143: CALL_OW 321
35147: PUSH
35148: LD_INT 2
35150: EQUAL
35151: ST_TO_ADDR
35152: GO 35470
35154: LD_INT 20
35156: DOUBLE
35157: EQUAL
35158: IFTRUE 35162
35160: GO 35187
35162: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
35163: LD_ADDR_VAR 0 3
35167: PUSH
35168: LD_INT 6
35170: PPUSH
35171: LD_VAR 0 1
35175: PPUSH
35176: CALL_OW 321
35180: PUSH
35181: LD_INT 2
35183: EQUAL
35184: ST_TO_ADDR
35185: GO 35470
35187: LD_INT 22
35189: DOUBLE
35190: EQUAL
35191: IFTRUE 35201
35193: LD_INT 36
35195: DOUBLE
35196: EQUAL
35197: IFTRUE 35201
35199: GO 35226
35201: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
35202: LD_ADDR_VAR 0 3
35206: PUSH
35207: LD_INT 15
35209: PPUSH
35210: LD_VAR 0 1
35214: PPUSH
35215: CALL_OW 321
35219: PUSH
35220: LD_INT 2
35222: EQUAL
35223: ST_TO_ADDR
35224: GO 35470
35226: LD_INT 30
35228: DOUBLE
35229: EQUAL
35230: IFTRUE 35234
35232: GO 35259
35234: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
35235: LD_ADDR_VAR 0 3
35239: PUSH
35240: LD_INT 20
35242: PPUSH
35243: LD_VAR 0 1
35247: PPUSH
35248: CALL_OW 321
35252: PUSH
35253: LD_INT 2
35255: EQUAL
35256: ST_TO_ADDR
35257: GO 35470
35259: LD_INT 28
35261: DOUBLE
35262: EQUAL
35263: IFTRUE 35273
35265: LD_INT 21
35267: DOUBLE
35268: EQUAL
35269: IFTRUE 35273
35271: GO 35298
35273: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
35274: LD_ADDR_VAR 0 3
35278: PUSH
35279: LD_INT 21
35281: PPUSH
35282: LD_VAR 0 1
35286: PPUSH
35287: CALL_OW 321
35291: PUSH
35292: LD_INT 2
35294: EQUAL
35295: ST_TO_ADDR
35296: GO 35470
35298: LD_INT 16
35300: DOUBLE
35301: EQUAL
35302: IFTRUE 35306
35304: GO 35331
35306: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
35307: LD_ADDR_VAR 0 3
35311: PUSH
35312: LD_INT 84
35314: PPUSH
35315: LD_VAR 0 1
35319: PPUSH
35320: CALL_OW 321
35324: PUSH
35325: LD_INT 2
35327: EQUAL
35328: ST_TO_ADDR
35329: GO 35470
35331: LD_INT 19
35333: DOUBLE
35334: EQUAL
35335: IFTRUE 35345
35337: LD_INT 23
35339: DOUBLE
35340: EQUAL
35341: IFTRUE 35345
35343: GO 35370
35345: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
35346: LD_ADDR_VAR 0 3
35350: PUSH
35351: LD_INT 83
35353: PPUSH
35354: LD_VAR 0 1
35358: PPUSH
35359: CALL_OW 321
35363: PUSH
35364: LD_INT 2
35366: EQUAL
35367: ST_TO_ADDR
35368: GO 35470
35370: LD_INT 17
35372: DOUBLE
35373: EQUAL
35374: IFTRUE 35378
35376: GO 35403
35378: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
35379: LD_ADDR_VAR 0 3
35383: PUSH
35384: LD_INT 39
35386: PPUSH
35387: LD_VAR 0 1
35391: PPUSH
35392: CALL_OW 321
35396: PUSH
35397: LD_INT 2
35399: EQUAL
35400: ST_TO_ADDR
35401: GO 35470
35403: LD_INT 18
35405: DOUBLE
35406: EQUAL
35407: IFTRUE 35411
35409: GO 35436
35411: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
35412: LD_ADDR_VAR 0 3
35416: PUSH
35417: LD_INT 40
35419: PPUSH
35420: LD_VAR 0 1
35424: PPUSH
35425: CALL_OW 321
35429: PUSH
35430: LD_INT 2
35432: EQUAL
35433: ST_TO_ADDR
35434: GO 35470
35436: LD_INT 27
35438: DOUBLE
35439: EQUAL
35440: IFTRUE 35444
35442: GO 35469
35444: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
35445: LD_ADDR_VAR 0 3
35449: PUSH
35450: LD_INT 35
35452: PPUSH
35453: LD_VAR 0 1
35457: PPUSH
35458: CALL_OW 321
35462: PUSH
35463: LD_INT 2
35465: EQUAL
35466: ST_TO_ADDR
35467: GO 35470
35469: POP
// end ;
35470: LD_VAR 0 3
35474: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
35475: LD_INT 0
35477: PPUSH
35478: PPUSH
35479: PPUSH
35480: PPUSH
35481: PPUSH
35482: PPUSH
35483: PPUSH
35484: PPUSH
35485: PPUSH
35486: PPUSH
35487: PPUSH
// result := false ;
35488: LD_ADDR_VAR 0 6
35492: PUSH
35493: LD_INT 0
35495: ST_TO_ADDR
// if btype = b_depot then
35496: LD_VAR 0 2
35500: PUSH
35501: LD_INT 0
35503: EQUAL
35504: IFFALSE 35516
// begin result := true ;
35506: LD_ADDR_VAR 0 6
35510: PUSH
35511: LD_INT 1
35513: ST_TO_ADDR
// exit ;
35514: GO 36370
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
35516: LD_VAR 0 1
35520: NOT
35521: IFTRUE 35546
35523: PUSH
35524: LD_VAR 0 1
35528: PPUSH
35529: CALL_OW 266
35533: PUSH
35534: LD_INT 0
35536: PUSH
35537: LD_INT 1
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: IN
35544: NOT
35545: OR
35546: IFTRUE 35555
35548: PUSH
35549: LD_VAR 0 2
35553: NOT
35554: OR
35555: IFTRUE 35591
35557: PUSH
35558: LD_VAR 0 5
35562: PUSH
35563: LD_INT 0
35565: PUSH
35566: LD_INT 1
35568: PUSH
35569: LD_INT 2
35571: PUSH
35572: LD_INT 3
35574: PUSH
35575: LD_INT 4
35577: PUSH
35578: LD_INT 5
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: IN
35589: NOT
35590: OR
35591: IFTRUE 35610
35593: PUSH
35594: LD_VAR 0 3
35598: PPUSH
35599: LD_VAR 0 4
35603: PPUSH
35604: CALL_OW 488
35608: NOT
35609: OR
35610: IFFALSE 35614
// exit ;
35612: GO 36370
// side := GetSide ( depot ) ;
35614: LD_ADDR_VAR 0 9
35618: PUSH
35619: LD_VAR 0 1
35623: PPUSH
35624: CALL_OW 255
35628: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
35629: LD_VAR 0 9
35633: PPUSH
35634: LD_VAR 0 2
35638: PPUSH
35639: CALL 35099 0 2
35643: NOT
35644: IFFALSE 35648
// exit ;
35646: GO 36370
// pom := GetBase ( depot ) ;
35648: LD_ADDR_VAR 0 10
35652: PUSH
35653: LD_VAR 0 1
35657: PPUSH
35658: CALL_OW 274
35662: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35663: LD_ADDR_VAR 0 11
35667: PUSH
35668: LD_VAR 0 2
35672: PPUSH
35673: LD_VAR 0 1
35677: PPUSH
35678: CALL_OW 248
35682: PPUSH
35683: CALL_OW 450
35687: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35688: LD_VAR 0 10
35692: PPUSH
35693: LD_INT 1
35695: PPUSH
35696: CALL_OW 275
35700: PUSH
35701: LD_VAR 0 11
35705: PUSH
35706: LD_INT 1
35708: ARRAY
35709: GREATEREQUAL
35710: IFFALSE 35736
35712: PUSH
35713: LD_VAR 0 10
35717: PPUSH
35718: LD_INT 2
35720: PPUSH
35721: CALL_OW 275
35725: PUSH
35726: LD_VAR 0 11
35730: PUSH
35731: LD_INT 2
35733: ARRAY
35734: GREATEREQUAL
35735: AND
35736: IFFALSE 35762
35738: PUSH
35739: LD_VAR 0 10
35743: PPUSH
35744: LD_INT 3
35746: PPUSH
35747: CALL_OW 275
35751: PUSH
35752: LD_VAR 0 11
35756: PUSH
35757: LD_INT 3
35759: ARRAY
35760: GREATEREQUAL
35761: AND
35762: NOT
35763: IFFALSE 35767
// exit ;
35765: GO 36370
// if GetBType ( depot ) = b_depot then
35767: LD_VAR 0 1
35771: PPUSH
35772: CALL_OW 266
35776: PUSH
35777: LD_INT 0
35779: EQUAL
35780: IFFALSE 35792
// dist := 28 else
35782: LD_ADDR_VAR 0 14
35786: PUSH
35787: LD_INT 28
35789: ST_TO_ADDR
35790: GO 35800
// dist := 36 ;
35792: LD_ADDR_VAR 0 14
35796: PUSH
35797: LD_INT 36
35799: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35800: LD_VAR 0 1
35804: PPUSH
35805: LD_VAR 0 3
35809: PPUSH
35810: LD_VAR 0 4
35814: PPUSH
35815: CALL_OW 297
35819: PUSH
35820: LD_VAR 0 14
35824: GREATER
35825: IFFALSE 35829
// exit ;
35827: GO 36370
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35829: LD_ADDR_VAR 0 12
35833: PUSH
35834: LD_VAR 0 2
35838: PPUSH
35839: LD_VAR 0 3
35843: PPUSH
35844: LD_VAR 0 4
35848: PPUSH
35849: LD_VAR 0 5
35853: PPUSH
35854: LD_VAR 0 1
35858: PPUSH
35859: CALL_OW 248
35863: PPUSH
35864: LD_INT 0
35866: PPUSH
35867: CALL 36375 0 6
35871: ST_TO_ADDR
// if not hexes then
35872: LD_VAR 0 12
35876: NOT
35877: IFFALSE 35881
// exit ;
35879: GO 36370
// hex := GetHexInfo ( x , y ) ;
35881: LD_ADDR_VAR 0 15
35885: PUSH
35886: LD_VAR 0 3
35890: PPUSH
35891: LD_VAR 0 4
35895: PPUSH
35896: CALL_OW 546
35900: ST_TO_ADDR
// if hex [ 1 ] then
35901: LD_VAR 0 15
35905: PUSH
35906: LD_INT 1
35908: ARRAY
35909: IFFALSE 35913
// exit ;
35911: GO 36370
// height := hex [ 2 ] ;
35913: LD_ADDR_VAR 0 13
35917: PUSH
35918: LD_VAR 0 15
35922: PUSH
35923: LD_INT 2
35925: ARRAY
35926: ST_TO_ADDR
// for i = 1 to hexes do
35927: LD_ADDR_VAR 0 7
35931: PUSH
35932: DOUBLE
35933: LD_INT 1
35935: DEC
35936: ST_TO_ADDR
35937: LD_VAR 0 12
35941: PUSH
35942: FOR_TO
35943: IFFALSE 36287
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35945: LD_VAR 0 12
35949: PUSH
35950: LD_VAR 0 7
35954: ARRAY
35955: PUSH
35956: LD_INT 1
35958: ARRAY
35959: PPUSH
35960: LD_VAR 0 12
35964: PUSH
35965: LD_VAR 0 7
35969: ARRAY
35970: PUSH
35971: LD_INT 2
35973: ARRAY
35974: PPUSH
35975: CALL_OW 488
35979: NOT
35980: IFTRUE 36022
35982: PUSH
35983: LD_VAR 0 12
35987: PUSH
35988: LD_VAR 0 7
35992: ARRAY
35993: PUSH
35994: LD_INT 1
35996: ARRAY
35997: PPUSH
35998: LD_VAR 0 12
36002: PUSH
36003: LD_VAR 0 7
36007: ARRAY
36008: PUSH
36009: LD_INT 2
36011: ARRAY
36012: PPUSH
36013: CALL_OW 428
36017: PUSH
36018: LD_INT 0
36020: GREATER
36021: OR
36022: IFTRUE 36060
36024: PUSH
36025: LD_VAR 0 12
36029: PUSH
36030: LD_VAR 0 7
36034: ARRAY
36035: PUSH
36036: LD_INT 1
36038: ARRAY
36039: PPUSH
36040: LD_VAR 0 12
36044: PUSH
36045: LD_VAR 0 7
36049: ARRAY
36050: PUSH
36051: LD_INT 2
36053: ARRAY
36054: PPUSH
36055: CALL_OW 351
36059: OR
36060: IFFALSE 36066
// exit ;
36062: POP
36063: POP
36064: GO 36370
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36066: LD_ADDR_VAR 0 8
36070: PUSH
36071: LD_VAR 0 12
36075: PUSH
36076: LD_VAR 0 7
36080: ARRAY
36081: PUSH
36082: LD_INT 1
36084: ARRAY
36085: PPUSH
36086: LD_VAR 0 12
36090: PUSH
36091: LD_VAR 0 7
36095: ARRAY
36096: PUSH
36097: LD_INT 2
36099: ARRAY
36100: PPUSH
36101: CALL_OW 546
36105: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
36106: LD_VAR 0 8
36110: PUSH
36111: LD_INT 1
36113: ARRAY
36114: IFTRUE 36136
36116: PUSH
36117: LD_VAR 0 8
36121: PUSH
36122: LD_INT 2
36124: ARRAY
36125: PUSH
36126: LD_VAR 0 13
36130: PUSH
36131: LD_INT 2
36133: PLUS
36134: GREATER
36135: OR
36136: IFTRUE 36158
36138: PUSH
36139: LD_VAR 0 8
36143: PUSH
36144: LD_INT 2
36146: ARRAY
36147: PUSH
36148: LD_VAR 0 13
36152: PUSH
36153: LD_INT 2
36155: MINUS
36156: LESS
36157: OR
36158: IFTRUE 36226
36160: PUSH
36161: LD_VAR 0 8
36165: PUSH
36166: LD_INT 3
36168: ARRAY
36169: PUSH
36170: LD_INT 0
36172: PUSH
36173: LD_INT 8
36175: PUSH
36176: LD_INT 9
36178: PUSH
36179: LD_INT 10
36181: PUSH
36182: LD_INT 11
36184: PUSH
36185: LD_INT 12
36187: PUSH
36188: LD_INT 13
36190: PUSH
36191: LD_INT 16
36193: PUSH
36194: LD_INT 17
36196: PUSH
36197: LD_INT 18
36199: PUSH
36200: LD_INT 19
36202: PUSH
36203: LD_INT 20
36205: PUSH
36206: LD_INT 21
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: IN
36224: NOT
36225: OR
36226: IFTRUE 36239
36228: PUSH
36229: LD_VAR 0 8
36233: PUSH
36234: LD_INT 5
36236: ARRAY
36237: NOT
36238: OR
36239: IFTRUE 36279
36241: PUSH
36242: LD_VAR 0 8
36246: PUSH
36247: LD_INT 6
36249: ARRAY
36250: PUSH
36251: LD_INT 1
36253: PUSH
36254: LD_INT 2
36256: PUSH
36257: LD_INT 7
36259: PUSH
36260: LD_INT 9
36262: PUSH
36263: LD_INT 10
36265: PUSH
36266: LD_INT 11
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: LIST
36273: LIST
36274: LIST
36275: LIST
36276: IN
36277: NOT
36278: OR
36279: IFFALSE 36285
// exit ;
36281: POP
36282: POP
36283: GO 36370
// end ;
36285: GO 35942
36287: POP
36288: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
36289: LD_VAR 0 9
36293: PPUSH
36294: LD_VAR 0 3
36298: PPUSH
36299: LD_VAR 0 4
36303: PPUSH
36304: LD_INT 20
36306: PPUSH
36307: CALL 28189 0 4
36311: PUSH
36312: LD_INT 4
36314: ARRAY
36315: IFFALSE 36319
// exit ;
36317: GO 36370
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
36319: LD_VAR 0 2
36323: PUSH
36324: LD_INT 29
36326: PUSH
36327: LD_INT 30
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: IN
36334: IFFALSE 36358
36336: PUSH
36337: LD_VAR 0 3
36341: PPUSH
36342: LD_VAR 0 4
36346: PPUSH
36347: LD_VAR 0 9
36351: PPUSH
36352: CALL_OW 440
36356: NOT
36357: AND
36358: IFFALSE 36362
// exit ;
36360: GO 36370
// result := true ;
36362: LD_ADDR_VAR 0 6
36366: PUSH
36367: LD_INT 1
36369: ST_TO_ADDR
// end ;
36370: LD_VAR 0 6
36374: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
36375: LD_INT 0
36377: PPUSH
36378: PPUSH
36379: PPUSH
36380: PPUSH
36381: PPUSH
36382: PPUSH
36383: PPUSH
36384: PPUSH
36385: PPUSH
36386: PPUSH
36387: PPUSH
36388: PPUSH
36389: PPUSH
36390: PPUSH
36391: PPUSH
36392: PPUSH
36393: PPUSH
36394: PPUSH
36395: PPUSH
36396: PPUSH
36397: PPUSH
36398: PPUSH
36399: PPUSH
36400: PPUSH
36401: PPUSH
36402: PPUSH
36403: PPUSH
36404: PPUSH
36405: PPUSH
36406: PPUSH
36407: PPUSH
36408: PPUSH
36409: PPUSH
36410: PPUSH
36411: PPUSH
36412: PPUSH
36413: PPUSH
36414: PPUSH
36415: PPUSH
36416: PPUSH
36417: PPUSH
36418: PPUSH
36419: PPUSH
36420: PPUSH
36421: PPUSH
36422: PPUSH
36423: PPUSH
36424: PPUSH
36425: PPUSH
36426: PPUSH
36427: PPUSH
36428: PPUSH
36429: PPUSH
36430: PPUSH
36431: PPUSH
36432: PPUSH
36433: PPUSH
36434: PPUSH
// result = [ ] ;
36435: LD_ADDR_VAR 0 7
36439: PUSH
36440: EMPTY
36441: ST_TO_ADDR
// temp_list = [ ] ;
36442: LD_ADDR_VAR 0 9
36446: PUSH
36447: EMPTY
36448: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
36449: LD_VAR 0 4
36453: PUSH
36454: LD_INT 0
36456: PUSH
36457: LD_INT 1
36459: PUSH
36460: LD_INT 2
36462: PUSH
36463: LD_INT 3
36465: PUSH
36466: LD_INT 4
36468: PUSH
36469: LD_INT 5
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: IN
36480: NOT
36481: IFTRUE 36524
36483: PUSH
36484: LD_VAR 0 1
36488: PUSH
36489: LD_INT 0
36491: PUSH
36492: LD_INT 1
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: IN
36499: IFFALSE 36523
36501: PUSH
36502: LD_VAR 0 5
36506: PUSH
36507: LD_INT 1
36509: PUSH
36510: LD_INT 2
36512: PUSH
36513: LD_INT 3
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: LIST
36520: IN
36521: NOT
36522: AND
36523: OR
36524: IFFALSE 36528
// exit ;
36526: GO 54927
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
36528: LD_VAR 0 1
36532: PUSH
36533: LD_INT 6
36535: PUSH
36536: LD_INT 7
36538: PUSH
36539: LD_INT 8
36541: PUSH
36542: LD_INT 13
36544: PUSH
36545: LD_INT 12
36547: PUSH
36548: LD_INT 15
36550: PUSH
36551: LD_INT 11
36553: PUSH
36554: LD_INT 14
36556: PUSH
36557: LD_INT 10
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: IN
36571: IFFALSE 36581
// btype = b_lab ;
36573: LD_ADDR_VAR 0 1
36577: PUSH
36578: LD_INT 6
36580: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
36581: LD_VAR 0 6
36585: PUSH
36586: LD_INT 0
36588: PUSH
36589: LD_INT 1
36591: PUSH
36592: LD_INT 2
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: LIST
36599: IN
36600: NOT
36601: IFTRUE 36669
36603: PUSH
36604: LD_VAR 0 1
36608: PUSH
36609: LD_INT 0
36611: PUSH
36612: LD_INT 1
36614: PUSH
36615: LD_INT 2
36617: PUSH
36618: LD_INT 3
36620: PUSH
36621: LD_INT 6
36623: PUSH
36624: LD_INT 36
36626: PUSH
36627: LD_INT 4
36629: PUSH
36630: LD_INT 5
36632: PUSH
36633: LD_INT 31
36635: PUSH
36636: LD_INT 32
36638: PUSH
36639: LD_INT 33
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: LIST
36651: LIST
36652: LIST
36653: LIST
36654: IN
36655: NOT
36656: IFFALSE 36668
36658: PUSH
36659: LD_VAR 0 6
36663: PUSH
36664: LD_INT 1
36666: EQUAL
36667: AND
36668: OR
36669: IFTRUE 36701
36671: PUSH
36672: LD_VAR 0 1
36676: PUSH
36677: LD_INT 2
36679: PUSH
36680: LD_INT 3
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: IN
36687: NOT
36688: IFFALSE 36700
36690: PUSH
36691: LD_VAR 0 6
36695: PUSH
36696: LD_INT 2
36698: EQUAL
36699: AND
36700: OR
36701: IFFALSE 36711
// mode = 0 ;
36703: LD_ADDR_VAR 0 6
36707: PUSH
36708: LD_INT 0
36710: ST_TO_ADDR
// case mode of 0 :
36711: LD_VAR 0 6
36715: PUSH
36716: LD_INT 0
36718: DOUBLE
36719: EQUAL
36720: IFTRUE 36724
36722: GO 48177
36724: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36725: LD_ADDR_VAR 0 11
36729: PUSH
36730: LD_INT 0
36732: PUSH
36733: LD_INT 0
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 0
36742: PUSH
36743: LD_INT 1
36745: NEG
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: LD_INT 1
36753: PUSH
36754: LD_INT 0
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 1
36763: PUSH
36764: LD_INT 1
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 0
36773: PUSH
36774: LD_INT 1
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 1
36783: NEG
36784: PUSH
36785: LD_INT 0
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 1
36794: NEG
36795: PUSH
36796: LD_INT 1
36798: NEG
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: PUSH
36804: LD_INT 1
36806: NEG
36807: PUSH
36808: LD_INT 2
36810: NEG
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: LD_INT 0
36818: PUSH
36819: LD_INT 2
36821: NEG
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: LD_INT 1
36829: PUSH
36830: LD_INT 1
36832: NEG
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 1
36840: PUSH
36841: LD_INT 2
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 0
36850: PUSH
36851: LD_INT 2
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 1
36860: NEG
36861: PUSH
36862: LD_INT 1
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_INT 1
36871: PUSH
36872: LD_INT 3
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 0
36881: PUSH
36882: LD_INT 3
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 1
36891: NEG
36892: PUSH
36893: LD_INT 2
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36918: LD_ADDR_VAR 0 12
36922: PUSH
36923: LD_INT 0
36925: PUSH
36926: LD_INT 0
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: LD_INT 0
36935: PUSH
36936: LD_INT 1
36938: NEG
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: LD_INT 1
36946: PUSH
36947: LD_INT 0
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: LD_INT 1
36956: PUSH
36957: LD_INT 1
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PUSH
36964: LD_INT 0
36966: PUSH
36967: LD_INT 1
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: PUSH
36974: LD_INT 1
36976: NEG
36977: PUSH
36978: LD_INT 0
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: PUSH
36985: LD_INT 1
36987: NEG
36988: PUSH
36989: LD_INT 1
36991: NEG
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: PUSH
36997: LD_INT 1
36999: PUSH
37000: LD_INT 1
37002: NEG
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: PUSH
37008: LD_INT 2
37010: PUSH
37011: LD_INT 0
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PUSH
37018: LD_INT 2
37020: PUSH
37021: LD_INT 1
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: PUSH
37028: LD_INT 1
37030: NEG
37031: PUSH
37032: LD_INT 1
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: LD_INT 2
37041: NEG
37042: PUSH
37043: LD_INT 0
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 2
37052: NEG
37053: PUSH
37054: LD_INT 1
37056: NEG
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PUSH
37062: LD_INT 2
37064: NEG
37065: PUSH
37066: LD_INT 1
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: PUSH
37073: LD_INT 3
37075: NEG
37076: PUSH
37077: LD_INT 0
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: PUSH
37084: LD_INT 3
37086: NEG
37087: PUSH
37088: LD_INT 1
37090: NEG
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: LIST
37112: LIST
37113: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37114: LD_ADDR_VAR 0 13
37118: PUSH
37119: LD_INT 0
37121: PUSH
37122: LD_INT 0
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 0
37131: PUSH
37132: LD_INT 1
37134: NEG
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: LD_INT 1
37142: PUSH
37143: LD_INT 0
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 1
37152: PUSH
37153: LD_INT 1
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 0
37162: PUSH
37163: LD_INT 1
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: LD_INT 1
37172: NEG
37173: PUSH
37174: LD_INT 0
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: PUSH
37181: LD_INT 1
37183: NEG
37184: PUSH
37185: LD_INT 1
37187: NEG
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: LD_INT 1
37195: NEG
37196: PUSH
37197: LD_INT 2
37199: NEG
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: PUSH
37205: LD_INT 2
37207: PUSH
37208: LD_INT 1
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 2
37217: PUSH
37218: LD_INT 2
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: LD_INT 1
37227: PUSH
37228: LD_INT 2
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: PUSH
37235: LD_INT 2
37237: NEG
37238: PUSH
37239: LD_INT 1
37241: NEG
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 2
37249: NEG
37250: PUSH
37251: LD_INT 2
37253: NEG
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: LD_INT 2
37261: NEG
37262: PUSH
37263: LD_INT 3
37265: NEG
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 3
37273: NEG
37274: PUSH
37275: LD_INT 2
37277: NEG
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: LD_INT 3
37285: NEG
37286: PUSH
37287: LD_INT 3
37289: NEG
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37313: LD_ADDR_VAR 0 14
37317: PUSH
37318: LD_INT 0
37320: PUSH
37321: LD_INT 0
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: LD_INT 0
37330: PUSH
37331: LD_INT 1
37333: NEG
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 1
37341: PUSH
37342: LD_INT 0
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 1
37351: PUSH
37352: LD_INT 1
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 0
37361: PUSH
37362: LD_INT 1
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PUSH
37369: LD_INT 1
37371: NEG
37372: PUSH
37373: LD_INT 0
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 1
37382: NEG
37383: PUSH
37384: LD_INT 1
37386: NEG
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: LD_INT 1
37394: NEG
37395: PUSH
37396: LD_INT 2
37398: NEG
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 0
37406: PUSH
37407: LD_INT 2
37409: NEG
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 1
37417: PUSH
37418: LD_INT 1
37420: NEG
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 1
37428: PUSH
37429: LD_INT 2
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PUSH
37436: LD_INT 0
37438: PUSH
37439: LD_INT 2
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 1
37448: NEG
37449: PUSH
37450: LD_INT 1
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: LD_INT 1
37459: NEG
37460: PUSH
37461: LD_INT 3
37463: NEG
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PUSH
37469: LD_INT 0
37471: PUSH
37472: LD_INT 3
37474: NEG
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 1
37482: PUSH
37483: LD_INT 2
37485: NEG
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: LIST
37505: LIST
37506: LIST
37507: LIST
37508: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37509: LD_ADDR_VAR 0 15
37513: PUSH
37514: LD_INT 0
37516: PUSH
37517: LD_INT 0
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 0
37526: PUSH
37527: LD_INT 1
37529: NEG
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 1
37537: PUSH
37538: LD_INT 0
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 1
37547: PUSH
37548: LD_INT 1
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: LD_INT 0
37557: PUSH
37558: LD_INT 1
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: LD_INT 1
37567: NEG
37568: PUSH
37569: LD_INT 0
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: PUSH
37576: LD_INT 1
37578: NEG
37579: PUSH
37580: LD_INT 1
37582: NEG
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 1
37590: PUSH
37591: LD_INT 1
37593: NEG
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PUSH
37599: LD_INT 2
37601: PUSH
37602: LD_INT 0
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 2
37611: PUSH
37612: LD_INT 1
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 1
37621: NEG
37622: PUSH
37623: LD_INT 1
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: PUSH
37630: LD_INT 2
37632: NEG
37633: PUSH
37634: LD_INT 0
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: LD_INT 2
37643: NEG
37644: PUSH
37645: LD_INT 1
37647: NEG
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 2
37655: PUSH
37656: LD_INT 1
37658: NEG
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 3
37666: PUSH
37667: LD_INT 0
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 3
37676: PUSH
37677: LD_INT 1
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: LIST
37701: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37702: LD_ADDR_VAR 0 16
37706: PUSH
37707: LD_INT 0
37709: PUSH
37710: LD_INT 0
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 0
37719: PUSH
37720: LD_INT 1
37722: NEG
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 1
37730: PUSH
37731: LD_INT 0
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: PUSH
37738: LD_INT 1
37740: PUSH
37741: LD_INT 1
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PUSH
37748: LD_INT 0
37750: PUSH
37751: LD_INT 1
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: PUSH
37758: LD_INT 1
37760: NEG
37761: PUSH
37762: LD_INT 0
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 1
37771: NEG
37772: PUSH
37773: LD_INT 1
37775: NEG
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: PUSH
37781: LD_INT 1
37783: NEG
37784: PUSH
37785: LD_INT 2
37787: NEG
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PUSH
37793: LD_INT 2
37795: PUSH
37796: LD_INT 1
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: LD_INT 2
37805: PUSH
37806: LD_INT 2
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 1
37815: PUSH
37816: LD_INT 2
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 2
37825: NEG
37826: PUSH
37827: LD_INT 1
37829: NEG
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: LD_INT 2
37837: NEG
37838: PUSH
37839: LD_INT 2
37841: NEG
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 3
37849: PUSH
37850: LD_INT 2
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: LD_INT 3
37859: PUSH
37860: LD_INT 3
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 2
37869: PUSH
37870: LD_INT 3
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37895: LD_ADDR_VAR 0 17
37899: PUSH
37900: LD_INT 0
37902: PUSH
37903: LD_INT 0
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 0
37912: PUSH
37913: LD_INT 1
37915: NEG
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 1
37923: PUSH
37924: LD_INT 0
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 1
37933: PUSH
37934: LD_INT 1
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 0
37943: PUSH
37944: LD_INT 1
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 1
37953: NEG
37954: PUSH
37955: LD_INT 0
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 1
37964: NEG
37965: PUSH
37966: LD_INT 1
37968: NEG
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 1
37976: NEG
37977: PUSH
37978: LD_INT 2
37980: NEG
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 0
37988: PUSH
37989: LD_INT 2
37991: NEG
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 1
37999: PUSH
38000: LD_INT 1
38002: NEG
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: PUSH
38008: LD_INT 2
38010: PUSH
38011: LD_INT 0
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: PUSH
38018: LD_INT 2
38020: PUSH
38021: LD_INT 1
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 2
38030: PUSH
38031: LD_INT 2
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 1
38040: PUSH
38041: LD_INT 2
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 0
38050: PUSH
38051: LD_INT 2
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: PUSH
38058: LD_INT 1
38060: NEG
38061: PUSH
38062: LD_INT 1
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 2
38071: NEG
38072: PUSH
38073: LD_INT 0
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: LD_INT 2
38082: NEG
38083: PUSH
38084: LD_INT 1
38086: NEG
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: LD_INT 2
38094: NEG
38095: PUSH
38096: LD_INT 2
38098: NEG
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38125: LD_ADDR_VAR 0 18
38129: PUSH
38130: LD_INT 0
38132: PUSH
38133: LD_INT 0
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: LD_INT 0
38142: PUSH
38143: LD_INT 1
38145: NEG
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 1
38153: PUSH
38154: LD_INT 0
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 1
38163: PUSH
38164: LD_INT 1
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: PUSH
38171: LD_INT 0
38173: PUSH
38174: LD_INT 1
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: LD_INT 1
38183: NEG
38184: PUSH
38185: LD_INT 0
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PUSH
38192: LD_INT 1
38194: NEG
38195: PUSH
38196: LD_INT 1
38198: NEG
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 1
38206: NEG
38207: PUSH
38208: LD_INT 2
38210: NEG
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: LD_INT 0
38218: PUSH
38219: LD_INT 2
38221: NEG
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 1
38229: PUSH
38230: LD_INT 1
38232: NEG
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: LD_INT 2
38240: PUSH
38241: LD_INT 0
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: PUSH
38248: LD_INT 2
38250: PUSH
38251: LD_INT 1
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: LD_INT 2
38260: PUSH
38261: LD_INT 2
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_INT 1
38270: PUSH
38271: LD_INT 2
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 0
38280: PUSH
38281: LD_INT 2
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: LD_INT 1
38290: NEG
38291: PUSH
38292: LD_INT 1
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 2
38301: NEG
38302: PUSH
38303: LD_INT 0
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 2
38312: NEG
38313: PUSH
38314: LD_INT 1
38316: NEG
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: LD_INT 2
38324: NEG
38325: PUSH
38326: LD_INT 2
38328: NEG
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: LIST
38338: LIST
38339: LIST
38340: LIST
38341: LIST
38342: LIST
38343: LIST
38344: LIST
38345: LIST
38346: LIST
38347: LIST
38348: LIST
38349: LIST
38350: LIST
38351: LIST
38352: LIST
38353: LIST
38354: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38355: LD_ADDR_VAR 0 19
38359: PUSH
38360: LD_INT 0
38362: PUSH
38363: LD_INT 0
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 0
38372: PUSH
38373: LD_INT 1
38375: NEG
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 1
38383: PUSH
38384: LD_INT 0
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 1
38393: PUSH
38394: LD_INT 1
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 0
38403: PUSH
38404: LD_INT 1
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: PUSH
38411: LD_INT 1
38413: NEG
38414: PUSH
38415: LD_INT 0
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 1
38424: NEG
38425: PUSH
38426: LD_INT 1
38428: NEG
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: PUSH
38434: LD_INT 1
38436: NEG
38437: PUSH
38438: LD_INT 2
38440: NEG
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: PUSH
38446: LD_INT 0
38448: PUSH
38449: LD_INT 2
38451: NEG
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: PUSH
38457: LD_INT 1
38459: PUSH
38460: LD_INT 1
38462: NEG
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PUSH
38468: LD_INT 2
38470: PUSH
38471: LD_INT 0
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: PUSH
38478: LD_INT 2
38480: PUSH
38481: LD_INT 1
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 2
38490: PUSH
38491: LD_INT 2
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: LD_INT 1
38500: PUSH
38501: LD_INT 2
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 0
38510: PUSH
38511: LD_INT 2
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 1
38520: NEG
38521: PUSH
38522: LD_INT 1
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 2
38531: NEG
38532: PUSH
38533: LD_INT 0
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PUSH
38540: LD_INT 2
38542: NEG
38543: PUSH
38544: LD_INT 1
38546: NEG
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: LD_INT 2
38554: NEG
38555: PUSH
38556: LD_INT 2
38558: NEG
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38585: LD_ADDR_VAR 0 20
38589: PUSH
38590: LD_INT 0
38592: PUSH
38593: LD_INT 0
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 0
38602: PUSH
38603: LD_INT 1
38605: NEG
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 1
38613: PUSH
38614: LD_INT 0
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: LD_INT 1
38623: PUSH
38624: LD_INT 1
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 0
38633: PUSH
38634: LD_INT 1
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: PUSH
38641: LD_INT 1
38643: NEG
38644: PUSH
38645: LD_INT 0
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: LD_INT 1
38654: NEG
38655: PUSH
38656: LD_INT 1
38658: NEG
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: LD_INT 1
38666: NEG
38667: PUSH
38668: LD_INT 2
38670: NEG
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: LD_INT 0
38678: PUSH
38679: LD_INT 2
38681: NEG
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 1
38689: PUSH
38690: LD_INT 1
38692: NEG
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 2
38700: PUSH
38701: LD_INT 0
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 2
38710: PUSH
38711: LD_INT 1
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 2
38720: PUSH
38721: LD_INT 2
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 1
38730: PUSH
38731: LD_INT 2
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 0
38740: PUSH
38741: LD_INT 2
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 1
38750: NEG
38751: PUSH
38752: LD_INT 1
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: LD_INT 2
38761: NEG
38762: PUSH
38763: LD_INT 0
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 2
38772: NEG
38773: PUSH
38774: LD_INT 1
38776: NEG
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: LD_INT 2
38784: NEG
38785: PUSH
38786: LD_INT 2
38788: NEG
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: LIST
38800: LIST
38801: LIST
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: LIST
38814: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38815: LD_ADDR_VAR 0 21
38819: PUSH
38820: LD_INT 0
38822: PUSH
38823: LD_INT 0
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: PUSH
38830: LD_INT 0
38832: PUSH
38833: LD_INT 1
38835: NEG
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 1
38843: PUSH
38844: LD_INT 0
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 1
38853: PUSH
38854: LD_INT 1
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 0
38863: PUSH
38864: LD_INT 1
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 1
38873: NEG
38874: PUSH
38875: LD_INT 0
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 1
38884: NEG
38885: PUSH
38886: LD_INT 1
38888: NEG
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: LD_INT 1
38896: NEG
38897: PUSH
38898: LD_INT 2
38900: NEG
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 0
38908: PUSH
38909: LD_INT 2
38911: NEG
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 1
38919: PUSH
38920: LD_INT 1
38922: NEG
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 2
38930: PUSH
38931: LD_INT 0
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 2
38940: PUSH
38941: LD_INT 1
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 2
38950: PUSH
38951: LD_INT 2
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 1
38960: PUSH
38961: LD_INT 2
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: LD_INT 0
38970: PUSH
38971: LD_INT 2
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 1
38980: NEG
38981: PUSH
38982: LD_INT 1
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 2
38991: NEG
38992: PUSH
38993: LD_INT 0
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 2
39002: NEG
39003: PUSH
39004: LD_INT 1
39006: NEG
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: LD_INT 2
39014: NEG
39015: PUSH
39016: LD_INT 2
39018: NEG
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: LIST
39030: LIST
39031: LIST
39032: LIST
39033: LIST
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39045: LD_ADDR_VAR 0 22
39049: PUSH
39050: LD_INT 0
39052: PUSH
39053: LD_INT 0
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 0
39062: PUSH
39063: LD_INT 1
39065: NEG
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: PUSH
39071: LD_INT 1
39073: PUSH
39074: LD_INT 0
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 1
39083: PUSH
39084: LD_INT 1
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 0
39093: PUSH
39094: LD_INT 1
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 1
39103: NEG
39104: PUSH
39105: LD_INT 0
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 1
39114: NEG
39115: PUSH
39116: LD_INT 1
39118: NEG
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 1
39126: NEG
39127: PUSH
39128: LD_INT 2
39130: NEG
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 0
39138: PUSH
39139: LD_INT 2
39141: NEG
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 1
39149: PUSH
39150: LD_INT 1
39152: NEG
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 2
39160: PUSH
39161: LD_INT 0
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: LD_INT 2
39170: PUSH
39171: LD_INT 1
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 2
39180: PUSH
39181: LD_INT 2
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: LD_INT 1
39190: PUSH
39191: LD_INT 2
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 0
39200: PUSH
39201: LD_INT 2
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 1
39210: NEG
39211: PUSH
39212: LD_INT 1
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: LD_INT 2
39221: NEG
39222: PUSH
39223: LD_INT 0
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 2
39232: NEG
39233: PUSH
39234: LD_INT 1
39236: NEG
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: LD_INT 2
39244: NEG
39245: PUSH
39246: LD_INT 2
39248: NEG
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39275: LD_ADDR_VAR 0 23
39279: PUSH
39280: LD_INT 0
39282: PUSH
39283: LD_INT 0
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 0
39292: PUSH
39293: LD_INT 1
39295: NEG
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 1
39303: PUSH
39304: LD_INT 0
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 1
39313: PUSH
39314: LD_INT 1
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 0
39323: PUSH
39324: LD_INT 1
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 1
39333: NEG
39334: PUSH
39335: LD_INT 0
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 1
39344: NEG
39345: PUSH
39346: LD_INT 1
39348: NEG
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 1
39356: NEG
39357: PUSH
39358: LD_INT 2
39360: NEG
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 0
39368: PUSH
39369: LD_INT 2
39371: NEG
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 1
39379: PUSH
39380: LD_INT 1
39382: NEG
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 2
39390: PUSH
39391: LD_INT 0
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 2
39400: PUSH
39401: LD_INT 1
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 2
39410: PUSH
39411: LD_INT 2
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 1
39420: PUSH
39421: LD_INT 2
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 0
39430: PUSH
39431: LD_INT 2
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 1
39440: NEG
39441: PUSH
39442: LD_INT 1
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 2
39451: NEG
39452: PUSH
39453: LD_INT 0
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 2
39462: NEG
39463: PUSH
39464: LD_INT 1
39466: NEG
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 2
39474: NEG
39475: PUSH
39476: LD_INT 2
39478: NEG
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 2
39486: NEG
39487: PUSH
39488: LD_INT 3
39490: NEG
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: LD_INT 1
39498: NEG
39499: PUSH
39500: LD_INT 3
39502: NEG
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 1
39510: PUSH
39511: LD_INT 2
39513: NEG
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 2
39521: PUSH
39522: LD_INT 1
39524: NEG
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
39555: LD_ADDR_VAR 0 24
39559: PUSH
39560: LD_INT 0
39562: PUSH
39563: LD_INT 0
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 0
39572: PUSH
39573: LD_INT 1
39575: NEG
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 1
39583: PUSH
39584: LD_INT 0
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 1
39593: PUSH
39594: LD_INT 1
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 0
39603: PUSH
39604: LD_INT 1
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 1
39613: NEG
39614: PUSH
39615: LD_INT 0
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 1
39624: NEG
39625: PUSH
39626: LD_INT 1
39628: NEG
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: LD_INT 1
39636: NEG
39637: PUSH
39638: LD_INT 2
39640: NEG
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 0
39648: PUSH
39649: LD_INT 2
39651: NEG
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 1
39659: PUSH
39660: LD_INT 1
39662: NEG
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PUSH
39668: LD_INT 2
39670: PUSH
39671: LD_INT 0
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 2
39680: PUSH
39681: LD_INT 1
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 2
39690: PUSH
39691: LD_INT 2
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: LD_INT 1
39700: PUSH
39701: LD_INT 2
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 0
39710: PUSH
39711: LD_INT 2
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: LD_INT 1
39720: NEG
39721: PUSH
39722: LD_INT 1
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 2
39731: NEG
39732: PUSH
39733: LD_INT 0
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 2
39742: NEG
39743: PUSH
39744: LD_INT 1
39746: NEG
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 2
39754: NEG
39755: PUSH
39756: LD_INT 2
39758: NEG
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 1
39766: PUSH
39767: LD_INT 2
39769: NEG
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 2
39777: PUSH
39778: LD_INT 1
39780: NEG
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 3
39788: PUSH
39789: LD_INT 1
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 3
39798: PUSH
39799: LD_INT 2
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39831: LD_ADDR_VAR 0 25
39835: PUSH
39836: LD_INT 0
39838: PUSH
39839: LD_INT 0
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 0
39848: PUSH
39849: LD_INT 1
39851: NEG
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 1
39859: PUSH
39860: LD_INT 0
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 1
39869: PUSH
39870: LD_INT 1
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 0
39879: PUSH
39880: LD_INT 1
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 1
39889: NEG
39890: PUSH
39891: LD_INT 0
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 1
39900: NEG
39901: PUSH
39902: LD_INT 1
39904: NEG
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 1
39912: NEG
39913: PUSH
39914: LD_INT 2
39916: NEG
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PUSH
39922: LD_INT 0
39924: PUSH
39925: LD_INT 2
39927: NEG
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 1
39935: PUSH
39936: LD_INT 1
39938: NEG
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 2
39946: PUSH
39947: LD_INT 0
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 2
39956: PUSH
39957: LD_INT 1
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 2
39966: PUSH
39967: LD_INT 2
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 1
39976: PUSH
39977: LD_INT 2
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 0
39986: PUSH
39987: LD_INT 2
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: LD_INT 1
39996: NEG
39997: PUSH
39998: LD_INT 1
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 2
40007: NEG
40008: PUSH
40009: LD_INT 0
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: LD_INT 2
40018: NEG
40019: PUSH
40020: LD_INT 1
40022: NEG
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 2
40030: NEG
40031: PUSH
40032: LD_INT 2
40034: NEG
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 3
40042: PUSH
40043: LD_INT 1
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 3
40052: PUSH
40053: LD_INT 2
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 2
40062: PUSH
40063: LD_INT 3
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 1
40072: PUSH
40073: LD_INT 3
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40105: LD_ADDR_VAR 0 26
40109: PUSH
40110: LD_INT 0
40112: PUSH
40113: LD_INT 0
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 0
40122: PUSH
40123: LD_INT 1
40125: NEG
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 1
40133: PUSH
40134: LD_INT 0
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 1
40143: PUSH
40144: LD_INT 1
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 0
40153: PUSH
40154: LD_INT 1
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 1
40163: NEG
40164: PUSH
40165: LD_INT 0
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 1
40174: NEG
40175: PUSH
40176: LD_INT 1
40178: NEG
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 1
40186: NEG
40187: PUSH
40188: LD_INT 2
40190: NEG
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 0
40198: PUSH
40199: LD_INT 2
40201: NEG
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 1
40209: PUSH
40210: LD_INT 1
40212: NEG
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 2
40220: PUSH
40221: LD_INT 0
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 2
40230: PUSH
40231: LD_INT 1
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 2
40240: PUSH
40241: LD_INT 2
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 1
40250: PUSH
40251: LD_INT 2
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 0
40260: PUSH
40261: LD_INT 2
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 1
40270: NEG
40271: PUSH
40272: LD_INT 1
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 2
40281: NEG
40282: PUSH
40283: LD_INT 0
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PUSH
40290: LD_INT 2
40292: NEG
40293: PUSH
40294: LD_INT 1
40296: NEG
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PUSH
40302: LD_INT 2
40304: NEG
40305: PUSH
40306: LD_INT 2
40308: NEG
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 2
40316: PUSH
40317: LD_INT 3
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 1
40326: PUSH
40327: LD_INT 3
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 1
40336: NEG
40337: PUSH
40338: LD_INT 2
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 2
40347: NEG
40348: PUSH
40349: LD_INT 1
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40381: LD_ADDR_VAR 0 27
40385: PUSH
40386: LD_INT 0
40388: PUSH
40389: LD_INT 0
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 0
40398: PUSH
40399: LD_INT 1
40401: NEG
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 1
40409: PUSH
40410: LD_INT 0
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 1
40419: PUSH
40420: LD_INT 1
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 0
40429: PUSH
40430: LD_INT 1
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 1
40439: NEG
40440: PUSH
40441: LD_INT 0
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 1
40450: NEG
40451: PUSH
40452: LD_INT 1
40454: NEG
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 1
40462: NEG
40463: PUSH
40464: LD_INT 2
40466: NEG
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 0
40474: PUSH
40475: LD_INT 2
40477: NEG
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 1
40485: PUSH
40486: LD_INT 1
40488: NEG
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 2
40496: PUSH
40497: LD_INT 0
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 2
40506: PUSH
40507: LD_INT 1
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 2
40516: PUSH
40517: LD_INT 2
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 1
40526: PUSH
40527: LD_INT 2
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 0
40536: PUSH
40537: LD_INT 2
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 1
40546: NEG
40547: PUSH
40548: LD_INT 1
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: LD_INT 2
40557: NEG
40558: PUSH
40559: LD_INT 0
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 2
40568: NEG
40569: PUSH
40570: LD_INT 1
40572: NEG
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 2
40580: NEG
40581: PUSH
40582: LD_INT 2
40584: NEG
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 1
40592: NEG
40593: PUSH
40594: LD_INT 2
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 2
40603: NEG
40604: PUSH
40605: LD_INT 1
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: LD_INT 3
40614: NEG
40615: PUSH
40616: LD_INT 1
40618: NEG
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 3
40626: NEG
40627: PUSH
40628: LD_INT 2
40630: NEG
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40661: LD_ADDR_VAR 0 28
40665: PUSH
40666: LD_INT 0
40668: PUSH
40669: LD_INT 0
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 0
40678: PUSH
40679: LD_INT 1
40681: NEG
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 1
40689: PUSH
40690: LD_INT 0
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 1
40699: PUSH
40700: LD_INT 1
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 0
40709: PUSH
40710: LD_INT 1
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 1
40719: NEG
40720: PUSH
40721: LD_INT 0
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 1
40730: NEG
40731: PUSH
40732: LD_INT 1
40734: NEG
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 1
40742: NEG
40743: PUSH
40744: LD_INT 2
40746: NEG
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 0
40754: PUSH
40755: LD_INT 2
40757: NEG
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 1
40765: PUSH
40766: LD_INT 1
40768: NEG
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 2
40776: PUSH
40777: LD_INT 0
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 2
40786: PUSH
40787: LD_INT 1
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 2
40796: PUSH
40797: LD_INT 2
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 1
40806: PUSH
40807: LD_INT 2
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 0
40816: PUSH
40817: LD_INT 2
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 1
40826: NEG
40827: PUSH
40828: LD_INT 1
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 2
40837: NEG
40838: PUSH
40839: LD_INT 0
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 2
40848: NEG
40849: PUSH
40850: LD_INT 1
40852: NEG
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 2
40860: NEG
40861: PUSH
40862: LD_INT 2
40864: NEG
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 2
40872: NEG
40873: PUSH
40874: LD_INT 3
40876: NEG
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 1
40884: NEG
40885: PUSH
40886: LD_INT 3
40888: NEG
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 3
40896: NEG
40897: PUSH
40898: LD_INT 1
40900: NEG
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 3
40908: NEG
40909: PUSH
40910: LD_INT 2
40912: NEG
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40943: LD_ADDR_VAR 0 29
40947: PUSH
40948: LD_INT 0
40950: PUSH
40951: LD_INT 0
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 0
40960: PUSH
40961: LD_INT 1
40963: NEG
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 1
40971: PUSH
40972: LD_INT 0
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 1
40981: PUSH
40982: LD_INT 1
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 0
40991: PUSH
40992: LD_INT 1
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 1
41001: NEG
41002: PUSH
41003: LD_INT 0
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 1
41012: NEG
41013: PUSH
41014: LD_INT 1
41016: NEG
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 1
41024: NEG
41025: PUSH
41026: LD_INT 2
41028: NEG
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 0
41036: PUSH
41037: LD_INT 2
41039: NEG
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 1
41047: PUSH
41048: LD_INT 1
41050: NEG
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 2
41058: PUSH
41059: LD_INT 0
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 2
41068: PUSH
41069: LD_INT 1
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 1
41078: PUSH
41079: LD_INT 2
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 0
41088: PUSH
41089: LD_INT 2
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 1
41098: NEG
41099: PUSH
41100: LD_INT 1
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: LD_INT 2
41109: NEG
41110: PUSH
41111: LD_INT 1
41113: NEG
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 2
41121: NEG
41122: PUSH
41123: LD_INT 2
41125: NEG
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 2
41133: NEG
41134: PUSH
41135: LD_INT 3
41137: NEG
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 2
41145: PUSH
41146: LD_INT 1
41148: NEG
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 3
41156: PUSH
41157: LD_INT 1
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 1
41166: PUSH
41167: LD_INT 3
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 1
41176: NEG
41177: PUSH
41178: LD_INT 2
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 3
41187: NEG
41188: PUSH
41189: LD_INT 2
41191: NEG
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41222: LD_ADDR_VAR 0 30
41226: PUSH
41227: LD_INT 0
41229: PUSH
41230: LD_INT 0
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 0
41239: PUSH
41240: LD_INT 1
41242: NEG
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 1
41250: PUSH
41251: LD_INT 0
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 1
41260: PUSH
41261: LD_INT 1
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 0
41270: PUSH
41271: LD_INT 1
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 1
41280: NEG
41281: PUSH
41282: LD_INT 0
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 1
41291: NEG
41292: PUSH
41293: LD_INT 1
41295: NEG
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 1
41303: NEG
41304: PUSH
41305: LD_INT 2
41307: NEG
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 0
41315: PUSH
41316: LD_INT 2
41318: NEG
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 1
41326: PUSH
41327: LD_INT 1
41329: NEG
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 2
41337: PUSH
41338: LD_INT 0
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 2
41347: PUSH
41348: LD_INT 1
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 2
41357: PUSH
41358: LD_INT 2
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: LD_INT 1
41367: PUSH
41368: LD_INT 2
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 1
41377: NEG
41378: PUSH
41379: LD_INT 1
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 2
41388: NEG
41389: PUSH
41390: LD_INT 0
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 2
41399: NEG
41400: PUSH
41401: LD_INT 1
41403: NEG
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 1
41411: NEG
41412: PUSH
41413: LD_INT 3
41415: NEG
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 1
41423: PUSH
41424: LD_INT 2
41426: NEG
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 3
41434: PUSH
41435: LD_INT 2
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 2
41444: PUSH
41445: LD_INT 3
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 2
41454: NEG
41455: PUSH
41456: LD_INT 1
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 3
41465: NEG
41466: PUSH
41467: LD_INT 1
41469: NEG
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41500: LD_ADDR_VAR 0 31
41504: PUSH
41505: LD_INT 0
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 0
41517: PUSH
41518: LD_INT 1
41520: NEG
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 1
41528: PUSH
41529: LD_INT 0
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 1
41538: PUSH
41539: LD_INT 1
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 0
41548: PUSH
41549: LD_INT 1
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 1
41558: NEG
41559: PUSH
41560: LD_INT 0
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: PUSH
41567: LD_INT 1
41569: NEG
41570: PUSH
41571: LD_INT 1
41573: NEG
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 1
41581: NEG
41582: PUSH
41583: LD_INT 2
41585: NEG
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 1
41593: PUSH
41594: LD_INT 1
41596: NEG
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 2
41604: PUSH
41605: LD_INT 0
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 2
41614: PUSH
41615: LD_INT 1
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 2
41624: PUSH
41625: LD_INT 2
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 1
41634: PUSH
41635: LD_INT 2
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 0
41644: PUSH
41645: LD_INT 2
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 1
41654: NEG
41655: PUSH
41656: LD_INT 1
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 2
41665: NEG
41666: PUSH
41667: LD_INT 1
41669: NEG
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 2
41677: NEG
41678: PUSH
41679: LD_INT 2
41681: NEG
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 2
41689: NEG
41690: PUSH
41691: LD_INT 3
41693: NEG
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 2
41701: PUSH
41702: LD_INT 1
41704: NEG
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 3
41712: PUSH
41713: LD_INT 1
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 1
41722: PUSH
41723: LD_INT 3
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 1
41732: NEG
41733: PUSH
41734: LD_INT 2
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 3
41743: NEG
41744: PUSH
41745: LD_INT 2
41747: NEG
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41778: LD_ADDR_VAR 0 32
41782: PUSH
41783: LD_INT 0
41785: PUSH
41786: LD_INT 0
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 0
41795: PUSH
41796: LD_INT 1
41798: NEG
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 1
41806: PUSH
41807: LD_INT 0
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 1
41816: PUSH
41817: LD_INT 1
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 0
41826: PUSH
41827: LD_INT 1
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 1
41836: NEG
41837: PUSH
41838: LD_INT 0
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 1
41847: NEG
41848: PUSH
41849: LD_INT 1
41851: NEG
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 1
41859: NEG
41860: PUSH
41861: LD_INT 2
41863: NEG
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 0
41871: PUSH
41872: LD_INT 2
41874: NEG
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 1
41882: PUSH
41883: LD_INT 1
41885: NEG
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 2
41893: PUSH
41894: LD_INT 1
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 2
41903: PUSH
41904: LD_INT 2
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 1
41913: PUSH
41914: LD_INT 2
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 0
41923: PUSH
41924: LD_INT 2
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 1
41933: NEG
41934: PUSH
41935: LD_INT 1
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 2
41944: NEG
41945: PUSH
41946: LD_INT 0
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 2
41955: NEG
41956: PUSH
41957: LD_INT 1
41959: NEG
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 1
41967: NEG
41968: PUSH
41969: LD_INT 3
41971: NEG
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 1
41979: PUSH
41980: LD_INT 2
41982: NEG
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 3
41990: PUSH
41991: LD_INT 2
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 2
42000: PUSH
42001: LD_INT 3
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: LD_INT 2
42010: NEG
42011: PUSH
42012: LD_INT 1
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 3
42021: NEG
42022: PUSH
42023: LD_INT 1
42025: NEG
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42056: LD_ADDR_VAR 0 33
42060: PUSH
42061: LD_INT 0
42063: PUSH
42064: LD_INT 0
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 0
42073: PUSH
42074: LD_INT 1
42076: NEG
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 1
42084: PUSH
42085: LD_INT 0
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 1
42094: PUSH
42095: LD_INT 1
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: LD_INT 0
42104: PUSH
42105: LD_INT 1
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: LD_INT 1
42114: NEG
42115: PUSH
42116: LD_INT 0
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 1
42125: NEG
42126: PUSH
42127: LD_INT 1
42129: NEG
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 1
42137: NEG
42138: PUSH
42139: LD_INT 2
42141: NEG
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 1
42149: PUSH
42150: LD_INT 1
42152: NEG
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 2
42160: PUSH
42161: LD_INT 0
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 2
42170: PUSH
42171: LD_INT 1
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 1
42180: PUSH
42181: LD_INT 2
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 0
42190: PUSH
42191: LD_INT 2
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 1
42200: NEG
42201: PUSH
42202: LD_INT 1
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 2
42211: NEG
42212: PUSH
42213: LD_INT 0
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 2
42222: NEG
42223: PUSH
42224: LD_INT 1
42226: NEG
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 2
42234: NEG
42235: PUSH
42236: LD_INT 2
42238: NEG
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 2
42246: NEG
42247: PUSH
42248: LD_INT 3
42250: NEG
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 2
42258: PUSH
42259: LD_INT 1
42261: NEG
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: PUSH
42267: LD_INT 3
42269: PUSH
42270: LD_INT 1
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: LD_INT 1
42279: PUSH
42280: LD_INT 3
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: PUSH
42287: LD_INT 1
42289: NEG
42290: PUSH
42291: LD_INT 2
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 3
42300: NEG
42301: PUSH
42302: LD_INT 2
42304: NEG
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42335: LD_ADDR_VAR 0 34
42339: PUSH
42340: LD_INT 0
42342: PUSH
42343: LD_INT 0
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 0
42352: PUSH
42353: LD_INT 1
42355: NEG
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 1
42363: PUSH
42364: LD_INT 0
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 1
42373: PUSH
42374: LD_INT 1
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 0
42383: PUSH
42384: LD_INT 1
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 1
42393: NEG
42394: PUSH
42395: LD_INT 0
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 1
42404: NEG
42405: PUSH
42406: LD_INT 1
42408: NEG
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 1
42416: NEG
42417: PUSH
42418: LD_INT 2
42420: NEG
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 0
42428: PUSH
42429: LD_INT 2
42431: NEG
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 1
42439: PUSH
42440: LD_INT 1
42442: NEG
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 2
42450: PUSH
42451: LD_INT 1
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 2
42460: PUSH
42461: LD_INT 2
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 1
42470: PUSH
42471: LD_INT 2
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 1
42480: NEG
42481: PUSH
42482: LD_INT 1
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 2
42491: NEG
42492: PUSH
42493: LD_INT 0
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 2
42502: NEG
42503: PUSH
42504: LD_INT 1
42506: NEG
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 2
42514: NEG
42515: PUSH
42516: LD_INT 2
42518: NEG
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 1
42526: NEG
42527: PUSH
42528: LD_INT 3
42530: NEG
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 1
42538: PUSH
42539: LD_INT 2
42541: NEG
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 3
42549: PUSH
42550: LD_INT 2
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 2
42559: PUSH
42560: LD_INT 3
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 2
42569: NEG
42570: PUSH
42571: LD_INT 1
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 3
42580: NEG
42581: PUSH
42582: LD_INT 1
42584: NEG
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42615: LD_ADDR_VAR 0 35
42619: PUSH
42620: LD_INT 0
42622: PUSH
42623: LD_INT 0
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 0
42632: PUSH
42633: LD_INT 1
42635: NEG
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 1
42643: PUSH
42644: LD_INT 0
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 1
42653: PUSH
42654: LD_INT 1
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 0
42663: PUSH
42664: LD_INT 1
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 1
42673: NEG
42674: PUSH
42675: LD_INT 0
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 1
42684: NEG
42685: PUSH
42686: LD_INT 1
42688: NEG
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 2
42696: PUSH
42697: LD_INT 1
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 2
42706: NEG
42707: PUSH
42708: LD_INT 1
42710: NEG
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42727: LD_ADDR_VAR 0 36
42731: PUSH
42732: LD_INT 0
42734: PUSH
42735: LD_INT 0
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 0
42744: PUSH
42745: LD_INT 1
42747: NEG
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 1
42755: PUSH
42756: LD_INT 0
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 1
42765: PUSH
42766: LD_INT 1
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 0
42775: PUSH
42776: LD_INT 1
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 1
42785: NEG
42786: PUSH
42787: LD_INT 0
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 1
42796: NEG
42797: PUSH
42798: LD_INT 1
42800: NEG
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 1
42808: NEG
42809: PUSH
42810: LD_INT 2
42812: NEG
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 1
42820: PUSH
42821: LD_INT 2
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42839: LD_ADDR_VAR 0 37
42843: PUSH
42844: LD_INT 0
42846: PUSH
42847: LD_INT 0
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 0
42856: PUSH
42857: LD_INT 1
42859: NEG
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 1
42867: PUSH
42868: LD_INT 0
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 1
42877: PUSH
42878: LD_INT 1
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 0
42887: PUSH
42888: LD_INT 1
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 1
42897: NEG
42898: PUSH
42899: LD_INT 0
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 1
42908: NEG
42909: PUSH
42910: LD_INT 1
42912: NEG
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 1
42920: PUSH
42921: LD_INT 1
42923: NEG
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 1
42931: NEG
42932: PUSH
42933: LD_INT 1
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42951: LD_ADDR_VAR 0 38
42955: PUSH
42956: LD_INT 0
42958: PUSH
42959: LD_INT 0
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 0
42968: PUSH
42969: LD_INT 1
42971: NEG
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 1
42979: PUSH
42980: LD_INT 0
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 1
42989: PUSH
42990: LD_INT 1
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 0
42999: PUSH
43000: LD_INT 1
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 1
43009: NEG
43010: PUSH
43011: LD_INT 0
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 1
43020: NEG
43021: PUSH
43022: LD_INT 1
43024: NEG
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 2
43032: PUSH
43033: LD_INT 1
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 2
43042: NEG
43043: PUSH
43044: LD_INT 1
43046: NEG
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43063: LD_ADDR_VAR 0 39
43067: PUSH
43068: LD_INT 0
43070: PUSH
43071: LD_INT 0
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 0
43080: PUSH
43081: LD_INT 1
43083: NEG
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 1
43091: PUSH
43092: LD_INT 0
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 1
43101: PUSH
43102: LD_INT 1
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 0
43111: PUSH
43112: LD_INT 1
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 1
43121: NEG
43122: PUSH
43123: LD_INT 0
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 1
43132: NEG
43133: PUSH
43134: LD_INT 1
43136: NEG
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 1
43144: NEG
43145: PUSH
43146: LD_INT 2
43148: NEG
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 1
43156: PUSH
43157: LD_INT 2
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43175: LD_ADDR_VAR 0 40
43179: PUSH
43180: LD_INT 0
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 0
43192: PUSH
43193: LD_INT 1
43195: NEG
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 1
43203: PUSH
43204: LD_INT 0
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 1
43213: PUSH
43214: LD_INT 1
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 0
43223: PUSH
43224: LD_INT 1
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 1
43233: NEG
43234: PUSH
43235: LD_INT 0
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 1
43244: NEG
43245: PUSH
43246: LD_INT 1
43248: NEG
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 1
43256: PUSH
43257: LD_INT 1
43259: NEG
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 1
43267: NEG
43268: PUSH
43269: LD_INT 1
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43287: LD_ADDR_VAR 0 41
43291: PUSH
43292: LD_INT 0
43294: PUSH
43295: LD_INT 0
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 0
43304: PUSH
43305: LD_INT 1
43307: NEG
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 1
43315: PUSH
43316: LD_INT 0
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 1
43325: PUSH
43326: LD_INT 1
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 0
43335: PUSH
43336: LD_INT 1
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 1
43345: NEG
43346: PUSH
43347: LD_INT 0
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 1
43356: NEG
43357: PUSH
43358: LD_INT 1
43360: NEG
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 1
43368: NEG
43369: PUSH
43370: LD_INT 2
43372: NEG
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 1
43380: PUSH
43381: LD_INT 1
43383: NEG
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 2
43391: PUSH
43392: LD_INT 0
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 2
43401: PUSH
43402: LD_INT 1
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 2
43411: PUSH
43412: LD_INT 2
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 1
43421: PUSH
43422: LD_INT 2
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 1
43431: NEG
43432: PUSH
43433: LD_INT 1
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: LD_INT 2
43442: NEG
43443: PUSH
43444: LD_INT 0
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 2
43453: NEG
43454: PUSH
43455: LD_INT 1
43457: NEG
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 2
43465: NEG
43466: PUSH
43467: LD_INT 2
43469: NEG
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 2
43477: NEG
43478: PUSH
43479: LD_INT 3
43481: NEG
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 2
43489: PUSH
43490: LD_INT 1
43492: NEG
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 3
43500: PUSH
43501: LD_INT 0
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 3
43510: PUSH
43511: LD_INT 1
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 3
43520: PUSH
43521: LD_INT 2
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 3
43530: PUSH
43531: LD_INT 3
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 2
43540: PUSH
43541: LD_INT 3
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 2
43550: NEG
43551: PUSH
43552: LD_INT 1
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 3
43561: NEG
43562: PUSH
43563: LD_INT 0
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 3
43572: NEG
43573: PUSH
43574: LD_INT 1
43576: NEG
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 3
43584: NEG
43585: PUSH
43586: LD_INT 2
43588: NEG
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 3
43596: NEG
43597: PUSH
43598: LD_INT 3
43600: NEG
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43637: LD_ADDR_VAR 0 42
43641: PUSH
43642: LD_INT 0
43644: PUSH
43645: LD_INT 0
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 0
43654: PUSH
43655: LD_INT 1
43657: NEG
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 1
43665: PUSH
43666: LD_INT 0
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 1
43675: PUSH
43676: LD_INT 1
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 0
43685: PUSH
43686: LD_INT 1
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 1
43695: NEG
43696: PUSH
43697: LD_INT 0
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 1
43706: NEG
43707: PUSH
43708: LD_INT 1
43710: NEG
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 1
43718: NEG
43719: PUSH
43720: LD_INT 2
43722: NEG
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 0
43730: PUSH
43731: LD_INT 2
43733: NEG
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 1
43741: PUSH
43742: LD_INT 1
43744: NEG
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 2
43752: PUSH
43753: LD_INT 1
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 2
43762: PUSH
43763: LD_INT 2
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 1
43772: PUSH
43773: LD_INT 2
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 0
43782: PUSH
43783: LD_INT 2
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 1
43792: NEG
43793: PUSH
43794: LD_INT 1
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 2
43803: NEG
43804: PUSH
43805: LD_INT 1
43807: NEG
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 2
43815: NEG
43816: PUSH
43817: LD_INT 2
43819: NEG
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 2
43827: NEG
43828: PUSH
43829: LD_INT 3
43831: NEG
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 1
43839: NEG
43840: PUSH
43841: LD_INT 3
43843: NEG
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 0
43851: PUSH
43852: LD_INT 3
43854: NEG
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 1
43862: PUSH
43863: LD_INT 2
43865: NEG
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 3
43873: PUSH
43874: LD_INT 2
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 3
43883: PUSH
43884: LD_INT 3
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 2
43893: PUSH
43894: LD_INT 3
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 1
43903: PUSH
43904: LD_INT 3
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 0
43913: PUSH
43914: LD_INT 3
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 1
43923: NEG
43924: PUSH
43925: LD_INT 2
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 3
43934: NEG
43935: PUSH
43936: LD_INT 2
43938: NEG
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 3
43946: NEG
43947: PUSH
43948: LD_INT 3
43950: NEG
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43987: LD_ADDR_VAR 0 43
43991: PUSH
43992: LD_INT 0
43994: PUSH
43995: LD_INT 0
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 0
44004: PUSH
44005: LD_INT 1
44007: NEG
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 1
44015: PUSH
44016: LD_INT 0
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 1
44025: PUSH
44026: LD_INT 1
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 0
44035: PUSH
44036: LD_INT 1
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 1
44045: NEG
44046: PUSH
44047: LD_INT 0
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 1
44056: NEG
44057: PUSH
44058: LD_INT 1
44060: NEG
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 1
44068: NEG
44069: PUSH
44070: LD_INT 2
44072: NEG
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 0
44080: PUSH
44081: LD_INT 2
44083: NEG
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 1
44091: PUSH
44092: LD_INT 1
44094: NEG
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 2
44102: PUSH
44103: LD_INT 0
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 2
44112: PUSH
44113: LD_INT 1
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 1
44122: PUSH
44123: LD_INT 2
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 0
44132: PUSH
44133: LD_INT 2
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 1
44142: NEG
44143: PUSH
44144: LD_INT 1
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 2
44153: NEG
44154: PUSH
44155: LD_INT 0
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 2
44164: NEG
44165: PUSH
44166: LD_INT 1
44168: NEG
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 1
44176: NEG
44177: PUSH
44178: LD_INT 3
44180: NEG
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 0
44188: PUSH
44189: LD_INT 3
44191: NEG
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 1
44199: PUSH
44200: LD_INT 2
44202: NEG
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 2
44210: PUSH
44211: LD_INT 1
44213: NEG
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 3
44221: PUSH
44222: LD_INT 0
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 3
44231: PUSH
44232: LD_INT 1
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 1
44241: PUSH
44242: LD_INT 3
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 0
44251: PUSH
44252: LD_INT 3
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 1
44261: NEG
44262: PUSH
44263: LD_INT 2
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 2
44272: NEG
44273: PUSH
44274: LD_INT 1
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 3
44283: NEG
44284: PUSH
44285: LD_INT 0
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 3
44294: NEG
44295: PUSH
44296: LD_INT 1
44298: NEG
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44335: LD_ADDR_VAR 0 44
44339: PUSH
44340: LD_INT 0
44342: PUSH
44343: LD_INT 0
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 0
44352: PUSH
44353: LD_INT 1
44355: NEG
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 1
44363: PUSH
44364: LD_INT 0
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 1
44373: PUSH
44374: LD_INT 1
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 0
44383: PUSH
44384: LD_INT 1
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 1
44393: NEG
44394: PUSH
44395: LD_INT 0
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 1
44404: NEG
44405: PUSH
44406: LD_INT 1
44408: NEG
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 1
44416: NEG
44417: PUSH
44418: LD_INT 2
44420: NEG
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 1
44428: PUSH
44429: LD_INT 1
44431: NEG
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 2
44439: PUSH
44440: LD_INT 0
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 2
44449: PUSH
44450: LD_INT 1
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 2
44459: PUSH
44460: LD_INT 2
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 1
44469: PUSH
44470: LD_INT 2
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 1
44479: NEG
44480: PUSH
44481: LD_INT 1
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 2
44490: NEG
44491: PUSH
44492: LD_INT 0
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 2
44501: NEG
44502: PUSH
44503: LD_INT 1
44505: NEG
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 2
44513: NEG
44514: PUSH
44515: LD_INT 2
44517: NEG
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 2
44525: NEG
44526: PUSH
44527: LD_INT 3
44529: NEG
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 2
44537: PUSH
44538: LD_INT 1
44540: NEG
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 3
44548: PUSH
44549: LD_INT 0
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 3
44558: PUSH
44559: LD_INT 1
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 3
44568: PUSH
44569: LD_INT 2
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 3
44578: PUSH
44579: LD_INT 3
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 2
44588: PUSH
44589: LD_INT 3
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 2
44598: NEG
44599: PUSH
44600: LD_INT 1
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 3
44609: NEG
44610: PUSH
44611: LD_INT 0
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 3
44620: NEG
44621: PUSH
44622: LD_INT 1
44624: NEG
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 3
44632: NEG
44633: PUSH
44634: LD_INT 2
44636: NEG
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 3
44644: NEG
44645: PUSH
44646: LD_INT 3
44648: NEG
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44685: LD_ADDR_VAR 0 45
44689: PUSH
44690: LD_INT 0
44692: PUSH
44693: LD_INT 0
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 0
44702: PUSH
44703: LD_INT 1
44705: NEG
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 1
44713: PUSH
44714: LD_INT 0
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 1
44723: PUSH
44724: LD_INT 1
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 0
44733: PUSH
44734: LD_INT 1
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 1
44743: NEG
44744: PUSH
44745: LD_INT 0
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 1
44754: NEG
44755: PUSH
44756: LD_INT 1
44758: NEG
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 1
44766: NEG
44767: PUSH
44768: LD_INT 2
44770: NEG
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 0
44778: PUSH
44779: LD_INT 2
44781: NEG
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 1
44789: PUSH
44790: LD_INT 1
44792: NEG
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 2
44800: PUSH
44801: LD_INT 1
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 2
44810: PUSH
44811: LD_INT 2
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 1
44820: PUSH
44821: LD_INT 2
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 0
44830: PUSH
44831: LD_INT 2
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 1
44840: NEG
44841: PUSH
44842: LD_INT 1
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 2
44851: NEG
44852: PUSH
44853: LD_INT 1
44855: NEG
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 2
44863: NEG
44864: PUSH
44865: LD_INT 2
44867: NEG
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 2
44875: NEG
44876: PUSH
44877: LD_INT 3
44879: NEG
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 1
44887: NEG
44888: PUSH
44889: LD_INT 3
44891: NEG
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 0
44899: PUSH
44900: LD_INT 3
44902: NEG
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 1
44910: PUSH
44911: LD_INT 2
44913: NEG
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 3
44921: PUSH
44922: LD_INT 2
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 3
44931: PUSH
44932: LD_INT 3
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 2
44941: PUSH
44942: LD_INT 3
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 1
44951: PUSH
44952: LD_INT 3
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 0
44961: PUSH
44962: LD_INT 3
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 1
44971: NEG
44972: PUSH
44973: LD_INT 2
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 3
44982: NEG
44983: PUSH
44984: LD_INT 2
44986: NEG
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 3
44994: NEG
44995: PUSH
44996: LD_INT 3
44998: NEG
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45035: LD_ADDR_VAR 0 46
45039: PUSH
45040: LD_INT 0
45042: PUSH
45043: LD_INT 0
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 0
45052: PUSH
45053: LD_INT 1
45055: NEG
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 1
45063: PUSH
45064: LD_INT 0
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 1
45073: PUSH
45074: LD_INT 1
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 0
45083: PUSH
45084: LD_INT 1
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 1
45093: NEG
45094: PUSH
45095: LD_INT 0
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 1
45104: NEG
45105: PUSH
45106: LD_INT 1
45108: NEG
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 1
45116: NEG
45117: PUSH
45118: LD_INT 2
45120: NEG
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 0
45128: PUSH
45129: LD_INT 2
45131: NEG
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 1
45139: PUSH
45140: LD_INT 1
45142: NEG
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 2
45150: PUSH
45151: LD_INT 0
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 2
45160: PUSH
45161: LD_INT 1
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 1
45170: PUSH
45171: LD_INT 2
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 0
45180: PUSH
45181: LD_INT 2
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 1
45190: NEG
45191: PUSH
45192: LD_INT 1
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 2
45201: NEG
45202: PUSH
45203: LD_INT 0
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 2
45212: NEG
45213: PUSH
45214: LD_INT 1
45216: NEG
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 1
45224: NEG
45225: PUSH
45226: LD_INT 3
45228: NEG
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 0
45236: PUSH
45237: LD_INT 3
45239: NEG
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 1
45247: PUSH
45248: LD_INT 2
45250: NEG
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 2
45258: PUSH
45259: LD_INT 1
45261: NEG
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 3
45269: PUSH
45270: LD_INT 0
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 3
45279: PUSH
45280: LD_INT 1
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 1
45289: PUSH
45290: LD_INT 3
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 0
45299: PUSH
45300: LD_INT 3
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 1
45309: NEG
45310: PUSH
45311: LD_INT 2
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 2
45320: NEG
45321: PUSH
45322: LD_INT 1
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 3
45331: NEG
45332: PUSH
45333: LD_INT 0
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 3
45342: NEG
45343: PUSH
45344: LD_INT 1
45346: NEG
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45383: LD_ADDR_VAR 0 47
45387: PUSH
45388: LD_INT 0
45390: PUSH
45391: LD_INT 0
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 0
45400: PUSH
45401: LD_INT 1
45403: NEG
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 1
45411: PUSH
45412: LD_INT 0
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 1
45421: PUSH
45422: LD_INT 1
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 0
45431: PUSH
45432: LD_INT 1
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 1
45441: NEG
45442: PUSH
45443: LD_INT 0
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 1
45452: NEG
45453: PUSH
45454: LD_INT 1
45456: NEG
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 1
45464: NEG
45465: PUSH
45466: LD_INT 2
45468: NEG
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 0
45476: PUSH
45477: LD_INT 2
45479: NEG
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 1
45487: PUSH
45488: LD_INT 1
45490: NEG
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 2
45498: NEG
45499: PUSH
45500: LD_INT 1
45502: NEG
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 2
45510: NEG
45511: PUSH
45512: LD_INT 2
45514: NEG
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: EMPTY
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45534: LD_ADDR_VAR 0 48
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 0
45551: PUSH
45552: LD_INT 1
45554: NEG
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 1
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 1
45572: PUSH
45573: LD_INT 1
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 0
45582: PUSH
45583: LD_INT 1
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 1
45592: NEG
45593: PUSH
45594: LD_INT 0
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 1
45603: NEG
45604: PUSH
45605: LD_INT 1
45607: NEG
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 1
45615: NEG
45616: PUSH
45617: LD_INT 2
45619: NEG
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: LD_INT 2
45630: NEG
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 1
45638: PUSH
45639: LD_INT 1
45641: NEG
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 2
45649: PUSH
45650: LD_INT 0
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 2
45659: PUSH
45660: LD_INT 1
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45681: LD_ADDR_VAR 0 49
45685: PUSH
45686: LD_INT 0
45688: PUSH
45689: LD_INT 0
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 0
45698: PUSH
45699: LD_INT 1
45701: NEG
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 1
45709: PUSH
45710: LD_INT 0
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 1
45719: PUSH
45720: LD_INT 1
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 0
45729: PUSH
45730: LD_INT 1
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 1
45739: NEG
45740: PUSH
45741: LD_INT 0
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 1
45750: NEG
45751: PUSH
45752: LD_INT 1
45754: NEG
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 1
45762: PUSH
45763: LD_INT 1
45765: NEG
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 2
45773: PUSH
45774: LD_INT 0
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 2
45783: PUSH
45784: LD_INT 1
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 2
45793: PUSH
45794: LD_INT 2
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 1
45803: PUSH
45804: LD_INT 2
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45825: LD_ADDR_VAR 0 50
45829: PUSH
45830: LD_INT 0
45832: PUSH
45833: LD_INT 0
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 0
45842: PUSH
45843: LD_INT 1
45845: NEG
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 1
45853: PUSH
45854: LD_INT 0
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 1
45863: PUSH
45864: LD_INT 1
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 0
45873: PUSH
45874: LD_INT 1
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 1
45883: NEG
45884: PUSH
45885: LD_INT 0
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 1
45894: NEG
45895: PUSH
45896: LD_INT 1
45898: NEG
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 2
45906: PUSH
45907: LD_INT 1
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 2
45916: PUSH
45917: LD_INT 2
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 1
45926: PUSH
45927: LD_INT 2
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 0
45936: PUSH
45937: LD_INT 2
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 1
45946: NEG
45947: PUSH
45948: LD_INT 1
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45969: LD_ADDR_VAR 0 51
45973: PUSH
45974: LD_INT 0
45976: PUSH
45977: LD_INT 0
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 0
45986: PUSH
45987: LD_INT 1
45989: NEG
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 1
45997: PUSH
45998: LD_INT 0
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 1
46007: PUSH
46008: LD_INT 1
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 0
46017: PUSH
46018: LD_INT 1
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 1
46027: NEG
46028: PUSH
46029: LD_INT 0
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 1
46038: NEG
46039: PUSH
46040: LD_INT 1
46042: NEG
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 1
46050: PUSH
46051: LD_INT 2
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: LD_INT 2
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: LD_INT 1
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 2
46081: NEG
46082: PUSH
46083: LD_INT 0
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 2
46092: NEG
46093: PUSH
46094: LD_INT 1
46096: NEG
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46116: LD_ADDR_VAR 0 52
46120: PUSH
46121: LD_INT 0
46123: PUSH
46124: LD_INT 0
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 0
46133: PUSH
46134: LD_INT 1
46136: NEG
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 1
46144: PUSH
46145: LD_INT 0
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 1
46154: PUSH
46155: LD_INT 1
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: LD_INT 1
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 1
46174: NEG
46175: PUSH
46176: LD_INT 0
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 1
46185: NEG
46186: PUSH
46187: LD_INT 1
46189: NEG
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 1
46197: NEG
46198: PUSH
46199: LD_INT 2
46201: NEG
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 1
46209: NEG
46210: PUSH
46211: LD_INT 1
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 2
46220: NEG
46221: PUSH
46222: LD_INT 0
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 2
46231: NEG
46232: PUSH
46233: LD_INT 1
46235: NEG
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 2
46243: NEG
46244: PUSH
46245: LD_INT 2
46247: NEG
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46267: LD_ADDR_VAR 0 53
46271: PUSH
46272: LD_INT 0
46274: PUSH
46275: LD_INT 0
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 0
46284: PUSH
46285: LD_INT 1
46287: NEG
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 1
46295: PUSH
46296: LD_INT 0
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 1
46305: PUSH
46306: LD_INT 1
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 0
46315: PUSH
46316: LD_INT 1
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 1
46325: NEG
46326: PUSH
46327: LD_INT 0
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 1
46336: NEG
46337: PUSH
46338: LD_INT 1
46340: NEG
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 1
46348: NEG
46349: PUSH
46350: LD_INT 2
46352: NEG
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 0
46360: PUSH
46361: LD_INT 2
46363: NEG
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 1
46371: PUSH
46372: LD_INT 1
46374: NEG
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 2
46382: PUSH
46383: LD_INT 0
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 2
46392: PUSH
46393: LD_INT 1
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 2
46402: PUSH
46403: LD_INT 2
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 1
46412: PUSH
46413: LD_INT 2
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 0
46422: PUSH
46423: LD_INT 2
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 1
46432: NEG
46433: PUSH
46434: LD_INT 1
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 2
46443: NEG
46444: PUSH
46445: LD_INT 0
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 2
46454: NEG
46455: PUSH
46456: LD_INT 1
46458: NEG
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 2
46466: NEG
46467: PUSH
46468: LD_INT 2
46470: NEG
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46497: LD_ADDR_VAR 0 54
46501: PUSH
46502: LD_INT 0
46504: PUSH
46505: LD_INT 0
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 0
46514: PUSH
46515: LD_INT 1
46517: NEG
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 1
46525: PUSH
46526: LD_INT 0
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 1
46535: PUSH
46536: LD_INT 1
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 0
46545: PUSH
46546: LD_INT 1
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 1
46555: NEG
46556: PUSH
46557: LD_INT 0
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 1
46566: NEG
46567: PUSH
46568: LD_INT 1
46570: NEG
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 1
46578: NEG
46579: PUSH
46580: LD_INT 2
46582: NEG
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 0
46590: PUSH
46591: LD_INT 2
46593: NEG
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 1
46601: PUSH
46602: LD_INT 1
46604: NEG
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 2
46612: PUSH
46613: LD_INT 0
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 2
46622: PUSH
46623: LD_INT 1
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 2
46632: PUSH
46633: LD_INT 2
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 1
46642: PUSH
46643: LD_INT 2
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 0
46652: PUSH
46653: LD_INT 2
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 1
46662: NEG
46663: PUSH
46664: LD_INT 1
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 2
46673: NEG
46674: PUSH
46675: LD_INT 0
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 2
46684: NEG
46685: PUSH
46686: LD_INT 1
46688: NEG
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 2
46696: NEG
46697: PUSH
46698: LD_INT 2
46700: NEG
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46727: LD_ADDR_VAR 0 55
46731: PUSH
46732: LD_INT 0
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 0
46744: PUSH
46745: LD_INT 1
46747: NEG
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 1
46755: PUSH
46756: LD_INT 0
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 1
46765: PUSH
46766: LD_INT 1
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 0
46775: PUSH
46776: LD_INT 1
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 1
46785: NEG
46786: PUSH
46787: LD_INT 0
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 1
46796: NEG
46797: PUSH
46798: LD_INT 1
46800: NEG
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 1
46808: NEG
46809: PUSH
46810: LD_INT 2
46812: NEG
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 0
46820: PUSH
46821: LD_INT 2
46823: NEG
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 1
46831: PUSH
46832: LD_INT 1
46834: NEG
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 2
46842: PUSH
46843: LD_INT 0
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 2
46852: PUSH
46853: LD_INT 1
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 2
46862: PUSH
46863: LD_INT 2
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 1
46872: PUSH
46873: LD_INT 2
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 0
46882: PUSH
46883: LD_INT 2
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 1
46892: NEG
46893: PUSH
46894: LD_INT 1
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 2
46903: NEG
46904: PUSH
46905: LD_INT 0
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 2
46914: NEG
46915: PUSH
46916: LD_INT 1
46918: NEG
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 2
46926: NEG
46927: PUSH
46928: LD_INT 2
46930: NEG
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46957: LD_ADDR_VAR 0 56
46961: PUSH
46962: LD_INT 0
46964: PUSH
46965: LD_INT 0
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 0
46974: PUSH
46975: LD_INT 1
46977: NEG
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 1
46985: PUSH
46986: LD_INT 0
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 1
46995: PUSH
46996: LD_INT 1
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 0
47005: PUSH
47006: LD_INT 1
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 1
47015: NEG
47016: PUSH
47017: LD_INT 0
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 1
47026: NEG
47027: PUSH
47028: LD_INT 1
47030: NEG
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 1
47038: NEG
47039: PUSH
47040: LD_INT 2
47042: NEG
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 0
47050: PUSH
47051: LD_INT 2
47053: NEG
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 1
47061: PUSH
47062: LD_INT 1
47064: NEG
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 2
47072: PUSH
47073: LD_INT 0
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 2
47082: PUSH
47083: LD_INT 1
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 2
47092: PUSH
47093: LD_INT 2
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 1
47102: PUSH
47103: LD_INT 2
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 0
47112: PUSH
47113: LD_INT 2
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 1
47122: NEG
47123: PUSH
47124: LD_INT 1
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 2
47133: NEG
47134: PUSH
47135: LD_INT 0
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 2
47144: NEG
47145: PUSH
47146: LD_INT 1
47148: NEG
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 2
47156: NEG
47157: PUSH
47158: LD_INT 2
47160: NEG
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47187: LD_ADDR_VAR 0 57
47191: PUSH
47192: LD_INT 0
47194: PUSH
47195: LD_INT 0
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 0
47204: PUSH
47205: LD_INT 1
47207: NEG
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 1
47215: PUSH
47216: LD_INT 0
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 1
47225: PUSH
47226: LD_INT 1
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 0
47235: PUSH
47236: LD_INT 1
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 1
47245: NEG
47246: PUSH
47247: LD_INT 0
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 1
47256: NEG
47257: PUSH
47258: LD_INT 1
47260: NEG
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 1
47268: NEG
47269: PUSH
47270: LD_INT 2
47272: NEG
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 0
47280: PUSH
47281: LD_INT 2
47283: NEG
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 1
47291: PUSH
47292: LD_INT 1
47294: NEG
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 2
47302: PUSH
47303: LD_INT 0
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 2
47312: PUSH
47313: LD_INT 1
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 2
47322: PUSH
47323: LD_INT 2
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 1
47332: PUSH
47333: LD_INT 2
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 0
47342: PUSH
47343: LD_INT 2
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 1
47352: NEG
47353: PUSH
47354: LD_INT 1
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 2
47363: NEG
47364: PUSH
47365: LD_INT 0
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 2
47374: NEG
47375: PUSH
47376: LD_INT 1
47378: NEG
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 2
47386: NEG
47387: PUSH
47388: LD_INT 2
47390: NEG
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47417: LD_ADDR_VAR 0 58
47421: PUSH
47422: LD_INT 0
47424: PUSH
47425: LD_INT 0
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 0
47434: PUSH
47435: LD_INT 1
47437: NEG
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 1
47445: PUSH
47446: LD_INT 0
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 1
47455: PUSH
47456: LD_INT 1
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 0
47465: PUSH
47466: LD_INT 1
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 1
47475: NEG
47476: PUSH
47477: LD_INT 0
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 1
47486: NEG
47487: PUSH
47488: LD_INT 1
47490: NEG
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 1
47498: NEG
47499: PUSH
47500: LD_INT 2
47502: NEG
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 0
47510: PUSH
47511: LD_INT 2
47513: NEG
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 1
47521: PUSH
47522: LD_INT 1
47524: NEG
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 2
47532: PUSH
47533: LD_INT 0
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 2
47542: PUSH
47543: LD_INT 1
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 2
47552: PUSH
47553: LD_INT 2
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 1
47562: PUSH
47563: LD_INT 2
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 0
47572: PUSH
47573: LD_INT 2
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 1
47582: NEG
47583: PUSH
47584: LD_INT 1
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 2
47593: NEG
47594: PUSH
47595: LD_INT 0
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 2
47604: NEG
47605: PUSH
47606: LD_INT 1
47608: NEG
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 2
47616: NEG
47617: PUSH
47618: LD_INT 2
47620: NEG
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47647: LD_ADDR_VAR 0 59
47651: PUSH
47652: LD_INT 0
47654: PUSH
47655: LD_INT 0
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 0
47664: PUSH
47665: LD_INT 1
47667: NEG
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 1
47675: PUSH
47676: LD_INT 0
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 1
47685: PUSH
47686: LD_INT 1
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 0
47695: PUSH
47696: LD_INT 1
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 1
47705: NEG
47706: PUSH
47707: LD_INT 0
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 1
47716: NEG
47717: PUSH
47718: LD_INT 1
47720: NEG
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47735: LD_ADDR_VAR 0 60
47739: PUSH
47740: LD_INT 0
47742: PUSH
47743: LD_INT 0
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 0
47752: PUSH
47753: LD_INT 1
47755: NEG
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 1
47763: PUSH
47764: LD_INT 0
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 1
47773: PUSH
47774: LD_INT 1
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 0
47783: PUSH
47784: LD_INT 1
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 1
47793: NEG
47794: PUSH
47795: LD_INT 0
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 1
47804: NEG
47805: PUSH
47806: LD_INT 1
47808: NEG
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47823: LD_ADDR_VAR 0 61
47827: PUSH
47828: LD_INT 0
47830: PUSH
47831: LD_INT 0
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 0
47840: PUSH
47841: LD_INT 1
47843: NEG
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 1
47851: PUSH
47852: LD_INT 0
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 1
47861: PUSH
47862: LD_INT 1
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 0
47871: PUSH
47872: LD_INT 1
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 1
47881: NEG
47882: PUSH
47883: LD_INT 0
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 1
47892: NEG
47893: PUSH
47894: LD_INT 1
47896: NEG
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47911: LD_ADDR_VAR 0 62
47915: PUSH
47916: LD_INT 0
47918: PUSH
47919: LD_INT 0
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 0
47928: PUSH
47929: LD_INT 1
47931: NEG
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 1
47939: PUSH
47940: LD_INT 0
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 1
47949: PUSH
47950: LD_INT 1
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 0
47959: PUSH
47960: LD_INT 1
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 1
47969: NEG
47970: PUSH
47971: LD_INT 0
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 1
47980: NEG
47981: PUSH
47982: LD_INT 1
47984: NEG
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47999: LD_ADDR_VAR 0 63
48003: PUSH
48004: LD_INT 0
48006: PUSH
48007: LD_INT 0
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 0
48016: PUSH
48017: LD_INT 1
48019: NEG
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 1
48027: PUSH
48028: LD_INT 0
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 1
48037: PUSH
48038: LD_INT 1
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 0
48047: PUSH
48048: LD_INT 1
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 1
48057: NEG
48058: PUSH
48059: LD_INT 0
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 1
48068: NEG
48069: PUSH
48070: LD_INT 1
48072: NEG
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48087: LD_ADDR_VAR 0 64
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: LD_INT 0
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: LD_INT 1
48107: NEG
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 1
48115: PUSH
48116: LD_INT 0
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 1
48125: PUSH
48126: LD_INT 1
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 0
48135: PUSH
48136: LD_INT 1
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 1
48145: NEG
48146: PUSH
48147: LD_INT 0
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 1
48156: NEG
48157: PUSH
48158: LD_INT 1
48160: NEG
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: ST_TO_ADDR
// end ; 1 :
48175: GO 54072
48177: LD_INT 1
48179: DOUBLE
48180: EQUAL
48181: IFTRUE 48185
48183: GO 50808
48185: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48186: LD_ADDR_VAR 0 11
48190: PUSH
48191: LD_INT 1
48193: NEG
48194: PUSH
48195: LD_INT 3
48197: NEG
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 0
48205: PUSH
48206: LD_INT 3
48208: NEG
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 1
48216: PUSH
48217: LD_INT 2
48219: NEG
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: LIST
48229: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48230: LD_ADDR_VAR 0 12
48234: PUSH
48235: LD_INT 2
48237: PUSH
48238: LD_INT 1
48240: NEG
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 3
48248: PUSH
48249: LD_INT 0
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 3
48258: PUSH
48259: LD_INT 1
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: LIST
48270: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48271: LD_ADDR_VAR 0 13
48275: PUSH
48276: LD_INT 3
48278: PUSH
48279: LD_INT 2
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 3
48288: PUSH
48289: LD_INT 3
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 2
48298: PUSH
48299: LD_INT 3
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: LIST
48310: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48311: LD_ADDR_VAR 0 14
48315: PUSH
48316: LD_INT 1
48318: PUSH
48319: LD_INT 3
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 0
48328: PUSH
48329: LD_INT 3
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 1
48338: NEG
48339: PUSH
48340: LD_INT 2
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: LIST
48351: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48352: LD_ADDR_VAR 0 15
48356: PUSH
48357: LD_INT 2
48359: NEG
48360: PUSH
48361: LD_INT 1
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 3
48370: NEG
48371: PUSH
48372: LD_INT 0
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 3
48381: NEG
48382: PUSH
48383: LD_INT 1
48385: NEG
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: LIST
48395: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48396: LD_ADDR_VAR 0 16
48400: PUSH
48401: LD_INT 2
48403: NEG
48404: PUSH
48405: LD_INT 3
48407: NEG
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 3
48415: NEG
48416: PUSH
48417: LD_INT 2
48419: NEG
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 3
48427: NEG
48428: PUSH
48429: LD_INT 3
48431: NEG
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: LIST
48441: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48442: LD_ADDR_VAR 0 17
48446: PUSH
48447: LD_INT 1
48449: NEG
48450: PUSH
48451: LD_INT 3
48453: NEG
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 0
48461: PUSH
48462: LD_INT 3
48464: NEG
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 1
48472: PUSH
48473: LD_INT 2
48475: NEG
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: LIST
48485: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48486: LD_ADDR_VAR 0 18
48490: PUSH
48491: LD_INT 2
48493: PUSH
48494: LD_INT 1
48496: NEG
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 3
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 3
48514: PUSH
48515: LD_INT 1
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: LIST
48526: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48527: LD_ADDR_VAR 0 19
48531: PUSH
48532: LD_INT 3
48534: PUSH
48535: LD_INT 2
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 3
48544: PUSH
48545: LD_INT 3
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 2
48554: PUSH
48555: LD_INT 3
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: LIST
48566: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48567: LD_ADDR_VAR 0 20
48571: PUSH
48572: LD_INT 1
48574: PUSH
48575: LD_INT 3
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 0
48584: PUSH
48585: LD_INT 3
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 1
48594: NEG
48595: PUSH
48596: LD_INT 2
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: LIST
48607: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48608: LD_ADDR_VAR 0 21
48612: PUSH
48613: LD_INT 2
48615: NEG
48616: PUSH
48617: LD_INT 1
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 3
48626: NEG
48627: PUSH
48628: LD_INT 0
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 3
48637: NEG
48638: PUSH
48639: LD_INT 1
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: LIST
48651: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48652: LD_ADDR_VAR 0 22
48656: PUSH
48657: LD_INT 2
48659: NEG
48660: PUSH
48661: LD_INT 3
48663: NEG
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 3
48671: NEG
48672: PUSH
48673: LD_INT 2
48675: NEG
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 3
48683: NEG
48684: PUSH
48685: LD_INT 3
48687: NEG
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: LIST
48697: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48698: LD_ADDR_VAR 0 23
48702: PUSH
48703: LD_INT 0
48705: PUSH
48706: LD_INT 3
48708: NEG
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 1
48716: NEG
48717: PUSH
48718: LD_INT 4
48720: NEG
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 1
48728: PUSH
48729: LD_INT 3
48731: NEG
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: LIST
48741: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48742: LD_ADDR_VAR 0 24
48746: PUSH
48747: LD_INT 3
48749: PUSH
48750: LD_INT 0
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 3
48759: PUSH
48760: LD_INT 1
48762: NEG
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 4
48770: PUSH
48771: LD_INT 1
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: LIST
48782: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48783: LD_ADDR_VAR 0 25
48787: PUSH
48788: LD_INT 3
48790: PUSH
48791: LD_INT 3
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 4
48800: PUSH
48801: LD_INT 3
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 3
48810: PUSH
48811: LD_INT 4
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: LIST
48822: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48823: LD_ADDR_VAR 0 26
48827: PUSH
48828: LD_INT 0
48830: PUSH
48831: LD_INT 3
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 1
48840: PUSH
48841: LD_INT 4
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 1
48850: NEG
48851: PUSH
48852: LD_INT 3
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: LIST
48863: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48864: LD_ADDR_VAR 0 27
48868: PUSH
48869: LD_INT 3
48871: NEG
48872: PUSH
48873: LD_INT 0
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 3
48882: NEG
48883: PUSH
48884: LD_INT 1
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 4
48893: NEG
48894: PUSH
48895: LD_INT 1
48897: NEG
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: LIST
48907: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48908: LD_ADDR_VAR 0 28
48912: PUSH
48913: LD_INT 3
48915: NEG
48916: PUSH
48917: LD_INT 3
48919: NEG
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 3
48927: NEG
48928: PUSH
48929: LD_INT 4
48931: NEG
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 4
48939: NEG
48940: PUSH
48941: LD_INT 3
48943: NEG
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: LIST
48953: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48954: LD_ADDR_VAR 0 29
48958: PUSH
48959: LD_INT 1
48961: NEG
48962: PUSH
48963: LD_INT 3
48965: NEG
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 0
48973: PUSH
48974: LD_INT 3
48976: NEG
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 1
48984: PUSH
48985: LD_INT 2
48987: NEG
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 1
48995: NEG
48996: PUSH
48997: LD_INT 4
48999: NEG
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 0
49007: PUSH
49008: LD_INT 4
49010: NEG
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 1
49018: PUSH
49019: LD_INT 3
49021: NEG
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 1
49029: NEG
49030: PUSH
49031: LD_INT 5
49033: NEG
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 0
49041: PUSH
49042: LD_INT 5
49044: NEG
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 1
49052: PUSH
49053: LD_INT 4
49055: NEG
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 1
49063: NEG
49064: PUSH
49065: LD_INT 6
49067: NEG
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 0
49075: PUSH
49076: LD_INT 6
49078: NEG
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 1
49086: PUSH
49087: LD_INT 5
49089: NEG
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
49109: LD_ADDR_VAR 0 30
49113: PUSH
49114: LD_INT 2
49116: PUSH
49117: LD_INT 1
49119: NEG
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 3
49127: PUSH
49128: LD_INT 0
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 3
49137: PUSH
49138: LD_INT 1
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 3
49147: PUSH
49148: LD_INT 1
49150: NEG
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 4
49158: PUSH
49159: LD_INT 0
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 4
49168: PUSH
49169: LD_INT 1
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 4
49178: PUSH
49179: LD_INT 1
49181: NEG
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 5
49189: PUSH
49190: LD_INT 0
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 5
49199: PUSH
49200: LD_INT 1
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 5
49209: PUSH
49210: LD_INT 1
49212: NEG
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 6
49220: PUSH
49221: LD_INT 0
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 6
49230: PUSH
49231: LD_INT 1
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
49252: LD_ADDR_VAR 0 31
49256: PUSH
49257: LD_INT 3
49259: PUSH
49260: LD_INT 2
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 3
49269: PUSH
49270: LD_INT 3
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 2
49279: PUSH
49280: LD_INT 3
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 4
49289: PUSH
49290: LD_INT 3
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 4
49299: PUSH
49300: LD_INT 4
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 3
49309: PUSH
49310: LD_INT 4
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 5
49319: PUSH
49320: LD_INT 4
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 5
49329: PUSH
49330: LD_INT 5
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 4
49339: PUSH
49340: LD_INT 5
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 6
49349: PUSH
49350: LD_INT 5
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 6
49359: PUSH
49360: LD_INT 6
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 5
49369: PUSH
49370: LD_INT 6
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
49391: LD_ADDR_VAR 0 32
49395: PUSH
49396: LD_INT 1
49398: PUSH
49399: LD_INT 3
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: LD_INT 3
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 1
49418: NEG
49419: PUSH
49420: LD_INT 2
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: PUSH
49430: LD_INT 4
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 0
49439: PUSH
49440: LD_INT 4
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 1
49449: NEG
49450: PUSH
49451: LD_INT 3
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 1
49460: PUSH
49461: LD_INT 5
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 0
49470: PUSH
49471: LD_INT 5
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 1
49480: NEG
49481: PUSH
49482: LD_INT 4
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 1
49491: PUSH
49492: LD_INT 6
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 0
49501: PUSH
49502: LD_INT 6
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 1
49511: NEG
49512: PUSH
49513: LD_INT 5
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
49534: LD_ADDR_VAR 0 33
49538: PUSH
49539: LD_INT 2
49541: NEG
49542: PUSH
49543: LD_INT 1
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 3
49552: NEG
49553: PUSH
49554: LD_INT 0
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 3
49563: NEG
49564: PUSH
49565: LD_INT 1
49567: NEG
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 3
49575: NEG
49576: PUSH
49577: LD_INT 1
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 4
49586: NEG
49587: PUSH
49588: LD_INT 0
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 4
49597: NEG
49598: PUSH
49599: LD_INT 1
49601: NEG
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 4
49609: NEG
49610: PUSH
49611: LD_INT 1
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 5
49620: NEG
49621: PUSH
49622: LD_INT 0
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 5
49631: NEG
49632: PUSH
49633: LD_INT 1
49635: NEG
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 5
49643: NEG
49644: PUSH
49645: LD_INT 1
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 6
49654: NEG
49655: PUSH
49656: LD_INT 0
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 6
49665: NEG
49666: PUSH
49667: LD_INT 1
49669: NEG
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49689: LD_ADDR_VAR 0 34
49693: PUSH
49694: LD_INT 2
49696: NEG
49697: PUSH
49698: LD_INT 3
49700: NEG
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 3
49708: NEG
49709: PUSH
49710: LD_INT 2
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 3
49720: NEG
49721: PUSH
49722: LD_INT 3
49724: NEG
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 3
49732: NEG
49733: PUSH
49734: LD_INT 4
49736: NEG
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 4
49744: NEG
49745: PUSH
49746: LD_INT 3
49748: NEG
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 4
49756: NEG
49757: PUSH
49758: LD_INT 4
49760: NEG
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 4
49768: NEG
49769: PUSH
49770: LD_INT 5
49772: NEG
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 5
49780: NEG
49781: PUSH
49782: LD_INT 4
49784: NEG
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 5
49792: NEG
49793: PUSH
49794: LD_INT 5
49796: NEG
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 5
49804: NEG
49805: PUSH
49806: LD_INT 6
49808: NEG
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 6
49816: NEG
49817: PUSH
49818: LD_INT 5
49820: NEG
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 6
49828: NEG
49829: PUSH
49830: LD_INT 6
49832: NEG
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49852: LD_ADDR_VAR 0 41
49856: PUSH
49857: LD_INT 0
49859: PUSH
49860: LD_INT 2
49862: NEG
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 1
49870: NEG
49871: PUSH
49872: LD_INT 3
49874: NEG
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 1
49882: PUSH
49883: LD_INT 2
49885: NEG
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: LIST
49895: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49896: LD_ADDR_VAR 0 42
49900: PUSH
49901: LD_INT 2
49903: PUSH
49904: LD_INT 0
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 2
49913: PUSH
49914: LD_INT 1
49916: NEG
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 3
49924: PUSH
49925: LD_INT 1
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: LIST
49936: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49937: LD_ADDR_VAR 0 43
49941: PUSH
49942: LD_INT 2
49944: PUSH
49945: LD_INT 2
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 3
49954: PUSH
49955: LD_INT 2
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 2
49964: PUSH
49965: LD_INT 3
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: LIST
49976: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49977: LD_ADDR_VAR 0 44
49981: PUSH
49982: LD_INT 0
49984: PUSH
49985: LD_INT 2
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 1
49994: PUSH
49995: LD_INT 3
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 1
50004: NEG
50005: PUSH
50006: LD_INT 2
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: LIST
50017: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50018: LD_ADDR_VAR 0 45
50022: PUSH
50023: LD_INT 2
50025: NEG
50026: PUSH
50027: LD_INT 0
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 2
50036: NEG
50037: PUSH
50038: LD_INT 1
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 3
50047: NEG
50048: PUSH
50049: LD_INT 1
50051: NEG
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: LIST
50061: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
50062: LD_ADDR_VAR 0 46
50066: PUSH
50067: LD_INT 2
50069: NEG
50070: PUSH
50071: LD_INT 2
50073: NEG
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 2
50081: NEG
50082: PUSH
50083: LD_INT 3
50085: NEG
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 3
50093: NEG
50094: PUSH
50095: LD_INT 2
50097: NEG
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: LIST
50107: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
50108: LD_ADDR_VAR 0 47
50112: PUSH
50113: LD_INT 2
50115: NEG
50116: PUSH
50117: LD_INT 3
50119: NEG
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 1
50127: NEG
50128: PUSH
50129: LD_INT 3
50131: NEG
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50141: LD_ADDR_VAR 0 48
50145: PUSH
50146: LD_INT 1
50148: PUSH
50149: LD_INT 2
50151: NEG
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 2
50159: PUSH
50160: LD_INT 1
50162: NEG
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
50172: LD_ADDR_VAR 0 49
50176: PUSH
50177: LD_INT 3
50179: PUSH
50180: LD_INT 1
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 3
50189: PUSH
50190: LD_INT 2
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
50201: LD_ADDR_VAR 0 50
50205: PUSH
50206: LD_INT 2
50208: PUSH
50209: LD_INT 3
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 1
50218: PUSH
50219: LD_INT 3
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50230: LD_ADDR_VAR 0 51
50234: PUSH
50235: LD_INT 1
50237: NEG
50238: PUSH
50239: LD_INT 2
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 2
50248: NEG
50249: PUSH
50250: LD_INT 1
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50261: LD_ADDR_VAR 0 52
50265: PUSH
50266: LD_INT 3
50268: NEG
50269: PUSH
50270: LD_INT 1
50272: NEG
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 3
50280: NEG
50281: PUSH
50282: LD_INT 2
50284: NEG
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50294: LD_ADDR_VAR 0 53
50298: PUSH
50299: LD_INT 1
50301: NEG
50302: PUSH
50303: LD_INT 3
50305: NEG
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 0
50313: PUSH
50314: LD_INT 3
50316: NEG
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 1
50324: PUSH
50325: LD_INT 2
50327: NEG
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: LIST
50337: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50338: LD_ADDR_VAR 0 54
50342: PUSH
50343: LD_INT 2
50345: PUSH
50346: LD_INT 1
50348: NEG
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 3
50356: PUSH
50357: LD_INT 0
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 3
50366: PUSH
50367: LD_INT 1
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: LIST
50378: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50379: LD_ADDR_VAR 0 55
50383: PUSH
50384: LD_INT 3
50386: PUSH
50387: LD_INT 2
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 3
50396: PUSH
50397: LD_INT 3
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 2
50406: PUSH
50407: LD_INT 3
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: LIST
50418: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50419: LD_ADDR_VAR 0 56
50423: PUSH
50424: LD_INT 1
50426: PUSH
50427: LD_INT 3
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 0
50436: PUSH
50437: LD_INT 3
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 1
50446: NEG
50447: PUSH
50448: LD_INT 2
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: LIST
50459: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50460: LD_ADDR_VAR 0 57
50464: PUSH
50465: LD_INT 2
50467: NEG
50468: PUSH
50469: LD_INT 1
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 3
50478: NEG
50479: PUSH
50480: LD_INT 0
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 3
50489: NEG
50490: PUSH
50491: LD_INT 1
50493: NEG
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: LIST
50503: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50504: LD_ADDR_VAR 0 58
50508: PUSH
50509: LD_INT 2
50511: NEG
50512: PUSH
50513: LD_INT 3
50515: NEG
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 3
50523: NEG
50524: PUSH
50525: LD_INT 2
50527: NEG
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 3
50535: NEG
50536: PUSH
50537: LD_INT 3
50539: NEG
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: LIST
50549: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
50550: LD_ADDR_VAR 0 59
50554: PUSH
50555: LD_INT 1
50557: NEG
50558: PUSH
50559: LD_INT 2
50561: NEG
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 0
50569: PUSH
50570: LD_INT 2
50572: NEG
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 1
50580: PUSH
50581: LD_INT 1
50583: NEG
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: LIST
50593: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50594: LD_ADDR_VAR 0 60
50598: PUSH
50599: LD_INT 1
50601: PUSH
50602: LD_INT 1
50604: NEG
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 2
50612: PUSH
50613: LD_INT 0
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 2
50622: PUSH
50623: LD_INT 1
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: LIST
50634: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50635: LD_ADDR_VAR 0 61
50639: PUSH
50640: LD_INT 2
50642: PUSH
50643: LD_INT 1
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 2
50652: PUSH
50653: LD_INT 2
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 1
50662: PUSH
50663: LD_INT 2
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: LIST
50674: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50675: LD_ADDR_VAR 0 62
50679: PUSH
50680: LD_INT 1
50682: PUSH
50683: LD_INT 2
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 0
50692: PUSH
50693: LD_INT 2
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 1
50702: NEG
50703: PUSH
50704: LD_INT 1
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: LIST
50715: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50716: LD_ADDR_VAR 0 63
50720: PUSH
50721: LD_INT 1
50723: NEG
50724: PUSH
50725: LD_INT 1
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 2
50734: NEG
50735: PUSH
50736: LD_INT 0
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 2
50745: NEG
50746: PUSH
50747: LD_INT 1
50749: NEG
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: LIST
50759: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50760: LD_ADDR_VAR 0 64
50764: PUSH
50765: LD_INT 1
50767: NEG
50768: PUSH
50769: LD_INT 2
50771: NEG
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 2
50779: NEG
50780: PUSH
50781: LD_INT 1
50783: NEG
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 2
50791: NEG
50792: PUSH
50793: LD_INT 2
50795: NEG
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: LIST
50805: ST_TO_ADDR
// end ; 2 :
50806: GO 54072
50808: LD_INT 2
50810: DOUBLE
50811: EQUAL
50812: IFTRUE 50816
50814: GO 54071
50816: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50817: LD_ADDR_VAR 0 29
50821: PUSH
50822: LD_INT 4
50824: PUSH
50825: LD_INT 0
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 4
50834: PUSH
50835: LD_INT 1
50837: NEG
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 5
50845: PUSH
50846: LD_INT 0
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 5
50855: PUSH
50856: LD_INT 1
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 4
50865: PUSH
50866: LD_INT 1
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 3
50875: PUSH
50876: LD_INT 0
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 3
50885: PUSH
50886: LD_INT 1
50888: NEG
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 3
50896: PUSH
50897: LD_INT 2
50899: NEG
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 5
50907: PUSH
50908: LD_INT 2
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 3
50917: PUSH
50918: LD_INT 3
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 3
50927: PUSH
50928: LD_INT 2
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 4
50937: PUSH
50938: LD_INT 3
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 4
50947: PUSH
50948: LD_INT 4
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 3
50957: PUSH
50958: LD_INT 4
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 2
50967: PUSH
50968: LD_INT 3
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 2
50977: PUSH
50978: LD_INT 2
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 4
50987: PUSH
50988: LD_INT 2
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 2
50997: PUSH
50998: LD_INT 4
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 0
51007: PUSH
51008: LD_INT 4
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 0
51017: PUSH
51018: LD_INT 3
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 1
51027: PUSH
51028: LD_INT 4
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 1
51037: PUSH
51038: LD_INT 5
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 0
51047: PUSH
51048: LD_INT 5
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 1
51057: NEG
51058: PUSH
51059: LD_INT 4
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: LD_INT 3
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 2
51079: PUSH
51080: LD_INT 5
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 2
51089: NEG
51090: PUSH
51091: LD_INT 3
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 3
51100: NEG
51101: PUSH
51102: LD_INT 0
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 3
51111: NEG
51112: PUSH
51113: LD_INT 1
51115: NEG
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 2
51123: NEG
51124: PUSH
51125: LD_INT 0
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 2
51134: NEG
51135: PUSH
51136: LD_INT 1
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 3
51145: NEG
51146: PUSH
51147: LD_INT 1
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 4
51156: NEG
51157: PUSH
51158: LD_INT 0
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 4
51167: NEG
51168: PUSH
51169: LD_INT 1
51171: NEG
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 4
51179: NEG
51180: PUSH
51181: LD_INT 2
51183: NEG
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 2
51191: NEG
51192: PUSH
51193: LD_INT 2
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 4
51202: NEG
51203: PUSH
51204: LD_INT 4
51206: NEG
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 4
51214: NEG
51215: PUSH
51216: LD_INT 5
51218: NEG
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 3
51226: NEG
51227: PUSH
51228: LD_INT 4
51230: NEG
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 3
51238: NEG
51239: PUSH
51240: LD_INT 3
51242: NEG
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 4
51250: NEG
51251: PUSH
51252: LD_INT 3
51254: NEG
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 5
51262: NEG
51263: PUSH
51264: LD_INT 4
51266: NEG
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 5
51274: NEG
51275: PUSH
51276: LD_INT 5
51278: NEG
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 3
51286: NEG
51287: PUSH
51288: LD_INT 5
51290: NEG
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 5
51298: NEG
51299: PUSH
51300: LD_INT 3
51302: NEG
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
51355: LD_ADDR_VAR 0 30
51359: PUSH
51360: LD_INT 4
51362: PUSH
51363: LD_INT 4
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 4
51372: PUSH
51373: LD_INT 3
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 5
51382: PUSH
51383: LD_INT 4
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 5
51392: PUSH
51393: LD_INT 5
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 4
51402: PUSH
51403: LD_INT 5
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 3
51412: PUSH
51413: LD_INT 4
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 3
51422: PUSH
51423: LD_INT 3
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 5
51432: PUSH
51433: LD_INT 3
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 3
51442: PUSH
51443: LD_INT 5
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 0
51452: PUSH
51453: LD_INT 3
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 0
51462: PUSH
51463: LD_INT 2
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 1
51472: PUSH
51473: LD_INT 3
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 1
51482: PUSH
51483: LD_INT 4
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 0
51492: PUSH
51493: LD_INT 4
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 1
51502: NEG
51503: PUSH
51504: LD_INT 3
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 1
51513: NEG
51514: PUSH
51515: LD_INT 2
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 2
51524: PUSH
51525: LD_INT 4
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 2
51534: NEG
51535: PUSH
51536: LD_INT 2
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 4
51545: NEG
51546: PUSH
51547: LD_INT 0
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 4
51556: NEG
51557: PUSH
51558: LD_INT 1
51560: NEG
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 3
51568: NEG
51569: PUSH
51570: LD_INT 0
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 3
51579: NEG
51580: PUSH
51581: LD_INT 1
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 4
51590: NEG
51591: PUSH
51592: LD_INT 1
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 5
51601: NEG
51602: PUSH
51603: LD_INT 0
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 5
51612: NEG
51613: PUSH
51614: LD_INT 1
51616: NEG
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 5
51624: NEG
51625: PUSH
51626: LD_INT 2
51628: NEG
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 3
51636: NEG
51637: PUSH
51638: LD_INT 2
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 3
51647: NEG
51648: PUSH
51649: LD_INT 3
51651: NEG
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 3
51659: NEG
51660: PUSH
51661: LD_INT 4
51663: NEG
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 2
51671: NEG
51672: PUSH
51673: LD_INT 3
51675: NEG
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 2
51683: NEG
51684: PUSH
51685: LD_INT 2
51687: NEG
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 3
51695: NEG
51696: PUSH
51697: LD_INT 2
51699: NEG
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 4
51707: NEG
51708: PUSH
51709: LD_INT 3
51711: NEG
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 4
51719: NEG
51720: PUSH
51721: LD_INT 4
51723: NEG
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 2
51731: NEG
51732: PUSH
51733: LD_INT 4
51735: NEG
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 4
51743: NEG
51744: PUSH
51745: LD_INT 2
51747: NEG
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 0
51755: PUSH
51756: LD_INT 4
51758: NEG
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 0
51766: PUSH
51767: LD_INT 5
51769: NEG
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 1
51777: PUSH
51778: LD_INT 4
51780: NEG
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 1
51788: PUSH
51789: LD_INT 3
51791: NEG
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: LD_INT 3
51802: NEG
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 1
51810: NEG
51811: PUSH
51812: LD_INT 4
51814: NEG
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 1
51822: NEG
51823: PUSH
51824: LD_INT 5
51826: NEG
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 2
51834: PUSH
51835: LD_INT 3
51837: NEG
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 2
51845: NEG
51846: PUSH
51847: LD_INT 5
51849: NEG
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51902: LD_ADDR_VAR 0 31
51906: PUSH
51907: LD_INT 0
51909: PUSH
51910: LD_INT 4
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 0
51919: PUSH
51920: LD_INT 3
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 1
51929: PUSH
51930: LD_INT 4
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 1
51939: PUSH
51940: LD_INT 5
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 0
51949: PUSH
51950: LD_INT 5
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 1
51959: NEG
51960: PUSH
51961: LD_INT 4
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 1
51970: NEG
51971: PUSH
51972: LD_INT 3
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 2
51981: PUSH
51982: LD_INT 5
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 2
51991: NEG
51992: PUSH
51993: LD_INT 3
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 3
52002: NEG
52003: PUSH
52004: LD_INT 0
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 3
52013: NEG
52014: PUSH
52015: LD_INT 1
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 2
52025: NEG
52026: PUSH
52027: LD_INT 0
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 2
52036: NEG
52037: PUSH
52038: LD_INT 1
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 3
52047: NEG
52048: PUSH
52049: LD_INT 1
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 4
52058: NEG
52059: PUSH
52060: LD_INT 0
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 4
52069: NEG
52070: PUSH
52071: LD_INT 1
52073: NEG
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 4
52081: NEG
52082: PUSH
52083: LD_INT 2
52085: NEG
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 2
52093: NEG
52094: PUSH
52095: LD_INT 2
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 4
52104: NEG
52105: PUSH
52106: LD_INT 4
52108: NEG
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 4
52116: NEG
52117: PUSH
52118: LD_INT 5
52120: NEG
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 3
52128: NEG
52129: PUSH
52130: LD_INT 4
52132: NEG
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 3
52140: NEG
52141: PUSH
52142: LD_INT 3
52144: NEG
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 4
52152: NEG
52153: PUSH
52154: LD_INT 3
52156: NEG
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 5
52164: NEG
52165: PUSH
52166: LD_INT 4
52168: NEG
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 5
52176: NEG
52177: PUSH
52178: LD_INT 5
52180: NEG
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 3
52188: NEG
52189: PUSH
52190: LD_INT 5
52192: NEG
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 5
52200: NEG
52201: PUSH
52202: LD_INT 3
52204: NEG
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 0
52212: PUSH
52213: LD_INT 3
52215: NEG
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 0
52223: PUSH
52224: LD_INT 4
52226: NEG
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 1
52234: PUSH
52235: LD_INT 3
52237: NEG
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 1
52245: PUSH
52246: LD_INT 2
52248: NEG
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 0
52256: PUSH
52257: LD_INT 2
52259: NEG
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 1
52267: NEG
52268: PUSH
52269: LD_INT 3
52271: NEG
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 1
52279: NEG
52280: PUSH
52281: LD_INT 4
52283: NEG
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 2
52291: PUSH
52292: LD_INT 2
52294: NEG
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 2
52302: NEG
52303: PUSH
52304: LD_INT 4
52306: NEG
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 4
52314: PUSH
52315: LD_INT 0
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 4
52324: PUSH
52325: LD_INT 1
52327: NEG
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 5
52335: PUSH
52336: LD_INT 0
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 5
52345: PUSH
52346: LD_INT 1
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 4
52355: PUSH
52356: LD_INT 1
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 3
52365: PUSH
52366: LD_INT 0
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 3
52375: PUSH
52376: LD_INT 1
52378: NEG
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 3
52386: PUSH
52387: LD_INT 2
52389: NEG
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 5
52397: PUSH
52398: LD_INT 2
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
52452: LD_ADDR_VAR 0 32
52456: PUSH
52457: LD_INT 4
52459: NEG
52460: PUSH
52461: LD_INT 0
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 4
52470: NEG
52471: PUSH
52472: LD_INT 1
52474: NEG
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 3
52482: NEG
52483: PUSH
52484: LD_INT 0
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 3
52493: NEG
52494: PUSH
52495: LD_INT 1
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 4
52504: NEG
52505: PUSH
52506: LD_INT 1
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 5
52515: NEG
52516: PUSH
52517: LD_INT 0
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 5
52526: NEG
52527: PUSH
52528: LD_INT 1
52530: NEG
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 5
52538: NEG
52539: PUSH
52540: LD_INT 2
52542: NEG
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 3
52550: NEG
52551: PUSH
52552: LD_INT 2
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 3
52561: NEG
52562: PUSH
52563: LD_INT 3
52565: NEG
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 3
52573: NEG
52574: PUSH
52575: LD_INT 4
52577: NEG
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 2
52585: NEG
52586: PUSH
52587: LD_INT 3
52589: NEG
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 2
52597: NEG
52598: PUSH
52599: LD_INT 2
52601: NEG
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 3
52609: NEG
52610: PUSH
52611: LD_INT 2
52613: NEG
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 4
52621: NEG
52622: PUSH
52623: LD_INT 3
52625: NEG
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 4
52633: NEG
52634: PUSH
52635: LD_INT 4
52637: NEG
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 2
52645: NEG
52646: PUSH
52647: LD_INT 4
52649: NEG
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 4
52657: NEG
52658: PUSH
52659: LD_INT 2
52661: NEG
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 0
52669: PUSH
52670: LD_INT 4
52672: NEG
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 0
52680: PUSH
52681: LD_INT 5
52683: NEG
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 1
52691: PUSH
52692: LD_INT 4
52694: NEG
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 1
52702: PUSH
52703: LD_INT 3
52705: NEG
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 0
52713: PUSH
52714: LD_INT 3
52716: NEG
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 1
52724: NEG
52725: PUSH
52726: LD_INT 4
52728: NEG
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 1
52736: NEG
52737: PUSH
52738: LD_INT 5
52740: NEG
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 2
52748: PUSH
52749: LD_INT 3
52751: NEG
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 2
52759: NEG
52760: PUSH
52761: LD_INT 5
52763: NEG
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 3
52771: PUSH
52772: LD_INT 0
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 3
52781: PUSH
52782: LD_INT 1
52784: NEG
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 4
52792: PUSH
52793: LD_INT 0
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 4
52802: PUSH
52803: LD_INT 1
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 3
52812: PUSH
52813: LD_INT 1
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 2
52822: PUSH
52823: LD_INT 0
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 2
52832: PUSH
52833: LD_INT 1
52835: NEG
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 2
52843: PUSH
52844: LD_INT 2
52846: NEG
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 4
52854: PUSH
52855: LD_INT 2
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 4
52864: PUSH
52865: LD_INT 4
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 4
52874: PUSH
52875: LD_INT 3
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 5
52884: PUSH
52885: LD_INT 4
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 5
52894: PUSH
52895: LD_INT 5
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 4
52904: PUSH
52905: LD_INT 5
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 3
52914: PUSH
52915: LD_INT 4
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 3
52924: PUSH
52925: LD_INT 3
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 5
52934: PUSH
52935: LD_INT 3
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 3
52944: PUSH
52945: LD_INT 5
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52999: LD_ADDR_VAR 0 33
53003: PUSH
53004: LD_INT 4
53006: NEG
53007: PUSH
53008: LD_INT 4
53010: NEG
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 4
53018: NEG
53019: PUSH
53020: LD_INT 5
53022: NEG
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 3
53030: NEG
53031: PUSH
53032: LD_INT 4
53034: NEG
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 3
53042: NEG
53043: PUSH
53044: LD_INT 3
53046: NEG
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 4
53054: NEG
53055: PUSH
53056: LD_INT 3
53058: NEG
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 5
53066: NEG
53067: PUSH
53068: LD_INT 4
53070: NEG
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 5
53078: NEG
53079: PUSH
53080: LD_INT 5
53082: NEG
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 3
53090: NEG
53091: PUSH
53092: LD_INT 5
53094: NEG
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 5
53102: NEG
53103: PUSH
53104: LD_INT 3
53106: NEG
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 0
53114: PUSH
53115: LD_INT 3
53117: NEG
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 0
53125: PUSH
53126: LD_INT 4
53128: NEG
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 1
53136: PUSH
53137: LD_INT 3
53139: NEG
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 1
53147: PUSH
53148: LD_INT 2
53150: NEG
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 0
53158: PUSH
53159: LD_INT 2
53161: NEG
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 1
53169: NEG
53170: PUSH
53171: LD_INT 3
53173: NEG
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 1
53181: NEG
53182: PUSH
53183: LD_INT 4
53185: NEG
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 2
53193: PUSH
53194: LD_INT 2
53196: NEG
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 2
53204: NEG
53205: PUSH
53206: LD_INT 4
53208: NEG
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 4
53216: PUSH
53217: LD_INT 0
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 4
53226: PUSH
53227: LD_INT 1
53229: NEG
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 5
53237: PUSH
53238: LD_INT 0
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 5
53247: PUSH
53248: LD_INT 1
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 4
53257: PUSH
53258: LD_INT 1
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 3
53267: PUSH
53268: LD_INT 0
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 3
53277: PUSH
53278: LD_INT 1
53280: NEG
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 3
53288: PUSH
53289: LD_INT 2
53291: NEG
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 5
53299: PUSH
53300: LD_INT 2
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 3
53309: PUSH
53310: LD_INT 3
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 3
53319: PUSH
53320: LD_INT 2
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 4
53329: PUSH
53330: LD_INT 3
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 4
53339: PUSH
53340: LD_INT 4
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 3
53349: PUSH
53350: LD_INT 4
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 2
53359: PUSH
53360: LD_INT 3
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 2
53369: PUSH
53370: LD_INT 2
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 4
53379: PUSH
53380: LD_INT 2
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 2
53389: PUSH
53390: LD_INT 4
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 0
53399: PUSH
53400: LD_INT 4
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 0
53409: PUSH
53410: LD_INT 3
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 1
53419: PUSH
53420: LD_INT 4
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 1
53429: PUSH
53430: LD_INT 5
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 0
53439: PUSH
53440: LD_INT 5
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 1
53449: NEG
53450: PUSH
53451: LD_INT 4
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 1
53460: NEG
53461: PUSH
53462: LD_INT 3
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 2
53471: PUSH
53472: LD_INT 5
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 2
53481: NEG
53482: PUSH
53483: LD_INT 3
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
53537: LD_ADDR_VAR 0 34
53541: PUSH
53542: LD_INT 0
53544: PUSH
53545: LD_INT 4
53547: NEG
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 0
53555: PUSH
53556: LD_INT 5
53558: NEG
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 1
53566: PUSH
53567: LD_INT 4
53569: NEG
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 1
53577: PUSH
53578: LD_INT 3
53580: NEG
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 0
53588: PUSH
53589: LD_INT 3
53591: NEG
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 1
53599: NEG
53600: PUSH
53601: LD_INT 4
53603: NEG
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 1
53611: NEG
53612: PUSH
53613: LD_INT 5
53615: NEG
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 2
53623: PUSH
53624: LD_INT 3
53626: NEG
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 2
53634: NEG
53635: PUSH
53636: LD_INT 5
53638: NEG
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 3
53646: PUSH
53647: LD_INT 0
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 3
53656: PUSH
53657: LD_INT 1
53659: NEG
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 4
53667: PUSH
53668: LD_INT 0
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 4
53677: PUSH
53678: LD_INT 1
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 3
53687: PUSH
53688: LD_INT 1
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 2
53697: PUSH
53698: LD_INT 0
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 2
53707: PUSH
53708: LD_INT 1
53710: NEG
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 2
53718: PUSH
53719: LD_INT 2
53721: NEG
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 4
53729: PUSH
53730: LD_INT 2
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 4
53739: PUSH
53740: LD_INT 4
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 4
53749: PUSH
53750: LD_INT 3
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 5
53759: PUSH
53760: LD_INT 4
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 5
53769: PUSH
53770: LD_INT 5
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 4
53779: PUSH
53780: LD_INT 5
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 3
53789: PUSH
53790: LD_INT 4
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 3
53799: PUSH
53800: LD_INT 3
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 5
53809: PUSH
53810: LD_INT 3
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 3
53819: PUSH
53820: LD_INT 5
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 0
53829: PUSH
53830: LD_INT 3
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 0
53839: PUSH
53840: LD_INT 2
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 1
53849: PUSH
53850: LD_INT 3
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 1
53859: PUSH
53860: LD_INT 4
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 0
53869: PUSH
53870: LD_INT 4
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 1
53879: NEG
53880: PUSH
53881: LD_INT 3
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 1
53890: NEG
53891: PUSH
53892: LD_INT 2
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 2
53901: PUSH
53902: LD_INT 4
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 2
53911: NEG
53912: PUSH
53913: LD_INT 2
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 4
53922: NEG
53923: PUSH
53924: LD_INT 0
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 4
53933: NEG
53934: PUSH
53935: LD_INT 1
53937: NEG
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 3
53945: NEG
53946: PUSH
53947: LD_INT 0
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 3
53956: NEG
53957: PUSH
53958: LD_INT 1
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 4
53967: NEG
53968: PUSH
53969: LD_INT 1
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 5
53978: NEG
53979: PUSH
53980: LD_INT 0
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 5
53989: NEG
53990: PUSH
53991: LD_INT 1
53993: NEG
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 5
54001: NEG
54002: PUSH
54003: LD_INT 2
54005: NEG
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 3
54013: NEG
54014: PUSH
54015: LD_INT 2
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: ST_TO_ADDR
// end ; end ;
54069: GO 54072
54071: POP
// case btype of b_depot , b_warehouse :
54072: LD_VAR 0 1
54076: PUSH
54077: LD_INT 0
54079: DOUBLE
54080: EQUAL
54081: IFTRUE 54091
54083: LD_INT 1
54085: DOUBLE
54086: EQUAL
54087: IFTRUE 54091
54089: GO 54292
54091: POP
// case nation of nation_american :
54092: LD_VAR 0 5
54096: PUSH
54097: LD_INT 1
54099: DOUBLE
54100: EQUAL
54101: IFTRUE 54105
54103: GO 54161
54105: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
54106: LD_ADDR_VAR 0 9
54110: PUSH
54111: LD_VAR 0 11
54115: PUSH
54116: LD_VAR 0 12
54120: PUSH
54121: LD_VAR 0 13
54125: PUSH
54126: LD_VAR 0 14
54130: PUSH
54131: LD_VAR 0 15
54135: PUSH
54136: LD_VAR 0 16
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: PUSH
54149: LD_VAR 0 4
54153: PUSH
54154: LD_INT 1
54156: PLUS
54157: ARRAY
54158: ST_TO_ADDR
54159: GO 54290
54161: LD_INT 2
54163: DOUBLE
54164: EQUAL
54165: IFTRUE 54169
54167: GO 54225
54169: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
54170: LD_ADDR_VAR 0 9
54174: PUSH
54175: LD_VAR 0 17
54179: PUSH
54180: LD_VAR 0 18
54184: PUSH
54185: LD_VAR 0 19
54189: PUSH
54190: LD_VAR 0 20
54194: PUSH
54195: LD_VAR 0 21
54199: PUSH
54200: LD_VAR 0 22
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: PUSH
54213: LD_VAR 0 4
54217: PUSH
54218: LD_INT 1
54220: PLUS
54221: ARRAY
54222: ST_TO_ADDR
54223: GO 54290
54225: LD_INT 3
54227: DOUBLE
54228: EQUAL
54229: IFTRUE 54233
54231: GO 54289
54233: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
54234: LD_ADDR_VAR 0 9
54238: PUSH
54239: LD_VAR 0 23
54243: PUSH
54244: LD_VAR 0 24
54248: PUSH
54249: LD_VAR 0 25
54253: PUSH
54254: LD_VAR 0 26
54258: PUSH
54259: LD_VAR 0 27
54263: PUSH
54264: LD_VAR 0 28
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: PUSH
54277: LD_VAR 0 4
54281: PUSH
54282: LD_INT 1
54284: PLUS
54285: ARRAY
54286: ST_TO_ADDR
54287: GO 54290
54289: POP
54290: GO 54845
54292: LD_INT 2
54294: DOUBLE
54295: EQUAL
54296: IFTRUE 54306
54298: LD_INT 3
54300: DOUBLE
54301: EQUAL
54302: IFTRUE 54306
54304: GO 54362
54306: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
54307: LD_ADDR_VAR 0 9
54311: PUSH
54312: LD_VAR 0 29
54316: PUSH
54317: LD_VAR 0 30
54321: PUSH
54322: LD_VAR 0 31
54326: PUSH
54327: LD_VAR 0 32
54331: PUSH
54332: LD_VAR 0 33
54336: PUSH
54337: LD_VAR 0 34
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: PUSH
54350: LD_VAR 0 4
54354: PUSH
54355: LD_INT 1
54357: PLUS
54358: ARRAY
54359: ST_TO_ADDR
54360: GO 54845
54362: LD_INT 16
54364: DOUBLE
54365: EQUAL
54366: IFTRUE 54424
54368: LD_INT 17
54370: DOUBLE
54371: EQUAL
54372: IFTRUE 54424
54374: LD_INT 18
54376: DOUBLE
54377: EQUAL
54378: IFTRUE 54424
54380: LD_INT 19
54382: DOUBLE
54383: EQUAL
54384: IFTRUE 54424
54386: LD_INT 22
54388: DOUBLE
54389: EQUAL
54390: IFTRUE 54424
54392: LD_INT 20
54394: DOUBLE
54395: EQUAL
54396: IFTRUE 54424
54398: LD_INT 21
54400: DOUBLE
54401: EQUAL
54402: IFTRUE 54424
54404: LD_INT 23
54406: DOUBLE
54407: EQUAL
54408: IFTRUE 54424
54410: LD_INT 24
54412: DOUBLE
54413: EQUAL
54414: IFTRUE 54424
54416: LD_INT 25
54418: DOUBLE
54419: EQUAL
54420: IFTRUE 54424
54422: GO 54480
54424: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
54425: LD_ADDR_VAR 0 9
54429: PUSH
54430: LD_VAR 0 35
54434: PUSH
54435: LD_VAR 0 36
54439: PUSH
54440: LD_VAR 0 37
54444: PUSH
54445: LD_VAR 0 38
54449: PUSH
54450: LD_VAR 0 39
54454: PUSH
54455: LD_VAR 0 40
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: PUSH
54468: LD_VAR 0 4
54472: PUSH
54473: LD_INT 1
54475: PLUS
54476: ARRAY
54477: ST_TO_ADDR
54478: GO 54845
54480: LD_INT 6
54482: DOUBLE
54483: EQUAL
54484: IFTRUE 54536
54486: LD_INT 7
54488: DOUBLE
54489: EQUAL
54490: IFTRUE 54536
54492: LD_INT 8
54494: DOUBLE
54495: EQUAL
54496: IFTRUE 54536
54498: LD_INT 13
54500: DOUBLE
54501: EQUAL
54502: IFTRUE 54536
54504: LD_INT 12
54506: DOUBLE
54507: EQUAL
54508: IFTRUE 54536
54510: LD_INT 15
54512: DOUBLE
54513: EQUAL
54514: IFTRUE 54536
54516: LD_INT 11
54518: DOUBLE
54519: EQUAL
54520: IFTRUE 54536
54522: LD_INT 14
54524: DOUBLE
54525: EQUAL
54526: IFTRUE 54536
54528: LD_INT 10
54530: DOUBLE
54531: EQUAL
54532: IFTRUE 54536
54534: GO 54592
54536: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
54537: LD_ADDR_VAR 0 9
54541: PUSH
54542: LD_VAR 0 41
54546: PUSH
54547: LD_VAR 0 42
54551: PUSH
54552: LD_VAR 0 43
54556: PUSH
54557: LD_VAR 0 44
54561: PUSH
54562: LD_VAR 0 45
54566: PUSH
54567: LD_VAR 0 46
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: PUSH
54580: LD_VAR 0 4
54584: PUSH
54585: LD_INT 1
54587: PLUS
54588: ARRAY
54589: ST_TO_ADDR
54590: GO 54845
54592: LD_INT 36
54594: DOUBLE
54595: EQUAL
54596: IFTRUE 54600
54598: GO 54656
54600: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
54601: LD_ADDR_VAR 0 9
54605: PUSH
54606: LD_VAR 0 47
54610: PUSH
54611: LD_VAR 0 48
54615: PUSH
54616: LD_VAR 0 49
54620: PUSH
54621: LD_VAR 0 50
54625: PUSH
54626: LD_VAR 0 51
54630: PUSH
54631: LD_VAR 0 52
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: PUSH
54644: LD_VAR 0 4
54648: PUSH
54649: LD_INT 1
54651: PLUS
54652: ARRAY
54653: ST_TO_ADDR
54654: GO 54845
54656: LD_INT 4
54658: DOUBLE
54659: EQUAL
54660: IFTRUE 54682
54662: LD_INT 5
54664: DOUBLE
54665: EQUAL
54666: IFTRUE 54682
54668: LD_INT 34
54670: DOUBLE
54671: EQUAL
54672: IFTRUE 54682
54674: LD_INT 37
54676: DOUBLE
54677: EQUAL
54678: IFTRUE 54682
54680: GO 54738
54682: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54683: LD_ADDR_VAR 0 9
54687: PUSH
54688: LD_VAR 0 53
54692: PUSH
54693: LD_VAR 0 54
54697: PUSH
54698: LD_VAR 0 55
54702: PUSH
54703: LD_VAR 0 56
54707: PUSH
54708: LD_VAR 0 57
54712: PUSH
54713: LD_VAR 0 58
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: PUSH
54726: LD_VAR 0 4
54730: PUSH
54731: LD_INT 1
54733: PLUS
54734: ARRAY
54735: ST_TO_ADDR
54736: GO 54845
54738: LD_INT 31
54740: DOUBLE
54741: EQUAL
54742: IFTRUE 54788
54744: LD_INT 32
54746: DOUBLE
54747: EQUAL
54748: IFTRUE 54788
54750: LD_INT 33
54752: DOUBLE
54753: EQUAL
54754: IFTRUE 54788
54756: LD_INT 27
54758: DOUBLE
54759: EQUAL
54760: IFTRUE 54788
54762: LD_INT 26
54764: DOUBLE
54765: EQUAL
54766: IFTRUE 54788
54768: LD_INT 28
54770: DOUBLE
54771: EQUAL
54772: IFTRUE 54788
54774: LD_INT 29
54776: DOUBLE
54777: EQUAL
54778: IFTRUE 54788
54780: LD_INT 30
54782: DOUBLE
54783: EQUAL
54784: IFTRUE 54788
54786: GO 54844
54788: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54789: LD_ADDR_VAR 0 9
54793: PUSH
54794: LD_VAR 0 59
54798: PUSH
54799: LD_VAR 0 60
54803: PUSH
54804: LD_VAR 0 61
54808: PUSH
54809: LD_VAR 0 62
54813: PUSH
54814: LD_VAR 0 63
54818: PUSH
54819: LD_VAR 0 64
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: PUSH
54832: LD_VAR 0 4
54836: PUSH
54837: LD_INT 1
54839: PLUS
54840: ARRAY
54841: ST_TO_ADDR
54842: GO 54845
54844: POP
// temp_list2 = [ ] ;
54845: LD_ADDR_VAR 0 10
54849: PUSH
54850: EMPTY
54851: ST_TO_ADDR
// for i in temp_list do
54852: LD_ADDR_VAR 0 8
54856: PUSH
54857: LD_VAR 0 9
54861: PUSH
54862: FOR_IN
54863: IFFALSE 54915
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54865: LD_ADDR_VAR 0 10
54869: PUSH
54870: LD_VAR 0 10
54874: PUSH
54875: LD_VAR 0 8
54879: PUSH
54880: LD_INT 1
54882: ARRAY
54883: PUSH
54884: LD_VAR 0 2
54888: PLUS
54889: PUSH
54890: LD_VAR 0 8
54894: PUSH
54895: LD_INT 2
54897: ARRAY
54898: PUSH
54899: LD_VAR 0 3
54903: PLUS
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: EMPTY
54910: LIST
54911: ADD
54912: ST_TO_ADDR
54913: GO 54862
54915: POP
54916: POP
// result = temp_list2 ;
54917: LD_ADDR_VAR 0 7
54921: PUSH
54922: LD_VAR 0 10
54926: ST_TO_ADDR
// end ;
54927: LD_VAR 0 7
54931: RET
// export function EnemyInRange ( unit , dist ) ; begin
54932: LD_INT 0
54934: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54935: LD_ADDR_VAR 0 3
54939: PUSH
54940: LD_VAR 0 1
54944: PPUSH
54945: CALL_OW 255
54949: PPUSH
54950: LD_VAR 0 1
54954: PPUSH
54955: CALL_OW 250
54959: PPUSH
54960: LD_VAR 0 1
54964: PPUSH
54965: CALL_OW 251
54969: PPUSH
54970: LD_VAR 0 2
54974: PPUSH
54975: CALL 28189 0 4
54979: PUSH
54980: LD_INT 4
54982: ARRAY
54983: ST_TO_ADDR
// end ;
54984: LD_VAR 0 3
54988: RET
// export function PlayerSeeMe ( unit ) ; begin
54989: LD_INT 0
54991: PPUSH
// result := See ( your_side , unit ) ;
54992: LD_ADDR_VAR 0 2
54996: PUSH
54997: LD_OWVAR 2
55001: PPUSH
55002: LD_VAR 0 1
55006: PPUSH
55007: CALL_OW 292
55011: ST_TO_ADDR
// end ;
55012: LD_VAR 0 2
55016: RET
// export function ReverseDir ( unit ) ; begin
55017: LD_INT 0
55019: PPUSH
// if not unit then
55020: LD_VAR 0 1
55024: NOT
55025: IFFALSE 55029
// exit ;
55027: GO 55052
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
55029: LD_ADDR_VAR 0 2
55033: PUSH
55034: LD_VAR 0 1
55038: PPUSH
55039: CALL_OW 254
55043: PUSH
55044: LD_INT 3
55046: PLUS
55047: PUSH
55048: LD_INT 6
55050: MOD
55051: ST_TO_ADDR
// end ;
55052: LD_VAR 0 2
55056: RET
// export function ReverseArray ( array ) ; var i ; begin
55057: LD_INT 0
55059: PPUSH
55060: PPUSH
// if not array then
55061: LD_VAR 0 1
55065: NOT
55066: IFFALSE 55070
// exit ;
55068: GO 55125
// result := [ ] ;
55070: LD_ADDR_VAR 0 2
55074: PUSH
55075: EMPTY
55076: ST_TO_ADDR
// for i := array downto 1 do
55077: LD_ADDR_VAR 0 3
55081: PUSH
55082: DOUBLE
55083: LD_VAR 0 1
55087: INC
55088: ST_TO_ADDR
55089: LD_INT 1
55091: PUSH
55092: FOR_DOWNTO
55093: IFFALSE 55123
// result := Join ( result , array [ i ] ) ;
55095: LD_ADDR_VAR 0 2
55099: PUSH
55100: LD_VAR 0 2
55104: PPUSH
55105: LD_VAR 0 1
55109: PUSH
55110: LD_VAR 0 3
55114: ARRAY
55115: PPUSH
55116: CALL 59967 0 2
55120: ST_TO_ADDR
55121: GO 55092
55123: POP
55124: POP
// end ;
55125: LD_VAR 0 2
55129: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
55130: LD_INT 0
55132: PPUSH
55133: PPUSH
55134: PPUSH
55135: PPUSH
55136: PPUSH
55137: PPUSH
// if not unit or not hexes then
55138: LD_VAR 0 1
55142: NOT
55143: IFTRUE 55152
55145: PUSH
55146: LD_VAR 0 2
55150: NOT
55151: OR
55152: IFFALSE 55156
// exit ;
55154: GO 55279
// dist := 9999 ;
55156: LD_ADDR_VAR 0 5
55160: PUSH
55161: LD_INT 9999
55163: ST_TO_ADDR
// for i = 1 to hexes do
55164: LD_ADDR_VAR 0 4
55168: PUSH
55169: DOUBLE
55170: LD_INT 1
55172: DEC
55173: ST_TO_ADDR
55174: LD_VAR 0 2
55178: PUSH
55179: FOR_TO
55180: IFFALSE 55267
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55182: LD_ADDR_VAR 0 6
55186: PUSH
55187: LD_VAR 0 1
55191: PPUSH
55192: LD_VAR 0 2
55196: PUSH
55197: LD_VAR 0 4
55201: ARRAY
55202: PUSH
55203: LD_INT 1
55205: ARRAY
55206: PPUSH
55207: LD_VAR 0 2
55211: PUSH
55212: LD_VAR 0 4
55216: ARRAY
55217: PUSH
55218: LD_INT 2
55220: ARRAY
55221: PPUSH
55222: CALL_OW 297
55226: ST_TO_ADDR
// if tdist < dist then
55227: LD_VAR 0 6
55231: PUSH
55232: LD_VAR 0 5
55236: LESS
55237: IFFALSE 55265
// begin hex := hexes [ i ] ;
55239: LD_ADDR_VAR 0 8
55243: PUSH
55244: LD_VAR 0 2
55248: PUSH
55249: LD_VAR 0 4
55253: ARRAY
55254: ST_TO_ADDR
// dist := tdist ;
55255: LD_ADDR_VAR 0 5
55259: PUSH
55260: LD_VAR 0 6
55264: ST_TO_ADDR
// end ; end ;
55265: GO 55179
55267: POP
55268: POP
// result := hex ;
55269: LD_ADDR_VAR 0 3
55273: PUSH
55274: LD_VAR 0 8
55278: ST_TO_ADDR
// end ;
55279: LD_VAR 0 3
55283: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
55284: LD_INT 0
55286: PPUSH
55287: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
55288: LD_VAR 0 1
55292: NOT
55293: IFTRUE 55332
55295: PUSH
55296: LD_VAR 0 1
55300: PUSH
55301: LD_INT 21
55303: PUSH
55304: LD_INT 2
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 23
55313: PUSH
55314: LD_INT 2
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PPUSH
55325: CALL_OW 69
55329: IN
55330: NOT
55331: OR
55332: IFFALSE 55336
// exit ;
55334: GO 55383
// for i = 1 to 3 do
55336: LD_ADDR_VAR 0 3
55340: PUSH
55341: DOUBLE
55342: LD_INT 1
55344: DEC
55345: ST_TO_ADDR
55346: LD_INT 3
55348: PUSH
55349: FOR_TO
55350: IFFALSE 55381
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
55352: LD_VAR 0 1
55356: PPUSH
55357: CALL_OW 250
55361: PPUSH
55362: LD_VAR 0 1
55366: PPUSH
55367: CALL_OW 251
55371: PPUSH
55372: LD_INT 1
55374: PPUSH
55375: CALL_OW 453
55379: GO 55349
55381: POP
55382: POP
// end ;
55383: LD_VAR 0 2
55387: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
55388: LD_INT 0
55390: PPUSH
55391: PPUSH
55392: PPUSH
55393: PPUSH
55394: PPUSH
55395: PPUSH
// if not unit or not enemy_unit then
55396: LD_VAR 0 1
55400: NOT
55401: IFTRUE 55410
55403: PUSH
55404: LD_VAR 0 2
55408: NOT
55409: OR
55410: IFFALSE 55414
// exit ;
55412: GO 55885
// if GetLives ( i ) < 250 then
55414: LD_VAR 0 4
55418: PPUSH
55419: CALL_OW 256
55423: PUSH
55424: LD_INT 250
55426: LESS
55427: IFFALSE 55440
// begin ComAutodestruct ( i ) ;
55429: LD_VAR 0 4
55433: PPUSH
55434: CALL 55284 0 1
// exit ;
55438: GO 55885
// end ; x := GetX ( enemy_unit ) ;
55440: LD_ADDR_VAR 0 7
55444: PUSH
55445: LD_VAR 0 2
55449: PPUSH
55450: CALL_OW 250
55454: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
55455: LD_ADDR_VAR 0 8
55459: PUSH
55460: LD_VAR 0 2
55464: PPUSH
55465: CALL_OW 251
55469: ST_TO_ADDR
// if not x or not y then
55470: LD_VAR 0 7
55474: NOT
55475: IFTRUE 55484
55477: PUSH
55478: LD_VAR 0 8
55482: NOT
55483: OR
55484: IFFALSE 55488
// exit ;
55486: GO 55885
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
55488: LD_ADDR_VAR 0 6
55492: PUSH
55493: LD_VAR 0 7
55497: PPUSH
55498: LD_INT 0
55500: PPUSH
55501: LD_INT 4
55503: PPUSH
55504: CALL_OW 272
55508: PUSH
55509: LD_VAR 0 8
55513: PPUSH
55514: LD_INT 0
55516: PPUSH
55517: LD_INT 4
55519: PPUSH
55520: CALL_OW 273
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_VAR 0 7
55533: PPUSH
55534: LD_INT 1
55536: PPUSH
55537: LD_INT 4
55539: PPUSH
55540: CALL_OW 272
55544: PUSH
55545: LD_VAR 0 8
55549: PPUSH
55550: LD_INT 1
55552: PPUSH
55553: LD_INT 4
55555: PPUSH
55556: CALL_OW 273
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_VAR 0 7
55569: PPUSH
55570: LD_INT 2
55572: PPUSH
55573: LD_INT 4
55575: PPUSH
55576: CALL_OW 272
55580: PUSH
55581: LD_VAR 0 8
55585: PPUSH
55586: LD_INT 2
55588: PPUSH
55589: LD_INT 4
55591: PPUSH
55592: CALL_OW 273
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_VAR 0 7
55605: PPUSH
55606: LD_INT 3
55608: PPUSH
55609: LD_INT 4
55611: PPUSH
55612: CALL_OW 272
55616: PUSH
55617: LD_VAR 0 8
55621: PPUSH
55622: LD_INT 3
55624: PPUSH
55625: LD_INT 4
55627: PPUSH
55628: CALL_OW 273
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_VAR 0 7
55641: PPUSH
55642: LD_INT 4
55644: PPUSH
55645: LD_INT 4
55647: PPUSH
55648: CALL_OW 272
55652: PUSH
55653: LD_VAR 0 8
55657: PPUSH
55658: LD_INT 4
55660: PPUSH
55661: LD_INT 4
55663: PPUSH
55664: CALL_OW 273
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_VAR 0 7
55677: PPUSH
55678: LD_INT 5
55680: PPUSH
55681: LD_INT 4
55683: PPUSH
55684: CALL_OW 272
55688: PUSH
55689: LD_VAR 0 8
55693: PPUSH
55694: LD_INT 5
55696: PPUSH
55697: LD_INT 4
55699: PPUSH
55700: CALL_OW 273
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: ST_TO_ADDR
// for i = tmp downto 1 do
55717: LD_ADDR_VAR 0 4
55721: PUSH
55722: DOUBLE
55723: LD_VAR 0 6
55727: INC
55728: ST_TO_ADDR
55729: LD_INT 1
55731: PUSH
55732: FOR_DOWNTO
55733: IFFALSE 55836
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55735: LD_VAR 0 6
55739: PUSH
55740: LD_VAR 0 4
55744: ARRAY
55745: PUSH
55746: LD_INT 1
55748: ARRAY
55749: PPUSH
55750: LD_VAR 0 6
55754: PUSH
55755: LD_VAR 0 4
55759: ARRAY
55760: PUSH
55761: LD_INT 2
55763: ARRAY
55764: PPUSH
55765: CALL_OW 488
55769: NOT
55770: IFTRUE 55812
55772: PUSH
55773: LD_VAR 0 6
55777: PUSH
55778: LD_VAR 0 4
55782: ARRAY
55783: PUSH
55784: LD_INT 1
55786: ARRAY
55787: PPUSH
55788: LD_VAR 0 6
55792: PUSH
55793: LD_VAR 0 4
55797: ARRAY
55798: PUSH
55799: LD_INT 2
55801: ARRAY
55802: PPUSH
55803: CALL_OW 428
55807: PUSH
55808: LD_INT 0
55810: NONEQUAL
55811: OR
55812: IFFALSE 55834
// tmp := Delete ( tmp , i ) ;
55814: LD_ADDR_VAR 0 6
55818: PUSH
55819: LD_VAR 0 6
55823: PPUSH
55824: LD_VAR 0 4
55828: PPUSH
55829: CALL_OW 3
55833: ST_TO_ADDR
55834: GO 55732
55836: POP
55837: POP
// j := GetClosestHex ( unit , tmp ) ;
55838: LD_ADDR_VAR 0 5
55842: PUSH
55843: LD_VAR 0 1
55847: PPUSH
55848: LD_VAR 0 6
55852: PPUSH
55853: CALL 55130 0 2
55857: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55858: LD_VAR 0 1
55862: PPUSH
55863: LD_VAR 0 5
55867: PUSH
55868: LD_INT 1
55870: ARRAY
55871: PPUSH
55872: LD_VAR 0 5
55876: PUSH
55877: LD_INT 2
55879: ARRAY
55880: PPUSH
55881: CALL_OW 111
// end ;
55885: LD_VAR 0 3
55889: RET
// export function PrepareApemanSoldier ( ) ; begin
55890: LD_INT 0
55892: PPUSH
// uc_nation := 0 ;
55893: LD_ADDR_OWVAR 21
55897: PUSH
55898: LD_INT 0
55900: ST_TO_ADDR
// hc_sex := sex_male ;
55901: LD_ADDR_OWVAR 27
55905: PUSH
55906: LD_INT 1
55908: ST_TO_ADDR
// hc_name :=  ;
55909: LD_ADDR_OWVAR 26
55913: PUSH
55914: LD_STRING 
55916: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
55917: LD_ADDR_OWVAR 28
55921: PUSH
55922: LD_INT 15
55924: ST_TO_ADDR
// hc_gallery :=  ;
55925: LD_ADDR_OWVAR 33
55929: PUSH
55930: LD_STRING 
55932: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55933: LD_ADDR_OWVAR 31
55937: PUSH
55938: LD_INT 0
55940: PPUSH
55941: LD_INT 3
55943: PPUSH
55944: CALL_OW 12
55948: PUSH
55949: LD_INT 0
55951: PPUSH
55952: LD_INT 3
55954: PPUSH
55955: CALL_OW 12
55959: PUSH
55960: LD_INT 0
55962: PUSH
55963: LD_INT 0
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
55972: LD_ADDR_OWVAR 29
55976: PUSH
55977: LD_INT 12
55979: PUSH
55980: LD_INT 12
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: ST_TO_ADDR
// end ;
55987: LD_VAR 0 1
55991: RET
// export function PrepareApemanEngineer ( ) ; begin
55992: LD_INT 0
55994: PPUSH
// uc_nation := 0 ;
55995: LD_ADDR_OWVAR 21
55999: PUSH
56000: LD_INT 0
56002: ST_TO_ADDR
// hc_sex := sex_male ;
56003: LD_ADDR_OWVAR 27
56007: PUSH
56008: LD_INT 1
56010: ST_TO_ADDR
// hc_name :=  ;
56011: LD_ADDR_OWVAR 26
56015: PUSH
56016: LD_STRING 
56018: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
56019: LD_ADDR_OWVAR 28
56023: PUSH
56024: LD_INT 16
56026: ST_TO_ADDR
// hc_gallery :=  ;
56027: LD_ADDR_OWVAR 33
56031: PUSH
56032: LD_STRING 
56034: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56035: LD_ADDR_OWVAR 31
56039: PUSH
56040: LD_INT 0
56042: PPUSH
56043: LD_INT 3
56045: PPUSH
56046: CALL_OW 12
56050: PUSH
56051: LD_INT 0
56053: PPUSH
56054: LD_INT 3
56056: PPUSH
56057: CALL_OW 12
56061: PUSH
56062: LD_INT 0
56064: PUSH
56065: LD_INT 0
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
56074: LD_ADDR_OWVAR 29
56078: PUSH
56079: LD_INT 12
56081: PUSH
56082: LD_INT 12
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: ST_TO_ADDR
// end ;
56089: LD_VAR 0 1
56093: RET
// export function PrepareApeman ( agressivity ) ; begin
56094: LD_INT 0
56096: PPUSH
// uc_side := 0 ;
56097: LD_ADDR_OWVAR 20
56101: PUSH
56102: LD_INT 0
56104: ST_TO_ADDR
// uc_nation := 0 ;
56105: LD_ADDR_OWVAR 21
56109: PUSH
56110: LD_INT 0
56112: ST_TO_ADDR
// hc_sex := sex_male ;
56113: LD_ADDR_OWVAR 27
56117: PUSH
56118: LD_INT 1
56120: ST_TO_ADDR
// hc_class := class_apeman ;
56121: LD_ADDR_OWVAR 28
56125: PUSH
56126: LD_INT 12
56128: ST_TO_ADDR
// hc_gallery :=  ;
56129: LD_ADDR_OWVAR 33
56133: PUSH
56134: LD_STRING 
56136: ST_TO_ADDR
// hc_name :=  ;
56137: LD_ADDR_OWVAR 26
56141: PUSH
56142: LD_STRING 
56144: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
56145: LD_ADDR_OWVAR 29
56149: PUSH
56150: LD_INT 12
56152: PUSH
56153: LD_INT 12
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: ST_TO_ADDR
// if agressivity = 0 then
56160: LD_VAR 0 1
56164: PUSH
56165: LD_INT 0
56167: EQUAL
56168: IFFALSE 56180
// hc_agressivity := 0 else
56170: LD_ADDR_OWVAR 35
56174: PUSH
56175: LD_INT 0
56177: ST_TO_ADDR
56178: GO 56201
// hc_agressivity := rand ( - agressivity , agressivity ) ;
56180: LD_ADDR_OWVAR 35
56184: PUSH
56185: LD_VAR 0 1
56189: NEG
56190: PPUSH
56191: LD_VAR 0 1
56195: PPUSH
56196: CALL_OW 12
56200: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56201: LD_ADDR_OWVAR 31
56205: PUSH
56206: LD_INT 0
56208: PPUSH
56209: LD_INT 3
56211: PPUSH
56212: CALL_OW 12
56216: PUSH
56217: LD_INT 0
56219: PPUSH
56220: LD_INT 3
56222: PPUSH
56223: CALL_OW 12
56227: PUSH
56228: LD_INT 0
56230: PUSH
56231: LD_INT 0
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: ST_TO_ADDR
// end ;
56240: LD_VAR 0 2
56244: RET
// export function PrepareTiger ( agressivity ) ; begin
56245: LD_INT 0
56247: PPUSH
// uc_side := 0 ;
56248: LD_ADDR_OWVAR 20
56252: PUSH
56253: LD_INT 0
56255: ST_TO_ADDR
// uc_nation := 0 ;
56256: LD_ADDR_OWVAR 21
56260: PUSH
56261: LD_INT 0
56263: ST_TO_ADDR
// InitHc ;
56264: CALL_OW 19
// hc_class := class_tiger ;
56268: LD_ADDR_OWVAR 28
56272: PUSH
56273: LD_INT 14
56275: ST_TO_ADDR
// hc_gallery :=  ;
56276: LD_ADDR_OWVAR 33
56280: PUSH
56281: LD_STRING 
56283: ST_TO_ADDR
// hc_name :=  ;
56284: LD_ADDR_OWVAR 26
56288: PUSH
56289: LD_STRING 
56291: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
56292: LD_ADDR_OWVAR 35
56296: PUSH
56297: LD_VAR 0 1
56301: NEG
56302: PPUSH
56303: LD_VAR 0 1
56307: PPUSH
56308: CALL_OW 12
56312: ST_TO_ADDR
// end ;
56313: LD_VAR 0 2
56317: RET
// export function PrepareEnchidna ( ) ; begin
56318: LD_INT 0
56320: PPUSH
// uc_side := 0 ;
56321: LD_ADDR_OWVAR 20
56325: PUSH
56326: LD_INT 0
56328: ST_TO_ADDR
// uc_nation := 0 ;
56329: LD_ADDR_OWVAR 21
56333: PUSH
56334: LD_INT 0
56336: ST_TO_ADDR
// InitHc ;
56337: CALL_OW 19
// hc_class := class_baggie ;
56341: LD_ADDR_OWVAR 28
56345: PUSH
56346: LD_INT 13
56348: ST_TO_ADDR
// hc_gallery :=  ;
56349: LD_ADDR_OWVAR 33
56353: PUSH
56354: LD_STRING 
56356: ST_TO_ADDR
// hc_name :=  ;
56357: LD_ADDR_OWVAR 26
56361: PUSH
56362: LD_STRING 
56364: ST_TO_ADDR
// end ;
56365: LD_VAR 0 1
56369: RET
// export function PrepareFrog ( ) ; begin
56370: LD_INT 0
56372: PPUSH
// uc_side := 0 ;
56373: LD_ADDR_OWVAR 20
56377: PUSH
56378: LD_INT 0
56380: ST_TO_ADDR
// uc_nation := 0 ;
56381: LD_ADDR_OWVAR 21
56385: PUSH
56386: LD_INT 0
56388: ST_TO_ADDR
// InitHc ;
56389: CALL_OW 19
// hc_class := class_frog ;
56393: LD_ADDR_OWVAR 28
56397: PUSH
56398: LD_INT 19
56400: ST_TO_ADDR
// hc_gallery :=  ;
56401: LD_ADDR_OWVAR 33
56405: PUSH
56406: LD_STRING 
56408: ST_TO_ADDR
// hc_name :=  ;
56409: LD_ADDR_OWVAR 26
56413: PUSH
56414: LD_STRING 
56416: ST_TO_ADDR
// end ;
56417: LD_VAR 0 1
56421: RET
// export function PrepareFish ( ) ; begin
56422: LD_INT 0
56424: PPUSH
// uc_side := 0 ;
56425: LD_ADDR_OWVAR 20
56429: PUSH
56430: LD_INT 0
56432: ST_TO_ADDR
// uc_nation := 0 ;
56433: LD_ADDR_OWVAR 21
56437: PUSH
56438: LD_INT 0
56440: ST_TO_ADDR
// InitHc ;
56441: CALL_OW 19
// hc_class := class_fish ;
56445: LD_ADDR_OWVAR 28
56449: PUSH
56450: LD_INT 20
56452: ST_TO_ADDR
// hc_gallery :=  ;
56453: LD_ADDR_OWVAR 33
56457: PUSH
56458: LD_STRING 
56460: ST_TO_ADDR
// hc_name :=  ;
56461: LD_ADDR_OWVAR 26
56465: PUSH
56466: LD_STRING 
56468: ST_TO_ADDR
// end ;
56469: LD_VAR 0 1
56473: RET
// export function PrepareBird ( ) ; begin
56474: LD_INT 0
56476: PPUSH
// uc_side := 0 ;
56477: LD_ADDR_OWVAR 20
56481: PUSH
56482: LD_INT 0
56484: ST_TO_ADDR
// uc_nation := 0 ;
56485: LD_ADDR_OWVAR 21
56489: PUSH
56490: LD_INT 0
56492: ST_TO_ADDR
// InitHc ;
56493: CALL_OW 19
// hc_class := class_phororhacos ;
56497: LD_ADDR_OWVAR 28
56501: PUSH
56502: LD_INT 18
56504: ST_TO_ADDR
// hc_gallery :=  ;
56505: LD_ADDR_OWVAR 33
56509: PUSH
56510: LD_STRING 
56512: ST_TO_ADDR
// hc_name :=  ;
56513: LD_ADDR_OWVAR 26
56517: PUSH
56518: LD_STRING 
56520: ST_TO_ADDR
// end ;
56521: LD_VAR 0 1
56525: RET
// export function PrepareHorse ( ) ; begin
56526: LD_INT 0
56528: PPUSH
// uc_side := 0 ;
56529: LD_ADDR_OWVAR 20
56533: PUSH
56534: LD_INT 0
56536: ST_TO_ADDR
// uc_nation := 0 ;
56537: LD_ADDR_OWVAR 21
56541: PUSH
56542: LD_INT 0
56544: ST_TO_ADDR
// InitHc ;
56545: CALL_OW 19
// hc_class := class_horse ;
56549: LD_ADDR_OWVAR 28
56553: PUSH
56554: LD_INT 21
56556: ST_TO_ADDR
// hc_gallery :=  ;
56557: LD_ADDR_OWVAR 33
56561: PUSH
56562: LD_STRING 
56564: ST_TO_ADDR
// hc_name :=  ;
56565: LD_ADDR_OWVAR 26
56569: PUSH
56570: LD_STRING 
56572: ST_TO_ADDR
// end ;
56573: LD_VAR 0 1
56577: RET
// export function PrepareMastodont ( ) ; begin
56578: LD_INT 0
56580: PPUSH
// uc_side := 0 ;
56581: LD_ADDR_OWVAR 20
56585: PUSH
56586: LD_INT 0
56588: ST_TO_ADDR
// uc_nation := 0 ;
56589: LD_ADDR_OWVAR 21
56593: PUSH
56594: LD_INT 0
56596: ST_TO_ADDR
// vc_chassis := class_mastodont ;
56597: LD_ADDR_OWVAR 37
56601: PUSH
56602: LD_INT 31
56604: ST_TO_ADDR
// vc_control := control_rider ;
56605: LD_ADDR_OWVAR 38
56609: PUSH
56610: LD_INT 4
56612: ST_TO_ADDR
// end ;
56613: LD_VAR 0 1
56617: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
56618: LD_INT 0
56620: PPUSH
56621: PPUSH
56622: PPUSH
// uc_side = 0 ;
56623: LD_ADDR_OWVAR 20
56627: PUSH
56628: LD_INT 0
56630: ST_TO_ADDR
// uc_nation = 0 ;
56631: LD_ADDR_OWVAR 21
56635: PUSH
56636: LD_INT 0
56638: ST_TO_ADDR
// InitHc_All ( ) ;
56639: CALL_OW 584
// InitVc ;
56643: CALL_OW 20
// if mastodonts then
56647: LD_VAR 0 6
56651: IFFALSE 56718
// for i = 1 to mastodonts do
56653: LD_ADDR_VAR 0 11
56657: PUSH
56658: DOUBLE
56659: LD_INT 1
56661: DEC
56662: ST_TO_ADDR
56663: LD_VAR 0 6
56667: PUSH
56668: FOR_TO
56669: IFFALSE 56716
// begin vc_chassis := 31 ;
56671: LD_ADDR_OWVAR 37
56675: PUSH
56676: LD_INT 31
56678: ST_TO_ADDR
// vc_control := control_rider ;
56679: LD_ADDR_OWVAR 38
56683: PUSH
56684: LD_INT 4
56686: ST_TO_ADDR
// animal := CreateVehicle ;
56687: LD_ADDR_VAR 0 12
56691: PUSH
56692: CALL_OW 45
56696: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56697: LD_VAR 0 12
56701: PPUSH
56702: LD_VAR 0 8
56706: PPUSH
56707: LD_INT 0
56709: PPUSH
56710: CALL 58860 0 3
// end ;
56714: GO 56668
56716: POP
56717: POP
// if horses then
56718: LD_VAR 0 5
56722: IFFALSE 56789
// for i = 1 to horses do
56724: LD_ADDR_VAR 0 11
56728: PUSH
56729: DOUBLE
56730: LD_INT 1
56732: DEC
56733: ST_TO_ADDR
56734: LD_VAR 0 5
56738: PUSH
56739: FOR_TO
56740: IFFALSE 56787
// begin hc_class := 21 ;
56742: LD_ADDR_OWVAR 28
56746: PUSH
56747: LD_INT 21
56749: ST_TO_ADDR
// hc_gallery :=  ;
56750: LD_ADDR_OWVAR 33
56754: PUSH
56755: LD_STRING 
56757: ST_TO_ADDR
// animal := CreateHuman ;
56758: LD_ADDR_VAR 0 12
56762: PUSH
56763: CALL_OW 44
56767: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56768: LD_VAR 0 12
56772: PPUSH
56773: LD_VAR 0 8
56777: PPUSH
56778: LD_INT 0
56780: PPUSH
56781: CALL 58860 0 3
// end ;
56785: GO 56739
56787: POP
56788: POP
// if birds then
56789: LD_VAR 0 1
56793: IFFALSE 56860
// for i = 1 to birds do
56795: LD_ADDR_VAR 0 11
56799: PUSH
56800: DOUBLE
56801: LD_INT 1
56803: DEC
56804: ST_TO_ADDR
56805: LD_VAR 0 1
56809: PUSH
56810: FOR_TO
56811: IFFALSE 56858
// begin hc_class := 18 ;
56813: LD_ADDR_OWVAR 28
56817: PUSH
56818: LD_INT 18
56820: ST_TO_ADDR
// hc_gallery =  ;
56821: LD_ADDR_OWVAR 33
56825: PUSH
56826: LD_STRING 
56828: ST_TO_ADDR
// animal := CreateHuman ;
56829: LD_ADDR_VAR 0 12
56833: PUSH
56834: CALL_OW 44
56838: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56839: LD_VAR 0 12
56843: PPUSH
56844: LD_VAR 0 8
56848: PPUSH
56849: LD_INT 0
56851: PPUSH
56852: CALL 58860 0 3
// end ;
56856: GO 56810
56858: POP
56859: POP
// if tigers then
56860: LD_VAR 0 2
56864: IFFALSE 56948
// for i = 1 to tigers do
56866: LD_ADDR_VAR 0 11
56870: PUSH
56871: DOUBLE
56872: LD_INT 1
56874: DEC
56875: ST_TO_ADDR
56876: LD_VAR 0 2
56880: PUSH
56881: FOR_TO
56882: IFFALSE 56946
// begin hc_class = class_tiger ;
56884: LD_ADDR_OWVAR 28
56888: PUSH
56889: LD_INT 14
56891: ST_TO_ADDR
// hc_gallery =  ;
56892: LD_ADDR_OWVAR 33
56896: PUSH
56897: LD_STRING 
56899: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56900: LD_ADDR_OWVAR 35
56904: PUSH
56905: LD_INT 7
56907: NEG
56908: PPUSH
56909: LD_INT 7
56911: PPUSH
56912: CALL_OW 12
56916: ST_TO_ADDR
// animal := CreateHuman ;
56917: LD_ADDR_VAR 0 12
56921: PUSH
56922: CALL_OW 44
56926: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56927: LD_VAR 0 12
56931: PPUSH
56932: LD_VAR 0 8
56936: PPUSH
56937: LD_INT 0
56939: PPUSH
56940: CALL 58860 0 3
// end ;
56944: GO 56881
56946: POP
56947: POP
// if apemans then
56948: LD_VAR 0 3
56952: IFFALSE 57075
// for i = 1 to apemans do
56954: LD_ADDR_VAR 0 11
56958: PUSH
56959: DOUBLE
56960: LD_INT 1
56962: DEC
56963: ST_TO_ADDR
56964: LD_VAR 0 3
56968: PUSH
56969: FOR_TO
56970: IFFALSE 57073
// begin hc_class = class_apeman ;
56972: LD_ADDR_OWVAR 28
56976: PUSH
56977: LD_INT 12
56979: ST_TO_ADDR
// hc_gallery =  ;
56980: LD_ADDR_OWVAR 33
56984: PUSH
56985: LD_STRING 
56987: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
56988: LD_ADDR_OWVAR 35
56992: PUSH
56993: LD_INT 2
56995: NEG
56996: PPUSH
56997: LD_INT 2
56999: PPUSH
57000: CALL_OW 12
57004: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
57005: LD_ADDR_OWVAR 31
57009: PUSH
57010: LD_INT 1
57012: PPUSH
57013: LD_INT 3
57015: PPUSH
57016: CALL_OW 12
57020: PUSH
57021: LD_INT 1
57023: PPUSH
57024: LD_INT 3
57026: PPUSH
57027: CALL_OW 12
57031: PUSH
57032: LD_INT 0
57034: PUSH
57035: LD_INT 0
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: ST_TO_ADDR
// animal := CreateHuman ;
57044: LD_ADDR_VAR 0 12
57048: PUSH
57049: CALL_OW 44
57053: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57054: LD_VAR 0 12
57058: PPUSH
57059: LD_VAR 0 8
57063: PPUSH
57064: LD_INT 0
57066: PPUSH
57067: CALL 58860 0 3
// end ;
57071: GO 56969
57073: POP
57074: POP
// if enchidnas then
57075: LD_VAR 0 4
57079: IFFALSE 57146
// for i = 1 to enchidnas do
57081: LD_ADDR_VAR 0 11
57085: PUSH
57086: DOUBLE
57087: LD_INT 1
57089: DEC
57090: ST_TO_ADDR
57091: LD_VAR 0 4
57095: PUSH
57096: FOR_TO
57097: IFFALSE 57144
// begin hc_class = 13 ;
57099: LD_ADDR_OWVAR 28
57103: PUSH
57104: LD_INT 13
57106: ST_TO_ADDR
// hc_gallery =  ;
57107: LD_ADDR_OWVAR 33
57111: PUSH
57112: LD_STRING 
57114: ST_TO_ADDR
// animal := CreateHuman ;
57115: LD_ADDR_VAR 0 12
57119: PUSH
57120: CALL_OW 44
57124: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57125: LD_VAR 0 12
57129: PPUSH
57130: LD_VAR 0 8
57134: PPUSH
57135: LD_INT 0
57137: PPUSH
57138: CALL 58860 0 3
// end ;
57142: GO 57096
57144: POP
57145: POP
// if fishes then
57146: LD_VAR 0 7
57150: IFFALSE 57217
// for i = 1 to fishes do
57152: LD_ADDR_VAR 0 11
57156: PUSH
57157: DOUBLE
57158: LD_INT 1
57160: DEC
57161: ST_TO_ADDR
57162: LD_VAR 0 7
57166: PUSH
57167: FOR_TO
57168: IFFALSE 57215
// begin hc_class = 20 ;
57170: LD_ADDR_OWVAR 28
57174: PUSH
57175: LD_INT 20
57177: ST_TO_ADDR
// hc_gallery =  ;
57178: LD_ADDR_OWVAR 33
57182: PUSH
57183: LD_STRING 
57185: ST_TO_ADDR
// animal := CreateHuman ;
57186: LD_ADDR_VAR 0 12
57190: PUSH
57191: CALL_OW 44
57195: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
57196: LD_VAR 0 12
57200: PPUSH
57201: LD_VAR 0 9
57205: PPUSH
57206: LD_INT 0
57208: PPUSH
57209: CALL 58860 0 3
// end ;
57213: GO 57167
57215: POP
57216: POP
// end ;
57217: LD_VAR 0 10
57221: RET
// export function WantHeal ( sci , unit ) ; begin
57222: LD_INT 0
57224: PPUSH
// if GetTaskList ( sci ) > 0 then
57225: LD_VAR 0 1
57229: PPUSH
57230: CALL_OW 437
57234: PUSH
57235: LD_INT 0
57237: GREATER
57238: IFFALSE 57310
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
57240: LD_VAR 0 1
57244: PPUSH
57245: CALL_OW 437
57249: PUSH
57250: LD_INT 1
57252: ARRAY
57253: PUSH
57254: LD_INT 1
57256: ARRAY
57257: PUSH
57258: LD_STRING l
57260: EQUAL
57261: IFFALSE 57288
57263: PUSH
57264: LD_VAR 0 1
57268: PPUSH
57269: CALL_OW 437
57273: PUSH
57274: LD_INT 1
57276: ARRAY
57277: PUSH
57278: LD_INT 4
57280: ARRAY
57281: PUSH
57282: LD_VAR 0 2
57286: EQUAL
57287: AND
57288: IFFALSE 57300
// result := true else
57290: LD_ADDR_VAR 0 3
57294: PUSH
57295: LD_INT 1
57297: ST_TO_ADDR
57298: GO 57308
// result := false ;
57300: LD_ADDR_VAR 0 3
57304: PUSH
57305: LD_INT 0
57307: ST_TO_ADDR
// end else
57308: GO 57318
// result := false ;
57310: LD_ADDR_VAR 0 3
57314: PUSH
57315: LD_INT 0
57317: ST_TO_ADDR
// end ;
57318: LD_VAR 0 3
57322: RET
// export function HealTarget ( sci ) ; begin
57323: LD_INT 0
57325: PPUSH
// if not sci then
57326: LD_VAR 0 1
57330: NOT
57331: IFFALSE 57335
// exit ;
57333: GO 57400
// result := 0 ;
57335: LD_ADDR_VAR 0 2
57339: PUSH
57340: LD_INT 0
57342: ST_TO_ADDR
// if GetTaskList ( sci ) then
57343: LD_VAR 0 1
57347: PPUSH
57348: CALL_OW 437
57352: IFFALSE 57400
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
57354: LD_VAR 0 1
57358: PPUSH
57359: CALL_OW 437
57363: PUSH
57364: LD_INT 1
57366: ARRAY
57367: PUSH
57368: LD_INT 1
57370: ARRAY
57371: PUSH
57372: LD_STRING l
57374: EQUAL
57375: IFFALSE 57400
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
57377: LD_ADDR_VAR 0 2
57381: PUSH
57382: LD_VAR 0 1
57386: PPUSH
57387: CALL_OW 437
57391: PUSH
57392: LD_INT 1
57394: ARRAY
57395: PUSH
57396: LD_INT 4
57398: ARRAY
57399: ST_TO_ADDR
// end ;
57400: LD_VAR 0 2
57404: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
57405: LD_INT 0
57407: PPUSH
57408: PPUSH
57409: PPUSH
57410: PPUSH
// if not base_units then
57411: LD_VAR 0 1
57415: NOT
57416: IFFALSE 57420
// exit ;
57418: GO 57507
// result := false ;
57420: LD_ADDR_VAR 0 2
57424: PUSH
57425: LD_INT 0
57427: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
57428: LD_ADDR_VAR 0 5
57432: PUSH
57433: LD_VAR 0 1
57437: PPUSH
57438: LD_INT 21
57440: PUSH
57441: LD_INT 3
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PPUSH
57448: CALL_OW 72
57452: ST_TO_ADDR
// if not tmp then
57453: LD_VAR 0 5
57457: NOT
57458: IFFALSE 57462
// exit ;
57460: GO 57507
// for i in tmp do
57462: LD_ADDR_VAR 0 3
57466: PUSH
57467: LD_VAR 0 5
57471: PUSH
57472: FOR_IN
57473: IFFALSE 57505
// begin result := EnemyInRange ( i , 22 ) ;
57475: LD_ADDR_VAR 0 2
57479: PUSH
57480: LD_VAR 0 3
57484: PPUSH
57485: LD_INT 22
57487: PPUSH
57488: CALL 54932 0 2
57492: ST_TO_ADDR
// if result then
57493: LD_VAR 0 2
57497: IFFALSE 57503
// exit ;
57499: POP
57500: POP
57501: GO 57507
// end ;
57503: GO 57472
57505: POP
57506: POP
// end ;
57507: LD_VAR 0 2
57511: RET
// export function FilterByTag ( units , tag ) ; begin
57512: LD_INT 0
57514: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
57515: LD_ADDR_VAR 0 3
57519: PUSH
57520: LD_VAR 0 1
57524: PPUSH
57525: LD_INT 120
57527: PUSH
57528: LD_VAR 0 2
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PPUSH
57537: CALL_OW 72
57541: ST_TO_ADDR
// end ;
57542: LD_VAR 0 3
57546: RET
// export function IsDriver ( un ) ; begin
57547: LD_INT 0
57549: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
57550: LD_ADDR_VAR 0 2
57554: PUSH
57555: LD_VAR 0 1
57559: PUSH
57560: LD_INT 55
57562: PUSH
57563: EMPTY
57564: LIST
57565: PPUSH
57566: CALL_OW 69
57570: IN
57571: ST_TO_ADDR
// end ;
57572: LD_VAR 0 2
57576: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
57577: LD_INT 0
57579: PPUSH
57580: PPUSH
// list := [ ] ;
57581: LD_ADDR_VAR 0 5
57585: PUSH
57586: EMPTY
57587: ST_TO_ADDR
// case d of 0 :
57588: LD_VAR 0 3
57592: PUSH
57593: LD_INT 0
57595: DOUBLE
57596: EQUAL
57597: IFTRUE 57601
57599: GO 57734
57601: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
57602: LD_ADDR_VAR 0 5
57606: PUSH
57607: LD_VAR 0 1
57611: PUSH
57612: LD_INT 4
57614: MINUS
57615: PUSH
57616: LD_VAR 0 2
57620: PUSH
57621: LD_INT 4
57623: MINUS
57624: PUSH
57625: LD_INT 2
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: LIST
57632: PUSH
57633: LD_VAR 0 1
57637: PUSH
57638: LD_INT 3
57640: MINUS
57641: PUSH
57642: LD_VAR 0 2
57646: PUSH
57647: LD_INT 1
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: LIST
57654: PUSH
57655: LD_VAR 0 1
57659: PUSH
57660: LD_INT 4
57662: PLUS
57663: PUSH
57664: LD_VAR 0 2
57668: PUSH
57669: LD_INT 4
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: LIST
57676: PUSH
57677: LD_VAR 0 1
57681: PUSH
57682: LD_INT 3
57684: PLUS
57685: PUSH
57686: LD_VAR 0 2
57690: PUSH
57691: LD_INT 3
57693: PLUS
57694: PUSH
57695: LD_INT 5
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: LIST
57702: PUSH
57703: LD_VAR 0 1
57707: PUSH
57708: LD_VAR 0 2
57712: PUSH
57713: LD_INT 4
57715: PLUS
57716: PUSH
57717: LD_INT 0
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: LIST
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: ST_TO_ADDR
// end ; 1 :
57732: GO 58432
57734: LD_INT 1
57736: DOUBLE
57737: EQUAL
57738: IFTRUE 57742
57740: GO 57875
57742: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
57743: LD_ADDR_VAR 0 5
57747: PUSH
57748: LD_VAR 0 1
57752: PUSH
57753: LD_VAR 0 2
57757: PUSH
57758: LD_INT 4
57760: MINUS
57761: PUSH
57762: LD_INT 3
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: LIST
57769: PUSH
57770: LD_VAR 0 1
57774: PUSH
57775: LD_INT 3
57777: MINUS
57778: PUSH
57779: LD_VAR 0 2
57783: PUSH
57784: LD_INT 3
57786: MINUS
57787: PUSH
57788: LD_INT 2
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: LIST
57795: PUSH
57796: LD_VAR 0 1
57800: PUSH
57801: LD_INT 4
57803: MINUS
57804: PUSH
57805: LD_VAR 0 2
57809: PUSH
57810: LD_INT 1
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: LIST
57817: PUSH
57818: LD_VAR 0 1
57822: PUSH
57823: LD_VAR 0 2
57827: PUSH
57828: LD_INT 3
57830: PLUS
57831: PUSH
57832: LD_INT 0
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: LIST
57839: PUSH
57840: LD_VAR 0 1
57844: PUSH
57845: LD_INT 4
57847: PLUS
57848: PUSH
57849: LD_VAR 0 2
57853: PUSH
57854: LD_INT 4
57856: PLUS
57857: PUSH
57858: LD_INT 5
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: LIST
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: ST_TO_ADDR
// end ; 2 :
57873: GO 58432
57875: LD_INT 2
57877: DOUBLE
57878: EQUAL
57879: IFTRUE 57883
57881: GO 58012
57883: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57884: LD_ADDR_VAR 0 5
57888: PUSH
57889: LD_VAR 0 1
57893: PUSH
57894: LD_VAR 0 2
57898: PUSH
57899: LD_INT 3
57901: MINUS
57902: PUSH
57903: LD_INT 3
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: LIST
57910: PUSH
57911: LD_VAR 0 1
57915: PUSH
57916: LD_INT 4
57918: PLUS
57919: PUSH
57920: LD_VAR 0 2
57924: PUSH
57925: LD_INT 4
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: LIST
57932: PUSH
57933: LD_VAR 0 1
57937: PUSH
57938: LD_VAR 0 2
57942: PUSH
57943: LD_INT 4
57945: PLUS
57946: PUSH
57947: LD_INT 0
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: LIST
57954: PUSH
57955: LD_VAR 0 1
57959: PUSH
57960: LD_INT 3
57962: MINUS
57963: PUSH
57964: LD_VAR 0 2
57968: PUSH
57969: LD_INT 1
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: LIST
57976: PUSH
57977: LD_VAR 0 1
57981: PUSH
57982: LD_INT 4
57984: MINUS
57985: PUSH
57986: LD_VAR 0 2
57990: PUSH
57991: LD_INT 4
57993: MINUS
57994: PUSH
57995: LD_INT 2
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: LIST
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: ST_TO_ADDR
// end ; 3 :
58010: GO 58432
58012: LD_INT 3
58014: DOUBLE
58015: EQUAL
58016: IFTRUE 58020
58018: GO 58153
58020: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
58021: LD_ADDR_VAR 0 5
58025: PUSH
58026: LD_VAR 0 1
58030: PUSH
58031: LD_INT 3
58033: PLUS
58034: PUSH
58035: LD_VAR 0 2
58039: PUSH
58040: LD_INT 4
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: LIST
58047: PUSH
58048: LD_VAR 0 1
58052: PUSH
58053: LD_INT 4
58055: PLUS
58056: PUSH
58057: LD_VAR 0 2
58061: PUSH
58062: LD_INT 4
58064: PLUS
58065: PUSH
58066: LD_INT 5
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: LIST
58073: PUSH
58074: LD_VAR 0 1
58078: PUSH
58079: LD_INT 4
58081: MINUS
58082: PUSH
58083: LD_VAR 0 2
58087: PUSH
58088: LD_INT 1
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: LIST
58095: PUSH
58096: LD_VAR 0 1
58100: PUSH
58101: LD_VAR 0 2
58105: PUSH
58106: LD_INT 4
58108: MINUS
58109: PUSH
58110: LD_INT 3
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: LIST
58117: PUSH
58118: LD_VAR 0 1
58122: PUSH
58123: LD_INT 3
58125: MINUS
58126: PUSH
58127: LD_VAR 0 2
58131: PUSH
58132: LD_INT 3
58134: MINUS
58135: PUSH
58136: LD_INT 2
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: LIST
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: ST_TO_ADDR
// end ; 4 :
58151: GO 58432
58153: LD_INT 4
58155: DOUBLE
58156: EQUAL
58157: IFTRUE 58161
58159: GO 58294
58161: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
58162: LD_ADDR_VAR 0 5
58166: PUSH
58167: LD_VAR 0 1
58171: PUSH
58172: LD_VAR 0 2
58176: PUSH
58177: LD_INT 4
58179: PLUS
58180: PUSH
58181: LD_INT 0
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: LIST
58188: PUSH
58189: LD_VAR 0 1
58193: PUSH
58194: LD_INT 3
58196: PLUS
58197: PUSH
58198: LD_VAR 0 2
58202: PUSH
58203: LD_INT 3
58205: PLUS
58206: PUSH
58207: LD_INT 5
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: LIST
58214: PUSH
58215: LD_VAR 0 1
58219: PUSH
58220: LD_INT 4
58222: PLUS
58223: PUSH
58224: LD_VAR 0 2
58228: PUSH
58229: LD_INT 4
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: LIST
58236: PUSH
58237: LD_VAR 0 1
58241: PUSH
58242: LD_VAR 0 2
58246: PUSH
58247: LD_INT 3
58249: MINUS
58250: PUSH
58251: LD_INT 3
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: LIST
58258: PUSH
58259: LD_VAR 0 1
58263: PUSH
58264: LD_INT 4
58266: MINUS
58267: PUSH
58268: LD_VAR 0 2
58272: PUSH
58273: LD_INT 4
58275: MINUS
58276: PUSH
58277: LD_INT 2
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: LIST
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: ST_TO_ADDR
// end ; 5 :
58292: GO 58432
58294: LD_INT 5
58296: DOUBLE
58297: EQUAL
58298: IFTRUE 58302
58300: GO 58431
58302: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
58303: LD_ADDR_VAR 0 5
58307: PUSH
58308: LD_VAR 0 1
58312: PUSH
58313: LD_INT 4
58315: MINUS
58316: PUSH
58317: LD_VAR 0 2
58321: PUSH
58322: LD_INT 1
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: LIST
58329: PUSH
58330: LD_VAR 0 1
58334: PUSH
58335: LD_VAR 0 2
58339: PUSH
58340: LD_INT 4
58342: MINUS
58343: PUSH
58344: LD_INT 3
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: LIST
58351: PUSH
58352: LD_VAR 0 1
58356: PUSH
58357: LD_INT 4
58359: PLUS
58360: PUSH
58361: LD_VAR 0 2
58365: PUSH
58366: LD_INT 4
58368: PLUS
58369: PUSH
58370: LD_INT 5
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: LIST
58377: PUSH
58378: LD_VAR 0 1
58382: PUSH
58383: LD_INT 3
58385: PLUS
58386: PUSH
58387: LD_VAR 0 2
58391: PUSH
58392: LD_INT 4
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: LIST
58399: PUSH
58400: LD_VAR 0 1
58404: PUSH
58405: LD_VAR 0 2
58409: PUSH
58410: LD_INT 3
58412: PLUS
58413: PUSH
58414: LD_INT 0
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: LIST
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: ST_TO_ADDR
// end ; end ;
58429: GO 58432
58431: POP
// result := list ;
58432: LD_ADDR_VAR 0 4
58436: PUSH
58437: LD_VAR 0 5
58441: ST_TO_ADDR
// end ;
58442: LD_VAR 0 4
58446: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
58447: LD_INT 0
58449: PPUSH
58450: PPUSH
58451: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
58452: LD_VAR 0 1
58456: NOT
58457: IFTRUE 58485
58459: PUSH
58460: LD_VAR 0 2
58464: PUSH
58465: LD_INT 1
58467: PUSH
58468: LD_INT 2
58470: PUSH
58471: LD_INT 3
58473: PUSH
58474: LD_INT 4
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: IN
58483: NOT
58484: OR
58485: IFFALSE 58489
// exit ;
58487: GO 58572
// tmp := [ ] ;
58489: LD_ADDR_VAR 0 5
58493: PUSH
58494: EMPTY
58495: ST_TO_ADDR
// for i in units do
58496: LD_ADDR_VAR 0 4
58500: PUSH
58501: LD_VAR 0 1
58505: PUSH
58506: FOR_IN
58507: IFFALSE 58541
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
58509: LD_ADDR_VAR 0 5
58513: PUSH
58514: LD_VAR 0 5
58518: PPUSH
58519: LD_VAR 0 4
58523: PPUSH
58524: LD_VAR 0 2
58528: PPUSH
58529: CALL_OW 259
58533: PPUSH
58534: CALL 59967 0 2
58538: ST_TO_ADDR
58539: GO 58506
58541: POP
58542: POP
// if not tmp then
58543: LD_VAR 0 5
58547: NOT
58548: IFFALSE 58552
// exit ;
58550: GO 58572
// result := SortListByListDesc ( units , tmp ) ;
58552: LD_ADDR_VAR 0 3
58556: PUSH
58557: LD_VAR 0 1
58561: PPUSH
58562: LD_VAR 0 5
58566: PPUSH
58567: CALL_OW 77
58571: ST_TO_ADDR
// end ;
58572: LD_VAR 0 3
58576: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
58577: LD_INT 0
58579: PPUSH
58580: PPUSH
58581: PPUSH
// result := false ;
58582: LD_ADDR_VAR 0 3
58586: PUSH
58587: LD_INT 0
58589: ST_TO_ADDR
// if not building then
58590: LD_VAR 0 2
58594: NOT
58595: IFFALSE 58599
// exit ;
58597: GO 58743
// x := GetX ( building ) ;
58599: LD_ADDR_VAR 0 4
58603: PUSH
58604: LD_VAR 0 2
58608: PPUSH
58609: CALL_OW 250
58613: ST_TO_ADDR
// y := GetY ( building ) ;
58614: LD_ADDR_VAR 0 5
58618: PUSH
58619: LD_VAR 0 2
58623: PPUSH
58624: CALL_OW 251
58628: ST_TO_ADDR
// if not x or not y then
58629: LD_VAR 0 4
58633: NOT
58634: IFTRUE 58643
58636: PUSH
58637: LD_VAR 0 5
58641: NOT
58642: OR
58643: IFFALSE 58647
// exit ;
58645: GO 58743
// if GetTaskList ( unit ) then
58647: LD_VAR 0 1
58651: PPUSH
58652: CALL_OW 437
58656: IFFALSE 58743
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58658: LD_STRING e
58660: PUSH
58661: LD_VAR 0 1
58665: PPUSH
58666: CALL_OW 437
58670: PUSH
58671: LD_INT 1
58673: ARRAY
58674: PUSH
58675: LD_INT 1
58677: ARRAY
58678: EQUAL
58679: IFFALSE 58706
58681: PUSH
58682: LD_VAR 0 4
58686: PUSH
58687: LD_VAR 0 1
58691: PPUSH
58692: CALL_OW 437
58696: PUSH
58697: LD_INT 1
58699: ARRAY
58700: PUSH
58701: LD_INT 2
58703: ARRAY
58704: EQUAL
58705: AND
58706: IFFALSE 58733
58708: PUSH
58709: LD_VAR 0 5
58713: PUSH
58714: LD_VAR 0 1
58718: PPUSH
58719: CALL_OW 437
58723: PUSH
58724: LD_INT 1
58726: ARRAY
58727: PUSH
58728: LD_INT 3
58730: ARRAY
58731: EQUAL
58732: AND
58733: IFFALSE 58743
// result := true end ;
58735: LD_ADDR_VAR 0 3
58739: PUSH
58740: LD_INT 1
58742: ST_TO_ADDR
// end ;
58743: LD_VAR 0 3
58747: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
58748: LD_INT 0
58750: PPUSH
// result := false ;
58751: LD_ADDR_VAR 0 4
58755: PUSH
58756: LD_INT 0
58758: ST_TO_ADDR
// if GetTaskList ( unit ) then
58759: LD_VAR 0 1
58763: PPUSH
58764: CALL_OW 437
58768: IFFALSE 58855
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58770: LD_STRING M
58772: PUSH
58773: LD_VAR 0 1
58777: PPUSH
58778: CALL_OW 437
58782: PUSH
58783: LD_INT 1
58785: ARRAY
58786: PUSH
58787: LD_INT 1
58789: ARRAY
58790: EQUAL
58791: IFFALSE 58818
58793: PUSH
58794: LD_VAR 0 2
58798: PUSH
58799: LD_VAR 0 1
58803: PPUSH
58804: CALL_OW 437
58808: PUSH
58809: LD_INT 1
58811: ARRAY
58812: PUSH
58813: LD_INT 2
58815: ARRAY
58816: EQUAL
58817: AND
58818: IFFALSE 58845
58820: PUSH
58821: LD_VAR 0 3
58825: PUSH
58826: LD_VAR 0 1
58830: PPUSH
58831: CALL_OW 437
58835: PUSH
58836: LD_INT 1
58838: ARRAY
58839: PUSH
58840: LD_INT 3
58842: ARRAY
58843: EQUAL
58844: AND
58845: IFFALSE 58855
// result := true ;
58847: LD_ADDR_VAR 0 4
58851: PUSH
58852: LD_INT 1
58854: ST_TO_ADDR
// end ; end ;
58855: LD_VAR 0 4
58859: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58860: LD_INT 0
58862: PPUSH
58863: PPUSH
58864: PPUSH
58865: PPUSH
// if not unit or not area then
58866: LD_VAR 0 1
58870: NOT
58871: IFTRUE 58880
58873: PUSH
58874: LD_VAR 0 2
58878: NOT
58879: OR
58880: IFFALSE 58884
// exit ;
58882: GO 59060
// tmp := AreaToList ( area , i ) ;
58884: LD_ADDR_VAR 0 6
58888: PUSH
58889: LD_VAR 0 2
58893: PPUSH
58894: LD_VAR 0 5
58898: PPUSH
58899: CALL_OW 517
58903: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58904: LD_ADDR_VAR 0 5
58908: PUSH
58909: DOUBLE
58910: LD_INT 1
58912: DEC
58913: ST_TO_ADDR
58914: LD_VAR 0 6
58918: PUSH
58919: LD_INT 1
58921: ARRAY
58922: PUSH
58923: FOR_TO
58924: IFFALSE 59058
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58926: LD_ADDR_VAR 0 7
58930: PUSH
58931: LD_VAR 0 6
58935: PUSH
58936: LD_INT 1
58938: ARRAY
58939: PUSH
58940: LD_VAR 0 5
58944: ARRAY
58945: PUSH
58946: LD_VAR 0 6
58950: PUSH
58951: LD_INT 2
58953: ARRAY
58954: PUSH
58955: LD_VAR 0 5
58959: ARRAY
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
58965: LD_INT 92
58967: PUSH
58968: LD_VAR 0 7
58972: PUSH
58973: LD_INT 1
58975: ARRAY
58976: PUSH
58977: LD_VAR 0 7
58981: PUSH
58982: LD_INT 2
58984: ARRAY
58985: PUSH
58986: LD_INT 2
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: PPUSH
58995: CALL_OW 69
58999: PUSH
59000: LD_INT 0
59002: EQUAL
59003: IFFALSE 59056
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
59005: LD_VAR 0 1
59009: PPUSH
59010: LD_VAR 0 7
59014: PUSH
59015: LD_INT 1
59017: ARRAY
59018: PPUSH
59019: LD_VAR 0 7
59023: PUSH
59024: LD_INT 2
59026: ARRAY
59027: PPUSH
59028: LD_VAR 0 3
59032: PPUSH
59033: CALL_OW 48
// result := IsPlaced ( unit ) ;
59037: LD_ADDR_VAR 0 4
59041: PUSH
59042: LD_VAR 0 1
59046: PPUSH
59047: CALL_OW 305
59051: ST_TO_ADDR
// exit ;
59052: POP
59053: POP
59054: GO 59060
// end ; end ;
59056: GO 58923
59058: POP
59059: POP
// end ;
59060: LD_VAR 0 4
59064: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
59065: LD_INT 0
59067: PPUSH
59068: PPUSH
59069: PPUSH
// if not side or side > 8 then
59070: LD_VAR 0 1
59074: NOT
59075: IFTRUE 59087
59077: PUSH
59078: LD_VAR 0 1
59082: PUSH
59083: LD_INT 8
59085: GREATER
59086: OR
59087: IFFALSE 59091
// exit ;
59089: GO 59278
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
59091: LD_ADDR_VAR 0 4
59095: PUSH
59096: LD_INT 22
59098: PUSH
59099: LD_VAR 0 1
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 21
59110: PUSH
59111: LD_INT 3
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PPUSH
59122: CALL_OW 69
59126: ST_TO_ADDR
// if not tmp then
59127: LD_VAR 0 4
59131: NOT
59132: IFFALSE 59136
// exit ;
59134: GO 59278
// enable_addtolog := true ;
59136: LD_ADDR_OWVAR 81
59140: PUSH
59141: LD_INT 1
59143: ST_TO_ADDR
// AddToLog ( [ ) ;
59144: LD_STRING [
59146: PPUSH
59147: CALL_OW 561
// for i in tmp do
59151: LD_ADDR_VAR 0 3
59155: PUSH
59156: LD_VAR 0 4
59160: PUSH
59161: FOR_IN
59162: IFFALSE 59269
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
59164: LD_STRING [
59166: PUSH
59167: LD_VAR 0 3
59171: PPUSH
59172: CALL_OW 266
59176: STR
59177: PUSH
59178: LD_STRING , 
59180: STR
59181: PUSH
59182: LD_VAR 0 3
59186: PPUSH
59187: CALL_OW 250
59191: STR
59192: PUSH
59193: LD_STRING , 
59195: STR
59196: PUSH
59197: LD_VAR 0 3
59201: PPUSH
59202: CALL_OW 251
59206: STR
59207: PUSH
59208: LD_STRING , 
59210: STR
59211: PUSH
59212: LD_VAR 0 3
59216: PPUSH
59217: CALL_OW 254
59221: STR
59222: PUSH
59223: LD_STRING , 
59225: STR
59226: PUSH
59227: LD_VAR 0 3
59231: PPUSH
59232: LD_INT 1
59234: PPUSH
59235: CALL_OW 268
59239: STR
59240: PUSH
59241: LD_STRING , 
59243: STR
59244: PUSH
59245: LD_VAR 0 3
59249: PPUSH
59250: LD_INT 2
59252: PPUSH
59253: CALL_OW 268
59257: STR
59258: PUSH
59259: LD_STRING ],
59261: STR
59262: PPUSH
59263: CALL_OW 561
// end ;
59267: GO 59161
59269: POP
59270: POP
// AddToLog ( ]; ) ;
59271: LD_STRING ];
59273: PPUSH
59274: CALL_OW 561
// end ;
59278: LD_VAR 0 2
59282: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
59283: LD_INT 0
59285: PPUSH
59286: PPUSH
59287: PPUSH
59288: PPUSH
59289: PPUSH
// if not area or not rate or not max then
59290: LD_VAR 0 1
59294: NOT
59295: IFTRUE 59304
59297: PUSH
59298: LD_VAR 0 2
59302: NOT
59303: OR
59304: IFTRUE 59313
59306: PUSH
59307: LD_VAR 0 4
59311: NOT
59312: OR
59313: IFFALSE 59317
// exit ;
59315: GO 59506
// while 1 do
59317: LD_INT 1
59319: IFFALSE 59506
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
59321: LD_ADDR_VAR 0 9
59325: PUSH
59326: LD_VAR 0 1
59330: PPUSH
59331: LD_INT 1
59333: PPUSH
59334: CALL_OW 287
59338: PUSH
59339: LD_INT 10
59341: MUL
59342: ST_TO_ADDR
// r := rate / 10 ;
59343: LD_ADDR_VAR 0 7
59347: PUSH
59348: LD_VAR 0 2
59352: PUSH
59353: LD_INT 10
59355: DIVREAL
59356: ST_TO_ADDR
// time := 1 1$00 ;
59357: LD_ADDR_VAR 0 8
59361: PUSH
59362: LD_INT 2100
59364: ST_TO_ADDR
// if amount < min then
59365: LD_VAR 0 9
59369: PUSH
59370: LD_VAR 0 3
59374: LESS
59375: IFFALSE 59393
// r := r * 2 else
59377: LD_ADDR_VAR 0 7
59381: PUSH
59382: LD_VAR 0 7
59386: PUSH
59387: LD_INT 2
59389: MUL
59390: ST_TO_ADDR
59391: GO 59419
// if amount > max then
59393: LD_VAR 0 9
59397: PUSH
59398: LD_VAR 0 4
59402: GREATER
59403: IFFALSE 59419
// r := r / 2 ;
59405: LD_ADDR_VAR 0 7
59409: PUSH
59410: LD_VAR 0 7
59414: PUSH
59415: LD_INT 2
59417: DIVREAL
59418: ST_TO_ADDR
// time := time / r ;
59419: LD_ADDR_VAR 0 8
59423: PUSH
59424: LD_VAR 0 8
59428: PUSH
59429: LD_VAR 0 7
59433: DIVREAL
59434: ST_TO_ADDR
// if time < 0 then
59435: LD_VAR 0 8
59439: PUSH
59440: LD_INT 0
59442: LESS
59443: IFFALSE 59460
// time := time * - 1 ;
59445: LD_ADDR_VAR 0 8
59449: PUSH
59450: LD_VAR 0 8
59454: PUSH
59455: LD_INT 1
59457: NEG
59458: MUL
59459: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
59460: LD_VAR 0 8
59464: PUSH
59465: LD_INT 35
59467: PPUSH
59468: LD_INT 875
59470: PPUSH
59471: CALL_OW 12
59475: PLUS
59476: PPUSH
59477: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
59481: LD_INT 1
59483: PPUSH
59484: LD_INT 5
59486: PPUSH
59487: CALL_OW 12
59491: PPUSH
59492: LD_VAR 0 1
59496: PPUSH
59497: LD_INT 1
59499: PPUSH
59500: CALL_OW 55
// end ;
59504: GO 59317
// end ;
59506: LD_VAR 0 5
59510: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
59511: LD_INT 0
59513: PPUSH
59514: PPUSH
59515: PPUSH
59516: PPUSH
59517: PPUSH
59518: PPUSH
59519: PPUSH
59520: PPUSH
// if not turrets or not factories then
59521: LD_VAR 0 1
59525: NOT
59526: IFTRUE 59535
59528: PUSH
59529: LD_VAR 0 2
59533: NOT
59534: OR
59535: IFFALSE 59539
// exit ;
59537: GO 59846
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
59539: LD_ADDR_VAR 0 10
59543: PUSH
59544: LD_INT 5
59546: PUSH
59547: LD_INT 6
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 2
59556: PUSH
59557: LD_INT 4
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 3
59566: PUSH
59567: LD_INT 5
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 24
59581: PUSH
59582: LD_INT 25
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 23
59591: PUSH
59592: LD_INT 27
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 42
59605: PUSH
59606: LD_INT 43
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 44
59615: PUSH
59616: LD_INT 46
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 45
59625: PUSH
59626: LD_INT 47
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: LIST
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: LIST
59642: ST_TO_ADDR
// result := [ ] ;
59643: LD_ADDR_VAR 0 3
59647: PUSH
59648: EMPTY
59649: ST_TO_ADDR
// for i in turrets do
59650: LD_ADDR_VAR 0 4
59654: PUSH
59655: LD_VAR 0 1
59659: PUSH
59660: FOR_IN
59661: IFFALSE 59844
// begin nat := GetNation ( i ) ;
59663: LD_ADDR_VAR 0 7
59667: PUSH
59668: LD_VAR 0 4
59672: PPUSH
59673: CALL_OW 248
59677: ST_TO_ADDR
// weapon := 0 ;
59678: LD_ADDR_VAR 0 8
59682: PUSH
59683: LD_INT 0
59685: ST_TO_ADDR
// if not nat then
59686: LD_VAR 0 7
59690: NOT
59691: IFFALSE 59695
// continue ;
59693: GO 59660
// for j in list [ nat ] do
59695: LD_ADDR_VAR 0 5
59699: PUSH
59700: LD_VAR 0 10
59704: PUSH
59705: LD_VAR 0 7
59709: ARRAY
59710: PUSH
59711: FOR_IN
59712: IFFALSE 59753
// if GetBWeapon ( i ) = j [ 1 ] then
59714: LD_VAR 0 4
59718: PPUSH
59719: CALL_OW 269
59723: PUSH
59724: LD_VAR 0 5
59728: PUSH
59729: LD_INT 1
59731: ARRAY
59732: EQUAL
59733: IFFALSE 59751
// begin weapon := j [ 2 ] ;
59735: LD_ADDR_VAR 0 8
59739: PUSH
59740: LD_VAR 0 5
59744: PUSH
59745: LD_INT 2
59747: ARRAY
59748: ST_TO_ADDR
// break ;
59749: GO 59753
// end ;
59751: GO 59711
59753: POP
59754: POP
// if not weapon then
59755: LD_VAR 0 8
59759: NOT
59760: IFFALSE 59764
// continue ;
59762: GO 59660
// for k in factories do
59764: LD_ADDR_VAR 0 6
59768: PUSH
59769: LD_VAR 0 2
59773: PUSH
59774: FOR_IN
59775: IFFALSE 59840
// begin weapons := AvailableWeaponList ( k ) ;
59777: LD_ADDR_VAR 0 9
59781: PUSH
59782: LD_VAR 0 6
59786: PPUSH
59787: CALL_OW 478
59791: ST_TO_ADDR
// if not weapons then
59792: LD_VAR 0 9
59796: NOT
59797: IFFALSE 59801
// continue ;
59799: GO 59774
// if weapon in weapons then
59801: LD_VAR 0 8
59805: PUSH
59806: LD_VAR 0 9
59810: IN
59811: IFFALSE 59838
// begin result := [ i , weapon ] ;
59813: LD_ADDR_VAR 0 3
59817: PUSH
59818: LD_VAR 0 4
59822: PUSH
59823: LD_VAR 0 8
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: ST_TO_ADDR
// exit ;
59832: POP
59833: POP
59834: POP
59835: POP
59836: GO 59846
// end ; end ;
59838: GO 59774
59840: POP
59841: POP
// end ;
59842: GO 59660
59844: POP
59845: POP
// end ;
59846: LD_VAR 0 3
59850: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59851: LD_INT 0
59853: PPUSH
// if not side or side > 8 then
59854: LD_VAR 0 3
59858: NOT
59859: IFTRUE 59871
59861: PUSH
59862: LD_VAR 0 3
59866: PUSH
59867: LD_INT 8
59869: GREATER
59870: OR
59871: IFFALSE 59875
// exit ;
59873: GO 59934
// if not range then
59875: LD_VAR 0 4
59879: NOT
59880: IFFALSE 59891
// range := - 12 ;
59882: LD_ADDR_VAR 0 4
59886: PUSH
59887: LD_INT 12
59889: NEG
59890: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59891: LD_VAR 0 1
59895: PPUSH
59896: LD_VAR 0 2
59900: PPUSH
59901: LD_VAR 0 3
59905: PPUSH
59906: LD_VAR 0 4
59910: PPUSH
59911: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59915: LD_VAR 0 1
59919: PPUSH
59920: LD_VAR 0 2
59924: PPUSH
59925: LD_VAR 0 3
59929: PPUSH
59930: CALL_OW 331
// end ;
59934: LD_VAR 0 5
59938: RET
// export function Video ( mode ) ; begin
59939: LD_INT 0
59941: PPUSH
// ingame_video = mode ;
59942: LD_ADDR_OWVAR 52
59946: PUSH
59947: LD_VAR 0 1
59951: ST_TO_ADDR
// interface_hidden = mode ;
59952: LD_ADDR_OWVAR 54
59956: PUSH
59957: LD_VAR 0 1
59961: ST_TO_ADDR
// end ;
59962: LD_VAR 0 2
59966: RET
// export function Join ( array , element ) ; begin
59967: LD_INT 0
59969: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59970: LD_ADDR_VAR 0 3
59974: PUSH
59975: LD_VAR 0 1
59979: PPUSH
59980: LD_VAR 0 1
59984: PUSH
59985: LD_INT 1
59987: PLUS
59988: PPUSH
59989: LD_VAR 0 2
59993: PPUSH
59994: CALL_OW 1
59998: ST_TO_ADDR
// end ;
59999: LD_VAR 0 3
60003: RET
// export function JoinUnion ( array , element ) ; begin
60004: LD_INT 0
60006: PPUSH
// result := array union element ;
60007: LD_ADDR_VAR 0 3
60011: PUSH
60012: LD_VAR 0 1
60016: PUSH
60017: LD_VAR 0 2
60021: UNION
60022: ST_TO_ADDR
// end ;
60023: LD_VAR 0 3
60027: RET
// export function GetBehemoths ( side ) ; begin
60028: LD_INT 0
60030: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
60031: LD_ADDR_VAR 0 2
60035: PUSH
60036: LD_INT 22
60038: PUSH
60039: LD_VAR 0 1
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 31
60050: PUSH
60051: LD_INT 25
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PPUSH
60062: CALL_OW 69
60066: ST_TO_ADDR
// end ;
60067: LD_VAR 0 2
60071: RET
// export function Shuffle ( array ) ; var i , index ; begin
60072: LD_INT 0
60074: PPUSH
60075: PPUSH
60076: PPUSH
// result := [ ] ;
60077: LD_ADDR_VAR 0 2
60081: PUSH
60082: EMPTY
60083: ST_TO_ADDR
// if not array then
60084: LD_VAR 0 1
60088: NOT
60089: IFFALSE 60093
// exit ;
60091: GO 60192
// Randomize ;
60093: CALL_OW 10
// for i = array downto 1 do
60097: LD_ADDR_VAR 0 3
60101: PUSH
60102: DOUBLE
60103: LD_VAR 0 1
60107: INC
60108: ST_TO_ADDR
60109: LD_INT 1
60111: PUSH
60112: FOR_DOWNTO
60113: IFFALSE 60190
// begin index := rand ( 1 , array ) ;
60115: LD_ADDR_VAR 0 4
60119: PUSH
60120: LD_INT 1
60122: PPUSH
60123: LD_VAR 0 1
60127: PPUSH
60128: CALL_OW 12
60132: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
60133: LD_ADDR_VAR 0 2
60137: PUSH
60138: LD_VAR 0 2
60142: PPUSH
60143: LD_VAR 0 2
60147: PUSH
60148: LD_INT 1
60150: PLUS
60151: PPUSH
60152: LD_VAR 0 1
60156: PUSH
60157: LD_VAR 0 4
60161: ARRAY
60162: PPUSH
60163: CALL_OW 2
60167: ST_TO_ADDR
// array := Delete ( array , index ) ;
60168: LD_ADDR_VAR 0 1
60172: PUSH
60173: LD_VAR 0 1
60177: PPUSH
60178: LD_VAR 0 4
60182: PPUSH
60183: CALL_OW 3
60187: ST_TO_ADDR
// end ;
60188: GO 60112
60190: POP
60191: POP
// end ;
60192: LD_VAR 0 2
60196: RET
// export function GetBaseMaterials ( base ) ; begin
60197: LD_INT 0
60199: PPUSH
// result := [ 0 , 0 , 0 ] ;
60200: LD_ADDR_VAR 0 2
60204: PUSH
60205: LD_INT 0
60207: PUSH
60208: LD_INT 0
60210: PUSH
60211: LD_INT 0
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: LIST
60218: ST_TO_ADDR
// if not base then
60219: LD_VAR 0 1
60223: NOT
60224: IFFALSE 60228
// exit ;
60226: GO 60277
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
60228: LD_ADDR_VAR 0 2
60232: PUSH
60233: LD_VAR 0 1
60237: PPUSH
60238: LD_INT 1
60240: PPUSH
60241: CALL_OW 275
60245: PUSH
60246: LD_VAR 0 1
60250: PPUSH
60251: LD_INT 2
60253: PPUSH
60254: CALL_OW 275
60258: PUSH
60259: LD_VAR 0 1
60263: PPUSH
60264: LD_INT 3
60266: PPUSH
60267: CALL_OW 275
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: LIST
60276: ST_TO_ADDR
// end ;
60277: LD_VAR 0 2
60281: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
60282: LD_INT 0
60284: PPUSH
60285: PPUSH
// result := array ;
60286: LD_ADDR_VAR 0 3
60290: PUSH
60291: LD_VAR 0 1
60295: ST_TO_ADDR
// if size >= result then
60296: LD_VAR 0 2
60300: PUSH
60301: LD_VAR 0 3
60305: GREATEREQUAL
60306: IFFALSE 60310
// exit ;
60308: GO 60360
// if size then
60310: LD_VAR 0 2
60314: IFFALSE 60360
// for i := array downto size do
60316: LD_ADDR_VAR 0 4
60320: PUSH
60321: DOUBLE
60322: LD_VAR 0 1
60326: INC
60327: ST_TO_ADDR
60328: LD_VAR 0 2
60332: PUSH
60333: FOR_DOWNTO
60334: IFFALSE 60358
// result := Delete ( result , result ) ;
60336: LD_ADDR_VAR 0 3
60340: PUSH
60341: LD_VAR 0 3
60345: PPUSH
60346: LD_VAR 0 3
60350: PPUSH
60351: CALL_OW 3
60355: ST_TO_ADDR
60356: GO 60333
60358: POP
60359: POP
// end ;
60360: LD_VAR 0 3
60364: RET
// export function ComExit ( unit ) ; var tmp ; begin
60365: LD_INT 0
60367: PPUSH
60368: PPUSH
// if not IsInUnit ( unit ) then
60369: LD_VAR 0 1
60373: PPUSH
60374: CALL_OW 310
60378: NOT
60379: IFFALSE 60383
// exit ;
60381: GO 60443
// tmp := IsInUnit ( unit ) ;
60383: LD_ADDR_VAR 0 3
60387: PUSH
60388: LD_VAR 0 1
60392: PPUSH
60393: CALL_OW 310
60397: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
60398: LD_VAR 0 3
60402: PPUSH
60403: CALL_OW 247
60407: PUSH
60408: LD_INT 2
60410: EQUAL
60411: IFFALSE 60424
// ComExitVehicle ( unit ) else
60413: LD_VAR 0 1
60417: PPUSH
60418: CALL_OW 121
60422: GO 60433
// ComExitBuilding ( unit ) ;
60424: LD_VAR 0 1
60428: PPUSH
60429: CALL_OW 122
// result := tmp ;
60433: LD_ADDR_VAR 0 2
60437: PUSH
60438: LD_VAR 0 3
60442: ST_TO_ADDR
// end ;
60443: LD_VAR 0 2
60447: RET
// export function ComExitAll ( units ) ; var i ; begin
60448: LD_INT 0
60450: PPUSH
60451: PPUSH
// if not units then
60452: LD_VAR 0 1
60456: NOT
60457: IFFALSE 60461
// exit ;
60459: GO 60487
// for i in units do
60461: LD_ADDR_VAR 0 3
60465: PUSH
60466: LD_VAR 0 1
60470: PUSH
60471: FOR_IN
60472: IFFALSE 60485
// ComExit ( i ) ;
60474: LD_VAR 0 3
60478: PPUSH
60479: CALL 60365 0 1
60483: GO 60471
60485: POP
60486: POP
// end ;
60487: LD_VAR 0 2
60491: RET
// export function ResetHc ; begin
60492: LD_INT 0
60494: PPUSH
// InitHc ;
60495: CALL_OW 19
// hc_importance := 0 ;
60499: LD_ADDR_OWVAR 32
60503: PUSH
60504: LD_INT 0
60506: ST_TO_ADDR
// end ;
60507: LD_VAR 0 1
60511: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
60512: LD_INT 0
60514: PPUSH
60515: PPUSH
60516: PPUSH
// _x := ( x1 + x2 ) div 2 ;
60517: LD_ADDR_VAR 0 6
60521: PUSH
60522: LD_VAR 0 1
60526: PUSH
60527: LD_VAR 0 3
60531: PLUS
60532: PUSH
60533: LD_INT 2
60535: DIV
60536: ST_TO_ADDR
// if _x < 0 then
60537: LD_VAR 0 6
60541: PUSH
60542: LD_INT 0
60544: LESS
60545: IFFALSE 60562
// _x := _x * - 1 ;
60547: LD_ADDR_VAR 0 6
60551: PUSH
60552: LD_VAR 0 6
60556: PUSH
60557: LD_INT 1
60559: NEG
60560: MUL
60561: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
60562: LD_ADDR_VAR 0 7
60566: PUSH
60567: LD_VAR 0 2
60571: PUSH
60572: LD_VAR 0 4
60576: PLUS
60577: PUSH
60578: LD_INT 2
60580: DIV
60581: ST_TO_ADDR
// if _y < 0 then
60582: LD_VAR 0 7
60586: PUSH
60587: LD_INT 0
60589: LESS
60590: IFFALSE 60607
// _y := _y * - 1 ;
60592: LD_ADDR_VAR 0 7
60596: PUSH
60597: LD_VAR 0 7
60601: PUSH
60602: LD_INT 1
60604: NEG
60605: MUL
60606: ST_TO_ADDR
// result := [ _x , _y ] ;
60607: LD_ADDR_VAR 0 5
60611: PUSH
60612: LD_VAR 0 6
60616: PUSH
60617: LD_VAR 0 7
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: ST_TO_ADDR
// end ;
60626: LD_VAR 0 5
60630: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
60631: LD_INT 0
60633: PPUSH
60634: PPUSH
60635: PPUSH
60636: PPUSH
// task := GetTaskList ( unit ) ;
60637: LD_ADDR_VAR 0 7
60641: PUSH
60642: LD_VAR 0 1
60646: PPUSH
60647: CALL_OW 437
60651: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
60652: LD_VAR 0 7
60656: NOT
60657: IFFALSE 60676
60659: PUSH
60660: LD_VAR 0 1
60664: PPUSH
60665: LD_VAR 0 2
60669: PPUSH
60670: CALL_OW 308
60674: NOT
60675: AND
60676: IFFALSE 60680
// exit ;
60678: GO 60798
// if IsInArea ( unit , area ) then
60680: LD_VAR 0 1
60684: PPUSH
60685: LD_VAR 0 2
60689: PPUSH
60690: CALL_OW 308
60694: IFFALSE 60712
// begin ComMoveToArea ( unit , goAway ) ;
60696: LD_VAR 0 1
60700: PPUSH
60701: LD_VAR 0 3
60705: PPUSH
60706: CALL_OW 113
// exit ;
60710: GO 60798
// end ; if task [ 1 ] [ 1 ] <> M then
60712: LD_VAR 0 7
60716: PUSH
60717: LD_INT 1
60719: ARRAY
60720: PUSH
60721: LD_INT 1
60723: ARRAY
60724: PUSH
60725: LD_STRING M
60727: NONEQUAL
60728: IFFALSE 60732
// exit ;
60730: GO 60798
// x := task [ 1 ] [ 2 ] ;
60732: LD_ADDR_VAR 0 5
60736: PUSH
60737: LD_VAR 0 7
60741: PUSH
60742: LD_INT 1
60744: ARRAY
60745: PUSH
60746: LD_INT 2
60748: ARRAY
60749: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
60750: LD_ADDR_VAR 0 6
60754: PUSH
60755: LD_VAR 0 7
60759: PUSH
60760: LD_INT 1
60762: ARRAY
60763: PUSH
60764: LD_INT 3
60766: ARRAY
60767: ST_TO_ADDR
// if InArea ( x , y , area ) then
60768: LD_VAR 0 5
60772: PPUSH
60773: LD_VAR 0 6
60777: PPUSH
60778: LD_VAR 0 2
60782: PPUSH
60783: CALL_OW 309
60787: IFFALSE 60798
// ComStop ( unit ) ;
60789: LD_VAR 0 1
60793: PPUSH
60794: CALL_OW 141
// end ;
60798: LD_VAR 0 4
60802: RET
// export function Abs ( value ) ; begin
60803: LD_INT 0
60805: PPUSH
// result := value ;
60806: LD_ADDR_VAR 0 2
60810: PUSH
60811: LD_VAR 0 1
60815: ST_TO_ADDR
// if value < 0 then
60816: LD_VAR 0 1
60820: PUSH
60821: LD_INT 0
60823: LESS
60824: IFFALSE 60841
// result := value * - 1 ;
60826: LD_ADDR_VAR 0 2
60830: PUSH
60831: LD_VAR 0 1
60835: PUSH
60836: LD_INT 1
60838: NEG
60839: MUL
60840: ST_TO_ADDR
// end ;
60841: LD_VAR 0 2
60845: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
60846: LD_INT 0
60848: PPUSH
60849: PPUSH
60850: PPUSH
60851: PPUSH
60852: PPUSH
60853: PPUSH
60854: PPUSH
60855: PPUSH
// if not unit or not building then
60856: LD_VAR 0 1
60860: NOT
60861: IFTRUE 60870
60863: PUSH
60864: LD_VAR 0 2
60868: NOT
60869: OR
60870: IFFALSE 60874
// exit ;
60872: GO 61102
// x := GetX ( building ) ;
60874: LD_ADDR_VAR 0 4
60878: PUSH
60879: LD_VAR 0 2
60883: PPUSH
60884: CALL_OW 250
60888: ST_TO_ADDR
// y := GetY ( building ) ;
60889: LD_ADDR_VAR 0 6
60893: PUSH
60894: LD_VAR 0 2
60898: PPUSH
60899: CALL_OW 251
60903: ST_TO_ADDR
// d := GetDir ( building ) ;
60904: LD_ADDR_VAR 0 8
60908: PUSH
60909: LD_VAR 0 2
60913: PPUSH
60914: CALL_OW 254
60918: ST_TO_ADDR
// r := 4 ;
60919: LD_ADDR_VAR 0 9
60923: PUSH
60924: LD_INT 4
60926: ST_TO_ADDR
// for i := 1 to 5 do
60927: LD_ADDR_VAR 0 10
60931: PUSH
60932: DOUBLE
60933: LD_INT 1
60935: DEC
60936: ST_TO_ADDR
60937: LD_INT 5
60939: PUSH
60940: FOR_TO
60941: IFFALSE 61100
// begin _x := ShiftX ( x , d , r + i ) ;
60943: LD_ADDR_VAR 0 5
60947: PUSH
60948: LD_VAR 0 4
60952: PPUSH
60953: LD_VAR 0 8
60957: PPUSH
60958: LD_VAR 0 9
60962: PUSH
60963: LD_VAR 0 10
60967: PLUS
60968: PPUSH
60969: CALL_OW 272
60973: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60974: LD_ADDR_VAR 0 7
60978: PUSH
60979: LD_VAR 0 6
60983: PPUSH
60984: LD_VAR 0 8
60988: PPUSH
60989: LD_VAR 0 9
60993: PUSH
60994: LD_VAR 0 10
60998: PLUS
60999: PPUSH
61000: CALL_OW 273
61004: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
61005: LD_VAR 0 5
61009: PPUSH
61010: LD_VAR 0 7
61014: PPUSH
61015: CALL_OW 488
61019: IFFALSE 61054
61021: PUSH
61022: LD_VAR 0 5
61026: PPUSH
61027: LD_VAR 0 7
61031: PPUSH
61032: CALL_OW 428
61036: PPUSH
61037: CALL_OW 247
61041: PUSH
61042: LD_INT 3
61044: PUSH
61045: LD_INT 2
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: IN
61052: NOT
61053: AND
61054: IFFALSE 61098
// begin ComMoveXY ( unit , _x , _y ) ;
61056: LD_VAR 0 1
61060: PPUSH
61061: LD_VAR 0 5
61065: PPUSH
61066: LD_VAR 0 7
61070: PPUSH
61071: CALL_OW 111
// result := [ _x , _y ] ;
61075: LD_ADDR_VAR 0 3
61079: PUSH
61080: LD_VAR 0 5
61084: PUSH
61085: LD_VAR 0 7
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: ST_TO_ADDR
// exit ;
61094: POP
61095: POP
61096: GO 61102
// end ; end ;
61098: GO 60940
61100: POP
61101: POP
// end ;
61102: LD_VAR 0 3
61106: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
61107: LD_INT 0
61109: PPUSH
61110: PPUSH
61111: PPUSH
// result := 0 ;
61112: LD_ADDR_VAR 0 3
61116: PUSH
61117: LD_INT 0
61119: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
61120: LD_VAR 0 1
61124: PUSH
61125: LD_INT 0
61127: LESS
61128: IFTRUE 61140
61130: PUSH
61131: LD_VAR 0 1
61135: PUSH
61136: LD_INT 8
61138: GREATER
61139: OR
61140: IFTRUE 61152
61142: PUSH
61143: LD_VAR 0 2
61147: PUSH
61148: LD_INT 0
61150: LESS
61151: OR
61152: IFTRUE 61164
61154: PUSH
61155: LD_VAR 0 2
61159: PUSH
61160: LD_INT 8
61162: GREATER
61163: OR
61164: IFFALSE 61168
// exit ;
61166: GO 61243
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
61168: LD_ADDR_VAR 0 4
61172: PUSH
61173: LD_INT 22
61175: PUSH
61176: LD_VAR 0 2
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PPUSH
61185: CALL_OW 69
61189: PUSH
61190: FOR_IN
61191: IFFALSE 61241
// begin un := UnitShoot ( i ) ;
61193: LD_ADDR_VAR 0 5
61197: PUSH
61198: LD_VAR 0 4
61202: PPUSH
61203: CALL_OW 504
61207: ST_TO_ADDR
// if GetSide ( un ) = side1 then
61208: LD_VAR 0 5
61212: PPUSH
61213: CALL_OW 255
61217: PUSH
61218: LD_VAR 0 1
61222: EQUAL
61223: IFFALSE 61239
// begin result := un ;
61225: LD_ADDR_VAR 0 3
61229: PUSH
61230: LD_VAR 0 5
61234: ST_TO_ADDR
// exit ;
61235: POP
61236: POP
61237: GO 61243
// end ; end ;
61239: GO 61190
61241: POP
61242: POP
// end ;
61243: LD_VAR 0 3
61247: RET
// export function GetCargoBay ( units ) ; begin
61248: LD_INT 0
61250: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
61251: LD_ADDR_VAR 0 2
61255: PUSH
61256: LD_VAR 0 1
61260: PPUSH
61261: LD_INT 2
61263: PUSH
61264: LD_INT 34
61266: PUSH
61267: LD_INT 12
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 34
61276: PUSH
61277: LD_INT 51
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 34
61286: PUSH
61287: LD_INT 32
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 34
61296: PUSH
61297: LD_INT 89
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: PPUSH
61311: CALL_OW 72
61315: ST_TO_ADDR
// end ;
61316: LD_VAR 0 2
61320: RET
// export function Negate ( value ) ; begin
61321: LD_INT 0
61323: PPUSH
// result := not value ;
61324: LD_ADDR_VAR 0 2
61328: PUSH
61329: LD_VAR 0 1
61333: NOT
61334: ST_TO_ADDR
// end ;
61335: LD_VAR 0 2
61339: RET
// export function Inc ( value ) ; begin
61340: LD_INT 0
61342: PPUSH
// result := value + 1 ;
61343: LD_ADDR_VAR 0 2
61347: PUSH
61348: LD_VAR 0 1
61352: PUSH
61353: LD_INT 1
61355: PLUS
61356: ST_TO_ADDR
// end ;
61357: LD_VAR 0 2
61361: RET
// export function Dec ( value ) ; begin
61362: LD_INT 0
61364: PPUSH
// result := value - 1 ;
61365: LD_ADDR_VAR 0 2
61369: PUSH
61370: LD_VAR 0 1
61374: PUSH
61375: LD_INT 1
61377: MINUS
61378: ST_TO_ADDR
// end ;
61379: LD_VAR 0 2
61383: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
61384: LD_INT 0
61386: PPUSH
61387: PPUSH
61388: PPUSH
61389: PPUSH
61390: PPUSH
61391: PPUSH
61392: PPUSH
61393: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
61394: LD_VAR 0 1
61398: PPUSH
61399: LD_VAR 0 2
61403: PPUSH
61404: CALL_OW 488
61408: NOT
61409: IFTRUE 61428
61411: PUSH
61412: LD_VAR 0 3
61416: PPUSH
61417: LD_VAR 0 4
61421: PPUSH
61422: CALL_OW 488
61426: NOT
61427: OR
61428: IFFALSE 61441
// begin result := - 1 ;
61430: LD_ADDR_VAR 0 5
61434: PUSH
61435: LD_INT 1
61437: NEG
61438: ST_TO_ADDR
// exit ;
61439: GO 61676
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
61441: LD_ADDR_VAR 0 12
61445: PUSH
61446: LD_VAR 0 1
61450: PPUSH
61451: LD_VAR 0 2
61455: PPUSH
61456: LD_VAR 0 3
61460: PPUSH
61461: LD_VAR 0 4
61465: PPUSH
61466: CALL 60512 0 4
61470: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
61471: LD_ADDR_VAR 0 11
61475: PUSH
61476: LD_VAR 0 1
61480: PPUSH
61481: LD_VAR 0 2
61485: PPUSH
61486: LD_VAR 0 12
61490: PUSH
61491: LD_INT 1
61493: ARRAY
61494: PPUSH
61495: LD_VAR 0 12
61499: PUSH
61500: LD_INT 2
61502: ARRAY
61503: PPUSH
61504: CALL_OW 298
61508: ST_TO_ADDR
// distance := 9999 ;
61509: LD_ADDR_VAR 0 10
61513: PUSH
61514: LD_INT 9999
61516: ST_TO_ADDR
// for i := 0 to 5 do
61517: LD_ADDR_VAR 0 6
61521: PUSH
61522: DOUBLE
61523: LD_INT 0
61525: DEC
61526: ST_TO_ADDR
61527: LD_INT 5
61529: PUSH
61530: FOR_TO
61531: IFFALSE 61674
// begin _x := ShiftX ( x1 , i , centerDist ) ;
61533: LD_ADDR_VAR 0 7
61537: PUSH
61538: LD_VAR 0 1
61542: PPUSH
61543: LD_VAR 0 6
61547: PPUSH
61548: LD_VAR 0 11
61552: PPUSH
61553: CALL_OW 272
61557: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
61558: LD_ADDR_VAR 0 8
61562: PUSH
61563: LD_VAR 0 2
61567: PPUSH
61568: LD_VAR 0 6
61572: PPUSH
61573: LD_VAR 0 11
61577: PPUSH
61578: CALL_OW 273
61582: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61583: LD_VAR 0 7
61587: PPUSH
61588: LD_VAR 0 8
61592: PPUSH
61593: CALL_OW 488
61597: NOT
61598: IFFALSE 61602
// continue ;
61600: GO 61530
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
61602: LD_ADDR_VAR 0 9
61606: PUSH
61607: LD_VAR 0 12
61611: PUSH
61612: LD_INT 1
61614: ARRAY
61615: PPUSH
61616: LD_VAR 0 12
61620: PUSH
61621: LD_INT 2
61623: ARRAY
61624: PPUSH
61625: LD_VAR 0 7
61629: PPUSH
61630: LD_VAR 0 8
61634: PPUSH
61635: CALL_OW 298
61639: ST_TO_ADDR
// if tmp < distance then
61640: LD_VAR 0 9
61644: PUSH
61645: LD_VAR 0 10
61649: LESS
61650: IFFALSE 61672
// begin result := i ;
61652: LD_ADDR_VAR 0 5
61656: PUSH
61657: LD_VAR 0 6
61661: ST_TO_ADDR
// distance := tmp ;
61662: LD_ADDR_VAR 0 10
61666: PUSH
61667: LD_VAR 0 9
61671: ST_TO_ADDR
// end ; end ;
61672: GO 61530
61674: POP
61675: POP
// end ;
61676: LD_VAR 0 5
61680: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61681: LD_INT 0
61683: PPUSH
61684: PPUSH
// if not driver or not IsInUnit ( driver ) then
61685: LD_VAR 0 1
61689: NOT
61690: IFTRUE 61704
61692: PUSH
61693: LD_VAR 0 1
61697: PPUSH
61698: CALL_OW 310
61702: NOT
61703: OR
61704: IFFALSE 61708
// exit ;
61706: GO 61798
// vehicle := IsInUnit ( driver ) ;
61708: LD_ADDR_VAR 0 3
61712: PUSH
61713: LD_VAR 0 1
61717: PPUSH
61718: CALL_OW 310
61722: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61723: LD_VAR 0 1
61727: PPUSH
61728: LD_STRING \
61730: PUSH
61731: LD_INT 0
61733: PUSH
61734: LD_INT 0
61736: PUSH
61737: LD_INT 0
61739: PUSH
61740: LD_INT 0
61742: PUSH
61743: LD_INT 0
61745: PUSH
61746: LD_INT 0
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: PUSH
61758: LD_STRING E
61760: PUSH
61761: LD_INT 0
61763: PUSH
61764: LD_INT 0
61766: PUSH
61767: LD_VAR 0 3
61771: PUSH
61772: LD_INT 0
61774: PUSH
61775: LD_INT 0
61777: PUSH
61778: LD_INT 0
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PPUSH
61794: CALL_OW 446
// end ;
61798: LD_VAR 0 2
61802: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61803: LD_INT 0
61805: PPUSH
61806: PPUSH
// if not driver or not IsInUnit ( driver ) then
61807: LD_VAR 0 1
61811: NOT
61812: IFTRUE 61826
61814: PUSH
61815: LD_VAR 0 1
61819: PPUSH
61820: CALL_OW 310
61824: NOT
61825: OR
61826: IFFALSE 61830
// exit ;
61828: GO 61920
// vehicle := IsInUnit ( driver ) ;
61830: LD_ADDR_VAR 0 3
61834: PUSH
61835: LD_VAR 0 1
61839: PPUSH
61840: CALL_OW 310
61844: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61845: LD_VAR 0 1
61849: PPUSH
61850: LD_STRING \
61852: PUSH
61853: LD_INT 0
61855: PUSH
61856: LD_INT 0
61858: PUSH
61859: LD_INT 0
61861: PUSH
61862: LD_INT 0
61864: PUSH
61865: LD_INT 0
61867: PUSH
61868: LD_INT 0
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: PUSH
61880: LD_STRING E
61882: PUSH
61883: LD_INT 0
61885: PUSH
61886: LD_INT 0
61888: PUSH
61889: LD_VAR 0 3
61893: PUSH
61894: LD_INT 0
61896: PUSH
61897: LD_INT 0
61899: PUSH
61900: LD_INT 0
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PPUSH
61916: CALL_OW 447
// end ;
61920: LD_VAR 0 2
61924: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
61925: LD_INT 0
61927: PPUSH
61928: PPUSH
61929: PPUSH
// tmp := [ ] ;
61930: LD_ADDR_VAR 0 5
61934: PUSH
61935: EMPTY
61936: ST_TO_ADDR
// for i in units do
61937: LD_ADDR_VAR 0 4
61941: PUSH
61942: LD_VAR 0 1
61946: PUSH
61947: FOR_IN
61948: IFFALSE 61986
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
61950: LD_ADDR_VAR 0 5
61954: PUSH
61955: LD_VAR 0 5
61959: PPUSH
61960: LD_VAR 0 5
61964: PUSH
61965: LD_INT 1
61967: PLUS
61968: PPUSH
61969: LD_VAR 0 4
61973: PPUSH
61974: CALL_OW 256
61978: PPUSH
61979: CALL_OW 2
61983: ST_TO_ADDR
61984: GO 61947
61986: POP
61987: POP
// if not tmp then
61988: LD_VAR 0 5
61992: NOT
61993: IFFALSE 61997
// exit ;
61995: GO 62045
// if asc then
61997: LD_VAR 0 2
62001: IFFALSE 62025
// result := SortListByListAsc ( units , tmp ) else
62003: LD_ADDR_VAR 0 3
62007: PUSH
62008: LD_VAR 0 1
62012: PPUSH
62013: LD_VAR 0 5
62017: PPUSH
62018: CALL_OW 76
62022: ST_TO_ADDR
62023: GO 62045
// result := SortListByListDesc ( units , tmp ) ;
62025: LD_ADDR_VAR 0 3
62029: PUSH
62030: LD_VAR 0 1
62034: PPUSH
62035: LD_VAR 0 5
62039: PPUSH
62040: CALL_OW 77
62044: ST_TO_ADDR
// end ;
62045: LD_VAR 0 3
62049: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
62050: LD_INT 0
62052: PPUSH
62053: PPUSH
// task := GetTaskList ( mech ) ;
62054: LD_ADDR_VAR 0 4
62058: PUSH
62059: LD_VAR 0 1
62063: PPUSH
62064: CALL_OW 437
62068: ST_TO_ADDR
// if not task then
62069: LD_VAR 0 4
62073: NOT
62074: IFFALSE 62078
// exit ;
62076: GO 62122
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
62078: LD_ADDR_VAR 0 3
62082: PUSH
62083: LD_VAR 0 4
62087: PUSH
62088: LD_INT 1
62090: ARRAY
62091: PUSH
62092: LD_INT 1
62094: ARRAY
62095: PUSH
62096: LD_STRING r
62098: EQUAL
62099: IFFALSE 62121
62101: PUSH
62102: LD_VAR 0 4
62106: PUSH
62107: LD_INT 1
62109: ARRAY
62110: PUSH
62111: LD_INT 4
62113: ARRAY
62114: PUSH
62115: LD_VAR 0 2
62119: EQUAL
62120: AND
62121: ST_TO_ADDR
// end ;
62122: LD_VAR 0 3
62126: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
62127: LD_INT 0
62129: PPUSH
// SetDir ( unit , d ) ;
62130: LD_VAR 0 1
62134: PPUSH
62135: LD_VAR 0 4
62139: PPUSH
62140: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
62144: LD_ADDR_VAR 0 6
62148: PUSH
62149: LD_VAR 0 1
62153: PPUSH
62154: LD_VAR 0 2
62158: PPUSH
62159: LD_VAR 0 3
62163: PPUSH
62164: LD_VAR 0 5
62168: PPUSH
62169: CALL_OW 48
62173: ST_TO_ADDR
// end ;
62174: LD_VAR 0 6
62178: RET
// export function ToNaturalNumber ( number ) ; begin
62179: LD_INT 0
62181: PPUSH
// result := number div 1 ;
62182: LD_ADDR_VAR 0 2
62186: PUSH
62187: LD_VAR 0 1
62191: PUSH
62192: LD_INT 1
62194: DIV
62195: ST_TO_ADDR
// if number < 0 then
62196: LD_VAR 0 1
62200: PUSH
62201: LD_INT 0
62203: LESS
62204: IFFALSE 62214
// result := 0 ;
62206: LD_ADDR_VAR 0 2
62210: PUSH
62211: LD_INT 0
62213: ST_TO_ADDR
// end ;
62214: LD_VAR 0 2
62218: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
62219: LD_INT 0
62221: PPUSH
62222: PPUSH
62223: PPUSH
// if not buildings then
62224: LD_VAR 0 1
62228: NOT
62229: IFFALSE 62233
// exit ;
62231: GO 62348
// tmp := [ ] ;
62233: LD_ADDR_VAR 0 5
62237: PUSH
62238: EMPTY
62239: ST_TO_ADDR
// for b in buildings do
62240: LD_ADDR_VAR 0 4
62244: PUSH
62245: LD_VAR 0 1
62249: PUSH
62250: FOR_IN
62251: IFFALSE 62289
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
62253: LD_ADDR_VAR 0 5
62257: PUSH
62258: LD_VAR 0 5
62262: PPUSH
62263: LD_VAR 0 5
62267: PUSH
62268: LD_INT 1
62270: PLUS
62271: PPUSH
62272: LD_VAR 0 4
62276: PPUSH
62277: CALL_OW 266
62281: PPUSH
62282: CALL_OW 1
62286: ST_TO_ADDR
62287: GO 62250
62289: POP
62290: POP
// if not tmp then
62291: LD_VAR 0 5
62295: NOT
62296: IFFALSE 62300
// exit ;
62298: GO 62348
// if asc then
62300: LD_VAR 0 2
62304: IFFALSE 62328
// result := SortListByListAsc ( buildings , tmp ) else
62306: LD_ADDR_VAR 0 3
62310: PUSH
62311: LD_VAR 0 1
62315: PPUSH
62316: LD_VAR 0 5
62320: PPUSH
62321: CALL_OW 76
62325: ST_TO_ADDR
62326: GO 62348
// result := SortListByListDesc ( buildings , tmp ) ;
62328: LD_ADDR_VAR 0 3
62332: PUSH
62333: LD_VAR 0 1
62337: PPUSH
62338: LD_VAR 0 5
62342: PPUSH
62343: CALL_OW 77
62347: ST_TO_ADDR
// end ;
62348: LD_VAR 0 3
62352: RET
// export function SortByClass ( units , class ) ; var un ; begin
62353: LD_INT 0
62355: PPUSH
62356: PPUSH
// if not units or not class then
62357: LD_VAR 0 1
62361: NOT
62362: IFTRUE 62371
62364: PUSH
62365: LD_VAR 0 2
62369: NOT
62370: OR
62371: IFFALSE 62375
// exit ;
62373: GO 62470
// result := [ ] ;
62375: LD_ADDR_VAR 0 3
62379: PUSH
62380: EMPTY
62381: ST_TO_ADDR
// for un in units do
62382: LD_ADDR_VAR 0 4
62386: PUSH
62387: LD_VAR 0 1
62391: PUSH
62392: FOR_IN
62393: IFFALSE 62468
// if GetClass ( un ) = class then
62395: LD_VAR 0 4
62399: PPUSH
62400: CALL_OW 257
62404: PUSH
62405: LD_VAR 0 2
62409: EQUAL
62410: IFFALSE 62437
// result := Insert ( result , 1 , un ) else
62412: LD_ADDR_VAR 0 3
62416: PUSH
62417: LD_VAR 0 3
62421: PPUSH
62422: LD_INT 1
62424: PPUSH
62425: LD_VAR 0 4
62429: PPUSH
62430: CALL_OW 2
62434: ST_TO_ADDR
62435: GO 62466
// result := Replace ( result , result + 1 , un ) ;
62437: LD_ADDR_VAR 0 3
62441: PUSH
62442: LD_VAR 0 3
62446: PPUSH
62447: LD_VAR 0 3
62451: PUSH
62452: LD_INT 1
62454: PLUS
62455: PPUSH
62456: LD_VAR 0 4
62460: PPUSH
62461: CALL_OW 1
62465: ST_TO_ADDR
62466: GO 62392
62468: POP
62469: POP
// end ;
62470: LD_VAR 0 3
62474: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
62475: LD_INT 0
62477: PPUSH
62478: PPUSH
62479: PPUSH
62480: PPUSH
62481: PPUSH
62482: PPUSH
62483: PPUSH
// result := [ ] ;
62484: LD_ADDR_VAR 0 4
62488: PUSH
62489: EMPTY
62490: ST_TO_ADDR
// if x - r < 0 then
62491: LD_VAR 0 1
62495: PUSH
62496: LD_VAR 0 3
62500: MINUS
62501: PUSH
62502: LD_INT 0
62504: LESS
62505: IFFALSE 62517
// min_x := 0 else
62507: LD_ADDR_VAR 0 8
62511: PUSH
62512: LD_INT 0
62514: ST_TO_ADDR
62515: GO 62533
// min_x := x - r ;
62517: LD_ADDR_VAR 0 8
62521: PUSH
62522: LD_VAR 0 1
62526: PUSH
62527: LD_VAR 0 3
62531: MINUS
62532: ST_TO_ADDR
// if y - r < 0 then
62533: LD_VAR 0 2
62537: PUSH
62538: LD_VAR 0 3
62542: MINUS
62543: PUSH
62544: LD_INT 0
62546: LESS
62547: IFFALSE 62559
// min_y := 0 else
62549: LD_ADDR_VAR 0 7
62553: PUSH
62554: LD_INT 0
62556: ST_TO_ADDR
62557: GO 62575
// min_y := y - r ;
62559: LD_ADDR_VAR 0 7
62563: PUSH
62564: LD_VAR 0 2
62568: PUSH
62569: LD_VAR 0 3
62573: MINUS
62574: ST_TO_ADDR
// max_x := x + r ;
62575: LD_ADDR_VAR 0 9
62579: PUSH
62580: LD_VAR 0 1
62584: PUSH
62585: LD_VAR 0 3
62589: PLUS
62590: ST_TO_ADDR
// max_y := y + r ;
62591: LD_ADDR_VAR 0 10
62595: PUSH
62596: LD_VAR 0 2
62600: PUSH
62601: LD_VAR 0 3
62605: PLUS
62606: ST_TO_ADDR
// for _x = min_x to max_x do
62607: LD_ADDR_VAR 0 5
62611: PUSH
62612: DOUBLE
62613: LD_VAR 0 8
62617: DEC
62618: ST_TO_ADDR
62619: LD_VAR 0 9
62623: PUSH
62624: FOR_TO
62625: IFFALSE 62726
// for _y = min_y to max_y do
62627: LD_ADDR_VAR 0 6
62631: PUSH
62632: DOUBLE
62633: LD_VAR 0 7
62637: DEC
62638: ST_TO_ADDR
62639: LD_VAR 0 10
62643: PUSH
62644: FOR_TO
62645: IFFALSE 62722
// begin if not ValidHex ( _x , _y ) then
62647: LD_VAR 0 5
62651: PPUSH
62652: LD_VAR 0 6
62656: PPUSH
62657: CALL_OW 488
62661: NOT
62662: IFFALSE 62666
// continue ;
62664: GO 62644
// if GetResourceTypeXY ( _x , _y ) then
62666: LD_VAR 0 5
62670: PPUSH
62671: LD_VAR 0 6
62675: PPUSH
62676: CALL_OW 283
62680: IFFALSE 62720
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
62682: LD_ADDR_VAR 0 4
62686: PUSH
62687: LD_VAR 0 4
62691: PPUSH
62692: LD_VAR 0 4
62696: PUSH
62697: LD_INT 1
62699: PLUS
62700: PPUSH
62701: LD_VAR 0 5
62705: PUSH
62706: LD_VAR 0 6
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PPUSH
62715: CALL_OW 1
62719: ST_TO_ADDR
// end ;
62720: GO 62644
62722: POP
62723: POP
62724: GO 62624
62726: POP
62727: POP
// end ;
62728: LD_VAR 0 4
62732: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
62733: LD_INT 0
62735: PPUSH
62736: PPUSH
62737: PPUSH
62738: PPUSH
62739: PPUSH
62740: PPUSH
62741: PPUSH
62742: PPUSH
// if not units then
62743: LD_VAR 0 1
62747: NOT
62748: IFFALSE 62752
// exit ;
62750: GO 63284
// result := UnitFilter ( units , [ f_ok ] ) ;
62752: LD_ADDR_VAR 0 3
62756: PUSH
62757: LD_VAR 0 1
62761: PPUSH
62762: LD_INT 50
62764: PUSH
62765: EMPTY
62766: LIST
62767: PPUSH
62768: CALL_OW 72
62772: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
62773: LD_ADDR_VAR 0 8
62777: PUSH
62778: LD_VAR 0 1
62782: PUSH
62783: LD_INT 1
62785: ARRAY
62786: PPUSH
62787: CALL_OW 255
62791: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
62792: LD_ADDR_VAR 0 10
62796: PUSH
62797: LD_INT 29
62799: PUSH
62800: LD_INT 91
62802: PUSH
62803: LD_INT 49
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: LIST
62810: ST_TO_ADDR
// if not result then
62811: LD_VAR 0 3
62815: NOT
62816: IFFALSE 62820
// exit ;
62818: GO 63284
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
62820: LD_ADDR_VAR 0 5
62824: PUSH
62825: LD_INT 81
62827: PUSH
62828: LD_VAR 0 8
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PPUSH
62837: CALL_OW 69
62841: ST_TO_ADDR
// for i in result do
62842: LD_ADDR_VAR 0 4
62846: PUSH
62847: LD_VAR 0 3
62851: PUSH
62852: FOR_IN
62853: IFFALSE 63282
// begin tag := GetTag ( i ) + 1 ;
62855: LD_ADDR_VAR 0 9
62859: PUSH
62860: LD_VAR 0 4
62864: PPUSH
62865: CALL_OW 110
62869: PUSH
62870: LD_INT 1
62872: PLUS
62873: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
62874: LD_ADDR_VAR 0 7
62878: PUSH
62879: LD_VAR 0 4
62883: PPUSH
62884: CALL_OW 250
62888: PPUSH
62889: LD_VAR 0 4
62893: PPUSH
62894: CALL_OW 251
62898: PPUSH
62899: LD_INT 4
62901: PPUSH
62902: CALL 62475 0 3
62906: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
62907: LD_VAR 0 4
62911: PPUSH
62912: CALL_OW 247
62916: PUSH
62917: LD_INT 2
62919: EQUAL
62920: IFFALSE 62932
62922: PUSH
62923: LD_VAR 0 7
62927: PUSH
62928: LD_INT 2
62930: GREATER
62931: AND
62932: IFFALSE 62952
62934: PUSH
62935: LD_VAR 0 4
62939: PPUSH
62940: CALL_OW 264
62944: PUSH
62945: LD_VAR 0 10
62949: IN
62950: NOT
62951: AND
62952: IFFALSE 62991
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
62954: LD_VAR 0 4
62958: PPUSH
62959: LD_VAR 0 7
62963: PUSH
62964: LD_INT 1
62966: ARRAY
62967: PUSH
62968: LD_INT 1
62970: ARRAY
62971: PPUSH
62972: LD_VAR 0 7
62976: PUSH
62977: LD_INT 1
62979: ARRAY
62980: PUSH
62981: LD_INT 2
62983: ARRAY
62984: PPUSH
62985: CALL_OW 116
62989: GO 63280
// if path > tag then
62991: LD_VAR 0 2
62995: PUSH
62996: LD_VAR 0 9
63000: GREATER
63001: IFFALSE 63209
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
63003: LD_ADDR_VAR 0 6
63007: PUSH
63008: LD_VAR 0 5
63012: PPUSH
63013: LD_INT 91
63015: PUSH
63016: LD_VAR 0 4
63020: PUSH
63021: LD_INT 8
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: LIST
63028: PPUSH
63029: CALL_OW 72
63033: ST_TO_ADDR
// if nearEnemy then
63034: LD_VAR 0 6
63038: IFFALSE 63107
// begin if GetWeapon ( i ) = ru_time_lapser then
63040: LD_VAR 0 4
63044: PPUSH
63045: CALL_OW 264
63049: PUSH
63050: LD_INT 49
63052: EQUAL
63053: IFFALSE 63081
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
63055: LD_VAR 0 4
63059: PPUSH
63060: LD_VAR 0 6
63064: PPUSH
63065: LD_VAR 0 4
63069: PPUSH
63070: CALL_OW 74
63074: PPUSH
63075: CALL_OW 112
63079: GO 63105
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
63081: LD_VAR 0 4
63085: PPUSH
63086: LD_VAR 0 6
63090: PPUSH
63091: LD_VAR 0 4
63095: PPUSH
63096: CALL_OW 74
63100: PPUSH
63101: CALL 64365 0 2
// end else
63105: GO 63207
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
63107: LD_VAR 0 4
63111: PPUSH
63112: LD_VAR 0 2
63116: PUSH
63117: LD_VAR 0 9
63121: ARRAY
63122: PUSH
63123: LD_INT 1
63125: ARRAY
63126: PPUSH
63127: LD_VAR 0 2
63131: PUSH
63132: LD_VAR 0 9
63136: ARRAY
63137: PUSH
63138: LD_INT 2
63140: ARRAY
63141: PPUSH
63142: CALL_OW 297
63146: PUSH
63147: LD_INT 6
63149: GREATER
63150: IFFALSE 63193
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
63152: LD_VAR 0 4
63156: PPUSH
63157: LD_VAR 0 2
63161: PUSH
63162: LD_VAR 0 9
63166: ARRAY
63167: PUSH
63168: LD_INT 1
63170: ARRAY
63171: PPUSH
63172: LD_VAR 0 2
63176: PUSH
63177: LD_VAR 0 9
63181: ARRAY
63182: PUSH
63183: LD_INT 2
63185: ARRAY
63186: PPUSH
63187: CALL_OW 114
63191: GO 63207
// SetTag ( i , tag ) ;
63193: LD_VAR 0 4
63197: PPUSH
63198: LD_VAR 0 9
63202: PPUSH
63203: CALL_OW 109
// end else
63207: GO 63280
// if enemy then
63209: LD_VAR 0 5
63213: IFFALSE 63280
// begin if GetWeapon ( i ) = ru_time_lapser then
63215: LD_VAR 0 4
63219: PPUSH
63220: CALL_OW 264
63224: PUSH
63225: LD_INT 49
63227: EQUAL
63228: IFFALSE 63256
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
63230: LD_VAR 0 4
63234: PPUSH
63235: LD_VAR 0 5
63239: PPUSH
63240: LD_VAR 0 4
63244: PPUSH
63245: CALL_OW 74
63249: PPUSH
63250: CALL_OW 112
63254: GO 63280
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
63256: LD_VAR 0 4
63260: PPUSH
63261: LD_VAR 0 5
63265: PPUSH
63266: LD_VAR 0 4
63270: PPUSH
63271: CALL_OW 74
63275: PPUSH
63276: CALL 64365 0 2
// end ; end ;
63280: GO 62852
63282: POP
63283: POP
// end ;
63284: LD_VAR 0 3
63288: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
63289: LD_INT 0
63291: PPUSH
63292: PPUSH
63293: PPUSH
// if not unit or IsInUnit ( unit ) then
63294: LD_VAR 0 1
63298: NOT
63299: IFTRUE 63312
63301: PUSH
63302: LD_VAR 0 1
63306: PPUSH
63307: CALL_OW 310
63311: OR
63312: IFFALSE 63316
// exit ;
63314: GO 63407
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
63316: LD_ADDR_VAR 0 4
63320: PUSH
63321: LD_VAR 0 1
63325: PPUSH
63326: CALL_OW 250
63330: PPUSH
63331: LD_VAR 0 2
63335: PPUSH
63336: LD_INT 1
63338: PPUSH
63339: CALL_OW 272
63343: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
63344: LD_ADDR_VAR 0 5
63348: PUSH
63349: LD_VAR 0 1
63353: PPUSH
63354: CALL_OW 251
63358: PPUSH
63359: LD_VAR 0 2
63363: PPUSH
63364: LD_INT 1
63366: PPUSH
63367: CALL_OW 273
63371: ST_TO_ADDR
// if ValidHex ( x , y ) then
63372: LD_VAR 0 4
63376: PPUSH
63377: LD_VAR 0 5
63381: PPUSH
63382: CALL_OW 488
63386: IFFALSE 63407
// ComTurnXY ( unit , x , y ) ;
63388: LD_VAR 0 1
63392: PPUSH
63393: LD_VAR 0 4
63397: PPUSH
63398: LD_VAR 0 5
63402: PPUSH
63403: CALL_OW 118
// end ;
63407: LD_VAR 0 3
63411: RET
// export function SeeUnits ( side , units ) ; var i ; begin
63412: LD_INT 0
63414: PPUSH
63415: PPUSH
// result := false ;
63416: LD_ADDR_VAR 0 3
63420: PUSH
63421: LD_INT 0
63423: ST_TO_ADDR
// if not units then
63424: LD_VAR 0 2
63428: NOT
63429: IFFALSE 63433
// exit ;
63431: GO 63478
// for i in units do
63433: LD_ADDR_VAR 0 4
63437: PUSH
63438: LD_VAR 0 2
63442: PUSH
63443: FOR_IN
63444: IFFALSE 63476
// if See ( side , i ) then
63446: LD_VAR 0 1
63450: PPUSH
63451: LD_VAR 0 4
63455: PPUSH
63456: CALL_OW 292
63460: IFFALSE 63474
// begin result := true ;
63462: LD_ADDR_VAR 0 3
63466: PUSH
63467: LD_INT 1
63469: ST_TO_ADDR
// exit ;
63470: POP
63471: POP
63472: GO 63478
// end ;
63474: GO 63443
63476: POP
63477: POP
// end ;
63478: LD_VAR 0 3
63482: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
63483: LD_INT 0
63485: PPUSH
63486: PPUSH
63487: PPUSH
63488: PPUSH
// if not unit or not points then
63489: LD_VAR 0 1
63493: NOT
63494: IFTRUE 63503
63496: PUSH
63497: LD_VAR 0 2
63501: NOT
63502: OR
63503: IFFALSE 63507
// exit ;
63505: GO 63597
// dist := 99999 ;
63507: LD_ADDR_VAR 0 5
63511: PUSH
63512: LD_INT 99999
63514: ST_TO_ADDR
// for i in points do
63515: LD_ADDR_VAR 0 4
63519: PUSH
63520: LD_VAR 0 2
63524: PUSH
63525: FOR_IN
63526: IFFALSE 63595
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
63528: LD_ADDR_VAR 0 6
63532: PUSH
63533: LD_VAR 0 1
63537: PPUSH
63538: LD_VAR 0 4
63542: PUSH
63543: LD_INT 1
63545: ARRAY
63546: PPUSH
63547: LD_VAR 0 4
63551: PUSH
63552: LD_INT 2
63554: ARRAY
63555: PPUSH
63556: CALL_OW 297
63560: ST_TO_ADDR
// if tmpDist < dist then
63561: LD_VAR 0 6
63565: PUSH
63566: LD_VAR 0 5
63570: LESS
63571: IFFALSE 63593
// begin result := i ;
63573: LD_ADDR_VAR 0 3
63577: PUSH
63578: LD_VAR 0 4
63582: ST_TO_ADDR
// dist := tmpDist ;
63583: LD_ADDR_VAR 0 5
63587: PUSH
63588: LD_VAR 0 6
63592: ST_TO_ADDR
// end ; end ;
63593: GO 63525
63595: POP
63596: POP
// end ;
63597: LD_VAR 0 3
63601: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
63602: LD_INT 0
63604: PPUSH
// uc_side := side ;
63605: LD_ADDR_OWVAR 20
63609: PUSH
63610: LD_VAR 0 1
63614: ST_TO_ADDR
// uc_nation := 3 ;
63615: LD_ADDR_OWVAR 21
63619: PUSH
63620: LD_INT 3
63622: ST_TO_ADDR
// vc_chassis := 25 ;
63623: LD_ADDR_OWVAR 37
63627: PUSH
63628: LD_INT 25
63630: ST_TO_ADDR
// vc_engine := engine_siberite ;
63631: LD_ADDR_OWVAR 39
63635: PUSH
63636: LD_INT 3
63638: ST_TO_ADDR
// vc_control := control_computer ;
63639: LD_ADDR_OWVAR 38
63643: PUSH
63644: LD_INT 3
63646: ST_TO_ADDR
// vc_weapon := 59 ;
63647: LD_ADDR_OWVAR 40
63651: PUSH
63652: LD_INT 59
63654: ST_TO_ADDR
// result := CreateVehicle ;
63655: LD_ADDR_VAR 0 5
63659: PUSH
63660: CALL_OW 45
63664: ST_TO_ADDR
// SetDir ( result , d ) ;
63665: LD_VAR 0 5
63669: PPUSH
63670: LD_VAR 0 4
63674: PPUSH
63675: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
63679: LD_VAR 0 5
63683: PPUSH
63684: LD_VAR 0 2
63688: PPUSH
63689: LD_VAR 0 3
63693: PPUSH
63694: LD_INT 0
63696: PPUSH
63697: CALL_OW 48
// end ;
63701: LD_VAR 0 5
63705: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
63706: LD_INT 0
63708: PPUSH
63709: PPUSH
63710: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
63711: LD_ADDR_VAR 0 2
63715: PUSH
63716: LD_INT 0
63718: PUSH
63719: LD_INT 0
63721: PUSH
63722: LD_INT 0
63724: PUSH
63725: LD_INT 0
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
63734: LD_VAR 0 1
63738: NOT
63739: IFTRUE 63772
63741: PUSH
63742: LD_VAR 0 1
63746: PPUSH
63747: CALL_OW 264
63751: PUSH
63752: LD_INT 12
63754: PUSH
63755: LD_INT 51
63757: PUSH
63758: LD_INT 32
63760: PUSH
63761: LD_INT 89
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: LIST
63768: LIST
63769: IN
63770: NOT
63771: OR
63772: IFFALSE 63776
// exit ;
63774: GO 63874
// for i := 1 to 3 do
63776: LD_ADDR_VAR 0 3
63780: PUSH
63781: DOUBLE
63782: LD_INT 1
63784: DEC
63785: ST_TO_ADDR
63786: LD_INT 3
63788: PUSH
63789: FOR_TO
63790: IFFALSE 63872
// begin tmp := GetCargo ( cargo , i ) ;
63792: LD_ADDR_VAR 0 4
63796: PUSH
63797: LD_VAR 0 1
63801: PPUSH
63802: LD_VAR 0 3
63806: PPUSH
63807: CALL_OW 289
63811: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
63812: LD_ADDR_VAR 0 2
63816: PUSH
63817: LD_VAR 0 2
63821: PPUSH
63822: LD_VAR 0 3
63826: PPUSH
63827: LD_VAR 0 4
63831: PPUSH
63832: CALL_OW 1
63836: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
63837: LD_ADDR_VAR 0 2
63841: PUSH
63842: LD_VAR 0 2
63846: PPUSH
63847: LD_INT 4
63849: PPUSH
63850: LD_VAR 0 2
63854: PUSH
63855: LD_INT 4
63857: ARRAY
63858: PUSH
63859: LD_VAR 0 4
63863: PLUS
63864: PPUSH
63865: CALL_OW 1
63869: ST_TO_ADDR
// end ;
63870: GO 63789
63872: POP
63873: POP
// end ;
63874: LD_VAR 0 2
63878: RET
// export function Length ( array ) ; begin
63879: LD_INT 0
63881: PPUSH
// result := array + 0 ;
63882: LD_ADDR_VAR 0 2
63886: PUSH
63887: LD_VAR 0 1
63891: PUSH
63892: LD_INT 0
63894: PLUS
63895: ST_TO_ADDR
// end ;
63896: LD_VAR 0 2
63900: RET
// export function PrepareArray ( array ) ; begin
63901: LD_INT 0
63903: PPUSH
// result := array diff 0 ;
63904: LD_ADDR_VAR 0 2
63908: PUSH
63909: LD_VAR 0 1
63913: PUSH
63914: LD_INT 0
63916: DIFF
63917: ST_TO_ADDR
// if not result [ 1 ] then
63918: LD_VAR 0 2
63922: PUSH
63923: LD_INT 1
63925: ARRAY
63926: NOT
63927: IFFALSE 63947
// result := Delete ( result , 1 ) ;
63929: LD_ADDR_VAR 0 2
63933: PUSH
63934: LD_VAR 0 2
63938: PPUSH
63939: LD_INT 1
63941: PPUSH
63942: CALL_OW 3
63946: ST_TO_ADDR
// end ;
63947: LD_VAR 0 2
63951: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
63952: LD_INT 0
63954: PPUSH
63955: PPUSH
63956: PPUSH
63957: PPUSH
// sibRocketRange := 25 ;
63958: LD_ADDR_VAR 0 6
63962: PUSH
63963: LD_INT 25
63965: ST_TO_ADDR
// result := false ;
63966: LD_ADDR_VAR 0 4
63970: PUSH
63971: LD_INT 0
63973: ST_TO_ADDR
// for i := 0 to 5 do
63974: LD_ADDR_VAR 0 5
63978: PUSH
63979: DOUBLE
63980: LD_INT 0
63982: DEC
63983: ST_TO_ADDR
63984: LD_INT 5
63986: PUSH
63987: FOR_TO
63988: IFFALSE 64055
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
63990: LD_VAR 0 1
63994: PPUSH
63995: LD_VAR 0 5
63999: PPUSH
64000: LD_VAR 0 6
64004: PPUSH
64005: CALL_OW 272
64009: PPUSH
64010: LD_VAR 0 2
64014: PPUSH
64015: LD_VAR 0 5
64019: PPUSH
64020: LD_VAR 0 6
64024: PPUSH
64025: CALL_OW 273
64029: PPUSH
64030: LD_VAR 0 3
64034: PPUSH
64035: CALL_OW 309
64039: IFFALSE 64053
// begin result := true ;
64041: LD_ADDR_VAR 0 4
64045: PUSH
64046: LD_INT 1
64048: ST_TO_ADDR
// exit ;
64049: POP
64050: POP
64051: GO 64057
// end ;
64053: GO 63987
64055: POP
64056: POP
// end ;
64057: LD_VAR 0 4
64061: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
64062: LD_INT 0
64064: PPUSH
64065: PPUSH
64066: PPUSH
// if btype = b_depot then
64067: LD_VAR 0 2
64071: PUSH
64072: LD_INT 0
64074: EQUAL
64075: IFFALSE 64087
// begin result := true ;
64077: LD_ADDR_VAR 0 3
64081: PUSH
64082: LD_INT 1
64084: ST_TO_ADDR
// exit ;
64085: GO 64207
// end ; pom := GetBase ( depot ) ;
64087: LD_ADDR_VAR 0 4
64091: PUSH
64092: LD_VAR 0 1
64096: PPUSH
64097: CALL_OW 274
64101: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
64102: LD_ADDR_VAR 0 5
64106: PUSH
64107: LD_VAR 0 2
64111: PPUSH
64112: LD_VAR 0 1
64116: PPUSH
64117: CALL_OW 248
64121: PPUSH
64122: CALL_OW 450
64126: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
64127: LD_ADDR_VAR 0 3
64131: PUSH
64132: LD_VAR 0 4
64136: PPUSH
64137: LD_INT 1
64139: PPUSH
64140: CALL_OW 275
64144: PUSH
64145: LD_VAR 0 5
64149: PUSH
64150: LD_INT 1
64152: ARRAY
64153: GREATEREQUAL
64154: IFFALSE 64180
64156: PUSH
64157: LD_VAR 0 4
64161: PPUSH
64162: LD_INT 2
64164: PPUSH
64165: CALL_OW 275
64169: PUSH
64170: LD_VAR 0 5
64174: PUSH
64175: LD_INT 2
64177: ARRAY
64178: GREATEREQUAL
64179: AND
64180: IFFALSE 64206
64182: PUSH
64183: LD_VAR 0 4
64187: PPUSH
64188: LD_INT 3
64190: PPUSH
64191: CALL_OW 275
64195: PUSH
64196: LD_VAR 0 5
64200: PUSH
64201: LD_INT 3
64203: ARRAY
64204: GREATEREQUAL
64205: AND
64206: ST_TO_ADDR
// end ;
64207: LD_VAR 0 3
64211: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
64212: LD_INT 0
64214: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
64215: LD_VAR 0 1
64219: PPUSH
64220: LD_VAR 0 2
64224: PPUSH
64225: LD_INT 0
64227: PPUSH
64228: LD_INT 0
64230: PPUSH
64231: LD_INT 1
64233: PPUSH
64234: LD_INT 0
64236: PPUSH
64237: CALL_OW 587
// end ;
64241: LD_VAR 0 3
64245: RET
// export function CenterOnNow ( unit ) ; begin
64246: LD_INT 0
64248: PPUSH
// result := IsInUnit ( unit ) ;
64249: LD_ADDR_VAR 0 2
64253: PUSH
64254: LD_VAR 0 1
64258: PPUSH
64259: CALL_OW 310
64263: ST_TO_ADDR
// if not result then
64264: LD_VAR 0 2
64268: NOT
64269: IFFALSE 64281
// result := unit ;
64271: LD_ADDR_VAR 0 2
64275: PUSH
64276: LD_VAR 0 1
64280: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
64281: LD_VAR 0 1
64285: PPUSH
64286: CALL_OW 87
// end ;
64290: LD_VAR 0 2
64294: RET
// export function ComMoveHex ( unit , hex ) ; begin
64295: LD_INT 0
64297: PPUSH
// if not hex then
64298: LD_VAR 0 2
64302: NOT
64303: IFFALSE 64307
// exit ;
64305: GO 64360
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
64307: LD_VAR 0 2
64311: PUSH
64312: LD_INT 1
64314: ARRAY
64315: PPUSH
64316: LD_VAR 0 2
64320: PUSH
64321: LD_INT 2
64323: ARRAY
64324: PPUSH
64325: CALL_OW 428
64329: IFFALSE 64333
// exit ;
64331: GO 64360
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
64333: LD_VAR 0 1
64337: PPUSH
64338: LD_VAR 0 2
64342: PUSH
64343: LD_INT 1
64345: ARRAY
64346: PPUSH
64347: LD_VAR 0 2
64351: PUSH
64352: LD_INT 2
64354: ARRAY
64355: PPUSH
64356: CALL_OW 111
// end ;
64360: LD_VAR 0 3
64364: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
64365: LD_INT 0
64367: PPUSH
64368: PPUSH
64369: PPUSH
// if not unit or not enemy then
64370: LD_VAR 0 1
64374: NOT
64375: IFTRUE 64384
64377: PUSH
64378: LD_VAR 0 2
64382: NOT
64383: OR
64384: IFFALSE 64388
// exit ;
64386: GO 64514
// x := GetX ( enemy ) ;
64388: LD_ADDR_VAR 0 4
64392: PUSH
64393: LD_VAR 0 2
64397: PPUSH
64398: CALL_OW 250
64402: ST_TO_ADDR
// y := GetY ( enemy ) ;
64403: LD_ADDR_VAR 0 5
64407: PUSH
64408: LD_VAR 0 2
64412: PPUSH
64413: CALL_OW 251
64417: ST_TO_ADDR
// if ValidHex ( x , y ) then
64418: LD_VAR 0 4
64422: PPUSH
64423: LD_VAR 0 5
64427: PPUSH
64428: CALL_OW 488
64432: IFFALSE 64514
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
64434: LD_VAR 0 2
64438: PPUSH
64439: CALL_OW 247
64443: PUSH
64444: LD_INT 3
64446: PUSH
64447: LD_INT 2
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: IN
64454: IFTRUE 64477
64456: PUSH
64457: LD_VAR 0 1
64461: PPUSH
64462: CALL_OW 255
64466: PPUSH
64467: LD_VAR 0 2
64471: PPUSH
64472: CALL_OW 292
64476: OR
64477: IFFALSE 64495
// ComAttackUnit ( unit , enemy ) else
64479: LD_VAR 0 1
64483: PPUSH
64484: LD_VAR 0 2
64488: PPUSH
64489: CALL_OW 115
64493: GO 64514
// ComAgressiveMove ( unit , x , y ) ;
64495: LD_VAR 0 1
64499: PPUSH
64500: LD_VAR 0 4
64504: PPUSH
64505: LD_VAR 0 5
64509: PPUSH
64510: CALL_OW 114
// end ;
64514: LD_VAR 0 3
64518: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
64519: LD_INT 0
64521: PPUSH
64522: PPUSH
64523: PPUSH
// list := AreaToList ( area , 0 ) ;
64524: LD_ADDR_VAR 0 5
64528: PUSH
64529: LD_VAR 0 1
64533: PPUSH
64534: LD_INT 0
64536: PPUSH
64537: CALL_OW 517
64541: ST_TO_ADDR
// if not list then
64542: LD_VAR 0 5
64546: NOT
64547: IFFALSE 64551
// exit ;
64549: GO 64681
// if all then
64551: LD_VAR 0 2
64555: IFFALSE 64643
// begin for i := 1 to list [ 1 ] do
64557: LD_ADDR_VAR 0 4
64561: PUSH
64562: DOUBLE
64563: LD_INT 1
64565: DEC
64566: ST_TO_ADDR
64567: LD_VAR 0 5
64571: PUSH
64572: LD_INT 1
64574: ARRAY
64575: PUSH
64576: FOR_TO
64577: IFFALSE 64639
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
64579: LD_ADDR_VAR 0 3
64583: PUSH
64584: LD_VAR 0 3
64588: PPUSH
64589: LD_VAR 0 3
64593: PUSH
64594: LD_INT 1
64596: PLUS
64597: PPUSH
64598: LD_VAR 0 5
64602: PUSH
64603: LD_INT 1
64605: ARRAY
64606: PUSH
64607: LD_VAR 0 4
64611: ARRAY
64612: PUSH
64613: LD_VAR 0 5
64617: PUSH
64618: LD_INT 2
64620: ARRAY
64621: PUSH
64622: LD_VAR 0 4
64626: ARRAY
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: PPUSH
64632: CALL_OW 1
64636: ST_TO_ADDR
64637: GO 64576
64639: POP
64640: POP
// exit ;
64641: GO 64681
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
64643: LD_ADDR_VAR 0 3
64647: PUSH
64648: LD_VAR 0 5
64652: PUSH
64653: LD_INT 1
64655: ARRAY
64656: PUSH
64657: LD_INT 1
64659: ARRAY
64660: PUSH
64661: LD_VAR 0 5
64665: PUSH
64666: LD_INT 2
64668: ARRAY
64669: PUSH
64670: LD_INT 1
64672: ARRAY
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: EMPTY
64679: LIST
64680: ST_TO_ADDR
// end ;
64681: LD_VAR 0 3
64685: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
64686: LD_INT 0
64688: PPUSH
64689: PPUSH
// list := AreaToList ( area , 0 ) ;
64690: LD_ADDR_VAR 0 4
64694: PUSH
64695: LD_VAR 0 1
64699: PPUSH
64700: LD_INT 0
64702: PPUSH
64703: CALL_OW 517
64707: ST_TO_ADDR
// if not list then
64708: LD_VAR 0 4
64712: NOT
64713: IFFALSE 64717
// exit ;
64715: GO 64758
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
64717: LD_ADDR_VAR 0 3
64721: PUSH
64722: LD_VAR 0 4
64726: PUSH
64727: LD_INT 1
64729: ARRAY
64730: PUSH
64731: LD_INT 1
64733: ARRAY
64734: PUSH
64735: LD_VAR 0 4
64739: PUSH
64740: LD_INT 2
64742: ARRAY
64743: PUSH
64744: LD_INT 1
64746: ARRAY
64747: PUSH
64748: LD_VAR 0 2
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: LIST
64757: ST_TO_ADDR
// end ;
64758: LD_VAR 0 3
64762: RET
// export function First ( array ) ; begin
64763: LD_INT 0
64765: PPUSH
// if not array then
64766: LD_VAR 0 1
64770: NOT
64771: IFFALSE 64775
// exit ;
64773: GO 64789
// result := array [ 1 ] ;
64775: LD_ADDR_VAR 0 2
64779: PUSH
64780: LD_VAR 0 1
64784: PUSH
64785: LD_INT 1
64787: ARRAY
64788: ST_TO_ADDR
// end ;
64789: LD_VAR 0 2
64793: RET
// export function Last ( array ) ; begin
64794: LD_INT 0
64796: PPUSH
// if not array then
64797: LD_VAR 0 1
64801: NOT
64802: IFFALSE 64806
// exit ;
64804: GO 64822
// result := array [ array ] ;
64806: LD_ADDR_VAR 0 2
64810: PUSH
64811: LD_VAR 0 1
64815: PUSH
64816: LD_VAR 0 1
64820: ARRAY
64821: ST_TO_ADDR
// end ;
64822: LD_VAR 0 2
64826: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
64827: LD_INT 0
64829: PPUSH
64830: PPUSH
// result := [ ] ;
64831: LD_ADDR_VAR 0 5
64835: PUSH
64836: EMPTY
64837: ST_TO_ADDR
// if not array then
64838: LD_VAR 0 1
64842: NOT
64843: IFFALSE 64847
// exit ;
64845: GO 64959
// for i := 1 to array do
64847: LD_ADDR_VAR 0 6
64851: PUSH
64852: DOUBLE
64853: LD_INT 1
64855: DEC
64856: ST_TO_ADDR
64857: LD_VAR 0 1
64861: PUSH
64862: FOR_TO
64863: IFFALSE 64957
// if array [ i ] [ index ] = value then
64865: LD_VAR 0 1
64869: PUSH
64870: LD_VAR 0 6
64874: ARRAY
64875: PUSH
64876: LD_VAR 0 2
64880: ARRAY
64881: PUSH
64882: LD_VAR 0 3
64886: EQUAL
64887: IFFALSE 64955
// begin if indexColumn then
64889: LD_VAR 0 4
64893: IFFALSE 64929
// result := Join ( result , array [ i ] [ indexColumn ] ) else
64895: LD_ADDR_VAR 0 5
64899: PUSH
64900: LD_VAR 0 5
64904: PPUSH
64905: LD_VAR 0 1
64909: PUSH
64910: LD_VAR 0 6
64914: ARRAY
64915: PUSH
64916: LD_VAR 0 4
64920: ARRAY
64921: PPUSH
64922: CALL 59967 0 2
64926: ST_TO_ADDR
64927: GO 64955
// result := Join ( result , array [ i ] ) ;
64929: LD_ADDR_VAR 0 5
64933: PUSH
64934: LD_VAR 0 5
64938: PPUSH
64939: LD_VAR 0 1
64943: PUSH
64944: LD_VAR 0 6
64948: ARRAY
64949: PPUSH
64950: CALL 59967 0 2
64954: ST_TO_ADDR
// end ;
64955: GO 64862
64957: POP
64958: POP
// end ;
64959: LD_VAR 0 5
64963: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
64964: LD_INT 0
64966: PPUSH
// if not vehicles or not parkingPoint then
64967: LD_VAR 0 1
64971: NOT
64972: IFTRUE 64981
64974: PUSH
64975: LD_VAR 0 2
64979: NOT
64980: OR
64981: IFFALSE 64985
// exit ;
64983: GO 65083
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
64985: LD_ADDR_VAR 0 1
64989: PUSH
64990: LD_VAR 0 1
64994: PPUSH
64995: LD_INT 50
64997: PUSH
64998: EMPTY
64999: LIST
65000: PUSH
65001: LD_INT 3
65003: PUSH
65004: LD_INT 92
65006: PUSH
65007: LD_VAR 0 2
65011: PUSH
65012: LD_INT 1
65014: ARRAY
65015: PUSH
65016: LD_VAR 0 2
65020: PUSH
65021: LD_INT 2
65023: ARRAY
65024: PUSH
65025: LD_INT 8
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: LIST
65032: LIST
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PPUSH
65042: CALL_OW 72
65046: ST_TO_ADDR
// if not vehicles then
65047: LD_VAR 0 1
65051: NOT
65052: IFFALSE 65056
// exit ;
65054: GO 65083
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
65056: LD_VAR 0 1
65060: PPUSH
65061: LD_VAR 0 2
65065: PUSH
65066: LD_INT 1
65068: ARRAY
65069: PPUSH
65070: LD_VAR 0 2
65074: PUSH
65075: LD_INT 2
65077: ARRAY
65078: PPUSH
65079: CALL_OW 111
// end ;
65083: LD_VAR 0 3
65087: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
65088: LD_INT 0
65090: PPUSH
65091: PPUSH
65092: PPUSH
// if not side or not area then
65093: LD_VAR 0 1
65097: NOT
65098: IFTRUE 65107
65100: PUSH
65101: LD_VAR 0 2
65105: NOT
65106: OR
65107: IFFALSE 65111
// exit ;
65109: GO 65230
// tmp := AreaToList ( area , 0 ) ;
65111: LD_ADDR_VAR 0 5
65115: PUSH
65116: LD_VAR 0 2
65120: PPUSH
65121: LD_INT 0
65123: PPUSH
65124: CALL_OW 517
65128: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
65129: LD_ADDR_VAR 0 4
65133: PUSH
65134: DOUBLE
65135: LD_INT 1
65137: DEC
65138: ST_TO_ADDR
65139: LD_VAR 0 5
65143: PUSH
65144: LD_INT 1
65146: ARRAY
65147: PUSH
65148: FOR_TO
65149: IFFALSE 65228
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
65151: LD_VAR 0 5
65155: PUSH
65156: LD_INT 1
65158: ARRAY
65159: PUSH
65160: LD_VAR 0 4
65164: ARRAY
65165: PPUSH
65166: LD_VAR 0 5
65170: PUSH
65171: LD_INT 2
65173: ARRAY
65174: PUSH
65175: LD_VAR 0 4
65179: ARRAY
65180: PPUSH
65181: CALL_OW 351
65185: IFFALSE 65226
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
65187: LD_VAR 0 5
65191: PUSH
65192: LD_INT 1
65194: ARRAY
65195: PUSH
65196: LD_VAR 0 4
65200: ARRAY
65201: PPUSH
65202: LD_VAR 0 5
65206: PUSH
65207: LD_INT 2
65209: ARRAY
65210: PUSH
65211: LD_VAR 0 4
65215: ARRAY
65216: PPUSH
65217: LD_VAR 0 1
65221: PPUSH
65222: CALL_OW 244
// end ;
65226: GO 65148
65228: POP
65229: POP
// end ;
65230: LD_VAR 0 3
65234: RET
// export function UniqueArray ( array ) ; var i ; begin
65235: LD_INT 0
65237: PPUSH
65238: PPUSH
// result := [ ] ;
65239: LD_ADDR_VAR 0 2
65243: PUSH
65244: EMPTY
65245: ST_TO_ADDR
// if not array then
65246: LD_VAR 0 1
65250: NOT
65251: IFFALSE 65255
// exit ;
65253: GO 65316
// for i := 1 to array do
65255: LD_ADDR_VAR 0 3
65259: PUSH
65260: DOUBLE
65261: LD_INT 1
65263: DEC
65264: ST_TO_ADDR
65265: LD_VAR 0 1
65269: PUSH
65270: FOR_TO
65271: IFFALSE 65314
// if not array [ i ] in result then
65273: LD_VAR 0 1
65277: PUSH
65278: LD_VAR 0 3
65282: ARRAY
65283: PUSH
65284: LD_VAR 0 2
65288: IN
65289: NOT
65290: IFFALSE 65312
// result := Join ( result , i ) ;
65292: LD_ADDR_VAR 0 2
65296: PUSH
65297: LD_VAR 0 2
65301: PPUSH
65302: LD_VAR 0 3
65306: PPUSH
65307: CALL 59967 0 2
65311: ST_TO_ADDR
65312: GO 65270
65314: POP
65315: POP
// end ; end_of_file
65316: LD_VAR 0 2
65320: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeFamine do var i , canWin ;
65321: LD_EXP 48
65325: IFFALSE 65333
65327: PUSH
65328: CALL 65543 0 0
65332: AND
65333: IFFALSE 65341
65335: PUSH
65336: LD_OWVAR 4
65340: AND
65341: IFFALSE 65540
65343: GO 65345
65345: DISABLE
65346: LD_INT 0
65348: PPUSH
65349: PPUSH
// begin canWin := false ;
65350: LD_ADDR_VAR 0 2
65354: PUSH
65355: LD_INT 0
65357: ST_TO_ADDR
// if not HasPower ( your_side ) then
65358: LD_OWVAR 2
65362: PPUSH
65363: CALL 65585 0 1
65367: NOT
65368: IFFALSE 65379
// begin Multiplayer_Loose_Message ;
65370: CALL_OW 521
// enable ( mpLose ) ;
65374: LD_INT 102
65376: ENABLE_MARKED
// end else
65377: GO 65540
// begin canWin := true ;
65379: LD_ADDR_VAR 0 2
65383: PUSH
65384: LD_INT 1
65386: ST_TO_ADDR
// for i := 1 to 8 do
65387: LD_ADDR_VAR 0 1
65391: PUSH
65392: DOUBLE
65393: LD_INT 1
65395: DEC
65396: ST_TO_ADDR
65397: LD_INT 8
65399: PUSH
65400: FOR_TO
65401: IFFALSE 65526
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
65403: LD_EXP 16
65407: PUSH
65408: LD_VAR 0 1
65412: ARRAY
65413: IFFALSE 65426
65415: PUSH
65416: LD_VAR 0 1
65420: PPUSH
65421: CALL_OW 108
65425: AND
65426: IFFALSE 65440
65428: PUSH
65429: LD_VAR 0 1
65433: PUSH
65434: LD_OWVAR 2
65438: NONEQUAL
65439: AND
65440: IFFALSE 65524
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
65442: LD_EXP 17
65446: PUSH
65447: LD_VAR 0 1
65451: ARRAY
65452: NOT
65453: IFTRUE 65501
65455: PUSH
65456: LD_EXP 17
65460: PUSH
65461: LD_VAR 0 1
65465: ARRAY
65466: PUSH
65467: LD_EXP 17
65471: PUSH
65472: LD_OWVAR 2
65476: ARRAY
65477: NONEQUAL
65478: IFFALSE 65500
65480: PUSH
65481: LD_OWVAR 2
65485: PPUSH
65486: LD_VAR 0 1
65490: PPUSH
65491: CALL_OW 81
65495: PUSH
65496: LD_INT 1
65498: NONEQUAL
65499: AND
65500: OR
65501: IFFALSE 65524
// if HasPower ( i ) then
65503: LD_VAR 0 1
65507: PPUSH
65508: CALL 65585 0 1
65512: IFFALSE 65524
// begin canWin := false ;
65514: LD_ADDR_VAR 0 2
65518: PUSH
65519: LD_INT 0
65521: ST_TO_ADDR
// break ;
65522: GO 65526
// end ;
65524: GO 65400
65526: POP
65527: POP
// if canWin then
65528: LD_VAR 0 2
65532: IFFALSE 65539
// enable ( mpWin ) else
65534: LD_INT 101
65536: ENABLE_MARKED
65537: GO 65540
// enable ;
65539: ENABLE
// end ; end ;
65540: PPOPN 2
65542: END
// function CanWinLoose ; begin
65543: LD_INT 0
65545: PPUSH
// result := true ;
65546: LD_ADDR_VAR 0 1
65550: PUSH
65551: LD_INT 1
65553: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
65554: CALL_OW 531
65558: IFFALSE 65570
65560: PUSH
65561: CALL_OW 519
65565: PUSH
65566: LD_INT 1
65568: GREATER
65569: AND
65570: IFFALSE 65580
// result := false ;
65572: LD_ADDR_VAR 0 1
65576: PUSH
65577: LD_INT 0
65579: ST_TO_ADDR
// end ;
65580: LD_VAR 0 1
65584: RET
// function HasPower ( i ) ; begin
65585: LD_INT 0
65587: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
65588: LD_ADDR_VAR 0 2
65592: PUSH
65593: LD_INT 22
65595: PUSH
65596: LD_VAR 0 1
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: PUSH
65605: LD_INT 2
65607: PUSH
65608: LD_INT 21
65610: PUSH
65611: LD_INT 1
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: PUSH
65618: LD_INT 33
65620: PUSH
65621: LD_INT 3
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PUSH
65628: LD_INT 33
65630: PUSH
65631: LD_INT 5
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PPUSH
65648: CALL_OW 69
65652: ST_TO_ADDR
// end ;
65653: LD_VAR 0 2
65657: RET
// export function FamineDeposits ( areas , values , type ) ; var i , j , list ; begin
65658: LD_INT 0
65660: PPUSH
65661: PPUSH
65662: PPUSH
65663: PPUSH
// if not areas or not values or not type in [ mat_oil , mat_siberit ] then
65664: LD_VAR 0 1
65668: NOT
65669: IFTRUE 65678
65671: PUSH
65672: LD_VAR 0 2
65676: NOT
65677: OR
65678: IFTRUE 65698
65680: PUSH
65681: LD_VAR 0 3
65685: PUSH
65686: LD_INT 2
65688: PUSH
65689: LD_INT 3
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: IN
65696: NOT
65697: OR
65698: IFFALSE 65702
// exit ;
65700: GO 65952
// for i := 1 to Count ( areas ) do
65702: LD_ADDR_VAR 0 5
65706: PUSH
65707: DOUBLE
65708: LD_INT 1
65710: DEC
65711: ST_TO_ADDR
65712: LD_VAR 0 1
65716: PPUSH
65717: CALL 24035 0 1
65721: PUSH
65722: FOR_TO
65723: IFFALSE 65950
// begin list := AreaToList ( areas [ i ] , 0 ) ;
65725: LD_ADDR_VAR 0 7
65729: PUSH
65730: LD_VAR 0 1
65734: PUSH
65735: LD_VAR 0 5
65739: ARRAY
65740: PPUSH
65741: LD_INT 0
65743: PPUSH
65744: CALL_OW 517
65748: ST_TO_ADDR
// for j := 1 to list [ 1 ] do
65749: LD_ADDR_VAR 0 6
65753: PUSH
65754: DOUBLE
65755: LD_INT 1
65757: DEC
65758: ST_TO_ADDR
65759: LD_VAR 0 7
65763: PUSH
65764: LD_INT 1
65766: ARRAY
65767: PUSH
65768: FOR_TO
65769: IFFALSE 65946
// begin CreateDepositXY ( list [ 1 ] [ j ] , list [ 2 ] [ j ] , type ) ;
65771: LD_VAR 0 7
65775: PUSH
65776: LD_INT 1
65778: ARRAY
65779: PUSH
65780: LD_VAR 0 6
65784: ARRAY
65785: PPUSH
65786: LD_VAR 0 7
65790: PUSH
65791: LD_INT 2
65793: ARRAY
65794: PUSH
65795: LD_VAR 0 6
65799: ARRAY
65800: PPUSH
65801: LD_VAR 0 3
65805: PPUSH
65806: CALL_OW 62
// if type = mat_oil then
65810: LD_VAR 0 3
65814: PUSH
65815: LD_INT 2
65817: EQUAL
65818: IFFALSE 65883
// mpGlobalOilDeposits := Join ( mpGlobalOilDeposits , [ list [ 1 ] [ j ] , list [ 2 ] [ j ] , values [ i ] ] ) else
65820: LD_ADDR_EXP 50
65824: PUSH
65825: LD_EXP 50
65829: PPUSH
65830: LD_VAR 0 7
65834: PUSH
65835: LD_INT 1
65837: ARRAY
65838: PUSH
65839: LD_VAR 0 6
65843: ARRAY
65844: PUSH
65845: LD_VAR 0 7
65849: PUSH
65850: LD_INT 2
65852: ARRAY
65853: PUSH
65854: LD_VAR 0 6
65858: ARRAY
65859: PUSH
65860: LD_VAR 0 2
65864: PUSH
65865: LD_VAR 0 5
65869: ARRAY
65870: PUSH
65871: EMPTY
65872: LIST
65873: LIST
65874: LIST
65875: PPUSH
65876: CALL 59967 0 2
65880: ST_TO_ADDR
65881: GO 65944
// mpGlobalSibDeposits := Join ( mpGlobalSibDeposits , [ list [ 1 ] [ j ] , list [ 2 ] [ j ] , values [ i ] ] ) end ;
65883: LD_ADDR_EXP 51
65887: PUSH
65888: LD_EXP 51
65892: PPUSH
65893: LD_VAR 0 7
65897: PUSH
65898: LD_INT 1
65900: ARRAY
65901: PUSH
65902: LD_VAR 0 6
65906: ARRAY
65907: PUSH
65908: LD_VAR 0 7
65912: PUSH
65913: LD_INT 2
65915: ARRAY
65916: PUSH
65917: LD_VAR 0 6
65921: ARRAY
65922: PUSH
65923: LD_VAR 0 2
65927: PUSH
65928: LD_VAR 0 5
65932: ARRAY
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: LIST
65938: PPUSH
65939: CALL 59967 0 2
65943: ST_TO_ADDR
65944: GO 65768
65946: POP
65947: POP
// end ;
65948: GO 65722
65950: POP
65951: POP
// end ; end_of_file
65952: LD_VAR 0 4
65956: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
65957: PPOPN 6
65959: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
65960: LD_EXP 12
65964: PUSH
65965: LD_INT 4
65967: EQUAL
65968: IFFALSE 66004
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
65970: LD_STRING setGameDifficulty(
65972: PUSH
65973: LD_OWVAR 67
65977: STR
65978: PUSH
65979: LD_STRING )
65981: STR
65982: PPUSH
65983: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
65987: LD_STRING displayDifficulty(
65989: PUSH
65990: LD_OWVAR 67
65994: STR
65995: PUSH
65996: LD_STRING )
65998: STR
65999: PPUSH
66000: CALL_OW 559
// end ; SOS_MapStart ( ) ;
66004: CALL 14987 0 0
// end ;
66008: PPOPN 1
66010: END
