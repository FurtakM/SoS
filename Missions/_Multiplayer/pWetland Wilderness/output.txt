// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 45680 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 45987 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 4
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 3 , 6 , 9 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 3
 394: PUSH
 395: LD_INT 6
 397: PUSH
 398: LD_INT 9
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 3 3$0 ] ;
 522: LD_ADDR_EXP 6
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 6300
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeNormal ;
 624: LD_ADDR_EXP 3
 628: PUSH
 629: LD_INT 1
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 640: LD_ADDR_EXP 7
 644: PUSH
 645: LD_INT 8
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 7
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 679: LD_ADDR_EXP 8
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: LD_INT 3
 698: PUSH
 699: LD_INT 4
 701: PUSH
 702: LD_INT 4
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 1 , 2 , 3 , 1 , 2 , 3 , 1 , 2 ] ;
 718: LD_ADDR_EXP 9
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 2
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: LD_INT 2
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 1
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 757: LD_ADDR_EXP 10
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 8
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 2
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 4
 784: PUSH
 785: LD_INT 5
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 6
 794: PUSH
 795: LD_INT 7
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: ST_TO_ADDR
// mpTeamGame := true ;
 808: LD_ADDR_EXP 11
 812: PUSH
 813: LD_INT 1
 815: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 816: LD_ADDR_EXP 29
 820: PUSH
 821: LD_INT 160
 823: PUSH
 824: LD_INT 200
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// end ;
 831: LD_VAR 0 1
 835: RET
// export kingArea , kingCamArea ; export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 836: LD_INT 0
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 845: LD_ADDR_EXP 19
 849: PUSH
 850: LD_INT 1
 852: PUSH
 853: LD_INT 2
 855: PUSH
 856: LD_INT 3
 858: PUSH
 859: LD_INT 4
 861: PUSH
 862: LD_INT 5
 864: PUSH
 865: LD_INT 6
 867: PUSH
 868: LD_INT 7
 870: PUSH
 871: LD_INT 8
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 884: LD_ADDR_EXP 18
 888: PUSH
 889: LD_INT 10
 891: PUSH
 892: LD_INT 11
 894: PUSH
 895: LD_INT 12
 897: PUSH
 898: LD_INT 13
 900: PUSH
 901: LD_INT 14
 903: PUSH
 904: LD_INT 15
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: LIST
 912: LIST
 913: LIST
 914: PUSH
 915: LD_EXP 19
 919: UNION
 920: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 921: LD_VAR 0 1
 925: PUSH
 926: LD_INT 2
 928: EQUAL
 929: IFFALSE 941
// baseLevel := 1 else
 931: LD_ADDR_VAR 0 7
 935: PUSH
 936: LD_INT 1
 938: ST_TO_ADDR
 939: GO 955
// baseLevel := mpGameSettings [ 1 ] ;
 941: LD_ADDR_VAR 0 7
 945: PUSH
 946: LD_EXP 6
 950: PUSH
 951: LD_INT 1
 953: ARRAY
 954: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 955: LD_ADDR_EXP 24
 959: PUSH
 960: LD_EXP 6
 964: PUSH
 965: LD_INT 2
 967: ARRAY
 968: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 969: LD_ADDR_EXP 25
 973: PUSH
 974: LD_EXP 6
 978: PUSH
 979: LD_INT 3
 981: ARRAY
 982: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 983: LD_ADDR_EXP 15
 987: PUSH
 988: LD_EXP 6
 992: PUSH
 993: LD_INT 4
 995: ARRAY
 996: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
 997: LD_ADDR_EXP 27
1001: PUSH
1002: LD_EXP 6
1006: PUSH
1007: LD_INT 5
1009: ARRAY
1010: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1011: LD_ADDR_VAR 0 5
1015: PUSH
1016: LD_EXP 6
1020: PUSH
1021: LD_INT 6
1023: ARRAY
1024: PUSH
1025: LD_INT 0
1027: GREATER
1028: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1029: LD_ADDR_VAR 0 6
1033: PUSH
1034: LD_EXP 6
1038: PUSH
1039: LD_INT 7
1041: ARRAY
1042: PUSH
1043: LD_INT 0
1045: GREATER
1046: ST_TO_ADDR
// kingCamArea := 0 ;
1047: LD_ADDR_EXP 2
1051: PUSH
1052: LD_INT 0
1054: ST_TO_ADDR
// kingArea := 0 ;
1055: LD_ADDR_EXP 1
1059: PUSH
1060: LD_INT 0
1062: ST_TO_ADDR
// if gameType = GameTypeKing then
1063: LD_VAR 0 1
1067: PUSH
1068: LD_INT 3
1070: EQUAL
1071: IFFALSE 1111
// begin mpKingArea := 0 ;
1073: LD_ADDR_EXP 33
1077: PUSH
1078: LD_INT 0
1080: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1081: LD_ADDR_EXP 34
1085: PUSH
1086: LD_EXP 6
1090: PUSH
1091: LD_INT 8
1093: ARRAY
1094: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1095: LD_ADDR_EXP 36
1099: PUSH
1100: LD_EXP 6
1104: PUSH
1105: LD_INT 10
1107: ARRAY
1108: ST_TO_ADDR
// end else
1109: GO 1135
// begin mpKingArea := 0 ;
1111: LD_ADDR_EXP 33
1115: PUSH
1116: LD_INT 0
1118: ST_TO_ADDR
// mpPoints := 0 ;
1119: LD_ADDR_EXP 34
1123: PUSH
1124: LD_INT 0
1126: ST_TO_ADDR
// mpEmissions := 0 ;
1127: LD_ADDR_EXP 36
1131: PUSH
1132: LD_INT 0
1134: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1135: LD_EXP 6
1139: PUSH
1140: LD_INT 9
1142: ARRAY
1143: IFFALSE 1275
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1145: LD_ADDR_EXP 35
1149: PUSH
1150: LD_INT 1
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: LD_INT 1
1158: PUSH
1159: LD_INT 2
1161: PUSH
1162: EMPTY
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: PUSH
1168: LD_INT 1
1170: PUSH
1171: LD_INT 1
1173: PUSH
1174: LD_INT 1
1176: PUSH
1177: LD_INT 3
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PUSH
1190: LD_INT 12
1192: PUSH
1193: LD_INT 1
1195: PUSH
1196: LD_INT 1
1198: PUSH
1199: LD_INT 24
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: LIST
1206: LIST
1207: PUSH
1208: LD_INT 12
1210: PUSH
1211: LD_INT 1
1213: PUSH
1214: LD_INT 1
1216: PUSH
1217: LD_INT 23
1219: PUSH
1220: EMPTY
1221: LIST
1222: LIST
1223: LIST
1224: LIST
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: PUSH
1230: LD_INT 21
1232: PUSH
1233: LD_INT 1
1235: PUSH
1236: LD_INT 1
1238: PUSH
1239: LD_INT 42
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: LIST
1246: LIST
1247: PUSH
1248: LD_INT 21
1250: PUSH
1251: LD_INT 1
1253: PUSH
1254: LD_INT 1
1256: PUSH
1257: LD_INT 42
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: PUSH
1266: EMPTY
1267: LIST
1268: LIST
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: LIST
1274: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1275: LD_ADDR_EXP 16
1279: PUSH
1280: LD_EXP 6
1284: PUSH
1285: LD_INT 11
1287: ARRAY
1288: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1289: LD_ADDR_EXP 22
1293: PUSH
1294: LD_EXP 6
1298: PUSH
1299: LD_INT 12
1301: ARRAY
1302: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1303: LD_ADDR_EXP 26
1307: PUSH
1308: LD_EXP 6
1312: PUSH
1313: LD_INT 13
1315: ARRAY
1316: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1317: LD_ADDR_EXP 32
1321: PUSH
1322: LD_EXP 6
1326: PUSH
1327: LD_INT 14
1329: ARRAY
1330: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1331: LD_ADDR_EXP 30
1335: PUSH
1336: LD_EXP 6
1340: PUSH
1341: LD_INT 15
1343: ARRAY
1344: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1345: LD_ADDR_EXP 28
1349: PUSH
1350: LD_EXP 6
1354: PUSH
1355: LD_INT 18
1357: ARRAY
1358: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1359: LD_ADDR_EXP 20
1363: PUSH
1364: LD_EXP 6
1368: PUSH
1369: LD_INT 21
1371: ARRAY
1372: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1373: LD_ADDR_EXP 31
1377: PUSH
1378: LD_INT 64
1380: PUSH
1381: LD_INT 65
1383: PUSH
1384: LD_INT 66
1386: PUSH
1387: LD_INT 67
1389: PUSH
1390: LD_INT 68
1392: PUSH
1393: LD_INT 69
1395: PUSH
1396: LD_INT 70
1398: PUSH
1399: LD_INT 71
1401: PUSH
1402: EMPTY
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 2 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 3 ) , GetBuildingFromArea ( depotArea4 , 4 ) , GetBuildingFromArea ( depotArea5 , 5 ) , GetBuildingFromArea ( depotArea6 , 0 ) , GetBuildingFromArea ( depotArea7 , 0 ) , GetBuildingFromArea ( depotArea8 , 1 ) ] ;
1412: LD_ADDR_VAR 0 8
1416: PUSH
1417: LD_INT 16
1419: PPUSH
1420: LD_INT 2
1422: PPUSH
1423: CALL 45135 0 2
1427: PUSH
1428: LD_INT 22
1430: PPUSH
1431: LD_INT 2
1433: PPUSH
1434: CALL 45135 0 2
1438: PUSH
1439: LD_INT 28
1441: PPUSH
1442: LD_INT 3
1444: PPUSH
1445: CALL 45135 0 2
1449: PUSH
1450: LD_INT 34
1452: PPUSH
1453: LD_INT 4
1455: PPUSH
1456: CALL 45135 0 2
1460: PUSH
1461: LD_INT 40
1463: PPUSH
1464: LD_INT 5
1466: PPUSH
1467: CALL 45135 0 2
1471: PUSH
1472: LD_INT 46
1474: PPUSH
1475: LD_INT 0
1477: PPUSH
1478: CALL 45135 0 2
1482: PUSH
1483: LD_INT 52
1485: PPUSH
1486: LD_INT 0
1488: PPUSH
1489: CALL 45135 0 2
1493: PUSH
1494: LD_INT 58
1496: PPUSH
1497: LD_INT 1
1499: PPUSH
1500: CALL 45135 0 2
1504: PUSH
1505: EMPTY
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1515: LD_ADDR_VAR 0 3
1519: PUSH
1520: DOUBLE
1521: LD_INT 1
1523: DEC
1524: ST_TO_ADDR
1525: LD_VAR 0 8
1529: PPUSH
1530: CALL 5007 0 1
1534: PUSH
1535: FOR_TO
1536: IFFALSE 1640
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1538: LD_ADDR_EXP 21
1542: PUSH
1543: LD_EXP 21
1547: PPUSH
1548: LD_VAR 0 3
1552: PPUSH
1553: LD_VAR 0 8
1557: PUSH
1558: LD_VAR 0 3
1562: ARRAY
1563: PUSH
1564: LD_INT 1
1566: ARRAY
1567: PPUSH
1568: LD_VAR 0 8
1572: PUSH
1573: LD_VAR 0 3
1577: ARRAY
1578: PUSH
1579: LD_INT 3
1581: ARRAY
1582: PPUSH
1583: LD_INT 10
1585: PPUSH
1586: CALL_OW 272
1590: PUSH
1591: LD_VAR 0 8
1595: PUSH
1596: LD_VAR 0 3
1600: ARRAY
1601: PUSH
1602: LD_INT 2
1604: ARRAY
1605: PPUSH
1606: LD_VAR 0 8
1610: PUSH
1611: LD_VAR 0 3
1615: ARRAY
1616: PUSH
1617: LD_INT 3
1619: ARRAY
1620: PPUSH
1621: LD_INT 10
1623: PPUSH
1624: CALL_OW 273
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: PPUSH
1633: CALL_OW 1
1637: ST_TO_ADDR
1638: GO 1535
1640: POP
1641: POP
// if hasOil then
1642: LD_VAR 0 5
1646: IFFALSE 1785
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1648: LD_ADDR_VAR 0 4
1652: PUSH
1653: LD_EXP 6
1657: PUSH
1658: LD_INT 6
1660: ARRAY
1661: PUSH
1662: LD_INT 2
1664: EQUAL
1665: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1666: LD_ADDR_EXP 12
1670: PUSH
1671: LD_INT 17
1673: PPUSH
1674: LD_VAR 0 4
1678: PPUSH
1679: CALL 44968 0 2
1683: PUSH
1684: LD_INT 23
1686: PPUSH
1687: LD_VAR 0 4
1691: PPUSH
1692: CALL 44968 0 2
1696: PUSH
1697: LD_INT 29
1699: PPUSH
1700: LD_VAR 0 4
1704: PPUSH
1705: CALL 44968 0 2
1709: PUSH
1710: LD_INT 35
1712: PPUSH
1713: LD_VAR 0 4
1717: PPUSH
1718: CALL 44968 0 2
1722: PUSH
1723: LD_INT 41
1725: PPUSH
1726: LD_VAR 0 4
1730: PPUSH
1731: CALL 44968 0 2
1735: PUSH
1736: LD_INT 47
1738: PPUSH
1739: LD_VAR 0 4
1743: PPUSH
1744: CALL 44968 0 2
1748: PUSH
1749: LD_INT 53
1751: PPUSH
1752: LD_VAR 0 4
1756: PPUSH
1757: CALL 44968 0 2
1761: PUSH
1762: LD_INT 59
1764: PPUSH
1765: LD_VAR 0 4
1769: PPUSH
1770: CALL 44968 0 2
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: LIST
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: ST_TO_ADDR
// end ; if hasSib then
1785: LD_VAR 0 6
1789: IFFALSE 1928
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1791: LD_ADDR_VAR 0 4
1795: PUSH
1796: LD_EXP 6
1800: PUSH
1801: LD_INT 7
1803: ARRAY
1804: PUSH
1805: LD_INT 2
1807: EQUAL
1808: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1809: LD_ADDR_EXP 13
1813: PUSH
1814: LD_INT 18
1816: PPUSH
1817: LD_VAR 0 4
1821: PPUSH
1822: CALL 44968 0 2
1826: PUSH
1827: LD_INT 24
1829: PPUSH
1830: LD_VAR 0 4
1834: PPUSH
1835: CALL 44968 0 2
1839: PUSH
1840: LD_INT 30
1842: PPUSH
1843: LD_VAR 0 4
1847: PPUSH
1848: CALL 44968 0 2
1852: PUSH
1853: LD_INT 36
1855: PPUSH
1856: LD_VAR 0 4
1860: PPUSH
1861: CALL 44968 0 2
1865: PUSH
1866: LD_INT 42
1868: PPUSH
1869: LD_VAR 0 4
1873: PPUSH
1874: CALL 44968 0 2
1878: PUSH
1879: LD_INT 48
1881: PPUSH
1882: LD_VAR 0 4
1886: PPUSH
1887: CALL 44968 0 2
1891: PUSH
1892: LD_INT 54
1894: PPUSH
1895: LD_VAR 0 4
1899: PPUSH
1900: CALL 44968 0 2
1904: PUSH
1905: LD_INT 60
1907: PPUSH
1908: LD_VAR 0 4
1912: PPUSH
1913: CALL 44968 0 2
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1928: LD_VAR 0 7
1932: PUSH
1933: LD_INT 1
1935: GREATEREQUAL
1936: IFFALSE 1948
// mpDepots := startPos ;
1938: LD_ADDR_EXP 14
1942: PUSH
1943: LD_VAR 0 8
1947: ST_TO_ADDR
// if baseLevel >= 2 then
1948: LD_VAR 0 7
1952: PUSH
1953: LD_INT 2
1955: GREATEREQUAL
1956: IFFALSE 2373
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 5 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 0 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 4 ) ] ] ;
1958: LD_ADDR_EXP 17
1962: PUSH
1963: LD_INT 31
1965: PUSH
1966: LD_INT 19
1968: PPUSH
1969: LD_INT 4
1971: PPUSH
1972: CALL 45135 0 2
1976: ADD
1977: PUSH
1978: LD_INT 31
1980: PUSH
1981: LD_INT 20
1983: PPUSH
1984: LD_INT 0
1986: PPUSH
1987: CALL 45135 0 2
1991: ADD
1992: PUSH
1993: LD_INT 4
1995: PUSH
1996: LD_INT 21
1998: PPUSH
1999: LD_INT 5
2001: PPUSH
2002: CALL 45135 0 2
2006: ADD
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: PUSH
2013: LD_INT 31
2015: PUSH
2016: LD_INT 25
2018: PPUSH
2019: LD_INT 1
2021: PPUSH
2022: CALL 45135 0 2
2026: ADD
2027: PUSH
2028: LD_INT 31
2030: PUSH
2031: LD_INT 26
2033: PPUSH
2034: LD_INT 4
2036: PPUSH
2037: CALL 45135 0 2
2041: ADD
2042: PUSH
2043: LD_INT 4
2045: PUSH
2046: LD_INT 27
2048: PPUSH
2049: LD_INT 5
2051: PPUSH
2052: CALL 45135 0 2
2056: ADD
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: LIST
2062: PUSH
2063: LD_INT 31
2065: PUSH
2066: LD_INT 31
2068: PPUSH
2069: LD_INT 0
2071: PPUSH
2072: CALL 45135 0 2
2076: ADD
2077: PUSH
2078: LD_INT 31
2080: PUSH
2081: LD_INT 32
2083: PPUSH
2084: LD_INT 5
2086: PPUSH
2087: CALL 45135 0 2
2091: ADD
2092: PUSH
2093: LD_INT 4
2095: PUSH
2096: LD_INT 33
2098: PPUSH
2099: LD_INT 0
2101: PPUSH
2102: CALL 45135 0 2
2106: ADD
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: LIST
2112: PUSH
2113: LD_INT 31
2115: PUSH
2116: LD_INT 37
2118: PPUSH
2119: LD_INT 2
2121: PPUSH
2122: CALL 45135 0 2
2126: ADD
2127: PUSH
2128: LD_INT 31
2130: PUSH
2131: LD_INT 38
2133: PPUSH
2134: LD_INT 0
2136: PPUSH
2137: CALL 45135 0 2
2141: ADD
2142: PUSH
2143: LD_INT 4
2145: PUSH
2146: LD_INT 39
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: CALL 45135 0 2
2156: ADD
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: LIST
2162: PUSH
2163: LD_INT 31
2165: PUSH
2166: LD_INT 43
2168: PPUSH
2169: LD_INT 1
2171: PPUSH
2172: CALL 45135 0 2
2176: ADD
2177: PUSH
2178: LD_INT 31
2180: PUSH
2181: LD_INT 44
2183: PPUSH
2184: LD_INT 2
2186: PPUSH
2187: CALL 45135 0 2
2191: ADD
2192: PUSH
2193: LD_INT 4
2195: PUSH
2196: LD_INT 45
2198: PPUSH
2199: LD_INT 2
2201: PPUSH
2202: CALL 45135 0 2
2206: ADD
2207: PUSH
2208: EMPTY
2209: LIST
2210: LIST
2211: LIST
2212: PUSH
2213: LD_INT 31
2215: PUSH
2216: LD_INT 49
2218: PPUSH
2219: LD_INT 4
2221: PPUSH
2222: CALL 45135 0 2
2226: ADD
2227: PUSH
2228: LD_INT 31
2230: PUSH
2231: LD_INT 50
2233: PPUSH
2234: LD_INT 1
2236: PPUSH
2237: CALL 45135 0 2
2241: ADD
2242: PUSH
2243: LD_INT 4
2245: PUSH
2246: LD_INT 51
2248: PPUSH
2249: LD_INT 3
2251: PPUSH
2252: CALL 45135 0 2
2256: ADD
2257: PUSH
2258: EMPTY
2259: LIST
2260: LIST
2261: LIST
2262: PUSH
2263: LD_INT 31
2265: PUSH
2266: LD_INT 55
2268: PPUSH
2269: LD_INT 4
2271: PPUSH
2272: CALL 45135 0 2
2276: ADD
2277: PUSH
2278: LD_INT 31
2280: PUSH
2281: LD_INT 56
2283: PPUSH
2284: LD_INT 2
2286: PPUSH
2287: CALL 45135 0 2
2291: ADD
2292: PUSH
2293: LD_INT 4
2295: PUSH
2296: LD_INT 57
2298: PPUSH
2299: LD_INT 3
2301: PPUSH
2302: CALL 45135 0 2
2306: ADD
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: LIST
2312: PUSH
2313: LD_INT 31
2315: PUSH
2316: LD_INT 61
2318: PPUSH
2319: LD_INT 5
2321: PPUSH
2322: CALL 45135 0 2
2326: ADD
2327: PUSH
2328: LD_INT 31
2330: PUSH
2331: LD_INT 62
2333: PPUSH
2334: LD_INT 3
2336: PPUSH
2337: CALL 45135 0 2
2341: ADD
2342: PUSH
2343: LD_INT 4
2345: PUSH
2346: LD_INT 63
2348: PPUSH
2349: LD_INT 4
2351: PPUSH
2352: CALL 45135 0 2
2356: ADD
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: LIST
2362: PUSH
2363: EMPTY
2364: LIST
2365: LIST
2366: LIST
2367: LIST
2368: LIST
2369: LIST
2370: LIST
2371: LIST
2372: ST_TO_ADDR
// end ; end ;
2373: LD_VAR 0 2
2377: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2378: GO 2380
2380: DISABLE
2381: LD_INT 0
2383: PPUSH
2384: PPUSH
2385: PPUSH
2386: PPUSH
2387: PPUSH
2388: PPUSH
2389: PPUSH
2390: PPUSH
// begin if not mpShipments then
2391: LD_EXP 27
2395: NOT
2396: IFFALSE 2400
// exit ;
2398: GO 2830
// case mpShipments of 1 :
2400: LD_EXP 27
2404: PUSH
2405: LD_INT 1
2407: DOUBLE
2408: EQUAL
2409: IFTRUE 2413
2411: GO 2448
2413: POP
// begin time := 0 0$30 ;
2414: LD_ADDR_VAR 0 5
2418: PUSH
2419: LD_INT 1050
2421: ST_TO_ADDR
// normalTime := 0 0$30 ;
2422: LD_ADDR_VAR 0 6
2426: PUSH
2427: LD_INT 1050
2429: ST_TO_ADDR
// maxTime := 1 1$20 ;
2430: LD_ADDR_VAR 0 8
2434: PUSH
2435: LD_INT 2800
2437: ST_TO_ADDR
// delayTime := 0 0$5 ;
2438: LD_ADDR_VAR 0 7
2442: PUSH
2443: LD_INT 175
2445: ST_TO_ADDR
// end ; 2 :
2446: GO 2578
2448: LD_INT 2
2450: DOUBLE
2451: EQUAL
2452: IFTRUE 2456
2454: GO 2491
2456: POP
// begin time := 0 0$25 ;
2457: LD_ADDR_VAR 0 5
2461: PUSH
2462: LD_INT 875
2464: ST_TO_ADDR
// normalTime := 0 0$25 ;
2465: LD_ADDR_VAR 0 6
2469: PUSH
2470: LD_INT 875
2472: ST_TO_ADDR
// maxTime := 1 1$10 ;
2473: LD_ADDR_VAR 0 8
2477: PUSH
2478: LD_INT 2450
2480: ST_TO_ADDR
// delayTime := 0 0$4 ;
2481: LD_ADDR_VAR 0 7
2485: PUSH
2486: LD_INT 140
2488: ST_TO_ADDR
// end ; 3 :
2489: GO 2578
2491: LD_INT 3
2493: DOUBLE
2494: EQUAL
2495: IFTRUE 2499
2497: GO 2534
2499: POP
// begin time := 0 0$20 ;
2500: LD_ADDR_VAR 0 5
2504: PUSH
2505: LD_INT 700
2507: ST_TO_ADDR
// normalTime := 0 0$20 ;
2508: LD_ADDR_VAR 0 6
2512: PUSH
2513: LD_INT 700
2515: ST_TO_ADDR
// maxTime := 1 1$00 ;
2516: LD_ADDR_VAR 0 8
2520: PUSH
2521: LD_INT 2100
2523: ST_TO_ADDR
// delayTime := 0 0$3 ;
2524: LD_ADDR_VAR 0 7
2528: PUSH
2529: LD_INT 105
2531: ST_TO_ADDR
// end ; 4 :
2532: GO 2578
2534: LD_INT 4
2536: DOUBLE
2537: EQUAL
2538: IFTRUE 2542
2540: GO 2577
2542: POP
// begin time := 0 0$15 ;
2543: LD_ADDR_VAR 0 5
2547: PUSH
2548: LD_INT 525
2550: ST_TO_ADDR
// normalTime := 0 0$15 ;
2551: LD_ADDR_VAR 0 6
2555: PUSH
2556: LD_INT 525
2558: ST_TO_ADDR
// maxTime := 0 0$55 ;
2559: LD_ADDR_VAR 0 8
2563: PUSH
2564: LD_INT 1925
2566: ST_TO_ADDR
// delayTime := 0 0$2 ;
2567: LD_ADDR_VAR 0 7
2571: PUSH
2572: LD_INT 70
2574: ST_TO_ADDR
// end ; end ;
2575: GO 2578
2577: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2578: LD_ADDR_VAR 0 4
2582: PUSH
2583: LD_INT 10
2585: PUSH
2586: LD_INT 11
2588: PUSH
2589: LD_INT 12
2591: PUSH
2592: LD_INT 13
2594: PUSH
2595: LD_INT 14
2597: PUSH
2598: LD_INT 15
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: LIST
2605: LIST
2606: LIST
2607: LIST
2608: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2609: LD_ADDR_VAR 0 3
2613: PUSH
2614: LD_INT 1
2616: PUSH
2617: LD_INT 2
2619: PUSH
2620: LD_INT 3
2622: PUSH
2623: LD_INT 4
2625: PUSH
2626: LD_INT 5
2628: PUSH
2629: LD_INT 6
2631: PUSH
2632: LD_INT 7
2634: PUSH
2635: LD_INT 8
2637: PUSH
2638: EMPTY
2639: LIST
2640: LIST
2641: LIST
2642: LIST
2643: LIST
2644: LIST
2645: LIST
2646: LIST
2647: ST_TO_ADDR
// for i := 1 to 8 do
2648: LD_ADDR_VAR 0 1
2652: PUSH
2653: DOUBLE
2654: LD_INT 1
2656: DEC
2657: ST_TO_ADDR
2658: LD_INT 8
2660: PUSH
2661: FOR_TO
2662: IFFALSE 2709
// begin if not mpSidePositions [ i ] then
2664: LD_EXP 7
2668: PUSH
2669: LD_VAR 0 1
2673: ARRAY
2674: NOT
2675: IFFALSE 2679
// continue ;
2677: GO 2661
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2679: LD_ADDR_VAR 0 4
2683: PUSH
2684: LD_VAR 0 4
2688: PUSH
2689: LD_VAR 0 3
2693: PUSH
2694: LD_EXP 7
2698: PUSH
2699: LD_VAR 0 1
2703: ARRAY
2704: ARRAY
2705: ADD
2706: ST_TO_ADDR
// end ;
2707: GO 2661
2709: POP
2710: POP
// repeat wait ( time ) ;
2711: LD_VAR 0 5
2715: PPUSH
2716: CALL_OW 67
// x := rand ( 1 , 5 ) ;
2720: LD_ADDR_VAR 0 2
2724: PUSH
2725: LD_INT 1
2727: PPUSH
2728: LD_INT 5
2730: PPUSH
2731: CALL_OW 12
2735: ST_TO_ADDR
// for i in areas do
2736: LD_ADDR_VAR 0 1
2740: PUSH
2741: LD_VAR 0 4
2745: PUSH
2746: FOR_IN
2747: IFFALSE 2786
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2749: LD_VAR 0 1
2753: PPUSH
2754: LD_INT 1
2756: PPUSH
2757: CALL_OW 287
2761: PUSH
2762: LD_INT 20
2764: LESS
2765: IFFALSE 2784
// begin CreateCratesArea ( x , i , true ) ;
2767: LD_VAR 0 2
2771: PPUSH
2772: LD_VAR 0 1
2776: PPUSH
2777: LD_INT 1
2779: PPUSH
2780: CALL_OW 55
// end ; end ;
2784: GO 2746
2786: POP
2787: POP
// time := time + delayTime ;
2788: LD_ADDR_VAR 0 5
2792: PUSH
2793: LD_VAR 0 5
2797: PUSH
2798: LD_VAR 0 7
2802: PLUS
2803: ST_TO_ADDR
// if time > maxTime then
2804: LD_VAR 0 5
2808: PUSH
2809: LD_VAR 0 8
2813: GREATER
2814: IFFALSE 2826
// time := normalTime ;
2816: LD_ADDR_VAR 0 5
2820: PUSH
2821: LD_VAR 0 6
2825: ST_TO_ADDR
// until false ;
2826: LD_INT 0
2828: IFFALSE 2711
// end ; end_of_file
2830: PPOPN 8
2832: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2833: LD_VAR 0 1
2837: PPUSH
2838: CALL 69290 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2842: LD_VAR 0 1
2846: PPUSH
2847: CALL 50272 0 1
// end ;
2851: PPOPN 1
2853: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2854: LD_VAR 0 1
2858: PPUSH
2859: CALL 69307 0 1
// end ;
2863: PPOPN 1
2865: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2866: LD_VAR 0 1
2870: PPUSH
2871: LD_VAR 0 2
2875: PPUSH
2876: CALL 69348 0 2
2880: PPOPN 2
2882: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2883: LD_VAR 0 1
2887: PPUSH
2888: LD_VAR 0 2
2892: PPUSH
2893: LD_VAR 0 3
2897: PPUSH
2898: CALL 50771 0 3
2902: PPOPN 3
2904: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2905: LD_INT 0
2907: PPUSH
2908: PPUSH
// if exist_mode then
2909: LD_VAR 0 2
2913: IFFALSE 2938
// unit := CreateCharacter ( prefix & ident ) else
2915: LD_ADDR_VAR 0 5
2919: PUSH
2920: LD_VAR 0 3
2924: PUSH
2925: LD_VAR 0 1
2929: STR
2930: PPUSH
2931: CALL_OW 34
2935: ST_TO_ADDR
2936: GO 2953
// unit := NewCharacter ( ident ) ;
2938: LD_ADDR_VAR 0 5
2942: PUSH
2943: LD_VAR 0 1
2947: PPUSH
2948: CALL_OW 25
2952: ST_TO_ADDR
// result := unit ;
2953: LD_ADDR_VAR 0 4
2957: PUSH
2958: LD_VAR 0 5
2962: ST_TO_ADDR
// end ;
2963: LD_VAR 0 4
2967: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2968: LD_INT 0
2970: PPUSH
2971: PPUSH
// if not side or not nation then
2972: LD_VAR 0 1
2976: NOT
2977: PUSH
2978: LD_VAR 0 2
2982: NOT
2983: OR
2984: IFFALSE 2988
// exit ;
2986: GO 3756
// case nation of nation_american :
2988: LD_VAR 0 2
2992: PUSH
2993: LD_INT 1
2995: DOUBLE
2996: EQUAL
2997: IFTRUE 3001
2999: GO 3215
3001: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3002: LD_ADDR_VAR 0 4
3006: PUSH
3007: LD_INT 35
3009: PUSH
3010: LD_INT 45
3012: PUSH
3013: LD_INT 46
3015: PUSH
3016: LD_INT 47
3018: PUSH
3019: LD_INT 82
3021: PUSH
3022: LD_INT 83
3024: PUSH
3025: LD_INT 84
3027: PUSH
3028: LD_INT 85
3030: PUSH
3031: LD_INT 86
3033: PUSH
3034: LD_INT 1
3036: PUSH
3037: LD_INT 2
3039: PUSH
3040: LD_INT 6
3042: PUSH
3043: LD_INT 15
3045: PUSH
3046: LD_INT 16
3048: PUSH
3049: LD_INT 7
3051: PUSH
3052: LD_INT 12
3054: PUSH
3055: LD_INT 13
3057: PUSH
3058: LD_INT 10
3060: PUSH
3061: LD_INT 14
3063: PUSH
3064: LD_INT 20
3066: PUSH
3067: LD_INT 21
3069: PUSH
3070: LD_INT 22
3072: PUSH
3073: LD_INT 25
3075: PUSH
3076: LD_INT 32
3078: PUSH
3079: LD_INT 27
3081: PUSH
3082: LD_INT 36
3084: PUSH
3085: LD_INT 69
3087: PUSH
3088: LD_INT 39
3090: PUSH
3091: LD_INT 34
3093: PUSH
3094: LD_INT 40
3096: PUSH
3097: LD_INT 48
3099: PUSH
3100: LD_INT 49
3102: PUSH
3103: LD_INT 50
3105: PUSH
3106: LD_INT 51
3108: PUSH
3109: LD_INT 52
3111: PUSH
3112: LD_INT 53
3114: PUSH
3115: LD_INT 54
3117: PUSH
3118: LD_INT 55
3120: PUSH
3121: LD_INT 56
3123: PUSH
3124: LD_INT 57
3126: PUSH
3127: LD_INT 58
3129: PUSH
3130: LD_INT 59
3132: PUSH
3133: LD_INT 60
3135: PUSH
3136: LD_INT 61
3138: PUSH
3139: LD_INT 62
3141: PUSH
3142: LD_INT 80
3144: PUSH
3145: LD_INT 82
3147: PUSH
3148: LD_INT 83
3150: PUSH
3151: LD_INT 84
3153: PUSH
3154: LD_INT 85
3156: PUSH
3157: LD_INT 86
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: LIST
3164: LIST
3165: LIST
3166: LIST
3167: LIST
3168: LIST
3169: LIST
3170: LIST
3171: LIST
3172: LIST
3173: LIST
3174: LIST
3175: LIST
3176: LIST
3177: LIST
3178: LIST
3179: LIST
3180: LIST
3181: LIST
3182: LIST
3183: LIST
3184: LIST
3185: LIST
3186: LIST
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: LIST
3197: LIST
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: LIST
3203: LIST
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: ST_TO_ADDR
3213: GO 3680
3215: LD_INT 2
3217: DOUBLE
3218: EQUAL
3219: IFTRUE 3223
3221: GO 3449
3223: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3224: LD_ADDR_VAR 0 4
3228: PUSH
3229: LD_INT 35
3231: PUSH
3232: LD_INT 45
3234: PUSH
3235: LD_INT 46
3237: PUSH
3238: LD_INT 47
3240: PUSH
3241: LD_INT 82
3243: PUSH
3244: LD_INT 83
3246: PUSH
3247: LD_INT 84
3249: PUSH
3250: LD_INT 85
3252: PUSH
3253: LD_INT 87
3255: PUSH
3256: LD_INT 70
3258: PUSH
3259: LD_INT 1
3261: PUSH
3262: LD_INT 11
3264: PUSH
3265: LD_INT 3
3267: PUSH
3268: LD_INT 4
3270: PUSH
3271: LD_INT 5
3273: PUSH
3274: LD_INT 6
3276: PUSH
3277: LD_INT 15
3279: PUSH
3280: LD_INT 18
3282: PUSH
3283: LD_INT 7
3285: PUSH
3286: LD_INT 17
3288: PUSH
3289: LD_INT 8
3291: PUSH
3292: LD_INT 20
3294: PUSH
3295: LD_INT 21
3297: PUSH
3298: LD_INT 22
3300: PUSH
3301: LD_INT 72
3303: PUSH
3304: LD_INT 26
3306: PUSH
3307: LD_INT 69
3309: PUSH
3310: LD_INT 39
3312: PUSH
3313: LD_INT 40
3315: PUSH
3316: LD_INT 41
3318: PUSH
3319: LD_INT 42
3321: PUSH
3322: LD_INT 43
3324: PUSH
3325: LD_INT 48
3327: PUSH
3328: LD_INT 49
3330: PUSH
3331: LD_INT 50
3333: PUSH
3334: LD_INT 51
3336: PUSH
3337: LD_INT 52
3339: PUSH
3340: LD_INT 53
3342: PUSH
3343: LD_INT 54
3345: PUSH
3346: LD_INT 55
3348: PUSH
3349: LD_INT 56
3351: PUSH
3352: LD_INT 60
3354: PUSH
3355: LD_INT 61
3357: PUSH
3358: LD_INT 62
3360: PUSH
3361: LD_INT 66
3363: PUSH
3364: LD_INT 67
3366: PUSH
3367: LD_INT 68
3369: PUSH
3370: LD_INT 81
3372: PUSH
3373: LD_INT 82
3375: PUSH
3376: LD_INT 83
3378: PUSH
3379: LD_INT 84
3381: PUSH
3382: LD_INT 85
3384: PUSH
3385: LD_INT 87
3387: PUSH
3388: LD_INT 88
3390: PUSH
3391: EMPTY
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: LIST
3411: LIST
3412: LIST
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: LIST
3424: LIST
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: LIST
3435: LIST
3436: LIST
3437: LIST
3438: LIST
3439: LIST
3440: LIST
3441: LIST
3442: LIST
3443: LIST
3444: LIST
3445: LIST
3446: ST_TO_ADDR
3447: GO 3680
3449: LD_INT 3
3451: DOUBLE
3452: EQUAL
3453: IFTRUE 3457
3455: GO 3679
3457: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3458: LD_ADDR_VAR 0 4
3462: PUSH
3463: LD_INT 46
3465: PUSH
3466: LD_INT 47
3468: PUSH
3469: LD_INT 1
3471: PUSH
3472: LD_INT 2
3474: PUSH
3475: LD_INT 82
3477: PUSH
3478: LD_INT 83
3480: PUSH
3481: LD_INT 84
3483: PUSH
3484: LD_INT 85
3486: PUSH
3487: LD_INT 86
3489: PUSH
3490: LD_INT 11
3492: PUSH
3493: LD_INT 9
3495: PUSH
3496: LD_INT 20
3498: PUSH
3499: LD_INT 19
3501: PUSH
3502: LD_INT 21
3504: PUSH
3505: LD_INT 24
3507: PUSH
3508: LD_INT 22
3510: PUSH
3511: LD_INT 25
3513: PUSH
3514: LD_INT 28
3516: PUSH
3517: LD_INT 29
3519: PUSH
3520: LD_INT 30
3522: PUSH
3523: LD_INT 31
3525: PUSH
3526: LD_INT 37
3528: PUSH
3529: LD_INT 38
3531: PUSH
3532: LD_INT 32
3534: PUSH
3535: LD_INT 27
3537: PUSH
3538: LD_INT 33
3540: PUSH
3541: LD_INT 69
3543: PUSH
3544: LD_INT 39
3546: PUSH
3547: LD_INT 34
3549: PUSH
3550: LD_INT 40
3552: PUSH
3553: LD_INT 71
3555: PUSH
3556: LD_INT 23
3558: PUSH
3559: LD_INT 44
3561: PUSH
3562: LD_INT 48
3564: PUSH
3565: LD_INT 49
3567: PUSH
3568: LD_INT 50
3570: PUSH
3571: LD_INT 51
3573: PUSH
3574: LD_INT 52
3576: PUSH
3577: LD_INT 53
3579: PUSH
3580: LD_INT 54
3582: PUSH
3583: LD_INT 55
3585: PUSH
3586: LD_INT 56
3588: PUSH
3589: LD_INT 57
3591: PUSH
3592: LD_INT 58
3594: PUSH
3595: LD_INT 59
3597: PUSH
3598: LD_INT 63
3600: PUSH
3601: LD_INT 64
3603: PUSH
3604: LD_INT 65
3606: PUSH
3607: LD_INT 82
3609: PUSH
3610: LD_INT 83
3612: PUSH
3613: LD_INT 84
3615: PUSH
3616: LD_INT 85
3618: PUSH
3619: LD_INT 86
3621: PUSH
3622: EMPTY
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: LIST
3650: LIST
3651: LIST
3652: LIST
3653: LIST
3654: LIST
3655: LIST
3656: LIST
3657: LIST
3658: LIST
3659: LIST
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: LIST
3665: LIST
3666: LIST
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: LIST
3675: LIST
3676: ST_TO_ADDR
3677: GO 3680
3679: POP
// if state > - 1 and state < 3 then
3680: LD_VAR 0 3
3684: PUSH
3685: LD_INT 1
3687: NEG
3688: GREATER
3689: PUSH
3690: LD_VAR 0 3
3694: PUSH
3695: LD_INT 3
3697: LESS
3698: AND
3699: IFFALSE 3756
// for i in result do
3701: LD_ADDR_VAR 0 5
3705: PUSH
3706: LD_VAR 0 4
3710: PUSH
3711: FOR_IN
3712: IFFALSE 3754
// if GetTech ( i , side ) <> state then
3714: LD_VAR 0 5
3718: PPUSH
3719: LD_VAR 0 1
3723: PPUSH
3724: CALL_OW 321
3728: PUSH
3729: LD_VAR 0 3
3733: NONEQUAL
3734: IFFALSE 3752
// result := result diff i ;
3736: LD_ADDR_VAR 0 4
3740: PUSH
3741: LD_VAR 0 4
3745: PUSH
3746: LD_VAR 0 5
3750: DIFF
3751: ST_TO_ADDR
3752: GO 3711
3754: POP
3755: POP
// end ;
3756: LD_VAR 0 4
3760: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3761: LD_INT 0
3763: PPUSH
3764: PPUSH
3765: PPUSH
// result := true ;
3766: LD_ADDR_VAR 0 3
3770: PUSH
3771: LD_INT 1
3773: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3774: LD_ADDR_VAR 0 5
3778: PUSH
3779: LD_VAR 0 2
3783: PPUSH
3784: CALL_OW 480
3788: ST_TO_ADDR
// if not tmp then
3789: LD_VAR 0 5
3793: NOT
3794: IFFALSE 3798
// exit ;
3796: GO 3847
// for i in tmp do
3798: LD_ADDR_VAR 0 4
3802: PUSH
3803: LD_VAR 0 5
3807: PUSH
3808: FOR_IN
3809: IFFALSE 3845
// if GetTech ( i , side ) <> state_researched then
3811: LD_VAR 0 4
3815: PPUSH
3816: LD_VAR 0 1
3820: PPUSH
3821: CALL_OW 321
3825: PUSH
3826: LD_INT 2
3828: NONEQUAL
3829: IFFALSE 3843
// begin result := false ;
3831: LD_ADDR_VAR 0 3
3835: PUSH
3836: LD_INT 0
3838: ST_TO_ADDR
// exit ;
3839: POP
3840: POP
3841: GO 3847
// end ;
3843: GO 3808
3845: POP
3846: POP
// end ;
3847: LD_VAR 0 3
3851: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3852: LD_INT 0
3854: PPUSH
3855: PPUSH
3856: PPUSH
3857: PPUSH
3858: PPUSH
3859: PPUSH
3860: PPUSH
3861: PPUSH
3862: PPUSH
3863: PPUSH
3864: PPUSH
3865: PPUSH
3866: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3867: LD_VAR 0 1
3871: NOT
3872: PUSH
3873: LD_VAR 0 1
3877: PPUSH
3878: CALL_OW 257
3882: PUSH
3883: LD_INT 9
3885: NONEQUAL
3886: OR
3887: IFFALSE 3891
// exit ;
3889: GO 4464
// side := GetSide ( unit ) ;
3891: LD_ADDR_VAR 0 9
3895: PUSH
3896: LD_VAR 0 1
3900: PPUSH
3901: CALL_OW 255
3905: ST_TO_ADDR
// tech_space := tech_spacanom ;
3906: LD_ADDR_VAR 0 12
3910: PUSH
3911: LD_INT 29
3913: ST_TO_ADDR
// tech_time := tech_taurad ;
3914: LD_ADDR_VAR 0 13
3918: PUSH
3919: LD_INT 28
3921: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3922: LD_ADDR_VAR 0 11
3926: PUSH
3927: LD_VAR 0 1
3931: PPUSH
3932: CALL_OW 310
3936: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3937: LD_VAR 0 11
3941: PPUSH
3942: CALL_OW 247
3946: PUSH
3947: LD_INT 2
3949: EQUAL
3950: IFFALSE 3954
// exit ;
3952: GO 4464
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3954: LD_ADDR_VAR 0 8
3958: PUSH
3959: LD_INT 81
3961: PUSH
3962: LD_VAR 0 9
3966: PUSH
3967: EMPTY
3968: LIST
3969: LIST
3970: PUSH
3971: LD_INT 3
3973: PUSH
3974: LD_INT 21
3976: PUSH
3977: LD_INT 3
3979: PUSH
3980: EMPTY
3981: LIST
3982: LIST
3983: PUSH
3984: EMPTY
3985: LIST
3986: LIST
3987: PUSH
3988: EMPTY
3989: LIST
3990: LIST
3991: PPUSH
3992: CALL_OW 69
3996: ST_TO_ADDR
// if not tmp then
3997: LD_VAR 0 8
4001: NOT
4002: IFFALSE 4006
// exit ;
4004: GO 4464
// if in_unit then
4006: LD_VAR 0 11
4010: IFFALSE 4034
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4012: LD_ADDR_VAR 0 10
4016: PUSH
4017: LD_VAR 0 8
4021: PPUSH
4022: LD_VAR 0 11
4026: PPUSH
4027: CALL_OW 74
4031: ST_TO_ADDR
4032: GO 4054
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4034: LD_ADDR_VAR 0 10
4038: PUSH
4039: LD_VAR 0 8
4043: PPUSH
4044: LD_VAR 0 1
4048: PPUSH
4049: CALL_OW 74
4053: ST_TO_ADDR
// if not enemy then
4054: LD_VAR 0 10
4058: NOT
4059: IFFALSE 4063
// exit ;
4061: GO 4464
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4063: LD_VAR 0 11
4067: PUSH
4068: LD_VAR 0 11
4072: PPUSH
4073: LD_VAR 0 10
4077: PPUSH
4078: CALL_OW 296
4082: PUSH
4083: LD_INT 13
4085: GREATER
4086: AND
4087: PUSH
4088: LD_VAR 0 1
4092: PPUSH
4093: LD_VAR 0 10
4097: PPUSH
4098: CALL_OW 296
4102: PUSH
4103: LD_INT 12
4105: GREATER
4106: OR
4107: IFFALSE 4111
// exit ;
4109: GO 4464
// missile := [ 1 ] ;
4111: LD_ADDR_VAR 0 14
4115: PUSH
4116: LD_INT 1
4118: PUSH
4119: EMPTY
4120: LIST
4121: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4122: LD_VAR 0 9
4126: PPUSH
4127: LD_VAR 0 12
4131: PPUSH
4132: CALL_OW 325
4136: IFFALSE 4165
// missile := Replace ( missile , missile + 1 , 2 ) ;
4138: LD_ADDR_VAR 0 14
4142: PUSH
4143: LD_VAR 0 14
4147: PPUSH
4148: LD_VAR 0 14
4152: PUSH
4153: LD_INT 1
4155: PLUS
4156: PPUSH
4157: LD_INT 2
4159: PPUSH
4160: CALL_OW 1
4164: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4165: LD_VAR 0 9
4169: PPUSH
4170: LD_VAR 0 13
4174: PPUSH
4175: CALL_OW 325
4179: PUSH
4180: LD_VAR 0 10
4184: PPUSH
4185: CALL_OW 255
4189: PPUSH
4190: LD_VAR 0 13
4194: PPUSH
4195: CALL_OW 325
4199: NOT
4200: AND
4201: IFFALSE 4230
// missile := Replace ( missile , missile + 1 , 3 ) ;
4203: LD_ADDR_VAR 0 14
4207: PUSH
4208: LD_VAR 0 14
4212: PPUSH
4213: LD_VAR 0 14
4217: PUSH
4218: LD_INT 1
4220: PLUS
4221: PPUSH
4222: LD_INT 3
4224: PPUSH
4225: CALL_OW 1
4229: ST_TO_ADDR
// if missile < 2 then
4230: LD_VAR 0 14
4234: PUSH
4235: LD_INT 2
4237: LESS
4238: IFFALSE 4242
// exit ;
4240: GO 4464
// x := GetX ( enemy ) ;
4242: LD_ADDR_VAR 0 4
4246: PUSH
4247: LD_VAR 0 10
4251: PPUSH
4252: CALL_OW 250
4256: ST_TO_ADDR
// y := GetY ( enemy ) ;
4257: LD_ADDR_VAR 0 5
4261: PUSH
4262: LD_VAR 0 10
4266: PPUSH
4267: CALL_OW 251
4271: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4272: LD_ADDR_VAR 0 6
4276: PUSH
4277: LD_VAR 0 4
4281: PUSH
4282: LD_INT 1
4284: NEG
4285: PPUSH
4286: LD_INT 1
4288: PPUSH
4289: CALL_OW 12
4293: PLUS
4294: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4295: LD_ADDR_VAR 0 7
4299: PUSH
4300: LD_VAR 0 5
4304: PUSH
4305: LD_INT 1
4307: NEG
4308: PPUSH
4309: LD_INT 1
4311: PPUSH
4312: CALL_OW 12
4316: PLUS
4317: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4318: LD_VAR 0 6
4322: PPUSH
4323: LD_VAR 0 7
4327: PPUSH
4328: CALL_OW 488
4332: NOT
4333: IFFALSE 4355
// begin _x := x ;
4335: LD_ADDR_VAR 0 6
4339: PUSH
4340: LD_VAR 0 4
4344: ST_TO_ADDR
// _y := y ;
4345: LD_ADDR_VAR 0 7
4349: PUSH
4350: LD_VAR 0 5
4354: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4355: LD_ADDR_VAR 0 3
4359: PUSH
4360: LD_INT 1
4362: PPUSH
4363: LD_VAR 0 14
4367: PPUSH
4368: CALL_OW 12
4372: ST_TO_ADDR
// case i of 1 :
4373: LD_VAR 0 3
4377: PUSH
4378: LD_INT 1
4380: DOUBLE
4381: EQUAL
4382: IFTRUE 4386
4384: GO 4403
4386: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4387: LD_VAR 0 1
4391: PPUSH
4392: LD_VAR 0 10
4396: PPUSH
4397: CALL_OW 115
4401: GO 4464
4403: LD_INT 2
4405: DOUBLE
4406: EQUAL
4407: IFTRUE 4411
4409: GO 4433
4411: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4412: LD_VAR 0 1
4416: PPUSH
4417: LD_VAR 0 6
4421: PPUSH
4422: LD_VAR 0 7
4426: PPUSH
4427: CALL_OW 153
4431: GO 4464
4433: LD_INT 3
4435: DOUBLE
4436: EQUAL
4437: IFTRUE 4441
4439: GO 4463
4441: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4442: LD_VAR 0 1
4446: PPUSH
4447: LD_VAR 0 6
4451: PPUSH
4452: LD_VAR 0 7
4456: PPUSH
4457: CALL_OW 154
4461: GO 4464
4463: POP
// end ;
4464: LD_VAR 0 2
4468: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4469: LD_INT 0
4471: PPUSH
4472: PPUSH
4473: PPUSH
4474: PPUSH
4475: PPUSH
4476: PPUSH
// if not unit or not building then
4477: LD_VAR 0 1
4481: NOT
4482: PUSH
4483: LD_VAR 0 2
4487: NOT
4488: OR
4489: IFFALSE 4493
// exit ;
4491: GO 4651
// x := GetX ( building ) ;
4493: LD_ADDR_VAR 0 5
4497: PUSH
4498: LD_VAR 0 2
4502: PPUSH
4503: CALL_OW 250
4507: ST_TO_ADDR
// y := GetY ( building ) ;
4508: LD_ADDR_VAR 0 6
4512: PUSH
4513: LD_VAR 0 2
4517: PPUSH
4518: CALL_OW 251
4522: ST_TO_ADDR
// for i = 0 to 5 do
4523: LD_ADDR_VAR 0 4
4527: PUSH
4528: DOUBLE
4529: LD_INT 0
4531: DEC
4532: ST_TO_ADDR
4533: LD_INT 5
4535: PUSH
4536: FOR_TO
4537: IFFALSE 4649
// begin _x := ShiftX ( x , i , 3 ) ;
4539: LD_ADDR_VAR 0 7
4543: PUSH
4544: LD_VAR 0 5
4548: PPUSH
4549: LD_VAR 0 4
4553: PPUSH
4554: LD_INT 3
4556: PPUSH
4557: CALL_OW 272
4561: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4562: LD_ADDR_VAR 0 8
4566: PUSH
4567: LD_VAR 0 6
4571: PPUSH
4572: LD_VAR 0 4
4576: PPUSH
4577: LD_INT 3
4579: PPUSH
4580: CALL_OW 273
4584: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4585: LD_VAR 0 7
4589: PPUSH
4590: LD_VAR 0 8
4594: PPUSH
4595: CALL_OW 488
4599: NOT
4600: IFFALSE 4604
// continue ;
4602: GO 4536
// if HexInfo ( _x , _y ) = 0 then
4604: LD_VAR 0 7
4608: PPUSH
4609: LD_VAR 0 8
4613: PPUSH
4614: CALL_OW 428
4618: PUSH
4619: LD_INT 0
4621: EQUAL
4622: IFFALSE 4647
// begin ComMoveXY ( unit , _x , _y ) ;
4624: LD_VAR 0 1
4628: PPUSH
4629: LD_VAR 0 7
4633: PPUSH
4634: LD_VAR 0 8
4638: PPUSH
4639: CALL_OW 111
// exit ;
4643: POP
4644: POP
4645: GO 4651
// end ; end ;
4647: GO 4536
4649: POP
4650: POP
// end ;
4651: LD_VAR 0 3
4655: RET
// export function ScanBase ( side , base_area ) ; begin
4656: LD_INT 0
4658: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4659: LD_ADDR_VAR 0 3
4663: PUSH
4664: LD_VAR 0 2
4668: PPUSH
4669: LD_INT 81
4671: PUSH
4672: LD_VAR 0 1
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: PPUSH
4681: CALL_OW 70
4685: ST_TO_ADDR
// end ;
4686: LD_VAR 0 3
4690: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4691: LD_INT 0
4693: PPUSH
4694: PPUSH
4695: PPUSH
4696: PPUSH
// result := false ;
4697: LD_ADDR_VAR 0 2
4701: PUSH
4702: LD_INT 0
4704: ST_TO_ADDR
// side := GetSide ( unit ) ;
4705: LD_ADDR_VAR 0 3
4709: PUSH
4710: LD_VAR 0 1
4714: PPUSH
4715: CALL_OW 255
4719: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4720: LD_ADDR_VAR 0 4
4724: PUSH
4725: LD_VAR 0 1
4729: PPUSH
4730: CALL_OW 248
4734: ST_TO_ADDR
// case nat of 1 :
4735: LD_VAR 0 4
4739: PUSH
4740: LD_INT 1
4742: DOUBLE
4743: EQUAL
4744: IFTRUE 4748
4746: GO 4759
4748: POP
// tech := tech_lassight ; 2 :
4749: LD_ADDR_VAR 0 5
4753: PUSH
4754: LD_INT 12
4756: ST_TO_ADDR
4757: GO 4798
4759: LD_INT 2
4761: DOUBLE
4762: EQUAL
4763: IFTRUE 4767
4765: GO 4778
4767: POP
// tech := tech_mortar ; 3 :
4768: LD_ADDR_VAR 0 5
4772: PUSH
4773: LD_INT 41
4775: ST_TO_ADDR
4776: GO 4798
4778: LD_INT 3
4780: DOUBLE
4781: EQUAL
4782: IFTRUE 4786
4784: GO 4797
4786: POP
// tech := tech_bazooka ; end ;
4787: LD_ADDR_VAR 0 5
4791: PUSH
4792: LD_INT 44
4794: ST_TO_ADDR
4795: GO 4798
4797: POP
// if Researched ( side , tech ) then
4798: LD_VAR 0 3
4802: PPUSH
4803: LD_VAR 0 5
4807: PPUSH
4808: CALL_OW 325
4812: IFFALSE 4839
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4814: LD_ADDR_VAR 0 2
4818: PUSH
4819: LD_INT 5
4821: PUSH
4822: LD_INT 8
4824: PUSH
4825: LD_INT 9
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: LIST
4832: PUSH
4833: LD_VAR 0 4
4837: ARRAY
4838: ST_TO_ADDR
// end ;
4839: LD_VAR 0 2
4843: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4844: LD_INT 0
4846: PPUSH
4847: PPUSH
4848: PPUSH
// if not mines then
4849: LD_VAR 0 2
4853: NOT
4854: IFFALSE 4858
// exit ;
4856: GO 5002
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4858: LD_ADDR_VAR 0 5
4862: PUSH
4863: LD_INT 81
4865: PUSH
4866: LD_VAR 0 1
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: PUSH
4875: LD_INT 3
4877: PUSH
4878: LD_INT 21
4880: PUSH
4881: LD_INT 3
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: PUSH
4888: EMPTY
4889: LIST
4890: LIST
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: PPUSH
4896: CALL_OW 69
4900: ST_TO_ADDR
// for i in mines do
4901: LD_ADDR_VAR 0 4
4905: PUSH
4906: LD_VAR 0 2
4910: PUSH
4911: FOR_IN
4912: IFFALSE 5000
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4914: LD_VAR 0 4
4918: PUSH
4919: LD_INT 1
4921: ARRAY
4922: PPUSH
4923: LD_VAR 0 4
4927: PUSH
4928: LD_INT 2
4930: ARRAY
4931: PPUSH
4932: CALL_OW 458
4936: NOT
4937: IFFALSE 4941
// continue ;
4939: GO 4911
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4941: LD_VAR 0 4
4945: PUSH
4946: LD_INT 1
4948: ARRAY
4949: PPUSH
4950: LD_VAR 0 4
4954: PUSH
4955: LD_INT 2
4957: ARRAY
4958: PPUSH
4959: CALL_OW 428
4963: PUSH
4964: LD_VAR 0 5
4968: IN
4969: IFFALSE 4998
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
4971: LD_VAR 0 4
4975: PUSH
4976: LD_INT 1
4978: ARRAY
4979: PPUSH
4980: LD_VAR 0 4
4984: PUSH
4985: LD_INT 2
4987: ARRAY
4988: PPUSH
4989: LD_VAR 0 1
4993: PPUSH
4994: CALL_OW 456
// end ;
4998: GO 4911
5000: POP
5001: POP
// end ;
5002: LD_VAR 0 3
5006: RET
// export function Count ( array ) ; begin
5007: LD_INT 0
5009: PPUSH
// result := array + 0 ;
5010: LD_ADDR_VAR 0 2
5014: PUSH
5015: LD_VAR 0 1
5019: PUSH
5020: LD_INT 0
5022: PLUS
5023: ST_TO_ADDR
// end ;
5024: LD_VAR 0 2
5028: RET
// export function IsEmpty ( building ) ; begin
5029: LD_INT 0
5031: PPUSH
// if not building then
5032: LD_VAR 0 1
5036: NOT
5037: IFFALSE 5041
// exit ;
5039: GO 5084
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5041: LD_ADDR_VAR 0 2
5045: PUSH
5046: LD_VAR 0 1
5050: PUSH
5051: LD_INT 22
5053: PUSH
5054: LD_VAR 0 1
5058: PPUSH
5059: CALL_OW 255
5063: PUSH
5064: EMPTY
5065: LIST
5066: LIST
5067: PUSH
5068: LD_INT 58
5070: PUSH
5071: EMPTY
5072: LIST
5073: PUSH
5074: EMPTY
5075: LIST
5076: LIST
5077: PPUSH
5078: CALL_OW 69
5082: IN
5083: ST_TO_ADDR
// end ;
5084: LD_VAR 0 2
5088: RET
// export function IsNotFull ( building ) ; var places ; begin
5089: LD_INT 0
5091: PPUSH
5092: PPUSH
// if not building then
5093: LD_VAR 0 1
5097: NOT
5098: IFFALSE 5102
// exit ;
5100: GO 5130
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5102: LD_ADDR_VAR 0 2
5106: PUSH
5107: LD_VAR 0 1
5111: PPUSH
5112: LD_INT 3
5114: PUSH
5115: LD_INT 62
5117: PUSH
5118: EMPTY
5119: LIST
5120: PUSH
5121: EMPTY
5122: LIST
5123: LIST
5124: PPUSH
5125: CALL_OW 72
5129: ST_TO_ADDR
// end ;
5130: LD_VAR 0 2
5134: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5135: LD_INT 0
5137: PPUSH
5138: PPUSH
5139: PPUSH
5140: PPUSH
// tmp := [ ] ;
5141: LD_ADDR_VAR 0 3
5145: PUSH
5146: EMPTY
5147: ST_TO_ADDR
// list := [ ] ;
5148: LD_ADDR_VAR 0 5
5152: PUSH
5153: EMPTY
5154: ST_TO_ADDR
// for i = 16 to 25 do
5155: LD_ADDR_VAR 0 4
5159: PUSH
5160: DOUBLE
5161: LD_INT 16
5163: DEC
5164: ST_TO_ADDR
5165: LD_INT 25
5167: PUSH
5168: FOR_TO
5169: IFFALSE 5242
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5171: LD_ADDR_VAR 0 3
5175: PUSH
5176: LD_VAR 0 3
5180: PUSH
5181: LD_INT 22
5183: PUSH
5184: LD_VAR 0 1
5188: PPUSH
5189: CALL_OW 255
5193: PUSH
5194: EMPTY
5195: LIST
5196: LIST
5197: PUSH
5198: LD_INT 91
5200: PUSH
5201: LD_VAR 0 1
5205: PUSH
5206: LD_INT 6
5208: PUSH
5209: EMPTY
5210: LIST
5211: LIST
5212: LIST
5213: PUSH
5214: LD_INT 30
5216: PUSH
5217: LD_VAR 0 4
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: PUSH
5226: EMPTY
5227: LIST
5228: LIST
5229: LIST
5230: PUSH
5231: EMPTY
5232: LIST
5233: PPUSH
5234: CALL_OW 69
5238: ADD
5239: ST_TO_ADDR
5240: GO 5168
5242: POP
5243: POP
// for i = 1 to tmp do
5244: LD_ADDR_VAR 0 4
5248: PUSH
5249: DOUBLE
5250: LD_INT 1
5252: DEC
5253: ST_TO_ADDR
5254: LD_VAR 0 3
5258: PUSH
5259: FOR_TO
5260: IFFALSE 5348
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5262: LD_ADDR_VAR 0 5
5266: PUSH
5267: LD_VAR 0 5
5271: PUSH
5272: LD_VAR 0 3
5276: PUSH
5277: LD_VAR 0 4
5281: ARRAY
5282: PPUSH
5283: CALL_OW 266
5287: PUSH
5288: LD_VAR 0 3
5292: PUSH
5293: LD_VAR 0 4
5297: ARRAY
5298: PPUSH
5299: CALL_OW 250
5303: PUSH
5304: LD_VAR 0 3
5308: PUSH
5309: LD_VAR 0 4
5313: ARRAY
5314: PPUSH
5315: CALL_OW 251
5319: PUSH
5320: LD_VAR 0 3
5324: PUSH
5325: LD_VAR 0 4
5329: ARRAY
5330: PPUSH
5331: CALL_OW 254
5335: PUSH
5336: EMPTY
5337: LIST
5338: LIST
5339: LIST
5340: LIST
5341: PUSH
5342: EMPTY
5343: LIST
5344: ADD
5345: ST_TO_ADDR
5346: GO 5259
5348: POP
5349: POP
// result := list ;
5350: LD_ADDR_VAR 0 2
5354: PUSH
5355: LD_VAR 0 5
5359: ST_TO_ADDR
// end ;
5360: LD_VAR 0 2
5364: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5365: LD_INT 0
5367: PPUSH
5368: PPUSH
5369: PPUSH
5370: PPUSH
5371: PPUSH
5372: PPUSH
5373: PPUSH
// if not factory then
5374: LD_VAR 0 1
5378: NOT
5379: IFFALSE 5383
// exit ;
5381: GO 5976
// if control = control_apeman then
5383: LD_VAR 0 4
5387: PUSH
5388: LD_INT 5
5390: EQUAL
5391: IFFALSE 5500
// begin tmp := UnitsInside ( factory ) ;
5393: LD_ADDR_VAR 0 8
5397: PUSH
5398: LD_VAR 0 1
5402: PPUSH
5403: CALL_OW 313
5407: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5408: LD_VAR 0 8
5412: PPUSH
5413: LD_INT 25
5415: PUSH
5416: LD_INT 12
5418: PUSH
5419: EMPTY
5420: LIST
5421: LIST
5422: PPUSH
5423: CALL_OW 72
5427: NOT
5428: IFFALSE 5438
// control := control_manual ;
5430: LD_ADDR_VAR 0 4
5434: PUSH
5435: LD_INT 1
5437: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5438: LD_ADDR_VAR 0 8
5442: PUSH
5443: LD_VAR 0 1
5447: PPUSH
5448: CALL 5135 0 1
5452: ST_TO_ADDR
// if tmp then
5453: LD_VAR 0 8
5457: IFFALSE 5500
// begin for i in tmp do
5459: LD_ADDR_VAR 0 7
5463: PUSH
5464: LD_VAR 0 8
5468: PUSH
5469: FOR_IN
5470: IFFALSE 5498
// if i [ 1 ] = b_ext_radio then
5472: LD_VAR 0 7
5476: PUSH
5477: LD_INT 1
5479: ARRAY
5480: PUSH
5481: LD_INT 22
5483: EQUAL
5484: IFFALSE 5496
// begin control := control_remote ;
5486: LD_ADDR_VAR 0 4
5490: PUSH
5491: LD_INT 2
5493: ST_TO_ADDR
// break ;
5494: GO 5498
// end ;
5496: GO 5469
5498: POP
5499: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5500: LD_VAR 0 1
5504: PPUSH
5505: LD_VAR 0 2
5509: PPUSH
5510: LD_VAR 0 3
5514: PPUSH
5515: LD_VAR 0 4
5519: PPUSH
5520: LD_VAR 0 5
5524: PPUSH
5525: CALL_OW 448
5529: IFFALSE 5564
// begin result := [ chassis , engine , control , weapon ] ;
5531: LD_ADDR_VAR 0 6
5535: PUSH
5536: LD_VAR 0 2
5540: PUSH
5541: LD_VAR 0 3
5545: PUSH
5546: LD_VAR 0 4
5550: PUSH
5551: LD_VAR 0 5
5555: PUSH
5556: EMPTY
5557: LIST
5558: LIST
5559: LIST
5560: LIST
5561: ST_TO_ADDR
// exit ;
5562: GO 5976
// end ; _chassis := AvailableChassisList ( factory ) ;
5564: LD_ADDR_VAR 0 9
5568: PUSH
5569: LD_VAR 0 1
5573: PPUSH
5574: CALL_OW 475
5578: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5579: LD_ADDR_VAR 0 11
5583: PUSH
5584: LD_VAR 0 1
5588: PPUSH
5589: CALL_OW 476
5593: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5594: LD_ADDR_VAR 0 12
5598: PUSH
5599: LD_VAR 0 1
5603: PPUSH
5604: CALL_OW 477
5608: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5609: LD_ADDR_VAR 0 10
5613: PUSH
5614: LD_VAR 0 1
5618: PPUSH
5619: CALL_OW 478
5623: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5624: LD_VAR 0 9
5628: NOT
5629: PUSH
5630: LD_VAR 0 11
5634: NOT
5635: OR
5636: PUSH
5637: LD_VAR 0 12
5641: NOT
5642: OR
5643: PUSH
5644: LD_VAR 0 10
5648: NOT
5649: OR
5650: IFFALSE 5685
// begin result := [ chassis , engine , control , weapon ] ;
5652: LD_ADDR_VAR 0 6
5656: PUSH
5657: LD_VAR 0 2
5661: PUSH
5662: LD_VAR 0 3
5666: PUSH
5667: LD_VAR 0 4
5671: PUSH
5672: LD_VAR 0 5
5676: PUSH
5677: EMPTY
5678: LIST
5679: LIST
5680: LIST
5681: LIST
5682: ST_TO_ADDR
// exit ;
5683: GO 5976
// end ; if not chassis in _chassis then
5685: LD_VAR 0 2
5689: PUSH
5690: LD_VAR 0 9
5694: IN
5695: NOT
5696: IFFALSE 5722
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5698: LD_ADDR_VAR 0 2
5702: PUSH
5703: LD_VAR 0 9
5707: PUSH
5708: LD_INT 1
5710: PPUSH
5711: LD_VAR 0 9
5715: PPUSH
5716: CALL_OW 12
5720: ARRAY
5721: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5722: LD_VAR 0 2
5726: PPUSH
5727: LD_VAR 0 3
5731: PPUSH
5732: CALL 5981 0 2
5736: NOT
5737: IFFALSE 5796
// repeat engine := _engine [ 1 ] ;
5739: LD_ADDR_VAR 0 3
5743: PUSH
5744: LD_VAR 0 11
5748: PUSH
5749: LD_INT 1
5751: ARRAY
5752: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5753: LD_ADDR_VAR 0 11
5757: PUSH
5758: LD_VAR 0 11
5762: PPUSH
5763: LD_INT 1
5765: PPUSH
5766: CALL_OW 3
5770: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5771: LD_VAR 0 2
5775: PPUSH
5776: LD_VAR 0 3
5780: PPUSH
5781: CALL 5981 0 2
5785: PUSH
5786: LD_VAR 0 11
5790: PUSH
5791: EMPTY
5792: EQUAL
5793: OR
5794: IFFALSE 5739
// if not control in _control then
5796: LD_VAR 0 4
5800: PUSH
5801: LD_VAR 0 12
5805: IN
5806: NOT
5807: IFFALSE 5833
// control := _control [ rand ( 1 , _control ) ] ;
5809: LD_ADDR_VAR 0 4
5813: PUSH
5814: LD_VAR 0 12
5818: PUSH
5819: LD_INT 1
5821: PPUSH
5822: LD_VAR 0 12
5826: PPUSH
5827: CALL_OW 12
5831: ARRAY
5832: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5833: LD_VAR 0 2
5837: PPUSH
5838: LD_VAR 0 5
5842: PPUSH
5843: CALL 6201 0 2
5847: NOT
5848: IFFALSE 5907
// repeat weapon := _weapon [ 1 ] ;
5850: LD_ADDR_VAR 0 5
5854: PUSH
5855: LD_VAR 0 10
5859: PUSH
5860: LD_INT 1
5862: ARRAY
5863: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5864: LD_ADDR_VAR 0 10
5868: PUSH
5869: LD_VAR 0 10
5873: PPUSH
5874: LD_INT 1
5876: PPUSH
5877: CALL_OW 3
5881: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5882: LD_VAR 0 2
5886: PPUSH
5887: LD_VAR 0 5
5891: PPUSH
5892: CALL 6201 0 2
5896: PUSH
5897: LD_VAR 0 10
5901: PUSH
5902: EMPTY
5903: EQUAL
5904: OR
5905: IFFALSE 5850
// result := [ ] ;
5907: LD_ADDR_VAR 0 6
5911: PUSH
5912: EMPTY
5913: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5914: LD_VAR 0 1
5918: PPUSH
5919: LD_VAR 0 2
5923: PPUSH
5924: LD_VAR 0 3
5928: PPUSH
5929: LD_VAR 0 4
5933: PPUSH
5934: LD_VAR 0 5
5938: PPUSH
5939: CALL_OW 448
5943: IFFALSE 5976
// result := [ chassis , engine , control , weapon ] ;
5945: LD_ADDR_VAR 0 6
5949: PUSH
5950: LD_VAR 0 2
5954: PUSH
5955: LD_VAR 0 3
5959: PUSH
5960: LD_VAR 0 4
5964: PUSH
5965: LD_VAR 0 5
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: ST_TO_ADDR
// end ;
5976: LD_VAR 0 6
5980: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
5981: LD_INT 0
5983: PPUSH
// if not chassis or not engine then
5984: LD_VAR 0 1
5988: NOT
5989: PUSH
5990: LD_VAR 0 2
5994: NOT
5995: OR
5996: IFFALSE 6000
// exit ;
5998: GO 6196
// case engine of engine_solar :
6000: LD_VAR 0 2
6004: PUSH
6005: LD_INT 2
6007: DOUBLE
6008: EQUAL
6009: IFTRUE 6013
6011: GO 6051
6013: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6014: LD_ADDR_VAR 0 3
6018: PUSH
6019: LD_INT 11
6021: PUSH
6022: LD_INT 12
6024: PUSH
6025: LD_INT 13
6027: PUSH
6028: LD_INT 14
6030: PUSH
6031: LD_INT 1
6033: PUSH
6034: LD_INT 2
6036: PUSH
6037: LD_INT 3
6039: PUSH
6040: EMPTY
6041: LIST
6042: LIST
6043: LIST
6044: LIST
6045: LIST
6046: LIST
6047: LIST
6048: ST_TO_ADDR
6049: GO 6180
6051: LD_INT 1
6053: DOUBLE
6054: EQUAL
6055: IFTRUE 6059
6057: GO 6121
6059: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6060: LD_ADDR_VAR 0 3
6064: PUSH
6065: LD_INT 11
6067: PUSH
6068: LD_INT 12
6070: PUSH
6071: LD_INT 13
6073: PUSH
6074: LD_INT 14
6076: PUSH
6077: LD_INT 1
6079: PUSH
6080: LD_INT 2
6082: PUSH
6083: LD_INT 3
6085: PUSH
6086: LD_INT 4
6088: PUSH
6089: LD_INT 5
6091: PUSH
6092: LD_INT 21
6094: PUSH
6095: LD_INT 23
6097: PUSH
6098: LD_INT 22
6100: PUSH
6101: LD_INT 24
6103: PUSH
6104: EMPTY
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: LIST
6117: LIST
6118: ST_TO_ADDR
6119: GO 6180
6121: LD_INT 3
6123: DOUBLE
6124: EQUAL
6125: IFTRUE 6129
6127: GO 6179
6129: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6130: LD_ADDR_VAR 0 3
6134: PUSH
6135: LD_INT 13
6137: PUSH
6138: LD_INT 14
6140: PUSH
6141: LD_INT 2
6143: PUSH
6144: LD_INT 3
6146: PUSH
6147: LD_INT 4
6149: PUSH
6150: LD_INT 5
6152: PUSH
6153: LD_INT 21
6155: PUSH
6156: LD_INT 22
6158: PUSH
6159: LD_INT 23
6161: PUSH
6162: LD_INT 24
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: LIST
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: LIST
6176: ST_TO_ADDR
6177: GO 6180
6179: POP
// result := ( chassis in result ) ;
6180: LD_ADDR_VAR 0 3
6184: PUSH
6185: LD_VAR 0 1
6189: PUSH
6190: LD_VAR 0 3
6194: IN
6195: ST_TO_ADDR
// end ;
6196: LD_VAR 0 3
6200: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6201: LD_INT 0
6203: PPUSH
// if not chassis or not weapon then
6204: LD_VAR 0 1
6208: NOT
6209: PUSH
6210: LD_VAR 0 2
6214: NOT
6215: OR
6216: IFFALSE 6220
// exit ;
6218: GO 7280
// case weapon of us_machine_gun :
6220: LD_VAR 0 2
6224: PUSH
6225: LD_INT 2
6227: DOUBLE
6228: EQUAL
6229: IFTRUE 6233
6231: GO 6263
6233: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6234: LD_ADDR_VAR 0 3
6238: PUSH
6239: LD_INT 1
6241: PUSH
6242: LD_INT 2
6244: PUSH
6245: LD_INT 3
6247: PUSH
6248: LD_INT 4
6250: PUSH
6251: LD_INT 5
6253: PUSH
6254: EMPTY
6255: LIST
6256: LIST
6257: LIST
6258: LIST
6259: LIST
6260: ST_TO_ADDR
6261: GO 7264
6263: LD_INT 3
6265: DOUBLE
6266: EQUAL
6267: IFTRUE 6271
6269: GO 6301
6271: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6272: LD_ADDR_VAR 0 3
6276: PUSH
6277: LD_INT 1
6279: PUSH
6280: LD_INT 2
6282: PUSH
6283: LD_INT 3
6285: PUSH
6286: LD_INT 4
6288: PUSH
6289: LD_INT 5
6291: PUSH
6292: EMPTY
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: ST_TO_ADDR
6299: GO 7264
6301: LD_INT 11
6303: DOUBLE
6304: EQUAL
6305: IFTRUE 6309
6307: GO 6339
6309: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6310: LD_ADDR_VAR 0 3
6314: PUSH
6315: LD_INT 1
6317: PUSH
6318: LD_INT 2
6320: PUSH
6321: LD_INT 3
6323: PUSH
6324: LD_INT 4
6326: PUSH
6327: LD_INT 5
6329: PUSH
6330: EMPTY
6331: LIST
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: ST_TO_ADDR
6337: GO 7264
6339: LD_INT 4
6341: DOUBLE
6342: EQUAL
6343: IFTRUE 6347
6345: GO 6373
6347: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6348: LD_ADDR_VAR 0 3
6352: PUSH
6353: LD_INT 2
6355: PUSH
6356: LD_INT 3
6358: PUSH
6359: LD_INT 4
6361: PUSH
6362: LD_INT 5
6364: PUSH
6365: EMPTY
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: ST_TO_ADDR
6371: GO 7264
6373: LD_INT 5
6375: DOUBLE
6376: EQUAL
6377: IFTRUE 6381
6379: GO 6407
6381: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6382: LD_ADDR_VAR 0 3
6386: PUSH
6387: LD_INT 2
6389: PUSH
6390: LD_INT 3
6392: PUSH
6393: LD_INT 4
6395: PUSH
6396: LD_INT 5
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: ST_TO_ADDR
6405: GO 7264
6407: LD_INT 9
6409: DOUBLE
6410: EQUAL
6411: IFTRUE 6415
6413: GO 6441
6415: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6416: LD_ADDR_VAR 0 3
6420: PUSH
6421: LD_INT 2
6423: PUSH
6424: LD_INT 3
6426: PUSH
6427: LD_INT 4
6429: PUSH
6430: LD_INT 5
6432: PUSH
6433: EMPTY
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: ST_TO_ADDR
6439: GO 7264
6441: LD_INT 7
6443: DOUBLE
6444: EQUAL
6445: IFTRUE 6449
6447: GO 6475
6449: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6450: LD_ADDR_VAR 0 3
6454: PUSH
6455: LD_INT 2
6457: PUSH
6458: LD_INT 3
6460: PUSH
6461: LD_INT 4
6463: PUSH
6464: LD_INT 5
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: ST_TO_ADDR
6473: GO 7264
6475: LD_INT 12
6477: DOUBLE
6478: EQUAL
6479: IFTRUE 6483
6481: GO 6509
6483: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6484: LD_ADDR_VAR 0 3
6488: PUSH
6489: LD_INT 2
6491: PUSH
6492: LD_INT 3
6494: PUSH
6495: LD_INT 4
6497: PUSH
6498: LD_INT 5
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: ST_TO_ADDR
6507: GO 7264
6509: LD_INT 13
6511: DOUBLE
6512: EQUAL
6513: IFTRUE 6517
6515: GO 6543
6517: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6518: LD_ADDR_VAR 0 3
6522: PUSH
6523: LD_INT 2
6525: PUSH
6526: LD_INT 3
6528: PUSH
6529: LD_INT 4
6531: PUSH
6532: LD_INT 5
6534: PUSH
6535: EMPTY
6536: LIST
6537: LIST
6538: LIST
6539: LIST
6540: ST_TO_ADDR
6541: GO 7264
6543: LD_INT 14
6545: DOUBLE
6546: EQUAL
6547: IFTRUE 6551
6549: GO 6569
6551: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6552: LD_ADDR_VAR 0 3
6556: PUSH
6557: LD_INT 4
6559: PUSH
6560: LD_INT 5
6562: PUSH
6563: EMPTY
6564: LIST
6565: LIST
6566: ST_TO_ADDR
6567: GO 7264
6569: LD_INT 6
6571: DOUBLE
6572: EQUAL
6573: IFTRUE 6577
6575: GO 6595
6577: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6578: LD_ADDR_VAR 0 3
6582: PUSH
6583: LD_INT 4
6585: PUSH
6586: LD_INT 5
6588: PUSH
6589: EMPTY
6590: LIST
6591: LIST
6592: ST_TO_ADDR
6593: GO 7264
6595: LD_INT 10
6597: DOUBLE
6598: EQUAL
6599: IFTRUE 6603
6601: GO 6621
6603: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6604: LD_ADDR_VAR 0 3
6608: PUSH
6609: LD_INT 4
6611: PUSH
6612: LD_INT 5
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: ST_TO_ADDR
6619: GO 7264
6621: LD_INT 22
6623: DOUBLE
6624: EQUAL
6625: IFTRUE 6629
6627: GO 6655
6629: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6630: LD_ADDR_VAR 0 3
6634: PUSH
6635: LD_INT 11
6637: PUSH
6638: LD_INT 12
6640: PUSH
6641: LD_INT 13
6643: PUSH
6644: LD_INT 14
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: LIST
6651: LIST
6652: ST_TO_ADDR
6653: GO 7264
6655: LD_INT 23
6657: DOUBLE
6658: EQUAL
6659: IFTRUE 6663
6661: GO 6689
6663: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6664: LD_ADDR_VAR 0 3
6668: PUSH
6669: LD_INT 11
6671: PUSH
6672: LD_INT 12
6674: PUSH
6675: LD_INT 13
6677: PUSH
6678: LD_INT 14
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: ST_TO_ADDR
6687: GO 7264
6689: LD_INT 24
6691: DOUBLE
6692: EQUAL
6693: IFTRUE 6697
6695: GO 6723
6697: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6698: LD_ADDR_VAR 0 3
6702: PUSH
6703: LD_INT 11
6705: PUSH
6706: LD_INT 12
6708: PUSH
6709: LD_INT 13
6711: PUSH
6712: LD_INT 14
6714: PUSH
6715: EMPTY
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: ST_TO_ADDR
6721: GO 7264
6723: LD_INT 30
6725: DOUBLE
6726: EQUAL
6727: IFTRUE 6731
6729: GO 6757
6731: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6732: LD_ADDR_VAR 0 3
6736: PUSH
6737: LD_INT 11
6739: PUSH
6740: LD_INT 12
6742: PUSH
6743: LD_INT 13
6745: PUSH
6746: LD_INT 14
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: ST_TO_ADDR
6755: GO 7264
6757: LD_INT 25
6759: DOUBLE
6760: EQUAL
6761: IFTRUE 6765
6763: GO 6783
6765: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6766: LD_ADDR_VAR 0 3
6770: PUSH
6771: LD_INT 13
6773: PUSH
6774: LD_INT 14
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: ST_TO_ADDR
6781: GO 7264
6783: LD_INT 27
6785: DOUBLE
6786: EQUAL
6787: IFTRUE 6791
6789: GO 6809
6791: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6792: LD_ADDR_VAR 0 3
6796: PUSH
6797: LD_INT 13
6799: PUSH
6800: LD_INT 14
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: ST_TO_ADDR
6807: GO 7264
6809: LD_INT 92
6811: DOUBLE
6812: EQUAL
6813: IFTRUE 6817
6815: GO 6843
6817: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6818: LD_ADDR_VAR 0 3
6822: PUSH
6823: LD_INT 11
6825: PUSH
6826: LD_INT 12
6828: PUSH
6829: LD_INT 13
6831: PUSH
6832: LD_INT 14
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: LIST
6839: LIST
6840: ST_TO_ADDR
6841: GO 7264
6843: LD_INT 28
6845: DOUBLE
6846: EQUAL
6847: IFTRUE 6851
6849: GO 6869
6851: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6852: LD_ADDR_VAR 0 3
6856: PUSH
6857: LD_INT 13
6859: PUSH
6860: LD_INT 14
6862: PUSH
6863: EMPTY
6864: LIST
6865: LIST
6866: ST_TO_ADDR
6867: GO 7264
6869: LD_INT 29
6871: DOUBLE
6872: EQUAL
6873: IFTRUE 6877
6875: GO 6895
6877: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6878: LD_ADDR_VAR 0 3
6882: PUSH
6883: LD_INT 13
6885: PUSH
6886: LD_INT 14
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: ST_TO_ADDR
6893: GO 7264
6895: LD_INT 31
6897: DOUBLE
6898: EQUAL
6899: IFTRUE 6903
6901: GO 6921
6903: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6904: LD_ADDR_VAR 0 3
6908: PUSH
6909: LD_INT 13
6911: PUSH
6912: LD_INT 14
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: ST_TO_ADDR
6919: GO 7264
6921: LD_INT 26
6923: DOUBLE
6924: EQUAL
6925: IFTRUE 6929
6927: GO 6947
6929: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6930: LD_ADDR_VAR 0 3
6934: PUSH
6935: LD_INT 13
6937: PUSH
6938: LD_INT 14
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: ST_TO_ADDR
6945: GO 7264
6947: LD_INT 42
6949: DOUBLE
6950: EQUAL
6951: IFTRUE 6955
6953: GO 6981
6955: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6956: LD_ADDR_VAR 0 3
6960: PUSH
6961: LD_INT 21
6963: PUSH
6964: LD_INT 22
6966: PUSH
6967: LD_INT 23
6969: PUSH
6970: LD_INT 24
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: ST_TO_ADDR
6979: GO 7264
6981: LD_INT 43
6983: DOUBLE
6984: EQUAL
6985: IFTRUE 6989
6987: GO 7015
6989: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
6990: LD_ADDR_VAR 0 3
6994: PUSH
6995: LD_INT 21
6997: PUSH
6998: LD_INT 22
7000: PUSH
7001: LD_INT 23
7003: PUSH
7004: LD_INT 24
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: ST_TO_ADDR
7013: GO 7264
7015: LD_INT 44
7017: DOUBLE
7018: EQUAL
7019: IFTRUE 7023
7021: GO 7049
7023: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7024: LD_ADDR_VAR 0 3
7028: PUSH
7029: LD_INT 21
7031: PUSH
7032: LD_INT 22
7034: PUSH
7035: LD_INT 23
7037: PUSH
7038: LD_INT 24
7040: PUSH
7041: EMPTY
7042: LIST
7043: LIST
7044: LIST
7045: LIST
7046: ST_TO_ADDR
7047: GO 7264
7049: LD_INT 45
7051: DOUBLE
7052: EQUAL
7053: IFTRUE 7057
7055: GO 7083
7057: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7058: LD_ADDR_VAR 0 3
7062: PUSH
7063: LD_INT 21
7065: PUSH
7066: LD_INT 22
7068: PUSH
7069: LD_INT 23
7071: PUSH
7072: LD_INT 24
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: LIST
7079: LIST
7080: ST_TO_ADDR
7081: GO 7264
7083: LD_INT 49
7085: DOUBLE
7086: EQUAL
7087: IFTRUE 7091
7089: GO 7117
7091: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7092: LD_ADDR_VAR 0 3
7096: PUSH
7097: LD_INT 21
7099: PUSH
7100: LD_INT 22
7102: PUSH
7103: LD_INT 23
7105: PUSH
7106: LD_INT 24
7108: PUSH
7109: EMPTY
7110: LIST
7111: LIST
7112: LIST
7113: LIST
7114: ST_TO_ADDR
7115: GO 7264
7117: LD_INT 51
7119: DOUBLE
7120: EQUAL
7121: IFTRUE 7125
7123: GO 7151
7125: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7126: LD_ADDR_VAR 0 3
7130: PUSH
7131: LD_INT 21
7133: PUSH
7134: LD_INT 22
7136: PUSH
7137: LD_INT 23
7139: PUSH
7140: LD_INT 24
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: ST_TO_ADDR
7149: GO 7264
7151: LD_INT 52
7153: DOUBLE
7154: EQUAL
7155: IFTRUE 7159
7157: GO 7185
7159: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7160: LD_ADDR_VAR 0 3
7164: PUSH
7165: LD_INT 21
7167: PUSH
7168: LD_INT 22
7170: PUSH
7171: LD_INT 23
7173: PUSH
7174: LD_INT 24
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: ST_TO_ADDR
7183: GO 7264
7185: LD_INT 53
7187: DOUBLE
7188: EQUAL
7189: IFTRUE 7193
7191: GO 7211
7193: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7194: LD_ADDR_VAR 0 3
7198: PUSH
7199: LD_INT 23
7201: PUSH
7202: LD_INT 24
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: ST_TO_ADDR
7209: GO 7264
7211: LD_INT 46
7213: DOUBLE
7214: EQUAL
7215: IFTRUE 7219
7217: GO 7237
7219: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7220: LD_ADDR_VAR 0 3
7224: PUSH
7225: LD_INT 23
7227: PUSH
7228: LD_INT 24
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: ST_TO_ADDR
7235: GO 7264
7237: LD_INT 47
7239: DOUBLE
7240: EQUAL
7241: IFTRUE 7245
7243: GO 7263
7245: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7246: LD_ADDR_VAR 0 3
7250: PUSH
7251: LD_INT 23
7253: PUSH
7254: LD_INT 24
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: ST_TO_ADDR
7261: GO 7264
7263: POP
// result := ( chassis in result ) ;
7264: LD_ADDR_VAR 0 3
7268: PUSH
7269: LD_VAR 0 1
7273: PUSH
7274: LD_VAR 0 3
7278: IN
7279: ST_TO_ADDR
// end ;
7280: LD_VAR 0 3
7284: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7285: LD_INT 0
7287: PPUSH
7288: PPUSH
7289: PPUSH
7290: PPUSH
7291: PPUSH
7292: PPUSH
7293: PPUSH
// result := array ;
7294: LD_ADDR_VAR 0 5
7298: PUSH
7299: LD_VAR 0 1
7303: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7304: LD_VAR 0 1
7308: NOT
7309: PUSH
7310: LD_VAR 0 2
7314: NOT
7315: OR
7316: PUSH
7317: LD_VAR 0 3
7321: NOT
7322: OR
7323: PUSH
7324: LD_VAR 0 2
7328: PUSH
7329: LD_VAR 0 1
7333: GREATER
7334: OR
7335: PUSH
7336: LD_VAR 0 3
7340: PUSH
7341: LD_VAR 0 1
7345: GREATER
7346: OR
7347: IFFALSE 7351
// exit ;
7349: GO 7647
// if direction then
7351: LD_VAR 0 4
7355: IFFALSE 7419
// begin d := 1 ;
7357: LD_ADDR_VAR 0 9
7361: PUSH
7362: LD_INT 1
7364: ST_TO_ADDR
// if i_from > i_to then
7365: LD_VAR 0 2
7369: PUSH
7370: LD_VAR 0 3
7374: GREATER
7375: IFFALSE 7401
// length := ( array - i_from ) + i_to else
7377: LD_ADDR_VAR 0 11
7381: PUSH
7382: LD_VAR 0 1
7386: PUSH
7387: LD_VAR 0 2
7391: MINUS
7392: PUSH
7393: LD_VAR 0 3
7397: PLUS
7398: ST_TO_ADDR
7399: GO 7417
// length := i_to - i_from ;
7401: LD_ADDR_VAR 0 11
7405: PUSH
7406: LD_VAR 0 3
7410: PUSH
7411: LD_VAR 0 2
7415: MINUS
7416: ST_TO_ADDR
// end else
7417: GO 7480
// begin d := - 1 ;
7419: LD_ADDR_VAR 0 9
7423: PUSH
7424: LD_INT 1
7426: NEG
7427: ST_TO_ADDR
// if i_from > i_to then
7428: LD_VAR 0 2
7432: PUSH
7433: LD_VAR 0 3
7437: GREATER
7438: IFFALSE 7458
// length := i_from - i_to else
7440: LD_ADDR_VAR 0 11
7444: PUSH
7445: LD_VAR 0 2
7449: PUSH
7450: LD_VAR 0 3
7454: MINUS
7455: ST_TO_ADDR
7456: GO 7480
// length := ( array - i_to ) + i_from ;
7458: LD_ADDR_VAR 0 11
7462: PUSH
7463: LD_VAR 0 1
7467: PUSH
7468: LD_VAR 0 3
7472: MINUS
7473: PUSH
7474: LD_VAR 0 2
7478: PLUS
7479: ST_TO_ADDR
// end ; if not length then
7480: LD_VAR 0 11
7484: NOT
7485: IFFALSE 7489
// exit ;
7487: GO 7647
// tmp := array ;
7489: LD_ADDR_VAR 0 10
7493: PUSH
7494: LD_VAR 0 1
7498: ST_TO_ADDR
// for i = 1 to length do
7499: LD_ADDR_VAR 0 6
7503: PUSH
7504: DOUBLE
7505: LD_INT 1
7507: DEC
7508: ST_TO_ADDR
7509: LD_VAR 0 11
7513: PUSH
7514: FOR_TO
7515: IFFALSE 7635
// begin for j = 1 to array do
7517: LD_ADDR_VAR 0 7
7521: PUSH
7522: DOUBLE
7523: LD_INT 1
7525: DEC
7526: ST_TO_ADDR
7527: LD_VAR 0 1
7531: PUSH
7532: FOR_TO
7533: IFFALSE 7621
// begin k := j + d ;
7535: LD_ADDR_VAR 0 8
7539: PUSH
7540: LD_VAR 0 7
7544: PUSH
7545: LD_VAR 0 9
7549: PLUS
7550: ST_TO_ADDR
// if k > array then
7551: LD_VAR 0 8
7555: PUSH
7556: LD_VAR 0 1
7560: GREATER
7561: IFFALSE 7571
// k := 1 ;
7563: LD_ADDR_VAR 0 8
7567: PUSH
7568: LD_INT 1
7570: ST_TO_ADDR
// if not k then
7571: LD_VAR 0 8
7575: NOT
7576: IFFALSE 7588
// k := array ;
7578: LD_ADDR_VAR 0 8
7582: PUSH
7583: LD_VAR 0 1
7587: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7588: LD_ADDR_VAR 0 10
7592: PUSH
7593: LD_VAR 0 10
7597: PPUSH
7598: LD_VAR 0 8
7602: PPUSH
7603: LD_VAR 0 1
7607: PUSH
7608: LD_VAR 0 7
7612: ARRAY
7613: PPUSH
7614: CALL_OW 1
7618: ST_TO_ADDR
// end ;
7619: GO 7532
7621: POP
7622: POP
// array := tmp ;
7623: LD_ADDR_VAR 0 1
7627: PUSH
7628: LD_VAR 0 10
7632: ST_TO_ADDR
// end ;
7633: GO 7514
7635: POP
7636: POP
// result := array ;
7637: LD_ADDR_VAR 0 5
7641: PUSH
7642: LD_VAR 0 1
7646: ST_TO_ADDR
// end ;
7647: LD_VAR 0 5
7651: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7652: LD_INT 0
7654: PPUSH
7655: PPUSH
// result := 0 ;
7656: LD_ADDR_VAR 0 3
7660: PUSH
7661: LD_INT 0
7663: ST_TO_ADDR
// if not array or not value in array then
7664: LD_VAR 0 1
7668: NOT
7669: PUSH
7670: LD_VAR 0 2
7674: PUSH
7675: LD_VAR 0 1
7679: IN
7680: NOT
7681: OR
7682: IFFALSE 7686
// exit ;
7684: GO 7740
// for i = 1 to array do
7686: LD_ADDR_VAR 0 4
7690: PUSH
7691: DOUBLE
7692: LD_INT 1
7694: DEC
7695: ST_TO_ADDR
7696: LD_VAR 0 1
7700: PUSH
7701: FOR_TO
7702: IFFALSE 7738
// if value = array [ i ] then
7704: LD_VAR 0 2
7708: PUSH
7709: LD_VAR 0 1
7713: PUSH
7714: LD_VAR 0 4
7718: ARRAY
7719: EQUAL
7720: IFFALSE 7736
// begin result := i ;
7722: LD_ADDR_VAR 0 3
7726: PUSH
7727: LD_VAR 0 4
7731: ST_TO_ADDR
// exit ;
7732: POP
7733: POP
7734: GO 7740
// end ;
7736: GO 7701
7738: POP
7739: POP
// end ;
7740: LD_VAR 0 3
7744: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7745: LD_INT 0
7747: PPUSH
// vc_chassis := chassis ;
7748: LD_ADDR_OWVAR 37
7752: PUSH
7753: LD_VAR 0 1
7757: ST_TO_ADDR
// vc_engine := engine ;
7758: LD_ADDR_OWVAR 39
7762: PUSH
7763: LD_VAR 0 2
7767: ST_TO_ADDR
// vc_control := control ;
7768: LD_ADDR_OWVAR 38
7772: PUSH
7773: LD_VAR 0 3
7777: ST_TO_ADDR
// vc_weapon := weapon ;
7778: LD_ADDR_OWVAR 40
7782: PUSH
7783: LD_VAR 0 4
7787: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7788: LD_ADDR_OWVAR 41
7792: PUSH
7793: LD_VAR 0 5
7797: ST_TO_ADDR
// end ;
7798: LD_VAR 0 6
7802: RET
// export function WantPlant ( unit ) ; var task ; begin
7803: LD_INT 0
7805: PPUSH
7806: PPUSH
// result := false ;
7807: LD_ADDR_VAR 0 2
7811: PUSH
7812: LD_INT 0
7814: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7815: LD_ADDR_VAR 0 3
7819: PUSH
7820: LD_VAR 0 1
7824: PPUSH
7825: CALL_OW 437
7829: ST_TO_ADDR
// if task then
7830: LD_VAR 0 3
7834: IFFALSE 7862
// if task [ 1 ] [ 1 ] = p then
7836: LD_VAR 0 3
7840: PUSH
7841: LD_INT 1
7843: ARRAY
7844: PUSH
7845: LD_INT 1
7847: ARRAY
7848: PUSH
7849: LD_STRING p
7851: EQUAL
7852: IFFALSE 7862
// result := true ;
7854: LD_ADDR_VAR 0 2
7858: PUSH
7859: LD_INT 1
7861: ST_TO_ADDR
// end ;
7862: LD_VAR 0 2
7866: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7867: LD_INT 0
7869: PPUSH
7870: PPUSH
7871: PPUSH
7872: PPUSH
// if pos < 1 then
7873: LD_VAR 0 2
7877: PUSH
7878: LD_INT 1
7880: LESS
7881: IFFALSE 7885
// exit ;
7883: GO 8188
// if pos = 1 then
7885: LD_VAR 0 2
7889: PUSH
7890: LD_INT 1
7892: EQUAL
7893: IFFALSE 7926
// result := Replace ( arr , pos [ 1 ] , value ) else
7895: LD_ADDR_VAR 0 4
7899: PUSH
7900: LD_VAR 0 1
7904: PPUSH
7905: LD_VAR 0 2
7909: PUSH
7910: LD_INT 1
7912: ARRAY
7913: PPUSH
7914: LD_VAR 0 3
7918: PPUSH
7919: CALL_OW 1
7923: ST_TO_ADDR
7924: GO 8188
// begin tmp := arr ;
7926: LD_ADDR_VAR 0 6
7930: PUSH
7931: LD_VAR 0 1
7935: ST_TO_ADDR
// s_arr := [ tmp ] ;
7936: LD_ADDR_VAR 0 7
7940: PUSH
7941: LD_VAR 0 6
7945: PUSH
7946: EMPTY
7947: LIST
7948: ST_TO_ADDR
// for i = 1 to pos - 1 do
7949: LD_ADDR_VAR 0 5
7953: PUSH
7954: DOUBLE
7955: LD_INT 1
7957: DEC
7958: ST_TO_ADDR
7959: LD_VAR 0 2
7963: PUSH
7964: LD_INT 1
7966: MINUS
7967: PUSH
7968: FOR_TO
7969: IFFALSE 8014
// begin tmp := tmp [ pos [ i ] ] ;
7971: LD_ADDR_VAR 0 6
7975: PUSH
7976: LD_VAR 0 6
7980: PUSH
7981: LD_VAR 0 2
7985: PUSH
7986: LD_VAR 0 5
7990: ARRAY
7991: ARRAY
7992: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
7993: LD_ADDR_VAR 0 7
7997: PUSH
7998: LD_VAR 0 7
8002: PUSH
8003: LD_VAR 0 6
8007: PUSH
8008: EMPTY
8009: LIST
8010: ADD
8011: ST_TO_ADDR
// end ;
8012: GO 7968
8014: POP
8015: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8016: LD_ADDR_VAR 0 6
8020: PUSH
8021: LD_VAR 0 6
8025: PPUSH
8026: LD_VAR 0 2
8030: PUSH
8031: LD_VAR 0 2
8035: ARRAY
8036: PPUSH
8037: LD_VAR 0 3
8041: PPUSH
8042: CALL_OW 1
8046: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8047: LD_ADDR_VAR 0 7
8051: PUSH
8052: LD_VAR 0 7
8056: PPUSH
8057: LD_VAR 0 7
8061: PPUSH
8062: LD_VAR 0 6
8066: PPUSH
8067: CALL_OW 1
8071: ST_TO_ADDR
// for i = s_arr downto 2 do
8072: LD_ADDR_VAR 0 5
8076: PUSH
8077: DOUBLE
8078: LD_VAR 0 7
8082: INC
8083: ST_TO_ADDR
8084: LD_INT 2
8086: PUSH
8087: FOR_DOWNTO
8088: IFFALSE 8172
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8090: LD_ADDR_VAR 0 6
8094: PUSH
8095: LD_VAR 0 7
8099: PUSH
8100: LD_VAR 0 5
8104: PUSH
8105: LD_INT 1
8107: MINUS
8108: ARRAY
8109: PPUSH
8110: LD_VAR 0 2
8114: PUSH
8115: LD_VAR 0 5
8119: PUSH
8120: LD_INT 1
8122: MINUS
8123: ARRAY
8124: PPUSH
8125: LD_VAR 0 7
8129: PUSH
8130: LD_VAR 0 5
8134: ARRAY
8135: PPUSH
8136: CALL_OW 1
8140: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8141: LD_ADDR_VAR 0 7
8145: PUSH
8146: LD_VAR 0 7
8150: PPUSH
8151: LD_VAR 0 5
8155: PUSH
8156: LD_INT 1
8158: MINUS
8159: PPUSH
8160: LD_VAR 0 6
8164: PPUSH
8165: CALL_OW 1
8169: ST_TO_ADDR
// end ;
8170: GO 8087
8172: POP
8173: POP
// result := s_arr [ 1 ] ;
8174: LD_ADDR_VAR 0 4
8178: PUSH
8179: LD_VAR 0 7
8183: PUSH
8184: LD_INT 1
8186: ARRAY
8187: ST_TO_ADDR
// end ; end ;
8188: LD_VAR 0 4
8192: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8193: LD_INT 0
8195: PPUSH
8196: PPUSH
// if not list then
8197: LD_VAR 0 1
8201: NOT
8202: IFFALSE 8206
// exit ;
8204: GO 8297
// i := list [ pos1 ] ;
8206: LD_ADDR_VAR 0 5
8210: PUSH
8211: LD_VAR 0 1
8215: PUSH
8216: LD_VAR 0 2
8220: ARRAY
8221: ST_TO_ADDR
// if not i then
8222: LD_VAR 0 5
8226: NOT
8227: IFFALSE 8231
// exit ;
8229: GO 8297
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8231: LD_ADDR_VAR 0 1
8235: PUSH
8236: LD_VAR 0 1
8240: PPUSH
8241: LD_VAR 0 2
8245: PPUSH
8246: LD_VAR 0 1
8250: PUSH
8251: LD_VAR 0 3
8255: ARRAY
8256: PPUSH
8257: CALL_OW 1
8261: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8262: LD_ADDR_VAR 0 1
8266: PUSH
8267: LD_VAR 0 1
8271: PPUSH
8272: LD_VAR 0 3
8276: PPUSH
8277: LD_VAR 0 5
8281: PPUSH
8282: CALL_OW 1
8286: ST_TO_ADDR
// result := list ;
8287: LD_ADDR_VAR 0 4
8291: PUSH
8292: LD_VAR 0 1
8296: ST_TO_ADDR
// end ;
8297: LD_VAR 0 4
8301: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8302: LD_INT 0
8304: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8305: LD_ADDR_VAR 0 5
8309: PUSH
8310: LD_VAR 0 1
8314: PPUSH
8315: CALL_OW 250
8319: PPUSH
8320: LD_VAR 0 1
8324: PPUSH
8325: CALL_OW 251
8329: PPUSH
8330: LD_VAR 0 2
8334: PPUSH
8335: LD_VAR 0 3
8339: PPUSH
8340: LD_VAR 0 4
8344: PPUSH
8345: CALL 8723 0 5
8349: ST_TO_ADDR
// end ;
8350: LD_VAR 0 5
8354: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8355: LD_INT 0
8357: PPUSH
8358: PPUSH
8359: PPUSH
8360: PPUSH
// if not list or not unit then
8361: LD_VAR 0 2
8365: NOT
8366: PUSH
8367: LD_VAR 0 1
8371: NOT
8372: OR
8373: IFFALSE 8377
// exit ;
8375: GO 8718
// result := [ ] ;
8377: LD_ADDR_VAR 0 5
8381: PUSH
8382: EMPTY
8383: ST_TO_ADDR
// for i in list do
8384: LD_ADDR_VAR 0 6
8388: PUSH
8389: LD_VAR 0 2
8393: PUSH
8394: FOR_IN
8395: IFFALSE 8613
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8397: LD_ADDR_VAR 0 8
8401: PUSH
8402: LD_VAR 0 1
8406: PPUSH
8407: LD_VAR 0 6
8411: PUSH
8412: LD_INT 1
8414: ARRAY
8415: PPUSH
8416: LD_VAR 0 6
8420: PUSH
8421: LD_INT 2
8423: ARRAY
8424: PPUSH
8425: CALL_OW 297
8429: ST_TO_ADDR
// if not Count ( result ) then
8430: LD_VAR 0 5
8434: PPUSH
8435: CALL 5007 0 1
8439: NOT
8440: IFFALSE 8473
// begin result := Join ( result , [ i , tmp ] ) ;
8442: LD_ADDR_VAR 0 5
8446: PUSH
8447: LD_VAR 0 5
8451: PPUSH
8452: LD_VAR 0 6
8456: PUSH
8457: LD_VAR 0 8
8461: PUSH
8462: EMPTY
8463: LIST
8464: LIST
8465: PPUSH
8466: CALL 40596 0 2
8470: ST_TO_ADDR
// continue ;
8471: GO 8394
// end ; if result [ result ] [ 2 ] <= tmp then
8473: LD_VAR 0 5
8477: PUSH
8478: LD_VAR 0 5
8482: ARRAY
8483: PUSH
8484: LD_INT 2
8486: ARRAY
8487: PUSH
8488: LD_VAR 0 8
8492: LESSEQUAL
8493: IFFALSE 8526
// result := Join ( result , [ i , tmp ] ) else
8495: LD_ADDR_VAR 0 5
8499: PUSH
8500: LD_VAR 0 5
8504: PPUSH
8505: LD_VAR 0 6
8509: PUSH
8510: LD_VAR 0 8
8514: PUSH
8515: EMPTY
8516: LIST
8517: LIST
8518: PPUSH
8519: CALL 40596 0 2
8523: ST_TO_ADDR
8524: GO 8611
// begin for j := 1 to Count ( result ) do
8526: LD_ADDR_VAR 0 7
8530: PUSH
8531: DOUBLE
8532: LD_INT 1
8534: DEC
8535: ST_TO_ADDR
8536: LD_VAR 0 5
8540: PPUSH
8541: CALL 5007 0 1
8545: PUSH
8546: FOR_TO
8547: IFFALSE 8609
// begin if tmp < result [ j ] [ 2 ] then
8549: LD_VAR 0 8
8553: PUSH
8554: LD_VAR 0 5
8558: PUSH
8559: LD_VAR 0 7
8563: ARRAY
8564: PUSH
8565: LD_INT 2
8567: ARRAY
8568: LESS
8569: IFFALSE 8607
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8571: LD_ADDR_VAR 0 5
8575: PUSH
8576: LD_VAR 0 5
8580: PPUSH
8581: LD_VAR 0 7
8585: PPUSH
8586: LD_VAR 0 6
8590: PUSH
8591: LD_VAR 0 8
8595: PUSH
8596: EMPTY
8597: LIST
8598: LIST
8599: PPUSH
8600: CALL_OW 2
8604: ST_TO_ADDR
// break ;
8605: GO 8609
// end ; end ;
8607: GO 8546
8609: POP
8610: POP
// end ; end ;
8611: GO 8394
8613: POP
8614: POP
// if result and not asc then
8615: LD_VAR 0 5
8619: PUSH
8620: LD_VAR 0 3
8624: NOT
8625: AND
8626: IFFALSE 8643
// result := ReverseArray ( result ) ;
8628: LD_ADDR_VAR 0 5
8632: PUSH
8633: LD_VAR 0 5
8637: PPUSH
8638: CALL 35883 0 1
8642: ST_TO_ADDR
// tmp := [ ] ;
8643: LD_ADDR_VAR 0 8
8647: PUSH
8648: EMPTY
8649: ST_TO_ADDR
// if mode then
8650: LD_VAR 0 4
8654: IFFALSE 8718
// begin for i := 1 to result do
8656: LD_ADDR_VAR 0 6
8660: PUSH
8661: DOUBLE
8662: LD_INT 1
8664: DEC
8665: ST_TO_ADDR
8666: LD_VAR 0 5
8670: PUSH
8671: FOR_TO
8672: IFFALSE 8706
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8674: LD_ADDR_VAR 0 8
8678: PUSH
8679: LD_VAR 0 8
8683: PPUSH
8684: LD_VAR 0 5
8688: PUSH
8689: LD_VAR 0 6
8693: ARRAY
8694: PUSH
8695: LD_INT 1
8697: ARRAY
8698: PPUSH
8699: CALL 40596 0 2
8703: ST_TO_ADDR
8704: GO 8671
8706: POP
8707: POP
// result := tmp ;
8708: LD_ADDR_VAR 0 5
8712: PUSH
8713: LD_VAR 0 8
8717: ST_TO_ADDR
// end ; end ;
8718: LD_VAR 0 5
8722: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8723: LD_INT 0
8725: PPUSH
8726: PPUSH
8727: PPUSH
8728: PPUSH
// if not list then
8729: LD_VAR 0 3
8733: NOT
8734: IFFALSE 8738
// exit ;
8736: GO 9126
// result := [ ] ;
8738: LD_ADDR_VAR 0 6
8742: PUSH
8743: EMPTY
8744: ST_TO_ADDR
// for i in list do
8745: LD_ADDR_VAR 0 7
8749: PUSH
8750: LD_VAR 0 3
8754: PUSH
8755: FOR_IN
8756: IFFALSE 8958
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8758: LD_ADDR_VAR 0 9
8762: PUSH
8763: LD_VAR 0 7
8767: PPUSH
8768: LD_VAR 0 1
8772: PPUSH
8773: LD_VAR 0 2
8777: PPUSH
8778: CALL_OW 297
8782: ST_TO_ADDR
// if not result then
8783: LD_VAR 0 6
8787: NOT
8788: IFFALSE 8814
// result := [ [ i , tmp ] ] else
8790: LD_ADDR_VAR 0 6
8794: PUSH
8795: LD_VAR 0 7
8799: PUSH
8800: LD_VAR 0 9
8804: PUSH
8805: EMPTY
8806: LIST
8807: LIST
8808: PUSH
8809: EMPTY
8810: LIST
8811: ST_TO_ADDR
8812: GO 8956
// begin if result [ result ] [ 2 ] < tmp then
8814: LD_VAR 0 6
8818: PUSH
8819: LD_VAR 0 6
8823: ARRAY
8824: PUSH
8825: LD_INT 2
8827: ARRAY
8828: PUSH
8829: LD_VAR 0 9
8833: LESS
8834: IFFALSE 8876
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8836: LD_ADDR_VAR 0 6
8840: PUSH
8841: LD_VAR 0 6
8845: PPUSH
8846: LD_VAR 0 6
8850: PUSH
8851: LD_INT 1
8853: PLUS
8854: PPUSH
8855: LD_VAR 0 7
8859: PUSH
8860: LD_VAR 0 9
8864: PUSH
8865: EMPTY
8866: LIST
8867: LIST
8868: PPUSH
8869: CALL_OW 2
8873: ST_TO_ADDR
8874: GO 8956
// for j = 1 to result do
8876: LD_ADDR_VAR 0 8
8880: PUSH
8881: DOUBLE
8882: LD_INT 1
8884: DEC
8885: ST_TO_ADDR
8886: LD_VAR 0 6
8890: PUSH
8891: FOR_TO
8892: IFFALSE 8954
// begin if tmp < result [ j ] [ 2 ] then
8894: LD_VAR 0 9
8898: PUSH
8899: LD_VAR 0 6
8903: PUSH
8904: LD_VAR 0 8
8908: ARRAY
8909: PUSH
8910: LD_INT 2
8912: ARRAY
8913: LESS
8914: IFFALSE 8952
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8916: LD_ADDR_VAR 0 6
8920: PUSH
8921: LD_VAR 0 6
8925: PPUSH
8926: LD_VAR 0 8
8930: PPUSH
8931: LD_VAR 0 7
8935: PUSH
8936: LD_VAR 0 9
8940: PUSH
8941: EMPTY
8942: LIST
8943: LIST
8944: PPUSH
8945: CALL_OW 2
8949: ST_TO_ADDR
// break ;
8950: GO 8954
// end ; end ;
8952: GO 8891
8954: POP
8955: POP
// end ; end ;
8956: GO 8755
8958: POP
8959: POP
// if result and not asc then
8960: LD_VAR 0 6
8964: PUSH
8965: LD_VAR 0 4
8969: NOT
8970: AND
8971: IFFALSE 9046
// begin tmp := result ;
8973: LD_ADDR_VAR 0 9
8977: PUSH
8978: LD_VAR 0 6
8982: ST_TO_ADDR
// for i = tmp downto 1 do
8983: LD_ADDR_VAR 0 7
8987: PUSH
8988: DOUBLE
8989: LD_VAR 0 9
8993: INC
8994: ST_TO_ADDR
8995: LD_INT 1
8997: PUSH
8998: FOR_DOWNTO
8999: IFFALSE 9044
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9001: LD_ADDR_VAR 0 6
9005: PUSH
9006: LD_VAR 0 6
9010: PPUSH
9011: LD_VAR 0 9
9015: PUSH
9016: LD_VAR 0 7
9020: MINUS
9021: PUSH
9022: LD_INT 1
9024: PLUS
9025: PPUSH
9026: LD_VAR 0 9
9030: PUSH
9031: LD_VAR 0 7
9035: ARRAY
9036: PPUSH
9037: CALL_OW 1
9041: ST_TO_ADDR
9042: GO 8998
9044: POP
9045: POP
// end ; tmp := [ ] ;
9046: LD_ADDR_VAR 0 9
9050: PUSH
9051: EMPTY
9052: ST_TO_ADDR
// if mode then
9053: LD_VAR 0 5
9057: IFFALSE 9126
// begin for i = 1 to result do
9059: LD_ADDR_VAR 0 7
9063: PUSH
9064: DOUBLE
9065: LD_INT 1
9067: DEC
9068: ST_TO_ADDR
9069: LD_VAR 0 6
9073: PUSH
9074: FOR_TO
9075: IFFALSE 9114
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9077: LD_ADDR_VAR 0 9
9081: PUSH
9082: LD_VAR 0 9
9086: PPUSH
9087: LD_VAR 0 7
9091: PPUSH
9092: LD_VAR 0 6
9096: PUSH
9097: LD_VAR 0 7
9101: ARRAY
9102: PUSH
9103: LD_INT 1
9105: ARRAY
9106: PPUSH
9107: CALL_OW 1
9111: ST_TO_ADDR
9112: GO 9074
9114: POP
9115: POP
// result := tmp ;
9116: LD_ADDR_VAR 0 6
9120: PUSH
9121: LD_VAR 0 9
9125: ST_TO_ADDR
// end ; end ;
9126: LD_VAR 0 6
9130: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9131: LD_INT 0
9133: PPUSH
9134: PPUSH
9135: PPUSH
9136: PPUSH
9137: PPUSH
9138: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9139: LD_ADDR_VAR 0 5
9143: PUSH
9144: LD_INT 0
9146: PUSH
9147: LD_INT 0
9149: PUSH
9150: LD_INT 0
9152: PUSH
9153: EMPTY
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: ST_TO_ADDR
// if not x or not y then
9161: LD_VAR 0 2
9165: NOT
9166: PUSH
9167: LD_VAR 0 3
9171: NOT
9172: OR
9173: IFFALSE 9177
// exit ;
9175: GO 10827
// if not range then
9177: LD_VAR 0 4
9181: NOT
9182: IFFALSE 9192
// range := 10 ;
9184: LD_ADDR_VAR 0 4
9188: PUSH
9189: LD_INT 10
9191: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9192: LD_ADDR_VAR 0 8
9196: PUSH
9197: LD_INT 81
9199: PUSH
9200: LD_VAR 0 1
9204: PUSH
9205: EMPTY
9206: LIST
9207: LIST
9208: PUSH
9209: LD_INT 92
9211: PUSH
9212: LD_VAR 0 2
9216: PUSH
9217: LD_VAR 0 3
9221: PUSH
9222: LD_VAR 0 4
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: PUSH
9233: LD_INT 3
9235: PUSH
9236: LD_INT 21
9238: PUSH
9239: LD_INT 3
9241: PUSH
9242: EMPTY
9243: LIST
9244: LIST
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: PUSH
9250: EMPTY
9251: LIST
9252: LIST
9253: LIST
9254: PPUSH
9255: CALL_OW 69
9259: ST_TO_ADDR
// if not tmp then
9260: LD_VAR 0 8
9264: NOT
9265: IFFALSE 9269
// exit ;
9267: GO 10827
// for i in tmp do
9269: LD_ADDR_VAR 0 6
9273: PUSH
9274: LD_VAR 0 8
9278: PUSH
9279: FOR_IN
9280: IFFALSE 10802
// begin points := [ 0 , 0 , 0 ] ;
9282: LD_ADDR_VAR 0 9
9286: PUSH
9287: LD_INT 0
9289: PUSH
9290: LD_INT 0
9292: PUSH
9293: LD_INT 0
9295: PUSH
9296: EMPTY
9297: LIST
9298: LIST
9299: LIST
9300: ST_TO_ADDR
// bpoints := 1 ;
9301: LD_ADDR_VAR 0 10
9305: PUSH
9306: LD_INT 1
9308: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9309: LD_VAR 0 6
9313: PPUSH
9314: CALL_OW 247
9318: PUSH
9319: LD_INT 1
9321: DOUBLE
9322: EQUAL
9323: IFTRUE 9327
9325: GO 9905
9327: POP
// begin if GetClass ( i ) = 1 then
9328: LD_VAR 0 6
9332: PPUSH
9333: CALL_OW 257
9337: PUSH
9338: LD_INT 1
9340: EQUAL
9341: IFFALSE 9362
// points := [ 10 , 5 , 3 ] ;
9343: LD_ADDR_VAR 0 9
9347: PUSH
9348: LD_INT 10
9350: PUSH
9351: LD_INT 5
9353: PUSH
9354: LD_INT 3
9356: PUSH
9357: EMPTY
9358: LIST
9359: LIST
9360: LIST
9361: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9362: LD_VAR 0 6
9366: PPUSH
9367: CALL_OW 257
9371: PUSH
9372: LD_INT 2
9374: PUSH
9375: LD_INT 3
9377: PUSH
9378: LD_INT 4
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: LIST
9385: IN
9386: IFFALSE 9407
// points := [ 3 , 2 , 1 ] ;
9388: LD_ADDR_VAR 0 9
9392: PUSH
9393: LD_INT 3
9395: PUSH
9396: LD_INT 2
9398: PUSH
9399: LD_INT 1
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: LIST
9406: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9407: LD_VAR 0 6
9411: PPUSH
9412: CALL_OW 257
9416: PUSH
9417: LD_INT 5
9419: EQUAL
9420: IFFALSE 9441
// points := [ 130 , 5 , 2 ] ;
9422: LD_ADDR_VAR 0 9
9426: PUSH
9427: LD_INT 130
9429: PUSH
9430: LD_INT 5
9432: PUSH
9433: LD_INT 2
9435: PUSH
9436: EMPTY
9437: LIST
9438: LIST
9439: LIST
9440: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9441: LD_VAR 0 6
9445: PPUSH
9446: CALL_OW 257
9450: PUSH
9451: LD_INT 8
9453: EQUAL
9454: IFFALSE 9475
// points := [ 35 , 35 , 30 ] ;
9456: LD_ADDR_VAR 0 9
9460: PUSH
9461: LD_INT 35
9463: PUSH
9464: LD_INT 35
9466: PUSH
9467: LD_INT 30
9469: PUSH
9470: EMPTY
9471: LIST
9472: LIST
9473: LIST
9474: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9475: LD_VAR 0 6
9479: PPUSH
9480: CALL_OW 257
9484: PUSH
9485: LD_INT 9
9487: EQUAL
9488: IFFALSE 9509
// points := [ 20 , 55 , 40 ] ;
9490: LD_ADDR_VAR 0 9
9494: PUSH
9495: LD_INT 20
9497: PUSH
9498: LD_INT 55
9500: PUSH
9501: LD_INT 40
9503: PUSH
9504: EMPTY
9505: LIST
9506: LIST
9507: LIST
9508: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9509: LD_VAR 0 6
9513: PPUSH
9514: CALL_OW 257
9518: PUSH
9519: LD_INT 12
9521: PUSH
9522: LD_INT 16
9524: PUSH
9525: EMPTY
9526: LIST
9527: LIST
9528: IN
9529: IFFALSE 9550
// points := [ 5 , 3 , 2 ] ;
9531: LD_ADDR_VAR 0 9
9535: PUSH
9536: LD_INT 5
9538: PUSH
9539: LD_INT 3
9541: PUSH
9542: LD_INT 2
9544: PUSH
9545: EMPTY
9546: LIST
9547: LIST
9548: LIST
9549: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9550: LD_VAR 0 6
9554: PPUSH
9555: CALL_OW 257
9559: PUSH
9560: LD_INT 17
9562: EQUAL
9563: IFFALSE 9584
// points := [ 100 , 50 , 75 ] ;
9565: LD_ADDR_VAR 0 9
9569: PUSH
9570: LD_INT 100
9572: PUSH
9573: LD_INT 50
9575: PUSH
9576: LD_INT 75
9578: PUSH
9579: EMPTY
9580: LIST
9581: LIST
9582: LIST
9583: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9584: LD_VAR 0 6
9588: PPUSH
9589: CALL_OW 257
9593: PUSH
9594: LD_INT 15
9596: EQUAL
9597: IFFALSE 9618
// points := [ 10 , 5 , 3 ] ;
9599: LD_ADDR_VAR 0 9
9603: PUSH
9604: LD_INT 10
9606: PUSH
9607: LD_INT 5
9609: PUSH
9610: LD_INT 3
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: LIST
9617: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9618: LD_VAR 0 6
9622: PPUSH
9623: CALL_OW 257
9627: PUSH
9628: LD_INT 14
9630: EQUAL
9631: IFFALSE 9652
// points := [ 10 , 0 , 0 ] ;
9633: LD_ADDR_VAR 0 9
9637: PUSH
9638: LD_INT 10
9640: PUSH
9641: LD_INT 0
9643: PUSH
9644: LD_INT 0
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: LIST
9651: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9652: LD_VAR 0 6
9656: PPUSH
9657: CALL_OW 257
9661: PUSH
9662: LD_INT 11
9664: EQUAL
9665: IFFALSE 9686
// points := [ 30 , 10 , 5 ] ;
9667: LD_ADDR_VAR 0 9
9671: PUSH
9672: LD_INT 30
9674: PUSH
9675: LD_INT 10
9677: PUSH
9678: LD_INT 5
9680: PUSH
9681: EMPTY
9682: LIST
9683: LIST
9684: LIST
9685: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9686: LD_VAR 0 1
9690: PPUSH
9691: LD_INT 5
9693: PPUSH
9694: CALL_OW 321
9698: PUSH
9699: LD_INT 2
9701: EQUAL
9702: IFFALSE 9719
// bpoints := bpoints * 1.8 ;
9704: LD_ADDR_VAR 0 10
9708: PUSH
9709: LD_VAR 0 10
9713: PUSH
9714: LD_REAL  1.80000000000000E+0000
9717: MUL
9718: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9719: LD_VAR 0 6
9723: PPUSH
9724: CALL_OW 257
9728: PUSH
9729: LD_INT 1
9731: PUSH
9732: LD_INT 2
9734: PUSH
9735: LD_INT 3
9737: PUSH
9738: LD_INT 4
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: IN
9747: PUSH
9748: LD_VAR 0 1
9752: PPUSH
9753: LD_INT 51
9755: PPUSH
9756: CALL_OW 321
9760: PUSH
9761: LD_INT 2
9763: EQUAL
9764: AND
9765: IFFALSE 9782
// bpoints := bpoints * 1.2 ;
9767: LD_ADDR_VAR 0 10
9771: PUSH
9772: LD_VAR 0 10
9776: PUSH
9777: LD_REAL  1.20000000000000E+0000
9780: MUL
9781: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9782: LD_VAR 0 6
9786: PPUSH
9787: CALL_OW 257
9791: PUSH
9792: LD_INT 5
9794: PUSH
9795: LD_INT 7
9797: PUSH
9798: LD_INT 9
9800: PUSH
9801: EMPTY
9802: LIST
9803: LIST
9804: LIST
9805: IN
9806: PUSH
9807: LD_VAR 0 1
9811: PPUSH
9812: LD_INT 52
9814: PPUSH
9815: CALL_OW 321
9819: PUSH
9820: LD_INT 2
9822: EQUAL
9823: AND
9824: IFFALSE 9841
// bpoints := bpoints * 1.5 ;
9826: LD_ADDR_VAR 0 10
9830: PUSH
9831: LD_VAR 0 10
9835: PUSH
9836: LD_REAL  1.50000000000000E+0000
9839: MUL
9840: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9841: LD_VAR 0 1
9845: PPUSH
9846: LD_INT 66
9848: PPUSH
9849: CALL_OW 321
9853: PUSH
9854: LD_INT 2
9856: EQUAL
9857: IFFALSE 9874
// bpoints := bpoints * 1.1 ;
9859: LD_ADDR_VAR 0 10
9863: PUSH
9864: LD_VAR 0 10
9868: PUSH
9869: LD_REAL  1.10000000000000E+0000
9872: MUL
9873: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9874: LD_ADDR_VAR 0 10
9878: PUSH
9879: LD_VAR 0 10
9883: PUSH
9884: LD_VAR 0 6
9888: PPUSH
9889: LD_INT 1
9891: PPUSH
9892: CALL_OW 259
9896: PUSH
9897: LD_REAL  1.15000000000000E+0000
9900: MUL
9901: MUL
9902: ST_TO_ADDR
// end ; unit_vehicle :
9903: GO 10731
9905: LD_INT 2
9907: DOUBLE
9908: EQUAL
9909: IFTRUE 9913
9911: GO 10719
9913: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9914: LD_VAR 0 6
9918: PPUSH
9919: CALL_OW 264
9923: PUSH
9924: LD_INT 2
9926: PUSH
9927: LD_INT 42
9929: PUSH
9930: LD_INT 24
9932: PUSH
9933: EMPTY
9934: LIST
9935: LIST
9936: LIST
9937: IN
9938: IFFALSE 9959
// points := [ 25 , 5 , 3 ] ;
9940: LD_ADDR_VAR 0 9
9944: PUSH
9945: LD_INT 25
9947: PUSH
9948: LD_INT 5
9950: PUSH
9951: LD_INT 3
9953: PUSH
9954: EMPTY
9955: LIST
9956: LIST
9957: LIST
9958: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9959: LD_VAR 0 6
9963: PPUSH
9964: CALL_OW 264
9968: PUSH
9969: LD_INT 4
9971: PUSH
9972: LD_INT 43
9974: PUSH
9975: LD_INT 25
9977: PUSH
9978: EMPTY
9979: LIST
9980: LIST
9981: LIST
9982: IN
9983: IFFALSE 10004
// points := [ 40 , 15 , 5 ] ;
9985: LD_ADDR_VAR 0 9
9989: PUSH
9990: LD_INT 40
9992: PUSH
9993: LD_INT 15
9995: PUSH
9996: LD_INT 5
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: LIST
10003: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10004: LD_VAR 0 6
10008: PPUSH
10009: CALL_OW 264
10013: PUSH
10014: LD_INT 3
10016: PUSH
10017: LD_INT 23
10019: PUSH
10020: EMPTY
10021: LIST
10022: LIST
10023: IN
10024: IFFALSE 10045
// points := [ 7 , 25 , 8 ] ;
10026: LD_ADDR_VAR 0 9
10030: PUSH
10031: LD_INT 7
10033: PUSH
10034: LD_INT 25
10036: PUSH
10037: LD_INT 8
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: LIST
10044: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10045: LD_VAR 0 6
10049: PPUSH
10050: CALL_OW 264
10054: PUSH
10055: LD_INT 5
10057: PUSH
10058: LD_INT 27
10060: PUSH
10061: LD_INT 44
10063: PUSH
10064: EMPTY
10065: LIST
10066: LIST
10067: LIST
10068: IN
10069: IFFALSE 10090
// points := [ 14 , 50 , 16 ] ;
10071: LD_ADDR_VAR 0 9
10075: PUSH
10076: LD_INT 14
10078: PUSH
10079: LD_INT 50
10081: PUSH
10082: LD_INT 16
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: LIST
10089: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10090: LD_VAR 0 6
10094: PPUSH
10095: CALL_OW 264
10099: PUSH
10100: LD_INT 6
10102: PUSH
10103: LD_INT 46
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: IN
10110: IFFALSE 10131
// points := [ 32 , 120 , 70 ] ;
10112: LD_ADDR_VAR 0 9
10116: PUSH
10117: LD_INT 32
10119: PUSH
10120: LD_INT 120
10122: PUSH
10123: LD_INT 70
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: LIST
10130: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10131: LD_VAR 0 6
10135: PPUSH
10136: CALL_OW 264
10140: PUSH
10141: LD_INT 7
10143: PUSH
10144: LD_INT 28
10146: PUSH
10147: LD_INT 45
10149: PUSH
10150: LD_INT 92
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: IN
10159: IFFALSE 10180
// points := [ 35 , 20 , 45 ] ;
10161: LD_ADDR_VAR 0 9
10165: PUSH
10166: LD_INT 35
10168: PUSH
10169: LD_INT 20
10171: PUSH
10172: LD_INT 45
10174: PUSH
10175: EMPTY
10176: LIST
10177: LIST
10178: LIST
10179: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10180: LD_VAR 0 6
10184: PPUSH
10185: CALL_OW 264
10189: PUSH
10190: LD_INT 47
10192: PUSH
10193: EMPTY
10194: LIST
10195: IN
10196: IFFALSE 10217
// points := [ 67 , 45 , 75 ] ;
10198: LD_ADDR_VAR 0 9
10202: PUSH
10203: LD_INT 67
10205: PUSH
10206: LD_INT 45
10208: PUSH
10209: LD_INT 75
10211: PUSH
10212: EMPTY
10213: LIST
10214: LIST
10215: LIST
10216: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10217: LD_VAR 0 6
10221: PPUSH
10222: CALL_OW 264
10226: PUSH
10227: LD_INT 26
10229: PUSH
10230: EMPTY
10231: LIST
10232: IN
10233: IFFALSE 10254
// points := [ 120 , 30 , 80 ] ;
10235: LD_ADDR_VAR 0 9
10239: PUSH
10240: LD_INT 120
10242: PUSH
10243: LD_INT 30
10245: PUSH
10246: LD_INT 80
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: LIST
10253: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10254: LD_VAR 0 6
10258: PPUSH
10259: CALL_OW 264
10263: PUSH
10264: LD_INT 22
10266: PUSH
10267: EMPTY
10268: LIST
10269: IN
10270: IFFALSE 10291
// points := [ 40 , 1 , 1 ] ;
10272: LD_ADDR_VAR 0 9
10276: PUSH
10277: LD_INT 40
10279: PUSH
10280: LD_INT 1
10282: PUSH
10283: LD_INT 1
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: LIST
10290: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10291: LD_VAR 0 6
10295: PPUSH
10296: CALL_OW 264
10300: PUSH
10301: LD_INT 29
10303: PUSH
10304: EMPTY
10305: LIST
10306: IN
10307: IFFALSE 10328
// points := [ 70 , 200 , 400 ] ;
10309: LD_ADDR_VAR 0 9
10313: PUSH
10314: LD_INT 70
10316: PUSH
10317: LD_INT 200
10319: PUSH
10320: LD_INT 400
10322: PUSH
10323: EMPTY
10324: LIST
10325: LIST
10326: LIST
10327: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10328: LD_VAR 0 6
10332: PPUSH
10333: CALL_OW 264
10337: PUSH
10338: LD_INT 14
10340: PUSH
10341: LD_INT 53
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: IN
10348: IFFALSE 10369
// points := [ 40 , 10 , 20 ] ;
10350: LD_ADDR_VAR 0 9
10354: PUSH
10355: LD_INT 40
10357: PUSH
10358: LD_INT 10
10360: PUSH
10361: LD_INT 20
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: LIST
10368: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10369: LD_VAR 0 6
10373: PPUSH
10374: CALL_OW 264
10378: PUSH
10379: LD_INT 9
10381: PUSH
10382: EMPTY
10383: LIST
10384: IN
10385: IFFALSE 10406
// points := [ 5 , 70 , 20 ] ;
10387: LD_ADDR_VAR 0 9
10391: PUSH
10392: LD_INT 5
10394: PUSH
10395: LD_INT 70
10397: PUSH
10398: LD_INT 20
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: LIST
10405: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10406: LD_VAR 0 6
10410: PPUSH
10411: CALL_OW 264
10415: PUSH
10416: LD_INT 10
10418: PUSH
10419: EMPTY
10420: LIST
10421: IN
10422: IFFALSE 10443
// points := [ 35 , 110 , 70 ] ;
10424: LD_ADDR_VAR 0 9
10428: PUSH
10429: LD_INT 35
10431: PUSH
10432: LD_INT 110
10434: PUSH
10435: LD_INT 70
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: LIST
10442: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10443: LD_VAR 0 6
10447: PPUSH
10448: CALL_OW 265
10452: PUSH
10453: LD_INT 25
10455: EQUAL
10456: IFFALSE 10477
// points := [ 80 , 65 , 100 ] ;
10458: LD_ADDR_VAR 0 9
10462: PUSH
10463: LD_INT 80
10465: PUSH
10466: LD_INT 65
10468: PUSH
10469: LD_INT 100
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: LIST
10476: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10477: LD_VAR 0 6
10481: PPUSH
10482: CALL_OW 263
10486: PUSH
10487: LD_INT 1
10489: EQUAL
10490: IFFALSE 10525
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10492: LD_ADDR_VAR 0 10
10496: PUSH
10497: LD_VAR 0 10
10501: PUSH
10502: LD_VAR 0 6
10506: PPUSH
10507: CALL_OW 311
10511: PPUSH
10512: LD_INT 3
10514: PPUSH
10515: CALL_OW 259
10519: PUSH
10520: LD_INT 4
10522: MUL
10523: MUL
10524: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10525: LD_VAR 0 6
10529: PPUSH
10530: CALL_OW 263
10534: PUSH
10535: LD_INT 2
10537: EQUAL
10538: IFFALSE 10589
// begin j := IsControledBy ( i ) ;
10540: LD_ADDR_VAR 0 7
10544: PUSH
10545: LD_VAR 0 6
10549: PPUSH
10550: CALL_OW 312
10554: ST_TO_ADDR
// if j then
10555: LD_VAR 0 7
10559: IFFALSE 10589
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10561: LD_ADDR_VAR 0 10
10565: PUSH
10566: LD_VAR 0 10
10570: PUSH
10571: LD_VAR 0 7
10575: PPUSH
10576: LD_INT 3
10578: PPUSH
10579: CALL_OW 259
10583: PUSH
10584: LD_INT 3
10586: MUL
10587: MUL
10588: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10589: LD_VAR 0 6
10593: PPUSH
10594: CALL_OW 264
10598: PUSH
10599: LD_INT 5
10601: PUSH
10602: LD_INT 6
10604: PUSH
10605: LD_INT 46
10607: PUSH
10608: LD_INT 44
10610: PUSH
10611: LD_INT 47
10613: PUSH
10614: LD_INT 45
10616: PUSH
10617: LD_INT 28
10619: PUSH
10620: LD_INT 7
10622: PUSH
10623: LD_INT 27
10625: PUSH
10626: LD_INT 29
10628: PUSH
10629: EMPTY
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: IN
10641: PUSH
10642: LD_VAR 0 1
10646: PPUSH
10647: LD_INT 52
10649: PPUSH
10650: CALL_OW 321
10654: PUSH
10655: LD_INT 2
10657: EQUAL
10658: AND
10659: IFFALSE 10676
// bpoints := bpoints * 1.2 ;
10661: LD_ADDR_VAR 0 10
10665: PUSH
10666: LD_VAR 0 10
10670: PUSH
10671: LD_REAL  1.20000000000000E+0000
10674: MUL
10675: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10676: LD_VAR 0 6
10680: PPUSH
10681: CALL_OW 264
10685: PUSH
10686: LD_INT 6
10688: PUSH
10689: LD_INT 46
10691: PUSH
10692: LD_INT 47
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: LIST
10699: IN
10700: IFFALSE 10717
// bpoints := bpoints * 1.2 ;
10702: LD_ADDR_VAR 0 10
10706: PUSH
10707: LD_VAR 0 10
10711: PUSH
10712: LD_REAL  1.20000000000000E+0000
10715: MUL
10716: ST_TO_ADDR
// end ; unit_building :
10717: GO 10731
10719: LD_INT 3
10721: DOUBLE
10722: EQUAL
10723: IFTRUE 10727
10725: GO 10730
10727: POP
// ; end ;
10728: GO 10731
10730: POP
// for j = 1 to 3 do
10731: LD_ADDR_VAR 0 7
10735: PUSH
10736: DOUBLE
10737: LD_INT 1
10739: DEC
10740: ST_TO_ADDR
10741: LD_INT 3
10743: PUSH
10744: FOR_TO
10745: IFFALSE 10798
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10747: LD_ADDR_VAR 0 5
10751: PUSH
10752: LD_VAR 0 5
10756: PPUSH
10757: LD_VAR 0 7
10761: PPUSH
10762: LD_VAR 0 5
10766: PUSH
10767: LD_VAR 0 7
10771: ARRAY
10772: PUSH
10773: LD_VAR 0 9
10777: PUSH
10778: LD_VAR 0 7
10782: ARRAY
10783: PUSH
10784: LD_VAR 0 10
10788: MUL
10789: PLUS
10790: PPUSH
10791: CALL_OW 1
10795: ST_TO_ADDR
10796: GO 10744
10798: POP
10799: POP
// end ;
10800: GO 9279
10802: POP
10803: POP
// result := Replace ( result , 4 , tmp ) ;
10804: LD_ADDR_VAR 0 5
10808: PUSH
10809: LD_VAR 0 5
10813: PPUSH
10814: LD_INT 4
10816: PPUSH
10817: LD_VAR 0 8
10821: PPUSH
10822: CALL_OW 1
10826: ST_TO_ADDR
// end ;
10827: LD_VAR 0 5
10831: RET
// export function DangerAtRange ( unit , range ) ; begin
10832: LD_INT 0
10834: PPUSH
// if not unit then
10835: LD_VAR 0 1
10839: NOT
10840: IFFALSE 10844
// exit ;
10842: GO 10889
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10844: LD_ADDR_VAR 0 3
10848: PUSH
10849: LD_VAR 0 1
10853: PPUSH
10854: CALL_OW 255
10858: PPUSH
10859: LD_VAR 0 1
10863: PPUSH
10864: CALL_OW 250
10868: PPUSH
10869: LD_VAR 0 1
10873: PPUSH
10874: CALL_OW 251
10878: PPUSH
10879: LD_VAR 0 2
10883: PPUSH
10884: CALL 9131 0 4
10888: ST_TO_ADDR
// end ;
10889: LD_VAR 0 3
10893: RET
// export function DangerInArea ( side , area ) ; begin
10894: LD_INT 0
10896: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10897: LD_ADDR_VAR 0 3
10901: PUSH
10902: LD_VAR 0 2
10906: PPUSH
10907: LD_INT 81
10909: PUSH
10910: LD_VAR 0 1
10914: PUSH
10915: EMPTY
10916: LIST
10917: LIST
10918: PPUSH
10919: CALL_OW 70
10923: ST_TO_ADDR
// end ;
10924: LD_VAR 0 3
10928: RET
// export function IsExtension ( b ) ; begin
10929: LD_INT 0
10931: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10932: LD_ADDR_VAR 0 2
10936: PUSH
10937: LD_VAR 0 1
10941: PUSH
10942: LD_INT 23
10944: PUSH
10945: LD_INT 20
10947: PUSH
10948: LD_INT 22
10950: PUSH
10951: LD_INT 17
10953: PUSH
10954: LD_INT 24
10956: PUSH
10957: LD_INT 21
10959: PUSH
10960: LD_INT 19
10962: PUSH
10963: LD_INT 16
10965: PUSH
10966: LD_INT 25
10968: PUSH
10969: LD_INT 18
10971: PUSH
10972: EMPTY
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: IN
10984: ST_TO_ADDR
// end ;
10985: LD_VAR 0 2
10989: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
10990: LD_INT 0
10992: PPUSH
10993: PPUSH
10994: PPUSH
// result := [ ] ;
10995: LD_ADDR_VAR 0 4
10999: PUSH
11000: EMPTY
11001: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11002: LD_ADDR_VAR 0 5
11006: PUSH
11007: LD_VAR 0 2
11011: PPUSH
11012: LD_INT 21
11014: PUSH
11015: LD_INT 3
11017: PUSH
11018: EMPTY
11019: LIST
11020: LIST
11021: PPUSH
11022: CALL_OW 70
11026: ST_TO_ADDR
// if not tmp then
11027: LD_VAR 0 5
11031: NOT
11032: IFFALSE 11036
// exit ;
11034: GO 11100
// if checkLink then
11036: LD_VAR 0 3
11040: IFFALSE 11090
// begin for i in tmp do
11042: LD_ADDR_VAR 0 6
11046: PUSH
11047: LD_VAR 0 5
11051: PUSH
11052: FOR_IN
11053: IFFALSE 11088
// if GetBase ( i ) <> base then
11055: LD_VAR 0 6
11059: PPUSH
11060: CALL_OW 274
11064: PUSH
11065: LD_VAR 0 1
11069: NONEQUAL
11070: IFFALSE 11086
// ComLinkToBase ( base , i ) ;
11072: LD_VAR 0 1
11076: PPUSH
11077: LD_VAR 0 6
11081: PPUSH
11082: CALL_OW 169
11086: GO 11052
11088: POP
11089: POP
// end ; result := tmp ;
11090: LD_ADDR_VAR 0 4
11094: PUSH
11095: LD_VAR 0 5
11099: ST_TO_ADDR
// end ;
11100: LD_VAR 0 4
11104: RET
// export function ComComplete ( units , b ) ; var i ; begin
11105: LD_INT 0
11107: PPUSH
11108: PPUSH
// if not units then
11109: LD_VAR 0 1
11113: NOT
11114: IFFALSE 11118
// exit ;
11116: GO 11208
// for i in units do
11118: LD_ADDR_VAR 0 4
11122: PUSH
11123: LD_VAR 0 1
11127: PUSH
11128: FOR_IN
11129: IFFALSE 11206
// if BuildingStatus ( b ) = bs_build then
11131: LD_VAR 0 2
11135: PPUSH
11136: CALL_OW 461
11140: PUSH
11141: LD_INT 1
11143: EQUAL
11144: IFFALSE 11204
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11146: LD_VAR 0 4
11150: PPUSH
11151: LD_STRING h
11153: PUSH
11154: LD_VAR 0 2
11158: PPUSH
11159: CALL_OW 250
11163: PUSH
11164: LD_VAR 0 2
11168: PPUSH
11169: CALL_OW 251
11173: PUSH
11174: LD_VAR 0 2
11178: PUSH
11179: LD_INT 0
11181: PUSH
11182: LD_INT 0
11184: PUSH
11185: LD_INT 0
11187: PUSH
11188: EMPTY
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: PUSH
11197: EMPTY
11198: LIST
11199: PPUSH
11200: CALL_OW 446
11204: GO 11128
11206: POP
11207: POP
// end ;
11208: LD_VAR 0 3
11212: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11213: LD_INT 0
11215: PPUSH
11216: PPUSH
11217: PPUSH
11218: PPUSH
11219: PPUSH
11220: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11221: LD_VAR 0 1
11225: NOT
11226: PUSH
11227: LD_VAR 0 1
11231: PPUSH
11232: CALL_OW 263
11236: PUSH
11237: LD_INT 2
11239: NONEQUAL
11240: OR
11241: IFFALSE 11245
// exit ;
11243: GO 11561
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11245: LD_ADDR_VAR 0 6
11249: PUSH
11250: LD_INT 22
11252: PUSH
11253: LD_VAR 0 1
11257: PPUSH
11258: CALL_OW 255
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: PUSH
11267: LD_INT 2
11269: PUSH
11270: LD_INT 30
11272: PUSH
11273: LD_INT 36
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: PUSH
11280: LD_INT 34
11282: PUSH
11283: LD_INT 31
11285: PUSH
11286: EMPTY
11287: LIST
11288: LIST
11289: PUSH
11290: EMPTY
11291: LIST
11292: LIST
11293: LIST
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: PPUSH
11299: CALL_OW 69
11303: ST_TO_ADDR
// if not tmp then
11304: LD_VAR 0 6
11308: NOT
11309: IFFALSE 11313
// exit ;
11311: GO 11561
// result := [ ] ;
11313: LD_ADDR_VAR 0 2
11317: PUSH
11318: EMPTY
11319: ST_TO_ADDR
// for i in tmp do
11320: LD_ADDR_VAR 0 3
11324: PUSH
11325: LD_VAR 0 6
11329: PUSH
11330: FOR_IN
11331: IFFALSE 11402
// begin t := UnitsInside ( i ) ;
11333: LD_ADDR_VAR 0 4
11337: PUSH
11338: LD_VAR 0 3
11342: PPUSH
11343: CALL_OW 313
11347: ST_TO_ADDR
// if t then
11348: LD_VAR 0 4
11352: IFFALSE 11400
// for j in t do
11354: LD_ADDR_VAR 0 7
11358: PUSH
11359: LD_VAR 0 4
11363: PUSH
11364: FOR_IN
11365: IFFALSE 11398
// result := Replace ( result , result + 1 , j ) ;
11367: LD_ADDR_VAR 0 2
11371: PUSH
11372: LD_VAR 0 2
11376: PPUSH
11377: LD_VAR 0 2
11381: PUSH
11382: LD_INT 1
11384: PLUS
11385: PPUSH
11386: LD_VAR 0 7
11390: PPUSH
11391: CALL_OW 1
11395: ST_TO_ADDR
11396: GO 11364
11398: POP
11399: POP
// end ;
11400: GO 11330
11402: POP
11403: POP
// if not result then
11404: LD_VAR 0 2
11408: NOT
11409: IFFALSE 11413
// exit ;
11411: GO 11561
// mech := result [ 1 ] ;
11413: LD_ADDR_VAR 0 5
11417: PUSH
11418: LD_VAR 0 2
11422: PUSH
11423: LD_INT 1
11425: ARRAY
11426: ST_TO_ADDR
// if result > 1 then
11427: LD_VAR 0 2
11431: PUSH
11432: LD_INT 1
11434: GREATER
11435: IFFALSE 11547
// begin for i = 2 to result do
11437: LD_ADDR_VAR 0 3
11441: PUSH
11442: DOUBLE
11443: LD_INT 2
11445: DEC
11446: ST_TO_ADDR
11447: LD_VAR 0 2
11451: PUSH
11452: FOR_TO
11453: IFFALSE 11545
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11455: LD_ADDR_VAR 0 4
11459: PUSH
11460: LD_VAR 0 2
11464: PUSH
11465: LD_VAR 0 3
11469: ARRAY
11470: PPUSH
11471: LD_INT 3
11473: PPUSH
11474: CALL_OW 259
11478: PUSH
11479: LD_VAR 0 2
11483: PUSH
11484: LD_VAR 0 3
11488: ARRAY
11489: PPUSH
11490: CALL_OW 432
11494: MINUS
11495: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11496: LD_VAR 0 4
11500: PUSH
11501: LD_VAR 0 5
11505: PPUSH
11506: LD_INT 3
11508: PPUSH
11509: CALL_OW 259
11513: PUSH
11514: LD_VAR 0 5
11518: PPUSH
11519: CALL_OW 432
11523: MINUS
11524: GREATEREQUAL
11525: IFFALSE 11543
// mech := result [ i ] ;
11527: LD_ADDR_VAR 0 5
11531: PUSH
11532: LD_VAR 0 2
11536: PUSH
11537: LD_VAR 0 3
11541: ARRAY
11542: ST_TO_ADDR
// end ;
11543: GO 11452
11545: POP
11546: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11547: LD_VAR 0 1
11551: PPUSH
11552: LD_VAR 0 5
11556: PPUSH
11557: CALL_OW 135
// end ;
11561: LD_VAR 0 2
11565: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11566: LD_INT 0
11568: PPUSH
11569: PPUSH
11570: PPUSH
11571: PPUSH
11572: PPUSH
11573: PPUSH
11574: PPUSH
11575: PPUSH
11576: PPUSH
11577: PPUSH
11578: PPUSH
11579: PPUSH
11580: PPUSH
// result := [ ] ;
11581: LD_ADDR_VAR 0 7
11585: PUSH
11586: EMPTY
11587: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11588: LD_VAR 0 1
11592: PPUSH
11593: CALL_OW 266
11597: PUSH
11598: LD_INT 0
11600: PUSH
11601: LD_INT 1
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: IN
11608: NOT
11609: IFFALSE 11613
// exit ;
11611: GO 13247
// if name then
11613: LD_VAR 0 3
11617: IFFALSE 11633
// SetBName ( base_dep , name ) ;
11619: LD_VAR 0 1
11623: PPUSH
11624: LD_VAR 0 3
11628: PPUSH
11629: CALL_OW 500
// base := GetBase ( base_dep ) ;
11633: LD_ADDR_VAR 0 15
11637: PUSH
11638: LD_VAR 0 1
11642: PPUSH
11643: CALL_OW 274
11647: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11648: LD_ADDR_VAR 0 16
11652: PUSH
11653: LD_VAR 0 1
11657: PPUSH
11658: CALL_OW 255
11662: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11663: LD_ADDR_VAR 0 17
11667: PUSH
11668: LD_VAR 0 1
11672: PPUSH
11673: CALL_OW 248
11677: ST_TO_ADDR
// if sources then
11678: LD_VAR 0 5
11682: IFFALSE 11729
// for i = 1 to 3 do
11684: LD_ADDR_VAR 0 8
11688: PUSH
11689: DOUBLE
11690: LD_INT 1
11692: DEC
11693: ST_TO_ADDR
11694: LD_INT 3
11696: PUSH
11697: FOR_TO
11698: IFFALSE 11727
// AddResourceType ( base , i , sources [ i ] ) ;
11700: LD_VAR 0 15
11704: PPUSH
11705: LD_VAR 0 8
11709: PPUSH
11710: LD_VAR 0 5
11714: PUSH
11715: LD_VAR 0 8
11719: ARRAY
11720: PPUSH
11721: CALL_OW 276
11725: GO 11697
11727: POP
11728: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11729: LD_ADDR_VAR 0 18
11733: PUSH
11734: LD_VAR 0 15
11738: PPUSH
11739: LD_VAR 0 2
11743: PPUSH
11744: LD_INT 1
11746: PPUSH
11747: CALL 10990 0 3
11751: ST_TO_ADDR
// InitHc ;
11752: CALL_OW 19
// InitUc ;
11756: CALL_OW 18
// uc_side := side ;
11760: LD_ADDR_OWVAR 20
11764: PUSH
11765: LD_VAR 0 16
11769: ST_TO_ADDR
// uc_nation := nation ;
11770: LD_ADDR_OWVAR 21
11774: PUSH
11775: LD_VAR 0 17
11779: ST_TO_ADDR
// if buildings then
11780: LD_VAR 0 18
11784: IFFALSE 13106
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11786: LD_ADDR_VAR 0 19
11790: PUSH
11791: LD_VAR 0 18
11795: PPUSH
11796: LD_INT 2
11798: PUSH
11799: LD_INT 30
11801: PUSH
11802: LD_INT 29
11804: PUSH
11805: EMPTY
11806: LIST
11807: LIST
11808: PUSH
11809: LD_INT 30
11811: PUSH
11812: LD_INT 30
11814: PUSH
11815: EMPTY
11816: LIST
11817: LIST
11818: PUSH
11819: EMPTY
11820: LIST
11821: LIST
11822: LIST
11823: PPUSH
11824: CALL_OW 72
11828: ST_TO_ADDR
// if tmp then
11829: LD_VAR 0 19
11833: IFFALSE 11881
// for i in tmp do
11835: LD_ADDR_VAR 0 8
11839: PUSH
11840: LD_VAR 0 19
11844: PUSH
11845: FOR_IN
11846: IFFALSE 11879
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11848: LD_VAR 0 8
11852: PPUSH
11853: CALL_OW 250
11857: PPUSH
11858: LD_VAR 0 8
11862: PPUSH
11863: CALL_OW 251
11867: PPUSH
11868: LD_VAR 0 16
11872: PPUSH
11873: CALL_OW 441
11877: GO 11845
11879: POP
11880: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11881: LD_VAR 0 18
11885: PPUSH
11886: LD_INT 2
11888: PUSH
11889: LD_INT 30
11891: PUSH
11892: LD_INT 32
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PUSH
11899: LD_INT 30
11901: PUSH
11902: LD_INT 33
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: LIST
11913: PPUSH
11914: CALL_OW 72
11918: IFFALSE 12006
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11920: LD_ADDR_VAR 0 8
11924: PUSH
11925: LD_VAR 0 18
11929: PPUSH
11930: LD_INT 2
11932: PUSH
11933: LD_INT 30
11935: PUSH
11936: LD_INT 32
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: PUSH
11943: LD_INT 30
11945: PUSH
11946: LD_INT 33
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: PUSH
11953: EMPTY
11954: LIST
11955: LIST
11956: LIST
11957: PPUSH
11958: CALL_OW 72
11962: PUSH
11963: FOR_IN
11964: IFFALSE 12004
// begin if not GetBWeapon ( i ) then
11966: LD_VAR 0 8
11970: PPUSH
11971: CALL_OW 269
11975: NOT
11976: IFFALSE 12002
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11978: LD_VAR 0 8
11982: PPUSH
11983: LD_VAR 0 8
11987: PPUSH
11988: LD_VAR 0 2
11992: PPUSH
11993: CALL 13252 0 2
11997: PPUSH
11998: CALL_OW 431
// end ;
12002: GO 11963
12004: POP
12005: POP
// end ; for i = 1 to personel do
12006: LD_ADDR_VAR 0 8
12010: PUSH
12011: DOUBLE
12012: LD_INT 1
12014: DEC
12015: ST_TO_ADDR
12016: LD_VAR 0 6
12020: PUSH
12021: FOR_TO
12022: IFFALSE 13086
// begin if i > 4 then
12024: LD_VAR 0 8
12028: PUSH
12029: LD_INT 4
12031: GREATER
12032: IFFALSE 12036
// break ;
12034: GO 13086
// case i of 1 :
12036: LD_VAR 0 8
12040: PUSH
12041: LD_INT 1
12043: DOUBLE
12044: EQUAL
12045: IFTRUE 12049
12047: GO 12129
12049: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12050: LD_ADDR_VAR 0 12
12054: PUSH
12055: LD_VAR 0 18
12059: PPUSH
12060: LD_INT 22
12062: PUSH
12063: LD_VAR 0 16
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: PUSH
12072: LD_INT 58
12074: PUSH
12075: EMPTY
12076: LIST
12077: PUSH
12078: LD_INT 2
12080: PUSH
12081: LD_INT 30
12083: PUSH
12084: LD_INT 32
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: PUSH
12091: LD_INT 30
12093: PUSH
12094: LD_INT 4
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: PUSH
12101: LD_INT 30
12103: PUSH
12104: LD_INT 5
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: LIST
12121: PPUSH
12122: CALL_OW 72
12126: ST_TO_ADDR
12127: GO 12351
12129: LD_INT 2
12131: DOUBLE
12132: EQUAL
12133: IFTRUE 12137
12135: GO 12199
12137: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12138: LD_ADDR_VAR 0 12
12142: PUSH
12143: LD_VAR 0 18
12147: PPUSH
12148: LD_INT 22
12150: PUSH
12151: LD_VAR 0 16
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: PUSH
12160: LD_INT 2
12162: PUSH
12163: LD_INT 30
12165: PUSH
12166: LD_INT 0
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: PUSH
12173: LD_INT 30
12175: PUSH
12176: LD_INT 1
12178: PUSH
12179: EMPTY
12180: LIST
12181: LIST
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: LIST
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: PPUSH
12192: CALL_OW 72
12196: ST_TO_ADDR
12197: GO 12351
12199: LD_INT 3
12201: DOUBLE
12202: EQUAL
12203: IFTRUE 12207
12205: GO 12269
12207: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12208: LD_ADDR_VAR 0 12
12212: PUSH
12213: LD_VAR 0 18
12217: PPUSH
12218: LD_INT 22
12220: PUSH
12221: LD_VAR 0 16
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PUSH
12230: LD_INT 2
12232: PUSH
12233: LD_INT 30
12235: PUSH
12236: LD_INT 2
12238: PUSH
12239: EMPTY
12240: LIST
12241: LIST
12242: PUSH
12243: LD_INT 30
12245: PUSH
12246: LD_INT 3
12248: PUSH
12249: EMPTY
12250: LIST
12251: LIST
12252: PUSH
12253: EMPTY
12254: LIST
12255: LIST
12256: LIST
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: PPUSH
12262: CALL_OW 72
12266: ST_TO_ADDR
12267: GO 12351
12269: LD_INT 4
12271: DOUBLE
12272: EQUAL
12273: IFTRUE 12277
12275: GO 12350
12277: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12278: LD_ADDR_VAR 0 12
12282: PUSH
12283: LD_VAR 0 18
12287: PPUSH
12288: LD_INT 22
12290: PUSH
12291: LD_VAR 0 16
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: PUSH
12300: LD_INT 2
12302: PUSH
12303: LD_INT 30
12305: PUSH
12306: LD_INT 6
12308: PUSH
12309: EMPTY
12310: LIST
12311: LIST
12312: PUSH
12313: LD_INT 30
12315: PUSH
12316: LD_INT 7
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: PUSH
12323: LD_INT 30
12325: PUSH
12326: LD_INT 8
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: PUSH
12339: EMPTY
12340: LIST
12341: LIST
12342: PPUSH
12343: CALL_OW 72
12347: ST_TO_ADDR
12348: GO 12351
12350: POP
// if i = 1 then
12351: LD_VAR 0 8
12355: PUSH
12356: LD_INT 1
12358: EQUAL
12359: IFFALSE 12470
// begin tmp := [ ] ;
12361: LD_ADDR_VAR 0 19
12365: PUSH
12366: EMPTY
12367: ST_TO_ADDR
// for j in f do
12368: LD_ADDR_VAR 0 9
12372: PUSH
12373: LD_VAR 0 12
12377: PUSH
12378: FOR_IN
12379: IFFALSE 12452
// if GetBType ( j ) = b_bunker then
12381: LD_VAR 0 9
12385: PPUSH
12386: CALL_OW 266
12390: PUSH
12391: LD_INT 32
12393: EQUAL
12394: IFFALSE 12421
// tmp := Insert ( tmp , 1 , j ) else
12396: LD_ADDR_VAR 0 19
12400: PUSH
12401: LD_VAR 0 19
12405: PPUSH
12406: LD_INT 1
12408: PPUSH
12409: LD_VAR 0 9
12413: PPUSH
12414: CALL_OW 2
12418: ST_TO_ADDR
12419: GO 12450
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12421: LD_ADDR_VAR 0 19
12425: PUSH
12426: LD_VAR 0 19
12430: PPUSH
12431: LD_VAR 0 19
12435: PUSH
12436: LD_INT 1
12438: PLUS
12439: PPUSH
12440: LD_VAR 0 9
12444: PPUSH
12445: CALL_OW 2
12449: ST_TO_ADDR
12450: GO 12378
12452: POP
12453: POP
// if tmp then
12454: LD_VAR 0 19
12458: IFFALSE 12470
// f := tmp ;
12460: LD_ADDR_VAR 0 12
12464: PUSH
12465: LD_VAR 0 19
12469: ST_TO_ADDR
// end ; x := personel [ i ] ;
12470: LD_ADDR_VAR 0 13
12474: PUSH
12475: LD_VAR 0 6
12479: PUSH
12480: LD_VAR 0 8
12484: ARRAY
12485: ST_TO_ADDR
// if x = - 1 then
12486: LD_VAR 0 13
12490: PUSH
12491: LD_INT 1
12493: NEG
12494: EQUAL
12495: IFFALSE 12704
// begin for j in f do
12497: LD_ADDR_VAR 0 9
12501: PUSH
12502: LD_VAR 0 12
12506: PUSH
12507: FOR_IN
12508: IFFALSE 12700
// repeat InitHc ;
12510: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12514: LD_VAR 0 9
12518: PPUSH
12519: CALL_OW 266
12523: PUSH
12524: LD_INT 5
12526: EQUAL
12527: IFFALSE 12597
// begin if UnitsInside ( j ) < 3 then
12529: LD_VAR 0 9
12533: PPUSH
12534: CALL_OW 313
12538: PUSH
12539: LD_INT 3
12541: LESS
12542: IFFALSE 12578
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12544: LD_INT 0
12546: PPUSH
12547: LD_INT 5
12549: PUSH
12550: LD_INT 8
12552: PUSH
12553: LD_INT 9
12555: PUSH
12556: EMPTY
12557: LIST
12558: LIST
12559: LIST
12560: PUSH
12561: LD_VAR 0 17
12565: ARRAY
12566: PPUSH
12567: LD_VAR 0 4
12571: PPUSH
12572: CALL_OW 380
12576: GO 12595
// PrepareHuman ( false , i , skill ) ;
12578: LD_INT 0
12580: PPUSH
12581: LD_VAR 0 8
12585: PPUSH
12586: LD_VAR 0 4
12590: PPUSH
12591: CALL_OW 380
// end else
12595: GO 12614
// PrepareHuman ( false , i , skill ) ;
12597: LD_INT 0
12599: PPUSH
12600: LD_VAR 0 8
12604: PPUSH
12605: LD_VAR 0 4
12609: PPUSH
12610: CALL_OW 380
// un := CreateHuman ;
12614: LD_ADDR_VAR 0 14
12618: PUSH
12619: CALL_OW 44
12623: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12624: LD_ADDR_VAR 0 7
12628: PUSH
12629: LD_VAR 0 7
12633: PPUSH
12634: LD_INT 1
12636: PPUSH
12637: LD_VAR 0 14
12641: PPUSH
12642: CALL_OW 2
12646: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12647: LD_VAR 0 14
12651: PPUSH
12652: LD_VAR 0 9
12656: PPUSH
12657: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12661: LD_VAR 0 9
12665: PPUSH
12666: CALL_OW 313
12670: PUSH
12671: LD_INT 6
12673: EQUAL
12674: PUSH
12675: LD_VAR 0 9
12679: PPUSH
12680: CALL_OW 266
12684: PUSH
12685: LD_INT 32
12687: PUSH
12688: LD_INT 31
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: IN
12695: OR
12696: IFFALSE 12510
12698: GO 12507
12700: POP
12701: POP
// end else
12702: GO 13084
// for j = 1 to x do
12704: LD_ADDR_VAR 0 9
12708: PUSH
12709: DOUBLE
12710: LD_INT 1
12712: DEC
12713: ST_TO_ADDR
12714: LD_VAR 0 13
12718: PUSH
12719: FOR_TO
12720: IFFALSE 13082
// begin InitHc ;
12722: CALL_OW 19
// if not f then
12726: LD_VAR 0 12
12730: NOT
12731: IFFALSE 12820
// begin PrepareHuman ( false , i , skill ) ;
12733: LD_INT 0
12735: PPUSH
12736: LD_VAR 0 8
12740: PPUSH
12741: LD_VAR 0 4
12745: PPUSH
12746: CALL_OW 380
// un := CreateHuman ;
12750: LD_ADDR_VAR 0 14
12754: PUSH
12755: CALL_OW 44
12759: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12760: LD_ADDR_VAR 0 7
12764: PUSH
12765: LD_VAR 0 7
12769: PPUSH
12770: LD_INT 1
12772: PPUSH
12773: LD_VAR 0 14
12777: PPUSH
12778: CALL_OW 2
12782: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12783: LD_VAR 0 14
12787: PPUSH
12788: LD_VAR 0 1
12792: PPUSH
12793: CALL_OW 250
12797: PPUSH
12798: LD_VAR 0 1
12802: PPUSH
12803: CALL_OW 251
12807: PPUSH
12808: LD_INT 10
12810: PPUSH
12811: LD_INT 0
12813: PPUSH
12814: CALL_OW 50
// continue ;
12818: GO 12719
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12820: LD_VAR 0 12
12824: PUSH
12825: LD_INT 1
12827: ARRAY
12828: PPUSH
12829: CALL_OW 313
12833: PUSH
12834: LD_VAR 0 12
12838: PUSH
12839: LD_INT 1
12841: ARRAY
12842: PPUSH
12843: CALL_OW 266
12847: PUSH
12848: LD_INT 32
12850: PUSH
12851: LD_INT 31
12853: PUSH
12854: EMPTY
12855: LIST
12856: LIST
12857: IN
12858: AND
12859: PUSH
12860: LD_VAR 0 12
12864: PUSH
12865: LD_INT 1
12867: ARRAY
12868: PPUSH
12869: CALL_OW 313
12873: PUSH
12874: LD_INT 6
12876: EQUAL
12877: OR
12878: IFFALSE 12898
// f := Delete ( f , 1 ) ;
12880: LD_ADDR_VAR 0 12
12884: PUSH
12885: LD_VAR 0 12
12889: PPUSH
12890: LD_INT 1
12892: PPUSH
12893: CALL_OW 3
12897: ST_TO_ADDR
// if not f then
12898: LD_VAR 0 12
12902: NOT
12903: IFFALSE 12921
// begin x := x + 2 ;
12905: LD_ADDR_VAR 0 13
12909: PUSH
12910: LD_VAR 0 13
12914: PUSH
12915: LD_INT 2
12917: PLUS
12918: ST_TO_ADDR
// continue ;
12919: GO 12719
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12921: LD_VAR 0 12
12925: PUSH
12926: LD_INT 1
12928: ARRAY
12929: PPUSH
12930: CALL_OW 266
12934: PUSH
12935: LD_INT 5
12937: EQUAL
12938: IFFALSE 13012
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12940: LD_VAR 0 12
12944: PUSH
12945: LD_INT 1
12947: ARRAY
12948: PPUSH
12949: CALL_OW 313
12953: PUSH
12954: LD_INT 3
12956: LESS
12957: IFFALSE 12993
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12959: LD_INT 0
12961: PPUSH
12962: LD_INT 5
12964: PUSH
12965: LD_INT 8
12967: PUSH
12968: LD_INT 9
12970: PUSH
12971: EMPTY
12972: LIST
12973: LIST
12974: LIST
12975: PUSH
12976: LD_VAR 0 17
12980: ARRAY
12981: PPUSH
12982: LD_VAR 0 4
12986: PPUSH
12987: CALL_OW 380
12991: GO 13010
// PrepareHuman ( false , i , skill ) ;
12993: LD_INT 0
12995: PPUSH
12996: LD_VAR 0 8
13000: PPUSH
13001: LD_VAR 0 4
13005: PPUSH
13006: CALL_OW 380
// end else
13010: GO 13029
// PrepareHuman ( false , i , skill ) ;
13012: LD_INT 0
13014: PPUSH
13015: LD_VAR 0 8
13019: PPUSH
13020: LD_VAR 0 4
13024: PPUSH
13025: CALL_OW 380
// un := CreateHuman ;
13029: LD_ADDR_VAR 0 14
13033: PUSH
13034: CALL_OW 44
13038: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13039: LD_ADDR_VAR 0 7
13043: PUSH
13044: LD_VAR 0 7
13048: PPUSH
13049: LD_INT 1
13051: PPUSH
13052: LD_VAR 0 14
13056: PPUSH
13057: CALL_OW 2
13061: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13062: LD_VAR 0 14
13066: PPUSH
13067: LD_VAR 0 12
13071: PUSH
13072: LD_INT 1
13074: ARRAY
13075: PPUSH
13076: CALL_OW 52
// end ;
13080: GO 12719
13082: POP
13083: POP
// end ;
13084: GO 12021
13086: POP
13087: POP
// result := result ^ buildings ;
13088: LD_ADDR_VAR 0 7
13092: PUSH
13093: LD_VAR 0 7
13097: PUSH
13098: LD_VAR 0 18
13102: ADD
13103: ST_TO_ADDR
// end else
13104: GO 13247
// begin for i = 1 to personel do
13106: LD_ADDR_VAR 0 8
13110: PUSH
13111: DOUBLE
13112: LD_INT 1
13114: DEC
13115: ST_TO_ADDR
13116: LD_VAR 0 6
13120: PUSH
13121: FOR_TO
13122: IFFALSE 13245
// begin if i > 4 then
13124: LD_VAR 0 8
13128: PUSH
13129: LD_INT 4
13131: GREATER
13132: IFFALSE 13136
// break ;
13134: GO 13245
// x := personel [ i ] ;
13136: LD_ADDR_VAR 0 13
13140: PUSH
13141: LD_VAR 0 6
13145: PUSH
13146: LD_VAR 0 8
13150: ARRAY
13151: ST_TO_ADDR
// if x = - 1 then
13152: LD_VAR 0 13
13156: PUSH
13157: LD_INT 1
13159: NEG
13160: EQUAL
13161: IFFALSE 13165
// continue ;
13163: GO 13121
// PrepareHuman ( false , i , skill ) ;
13165: LD_INT 0
13167: PPUSH
13168: LD_VAR 0 8
13172: PPUSH
13173: LD_VAR 0 4
13177: PPUSH
13178: CALL_OW 380
// un := CreateHuman ;
13182: LD_ADDR_VAR 0 14
13186: PUSH
13187: CALL_OW 44
13191: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13192: LD_VAR 0 14
13196: PPUSH
13197: LD_VAR 0 1
13201: PPUSH
13202: CALL_OW 250
13206: PPUSH
13207: LD_VAR 0 1
13211: PPUSH
13212: CALL_OW 251
13216: PPUSH
13217: LD_INT 10
13219: PPUSH
13220: LD_INT 0
13222: PPUSH
13223: CALL_OW 50
// result := result ^ un ;
13227: LD_ADDR_VAR 0 7
13231: PUSH
13232: LD_VAR 0 7
13236: PUSH
13237: LD_VAR 0 14
13241: ADD
13242: ST_TO_ADDR
// end ;
13243: GO 13121
13245: POP
13246: POP
// end ; end ;
13247: LD_VAR 0 7
13251: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13252: LD_INT 0
13254: PPUSH
13255: PPUSH
13256: PPUSH
13257: PPUSH
13258: PPUSH
13259: PPUSH
13260: PPUSH
13261: PPUSH
13262: PPUSH
13263: PPUSH
13264: PPUSH
13265: PPUSH
13266: PPUSH
13267: PPUSH
13268: PPUSH
13269: PPUSH
// result := false ;
13270: LD_ADDR_VAR 0 3
13274: PUSH
13275: LD_INT 0
13277: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13278: LD_VAR 0 1
13282: NOT
13283: PUSH
13284: LD_VAR 0 1
13288: PPUSH
13289: CALL_OW 266
13293: PUSH
13294: LD_INT 32
13296: PUSH
13297: LD_INT 33
13299: PUSH
13300: EMPTY
13301: LIST
13302: LIST
13303: IN
13304: NOT
13305: OR
13306: IFFALSE 13310
// exit ;
13308: GO 14419
// nat := GetNation ( tower ) ;
13310: LD_ADDR_VAR 0 12
13314: PUSH
13315: LD_VAR 0 1
13319: PPUSH
13320: CALL_OW 248
13324: ST_TO_ADDR
// side := GetSide ( tower ) ;
13325: LD_ADDR_VAR 0 16
13329: PUSH
13330: LD_VAR 0 1
13334: PPUSH
13335: CALL_OW 255
13339: ST_TO_ADDR
// x := GetX ( tower ) ;
13340: LD_ADDR_VAR 0 10
13344: PUSH
13345: LD_VAR 0 1
13349: PPUSH
13350: CALL_OW 250
13354: ST_TO_ADDR
// y := GetY ( tower ) ;
13355: LD_ADDR_VAR 0 11
13359: PUSH
13360: LD_VAR 0 1
13364: PPUSH
13365: CALL_OW 251
13369: ST_TO_ADDR
// if not x or not y then
13370: LD_VAR 0 10
13374: NOT
13375: PUSH
13376: LD_VAR 0 11
13380: NOT
13381: OR
13382: IFFALSE 13386
// exit ;
13384: GO 14419
// weapon := 0 ;
13386: LD_ADDR_VAR 0 18
13390: PUSH
13391: LD_INT 0
13393: ST_TO_ADDR
// fac_list := [ ] ;
13394: LD_ADDR_VAR 0 17
13398: PUSH
13399: EMPTY
13400: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13401: LD_ADDR_VAR 0 6
13405: PUSH
13406: LD_VAR 0 1
13410: PPUSH
13411: CALL_OW 274
13415: PPUSH
13416: LD_VAR 0 2
13420: PPUSH
13421: LD_INT 0
13423: PPUSH
13424: CALL 10990 0 3
13428: PPUSH
13429: LD_INT 30
13431: PUSH
13432: LD_INT 3
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: PPUSH
13439: CALL_OW 72
13443: ST_TO_ADDR
// if not factories then
13444: LD_VAR 0 6
13448: NOT
13449: IFFALSE 13453
// exit ;
13451: GO 14419
// for i in factories do
13453: LD_ADDR_VAR 0 8
13457: PUSH
13458: LD_VAR 0 6
13462: PUSH
13463: FOR_IN
13464: IFFALSE 13489
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13466: LD_ADDR_VAR 0 17
13470: PUSH
13471: LD_VAR 0 17
13475: PUSH
13476: LD_VAR 0 8
13480: PPUSH
13481: CALL_OW 478
13485: UNION
13486: ST_TO_ADDR
13487: GO 13463
13489: POP
13490: POP
// if not fac_list then
13491: LD_VAR 0 17
13495: NOT
13496: IFFALSE 13500
// exit ;
13498: GO 14419
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13500: LD_ADDR_VAR 0 5
13504: PUSH
13505: LD_INT 4
13507: PUSH
13508: LD_INT 5
13510: PUSH
13511: LD_INT 9
13513: PUSH
13514: LD_INT 10
13516: PUSH
13517: LD_INT 6
13519: PUSH
13520: LD_INT 7
13522: PUSH
13523: LD_INT 11
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: LIST
13533: LIST
13534: PUSH
13535: LD_INT 27
13537: PUSH
13538: LD_INT 28
13540: PUSH
13541: LD_INT 26
13543: PUSH
13544: LD_INT 30
13546: PUSH
13547: EMPTY
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: PUSH
13553: LD_INT 43
13555: PUSH
13556: LD_INT 44
13558: PUSH
13559: LD_INT 46
13561: PUSH
13562: LD_INT 45
13564: PUSH
13565: LD_INT 47
13567: PUSH
13568: LD_INT 49
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: PUSH
13579: EMPTY
13580: LIST
13581: LIST
13582: LIST
13583: PUSH
13584: LD_VAR 0 12
13588: ARRAY
13589: ST_TO_ADDR
// list := list isect fac_list ;
13590: LD_ADDR_VAR 0 5
13594: PUSH
13595: LD_VAR 0 5
13599: PUSH
13600: LD_VAR 0 17
13604: ISECT
13605: ST_TO_ADDR
// if not list then
13606: LD_VAR 0 5
13610: NOT
13611: IFFALSE 13615
// exit ;
13613: GO 14419
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13615: LD_VAR 0 12
13619: PUSH
13620: LD_INT 3
13622: EQUAL
13623: PUSH
13624: LD_INT 49
13626: PUSH
13627: LD_VAR 0 5
13631: IN
13632: AND
13633: PUSH
13634: LD_INT 31
13636: PPUSH
13637: LD_VAR 0 16
13641: PPUSH
13642: CALL_OW 321
13646: PUSH
13647: LD_INT 2
13649: EQUAL
13650: AND
13651: IFFALSE 13711
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13653: LD_INT 22
13655: PUSH
13656: LD_VAR 0 16
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: PUSH
13665: LD_INT 35
13667: PUSH
13668: LD_INT 49
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: PUSH
13675: LD_INT 91
13677: PUSH
13678: LD_VAR 0 1
13682: PUSH
13683: LD_INT 10
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: LIST
13690: PUSH
13691: EMPTY
13692: LIST
13693: LIST
13694: LIST
13695: PPUSH
13696: CALL_OW 69
13700: NOT
13701: IFFALSE 13711
// weapon := ru_time_lapser ;
13703: LD_ADDR_VAR 0 18
13707: PUSH
13708: LD_INT 49
13710: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13711: LD_VAR 0 12
13715: PUSH
13716: LD_INT 1
13718: PUSH
13719: LD_INT 2
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: IN
13726: PUSH
13727: LD_INT 11
13729: PUSH
13730: LD_VAR 0 5
13734: IN
13735: PUSH
13736: LD_INT 30
13738: PUSH
13739: LD_VAR 0 5
13743: IN
13744: OR
13745: AND
13746: PUSH
13747: LD_INT 6
13749: PPUSH
13750: LD_VAR 0 16
13754: PPUSH
13755: CALL_OW 321
13759: PUSH
13760: LD_INT 2
13762: EQUAL
13763: AND
13764: IFFALSE 13929
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13766: LD_INT 22
13768: PUSH
13769: LD_VAR 0 16
13773: PUSH
13774: EMPTY
13775: LIST
13776: LIST
13777: PUSH
13778: LD_INT 2
13780: PUSH
13781: LD_INT 35
13783: PUSH
13784: LD_INT 11
13786: PUSH
13787: EMPTY
13788: LIST
13789: LIST
13790: PUSH
13791: LD_INT 35
13793: PUSH
13794: LD_INT 30
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: PUSH
13801: EMPTY
13802: LIST
13803: LIST
13804: LIST
13805: PUSH
13806: LD_INT 91
13808: PUSH
13809: LD_VAR 0 1
13813: PUSH
13814: LD_INT 18
13816: PUSH
13817: EMPTY
13818: LIST
13819: LIST
13820: LIST
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: LIST
13826: PPUSH
13827: CALL_OW 69
13831: NOT
13832: PUSH
13833: LD_INT 22
13835: PUSH
13836: LD_VAR 0 16
13840: PUSH
13841: EMPTY
13842: LIST
13843: LIST
13844: PUSH
13845: LD_INT 2
13847: PUSH
13848: LD_INT 30
13850: PUSH
13851: LD_INT 32
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: PUSH
13858: LD_INT 30
13860: PUSH
13861: LD_INT 33
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: LIST
13872: PUSH
13873: LD_INT 91
13875: PUSH
13876: LD_VAR 0 1
13880: PUSH
13881: LD_INT 12
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: LIST
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: LIST
13893: PUSH
13894: EMPTY
13895: LIST
13896: PPUSH
13897: CALL_OW 69
13901: PUSH
13902: LD_INT 2
13904: GREATER
13905: AND
13906: IFFALSE 13929
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13908: LD_ADDR_VAR 0 18
13912: PUSH
13913: LD_INT 11
13915: PUSH
13916: LD_INT 30
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: PUSH
13923: LD_VAR 0 12
13927: ARRAY
13928: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13929: LD_VAR 0 18
13933: NOT
13934: PUSH
13935: LD_INT 40
13937: PPUSH
13938: LD_VAR 0 16
13942: PPUSH
13943: CALL_OW 321
13947: PUSH
13948: LD_INT 2
13950: EQUAL
13951: AND
13952: PUSH
13953: LD_INT 7
13955: PUSH
13956: LD_VAR 0 5
13960: IN
13961: PUSH
13962: LD_INT 28
13964: PUSH
13965: LD_VAR 0 5
13969: IN
13970: OR
13971: PUSH
13972: LD_INT 45
13974: PUSH
13975: LD_VAR 0 5
13979: IN
13980: OR
13981: AND
13982: IFFALSE 14236
// begin hex := GetHexInfo ( x , y ) ;
13984: LD_ADDR_VAR 0 4
13988: PUSH
13989: LD_VAR 0 10
13993: PPUSH
13994: LD_VAR 0 11
13998: PPUSH
13999: CALL_OW 546
14003: ST_TO_ADDR
// if hex [ 1 ] then
14004: LD_VAR 0 4
14008: PUSH
14009: LD_INT 1
14011: ARRAY
14012: IFFALSE 14016
// exit ;
14014: GO 14419
// height := hex [ 2 ] ;
14016: LD_ADDR_VAR 0 15
14020: PUSH
14021: LD_VAR 0 4
14025: PUSH
14026: LD_INT 2
14028: ARRAY
14029: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14030: LD_ADDR_VAR 0 14
14034: PUSH
14035: LD_INT 0
14037: PUSH
14038: LD_INT 2
14040: PUSH
14041: LD_INT 3
14043: PUSH
14044: LD_INT 5
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: ST_TO_ADDR
// for i in tmp do
14053: LD_ADDR_VAR 0 8
14057: PUSH
14058: LD_VAR 0 14
14062: PUSH
14063: FOR_IN
14064: IFFALSE 14234
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14066: LD_ADDR_VAR 0 9
14070: PUSH
14071: LD_VAR 0 10
14075: PPUSH
14076: LD_VAR 0 8
14080: PPUSH
14081: LD_INT 5
14083: PPUSH
14084: CALL_OW 272
14088: PUSH
14089: LD_VAR 0 11
14093: PPUSH
14094: LD_VAR 0 8
14098: PPUSH
14099: LD_INT 5
14101: PPUSH
14102: CALL_OW 273
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14111: LD_VAR 0 9
14115: PUSH
14116: LD_INT 1
14118: ARRAY
14119: PPUSH
14120: LD_VAR 0 9
14124: PUSH
14125: LD_INT 2
14127: ARRAY
14128: PPUSH
14129: CALL_OW 488
14133: IFFALSE 14232
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14135: LD_ADDR_VAR 0 4
14139: PUSH
14140: LD_VAR 0 9
14144: PUSH
14145: LD_INT 1
14147: ARRAY
14148: PPUSH
14149: LD_VAR 0 9
14153: PUSH
14154: LD_INT 2
14156: ARRAY
14157: PPUSH
14158: CALL_OW 546
14162: ST_TO_ADDR
// if hex [ 1 ] then
14163: LD_VAR 0 4
14167: PUSH
14168: LD_INT 1
14170: ARRAY
14171: IFFALSE 14175
// continue ;
14173: GO 14063
// h := hex [ 2 ] ;
14175: LD_ADDR_VAR 0 13
14179: PUSH
14180: LD_VAR 0 4
14184: PUSH
14185: LD_INT 2
14187: ARRAY
14188: ST_TO_ADDR
// if h + 7 < height then
14189: LD_VAR 0 13
14193: PUSH
14194: LD_INT 7
14196: PLUS
14197: PUSH
14198: LD_VAR 0 15
14202: LESS
14203: IFFALSE 14232
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14205: LD_ADDR_VAR 0 18
14209: PUSH
14210: LD_INT 7
14212: PUSH
14213: LD_INT 28
14215: PUSH
14216: LD_INT 45
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: LIST
14223: PUSH
14224: LD_VAR 0 12
14228: ARRAY
14229: ST_TO_ADDR
// break ;
14230: GO 14234
// end ; end ; end ;
14232: GO 14063
14234: POP
14235: POP
// end ; if not weapon then
14236: LD_VAR 0 18
14240: NOT
14241: IFFALSE 14301
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14243: LD_ADDR_VAR 0 5
14247: PUSH
14248: LD_VAR 0 5
14252: PUSH
14253: LD_INT 11
14255: PUSH
14256: LD_INT 30
14258: PUSH
14259: LD_INT 49
14261: PUSH
14262: EMPTY
14263: LIST
14264: LIST
14265: LIST
14266: DIFF
14267: ST_TO_ADDR
// if not list then
14268: LD_VAR 0 5
14272: NOT
14273: IFFALSE 14277
// exit ;
14275: GO 14419
// weapon := list [ rand ( 1 , list ) ] ;
14277: LD_ADDR_VAR 0 18
14281: PUSH
14282: LD_VAR 0 5
14286: PUSH
14287: LD_INT 1
14289: PPUSH
14290: LD_VAR 0 5
14294: PPUSH
14295: CALL_OW 12
14299: ARRAY
14300: ST_TO_ADDR
// end ; if weapon then
14301: LD_VAR 0 18
14305: IFFALSE 14419
// begin tmp := CostOfWeapon ( weapon ) ;
14307: LD_ADDR_VAR 0 14
14311: PUSH
14312: LD_VAR 0 18
14316: PPUSH
14317: CALL_OW 451
14321: ST_TO_ADDR
// j := GetBase ( tower ) ;
14322: LD_ADDR_VAR 0 9
14326: PUSH
14327: LD_VAR 0 1
14331: PPUSH
14332: CALL_OW 274
14336: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14337: LD_VAR 0 9
14341: PPUSH
14342: LD_INT 1
14344: PPUSH
14345: CALL_OW 275
14349: PUSH
14350: LD_VAR 0 14
14354: PUSH
14355: LD_INT 1
14357: ARRAY
14358: GREATEREQUAL
14359: PUSH
14360: LD_VAR 0 9
14364: PPUSH
14365: LD_INT 2
14367: PPUSH
14368: CALL_OW 275
14372: PUSH
14373: LD_VAR 0 14
14377: PUSH
14378: LD_INT 2
14380: ARRAY
14381: GREATEREQUAL
14382: AND
14383: PUSH
14384: LD_VAR 0 9
14388: PPUSH
14389: LD_INT 3
14391: PPUSH
14392: CALL_OW 275
14396: PUSH
14397: LD_VAR 0 14
14401: PUSH
14402: LD_INT 3
14404: ARRAY
14405: GREATEREQUAL
14406: AND
14407: IFFALSE 14419
// result := weapon ;
14409: LD_ADDR_VAR 0 3
14413: PUSH
14414: LD_VAR 0 18
14418: ST_TO_ADDR
// end ; end ;
14419: LD_VAR 0 3
14423: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14424: LD_INT 0
14426: PPUSH
14427: PPUSH
// result := true ;
14428: LD_ADDR_VAR 0 3
14432: PUSH
14433: LD_INT 1
14435: ST_TO_ADDR
// if array1 = array2 then
14436: LD_VAR 0 1
14440: PUSH
14441: LD_VAR 0 2
14445: EQUAL
14446: IFFALSE 14506
// begin for i = 1 to array1 do
14448: LD_ADDR_VAR 0 4
14452: PUSH
14453: DOUBLE
14454: LD_INT 1
14456: DEC
14457: ST_TO_ADDR
14458: LD_VAR 0 1
14462: PUSH
14463: FOR_TO
14464: IFFALSE 14502
// if array1 [ i ] <> array2 [ i ] then
14466: LD_VAR 0 1
14470: PUSH
14471: LD_VAR 0 4
14475: ARRAY
14476: PUSH
14477: LD_VAR 0 2
14481: PUSH
14482: LD_VAR 0 4
14486: ARRAY
14487: NONEQUAL
14488: IFFALSE 14500
// begin result := false ;
14490: LD_ADDR_VAR 0 3
14494: PUSH
14495: LD_INT 0
14497: ST_TO_ADDR
// break ;
14498: GO 14502
// end ;
14500: GO 14463
14502: POP
14503: POP
// end else
14504: GO 14514
// result := false ;
14506: LD_ADDR_VAR 0 3
14510: PUSH
14511: LD_INT 0
14513: ST_TO_ADDR
// end ;
14514: LD_VAR 0 3
14518: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14519: LD_INT 0
14521: PPUSH
14522: PPUSH
// if not array1 or not array2 then
14523: LD_VAR 0 1
14527: NOT
14528: PUSH
14529: LD_VAR 0 2
14533: NOT
14534: OR
14535: IFFALSE 14539
// exit ;
14537: GO 14603
// result := true ;
14539: LD_ADDR_VAR 0 3
14543: PUSH
14544: LD_INT 1
14546: ST_TO_ADDR
// for i = 1 to array1 do
14547: LD_ADDR_VAR 0 4
14551: PUSH
14552: DOUBLE
14553: LD_INT 1
14555: DEC
14556: ST_TO_ADDR
14557: LD_VAR 0 1
14561: PUSH
14562: FOR_TO
14563: IFFALSE 14601
// if array1 [ i ] <> array2 [ i ] then
14565: LD_VAR 0 1
14569: PUSH
14570: LD_VAR 0 4
14574: ARRAY
14575: PUSH
14576: LD_VAR 0 2
14580: PUSH
14581: LD_VAR 0 4
14585: ARRAY
14586: NONEQUAL
14587: IFFALSE 14599
// begin result := false ;
14589: LD_ADDR_VAR 0 3
14593: PUSH
14594: LD_INT 0
14596: ST_TO_ADDR
// break ;
14597: GO 14601
// end ;
14599: GO 14562
14601: POP
14602: POP
// end ;
14603: LD_VAR 0 3
14607: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14608: LD_INT 0
14610: PPUSH
14611: PPUSH
14612: PPUSH
// pom := GetBase ( fac ) ;
14613: LD_ADDR_VAR 0 5
14617: PUSH
14618: LD_VAR 0 1
14622: PPUSH
14623: CALL_OW 274
14627: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14628: LD_ADDR_VAR 0 4
14632: PUSH
14633: LD_VAR 0 2
14637: PUSH
14638: LD_INT 1
14640: ARRAY
14641: PPUSH
14642: LD_VAR 0 2
14646: PUSH
14647: LD_INT 2
14649: ARRAY
14650: PPUSH
14651: LD_VAR 0 2
14655: PUSH
14656: LD_INT 3
14658: ARRAY
14659: PPUSH
14660: LD_VAR 0 2
14664: PUSH
14665: LD_INT 4
14667: ARRAY
14668: PPUSH
14669: CALL_OW 449
14673: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14674: LD_ADDR_VAR 0 3
14678: PUSH
14679: LD_VAR 0 5
14683: PPUSH
14684: LD_INT 1
14686: PPUSH
14687: CALL_OW 275
14691: PUSH
14692: LD_VAR 0 4
14696: PUSH
14697: LD_INT 1
14699: ARRAY
14700: GREATEREQUAL
14701: PUSH
14702: LD_VAR 0 5
14706: PPUSH
14707: LD_INT 2
14709: PPUSH
14710: CALL_OW 275
14714: PUSH
14715: LD_VAR 0 4
14719: PUSH
14720: LD_INT 2
14722: ARRAY
14723: GREATEREQUAL
14724: AND
14725: PUSH
14726: LD_VAR 0 5
14730: PPUSH
14731: LD_INT 3
14733: PPUSH
14734: CALL_OW 275
14738: PUSH
14739: LD_VAR 0 4
14743: PUSH
14744: LD_INT 3
14746: ARRAY
14747: GREATEREQUAL
14748: AND
14749: ST_TO_ADDR
// end ;
14750: LD_VAR 0 3
14754: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14755: LD_INT 0
14757: PPUSH
14758: PPUSH
14759: PPUSH
14760: PPUSH
// pom := GetBase ( building ) ;
14761: LD_ADDR_VAR 0 3
14765: PUSH
14766: LD_VAR 0 1
14770: PPUSH
14771: CALL_OW 274
14775: ST_TO_ADDR
// if not pom then
14776: LD_VAR 0 3
14780: NOT
14781: IFFALSE 14785
// exit ;
14783: GO 14955
// btype := GetBType ( building ) ;
14785: LD_ADDR_VAR 0 5
14789: PUSH
14790: LD_VAR 0 1
14794: PPUSH
14795: CALL_OW 266
14799: ST_TO_ADDR
// if btype = b_armoury then
14800: LD_VAR 0 5
14804: PUSH
14805: LD_INT 4
14807: EQUAL
14808: IFFALSE 14818
// btype := b_barracks ;
14810: LD_ADDR_VAR 0 5
14814: PUSH
14815: LD_INT 5
14817: ST_TO_ADDR
// if btype = b_depot then
14818: LD_VAR 0 5
14822: PUSH
14823: LD_INT 0
14825: EQUAL
14826: IFFALSE 14836
// btype := b_warehouse ;
14828: LD_ADDR_VAR 0 5
14832: PUSH
14833: LD_INT 1
14835: ST_TO_ADDR
// if btype = b_workshop then
14836: LD_VAR 0 5
14840: PUSH
14841: LD_INT 2
14843: EQUAL
14844: IFFALSE 14854
// btype := b_factory ;
14846: LD_ADDR_VAR 0 5
14850: PUSH
14851: LD_INT 3
14853: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14854: LD_ADDR_VAR 0 4
14858: PUSH
14859: LD_VAR 0 5
14863: PPUSH
14864: LD_VAR 0 1
14868: PPUSH
14869: CALL_OW 248
14873: PPUSH
14874: CALL_OW 450
14878: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14879: LD_ADDR_VAR 0 2
14883: PUSH
14884: LD_VAR 0 3
14888: PPUSH
14889: LD_INT 1
14891: PPUSH
14892: CALL_OW 275
14896: PUSH
14897: LD_VAR 0 4
14901: PUSH
14902: LD_INT 1
14904: ARRAY
14905: GREATEREQUAL
14906: PUSH
14907: LD_VAR 0 3
14911: PPUSH
14912: LD_INT 2
14914: PPUSH
14915: CALL_OW 275
14919: PUSH
14920: LD_VAR 0 4
14924: PUSH
14925: LD_INT 2
14927: ARRAY
14928: GREATEREQUAL
14929: AND
14930: PUSH
14931: LD_VAR 0 3
14935: PPUSH
14936: LD_INT 3
14938: PPUSH
14939: CALL_OW 275
14943: PUSH
14944: LD_VAR 0 4
14948: PUSH
14949: LD_INT 3
14951: ARRAY
14952: GREATEREQUAL
14953: AND
14954: ST_TO_ADDR
// end ;
14955: LD_VAR 0 2
14959: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14960: LD_INT 0
14962: PPUSH
14963: PPUSH
14964: PPUSH
// pom := GetBase ( building ) ;
14965: LD_ADDR_VAR 0 4
14969: PUSH
14970: LD_VAR 0 1
14974: PPUSH
14975: CALL_OW 274
14979: ST_TO_ADDR
// if not pom then
14980: LD_VAR 0 4
14984: NOT
14985: IFFALSE 14989
// exit ;
14987: GO 15090
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14989: LD_ADDR_VAR 0 5
14993: PUSH
14994: LD_VAR 0 2
14998: PPUSH
14999: LD_VAR 0 1
15003: PPUSH
15004: CALL_OW 248
15008: PPUSH
15009: CALL_OW 450
15013: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15014: LD_ADDR_VAR 0 3
15018: PUSH
15019: LD_VAR 0 4
15023: PPUSH
15024: LD_INT 1
15026: PPUSH
15027: CALL_OW 275
15031: PUSH
15032: LD_VAR 0 5
15036: PUSH
15037: LD_INT 1
15039: ARRAY
15040: GREATEREQUAL
15041: PUSH
15042: LD_VAR 0 4
15046: PPUSH
15047: LD_INT 2
15049: PPUSH
15050: CALL_OW 275
15054: PUSH
15055: LD_VAR 0 5
15059: PUSH
15060: LD_INT 2
15062: ARRAY
15063: GREATEREQUAL
15064: AND
15065: PUSH
15066: LD_VAR 0 4
15070: PPUSH
15071: LD_INT 3
15073: PPUSH
15074: CALL_OW 275
15078: PUSH
15079: LD_VAR 0 5
15083: PUSH
15084: LD_INT 3
15086: ARRAY
15087: GREATEREQUAL
15088: AND
15089: ST_TO_ADDR
// end ;
15090: LD_VAR 0 3
15094: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15095: LD_INT 0
15097: PPUSH
15098: PPUSH
15099: PPUSH
15100: PPUSH
15101: PPUSH
15102: PPUSH
15103: PPUSH
15104: PPUSH
15105: PPUSH
15106: PPUSH
15107: PPUSH
// result := false ;
15108: LD_ADDR_VAR 0 8
15112: PUSH
15113: LD_INT 0
15115: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15116: LD_VAR 0 5
15120: NOT
15121: PUSH
15122: LD_VAR 0 1
15126: NOT
15127: OR
15128: PUSH
15129: LD_VAR 0 2
15133: NOT
15134: OR
15135: PUSH
15136: LD_VAR 0 3
15140: NOT
15141: OR
15142: IFFALSE 15146
// exit ;
15144: GO 15960
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15146: LD_ADDR_VAR 0 14
15150: PUSH
15151: LD_VAR 0 1
15155: PPUSH
15156: LD_VAR 0 2
15160: PPUSH
15161: LD_VAR 0 3
15165: PPUSH
15166: LD_VAR 0 4
15170: PPUSH
15171: LD_VAR 0 5
15175: PUSH
15176: LD_INT 1
15178: ARRAY
15179: PPUSH
15180: CALL_OW 248
15184: PPUSH
15185: LD_INT 0
15187: PPUSH
15188: CALL 17213 0 6
15192: ST_TO_ADDR
// if not hexes then
15193: LD_VAR 0 14
15197: NOT
15198: IFFALSE 15202
// exit ;
15200: GO 15960
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15202: LD_ADDR_VAR 0 17
15206: PUSH
15207: LD_VAR 0 5
15211: PPUSH
15212: LD_INT 22
15214: PUSH
15215: LD_VAR 0 13
15219: PPUSH
15220: CALL_OW 255
15224: PUSH
15225: EMPTY
15226: LIST
15227: LIST
15228: PUSH
15229: LD_INT 2
15231: PUSH
15232: LD_INT 30
15234: PUSH
15235: LD_INT 0
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: PUSH
15242: LD_INT 30
15244: PUSH
15245: LD_INT 1
15247: PUSH
15248: EMPTY
15249: LIST
15250: LIST
15251: PUSH
15252: EMPTY
15253: LIST
15254: LIST
15255: LIST
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: PPUSH
15261: CALL_OW 72
15265: ST_TO_ADDR
// for i = 1 to hexes do
15266: LD_ADDR_VAR 0 9
15270: PUSH
15271: DOUBLE
15272: LD_INT 1
15274: DEC
15275: ST_TO_ADDR
15276: LD_VAR 0 14
15280: PUSH
15281: FOR_TO
15282: IFFALSE 15958
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15284: LD_ADDR_VAR 0 13
15288: PUSH
15289: LD_VAR 0 14
15293: PUSH
15294: LD_VAR 0 9
15298: ARRAY
15299: PUSH
15300: LD_INT 1
15302: ARRAY
15303: PPUSH
15304: LD_VAR 0 14
15308: PUSH
15309: LD_VAR 0 9
15313: ARRAY
15314: PUSH
15315: LD_INT 2
15317: ARRAY
15318: PPUSH
15319: CALL_OW 428
15323: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15324: LD_VAR 0 14
15328: PUSH
15329: LD_VAR 0 9
15333: ARRAY
15334: PUSH
15335: LD_INT 1
15337: ARRAY
15338: PPUSH
15339: LD_VAR 0 14
15343: PUSH
15344: LD_VAR 0 9
15348: ARRAY
15349: PUSH
15350: LD_INT 2
15352: ARRAY
15353: PPUSH
15354: CALL_OW 351
15358: PUSH
15359: LD_VAR 0 14
15363: PUSH
15364: LD_VAR 0 9
15368: ARRAY
15369: PUSH
15370: LD_INT 1
15372: ARRAY
15373: PPUSH
15374: LD_VAR 0 14
15378: PUSH
15379: LD_VAR 0 9
15383: ARRAY
15384: PUSH
15385: LD_INT 2
15387: ARRAY
15388: PPUSH
15389: CALL_OW 488
15393: NOT
15394: OR
15395: PUSH
15396: LD_VAR 0 13
15400: PPUSH
15401: CALL_OW 247
15405: PUSH
15406: LD_INT 3
15408: EQUAL
15409: OR
15410: IFFALSE 15416
// exit ;
15412: POP
15413: POP
15414: GO 15960
// if not tmp then
15416: LD_VAR 0 13
15420: NOT
15421: IFFALSE 15425
// continue ;
15423: GO 15281
// result := true ;
15425: LD_ADDR_VAR 0 8
15429: PUSH
15430: LD_INT 1
15432: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15433: LD_VAR 0 6
15437: PUSH
15438: LD_VAR 0 13
15442: PPUSH
15443: CALL_OW 247
15447: PUSH
15448: LD_INT 2
15450: EQUAL
15451: AND
15452: PUSH
15453: LD_VAR 0 13
15457: PPUSH
15458: CALL_OW 263
15462: PUSH
15463: LD_INT 1
15465: EQUAL
15466: AND
15467: IFFALSE 15631
// begin if IsDrivenBy ( tmp ) then
15469: LD_VAR 0 13
15473: PPUSH
15474: CALL_OW 311
15478: IFFALSE 15482
// continue ;
15480: GO 15281
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15482: LD_VAR 0 6
15486: PPUSH
15487: LD_INT 3
15489: PUSH
15490: LD_INT 60
15492: PUSH
15493: EMPTY
15494: LIST
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: PUSH
15500: LD_INT 3
15502: PUSH
15503: LD_INT 55
15505: PUSH
15506: EMPTY
15507: LIST
15508: PUSH
15509: EMPTY
15510: LIST
15511: LIST
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: PPUSH
15517: CALL_OW 72
15521: IFFALSE 15629
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15523: LD_ADDR_VAR 0 18
15527: PUSH
15528: LD_VAR 0 6
15532: PPUSH
15533: LD_INT 3
15535: PUSH
15536: LD_INT 60
15538: PUSH
15539: EMPTY
15540: LIST
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PUSH
15546: LD_INT 3
15548: PUSH
15549: LD_INT 55
15551: PUSH
15552: EMPTY
15553: LIST
15554: PUSH
15555: EMPTY
15556: LIST
15557: LIST
15558: PUSH
15559: EMPTY
15560: LIST
15561: LIST
15562: PPUSH
15563: CALL_OW 72
15567: PUSH
15568: LD_INT 1
15570: ARRAY
15571: ST_TO_ADDR
// if IsInUnit ( driver ) then
15572: LD_VAR 0 18
15576: PPUSH
15577: CALL_OW 310
15581: IFFALSE 15592
// ComExit ( driver ) ;
15583: LD_VAR 0 18
15587: PPUSH
15588: CALL 40994 0 1
// AddComEnterUnit ( driver , tmp ) ;
15592: LD_VAR 0 18
15596: PPUSH
15597: LD_VAR 0 13
15601: PPUSH
15602: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15606: LD_VAR 0 18
15610: PPUSH
15611: LD_VAR 0 7
15615: PPUSH
15616: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15620: LD_VAR 0 18
15624: PPUSH
15625: CALL_OW 181
// end ; continue ;
15629: GO 15281
// end ; if not cleaners or not tmp in cleaners then
15631: LD_VAR 0 6
15635: NOT
15636: PUSH
15637: LD_VAR 0 13
15641: PUSH
15642: LD_VAR 0 6
15646: IN
15647: NOT
15648: OR
15649: IFFALSE 15956
// begin if dep then
15651: LD_VAR 0 17
15655: IFFALSE 15791
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15657: LD_ADDR_VAR 0 16
15661: PUSH
15662: LD_VAR 0 17
15666: PUSH
15667: LD_INT 1
15669: ARRAY
15670: PPUSH
15671: CALL_OW 250
15675: PPUSH
15676: LD_VAR 0 17
15680: PUSH
15681: LD_INT 1
15683: ARRAY
15684: PPUSH
15685: CALL_OW 254
15689: PPUSH
15690: LD_INT 5
15692: PPUSH
15693: CALL_OW 272
15697: PUSH
15698: LD_VAR 0 17
15702: PUSH
15703: LD_INT 1
15705: ARRAY
15706: PPUSH
15707: CALL_OW 251
15711: PPUSH
15712: LD_VAR 0 17
15716: PUSH
15717: LD_INT 1
15719: ARRAY
15720: PPUSH
15721: CALL_OW 254
15725: PPUSH
15726: LD_INT 5
15728: PPUSH
15729: CALL_OW 273
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15738: LD_VAR 0 16
15742: PUSH
15743: LD_INT 1
15745: ARRAY
15746: PPUSH
15747: LD_VAR 0 16
15751: PUSH
15752: LD_INT 2
15754: ARRAY
15755: PPUSH
15756: CALL_OW 488
15760: IFFALSE 15791
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15762: LD_VAR 0 13
15766: PPUSH
15767: LD_VAR 0 16
15771: PUSH
15772: LD_INT 1
15774: ARRAY
15775: PPUSH
15776: LD_VAR 0 16
15780: PUSH
15781: LD_INT 2
15783: ARRAY
15784: PPUSH
15785: CALL_OW 111
// continue ;
15789: GO 15281
// end ; end ; r := GetDir ( tmp ) ;
15791: LD_ADDR_VAR 0 15
15795: PUSH
15796: LD_VAR 0 13
15800: PPUSH
15801: CALL_OW 254
15805: ST_TO_ADDR
// if r = 5 then
15806: LD_VAR 0 15
15810: PUSH
15811: LD_INT 5
15813: EQUAL
15814: IFFALSE 15824
// r := 0 ;
15816: LD_ADDR_VAR 0 15
15820: PUSH
15821: LD_INT 0
15823: ST_TO_ADDR
// for j = r to 5 do
15824: LD_ADDR_VAR 0 10
15828: PUSH
15829: DOUBLE
15830: LD_VAR 0 15
15834: DEC
15835: ST_TO_ADDR
15836: LD_INT 5
15838: PUSH
15839: FOR_TO
15840: IFFALSE 15954
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15842: LD_ADDR_VAR 0 11
15846: PUSH
15847: LD_VAR 0 13
15851: PPUSH
15852: CALL_OW 250
15856: PPUSH
15857: LD_VAR 0 10
15861: PPUSH
15862: LD_INT 2
15864: PPUSH
15865: CALL_OW 272
15869: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15870: LD_ADDR_VAR 0 12
15874: PUSH
15875: LD_VAR 0 13
15879: PPUSH
15880: CALL_OW 251
15884: PPUSH
15885: LD_VAR 0 10
15889: PPUSH
15890: LD_INT 2
15892: PPUSH
15893: CALL_OW 273
15897: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15898: LD_VAR 0 11
15902: PPUSH
15903: LD_VAR 0 12
15907: PPUSH
15908: CALL_OW 488
15912: PUSH
15913: LD_VAR 0 11
15917: PPUSH
15918: LD_VAR 0 12
15922: PPUSH
15923: CALL_OW 428
15927: NOT
15928: AND
15929: IFFALSE 15952
// begin ComMoveXY ( tmp , _x , _y ) ;
15931: LD_VAR 0 13
15935: PPUSH
15936: LD_VAR 0 11
15940: PPUSH
15941: LD_VAR 0 12
15945: PPUSH
15946: CALL_OW 111
// break ;
15950: GO 15954
// end ; end ;
15952: GO 15839
15954: POP
15955: POP
// end ; end ;
15956: GO 15281
15958: POP
15959: POP
// end ;
15960: LD_VAR 0 8
15964: RET
// export function BuildingTechInvented ( side , btype ) ; begin
15965: LD_INT 0
15967: PPUSH
// result := true ;
15968: LD_ADDR_VAR 0 3
15972: PUSH
15973: LD_INT 1
15975: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
15976: LD_VAR 0 2
15980: PUSH
15981: LD_INT 24
15983: DOUBLE
15984: EQUAL
15985: IFTRUE 15995
15987: LD_INT 33
15989: DOUBLE
15990: EQUAL
15991: IFTRUE 15995
15993: GO 16020
15995: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
15996: LD_ADDR_VAR 0 3
16000: PUSH
16001: LD_INT 32
16003: PPUSH
16004: LD_VAR 0 1
16008: PPUSH
16009: CALL_OW 321
16013: PUSH
16014: LD_INT 2
16016: EQUAL
16017: ST_TO_ADDR
16018: GO 16336
16020: LD_INT 20
16022: DOUBLE
16023: EQUAL
16024: IFTRUE 16028
16026: GO 16053
16028: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16029: LD_ADDR_VAR 0 3
16033: PUSH
16034: LD_INT 6
16036: PPUSH
16037: LD_VAR 0 1
16041: PPUSH
16042: CALL_OW 321
16046: PUSH
16047: LD_INT 2
16049: EQUAL
16050: ST_TO_ADDR
16051: GO 16336
16053: LD_INT 22
16055: DOUBLE
16056: EQUAL
16057: IFTRUE 16067
16059: LD_INT 36
16061: DOUBLE
16062: EQUAL
16063: IFTRUE 16067
16065: GO 16092
16067: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16068: LD_ADDR_VAR 0 3
16072: PUSH
16073: LD_INT 15
16075: PPUSH
16076: LD_VAR 0 1
16080: PPUSH
16081: CALL_OW 321
16085: PUSH
16086: LD_INT 2
16088: EQUAL
16089: ST_TO_ADDR
16090: GO 16336
16092: LD_INT 30
16094: DOUBLE
16095: EQUAL
16096: IFTRUE 16100
16098: GO 16125
16100: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16101: LD_ADDR_VAR 0 3
16105: PUSH
16106: LD_INT 20
16108: PPUSH
16109: LD_VAR 0 1
16113: PPUSH
16114: CALL_OW 321
16118: PUSH
16119: LD_INT 2
16121: EQUAL
16122: ST_TO_ADDR
16123: GO 16336
16125: LD_INT 28
16127: DOUBLE
16128: EQUAL
16129: IFTRUE 16139
16131: LD_INT 21
16133: DOUBLE
16134: EQUAL
16135: IFTRUE 16139
16137: GO 16164
16139: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16140: LD_ADDR_VAR 0 3
16144: PUSH
16145: LD_INT 21
16147: PPUSH
16148: LD_VAR 0 1
16152: PPUSH
16153: CALL_OW 321
16157: PUSH
16158: LD_INT 2
16160: EQUAL
16161: ST_TO_ADDR
16162: GO 16336
16164: LD_INT 16
16166: DOUBLE
16167: EQUAL
16168: IFTRUE 16172
16170: GO 16197
16172: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16173: LD_ADDR_VAR 0 3
16177: PUSH
16178: LD_INT 84
16180: PPUSH
16181: LD_VAR 0 1
16185: PPUSH
16186: CALL_OW 321
16190: PUSH
16191: LD_INT 2
16193: EQUAL
16194: ST_TO_ADDR
16195: GO 16336
16197: LD_INT 19
16199: DOUBLE
16200: EQUAL
16201: IFTRUE 16211
16203: LD_INT 23
16205: DOUBLE
16206: EQUAL
16207: IFTRUE 16211
16209: GO 16236
16211: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16212: LD_ADDR_VAR 0 3
16216: PUSH
16217: LD_INT 83
16219: PPUSH
16220: LD_VAR 0 1
16224: PPUSH
16225: CALL_OW 321
16229: PUSH
16230: LD_INT 2
16232: EQUAL
16233: ST_TO_ADDR
16234: GO 16336
16236: LD_INT 17
16238: DOUBLE
16239: EQUAL
16240: IFTRUE 16244
16242: GO 16269
16244: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16245: LD_ADDR_VAR 0 3
16249: PUSH
16250: LD_INT 39
16252: PPUSH
16253: LD_VAR 0 1
16257: PPUSH
16258: CALL_OW 321
16262: PUSH
16263: LD_INT 2
16265: EQUAL
16266: ST_TO_ADDR
16267: GO 16336
16269: LD_INT 18
16271: DOUBLE
16272: EQUAL
16273: IFTRUE 16277
16275: GO 16302
16277: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16278: LD_ADDR_VAR 0 3
16282: PUSH
16283: LD_INT 40
16285: PPUSH
16286: LD_VAR 0 1
16290: PPUSH
16291: CALL_OW 321
16295: PUSH
16296: LD_INT 2
16298: EQUAL
16299: ST_TO_ADDR
16300: GO 16336
16302: LD_INT 27
16304: DOUBLE
16305: EQUAL
16306: IFTRUE 16310
16308: GO 16335
16310: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16311: LD_ADDR_VAR 0 3
16315: PUSH
16316: LD_INT 35
16318: PPUSH
16319: LD_VAR 0 1
16323: PPUSH
16324: CALL_OW 321
16328: PUSH
16329: LD_INT 2
16331: EQUAL
16332: ST_TO_ADDR
16333: GO 16336
16335: POP
// end ;
16336: LD_VAR 0 3
16340: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16341: LD_INT 0
16343: PPUSH
16344: PPUSH
16345: PPUSH
16346: PPUSH
16347: PPUSH
16348: PPUSH
16349: PPUSH
16350: PPUSH
16351: PPUSH
16352: PPUSH
16353: PPUSH
// result := false ;
16354: LD_ADDR_VAR 0 6
16358: PUSH
16359: LD_INT 0
16361: ST_TO_ADDR
// if btype = b_depot then
16362: LD_VAR 0 2
16366: PUSH
16367: LD_INT 0
16369: EQUAL
16370: IFFALSE 16382
// begin result := true ;
16372: LD_ADDR_VAR 0 6
16376: PUSH
16377: LD_INT 1
16379: ST_TO_ADDR
// exit ;
16380: GO 17208
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16382: LD_VAR 0 1
16386: NOT
16387: PUSH
16388: LD_VAR 0 1
16392: PPUSH
16393: CALL_OW 266
16397: PUSH
16398: LD_INT 0
16400: PUSH
16401: LD_INT 1
16403: PUSH
16404: EMPTY
16405: LIST
16406: LIST
16407: IN
16408: NOT
16409: OR
16410: PUSH
16411: LD_VAR 0 2
16415: NOT
16416: OR
16417: PUSH
16418: LD_VAR 0 5
16422: PUSH
16423: LD_INT 0
16425: PUSH
16426: LD_INT 1
16428: PUSH
16429: LD_INT 2
16431: PUSH
16432: LD_INT 3
16434: PUSH
16435: LD_INT 4
16437: PUSH
16438: LD_INT 5
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: IN
16449: NOT
16450: OR
16451: PUSH
16452: LD_VAR 0 3
16456: PPUSH
16457: LD_VAR 0 4
16461: PPUSH
16462: CALL_OW 488
16466: NOT
16467: OR
16468: IFFALSE 16472
// exit ;
16470: GO 17208
// side := GetSide ( depot ) ;
16472: LD_ADDR_VAR 0 9
16476: PUSH
16477: LD_VAR 0 1
16481: PPUSH
16482: CALL_OW 255
16486: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16487: LD_VAR 0 9
16491: PPUSH
16492: LD_VAR 0 2
16496: PPUSH
16497: CALL 15965 0 2
16501: NOT
16502: IFFALSE 16506
// exit ;
16504: GO 17208
// pom := GetBase ( depot ) ;
16506: LD_ADDR_VAR 0 10
16510: PUSH
16511: LD_VAR 0 1
16515: PPUSH
16516: CALL_OW 274
16520: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16521: LD_ADDR_VAR 0 11
16525: PUSH
16526: LD_VAR 0 2
16530: PPUSH
16531: LD_VAR 0 1
16535: PPUSH
16536: CALL_OW 248
16540: PPUSH
16541: CALL_OW 450
16545: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16546: LD_VAR 0 10
16550: PPUSH
16551: LD_INT 1
16553: PPUSH
16554: CALL_OW 275
16558: PUSH
16559: LD_VAR 0 11
16563: PUSH
16564: LD_INT 1
16566: ARRAY
16567: GREATEREQUAL
16568: PUSH
16569: LD_VAR 0 10
16573: PPUSH
16574: LD_INT 2
16576: PPUSH
16577: CALL_OW 275
16581: PUSH
16582: LD_VAR 0 11
16586: PUSH
16587: LD_INT 2
16589: ARRAY
16590: GREATEREQUAL
16591: AND
16592: PUSH
16593: LD_VAR 0 10
16597: PPUSH
16598: LD_INT 3
16600: PPUSH
16601: CALL_OW 275
16605: PUSH
16606: LD_VAR 0 11
16610: PUSH
16611: LD_INT 3
16613: ARRAY
16614: GREATEREQUAL
16615: AND
16616: NOT
16617: IFFALSE 16621
// exit ;
16619: GO 17208
// if GetBType ( depot ) = b_depot then
16621: LD_VAR 0 1
16625: PPUSH
16626: CALL_OW 266
16630: PUSH
16631: LD_INT 0
16633: EQUAL
16634: IFFALSE 16646
// dist := 28 else
16636: LD_ADDR_VAR 0 14
16640: PUSH
16641: LD_INT 28
16643: ST_TO_ADDR
16644: GO 16654
// dist := 36 ;
16646: LD_ADDR_VAR 0 14
16650: PUSH
16651: LD_INT 36
16653: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16654: LD_VAR 0 1
16658: PPUSH
16659: LD_VAR 0 3
16663: PPUSH
16664: LD_VAR 0 4
16668: PPUSH
16669: CALL_OW 297
16673: PUSH
16674: LD_VAR 0 14
16678: GREATER
16679: IFFALSE 16683
// exit ;
16681: GO 17208
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16683: LD_ADDR_VAR 0 12
16687: PUSH
16688: LD_VAR 0 2
16692: PPUSH
16693: LD_VAR 0 3
16697: PPUSH
16698: LD_VAR 0 4
16702: PPUSH
16703: LD_VAR 0 5
16707: PPUSH
16708: LD_VAR 0 1
16712: PPUSH
16713: CALL_OW 248
16717: PPUSH
16718: LD_INT 0
16720: PPUSH
16721: CALL 17213 0 6
16725: ST_TO_ADDR
// if not hexes then
16726: LD_VAR 0 12
16730: NOT
16731: IFFALSE 16735
// exit ;
16733: GO 17208
// hex := GetHexInfo ( x , y ) ;
16735: LD_ADDR_VAR 0 15
16739: PUSH
16740: LD_VAR 0 3
16744: PPUSH
16745: LD_VAR 0 4
16749: PPUSH
16750: CALL_OW 546
16754: ST_TO_ADDR
// if hex [ 1 ] then
16755: LD_VAR 0 15
16759: PUSH
16760: LD_INT 1
16762: ARRAY
16763: IFFALSE 16767
// exit ;
16765: GO 17208
// height := hex [ 2 ] ;
16767: LD_ADDR_VAR 0 13
16771: PUSH
16772: LD_VAR 0 15
16776: PUSH
16777: LD_INT 2
16779: ARRAY
16780: ST_TO_ADDR
// for i = 1 to hexes do
16781: LD_ADDR_VAR 0 7
16785: PUSH
16786: DOUBLE
16787: LD_INT 1
16789: DEC
16790: ST_TO_ADDR
16791: LD_VAR 0 12
16795: PUSH
16796: FOR_TO
16797: IFFALSE 17127
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16799: LD_VAR 0 12
16803: PUSH
16804: LD_VAR 0 7
16808: ARRAY
16809: PUSH
16810: LD_INT 1
16812: ARRAY
16813: PPUSH
16814: LD_VAR 0 12
16818: PUSH
16819: LD_VAR 0 7
16823: ARRAY
16824: PUSH
16825: LD_INT 2
16827: ARRAY
16828: PPUSH
16829: CALL_OW 488
16833: NOT
16834: PUSH
16835: LD_VAR 0 12
16839: PUSH
16840: LD_VAR 0 7
16844: ARRAY
16845: PUSH
16846: LD_INT 1
16848: ARRAY
16849: PPUSH
16850: LD_VAR 0 12
16854: PUSH
16855: LD_VAR 0 7
16859: ARRAY
16860: PUSH
16861: LD_INT 2
16863: ARRAY
16864: PPUSH
16865: CALL_OW 428
16869: PUSH
16870: LD_INT 0
16872: GREATER
16873: OR
16874: PUSH
16875: LD_VAR 0 12
16879: PUSH
16880: LD_VAR 0 7
16884: ARRAY
16885: PUSH
16886: LD_INT 1
16888: ARRAY
16889: PPUSH
16890: LD_VAR 0 12
16894: PUSH
16895: LD_VAR 0 7
16899: ARRAY
16900: PUSH
16901: LD_INT 2
16903: ARRAY
16904: PPUSH
16905: CALL_OW 351
16909: OR
16910: IFFALSE 16916
// exit ;
16912: POP
16913: POP
16914: GO 17208
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16916: LD_ADDR_VAR 0 8
16920: PUSH
16921: LD_VAR 0 12
16925: PUSH
16926: LD_VAR 0 7
16930: ARRAY
16931: PUSH
16932: LD_INT 1
16934: ARRAY
16935: PPUSH
16936: LD_VAR 0 12
16940: PUSH
16941: LD_VAR 0 7
16945: ARRAY
16946: PUSH
16947: LD_INT 2
16949: ARRAY
16950: PPUSH
16951: CALL_OW 546
16955: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16956: LD_VAR 0 8
16960: PUSH
16961: LD_INT 1
16963: ARRAY
16964: PUSH
16965: LD_VAR 0 8
16969: PUSH
16970: LD_INT 2
16972: ARRAY
16973: PUSH
16974: LD_VAR 0 13
16978: PUSH
16979: LD_INT 2
16981: PLUS
16982: GREATER
16983: OR
16984: PUSH
16985: LD_VAR 0 8
16989: PUSH
16990: LD_INT 2
16992: ARRAY
16993: PUSH
16994: LD_VAR 0 13
16998: PUSH
16999: LD_INT 2
17001: MINUS
17002: LESS
17003: OR
17004: PUSH
17005: LD_VAR 0 8
17009: PUSH
17010: LD_INT 3
17012: ARRAY
17013: PUSH
17014: LD_INT 0
17016: PUSH
17017: LD_INT 8
17019: PUSH
17020: LD_INT 9
17022: PUSH
17023: LD_INT 10
17025: PUSH
17026: LD_INT 11
17028: PUSH
17029: LD_INT 12
17031: PUSH
17032: LD_INT 13
17034: PUSH
17035: LD_INT 16
17037: PUSH
17038: LD_INT 17
17040: PUSH
17041: LD_INT 18
17043: PUSH
17044: LD_INT 19
17046: PUSH
17047: LD_INT 20
17049: PUSH
17050: LD_INT 21
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: IN
17068: NOT
17069: OR
17070: PUSH
17071: LD_VAR 0 8
17075: PUSH
17076: LD_INT 5
17078: ARRAY
17079: NOT
17080: OR
17081: PUSH
17082: LD_VAR 0 8
17086: PUSH
17087: LD_INT 6
17089: ARRAY
17090: PUSH
17091: LD_INT 1
17093: PUSH
17094: LD_INT 2
17096: PUSH
17097: LD_INT 7
17099: PUSH
17100: LD_INT 9
17102: PUSH
17103: LD_INT 10
17105: PUSH
17106: LD_INT 11
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: LIST
17115: LIST
17116: IN
17117: NOT
17118: OR
17119: IFFALSE 17125
// exit ;
17121: POP
17122: POP
17123: GO 17208
// end ;
17125: GO 16796
17127: POP
17128: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17129: LD_VAR 0 9
17133: PPUSH
17134: LD_VAR 0 3
17138: PPUSH
17139: LD_VAR 0 4
17143: PPUSH
17144: LD_INT 20
17146: PPUSH
17147: CALL 9131 0 4
17151: PUSH
17152: LD_INT 4
17154: ARRAY
17155: IFFALSE 17159
// exit ;
17157: GO 17208
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17159: LD_VAR 0 2
17163: PUSH
17164: LD_INT 29
17166: PUSH
17167: LD_INT 30
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: IN
17174: PUSH
17175: LD_VAR 0 3
17179: PPUSH
17180: LD_VAR 0 4
17184: PPUSH
17185: LD_VAR 0 9
17189: PPUSH
17190: CALL_OW 440
17194: NOT
17195: AND
17196: IFFALSE 17200
// exit ;
17198: GO 17208
// result := true ;
17200: LD_ADDR_VAR 0 6
17204: PUSH
17205: LD_INT 1
17207: ST_TO_ADDR
// end ;
17208: LD_VAR 0 6
17212: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17213: LD_INT 0
17215: PPUSH
17216: PPUSH
17217: PPUSH
17218: PPUSH
17219: PPUSH
17220: PPUSH
17221: PPUSH
17222: PPUSH
17223: PPUSH
17224: PPUSH
17225: PPUSH
17226: PPUSH
17227: PPUSH
17228: PPUSH
17229: PPUSH
17230: PPUSH
17231: PPUSH
17232: PPUSH
17233: PPUSH
17234: PPUSH
17235: PPUSH
17236: PPUSH
17237: PPUSH
17238: PPUSH
17239: PPUSH
17240: PPUSH
17241: PPUSH
17242: PPUSH
17243: PPUSH
17244: PPUSH
17245: PPUSH
17246: PPUSH
17247: PPUSH
17248: PPUSH
17249: PPUSH
17250: PPUSH
17251: PPUSH
17252: PPUSH
17253: PPUSH
17254: PPUSH
17255: PPUSH
17256: PPUSH
17257: PPUSH
17258: PPUSH
17259: PPUSH
17260: PPUSH
17261: PPUSH
17262: PPUSH
17263: PPUSH
17264: PPUSH
17265: PPUSH
17266: PPUSH
17267: PPUSH
17268: PPUSH
17269: PPUSH
17270: PPUSH
17271: PPUSH
17272: PPUSH
// result = [ ] ;
17273: LD_ADDR_VAR 0 7
17277: PUSH
17278: EMPTY
17279: ST_TO_ADDR
// temp_list = [ ] ;
17280: LD_ADDR_VAR 0 9
17284: PUSH
17285: EMPTY
17286: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17287: LD_VAR 0 4
17291: PUSH
17292: LD_INT 0
17294: PUSH
17295: LD_INT 1
17297: PUSH
17298: LD_INT 2
17300: PUSH
17301: LD_INT 3
17303: PUSH
17304: LD_INT 4
17306: PUSH
17307: LD_INT 5
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: IN
17318: NOT
17319: PUSH
17320: LD_VAR 0 1
17324: PUSH
17325: LD_INT 0
17327: PUSH
17328: LD_INT 1
17330: PUSH
17331: EMPTY
17332: LIST
17333: LIST
17334: IN
17335: PUSH
17336: LD_VAR 0 5
17340: PUSH
17341: LD_INT 1
17343: PUSH
17344: LD_INT 2
17346: PUSH
17347: LD_INT 3
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: LIST
17354: IN
17355: NOT
17356: AND
17357: OR
17358: IFFALSE 17362
// exit ;
17360: GO 35753
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17362: LD_VAR 0 1
17366: PUSH
17367: LD_INT 6
17369: PUSH
17370: LD_INT 7
17372: PUSH
17373: LD_INT 8
17375: PUSH
17376: LD_INT 13
17378: PUSH
17379: LD_INT 12
17381: PUSH
17382: LD_INT 15
17384: PUSH
17385: LD_INT 11
17387: PUSH
17388: LD_INT 14
17390: PUSH
17391: LD_INT 10
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: IN
17405: IFFALSE 17415
// btype = b_lab ;
17407: LD_ADDR_VAR 0 1
17411: PUSH
17412: LD_INT 6
17414: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17415: LD_VAR 0 6
17419: PUSH
17420: LD_INT 0
17422: PUSH
17423: LD_INT 1
17425: PUSH
17426: LD_INT 2
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: LIST
17433: IN
17434: NOT
17435: PUSH
17436: LD_VAR 0 1
17440: PUSH
17441: LD_INT 0
17443: PUSH
17444: LD_INT 1
17446: PUSH
17447: LD_INT 2
17449: PUSH
17450: LD_INT 3
17452: PUSH
17453: LD_INT 6
17455: PUSH
17456: LD_INT 36
17458: PUSH
17459: LD_INT 4
17461: PUSH
17462: LD_INT 5
17464: PUSH
17465: LD_INT 31
17467: PUSH
17468: LD_INT 32
17470: PUSH
17471: LD_INT 33
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: IN
17487: NOT
17488: PUSH
17489: LD_VAR 0 6
17493: PUSH
17494: LD_INT 1
17496: EQUAL
17497: AND
17498: OR
17499: PUSH
17500: LD_VAR 0 1
17504: PUSH
17505: LD_INT 2
17507: PUSH
17508: LD_INT 3
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: IN
17515: NOT
17516: PUSH
17517: LD_VAR 0 6
17521: PUSH
17522: LD_INT 2
17524: EQUAL
17525: AND
17526: OR
17527: IFFALSE 17537
// mode = 0 ;
17529: LD_ADDR_VAR 0 6
17533: PUSH
17534: LD_INT 0
17536: ST_TO_ADDR
// case mode of 0 :
17537: LD_VAR 0 6
17541: PUSH
17542: LD_INT 0
17544: DOUBLE
17545: EQUAL
17546: IFTRUE 17550
17548: GO 29003
17550: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17551: LD_ADDR_VAR 0 11
17555: PUSH
17556: LD_INT 0
17558: PUSH
17559: LD_INT 0
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: PUSH
17566: LD_INT 0
17568: PUSH
17569: LD_INT 1
17571: NEG
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: PUSH
17577: LD_INT 1
17579: PUSH
17580: LD_INT 0
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PUSH
17587: LD_INT 1
17589: PUSH
17590: LD_INT 1
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: PUSH
17597: LD_INT 0
17599: PUSH
17600: LD_INT 1
17602: PUSH
17603: EMPTY
17604: LIST
17605: LIST
17606: PUSH
17607: LD_INT 1
17609: NEG
17610: PUSH
17611: LD_INT 0
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PUSH
17618: LD_INT 1
17620: NEG
17621: PUSH
17622: LD_INT 1
17624: NEG
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: PUSH
17630: LD_INT 1
17632: NEG
17633: PUSH
17634: LD_INT 2
17636: NEG
17637: PUSH
17638: EMPTY
17639: LIST
17640: LIST
17641: PUSH
17642: LD_INT 0
17644: PUSH
17645: LD_INT 2
17647: NEG
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: PUSH
17653: LD_INT 1
17655: PUSH
17656: LD_INT 1
17658: NEG
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: PUSH
17664: LD_INT 1
17666: PUSH
17667: LD_INT 2
17669: PUSH
17670: EMPTY
17671: LIST
17672: LIST
17673: PUSH
17674: LD_INT 0
17676: PUSH
17677: LD_INT 2
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: PUSH
17684: LD_INT 1
17686: NEG
17687: PUSH
17688: LD_INT 1
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: PUSH
17695: LD_INT 1
17697: PUSH
17698: LD_INT 3
17700: PUSH
17701: EMPTY
17702: LIST
17703: LIST
17704: PUSH
17705: LD_INT 0
17707: PUSH
17708: LD_INT 3
17710: PUSH
17711: EMPTY
17712: LIST
17713: LIST
17714: PUSH
17715: LD_INT 1
17717: NEG
17718: PUSH
17719: LD_INT 2
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: PUSH
17726: EMPTY
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17744: LD_ADDR_VAR 0 12
17748: PUSH
17749: LD_INT 0
17751: PUSH
17752: LD_INT 0
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: PUSH
17759: LD_INT 0
17761: PUSH
17762: LD_INT 1
17764: NEG
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: PUSH
17770: LD_INT 1
17772: PUSH
17773: LD_INT 0
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PUSH
17780: LD_INT 1
17782: PUSH
17783: LD_INT 1
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: PUSH
17790: LD_INT 0
17792: PUSH
17793: LD_INT 1
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: PUSH
17800: LD_INT 1
17802: NEG
17803: PUSH
17804: LD_INT 0
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PUSH
17811: LD_INT 1
17813: NEG
17814: PUSH
17815: LD_INT 1
17817: NEG
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: PUSH
17823: LD_INT 1
17825: PUSH
17826: LD_INT 1
17828: NEG
17829: PUSH
17830: EMPTY
17831: LIST
17832: LIST
17833: PUSH
17834: LD_INT 2
17836: PUSH
17837: LD_INT 0
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: PUSH
17844: LD_INT 2
17846: PUSH
17847: LD_INT 1
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: LD_INT 1
17856: NEG
17857: PUSH
17858: LD_INT 1
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 2
17867: NEG
17868: PUSH
17869: LD_INT 0
17871: PUSH
17872: EMPTY
17873: LIST
17874: LIST
17875: PUSH
17876: LD_INT 2
17878: NEG
17879: PUSH
17880: LD_INT 1
17882: NEG
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PUSH
17888: LD_INT 2
17890: NEG
17891: PUSH
17892: LD_INT 1
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PUSH
17899: LD_INT 3
17901: NEG
17902: PUSH
17903: LD_INT 0
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: LD_INT 3
17912: NEG
17913: PUSH
17914: LD_INT 1
17916: NEG
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PUSH
17922: EMPTY
17923: LIST
17924: LIST
17925: LIST
17926: LIST
17927: LIST
17928: LIST
17929: LIST
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: LIST
17939: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17940: LD_ADDR_VAR 0 13
17944: PUSH
17945: LD_INT 0
17947: PUSH
17948: LD_INT 0
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: PUSH
17955: LD_INT 0
17957: PUSH
17958: LD_INT 1
17960: NEG
17961: PUSH
17962: EMPTY
17963: LIST
17964: LIST
17965: PUSH
17966: LD_INT 1
17968: PUSH
17969: LD_INT 0
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PUSH
17976: LD_INT 1
17978: PUSH
17979: LD_INT 1
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: PUSH
17986: LD_INT 0
17988: PUSH
17989: LD_INT 1
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PUSH
17996: LD_INT 1
17998: NEG
17999: PUSH
18000: LD_INT 0
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PUSH
18007: LD_INT 1
18009: NEG
18010: PUSH
18011: LD_INT 1
18013: NEG
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: PUSH
18019: LD_INT 1
18021: NEG
18022: PUSH
18023: LD_INT 2
18025: NEG
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: PUSH
18031: LD_INT 2
18033: PUSH
18034: LD_INT 1
18036: PUSH
18037: EMPTY
18038: LIST
18039: LIST
18040: PUSH
18041: LD_INT 2
18043: PUSH
18044: LD_INT 2
18046: PUSH
18047: EMPTY
18048: LIST
18049: LIST
18050: PUSH
18051: LD_INT 1
18053: PUSH
18054: LD_INT 2
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: LD_INT 2
18063: NEG
18064: PUSH
18065: LD_INT 1
18067: NEG
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 2
18075: NEG
18076: PUSH
18077: LD_INT 2
18079: NEG
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: PUSH
18085: LD_INT 2
18087: NEG
18088: PUSH
18089: LD_INT 3
18091: NEG
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: PUSH
18097: LD_INT 3
18099: NEG
18100: PUSH
18101: LD_INT 2
18103: NEG
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PUSH
18109: LD_INT 3
18111: NEG
18112: PUSH
18113: LD_INT 3
18115: NEG
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: LIST
18132: LIST
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: LIST
18138: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18139: LD_ADDR_VAR 0 14
18143: PUSH
18144: LD_INT 0
18146: PUSH
18147: LD_INT 0
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PUSH
18154: LD_INT 0
18156: PUSH
18157: LD_INT 1
18159: NEG
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PUSH
18165: LD_INT 1
18167: PUSH
18168: LD_INT 0
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: PUSH
18175: LD_INT 1
18177: PUSH
18178: LD_INT 1
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: PUSH
18185: LD_INT 0
18187: PUSH
18188: LD_INT 1
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: PUSH
18195: LD_INT 1
18197: NEG
18198: PUSH
18199: LD_INT 0
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PUSH
18206: LD_INT 1
18208: NEG
18209: PUSH
18210: LD_INT 1
18212: NEG
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: PUSH
18218: LD_INT 1
18220: NEG
18221: PUSH
18222: LD_INT 2
18224: NEG
18225: PUSH
18226: EMPTY
18227: LIST
18228: LIST
18229: PUSH
18230: LD_INT 0
18232: PUSH
18233: LD_INT 2
18235: NEG
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PUSH
18241: LD_INT 1
18243: PUSH
18244: LD_INT 1
18246: NEG
18247: PUSH
18248: EMPTY
18249: LIST
18250: LIST
18251: PUSH
18252: LD_INT 1
18254: PUSH
18255: LD_INT 2
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: PUSH
18262: LD_INT 0
18264: PUSH
18265: LD_INT 2
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: PUSH
18272: LD_INT 1
18274: NEG
18275: PUSH
18276: LD_INT 1
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: PUSH
18283: LD_INT 1
18285: NEG
18286: PUSH
18287: LD_INT 3
18289: NEG
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: LD_INT 0
18297: PUSH
18298: LD_INT 3
18300: NEG
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: PUSH
18306: LD_INT 1
18308: PUSH
18309: LD_INT 2
18311: NEG
18312: PUSH
18313: EMPTY
18314: LIST
18315: LIST
18316: PUSH
18317: EMPTY
18318: LIST
18319: LIST
18320: LIST
18321: LIST
18322: LIST
18323: LIST
18324: LIST
18325: LIST
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: LIST
18332: LIST
18333: LIST
18334: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18335: LD_ADDR_VAR 0 15
18339: PUSH
18340: LD_INT 0
18342: PUSH
18343: LD_INT 0
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: PUSH
18350: LD_INT 0
18352: PUSH
18353: LD_INT 1
18355: NEG
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: PUSH
18361: LD_INT 1
18363: PUSH
18364: LD_INT 0
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: PUSH
18371: LD_INT 1
18373: PUSH
18374: LD_INT 1
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: PUSH
18381: LD_INT 0
18383: PUSH
18384: LD_INT 1
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: PUSH
18391: LD_INT 1
18393: NEG
18394: PUSH
18395: LD_INT 0
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PUSH
18402: LD_INT 1
18404: NEG
18405: PUSH
18406: LD_INT 1
18408: NEG
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: PUSH
18414: LD_INT 1
18416: PUSH
18417: LD_INT 1
18419: NEG
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: PUSH
18425: LD_INT 2
18427: PUSH
18428: LD_INT 0
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: LD_INT 2
18437: PUSH
18438: LD_INT 1
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 1
18447: NEG
18448: PUSH
18449: LD_INT 1
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PUSH
18456: LD_INT 2
18458: NEG
18459: PUSH
18460: LD_INT 0
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PUSH
18467: LD_INT 2
18469: NEG
18470: PUSH
18471: LD_INT 1
18473: NEG
18474: PUSH
18475: EMPTY
18476: LIST
18477: LIST
18478: PUSH
18479: LD_INT 2
18481: PUSH
18482: LD_INT 1
18484: NEG
18485: PUSH
18486: EMPTY
18487: LIST
18488: LIST
18489: PUSH
18490: LD_INT 3
18492: PUSH
18493: LD_INT 0
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: PUSH
18500: LD_INT 3
18502: PUSH
18503: LD_INT 1
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18528: LD_ADDR_VAR 0 16
18532: PUSH
18533: LD_INT 0
18535: PUSH
18536: LD_INT 0
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: PUSH
18543: LD_INT 0
18545: PUSH
18546: LD_INT 1
18548: NEG
18549: PUSH
18550: EMPTY
18551: LIST
18552: LIST
18553: PUSH
18554: LD_INT 1
18556: PUSH
18557: LD_INT 0
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: LD_INT 1
18566: PUSH
18567: LD_INT 1
18569: PUSH
18570: EMPTY
18571: LIST
18572: LIST
18573: PUSH
18574: LD_INT 0
18576: PUSH
18577: LD_INT 1
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: PUSH
18584: LD_INT 1
18586: NEG
18587: PUSH
18588: LD_INT 0
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: PUSH
18595: LD_INT 1
18597: NEG
18598: PUSH
18599: LD_INT 1
18601: NEG
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PUSH
18607: LD_INT 1
18609: NEG
18610: PUSH
18611: LD_INT 2
18613: NEG
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: PUSH
18619: LD_INT 2
18621: PUSH
18622: LD_INT 1
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PUSH
18629: LD_INT 2
18631: PUSH
18632: LD_INT 2
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: PUSH
18639: LD_INT 1
18641: PUSH
18642: LD_INT 2
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: PUSH
18649: LD_INT 2
18651: NEG
18652: PUSH
18653: LD_INT 1
18655: NEG
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: LD_INT 2
18663: NEG
18664: PUSH
18665: LD_INT 2
18667: NEG
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: PUSH
18673: LD_INT 3
18675: PUSH
18676: LD_INT 2
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: LD_INT 3
18685: PUSH
18686: LD_INT 3
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: PUSH
18693: LD_INT 2
18695: PUSH
18696: LD_INT 3
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18721: LD_ADDR_VAR 0 17
18725: PUSH
18726: LD_INT 0
18728: PUSH
18729: LD_INT 0
18731: PUSH
18732: EMPTY
18733: LIST
18734: LIST
18735: PUSH
18736: LD_INT 0
18738: PUSH
18739: LD_INT 1
18741: NEG
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: PUSH
18747: LD_INT 1
18749: PUSH
18750: LD_INT 0
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PUSH
18757: LD_INT 1
18759: PUSH
18760: LD_INT 1
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: PUSH
18767: LD_INT 0
18769: PUSH
18770: LD_INT 1
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: PUSH
18777: LD_INT 1
18779: NEG
18780: PUSH
18781: LD_INT 0
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: PUSH
18788: LD_INT 1
18790: NEG
18791: PUSH
18792: LD_INT 1
18794: NEG
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PUSH
18800: LD_INT 1
18802: NEG
18803: PUSH
18804: LD_INT 2
18806: NEG
18807: PUSH
18808: EMPTY
18809: LIST
18810: LIST
18811: PUSH
18812: LD_INT 0
18814: PUSH
18815: LD_INT 2
18817: NEG
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: PUSH
18823: LD_INT 1
18825: PUSH
18826: LD_INT 1
18828: NEG
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: PUSH
18834: LD_INT 2
18836: PUSH
18837: LD_INT 0
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: PUSH
18844: LD_INT 2
18846: PUSH
18847: LD_INT 1
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: PUSH
18854: LD_INT 2
18856: PUSH
18857: LD_INT 2
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: PUSH
18864: LD_INT 1
18866: PUSH
18867: LD_INT 2
18869: PUSH
18870: EMPTY
18871: LIST
18872: LIST
18873: PUSH
18874: LD_INT 0
18876: PUSH
18877: LD_INT 2
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: PUSH
18884: LD_INT 1
18886: NEG
18887: PUSH
18888: LD_INT 1
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PUSH
18895: LD_INT 2
18897: NEG
18898: PUSH
18899: LD_INT 0
18901: PUSH
18902: EMPTY
18903: LIST
18904: LIST
18905: PUSH
18906: LD_INT 2
18908: NEG
18909: PUSH
18910: LD_INT 1
18912: NEG
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PUSH
18918: LD_INT 2
18920: NEG
18921: PUSH
18922: LD_INT 2
18924: NEG
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18951: LD_ADDR_VAR 0 18
18955: PUSH
18956: LD_INT 0
18958: PUSH
18959: LD_INT 0
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: PUSH
18966: LD_INT 0
18968: PUSH
18969: LD_INT 1
18971: NEG
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PUSH
18977: LD_INT 1
18979: PUSH
18980: LD_INT 0
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: PUSH
18987: LD_INT 1
18989: PUSH
18990: LD_INT 1
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: PUSH
18997: LD_INT 0
18999: PUSH
19000: LD_INT 1
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: PUSH
19007: LD_INT 1
19009: NEG
19010: PUSH
19011: LD_INT 0
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: LD_INT 1
19020: NEG
19021: PUSH
19022: LD_INT 1
19024: NEG
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: PUSH
19030: LD_INT 1
19032: NEG
19033: PUSH
19034: LD_INT 2
19036: NEG
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: PUSH
19042: LD_INT 0
19044: PUSH
19045: LD_INT 2
19047: NEG
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: LD_INT 1
19055: PUSH
19056: LD_INT 1
19058: NEG
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: PUSH
19064: LD_INT 2
19066: PUSH
19067: LD_INT 0
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: PUSH
19074: LD_INT 2
19076: PUSH
19077: LD_INT 1
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: PUSH
19084: LD_INT 2
19086: PUSH
19087: LD_INT 2
19089: PUSH
19090: EMPTY
19091: LIST
19092: LIST
19093: PUSH
19094: LD_INT 1
19096: PUSH
19097: LD_INT 2
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: PUSH
19104: LD_INT 0
19106: PUSH
19107: LD_INT 2
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: PUSH
19114: LD_INT 1
19116: NEG
19117: PUSH
19118: LD_INT 1
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: LD_INT 2
19127: NEG
19128: PUSH
19129: LD_INT 0
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: LD_INT 2
19138: NEG
19139: PUSH
19140: LD_INT 1
19142: NEG
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PUSH
19148: LD_INT 2
19150: NEG
19151: PUSH
19152: LD_INT 2
19154: NEG
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19181: LD_ADDR_VAR 0 19
19185: PUSH
19186: LD_INT 0
19188: PUSH
19189: LD_INT 0
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: PUSH
19196: LD_INT 0
19198: PUSH
19199: LD_INT 1
19201: NEG
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PUSH
19207: LD_INT 1
19209: PUSH
19210: LD_INT 0
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: PUSH
19217: LD_INT 1
19219: PUSH
19220: LD_INT 1
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: PUSH
19227: LD_INT 0
19229: PUSH
19230: LD_INT 1
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: PUSH
19237: LD_INT 1
19239: NEG
19240: PUSH
19241: LD_INT 0
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PUSH
19248: LD_INT 1
19250: NEG
19251: PUSH
19252: LD_INT 1
19254: NEG
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: PUSH
19260: LD_INT 1
19262: NEG
19263: PUSH
19264: LD_INT 2
19266: NEG
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PUSH
19272: LD_INT 0
19274: PUSH
19275: LD_INT 2
19277: NEG
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: PUSH
19283: LD_INT 1
19285: PUSH
19286: LD_INT 1
19288: NEG
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PUSH
19294: LD_INT 2
19296: PUSH
19297: LD_INT 0
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 2
19306: PUSH
19307: LD_INT 1
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 2
19316: PUSH
19317: LD_INT 2
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: LD_INT 1
19326: PUSH
19327: LD_INT 2
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PUSH
19334: LD_INT 0
19336: PUSH
19337: LD_INT 2
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: PUSH
19344: LD_INT 1
19346: NEG
19347: PUSH
19348: LD_INT 1
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: PUSH
19355: LD_INT 2
19357: NEG
19358: PUSH
19359: LD_INT 0
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: LD_INT 2
19368: NEG
19369: PUSH
19370: LD_INT 1
19372: NEG
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 2
19380: NEG
19381: PUSH
19382: LD_INT 2
19384: NEG
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19411: LD_ADDR_VAR 0 20
19415: PUSH
19416: LD_INT 0
19418: PUSH
19419: LD_INT 0
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: PUSH
19426: LD_INT 0
19428: PUSH
19429: LD_INT 1
19431: NEG
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: PUSH
19437: LD_INT 1
19439: PUSH
19440: LD_INT 0
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: PUSH
19447: LD_INT 1
19449: PUSH
19450: LD_INT 1
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: PUSH
19457: LD_INT 0
19459: PUSH
19460: LD_INT 1
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: LD_INT 1
19469: NEG
19470: PUSH
19471: LD_INT 0
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 1
19480: NEG
19481: PUSH
19482: LD_INT 1
19484: NEG
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: PUSH
19490: LD_INT 1
19492: NEG
19493: PUSH
19494: LD_INT 2
19496: NEG
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: PUSH
19502: LD_INT 0
19504: PUSH
19505: LD_INT 2
19507: NEG
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: LD_INT 1
19515: PUSH
19516: LD_INT 1
19518: NEG
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: LD_INT 2
19526: PUSH
19527: LD_INT 0
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: PUSH
19534: LD_INT 2
19536: PUSH
19537: LD_INT 1
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PUSH
19544: LD_INT 2
19546: PUSH
19547: LD_INT 2
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: PUSH
19554: LD_INT 1
19556: PUSH
19557: LD_INT 2
19559: PUSH
19560: EMPTY
19561: LIST
19562: LIST
19563: PUSH
19564: LD_INT 0
19566: PUSH
19567: LD_INT 2
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: PUSH
19574: LD_INT 1
19576: NEG
19577: PUSH
19578: LD_INT 1
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PUSH
19585: LD_INT 2
19587: NEG
19588: PUSH
19589: LD_INT 0
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: LD_INT 2
19598: NEG
19599: PUSH
19600: LD_INT 1
19602: NEG
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: LD_INT 2
19610: NEG
19611: PUSH
19612: LD_INT 2
19614: NEG
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19641: LD_ADDR_VAR 0 21
19645: PUSH
19646: LD_INT 0
19648: PUSH
19649: LD_INT 0
19651: PUSH
19652: EMPTY
19653: LIST
19654: LIST
19655: PUSH
19656: LD_INT 0
19658: PUSH
19659: LD_INT 1
19661: NEG
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PUSH
19667: LD_INT 1
19669: PUSH
19670: LD_INT 0
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: PUSH
19677: LD_INT 1
19679: PUSH
19680: LD_INT 1
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: PUSH
19687: LD_INT 0
19689: PUSH
19690: LD_INT 1
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PUSH
19697: LD_INT 1
19699: NEG
19700: PUSH
19701: LD_INT 0
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PUSH
19708: LD_INT 1
19710: NEG
19711: PUSH
19712: LD_INT 1
19714: NEG
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: PUSH
19720: LD_INT 1
19722: NEG
19723: PUSH
19724: LD_INT 2
19726: NEG
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PUSH
19732: LD_INT 0
19734: PUSH
19735: LD_INT 2
19737: NEG
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PUSH
19743: LD_INT 1
19745: PUSH
19746: LD_INT 1
19748: NEG
19749: PUSH
19750: EMPTY
19751: LIST
19752: LIST
19753: PUSH
19754: LD_INT 2
19756: PUSH
19757: LD_INT 0
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PUSH
19764: LD_INT 2
19766: PUSH
19767: LD_INT 1
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: LD_INT 2
19776: PUSH
19777: LD_INT 2
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PUSH
19784: LD_INT 1
19786: PUSH
19787: LD_INT 2
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: PUSH
19794: LD_INT 0
19796: PUSH
19797: LD_INT 2
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: PUSH
19804: LD_INT 1
19806: NEG
19807: PUSH
19808: LD_INT 1
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: LD_INT 2
19817: NEG
19818: PUSH
19819: LD_INT 0
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: PUSH
19826: LD_INT 2
19828: NEG
19829: PUSH
19830: LD_INT 1
19832: NEG
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: LD_INT 2
19840: NEG
19841: PUSH
19842: LD_INT 2
19844: NEG
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19871: LD_ADDR_VAR 0 22
19875: PUSH
19876: LD_INT 0
19878: PUSH
19879: LD_INT 0
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: PUSH
19886: LD_INT 0
19888: PUSH
19889: LD_INT 1
19891: NEG
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: PUSH
19897: LD_INT 1
19899: PUSH
19900: LD_INT 0
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PUSH
19907: LD_INT 1
19909: PUSH
19910: LD_INT 1
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: PUSH
19917: LD_INT 0
19919: PUSH
19920: LD_INT 1
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PUSH
19927: LD_INT 1
19929: NEG
19930: PUSH
19931: LD_INT 0
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PUSH
19938: LD_INT 1
19940: NEG
19941: PUSH
19942: LD_INT 1
19944: NEG
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: PUSH
19950: LD_INT 1
19952: NEG
19953: PUSH
19954: LD_INT 2
19956: NEG
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: PUSH
19962: LD_INT 0
19964: PUSH
19965: LD_INT 2
19967: NEG
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: PUSH
19973: LD_INT 1
19975: PUSH
19976: LD_INT 1
19978: NEG
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: PUSH
19984: LD_INT 2
19986: PUSH
19987: LD_INT 0
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: PUSH
19994: LD_INT 2
19996: PUSH
19997: LD_INT 1
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: PUSH
20004: LD_INT 2
20006: PUSH
20007: LD_INT 2
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PUSH
20014: LD_INT 1
20016: PUSH
20017: LD_INT 2
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: PUSH
20024: LD_INT 0
20026: PUSH
20027: LD_INT 2
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: PUSH
20034: LD_INT 1
20036: NEG
20037: PUSH
20038: LD_INT 1
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: LD_INT 2
20047: NEG
20048: PUSH
20049: LD_INT 0
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: PUSH
20056: LD_INT 2
20058: NEG
20059: PUSH
20060: LD_INT 1
20062: NEG
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: LD_INT 2
20070: NEG
20071: PUSH
20072: LD_INT 2
20074: NEG
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: PUSH
20080: EMPTY
20081: LIST
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20101: LD_ADDR_VAR 0 23
20105: PUSH
20106: LD_INT 0
20108: PUSH
20109: LD_INT 0
20111: PUSH
20112: EMPTY
20113: LIST
20114: LIST
20115: PUSH
20116: LD_INT 0
20118: PUSH
20119: LD_INT 1
20121: NEG
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: PUSH
20127: LD_INT 1
20129: PUSH
20130: LD_INT 0
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: PUSH
20137: LD_INT 1
20139: PUSH
20140: LD_INT 1
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: PUSH
20147: LD_INT 0
20149: PUSH
20150: LD_INT 1
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 1
20159: NEG
20160: PUSH
20161: LD_INT 0
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PUSH
20168: LD_INT 1
20170: NEG
20171: PUSH
20172: LD_INT 1
20174: NEG
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: PUSH
20180: LD_INT 1
20182: NEG
20183: PUSH
20184: LD_INT 2
20186: NEG
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: PUSH
20192: LD_INT 0
20194: PUSH
20195: LD_INT 2
20197: NEG
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PUSH
20203: LD_INT 1
20205: PUSH
20206: LD_INT 1
20208: NEG
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PUSH
20214: LD_INT 2
20216: PUSH
20217: LD_INT 0
20219: PUSH
20220: EMPTY
20221: LIST
20222: LIST
20223: PUSH
20224: LD_INT 2
20226: PUSH
20227: LD_INT 1
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: PUSH
20234: LD_INT 2
20236: PUSH
20237: LD_INT 2
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PUSH
20244: LD_INT 1
20246: PUSH
20247: LD_INT 2
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: PUSH
20254: LD_INT 0
20256: PUSH
20257: LD_INT 2
20259: PUSH
20260: EMPTY
20261: LIST
20262: LIST
20263: PUSH
20264: LD_INT 1
20266: NEG
20267: PUSH
20268: LD_INT 1
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 2
20277: NEG
20278: PUSH
20279: LD_INT 0
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: PUSH
20286: LD_INT 2
20288: NEG
20289: PUSH
20290: LD_INT 1
20292: NEG
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: PUSH
20298: LD_INT 2
20300: NEG
20301: PUSH
20302: LD_INT 2
20304: NEG
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: PUSH
20310: LD_INT 2
20312: NEG
20313: PUSH
20314: LD_INT 3
20316: NEG
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: PUSH
20322: LD_INT 1
20324: NEG
20325: PUSH
20326: LD_INT 3
20328: NEG
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: PUSH
20334: LD_INT 1
20336: PUSH
20337: LD_INT 2
20339: NEG
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: PUSH
20345: LD_INT 2
20347: PUSH
20348: LD_INT 1
20350: NEG
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20381: LD_ADDR_VAR 0 24
20385: PUSH
20386: LD_INT 0
20388: PUSH
20389: LD_INT 0
20391: PUSH
20392: EMPTY
20393: LIST
20394: LIST
20395: PUSH
20396: LD_INT 0
20398: PUSH
20399: LD_INT 1
20401: NEG
20402: PUSH
20403: EMPTY
20404: LIST
20405: LIST
20406: PUSH
20407: LD_INT 1
20409: PUSH
20410: LD_INT 0
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: PUSH
20417: LD_INT 1
20419: PUSH
20420: LD_INT 1
20422: PUSH
20423: EMPTY
20424: LIST
20425: LIST
20426: PUSH
20427: LD_INT 0
20429: PUSH
20430: LD_INT 1
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: PUSH
20437: LD_INT 1
20439: NEG
20440: PUSH
20441: LD_INT 0
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: LD_INT 1
20450: NEG
20451: PUSH
20452: LD_INT 1
20454: NEG
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: PUSH
20460: LD_INT 1
20462: NEG
20463: PUSH
20464: LD_INT 2
20466: NEG
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: PUSH
20472: LD_INT 0
20474: PUSH
20475: LD_INT 2
20477: NEG
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: PUSH
20483: LD_INT 1
20485: PUSH
20486: LD_INT 1
20488: NEG
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: PUSH
20494: LD_INT 2
20496: PUSH
20497: LD_INT 0
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: PUSH
20504: LD_INT 2
20506: PUSH
20507: LD_INT 1
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PUSH
20514: LD_INT 2
20516: PUSH
20517: LD_INT 2
20519: PUSH
20520: EMPTY
20521: LIST
20522: LIST
20523: PUSH
20524: LD_INT 1
20526: PUSH
20527: LD_INT 2
20529: PUSH
20530: EMPTY
20531: LIST
20532: LIST
20533: PUSH
20534: LD_INT 0
20536: PUSH
20537: LD_INT 2
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: PUSH
20544: LD_INT 1
20546: NEG
20547: PUSH
20548: LD_INT 1
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: PUSH
20555: LD_INT 2
20557: NEG
20558: PUSH
20559: LD_INT 0
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: PUSH
20566: LD_INT 2
20568: NEG
20569: PUSH
20570: LD_INT 1
20572: NEG
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PUSH
20578: LD_INT 2
20580: NEG
20581: PUSH
20582: LD_INT 2
20584: NEG
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: PUSH
20590: LD_INT 1
20592: PUSH
20593: LD_INT 2
20595: NEG
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PUSH
20601: LD_INT 2
20603: PUSH
20604: LD_INT 1
20606: NEG
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: PUSH
20612: LD_INT 3
20614: PUSH
20615: LD_INT 1
20617: PUSH
20618: EMPTY
20619: LIST
20620: LIST
20621: PUSH
20622: LD_INT 3
20624: PUSH
20625: LD_INT 2
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20657: LD_ADDR_VAR 0 25
20661: PUSH
20662: LD_INT 0
20664: PUSH
20665: LD_INT 0
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PUSH
20672: LD_INT 0
20674: PUSH
20675: LD_INT 1
20677: NEG
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PUSH
20683: LD_INT 1
20685: PUSH
20686: LD_INT 0
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PUSH
20693: LD_INT 1
20695: PUSH
20696: LD_INT 1
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: PUSH
20703: LD_INT 0
20705: PUSH
20706: LD_INT 1
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PUSH
20713: LD_INT 1
20715: NEG
20716: PUSH
20717: LD_INT 0
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: LD_INT 1
20726: NEG
20727: PUSH
20728: LD_INT 1
20730: NEG
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: PUSH
20736: LD_INT 1
20738: NEG
20739: PUSH
20740: LD_INT 2
20742: NEG
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: PUSH
20748: LD_INT 0
20750: PUSH
20751: LD_INT 2
20753: NEG
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: PUSH
20759: LD_INT 1
20761: PUSH
20762: LD_INT 1
20764: NEG
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: PUSH
20770: LD_INT 2
20772: PUSH
20773: LD_INT 0
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: PUSH
20780: LD_INT 2
20782: PUSH
20783: LD_INT 1
20785: PUSH
20786: EMPTY
20787: LIST
20788: LIST
20789: PUSH
20790: LD_INT 2
20792: PUSH
20793: LD_INT 2
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: PUSH
20800: LD_INT 1
20802: PUSH
20803: LD_INT 2
20805: PUSH
20806: EMPTY
20807: LIST
20808: LIST
20809: PUSH
20810: LD_INT 0
20812: PUSH
20813: LD_INT 2
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PUSH
20820: LD_INT 1
20822: NEG
20823: PUSH
20824: LD_INT 1
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: LD_INT 2
20833: NEG
20834: PUSH
20835: LD_INT 0
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PUSH
20842: LD_INT 2
20844: NEG
20845: PUSH
20846: LD_INT 1
20848: NEG
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PUSH
20854: LD_INT 2
20856: NEG
20857: PUSH
20858: LD_INT 2
20860: NEG
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: PUSH
20866: LD_INT 3
20868: PUSH
20869: LD_INT 1
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: PUSH
20876: LD_INT 3
20878: PUSH
20879: LD_INT 2
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PUSH
20886: LD_INT 2
20888: PUSH
20889: LD_INT 3
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: PUSH
20896: LD_INT 1
20898: PUSH
20899: LD_INT 3
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20931: LD_ADDR_VAR 0 26
20935: PUSH
20936: LD_INT 0
20938: PUSH
20939: LD_INT 0
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PUSH
20946: LD_INT 0
20948: PUSH
20949: LD_INT 1
20951: NEG
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PUSH
20957: LD_INT 1
20959: PUSH
20960: LD_INT 0
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: LD_INT 1
20969: PUSH
20970: LD_INT 1
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PUSH
20977: LD_INT 0
20979: PUSH
20980: LD_INT 1
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PUSH
20987: LD_INT 1
20989: NEG
20990: PUSH
20991: LD_INT 0
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: PUSH
20998: LD_INT 1
21000: NEG
21001: PUSH
21002: LD_INT 1
21004: NEG
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: PUSH
21010: LD_INT 1
21012: NEG
21013: PUSH
21014: LD_INT 2
21016: NEG
21017: PUSH
21018: EMPTY
21019: LIST
21020: LIST
21021: PUSH
21022: LD_INT 0
21024: PUSH
21025: LD_INT 2
21027: NEG
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: PUSH
21033: LD_INT 1
21035: PUSH
21036: LD_INT 1
21038: NEG
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PUSH
21044: LD_INT 2
21046: PUSH
21047: LD_INT 0
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: PUSH
21054: LD_INT 2
21056: PUSH
21057: LD_INT 1
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PUSH
21064: LD_INT 2
21066: PUSH
21067: LD_INT 2
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: PUSH
21074: LD_INT 1
21076: PUSH
21077: LD_INT 2
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: PUSH
21084: LD_INT 0
21086: PUSH
21087: LD_INT 2
21089: PUSH
21090: EMPTY
21091: LIST
21092: LIST
21093: PUSH
21094: LD_INT 1
21096: NEG
21097: PUSH
21098: LD_INT 1
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: PUSH
21105: LD_INT 2
21107: NEG
21108: PUSH
21109: LD_INT 0
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: PUSH
21116: LD_INT 2
21118: NEG
21119: PUSH
21120: LD_INT 1
21122: NEG
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 2
21130: NEG
21131: PUSH
21132: LD_INT 2
21134: NEG
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: PUSH
21140: LD_INT 2
21142: PUSH
21143: LD_INT 3
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PUSH
21150: LD_INT 1
21152: PUSH
21153: LD_INT 3
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: PUSH
21160: LD_INT 1
21162: NEG
21163: PUSH
21164: LD_INT 2
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: PUSH
21171: LD_INT 2
21173: NEG
21174: PUSH
21175: LD_INT 1
21177: PUSH
21178: EMPTY
21179: LIST
21180: LIST
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21207: LD_ADDR_VAR 0 27
21211: PUSH
21212: LD_INT 0
21214: PUSH
21215: LD_INT 0
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: PUSH
21222: LD_INT 0
21224: PUSH
21225: LD_INT 1
21227: NEG
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 1
21235: PUSH
21236: LD_INT 0
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: LD_INT 1
21245: PUSH
21246: LD_INT 1
21248: PUSH
21249: EMPTY
21250: LIST
21251: LIST
21252: PUSH
21253: LD_INT 0
21255: PUSH
21256: LD_INT 1
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: PUSH
21263: LD_INT 1
21265: NEG
21266: PUSH
21267: LD_INT 0
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: PUSH
21274: LD_INT 1
21276: NEG
21277: PUSH
21278: LD_INT 1
21280: NEG
21281: PUSH
21282: EMPTY
21283: LIST
21284: LIST
21285: PUSH
21286: LD_INT 1
21288: NEG
21289: PUSH
21290: LD_INT 2
21292: NEG
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PUSH
21298: LD_INT 0
21300: PUSH
21301: LD_INT 2
21303: NEG
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: PUSH
21309: LD_INT 1
21311: PUSH
21312: LD_INT 1
21314: NEG
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PUSH
21320: LD_INT 2
21322: PUSH
21323: LD_INT 0
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: PUSH
21330: LD_INT 2
21332: PUSH
21333: LD_INT 1
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: PUSH
21340: LD_INT 2
21342: PUSH
21343: LD_INT 2
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: PUSH
21350: LD_INT 1
21352: PUSH
21353: LD_INT 2
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: PUSH
21360: LD_INT 0
21362: PUSH
21363: LD_INT 2
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: PUSH
21370: LD_INT 1
21372: NEG
21373: PUSH
21374: LD_INT 1
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: PUSH
21381: LD_INT 2
21383: NEG
21384: PUSH
21385: LD_INT 0
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PUSH
21392: LD_INT 2
21394: NEG
21395: PUSH
21396: LD_INT 1
21398: NEG
21399: PUSH
21400: EMPTY
21401: LIST
21402: LIST
21403: PUSH
21404: LD_INT 2
21406: NEG
21407: PUSH
21408: LD_INT 2
21410: NEG
21411: PUSH
21412: EMPTY
21413: LIST
21414: LIST
21415: PUSH
21416: LD_INT 1
21418: NEG
21419: PUSH
21420: LD_INT 2
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: PUSH
21427: LD_INT 2
21429: NEG
21430: PUSH
21431: LD_INT 1
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: PUSH
21438: LD_INT 3
21440: NEG
21441: PUSH
21442: LD_INT 1
21444: NEG
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: PUSH
21450: LD_INT 3
21452: NEG
21453: PUSH
21454: LD_INT 2
21456: NEG
21457: PUSH
21458: EMPTY
21459: LIST
21460: LIST
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21487: LD_ADDR_VAR 0 28
21491: PUSH
21492: LD_INT 0
21494: PUSH
21495: LD_INT 0
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: PUSH
21502: LD_INT 0
21504: PUSH
21505: LD_INT 1
21507: NEG
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: PUSH
21513: LD_INT 1
21515: PUSH
21516: LD_INT 0
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: PUSH
21523: LD_INT 1
21525: PUSH
21526: LD_INT 1
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PUSH
21533: LD_INT 0
21535: PUSH
21536: LD_INT 1
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 1
21545: NEG
21546: PUSH
21547: LD_INT 0
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: PUSH
21554: LD_INT 1
21556: NEG
21557: PUSH
21558: LD_INT 1
21560: NEG
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: LD_INT 1
21568: NEG
21569: PUSH
21570: LD_INT 2
21572: NEG
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: PUSH
21578: LD_INT 0
21580: PUSH
21581: LD_INT 2
21583: NEG
21584: PUSH
21585: EMPTY
21586: LIST
21587: LIST
21588: PUSH
21589: LD_INT 1
21591: PUSH
21592: LD_INT 1
21594: NEG
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PUSH
21600: LD_INT 2
21602: PUSH
21603: LD_INT 0
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: PUSH
21610: LD_INT 2
21612: PUSH
21613: LD_INT 1
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: PUSH
21620: LD_INT 2
21622: PUSH
21623: LD_INT 2
21625: PUSH
21626: EMPTY
21627: LIST
21628: LIST
21629: PUSH
21630: LD_INT 1
21632: PUSH
21633: LD_INT 2
21635: PUSH
21636: EMPTY
21637: LIST
21638: LIST
21639: PUSH
21640: LD_INT 0
21642: PUSH
21643: LD_INT 2
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: PUSH
21650: LD_INT 1
21652: NEG
21653: PUSH
21654: LD_INT 1
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: PUSH
21661: LD_INT 2
21663: NEG
21664: PUSH
21665: LD_INT 0
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PUSH
21672: LD_INT 2
21674: NEG
21675: PUSH
21676: LD_INT 1
21678: NEG
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: PUSH
21684: LD_INT 2
21686: NEG
21687: PUSH
21688: LD_INT 2
21690: NEG
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: PUSH
21696: LD_INT 2
21698: NEG
21699: PUSH
21700: LD_INT 3
21702: NEG
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: PUSH
21708: LD_INT 1
21710: NEG
21711: PUSH
21712: LD_INT 3
21714: NEG
21715: PUSH
21716: EMPTY
21717: LIST
21718: LIST
21719: PUSH
21720: LD_INT 3
21722: NEG
21723: PUSH
21724: LD_INT 1
21726: NEG
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: LD_INT 3
21734: NEG
21735: PUSH
21736: LD_INT 2
21738: NEG
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: PUSH
21744: EMPTY
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21769: LD_ADDR_VAR 0 29
21773: PUSH
21774: LD_INT 0
21776: PUSH
21777: LD_INT 0
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: PUSH
21784: LD_INT 0
21786: PUSH
21787: LD_INT 1
21789: NEG
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: PUSH
21795: LD_INT 1
21797: PUSH
21798: LD_INT 0
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 1
21807: PUSH
21808: LD_INT 1
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 0
21817: PUSH
21818: LD_INT 1
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: PUSH
21825: LD_INT 1
21827: NEG
21828: PUSH
21829: LD_INT 0
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: LD_INT 1
21838: NEG
21839: PUSH
21840: LD_INT 1
21842: NEG
21843: PUSH
21844: EMPTY
21845: LIST
21846: LIST
21847: PUSH
21848: LD_INT 1
21850: NEG
21851: PUSH
21852: LD_INT 2
21854: NEG
21855: PUSH
21856: EMPTY
21857: LIST
21858: LIST
21859: PUSH
21860: LD_INT 0
21862: PUSH
21863: LD_INT 2
21865: NEG
21866: PUSH
21867: EMPTY
21868: LIST
21869: LIST
21870: PUSH
21871: LD_INT 1
21873: PUSH
21874: LD_INT 1
21876: NEG
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: PUSH
21882: LD_INT 2
21884: PUSH
21885: LD_INT 0
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: PUSH
21892: LD_INT 2
21894: PUSH
21895: LD_INT 1
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: PUSH
21902: LD_INT 1
21904: PUSH
21905: LD_INT 2
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: PUSH
21912: LD_INT 0
21914: PUSH
21915: LD_INT 2
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: PUSH
21922: LD_INT 1
21924: NEG
21925: PUSH
21926: LD_INT 1
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: PUSH
21933: LD_INT 2
21935: NEG
21936: PUSH
21937: LD_INT 1
21939: NEG
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PUSH
21945: LD_INT 2
21947: NEG
21948: PUSH
21949: LD_INT 2
21951: NEG
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: PUSH
21957: LD_INT 2
21959: NEG
21960: PUSH
21961: LD_INT 3
21963: NEG
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PUSH
21969: LD_INT 2
21971: PUSH
21972: LD_INT 1
21974: NEG
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: PUSH
21980: LD_INT 3
21982: PUSH
21983: LD_INT 1
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: PUSH
21990: LD_INT 1
21992: PUSH
21993: LD_INT 3
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: PUSH
22000: LD_INT 1
22002: NEG
22003: PUSH
22004: LD_INT 2
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: PUSH
22011: LD_INT 3
22013: NEG
22014: PUSH
22015: LD_INT 2
22017: NEG
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: PUSH
22023: EMPTY
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22048: LD_ADDR_VAR 0 30
22052: PUSH
22053: LD_INT 0
22055: PUSH
22056: LD_INT 0
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: PUSH
22063: LD_INT 0
22065: PUSH
22066: LD_INT 1
22068: NEG
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: PUSH
22074: LD_INT 1
22076: PUSH
22077: LD_INT 0
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: PUSH
22084: LD_INT 1
22086: PUSH
22087: LD_INT 1
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: PUSH
22094: LD_INT 0
22096: PUSH
22097: LD_INT 1
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PUSH
22104: LD_INT 1
22106: NEG
22107: PUSH
22108: LD_INT 0
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: PUSH
22115: LD_INT 1
22117: NEG
22118: PUSH
22119: LD_INT 1
22121: NEG
22122: PUSH
22123: EMPTY
22124: LIST
22125: LIST
22126: PUSH
22127: LD_INT 1
22129: NEG
22130: PUSH
22131: LD_INT 2
22133: NEG
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: PUSH
22139: LD_INT 0
22141: PUSH
22142: LD_INT 2
22144: NEG
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: PUSH
22150: LD_INT 1
22152: PUSH
22153: LD_INT 1
22155: NEG
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: PUSH
22161: LD_INT 2
22163: PUSH
22164: LD_INT 0
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: PUSH
22171: LD_INT 2
22173: PUSH
22174: LD_INT 1
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: PUSH
22181: LD_INT 2
22183: PUSH
22184: LD_INT 2
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: PUSH
22191: LD_INT 1
22193: PUSH
22194: LD_INT 2
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: PUSH
22201: LD_INT 1
22203: NEG
22204: PUSH
22205: LD_INT 1
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: PUSH
22212: LD_INT 2
22214: NEG
22215: PUSH
22216: LD_INT 0
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: LD_INT 2
22225: NEG
22226: PUSH
22227: LD_INT 1
22229: NEG
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PUSH
22235: LD_INT 1
22237: NEG
22238: PUSH
22239: LD_INT 3
22241: NEG
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: PUSH
22247: LD_INT 1
22249: PUSH
22250: LD_INT 2
22252: NEG
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: LD_INT 3
22260: PUSH
22261: LD_INT 2
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: PUSH
22268: LD_INT 2
22270: PUSH
22271: LD_INT 3
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: PUSH
22278: LD_INT 2
22280: NEG
22281: PUSH
22282: LD_INT 1
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PUSH
22289: LD_INT 3
22291: NEG
22292: PUSH
22293: LD_INT 1
22295: NEG
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22326: LD_ADDR_VAR 0 31
22330: PUSH
22331: LD_INT 0
22333: PUSH
22334: LD_INT 0
22336: PUSH
22337: EMPTY
22338: LIST
22339: LIST
22340: PUSH
22341: LD_INT 0
22343: PUSH
22344: LD_INT 1
22346: NEG
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PUSH
22352: LD_INT 1
22354: PUSH
22355: LD_INT 0
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PUSH
22362: LD_INT 1
22364: PUSH
22365: LD_INT 1
22367: PUSH
22368: EMPTY
22369: LIST
22370: LIST
22371: PUSH
22372: LD_INT 0
22374: PUSH
22375: LD_INT 1
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: PUSH
22382: LD_INT 1
22384: NEG
22385: PUSH
22386: LD_INT 0
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: PUSH
22393: LD_INT 1
22395: NEG
22396: PUSH
22397: LD_INT 1
22399: NEG
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PUSH
22405: LD_INT 1
22407: NEG
22408: PUSH
22409: LD_INT 2
22411: NEG
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PUSH
22417: LD_INT 1
22419: PUSH
22420: LD_INT 1
22422: NEG
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PUSH
22428: LD_INT 2
22430: PUSH
22431: LD_INT 0
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PUSH
22438: LD_INT 2
22440: PUSH
22441: LD_INT 1
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: LD_INT 2
22450: PUSH
22451: LD_INT 2
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PUSH
22458: LD_INT 1
22460: PUSH
22461: LD_INT 2
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: PUSH
22468: LD_INT 0
22470: PUSH
22471: LD_INT 2
22473: PUSH
22474: EMPTY
22475: LIST
22476: LIST
22477: PUSH
22478: LD_INT 1
22480: NEG
22481: PUSH
22482: LD_INT 1
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PUSH
22489: LD_INT 2
22491: NEG
22492: PUSH
22493: LD_INT 1
22495: NEG
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: PUSH
22501: LD_INT 2
22503: NEG
22504: PUSH
22505: LD_INT 2
22507: NEG
22508: PUSH
22509: EMPTY
22510: LIST
22511: LIST
22512: PUSH
22513: LD_INT 2
22515: NEG
22516: PUSH
22517: LD_INT 3
22519: NEG
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PUSH
22525: LD_INT 2
22527: PUSH
22528: LD_INT 1
22530: NEG
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: PUSH
22536: LD_INT 3
22538: PUSH
22539: LD_INT 1
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: PUSH
22546: LD_INT 1
22548: PUSH
22549: LD_INT 3
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: PUSH
22556: LD_INT 1
22558: NEG
22559: PUSH
22560: LD_INT 2
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 3
22569: NEG
22570: PUSH
22571: LD_INT 2
22573: NEG
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22604: LD_ADDR_VAR 0 32
22608: PUSH
22609: LD_INT 0
22611: PUSH
22612: LD_INT 0
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: PUSH
22619: LD_INT 0
22621: PUSH
22622: LD_INT 1
22624: NEG
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: PUSH
22630: LD_INT 1
22632: PUSH
22633: LD_INT 0
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: LD_INT 1
22642: PUSH
22643: LD_INT 1
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PUSH
22650: LD_INT 0
22652: PUSH
22653: LD_INT 1
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: PUSH
22660: LD_INT 1
22662: NEG
22663: PUSH
22664: LD_INT 0
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PUSH
22671: LD_INT 1
22673: NEG
22674: PUSH
22675: LD_INT 1
22677: NEG
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: PUSH
22683: LD_INT 1
22685: NEG
22686: PUSH
22687: LD_INT 2
22689: NEG
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: PUSH
22695: LD_INT 0
22697: PUSH
22698: LD_INT 2
22700: NEG
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: PUSH
22706: LD_INT 1
22708: PUSH
22709: LD_INT 1
22711: NEG
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: PUSH
22717: LD_INT 2
22719: PUSH
22720: LD_INT 1
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: PUSH
22727: LD_INT 2
22729: PUSH
22730: LD_INT 2
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: PUSH
22737: LD_INT 1
22739: PUSH
22740: LD_INT 2
22742: PUSH
22743: EMPTY
22744: LIST
22745: LIST
22746: PUSH
22747: LD_INT 0
22749: PUSH
22750: LD_INT 2
22752: PUSH
22753: EMPTY
22754: LIST
22755: LIST
22756: PUSH
22757: LD_INT 1
22759: NEG
22760: PUSH
22761: LD_INT 1
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: PUSH
22768: LD_INT 2
22770: NEG
22771: PUSH
22772: LD_INT 0
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: PUSH
22779: LD_INT 2
22781: NEG
22782: PUSH
22783: LD_INT 1
22785: NEG
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: PUSH
22791: LD_INT 1
22793: NEG
22794: PUSH
22795: LD_INT 3
22797: NEG
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: LD_INT 1
22805: PUSH
22806: LD_INT 2
22808: NEG
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: PUSH
22814: LD_INT 3
22816: PUSH
22817: LD_INT 2
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: PUSH
22824: LD_INT 2
22826: PUSH
22827: LD_INT 3
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: PUSH
22834: LD_INT 2
22836: NEG
22837: PUSH
22838: LD_INT 1
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: PUSH
22845: LD_INT 3
22847: NEG
22848: PUSH
22849: LD_INT 1
22851: NEG
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22882: LD_ADDR_VAR 0 33
22886: PUSH
22887: LD_INT 0
22889: PUSH
22890: LD_INT 0
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: PUSH
22897: LD_INT 0
22899: PUSH
22900: LD_INT 1
22902: NEG
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PUSH
22908: LD_INT 1
22910: PUSH
22911: LD_INT 0
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: PUSH
22918: LD_INT 1
22920: PUSH
22921: LD_INT 1
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: PUSH
22928: LD_INT 0
22930: PUSH
22931: LD_INT 1
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: PUSH
22938: LD_INT 1
22940: NEG
22941: PUSH
22942: LD_INT 0
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: LD_INT 1
22951: NEG
22952: PUSH
22953: LD_INT 1
22955: NEG
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: LD_INT 1
22963: NEG
22964: PUSH
22965: LD_INT 2
22967: NEG
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: PUSH
22973: LD_INT 1
22975: PUSH
22976: LD_INT 1
22978: NEG
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: PUSH
22984: LD_INT 2
22986: PUSH
22987: LD_INT 0
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: PUSH
22994: LD_INT 2
22996: PUSH
22997: LD_INT 1
22999: PUSH
23000: EMPTY
23001: LIST
23002: LIST
23003: PUSH
23004: LD_INT 1
23006: PUSH
23007: LD_INT 2
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: PUSH
23014: LD_INT 0
23016: PUSH
23017: LD_INT 2
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: PUSH
23024: LD_INT 1
23026: NEG
23027: PUSH
23028: LD_INT 1
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 2
23037: NEG
23038: PUSH
23039: LD_INT 0
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: PUSH
23046: LD_INT 2
23048: NEG
23049: PUSH
23050: LD_INT 1
23052: NEG
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: PUSH
23058: LD_INT 2
23060: NEG
23061: PUSH
23062: LD_INT 2
23064: NEG
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 2
23072: NEG
23073: PUSH
23074: LD_INT 3
23076: NEG
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: PUSH
23082: LD_INT 2
23084: PUSH
23085: LD_INT 1
23087: NEG
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: PUSH
23093: LD_INT 3
23095: PUSH
23096: LD_INT 1
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: PUSH
23103: LD_INT 1
23105: PUSH
23106: LD_INT 3
23108: PUSH
23109: EMPTY
23110: LIST
23111: LIST
23112: PUSH
23113: LD_INT 1
23115: NEG
23116: PUSH
23117: LD_INT 2
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: PUSH
23124: LD_INT 3
23126: NEG
23127: PUSH
23128: LD_INT 2
23130: NEG
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23161: LD_ADDR_VAR 0 34
23165: PUSH
23166: LD_INT 0
23168: PUSH
23169: LD_INT 0
23171: PUSH
23172: EMPTY
23173: LIST
23174: LIST
23175: PUSH
23176: LD_INT 0
23178: PUSH
23179: LD_INT 1
23181: NEG
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: PUSH
23187: LD_INT 1
23189: PUSH
23190: LD_INT 0
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: PUSH
23197: LD_INT 1
23199: PUSH
23200: LD_INT 1
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: PUSH
23207: LD_INT 0
23209: PUSH
23210: LD_INT 1
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PUSH
23217: LD_INT 1
23219: NEG
23220: PUSH
23221: LD_INT 0
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: PUSH
23228: LD_INT 1
23230: NEG
23231: PUSH
23232: LD_INT 1
23234: NEG
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: PUSH
23240: LD_INT 1
23242: NEG
23243: PUSH
23244: LD_INT 2
23246: NEG
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: PUSH
23252: LD_INT 0
23254: PUSH
23255: LD_INT 2
23257: NEG
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: PUSH
23263: LD_INT 1
23265: PUSH
23266: LD_INT 1
23268: NEG
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PUSH
23274: LD_INT 2
23276: PUSH
23277: LD_INT 1
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: PUSH
23284: LD_INT 2
23286: PUSH
23287: LD_INT 2
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: PUSH
23294: LD_INT 1
23296: PUSH
23297: LD_INT 2
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: PUSH
23304: LD_INT 1
23306: NEG
23307: PUSH
23308: LD_INT 1
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: PUSH
23315: LD_INT 2
23317: NEG
23318: PUSH
23319: LD_INT 0
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: PUSH
23326: LD_INT 2
23328: NEG
23329: PUSH
23330: LD_INT 1
23332: NEG
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: PUSH
23338: LD_INT 2
23340: NEG
23341: PUSH
23342: LD_INT 2
23344: NEG
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: PUSH
23350: LD_INT 1
23352: NEG
23353: PUSH
23354: LD_INT 3
23356: NEG
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: PUSH
23362: LD_INT 1
23364: PUSH
23365: LD_INT 2
23367: NEG
23368: PUSH
23369: EMPTY
23370: LIST
23371: LIST
23372: PUSH
23373: LD_INT 3
23375: PUSH
23376: LD_INT 2
23378: PUSH
23379: EMPTY
23380: LIST
23381: LIST
23382: PUSH
23383: LD_INT 2
23385: PUSH
23386: LD_INT 3
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: PUSH
23393: LD_INT 2
23395: NEG
23396: PUSH
23397: LD_INT 1
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: PUSH
23404: LD_INT 3
23406: NEG
23407: PUSH
23408: LD_INT 1
23410: NEG
23411: PUSH
23412: EMPTY
23413: LIST
23414: LIST
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23441: LD_ADDR_VAR 0 35
23445: PUSH
23446: LD_INT 0
23448: PUSH
23449: LD_INT 0
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: PUSH
23456: LD_INT 0
23458: PUSH
23459: LD_INT 1
23461: NEG
23462: PUSH
23463: EMPTY
23464: LIST
23465: LIST
23466: PUSH
23467: LD_INT 1
23469: PUSH
23470: LD_INT 0
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: PUSH
23477: LD_INT 1
23479: PUSH
23480: LD_INT 1
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: PUSH
23487: LD_INT 0
23489: PUSH
23490: LD_INT 1
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: PUSH
23497: LD_INT 1
23499: NEG
23500: PUSH
23501: LD_INT 0
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: PUSH
23508: LD_INT 1
23510: NEG
23511: PUSH
23512: LD_INT 1
23514: NEG
23515: PUSH
23516: EMPTY
23517: LIST
23518: LIST
23519: PUSH
23520: LD_INT 2
23522: PUSH
23523: LD_INT 1
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PUSH
23530: LD_INT 2
23532: NEG
23533: PUSH
23534: LD_INT 1
23536: NEG
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: PUSH
23542: EMPTY
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23553: LD_ADDR_VAR 0 36
23557: PUSH
23558: LD_INT 0
23560: PUSH
23561: LD_INT 0
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PUSH
23568: LD_INT 0
23570: PUSH
23571: LD_INT 1
23573: NEG
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: PUSH
23579: LD_INT 1
23581: PUSH
23582: LD_INT 0
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: PUSH
23589: LD_INT 1
23591: PUSH
23592: LD_INT 1
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: PUSH
23599: LD_INT 0
23601: PUSH
23602: LD_INT 1
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PUSH
23609: LD_INT 1
23611: NEG
23612: PUSH
23613: LD_INT 0
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PUSH
23620: LD_INT 1
23622: NEG
23623: PUSH
23624: LD_INT 1
23626: NEG
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: PUSH
23632: LD_INT 1
23634: NEG
23635: PUSH
23636: LD_INT 2
23638: NEG
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: PUSH
23644: LD_INT 1
23646: PUSH
23647: LD_INT 2
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23665: LD_ADDR_VAR 0 37
23669: PUSH
23670: LD_INT 0
23672: PUSH
23673: LD_INT 0
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: PUSH
23680: LD_INT 0
23682: PUSH
23683: LD_INT 1
23685: NEG
23686: PUSH
23687: EMPTY
23688: LIST
23689: LIST
23690: PUSH
23691: LD_INT 1
23693: PUSH
23694: LD_INT 0
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: PUSH
23701: LD_INT 1
23703: PUSH
23704: LD_INT 1
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: PUSH
23711: LD_INT 0
23713: PUSH
23714: LD_INT 1
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: PUSH
23721: LD_INT 1
23723: NEG
23724: PUSH
23725: LD_INT 0
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: PUSH
23732: LD_INT 1
23734: NEG
23735: PUSH
23736: LD_INT 1
23738: NEG
23739: PUSH
23740: EMPTY
23741: LIST
23742: LIST
23743: PUSH
23744: LD_INT 1
23746: PUSH
23747: LD_INT 1
23749: NEG
23750: PUSH
23751: EMPTY
23752: LIST
23753: LIST
23754: PUSH
23755: LD_INT 1
23757: NEG
23758: PUSH
23759: LD_INT 1
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23777: LD_ADDR_VAR 0 38
23781: PUSH
23782: LD_INT 0
23784: PUSH
23785: LD_INT 0
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PUSH
23792: LD_INT 0
23794: PUSH
23795: LD_INT 1
23797: NEG
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: PUSH
23803: LD_INT 1
23805: PUSH
23806: LD_INT 0
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 1
23815: PUSH
23816: LD_INT 1
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PUSH
23823: LD_INT 0
23825: PUSH
23826: LD_INT 1
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 1
23835: NEG
23836: PUSH
23837: LD_INT 0
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 1
23846: NEG
23847: PUSH
23848: LD_INT 1
23850: NEG
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: PUSH
23856: LD_INT 2
23858: PUSH
23859: LD_INT 1
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: PUSH
23866: LD_INT 2
23868: NEG
23869: PUSH
23870: LD_INT 1
23872: NEG
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23889: LD_ADDR_VAR 0 39
23893: PUSH
23894: LD_INT 0
23896: PUSH
23897: LD_INT 0
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: LD_INT 0
23906: PUSH
23907: LD_INT 1
23909: NEG
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: PUSH
23915: LD_INT 1
23917: PUSH
23918: LD_INT 0
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 1
23927: PUSH
23928: LD_INT 1
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: LD_INT 0
23937: PUSH
23938: LD_INT 1
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: LD_INT 1
23947: NEG
23948: PUSH
23949: LD_INT 0
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: LD_INT 1
23958: NEG
23959: PUSH
23960: LD_INT 1
23962: NEG
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PUSH
23968: LD_INT 1
23970: NEG
23971: PUSH
23972: LD_INT 2
23974: NEG
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: PUSH
23980: LD_INT 1
23982: PUSH
23983: LD_INT 2
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24001: LD_ADDR_VAR 0 40
24005: PUSH
24006: LD_INT 0
24008: PUSH
24009: LD_INT 0
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: PUSH
24016: LD_INT 0
24018: PUSH
24019: LD_INT 1
24021: NEG
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PUSH
24027: LD_INT 1
24029: PUSH
24030: LD_INT 0
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 1
24039: PUSH
24040: LD_INT 1
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: LD_INT 0
24049: PUSH
24050: LD_INT 1
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PUSH
24057: LD_INT 1
24059: NEG
24060: PUSH
24061: LD_INT 0
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 1
24070: NEG
24071: PUSH
24072: LD_INT 1
24074: NEG
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: PUSH
24080: LD_INT 1
24082: PUSH
24083: LD_INT 1
24085: NEG
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: PUSH
24091: LD_INT 1
24093: NEG
24094: PUSH
24095: LD_INT 1
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24113: LD_ADDR_VAR 0 41
24117: PUSH
24118: LD_INT 0
24120: PUSH
24121: LD_INT 0
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: PUSH
24128: LD_INT 0
24130: PUSH
24131: LD_INT 1
24133: NEG
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: PUSH
24139: LD_INT 1
24141: PUSH
24142: LD_INT 0
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PUSH
24149: LD_INT 1
24151: PUSH
24152: LD_INT 1
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: PUSH
24159: LD_INT 0
24161: PUSH
24162: LD_INT 1
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 1
24171: NEG
24172: PUSH
24173: LD_INT 0
24175: PUSH
24176: EMPTY
24177: LIST
24178: LIST
24179: PUSH
24180: LD_INT 1
24182: NEG
24183: PUSH
24184: LD_INT 1
24186: NEG
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: PUSH
24192: LD_INT 1
24194: NEG
24195: PUSH
24196: LD_INT 2
24198: NEG
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: PUSH
24204: LD_INT 1
24206: PUSH
24207: LD_INT 1
24209: NEG
24210: PUSH
24211: EMPTY
24212: LIST
24213: LIST
24214: PUSH
24215: LD_INT 2
24217: PUSH
24218: LD_INT 0
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: PUSH
24225: LD_INT 2
24227: PUSH
24228: LD_INT 1
24230: PUSH
24231: EMPTY
24232: LIST
24233: LIST
24234: PUSH
24235: LD_INT 2
24237: PUSH
24238: LD_INT 2
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 1
24247: PUSH
24248: LD_INT 2
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PUSH
24255: LD_INT 1
24257: NEG
24258: PUSH
24259: LD_INT 1
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: LD_INT 2
24268: NEG
24269: PUSH
24270: LD_INT 0
24272: PUSH
24273: EMPTY
24274: LIST
24275: LIST
24276: PUSH
24277: LD_INT 2
24279: NEG
24280: PUSH
24281: LD_INT 1
24283: NEG
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PUSH
24289: LD_INT 2
24291: NEG
24292: PUSH
24293: LD_INT 2
24295: NEG
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PUSH
24301: LD_INT 2
24303: NEG
24304: PUSH
24305: LD_INT 3
24307: NEG
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PUSH
24313: LD_INT 2
24315: PUSH
24316: LD_INT 1
24318: NEG
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PUSH
24324: LD_INT 3
24326: PUSH
24327: LD_INT 0
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: PUSH
24334: LD_INT 3
24336: PUSH
24337: LD_INT 1
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PUSH
24344: LD_INT 3
24346: PUSH
24347: LD_INT 2
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PUSH
24354: LD_INT 3
24356: PUSH
24357: LD_INT 3
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: PUSH
24364: LD_INT 2
24366: PUSH
24367: LD_INT 3
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PUSH
24374: LD_INT 2
24376: NEG
24377: PUSH
24378: LD_INT 1
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 3
24387: NEG
24388: PUSH
24389: LD_INT 0
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PUSH
24396: LD_INT 3
24398: NEG
24399: PUSH
24400: LD_INT 1
24402: NEG
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: PUSH
24408: LD_INT 3
24410: NEG
24411: PUSH
24412: LD_INT 2
24414: NEG
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: PUSH
24420: LD_INT 3
24422: NEG
24423: PUSH
24424: LD_INT 3
24426: NEG
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24463: LD_ADDR_VAR 0 42
24467: PUSH
24468: LD_INT 0
24470: PUSH
24471: LD_INT 0
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: PUSH
24478: LD_INT 0
24480: PUSH
24481: LD_INT 1
24483: NEG
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: LD_INT 1
24491: PUSH
24492: LD_INT 0
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: PUSH
24499: LD_INT 1
24501: PUSH
24502: LD_INT 1
24504: PUSH
24505: EMPTY
24506: LIST
24507: LIST
24508: PUSH
24509: LD_INT 0
24511: PUSH
24512: LD_INT 1
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: PUSH
24519: LD_INT 1
24521: NEG
24522: PUSH
24523: LD_INT 0
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 1
24532: NEG
24533: PUSH
24534: LD_INT 1
24536: NEG
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: PUSH
24542: LD_INT 1
24544: NEG
24545: PUSH
24546: LD_INT 2
24548: NEG
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: PUSH
24554: LD_INT 0
24556: PUSH
24557: LD_INT 2
24559: NEG
24560: PUSH
24561: EMPTY
24562: LIST
24563: LIST
24564: PUSH
24565: LD_INT 1
24567: PUSH
24568: LD_INT 1
24570: NEG
24571: PUSH
24572: EMPTY
24573: LIST
24574: LIST
24575: PUSH
24576: LD_INT 2
24578: PUSH
24579: LD_INT 1
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: PUSH
24586: LD_INT 2
24588: PUSH
24589: LD_INT 2
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: PUSH
24596: LD_INT 1
24598: PUSH
24599: LD_INT 2
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: PUSH
24606: LD_INT 0
24608: PUSH
24609: LD_INT 2
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: PUSH
24616: LD_INT 1
24618: NEG
24619: PUSH
24620: LD_INT 1
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: PUSH
24627: LD_INT 2
24629: NEG
24630: PUSH
24631: LD_INT 1
24633: NEG
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: PUSH
24639: LD_INT 2
24641: NEG
24642: PUSH
24643: LD_INT 2
24645: NEG
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: PUSH
24651: LD_INT 2
24653: NEG
24654: PUSH
24655: LD_INT 3
24657: NEG
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: PUSH
24663: LD_INT 1
24665: NEG
24666: PUSH
24667: LD_INT 3
24669: NEG
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: PUSH
24675: LD_INT 0
24677: PUSH
24678: LD_INT 3
24680: NEG
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: PUSH
24686: LD_INT 1
24688: PUSH
24689: LD_INT 2
24691: NEG
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: PUSH
24697: LD_INT 3
24699: PUSH
24700: LD_INT 2
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: LD_INT 3
24709: PUSH
24710: LD_INT 3
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: PUSH
24717: LD_INT 2
24719: PUSH
24720: LD_INT 3
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: PUSH
24727: LD_INT 1
24729: PUSH
24730: LD_INT 3
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: PUSH
24737: LD_INT 0
24739: PUSH
24740: LD_INT 3
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: PUSH
24747: LD_INT 1
24749: NEG
24750: PUSH
24751: LD_INT 2
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: PUSH
24758: LD_INT 3
24760: NEG
24761: PUSH
24762: LD_INT 2
24764: NEG
24765: PUSH
24766: EMPTY
24767: LIST
24768: LIST
24769: PUSH
24770: LD_INT 3
24772: NEG
24773: PUSH
24774: LD_INT 3
24776: NEG
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24813: LD_ADDR_VAR 0 43
24817: PUSH
24818: LD_INT 0
24820: PUSH
24821: LD_INT 0
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PUSH
24828: LD_INT 0
24830: PUSH
24831: LD_INT 1
24833: NEG
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 1
24841: PUSH
24842: LD_INT 0
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PUSH
24849: LD_INT 1
24851: PUSH
24852: LD_INT 1
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: PUSH
24859: LD_INT 0
24861: PUSH
24862: LD_INT 1
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: PUSH
24869: LD_INT 1
24871: NEG
24872: PUSH
24873: LD_INT 0
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 1
24882: NEG
24883: PUSH
24884: LD_INT 1
24886: NEG
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PUSH
24892: LD_INT 1
24894: NEG
24895: PUSH
24896: LD_INT 2
24898: NEG
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: PUSH
24904: LD_INT 0
24906: PUSH
24907: LD_INT 2
24909: NEG
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 1
24917: PUSH
24918: LD_INT 1
24920: NEG
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PUSH
24926: LD_INT 2
24928: PUSH
24929: LD_INT 0
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 2
24938: PUSH
24939: LD_INT 1
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: PUSH
24946: LD_INT 1
24948: PUSH
24949: LD_INT 2
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: PUSH
24956: LD_INT 0
24958: PUSH
24959: LD_INT 2
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: PUSH
24966: LD_INT 1
24968: NEG
24969: PUSH
24970: LD_INT 1
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: LD_INT 2
24979: NEG
24980: PUSH
24981: LD_INT 0
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: PUSH
24988: LD_INT 2
24990: NEG
24991: PUSH
24992: LD_INT 1
24994: NEG
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 1
25002: NEG
25003: PUSH
25004: LD_INT 3
25006: NEG
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: LD_INT 0
25014: PUSH
25015: LD_INT 3
25017: NEG
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: LD_INT 1
25025: PUSH
25026: LD_INT 2
25028: NEG
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PUSH
25034: LD_INT 2
25036: PUSH
25037: LD_INT 1
25039: NEG
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: LD_INT 3
25047: PUSH
25048: LD_INT 0
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: LD_INT 3
25057: PUSH
25058: LD_INT 1
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PUSH
25065: LD_INT 1
25067: PUSH
25068: LD_INT 3
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: LD_INT 0
25077: PUSH
25078: LD_INT 3
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: PUSH
25085: LD_INT 1
25087: NEG
25088: PUSH
25089: LD_INT 2
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PUSH
25096: LD_INT 2
25098: NEG
25099: PUSH
25100: LD_INT 1
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: PUSH
25107: LD_INT 3
25109: NEG
25110: PUSH
25111: LD_INT 0
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: PUSH
25118: LD_INT 3
25120: NEG
25121: PUSH
25122: LD_INT 1
25124: NEG
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25161: LD_ADDR_VAR 0 44
25165: PUSH
25166: LD_INT 0
25168: PUSH
25169: LD_INT 0
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 0
25178: PUSH
25179: LD_INT 1
25181: NEG
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: PUSH
25187: LD_INT 1
25189: PUSH
25190: LD_INT 0
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 1
25199: PUSH
25200: LD_INT 1
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 0
25209: PUSH
25210: LD_INT 1
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 1
25219: NEG
25220: PUSH
25221: LD_INT 0
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 1
25230: NEG
25231: PUSH
25232: LD_INT 1
25234: NEG
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: LD_INT 1
25242: NEG
25243: PUSH
25244: LD_INT 2
25246: NEG
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: LD_INT 1
25254: PUSH
25255: LD_INT 1
25257: NEG
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: LD_INT 2
25265: PUSH
25266: LD_INT 0
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: LD_INT 2
25275: PUSH
25276: LD_INT 1
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: LD_INT 2
25285: PUSH
25286: LD_INT 2
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: LD_INT 1
25295: PUSH
25296: LD_INT 2
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: LD_INT 1
25305: NEG
25306: PUSH
25307: LD_INT 1
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 2
25316: NEG
25317: PUSH
25318: LD_INT 0
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: LD_INT 2
25327: NEG
25328: PUSH
25329: LD_INT 1
25331: NEG
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: PUSH
25337: LD_INT 2
25339: NEG
25340: PUSH
25341: LD_INT 2
25343: NEG
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: LD_INT 2
25351: NEG
25352: PUSH
25353: LD_INT 3
25355: NEG
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 2
25363: PUSH
25364: LD_INT 1
25366: NEG
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: LD_INT 3
25374: PUSH
25375: LD_INT 0
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: LD_INT 3
25384: PUSH
25385: LD_INT 1
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 3
25394: PUSH
25395: LD_INT 2
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 3
25404: PUSH
25405: LD_INT 3
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 2
25414: PUSH
25415: LD_INT 3
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: LD_INT 2
25424: NEG
25425: PUSH
25426: LD_INT 1
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 3
25435: NEG
25436: PUSH
25437: LD_INT 0
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: LD_INT 3
25446: NEG
25447: PUSH
25448: LD_INT 1
25450: NEG
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PUSH
25456: LD_INT 3
25458: NEG
25459: PUSH
25460: LD_INT 2
25462: NEG
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 3
25470: NEG
25471: PUSH
25472: LD_INT 3
25474: NEG
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25511: LD_ADDR_VAR 0 45
25515: PUSH
25516: LD_INT 0
25518: PUSH
25519: LD_INT 0
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: PUSH
25526: LD_INT 0
25528: PUSH
25529: LD_INT 1
25531: NEG
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: LD_INT 1
25539: PUSH
25540: LD_INT 0
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 1
25549: PUSH
25550: LD_INT 1
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: LD_INT 0
25559: PUSH
25560: LD_INT 1
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: LD_INT 1
25569: NEG
25570: PUSH
25571: LD_INT 0
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 1
25580: NEG
25581: PUSH
25582: LD_INT 1
25584: NEG
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: PUSH
25590: LD_INT 1
25592: NEG
25593: PUSH
25594: LD_INT 2
25596: NEG
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PUSH
25602: LD_INT 0
25604: PUSH
25605: LD_INT 2
25607: NEG
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PUSH
25613: LD_INT 1
25615: PUSH
25616: LD_INT 1
25618: NEG
25619: PUSH
25620: EMPTY
25621: LIST
25622: LIST
25623: PUSH
25624: LD_INT 2
25626: PUSH
25627: LD_INT 1
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: PUSH
25634: LD_INT 2
25636: PUSH
25637: LD_INT 2
25639: PUSH
25640: EMPTY
25641: LIST
25642: LIST
25643: PUSH
25644: LD_INT 1
25646: PUSH
25647: LD_INT 2
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: PUSH
25654: LD_INT 0
25656: PUSH
25657: LD_INT 2
25659: PUSH
25660: EMPTY
25661: LIST
25662: LIST
25663: PUSH
25664: LD_INT 1
25666: NEG
25667: PUSH
25668: LD_INT 1
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: LD_INT 2
25677: NEG
25678: PUSH
25679: LD_INT 1
25681: NEG
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PUSH
25687: LD_INT 2
25689: NEG
25690: PUSH
25691: LD_INT 2
25693: NEG
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: LD_INT 2
25701: NEG
25702: PUSH
25703: LD_INT 3
25705: NEG
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 1
25713: NEG
25714: PUSH
25715: LD_INT 3
25717: NEG
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PUSH
25723: LD_INT 0
25725: PUSH
25726: LD_INT 3
25728: NEG
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: PUSH
25734: LD_INT 1
25736: PUSH
25737: LD_INT 2
25739: NEG
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: LD_INT 3
25747: PUSH
25748: LD_INT 2
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: LD_INT 3
25757: PUSH
25758: LD_INT 3
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: PUSH
25765: LD_INT 2
25767: PUSH
25768: LD_INT 3
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: PUSH
25775: LD_INT 1
25777: PUSH
25778: LD_INT 3
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: PUSH
25785: LD_INT 0
25787: PUSH
25788: LD_INT 3
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PUSH
25795: LD_INT 1
25797: NEG
25798: PUSH
25799: LD_INT 2
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: PUSH
25806: LD_INT 3
25808: NEG
25809: PUSH
25810: LD_INT 2
25812: NEG
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: LD_INT 3
25820: NEG
25821: PUSH
25822: LD_INT 3
25824: NEG
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25861: LD_ADDR_VAR 0 46
25865: PUSH
25866: LD_INT 0
25868: PUSH
25869: LD_INT 0
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: PUSH
25876: LD_INT 0
25878: PUSH
25879: LD_INT 1
25881: NEG
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PUSH
25887: LD_INT 1
25889: PUSH
25890: LD_INT 0
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: PUSH
25897: LD_INT 1
25899: PUSH
25900: LD_INT 1
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: PUSH
25907: LD_INT 0
25909: PUSH
25910: LD_INT 1
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PUSH
25917: LD_INT 1
25919: NEG
25920: PUSH
25921: LD_INT 0
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 1
25930: NEG
25931: PUSH
25932: LD_INT 1
25934: NEG
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PUSH
25940: LD_INT 1
25942: NEG
25943: PUSH
25944: LD_INT 2
25946: NEG
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: LD_INT 0
25954: PUSH
25955: LD_INT 2
25957: NEG
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 1
25965: PUSH
25966: LD_INT 1
25968: NEG
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PUSH
25974: LD_INT 2
25976: PUSH
25977: LD_INT 0
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: LD_INT 2
25986: PUSH
25987: LD_INT 1
25989: PUSH
25990: EMPTY
25991: LIST
25992: LIST
25993: PUSH
25994: LD_INT 1
25996: PUSH
25997: LD_INT 2
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: PUSH
26004: LD_INT 0
26006: PUSH
26007: LD_INT 2
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PUSH
26014: LD_INT 1
26016: NEG
26017: PUSH
26018: LD_INT 1
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: LD_INT 2
26027: NEG
26028: PUSH
26029: LD_INT 0
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 2
26038: NEG
26039: PUSH
26040: LD_INT 1
26042: NEG
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: PUSH
26048: LD_INT 1
26050: NEG
26051: PUSH
26052: LD_INT 3
26054: NEG
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: LD_INT 0
26062: PUSH
26063: LD_INT 3
26065: NEG
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 1
26073: PUSH
26074: LD_INT 2
26076: NEG
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 2
26084: PUSH
26085: LD_INT 1
26087: NEG
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: LD_INT 3
26095: PUSH
26096: LD_INT 0
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: LD_INT 3
26105: PUSH
26106: LD_INT 1
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: PUSH
26113: LD_INT 1
26115: PUSH
26116: LD_INT 3
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: LD_INT 0
26125: PUSH
26126: LD_INT 3
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: LD_INT 1
26135: NEG
26136: PUSH
26137: LD_INT 2
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 2
26146: NEG
26147: PUSH
26148: LD_INT 1
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: LD_INT 3
26157: NEG
26158: PUSH
26159: LD_INT 0
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PUSH
26166: LD_INT 3
26168: NEG
26169: PUSH
26170: LD_INT 1
26172: NEG
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26209: LD_ADDR_VAR 0 47
26213: PUSH
26214: LD_INT 0
26216: PUSH
26217: LD_INT 0
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: LD_INT 0
26226: PUSH
26227: LD_INT 1
26229: NEG
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 1
26237: PUSH
26238: LD_INT 0
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: LD_INT 1
26247: PUSH
26248: LD_INT 1
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 0
26257: PUSH
26258: LD_INT 1
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 1
26267: NEG
26268: PUSH
26269: LD_INT 0
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: LD_INT 1
26278: NEG
26279: PUSH
26280: LD_INT 1
26282: NEG
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: LD_INT 1
26290: NEG
26291: PUSH
26292: LD_INT 2
26294: NEG
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: PUSH
26300: LD_INT 0
26302: PUSH
26303: LD_INT 2
26305: NEG
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: LD_INT 1
26313: PUSH
26314: LD_INT 1
26316: NEG
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: PUSH
26322: LD_INT 2
26324: NEG
26325: PUSH
26326: LD_INT 1
26328: NEG
26329: PUSH
26330: EMPTY
26331: LIST
26332: LIST
26333: PUSH
26334: LD_INT 2
26336: NEG
26337: PUSH
26338: LD_INT 2
26340: NEG
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26360: LD_ADDR_VAR 0 48
26364: PUSH
26365: LD_INT 0
26367: PUSH
26368: LD_INT 0
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PUSH
26375: LD_INT 0
26377: PUSH
26378: LD_INT 1
26380: NEG
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: LD_INT 1
26388: PUSH
26389: LD_INT 0
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 1
26398: PUSH
26399: LD_INT 1
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 0
26408: PUSH
26409: LD_INT 1
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: LD_INT 1
26418: NEG
26419: PUSH
26420: LD_INT 0
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: LD_INT 1
26429: NEG
26430: PUSH
26431: LD_INT 1
26433: NEG
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PUSH
26439: LD_INT 1
26441: NEG
26442: PUSH
26443: LD_INT 2
26445: NEG
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: LD_INT 0
26453: PUSH
26454: LD_INT 2
26456: NEG
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: LD_INT 1
26464: PUSH
26465: LD_INT 1
26467: NEG
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 2
26475: PUSH
26476: LD_INT 0
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 2
26485: PUSH
26486: LD_INT 1
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26507: LD_ADDR_VAR 0 49
26511: PUSH
26512: LD_INT 0
26514: PUSH
26515: LD_INT 0
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PUSH
26522: LD_INT 0
26524: PUSH
26525: LD_INT 1
26527: NEG
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: PUSH
26533: LD_INT 1
26535: PUSH
26536: LD_INT 0
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 1
26545: PUSH
26546: LD_INT 1
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: LD_INT 0
26555: PUSH
26556: LD_INT 1
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 1
26565: NEG
26566: PUSH
26567: LD_INT 0
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PUSH
26574: LD_INT 1
26576: NEG
26577: PUSH
26578: LD_INT 1
26580: NEG
26581: PUSH
26582: EMPTY
26583: LIST
26584: LIST
26585: PUSH
26586: LD_INT 1
26588: PUSH
26589: LD_INT 1
26591: NEG
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: PUSH
26597: LD_INT 2
26599: PUSH
26600: LD_INT 0
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: PUSH
26607: LD_INT 2
26609: PUSH
26610: LD_INT 1
26612: PUSH
26613: EMPTY
26614: LIST
26615: LIST
26616: PUSH
26617: LD_INT 2
26619: PUSH
26620: LD_INT 2
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: PUSH
26627: LD_INT 1
26629: PUSH
26630: LD_INT 2
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26651: LD_ADDR_VAR 0 50
26655: PUSH
26656: LD_INT 0
26658: PUSH
26659: LD_INT 0
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: PUSH
26666: LD_INT 0
26668: PUSH
26669: LD_INT 1
26671: NEG
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: LD_INT 1
26679: PUSH
26680: LD_INT 0
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PUSH
26687: LD_INT 1
26689: PUSH
26690: LD_INT 1
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: LD_INT 0
26699: PUSH
26700: LD_INT 1
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: LD_INT 1
26709: NEG
26710: PUSH
26711: LD_INT 0
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 1
26720: NEG
26721: PUSH
26722: LD_INT 1
26724: NEG
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: LD_INT 2
26732: PUSH
26733: LD_INT 1
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 2
26742: PUSH
26743: LD_INT 2
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: LD_INT 1
26752: PUSH
26753: LD_INT 2
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: LD_INT 0
26762: PUSH
26763: LD_INT 2
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 1
26772: NEG
26773: PUSH
26774: LD_INT 1
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26795: LD_ADDR_VAR 0 51
26799: PUSH
26800: LD_INT 0
26802: PUSH
26803: LD_INT 0
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: LD_INT 0
26812: PUSH
26813: LD_INT 1
26815: NEG
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: LD_INT 1
26823: PUSH
26824: LD_INT 0
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PUSH
26831: LD_INT 1
26833: PUSH
26834: LD_INT 1
26836: PUSH
26837: EMPTY
26838: LIST
26839: LIST
26840: PUSH
26841: LD_INT 0
26843: PUSH
26844: LD_INT 1
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: PUSH
26851: LD_INT 1
26853: NEG
26854: PUSH
26855: LD_INT 0
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PUSH
26862: LD_INT 1
26864: NEG
26865: PUSH
26866: LD_INT 1
26868: NEG
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 1
26876: PUSH
26877: LD_INT 2
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: PUSH
26884: LD_INT 0
26886: PUSH
26887: LD_INT 2
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: PUSH
26894: LD_INT 1
26896: NEG
26897: PUSH
26898: LD_INT 1
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 2
26907: NEG
26908: PUSH
26909: LD_INT 0
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 2
26918: NEG
26919: PUSH
26920: LD_INT 1
26922: NEG
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26942: LD_ADDR_VAR 0 52
26946: PUSH
26947: LD_INT 0
26949: PUSH
26950: LD_INT 0
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 0
26959: PUSH
26960: LD_INT 1
26962: NEG
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: PUSH
26968: LD_INT 1
26970: PUSH
26971: LD_INT 0
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PUSH
26978: LD_INT 1
26980: PUSH
26981: LD_INT 1
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PUSH
26988: LD_INT 0
26990: PUSH
26991: LD_INT 1
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: PUSH
26998: LD_INT 1
27000: NEG
27001: PUSH
27002: LD_INT 0
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: PUSH
27009: LD_INT 1
27011: NEG
27012: PUSH
27013: LD_INT 1
27015: NEG
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 1
27023: NEG
27024: PUSH
27025: LD_INT 2
27027: NEG
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 1
27035: NEG
27036: PUSH
27037: LD_INT 1
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: LD_INT 2
27046: NEG
27047: PUSH
27048: LD_INT 0
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: PUSH
27055: LD_INT 2
27057: NEG
27058: PUSH
27059: LD_INT 1
27061: NEG
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 2
27069: NEG
27070: PUSH
27071: LD_INT 2
27073: NEG
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: LIST
27083: LIST
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: LIST
27090: LIST
27091: LIST
27092: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27093: LD_ADDR_VAR 0 53
27097: PUSH
27098: LD_INT 0
27100: PUSH
27101: LD_INT 0
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: LD_INT 0
27110: PUSH
27111: LD_INT 1
27113: NEG
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 1
27121: PUSH
27122: LD_INT 0
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: LD_INT 1
27131: PUSH
27132: LD_INT 1
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: LD_INT 0
27141: PUSH
27142: LD_INT 1
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 1
27151: NEG
27152: PUSH
27153: LD_INT 0
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: LD_INT 1
27162: NEG
27163: PUSH
27164: LD_INT 1
27166: NEG
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: LD_INT 1
27174: NEG
27175: PUSH
27176: LD_INT 2
27178: NEG
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: PUSH
27184: LD_INT 0
27186: PUSH
27187: LD_INT 2
27189: NEG
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PUSH
27195: LD_INT 1
27197: PUSH
27198: LD_INT 1
27200: NEG
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PUSH
27206: LD_INT 2
27208: PUSH
27209: LD_INT 0
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PUSH
27216: LD_INT 2
27218: PUSH
27219: LD_INT 1
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: LD_INT 2
27228: PUSH
27229: LD_INT 2
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: LD_INT 1
27238: PUSH
27239: LD_INT 2
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: PUSH
27246: LD_INT 0
27248: PUSH
27249: LD_INT 2
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: LD_INT 1
27258: NEG
27259: PUSH
27260: LD_INT 1
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PUSH
27267: LD_INT 2
27269: NEG
27270: PUSH
27271: LD_INT 0
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: LD_INT 2
27280: NEG
27281: PUSH
27282: LD_INT 1
27284: NEG
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: LD_INT 2
27292: NEG
27293: PUSH
27294: LD_INT 2
27296: NEG
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: LIST
27318: LIST
27319: LIST
27320: LIST
27321: LIST
27322: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27323: LD_ADDR_VAR 0 54
27327: PUSH
27328: LD_INT 0
27330: PUSH
27331: LD_INT 0
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: PUSH
27338: LD_INT 0
27340: PUSH
27341: LD_INT 1
27343: NEG
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: PUSH
27349: LD_INT 1
27351: PUSH
27352: LD_INT 0
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: LD_INT 1
27361: PUSH
27362: LD_INT 1
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PUSH
27369: LD_INT 0
27371: PUSH
27372: LD_INT 1
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: PUSH
27379: LD_INT 1
27381: NEG
27382: PUSH
27383: LD_INT 0
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PUSH
27390: LD_INT 1
27392: NEG
27393: PUSH
27394: LD_INT 1
27396: NEG
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PUSH
27402: LD_INT 1
27404: NEG
27405: PUSH
27406: LD_INT 2
27408: NEG
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: PUSH
27414: LD_INT 0
27416: PUSH
27417: LD_INT 2
27419: NEG
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: PUSH
27425: LD_INT 1
27427: PUSH
27428: LD_INT 1
27430: NEG
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PUSH
27436: LD_INT 2
27438: PUSH
27439: LD_INT 0
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: PUSH
27446: LD_INT 2
27448: PUSH
27449: LD_INT 1
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: PUSH
27456: LD_INT 2
27458: PUSH
27459: LD_INT 2
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: LD_INT 1
27468: PUSH
27469: LD_INT 2
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: PUSH
27476: LD_INT 0
27478: PUSH
27479: LD_INT 2
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PUSH
27486: LD_INT 1
27488: NEG
27489: PUSH
27490: LD_INT 1
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: LD_INT 2
27499: NEG
27500: PUSH
27501: LD_INT 0
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PUSH
27508: LD_INT 2
27510: NEG
27511: PUSH
27512: LD_INT 1
27514: NEG
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 2
27522: NEG
27523: PUSH
27524: LD_INT 2
27526: NEG
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27553: LD_ADDR_VAR 0 55
27557: PUSH
27558: LD_INT 0
27560: PUSH
27561: LD_INT 0
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 0
27570: PUSH
27571: LD_INT 1
27573: NEG
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 1
27581: PUSH
27582: LD_INT 0
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 1
27591: PUSH
27592: LD_INT 1
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 0
27601: PUSH
27602: LD_INT 1
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: LD_INT 1
27611: NEG
27612: PUSH
27613: LD_INT 0
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: PUSH
27620: LD_INT 1
27622: NEG
27623: PUSH
27624: LD_INT 1
27626: NEG
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PUSH
27632: LD_INT 1
27634: NEG
27635: PUSH
27636: LD_INT 2
27638: NEG
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: PUSH
27644: LD_INT 0
27646: PUSH
27647: LD_INT 2
27649: NEG
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 1
27657: PUSH
27658: LD_INT 1
27660: NEG
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: LD_INT 2
27668: PUSH
27669: LD_INT 0
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: LD_INT 2
27678: PUSH
27679: LD_INT 1
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PUSH
27686: LD_INT 2
27688: PUSH
27689: LD_INT 2
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: LD_INT 1
27698: PUSH
27699: LD_INT 2
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PUSH
27706: LD_INT 0
27708: PUSH
27709: LD_INT 2
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: LD_INT 1
27718: NEG
27719: PUSH
27720: LD_INT 1
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 2
27729: NEG
27730: PUSH
27731: LD_INT 0
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: PUSH
27738: LD_INT 2
27740: NEG
27741: PUSH
27742: LD_INT 1
27744: NEG
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PUSH
27750: LD_INT 2
27752: NEG
27753: PUSH
27754: LD_INT 2
27756: NEG
27757: PUSH
27758: EMPTY
27759: LIST
27760: LIST
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27783: LD_ADDR_VAR 0 56
27787: PUSH
27788: LD_INT 0
27790: PUSH
27791: LD_INT 0
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: LD_INT 0
27800: PUSH
27801: LD_INT 1
27803: NEG
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 1
27811: PUSH
27812: LD_INT 0
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: LD_INT 1
27821: PUSH
27822: LD_INT 1
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: LD_INT 0
27831: PUSH
27832: LD_INT 1
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 1
27841: NEG
27842: PUSH
27843: LD_INT 0
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PUSH
27850: LD_INT 1
27852: NEG
27853: PUSH
27854: LD_INT 1
27856: NEG
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: PUSH
27862: LD_INT 1
27864: NEG
27865: PUSH
27866: LD_INT 2
27868: NEG
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 0
27876: PUSH
27877: LD_INT 2
27879: NEG
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 1
27887: PUSH
27888: LD_INT 1
27890: NEG
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: LD_INT 2
27898: PUSH
27899: LD_INT 0
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: LD_INT 2
27908: PUSH
27909: LD_INT 1
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PUSH
27916: LD_INT 2
27918: PUSH
27919: LD_INT 2
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 1
27928: PUSH
27929: LD_INT 2
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: LD_INT 0
27938: PUSH
27939: LD_INT 2
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: PUSH
27946: LD_INT 1
27948: NEG
27949: PUSH
27950: LD_INT 1
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 2
27959: NEG
27960: PUSH
27961: LD_INT 0
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: PUSH
27968: LD_INT 2
27970: NEG
27971: PUSH
27972: LD_INT 1
27974: NEG
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PUSH
27980: LD_INT 2
27982: NEG
27983: PUSH
27984: LD_INT 2
27986: NEG
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: PUSH
27992: EMPTY
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28013: LD_ADDR_VAR 0 57
28017: PUSH
28018: LD_INT 0
28020: PUSH
28021: LD_INT 0
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: PUSH
28028: LD_INT 0
28030: PUSH
28031: LD_INT 1
28033: NEG
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 1
28041: PUSH
28042: LD_INT 0
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PUSH
28049: LD_INT 1
28051: PUSH
28052: LD_INT 1
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: LD_INT 0
28061: PUSH
28062: LD_INT 1
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: LD_INT 1
28071: NEG
28072: PUSH
28073: LD_INT 0
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: LD_INT 1
28082: NEG
28083: PUSH
28084: LD_INT 1
28086: NEG
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: PUSH
28092: LD_INT 1
28094: NEG
28095: PUSH
28096: LD_INT 2
28098: NEG
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: LD_INT 0
28106: PUSH
28107: LD_INT 2
28109: NEG
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: PUSH
28115: LD_INT 1
28117: PUSH
28118: LD_INT 1
28120: NEG
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: LD_INT 2
28128: PUSH
28129: LD_INT 0
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PUSH
28136: LD_INT 2
28138: PUSH
28139: LD_INT 1
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PUSH
28146: LD_INT 2
28148: PUSH
28149: LD_INT 2
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: LD_INT 1
28158: PUSH
28159: LD_INT 2
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: LD_INT 0
28168: PUSH
28169: LD_INT 2
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PUSH
28176: LD_INT 1
28178: NEG
28179: PUSH
28180: LD_INT 1
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 2
28189: NEG
28190: PUSH
28191: LD_INT 0
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: LD_INT 2
28200: NEG
28201: PUSH
28202: LD_INT 1
28204: NEG
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 2
28212: NEG
28213: PUSH
28214: LD_INT 2
28216: NEG
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: LIST
28231: LIST
28232: LIST
28233: LIST
28234: LIST
28235: LIST
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: LIST
28241: LIST
28242: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28243: LD_ADDR_VAR 0 58
28247: PUSH
28248: LD_INT 0
28250: PUSH
28251: LD_INT 0
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: PUSH
28258: LD_INT 0
28260: PUSH
28261: LD_INT 1
28263: NEG
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 1
28271: PUSH
28272: LD_INT 0
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 1
28281: PUSH
28282: LD_INT 1
28284: PUSH
28285: EMPTY
28286: LIST
28287: LIST
28288: PUSH
28289: LD_INT 0
28291: PUSH
28292: LD_INT 1
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PUSH
28299: LD_INT 1
28301: NEG
28302: PUSH
28303: LD_INT 0
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PUSH
28310: LD_INT 1
28312: NEG
28313: PUSH
28314: LD_INT 1
28316: NEG
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PUSH
28322: LD_INT 1
28324: NEG
28325: PUSH
28326: LD_INT 2
28328: NEG
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PUSH
28334: LD_INT 0
28336: PUSH
28337: LD_INT 2
28339: NEG
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PUSH
28345: LD_INT 1
28347: PUSH
28348: LD_INT 1
28350: NEG
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: LD_INT 2
28358: PUSH
28359: LD_INT 0
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: LD_INT 2
28368: PUSH
28369: LD_INT 1
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: LD_INT 2
28378: PUSH
28379: LD_INT 2
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PUSH
28386: LD_INT 1
28388: PUSH
28389: LD_INT 2
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PUSH
28396: LD_INT 0
28398: PUSH
28399: LD_INT 2
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: PUSH
28406: LD_INT 1
28408: NEG
28409: PUSH
28410: LD_INT 1
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 2
28419: NEG
28420: PUSH
28421: LD_INT 0
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: PUSH
28428: LD_INT 2
28430: NEG
28431: PUSH
28432: LD_INT 1
28434: NEG
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: LD_INT 2
28442: NEG
28443: PUSH
28444: LD_INT 2
28446: NEG
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: LIST
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: LIST
28471: LIST
28472: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28473: LD_ADDR_VAR 0 59
28477: PUSH
28478: LD_INT 0
28480: PUSH
28481: LD_INT 0
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: LD_INT 0
28490: PUSH
28491: LD_INT 1
28493: NEG
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: LD_INT 1
28501: PUSH
28502: LD_INT 0
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: PUSH
28509: LD_INT 1
28511: PUSH
28512: LD_INT 1
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: PUSH
28519: LD_INT 0
28521: PUSH
28522: LD_INT 1
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: LD_INT 1
28531: NEG
28532: PUSH
28533: LD_INT 0
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: LD_INT 1
28542: NEG
28543: PUSH
28544: LD_INT 1
28546: NEG
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28561: LD_ADDR_VAR 0 60
28565: PUSH
28566: LD_INT 0
28568: PUSH
28569: LD_INT 0
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PUSH
28576: LD_INT 0
28578: PUSH
28579: LD_INT 1
28581: NEG
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PUSH
28587: LD_INT 1
28589: PUSH
28590: LD_INT 0
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: LD_INT 1
28599: PUSH
28600: LD_INT 1
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PUSH
28607: LD_INT 0
28609: PUSH
28610: LD_INT 1
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 1
28619: NEG
28620: PUSH
28621: LD_INT 0
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 1
28630: NEG
28631: PUSH
28632: LD_INT 1
28634: NEG
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28649: LD_ADDR_VAR 0 61
28653: PUSH
28654: LD_INT 0
28656: PUSH
28657: LD_INT 0
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: PUSH
28664: LD_INT 0
28666: PUSH
28667: LD_INT 1
28669: NEG
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: LD_INT 1
28677: PUSH
28678: LD_INT 0
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 1
28687: PUSH
28688: LD_INT 1
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PUSH
28695: LD_INT 0
28697: PUSH
28698: LD_INT 1
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PUSH
28705: LD_INT 1
28707: NEG
28708: PUSH
28709: LD_INT 0
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: LD_INT 1
28718: NEG
28719: PUSH
28720: LD_INT 1
28722: NEG
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28737: LD_ADDR_VAR 0 62
28741: PUSH
28742: LD_INT 0
28744: PUSH
28745: LD_INT 0
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: PUSH
28752: LD_INT 0
28754: PUSH
28755: LD_INT 1
28757: NEG
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: LD_INT 1
28765: PUSH
28766: LD_INT 0
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 1
28775: PUSH
28776: LD_INT 1
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 0
28785: PUSH
28786: LD_INT 1
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 1
28795: NEG
28796: PUSH
28797: LD_INT 0
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: PUSH
28804: LD_INT 1
28806: NEG
28807: PUSH
28808: LD_INT 1
28810: NEG
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28825: LD_ADDR_VAR 0 63
28829: PUSH
28830: LD_INT 0
28832: PUSH
28833: LD_INT 0
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: PUSH
28840: LD_INT 0
28842: PUSH
28843: LD_INT 1
28845: NEG
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 1
28853: PUSH
28854: LD_INT 0
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: LD_INT 1
28863: PUSH
28864: LD_INT 1
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: PUSH
28871: LD_INT 0
28873: PUSH
28874: LD_INT 1
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: LD_INT 1
28883: NEG
28884: PUSH
28885: LD_INT 0
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 1
28894: NEG
28895: PUSH
28896: LD_INT 1
28898: NEG
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28913: LD_ADDR_VAR 0 64
28917: PUSH
28918: LD_INT 0
28920: PUSH
28921: LD_INT 0
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: LD_INT 0
28930: PUSH
28931: LD_INT 1
28933: NEG
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: LD_INT 1
28941: PUSH
28942: LD_INT 0
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: LD_INT 1
28951: PUSH
28952: LD_INT 1
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PUSH
28959: LD_INT 0
28961: PUSH
28962: LD_INT 1
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: LD_INT 1
28971: NEG
28972: PUSH
28973: LD_INT 0
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 1
28982: NEG
28983: PUSH
28984: LD_INT 1
28986: NEG
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: ST_TO_ADDR
// end ; 1 :
29001: GO 34898
29003: LD_INT 1
29005: DOUBLE
29006: EQUAL
29007: IFTRUE 29011
29009: GO 31634
29011: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29012: LD_ADDR_VAR 0 11
29016: PUSH
29017: LD_INT 1
29019: NEG
29020: PUSH
29021: LD_INT 3
29023: NEG
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: LD_INT 0
29031: PUSH
29032: LD_INT 3
29034: NEG
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 1
29042: PUSH
29043: LD_INT 2
29045: NEG
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: LIST
29055: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29056: LD_ADDR_VAR 0 12
29060: PUSH
29061: LD_INT 2
29063: PUSH
29064: LD_INT 1
29066: NEG
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PUSH
29072: LD_INT 3
29074: PUSH
29075: LD_INT 0
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PUSH
29082: LD_INT 3
29084: PUSH
29085: LD_INT 1
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: LIST
29096: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29097: LD_ADDR_VAR 0 13
29101: PUSH
29102: LD_INT 3
29104: PUSH
29105: LD_INT 2
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: PUSH
29112: LD_INT 3
29114: PUSH
29115: LD_INT 3
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PUSH
29122: LD_INT 2
29124: PUSH
29125: LD_INT 3
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: LIST
29136: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29137: LD_ADDR_VAR 0 14
29141: PUSH
29142: LD_INT 1
29144: PUSH
29145: LD_INT 3
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 0
29154: PUSH
29155: LD_INT 3
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 1
29164: NEG
29165: PUSH
29166: LD_INT 2
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: LIST
29177: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29178: LD_ADDR_VAR 0 15
29182: PUSH
29183: LD_INT 2
29185: NEG
29186: PUSH
29187: LD_INT 1
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: LD_INT 3
29196: NEG
29197: PUSH
29198: LD_INT 0
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PUSH
29205: LD_INT 3
29207: NEG
29208: PUSH
29209: LD_INT 1
29211: NEG
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: LIST
29221: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29222: LD_ADDR_VAR 0 16
29226: PUSH
29227: LD_INT 2
29229: NEG
29230: PUSH
29231: LD_INT 3
29233: NEG
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: LD_INT 3
29241: NEG
29242: PUSH
29243: LD_INT 2
29245: NEG
29246: PUSH
29247: EMPTY
29248: LIST
29249: LIST
29250: PUSH
29251: LD_INT 3
29253: NEG
29254: PUSH
29255: LD_INT 3
29257: NEG
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: LIST
29267: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29268: LD_ADDR_VAR 0 17
29272: PUSH
29273: LD_INT 1
29275: NEG
29276: PUSH
29277: LD_INT 3
29279: NEG
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 0
29287: PUSH
29288: LD_INT 3
29290: NEG
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 1
29298: PUSH
29299: LD_INT 2
29301: NEG
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: LIST
29311: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29312: LD_ADDR_VAR 0 18
29316: PUSH
29317: LD_INT 2
29319: PUSH
29320: LD_INT 1
29322: NEG
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 3
29330: PUSH
29331: LD_INT 0
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 3
29340: PUSH
29341: LD_INT 1
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: LIST
29352: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29353: LD_ADDR_VAR 0 19
29357: PUSH
29358: LD_INT 3
29360: PUSH
29361: LD_INT 2
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: LD_INT 3
29370: PUSH
29371: LD_INT 3
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PUSH
29378: LD_INT 2
29380: PUSH
29381: LD_INT 3
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: LIST
29392: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29393: LD_ADDR_VAR 0 20
29397: PUSH
29398: LD_INT 1
29400: PUSH
29401: LD_INT 3
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: PUSH
29408: LD_INT 0
29410: PUSH
29411: LD_INT 3
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PUSH
29418: LD_INT 1
29420: NEG
29421: PUSH
29422: LD_INT 2
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: LIST
29433: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29434: LD_ADDR_VAR 0 21
29438: PUSH
29439: LD_INT 2
29441: NEG
29442: PUSH
29443: LD_INT 1
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: LD_INT 3
29452: NEG
29453: PUSH
29454: LD_INT 0
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PUSH
29461: LD_INT 3
29463: NEG
29464: PUSH
29465: LD_INT 1
29467: NEG
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: LIST
29477: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29478: LD_ADDR_VAR 0 22
29482: PUSH
29483: LD_INT 2
29485: NEG
29486: PUSH
29487: LD_INT 3
29489: NEG
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: LD_INT 3
29497: NEG
29498: PUSH
29499: LD_INT 2
29501: NEG
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 3
29509: NEG
29510: PUSH
29511: LD_INT 3
29513: NEG
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: LIST
29523: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29524: LD_ADDR_VAR 0 23
29528: PUSH
29529: LD_INT 0
29531: PUSH
29532: LD_INT 3
29534: NEG
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: LD_INT 1
29542: NEG
29543: PUSH
29544: LD_INT 4
29546: NEG
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 1
29554: PUSH
29555: LD_INT 3
29557: NEG
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: LIST
29567: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29568: LD_ADDR_VAR 0 24
29572: PUSH
29573: LD_INT 3
29575: PUSH
29576: LD_INT 0
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PUSH
29583: LD_INT 3
29585: PUSH
29586: LD_INT 1
29588: NEG
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: LD_INT 4
29596: PUSH
29597: LD_INT 1
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: LIST
29608: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29609: LD_ADDR_VAR 0 25
29613: PUSH
29614: LD_INT 3
29616: PUSH
29617: LD_INT 3
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: PUSH
29624: LD_INT 4
29626: PUSH
29627: LD_INT 3
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: LD_INT 3
29636: PUSH
29637: LD_INT 4
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: LIST
29648: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29649: LD_ADDR_VAR 0 26
29653: PUSH
29654: LD_INT 0
29656: PUSH
29657: LD_INT 3
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: LD_INT 1
29666: PUSH
29667: LD_INT 4
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 1
29676: NEG
29677: PUSH
29678: LD_INT 3
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: LIST
29689: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29690: LD_ADDR_VAR 0 27
29694: PUSH
29695: LD_INT 3
29697: NEG
29698: PUSH
29699: LD_INT 0
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: LD_INT 3
29708: NEG
29709: PUSH
29710: LD_INT 1
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 4
29719: NEG
29720: PUSH
29721: LD_INT 1
29723: NEG
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: LIST
29733: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29734: LD_ADDR_VAR 0 28
29738: PUSH
29739: LD_INT 3
29741: NEG
29742: PUSH
29743: LD_INT 3
29745: NEG
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 3
29753: NEG
29754: PUSH
29755: LD_INT 4
29757: NEG
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 4
29765: NEG
29766: PUSH
29767: LD_INT 3
29769: NEG
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: LIST
29779: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29780: LD_ADDR_VAR 0 29
29784: PUSH
29785: LD_INT 1
29787: NEG
29788: PUSH
29789: LD_INT 3
29791: NEG
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 0
29799: PUSH
29800: LD_INT 3
29802: NEG
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 1
29810: PUSH
29811: LD_INT 2
29813: NEG
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 1
29821: NEG
29822: PUSH
29823: LD_INT 4
29825: NEG
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 0
29833: PUSH
29834: LD_INT 4
29836: NEG
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: LD_INT 1
29844: PUSH
29845: LD_INT 3
29847: NEG
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: PUSH
29853: LD_INT 1
29855: NEG
29856: PUSH
29857: LD_INT 5
29859: NEG
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PUSH
29865: LD_INT 0
29867: PUSH
29868: LD_INT 5
29870: NEG
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: PUSH
29876: LD_INT 1
29878: PUSH
29879: LD_INT 4
29881: NEG
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 1
29889: NEG
29890: PUSH
29891: LD_INT 6
29893: NEG
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PUSH
29899: LD_INT 0
29901: PUSH
29902: LD_INT 6
29904: NEG
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 1
29912: PUSH
29913: LD_INT 5
29915: NEG
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: LIST
29925: LIST
29926: LIST
29927: LIST
29928: LIST
29929: LIST
29930: LIST
29931: LIST
29932: LIST
29933: LIST
29934: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29935: LD_ADDR_VAR 0 30
29939: PUSH
29940: LD_INT 2
29942: PUSH
29943: LD_INT 1
29945: NEG
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_INT 3
29953: PUSH
29954: LD_INT 0
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: LD_INT 3
29963: PUSH
29964: LD_INT 1
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: LD_INT 3
29973: PUSH
29974: LD_INT 1
29976: NEG
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 4
29984: PUSH
29985: LD_INT 0
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 4
29994: PUSH
29995: LD_INT 1
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: LD_INT 4
30004: PUSH
30005: LD_INT 1
30007: NEG
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 5
30015: PUSH
30016: LD_INT 0
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: LD_INT 5
30025: PUSH
30026: LD_INT 1
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: PUSH
30033: LD_INT 5
30035: PUSH
30036: LD_INT 1
30038: NEG
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: LD_INT 6
30046: PUSH
30047: LD_INT 0
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: LD_INT 6
30056: PUSH
30057: LD_INT 1
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30078: LD_ADDR_VAR 0 31
30082: PUSH
30083: LD_INT 3
30085: PUSH
30086: LD_INT 2
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: LD_INT 3
30095: PUSH
30096: LD_INT 3
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: LD_INT 2
30105: PUSH
30106: LD_INT 3
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 4
30115: PUSH
30116: LD_INT 3
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 4
30125: PUSH
30126: LD_INT 4
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: PUSH
30133: LD_INT 3
30135: PUSH
30136: LD_INT 4
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: PUSH
30143: LD_INT 5
30145: PUSH
30146: LD_INT 4
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: PUSH
30153: LD_INT 5
30155: PUSH
30156: LD_INT 5
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PUSH
30163: LD_INT 4
30165: PUSH
30166: LD_INT 5
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: LD_INT 6
30175: PUSH
30176: LD_INT 5
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: PUSH
30183: LD_INT 6
30185: PUSH
30186: LD_INT 6
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: LD_INT 5
30195: PUSH
30196: LD_INT 6
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30217: LD_ADDR_VAR 0 32
30221: PUSH
30222: LD_INT 1
30224: PUSH
30225: LD_INT 3
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PUSH
30232: LD_INT 0
30234: PUSH
30235: LD_INT 3
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 1
30244: NEG
30245: PUSH
30246: LD_INT 2
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PUSH
30253: LD_INT 1
30255: PUSH
30256: LD_INT 4
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: LD_INT 0
30265: PUSH
30266: LD_INT 4
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: LD_INT 1
30275: NEG
30276: PUSH
30277: LD_INT 3
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: LD_INT 1
30286: PUSH
30287: LD_INT 5
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: PUSH
30294: LD_INT 0
30296: PUSH
30297: LD_INT 5
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PUSH
30304: LD_INT 1
30306: NEG
30307: PUSH
30308: LD_INT 4
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 1
30317: PUSH
30318: LD_INT 6
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 0
30327: PUSH
30328: LD_INT 6
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: LD_INT 1
30337: NEG
30338: PUSH
30339: LD_INT 5
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30360: LD_ADDR_VAR 0 33
30364: PUSH
30365: LD_INT 2
30367: NEG
30368: PUSH
30369: LD_INT 1
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 3
30378: NEG
30379: PUSH
30380: LD_INT 0
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 3
30389: NEG
30390: PUSH
30391: LD_INT 1
30393: NEG
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 3
30401: NEG
30402: PUSH
30403: LD_INT 1
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: LD_INT 4
30412: NEG
30413: PUSH
30414: LD_INT 0
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 4
30423: NEG
30424: PUSH
30425: LD_INT 1
30427: NEG
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: LD_INT 4
30435: NEG
30436: PUSH
30437: LD_INT 1
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: PUSH
30444: LD_INT 5
30446: NEG
30447: PUSH
30448: LD_INT 0
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: PUSH
30455: LD_INT 5
30457: NEG
30458: PUSH
30459: LD_INT 1
30461: NEG
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: LD_INT 5
30469: NEG
30470: PUSH
30471: LD_INT 1
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PUSH
30478: LD_INT 6
30480: NEG
30481: PUSH
30482: LD_INT 0
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 6
30491: NEG
30492: PUSH
30493: LD_INT 1
30495: NEG
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30515: LD_ADDR_VAR 0 34
30519: PUSH
30520: LD_INT 2
30522: NEG
30523: PUSH
30524: LD_INT 3
30526: NEG
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 3
30534: NEG
30535: PUSH
30536: LD_INT 2
30538: NEG
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 3
30546: NEG
30547: PUSH
30548: LD_INT 3
30550: NEG
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 3
30558: NEG
30559: PUSH
30560: LD_INT 4
30562: NEG
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: LD_INT 4
30570: NEG
30571: PUSH
30572: LD_INT 3
30574: NEG
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 4
30582: NEG
30583: PUSH
30584: LD_INT 4
30586: NEG
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 4
30594: NEG
30595: PUSH
30596: LD_INT 5
30598: NEG
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 5
30606: NEG
30607: PUSH
30608: LD_INT 4
30610: NEG
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PUSH
30616: LD_INT 5
30618: NEG
30619: PUSH
30620: LD_INT 5
30622: NEG
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 5
30630: NEG
30631: PUSH
30632: LD_INT 6
30634: NEG
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 6
30642: NEG
30643: PUSH
30644: LD_INT 5
30646: NEG
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PUSH
30652: LD_INT 6
30654: NEG
30655: PUSH
30656: LD_INT 6
30658: NEG
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30678: LD_ADDR_VAR 0 41
30682: PUSH
30683: LD_INT 0
30685: PUSH
30686: LD_INT 2
30688: NEG
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 1
30696: NEG
30697: PUSH
30698: LD_INT 3
30700: NEG
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: PUSH
30706: LD_INT 1
30708: PUSH
30709: LD_INT 2
30711: NEG
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: LIST
30721: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30722: LD_ADDR_VAR 0 42
30726: PUSH
30727: LD_INT 2
30729: PUSH
30730: LD_INT 0
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 2
30739: PUSH
30740: LD_INT 1
30742: NEG
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 3
30750: PUSH
30751: LD_INT 1
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: LIST
30762: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30763: LD_ADDR_VAR 0 43
30767: PUSH
30768: LD_INT 2
30770: PUSH
30771: LD_INT 2
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: LD_INT 3
30780: PUSH
30781: LD_INT 2
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PUSH
30788: LD_INT 2
30790: PUSH
30791: LD_INT 3
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: LIST
30802: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30803: LD_ADDR_VAR 0 44
30807: PUSH
30808: LD_INT 0
30810: PUSH
30811: LD_INT 2
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: PUSH
30818: LD_INT 1
30820: PUSH
30821: LD_INT 3
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: PUSH
30828: LD_INT 1
30830: NEG
30831: PUSH
30832: LD_INT 2
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: LIST
30843: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30844: LD_ADDR_VAR 0 45
30848: PUSH
30849: LD_INT 2
30851: NEG
30852: PUSH
30853: LD_INT 0
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: LD_INT 2
30862: NEG
30863: PUSH
30864: LD_INT 1
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: PUSH
30871: LD_INT 3
30873: NEG
30874: PUSH
30875: LD_INT 1
30877: NEG
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: LIST
30887: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30888: LD_ADDR_VAR 0 46
30892: PUSH
30893: LD_INT 2
30895: NEG
30896: PUSH
30897: LD_INT 2
30899: NEG
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 2
30907: NEG
30908: PUSH
30909: LD_INT 3
30911: NEG
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 3
30919: NEG
30920: PUSH
30921: LD_INT 2
30923: NEG
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: LIST
30933: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30934: LD_ADDR_VAR 0 47
30938: PUSH
30939: LD_INT 2
30941: NEG
30942: PUSH
30943: LD_INT 3
30945: NEG
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: PUSH
30951: LD_INT 1
30953: NEG
30954: PUSH
30955: LD_INT 3
30957: NEG
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30967: LD_ADDR_VAR 0 48
30971: PUSH
30972: LD_INT 1
30974: PUSH
30975: LD_INT 2
30977: NEG
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: LD_INT 2
30985: PUSH
30986: LD_INT 1
30988: NEG
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
30998: LD_ADDR_VAR 0 49
31002: PUSH
31003: LD_INT 3
31005: PUSH
31006: LD_INT 1
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: LD_INT 3
31015: PUSH
31016: LD_INT 2
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31027: LD_ADDR_VAR 0 50
31031: PUSH
31032: LD_INT 2
31034: PUSH
31035: LD_INT 3
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: LD_INT 1
31044: PUSH
31045: LD_INT 3
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31056: LD_ADDR_VAR 0 51
31060: PUSH
31061: LD_INT 1
31063: NEG
31064: PUSH
31065: LD_INT 2
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 2
31074: NEG
31075: PUSH
31076: LD_INT 1
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31087: LD_ADDR_VAR 0 52
31091: PUSH
31092: LD_INT 3
31094: NEG
31095: PUSH
31096: LD_INT 1
31098: NEG
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 3
31106: NEG
31107: PUSH
31108: LD_INT 2
31110: NEG
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31120: LD_ADDR_VAR 0 53
31124: PUSH
31125: LD_INT 1
31127: NEG
31128: PUSH
31129: LD_INT 3
31131: NEG
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: PUSH
31137: LD_INT 0
31139: PUSH
31140: LD_INT 3
31142: NEG
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: PUSH
31148: LD_INT 1
31150: PUSH
31151: LD_INT 2
31153: NEG
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: LIST
31163: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31164: LD_ADDR_VAR 0 54
31168: PUSH
31169: LD_INT 2
31171: PUSH
31172: LD_INT 1
31174: NEG
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PUSH
31180: LD_INT 3
31182: PUSH
31183: LD_INT 0
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 3
31192: PUSH
31193: LD_INT 1
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: LIST
31204: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31205: LD_ADDR_VAR 0 55
31209: PUSH
31210: LD_INT 3
31212: PUSH
31213: LD_INT 2
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: PUSH
31220: LD_INT 3
31222: PUSH
31223: LD_INT 3
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: LD_INT 2
31232: PUSH
31233: LD_INT 3
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: LIST
31244: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31245: LD_ADDR_VAR 0 56
31249: PUSH
31250: LD_INT 1
31252: PUSH
31253: LD_INT 3
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: LD_INT 0
31262: PUSH
31263: LD_INT 3
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: LD_INT 1
31272: NEG
31273: PUSH
31274: LD_INT 2
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: LIST
31285: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31286: LD_ADDR_VAR 0 57
31290: PUSH
31291: LD_INT 2
31293: NEG
31294: PUSH
31295: LD_INT 1
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 3
31304: NEG
31305: PUSH
31306: LD_INT 0
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: LD_INT 3
31315: NEG
31316: PUSH
31317: LD_INT 1
31319: NEG
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: LIST
31329: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31330: LD_ADDR_VAR 0 58
31334: PUSH
31335: LD_INT 2
31337: NEG
31338: PUSH
31339: LD_INT 3
31341: NEG
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: LD_INT 3
31349: NEG
31350: PUSH
31351: LD_INT 2
31353: NEG
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: LD_INT 3
31361: NEG
31362: PUSH
31363: LD_INT 3
31365: NEG
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: LIST
31375: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31376: LD_ADDR_VAR 0 59
31380: PUSH
31381: LD_INT 1
31383: NEG
31384: PUSH
31385: LD_INT 2
31387: NEG
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: PUSH
31393: LD_INT 0
31395: PUSH
31396: LD_INT 2
31398: NEG
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: PUSH
31404: LD_INT 1
31406: PUSH
31407: LD_INT 1
31409: NEG
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: LIST
31419: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31420: LD_ADDR_VAR 0 60
31424: PUSH
31425: LD_INT 1
31427: PUSH
31428: LD_INT 1
31430: NEG
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: PUSH
31436: LD_INT 2
31438: PUSH
31439: LD_INT 0
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 2
31448: PUSH
31449: LD_INT 1
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: LIST
31460: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31461: LD_ADDR_VAR 0 61
31465: PUSH
31466: LD_INT 2
31468: PUSH
31469: LD_INT 1
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: LD_INT 2
31478: PUSH
31479: LD_INT 2
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 1
31488: PUSH
31489: LD_INT 2
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: LIST
31500: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31501: LD_ADDR_VAR 0 62
31505: PUSH
31506: LD_INT 1
31508: PUSH
31509: LD_INT 2
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 0
31518: PUSH
31519: LD_INT 2
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 1
31528: NEG
31529: PUSH
31530: LD_INT 1
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: LIST
31541: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31542: LD_ADDR_VAR 0 63
31546: PUSH
31547: LD_INT 1
31549: NEG
31550: PUSH
31551: LD_INT 1
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 2
31560: NEG
31561: PUSH
31562: LD_INT 0
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: LD_INT 2
31571: NEG
31572: PUSH
31573: LD_INT 1
31575: NEG
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: LIST
31585: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31586: LD_ADDR_VAR 0 64
31590: PUSH
31591: LD_INT 1
31593: NEG
31594: PUSH
31595: LD_INT 2
31597: NEG
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PUSH
31603: LD_INT 2
31605: NEG
31606: PUSH
31607: LD_INT 1
31609: NEG
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: LD_INT 2
31617: NEG
31618: PUSH
31619: LD_INT 2
31621: NEG
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: LIST
31631: ST_TO_ADDR
// end ; 2 :
31632: GO 34898
31634: LD_INT 2
31636: DOUBLE
31637: EQUAL
31638: IFTRUE 31642
31640: GO 34897
31642: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31643: LD_ADDR_VAR 0 29
31647: PUSH
31648: LD_INT 4
31650: PUSH
31651: LD_INT 0
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: LD_INT 4
31660: PUSH
31661: LD_INT 1
31663: NEG
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 5
31671: PUSH
31672: LD_INT 0
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: LD_INT 5
31681: PUSH
31682: LD_INT 1
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: PUSH
31689: LD_INT 4
31691: PUSH
31692: LD_INT 1
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: PUSH
31699: LD_INT 3
31701: PUSH
31702: LD_INT 0
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: LD_INT 3
31711: PUSH
31712: LD_INT 1
31714: NEG
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 3
31722: PUSH
31723: LD_INT 2
31725: NEG
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 5
31733: PUSH
31734: LD_INT 2
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 3
31743: PUSH
31744: LD_INT 3
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 3
31753: PUSH
31754: LD_INT 2
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: LD_INT 4
31763: PUSH
31764: LD_INT 3
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PUSH
31771: LD_INT 4
31773: PUSH
31774: LD_INT 4
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 3
31783: PUSH
31784: LD_INT 4
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 2
31793: PUSH
31794: LD_INT 3
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: LD_INT 2
31803: PUSH
31804: LD_INT 2
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PUSH
31811: LD_INT 4
31813: PUSH
31814: LD_INT 2
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: LD_INT 2
31823: PUSH
31824: LD_INT 4
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 0
31833: PUSH
31834: LD_INT 4
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 0
31843: PUSH
31844: LD_INT 3
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: LD_INT 1
31853: PUSH
31854: LD_INT 4
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 1
31863: PUSH
31864: LD_INT 5
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 0
31873: PUSH
31874: LD_INT 5
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 1
31883: NEG
31884: PUSH
31885: LD_INT 4
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 1
31894: NEG
31895: PUSH
31896: LD_INT 3
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: PUSH
31903: LD_INT 2
31905: PUSH
31906: LD_INT 5
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 2
31915: NEG
31916: PUSH
31917: LD_INT 3
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 3
31926: NEG
31927: PUSH
31928: LD_INT 0
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 3
31937: NEG
31938: PUSH
31939: LD_INT 1
31941: NEG
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 2
31949: NEG
31950: PUSH
31951: LD_INT 0
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 2
31960: NEG
31961: PUSH
31962: LD_INT 1
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: LD_INT 3
31971: NEG
31972: PUSH
31973: LD_INT 1
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 4
31982: NEG
31983: PUSH
31984: LD_INT 0
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: LD_INT 4
31993: NEG
31994: PUSH
31995: LD_INT 1
31997: NEG
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: PUSH
32003: LD_INT 4
32005: NEG
32006: PUSH
32007: LD_INT 2
32009: NEG
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: LD_INT 2
32017: NEG
32018: PUSH
32019: LD_INT 2
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PUSH
32026: LD_INT 4
32028: NEG
32029: PUSH
32030: LD_INT 4
32032: NEG
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 4
32040: NEG
32041: PUSH
32042: LD_INT 5
32044: NEG
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: LD_INT 3
32052: NEG
32053: PUSH
32054: LD_INT 4
32056: NEG
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: LD_INT 3
32064: NEG
32065: PUSH
32066: LD_INT 3
32068: NEG
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 4
32076: NEG
32077: PUSH
32078: LD_INT 3
32080: NEG
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 5
32088: NEG
32089: PUSH
32090: LD_INT 4
32092: NEG
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_INT 5
32100: NEG
32101: PUSH
32102: LD_INT 5
32104: NEG
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: LD_INT 3
32112: NEG
32113: PUSH
32114: LD_INT 5
32116: NEG
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 5
32124: NEG
32125: PUSH
32126: LD_INT 3
32128: NEG
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32181: LD_ADDR_VAR 0 30
32185: PUSH
32186: LD_INT 4
32188: PUSH
32189: LD_INT 4
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: LD_INT 4
32198: PUSH
32199: LD_INT 3
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 5
32208: PUSH
32209: LD_INT 4
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 5
32218: PUSH
32219: LD_INT 5
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 4
32228: PUSH
32229: LD_INT 5
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 3
32238: PUSH
32239: LD_INT 4
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: LD_INT 3
32248: PUSH
32249: LD_INT 3
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PUSH
32256: LD_INT 5
32258: PUSH
32259: LD_INT 3
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 3
32268: PUSH
32269: LD_INT 5
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: PUSH
32276: LD_INT 0
32278: PUSH
32279: LD_INT 3
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: LD_INT 0
32288: PUSH
32289: LD_INT 2
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: PUSH
32296: LD_INT 1
32298: PUSH
32299: LD_INT 3
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: LD_INT 1
32308: PUSH
32309: LD_INT 4
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PUSH
32316: LD_INT 0
32318: PUSH
32319: LD_INT 4
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 1
32328: NEG
32329: PUSH
32330: LD_INT 3
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: LD_INT 1
32339: NEG
32340: PUSH
32341: LD_INT 2
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 2
32350: PUSH
32351: LD_INT 4
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 2
32360: NEG
32361: PUSH
32362: LD_INT 2
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: LD_INT 4
32371: NEG
32372: PUSH
32373: LD_INT 0
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 4
32382: NEG
32383: PUSH
32384: LD_INT 1
32386: NEG
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 3
32394: NEG
32395: PUSH
32396: LD_INT 0
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 3
32405: NEG
32406: PUSH
32407: LD_INT 1
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 4
32416: NEG
32417: PUSH
32418: LD_INT 1
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 5
32427: NEG
32428: PUSH
32429: LD_INT 0
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 5
32438: NEG
32439: PUSH
32440: LD_INT 1
32442: NEG
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 5
32450: NEG
32451: PUSH
32452: LD_INT 2
32454: NEG
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: LD_INT 3
32462: NEG
32463: PUSH
32464: LD_INT 2
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 3
32473: NEG
32474: PUSH
32475: LD_INT 3
32477: NEG
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: LD_INT 3
32485: NEG
32486: PUSH
32487: LD_INT 4
32489: NEG
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: LD_INT 2
32497: NEG
32498: PUSH
32499: LD_INT 3
32501: NEG
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 2
32509: NEG
32510: PUSH
32511: LD_INT 2
32513: NEG
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 3
32521: NEG
32522: PUSH
32523: LD_INT 2
32525: NEG
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: LD_INT 4
32533: NEG
32534: PUSH
32535: LD_INT 3
32537: NEG
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: LD_INT 4
32545: NEG
32546: PUSH
32547: LD_INT 4
32549: NEG
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 2
32557: NEG
32558: PUSH
32559: LD_INT 4
32561: NEG
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 4
32569: NEG
32570: PUSH
32571: LD_INT 2
32573: NEG
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 0
32581: PUSH
32582: LD_INT 4
32584: NEG
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: LD_INT 0
32592: PUSH
32593: LD_INT 5
32595: NEG
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 1
32603: PUSH
32604: LD_INT 4
32606: NEG
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 1
32614: PUSH
32615: LD_INT 3
32617: NEG
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 0
32625: PUSH
32626: LD_INT 3
32628: NEG
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 1
32636: NEG
32637: PUSH
32638: LD_INT 4
32640: NEG
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 1
32648: NEG
32649: PUSH
32650: LD_INT 5
32652: NEG
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 2
32660: PUSH
32661: LD_INT 3
32663: NEG
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 2
32671: NEG
32672: PUSH
32673: LD_INT 5
32675: NEG
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32728: LD_ADDR_VAR 0 31
32732: PUSH
32733: LD_INT 0
32735: PUSH
32736: LD_INT 4
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 0
32745: PUSH
32746: LD_INT 3
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: LD_INT 1
32755: PUSH
32756: LD_INT 4
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 1
32765: PUSH
32766: LD_INT 5
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PUSH
32773: LD_INT 0
32775: PUSH
32776: LD_INT 5
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PUSH
32783: LD_INT 1
32785: NEG
32786: PUSH
32787: LD_INT 4
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 1
32796: NEG
32797: PUSH
32798: LD_INT 3
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 2
32807: PUSH
32808: LD_INT 5
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 2
32817: NEG
32818: PUSH
32819: LD_INT 3
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 3
32828: NEG
32829: PUSH
32830: LD_INT 0
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: LD_INT 3
32839: NEG
32840: PUSH
32841: LD_INT 1
32843: NEG
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: LD_INT 2
32851: NEG
32852: PUSH
32853: LD_INT 0
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: LD_INT 2
32862: NEG
32863: PUSH
32864: LD_INT 1
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 3
32873: NEG
32874: PUSH
32875: LD_INT 1
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 4
32884: NEG
32885: PUSH
32886: LD_INT 0
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: PUSH
32893: LD_INT 4
32895: NEG
32896: PUSH
32897: LD_INT 1
32899: NEG
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 4
32907: NEG
32908: PUSH
32909: LD_INT 2
32911: NEG
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 2
32919: NEG
32920: PUSH
32921: LD_INT 2
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 4
32930: NEG
32931: PUSH
32932: LD_INT 4
32934: NEG
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 4
32942: NEG
32943: PUSH
32944: LD_INT 5
32946: NEG
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 3
32954: NEG
32955: PUSH
32956: LD_INT 4
32958: NEG
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: LD_INT 3
32966: NEG
32967: PUSH
32968: LD_INT 3
32970: NEG
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: LD_INT 4
32978: NEG
32979: PUSH
32980: LD_INT 3
32982: NEG
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 5
32990: NEG
32991: PUSH
32992: LD_INT 4
32994: NEG
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 5
33002: NEG
33003: PUSH
33004: LD_INT 5
33006: NEG
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 3
33014: NEG
33015: PUSH
33016: LD_INT 5
33018: NEG
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 5
33026: NEG
33027: PUSH
33028: LD_INT 3
33030: NEG
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PUSH
33036: LD_INT 0
33038: PUSH
33039: LD_INT 3
33041: NEG
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PUSH
33047: LD_INT 0
33049: PUSH
33050: LD_INT 4
33052: NEG
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 1
33060: PUSH
33061: LD_INT 3
33063: NEG
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: PUSH
33069: LD_INT 1
33071: PUSH
33072: LD_INT 2
33074: NEG
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: PUSH
33080: LD_INT 0
33082: PUSH
33083: LD_INT 2
33085: NEG
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 1
33093: NEG
33094: PUSH
33095: LD_INT 3
33097: NEG
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: LD_INT 1
33105: NEG
33106: PUSH
33107: LD_INT 4
33109: NEG
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 2
33117: PUSH
33118: LD_INT 2
33120: NEG
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: LD_INT 2
33128: NEG
33129: PUSH
33130: LD_INT 4
33132: NEG
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 4
33140: PUSH
33141: LD_INT 0
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: PUSH
33148: LD_INT 4
33150: PUSH
33151: LD_INT 1
33153: NEG
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 5
33161: PUSH
33162: LD_INT 0
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: LD_INT 5
33171: PUSH
33172: LD_INT 1
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: LD_INT 4
33181: PUSH
33182: LD_INT 1
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: LD_INT 3
33191: PUSH
33192: LD_INT 0
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: PUSH
33199: LD_INT 3
33201: PUSH
33202: LD_INT 1
33204: NEG
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: PUSH
33210: LD_INT 3
33212: PUSH
33213: LD_INT 2
33215: NEG
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 5
33223: PUSH
33224: LD_INT 2
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33278: LD_ADDR_VAR 0 32
33282: PUSH
33283: LD_INT 4
33285: NEG
33286: PUSH
33287: LD_INT 0
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PUSH
33294: LD_INT 4
33296: NEG
33297: PUSH
33298: LD_INT 1
33300: NEG
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PUSH
33306: LD_INT 3
33308: NEG
33309: PUSH
33310: LD_INT 0
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 3
33319: NEG
33320: PUSH
33321: LD_INT 1
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 4
33330: NEG
33331: PUSH
33332: LD_INT 1
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 5
33341: NEG
33342: PUSH
33343: LD_INT 0
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 5
33352: NEG
33353: PUSH
33354: LD_INT 1
33356: NEG
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PUSH
33362: LD_INT 5
33364: NEG
33365: PUSH
33366: LD_INT 2
33368: NEG
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 3
33376: NEG
33377: PUSH
33378: LD_INT 2
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: LD_INT 3
33387: NEG
33388: PUSH
33389: LD_INT 3
33391: NEG
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 3
33399: NEG
33400: PUSH
33401: LD_INT 4
33403: NEG
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PUSH
33409: LD_INT 2
33411: NEG
33412: PUSH
33413: LD_INT 3
33415: NEG
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PUSH
33421: LD_INT 2
33423: NEG
33424: PUSH
33425: LD_INT 2
33427: NEG
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: PUSH
33433: LD_INT 3
33435: NEG
33436: PUSH
33437: LD_INT 2
33439: NEG
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: PUSH
33445: LD_INT 4
33447: NEG
33448: PUSH
33449: LD_INT 3
33451: NEG
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PUSH
33457: LD_INT 4
33459: NEG
33460: PUSH
33461: LD_INT 4
33463: NEG
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 2
33471: NEG
33472: PUSH
33473: LD_INT 4
33475: NEG
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 4
33483: NEG
33484: PUSH
33485: LD_INT 2
33487: NEG
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 0
33495: PUSH
33496: LD_INT 4
33498: NEG
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: LD_INT 0
33506: PUSH
33507: LD_INT 5
33509: NEG
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PUSH
33515: LD_INT 1
33517: PUSH
33518: LD_INT 4
33520: NEG
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PUSH
33526: LD_INT 1
33528: PUSH
33529: LD_INT 3
33531: NEG
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 0
33539: PUSH
33540: LD_INT 3
33542: NEG
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PUSH
33548: LD_INT 1
33550: NEG
33551: PUSH
33552: LD_INT 4
33554: NEG
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 1
33562: NEG
33563: PUSH
33564: LD_INT 5
33566: NEG
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: PUSH
33572: LD_INT 2
33574: PUSH
33575: LD_INT 3
33577: NEG
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PUSH
33583: LD_INT 2
33585: NEG
33586: PUSH
33587: LD_INT 5
33589: NEG
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: PUSH
33595: LD_INT 3
33597: PUSH
33598: LD_INT 0
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 3
33607: PUSH
33608: LD_INT 1
33610: NEG
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 4
33618: PUSH
33619: LD_INT 0
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PUSH
33626: LD_INT 4
33628: PUSH
33629: LD_INT 1
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: PUSH
33636: LD_INT 3
33638: PUSH
33639: LD_INT 1
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: PUSH
33646: LD_INT 2
33648: PUSH
33649: LD_INT 0
33651: PUSH
33652: EMPTY
33653: LIST
33654: LIST
33655: PUSH
33656: LD_INT 2
33658: PUSH
33659: LD_INT 1
33661: NEG
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: LD_INT 2
33669: PUSH
33670: LD_INT 2
33672: NEG
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 4
33680: PUSH
33681: LD_INT 2
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 4
33690: PUSH
33691: LD_INT 4
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: PUSH
33698: LD_INT 4
33700: PUSH
33701: LD_INT 3
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: PUSH
33708: LD_INT 5
33710: PUSH
33711: LD_INT 4
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: PUSH
33718: LD_INT 5
33720: PUSH
33721: LD_INT 5
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PUSH
33728: LD_INT 4
33730: PUSH
33731: LD_INT 5
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: PUSH
33738: LD_INT 3
33740: PUSH
33741: LD_INT 4
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: LD_INT 3
33750: PUSH
33751: LD_INT 3
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: LD_INT 5
33760: PUSH
33761: LD_INT 3
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: PUSH
33768: LD_INT 3
33770: PUSH
33771: LD_INT 5
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33825: LD_ADDR_VAR 0 33
33829: PUSH
33830: LD_INT 4
33832: NEG
33833: PUSH
33834: LD_INT 4
33836: NEG
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PUSH
33842: LD_INT 4
33844: NEG
33845: PUSH
33846: LD_INT 5
33848: NEG
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: PUSH
33854: LD_INT 3
33856: NEG
33857: PUSH
33858: LD_INT 4
33860: NEG
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: LD_INT 3
33868: NEG
33869: PUSH
33870: LD_INT 3
33872: NEG
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: LD_INT 4
33880: NEG
33881: PUSH
33882: LD_INT 3
33884: NEG
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PUSH
33890: LD_INT 5
33892: NEG
33893: PUSH
33894: LD_INT 4
33896: NEG
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 5
33904: NEG
33905: PUSH
33906: LD_INT 5
33908: NEG
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: PUSH
33914: LD_INT 3
33916: NEG
33917: PUSH
33918: LD_INT 5
33920: NEG
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: PUSH
33926: LD_INT 5
33928: NEG
33929: PUSH
33930: LD_INT 3
33932: NEG
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: LD_INT 0
33940: PUSH
33941: LD_INT 3
33943: NEG
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 0
33951: PUSH
33952: LD_INT 4
33954: NEG
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: PUSH
33960: LD_INT 1
33962: PUSH
33963: LD_INT 3
33965: NEG
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PUSH
33971: LD_INT 1
33973: PUSH
33974: LD_INT 2
33976: NEG
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PUSH
33982: LD_INT 0
33984: PUSH
33985: LD_INT 2
33987: NEG
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 1
33995: NEG
33996: PUSH
33997: LD_INT 3
33999: NEG
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 1
34007: NEG
34008: PUSH
34009: LD_INT 4
34011: NEG
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: LD_INT 2
34019: PUSH
34020: LD_INT 2
34022: NEG
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 2
34030: NEG
34031: PUSH
34032: LD_INT 4
34034: NEG
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 4
34042: PUSH
34043: LD_INT 0
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 4
34052: PUSH
34053: LD_INT 1
34055: NEG
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 5
34063: PUSH
34064: LD_INT 0
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 5
34073: PUSH
34074: LD_INT 1
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 4
34083: PUSH
34084: LD_INT 1
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: PUSH
34091: LD_INT 3
34093: PUSH
34094: LD_INT 0
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: PUSH
34101: LD_INT 3
34103: PUSH
34104: LD_INT 1
34106: NEG
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: PUSH
34112: LD_INT 3
34114: PUSH
34115: LD_INT 2
34117: NEG
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 5
34125: PUSH
34126: LD_INT 2
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 3
34135: PUSH
34136: LD_INT 3
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: LD_INT 3
34145: PUSH
34146: LD_INT 2
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: PUSH
34153: LD_INT 4
34155: PUSH
34156: LD_INT 3
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 4
34165: PUSH
34166: LD_INT 4
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: PUSH
34173: LD_INT 3
34175: PUSH
34176: LD_INT 4
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: LD_INT 2
34185: PUSH
34186: LD_INT 3
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 2
34195: PUSH
34196: LD_INT 2
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: LD_INT 4
34205: PUSH
34206: LD_INT 2
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: PUSH
34213: LD_INT 2
34215: PUSH
34216: LD_INT 4
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 0
34225: PUSH
34226: LD_INT 4
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 0
34235: PUSH
34236: LD_INT 3
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: LD_INT 1
34245: PUSH
34246: LD_INT 4
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 1
34255: PUSH
34256: LD_INT 5
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 0
34265: PUSH
34266: LD_INT 5
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: LD_INT 1
34275: NEG
34276: PUSH
34277: LD_INT 4
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 1
34286: NEG
34287: PUSH
34288: LD_INT 3
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: LD_INT 2
34297: PUSH
34298: LD_INT 5
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 2
34307: NEG
34308: PUSH
34309: LD_INT 3
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: LIST
34325: LIST
34326: LIST
34327: LIST
34328: LIST
34329: LIST
34330: LIST
34331: LIST
34332: LIST
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: LIST
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34363: LD_ADDR_VAR 0 34
34367: PUSH
34368: LD_INT 0
34370: PUSH
34371: LD_INT 4
34373: NEG
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 0
34381: PUSH
34382: LD_INT 5
34384: NEG
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 1
34392: PUSH
34393: LD_INT 4
34395: NEG
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 1
34403: PUSH
34404: LD_INT 3
34406: NEG
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 0
34414: PUSH
34415: LD_INT 3
34417: NEG
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 1
34425: NEG
34426: PUSH
34427: LD_INT 4
34429: NEG
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: PUSH
34435: LD_INT 1
34437: NEG
34438: PUSH
34439: LD_INT 5
34441: NEG
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: PUSH
34447: LD_INT 2
34449: PUSH
34450: LD_INT 3
34452: NEG
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 2
34460: NEG
34461: PUSH
34462: LD_INT 5
34464: NEG
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 3
34472: PUSH
34473: LD_INT 0
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 3
34482: PUSH
34483: LD_INT 1
34485: NEG
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: PUSH
34491: LD_INT 4
34493: PUSH
34494: LD_INT 0
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 4
34503: PUSH
34504: LD_INT 1
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 3
34513: PUSH
34514: LD_INT 1
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 2
34523: PUSH
34524: LD_INT 0
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 2
34533: PUSH
34534: LD_INT 1
34536: NEG
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 2
34544: PUSH
34545: LD_INT 2
34547: NEG
34548: PUSH
34549: EMPTY
34550: LIST
34551: LIST
34552: PUSH
34553: LD_INT 4
34555: PUSH
34556: LD_INT 2
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: PUSH
34563: LD_INT 4
34565: PUSH
34566: LD_INT 4
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: LD_INT 4
34575: PUSH
34576: LD_INT 3
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: LD_INT 5
34585: PUSH
34586: LD_INT 4
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PUSH
34593: LD_INT 5
34595: PUSH
34596: LD_INT 5
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 4
34605: PUSH
34606: LD_INT 5
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 3
34615: PUSH
34616: LD_INT 4
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: LD_INT 3
34625: PUSH
34626: LD_INT 3
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: PUSH
34633: LD_INT 5
34635: PUSH
34636: LD_INT 3
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 3
34645: PUSH
34646: LD_INT 5
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 0
34655: PUSH
34656: LD_INT 3
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 0
34665: PUSH
34666: LD_INT 2
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 1
34675: PUSH
34676: LD_INT 3
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 1
34685: PUSH
34686: LD_INT 4
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: LD_INT 0
34695: PUSH
34696: LD_INT 4
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: PUSH
34703: LD_INT 1
34705: NEG
34706: PUSH
34707: LD_INT 3
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: LD_INT 1
34716: NEG
34717: PUSH
34718: LD_INT 2
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 2
34727: PUSH
34728: LD_INT 4
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 2
34737: NEG
34738: PUSH
34739: LD_INT 2
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 4
34748: NEG
34749: PUSH
34750: LD_INT 0
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: LD_INT 4
34759: NEG
34760: PUSH
34761: LD_INT 1
34763: NEG
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: PUSH
34769: LD_INT 3
34771: NEG
34772: PUSH
34773: LD_INT 0
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: LD_INT 3
34782: NEG
34783: PUSH
34784: LD_INT 1
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: PUSH
34791: LD_INT 4
34793: NEG
34794: PUSH
34795: LD_INT 1
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 5
34804: NEG
34805: PUSH
34806: LD_INT 0
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 5
34815: NEG
34816: PUSH
34817: LD_INT 1
34819: NEG
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 5
34827: NEG
34828: PUSH
34829: LD_INT 2
34831: NEG
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 3
34839: NEG
34840: PUSH
34841: LD_INT 2
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: LIST
34886: LIST
34887: LIST
34888: LIST
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: ST_TO_ADDR
// end ; end ;
34895: GO 34898
34897: POP
// case btype of b_depot , b_warehouse :
34898: LD_VAR 0 1
34902: PUSH
34903: LD_INT 0
34905: DOUBLE
34906: EQUAL
34907: IFTRUE 34917
34909: LD_INT 1
34911: DOUBLE
34912: EQUAL
34913: IFTRUE 34917
34915: GO 35118
34917: POP
// case nation of nation_american :
34918: LD_VAR 0 5
34922: PUSH
34923: LD_INT 1
34925: DOUBLE
34926: EQUAL
34927: IFTRUE 34931
34929: GO 34987
34931: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34932: LD_ADDR_VAR 0 9
34936: PUSH
34937: LD_VAR 0 11
34941: PUSH
34942: LD_VAR 0 12
34946: PUSH
34947: LD_VAR 0 13
34951: PUSH
34952: LD_VAR 0 14
34956: PUSH
34957: LD_VAR 0 15
34961: PUSH
34962: LD_VAR 0 16
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: PUSH
34975: LD_VAR 0 4
34979: PUSH
34980: LD_INT 1
34982: PLUS
34983: ARRAY
34984: ST_TO_ADDR
34985: GO 35116
34987: LD_INT 2
34989: DOUBLE
34990: EQUAL
34991: IFTRUE 34995
34993: GO 35051
34995: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
34996: LD_ADDR_VAR 0 9
35000: PUSH
35001: LD_VAR 0 17
35005: PUSH
35006: LD_VAR 0 18
35010: PUSH
35011: LD_VAR 0 19
35015: PUSH
35016: LD_VAR 0 20
35020: PUSH
35021: LD_VAR 0 21
35025: PUSH
35026: LD_VAR 0 22
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: PUSH
35039: LD_VAR 0 4
35043: PUSH
35044: LD_INT 1
35046: PLUS
35047: ARRAY
35048: ST_TO_ADDR
35049: GO 35116
35051: LD_INT 3
35053: DOUBLE
35054: EQUAL
35055: IFTRUE 35059
35057: GO 35115
35059: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35060: LD_ADDR_VAR 0 9
35064: PUSH
35065: LD_VAR 0 23
35069: PUSH
35070: LD_VAR 0 24
35074: PUSH
35075: LD_VAR 0 25
35079: PUSH
35080: LD_VAR 0 26
35084: PUSH
35085: LD_VAR 0 27
35089: PUSH
35090: LD_VAR 0 28
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: PUSH
35103: LD_VAR 0 4
35107: PUSH
35108: LD_INT 1
35110: PLUS
35111: ARRAY
35112: ST_TO_ADDR
35113: GO 35116
35115: POP
35116: GO 35671
35118: LD_INT 2
35120: DOUBLE
35121: EQUAL
35122: IFTRUE 35132
35124: LD_INT 3
35126: DOUBLE
35127: EQUAL
35128: IFTRUE 35132
35130: GO 35188
35132: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35133: LD_ADDR_VAR 0 9
35137: PUSH
35138: LD_VAR 0 29
35142: PUSH
35143: LD_VAR 0 30
35147: PUSH
35148: LD_VAR 0 31
35152: PUSH
35153: LD_VAR 0 32
35157: PUSH
35158: LD_VAR 0 33
35162: PUSH
35163: LD_VAR 0 34
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: PUSH
35176: LD_VAR 0 4
35180: PUSH
35181: LD_INT 1
35183: PLUS
35184: ARRAY
35185: ST_TO_ADDR
35186: GO 35671
35188: LD_INT 16
35190: DOUBLE
35191: EQUAL
35192: IFTRUE 35250
35194: LD_INT 17
35196: DOUBLE
35197: EQUAL
35198: IFTRUE 35250
35200: LD_INT 18
35202: DOUBLE
35203: EQUAL
35204: IFTRUE 35250
35206: LD_INT 19
35208: DOUBLE
35209: EQUAL
35210: IFTRUE 35250
35212: LD_INT 22
35214: DOUBLE
35215: EQUAL
35216: IFTRUE 35250
35218: LD_INT 20
35220: DOUBLE
35221: EQUAL
35222: IFTRUE 35250
35224: LD_INT 21
35226: DOUBLE
35227: EQUAL
35228: IFTRUE 35250
35230: LD_INT 23
35232: DOUBLE
35233: EQUAL
35234: IFTRUE 35250
35236: LD_INT 24
35238: DOUBLE
35239: EQUAL
35240: IFTRUE 35250
35242: LD_INT 25
35244: DOUBLE
35245: EQUAL
35246: IFTRUE 35250
35248: GO 35306
35250: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35251: LD_ADDR_VAR 0 9
35255: PUSH
35256: LD_VAR 0 35
35260: PUSH
35261: LD_VAR 0 36
35265: PUSH
35266: LD_VAR 0 37
35270: PUSH
35271: LD_VAR 0 38
35275: PUSH
35276: LD_VAR 0 39
35280: PUSH
35281: LD_VAR 0 40
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: PUSH
35294: LD_VAR 0 4
35298: PUSH
35299: LD_INT 1
35301: PLUS
35302: ARRAY
35303: ST_TO_ADDR
35304: GO 35671
35306: LD_INT 6
35308: DOUBLE
35309: EQUAL
35310: IFTRUE 35362
35312: LD_INT 7
35314: DOUBLE
35315: EQUAL
35316: IFTRUE 35362
35318: LD_INT 8
35320: DOUBLE
35321: EQUAL
35322: IFTRUE 35362
35324: LD_INT 13
35326: DOUBLE
35327: EQUAL
35328: IFTRUE 35362
35330: LD_INT 12
35332: DOUBLE
35333: EQUAL
35334: IFTRUE 35362
35336: LD_INT 15
35338: DOUBLE
35339: EQUAL
35340: IFTRUE 35362
35342: LD_INT 11
35344: DOUBLE
35345: EQUAL
35346: IFTRUE 35362
35348: LD_INT 14
35350: DOUBLE
35351: EQUAL
35352: IFTRUE 35362
35354: LD_INT 10
35356: DOUBLE
35357: EQUAL
35358: IFTRUE 35362
35360: GO 35418
35362: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35363: LD_ADDR_VAR 0 9
35367: PUSH
35368: LD_VAR 0 41
35372: PUSH
35373: LD_VAR 0 42
35377: PUSH
35378: LD_VAR 0 43
35382: PUSH
35383: LD_VAR 0 44
35387: PUSH
35388: LD_VAR 0 45
35392: PUSH
35393: LD_VAR 0 46
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: PUSH
35406: LD_VAR 0 4
35410: PUSH
35411: LD_INT 1
35413: PLUS
35414: ARRAY
35415: ST_TO_ADDR
35416: GO 35671
35418: LD_INT 36
35420: DOUBLE
35421: EQUAL
35422: IFTRUE 35426
35424: GO 35482
35426: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35427: LD_ADDR_VAR 0 9
35431: PUSH
35432: LD_VAR 0 47
35436: PUSH
35437: LD_VAR 0 48
35441: PUSH
35442: LD_VAR 0 49
35446: PUSH
35447: LD_VAR 0 50
35451: PUSH
35452: LD_VAR 0 51
35456: PUSH
35457: LD_VAR 0 52
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: LIST
35466: LIST
35467: LIST
35468: LIST
35469: PUSH
35470: LD_VAR 0 4
35474: PUSH
35475: LD_INT 1
35477: PLUS
35478: ARRAY
35479: ST_TO_ADDR
35480: GO 35671
35482: LD_INT 4
35484: DOUBLE
35485: EQUAL
35486: IFTRUE 35508
35488: LD_INT 5
35490: DOUBLE
35491: EQUAL
35492: IFTRUE 35508
35494: LD_INT 34
35496: DOUBLE
35497: EQUAL
35498: IFTRUE 35508
35500: LD_INT 37
35502: DOUBLE
35503: EQUAL
35504: IFTRUE 35508
35506: GO 35564
35508: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35509: LD_ADDR_VAR 0 9
35513: PUSH
35514: LD_VAR 0 53
35518: PUSH
35519: LD_VAR 0 54
35523: PUSH
35524: LD_VAR 0 55
35528: PUSH
35529: LD_VAR 0 56
35533: PUSH
35534: LD_VAR 0 57
35538: PUSH
35539: LD_VAR 0 58
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: PUSH
35552: LD_VAR 0 4
35556: PUSH
35557: LD_INT 1
35559: PLUS
35560: ARRAY
35561: ST_TO_ADDR
35562: GO 35671
35564: LD_INT 31
35566: DOUBLE
35567: EQUAL
35568: IFTRUE 35614
35570: LD_INT 32
35572: DOUBLE
35573: EQUAL
35574: IFTRUE 35614
35576: LD_INT 33
35578: DOUBLE
35579: EQUAL
35580: IFTRUE 35614
35582: LD_INT 27
35584: DOUBLE
35585: EQUAL
35586: IFTRUE 35614
35588: LD_INT 26
35590: DOUBLE
35591: EQUAL
35592: IFTRUE 35614
35594: LD_INT 28
35596: DOUBLE
35597: EQUAL
35598: IFTRUE 35614
35600: LD_INT 29
35602: DOUBLE
35603: EQUAL
35604: IFTRUE 35614
35606: LD_INT 30
35608: DOUBLE
35609: EQUAL
35610: IFTRUE 35614
35612: GO 35670
35614: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35615: LD_ADDR_VAR 0 9
35619: PUSH
35620: LD_VAR 0 59
35624: PUSH
35625: LD_VAR 0 60
35629: PUSH
35630: LD_VAR 0 61
35634: PUSH
35635: LD_VAR 0 62
35639: PUSH
35640: LD_VAR 0 63
35644: PUSH
35645: LD_VAR 0 64
35649: PUSH
35650: EMPTY
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: PUSH
35658: LD_VAR 0 4
35662: PUSH
35663: LD_INT 1
35665: PLUS
35666: ARRAY
35667: ST_TO_ADDR
35668: GO 35671
35670: POP
// temp_list2 = [ ] ;
35671: LD_ADDR_VAR 0 10
35675: PUSH
35676: EMPTY
35677: ST_TO_ADDR
// for i in temp_list do
35678: LD_ADDR_VAR 0 8
35682: PUSH
35683: LD_VAR 0 9
35687: PUSH
35688: FOR_IN
35689: IFFALSE 35741
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35691: LD_ADDR_VAR 0 10
35695: PUSH
35696: LD_VAR 0 10
35700: PUSH
35701: LD_VAR 0 8
35705: PUSH
35706: LD_INT 1
35708: ARRAY
35709: PUSH
35710: LD_VAR 0 2
35714: PLUS
35715: PUSH
35716: LD_VAR 0 8
35720: PUSH
35721: LD_INT 2
35723: ARRAY
35724: PUSH
35725: LD_VAR 0 3
35729: PLUS
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: EMPTY
35736: LIST
35737: ADD
35738: ST_TO_ADDR
35739: GO 35688
35741: POP
35742: POP
// result = temp_list2 ;
35743: LD_ADDR_VAR 0 7
35747: PUSH
35748: LD_VAR 0 10
35752: ST_TO_ADDR
// end ;
35753: LD_VAR 0 7
35757: RET
// export function EnemyInRange ( unit , dist ) ; begin
35758: LD_INT 0
35760: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35761: LD_ADDR_VAR 0 3
35765: PUSH
35766: LD_VAR 0 1
35770: PPUSH
35771: CALL_OW 255
35775: PPUSH
35776: LD_VAR 0 1
35780: PPUSH
35781: CALL_OW 250
35785: PPUSH
35786: LD_VAR 0 1
35790: PPUSH
35791: CALL_OW 251
35795: PPUSH
35796: LD_VAR 0 2
35800: PPUSH
35801: CALL 9131 0 4
35805: PUSH
35806: LD_INT 4
35808: ARRAY
35809: ST_TO_ADDR
// end ;
35810: LD_VAR 0 3
35814: RET
// export function PlayerSeeMe ( unit ) ; begin
35815: LD_INT 0
35817: PPUSH
// result := See ( your_side , unit ) ;
35818: LD_ADDR_VAR 0 2
35822: PUSH
35823: LD_OWVAR 2
35827: PPUSH
35828: LD_VAR 0 1
35832: PPUSH
35833: CALL_OW 292
35837: ST_TO_ADDR
// end ;
35838: LD_VAR 0 2
35842: RET
// export function ReverseDir ( unit ) ; begin
35843: LD_INT 0
35845: PPUSH
// if not unit then
35846: LD_VAR 0 1
35850: NOT
35851: IFFALSE 35855
// exit ;
35853: GO 35878
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35855: LD_ADDR_VAR 0 2
35859: PUSH
35860: LD_VAR 0 1
35864: PPUSH
35865: CALL_OW 254
35869: PUSH
35870: LD_INT 3
35872: PLUS
35873: PUSH
35874: LD_INT 6
35876: MOD
35877: ST_TO_ADDR
// end ;
35878: LD_VAR 0 2
35882: RET
// export function ReverseArray ( array ) ; var i ; begin
35883: LD_INT 0
35885: PPUSH
35886: PPUSH
// if not array then
35887: LD_VAR 0 1
35891: NOT
35892: IFFALSE 35896
// exit ;
35894: GO 35951
// result := [ ] ;
35896: LD_ADDR_VAR 0 2
35900: PUSH
35901: EMPTY
35902: ST_TO_ADDR
// for i := array downto 1 do
35903: LD_ADDR_VAR 0 3
35907: PUSH
35908: DOUBLE
35909: LD_VAR 0 1
35913: INC
35914: ST_TO_ADDR
35915: LD_INT 1
35917: PUSH
35918: FOR_DOWNTO
35919: IFFALSE 35949
// result := Join ( result , array [ i ] ) ;
35921: LD_ADDR_VAR 0 2
35925: PUSH
35926: LD_VAR 0 2
35930: PPUSH
35931: LD_VAR 0 1
35935: PUSH
35936: LD_VAR 0 3
35940: ARRAY
35941: PPUSH
35942: CALL 40596 0 2
35946: ST_TO_ADDR
35947: GO 35918
35949: POP
35950: POP
// end ;
35951: LD_VAR 0 2
35955: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
35956: LD_INT 0
35958: PPUSH
35959: PPUSH
35960: PPUSH
35961: PPUSH
35962: PPUSH
35963: PPUSH
// if not unit or not hexes then
35964: LD_VAR 0 1
35968: NOT
35969: PUSH
35970: LD_VAR 0 2
35974: NOT
35975: OR
35976: IFFALSE 35980
// exit ;
35978: GO 36103
// dist := 9999 ;
35980: LD_ADDR_VAR 0 5
35984: PUSH
35985: LD_INT 9999
35987: ST_TO_ADDR
// for i = 1 to hexes do
35988: LD_ADDR_VAR 0 4
35992: PUSH
35993: DOUBLE
35994: LD_INT 1
35996: DEC
35997: ST_TO_ADDR
35998: LD_VAR 0 2
36002: PUSH
36003: FOR_TO
36004: IFFALSE 36091
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36006: LD_ADDR_VAR 0 6
36010: PUSH
36011: LD_VAR 0 1
36015: PPUSH
36016: LD_VAR 0 2
36020: PUSH
36021: LD_VAR 0 4
36025: ARRAY
36026: PUSH
36027: LD_INT 1
36029: ARRAY
36030: PPUSH
36031: LD_VAR 0 2
36035: PUSH
36036: LD_VAR 0 4
36040: ARRAY
36041: PUSH
36042: LD_INT 2
36044: ARRAY
36045: PPUSH
36046: CALL_OW 297
36050: ST_TO_ADDR
// if tdist < dist then
36051: LD_VAR 0 6
36055: PUSH
36056: LD_VAR 0 5
36060: LESS
36061: IFFALSE 36089
// begin hex := hexes [ i ] ;
36063: LD_ADDR_VAR 0 8
36067: PUSH
36068: LD_VAR 0 2
36072: PUSH
36073: LD_VAR 0 4
36077: ARRAY
36078: ST_TO_ADDR
// dist := tdist ;
36079: LD_ADDR_VAR 0 5
36083: PUSH
36084: LD_VAR 0 6
36088: ST_TO_ADDR
// end ; end ;
36089: GO 36003
36091: POP
36092: POP
// result := hex ;
36093: LD_ADDR_VAR 0 3
36097: PUSH
36098: LD_VAR 0 8
36102: ST_TO_ADDR
// end ;
36103: LD_VAR 0 3
36107: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36108: LD_INT 0
36110: PPUSH
36111: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36112: LD_VAR 0 1
36116: NOT
36117: PUSH
36118: LD_VAR 0 1
36122: PUSH
36123: LD_INT 21
36125: PUSH
36126: LD_INT 2
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 23
36135: PUSH
36136: LD_INT 2
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: PPUSH
36147: CALL_OW 69
36151: IN
36152: NOT
36153: OR
36154: IFFALSE 36158
// exit ;
36156: GO 36205
// for i = 1 to 3 do
36158: LD_ADDR_VAR 0 3
36162: PUSH
36163: DOUBLE
36164: LD_INT 1
36166: DEC
36167: ST_TO_ADDR
36168: LD_INT 3
36170: PUSH
36171: FOR_TO
36172: IFFALSE 36203
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36174: LD_VAR 0 1
36178: PPUSH
36179: CALL_OW 250
36183: PPUSH
36184: LD_VAR 0 1
36188: PPUSH
36189: CALL_OW 251
36193: PPUSH
36194: LD_INT 1
36196: PPUSH
36197: CALL_OW 453
36201: GO 36171
36203: POP
36204: POP
// end ;
36205: LD_VAR 0 2
36209: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36210: LD_INT 0
36212: PPUSH
36213: PPUSH
36214: PPUSH
36215: PPUSH
36216: PPUSH
36217: PPUSH
// if not unit or not enemy_unit then
36218: LD_VAR 0 1
36222: NOT
36223: PUSH
36224: LD_VAR 0 2
36228: NOT
36229: OR
36230: IFFALSE 36234
// exit ;
36232: GO 36701
// if GetLives ( i ) < 250 then
36234: LD_VAR 0 4
36238: PPUSH
36239: CALL_OW 256
36243: PUSH
36244: LD_INT 250
36246: LESS
36247: IFFALSE 36260
// begin ComAutodestruct ( i ) ;
36249: LD_VAR 0 4
36253: PPUSH
36254: CALL 36108 0 1
// exit ;
36258: GO 36701
// end ; x := GetX ( enemy_unit ) ;
36260: LD_ADDR_VAR 0 7
36264: PUSH
36265: LD_VAR 0 2
36269: PPUSH
36270: CALL_OW 250
36274: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36275: LD_ADDR_VAR 0 8
36279: PUSH
36280: LD_VAR 0 2
36284: PPUSH
36285: CALL_OW 251
36289: ST_TO_ADDR
// if not x or not y then
36290: LD_VAR 0 7
36294: NOT
36295: PUSH
36296: LD_VAR 0 8
36300: NOT
36301: OR
36302: IFFALSE 36306
// exit ;
36304: GO 36701
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36306: LD_ADDR_VAR 0 6
36310: PUSH
36311: LD_VAR 0 7
36315: PPUSH
36316: LD_INT 0
36318: PPUSH
36319: LD_INT 4
36321: PPUSH
36322: CALL_OW 272
36326: PUSH
36327: LD_VAR 0 8
36331: PPUSH
36332: LD_INT 0
36334: PPUSH
36335: LD_INT 4
36337: PPUSH
36338: CALL_OW 273
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_VAR 0 7
36351: PPUSH
36352: LD_INT 1
36354: PPUSH
36355: LD_INT 4
36357: PPUSH
36358: CALL_OW 272
36362: PUSH
36363: LD_VAR 0 8
36367: PPUSH
36368: LD_INT 1
36370: PPUSH
36371: LD_INT 4
36373: PPUSH
36374: CALL_OW 273
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: PUSH
36383: LD_VAR 0 7
36387: PPUSH
36388: LD_INT 2
36390: PPUSH
36391: LD_INT 4
36393: PPUSH
36394: CALL_OW 272
36398: PUSH
36399: LD_VAR 0 8
36403: PPUSH
36404: LD_INT 2
36406: PPUSH
36407: LD_INT 4
36409: PPUSH
36410: CALL_OW 273
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_VAR 0 7
36423: PPUSH
36424: LD_INT 3
36426: PPUSH
36427: LD_INT 4
36429: PPUSH
36430: CALL_OW 272
36434: PUSH
36435: LD_VAR 0 8
36439: PPUSH
36440: LD_INT 3
36442: PPUSH
36443: LD_INT 4
36445: PPUSH
36446: CALL_OW 273
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: PUSH
36455: LD_VAR 0 7
36459: PPUSH
36460: LD_INT 4
36462: PPUSH
36463: LD_INT 4
36465: PPUSH
36466: CALL_OW 272
36470: PUSH
36471: LD_VAR 0 8
36475: PPUSH
36476: LD_INT 4
36478: PPUSH
36479: LD_INT 4
36481: PPUSH
36482: CALL_OW 273
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PUSH
36491: LD_VAR 0 7
36495: PPUSH
36496: LD_INT 5
36498: PPUSH
36499: LD_INT 4
36501: PPUSH
36502: CALL_OW 272
36506: PUSH
36507: LD_VAR 0 8
36511: PPUSH
36512: LD_INT 5
36514: PPUSH
36515: LD_INT 4
36517: PPUSH
36518: CALL_OW 273
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: ST_TO_ADDR
// for i = tmp downto 1 do
36535: LD_ADDR_VAR 0 4
36539: PUSH
36540: DOUBLE
36541: LD_VAR 0 6
36545: INC
36546: ST_TO_ADDR
36547: LD_INT 1
36549: PUSH
36550: FOR_DOWNTO
36551: IFFALSE 36652
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36553: LD_VAR 0 6
36557: PUSH
36558: LD_VAR 0 4
36562: ARRAY
36563: PUSH
36564: LD_INT 1
36566: ARRAY
36567: PPUSH
36568: LD_VAR 0 6
36572: PUSH
36573: LD_VAR 0 4
36577: ARRAY
36578: PUSH
36579: LD_INT 2
36581: ARRAY
36582: PPUSH
36583: CALL_OW 488
36587: NOT
36588: PUSH
36589: LD_VAR 0 6
36593: PUSH
36594: LD_VAR 0 4
36598: ARRAY
36599: PUSH
36600: LD_INT 1
36602: ARRAY
36603: PPUSH
36604: LD_VAR 0 6
36608: PUSH
36609: LD_VAR 0 4
36613: ARRAY
36614: PUSH
36615: LD_INT 2
36617: ARRAY
36618: PPUSH
36619: CALL_OW 428
36623: PUSH
36624: LD_INT 0
36626: NONEQUAL
36627: OR
36628: IFFALSE 36650
// tmp := Delete ( tmp , i ) ;
36630: LD_ADDR_VAR 0 6
36634: PUSH
36635: LD_VAR 0 6
36639: PPUSH
36640: LD_VAR 0 4
36644: PPUSH
36645: CALL_OW 3
36649: ST_TO_ADDR
36650: GO 36550
36652: POP
36653: POP
// j := GetClosestHex ( unit , tmp ) ;
36654: LD_ADDR_VAR 0 5
36658: PUSH
36659: LD_VAR 0 1
36663: PPUSH
36664: LD_VAR 0 6
36668: PPUSH
36669: CALL 35956 0 2
36673: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36674: LD_VAR 0 1
36678: PPUSH
36679: LD_VAR 0 5
36683: PUSH
36684: LD_INT 1
36686: ARRAY
36687: PPUSH
36688: LD_VAR 0 5
36692: PUSH
36693: LD_INT 2
36695: ARRAY
36696: PPUSH
36697: CALL_OW 111
// end ;
36701: LD_VAR 0 3
36705: RET
// export function PrepareApemanSoldier ( ) ; begin
36706: LD_INT 0
36708: PPUSH
// uc_nation := 0 ;
36709: LD_ADDR_OWVAR 21
36713: PUSH
36714: LD_INT 0
36716: ST_TO_ADDR
// hc_sex := sex_male ;
36717: LD_ADDR_OWVAR 27
36721: PUSH
36722: LD_INT 1
36724: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36725: LD_ADDR_OWVAR 28
36729: PUSH
36730: LD_INT 15
36732: ST_TO_ADDR
// hc_gallery :=  ;
36733: LD_ADDR_OWVAR 33
36737: PUSH
36738: LD_STRING 
36740: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36741: LD_ADDR_OWVAR 31
36745: PUSH
36746: LD_INT 0
36748: PPUSH
36749: LD_INT 3
36751: PPUSH
36752: CALL_OW 12
36756: PUSH
36757: LD_INT 0
36759: PPUSH
36760: LD_INT 3
36762: PPUSH
36763: CALL_OW 12
36767: PUSH
36768: LD_INT 0
36770: PUSH
36771: LD_INT 0
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: ST_TO_ADDR
// end ;
36780: LD_VAR 0 1
36784: RET
// export function PrepareApemanEngineer ( ) ; begin
36785: LD_INT 0
36787: PPUSH
// uc_nation := 0 ;
36788: LD_ADDR_OWVAR 21
36792: PUSH
36793: LD_INT 0
36795: ST_TO_ADDR
// hc_sex := sex_male ;
36796: LD_ADDR_OWVAR 27
36800: PUSH
36801: LD_INT 1
36803: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36804: LD_ADDR_OWVAR 28
36808: PUSH
36809: LD_INT 16
36811: ST_TO_ADDR
// hc_gallery :=  ;
36812: LD_ADDR_OWVAR 33
36816: PUSH
36817: LD_STRING 
36819: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36820: LD_ADDR_OWVAR 31
36824: PUSH
36825: LD_INT 0
36827: PPUSH
36828: LD_INT 3
36830: PPUSH
36831: CALL_OW 12
36835: PUSH
36836: LD_INT 0
36838: PPUSH
36839: LD_INT 3
36841: PPUSH
36842: CALL_OW 12
36846: PUSH
36847: LD_INT 0
36849: PUSH
36850: LD_INT 0
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: LIST
36857: LIST
36858: ST_TO_ADDR
// end ;
36859: LD_VAR 0 1
36863: RET
// export function PrepareApeman ( agressivity ) ; begin
36864: LD_INT 0
36866: PPUSH
// uc_side := 0 ;
36867: LD_ADDR_OWVAR 20
36871: PUSH
36872: LD_INT 0
36874: ST_TO_ADDR
// uc_nation := 0 ;
36875: LD_ADDR_OWVAR 21
36879: PUSH
36880: LD_INT 0
36882: ST_TO_ADDR
// hc_sex := sex_male ;
36883: LD_ADDR_OWVAR 27
36887: PUSH
36888: LD_INT 1
36890: ST_TO_ADDR
// hc_class := class_apeman ;
36891: LD_ADDR_OWVAR 28
36895: PUSH
36896: LD_INT 12
36898: ST_TO_ADDR
// hc_gallery :=  ;
36899: LD_ADDR_OWVAR 33
36903: PUSH
36904: LD_STRING 
36906: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36907: LD_ADDR_OWVAR 35
36911: PUSH
36912: LD_VAR 0 1
36916: NEG
36917: PPUSH
36918: LD_VAR 0 1
36922: PPUSH
36923: CALL_OW 12
36927: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36928: LD_ADDR_OWVAR 31
36932: PUSH
36933: LD_INT 0
36935: PPUSH
36936: LD_INT 3
36938: PPUSH
36939: CALL_OW 12
36943: PUSH
36944: LD_INT 0
36946: PPUSH
36947: LD_INT 3
36949: PPUSH
36950: CALL_OW 12
36954: PUSH
36955: LD_INT 0
36957: PUSH
36958: LD_INT 0
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: ST_TO_ADDR
// end ;
36967: LD_VAR 0 2
36971: RET
// export function PrepareTiger ( agressivity ) ; begin
36972: LD_INT 0
36974: PPUSH
// uc_side := 0 ;
36975: LD_ADDR_OWVAR 20
36979: PUSH
36980: LD_INT 0
36982: ST_TO_ADDR
// uc_nation := 0 ;
36983: LD_ADDR_OWVAR 21
36987: PUSH
36988: LD_INT 0
36990: ST_TO_ADDR
// hc_class := class_tiger ;
36991: LD_ADDR_OWVAR 28
36995: PUSH
36996: LD_INT 14
36998: ST_TO_ADDR
// hc_gallery :=  ;
36999: LD_ADDR_OWVAR 33
37003: PUSH
37004: LD_STRING 
37006: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37007: LD_ADDR_OWVAR 35
37011: PUSH
37012: LD_VAR 0 1
37016: NEG
37017: PPUSH
37018: LD_VAR 0 1
37022: PPUSH
37023: CALL_OW 12
37027: ST_TO_ADDR
// end ;
37028: LD_VAR 0 2
37032: RET
// export function PrepareEnchidna ( ) ; begin
37033: LD_INT 0
37035: PPUSH
// uc_side := 0 ;
37036: LD_ADDR_OWVAR 20
37040: PUSH
37041: LD_INT 0
37043: ST_TO_ADDR
// uc_nation := 0 ;
37044: LD_ADDR_OWVAR 21
37048: PUSH
37049: LD_INT 0
37051: ST_TO_ADDR
// hc_class := class_baggie ;
37052: LD_ADDR_OWVAR 28
37056: PUSH
37057: LD_INT 13
37059: ST_TO_ADDR
// hc_gallery :=  ;
37060: LD_ADDR_OWVAR 33
37064: PUSH
37065: LD_STRING 
37067: ST_TO_ADDR
// end ;
37068: LD_VAR 0 1
37072: RET
// export function PrepareFrog ( ) ; begin
37073: LD_INT 0
37075: PPUSH
// uc_side := 0 ;
37076: LD_ADDR_OWVAR 20
37080: PUSH
37081: LD_INT 0
37083: ST_TO_ADDR
// uc_nation := 0 ;
37084: LD_ADDR_OWVAR 21
37088: PUSH
37089: LD_INT 0
37091: ST_TO_ADDR
// hc_class := class_frog ;
37092: LD_ADDR_OWVAR 28
37096: PUSH
37097: LD_INT 19
37099: ST_TO_ADDR
// hc_gallery :=  ;
37100: LD_ADDR_OWVAR 33
37104: PUSH
37105: LD_STRING 
37107: ST_TO_ADDR
// end ;
37108: LD_VAR 0 1
37112: RET
// export function PrepareFish ( ) ; begin
37113: LD_INT 0
37115: PPUSH
// uc_side := 0 ;
37116: LD_ADDR_OWVAR 20
37120: PUSH
37121: LD_INT 0
37123: ST_TO_ADDR
// uc_nation := 0 ;
37124: LD_ADDR_OWVAR 21
37128: PUSH
37129: LD_INT 0
37131: ST_TO_ADDR
// hc_class := class_fish ;
37132: LD_ADDR_OWVAR 28
37136: PUSH
37137: LD_INT 20
37139: ST_TO_ADDR
// hc_gallery :=  ;
37140: LD_ADDR_OWVAR 33
37144: PUSH
37145: LD_STRING 
37147: ST_TO_ADDR
// end ;
37148: LD_VAR 0 1
37152: RET
// export function PrepareBird ( ) ; begin
37153: LD_INT 0
37155: PPUSH
// uc_side := 0 ;
37156: LD_ADDR_OWVAR 20
37160: PUSH
37161: LD_INT 0
37163: ST_TO_ADDR
// uc_nation := 0 ;
37164: LD_ADDR_OWVAR 21
37168: PUSH
37169: LD_INT 0
37171: ST_TO_ADDR
// hc_class := class_phororhacos ;
37172: LD_ADDR_OWVAR 28
37176: PUSH
37177: LD_INT 18
37179: ST_TO_ADDR
// hc_gallery :=  ;
37180: LD_ADDR_OWVAR 33
37184: PUSH
37185: LD_STRING 
37187: ST_TO_ADDR
// end ;
37188: LD_VAR 0 1
37192: RET
// export function PrepareHorse ( ) ; begin
37193: LD_INT 0
37195: PPUSH
// uc_side := 0 ;
37196: LD_ADDR_OWVAR 20
37200: PUSH
37201: LD_INT 0
37203: ST_TO_ADDR
// uc_nation := 0 ;
37204: LD_ADDR_OWVAR 21
37208: PUSH
37209: LD_INT 0
37211: ST_TO_ADDR
// hc_class := class_horse ;
37212: LD_ADDR_OWVAR 28
37216: PUSH
37217: LD_INT 21
37219: ST_TO_ADDR
// hc_gallery :=  ;
37220: LD_ADDR_OWVAR 33
37224: PUSH
37225: LD_STRING 
37227: ST_TO_ADDR
// end ;
37228: LD_VAR 0 1
37232: RET
// export function PrepareMastodont ( ) ; begin
37233: LD_INT 0
37235: PPUSH
// uc_side := 0 ;
37236: LD_ADDR_OWVAR 20
37240: PUSH
37241: LD_INT 0
37243: ST_TO_ADDR
// uc_nation := 0 ;
37244: LD_ADDR_OWVAR 21
37248: PUSH
37249: LD_INT 0
37251: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37252: LD_ADDR_OWVAR 37
37256: PUSH
37257: LD_INT 31
37259: ST_TO_ADDR
// vc_control := control_rider ;
37260: LD_ADDR_OWVAR 38
37264: PUSH
37265: LD_INT 4
37267: ST_TO_ADDR
// end ;
37268: LD_VAR 0 1
37272: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37273: LD_INT 0
37275: PPUSH
37276: PPUSH
37277: PPUSH
// uc_side = 0 ;
37278: LD_ADDR_OWVAR 20
37282: PUSH
37283: LD_INT 0
37285: ST_TO_ADDR
// uc_nation = 0 ;
37286: LD_ADDR_OWVAR 21
37290: PUSH
37291: LD_INT 0
37293: ST_TO_ADDR
// InitHc_All ( ) ;
37294: CALL_OW 584
// InitVc ;
37298: CALL_OW 20
// if mastodonts then
37302: LD_VAR 0 6
37306: IFFALSE 37373
// for i = 1 to mastodonts do
37308: LD_ADDR_VAR 0 11
37312: PUSH
37313: DOUBLE
37314: LD_INT 1
37316: DEC
37317: ST_TO_ADDR
37318: LD_VAR 0 6
37322: PUSH
37323: FOR_TO
37324: IFFALSE 37371
// begin vc_chassis := 31 ;
37326: LD_ADDR_OWVAR 37
37330: PUSH
37331: LD_INT 31
37333: ST_TO_ADDR
// vc_control := control_rider ;
37334: LD_ADDR_OWVAR 38
37338: PUSH
37339: LD_INT 4
37341: ST_TO_ADDR
// animal := CreateVehicle ;
37342: LD_ADDR_VAR 0 12
37346: PUSH
37347: CALL_OW 45
37351: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37352: LD_VAR 0 12
37356: PPUSH
37357: LD_VAR 0 8
37361: PPUSH
37362: LD_INT 0
37364: PPUSH
37365: CALL 39501 0 3
// end ;
37369: GO 37323
37371: POP
37372: POP
// if horses then
37373: LD_VAR 0 5
37377: IFFALSE 37444
// for i = 1 to horses do
37379: LD_ADDR_VAR 0 11
37383: PUSH
37384: DOUBLE
37385: LD_INT 1
37387: DEC
37388: ST_TO_ADDR
37389: LD_VAR 0 5
37393: PUSH
37394: FOR_TO
37395: IFFALSE 37442
// begin hc_class := 21 ;
37397: LD_ADDR_OWVAR 28
37401: PUSH
37402: LD_INT 21
37404: ST_TO_ADDR
// hc_gallery :=  ;
37405: LD_ADDR_OWVAR 33
37409: PUSH
37410: LD_STRING 
37412: ST_TO_ADDR
// animal := CreateHuman ;
37413: LD_ADDR_VAR 0 12
37417: PUSH
37418: CALL_OW 44
37422: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37423: LD_VAR 0 12
37427: PPUSH
37428: LD_VAR 0 8
37432: PPUSH
37433: LD_INT 0
37435: PPUSH
37436: CALL 39501 0 3
// end ;
37440: GO 37394
37442: POP
37443: POP
// if birds then
37444: LD_VAR 0 1
37448: IFFALSE 37515
// for i = 1 to birds do
37450: LD_ADDR_VAR 0 11
37454: PUSH
37455: DOUBLE
37456: LD_INT 1
37458: DEC
37459: ST_TO_ADDR
37460: LD_VAR 0 1
37464: PUSH
37465: FOR_TO
37466: IFFALSE 37513
// begin hc_class := 18 ;
37468: LD_ADDR_OWVAR 28
37472: PUSH
37473: LD_INT 18
37475: ST_TO_ADDR
// hc_gallery =  ;
37476: LD_ADDR_OWVAR 33
37480: PUSH
37481: LD_STRING 
37483: ST_TO_ADDR
// animal := CreateHuman ;
37484: LD_ADDR_VAR 0 12
37488: PUSH
37489: CALL_OW 44
37493: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37494: LD_VAR 0 12
37498: PPUSH
37499: LD_VAR 0 8
37503: PPUSH
37504: LD_INT 0
37506: PPUSH
37507: CALL 39501 0 3
// end ;
37511: GO 37465
37513: POP
37514: POP
// if tigers then
37515: LD_VAR 0 2
37519: IFFALSE 37603
// for i = 1 to tigers do
37521: LD_ADDR_VAR 0 11
37525: PUSH
37526: DOUBLE
37527: LD_INT 1
37529: DEC
37530: ST_TO_ADDR
37531: LD_VAR 0 2
37535: PUSH
37536: FOR_TO
37537: IFFALSE 37601
// begin hc_class = class_tiger ;
37539: LD_ADDR_OWVAR 28
37543: PUSH
37544: LD_INT 14
37546: ST_TO_ADDR
// hc_gallery =  ;
37547: LD_ADDR_OWVAR 33
37551: PUSH
37552: LD_STRING 
37554: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37555: LD_ADDR_OWVAR 35
37559: PUSH
37560: LD_INT 7
37562: NEG
37563: PPUSH
37564: LD_INT 7
37566: PPUSH
37567: CALL_OW 12
37571: ST_TO_ADDR
// animal := CreateHuman ;
37572: LD_ADDR_VAR 0 12
37576: PUSH
37577: CALL_OW 44
37581: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37582: LD_VAR 0 12
37586: PPUSH
37587: LD_VAR 0 8
37591: PPUSH
37592: LD_INT 0
37594: PPUSH
37595: CALL 39501 0 3
// end ;
37599: GO 37536
37601: POP
37602: POP
// if apemans then
37603: LD_VAR 0 3
37607: IFFALSE 37730
// for i = 1 to apemans do
37609: LD_ADDR_VAR 0 11
37613: PUSH
37614: DOUBLE
37615: LD_INT 1
37617: DEC
37618: ST_TO_ADDR
37619: LD_VAR 0 3
37623: PUSH
37624: FOR_TO
37625: IFFALSE 37728
// begin hc_class = class_apeman ;
37627: LD_ADDR_OWVAR 28
37631: PUSH
37632: LD_INT 12
37634: ST_TO_ADDR
// hc_gallery =  ;
37635: LD_ADDR_OWVAR 33
37639: PUSH
37640: LD_STRING 
37642: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37643: LD_ADDR_OWVAR 35
37647: PUSH
37648: LD_INT 2
37650: NEG
37651: PPUSH
37652: LD_INT 2
37654: PPUSH
37655: CALL_OW 12
37659: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37660: LD_ADDR_OWVAR 31
37664: PUSH
37665: LD_INT 1
37667: PPUSH
37668: LD_INT 3
37670: PPUSH
37671: CALL_OW 12
37675: PUSH
37676: LD_INT 1
37678: PPUSH
37679: LD_INT 3
37681: PPUSH
37682: CALL_OW 12
37686: PUSH
37687: LD_INT 0
37689: PUSH
37690: LD_INT 0
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: ST_TO_ADDR
// animal := CreateHuman ;
37699: LD_ADDR_VAR 0 12
37703: PUSH
37704: CALL_OW 44
37708: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37709: LD_VAR 0 12
37713: PPUSH
37714: LD_VAR 0 8
37718: PPUSH
37719: LD_INT 0
37721: PPUSH
37722: CALL 39501 0 3
// end ;
37726: GO 37624
37728: POP
37729: POP
// if enchidnas then
37730: LD_VAR 0 4
37734: IFFALSE 37801
// for i = 1 to enchidnas do
37736: LD_ADDR_VAR 0 11
37740: PUSH
37741: DOUBLE
37742: LD_INT 1
37744: DEC
37745: ST_TO_ADDR
37746: LD_VAR 0 4
37750: PUSH
37751: FOR_TO
37752: IFFALSE 37799
// begin hc_class = 13 ;
37754: LD_ADDR_OWVAR 28
37758: PUSH
37759: LD_INT 13
37761: ST_TO_ADDR
// hc_gallery =  ;
37762: LD_ADDR_OWVAR 33
37766: PUSH
37767: LD_STRING 
37769: ST_TO_ADDR
// animal := CreateHuman ;
37770: LD_ADDR_VAR 0 12
37774: PUSH
37775: CALL_OW 44
37779: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37780: LD_VAR 0 12
37784: PPUSH
37785: LD_VAR 0 8
37789: PPUSH
37790: LD_INT 0
37792: PPUSH
37793: CALL 39501 0 3
// end ;
37797: GO 37751
37799: POP
37800: POP
// if fishes then
37801: LD_VAR 0 7
37805: IFFALSE 37872
// for i = 1 to fishes do
37807: LD_ADDR_VAR 0 11
37811: PUSH
37812: DOUBLE
37813: LD_INT 1
37815: DEC
37816: ST_TO_ADDR
37817: LD_VAR 0 7
37821: PUSH
37822: FOR_TO
37823: IFFALSE 37870
// begin hc_class = 20 ;
37825: LD_ADDR_OWVAR 28
37829: PUSH
37830: LD_INT 20
37832: ST_TO_ADDR
// hc_gallery =  ;
37833: LD_ADDR_OWVAR 33
37837: PUSH
37838: LD_STRING 
37840: ST_TO_ADDR
// animal := CreateHuman ;
37841: LD_ADDR_VAR 0 12
37845: PUSH
37846: CALL_OW 44
37850: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37851: LD_VAR 0 12
37855: PPUSH
37856: LD_VAR 0 9
37860: PPUSH
37861: LD_INT 0
37863: PPUSH
37864: CALL 39501 0 3
// end ;
37868: GO 37822
37870: POP
37871: POP
// end ;
37872: LD_VAR 0 10
37876: RET
// export function WantHeal ( sci , unit ) ; begin
37877: LD_INT 0
37879: PPUSH
// if GetTaskList ( sci ) > 0 then
37880: LD_VAR 0 1
37884: PPUSH
37885: CALL_OW 437
37889: PUSH
37890: LD_INT 0
37892: GREATER
37893: IFFALSE 37963
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37895: LD_VAR 0 1
37899: PPUSH
37900: CALL_OW 437
37904: PUSH
37905: LD_INT 1
37907: ARRAY
37908: PUSH
37909: LD_INT 1
37911: ARRAY
37912: PUSH
37913: LD_STRING l
37915: EQUAL
37916: PUSH
37917: LD_VAR 0 1
37921: PPUSH
37922: CALL_OW 437
37926: PUSH
37927: LD_INT 1
37929: ARRAY
37930: PUSH
37931: LD_INT 4
37933: ARRAY
37934: PUSH
37935: LD_VAR 0 2
37939: EQUAL
37940: AND
37941: IFFALSE 37953
// result := true else
37943: LD_ADDR_VAR 0 3
37947: PUSH
37948: LD_INT 1
37950: ST_TO_ADDR
37951: GO 37961
// result := false ;
37953: LD_ADDR_VAR 0 3
37957: PUSH
37958: LD_INT 0
37960: ST_TO_ADDR
// end else
37961: GO 37971
// result := false ;
37963: LD_ADDR_VAR 0 3
37967: PUSH
37968: LD_INT 0
37970: ST_TO_ADDR
// end ;
37971: LD_VAR 0 3
37975: RET
// export function HealTarget ( sci ) ; begin
37976: LD_INT 0
37978: PPUSH
// if not sci then
37979: LD_VAR 0 1
37983: NOT
37984: IFFALSE 37988
// exit ;
37986: GO 38053
// result := 0 ;
37988: LD_ADDR_VAR 0 2
37992: PUSH
37993: LD_INT 0
37995: ST_TO_ADDR
// if GetTaskList ( sci ) then
37996: LD_VAR 0 1
38000: PPUSH
38001: CALL_OW 437
38005: IFFALSE 38053
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38007: LD_VAR 0 1
38011: PPUSH
38012: CALL_OW 437
38016: PUSH
38017: LD_INT 1
38019: ARRAY
38020: PUSH
38021: LD_INT 1
38023: ARRAY
38024: PUSH
38025: LD_STRING l
38027: EQUAL
38028: IFFALSE 38053
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38030: LD_ADDR_VAR 0 2
38034: PUSH
38035: LD_VAR 0 1
38039: PPUSH
38040: CALL_OW 437
38044: PUSH
38045: LD_INT 1
38047: ARRAY
38048: PUSH
38049: LD_INT 4
38051: ARRAY
38052: ST_TO_ADDR
// end ;
38053: LD_VAR 0 2
38057: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38058: LD_INT 0
38060: PPUSH
38061: PPUSH
38062: PPUSH
38063: PPUSH
// if not base_units then
38064: LD_VAR 0 1
38068: NOT
38069: IFFALSE 38073
// exit ;
38071: GO 38160
// result := false ;
38073: LD_ADDR_VAR 0 2
38077: PUSH
38078: LD_INT 0
38080: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38081: LD_ADDR_VAR 0 5
38085: PUSH
38086: LD_VAR 0 1
38090: PPUSH
38091: LD_INT 21
38093: PUSH
38094: LD_INT 3
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PPUSH
38101: CALL_OW 72
38105: ST_TO_ADDR
// if not tmp then
38106: LD_VAR 0 5
38110: NOT
38111: IFFALSE 38115
// exit ;
38113: GO 38160
// for i in tmp do
38115: LD_ADDR_VAR 0 3
38119: PUSH
38120: LD_VAR 0 5
38124: PUSH
38125: FOR_IN
38126: IFFALSE 38158
// begin result := EnemyInRange ( i , 22 ) ;
38128: LD_ADDR_VAR 0 2
38132: PUSH
38133: LD_VAR 0 3
38137: PPUSH
38138: LD_INT 22
38140: PPUSH
38141: CALL 35758 0 2
38145: ST_TO_ADDR
// if result then
38146: LD_VAR 0 2
38150: IFFALSE 38156
// exit ;
38152: POP
38153: POP
38154: GO 38160
// end ;
38156: GO 38125
38158: POP
38159: POP
// end ;
38160: LD_VAR 0 2
38164: RET
// export function FilterByTag ( units , tag ) ; begin
38165: LD_INT 0
38167: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38168: LD_ADDR_VAR 0 3
38172: PUSH
38173: LD_VAR 0 1
38177: PPUSH
38178: LD_INT 120
38180: PUSH
38181: LD_VAR 0 2
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PPUSH
38190: CALL_OW 72
38194: ST_TO_ADDR
// end ;
38195: LD_VAR 0 3
38199: RET
// export function IsDriver ( un ) ; begin
38200: LD_INT 0
38202: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38203: LD_ADDR_VAR 0 2
38207: PUSH
38208: LD_VAR 0 1
38212: PUSH
38213: LD_INT 55
38215: PUSH
38216: EMPTY
38217: LIST
38218: PPUSH
38219: CALL_OW 69
38223: IN
38224: ST_TO_ADDR
// end ;
38225: LD_VAR 0 2
38229: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38230: LD_INT 0
38232: PPUSH
38233: PPUSH
// list := [ ] ;
38234: LD_ADDR_VAR 0 5
38238: PUSH
38239: EMPTY
38240: ST_TO_ADDR
// case d of 0 :
38241: LD_VAR 0 3
38245: PUSH
38246: LD_INT 0
38248: DOUBLE
38249: EQUAL
38250: IFTRUE 38254
38252: GO 38387
38254: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38255: LD_ADDR_VAR 0 5
38259: PUSH
38260: LD_VAR 0 1
38264: PUSH
38265: LD_INT 4
38267: MINUS
38268: PUSH
38269: LD_VAR 0 2
38273: PUSH
38274: LD_INT 4
38276: MINUS
38277: PUSH
38278: LD_INT 2
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: LIST
38285: PUSH
38286: LD_VAR 0 1
38290: PUSH
38291: LD_INT 3
38293: MINUS
38294: PUSH
38295: LD_VAR 0 2
38299: PUSH
38300: LD_INT 1
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: LIST
38307: PUSH
38308: LD_VAR 0 1
38312: PUSH
38313: LD_INT 4
38315: PLUS
38316: PUSH
38317: LD_VAR 0 2
38321: PUSH
38322: LD_INT 4
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: LIST
38329: PUSH
38330: LD_VAR 0 1
38334: PUSH
38335: LD_INT 3
38337: PLUS
38338: PUSH
38339: LD_VAR 0 2
38343: PUSH
38344: LD_INT 3
38346: PLUS
38347: PUSH
38348: LD_INT 5
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: LIST
38355: PUSH
38356: LD_VAR 0 1
38360: PUSH
38361: LD_VAR 0 2
38365: PUSH
38366: LD_INT 4
38368: PLUS
38369: PUSH
38370: LD_INT 0
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: LIST
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: ST_TO_ADDR
// end ; 1 :
38385: GO 39085
38387: LD_INT 1
38389: DOUBLE
38390: EQUAL
38391: IFTRUE 38395
38393: GO 38528
38395: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38396: LD_ADDR_VAR 0 5
38400: PUSH
38401: LD_VAR 0 1
38405: PUSH
38406: LD_VAR 0 2
38410: PUSH
38411: LD_INT 4
38413: MINUS
38414: PUSH
38415: LD_INT 3
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: LIST
38422: PUSH
38423: LD_VAR 0 1
38427: PUSH
38428: LD_INT 3
38430: MINUS
38431: PUSH
38432: LD_VAR 0 2
38436: PUSH
38437: LD_INT 3
38439: MINUS
38440: PUSH
38441: LD_INT 2
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: LIST
38448: PUSH
38449: LD_VAR 0 1
38453: PUSH
38454: LD_INT 4
38456: MINUS
38457: PUSH
38458: LD_VAR 0 2
38462: PUSH
38463: LD_INT 1
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: LIST
38470: PUSH
38471: LD_VAR 0 1
38475: PUSH
38476: LD_VAR 0 2
38480: PUSH
38481: LD_INT 3
38483: PLUS
38484: PUSH
38485: LD_INT 0
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: LIST
38492: PUSH
38493: LD_VAR 0 1
38497: PUSH
38498: LD_INT 4
38500: PLUS
38501: PUSH
38502: LD_VAR 0 2
38506: PUSH
38507: LD_INT 4
38509: PLUS
38510: PUSH
38511: LD_INT 5
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: LIST
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: LIST
38523: LIST
38524: LIST
38525: ST_TO_ADDR
// end ; 2 :
38526: GO 39085
38528: LD_INT 2
38530: DOUBLE
38531: EQUAL
38532: IFTRUE 38536
38534: GO 38665
38536: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38537: LD_ADDR_VAR 0 5
38541: PUSH
38542: LD_VAR 0 1
38546: PUSH
38547: LD_VAR 0 2
38551: PUSH
38552: LD_INT 3
38554: MINUS
38555: PUSH
38556: LD_INT 3
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: LIST
38563: PUSH
38564: LD_VAR 0 1
38568: PUSH
38569: LD_INT 4
38571: PLUS
38572: PUSH
38573: LD_VAR 0 2
38577: PUSH
38578: LD_INT 4
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: LIST
38585: PUSH
38586: LD_VAR 0 1
38590: PUSH
38591: LD_VAR 0 2
38595: PUSH
38596: LD_INT 4
38598: PLUS
38599: PUSH
38600: LD_INT 0
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: LIST
38607: PUSH
38608: LD_VAR 0 1
38612: PUSH
38613: LD_INT 3
38615: MINUS
38616: PUSH
38617: LD_VAR 0 2
38621: PUSH
38622: LD_INT 1
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: LIST
38629: PUSH
38630: LD_VAR 0 1
38634: PUSH
38635: LD_INT 4
38637: MINUS
38638: PUSH
38639: LD_VAR 0 2
38643: PUSH
38644: LD_INT 4
38646: MINUS
38647: PUSH
38648: LD_INT 2
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: LIST
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: ST_TO_ADDR
// end ; 3 :
38663: GO 39085
38665: LD_INT 3
38667: DOUBLE
38668: EQUAL
38669: IFTRUE 38673
38671: GO 38806
38673: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38674: LD_ADDR_VAR 0 5
38678: PUSH
38679: LD_VAR 0 1
38683: PUSH
38684: LD_INT 3
38686: PLUS
38687: PUSH
38688: LD_VAR 0 2
38692: PUSH
38693: LD_INT 4
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: LIST
38700: PUSH
38701: LD_VAR 0 1
38705: PUSH
38706: LD_INT 4
38708: PLUS
38709: PUSH
38710: LD_VAR 0 2
38714: PUSH
38715: LD_INT 4
38717: PLUS
38718: PUSH
38719: LD_INT 5
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: LIST
38726: PUSH
38727: LD_VAR 0 1
38731: PUSH
38732: LD_INT 4
38734: MINUS
38735: PUSH
38736: LD_VAR 0 2
38740: PUSH
38741: LD_INT 1
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: LIST
38748: PUSH
38749: LD_VAR 0 1
38753: PUSH
38754: LD_VAR 0 2
38758: PUSH
38759: LD_INT 4
38761: MINUS
38762: PUSH
38763: LD_INT 3
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: LIST
38770: PUSH
38771: LD_VAR 0 1
38775: PUSH
38776: LD_INT 3
38778: MINUS
38779: PUSH
38780: LD_VAR 0 2
38784: PUSH
38785: LD_INT 3
38787: MINUS
38788: PUSH
38789: LD_INT 2
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: LIST
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: LIST
38801: LIST
38802: LIST
38803: ST_TO_ADDR
// end ; 4 :
38804: GO 39085
38806: LD_INT 4
38808: DOUBLE
38809: EQUAL
38810: IFTRUE 38814
38812: GO 38947
38814: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38815: LD_ADDR_VAR 0 5
38819: PUSH
38820: LD_VAR 0 1
38824: PUSH
38825: LD_VAR 0 2
38829: PUSH
38830: LD_INT 4
38832: PLUS
38833: PUSH
38834: LD_INT 0
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: LIST
38841: PUSH
38842: LD_VAR 0 1
38846: PUSH
38847: LD_INT 3
38849: PLUS
38850: PUSH
38851: LD_VAR 0 2
38855: PUSH
38856: LD_INT 3
38858: PLUS
38859: PUSH
38860: LD_INT 5
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: LIST
38867: PUSH
38868: LD_VAR 0 1
38872: PUSH
38873: LD_INT 4
38875: PLUS
38876: PUSH
38877: LD_VAR 0 2
38881: PUSH
38882: LD_INT 4
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: LIST
38889: PUSH
38890: LD_VAR 0 1
38894: PUSH
38895: LD_VAR 0 2
38899: PUSH
38900: LD_INT 3
38902: MINUS
38903: PUSH
38904: LD_INT 3
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: LIST
38911: PUSH
38912: LD_VAR 0 1
38916: PUSH
38917: LD_INT 4
38919: MINUS
38920: PUSH
38921: LD_VAR 0 2
38925: PUSH
38926: LD_INT 4
38928: MINUS
38929: PUSH
38930: LD_INT 2
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: LIST
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: ST_TO_ADDR
// end ; 5 :
38945: GO 39085
38947: LD_INT 5
38949: DOUBLE
38950: EQUAL
38951: IFTRUE 38955
38953: GO 39084
38955: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38956: LD_ADDR_VAR 0 5
38960: PUSH
38961: LD_VAR 0 1
38965: PUSH
38966: LD_INT 4
38968: MINUS
38969: PUSH
38970: LD_VAR 0 2
38974: PUSH
38975: LD_INT 1
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: LIST
38982: PUSH
38983: LD_VAR 0 1
38987: PUSH
38988: LD_VAR 0 2
38992: PUSH
38993: LD_INT 4
38995: MINUS
38996: PUSH
38997: LD_INT 3
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: LIST
39004: PUSH
39005: LD_VAR 0 1
39009: PUSH
39010: LD_INT 4
39012: PLUS
39013: PUSH
39014: LD_VAR 0 2
39018: PUSH
39019: LD_INT 4
39021: PLUS
39022: PUSH
39023: LD_INT 5
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: LIST
39030: PUSH
39031: LD_VAR 0 1
39035: PUSH
39036: LD_INT 3
39038: PLUS
39039: PUSH
39040: LD_VAR 0 2
39044: PUSH
39045: LD_INT 4
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: LIST
39052: PUSH
39053: LD_VAR 0 1
39057: PUSH
39058: LD_VAR 0 2
39062: PUSH
39063: LD_INT 3
39065: PLUS
39066: PUSH
39067: LD_INT 0
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: LIST
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: ST_TO_ADDR
// end ; end ;
39082: GO 39085
39084: POP
// result := list ;
39085: LD_ADDR_VAR 0 4
39089: PUSH
39090: LD_VAR 0 5
39094: ST_TO_ADDR
// end ;
39095: LD_VAR 0 4
39099: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39100: LD_INT 0
39102: PPUSH
39103: PPUSH
39104: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39105: LD_VAR 0 1
39109: NOT
39110: PUSH
39111: LD_VAR 0 2
39115: PUSH
39116: LD_INT 1
39118: PUSH
39119: LD_INT 2
39121: PUSH
39122: LD_INT 3
39124: PUSH
39125: LD_INT 4
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: IN
39134: NOT
39135: OR
39136: IFFALSE 39140
// exit ;
39138: GO 39223
// tmp := [ ] ;
39140: LD_ADDR_VAR 0 5
39144: PUSH
39145: EMPTY
39146: ST_TO_ADDR
// for i in units do
39147: LD_ADDR_VAR 0 4
39151: PUSH
39152: LD_VAR 0 1
39156: PUSH
39157: FOR_IN
39158: IFFALSE 39192
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39160: LD_ADDR_VAR 0 5
39164: PUSH
39165: LD_VAR 0 5
39169: PPUSH
39170: LD_VAR 0 4
39174: PPUSH
39175: LD_VAR 0 2
39179: PPUSH
39180: CALL_OW 259
39184: PPUSH
39185: CALL 40596 0 2
39189: ST_TO_ADDR
39190: GO 39157
39192: POP
39193: POP
// if not tmp then
39194: LD_VAR 0 5
39198: NOT
39199: IFFALSE 39203
// exit ;
39201: GO 39223
// result := SortListByListDesc ( units , tmp ) ;
39203: LD_ADDR_VAR 0 3
39207: PUSH
39208: LD_VAR 0 1
39212: PPUSH
39213: LD_VAR 0 5
39217: PPUSH
39218: CALL_OW 77
39222: ST_TO_ADDR
// end ;
39223: LD_VAR 0 3
39227: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39228: LD_INT 0
39230: PPUSH
39231: PPUSH
39232: PPUSH
// result := false ;
39233: LD_ADDR_VAR 0 3
39237: PUSH
39238: LD_INT 0
39240: ST_TO_ADDR
// if not building then
39241: LD_VAR 0 2
39245: NOT
39246: IFFALSE 39250
// exit ;
39248: GO 39388
// x := GetX ( building ) ;
39250: LD_ADDR_VAR 0 4
39254: PUSH
39255: LD_VAR 0 2
39259: PPUSH
39260: CALL_OW 250
39264: ST_TO_ADDR
// y := GetY ( building ) ;
39265: LD_ADDR_VAR 0 5
39269: PUSH
39270: LD_VAR 0 2
39274: PPUSH
39275: CALL_OW 251
39279: ST_TO_ADDR
// if not x or not y then
39280: LD_VAR 0 4
39284: NOT
39285: PUSH
39286: LD_VAR 0 5
39290: NOT
39291: OR
39292: IFFALSE 39296
// exit ;
39294: GO 39388
// if GetTaskList ( unit ) then
39296: LD_VAR 0 1
39300: PPUSH
39301: CALL_OW 437
39305: IFFALSE 39388
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39307: LD_STRING e
39309: PUSH
39310: LD_VAR 0 1
39314: PPUSH
39315: CALL_OW 437
39319: PUSH
39320: LD_INT 1
39322: ARRAY
39323: PUSH
39324: LD_INT 1
39326: ARRAY
39327: EQUAL
39328: PUSH
39329: LD_VAR 0 4
39333: PUSH
39334: LD_VAR 0 1
39338: PPUSH
39339: CALL_OW 437
39343: PUSH
39344: LD_INT 1
39346: ARRAY
39347: PUSH
39348: LD_INT 2
39350: ARRAY
39351: EQUAL
39352: AND
39353: PUSH
39354: LD_VAR 0 5
39358: PUSH
39359: LD_VAR 0 1
39363: PPUSH
39364: CALL_OW 437
39368: PUSH
39369: LD_INT 1
39371: ARRAY
39372: PUSH
39373: LD_INT 3
39375: ARRAY
39376: EQUAL
39377: AND
39378: IFFALSE 39388
// result := true end ;
39380: LD_ADDR_VAR 0 3
39384: PUSH
39385: LD_INT 1
39387: ST_TO_ADDR
// end ;
39388: LD_VAR 0 3
39392: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39393: LD_INT 0
39395: PPUSH
// result := false ;
39396: LD_ADDR_VAR 0 4
39400: PUSH
39401: LD_INT 0
39403: ST_TO_ADDR
// if GetTaskList ( unit ) then
39404: LD_VAR 0 1
39408: PPUSH
39409: CALL_OW 437
39413: IFFALSE 39496
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39415: LD_STRING M
39417: PUSH
39418: LD_VAR 0 1
39422: PPUSH
39423: CALL_OW 437
39427: PUSH
39428: LD_INT 1
39430: ARRAY
39431: PUSH
39432: LD_INT 1
39434: ARRAY
39435: EQUAL
39436: PUSH
39437: LD_VAR 0 2
39441: PUSH
39442: LD_VAR 0 1
39446: PPUSH
39447: CALL_OW 437
39451: PUSH
39452: LD_INT 1
39454: ARRAY
39455: PUSH
39456: LD_INT 2
39458: ARRAY
39459: EQUAL
39460: AND
39461: PUSH
39462: LD_VAR 0 3
39466: PUSH
39467: LD_VAR 0 1
39471: PPUSH
39472: CALL_OW 437
39476: PUSH
39477: LD_INT 1
39479: ARRAY
39480: PUSH
39481: LD_INT 3
39483: ARRAY
39484: EQUAL
39485: AND
39486: IFFALSE 39496
// result := true ;
39488: LD_ADDR_VAR 0 4
39492: PUSH
39493: LD_INT 1
39495: ST_TO_ADDR
// end ; end ;
39496: LD_VAR 0 4
39500: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39501: LD_INT 0
39503: PPUSH
39504: PPUSH
39505: PPUSH
39506: PPUSH
// if not unit or not area then
39507: LD_VAR 0 1
39511: NOT
39512: PUSH
39513: LD_VAR 0 2
39517: NOT
39518: OR
39519: IFFALSE 39523
// exit ;
39521: GO 39699
// tmp := AreaToList ( area , i ) ;
39523: LD_ADDR_VAR 0 6
39527: PUSH
39528: LD_VAR 0 2
39532: PPUSH
39533: LD_VAR 0 5
39537: PPUSH
39538: CALL_OW 517
39542: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39543: LD_ADDR_VAR 0 5
39547: PUSH
39548: DOUBLE
39549: LD_INT 1
39551: DEC
39552: ST_TO_ADDR
39553: LD_VAR 0 6
39557: PUSH
39558: LD_INT 1
39560: ARRAY
39561: PUSH
39562: FOR_TO
39563: IFFALSE 39697
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39565: LD_ADDR_VAR 0 7
39569: PUSH
39570: LD_VAR 0 6
39574: PUSH
39575: LD_INT 1
39577: ARRAY
39578: PUSH
39579: LD_VAR 0 5
39583: ARRAY
39584: PUSH
39585: LD_VAR 0 6
39589: PUSH
39590: LD_INT 2
39592: ARRAY
39593: PUSH
39594: LD_VAR 0 5
39598: ARRAY
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
39604: LD_INT 92
39606: PUSH
39607: LD_VAR 0 7
39611: PUSH
39612: LD_INT 1
39614: ARRAY
39615: PUSH
39616: LD_VAR 0 7
39620: PUSH
39621: LD_INT 2
39623: ARRAY
39624: PUSH
39625: LD_INT 2
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: LIST
39632: LIST
39633: PPUSH
39634: CALL_OW 69
39638: PUSH
39639: LD_INT 0
39641: EQUAL
39642: IFFALSE 39695
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39644: LD_VAR 0 1
39648: PPUSH
39649: LD_VAR 0 7
39653: PUSH
39654: LD_INT 1
39656: ARRAY
39657: PPUSH
39658: LD_VAR 0 7
39662: PUSH
39663: LD_INT 2
39665: ARRAY
39666: PPUSH
39667: LD_VAR 0 3
39671: PPUSH
39672: CALL_OW 48
// result := IsPlaced ( unit ) ;
39676: LD_ADDR_VAR 0 4
39680: PUSH
39681: LD_VAR 0 1
39685: PPUSH
39686: CALL_OW 305
39690: ST_TO_ADDR
// exit ;
39691: POP
39692: POP
39693: GO 39699
// end ; end ;
39695: GO 39562
39697: POP
39698: POP
// end ;
39699: LD_VAR 0 4
39703: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39704: LD_INT 0
39706: PPUSH
39707: PPUSH
39708: PPUSH
// if not side or side > 8 then
39709: LD_VAR 0 1
39713: NOT
39714: PUSH
39715: LD_VAR 0 1
39719: PUSH
39720: LD_INT 8
39722: GREATER
39723: OR
39724: IFFALSE 39728
// exit ;
39726: GO 39915
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39728: LD_ADDR_VAR 0 4
39732: PUSH
39733: LD_INT 22
39735: PUSH
39736: LD_VAR 0 1
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 21
39747: PUSH
39748: LD_INT 3
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PPUSH
39759: CALL_OW 69
39763: ST_TO_ADDR
// if not tmp then
39764: LD_VAR 0 4
39768: NOT
39769: IFFALSE 39773
// exit ;
39771: GO 39915
// enable_addtolog := true ;
39773: LD_ADDR_OWVAR 81
39777: PUSH
39778: LD_INT 1
39780: ST_TO_ADDR
// AddToLog ( [ ) ;
39781: LD_STRING [
39783: PPUSH
39784: CALL_OW 561
// for i in tmp do
39788: LD_ADDR_VAR 0 3
39792: PUSH
39793: LD_VAR 0 4
39797: PUSH
39798: FOR_IN
39799: IFFALSE 39906
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39801: LD_STRING [
39803: PUSH
39804: LD_VAR 0 3
39808: PPUSH
39809: CALL_OW 266
39813: STR
39814: PUSH
39815: LD_STRING , 
39817: STR
39818: PUSH
39819: LD_VAR 0 3
39823: PPUSH
39824: CALL_OW 250
39828: STR
39829: PUSH
39830: LD_STRING , 
39832: STR
39833: PUSH
39834: LD_VAR 0 3
39838: PPUSH
39839: CALL_OW 251
39843: STR
39844: PUSH
39845: LD_STRING , 
39847: STR
39848: PUSH
39849: LD_VAR 0 3
39853: PPUSH
39854: CALL_OW 254
39858: STR
39859: PUSH
39860: LD_STRING , 
39862: STR
39863: PUSH
39864: LD_VAR 0 3
39868: PPUSH
39869: LD_INT 1
39871: PPUSH
39872: CALL_OW 268
39876: STR
39877: PUSH
39878: LD_STRING , 
39880: STR
39881: PUSH
39882: LD_VAR 0 3
39886: PPUSH
39887: LD_INT 2
39889: PPUSH
39890: CALL_OW 268
39894: STR
39895: PUSH
39896: LD_STRING ],
39898: STR
39899: PPUSH
39900: CALL_OW 561
// end ;
39904: GO 39798
39906: POP
39907: POP
// AddToLog ( ]; ) ;
39908: LD_STRING ];
39910: PPUSH
39911: CALL_OW 561
// end ;
39915: LD_VAR 0 2
39919: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39920: LD_INT 0
39922: PPUSH
39923: PPUSH
39924: PPUSH
39925: PPUSH
39926: PPUSH
// if not area or not rate or not max then
39927: LD_VAR 0 1
39931: NOT
39932: PUSH
39933: LD_VAR 0 2
39937: NOT
39938: OR
39939: PUSH
39940: LD_VAR 0 4
39944: NOT
39945: OR
39946: IFFALSE 39950
// exit ;
39948: GO 40139
// while 1 do
39950: LD_INT 1
39952: IFFALSE 40139
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39954: LD_ADDR_VAR 0 9
39958: PUSH
39959: LD_VAR 0 1
39963: PPUSH
39964: LD_INT 1
39966: PPUSH
39967: CALL_OW 287
39971: PUSH
39972: LD_INT 10
39974: MUL
39975: ST_TO_ADDR
// r := rate / 10 ;
39976: LD_ADDR_VAR 0 7
39980: PUSH
39981: LD_VAR 0 2
39985: PUSH
39986: LD_INT 10
39988: DIVREAL
39989: ST_TO_ADDR
// time := 1 1$00 ;
39990: LD_ADDR_VAR 0 8
39994: PUSH
39995: LD_INT 2100
39997: ST_TO_ADDR
// if amount < min then
39998: LD_VAR 0 9
40002: PUSH
40003: LD_VAR 0 3
40007: LESS
40008: IFFALSE 40026
// r := r * 2 else
40010: LD_ADDR_VAR 0 7
40014: PUSH
40015: LD_VAR 0 7
40019: PUSH
40020: LD_INT 2
40022: MUL
40023: ST_TO_ADDR
40024: GO 40052
// if amount > max then
40026: LD_VAR 0 9
40030: PUSH
40031: LD_VAR 0 4
40035: GREATER
40036: IFFALSE 40052
// r := r / 2 ;
40038: LD_ADDR_VAR 0 7
40042: PUSH
40043: LD_VAR 0 7
40047: PUSH
40048: LD_INT 2
40050: DIVREAL
40051: ST_TO_ADDR
// time := time / r ;
40052: LD_ADDR_VAR 0 8
40056: PUSH
40057: LD_VAR 0 8
40061: PUSH
40062: LD_VAR 0 7
40066: DIVREAL
40067: ST_TO_ADDR
// if time < 0 then
40068: LD_VAR 0 8
40072: PUSH
40073: LD_INT 0
40075: LESS
40076: IFFALSE 40093
// time := time * - 1 ;
40078: LD_ADDR_VAR 0 8
40082: PUSH
40083: LD_VAR 0 8
40087: PUSH
40088: LD_INT 1
40090: NEG
40091: MUL
40092: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40093: LD_VAR 0 8
40097: PUSH
40098: LD_INT 35
40100: PPUSH
40101: LD_INT 875
40103: PPUSH
40104: CALL_OW 12
40108: PLUS
40109: PPUSH
40110: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40114: LD_INT 1
40116: PPUSH
40117: LD_INT 5
40119: PPUSH
40120: CALL_OW 12
40124: PPUSH
40125: LD_VAR 0 1
40129: PPUSH
40130: LD_INT 1
40132: PPUSH
40133: CALL_OW 55
// end ;
40137: GO 39950
// end ;
40139: LD_VAR 0 5
40143: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40144: LD_INT 0
40146: PPUSH
40147: PPUSH
40148: PPUSH
40149: PPUSH
40150: PPUSH
40151: PPUSH
40152: PPUSH
40153: PPUSH
// if not turrets or not factories then
40154: LD_VAR 0 1
40158: NOT
40159: PUSH
40160: LD_VAR 0 2
40164: NOT
40165: OR
40166: IFFALSE 40170
// exit ;
40168: GO 40477
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40170: LD_ADDR_VAR 0 10
40174: PUSH
40175: LD_INT 5
40177: PUSH
40178: LD_INT 6
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 2
40187: PUSH
40188: LD_INT 4
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 3
40197: PUSH
40198: LD_INT 5
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 24
40212: PUSH
40213: LD_INT 25
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 23
40222: PUSH
40223: LD_INT 27
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 42
40236: PUSH
40237: LD_INT 43
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 44
40246: PUSH
40247: LD_INT 46
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 45
40256: PUSH
40257: LD_INT 47
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: LIST
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: LIST
40273: ST_TO_ADDR
// result := [ ] ;
40274: LD_ADDR_VAR 0 3
40278: PUSH
40279: EMPTY
40280: ST_TO_ADDR
// for i in turrets do
40281: LD_ADDR_VAR 0 4
40285: PUSH
40286: LD_VAR 0 1
40290: PUSH
40291: FOR_IN
40292: IFFALSE 40475
// begin nat := GetNation ( i ) ;
40294: LD_ADDR_VAR 0 7
40298: PUSH
40299: LD_VAR 0 4
40303: PPUSH
40304: CALL_OW 248
40308: ST_TO_ADDR
// weapon := 0 ;
40309: LD_ADDR_VAR 0 8
40313: PUSH
40314: LD_INT 0
40316: ST_TO_ADDR
// if not nat then
40317: LD_VAR 0 7
40321: NOT
40322: IFFALSE 40326
// continue ;
40324: GO 40291
// for j in list [ nat ] do
40326: LD_ADDR_VAR 0 5
40330: PUSH
40331: LD_VAR 0 10
40335: PUSH
40336: LD_VAR 0 7
40340: ARRAY
40341: PUSH
40342: FOR_IN
40343: IFFALSE 40384
// if GetBWeapon ( i ) = j [ 1 ] then
40345: LD_VAR 0 4
40349: PPUSH
40350: CALL_OW 269
40354: PUSH
40355: LD_VAR 0 5
40359: PUSH
40360: LD_INT 1
40362: ARRAY
40363: EQUAL
40364: IFFALSE 40382
// begin weapon := j [ 2 ] ;
40366: LD_ADDR_VAR 0 8
40370: PUSH
40371: LD_VAR 0 5
40375: PUSH
40376: LD_INT 2
40378: ARRAY
40379: ST_TO_ADDR
// break ;
40380: GO 40384
// end ;
40382: GO 40342
40384: POP
40385: POP
// if not weapon then
40386: LD_VAR 0 8
40390: NOT
40391: IFFALSE 40395
// continue ;
40393: GO 40291
// for k in factories do
40395: LD_ADDR_VAR 0 6
40399: PUSH
40400: LD_VAR 0 2
40404: PUSH
40405: FOR_IN
40406: IFFALSE 40471
// begin weapons := AvailableWeaponList ( k ) ;
40408: LD_ADDR_VAR 0 9
40412: PUSH
40413: LD_VAR 0 6
40417: PPUSH
40418: CALL_OW 478
40422: ST_TO_ADDR
// if not weapons then
40423: LD_VAR 0 9
40427: NOT
40428: IFFALSE 40432
// continue ;
40430: GO 40405
// if weapon in weapons then
40432: LD_VAR 0 8
40436: PUSH
40437: LD_VAR 0 9
40441: IN
40442: IFFALSE 40469
// begin result := [ i , weapon ] ;
40444: LD_ADDR_VAR 0 3
40448: PUSH
40449: LD_VAR 0 4
40453: PUSH
40454: LD_VAR 0 8
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: ST_TO_ADDR
// exit ;
40463: POP
40464: POP
40465: POP
40466: POP
40467: GO 40477
// end ; end ;
40469: GO 40405
40471: POP
40472: POP
// end ;
40473: GO 40291
40475: POP
40476: POP
// end ;
40477: LD_VAR 0 3
40481: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40482: LD_INT 0
40484: PPUSH
// if not side or side > 8 then
40485: LD_VAR 0 3
40489: NOT
40490: PUSH
40491: LD_VAR 0 3
40495: PUSH
40496: LD_INT 8
40498: GREATER
40499: OR
40500: IFFALSE 40504
// exit ;
40502: GO 40563
// if not range then
40504: LD_VAR 0 4
40508: NOT
40509: IFFALSE 40520
// range := - 12 ;
40511: LD_ADDR_VAR 0 4
40515: PUSH
40516: LD_INT 12
40518: NEG
40519: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40520: LD_VAR 0 1
40524: PPUSH
40525: LD_VAR 0 2
40529: PPUSH
40530: LD_VAR 0 3
40534: PPUSH
40535: LD_VAR 0 4
40539: PPUSH
40540: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40544: LD_VAR 0 1
40548: PPUSH
40549: LD_VAR 0 2
40553: PPUSH
40554: LD_VAR 0 3
40558: PPUSH
40559: CALL_OW 331
// end ;
40563: LD_VAR 0 5
40567: RET
// export function Video ( mode ) ; begin
40568: LD_INT 0
40570: PPUSH
// ingame_video = mode ;
40571: LD_ADDR_OWVAR 52
40575: PUSH
40576: LD_VAR 0 1
40580: ST_TO_ADDR
// interface_hidden = mode ;
40581: LD_ADDR_OWVAR 54
40585: PUSH
40586: LD_VAR 0 1
40590: ST_TO_ADDR
// end ;
40591: LD_VAR 0 2
40595: RET
// export function Join ( array , element ) ; begin
40596: LD_INT 0
40598: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40599: LD_ADDR_VAR 0 3
40603: PUSH
40604: LD_VAR 0 1
40608: PPUSH
40609: LD_VAR 0 1
40613: PUSH
40614: LD_INT 1
40616: PLUS
40617: PPUSH
40618: LD_VAR 0 2
40622: PPUSH
40623: CALL_OW 1
40627: ST_TO_ADDR
// end ;
40628: LD_VAR 0 3
40632: RET
// export function JoinUnion ( array , element ) ; begin
40633: LD_INT 0
40635: PPUSH
// result := array union element ;
40636: LD_ADDR_VAR 0 3
40640: PUSH
40641: LD_VAR 0 1
40645: PUSH
40646: LD_VAR 0 2
40650: UNION
40651: ST_TO_ADDR
// end ;
40652: LD_VAR 0 3
40656: RET
// export function GetBehemoths ( side ) ; begin
40657: LD_INT 0
40659: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40660: LD_ADDR_VAR 0 2
40664: PUSH
40665: LD_INT 22
40667: PUSH
40668: LD_VAR 0 1
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 31
40679: PUSH
40680: LD_INT 25
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PPUSH
40691: CALL_OW 69
40695: ST_TO_ADDR
// end ;
40696: LD_VAR 0 2
40700: RET
// export function Shuffle ( array ) ; var i , index ; begin
40701: LD_INT 0
40703: PPUSH
40704: PPUSH
40705: PPUSH
// result := [ ] ;
40706: LD_ADDR_VAR 0 2
40710: PUSH
40711: EMPTY
40712: ST_TO_ADDR
// if not array then
40713: LD_VAR 0 1
40717: NOT
40718: IFFALSE 40722
// exit ;
40720: GO 40821
// Randomize ;
40722: CALL_OW 10
// for i = array downto 1 do
40726: LD_ADDR_VAR 0 3
40730: PUSH
40731: DOUBLE
40732: LD_VAR 0 1
40736: INC
40737: ST_TO_ADDR
40738: LD_INT 1
40740: PUSH
40741: FOR_DOWNTO
40742: IFFALSE 40819
// begin index := rand ( 1 , array ) ;
40744: LD_ADDR_VAR 0 4
40748: PUSH
40749: LD_INT 1
40751: PPUSH
40752: LD_VAR 0 1
40756: PPUSH
40757: CALL_OW 12
40761: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40762: LD_ADDR_VAR 0 2
40766: PUSH
40767: LD_VAR 0 2
40771: PPUSH
40772: LD_VAR 0 2
40776: PUSH
40777: LD_INT 1
40779: PLUS
40780: PPUSH
40781: LD_VAR 0 1
40785: PUSH
40786: LD_VAR 0 4
40790: ARRAY
40791: PPUSH
40792: CALL_OW 2
40796: ST_TO_ADDR
// array := Delete ( array , index ) ;
40797: LD_ADDR_VAR 0 1
40801: PUSH
40802: LD_VAR 0 1
40806: PPUSH
40807: LD_VAR 0 4
40811: PPUSH
40812: CALL_OW 3
40816: ST_TO_ADDR
// end ;
40817: GO 40741
40819: POP
40820: POP
// end ;
40821: LD_VAR 0 2
40825: RET
// export function GetBaseMaterials ( base ) ; begin
40826: LD_INT 0
40828: PPUSH
// result := [ 0 , 0 , 0 ] ;
40829: LD_ADDR_VAR 0 2
40833: PUSH
40834: LD_INT 0
40836: PUSH
40837: LD_INT 0
40839: PUSH
40840: LD_INT 0
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: LIST
40847: ST_TO_ADDR
// if not base then
40848: LD_VAR 0 1
40852: NOT
40853: IFFALSE 40857
// exit ;
40855: GO 40906
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40857: LD_ADDR_VAR 0 2
40861: PUSH
40862: LD_VAR 0 1
40866: PPUSH
40867: LD_INT 1
40869: PPUSH
40870: CALL_OW 275
40874: PUSH
40875: LD_VAR 0 1
40879: PPUSH
40880: LD_INT 2
40882: PPUSH
40883: CALL_OW 275
40887: PUSH
40888: LD_VAR 0 1
40892: PPUSH
40893: LD_INT 3
40895: PPUSH
40896: CALL_OW 275
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: LIST
40905: ST_TO_ADDR
// end ;
40906: LD_VAR 0 2
40910: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40911: LD_INT 0
40913: PPUSH
40914: PPUSH
// result := array ;
40915: LD_ADDR_VAR 0 3
40919: PUSH
40920: LD_VAR 0 1
40924: ST_TO_ADDR
// if size >= result then
40925: LD_VAR 0 2
40929: PUSH
40930: LD_VAR 0 3
40934: GREATEREQUAL
40935: IFFALSE 40939
// exit ;
40937: GO 40989
// if size then
40939: LD_VAR 0 2
40943: IFFALSE 40989
// for i := array downto size do
40945: LD_ADDR_VAR 0 4
40949: PUSH
40950: DOUBLE
40951: LD_VAR 0 1
40955: INC
40956: ST_TO_ADDR
40957: LD_VAR 0 2
40961: PUSH
40962: FOR_DOWNTO
40963: IFFALSE 40987
// result := Delete ( result , result ) ;
40965: LD_ADDR_VAR 0 3
40969: PUSH
40970: LD_VAR 0 3
40974: PPUSH
40975: LD_VAR 0 3
40979: PPUSH
40980: CALL_OW 3
40984: ST_TO_ADDR
40985: GO 40962
40987: POP
40988: POP
// end ;
40989: LD_VAR 0 3
40993: RET
// export function ComExit ( unit ) ; var tmp ; begin
40994: LD_INT 0
40996: PPUSH
40997: PPUSH
// if not IsInUnit ( unit ) then
40998: LD_VAR 0 1
41002: PPUSH
41003: CALL_OW 310
41007: NOT
41008: IFFALSE 41012
// exit ;
41010: GO 41072
// tmp := IsInUnit ( unit ) ;
41012: LD_ADDR_VAR 0 3
41016: PUSH
41017: LD_VAR 0 1
41021: PPUSH
41022: CALL_OW 310
41026: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41027: LD_VAR 0 3
41031: PPUSH
41032: CALL_OW 247
41036: PUSH
41037: LD_INT 2
41039: EQUAL
41040: IFFALSE 41053
// ComExitVehicle ( unit ) else
41042: LD_VAR 0 1
41046: PPUSH
41047: CALL_OW 121
41051: GO 41062
// ComExitBuilding ( unit ) ;
41053: LD_VAR 0 1
41057: PPUSH
41058: CALL_OW 122
// result := tmp ;
41062: LD_ADDR_VAR 0 2
41066: PUSH
41067: LD_VAR 0 3
41071: ST_TO_ADDR
// end ;
41072: LD_VAR 0 2
41076: RET
// export function ComExitAll ( units ) ; var i ; begin
41077: LD_INT 0
41079: PPUSH
41080: PPUSH
// if not units then
41081: LD_VAR 0 1
41085: NOT
41086: IFFALSE 41090
// exit ;
41088: GO 41116
// for i in units do
41090: LD_ADDR_VAR 0 3
41094: PUSH
41095: LD_VAR 0 1
41099: PUSH
41100: FOR_IN
41101: IFFALSE 41114
// ComExit ( i ) ;
41103: LD_VAR 0 3
41107: PPUSH
41108: CALL 40994 0 1
41112: GO 41100
41114: POP
41115: POP
// end ;
41116: LD_VAR 0 2
41120: RET
// export function ResetHc ; begin
41121: LD_INT 0
41123: PPUSH
// InitHc ;
41124: CALL_OW 19
// hc_importance := 0 ;
41128: LD_ADDR_OWVAR 32
41132: PUSH
41133: LD_INT 0
41135: ST_TO_ADDR
// end ;
41136: LD_VAR 0 1
41140: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41141: LD_INT 0
41143: PPUSH
41144: PPUSH
41145: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41146: LD_ADDR_VAR 0 6
41150: PUSH
41151: LD_VAR 0 1
41155: PUSH
41156: LD_VAR 0 3
41160: PLUS
41161: PUSH
41162: LD_INT 2
41164: DIV
41165: ST_TO_ADDR
// if _x < 0 then
41166: LD_VAR 0 6
41170: PUSH
41171: LD_INT 0
41173: LESS
41174: IFFALSE 41191
// _x := _x * - 1 ;
41176: LD_ADDR_VAR 0 6
41180: PUSH
41181: LD_VAR 0 6
41185: PUSH
41186: LD_INT 1
41188: NEG
41189: MUL
41190: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41191: LD_ADDR_VAR 0 7
41195: PUSH
41196: LD_VAR 0 2
41200: PUSH
41201: LD_VAR 0 4
41205: PLUS
41206: PUSH
41207: LD_INT 2
41209: DIV
41210: ST_TO_ADDR
// if _y < 0 then
41211: LD_VAR 0 7
41215: PUSH
41216: LD_INT 0
41218: LESS
41219: IFFALSE 41236
// _y := _y * - 1 ;
41221: LD_ADDR_VAR 0 7
41225: PUSH
41226: LD_VAR 0 7
41230: PUSH
41231: LD_INT 1
41233: NEG
41234: MUL
41235: ST_TO_ADDR
// result := [ _x , _y ] ;
41236: LD_ADDR_VAR 0 5
41240: PUSH
41241: LD_VAR 0 6
41245: PUSH
41246: LD_VAR 0 7
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: ST_TO_ADDR
// end ;
41255: LD_VAR 0 5
41259: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41260: LD_INT 0
41262: PPUSH
41263: PPUSH
41264: PPUSH
41265: PPUSH
// task := GetTaskList ( unit ) ;
41266: LD_ADDR_VAR 0 7
41270: PUSH
41271: LD_VAR 0 1
41275: PPUSH
41276: CALL_OW 437
41280: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41281: LD_VAR 0 7
41285: NOT
41286: PUSH
41287: LD_VAR 0 1
41291: PPUSH
41292: LD_VAR 0 2
41296: PPUSH
41297: CALL_OW 308
41301: NOT
41302: AND
41303: IFFALSE 41307
// exit ;
41305: GO 41425
// if IsInArea ( unit , area ) then
41307: LD_VAR 0 1
41311: PPUSH
41312: LD_VAR 0 2
41316: PPUSH
41317: CALL_OW 308
41321: IFFALSE 41339
// begin ComMoveToArea ( unit , goAway ) ;
41323: LD_VAR 0 1
41327: PPUSH
41328: LD_VAR 0 3
41332: PPUSH
41333: CALL_OW 113
// exit ;
41337: GO 41425
// end ; if task [ 1 ] [ 1 ] <> M then
41339: LD_VAR 0 7
41343: PUSH
41344: LD_INT 1
41346: ARRAY
41347: PUSH
41348: LD_INT 1
41350: ARRAY
41351: PUSH
41352: LD_STRING M
41354: NONEQUAL
41355: IFFALSE 41359
// exit ;
41357: GO 41425
// x := task [ 1 ] [ 2 ] ;
41359: LD_ADDR_VAR 0 5
41363: PUSH
41364: LD_VAR 0 7
41368: PUSH
41369: LD_INT 1
41371: ARRAY
41372: PUSH
41373: LD_INT 2
41375: ARRAY
41376: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41377: LD_ADDR_VAR 0 6
41381: PUSH
41382: LD_VAR 0 7
41386: PUSH
41387: LD_INT 1
41389: ARRAY
41390: PUSH
41391: LD_INT 3
41393: ARRAY
41394: ST_TO_ADDR
// if InArea ( x , y , area ) then
41395: LD_VAR 0 5
41399: PPUSH
41400: LD_VAR 0 6
41404: PPUSH
41405: LD_VAR 0 2
41409: PPUSH
41410: CALL_OW 309
41414: IFFALSE 41425
// ComStop ( unit ) ;
41416: LD_VAR 0 1
41420: PPUSH
41421: CALL_OW 141
// end ;
41425: LD_VAR 0 4
41429: RET
// export function Abs ( value ) ; begin
41430: LD_INT 0
41432: PPUSH
// result := value ;
41433: LD_ADDR_VAR 0 2
41437: PUSH
41438: LD_VAR 0 1
41442: ST_TO_ADDR
// if value < 0 then
41443: LD_VAR 0 1
41447: PUSH
41448: LD_INT 0
41450: LESS
41451: IFFALSE 41468
// result := value * - 1 ;
41453: LD_ADDR_VAR 0 2
41457: PUSH
41458: LD_VAR 0 1
41462: PUSH
41463: LD_INT 1
41465: NEG
41466: MUL
41467: ST_TO_ADDR
// end ;
41468: LD_VAR 0 2
41472: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41473: LD_INT 0
41475: PPUSH
41476: PPUSH
41477: PPUSH
41478: PPUSH
41479: PPUSH
41480: PPUSH
41481: PPUSH
41482: PPUSH
// if not unit or not building then
41483: LD_VAR 0 1
41487: NOT
41488: PUSH
41489: LD_VAR 0 2
41493: NOT
41494: OR
41495: IFFALSE 41499
// exit ;
41497: GO 41725
// x := GetX ( building ) ;
41499: LD_ADDR_VAR 0 4
41503: PUSH
41504: LD_VAR 0 2
41508: PPUSH
41509: CALL_OW 250
41513: ST_TO_ADDR
// y := GetY ( building ) ;
41514: LD_ADDR_VAR 0 6
41518: PUSH
41519: LD_VAR 0 2
41523: PPUSH
41524: CALL_OW 251
41528: ST_TO_ADDR
// d := GetDir ( building ) ;
41529: LD_ADDR_VAR 0 8
41533: PUSH
41534: LD_VAR 0 2
41538: PPUSH
41539: CALL_OW 254
41543: ST_TO_ADDR
// r := 4 ;
41544: LD_ADDR_VAR 0 9
41548: PUSH
41549: LD_INT 4
41551: ST_TO_ADDR
// for i := 1 to 5 do
41552: LD_ADDR_VAR 0 10
41556: PUSH
41557: DOUBLE
41558: LD_INT 1
41560: DEC
41561: ST_TO_ADDR
41562: LD_INT 5
41564: PUSH
41565: FOR_TO
41566: IFFALSE 41723
// begin _x := ShiftX ( x , d , r + i ) ;
41568: LD_ADDR_VAR 0 5
41572: PUSH
41573: LD_VAR 0 4
41577: PPUSH
41578: LD_VAR 0 8
41582: PPUSH
41583: LD_VAR 0 9
41587: PUSH
41588: LD_VAR 0 10
41592: PLUS
41593: PPUSH
41594: CALL_OW 272
41598: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41599: LD_ADDR_VAR 0 7
41603: PUSH
41604: LD_VAR 0 6
41608: PPUSH
41609: LD_VAR 0 8
41613: PPUSH
41614: LD_VAR 0 9
41618: PUSH
41619: LD_VAR 0 10
41623: PLUS
41624: PPUSH
41625: CALL_OW 273
41629: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41630: LD_VAR 0 5
41634: PPUSH
41635: LD_VAR 0 7
41639: PPUSH
41640: CALL_OW 488
41644: PUSH
41645: LD_VAR 0 5
41649: PPUSH
41650: LD_VAR 0 7
41654: PPUSH
41655: CALL_OW 428
41659: PPUSH
41660: CALL_OW 247
41664: PUSH
41665: LD_INT 3
41667: PUSH
41668: LD_INT 2
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: IN
41675: NOT
41676: AND
41677: IFFALSE 41721
// begin ComMoveXY ( unit , _x , _y ) ;
41679: LD_VAR 0 1
41683: PPUSH
41684: LD_VAR 0 5
41688: PPUSH
41689: LD_VAR 0 7
41693: PPUSH
41694: CALL_OW 111
// result := [ _x , _y ] ;
41698: LD_ADDR_VAR 0 3
41702: PUSH
41703: LD_VAR 0 5
41707: PUSH
41708: LD_VAR 0 7
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: ST_TO_ADDR
// exit ;
41717: POP
41718: POP
41719: GO 41725
// end ; end ;
41721: GO 41565
41723: POP
41724: POP
// end ;
41725: LD_VAR 0 3
41729: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41730: LD_INT 0
41732: PPUSH
41733: PPUSH
41734: PPUSH
// result := 0 ;
41735: LD_ADDR_VAR 0 3
41739: PUSH
41740: LD_INT 0
41742: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41743: LD_VAR 0 1
41747: PUSH
41748: LD_INT 0
41750: LESS
41751: PUSH
41752: LD_VAR 0 1
41756: PUSH
41757: LD_INT 8
41759: GREATER
41760: OR
41761: PUSH
41762: LD_VAR 0 2
41766: PUSH
41767: LD_INT 0
41769: LESS
41770: OR
41771: PUSH
41772: LD_VAR 0 2
41776: PUSH
41777: LD_INT 8
41779: GREATER
41780: OR
41781: IFFALSE 41785
// exit ;
41783: GO 41860
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41785: LD_ADDR_VAR 0 4
41789: PUSH
41790: LD_INT 22
41792: PUSH
41793: LD_VAR 0 2
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PPUSH
41802: CALL_OW 69
41806: PUSH
41807: FOR_IN
41808: IFFALSE 41858
// begin un := UnitShoot ( i ) ;
41810: LD_ADDR_VAR 0 5
41814: PUSH
41815: LD_VAR 0 4
41819: PPUSH
41820: CALL_OW 504
41824: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41825: LD_VAR 0 5
41829: PPUSH
41830: CALL_OW 255
41834: PUSH
41835: LD_VAR 0 1
41839: EQUAL
41840: IFFALSE 41856
// begin result := un ;
41842: LD_ADDR_VAR 0 3
41846: PUSH
41847: LD_VAR 0 5
41851: ST_TO_ADDR
// exit ;
41852: POP
41853: POP
41854: GO 41860
// end ; end ;
41856: GO 41807
41858: POP
41859: POP
// end ;
41860: LD_VAR 0 3
41864: RET
// export function GetCargoBay ( units ) ; begin
41865: LD_INT 0
41867: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41868: LD_ADDR_VAR 0 2
41872: PUSH
41873: LD_VAR 0 1
41877: PPUSH
41878: LD_INT 2
41880: PUSH
41881: LD_INT 34
41883: PUSH
41884: LD_INT 12
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 34
41893: PUSH
41894: LD_INT 51
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 34
41903: PUSH
41904: LD_INT 32
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 34
41913: PUSH
41914: LD_INT 89
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: PPUSH
41928: CALL_OW 72
41932: ST_TO_ADDR
// end ;
41933: LD_VAR 0 2
41937: RET
// export function Negate ( value ) ; begin
41938: LD_INT 0
41940: PPUSH
// result := not value ;
41941: LD_ADDR_VAR 0 2
41945: PUSH
41946: LD_VAR 0 1
41950: NOT
41951: ST_TO_ADDR
// end ;
41952: LD_VAR 0 2
41956: RET
// export function Inc ( value ) ; begin
41957: LD_INT 0
41959: PPUSH
// result := value + 1 ;
41960: LD_ADDR_VAR 0 2
41964: PUSH
41965: LD_VAR 0 1
41969: PUSH
41970: LD_INT 1
41972: PLUS
41973: ST_TO_ADDR
// end ;
41974: LD_VAR 0 2
41978: RET
// export function Dec ( value ) ; begin
41979: LD_INT 0
41981: PPUSH
// result := value - 1 ;
41982: LD_ADDR_VAR 0 2
41986: PUSH
41987: LD_VAR 0 1
41991: PUSH
41992: LD_INT 1
41994: MINUS
41995: ST_TO_ADDR
// end ;
41996: LD_VAR 0 2
42000: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42001: LD_INT 0
42003: PPUSH
42004: PPUSH
42005: PPUSH
42006: PPUSH
42007: PPUSH
42008: PPUSH
42009: PPUSH
42010: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42011: LD_VAR 0 1
42015: PPUSH
42016: LD_VAR 0 2
42020: PPUSH
42021: CALL_OW 488
42025: NOT
42026: PUSH
42027: LD_VAR 0 3
42031: PPUSH
42032: LD_VAR 0 4
42036: PPUSH
42037: CALL_OW 488
42041: NOT
42042: OR
42043: IFFALSE 42056
// begin result := - 1 ;
42045: LD_ADDR_VAR 0 5
42049: PUSH
42050: LD_INT 1
42052: NEG
42053: ST_TO_ADDR
// exit ;
42054: GO 42291
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42056: LD_ADDR_VAR 0 12
42060: PUSH
42061: LD_VAR 0 1
42065: PPUSH
42066: LD_VAR 0 2
42070: PPUSH
42071: LD_VAR 0 3
42075: PPUSH
42076: LD_VAR 0 4
42080: PPUSH
42081: CALL 41141 0 4
42085: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42086: LD_ADDR_VAR 0 11
42090: PUSH
42091: LD_VAR 0 1
42095: PPUSH
42096: LD_VAR 0 2
42100: PPUSH
42101: LD_VAR 0 12
42105: PUSH
42106: LD_INT 1
42108: ARRAY
42109: PPUSH
42110: LD_VAR 0 12
42114: PUSH
42115: LD_INT 2
42117: ARRAY
42118: PPUSH
42119: CALL_OW 298
42123: ST_TO_ADDR
// distance := 9999 ;
42124: LD_ADDR_VAR 0 10
42128: PUSH
42129: LD_INT 9999
42131: ST_TO_ADDR
// for i := 0 to 5 do
42132: LD_ADDR_VAR 0 6
42136: PUSH
42137: DOUBLE
42138: LD_INT 0
42140: DEC
42141: ST_TO_ADDR
42142: LD_INT 5
42144: PUSH
42145: FOR_TO
42146: IFFALSE 42289
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42148: LD_ADDR_VAR 0 7
42152: PUSH
42153: LD_VAR 0 1
42157: PPUSH
42158: LD_VAR 0 6
42162: PPUSH
42163: LD_VAR 0 11
42167: PPUSH
42168: CALL_OW 272
42172: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42173: LD_ADDR_VAR 0 8
42177: PUSH
42178: LD_VAR 0 2
42182: PPUSH
42183: LD_VAR 0 6
42187: PPUSH
42188: LD_VAR 0 11
42192: PPUSH
42193: CALL_OW 273
42197: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42198: LD_VAR 0 7
42202: PPUSH
42203: LD_VAR 0 8
42207: PPUSH
42208: CALL_OW 488
42212: NOT
42213: IFFALSE 42217
// continue ;
42215: GO 42145
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42217: LD_ADDR_VAR 0 9
42221: PUSH
42222: LD_VAR 0 12
42226: PUSH
42227: LD_INT 1
42229: ARRAY
42230: PPUSH
42231: LD_VAR 0 12
42235: PUSH
42236: LD_INT 2
42238: ARRAY
42239: PPUSH
42240: LD_VAR 0 7
42244: PPUSH
42245: LD_VAR 0 8
42249: PPUSH
42250: CALL_OW 298
42254: ST_TO_ADDR
// if tmp < distance then
42255: LD_VAR 0 9
42259: PUSH
42260: LD_VAR 0 10
42264: LESS
42265: IFFALSE 42287
// begin result := i ;
42267: LD_ADDR_VAR 0 5
42271: PUSH
42272: LD_VAR 0 6
42276: ST_TO_ADDR
// distance := tmp ;
42277: LD_ADDR_VAR 0 10
42281: PUSH
42282: LD_VAR 0 9
42286: ST_TO_ADDR
// end ; end ;
42287: GO 42145
42289: POP
42290: POP
// end ;
42291: LD_VAR 0 5
42295: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42296: LD_INT 0
42298: PPUSH
42299: PPUSH
// if not driver or not IsInUnit ( driver ) then
42300: LD_VAR 0 1
42304: NOT
42305: PUSH
42306: LD_VAR 0 1
42310: PPUSH
42311: CALL_OW 310
42315: NOT
42316: OR
42317: IFFALSE 42321
// exit ;
42319: GO 42411
// vehicle := IsInUnit ( driver ) ;
42321: LD_ADDR_VAR 0 3
42325: PUSH
42326: LD_VAR 0 1
42330: PPUSH
42331: CALL_OW 310
42335: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42336: LD_VAR 0 1
42340: PPUSH
42341: LD_STRING \
42343: PUSH
42344: LD_INT 0
42346: PUSH
42347: LD_INT 0
42349: PUSH
42350: LD_INT 0
42352: PUSH
42353: LD_INT 0
42355: PUSH
42356: LD_INT 0
42358: PUSH
42359: LD_INT 0
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: PUSH
42371: LD_STRING E
42373: PUSH
42374: LD_INT 0
42376: PUSH
42377: LD_INT 0
42379: PUSH
42380: LD_VAR 0 3
42384: PUSH
42385: LD_INT 0
42387: PUSH
42388: LD_INT 0
42390: PUSH
42391: LD_INT 0
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PPUSH
42407: CALL_OW 446
// end ;
42411: LD_VAR 0 2
42415: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42416: LD_INT 0
42418: PPUSH
42419: PPUSH
// if not driver or not IsInUnit ( driver ) then
42420: LD_VAR 0 1
42424: NOT
42425: PUSH
42426: LD_VAR 0 1
42430: PPUSH
42431: CALL_OW 310
42435: NOT
42436: OR
42437: IFFALSE 42441
// exit ;
42439: GO 42531
// vehicle := IsInUnit ( driver ) ;
42441: LD_ADDR_VAR 0 3
42445: PUSH
42446: LD_VAR 0 1
42450: PPUSH
42451: CALL_OW 310
42455: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42456: LD_VAR 0 1
42460: PPUSH
42461: LD_STRING \
42463: PUSH
42464: LD_INT 0
42466: PUSH
42467: LD_INT 0
42469: PUSH
42470: LD_INT 0
42472: PUSH
42473: LD_INT 0
42475: PUSH
42476: LD_INT 0
42478: PUSH
42479: LD_INT 0
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: PUSH
42491: LD_STRING E
42493: PUSH
42494: LD_INT 0
42496: PUSH
42497: LD_INT 0
42499: PUSH
42500: LD_VAR 0 3
42504: PUSH
42505: LD_INT 0
42507: PUSH
42508: LD_INT 0
42510: PUSH
42511: LD_INT 0
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PPUSH
42527: CALL_OW 447
// end ;
42531: LD_VAR 0 2
42535: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42536: LD_INT 0
42538: PPUSH
42539: PPUSH
42540: PPUSH
// tmp := [ ] ;
42541: LD_ADDR_VAR 0 5
42545: PUSH
42546: EMPTY
42547: ST_TO_ADDR
// for i in units do
42548: LD_ADDR_VAR 0 4
42552: PUSH
42553: LD_VAR 0 1
42557: PUSH
42558: FOR_IN
42559: IFFALSE 42597
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42561: LD_ADDR_VAR 0 5
42565: PUSH
42566: LD_VAR 0 5
42570: PPUSH
42571: LD_VAR 0 5
42575: PUSH
42576: LD_INT 1
42578: PLUS
42579: PPUSH
42580: LD_VAR 0 4
42584: PPUSH
42585: CALL_OW 256
42589: PPUSH
42590: CALL_OW 2
42594: ST_TO_ADDR
42595: GO 42558
42597: POP
42598: POP
// if not tmp then
42599: LD_VAR 0 5
42603: NOT
42604: IFFALSE 42608
// exit ;
42606: GO 42656
// if asc then
42608: LD_VAR 0 2
42612: IFFALSE 42636
// result := SortListByListAsc ( units , tmp ) else
42614: LD_ADDR_VAR 0 3
42618: PUSH
42619: LD_VAR 0 1
42623: PPUSH
42624: LD_VAR 0 5
42628: PPUSH
42629: CALL_OW 76
42633: ST_TO_ADDR
42634: GO 42656
// result := SortListByListDesc ( units , tmp ) ;
42636: LD_ADDR_VAR 0 3
42640: PUSH
42641: LD_VAR 0 1
42645: PPUSH
42646: LD_VAR 0 5
42650: PPUSH
42651: CALL_OW 77
42655: ST_TO_ADDR
// end ;
42656: LD_VAR 0 3
42660: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42661: LD_INT 0
42663: PPUSH
42664: PPUSH
// task := GetTaskList ( mech ) ;
42665: LD_ADDR_VAR 0 4
42669: PUSH
42670: LD_VAR 0 1
42674: PPUSH
42675: CALL_OW 437
42679: ST_TO_ADDR
// if not task then
42680: LD_VAR 0 4
42684: NOT
42685: IFFALSE 42689
// exit ;
42687: GO 42731
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42689: LD_ADDR_VAR 0 3
42693: PUSH
42694: LD_VAR 0 4
42698: PUSH
42699: LD_INT 1
42701: ARRAY
42702: PUSH
42703: LD_INT 1
42705: ARRAY
42706: PUSH
42707: LD_STRING r
42709: EQUAL
42710: PUSH
42711: LD_VAR 0 4
42715: PUSH
42716: LD_INT 1
42718: ARRAY
42719: PUSH
42720: LD_INT 4
42722: ARRAY
42723: PUSH
42724: LD_VAR 0 2
42728: EQUAL
42729: AND
42730: ST_TO_ADDR
// end ;
42731: LD_VAR 0 3
42735: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42736: LD_INT 0
42738: PPUSH
// SetDir ( unit , d ) ;
42739: LD_VAR 0 1
42743: PPUSH
42744: LD_VAR 0 4
42748: PPUSH
42749: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
42753: LD_VAR 0 1
42757: PPUSH
42758: LD_VAR 0 2
42762: PPUSH
42763: LD_VAR 0 3
42767: PPUSH
42768: LD_VAR 0 5
42772: PPUSH
42773: CALL_OW 48
// end ;
42777: LD_VAR 0 6
42781: RET
// export function ToNaturalNumber ( number ) ; begin
42782: LD_INT 0
42784: PPUSH
// result := number div 1 ;
42785: LD_ADDR_VAR 0 2
42789: PUSH
42790: LD_VAR 0 1
42794: PUSH
42795: LD_INT 1
42797: DIV
42798: ST_TO_ADDR
// if number < 0 then
42799: LD_VAR 0 1
42803: PUSH
42804: LD_INT 0
42806: LESS
42807: IFFALSE 42817
// result := 0 ;
42809: LD_ADDR_VAR 0 2
42813: PUSH
42814: LD_INT 0
42816: ST_TO_ADDR
// end ;
42817: LD_VAR 0 2
42821: RET
// export function SortByClass ( units , class ) ; var un ; begin
42822: LD_INT 0
42824: PPUSH
42825: PPUSH
// if not units or not class then
42826: LD_VAR 0 1
42830: NOT
42831: PUSH
42832: LD_VAR 0 2
42836: NOT
42837: OR
42838: IFFALSE 42842
// exit ;
42840: GO 42937
// result := [ ] ;
42842: LD_ADDR_VAR 0 3
42846: PUSH
42847: EMPTY
42848: ST_TO_ADDR
// for un in units do
42849: LD_ADDR_VAR 0 4
42853: PUSH
42854: LD_VAR 0 1
42858: PUSH
42859: FOR_IN
42860: IFFALSE 42935
// if GetClass ( un ) = class then
42862: LD_VAR 0 4
42866: PPUSH
42867: CALL_OW 257
42871: PUSH
42872: LD_VAR 0 2
42876: EQUAL
42877: IFFALSE 42904
// result := Insert ( result , 1 , un ) else
42879: LD_ADDR_VAR 0 3
42883: PUSH
42884: LD_VAR 0 3
42888: PPUSH
42889: LD_INT 1
42891: PPUSH
42892: LD_VAR 0 4
42896: PPUSH
42897: CALL_OW 2
42901: ST_TO_ADDR
42902: GO 42933
// result := Replace ( result , result + 1 , un ) ;
42904: LD_ADDR_VAR 0 3
42908: PUSH
42909: LD_VAR 0 3
42913: PPUSH
42914: LD_VAR 0 3
42918: PUSH
42919: LD_INT 1
42921: PLUS
42922: PPUSH
42923: LD_VAR 0 4
42927: PPUSH
42928: CALL_OW 1
42932: ST_TO_ADDR
42933: GO 42859
42935: POP
42936: POP
// end ;
42937: LD_VAR 0 3
42941: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
42942: LD_INT 0
42944: PPUSH
42945: PPUSH
42946: PPUSH
42947: PPUSH
42948: PPUSH
42949: PPUSH
42950: PPUSH
// result := [ ] ;
42951: LD_ADDR_VAR 0 4
42955: PUSH
42956: EMPTY
42957: ST_TO_ADDR
// if x - r < 0 then
42958: LD_VAR 0 1
42962: PUSH
42963: LD_VAR 0 3
42967: MINUS
42968: PUSH
42969: LD_INT 0
42971: LESS
42972: IFFALSE 42984
// min_x := 0 else
42974: LD_ADDR_VAR 0 8
42978: PUSH
42979: LD_INT 0
42981: ST_TO_ADDR
42982: GO 43000
// min_x := x - r ;
42984: LD_ADDR_VAR 0 8
42988: PUSH
42989: LD_VAR 0 1
42993: PUSH
42994: LD_VAR 0 3
42998: MINUS
42999: ST_TO_ADDR
// if y - r < 0 then
43000: LD_VAR 0 2
43004: PUSH
43005: LD_VAR 0 3
43009: MINUS
43010: PUSH
43011: LD_INT 0
43013: LESS
43014: IFFALSE 43026
// min_y := 0 else
43016: LD_ADDR_VAR 0 7
43020: PUSH
43021: LD_INT 0
43023: ST_TO_ADDR
43024: GO 43042
// min_y := y - r ;
43026: LD_ADDR_VAR 0 7
43030: PUSH
43031: LD_VAR 0 2
43035: PUSH
43036: LD_VAR 0 3
43040: MINUS
43041: ST_TO_ADDR
// max_x := x + r ;
43042: LD_ADDR_VAR 0 9
43046: PUSH
43047: LD_VAR 0 1
43051: PUSH
43052: LD_VAR 0 3
43056: PLUS
43057: ST_TO_ADDR
// max_y := y + r ;
43058: LD_ADDR_VAR 0 10
43062: PUSH
43063: LD_VAR 0 2
43067: PUSH
43068: LD_VAR 0 3
43072: PLUS
43073: ST_TO_ADDR
// for _x = min_x to max_x do
43074: LD_ADDR_VAR 0 5
43078: PUSH
43079: DOUBLE
43080: LD_VAR 0 8
43084: DEC
43085: ST_TO_ADDR
43086: LD_VAR 0 9
43090: PUSH
43091: FOR_TO
43092: IFFALSE 43193
// for _y = min_y to max_y do
43094: LD_ADDR_VAR 0 6
43098: PUSH
43099: DOUBLE
43100: LD_VAR 0 7
43104: DEC
43105: ST_TO_ADDR
43106: LD_VAR 0 10
43110: PUSH
43111: FOR_TO
43112: IFFALSE 43189
// begin if not ValidHex ( _x , _y ) then
43114: LD_VAR 0 5
43118: PPUSH
43119: LD_VAR 0 6
43123: PPUSH
43124: CALL_OW 488
43128: NOT
43129: IFFALSE 43133
// continue ;
43131: GO 43111
// if GetResourceTypeXY ( _x , _y ) then
43133: LD_VAR 0 5
43137: PPUSH
43138: LD_VAR 0 6
43142: PPUSH
43143: CALL_OW 283
43147: IFFALSE 43187
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43149: LD_ADDR_VAR 0 4
43153: PUSH
43154: LD_VAR 0 4
43158: PPUSH
43159: LD_VAR 0 4
43163: PUSH
43164: LD_INT 1
43166: PLUS
43167: PPUSH
43168: LD_VAR 0 5
43172: PUSH
43173: LD_VAR 0 6
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PPUSH
43182: CALL_OW 1
43186: ST_TO_ADDR
// end ;
43187: GO 43111
43189: POP
43190: POP
43191: GO 43091
43193: POP
43194: POP
// end ;
43195: LD_VAR 0 4
43199: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43200: LD_INT 0
43202: PPUSH
43203: PPUSH
43204: PPUSH
43205: PPUSH
43206: PPUSH
43207: PPUSH
43208: PPUSH
43209: PPUSH
// if not units then
43210: LD_VAR 0 1
43214: NOT
43215: IFFALSE 43219
// exit ;
43217: GO 43747
// result := UnitFilter ( units , [ f_ok ] ) ;
43219: LD_ADDR_VAR 0 3
43223: PUSH
43224: LD_VAR 0 1
43228: PPUSH
43229: LD_INT 50
43231: PUSH
43232: EMPTY
43233: LIST
43234: PPUSH
43235: CALL_OW 72
43239: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43240: LD_ADDR_VAR 0 8
43244: PUSH
43245: LD_VAR 0 1
43249: PUSH
43250: LD_INT 1
43252: ARRAY
43253: PPUSH
43254: CALL_OW 255
43258: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43259: LD_ADDR_VAR 0 10
43263: PUSH
43264: LD_INT 29
43266: PUSH
43267: LD_INT 91
43269: PUSH
43270: LD_INT 49
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: LIST
43277: ST_TO_ADDR
// if not result then
43278: LD_VAR 0 3
43282: NOT
43283: IFFALSE 43287
// exit ;
43285: GO 43747
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43287: LD_ADDR_VAR 0 5
43291: PUSH
43292: LD_INT 81
43294: PUSH
43295: LD_VAR 0 8
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PPUSH
43304: CALL_OW 69
43308: ST_TO_ADDR
// for i in result do
43309: LD_ADDR_VAR 0 4
43313: PUSH
43314: LD_VAR 0 3
43318: PUSH
43319: FOR_IN
43320: IFFALSE 43745
// begin tag := GetTag ( i ) + 1 ;
43322: LD_ADDR_VAR 0 9
43326: PUSH
43327: LD_VAR 0 4
43331: PPUSH
43332: CALL_OW 110
43336: PUSH
43337: LD_INT 1
43339: PLUS
43340: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
43341: LD_ADDR_VAR 0 7
43345: PUSH
43346: LD_VAR 0 4
43350: PPUSH
43351: CALL_OW 250
43355: PPUSH
43356: LD_VAR 0 4
43360: PPUSH
43361: CALL_OW 251
43365: PPUSH
43366: LD_INT 4
43368: PPUSH
43369: CALL 42942 0 3
43373: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
43374: LD_VAR 0 4
43378: PPUSH
43379: CALL_OW 247
43383: PUSH
43384: LD_INT 2
43386: EQUAL
43387: PUSH
43388: LD_VAR 0 7
43392: PUSH
43393: LD_INT 2
43395: GREATER
43396: AND
43397: PUSH
43398: LD_VAR 0 4
43402: PPUSH
43403: CALL_OW 264
43407: PUSH
43408: LD_VAR 0 10
43412: IN
43413: NOT
43414: AND
43415: IFFALSE 43454
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43417: LD_VAR 0 4
43421: PPUSH
43422: LD_VAR 0 7
43426: PUSH
43427: LD_INT 1
43429: ARRAY
43430: PUSH
43431: LD_INT 1
43433: ARRAY
43434: PPUSH
43435: LD_VAR 0 7
43439: PUSH
43440: LD_INT 1
43442: ARRAY
43443: PUSH
43444: LD_INT 2
43446: ARRAY
43447: PPUSH
43448: CALL_OW 116
43452: GO 43743
// if path > tag then
43454: LD_VAR 0 2
43458: PUSH
43459: LD_VAR 0 9
43463: GREATER
43464: IFFALSE 43672
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
43466: LD_ADDR_VAR 0 6
43470: PUSH
43471: LD_VAR 0 5
43475: PPUSH
43476: LD_INT 91
43478: PUSH
43479: LD_VAR 0 4
43483: PUSH
43484: LD_INT 8
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: LIST
43491: PPUSH
43492: CALL_OW 72
43496: ST_TO_ADDR
// if nearEnemy then
43497: LD_VAR 0 6
43501: IFFALSE 43570
// begin if GetWeapon ( i ) = ru_time_lapser then
43503: LD_VAR 0 4
43507: PPUSH
43508: CALL_OW 264
43512: PUSH
43513: LD_INT 49
43515: EQUAL
43516: IFFALSE 43544
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43518: LD_VAR 0 4
43522: PPUSH
43523: LD_VAR 0 6
43527: PPUSH
43528: LD_VAR 0 4
43532: PPUSH
43533: CALL_OW 74
43537: PPUSH
43538: CALL_OW 112
43542: GO 43568
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
43544: LD_VAR 0 4
43548: PPUSH
43549: LD_VAR 0 6
43553: PPUSH
43554: LD_VAR 0 4
43558: PPUSH
43559: CALL_OW 74
43563: PPUSH
43564: CALL 44818 0 2
// end else
43568: GO 43670
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43570: LD_VAR 0 4
43574: PPUSH
43575: LD_VAR 0 2
43579: PUSH
43580: LD_VAR 0 9
43584: ARRAY
43585: PUSH
43586: LD_INT 1
43588: ARRAY
43589: PPUSH
43590: LD_VAR 0 2
43594: PUSH
43595: LD_VAR 0 9
43599: ARRAY
43600: PUSH
43601: LD_INT 2
43603: ARRAY
43604: PPUSH
43605: CALL_OW 297
43609: PUSH
43610: LD_INT 6
43612: GREATER
43613: IFFALSE 43656
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43615: LD_VAR 0 4
43619: PPUSH
43620: LD_VAR 0 2
43624: PUSH
43625: LD_VAR 0 9
43629: ARRAY
43630: PUSH
43631: LD_INT 1
43633: ARRAY
43634: PPUSH
43635: LD_VAR 0 2
43639: PUSH
43640: LD_VAR 0 9
43644: ARRAY
43645: PUSH
43646: LD_INT 2
43648: ARRAY
43649: PPUSH
43650: CALL_OW 114
43654: GO 43670
// SetTag ( i , tag ) ;
43656: LD_VAR 0 4
43660: PPUSH
43661: LD_VAR 0 9
43665: PPUSH
43666: CALL_OW 109
// end else
43670: GO 43743
// if enemy then
43672: LD_VAR 0 5
43676: IFFALSE 43743
// begin if GetWeapon ( i ) = ru_time_lapser then
43678: LD_VAR 0 4
43682: PPUSH
43683: CALL_OW 264
43687: PUSH
43688: LD_INT 49
43690: EQUAL
43691: IFFALSE 43719
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43693: LD_VAR 0 4
43697: PPUSH
43698: LD_VAR 0 5
43702: PPUSH
43703: LD_VAR 0 4
43707: PPUSH
43708: CALL_OW 74
43712: PPUSH
43713: CALL_OW 112
43717: GO 43743
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43719: LD_VAR 0 4
43723: PPUSH
43724: LD_VAR 0 5
43728: PPUSH
43729: LD_VAR 0 4
43733: PPUSH
43734: CALL_OW 74
43738: PPUSH
43739: CALL 44818 0 2
// end ; end ;
43743: GO 43319
43745: POP
43746: POP
// end ;
43747: LD_VAR 0 3
43751: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43752: LD_INT 0
43754: PPUSH
43755: PPUSH
43756: PPUSH
// if not unit or IsInUnit ( unit ) then
43757: LD_VAR 0 1
43761: NOT
43762: PUSH
43763: LD_VAR 0 1
43767: PPUSH
43768: CALL_OW 310
43772: OR
43773: IFFALSE 43777
// exit ;
43775: GO 43868
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43777: LD_ADDR_VAR 0 4
43781: PUSH
43782: LD_VAR 0 1
43786: PPUSH
43787: CALL_OW 250
43791: PPUSH
43792: LD_VAR 0 2
43796: PPUSH
43797: LD_INT 1
43799: PPUSH
43800: CALL_OW 272
43804: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43805: LD_ADDR_VAR 0 5
43809: PUSH
43810: LD_VAR 0 1
43814: PPUSH
43815: CALL_OW 251
43819: PPUSH
43820: LD_VAR 0 2
43824: PPUSH
43825: LD_INT 1
43827: PPUSH
43828: CALL_OW 273
43832: ST_TO_ADDR
// if ValidHex ( x , y ) then
43833: LD_VAR 0 4
43837: PPUSH
43838: LD_VAR 0 5
43842: PPUSH
43843: CALL_OW 488
43847: IFFALSE 43868
// ComTurnXY ( unit , x , y ) ;
43849: LD_VAR 0 1
43853: PPUSH
43854: LD_VAR 0 4
43858: PPUSH
43859: LD_VAR 0 5
43863: PPUSH
43864: CALL_OW 118
// end ;
43868: LD_VAR 0 3
43872: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43873: LD_INT 0
43875: PPUSH
43876: PPUSH
// result := false ;
43877: LD_ADDR_VAR 0 3
43881: PUSH
43882: LD_INT 0
43884: ST_TO_ADDR
// if not units then
43885: LD_VAR 0 2
43889: NOT
43890: IFFALSE 43894
// exit ;
43892: GO 43939
// for i in units do
43894: LD_ADDR_VAR 0 4
43898: PUSH
43899: LD_VAR 0 2
43903: PUSH
43904: FOR_IN
43905: IFFALSE 43937
// if See ( side , i ) then
43907: LD_VAR 0 1
43911: PPUSH
43912: LD_VAR 0 4
43916: PPUSH
43917: CALL_OW 292
43921: IFFALSE 43935
// begin result := true ;
43923: LD_ADDR_VAR 0 3
43927: PUSH
43928: LD_INT 1
43930: ST_TO_ADDR
// exit ;
43931: POP
43932: POP
43933: GO 43939
// end ;
43935: GO 43904
43937: POP
43938: POP
// end ;
43939: LD_VAR 0 3
43943: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
43944: LD_INT 0
43946: PPUSH
43947: PPUSH
43948: PPUSH
43949: PPUSH
// if not unit or not points then
43950: LD_VAR 0 1
43954: NOT
43955: PUSH
43956: LD_VAR 0 2
43960: NOT
43961: OR
43962: IFFALSE 43966
// exit ;
43964: GO 44056
// dist := 99999 ;
43966: LD_ADDR_VAR 0 5
43970: PUSH
43971: LD_INT 99999
43973: ST_TO_ADDR
// for i in points do
43974: LD_ADDR_VAR 0 4
43978: PUSH
43979: LD_VAR 0 2
43983: PUSH
43984: FOR_IN
43985: IFFALSE 44054
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43987: LD_ADDR_VAR 0 6
43991: PUSH
43992: LD_VAR 0 1
43996: PPUSH
43997: LD_VAR 0 4
44001: PUSH
44002: LD_INT 1
44004: ARRAY
44005: PPUSH
44006: LD_VAR 0 4
44010: PUSH
44011: LD_INT 2
44013: ARRAY
44014: PPUSH
44015: CALL_OW 297
44019: ST_TO_ADDR
// if tmpDist < dist then
44020: LD_VAR 0 6
44024: PUSH
44025: LD_VAR 0 5
44029: LESS
44030: IFFALSE 44052
// begin result := i ;
44032: LD_ADDR_VAR 0 3
44036: PUSH
44037: LD_VAR 0 4
44041: ST_TO_ADDR
// dist := tmpDist ;
44042: LD_ADDR_VAR 0 5
44046: PUSH
44047: LD_VAR 0 6
44051: ST_TO_ADDR
// end ; end ;
44052: GO 43984
44054: POP
44055: POP
// end ;
44056: LD_VAR 0 3
44060: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44061: LD_INT 0
44063: PPUSH
// uc_side := side ;
44064: LD_ADDR_OWVAR 20
44068: PUSH
44069: LD_VAR 0 1
44073: ST_TO_ADDR
// uc_nation := 3 ;
44074: LD_ADDR_OWVAR 21
44078: PUSH
44079: LD_INT 3
44081: ST_TO_ADDR
// vc_chassis := 25 ;
44082: LD_ADDR_OWVAR 37
44086: PUSH
44087: LD_INT 25
44089: ST_TO_ADDR
// vc_engine := engine_siberite ;
44090: LD_ADDR_OWVAR 39
44094: PUSH
44095: LD_INT 3
44097: ST_TO_ADDR
// vc_control := control_computer ;
44098: LD_ADDR_OWVAR 38
44102: PUSH
44103: LD_INT 3
44105: ST_TO_ADDR
// vc_weapon := 59 ;
44106: LD_ADDR_OWVAR 40
44110: PUSH
44111: LD_INT 59
44113: ST_TO_ADDR
// result := CreateVehicle ;
44114: LD_ADDR_VAR 0 5
44118: PUSH
44119: CALL_OW 45
44123: ST_TO_ADDR
// SetDir ( result , d ) ;
44124: LD_VAR 0 5
44128: PPUSH
44129: LD_VAR 0 4
44133: PPUSH
44134: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44138: LD_VAR 0 5
44142: PPUSH
44143: LD_VAR 0 2
44147: PPUSH
44148: LD_VAR 0 3
44152: PPUSH
44153: LD_INT 0
44155: PPUSH
44156: CALL_OW 48
// end ;
44160: LD_VAR 0 5
44164: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44165: LD_INT 0
44167: PPUSH
44168: PPUSH
44169: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44170: LD_ADDR_VAR 0 2
44174: PUSH
44175: LD_INT 0
44177: PUSH
44178: LD_INT 0
44180: PUSH
44181: LD_INT 0
44183: PUSH
44184: LD_INT 0
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44193: LD_VAR 0 1
44197: NOT
44198: PUSH
44199: LD_VAR 0 1
44203: PPUSH
44204: CALL_OW 264
44208: PUSH
44209: LD_INT 12
44211: PUSH
44212: LD_INT 51
44214: PUSH
44215: LD_INT 32
44217: PUSH
44218: LD_INT 89
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: IN
44227: NOT
44228: OR
44229: IFFALSE 44233
// exit ;
44231: GO 44331
// for i := 1 to 3 do
44233: LD_ADDR_VAR 0 3
44237: PUSH
44238: DOUBLE
44239: LD_INT 1
44241: DEC
44242: ST_TO_ADDR
44243: LD_INT 3
44245: PUSH
44246: FOR_TO
44247: IFFALSE 44329
// begin tmp := GetCargo ( cargo , i ) ;
44249: LD_ADDR_VAR 0 4
44253: PUSH
44254: LD_VAR 0 1
44258: PPUSH
44259: LD_VAR 0 3
44263: PPUSH
44264: CALL_OW 289
44268: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44269: LD_ADDR_VAR 0 2
44273: PUSH
44274: LD_VAR 0 2
44278: PPUSH
44279: LD_VAR 0 3
44283: PPUSH
44284: LD_VAR 0 4
44288: PPUSH
44289: CALL_OW 1
44293: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44294: LD_ADDR_VAR 0 2
44298: PUSH
44299: LD_VAR 0 2
44303: PPUSH
44304: LD_INT 4
44306: PPUSH
44307: LD_VAR 0 2
44311: PUSH
44312: LD_INT 4
44314: ARRAY
44315: PUSH
44316: LD_VAR 0 4
44320: PLUS
44321: PPUSH
44322: CALL_OW 1
44326: ST_TO_ADDR
// end ;
44327: GO 44246
44329: POP
44330: POP
// end ;
44331: LD_VAR 0 2
44335: RET
// export function Length ( array ) ; begin
44336: LD_INT 0
44338: PPUSH
// result := array + 0 ;
44339: LD_ADDR_VAR 0 2
44343: PUSH
44344: LD_VAR 0 1
44348: PUSH
44349: LD_INT 0
44351: PLUS
44352: ST_TO_ADDR
// end ;
44353: LD_VAR 0 2
44357: RET
// export function PrepareArray ( array ) ; begin
44358: LD_INT 0
44360: PPUSH
// result := array diff 0 ;
44361: LD_ADDR_VAR 0 2
44365: PUSH
44366: LD_VAR 0 1
44370: PUSH
44371: LD_INT 0
44373: DIFF
44374: ST_TO_ADDR
// if not result [ 1 ] then
44375: LD_VAR 0 2
44379: PUSH
44380: LD_INT 1
44382: ARRAY
44383: NOT
44384: IFFALSE 44404
// result := Delete ( result , 1 ) ;
44386: LD_ADDR_VAR 0 2
44390: PUSH
44391: LD_VAR 0 2
44395: PPUSH
44396: LD_INT 1
44398: PPUSH
44399: CALL_OW 3
44403: ST_TO_ADDR
// end ;
44404: LD_VAR 0 2
44408: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
44409: LD_INT 0
44411: PPUSH
44412: PPUSH
44413: PPUSH
44414: PPUSH
// sibRocketRange := 25 ;
44415: LD_ADDR_VAR 0 6
44419: PUSH
44420: LD_INT 25
44422: ST_TO_ADDR
// result := false ;
44423: LD_ADDR_VAR 0 4
44427: PUSH
44428: LD_INT 0
44430: ST_TO_ADDR
// for i := 0 to 5 do
44431: LD_ADDR_VAR 0 5
44435: PUSH
44436: DOUBLE
44437: LD_INT 0
44439: DEC
44440: ST_TO_ADDR
44441: LD_INT 5
44443: PUSH
44444: FOR_TO
44445: IFFALSE 44512
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
44447: LD_VAR 0 1
44451: PPUSH
44452: LD_VAR 0 5
44456: PPUSH
44457: LD_VAR 0 6
44461: PPUSH
44462: CALL_OW 272
44466: PPUSH
44467: LD_VAR 0 2
44471: PPUSH
44472: LD_VAR 0 5
44476: PPUSH
44477: LD_VAR 0 6
44481: PPUSH
44482: CALL_OW 273
44486: PPUSH
44487: LD_VAR 0 3
44491: PPUSH
44492: CALL_OW 309
44496: IFFALSE 44510
// begin result := true ;
44498: LD_ADDR_VAR 0 4
44502: PUSH
44503: LD_INT 1
44505: ST_TO_ADDR
// exit ;
44506: POP
44507: POP
44508: GO 44514
// end ;
44510: GO 44444
44512: POP
44513: POP
// end ;
44514: LD_VAR 0 4
44518: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
44519: LD_INT 0
44521: PPUSH
44522: PPUSH
44523: PPUSH
// if btype = b_depot then
44524: LD_VAR 0 2
44528: PUSH
44529: LD_INT 0
44531: EQUAL
44532: IFFALSE 44544
// begin result := true ;
44534: LD_ADDR_VAR 0 3
44538: PUSH
44539: LD_INT 1
44541: ST_TO_ADDR
// exit ;
44542: GO 44660
// end ; pom := GetBase ( depot ) ;
44544: LD_ADDR_VAR 0 4
44548: PUSH
44549: LD_VAR 0 1
44553: PPUSH
44554: CALL_OW 274
44558: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44559: LD_ADDR_VAR 0 5
44563: PUSH
44564: LD_VAR 0 2
44568: PPUSH
44569: LD_VAR 0 1
44573: PPUSH
44574: CALL_OW 248
44578: PPUSH
44579: CALL_OW 450
44583: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
44584: LD_ADDR_VAR 0 3
44588: PUSH
44589: LD_VAR 0 4
44593: PPUSH
44594: LD_INT 1
44596: PPUSH
44597: CALL_OW 275
44601: PUSH
44602: LD_VAR 0 5
44606: PUSH
44607: LD_INT 1
44609: ARRAY
44610: GREATEREQUAL
44611: PUSH
44612: LD_VAR 0 4
44616: PPUSH
44617: LD_INT 2
44619: PPUSH
44620: CALL_OW 275
44624: PUSH
44625: LD_VAR 0 5
44629: PUSH
44630: LD_INT 2
44632: ARRAY
44633: GREATEREQUAL
44634: AND
44635: PUSH
44636: LD_VAR 0 4
44640: PPUSH
44641: LD_INT 3
44643: PPUSH
44644: CALL_OW 275
44648: PUSH
44649: LD_VAR 0 5
44653: PUSH
44654: LD_INT 3
44656: ARRAY
44657: GREATEREQUAL
44658: AND
44659: ST_TO_ADDR
// end ;
44660: LD_VAR 0 3
44664: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
44665: LD_INT 0
44667: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
44668: LD_VAR 0 1
44672: PPUSH
44673: LD_VAR 0 2
44677: PPUSH
44678: LD_INT 0
44680: PPUSH
44681: LD_INT 0
44683: PPUSH
44684: LD_INT 1
44686: PPUSH
44687: LD_INT 0
44689: PPUSH
44690: CALL_OW 587
// end ;
44694: LD_VAR 0 3
44698: RET
// export function CenterOnNow ( unit ) ; begin
44699: LD_INT 0
44701: PPUSH
// result := IsInUnit ( unit ) ;
44702: LD_ADDR_VAR 0 2
44706: PUSH
44707: LD_VAR 0 1
44711: PPUSH
44712: CALL_OW 310
44716: ST_TO_ADDR
// if not result then
44717: LD_VAR 0 2
44721: NOT
44722: IFFALSE 44734
// result := unit ;
44724: LD_ADDR_VAR 0 2
44728: PUSH
44729: LD_VAR 0 1
44733: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
44734: LD_VAR 0 1
44738: PPUSH
44739: CALL_OW 87
// end ;
44743: LD_VAR 0 2
44747: RET
// export function ComMoveHex ( unit , hex ) ; begin
44748: LD_INT 0
44750: PPUSH
// if not hex then
44751: LD_VAR 0 2
44755: NOT
44756: IFFALSE 44760
// exit ;
44758: GO 44813
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
44760: LD_VAR 0 2
44764: PUSH
44765: LD_INT 1
44767: ARRAY
44768: PPUSH
44769: LD_VAR 0 2
44773: PUSH
44774: LD_INT 2
44776: ARRAY
44777: PPUSH
44778: CALL_OW 428
44782: IFFALSE 44786
// exit ;
44784: GO 44813
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
44786: LD_VAR 0 1
44790: PPUSH
44791: LD_VAR 0 2
44795: PUSH
44796: LD_INT 1
44798: ARRAY
44799: PPUSH
44800: LD_VAR 0 2
44804: PUSH
44805: LD_INT 2
44807: ARRAY
44808: PPUSH
44809: CALL_OW 111
// end ;
44813: LD_VAR 0 3
44817: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
44818: LD_INT 0
44820: PPUSH
44821: PPUSH
44822: PPUSH
// if not unit or not enemy then
44823: LD_VAR 0 1
44827: NOT
44828: PUSH
44829: LD_VAR 0 2
44833: NOT
44834: OR
44835: IFFALSE 44839
// exit ;
44837: GO 44963
// x := GetX ( enemy ) ;
44839: LD_ADDR_VAR 0 4
44843: PUSH
44844: LD_VAR 0 2
44848: PPUSH
44849: CALL_OW 250
44853: ST_TO_ADDR
// y := GetY ( enemy ) ;
44854: LD_ADDR_VAR 0 5
44858: PUSH
44859: LD_VAR 0 2
44863: PPUSH
44864: CALL_OW 251
44868: ST_TO_ADDR
// if ValidHex ( x , y ) then
44869: LD_VAR 0 4
44873: PPUSH
44874: LD_VAR 0 5
44878: PPUSH
44879: CALL_OW 488
44883: IFFALSE 44963
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
44885: LD_VAR 0 2
44889: PPUSH
44890: CALL_OW 247
44894: PUSH
44895: LD_INT 3
44897: PUSH
44898: LD_INT 2
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: IN
44905: PUSH
44906: LD_VAR 0 1
44910: PPUSH
44911: CALL_OW 255
44915: PPUSH
44916: LD_VAR 0 2
44920: PPUSH
44921: CALL_OW 292
44925: OR
44926: IFFALSE 44944
// ComAttackUnit ( unit , enemy ) else
44928: LD_VAR 0 1
44932: PPUSH
44933: LD_VAR 0 2
44937: PPUSH
44938: CALL_OW 115
44942: GO 44963
// ComAgressiveMove ( unit , x , y ) ;
44944: LD_VAR 0 1
44948: PPUSH
44949: LD_VAR 0 4
44953: PPUSH
44954: LD_VAR 0 5
44958: PPUSH
44959: CALL_OW 114
// end ;
44963: LD_VAR 0 3
44967: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
44968: LD_INT 0
44970: PPUSH
44971: PPUSH
44972: PPUSH
// list := AreaToList ( area , 0 ) ;
44973: LD_ADDR_VAR 0 5
44977: PUSH
44978: LD_VAR 0 1
44982: PPUSH
44983: LD_INT 0
44985: PPUSH
44986: CALL_OW 517
44990: ST_TO_ADDR
// if not list then
44991: LD_VAR 0 5
44995: NOT
44996: IFFALSE 45000
// exit ;
44998: GO 45130
// if all then
45000: LD_VAR 0 2
45004: IFFALSE 45092
// begin for i := 1 to list [ 1 ] do
45006: LD_ADDR_VAR 0 4
45010: PUSH
45011: DOUBLE
45012: LD_INT 1
45014: DEC
45015: ST_TO_ADDR
45016: LD_VAR 0 5
45020: PUSH
45021: LD_INT 1
45023: ARRAY
45024: PUSH
45025: FOR_TO
45026: IFFALSE 45088
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
45028: LD_ADDR_VAR 0 3
45032: PUSH
45033: LD_VAR 0 3
45037: PPUSH
45038: LD_VAR 0 3
45042: PUSH
45043: LD_INT 1
45045: PLUS
45046: PPUSH
45047: LD_VAR 0 5
45051: PUSH
45052: LD_INT 1
45054: ARRAY
45055: PUSH
45056: LD_VAR 0 4
45060: ARRAY
45061: PUSH
45062: LD_VAR 0 5
45066: PUSH
45067: LD_INT 2
45069: ARRAY
45070: PUSH
45071: LD_VAR 0 4
45075: ARRAY
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PPUSH
45081: CALL_OW 1
45085: ST_TO_ADDR
45086: GO 45025
45088: POP
45089: POP
// exit ;
45090: GO 45130
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45092: LD_ADDR_VAR 0 3
45096: PUSH
45097: LD_VAR 0 5
45101: PUSH
45102: LD_INT 1
45104: ARRAY
45105: PUSH
45106: LD_INT 1
45108: ARRAY
45109: PUSH
45110: LD_VAR 0 5
45114: PUSH
45115: LD_INT 2
45117: ARRAY
45118: PUSH
45119: LD_INT 1
45121: ARRAY
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: EMPTY
45128: LIST
45129: ST_TO_ADDR
// end ;
45130: LD_VAR 0 3
45134: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45135: LD_INT 0
45137: PPUSH
45138: PPUSH
// list := AreaToList ( area , 0 ) ;
45139: LD_ADDR_VAR 0 4
45143: PUSH
45144: LD_VAR 0 1
45148: PPUSH
45149: LD_INT 0
45151: PPUSH
45152: CALL_OW 517
45156: ST_TO_ADDR
// if not list then
45157: LD_VAR 0 4
45161: NOT
45162: IFFALSE 45166
// exit ;
45164: GO 45207
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45166: LD_ADDR_VAR 0 3
45170: PUSH
45171: LD_VAR 0 4
45175: PUSH
45176: LD_INT 1
45178: ARRAY
45179: PUSH
45180: LD_INT 1
45182: ARRAY
45183: PUSH
45184: LD_VAR 0 4
45188: PUSH
45189: LD_INT 2
45191: ARRAY
45192: PUSH
45193: LD_INT 1
45195: ARRAY
45196: PUSH
45197: LD_VAR 0 2
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: LIST
45206: ST_TO_ADDR
// end ;
45207: LD_VAR 0 3
45211: RET
// export function First ( array ) ; begin
45212: LD_INT 0
45214: PPUSH
// if not array then
45215: LD_VAR 0 1
45219: NOT
45220: IFFALSE 45224
// exit ;
45222: GO 45238
// result := array [ 1 ] ;
45224: LD_ADDR_VAR 0 2
45228: PUSH
45229: LD_VAR 0 1
45233: PUSH
45234: LD_INT 1
45236: ARRAY
45237: ST_TO_ADDR
// end ;
45238: LD_VAR 0 2
45242: RET
// export function Last ( array ) ; begin
45243: LD_INT 0
45245: PPUSH
// if not array then
45246: LD_VAR 0 1
45250: NOT
45251: IFFALSE 45255
// exit ;
45253: GO 45271
// result := array [ array ] ;
45255: LD_ADDR_VAR 0 2
45259: PUSH
45260: LD_VAR 0 1
45264: PUSH
45265: LD_VAR 0 1
45269: ARRAY
45270: ST_TO_ADDR
// end ;
45271: LD_VAR 0 2
45275: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
45276: LD_INT 0
45278: PPUSH
45279: PPUSH
// result := [ ] ;
45280: LD_ADDR_VAR 0 5
45284: PUSH
45285: EMPTY
45286: ST_TO_ADDR
// if not array then
45287: LD_VAR 0 1
45291: NOT
45292: IFFALSE 45296
// exit ;
45294: GO 45408
// for i := 1 to array do
45296: LD_ADDR_VAR 0 6
45300: PUSH
45301: DOUBLE
45302: LD_INT 1
45304: DEC
45305: ST_TO_ADDR
45306: LD_VAR 0 1
45310: PUSH
45311: FOR_TO
45312: IFFALSE 45406
// if array [ i ] [ index ] = value then
45314: LD_VAR 0 1
45318: PUSH
45319: LD_VAR 0 6
45323: ARRAY
45324: PUSH
45325: LD_VAR 0 2
45329: ARRAY
45330: PUSH
45331: LD_VAR 0 3
45335: EQUAL
45336: IFFALSE 45404
// begin if indexColumn then
45338: LD_VAR 0 4
45342: IFFALSE 45378
// result := Join ( result , array [ i ] [ indexColumn ] ) else
45344: LD_ADDR_VAR 0 5
45348: PUSH
45349: LD_VAR 0 5
45353: PPUSH
45354: LD_VAR 0 1
45358: PUSH
45359: LD_VAR 0 6
45363: ARRAY
45364: PUSH
45365: LD_VAR 0 4
45369: ARRAY
45370: PPUSH
45371: CALL 40596 0 2
45375: ST_TO_ADDR
45376: GO 45404
// result := Join ( result , array [ i ] ) ;
45378: LD_ADDR_VAR 0 5
45382: PUSH
45383: LD_VAR 0 5
45387: PPUSH
45388: LD_VAR 0 1
45392: PUSH
45393: LD_VAR 0 6
45397: ARRAY
45398: PPUSH
45399: CALL 40596 0 2
45403: ST_TO_ADDR
// end ;
45404: GO 45311
45406: POP
45407: POP
// end ;
45408: LD_VAR 0 5
45412: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
45413: LD_INT 0
45415: PPUSH
// if not vehicles or not parkingPoint then
45416: LD_VAR 0 1
45420: NOT
45421: PUSH
45422: LD_VAR 0 2
45426: NOT
45427: OR
45428: IFFALSE 45432
// exit ;
45430: GO 45530
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
45432: LD_ADDR_VAR 0 1
45436: PUSH
45437: LD_VAR 0 1
45441: PPUSH
45442: LD_INT 50
45444: PUSH
45445: EMPTY
45446: LIST
45447: PUSH
45448: LD_INT 3
45450: PUSH
45451: LD_INT 92
45453: PUSH
45454: LD_VAR 0 2
45458: PUSH
45459: LD_INT 1
45461: ARRAY
45462: PUSH
45463: LD_VAR 0 2
45467: PUSH
45468: LD_INT 2
45470: ARRAY
45471: PUSH
45472: LD_INT 8
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PPUSH
45489: CALL_OW 72
45493: ST_TO_ADDR
// if not vehicles then
45494: LD_VAR 0 1
45498: NOT
45499: IFFALSE 45503
// exit ;
45501: GO 45530
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
45503: LD_VAR 0 1
45507: PPUSH
45508: LD_VAR 0 2
45512: PUSH
45513: LD_INT 1
45515: ARRAY
45516: PPUSH
45517: LD_VAR 0 2
45521: PUSH
45522: LD_INT 2
45524: ARRAY
45525: PPUSH
45526: CALL_OW 111
// end ;
45530: LD_VAR 0 3
45534: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
45535: LD_INT 0
45537: PPUSH
45538: PPUSH
45539: PPUSH
// if not side or not area then
45540: LD_VAR 0 1
45544: NOT
45545: PUSH
45546: LD_VAR 0 2
45550: NOT
45551: OR
45552: IFFALSE 45556
// exit ;
45554: GO 45675
// tmp := AreaToList ( area , 0 ) ;
45556: LD_ADDR_VAR 0 5
45560: PUSH
45561: LD_VAR 0 2
45565: PPUSH
45566: LD_INT 0
45568: PPUSH
45569: CALL_OW 517
45573: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
45574: LD_ADDR_VAR 0 4
45578: PUSH
45579: DOUBLE
45580: LD_INT 1
45582: DEC
45583: ST_TO_ADDR
45584: LD_VAR 0 5
45588: PUSH
45589: LD_INT 1
45591: ARRAY
45592: PUSH
45593: FOR_TO
45594: IFFALSE 45673
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
45596: LD_VAR 0 5
45600: PUSH
45601: LD_INT 1
45603: ARRAY
45604: PUSH
45605: LD_VAR 0 4
45609: ARRAY
45610: PPUSH
45611: LD_VAR 0 5
45615: PUSH
45616: LD_INT 2
45618: ARRAY
45619: PUSH
45620: LD_VAR 0 4
45624: ARRAY
45625: PPUSH
45626: CALL_OW 351
45630: IFFALSE 45671
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
45632: LD_VAR 0 5
45636: PUSH
45637: LD_INT 1
45639: ARRAY
45640: PUSH
45641: LD_VAR 0 4
45645: ARRAY
45646: PPUSH
45647: LD_VAR 0 5
45651: PUSH
45652: LD_INT 2
45654: ARRAY
45655: PUSH
45656: LD_VAR 0 4
45660: ARRAY
45661: PPUSH
45662: LD_VAR 0 1
45666: PPUSH
45667: CALL_OW 244
// end ;
45671: GO 45593
45673: POP
45674: POP
// end ; end_of_file
45675: LD_VAR 0 3
45679: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull ; export function InitMultiplayer ; var i ; begin
45680: LD_INT 0
45682: PPUSH
45683: PPUSH
// disable ( mpActive ) ;
45684: LD_INT 100
45686: DISABLE_MARKED
// disable ( mpWin ) ;
45687: LD_INT 101
45689: DISABLE_MARKED
// disable ( mpLose ) ;
45690: LD_INT 102
45692: DISABLE_MARKED
// mpGameType := 0 ;
45693: LD_ADDR_EXP 3
45697: PUSH
45698: LD_INT 0
45700: ST_TO_ADDR
// mpGameSettings := [ ] ;
45701: LD_ADDR_EXP 6
45705: PUSH
45706: EMPTY
45707: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
45708: LD_ADDR_EXP 4
45712: PUSH
45713: EMPTY
45714: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
45715: LD_ADDR_EXP 5
45719: PUSH
45720: EMPTY
45721: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
45722: LD_ADDR_EXP 29
45726: PUSH
45727: LD_INT 2
45729: PUSH
45730: LD_INT 2
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: ST_TO_ADDR
// mpOilDeposits := [ ] ;
45737: LD_ADDR_EXP 12
45741: PUSH
45742: EMPTY
45743: ST_TO_ADDR
// mpSibDeposits := [ ] ;
45744: LD_ADDR_EXP 13
45748: PUSH
45749: EMPTY
45750: ST_TO_ADDR
// mpDepots := [ ] ;
45751: LD_ADDR_EXP 14
45755: PUSH
45756: EMPTY
45757: ST_TO_ADDR
// mpBuildings := [ ] ;
45758: LD_ADDR_EXP 17
45762: PUSH
45763: EMPTY
45764: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
45765: LD_ADDR_EXP 18
45769: PUSH
45770: EMPTY
45771: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
45772: LD_ADDR_EXP 19
45776: PUSH
45777: EMPTY
45778: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
45779: LD_ADDR_EXP 20
45783: PUSH
45784: EMPTY
45785: ST_TO_ADDR
// mpStartingResources := [ ] ;
45786: LD_ADDR_EXP 15
45790: PUSH
45791: EMPTY
45792: ST_TO_ADDR
// mpStartPos := [ ] ;
45793: LD_ADDR_EXP 21
45797: PUSH
45798: EMPTY
45799: ST_TO_ADDR
// mpBattleFlag := - 1 ;
45800: LD_ADDR_EXP 22
45804: PUSH
45805: LD_INT 1
45807: NEG
45808: ST_TO_ADDR
// mpBattleFlags := [ ] ;
45809: LD_ADDR_EXP 23
45813: PUSH
45814: EMPTY
45815: ST_TO_ADDR
// mpApemans := [ ] ;
45816: LD_ADDR_EXP 30
45820: PUSH
45821: EMPTY
45822: ST_TO_ADDR
// mpApemansArea := [ ] ;
45823: LD_ADDR_EXP 31
45827: PUSH
45828: EMPTY
45829: ST_TO_ADDR
// mpRespawn := [ ] ;
45830: LD_ADDR_EXP 32
45834: PUSH
45835: EMPTY
45836: ST_TO_ADDR
// mpKingArea := 0 ;
45837: LD_ADDR_EXP 33
45841: PUSH
45842: LD_INT 0
45844: ST_TO_ADDR
// mpPoints := [ ] ;
45845: LD_ADDR_EXP 34
45849: PUSH
45850: EMPTY
45851: ST_TO_ADDR
// mpVehicles := 0 ;
45852: LD_ADDR_EXP 35
45856: PUSH
45857: LD_INT 0
45859: ST_TO_ADDR
// mpShipments := 0 ;
45860: LD_ADDR_EXP 27
45864: PUSH
45865: LD_INT 0
45867: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
45868: LD_ADDR_EXP 39
45872: PUSH
45873: EMPTY
45874: PUSH
45875: EMPTY
45876: PUSH
45877: EMPTY
45878: PUSH
45879: EMPTY
45880: PUSH
45881: EMPTY
45882: PUSH
45883: EMPTY
45884: PUSH
45885: EMPTY
45886: PUSH
45887: EMPTY
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: ST_TO_ADDR
// mpEmissions := 0 ;
45899: LD_ADDR_EXP 36
45903: PUSH
45904: LD_INT 0
45906: ST_TO_ADDR
// mpPeopleSkill := 3 ;
45907: LD_ADDR_EXP 25
45911: PUSH
45912: LD_INT 3
45914: ST_TO_ADDR
// mpPeopleAmount := 15 ;
45915: LD_ADDR_EXP 24
45919: PUSH
45920: LD_INT 15
45922: ST_TO_ADDR
// mpDisplayStrings := 0 ;
45923: LD_ADDR_EXP 37
45927: PUSH
45928: LD_INT 0
45930: ST_TO_ADDR
// mpGameActive := false ;
45931: LD_ADDR_EXP 38
45935: PUSH
45936: LD_INT 0
45938: ST_TO_ADDR
// for i := 1 to 32 do
45939: LD_ADDR_VAR 0 2
45943: PUSH
45944: DOUBLE
45945: LD_INT 1
45947: DEC
45948: ST_TO_ADDR
45949: LD_INT 32
45951: PUSH
45952: FOR_TO
45953: IFFALSE 45980
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
45955: LD_ADDR_EXP 6
45959: PUSH
45960: LD_EXP 6
45964: PPUSH
45965: LD_VAR 0 2
45969: PPUSH
45970: LD_INT 0
45972: PPUSH
45973: CALL_OW 1
45977: ST_TO_ADDR
45978: GO 45952
45980: POP
45981: POP
// end ;
45982: LD_VAR 0 1
45986: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
45987: LD_INT 0
45989: PPUSH
45990: PPUSH
45991: PPUSH
45992: PPUSH
45993: PPUSH
45994: PPUSH
45995: PPUSH
45996: PPUSH
45997: PPUSH
45998: PPUSH
45999: PPUSH
46000: PPUSH
46001: PPUSH
46002: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing ] ;
46003: LD_ADDR_VAR 0 14
46007: PUSH
46008: LD_INT 1
46010: PUSH
46011: LD_INT 2
46013: PUSH
46014: LD_INT 3
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: LIST
46021: ST_TO_ADDR
// for i in gameTypes do
46022: LD_ADDR_VAR 0 2
46026: PUSH
46027: LD_VAR 0 14
46031: PUSH
46032: FOR_IN
46033: IFFALSE 46042
// disable ( i ) ;
46035: LD_VAR 0 2
46039: DISABLE_MARKED
46040: GO 46032
46042: POP
46043: POP
// if Multiplayer then
46044: LD_OWVAR 4
46048: IFFALSE 46232
// begin mpGameType := mp_game_type ;
46050: LD_ADDR_EXP 3
46054: PUSH
46055: LD_OWVAR 6
46059: ST_TO_ADDR
// your_side := mp_player_side ;
46060: LD_ADDR_OWVAR 2
46064: PUSH
46065: LD_OWVAR 7
46069: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
46070: LD_ADDR_EXP 7
46074: PUSH
46075: LD_OWVAR 17
46079: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
46080: LD_ADDR_EXP 8
46084: PUSH
46085: LD_OWVAR 15
46089: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
46090: LD_ADDR_EXP 9
46094: PUSH
46095: LD_OWVAR 16
46099: ST_TO_ADDR
// mpTeams := mp_teams ;
46100: LD_ADDR_EXP 10
46104: PUSH
46105: LD_OWVAR 12
46109: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
46110: LD_ADDR_VAR 0 2
46114: PUSH
46115: DOUBLE
46116: LD_INT 1
46118: DEC
46119: ST_TO_ADDR
46120: LD_EXP 4
46124: PPUSH
46125: CALL 5007 0 1
46129: PUSH
46130: FOR_TO
46131: IFFALSE 46207
// begin setting := mpGameSettingsKeys [ i ] ;
46133: LD_ADDR_VAR 0 12
46137: PUSH
46138: LD_EXP 4
46142: PUSH
46143: LD_VAR 0 2
46147: ARRAY
46148: ST_TO_ADDR
// if setting then
46149: LD_VAR 0 12
46153: IFFALSE 46205
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
46155: LD_ADDR_EXP 6
46159: PUSH
46160: LD_EXP 6
46164: PPUSH
46165: LD_VAR 0 2
46169: PPUSH
46170: LD_EXP 5
46174: PUSH
46175: LD_VAR 0 2
46179: ARRAY
46180: PUSH
46181: LD_VAR 0 2
46185: PUSH
46186: LD_INT 1
46188: MINUS
46189: PPUSH
46190: CALL_OW 426
46194: PUSH
46195: LD_INT 1
46197: PLUS
46198: ARRAY
46199: PPUSH
46200: CALL_OW 1
46204: ST_TO_ADDR
// end ;
46205: GO 46130
46207: POP
46208: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
46209: LD_ADDR_EXP 11
46213: PUSH
46214: LD_EXP 8
46218: PUSH
46219: LD_INT 0
46221: PUSH
46222: EMPTY
46223: LIST
46224: DIFF
46225: PUSH
46226: LD_INT 1
46228: GREATER
46229: ST_TO_ADDR
// end else
46230: GO 46232
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
46232: LD_EXP 3
46236: PPUSH
46237: CALL 836 0 1
// if Count ( mpMarkedAreas ) then
46241: LD_EXP 18
46245: PPUSH
46246: CALL 5007 0 1
46250: IFFALSE 46281
// begin for i in mpMarkedAreas do
46252: LD_ADDR_VAR 0 2
46256: PUSH
46257: LD_EXP 18
46261: PUSH
46262: FOR_IN
46263: IFFALSE 46279
// SetAreaMapShow ( i , 0 ) ;
46265: LD_VAR 0 2
46269: PPUSH
46270: LD_INT 0
46272: PPUSH
46273: CALL_OW 424
46277: GO 46262
46279: POP
46280: POP
// end ; for i := 1 to 8 do
46281: LD_ADDR_VAR 0 2
46285: PUSH
46286: DOUBLE
46287: LD_INT 1
46289: DEC
46290: ST_TO_ADDR
46291: LD_INT 8
46293: PUSH
46294: FOR_TO
46295: IFFALSE 47511
// begin if not mpSidePositions [ i ] then
46297: LD_EXP 7
46301: PUSH
46302: LD_VAR 0 2
46306: ARRAY
46307: NOT
46308: IFFALSE 46312
// continue ;
46310: GO 46294
// side := i ;
46312: LD_ADDR_VAR 0 7
46316: PUSH
46317: LD_VAR 0 2
46321: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
46322: LD_ADDR_VAR 0 9
46326: PUSH
46327: LD_EXP 9
46331: PUSH
46332: LD_VAR 0 2
46336: ARRAY
46337: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
46338: LD_ADDR_VAR 0 8
46342: PUSH
46343: LD_EXP 7
46347: PUSH
46348: LD_VAR 0 2
46352: ARRAY
46353: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
46354: LD_EXP 12
46358: PPUSH
46359: CALL 5007 0 1
46363: IFFALSE 46440
// begin for j in mpOilDeposits [ pos ] do
46365: LD_ADDR_VAR 0 3
46369: PUSH
46370: LD_EXP 12
46374: PUSH
46375: LD_VAR 0 8
46379: ARRAY
46380: PUSH
46381: FOR_IN
46382: IFFALSE 46438
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
46384: LD_VAR 0 3
46388: PUSH
46389: LD_INT 1
46391: ARRAY
46392: PPUSH
46393: LD_VAR 0 3
46397: PUSH
46398: LD_INT 2
46400: ARRAY
46401: PPUSH
46402: LD_INT 2
46404: PPUSH
46405: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46409: LD_VAR 0 3
46413: PUSH
46414: LD_INT 1
46416: ARRAY
46417: PPUSH
46418: LD_VAR 0 3
46422: PUSH
46423: LD_INT 2
46425: ARRAY
46426: PPUSH
46427: LD_VAR 0 7
46431: PPUSH
46432: CALL_OW 441
// end ;
46436: GO 46381
46438: POP
46439: POP
// end ; if Count ( mpSibDeposits ) then
46440: LD_EXP 13
46444: PPUSH
46445: CALL 5007 0 1
46449: IFFALSE 46526
// begin for j in mpSibDeposits [ pos ] do
46451: LD_ADDR_VAR 0 3
46455: PUSH
46456: LD_EXP 13
46460: PUSH
46461: LD_VAR 0 8
46465: ARRAY
46466: PUSH
46467: FOR_IN
46468: IFFALSE 46524
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
46470: LD_VAR 0 3
46474: PUSH
46475: LD_INT 1
46477: ARRAY
46478: PPUSH
46479: LD_VAR 0 3
46483: PUSH
46484: LD_INT 2
46486: ARRAY
46487: PPUSH
46488: LD_INT 3
46490: PPUSH
46491: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
46495: LD_VAR 0 3
46499: PUSH
46500: LD_INT 1
46502: ARRAY
46503: PPUSH
46504: LD_VAR 0 3
46508: PUSH
46509: LD_INT 2
46511: ARRAY
46512: PPUSH
46513: LD_VAR 0 7
46517: PPUSH
46518: CALL_OW 441
// end ;
46522: GO 46467
46524: POP
46525: POP
// end ; InitBc ;
46526: CALL_OW 21
// InitUc ;
46530: CALL_OW 18
// uc_side := side ;
46534: LD_ADDR_OWVAR 20
46538: PUSH
46539: LD_VAR 0 7
46543: ST_TO_ADDR
// uc_nation := nation ;
46544: LD_ADDR_OWVAR 21
46548: PUSH
46549: LD_VAR 0 9
46553: ST_TO_ADDR
// if Count ( mpDepots ) then
46554: LD_EXP 14
46558: PPUSH
46559: CALL 5007 0 1
46563: IFFALSE 46733
// begin bc_level := 0 ;
46565: LD_ADDR_OWVAR 43
46569: PUSH
46570: LD_INT 0
46572: ST_TO_ADDR
// bc_type := b_depot ;
46573: LD_ADDR_OWVAR 42
46577: PUSH
46578: LD_INT 0
46580: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
46581: LD_ADDR_VAR 0 4
46585: PUSH
46586: LD_EXP 14
46590: PUSH
46591: LD_VAR 0 8
46595: ARRAY
46596: PUSH
46597: LD_INT 1
46599: ARRAY
46600: PPUSH
46601: LD_EXP 14
46605: PUSH
46606: LD_VAR 0 8
46610: ARRAY
46611: PUSH
46612: LD_INT 2
46614: ARRAY
46615: PPUSH
46616: LD_EXP 14
46620: PUSH
46621: LD_VAR 0 8
46625: ARRAY
46626: PUSH
46627: LD_INT 3
46629: ARRAY
46630: PPUSH
46631: CALL_OW 47
46635: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
46636: LD_VAR 0 4
46640: PPUSH
46641: LD_STRING @
46643: PUSH
46644: LD_VAR 0 7
46648: STR
46649: PPUSH
46650: CALL_OW 500
// SetTag ( b , side ) ;
46654: LD_VAR 0 4
46658: PPUSH
46659: LD_VAR 0 7
46663: PPUSH
46664: CALL_OW 109
// if Count ( mpStartingResources ) then
46668: LD_EXP 15
46672: PPUSH
46673: CALL 5007 0 1
46677: IFFALSE 46731
// begin for j := 1 to mpStartingResources do
46679: LD_ADDR_VAR 0 3
46683: PUSH
46684: DOUBLE
46685: LD_INT 1
46687: DEC
46688: ST_TO_ADDR
46689: LD_EXP 15
46693: PUSH
46694: FOR_TO
46695: IFFALSE 46729
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
46697: LD_VAR 0 4
46701: PPUSH
46702: CALL_OW 274
46706: PPUSH
46707: LD_VAR 0 3
46711: PPUSH
46712: LD_EXP 15
46716: PUSH
46717: LD_VAR 0 3
46721: ARRAY
46722: PPUSH
46723: CALL_OW 277
46727: GO 46694
46729: POP
46730: POP
// end ; end else
46731: GO 46880
// if Count ( mpStartingResources ) then
46733: LD_EXP 15
46737: PPUSH
46738: CALL 5007 0 1
46742: IFFALSE 46880
// begin for j := 1 to mpStartingResources do
46744: LD_ADDR_VAR 0 3
46748: PUSH
46749: DOUBLE
46750: LD_INT 1
46752: DEC
46753: ST_TO_ADDR
46754: LD_EXP 15
46758: PUSH
46759: FOR_TO
46760: IFFALSE 46878
// begin resources := mpStartingResources [ j ] ;
46762: LD_ADDR_VAR 0 13
46766: PUSH
46767: LD_EXP 15
46771: PUSH
46772: LD_VAR 0 3
46776: ARRAY
46777: ST_TO_ADDR
// repeat if resources >= 50 then
46778: LD_VAR 0 13
46782: PUSH
46783: LD_INT 50
46785: GREATEREQUAL
46786: IFFALSE 46832
// begin CreateResourcesXYR ( j , 5 , x , y , 4 , false ) ;
46788: LD_VAR 0 3
46792: PPUSH
46793: LD_INT 5
46795: PPUSH
46796: LD_VAR 0 5
46800: PPUSH
46801: LD_VAR 0 6
46805: PPUSH
46806: LD_INT 4
46808: PPUSH
46809: LD_INT 0
46811: PPUSH
46812: CALL_OW 60
// resources := resources - 50 ;
46816: LD_ADDR_VAR 0 13
46820: PUSH
46821: LD_VAR 0 13
46825: PUSH
46826: LD_INT 50
46828: MINUS
46829: ST_TO_ADDR
// end else
46830: GO 46866
// CreateResourcesXYR ( j , resources div 10 , x , y , 4 , false ) ;
46832: LD_VAR 0 3
46836: PPUSH
46837: LD_VAR 0 13
46841: PUSH
46842: LD_INT 10
46844: DIV
46845: PPUSH
46846: LD_VAR 0 5
46850: PPUSH
46851: LD_VAR 0 6
46855: PPUSH
46856: LD_INT 4
46858: PPUSH
46859: LD_INT 0
46861: PPUSH
46862: CALL_OW 60
// until resources <= 0 ;
46866: LD_VAR 0 13
46870: PUSH
46871: LD_INT 0
46873: LESSEQUAL
46874: IFFALSE 46778
// end ;
46876: GO 46759
46878: POP
46879: POP
// end ; if Count ( mpBuildings ) then
46880: LD_EXP 17
46884: PPUSH
46885: CALL 5007 0 1
46889: IFFALSE 46967
// begin for j in mpBuildings [ pos ] do
46891: LD_ADDR_VAR 0 3
46895: PUSH
46896: LD_EXP 17
46900: PUSH
46901: LD_VAR 0 8
46905: ARRAY
46906: PUSH
46907: FOR_IN
46908: IFFALSE 46965
// begin bc_level := 0 ;
46910: LD_ADDR_OWVAR 43
46914: PUSH
46915: LD_INT 0
46917: ST_TO_ADDR
// bc_type := j [ 1 ] ;
46918: LD_ADDR_OWVAR 42
46922: PUSH
46923: LD_VAR 0 3
46927: PUSH
46928: LD_INT 1
46930: ARRAY
46931: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
46932: LD_VAR 0 3
46936: PUSH
46937: LD_INT 2
46939: ARRAY
46940: PPUSH
46941: LD_VAR 0 3
46945: PUSH
46946: LD_INT 3
46948: ARRAY
46949: PPUSH
46950: LD_VAR 0 3
46954: PUSH
46955: LD_INT 4
46957: ARRAY
46958: PPUSH
46959: CALL_OW 47
// end ;
46963: GO 46907
46965: POP
46966: POP
// end ; if mpBattleFlag > - 1 then
46967: LD_EXP 22
46971: PUSH
46972: LD_INT 1
46974: NEG
46975: GREATER
46976: IFFALSE 47135
// begin x := mpStartPos [ pos ] [ 1 ] ;
46978: LD_ADDR_VAR 0 5
46982: PUSH
46983: LD_EXP 21
46987: PUSH
46988: LD_VAR 0 8
46992: ARRAY
46993: PUSH
46994: LD_INT 1
46996: ARRAY
46997: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
46998: LD_ADDR_VAR 0 6
47002: PUSH
47003: LD_EXP 21
47007: PUSH
47008: LD_VAR 0 8
47012: ARRAY
47013: PUSH
47014: LD_INT 2
47016: ARRAY
47017: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
47018: LD_VAR 0 5
47022: PPUSH
47023: LD_VAR 0 6
47027: PPUSH
47028: LD_INT 12
47030: PPUSH
47031: LD_INT 2
47033: PPUSH
47034: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
47038: LD_ADDR_EXP 23
47042: PUSH
47043: LD_EXP 23
47047: PPUSH
47048: LD_VAR 0 7
47052: PPUSH
47053: LD_VAR 0 7
47057: PPUSH
47058: LD_VAR 0 5
47062: PPUSH
47063: LD_VAR 0 6
47067: PPUSH
47068: LD_INT 1
47070: PUSH
47071: LD_INT 100
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 2
47080: PUSH
47081: LD_INT 70
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 3
47090: PUSH
47091: LD_INT 40
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 10
47100: PUSH
47101: LD_INT 25
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 20
47110: PUSH
47111: LD_INT 100
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: PPUSH
47125: CALL_OW 418
47129: PPUSH
47130: CALL_OW 1
47134: ST_TO_ADDR
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
47135: LD_EXP 26
47139: PUSH
47140: LD_INT 20
47142: PPUSH
47143: LD_VAR 0 7
47147: PPUSH
47148: CALL_OW 321
47152: PUSH
47153: LD_INT 1
47155: EQUAL
47156: AND
47157: IFFALSE 47174
// SetTech ( tech_SibDet , side , state_researched ) ;
47159: LD_INT 20
47161: PPUSH
47162: LD_VAR 0 7
47166: PPUSH
47167: LD_INT 2
47169: PPUSH
47170: CALL_OW 322
// SetTech ( tech_artifact , side , state_disabled ) ;
47174: LD_INT 24
47176: PPUSH
47177: LD_VAR 0 7
47181: PPUSH
47182: LD_INT 0
47184: PPUSH
47185: CALL_OW 322
// if mpSibBomb = 1 then
47189: LD_EXP 28
47193: PUSH
47194: LD_INT 1
47196: EQUAL
47197: IFFALSE 47216
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
47199: LD_INT 25
47201: PPUSH
47202: LD_VAR 0 7
47206: PPUSH
47207: LD_INT 1
47209: PPUSH
47210: CALL_OW 322
// end else
47214: GO 47231
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
47216: LD_INT 25
47218: PPUSH
47219: LD_VAR 0 7
47223: PPUSH
47224: LD_INT 0
47226: PPUSH
47227: CALL_OW 322
// end ; if mpVehicles then
47231: LD_EXP 35
47235: IFFALSE 47334
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
47237: LD_ADDR_VAR 0 3
47241: PUSH
47242: LD_VAR 0 7
47246: PPUSH
47247: LD_VAR 0 9
47251: PPUSH
47252: LD_EXP 35
47256: PPUSH
47257: CALL 48193 0 3
47261: PUSH
47262: FOR_IN
47263: IFFALSE 47332
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
47265: LD_VAR 0 3
47269: PPUSH
47270: LD_INT 0
47272: PPUSH
47273: LD_INT 5
47275: PPUSH
47276: CALL_OW 12
47280: PPUSH
47281: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47285: LD_VAR 0 3
47289: PPUSH
47290: LD_EXP 21
47294: PUSH
47295: LD_VAR 0 8
47299: ARRAY
47300: PUSH
47301: LD_INT 1
47303: ARRAY
47304: PPUSH
47305: LD_EXP 21
47309: PUSH
47310: LD_VAR 0 8
47314: ARRAY
47315: PUSH
47316: LD_INT 2
47318: ARRAY
47319: PPUSH
47320: LD_INT 12
47322: PPUSH
47323: LD_INT 0
47325: PPUSH
47326: CALL_OW 50
// end ;
47330: GO 47262
47332: POP
47333: POP
// end ; team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
47334: LD_ADDR_VAR 0 11
47338: PUSH
47339: LD_VAR 0 7
47343: PPUSH
47344: LD_VAR 0 9
47348: PPUSH
47349: LD_EXP 24
47353: PPUSH
47354: LD_EXP 25
47358: PPUSH
47359: CALL 47923 0 4
47363: ST_TO_ADDR
// for j in team do
47364: LD_ADDR_VAR 0 3
47368: PUSH
47369: LD_VAR 0 11
47373: PUSH
47374: FOR_IN
47375: IFFALSE 47424
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
47377: LD_VAR 0 3
47381: PPUSH
47382: LD_EXP 21
47386: PUSH
47387: LD_VAR 0 8
47391: ARRAY
47392: PUSH
47393: LD_INT 1
47395: ARRAY
47396: PPUSH
47397: LD_EXP 21
47401: PUSH
47402: LD_VAR 0 8
47406: ARRAY
47407: PUSH
47408: LD_INT 2
47410: ARRAY
47411: PPUSH
47412: LD_INT 12
47414: PPUSH
47415: LD_INT 0
47417: PPUSH
47418: CALL_OW 50
47422: GO 47374
47424: POP
47425: POP
// if mpApemans then
47426: LD_EXP 30
47430: IFFALSE 47509
// begin for j := 1 to mpApemans do
47432: LD_ADDR_VAR 0 3
47436: PUSH
47437: DOUBLE
47438: LD_INT 1
47440: DEC
47441: ST_TO_ADDR
47442: LD_EXP 30
47446: PUSH
47447: FOR_TO
47448: IFFALSE 47507
// begin PrepareApeman ( - 5 ) ;
47450: LD_INT 5
47452: NEG
47453: PPUSH
47454: CALL 36864 0 1
// ape := CreateHuman ;
47458: LD_ADDR_VAR 0 10
47462: PUSH
47463: CALL_OW 44
47467: ST_TO_ADDR
// SetTag ( ape , side ) ;
47468: LD_VAR 0 10
47472: PPUSH
47473: LD_VAR 0 7
47477: PPUSH
47478: CALL_OW 109
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
47482: LD_VAR 0 10
47486: PPUSH
47487: LD_EXP 31
47491: PUSH
47492: LD_VAR 0 8
47496: ARRAY
47497: PPUSH
47498: LD_INT 0
47500: PPUSH
47501: CALL_OW 49
// end ;
47505: GO 47447
47507: POP
47508: POP
// end ; end ;
47509: GO 46294
47511: POP
47512: POP
// if not mpTeamGame then
47513: LD_EXP 11
47517: NOT
47518: IFFALSE 47616
// begin for i := 1 to 8 do
47520: LD_ADDR_VAR 0 2
47524: PUSH
47525: DOUBLE
47526: LD_INT 1
47528: DEC
47529: ST_TO_ADDR
47530: LD_INT 8
47532: PUSH
47533: FOR_TO
47534: IFFALSE 47612
// for j := 1 to 8 do
47536: LD_ADDR_VAR 0 3
47540: PUSH
47541: DOUBLE
47542: LD_INT 1
47544: DEC
47545: ST_TO_ADDR
47546: LD_INT 8
47548: PUSH
47549: FOR_TO
47550: IFFALSE 47608
// if i <> j then
47552: LD_VAR 0 2
47556: PUSH
47557: LD_VAR 0 3
47561: NONEQUAL
47562: IFFALSE 47586
// SetAttitude ( i , j , att_neutral , true ) else
47564: LD_VAR 0 2
47568: PPUSH
47569: LD_VAR 0 3
47573: PPUSH
47574: LD_INT 0
47576: PPUSH
47577: LD_INT 1
47579: PPUSH
47580: CALL_OW 80
47584: GO 47606
// SetAttitude ( i , j , att_friend , true ) ;
47586: LD_VAR 0 2
47590: PPUSH
47591: LD_VAR 0 3
47595: PPUSH
47596: LD_INT 1
47598: PPUSH
47599: LD_INT 1
47601: PPUSH
47602: CALL_OW 80
47606: GO 47549
47608: POP
47609: POP
47610: GO 47533
47612: POP
47613: POP
// end else
47614: GO 47685
// begin if mpSharedVision then
47616: LD_EXP 16
47620: IFFALSE 47685
// begin for i in mpTeams do
47622: LD_ADDR_VAR 0 2
47626: PUSH
47627: LD_EXP 10
47631: PUSH
47632: FOR_IN
47633: IFFALSE 47683
// for j := 2 to i do
47635: LD_ADDR_VAR 0 3
47639: PUSH
47640: DOUBLE
47641: LD_INT 2
47643: DEC
47644: ST_TO_ADDR
47645: LD_VAR 0 2
47649: PUSH
47650: FOR_TO
47651: IFFALSE 47679
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
47653: LD_VAR 0 2
47657: PUSH
47658: LD_VAR 0 3
47662: ARRAY
47663: PPUSH
47664: LD_VAR 0 2
47668: PUSH
47669: LD_INT 1
47671: ARRAY
47672: PPUSH
47673: CALL_OW 343
47677: GO 47650
47679: POP
47680: POP
47681: GO 47632
47683: POP
47684: POP
// end ; end ; for i := 1 to 8 do
47685: LD_ADDR_VAR 0 2
47689: PUSH
47690: DOUBLE
47691: LD_INT 1
47693: DEC
47694: ST_TO_ADDR
47695: LD_INT 8
47697: PUSH
47698: FOR_TO
47699: IFFALSE 47789
// for j := 1 to 8 do
47701: LD_ADDR_VAR 0 3
47705: PUSH
47706: DOUBLE
47707: LD_INT 1
47709: DEC
47710: ST_TO_ADDR
47711: LD_INT 8
47713: PUSH
47714: FOR_TO
47715: IFFALSE 47785
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
47717: LD_EXP 8
47721: PUSH
47722: LD_VAR 0 2
47726: ARRAY
47727: PUSH
47728: LD_EXP 8
47732: PUSH
47733: LD_VAR 0 3
47737: ARRAY
47738: EQUAL
47739: IFFALSE 47763
// SetAttitude ( i , j , att_friend , true ) else
47741: LD_VAR 0 2
47745: PPUSH
47746: LD_VAR 0 3
47750: PPUSH
47751: LD_INT 1
47753: PPUSH
47754: LD_INT 1
47756: PPUSH
47757: CALL_OW 80
47761: GO 47783
// SetAttitude ( i , j , att_enemy , true ) ;
47763: LD_VAR 0 2
47767: PPUSH
47768: LD_VAR 0 3
47772: PPUSH
47773: LD_INT 2
47775: PPUSH
47776: LD_INT 1
47778: PPUSH
47779: CALL_OW 80
47783: GO 47714
47785: POP
47786: POP
47787: GO 47698
47789: POP
47790: POP
// music_nat := mpSideNations [ your_side ] ;
47791: LD_ADDR_OWVAR 71
47795: PUSH
47796: LD_EXP 9
47800: PUSH
47801: LD_OWVAR 2
47805: ARRAY
47806: ST_TO_ADDR
// if IAmSpec then
47807: CALL_OW 531
47811: IFFALSE 47852
// begin FogOff ( true ) ;
47813: LD_INT 1
47815: PPUSH
47816: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
47820: LD_EXP 29
47824: PUSH
47825: LD_INT 1
47827: ARRAY
47828: PUSH
47829: LD_INT 2
47831: DIV
47832: PPUSH
47833: LD_EXP 29
47837: PUSH
47838: LD_INT 2
47840: ARRAY
47841: PUSH
47842: LD_INT 2
47844: DIV
47845: PPUSH
47846: CALL_OW 86
// end else
47850: GO 47898
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
47852: LD_EXP 21
47856: PUSH
47857: LD_EXP 7
47861: PUSH
47862: LD_OWVAR 2
47866: ARRAY
47867: ARRAY
47868: PUSH
47869: LD_INT 1
47871: ARRAY
47872: PPUSH
47873: LD_EXP 21
47877: PUSH
47878: LD_EXP 7
47882: PUSH
47883: LD_OWVAR 2
47887: ARRAY
47888: ARRAY
47889: PUSH
47890: LD_INT 2
47892: ARRAY
47893: PPUSH
47894: CALL_OW 86
// end ; BeginBuildUp ;
47898: CALL 48671 0 0
// enable ( mpActive ) ;
47902: LD_INT 100
47904: ENABLE_MARKED
// enable ( mpGameType ) ;
47905: LD_EXP 3
47909: ENABLE_MARKED
// mpGameActive := true ;
47910: LD_ADDR_EXP 38
47914: PUSH
47915: LD_INT 1
47917: ST_TO_ADDR
// end ;
47918: LD_VAR 0 1
47922: RET
// function mpPrepareTeam ( side , nation , amount , skill ) ; var i , class ; begin
47923: LD_INT 0
47925: PPUSH
47926: PPUSH
47927: PPUSH
// result := [ ] ;
47928: LD_ADDR_VAR 0 5
47932: PUSH
47933: EMPTY
47934: ST_TO_ADDR
// class := class_soldier ;
47935: LD_ADDR_VAR 0 7
47939: PUSH
47940: LD_INT 1
47942: ST_TO_ADDR
// uc_side := side ;
47943: LD_ADDR_OWVAR 20
47947: PUSH
47948: LD_VAR 0 1
47952: ST_TO_ADDR
// uc_nation := nation ;
47953: LD_ADDR_OWVAR 21
47957: PUSH
47958: LD_VAR 0 2
47962: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
47963: LD_ADDR_OWVAR 26
47967: PUSH
47968: LD_OWVAR 19
47972: PUSH
47973: LD_VAR 0 1
47977: ARRAY
47978: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
47979: LD_INT 1
47981: PPUSH
47982: LD_INT 2
47984: PPUSH
47985: CALL_OW 12
47989: PPUSH
47990: LD_VAR 0 7
47994: PPUSH
47995: LD_VAR 0 4
47999: PUSH
48000: LD_INT 2
48002: PLUS
48003: PPUSH
48004: CALL_OW 380
// hc_importance := 105 ;
48008: LD_ADDR_OWVAR 32
48012: PUSH
48013: LD_INT 105
48015: ST_TO_ADDR
// if Multiplayer then
48016: LD_OWVAR 4
48020: IFFALSE 48060
// begin hc_gallery := MULTIAVATARS ;
48022: LD_ADDR_OWVAR 33
48026: PUSH
48027: LD_STRING MULTIAVATARS
48029: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
48030: LD_ADDR_OWVAR 34
48034: PUSH
48035: LD_VAR 0 1
48039: PPUSH
48040: CALL_OW 525
48044: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
48045: LD_ADDR_OWVAR 27
48049: PUSH
48050: LD_VAR 0 1
48054: PPUSH
48055: CALL_OW 526
48059: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
48060: LD_ADDR_VAR 0 5
48064: PUSH
48065: LD_VAR 0 5
48069: PPUSH
48070: CALL_OW 44
48074: PPUSH
48075: CALL 40596 0 2
48079: ST_TO_ADDR
// InitHc_All ( ) ;
48080: CALL_OW 584
// class := 2 ;
48084: LD_ADDR_VAR 0 7
48088: PUSH
48089: LD_INT 2
48091: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
48092: LD_ADDR_VAR 0 6
48096: PUSH
48097: DOUBLE
48098: LD_INT 1
48100: DEC
48101: ST_TO_ADDR
48102: LD_VAR 0 3
48106: PUSH
48107: LD_INT 1
48109: MINUS
48110: PUSH
48111: FOR_TO
48112: IFFALSE 48186
// begin PrepareHuman ( false , class , skill ) ;
48114: LD_INT 0
48116: PPUSH
48117: LD_VAR 0 7
48121: PPUSH
48122: LD_VAR 0 4
48126: PPUSH
48127: CALL_OW 380
// result := Join ( result , CreateHuman ) ;
48131: LD_ADDR_VAR 0 5
48135: PUSH
48136: LD_VAR 0 5
48140: PPUSH
48141: CALL_OW 44
48145: PPUSH
48146: CALL 40596 0 2
48150: ST_TO_ADDR
// class := Inc ( class ) ;
48151: LD_ADDR_VAR 0 7
48155: PUSH
48156: LD_VAR 0 7
48160: PPUSH
48161: CALL 41957 0 1
48165: ST_TO_ADDR
// if class = 5 then
48166: LD_VAR 0 7
48170: PUSH
48171: LD_INT 5
48173: EQUAL
48174: IFFALSE 48184
// class := 1 ;
48176: LD_ADDR_VAR 0 7
48180: PUSH
48181: LD_INT 1
48183: ST_TO_ADDR
// end ;
48184: GO 48111
48186: POP
48187: POP
// end ;
48188: LD_VAR 0 5
48192: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
48193: LD_INT 0
48195: PPUSH
48196: PPUSH
// result := [ ] ;
48197: LD_ADDR_VAR 0 4
48201: PUSH
48202: EMPTY
48203: ST_TO_ADDR
// if not vehicles then
48204: LD_VAR 0 3
48208: NOT
48209: IFFALSE 48213
// exit ;
48211: GO 48372
// for i := 1 to vehicles [ nation ] do
48213: LD_ADDR_VAR 0 5
48217: PUSH
48218: DOUBLE
48219: LD_INT 1
48221: DEC
48222: ST_TO_ADDR
48223: LD_VAR 0 3
48227: PUSH
48228: LD_VAR 0 2
48232: ARRAY
48233: PUSH
48234: FOR_TO
48235: IFFALSE 48370
// begin uc_side := side ;
48237: LD_ADDR_OWVAR 20
48241: PUSH
48242: LD_VAR 0 1
48246: ST_TO_ADDR
// uc_nation := nation ;
48247: LD_ADDR_OWVAR 21
48251: PUSH
48252: LD_VAR 0 2
48256: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
48257: LD_VAR 0 3
48261: PUSH
48262: LD_VAR 0 2
48266: ARRAY
48267: PUSH
48268: LD_VAR 0 5
48272: ARRAY
48273: PUSH
48274: LD_INT 1
48276: ARRAY
48277: PPUSH
48278: LD_VAR 0 3
48282: PUSH
48283: LD_VAR 0 2
48287: ARRAY
48288: PUSH
48289: LD_VAR 0 5
48293: ARRAY
48294: PUSH
48295: LD_INT 2
48297: ARRAY
48298: PPUSH
48299: LD_VAR 0 3
48303: PUSH
48304: LD_VAR 0 2
48308: ARRAY
48309: PUSH
48310: LD_VAR 0 5
48314: ARRAY
48315: PUSH
48316: LD_INT 3
48318: ARRAY
48319: PPUSH
48320: LD_VAR 0 3
48324: PUSH
48325: LD_VAR 0 2
48329: ARRAY
48330: PUSH
48331: LD_VAR 0 5
48335: ARRAY
48336: PUSH
48337: LD_INT 4
48339: ARRAY
48340: PPUSH
48341: LD_INT 80
48343: PPUSH
48344: CALL 7745 0 5
// result := Join ( result , CreateVehicle ) ;
48348: LD_ADDR_VAR 0 4
48352: PUSH
48353: LD_VAR 0 4
48357: PPUSH
48358: CALL_OW 45
48362: PPUSH
48363: CALL 40596 0 2
48367: ST_TO_ADDR
// end ;
48368: GO 48234
48370: POP
48371: POP
// end ;
48372: LD_VAR 0 4
48376: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
48377: LD_INT 0
48379: PPUSH
48380: PPUSH
// for i in mpBattleFlags do
48381: LD_ADDR_VAR 0 3
48385: PUSH
48386: LD_EXP 23
48390: PUSH
48391: FOR_IN
48392: IFFALSE 48469
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
48394: LD_VAR 0 3
48398: PPUSH
48399: LD_INT 1
48401: PUSH
48402: LD_VAR 0 1
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 2
48413: PUSH
48414: LD_VAR 0 1
48418: PUSH
48419: LD_REAL  7.00000000000000E-0001
48422: MUL
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 3
48430: PUSH
48431: LD_VAR 0 1
48435: PUSH
48436: LD_REAL  4.00000000000000E-0001
48439: MUL
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 20
48447: PUSH
48448: LD_VAR 0 1
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: PPUSH
48463: CALL_OW 423
48467: GO 48391
48469: POP
48470: POP
// end ;
48471: LD_VAR 0 2
48475: RET
// every 0 0$1 trigger mpActive do var i , strength ;
48476: LD_INT 100
48478: IFFALSE 48573
48480: GO 48482
48482: DISABLE
48483: LD_INT 0
48485: PPUSH
48486: PPUSH
// begin if mpBattleFlag <= 0 then
48487: LD_EXP 22
48491: PUSH
48492: LD_INT 0
48494: LESSEQUAL
48495: IFFALSE 48499
// exit ;
48497: GO 48573
// strength := 100 ;
48499: LD_ADDR_VAR 0 2
48503: PUSH
48504: LD_INT 100
48506: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
48507: LD_EXP 22
48511: PPUSH
48512: CALL_OW 67
// strength := Dec ( strength ) ;
48516: LD_ADDR_VAR 0 2
48520: PUSH
48521: LD_VAR 0 2
48525: PPUSH
48526: CALL 41979 0 1
48530: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
48531: LD_VAR 0 2
48535: PPUSH
48536: CALL 48377 0 1
// until not strength ;
48540: LD_VAR 0 2
48544: NOT
48545: IFFALSE 48507
// for i in mpBattleFlags do
48547: LD_ADDR_VAR 0 1
48551: PUSH
48552: LD_EXP 23
48556: PUSH
48557: FOR_IN
48558: IFFALSE 48571
// KillBattleFlag ( i ) ;
48560: LD_VAR 0 1
48564: PPUSH
48565: CALL_OW 419
48569: GO 48557
48571: POP
48572: POP
// end ;
48573: PPOPN 2
48575: END
// every 0 0$1 marked mpActive do var side , tmp ;
48576: GO 48578
48578: DISABLE
48579: LD_INT 0
48581: PPUSH
48582: PPUSH
// begin if mpSibBomb <= 1 then
48583: LD_EXP 28
48587: PUSH
48588: LD_INT 1
48590: LESSEQUAL
48591: IFFALSE 48595
// exit ;
48593: GO 48668
// tmp := mpSibBomb ;
48595: LD_ADDR_VAR 0 2
48599: PUSH
48600: LD_EXP 28
48604: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
48605: LD_INT 35
48607: PPUSH
48608: CALL_OW 67
// tmp := tmp - 0 0$1 ;
48612: LD_ADDR_VAR 0 2
48616: PUSH
48617: LD_VAR 0 2
48621: PUSH
48622: LD_INT 35
48624: MINUS
48625: ST_TO_ADDR
// until not tmp ;
48626: LD_VAR 0 2
48630: NOT
48631: IFFALSE 48605
// for side := 1 to 8 do
48633: LD_ADDR_VAR 0 1
48637: PUSH
48638: DOUBLE
48639: LD_INT 1
48641: DEC
48642: ST_TO_ADDR
48643: LD_INT 8
48645: PUSH
48646: FOR_TO
48647: IFFALSE 48666
// SetTech ( tech_SibFiss , side , state_enabled ) ;
48649: LD_INT 25
48651: PPUSH
48652: LD_VAR 0 1
48656: PPUSH
48657: LD_INT 1
48659: PPUSH
48660: CALL_OW 322
48664: GO 48646
48666: POP
48667: POP
// end ;
48668: PPOPN 2
48670: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
48671: LD_INT 0
48673: PPUSH
48674: PPUSH
48675: PPUSH
// mpBuildUpTimeDelay := 0 ;
48676: LD_ADDR_EXP 40
48680: PUSH
48681: LD_INT 0
48683: ST_TO_ADDR
// if not mpBuildUpTime then
48684: LD_EXP 20
48688: NOT
48689: IFFALSE 48693
// exit ;
48691: GO 48876
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
48693: LD_ADDR_EXP 40
48697: PUSH
48698: LD_INT 8400
48700: PUSH
48701: LD_INT 2100
48703: PUSH
48704: LD_EXP 20
48708: MUL
48709: PLUS
48710: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
48711: LD_ADDR_EXP 41
48715: PUSH
48716: LD_INT 1
48718: ST_TO_ADDR
// for i := 1 to 8 do
48719: LD_ADDR_VAR 0 2
48723: PUSH
48724: DOUBLE
48725: LD_INT 1
48727: DEC
48728: ST_TO_ADDR
48729: LD_INT 8
48731: PUSH
48732: FOR_TO
48733: IFFALSE 48874
// if mpSidePositions [ i ] then
48735: LD_EXP 7
48739: PUSH
48740: LD_VAR 0 2
48744: ARRAY
48745: IFFALSE 48872
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
48747: LD_EXP 19
48751: PUSH
48752: LD_EXP 7
48756: PUSH
48757: LD_VAR 0 2
48761: ARRAY
48762: ARRAY
48763: PPUSH
48764: LD_INT 5
48766: PPUSH
48767: CALL_OW 424
// for j := 1 to 8 do
48771: LD_ADDR_VAR 0 3
48775: PUSH
48776: DOUBLE
48777: LD_INT 1
48779: DEC
48780: ST_TO_ADDR
48781: LD_INT 8
48783: PUSH
48784: FOR_TO
48785: IFFALSE 48870
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
48787: LD_EXP 7
48791: PUSH
48792: LD_VAR 0 3
48796: ARRAY
48797: PUSH
48798: LD_EXP 8
48802: PUSH
48803: LD_VAR 0 2
48807: ARRAY
48808: PUSH
48809: LD_EXP 8
48813: PUSH
48814: LD_VAR 0 3
48818: ARRAY
48819: NONEQUAL
48820: PUSH
48821: LD_EXP 11
48825: NOT
48826: PUSH
48827: LD_VAR 0 2
48831: PUSH
48832: LD_VAR 0 3
48836: NONEQUAL
48837: AND
48838: OR
48839: AND
48840: IFFALSE 48868
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
48842: LD_VAR 0 3
48846: PPUSH
48847: LD_EXP 19
48851: PUSH
48852: LD_EXP 7
48856: PUSH
48857: LD_VAR 0 2
48861: ARRAY
48862: ARRAY
48863: PPUSH
48864: CALL_OW 333
48868: GO 48784
48870: POP
48871: POP
// end ;
48872: GO 48732
48874: POP
48875: POP
// end ;
48876: LD_VAR 0 1
48880: RET
// function EndBuildUp ; var i , j ; begin
48881: LD_INT 0
48883: PPUSH
48884: PPUSH
48885: PPUSH
// mpBuildUpTimeActive := false ;
48886: LD_ADDR_EXP 41
48890: PUSH
48891: LD_INT 0
48893: ST_TO_ADDR
// for i := 1 to 8 do
48894: LD_ADDR_VAR 0 2
48898: PUSH
48899: DOUBLE
48900: LD_INT 1
48902: DEC
48903: ST_TO_ADDR
48904: LD_INT 8
48906: PUSH
48907: FOR_TO
48908: IFFALSE 49049
// if mpSidePositions [ i ] then
48910: LD_EXP 7
48914: PUSH
48915: LD_VAR 0 2
48919: ARRAY
48920: IFFALSE 49047
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
48922: LD_EXP 19
48926: PUSH
48927: LD_EXP 7
48931: PUSH
48932: LD_VAR 0 2
48936: ARRAY
48937: ARRAY
48938: PPUSH
48939: LD_INT 0
48941: PPUSH
48942: CALL_OW 424
// for j := 1 to 8 do
48946: LD_ADDR_VAR 0 3
48950: PUSH
48951: DOUBLE
48952: LD_INT 1
48954: DEC
48955: ST_TO_ADDR
48956: LD_INT 8
48958: PUSH
48959: FOR_TO
48960: IFFALSE 49045
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
48962: LD_EXP 7
48966: PUSH
48967: LD_VAR 0 3
48971: ARRAY
48972: PUSH
48973: LD_EXP 8
48977: PUSH
48978: LD_VAR 0 2
48982: ARRAY
48983: PUSH
48984: LD_EXP 8
48988: PUSH
48989: LD_VAR 0 3
48993: ARRAY
48994: NONEQUAL
48995: PUSH
48996: LD_EXP 11
49000: NOT
49001: PUSH
49002: LD_VAR 0 2
49006: PUSH
49007: LD_VAR 0 3
49011: NONEQUAL
49012: AND
49013: OR
49014: AND
49015: IFFALSE 49043
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
49017: LD_VAR 0 3
49021: PPUSH
49022: LD_EXP 19
49026: PUSH
49027: LD_EXP 7
49031: PUSH
49032: LD_VAR 0 2
49036: ARRAY
49037: ARRAY
49038: PPUSH
49039: CALL_OW 334
49043: GO 48959
49045: POP
49046: POP
// end ;
49047: GO 48907
49049: POP
49050: POP
// end ;
49051: LD_VAR 0 1
49055: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
49056: LD_EXP 41
49060: IFFALSE 49235
49062: GO 49064
49064: DISABLE
49065: LD_INT 0
49067: PPUSH
49068: PPUSH
// begin for i := 1 to 8 do
49069: LD_ADDR_VAR 0 1
49073: PUSH
49074: DOUBLE
49075: LD_INT 1
49077: DEC
49078: ST_TO_ADDR
49079: LD_INT 8
49081: PUSH
49082: FOR_TO
49083: IFFALSE 49232
// if mpSidePositions [ i ] then
49085: LD_EXP 7
49089: PUSH
49090: LD_VAR 0 1
49094: ARRAY
49095: IFFALSE 49230
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
49097: LD_ADDR_VAR 0 2
49101: PUSH
49102: LD_EXP 19
49106: PUSH
49107: LD_EXP 7
49111: PUSH
49112: LD_VAR 0 1
49116: ARRAY
49117: ARRAY
49118: PPUSH
49119: LD_INT 2
49121: PUSH
49122: LD_INT 21
49124: PUSH
49125: LD_INT 1
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 21
49134: PUSH
49135: LD_INT 2
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 22
49149: PUSH
49150: LD_OWVAR 2
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PPUSH
49163: CALL_OW 70
49167: PUSH
49168: FOR_IN
49169: IFFALSE 49228
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
49171: LD_EXP 8
49175: PUSH
49176: LD_VAR 0 1
49180: ARRAY
49181: PUSH
49182: LD_EXP 8
49186: PUSH
49187: LD_OWVAR 2
49191: ARRAY
49192: NONEQUAL
49193: PUSH
49194: LD_EXP 11
49198: NOT
49199: PUSH
49200: LD_VAR 0 1
49204: PUSH
49205: LD_OWVAR 2
49209: NONEQUAL
49210: AND
49211: OR
49212: IFFALSE 49226
// ComMoveToArea ( un , BuildUpEscape ) ;
49214: LD_VAR 0 2
49218: PPUSH
49219: LD_INT 9
49221: PPUSH
49222: CALL_OW 113
49226: GO 49168
49228: POP
49229: POP
49230: GO 49082
49232: POP
49233: POP
// enable ;
49234: ENABLE
// end ;
49235: PPOPN 2
49237: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
49238: LD_EXP 20
49242: IFFALSE 49292
49244: GO 49246
49246: DISABLE
49247: LD_INT 0
49249: PPUSH
// begin tmp := mpBuildUpTime ;
49250: LD_ADDR_VAR 0 1
49254: PUSH
49255: LD_EXP 20
49259: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
49260: LD_INT 35
49262: PPUSH
49263: CALL_OW 67
// tmp := tmp - 0 0$1 ;
49267: LD_ADDR_VAR 0 1
49271: PUSH
49272: LD_VAR 0 1
49276: PUSH
49277: LD_INT 35
49279: MINUS
49280: ST_TO_ADDR
// until not tmp ;
49281: LD_VAR 0 1
49285: NOT
49286: IFFALSE 49260
// EndBuildUp ;
49288: CALL 48881 0 0
// end ;
49292: PPOPN 1
49294: END
// every 0 0$1 trigger mpActive marked mpWin do
49295: LD_INT 100
49297: IFFALSE 49331
49299: GO 49301
49301: DISABLE
// begin if IAmServer then
49302: CALL_OW 518
49306: IFFALSE 49315
// wait ( 0 0$3 ) ;
49308: LD_INT 105
49310: PPUSH
49311: CALL_OW 67
// if Multiplayer then
49315: LD_OWVAR 4
49319: IFFALSE 49327
// YouWinInMultiplayer else
49321: CALL_OW 106
49325: GO 49331
// YouWin ;
49327: CALL_OW 103
// end ;
49331: END
// export function HasPowerByGameType ( gameType , side ) ; begin
49332: LD_INT 0
49334: PPUSH
// result := false ;
49335: LD_ADDR_VAR 0 3
49339: PUSH
49340: LD_INT 0
49342: ST_TO_ADDR
// case gameType of GameTypeNormal :
49343: LD_VAR 0 1
49347: PUSH
49348: LD_INT 1
49350: DOUBLE
49351: EQUAL
49352: IFTRUE 49356
49354: GO 49429
49356: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49357: LD_ADDR_VAR 0 3
49361: PUSH
49362: LD_INT 22
49364: PUSH
49365: LD_VAR 0 2
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 2
49376: PUSH
49377: LD_INT 21
49379: PUSH
49380: LD_INT 1
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 33
49389: PUSH
49390: LD_INT 3
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 33
49399: PUSH
49400: LD_INT 5
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PPUSH
49417: CALL_OW 69
49421: PPUSH
49422: CALL 5007 0 1
49426: ST_TO_ADDR
// end ; GameTypeSurvival :
49427: GO 49664
49429: LD_INT 2
49431: DOUBLE
49432: EQUAL
49433: IFTRUE 49437
49435: GO 49565
49437: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
49438: LD_ADDR_VAR 0 3
49442: PUSH
49443: LD_INT 22
49445: PUSH
49446: LD_VAR 0 2
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 2
49457: PUSH
49458: LD_INT 30
49460: PUSH
49461: LD_INT 0
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 30
49470: PUSH
49471: LD_INT 1
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: LIST
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PPUSH
49487: CALL_OW 69
49491: PPUSH
49492: CALL 5007 0 1
49496: PUSH
49497: LD_INT 22
49499: PUSH
49500: LD_VAR 0 2
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 2
49511: PUSH
49512: LD_INT 21
49514: PUSH
49515: LD_INT 1
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 33
49524: PUSH
49525: LD_INT 3
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 33
49534: PUSH
49535: LD_INT 5
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PPUSH
49552: CALL_OW 69
49556: PPUSH
49557: CALL 5007 0 1
49561: AND
49562: ST_TO_ADDR
// end ; GameTypeKing :
49563: GO 49664
49565: LD_INT 3
49567: DOUBLE
49568: EQUAL
49569: IFTRUE 49573
49571: GO 49663
49573: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
49574: LD_ADDR_VAR 0 3
49578: PUSH
49579: LD_INT 22
49581: PUSH
49582: LD_VAR 0 2
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 2
49593: PUSH
49594: LD_INT 21
49596: PUSH
49597: LD_INT 1
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 33
49606: PUSH
49607: LD_INT 3
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 33
49616: PUSH
49617: LD_INT 5
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PPUSH
49634: CALL_OW 69
49638: PPUSH
49639: CALL 5007 0 1
49643: PUSH
49644: LD_VAR 0 2
49648: PPUSH
49649: CALL 52688 0 1
49653: PUSH
49654: LD_EXP 34
49658: LESS
49659: AND
49660: ST_TO_ADDR
// end ; end ;
49661: GO 49664
49663: POP
// end ;
49664: LD_VAR 0 3
49668: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
49669: LD_INT 100
49671: IFFALSE 49893
49673: GO 49675
49675: DISABLE
49676: LD_INT 0
49678: PPUSH
49679: PPUSH
// begin if Multiplayer then
49680: LD_OWVAR 4
49684: IFFALSE 49692
// SetPlayerSpectator ( ) else
49686: CALL_OW 572
49690: GO 49701
// FogOff ( your_side ) ;
49692: LD_OWVAR 2
49696: PPUSH
49697: CALL_OW 344
// repeat gameIsOn := false ;
49701: LD_ADDR_VAR 0 1
49705: PUSH
49706: LD_INT 0
49708: ST_TO_ADDR
// for i := 1 to 8 do
49709: LD_ADDR_VAR 0 2
49713: PUSH
49714: DOUBLE
49715: LD_INT 1
49717: DEC
49718: ST_TO_ADDR
49719: LD_INT 8
49721: PUSH
49722: FOR_TO
49723: IFFALSE 49845
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
49725: LD_EXP 7
49729: PUSH
49730: LD_VAR 0 2
49734: ARRAY
49735: PUSH
49736: LD_VAR 0 2
49740: PPUSH
49741: CALL_OW 108
49745: AND
49746: PUSH
49747: LD_VAR 0 2
49751: PUSH
49752: LD_OWVAR 2
49756: NONEQUAL
49757: AND
49758: IFFALSE 49843
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
49760: LD_EXP 8
49764: PUSH
49765: LD_VAR 0 2
49769: ARRAY
49770: NOT
49771: PUSH
49772: LD_EXP 8
49776: PUSH
49777: LD_VAR 0 2
49781: ARRAY
49782: PUSH
49783: LD_EXP 8
49787: PUSH
49788: LD_OWVAR 2
49792: ARRAY
49793: NONEQUAL
49794: PUSH
49795: LD_OWVAR 2
49799: PPUSH
49800: LD_VAR 0 2
49804: PPUSH
49805: CALL_OW 81
49809: PUSH
49810: LD_INT 1
49812: NONEQUAL
49813: AND
49814: OR
49815: IFFALSE 49843
// if HasPowerByGameType ( mpGameType , i ) then
49817: LD_EXP 3
49821: PPUSH
49822: LD_VAR 0 2
49826: PPUSH
49827: CALL 49332 0 2
49831: IFFALSE 49843
// begin gameIsOn := true ;
49833: LD_ADDR_VAR 0 1
49837: PUSH
49838: LD_INT 1
49840: ST_TO_ADDR
// break ;
49841: GO 49845
// end ;
49843: GO 49722
49845: POP
49846: POP
// wait ( 100 ) ;
49847: LD_INT 100
49849: PPUSH
49850: CALL_OW 67
// until not gameIsOn ;
49854: LD_VAR 0 1
49858: NOT
49859: IFFALSE 49701
// if IAmServer then
49861: CALL_OW 518
49865: IFFALSE 49874
// wait ( 0 0$3 ) ;
49867: LD_INT 105
49869: PPUSH
49870: CALL_OW 67
// if Multiplayer then
49874: LD_OWVAR 4
49878: IFFALSE 49886
// YouLostInMultiplayer else
49880: CALL_OW 107
49884: GO 49893
// YouLost (  ) ;
49886: LD_STRING 
49888: PPUSH
49889: CALL_OW 104
// end ;
49893: PPOPN 2
49895: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
49896: LD_EXP 32
49900: IFFALSE 50238
49902: GO 49904
49904: DISABLE
49905: LD_INT 0
49907: PPUSH
49908: PPUSH
49909: PPUSH
49910: PPUSH
49911: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
49912: LD_ADDR_VAR 0 5
49916: PUSH
49917: LD_INT 1
49919: PUSH
49920: LD_INT 2
49922: PUSH
49923: LD_INT 3
49925: PUSH
49926: LD_INT 4
49928: PUSH
49929: LD_INT 5
49931: PUSH
49932: LD_INT 6
49934: PUSH
49935: LD_INT 7
49937: PUSH
49938: LD_INT 8
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: ST_TO_ADDR
// repeat wait ( 0 0$30 ) ;
49951: LD_INT 1050
49953: PPUSH
49954: CALL_OW 67
// for i := 1 to 8 do
49958: LD_ADDR_VAR 0 1
49962: PUSH
49963: DOUBLE
49964: LD_INT 1
49966: DEC
49967: ST_TO_ADDR
49968: LD_INT 8
49970: PUSH
49971: FOR_TO
49972: IFFALSE 50217
// begin j := sides [ i ] ;
49974: LD_ADDR_VAR 0 2
49978: PUSH
49979: LD_VAR 0 5
49983: PUSH
49984: LD_VAR 0 1
49988: ARRAY
49989: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
49990: LD_EXP 39
49994: PUSH
49995: LD_VAR 0 2
49999: ARRAY
50000: PPUSH
50001: CALL 5007 0 1
50005: PUSH
50006: LD_VAR 0 2
50010: PPUSH
50011: CALL_OW 108
50015: AND
50016: PUSH
50017: LD_EXP 3
50021: PPUSH
50022: LD_VAR 0 2
50026: PPUSH
50027: CALL 49332 0 2
50031: AND
50032: IFFALSE 50215
// begin wait ( mpRespawn div 2 ) ;
50034: LD_EXP 32
50038: PUSH
50039: LD_INT 2
50041: DIV
50042: PPUSH
50043: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50047: LD_ADDR_VAR 0 3
50051: PUSH
50052: LD_INT 22
50054: PUSH
50055: LD_VAR 0 2
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 50
50066: PUSH
50067: EMPTY
50068: LIST
50069: PUSH
50070: LD_INT 2
50072: PUSH
50073: LD_INT 30
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 30
50085: PUSH
50086: LD_INT 1
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: LIST
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: LIST
50102: PPUSH
50103: CALL_OW 69
50107: ST_TO_ADDR
// if not tmp then
50108: LD_VAR 0 3
50112: NOT
50113: IFFALSE 50117
// continue ;
50115: GO 49971
// spawn := tmp [ 1 ] ;
50117: LD_ADDR_VAR 0 4
50121: PUSH
50122: LD_VAR 0 3
50126: PUSH
50127: LD_INT 1
50129: ARRAY
50130: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
50131: LD_EXP 39
50135: PUSH
50136: LD_VAR 0 2
50140: ARRAY
50141: PUSH
50142: LD_INT 1
50144: ARRAY
50145: PPUSH
50146: LD_VAR 0 4
50150: PPUSH
50151: CALL_OW 250
50155: PPUSH
50156: LD_VAR 0 4
50160: PPUSH
50161: CALL_OW 251
50165: PPUSH
50166: LD_INT 32
50168: PPUSH
50169: LD_INT 1
50171: PPUSH
50172: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
50176: LD_ADDR_EXP 39
50180: PUSH
50181: LD_EXP 39
50185: PPUSH
50186: LD_VAR 0 2
50190: PPUSH
50191: LD_EXP 39
50195: PUSH
50196: LD_VAR 0 2
50200: ARRAY
50201: PPUSH
50202: LD_INT 1
50204: PPUSH
50205: CALL_OW 3
50209: PPUSH
50210: CALL_OW 1
50214: ST_TO_ADDR
// end ; end ;
50215: GO 49971
50217: POP
50218: POP
// sides := Shuffle ( sides ) ;
50219: LD_ADDR_VAR 0 5
50223: PUSH
50224: LD_VAR 0 5
50228: PPUSH
50229: CALL 40701 0 1
50233: ST_TO_ADDR
// until false ;
50234: LD_INT 0
50236: IFFALSE 49951
// end ;
50238: PPOPN 5
50240: END
// every 0 0$1 marked mpActive do
50241: GO 50243
50243: DISABLE
// begin enable ;
50244: ENABLE
// if not mpDisplayStrings then
50245: LD_EXP 37
50249: NOT
50250: IFFALSE 50261
// begin display_strings := [ ] ;
50252: LD_ADDR_OWVAR 47
50256: PUSH
50257: EMPTY
50258: ST_TO_ADDR
// exit ;
50259: GO 50271
// end ; display_strings := mpDisplayStrings ;
50261: LD_ADDR_OWVAR 47
50265: PUSH
50266: LD_EXP 37
50270: ST_TO_ADDR
// end ; end_of_file
50271: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
50272: LD_INT 0
50274: PPUSH
50275: PPUSH
50276: PPUSH
50277: PPUSH
50278: PPUSH
50279: PPUSH
50280: PPUSH
50281: PPUSH
50282: PPUSH
// if GetType ( un ) = unit_vehicle then
50283: LD_VAR 0 1
50287: PPUSH
50288: CALL_OW 247
50292: PUSH
50293: LD_INT 2
50295: EQUAL
50296: IFFALSE 50300
// exit ;
50298: GO 50766
// side := GetSide ( un ) ;
50300: LD_ADDR_VAR 0 9
50304: PUSH
50305: LD_VAR 0 1
50309: PPUSH
50310: CALL_OW 255
50314: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
50315: LD_EXP 3
50319: PUSH
50320: LD_INT 2
50322: EQUAL
50323: IFFALSE 50416
// if GetBType ( un ) in [ b_depot , b_warehouse ] and GetTag ( un ) = side then
50325: LD_VAR 0 1
50329: PPUSH
50330: CALL_OW 266
50334: PUSH
50335: LD_INT 0
50337: PUSH
50338: LD_INT 1
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: IN
50345: PUSH
50346: LD_VAR 0 1
50350: PPUSH
50351: CALL_OW 110
50355: PUSH
50356: LD_VAR 0 9
50360: EQUAL
50361: AND
50362: IFFALSE 50416
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) do
50364: LD_ADDR_VAR 0 3
50368: PUSH
50369: LD_INT 22
50371: PUSH
50372: LD_VAR 0 9
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 21
50383: PUSH
50384: LD_INT 1
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PPUSH
50395: CALL_OW 69
50399: PUSH
50400: FOR_IN
50401: IFFALSE 50414
// KillUnit ( i ) ;
50403: LD_VAR 0 3
50407: PPUSH
50408: CALL_OW 66
50412: GO 50400
50414: POP
50415: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
50416: LD_VAR 0 1
50420: PPUSH
50421: CALL_OW 257
50425: PUSH
50426: LD_INT 12
50428: PUSH
50429: LD_INT 17
50431: PUSH
50432: LD_INT 15
50434: PUSH
50435: LD_INT 16
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: IN
50444: PUSH
50445: LD_VAR 0 1
50449: PPUSH
50450: CALL_OW 263
50454: PUSH
50455: LD_INT 5
50457: EQUAL
50458: OR
50459: IFFALSE 50548
// begin tag := GetTag ( un ) ;
50461: LD_ADDR_VAR 0 5
50465: PUSH
50466: LD_VAR 0 1
50470: PPUSH
50471: CALL_OW 110
50475: ST_TO_ADDR
// area := mpApemansArea [ tag ] ;
50476: LD_ADDR_VAR 0 7
50480: PUSH
50481: LD_EXP 31
50485: PUSH
50486: LD_VAR 0 5
50490: ARRAY
50491: ST_TO_ADDR
// wait ( 4 4$00 ) ;
50492: LD_INT 8400
50494: PPUSH
50495: CALL_OW 67
// PrepareApeman ( - 5 ) ;
50499: LD_INT 5
50501: NEG
50502: PPUSH
50503: CALL 36864 0 1
// ape := CreateHuman ;
50507: LD_ADDR_VAR 0 4
50511: PUSH
50512: CALL_OW 44
50516: ST_TO_ADDR
// SetTag ( ape , tag ) ;
50517: LD_VAR 0 4
50521: PPUSH
50522: LD_VAR 0 5
50526: PPUSH
50527: CALL_OW 109
// PlaceUnitArea ( ape , area , false ) ;
50531: LD_VAR 0 4
50535: PPUSH
50536: LD_VAR 0 7
50540: PPUSH
50541: LD_INT 0
50543: PPUSH
50544: CALL_OW 49
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
50548: LD_VAR 0 1
50552: PPUSH
50553: CALL_OW 247
50557: PUSH
50558: LD_INT 1
50560: EQUAL
50561: PUSH
50562: LD_VAR 0 1
50566: PPUSH
50567: CALL_OW 248
50571: PUSH
50572: LD_INT 0
50574: GREATER
50575: AND
50576: IFFALSE 50766
// begin if not mpRespawn then
50578: LD_EXP 32
50582: NOT
50583: IFFALSE 50587
// exit ;
50585: GO 50766
// side := GetSide ( un ) ;
50587: LD_ADDR_VAR 0 9
50591: PUSH
50592: LD_VAR 0 1
50596: PPUSH
50597: CALL_OW 255
50601: ST_TO_ADDR
// nation := GetNation ( un ) ;
50602: LD_ADDR_VAR 0 8
50606: PUSH
50607: LD_VAR 0 1
50611: PPUSH
50612: CALL_OW 248
50616: ST_TO_ADDR
// class := GetClass ( un ) ;
50617: LD_ADDR_VAR 0 6
50621: PUSH
50622: LD_VAR 0 1
50626: PPUSH
50627: CALL_OW 257
50631: ST_TO_ADDR
// if class > 4 then
50632: LD_VAR 0 6
50636: PUSH
50637: LD_INT 4
50639: GREATER
50640: IFFALSE 50650
// class := 1 ;
50642: LD_ADDR_VAR 0 6
50646: PUSH
50647: LD_INT 1
50649: ST_TO_ADDR
// wait ( mpRespawn ) ;
50650: LD_EXP 32
50654: PPUSH
50655: CALL_OW 67
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
50659: LD_VAR 0 9
50663: PPUSH
50664: CALL_OW 108
50668: NOT
50669: PUSH
50670: LD_EXP 3
50674: PPUSH
50675: LD_VAR 0 9
50679: PPUSH
50680: CALL 49332 0 2
50684: NOT
50685: AND
50686: IFFALSE 50690
// exit ;
50688: GO 50766
// uc_side := side ;
50690: LD_ADDR_OWVAR 20
50694: PUSH
50695: LD_VAR 0 9
50699: ST_TO_ADDR
// uc_nation := nation ;
50700: LD_ADDR_OWVAR 21
50704: PUSH
50705: LD_VAR 0 8
50709: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
50710: LD_INT 0
50712: PPUSH
50713: LD_VAR 0 6
50717: PPUSH
50718: LD_INT 2
50720: PPUSH
50721: CALL_OW 380
// mpRespawnPull := Replace ( mpRespawnPull , side , Join ( mpRespawnPull [ side ] , CreateHuman ) ) ;
50725: LD_ADDR_EXP 39
50729: PUSH
50730: LD_EXP 39
50734: PPUSH
50735: LD_VAR 0 9
50739: PPUSH
50740: LD_EXP 39
50744: PUSH
50745: LD_VAR 0 9
50749: ARRAY
50750: PPUSH
50751: CALL_OW 44
50755: PPUSH
50756: CALL 40596 0 2
50760: PPUSH
50761: CALL_OW 1
50765: ST_TO_ADDR
// end ; end ;
50766: LD_VAR 0 2
50770: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
50771: LD_INT 0
50773: PPUSH
50774: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
50775: LD_EXP 3
50779: PUSH
50780: LD_INT 2
50782: EQUAL
50783: PUSH
50784: LD_VAR 0 1
50788: PPUSH
50789: CALL_OW 266
50793: PUSH
50794: LD_INT 0
50796: PUSH
50797: LD_INT 1
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: IN
50804: AND
50805: IFFALSE 50870
// begin KillUnit ( building ) ;
50807: LD_VAR 0 1
50811: PPUSH
50812: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
50816: LD_ADDR_VAR 0 5
50820: PUSH
50821: LD_INT 22
50823: PUSH
50824: LD_VAR 0 2
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 21
50835: PUSH
50836: LD_INT 1
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PPUSH
50847: CALL_OW 69
50851: PUSH
50852: FOR_IN
50853: IFFALSE 50866
// KillUnit ( i ) ;
50855: LD_VAR 0 5
50859: PPUSH
50860: CALL_OW 66
50864: GO 50852
50866: POP
50867: POP
// exit ;
50868: GO 50915
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
50870: LD_VAR 0 1
50874: PPUSH
50875: CALL_OW 266
50879: PUSH
50880: LD_INT 0
50882: PUSH
50883: LD_INT 1
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: IN
50890: IFFALSE 50915
// SetBName ( building , @ & GetSide ( building ) ) ;
50892: LD_VAR 0 1
50896: PPUSH
50897: LD_STRING @
50899: PUSH
50900: LD_VAR 0 1
50904: PPUSH
50905: CALL_OW 255
50909: STR
50910: PPUSH
50911: CALL_OW 500
// end ; end_of_file
50915: LD_VAR 0 4
50919: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
50920: LD_EXP 38
50924: PUSH
50925: CALL 51130 0 0
50929: AND
50930: PUSH
50931: LD_OWVAR 4
50935: AND
50936: IFFALSE 51127
50938: GO 50940
50940: DISABLE
50941: LD_INT 0
50943: PPUSH
50944: PPUSH
// begin canWin := false ;
50945: LD_ADDR_VAR 0 2
50949: PUSH
50950: LD_INT 0
50952: ST_TO_ADDR
// if not HasPower ( your_side ) then
50953: LD_OWVAR 2
50957: PPUSH
50958: CALL 51170 0 1
50962: NOT
50963: IFFALSE 50974
// begin Multiplayer_Loose_Message ;
50965: CALL_OW 521
// enable ( mpLose ) ;
50969: LD_INT 102
50971: ENABLE_MARKED
// end else
50972: GO 51127
// begin canWin := true ;
50974: LD_ADDR_VAR 0 2
50978: PUSH
50979: LD_INT 1
50981: ST_TO_ADDR
// for i := 1 to 8 do
50982: LD_ADDR_VAR 0 1
50986: PUSH
50987: DOUBLE
50988: LD_INT 1
50990: DEC
50991: ST_TO_ADDR
50992: LD_INT 8
50994: PUSH
50995: FOR_TO
50996: IFFALSE 51113
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
50998: LD_EXP 7
51002: PUSH
51003: LD_VAR 0 1
51007: ARRAY
51008: PUSH
51009: LD_VAR 0 1
51013: PPUSH
51014: CALL_OW 108
51018: AND
51019: PUSH
51020: LD_VAR 0 1
51024: PUSH
51025: LD_OWVAR 2
51029: NONEQUAL
51030: AND
51031: IFFALSE 51111
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51033: LD_EXP 8
51037: PUSH
51038: LD_VAR 0 1
51042: ARRAY
51043: NOT
51044: PUSH
51045: LD_EXP 8
51049: PUSH
51050: LD_VAR 0 1
51054: ARRAY
51055: PUSH
51056: LD_EXP 8
51060: PUSH
51061: LD_OWVAR 2
51065: ARRAY
51066: NONEQUAL
51067: PUSH
51068: LD_OWVAR 2
51072: PPUSH
51073: LD_VAR 0 1
51077: PPUSH
51078: CALL_OW 81
51082: PUSH
51083: LD_INT 1
51085: NONEQUAL
51086: AND
51087: OR
51088: IFFALSE 51111
// if HasPower ( i ) then
51090: LD_VAR 0 1
51094: PPUSH
51095: CALL 51170 0 1
51099: IFFALSE 51111
// begin canWin := false ;
51101: LD_ADDR_VAR 0 2
51105: PUSH
51106: LD_INT 0
51108: ST_TO_ADDR
// break ;
51109: GO 51113
// end ;
51111: GO 50995
51113: POP
51114: POP
// if canWin then
51115: LD_VAR 0 2
51119: IFFALSE 51126
// enable ( mpWin ) else
51121: LD_INT 101
51123: ENABLE_MARKED
51124: GO 51127
// enable ;
51126: ENABLE
// end ; end ;
51127: PPOPN 2
51129: END
// function CanWinLoose ; begin
51130: LD_INT 0
51132: PPUSH
// result := true ;
51133: LD_ADDR_VAR 0 1
51137: PUSH
51138: LD_INT 1
51140: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
51141: CALL_OW 531
51145: PUSH
51146: CALL_OW 519
51150: PUSH
51151: LD_INT 1
51153: GREATER
51154: AND
51155: IFFALSE 51165
// result := false ;
51157: LD_ADDR_VAR 0 1
51161: PUSH
51162: LD_INT 0
51164: ST_TO_ADDR
// end ;
51165: LD_VAR 0 1
51169: RET
// function HasPower ( i ) ; begin
51170: LD_INT 0
51172: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
51173: LD_ADDR_VAR 0 2
51177: PUSH
51178: LD_INT 22
51180: PUSH
51181: LD_VAR 0 1
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 2
51192: PUSH
51193: LD_INT 21
51195: PUSH
51196: LD_INT 1
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 33
51205: PUSH
51206: LD_INT 3
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 33
51215: PUSH
51216: LD_INT 5
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PPUSH
51233: CALL_OW 69
51237: ST_TO_ADDR
// end ; end_of_file
51238: LD_VAR 0 2
51242: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
51243: LD_EXP 38
51247: IFFALSE 51290
51249: GO 51251
51251: DISABLE
51252: LD_INT 0
51254: PPUSH
// begin for i := 1 to 8 do
51255: LD_ADDR_VAR 0 1
51259: PUSH
51260: DOUBLE
51261: LD_INT 1
51263: DEC
51264: ST_TO_ADDR
51265: LD_INT 8
51267: PUSH
51268: FOR_TO
51269: IFFALSE 51288
// SetRestrict ( b_depot , i , state_disabled ) ;
51271: LD_INT 0
51273: PPUSH
51274: LD_VAR 0 1
51278: PPUSH
51279: LD_INT 0
51281: PPUSH
51282: CALL_OW 324
51286: GO 51268
51288: POP
51289: POP
// end ;
51290: PPOPN 1
51292: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
51293: LD_EXP 38
51297: PUSH
51298: CALL 51503 0 0
51302: AND
51303: PUSH
51304: LD_OWVAR 4
51308: AND
51309: IFFALSE 51500
51311: GO 51313
51313: DISABLE
51314: LD_INT 0
51316: PPUSH
51317: PPUSH
// begin canWin := false ;
51318: LD_ADDR_VAR 0 2
51322: PUSH
51323: LD_INT 0
51325: ST_TO_ADDR
// if not HasPower ( your_side ) then
51326: LD_OWVAR 2
51330: PPUSH
51331: CALL 51543 0 1
51335: NOT
51336: IFFALSE 51347
// begin Multiplayer_Loose_Message ;
51338: CALL_OW 521
// enable ( mpLose ) ;
51342: LD_INT 102
51344: ENABLE_MARKED
// end else
51345: GO 51500
// begin canWin := true ;
51347: LD_ADDR_VAR 0 2
51351: PUSH
51352: LD_INT 1
51354: ST_TO_ADDR
// for i := 1 to 8 do
51355: LD_ADDR_VAR 0 1
51359: PUSH
51360: DOUBLE
51361: LD_INT 1
51363: DEC
51364: ST_TO_ADDR
51365: LD_INT 8
51367: PUSH
51368: FOR_TO
51369: IFFALSE 51486
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51371: LD_EXP 7
51375: PUSH
51376: LD_VAR 0 1
51380: ARRAY
51381: PUSH
51382: LD_VAR 0 1
51386: PPUSH
51387: CALL_OW 108
51391: AND
51392: PUSH
51393: LD_VAR 0 1
51397: PUSH
51398: LD_OWVAR 2
51402: NONEQUAL
51403: AND
51404: IFFALSE 51484
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51406: LD_EXP 8
51410: PUSH
51411: LD_VAR 0 1
51415: ARRAY
51416: NOT
51417: PUSH
51418: LD_EXP 8
51422: PUSH
51423: LD_VAR 0 1
51427: ARRAY
51428: PUSH
51429: LD_EXP 8
51433: PUSH
51434: LD_OWVAR 2
51438: ARRAY
51439: NONEQUAL
51440: PUSH
51441: LD_OWVAR 2
51445: PPUSH
51446: LD_VAR 0 1
51450: PPUSH
51451: CALL_OW 81
51455: PUSH
51456: LD_INT 1
51458: NONEQUAL
51459: AND
51460: OR
51461: IFFALSE 51484
// if HasPower ( i ) then
51463: LD_VAR 0 1
51467: PPUSH
51468: CALL 51543 0 1
51472: IFFALSE 51484
// begin canWin := false ;
51474: LD_ADDR_VAR 0 2
51478: PUSH
51479: LD_INT 0
51481: ST_TO_ADDR
// break ;
51482: GO 51486
// end ;
51484: GO 51368
51486: POP
51487: POP
// if canWin then
51488: LD_VAR 0 2
51492: IFFALSE 51499
// enable ( mpWin ) else
51494: LD_INT 101
51496: ENABLE_MARKED
51497: GO 51500
// enable ;
51499: ENABLE
// end ; end ;
51500: PPOPN 2
51502: END
// function CanWinLoose ; begin
51503: LD_INT 0
51505: PPUSH
// result := true ;
51506: LD_ADDR_VAR 0 1
51510: PUSH
51511: LD_INT 1
51513: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
51514: CALL_OW 531
51518: PUSH
51519: CALL_OW 519
51523: PUSH
51524: LD_INT 1
51526: GREATER
51527: AND
51528: IFFALSE 51538
// result := false ;
51530: LD_ADDR_VAR 0 1
51534: PUSH
51535: LD_INT 0
51537: ST_TO_ADDR
// end ;
51538: LD_VAR 0 1
51542: RET
// function HasPower ( i ) ; begin
51543: LD_INT 0
51545: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
51546: LD_INT 22
51548: PUSH
51549: LD_VAR 0 1
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 2
51560: PUSH
51561: LD_INT 30
51563: PUSH
51564: LD_INT 0
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 30
51573: PUSH
51574: LD_INT 1
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: LIST
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PPUSH
51590: CALL_OW 69
51594: NOT
51595: IFFALSE 51599
// exit ;
51597: GO 51664
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
51599: LD_ADDR_VAR 0 2
51603: PUSH
51604: LD_INT 22
51606: PUSH
51607: LD_VAR 0 1
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 2
51618: PUSH
51619: LD_INT 21
51621: PUSH
51622: LD_INT 1
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 33
51631: PUSH
51632: LD_INT 3
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 33
51641: PUSH
51642: LD_INT 5
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PPUSH
51659: CALL_OW 69
51663: ST_TO_ADDR
// end ; end_of_file
51664: LD_VAR 0 2
51668: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
51669: LD_EXP 38
51673: IFFALSE 52014
51675: GO 51677
51677: DISABLE
51678: LD_INT 0
51680: PPUSH
51681: PPUSH
51682: PPUSH
// begin mpKingPoints := [ ] ;
51683: LD_ADDR_EXP 42
51687: PUSH
51688: EMPTY
51689: ST_TO_ADDR
// if mpTeamGame then
51690: LD_EXP 11
51694: IFFALSE 51748
// begin for i := 1 to Count ( mpTeams ) do
51696: LD_ADDR_VAR 0 1
51700: PUSH
51701: DOUBLE
51702: LD_INT 1
51704: DEC
51705: ST_TO_ADDR
51706: LD_EXP 10
51710: PPUSH
51711: CALL 5007 0 1
51715: PUSH
51716: FOR_TO
51717: IFFALSE 51744
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
51719: LD_ADDR_EXP 42
51723: PUSH
51724: LD_EXP 42
51728: PPUSH
51729: LD_VAR 0 1
51733: PPUSH
51734: LD_INT 0
51736: PPUSH
51737: CALL_OW 1
51741: ST_TO_ADDR
51742: GO 51716
51744: POP
51745: POP
// end else
51746: GO 51791
// begin for i := 1 to 8 do
51748: LD_ADDR_VAR 0 1
51752: PUSH
51753: DOUBLE
51754: LD_INT 1
51756: DEC
51757: ST_TO_ADDR
51758: LD_INT 8
51760: PUSH
51761: FOR_TO
51762: IFFALSE 51789
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
51764: LD_ADDR_EXP 42
51768: PUSH
51769: LD_EXP 42
51773: PPUSH
51774: LD_VAR 0 1
51778: PPUSH
51779: LD_INT 0
51781: PPUSH
51782: CALL_OW 1
51786: ST_TO_ADDR
51787: GO 51761
51789: POP
51790: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
51791: LD_ADDR_VAR 0 3
51795: PUSH
51796: LD_EXP 2
51800: PPUSH
51801: LD_INT 0
51803: PPUSH
51804: CALL_OW 517
51808: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
51809: LD_ADDR_VAR 0 1
51813: PUSH
51814: DOUBLE
51815: LD_INT 1
51817: DEC
51818: ST_TO_ADDR
51819: LD_VAR 0 3
51823: PUSH
51824: LD_INT 1
51826: ARRAY
51827: PUSH
51828: FOR_TO
51829: IFFALSE 51896
// for j := 1 to 8 do
51831: LD_ADDR_VAR 0 2
51835: PUSH
51836: DOUBLE
51837: LD_INT 1
51839: DEC
51840: ST_TO_ADDR
51841: LD_INT 8
51843: PUSH
51844: FOR_TO
51845: IFFALSE 51892
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
51847: LD_VAR 0 3
51851: PUSH
51852: LD_INT 1
51854: ARRAY
51855: PUSH
51856: LD_VAR 0 1
51860: ARRAY
51861: PPUSH
51862: LD_VAR 0 3
51866: PUSH
51867: LD_INT 2
51869: ARRAY
51870: PUSH
51871: LD_VAR 0 1
51875: ARRAY
51876: PPUSH
51877: LD_VAR 0 2
51881: PPUSH
51882: LD_INT 12
51884: NEG
51885: PPUSH
51886: CALL_OW 330
51890: GO 51844
51892: POP
51893: POP
51894: GO 51828
51896: POP
51897: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
51898: LD_EXP 33
51902: PPUSH
51903: LD_INT 1
51905: PPUSH
51906: CALL_OW 424
// UpdateCounter ;
51910: CALL 52518 0 0
// repeat wait ( 0 0$1 ) ;
51914: LD_INT 35
51916: PPUSH
51917: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51921: LD_ADDR_VAR 0 3
51925: PUSH
51926: LD_EXP 33
51930: PPUSH
51931: LD_INT 3
51933: PUSH
51934: LD_INT 57
51936: PUSH
51937: EMPTY
51938: LIST
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 50
51946: PUSH
51947: EMPTY
51948: LIST
51949: PUSH
51950: LD_INT 2
51952: PUSH
51953: LD_INT 30
51955: PUSH
51956: LD_INT 0
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 30
51965: PUSH
51966: LD_INT 1
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: LIST
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: LIST
51982: PPUSH
51983: CALL_OW 70
51987: ST_TO_ADDR
// if not tmp then
51988: LD_VAR 0 3
51992: NOT
51993: IFFALSE 51997
// continue ;
51995: GO 51914
// AddPoints ( tmp ) ;
51997: LD_VAR 0 3
52001: PPUSH
52002: CALL 52196 0 1
// UpdateCounter ;
52006: CALL 52518 0 0
// until false ;
52010: LD_INT 0
52012: IFFALSE 51914
// end ;
52014: PPOPN 3
52016: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
52017: LD_EXP 38
52021: PUSH
52022: LD_EXP 36
52026: AND
52027: IFFALSE 52193
52029: GO 52031
52031: DISABLE
52032: LD_INT 0
52034: PPUSH
52035: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
52036: LD_ADDR_VAR 0 2
52040: PUSH
52041: LD_EXP 2
52045: PPUSH
52046: LD_INT 0
52048: PPUSH
52049: CALL_OW 517
52053: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52054: LD_ADDR_VAR 0 1
52058: PUSH
52059: DOUBLE
52060: LD_INT 1
52062: DEC
52063: ST_TO_ADDR
52064: LD_VAR 0 2
52068: PUSH
52069: LD_INT 1
52071: ARRAY
52072: PUSH
52073: FOR_TO
52074: IFFALSE 52115
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
52076: LD_VAR 0 2
52080: PUSH
52081: LD_INT 1
52083: ARRAY
52084: PUSH
52085: LD_VAR 0 1
52089: ARRAY
52090: PPUSH
52091: LD_VAR 0 2
52095: PUSH
52096: LD_INT 2
52098: ARRAY
52099: PUSH
52100: LD_VAR 0 1
52104: ARRAY
52105: PPUSH
52106: LD_INT 125
52108: PPUSH
52109: CALL_OW 495
52113: GO 52073
52115: POP
52116: POP
// repeat wait ( mpEmissions ) ;
52117: LD_EXP 36
52121: PPUSH
52122: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
52126: LD_ADDR_VAR 0 1
52130: PUSH
52131: DOUBLE
52132: LD_INT 1
52134: DEC
52135: ST_TO_ADDR
52136: LD_VAR 0 2
52140: PUSH
52141: LD_INT 1
52143: ARRAY
52144: PUSH
52145: FOR_TO
52146: IFFALSE 52187
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
52148: LD_VAR 0 2
52152: PUSH
52153: LD_INT 1
52155: ARRAY
52156: PUSH
52157: LD_VAR 0 1
52161: ARRAY
52162: PPUSH
52163: LD_VAR 0 2
52167: PUSH
52168: LD_INT 2
52170: ARRAY
52171: PUSH
52172: LD_VAR 0 1
52176: ARRAY
52177: PPUSH
52178: LD_INT 15
52180: PPUSH
52181: CALL_OW 495
52185: GO 52145
52187: POP
52188: POP
// until false ;
52189: LD_INT 0
52191: IFFALSE 52117
// end ;
52193: PPOPN 2
52195: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
52196: LD_INT 0
52198: PPUSH
52199: PPUSH
52200: PPUSH
52201: PPUSH
52202: PPUSH
// if mpTeamGame then
52203: LD_EXP 11
52207: IFFALSE 52404
// begin first := depots [ 1 ] ;
52209: LD_ADDR_VAR 0 4
52213: PUSH
52214: LD_VAR 0 1
52218: PUSH
52219: LD_INT 1
52221: ARRAY
52222: ST_TO_ADDR
// side := GetSide ( first ) ;
52223: LD_ADDR_VAR 0 6
52227: PUSH
52228: LD_VAR 0 4
52232: PPUSH
52233: CALL_OW 255
52237: ST_TO_ADDR
// for i := 1 to mpTeams do
52238: LD_ADDR_VAR 0 3
52242: PUSH
52243: DOUBLE
52244: LD_INT 1
52246: DEC
52247: ST_TO_ADDR
52248: LD_EXP 10
52252: PUSH
52253: FOR_TO
52254: IFFALSE 52288
// if side in mpTeams [ i ] then
52256: LD_VAR 0 6
52260: PUSH
52261: LD_EXP 10
52265: PUSH
52266: LD_VAR 0 3
52270: ARRAY
52271: IN
52272: IFFALSE 52286
// begin team := i ;
52274: LD_ADDR_VAR 0 5
52278: PUSH
52279: LD_VAR 0 3
52283: ST_TO_ADDR
// break ;
52284: GO 52288
// end ;
52286: GO 52253
52288: POP
52289: POP
// if not team then
52290: LD_VAR 0 5
52294: NOT
52295: IFFALSE 52299
// exit ;
52297: GO 52513
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
52299: LD_EXP 33
52303: PPUSH
52304: LD_INT 81
52306: PUSH
52307: LD_VAR 0 6
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PPUSH
52316: CALL_OW 70
52320: IFFALSE 52324
// exit ;
52322: GO 52513
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
52324: LD_ADDR_EXP 42
52328: PUSH
52329: LD_EXP 42
52333: PPUSH
52334: LD_VAR 0 5
52338: PPUSH
52339: LD_EXP 42
52343: PUSH
52344: LD_VAR 0 5
52348: ARRAY
52349: PUSH
52350: LD_INT 1
52352: PLUS
52353: PPUSH
52354: CALL_OW 1
52358: ST_TO_ADDR
// for i in mpTeams [ team ] do
52359: LD_ADDR_VAR 0 3
52363: PUSH
52364: LD_EXP 10
52368: PUSH
52369: LD_VAR 0 5
52373: ARRAY
52374: PUSH
52375: FOR_IN
52376: IFFALSE 52400
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
52378: LD_VAR 0 3
52382: PPUSH
52383: LD_EXP 42
52387: PUSH
52388: LD_VAR 0 5
52392: ARRAY
52393: PPUSH
52394: CALL_OW 506
52398: GO 52375
52400: POP
52401: POP
// end else
52402: GO 52513
// begin first := depots [ 1 ] ;
52404: LD_ADDR_VAR 0 4
52408: PUSH
52409: LD_VAR 0 1
52413: PUSH
52414: LD_INT 1
52416: ARRAY
52417: ST_TO_ADDR
// side := GetSide ( first ) ;
52418: LD_ADDR_VAR 0 6
52422: PUSH
52423: LD_VAR 0 4
52427: PPUSH
52428: CALL_OW 255
52432: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
52433: LD_EXP 33
52437: PPUSH
52438: LD_INT 81
52440: PUSH
52441: LD_VAR 0 6
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PPUSH
52450: CALL_OW 70
52454: IFFALSE 52458
// exit ;
52456: GO 52513
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
52458: LD_ADDR_EXP 42
52462: PUSH
52463: LD_EXP 42
52467: PPUSH
52468: LD_VAR 0 6
52472: PPUSH
52473: LD_EXP 42
52477: PUSH
52478: LD_VAR 0 6
52482: ARRAY
52483: PUSH
52484: LD_INT 1
52486: PLUS
52487: PPUSH
52488: CALL_OW 1
52492: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
52493: LD_VAR 0 6
52497: PPUSH
52498: LD_EXP 42
52502: PUSH
52503: LD_VAR 0 6
52507: ARRAY
52508: PPUSH
52509: CALL_OW 506
// end ; end ;
52513: LD_VAR 0 2
52517: RET
// function UpdateCounter ; var i ; begin
52518: LD_INT 0
52520: PPUSH
52521: PPUSH
// result := [ ] ;
52522: LD_ADDR_VAR 0 1
52526: PUSH
52527: EMPTY
52528: ST_TO_ADDR
// if mpTeamGame then
52529: LD_EXP 11
52533: IFFALSE 52600
// begin for i := 1 to mpTeams do
52535: LD_ADDR_VAR 0 2
52539: PUSH
52540: DOUBLE
52541: LD_INT 1
52543: DEC
52544: ST_TO_ADDR
52545: LD_EXP 10
52549: PUSH
52550: FOR_TO
52551: IFFALSE 52596
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
52553: LD_ADDR_VAR 0 1
52557: PUSH
52558: LD_VAR 0 1
52562: PUSH
52563: LD_STRING #KingoftheHill-Team
52565: PUSH
52566: LD_VAR 0 2
52570: PUSH
52571: LD_EXP 42
52575: PUSH
52576: LD_VAR 0 2
52580: ARRAY
52581: PUSH
52582: LD_EXP 34
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: ADD
52593: ST_TO_ADDR
52594: GO 52550
52596: POP
52597: POP
// end else
52598: GO 52673
// begin for i := 1 to 8 do
52600: LD_ADDR_VAR 0 2
52604: PUSH
52605: DOUBLE
52606: LD_INT 1
52608: DEC
52609: ST_TO_ADDR
52610: LD_INT 8
52612: PUSH
52613: FOR_TO
52614: IFFALSE 52671
// if mpSidePositions [ i ] then
52616: LD_EXP 7
52620: PUSH
52621: LD_VAR 0 2
52625: ARRAY
52626: IFFALSE 52669
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
52628: LD_ADDR_VAR 0 1
52632: PUSH
52633: LD_VAR 0 1
52637: PUSH
52638: LD_STRING #KingoftheHill-Player
52640: PUSH
52641: LD_VAR 0 2
52645: PUSH
52646: LD_EXP 42
52650: PUSH
52651: LD_VAR 0 2
52655: ARRAY
52656: PUSH
52657: LD_EXP 34
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: ADD
52668: ST_TO_ADDR
52669: GO 52613
52671: POP
52672: POP
// end ; mpDisplayStrings := result ;
52673: LD_ADDR_EXP 37
52677: PUSH
52678: LD_VAR 0 1
52682: ST_TO_ADDR
// end ;
52683: LD_VAR 0 1
52687: RET
// export function HowMuchPointsKing ( side ) ; begin
52688: LD_INT 0
52690: PPUSH
// result := HowMuchPoints ( side ) ;
52691: LD_ADDR_VAR 0 2
52695: PUSH
52696: LD_VAR 0 1
52700: PPUSH
52701: CALL 52711 0 1
52705: ST_TO_ADDR
// end ;
52706: LD_VAR 0 2
52710: RET
// function HowMuchPoints ( side ) ; var i ; begin
52711: LD_INT 0
52713: PPUSH
52714: PPUSH
// if mpTeamGame then
52715: LD_EXP 11
52719: IFFALSE 52788
// begin for i := 1 to Count ( mpTeams ) do
52721: LD_ADDR_VAR 0 3
52725: PUSH
52726: DOUBLE
52727: LD_INT 1
52729: DEC
52730: ST_TO_ADDR
52731: LD_EXP 10
52735: PPUSH
52736: CALL 5007 0 1
52740: PUSH
52741: FOR_TO
52742: IFFALSE 52784
// begin if side in mpTeams [ i ] then
52744: LD_VAR 0 1
52748: PUSH
52749: LD_EXP 10
52753: PUSH
52754: LD_VAR 0 3
52758: ARRAY
52759: IN
52760: IFFALSE 52782
// begin result := mpKingPoints [ i ] ;
52762: LD_ADDR_VAR 0 2
52766: PUSH
52767: LD_EXP 42
52771: PUSH
52772: LD_VAR 0 3
52776: ARRAY
52777: ST_TO_ADDR
// exit ;
52778: POP
52779: POP
52780: GO 52804
// end ; end ;
52782: GO 52741
52784: POP
52785: POP
// end else
52786: GO 52804
// result := mpKingPoints [ side ] ;
52788: LD_ADDR_VAR 0 2
52792: PUSH
52793: LD_EXP 42
52797: PUSH
52798: LD_VAR 0 1
52802: ARRAY
52803: ST_TO_ADDR
// end ;
52804: LD_VAR 0 2
52808: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
52809: LD_EXP 38
52813: PUSH
52814: CALL 53136 0 0
52818: AND
52819: PUSH
52820: LD_OWVAR 4
52824: AND
52825: IFFALSE 53061
52827: GO 52829
52829: DISABLE
52830: LD_INT 0
52832: PPUSH
52833: PPUSH
// begin canWin := false ;
52834: LD_ADDR_VAR 0 2
52838: PUSH
52839: LD_INT 0
52841: ST_TO_ADDR
// if not HasPower ( your_side ) then
52842: LD_OWVAR 2
52846: PPUSH
52847: CALL 53176 0 1
52851: NOT
52852: IFFALSE 52863
// begin Multiplayer_Loose_Message ;
52854: CALL_OW 521
// enable ( mpLose ) ;
52858: LD_INT 102
52860: ENABLE_MARKED
// end else
52861: GO 53061
// begin canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) or not EnemiesInGame ;
52863: LD_ADDR_VAR 0 2
52867: PUSH
52868: LD_OWVAR 2
52872: PPUSH
52873: CALL 52711 0 1
52877: PUSH
52878: LD_EXP 34
52882: GREATEREQUAL
52883: PUSH
52884: LD_OWVAR 2
52888: PPUSH
52889: CALL 53176 0 1
52893: AND
52894: PUSH
52895: CALL 53064 0 0
52899: NOT
52900: OR
52901: ST_TO_ADDR
// for i := 1 to 8 do
52902: LD_ADDR_VAR 0 1
52906: PUSH
52907: DOUBLE
52908: LD_INT 1
52910: DEC
52911: ST_TO_ADDR
52912: LD_INT 8
52914: PUSH
52915: FOR_TO
52916: IFFALSE 53047
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
52918: LD_EXP 7
52922: PUSH
52923: LD_VAR 0 1
52927: ARRAY
52928: PUSH
52929: LD_VAR 0 1
52933: PPUSH
52934: CALL_OW 108
52938: AND
52939: PUSH
52940: LD_VAR 0 1
52944: PUSH
52945: LD_OWVAR 2
52949: NONEQUAL
52950: AND
52951: IFFALSE 53045
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
52953: LD_EXP 8
52957: PUSH
52958: LD_VAR 0 1
52962: ARRAY
52963: NOT
52964: PUSH
52965: LD_EXP 8
52969: PUSH
52970: LD_VAR 0 1
52974: ARRAY
52975: PUSH
52976: LD_EXP 8
52980: PUSH
52981: LD_OWVAR 2
52985: ARRAY
52986: NONEQUAL
52987: PUSH
52988: LD_OWVAR 2
52992: PPUSH
52993: LD_VAR 0 1
52997: PPUSH
52998: CALL_OW 81
53002: PUSH
53003: LD_INT 1
53005: NONEQUAL
53006: AND
53007: OR
53008: IFFALSE 53045
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
53010: LD_VAR 0 1
53014: PPUSH
53015: CALL 52711 0 1
53019: PUSH
53020: LD_EXP 34
53024: GREATEREQUAL
53025: PUSH
53026: LD_VAR 0 1
53030: PPUSH
53031: CALL 53176 0 1
53035: AND
53036: IFFALSE 53045
// begin enable ( mpLose ) ;
53038: LD_INT 102
53040: ENABLE_MARKED
// exit ;
53041: POP
53042: POP
53043: GO 53061
// end ;
53045: GO 52915
53047: POP
53048: POP
// if canWin then
53049: LD_VAR 0 2
53053: IFFALSE 53060
// enable ( mpWin ) else
53055: LD_INT 101
53057: ENABLE_MARKED
53058: GO 53061
// enable ;
53060: ENABLE
// end ; end ;
53061: PPOPN 2
53063: END
// function EnemiesInGame ; var i ; begin
53064: LD_INT 0
53066: PPUSH
53067: PPUSH
// result := false ;
53068: LD_ADDR_VAR 0 1
53072: PUSH
53073: LD_INT 0
53075: ST_TO_ADDR
// for i := 1 to 8 do
53076: LD_ADDR_VAR 0 2
53080: PUSH
53081: DOUBLE
53082: LD_INT 1
53084: DEC
53085: ST_TO_ADDR
53086: LD_INT 8
53088: PUSH
53089: FOR_TO
53090: IFFALSE 53129
// if i <> your_side and MultiplayerSideAlive ( i ) then
53092: LD_VAR 0 2
53096: PUSH
53097: LD_OWVAR 2
53101: NONEQUAL
53102: PUSH
53103: LD_VAR 0 2
53107: PPUSH
53108: CALL_OW 108
53112: AND
53113: IFFALSE 53127
// begin result := true ;
53115: LD_ADDR_VAR 0 1
53119: PUSH
53120: LD_INT 1
53122: ST_TO_ADDR
// exit ;
53123: POP
53124: POP
53125: GO 53131
// end ;
53127: GO 53089
53129: POP
53130: POP
// end ;
53131: LD_VAR 0 1
53135: RET
// function CanWinLoose ; begin
53136: LD_INT 0
53138: PPUSH
// result := true ;
53139: LD_ADDR_VAR 0 1
53143: PUSH
53144: LD_INT 1
53146: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53147: CALL_OW 531
53151: PUSH
53152: CALL_OW 519
53156: PUSH
53157: LD_INT 1
53159: GREATER
53160: AND
53161: IFFALSE 53171
// result := false ;
53163: LD_ADDR_VAR 0 1
53167: PUSH
53168: LD_INT 0
53170: ST_TO_ADDR
// end ;
53171: LD_VAR 0 1
53175: RET
// function HasPower ( i ) ; begin
53176: LD_INT 0
53178: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53179: LD_ADDR_VAR 0 2
53183: PUSH
53184: LD_INT 22
53186: PUSH
53187: LD_VAR 0 1
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: LD_INT 2
53198: PUSH
53199: LD_INT 21
53201: PUSH
53202: LD_INT 1
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 33
53211: PUSH
53212: LD_INT 3
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 33
53221: PUSH
53222: LD_INT 5
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PPUSH
53239: CALL_OW 69
53243: ST_TO_ADDR
// end ; end_of_file end_of_file
53244: LD_VAR 0 2
53248: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
53249: LD_VAR 0 1
53253: PPUSH
53254: LD_VAR 0 2
53258: PPUSH
53259: LD_VAR 0 3
53263: PPUSH
53264: LD_VAR 0 4
53268: PPUSH
53269: LD_VAR 0 5
53273: PPUSH
53274: LD_VAR 0 6
53278: PPUSH
53279: CALL 53480 0 6
// end ;
53283: PPOPN 6
53285: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
53286: LD_INT 0
53288: PPUSH
// begin if not units then
53289: LD_VAR 0 1
53293: NOT
53294: IFFALSE 53298
// exit ;
53296: GO 53298
// end ;
53298: PPOPN 7
53300: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
53301: CALL 53367 0 0
// end ; end_of_file
53305: PPOPN 1
53307: END
// export globalGameSaveCounter ; every 0 0$1 do
53308: GO 53310
53310: DISABLE
// begin enable ;
53311: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
53312: LD_STRING updateTimer(
53314: PUSH
53315: LD_OWVAR 1
53319: STR
53320: PUSH
53321: LD_STRING );
53323: STR
53324: PPUSH
53325: CALL_OW 559
// end ;
53329: END
// every 0 0$1 do
53330: GO 53332
53332: DISABLE
// begin globalGameSaveCounter := 0 ;
53333: LD_ADDR_EXP 43
53337: PUSH
53338: LD_INT 0
53340: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
53341: LD_STRING setGameSaveCounter(0)
53343: PPUSH
53344: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
53348: LD_STRING initStreamRollete();
53350: PPUSH
53351: CALL_OW 559
// InitStreamMode ;
53355: CALL 54698 0 0
// DefineStreamItems ( false ) ;
53359: LD_INT 0
53361: PPUSH
53362: CALL 55162 0 1
// end ;
53366: END
// export function SOS_MapStart ( ) ; begin
53367: LD_INT 0
53369: PPUSH
// if streamModeActive then
53370: LD_EXP 44
53374: IFFALSE 53383
// DefineStreamItems ( true ) ;
53376: LD_INT 1
53378: PPUSH
53379: CALL 55162 0 1
// UpdateLuaVariables ( ) ;
53383: CALL 53400 0 0
// UpdateFactoryWaypoints ( ) ;
53387: CALL 68031 0 0
// UpdateWarehouseGatheringPoints ( ) ;
53391: CALL 68288 0 0
// end ;
53395: LD_VAR 0 1
53399: RET
// function UpdateLuaVariables ( ) ; begin
53400: LD_INT 0
53402: PPUSH
// if globalGameSaveCounter then
53403: LD_EXP 43
53407: IFFALSE 53441
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
53409: LD_ADDR_EXP 43
53413: PUSH
53414: LD_EXP 43
53418: PPUSH
53419: CALL 41957 0 1
53423: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
53424: LD_STRING setGameSaveCounter(
53426: PUSH
53427: LD_EXP 43
53431: STR
53432: PUSH
53433: LD_STRING )
53435: STR
53436: PPUSH
53437: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
53441: LD_STRING setGameDifficulty(
53443: PUSH
53444: LD_OWVAR 67
53448: STR
53449: PUSH
53450: LD_STRING )
53452: STR
53453: PPUSH
53454: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
53458: LD_STRING displayDifficulty(
53460: PUSH
53461: LD_OWVAR 67
53465: STR
53466: PUSH
53467: LD_STRING )
53469: STR
53470: PPUSH
53471: CALL_OW 559
// end ;
53475: LD_VAR 0 1
53479: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
53480: LD_INT 0
53482: PPUSH
// if p2 = stream_mode then
53483: LD_VAR 0 2
53487: PUSH
53488: LD_INT 100
53490: EQUAL
53491: IFFALSE 54494
// begin if not StreamModeActive then
53493: LD_EXP 44
53497: NOT
53498: IFFALSE 53508
// StreamModeActive := true ;
53500: LD_ADDR_EXP 44
53504: PUSH
53505: LD_INT 1
53507: ST_TO_ADDR
// if p3 = 0 then
53508: LD_VAR 0 3
53512: PUSH
53513: LD_INT 0
53515: EQUAL
53516: IFFALSE 53522
// InitStreamMode ;
53518: CALL 54698 0 0
// if p3 = 1 then
53522: LD_VAR 0 3
53526: PUSH
53527: LD_INT 1
53529: EQUAL
53530: IFFALSE 53540
// sRocket := true ;
53532: LD_ADDR_EXP 49
53536: PUSH
53537: LD_INT 1
53539: ST_TO_ADDR
// if p3 = 2 then
53540: LD_VAR 0 3
53544: PUSH
53545: LD_INT 2
53547: EQUAL
53548: IFFALSE 53558
// sSpeed := true ;
53550: LD_ADDR_EXP 48
53554: PUSH
53555: LD_INT 1
53557: ST_TO_ADDR
// if p3 = 3 then
53558: LD_VAR 0 3
53562: PUSH
53563: LD_INT 3
53565: EQUAL
53566: IFFALSE 53576
// sEngine := true ;
53568: LD_ADDR_EXP 50
53572: PUSH
53573: LD_INT 1
53575: ST_TO_ADDR
// if p3 = 4 then
53576: LD_VAR 0 3
53580: PUSH
53581: LD_INT 4
53583: EQUAL
53584: IFFALSE 53594
// sSpec := true ;
53586: LD_ADDR_EXP 47
53590: PUSH
53591: LD_INT 1
53593: ST_TO_ADDR
// if p3 = 5 then
53594: LD_VAR 0 3
53598: PUSH
53599: LD_INT 5
53601: EQUAL
53602: IFFALSE 53612
// sLevel := true ;
53604: LD_ADDR_EXP 51
53608: PUSH
53609: LD_INT 1
53611: ST_TO_ADDR
// if p3 = 6 then
53612: LD_VAR 0 3
53616: PUSH
53617: LD_INT 6
53619: EQUAL
53620: IFFALSE 53630
// sArmoury := true ;
53622: LD_ADDR_EXP 52
53626: PUSH
53627: LD_INT 1
53629: ST_TO_ADDR
// if p3 = 7 then
53630: LD_VAR 0 3
53634: PUSH
53635: LD_INT 7
53637: EQUAL
53638: IFFALSE 53648
// sRadar := true ;
53640: LD_ADDR_EXP 53
53644: PUSH
53645: LD_INT 1
53647: ST_TO_ADDR
// if p3 = 8 then
53648: LD_VAR 0 3
53652: PUSH
53653: LD_INT 8
53655: EQUAL
53656: IFFALSE 53666
// sBunker := true ;
53658: LD_ADDR_EXP 54
53662: PUSH
53663: LD_INT 1
53665: ST_TO_ADDR
// if p3 = 9 then
53666: LD_VAR 0 3
53670: PUSH
53671: LD_INT 9
53673: EQUAL
53674: IFFALSE 53684
// sHack := true ;
53676: LD_ADDR_EXP 55
53680: PUSH
53681: LD_INT 1
53683: ST_TO_ADDR
// if p3 = 10 then
53684: LD_VAR 0 3
53688: PUSH
53689: LD_INT 10
53691: EQUAL
53692: IFFALSE 53702
// sFire := true ;
53694: LD_ADDR_EXP 56
53698: PUSH
53699: LD_INT 1
53701: ST_TO_ADDR
// if p3 = 11 then
53702: LD_VAR 0 3
53706: PUSH
53707: LD_INT 11
53709: EQUAL
53710: IFFALSE 53720
// sRefresh := true ;
53712: LD_ADDR_EXP 57
53716: PUSH
53717: LD_INT 1
53719: ST_TO_ADDR
// if p3 = 12 then
53720: LD_VAR 0 3
53724: PUSH
53725: LD_INT 12
53727: EQUAL
53728: IFFALSE 53738
// sExp := true ;
53730: LD_ADDR_EXP 58
53734: PUSH
53735: LD_INT 1
53737: ST_TO_ADDR
// if p3 = 13 then
53738: LD_VAR 0 3
53742: PUSH
53743: LD_INT 13
53745: EQUAL
53746: IFFALSE 53756
// sDepot := true ;
53748: LD_ADDR_EXP 59
53752: PUSH
53753: LD_INT 1
53755: ST_TO_ADDR
// if p3 = 14 then
53756: LD_VAR 0 3
53760: PUSH
53761: LD_INT 14
53763: EQUAL
53764: IFFALSE 53774
// sFlag := true ;
53766: LD_ADDR_EXP 60
53770: PUSH
53771: LD_INT 1
53773: ST_TO_ADDR
// if p3 = 15 then
53774: LD_VAR 0 3
53778: PUSH
53779: LD_INT 15
53781: EQUAL
53782: IFFALSE 53792
// sKamikadze := true ;
53784: LD_ADDR_EXP 68
53788: PUSH
53789: LD_INT 1
53791: ST_TO_ADDR
// if p3 = 16 then
53792: LD_VAR 0 3
53796: PUSH
53797: LD_INT 16
53799: EQUAL
53800: IFFALSE 53810
// sTroll := true ;
53802: LD_ADDR_EXP 69
53806: PUSH
53807: LD_INT 1
53809: ST_TO_ADDR
// if p3 = 17 then
53810: LD_VAR 0 3
53814: PUSH
53815: LD_INT 17
53817: EQUAL
53818: IFFALSE 53828
// sSlow := true ;
53820: LD_ADDR_EXP 70
53824: PUSH
53825: LD_INT 1
53827: ST_TO_ADDR
// if p3 = 18 then
53828: LD_VAR 0 3
53832: PUSH
53833: LD_INT 18
53835: EQUAL
53836: IFFALSE 53846
// sLack := true ;
53838: LD_ADDR_EXP 71
53842: PUSH
53843: LD_INT 1
53845: ST_TO_ADDR
// if p3 = 19 then
53846: LD_VAR 0 3
53850: PUSH
53851: LD_INT 19
53853: EQUAL
53854: IFFALSE 53864
// sTank := true ;
53856: LD_ADDR_EXP 73
53860: PUSH
53861: LD_INT 1
53863: ST_TO_ADDR
// if p3 = 20 then
53864: LD_VAR 0 3
53868: PUSH
53869: LD_INT 20
53871: EQUAL
53872: IFFALSE 53882
// sRemote := true ;
53874: LD_ADDR_EXP 74
53878: PUSH
53879: LD_INT 1
53881: ST_TO_ADDR
// if p3 = 21 then
53882: LD_VAR 0 3
53886: PUSH
53887: LD_INT 21
53889: EQUAL
53890: IFFALSE 53900
// sPowell := true ;
53892: LD_ADDR_EXP 75
53896: PUSH
53897: LD_INT 1
53899: ST_TO_ADDR
// if p3 = 22 then
53900: LD_VAR 0 3
53904: PUSH
53905: LD_INT 22
53907: EQUAL
53908: IFFALSE 53918
// sTeleport := true ;
53910: LD_ADDR_EXP 78
53914: PUSH
53915: LD_INT 1
53917: ST_TO_ADDR
// if p3 = 23 then
53918: LD_VAR 0 3
53922: PUSH
53923: LD_INT 23
53925: EQUAL
53926: IFFALSE 53936
// sOilTower := true ;
53928: LD_ADDR_EXP 80
53932: PUSH
53933: LD_INT 1
53935: ST_TO_ADDR
// if p3 = 24 then
53936: LD_VAR 0 3
53940: PUSH
53941: LD_INT 24
53943: EQUAL
53944: IFFALSE 53954
// sShovel := true ;
53946: LD_ADDR_EXP 81
53950: PUSH
53951: LD_INT 1
53953: ST_TO_ADDR
// if p3 = 25 then
53954: LD_VAR 0 3
53958: PUSH
53959: LD_INT 25
53961: EQUAL
53962: IFFALSE 53972
// sSheik := true ;
53964: LD_ADDR_EXP 82
53968: PUSH
53969: LD_INT 1
53971: ST_TO_ADDR
// if p3 = 26 then
53972: LD_VAR 0 3
53976: PUSH
53977: LD_INT 26
53979: EQUAL
53980: IFFALSE 53990
// sEarthquake := true ;
53982: LD_ADDR_EXP 84
53986: PUSH
53987: LD_INT 1
53989: ST_TO_ADDR
// if p3 = 27 then
53990: LD_VAR 0 3
53994: PUSH
53995: LD_INT 27
53997: EQUAL
53998: IFFALSE 54008
// sAI := true ;
54000: LD_ADDR_EXP 85
54004: PUSH
54005: LD_INT 1
54007: ST_TO_ADDR
// if p3 = 28 then
54008: LD_VAR 0 3
54012: PUSH
54013: LD_INT 28
54015: EQUAL
54016: IFFALSE 54026
// sCargo := true ;
54018: LD_ADDR_EXP 88
54022: PUSH
54023: LD_INT 1
54025: ST_TO_ADDR
// if p3 = 29 then
54026: LD_VAR 0 3
54030: PUSH
54031: LD_INT 29
54033: EQUAL
54034: IFFALSE 54044
// sDLaser := true ;
54036: LD_ADDR_EXP 89
54040: PUSH
54041: LD_INT 1
54043: ST_TO_ADDR
// if p3 = 30 then
54044: LD_VAR 0 3
54048: PUSH
54049: LD_INT 30
54051: EQUAL
54052: IFFALSE 54062
// sExchange := true ;
54054: LD_ADDR_EXP 90
54058: PUSH
54059: LD_INT 1
54061: ST_TO_ADDR
// if p3 = 31 then
54062: LD_VAR 0 3
54066: PUSH
54067: LD_INT 31
54069: EQUAL
54070: IFFALSE 54080
// sFac := true ;
54072: LD_ADDR_EXP 91
54076: PUSH
54077: LD_INT 1
54079: ST_TO_ADDR
// if p3 = 32 then
54080: LD_VAR 0 3
54084: PUSH
54085: LD_INT 32
54087: EQUAL
54088: IFFALSE 54098
// sPower := true ;
54090: LD_ADDR_EXP 92
54094: PUSH
54095: LD_INT 1
54097: ST_TO_ADDR
// if p3 = 33 then
54098: LD_VAR 0 3
54102: PUSH
54103: LD_INT 33
54105: EQUAL
54106: IFFALSE 54116
// sRandom := true ;
54108: LD_ADDR_EXP 93
54112: PUSH
54113: LD_INT 1
54115: ST_TO_ADDR
// if p3 = 34 then
54116: LD_VAR 0 3
54120: PUSH
54121: LD_INT 34
54123: EQUAL
54124: IFFALSE 54134
// sShield := true ;
54126: LD_ADDR_EXP 94
54130: PUSH
54131: LD_INT 1
54133: ST_TO_ADDR
// if p3 = 35 then
54134: LD_VAR 0 3
54138: PUSH
54139: LD_INT 35
54141: EQUAL
54142: IFFALSE 54152
// sTime := true ;
54144: LD_ADDR_EXP 95
54148: PUSH
54149: LD_INT 1
54151: ST_TO_ADDR
// if p3 = 36 then
54152: LD_VAR 0 3
54156: PUSH
54157: LD_INT 36
54159: EQUAL
54160: IFFALSE 54170
// sTools := true ;
54162: LD_ADDR_EXP 96
54166: PUSH
54167: LD_INT 1
54169: ST_TO_ADDR
// if p3 = 101 then
54170: LD_VAR 0 3
54174: PUSH
54175: LD_INT 101
54177: EQUAL
54178: IFFALSE 54188
// sSold := true ;
54180: LD_ADDR_EXP 61
54184: PUSH
54185: LD_INT 1
54187: ST_TO_ADDR
// if p3 = 102 then
54188: LD_VAR 0 3
54192: PUSH
54193: LD_INT 102
54195: EQUAL
54196: IFFALSE 54206
// sDiff := true ;
54198: LD_ADDR_EXP 62
54202: PUSH
54203: LD_INT 1
54205: ST_TO_ADDR
// if p3 = 103 then
54206: LD_VAR 0 3
54210: PUSH
54211: LD_INT 103
54213: EQUAL
54214: IFFALSE 54224
// sFog := true ;
54216: LD_ADDR_EXP 65
54220: PUSH
54221: LD_INT 1
54223: ST_TO_ADDR
// if p3 = 104 then
54224: LD_VAR 0 3
54228: PUSH
54229: LD_INT 104
54231: EQUAL
54232: IFFALSE 54242
// sReset := true ;
54234: LD_ADDR_EXP 66
54238: PUSH
54239: LD_INT 1
54241: ST_TO_ADDR
// if p3 = 105 then
54242: LD_VAR 0 3
54246: PUSH
54247: LD_INT 105
54249: EQUAL
54250: IFFALSE 54260
// sSun := true ;
54252: LD_ADDR_EXP 67
54256: PUSH
54257: LD_INT 1
54259: ST_TO_ADDR
// if p3 = 106 then
54260: LD_VAR 0 3
54264: PUSH
54265: LD_INT 106
54267: EQUAL
54268: IFFALSE 54278
// sTiger := true ;
54270: LD_ADDR_EXP 63
54274: PUSH
54275: LD_INT 1
54277: ST_TO_ADDR
// if p3 = 107 then
54278: LD_VAR 0 3
54282: PUSH
54283: LD_INT 107
54285: EQUAL
54286: IFFALSE 54296
// sBomb := true ;
54288: LD_ADDR_EXP 64
54292: PUSH
54293: LD_INT 1
54295: ST_TO_ADDR
// if p3 = 108 then
54296: LD_VAR 0 3
54300: PUSH
54301: LD_INT 108
54303: EQUAL
54304: IFFALSE 54314
// sWound := true ;
54306: LD_ADDR_EXP 72
54310: PUSH
54311: LD_INT 1
54313: ST_TO_ADDR
// if p3 = 109 then
54314: LD_VAR 0 3
54318: PUSH
54319: LD_INT 109
54321: EQUAL
54322: IFFALSE 54332
// sBetray := true ;
54324: LD_ADDR_EXP 76
54328: PUSH
54329: LD_INT 1
54331: ST_TO_ADDR
// if p3 = 110 then
54332: LD_VAR 0 3
54336: PUSH
54337: LD_INT 110
54339: EQUAL
54340: IFFALSE 54350
// sContamin := true ;
54342: LD_ADDR_EXP 77
54346: PUSH
54347: LD_INT 1
54349: ST_TO_ADDR
// if p3 = 111 then
54350: LD_VAR 0 3
54354: PUSH
54355: LD_INT 111
54357: EQUAL
54358: IFFALSE 54368
// sOil := true ;
54360: LD_ADDR_EXP 79
54364: PUSH
54365: LD_INT 1
54367: ST_TO_ADDR
// if p3 = 112 then
54368: LD_VAR 0 3
54372: PUSH
54373: LD_INT 112
54375: EQUAL
54376: IFFALSE 54386
// sStu := true ;
54378: LD_ADDR_EXP 83
54382: PUSH
54383: LD_INT 1
54385: ST_TO_ADDR
// if p3 = 113 then
54386: LD_VAR 0 3
54390: PUSH
54391: LD_INT 113
54393: EQUAL
54394: IFFALSE 54404
// sBazooka := true ;
54396: LD_ADDR_EXP 86
54400: PUSH
54401: LD_INT 1
54403: ST_TO_ADDR
// if p3 = 114 then
54404: LD_VAR 0 3
54408: PUSH
54409: LD_INT 114
54411: EQUAL
54412: IFFALSE 54422
// sMortar := true ;
54414: LD_ADDR_EXP 87
54418: PUSH
54419: LD_INT 1
54421: ST_TO_ADDR
// if p3 = 115 then
54422: LD_VAR 0 3
54426: PUSH
54427: LD_INT 115
54429: EQUAL
54430: IFFALSE 54440
// sRanger := true ;
54432: LD_ADDR_EXP 97
54436: PUSH
54437: LD_INT 1
54439: ST_TO_ADDR
// if p3 = 116 then
54440: LD_VAR 0 3
54444: PUSH
54445: LD_INT 116
54447: EQUAL
54448: IFFALSE 54458
// sComputer := true ;
54450: LD_ADDR_EXP 98
54454: PUSH
54455: LD_INT 1
54457: ST_TO_ADDR
// if p3 = 117 then
54458: LD_VAR 0 3
54462: PUSH
54463: LD_INT 117
54465: EQUAL
54466: IFFALSE 54476
// s30 := true ;
54468: LD_ADDR_EXP 99
54472: PUSH
54473: LD_INT 1
54475: ST_TO_ADDR
// if p3 = 118 then
54476: LD_VAR 0 3
54480: PUSH
54481: LD_INT 118
54483: EQUAL
54484: IFFALSE 54494
// s60 := true ;
54486: LD_ADDR_EXP 100
54490: PUSH
54491: LD_INT 1
54493: ST_TO_ADDR
// end ; if p2 = hack_mode then
54494: LD_VAR 0 2
54498: PUSH
54499: LD_INT 101
54501: EQUAL
54502: IFFALSE 54630
// begin case p3 of 1 :
54504: LD_VAR 0 3
54508: PUSH
54509: LD_INT 1
54511: DOUBLE
54512: EQUAL
54513: IFTRUE 54517
54515: GO 54524
54517: POP
// hHackUnlimitedResources ; 2 :
54518: CALL 66777 0 0
54522: GO 54630
54524: LD_INT 2
54526: DOUBLE
54527: EQUAL
54528: IFTRUE 54532
54530: GO 54539
54532: POP
// hHackSetLevel10 ; 3 :
54533: CALL 66910 0 0
54537: GO 54630
54539: LD_INT 3
54541: DOUBLE
54542: EQUAL
54543: IFTRUE 54547
54545: GO 54554
54547: POP
// hHackSetLevel10YourUnits ; 4 :
54548: CALL 66995 0 0
54552: GO 54630
54554: LD_INT 4
54556: DOUBLE
54557: EQUAL
54558: IFTRUE 54562
54560: GO 54569
54562: POP
// hHackInvincible ; 5 :
54563: CALL 67443 0 0
54567: GO 54630
54569: LD_INT 5
54571: DOUBLE
54572: EQUAL
54573: IFTRUE 54577
54575: GO 54584
54577: POP
// hHackInvisible ; 6 :
54578: CALL 67554 0 0
54582: GO 54630
54584: LD_INT 6
54586: DOUBLE
54587: EQUAL
54588: IFTRUE 54592
54590: GO 54599
54592: POP
// hHackChangeYourSide ; 7 :
54593: CALL 67611 0 0
54597: GO 54630
54599: LD_INT 7
54601: DOUBLE
54602: EQUAL
54603: IFTRUE 54607
54605: GO 54614
54607: POP
// hHackChangeUnitSide ; 8 :
54608: CALL 67653 0 0
54612: GO 54630
54614: LD_INT 8
54616: DOUBLE
54617: EQUAL
54618: IFTRUE 54622
54620: GO 54629
54622: POP
// hHackFog ; end ;
54623: CALL 67754 0 0
54627: GO 54630
54629: POP
// end ; if p2 = game_save_mode then
54630: LD_VAR 0 2
54634: PUSH
54635: LD_INT 102
54637: EQUAL
54638: IFFALSE 54693
// begin if p3 = 1 then
54640: LD_VAR 0 3
54644: PUSH
54645: LD_INT 1
54647: EQUAL
54648: IFFALSE 54660
// globalGameSaveCounter := p4 ;
54650: LD_ADDR_EXP 43
54654: PUSH
54655: LD_VAR 0 4
54659: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
54660: LD_VAR 0 3
54664: PUSH
54665: LD_INT 2
54667: EQUAL
54668: PUSH
54669: LD_EXP 43
54673: AND
54674: IFFALSE 54693
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
54676: LD_STRING setGameSaveCounter(
54678: PUSH
54679: LD_EXP 43
54683: STR
54684: PUSH
54685: LD_STRING )
54687: STR
54688: PPUSH
54689: CALL_OW 559
// end ; end ;
54693: LD_VAR 0 7
54697: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
54698: LD_INT 0
54700: PPUSH
// streamModeActive := false ;
54701: LD_ADDR_EXP 44
54705: PUSH
54706: LD_INT 0
54708: ST_TO_ADDR
// normalCounter := 36 ;
54709: LD_ADDR_EXP 45
54713: PUSH
54714: LD_INT 36
54716: ST_TO_ADDR
// hardcoreCounter := 18 ;
54717: LD_ADDR_EXP 46
54721: PUSH
54722: LD_INT 18
54724: ST_TO_ADDR
// sRocket := false ;
54725: LD_ADDR_EXP 49
54729: PUSH
54730: LD_INT 0
54732: ST_TO_ADDR
// sSpeed := false ;
54733: LD_ADDR_EXP 48
54737: PUSH
54738: LD_INT 0
54740: ST_TO_ADDR
// sEngine := false ;
54741: LD_ADDR_EXP 50
54745: PUSH
54746: LD_INT 0
54748: ST_TO_ADDR
// sSpec := false ;
54749: LD_ADDR_EXP 47
54753: PUSH
54754: LD_INT 0
54756: ST_TO_ADDR
// sLevel := false ;
54757: LD_ADDR_EXP 51
54761: PUSH
54762: LD_INT 0
54764: ST_TO_ADDR
// sArmoury := false ;
54765: LD_ADDR_EXP 52
54769: PUSH
54770: LD_INT 0
54772: ST_TO_ADDR
// sRadar := false ;
54773: LD_ADDR_EXP 53
54777: PUSH
54778: LD_INT 0
54780: ST_TO_ADDR
// sBunker := false ;
54781: LD_ADDR_EXP 54
54785: PUSH
54786: LD_INT 0
54788: ST_TO_ADDR
// sHack := false ;
54789: LD_ADDR_EXP 55
54793: PUSH
54794: LD_INT 0
54796: ST_TO_ADDR
// sFire := false ;
54797: LD_ADDR_EXP 56
54801: PUSH
54802: LD_INT 0
54804: ST_TO_ADDR
// sRefresh := false ;
54805: LD_ADDR_EXP 57
54809: PUSH
54810: LD_INT 0
54812: ST_TO_ADDR
// sExp := false ;
54813: LD_ADDR_EXP 58
54817: PUSH
54818: LD_INT 0
54820: ST_TO_ADDR
// sDepot := false ;
54821: LD_ADDR_EXP 59
54825: PUSH
54826: LD_INT 0
54828: ST_TO_ADDR
// sFlag := false ;
54829: LD_ADDR_EXP 60
54833: PUSH
54834: LD_INT 0
54836: ST_TO_ADDR
// sKamikadze := false ;
54837: LD_ADDR_EXP 68
54841: PUSH
54842: LD_INT 0
54844: ST_TO_ADDR
// sTroll := false ;
54845: LD_ADDR_EXP 69
54849: PUSH
54850: LD_INT 0
54852: ST_TO_ADDR
// sSlow := false ;
54853: LD_ADDR_EXP 70
54857: PUSH
54858: LD_INT 0
54860: ST_TO_ADDR
// sLack := false ;
54861: LD_ADDR_EXP 71
54865: PUSH
54866: LD_INT 0
54868: ST_TO_ADDR
// sTank := false ;
54869: LD_ADDR_EXP 73
54873: PUSH
54874: LD_INT 0
54876: ST_TO_ADDR
// sRemote := false ;
54877: LD_ADDR_EXP 74
54881: PUSH
54882: LD_INT 0
54884: ST_TO_ADDR
// sPowell := false ;
54885: LD_ADDR_EXP 75
54889: PUSH
54890: LD_INT 0
54892: ST_TO_ADDR
// sTeleport := false ;
54893: LD_ADDR_EXP 78
54897: PUSH
54898: LD_INT 0
54900: ST_TO_ADDR
// sOilTower := false ;
54901: LD_ADDR_EXP 80
54905: PUSH
54906: LD_INT 0
54908: ST_TO_ADDR
// sShovel := false ;
54909: LD_ADDR_EXP 81
54913: PUSH
54914: LD_INT 0
54916: ST_TO_ADDR
// sSheik := false ;
54917: LD_ADDR_EXP 82
54921: PUSH
54922: LD_INT 0
54924: ST_TO_ADDR
// sEarthquake := false ;
54925: LD_ADDR_EXP 84
54929: PUSH
54930: LD_INT 0
54932: ST_TO_ADDR
// sAI := false ;
54933: LD_ADDR_EXP 85
54937: PUSH
54938: LD_INT 0
54940: ST_TO_ADDR
// sCargo := false ;
54941: LD_ADDR_EXP 88
54945: PUSH
54946: LD_INT 0
54948: ST_TO_ADDR
// sDLaser := false ;
54949: LD_ADDR_EXP 89
54953: PUSH
54954: LD_INT 0
54956: ST_TO_ADDR
// sExchange := false ;
54957: LD_ADDR_EXP 90
54961: PUSH
54962: LD_INT 0
54964: ST_TO_ADDR
// sFac := false ;
54965: LD_ADDR_EXP 91
54969: PUSH
54970: LD_INT 0
54972: ST_TO_ADDR
// sPower := false ;
54973: LD_ADDR_EXP 92
54977: PUSH
54978: LD_INT 0
54980: ST_TO_ADDR
// sRandom := false ;
54981: LD_ADDR_EXP 93
54985: PUSH
54986: LD_INT 0
54988: ST_TO_ADDR
// sShield := false ;
54989: LD_ADDR_EXP 94
54993: PUSH
54994: LD_INT 0
54996: ST_TO_ADDR
// sTime := false ;
54997: LD_ADDR_EXP 95
55001: PUSH
55002: LD_INT 0
55004: ST_TO_ADDR
// sTools := false ;
55005: LD_ADDR_EXP 96
55009: PUSH
55010: LD_INT 0
55012: ST_TO_ADDR
// sSold := false ;
55013: LD_ADDR_EXP 61
55017: PUSH
55018: LD_INT 0
55020: ST_TO_ADDR
// sDiff := false ;
55021: LD_ADDR_EXP 62
55025: PUSH
55026: LD_INT 0
55028: ST_TO_ADDR
// sFog := false ;
55029: LD_ADDR_EXP 65
55033: PUSH
55034: LD_INT 0
55036: ST_TO_ADDR
// sReset := false ;
55037: LD_ADDR_EXP 66
55041: PUSH
55042: LD_INT 0
55044: ST_TO_ADDR
// sSun := false ;
55045: LD_ADDR_EXP 67
55049: PUSH
55050: LD_INT 0
55052: ST_TO_ADDR
// sTiger := false ;
55053: LD_ADDR_EXP 63
55057: PUSH
55058: LD_INT 0
55060: ST_TO_ADDR
// sBomb := false ;
55061: LD_ADDR_EXP 64
55065: PUSH
55066: LD_INT 0
55068: ST_TO_ADDR
// sWound := false ;
55069: LD_ADDR_EXP 72
55073: PUSH
55074: LD_INT 0
55076: ST_TO_ADDR
// sBetray := false ;
55077: LD_ADDR_EXP 76
55081: PUSH
55082: LD_INT 0
55084: ST_TO_ADDR
// sContamin := false ;
55085: LD_ADDR_EXP 77
55089: PUSH
55090: LD_INT 0
55092: ST_TO_ADDR
// sOil := false ;
55093: LD_ADDR_EXP 79
55097: PUSH
55098: LD_INT 0
55100: ST_TO_ADDR
// sStu := false ;
55101: LD_ADDR_EXP 83
55105: PUSH
55106: LD_INT 0
55108: ST_TO_ADDR
// sBazooka := false ;
55109: LD_ADDR_EXP 86
55113: PUSH
55114: LD_INT 0
55116: ST_TO_ADDR
// sMortar := false ;
55117: LD_ADDR_EXP 87
55121: PUSH
55122: LD_INT 0
55124: ST_TO_ADDR
// sRanger := false ;
55125: LD_ADDR_EXP 97
55129: PUSH
55130: LD_INT 0
55132: ST_TO_ADDR
// sComputer := false ;
55133: LD_ADDR_EXP 98
55137: PUSH
55138: LD_INT 0
55140: ST_TO_ADDR
// s30 := false ;
55141: LD_ADDR_EXP 99
55145: PUSH
55146: LD_INT 0
55148: ST_TO_ADDR
// s60 := false ;
55149: LD_ADDR_EXP 100
55153: PUSH
55154: LD_INT 0
55156: ST_TO_ADDR
// end ;
55157: LD_VAR 0 1
55161: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
55162: LD_INT 0
55164: PPUSH
55165: PPUSH
55166: PPUSH
55167: PPUSH
55168: PPUSH
55169: PPUSH
55170: PPUSH
// result := [ ] ;
55171: LD_ADDR_VAR 0 2
55175: PUSH
55176: EMPTY
55177: ST_TO_ADDR
// if campaign_id = 1 then
55178: LD_OWVAR 69
55182: PUSH
55183: LD_INT 1
55185: EQUAL
55186: IFFALSE 58352
// begin case mission_number of 1 :
55188: LD_OWVAR 70
55192: PUSH
55193: LD_INT 1
55195: DOUBLE
55196: EQUAL
55197: IFTRUE 55201
55199: GO 55277
55201: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
55202: LD_ADDR_VAR 0 2
55206: PUSH
55207: LD_INT 2
55209: PUSH
55210: LD_INT 4
55212: PUSH
55213: LD_INT 11
55215: PUSH
55216: LD_INT 12
55218: PUSH
55219: LD_INT 15
55221: PUSH
55222: LD_INT 16
55224: PUSH
55225: LD_INT 22
55227: PUSH
55228: LD_INT 23
55230: PUSH
55231: LD_INT 26
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 101
55247: PUSH
55248: LD_INT 102
55250: PUSH
55251: LD_INT 106
55253: PUSH
55254: LD_INT 116
55256: PUSH
55257: LD_INT 117
55259: PUSH
55260: LD_INT 118
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: ST_TO_ADDR
55275: GO 58350
55277: LD_INT 2
55279: DOUBLE
55280: EQUAL
55281: IFTRUE 55285
55283: GO 55369
55285: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
55286: LD_ADDR_VAR 0 2
55290: PUSH
55291: LD_INT 2
55293: PUSH
55294: LD_INT 4
55296: PUSH
55297: LD_INT 11
55299: PUSH
55300: LD_INT 12
55302: PUSH
55303: LD_INT 15
55305: PUSH
55306: LD_INT 16
55308: PUSH
55309: LD_INT 22
55311: PUSH
55312: LD_INT 23
55314: PUSH
55315: LD_INT 26
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 101
55331: PUSH
55332: LD_INT 102
55334: PUSH
55335: LD_INT 105
55337: PUSH
55338: LD_INT 106
55340: PUSH
55341: LD_INT 108
55343: PUSH
55344: LD_INT 116
55346: PUSH
55347: LD_INT 117
55349: PUSH
55350: LD_INT 118
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: ST_TO_ADDR
55367: GO 58350
55369: LD_INT 3
55371: DOUBLE
55372: EQUAL
55373: IFTRUE 55377
55375: GO 55465
55377: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
55378: LD_ADDR_VAR 0 2
55382: PUSH
55383: LD_INT 2
55385: PUSH
55386: LD_INT 4
55388: PUSH
55389: LD_INT 5
55391: PUSH
55392: LD_INT 11
55394: PUSH
55395: LD_INT 12
55397: PUSH
55398: LD_INT 15
55400: PUSH
55401: LD_INT 16
55403: PUSH
55404: LD_INT 22
55406: PUSH
55407: LD_INT 26
55409: PUSH
55410: LD_INT 36
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 101
55427: PUSH
55428: LD_INT 102
55430: PUSH
55431: LD_INT 105
55433: PUSH
55434: LD_INT 106
55436: PUSH
55437: LD_INT 108
55439: PUSH
55440: LD_INT 116
55442: PUSH
55443: LD_INT 117
55445: PUSH
55446: LD_INT 118
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: ST_TO_ADDR
55463: GO 58350
55465: LD_INT 4
55467: DOUBLE
55468: EQUAL
55469: IFTRUE 55473
55471: GO 55569
55473: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
55474: LD_ADDR_VAR 0 2
55478: PUSH
55479: LD_INT 2
55481: PUSH
55482: LD_INT 4
55484: PUSH
55485: LD_INT 5
55487: PUSH
55488: LD_INT 8
55490: PUSH
55491: LD_INT 11
55493: PUSH
55494: LD_INT 12
55496: PUSH
55497: LD_INT 15
55499: PUSH
55500: LD_INT 16
55502: PUSH
55503: LD_INT 22
55505: PUSH
55506: LD_INT 23
55508: PUSH
55509: LD_INT 26
55511: PUSH
55512: LD_INT 36
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 101
55531: PUSH
55532: LD_INT 102
55534: PUSH
55535: LD_INT 105
55537: PUSH
55538: LD_INT 106
55540: PUSH
55541: LD_INT 108
55543: PUSH
55544: LD_INT 116
55546: PUSH
55547: LD_INT 117
55549: PUSH
55550: LD_INT 118
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: ST_TO_ADDR
55567: GO 58350
55569: LD_INT 5
55571: DOUBLE
55572: EQUAL
55573: IFTRUE 55577
55575: GO 55689
55577: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
55578: LD_ADDR_VAR 0 2
55582: PUSH
55583: LD_INT 2
55585: PUSH
55586: LD_INT 4
55588: PUSH
55589: LD_INT 5
55591: PUSH
55592: LD_INT 6
55594: PUSH
55595: LD_INT 8
55597: PUSH
55598: LD_INT 11
55600: PUSH
55601: LD_INT 12
55603: PUSH
55604: LD_INT 15
55606: PUSH
55607: LD_INT 16
55609: PUSH
55610: LD_INT 22
55612: PUSH
55613: LD_INT 23
55615: PUSH
55616: LD_INT 25
55618: PUSH
55619: LD_INT 26
55621: PUSH
55622: LD_INT 36
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 101
55643: PUSH
55644: LD_INT 102
55646: PUSH
55647: LD_INT 105
55649: PUSH
55650: LD_INT 106
55652: PUSH
55653: LD_INT 108
55655: PUSH
55656: LD_INT 109
55658: PUSH
55659: LD_INT 112
55661: PUSH
55662: LD_INT 116
55664: PUSH
55665: LD_INT 117
55667: PUSH
55668: LD_INT 118
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: ST_TO_ADDR
55687: GO 58350
55689: LD_INT 6
55691: DOUBLE
55692: EQUAL
55693: IFTRUE 55697
55695: GO 55829
55697: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
55698: LD_ADDR_VAR 0 2
55702: PUSH
55703: LD_INT 2
55705: PUSH
55706: LD_INT 4
55708: PUSH
55709: LD_INT 5
55711: PUSH
55712: LD_INT 6
55714: PUSH
55715: LD_INT 8
55717: PUSH
55718: LD_INT 11
55720: PUSH
55721: LD_INT 12
55723: PUSH
55724: LD_INT 15
55726: PUSH
55727: LD_INT 16
55729: PUSH
55730: LD_INT 20
55732: PUSH
55733: LD_INT 21
55735: PUSH
55736: LD_INT 22
55738: PUSH
55739: LD_INT 23
55741: PUSH
55742: LD_INT 25
55744: PUSH
55745: LD_INT 26
55747: PUSH
55748: LD_INT 30
55750: PUSH
55751: LD_INT 31
55753: PUSH
55754: LD_INT 32
55756: PUSH
55757: LD_INT 36
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 101
55783: PUSH
55784: LD_INT 102
55786: PUSH
55787: LD_INT 105
55789: PUSH
55790: LD_INT 106
55792: PUSH
55793: LD_INT 108
55795: PUSH
55796: LD_INT 109
55798: PUSH
55799: LD_INT 112
55801: PUSH
55802: LD_INT 116
55804: PUSH
55805: LD_INT 117
55807: PUSH
55808: LD_INT 118
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: ST_TO_ADDR
55827: GO 58350
55829: LD_INT 7
55831: DOUBLE
55832: EQUAL
55833: IFTRUE 55837
55835: GO 55949
55837: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
55838: LD_ADDR_VAR 0 2
55842: PUSH
55843: LD_INT 2
55845: PUSH
55846: LD_INT 4
55848: PUSH
55849: LD_INT 5
55851: PUSH
55852: LD_INT 7
55854: PUSH
55855: LD_INT 11
55857: PUSH
55858: LD_INT 12
55860: PUSH
55861: LD_INT 15
55863: PUSH
55864: LD_INT 16
55866: PUSH
55867: LD_INT 20
55869: PUSH
55870: LD_INT 21
55872: PUSH
55873: LD_INT 22
55875: PUSH
55876: LD_INT 23
55878: PUSH
55879: LD_INT 25
55881: PUSH
55882: LD_INT 26
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 101
55903: PUSH
55904: LD_INT 102
55906: PUSH
55907: LD_INT 103
55909: PUSH
55910: LD_INT 105
55912: PUSH
55913: LD_INT 106
55915: PUSH
55916: LD_INT 108
55918: PUSH
55919: LD_INT 112
55921: PUSH
55922: LD_INT 116
55924: PUSH
55925: LD_INT 117
55927: PUSH
55928: LD_INT 118
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: ST_TO_ADDR
55947: GO 58350
55949: LD_INT 8
55951: DOUBLE
55952: EQUAL
55953: IFTRUE 55957
55955: GO 56097
55957: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
55958: LD_ADDR_VAR 0 2
55962: PUSH
55963: LD_INT 2
55965: PUSH
55966: LD_INT 4
55968: PUSH
55969: LD_INT 5
55971: PUSH
55972: LD_INT 6
55974: PUSH
55975: LD_INT 7
55977: PUSH
55978: LD_INT 8
55980: PUSH
55981: LD_INT 11
55983: PUSH
55984: LD_INT 12
55986: PUSH
55987: LD_INT 15
55989: PUSH
55990: LD_INT 16
55992: PUSH
55993: LD_INT 20
55995: PUSH
55996: LD_INT 21
55998: PUSH
55999: LD_INT 22
56001: PUSH
56002: LD_INT 23
56004: PUSH
56005: LD_INT 25
56007: PUSH
56008: LD_INT 26
56010: PUSH
56011: LD_INT 30
56013: PUSH
56014: LD_INT 31
56016: PUSH
56017: LD_INT 32
56019: PUSH
56020: LD_INT 36
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 101
56047: PUSH
56048: LD_INT 102
56050: PUSH
56051: LD_INT 103
56053: PUSH
56054: LD_INT 105
56056: PUSH
56057: LD_INT 106
56059: PUSH
56060: LD_INT 108
56062: PUSH
56063: LD_INT 109
56065: PUSH
56066: LD_INT 112
56068: PUSH
56069: LD_INT 116
56071: PUSH
56072: LD_INT 117
56074: PUSH
56075: LD_INT 118
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: ST_TO_ADDR
56095: GO 58350
56097: LD_INT 9
56099: DOUBLE
56100: EQUAL
56101: IFTRUE 56105
56103: GO 56253
56105: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
56106: LD_ADDR_VAR 0 2
56110: PUSH
56111: LD_INT 2
56113: PUSH
56114: LD_INT 4
56116: PUSH
56117: LD_INT 5
56119: PUSH
56120: LD_INT 6
56122: PUSH
56123: LD_INT 7
56125: PUSH
56126: LD_INT 8
56128: PUSH
56129: LD_INT 11
56131: PUSH
56132: LD_INT 12
56134: PUSH
56135: LD_INT 15
56137: PUSH
56138: LD_INT 16
56140: PUSH
56141: LD_INT 20
56143: PUSH
56144: LD_INT 21
56146: PUSH
56147: LD_INT 22
56149: PUSH
56150: LD_INT 23
56152: PUSH
56153: LD_INT 25
56155: PUSH
56156: LD_INT 26
56158: PUSH
56159: LD_INT 28
56161: PUSH
56162: LD_INT 30
56164: PUSH
56165: LD_INT 31
56167: PUSH
56168: LD_INT 32
56170: PUSH
56171: LD_INT 36
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 101
56199: PUSH
56200: LD_INT 102
56202: PUSH
56203: LD_INT 103
56205: PUSH
56206: LD_INT 105
56208: PUSH
56209: LD_INT 106
56211: PUSH
56212: LD_INT 108
56214: PUSH
56215: LD_INT 109
56217: PUSH
56218: LD_INT 112
56220: PUSH
56221: LD_INT 114
56223: PUSH
56224: LD_INT 116
56226: PUSH
56227: LD_INT 117
56229: PUSH
56230: LD_INT 118
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: ST_TO_ADDR
56251: GO 58350
56253: LD_INT 10
56255: DOUBLE
56256: EQUAL
56257: IFTRUE 56261
56259: GO 56457
56261: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
56262: LD_ADDR_VAR 0 2
56266: PUSH
56267: LD_INT 2
56269: PUSH
56270: LD_INT 4
56272: PUSH
56273: LD_INT 5
56275: PUSH
56276: LD_INT 6
56278: PUSH
56279: LD_INT 7
56281: PUSH
56282: LD_INT 8
56284: PUSH
56285: LD_INT 9
56287: PUSH
56288: LD_INT 10
56290: PUSH
56291: LD_INT 11
56293: PUSH
56294: LD_INT 12
56296: PUSH
56297: LD_INT 13
56299: PUSH
56300: LD_INT 14
56302: PUSH
56303: LD_INT 15
56305: PUSH
56306: LD_INT 16
56308: PUSH
56309: LD_INT 17
56311: PUSH
56312: LD_INT 18
56314: PUSH
56315: LD_INT 19
56317: PUSH
56318: LD_INT 20
56320: PUSH
56321: LD_INT 21
56323: PUSH
56324: LD_INT 22
56326: PUSH
56327: LD_INT 23
56329: PUSH
56330: LD_INT 24
56332: PUSH
56333: LD_INT 25
56335: PUSH
56336: LD_INT 26
56338: PUSH
56339: LD_INT 28
56341: PUSH
56342: LD_INT 30
56344: PUSH
56345: LD_INT 31
56347: PUSH
56348: LD_INT 32
56350: PUSH
56351: LD_INT 36
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 101
56387: PUSH
56388: LD_INT 102
56390: PUSH
56391: LD_INT 103
56393: PUSH
56394: LD_INT 104
56396: PUSH
56397: LD_INT 105
56399: PUSH
56400: LD_INT 106
56402: PUSH
56403: LD_INT 107
56405: PUSH
56406: LD_INT 108
56408: PUSH
56409: LD_INT 109
56411: PUSH
56412: LD_INT 110
56414: PUSH
56415: LD_INT 111
56417: PUSH
56418: LD_INT 112
56420: PUSH
56421: LD_INT 114
56423: PUSH
56424: LD_INT 116
56426: PUSH
56427: LD_INT 117
56429: PUSH
56430: LD_INT 118
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: ST_TO_ADDR
56455: GO 58350
56457: LD_INT 11
56459: DOUBLE
56460: EQUAL
56461: IFTRUE 56465
56463: GO 56669
56465: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
56466: LD_ADDR_VAR 0 2
56470: PUSH
56471: LD_INT 2
56473: PUSH
56474: LD_INT 3
56476: PUSH
56477: LD_INT 4
56479: PUSH
56480: LD_INT 5
56482: PUSH
56483: LD_INT 6
56485: PUSH
56486: LD_INT 7
56488: PUSH
56489: LD_INT 8
56491: PUSH
56492: LD_INT 9
56494: PUSH
56495: LD_INT 10
56497: PUSH
56498: LD_INT 11
56500: PUSH
56501: LD_INT 12
56503: PUSH
56504: LD_INT 13
56506: PUSH
56507: LD_INT 14
56509: PUSH
56510: LD_INT 15
56512: PUSH
56513: LD_INT 16
56515: PUSH
56516: LD_INT 17
56518: PUSH
56519: LD_INT 18
56521: PUSH
56522: LD_INT 19
56524: PUSH
56525: LD_INT 20
56527: PUSH
56528: LD_INT 21
56530: PUSH
56531: LD_INT 22
56533: PUSH
56534: LD_INT 23
56536: PUSH
56537: LD_INT 24
56539: PUSH
56540: LD_INT 25
56542: PUSH
56543: LD_INT 26
56545: PUSH
56546: LD_INT 28
56548: PUSH
56549: LD_INT 30
56551: PUSH
56552: LD_INT 31
56554: PUSH
56555: LD_INT 32
56557: PUSH
56558: LD_INT 34
56560: PUSH
56561: LD_INT 36
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 101
56599: PUSH
56600: LD_INT 102
56602: PUSH
56603: LD_INT 103
56605: PUSH
56606: LD_INT 104
56608: PUSH
56609: LD_INT 105
56611: PUSH
56612: LD_INT 106
56614: PUSH
56615: LD_INT 107
56617: PUSH
56618: LD_INT 108
56620: PUSH
56621: LD_INT 109
56623: PUSH
56624: LD_INT 110
56626: PUSH
56627: LD_INT 111
56629: PUSH
56630: LD_INT 112
56632: PUSH
56633: LD_INT 114
56635: PUSH
56636: LD_INT 116
56638: PUSH
56639: LD_INT 117
56641: PUSH
56642: LD_INT 118
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: ST_TO_ADDR
56667: GO 58350
56669: LD_INT 12
56671: DOUBLE
56672: EQUAL
56673: IFTRUE 56677
56675: GO 56897
56677: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
56678: LD_ADDR_VAR 0 2
56682: PUSH
56683: LD_INT 1
56685: PUSH
56686: LD_INT 2
56688: PUSH
56689: LD_INT 3
56691: PUSH
56692: LD_INT 4
56694: PUSH
56695: LD_INT 5
56697: PUSH
56698: LD_INT 6
56700: PUSH
56701: LD_INT 7
56703: PUSH
56704: LD_INT 8
56706: PUSH
56707: LD_INT 9
56709: PUSH
56710: LD_INT 10
56712: PUSH
56713: LD_INT 11
56715: PUSH
56716: LD_INT 12
56718: PUSH
56719: LD_INT 13
56721: PUSH
56722: LD_INT 14
56724: PUSH
56725: LD_INT 15
56727: PUSH
56728: LD_INT 16
56730: PUSH
56731: LD_INT 17
56733: PUSH
56734: LD_INT 18
56736: PUSH
56737: LD_INT 19
56739: PUSH
56740: LD_INT 20
56742: PUSH
56743: LD_INT 21
56745: PUSH
56746: LD_INT 22
56748: PUSH
56749: LD_INT 23
56751: PUSH
56752: LD_INT 24
56754: PUSH
56755: LD_INT 25
56757: PUSH
56758: LD_INT 26
56760: PUSH
56761: LD_INT 27
56763: PUSH
56764: LD_INT 28
56766: PUSH
56767: LD_INT 30
56769: PUSH
56770: LD_INT 31
56772: PUSH
56773: LD_INT 32
56775: PUSH
56776: LD_INT 33
56778: PUSH
56779: LD_INT 34
56781: PUSH
56782: LD_INT 36
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 101
56823: PUSH
56824: LD_INT 102
56826: PUSH
56827: LD_INT 103
56829: PUSH
56830: LD_INT 104
56832: PUSH
56833: LD_INT 105
56835: PUSH
56836: LD_INT 106
56838: PUSH
56839: LD_INT 107
56841: PUSH
56842: LD_INT 108
56844: PUSH
56845: LD_INT 109
56847: PUSH
56848: LD_INT 110
56850: PUSH
56851: LD_INT 111
56853: PUSH
56854: LD_INT 112
56856: PUSH
56857: LD_INT 113
56859: PUSH
56860: LD_INT 114
56862: PUSH
56863: LD_INT 116
56865: PUSH
56866: LD_INT 117
56868: PUSH
56869: LD_INT 118
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: ST_TO_ADDR
56895: GO 58350
56897: LD_INT 13
56899: DOUBLE
56900: EQUAL
56901: IFTRUE 56905
56903: GO 57113
56905: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
56906: LD_ADDR_VAR 0 2
56910: PUSH
56911: LD_INT 1
56913: PUSH
56914: LD_INT 2
56916: PUSH
56917: LD_INT 3
56919: PUSH
56920: LD_INT 4
56922: PUSH
56923: LD_INT 5
56925: PUSH
56926: LD_INT 8
56928: PUSH
56929: LD_INT 9
56931: PUSH
56932: LD_INT 10
56934: PUSH
56935: LD_INT 11
56937: PUSH
56938: LD_INT 12
56940: PUSH
56941: LD_INT 14
56943: PUSH
56944: LD_INT 15
56946: PUSH
56947: LD_INT 16
56949: PUSH
56950: LD_INT 17
56952: PUSH
56953: LD_INT 18
56955: PUSH
56956: LD_INT 19
56958: PUSH
56959: LD_INT 20
56961: PUSH
56962: LD_INT 21
56964: PUSH
56965: LD_INT 22
56967: PUSH
56968: LD_INT 23
56970: PUSH
56971: LD_INT 24
56973: PUSH
56974: LD_INT 25
56976: PUSH
56977: LD_INT 26
56979: PUSH
56980: LD_INT 27
56982: PUSH
56983: LD_INT 28
56985: PUSH
56986: LD_INT 30
56988: PUSH
56989: LD_INT 31
56991: PUSH
56992: LD_INT 32
56994: PUSH
56995: LD_INT 33
56997: PUSH
56998: LD_INT 34
57000: PUSH
57001: LD_INT 36
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 101
57039: PUSH
57040: LD_INT 102
57042: PUSH
57043: LD_INT 103
57045: PUSH
57046: LD_INT 104
57048: PUSH
57049: LD_INT 105
57051: PUSH
57052: LD_INT 106
57054: PUSH
57055: LD_INT 107
57057: PUSH
57058: LD_INT 108
57060: PUSH
57061: LD_INT 109
57063: PUSH
57064: LD_INT 110
57066: PUSH
57067: LD_INT 111
57069: PUSH
57070: LD_INT 112
57072: PUSH
57073: LD_INT 113
57075: PUSH
57076: LD_INT 114
57078: PUSH
57079: LD_INT 116
57081: PUSH
57082: LD_INT 117
57084: PUSH
57085: LD_INT 118
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: ST_TO_ADDR
57111: GO 58350
57113: LD_INT 14
57115: DOUBLE
57116: EQUAL
57117: IFTRUE 57121
57119: GO 57345
57121: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
57122: LD_ADDR_VAR 0 2
57126: PUSH
57127: LD_INT 1
57129: PUSH
57130: LD_INT 2
57132: PUSH
57133: LD_INT 3
57135: PUSH
57136: LD_INT 4
57138: PUSH
57139: LD_INT 5
57141: PUSH
57142: LD_INT 6
57144: PUSH
57145: LD_INT 7
57147: PUSH
57148: LD_INT 8
57150: PUSH
57151: LD_INT 9
57153: PUSH
57154: LD_INT 10
57156: PUSH
57157: LD_INT 11
57159: PUSH
57160: LD_INT 12
57162: PUSH
57163: LD_INT 13
57165: PUSH
57166: LD_INT 14
57168: PUSH
57169: LD_INT 15
57171: PUSH
57172: LD_INT 16
57174: PUSH
57175: LD_INT 17
57177: PUSH
57178: LD_INT 18
57180: PUSH
57181: LD_INT 19
57183: PUSH
57184: LD_INT 20
57186: PUSH
57187: LD_INT 21
57189: PUSH
57190: LD_INT 22
57192: PUSH
57193: LD_INT 23
57195: PUSH
57196: LD_INT 24
57198: PUSH
57199: LD_INT 25
57201: PUSH
57202: LD_INT 26
57204: PUSH
57205: LD_INT 27
57207: PUSH
57208: LD_INT 28
57210: PUSH
57211: LD_INT 29
57213: PUSH
57214: LD_INT 30
57216: PUSH
57217: LD_INT 31
57219: PUSH
57220: LD_INT 32
57222: PUSH
57223: LD_INT 33
57225: PUSH
57226: LD_INT 34
57228: PUSH
57229: LD_INT 36
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 101
57271: PUSH
57272: LD_INT 102
57274: PUSH
57275: LD_INT 103
57277: PUSH
57278: LD_INT 104
57280: PUSH
57281: LD_INT 105
57283: PUSH
57284: LD_INT 106
57286: PUSH
57287: LD_INT 107
57289: PUSH
57290: LD_INT 108
57292: PUSH
57293: LD_INT 109
57295: PUSH
57296: LD_INT 110
57298: PUSH
57299: LD_INT 111
57301: PUSH
57302: LD_INT 112
57304: PUSH
57305: LD_INT 113
57307: PUSH
57308: LD_INT 114
57310: PUSH
57311: LD_INT 116
57313: PUSH
57314: LD_INT 117
57316: PUSH
57317: LD_INT 118
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: ST_TO_ADDR
57343: GO 58350
57345: LD_INT 15
57347: DOUBLE
57348: EQUAL
57349: IFTRUE 57353
57351: GO 57577
57353: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
57354: LD_ADDR_VAR 0 2
57358: PUSH
57359: LD_INT 1
57361: PUSH
57362: LD_INT 2
57364: PUSH
57365: LD_INT 3
57367: PUSH
57368: LD_INT 4
57370: PUSH
57371: LD_INT 5
57373: PUSH
57374: LD_INT 6
57376: PUSH
57377: LD_INT 7
57379: PUSH
57380: LD_INT 8
57382: PUSH
57383: LD_INT 9
57385: PUSH
57386: LD_INT 10
57388: PUSH
57389: LD_INT 11
57391: PUSH
57392: LD_INT 12
57394: PUSH
57395: LD_INT 13
57397: PUSH
57398: LD_INT 14
57400: PUSH
57401: LD_INT 15
57403: PUSH
57404: LD_INT 16
57406: PUSH
57407: LD_INT 17
57409: PUSH
57410: LD_INT 18
57412: PUSH
57413: LD_INT 19
57415: PUSH
57416: LD_INT 20
57418: PUSH
57419: LD_INT 21
57421: PUSH
57422: LD_INT 22
57424: PUSH
57425: LD_INT 23
57427: PUSH
57428: LD_INT 24
57430: PUSH
57431: LD_INT 25
57433: PUSH
57434: LD_INT 26
57436: PUSH
57437: LD_INT 27
57439: PUSH
57440: LD_INT 28
57442: PUSH
57443: LD_INT 29
57445: PUSH
57446: LD_INT 30
57448: PUSH
57449: LD_INT 31
57451: PUSH
57452: LD_INT 32
57454: PUSH
57455: LD_INT 33
57457: PUSH
57458: LD_INT 34
57460: PUSH
57461: LD_INT 36
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 101
57503: PUSH
57504: LD_INT 102
57506: PUSH
57507: LD_INT 103
57509: PUSH
57510: LD_INT 104
57512: PUSH
57513: LD_INT 105
57515: PUSH
57516: LD_INT 106
57518: PUSH
57519: LD_INT 107
57521: PUSH
57522: LD_INT 108
57524: PUSH
57525: LD_INT 109
57527: PUSH
57528: LD_INT 110
57530: PUSH
57531: LD_INT 111
57533: PUSH
57534: LD_INT 112
57536: PUSH
57537: LD_INT 113
57539: PUSH
57540: LD_INT 114
57542: PUSH
57543: LD_INT 116
57545: PUSH
57546: LD_INT 117
57548: PUSH
57549: LD_INT 118
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: ST_TO_ADDR
57575: GO 58350
57577: LD_INT 16
57579: DOUBLE
57580: EQUAL
57581: IFTRUE 57585
57583: GO 57721
57585: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
57586: LD_ADDR_VAR 0 2
57590: PUSH
57591: LD_INT 2
57593: PUSH
57594: LD_INT 4
57596: PUSH
57597: LD_INT 5
57599: PUSH
57600: LD_INT 7
57602: PUSH
57603: LD_INT 11
57605: PUSH
57606: LD_INT 12
57608: PUSH
57609: LD_INT 15
57611: PUSH
57612: LD_INT 16
57614: PUSH
57615: LD_INT 20
57617: PUSH
57618: LD_INT 21
57620: PUSH
57621: LD_INT 22
57623: PUSH
57624: LD_INT 23
57626: PUSH
57627: LD_INT 25
57629: PUSH
57630: LD_INT 26
57632: PUSH
57633: LD_INT 30
57635: PUSH
57636: LD_INT 31
57638: PUSH
57639: LD_INT 32
57641: PUSH
57642: LD_INT 33
57644: PUSH
57645: LD_INT 34
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 101
57671: PUSH
57672: LD_INT 102
57674: PUSH
57675: LD_INT 103
57677: PUSH
57678: LD_INT 106
57680: PUSH
57681: LD_INT 108
57683: PUSH
57684: LD_INT 112
57686: PUSH
57687: LD_INT 113
57689: PUSH
57690: LD_INT 114
57692: PUSH
57693: LD_INT 116
57695: PUSH
57696: LD_INT 117
57698: PUSH
57699: LD_INT 118
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: ST_TO_ADDR
57719: GO 58350
57721: LD_INT 17
57723: DOUBLE
57724: EQUAL
57725: IFTRUE 57729
57727: GO 57953
57729: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
57730: LD_ADDR_VAR 0 2
57734: PUSH
57735: LD_INT 1
57737: PUSH
57738: LD_INT 2
57740: PUSH
57741: LD_INT 3
57743: PUSH
57744: LD_INT 4
57746: PUSH
57747: LD_INT 5
57749: PUSH
57750: LD_INT 6
57752: PUSH
57753: LD_INT 7
57755: PUSH
57756: LD_INT 8
57758: PUSH
57759: LD_INT 9
57761: PUSH
57762: LD_INT 10
57764: PUSH
57765: LD_INT 11
57767: PUSH
57768: LD_INT 12
57770: PUSH
57771: LD_INT 13
57773: PUSH
57774: LD_INT 14
57776: PUSH
57777: LD_INT 15
57779: PUSH
57780: LD_INT 16
57782: PUSH
57783: LD_INT 17
57785: PUSH
57786: LD_INT 18
57788: PUSH
57789: LD_INT 19
57791: PUSH
57792: LD_INT 20
57794: PUSH
57795: LD_INT 21
57797: PUSH
57798: LD_INT 22
57800: PUSH
57801: LD_INT 23
57803: PUSH
57804: LD_INT 24
57806: PUSH
57807: LD_INT 25
57809: PUSH
57810: LD_INT 26
57812: PUSH
57813: LD_INT 27
57815: PUSH
57816: LD_INT 28
57818: PUSH
57819: LD_INT 29
57821: PUSH
57822: LD_INT 30
57824: PUSH
57825: LD_INT 31
57827: PUSH
57828: LD_INT 32
57830: PUSH
57831: LD_INT 33
57833: PUSH
57834: LD_INT 34
57836: PUSH
57837: LD_INT 36
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 101
57879: PUSH
57880: LD_INT 102
57882: PUSH
57883: LD_INT 103
57885: PUSH
57886: LD_INT 104
57888: PUSH
57889: LD_INT 105
57891: PUSH
57892: LD_INT 106
57894: PUSH
57895: LD_INT 107
57897: PUSH
57898: LD_INT 108
57900: PUSH
57901: LD_INT 109
57903: PUSH
57904: LD_INT 110
57906: PUSH
57907: LD_INT 111
57909: PUSH
57910: LD_INT 112
57912: PUSH
57913: LD_INT 113
57915: PUSH
57916: LD_INT 114
57918: PUSH
57919: LD_INT 116
57921: PUSH
57922: LD_INT 117
57924: PUSH
57925: LD_INT 118
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: ST_TO_ADDR
57951: GO 58350
57953: LD_INT 18
57955: DOUBLE
57956: EQUAL
57957: IFTRUE 57961
57959: GO 58109
57961: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
57962: LD_ADDR_VAR 0 2
57966: PUSH
57967: LD_INT 2
57969: PUSH
57970: LD_INT 4
57972: PUSH
57973: LD_INT 5
57975: PUSH
57976: LD_INT 7
57978: PUSH
57979: LD_INT 11
57981: PUSH
57982: LD_INT 12
57984: PUSH
57985: LD_INT 15
57987: PUSH
57988: LD_INT 16
57990: PUSH
57991: LD_INT 20
57993: PUSH
57994: LD_INT 21
57996: PUSH
57997: LD_INT 22
57999: PUSH
58000: LD_INT 23
58002: PUSH
58003: LD_INT 25
58005: PUSH
58006: LD_INT 26
58008: PUSH
58009: LD_INT 30
58011: PUSH
58012: LD_INT 31
58014: PUSH
58015: LD_INT 32
58017: PUSH
58018: LD_INT 33
58020: PUSH
58021: LD_INT 34
58023: PUSH
58024: LD_INT 35
58026: PUSH
58027: LD_INT 36
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 101
58055: PUSH
58056: LD_INT 102
58058: PUSH
58059: LD_INT 103
58061: PUSH
58062: LD_INT 106
58064: PUSH
58065: LD_INT 108
58067: PUSH
58068: LD_INT 112
58070: PUSH
58071: LD_INT 113
58073: PUSH
58074: LD_INT 114
58076: PUSH
58077: LD_INT 115
58079: PUSH
58080: LD_INT 116
58082: PUSH
58083: LD_INT 117
58085: PUSH
58086: LD_INT 118
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: ST_TO_ADDR
58107: GO 58350
58109: LD_INT 19
58111: DOUBLE
58112: EQUAL
58113: IFTRUE 58117
58115: GO 58349
58117: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
58118: LD_ADDR_VAR 0 2
58122: PUSH
58123: LD_INT 1
58125: PUSH
58126: LD_INT 2
58128: PUSH
58129: LD_INT 3
58131: PUSH
58132: LD_INT 4
58134: PUSH
58135: LD_INT 5
58137: PUSH
58138: LD_INT 6
58140: PUSH
58141: LD_INT 7
58143: PUSH
58144: LD_INT 8
58146: PUSH
58147: LD_INT 9
58149: PUSH
58150: LD_INT 10
58152: PUSH
58153: LD_INT 11
58155: PUSH
58156: LD_INT 12
58158: PUSH
58159: LD_INT 13
58161: PUSH
58162: LD_INT 14
58164: PUSH
58165: LD_INT 15
58167: PUSH
58168: LD_INT 16
58170: PUSH
58171: LD_INT 17
58173: PUSH
58174: LD_INT 18
58176: PUSH
58177: LD_INT 19
58179: PUSH
58180: LD_INT 20
58182: PUSH
58183: LD_INT 21
58185: PUSH
58186: LD_INT 22
58188: PUSH
58189: LD_INT 23
58191: PUSH
58192: LD_INT 24
58194: PUSH
58195: LD_INT 25
58197: PUSH
58198: LD_INT 26
58200: PUSH
58201: LD_INT 27
58203: PUSH
58204: LD_INT 28
58206: PUSH
58207: LD_INT 29
58209: PUSH
58210: LD_INT 30
58212: PUSH
58213: LD_INT 31
58215: PUSH
58216: LD_INT 32
58218: PUSH
58219: LD_INT 33
58221: PUSH
58222: LD_INT 34
58224: PUSH
58225: LD_INT 35
58227: PUSH
58228: LD_INT 36
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: LIST
58256: LIST
58257: LIST
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 101
58271: PUSH
58272: LD_INT 102
58274: PUSH
58275: LD_INT 103
58277: PUSH
58278: LD_INT 104
58280: PUSH
58281: LD_INT 105
58283: PUSH
58284: LD_INT 106
58286: PUSH
58287: LD_INT 107
58289: PUSH
58290: LD_INT 108
58292: PUSH
58293: LD_INT 109
58295: PUSH
58296: LD_INT 110
58298: PUSH
58299: LD_INT 111
58301: PUSH
58302: LD_INT 112
58304: PUSH
58305: LD_INT 113
58307: PUSH
58308: LD_INT 114
58310: PUSH
58311: LD_INT 115
58313: PUSH
58314: LD_INT 116
58316: PUSH
58317: LD_INT 117
58319: PUSH
58320: LD_INT 118
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: ST_TO_ADDR
58347: GO 58350
58349: POP
// end else
58350: GO 58581
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
58352: LD_ADDR_VAR 0 2
58356: PUSH
58357: LD_INT 1
58359: PUSH
58360: LD_INT 2
58362: PUSH
58363: LD_INT 3
58365: PUSH
58366: LD_INT 4
58368: PUSH
58369: LD_INT 5
58371: PUSH
58372: LD_INT 6
58374: PUSH
58375: LD_INT 7
58377: PUSH
58378: LD_INT 8
58380: PUSH
58381: LD_INT 9
58383: PUSH
58384: LD_INT 10
58386: PUSH
58387: LD_INT 11
58389: PUSH
58390: LD_INT 12
58392: PUSH
58393: LD_INT 13
58395: PUSH
58396: LD_INT 14
58398: PUSH
58399: LD_INT 15
58401: PUSH
58402: LD_INT 16
58404: PUSH
58405: LD_INT 17
58407: PUSH
58408: LD_INT 18
58410: PUSH
58411: LD_INT 19
58413: PUSH
58414: LD_INT 20
58416: PUSH
58417: LD_INT 21
58419: PUSH
58420: LD_INT 22
58422: PUSH
58423: LD_INT 23
58425: PUSH
58426: LD_INT 24
58428: PUSH
58429: LD_INT 25
58431: PUSH
58432: LD_INT 26
58434: PUSH
58435: LD_INT 27
58437: PUSH
58438: LD_INT 28
58440: PUSH
58441: LD_INT 29
58443: PUSH
58444: LD_INT 30
58446: PUSH
58447: LD_INT 31
58449: PUSH
58450: LD_INT 32
58452: PUSH
58453: LD_INT 33
58455: PUSH
58456: LD_INT 34
58458: PUSH
58459: LD_INT 35
58461: PUSH
58462: LD_INT 36
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 101
58505: PUSH
58506: LD_INT 102
58508: PUSH
58509: LD_INT 103
58511: PUSH
58512: LD_INT 104
58514: PUSH
58515: LD_INT 105
58517: PUSH
58518: LD_INT 106
58520: PUSH
58521: LD_INT 107
58523: PUSH
58524: LD_INT 108
58526: PUSH
58527: LD_INT 109
58529: PUSH
58530: LD_INT 110
58532: PUSH
58533: LD_INT 111
58535: PUSH
58536: LD_INT 112
58538: PUSH
58539: LD_INT 113
58541: PUSH
58542: LD_INT 114
58544: PUSH
58545: LD_INT 115
58547: PUSH
58548: LD_INT 116
58550: PUSH
58551: LD_INT 117
58553: PUSH
58554: LD_INT 118
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: ST_TO_ADDR
// if result then
58581: LD_VAR 0 2
58585: IFFALSE 59371
// begin normal :=  ;
58587: LD_ADDR_VAR 0 5
58591: PUSH
58592: LD_STRING 
58594: ST_TO_ADDR
// hardcore :=  ;
58595: LD_ADDR_VAR 0 6
58599: PUSH
58600: LD_STRING 
58602: ST_TO_ADDR
// active :=  ;
58603: LD_ADDR_VAR 0 7
58607: PUSH
58608: LD_STRING 
58610: ST_TO_ADDR
// for i = 1 to normalCounter do
58611: LD_ADDR_VAR 0 8
58615: PUSH
58616: DOUBLE
58617: LD_INT 1
58619: DEC
58620: ST_TO_ADDR
58621: LD_EXP 45
58625: PUSH
58626: FOR_TO
58627: IFFALSE 58728
// begin tmp := 0 ;
58629: LD_ADDR_VAR 0 3
58633: PUSH
58634: LD_STRING 0
58636: ST_TO_ADDR
// if result [ 1 ] then
58637: LD_VAR 0 2
58641: PUSH
58642: LD_INT 1
58644: ARRAY
58645: IFFALSE 58710
// if result [ 1 ] [ 1 ] = i then
58647: LD_VAR 0 2
58651: PUSH
58652: LD_INT 1
58654: ARRAY
58655: PUSH
58656: LD_INT 1
58658: ARRAY
58659: PUSH
58660: LD_VAR 0 8
58664: EQUAL
58665: IFFALSE 58710
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
58667: LD_ADDR_VAR 0 2
58671: PUSH
58672: LD_VAR 0 2
58676: PPUSH
58677: LD_INT 1
58679: PPUSH
58680: LD_VAR 0 2
58684: PUSH
58685: LD_INT 1
58687: ARRAY
58688: PPUSH
58689: LD_INT 1
58691: PPUSH
58692: CALL_OW 3
58696: PPUSH
58697: CALL_OW 1
58701: ST_TO_ADDR
// tmp := 1 ;
58702: LD_ADDR_VAR 0 3
58706: PUSH
58707: LD_STRING 1
58709: ST_TO_ADDR
// end ; normal := normal & tmp ;
58710: LD_ADDR_VAR 0 5
58714: PUSH
58715: LD_VAR 0 5
58719: PUSH
58720: LD_VAR 0 3
58724: STR
58725: ST_TO_ADDR
// end ;
58726: GO 58626
58728: POP
58729: POP
// for i = 1 to hardcoreCounter do
58730: LD_ADDR_VAR 0 8
58734: PUSH
58735: DOUBLE
58736: LD_INT 1
58738: DEC
58739: ST_TO_ADDR
58740: LD_EXP 46
58744: PUSH
58745: FOR_TO
58746: IFFALSE 58851
// begin tmp := 0 ;
58748: LD_ADDR_VAR 0 3
58752: PUSH
58753: LD_STRING 0
58755: ST_TO_ADDR
// if result [ 2 ] then
58756: LD_VAR 0 2
58760: PUSH
58761: LD_INT 2
58763: ARRAY
58764: IFFALSE 58833
// if result [ 2 ] [ 1 ] = 100 + i then
58766: LD_VAR 0 2
58770: PUSH
58771: LD_INT 2
58773: ARRAY
58774: PUSH
58775: LD_INT 1
58777: ARRAY
58778: PUSH
58779: LD_INT 100
58781: PUSH
58782: LD_VAR 0 8
58786: PLUS
58787: EQUAL
58788: IFFALSE 58833
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
58790: LD_ADDR_VAR 0 2
58794: PUSH
58795: LD_VAR 0 2
58799: PPUSH
58800: LD_INT 2
58802: PPUSH
58803: LD_VAR 0 2
58807: PUSH
58808: LD_INT 2
58810: ARRAY
58811: PPUSH
58812: LD_INT 1
58814: PPUSH
58815: CALL_OW 3
58819: PPUSH
58820: CALL_OW 1
58824: ST_TO_ADDR
// tmp := 1 ;
58825: LD_ADDR_VAR 0 3
58829: PUSH
58830: LD_STRING 1
58832: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
58833: LD_ADDR_VAR 0 6
58837: PUSH
58838: LD_VAR 0 6
58842: PUSH
58843: LD_VAR 0 3
58847: STR
58848: ST_TO_ADDR
// end ;
58849: GO 58745
58851: POP
58852: POP
// if isGameLoad then
58853: LD_VAR 0 1
58857: IFFALSE 59332
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
58859: LD_ADDR_VAR 0 4
58863: PUSH
58864: LD_EXP 49
58868: PUSH
58869: LD_EXP 48
58873: PUSH
58874: LD_EXP 50
58878: PUSH
58879: LD_EXP 47
58883: PUSH
58884: LD_EXP 51
58888: PUSH
58889: LD_EXP 52
58893: PUSH
58894: LD_EXP 53
58898: PUSH
58899: LD_EXP 54
58903: PUSH
58904: LD_EXP 55
58908: PUSH
58909: LD_EXP 56
58913: PUSH
58914: LD_EXP 57
58918: PUSH
58919: LD_EXP 58
58923: PUSH
58924: LD_EXP 59
58928: PUSH
58929: LD_EXP 60
58933: PUSH
58934: LD_EXP 68
58938: PUSH
58939: LD_EXP 69
58943: PUSH
58944: LD_EXP 70
58948: PUSH
58949: LD_EXP 71
58953: PUSH
58954: LD_EXP 73
58958: PUSH
58959: LD_EXP 74
58963: PUSH
58964: LD_EXP 75
58968: PUSH
58969: LD_EXP 78
58973: PUSH
58974: LD_EXP 80
58978: PUSH
58979: LD_EXP 81
58983: PUSH
58984: LD_EXP 82
58988: PUSH
58989: LD_EXP 84
58993: PUSH
58994: LD_EXP 85
58998: PUSH
58999: LD_EXP 88
59003: PUSH
59004: LD_EXP 89
59008: PUSH
59009: LD_EXP 90
59013: PUSH
59014: LD_EXP 91
59018: PUSH
59019: LD_EXP 92
59023: PUSH
59024: LD_EXP 93
59028: PUSH
59029: LD_EXP 94
59033: PUSH
59034: LD_EXP 95
59038: PUSH
59039: LD_EXP 96
59043: PUSH
59044: LD_EXP 61
59048: PUSH
59049: LD_EXP 62
59053: PUSH
59054: LD_EXP 65
59058: PUSH
59059: LD_EXP 66
59063: PUSH
59064: LD_EXP 67
59068: PUSH
59069: LD_EXP 63
59073: PUSH
59074: LD_EXP 64
59078: PUSH
59079: LD_EXP 72
59083: PUSH
59084: LD_EXP 76
59088: PUSH
59089: LD_EXP 77
59093: PUSH
59094: LD_EXP 79
59098: PUSH
59099: LD_EXP 83
59103: PUSH
59104: LD_EXP 86
59108: PUSH
59109: LD_EXP 87
59113: PUSH
59114: LD_EXP 97
59118: PUSH
59119: LD_EXP 98
59123: PUSH
59124: LD_EXP 99
59128: PUSH
59129: LD_EXP 100
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: ST_TO_ADDR
// tmp :=  ;
59190: LD_ADDR_VAR 0 3
59194: PUSH
59195: LD_STRING 
59197: ST_TO_ADDR
// for i = 1 to normalCounter do
59198: LD_ADDR_VAR 0 8
59202: PUSH
59203: DOUBLE
59204: LD_INT 1
59206: DEC
59207: ST_TO_ADDR
59208: LD_EXP 45
59212: PUSH
59213: FOR_TO
59214: IFFALSE 59250
// begin if flags [ i ] then
59216: LD_VAR 0 4
59220: PUSH
59221: LD_VAR 0 8
59225: ARRAY
59226: IFFALSE 59248
// tmp := tmp & i & ; ;
59228: LD_ADDR_VAR 0 3
59232: PUSH
59233: LD_VAR 0 3
59237: PUSH
59238: LD_VAR 0 8
59242: STR
59243: PUSH
59244: LD_STRING ;
59246: STR
59247: ST_TO_ADDR
// end ;
59248: GO 59213
59250: POP
59251: POP
// for i = 1 to hardcoreCounter do
59252: LD_ADDR_VAR 0 8
59256: PUSH
59257: DOUBLE
59258: LD_INT 1
59260: DEC
59261: ST_TO_ADDR
59262: LD_EXP 46
59266: PUSH
59267: FOR_TO
59268: IFFALSE 59314
// begin if flags [ normalCounter + i ] then
59270: LD_VAR 0 4
59274: PUSH
59275: LD_EXP 45
59279: PUSH
59280: LD_VAR 0 8
59284: PLUS
59285: ARRAY
59286: IFFALSE 59312
// tmp := tmp & ( 100 + i ) & ; ;
59288: LD_ADDR_VAR 0 3
59292: PUSH
59293: LD_VAR 0 3
59297: PUSH
59298: LD_INT 100
59300: PUSH
59301: LD_VAR 0 8
59305: PLUS
59306: STR
59307: PUSH
59308: LD_STRING ;
59310: STR
59311: ST_TO_ADDR
// end ;
59312: GO 59267
59314: POP
59315: POP
// if tmp then
59316: LD_VAR 0 3
59320: IFFALSE 59332
// active := tmp ;
59322: LD_ADDR_VAR 0 7
59326: PUSH
59327: LD_VAR 0 3
59331: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
59332: LD_STRING getStreamItemsFromMission("
59334: PUSH
59335: LD_VAR 0 5
59339: STR
59340: PUSH
59341: LD_STRING ","
59343: STR
59344: PUSH
59345: LD_VAR 0 6
59349: STR
59350: PUSH
59351: LD_STRING ","
59353: STR
59354: PUSH
59355: LD_VAR 0 7
59359: STR
59360: PUSH
59361: LD_STRING ")
59363: STR
59364: PPUSH
59365: CALL_OW 559
// end else
59369: GO 59378
// ToLua ( getStreamItemsFromMission("","","") ) ;
59371: LD_STRING getStreamItemsFromMission("","","")
59373: PPUSH
59374: CALL_OW 559
// end ;
59378: LD_VAR 0 2
59382: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
59383: LD_EXP 44
59387: PUSH
59388: LD_EXP 49
59392: AND
59393: IFFALSE 59517
59395: GO 59397
59397: DISABLE
59398: LD_INT 0
59400: PPUSH
59401: PPUSH
// begin enable ;
59402: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
59403: LD_ADDR_VAR 0 2
59407: PUSH
59408: LD_INT 22
59410: PUSH
59411: LD_OWVAR 2
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 2
59422: PUSH
59423: LD_INT 34
59425: PUSH
59426: LD_INT 7
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 34
59435: PUSH
59436: LD_INT 45
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 34
59445: PUSH
59446: LD_INT 28
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 34
59455: PUSH
59456: LD_INT 47
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PPUSH
59474: CALL_OW 69
59478: ST_TO_ADDR
// if not tmp then
59479: LD_VAR 0 2
59483: NOT
59484: IFFALSE 59488
// exit ;
59486: GO 59517
// for i in tmp do
59488: LD_ADDR_VAR 0 1
59492: PUSH
59493: LD_VAR 0 2
59497: PUSH
59498: FOR_IN
59499: IFFALSE 59515
// begin SetLives ( i , 0 ) ;
59501: LD_VAR 0 1
59505: PPUSH
59506: LD_INT 0
59508: PPUSH
59509: CALL_OW 234
// end ;
59513: GO 59498
59515: POP
59516: POP
// end ;
59517: PPOPN 2
59519: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
59520: LD_EXP 44
59524: PUSH
59525: LD_EXP 50
59529: AND
59530: IFFALSE 59614
59532: GO 59534
59534: DISABLE
59535: LD_INT 0
59537: PPUSH
59538: PPUSH
// begin enable ;
59539: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
59540: LD_ADDR_VAR 0 2
59544: PUSH
59545: LD_INT 22
59547: PUSH
59548: LD_OWVAR 2
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 32
59559: PUSH
59560: LD_INT 3
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PPUSH
59571: CALL_OW 69
59575: ST_TO_ADDR
// if not tmp then
59576: LD_VAR 0 2
59580: NOT
59581: IFFALSE 59585
// exit ;
59583: GO 59614
// for i in tmp do
59585: LD_ADDR_VAR 0 1
59589: PUSH
59590: LD_VAR 0 2
59594: PUSH
59595: FOR_IN
59596: IFFALSE 59612
// begin SetLives ( i , 0 ) ;
59598: LD_VAR 0 1
59602: PPUSH
59603: LD_INT 0
59605: PPUSH
59606: CALL_OW 234
// end ;
59610: GO 59595
59612: POP
59613: POP
// end ;
59614: PPOPN 2
59616: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
59617: LD_EXP 44
59621: PUSH
59622: LD_EXP 47
59626: AND
59627: IFFALSE 59720
59629: GO 59631
59631: DISABLE
59632: LD_INT 0
59634: PPUSH
// begin enable ;
59635: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
59636: LD_ADDR_VAR 0 1
59640: PUSH
59641: LD_INT 22
59643: PUSH
59644: LD_OWVAR 2
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 2
59655: PUSH
59656: LD_INT 25
59658: PUSH
59659: LD_INT 5
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 25
59668: PUSH
59669: LD_INT 9
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 25
59678: PUSH
59679: LD_INT 8
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PPUSH
59696: CALL_OW 69
59700: PUSH
59701: FOR_IN
59702: IFFALSE 59718
// begin SetClass ( i , 1 ) ;
59704: LD_VAR 0 1
59708: PPUSH
59709: LD_INT 1
59711: PPUSH
59712: CALL_OW 336
// end ;
59716: GO 59701
59718: POP
59719: POP
// end ;
59720: PPOPN 1
59722: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
59723: LD_EXP 44
59727: PUSH
59728: LD_EXP 48
59732: AND
59733: PUSH
59734: LD_OWVAR 65
59738: PUSH
59739: LD_INT 7
59741: LESS
59742: AND
59743: IFFALSE 59757
59745: GO 59747
59747: DISABLE
// begin enable ;
59748: ENABLE
// game_speed := 7 ;
59749: LD_ADDR_OWVAR 65
59753: PUSH
59754: LD_INT 7
59756: ST_TO_ADDR
// end ;
59757: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
59758: LD_EXP 44
59762: PUSH
59763: LD_EXP 51
59767: AND
59768: IFFALSE 59970
59770: GO 59772
59772: DISABLE
59773: LD_INT 0
59775: PPUSH
59776: PPUSH
59777: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
59778: LD_ADDR_VAR 0 3
59782: PUSH
59783: LD_INT 81
59785: PUSH
59786: LD_OWVAR 2
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 21
59797: PUSH
59798: LD_INT 1
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PPUSH
59809: CALL_OW 69
59813: ST_TO_ADDR
// if not tmp then
59814: LD_VAR 0 3
59818: NOT
59819: IFFALSE 59823
// exit ;
59821: GO 59970
// if tmp > 5 then
59823: LD_VAR 0 3
59827: PUSH
59828: LD_INT 5
59830: GREATER
59831: IFFALSE 59843
// k := 5 else
59833: LD_ADDR_VAR 0 2
59837: PUSH
59838: LD_INT 5
59840: ST_TO_ADDR
59841: GO 59853
// k := tmp ;
59843: LD_ADDR_VAR 0 2
59847: PUSH
59848: LD_VAR 0 3
59852: ST_TO_ADDR
// for i := 1 to k do
59853: LD_ADDR_VAR 0 1
59857: PUSH
59858: DOUBLE
59859: LD_INT 1
59861: DEC
59862: ST_TO_ADDR
59863: LD_VAR 0 2
59867: PUSH
59868: FOR_TO
59869: IFFALSE 59968
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
59871: LD_VAR 0 3
59875: PUSH
59876: LD_VAR 0 1
59880: ARRAY
59881: PPUSH
59882: LD_VAR 0 1
59886: PUSH
59887: LD_INT 4
59889: MOD
59890: PUSH
59891: LD_INT 1
59893: PLUS
59894: PPUSH
59895: CALL_OW 259
59899: PUSH
59900: LD_INT 10
59902: LESS
59903: IFFALSE 59966
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
59905: LD_VAR 0 3
59909: PUSH
59910: LD_VAR 0 1
59914: ARRAY
59915: PPUSH
59916: LD_VAR 0 1
59920: PUSH
59921: LD_INT 4
59923: MOD
59924: PUSH
59925: LD_INT 1
59927: PLUS
59928: PPUSH
59929: LD_VAR 0 3
59933: PUSH
59934: LD_VAR 0 1
59938: ARRAY
59939: PPUSH
59940: LD_VAR 0 1
59944: PUSH
59945: LD_INT 4
59947: MOD
59948: PUSH
59949: LD_INT 1
59951: PLUS
59952: PPUSH
59953: CALL_OW 259
59957: PUSH
59958: LD_INT 1
59960: PLUS
59961: PPUSH
59962: CALL_OW 237
59966: GO 59868
59968: POP
59969: POP
// end ;
59970: PPOPN 3
59972: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
59973: LD_EXP 44
59977: PUSH
59978: LD_EXP 52
59982: AND
59983: IFFALSE 60003
59985: GO 59987
59987: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
59988: LD_INT 4
59990: PPUSH
59991: LD_OWVAR 2
59995: PPUSH
59996: LD_INT 0
59998: PPUSH
59999: CALL_OW 324
60003: END
// every 0 0$1 trigger StreamModeActive and sShovel do
60004: LD_EXP 44
60008: PUSH
60009: LD_EXP 81
60013: AND
60014: IFFALSE 60034
60016: GO 60018
60018: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
60019: LD_INT 19
60021: PPUSH
60022: LD_OWVAR 2
60026: PPUSH
60027: LD_INT 0
60029: PPUSH
60030: CALL_OW 324
60034: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
60035: LD_EXP 44
60039: PUSH
60040: LD_EXP 53
60044: AND
60045: IFFALSE 60147
60047: GO 60049
60049: DISABLE
60050: LD_INT 0
60052: PPUSH
60053: PPUSH
// begin enable ;
60054: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
60055: LD_ADDR_VAR 0 2
60059: PUSH
60060: LD_INT 22
60062: PUSH
60063: LD_OWVAR 2
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 2
60074: PUSH
60075: LD_INT 34
60077: PUSH
60078: LD_INT 11
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 34
60087: PUSH
60088: LD_INT 30
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: LIST
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PPUSH
60104: CALL_OW 69
60108: ST_TO_ADDR
// if not tmp then
60109: LD_VAR 0 2
60113: NOT
60114: IFFALSE 60118
// exit ;
60116: GO 60147
// for i in tmp do
60118: LD_ADDR_VAR 0 1
60122: PUSH
60123: LD_VAR 0 2
60127: PUSH
60128: FOR_IN
60129: IFFALSE 60145
// begin SetLives ( i , 0 ) ;
60131: LD_VAR 0 1
60135: PPUSH
60136: LD_INT 0
60138: PPUSH
60139: CALL_OW 234
// end ;
60143: GO 60128
60145: POP
60146: POP
// end ;
60147: PPOPN 2
60149: END
// every 0 0$1 trigger StreamModeActive and sBunker do
60150: LD_EXP 44
60154: PUSH
60155: LD_EXP 54
60159: AND
60160: IFFALSE 60180
60162: GO 60164
60164: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
60165: LD_INT 32
60167: PPUSH
60168: LD_OWVAR 2
60172: PPUSH
60173: LD_INT 0
60175: PPUSH
60176: CALL_OW 324
60180: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
60181: LD_EXP 44
60185: PUSH
60186: LD_EXP 55
60190: AND
60191: IFFALSE 60372
60193: GO 60195
60195: DISABLE
60196: LD_INT 0
60198: PPUSH
60199: PPUSH
60200: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
60201: LD_ADDR_VAR 0 2
60205: PUSH
60206: LD_INT 22
60208: PUSH
60209: LD_OWVAR 2
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 33
60220: PUSH
60221: LD_INT 3
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PPUSH
60232: CALL_OW 69
60236: ST_TO_ADDR
// if not tmp then
60237: LD_VAR 0 2
60241: NOT
60242: IFFALSE 60246
// exit ;
60244: GO 60372
// side := 0 ;
60246: LD_ADDR_VAR 0 3
60250: PUSH
60251: LD_INT 0
60253: ST_TO_ADDR
// for i := 1 to 8 do
60254: LD_ADDR_VAR 0 1
60258: PUSH
60259: DOUBLE
60260: LD_INT 1
60262: DEC
60263: ST_TO_ADDR
60264: LD_INT 8
60266: PUSH
60267: FOR_TO
60268: IFFALSE 60316
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
60270: LD_OWVAR 2
60274: PUSH
60275: LD_VAR 0 1
60279: NONEQUAL
60280: PUSH
60281: LD_OWVAR 2
60285: PPUSH
60286: LD_VAR 0 1
60290: PPUSH
60291: CALL_OW 81
60295: PUSH
60296: LD_INT 2
60298: EQUAL
60299: AND
60300: IFFALSE 60314
// begin side := i ;
60302: LD_ADDR_VAR 0 3
60306: PUSH
60307: LD_VAR 0 1
60311: ST_TO_ADDR
// break ;
60312: GO 60316
// end ;
60314: GO 60267
60316: POP
60317: POP
// if not side then
60318: LD_VAR 0 3
60322: NOT
60323: IFFALSE 60327
// exit ;
60325: GO 60372
// for i := 1 to tmp do
60327: LD_ADDR_VAR 0 1
60331: PUSH
60332: DOUBLE
60333: LD_INT 1
60335: DEC
60336: ST_TO_ADDR
60337: LD_VAR 0 2
60341: PUSH
60342: FOR_TO
60343: IFFALSE 60370
// if Prob ( 60 ) then
60345: LD_INT 60
60347: PPUSH
60348: CALL_OW 13
60352: IFFALSE 60368
// SetSide ( i , side ) ;
60354: LD_VAR 0 1
60358: PPUSH
60359: LD_VAR 0 3
60363: PPUSH
60364: CALL_OW 235
60368: GO 60342
60370: POP
60371: POP
// end ;
60372: PPOPN 3
60374: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
60375: LD_EXP 44
60379: PUSH
60380: LD_EXP 57
60384: AND
60385: IFFALSE 60504
60387: GO 60389
60389: DISABLE
60390: LD_INT 0
60392: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
60393: LD_ADDR_VAR 0 1
60397: PUSH
60398: LD_INT 22
60400: PUSH
60401: LD_OWVAR 2
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 21
60412: PUSH
60413: LD_INT 1
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 3
60422: PUSH
60423: LD_INT 23
60425: PUSH
60426: LD_INT 0
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: LIST
60441: PPUSH
60442: CALL_OW 69
60446: PUSH
60447: FOR_IN
60448: IFFALSE 60502
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
60450: LD_VAR 0 1
60454: PPUSH
60455: CALL_OW 257
60459: PUSH
60460: LD_INT 1
60462: PUSH
60463: LD_INT 2
60465: PUSH
60466: LD_INT 3
60468: PUSH
60469: LD_INT 4
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: IN
60478: IFFALSE 60500
// SetClass ( un , rand ( 1 , 4 ) ) ;
60480: LD_VAR 0 1
60484: PPUSH
60485: LD_INT 1
60487: PPUSH
60488: LD_INT 4
60490: PPUSH
60491: CALL_OW 12
60495: PPUSH
60496: CALL_OW 336
60500: GO 60447
60502: POP
60503: POP
// end ;
60504: PPOPN 1
60506: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
60507: LD_EXP 44
60511: PUSH
60512: LD_EXP 56
60516: AND
60517: IFFALSE 60596
60519: GO 60521
60521: DISABLE
60522: LD_INT 0
60524: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
60525: LD_ADDR_VAR 0 1
60529: PUSH
60530: LD_INT 22
60532: PUSH
60533: LD_OWVAR 2
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 21
60544: PUSH
60545: LD_INT 3
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PPUSH
60556: CALL_OW 69
60560: ST_TO_ADDR
// if not tmp then
60561: LD_VAR 0 1
60565: NOT
60566: IFFALSE 60570
// exit ;
60568: GO 60596
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
60570: LD_VAR 0 1
60574: PUSH
60575: LD_INT 1
60577: PPUSH
60578: LD_VAR 0 1
60582: PPUSH
60583: CALL_OW 12
60587: ARRAY
60588: PPUSH
60589: LD_INT 100
60591: PPUSH
60592: CALL_OW 234
// end ;
60596: PPOPN 1
60598: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
60599: LD_EXP 44
60603: PUSH
60604: LD_EXP 58
60608: AND
60609: IFFALSE 60707
60611: GO 60613
60613: DISABLE
60614: LD_INT 0
60616: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
60617: LD_ADDR_VAR 0 1
60621: PUSH
60622: LD_INT 22
60624: PUSH
60625: LD_OWVAR 2
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 21
60636: PUSH
60637: LD_INT 1
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PPUSH
60648: CALL_OW 69
60652: ST_TO_ADDR
// if not tmp then
60653: LD_VAR 0 1
60657: NOT
60658: IFFALSE 60662
// exit ;
60660: GO 60707
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
60662: LD_VAR 0 1
60666: PUSH
60667: LD_INT 1
60669: PPUSH
60670: LD_VAR 0 1
60674: PPUSH
60675: CALL_OW 12
60679: ARRAY
60680: PPUSH
60681: LD_INT 1
60683: PPUSH
60684: LD_INT 4
60686: PPUSH
60687: CALL_OW 12
60691: PPUSH
60692: LD_INT 3000
60694: PPUSH
60695: LD_INT 9000
60697: PPUSH
60698: CALL_OW 12
60702: PPUSH
60703: CALL_OW 492
// end ;
60707: PPOPN 1
60709: END
// every 0 0$1 trigger StreamModeActive and sDepot do
60710: LD_EXP 44
60714: PUSH
60715: LD_EXP 59
60719: AND
60720: IFFALSE 60740
60722: GO 60724
60724: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
60725: LD_INT 1
60727: PPUSH
60728: LD_OWVAR 2
60732: PPUSH
60733: LD_INT 0
60735: PPUSH
60736: CALL_OW 324
60740: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
60741: LD_EXP 44
60745: PUSH
60746: LD_EXP 60
60750: AND
60751: IFFALSE 60834
60753: GO 60755
60755: DISABLE
60756: LD_INT 0
60758: PPUSH
60759: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
60760: LD_ADDR_VAR 0 2
60764: PUSH
60765: LD_INT 22
60767: PUSH
60768: LD_OWVAR 2
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 21
60779: PUSH
60780: LD_INT 3
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PPUSH
60791: CALL_OW 69
60795: ST_TO_ADDR
// if not tmp then
60796: LD_VAR 0 2
60800: NOT
60801: IFFALSE 60805
// exit ;
60803: GO 60834
// for i in tmp do
60805: LD_ADDR_VAR 0 1
60809: PUSH
60810: LD_VAR 0 2
60814: PUSH
60815: FOR_IN
60816: IFFALSE 60832
// SetBLevel ( i , 10 ) ;
60818: LD_VAR 0 1
60822: PPUSH
60823: LD_INT 10
60825: PPUSH
60826: CALL_OW 241
60830: GO 60815
60832: POP
60833: POP
// end ;
60834: PPOPN 2
60836: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
60837: LD_EXP 44
60841: PUSH
60842: LD_EXP 61
60846: AND
60847: IFFALSE 60958
60849: GO 60851
60851: DISABLE
60852: LD_INT 0
60854: PPUSH
60855: PPUSH
60856: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60857: LD_ADDR_VAR 0 3
60861: PUSH
60862: LD_INT 22
60864: PUSH
60865: LD_OWVAR 2
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 25
60876: PUSH
60877: LD_INT 1
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PPUSH
60888: CALL_OW 69
60892: ST_TO_ADDR
// if not tmp then
60893: LD_VAR 0 3
60897: NOT
60898: IFFALSE 60902
// exit ;
60900: GO 60958
// un := tmp [ rand ( 1 , tmp ) ] ;
60902: LD_ADDR_VAR 0 2
60906: PUSH
60907: LD_VAR 0 3
60911: PUSH
60912: LD_INT 1
60914: PPUSH
60915: LD_VAR 0 3
60919: PPUSH
60920: CALL_OW 12
60924: ARRAY
60925: ST_TO_ADDR
// if Crawls ( un ) then
60926: LD_VAR 0 2
60930: PPUSH
60931: CALL_OW 318
60935: IFFALSE 60946
// ComWalk ( un ) ;
60937: LD_VAR 0 2
60941: PPUSH
60942: CALL_OW 138
// SetClass ( un , class_sniper ) ;
60946: LD_VAR 0 2
60950: PPUSH
60951: LD_INT 5
60953: PPUSH
60954: CALL_OW 336
// end ;
60958: PPOPN 3
60960: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
60961: LD_EXP 44
60965: PUSH
60966: LD_EXP 62
60970: AND
60971: PUSH
60972: LD_OWVAR 67
60976: PUSH
60977: LD_INT 4
60979: LESS
60980: AND
60981: IFFALSE 61000
60983: GO 60985
60985: DISABLE
// begin Difficulty := Difficulty + 1 ;
60986: LD_ADDR_OWVAR 67
60990: PUSH
60991: LD_OWVAR 67
60995: PUSH
60996: LD_INT 1
60998: PLUS
60999: ST_TO_ADDR
// end ;
61000: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
61001: LD_EXP 44
61005: PUSH
61006: LD_EXP 63
61010: AND
61011: IFFALSE 61114
61013: GO 61015
61015: DISABLE
61016: LD_INT 0
61018: PPUSH
// begin for i := 1 to 5 do
61019: LD_ADDR_VAR 0 1
61023: PUSH
61024: DOUBLE
61025: LD_INT 1
61027: DEC
61028: ST_TO_ADDR
61029: LD_INT 5
61031: PUSH
61032: FOR_TO
61033: IFFALSE 61112
// begin uc_nation := nation_nature ;
61035: LD_ADDR_OWVAR 21
61039: PUSH
61040: LD_INT 0
61042: ST_TO_ADDR
// uc_side := 0 ;
61043: LD_ADDR_OWVAR 20
61047: PUSH
61048: LD_INT 0
61050: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61051: LD_ADDR_OWVAR 29
61055: PUSH
61056: LD_INT 12
61058: PUSH
61059: LD_INT 12
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: ST_TO_ADDR
// hc_agressivity := 20 ;
61066: LD_ADDR_OWVAR 35
61070: PUSH
61071: LD_INT 20
61073: ST_TO_ADDR
// hc_class := class_tiger ;
61074: LD_ADDR_OWVAR 28
61078: PUSH
61079: LD_INT 14
61081: ST_TO_ADDR
// hc_gallery :=  ;
61082: LD_ADDR_OWVAR 33
61086: PUSH
61087: LD_STRING 
61089: ST_TO_ADDR
// hc_name :=  ;
61090: LD_ADDR_OWVAR 26
61094: PUSH
61095: LD_STRING 
61097: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
61098: CALL_OW 44
61102: PPUSH
61103: LD_INT 0
61105: PPUSH
61106: CALL_OW 51
// end ;
61110: GO 61032
61112: POP
61113: POP
// end ;
61114: PPOPN 1
61116: END
// every 0 0$1 trigger StreamModeActive and sBomb do
61117: LD_EXP 44
61121: PUSH
61122: LD_EXP 64
61126: AND
61127: IFFALSE 61136
61129: GO 61131
61131: DISABLE
// StreamSibBomb ;
61132: CALL 61137 0 0
61136: END
// export function StreamSibBomb ; var i , x , y ; begin
61137: LD_INT 0
61139: PPUSH
61140: PPUSH
61141: PPUSH
61142: PPUSH
// result := false ;
61143: LD_ADDR_VAR 0 1
61147: PUSH
61148: LD_INT 0
61150: ST_TO_ADDR
// for i := 1 to 16 do
61151: LD_ADDR_VAR 0 2
61155: PUSH
61156: DOUBLE
61157: LD_INT 1
61159: DEC
61160: ST_TO_ADDR
61161: LD_INT 16
61163: PUSH
61164: FOR_TO
61165: IFFALSE 61364
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
61167: LD_ADDR_VAR 0 3
61171: PUSH
61172: LD_INT 10
61174: PUSH
61175: LD_INT 20
61177: PUSH
61178: LD_INT 30
61180: PUSH
61181: LD_INT 40
61183: PUSH
61184: LD_INT 50
61186: PUSH
61187: LD_INT 60
61189: PUSH
61190: LD_INT 70
61192: PUSH
61193: LD_INT 80
61195: PUSH
61196: LD_INT 90
61198: PUSH
61199: LD_INT 100
61201: PUSH
61202: LD_INT 110
61204: PUSH
61205: LD_INT 120
61207: PUSH
61208: LD_INT 130
61210: PUSH
61211: LD_INT 140
61213: PUSH
61214: LD_INT 150
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: PUSH
61234: LD_INT 1
61236: PPUSH
61237: LD_INT 15
61239: PPUSH
61240: CALL_OW 12
61244: ARRAY
61245: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
61246: LD_ADDR_VAR 0 4
61250: PUSH
61251: LD_INT 10
61253: PUSH
61254: LD_INT 20
61256: PUSH
61257: LD_INT 30
61259: PUSH
61260: LD_INT 40
61262: PUSH
61263: LD_INT 50
61265: PUSH
61266: LD_INT 60
61268: PUSH
61269: LD_INT 70
61271: PUSH
61272: LD_INT 80
61274: PUSH
61275: LD_INT 90
61277: PUSH
61278: LD_INT 100
61280: PUSH
61281: LD_INT 110
61283: PUSH
61284: LD_INT 120
61286: PUSH
61287: LD_INT 130
61289: PUSH
61290: LD_INT 140
61292: PUSH
61293: LD_INT 150
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 1
61315: PPUSH
61316: LD_INT 15
61318: PPUSH
61319: CALL_OW 12
61323: ARRAY
61324: ST_TO_ADDR
// if ValidHex ( x , y ) then
61325: LD_VAR 0 3
61329: PPUSH
61330: LD_VAR 0 4
61334: PPUSH
61335: CALL_OW 488
61339: IFFALSE 61362
// begin result := [ x , y ] ;
61341: LD_ADDR_VAR 0 1
61345: PUSH
61346: LD_VAR 0 3
61350: PUSH
61351: LD_VAR 0 4
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: ST_TO_ADDR
// break ;
61360: GO 61364
// end ; end ;
61362: GO 61164
61364: POP
61365: POP
// if result then
61366: LD_VAR 0 1
61370: IFFALSE 61430
// begin ToLua ( playSibBomb() ) ;
61372: LD_STRING playSibBomb()
61374: PPUSH
61375: CALL_OW 559
// wait ( 0 0$14 ) ;
61379: LD_INT 490
61381: PPUSH
61382: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
61386: LD_VAR 0 1
61390: PUSH
61391: LD_INT 1
61393: ARRAY
61394: PPUSH
61395: LD_VAR 0 1
61399: PUSH
61400: LD_INT 2
61402: ARRAY
61403: PPUSH
61404: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
61408: LD_VAR 0 1
61412: PUSH
61413: LD_INT 1
61415: ARRAY
61416: PPUSH
61417: LD_VAR 0 1
61421: PUSH
61422: LD_INT 2
61424: ARRAY
61425: PPUSH
61426: CALL_OW 429
// end ; end ;
61430: LD_VAR 0 1
61434: RET
// every 0 0$1 trigger StreamModeActive and sReset do
61435: LD_EXP 44
61439: PUSH
61440: LD_EXP 66
61444: AND
61445: IFFALSE 61457
61447: GO 61449
61449: DISABLE
// YouLost (  ) ;
61450: LD_STRING 
61452: PPUSH
61453: CALL_OW 104
61457: END
// every 0 0$1 trigger StreamModeActive and sFog do
61458: LD_EXP 44
61462: PUSH
61463: LD_EXP 65
61467: AND
61468: IFFALSE 61482
61470: GO 61472
61472: DISABLE
// FogOff ( your_side ) ;
61473: LD_OWVAR 2
61477: PPUSH
61478: CALL_OW 344
61482: END
// every 0 0$1 trigger StreamModeActive and sSun do
61483: LD_EXP 44
61487: PUSH
61488: LD_EXP 67
61492: AND
61493: IFFALSE 61521
61495: GO 61497
61497: DISABLE
// begin solar_recharge_percent := 0 ;
61498: LD_ADDR_OWVAR 79
61502: PUSH
61503: LD_INT 0
61505: ST_TO_ADDR
// wait ( 5 5$00 ) ;
61506: LD_INT 10500
61508: PPUSH
61509: CALL_OW 67
// solar_recharge_percent := 100 ;
61513: LD_ADDR_OWVAR 79
61517: PUSH
61518: LD_INT 100
61520: ST_TO_ADDR
// end ;
61521: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
61522: LD_EXP 44
61526: PUSH
61527: LD_EXP 68
61531: AND
61532: IFFALSE 61771
61534: GO 61536
61536: DISABLE
61537: LD_INT 0
61539: PPUSH
61540: PPUSH
61541: PPUSH
// begin tmp := [ ] ;
61542: LD_ADDR_VAR 0 3
61546: PUSH
61547: EMPTY
61548: ST_TO_ADDR
// for i := 1 to 6 do
61549: LD_ADDR_VAR 0 1
61553: PUSH
61554: DOUBLE
61555: LD_INT 1
61557: DEC
61558: ST_TO_ADDR
61559: LD_INT 6
61561: PUSH
61562: FOR_TO
61563: IFFALSE 61668
// begin uc_nation := nation_nature ;
61565: LD_ADDR_OWVAR 21
61569: PUSH
61570: LD_INT 0
61572: ST_TO_ADDR
// uc_side := 0 ;
61573: LD_ADDR_OWVAR 20
61577: PUSH
61578: LD_INT 0
61580: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61581: LD_ADDR_OWVAR 29
61585: PUSH
61586: LD_INT 12
61588: PUSH
61589: LD_INT 12
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: ST_TO_ADDR
// hc_agressivity := 20 ;
61596: LD_ADDR_OWVAR 35
61600: PUSH
61601: LD_INT 20
61603: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
61604: LD_ADDR_OWVAR 28
61608: PUSH
61609: LD_INT 17
61611: ST_TO_ADDR
// hc_gallery :=  ;
61612: LD_ADDR_OWVAR 33
61616: PUSH
61617: LD_STRING 
61619: ST_TO_ADDR
// hc_name :=  ;
61620: LD_ADDR_OWVAR 26
61624: PUSH
61625: LD_STRING 
61627: ST_TO_ADDR
// un := CreateHuman ;
61628: LD_ADDR_VAR 0 2
61632: PUSH
61633: CALL_OW 44
61637: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
61638: LD_VAR 0 2
61642: PPUSH
61643: LD_INT 1
61645: PPUSH
61646: CALL_OW 51
// tmp := tmp ^ un ;
61650: LD_ADDR_VAR 0 3
61654: PUSH
61655: LD_VAR 0 3
61659: PUSH
61660: LD_VAR 0 2
61664: ADD
61665: ST_TO_ADDR
// end ;
61666: GO 61562
61668: POP
61669: POP
// repeat wait ( 0 0$1 ) ;
61670: LD_INT 35
61672: PPUSH
61673: CALL_OW 67
// for un in tmp do
61677: LD_ADDR_VAR 0 2
61681: PUSH
61682: LD_VAR 0 3
61686: PUSH
61687: FOR_IN
61688: IFFALSE 61762
// begin if IsDead ( un ) then
61690: LD_VAR 0 2
61694: PPUSH
61695: CALL_OW 301
61699: IFFALSE 61719
// begin tmp := tmp diff un ;
61701: LD_ADDR_VAR 0 3
61705: PUSH
61706: LD_VAR 0 3
61710: PUSH
61711: LD_VAR 0 2
61715: DIFF
61716: ST_TO_ADDR
// continue ;
61717: GO 61687
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
61719: LD_VAR 0 2
61723: PPUSH
61724: LD_INT 3
61726: PUSH
61727: LD_INT 22
61729: PUSH
61730: LD_INT 0
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PPUSH
61741: CALL_OW 69
61745: PPUSH
61746: LD_VAR 0 2
61750: PPUSH
61751: CALL_OW 74
61755: PPUSH
61756: CALL_OW 115
// end ;
61760: GO 61687
61762: POP
61763: POP
// until not tmp ;
61764: LD_VAR 0 3
61768: NOT
61769: IFFALSE 61670
// end ;
61771: PPOPN 3
61773: END
// every 0 0$1 trigger StreamModeActive and sTroll do
61774: LD_EXP 44
61778: PUSH
61779: LD_EXP 69
61783: AND
61784: IFFALSE 61838
61786: GO 61788
61788: DISABLE
// begin ToLua ( displayTroll(); ) ;
61789: LD_STRING displayTroll();
61791: PPUSH
61792: CALL_OW 559
// wait ( 3 3$00 ) ;
61796: LD_INT 6300
61798: PPUSH
61799: CALL_OW 67
// ToLua ( hideTroll(); ) ;
61803: LD_STRING hideTroll();
61805: PPUSH
61806: CALL_OW 559
// wait ( 1 1$00 ) ;
61810: LD_INT 2100
61812: PPUSH
61813: CALL_OW 67
// ToLua ( displayTroll(); ) ;
61817: LD_STRING displayTroll();
61819: PPUSH
61820: CALL_OW 559
// wait ( 1 1$00 ) ;
61824: LD_INT 2100
61826: PPUSH
61827: CALL_OW 67
// ToLua ( hideTroll(); ) ;
61831: LD_STRING hideTroll();
61833: PPUSH
61834: CALL_OW 559
// end ;
61838: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
61839: LD_EXP 44
61843: PUSH
61844: LD_EXP 70
61848: AND
61849: IFFALSE 61912
61851: GO 61853
61853: DISABLE
61854: LD_INT 0
61856: PPUSH
// begin p := 0 ;
61857: LD_ADDR_VAR 0 1
61861: PUSH
61862: LD_INT 0
61864: ST_TO_ADDR
// repeat game_speed := 1 ;
61865: LD_ADDR_OWVAR 65
61869: PUSH
61870: LD_INT 1
61872: ST_TO_ADDR
// wait ( 0 0$1 ) ;
61873: LD_INT 35
61875: PPUSH
61876: CALL_OW 67
// p := p + 1 ;
61880: LD_ADDR_VAR 0 1
61884: PUSH
61885: LD_VAR 0 1
61889: PUSH
61890: LD_INT 1
61892: PLUS
61893: ST_TO_ADDR
// until p >= 60 ;
61894: LD_VAR 0 1
61898: PUSH
61899: LD_INT 60
61901: GREATEREQUAL
61902: IFFALSE 61865
// game_speed := 4 ;
61904: LD_ADDR_OWVAR 65
61908: PUSH
61909: LD_INT 4
61911: ST_TO_ADDR
// end ;
61912: PPOPN 1
61914: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
61915: LD_EXP 44
61919: PUSH
61920: LD_EXP 71
61924: AND
61925: IFFALSE 62071
61927: GO 61929
61929: DISABLE
61930: LD_INT 0
61932: PPUSH
61933: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61934: LD_ADDR_VAR 0 1
61938: PUSH
61939: LD_INT 22
61941: PUSH
61942: LD_OWVAR 2
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: LD_INT 2
61953: PUSH
61954: LD_INT 30
61956: PUSH
61957: LD_INT 0
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 30
61966: PUSH
61967: LD_INT 1
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: LIST
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PPUSH
61983: CALL_OW 69
61987: ST_TO_ADDR
// if not depot then
61988: LD_VAR 0 1
61992: NOT
61993: IFFALSE 61997
// exit ;
61995: GO 62071
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
61997: LD_ADDR_VAR 0 2
62001: PUSH
62002: LD_VAR 0 1
62006: PUSH
62007: LD_INT 1
62009: PPUSH
62010: LD_VAR 0 1
62014: PPUSH
62015: CALL_OW 12
62019: ARRAY
62020: PPUSH
62021: CALL_OW 274
62025: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
62026: LD_VAR 0 2
62030: PPUSH
62031: LD_INT 1
62033: PPUSH
62034: LD_INT 0
62036: PPUSH
62037: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
62041: LD_VAR 0 2
62045: PPUSH
62046: LD_INT 2
62048: PPUSH
62049: LD_INT 0
62051: PPUSH
62052: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
62056: LD_VAR 0 2
62060: PPUSH
62061: LD_INT 3
62063: PPUSH
62064: LD_INT 0
62066: PPUSH
62067: CALL_OW 277
// end ;
62071: PPOPN 2
62073: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
62074: LD_EXP 44
62078: PUSH
62079: LD_EXP 72
62083: AND
62084: IFFALSE 62181
62086: GO 62088
62088: DISABLE
62089: LD_INT 0
62091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
62092: LD_ADDR_VAR 0 1
62096: PUSH
62097: LD_INT 22
62099: PUSH
62100: LD_OWVAR 2
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 21
62111: PUSH
62112: LD_INT 1
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 3
62121: PUSH
62122: LD_INT 23
62124: PUSH
62125: LD_INT 0
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: LIST
62140: PPUSH
62141: CALL_OW 69
62145: ST_TO_ADDR
// if not tmp then
62146: LD_VAR 0 1
62150: NOT
62151: IFFALSE 62155
// exit ;
62153: GO 62181
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
62155: LD_VAR 0 1
62159: PUSH
62160: LD_INT 1
62162: PPUSH
62163: LD_VAR 0 1
62167: PPUSH
62168: CALL_OW 12
62172: ARRAY
62173: PPUSH
62174: LD_INT 200
62176: PPUSH
62177: CALL_OW 234
// end ;
62181: PPOPN 1
62183: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
62184: LD_EXP 44
62188: PUSH
62189: LD_EXP 73
62193: AND
62194: IFFALSE 62273
62196: GO 62198
62198: DISABLE
62199: LD_INT 0
62201: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
62202: LD_ADDR_VAR 0 1
62206: PUSH
62207: LD_INT 22
62209: PUSH
62210: LD_OWVAR 2
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 21
62221: PUSH
62222: LD_INT 2
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PPUSH
62233: CALL_OW 69
62237: ST_TO_ADDR
// if not tmp then
62238: LD_VAR 0 1
62242: NOT
62243: IFFALSE 62247
// exit ;
62245: GO 62273
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
62247: LD_VAR 0 1
62251: PUSH
62252: LD_INT 1
62254: PPUSH
62255: LD_VAR 0 1
62259: PPUSH
62260: CALL_OW 12
62264: ARRAY
62265: PPUSH
62266: LD_INT 60
62268: PPUSH
62269: CALL_OW 234
// end ;
62273: PPOPN 1
62275: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
62276: LD_EXP 44
62280: PUSH
62281: LD_EXP 74
62285: AND
62286: IFFALSE 62385
62288: GO 62290
62290: DISABLE
62291: LD_INT 0
62293: PPUSH
62294: PPUSH
// begin enable ;
62295: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
62296: LD_ADDR_VAR 0 1
62300: PUSH
62301: LD_INT 22
62303: PUSH
62304: LD_OWVAR 2
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 61
62315: PUSH
62316: EMPTY
62317: LIST
62318: PUSH
62319: LD_INT 33
62321: PUSH
62322: LD_INT 2
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: LIST
62333: PPUSH
62334: CALL_OW 69
62338: ST_TO_ADDR
// if not tmp then
62339: LD_VAR 0 1
62343: NOT
62344: IFFALSE 62348
// exit ;
62346: GO 62385
// for i in tmp do
62348: LD_ADDR_VAR 0 2
62352: PUSH
62353: LD_VAR 0 1
62357: PUSH
62358: FOR_IN
62359: IFFALSE 62383
// if IsControledBy ( i ) then
62361: LD_VAR 0 2
62365: PPUSH
62366: CALL_OW 312
62370: IFFALSE 62381
// ComUnlink ( i ) ;
62372: LD_VAR 0 2
62376: PPUSH
62377: CALL_OW 136
62381: GO 62358
62383: POP
62384: POP
// end ;
62385: PPOPN 2
62387: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
62388: LD_EXP 44
62392: PUSH
62393: LD_EXP 75
62397: AND
62398: IFFALSE 62538
62400: GO 62402
62402: DISABLE
62403: LD_INT 0
62405: PPUSH
62406: PPUSH
// begin ToLua ( displayPowell(); ) ;
62407: LD_STRING displayPowell();
62409: PPUSH
62410: CALL_OW 559
// uc_side := 0 ;
62414: LD_ADDR_OWVAR 20
62418: PUSH
62419: LD_INT 0
62421: ST_TO_ADDR
// uc_nation := 2 ;
62422: LD_ADDR_OWVAR 21
62426: PUSH
62427: LD_INT 2
62429: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
62430: LD_ADDR_OWVAR 37
62434: PUSH
62435: LD_INT 14
62437: ST_TO_ADDR
// vc_engine := engine_siberite ;
62438: LD_ADDR_OWVAR 39
62442: PUSH
62443: LD_INT 3
62445: ST_TO_ADDR
// vc_control := control_apeman ;
62446: LD_ADDR_OWVAR 38
62450: PUSH
62451: LD_INT 5
62453: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
62454: LD_ADDR_OWVAR 40
62458: PUSH
62459: LD_INT 29
62461: ST_TO_ADDR
// un := CreateVehicle ;
62462: LD_ADDR_VAR 0 2
62466: PUSH
62467: CALL_OW 45
62471: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
62472: LD_VAR 0 2
62476: PPUSH
62477: LD_INT 1
62479: PPUSH
62480: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
62484: LD_INT 35
62486: PPUSH
62487: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
62491: LD_VAR 0 2
62495: PPUSH
62496: LD_INT 22
62498: PUSH
62499: LD_OWVAR 2
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PPUSH
62508: CALL_OW 69
62512: PPUSH
62513: LD_VAR 0 2
62517: PPUSH
62518: CALL_OW 74
62522: PPUSH
62523: CALL_OW 115
// until IsDead ( un ) ;
62527: LD_VAR 0 2
62531: PPUSH
62532: CALL_OW 301
62536: IFFALSE 62484
// end ;
62538: PPOPN 2
62540: END
// every 0 0$1 trigger StreamModeActive and sStu do
62541: LD_EXP 44
62545: PUSH
62546: LD_EXP 83
62550: AND
62551: IFFALSE 62567
62553: GO 62555
62555: DISABLE
// begin ToLua ( displayStucuk(); ) ;
62556: LD_STRING displayStucuk();
62558: PPUSH
62559: CALL_OW 559
// ResetFog ;
62563: CALL_OW 335
// end ;
62567: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
62568: LD_EXP 44
62572: PUSH
62573: LD_EXP 76
62577: AND
62578: IFFALSE 62719
62580: GO 62582
62582: DISABLE
62583: LD_INT 0
62585: PPUSH
62586: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
62587: LD_ADDR_VAR 0 2
62591: PUSH
62592: LD_INT 22
62594: PUSH
62595: LD_OWVAR 2
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: LD_INT 21
62606: PUSH
62607: LD_INT 1
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PPUSH
62618: CALL_OW 69
62622: ST_TO_ADDR
// if not tmp then
62623: LD_VAR 0 2
62627: NOT
62628: IFFALSE 62632
// exit ;
62630: GO 62719
// un := tmp [ rand ( 1 , tmp ) ] ;
62632: LD_ADDR_VAR 0 1
62636: PUSH
62637: LD_VAR 0 2
62641: PUSH
62642: LD_INT 1
62644: PPUSH
62645: LD_VAR 0 2
62649: PPUSH
62650: CALL_OW 12
62654: ARRAY
62655: ST_TO_ADDR
// SetSide ( un , 0 ) ;
62656: LD_VAR 0 1
62660: PPUSH
62661: LD_INT 0
62663: PPUSH
62664: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
62668: LD_VAR 0 1
62672: PPUSH
62673: LD_OWVAR 3
62677: PUSH
62678: LD_VAR 0 1
62682: DIFF
62683: PPUSH
62684: LD_VAR 0 1
62688: PPUSH
62689: CALL_OW 74
62693: PPUSH
62694: CALL_OW 115
// wait ( 0 0$20 ) ;
62698: LD_INT 700
62700: PPUSH
62701: CALL_OW 67
// SetSide ( un , your_side ) ;
62705: LD_VAR 0 1
62709: PPUSH
62710: LD_OWVAR 2
62714: PPUSH
62715: CALL_OW 235
// end ;
62719: PPOPN 2
62721: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
62722: LD_EXP 44
62726: PUSH
62727: LD_EXP 77
62731: AND
62732: IFFALSE 62838
62734: GO 62736
62736: DISABLE
62737: LD_INT 0
62739: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62740: LD_ADDR_VAR 0 1
62744: PUSH
62745: LD_INT 22
62747: PUSH
62748: LD_OWVAR 2
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: LD_INT 2
62759: PUSH
62760: LD_INT 30
62762: PUSH
62763: LD_INT 0
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 30
62772: PUSH
62773: LD_INT 1
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: LIST
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PPUSH
62789: CALL_OW 69
62793: ST_TO_ADDR
// if not depot then
62794: LD_VAR 0 1
62798: NOT
62799: IFFALSE 62803
// exit ;
62801: GO 62838
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
62803: LD_VAR 0 1
62807: PUSH
62808: LD_INT 1
62810: ARRAY
62811: PPUSH
62812: CALL_OW 250
62816: PPUSH
62817: LD_VAR 0 1
62821: PUSH
62822: LD_INT 1
62824: ARRAY
62825: PPUSH
62826: CALL_OW 251
62830: PPUSH
62831: LD_INT 70
62833: PPUSH
62834: CALL_OW 495
// end ;
62838: PPOPN 1
62840: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
62841: LD_EXP 44
62845: PUSH
62846: LD_EXP 78
62850: AND
62851: IFFALSE 63062
62853: GO 62855
62855: DISABLE
62856: LD_INT 0
62858: PPUSH
62859: PPUSH
62860: PPUSH
62861: PPUSH
62862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
62863: LD_ADDR_VAR 0 5
62867: PUSH
62868: LD_INT 22
62870: PUSH
62871: LD_OWVAR 2
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: PUSH
62880: LD_INT 21
62882: PUSH
62883: LD_INT 1
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PPUSH
62894: CALL_OW 69
62898: ST_TO_ADDR
// if not tmp then
62899: LD_VAR 0 5
62903: NOT
62904: IFFALSE 62908
// exit ;
62906: GO 63062
// for i in tmp do
62908: LD_ADDR_VAR 0 1
62912: PUSH
62913: LD_VAR 0 5
62917: PUSH
62918: FOR_IN
62919: IFFALSE 63060
// begin d := rand ( 0 , 5 ) ;
62921: LD_ADDR_VAR 0 4
62925: PUSH
62926: LD_INT 0
62928: PPUSH
62929: LD_INT 5
62931: PPUSH
62932: CALL_OW 12
62936: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
62937: LD_ADDR_VAR 0 2
62941: PUSH
62942: LD_VAR 0 1
62946: PPUSH
62947: CALL_OW 250
62951: PPUSH
62952: LD_VAR 0 4
62956: PPUSH
62957: LD_INT 3
62959: PPUSH
62960: LD_INT 12
62962: PPUSH
62963: CALL_OW 12
62967: PPUSH
62968: CALL_OW 272
62972: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
62973: LD_ADDR_VAR 0 3
62977: PUSH
62978: LD_VAR 0 1
62982: PPUSH
62983: CALL_OW 251
62987: PPUSH
62988: LD_VAR 0 4
62992: PPUSH
62993: LD_INT 3
62995: PPUSH
62996: LD_INT 12
62998: PPUSH
62999: CALL_OW 12
63003: PPUSH
63004: CALL_OW 273
63008: ST_TO_ADDR
// if ValidHex ( x , y ) then
63009: LD_VAR 0 2
63013: PPUSH
63014: LD_VAR 0 3
63018: PPUSH
63019: CALL_OW 488
63023: IFFALSE 63058
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
63025: LD_VAR 0 1
63029: PPUSH
63030: LD_VAR 0 2
63034: PPUSH
63035: LD_VAR 0 3
63039: PPUSH
63040: LD_INT 3
63042: PPUSH
63043: LD_INT 6
63045: PPUSH
63046: CALL_OW 12
63050: PPUSH
63051: LD_INT 1
63053: PPUSH
63054: CALL_OW 483
// end ;
63058: GO 62918
63060: POP
63061: POP
// end ;
63062: PPOPN 5
63064: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
63065: LD_EXP 44
63069: PUSH
63070: LD_EXP 79
63074: AND
63075: IFFALSE 63169
63077: GO 63079
63079: DISABLE
63080: LD_INT 0
63082: PPUSH
63083: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
63084: LD_ADDR_VAR 0 2
63088: PUSH
63089: LD_INT 22
63091: PUSH
63092: LD_OWVAR 2
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 32
63103: PUSH
63104: LD_INT 1
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: LD_INT 21
63113: PUSH
63114: LD_INT 2
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: LIST
63125: PPUSH
63126: CALL_OW 69
63130: ST_TO_ADDR
// if not tmp then
63131: LD_VAR 0 2
63135: NOT
63136: IFFALSE 63140
// exit ;
63138: GO 63169
// for i in tmp do
63140: LD_ADDR_VAR 0 1
63144: PUSH
63145: LD_VAR 0 2
63149: PUSH
63150: FOR_IN
63151: IFFALSE 63167
// SetFuel ( i , 0 ) ;
63153: LD_VAR 0 1
63157: PPUSH
63158: LD_INT 0
63160: PPUSH
63161: CALL_OW 240
63165: GO 63150
63167: POP
63168: POP
// end ;
63169: PPOPN 2
63171: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
63172: LD_EXP 44
63176: PUSH
63177: LD_EXP 80
63181: AND
63182: IFFALSE 63248
63184: GO 63186
63186: DISABLE
63187: LD_INT 0
63189: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
63190: LD_ADDR_VAR 0 1
63194: PUSH
63195: LD_INT 22
63197: PUSH
63198: LD_OWVAR 2
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: PUSH
63207: LD_INT 30
63209: PUSH
63210: LD_INT 29
63212: PUSH
63213: EMPTY
63214: LIST
63215: LIST
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PPUSH
63221: CALL_OW 69
63225: ST_TO_ADDR
// if not tmp then
63226: LD_VAR 0 1
63230: NOT
63231: IFFALSE 63235
// exit ;
63233: GO 63248
// DestroyUnit ( tmp [ 1 ] ) ;
63235: LD_VAR 0 1
63239: PUSH
63240: LD_INT 1
63242: ARRAY
63243: PPUSH
63244: CALL_OW 65
// end ;
63248: PPOPN 1
63250: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
63251: LD_EXP 44
63255: PUSH
63256: LD_EXP 82
63260: AND
63261: IFFALSE 63390
63263: GO 63265
63265: DISABLE
63266: LD_INT 0
63268: PPUSH
// begin uc_side := 0 ;
63269: LD_ADDR_OWVAR 20
63273: PUSH
63274: LD_INT 0
63276: ST_TO_ADDR
// uc_nation := nation_arabian ;
63277: LD_ADDR_OWVAR 21
63281: PUSH
63282: LD_INT 2
63284: ST_TO_ADDR
// hc_gallery :=  ;
63285: LD_ADDR_OWVAR 33
63289: PUSH
63290: LD_STRING 
63292: ST_TO_ADDR
// hc_name :=  ;
63293: LD_ADDR_OWVAR 26
63297: PUSH
63298: LD_STRING 
63300: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
63301: LD_INT 1
63303: PPUSH
63304: LD_INT 11
63306: PPUSH
63307: LD_INT 10
63309: PPUSH
63310: CALL_OW 380
// un := CreateHuman ;
63314: LD_ADDR_VAR 0 1
63318: PUSH
63319: CALL_OW 44
63323: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
63324: LD_VAR 0 1
63328: PPUSH
63329: LD_INT 1
63331: PPUSH
63332: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
63336: LD_INT 35
63338: PPUSH
63339: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
63343: LD_VAR 0 1
63347: PPUSH
63348: LD_INT 22
63350: PUSH
63351: LD_OWVAR 2
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: PPUSH
63360: CALL_OW 69
63364: PPUSH
63365: LD_VAR 0 1
63369: PPUSH
63370: CALL_OW 74
63374: PPUSH
63375: CALL_OW 115
// until IsDead ( un ) ;
63379: LD_VAR 0 1
63383: PPUSH
63384: CALL_OW 301
63388: IFFALSE 63336
// end ;
63390: PPOPN 1
63392: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
63393: LD_EXP 44
63397: PUSH
63398: LD_EXP 84
63402: AND
63403: IFFALSE 63415
63405: GO 63407
63407: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
63408: LD_STRING earthquake(getX(game), 0, 32)
63410: PPUSH
63411: CALL_OW 559
63415: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
63416: LD_EXP 44
63420: PUSH
63421: LD_EXP 85
63425: AND
63426: IFFALSE 63517
63428: GO 63430
63430: DISABLE
63431: LD_INT 0
63433: PPUSH
// begin enable ;
63434: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
63435: LD_ADDR_VAR 0 1
63439: PUSH
63440: LD_INT 22
63442: PUSH
63443: LD_OWVAR 2
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 21
63454: PUSH
63455: LD_INT 2
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 33
63464: PUSH
63465: LD_INT 3
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: LIST
63476: PPUSH
63477: CALL_OW 69
63481: ST_TO_ADDR
// if not tmp then
63482: LD_VAR 0 1
63486: NOT
63487: IFFALSE 63491
// exit ;
63489: GO 63517
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
63491: LD_VAR 0 1
63495: PUSH
63496: LD_INT 1
63498: PPUSH
63499: LD_VAR 0 1
63503: PPUSH
63504: CALL_OW 12
63508: ARRAY
63509: PPUSH
63510: LD_INT 1
63512: PPUSH
63513: CALL_OW 234
// end ;
63517: PPOPN 1
63519: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
63520: LD_EXP 44
63524: PUSH
63525: LD_EXP 86
63529: AND
63530: IFFALSE 63671
63532: GO 63534
63534: DISABLE
63535: LD_INT 0
63537: PPUSH
63538: PPUSH
63539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
63540: LD_ADDR_VAR 0 3
63544: PUSH
63545: LD_INT 22
63547: PUSH
63548: LD_OWVAR 2
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: LD_INT 25
63559: PUSH
63560: LD_INT 1
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PPUSH
63571: CALL_OW 69
63575: ST_TO_ADDR
// if not tmp then
63576: LD_VAR 0 3
63580: NOT
63581: IFFALSE 63585
// exit ;
63583: GO 63671
// un := tmp [ rand ( 1 , tmp ) ] ;
63585: LD_ADDR_VAR 0 2
63589: PUSH
63590: LD_VAR 0 3
63594: PUSH
63595: LD_INT 1
63597: PPUSH
63598: LD_VAR 0 3
63602: PPUSH
63603: CALL_OW 12
63607: ARRAY
63608: ST_TO_ADDR
// if Crawls ( un ) then
63609: LD_VAR 0 2
63613: PPUSH
63614: CALL_OW 318
63618: IFFALSE 63629
// ComWalk ( un ) ;
63620: LD_VAR 0 2
63624: PPUSH
63625: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
63629: LD_VAR 0 2
63633: PPUSH
63634: LD_INT 9
63636: PPUSH
63637: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
63641: LD_INT 28
63643: PPUSH
63644: LD_OWVAR 2
63648: PPUSH
63649: LD_INT 2
63651: PPUSH
63652: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
63656: LD_INT 29
63658: PPUSH
63659: LD_OWVAR 2
63663: PPUSH
63664: LD_INT 2
63666: PPUSH
63667: CALL_OW 322
// end ;
63671: PPOPN 3
63673: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
63674: LD_EXP 44
63678: PUSH
63679: LD_EXP 87
63683: AND
63684: IFFALSE 63795
63686: GO 63688
63688: DISABLE
63689: LD_INT 0
63691: PPUSH
63692: PPUSH
63693: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
63694: LD_ADDR_VAR 0 3
63698: PUSH
63699: LD_INT 22
63701: PUSH
63702: LD_OWVAR 2
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 25
63713: PUSH
63714: LD_INT 1
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: PPUSH
63725: CALL_OW 69
63729: ST_TO_ADDR
// if not tmp then
63730: LD_VAR 0 3
63734: NOT
63735: IFFALSE 63739
// exit ;
63737: GO 63795
// un := tmp [ rand ( 1 , tmp ) ] ;
63739: LD_ADDR_VAR 0 2
63743: PUSH
63744: LD_VAR 0 3
63748: PUSH
63749: LD_INT 1
63751: PPUSH
63752: LD_VAR 0 3
63756: PPUSH
63757: CALL_OW 12
63761: ARRAY
63762: ST_TO_ADDR
// if Crawls ( un ) then
63763: LD_VAR 0 2
63767: PPUSH
63768: CALL_OW 318
63772: IFFALSE 63783
// ComWalk ( un ) ;
63774: LD_VAR 0 2
63778: PPUSH
63779: CALL_OW 138
// SetClass ( un , class_mortar ) ;
63783: LD_VAR 0 2
63787: PPUSH
63788: LD_INT 8
63790: PPUSH
63791: CALL_OW 336
// end ;
63795: PPOPN 3
63797: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
63798: LD_EXP 44
63802: PUSH
63803: LD_EXP 88
63807: AND
63808: IFFALSE 63952
63810: GO 63812
63812: DISABLE
63813: LD_INT 0
63815: PPUSH
63816: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
63817: LD_ADDR_VAR 0 2
63821: PUSH
63822: LD_INT 22
63824: PUSH
63825: LD_OWVAR 2
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 21
63836: PUSH
63837: LD_INT 2
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: LD_INT 2
63846: PUSH
63847: LD_INT 34
63849: PUSH
63850: LD_INT 12
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: LD_INT 34
63859: PUSH
63860: LD_INT 51
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: LD_INT 34
63869: PUSH
63870: LD_INT 32
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: LIST
63887: PPUSH
63888: CALL_OW 69
63892: ST_TO_ADDR
// if not tmp then
63893: LD_VAR 0 2
63897: NOT
63898: IFFALSE 63902
// exit ;
63900: GO 63952
// for i in tmp do
63902: LD_ADDR_VAR 0 1
63906: PUSH
63907: LD_VAR 0 2
63911: PUSH
63912: FOR_IN
63913: IFFALSE 63950
// if GetCargo ( i , mat_artifact ) = 0 then
63915: LD_VAR 0 1
63919: PPUSH
63920: LD_INT 4
63922: PPUSH
63923: CALL_OW 289
63927: PUSH
63928: LD_INT 0
63930: EQUAL
63931: IFFALSE 63948
// SetCargo ( i , mat_siberit , 100 ) ;
63933: LD_VAR 0 1
63937: PPUSH
63938: LD_INT 3
63940: PPUSH
63941: LD_INT 100
63943: PPUSH
63944: CALL_OW 290
63948: GO 63912
63950: POP
63951: POP
// end ;
63952: PPOPN 2
63954: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
63955: LD_EXP 44
63959: PUSH
63960: LD_EXP 89
63964: AND
63965: IFFALSE 64148
63967: GO 63969
63969: DISABLE
63970: LD_INT 0
63972: PPUSH
63973: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
63974: LD_ADDR_VAR 0 2
63978: PUSH
63979: LD_INT 22
63981: PUSH
63982: LD_OWVAR 2
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: PPUSH
63991: CALL_OW 69
63995: ST_TO_ADDR
// if not tmp then
63996: LD_VAR 0 2
64000: NOT
64001: IFFALSE 64005
// exit ;
64003: GO 64148
// for i := 1 to 2 do
64005: LD_ADDR_VAR 0 1
64009: PUSH
64010: DOUBLE
64011: LD_INT 1
64013: DEC
64014: ST_TO_ADDR
64015: LD_INT 2
64017: PUSH
64018: FOR_TO
64019: IFFALSE 64146
// begin uc_side := your_side ;
64021: LD_ADDR_OWVAR 20
64025: PUSH
64026: LD_OWVAR 2
64030: ST_TO_ADDR
// uc_nation := nation_american ;
64031: LD_ADDR_OWVAR 21
64035: PUSH
64036: LD_INT 1
64038: ST_TO_ADDR
// vc_chassis := us_morphling ;
64039: LD_ADDR_OWVAR 37
64043: PUSH
64044: LD_INT 5
64046: ST_TO_ADDR
// vc_engine := engine_siberite ;
64047: LD_ADDR_OWVAR 39
64051: PUSH
64052: LD_INT 3
64054: ST_TO_ADDR
// vc_control := control_computer ;
64055: LD_ADDR_OWVAR 38
64059: PUSH
64060: LD_INT 3
64062: ST_TO_ADDR
// vc_weapon := us_double_laser ;
64063: LD_ADDR_OWVAR 40
64067: PUSH
64068: LD_INT 10
64070: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
64071: LD_VAR 0 2
64075: PUSH
64076: LD_INT 1
64078: ARRAY
64079: PPUSH
64080: CALL_OW 310
64084: NOT
64085: IFFALSE 64132
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
64087: CALL_OW 45
64091: PPUSH
64092: LD_VAR 0 2
64096: PUSH
64097: LD_INT 1
64099: ARRAY
64100: PPUSH
64101: CALL_OW 250
64105: PPUSH
64106: LD_VAR 0 2
64110: PUSH
64111: LD_INT 1
64113: ARRAY
64114: PPUSH
64115: CALL_OW 251
64119: PPUSH
64120: LD_INT 12
64122: PPUSH
64123: LD_INT 1
64125: PPUSH
64126: CALL_OW 50
64130: GO 64144
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
64132: CALL_OW 45
64136: PPUSH
64137: LD_INT 1
64139: PPUSH
64140: CALL_OW 51
// end ;
64144: GO 64018
64146: POP
64147: POP
// end ;
64148: PPOPN 2
64150: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
64151: LD_EXP 44
64155: PUSH
64156: LD_EXP 90
64160: AND
64161: IFFALSE 64383
64163: GO 64165
64165: DISABLE
64166: LD_INT 0
64168: PPUSH
64169: PPUSH
64170: PPUSH
64171: PPUSH
64172: PPUSH
64173: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
64174: LD_ADDR_VAR 0 6
64178: PUSH
64179: LD_INT 22
64181: PUSH
64182: LD_OWVAR 2
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: PUSH
64191: LD_INT 21
64193: PUSH
64194: LD_INT 1
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 3
64203: PUSH
64204: LD_INT 23
64206: PUSH
64207: LD_INT 0
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: LIST
64222: PPUSH
64223: CALL_OW 69
64227: ST_TO_ADDR
// if not tmp then
64228: LD_VAR 0 6
64232: NOT
64233: IFFALSE 64237
// exit ;
64235: GO 64383
// s1 := rand ( 1 , 4 ) ;
64237: LD_ADDR_VAR 0 2
64241: PUSH
64242: LD_INT 1
64244: PPUSH
64245: LD_INT 4
64247: PPUSH
64248: CALL_OW 12
64252: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
64253: LD_ADDR_VAR 0 4
64257: PUSH
64258: LD_VAR 0 6
64262: PUSH
64263: LD_INT 1
64265: ARRAY
64266: PPUSH
64267: LD_VAR 0 2
64271: PPUSH
64272: CALL_OW 259
64276: ST_TO_ADDR
// if s1 = 1 then
64277: LD_VAR 0 2
64281: PUSH
64282: LD_INT 1
64284: EQUAL
64285: IFFALSE 64305
// s2 := rand ( 2 , 4 ) else
64287: LD_ADDR_VAR 0 3
64291: PUSH
64292: LD_INT 2
64294: PPUSH
64295: LD_INT 4
64297: PPUSH
64298: CALL_OW 12
64302: ST_TO_ADDR
64303: GO 64313
// s2 := 1 ;
64305: LD_ADDR_VAR 0 3
64309: PUSH
64310: LD_INT 1
64312: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
64313: LD_ADDR_VAR 0 5
64317: PUSH
64318: LD_VAR 0 6
64322: PUSH
64323: LD_INT 1
64325: ARRAY
64326: PPUSH
64327: LD_VAR 0 3
64331: PPUSH
64332: CALL_OW 259
64336: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
64337: LD_VAR 0 6
64341: PUSH
64342: LD_INT 1
64344: ARRAY
64345: PPUSH
64346: LD_VAR 0 2
64350: PPUSH
64351: LD_VAR 0 5
64355: PPUSH
64356: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
64360: LD_VAR 0 6
64364: PUSH
64365: LD_INT 1
64367: ARRAY
64368: PPUSH
64369: LD_VAR 0 3
64373: PPUSH
64374: LD_VAR 0 4
64378: PPUSH
64379: CALL_OW 237
// end ;
64383: PPOPN 6
64385: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
64386: LD_EXP 44
64390: PUSH
64391: LD_EXP 91
64395: AND
64396: IFFALSE 64475
64398: GO 64400
64400: DISABLE
64401: LD_INT 0
64403: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
64404: LD_ADDR_VAR 0 1
64408: PUSH
64409: LD_INT 22
64411: PUSH
64412: LD_OWVAR 2
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: PUSH
64421: LD_INT 30
64423: PUSH
64424: LD_INT 3
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PPUSH
64435: CALL_OW 69
64439: ST_TO_ADDR
// if not tmp then
64440: LD_VAR 0 1
64444: NOT
64445: IFFALSE 64449
// exit ;
64447: GO 64475
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
64449: LD_VAR 0 1
64453: PUSH
64454: LD_INT 1
64456: PPUSH
64457: LD_VAR 0 1
64461: PPUSH
64462: CALL_OW 12
64466: ARRAY
64467: PPUSH
64468: LD_INT 1
64470: PPUSH
64471: CALL_OW 234
// end ;
64475: PPOPN 1
64477: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
64478: LD_EXP 44
64482: PUSH
64483: LD_EXP 92
64487: AND
64488: IFFALSE 64600
64490: GO 64492
64492: DISABLE
64493: LD_INT 0
64495: PPUSH
64496: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
64497: LD_ADDR_VAR 0 2
64501: PUSH
64502: LD_INT 22
64504: PUSH
64505: LD_OWVAR 2
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: LD_INT 2
64516: PUSH
64517: LD_INT 30
64519: PUSH
64520: LD_INT 27
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: PUSH
64527: LD_INT 30
64529: PUSH
64530: LD_INT 26
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PUSH
64537: LD_INT 30
64539: PUSH
64540: LD_INT 28
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PPUSH
64557: CALL_OW 69
64561: ST_TO_ADDR
// if not tmp then
64562: LD_VAR 0 2
64566: NOT
64567: IFFALSE 64571
// exit ;
64569: GO 64600
// for i in tmp do
64571: LD_ADDR_VAR 0 1
64575: PUSH
64576: LD_VAR 0 2
64580: PUSH
64581: FOR_IN
64582: IFFALSE 64598
// SetLives ( i , 1 ) ;
64584: LD_VAR 0 1
64588: PPUSH
64589: LD_INT 1
64591: PPUSH
64592: CALL_OW 234
64596: GO 64581
64598: POP
64599: POP
// end ;
64600: PPOPN 2
64602: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
64603: LD_EXP 44
64607: PUSH
64608: LD_EXP 93
64612: AND
64613: IFFALSE 64900
64615: GO 64617
64617: DISABLE
64618: LD_INT 0
64620: PPUSH
64621: PPUSH
64622: PPUSH
// begin i := rand ( 1 , 7 ) ;
64623: LD_ADDR_VAR 0 1
64627: PUSH
64628: LD_INT 1
64630: PPUSH
64631: LD_INT 7
64633: PPUSH
64634: CALL_OW 12
64638: ST_TO_ADDR
// case i of 1 :
64639: LD_VAR 0 1
64643: PUSH
64644: LD_INT 1
64646: DOUBLE
64647: EQUAL
64648: IFTRUE 64652
64650: GO 64662
64652: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
64653: LD_STRING earthquake(getX(game), 0, 32)
64655: PPUSH
64656: CALL_OW 559
64660: GO 64900
64662: LD_INT 2
64664: DOUBLE
64665: EQUAL
64666: IFTRUE 64670
64668: GO 64684
64670: POP
// begin ToLua ( displayStucuk(); ) ;
64671: LD_STRING displayStucuk();
64673: PPUSH
64674: CALL_OW 559
// ResetFog ;
64678: CALL_OW 335
// end ; 3 :
64682: GO 64900
64684: LD_INT 3
64686: DOUBLE
64687: EQUAL
64688: IFTRUE 64692
64690: GO 64796
64692: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
64693: LD_ADDR_VAR 0 2
64697: PUSH
64698: LD_INT 22
64700: PUSH
64701: LD_OWVAR 2
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 25
64712: PUSH
64713: LD_INT 1
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: PPUSH
64724: CALL_OW 69
64728: ST_TO_ADDR
// if not tmp then
64729: LD_VAR 0 2
64733: NOT
64734: IFFALSE 64738
// exit ;
64736: GO 64900
// un := tmp [ rand ( 1 , tmp ) ] ;
64738: LD_ADDR_VAR 0 3
64742: PUSH
64743: LD_VAR 0 2
64747: PUSH
64748: LD_INT 1
64750: PPUSH
64751: LD_VAR 0 2
64755: PPUSH
64756: CALL_OW 12
64760: ARRAY
64761: ST_TO_ADDR
// if Crawls ( un ) then
64762: LD_VAR 0 3
64766: PPUSH
64767: CALL_OW 318
64771: IFFALSE 64782
// ComWalk ( un ) ;
64773: LD_VAR 0 3
64777: PPUSH
64778: CALL_OW 138
// SetClass ( un , class_mortar ) ;
64782: LD_VAR 0 3
64786: PPUSH
64787: LD_INT 8
64789: PPUSH
64790: CALL_OW 336
// end ; 4 :
64794: GO 64900
64796: LD_INT 4
64798: DOUBLE
64799: EQUAL
64800: IFTRUE 64804
64802: GO 64878
64804: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
64805: LD_ADDR_VAR 0 2
64809: PUSH
64810: LD_INT 22
64812: PUSH
64813: LD_OWVAR 2
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: PUSH
64822: LD_INT 30
64824: PUSH
64825: LD_INT 29
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PPUSH
64836: CALL_OW 69
64840: ST_TO_ADDR
// if not tmp then
64841: LD_VAR 0 2
64845: NOT
64846: IFFALSE 64850
// exit ;
64848: GO 64900
// CenterNowOnUnits ( tmp [ 1 ] ) ;
64850: LD_VAR 0 2
64854: PUSH
64855: LD_INT 1
64857: ARRAY
64858: PPUSH
64859: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
64863: LD_VAR 0 2
64867: PUSH
64868: LD_INT 1
64870: ARRAY
64871: PPUSH
64872: CALL_OW 65
// end ; 5 .. 7 :
64876: GO 64900
64878: LD_INT 5
64880: DOUBLE
64881: GREATEREQUAL
64882: IFFALSE 64890
64884: LD_INT 7
64886: DOUBLE
64887: LESSEQUAL
64888: IFTRUE 64892
64890: GO 64899
64892: POP
// StreamSibBomb ; end ;
64893: CALL 61137 0 0
64897: GO 64900
64899: POP
// end ;
64900: PPOPN 3
64902: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
64903: LD_EXP 44
64907: PUSH
64908: LD_EXP 94
64912: AND
64913: IFFALSE 65069
64915: GO 64917
64917: DISABLE
64918: LD_INT 0
64920: PPUSH
64921: PPUSH
64922: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
64923: LD_ADDR_VAR 0 2
64927: PUSH
64928: LD_INT 81
64930: PUSH
64931: LD_OWVAR 2
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: LD_INT 2
64942: PUSH
64943: LD_INT 21
64945: PUSH
64946: LD_INT 1
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: PUSH
64953: LD_INT 21
64955: PUSH
64956: LD_INT 2
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: LIST
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PPUSH
64972: CALL_OW 69
64976: ST_TO_ADDR
// if not tmp then
64977: LD_VAR 0 2
64981: NOT
64982: IFFALSE 64986
// exit ;
64984: GO 65069
// p := 0 ;
64986: LD_ADDR_VAR 0 3
64990: PUSH
64991: LD_INT 0
64993: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
64994: LD_INT 35
64996: PPUSH
64997: CALL_OW 67
// p := p + 1 ;
65001: LD_ADDR_VAR 0 3
65005: PUSH
65006: LD_VAR 0 3
65010: PUSH
65011: LD_INT 1
65013: PLUS
65014: ST_TO_ADDR
// for i in tmp do
65015: LD_ADDR_VAR 0 1
65019: PUSH
65020: LD_VAR 0 2
65024: PUSH
65025: FOR_IN
65026: IFFALSE 65057
// if GetLives ( i ) < 1000 then
65028: LD_VAR 0 1
65032: PPUSH
65033: CALL_OW 256
65037: PUSH
65038: LD_INT 1000
65040: LESS
65041: IFFALSE 65055
// SetLives ( i , 1000 ) ;
65043: LD_VAR 0 1
65047: PPUSH
65048: LD_INT 1000
65050: PPUSH
65051: CALL_OW 234
65055: GO 65025
65057: POP
65058: POP
// until p > 20 ;
65059: LD_VAR 0 3
65063: PUSH
65064: LD_INT 20
65066: GREATER
65067: IFFALSE 64994
// end ;
65069: PPOPN 3
65071: END
// every 0 0$1 trigger StreamModeActive and sTime do
65072: LD_EXP 44
65076: PUSH
65077: LD_EXP 95
65081: AND
65082: IFFALSE 65117
65084: GO 65086
65086: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
65087: LD_INT 28
65089: PPUSH
65090: LD_OWVAR 2
65094: PPUSH
65095: LD_INT 2
65097: PPUSH
65098: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
65102: LD_INT 30
65104: PPUSH
65105: LD_OWVAR 2
65109: PPUSH
65110: LD_INT 2
65112: PPUSH
65113: CALL_OW 322
// end ;
65117: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
65118: LD_EXP 44
65122: PUSH
65123: LD_EXP 96
65127: AND
65128: IFFALSE 65249
65130: GO 65132
65132: DISABLE
65133: LD_INT 0
65135: PPUSH
65136: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
65137: LD_ADDR_VAR 0 2
65141: PUSH
65142: LD_INT 22
65144: PUSH
65145: LD_OWVAR 2
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: PUSH
65154: LD_INT 21
65156: PUSH
65157: LD_INT 1
65159: PUSH
65160: EMPTY
65161: LIST
65162: LIST
65163: PUSH
65164: LD_INT 3
65166: PUSH
65167: LD_INT 23
65169: PUSH
65170: LD_INT 0
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: LIST
65185: PPUSH
65186: CALL_OW 69
65190: ST_TO_ADDR
// if not tmp then
65191: LD_VAR 0 2
65195: NOT
65196: IFFALSE 65200
// exit ;
65198: GO 65249
// for i in tmp do
65200: LD_ADDR_VAR 0 1
65204: PUSH
65205: LD_VAR 0 2
65209: PUSH
65210: FOR_IN
65211: IFFALSE 65247
// begin if Crawls ( i ) then
65213: LD_VAR 0 1
65217: PPUSH
65218: CALL_OW 318
65222: IFFALSE 65233
// ComWalk ( i ) ;
65224: LD_VAR 0 1
65228: PPUSH
65229: CALL_OW 138
// SetClass ( i , 2 ) ;
65233: LD_VAR 0 1
65237: PPUSH
65238: LD_INT 2
65240: PPUSH
65241: CALL_OW 336
// end ;
65245: GO 65210
65247: POP
65248: POP
// end ;
65249: PPOPN 2
65251: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
65252: LD_EXP 44
65256: PUSH
65257: LD_EXP 97
65261: AND
65262: IFFALSE 65550
65264: GO 65266
65266: DISABLE
65267: LD_INT 0
65269: PPUSH
65270: PPUSH
65271: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
65272: LD_OWVAR 2
65276: PPUSH
65277: LD_INT 9
65279: PPUSH
65280: LD_INT 1
65282: PPUSH
65283: LD_INT 1
65285: PPUSH
65286: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
65290: LD_INT 9
65292: PPUSH
65293: LD_OWVAR 2
65297: PPUSH
65298: CALL_OW 343
// uc_side := 9 ;
65302: LD_ADDR_OWVAR 20
65306: PUSH
65307: LD_INT 9
65309: ST_TO_ADDR
// uc_nation := 2 ;
65310: LD_ADDR_OWVAR 21
65314: PUSH
65315: LD_INT 2
65317: ST_TO_ADDR
// hc_name := Dark Warrior ;
65318: LD_ADDR_OWVAR 26
65322: PUSH
65323: LD_STRING Dark Warrior
65325: ST_TO_ADDR
// hc_gallery :=  ;
65326: LD_ADDR_OWVAR 33
65330: PUSH
65331: LD_STRING 
65333: ST_TO_ADDR
// hc_noskilllimit := true ;
65334: LD_ADDR_OWVAR 76
65338: PUSH
65339: LD_INT 1
65341: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
65342: LD_ADDR_OWVAR 31
65346: PUSH
65347: LD_INT 30
65349: PUSH
65350: LD_INT 30
65352: PUSH
65353: LD_INT 30
65355: PUSH
65356: LD_INT 30
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: LIST
65363: LIST
65364: ST_TO_ADDR
// un := CreateHuman ;
65365: LD_ADDR_VAR 0 3
65369: PUSH
65370: CALL_OW 44
65374: ST_TO_ADDR
// hc_noskilllimit := false ;
65375: LD_ADDR_OWVAR 76
65379: PUSH
65380: LD_INT 0
65382: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
65383: LD_VAR 0 3
65387: PPUSH
65388: LD_INT 1
65390: PPUSH
65391: CALL_OW 51
// ToLua ( playRanger() ) ;
65395: LD_STRING playRanger()
65397: PPUSH
65398: CALL_OW 559
// p := 0 ;
65402: LD_ADDR_VAR 0 2
65406: PUSH
65407: LD_INT 0
65409: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
65410: LD_INT 35
65412: PPUSH
65413: CALL_OW 67
// p := p + 1 ;
65417: LD_ADDR_VAR 0 2
65421: PUSH
65422: LD_VAR 0 2
65426: PUSH
65427: LD_INT 1
65429: PLUS
65430: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
65431: LD_VAR 0 3
65435: PPUSH
65436: CALL_OW 256
65440: PUSH
65441: LD_INT 1000
65443: LESS
65444: IFFALSE 65458
// SetLives ( un , 1000 ) ;
65446: LD_VAR 0 3
65450: PPUSH
65451: LD_INT 1000
65453: PPUSH
65454: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
65458: LD_VAR 0 3
65462: PPUSH
65463: LD_INT 81
65465: PUSH
65466: LD_OWVAR 2
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: PUSH
65475: LD_INT 91
65477: PUSH
65478: LD_VAR 0 3
65482: PUSH
65483: LD_INT 30
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: LIST
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PPUSH
65495: CALL_OW 69
65499: PPUSH
65500: LD_VAR 0 3
65504: PPUSH
65505: CALL_OW 74
65509: PPUSH
65510: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
65514: LD_VAR 0 2
65518: PUSH
65519: LD_INT 80
65521: GREATER
65522: PUSH
65523: LD_VAR 0 3
65527: PPUSH
65528: CALL_OW 301
65532: OR
65533: IFFALSE 65410
// if un then
65535: LD_VAR 0 3
65539: IFFALSE 65550
// RemoveUnit ( un ) ;
65541: LD_VAR 0 3
65545: PPUSH
65546: CALL_OW 64
// end ;
65550: PPOPN 3
65552: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
65553: LD_EXP 98
65557: IFFALSE 65673
65559: GO 65561
65561: DISABLE
65562: LD_INT 0
65564: PPUSH
65565: PPUSH
65566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
65567: LD_ADDR_VAR 0 2
65571: PUSH
65572: LD_INT 81
65574: PUSH
65575: LD_OWVAR 2
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PUSH
65584: LD_INT 21
65586: PUSH
65587: LD_INT 1
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PPUSH
65598: CALL_OW 69
65602: ST_TO_ADDR
// ToLua ( playComputer() ) ;
65603: LD_STRING playComputer()
65605: PPUSH
65606: CALL_OW 559
// if not tmp then
65610: LD_VAR 0 2
65614: NOT
65615: IFFALSE 65619
// exit ;
65617: GO 65673
// for i in tmp do
65619: LD_ADDR_VAR 0 1
65623: PUSH
65624: LD_VAR 0 2
65628: PUSH
65629: FOR_IN
65630: IFFALSE 65671
// for j := 1 to 4 do
65632: LD_ADDR_VAR 0 3
65636: PUSH
65637: DOUBLE
65638: LD_INT 1
65640: DEC
65641: ST_TO_ADDR
65642: LD_INT 4
65644: PUSH
65645: FOR_TO
65646: IFFALSE 65667
// SetSkill ( i , j , 10 ) ;
65648: LD_VAR 0 1
65652: PPUSH
65653: LD_VAR 0 3
65657: PPUSH
65658: LD_INT 10
65660: PPUSH
65661: CALL_OW 237
65665: GO 65645
65667: POP
65668: POP
65669: GO 65629
65671: POP
65672: POP
// end ;
65673: PPOPN 3
65675: END
// every 0 0$1 trigger s30 do var i , tmp ;
65676: LD_EXP 99
65680: IFFALSE 65749
65682: GO 65684
65684: DISABLE
65685: LD_INT 0
65687: PPUSH
65688: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
65689: LD_ADDR_VAR 0 2
65693: PUSH
65694: LD_INT 22
65696: PUSH
65697: LD_OWVAR 2
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PPUSH
65706: CALL_OW 69
65710: ST_TO_ADDR
// if not tmp then
65711: LD_VAR 0 2
65715: NOT
65716: IFFALSE 65720
// exit ;
65718: GO 65749
// for i in tmp do
65720: LD_ADDR_VAR 0 1
65724: PUSH
65725: LD_VAR 0 2
65729: PUSH
65730: FOR_IN
65731: IFFALSE 65747
// SetLives ( i , 300 ) ;
65733: LD_VAR 0 1
65737: PPUSH
65738: LD_INT 300
65740: PPUSH
65741: CALL_OW 234
65745: GO 65730
65747: POP
65748: POP
// end ;
65749: PPOPN 2
65751: END
// every 0 0$1 trigger s60 do var i , tmp ;
65752: LD_EXP 100
65756: IFFALSE 65825
65758: GO 65760
65760: DISABLE
65761: LD_INT 0
65763: PPUSH
65764: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
65765: LD_ADDR_VAR 0 2
65769: PUSH
65770: LD_INT 22
65772: PUSH
65773: LD_OWVAR 2
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PPUSH
65782: CALL_OW 69
65786: ST_TO_ADDR
// if not tmp then
65787: LD_VAR 0 2
65791: NOT
65792: IFFALSE 65796
// exit ;
65794: GO 65825
// for i in tmp do
65796: LD_ADDR_VAR 0 1
65800: PUSH
65801: LD_VAR 0 2
65805: PUSH
65806: FOR_IN
65807: IFFALSE 65823
// SetLives ( i , 600 ) ;
65809: LD_VAR 0 1
65813: PPUSH
65814: LD_INT 600
65816: PPUSH
65817: CALL_OW 234
65821: GO 65806
65823: POP
65824: POP
// end ;
65825: PPOPN 2
65827: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
65828: LD_INT 0
65830: PPUSH
// case cmd of 301 :
65831: LD_VAR 0 1
65835: PUSH
65836: LD_INT 301
65838: DOUBLE
65839: EQUAL
65840: IFTRUE 65844
65842: GO 65876
65844: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
65845: LD_VAR 0 6
65849: PPUSH
65850: LD_VAR 0 7
65854: PPUSH
65855: LD_VAR 0 8
65859: PPUSH
65860: LD_VAR 0 4
65864: PPUSH
65865: LD_VAR 0 5
65869: PPUSH
65870: CALL 67085 0 5
65874: GO 65997
65876: LD_INT 302
65878: DOUBLE
65879: EQUAL
65880: IFTRUE 65884
65882: GO 65921
65884: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
65885: LD_VAR 0 6
65889: PPUSH
65890: LD_VAR 0 7
65894: PPUSH
65895: LD_VAR 0 8
65899: PPUSH
65900: LD_VAR 0 9
65904: PPUSH
65905: LD_VAR 0 4
65909: PPUSH
65910: LD_VAR 0 5
65914: PPUSH
65915: CALL 67176 0 6
65919: GO 65997
65921: LD_INT 303
65923: DOUBLE
65924: EQUAL
65925: IFTRUE 65929
65927: GO 65966
65929: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
65930: LD_VAR 0 6
65934: PPUSH
65935: LD_VAR 0 7
65939: PPUSH
65940: LD_VAR 0 8
65944: PPUSH
65945: LD_VAR 0 9
65949: PPUSH
65950: LD_VAR 0 4
65954: PPUSH
65955: LD_VAR 0 5
65959: PPUSH
65960: CALL 66002 0 6
65964: GO 65997
65966: LD_INT 304
65968: DOUBLE
65969: EQUAL
65970: IFTRUE 65974
65972: GO 65996
65974: POP
// hHackTeleport ( unit , x , y ) ; end ;
65975: LD_VAR 0 2
65979: PPUSH
65980: LD_VAR 0 4
65984: PPUSH
65985: LD_VAR 0 5
65989: PPUSH
65990: CALL 67769 0 3
65994: GO 65997
65996: POP
// end ;
65997: LD_VAR 0 12
66001: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
66002: LD_INT 0
66004: PPUSH
66005: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
66006: LD_VAR 0 1
66010: PUSH
66011: LD_INT 1
66013: LESS
66014: PUSH
66015: LD_VAR 0 1
66019: PUSH
66020: LD_INT 3
66022: GREATER
66023: OR
66024: PUSH
66025: LD_VAR 0 5
66029: PPUSH
66030: LD_VAR 0 6
66034: PPUSH
66035: CALL_OW 428
66039: OR
66040: IFFALSE 66044
// exit ;
66042: GO 66772
// uc_side := your_side ;
66044: LD_ADDR_OWVAR 20
66048: PUSH
66049: LD_OWVAR 2
66053: ST_TO_ADDR
// uc_nation := nation ;
66054: LD_ADDR_OWVAR 21
66058: PUSH
66059: LD_VAR 0 1
66063: ST_TO_ADDR
// bc_level = 1 ;
66064: LD_ADDR_OWVAR 43
66068: PUSH
66069: LD_INT 1
66071: ST_TO_ADDR
// case btype of 1 :
66072: LD_VAR 0 2
66076: PUSH
66077: LD_INT 1
66079: DOUBLE
66080: EQUAL
66081: IFTRUE 66085
66083: GO 66096
66085: POP
// bc_type := b_depot ; 2 :
66086: LD_ADDR_OWVAR 42
66090: PUSH
66091: LD_INT 0
66093: ST_TO_ADDR
66094: GO 66716
66096: LD_INT 2
66098: DOUBLE
66099: EQUAL
66100: IFTRUE 66104
66102: GO 66115
66104: POP
// bc_type := b_warehouse ; 3 :
66105: LD_ADDR_OWVAR 42
66109: PUSH
66110: LD_INT 1
66112: ST_TO_ADDR
66113: GO 66716
66115: LD_INT 3
66117: DOUBLE
66118: EQUAL
66119: IFTRUE 66123
66121: GO 66134
66123: POP
// bc_type := b_lab ; 4 .. 9 :
66124: LD_ADDR_OWVAR 42
66128: PUSH
66129: LD_INT 6
66131: ST_TO_ADDR
66132: GO 66716
66134: LD_INT 4
66136: DOUBLE
66137: GREATEREQUAL
66138: IFFALSE 66146
66140: LD_INT 9
66142: DOUBLE
66143: LESSEQUAL
66144: IFTRUE 66148
66146: GO 66208
66148: POP
// begin bc_type := b_lab_half ;
66149: LD_ADDR_OWVAR 42
66153: PUSH
66154: LD_INT 7
66156: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
66157: LD_ADDR_OWVAR 44
66161: PUSH
66162: LD_INT 10
66164: PUSH
66165: LD_INT 11
66167: PUSH
66168: LD_INT 12
66170: PUSH
66171: LD_INT 15
66173: PUSH
66174: LD_INT 14
66176: PUSH
66177: LD_INT 13
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: LIST
66184: LIST
66185: LIST
66186: LIST
66187: PUSH
66188: LD_VAR 0 2
66192: PUSH
66193: LD_INT 3
66195: MINUS
66196: ARRAY
66197: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
66198: LD_ADDR_OWVAR 45
66202: PUSH
66203: LD_INT 9
66205: ST_TO_ADDR
// end ; 10 .. 13 :
66206: GO 66716
66208: LD_INT 10
66210: DOUBLE
66211: GREATEREQUAL
66212: IFFALSE 66220
66214: LD_INT 13
66216: DOUBLE
66217: LESSEQUAL
66218: IFTRUE 66222
66220: GO 66299
66222: POP
// begin bc_type := b_lab_full ;
66223: LD_ADDR_OWVAR 42
66227: PUSH
66228: LD_INT 8
66230: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
66231: LD_ADDR_OWVAR 44
66235: PUSH
66236: LD_INT 10
66238: PUSH
66239: LD_INT 12
66241: PUSH
66242: LD_INT 14
66244: PUSH
66245: LD_INT 13
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: LIST
66252: LIST
66253: PUSH
66254: LD_VAR 0 2
66258: PUSH
66259: LD_INT 9
66261: MINUS
66262: ARRAY
66263: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
66264: LD_ADDR_OWVAR 45
66268: PUSH
66269: LD_INT 11
66271: PUSH
66272: LD_INT 15
66274: PUSH
66275: LD_INT 12
66277: PUSH
66278: LD_INT 15
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: LIST
66285: LIST
66286: PUSH
66287: LD_VAR 0 2
66291: PUSH
66292: LD_INT 9
66294: MINUS
66295: ARRAY
66296: ST_TO_ADDR
// end ; 14 :
66297: GO 66716
66299: LD_INT 14
66301: DOUBLE
66302: EQUAL
66303: IFTRUE 66307
66305: GO 66318
66307: POP
// bc_type := b_workshop ; 15 :
66308: LD_ADDR_OWVAR 42
66312: PUSH
66313: LD_INT 2
66315: ST_TO_ADDR
66316: GO 66716
66318: LD_INT 15
66320: DOUBLE
66321: EQUAL
66322: IFTRUE 66326
66324: GO 66337
66326: POP
// bc_type := b_factory ; 16 :
66327: LD_ADDR_OWVAR 42
66331: PUSH
66332: LD_INT 3
66334: ST_TO_ADDR
66335: GO 66716
66337: LD_INT 16
66339: DOUBLE
66340: EQUAL
66341: IFTRUE 66345
66343: GO 66356
66345: POP
// bc_type := b_ext_gun ; 17 :
66346: LD_ADDR_OWVAR 42
66350: PUSH
66351: LD_INT 17
66353: ST_TO_ADDR
66354: GO 66716
66356: LD_INT 17
66358: DOUBLE
66359: EQUAL
66360: IFTRUE 66364
66362: GO 66392
66364: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
66365: LD_ADDR_OWVAR 42
66369: PUSH
66370: LD_INT 19
66372: PUSH
66373: LD_INT 23
66375: PUSH
66376: LD_INT 19
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: LIST
66383: PUSH
66384: LD_VAR 0 1
66388: ARRAY
66389: ST_TO_ADDR
66390: GO 66716
66392: LD_INT 18
66394: DOUBLE
66395: EQUAL
66396: IFTRUE 66400
66398: GO 66411
66400: POP
// bc_type := b_ext_radar ; 19 :
66401: LD_ADDR_OWVAR 42
66405: PUSH
66406: LD_INT 20
66408: ST_TO_ADDR
66409: GO 66716
66411: LD_INT 19
66413: DOUBLE
66414: EQUAL
66415: IFTRUE 66419
66417: GO 66430
66419: POP
// bc_type := b_ext_radio ; 20 :
66420: LD_ADDR_OWVAR 42
66424: PUSH
66425: LD_INT 22
66427: ST_TO_ADDR
66428: GO 66716
66430: LD_INT 20
66432: DOUBLE
66433: EQUAL
66434: IFTRUE 66438
66436: GO 66449
66438: POP
// bc_type := b_ext_siberium ; 21 :
66439: LD_ADDR_OWVAR 42
66443: PUSH
66444: LD_INT 21
66446: ST_TO_ADDR
66447: GO 66716
66449: LD_INT 21
66451: DOUBLE
66452: EQUAL
66453: IFTRUE 66457
66455: GO 66468
66457: POP
// bc_type := b_ext_computer ; 22 :
66458: LD_ADDR_OWVAR 42
66462: PUSH
66463: LD_INT 24
66465: ST_TO_ADDR
66466: GO 66716
66468: LD_INT 22
66470: DOUBLE
66471: EQUAL
66472: IFTRUE 66476
66474: GO 66487
66476: POP
// bc_type := b_ext_track ; 23 :
66477: LD_ADDR_OWVAR 42
66481: PUSH
66482: LD_INT 16
66484: ST_TO_ADDR
66485: GO 66716
66487: LD_INT 23
66489: DOUBLE
66490: EQUAL
66491: IFTRUE 66495
66493: GO 66506
66495: POP
// bc_type := b_ext_laser ; 24 :
66496: LD_ADDR_OWVAR 42
66500: PUSH
66501: LD_INT 25
66503: ST_TO_ADDR
66504: GO 66716
66506: LD_INT 24
66508: DOUBLE
66509: EQUAL
66510: IFTRUE 66514
66512: GO 66525
66514: POP
// bc_type := b_control_tower ; 25 :
66515: LD_ADDR_OWVAR 42
66519: PUSH
66520: LD_INT 36
66522: ST_TO_ADDR
66523: GO 66716
66525: LD_INT 25
66527: DOUBLE
66528: EQUAL
66529: IFTRUE 66533
66531: GO 66544
66533: POP
// bc_type := b_breastwork ; 26 :
66534: LD_ADDR_OWVAR 42
66538: PUSH
66539: LD_INT 31
66541: ST_TO_ADDR
66542: GO 66716
66544: LD_INT 26
66546: DOUBLE
66547: EQUAL
66548: IFTRUE 66552
66550: GO 66563
66552: POP
// bc_type := b_bunker ; 27 :
66553: LD_ADDR_OWVAR 42
66557: PUSH
66558: LD_INT 32
66560: ST_TO_ADDR
66561: GO 66716
66563: LD_INT 27
66565: DOUBLE
66566: EQUAL
66567: IFTRUE 66571
66569: GO 66582
66571: POP
// bc_type := b_turret ; 28 :
66572: LD_ADDR_OWVAR 42
66576: PUSH
66577: LD_INT 33
66579: ST_TO_ADDR
66580: GO 66716
66582: LD_INT 28
66584: DOUBLE
66585: EQUAL
66586: IFTRUE 66590
66588: GO 66601
66590: POP
// bc_type := b_armoury ; 29 :
66591: LD_ADDR_OWVAR 42
66595: PUSH
66596: LD_INT 4
66598: ST_TO_ADDR
66599: GO 66716
66601: LD_INT 29
66603: DOUBLE
66604: EQUAL
66605: IFTRUE 66609
66607: GO 66620
66609: POP
// bc_type := b_barracks ; 30 :
66610: LD_ADDR_OWVAR 42
66614: PUSH
66615: LD_INT 5
66617: ST_TO_ADDR
66618: GO 66716
66620: LD_INT 30
66622: DOUBLE
66623: EQUAL
66624: IFTRUE 66628
66626: GO 66639
66628: POP
// bc_type := b_solar_power ; 31 :
66629: LD_ADDR_OWVAR 42
66633: PUSH
66634: LD_INT 27
66636: ST_TO_ADDR
66637: GO 66716
66639: LD_INT 31
66641: DOUBLE
66642: EQUAL
66643: IFTRUE 66647
66645: GO 66658
66647: POP
// bc_type := b_oil_power ; 32 :
66648: LD_ADDR_OWVAR 42
66652: PUSH
66653: LD_INT 26
66655: ST_TO_ADDR
66656: GO 66716
66658: LD_INT 32
66660: DOUBLE
66661: EQUAL
66662: IFTRUE 66666
66664: GO 66677
66666: POP
// bc_type := b_siberite_power ; 33 :
66667: LD_ADDR_OWVAR 42
66671: PUSH
66672: LD_INT 28
66674: ST_TO_ADDR
66675: GO 66716
66677: LD_INT 33
66679: DOUBLE
66680: EQUAL
66681: IFTRUE 66685
66683: GO 66696
66685: POP
// bc_type := b_oil_mine ; 34 :
66686: LD_ADDR_OWVAR 42
66690: PUSH
66691: LD_INT 29
66693: ST_TO_ADDR
66694: GO 66716
66696: LD_INT 34
66698: DOUBLE
66699: EQUAL
66700: IFTRUE 66704
66702: GO 66715
66704: POP
// bc_type := b_siberite_mine ; end ;
66705: LD_ADDR_OWVAR 42
66709: PUSH
66710: LD_INT 30
66712: ST_TO_ADDR
66713: GO 66716
66715: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
66716: LD_ADDR_VAR 0 8
66720: PUSH
66721: LD_VAR 0 5
66725: PPUSH
66726: LD_VAR 0 6
66730: PPUSH
66731: LD_VAR 0 3
66735: PPUSH
66736: CALL_OW 47
66740: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
66741: LD_OWVAR 42
66745: PUSH
66746: LD_INT 32
66748: PUSH
66749: LD_INT 33
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: IN
66756: IFFALSE 66772
// PlaceWeaponTurret ( b , weapon ) ;
66758: LD_VAR 0 8
66762: PPUSH
66763: LD_VAR 0 4
66767: PPUSH
66768: CALL_OW 431
// end ;
66772: LD_VAR 0 7
66776: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
66777: LD_INT 0
66779: PPUSH
66780: PPUSH
66781: PPUSH
66782: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66783: LD_ADDR_VAR 0 4
66787: PUSH
66788: LD_INT 22
66790: PUSH
66791: LD_OWVAR 2
66795: PUSH
66796: EMPTY
66797: LIST
66798: LIST
66799: PUSH
66800: LD_INT 2
66802: PUSH
66803: LD_INT 30
66805: PUSH
66806: LD_INT 0
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: LD_INT 30
66815: PUSH
66816: LD_INT 1
66818: PUSH
66819: EMPTY
66820: LIST
66821: LIST
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: LIST
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: PPUSH
66832: CALL_OW 69
66836: ST_TO_ADDR
// if not tmp then
66837: LD_VAR 0 4
66841: NOT
66842: IFFALSE 66846
// exit ;
66844: GO 66905
// for i in tmp do
66846: LD_ADDR_VAR 0 2
66850: PUSH
66851: LD_VAR 0 4
66855: PUSH
66856: FOR_IN
66857: IFFALSE 66903
// for j = 1 to 3 do
66859: LD_ADDR_VAR 0 3
66863: PUSH
66864: DOUBLE
66865: LD_INT 1
66867: DEC
66868: ST_TO_ADDR
66869: LD_INT 3
66871: PUSH
66872: FOR_TO
66873: IFFALSE 66899
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
66875: LD_VAR 0 2
66879: PPUSH
66880: CALL_OW 274
66884: PPUSH
66885: LD_VAR 0 3
66889: PPUSH
66890: LD_INT 99999
66892: PPUSH
66893: CALL_OW 277
66897: GO 66872
66899: POP
66900: POP
66901: GO 66856
66903: POP
66904: POP
// end ;
66905: LD_VAR 0 1
66909: RET
// export function hHackSetLevel10 ; var i , j ; begin
66910: LD_INT 0
66912: PPUSH
66913: PPUSH
66914: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
66915: LD_ADDR_VAR 0 2
66919: PUSH
66920: LD_INT 21
66922: PUSH
66923: LD_INT 1
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PPUSH
66930: CALL_OW 69
66934: PUSH
66935: FOR_IN
66936: IFFALSE 66988
// if IsSelected ( i ) then
66938: LD_VAR 0 2
66942: PPUSH
66943: CALL_OW 306
66947: IFFALSE 66986
// begin for j := 1 to 4 do
66949: LD_ADDR_VAR 0 3
66953: PUSH
66954: DOUBLE
66955: LD_INT 1
66957: DEC
66958: ST_TO_ADDR
66959: LD_INT 4
66961: PUSH
66962: FOR_TO
66963: IFFALSE 66984
// SetSkill ( i , j , 10 ) ;
66965: LD_VAR 0 2
66969: PPUSH
66970: LD_VAR 0 3
66974: PPUSH
66975: LD_INT 10
66977: PPUSH
66978: CALL_OW 237
66982: GO 66962
66984: POP
66985: POP
// end ;
66986: GO 66935
66988: POP
66989: POP
// end ;
66990: LD_VAR 0 1
66994: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
66995: LD_INT 0
66997: PPUSH
66998: PPUSH
66999: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
67000: LD_ADDR_VAR 0 2
67004: PUSH
67005: LD_INT 22
67007: PUSH
67008: LD_OWVAR 2
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: PUSH
67017: LD_INT 21
67019: PUSH
67020: LD_INT 1
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: PUSH
67027: EMPTY
67028: LIST
67029: LIST
67030: PPUSH
67031: CALL_OW 69
67035: PUSH
67036: FOR_IN
67037: IFFALSE 67078
// begin for j := 1 to 4 do
67039: LD_ADDR_VAR 0 3
67043: PUSH
67044: DOUBLE
67045: LD_INT 1
67047: DEC
67048: ST_TO_ADDR
67049: LD_INT 4
67051: PUSH
67052: FOR_TO
67053: IFFALSE 67074
// SetSkill ( i , j , 10 ) ;
67055: LD_VAR 0 2
67059: PPUSH
67060: LD_VAR 0 3
67064: PPUSH
67065: LD_INT 10
67067: PPUSH
67068: CALL_OW 237
67072: GO 67052
67074: POP
67075: POP
// end ;
67076: GO 67036
67078: POP
67079: POP
// end ;
67080: LD_VAR 0 1
67084: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
67085: LD_INT 0
67087: PPUSH
// uc_side := your_side ;
67088: LD_ADDR_OWVAR 20
67092: PUSH
67093: LD_OWVAR 2
67097: ST_TO_ADDR
// uc_nation := nation ;
67098: LD_ADDR_OWVAR 21
67102: PUSH
67103: LD_VAR 0 1
67107: ST_TO_ADDR
// InitHc ;
67108: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
67112: LD_INT 0
67114: PPUSH
67115: LD_VAR 0 2
67119: PPUSH
67120: LD_VAR 0 3
67124: PPUSH
67125: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
67129: LD_VAR 0 4
67133: PPUSH
67134: LD_VAR 0 5
67138: PPUSH
67139: CALL_OW 428
67143: PUSH
67144: LD_INT 0
67146: EQUAL
67147: IFFALSE 67171
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
67149: CALL_OW 44
67153: PPUSH
67154: LD_VAR 0 4
67158: PPUSH
67159: LD_VAR 0 5
67163: PPUSH
67164: LD_INT 1
67166: PPUSH
67167: CALL_OW 48
// end ;
67171: LD_VAR 0 6
67175: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
67176: LD_INT 0
67178: PPUSH
67179: PPUSH
// uc_side := your_side ;
67180: LD_ADDR_OWVAR 20
67184: PUSH
67185: LD_OWVAR 2
67189: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
67190: LD_VAR 0 1
67194: PUSH
67195: LD_INT 1
67197: PUSH
67198: LD_INT 2
67200: PUSH
67201: LD_INT 3
67203: PUSH
67204: LD_INT 4
67206: PUSH
67207: LD_INT 5
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: LIST
67214: LIST
67215: LIST
67216: IN
67217: IFFALSE 67229
// uc_nation := nation_american else
67219: LD_ADDR_OWVAR 21
67223: PUSH
67224: LD_INT 1
67226: ST_TO_ADDR
67227: GO 67272
// if chassis in [ 11 , 12 , 13 , 14 ] then
67229: LD_VAR 0 1
67233: PUSH
67234: LD_INT 11
67236: PUSH
67237: LD_INT 12
67239: PUSH
67240: LD_INT 13
67242: PUSH
67243: LD_INT 14
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: LIST
67250: LIST
67251: IN
67252: IFFALSE 67264
// uc_nation := nation_arabian else
67254: LD_ADDR_OWVAR 21
67258: PUSH
67259: LD_INT 2
67261: ST_TO_ADDR
67262: GO 67272
// uc_nation := nation_russian ;
67264: LD_ADDR_OWVAR 21
67268: PUSH
67269: LD_INT 3
67271: ST_TO_ADDR
// vc_chassis := chassis ;
67272: LD_ADDR_OWVAR 37
67276: PUSH
67277: LD_VAR 0 1
67281: ST_TO_ADDR
// vc_engine := engine ;
67282: LD_ADDR_OWVAR 39
67286: PUSH
67287: LD_VAR 0 2
67291: ST_TO_ADDR
// vc_control := control ;
67292: LD_ADDR_OWVAR 38
67296: PUSH
67297: LD_VAR 0 3
67301: ST_TO_ADDR
// vc_weapon := weapon ;
67302: LD_ADDR_OWVAR 40
67306: PUSH
67307: LD_VAR 0 4
67311: ST_TO_ADDR
// un := CreateVehicle ;
67312: LD_ADDR_VAR 0 8
67316: PUSH
67317: CALL_OW 45
67321: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
67322: LD_VAR 0 8
67326: PPUSH
67327: LD_INT 0
67329: PPUSH
67330: LD_INT 5
67332: PPUSH
67333: CALL_OW 12
67337: PPUSH
67338: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
67342: LD_VAR 0 8
67346: PPUSH
67347: LD_VAR 0 5
67351: PPUSH
67352: LD_VAR 0 6
67356: PPUSH
67357: LD_INT 1
67359: PPUSH
67360: CALL_OW 48
// end ;
67364: LD_VAR 0 7
67368: RET
// export hInvincible ; every 1 do
67369: GO 67371
67371: DISABLE
// hInvincible := [ ] ;
67372: LD_ADDR_EXP 101
67376: PUSH
67377: EMPTY
67378: ST_TO_ADDR
67379: END
// every 10 do var i ;
67380: GO 67382
67382: DISABLE
67383: LD_INT 0
67385: PPUSH
// begin enable ;
67386: ENABLE
// if not hInvincible then
67387: LD_EXP 101
67391: NOT
67392: IFFALSE 67396
// exit ;
67394: GO 67440
// for i in hInvincible do
67396: LD_ADDR_VAR 0 1
67400: PUSH
67401: LD_EXP 101
67405: PUSH
67406: FOR_IN
67407: IFFALSE 67438
// if GetLives ( i ) < 1000 then
67409: LD_VAR 0 1
67413: PPUSH
67414: CALL_OW 256
67418: PUSH
67419: LD_INT 1000
67421: LESS
67422: IFFALSE 67436
// SetLives ( i , 1000 ) ;
67424: LD_VAR 0 1
67428: PPUSH
67429: LD_INT 1000
67431: PPUSH
67432: CALL_OW 234
67436: GO 67406
67438: POP
67439: POP
// end ;
67440: PPOPN 1
67442: END
// export function hHackInvincible ; var i ; begin
67443: LD_INT 0
67445: PPUSH
67446: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
67447: LD_ADDR_VAR 0 2
67451: PUSH
67452: LD_INT 2
67454: PUSH
67455: LD_INT 21
67457: PUSH
67458: LD_INT 1
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: PUSH
67465: LD_INT 21
67467: PUSH
67468: LD_INT 2
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: LIST
67479: PPUSH
67480: CALL_OW 69
67484: PUSH
67485: FOR_IN
67486: IFFALSE 67547
// if IsSelected ( i ) then
67488: LD_VAR 0 2
67492: PPUSH
67493: CALL_OW 306
67497: IFFALSE 67545
// begin if i in hInvincible then
67499: LD_VAR 0 2
67503: PUSH
67504: LD_EXP 101
67508: IN
67509: IFFALSE 67529
// hInvincible := hInvincible diff i else
67511: LD_ADDR_EXP 101
67515: PUSH
67516: LD_EXP 101
67520: PUSH
67521: LD_VAR 0 2
67525: DIFF
67526: ST_TO_ADDR
67527: GO 67545
// hInvincible := hInvincible union i ;
67529: LD_ADDR_EXP 101
67533: PUSH
67534: LD_EXP 101
67538: PUSH
67539: LD_VAR 0 2
67543: UNION
67544: ST_TO_ADDR
// end ;
67545: GO 67485
67547: POP
67548: POP
// end ;
67549: LD_VAR 0 1
67553: RET
// export function hHackInvisible ; var i , j ; begin
67554: LD_INT 0
67556: PPUSH
67557: PPUSH
67558: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
67559: LD_ADDR_VAR 0 2
67563: PUSH
67564: LD_INT 21
67566: PUSH
67567: LD_INT 1
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: PPUSH
67574: CALL_OW 69
67578: PUSH
67579: FOR_IN
67580: IFFALSE 67604
// if IsSelected ( i ) then
67582: LD_VAR 0 2
67586: PPUSH
67587: CALL_OW 306
67591: IFFALSE 67602
// ComForceInvisible ( i ) ;
67593: LD_VAR 0 2
67597: PPUSH
67598: CALL_OW 496
67602: GO 67579
67604: POP
67605: POP
// end ;
67606: LD_VAR 0 1
67610: RET
// export function hHackChangeYourSide ; begin
67611: LD_INT 0
67613: PPUSH
// if your_side = 8 then
67614: LD_OWVAR 2
67618: PUSH
67619: LD_INT 8
67621: EQUAL
67622: IFFALSE 67634
// your_side := 0 else
67624: LD_ADDR_OWVAR 2
67628: PUSH
67629: LD_INT 0
67631: ST_TO_ADDR
67632: GO 67648
// your_side := your_side + 1 ;
67634: LD_ADDR_OWVAR 2
67638: PUSH
67639: LD_OWVAR 2
67643: PUSH
67644: LD_INT 1
67646: PLUS
67647: ST_TO_ADDR
// end ;
67648: LD_VAR 0 1
67652: RET
// export function hHackChangeUnitSide ; var i , j ; begin
67653: LD_INT 0
67655: PPUSH
67656: PPUSH
67657: PPUSH
// for i in all_units do
67658: LD_ADDR_VAR 0 2
67662: PUSH
67663: LD_OWVAR 3
67667: PUSH
67668: FOR_IN
67669: IFFALSE 67747
// if IsSelected ( i ) then
67671: LD_VAR 0 2
67675: PPUSH
67676: CALL_OW 306
67680: IFFALSE 67745
// begin j := GetSide ( i ) ;
67682: LD_ADDR_VAR 0 3
67686: PUSH
67687: LD_VAR 0 2
67691: PPUSH
67692: CALL_OW 255
67696: ST_TO_ADDR
// if j = 8 then
67697: LD_VAR 0 3
67701: PUSH
67702: LD_INT 8
67704: EQUAL
67705: IFFALSE 67717
// j := 0 else
67707: LD_ADDR_VAR 0 3
67711: PUSH
67712: LD_INT 0
67714: ST_TO_ADDR
67715: GO 67731
// j := j + 1 ;
67717: LD_ADDR_VAR 0 3
67721: PUSH
67722: LD_VAR 0 3
67726: PUSH
67727: LD_INT 1
67729: PLUS
67730: ST_TO_ADDR
// SetSide ( i , j ) ;
67731: LD_VAR 0 2
67735: PPUSH
67736: LD_VAR 0 3
67740: PPUSH
67741: CALL_OW 235
// end ;
67745: GO 67668
67747: POP
67748: POP
// end ;
67749: LD_VAR 0 1
67753: RET
// export function hHackFog ; begin
67754: LD_INT 0
67756: PPUSH
// FogOff ( true ) ;
67757: LD_INT 1
67759: PPUSH
67760: CALL_OW 344
// end ;
67764: LD_VAR 0 1
67768: RET
// export function hHackTeleport ( unit , x , y ) ; begin
67769: LD_INT 0
67771: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
67772: LD_VAR 0 1
67776: PPUSH
67777: LD_VAR 0 2
67781: PPUSH
67782: LD_VAR 0 3
67786: PPUSH
67787: LD_INT 1
67789: PPUSH
67790: LD_INT 1
67792: PPUSH
67793: CALL_OW 483
// CenterOnXY ( x , y ) ;
67797: LD_VAR 0 2
67801: PPUSH
67802: LD_VAR 0 3
67806: PPUSH
67807: CALL_OW 84
// end ;
67811: LD_VAR 0 4
67815: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
67816: LD_INT 0
67818: PPUSH
67819: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
67820: LD_VAR 0 1
67824: NOT
67825: PUSH
67826: LD_VAR 0 2
67830: PPUSH
67831: LD_VAR 0 3
67835: PPUSH
67836: CALL_OW 488
67840: NOT
67841: OR
67842: PUSH
67843: LD_VAR 0 1
67847: PPUSH
67848: CALL_OW 266
67852: PUSH
67853: LD_INT 3
67855: NONEQUAL
67856: PUSH
67857: LD_VAR 0 1
67861: PPUSH
67862: CALL_OW 247
67866: PUSH
67867: LD_INT 1
67869: EQUAL
67870: NOT
67871: AND
67872: OR
67873: IFFALSE 67877
// exit ;
67875: GO 68026
// if GetType ( factory ) = unit_human then
67877: LD_VAR 0 1
67881: PPUSH
67882: CALL_OW 247
67886: PUSH
67887: LD_INT 1
67889: EQUAL
67890: IFFALSE 67907
// factory := IsInUnit ( factory ) ;
67892: LD_ADDR_VAR 0 1
67896: PUSH
67897: LD_VAR 0 1
67901: PPUSH
67902: CALL_OW 310
67906: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
67907: LD_VAR 0 1
67911: PPUSH
67912: CALL_OW 266
67916: PUSH
67917: LD_INT 3
67919: NONEQUAL
67920: IFFALSE 67924
// exit ;
67922: GO 68026
// if HexInfo ( x , y ) = factory then
67924: LD_VAR 0 2
67928: PPUSH
67929: LD_VAR 0 3
67933: PPUSH
67934: CALL_OW 428
67938: PUSH
67939: LD_VAR 0 1
67943: EQUAL
67944: IFFALSE 67971
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
67946: LD_ADDR_EXP 102
67950: PUSH
67951: LD_EXP 102
67955: PPUSH
67956: LD_VAR 0 1
67960: PPUSH
67961: LD_INT 0
67963: PPUSH
67964: CALL_OW 1
67968: ST_TO_ADDR
67969: GO 68022
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
67971: LD_ADDR_EXP 102
67975: PUSH
67976: LD_EXP 102
67980: PPUSH
67981: LD_VAR 0 1
67985: PPUSH
67986: LD_VAR 0 1
67990: PPUSH
67991: CALL_OW 255
67995: PUSH
67996: LD_VAR 0 1
68000: PUSH
68001: LD_VAR 0 2
68005: PUSH
68006: LD_VAR 0 3
68010: PUSH
68011: EMPTY
68012: LIST
68013: LIST
68014: LIST
68015: LIST
68016: PPUSH
68017: CALL_OW 1
68021: ST_TO_ADDR
// UpdateFactoryWaypoints ;
68022: CALL 68031 0 0
// end ;
68026: LD_VAR 0 4
68030: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
68031: LD_INT 0
68033: PPUSH
68034: PPUSH
68035: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
68036: LD_STRING resetFactoryWaypoint();
68038: PPUSH
68039: CALL_OW 559
// if factoryWaypoints then
68043: LD_EXP 102
68047: IFFALSE 68173
// begin list := PrepareArray ( factoryWaypoints ) ;
68049: LD_ADDR_VAR 0 3
68053: PUSH
68054: LD_EXP 102
68058: PPUSH
68059: CALL 44358 0 1
68063: ST_TO_ADDR
// for i := 1 to list do
68064: LD_ADDR_VAR 0 2
68068: PUSH
68069: DOUBLE
68070: LD_INT 1
68072: DEC
68073: ST_TO_ADDR
68074: LD_VAR 0 3
68078: PUSH
68079: FOR_TO
68080: IFFALSE 68171
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
68082: LD_STRING setFactoryWaypointXY(
68084: PUSH
68085: LD_VAR 0 3
68089: PUSH
68090: LD_VAR 0 2
68094: ARRAY
68095: PUSH
68096: LD_INT 1
68098: ARRAY
68099: STR
68100: PUSH
68101: LD_STRING ,
68103: STR
68104: PUSH
68105: LD_VAR 0 3
68109: PUSH
68110: LD_VAR 0 2
68114: ARRAY
68115: PUSH
68116: LD_INT 2
68118: ARRAY
68119: STR
68120: PUSH
68121: LD_STRING ,
68123: STR
68124: PUSH
68125: LD_VAR 0 3
68129: PUSH
68130: LD_VAR 0 2
68134: ARRAY
68135: PUSH
68136: LD_INT 3
68138: ARRAY
68139: STR
68140: PUSH
68141: LD_STRING ,
68143: STR
68144: PUSH
68145: LD_VAR 0 3
68149: PUSH
68150: LD_VAR 0 2
68154: ARRAY
68155: PUSH
68156: LD_INT 4
68158: ARRAY
68159: STR
68160: PUSH
68161: LD_STRING )
68163: STR
68164: PPUSH
68165: CALL_OW 559
68169: GO 68079
68171: POP
68172: POP
// end ; end ;
68173: LD_VAR 0 1
68177: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
68178: LD_INT 0
68180: PPUSH
// if HexInfo ( x , y ) = warehouse then
68181: LD_VAR 0 2
68185: PPUSH
68186: LD_VAR 0 3
68190: PPUSH
68191: CALL_OW 428
68195: PUSH
68196: LD_VAR 0 1
68200: EQUAL
68201: IFFALSE 68228
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
68203: LD_ADDR_EXP 103
68207: PUSH
68208: LD_EXP 103
68212: PPUSH
68213: LD_VAR 0 1
68217: PPUSH
68218: LD_INT 0
68220: PPUSH
68221: CALL_OW 1
68225: ST_TO_ADDR
68226: GO 68279
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
68228: LD_ADDR_EXP 103
68232: PUSH
68233: LD_EXP 103
68237: PPUSH
68238: LD_VAR 0 1
68242: PPUSH
68243: LD_VAR 0 1
68247: PPUSH
68248: CALL_OW 255
68252: PUSH
68253: LD_VAR 0 1
68257: PUSH
68258: LD_VAR 0 2
68262: PUSH
68263: LD_VAR 0 3
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: LIST
68272: LIST
68273: PPUSH
68274: CALL_OW 1
68278: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
68279: CALL 68288 0 0
// end ;
68283: LD_VAR 0 4
68287: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
68288: LD_INT 0
68290: PPUSH
68291: PPUSH
68292: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
68293: LD_STRING resetWarehouseGatheringPoints();
68295: PPUSH
68296: CALL_OW 559
// if warehouseGatheringPoints then
68300: LD_EXP 103
68304: IFFALSE 68430
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
68306: LD_ADDR_VAR 0 3
68310: PUSH
68311: LD_EXP 103
68315: PPUSH
68316: CALL 44358 0 1
68320: ST_TO_ADDR
// for i := 1 to list do
68321: LD_ADDR_VAR 0 2
68325: PUSH
68326: DOUBLE
68327: LD_INT 1
68329: DEC
68330: ST_TO_ADDR
68331: LD_VAR 0 3
68335: PUSH
68336: FOR_TO
68337: IFFALSE 68428
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
68339: LD_STRING setWarehouseGatheringPointXY(
68341: PUSH
68342: LD_VAR 0 3
68346: PUSH
68347: LD_VAR 0 2
68351: ARRAY
68352: PUSH
68353: LD_INT 1
68355: ARRAY
68356: STR
68357: PUSH
68358: LD_STRING ,
68360: STR
68361: PUSH
68362: LD_VAR 0 3
68366: PUSH
68367: LD_VAR 0 2
68371: ARRAY
68372: PUSH
68373: LD_INT 2
68375: ARRAY
68376: STR
68377: PUSH
68378: LD_STRING ,
68380: STR
68381: PUSH
68382: LD_VAR 0 3
68386: PUSH
68387: LD_VAR 0 2
68391: ARRAY
68392: PUSH
68393: LD_INT 3
68395: ARRAY
68396: STR
68397: PUSH
68398: LD_STRING ,
68400: STR
68401: PUSH
68402: LD_VAR 0 3
68406: PUSH
68407: LD_VAR 0 2
68411: ARRAY
68412: PUSH
68413: LD_INT 4
68415: ARRAY
68416: STR
68417: PUSH
68418: LD_STRING )
68420: STR
68421: PPUSH
68422: CALL_OW 559
68426: GO 68336
68428: POP
68429: POP
// end ; end ;
68430: LD_VAR 0 1
68434: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
68435: LD_EXP 103
68439: IFFALSE 69124
68441: GO 68443
68443: DISABLE
68444: LD_INT 0
68446: PPUSH
68447: PPUSH
68448: PPUSH
68449: PPUSH
68450: PPUSH
68451: PPUSH
68452: PPUSH
68453: PPUSH
68454: PPUSH
// begin enable ;
68455: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
68456: LD_ADDR_VAR 0 3
68460: PUSH
68461: LD_EXP 103
68465: PPUSH
68466: CALL 44358 0 1
68470: ST_TO_ADDR
// if not list then
68471: LD_VAR 0 3
68475: NOT
68476: IFFALSE 68480
// exit ;
68478: GO 69124
// for i := 1 to list do
68480: LD_ADDR_VAR 0 1
68484: PUSH
68485: DOUBLE
68486: LD_INT 1
68488: DEC
68489: ST_TO_ADDR
68490: LD_VAR 0 3
68494: PUSH
68495: FOR_TO
68496: IFFALSE 69122
// begin depot := list [ i ] [ 2 ] ;
68498: LD_ADDR_VAR 0 8
68502: PUSH
68503: LD_VAR 0 3
68507: PUSH
68508: LD_VAR 0 1
68512: ARRAY
68513: PUSH
68514: LD_INT 2
68516: ARRAY
68517: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
68518: LD_ADDR_VAR 0 5
68522: PUSH
68523: LD_VAR 0 3
68527: PUSH
68528: LD_VAR 0 1
68532: ARRAY
68533: PUSH
68534: LD_INT 1
68536: ARRAY
68537: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
68538: LD_VAR 0 8
68542: PPUSH
68543: CALL_OW 301
68547: PUSH
68548: LD_VAR 0 5
68552: PUSH
68553: LD_VAR 0 8
68557: PPUSH
68558: CALL_OW 255
68562: NONEQUAL
68563: OR
68564: IFFALSE 68593
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
68566: LD_ADDR_EXP 103
68570: PUSH
68571: LD_EXP 103
68575: PPUSH
68576: LD_VAR 0 8
68580: PPUSH
68581: LD_INT 0
68583: PPUSH
68584: CALL_OW 1
68588: ST_TO_ADDR
// exit ;
68589: POP
68590: POP
68591: GO 69124
// end ; x := list [ i ] [ 3 ] ;
68593: LD_ADDR_VAR 0 6
68597: PUSH
68598: LD_VAR 0 3
68602: PUSH
68603: LD_VAR 0 1
68607: ARRAY
68608: PUSH
68609: LD_INT 3
68611: ARRAY
68612: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
68613: LD_ADDR_VAR 0 7
68617: PUSH
68618: LD_VAR 0 3
68622: PUSH
68623: LD_VAR 0 1
68627: ARRAY
68628: PUSH
68629: LD_INT 4
68631: ARRAY
68632: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
68633: LD_ADDR_VAR 0 9
68637: PUSH
68638: LD_VAR 0 6
68642: PPUSH
68643: LD_VAR 0 7
68647: PPUSH
68648: LD_INT 16
68650: PPUSH
68651: CALL 42942 0 3
68655: ST_TO_ADDR
// if not cratesNearbyPoint then
68656: LD_VAR 0 9
68660: NOT
68661: IFFALSE 68667
// exit ;
68663: POP
68664: POP
68665: GO 69124
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
68667: LD_ADDR_VAR 0 4
68671: PUSH
68672: LD_INT 22
68674: PUSH
68675: LD_VAR 0 5
68679: PUSH
68680: EMPTY
68681: LIST
68682: LIST
68683: PUSH
68684: LD_INT 3
68686: PUSH
68687: LD_INT 60
68689: PUSH
68690: EMPTY
68691: LIST
68692: PUSH
68693: EMPTY
68694: LIST
68695: LIST
68696: PUSH
68697: LD_INT 91
68699: PUSH
68700: LD_VAR 0 8
68704: PUSH
68705: LD_INT 6
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: LIST
68712: PUSH
68713: LD_INT 2
68715: PUSH
68716: LD_INT 25
68718: PUSH
68719: LD_INT 2
68721: PUSH
68722: EMPTY
68723: LIST
68724: LIST
68725: PUSH
68726: LD_INT 25
68728: PUSH
68729: LD_INT 16
68731: PUSH
68732: EMPTY
68733: LIST
68734: LIST
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: LIST
68740: PUSH
68741: EMPTY
68742: LIST
68743: LIST
68744: LIST
68745: LIST
68746: PPUSH
68747: CALL_OW 69
68751: PUSH
68752: LD_VAR 0 8
68756: PPUSH
68757: CALL_OW 313
68761: PPUSH
68762: LD_INT 3
68764: PUSH
68765: LD_INT 60
68767: PUSH
68768: EMPTY
68769: LIST
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PUSH
68775: LD_INT 2
68777: PUSH
68778: LD_INT 25
68780: PUSH
68781: LD_INT 2
68783: PUSH
68784: EMPTY
68785: LIST
68786: LIST
68787: PUSH
68788: LD_INT 25
68790: PUSH
68791: LD_INT 16
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: PUSH
68798: EMPTY
68799: LIST
68800: LIST
68801: LIST
68802: PUSH
68803: EMPTY
68804: LIST
68805: LIST
68806: PPUSH
68807: CALL_OW 72
68811: UNION
68812: ST_TO_ADDR
// if tmp then
68813: LD_VAR 0 4
68817: IFFALSE 68897
// begin tmp := ShrinkArray ( tmp , 3 ) ;
68819: LD_ADDR_VAR 0 4
68823: PUSH
68824: LD_VAR 0 4
68828: PPUSH
68829: LD_INT 3
68831: PPUSH
68832: CALL 40911 0 2
68836: ST_TO_ADDR
// for j in tmp do
68837: LD_ADDR_VAR 0 2
68841: PUSH
68842: LD_VAR 0 4
68846: PUSH
68847: FOR_IN
68848: IFFALSE 68891
// begin if IsInUnit ( j ) then
68850: LD_VAR 0 2
68854: PPUSH
68855: CALL_OW 310
68859: IFFALSE 68870
// ComExit ( j ) ;
68861: LD_VAR 0 2
68865: PPUSH
68866: CALL 40994 0 1
// AddComCollect ( j , x , y ) ;
68870: LD_VAR 0 2
68874: PPUSH
68875: LD_VAR 0 6
68879: PPUSH
68880: LD_VAR 0 7
68884: PPUSH
68885: CALL_OW 177
// end ;
68889: GO 68847
68891: POP
68892: POP
// exit ;
68893: POP
68894: POP
68895: GO 69124
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
68897: LD_ADDR_VAR 0 4
68901: PUSH
68902: LD_INT 22
68904: PUSH
68905: LD_VAR 0 5
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: PUSH
68914: LD_INT 91
68916: PUSH
68917: LD_VAR 0 8
68921: PUSH
68922: LD_INT 8
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: LIST
68929: PUSH
68930: LD_INT 2
68932: PUSH
68933: LD_INT 34
68935: PUSH
68936: LD_INT 12
68938: PUSH
68939: EMPTY
68940: LIST
68941: LIST
68942: PUSH
68943: LD_INT 34
68945: PUSH
68946: LD_INT 51
68948: PUSH
68949: EMPTY
68950: LIST
68951: LIST
68952: PUSH
68953: LD_INT 34
68955: PUSH
68956: LD_INT 32
68958: PUSH
68959: EMPTY
68960: LIST
68961: LIST
68962: PUSH
68963: LD_INT 34
68965: PUSH
68966: LD_INT 89
68968: PUSH
68969: EMPTY
68970: LIST
68971: LIST
68972: PUSH
68973: EMPTY
68974: LIST
68975: LIST
68976: LIST
68977: LIST
68978: LIST
68979: PUSH
68980: EMPTY
68981: LIST
68982: LIST
68983: LIST
68984: PPUSH
68985: CALL_OW 69
68989: ST_TO_ADDR
// if tmp then
68990: LD_VAR 0 4
68994: IFFALSE 69120
// begin for j in tmp do
68996: LD_ADDR_VAR 0 2
69000: PUSH
69001: LD_VAR 0 4
69005: PUSH
69006: FOR_IN
69007: IFFALSE 69118
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
69009: LD_VAR 0 2
69013: PPUSH
69014: CALL_OW 262
69018: PUSH
69019: LD_INT 3
69021: EQUAL
69022: PUSH
69023: LD_VAR 0 2
69027: PPUSH
69028: CALL_OW 261
69032: PUSH
69033: LD_INT 20
69035: GREATER
69036: OR
69037: PUSH
69038: LD_VAR 0 2
69042: PPUSH
69043: CALL_OW 314
69047: NOT
69048: AND
69049: PUSH
69050: LD_VAR 0 2
69054: PPUSH
69055: CALL_OW 263
69059: PUSH
69060: LD_INT 1
69062: NONEQUAL
69063: PUSH
69064: LD_VAR 0 2
69068: PPUSH
69069: CALL_OW 311
69073: OR
69074: AND
69075: IFFALSE 69116
// begin ComCollect ( j , x , y ) ;
69077: LD_VAR 0 2
69081: PPUSH
69082: LD_VAR 0 6
69086: PPUSH
69087: LD_VAR 0 7
69091: PPUSH
69092: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
69096: LD_VAR 0 2
69100: PPUSH
69101: LD_VAR 0 8
69105: PPUSH
69106: CALL_OW 172
// exit ;
69110: POP
69111: POP
69112: POP
69113: POP
69114: GO 69124
// end ;
69116: GO 69006
69118: POP
69119: POP
// end ; end ;
69120: GO 68495
69122: POP
69123: POP
// end ; end_of_file
69124: PPOPN 9
69126: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69127: LD_VAR 0 1
69131: PUSH
69132: LD_INT 200
69134: DOUBLE
69135: GREATEREQUAL
69136: IFFALSE 69144
69138: LD_INT 299
69140: DOUBLE
69141: LESSEQUAL
69142: IFTRUE 69146
69144: GO 69178
69146: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69147: LD_VAR 0 1
69151: PPUSH
69152: LD_VAR 0 2
69156: PPUSH
69157: LD_VAR 0 3
69161: PPUSH
69162: LD_VAR 0 4
69166: PPUSH
69167: LD_VAR 0 5
69171: PPUSH
69172: CALL 69779 0 5
69176: GO 69255
69178: LD_INT 300
69180: DOUBLE
69181: GREATEREQUAL
69182: IFFALSE 69190
69184: LD_INT 399
69186: DOUBLE
69187: LESSEQUAL
69188: IFTRUE 69192
69190: GO 69254
69192: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69193: LD_VAR 0 1
69197: PPUSH
69198: LD_VAR 0 2
69202: PPUSH
69203: LD_VAR 0 3
69207: PPUSH
69208: LD_VAR 0 4
69212: PPUSH
69213: LD_VAR 0 5
69217: PPUSH
69218: LD_VAR 0 6
69222: PPUSH
69223: LD_VAR 0 7
69227: PPUSH
69228: LD_VAR 0 8
69232: PPUSH
69233: LD_VAR 0 9
69237: PPUSH
69238: LD_VAR 0 10
69242: PPUSH
69243: LD_VAR 0 11
69247: PPUSH
69248: CALL 65828 0 11
69252: GO 69255
69254: POP
// end ;
69255: PPOPN 11
69257: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69258: LD_VAR 0 1
69262: PPUSH
69263: LD_VAR 0 2
69267: PPUSH
69268: LD_VAR 0 3
69272: PPUSH
69273: LD_VAR 0 4
69277: PPUSH
69278: LD_VAR 0 5
69282: PPUSH
69283: CALL 69340 0 5
// end ; end_of_file
69287: PPOPN 5
69289: END
// export function SOS_UnitDestroyed ( un ) ; begin
69290: LD_INT 0
69292: PPUSH
// ComRadiation ( un ) ;
69293: LD_VAR 0 1
69297: PPUSH
69298: CALL 70183 0 1
// end ;
69302: LD_VAR 0 2
69306: RET
// export function SOS_UnitKamikazed ( un ) ; begin
69307: LD_INT 0
69309: PPUSH
// ComRadiation ( un ) ;
69310: LD_VAR 0 1
69314: PPUSH
69315: CALL 70183 0 1
// end ;
69319: LD_VAR 0 2
69323: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
69324: LD_INT 0
69326: PPUSH
// end ;
69327: LD_VAR 0 4
69331: RET
// export function SOS_Command ( cmd ) ; begin
69332: LD_INT 0
69334: PPUSH
// end ;
69335: LD_VAR 0 2
69339: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
69340: LD_INT 0
69342: PPUSH
// end ;
69343: LD_VAR 0 6
69347: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var tag , driver , hex ; begin
69348: LD_INT 0
69350: PPUSH
69351: PPUSH
69352: PPUSH
69353: PPUSH
// if not vehicle or not factory then
69354: LD_VAR 0 1
69358: NOT
69359: PUSH
69360: LD_VAR 0 2
69364: NOT
69365: OR
69366: IFFALSE 69370
// exit ;
69368: GO 69774
// if factoryWaypoints >= factory then
69370: LD_EXP 102
69374: PUSH
69375: LD_VAR 0 2
69379: GREATEREQUAL
69380: IFFALSE 69774
// if factoryWaypoints [ factory ] then
69382: LD_EXP 102
69386: PUSH
69387: LD_VAR 0 2
69391: ARRAY
69392: IFFALSE 69774
// begin if GetControl ( vehicle ) = control_manual then
69394: LD_VAR 0 1
69398: PPUSH
69399: CALL_OW 263
69403: PUSH
69404: LD_INT 1
69406: EQUAL
69407: IFFALSE 69661
// begin driver := IsDrivenBy ( vehicle ) ;
69409: LD_ADDR_VAR 0 5
69413: PUSH
69414: LD_VAR 0 1
69418: PPUSH
69419: CALL_OW 311
69423: ST_TO_ADDR
// tag := GetTag ( driver ) ;
69424: LD_ADDR_VAR 0 4
69428: PUSH
69429: LD_VAR 0 5
69433: PPUSH
69434: CALL_OW 110
69438: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
69439: LD_VAR 0 4
69443: PUSH
69444: LD_INT 501
69446: EQUAL
69447: PUSH
69448: LD_VAR 0 1
69452: PPUSH
69453: CALL_OW 110
69457: PUSH
69458: LD_INT 501
69460: EQUAL
69461: OR
69462: IFFALSE 69466
// exit ;
69464: GO 69774
// if not HasTask ( driver ) then
69466: LD_VAR 0 5
69470: PPUSH
69471: CALL_OW 314
69475: NOT
69476: IFFALSE 69659
// begin SetTag ( driver , tDriver ) ;
69478: LD_VAR 0 5
69482: PPUSH
69483: LD_INT 501
69485: PPUSH
69486: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
69490: LD_VAR 0 1
69494: PPUSH
69495: LD_INT 501
69497: PPUSH
69498: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
69502: LD_ADDR_VAR 0 6
69506: PUSH
69507: LD_EXP 102
69511: PUSH
69512: LD_VAR 0 2
69516: ARRAY
69517: PUSH
69518: LD_INT 3
69520: ARRAY
69521: PPUSH
69522: LD_EXP 102
69526: PUSH
69527: LD_VAR 0 2
69531: ARRAY
69532: PUSH
69533: LD_INT 4
69535: ARRAY
69536: PPUSH
69537: CALL_OW 428
69541: ST_TO_ADDR
// if hex then
69542: LD_VAR 0 6
69546: IFFALSE 69564
// ComMoveUnit ( driver , hex ) else
69548: LD_VAR 0 5
69552: PPUSH
69553: LD_VAR 0 6
69557: PPUSH
69558: CALL_OW 112
69562: GO 69603
// ComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
69564: LD_VAR 0 5
69568: PPUSH
69569: LD_EXP 102
69573: PUSH
69574: LD_VAR 0 2
69578: ARRAY
69579: PUSH
69580: LD_INT 3
69582: ARRAY
69583: PPUSH
69584: LD_EXP 102
69588: PUSH
69589: LD_VAR 0 2
69593: ARRAY
69594: PUSH
69595: LD_INT 4
69597: ARRAY
69598: PPUSH
69599: CALL_OW 111
// AddComExitVehicle ( driver ) ;
69603: LD_VAR 0 5
69607: PPUSH
69608: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
69612: LD_VAR 0 5
69616: PPUSH
69617: LD_VAR 0 2
69621: PPUSH
69622: CALL_OW 180
// wait ( 0 0$1 ) ;
69626: LD_INT 35
69628: PPUSH
69629: CALL_OW 67
// SetTag ( driver , tag ) ;
69633: LD_VAR 0 5
69637: PPUSH
69638: LD_VAR 0 4
69642: PPUSH
69643: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
69647: LD_VAR 0 1
69651: PPUSH
69652: LD_INT 0
69654: PPUSH
69655: CALL_OW 109
// end ; end else
69659: GO 69774
// if GetControl ( vehicle ) = control_remote then
69661: LD_VAR 0 1
69665: PPUSH
69666: CALL_OW 263
69670: PUSH
69671: LD_INT 2
69673: EQUAL
69674: IFFALSE 69735
// begin wait ( 0 0$2 ) ;
69676: LD_INT 70
69678: PPUSH
69679: CALL_OW 67
// if Connect ( vehicle ) then
69683: LD_VAR 0 1
69687: PPUSH
69688: CALL 11213 0 1
69692: IFFALSE 69733
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
69694: LD_VAR 0 1
69698: PPUSH
69699: LD_EXP 102
69703: PUSH
69704: LD_VAR 0 2
69708: ARRAY
69709: PUSH
69710: LD_INT 3
69712: ARRAY
69713: PPUSH
69714: LD_EXP 102
69718: PUSH
69719: LD_VAR 0 2
69723: ARRAY
69724: PUSH
69725: LD_INT 4
69727: ARRAY
69728: PPUSH
69729: CALL_OW 171
// end else
69733: GO 69774
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
69735: LD_VAR 0 1
69739: PPUSH
69740: LD_EXP 102
69744: PUSH
69745: LD_VAR 0 2
69749: ARRAY
69750: PUSH
69751: LD_INT 3
69753: ARRAY
69754: PPUSH
69755: LD_EXP 102
69759: PUSH
69760: LD_VAR 0 2
69764: ARRAY
69765: PUSH
69766: LD_INT 4
69768: ARRAY
69769: PPUSH
69770: CALL_OW 171
// end ; end ;
69774: LD_VAR 0 3
69778: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
69779: LD_INT 0
69781: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
69782: LD_VAR 0 1
69786: PUSH
69787: LD_INT 250
69789: EQUAL
69790: PUSH
69791: LD_VAR 0 2
69795: PPUSH
69796: CALL_OW 264
69800: PUSH
69801: LD_INT 81
69803: EQUAL
69804: AND
69805: IFFALSE 69826
// MinerPlaceMine ( unit , x , y ) ;
69807: LD_VAR 0 2
69811: PPUSH
69812: LD_VAR 0 4
69816: PPUSH
69817: LD_VAR 0 5
69821: PPUSH
69822: CALL 72918 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
69826: LD_VAR 0 1
69830: PUSH
69831: LD_INT 251
69833: EQUAL
69834: PUSH
69835: LD_VAR 0 2
69839: PPUSH
69840: CALL_OW 264
69844: PUSH
69845: LD_INT 81
69847: EQUAL
69848: AND
69849: IFFALSE 69870
// MinerDetonateMine ( unit , x , y ) ;
69851: LD_VAR 0 2
69855: PPUSH
69856: LD_VAR 0 4
69860: PPUSH
69861: LD_VAR 0 5
69865: PPUSH
69866: CALL 73193 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
69870: LD_VAR 0 1
69874: PUSH
69875: LD_INT 252
69877: EQUAL
69878: PUSH
69879: LD_VAR 0 2
69883: PPUSH
69884: CALL_OW 264
69888: PUSH
69889: LD_INT 81
69891: EQUAL
69892: AND
69893: IFFALSE 69914
// MinerCreateMinefield ( unit , x , y ) ;
69895: LD_VAR 0 2
69899: PPUSH
69900: LD_VAR 0 4
69904: PPUSH
69905: LD_VAR 0 5
69909: PPUSH
69910: CALL 73610 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
69914: LD_VAR 0 1
69918: PUSH
69919: LD_INT 253
69921: EQUAL
69922: PUSH
69923: LD_VAR 0 2
69927: PPUSH
69928: CALL_OW 257
69932: PUSH
69933: LD_INT 5
69935: EQUAL
69936: AND
69937: IFFALSE 69958
// ComBinocular ( unit , x , y ) ;
69939: LD_VAR 0 2
69943: PPUSH
69944: LD_VAR 0 4
69948: PPUSH
69949: LD_VAR 0 5
69953: PPUSH
69954: CALL 73979 0 3
// if selectedUnit then
69958: LD_VAR 0 3
69962: IFFALSE 70018
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
69964: LD_VAR 0 1
69968: PUSH
69969: LD_INT 254
69971: EQUAL
69972: PUSH
69973: LD_VAR 0 2
69977: PPUSH
69978: CALL_OW 264
69982: PUSH
69983: LD_INT 99
69985: EQUAL
69986: AND
69987: PUSH
69988: LD_VAR 0 3
69992: PPUSH
69993: CALL_OW 263
69997: PUSH
69998: LD_INT 3
70000: EQUAL
70001: AND
70002: IFFALSE 70018
// HackDestroyVehicle ( unit , selectedUnit ) ;
70004: LD_VAR 0 2
70008: PPUSH
70009: LD_VAR 0 3
70013: PPUSH
70014: CALL 72282 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
70018: LD_VAR 0 1
70022: PUSH
70023: LD_INT 255
70025: EQUAL
70026: PUSH
70027: LD_VAR 0 2
70031: PPUSH
70032: CALL_OW 264
70036: PUSH
70037: LD_INT 14
70039: PUSH
70040: LD_INT 53
70042: PUSH
70043: EMPTY
70044: LIST
70045: LIST
70046: IN
70047: AND
70048: PUSH
70049: LD_VAR 0 4
70053: PPUSH
70054: LD_VAR 0 5
70058: PPUSH
70059: CALL_OW 488
70063: AND
70064: IFFALSE 70088
// CutTreeXYR ( unit , x , y , 12 ) ;
70066: LD_VAR 0 2
70070: PPUSH
70071: LD_VAR 0 4
70075: PPUSH
70076: LD_VAR 0 5
70080: PPUSH
70081: LD_INT 12
70083: PPUSH
70084: CALL 70279 0 4
// if cmd = 256 then
70088: LD_VAR 0 1
70092: PUSH
70093: LD_INT 256
70095: EQUAL
70096: IFFALSE 70117
// SetFactoryWaypoint ( unit , x , y ) ;
70098: LD_VAR 0 2
70102: PPUSH
70103: LD_VAR 0 4
70107: PPUSH
70108: LD_VAR 0 5
70112: PPUSH
70113: CALL 67816 0 3
// if cmd = 257 then
70117: LD_VAR 0 1
70121: PUSH
70122: LD_INT 257
70124: EQUAL
70125: IFFALSE 70146
// SetWarehouseGatheringPoint ( unit , x , y ) ;
70127: LD_VAR 0 2
70131: PPUSH
70132: LD_VAR 0 4
70136: PPUSH
70137: LD_VAR 0 5
70141: PPUSH
70142: CALL 68178 0 3
// if cmd = 258 then
70146: LD_VAR 0 1
70150: PUSH
70151: LD_INT 258
70153: EQUAL
70154: IFFALSE 70178
// BurnTreeXYR ( unit , x , y , 8 ) ;
70156: LD_VAR 0 2
70160: PPUSH
70161: LD_VAR 0 4
70165: PPUSH
70166: LD_VAR 0 5
70170: PPUSH
70171: LD_INT 8
70173: PPUSH
70174: CALL 70673 0 4
// end ;
70178: LD_VAR 0 6
70182: RET
// export function ComRadiation ( un ) ; var eff ; begin
70183: LD_INT 0
70185: PPUSH
70186: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
70187: LD_VAR 0 1
70191: PPUSH
70192: CALL_OW 264
70196: PUSH
70197: LD_INT 91
70199: NONEQUAL
70200: IFFALSE 70204
// exit ;
70202: GO 70274
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
70204: LD_INT 68
70206: PPUSH
70207: LD_VAR 0 1
70211: PPUSH
70212: CALL_OW 255
70216: PPUSH
70217: CALL_OW 321
70221: PUSH
70222: LD_INT 2
70224: EQUAL
70225: IFFALSE 70237
// eff := 70 else
70227: LD_ADDR_VAR 0 3
70231: PUSH
70232: LD_INT 70
70234: ST_TO_ADDR
70235: GO 70245
// eff := 30 ;
70237: LD_ADDR_VAR 0 3
70241: PUSH
70242: LD_INT 30
70244: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
70245: LD_VAR 0 1
70249: PPUSH
70250: CALL_OW 250
70254: PPUSH
70255: LD_VAR 0 1
70259: PPUSH
70260: CALL_OW 251
70264: PPUSH
70265: LD_VAR 0 3
70269: PPUSH
70270: CALL_OW 495
// end ;
70274: LD_VAR 0 2
70278: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
70279: LD_INT 0
70281: PPUSH
70282: PPUSH
70283: PPUSH
70284: PPUSH
70285: PPUSH
70286: PPUSH
70287: PPUSH
70288: PPUSH
70289: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
70290: LD_VAR 0 1
70294: PPUSH
70295: CALL_OW 302
70299: NOT
70300: PUSH
70301: LD_VAR 0 2
70305: PPUSH
70306: LD_VAR 0 3
70310: PPUSH
70311: CALL_OW 488
70315: NOT
70316: OR
70317: PUSH
70318: LD_VAR 0 4
70322: NOT
70323: OR
70324: IFFALSE 70328
// exit ;
70326: GO 70668
// list := [ ] ;
70328: LD_ADDR_VAR 0 13
70332: PUSH
70333: EMPTY
70334: ST_TO_ADDR
// if x - r < 0 then
70335: LD_VAR 0 2
70339: PUSH
70340: LD_VAR 0 4
70344: MINUS
70345: PUSH
70346: LD_INT 0
70348: LESS
70349: IFFALSE 70361
// min_x := 0 else
70351: LD_ADDR_VAR 0 7
70355: PUSH
70356: LD_INT 0
70358: ST_TO_ADDR
70359: GO 70377
// min_x := x - r ;
70361: LD_ADDR_VAR 0 7
70365: PUSH
70366: LD_VAR 0 2
70370: PUSH
70371: LD_VAR 0 4
70375: MINUS
70376: ST_TO_ADDR
// if y - r < 0 then
70377: LD_VAR 0 3
70381: PUSH
70382: LD_VAR 0 4
70386: MINUS
70387: PUSH
70388: LD_INT 0
70390: LESS
70391: IFFALSE 70403
// min_y := 0 else
70393: LD_ADDR_VAR 0 8
70397: PUSH
70398: LD_INT 0
70400: ST_TO_ADDR
70401: GO 70419
// min_y := y - r ;
70403: LD_ADDR_VAR 0 8
70407: PUSH
70408: LD_VAR 0 3
70412: PUSH
70413: LD_VAR 0 4
70417: MINUS
70418: ST_TO_ADDR
// max_x := x + r ;
70419: LD_ADDR_VAR 0 9
70423: PUSH
70424: LD_VAR 0 2
70428: PUSH
70429: LD_VAR 0 4
70433: PLUS
70434: ST_TO_ADDR
// max_y := y + r ;
70435: LD_ADDR_VAR 0 10
70439: PUSH
70440: LD_VAR 0 3
70444: PUSH
70445: LD_VAR 0 4
70449: PLUS
70450: ST_TO_ADDR
// for _x = min_x to max_x do
70451: LD_ADDR_VAR 0 11
70455: PUSH
70456: DOUBLE
70457: LD_VAR 0 7
70461: DEC
70462: ST_TO_ADDR
70463: LD_VAR 0 9
70467: PUSH
70468: FOR_TO
70469: IFFALSE 70586
// for _y = min_y to max_y do
70471: LD_ADDR_VAR 0 12
70475: PUSH
70476: DOUBLE
70477: LD_VAR 0 8
70481: DEC
70482: ST_TO_ADDR
70483: LD_VAR 0 10
70487: PUSH
70488: FOR_TO
70489: IFFALSE 70582
// begin if not ValidHex ( _x , _y ) then
70491: LD_VAR 0 11
70495: PPUSH
70496: LD_VAR 0 12
70500: PPUSH
70501: CALL_OW 488
70505: NOT
70506: IFFALSE 70510
// continue ;
70508: GO 70488
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
70510: LD_VAR 0 11
70514: PPUSH
70515: LD_VAR 0 12
70519: PPUSH
70520: CALL_OW 351
70524: PUSH
70525: LD_VAR 0 11
70529: PPUSH
70530: LD_VAR 0 12
70534: PPUSH
70535: CALL_OW 554
70539: AND
70540: IFFALSE 70580
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
70542: LD_ADDR_VAR 0 13
70546: PUSH
70547: LD_VAR 0 13
70551: PPUSH
70552: LD_VAR 0 13
70556: PUSH
70557: LD_INT 1
70559: PLUS
70560: PPUSH
70561: LD_VAR 0 11
70565: PUSH
70566: LD_VAR 0 12
70570: PUSH
70571: EMPTY
70572: LIST
70573: LIST
70574: PPUSH
70575: CALL_OW 2
70579: ST_TO_ADDR
// end ;
70580: GO 70488
70582: POP
70583: POP
70584: GO 70468
70586: POP
70587: POP
// if not list then
70588: LD_VAR 0 13
70592: NOT
70593: IFFALSE 70597
// exit ;
70595: GO 70668
// for i in list do
70597: LD_ADDR_VAR 0 6
70601: PUSH
70602: LD_VAR 0 13
70606: PUSH
70607: FOR_IN
70608: IFFALSE 70666
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
70610: LD_VAR 0 1
70614: PPUSH
70615: LD_STRING M
70617: PUSH
70618: LD_VAR 0 6
70622: PUSH
70623: LD_INT 1
70625: ARRAY
70626: PUSH
70627: LD_VAR 0 6
70631: PUSH
70632: LD_INT 2
70634: ARRAY
70635: PUSH
70636: LD_INT 0
70638: PUSH
70639: LD_INT 0
70641: PUSH
70642: LD_INT 0
70644: PUSH
70645: LD_INT 0
70647: PUSH
70648: EMPTY
70649: LIST
70650: LIST
70651: LIST
70652: LIST
70653: LIST
70654: LIST
70655: LIST
70656: PUSH
70657: EMPTY
70658: LIST
70659: PPUSH
70660: CALL_OW 447
70664: GO 70607
70666: POP
70667: POP
// end ;
70668: LD_VAR 0 5
70672: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
70673: LD_INT 0
70675: PPUSH
70676: PPUSH
70677: PPUSH
70678: PPUSH
70679: PPUSH
70680: PPUSH
70681: PPUSH
70682: PPUSH
70683: PPUSH
70684: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
70685: LD_VAR 0 1
70689: PPUSH
70690: CALL_OW 302
70694: NOT
70695: PUSH
70696: LD_VAR 0 2
70700: PPUSH
70701: LD_VAR 0 3
70705: PPUSH
70706: CALL_OW 488
70710: NOT
70711: OR
70712: PUSH
70713: LD_VAR 0 4
70717: NOT
70718: OR
70719: IFFALSE 70723
// exit ;
70721: GO 71236
// list := [ ] ;
70723: LD_ADDR_VAR 0 13
70727: PUSH
70728: EMPTY
70729: ST_TO_ADDR
// if x - r < 0 then
70730: LD_VAR 0 2
70734: PUSH
70735: LD_VAR 0 4
70739: MINUS
70740: PUSH
70741: LD_INT 0
70743: LESS
70744: IFFALSE 70756
// min_x := 0 else
70746: LD_ADDR_VAR 0 7
70750: PUSH
70751: LD_INT 0
70753: ST_TO_ADDR
70754: GO 70772
// min_x := x - r ;
70756: LD_ADDR_VAR 0 7
70760: PUSH
70761: LD_VAR 0 2
70765: PUSH
70766: LD_VAR 0 4
70770: MINUS
70771: ST_TO_ADDR
// if y - r < 0 then
70772: LD_VAR 0 3
70776: PUSH
70777: LD_VAR 0 4
70781: MINUS
70782: PUSH
70783: LD_INT 0
70785: LESS
70786: IFFALSE 70798
// min_y := 0 else
70788: LD_ADDR_VAR 0 8
70792: PUSH
70793: LD_INT 0
70795: ST_TO_ADDR
70796: GO 70814
// min_y := y - r ;
70798: LD_ADDR_VAR 0 8
70802: PUSH
70803: LD_VAR 0 3
70807: PUSH
70808: LD_VAR 0 4
70812: MINUS
70813: ST_TO_ADDR
// max_x := x + r ;
70814: LD_ADDR_VAR 0 9
70818: PUSH
70819: LD_VAR 0 2
70823: PUSH
70824: LD_VAR 0 4
70828: PLUS
70829: ST_TO_ADDR
// max_y := y + r ;
70830: LD_ADDR_VAR 0 10
70834: PUSH
70835: LD_VAR 0 3
70839: PUSH
70840: LD_VAR 0 4
70844: PLUS
70845: ST_TO_ADDR
// for _x = min_x to max_x do
70846: LD_ADDR_VAR 0 11
70850: PUSH
70851: DOUBLE
70852: LD_VAR 0 7
70856: DEC
70857: ST_TO_ADDR
70858: LD_VAR 0 9
70862: PUSH
70863: FOR_TO
70864: IFFALSE 70981
// for _y = min_y to max_y do
70866: LD_ADDR_VAR 0 12
70870: PUSH
70871: DOUBLE
70872: LD_VAR 0 8
70876: DEC
70877: ST_TO_ADDR
70878: LD_VAR 0 10
70882: PUSH
70883: FOR_TO
70884: IFFALSE 70977
// begin if not ValidHex ( _x , _y ) then
70886: LD_VAR 0 11
70890: PPUSH
70891: LD_VAR 0 12
70895: PPUSH
70896: CALL_OW 488
70900: NOT
70901: IFFALSE 70905
// continue ;
70903: GO 70883
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
70905: LD_VAR 0 11
70909: PPUSH
70910: LD_VAR 0 12
70914: PPUSH
70915: CALL_OW 351
70919: PUSH
70920: LD_VAR 0 11
70924: PPUSH
70925: LD_VAR 0 12
70929: PPUSH
70930: CALL_OW 554
70934: AND
70935: IFFALSE 70975
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
70937: LD_ADDR_VAR 0 13
70941: PUSH
70942: LD_VAR 0 13
70946: PPUSH
70947: LD_VAR 0 13
70951: PUSH
70952: LD_INT 1
70954: PLUS
70955: PPUSH
70956: LD_VAR 0 11
70960: PUSH
70961: LD_VAR 0 12
70965: PUSH
70966: EMPTY
70967: LIST
70968: LIST
70969: PPUSH
70970: CALL_OW 2
70974: ST_TO_ADDR
// end ;
70975: GO 70883
70977: POP
70978: POP
70979: GO 70863
70981: POP
70982: POP
// if not list then
70983: LD_VAR 0 13
70987: NOT
70988: IFFALSE 70992
// exit ;
70990: GO 71236
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
70992: LD_ADDR_VAR 0 13
70996: PUSH
70997: LD_VAR 0 1
71001: PPUSH
71002: LD_VAR 0 13
71006: PPUSH
71007: LD_INT 1
71009: PPUSH
71010: LD_INT 1
71012: PPUSH
71013: CALL 8355 0 4
71017: ST_TO_ADDR
// ComStop ( flame ) ;
71018: LD_VAR 0 1
71022: PPUSH
71023: CALL_OW 141
// for i in list do
71027: LD_ADDR_VAR 0 6
71031: PUSH
71032: LD_VAR 0 13
71036: PUSH
71037: FOR_IN
71038: IFFALSE 71069
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
71040: LD_VAR 0 1
71044: PPUSH
71045: LD_VAR 0 6
71049: PUSH
71050: LD_INT 1
71052: ARRAY
71053: PPUSH
71054: LD_VAR 0 6
71058: PUSH
71059: LD_INT 2
71061: ARRAY
71062: PPUSH
71063: CALL_OW 176
71067: GO 71037
71069: POP
71070: POP
// repeat wait ( 0 0$1 ) ;
71071: LD_INT 35
71073: PPUSH
71074: CALL_OW 67
// task := GetTaskList ( flame ) ;
71078: LD_ADDR_VAR 0 14
71082: PUSH
71083: LD_VAR 0 1
71087: PPUSH
71088: CALL_OW 437
71092: ST_TO_ADDR
// if not task then
71093: LD_VAR 0 14
71097: NOT
71098: IFFALSE 71102
// exit ;
71100: GO 71236
// if task [ 1 ] [ 1 ] <> | then
71102: LD_VAR 0 14
71106: PUSH
71107: LD_INT 1
71109: ARRAY
71110: PUSH
71111: LD_INT 1
71113: ARRAY
71114: PUSH
71115: LD_STRING |
71117: NONEQUAL
71118: IFFALSE 71122
// exit ;
71120: GO 71236
// _x := task [ 1 ] [ 2 ] ;
71122: LD_ADDR_VAR 0 11
71126: PUSH
71127: LD_VAR 0 14
71131: PUSH
71132: LD_INT 1
71134: ARRAY
71135: PUSH
71136: LD_INT 2
71138: ARRAY
71139: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
71140: LD_ADDR_VAR 0 12
71144: PUSH
71145: LD_VAR 0 14
71149: PUSH
71150: LD_INT 1
71152: ARRAY
71153: PUSH
71154: LD_INT 3
71156: ARRAY
71157: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
71158: LD_VAR 0 11
71162: PPUSH
71163: LD_VAR 0 12
71167: PPUSH
71168: CALL_OW 351
71172: NOT
71173: PUSH
71174: LD_VAR 0 11
71178: PPUSH
71179: LD_VAR 0 12
71183: PPUSH
71184: CALL_OW 554
71188: NOT
71189: OR
71190: IFFALSE 71224
// begin task := Delete ( task , 1 ) ;
71192: LD_ADDR_VAR 0 14
71196: PUSH
71197: LD_VAR 0 14
71201: PPUSH
71202: LD_INT 1
71204: PPUSH
71205: CALL_OW 3
71209: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
71210: LD_VAR 0 1
71214: PPUSH
71215: LD_VAR 0 14
71219: PPUSH
71220: CALL_OW 446
// end ; until not HasTask ( flame ) ;
71224: LD_VAR 0 1
71228: PPUSH
71229: CALL_OW 314
71233: NOT
71234: IFFALSE 71071
// end ;
71236: LD_VAR 0 5
71240: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
71241: LD_EXP 105
71245: NOT
71246: IFFALSE 71296
71248: GO 71250
71250: DISABLE
// begin initHack := true ;
71251: LD_ADDR_EXP 105
71255: PUSH
71256: LD_INT 1
71258: ST_TO_ADDR
// hackTanks := [ ] ;
71259: LD_ADDR_EXP 106
71263: PUSH
71264: EMPTY
71265: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
71266: LD_ADDR_EXP 107
71270: PUSH
71271: EMPTY
71272: ST_TO_ADDR
// hackLimit := 3 ;
71273: LD_ADDR_EXP 108
71277: PUSH
71278: LD_INT 3
71280: ST_TO_ADDR
// hackDist := 12 ;
71281: LD_ADDR_EXP 109
71285: PUSH
71286: LD_INT 12
71288: ST_TO_ADDR
// hackCounter := [ ] ;
71289: LD_ADDR_EXP 110
71293: PUSH
71294: EMPTY
71295: ST_TO_ADDR
// end ;
71296: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
71297: LD_EXP 105
71301: PUSH
71302: LD_INT 34
71304: PUSH
71305: LD_INT 99
71307: PUSH
71308: EMPTY
71309: LIST
71310: LIST
71311: PPUSH
71312: CALL_OW 69
71316: AND
71317: IFFALSE 71570
71319: GO 71321
71321: DISABLE
71322: LD_INT 0
71324: PPUSH
71325: PPUSH
// begin enable ;
71326: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
71327: LD_ADDR_VAR 0 1
71331: PUSH
71332: LD_INT 34
71334: PUSH
71335: LD_INT 99
71337: PUSH
71338: EMPTY
71339: LIST
71340: LIST
71341: PPUSH
71342: CALL_OW 69
71346: PUSH
71347: FOR_IN
71348: IFFALSE 71568
// begin if not i in hackTanks then
71350: LD_VAR 0 1
71354: PUSH
71355: LD_EXP 106
71359: IN
71360: NOT
71361: IFFALSE 71444
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
71363: LD_ADDR_EXP 106
71367: PUSH
71368: LD_EXP 106
71372: PPUSH
71373: LD_EXP 106
71377: PUSH
71378: LD_INT 1
71380: PLUS
71381: PPUSH
71382: LD_VAR 0 1
71386: PPUSH
71387: CALL_OW 1
71391: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
71392: LD_ADDR_EXP 107
71396: PUSH
71397: LD_EXP 107
71401: PPUSH
71402: LD_EXP 107
71406: PUSH
71407: LD_INT 1
71409: PLUS
71410: PPUSH
71411: EMPTY
71412: PPUSH
71413: CALL_OW 1
71417: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
71418: LD_ADDR_EXP 110
71422: PUSH
71423: LD_EXP 110
71427: PPUSH
71428: LD_EXP 110
71432: PUSH
71433: LD_INT 1
71435: PLUS
71436: PPUSH
71437: EMPTY
71438: PPUSH
71439: CALL_OW 1
71443: ST_TO_ADDR
// end ; if not IsOk ( i ) then
71444: LD_VAR 0 1
71448: PPUSH
71449: CALL_OW 302
71453: NOT
71454: IFFALSE 71467
// begin HackUnlinkAll ( i ) ;
71456: LD_VAR 0 1
71460: PPUSH
71461: CALL 71573 0 1
// continue ;
71465: GO 71347
// end ; HackCheckCapturedStatus ( i ) ;
71467: LD_VAR 0 1
71471: PPUSH
71472: CALL 72016 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
71476: LD_ADDR_VAR 0 2
71480: PUSH
71481: LD_INT 81
71483: PUSH
71484: LD_VAR 0 1
71488: PPUSH
71489: CALL_OW 255
71493: PUSH
71494: EMPTY
71495: LIST
71496: LIST
71497: PUSH
71498: LD_INT 33
71500: PUSH
71501: LD_INT 3
71503: PUSH
71504: EMPTY
71505: LIST
71506: LIST
71507: PUSH
71508: LD_INT 91
71510: PUSH
71511: LD_VAR 0 1
71515: PUSH
71516: LD_EXP 109
71520: PUSH
71521: EMPTY
71522: LIST
71523: LIST
71524: LIST
71525: PUSH
71526: LD_INT 50
71528: PUSH
71529: EMPTY
71530: LIST
71531: PUSH
71532: EMPTY
71533: LIST
71534: LIST
71535: LIST
71536: LIST
71537: PPUSH
71538: CALL_OW 69
71542: ST_TO_ADDR
// if not tmp then
71543: LD_VAR 0 2
71547: NOT
71548: IFFALSE 71552
// continue ;
71550: GO 71347
// HackLink ( i , tmp ) ;
71552: LD_VAR 0 1
71556: PPUSH
71557: LD_VAR 0 2
71561: PPUSH
71562: CALL 71709 0 2
// end ;
71566: GO 71347
71568: POP
71569: POP
// end ;
71570: PPOPN 2
71572: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
71573: LD_INT 0
71575: PPUSH
71576: PPUSH
71577: PPUSH
// if not hack in hackTanks then
71578: LD_VAR 0 1
71582: PUSH
71583: LD_EXP 106
71587: IN
71588: NOT
71589: IFFALSE 71593
// exit ;
71591: GO 71704
// index := GetElementIndex ( hackTanks , hack ) ;
71593: LD_ADDR_VAR 0 4
71597: PUSH
71598: LD_EXP 106
71602: PPUSH
71603: LD_VAR 0 1
71607: PPUSH
71608: CALL 7652 0 2
71612: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
71613: LD_EXP 107
71617: PUSH
71618: LD_VAR 0 4
71622: ARRAY
71623: IFFALSE 71704
// begin for i in hackTanksCaptured [ index ] do
71625: LD_ADDR_VAR 0 3
71629: PUSH
71630: LD_EXP 107
71634: PUSH
71635: LD_VAR 0 4
71639: ARRAY
71640: PUSH
71641: FOR_IN
71642: IFFALSE 71668
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
71644: LD_VAR 0 3
71648: PUSH
71649: LD_INT 1
71651: ARRAY
71652: PPUSH
71653: LD_VAR 0 3
71657: PUSH
71658: LD_INT 2
71660: ARRAY
71661: PPUSH
71662: CALL_OW 235
71666: GO 71641
71668: POP
71669: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
71670: LD_ADDR_EXP 107
71674: PUSH
71675: LD_EXP 107
71679: PPUSH
71680: LD_VAR 0 4
71684: PPUSH
71685: EMPTY
71686: PPUSH
71687: CALL_OW 1
71691: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
71692: LD_VAR 0 1
71696: PPUSH
71697: LD_INT 0
71699: PPUSH
71700: CALL_OW 505
// end ; end ;
71704: LD_VAR 0 2
71708: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
71709: LD_INT 0
71711: PPUSH
71712: PPUSH
71713: PPUSH
// if not hack in hackTanks or not vehicles then
71714: LD_VAR 0 1
71718: PUSH
71719: LD_EXP 106
71723: IN
71724: NOT
71725: PUSH
71726: LD_VAR 0 2
71730: NOT
71731: OR
71732: IFFALSE 71736
// exit ;
71734: GO 72011
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
71736: LD_ADDR_VAR 0 2
71740: PUSH
71741: LD_VAR 0 1
71745: PPUSH
71746: LD_VAR 0 2
71750: PPUSH
71751: LD_INT 1
71753: PPUSH
71754: LD_INT 1
71756: PPUSH
71757: CALL 8302 0 4
71761: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
71762: LD_ADDR_VAR 0 5
71766: PUSH
71767: LD_EXP 106
71771: PPUSH
71772: LD_VAR 0 1
71776: PPUSH
71777: CALL 7652 0 2
71781: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
71782: LD_EXP 107
71786: PUSH
71787: LD_VAR 0 5
71791: ARRAY
71792: PUSH
71793: LD_EXP 108
71797: LESS
71798: IFFALSE 71987
// begin for i := 1 to vehicles do
71800: LD_ADDR_VAR 0 4
71804: PUSH
71805: DOUBLE
71806: LD_INT 1
71808: DEC
71809: ST_TO_ADDR
71810: LD_VAR 0 2
71814: PUSH
71815: FOR_TO
71816: IFFALSE 71985
// begin if hackTanksCaptured [ index ] = hackLimit then
71818: LD_EXP 107
71822: PUSH
71823: LD_VAR 0 5
71827: ARRAY
71828: PUSH
71829: LD_EXP 108
71833: EQUAL
71834: IFFALSE 71838
// break ;
71836: GO 71985
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
71838: LD_ADDR_EXP 110
71842: PUSH
71843: LD_EXP 110
71847: PPUSH
71848: LD_VAR 0 5
71852: PPUSH
71853: LD_EXP 110
71857: PUSH
71858: LD_VAR 0 5
71862: ARRAY
71863: PUSH
71864: LD_INT 1
71866: PLUS
71867: PPUSH
71868: CALL_OW 1
71872: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
71873: LD_ADDR_EXP 107
71877: PUSH
71878: LD_EXP 107
71882: PPUSH
71883: LD_VAR 0 5
71887: PUSH
71888: LD_EXP 107
71892: PUSH
71893: LD_VAR 0 5
71897: ARRAY
71898: PUSH
71899: LD_INT 1
71901: PLUS
71902: PUSH
71903: EMPTY
71904: LIST
71905: LIST
71906: PPUSH
71907: LD_VAR 0 2
71911: PUSH
71912: LD_VAR 0 4
71916: ARRAY
71917: PUSH
71918: LD_VAR 0 2
71922: PUSH
71923: LD_VAR 0 4
71927: ARRAY
71928: PPUSH
71929: CALL_OW 255
71933: PUSH
71934: EMPTY
71935: LIST
71936: LIST
71937: PPUSH
71938: CALL 7867 0 3
71942: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
71943: LD_VAR 0 2
71947: PUSH
71948: LD_VAR 0 4
71952: ARRAY
71953: PPUSH
71954: LD_VAR 0 1
71958: PPUSH
71959: CALL_OW 255
71963: PPUSH
71964: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
71968: LD_VAR 0 2
71972: PUSH
71973: LD_VAR 0 4
71977: ARRAY
71978: PPUSH
71979: CALL_OW 141
// end ;
71983: GO 71815
71985: POP
71986: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
71987: LD_VAR 0 1
71991: PPUSH
71992: LD_EXP 107
71996: PUSH
71997: LD_VAR 0 5
72001: ARRAY
72002: PUSH
72003: LD_INT 0
72005: PLUS
72006: PPUSH
72007: CALL_OW 505
// end ;
72011: LD_VAR 0 3
72015: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
72016: LD_INT 0
72018: PPUSH
72019: PPUSH
72020: PPUSH
72021: PPUSH
// if not hack in hackTanks then
72022: LD_VAR 0 1
72026: PUSH
72027: LD_EXP 106
72031: IN
72032: NOT
72033: IFFALSE 72037
// exit ;
72035: GO 72277
// index := GetElementIndex ( hackTanks , hack ) ;
72037: LD_ADDR_VAR 0 4
72041: PUSH
72042: LD_EXP 106
72046: PPUSH
72047: LD_VAR 0 1
72051: PPUSH
72052: CALL 7652 0 2
72056: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
72057: LD_ADDR_VAR 0 3
72061: PUSH
72062: DOUBLE
72063: LD_EXP 107
72067: PUSH
72068: LD_VAR 0 4
72072: ARRAY
72073: INC
72074: ST_TO_ADDR
72075: LD_INT 1
72077: PUSH
72078: FOR_DOWNTO
72079: IFFALSE 72251
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
72081: LD_ADDR_VAR 0 5
72085: PUSH
72086: LD_EXP 107
72090: PUSH
72091: LD_VAR 0 4
72095: ARRAY
72096: PUSH
72097: LD_VAR 0 3
72101: ARRAY
72102: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
72103: LD_VAR 0 5
72107: PUSH
72108: LD_INT 1
72110: ARRAY
72111: PPUSH
72112: CALL_OW 302
72116: NOT
72117: PUSH
72118: LD_VAR 0 5
72122: PUSH
72123: LD_INT 1
72125: ARRAY
72126: PPUSH
72127: CALL_OW 255
72131: PUSH
72132: LD_VAR 0 1
72136: PPUSH
72137: CALL_OW 255
72141: NONEQUAL
72142: OR
72143: IFFALSE 72249
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
72145: LD_VAR 0 5
72149: PUSH
72150: LD_INT 1
72152: ARRAY
72153: PPUSH
72154: CALL_OW 305
72158: PUSH
72159: LD_VAR 0 5
72163: PUSH
72164: LD_INT 1
72166: ARRAY
72167: PPUSH
72168: CALL_OW 255
72172: PUSH
72173: LD_VAR 0 1
72177: PPUSH
72178: CALL_OW 255
72182: EQUAL
72183: AND
72184: IFFALSE 72208
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
72186: LD_VAR 0 5
72190: PUSH
72191: LD_INT 1
72193: ARRAY
72194: PPUSH
72195: LD_VAR 0 5
72199: PUSH
72200: LD_INT 2
72202: ARRAY
72203: PPUSH
72204: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
72208: LD_ADDR_EXP 107
72212: PUSH
72213: LD_EXP 107
72217: PPUSH
72218: LD_VAR 0 4
72222: PPUSH
72223: LD_EXP 107
72227: PUSH
72228: LD_VAR 0 4
72232: ARRAY
72233: PPUSH
72234: LD_VAR 0 3
72238: PPUSH
72239: CALL_OW 3
72243: PPUSH
72244: CALL_OW 1
72248: ST_TO_ADDR
// end ; end ;
72249: GO 72078
72251: POP
72252: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
72253: LD_VAR 0 1
72257: PPUSH
72258: LD_EXP 107
72262: PUSH
72263: LD_VAR 0 4
72267: ARRAY
72268: PUSH
72269: LD_INT 0
72271: PLUS
72272: PPUSH
72273: CALL_OW 505
// end ;
72277: LD_VAR 0 2
72281: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
72282: LD_INT 0
72284: PPUSH
72285: PPUSH
72286: PPUSH
72287: PPUSH
// if not hack in hackTanks then
72288: LD_VAR 0 1
72292: PUSH
72293: LD_EXP 106
72297: IN
72298: NOT
72299: IFFALSE 72303
// exit ;
72301: GO 72388
// index := GetElementIndex ( hackTanks , hack ) ;
72303: LD_ADDR_VAR 0 5
72307: PUSH
72308: LD_EXP 106
72312: PPUSH
72313: LD_VAR 0 1
72317: PPUSH
72318: CALL 7652 0 2
72322: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
72323: LD_ADDR_VAR 0 4
72327: PUSH
72328: DOUBLE
72329: LD_INT 1
72331: DEC
72332: ST_TO_ADDR
72333: LD_EXP 107
72337: PUSH
72338: LD_VAR 0 5
72342: ARRAY
72343: PUSH
72344: FOR_TO
72345: IFFALSE 72386
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
72347: LD_EXP 107
72351: PUSH
72352: LD_VAR 0 5
72356: ARRAY
72357: PUSH
72358: LD_VAR 0 4
72362: ARRAY
72363: PUSH
72364: LD_INT 1
72366: ARRAY
72367: PUSH
72368: LD_VAR 0 2
72372: EQUAL
72373: IFFALSE 72384
// KillUnit ( vehicle ) ;
72375: LD_VAR 0 2
72379: PPUSH
72380: CALL_OW 66
72384: GO 72344
72386: POP
72387: POP
// end ;
72388: LD_VAR 0 3
72392: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
72393: LD_EXP 111
72397: NOT
72398: IFFALSE 72433
72400: GO 72402
72402: DISABLE
// begin initMiner := true ;
72403: LD_ADDR_EXP 111
72407: PUSH
72408: LD_INT 1
72410: ST_TO_ADDR
// minersList := [ ] ;
72411: LD_ADDR_EXP 112
72415: PUSH
72416: EMPTY
72417: ST_TO_ADDR
// minerMinesList := [ ] ;
72418: LD_ADDR_EXP 113
72422: PUSH
72423: EMPTY
72424: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
72425: LD_ADDR_EXP 114
72429: PUSH
72430: LD_INT 5
72432: ST_TO_ADDR
// end ;
72433: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
72434: LD_EXP 111
72438: PUSH
72439: LD_INT 34
72441: PUSH
72442: LD_INT 81
72444: PUSH
72445: EMPTY
72446: LIST
72447: LIST
72448: PPUSH
72449: CALL_OW 69
72453: AND
72454: IFFALSE 72915
72456: GO 72458
72458: DISABLE
72459: LD_INT 0
72461: PPUSH
72462: PPUSH
72463: PPUSH
72464: PPUSH
// begin enable ;
72465: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
72466: LD_ADDR_VAR 0 1
72470: PUSH
72471: LD_INT 34
72473: PUSH
72474: LD_INT 81
72476: PUSH
72477: EMPTY
72478: LIST
72479: LIST
72480: PPUSH
72481: CALL_OW 69
72485: PUSH
72486: FOR_IN
72487: IFFALSE 72559
// begin if not i in minersList then
72489: LD_VAR 0 1
72493: PUSH
72494: LD_EXP 112
72498: IN
72499: NOT
72500: IFFALSE 72557
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
72502: LD_ADDR_EXP 112
72506: PUSH
72507: LD_EXP 112
72511: PPUSH
72512: LD_EXP 112
72516: PUSH
72517: LD_INT 1
72519: PLUS
72520: PPUSH
72521: LD_VAR 0 1
72525: PPUSH
72526: CALL_OW 1
72530: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
72531: LD_ADDR_EXP 113
72535: PUSH
72536: LD_EXP 113
72540: PPUSH
72541: LD_EXP 113
72545: PUSH
72546: LD_INT 1
72548: PLUS
72549: PPUSH
72550: EMPTY
72551: PPUSH
72552: CALL_OW 1
72556: ST_TO_ADDR
// end end ;
72557: GO 72486
72559: POP
72560: POP
// for i := minerMinesList downto 1 do
72561: LD_ADDR_VAR 0 1
72565: PUSH
72566: DOUBLE
72567: LD_EXP 113
72571: INC
72572: ST_TO_ADDR
72573: LD_INT 1
72575: PUSH
72576: FOR_DOWNTO
72577: IFFALSE 72913
// begin if IsLive ( minersList [ i ] ) then
72579: LD_EXP 112
72583: PUSH
72584: LD_VAR 0 1
72588: ARRAY
72589: PPUSH
72590: CALL_OW 300
72594: IFFALSE 72622
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
72596: LD_EXP 112
72600: PUSH
72601: LD_VAR 0 1
72605: ARRAY
72606: PPUSH
72607: LD_EXP 113
72611: PUSH
72612: LD_VAR 0 1
72616: ARRAY
72617: PPUSH
72618: CALL_OW 505
// if not minerMinesList [ i ] then
72622: LD_EXP 113
72626: PUSH
72627: LD_VAR 0 1
72631: ARRAY
72632: NOT
72633: IFFALSE 72637
// continue ;
72635: GO 72576
// for j := minerMinesList [ i ] downto 1 do
72637: LD_ADDR_VAR 0 2
72641: PUSH
72642: DOUBLE
72643: LD_EXP 113
72647: PUSH
72648: LD_VAR 0 1
72652: ARRAY
72653: INC
72654: ST_TO_ADDR
72655: LD_INT 1
72657: PUSH
72658: FOR_DOWNTO
72659: IFFALSE 72909
// begin side := GetSide ( minersList [ i ] ) ;
72661: LD_ADDR_VAR 0 3
72665: PUSH
72666: LD_EXP 112
72670: PUSH
72671: LD_VAR 0 1
72675: ARRAY
72676: PPUSH
72677: CALL_OW 255
72681: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
72682: LD_ADDR_VAR 0 4
72686: PUSH
72687: LD_EXP 113
72691: PUSH
72692: LD_VAR 0 1
72696: ARRAY
72697: PUSH
72698: LD_VAR 0 2
72702: ARRAY
72703: PUSH
72704: LD_INT 1
72706: ARRAY
72707: PPUSH
72708: LD_EXP 113
72712: PUSH
72713: LD_VAR 0 1
72717: ARRAY
72718: PUSH
72719: LD_VAR 0 2
72723: ARRAY
72724: PUSH
72725: LD_INT 2
72727: ARRAY
72728: PPUSH
72729: CALL_OW 428
72733: ST_TO_ADDR
// if not tmp then
72734: LD_VAR 0 4
72738: NOT
72739: IFFALSE 72743
// continue ;
72741: GO 72658
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
72743: LD_VAR 0 4
72747: PUSH
72748: LD_INT 81
72750: PUSH
72751: LD_VAR 0 3
72755: PUSH
72756: EMPTY
72757: LIST
72758: LIST
72759: PPUSH
72760: CALL_OW 69
72764: IN
72765: PUSH
72766: LD_EXP 113
72770: PUSH
72771: LD_VAR 0 1
72775: ARRAY
72776: PUSH
72777: LD_VAR 0 2
72781: ARRAY
72782: PUSH
72783: LD_INT 1
72785: ARRAY
72786: PPUSH
72787: LD_EXP 113
72791: PUSH
72792: LD_VAR 0 1
72796: ARRAY
72797: PUSH
72798: LD_VAR 0 2
72802: ARRAY
72803: PUSH
72804: LD_INT 2
72806: ARRAY
72807: PPUSH
72808: CALL_OW 458
72812: AND
72813: IFFALSE 72907
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
72815: LD_EXP 113
72819: PUSH
72820: LD_VAR 0 1
72824: ARRAY
72825: PUSH
72826: LD_VAR 0 2
72830: ARRAY
72831: PUSH
72832: LD_INT 1
72834: ARRAY
72835: PPUSH
72836: LD_EXP 113
72840: PUSH
72841: LD_VAR 0 1
72845: ARRAY
72846: PUSH
72847: LD_VAR 0 2
72851: ARRAY
72852: PUSH
72853: LD_INT 2
72855: ARRAY
72856: PPUSH
72857: LD_VAR 0 3
72861: PPUSH
72862: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
72866: LD_ADDR_EXP 113
72870: PUSH
72871: LD_EXP 113
72875: PPUSH
72876: LD_VAR 0 1
72880: PPUSH
72881: LD_EXP 113
72885: PUSH
72886: LD_VAR 0 1
72890: ARRAY
72891: PPUSH
72892: LD_VAR 0 2
72896: PPUSH
72897: CALL_OW 3
72901: PPUSH
72902: CALL_OW 1
72906: ST_TO_ADDR
// end ; end ;
72907: GO 72658
72909: POP
72910: POP
// end ;
72911: GO 72576
72913: POP
72914: POP
// end ;
72915: PPOPN 4
72917: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
72918: LD_INT 0
72920: PPUSH
72921: PPUSH
// result := false ;
72922: LD_ADDR_VAR 0 4
72926: PUSH
72927: LD_INT 0
72929: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
72930: LD_VAR 0 1
72934: PPUSH
72935: CALL_OW 264
72939: PUSH
72940: LD_INT 81
72942: EQUAL
72943: NOT
72944: IFFALSE 72948
// exit ;
72946: GO 73188
// index := GetElementIndex ( minersList , unit ) ;
72948: LD_ADDR_VAR 0 5
72952: PUSH
72953: LD_EXP 112
72957: PPUSH
72958: LD_VAR 0 1
72962: PPUSH
72963: CALL 7652 0 2
72967: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
72968: LD_EXP 113
72972: PUSH
72973: LD_VAR 0 5
72977: ARRAY
72978: PUSH
72979: LD_EXP 114
72983: GREATEREQUAL
72984: IFFALSE 72988
// exit ;
72986: GO 73188
// ComMoveXY ( unit , x , y ) ;
72988: LD_VAR 0 1
72992: PPUSH
72993: LD_VAR 0 2
72997: PPUSH
72998: LD_VAR 0 3
73002: PPUSH
73003: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
73007: LD_INT 35
73009: PPUSH
73010: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
73014: LD_VAR 0 1
73018: PPUSH
73019: LD_VAR 0 2
73023: PPUSH
73024: LD_VAR 0 3
73028: PPUSH
73029: CALL 39393 0 3
73033: NOT
73034: PUSH
73035: LD_VAR 0 1
73039: PPUSH
73040: CALL_OW 314
73044: AND
73045: IFFALSE 73049
// exit ;
73047: GO 73188
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
73049: LD_VAR 0 2
73053: PPUSH
73054: LD_VAR 0 3
73058: PPUSH
73059: CALL_OW 428
73063: PUSH
73064: LD_VAR 0 1
73068: EQUAL
73069: PUSH
73070: LD_VAR 0 1
73074: PPUSH
73075: CALL_OW 314
73079: NOT
73080: AND
73081: IFFALSE 73007
// PlaySoundXY ( x , y , PlantMine ) ;
73083: LD_VAR 0 2
73087: PPUSH
73088: LD_VAR 0 3
73092: PPUSH
73093: LD_STRING PlantMine
73095: PPUSH
73096: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
73100: LD_VAR 0 2
73104: PPUSH
73105: LD_VAR 0 3
73109: PPUSH
73110: LD_VAR 0 1
73114: PPUSH
73115: CALL_OW 255
73119: PPUSH
73120: LD_INT 0
73122: PPUSH
73123: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
73127: LD_ADDR_EXP 113
73131: PUSH
73132: LD_EXP 113
73136: PPUSH
73137: LD_VAR 0 5
73141: PUSH
73142: LD_EXP 113
73146: PUSH
73147: LD_VAR 0 5
73151: ARRAY
73152: PUSH
73153: LD_INT 1
73155: PLUS
73156: PUSH
73157: EMPTY
73158: LIST
73159: LIST
73160: PPUSH
73161: LD_VAR 0 2
73165: PUSH
73166: LD_VAR 0 3
73170: PUSH
73171: EMPTY
73172: LIST
73173: LIST
73174: PPUSH
73175: CALL 7867 0 3
73179: ST_TO_ADDR
// result := true ;
73180: LD_ADDR_VAR 0 4
73184: PUSH
73185: LD_INT 1
73187: ST_TO_ADDR
// end ;
73188: LD_VAR 0 4
73192: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
73193: LD_INT 0
73195: PPUSH
73196: PPUSH
73197: PPUSH
// if not unit in minersList then
73198: LD_VAR 0 1
73202: PUSH
73203: LD_EXP 112
73207: IN
73208: NOT
73209: IFFALSE 73213
// exit ;
73211: GO 73605
// index := GetElementIndex ( minersList , unit ) ;
73213: LD_ADDR_VAR 0 6
73217: PUSH
73218: LD_EXP 112
73222: PPUSH
73223: LD_VAR 0 1
73227: PPUSH
73228: CALL 7652 0 2
73232: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
73233: LD_ADDR_VAR 0 5
73237: PUSH
73238: DOUBLE
73239: LD_EXP 113
73243: PUSH
73244: LD_VAR 0 6
73248: ARRAY
73249: INC
73250: ST_TO_ADDR
73251: LD_INT 1
73253: PUSH
73254: FOR_DOWNTO
73255: IFFALSE 73416
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
73257: LD_EXP 113
73261: PUSH
73262: LD_VAR 0 6
73266: ARRAY
73267: PUSH
73268: LD_VAR 0 5
73272: ARRAY
73273: PUSH
73274: LD_INT 1
73276: ARRAY
73277: PUSH
73278: LD_VAR 0 2
73282: EQUAL
73283: PUSH
73284: LD_EXP 113
73288: PUSH
73289: LD_VAR 0 6
73293: ARRAY
73294: PUSH
73295: LD_VAR 0 5
73299: ARRAY
73300: PUSH
73301: LD_INT 2
73303: ARRAY
73304: PUSH
73305: LD_VAR 0 3
73309: EQUAL
73310: AND
73311: IFFALSE 73414
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
73313: LD_EXP 113
73317: PUSH
73318: LD_VAR 0 6
73322: ARRAY
73323: PUSH
73324: LD_VAR 0 5
73328: ARRAY
73329: PUSH
73330: LD_INT 1
73332: ARRAY
73333: PPUSH
73334: LD_EXP 113
73338: PUSH
73339: LD_VAR 0 6
73343: ARRAY
73344: PUSH
73345: LD_VAR 0 5
73349: ARRAY
73350: PUSH
73351: LD_INT 2
73353: ARRAY
73354: PPUSH
73355: LD_VAR 0 1
73359: PPUSH
73360: CALL_OW 255
73364: PPUSH
73365: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
73369: LD_ADDR_EXP 113
73373: PUSH
73374: LD_EXP 113
73378: PPUSH
73379: LD_VAR 0 6
73383: PPUSH
73384: LD_EXP 113
73388: PUSH
73389: LD_VAR 0 6
73393: ARRAY
73394: PPUSH
73395: LD_VAR 0 5
73399: PPUSH
73400: CALL_OW 3
73404: PPUSH
73405: CALL_OW 1
73409: ST_TO_ADDR
// exit ;
73410: POP
73411: POP
73412: GO 73605
// end ; end ;
73414: GO 73254
73416: POP
73417: POP
// for i := minerMinesList [ index ] downto 1 do
73418: LD_ADDR_VAR 0 5
73422: PUSH
73423: DOUBLE
73424: LD_EXP 113
73428: PUSH
73429: LD_VAR 0 6
73433: ARRAY
73434: INC
73435: ST_TO_ADDR
73436: LD_INT 1
73438: PUSH
73439: FOR_DOWNTO
73440: IFFALSE 73603
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
73442: LD_EXP 113
73446: PUSH
73447: LD_VAR 0 6
73451: ARRAY
73452: PUSH
73453: LD_VAR 0 5
73457: ARRAY
73458: PUSH
73459: LD_INT 1
73461: ARRAY
73462: PPUSH
73463: LD_EXP 113
73467: PUSH
73468: LD_VAR 0 6
73472: ARRAY
73473: PUSH
73474: LD_VAR 0 5
73478: ARRAY
73479: PUSH
73480: LD_INT 2
73482: ARRAY
73483: PPUSH
73484: LD_VAR 0 2
73488: PPUSH
73489: LD_VAR 0 3
73493: PPUSH
73494: CALL_OW 298
73498: PUSH
73499: LD_INT 6
73501: LESS
73502: IFFALSE 73601
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
73504: LD_EXP 113
73508: PUSH
73509: LD_VAR 0 6
73513: ARRAY
73514: PUSH
73515: LD_VAR 0 5
73519: ARRAY
73520: PUSH
73521: LD_INT 1
73523: ARRAY
73524: PPUSH
73525: LD_EXP 113
73529: PUSH
73530: LD_VAR 0 6
73534: ARRAY
73535: PUSH
73536: LD_VAR 0 5
73540: ARRAY
73541: PUSH
73542: LD_INT 2
73544: ARRAY
73545: PPUSH
73546: LD_VAR 0 1
73550: PPUSH
73551: CALL_OW 255
73555: PPUSH
73556: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
73560: LD_ADDR_EXP 113
73564: PUSH
73565: LD_EXP 113
73569: PPUSH
73570: LD_VAR 0 6
73574: PPUSH
73575: LD_EXP 113
73579: PUSH
73580: LD_VAR 0 6
73584: ARRAY
73585: PPUSH
73586: LD_VAR 0 5
73590: PPUSH
73591: CALL_OW 3
73595: PPUSH
73596: CALL_OW 1
73600: ST_TO_ADDR
// end ; end ;
73601: GO 73439
73603: POP
73604: POP
// end ;
73605: LD_VAR 0 4
73609: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
73610: LD_INT 0
73612: PPUSH
73613: PPUSH
73614: PPUSH
73615: PPUSH
73616: PPUSH
73617: PPUSH
73618: PPUSH
73619: PPUSH
73620: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
73621: LD_VAR 0 1
73625: PPUSH
73626: CALL_OW 264
73630: PUSH
73631: LD_INT 81
73633: EQUAL
73634: NOT
73635: PUSH
73636: LD_VAR 0 1
73640: PUSH
73641: LD_EXP 112
73645: IN
73646: NOT
73647: OR
73648: IFFALSE 73652
// exit ;
73650: GO 73974
// index := GetElementIndex ( minersList , unit ) ;
73652: LD_ADDR_VAR 0 6
73656: PUSH
73657: LD_EXP 112
73661: PPUSH
73662: LD_VAR 0 1
73666: PPUSH
73667: CALL 7652 0 2
73671: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
73672: LD_ADDR_VAR 0 8
73676: PUSH
73677: LD_EXP 114
73681: PUSH
73682: LD_EXP 113
73686: PUSH
73687: LD_VAR 0 6
73691: ARRAY
73692: MINUS
73693: ST_TO_ADDR
// if not minesFreeAmount then
73694: LD_VAR 0 8
73698: NOT
73699: IFFALSE 73703
// exit ;
73701: GO 73974
// tmp := [ ] ;
73703: LD_ADDR_VAR 0 7
73707: PUSH
73708: EMPTY
73709: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
73710: LD_ADDR_VAR 0 5
73714: PUSH
73715: DOUBLE
73716: LD_INT 1
73718: DEC
73719: ST_TO_ADDR
73720: LD_VAR 0 8
73724: PUSH
73725: FOR_TO
73726: IFFALSE 73921
// begin _d := rand ( 0 , 5 ) ;
73728: LD_ADDR_VAR 0 11
73732: PUSH
73733: LD_INT 0
73735: PPUSH
73736: LD_INT 5
73738: PPUSH
73739: CALL_OW 12
73743: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
73744: LD_ADDR_VAR 0 12
73748: PUSH
73749: LD_INT 2
73751: PPUSH
73752: LD_INT 6
73754: PPUSH
73755: CALL_OW 12
73759: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
73760: LD_ADDR_VAR 0 9
73764: PUSH
73765: LD_VAR 0 2
73769: PPUSH
73770: LD_VAR 0 11
73774: PPUSH
73775: LD_VAR 0 12
73779: PPUSH
73780: CALL_OW 272
73784: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
73785: LD_ADDR_VAR 0 10
73789: PUSH
73790: LD_VAR 0 3
73794: PPUSH
73795: LD_VAR 0 11
73799: PPUSH
73800: LD_VAR 0 12
73804: PPUSH
73805: CALL_OW 273
73809: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
73810: LD_VAR 0 9
73814: PPUSH
73815: LD_VAR 0 10
73819: PPUSH
73820: CALL_OW 488
73824: PUSH
73825: LD_VAR 0 9
73829: PUSH
73830: LD_VAR 0 10
73834: PUSH
73835: EMPTY
73836: LIST
73837: LIST
73838: PUSH
73839: LD_VAR 0 7
73843: IN
73844: NOT
73845: AND
73846: PUSH
73847: LD_VAR 0 9
73851: PPUSH
73852: LD_VAR 0 10
73856: PPUSH
73857: CALL_OW 458
73861: NOT
73862: AND
73863: IFFALSE 73905
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
73865: LD_ADDR_VAR 0 7
73869: PUSH
73870: LD_VAR 0 7
73874: PPUSH
73875: LD_VAR 0 7
73879: PUSH
73880: LD_INT 1
73882: PLUS
73883: PPUSH
73884: LD_VAR 0 9
73888: PUSH
73889: LD_VAR 0 10
73893: PUSH
73894: EMPTY
73895: LIST
73896: LIST
73897: PPUSH
73898: CALL_OW 1
73902: ST_TO_ADDR
73903: GO 73919
// i := i - 1 ;
73905: LD_ADDR_VAR 0 5
73909: PUSH
73910: LD_VAR 0 5
73914: PUSH
73915: LD_INT 1
73917: MINUS
73918: ST_TO_ADDR
// end ;
73919: GO 73725
73921: POP
73922: POP
// for i in tmp do
73923: LD_ADDR_VAR 0 5
73927: PUSH
73928: LD_VAR 0 7
73932: PUSH
73933: FOR_IN
73934: IFFALSE 73972
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
73936: LD_VAR 0 1
73940: PPUSH
73941: LD_VAR 0 5
73945: PUSH
73946: LD_INT 1
73948: ARRAY
73949: PPUSH
73950: LD_VAR 0 5
73954: PUSH
73955: LD_INT 2
73957: ARRAY
73958: PPUSH
73959: CALL 72918 0 3
73963: NOT
73964: IFFALSE 73970
// exit ;
73966: POP
73967: POP
73968: GO 73974
73970: GO 73933
73972: POP
73973: POP
// end ;
73974: LD_VAR 0 4
73978: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
73979: LD_INT 0
73981: PPUSH
73982: PPUSH
73983: PPUSH
73984: PPUSH
73985: PPUSH
73986: PPUSH
73987: PPUSH
73988: PPUSH
73989: PPUSH
// if GetClass ( unit ) <> class_sniper then
73990: LD_VAR 0 1
73994: PPUSH
73995: CALL_OW 257
73999: PUSH
74000: LD_INT 5
74002: NONEQUAL
74003: IFFALSE 74007
// exit ;
74005: GO 74473
// dist := 8 ;
74007: LD_ADDR_VAR 0 5
74011: PUSH
74012: LD_INT 8
74014: ST_TO_ADDR
// viewRange := 12 ;
74015: LD_ADDR_VAR 0 8
74019: PUSH
74020: LD_INT 12
74022: ST_TO_ADDR
// side := GetSide ( unit ) ;
74023: LD_ADDR_VAR 0 6
74027: PUSH
74028: LD_VAR 0 1
74032: PPUSH
74033: CALL_OW 255
74037: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
74038: LD_INT 61
74040: PPUSH
74041: LD_VAR 0 6
74045: PPUSH
74046: CALL_OW 321
74050: PUSH
74051: LD_INT 2
74053: EQUAL
74054: IFFALSE 74064
// viewRange := 16 ;
74056: LD_ADDR_VAR 0 8
74060: PUSH
74061: LD_INT 16
74063: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
74064: LD_VAR 0 1
74068: PPUSH
74069: LD_VAR 0 2
74073: PPUSH
74074: LD_VAR 0 3
74078: PPUSH
74079: CALL_OW 297
74083: PUSH
74084: LD_VAR 0 5
74088: GREATER
74089: IFFALSE 74168
// begin ComMoveXY ( unit , x , y ) ;
74091: LD_VAR 0 1
74095: PPUSH
74096: LD_VAR 0 2
74100: PPUSH
74101: LD_VAR 0 3
74105: PPUSH
74106: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
74110: LD_INT 35
74112: PPUSH
74113: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
74117: LD_VAR 0 1
74121: PPUSH
74122: LD_VAR 0 2
74126: PPUSH
74127: LD_VAR 0 3
74131: PPUSH
74132: CALL 39393 0 3
74136: NOT
74137: IFFALSE 74141
// exit ;
74139: GO 74473
// until GetDistUnitXY ( unit , x , y ) < dist ;
74141: LD_VAR 0 1
74145: PPUSH
74146: LD_VAR 0 2
74150: PPUSH
74151: LD_VAR 0 3
74155: PPUSH
74156: CALL_OW 297
74160: PUSH
74161: LD_VAR 0 5
74165: LESS
74166: IFFALSE 74110
// end ; ComTurnXY ( unit , x , y ) ;
74168: LD_VAR 0 1
74172: PPUSH
74173: LD_VAR 0 2
74177: PPUSH
74178: LD_VAR 0 3
74182: PPUSH
74183: CALL_OW 118
// repeat if Multiplayer then
74187: LD_OWVAR 4
74191: IFFALSE 74202
// wait ( 35 ) else
74193: LD_INT 35
74195: PPUSH
74196: CALL_OW 67
74200: GO 74209
// wait ( 5 ) ;
74202: LD_INT 5
74204: PPUSH
74205: CALL_OW 67
// _d := GetDir ( unit ) ;
74209: LD_ADDR_VAR 0 11
74213: PUSH
74214: LD_VAR 0 1
74218: PPUSH
74219: CALL_OW 254
74223: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
74224: LD_ADDR_VAR 0 7
74228: PUSH
74229: LD_VAR 0 1
74233: PPUSH
74234: CALL_OW 250
74238: PPUSH
74239: LD_VAR 0 1
74243: PPUSH
74244: CALL_OW 251
74248: PPUSH
74249: LD_VAR 0 2
74253: PPUSH
74254: LD_VAR 0 3
74258: PPUSH
74259: CALL 42001 0 4
74263: ST_TO_ADDR
// until dir = _d ;
74264: LD_VAR 0 7
74268: PUSH
74269: LD_VAR 0 11
74273: EQUAL
74274: IFFALSE 74187
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
74276: LD_ADDR_VAR 0 9
74280: PUSH
74281: LD_VAR 0 1
74285: PPUSH
74286: CALL_OW 250
74290: PPUSH
74291: LD_VAR 0 7
74295: PPUSH
74296: LD_VAR 0 5
74300: PPUSH
74301: CALL_OW 272
74305: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
74306: LD_ADDR_VAR 0 10
74310: PUSH
74311: LD_VAR 0 1
74315: PPUSH
74316: CALL_OW 251
74320: PPUSH
74321: LD_VAR 0 7
74325: PPUSH
74326: LD_VAR 0 5
74330: PPUSH
74331: CALL_OW 273
74335: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
74336: LD_VAR 0 9
74340: PPUSH
74341: LD_VAR 0 10
74345: PPUSH
74346: CALL_OW 488
74350: NOT
74351: IFFALSE 74355
// exit ;
74353: GO 74473
// ComAnimCustom ( unit , 1 ) ;
74355: LD_VAR 0 1
74359: PPUSH
74360: LD_INT 1
74362: PPUSH
74363: CALL_OW 592
// p := 0 ;
74367: LD_ADDR_VAR 0 12
74371: PUSH
74372: LD_INT 0
74374: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
74375: LD_VAR 0 9
74379: PPUSH
74380: LD_VAR 0 10
74384: PPUSH
74385: LD_VAR 0 6
74389: PPUSH
74390: LD_VAR 0 8
74394: PPUSH
74395: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
74399: LD_INT 35
74401: PPUSH
74402: CALL_OW 67
// p := Inc ( p ) ;
74406: LD_ADDR_VAR 0 12
74410: PUSH
74411: LD_VAR 0 12
74415: PPUSH
74416: CALL 41957 0 1
74420: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
74421: LD_VAR 0 12
74425: PUSH
74426: LD_INT 3
74428: EQUAL
74429: PUSH
74430: LD_VAR 0 1
74434: PPUSH
74435: CALL_OW 302
74439: NOT
74440: OR
74441: PUSH
74442: LD_VAR 0 1
74446: PPUSH
74447: CALL_OW 301
74451: OR
74452: IFFALSE 74399
// RemoveSeeing ( _x , _y , side ) ;
74454: LD_VAR 0 9
74458: PPUSH
74459: LD_VAR 0 10
74463: PPUSH
74464: LD_VAR 0 6
74468: PPUSH
74469: CALL_OW 331
// end ;
74473: LD_VAR 0 4
74477: RET
